// starting begin PrepareMap ;
   0: CALL 13 0 0
// Main_Variables ;
   4: CALL 136 0 0
// Start_Mission ;
   8: CALL 3472 0 0
// end ;
  12: END
// function PrepareMap ; begin
  13: LD_INT 0
  15: PPUSH
// ResetFog ;
  16: CALL_OW 335
// RandomizeAll ;
  20: CALL_OW 11
// game_difficulty := GetMultiplayerSetting ( 0 ) ;
  24: LD_ADDR_EXP 2
  28: PUSH
  29: LD_INT 0
  31: PPUSH
  32: CALL_OW 426
  36: ST_TO_ADDR
// Difficulty := game_difficulty ;
  37: LD_ADDR_OWVAR 67
  41: PUSH
  42: LD_EXP 2
  46: ST_TO_ADDR
// ChangeSideFog ( 8 , 6 ) ;
  47: LD_INT 8
  49: PPUSH
  50: LD_INT 6
  52: PPUSH
  53: CALL_OW 343
// PlaceSeeing ( 1 , 1 , 8 , - 37963 ) ;
  57: LD_INT 1
  59: PPUSH
  60: LD_INT 1
  62: PPUSH
  63: LD_INT 8
  65: PPUSH
  66: LD_INT 37963
  68: NEG
  69: PPUSH
  70: CALL_OW 330
// RemoveSeeing ( 1 , 1 , 8 ) ;
  74: LD_INT 1
  76: PPUSH
  77: LD_INT 1
  79: PPUSH
  80: LD_INT 8
  82: PPUSH
  83: CALL_OW 331
// PlaceCamera ;
  87: CALL 3939 0 0
// CreateNature ( nature , 4 , 3 , 2 , 1 ) ;
  91: LD_INT 2
  93: PPUSH
  94: LD_INT 4
  96: PPUSH
  97: LD_INT 3
  99: PPUSH
 100: LD_INT 2
 102: PPUSH
 103: LD_INT 1
 105: PPUSH
 106: CALL 7889 0 5
// PrepareComm ;
 110: CALL 8372 0 0
// SetSide ( fort , 6 ) ;
 114: LD_INT 23
 116: PPUSH
 117: LD_INT 6
 119: PPUSH
 120: CALL_OW 235
// CenterNowOnUnits ( fort ) ;
 124: LD_INT 23
 126: PPUSH
 127: CALL_OW 87
// end ;
 131: LD_VAR 0 1
 135: RET
// export game_on , game_difficulty , game_time , game_option , game_end , game_strings ; export leopold , leopold_in_fort , samuel , samuel_in_fort , mortars_in_fort , scout ; export u_mine , u_fac ; export areas ; export skill ; export ar_weapons , ru_weapons , us_weapons ; export arabian_force , russian_force , american_force , arabian_timeing , russian_timeing , american_timeing ; export meeting_start , meeting_arive , meeting_break , meeting_end , meeting_time , russian_timer , fort_destroyed , hero_died , mission_time , cargo_ok , american_hchan , dezert , arabian_attack , russian_attack , american_attack , american_help , american_sib_bomb , russian_trade , heike_dialog1 , heike_dialog2 ; export am_comander , ru_comander , ar_comander ; function Main_Variables ; begin
 136: LD_INT 0
 138: PPUSH
// game_on := false ;
 139: LD_ADDR_EXP 1
 143: PUSH
 144: LD_INT 0
 146: ST_TO_ADDR
// game_time := 0 0$00 ;
 147: LD_ADDR_EXP 3
 151: PUSH
 152: LD_INT 0
 154: ST_TO_ADDR
// game_option := [ 1 ] ;
 155: LD_ADDR_EXP 4
 159: PUSH
 160: LD_INT 1
 162: PUSH
 163: EMPTY
 164: LIST
 165: ST_TO_ADDR
// game_end := false ;
 166: LD_ADDR_EXP 5
 170: PUSH
 171: LD_INT 0
 173: ST_TO_ADDR
// game_strings := [ ] ;
 174: LD_ADDR_EXP 6
 178: PUSH
 179: EMPTY
 180: ST_TO_ADDR
// game_time := 0 0$00 ;
 181: LD_ADDR_EXP 3
 185: PUSH
 186: LD_INT 0
 188: ST_TO_ADDR
// mission_time := 0 0$00 ;
 189: LD_ADDR_EXP 34
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// skill := [ 5 , 7 , 9 ] [ game_difficulty ] ;
 197: LD_ADDR_EXP 16
 201: PUSH
 202: LD_INT 5
 204: PUSH
 205: LD_INT 7
 207: PUSH
 208: LD_INT 9
 210: PUSH
 211: EMPTY
 212: LIST
 213: LIST
 214: LIST
 215: PUSH
 216: LD_EXP 2
 220: ARRAY
 221: ST_TO_ADDR
// areas := [ a_swest , a_nwest , a_neast , a_seast ] ;
 222: LD_ADDR_EXP 15
 226: PUSH
 227: LD_INT 5
 229: PUSH
 230: LD_INT 6
 232: PUSH
 233: LD_INT 7
 235: PUSH
 236: LD_INT 8
 238: PUSH
 239: EMPTY
 240: LIST
 241: LIST
 242: LIST
 243: LIST
 244: ST_TO_ADDR
// meeting_start := false ;
 245: LD_ADDR_EXP 26
 249: PUSH
 250: LD_INT 0
 252: ST_TO_ADDR
// meeting_arive := false ;
 253: LD_ADDR_EXP 27
 257: PUSH
 258: LD_INT 0
 260: ST_TO_ADDR
// meeting_break := false ;
 261: LD_ADDR_EXP 28
 265: PUSH
 266: LD_INT 0
 268: ST_TO_ADDR
// meeting_end := false ;
 269: LD_ADDR_EXP 29
 273: PUSH
 274: LD_INT 0
 276: ST_TO_ADDR
// meeting_time := [ 4 4$00 , 3 3$40 , 3 3$20 ] [ game_difficulty ] ;
 277: LD_ADDR_EXP 30
 281: PUSH
 282: LD_INT 8400
 284: PUSH
 285: LD_INT 7700
 287: PUSH
 288: LD_INT 7000
 290: PUSH
 291: EMPTY
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: LD_EXP 2
 300: ARRAY
 301: ST_TO_ADDR
// arabian_force := [ 4 , 5 , 6 ] [ game_difficulty ] ;
 302: LD_ADDR_EXP 20
 306: PUSH
 307: LD_INT 4
 309: PUSH
 310: LD_INT 5
 312: PUSH
 313: LD_INT 6
 315: PUSH
 316: EMPTY
 317: LIST
 318: LIST
 319: LIST
 320: PUSH
 321: LD_EXP 2
 325: ARRAY
 326: ST_TO_ADDR
// american_force := [ 5 , 6 , 7 ] [ game_difficulty ] ;
 327: LD_ADDR_EXP 22
 331: PUSH
 332: LD_INT 5
 334: PUSH
 335: LD_INT 6
 337: PUSH
 338: LD_INT 7
 340: PUSH
 341: EMPTY
 342: LIST
 343: LIST
 344: LIST
 345: PUSH
 346: LD_EXP 2
 350: ARRAY
 351: ST_TO_ADDR
// russian_force := [ 6 , 7 , 8 ] [ game_difficulty ] ;
 352: LD_ADDR_EXP 21
 356: PUSH
 357: LD_INT 6
 359: PUSH
 360: LD_INT 7
 362: PUSH
 363: LD_INT 8
 365: PUSH
 366: EMPTY
 367: LIST
 368: LIST
 369: LIST
 370: PUSH
 371: LD_EXP 2
 375: ARRAY
 376: ST_TO_ADDR
// u_mine := false ;
 377: LD_ADDR_EXP 13
 381: PUSH
 382: LD_INT 0
 384: ST_TO_ADDR
// u_fac := false ;
 385: LD_ADDR_EXP 14
 389: PUSH
 390: LD_INT 0
 392: ST_TO_ADDR
// leopold_in_fort := false ;
 393: LD_ADDR_EXP 8
 397: PUSH
 398: LD_INT 0
 400: ST_TO_ADDR
// samuel_in_fort := false ;
 401: LD_ADDR_EXP 10
 405: PUSH
 406: LD_INT 0
 408: ST_TO_ADDR
// mortars_in_fort := false ;
 409: LD_ADDR_EXP 11
 413: PUSH
 414: LD_INT 0
 416: ST_TO_ADDR
// fort_destroyed := false ;
 417: LD_ADDR_EXP 32
 421: PUSH
 422: LD_INT 0
 424: ST_TO_ADDR
// hero_died := false ;
 425: LD_ADDR_EXP 33
 429: PUSH
 430: LD_INT 0
 432: ST_TO_ADDR
// dezert := false ;
 433: LD_ADDR_EXP 37
 437: PUSH
 438: LD_INT 0
 440: ST_TO_ADDR
// arabian_attack := false ;
 441: LD_ADDR_EXP 38
 445: PUSH
 446: LD_INT 0
 448: ST_TO_ADDR
// russian_attack := false ;
 449: LD_ADDR_EXP 39
 453: PUSH
 454: LD_INT 0
 456: ST_TO_ADDR
// american_attack := false ;
 457: LD_ADDR_EXP 40
 461: PUSH
 462: LD_INT 0
 464: ST_TO_ADDR
// american_help := false ;
 465: LD_ADDR_EXP 41
 469: PUSH
 470: LD_INT 0
 472: ST_TO_ADDR
// american_hchan := [ 91 , 81 , 71 ] [ game_difficulty ] ;
 473: LD_ADDR_EXP 36
 477: PUSH
 478: LD_INT 91
 480: PUSH
 481: LD_INT 81
 483: PUSH
 484: LD_INT 71
 486: PUSH
 487: EMPTY
 488: LIST
 489: LIST
 490: LIST
 491: PUSH
 492: LD_EXP 2
 496: ARRAY
 497: ST_TO_ADDR
// american_sib_bomb := false ;
 498: LD_ADDR_EXP 42
 502: PUSH
 503: LD_INT 0
 505: ST_TO_ADDR
// russian_trade := false ;
 506: LD_ADDR_EXP 43
 510: PUSH
 511: LD_INT 0
 513: ST_TO_ADDR
// russian_timer := 5 5$00 ;
 514: LD_ADDR_EXP 31
 518: PUSH
 519: LD_INT 10500
 521: ST_TO_ADDR
// cargo_ok := false ;
 522: LD_ADDR_EXP 35
 526: PUSH
 527: LD_INT 0
 529: ST_TO_ADDR
// heike_dialog1 := false ;
 530: LD_ADDR_EXP 44
 534: PUSH
 535: LD_INT 0
 537: ST_TO_ADDR
// heike_dialog2 := false ;
 538: LD_ADDR_EXP 45
 542: PUSH
 543: LD_INT 0
 545: ST_TO_ADDR
// american_timeing := [ 10 10$00 , 9 9$50 , 9 9$30 ] [ game_difficulty ] ;
 546: LD_ADDR_EXP 25
 550: PUSH
 551: LD_INT 21000
 553: PUSH
 554: LD_INT 20650
 556: PUSH
 557: LD_INT 19950
 559: PUSH
 560: EMPTY
 561: LIST
 562: LIST
 563: LIST
 564: PUSH
 565: LD_EXP 2
 569: ARRAY
 570: ST_TO_ADDR
// arabian_timeing := [ 8 8$00 , 7 7$30 , 6 6$40 ] [ game_difficulty ] ;
 571: LD_ADDR_EXP 23
 575: PUSH
 576: LD_INT 16800
 578: PUSH
 579: LD_INT 15750
 581: PUSH
 582: LD_INT 14000
 584: PUSH
 585: EMPTY
 586: LIST
 587: LIST
 588: LIST
 589: PUSH
 590: LD_EXP 2
 594: ARRAY
 595: ST_TO_ADDR
// russian_timeing := [ 11 11$00 , 10 10$30 , 9 9$20 ] [ game_difficulty ] ;
 596: LD_ADDR_EXP 24
 600: PUSH
 601: LD_INT 23100
 603: PUSH
 604: LD_INT 22050
 606: PUSH
 607: LD_INT 19600
 609: PUSH
 610: EMPTY
 611: LIST
 612: LIST
 613: LIST
 614: PUSH
 615: LD_EXP 2
 619: ARRAY
 620: ST_TO_ADDR
// ar_weapons := [ ar_rocket_launcher , ar_gun , ar_flame_thrower , ar_selfpropelled_bomb , ar_bio_bomb ] ;
 621: LD_ADDR_EXP 17
 625: PUSH
 626: LD_INT 28
 628: PUSH
 629: LD_INT 27
 631: PUSH
 632: LD_INT 26
 634: PUSH
 635: LD_INT 29
 637: PUSH
 638: LD_INT 91
 640: PUSH
 641: EMPTY
 642: LIST
 643: LIST
 644: LIST
 645: LIST
 646: LIST
 647: ST_TO_ADDR
// us_weapons := [ us_rocket_launcher , us_heavy_gun , us_double_laser , us_laser ] ;
 648: LD_ADDR_EXP 19
 652: PUSH
 653: LD_INT 7
 655: PUSH
 656: LD_INT 6
 658: PUSH
 659: LD_INT 10
 661: PUSH
 662: LD_INT 9
 664: PUSH
 665: EMPTY
 666: LIST
 667: LIST
 668: LIST
 669: LIST
 670: ST_TO_ADDR
// ru_weapons := [ ru_rocket_launcher , ru_rocket , ru_heavy_gun , ru_heavy_gun ] ;
 671: LD_ADDR_EXP 18
 675: PUSH
 676: LD_INT 45
 678: PUSH
 679: LD_INT 47
 681: PUSH
 682: LD_INT 46
 684: PUSH
 685: LD_INT 46
 687: PUSH
 688: EMPTY
 689: LIST
 690: LIST
 691: LIST
 692: LIST
 693: ST_TO_ADDR
// end ;
 694: LD_VAR 0 1
 698: RET
// every 0 0$01 trigger game_on do var i , p , x , filter ;
 699: LD_EXP 1
 703: IFFALSE 3469
 705: GO 707
 707: DISABLE
 708: LD_INT 0
 710: PPUSH
 711: PPUSH
 712: PPUSH
 713: PPUSH
// begin enable ;
 714: ENABLE
// Display_Strings := [ #tick , game_time ] ^ game_strings ;
 715: LD_ADDR_OWVAR 47
 719: PUSH
 720: LD_STRING #tick
 722: PUSH
 723: LD_EXP 3
 727: PUSH
 728: EMPTY
 729: LIST
 730: LIST
 731: PUSH
 732: LD_EXP 6
 736: ADD
 737: ST_TO_ADDR
// game_time := RefreshTime ( game_time , true ) ;
 738: LD_ADDR_EXP 3
 742: PUSH
 743: LD_EXP 3
 747: PPUSH
 748: LD_INT 1
 750: PPUSH
 751: CALL 6975 0 2
 755: ST_TO_ADDR
// if meeting_start and meeting_time > 0 0$00 then
 756: LD_EXP 26
 760: PUSH
 761: LD_EXP 30
 765: PUSH
 766: LD_INT 0
 768: GREATER
 769: AND
 770: IFFALSE 807
// begin game_strings := [ #mtime , meeting_time ] ;
 772: LD_ADDR_EXP 6
 776: PUSH
 777: LD_STRING #mtime
 779: PUSH
 780: LD_EXP 30
 784: PUSH
 785: EMPTY
 786: LIST
 787: LIST
 788: ST_TO_ADDR
// meeting_time := RefreshTime ( meeting_time , false ) ;
 789: LD_ADDR_EXP 30
 793: PUSH
 794: LD_EXP 30
 798: PPUSH
 799: LD_INT 0
 801: PPUSH
 802: CALL 6975 0 2
 806: ST_TO_ADDR
// end ; if meeting_arive then
 807: LD_EXP 27
 811: IFFALSE 831
// mission_time := RefreshTime ( mission_time , true ) ;
 813: LD_ADDR_EXP 34
 817: PUSH
 818: LD_EXP 34
 822: PPUSH
 823: LD_INT 1
 825: PPUSH
 826: CALL 6975 0 2
 830: ST_TO_ADDR
// if arabian_attack and arabian_timeing > 0 0$00 and meeting_arive then
 831: LD_EXP 38
 835: PUSH
 836: LD_EXP 23
 840: PUSH
 841: LD_INT 0
 843: GREATER
 844: AND
 845: PUSH
 846: LD_EXP 27
 850: AND
 851: IFFALSE 871
// begin arabian_timeing := RefreshTime ( arabian_timeing , false ) ;
 853: LD_ADDR_EXP 23
 857: PUSH
 858: LD_EXP 23
 862: PPUSH
 863: LD_INT 0
 865: PPUSH
 866: CALL 6975 0 2
 870: ST_TO_ADDR
// end ; if russian_attack and russian_timeing > 0 0$00 and meeting_arive then
 871: LD_EXP 39
 875: PUSH
 876: LD_EXP 24
 880: PUSH
 881: LD_INT 0
 883: GREATER
 884: AND
 885: PUSH
 886: LD_EXP 27
 890: AND
 891: IFFALSE 911
// begin russian_timeing := RefreshTime ( russian_timeing , false ) ;
 893: LD_ADDR_EXP 24
 897: PUSH
 898: LD_EXP 24
 902: PPUSH
 903: LD_INT 0
 905: PPUSH
 906: CALL 6975 0 2
 910: ST_TO_ADDR
// end ; if american_attack and american_timeing > 0 0$00 and meeting_arive then
 911: LD_EXP 40
 915: PUSH
 916: LD_EXP 25
 920: PUSH
 921: LD_INT 0
 923: GREATER
 924: AND
 925: PUSH
 926: LD_EXP 27
 930: AND
 931: IFFALSE 951
// begin american_timeing := RefreshTime ( american_timeing , false ) ;
 933: LD_ADDR_EXP 25
 937: PUSH
 938: LD_EXP 25
 942: PPUSH
 943: LD_INT 0
 945: PPUSH
 946: CALL 6975 0 2
 950: ST_TO_ADDR
// end ; if russian_trade and russian_timer > 0 0$00 then
 951: LD_EXP 43
 955: PUSH
 956: LD_EXP 31
 960: PUSH
 961: LD_INT 0
 963: GREATER
 964: AND
 965: IFFALSE 1002
// begin game_strings := [ #rtime , russian_timer ] ;
 967: LD_ADDR_EXP 6
 971: PUSH
 972: LD_STRING #rtime
 974: PUSH
 975: LD_EXP 31
 979: PUSH
 980: EMPTY
 981: LIST
 982: LIST
 983: ST_TO_ADDR
// russian_timer := RefreshTime ( russian_timer , false ) ;
 984: LD_ADDR_EXP 31
 988: PUSH
 989: LD_EXP 31
 993: PPUSH
 994: LD_INT 0
 996: PPUSH
 997: CALL 6975 0 2
1001: ST_TO_ADDR
// end ; if russian_trade and russian_timer = 0 0$00 or cargo_ok then
1002: LD_EXP 43
1006: PUSH
1007: LD_EXP 31
1011: PUSH
1012: LD_INT 0
1014: EQUAL
1015: AND
1016: PUSH
1017: LD_EXP 35
1021: OR
1022: IFFALSE 1031
// game_strings := [ ] ;
1024: LD_ADDR_EXP 6
1028: PUSH
1029: EMPTY
1030: ST_TO_ADDR
// if dezert = false and tick mod 33600 = 0 then
1031: LD_EXP 37
1035: PUSH
1036: LD_INT 0
1038: EQUAL
1039: PUSH
1040: LD_OWVAR 1
1044: PUSH
1045: LD_INT 33600
1047: MOD
1048: PUSH
1049: LD_INT 0
1051: EQUAL
1052: AND
1053: IFFALSE 1113
// begin p := Rand ( 1 , 5 ) ;
1055: LD_ADDR_VAR 0 2
1059: PUSH
1060: LD_INT 1
1062: PPUSH
1063: LD_INT 5
1065: PPUSH
1066: CALL_OW 12
1070: ST_TO_ADDR
// if p <= [ 4 , 3 , 3 ] [ game_difficulty ] then
1071: LD_VAR 0 2
1075: PUSH
1076: LD_INT 4
1078: PUSH
1079: LD_INT 3
1081: PUSH
1082: LD_INT 3
1084: PUSH
1085: EMPTY
1086: LIST
1087: LIST
1088: LIST
1089: PUSH
1090: LD_EXP 2
1094: ARRAY
1095: LESSEQUAL
1096: IFFALSE 1113
// begin RaiseSailEvent ( 92 ) ;
1098: LD_INT 92
1100: PPUSH
1101: CALL_OW 427
// dezert := true ;
1105: LD_ADDR_EXP 37
1109: PUSH
1110: LD_INT 1
1112: ST_TO_ADDR
// end ; end ; if tick mod 8400 = 0 then
1113: LD_OWVAR 1
1117: PUSH
1118: LD_INT 8400
1120: MOD
1121: PUSH
1122: LD_INT 0
1124: EQUAL
1125: IFFALSE 1134
// RaiseSailEvent ( 101 ) ;
1127: LD_INT 101
1129: PPUSH
1130: CALL_OW 427
// if MineExist ( 8 ) and u_mine = false then
1134: LD_INT 8
1136: PPUSH
1137: CALL 7029 0 1
1141: PUSH
1142: LD_EXP 13
1146: PUSH
1147: LD_INT 0
1149: EQUAL
1150: AND
1151: IFFALSE 1168
// begin u_mine := true ;
1153: LD_ADDR_EXP 13
1157: PUSH
1158: LD_INT 1
1160: ST_TO_ADDR
// ChangeMissionObjectives ( DS-T1m ) ;
1161: LD_STRING DS-T1m
1163: PPUSH
1164: CALL_OW 337
// end ; if FacExist ( 8 ) and u_fac = false then
1168: LD_INT 8
1170: PPUSH
1171: CALL 7091 0 1
1175: PUSH
1176: LD_EXP 14
1180: PUSH
1181: LD_INT 0
1183: EQUAL
1184: AND
1185: IFFALSE 1202
// begin u_fac := true ;
1187: LD_ADDR_EXP 14
1191: PUSH
1192: LD_INT 1
1194: ST_TO_ADDR
// ChangeMissionObjectives ( DS-T1f ) ;
1195: LD_STRING DS-T1f
1197: PPUSH
1198: CALL_OW 337
// end ; if hero_died then
1202: LD_EXP 33
1206: IFFALSE 1215
// YouLost ( DS-h1 ) ;
1208: LD_STRING DS-h1
1210: PPUSH
1211: CALL_OW 104
// if fort_destroyed then
1215: LD_EXP 32
1219: IFFALSE 1228
// YouLost ( DS-h2 ) ;
1221: LD_STRING DS-h2
1223: PPUSH
1224: CALL_OW 104
// if GetDistUnits ( leopold , l_cmndr ) > 6 and meeting_start = false then
1228: LD_EXP 7
1232: PPUSH
1233: LD_EXP 49
1237: PPUSH
1238: CALL_OW 296
1242: PUSH
1243: LD_INT 6
1245: GREATER
1246: PUSH
1247: LD_EXP 26
1251: PUSH
1252: LD_INT 0
1254: EQUAL
1255: AND
1256: IFFALSE 1279
// begin if not HasTask ( leopold ) then
1258: LD_EXP 7
1262: PPUSH
1263: CALL_OW 314
1267: NOT
1268: IFFALSE 1277
// RaiseSailEvent ( 1 ) ;
1270: LD_INT 1
1272: PPUSH
1273: CALL_OW 427
// end else
1277: GO 1296
// if meeting_start = false then
1279: LD_EXP 26
1283: PUSH
1284: LD_INT 0
1286: EQUAL
1287: IFFALSE 1296
// begin RaiseSailEvent ( 2 ) ;
1289: LD_INT 2
1291: PPUSH
1292: CALL_OW 427
// end ; if game_time >= [ 50 50$00 , 62 62$30 , 72 72$00 ] [ game_difficulty ] and meeting_end = false then
1296: LD_EXP 3
1300: PUSH
1301: LD_INT 105000
1303: PUSH
1304: LD_INT 131250
1306: PUSH
1307: LD_INT 151200
1309: PUSH
1310: EMPTY
1311: LIST
1312: LIST
1313: LIST
1314: PUSH
1315: LD_EXP 2
1319: ARRAY
1320: GREATEREQUAL
1321: PUSH
1322: LD_EXP 29
1326: PUSH
1327: LD_INT 0
1329: EQUAL
1330: AND
1331: IFFALSE 1348
// begin meeting_end := true ;
1333: LD_ADDR_EXP 29
1337: PUSH
1338: LD_INT 1
1340: ST_TO_ADDR
// RaiseSailEvent ( 200 ) ;
1341: LD_INT 200
1343: PPUSH
1344: CALL_OW 427
// end ; if meeting_time = 0 0$00 and meeting_arive = false then
1348: LD_EXP 30
1352: PUSH
1353: LD_INT 0
1355: EQUAL
1356: PUSH
1357: LD_EXP 27
1361: PUSH
1362: LD_INT 0
1364: EQUAL
1365: AND
1366: IFFALSE 1390
// begin meeting_arive := true ;
1368: LD_ADDR_EXP 27
1372: PUSH
1373: LD_INT 1
1375: ST_TO_ADDR
// game_strings := [ ] ;
1376: LD_ADDR_EXP 6
1380: PUSH
1381: EMPTY
1382: ST_TO_ADDR
// RaiseSailEvent ( 10 ) ;
1383: LD_INT 10
1385: PPUSH
1386: CALL_OW 427
// end ; if meeting_arive then
1390: LD_EXP 27
1394: IFFALSE 2193
// begin if arabian_attack = false and tick mod 4200 = 0 then
1396: LD_EXP 38
1400: PUSH
1401: LD_INT 0
1403: EQUAL
1404: PUSH
1405: LD_OWVAR 1
1409: PUSH
1410: LD_INT 4200
1412: MOD
1413: PUSH
1414: LD_INT 0
1416: EQUAL
1417: AND
1418: IFFALSE 1471
// begin p := Rand ( 1 , 100 ) ;
1420: LD_ADDR_VAR 0 2
1424: PUSH
1425: LD_INT 1
1427: PPUSH
1428: LD_INT 100
1430: PPUSH
1431: CALL_OW 12
1435: ST_TO_ADDR
// if p <= [ 85 , 90 , 95 ] [ game_difficulty ] then
1436: LD_VAR 0 2
1440: PUSH
1441: LD_INT 85
1443: PUSH
1444: LD_INT 90
1446: PUSH
1447: LD_INT 95
1449: PUSH
1450: EMPTY
1451: LIST
1452: LIST
1453: LIST
1454: PUSH
1455: LD_EXP 2
1459: ARRAY
1460: LESSEQUAL
1461: IFFALSE 1471
// arabian_attack := true ;
1463: LD_ADDR_EXP 38
1467: PUSH
1468: LD_INT 1
1470: ST_TO_ADDR
// end ; if russian_trade = false and russian_attack = false and tick > 52500 then
1471: LD_EXP 43
1475: PUSH
1476: LD_INT 0
1478: EQUAL
1479: PUSH
1480: LD_EXP 39
1484: PUSH
1485: LD_INT 0
1487: EQUAL
1488: AND
1489: PUSH
1490: LD_OWVAR 1
1494: PUSH
1495: LD_INT 52500
1497: GREATER
1498: AND
1499: IFFALSE 1570
// begin russian_trade = true ;
1501: LD_ADDR_EXP 43
1505: PUSH
1506: LD_INT 1
1508: ST_TO_ADDR
// DialogueOn ;
1509: CALL_OW 6
// SayRadio ( ru_comander , DS-DR-RTr ) ;
1513: LD_EXP 47
1517: PPUSH
1518: LD_STRING DS-DR-RTr
1520: PPUSH
1521: CALL_OW 94
// Say ( l_cmndr , DS-DC-RTr ) ;
1525: LD_EXP 49
1529: PPUSH
1530: LD_STRING DS-DC-RTr
1532: PPUSH
1533: CALL_OW 88
// SayRadio ( ru_comander , DS-DR-RTr2 ) ;
1537: LD_EXP 47
1541: PPUSH
1542: LD_STRING DS-DR-RTr2
1544: PPUSH
1545: CALL_OW 94
// DialogueOff ;
1549: CALL_OW 7
// ChangeMissionObjectives ( DS-T2 ) ;
1553: LD_STRING DS-T2
1555: PPUSH
1556: CALL_OW 337
// SetAreaMapShow ( tree , 1 ) ;
1560: LD_INT 10
1562: PPUSH
1563: LD_INT 1
1565: PPUSH
1566: CALL_OW 424
// end ; if russian_trade and cargo_ok = false and russian_timer > 0 0$00 then
1570: LD_EXP 43
1574: PUSH
1575: LD_EXP 35
1579: PUSH
1580: LD_INT 0
1582: EQUAL
1583: AND
1584: PUSH
1585: LD_EXP 31
1589: PUSH
1590: LD_INT 0
1592: GREATER
1593: AND
1594: IFFALSE 1843
// begin if FilterUnitsInArea ( tree , ( [ [ f_empty ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] , [ f_not , [ f_control , control_remote ] ] ] ) ) > 0 then
1596: LD_INT 10
1598: PPUSH
1599: LD_INT 58
1601: PUSH
1602: EMPTY
1603: LIST
1604: PUSH
1605: LD_INT 2
1607: PUSH
1608: LD_INT 34
1610: PUSH
1611: LD_INT 32
1613: PUSH
1614: EMPTY
1615: LIST
1616: LIST
1617: PUSH
1618: LD_INT 34
1620: PUSH
1621: LD_INT 12
1623: PUSH
1624: EMPTY
1625: LIST
1626: LIST
1627: PUSH
1628: EMPTY
1629: LIST
1630: LIST
1631: LIST
1632: PUSH
1633: LD_INT 3
1635: PUSH
1636: LD_INT 33
1638: PUSH
1639: LD_INT 2
1641: PUSH
1642: EMPTY
1643: LIST
1644: LIST
1645: PUSH
1646: EMPTY
1647: LIST
1648: LIST
1649: PUSH
1650: EMPTY
1651: LIST
1652: LIST
1653: LIST
1654: PPUSH
1655: CALL_OW 70
1659: PUSH
1660: LD_INT 0
1662: GREATER
1663: IFFALSE 1843
// if GetCargo ( FilterUnitsInArea ( tree , ( [ [ f_empty ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] , [ f_not , [ f_control , control_remote ] ] ] ) ) [ 1 ] , mat_siberit ) = 100 then
1665: LD_INT 10
1667: PPUSH
1668: LD_INT 58
1670: PUSH
1671: EMPTY
1672: LIST
1673: PUSH
1674: LD_INT 2
1676: PUSH
1677: LD_INT 34
1679: PUSH
1680: LD_INT 32
1682: PUSH
1683: EMPTY
1684: LIST
1685: LIST
1686: PUSH
1687: LD_INT 34
1689: PUSH
1690: LD_INT 12
1692: PUSH
1693: EMPTY
1694: LIST
1695: LIST
1696: PUSH
1697: EMPTY
1698: LIST
1699: LIST
1700: LIST
1701: PUSH
1702: LD_INT 3
1704: PUSH
1705: LD_INT 33
1707: PUSH
1708: LD_INT 2
1710: PUSH
1711: EMPTY
1712: LIST
1713: LIST
1714: PUSH
1715: EMPTY
1716: LIST
1717: LIST
1718: PUSH
1719: EMPTY
1720: LIST
1721: LIST
1722: LIST
1723: PPUSH
1724: CALL_OW 70
1728: PUSH
1729: LD_INT 1
1731: ARRAY
1732: PPUSH
1733: LD_INT 3
1735: PPUSH
1736: CALL_OW 289
1740: PUSH
1741: LD_INT 100
1743: EQUAL
1744: IFFALSE 1843
// begin cargo_ok := true ;
1746: LD_ADDR_EXP 35
1750: PUSH
1751: LD_INT 1
1753: ST_TO_ADDR
// RemoveUnit ( FilterUnitsInArea ( tree , ( [ [ f_empty ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] , [ f_not , [ f_control , control_remote ] ] ] ) ) [ 1 ] ) ;
1754: LD_INT 10
1756: PPUSH
1757: LD_INT 58
1759: PUSH
1760: EMPTY
1761: LIST
1762: PUSH
1763: LD_INT 2
1765: PUSH
1766: LD_INT 34
1768: PUSH
1769: LD_INT 32
1771: PUSH
1772: EMPTY
1773: LIST
1774: LIST
1775: PUSH
1776: LD_INT 34
1778: PUSH
1779: LD_INT 12
1781: PUSH
1782: EMPTY
1783: LIST
1784: LIST
1785: PUSH
1786: EMPTY
1787: LIST
1788: LIST
1789: LIST
1790: PUSH
1791: LD_INT 3
1793: PUSH
1794: LD_INT 33
1796: PUSH
1797: LD_INT 2
1799: PUSH
1800: EMPTY
1801: LIST
1802: LIST
1803: PUSH
1804: EMPTY
1805: LIST
1806: LIST
1807: PUSH
1808: EMPTY
1809: LIST
1810: LIST
1811: LIST
1812: PPUSH
1813: CALL_OW 70
1817: PUSH
1818: LD_INT 1
1820: ARRAY
1821: PPUSH
1822: CALL_OW 64
// ChangeMissionObjectives ( DS-T2-out ) ;
1826: LD_STRING DS-T2-out
1828: PPUSH
1829: CALL_OW 337
// SetAreaMapShow ( tree , 0 ) ;
1833: LD_INT 10
1835: PPUSH
1836: LD_INT 0
1838: PPUSH
1839: CALL_OW 424
// end ; end ; if russian_attack = false and russian_trade and cargo_ok = false and russian_timer = 0 0$00 then
1843: LD_EXP 39
1847: PUSH
1848: LD_INT 0
1850: EQUAL
1851: PUSH
1852: LD_EXP 43
1856: AND
1857: PUSH
1858: LD_EXP 35
1862: PUSH
1863: LD_INT 0
1865: EQUAL
1866: AND
1867: PUSH
1868: LD_EXP 31
1872: PUSH
1873: LD_INT 0
1875: EQUAL
1876: AND
1877: IFFALSE 1904
// begin russian_attack := true ;
1879: LD_ADDR_EXP 39
1883: PUSH
1884: LD_INT 1
1886: ST_TO_ADDR
// ChangeMissionObjectives ( DS-T2-out ) ;
1887: LD_STRING DS-T2-out
1889: PPUSH
1890: CALL_OW 337
// SetAreaMapShow ( tree , 0 ) ;
1894: LD_INT 10
1896: PPUSH
1897: LD_INT 0
1899: PPUSH
1900: CALL_OW 424
// end ; if russian_trade = false and russian_attack = false and american_attack = false and tick mod 21000 = 0 then
1904: LD_EXP 43
1908: PUSH
1909: LD_INT 0
1911: EQUAL
1912: PUSH
1913: LD_EXP 39
1917: PUSH
1918: LD_INT 0
1920: EQUAL
1921: AND
1922: PUSH
1923: LD_EXP 40
1927: PUSH
1928: LD_INT 0
1930: EQUAL
1931: AND
1932: PUSH
1933: LD_OWVAR 1
1937: PUSH
1938: LD_INT 21000
1940: MOD
1941: PUSH
1942: LD_INT 0
1944: EQUAL
1945: AND
1946: IFFALSE 1999
// begin p := Rand ( 1 , 100 ) ;
1948: LD_ADDR_VAR 0 2
1952: PUSH
1953: LD_INT 1
1955: PPUSH
1956: LD_INT 100
1958: PPUSH
1959: CALL_OW 12
1963: ST_TO_ADDR
// if p <= [ 35 , 45 , 55 ] [ game_difficulty ] then
1964: LD_VAR 0 2
1968: PUSH
1969: LD_INT 35
1971: PUSH
1972: LD_INT 45
1974: PUSH
1975: LD_INT 55
1977: PUSH
1978: EMPTY
1979: LIST
1980: LIST
1981: LIST
1982: PUSH
1983: LD_EXP 2
1987: ARRAY
1988: LESSEQUAL
1989: IFFALSE 1999
// russian_attack := true ;
1991: LD_ADDR_EXP 39
1995: PUSH
1996: LD_INT 1
1998: ST_TO_ADDR
// end ; if american_help = false and american_attack = false and russian_attack = false and tick mod 31500 = 0 then
1999: LD_EXP 41
2003: PUSH
2004: LD_INT 0
2006: EQUAL
2007: PUSH
2008: LD_EXP 40
2012: PUSH
2013: LD_INT 0
2015: EQUAL
2016: AND
2017: PUSH
2018: LD_EXP 39
2022: PUSH
2023: LD_INT 0
2025: EQUAL
2026: AND
2027: PUSH
2028: LD_OWVAR 1
2032: PUSH
2033: LD_INT 31500
2035: MOD
2036: PUSH
2037: LD_INT 0
2039: EQUAL
2040: AND
2041: IFFALSE 2094
// begin p := Rand ( 1 , 100 ) ;
2043: LD_ADDR_VAR 0 2
2047: PUSH
2048: LD_INT 1
2050: PPUSH
2051: LD_INT 100
2053: PPUSH
2054: CALL_OW 12
2058: ST_TO_ADDR
// if p <= [ 33 , 44 , 55 ] [ game_difficulty ] then
2059: LD_VAR 0 2
2063: PUSH
2064: LD_INT 33
2066: PUSH
2067: LD_INT 44
2069: PUSH
2070: LD_INT 55
2072: PUSH
2073: EMPTY
2074: LIST
2075: LIST
2076: LIST
2077: PUSH
2078: LD_EXP 2
2082: ARRAY
2083: LESSEQUAL
2084: IFFALSE 2094
// american_attack := true ;
2086: LD_ADDR_EXP 40
2090: PUSH
2091: LD_INT 1
2093: ST_TO_ADDR
// end ; if american_attack = false and russian_attack = false and american_help = false and tick mod 21200 = 0 then
2094: LD_EXP 40
2098: PUSH
2099: LD_INT 0
2101: EQUAL
2102: PUSH
2103: LD_EXP 39
2107: PUSH
2108: LD_INT 0
2110: EQUAL
2111: AND
2112: PUSH
2113: LD_EXP 41
2117: PUSH
2118: LD_INT 0
2120: EQUAL
2121: AND
2122: PUSH
2123: LD_OWVAR 1
2127: PUSH
2128: LD_INT 21200
2130: MOD
2131: PUSH
2132: LD_INT 0
2134: EQUAL
2135: AND
2136: IFFALSE 2193
// begin p := Rand ( 1 , 100 ) ;
2138: LD_ADDR_VAR 0 2
2142: PUSH
2143: LD_INT 1
2145: PPUSH
2146: LD_INT 100
2148: PPUSH
2149: CALL_OW 12
2153: ST_TO_ADDR
// if p <= american_hchan then
2154: LD_VAR 0 2
2158: PUSH
2159: LD_EXP 36
2163: LESSEQUAL
2164: IFFALSE 2193
// begin american_help := true ;
2166: LD_ADDR_EXP 41
2170: PUSH
2171: LD_INT 1
2173: ST_TO_ADDR
// SayRadio ( am_comander , DS-amhelp ) ;
2174: LD_EXP 46
2178: PPUSH
2179: LD_STRING DS-amhelp
2181: PPUSH
2182: CALL_OW 94
// RaiseSailEvent ( 91 ) ;
2186: LD_INT 91
2188: PPUSH
2189: CALL_OW 427
// end ; end ; end ; if american_attack and american_timeing = 0 0$00 and FilterAllUnits ( [ f_side , 1 ] ) = 0 then
2193: LD_EXP 40
2197: PUSH
2198: LD_EXP 25
2202: PUSH
2203: LD_INT 0
2205: EQUAL
2206: AND
2207: PUSH
2208: LD_INT 22
2210: PUSH
2211: LD_INT 1
2213: PUSH
2214: EMPTY
2215: LIST
2216: LIST
2217: PPUSH
2218: CALL_OW 69
2222: PUSH
2223: LD_INT 0
2225: EQUAL
2226: AND
2227: IFFALSE 2329
// begin american_timeing := Rand ( 17 17$00 , 20 20$00 ) ;
2229: LD_ADDR_EXP 25
2233: PUSH
2234: LD_INT 35700
2236: PPUSH
2237: LD_INT 42000
2239: PPUSH
2240: CALL_OW 12
2244: ST_TO_ADDR
// SayRadio ( scout , DS-DZ-U ) ;
2245: LD_EXP 12
2249: PPUSH
2250: LD_STRING DS-DZ-U
2252: PPUSH
2253: CALL_OW 94
// Wait ( 0 0$33 ) ;
2257: LD_INT 1155
2259: PPUSH
2260: CALL_OW 67
// x := Rand ( 1 , 2 ) ;
2264: LD_ADDR_VAR 0 3
2268: PUSH
2269: LD_INT 1
2271: PPUSH
2272: LD_INT 2
2274: PPUSH
2275: CALL_OW 12
2279: ST_TO_ADDR
// case x of 1 :
2280: LD_VAR 0 3
2284: PUSH
2285: LD_INT 1
2287: DOUBLE
2288: EQUAL
2289: IFTRUE 2293
2291: GO 2303
2293: POP
// RaiseSailEvent ( 41 ) ; 2 :
2294: LD_INT 41
2296: PPUSH
2297: CALL_OW 427
2301: GO 2322
2303: LD_INT 2
2305: DOUBLE
2306: EQUAL
2307: IFTRUE 2311
2309: GO 2321
2311: POP
// RaiseSailEvent ( 42 ) ; end ;
2312: LD_INT 42
2314: PPUSH
2315: CALL_OW 427
2319: GO 2322
2321: POP
// RaiseSailEvent ( 42 ) ;
2322: LD_INT 42
2324: PPUSH
2325: CALL_OW 427
// end ; if russian_attack and russian_timeing = 0 0$00 and FilterAllUnits ( [ f_side , 3 ] ) = 0 then
2329: LD_EXP 39
2333: PUSH
2334: LD_EXP 24
2338: PUSH
2339: LD_INT 0
2341: EQUAL
2342: AND
2343: PUSH
2344: LD_INT 22
2346: PUSH
2347: LD_INT 3
2349: PUSH
2350: EMPTY
2351: LIST
2352: LIST
2353: PPUSH
2354: CALL_OW 69
2358: PUSH
2359: LD_INT 0
2361: EQUAL
2362: AND
2363: IFFALSE 2419
// begin russian_timeing := Rand ( 17 17$00 , 20 20$00 ) ;
2365: LD_ADDR_EXP 24
2369: PUSH
2370: LD_INT 35700
2372: PPUSH
2373: LD_INT 42000
2375: PPUSH
2376: CALL_OW 12
2380: ST_TO_ADDR
// SayRadio ( scout , DS-DZ-R ) ;
2381: LD_EXP 12
2385: PPUSH
2386: LD_STRING DS-DZ-R
2388: PPUSH
2389: CALL_OW 94
// Wait ( 0 0$45 ) ;
2393: LD_INT 1575
2395: PPUSH
2396: CALL_OW 67
// SayRadio ( ru_comander , DS-DR-R1 ) ;
2400: LD_EXP 47
2404: PPUSH
2405: LD_STRING DS-DR-R1
2407: PPUSH
2408: CALL_OW 94
// RaiseSailEvent ( 51 ) ;
2412: LD_INT 51
2414: PPUSH
2415: CALL_OW 427
// end ; if mission_time >= 25 25$00 and arabian_force < 10 then
2419: LD_EXP 34
2423: PUSH
2424: LD_INT 52500
2426: GREATEREQUAL
2427: PUSH
2428: LD_EXP 20
2432: PUSH
2433: LD_INT 10
2435: LESS
2436: AND
2437: IFFALSE 2461
// begin mission_time := 0 0$00 ;
2439: LD_ADDR_EXP 34
2443: PUSH
2444: LD_INT 0
2446: ST_TO_ADDR
// arabian_force := arabian_force + 1 ;
2447: LD_ADDR_EXP 20
2451: PUSH
2452: LD_EXP 20
2456: PUSH
2457: LD_INT 1
2459: PLUS
2460: ST_TO_ADDR
// end ; if arabian_timeing = 0 0$00 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_weapon , ar_control_tower ] ] ] ) = 0 then
2461: LD_EXP 23
2465: PUSH
2466: LD_INT 0
2468: EQUAL
2469: PUSH
2470: LD_INT 22
2472: PUSH
2473: LD_INT 2
2475: PUSH
2476: EMPTY
2477: LIST
2478: LIST
2479: PUSH
2480: LD_INT 3
2482: PUSH
2483: LD_INT 34
2485: PUSH
2486: LD_INT 31
2488: PUSH
2489: EMPTY
2490: LIST
2491: LIST
2492: PUSH
2493: EMPTY
2494: LIST
2495: LIST
2496: PUSH
2497: EMPTY
2498: LIST
2499: LIST
2500: PPUSH
2501: CALL_OW 69
2505: PUSH
2506: LD_INT 0
2508: EQUAL
2509: AND
2510: IFFALSE 2708
// begin arabian_timeing := 7 7$30 ;
2512: LD_ADDR_EXP 23
2516: PUSH
2517: LD_INT 15750
2519: ST_TO_ADDR
// x := Rand ( 1 , 3 ) ;
2520: LD_ADDR_VAR 0 3
2524: PUSH
2525: LD_INT 1
2527: PPUSH
2528: LD_INT 3
2530: PPUSH
2531: CALL_OW 12
2535: ST_TO_ADDR
// SayRadio ( scout , DS-DZ-H ) ;
2536: LD_EXP 12
2540: PPUSH
2541: LD_STRING DS-DZ-H
2543: PPUSH
2544: CALL_OW 94
// case x of 1 :
2548: LD_VAR 0 3
2552: PUSH
2553: LD_INT 1
2555: DOUBLE
2556: EQUAL
2557: IFTRUE 2561
2559: GO 2571
2561: POP
// RaiseSailEvent ( 31 ) ; 2 :
2562: LD_INT 31
2564: PPUSH
2565: CALL_OW 427
2569: GO 2608
2571: LD_INT 2
2573: DOUBLE
2574: EQUAL
2575: IFTRUE 2579
2577: GO 2589
2579: POP
// RaiseSailEvent ( 32 ) ; 3 :
2580: LD_INT 32
2582: PPUSH
2583: CALL_OW 427
2587: GO 2608
2589: LD_INT 3
2591: DOUBLE
2592: EQUAL
2593: IFTRUE 2597
2595: GO 2607
2597: POP
// RaiseSailEvent ( 33 ) ; end ;
2598: LD_INT 33
2600: PPUSH
2601: CALL_OW 427
2605: GO 2608
2607: POP
// RaiseSailEvent ( 33 ) ;
2608: LD_INT 33
2610: PPUSH
2611: CALL_OW 427
// if game_difficulty > 1 then
2615: LD_EXP 2
2619: PUSH
2620: LD_INT 1
2622: GREATER
2623: IFFALSE 2632
// RaiseSailEvent ( 33 ) ;
2625: LD_INT 33
2627: PPUSH
2628: CALL_OW 427
// if heike_dialog1 = false then
2632: LD_EXP 44
2636: PUSH
2637: LD_INT 0
2639: EQUAL
2640: IFFALSE 2671
// begin heike_dialog1 := true ;
2642: LD_ADDR_EXP 44
2646: PUSH
2647: LD_INT 1
2649: ST_TO_ADDR
// Wait ( 0 0$03 ) ;
2650: LD_INT 105
2652: PPUSH
2653: CALL_OW 67
// SayRadio ( ar_comander , heike1 ) ;
2657: LD_EXP 48
2661: PPUSH
2662: LD_STRING heike1
2664: PPUSH
2665: CALL_OW 94
// end else
2669: GO 2708
// if heike_dialog2 = false then
2671: LD_EXP 45
2675: PUSH
2676: LD_INT 0
2678: EQUAL
2679: IFFALSE 2708
// begin heike_dialog2 := true ;
2681: LD_ADDR_EXP 45
2685: PUSH
2686: LD_INT 1
2688: ST_TO_ADDR
// Wait ( 0 0$03 ) ;
2689: LD_INT 105
2691: PPUSH
2692: CALL_OW 67
// SayRadio ( ar_comander , heike2 ) ;
2696: LD_EXP 48
2700: PPUSH
2701: LD_STRING heike2
2703: PPUSH
2704: CALL_OW 94
// end ; end ; if FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) > 0 then
2708: LD_INT 22
2710: PUSH
2711: LD_INT 2
2713: PUSH
2714: EMPTY
2715: LIST
2716: LIST
2717: PUSH
2718: LD_INT 33
2720: PUSH
2721: LD_INT 2
2723: PUSH
2724: EMPTY
2725: LIST
2726: LIST
2727: PUSH
2728: EMPTY
2729: LIST
2730: LIST
2731: PPUSH
2732: CALL_OW 69
2736: PUSH
2737: LD_INT 0
2739: GREATER
2740: IFFALSE 2749
// ConnectWithTower ( 2 ) ;
2742: LD_INT 2
2744: PPUSH
2745: CALL 7139 0 1
// if FilterAllUnits ( [ [ [ f_side , 2 ] , [ f_not , [ f_weapon , ar_control_tower ] ] , [ f_not , [ f_hastask ] ] ] ] ) > 0 then
2749: LD_INT 22
2751: PUSH
2752: LD_INT 2
2754: PUSH
2755: EMPTY
2756: LIST
2757: LIST
2758: PUSH
2759: LD_INT 3
2761: PUSH
2762: LD_INT 34
2764: PUSH
2765: LD_INT 31
2767: PUSH
2768: EMPTY
2769: LIST
2770: LIST
2771: PUSH
2772: EMPTY
2773: LIST
2774: LIST
2775: PUSH
2776: LD_INT 3
2778: PUSH
2779: LD_INT 60
2781: PUSH
2782: EMPTY
2783: LIST
2784: PUSH
2785: EMPTY
2786: LIST
2787: LIST
2788: PUSH
2789: EMPTY
2790: LIST
2791: LIST
2792: LIST
2793: PUSH
2794: EMPTY
2795: LIST
2796: PPUSH
2797: CALL_OW 69
2801: PUSH
2802: LD_INT 0
2804: GREATER
2805: IFFALSE 2951
// begin filter := FilterAllUnits ( [ [ [ f_side , 2 ] , [ f_not , [ f_weapon , ar_control_tower ] ] , [ f_not , [ f_hastask ] ] ] ] ) ;
2807: LD_ADDR_VAR 0 4
2811: PUSH
2812: LD_INT 22
2814: PUSH
2815: LD_INT 2
2817: PUSH
2818: EMPTY
2819: LIST
2820: LIST
2821: PUSH
2822: LD_INT 3
2824: PUSH
2825: LD_INT 34
2827: PUSH
2828: LD_INT 31
2830: PUSH
2831: EMPTY
2832: LIST
2833: LIST
2834: PUSH
2835: EMPTY
2836: LIST
2837: LIST
2838: PUSH
2839: LD_INT 3
2841: PUSH
2842: LD_INT 60
2844: PUSH
2845: EMPTY
2846: LIST
2847: PUSH
2848: EMPTY
2849: LIST
2850: LIST
2851: PUSH
2852: EMPTY
2853: LIST
2854: LIST
2855: LIST
2856: PUSH
2857: EMPTY
2858: LIST
2859: PPUSH
2860: CALL_OW 69
2864: ST_TO_ADDR
// x := SpeedFilter ( FilterAllUnits ( [ f_enemy , 2 ] ) , 20 ) ;
2865: LD_ADDR_VAR 0 3
2869: PUSH
2870: LD_INT 81
2872: PUSH
2873: LD_INT 2
2875: PUSH
2876: EMPTY
2877: LIST
2878: LIST
2879: PPUSH
2880: CALL_OW 69
2884: PPUSH
2885: LD_INT 20
2887: PPUSH
2888: CALL 8522 0 2
2892: ST_TO_ADDR
// for i = 1 to filter do
2893: LD_ADDR_VAR 0 1
2897: PUSH
2898: DOUBLE
2899: LD_INT 1
2901: DEC
2902: ST_TO_ADDR
2903: LD_VAR 0 4
2907: PUSH
2908: FOR_TO
2909: IFFALSE 2949
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( x , filter [ i ] ) ) ;
2911: LD_VAR 0 4
2915: PUSH
2916: LD_VAR 0 1
2920: ARRAY
2921: PPUSH
2922: LD_VAR 0 3
2926: PPUSH
2927: LD_VAR 0 4
2931: PUSH
2932: LD_VAR 0 1
2936: ARRAY
2937: PPUSH
2938: CALL_OW 74
2942: PPUSH
2943: CALL_OW 115
2947: GO 2908
2949: POP
2950: POP
// end ; if FilterAllUnits ( [ [ [ f_side , 3 ] , [ f_not , [ f_hastask ] ] ] ] ) > 0 then
2951: LD_INT 22
2953: PUSH
2954: LD_INT 3
2956: PUSH
2957: EMPTY
2958: LIST
2959: LIST
2960: PUSH
2961: LD_INT 3
2963: PUSH
2964: LD_INT 60
2966: PUSH
2967: EMPTY
2968: LIST
2969: PUSH
2970: EMPTY
2971: LIST
2972: LIST
2973: PUSH
2974: EMPTY
2975: LIST
2976: LIST
2977: PUSH
2978: EMPTY
2979: LIST
2980: PPUSH
2981: CALL_OW 69
2985: PUSH
2986: LD_INT 0
2988: GREATER
2989: IFFALSE 3135
// begin filter := FilterAllUnits ( [ [ [ f_side , 3 ] , [ f_not , [ f_weapon , ar_control_tower ] ] , [ f_not , [ f_hastask ] ] ] ] ) ;
2991: LD_ADDR_VAR 0 4
2995: PUSH
2996: LD_INT 22
2998: PUSH
2999: LD_INT 3
3001: PUSH
3002: EMPTY
3003: LIST
3004: LIST
3005: PUSH
3006: LD_INT 3
3008: PUSH
3009: LD_INT 34
3011: PUSH
3012: LD_INT 31
3014: PUSH
3015: EMPTY
3016: LIST
3017: LIST
3018: PUSH
3019: EMPTY
3020: LIST
3021: LIST
3022: PUSH
3023: LD_INT 3
3025: PUSH
3026: LD_INT 60
3028: PUSH
3029: EMPTY
3030: LIST
3031: PUSH
3032: EMPTY
3033: LIST
3034: LIST
3035: PUSH
3036: EMPTY
3037: LIST
3038: LIST
3039: LIST
3040: PUSH
3041: EMPTY
3042: LIST
3043: PPUSH
3044: CALL_OW 69
3048: ST_TO_ADDR
// x := SpeedFilter ( FilterAllUnits ( [ f_enemy , 3 ] ) , 20 ) ;
3049: LD_ADDR_VAR 0 3
3053: PUSH
3054: LD_INT 81
3056: PUSH
3057: LD_INT 3
3059: PUSH
3060: EMPTY
3061: LIST
3062: LIST
3063: PPUSH
3064: CALL_OW 69
3068: PPUSH
3069: LD_INT 20
3071: PPUSH
3072: CALL 8522 0 2
3076: ST_TO_ADDR
// for i = 1 to filter do
3077: LD_ADDR_VAR 0 1
3081: PUSH
3082: DOUBLE
3083: LD_INT 1
3085: DEC
3086: ST_TO_ADDR
3087: LD_VAR 0 4
3091: PUSH
3092: FOR_TO
3093: IFFALSE 3133
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( x , filter [ i ] ) ) ;
3095: LD_VAR 0 4
3099: PUSH
3100: LD_VAR 0 1
3104: ARRAY
3105: PPUSH
3106: LD_VAR 0 3
3110: PPUSH
3111: LD_VAR 0 4
3115: PUSH
3116: LD_VAR 0 1
3120: ARRAY
3121: PPUSH
3122: CALL_OW 74
3126: PPUSH
3127: CALL_OW 115
3131: GO 3092
3133: POP
3134: POP
// end ; if FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] ] ] ) > 0 then
3135: LD_INT 22
3137: PUSH
3138: LD_INT 1
3140: PUSH
3141: EMPTY
3142: LIST
3143: LIST
3144: PUSH
3145: LD_INT 3
3147: PUSH
3148: LD_INT 60
3150: PUSH
3151: EMPTY
3152: LIST
3153: PUSH
3154: EMPTY
3155: LIST
3156: LIST
3157: PUSH
3158: EMPTY
3159: LIST
3160: LIST
3161: PUSH
3162: EMPTY
3163: LIST
3164: PPUSH
3165: CALL_OW 69
3169: PUSH
3170: LD_INT 0
3172: GREATER
3173: IFFALSE 3319
// begin filter := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_not , [ f_weapon , ar_control_tower ] ] , [ f_not , [ f_hastask ] ] ] ] ) ;
3175: LD_ADDR_VAR 0 4
3179: PUSH
3180: LD_INT 22
3182: PUSH
3183: LD_INT 1
3185: PUSH
3186: EMPTY
3187: LIST
3188: LIST
3189: PUSH
3190: LD_INT 3
3192: PUSH
3193: LD_INT 34
3195: PUSH
3196: LD_INT 31
3198: PUSH
3199: EMPTY
3200: LIST
3201: LIST
3202: PUSH
3203: EMPTY
3204: LIST
3205: LIST
3206: PUSH
3207: LD_INT 3
3209: PUSH
3210: LD_INT 60
3212: PUSH
3213: EMPTY
3214: LIST
3215: PUSH
3216: EMPTY
3217: LIST
3218: LIST
3219: PUSH
3220: EMPTY
3221: LIST
3222: LIST
3223: LIST
3224: PUSH
3225: EMPTY
3226: LIST
3227: PPUSH
3228: CALL_OW 69
3232: ST_TO_ADDR
// x := SpeedFilter ( FilterAllUnits ( [ f_enemy , 1 ] ) , 20 ) ;
3233: LD_ADDR_VAR 0 3
3237: PUSH
3238: LD_INT 81
3240: PUSH
3241: LD_INT 1
3243: PUSH
3244: EMPTY
3245: LIST
3246: LIST
3247: PPUSH
3248: CALL_OW 69
3252: PPUSH
3253: LD_INT 20
3255: PPUSH
3256: CALL 8522 0 2
3260: ST_TO_ADDR
// for i = 1 to filter do
3261: LD_ADDR_VAR 0 1
3265: PUSH
3266: DOUBLE
3267: LD_INT 1
3269: DEC
3270: ST_TO_ADDR
3271: LD_VAR 0 4
3275: PUSH
3276: FOR_TO
3277: IFFALSE 3317
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( x , filter [ i ] ) ) ;
3279: LD_VAR 0 4
3283: PUSH
3284: LD_VAR 0 1
3288: ARRAY
3289: PPUSH
3290: LD_VAR 0 3
3294: PPUSH
3295: LD_VAR 0 4
3299: PUSH
3300: LD_VAR 0 1
3304: ARRAY
3305: PPUSH
3306: CALL_OW 74
3310: PPUSH
3311: CALL_OW 115
3315: GO 3276
3317: POP
3318: POP
// end ; if FilterAllUnits ( [ [ [ f_side , 2 ] , [ f_weapon , ar_bio_bomb ] , [ f_not , [ f_lives , 700 ] ] ] ] ) > 0 then
3319: LD_INT 22
3321: PUSH
3322: LD_INT 2
3324: PUSH
3325: EMPTY
3326: LIST
3327: LIST
3328: PUSH
3329: LD_INT 34
3331: PUSH
3332: LD_INT 91
3334: PUSH
3335: EMPTY
3336: LIST
3337: LIST
3338: PUSH
3339: LD_INT 3
3341: PUSH
3342: LD_INT 24
3344: PUSH
3345: LD_INT 700
3347: PUSH
3348: EMPTY
3349: LIST
3350: LIST
3351: PUSH
3352: EMPTY
3353: LIST
3354: LIST
3355: PUSH
3356: EMPTY
3357: LIST
3358: LIST
3359: LIST
3360: PUSH
3361: EMPTY
3362: LIST
3363: PPUSH
3364: CALL_OW 69
3368: PUSH
3369: LD_INT 0
3371: GREATER
3372: IFFALSE 3469
// begin filter := FilterAllUnits ( [ [ [ f_side , 2 ] , [ f_weapon , ar_bio_bomb ] , [ f_not , [ f_lives , 700 ] ] ] ] ) ;
3374: LD_ADDR_VAR 0 4
3378: PUSH
3379: LD_INT 22
3381: PUSH
3382: LD_INT 2
3384: PUSH
3385: EMPTY
3386: LIST
3387: LIST
3388: PUSH
3389: LD_INT 34
3391: PUSH
3392: LD_INT 91
3394: PUSH
3395: EMPTY
3396: LIST
3397: LIST
3398: PUSH
3399: LD_INT 3
3401: PUSH
3402: LD_INT 24
3404: PUSH
3405: LD_INT 700
3407: PUSH
3408: EMPTY
3409: LIST
3410: LIST
3411: PUSH
3412: EMPTY
3413: LIST
3414: LIST
3415: PUSH
3416: EMPTY
3417: LIST
3418: LIST
3419: LIST
3420: PUSH
3421: EMPTY
3422: LIST
3423: PPUSH
3424: CALL_OW 69
3428: ST_TO_ADDR
// for i = 1 to filter do
3429: LD_ADDR_VAR 0 1
3433: PUSH
3434: DOUBLE
3435: LD_INT 1
3437: DEC
3438: ST_TO_ADDR
3439: LD_VAR 0 4
3443: PUSH
3444: FOR_TO
3445: IFFALSE 3467
// SetLives ( filter [ i ] , 1 ) ;
3447: LD_VAR 0 4
3451: PUSH
3452: LD_VAR 0 1
3456: ARRAY
3457: PPUSH
3458: LD_INT 1
3460: PPUSH
3461: CALL_OW 234
3465: GO 3444
3467: POP
3468: POP
// end ; end ; end_of_file
3469: PPOPN 4
3471: END
// export function Start_Mission ; begin
3472: LD_INT 0
3474: PPUSH
// PrepareLegion ;
3475: CALL 3516 0 0
// PrepareMeeting ;
3479: CALL 4133 0 0
// case Query ( DS-text-beg ) of 1 :
3483: LD_STRING DS-text-beg
3485: PPUSH
3486: CALL_OW 97
3490: PUSH
3491: LD_INT 1
3493: DOUBLE
3494: EQUAL
3495: IFTRUE 3499
3497: GO 3502
3499: POP
// ; end ;
3500: GO 3503
3502: POP
// game_on := true ;
3503: LD_ADDR_EXP 1
3507: PUSH
3508: LD_INT 1
3510: ST_TO_ADDR
// end ;
3511: LD_VAR 0 1
3515: RET
// export l_cmndr , l_skill , l_units ; function PrepareLegion ; var i , p , filter , team ; begin
3516: LD_INT 0
3518: PPUSH
3519: PPUSH
3520: PPUSH
3521: PPUSH
3522: PPUSH
// uc_side := 8 ;
3523: LD_ADDR_OWVAR 20
3527: PUSH
3528: LD_INT 8
3530: ST_TO_ADDR
// uc_nation := 2 ;
3531: LD_ADDR_OWVAR 21
3535: PUSH
3536: LD_INT 2
3538: ST_TO_ADDR
// l_skill := [ 9 , 8 , 7 ] [ difficulty ] ;
3539: LD_ADDR_EXP 50
3543: PUSH
3544: LD_INT 9
3546: PUSH
3547: LD_INT 8
3549: PUSH
3550: LD_INT 7
3552: PUSH
3553: EMPTY
3554: LIST
3555: LIST
3556: LIST
3557: PUSH
3558: LD_OWVAR 67
3562: ARRAY
3563: ST_TO_ADDR
// l_units := [ 9 , 8 , 8 ] [ difficulty ] ;
3564: LD_ADDR_EXP 51
3568: PUSH
3569: LD_INT 9
3571: PUSH
3572: LD_INT 8
3574: PUSH
3575: LD_INT 8
3577: PUSH
3578: EMPTY
3579: LIST
3580: LIST
3581: LIST
3582: PUSH
3583: LD_OWVAR 67
3587: ARRAY
3588: ST_TO_ADDR
// filter := [ ] ;
3589: LD_ADDR_VAR 0 4
3593: PUSH
3594: EMPTY
3595: ST_TO_ADDR
// hc_gallery := desert ;
3596: LD_ADDR_OWVAR 33
3600: PUSH
3601: LD_STRING desert
3603: ST_TO_ADDR
// hc_face_number := 1 ;
3604: LD_ADDR_OWVAR 34
3608: PUSH
3609: LD_INT 1
3611: ST_TO_ADDR
// hc_skills := [ l_skill + 2 , l_skill - 1 , l_skill , l_skill + 1 ] ;
3612: LD_ADDR_OWVAR 31
3616: PUSH
3617: LD_EXP 50
3621: PUSH
3622: LD_INT 2
3624: PLUS
3625: PUSH
3626: LD_EXP 50
3630: PUSH
3631: LD_INT 1
3633: MINUS
3634: PUSH
3635: LD_EXP 50
3639: PUSH
3640: LD_EXP 50
3644: PUSH
3645: LD_INT 1
3647: PLUS
3648: PUSH
3649: EMPTY
3650: LIST
3651: LIST
3652: LIST
3653: LIST
3654: ST_TO_ADDR
// hc_sex := sex_male ;
3655: LD_ADDR_OWVAR 27
3659: PUSH
3660: LD_INT 1
3662: ST_TO_ADDR
// hc_name := Henri Ruotz ;
3663: LD_ADDR_OWVAR 26
3667: PUSH
3668: LD_STRING Henri Ruotz
3670: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
3671: LD_ADDR_OWVAR 29
3675: PUSH
3676: LD_INT 10
3678: PUSH
3679: LD_INT 10
3681: PUSH
3682: EMPTY
3683: LIST
3684: LIST
3685: ST_TO_ADDR
// hc_class := 1 ;
3686: LD_ADDR_OWVAR 28
3690: PUSH
3691: LD_INT 1
3693: ST_TO_ADDR
// hc_importance := 100 ;
3694: LD_ADDR_OWVAR 32
3698: PUSH
3699: LD_INT 100
3701: ST_TO_ADDR
// l_cmndr := CreateHuman ;
3702: LD_ADDR_EXP 49
3706: PUSH
3707: CALL_OW 44
3711: ST_TO_ADDR
// hc_importance := 0 ;
3712: LD_ADDR_OWVAR 32
3716: PUSH
3717: LD_INT 0
3719: ST_TO_ADDR
// scout := PrepareHuman ( sex_male , 1 , 0 ) ;
3720: LD_ADDR_EXP 12
3724: PUSH
3725: LD_INT 1
3727: PPUSH
3728: LD_INT 1
3730: PPUSH
3731: LD_INT 0
3733: PPUSH
3734: CALL_OW 380
3738: ST_TO_ADDR
// for i = 1 to 4 do
3739: LD_ADDR_VAR 0 2
3743: PUSH
3744: DOUBLE
3745: LD_INT 1
3747: DEC
3748: ST_TO_ADDR
3749: LD_INT 4
3751: PUSH
3752: FOR_TO
3753: IFFALSE 3803
// for p = 1 to 6 do
3755: LD_ADDR_VAR 0 3
3759: PUSH
3760: DOUBLE
3761: LD_INT 1
3763: DEC
3764: ST_TO_ADDR
3765: LD_INT 6
3767: PUSH
3768: FOR_TO
3769: IFFALSE 3799
// filter := filter ^ CreateHumanWithClass ( i , l_skill ) ;
3771: LD_ADDR_VAR 0 4
3775: PUSH
3776: LD_VAR 0 4
3780: PUSH
3781: LD_VAR 0 2
3785: PPUSH
3786: LD_EXP 50
3790: PPUSH
3791: CALL 7323 0 2
3795: ADD
3796: ST_TO_ADDR
3797: GO 3768
3799: POP
3800: POP
3801: GO 3752
3803: POP
3804: POP
// team := CharacterSelection ( text , l_units , l_units , [ sel_change_class , l_cmndr , sel_changeable , sel_not_hired ] ^ filter , [ class_soldier , class_mechanic , class_engineer , class_scientistic , class_mortar ] ) ;
3805: LD_ADDR_VAR 0 5
3809: PUSH
3810: LD_STRING text
3812: PPUSH
3813: LD_EXP 51
3817: PPUSH
3818: LD_EXP 51
3822: PPUSH
3823: LD_INT -5
3825: PUSH
3826: LD_EXP 49
3830: PUSH
3831: LD_INT -3
3833: PUSH
3834: LD_INT -2
3836: PUSH
3837: EMPTY
3838: LIST
3839: LIST
3840: LIST
3841: LIST
3842: PUSH
3843: LD_VAR 0 4
3847: ADD
3848: PPUSH
3849: LD_INT 1
3851: PUSH
3852: LD_INT 3
3854: PUSH
3855: LD_INT 2
3857: PUSH
3858: LD_INT 4
3860: PUSH
3861: LD_INT 8
3863: PUSH
3864: EMPTY
3865: LIST
3866: LIST
3867: LIST
3868: LIST
3869: LIST
3870: PPUSH
3871: CALL_OW 42
3875: ST_TO_ADDR
// for i = 1 to l_units do
3876: LD_ADDR_VAR 0 2
3880: PUSH
3881: DOUBLE
3882: LD_INT 1
3884: DEC
3885: ST_TO_ADDR
3886: LD_EXP 51
3890: PUSH
3891: FOR_TO
3892: IFFALSE 3917
// PlaceUnitArea ( team [ i ] , legion_spawn , false ) ;
3894: LD_VAR 0 5
3898: PUSH
3899: LD_VAR 0 2
3903: ARRAY
3904: PPUSH
3905: LD_INT 1
3907: PPUSH
3908: LD_INT 0
3910: PPUSH
3911: CALL_OW 49
3915: GO 3891
3917: POP
3918: POP
// PlaceUnitArea ( l_cmndr , legion_spawn , false ) ;
3919: LD_EXP 49
3923: PPUSH
3924: LD_INT 1
3926: PPUSH
3927: LD_INT 0
3929: PPUSH
3930: CALL_OW 49
// end ;
3934: LD_VAR 0 1
3938: RET
// export function PlaceCamera ; begin
3939: LD_INT 0
3941: PPUSH
// PlaceSeeing ( 46 , 48 , 8 , 10 ) ;
3942: LD_INT 46
3944: PPUSH
3945: LD_INT 48
3947: PPUSH
3948: LD_INT 8
3950: PPUSH
3951: LD_INT 10
3953: PPUSH
3954: CALL_OW 330
// PlaceSeeing ( 58 , 66 , 8 , 10 ) ;
3958: LD_INT 58
3960: PPUSH
3961: LD_INT 66
3963: PPUSH
3964: LD_INT 8
3966: PPUSH
3967: LD_INT 10
3969: PPUSH
3970: CALL_OW 330
// PlaceSeeing ( 82 , 82 , 8 , 10 ) ;
3974: LD_INT 82
3976: PPUSH
3977: LD_INT 82
3979: PPUSH
3980: LD_INT 8
3982: PPUSH
3983: LD_INT 10
3985: PPUSH
3986: CALL_OW 330
// PlaceSeeing ( 107 , 79 , 8 , 10 ) ;
3990: LD_INT 107
3992: PPUSH
3993: LD_INT 79
3995: PPUSH
3996: LD_INT 8
3998: PPUSH
3999: LD_INT 10
4001: PPUSH
4002: CALL_OW 330
// PlaceSeeing ( 101 , 57 , 8 , 10 ) ;
4006: LD_INT 101
4008: PPUSH
4009: LD_INT 57
4011: PPUSH
4012: LD_INT 8
4014: PPUSH
4015: LD_INT 10
4017: PPUSH
4018: CALL_OW 330
// PlaceSeeing ( 85 , 32 , 8 , 10 ) ;
4022: LD_INT 85
4024: PPUSH
4025: LD_INT 32
4027: PPUSH
4028: LD_INT 8
4030: PPUSH
4031: LD_INT 10
4033: PPUSH
4034: CALL_OW 330
// PlaceSeeing ( 108 , 72 , 8 , 10 ) ;
4038: LD_INT 108
4040: PPUSH
4041: LD_INT 72
4043: PPUSH
4044: LD_INT 8
4046: PPUSH
4047: LD_INT 10
4049: PPUSH
4050: CALL_OW 330
// PlaceSeeing ( 124 , 74 , 8 , 10 ) ;
4054: LD_INT 124
4056: PPUSH
4057: LD_INT 74
4059: PPUSH
4060: LD_INT 8
4062: PPUSH
4063: LD_INT 10
4065: PPUSH
4066: CALL_OW 330
// PlaceSeeing ( 67 , 33 , 8 , 20 ) ;
4070: LD_INT 67
4072: PPUSH
4073: LD_INT 33
4075: PPUSH
4076: LD_INT 8
4078: PPUSH
4079: LD_INT 20
4081: PPUSH
4082: CALL_OW 330
// RemoveSeeing ( 67 , 33 , 8 ) ;
4086: LD_INT 67
4088: PPUSH
4089: LD_INT 33
4091: PPUSH
4092: LD_INT 8
4094: PPUSH
4095: CALL_OW 331
// PlaceSeeing ( 94 , 84 , 8 , 20 ) ;
4099: LD_INT 94
4101: PPUSH
4102: LD_INT 84
4104: PPUSH
4105: LD_INT 8
4107: PPUSH
4108: LD_INT 20
4110: PPUSH
4111: CALL_OW 330
// RemoveSeeing ( 94 , 84 , 8 ) ;
4115: LD_INT 94
4117: PPUSH
4118: LD_INT 84
4120: PPUSH
4121: LD_INT 8
4123: PPUSH
4124: CALL_OW 331
// end ;
4128: LD_VAR 0 1
4132: RET
// export function PrepareMeeting ; begin
4133: LD_INT 0
4135: PPUSH
// uc_side := 6 ;
4136: LD_ADDR_OWVAR 20
4140: PUSH
4141: LD_INT 6
4143: ST_TO_ADDR
// hc_gallery := desert ;
4144: LD_ADDR_OWVAR 33
4148: PUSH
4149: LD_STRING desert
4151: ST_TO_ADDR
// hc_face_number := 2 ;
4152: LD_ADDR_OWVAR 34
4156: PUSH
4157: LD_INT 2
4159: ST_TO_ADDR
// hc_name := Leopold Drass ;
4160: LD_ADDR_OWVAR 26
4164: PUSH
4165: LD_STRING Leopold Drass
4167: ST_TO_ADDR
// hc_class := 1 ;
4168: LD_ADDR_OWVAR 28
4172: PUSH
4173: LD_INT 1
4175: ST_TO_ADDR
// hc_sex := sex_male ;
4176: LD_ADDR_OWVAR 27
4180: PUSH
4181: LD_INT 1
4183: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
4184: LD_ADDR_OWVAR 29
4188: PUSH
4189: LD_INT 12
4191: PUSH
4192: LD_INT 12
4194: PUSH
4195: EMPTY
4196: LIST
4197: LIST
4198: ST_TO_ADDR
// Leopold := CreateHuman ;
4199: LD_ADDR_EXP 7
4203: PUSH
4204: CALL_OW 44
4208: ST_TO_ADDR
// PlaceUnitArea ( Leopold , north_spawn , false ) ;
4209: LD_EXP 7
4213: PPUSH
4214: LD_INT 3
4216: PPUSH
4217: LD_INT 0
4219: PPUSH
4220: CALL_OW 49
// end ; end_of_file
4224: LD_VAR 0 1
4228: RET
// on SailEvent ( num ) do var i , filter , un , p , area ;
4229: LD_INT 0
4231: PPUSH
4232: PPUSH
4233: PPUSH
4234: PPUSH
4235: PPUSH
// begin case num of 1 :
4236: LD_VAR 0 1
4240: PUSH
4241: LD_INT 1
4243: DOUBLE
4244: EQUAL
4245: IFTRUE 4249
4247: GO 4281
4249: POP
// begin ComMoveXY ( leopold , GetX ( l_cmndr ) , GetY ( l_cmndr ) ) ;
4250: LD_EXP 7
4254: PPUSH
4255: LD_EXP 49
4259: PPUSH
4260: CALL_OW 250
4264: PPUSH
4265: LD_EXP 49
4269: PPUSH
4270: CALL_OW 251
4274: PPUSH
4275: CALL_OW 111
// end ; 2 :
4279: GO 6699
4281: LD_INT 2
4283: DOUBLE
4284: EQUAL
4285: IFTRUE 4289
4287: GO 4398
4289: POP
// begin InGameOn ;
4290: CALL_OW 8
// meeting_start := true ;
4294: LD_ADDR_EXP 26
4298: PUSH
4299: LD_INT 1
4301: ST_TO_ADDR
// ComTurnUnit ( leopold , l_cmndr ) ;
4302: LD_EXP 7
4306: PPUSH
4307: LD_EXP 49
4311: PPUSH
4312: CALL_OW 119
// ComTurnUnit ( l_cmndr , leopold ) ;
4316: LD_EXP 49
4320: PPUSH
4321: LD_EXP 7
4325: PPUSH
4326: CALL_OW 119
// Say ( leopold , DS-DL-1 ) ;
4330: LD_EXP 7
4334: PPUSH
4335: LD_STRING DS-DL-1
4337: PPUSH
4338: CALL_OW 88
// Say ( l_cmndr , DS-DC-1 ) ;
4342: LD_EXP 49
4346: PPUSH
4347: LD_STRING DS-DC-1
4349: PPUSH
4350: CALL_OW 88
// Say ( leopold , DS-DL-2 ) ;
4354: LD_EXP 7
4358: PPUSH
4359: LD_STRING DS-DL-2
4361: PPUSH
4362: CALL_OW 88
// ComEnterUnit ( leopold , fort ) ;
4366: LD_EXP 7
4370: PPUSH
4371: LD_INT 23
4373: PPUSH
4374: CALL_OW 120
// InGameOff ;
4378: CALL_OW 9
// Wait ( 0 0$01 ) ;
4382: LD_INT 35
4384: PPUSH
4385: CALL_OW 67
// ChangeMissionObjectives ( DS-T1 ) ;
4389: LD_STRING DS-T1
4391: PPUSH
4392: CALL_OW 337
// end ; 10 :
4396: GO 6699
4398: LD_INT 10
4400: DOUBLE
4401: EQUAL
4402: IFTRUE 4406
4404: GO 4618
4406: POP
// begin uc_side := 6 ;
4407: LD_ADDR_OWVAR 20
4411: PUSH
4412: LD_INT 6
4414: ST_TO_ADDR
// uc_nation := 2 ;
4415: LD_ADDR_OWVAR 21
4419: PUSH
4420: LD_INT 2
4422: ST_TO_ADDR
// hc_gallery :=  ;
4423: LD_ADDR_OWVAR 33
4427: PUSH
4428: LD_STRING 
4430: ST_TO_ADDR
// hc_skills := [ skill + 2 , skill - 1 , skill , skill + 1 ] ;
4431: LD_ADDR_OWVAR 31
4435: PUSH
4436: LD_EXP 16
4440: PUSH
4441: LD_INT 2
4443: PLUS
4444: PUSH
4445: LD_EXP 16
4449: PUSH
4450: LD_INT 1
4452: MINUS
4453: PUSH
4454: LD_EXP 16
4458: PUSH
4459: LD_EXP 16
4463: PUSH
4464: LD_INT 1
4466: PLUS
4467: PUSH
4468: EMPTY
4469: LIST
4470: LIST
4471: LIST
4472: LIST
4473: ST_TO_ADDR
// hc_sex := sex_male ;
4474: LD_ADDR_OWVAR 27
4478: PUSH
4479: LD_INT 1
4481: ST_TO_ADDR
// hc_name := Samuel van Horn ;
4482: LD_ADDR_OWVAR 26
4486: PUSH
4487: LD_STRING Samuel van Horn
4489: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
4490: LD_ADDR_OWVAR 29
4494: PUSH
4495: LD_INT 11
4497: PUSH
4498: LD_INT 10
4500: PUSH
4501: EMPTY
4502: LIST
4503: LIST
4504: ST_TO_ADDR
// hc_class := 1 ;
4505: LD_ADDR_OWVAR 28
4509: PUSH
4510: LD_INT 1
4512: ST_TO_ADDR
// samuel := CreateHuman ;
4513: LD_ADDR_EXP 9
4517: PUSH
4518: CALL_OW 44
4522: ST_TO_ADDR
// PlaceUnitArea ( samuel , south_spawn , false ) ;
4523: LD_EXP 9
4527: PPUSH
4528: LD_INT 4
4530: PPUSH
4531: LD_INT 0
4533: PPUSH
4534: CALL_OW 49
// for i = 1 to 3 do
4538: LD_ADDR_VAR 0 2
4542: PUSH
4543: DOUBLE
4544: LD_INT 1
4546: DEC
4547: ST_TO_ADDR
4548: LD_INT 3
4550: PUSH
4551: FOR_TO
4552: IFFALSE 4579
// PlaceUnitArea ( CreateHumanWithClass ( class_mortar , skill ) , south_spawn , false ) ;
4554: LD_INT 8
4556: PPUSH
4557: LD_EXP 16
4561: PPUSH
4562: CALL 7323 0 2
4566: PPUSH
4567: LD_INT 4
4569: PPUSH
4570: LD_INT 0
4572: PPUSH
4573: CALL_OW 49
4577: GO 4551
4579: POP
4580: POP
// ComEnterUnit ( FilterAllUnits ( [ f_side , 6 ] ) diff [ leopold , fort ] , fort ) ;
4581: LD_INT 22
4583: PUSH
4584: LD_INT 6
4586: PUSH
4587: EMPTY
4588: LIST
4589: LIST
4590: PPUSH
4591: CALL_OW 69
4595: PUSH
4596: LD_EXP 7
4600: PUSH
4601: LD_INT 23
4603: PUSH
4604: EMPTY
4605: LIST
4606: LIST
4607: DIFF
4608: PPUSH
4609: LD_INT 23
4611: PPUSH
4612: CALL_OW 120
// end ; 3 :
4616: GO 6699
4618: LD_INT 3
4620: DOUBLE
4621: EQUAL
4622: IFTRUE 4626
4624: GO 4637
4626: POP
// begin arabian_attack := true ;
4627: LD_ADDR_EXP 38
4631: PUSH
4632: LD_INT 1
4634: ST_TO_ADDR
// end ; 4 :
4635: GO 6699
4637: LD_INT 4
4639: DOUBLE
4640: EQUAL
4641: IFTRUE 4645
4643: GO 4656
4645: POP
// begin american_attack := true ;
4646: LD_ADDR_EXP 40
4650: PUSH
4651: LD_INT 1
4653: ST_TO_ADDR
// end ; 5 :
4654: GO 6699
4656: LD_INT 5
4658: DOUBLE
4659: EQUAL
4660: IFTRUE 4664
4662: GO 4675
4664: POP
// begin russian_attack := true ;
4665: LD_ADDR_EXP 39
4669: PUSH
4670: LD_INT 1
4672: ST_TO_ADDR
// end ; 31 :
4673: GO 6699
4675: LD_INT 31
4677: DOUBLE
4678: EQUAL
4679: IFTRUE 4683
4681: GO 4958
4683: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
4684: LD_ADDR_VAR 0 6
4688: PUSH
4689: LD_EXP 15
4693: PUSH
4694: LD_INT 1
4696: PPUSH
4697: LD_EXP 15
4701: PPUSH
4702: CALL_OW 12
4706: ARRAY
4707: ST_TO_ADDR
// uc_side := 2 ;
4708: LD_ADDR_OWVAR 20
4712: PUSH
4713: LD_INT 2
4715: ST_TO_ADDR
// uc_nation := 2 ;
4716: LD_ADDR_OWVAR 21
4720: PUSH
4721: LD_INT 2
4723: ST_TO_ADDR
// for i = 1 to arabian_force do
4724: LD_ADDR_VAR 0 2
4728: PUSH
4729: DOUBLE
4730: LD_INT 1
4732: DEC
4733: ST_TO_ADDR
4734: LD_EXP 20
4738: PUSH
4739: FOR_TO
4740: IFFALSE 4819
// begin vc_chassis := ar_half_tracked ;
4742: LD_ADDR_OWVAR 37
4746: PUSH
4747: LD_INT 14
4749: ST_TO_ADDR
// vc_engine := engine_siberite ;
4750: LD_ADDR_OWVAR 39
4754: PUSH
4755: LD_INT 3
4757: ST_TO_ADDR
// vc_control := control_remote ;
4758: LD_ADDR_OWVAR 38
4762: PUSH
4763: LD_INT 2
4765: ST_TO_ADDR
// vc_weapon := ar_weapons [ Rand ( 1 , ar_weapons ) ] ;
4766: LD_ADDR_OWVAR 40
4770: PUSH
4771: LD_EXP 17
4775: PUSH
4776: LD_INT 1
4778: PPUSH
4779: LD_EXP 17
4783: PPUSH
4784: CALL_OW 12
4788: ARRAY
4789: ST_TO_ADDR
// un := CreateVehicle ;
4790: LD_ADDR_VAR 0 4
4794: PUSH
4795: CALL_OW 45
4799: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
4800: LD_VAR 0 4
4804: PPUSH
4805: LD_VAR 0 6
4809: PPUSH
4810: LD_INT 0
4812: PPUSH
4813: CALL_OW 49
// end ;
4817: GO 4739
4819: POP
4820: POP
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_manual ] ] ) < 2 then
4821: LD_INT 22
4823: PUSH
4824: LD_INT 2
4826: PUSH
4827: EMPTY
4828: LIST
4829: LIST
4830: PUSH
4831: LD_INT 33
4833: PUSH
4834: LD_INT 1
4836: PUSH
4837: EMPTY
4838: LIST
4839: LIST
4840: PUSH
4841: EMPTY
4842: LIST
4843: LIST
4844: PPUSH
4845: CALL_OW 69
4849: PUSH
4850: LD_INT 2
4852: LESS
4853: IFFALSE 4956
// for i = 1 to 2 do
4855: LD_ADDR_VAR 0 2
4859: PUSH
4860: DOUBLE
4861: LD_INT 1
4863: DEC
4864: ST_TO_ADDR
4865: LD_INT 2
4867: PUSH
4868: FOR_TO
4869: IFFALSE 4954
// begin vc_chassis := ar_half_tracked ;
4871: LD_ADDR_OWVAR 37
4875: PUSH
4876: LD_INT 14
4878: ST_TO_ADDR
// vc_engine := engine_siberite ;
4879: LD_ADDR_OWVAR 39
4883: PUSH
4884: LD_INT 3
4886: ST_TO_ADDR
// vc_control := control_manual ;
4887: LD_ADDR_OWVAR 38
4891: PUSH
4892: LD_INT 1
4894: ST_TO_ADDR
// vc_weapon := ar_control_tower ;
4895: LD_ADDR_OWVAR 40
4899: PUSH
4900: LD_INT 31
4902: ST_TO_ADDR
// un := CreateVehicle ;
4903: LD_ADDR_VAR 0 4
4907: PUSH
4908: CALL_OW 45
4912: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
4913: LD_VAR 0 4
4917: PPUSH
4918: LD_VAR 0 6
4922: PPUSH
4923: LD_INT 0
4925: PPUSH
4926: CALL_OW 49
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , skill ) , un ) ;
4930: LD_INT 3
4932: PPUSH
4933: LD_EXP 16
4937: PPUSH
4938: CALL 7323 0 2
4942: PPUSH
4943: LD_VAR 0 4
4947: PPUSH
4948: CALL_OW 52
// end ;
4952: GO 4868
4954: POP
4955: POP
// end ; 32 :
4956: GO 6699
4958: LD_INT 32
4960: DOUBLE
4961: EQUAL
4962: IFTRUE 4966
4964: GO 5339
4966: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
4967: LD_ADDR_VAR 0 6
4971: PUSH
4972: LD_EXP 15
4976: PUSH
4977: LD_INT 1
4979: PPUSH
4980: LD_EXP 15
4984: PPUSH
4985: CALL_OW 12
4989: ARRAY
4990: ST_TO_ADDR
// uc_side := 2 ;
4991: LD_ADDR_OWVAR 20
4995: PUSH
4996: LD_INT 2
4998: ST_TO_ADDR
// uc_nation := 2 ;
4999: LD_ADDR_OWVAR 21
5003: PUSH
5004: LD_INT 2
5006: ST_TO_ADDR
// for i = 1 to ( arabian_force - 2 ) do
5007: LD_ADDR_VAR 0 2
5011: PUSH
5012: DOUBLE
5013: LD_INT 1
5015: DEC
5016: ST_TO_ADDR
5017: LD_EXP 20
5021: PUSH
5022: LD_INT 2
5024: MINUS
5025: PUSH
5026: FOR_TO
5027: IFFALSE 5110
// begin vc_chassis := ar_half_tracked ;
5029: LD_ADDR_OWVAR 37
5033: PUSH
5034: LD_INT 14
5036: ST_TO_ADDR
// vc_engine := engine_siberite ;
5037: LD_ADDR_OWVAR 39
5041: PUSH
5042: LD_INT 3
5044: ST_TO_ADDR
// vc_control := control_remote ;
5045: LD_ADDR_OWVAR 38
5049: PUSH
5050: LD_INT 2
5052: ST_TO_ADDR
// vc_weapon := ar_weapons [ Rand ( 1 , ar_weapons - 1 ) ] ;
5053: LD_ADDR_OWVAR 40
5057: PUSH
5058: LD_EXP 17
5062: PUSH
5063: LD_INT 1
5065: PPUSH
5066: LD_EXP 17
5070: PUSH
5071: LD_INT 1
5073: MINUS
5074: PPUSH
5075: CALL_OW 12
5079: ARRAY
5080: ST_TO_ADDR
// un := CreateVehicle ;
5081: LD_ADDR_VAR 0 4
5085: PUSH
5086: CALL_OW 45
5090: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5091: LD_VAR 0 4
5095: PPUSH
5096: LD_VAR 0 6
5100: PPUSH
5101: LD_INT 0
5103: PPUSH
5104: CALL_OW 49
// end ;
5108: GO 5026
5110: POP
5111: POP
// for i = 1 to Rand ( 0 , 1 ) + [ 2 , 3 , 3 ] [ game_difficulty ] do
5112: LD_ADDR_VAR 0 2
5116: PUSH
5117: DOUBLE
5118: LD_INT 1
5120: DEC
5121: ST_TO_ADDR
5122: LD_INT 0
5124: PPUSH
5125: LD_INT 1
5127: PPUSH
5128: CALL_OW 12
5132: PUSH
5133: LD_INT 2
5135: PUSH
5136: LD_INT 3
5138: PUSH
5139: LD_INT 3
5141: PUSH
5142: EMPTY
5143: LIST
5144: LIST
5145: LIST
5146: PUSH
5147: LD_EXP 2
5151: ARRAY
5152: PLUS
5153: PUSH
5154: FOR_TO
5155: IFFALSE 5192
// begin uc_nation := 0 ;
5157: LD_ADDR_OWVAR 21
5161: PUSH
5162: LD_INT 0
5164: ST_TO_ADDR
// PlaceUnitArea ( CreateHumanWithClass ( 17 , skill ) , area , false ) ;
5165: LD_INT 17
5167: PPUSH
5168: LD_EXP 16
5172: PPUSH
5173: CALL 7323 0 2
5177: PPUSH
5178: LD_VAR 0 6
5182: PPUSH
5183: LD_INT 0
5185: PPUSH
5186: CALL_OW 49
// end ;
5190: GO 5154
5192: POP
5193: POP
// uc_nation := 2 ;
5194: LD_ADDR_OWVAR 21
5198: PUSH
5199: LD_INT 2
5201: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_manual ] ] ) < 2 then
5202: LD_INT 22
5204: PUSH
5205: LD_INT 2
5207: PUSH
5208: EMPTY
5209: LIST
5210: LIST
5211: PUSH
5212: LD_INT 33
5214: PUSH
5215: LD_INT 1
5217: PUSH
5218: EMPTY
5219: LIST
5220: LIST
5221: PUSH
5222: EMPTY
5223: LIST
5224: LIST
5225: PPUSH
5226: CALL_OW 69
5230: PUSH
5231: LD_INT 2
5233: LESS
5234: IFFALSE 5337
// for i = 1 to 2 do
5236: LD_ADDR_VAR 0 2
5240: PUSH
5241: DOUBLE
5242: LD_INT 1
5244: DEC
5245: ST_TO_ADDR
5246: LD_INT 2
5248: PUSH
5249: FOR_TO
5250: IFFALSE 5335
// begin vc_chassis := ar_half_tracked ;
5252: LD_ADDR_OWVAR 37
5256: PUSH
5257: LD_INT 14
5259: ST_TO_ADDR
// vc_engine := engine_siberite ;
5260: LD_ADDR_OWVAR 39
5264: PUSH
5265: LD_INT 3
5267: ST_TO_ADDR
// vc_control := control_manual ;
5268: LD_ADDR_OWVAR 38
5272: PUSH
5273: LD_INT 1
5275: ST_TO_ADDR
// vc_weapon := ar_control_tower ;
5276: LD_ADDR_OWVAR 40
5280: PUSH
5281: LD_INT 31
5283: ST_TO_ADDR
// un := CreateVehicle ;
5284: LD_ADDR_VAR 0 4
5288: PUSH
5289: CALL_OW 45
5293: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5294: LD_VAR 0 4
5298: PPUSH
5299: LD_VAR 0 6
5303: PPUSH
5304: LD_INT 0
5306: PPUSH
5307: CALL_OW 49
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , skill ) , un ) ;
5311: LD_INT 3
5313: PPUSH
5314: LD_EXP 16
5318: PPUSH
5319: CALL 7323 0 2
5323: PPUSH
5324: LD_VAR 0 4
5328: PPUSH
5329: CALL_OW 52
// end ;
5333: GO 5249
5335: POP
5336: POP
// end ; 33 :
5337: GO 6699
5339: LD_INT 33
5341: DOUBLE
5342: EQUAL
5343: IFTRUE 5347
5345: GO 5618
5347: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
5348: LD_ADDR_VAR 0 6
5352: PUSH
5353: LD_EXP 15
5357: PUSH
5358: LD_INT 1
5360: PPUSH
5361: LD_EXP 15
5365: PPUSH
5366: CALL_OW 12
5370: ARRAY
5371: ST_TO_ADDR
// uc_side := 2 ;
5372: LD_ADDR_OWVAR 20
5376: PUSH
5377: LD_INT 2
5379: ST_TO_ADDR
// uc_nation := 2 ;
5380: LD_ADDR_OWVAR 21
5384: PUSH
5385: LD_INT 2
5387: ST_TO_ADDR
// for i = 1 to ( arabian_force / 2 ) do
5388: LD_ADDR_VAR 0 2
5392: PUSH
5393: DOUBLE
5394: LD_INT 1
5396: DEC
5397: ST_TO_ADDR
5398: LD_EXP 20
5402: PUSH
5403: LD_INT 2
5405: DIVREAL
5406: PUSH
5407: FOR_TO
5408: IFFALSE 5513
// begin vc_chassis := ar_half_tracked ;
5410: LD_ADDR_OWVAR 37
5414: PUSH
5415: LD_INT 14
5417: ST_TO_ADDR
// vc_engine := engine_siberite ;
5418: LD_ADDR_OWVAR 39
5422: PUSH
5423: LD_INT 3
5425: ST_TO_ADDR
// vc_control := control_manual ;
5426: LD_ADDR_OWVAR 38
5430: PUSH
5431: LD_INT 1
5433: ST_TO_ADDR
// vc_weapon := ar_weapons [ Rand ( 1 , ar_weapons - 2 ) ] ;
5434: LD_ADDR_OWVAR 40
5438: PUSH
5439: LD_EXP 17
5443: PUSH
5444: LD_INT 1
5446: PPUSH
5447: LD_EXP 17
5451: PUSH
5452: LD_INT 2
5454: MINUS
5455: PPUSH
5456: CALL_OW 12
5460: ARRAY
5461: ST_TO_ADDR
// un := CreateVehicle ;
5462: LD_ADDR_VAR 0 4
5466: PUSH
5467: CALL_OW 45
5471: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5472: LD_VAR 0 4
5476: PPUSH
5477: LD_VAR 0 6
5481: PPUSH
5482: LD_INT 0
5484: PPUSH
5485: CALL_OW 49
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , skill ) , un ) ;
5489: LD_INT 3
5491: PPUSH
5492: LD_EXP 16
5496: PPUSH
5497: CALL 7323 0 2
5501: PPUSH
5502: LD_VAR 0 4
5506: PPUSH
5507: CALL_OW 52
// end ;
5511: GO 5407
5513: POP
5514: POP
// for i = 1 to ( arabian_force / 2 ) do
5515: LD_ADDR_VAR 0 2
5519: PUSH
5520: DOUBLE
5521: LD_INT 1
5523: DEC
5524: ST_TO_ADDR
5525: LD_EXP 20
5529: PUSH
5530: LD_INT 2
5532: DIVREAL
5533: PUSH
5534: FOR_TO
5535: IFFALSE 5614
// begin vc_chassis := ar_half_tracked ;
5537: LD_ADDR_OWVAR 37
5541: PUSH
5542: LD_INT 14
5544: ST_TO_ADDR
// vc_engine := engine_siberite ;
5545: LD_ADDR_OWVAR 39
5549: PUSH
5550: LD_INT 3
5552: ST_TO_ADDR
// vc_control := control_apeman ;
5553: LD_ADDR_OWVAR 38
5557: PUSH
5558: LD_INT 5
5560: ST_TO_ADDR
// vc_weapon := ar_weapons [ Rand ( 2 , ar_weapons ) ] ;
5561: LD_ADDR_OWVAR 40
5565: PUSH
5566: LD_EXP 17
5570: PUSH
5571: LD_INT 2
5573: PPUSH
5574: LD_EXP 17
5578: PPUSH
5579: CALL_OW 12
5583: ARRAY
5584: ST_TO_ADDR
// un := CreateVehicle ;
5585: LD_ADDR_VAR 0 4
5589: PUSH
5590: CALL_OW 45
5594: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5595: LD_VAR 0 4
5599: PPUSH
5600: LD_VAR 0 6
5604: PPUSH
5605: LD_INT 0
5607: PPUSH
5608: CALL_OW 49
// end ;
5612: GO 5534
5614: POP
5615: POP
// end ; 41 :
5616: GO 6699
5618: LD_INT 41
5620: DOUBLE
5621: EQUAL
5622: IFTRUE 5626
5624: GO 5770
5626: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
5627: LD_ADDR_VAR 0 6
5631: PUSH
5632: LD_EXP 15
5636: PUSH
5637: LD_INT 1
5639: PPUSH
5640: LD_EXP 15
5644: PPUSH
5645: CALL_OW 12
5649: ARRAY
5650: ST_TO_ADDR
// uc_side := 1 ;
5651: LD_ADDR_OWVAR 20
5655: PUSH
5656: LD_INT 1
5658: ST_TO_ADDR
// uc_nation := 1 ;
5659: LD_ADDR_OWVAR 21
5663: PUSH
5664: LD_INT 1
5666: ST_TO_ADDR
// for i = 1 to american_force do
5667: LD_ADDR_VAR 0 2
5671: PUSH
5672: DOUBLE
5673: LD_INT 1
5675: DEC
5676: ST_TO_ADDR
5677: LD_EXP 22
5681: PUSH
5682: FOR_TO
5683: IFFALSE 5766
// begin vc_chassis := us_morphling ;
5685: LD_ADDR_OWVAR 37
5689: PUSH
5690: LD_INT 5
5692: ST_TO_ADDR
// vc_engine := engine_siberite ;
5693: LD_ADDR_OWVAR 39
5697: PUSH
5698: LD_INT 3
5700: ST_TO_ADDR
// vc_control := control_computer ;
5701: LD_ADDR_OWVAR 38
5705: PUSH
5706: LD_INT 3
5708: ST_TO_ADDR
// vc_weapon := us_weapons [ Rand ( 1 , us_weapons - 1 ) ] ;
5709: LD_ADDR_OWVAR 40
5713: PUSH
5714: LD_EXP 19
5718: PUSH
5719: LD_INT 1
5721: PPUSH
5722: LD_EXP 19
5726: PUSH
5727: LD_INT 1
5729: MINUS
5730: PPUSH
5731: CALL_OW 12
5735: ARRAY
5736: ST_TO_ADDR
// un := CreateVehicle ;
5737: LD_ADDR_VAR 0 4
5741: PUSH
5742: CALL_OW 45
5746: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5747: LD_VAR 0 4
5751: PPUSH
5752: LD_VAR 0 6
5756: PPUSH
5757: LD_INT 0
5759: PPUSH
5760: CALL_OW 49
// end ;
5764: GO 5682
5766: POP
5767: POP
// end ; 42 :
5768: GO 6699
5770: LD_INT 42
5772: DOUBLE
5773: EQUAL
5774: IFTRUE 5778
5776: GO 5918
5778: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
5779: LD_ADDR_VAR 0 6
5783: PUSH
5784: LD_EXP 15
5788: PUSH
5789: LD_INT 1
5791: PPUSH
5792: LD_EXP 15
5796: PPUSH
5797: CALL_OW 12
5801: ARRAY
5802: ST_TO_ADDR
// uc_side := 1 ;
5803: LD_ADDR_OWVAR 20
5807: PUSH
5808: LD_INT 1
5810: ST_TO_ADDR
// uc_nation := 1 ;
5811: LD_ADDR_OWVAR 21
5815: PUSH
5816: LD_INT 1
5818: ST_TO_ADDR
// for i = 1 to american_force do
5819: LD_ADDR_VAR 0 2
5823: PUSH
5824: DOUBLE
5825: LD_INT 1
5827: DEC
5828: ST_TO_ADDR
5829: LD_EXP 22
5833: PUSH
5834: FOR_TO
5835: IFFALSE 5914
// begin vc_chassis := us_morphling ;
5837: LD_ADDR_OWVAR 37
5841: PUSH
5842: LD_INT 5
5844: ST_TO_ADDR
// vc_engine := engine_siberite ;
5845: LD_ADDR_OWVAR 39
5849: PUSH
5850: LD_INT 3
5852: ST_TO_ADDR
// vc_control := control_computer ;
5853: LD_ADDR_OWVAR 38
5857: PUSH
5858: LD_INT 3
5860: ST_TO_ADDR
// vc_weapon := us_weapons [ Rand ( 1 , us_weapons ) ] ;
5861: LD_ADDR_OWVAR 40
5865: PUSH
5866: LD_EXP 19
5870: PUSH
5871: LD_INT 1
5873: PPUSH
5874: LD_EXP 19
5878: PPUSH
5879: CALL_OW 12
5883: ARRAY
5884: ST_TO_ADDR
// un := CreateVehicle ;
5885: LD_ADDR_VAR 0 4
5889: PUSH
5890: CALL_OW 45
5894: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5895: LD_VAR 0 4
5899: PPUSH
5900: LD_VAR 0 6
5904: PPUSH
5905: LD_INT 0
5907: PPUSH
5908: CALL_OW 49
// end ;
5912: GO 5834
5914: POP
5915: POP
// end ; 51 :
5916: GO 6699
5918: LD_INT 51
5920: DOUBLE
5921: EQUAL
5922: IFTRUE 5926
5924: GO 6066
5926: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
5927: LD_ADDR_VAR 0 6
5931: PUSH
5932: LD_EXP 15
5936: PUSH
5937: LD_INT 1
5939: PPUSH
5940: LD_EXP 15
5944: PPUSH
5945: CALL_OW 12
5949: ARRAY
5950: ST_TO_ADDR
// uc_side := 3 ;
5951: LD_ADDR_OWVAR 20
5955: PUSH
5956: LD_INT 3
5958: ST_TO_ADDR
// uc_nation := 3 ;
5959: LD_ADDR_OWVAR 21
5963: PUSH
5964: LD_INT 3
5966: ST_TO_ADDR
// for i = 1 to russian_force do
5967: LD_ADDR_VAR 0 2
5971: PUSH
5972: DOUBLE
5973: LD_INT 1
5975: DEC
5976: ST_TO_ADDR
5977: LD_EXP 21
5981: PUSH
5982: FOR_TO
5983: IFFALSE 6062
// begin vc_chassis := ru_heavy_tracked ;
5985: LD_ADDR_OWVAR 37
5989: PUSH
5990: LD_INT 24
5992: ST_TO_ADDR
// vc_engine := engine_siberite ;
5993: LD_ADDR_OWVAR 39
5997: PUSH
5998: LD_INT 3
6000: ST_TO_ADDR
// vc_control := control_computer ;
6001: LD_ADDR_OWVAR 38
6005: PUSH
6006: LD_INT 3
6008: ST_TO_ADDR
// vc_weapon := ru_weapons [ Rand ( 1 , ru_weapons ) ] ;
6009: LD_ADDR_OWVAR 40
6013: PUSH
6014: LD_EXP 18
6018: PUSH
6019: LD_INT 1
6021: PPUSH
6022: LD_EXP 18
6026: PPUSH
6027: CALL_OW 12
6031: ARRAY
6032: ST_TO_ADDR
// un := CreateVehicle ;
6033: LD_ADDR_VAR 0 4
6037: PUSH
6038: CALL_OW 45
6042: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
6043: LD_VAR 0 4
6047: PPUSH
6048: LD_VAR 0 6
6052: PPUSH
6053: LD_INT 0
6055: PPUSH
6056: CALL_OW 49
// end ;
6060: GO 5982
6062: POP
6063: POP
// end ; 91 :
6064: GO 6699
6066: LD_INT 91
6068: DOUBLE
6069: EQUAL
6070: IFTRUE 6074
6072: GO 6212
6074: POP
// begin uc_side := 8 ;
6075: LD_ADDR_OWVAR 20
6079: PUSH
6080: LD_INT 8
6082: ST_TO_ADDR
// uc_nation := 1 ;
6083: LD_ADDR_OWVAR 21
6087: PUSH
6088: LD_INT 1
6090: ST_TO_ADDR
// for i = 1 to [ 4 , 3 , 3 ] [ game_difficulty ] do
6091: LD_ADDR_VAR 0 2
6095: PUSH
6096: DOUBLE
6097: LD_INT 1
6099: DEC
6100: ST_TO_ADDR
6101: LD_INT 4
6103: PUSH
6104: LD_INT 3
6106: PUSH
6107: LD_INT 3
6109: PUSH
6110: EMPTY
6111: LIST
6112: LIST
6113: LIST
6114: PUSH
6115: LD_EXP 2
6119: ARRAY
6120: PUSH
6121: FOR_TO
6122: IFFALSE 6208
// begin vc_chassis := us_heavy_tracked ;
6124: LD_ADDR_OWVAR 37
6128: PUSH
6129: LD_INT 4
6131: ST_TO_ADDR
// vc_engine := engine_siberite ;
6132: LD_ADDR_OWVAR 39
6136: PUSH
6137: LD_INT 3
6139: ST_TO_ADDR
// vc_control := control_computer ;
6140: LD_ADDR_OWVAR 38
6144: PUSH
6145: LD_INT 3
6147: ST_TO_ADDR
// vc_weapon := [ us_double_gun , us_heavy_gun ] [ Rand ( 1 , 2 ) ] ;
6148: LD_ADDR_OWVAR 40
6152: PUSH
6153: LD_INT 5
6155: PUSH
6156: LD_INT 6
6158: PUSH
6159: EMPTY
6160: LIST
6161: LIST
6162: PUSH
6163: LD_INT 1
6165: PPUSH
6166: LD_INT 2
6168: PPUSH
6169: CALL_OW 12
6173: ARRAY
6174: ST_TO_ADDR
// un := CreateVehicle ;
6175: LD_ADDR_VAR 0 4
6179: PUSH
6180: CALL_OW 45
6184: ST_TO_ADDR
// PlaceUnitArea ( un , areas [ 1 ] , false ) ;
6185: LD_VAR 0 4
6189: PPUSH
6190: LD_EXP 15
6194: PUSH
6195: LD_INT 1
6197: ARRAY
6198: PPUSH
6199: LD_INT 0
6201: PPUSH
6202: CALL_OW 49
// end ;
6206: GO 6121
6208: POP
6209: POP
// end ; 92 :
6210: GO 6699
6212: LD_INT 92
6214: DOUBLE
6215: EQUAL
6216: IFTRUE 6220
6218: GO 6549
6220: POP
// begin uc_side := 5 ;
6221: LD_ADDR_OWVAR 20
6225: PUSH
6226: LD_INT 5
6228: ST_TO_ADDR
// uc_nation := 2 ;
6229: LD_ADDR_OWVAR 21
6233: PUSH
6234: LD_INT 2
6236: ST_TO_ADDR
// filter := [ ] ;
6237: LD_ADDR_VAR 0 3
6241: PUSH
6242: EMPTY
6243: ST_TO_ADDR
// InitHc ;
6244: CALL_OW 19
// PrepareHuman ( false , 1 , l_skill ) ;
6248: LD_INT 0
6250: PPUSH
6251: LD_INT 1
6253: PPUSH
6254: LD_EXP 50
6258: PPUSH
6259: CALL_OW 380
// un := CreateHuman ;
6263: LD_ADDR_VAR 0 4
6267: PUSH
6268: CALL_OW 44
6272: ST_TO_ADDR
// filter := filter ^ un ;
6273: LD_ADDR_VAR 0 3
6277: PUSH
6278: LD_VAR 0 3
6282: PUSH
6283: LD_VAR 0 4
6287: ADD
6288: ST_TO_ADDR
// for i = 1 to [ 4 , 3 , 2 ] [ game_difficulty ] do
6289: LD_ADDR_VAR 0 2
6293: PUSH
6294: DOUBLE
6295: LD_INT 1
6297: DEC
6298: ST_TO_ADDR
6299: LD_INT 4
6301: PUSH
6302: LD_INT 3
6304: PUSH
6305: LD_INT 2
6307: PUSH
6308: EMPTY
6309: LIST
6310: LIST
6311: LIST
6312: PUSH
6313: LD_EXP 2
6317: ARRAY
6318: PUSH
6319: FOR_TO
6320: IFFALSE 6358
// begin un := CreateHumanWithClass ( 1 , l_skill ) ;
6322: LD_ADDR_VAR 0 4
6326: PUSH
6327: LD_INT 1
6329: PPUSH
6330: LD_EXP 50
6334: PPUSH
6335: CALL 7323 0 2
6339: ST_TO_ADDR
// filter := filter ^ un ;
6340: LD_ADDR_VAR 0 3
6344: PUSH
6345: LD_VAR 0 3
6349: PUSH
6350: LD_VAR 0 4
6354: ADD
6355: ST_TO_ADDR
// end ;
6356: GO 6319
6358: POP
6359: POP
// DialogueOn ;
6360: CALL_OW 6
// if GetSex ( filter [ 1 ] ) = sex_male then
6364: LD_VAR 0 3
6368: PUSH
6369: LD_INT 1
6371: ARRAY
6372: PPUSH
6373: CALL_OW 258
6377: PUSH
6378: LD_INT 1
6380: EQUAL
6381: IFFALSE 6401
// SayRadio ( filter [ 1 ] , DS-DF-1 ) else
6383: LD_VAR 0 3
6387: PUSH
6388: LD_INT 1
6390: ARRAY
6391: PPUSH
6392: LD_STRING DS-DF-1
6394: PPUSH
6395: CALL_OW 94
6399: GO 6417
// SayRadio ( filter [ 1 ] , DS-DF-f1 ) ;
6401: LD_VAR 0 3
6405: PUSH
6406: LD_INT 1
6408: ARRAY
6409: PPUSH
6410: LD_STRING DS-DF-f1
6412: PPUSH
6413: CALL_OW 94
// case Query ( DS-dezert ) of 1 :
6417: LD_STRING DS-dezert
6419: PPUSH
6420: CALL_OW 97
6424: PUSH
6425: LD_INT 1
6427: DOUBLE
6428: EQUAL
6429: IFTRUE 6433
6431: GO 6448
6433: POP
// Say ( l_cmndr , DS-DC-dis ) ; 2 :
6434: LD_EXP 49
6438: PPUSH
6439: LD_STRING DS-DC-dis
6441: PPUSH
6442: CALL_OW 88
6446: GO 6543
6448: LD_INT 2
6450: DOUBLE
6451: EQUAL
6452: IFTRUE 6456
6454: GO 6542
6456: POP
// begin Say ( l_cmndr , DS-DC-acp ) ;
6457: LD_EXP 49
6461: PPUSH
6462: LD_STRING DS-DC-acp
6464: PPUSH
6465: CALL_OW 88
// for i = 1 to filter do
6469: LD_ADDR_VAR 0 2
6473: PUSH
6474: DOUBLE
6475: LD_INT 1
6477: DEC
6478: ST_TO_ADDR
6479: LD_VAR 0 3
6483: PUSH
6484: FOR_TO
6485: IFFALSE 6538
// begin SetSide ( filter [ i ] , 8 ) ;
6487: LD_VAR 0 3
6491: PUSH
6492: LD_VAR 0 2
6496: ARRAY
6497: PPUSH
6498: LD_INT 8
6500: PPUSH
6501: CALL_OW 235
// PlaceUnitArea ( filter [ i ] , south_spawn , false ) ;
6505: LD_VAR 0 3
6509: PUSH
6510: LD_VAR 0 2
6514: ARRAY
6515: PPUSH
6516: LD_INT 4
6518: PPUSH
6519: LD_INT 0
6521: PPUSH
6522: CALL_OW 49
// CenterNowOnXY ( 111 , 121 ) ;
6526: LD_INT 111
6528: PPUSH
6529: LD_INT 121
6531: PPUSH
6532: CALL_OW 86
// end ;
6536: GO 6484
6538: POP
6539: POP
// end ; end ;
6540: GO 6543
6542: POP
// DialogueOff ;
6543: CALL_OW 7
// end ; 101 :
6547: GO 6699
6549: LD_INT 101
6551: DOUBLE
6552: EQUAL
6553: IFTRUE 6557
6555: GO 6609
6557: POP
// begin CreateCratesArea ( Rand ( 3 , 5 ) , crates_area , true ) ;
6558: LD_INT 3
6560: PPUSH
6561: LD_INT 5
6563: PPUSH
6564: CALL_OW 12
6568: PPUSH
6569: LD_INT 9
6571: PPUSH
6572: LD_INT 1
6574: PPUSH
6575: CALL_OW 55
// Wait ( 0 0$11 ) ;
6579: LD_INT 385
6581: PPUSH
6582: CALL_OW 67
// CreateCratesArea ( Rand ( 3 , 5 ) , crates_area , true ) ;
6586: LD_INT 3
6588: PPUSH
6589: LD_INT 5
6591: PPUSH
6592: CALL_OW 12
6596: PPUSH
6597: LD_INT 9
6599: PPUSH
6600: LD_INT 1
6602: PPUSH
6603: CALL_OW 55
// end ; 200 :
6607: GO 6699
6609: LD_INT 200
6611: DOUBLE
6612: EQUAL
6613: IFTRUE 6617
6615: GO 6698
6617: POP
// begin Say ( Leopold , DS-end ) ;
6618: LD_EXP 7
6622: PPUSH
6623: LD_STRING DS-end
6625: PPUSH
6626: CALL_OW 88
// if Difficulty = 3 then
6630: LD_OWVAR 67
6634: PUSH
6635: LD_INT 3
6637: EQUAL
6638: IFFALSE 6647
// SetAchievement ( ACH_DESERT ) ;
6640: LD_STRING ACH_DESERT
6642: PPUSH
6643: CALL_OW 543
// music_nat := 5 ;
6647: LD_ADDR_OWVAR 71
6651: PUSH
6652: LD_INT 5
6654: ST_TO_ADDR
// AddMedal ( med , 1 ) ;
6655: LD_STRING med
6657: PPUSH
6658: LD_INT 1
6660: PPUSH
6661: CALL_OW 101
// AddMedal ( med , 1 ) ;
6665: LD_STRING med
6667: PPUSH
6668: LD_INT 1
6670: PPUSH
6671: CALL_OW 101
// AddMedal ( med , 1 ) ;
6675: LD_STRING med
6677: PPUSH
6678: LD_INT 1
6680: PPUSH
6681: CALL_OW 101
// GiveMedals ( MAIN ) ;
6685: LD_STRING MAIN
6687: PPUSH
6688: CALL_OW 102
// YouWin ;
6692: CALL_OW 103
// end ; end ;
6696: GO 6699
6698: POP
// end ;
6699: PPOPN 6
6701: END
// on UnitGoesToRed ( un ) do begin if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) then
6702: LD_VAR 0 1
6706: PUSH
6707: LD_INT 22
6709: PUSH
6710: LD_INT 2
6712: PUSH
6713: EMPTY
6714: LIST
6715: LIST
6716: PUSH
6717: LD_INT 21
6719: PUSH
6720: LD_INT 2
6722: PUSH
6723: EMPTY
6724: LIST
6725: LIST
6726: PUSH
6727: EMPTY
6728: LIST
6729: LIST
6730: PPUSH
6731: CALL_OW 69
6735: IN
6736: IFFALSE 6861
// begin Wait ( Rand ( 0 0$03 , 0 0$06 ) ) ;
6738: LD_INT 105
6740: PPUSH
6741: LD_INT 210
6743: PPUSH
6744: CALL_OW 12
6748: PPUSH
6749: CALL_OW 67
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
6753: LD_VAR 0 1
6757: PPUSH
6758: CALL_OW 250
6762: PPUSH
6763: LD_VAR 0 1
6767: PPUSH
6768: CALL_OW 251
6772: PPUSH
6773: LD_INT 3
6775: PPUSH
6776: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
6780: LD_VAR 0 1
6784: PPUSH
6785: CALL_OW 250
6789: PPUSH
6790: LD_VAR 0 1
6794: PPUSH
6795: CALL_OW 251
6799: PPUSH
6800: LD_INT 3
6802: PPUSH
6803: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
6807: LD_VAR 0 1
6811: PPUSH
6812: CALL_OW 250
6816: PPUSH
6817: LD_VAR 0 1
6821: PPUSH
6822: CALL_OW 251
6826: PPUSH
6827: LD_INT 3
6829: PPUSH
6830: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
6834: LD_VAR 0 1
6838: PPUSH
6839: CALL_OW 250
6843: PPUSH
6844: LD_VAR 0 1
6848: PPUSH
6849: CALL_OW 251
6853: PPUSH
6854: LD_INT 3
6856: PPUSH
6857: CALL_OW 453
// end ; end ;
6861: PPOPN 1
6863: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
6864: LD_VAR 0 1
6868: PPUSH
6869: CALL 24418 0 1
// if un = fort then
6873: LD_VAR 0 1
6877: PUSH
6878: LD_INT 23
6880: EQUAL
6881: IFFALSE 6891
// fort_destroyed := true ;
6883: LD_ADDR_EXP 32
6887: PUSH
6888: LD_INT 1
6890: ST_TO_ADDR
// if un = l_cmndr then
6891: LD_VAR 0 1
6895: PUSH
6896: LD_EXP 49
6900: EQUAL
6901: IFFALSE 6911
// hero_died := true ;
6903: LD_ADDR_EXP 33
6907: PUSH
6908: LD_INT 1
6910: ST_TO_ADDR
// end ;
6911: PPOPN 1
6913: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin debug_strings := un ;
6914: LD_ADDR_OWVAR 48
6918: PUSH
6919: LD_VAR 0 1
6923: ST_TO_ADDR
// SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
6924: LD_VAR 0 1
6928: PPUSH
6929: LD_VAR 0 2
6933: PPUSH
6934: LD_VAR 0 3
6938: PPUSH
6939: CALL 24514 0 3
// end ;
6943: PPOPN 3
6945: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
6946: LD_VAR 0 1
6950: PPUSH
6951: CALL 24522 0 1
// end ;
6955: PPOPN 1
6957: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
6958: LD_VAR 0 1
6962: PPUSH
6963: LD_VAR 0 2
6967: PPUSH
6968: CALL 24538 0 2
// end ; end_of_file
6972: PPOPN 2
6974: END
// export function RefreshTime ( time , bool ) ; begin
6975: LD_INT 0
6977: PPUSH
// if bool then
6978: LD_VAR 0 2
6982: IFFALSE 7000
// time := time + 0 0$01 else
6984: LD_ADDR_VAR 0 1
6988: PUSH
6989: LD_VAR 0 1
6993: PUSH
6994: LD_INT 35
6996: PLUS
6997: ST_TO_ADDR
6998: GO 7014
// time := time - 0 0$01 ;
7000: LD_ADDR_VAR 0 1
7004: PUSH
7005: LD_VAR 0 1
7009: PUSH
7010: LD_INT 35
7012: MINUS
7013: ST_TO_ADDR
// result := time ;
7014: LD_ADDR_VAR 0 3
7018: PUSH
7019: LD_VAR 0 1
7023: ST_TO_ADDR
// end ;
7024: LD_VAR 0 3
7028: RET
// export function MineExist ( side ) ; begin
7029: LD_INT 0
7031: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_siberite_mine ] ] ) > 0 then
7032: LD_INT 22
7034: PUSH
7035: LD_VAR 0 1
7039: PUSH
7040: EMPTY
7041: LIST
7042: LIST
7043: PUSH
7044: LD_INT 30
7046: PUSH
7047: LD_INT 30
7049: PUSH
7050: EMPTY
7051: LIST
7052: LIST
7053: PUSH
7054: EMPTY
7055: LIST
7056: LIST
7057: PPUSH
7058: CALL_OW 69
7062: PUSH
7063: LD_INT 0
7065: GREATER
7066: IFFALSE 7078
// result := true else
7068: LD_ADDR_VAR 0 2
7072: PUSH
7073: LD_INT 1
7075: ST_TO_ADDR
7076: GO 7086
// result := false ;
7078: LD_ADDR_VAR 0 2
7082: PUSH
7083: LD_INT 0
7085: ST_TO_ADDR
// end ;
7086: LD_VAR 0 2
7090: RET
// export function FacExist ( side ) ; begin
7091: LD_INT 0
7093: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_factory ] ] ) > 0 ;
7094: LD_ADDR_VAR 0 2
7098: PUSH
7099: LD_INT 22
7101: PUSH
7102: LD_VAR 0 1
7106: PUSH
7107: EMPTY
7108: LIST
7109: LIST
7110: PUSH
7111: LD_INT 30
7113: PUSH
7114: LD_INT 3
7116: PUSH
7117: EMPTY
7118: LIST
7119: LIST
7120: PUSH
7121: EMPTY
7122: LIST
7123: LIST
7124: PPUSH
7125: CALL_OW 69
7129: PUSH
7130: LD_INT 0
7132: GREATER
7133: ST_TO_ADDR
// end ;
7134: LD_VAR 0 2
7138: RET
// export function ConnectWithTower ( side ) ; var i , filter , tower ; begin
7139: LD_INT 0
7141: PPUSH
7142: PPUSH
7143: PPUSH
7144: PPUSH
// filter := FilterAllUnits ( [ [ f_side , side ] , [ f_control , control_remote ] , [ f_ok ] ] ) ;
7145: LD_ADDR_VAR 0 4
7149: PUSH
7150: LD_INT 22
7152: PUSH
7153: LD_VAR 0 1
7157: PUSH
7158: EMPTY
7159: LIST
7160: LIST
7161: PUSH
7162: LD_INT 33
7164: PUSH
7165: LD_INT 2
7167: PUSH
7168: EMPTY
7169: LIST
7170: LIST
7171: PUSH
7172: LD_INT 50
7174: PUSH
7175: EMPTY
7176: LIST
7177: PUSH
7178: EMPTY
7179: LIST
7180: LIST
7181: LIST
7182: PPUSH
7183: CALL_OW 69
7187: ST_TO_ADDR
// tower := FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , ar_control_tower ] ] ) ;
7188: LD_ADDR_VAR 0 5
7192: PUSH
7193: LD_INT 22
7195: PUSH
7196: LD_VAR 0 1
7200: PUSH
7201: EMPTY
7202: LIST
7203: LIST
7204: PUSH
7205: LD_INT 34
7207: PUSH
7208: LD_INT 31
7210: PUSH
7211: EMPTY
7212: LIST
7213: LIST
7214: PUSH
7215: EMPTY
7216: LIST
7217: LIST
7218: PPUSH
7219: CALL_OW 69
7223: ST_TO_ADDR
// if tower > 0 and filter > 0 then
7224: LD_VAR 0 5
7228: PUSH
7229: LD_INT 0
7231: GREATER
7232: PUSH
7233: LD_VAR 0 4
7237: PUSH
7238: LD_INT 0
7240: GREATER
7241: AND
7242: IFFALSE 7318
// for i = 1 to filter do
7244: LD_ADDR_VAR 0 3
7248: PUSH
7249: DOUBLE
7250: LD_INT 1
7252: DEC
7253: ST_TO_ADDR
7254: LD_VAR 0 4
7258: PUSH
7259: FOR_TO
7260: IFFALSE 7316
// if not IsControledBy ( filter [ i ] ) then
7262: LD_VAR 0 4
7266: PUSH
7267: LD_VAR 0 3
7271: ARRAY
7272: PPUSH
7273: CALL_OW 312
7277: NOT
7278: IFFALSE 7314
// ComLinkTo ( filter [ i ] , tower [ Rand ( 1 , tower ) ] ) ;
7280: LD_VAR 0 4
7284: PUSH
7285: LD_VAR 0 3
7289: ARRAY
7290: PPUSH
7291: LD_VAR 0 5
7295: PUSH
7296: LD_INT 1
7298: PPUSH
7299: LD_VAR 0 5
7303: PPUSH
7304: CALL_OW 12
7308: ARRAY
7309: PPUSH
7310: CALL_OW 135
7314: GO 7259
7316: POP
7317: POP
// end ;
7318: LD_VAR 0 2
7322: RET
// export function CreateHumanWithClass ( clas , lvl ) ; var skill_com , skill_eng , skill_mech , skill_sci , bonus ; begin
7323: LD_INT 0
7325: PPUSH
7326: PPUSH
7327: PPUSH
7328: PPUSH
7329: PPUSH
7330: PPUSH
// hc_class := clas ;
7331: LD_ADDR_OWVAR 28
7335: PUSH
7336: LD_VAR 0 1
7340: ST_TO_ADDR
// skill_com := ( lvl + Rand ( - 1 , 1 ) ) ;
7341: LD_ADDR_VAR 0 4
7345: PUSH
7346: LD_VAR 0 2
7350: PUSH
7351: LD_INT 1
7353: NEG
7354: PPUSH
7355: LD_INT 1
7357: PPUSH
7358: CALL_OW 12
7362: PLUS
7363: ST_TO_ADDR
// skill_eng := ( lvl + Rand ( - 1 , 1 ) ) ;
7364: LD_ADDR_VAR 0 5
7368: PUSH
7369: LD_VAR 0 2
7373: PUSH
7374: LD_INT 1
7376: NEG
7377: PPUSH
7378: LD_INT 1
7380: PPUSH
7381: CALL_OW 12
7385: PLUS
7386: ST_TO_ADDR
// skill_mech := ( lvl + Rand ( - 1 , 1 ) ) ;
7387: LD_ADDR_VAR 0 6
7391: PUSH
7392: LD_VAR 0 2
7396: PUSH
7397: LD_INT 1
7399: NEG
7400: PPUSH
7401: LD_INT 1
7403: PPUSH
7404: CALL_OW 12
7408: PLUS
7409: ST_TO_ADDR
// skill_sci := ( lvl + Rand ( - 1 , 1 ) ) ;
7410: LD_ADDR_VAR 0 7
7414: PUSH
7415: LD_VAR 0 2
7419: PUSH
7420: LD_INT 1
7422: NEG
7423: PPUSH
7424: LD_INT 1
7426: PPUSH
7427: CALL_OW 12
7431: PLUS
7432: ST_TO_ADDR
// if clas = 1 or clas = 9 or clas = class_sniper or clas = class_mortar then
7433: LD_VAR 0 1
7437: PUSH
7438: LD_INT 1
7440: EQUAL
7441: PUSH
7442: LD_VAR 0 1
7446: PUSH
7447: LD_INT 9
7449: EQUAL
7450: OR
7451: PUSH
7452: LD_VAR 0 1
7456: PUSH
7457: LD_INT 5
7459: EQUAL
7460: OR
7461: PUSH
7462: LD_VAR 0 1
7466: PUSH
7467: LD_INT 8
7469: EQUAL
7470: OR
7471: IFFALSE 7496
// bonus := [ 2 , 0 , 0 , 0 ] ;
7473: LD_ADDR_VAR 0 8
7477: PUSH
7478: LD_INT 2
7480: PUSH
7481: LD_INT 0
7483: PUSH
7484: LD_INT 0
7486: PUSH
7487: LD_INT 0
7489: PUSH
7490: EMPTY
7491: LIST
7492: LIST
7493: LIST
7494: LIST
7495: ST_TO_ADDR
// if clas = 2 then
7496: LD_VAR 0 1
7500: PUSH
7501: LD_INT 2
7503: EQUAL
7504: IFFALSE 7529
// bonus := [ 0 , 2 , 0 , 0 ] ;
7506: LD_ADDR_VAR 0 8
7510: PUSH
7511: LD_INT 0
7513: PUSH
7514: LD_INT 2
7516: PUSH
7517: LD_INT 0
7519: PUSH
7520: LD_INT 0
7522: PUSH
7523: EMPTY
7524: LIST
7525: LIST
7526: LIST
7527: LIST
7528: ST_TO_ADDR
// if clas = 3 then
7529: LD_VAR 0 1
7533: PUSH
7534: LD_INT 3
7536: EQUAL
7537: IFFALSE 7562
// bonus := [ 0 , 0 , 2 , 0 ] ;
7539: LD_ADDR_VAR 0 8
7543: PUSH
7544: LD_INT 0
7546: PUSH
7547: LD_INT 0
7549: PUSH
7550: LD_INT 2
7552: PUSH
7553: LD_INT 0
7555: PUSH
7556: EMPTY
7557: LIST
7558: LIST
7559: LIST
7560: LIST
7561: ST_TO_ADDR
// if clas = 4 then
7562: LD_VAR 0 1
7566: PUSH
7567: LD_INT 4
7569: EQUAL
7570: IFFALSE 7595
// bonus := [ 0 , 0 , 0 , 2 ] ;
7572: LD_ADDR_VAR 0 8
7576: PUSH
7577: LD_INT 0
7579: PUSH
7580: LD_INT 0
7582: PUSH
7583: LD_INT 0
7585: PUSH
7586: LD_INT 2
7588: PUSH
7589: EMPTY
7590: LIST
7591: LIST
7592: LIST
7593: LIST
7594: ST_TO_ADDR
// if clas > 4 and clas <> 9 and clas <> class_sniper and clas <> class_mortar then
7595: LD_VAR 0 1
7599: PUSH
7600: LD_INT 4
7602: GREATER
7603: PUSH
7604: LD_VAR 0 1
7608: PUSH
7609: LD_INT 9
7611: NONEQUAL
7612: AND
7613: PUSH
7614: LD_VAR 0 1
7618: PUSH
7619: LD_INT 5
7621: NONEQUAL
7622: AND
7623: PUSH
7624: LD_VAR 0 1
7628: PUSH
7629: LD_INT 8
7631: NONEQUAL
7632: AND
7633: IFFALSE 7658
// bonus := [ 0 , 0 , 0 , 0 ] ;
7635: LD_ADDR_VAR 0 8
7639: PUSH
7640: LD_INT 0
7642: PUSH
7643: LD_INT 0
7645: PUSH
7646: LD_INT 0
7648: PUSH
7649: LD_INT 0
7651: PUSH
7652: EMPTY
7653: LIST
7654: LIST
7655: LIST
7656: LIST
7657: ST_TO_ADDR
// hc_basic_skills := [ Rand ( 0 , 2 ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) ] ;
7658: LD_ADDR_OWVAR 30
7662: PUSH
7663: LD_INT 0
7665: PPUSH
7666: LD_INT 2
7668: PPUSH
7669: CALL_OW 12
7673: PUSH
7674: LD_INT 0
7676: PPUSH
7677: LD_INT 2
7679: PPUSH
7680: CALL_OW 12
7684: PUSH
7685: LD_INT 0
7687: PPUSH
7688: LD_INT 2
7690: PPUSH
7691: CALL_OW 12
7695: PUSH
7696: LD_INT 0
7698: PPUSH
7699: LD_INT 2
7701: PPUSH
7702: CALL_OW 12
7706: PUSH
7707: EMPTY
7708: LIST
7709: LIST
7710: LIST
7711: LIST
7712: ST_TO_ADDR
// hc_skills := [ skill_com + bonus [ 1 ] , skill_eng + bonus [ 2 ] , skill_mech + bonus [ 3 ] , skill_sci + bonus [ 4 ] ] ;
7713: LD_ADDR_OWVAR 31
7717: PUSH
7718: LD_VAR 0 4
7722: PUSH
7723: LD_VAR 0 8
7727: PUSH
7728: LD_INT 1
7730: ARRAY
7731: PLUS
7732: PUSH
7733: LD_VAR 0 5
7737: PUSH
7738: LD_VAR 0 8
7742: PUSH
7743: LD_INT 2
7745: ARRAY
7746: PLUS
7747: PUSH
7748: LD_VAR 0 6
7752: PUSH
7753: LD_VAR 0 8
7757: PUSH
7758: LD_INT 3
7760: ARRAY
7761: PLUS
7762: PUSH
7763: LD_VAR 0 7
7767: PUSH
7768: LD_VAR 0 8
7772: PUSH
7773: LD_INT 4
7775: ARRAY
7776: PLUS
7777: PUSH
7778: EMPTY
7779: LIST
7780: LIST
7781: LIST
7782: LIST
7783: ST_TO_ADDR
// hc_sex := Rand ( sex_male , sex_female ) ;
7784: LD_ADDR_OWVAR 27
7788: PUSH
7789: LD_INT 1
7791: PPUSH
7792: LD_INT 2
7794: PPUSH
7795: CALL_OW 12
7799: ST_TO_ADDR
// hc_gallery :=  ;
7800: LD_ADDR_OWVAR 33
7804: PUSH
7805: LD_STRING 
7807: ST_TO_ADDR
// hc_attr := [ Rand ( 8 , 12 ) , Rand ( 9 , 11 ) ] ;
7808: LD_ADDR_OWVAR 29
7812: PUSH
7813: LD_INT 8
7815: PPUSH
7816: LD_INT 12
7818: PPUSH
7819: CALL_OW 12
7823: PUSH
7824: LD_INT 9
7826: PPUSH
7827: LD_INT 11
7829: PPUSH
7830: CALL_OW 12
7834: PUSH
7835: EMPTY
7836: LIST
7837: LIST
7838: ST_TO_ADDR
// hc_name :=  ;
7839: LD_ADDR_OWVAR 26
7843: PUSH
7844: LD_STRING 
7846: ST_TO_ADDR
// result := CreateHuman ;
7847: LD_ADDR_VAR 0 3
7851: PUSH
7852: CALL_OW 44
7856: ST_TO_ADDR
// end ;
7857: LD_VAR 0 3
7861: RET
// export function GetSpeed ( unit ) ; begin
7862: LD_INT 0
7864: PPUSH
// result := GetProperties ( unit ) [ 1 ] ;
7865: LD_ADDR_VAR 0 2
7869: PUSH
7870: LD_VAR 0 1
7874: PPUSH
7875: CALL_OW 464
7879: PUSH
7880: LD_INT 1
7882: ARRAY
7883: ST_TO_ADDR
// end ;
7884: LD_VAR 0 2
7888: RET
// export function CreateNature ( area , num1 , num2 , num3 , num4 ) ; var l , apeman , tiger , bird , horse ; begin
7889: LD_INT 0
7891: PPUSH
7892: PPUSH
7893: PPUSH
7894: PPUSH
7895: PPUSH
7896: PPUSH
// uc_nation = nation_nature ;
7897: LD_ADDR_OWVAR 21
7901: PUSH
7902: LD_INT 0
7904: ST_TO_ADDR
// uc_side = 0 ;
7905: LD_ADDR_OWVAR 20
7909: PUSH
7910: LD_INT 0
7912: ST_TO_ADDR
// l = 0 ;
7913: LD_ADDR_VAR 0 7
7917: PUSH
7918: LD_INT 0
7920: ST_TO_ADDR
// repeat begin uc_direction = Rand ( 0 , 5 ) ;
7921: LD_ADDR_OWVAR 24
7925: PUSH
7926: LD_INT 0
7928: PPUSH
7929: LD_INT 5
7931: PPUSH
7932: CALL_OW 12
7936: ST_TO_ADDR
// hc_agressivity = Rand ( - 5 , 0 ) ;
7937: LD_ADDR_OWVAR 35
7941: PUSH
7942: LD_INT 5
7944: NEG
7945: PPUSH
7946: LD_INT 0
7948: PPUSH
7949: CALL_OW 12
7953: ST_TO_ADDR
// hc_gallery =  ;
7954: LD_ADDR_OWVAR 33
7958: PUSH
7959: LD_STRING 
7961: ST_TO_ADDR
// hc_class = class_apeman ;
7962: LD_ADDR_OWVAR 28
7966: PUSH
7967: LD_INT 12
7969: ST_TO_ADDR
// hc_attr = [ Rand ( 11 , 13 ) , Rand ( 10 , 11 ) ] ;
7970: LD_ADDR_OWVAR 29
7974: PUSH
7975: LD_INT 11
7977: PPUSH
7978: LD_INT 13
7980: PPUSH
7981: CALL_OW 12
7985: PUSH
7986: LD_INT 10
7988: PPUSH
7989: LD_INT 11
7991: PPUSH
7992: CALL_OW 12
7996: PUSH
7997: EMPTY
7998: LIST
7999: LIST
8000: ST_TO_ADDR
// hc_sex = sex_male ;
8001: LD_ADDR_OWVAR 27
8005: PUSH
8006: LD_INT 1
8008: ST_TO_ADDR
// hc_skills = [ Rand ( 0 , 2 ) , 0 , 0 , 0 ] ;
8009: LD_ADDR_OWVAR 31
8013: PUSH
8014: LD_INT 0
8016: PPUSH
8017: LD_INT 2
8019: PPUSH
8020: CALL_OW 12
8024: PUSH
8025: LD_INT 0
8027: PUSH
8028: LD_INT 0
8030: PUSH
8031: LD_INT 0
8033: PUSH
8034: EMPTY
8035: LIST
8036: LIST
8037: LIST
8038: LIST
8039: ST_TO_ADDR
// apeman = CreateHuman ;
8040: LD_ADDR_VAR 0 8
8044: PUSH
8045: CALL_OW 44
8049: ST_TO_ADDR
// PlaceUnitArea ( apeman , area , false ) ;
8050: LD_VAR 0 8
8054: PPUSH
8055: LD_VAR 0 1
8059: PPUSH
8060: LD_INT 0
8062: PPUSH
8063: CALL_OW 49
// l = l + 1 ;
8067: LD_ADDR_VAR 0 7
8071: PUSH
8072: LD_VAR 0 7
8076: PUSH
8077: LD_INT 1
8079: PLUS
8080: ST_TO_ADDR
// end until l = num1 ;
8081: LD_VAR 0 7
8085: PUSH
8086: LD_VAR 0 2
8090: EQUAL
8091: IFFALSE 7921
// l = 0 ;
8093: LD_ADDR_VAR 0 7
8097: PUSH
8098: LD_INT 0
8100: ST_TO_ADDR
// repeat begin hc_agressivity = Rand ( 0 , 25 ) ;
8101: LD_ADDR_OWVAR 35
8105: PUSH
8106: LD_INT 0
8108: PPUSH
8109: LD_INT 25
8111: PPUSH
8112: CALL_OW 12
8116: ST_TO_ADDR
// hc_class = class_tiger ;
8117: LD_ADDR_OWVAR 28
8121: PUSH
8122: LD_INT 14
8124: ST_TO_ADDR
// hc_sex = sex_male ;
8125: LD_ADDR_OWVAR 27
8129: PUSH
8130: LD_INT 1
8132: ST_TO_ADDR
// hc_gallery = sandnature ;
8133: LD_ADDR_OWVAR 33
8137: PUSH
8138: LD_STRING sandnature
8140: ST_TO_ADDR
// hc_face_number = 3 ;
8141: LD_ADDR_OWVAR 34
8145: PUSH
8146: LD_INT 3
8148: ST_TO_ADDR
// tiger = CreateHuman ;
8149: LD_ADDR_VAR 0 9
8153: PUSH
8154: CALL_OW 44
8158: ST_TO_ADDR
// PlaceUnitArea ( tiger , area , false ) ;
8159: LD_VAR 0 9
8163: PPUSH
8164: LD_VAR 0 1
8168: PPUSH
8169: LD_INT 0
8171: PPUSH
8172: CALL_OW 49
// l = l + 1 ;
8176: LD_ADDR_VAR 0 7
8180: PUSH
8181: LD_VAR 0 7
8185: PUSH
8186: LD_INT 1
8188: PLUS
8189: ST_TO_ADDR
// end until l = num2 ;
8190: LD_VAR 0 7
8194: PUSH
8195: LD_VAR 0 3
8199: EQUAL
8200: IFFALSE 8101
// l = 0 ;
8202: LD_ADDR_VAR 0 7
8206: PUSH
8207: LD_INT 0
8209: ST_TO_ADDR
// repeat begin hc_class = class_phororhacos ;
8210: LD_ADDR_OWVAR 28
8214: PUSH
8215: LD_INT 18
8217: ST_TO_ADDR
// hc_gallery = sandnature ;
8218: LD_ADDR_OWVAR 33
8222: PUSH
8223: LD_STRING sandnature
8225: ST_TO_ADDR
// hc_face_number = 1 ;
8226: LD_ADDR_OWVAR 34
8230: PUSH
8231: LD_INT 1
8233: ST_TO_ADDR
// bird = CreateHuman ;
8234: LD_ADDR_VAR 0 10
8238: PUSH
8239: CALL_OW 44
8243: ST_TO_ADDR
// PlaceUnitAnywhere ( bird , false ) ;
8244: LD_VAR 0 10
8248: PPUSH
8249: LD_INT 0
8251: PPUSH
8252: CALL_OW 51
// l = l + 1 ;
8256: LD_ADDR_VAR 0 7
8260: PUSH
8261: LD_VAR 0 7
8265: PUSH
8266: LD_INT 1
8268: PLUS
8269: ST_TO_ADDR
// end until l = num3 ;
8270: LD_VAR 0 7
8274: PUSH
8275: LD_VAR 0 4
8279: EQUAL
8280: IFFALSE 8210
// l = 0 ;
8282: LD_ADDR_VAR 0 7
8286: PUSH
8287: LD_INT 0
8289: ST_TO_ADDR
// repeat begin hc_class = 21 ;
8290: LD_ADDR_OWVAR 28
8294: PUSH
8295: LD_INT 21
8297: ST_TO_ADDR
// hc_gallery = sandnature ;
8298: LD_ADDR_OWVAR 33
8302: PUSH
8303: LD_STRING sandnature
8305: ST_TO_ADDR
// hc_face_number = 5 ;
8306: LD_ADDR_OWVAR 34
8310: PUSH
8311: LD_INT 5
8313: ST_TO_ADDR
// horse := CreateHuman ;
8314: LD_ADDR_VAR 0 11
8318: PUSH
8319: CALL_OW 44
8323: ST_TO_ADDR
// PlaceUnitArea ( horse , area , false ) ;
8324: LD_VAR 0 11
8328: PPUSH
8329: LD_VAR 0 1
8333: PPUSH
8334: LD_INT 0
8336: PPUSH
8337: CALL_OW 49
// l = l + 1 ;
8341: LD_ADDR_VAR 0 7
8345: PUSH
8346: LD_VAR 0 7
8350: PUSH
8351: LD_INT 1
8353: PLUS
8354: ST_TO_ADDR
// end until l = num4 ;
8355: LD_VAR 0 7
8359: PUSH
8360: LD_VAR 0 5
8364: EQUAL
8365: IFFALSE 8290
// end ;
8367: LD_VAR 0 6
8371: RET
// export function PrepareComm ; begin
8372: LD_INT 0
8374: PPUSH
// uc_side := 1 ;
8375: LD_ADDR_OWVAR 20
8379: PUSH
8380: LD_INT 1
8382: ST_TO_ADDR
// uc_nation := 1 ;
8383: LD_ADDR_OWVAR 21
8387: PUSH
8388: LD_INT 1
8390: ST_TO_ADDR
// hc_gallery :=  ;
8391: LD_ADDR_OWVAR 33
8395: PUSH
8396: LD_STRING 
8398: ST_TO_ADDR
// hc_name :=  ;
8399: LD_ADDR_OWVAR 26
8403: PUSH
8404: LD_STRING 
8406: ST_TO_ADDR
// hc_class := 1 ;
8407: LD_ADDR_OWVAR 28
8411: PUSH
8412: LD_INT 1
8414: ST_TO_ADDR
// hc_sex := sex_male ;
8415: LD_ADDR_OWVAR 27
8419: PUSH
8420: LD_INT 1
8422: ST_TO_ADDR
// am_comander := CreateHuman ;
8423: LD_ADDR_EXP 46
8427: PUSH
8428: CALL_OW 44
8432: ST_TO_ADDR
// uc_side := 3 ;
8433: LD_ADDR_OWVAR 20
8437: PUSH
8438: LD_INT 3
8440: ST_TO_ADDR
// uc_nation := 3 ;
8441: LD_ADDR_OWVAR 21
8445: PUSH
8446: LD_INT 3
8448: ST_TO_ADDR
// ru_comander := CreateHuman ;
8449: LD_ADDR_EXP 47
8453: PUSH
8454: CALL_OW 44
8458: ST_TO_ADDR
// uc_side := 2 ;
8459: LD_ADDR_OWVAR 20
8463: PUSH
8464: LD_INT 2
8466: ST_TO_ADDR
// uc_nation := 2 ;
8467: LD_ADDR_OWVAR 21
8471: PUSH
8472: LD_INT 2
8474: ST_TO_ADDR
// hc_name := Heike Steyer ;
8475: LD_ADDR_OWVAR 26
8479: PUSH
8480: LD_STRING Heike Steyer
8482: ST_TO_ADDR
// hc_sex := sex_female ;
8483: LD_ADDR_OWVAR 27
8487: PUSH
8488: LD_INT 2
8490: ST_TO_ADDR
// hc_gallery := sandar ;
8491: LD_ADDR_OWVAR 33
8495: PUSH
8496: LD_STRING sandar
8498: ST_TO_ADDR
// hc_face_number := 14 ;
8499: LD_ADDR_OWVAR 34
8503: PUSH
8504: LD_INT 14
8506: ST_TO_ADDR
// ar_comander := CreateHuman ;
8507: LD_ADDR_EXP 48
8511: PUSH
8512: CALL_OW 44
8516: ST_TO_ADDR
// end ;
8517: LD_VAR 0 1
8521: RET
// export function SpeedFilter ( filter , speed ) ; var list , i ; begin
8522: LD_INT 0
8524: PPUSH
8525: PPUSH
8526: PPUSH
// list := [ ] ;
8527: LD_ADDR_VAR 0 4
8531: PUSH
8532: EMPTY
8533: ST_TO_ADDR
// for i = 1 to filter do
8534: LD_ADDR_VAR 0 5
8538: PUSH
8539: DOUBLE
8540: LD_INT 1
8542: DEC
8543: ST_TO_ADDR
8544: LD_VAR 0 1
8548: PUSH
8549: FOR_TO
8550: IFFALSE 8599
// if GetSpeed ( filter [ i ] ) < speed then
8552: LD_VAR 0 1
8556: PUSH
8557: LD_VAR 0 5
8561: ARRAY
8562: PPUSH
8563: CALL 7862 0 1
8567: PUSH
8568: LD_VAR 0 2
8572: LESS
8573: IFFALSE 8597
// list := list ^ filter [ i ] ;
8575: LD_ADDR_VAR 0 4
8579: PUSH
8580: LD_VAR 0 4
8584: PUSH
8585: LD_VAR 0 1
8589: PUSH
8590: LD_VAR 0 5
8594: ARRAY
8595: ADD
8596: ST_TO_ADDR
8597: GO 8549
8599: POP
8600: POP
// result := list ;
8601: LD_ADDR_VAR 0 3
8605: PUSH
8606: LD_VAR 0 4
8610: ST_TO_ADDR
// end ; end_of_file end_of_file
8611: LD_VAR 0 3
8615: RET
// export globalGameSaveCounter ; every 0 0$1 do
8616: GO 8618
8618: DISABLE
// begin enable ;
8619: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
8620: LD_STRING updateTimer(
8622: PUSH
8623: LD_OWVAR 1
8627: STR
8628: PUSH
8629: LD_STRING );
8631: STR
8632: PPUSH
8633: CALL_OW 559
// end ;
8637: END
// every 0 0$1 do
8638: GO 8640
8640: DISABLE
// begin globalGameSaveCounter := 0 ;
8641: LD_ADDR_EXP 52
8645: PUSH
8646: LD_INT 0
8648: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
8649: LD_STRING setGameSaveCounter(0)
8651: PPUSH
8652: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
8656: LD_STRING initStreamRollete();
8658: PPUSH
8659: CALL_OW 559
// InitStreamMode ;
8663: CALL 9989 0 0
// DefineStreamItems ( false ) ;
8667: LD_INT 0
8669: PPUSH
8670: CALL 10453 0 1
// end ;
8674: END
// export function SOS_MapStart ( ) ; begin
8675: LD_INT 0
8677: PPUSH
// if streamModeActive then
8678: LD_EXP 53
8682: IFFALSE 8691
// DefineStreamItems ( true ) ;
8684: LD_INT 1
8686: PPUSH
8687: CALL 10453 0 1
// UpdateLuaVariables ( ) ;
8691: CALL 8708 0 0
// UpdateFactoryWaypoints ( ) ;
8695: CALL 23322 0 0
// UpdateWarehouseGatheringPoints ( ) ;
8699: CALL 23579 0 0
// end ;
8703: LD_VAR 0 1
8707: RET
// function UpdateLuaVariables ( ) ; begin
8708: LD_INT 0
8710: PPUSH
// if globalGameSaveCounter then
8711: LD_EXP 52
8715: IFFALSE 8749
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
8717: LD_ADDR_EXP 52
8721: PUSH
8722: LD_EXP 52
8726: PPUSH
8727: CALL 67389 0 1
8731: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
8732: LD_STRING setGameSaveCounter(
8734: PUSH
8735: LD_EXP 52
8739: STR
8740: PUSH
8741: LD_STRING )
8743: STR
8744: PPUSH
8745: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
8749: LD_STRING setGameDifficulty(
8751: PUSH
8752: LD_OWVAR 67
8756: STR
8757: PUSH
8758: LD_STRING )
8760: STR
8761: PPUSH
8762: CALL_OW 559
// end ;
8766: LD_VAR 0 1
8770: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
8771: LD_INT 0
8773: PPUSH
// if p2 = stream_mode then
8774: LD_VAR 0 2
8778: PUSH
8779: LD_INT 100
8781: EQUAL
8782: IFFALSE 9785
// begin if not StreamModeActive then
8784: LD_EXP 53
8788: NOT
8789: IFFALSE 8799
// StreamModeActive := true ;
8791: LD_ADDR_EXP 53
8795: PUSH
8796: LD_INT 1
8798: ST_TO_ADDR
// if p3 = 0 then
8799: LD_VAR 0 3
8803: PUSH
8804: LD_INT 0
8806: EQUAL
8807: IFFALSE 8813
// InitStreamMode ;
8809: CALL 9989 0 0
// if p3 = 1 then
8813: LD_VAR 0 3
8817: PUSH
8818: LD_INT 1
8820: EQUAL
8821: IFFALSE 8831
// sRocket := true ;
8823: LD_ADDR_EXP 58
8827: PUSH
8828: LD_INT 1
8830: ST_TO_ADDR
// if p3 = 2 then
8831: LD_VAR 0 3
8835: PUSH
8836: LD_INT 2
8838: EQUAL
8839: IFFALSE 8849
// sSpeed := true ;
8841: LD_ADDR_EXP 57
8845: PUSH
8846: LD_INT 1
8848: ST_TO_ADDR
// if p3 = 3 then
8849: LD_VAR 0 3
8853: PUSH
8854: LD_INT 3
8856: EQUAL
8857: IFFALSE 8867
// sEngine := true ;
8859: LD_ADDR_EXP 59
8863: PUSH
8864: LD_INT 1
8866: ST_TO_ADDR
// if p3 = 4 then
8867: LD_VAR 0 3
8871: PUSH
8872: LD_INT 4
8874: EQUAL
8875: IFFALSE 8885
// sSpec := true ;
8877: LD_ADDR_EXP 56
8881: PUSH
8882: LD_INT 1
8884: ST_TO_ADDR
// if p3 = 5 then
8885: LD_VAR 0 3
8889: PUSH
8890: LD_INT 5
8892: EQUAL
8893: IFFALSE 8903
// sLevel := true ;
8895: LD_ADDR_EXP 60
8899: PUSH
8900: LD_INT 1
8902: ST_TO_ADDR
// if p3 = 6 then
8903: LD_VAR 0 3
8907: PUSH
8908: LD_INT 6
8910: EQUAL
8911: IFFALSE 8921
// sArmoury := true ;
8913: LD_ADDR_EXP 61
8917: PUSH
8918: LD_INT 1
8920: ST_TO_ADDR
// if p3 = 7 then
8921: LD_VAR 0 3
8925: PUSH
8926: LD_INT 7
8928: EQUAL
8929: IFFALSE 8939
// sRadar := true ;
8931: LD_ADDR_EXP 62
8935: PUSH
8936: LD_INT 1
8938: ST_TO_ADDR
// if p3 = 8 then
8939: LD_VAR 0 3
8943: PUSH
8944: LD_INT 8
8946: EQUAL
8947: IFFALSE 8957
// sBunker := true ;
8949: LD_ADDR_EXP 63
8953: PUSH
8954: LD_INT 1
8956: ST_TO_ADDR
// if p3 = 9 then
8957: LD_VAR 0 3
8961: PUSH
8962: LD_INT 9
8964: EQUAL
8965: IFFALSE 8975
// sHack := true ;
8967: LD_ADDR_EXP 64
8971: PUSH
8972: LD_INT 1
8974: ST_TO_ADDR
// if p3 = 10 then
8975: LD_VAR 0 3
8979: PUSH
8980: LD_INT 10
8982: EQUAL
8983: IFFALSE 8993
// sFire := true ;
8985: LD_ADDR_EXP 65
8989: PUSH
8990: LD_INT 1
8992: ST_TO_ADDR
// if p3 = 11 then
8993: LD_VAR 0 3
8997: PUSH
8998: LD_INT 11
9000: EQUAL
9001: IFFALSE 9011
// sRefresh := true ;
9003: LD_ADDR_EXP 66
9007: PUSH
9008: LD_INT 1
9010: ST_TO_ADDR
// if p3 = 12 then
9011: LD_VAR 0 3
9015: PUSH
9016: LD_INT 12
9018: EQUAL
9019: IFFALSE 9029
// sExp := true ;
9021: LD_ADDR_EXP 67
9025: PUSH
9026: LD_INT 1
9028: ST_TO_ADDR
// if p3 = 13 then
9029: LD_VAR 0 3
9033: PUSH
9034: LD_INT 13
9036: EQUAL
9037: IFFALSE 9047
// sDepot := true ;
9039: LD_ADDR_EXP 68
9043: PUSH
9044: LD_INT 1
9046: ST_TO_ADDR
// if p3 = 14 then
9047: LD_VAR 0 3
9051: PUSH
9052: LD_INT 14
9054: EQUAL
9055: IFFALSE 9065
// sFlag := true ;
9057: LD_ADDR_EXP 69
9061: PUSH
9062: LD_INT 1
9064: ST_TO_ADDR
// if p3 = 15 then
9065: LD_VAR 0 3
9069: PUSH
9070: LD_INT 15
9072: EQUAL
9073: IFFALSE 9083
// sKamikadze := true ;
9075: LD_ADDR_EXP 77
9079: PUSH
9080: LD_INT 1
9082: ST_TO_ADDR
// if p3 = 16 then
9083: LD_VAR 0 3
9087: PUSH
9088: LD_INT 16
9090: EQUAL
9091: IFFALSE 9101
// sTroll := true ;
9093: LD_ADDR_EXP 78
9097: PUSH
9098: LD_INT 1
9100: ST_TO_ADDR
// if p3 = 17 then
9101: LD_VAR 0 3
9105: PUSH
9106: LD_INT 17
9108: EQUAL
9109: IFFALSE 9119
// sSlow := true ;
9111: LD_ADDR_EXP 79
9115: PUSH
9116: LD_INT 1
9118: ST_TO_ADDR
// if p3 = 18 then
9119: LD_VAR 0 3
9123: PUSH
9124: LD_INT 18
9126: EQUAL
9127: IFFALSE 9137
// sLack := true ;
9129: LD_ADDR_EXP 80
9133: PUSH
9134: LD_INT 1
9136: ST_TO_ADDR
// if p3 = 19 then
9137: LD_VAR 0 3
9141: PUSH
9142: LD_INT 19
9144: EQUAL
9145: IFFALSE 9155
// sTank := true ;
9147: LD_ADDR_EXP 82
9151: PUSH
9152: LD_INT 1
9154: ST_TO_ADDR
// if p3 = 20 then
9155: LD_VAR 0 3
9159: PUSH
9160: LD_INT 20
9162: EQUAL
9163: IFFALSE 9173
// sRemote := true ;
9165: LD_ADDR_EXP 83
9169: PUSH
9170: LD_INT 1
9172: ST_TO_ADDR
// if p3 = 21 then
9173: LD_VAR 0 3
9177: PUSH
9178: LD_INT 21
9180: EQUAL
9181: IFFALSE 9191
// sPowell := true ;
9183: LD_ADDR_EXP 84
9187: PUSH
9188: LD_INT 1
9190: ST_TO_ADDR
// if p3 = 22 then
9191: LD_VAR 0 3
9195: PUSH
9196: LD_INT 22
9198: EQUAL
9199: IFFALSE 9209
// sTeleport := true ;
9201: LD_ADDR_EXP 87
9205: PUSH
9206: LD_INT 1
9208: ST_TO_ADDR
// if p3 = 23 then
9209: LD_VAR 0 3
9213: PUSH
9214: LD_INT 23
9216: EQUAL
9217: IFFALSE 9227
// sOilTower := true ;
9219: LD_ADDR_EXP 89
9223: PUSH
9224: LD_INT 1
9226: ST_TO_ADDR
// if p3 = 24 then
9227: LD_VAR 0 3
9231: PUSH
9232: LD_INT 24
9234: EQUAL
9235: IFFALSE 9245
// sShovel := true ;
9237: LD_ADDR_EXP 90
9241: PUSH
9242: LD_INT 1
9244: ST_TO_ADDR
// if p3 = 25 then
9245: LD_VAR 0 3
9249: PUSH
9250: LD_INT 25
9252: EQUAL
9253: IFFALSE 9263
// sSheik := true ;
9255: LD_ADDR_EXP 91
9259: PUSH
9260: LD_INT 1
9262: ST_TO_ADDR
// if p3 = 26 then
9263: LD_VAR 0 3
9267: PUSH
9268: LD_INT 26
9270: EQUAL
9271: IFFALSE 9281
// sEarthquake := true ;
9273: LD_ADDR_EXP 93
9277: PUSH
9278: LD_INT 1
9280: ST_TO_ADDR
// if p3 = 27 then
9281: LD_VAR 0 3
9285: PUSH
9286: LD_INT 27
9288: EQUAL
9289: IFFALSE 9299
// sAI := true ;
9291: LD_ADDR_EXP 94
9295: PUSH
9296: LD_INT 1
9298: ST_TO_ADDR
// if p3 = 28 then
9299: LD_VAR 0 3
9303: PUSH
9304: LD_INT 28
9306: EQUAL
9307: IFFALSE 9317
// sCargo := true ;
9309: LD_ADDR_EXP 97
9313: PUSH
9314: LD_INT 1
9316: ST_TO_ADDR
// if p3 = 29 then
9317: LD_VAR 0 3
9321: PUSH
9322: LD_INT 29
9324: EQUAL
9325: IFFALSE 9335
// sDLaser := true ;
9327: LD_ADDR_EXP 98
9331: PUSH
9332: LD_INT 1
9334: ST_TO_ADDR
// if p3 = 30 then
9335: LD_VAR 0 3
9339: PUSH
9340: LD_INT 30
9342: EQUAL
9343: IFFALSE 9353
// sExchange := true ;
9345: LD_ADDR_EXP 99
9349: PUSH
9350: LD_INT 1
9352: ST_TO_ADDR
// if p3 = 31 then
9353: LD_VAR 0 3
9357: PUSH
9358: LD_INT 31
9360: EQUAL
9361: IFFALSE 9371
// sFac := true ;
9363: LD_ADDR_EXP 100
9367: PUSH
9368: LD_INT 1
9370: ST_TO_ADDR
// if p3 = 32 then
9371: LD_VAR 0 3
9375: PUSH
9376: LD_INT 32
9378: EQUAL
9379: IFFALSE 9389
// sPower := true ;
9381: LD_ADDR_EXP 101
9385: PUSH
9386: LD_INT 1
9388: ST_TO_ADDR
// if p3 = 33 then
9389: LD_VAR 0 3
9393: PUSH
9394: LD_INT 33
9396: EQUAL
9397: IFFALSE 9407
// sRandom := true ;
9399: LD_ADDR_EXP 102
9403: PUSH
9404: LD_INT 1
9406: ST_TO_ADDR
// if p3 = 34 then
9407: LD_VAR 0 3
9411: PUSH
9412: LD_INT 34
9414: EQUAL
9415: IFFALSE 9425
// sShield := true ;
9417: LD_ADDR_EXP 103
9421: PUSH
9422: LD_INT 1
9424: ST_TO_ADDR
// if p3 = 35 then
9425: LD_VAR 0 3
9429: PUSH
9430: LD_INT 35
9432: EQUAL
9433: IFFALSE 9443
// sTime := true ;
9435: LD_ADDR_EXP 104
9439: PUSH
9440: LD_INT 1
9442: ST_TO_ADDR
// if p3 = 36 then
9443: LD_VAR 0 3
9447: PUSH
9448: LD_INT 36
9450: EQUAL
9451: IFFALSE 9461
// sTools := true ;
9453: LD_ADDR_EXP 105
9457: PUSH
9458: LD_INT 1
9460: ST_TO_ADDR
// if p3 = 101 then
9461: LD_VAR 0 3
9465: PUSH
9466: LD_INT 101
9468: EQUAL
9469: IFFALSE 9479
// sSold := true ;
9471: LD_ADDR_EXP 70
9475: PUSH
9476: LD_INT 1
9478: ST_TO_ADDR
// if p3 = 102 then
9479: LD_VAR 0 3
9483: PUSH
9484: LD_INT 102
9486: EQUAL
9487: IFFALSE 9497
// sDiff := true ;
9489: LD_ADDR_EXP 71
9493: PUSH
9494: LD_INT 1
9496: ST_TO_ADDR
// if p3 = 103 then
9497: LD_VAR 0 3
9501: PUSH
9502: LD_INT 103
9504: EQUAL
9505: IFFALSE 9515
// sFog := true ;
9507: LD_ADDR_EXP 74
9511: PUSH
9512: LD_INT 1
9514: ST_TO_ADDR
// if p3 = 104 then
9515: LD_VAR 0 3
9519: PUSH
9520: LD_INT 104
9522: EQUAL
9523: IFFALSE 9533
// sReset := true ;
9525: LD_ADDR_EXP 75
9529: PUSH
9530: LD_INT 1
9532: ST_TO_ADDR
// if p3 = 105 then
9533: LD_VAR 0 3
9537: PUSH
9538: LD_INT 105
9540: EQUAL
9541: IFFALSE 9551
// sSun := true ;
9543: LD_ADDR_EXP 76
9547: PUSH
9548: LD_INT 1
9550: ST_TO_ADDR
// if p3 = 106 then
9551: LD_VAR 0 3
9555: PUSH
9556: LD_INT 106
9558: EQUAL
9559: IFFALSE 9569
// sTiger := true ;
9561: LD_ADDR_EXP 72
9565: PUSH
9566: LD_INT 1
9568: ST_TO_ADDR
// if p3 = 107 then
9569: LD_VAR 0 3
9573: PUSH
9574: LD_INT 107
9576: EQUAL
9577: IFFALSE 9587
// sBomb := true ;
9579: LD_ADDR_EXP 73
9583: PUSH
9584: LD_INT 1
9586: ST_TO_ADDR
// if p3 = 108 then
9587: LD_VAR 0 3
9591: PUSH
9592: LD_INT 108
9594: EQUAL
9595: IFFALSE 9605
// sWound := true ;
9597: LD_ADDR_EXP 81
9601: PUSH
9602: LD_INT 1
9604: ST_TO_ADDR
// if p3 = 109 then
9605: LD_VAR 0 3
9609: PUSH
9610: LD_INT 109
9612: EQUAL
9613: IFFALSE 9623
// sBetray := true ;
9615: LD_ADDR_EXP 85
9619: PUSH
9620: LD_INT 1
9622: ST_TO_ADDR
// if p3 = 110 then
9623: LD_VAR 0 3
9627: PUSH
9628: LD_INT 110
9630: EQUAL
9631: IFFALSE 9641
// sContamin := true ;
9633: LD_ADDR_EXP 86
9637: PUSH
9638: LD_INT 1
9640: ST_TO_ADDR
// if p3 = 111 then
9641: LD_VAR 0 3
9645: PUSH
9646: LD_INT 111
9648: EQUAL
9649: IFFALSE 9659
// sOil := true ;
9651: LD_ADDR_EXP 88
9655: PUSH
9656: LD_INT 1
9658: ST_TO_ADDR
// if p3 = 112 then
9659: LD_VAR 0 3
9663: PUSH
9664: LD_INT 112
9666: EQUAL
9667: IFFALSE 9677
// sStu := true ;
9669: LD_ADDR_EXP 92
9673: PUSH
9674: LD_INT 1
9676: ST_TO_ADDR
// if p3 = 113 then
9677: LD_VAR 0 3
9681: PUSH
9682: LD_INT 113
9684: EQUAL
9685: IFFALSE 9695
// sBazooka := true ;
9687: LD_ADDR_EXP 95
9691: PUSH
9692: LD_INT 1
9694: ST_TO_ADDR
// if p3 = 114 then
9695: LD_VAR 0 3
9699: PUSH
9700: LD_INT 114
9702: EQUAL
9703: IFFALSE 9713
// sMortar := true ;
9705: LD_ADDR_EXP 96
9709: PUSH
9710: LD_INT 1
9712: ST_TO_ADDR
// if p3 = 115 then
9713: LD_VAR 0 3
9717: PUSH
9718: LD_INT 115
9720: EQUAL
9721: IFFALSE 9731
// sRanger := true ;
9723: LD_ADDR_EXP 106
9727: PUSH
9728: LD_INT 1
9730: ST_TO_ADDR
// if p3 = 116 then
9731: LD_VAR 0 3
9735: PUSH
9736: LD_INT 116
9738: EQUAL
9739: IFFALSE 9749
// sComputer := true ;
9741: LD_ADDR_EXP 107
9745: PUSH
9746: LD_INT 1
9748: ST_TO_ADDR
// if p3 = 117 then
9749: LD_VAR 0 3
9753: PUSH
9754: LD_INT 117
9756: EQUAL
9757: IFFALSE 9767
// s30 := true ;
9759: LD_ADDR_EXP 108
9763: PUSH
9764: LD_INT 1
9766: ST_TO_ADDR
// if p3 = 118 then
9767: LD_VAR 0 3
9771: PUSH
9772: LD_INT 118
9774: EQUAL
9775: IFFALSE 9785
// s60 := true ;
9777: LD_ADDR_EXP 109
9781: PUSH
9782: LD_INT 1
9784: ST_TO_ADDR
// end ; if p2 = hack_mode then
9785: LD_VAR 0 2
9789: PUSH
9790: LD_INT 101
9792: EQUAL
9793: IFFALSE 9921
// begin case p3 of 1 :
9795: LD_VAR 0 3
9799: PUSH
9800: LD_INT 1
9802: DOUBLE
9803: EQUAL
9804: IFTRUE 9808
9806: GO 9815
9808: POP
// hHackUnlimitedResources ; 2 :
9809: CALL 22068 0 0
9813: GO 9921
9815: LD_INT 2
9817: DOUBLE
9818: EQUAL
9819: IFTRUE 9823
9821: GO 9830
9823: POP
// hHackSetLevel10 ; 3 :
9824: CALL 22201 0 0
9828: GO 9921
9830: LD_INT 3
9832: DOUBLE
9833: EQUAL
9834: IFTRUE 9838
9836: GO 9845
9838: POP
// hHackSetLevel10YourUnits ; 4 :
9839: CALL 22286 0 0
9843: GO 9921
9845: LD_INT 4
9847: DOUBLE
9848: EQUAL
9849: IFTRUE 9853
9851: GO 9860
9853: POP
// hHackInvincible ; 5 :
9854: CALL 22734 0 0
9858: GO 9921
9860: LD_INT 5
9862: DOUBLE
9863: EQUAL
9864: IFTRUE 9868
9866: GO 9875
9868: POP
// hHackInvisible ; 6 :
9869: CALL 22845 0 0
9873: GO 9921
9875: LD_INT 6
9877: DOUBLE
9878: EQUAL
9879: IFTRUE 9883
9881: GO 9890
9883: POP
// hHackChangeYourSide ; 7 :
9884: CALL 22902 0 0
9888: GO 9921
9890: LD_INT 7
9892: DOUBLE
9893: EQUAL
9894: IFTRUE 9898
9896: GO 9905
9898: POP
// hHackChangeUnitSide ; 8 :
9899: CALL 22944 0 0
9903: GO 9921
9905: LD_INT 8
9907: DOUBLE
9908: EQUAL
9909: IFTRUE 9913
9911: GO 9920
9913: POP
// hHackFog ; end ;
9914: CALL 23045 0 0
9918: GO 9921
9920: POP
// end ; if p2 = game_save_mode then
9921: LD_VAR 0 2
9925: PUSH
9926: LD_INT 102
9928: EQUAL
9929: IFFALSE 9984
// begin if p3 = 1 then
9931: LD_VAR 0 3
9935: PUSH
9936: LD_INT 1
9938: EQUAL
9939: IFFALSE 9951
// globalGameSaveCounter := p4 ;
9941: LD_ADDR_EXP 52
9945: PUSH
9946: LD_VAR 0 4
9950: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
9951: LD_VAR 0 3
9955: PUSH
9956: LD_INT 2
9958: EQUAL
9959: PUSH
9960: LD_EXP 52
9964: AND
9965: IFFALSE 9984
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
9967: LD_STRING setGameSaveCounter(
9969: PUSH
9970: LD_EXP 52
9974: STR
9975: PUSH
9976: LD_STRING )
9978: STR
9979: PPUSH
9980: CALL_OW 559
// end ; end ;
9984: LD_VAR 0 7
9988: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
9989: LD_INT 0
9991: PPUSH
// streamModeActive := false ;
9992: LD_ADDR_EXP 53
9996: PUSH
9997: LD_INT 0
9999: ST_TO_ADDR
// normalCounter := 36 ;
10000: LD_ADDR_EXP 54
10004: PUSH
10005: LD_INT 36
10007: ST_TO_ADDR
// hardcoreCounter := 18 ;
10008: LD_ADDR_EXP 55
10012: PUSH
10013: LD_INT 18
10015: ST_TO_ADDR
// sRocket := false ;
10016: LD_ADDR_EXP 58
10020: PUSH
10021: LD_INT 0
10023: ST_TO_ADDR
// sSpeed := false ;
10024: LD_ADDR_EXP 57
10028: PUSH
10029: LD_INT 0
10031: ST_TO_ADDR
// sEngine := false ;
10032: LD_ADDR_EXP 59
10036: PUSH
10037: LD_INT 0
10039: ST_TO_ADDR
// sSpec := false ;
10040: LD_ADDR_EXP 56
10044: PUSH
10045: LD_INT 0
10047: ST_TO_ADDR
// sLevel := false ;
10048: LD_ADDR_EXP 60
10052: PUSH
10053: LD_INT 0
10055: ST_TO_ADDR
// sArmoury := false ;
10056: LD_ADDR_EXP 61
10060: PUSH
10061: LD_INT 0
10063: ST_TO_ADDR
// sRadar := false ;
10064: LD_ADDR_EXP 62
10068: PUSH
10069: LD_INT 0
10071: ST_TO_ADDR
// sBunker := false ;
10072: LD_ADDR_EXP 63
10076: PUSH
10077: LD_INT 0
10079: ST_TO_ADDR
// sHack := false ;
10080: LD_ADDR_EXP 64
10084: PUSH
10085: LD_INT 0
10087: ST_TO_ADDR
// sFire := false ;
10088: LD_ADDR_EXP 65
10092: PUSH
10093: LD_INT 0
10095: ST_TO_ADDR
// sRefresh := false ;
10096: LD_ADDR_EXP 66
10100: PUSH
10101: LD_INT 0
10103: ST_TO_ADDR
// sExp := false ;
10104: LD_ADDR_EXP 67
10108: PUSH
10109: LD_INT 0
10111: ST_TO_ADDR
// sDepot := false ;
10112: LD_ADDR_EXP 68
10116: PUSH
10117: LD_INT 0
10119: ST_TO_ADDR
// sFlag := false ;
10120: LD_ADDR_EXP 69
10124: PUSH
10125: LD_INT 0
10127: ST_TO_ADDR
// sKamikadze := false ;
10128: LD_ADDR_EXP 77
10132: PUSH
10133: LD_INT 0
10135: ST_TO_ADDR
// sTroll := false ;
10136: LD_ADDR_EXP 78
10140: PUSH
10141: LD_INT 0
10143: ST_TO_ADDR
// sSlow := false ;
10144: LD_ADDR_EXP 79
10148: PUSH
10149: LD_INT 0
10151: ST_TO_ADDR
// sLack := false ;
10152: LD_ADDR_EXP 80
10156: PUSH
10157: LD_INT 0
10159: ST_TO_ADDR
// sTank := false ;
10160: LD_ADDR_EXP 82
10164: PUSH
10165: LD_INT 0
10167: ST_TO_ADDR
// sRemote := false ;
10168: LD_ADDR_EXP 83
10172: PUSH
10173: LD_INT 0
10175: ST_TO_ADDR
// sPowell := false ;
10176: LD_ADDR_EXP 84
10180: PUSH
10181: LD_INT 0
10183: ST_TO_ADDR
// sTeleport := false ;
10184: LD_ADDR_EXP 87
10188: PUSH
10189: LD_INT 0
10191: ST_TO_ADDR
// sOilTower := false ;
10192: LD_ADDR_EXP 89
10196: PUSH
10197: LD_INT 0
10199: ST_TO_ADDR
// sShovel := false ;
10200: LD_ADDR_EXP 90
10204: PUSH
10205: LD_INT 0
10207: ST_TO_ADDR
// sSheik := false ;
10208: LD_ADDR_EXP 91
10212: PUSH
10213: LD_INT 0
10215: ST_TO_ADDR
// sEarthquake := false ;
10216: LD_ADDR_EXP 93
10220: PUSH
10221: LD_INT 0
10223: ST_TO_ADDR
// sAI := false ;
10224: LD_ADDR_EXP 94
10228: PUSH
10229: LD_INT 0
10231: ST_TO_ADDR
// sCargo := false ;
10232: LD_ADDR_EXP 97
10236: PUSH
10237: LD_INT 0
10239: ST_TO_ADDR
// sDLaser := false ;
10240: LD_ADDR_EXP 98
10244: PUSH
10245: LD_INT 0
10247: ST_TO_ADDR
// sExchange := false ;
10248: LD_ADDR_EXP 99
10252: PUSH
10253: LD_INT 0
10255: ST_TO_ADDR
// sFac := false ;
10256: LD_ADDR_EXP 100
10260: PUSH
10261: LD_INT 0
10263: ST_TO_ADDR
// sPower := false ;
10264: LD_ADDR_EXP 101
10268: PUSH
10269: LD_INT 0
10271: ST_TO_ADDR
// sRandom := false ;
10272: LD_ADDR_EXP 102
10276: PUSH
10277: LD_INT 0
10279: ST_TO_ADDR
// sShield := false ;
10280: LD_ADDR_EXP 103
10284: PUSH
10285: LD_INT 0
10287: ST_TO_ADDR
// sTime := false ;
10288: LD_ADDR_EXP 104
10292: PUSH
10293: LD_INT 0
10295: ST_TO_ADDR
// sTools := false ;
10296: LD_ADDR_EXP 105
10300: PUSH
10301: LD_INT 0
10303: ST_TO_ADDR
// sSold := false ;
10304: LD_ADDR_EXP 70
10308: PUSH
10309: LD_INT 0
10311: ST_TO_ADDR
// sDiff := false ;
10312: LD_ADDR_EXP 71
10316: PUSH
10317: LD_INT 0
10319: ST_TO_ADDR
// sFog := false ;
10320: LD_ADDR_EXP 74
10324: PUSH
10325: LD_INT 0
10327: ST_TO_ADDR
// sReset := false ;
10328: LD_ADDR_EXP 75
10332: PUSH
10333: LD_INT 0
10335: ST_TO_ADDR
// sSun := false ;
10336: LD_ADDR_EXP 76
10340: PUSH
10341: LD_INT 0
10343: ST_TO_ADDR
// sTiger := false ;
10344: LD_ADDR_EXP 72
10348: PUSH
10349: LD_INT 0
10351: ST_TO_ADDR
// sBomb := false ;
10352: LD_ADDR_EXP 73
10356: PUSH
10357: LD_INT 0
10359: ST_TO_ADDR
// sWound := false ;
10360: LD_ADDR_EXP 81
10364: PUSH
10365: LD_INT 0
10367: ST_TO_ADDR
// sBetray := false ;
10368: LD_ADDR_EXP 85
10372: PUSH
10373: LD_INT 0
10375: ST_TO_ADDR
// sContamin := false ;
10376: LD_ADDR_EXP 86
10380: PUSH
10381: LD_INT 0
10383: ST_TO_ADDR
// sOil := false ;
10384: LD_ADDR_EXP 88
10388: PUSH
10389: LD_INT 0
10391: ST_TO_ADDR
// sStu := false ;
10392: LD_ADDR_EXP 92
10396: PUSH
10397: LD_INT 0
10399: ST_TO_ADDR
// sBazooka := false ;
10400: LD_ADDR_EXP 95
10404: PUSH
10405: LD_INT 0
10407: ST_TO_ADDR
// sMortar := false ;
10408: LD_ADDR_EXP 96
10412: PUSH
10413: LD_INT 0
10415: ST_TO_ADDR
// sRanger := false ;
10416: LD_ADDR_EXP 106
10420: PUSH
10421: LD_INT 0
10423: ST_TO_ADDR
// sComputer := false ;
10424: LD_ADDR_EXP 107
10428: PUSH
10429: LD_INT 0
10431: ST_TO_ADDR
// s30 := false ;
10432: LD_ADDR_EXP 108
10436: PUSH
10437: LD_INT 0
10439: ST_TO_ADDR
// s60 := false ;
10440: LD_ADDR_EXP 109
10444: PUSH
10445: LD_INT 0
10447: ST_TO_ADDR
// end ;
10448: LD_VAR 0 1
10452: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
10453: LD_INT 0
10455: PPUSH
10456: PPUSH
10457: PPUSH
10458: PPUSH
10459: PPUSH
10460: PPUSH
10461: PPUSH
// result := [ ] ;
10462: LD_ADDR_VAR 0 2
10466: PUSH
10467: EMPTY
10468: ST_TO_ADDR
// if campaign_id = 1 then
10469: LD_OWVAR 69
10473: PUSH
10474: LD_INT 1
10476: EQUAL
10477: IFFALSE 13643
// begin case mission_number of 1 :
10479: LD_OWVAR 70
10483: PUSH
10484: LD_INT 1
10486: DOUBLE
10487: EQUAL
10488: IFTRUE 10492
10490: GO 10568
10492: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
10493: LD_ADDR_VAR 0 2
10497: PUSH
10498: LD_INT 2
10500: PUSH
10501: LD_INT 4
10503: PUSH
10504: LD_INT 11
10506: PUSH
10507: LD_INT 12
10509: PUSH
10510: LD_INT 15
10512: PUSH
10513: LD_INT 16
10515: PUSH
10516: LD_INT 22
10518: PUSH
10519: LD_INT 23
10521: PUSH
10522: LD_INT 26
10524: PUSH
10525: EMPTY
10526: LIST
10527: LIST
10528: LIST
10529: LIST
10530: LIST
10531: LIST
10532: LIST
10533: LIST
10534: LIST
10535: PUSH
10536: LD_INT 101
10538: PUSH
10539: LD_INT 102
10541: PUSH
10542: LD_INT 106
10544: PUSH
10545: LD_INT 116
10547: PUSH
10548: LD_INT 117
10550: PUSH
10551: LD_INT 118
10553: PUSH
10554: EMPTY
10555: LIST
10556: LIST
10557: LIST
10558: LIST
10559: LIST
10560: LIST
10561: PUSH
10562: EMPTY
10563: LIST
10564: LIST
10565: ST_TO_ADDR
10566: GO 13641
10568: LD_INT 2
10570: DOUBLE
10571: EQUAL
10572: IFTRUE 10576
10574: GO 10660
10576: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
10577: LD_ADDR_VAR 0 2
10581: PUSH
10582: LD_INT 2
10584: PUSH
10585: LD_INT 4
10587: PUSH
10588: LD_INT 11
10590: PUSH
10591: LD_INT 12
10593: PUSH
10594: LD_INT 15
10596: PUSH
10597: LD_INT 16
10599: PUSH
10600: LD_INT 22
10602: PUSH
10603: LD_INT 23
10605: PUSH
10606: LD_INT 26
10608: PUSH
10609: EMPTY
10610: LIST
10611: LIST
10612: LIST
10613: LIST
10614: LIST
10615: LIST
10616: LIST
10617: LIST
10618: LIST
10619: PUSH
10620: LD_INT 101
10622: PUSH
10623: LD_INT 102
10625: PUSH
10626: LD_INT 105
10628: PUSH
10629: LD_INT 106
10631: PUSH
10632: LD_INT 108
10634: PUSH
10635: LD_INT 116
10637: PUSH
10638: LD_INT 117
10640: PUSH
10641: LD_INT 118
10643: PUSH
10644: EMPTY
10645: LIST
10646: LIST
10647: LIST
10648: LIST
10649: LIST
10650: LIST
10651: LIST
10652: LIST
10653: PUSH
10654: EMPTY
10655: LIST
10656: LIST
10657: ST_TO_ADDR
10658: GO 13641
10660: LD_INT 3
10662: DOUBLE
10663: EQUAL
10664: IFTRUE 10668
10666: GO 10756
10668: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
10669: LD_ADDR_VAR 0 2
10673: PUSH
10674: LD_INT 2
10676: PUSH
10677: LD_INT 4
10679: PUSH
10680: LD_INT 5
10682: PUSH
10683: LD_INT 11
10685: PUSH
10686: LD_INT 12
10688: PUSH
10689: LD_INT 15
10691: PUSH
10692: LD_INT 16
10694: PUSH
10695: LD_INT 22
10697: PUSH
10698: LD_INT 26
10700: PUSH
10701: LD_INT 36
10703: PUSH
10704: EMPTY
10705: LIST
10706: LIST
10707: LIST
10708: LIST
10709: LIST
10710: LIST
10711: LIST
10712: LIST
10713: LIST
10714: LIST
10715: PUSH
10716: LD_INT 101
10718: PUSH
10719: LD_INT 102
10721: PUSH
10722: LD_INT 105
10724: PUSH
10725: LD_INT 106
10727: PUSH
10728: LD_INT 108
10730: PUSH
10731: LD_INT 116
10733: PUSH
10734: LD_INT 117
10736: PUSH
10737: LD_INT 118
10739: PUSH
10740: EMPTY
10741: LIST
10742: LIST
10743: LIST
10744: LIST
10745: LIST
10746: LIST
10747: LIST
10748: LIST
10749: PUSH
10750: EMPTY
10751: LIST
10752: LIST
10753: ST_TO_ADDR
10754: GO 13641
10756: LD_INT 4
10758: DOUBLE
10759: EQUAL
10760: IFTRUE 10764
10762: GO 10860
10764: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
10765: LD_ADDR_VAR 0 2
10769: PUSH
10770: LD_INT 2
10772: PUSH
10773: LD_INT 4
10775: PUSH
10776: LD_INT 5
10778: PUSH
10779: LD_INT 8
10781: PUSH
10782: LD_INT 11
10784: PUSH
10785: LD_INT 12
10787: PUSH
10788: LD_INT 15
10790: PUSH
10791: LD_INT 16
10793: PUSH
10794: LD_INT 22
10796: PUSH
10797: LD_INT 23
10799: PUSH
10800: LD_INT 26
10802: PUSH
10803: LD_INT 36
10805: PUSH
10806: EMPTY
10807: LIST
10808: LIST
10809: LIST
10810: LIST
10811: LIST
10812: LIST
10813: LIST
10814: LIST
10815: LIST
10816: LIST
10817: LIST
10818: LIST
10819: PUSH
10820: LD_INT 101
10822: PUSH
10823: LD_INT 102
10825: PUSH
10826: LD_INT 105
10828: PUSH
10829: LD_INT 106
10831: PUSH
10832: LD_INT 108
10834: PUSH
10835: LD_INT 116
10837: PUSH
10838: LD_INT 117
10840: PUSH
10841: LD_INT 118
10843: PUSH
10844: EMPTY
10845: LIST
10846: LIST
10847: LIST
10848: LIST
10849: LIST
10850: LIST
10851: LIST
10852: LIST
10853: PUSH
10854: EMPTY
10855: LIST
10856: LIST
10857: ST_TO_ADDR
10858: GO 13641
10860: LD_INT 5
10862: DOUBLE
10863: EQUAL
10864: IFTRUE 10868
10866: GO 10980
10868: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
10869: LD_ADDR_VAR 0 2
10873: PUSH
10874: LD_INT 2
10876: PUSH
10877: LD_INT 4
10879: PUSH
10880: LD_INT 5
10882: PUSH
10883: LD_INT 6
10885: PUSH
10886: LD_INT 8
10888: PUSH
10889: LD_INT 11
10891: PUSH
10892: LD_INT 12
10894: PUSH
10895: LD_INT 15
10897: PUSH
10898: LD_INT 16
10900: PUSH
10901: LD_INT 22
10903: PUSH
10904: LD_INT 23
10906: PUSH
10907: LD_INT 25
10909: PUSH
10910: LD_INT 26
10912: PUSH
10913: LD_INT 36
10915: PUSH
10916: EMPTY
10917: LIST
10918: LIST
10919: LIST
10920: LIST
10921: LIST
10922: LIST
10923: LIST
10924: LIST
10925: LIST
10926: LIST
10927: LIST
10928: LIST
10929: LIST
10930: LIST
10931: PUSH
10932: LD_INT 101
10934: PUSH
10935: LD_INT 102
10937: PUSH
10938: LD_INT 105
10940: PUSH
10941: LD_INT 106
10943: PUSH
10944: LD_INT 108
10946: PUSH
10947: LD_INT 109
10949: PUSH
10950: LD_INT 112
10952: PUSH
10953: LD_INT 116
10955: PUSH
10956: LD_INT 117
10958: PUSH
10959: LD_INT 118
10961: PUSH
10962: EMPTY
10963: LIST
10964: LIST
10965: LIST
10966: LIST
10967: LIST
10968: LIST
10969: LIST
10970: LIST
10971: LIST
10972: LIST
10973: PUSH
10974: EMPTY
10975: LIST
10976: LIST
10977: ST_TO_ADDR
10978: GO 13641
10980: LD_INT 6
10982: DOUBLE
10983: EQUAL
10984: IFTRUE 10988
10986: GO 11120
10988: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
10989: LD_ADDR_VAR 0 2
10993: PUSH
10994: LD_INT 2
10996: PUSH
10997: LD_INT 4
10999: PUSH
11000: LD_INT 5
11002: PUSH
11003: LD_INT 6
11005: PUSH
11006: LD_INT 8
11008: PUSH
11009: LD_INT 11
11011: PUSH
11012: LD_INT 12
11014: PUSH
11015: LD_INT 15
11017: PUSH
11018: LD_INT 16
11020: PUSH
11021: LD_INT 20
11023: PUSH
11024: LD_INT 21
11026: PUSH
11027: LD_INT 22
11029: PUSH
11030: LD_INT 23
11032: PUSH
11033: LD_INT 25
11035: PUSH
11036: LD_INT 26
11038: PUSH
11039: LD_INT 30
11041: PUSH
11042: LD_INT 31
11044: PUSH
11045: LD_INT 32
11047: PUSH
11048: LD_INT 36
11050: PUSH
11051: EMPTY
11052: LIST
11053: LIST
11054: LIST
11055: LIST
11056: LIST
11057: LIST
11058: LIST
11059: LIST
11060: LIST
11061: LIST
11062: LIST
11063: LIST
11064: LIST
11065: LIST
11066: LIST
11067: LIST
11068: LIST
11069: LIST
11070: LIST
11071: PUSH
11072: LD_INT 101
11074: PUSH
11075: LD_INT 102
11077: PUSH
11078: LD_INT 105
11080: PUSH
11081: LD_INT 106
11083: PUSH
11084: LD_INT 108
11086: PUSH
11087: LD_INT 109
11089: PUSH
11090: LD_INT 112
11092: PUSH
11093: LD_INT 116
11095: PUSH
11096: LD_INT 117
11098: PUSH
11099: LD_INT 118
11101: PUSH
11102: EMPTY
11103: LIST
11104: LIST
11105: LIST
11106: LIST
11107: LIST
11108: LIST
11109: LIST
11110: LIST
11111: LIST
11112: LIST
11113: PUSH
11114: EMPTY
11115: LIST
11116: LIST
11117: ST_TO_ADDR
11118: GO 13641
11120: LD_INT 7
11122: DOUBLE
11123: EQUAL
11124: IFTRUE 11128
11126: GO 11240
11128: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
11129: LD_ADDR_VAR 0 2
11133: PUSH
11134: LD_INT 2
11136: PUSH
11137: LD_INT 4
11139: PUSH
11140: LD_INT 5
11142: PUSH
11143: LD_INT 7
11145: PUSH
11146: LD_INT 11
11148: PUSH
11149: LD_INT 12
11151: PUSH
11152: LD_INT 15
11154: PUSH
11155: LD_INT 16
11157: PUSH
11158: LD_INT 20
11160: PUSH
11161: LD_INT 21
11163: PUSH
11164: LD_INT 22
11166: PUSH
11167: LD_INT 23
11169: PUSH
11170: LD_INT 25
11172: PUSH
11173: LD_INT 26
11175: PUSH
11176: EMPTY
11177: LIST
11178: LIST
11179: LIST
11180: LIST
11181: LIST
11182: LIST
11183: LIST
11184: LIST
11185: LIST
11186: LIST
11187: LIST
11188: LIST
11189: LIST
11190: LIST
11191: PUSH
11192: LD_INT 101
11194: PUSH
11195: LD_INT 102
11197: PUSH
11198: LD_INT 103
11200: PUSH
11201: LD_INT 105
11203: PUSH
11204: LD_INT 106
11206: PUSH
11207: LD_INT 108
11209: PUSH
11210: LD_INT 112
11212: PUSH
11213: LD_INT 116
11215: PUSH
11216: LD_INT 117
11218: PUSH
11219: LD_INT 118
11221: PUSH
11222: EMPTY
11223: LIST
11224: LIST
11225: LIST
11226: LIST
11227: LIST
11228: LIST
11229: LIST
11230: LIST
11231: LIST
11232: LIST
11233: PUSH
11234: EMPTY
11235: LIST
11236: LIST
11237: ST_TO_ADDR
11238: GO 13641
11240: LD_INT 8
11242: DOUBLE
11243: EQUAL
11244: IFTRUE 11248
11246: GO 11388
11248: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
11249: LD_ADDR_VAR 0 2
11253: PUSH
11254: LD_INT 2
11256: PUSH
11257: LD_INT 4
11259: PUSH
11260: LD_INT 5
11262: PUSH
11263: LD_INT 6
11265: PUSH
11266: LD_INT 7
11268: PUSH
11269: LD_INT 8
11271: PUSH
11272: LD_INT 11
11274: PUSH
11275: LD_INT 12
11277: PUSH
11278: LD_INT 15
11280: PUSH
11281: LD_INT 16
11283: PUSH
11284: LD_INT 20
11286: PUSH
11287: LD_INT 21
11289: PUSH
11290: LD_INT 22
11292: PUSH
11293: LD_INT 23
11295: PUSH
11296: LD_INT 25
11298: PUSH
11299: LD_INT 26
11301: PUSH
11302: LD_INT 30
11304: PUSH
11305: LD_INT 31
11307: PUSH
11308: LD_INT 32
11310: PUSH
11311: LD_INT 36
11313: PUSH
11314: EMPTY
11315: LIST
11316: LIST
11317: LIST
11318: LIST
11319: LIST
11320: LIST
11321: LIST
11322: LIST
11323: LIST
11324: LIST
11325: LIST
11326: LIST
11327: LIST
11328: LIST
11329: LIST
11330: LIST
11331: LIST
11332: LIST
11333: LIST
11334: LIST
11335: PUSH
11336: LD_INT 101
11338: PUSH
11339: LD_INT 102
11341: PUSH
11342: LD_INT 103
11344: PUSH
11345: LD_INT 105
11347: PUSH
11348: LD_INT 106
11350: PUSH
11351: LD_INT 108
11353: PUSH
11354: LD_INT 109
11356: PUSH
11357: LD_INT 112
11359: PUSH
11360: LD_INT 116
11362: PUSH
11363: LD_INT 117
11365: PUSH
11366: LD_INT 118
11368: PUSH
11369: EMPTY
11370: LIST
11371: LIST
11372: LIST
11373: LIST
11374: LIST
11375: LIST
11376: LIST
11377: LIST
11378: LIST
11379: LIST
11380: LIST
11381: PUSH
11382: EMPTY
11383: LIST
11384: LIST
11385: ST_TO_ADDR
11386: GO 13641
11388: LD_INT 9
11390: DOUBLE
11391: EQUAL
11392: IFTRUE 11396
11394: GO 11544
11396: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
11397: LD_ADDR_VAR 0 2
11401: PUSH
11402: LD_INT 2
11404: PUSH
11405: LD_INT 4
11407: PUSH
11408: LD_INT 5
11410: PUSH
11411: LD_INT 6
11413: PUSH
11414: LD_INT 7
11416: PUSH
11417: LD_INT 8
11419: PUSH
11420: LD_INT 11
11422: PUSH
11423: LD_INT 12
11425: PUSH
11426: LD_INT 15
11428: PUSH
11429: LD_INT 16
11431: PUSH
11432: LD_INT 20
11434: PUSH
11435: LD_INT 21
11437: PUSH
11438: LD_INT 22
11440: PUSH
11441: LD_INT 23
11443: PUSH
11444: LD_INT 25
11446: PUSH
11447: LD_INT 26
11449: PUSH
11450: LD_INT 28
11452: PUSH
11453: LD_INT 30
11455: PUSH
11456: LD_INT 31
11458: PUSH
11459: LD_INT 32
11461: PUSH
11462: LD_INT 36
11464: PUSH
11465: EMPTY
11466: LIST
11467: LIST
11468: LIST
11469: LIST
11470: LIST
11471: LIST
11472: LIST
11473: LIST
11474: LIST
11475: LIST
11476: LIST
11477: LIST
11478: LIST
11479: LIST
11480: LIST
11481: LIST
11482: LIST
11483: LIST
11484: LIST
11485: LIST
11486: LIST
11487: PUSH
11488: LD_INT 101
11490: PUSH
11491: LD_INT 102
11493: PUSH
11494: LD_INT 103
11496: PUSH
11497: LD_INT 105
11499: PUSH
11500: LD_INT 106
11502: PUSH
11503: LD_INT 108
11505: PUSH
11506: LD_INT 109
11508: PUSH
11509: LD_INT 112
11511: PUSH
11512: LD_INT 114
11514: PUSH
11515: LD_INT 116
11517: PUSH
11518: LD_INT 117
11520: PUSH
11521: LD_INT 118
11523: PUSH
11524: EMPTY
11525: LIST
11526: LIST
11527: LIST
11528: LIST
11529: LIST
11530: LIST
11531: LIST
11532: LIST
11533: LIST
11534: LIST
11535: LIST
11536: LIST
11537: PUSH
11538: EMPTY
11539: LIST
11540: LIST
11541: ST_TO_ADDR
11542: GO 13641
11544: LD_INT 10
11546: DOUBLE
11547: EQUAL
11548: IFTRUE 11552
11550: GO 11748
11552: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
11553: LD_ADDR_VAR 0 2
11557: PUSH
11558: LD_INT 2
11560: PUSH
11561: LD_INT 4
11563: PUSH
11564: LD_INT 5
11566: PUSH
11567: LD_INT 6
11569: PUSH
11570: LD_INT 7
11572: PUSH
11573: LD_INT 8
11575: PUSH
11576: LD_INT 9
11578: PUSH
11579: LD_INT 10
11581: PUSH
11582: LD_INT 11
11584: PUSH
11585: LD_INT 12
11587: PUSH
11588: LD_INT 13
11590: PUSH
11591: LD_INT 14
11593: PUSH
11594: LD_INT 15
11596: PUSH
11597: LD_INT 16
11599: PUSH
11600: LD_INT 17
11602: PUSH
11603: LD_INT 18
11605: PUSH
11606: LD_INT 19
11608: PUSH
11609: LD_INT 20
11611: PUSH
11612: LD_INT 21
11614: PUSH
11615: LD_INT 22
11617: PUSH
11618: LD_INT 23
11620: PUSH
11621: LD_INT 24
11623: PUSH
11624: LD_INT 25
11626: PUSH
11627: LD_INT 26
11629: PUSH
11630: LD_INT 28
11632: PUSH
11633: LD_INT 30
11635: PUSH
11636: LD_INT 31
11638: PUSH
11639: LD_INT 32
11641: PUSH
11642: LD_INT 36
11644: PUSH
11645: EMPTY
11646: LIST
11647: LIST
11648: LIST
11649: LIST
11650: LIST
11651: LIST
11652: LIST
11653: LIST
11654: LIST
11655: LIST
11656: LIST
11657: LIST
11658: LIST
11659: LIST
11660: LIST
11661: LIST
11662: LIST
11663: LIST
11664: LIST
11665: LIST
11666: LIST
11667: LIST
11668: LIST
11669: LIST
11670: LIST
11671: LIST
11672: LIST
11673: LIST
11674: LIST
11675: PUSH
11676: LD_INT 101
11678: PUSH
11679: LD_INT 102
11681: PUSH
11682: LD_INT 103
11684: PUSH
11685: LD_INT 104
11687: PUSH
11688: LD_INT 105
11690: PUSH
11691: LD_INT 106
11693: PUSH
11694: LD_INT 107
11696: PUSH
11697: LD_INT 108
11699: PUSH
11700: LD_INT 109
11702: PUSH
11703: LD_INT 110
11705: PUSH
11706: LD_INT 111
11708: PUSH
11709: LD_INT 112
11711: PUSH
11712: LD_INT 114
11714: PUSH
11715: LD_INT 116
11717: PUSH
11718: LD_INT 117
11720: PUSH
11721: LD_INT 118
11723: PUSH
11724: EMPTY
11725: LIST
11726: LIST
11727: LIST
11728: LIST
11729: LIST
11730: LIST
11731: LIST
11732: LIST
11733: LIST
11734: LIST
11735: LIST
11736: LIST
11737: LIST
11738: LIST
11739: LIST
11740: LIST
11741: PUSH
11742: EMPTY
11743: LIST
11744: LIST
11745: ST_TO_ADDR
11746: GO 13641
11748: LD_INT 11
11750: DOUBLE
11751: EQUAL
11752: IFTRUE 11756
11754: GO 11960
11756: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
11757: LD_ADDR_VAR 0 2
11761: PUSH
11762: LD_INT 2
11764: PUSH
11765: LD_INT 3
11767: PUSH
11768: LD_INT 4
11770: PUSH
11771: LD_INT 5
11773: PUSH
11774: LD_INT 6
11776: PUSH
11777: LD_INT 7
11779: PUSH
11780: LD_INT 8
11782: PUSH
11783: LD_INT 9
11785: PUSH
11786: LD_INT 10
11788: PUSH
11789: LD_INT 11
11791: PUSH
11792: LD_INT 12
11794: PUSH
11795: LD_INT 13
11797: PUSH
11798: LD_INT 14
11800: PUSH
11801: LD_INT 15
11803: PUSH
11804: LD_INT 16
11806: PUSH
11807: LD_INT 17
11809: PUSH
11810: LD_INT 18
11812: PUSH
11813: LD_INT 19
11815: PUSH
11816: LD_INT 20
11818: PUSH
11819: LD_INT 21
11821: PUSH
11822: LD_INT 22
11824: PUSH
11825: LD_INT 23
11827: PUSH
11828: LD_INT 24
11830: PUSH
11831: LD_INT 25
11833: PUSH
11834: LD_INT 26
11836: PUSH
11837: LD_INT 28
11839: PUSH
11840: LD_INT 30
11842: PUSH
11843: LD_INT 31
11845: PUSH
11846: LD_INT 32
11848: PUSH
11849: LD_INT 34
11851: PUSH
11852: LD_INT 36
11854: PUSH
11855: EMPTY
11856: LIST
11857: LIST
11858: LIST
11859: LIST
11860: LIST
11861: LIST
11862: LIST
11863: LIST
11864: LIST
11865: LIST
11866: LIST
11867: LIST
11868: LIST
11869: LIST
11870: LIST
11871: LIST
11872: LIST
11873: LIST
11874: LIST
11875: LIST
11876: LIST
11877: LIST
11878: LIST
11879: LIST
11880: LIST
11881: LIST
11882: LIST
11883: LIST
11884: LIST
11885: LIST
11886: LIST
11887: PUSH
11888: LD_INT 101
11890: PUSH
11891: LD_INT 102
11893: PUSH
11894: LD_INT 103
11896: PUSH
11897: LD_INT 104
11899: PUSH
11900: LD_INT 105
11902: PUSH
11903: LD_INT 106
11905: PUSH
11906: LD_INT 107
11908: PUSH
11909: LD_INT 108
11911: PUSH
11912: LD_INT 109
11914: PUSH
11915: LD_INT 110
11917: PUSH
11918: LD_INT 111
11920: PUSH
11921: LD_INT 112
11923: PUSH
11924: LD_INT 114
11926: PUSH
11927: LD_INT 116
11929: PUSH
11930: LD_INT 117
11932: PUSH
11933: LD_INT 118
11935: PUSH
11936: EMPTY
11937: LIST
11938: LIST
11939: LIST
11940: LIST
11941: LIST
11942: LIST
11943: LIST
11944: LIST
11945: LIST
11946: LIST
11947: LIST
11948: LIST
11949: LIST
11950: LIST
11951: LIST
11952: LIST
11953: PUSH
11954: EMPTY
11955: LIST
11956: LIST
11957: ST_TO_ADDR
11958: GO 13641
11960: LD_INT 12
11962: DOUBLE
11963: EQUAL
11964: IFTRUE 11968
11966: GO 12188
11968: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
11969: LD_ADDR_VAR 0 2
11973: PUSH
11974: LD_INT 1
11976: PUSH
11977: LD_INT 2
11979: PUSH
11980: LD_INT 3
11982: PUSH
11983: LD_INT 4
11985: PUSH
11986: LD_INT 5
11988: PUSH
11989: LD_INT 6
11991: PUSH
11992: LD_INT 7
11994: PUSH
11995: LD_INT 8
11997: PUSH
11998: LD_INT 9
12000: PUSH
12001: LD_INT 10
12003: PUSH
12004: LD_INT 11
12006: PUSH
12007: LD_INT 12
12009: PUSH
12010: LD_INT 13
12012: PUSH
12013: LD_INT 14
12015: PUSH
12016: LD_INT 15
12018: PUSH
12019: LD_INT 16
12021: PUSH
12022: LD_INT 17
12024: PUSH
12025: LD_INT 18
12027: PUSH
12028: LD_INT 19
12030: PUSH
12031: LD_INT 20
12033: PUSH
12034: LD_INT 21
12036: PUSH
12037: LD_INT 22
12039: PUSH
12040: LD_INT 23
12042: PUSH
12043: LD_INT 24
12045: PUSH
12046: LD_INT 25
12048: PUSH
12049: LD_INT 26
12051: PUSH
12052: LD_INT 27
12054: PUSH
12055: LD_INT 28
12057: PUSH
12058: LD_INT 30
12060: PUSH
12061: LD_INT 31
12063: PUSH
12064: LD_INT 32
12066: PUSH
12067: LD_INT 33
12069: PUSH
12070: LD_INT 34
12072: PUSH
12073: LD_INT 36
12075: PUSH
12076: EMPTY
12077: LIST
12078: LIST
12079: LIST
12080: LIST
12081: LIST
12082: LIST
12083: LIST
12084: LIST
12085: LIST
12086: LIST
12087: LIST
12088: LIST
12089: LIST
12090: LIST
12091: LIST
12092: LIST
12093: LIST
12094: LIST
12095: LIST
12096: LIST
12097: LIST
12098: LIST
12099: LIST
12100: LIST
12101: LIST
12102: LIST
12103: LIST
12104: LIST
12105: LIST
12106: LIST
12107: LIST
12108: LIST
12109: LIST
12110: LIST
12111: PUSH
12112: LD_INT 101
12114: PUSH
12115: LD_INT 102
12117: PUSH
12118: LD_INT 103
12120: PUSH
12121: LD_INT 104
12123: PUSH
12124: LD_INT 105
12126: PUSH
12127: LD_INT 106
12129: PUSH
12130: LD_INT 107
12132: PUSH
12133: LD_INT 108
12135: PUSH
12136: LD_INT 109
12138: PUSH
12139: LD_INT 110
12141: PUSH
12142: LD_INT 111
12144: PUSH
12145: LD_INT 112
12147: PUSH
12148: LD_INT 113
12150: PUSH
12151: LD_INT 114
12153: PUSH
12154: LD_INT 116
12156: PUSH
12157: LD_INT 117
12159: PUSH
12160: LD_INT 118
12162: PUSH
12163: EMPTY
12164: LIST
12165: LIST
12166: LIST
12167: LIST
12168: LIST
12169: LIST
12170: LIST
12171: LIST
12172: LIST
12173: LIST
12174: LIST
12175: LIST
12176: LIST
12177: LIST
12178: LIST
12179: LIST
12180: LIST
12181: PUSH
12182: EMPTY
12183: LIST
12184: LIST
12185: ST_TO_ADDR
12186: GO 13641
12188: LD_INT 13
12190: DOUBLE
12191: EQUAL
12192: IFTRUE 12196
12194: GO 12404
12196: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
12197: LD_ADDR_VAR 0 2
12201: PUSH
12202: LD_INT 1
12204: PUSH
12205: LD_INT 2
12207: PUSH
12208: LD_INT 3
12210: PUSH
12211: LD_INT 4
12213: PUSH
12214: LD_INT 5
12216: PUSH
12217: LD_INT 8
12219: PUSH
12220: LD_INT 9
12222: PUSH
12223: LD_INT 10
12225: PUSH
12226: LD_INT 11
12228: PUSH
12229: LD_INT 12
12231: PUSH
12232: LD_INT 14
12234: PUSH
12235: LD_INT 15
12237: PUSH
12238: LD_INT 16
12240: PUSH
12241: LD_INT 17
12243: PUSH
12244: LD_INT 18
12246: PUSH
12247: LD_INT 19
12249: PUSH
12250: LD_INT 20
12252: PUSH
12253: LD_INT 21
12255: PUSH
12256: LD_INT 22
12258: PUSH
12259: LD_INT 23
12261: PUSH
12262: LD_INT 24
12264: PUSH
12265: LD_INT 25
12267: PUSH
12268: LD_INT 26
12270: PUSH
12271: LD_INT 27
12273: PUSH
12274: LD_INT 28
12276: PUSH
12277: LD_INT 30
12279: PUSH
12280: LD_INT 31
12282: PUSH
12283: LD_INT 32
12285: PUSH
12286: LD_INT 33
12288: PUSH
12289: LD_INT 34
12291: PUSH
12292: LD_INT 36
12294: PUSH
12295: EMPTY
12296: LIST
12297: LIST
12298: LIST
12299: LIST
12300: LIST
12301: LIST
12302: LIST
12303: LIST
12304: LIST
12305: LIST
12306: LIST
12307: LIST
12308: LIST
12309: LIST
12310: LIST
12311: LIST
12312: LIST
12313: LIST
12314: LIST
12315: LIST
12316: LIST
12317: LIST
12318: LIST
12319: LIST
12320: LIST
12321: LIST
12322: LIST
12323: LIST
12324: LIST
12325: LIST
12326: LIST
12327: PUSH
12328: LD_INT 101
12330: PUSH
12331: LD_INT 102
12333: PUSH
12334: LD_INT 103
12336: PUSH
12337: LD_INT 104
12339: PUSH
12340: LD_INT 105
12342: PUSH
12343: LD_INT 106
12345: PUSH
12346: LD_INT 107
12348: PUSH
12349: LD_INT 108
12351: PUSH
12352: LD_INT 109
12354: PUSH
12355: LD_INT 110
12357: PUSH
12358: LD_INT 111
12360: PUSH
12361: LD_INT 112
12363: PUSH
12364: LD_INT 113
12366: PUSH
12367: LD_INT 114
12369: PUSH
12370: LD_INT 116
12372: PUSH
12373: LD_INT 117
12375: PUSH
12376: LD_INT 118
12378: PUSH
12379: EMPTY
12380: LIST
12381: LIST
12382: LIST
12383: LIST
12384: LIST
12385: LIST
12386: LIST
12387: LIST
12388: LIST
12389: LIST
12390: LIST
12391: LIST
12392: LIST
12393: LIST
12394: LIST
12395: LIST
12396: LIST
12397: PUSH
12398: EMPTY
12399: LIST
12400: LIST
12401: ST_TO_ADDR
12402: GO 13641
12404: LD_INT 14
12406: DOUBLE
12407: EQUAL
12408: IFTRUE 12412
12410: GO 12636
12412: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
12413: LD_ADDR_VAR 0 2
12417: PUSH
12418: LD_INT 1
12420: PUSH
12421: LD_INT 2
12423: PUSH
12424: LD_INT 3
12426: PUSH
12427: LD_INT 4
12429: PUSH
12430: LD_INT 5
12432: PUSH
12433: LD_INT 6
12435: PUSH
12436: LD_INT 7
12438: PUSH
12439: LD_INT 8
12441: PUSH
12442: LD_INT 9
12444: PUSH
12445: LD_INT 10
12447: PUSH
12448: LD_INT 11
12450: PUSH
12451: LD_INT 12
12453: PUSH
12454: LD_INT 13
12456: PUSH
12457: LD_INT 14
12459: PUSH
12460: LD_INT 15
12462: PUSH
12463: LD_INT 16
12465: PUSH
12466: LD_INT 17
12468: PUSH
12469: LD_INT 18
12471: PUSH
12472: LD_INT 19
12474: PUSH
12475: LD_INT 20
12477: PUSH
12478: LD_INT 21
12480: PUSH
12481: LD_INT 22
12483: PUSH
12484: LD_INT 23
12486: PUSH
12487: LD_INT 24
12489: PUSH
12490: LD_INT 25
12492: PUSH
12493: LD_INT 26
12495: PUSH
12496: LD_INT 27
12498: PUSH
12499: LD_INT 28
12501: PUSH
12502: LD_INT 29
12504: PUSH
12505: LD_INT 30
12507: PUSH
12508: LD_INT 31
12510: PUSH
12511: LD_INT 32
12513: PUSH
12514: LD_INT 33
12516: PUSH
12517: LD_INT 34
12519: PUSH
12520: LD_INT 36
12522: PUSH
12523: EMPTY
12524: LIST
12525: LIST
12526: LIST
12527: LIST
12528: LIST
12529: LIST
12530: LIST
12531: LIST
12532: LIST
12533: LIST
12534: LIST
12535: LIST
12536: LIST
12537: LIST
12538: LIST
12539: LIST
12540: LIST
12541: LIST
12542: LIST
12543: LIST
12544: LIST
12545: LIST
12546: LIST
12547: LIST
12548: LIST
12549: LIST
12550: LIST
12551: LIST
12552: LIST
12553: LIST
12554: LIST
12555: LIST
12556: LIST
12557: LIST
12558: LIST
12559: PUSH
12560: LD_INT 101
12562: PUSH
12563: LD_INT 102
12565: PUSH
12566: LD_INT 103
12568: PUSH
12569: LD_INT 104
12571: PUSH
12572: LD_INT 105
12574: PUSH
12575: LD_INT 106
12577: PUSH
12578: LD_INT 107
12580: PUSH
12581: LD_INT 108
12583: PUSH
12584: LD_INT 109
12586: PUSH
12587: LD_INT 110
12589: PUSH
12590: LD_INT 111
12592: PUSH
12593: LD_INT 112
12595: PUSH
12596: LD_INT 113
12598: PUSH
12599: LD_INT 114
12601: PUSH
12602: LD_INT 116
12604: PUSH
12605: LD_INT 117
12607: PUSH
12608: LD_INT 118
12610: PUSH
12611: EMPTY
12612: LIST
12613: LIST
12614: LIST
12615: LIST
12616: LIST
12617: LIST
12618: LIST
12619: LIST
12620: LIST
12621: LIST
12622: LIST
12623: LIST
12624: LIST
12625: LIST
12626: LIST
12627: LIST
12628: LIST
12629: PUSH
12630: EMPTY
12631: LIST
12632: LIST
12633: ST_TO_ADDR
12634: GO 13641
12636: LD_INT 15
12638: DOUBLE
12639: EQUAL
12640: IFTRUE 12644
12642: GO 12868
12644: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
12645: LD_ADDR_VAR 0 2
12649: PUSH
12650: LD_INT 1
12652: PUSH
12653: LD_INT 2
12655: PUSH
12656: LD_INT 3
12658: PUSH
12659: LD_INT 4
12661: PUSH
12662: LD_INT 5
12664: PUSH
12665: LD_INT 6
12667: PUSH
12668: LD_INT 7
12670: PUSH
12671: LD_INT 8
12673: PUSH
12674: LD_INT 9
12676: PUSH
12677: LD_INT 10
12679: PUSH
12680: LD_INT 11
12682: PUSH
12683: LD_INT 12
12685: PUSH
12686: LD_INT 13
12688: PUSH
12689: LD_INT 14
12691: PUSH
12692: LD_INT 15
12694: PUSH
12695: LD_INT 16
12697: PUSH
12698: LD_INT 17
12700: PUSH
12701: LD_INT 18
12703: PUSH
12704: LD_INT 19
12706: PUSH
12707: LD_INT 20
12709: PUSH
12710: LD_INT 21
12712: PUSH
12713: LD_INT 22
12715: PUSH
12716: LD_INT 23
12718: PUSH
12719: LD_INT 24
12721: PUSH
12722: LD_INT 25
12724: PUSH
12725: LD_INT 26
12727: PUSH
12728: LD_INT 27
12730: PUSH
12731: LD_INT 28
12733: PUSH
12734: LD_INT 29
12736: PUSH
12737: LD_INT 30
12739: PUSH
12740: LD_INT 31
12742: PUSH
12743: LD_INT 32
12745: PUSH
12746: LD_INT 33
12748: PUSH
12749: LD_INT 34
12751: PUSH
12752: LD_INT 36
12754: PUSH
12755: EMPTY
12756: LIST
12757: LIST
12758: LIST
12759: LIST
12760: LIST
12761: LIST
12762: LIST
12763: LIST
12764: LIST
12765: LIST
12766: LIST
12767: LIST
12768: LIST
12769: LIST
12770: LIST
12771: LIST
12772: LIST
12773: LIST
12774: LIST
12775: LIST
12776: LIST
12777: LIST
12778: LIST
12779: LIST
12780: LIST
12781: LIST
12782: LIST
12783: LIST
12784: LIST
12785: LIST
12786: LIST
12787: LIST
12788: LIST
12789: LIST
12790: LIST
12791: PUSH
12792: LD_INT 101
12794: PUSH
12795: LD_INT 102
12797: PUSH
12798: LD_INT 103
12800: PUSH
12801: LD_INT 104
12803: PUSH
12804: LD_INT 105
12806: PUSH
12807: LD_INT 106
12809: PUSH
12810: LD_INT 107
12812: PUSH
12813: LD_INT 108
12815: PUSH
12816: LD_INT 109
12818: PUSH
12819: LD_INT 110
12821: PUSH
12822: LD_INT 111
12824: PUSH
12825: LD_INT 112
12827: PUSH
12828: LD_INT 113
12830: PUSH
12831: LD_INT 114
12833: PUSH
12834: LD_INT 116
12836: PUSH
12837: LD_INT 117
12839: PUSH
12840: LD_INT 118
12842: PUSH
12843: EMPTY
12844: LIST
12845: LIST
12846: LIST
12847: LIST
12848: LIST
12849: LIST
12850: LIST
12851: LIST
12852: LIST
12853: LIST
12854: LIST
12855: LIST
12856: LIST
12857: LIST
12858: LIST
12859: LIST
12860: LIST
12861: PUSH
12862: EMPTY
12863: LIST
12864: LIST
12865: ST_TO_ADDR
12866: GO 13641
12868: LD_INT 16
12870: DOUBLE
12871: EQUAL
12872: IFTRUE 12876
12874: GO 13012
12876: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
12877: LD_ADDR_VAR 0 2
12881: PUSH
12882: LD_INT 2
12884: PUSH
12885: LD_INT 4
12887: PUSH
12888: LD_INT 5
12890: PUSH
12891: LD_INT 7
12893: PUSH
12894: LD_INT 11
12896: PUSH
12897: LD_INT 12
12899: PUSH
12900: LD_INT 15
12902: PUSH
12903: LD_INT 16
12905: PUSH
12906: LD_INT 20
12908: PUSH
12909: LD_INT 21
12911: PUSH
12912: LD_INT 22
12914: PUSH
12915: LD_INT 23
12917: PUSH
12918: LD_INT 25
12920: PUSH
12921: LD_INT 26
12923: PUSH
12924: LD_INT 30
12926: PUSH
12927: LD_INT 31
12929: PUSH
12930: LD_INT 32
12932: PUSH
12933: LD_INT 33
12935: PUSH
12936: LD_INT 34
12938: PUSH
12939: EMPTY
12940: LIST
12941: LIST
12942: LIST
12943: LIST
12944: LIST
12945: LIST
12946: LIST
12947: LIST
12948: LIST
12949: LIST
12950: LIST
12951: LIST
12952: LIST
12953: LIST
12954: LIST
12955: LIST
12956: LIST
12957: LIST
12958: LIST
12959: PUSH
12960: LD_INT 101
12962: PUSH
12963: LD_INT 102
12965: PUSH
12966: LD_INT 103
12968: PUSH
12969: LD_INT 106
12971: PUSH
12972: LD_INT 108
12974: PUSH
12975: LD_INT 112
12977: PUSH
12978: LD_INT 113
12980: PUSH
12981: LD_INT 114
12983: PUSH
12984: LD_INT 116
12986: PUSH
12987: LD_INT 117
12989: PUSH
12990: LD_INT 118
12992: PUSH
12993: EMPTY
12994: LIST
12995: LIST
12996: LIST
12997: LIST
12998: LIST
12999: LIST
13000: LIST
13001: LIST
13002: LIST
13003: LIST
13004: LIST
13005: PUSH
13006: EMPTY
13007: LIST
13008: LIST
13009: ST_TO_ADDR
13010: GO 13641
13012: LD_INT 17
13014: DOUBLE
13015: EQUAL
13016: IFTRUE 13020
13018: GO 13244
13020: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
13021: LD_ADDR_VAR 0 2
13025: PUSH
13026: LD_INT 1
13028: PUSH
13029: LD_INT 2
13031: PUSH
13032: LD_INT 3
13034: PUSH
13035: LD_INT 4
13037: PUSH
13038: LD_INT 5
13040: PUSH
13041: LD_INT 6
13043: PUSH
13044: LD_INT 7
13046: PUSH
13047: LD_INT 8
13049: PUSH
13050: LD_INT 9
13052: PUSH
13053: LD_INT 10
13055: PUSH
13056: LD_INT 11
13058: PUSH
13059: LD_INT 12
13061: PUSH
13062: LD_INT 13
13064: PUSH
13065: LD_INT 14
13067: PUSH
13068: LD_INT 15
13070: PUSH
13071: LD_INT 16
13073: PUSH
13074: LD_INT 17
13076: PUSH
13077: LD_INT 18
13079: PUSH
13080: LD_INT 19
13082: PUSH
13083: LD_INT 20
13085: PUSH
13086: LD_INT 21
13088: PUSH
13089: LD_INT 22
13091: PUSH
13092: LD_INT 23
13094: PUSH
13095: LD_INT 24
13097: PUSH
13098: LD_INT 25
13100: PUSH
13101: LD_INT 26
13103: PUSH
13104: LD_INT 27
13106: PUSH
13107: LD_INT 28
13109: PUSH
13110: LD_INT 29
13112: PUSH
13113: LD_INT 30
13115: PUSH
13116: LD_INT 31
13118: PUSH
13119: LD_INT 32
13121: PUSH
13122: LD_INT 33
13124: PUSH
13125: LD_INT 34
13127: PUSH
13128: LD_INT 36
13130: PUSH
13131: EMPTY
13132: LIST
13133: LIST
13134: LIST
13135: LIST
13136: LIST
13137: LIST
13138: LIST
13139: LIST
13140: LIST
13141: LIST
13142: LIST
13143: LIST
13144: LIST
13145: LIST
13146: LIST
13147: LIST
13148: LIST
13149: LIST
13150: LIST
13151: LIST
13152: LIST
13153: LIST
13154: LIST
13155: LIST
13156: LIST
13157: LIST
13158: LIST
13159: LIST
13160: LIST
13161: LIST
13162: LIST
13163: LIST
13164: LIST
13165: LIST
13166: LIST
13167: PUSH
13168: LD_INT 101
13170: PUSH
13171: LD_INT 102
13173: PUSH
13174: LD_INT 103
13176: PUSH
13177: LD_INT 104
13179: PUSH
13180: LD_INT 105
13182: PUSH
13183: LD_INT 106
13185: PUSH
13186: LD_INT 107
13188: PUSH
13189: LD_INT 108
13191: PUSH
13192: LD_INT 109
13194: PUSH
13195: LD_INT 110
13197: PUSH
13198: LD_INT 111
13200: PUSH
13201: LD_INT 112
13203: PUSH
13204: LD_INT 113
13206: PUSH
13207: LD_INT 114
13209: PUSH
13210: LD_INT 116
13212: PUSH
13213: LD_INT 117
13215: PUSH
13216: LD_INT 118
13218: PUSH
13219: EMPTY
13220: LIST
13221: LIST
13222: LIST
13223: LIST
13224: LIST
13225: LIST
13226: LIST
13227: LIST
13228: LIST
13229: LIST
13230: LIST
13231: LIST
13232: LIST
13233: LIST
13234: LIST
13235: LIST
13236: LIST
13237: PUSH
13238: EMPTY
13239: LIST
13240: LIST
13241: ST_TO_ADDR
13242: GO 13641
13244: LD_INT 18
13246: DOUBLE
13247: EQUAL
13248: IFTRUE 13252
13250: GO 13400
13252: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
13253: LD_ADDR_VAR 0 2
13257: PUSH
13258: LD_INT 2
13260: PUSH
13261: LD_INT 4
13263: PUSH
13264: LD_INT 5
13266: PUSH
13267: LD_INT 7
13269: PUSH
13270: LD_INT 11
13272: PUSH
13273: LD_INT 12
13275: PUSH
13276: LD_INT 15
13278: PUSH
13279: LD_INT 16
13281: PUSH
13282: LD_INT 20
13284: PUSH
13285: LD_INT 21
13287: PUSH
13288: LD_INT 22
13290: PUSH
13291: LD_INT 23
13293: PUSH
13294: LD_INT 25
13296: PUSH
13297: LD_INT 26
13299: PUSH
13300: LD_INT 30
13302: PUSH
13303: LD_INT 31
13305: PUSH
13306: LD_INT 32
13308: PUSH
13309: LD_INT 33
13311: PUSH
13312: LD_INT 34
13314: PUSH
13315: LD_INT 35
13317: PUSH
13318: LD_INT 36
13320: PUSH
13321: EMPTY
13322: LIST
13323: LIST
13324: LIST
13325: LIST
13326: LIST
13327: LIST
13328: LIST
13329: LIST
13330: LIST
13331: LIST
13332: LIST
13333: LIST
13334: LIST
13335: LIST
13336: LIST
13337: LIST
13338: LIST
13339: LIST
13340: LIST
13341: LIST
13342: LIST
13343: PUSH
13344: LD_INT 101
13346: PUSH
13347: LD_INT 102
13349: PUSH
13350: LD_INT 103
13352: PUSH
13353: LD_INT 106
13355: PUSH
13356: LD_INT 108
13358: PUSH
13359: LD_INT 112
13361: PUSH
13362: LD_INT 113
13364: PUSH
13365: LD_INT 114
13367: PUSH
13368: LD_INT 115
13370: PUSH
13371: LD_INT 116
13373: PUSH
13374: LD_INT 117
13376: PUSH
13377: LD_INT 118
13379: PUSH
13380: EMPTY
13381: LIST
13382: LIST
13383: LIST
13384: LIST
13385: LIST
13386: LIST
13387: LIST
13388: LIST
13389: LIST
13390: LIST
13391: LIST
13392: LIST
13393: PUSH
13394: EMPTY
13395: LIST
13396: LIST
13397: ST_TO_ADDR
13398: GO 13641
13400: LD_INT 19
13402: DOUBLE
13403: EQUAL
13404: IFTRUE 13408
13406: GO 13640
13408: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
13409: LD_ADDR_VAR 0 2
13413: PUSH
13414: LD_INT 1
13416: PUSH
13417: LD_INT 2
13419: PUSH
13420: LD_INT 3
13422: PUSH
13423: LD_INT 4
13425: PUSH
13426: LD_INT 5
13428: PUSH
13429: LD_INT 6
13431: PUSH
13432: LD_INT 7
13434: PUSH
13435: LD_INT 8
13437: PUSH
13438: LD_INT 9
13440: PUSH
13441: LD_INT 10
13443: PUSH
13444: LD_INT 11
13446: PUSH
13447: LD_INT 12
13449: PUSH
13450: LD_INT 13
13452: PUSH
13453: LD_INT 14
13455: PUSH
13456: LD_INT 15
13458: PUSH
13459: LD_INT 16
13461: PUSH
13462: LD_INT 17
13464: PUSH
13465: LD_INT 18
13467: PUSH
13468: LD_INT 19
13470: PUSH
13471: LD_INT 20
13473: PUSH
13474: LD_INT 21
13476: PUSH
13477: LD_INT 22
13479: PUSH
13480: LD_INT 23
13482: PUSH
13483: LD_INT 24
13485: PUSH
13486: LD_INT 25
13488: PUSH
13489: LD_INT 26
13491: PUSH
13492: LD_INT 27
13494: PUSH
13495: LD_INT 28
13497: PUSH
13498: LD_INT 29
13500: PUSH
13501: LD_INT 30
13503: PUSH
13504: LD_INT 31
13506: PUSH
13507: LD_INT 32
13509: PUSH
13510: LD_INT 33
13512: PUSH
13513: LD_INT 34
13515: PUSH
13516: LD_INT 35
13518: PUSH
13519: LD_INT 36
13521: PUSH
13522: EMPTY
13523: LIST
13524: LIST
13525: LIST
13526: LIST
13527: LIST
13528: LIST
13529: LIST
13530: LIST
13531: LIST
13532: LIST
13533: LIST
13534: LIST
13535: LIST
13536: LIST
13537: LIST
13538: LIST
13539: LIST
13540: LIST
13541: LIST
13542: LIST
13543: LIST
13544: LIST
13545: LIST
13546: LIST
13547: LIST
13548: LIST
13549: LIST
13550: LIST
13551: LIST
13552: LIST
13553: LIST
13554: LIST
13555: LIST
13556: LIST
13557: LIST
13558: LIST
13559: PUSH
13560: LD_INT 101
13562: PUSH
13563: LD_INT 102
13565: PUSH
13566: LD_INT 103
13568: PUSH
13569: LD_INT 104
13571: PUSH
13572: LD_INT 105
13574: PUSH
13575: LD_INT 106
13577: PUSH
13578: LD_INT 107
13580: PUSH
13581: LD_INT 108
13583: PUSH
13584: LD_INT 109
13586: PUSH
13587: LD_INT 110
13589: PUSH
13590: LD_INT 111
13592: PUSH
13593: LD_INT 112
13595: PUSH
13596: LD_INT 113
13598: PUSH
13599: LD_INT 114
13601: PUSH
13602: LD_INT 115
13604: PUSH
13605: LD_INT 116
13607: PUSH
13608: LD_INT 117
13610: PUSH
13611: LD_INT 118
13613: PUSH
13614: EMPTY
13615: LIST
13616: LIST
13617: LIST
13618: LIST
13619: LIST
13620: LIST
13621: LIST
13622: LIST
13623: LIST
13624: LIST
13625: LIST
13626: LIST
13627: LIST
13628: LIST
13629: LIST
13630: LIST
13631: LIST
13632: LIST
13633: PUSH
13634: EMPTY
13635: LIST
13636: LIST
13637: ST_TO_ADDR
13638: GO 13641
13640: POP
// end else
13641: GO 13872
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
13643: LD_ADDR_VAR 0 2
13647: PUSH
13648: LD_INT 1
13650: PUSH
13651: LD_INT 2
13653: PUSH
13654: LD_INT 3
13656: PUSH
13657: LD_INT 4
13659: PUSH
13660: LD_INT 5
13662: PUSH
13663: LD_INT 6
13665: PUSH
13666: LD_INT 7
13668: PUSH
13669: LD_INT 8
13671: PUSH
13672: LD_INT 9
13674: PUSH
13675: LD_INT 10
13677: PUSH
13678: LD_INT 11
13680: PUSH
13681: LD_INT 12
13683: PUSH
13684: LD_INT 13
13686: PUSH
13687: LD_INT 14
13689: PUSH
13690: LD_INT 15
13692: PUSH
13693: LD_INT 16
13695: PUSH
13696: LD_INT 17
13698: PUSH
13699: LD_INT 18
13701: PUSH
13702: LD_INT 19
13704: PUSH
13705: LD_INT 20
13707: PUSH
13708: LD_INT 21
13710: PUSH
13711: LD_INT 22
13713: PUSH
13714: LD_INT 23
13716: PUSH
13717: LD_INT 24
13719: PUSH
13720: LD_INT 25
13722: PUSH
13723: LD_INT 26
13725: PUSH
13726: LD_INT 27
13728: PUSH
13729: LD_INT 28
13731: PUSH
13732: LD_INT 29
13734: PUSH
13735: LD_INT 30
13737: PUSH
13738: LD_INT 31
13740: PUSH
13741: LD_INT 32
13743: PUSH
13744: LD_INT 33
13746: PUSH
13747: LD_INT 34
13749: PUSH
13750: LD_INT 35
13752: PUSH
13753: LD_INT 36
13755: PUSH
13756: EMPTY
13757: LIST
13758: LIST
13759: LIST
13760: LIST
13761: LIST
13762: LIST
13763: LIST
13764: LIST
13765: LIST
13766: LIST
13767: LIST
13768: LIST
13769: LIST
13770: LIST
13771: LIST
13772: LIST
13773: LIST
13774: LIST
13775: LIST
13776: LIST
13777: LIST
13778: LIST
13779: LIST
13780: LIST
13781: LIST
13782: LIST
13783: LIST
13784: LIST
13785: LIST
13786: LIST
13787: LIST
13788: LIST
13789: LIST
13790: LIST
13791: LIST
13792: LIST
13793: PUSH
13794: LD_INT 101
13796: PUSH
13797: LD_INT 102
13799: PUSH
13800: LD_INT 103
13802: PUSH
13803: LD_INT 104
13805: PUSH
13806: LD_INT 105
13808: PUSH
13809: LD_INT 106
13811: PUSH
13812: LD_INT 107
13814: PUSH
13815: LD_INT 108
13817: PUSH
13818: LD_INT 109
13820: PUSH
13821: LD_INT 110
13823: PUSH
13824: LD_INT 111
13826: PUSH
13827: LD_INT 112
13829: PUSH
13830: LD_INT 113
13832: PUSH
13833: LD_INT 114
13835: PUSH
13836: LD_INT 115
13838: PUSH
13839: LD_INT 116
13841: PUSH
13842: LD_INT 117
13844: PUSH
13845: LD_INT 118
13847: PUSH
13848: EMPTY
13849: LIST
13850: LIST
13851: LIST
13852: LIST
13853: LIST
13854: LIST
13855: LIST
13856: LIST
13857: LIST
13858: LIST
13859: LIST
13860: LIST
13861: LIST
13862: LIST
13863: LIST
13864: LIST
13865: LIST
13866: LIST
13867: PUSH
13868: EMPTY
13869: LIST
13870: LIST
13871: ST_TO_ADDR
// if result then
13872: LD_VAR 0 2
13876: IFFALSE 14662
// begin normal :=  ;
13878: LD_ADDR_VAR 0 5
13882: PUSH
13883: LD_STRING 
13885: ST_TO_ADDR
// hardcore :=  ;
13886: LD_ADDR_VAR 0 6
13890: PUSH
13891: LD_STRING 
13893: ST_TO_ADDR
// active :=  ;
13894: LD_ADDR_VAR 0 7
13898: PUSH
13899: LD_STRING 
13901: ST_TO_ADDR
// for i = 1 to normalCounter do
13902: LD_ADDR_VAR 0 8
13906: PUSH
13907: DOUBLE
13908: LD_INT 1
13910: DEC
13911: ST_TO_ADDR
13912: LD_EXP 54
13916: PUSH
13917: FOR_TO
13918: IFFALSE 14019
// begin tmp := 0 ;
13920: LD_ADDR_VAR 0 3
13924: PUSH
13925: LD_STRING 0
13927: ST_TO_ADDR
// if result [ 1 ] then
13928: LD_VAR 0 2
13932: PUSH
13933: LD_INT 1
13935: ARRAY
13936: IFFALSE 14001
// if result [ 1 ] [ 1 ] = i then
13938: LD_VAR 0 2
13942: PUSH
13943: LD_INT 1
13945: ARRAY
13946: PUSH
13947: LD_INT 1
13949: ARRAY
13950: PUSH
13951: LD_VAR 0 8
13955: EQUAL
13956: IFFALSE 14001
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
13958: LD_ADDR_VAR 0 2
13962: PUSH
13963: LD_VAR 0 2
13967: PPUSH
13968: LD_INT 1
13970: PPUSH
13971: LD_VAR 0 2
13975: PUSH
13976: LD_INT 1
13978: ARRAY
13979: PPUSH
13980: LD_INT 1
13982: PPUSH
13983: CALL_OW 3
13987: PPUSH
13988: CALL_OW 1
13992: ST_TO_ADDR
// tmp := 1 ;
13993: LD_ADDR_VAR 0 3
13997: PUSH
13998: LD_STRING 1
14000: ST_TO_ADDR
// end ; normal := normal & tmp ;
14001: LD_ADDR_VAR 0 5
14005: PUSH
14006: LD_VAR 0 5
14010: PUSH
14011: LD_VAR 0 3
14015: STR
14016: ST_TO_ADDR
// end ;
14017: GO 13917
14019: POP
14020: POP
// for i = 1 to hardcoreCounter do
14021: LD_ADDR_VAR 0 8
14025: PUSH
14026: DOUBLE
14027: LD_INT 1
14029: DEC
14030: ST_TO_ADDR
14031: LD_EXP 55
14035: PUSH
14036: FOR_TO
14037: IFFALSE 14142
// begin tmp := 0 ;
14039: LD_ADDR_VAR 0 3
14043: PUSH
14044: LD_STRING 0
14046: ST_TO_ADDR
// if result [ 2 ] then
14047: LD_VAR 0 2
14051: PUSH
14052: LD_INT 2
14054: ARRAY
14055: IFFALSE 14124
// if result [ 2 ] [ 1 ] = 100 + i then
14057: LD_VAR 0 2
14061: PUSH
14062: LD_INT 2
14064: ARRAY
14065: PUSH
14066: LD_INT 1
14068: ARRAY
14069: PUSH
14070: LD_INT 100
14072: PUSH
14073: LD_VAR 0 8
14077: PLUS
14078: EQUAL
14079: IFFALSE 14124
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
14081: LD_ADDR_VAR 0 2
14085: PUSH
14086: LD_VAR 0 2
14090: PPUSH
14091: LD_INT 2
14093: PPUSH
14094: LD_VAR 0 2
14098: PUSH
14099: LD_INT 2
14101: ARRAY
14102: PPUSH
14103: LD_INT 1
14105: PPUSH
14106: CALL_OW 3
14110: PPUSH
14111: CALL_OW 1
14115: ST_TO_ADDR
// tmp := 1 ;
14116: LD_ADDR_VAR 0 3
14120: PUSH
14121: LD_STRING 1
14123: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
14124: LD_ADDR_VAR 0 6
14128: PUSH
14129: LD_VAR 0 6
14133: PUSH
14134: LD_VAR 0 3
14138: STR
14139: ST_TO_ADDR
// end ;
14140: GO 14036
14142: POP
14143: POP
// if isGameLoad then
14144: LD_VAR 0 1
14148: IFFALSE 14623
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
14150: LD_ADDR_VAR 0 4
14154: PUSH
14155: LD_EXP 58
14159: PUSH
14160: LD_EXP 57
14164: PUSH
14165: LD_EXP 59
14169: PUSH
14170: LD_EXP 56
14174: PUSH
14175: LD_EXP 60
14179: PUSH
14180: LD_EXP 61
14184: PUSH
14185: LD_EXP 62
14189: PUSH
14190: LD_EXP 63
14194: PUSH
14195: LD_EXP 64
14199: PUSH
14200: LD_EXP 65
14204: PUSH
14205: LD_EXP 66
14209: PUSH
14210: LD_EXP 67
14214: PUSH
14215: LD_EXP 68
14219: PUSH
14220: LD_EXP 69
14224: PUSH
14225: LD_EXP 77
14229: PUSH
14230: LD_EXP 78
14234: PUSH
14235: LD_EXP 79
14239: PUSH
14240: LD_EXP 80
14244: PUSH
14245: LD_EXP 82
14249: PUSH
14250: LD_EXP 83
14254: PUSH
14255: LD_EXP 84
14259: PUSH
14260: LD_EXP 87
14264: PUSH
14265: LD_EXP 89
14269: PUSH
14270: LD_EXP 90
14274: PUSH
14275: LD_EXP 91
14279: PUSH
14280: LD_EXP 93
14284: PUSH
14285: LD_EXP 94
14289: PUSH
14290: LD_EXP 97
14294: PUSH
14295: LD_EXP 98
14299: PUSH
14300: LD_EXP 99
14304: PUSH
14305: LD_EXP 100
14309: PUSH
14310: LD_EXP 101
14314: PUSH
14315: LD_EXP 102
14319: PUSH
14320: LD_EXP 103
14324: PUSH
14325: LD_EXP 104
14329: PUSH
14330: LD_EXP 105
14334: PUSH
14335: LD_EXP 70
14339: PUSH
14340: LD_EXP 71
14344: PUSH
14345: LD_EXP 74
14349: PUSH
14350: LD_EXP 75
14354: PUSH
14355: LD_EXP 76
14359: PUSH
14360: LD_EXP 72
14364: PUSH
14365: LD_EXP 73
14369: PUSH
14370: LD_EXP 81
14374: PUSH
14375: LD_EXP 85
14379: PUSH
14380: LD_EXP 86
14384: PUSH
14385: LD_EXP 88
14389: PUSH
14390: LD_EXP 92
14394: PUSH
14395: LD_EXP 95
14399: PUSH
14400: LD_EXP 96
14404: PUSH
14405: LD_EXP 106
14409: PUSH
14410: LD_EXP 107
14414: PUSH
14415: LD_EXP 108
14419: PUSH
14420: LD_EXP 109
14424: PUSH
14425: EMPTY
14426: LIST
14427: LIST
14428: LIST
14429: LIST
14430: LIST
14431: LIST
14432: LIST
14433: LIST
14434: LIST
14435: LIST
14436: LIST
14437: LIST
14438: LIST
14439: LIST
14440: LIST
14441: LIST
14442: LIST
14443: LIST
14444: LIST
14445: LIST
14446: LIST
14447: LIST
14448: LIST
14449: LIST
14450: LIST
14451: LIST
14452: LIST
14453: LIST
14454: LIST
14455: LIST
14456: LIST
14457: LIST
14458: LIST
14459: LIST
14460: LIST
14461: LIST
14462: LIST
14463: LIST
14464: LIST
14465: LIST
14466: LIST
14467: LIST
14468: LIST
14469: LIST
14470: LIST
14471: LIST
14472: LIST
14473: LIST
14474: LIST
14475: LIST
14476: LIST
14477: LIST
14478: LIST
14479: LIST
14480: ST_TO_ADDR
// tmp :=  ;
14481: LD_ADDR_VAR 0 3
14485: PUSH
14486: LD_STRING 
14488: ST_TO_ADDR
// for i = 1 to normalCounter do
14489: LD_ADDR_VAR 0 8
14493: PUSH
14494: DOUBLE
14495: LD_INT 1
14497: DEC
14498: ST_TO_ADDR
14499: LD_EXP 54
14503: PUSH
14504: FOR_TO
14505: IFFALSE 14541
// begin if flags [ i ] then
14507: LD_VAR 0 4
14511: PUSH
14512: LD_VAR 0 8
14516: ARRAY
14517: IFFALSE 14539
// tmp := tmp & i & ; ;
14519: LD_ADDR_VAR 0 3
14523: PUSH
14524: LD_VAR 0 3
14528: PUSH
14529: LD_VAR 0 8
14533: STR
14534: PUSH
14535: LD_STRING ;
14537: STR
14538: ST_TO_ADDR
// end ;
14539: GO 14504
14541: POP
14542: POP
// for i = 1 to hardcoreCounter do
14543: LD_ADDR_VAR 0 8
14547: PUSH
14548: DOUBLE
14549: LD_INT 1
14551: DEC
14552: ST_TO_ADDR
14553: LD_EXP 55
14557: PUSH
14558: FOR_TO
14559: IFFALSE 14605
// begin if flags [ normalCounter + i ] then
14561: LD_VAR 0 4
14565: PUSH
14566: LD_EXP 54
14570: PUSH
14571: LD_VAR 0 8
14575: PLUS
14576: ARRAY
14577: IFFALSE 14603
// tmp := tmp & ( 100 + i ) & ; ;
14579: LD_ADDR_VAR 0 3
14583: PUSH
14584: LD_VAR 0 3
14588: PUSH
14589: LD_INT 100
14591: PUSH
14592: LD_VAR 0 8
14596: PLUS
14597: STR
14598: PUSH
14599: LD_STRING ;
14601: STR
14602: ST_TO_ADDR
// end ;
14603: GO 14558
14605: POP
14606: POP
// if tmp then
14607: LD_VAR 0 3
14611: IFFALSE 14623
// active := tmp ;
14613: LD_ADDR_VAR 0 7
14617: PUSH
14618: LD_VAR 0 3
14622: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
14623: LD_STRING getStreamItemsFromMission("
14625: PUSH
14626: LD_VAR 0 5
14630: STR
14631: PUSH
14632: LD_STRING ","
14634: STR
14635: PUSH
14636: LD_VAR 0 6
14640: STR
14641: PUSH
14642: LD_STRING ","
14644: STR
14645: PUSH
14646: LD_VAR 0 7
14650: STR
14651: PUSH
14652: LD_STRING ")
14654: STR
14655: PPUSH
14656: CALL_OW 559
// end else
14660: GO 14669
// ToLua ( getStreamItemsFromMission("","","") ) ;
14662: LD_STRING getStreamItemsFromMission("","","")
14664: PPUSH
14665: CALL_OW 559
// end ;
14669: LD_VAR 0 2
14673: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
14674: LD_EXP 53
14678: PUSH
14679: LD_EXP 58
14683: AND
14684: IFFALSE 14808
14686: GO 14688
14688: DISABLE
14689: LD_INT 0
14691: PPUSH
14692: PPUSH
// begin enable ;
14693: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
14694: LD_ADDR_VAR 0 2
14698: PUSH
14699: LD_INT 22
14701: PUSH
14702: LD_OWVAR 2
14706: PUSH
14707: EMPTY
14708: LIST
14709: LIST
14710: PUSH
14711: LD_INT 2
14713: PUSH
14714: LD_INT 34
14716: PUSH
14717: LD_INT 7
14719: PUSH
14720: EMPTY
14721: LIST
14722: LIST
14723: PUSH
14724: LD_INT 34
14726: PUSH
14727: LD_INT 45
14729: PUSH
14730: EMPTY
14731: LIST
14732: LIST
14733: PUSH
14734: LD_INT 34
14736: PUSH
14737: LD_INT 28
14739: PUSH
14740: EMPTY
14741: LIST
14742: LIST
14743: PUSH
14744: LD_INT 34
14746: PUSH
14747: LD_INT 47
14749: PUSH
14750: EMPTY
14751: LIST
14752: LIST
14753: PUSH
14754: EMPTY
14755: LIST
14756: LIST
14757: LIST
14758: LIST
14759: LIST
14760: PUSH
14761: EMPTY
14762: LIST
14763: LIST
14764: PPUSH
14765: CALL_OW 69
14769: ST_TO_ADDR
// if not tmp then
14770: LD_VAR 0 2
14774: NOT
14775: IFFALSE 14779
// exit ;
14777: GO 14808
// for i in tmp do
14779: LD_ADDR_VAR 0 1
14783: PUSH
14784: LD_VAR 0 2
14788: PUSH
14789: FOR_IN
14790: IFFALSE 14806
// begin SetLives ( i , 0 ) ;
14792: LD_VAR 0 1
14796: PPUSH
14797: LD_INT 0
14799: PPUSH
14800: CALL_OW 234
// end ;
14804: GO 14789
14806: POP
14807: POP
// end ;
14808: PPOPN 2
14810: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
14811: LD_EXP 53
14815: PUSH
14816: LD_EXP 59
14820: AND
14821: IFFALSE 14905
14823: GO 14825
14825: DISABLE
14826: LD_INT 0
14828: PPUSH
14829: PPUSH
// begin enable ;
14830: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
14831: LD_ADDR_VAR 0 2
14835: PUSH
14836: LD_INT 22
14838: PUSH
14839: LD_OWVAR 2
14843: PUSH
14844: EMPTY
14845: LIST
14846: LIST
14847: PUSH
14848: LD_INT 32
14850: PUSH
14851: LD_INT 3
14853: PUSH
14854: EMPTY
14855: LIST
14856: LIST
14857: PUSH
14858: EMPTY
14859: LIST
14860: LIST
14861: PPUSH
14862: CALL_OW 69
14866: ST_TO_ADDR
// if not tmp then
14867: LD_VAR 0 2
14871: NOT
14872: IFFALSE 14876
// exit ;
14874: GO 14905
// for i in tmp do
14876: LD_ADDR_VAR 0 1
14880: PUSH
14881: LD_VAR 0 2
14885: PUSH
14886: FOR_IN
14887: IFFALSE 14903
// begin SetLives ( i , 0 ) ;
14889: LD_VAR 0 1
14893: PPUSH
14894: LD_INT 0
14896: PPUSH
14897: CALL_OW 234
// end ;
14901: GO 14886
14903: POP
14904: POP
// end ;
14905: PPOPN 2
14907: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
14908: LD_EXP 53
14912: PUSH
14913: LD_EXP 56
14917: AND
14918: IFFALSE 15011
14920: GO 14922
14922: DISABLE
14923: LD_INT 0
14925: PPUSH
// begin enable ;
14926: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
14927: LD_ADDR_VAR 0 1
14931: PUSH
14932: LD_INT 22
14934: PUSH
14935: LD_OWVAR 2
14939: PUSH
14940: EMPTY
14941: LIST
14942: LIST
14943: PUSH
14944: LD_INT 2
14946: PUSH
14947: LD_INT 25
14949: PUSH
14950: LD_INT 5
14952: PUSH
14953: EMPTY
14954: LIST
14955: LIST
14956: PUSH
14957: LD_INT 25
14959: PUSH
14960: LD_INT 9
14962: PUSH
14963: EMPTY
14964: LIST
14965: LIST
14966: PUSH
14967: LD_INT 25
14969: PUSH
14970: LD_INT 8
14972: PUSH
14973: EMPTY
14974: LIST
14975: LIST
14976: PUSH
14977: EMPTY
14978: LIST
14979: LIST
14980: LIST
14981: LIST
14982: PUSH
14983: EMPTY
14984: LIST
14985: LIST
14986: PPUSH
14987: CALL_OW 69
14991: PUSH
14992: FOR_IN
14993: IFFALSE 15009
// begin SetClass ( i , 1 ) ;
14995: LD_VAR 0 1
14999: PPUSH
15000: LD_INT 1
15002: PPUSH
15003: CALL_OW 336
// end ;
15007: GO 14992
15009: POP
15010: POP
// end ;
15011: PPOPN 1
15013: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
15014: LD_EXP 53
15018: PUSH
15019: LD_EXP 57
15023: AND
15024: PUSH
15025: LD_OWVAR 65
15029: PUSH
15030: LD_INT 7
15032: LESS
15033: AND
15034: IFFALSE 15048
15036: GO 15038
15038: DISABLE
// begin enable ;
15039: ENABLE
// game_speed := 7 ;
15040: LD_ADDR_OWVAR 65
15044: PUSH
15045: LD_INT 7
15047: ST_TO_ADDR
// end ;
15048: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
15049: LD_EXP 53
15053: PUSH
15054: LD_EXP 60
15058: AND
15059: IFFALSE 15261
15061: GO 15063
15063: DISABLE
15064: LD_INT 0
15066: PPUSH
15067: PPUSH
15068: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
15069: LD_ADDR_VAR 0 3
15073: PUSH
15074: LD_INT 81
15076: PUSH
15077: LD_OWVAR 2
15081: PUSH
15082: EMPTY
15083: LIST
15084: LIST
15085: PUSH
15086: LD_INT 21
15088: PUSH
15089: LD_INT 1
15091: PUSH
15092: EMPTY
15093: LIST
15094: LIST
15095: PUSH
15096: EMPTY
15097: LIST
15098: LIST
15099: PPUSH
15100: CALL_OW 69
15104: ST_TO_ADDR
// if not tmp then
15105: LD_VAR 0 3
15109: NOT
15110: IFFALSE 15114
// exit ;
15112: GO 15261
// if tmp > 5 then
15114: LD_VAR 0 3
15118: PUSH
15119: LD_INT 5
15121: GREATER
15122: IFFALSE 15134
// k := 5 else
15124: LD_ADDR_VAR 0 2
15128: PUSH
15129: LD_INT 5
15131: ST_TO_ADDR
15132: GO 15144
// k := tmp ;
15134: LD_ADDR_VAR 0 2
15138: PUSH
15139: LD_VAR 0 3
15143: ST_TO_ADDR
// for i := 1 to k do
15144: LD_ADDR_VAR 0 1
15148: PUSH
15149: DOUBLE
15150: LD_INT 1
15152: DEC
15153: ST_TO_ADDR
15154: LD_VAR 0 2
15158: PUSH
15159: FOR_TO
15160: IFFALSE 15259
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
15162: LD_VAR 0 3
15166: PUSH
15167: LD_VAR 0 1
15171: ARRAY
15172: PPUSH
15173: LD_VAR 0 1
15177: PUSH
15178: LD_INT 4
15180: MOD
15181: PUSH
15182: LD_INT 1
15184: PLUS
15185: PPUSH
15186: CALL_OW 259
15190: PUSH
15191: LD_INT 10
15193: LESS
15194: IFFALSE 15257
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
15196: LD_VAR 0 3
15200: PUSH
15201: LD_VAR 0 1
15205: ARRAY
15206: PPUSH
15207: LD_VAR 0 1
15211: PUSH
15212: LD_INT 4
15214: MOD
15215: PUSH
15216: LD_INT 1
15218: PLUS
15219: PPUSH
15220: LD_VAR 0 3
15224: PUSH
15225: LD_VAR 0 1
15229: ARRAY
15230: PPUSH
15231: LD_VAR 0 1
15235: PUSH
15236: LD_INT 4
15238: MOD
15239: PUSH
15240: LD_INT 1
15242: PLUS
15243: PPUSH
15244: CALL_OW 259
15248: PUSH
15249: LD_INT 1
15251: PLUS
15252: PPUSH
15253: CALL_OW 237
15257: GO 15159
15259: POP
15260: POP
// end ;
15261: PPOPN 3
15263: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
15264: LD_EXP 53
15268: PUSH
15269: LD_EXP 61
15273: AND
15274: IFFALSE 15294
15276: GO 15278
15278: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
15279: LD_INT 4
15281: PPUSH
15282: LD_OWVAR 2
15286: PPUSH
15287: LD_INT 0
15289: PPUSH
15290: CALL_OW 324
15294: END
// every 0 0$1 trigger StreamModeActive and sShovel do
15295: LD_EXP 53
15299: PUSH
15300: LD_EXP 90
15304: AND
15305: IFFALSE 15325
15307: GO 15309
15309: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
15310: LD_INT 19
15312: PPUSH
15313: LD_OWVAR 2
15317: PPUSH
15318: LD_INT 0
15320: PPUSH
15321: CALL_OW 324
15325: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
15326: LD_EXP 53
15330: PUSH
15331: LD_EXP 62
15335: AND
15336: IFFALSE 15438
15338: GO 15340
15340: DISABLE
15341: LD_INT 0
15343: PPUSH
15344: PPUSH
// begin enable ;
15345: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
15346: LD_ADDR_VAR 0 2
15350: PUSH
15351: LD_INT 22
15353: PUSH
15354: LD_OWVAR 2
15358: PUSH
15359: EMPTY
15360: LIST
15361: LIST
15362: PUSH
15363: LD_INT 2
15365: PUSH
15366: LD_INT 34
15368: PUSH
15369: LD_INT 11
15371: PUSH
15372: EMPTY
15373: LIST
15374: LIST
15375: PUSH
15376: LD_INT 34
15378: PUSH
15379: LD_INT 30
15381: PUSH
15382: EMPTY
15383: LIST
15384: LIST
15385: PUSH
15386: EMPTY
15387: LIST
15388: LIST
15389: LIST
15390: PUSH
15391: EMPTY
15392: LIST
15393: LIST
15394: PPUSH
15395: CALL_OW 69
15399: ST_TO_ADDR
// if not tmp then
15400: LD_VAR 0 2
15404: NOT
15405: IFFALSE 15409
// exit ;
15407: GO 15438
// for i in tmp do
15409: LD_ADDR_VAR 0 1
15413: PUSH
15414: LD_VAR 0 2
15418: PUSH
15419: FOR_IN
15420: IFFALSE 15436
// begin SetLives ( i , 0 ) ;
15422: LD_VAR 0 1
15426: PPUSH
15427: LD_INT 0
15429: PPUSH
15430: CALL_OW 234
// end ;
15434: GO 15419
15436: POP
15437: POP
// end ;
15438: PPOPN 2
15440: END
// every 0 0$1 trigger StreamModeActive and sBunker do
15441: LD_EXP 53
15445: PUSH
15446: LD_EXP 63
15450: AND
15451: IFFALSE 15471
15453: GO 15455
15455: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
15456: LD_INT 32
15458: PPUSH
15459: LD_OWVAR 2
15463: PPUSH
15464: LD_INT 0
15466: PPUSH
15467: CALL_OW 324
15471: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
15472: LD_EXP 53
15476: PUSH
15477: LD_EXP 64
15481: AND
15482: IFFALSE 15663
15484: GO 15486
15486: DISABLE
15487: LD_INT 0
15489: PPUSH
15490: PPUSH
15491: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
15492: LD_ADDR_VAR 0 2
15496: PUSH
15497: LD_INT 22
15499: PUSH
15500: LD_OWVAR 2
15504: PUSH
15505: EMPTY
15506: LIST
15507: LIST
15508: PUSH
15509: LD_INT 33
15511: PUSH
15512: LD_INT 3
15514: PUSH
15515: EMPTY
15516: LIST
15517: LIST
15518: PUSH
15519: EMPTY
15520: LIST
15521: LIST
15522: PPUSH
15523: CALL_OW 69
15527: ST_TO_ADDR
// if not tmp then
15528: LD_VAR 0 2
15532: NOT
15533: IFFALSE 15537
// exit ;
15535: GO 15663
// side := 0 ;
15537: LD_ADDR_VAR 0 3
15541: PUSH
15542: LD_INT 0
15544: ST_TO_ADDR
// for i := 1 to 8 do
15545: LD_ADDR_VAR 0 1
15549: PUSH
15550: DOUBLE
15551: LD_INT 1
15553: DEC
15554: ST_TO_ADDR
15555: LD_INT 8
15557: PUSH
15558: FOR_TO
15559: IFFALSE 15607
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
15561: LD_OWVAR 2
15565: PUSH
15566: LD_VAR 0 1
15570: NONEQUAL
15571: PUSH
15572: LD_OWVAR 2
15576: PPUSH
15577: LD_VAR 0 1
15581: PPUSH
15582: CALL_OW 81
15586: PUSH
15587: LD_INT 2
15589: EQUAL
15590: AND
15591: IFFALSE 15605
// begin side := i ;
15593: LD_ADDR_VAR 0 3
15597: PUSH
15598: LD_VAR 0 1
15602: ST_TO_ADDR
// break ;
15603: GO 15607
// end ;
15605: GO 15558
15607: POP
15608: POP
// if not side then
15609: LD_VAR 0 3
15613: NOT
15614: IFFALSE 15618
// exit ;
15616: GO 15663
// for i := 1 to tmp do
15618: LD_ADDR_VAR 0 1
15622: PUSH
15623: DOUBLE
15624: LD_INT 1
15626: DEC
15627: ST_TO_ADDR
15628: LD_VAR 0 2
15632: PUSH
15633: FOR_TO
15634: IFFALSE 15661
// if Prob ( 60 ) then
15636: LD_INT 60
15638: PPUSH
15639: CALL_OW 13
15643: IFFALSE 15659
// SetSide ( i , side ) ;
15645: LD_VAR 0 1
15649: PPUSH
15650: LD_VAR 0 3
15654: PPUSH
15655: CALL_OW 235
15659: GO 15633
15661: POP
15662: POP
// end ;
15663: PPOPN 3
15665: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
15666: LD_EXP 53
15670: PUSH
15671: LD_EXP 66
15675: AND
15676: IFFALSE 15795
15678: GO 15680
15680: DISABLE
15681: LD_INT 0
15683: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
15684: LD_ADDR_VAR 0 1
15688: PUSH
15689: LD_INT 22
15691: PUSH
15692: LD_OWVAR 2
15696: PUSH
15697: EMPTY
15698: LIST
15699: LIST
15700: PUSH
15701: LD_INT 21
15703: PUSH
15704: LD_INT 1
15706: PUSH
15707: EMPTY
15708: LIST
15709: LIST
15710: PUSH
15711: LD_INT 3
15713: PUSH
15714: LD_INT 23
15716: PUSH
15717: LD_INT 0
15719: PUSH
15720: EMPTY
15721: LIST
15722: LIST
15723: PUSH
15724: EMPTY
15725: LIST
15726: LIST
15727: PUSH
15728: EMPTY
15729: LIST
15730: LIST
15731: LIST
15732: PPUSH
15733: CALL_OW 69
15737: PUSH
15738: FOR_IN
15739: IFFALSE 15793
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
15741: LD_VAR 0 1
15745: PPUSH
15746: CALL_OW 257
15750: PUSH
15751: LD_INT 1
15753: PUSH
15754: LD_INT 2
15756: PUSH
15757: LD_INT 3
15759: PUSH
15760: LD_INT 4
15762: PUSH
15763: EMPTY
15764: LIST
15765: LIST
15766: LIST
15767: LIST
15768: IN
15769: IFFALSE 15791
// SetClass ( un , rand ( 1 , 4 ) ) ;
15771: LD_VAR 0 1
15775: PPUSH
15776: LD_INT 1
15778: PPUSH
15779: LD_INT 4
15781: PPUSH
15782: CALL_OW 12
15786: PPUSH
15787: CALL_OW 336
15791: GO 15738
15793: POP
15794: POP
// end ;
15795: PPOPN 1
15797: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
15798: LD_EXP 53
15802: PUSH
15803: LD_EXP 65
15807: AND
15808: IFFALSE 15887
15810: GO 15812
15812: DISABLE
15813: LD_INT 0
15815: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
15816: LD_ADDR_VAR 0 1
15820: PUSH
15821: LD_INT 22
15823: PUSH
15824: LD_OWVAR 2
15828: PUSH
15829: EMPTY
15830: LIST
15831: LIST
15832: PUSH
15833: LD_INT 21
15835: PUSH
15836: LD_INT 3
15838: PUSH
15839: EMPTY
15840: LIST
15841: LIST
15842: PUSH
15843: EMPTY
15844: LIST
15845: LIST
15846: PPUSH
15847: CALL_OW 69
15851: ST_TO_ADDR
// if not tmp then
15852: LD_VAR 0 1
15856: NOT
15857: IFFALSE 15861
// exit ;
15859: GO 15887
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
15861: LD_VAR 0 1
15865: PUSH
15866: LD_INT 1
15868: PPUSH
15869: LD_VAR 0 1
15873: PPUSH
15874: CALL_OW 12
15878: ARRAY
15879: PPUSH
15880: LD_INT 100
15882: PPUSH
15883: CALL_OW 234
// end ;
15887: PPOPN 1
15889: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
15890: LD_EXP 53
15894: PUSH
15895: LD_EXP 67
15899: AND
15900: IFFALSE 15998
15902: GO 15904
15904: DISABLE
15905: LD_INT 0
15907: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15908: LD_ADDR_VAR 0 1
15912: PUSH
15913: LD_INT 22
15915: PUSH
15916: LD_OWVAR 2
15920: PUSH
15921: EMPTY
15922: LIST
15923: LIST
15924: PUSH
15925: LD_INT 21
15927: PUSH
15928: LD_INT 1
15930: PUSH
15931: EMPTY
15932: LIST
15933: LIST
15934: PUSH
15935: EMPTY
15936: LIST
15937: LIST
15938: PPUSH
15939: CALL_OW 69
15943: ST_TO_ADDR
// if not tmp then
15944: LD_VAR 0 1
15948: NOT
15949: IFFALSE 15953
// exit ;
15951: GO 15998
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
15953: LD_VAR 0 1
15957: PUSH
15958: LD_INT 1
15960: PPUSH
15961: LD_VAR 0 1
15965: PPUSH
15966: CALL_OW 12
15970: ARRAY
15971: PPUSH
15972: LD_INT 1
15974: PPUSH
15975: LD_INT 4
15977: PPUSH
15978: CALL_OW 12
15982: PPUSH
15983: LD_INT 3000
15985: PPUSH
15986: LD_INT 9000
15988: PPUSH
15989: CALL_OW 12
15993: PPUSH
15994: CALL_OW 492
// end ;
15998: PPOPN 1
16000: END
// every 0 0$1 trigger StreamModeActive and sDepot do
16001: LD_EXP 53
16005: PUSH
16006: LD_EXP 68
16010: AND
16011: IFFALSE 16031
16013: GO 16015
16015: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
16016: LD_INT 1
16018: PPUSH
16019: LD_OWVAR 2
16023: PPUSH
16024: LD_INT 0
16026: PPUSH
16027: CALL_OW 324
16031: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
16032: LD_EXP 53
16036: PUSH
16037: LD_EXP 69
16041: AND
16042: IFFALSE 16125
16044: GO 16046
16046: DISABLE
16047: LD_INT 0
16049: PPUSH
16050: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
16051: LD_ADDR_VAR 0 2
16055: PUSH
16056: LD_INT 22
16058: PUSH
16059: LD_OWVAR 2
16063: PUSH
16064: EMPTY
16065: LIST
16066: LIST
16067: PUSH
16068: LD_INT 21
16070: PUSH
16071: LD_INT 3
16073: PUSH
16074: EMPTY
16075: LIST
16076: LIST
16077: PUSH
16078: EMPTY
16079: LIST
16080: LIST
16081: PPUSH
16082: CALL_OW 69
16086: ST_TO_ADDR
// if not tmp then
16087: LD_VAR 0 2
16091: NOT
16092: IFFALSE 16096
// exit ;
16094: GO 16125
// for i in tmp do
16096: LD_ADDR_VAR 0 1
16100: PUSH
16101: LD_VAR 0 2
16105: PUSH
16106: FOR_IN
16107: IFFALSE 16123
// SetBLevel ( i , 10 ) ;
16109: LD_VAR 0 1
16113: PPUSH
16114: LD_INT 10
16116: PPUSH
16117: CALL_OW 241
16121: GO 16106
16123: POP
16124: POP
// end ;
16125: PPOPN 2
16127: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
16128: LD_EXP 53
16132: PUSH
16133: LD_EXP 70
16137: AND
16138: IFFALSE 16249
16140: GO 16142
16142: DISABLE
16143: LD_INT 0
16145: PPUSH
16146: PPUSH
16147: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16148: LD_ADDR_VAR 0 3
16152: PUSH
16153: LD_INT 22
16155: PUSH
16156: LD_OWVAR 2
16160: PUSH
16161: EMPTY
16162: LIST
16163: LIST
16164: PUSH
16165: LD_INT 25
16167: PUSH
16168: LD_INT 1
16170: PUSH
16171: EMPTY
16172: LIST
16173: LIST
16174: PUSH
16175: EMPTY
16176: LIST
16177: LIST
16178: PPUSH
16179: CALL_OW 69
16183: ST_TO_ADDR
// if not tmp then
16184: LD_VAR 0 3
16188: NOT
16189: IFFALSE 16193
// exit ;
16191: GO 16249
// un := tmp [ rand ( 1 , tmp ) ] ;
16193: LD_ADDR_VAR 0 2
16197: PUSH
16198: LD_VAR 0 3
16202: PUSH
16203: LD_INT 1
16205: PPUSH
16206: LD_VAR 0 3
16210: PPUSH
16211: CALL_OW 12
16215: ARRAY
16216: ST_TO_ADDR
// if Crawls ( un ) then
16217: LD_VAR 0 2
16221: PPUSH
16222: CALL_OW 318
16226: IFFALSE 16237
// ComWalk ( un ) ;
16228: LD_VAR 0 2
16232: PPUSH
16233: CALL_OW 138
// SetClass ( un , class_sniper ) ;
16237: LD_VAR 0 2
16241: PPUSH
16242: LD_INT 5
16244: PPUSH
16245: CALL_OW 336
// end ;
16249: PPOPN 3
16251: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
16252: LD_EXP 53
16256: PUSH
16257: LD_EXP 71
16261: AND
16262: PUSH
16263: LD_OWVAR 67
16267: PUSH
16268: LD_INT 4
16270: LESS
16271: AND
16272: IFFALSE 16291
16274: GO 16276
16276: DISABLE
// begin Difficulty := Difficulty + 1 ;
16277: LD_ADDR_OWVAR 67
16281: PUSH
16282: LD_OWVAR 67
16286: PUSH
16287: LD_INT 1
16289: PLUS
16290: ST_TO_ADDR
// end ;
16291: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
16292: LD_EXP 53
16296: PUSH
16297: LD_EXP 72
16301: AND
16302: IFFALSE 16405
16304: GO 16306
16306: DISABLE
16307: LD_INT 0
16309: PPUSH
// begin for i := 1 to 5 do
16310: LD_ADDR_VAR 0 1
16314: PUSH
16315: DOUBLE
16316: LD_INT 1
16318: DEC
16319: ST_TO_ADDR
16320: LD_INT 5
16322: PUSH
16323: FOR_TO
16324: IFFALSE 16403
// begin uc_nation := nation_nature ;
16326: LD_ADDR_OWVAR 21
16330: PUSH
16331: LD_INT 0
16333: ST_TO_ADDR
// uc_side := 0 ;
16334: LD_ADDR_OWVAR 20
16338: PUSH
16339: LD_INT 0
16341: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
16342: LD_ADDR_OWVAR 29
16346: PUSH
16347: LD_INT 12
16349: PUSH
16350: LD_INT 12
16352: PUSH
16353: EMPTY
16354: LIST
16355: LIST
16356: ST_TO_ADDR
// hc_agressivity := 20 ;
16357: LD_ADDR_OWVAR 35
16361: PUSH
16362: LD_INT 20
16364: ST_TO_ADDR
// hc_class := class_tiger ;
16365: LD_ADDR_OWVAR 28
16369: PUSH
16370: LD_INT 14
16372: ST_TO_ADDR
// hc_gallery :=  ;
16373: LD_ADDR_OWVAR 33
16377: PUSH
16378: LD_STRING 
16380: ST_TO_ADDR
// hc_name :=  ;
16381: LD_ADDR_OWVAR 26
16385: PUSH
16386: LD_STRING 
16388: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
16389: CALL_OW 44
16393: PPUSH
16394: LD_INT 0
16396: PPUSH
16397: CALL_OW 51
// end ;
16401: GO 16323
16403: POP
16404: POP
// end ;
16405: PPOPN 1
16407: END
// every 0 0$1 trigger StreamModeActive and sBomb do
16408: LD_EXP 53
16412: PUSH
16413: LD_EXP 73
16417: AND
16418: IFFALSE 16427
16420: GO 16422
16422: DISABLE
// StreamSibBomb ;
16423: CALL 16428 0 0
16427: END
// export function StreamSibBomb ; var i , x , y ; begin
16428: LD_INT 0
16430: PPUSH
16431: PPUSH
16432: PPUSH
16433: PPUSH
// result := false ;
16434: LD_ADDR_VAR 0 1
16438: PUSH
16439: LD_INT 0
16441: ST_TO_ADDR
// for i := 1 to 16 do
16442: LD_ADDR_VAR 0 2
16446: PUSH
16447: DOUBLE
16448: LD_INT 1
16450: DEC
16451: ST_TO_ADDR
16452: LD_INT 16
16454: PUSH
16455: FOR_TO
16456: IFFALSE 16655
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
16458: LD_ADDR_VAR 0 3
16462: PUSH
16463: LD_INT 10
16465: PUSH
16466: LD_INT 20
16468: PUSH
16469: LD_INT 30
16471: PUSH
16472: LD_INT 40
16474: PUSH
16475: LD_INT 50
16477: PUSH
16478: LD_INT 60
16480: PUSH
16481: LD_INT 70
16483: PUSH
16484: LD_INT 80
16486: PUSH
16487: LD_INT 90
16489: PUSH
16490: LD_INT 100
16492: PUSH
16493: LD_INT 110
16495: PUSH
16496: LD_INT 120
16498: PUSH
16499: LD_INT 130
16501: PUSH
16502: LD_INT 140
16504: PUSH
16505: LD_INT 150
16507: PUSH
16508: EMPTY
16509: LIST
16510: LIST
16511: LIST
16512: LIST
16513: LIST
16514: LIST
16515: LIST
16516: LIST
16517: LIST
16518: LIST
16519: LIST
16520: LIST
16521: LIST
16522: LIST
16523: LIST
16524: PUSH
16525: LD_INT 1
16527: PPUSH
16528: LD_INT 15
16530: PPUSH
16531: CALL_OW 12
16535: ARRAY
16536: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
16537: LD_ADDR_VAR 0 4
16541: PUSH
16542: LD_INT 10
16544: PUSH
16545: LD_INT 20
16547: PUSH
16548: LD_INT 30
16550: PUSH
16551: LD_INT 40
16553: PUSH
16554: LD_INT 50
16556: PUSH
16557: LD_INT 60
16559: PUSH
16560: LD_INT 70
16562: PUSH
16563: LD_INT 80
16565: PUSH
16566: LD_INT 90
16568: PUSH
16569: LD_INT 100
16571: PUSH
16572: LD_INT 110
16574: PUSH
16575: LD_INT 120
16577: PUSH
16578: LD_INT 130
16580: PUSH
16581: LD_INT 140
16583: PUSH
16584: LD_INT 150
16586: PUSH
16587: EMPTY
16588: LIST
16589: LIST
16590: LIST
16591: LIST
16592: LIST
16593: LIST
16594: LIST
16595: LIST
16596: LIST
16597: LIST
16598: LIST
16599: LIST
16600: LIST
16601: LIST
16602: LIST
16603: PUSH
16604: LD_INT 1
16606: PPUSH
16607: LD_INT 15
16609: PPUSH
16610: CALL_OW 12
16614: ARRAY
16615: ST_TO_ADDR
// if ValidHex ( x , y ) then
16616: LD_VAR 0 3
16620: PPUSH
16621: LD_VAR 0 4
16625: PPUSH
16626: CALL_OW 488
16630: IFFALSE 16653
// begin result := [ x , y ] ;
16632: LD_ADDR_VAR 0 1
16636: PUSH
16637: LD_VAR 0 3
16641: PUSH
16642: LD_VAR 0 4
16646: PUSH
16647: EMPTY
16648: LIST
16649: LIST
16650: ST_TO_ADDR
// break ;
16651: GO 16655
// end ; end ;
16653: GO 16455
16655: POP
16656: POP
// if result then
16657: LD_VAR 0 1
16661: IFFALSE 16721
// begin ToLua ( playSibBomb() ) ;
16663: LD_STRING playSibBomb()
16665: PPUSH
16666: CALL_OW 559
// wait ( 0 0$14 ) ;
16670: LD_INT 490
16672: PPUSH
16673: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
16677: LD_VAR 0 1
16681: PUSH
16682: LD_INT 1
16684: ARRAY
16685: PPUSH
16686: LD_VAR 0 1
16690: PUSH
16691: LD_INT 2
16693: ARRAY
16694: PPUSH
16695: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
16699: LD_VAR 0 1
16703: PUSH
16704: LD_INT 1
16706: ARRAY
16707: PPUSH
16708: LD_VAR 0 1
16712: PUSH
16713: LD_INT 2
16715: ARRAY
16716: PPUSH
16717: CALL_OW 429
// end ; end ;
16721: LD_VAR 0 1
16725: RET
// every 0 0$1 trigger StreamModeActive and sReset do
16726: LD_EXP 53
16730: PUSH
16731: LD_EXP 75
16735: AND
16736: IFFALSE 16748
16738: GO 16740
16740: DISABLE
// YouLost (  ) ;
16741: LD_STRING 
16743: PPUSH
16744: CALL_OW 104
16748: END
// every 0 0$1 trigger StreamModeActive and sFog do
16749: LD_EXP 53
16753: PUSH
16754: LD_EXP 74
16758: AND
16759: IFFALSE 16773
16761: GO 16763
16763: DISABLE
// FogOff ( your_side ) ;
16764: LD_OWVAR 2
16768: PPUSH
16769: CALL_OW 344
16773: END
// every 0 0$1 trigger StreamModeActive and sSun do
16774: LD_EXP 53
16778: PUSH
16779: LD_EXP 76
16783: AND
16784: IFFALSE 16812
16786: GO 16788
16788: DISABLE
// begin solar_recharge_percent := 0 ;
16789: LD_ADDR_OWVAR 79
16793: PUSH
16794: LD_INT 0
16796: ST_TO_ADDR
// wait ( 5 5$00 ) ;
16797: LD_INT 10500
16799: PPUSH
16800: CALL_OW 67
// solar_recharge_percent := 100 ;
16804: LD_ADDR_OWVAR 79
16808: PUSH
16809: LD_INT 100
16811: ST_TO_ADDR
// end ;
16812: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
16813: LD_EXP 53
16817: PUSH
16818: LD_EXP 77
16822: AND
16823: IFFALSE 17062
16825: GO 16827
16827: DISABLE
16828: LD_INT 0
16830: PPUSH
16831: PPUSH
16832: PPUSH
// begin tmp := [ ] ;
16833: LD_ADDR_VAR 0 3
16837: PUSH
16838: EMPTY
16839: ST_TO_ADDR
// for i := 1 to 6 do
16840: LD_ADDR_VAR 0 1
16844: PUSH
16845: DOUBLE
16846: LD_INT 1
16848: DEC
16849: ST_TO_ADDR
16850: LD_INT 6
16852: PUSH
16853: FOR_TO
16854: IFFALSE 16959
// begin uc_nation := nation_nature ;
16856: LD_ADDR_OWVAR 21
16860: PUSH
16861: LD_INT 0
16863: ST_TO_ADDR
// uc_side := 0 ;
16864: LD_ADDR_OWVAR 20
16868: PUSH
16869: LD_INT 0
16871: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
16872: LD_ADDR_OWVAR 29
16876: PUSH
16877: LD_INT 12
16879: PUSH
16880: LD_INT 12
16882: PUSH
16883: EMPTY
16884: LIST
16885: LIST
16886: ST_TO_ADDR
// hc_agressivity := 20 ;
16887: LD_ADDR_OWVAR 35
16891: PUSH
16892: LD_INT 20
16894: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
16895: LD_ADDR_OWVAR 28
16899: PUSH
16900: LD_INT 17
16902: ST_TO_ADDR
// hc_gallery :=  ;
16903: LD_ADDR_OWVAR 33
16907: PUSH
16908: LD_STRING 
16910: ST_TO_ADDR
// hc_name :=  ;
16911: LD_ADDR_OWVAR 26
16915: PUSH
16916: LD_STRING 
16918: ST_TO_ADDR
// un := CreateHuman ;
16919: LD_ADDR_VAR 0 2
16923: PUSH
16924: CALL_OW 44
16928: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
16929: LD_VAR 0 2
16933: PPUSH
16934: LD_INT 1
16936: PPUSH
16937: CALL_OW 51
// tmp := tmp ^ un ;
16941: LD_ADDR_VAR 0 3
16945: PUSH
16946: LD_VAR 0 3
16950: PUSH
16951: LD_VAR 0 2
16955: ADD
16956: ST_TO_ADDR
// end ;
16957: GO 16853
16959: POP
16960: POP
// repeat wait ( 0 0$1 ) ;
16961: LD_INT 35
16963: PPUSH
16964: CALL_OW 67
// for un in tmp do
16968: LD_ADDR_VAR 0 2
16972: PUSH
16973: LD_VAR 0 3
16977: PUSH
16978: FOR_IN
16979: IFFALSE 17053
// begin if IsDead ( un ) then
16981: LD_VAR 0 2
16985: PPUSH
16986: CALL_OW 301
16990: IFFALSE 17010
// begin tmp := tmp diff un ;
16992: LD_ADDR_VAR 0 3
16996: PUSH
16997: LD_VAR 0 3
17001: PUSH
17002: LD_VAR 0 2
17006: DIFF
17007: ST_TO_ADDR
// continue ;
17008: GO 16978
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
17010: LD_VAR 0 2
17014: PPUSH
17015: LD_INT 3
17017: PUSH
17018: LD_INT 22
17020: PUSH
17021: LD_INT 0
17023: PUSH
17024: EMPTY
17025: LIST
17026: LIST
17027: PUSH
17028: EMPTY
17029: LIST
17030: LIST
17031: PPUSH
17032: CALL_OW 69
17036: PPUSH
17037: LD_VAR 0 2
17041: PPUSH
17042: CALL_OW 74
17046: PPUSH
17047: CALL_OW 115
// end ;
17051: GO 16978
17053: POP
17054: POP
// until not tmp ;
17055: LD_VAR 0 3
17059: NOT
17060: IFFALSE 16961
// end ;
17062: PPOPN 3
17064: END
// every 0 0$1 trigger StreamModeActive and sTroll do
17065: LD_EXP 53
17069: PUSH
17070: LD_EXP 78
17074: AND
17075: IFFALSE 17129
17077: GO 17079
17079: DISABLE
// begin ToLua ( displayTroll(); ) ;
17080: LD_STRING displayTroll();
17082: PPUSH
17083: CALL_OW 559
// wait ( 3 3$00 ) ;
17087: LD_INT 6300
17089: PPUSH
17090: CALL_OW 67
// ToLua ( hideTroll(); ) ;
17094: LD_STRING hideTroll();
17096: PPUSH
17097: CALL_OW 559
// wait ( 1 1$00 ) ;
17101: LD_INT 2100
17103: PPUSH
17104: CALL_OW 67
// ToLua ( displayTroll(); ) ;
17108: LD_STRING displayTroll();
17110: PPUSH
17111: CALL_OW 559
// wait ( 1 1$00 ) ;
17115: LD_INT 2100
17117: PPUSH
17118: CALL_OW 67
// ToLua ( hideTroll(); ) ;
17122: LD_STRING hideTroll();
17124: PPUSH
17125: CALL_OW 559
// end ;
17129: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
17130: LD_EXP 53
17134: PUSH
17135: LD_EXP 79
17139: AND
17140: IFFALSE 17203
17142: GO 17144
17144: DISABLE
17145: LD_INT 0
17147: PPUSH
// begin p := 0 ;
17148: LD_ADDR_VAR 0 1
17152: PUSH
17153: LD_INT 0
17155: ST_TO_ADDR
// repeat game_speed := 1 ;
17156: LD_ADDR_OWVAR 65
17160: PUSH
17161: LD_INT 1
17163: ST_TO_ADDR
// wait ( 0 0$1 ) ;
17164: LD_INT 35
17166: PPUSH
17167: CALL_OW 67
// p := p + 1 ;
17171: LD_ADDR_VAR 0 1
17175: PUSH
17176: LD_VAR 0 1
17180: PUSH
17181: LD_INT 1
17183: PLUS
17184: ST_TO_ADDR
// until p >= 60 ;
17185: LD_VAR 0 1
17189: PUSH
17190: LD_INT 60
17192: GREATEREQUAL
17193: IFFALSE 17156
// game_speed := 4 ;
17195: LD_ADDR_OWVAR 65
17199: PUSH
17200: LD_INT 4
17202: ST_TO_ADDR
// end ;
17203: PPOPN 1
17205: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
17206: LD_EXP 53
17210: PUSH
17211: LD_EXP 80
17215: AND
17216: IFFALSE 17362
17218: GO 17220
17220: DISABLE
17221: LD_INT 0
17223: PPUSH
17224: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17225: LD_ADDR_VAR 0 1
17229: PUSH
17230: LD_INT 22
17232: PUSH
17233: LD_OWVAR 2
17237: PUSH
17238: EMPTY
17239: LIST
17240: LIST
17241: PUSH
17242: LD_INT 2
17244: PUSH
17245: LD_INT 30
17247: PUSH
17248: LD_INT 0
17250: PUSH
17251: EMPTY
17252: LIST
17253: LIST
17254: PUSH
17255: LD_INT 30
17257: PUSH
17258: LD_INT 1
17260: PUSH
17261: EMPTY
17262: LIST
17263: LIST
17264: PUSH
17265: EMPTY
17266: LIST
17267: LIST
17268: LIST
17269: PUSH
17270: EMPTY
17271: LIST
17272: LIST
17273: PPUSH
17274: CALL_OW 69
17278: ST_TO_ADDR
// if not depot then
17279: LD_VAR 0 1
17283: NOT
17284: IFFALSE 17288
// exit ;
17286: GO 17362
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
17288: LD_ADDR_VAR 0 2
17292: PUSH
17293: LD_VAR 0 1
17297: PUSH
17298: LD_INT 1
17300: PPUSH
17301: LD_VAR 0 1
17305: PPUSH
17306: CALL_OW 12
17310: ARRAY
17311: PPUSH
17312: CALL_OW 274
17316: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
17317: LD_VAR 0 2
17321: PPUSH
17322: LD_INT 1
17324: PPUSH
17325: LD_INT 0
17327: PPUSH
17328: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
17332: LD_VAR 0 2
17336: PPUSH
17337: LD_INT 2
17339: PPUSH
17340: LD_INT 0
17342: PPUSH
17343: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
17347: LD_VAR 0 2
17351: PPUSH
17352: LD_INT 3
17354: PPUSH
17355: LD_INT 0
17357: PPUSH
17358: CALL_OW 277
// end ;
17362: PPOPN 2
17364: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
17365: LD_EXP 53
17369: PUSH
17370: LD_EXP 81
17374: AND
17375: IFFALSE 17472
17377: GO 17379
17379: DISABLE
17380: LD_INT 0
17382: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17383: LD_ADDR_VAR 0 1
17387: PUSH
17388: LD_INT 22
17390: PUSH
17391: LD_OWVAR 2
17395: PUSH
17396: EMPTY
17397: LIST
17398: LIST
17399: PUSH
17400: LD_INT 21
17402: PUSH
17403: LD_INT 1
17405: PUSH
17406: EMPTY
17407: LIST
17408: LIST
17409: PUSH
17410: LD_INT 3
17412: PUSH
17413: LD_INT 23
17415: PUSH
17416: LD_INT 0
17418: PUSH
17419: EMPTY
17420: LIST
17421: LIST
17422: PUSH
17423: EMPTY
17424: LIST
17425: LIST
17426: PUSH
17427: EMPTY
17428: LIST
17429: LIST
17430: LIST
17431: PPUSH
17432: CALL_OW 69
17436: ST_TO_ADDR
// if not tmp then
17437: LD_VAR 0 1
17441: NOT
17442: IFFALSE 17446
// exit ;
17444: GO 17472
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
17446: LD_VAR 0 1
17450: PUSH
17451: LD_INT 1
17453: PPUSH
17454: LD_VAR 0 1
17458: PPUSH
17459: CALL_OW 12
17463: ARRAY
17464: PPUSH
17465: LD_INT 200
17467: PPUSH
17468: CALL_OW 234
// end ;
17472: PPOPN 1
17474: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
17475: LD_EXP 53
17479: PUSH
17480: LD_EXP 82
17484: AND
17485: IFFALSE 17564
17487: GO 17489
17489: DISABLE
17490: LD_INT 0
17492: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
17493: LD_ADDR_VAR 0 1
17497: PUSH
17498: LD_INT 22
17500: PUSH
17501: LD_OWVAR 2
17505: PUSH
17506: EMPTY
17507: LIST
17508: LIST
17509: PUSH
17510: LD_INT 21
17512: PUSH
17513: LD_INT 2
17515: PUSH
17516: EMPTY
17517: LIST
17518: LIST
17519: PUSH
17520: EMPTY
17521: LIST
17522: LIST
17523: PPUSH
17524: CALL_OW 69
17528: ST_TO_ADDR
// if not tmp then
17529: LD_VAR 0 1
17533: NOT
17534: IFFALSE 17538
// exit ;
17536: GO 17564
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
17538: LD_VAR 0 1
17542: PUSH
17543: LD_INT 1
17545: PPUSH
17546: LD_VAR 0 1
17550: PPUSH
17551: CALL_OW 12
17555: ARRAY
17556: PPUSH
17557: LD_INT 60
17559: PPUSH
17560: CALL_OW 234
// end ;
17564: PPOPN 1
17566: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
17567: LD_EXP 53
17571: PUSH
17572: LD_EXP 83
17576: AND
17577: IFFALSE 17676
17579: GO 17581
17581: DISABLE
17582: LD_INT 0
17584: PPUSH
17585: PPUSH
// begin enable ;
17586: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
17587: LD_ADDR_VAR 0 1
17591: PUSH
17592: LD_INT 22
17594: PUSH
17595: LD_OWVAR 2
17599: PUSH
17600: EMPTY
17601: LIST
17602: LIST
17603: PUSH
17604: LD_INT 61
17606: PUSH
17607: EMPTY
17608: LIST
17609: PUSH
17610: LD_INT 33
17612: PUSH
17613: LD_INT 2
17615: PUSH
17616: EMPTY
17617: LIST
17618: LIST
17619: PUSH
17620: EMPTY
17621: LIST
17622: LIST
17623: LIST
17624: PPUSH
17625: CALL_OW 69
17629: ST_TO_ADDR
// if not tmp then
17630: LD_VAR 0 1
17634: NOT
17635: IFFALSE 17639
// exit ;
17637: GO 17676
// for i in tmp do
17639: LD_ADDR_VAR 0 2
17643: PUSH
17644: LD_VAR 0 1
17648: PUSH
17649: FOR_IN
17650: IFFALSE 17674
// if IsControledBy ( i ) then
17652: LD_VAR 0 2
17656: PPUSH
17657: CALL_OW 312
17661: IFFALSE 17672
// ComUnlink ( i ) ;
17663: LD_VAR 0 2
17667: PPUSH
17668: CALL_OW 136
17672: GO 17649
17674: POP
17675: POP
// end ;
17676: PPOPN 2
17678: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
17679: LD_EXP 53
17683: PUSH
17684: LD_EXP 84
17688: AND
17689: IFFALSE 17829
17691: GO 17693
17693: DISABLE
17694: LD_INT 0
17696: PPUSH
17697: PPUSH
// begin ToLua ( displayPowell(); ) ;
17698: LD_STRING displayPowell();
17700: PPUSH
17701: CALL_OW 559
// uc_side := 0 ;
17705: LD_ADDR_OWVAR 20
17709: PUSH
17710: LD_INT 0
17712: ST_TO_ADDR
// uc_nation := 2 ;
17713: LD_ADDR_OWVAR 21
17717: PUSH
17718: LD_INT 2
17720: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
17721: LD_ADDR_OWVAR 37
17725: PUSH
17726: LD_INT 14
17728: ST_TO_ADDR
// vc_engine := engine_siberite ;
17729: LD_ADDR_OWVAR 39
17733: PUSH
17734: LD_INT 3
17736: ST_TO_ADDR
// vc_control := control_apeman ;
17737: LD_ADDR_OWVAR 38
17741: PUSH
17742: LD_INT 5
17744: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
17745: LD_ADDR_OWVAR 40
17749: PUSH
17750: LD_INT 29
17752: ST_TO_ADDR
// un := CreateVehicle ;
17753: LD_ADDR_VAR 0 2
17757: PUSH
17758: CALL_OW 45
17762: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17763: LD_VAR 0 2
17767: PPUSH
17768: LD_INT 1
17770: PPUSH
17771: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
17775: LD_INT 35
17777: PPUSH
17778: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
17782: LD_VAR 0 2
17786: PPUSH
17787: LD_INT 22
17789: PUSH
17790: LD_OWVAR 2
17794: PUSH
17795: EMPTY
17796: LIST
17797: LIST
17798: PPUSH
17799: CALL_OW 69
17803: PPUSH
17804: LD_VAR 0 2
17808: PPUSH
17809: CALL_OW 74
17813: PPUSH
17814: CALL_OW 115
// until IsDead ( un ) ;
17818: LD_VAR 0 2
17822: PPUSH
17823: CALL_OW 301
17827: IFFALSE 17775
// end ;
17829: PPOPN 2
17831: END
// every 0 0$1 trigger StreamModeActive and sStu do
17832: LD_EXP 53
17836: PUSH
17837: LD_EXP 92
17841: AND
17842: IFFALSE 17858
17844: GO 17846
17846: DISABLE
// begin ToLua ( displayStucuk(); ) ;
17847: LD_STRING displayStucuk();
17849: PPUSH
17850: CALL_OW 559
// ResetFog ;
17854: CALL_OW 335
// end ;
17858: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
17859: LD_EXP 53
17863: PUSH
17864: LD_EXP 85
17868: AND
17869: IFFALSE 18010
17871: GO 17873
17873: DISABLE
17874: LD_INT 0
17876: PPUSH
17877: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17878: LD_ADDR_VAR 0 2
17882: PUSH
17883: LD_INT 22
17885: PUSH
17886: LD_OWVAR 2
17890: PUSH
17891: EMPTY
17892: LIST
17893: LIST
17894: PUSH
17895: LD_INT 21
17897: PUSH
17898: LD_INT 1
17900: PUSH
17901: EMPTY
17902: LIST
17903: LIST
17904: PUSH
17905: EMPTY
17906: LIST
17907: LIST
17908: PPUSH
17909: CALL_OW 69
17913: ST_TO_ADDR
// if not tmp then
17914: LD_VAR 0 2
17918: NOT
17919: IFFALSE 17923
// exit ;
17921: GO 18010
// un := tmp [ rand ( 1 , tmp ) ] ;
17923: LD_ADDR_VAR 0 1
17927: PUSH
17928: LD_VAR 0 2
17932: PUSH
17933: LD_INT 1
17935: PPUSH
17936: LD_VAR 0 2
17940: PPUSH
17941: CALL_OW 12
17945: ARRAY
17946: ST_TO_ADDR
// SetSide ( un , 0 ) ;
17947: LD_VAR 0 1
17951: PPUSH
17952: LD_INT 0
17954: PPUSH
17955: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
17959: LD_VAR 0 1
17963: PPUSH
17964: LD_OWVAR 3
17968: PUSH
17969: LD_VAR 0 1
17973: DIFF
17974: PPUSH
17975: LD_VAR 0 1
17979: PPUSH
17980: CALL_OW 74
17984: PPUSH
17985: CALL_OW 115
// wait ( 0 0$20 ) ;
17989: LD_INT 700
17991: PPUSH
17992: CALL_OW 67
// SetSide ( un , your_side ) ;
17996: LD_VAR 0 1
18000: PPUSH
18001: LD_OWVAR 2
18005: PPUSH
18006: CALL_OW 235
// end ;
18010: PPOPN 2
18012: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
18013: LD_EXP 53
18017: PUSH
18018: LD_EXP 86
18022: AND
18023: IFFALSE 18129
18025: GO 18027
18027: DISABLE
18028: LD_INT 0
18030: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18031: LD_ADDR_VAR 0 1
18035: PUSH
18036: LD_INT 22
18038: PUSH
18039: LD_OWVAR 2
18043: PUSH
18044: EMPTY
18045: LIST
18046: LIST
18047: PUSH
18048: LD_INT 2
18050: PUSH
18051: LD_INT 30
18053: PUSH
18054: LD_INT 0
18056: PUSH
18057: EMPTY
18058: LIST
18059: LIST
18060: PUSH
18061: LD_INT 30
18063: PUSH
18064: LD_INT 1
18066: PUSH
18067: EMPTY
18068: LIST
18069: LIST
18070: PUSH
18071: EMPTY
18072: LIST
18073: LIST
18074: LIST
18075: PUSH
18076: EMPTY
18077: LIST
18078: LIST
18079: PPUSH
18080: CALL_OW 69
18084: ST_TO_ADDR
// if not depot then
18085: LD_VAR 0 1
18089: NOT
18090: IFFALSE 18094
// exit ;
18092: GO 18129
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
18094: LD_VAR 0 1
18098: PUSH
18099: LD_INT 1
18101: ARRAY
18102: PPUSH
18103: CALL_OW 250
18107: PPUSH
18108: LD_VAR 0 1
18112: PUSH
18113: LD_INT 1
18115: ARRAY
18116: PPUSH
18117: CALL_OW 251
18121: PPUSH
18122: LD_INT 70
18124: PPUSH
18125: CALL_OW 495
// end ;
18129: PPOPN 1
18131: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
18132: LD_EXP 53
18136: PUSH
18137: LD_EXP 87
18141: AND
18142: IFFALSE 18353
18144: GO 18146
18146: DISABLE
18147: LD_INT 0
18149: PPUSH
18150: PPUSH
18151: PPUSH
18152: PPUSH
18153: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18154: LD_ADDR_VAR 0 5
18158: PUSH
18159: LD_INT 22
18161: PUSH
18162: LD_OWVAR 2
18166: PUSH
18167: EMPTY
18168: LIST
18169: LIST
18170: PUSH
18171: LD_INT 21
18173: PUSH
18174: LD_INT 1
18176: PUSH
18177: EMPTY
18178: LIST
18179: LIST
18180: PUSH
18181: EMPTY
18182: LIST
18183: LIST
18184: PPUSH
18185: CALL_OW 69
18189: ST_TO_ADDR
// if not tmp then
18190: LD_VAR 0 5
18194: NOT
18195: IFFALSE 18199
// exit ;
18197: GO 18353
// for i in tmp do
18199: LD_ADDR_VAR 0 1
18203: PUSH
18204: LD_VAR 0 5
18208: PUSH
18209: FOR_IN
18210: IFFALSE 18351
// begin d := rand ( 0 , 5 ) ;
18212: LD_ADDR_VAR 0 4
18216: PUSH
18217: LD_INT 0
18219: PPUSH
18220: LD_INT 5
18222: PPUSH
18223: CALL_OW 12
18227: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
18228: LD_ADDR_VAR 0 2
18232: PUSH
18233: LD_VAR 0 1
18237: PPUSH
18238: CALL_OW 250
18242: PPUSH
18243: LD_VAR 0 4
18247: PPUSH
18248: LD_INT 3
18250: PPUSH
18251: LD_INT 12
18253: PPUSH
18254: CALL_OW 12
18258: PPUSH
18259: CALL_OW 272
18263: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
18264: LD_ADDR_VAR 0 3
18268: PUSH
18269: LD_VAR 0 1
18273: PPUSH
18274: CALL_OW 251
18278: PPUSH
18279: LD_VAR 0 4
18283: PPUSH
18284: LD_INT 3
18286: PPUSH
18287: LD_INT 12
18289: PPUSH
18290: CALL_OW 12
18294: PPUSH
18295: CALL_OW 273
18299: ST_TO_ADDR
// if ValidHex ( x , y ) then
18300: LD_VAR 0 2
18304: PPUSH
18305: LD_VAR 0 3
18309: PPUSH
18310: CALL_OW 488
18314: IFFALSE 18349
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
18316: LD_VAR 0 1
18320: PPUSH
18321: LD_VAR 0 2
18325: PPUSH
18326: LD_VAR 0 3
18330: PPUSH
18331: LD_INT 3
18333: PPUSH
18334: LD_INT 6
18336: PPUSH
18337: CALL_OW 12
18341: PPUSH
18342: LD_INT 1
18344: PPUSH
18345: CALL_OW 483
// end ;
18349: GO 18209
18351: POP
18352: POP
// end ;
18353: PPOPN 5
18355: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
18356: LD_EXP 53
18360: PUSH
18361: LD_EXP 88
18365: AND
18366: IFFALSE 18460
18368: GO 18370
18370: DISABLE
18371: LD_INT 0
18373: PPUSH
18374: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
18375: LD_ADDR_VAR 0 2
18379: PUSH
18380: LD_INT 22
18382: PUSH
18383: LD_OWVAR 2
18387: PUSH
18388: EMPTY
18389: LIST
18390: LIST
18391: PUSH
18392: LD_INT 32
18394: PUSH
18395: LD_INT 1
18397: PUSH
18398: EMPTY
18399: LIST
18400: LIST
18401: PUSH
18402: LD_INT 21
18404: PUSH
18405: LD_INT 2
18407: PUSH
18408: EMPTY
18409: LIST
18410: LIST
18411: PUSH
18412: EMPTY
18413: LIST
18414: LIST
18415: LIST
18416: PPUSH
18417: CALL_OW 69
18421: ST_TO_ADDR
// if not tmp then
18422: LD_VAR 0 2
18426: NOT
18427: IFFALSE 18431
// exit ;
18429: GO 18460
// for i in tmp do
18431: LD_ADDR_VAR 0 1
18435: PUSH
18436: LD_VAR 0 2
18440: PUSH
18441: FOR_IN
18442: IFFALSE 18458
// SetFuel ( i , 0 ) ;
18444: LD_VAR 0 1
18448: PPUSH
18449: LD_INT 0
18451: PPUSH
18452: CALL_OW 240
18456: GO 18441
18458: POP
18459: POP
// end ;
18460: PPOPN 2
18462: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
18463: LD_EXP 53
18467: PUSH
18468: LD_EXP 89
18472: AND
18473: IFFALSE 18539
18475: GO 18477
18477: DISABLE
18478: LD_INT 0
18480: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
18481: LD_ADDR_VAR 0 1
18485: PUSH
18486: LD_INT 22
18488: PUSH
18489: LD_OWVAR 2
18493: PUSH
18494: EMPTY
18495: LIST
18496: LIST
18497: PUSH
18498: LD_INT 30
18500: PUSH
18501: LD_INT 29
18503: PUSH
18504: EMPTY
18505: LIST
18506: LIST
18507: PUSH
18508: EMPTY
18509: LIST
18510: LIST
18511: PPUSH
18512: CALL_OW 69
18516: ST_TO_ADDR
// if not tmp then
18517: LD_VAR 0 1
18521: NOT
18522: IFFALSE 18526
// exit ;
18524: GO 18539
// DestroyUnit ( tmp [ 1 ] ) ;
18526: LD_VAR 0 1
18530: PUSH
18531: LD_INT 1
18533: ARRAY
18534: PPUSH
18535: CALL_OW 65
// end ;
18539: PPOPN 1
18541: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
18542: LD_EXP 53
18546: PUSH
18547: LD_EXP 91
18551: AND
18552: IFFALSE 18681
18554: GO 18556
18556: DISABLE
18557: LD_INT 0
18559: PPUSH
// begin uc_side := 0 ;
18560: LD_ADDR_OWVAR 20
18564: PUSH
18565: LD_INT 0
18567: ST_TO_ADDR
// uc_nation := nation_arabian ;
18568: LD_ADDR_OWVAR 21
18572: PUSH
18573: LD_INT 2
18575: ST_TO_ADDR
// hc_gallery :=  ;
18576: LD_ADDR_OWVAR 33
18580: PUSH
18581: LD_STRING 
18583: ST_TO_ADDR
// hc_name :=  ;
18584: LD_ADDR_OWVAR 26
18588: PUSH
18589: LD_STRING 
18591: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
18592: LD_INT 1
18594: PPUSH
18595: LD_INT 11
18597: PPUSH
18598: LD_INT 10
18600: PPUSH
18601: CALL_OW 380
// un := CreateHuman ;
18605: LD_ADDR_VAR 0 1
18609: PUSH
18610: CALL_OW 44
18614: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18615: LD_VAR 0 1
18619: PPUSH
18620: LD_INT 1
18622: PPUSH
18623: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
18627: LD_INT 35
18629: PPUSH
18630: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
18634: LD_VAR 0 1
18638: PPUSH
18639: LD_INT 22
18641: PUSH
18642: LD_OWVAR 2
18646: PUSH
18647: EMPTY
18648: LIST
18649: LIST
18650: PPUSH
18651: CALL_OW 69
18655: PPUSH
18656: LD_VAR 0 1
18660: PPUSH
18661: CALL_OW 74
18665: PPUSH
18666: CALL_OW 115
// until IsDead ( un ) ;
18670: LD_VAR 0 1
18674: PPUSH
18675: CALL_OW 301
18679: IFFALSE 18627
// end ;
18681: PPOPN 1
18683: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
18684: LD_EXP 53
18688: PUSH
18689: LD_EXP 93
18693: AND
18694: IFFALSE 18706
18696: GO 18698
18698: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
18699: LD_STRING earthquake(getX(game), 0, 32)
18701: PPUSH
18702: CALL_OW 559
18706: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
18707: LD_EXP 53
18711: PUSH
18712: LD_EXP 94
18716: AND
18717: IFFALSE 18808
18719: GO 18721
18721: DISABLE
18722: LD_INT 0
18724: PPUSH
// begin enable ;
18725: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
18726: LD_ADDR_VAR 0 1
18730: PUSH
18731: LD_INT 22
18733: PUSH
18734: LD_OWVAR 2
18738: PUSH
18739: EMPTY
18740: LIST
18741: LIST
18742: PUSH
18743: LD_INT 21
18745: PUSH
18746: LD_INT 2
18748: PUSH
18749: EMPTY
18750: LIST
18751: LIST
18752: PUSH
18753: LD_INT 33
18755: PUSH
18756: LD_INT 3
18758: PUSH
18759: EMPTY
18760: LIST
18761: LIST
18762: PUSH
18763: EMPTY
18764: LIST
18765: LIST
18766: LIST
18767: PPUSH
18768: CALL_OW 69
18772: ST_TO_ADDR
// if not tmp then
18773: LD_VAR 0 1
18777: NOT
18778: IFFALSE 18782
// exit ;
18780: GO 18808
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
18782: LD_VAR 0 1
18786: PUSH
18787: LD_INT 1
18789: PPUSH
18790: LD_VAR 0 1
18794: PPUSH
18795: CALL_OW 12
18799: ARRAY
18800: PPUSH
18801: LD_INT 1
18803: PPUSH
18804: CALL_OW 234
// end ;
18808: PPOPN 1
18810: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
18811: LD_EXP 53
18815: PUSH
18816: LD_EXP 95
18820: AND
18821: IFFALSE 18962
18823: GO 18825
18825: DISABLE
18826: LD_INT 0
18828: PPUSH
18829: PPUSH
18830: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18831: LD_ADDR_VAR 0 3
18835: PUSH
18836: LD_INT 22
18838: PUSH
18839: LD_OWVAR 2
18843: PUSH
18844: EMPTY
18845: LIST
18846: LIST
18847: PUSH
18848: LD_INT 25
18850: PUSH
18851: LD_INT 1
18853: PUSH
18854: EMPTY
18855: LIST
18856: LIST
18857: PUSH
18858: EMPTY
18859: LIST
18860: LIST
18861: PPUSH
18862: CALL_OW 69
18866: ST_TO_ADDR
// if not tmp then
18867: LD_VAR 0 3
18871: NOT
18872: IFFALSE 18876
// exit ;
18874: GO 18962
// un := tmp [ rand ( 1 , tmp ) ] ;
18876: LD_ADDR_VAR 0 2
18880: PUSH
18881: LD_VAR 0 3
18885: PUSH
18886: LD_INT 1
18888: PPUSH
18889: LD_VAR 0 3
18893: PPUSH
18894: CALL_OW 12
18898: ARRAY
18899: ST_TO_ADDR
// if Crawls ( un ) then
18900: LD_VAR 0 2
18904: PPUSH
18905: CALL_OW 318
18909: IFFALSE 18920
// ComWalk ( un ) ;
18911: LD_VAR 0 2
18915: PPUSH
18916: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
18920: LD_VAR 0 2
18924: PPUSH
18925: LD_INT 9
18927: PPUSH
18928: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
18932: LD_INT 28
18934: PPUSH
18935: LD_OWVAR 2
18939: PPUSH
18940: LD_INT 2
18942: PPUSH
18943: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
18947: LD_INT 29
18949: PPUSH
18950: LD_OWVAR 2
18954: PPUSH
18955: LD_INT 2
18957: PPUSH
18958: CALL_OW 322
// end ;
18962: PPOPN 3
18964: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
18965: LD_EXP 53
18969: PUSH
18970: LD_EXP 96
18974: AND
18975: IFFALSE 19086
18977: GO 18979
18979: DISABLE
18980: LD_INT 0
18982: PPUSH
18983: PPUSH
18984: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18985: LD_ADDR_VAR 0 3
18989: PUSH
18990: LD_INT 22
18992: PUSH
18993: LD_OWVAR 2
18997: PUSH
18998: EMPTY
18999: LIST
19000: LIST
19001: PUSH
19002: LD_INT 25
19004: PUSH
19005: LD_INT 1
19007: PUSH
19008: EMPTY
19009: LIST
19010: LIST
19011: PUSH
19012: EMPTY
19013: LIST
19014: LIST
19015: PPUSH
19016: CALL_OW 69
19020: ST_TO_ADDR
// if not tmp then
19021: LD_VAR 0 3
19025: NOT
19026: IFFALSE 19030
// exit ;
19028: GO 19086
// un := tmp [ rand ( 1 , tmp ) ] ;
19030: LD_ADDR_VAR 0 2
19034: PUSH
19035: LD_VAR 0 3
19039: PUSH
19040: LD_INT 1
19042: PPUSH
19043: LD_VAR 0 3
19047: PPUSH
19048: CALL_OW 12
19052: ARRAY
19053: ST_TO_ADDR
// if Crawls ( un ) then
19054: LD_VAR 0 2
19058: PPUSH
19059: CALL_OW 318
19063: IFFALSE 19074
// ComWalk ( un ) ;
19065: LD_VAR 0 2
19069: PPUSH
19070: CALL_OW 138
// SetClass ( un , class_mortar ) ;
19074: LD_VAR 0 2
19078: PPUSH
19079: LD_INT 8
19081: PPUSH
19082: CALL_OW 336
// end ;
19086: PPOPN 3
19088: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
19089: LD_EXP 53
19093: PUSH
19094: LD_EXP 97
19098: AND
19099: IFFALSE 19243
19101: GO 19103
19103: DISABLE
19104: LD_INT 0
19106: PPUSH
19107: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
19108: LD_ADDR_VAR 0 2
19112: PUSH
19113: LD_INT 22
19115: PUSH
19116: LD_OWVAR 2
19120: PUSH
19121: EMPTY
19122: LIST
19123: LIST
19124: PUSH
19125: LD_INT 21
19127: PUSH
19128: LD_INT 2
19130: PUSH
19131: EMPTY
19132: LIST
19133: LIST
19134: PUSH
19135: LD_INT 2
19137: PUSH
19138: LD_INT 34
19140: PUSH
19141: LD_INT 12
19143: PUSH
19144: EMPTY
19145: LIST
19146: LIST
19147: PUSH
19148: LD_INT 34
19150: PUSH
19151: LD_INT 51
19153: PUSH
19154: EMPTY
19155: LIST
19156: LIST
19157: PUSH
19158: LD_INT 34
19160: PUSH
19161: LD_INT 32
19163: PUSH
19164: EMPTY
19165: LIST
19166: LIST
19167: PUSH
19168: EMPTY
19169: LIST
19170: LIST
19171: LIST
19172: LIST
19173: PUSH
19174: EMPTY
19175: LIST
19176: LIST
19177: LIST
19178: PPUSH
19179: CALL_OW 69
19183: ST_TO_ADDR
// if not tmp then
19184: LD_VAR 0 2
19188: NOT
19189: IFFALSE 19193
// exit ;
19191: GO 19243
// for i in tmp do
19193: LD_ADDR_VAR 0 1
19197: PUSH
19198: LD_VAR 0 2
19202: PUSH
19203: FOR_IN
19204: IFFALSE 19241
// if GetCargo ( i , mat_artifact ) = 0 then
19206: LD_VAR 0 1
19210: PPUSH
19211: LD_INT 4
19213: PPUSH
19214: CALL_OW 289
19218: PUSH
19219: LD_INT 0
19221: EQUAL
19222: IFFALSE 19239
// SetCargo ( i , mat_siberit , 100 ) ;
19224: LD_VAR 0 1
19228: PPUSH
19229: LD_INT 3
19231: PPUSH
19232: LD_INT 100
19234: PPUSH
19235: CALL_OW 290
19239: GO 19203
19241: POP
19242: POP
// end ;
19243: PPOPN 2
19245: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
19246: LD_EXP 53
19250: PUSH
19251: LD_EXP 98
19255: AND
19256: IFFALSE 19439
19258: GO 19260
19260: DISABLE
19261: LD_INT 0
19263: PPUSH
19264: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19265: LD_ADDR_VAR 0 2
19269: PUSH
19270: LD_INT 22
19272: PUSH
19273: LD_OWVAR 2
19277: PUSH
19278: EMPTY
19279: LIST
19280: LIST
19281: PPUSH
19282: CALL_OW 69
19286: ST_TO_ADDR
// if not tmp then
19287: LD_VAR 0 2
19291: NOT
19292: IFFALSE 19296
// exit ;
19294: GO 19439
// for i := 1 to 2 do
19296: LD_ADDR_VAR 0 1
19300: PUSH
19301: DOUBLE
19302: LD_INT 1
19304: DEC
19305: ST_TO_ADDR
19306: LD_INT 2
19308: PUSH
19309: FOR_TO
19310: IFFALSE 19437
// begin uc_side := your_side ;
19312: LD_ADDR_OWVAR 20
19316: PUSH
19317: LD_OWVAR 2
19321: ST_TO_ADDR
// uc_nation := nation_american ;
19322: LD_ADDR_OWVAR 21
19326: PUSH
19327: LD_INT 1
19329: ST_TO_ADDR
// vc_chassis := us_morphling ;
19330: LD_ADDR_OWVAR 37
19334: PUSH
19335: LD_INT 5
19337: ST_TO_ADDR
// vc_engine := engine_siberite ;
19338: LD_ADDR_OWVAR 39
19342: PUSH
19343: LD_INT 3
19345: ST_TO_ADDR
// vc_control := control_computer ;
19346: LD_ADDR_OWVAR 38
19350: PUSH
19351: LD_INT 3
19353: ST_TO_ADDR
// vc_weapon := us_double_laser ;
19354: LD_ADDR_OWVAR 40
19358: PUSH
19359: LD_INT 10
19361: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
19362: LD_VAR 0 2
19366: PUSH
19367: LD_INT 1
19369: ARRAY
19370: PPUSH
19371: CALL_OW 310
19375: NOT
19376: IFFALSE 19423
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
19378: CALL_OW 45
19382: PPUSH
19383: LD_VAR 0 2
19387: PUSH
19388: LD_INT 1
19390: ARRAY
19391: PPUSH
19392: CALL_OW 250
19396: PPUSH
19397: LD_VAR 0 2
19401: PUSH
19402: LD_INT 1
19404: ARRAY
19405: PPUSH
19406: CALL_OW 251
19410: PPUSH
19411: LD_INT 12
19413: PPUSH
19414: LD_INT 1
19416: PPUSH
19417: CALL_OW 50
19421: GO 19435
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
19423: CALL_OW 45
19427: PPUSH
19428: LD_INT 1
19430: PPUSH
19431: CALL_OW 51
// end ;
19435: GO 19309
19437: POP
19438: POP
// end ;
19439: PPOPN 2
19441: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
19442: LD_EXP 53
19446: PUSH
19447: LD_EXP 99
19451: AND
19452: IFFALSE 19674
19454: GO 19456
19456: DISABLE
19457: LD_INT 0
19459: PPUSH
19460: PPUSH
19461: PPUSH
19462: PPUSH
19463: PPUSH
19464: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19465: LD_ADDR_VAR 0 6
19469: PUSH
19470: LD_INT 22
19472: PUSH
19473: LD_OWVAR 2
19477: PUSH
19478: EMPTY
19479: LIST
19480: LIST
19481: PUSH
19482: LD_INT 21
19484: PUSH
19485: LD_INT 1
19487: PUSH
19488: EMPTY
19489: LIST
19490: LIST
19491: PUSH
19492: LD_INT 3
19494: PUSH
19495: LD_INT 23
19497: PUSH
19498: LD_INT 0
19500: PUSH
19501: EMPTY
19502: LIST
19503: LIST
19504: PUSH
19505: EMPTY
19506: LIST
19507: LIST
19508: PUSH
19509: EMPTY
19510: LIST
19511: LIST
19512: LIST
19513: PPUSH
19514: CALL_OW 69
19518: ST_TO_ADDR
// if not tmp then
19519: LD_VAR 0 6
19523: NOT
19524: IFFALSE 19528
// exit ;
19526: GO 19674
// s1 := rand ( 1 , 4 ) ;
19528: LD_ADDR_VAR 0 2
19532: PUSH
19533: LD_INT 1
19535: PPUSH
19536: LD_INT 4
19538: PPUSH
19539: CALL_OW 12
19543: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
19544: LD_ADDR_VAR 0 4
19548: PUSH
19549: LD_VAR 0 6
19553: PUSH
19554: LD_INT 1
19556: ARRAY
19557: PPUSH
19558: LD_VAR 0 2
19562: PPUSH
19563: CALL_OW 259
19567: ST_TO_ADDR
// if s1 = 1 then
19568: LD_VAR 0 2
19572: PUSH
19573: LD_INT 1
19575: EQUAL
19576: IFFALSE 19596
// s2 := rand ( 2 , 4 ) else
19578: LD_ADDR_VAR 0 3
19582: PUSH
19583: LD_INT 2
19585: PPUSH
19586: LD_INT 4
19588: PPUSH
19589: CALL_OW 12
19593: ST_TO_ADDR
19594: GO 19604
// s2 := 1 ;
19596: LD_ADDR_VAR 0 3
19600: PUSH
19601: LD_INT 1
19603: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
19604: LD_ADDR_VAR 0 5
19608: PUSH
19609: LD_VAR 0 6
19613: PUSH
19614: LD_INT 1
19616: ARRAY
19617: PPUSH
19618: LD_VAR 0 3
19622: PPUSH
19623: CALL_OW 259
19627: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
19628: LD_VAR 0 6
19632: PUSH
19633: LD_INT 1
19635: ARRAY
19636: PPUSH
19637: LD_VAR 0 2
19641: PPUSH
19642: LD_VAR 0 5
19646: PPUSH
19647: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
19651: LD_VAR 0 6
19655: PUSH
19656: LD_INT 1
19658: ARRAY
19659: PPUSH
19660: LD_VAR 0 3
19664: PPUSH
19665: LD_VAR 0 4
19669: PPUSH
19670: CALL_OW 237
// end ;
19674: PPOPN 6
19676: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
19677: LD_EXP 53
19681: PUSH
19682: LD_EXP 100
19686: AND
19687: IFFALSE 19766
19689: GO 19691
19691: DISABLE
19692: LD_INT 0
19694: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
19695: LD_ADDR_VAR 0 1
19699: PUSH
19700: LD_INT 22
19702: PUSH
19703: LD_OWVAR 2
19707: PUSH
19708: EMPTY
19709: LIST
19710: LIST
19711: PUSH
19712: LD_INT 30
19714: PUSH
19715: LD_INT 3
19717: PUSH
19718: EMPTY
19719: LIST
19720: LIST
19721: PUSH
19722: EMPTY
19723: LIST
19724: LIST
19725: PPUSH
19726: CALL_OW 69
19730: ST_TO_ADDR
// if not tmp then
19731: LD_VAR 0 1
19735: NOT
19736: IFFALSE 19740
// exit ;
19738: GO 19766
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
19740: LD_VAR 0 1
19744: PUSH
19745: LD_INT 1
19747: PPUSH
19748: LD_VAR 0 1
19752: PPUSH
19753: CALL_OW 12
19757: ARRAY
19758: PPUSH
19759: LD_INT 1
19761: PPUSH
19762: CALL_OW 234
// end ;
19766: PPOPN 1
19768: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
19769: LD_EXP 53
19773: PUSH
19774: LD_EXP 101
19778: AND
19779: IFFALSE 19891
19781: GO 19783
19783: DISABLE
19784: LD_INT 0
19786: PPUSH
19787: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
19788: LD_ADDR_VAR 0 2
19792: PUSH
19793: LD_INT 22
19795: PUSH
19796: LD_OWVAR 2
19800: PUSH
19801: EMPTY
19802: LIST
19803: LIST
19804: PUSH
19805: LD_INT 2
19807: PUSH
19808: LD_INT 30
19810: PUSH
19811: LD_INT 27
19813: PUSH
19814: EMPTY
19815: LIST
19816: LIST
19817: PUSH
19818: LD_INT 30
19820: PUSH
19821: LD_INT 26
19823: PUSH
19824: EMPTY
19825: LIST
19826: LIST
19827: PUSH
19828: LD_INT 30
19830: PUSH
19831: LD_INT 28
19833: PUSH
19834: EMPTY
19835: LIST
19836: LIST
19837: PUSH
19838: EMPTY
19839: LIST
19840: LIST
19841: LIST
19842: LIST
19843: PUSH
19844: EMPTY
19845: LIST
19846: LIST
19847: PPUSH
19848: CALL_OW 69
19852: ST_TO_ADDR
// if not tmp then
19853: LD_VAR 0 2
19857: NOT
19858: IFFALSE 19862
// exit ;
19860: GO 19891
// for i in tmp do
19862: LD_ADDR_VAR 0 1
19866: PUSH
19867: LD_VAR 0 2
19871: PUSH
19872: FOR_IN
19873: IFFALSE 19889
// SetLives ( i , 1 ) ;
19875: LD_VAR 0 1
19879: PPUSH
19880: LD_INT 1
19882: PPUSH
19883: CALL_OW 234
19887: GO 19872
19889: POP
19890: POP
// end ;
19891: PPOPN 2
19893: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
19894: LD_EXP 53
19898: PUSH
19899: LD_EXP 102
19903: AND
19904: IFFALSE 20191
19906: GO 19908
19908: DISABLE
19909: LD_INT 0
19911: PPUSH
19912: PPUSH
19913: PPUSH
// begin i := rand ( 1 , 7 ) ;
19914: LD_ADDR_VAR 0 1
19918: PUSH
19919: LD_INT 1
19921: PPUSH
19922: LD_INT 7
19924: PPUSH
19925: CALL_OW 12
19929: ST_TO_ADDR
// case i of 1 :
19930: LD_VAR 0 1
19934: PUSH
19935: LD_INT 1
19937: DOUBLE
19938: EQUAL
19939: IFTRUE 19943
19941: GO 19953
19943: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
19944: LD_STRING earthquake(getX(game), 0, 32)
19946: PPUSH
19947: CALL_OW 559
19951: GO 20191
19953: LD_INT 2
19955: DOUBLE
19956: EQUAL
19957: IFTRUE 19961
19959: GO 19975
19961: POP
// begin ToLua ( displayStucuk(); ) ;
19962: LD_STRING displayStucuk();
19964: PPUSH
19965: CALL_OW 559
// ResetFog ;
19969: CALL_OW 335
// end ; 3 :
19973: GO 20191
19975: LD_INT 3
19977: DOUBLE
19978: EQUAL
19979: IFTRUE 19983
19981: GO 20087
19983: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19984: LD_ADDR_VAR 0 2
19988: PUSH
19989: LD_INT 22
19991: PUSH
19992: LD_OWVAR 2
19996: PUSH
19997: EMPTY
19998: LIST
19999: LIST
20000: PUSH
20001: LD_INT 25
20003: PUSH
20004: LD_INT 1
20006: PUSH
20007: EMPTY
20008: LIST
20009: LIST
20010: PUSH
20011: EMPTY
20012: LIST
20013: LIST
20014: PPUSH
20015: CALL_OW 69
20019: ST_TO_ADDR
// if not tmp then
20020: LD_VAR 0 2
20024: NOT
20025: IFFALSE 20029
// exit ;
20027: GO 20191
// un := tmp [ rand ( 1 , tmp ) ] ;
20029: LD_ADDR_VAR 0 3
20033: PUSH
20034: LD_VAR 0 2
20038: PUSH
20039: LD_INT 1
20041: PPUSH
20042: LD_VAR 0 2
20046: PPUSH
20047: CALL_OW 12
20051: ARRAY
20052: ST_TO_ADDR
// if Crawls ( un ) then
20053: LD_VAR 0 3
20057: PPUSH
20058: CALL_OW 318
20062: IFFALSE 20073
// ComWalk ( un ) ;
20064: LD_VAR 0 3
20068: PPUSH
20069: CALL_OW 138
// SetClass ( un , class_mortar ) ;
20073: LD_VAR 0 3
20077: PPUSH
20078: LD_INT 8
20080: PPUSH
20081: CALL_OW 336
// end ; 4 :
20085: GO 20191
20087: LD_INT 4
20089: DOUBLE
20090: EQUAL
20091: IFTRUE 20095
20093: GO 20169
20095: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
20096: LD_ADDR_VAR 0 2
20100: PUSH
20101: LD_INT 22
20103: PUSH
20104: LD_OWVAR 2
20108: PUSH
20109: EMPTY
20110: LIST
20111: LIST
20112: PUSH
20113: LD_INT 30
20115: PUSH
20116: LD_INT 29
20118: PUSH
20119: EMPTY
20120: LIST
20121: LIST
20122: PUSH
20123: EMPTY
20124: LIST
20125: LIST
20126: PPUSH
20127: CALL_OW 69
20131: ST_TO_ADDR
// if not tmp then
20132: LD_VAR 0 2
20136: NOT
20137: IFFALSE 20141
// exit ;
20139: GO 20191
// CenterNowOnUnits ( tmp [ 1 ] ) ;
20141: LD_VAR 0 2
20145: PUSH
20146: LD_INT 1
20148: ARRAY
20149: PPUSH
20150: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
20154: LD_VAR 0 2
20158: PUSH
20159: LD_INT 1
20161: ARRAY
20162: PPUSH
20163: CALL_OW 65
// end ; 5 .. 7 :
20167: GO 20191
20169: LD_INT 5
20171: DOUBLE
20172: GREATEREQUAL
20173: IFFALSE 20181
20175: LD_INT 7
20177: DOUBLE
20178: LESSEQUAL
20179: IFTRUE 20183
20181: GO 20190
20183: POP
// StreamSibBomb ; end ;
20184: CALL 16428 0 0
20188: GO 20191
20190: POP
// end ;
20191: PPOPN 3
20193: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
20194: LD_EXP 53
20198: PUSH
20199: LD_EXP 103
20203: AND
20204: IFFALSE 20360
20206: GO 20208
20208: DISABLE
20209: LD_INT 0
20211: PPUSH
20212: PPUSH
20213: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
20214: LD_ADDR_VAR 0 2
20218: PUSH
20219: LD_INT 81
20221: PUSH
20222: LD_OWVAR 2
20226: PUSH
20227: EMPTY
20228: LIST
20229: LIST
20230: PUSH
20231: LD_INT 2
20233: PUSH
20234: LD_INT 21
20236: PUSH
20237: LD_INT 1
20239: PUSH
20240: EMPTY
20241: LIST
20242: LIST
20243: PUSH
20244: LD_INT 21
20246: PUSH
20247: LD_INT 2
20249: PUSH
20250: EMPTY
20251: LIST
20252: LIST
20253: PUSH
20254: EMPTY
20255: LIST
20256: LIST
20257: LIST
20258: PUSH
20259: EMPTY
20260: LIST
20261: LIST
20262: PPUSH
20263: CALL_OW 69
20267: ST_TO_ADDR
// if not tmp then
20268: LD_VAR 0 2
20272: NOT
20273: IFFALSE 20277
// exit ;
20275: GO 20360
// p := 0 ;
20277: LD_ADDR_VAR 0 3
20281: PUSH
20282: LD_INT 0
20284: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
20285: LD_INT 35
20287: PPUSH
20288: CALL_OW 67
// p := p + 1 ;
20292: LD_ADDR_VAR 0 3
20296: PUSH
20297: LD_VAR 0 3
20301: PUSH
20302: LD_INT 1
20304: PLUS
20305: ST_TO_ADDR
// for i in tmp do
20306: LD_ADDR_VAR 0 1
20310: PUSH
20311: LD_VAR 0 2
20315: PUSH
20316: FOR_IN
20317: IFFALSE 20348
// if GetLives ( i ) < 1000 then
20319: LD_VAR 0 1
20323: PPUSH
20324: CALL_OW 256
20328: PUSH
20329: LD_INT 1000
20331: LESS
20332: IFFALSE 20346
// SetLives ( i , 1000 ) ;
20334: LD_VAR 0 1
20338: PPUSH
20339: LD_INT 1000
20341: PPUSH
20342: CALL_OW 234
20346: GO 20316
20348: POP
20349: POP
// until p > 20 ;
20350: LD_VAR 0 3
20354: PUSH
20355: LD_INT 20
20357: GREATER
20358: IFFALSE 20285
// end ;
20360: PPOPN 3
20362: END
// every 0 0$1 trigger StreamModeActive and sTime do
20363: LD_EXP 53
20367: PUSH
20368: LD_EXP 104
20372: AND
20373: IFFALSE 20408
20375: GO 20377
20377: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
20378: LD_INT 28
20380: PPUSH
20381: LD_OWVAR 2
20385: PPUSH
20386: LD_INT 2
20388: PPUSH
20389: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
20393: LD_INT 30
20395: PPUSH
20396: LD_OWVAR 2
20400: PPUSH
20401: LD_INT 2
20403: PPUSH
20404: CALL_OW 322
// end ;
20408: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
20409: LD_EXP 53
20413: PUSH
20414: LD_EXP 105
20418: AND
20419: IFFALSE 20540
20421: GO 20423
20423: DISABLE
20424: LD_INT 0
20426: PPUSH
20427: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20428: LD_ADDR_VAR 0 2
20432: PUSH
20433: LD_INT 22
20435: PUSH
20436: LD_OWVAR 2
20440: PUSH
20441: EMPTY
20442: LIST
20443: LIST
20444: PUSH
20445: LD_INT 21
20447: PUSH
20448: LD_INT 1
20450: PUSH
20451: EMPTY
20452: LIST
20453: LIST
20454: PUSH
20455: LD_INT 3
20457: PUSH
20458: LD_INT 23
20460: PUSH
20461: LD_INT 0
20463: PUSH
20464: EMPTY
20465: LIST
20466: LIST
20467: PUSH
20468: EMPTY
20469: LIST
20470: LIST
20471: PUSH
20472: EMPTY
20473: LIST
20474: LIST
20475: LIST
20476: PPUSH
20477: CALL_OW 69
20481: ST_TO_ADDR
// if not tmp then
20482: LD_VAR 0 2
20486: NOT
20487: IFFALSE 20491
// exit ;
20489: GO 20540
// for i in tmp do
20491: LD_ADDR_VAR 0 1
20495: PUSH
20496: LD_VAR 0 2
20500: PUSH
20501: FOR_IN
20502: IFFALSE 20538
// begin if Crawls ( i ) then
20504: LD_VAR 0 1
20508: PPUSH
20509: CALL_OW 318
20513: IFFALSE 20524
// ComWalk ( i ) ;
20515: LD_VAR 0 1
20519: PPUSH
20520: CALL_OW 138
// SetClass ( i , 2 ) ;
20524: LD_VAR 0 1
20528: PPUSH
20529: LD_INT 2
20531: PPUSH
20532: CALL_OW 336
// end ;
20536: GO 20501
20538: POP
20539: POP
// end ;
20540: PPOPN 2
20542: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
20543: LD_EXP 53
20547: PUSH
20548: LD_EXP 106
20552: AND
20553: IFFALSE 20841
20555: GO 20557
20557: DISABLE
20558: LD_INT 0
20560: PPUSH
20561: PPUSH
20562: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
20563: LD_OWVAR 2
20567: PPUSH
20568: LD_INT 9
20570: PPUSH
20571: LD_INT 1
20573: PPUSH
20574: LD_INT 1
20576: PPUSH
20577: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
20581: LD_INT 9
20583: PPUSH
20584: LD_OWVAR 2
20588: PPUSH
20589: CALL_OW 343
// uc_side := 9 ;
20593: LD_ADDR_OWVAR 20
20597: PUSH
20598: LD_INT 9
20600: ST_TO_ADDR
// uc_nation := 2 ;
20601: LD_ADDR_OWVAR 21
20605: PUSH
20606: LD_INT 2
20608: ST_TO_ADDR
// hc_name := Dark Warrior ;
20609: LD_ADDR_OWVAR 26
20613: PUSH
20614: LD_STRING Dark Warrior
20616: ST_TO_ADDR
// hc_gallery :=  ;
20617: LD_ADDR_OWVAR 33
20621: PUSH
20622: LD_STRING 
20624: ST_TO_ADDR
// hc_noskilllimit := true ;
20625: LD_ADDR_OWVAR 76
20629: PUSH
20630: LD_INT 1
20632: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
20633: LD_ADDR_OWVAR 31
20637: PUSH
20638: LD_INT 30
20640: PUSH
20641: LD_INT 30
20643: PUSH
20644: LD_INT 30
20646: PUSH
20647: LD_INT 30
20649: PUSH
20650: EMPTY
20651: LIST
20652: LIST
20653: LIST
20654: LIST
20655: ST_TO_ADDR
// un := CreateHuman ;
20656: LD_ADDR_VAR 0 3
20660: PUSH
20661: CALL_OW 44
20665: ST_TO_ADDR
// hc_noskilllimit := false ;
20666: LD_ADDR_OWVAR 76
20670: PUSH
20671: LD_INT 0
20673: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20674: LD_VAR 0 3
20678: PPUSH
20679: LD_INT 1
20681: PPUSH
20682: CALL_OW 51
// ToLua ( playRanger() ) ;
20686: LD_STRING playRanger()
20688: PPUSH
20689: CALL_OW 559
// p := 0 ;
20693: LD_ADDR_VAR 0 2
20697: PUSH
20698: LD_INT 0
20700: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
20701: LD_INT 35
20703: PPUSH
20704: CALL_OW 67
// p := p + 1 ;
20708: LD_ADDR_VAR 0 2
20712: PUSH
20713: LD_VAR 0 2
20717: PUSH
20718: LD_INT 1
20720: PLUS
20721: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
20722: LD_VAR 0 3
20726: PPUSH
20727: CALL_OW 256
20731: PUSH
20732: LD_INT 1000
20734: LESS
20735: IFFALSE 20749
// SetLives ( un , 1000 ) ;
20737: LD_VAR 0 3
20741: PPUSH
20742: LD_INT 1000
20744: PPUSH
20745: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
20749: LD_VAR 0 3
20753: PPUSH
20754: LD_INT 81
20756: PUSH
20757: LD_OWVAR 2
20761: PUSH
20762: EMPTY
20763: LIST
20764: LIST
20765: PUSH
20766: LD_INT 91
20768: PUSH
20769: LD_VAR 0 3
20773: PUSH
20774: LD_INT 30
20776: PUSH
20777: EMPTY
20778: LIST
20779: LIST
20780: LIST
20781: PUSH
20782: EMPTY
20783: LIST
20784: LIST
20785: PPUSH
20786: CALL_OW 69
20790: PPUSH
20791: LD_VAR 0 3
20795: PPUSH
20796: CALL_OW 74
20800: PPUSH
20801: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
20805: LD_VAR 0 2
20809: PUSH
20810: LD_INT 80
20812: GREATER
20813: PUSH
20814: LD_VAR 0 3
20818: PPUSH
20819: CALL_OW 301
20823: OR
20824: IFFALSE 20701
// if un then
20826: LD_VAR 0 3
20830: IFFALSE 20841
// RemoveUnit ( un ) ;
20832: LD_VAR 0 3
20836: PPUSH
20837: CALL_OW 64
// end ;
20841: PPOPN 3
20843: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
20844: LD_EXP 107
20848: IFFALSE 20964
20850: GO 20852
20852: DISABLE
20853: LD_INT 0
20855: PPUSH
20856: PPUSH
20857: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
20858: LD_ADDR_VAR 0 2
20862: PUSH
20863: LD_INT 81
20865: PUSH
20866: LD_OWVAR 2
20870: PUSH
20871: EMPTY
20872: LIST
20873: LIST
20874: PUSH
20875: LD_INT 21
20877: PUSH
20878: LD_INT 1
20880: PUSH
20881: EMPTY
20882: LIST
20883: LIST
20884: PUSH
20885: EMPTY
20886: LIST
20887: LIST
20888: PPUSH
20889: CALL_OW 69
20893: ST_TO_ADDR
// ToLua ( playComputer() ) ;
20894: LD_STRING playComputer()
20896: PPUSH
20897: CALL_OW 559
// if not tmp then
20901: LD_VAR 0 2
20905: NOT
20906: IFFALSE 20910
// exit ;
20908: GO 20964
// for i in tmp do
20910: LD_ADDR_VAR 0 1
20914: PUSH
20915: LD_VAR 0 2
20919: PUSH
20920: FOR_IN
20921: IFFALSE 20962
// for j := 1 to 4 do
20923: LD_ADDR_VAR 0 3
20927: PUSH
20928: DOUBLE
20929: LD_INT 1
20931: DEC
20932: ST_TO_ADDR
20933: LD_INT 4
20935: PUSH
20936: FOR_TO
20937: IFFALSE 20958
// SetSkill ( i , j , 10 ) ;
20939: LD_VAR 0 1
20943: PPUSH
20944: LD_VAR 0 3
20948: PPUSH
20949: LD_INT 10
20951: PPUSH
20952: CALL_OW 237
20956: GO 20936
20958: POP
20959: POP
20960: GO 20920
20962: POP
20963: POP
// end ;
20964: PPOPN 3
20966: END
// every 0 0$1 trigger s30 do var i , tmp ;
20967: LD_EXP 108
20971: IFFALSE 21040
20973: GO 20975
20975: DISABLE
20976: LD_INT 0
20978: PPUSH
20979: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
20980: LD_ADDR_VAR 0 2
20984: PUSH
20985: LD_INT 22
20987: PUSH
20988: LD_OWVAR 2
20992: PUSH
20993: EMPTY
20994: LIST
20995: LIST
20996: PPUSH
20997: CALL_OW 69
21001: ST_TO_ADDR
// if not tmp then
21002: LD_VAR 0 2
21006: NOT
21007: IFFALSE 21011
// exit ;
21009: GO 21040
// for i in tmp do
21011: LD_ADDR_VAR 0 1
21015: PUSH
21016: LD_VAR 0 2
21020: PUSH
21021: FOR_IN
21022: IFFALSE 21038
// SetLives ( i , 300 ) ;
21024: LD_VAR 0 1
21028: PPUSH
21029: LD_INT 300
21031: PPUSH
21032: CALL_OW 234
21036: GO 21021
21038: POP
21039: POP
// end ;
21040: PPOPN 2
21042: END
// every 0 0$1 trigger s60 do var i , tmp ;
21043: LD_EXP 109
21047: IFFALSE 21116
21049: GO 21051
21051: DISABLE
21052: LD_INT 0
21054: PPUSH
21055: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21056: LD_ADDR_VAR 0 2
21060: PUSH
21061: LD_INT 22
21063: PUSH
21064: LD_OWVAR 2
21068: PUSH
21069: EMPTY
21070: LIST
21071: LIST
21072: PPUSH
21073: CALL_OW 69
21077: ST_TO_ADDR
// if not tmp then
21078: LD_VAR 0 2
21082: NOT
21083: IFFALSE 21087
// exit ;
21085: GO 21116
// for i in tmp do
21087: LD_ADDR_VAR 0 1
21091: PUSH
21092: LD_VAR 0 2
21096: PUSH
21097: FOR_IN
21098: IFFALSE 21114
// SetLives ( i , 600 ) ;
21100: LD_VAR 0 1
21104: PPUSH
21105: LD_INT 600
21107: PPUSH
21108: CALL_OW 234
21112: GO 21097
21114: POP
21115: POP
// end ;
21116: PPOPN 2
21118: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
21119: LD_INT 0
21121: PPUSH
// case cmd of 301 :
21122: LD_VAR 0 1
21126: PUSH
21127: LD_INT 301
21129: DOUBLE
21130: EQUAL
21131: IFTRUE 21135
21133: GO 21167
21135: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
21136: LD_VAR 0 6
21140: PPUSH
21141: LD_VAR 0 7
21145: PPUSH
21146: LD_VAR 0 8
21150: PPUSH
21151: LD_VAR 0 4
21155: PPUSH
21156: LD_VAR 0 5
21160: PPUSH
21161: CALL 22376 0 5
21165: GO 21288
21167: LD_INT 302
21169: DOUBLE
21170: EQUAL
21171: IFTRUE 21175
21173: GO 21212
21175: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
21176: LD_VAR 0 6
21180: PPUSH
21181: LD_VAR 0 7
21185: PPUSH
21186: LD_VAR 0 8
21190: PPUSH
21191: LD_VAR 0 9
21195: PPUSH
21196: LD_VAR 0 4
21200: PPUSH
21201: LD_VAR 0 5
21205: PPUSH
21206: CALL 22467 0 6
21210: GO 21288
21212: LD_INT 303
21214: DOUBLE
21215: EQUAL
21216: IFTRUE 21220
21218: GO 21257
21220: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
21221: LD_VAR 0 6
21225: PPUSH
21226: LD_VAR 0 7
21230: PPUSH
21231: LD_VAR 0 8
21235: PPUSH
21236: LD_VAR 0 9
21240: PPUSH
21241: LD_VAR 0 4
21245: PPUSH
21246: LD_VAR 0 5
21250: PPUSH
21251: CALL 21293 0 6
21255: GO 21288
21257: LD_INT 304
21259: DOUBLE
21260: EQUAL
21261: IFTRUE 21265
21263: GO 21287
21265: POP
// hHackTeleport ( unit , x , y ) ; end ;
21266: LD_VAR 0 2
21270: PPUSH
21271: LD_VAR 0 4
21275: PPUSH
21276: LD_VAR 0 5
21280: PPUSH
21281: CALL 23060 0 3
21285: GO 21288
21287: POP
// end ;
21288: LD_VAR 0 12
21292: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
21293: LD_INT 0
21295: PPUSH
21296: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
21297: LD_VAR 0 1
21301: PUSH
21302: LD_INT 1
21304: LESS
21305: PUSH
21306: LD_VAR 0 1
21310: PUSH
21311: LD_INT 3
21313: GREATER
21314: OR
21315: PUSH
21316: LD_VAR 0 5
21320: PPUSH
21321: LD_VAR 0 6
21325: PPUSH
21326: CALL_OW 428
21330: OR
21331: IFFALSE 21335
// exit ;
21333: GO 22063
// uc_side := your_side ;
21335: LD_ADDR_OWVAR 20
21339: PUSH
21340: LD_OWVAR 2
21344: ST_TO_ADDR
// uc_nation := nation ;
21345: LD_ADDR_OWVAR 21
21349: PUSH
21350: LD_VAR 0 1
21354: ST_TO_ADDR
// bc_level = 1 ;
21355: LD_ADDR_OWVAR 43
21359: PUSH
21360: LD_INT 1
21362: ST_TO_ADDR
// case btype of 1 :
21363: LD_VAR 0 2
21367: PUSH
21368: LD_INT 1
21370: DOUBLE
21371: EQUAL
21372: IFTRUE 21376
21374: GO 21387
21376: POP
// bc_type := b_depot ; 2 :
21377: LD_ADDR_OWVAR 42
21381: PUSH
21382: LD_INT 0
21384: ST_TO_ADDR
21385: GO 22007
21387: LD_INT 2
21389: DOUBLE
21390: EQUAL
21391: IFTRUE 21395
21393: GO 21406
21395: POP
// bc_type := b_warehouse ; 3 :
21396: LD_ADDR_OWVAR 42
21400: PUSH
21401: LD_INT 1
21403: ST_TO_ADDR
21404: GO 22007
21406: LD_INT 3
21408: DOUBLE
21409: EQUAL
21410: IFTRUE 21414
21412: GO 21425
21414: POP
// bc_type := b_lab ; 4 .. 9 :
21415: LD_ADDR_OWVAR 42
21419: PUSH
21420: LD_INT 6
21422: ST_TO_ADDR
21423: GO 22007
21425: LD_INT 4
21427: DOUBLE
21428: GREATEREQUAL
21429: IFFALSE 21437
21431: LD_INT 9
21433: DOUBLE
21434: LESSEQUAL
21435: IFTRUE 21439
21437: GO 21499
21439: POP
// begin bc_type := b_lab_half ;
21440: LD_ADDR_OWVAR 42
21444: PUSH
21445: LD_INT 7
21447: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
21448: LD_ADDR_OWVAR 44
21452: PUSH
21453: LD_INT 10
21455: PUSH
21456: LD_INT 11
21458: PUSH
21459: LD_INT 12
21461: PUSH
21462: LD_INT 15
21464: PUSH
21465: LD_INT 14
21467: PUSH
21468: LD_INT 13
21470: PUSH
21471: EMPTY
21472: LIST
21473: LIST
21474: LIST
21475: LIST
21476: LIST
21477: LIST
21478: PUSH
21479: LD_VAR 0 2
21483: PUSH
21484: LD_INT 3
21486: MINUS
21487: ARRAY
21488: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
21489: LD_ADDR_OWVAR 45
21493: PUSH
21494: LD_INT 9
21496: ST_TO_ADDR
// end ; 10 .. 13 :
21497: GO 22007
21499: LD_INT 10
21501: DOUBLE
21502: GREATEREQUAL
21503: IFFALSE 21511
21505: LD_INT 13
21507: DOUBLE
21508: LESSEQUAL
21509: IFTRUE 21513
21511: GO 21590
21513: POP
// begin bc_type := b_lab_full ;
21514: LD_ADDR_OWVAR 42
21518: PUSH
21519: LD_INT 8
21521: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
21522: LD_ADDR_OWVAR 44
21526: PUSH
21527: LD_INT 10
21529: PUSH
21530: LD_INT 12
21532: PUSH
21533: LD_INT 14
21535: PUSH
21536: LD_INT 13
21538: PUSH
21539: EMPTY
21540: LIST
21541: LIST
21542: LIST
21543: LIST
21544: PUSH
21545: LD_VAR 0 2
21549: PUSH
21550: LD_INT 9
21552: MINUS
21553: ARRAY
21554: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
21555: LD_ADDR_OWVAR 45
21559: PUSH
21560: LD_INT 11
21562: PUSH
21563: LD_INT 15
21565: PUSH
21566: LD_INT 12
21568: PUSH
21569: LD_INT 15
21571: PUSH
21572: EMPTY
21573: LIST
21574: LIST
21575: LIST
21576: LIST
21577: PUSH
21578: LD_VAR 0 2
21582: PUSH
21583: LD_INT 9
21585: MINUS
21586: ARRAY
21587: ST_TO_ADDR
// end ; 14 :
21588: GO 22007
21590: LD_INT 14
21592: DOUBLE
21593: EQUAL
21594: IFTRUE 21598
21596: GO 21609
21598: POP
// bc_type := b_workshop ; 15 :
21599: LD_ADDR_OWVAR 42
21603: PUSH
21604: LD_INT 2
21606: ST_TO_ADDR
21607: GO 22007
21609: LD_INT 15
21611: DOUBLE
21612: EQUAL
21613: IFTRUE 21617
21615: GO 21628
21617: POP
// bc_type := b_factory ; 16 :
21618: LD_ADDR_OWVAR 42
21622: PUSH
21623: LD_INT 3
21625: ST_TO_ADDR
21626: GO 22007
21628: LD_INT 16
21630: DOUBLE
21631: EQUAL
21632: IFTRUE 21636
21634: GO 21647
21636: POP
// bc_type := b_ext_gun ; 17 :
21637: LD_ADDR_OWVAR 42
21641: PUSH
21642: LD_INT 17
21644: ST_TO_ADDR
21645: GO 22007
21647: LD_INT 17
21649: DOUBLE
21650: EQUAL
21651: IFTRUE 21655
21653: GO 21683
21655: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
21656: LD_ADDR_OWVAR 42
21660: PUSH
21661: LD_INT 19
21663: PUSH
21664: LD_INT 23
21666: PUSH
21667: LD_INT 19
21669: PUSH
21670: EMPTY
21671: LIST
21672: LIST
21673: LIST
21674: PUSH
21675: LD_VAR 0 1
21679: ARRAY
21680: ST_TO_ADDR
21681: GO 22007
21683: LD_INT 18
21685: DOUBLE
21686: EQUAL
21687: IFTRUE 21691
21689: GO 21702
21691: POP
// bc_type := b_ext_radar ; 19 :
21692: LD_ADDR_OWVAR 42
21696: PUSH
21697: LD_INT 20
21699: ST_TO_ADDR
21700: GO 22007
21702: LD_INT 19
21704: DOUBLE
21705: EQUAL
21706: IFTRUE 21710
21708: GO 21721
21710: POP
// bc_type := b_ext_radio ; 20 :
21711: LD_ADDR_OWVAR 42
21715: PUSH
21716: LD_INT 22
21718: ST_TO_ADDR
21719: GO 22007
21721: LD_INT 20
21723: DOUBLE
21724: EQUAL
21725: IFTRUE 21729
21727: GO 21740
21729: POP
// bc_type := b_ext_siberium ; 21 :
21730: LD_ADDR_OWVAR 42
21734: PUSH
21735: LD_INT 21
21737: ST_TO_ADDR
21738: GO 22007
21740: LD_INT 21
21742: DOUBLE
21743: EQUAL
21744: IFTRUE 21748
21746: GO 21759
21748: POP
// bc_type := b_ext_computer ; 22 :
21749: LD_ADDR_OWVAR 42
21753: PUSH
21754: LD_INT 24
21756: ST_TO_ADDR
21757: GO 22007
21759: LD_INT 22
21761: DOUBLE
21762: EQUAL
21763: IFTRUE 21767
21765: GO 21778
21767: POP
// bc_type := b_ext_track ; 23 :
21768: LD_ADDR_OWVAR 42
21772: PUSH
21773: LD_INT 16
21775: ST_TO_ADDR
21776: GO 22007
21778: LD_INT 23
21780: DOUBLE
21781: EQUAL
21782: IFTRUE 21786
21784: GO 21797
21786: POP
// bc_type := b_ext_laser ; 24 :
21787: LD_ADDR_OWVAR 42
21791: PUSH
21792: LD_INT 25
21794: ST_TO_ADDR
21795: GO 22007
21797: LD_INT 24
21799: DOUBLE
21800: EQUAL
21801: IFTRUE 21805
21803: GO 21816
21805: POP
// bc_type := b_control_tower ; 25 :
21806: LD_ADDR_OWVAR 42
21810: PUSH
21811: LD_INT 36
21813: ST_TO_ADDR
21814: GO 22007
21816: LD_INT 25
21818: DOUBLE
21819: EQUAL
21820: IFTRUE 21824
21822: GO 21835
21824: POP
// bc_type := b_breastwork ; 26 :
21825: LD_ADDR_OWVAR 42
21829: PUSH
21830: LD_INT 31
21832: ST_TO_ADDR
21833: GO 22007
21835: LD_INT 26
21837: DOUBLE
21838: EQUAL
21839: IFTRUE 21843
21841: GO 21854
21843: POP
// bc_type := b_bunker ; 27 :
21844: LD_ADDR_OWVAR 42
21848: PUSH
21849: LD_INT 32
21851: ST_TO_ADDR
21852: GO 22007
21854: LD_INT 27
21856: DOUBLE
21857: EQUAL
21858: IFTRUE 21862
21860: GO 21873
21862: POP
// bc_type := b_turret ; 28 :
21863: LD_ADDR_OWVAR 42
21867: PUSH
21868: LD_INT 33
21870: ST_TO_ADDR
21871: GO 22007
21873: LD_INT 28
21875: DOUBLE
21876: EQUAL
21877: IFTRUE 21881
21879: GO 21892
21881: POP
// bc_type := b_armoury ; 29 :
21882: LD_ADDR_OWVAR 42
21886: PUSH
21887: LD_INT 4
21889: ST_TO_ADDR
21890: GO 22007
21892: LD_INT 29
21894: DOUBLE
21895: EQUAL
21896: IFTRUE 21900
21898: GO 21911
21900: POP
// bc_type := b_barracks ; 30 :
21901: LD_ADDR_OWVAR 42
21905: PUSH
21906: LD_INT 5
21908: ST_TO_ADDR
21909: GO 22007
21911: LD_INT 30
21913: DOUBLE
21914: EQUAL
21915: IFTRUE 21919
21917: GO 21930
21919: POP
// bc_type := b_solar_power ; 31 :
21920: LD_ADDR_OWVAR 42
21924: PUSH
21925: LD_INT 27
21927: ST_TO_ADDR
21928: GO 22007
21930: LD_INT 31
21932: DOUBLE
21933: EQUAL
21934: IFTRUE 21938
21936: GO 21949
21938: POP
// bc_type := b_oil_power ; 32 :
21939: LD_ADDR_OWVAR 42
21943: PUSH
21944: LD_INT 26
21946: ST_TO_ADDR
21947: GO 22007
21949: LD_INT 32
21951: DOUBLE
21952: EQUAL
21953: IFTRUE 21957
21955: GO 21968
21957: POP
// bc_type := b_siberite_power ; 33 :
21958: LD_ADDR_OWVAR 42
21962: PUSH
21963: LD_INT 28
21965: ST_TO_ADDR
21966: GO 22007
21968: LD_INT 33
21970: DOUBLE
21971: EQUAL
21972: IFTRUE 21976
21974: GO 21987
21976: POP
// bc_type := b_oil_mine ; 34 :
21977: LD_ADDR_OWVAR 42
21981: PUSH
21982: LD_INT 29
21984: ST_TO_ADDR
21985: GO 22007
21987: LD_INT 34
21989: DOUBLE
21990: EQUAL
21991: IFTRUE 21995
21993: GO 22006
21995: POP
// bc_type := b_siberite_mine ; end ;
21996: LD_ADDR_OWVAR 42
22000: PUSH
22001: LD_INT 30
22003: ST_TO_ADDR
22004: GO 22007
22006: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
22007: LD_ADDR_VAR 0 8
22011: PUSH
22012: LD_VAR 0 5
22016: PPUSH
22017: LD_VAR 0 6
22021: PPUSH
22022: LD_VAR 0 3
22026: PPUSH
22027: CALL_OW 47
22031: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
22032: LD_OWVAR 42
22036: PUSH
22037: LD_INT 32
22039: PUSH
22040: LD_INT 33
22042: PUSH
22043: EMPTY
22044: LIST
22045: LIST
22046: IN
22047: IFFALSE 22063
// PlaceWeaponTurret ( b , weapon ) ;
22049: LD_VAR 0 8
22053: PPUSH
22054: LD_VAR 0 4
22058: PPUSH
22059: CALL_OW 431
// end ;
22063: LD_VAR 0 7
22067: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
22068: LD_INT 0
22070: PPUSH
22071: PPUSH
22072: PPUSH
22073: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22074: LD_ADDR_VAR 0 4
22078: PUSH
22079: LD_INT 22
22081: PUSH
22082: LD_OWVAR 2
22086: PUSH
22087: EMPTY
22088: LIST
22089: LIST
22090: PUSH
22091: LD_INT 2
22093: PUSH
22094: LD_INT 30
22096: PUSH
22097: LD_INT 0
22099: PUSH
22100: EMPTY
22101: LIST
22102: LIST
22103: PUSH
22104: LD_INT 30
22106: PUSH
22107: LD_INT 1
22109: PUSH
22110: EMPTY
22111: LIST
22112: LIST
22113: PUSH
22114: EMPTY
22115: LIST
22116: LIST
22117: LIST
22118: PUSH
22119: EMPTY
22120: LIST
22121: LIST
22122: PPUSH
22123: CALL_OW 69
22127: ST_TO_ADDR
// if not tmp then
22128: LD_VAR 0 4
22132: NOT
22133: IFFALSE 22137
// exit ;
22135: GO 22196
// for i in tmp do
22137: LD_ADDR_VAR 0 2
22141: PUSH
22142: LD_VAR 0 4
22146: PUSH
22147: FOR_IN
22148: IFFALSE 22194
// for j = 1 to 3 do
22150: LD_ADDR_VAR 0 3
22154: PUSH
22155: DOUBLE
22156: LD_INT 1
22158: DEC
22159: ST_TO_ADDR
22160: LD_INT 3
22162: PUSH
22163: FOR_TO
22164: IFFALSE 22190
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
22166: LD_VAR 0 2
22170: PPUSH
22171: CALL_OW 274
22175: PPUSH
22176: LD_VAR 0 3
22180: PPUSH
22181: LD_INT 99999
22183: PPUSH
22184: CALL_OW 277
22188: GO 22163
22190: POP
22191: POP
22192: GO 22147
22194: POP
22195: POP
// end ;
22196: LD_VAR 0 1
22200: RET
// export function hHackSetLevel10 ; var i , j ; begin
22201: LD_INT 0
22203: PPUSH
22204: PPUSH
22205: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
22206: LD_ADDR_VAR 0 2
22210: PUSH
22211: LD_INT 21
22213: PUSH
22214: LD_INT 1
22216: PUSH
22217: EMPTY
22218: LIST
22219: LIST
22220: PPUSH
22221: CALL_OW 69
22225: PUSH
22226: FOR_IN
22227: IFFALSE 22279
// if IsSelected ( i ) then
22229: LD_VAR 0 2
22233: PPUSH
22234: CALL_OW 306
22238: IFFALSE 22277
// begin for j := 1 to 4 do
22240: LD_ADDR_VAR 0 3
22244: PUSH
22245: DOUBLE
22246: LD_INT 1
22248: DEC
22249: ST_TO_ADDR
22250: LD_INT 4
22252: PUSH
22253: FOR_TO
22254: IFFALSE 22275
// SetSkill ( i , j , 10 ) ;
22256: LD_VAR 0 2
22260: PPUSH
22261: LD_VAR 0 3
22265: PPUSH
22266: LD_INT 10
22268: PPUSH
22269: CALL_OW 237
22273: GO 22253
22275: POP
22276: POP
// end ;
22277: GO 22226
22279: POP
22280: POP
// end ;
22281: LD_VAR 0 1
22285: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
22286: LD_INT 0
22288: PPUSH
22289: PPUSH
22290: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
22291: LD_ADDR_VAR 0 2
22295: PUSH
22296: LD_INT 22
22298: PUSH
22299: LD_OWVAR 2
22303: PUSH
22304: EMPTY
22305: LIST
22306: LIST
22307: PUSH
22308: LD_INT 21
22310: PUSH
22311: LD_INT 1
22313: PUSH
22314: EMPTY
22315: LIST
22316: LIST
22317: PUSH
22318: EMPTY
22319: LIST
22320: LIST
22321: PPUSH
22322: CALL_OW 69
22326: PUSH
22327: FOR_IN
22328: IFFALSE 22369
// begin for j := 1 to 4 do
22330: LD_ADDR_VAR 0 3
22334: PUSH
22335: DOUBLE
22336: LD_INT 1
22338: DEC
22339: ST_TO_ADDR
22340: LD_INT 4
22342: PUSH
22343: FOR_TO
22344: IFFALSE 22365
// SetSkill ( i , j , 10 ) ;
22346: LD_VAR 0 2
22350: PPUSH
22351: LD_VAR 0 3
22355: PPUSH
22356: LD_INT 10
22358: PPUSH
22359: CALL_OW 237
22363: GO 22343
22365: POP
22366: POP
// end ;
22367: GO 22327
22369: POP
22370: POP
// end ;
22371: LD_VAR 0 1
22375: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
22376: LD_INT 0
22378: PPUSH
// uc_side := your_side ;
22379: LD_ADDR_OWVAR 20
22383: PUSH
22384: LD_OWVAR 2
22388: ST_TO_ADDR
// uc_nation := nation ;
22389: LD_ADDR_OWVAR 21
22393: PUSH
22394: LD_VAR 0 1
22398: ST_TO_ADDR
// InitHc ;
22399: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
22403: LD_INT 0
22405: PPUSH
22406: LD_VAR 0 2
22410: PPUSH
22411: LD_VAR 0 3
22415: PPUSH
22416: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
22420: LD_VAR 0 4
22424: PPUSH
22425: LD_VAR 0 5
22429: PPUSH
22430: CALL_OW 428
22434: PUSH
22435: LD_INT 0
22437: EQUAL
22438: IFFALSE 22462
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
22440: CALL_OW 44
22444: PPUSH
22445: LD_VAR 0 4
22449: PPUSH
22450: LD_VAR 0 5
22454: PPUSH
22455: LD_INT 1
22457: PPUSH
22458: CALL_OW 48
// end ;
22462: LD_VAR 0 6
22466: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
22467: LD_INT 0
22469: PPUSH
22470: PPUSH
// uc_side := your_side ;
22471: LD_ADDR_OWVAR 20
22475: PUSH
22476: LD_OWVAR 2
22480: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
22481: LD_VAR 0 1
22485: PUSH
22486: LD_INT 1
22488: PUSH
22489: LD_INT 2
22491: PUSH
22492: LD_INT 3
22494: PUSH
22495: LD_INT 4
22497: PUSH
22498: LD_INT 5
22500: PUSH
22501: EMPTY
22502: LIST
22503: LIST
22504: LIST
22505: LIST
22506: LIST
22507: IN
22508: IFFALSE 22520
// uc_nation := nation_american else
22510: LD_ADDR_OWVAR 21
22514: PUSH
22515: LD_INT 1
22517: ST_TO_ADDR
22518: GO 22563
// if chassis in [ 11 , 12 , 13 , 14 ] then
22520: LD_VAR 0 1
22524: PUSH
22525: LD_INT 11
22527: PUSH
22528: LD_INT 12
22530: PUSH
22531: LD_INT 13
22533: PUSH
22534: LD_INT 14
22536: PUSH
22537: EMPTY
22538: LIST
22539: LIST
22540: LIST
22541: LIST
22542: IN
22543: IFFALSE 22555
// uc_nation := nation_arabian else
22545: LD_ADDR_OWVAR 21
22549: PUSH
22550: LD_INT 2
22552: ST_TO_ADDR
22553: GO 22563
// uc_nation := nation_russian ;
22555: LD_ADDR_OWVAR 21
22559: PUSH
22560: LD_INT 3
22562: ST_TO_ADDR
// vc_chassis := chassis ;
22563: LD_ADDR_OWVAR 37
22567: PUSH
22568: LD_VAR 0 1
22572: ST_TO_ADDR
// vc_engine := engine ;
22573: LD_ADDR_OWVAR 39
22577: PUSH
22578: LD_VAR 0 2
22582: ST_TO_ADDR
// vc_control := control ;
22583: LD_ADDR_OWVAR 38
22587: PUSH
22588: LD_VAR 0 3
22592: ST_TO_ADDR
// vc_weapon := weapon ;
22593: LD_ADDR_OWVAR 40
22597: PUSH
22598: LD_VAR 0 4
22602: ST_TO_ADDR
// un := CreateVehicle ;
22603: LD_ADDR_VAR 0 8
22607: PUSH
22608: CALL_OW 45
22612: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
22613: LD_VAR 0 8
22617: PPUSH
22618: LD_INT 0
22620: PPUSH
22621: LD_INT 5
22623: PPUSH
22624: CALL_OW 12
22628: PPUSH
22629: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
22633: LD_VAR 0 8
22637: PPUSH
22638: LD_VAR 0 5
22642: PPUSH
22643: LD_VAR 0 6
22647: PPUSH
22648: LD_INT 1
22650: PPUSH
22651: CALL_OW 48
// end ;
22655: LD_VAR 0 7
22659: RET
// export hInvincible ; every 1 do
22660: GO 22662
22662: DISABLE
// hInvincible := [ ] ;
22663: LD_ADDR_EXP 110
22667: PUSH
22668: EMPTY
22669: ST_TO_ADDR
22670: END
// every 10 do var i ;
22671: GO 22673
22673: DISABLE
22674: LD_INT 0
22676: PPUSH
// begin enable ;
22677: ENABLE
// if not hInvincible then
22678: LD_EXP 110
22682: NOT
22683: IFFALSE 22687
// exit ;
22685: GO 22731
// for i in hInvincible do
22687: LD_ADDR_VAR 0 1
22691: PUSH
22692: LD_EXP 110
22696: PUSH
22697: FOR_IN
22698: IFFALSE 22729
// if GetLives ( i ) < 1000 then
22700: LD_VAR 0 1
22704: PPUSH
22705: CALL_OW 256
22709: PUSH
22710: LD_INT 1000
22712: LESS
22713: IFFALSE 22727
// SetLives ( i , 1000 ) ;
22715: LD_VAR 0 1
22719: PPUSH
22720: LD_INT 1000
22722: PPUSH
22723: CALL_OW 234
22727: GO 22697
22729: POP
22730: POP
// end ;
22731: PPOPN 1
22733: END
// export function hHackInvincible ; var i ; begin
22734: LD_INT 0
22736: PPUSH
22737: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
22738: LD_ADDR_VAR 0 2
22742: PUSH
22743: LD_INT 2
22745: PUSH
22746: LD_INT 21
22748: PUSH
22749: LD_INT 1
22751: PUSH
22752: EMPTY
22753: LIST
22754: LIST
22755: PUSH
22756: LD_INT 21
22758: PUSH
22759: LD_INT 2
22761: PUSH
22762: EMPTY
22763: LIST
22764: LIST
22765: PUSH
22766: EMPTY
22767: LIST
22768: LIST
22769: LIST
22770: PPUSH
22771: CALL_OW 69
22775: PUSH
22776: FOR_IN
22777: IFFALSE 22838
// if IsSelected ( i ) then
22779: LD_VAR 0 2
22783: PPUSH
22784: CALL_OW 306
22788: IFFALSE 22836
// begin if i in hInvincible then
22790: LD_VAR 0 2
22794: PUSH
22795: LD_EXP 110
22799: IN
22800: IFFALSE 22820
// hInvincible := hInvincible diff i else
22802: LD_ADDR_EXP 110
22806: PUSH
22807: LD_EXP 110
22811: PUSH
22812: LD_VAR 0 2
22816: DIFF
22817: ST_TO_ADDR
22818: GO 22836
// hInvincible := hInvincible union i ;
22820: LD_ADDR_EXP 110
22824: PUSH
22825: LD_EXP 110
22829: PUSH
22830: LD_VAR 0 2
22834: UNION
22835: ST_TO_ADDR
// end ;
22836: GO 22776
22838: POP
22839: POP
// end ;
22840: LD_VAR 0 1
22844: RET
// export function hHackInvisible ; var i , j ; begin
22845: LD_INT 0
22847: PPUSH
22848: PPUSH
22849: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
22850: LD_ADDR_VAR 0 2
22854: PUSH
22855: LD_INT 21
22857: PUSH
22858: LD_INT 1
22860: PUSH
22861: EMPTY
22862: LIST
22863: LIST
22864: PPUSH
22865: CALL_OW 69
22869: PUSH
22870: FOR_IN
22871: IFFALSE 22895
// if IsSelected ( i ) then
22873: LD_VAR 0 2
22877: PPUSH
22878: CALL_OW 306
22882: IFFALSE 22893
// ComForceInvisible ( i ) ;
22884: LD_VAR 0 2
22888: PPUSH
22889: CALL_OW 496
22893: GO 22870
22895: POP
22896: POP
// end ;
22897: LD_VAR 0 1
22901: RET
// export function hHackChangeYourSide ; begin
22902: LD_INT 0
22904: PPUSH
// if your_side = 8 then
22905: LD_OWVAR 2
22909: PUSH
22910: LD_INT 8
22912: EQUAL
22913: IFFALSE 22925
// your_side := 0 else
22915: LD_ADDR_OWVAR 2
22919: PUSH
22920: LD_INT 0
22922: ST_TO_ADDR
22923: GO 22939
// your_side := your_side + 1 ;
22925: LD_ADDR_OWVAR 2
22929: PUSH
22930: LD_OWVAR 2
22934: PUSH
22935: LD_INT 1
22937: PLUS
22938: ST_TO_ADDR
// end ;
22939: LD_VAR 0 1
22943: RET
// export function hHackChangeUnitSide ; var i , j ; begin
22944: LD_INT 0
22946: PPUSH
22947: PPUSH
22948: PPUSH
// for i in all_units do
22949: LD_ADDR_VAR 0 2
22953: PUSH
22954: LD_OWVAR 3
22958: PUSH
22959: FOR_IN
22960: IFFALSE 23038
// if IsSelected ( i ) then
22962: LD_VAR 0 2
22966: PPUSH
22967: CALL_OW 306
22971: IFFALSE 23036
// begin j := GetSide ( i ) ;
22973: LD_ADDR_VAR 0 3
22977: PUSH
22978: LD_VAR 0 2
22982: PPUSH
22983: CALL_OW 255
22987: ST_TO_ADDR
// if j = 8 then
22988: LD_VAR 0 3
22992: PUSH
22993: LD_INT 8
22995: EQUAL
22996: IFFALSE 23008
// j := 0 else
22998: LD_ADDR_VAR 0 3
23002: PUSH
23003: LD_INT 0
23005: ST_TO_ADDR
23006: GO 23022
// j := j + 1 ;
23008: LD_ADDR_VAR 0 3
23012: PUSH
23013: LD_VAR 0 3
23017: PUSH
23018: LD_INT 1
23020: PLUS
23021: ST_TO_ADDR
// SetSide ( i , j ) ;
23022: LD_VAR 0 2
23026: PPUSH
23027: LD_VAR 0 3
23031: PPUSH
23032: CALL_OW 235
// end ;
23036: GO 22959
23038: POP
23039: POP
// end ;
23040: LD_VAR 0 1
23044: RET
// export function hHackFog ; begin
23045: LD_INT 0
23047: PPUSH
// FogOff ( true ) ;
23048: LD_INT 1
23050: PPUSH
23051: CALL_OW 344
// end ;
23055: LD_VAR 0 1
23059: RET
// export function hHackTeleport ( unit , x , y ) ; begin
23060: LD_INT 0
23062: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
23063: LD_VAR 0 1
23067: PPUSH
23068: LD_VAR 0 2
23072: PPUSH
23073: LD_VAR 0 3
23077: PPUSH
23078: LD_INT 1
23080: PPUSH
23081: LD_INT 1
23083: PPUSH
23084: CALL_OW 483
// CenterOnXY ( x , y ) ;
23088: LD_VAR 0 2
23092: PPUSH
23093: LD_VAR 0 3
23097: PPUSH
23098: CALL_OW 84
// end ;
23102: LD_VAR 0 4
23106: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
23107: LD_INT 0
23109: PPUSH
23110: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
23111: LD_VAR 0 1
23115: NOT
23116: PUSH
23117: LD_VAR 0 2
23121: PPUSH
23122: LD_VAR 0 3
23126: PPUSH
23127: CALL_OW 488
23131: NOT
23132: OR
23133: PUSH
23134: LD_VAR 0 1
23138: PPUSH
23139: CALL_OW 266
23143: PUSH
23144: LD_INT 3
23146: NONEQUAL
23147: PUSH
23148: LD_VAR 0 1
23152: PPUSH
23153: CALL_OW 247
23157: PUSH
23158: LD_INT 1
23160: EQUAL
23161: NOT
23162: AND
23163: OR
23164: IFFALSE 23168
// exit ;
23166: GO 23317
// if GetType ( factory ) = unit_human then
23168: LD_VAR 0 1
23172: PPUSH
23173: CALL_OW 247
23177: PUSH
23178: LD_INT 1
23180: EQUAL
23181: IFFALSE 23198
// factory := IsInUnit ( factory ) ;
23183: LD_ADDR_VAR 0 1
23187: PUSH
23188: LD_VAR 0 1
23192: PPUSH
23193: CALL_OW 310
23197: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
23198: LD_VAR 0 1
23202: PPUSH
23203: CALL_OW 266
23207: PUSH
23208: LD_INT 3
23210: NONEQUAL
23211: IFFALSE 23215
// exit ;
23213: GO 23317
// if HexInfo ( x , y ) = factory then
23215: LD_VAR 0 2
23219: PPUSH
23220: LD_VAR 0 3
23224: PPUSH
23225: CALL_OW 428
23229: PUSH
23230: LD_VAR 0 1
23234: EQUAL
23235: IFFALSE 23262
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
23237: LD_ADDR_EXP 111
23241: PUSH
23242: LD_EXP 111
23246: PPUSH
23247: LD_VAR 0 1
23251: PPUSH
23252: LD_INT 0
23254: PPUSH
23255: CALL_OW 1
23259: ST_TO_ADDR
23260: GO 23313
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
23262: LD_ADDR_EXP 111
23266: PUSH
23267: LD_EXP 111
23271: PPUSH
23272: LD_VAR 0 1
23276: PPUSH
23277: LD_VAR 0 1
23281: PPUSH
23282: CALL_OW 255
23286: PUSH
23287: LD_VAR 0 1
23291: PUSH
23292: LD_VAR 0 2
23296: PUSH
23297: LD_VAR 0 3
23301: PUSH
23302: EMPTY
23303: LIST
23304: LIST
23305: LIST
23306: LIST
23307: PPUSH
23308: CALL_OW 1
23312: ST_TO_ADDR
// UpdateFactoryWaypoints ;
23313: CALL 23322 0 0
// end ;
23317: LD_VAR 0 4
23321: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
23322: LD_INT 0
23324: PPUSH
23325: PPUSH
23326: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
23327: LD_STRING resetFactoryWaypoint();
23329: PPUSH
23330: CALL_OW 559
// if factoryWaypoints then
23334: LD_EXP 111
23338: IFFALSE 23464
// begin list := PrepareArray ( factoryWaypoints ) ;
23340: LD_ADDR_VAR 0 3
23344: PUSH
23345: LD_EXP 111
23349: PPUSH
23350: CALL 69786 0 1
23354: ST_TO_ADDR
// for i := 1 to list do
23355: LD_ADDR_VAR 0 2
23359: PUSH
23360: DOUBLE
23361: LD_INT 1
23363: DEC
23364: ST_TO_ADDR
23365: LD_VAR 0 3
23369: PUSH
23370: FOR_TO
23371: IFFALSE 23462
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
23373: LD_STRING setFactoryWaypointXY(
23375: PUSH
23376: LD_VAR 0 3
23380: PUSH
23381: LD_VAR 0 2
23385: ARRAY
23386: PUSH
23387: LD_INT 1
23389: ARRAY
23390: STR
23391: PUSH
23392: LD_STRING ,
23394: STR
23395: PUSH
23396: LD_VAR 0 3
23400: PUSH
23401: LD_VAR 0 2
23405: ARRAY
23406: PUSH
23407: LD_INT 2
23409: ARRAY
23410: STR
23411: PUSH
23412: LD_STRING ,
23414: STR
23415: PUSH
23416: LD_VAR 0 3
23420: PUSH
23421: LD_VAR 0 2
23425: ARRAY
23426: PUSH
23427: LD_INT 3
23429: ARRAY
23430: STR
23431: PUSH
23432: LD_STRING ,
23434: STR
23435: PUSH
23436: LD_VAR 0 3
23440: PUSH
23441: LD_VAR 0 2
23445: ARRAY
23446: PUSH
23447: LD_INT 4
23449: ARRAY
23450: STR
23451: PUSH
23452: LD_STRING )
23454: STR
23455: PPUSH
23456: CALL_OW 559
23460: GO 23370
23462: POP
23463: POP
// end ; end ;
23464: LD_VAR 0 1
23468: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
23469: LD_INT 0
23471: PPUSH
// if HexInfo ( x , y ) = warehouse then
23472: LD_VAR 0 2
23476: PPUSH
23477: LD_VAR 0 3
23481: PPUSH
23482: CALL_OW 428
23486: PUSH
23487: LD_VAR 0 1
23491: EQUAL
23492: IFFALSE 23519
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
23494: LD_ADDR_EXP 112
23498: PUSH
23499: LD_EXP 112
23503: PPUSH
23504: LD_VAR 0 1
23508: PPUSH
23509: LD_INT 0
23511: PPUSH
23512: CALL_OW 1
23516: ST_TO_ADDR
23517: GO 23570
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
23519: LD_ADDR_EXP 112
23523: PUSH
23524: LD_EXP 112
23528: PPUSH
23529: LD_VAR 0 1
23533: PPUSH
23534: LD_VAR 0 1
23538: PPUSH
23539: CALL_OW 255
23543: PUSH
23544: LD_VAR 0 1
23548: PUSH
23549: LD_VAR 0 2
23553: PUSH
23554: LD_VAR 0 3
23558: PUSH
23559: EMPTY
23560: LIST
23561: LIST
23562: LIST
23563: LIST
23564: PPUSH
23565: CALL_OW 1
23569: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
23570: CALL 23579 0 0
// end ;
23574: LD_VAR 0 4
23578: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
23579: LD_INT 0
23581: PPUSH
23582: PPUSH
23583: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
23584: LD_STRING resetWarehouseGatheringPoints();
23586: PPUSH
23587: CALL_OW 559
// if warehouseGatheringPoints then
23591: LD_EXP 112
23595: IFFALSE 23721
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
23597: LD_ADDR_VAR 0 3
23601: PUSH
23602: LD_EXP 112
23606: PPUSH
23607: CALL 69786 0 1
23611: ST_TO_ADDR
// for i := 1 to list do
23612: LD_ADDR_VAR 0 2
23616: PUSH
23617: DOUBLE
23618: LD_INT 1
23620: DEC
23621: ST_TO_ADDR
23622: LD_VAR 0 3
23626: PUSH
23627: FOR_TO
23628: IFFALSE 23719
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
23630: LD_STRING setWarehouseGatheringPointXY(
23632: PUSH
23633: LD_VAR 0 3
23637: PUSH
23638: LD_VAR 0 2
23642: ARRAY
23643: PUSH
23644: LD_INT 1
23646: ARRAY
23647: STR
23648: PUSH
23649: LD_STRING ,
23651: STR
23652: PUSH
23653: LD_VAR 0 3
23657: PUSH
23658: LD_VAR 0 2
23662: ARRAY
23663: PUSH
23664: LD_INT 2
23666: ARRAY
23667: STR
23668: PUSH
23669: LD_STRING ,
23671: STR
23672: PUSH
23673: LD_VAR 0 3
23677: PUSH
23678: LD_VAR 0 2
23682: ARRAY
23683: PUSH
23684: LD_INT 3
23686: ARRAY
23687: STR
23688: PUSH
23689: LD_STRING ,
23691: STR
23692: PUSH
23693: LD_VAR 0 3
23697: PUSH
23698: LD_VAR 0 2
23702: ARRAY
23703: PUSH
23704: LD_INT 4
23706: ARRAY
23707: STR
23708: PUSH
23709: LD_STRING )
23711: STR
23712: PPUSH
23713: CALL_OW 559
23717: GO 23627
23719: POP
23720: POP
// end ; end ;
23721: LD_VAR 0 1
23725: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
23726: LD_EXP 112
23730: IFFALSE 24415
23732: GO 23734
23734: DISABLE
23735: LD_INT 0
23737: PPUSH
23738: PPUSH
23739: PPUSH
23740: PPUSH
23741: PPUSH
23742: PPUSH
23743: PPUSH
23744: PPUSH
23745: PPUSH
// begin enable ;
23746: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
23747: LD_ADDR_VAR 0 3
23751: PUSH
23752: LD_EXP 112
23756: PPUSH
23757: CALL 69786 0 1
23761: ST_TO_ADDR
// if not list then
23762: LD_VAR 0 3
23766: NOT
23767: IFFALSE 23771
// exit ;
23769: GO 24415
// for i := 1 to list do
23771: LD_ADDR_VAR 0 1
23775: PUSH
23776: DOUBLE
23777: LD_INT 1
23779: DEC
23780: ST_TO_ADDR
23781: LD_VAR 0 3
23785: PUSH
23786: FOR_TO
23787: IFFALSE 24413
// begin depot := list [ i ] [ 2 ] ;
23789: LD_ADDR_VAR 0 8
23793: PUSH
23794: LD_VAR 0 3
23798: PUSH
23799: LD_VAR 0 1
23803: ARRAY
23804: PUSH
23805: LD_INT 2
23807: ARRAY
23808: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
23809: LD_ADDR_VAR 0 5
23813: PUSH
23814: LD_VAR 0 3
23818: PUSH
23819: LD_VAR 0 1
23823: ARRAY
23824: PUSH
23825: LD_INT 1
23827: ARRAY
23828: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
23829: LD_VAR 0 8
23833: PPUSH
23834: CALL_OW 301
23838: PUSH
23839: LD_VAR 0 5
23843: PUSH
23844: LD_VAR 0 8
23848: PPUSH
23849: CALL_OW 255
23853: NONEQUAL
23854: OR
23855: IFFALSE 23884
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
23857: LD_ADDR_EXP 112
23861: PUSH
23862: LD_EXP 112
23866: PPUSH
23867: LD_VAR 0 8
23871: PPUSH
23872: LD_INT 0
23874: PPUSH
23875: CALL_OW 1
23879: ST_TO_ADDR
// exit ;
23880: POP
23881: POP
23882: GO 24415
// end ; x := list [ i ] [ 3 ] ;
23884: LD_ADDR_VAR 0 6
23888: PUSH
23889: LD_VAR 0 3
23893: PUSH
23894: LD_VAR 0 1
23898: ARRAY
23899: PUSH
23900: LD_INT 3
23902: ARRAY
23903: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
23904: LD_ADDR_VAR 0 7
23908: PUSH
23909: LD_VAR 0 3
23913: PUSH
23914: LD_VAR 0 1
23918: ARRAY
23919: PUSH
23920: LD_INT 4
23922: ARRAY
23923: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
23924: LD_ADDR_VAR 0 9
23928: PUSH
23929: LD_VAR 0 6
23933: PPUSH
23934: LD_VAR 0 7
23938: PPUSH
23939: LD_INT 16
23941: PPUSH
23942: CALL 68374 0 3
23946: ST_TO_ADDR
// if not cratesNearbyPoint then
23947: LD_VAR 0 9
23951: NOT
23952: IFFALSE 23958
// exit ;
23954: POP
23955: POP
23956: GO 24415
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
23958: LD_ADDR_VAR 0 4
23962: PUSH
23963: LD_INT 22
23965: PUSH
23966: LD_VAR 0 5
23970: PUSH
23971: EMPTY
23972: LIST
23973: LIST
23974: PUSH
23975: LD_INT 3
23977: PUSH
23978: LD_INT 60
23980: PUSH
23981: EMPTY
23982: LIST
23983: PUSH
23984: EMPTY
23985: LIST
23986: LIST
23987: PUSH
23988: LD_INT 91
23990: PUSH
23991: LD_VAR 0 8
23995: PUSH
23996: LD_INT 6
23998: PUSH
23999: EMPTY
24000: LIST
24001: LIST
24002: LIST
24003: PUSH
24004: LD_INT 2
24006: PUSH
24007: LD_INT 25
24009: PUSH
24010: LD_INT 2
24012: PUSH
24013: EMPTY
24014: LIST
24015: LIST
24016: PUSH
24017: LD_INT 25
24019: PUSH
24020: LD_INT 16
24022: PUSH
24023: EMPTY
24024: LIST
24025: LIST
24026: PUSH
24027: EMPTY
24028: LIST
24029: LIST
24030: LIST
24031: PUSH
24032: EMPTY
24033: LIST
24034: LIST
24035: LIST
24036: LIST
24037: PPUSH
24038: CALL_OW 69
24042: PUSH
24043: LD_VAR 0 8
24047: PPUSH
24048: CALL_OW 313
24052: PPUSH
24053: LD_INT 3
24055: PUSH
24056: LD_INT 60
24058: PUSH
24059: EMPTY
24060: LIST
24061: PUSH
24062: EMPTY
24063: LIST
24064: LIST
24065: PUSH
24066: LD_INT 2
24068: PUSH
24069: LD_INT 25
24071: PUSH
24072: LD_INT 2
24074: PUSH
24075: EMPTY
24076: LIST
24077: LIST
24078: PUSH
24079: LD_INT 25
24081: PUSH
24082: LD_INT 16
24084: PUSH
24085: EMPTY
24086: LIST
24087: LIST
24088: PUSH
24089: EMPTY
24090: LIST
24091: LIST
24092: LIST
24093: PUSH
24094: EMPTY
24095: LIST
24096: LIST
24097: PPUSH
24098: CALL_OW 72
24102: UNION
24103: ST_TO_ADDR
// if tmp then
24104: LD_VAR 0 4
24108: IFFALSE 24188
// begin tmp := ShrinkArray ( tmp , 3 ) ;
24110: LD_ADDR_VAR 0 4
24114: PUSH
24115: LD_VAR 0 4
24119: PPUSH
24120: LD_INT 3
24122: PPUSH
24123: CALL 66343 0 2
24127: ST_TO_ADDR
// for j in tmp do
24128: LD_ADDR_VAR 0 2
24132: PUSH
24133: LD_VAR 0 4
24137: PUSH
24138: FOR_IN
24139: IFFALSE 24182
// begin if IsInUnit ( j ) then
24141: LD_VAR 0 2
24145: PPUSH
24146: CALL_OW 310
24150: IFFALSE 24161
// ComExit ( j ) ;
24152: LD_VAR 0 2
24156: PPUSH
24157: CALL 66426 0 1
// AddComCollect ( j , x , y ) ;
24161: LD_VAR 0 2
24165: PPUSH
24166: LD_VAR 0 6
24170: PPUSH
24171: LD_VAR 0 7
24175: PPUSH
24176: CALL_OW 177
// end ;
24180: GO 24138
24182: POP
24183: POP
// exit ;
24184: POP
24185: POP
24186: GO 24415
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
24188: LD_ADDR_VAR 0 4
24192: PUSH
24193: LD_INT 22
24195: PUSH
24196: LD_VAR 0 5
24200: PUSH
24201: EMPTY
24202: LIST
24203: LIST
24204: PUSH
24205: LD_INT 91
24207: PUSH
24208: LD_VAR 0 8
24212: PUSH
24213: LD_INT 8
24215: PUSH
24216: EMPTY
24217: LIST
24218: LIST
24219: LIST
24220: PUSH
24221: LD_INT 2
24223: PUSH
24224: LD_INT 34
24226: PUSH
24227: LD_INT 12
24229: PUSH
24230: EMPTY
24231: LIST
24232: LIST
24233: PUSH
24234: LD_INT 34
24236: PUSH
24237: LD_INT 51
24239: PUSH
24240: EMPTY
24241: LIST
24242: LIST
24243: PUSH
24244: LD_INT 34
24246: PUSH
24247: LD_INT 32
24249: PUSH
24250: EMPTY
24251: LIST
24252: LIST
24253: PUSH
24254: LD_INT 34
24256: PUSH
24257: LD_INT 89
24259: PUSH
24260: EMPTY
24261: LIST
24262: LIST
24263: PUSH
24264: EMPTY
24265: LIST
24266: LIST
24267: LIST
24268: LIST
24269: LIST
24270: PUSH
24271: EMPTY
24272: LIST
24273: LIST
24274: LIST
24275: PPUSH
24276: CALL_OW 69
24280: ST_TO_ADDR
// if tmp then
24281: LD_VAR 0 4
24285: IFFALSE 24411
// begin for j in tmp do
24287: LD_ADDR_VAR 0 2
24291: PUSH
24292: LD_VAR 0 4
24296: PUSH
24297: FOR_IN
24298: IFFALSE 24409
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
24300: LD_VAR 0 2
24304: PPUSH
24305: CALL_OW 262
24309: PUSH
24310: LD_INT 3
24312: EQUAL
24313: PUSH
24314: LD_VAR 0 2
24318: PPUSH
24319: CALL_OW 261
24323: PUSH
24324: LD_INT 20
24326: GREATER
24327: OR
24328: PUSH
24329: LD_VAR 0 2
24333: PPUSH
24334: CALL_OW 314
24338: NOT
24339: AND
24340: PUSH
24341: LD_VAR 0 2
24345: PPUSH
24346: CALL_OW 263
24350: PUSH
24351: LD_INT 1
24353: NONEQUAL
24354: PUSH
24355: LD_VAR 0 2
24359: PPUSH
24360: CALL_OW 311
24364: OR
24365: AND
24366: IFFALSE 24407
// begin ComCollect ( j , x , y ) ;
24368: LD_VAR 0 2
24372: PPUSH
24373: LD_VAR 0 6
24377: PPUSH
24378: LD_VAR 0 7
24382: PPUSH
24383: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
24387: LD_VAR 0 2
24391: PPUSH
24392: LD_VAR 0 8
24396: PPUSH
24397: CALL_OW 172
// exit ;
24401: POP
24402: POP
24403: POP
24404: POP
24405: GO 24415
// end ;
24407: GO 24297
24409: POP
24410: POP
// end ; end ;
24411: GO 23786
24413: POP
24414: POP
// end ; end_of_file
24415: PPOPN 9
24417: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
24418: LD_INT 0
24420: PPUSH
24421: PPUSH
24422: PPUSH
24423: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
24424: LD_VAR 0 1
24428: PPUSH
24429: CALL_OW 264
24433: PUSH
24434: LD_INT 91
24436: EQUAL
24437: IFFALSE 24509
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
24439: LD_INT 68
24441: PPUSH
24442: LD_VAR 0 1
24446: PPUSH
24447: CALL_OW 255
24451: PPUSH
24452: CALL_OW 321
24456: PUSH
24457: LD_INT 2
24459: EQUAL
24460: IFFALSE 24472
// eff := 70 else
24462: LD_ADDR_VAR 0 4
24466: PUSH
24467: LD_INT 70
24469: ST_TO_ADDR
24470: GO 24480
// eff := 30 ;
24472: LD_ADDR_VAR 0 4
24476: PUSH
24477: LD_INT 30
24479: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
24480: LD_VAR 0 1
24484: PPUSH
24485: CALL_OW 250
24489: PPUSH
24490: LD_VAR 0 1
24494: PPUSH
24495: CALL_OW 251
24499: PPUSH
24500: LD_VAR 0 4
24504: PPUSH
24505: CALL_OW 495
// end ; end ;
24509: LD_VAR 0 2
24513: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
24514: LD_INT 0
24516: PPUSH
// end ;
24517: LD_VAR 0 4
24521: RET
// export function SOS_Command ( cmd ) ; begin
24522: LD_INT 0
24524: PPUSH
// end ;
24525: LD_VAR 0 2
24529: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
24530: LD_INT 0
24532: PPUSH
// end ;
24533: LD_VAR 0 6
24537: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
24538: LD_INT 0
24540: PPUSH
24541: PPUSH
// if not vehicle or not factory then
24542: LD_VAR 0 1
24546: NOT
24547: PUSH
24548: LD_VAR 0 2
24552: NOT
24553: OR
24554: IFFALSE 24558
// exit ;
24556: GO 24789
// if factoryWaypoints >= factory then
24558: LD_EXP 111
24562: PUSH
24563: LD_VAR 0 2
24567: GREATEREQUAL
24568: IFFALSE 24789
// if factoryWaypoints [ factory ] then
24570: LD_EXP 111
24574: PUSH
24575: LD_VAR 0 2
24579: ARRAY
24580: IFFALSE 24789
// begin if GetControl ( vehicle ) = control_manual then
24582: LD_VAR 0 1
24586: PPUSH
24587: CALL_OW 263
24591: PUSH
24592: LD_INT 1
24594: EQUAL
24595: IFFALSE 24676
// begin driver := IsDrivenBy ( vehicle ) ;
24597: LD_ADDR_VAR 0 4
24601: PUSH
24602: LD_VAR 0 1
24606: PPUSH
24607: CALL_OW 311
24611: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
24612: LD_VAR 0 4
24616: PPUSH
24617: LD_EXP 111
24621: PUSH
24622: LD_VAR 0 2
24626: ARRAY
24627: PUSH
24628: LD_INT 3
24630: ARRAY
24631: PPUSH
24632: LD_EXP 111
24636: PUSH
24637: LD_VAR 0 2
24641: ARRAY
24642: PUSH
24643: LD_INT 4
24645: ARRAY
24646: PPUSH
24647: CALL_OW 171
// AddComExitVehicle ( driver ) ;
24651: LD_VAR 0 4
24655: PPUSH
24656: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
24660: LD_VAR 0 4
24664: PPUSH
24665: LD_VAR 0 2
24669: PPUSH
24670: CALL_OW 180
// end else
24674: GO 24789
// if GetControl ( vehicle ) = control_remote then
24676: LD_VAR 0 1
24680: PPUSH
24681: CALL_OW 263
24685: PUSH
24686: LD_INT 2
24688: EQUAL
24689: IFFALSE 24750
// begin wait ( 0 0$2 ) ;
24691: LD_INT 70
24693: PPUSH
24694: CALL_OW 67
// if Connect ( vehicle ) then
24698: LD_VAR 0 1
24702: PPUSH
24703: CALL 36647 0 1
24707: IFFALSE 24748
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
24709: LD_VAR 0 1
24713: PPUSH
24714: LD_EXP 111
24718: PUSH
24719: LD_VAR 0 2
24723: ARRAY
24724: PUSH
24725: LD_INT 3
24727: ARRAY
24728: PPUSH
24729: LD_EXP 111
24733: PUSH
24734: LD_VAR 0 2
24738: ARRAY
24739: PUSH
24740: LD_INT 4
24742: ARRAY
24743: PPUSH
24744: CALL_OW 171
// end else
24748: GO 24789
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
24750: LD_VAR 0 1
24754: PPUSH
24755: LD_EXP 111
24759: PUSH
24760: LD_VAR 0 2
24764: ARRAY
24765: PUSH
24766: LD_INT 3
24768: ARRAY
24769: PPUSH
24770: LD_EXP 111
24774: PUSH
24775: LD_VAR 0 2
24779: ARRAY
24780: PUSH
24781: LD_INT 4
24783: ARRAY
24784: PPUSH
24785: CALL_OW 171
// end ; end ;
24789: LD_VAR 0 3
24793: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
24794: LD_INT 0
24796: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
24797: LD_VAR 0 1
24801: PUSH
24802: LD_INT 250
24804: EQUAL
24805: PUSH
24806: LD_VAR 0 2
24810: PPUSH
24811: CALL_OW 264
24815: PUSH
24816: LD_INT 81
24818: EQUAL
24819: AND
24820: IFFALSE 24841
// MinerPlaceMine ( unit , x , y ) ;
24822: LD_VAR 0 2
24826: PPUSH
24827: LD_VAR 0 4
24831: PPUSH
24832: LD_VAR 0 5
24836: PPUSH
24837: CALL 27226 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
24841: LD_VAR 0 1
24845: PUSH
24846: LD_INT 251
24848: EQUAL
24849: PUSH
24850: LD_VAR 0 2
24854: PPUSH
24855: CALL_OW 264
24859: PUSH
24860: LD_INT 81
24862: EQUAL
24863: AND
24864: IFFALSE 24885
// MinerDetonateMine ( unit , x , y ) ;
24866: LD_VAR 0 2
24870: PPUSH
24871: LD_VAR 0 4
24875: PPUSH
24876: LD_VAR 0 5
24880: PPUSH
24881: CALL 27501 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
24885: LD_VAR 0 1
24889: PUSH
24890: LD_INT 252
24892: EQUAL
24893: PUSH
24894: LD_VAR 0 2
24898: PPUSH
24899: CALL_OW 264
24903: PUSH
24904: LD_INT 81
24906: EQUAL
24907: AND
24908: IFFALSE 24929
// MinerCreateMinefield ( unit , x , y ) ;
24910: LD_VAR 0 2
24914: PPUSH
24915: LD_VAR 0 4
24919: PPUSH
24920: LD_VAR 0 5
24924: PPUSH
24925: CALL 27918 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
24929: LD_VAR 0 1
24933: PUSH
24934: LD_INT 253
24936: EQUAL
24937: PUSH
24938: LD_VAR 0 2
24942: PPUSH
24943: CALL_OW 257
24947: PUSH
24948: LD_INT 5
24950: EQUAL
24951: AND
24952: IFFALSE 24973
// ComBinocular ( unit , x , y ) ;
24954: LD_VAR 0 2
24958: PPUSH
24959: LD_VAR 0 4
24963: PPUSH
24964: LD_VAR 0 5
24968: PPUSH
24969: CALL 28287 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
24973: LD_VAR 0 1
24977: PUSH
24978: LD_INT 254
24980: EQUAL
24981: PUSH
24982: LD_VAR 0 2
24986: PPUSH
24987: CALL_OW 264
24991: PUSH
24992: LD_INT 99
24994: EQUAL
24995: AND
24996: PUSH
24997: LD_VAR 0 3
25001: PPUSH
25002: CALL_OW 263
25006: PUSH
25007: LD_INT 3
25009: EQUAL
25010: AND
25011: IFFALSE 25027
// HackDestroyVehicle ( unit , selectedUnit ) ;
25013: LD_VAR 0 2
25017: PPUSH
25018: LD_VAR 0 3
25022: PPUSH
25023: CALL 26590 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
25027: LD_VAR 0 1
25031: PUSH
25032: LD_INT 255
25034: EQUAL
25035: PUSH
25036: LD_VAR 0 2
25040: PPUSH
25041: CALL_OW 264
25045: PUSH
25046: LD_INT 14
25048: PUSH
25049: LD_INT 53
25051: PUSH
25052: EMPTY
25053: LIST
25054: LIST
25055: IN
25056: AND
25057: PUSH
25058: LD_VAR 0 4
25062: PPUSH
25063: LD_VAR 0 5
25067: PPUSH
25068: CALL_OW 488
25072: AND
25073: IFFALSE 25097
// CutTreeXYR ( unit , x , y , 12 ) ;
25075: LD_VAR 0 2
25079: PPUSH
25080: LD_VAR 0 4
25084: PPUSH
25085: LD_VAR 0 5
25089: PPUSH
25090: LD_INT 12
25092: PPUSH
25093: CALL 25160 0 4
// if cmd = 256 then
25097: LD_VAR 0 1
25101: PUSH
25102: LD_INT 256
25104: EQUAL
25105: IFFALSE 25126
// SetFactoryWaypoint ( unit , x , y ) ;
25107: LD_VAR 0 2
25111: PPUSH
25112: LD_VAR 0 4
25116: PPUSH
25117: LD_VAR 0 5
25121: PPUSH
25122: CALL 23107 0 3
// if cmd = 257 then
25126: LD_VAR 0 1
25130: PUSH
25131: LD_INT 257
25133: EQUAL
25134: IFFALSE 25155
// SetWarehouseGatheringPoint ( unit , x , y ) ;
25136: LD_VAR 0 2
25140: PPUSH
25141: LD_VAR 0 4
25145: PPUSH
25146: LD_VAR 0 5
25150: PPUSH
25151: CALL 23469 0 3
// end ;
25155: LD_VAR 0 6
25159: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
25160: LD_INT 0
25162: PPUSH
25163: PPUSH
25164: PPUSH
25165: PPUSH
25166: PPUSH
25167: PPUSH
25168: PPUSH
25169: PPUSH
25170: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
25171: LD_VAR 0 1
25175: NOT
25176: PUSH
25177: LD_VAR 0 2
25181: PPUSH
25182: LD_VAR 0 3
25186: PPUSH
25187: CALL_OW 488
25191: NOT
25192: OR
25193: PUSH
25194: LD_VAR 0 4
25198: NOT
25199: OR
25200: IFFALSE 25204
// exit ;
25202: GO 25544
// list := [ ] ;
25204: LD_ADDR_VAR 0 13
25208: PUSH
25209: EMPTY
25210: ST_TO_ADDR
// if x - r < 0 then
25211: LD_VAR 0 2
25215: PUSH
25216: LD_VAR 0 4
25220: MINUS
25221: PUSH
25222: LD_INT 0
25224: LESS
25225: IFFALSE 25237
// min_x := 0 else
25227: LD_ADDR_VAR 0 7
25231: PUSH
25232: LD_INT 0
25234: ST_TO_ADDR
25235: GO 25253
// min_x := x - r ;
25237: LD_ADDR_VAR 0 7
25241: PUSH
25242: LD_VAR 0 2
25246: PUSH
25247: LD_VAR 0 4
25251: MINUS
25252: ST_TO_ADDR
// if y - r < 0 then
25253: LD_VAR 0 3
25257: PUSH
25258: LD_VAR 0 4
25262: MINUS
25263: PUSH
25264: LD_INT 0
25266: LESS
25267: IFFALSE 25279
// min_y := 0 else
25269: LD_ADDR_VAR 0 8
25273: PUSH
25274: LD_INT 0
25276: ST_TO_ADDR
25277: GO 25295
// min_y := y - r ;
25279: LD_ADDR_VAR 0 8
25283: PUSH
25284: LD_VAR 0 3
25288: PUSH
25289: LD_VAR 0 4
25293: MINUS
25294: ST_TO_ADDR
// max_x := x + r ;
25295: LD_ADDR_VAR 0 9
25299: PUSH
25300: LD_VAR 0 2
25304: PUSH
25305: LD_VAR 0 4
25309: PLUS
25310: ST_TO_ADDR
// max_y := y + r ;
25311: LD_ADDR_VAR 0 10
25315: PUSH
25316: LD_VAR 0 3
25320: PUSH
25321: LD_VAR 0 4
25325: PLUS
25326: ST_TO_ADDR
// for _x = min_x to max_x do
25327: LD_ADDR_VAR 0 11
25331: PUSH
25332: DOUBLE
25333: LD_VAR 0 7
25337: DEC
25338: ST_TO_ADDR
25339: LD_VAR 0 9
25343: PUSH
25344: FOR_TO
25345: IFFALSE 25462
// for _y = min_y to max_y do
25347: LD_ADDR_VAR 0 12
25351: PUSH
25352: DOUBLE
25353: LD_VAR 0 8
25357: DEC
25358: ST_TO_ADDR
25359: LD_VAR 0 10
25363: PUSH
25364: FOR_TO
25365: IFFALSE 25458
// begin if not ValidHex ( _x , _y ) then
25367: LD_VAR 0 11
25371: PPUSH
25372: LD_VAR 0 12
25376: PPUSH
25377: CALL_OW 488
25381: NOT
25382: IFFALSE 25386
// continue ;
25384: GO 25364
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
25386: LD_VAR 0 11
25390: PPUSH
25391: LD_VAR 0 12
25395: PPUSH
25396: CALL_OW 351
25400: PUSH
25401: LD_VAR 0 11
25405: PPUSH
25406: LD_VAR 0 12
25410: PPUSH
25411: CALL_OW 554
25415: AND
25416: IFFALSE 25456
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
25418: LD_ADDR_VAR 0 13
25422: PUSH
25423: LD_VAR 0 13
25427: PPUSH
25428: LD_VAR 0 13
25432: PUSH
25433: LD_INT 1
25435: PLUS
25436: PPUSH
25437: LD_VAR 0 11
25441: PUSH
25442: LD_VAR 0 12
25446: PUSH
25447: EMPTY
25448: LIST
25449: LIST
25450: PPUSH
25451: CALL_OW 2
25455: ST_TO_ADDR
// end ;
25456: GO 25364
25458: POP
25459: POP
25460: GO 25344
25462: POP
25463: POP
// if not list then
25464: LD_VAR 0 13
25468: NOT
25469: IFFALSE 25473
// exit ;
25471: GO 25544
// for i in list do
25473: LD_ADDR_VAR 0 6
25477: PUSH
25478: LD_VAR 0 13
25482: PUSH
25483: FOR_IN
25484: IFFALSE 25542
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
25486: LD_VAR 0 1
25490: PPUSH
25491: LD_STRING M
25493: PUSH
25494: LD_VAR 0 6
25498: PUSH
25499: LD_INT 1
25501: ARRAY
25502: PUSH
25503: LD_VAR 0 6
25507: PUSH
25508: LD_INT 2
25510: ARRAY
25511: PUSH
25512: LD_INT 0
25514: PUSH
25515: LD_INT 0
25517: PUSH
25518: LD_INT 0
25520: PUSH
25521: LD_INT 0
25523: PUSH
25524: EMPTY
25525: LIST
25526: LIST
25527: LIST
25528: LIST
25529: LIST
25530: LIST
25531: LIST
25532: PUSH
25533: EMPTY
25534: LIST
25535: PPUSH
25536: CALL_OW 447
25540: GO 25483
25542: POP
25543: POP
// end ;
25544: LD_VAR 0 5
25548: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
25549: LD_EXP 114
25553: NOT
25554: IFFALSE 25604
25556: GO 25558
25558: DISABLE
// begin initHack := true ;
25559: LD_ADDR_EXP 114
25563: PUSH
25564: LD_INT 1
25566: ST_TO_ADDR
// hackTanks := [ ] ;
25567: LD_ADDR_EXP 115
25571: PUSH
25572: EMPTY
25573: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
25574: LD_ADDR_EXP 116
25578: PUSH
25579: EMPTY
25580: ST_TO_ADDR
// hackLimit := 3 ;
25581: LD_ADDR_EXP 117
25585: PUSH
25586: LD_INT 3
25588: ST_TO_ADDR
// hackDist := 12 ;
25589: LD_ADDR_EXP 118
25593: PUSH
25594: LD_INT 12
25596: ST_TO_ADDR
// hackCounter := [ ] ;
25597: LD_ADDR_EXP 119
25601: PUSH
25602: EMPTY
25603: ST_TO_ADDR
// end ;
25604: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
25605: LD_EXP 114
25609: PUSH
25610: LD_INT 34
25612: PUSH
25613: LD_INT 99
25615: PUSH
25616: EMPTY
25617: LIST
25618: LIST
25619: PPUSH
25620: CALL_OW 69
25624: AND
25625: IFFALSE 25878
25627: GO 25629
25629: DISABLE
25630: LD_INT 0
25632: PPUSH
25633: PPUSH
// begin enable ;
25634: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
25635: LD_ADDR_VAR 0 1
25639: PUSH
25640: LD_INT 34
25642: PUSH
25643: LD_INT 99
25645: PUSH
25646: EMPTY
25647: LIST
25648: LIST
25649: PPUSH
25650: CALL_OW 69
25654: PUSH
25655: FOR_IN
25656: IFFALSE 25876
// begin if not i in hackTanks then
25658: LD_VAR 0 1
25662: PUSH
25663: LD_EXP 115
25667: IN
25668: NOT
25669: IFFALSE 25752
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
25671: LD_ADDR_EXP 115
25675: PUSH
25676: LD_EXP 115
25680: PPUSH
25681: LD_EXP 115
25685: PUSH
25686: LD_INT 1
25688: PLUS
25689: PPUSH
25690: LD_VAR 0 1
25694: PPUSH
25695: CALL_OW 1
25699: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
25700: LD_ADDR_EXP 116
25704: PUSH
25705: LD_EXP 116
25709: PPUSH
25710: LD_EXP 116
25714: PUSH
25715: LD_INT 1
25717: PLUS
25718: PPUSH
25719: EMPTY
25720: PPUSH
25721: CALL_OW 1
25725: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
25726: LD_ADDR_EXP 119
25730: PUSH
25731: LD_EXP 119
25735: PPUSH
25736: LD_EXP 119
25740: PUSH
25741: LD_INT 1
25743: PLUS
25744: PPUSH
25745: EMPTY
25746: PPUSH
25747: CALL_OW 1
25751: ST_TO_ADDR
// end ; if not IsOk ( i ) then
25752: LD_VAR 0 1
25756: PPUSH
25757: CALL_OW 302
25761: NOT
25762: IFFALSE 25775
// begin HackUnlinkAll ( i ) ;
25764: LD_VAR 0 1
25768: PPUSH
25769: CALL 25881 0 1
// continue ;
25773: GO 25655
// end ; HackCheckCapturedStatus ( i ) ;
25775: LD_VAR 0 1
25779: PPUSH
25780: CALL 26324 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
25784: LD_ADDR_VAR 0 2
25788: PUSH
25789: LD_INT 81
25791: PUSH
25792: LD_VAR 0 1
25796: PPUSH
25797: CALL_OW 255
25801: PUSH
25802: EMPTY
25803: LIST
25804: LIST
25805: PUSH
25806: LD_INT 33
25808: PUSH
25809: LD_INT 3
25811: PUSH
25812: EMPTY
25813: LIST
25814: LIST
25815: PUSH
25816: LD_INT 91
25818: PUSH
25819: LD_VAR 0 1
25823: PUSH
25824: LD_EXP 118
25828: PUSH
25829: EMPTY
25830: LIST
25831: LIST
25832: LIST
25833: PUSH
25834: LD_INT 50
25836: PUSH
25837: EMPTY
25838: LIST
25839: PUSH
25840: EMPTY
25841: LIST
25842: LIST
25843: LIST
25844: LIST
25845: PPUSH
25846: CALL_OW 69
25850: ST_TO_ADDR
// if not tmp then
25851: LD_VAR 0 2
25855: NOT
25856: IFFALSE 25860
// continue ;
25858: GO 25655
// HackLink ( i , tmp ) ;
25860: LD_VAR 0 1
25864: PPUSH
25865: LD_VAR 0 2
25869: PPUSH
25870: CALL 26017 0 2
// end ;
25874: GO 25655
25876: POP
25877: POP
// end ;
25878: PPOPN 2
25880: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
25881: LD_INT 0
25883: PPUSH
25884: PPUSH
25885: PPUSH
// if not hack in hackTanks then
25886: LD_VAR 0 1
25890: PUSH
25891: LD_EXP 115
25895: IN
25896: NOT
25897: IFFALSE 25901
// exit ;
25899: GO 26012
// index := GetElementIndex ( hackTanks , hack ) ;
25901: LD_ADDR_VAR 0 4
25905: PUSH
25906: LD_EXP 115
25910: PPUSH
25911: LD_VAR 0 1
25915: PPUSH
25916: CALL 33454 0 2
25920: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
25921: LD_EXP 116
25925: PUSH
25926: LD_VAR 0 4
25930: ARRAY
25931: IFFALSE 26012
// begin for i in hackTanksCaptured [ index ] do
25933: LD_ADDR_VAR 0 3
25937: PUSH
25938: LD_EXP 116
25942: PUSH
25943: LD_VAR 0 4
25947: ARRAY
25948: PUSH
25949: FOR_IN
25950: IFFALSE 25976
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
25952: LD_VAR 0 3
25956: PUSH
25957: LD_INT 1
25959: ARRAY
25960: PPUSH
25961: LD_VAR 0 3
25965: PUSH
25966: LD_INT 2
25968: ARRAY
25969: PPUSH
25970: CALL_OW 235
25974: GO 25949
25976: POP
25977: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
25978: LD_ADDR_EXP 116
25982: PUSH
25983: LD_EXP 116
25987: PPUSH
25988: LD_VAR 0 4
25992: PPUSH
25993: EMPTY
25994: PPUSH
25995: CALL_OW 1
25999: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
26000: LD_VAR 0 1
26004: PPUSH
26005: LD_INT 0
26007: PPUSH
26008: CALL_OW 505
// end ; end ;
26012: LD_VAR 0 2
26016: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
26017: LD_INT 0
26019: PPUSH
26020: PPUSH
26021: PPUSH
// if not hack in hackTanks or not vehicles then
26022: LD_VAR 0 1
26026: PUSH
26027: LD_EXP 115
26031: IN
26032: NOT
26033: PUSH
26034: LD_VAR 0 2
26038: NOT
26039: OR
26040: IFFALSE 26044
// exit ;
26042: GO 26319
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
26044: LD_ADDR_VAR 0 2
26048: PUSH
26049: LD_VAR 0 1
26053: PPUSH
26054: LD_VAR 0 2
26058: PPUSH
26059: LD_INT 1
26061: PPUSH
26062: LD_INT 1
26064: PPUSH
26065: CALL 34104 0 4
26069: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
26070: LD_ADDR_VAR 0 5
26074: PUSH
26075: LD_EXP 115
26079: PPUSH
26080: LD_VAR 0 1
26084: PPUSH
26085: CALL 33454 0 2
26089: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
26090: LD_EXP 116
26094: PUSH
26095: LD_VAR 0 5
26099: ARRAY
26100: PUSH
26101: LD_EXP 117
26105: LESS
26106: IFFALSE 26295
// begin for i := 1 to vehicles do
26108: LD_ADDR_VAR 0 4
26112: PUSH
26113: DOUBLE
26114: LD_INT 1
26116: DEC
26117: ST_TO_ADDR
26118: LD_VAR 0 2
26122: PUSH
26123: FOR_TO
26124: IFFALSE 26293
// begin if hackTanksCaptured [ index ] = hackLimit then
26126: LD_EXP 116
26130: PUSH
26131: LD_VAR 0 5
26135: ARRAY
26136: PUSH
26137: LD_EXP 117
26141: EQUAL
26142: IFFALSE 26146
// break ;
26144: GO 26293
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
26146: LD_ADDR_EXP 119
26150: PUSH
26151: LD_EXP 119
26155: PPUSH
26156: LD_VAR 0 5
26160: PPUSH
26161: LD_EXP 119
26165: PUSH
26166: LD_VAR 0 5
26170: ARRAY
26171: PUSH
26172: LD_INT 1
26174: PLUS
26175: PPUSH
26176: CALL_OW 1
26180: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
26181: LD_ADDR_EXP 116
26185: PUSH
26186: LD_EXP 116
26190: PPUSH
26191: LD_VAR 0 5
26195: PUSH
26196: LD_EXP 116
26200: PUSH
26201: LD_VAR 0 5
26205: ARRAY
26206: PUSH
26207: LD_INT 1
26209: PLUS
26210: PUSH
26211: EMPTY
26212: LIST
26213: LIST
26214: PPUSH
26215: LD_VAR 0 2
26219: PUSH
26220: LD_VAR 0 4
26224: ARRAY
26225: PUSH
26226: LD_VAR 0 2
26230: PUSH
26231: LD_VAR 0 4
26235: ARRAY
26236: PPUSH
26237: CALL_OW 255
26241: PUSH
26242: EMPTY
26243: LIST
26244: LIST
26245: PPUSH
26246: CALL 33669 0 3
26250: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
26251: LD_VAR 0 2
26255: PUSH
26256: LD_VAR 0 4
26260: ARRAY
26261: PPUSH
26262: LD_VAR 0 1
26266: PPUSH
26267: CALL_OW 255
26271: PPUSH
26272: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
26276: LD_VAR 0 2
26280: PUSH
26281: LD_VAR 0 4
26285: ARRAY
26286: PPUSH
26287: CALL_OW 141
// end ;
26291: GO 26123
26293: POP
26294: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
26295: LD_VAR 0 1
26299: PPUSH
26300: LD_EXP 116
26304: PUSH
26305: LD_VAR 0 5
26309: ARRAY
26310: PUSH
26311: LD_INT 0
26313: PLUS
26314: PPUSH
26315: CALL_OW 505
// end ;
26319: LD_VAR 0 3
26323: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
26324: LD_INT 0
26326: PPUSH
26327: PPUSH
26328: PPUSH
26329: PPUSH
// if not hack in hackTanks then
26330: LD_VAR 0 1
26334: PUSH
26335: LD_EXP 115
26339: IN
26340: NOT
26341: IFFALSE 26345
// exit ;
26343: GO 26585
// index := GetElementIndex ( hackTanks , hack ) ;
26345: LD_ADDR_VAR 0 4
26349: PUSH
26350: LD_EXP 115
26354: PPUSH
26355: LD_VAR 0 1
26359: PPUSH
26360: CALL 33454 0 2
26364: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
26365: LD_ADDR_VAR 0 3
26369: PUSH
26370: DOUBLE
26371: LD_EXP 116
26375: PUSH
26376: LD_VAR 0 4
26380: ARRAY
26381: INC
26382: ST_TO_ADDR
26383: LD_INT 1
26385: PUSH
26386: FOR_DOWNTO
26387: IFFALSE 26559
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
26389: LD_ADDR_VAR 0 5
26393: PUSH
26394: LD_EXP 116
26398: PUSH
26399: LD_VAR 0 4
26403: ARRAY
26404: PUSH
26405: LD_VAR 0 3
26409: ARRAY
26410: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
26411: LD_VAR 0 5
26415: PUSH
26416: LD_INT 1
26418: ARRAY
26419: PPUSH
26420: CALL_OW 302
26424: NOT
26425: PUSH
26426: LD_VAR 0 5
26430: PUSH
26431: LD_INT 1
26433: ARRAY
26434: PPUSH
26435: CALL_OW 255
26439: PUSH
26440: LD_VAR 0 1
26444: PPUSH
26445: CALL_OW 255
26449: NONEQUAL
26450: OR
26451: IFFALSE 26557
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
26453: LD_VAR 0 5
26457: PUSH
26458: LD_INT 1
26460: ARRAY
26461: PPUSH
26462: CALL_OW 305
26466: PUSH
26467: LD_VAR 0 5
26471: PUSH
26472: LD_INT 1
26474: ARRAY
26475: PPUSH
26476: CALL_OW 255
26480: PUSH
26481: LD_VAR 0 1
26485: PPUSH
26486: CALL_OW 255
26490: EQUAL
26491: AND
26492: IFFALSE 26516
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
26494: LD_VAR 0 5
26498: PUSH
26499: LD_INT 1
26501: ARRAY
26502: PPUSH
26503: LD_VAR 0 5
26507: PUSH
26508: LD_INT 2
26510: ARRAY
26511: PPUSH
26512: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
26516: LD_ADDR_EXP 116
26520: PUSH
26521: LD_EXP 116
26525: PPUSH
26526: LD_VAR 0 4
26530: PPUSH
26531: LD_EXP 116
26535: PUSH
26536: LD_VAR 0 4
26540: ARRAY
26541: PPUSH
26542: LD_VAR 0 3
26546: PPUSH
26547: CALL_OW 3
26551: PPUSH
26552: CALL_OW 1
26556: ST_TO_ADDR
// end ; end ;
26557: GO 26386
26559: POP
26560: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
26561: LD_VAR 0 1
26565: PPUSH
26566: LD_EXP 116
26570: PUSH
26571: LD_VAR 0 4
26575: ARRAY
26576: PUSH
26577: LD_INT 0
26579: PLUS
26580: PPUSH
26581: CALL_OW 505
// end ;
26585: LD_VAR 0 2
26589: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
26590: LD_INT 0
26592: PPUSH
26593: PPUSH
26594: PPUSH
26595: PPUSH
// if not hack in hackTanks then
26596: LD_VAR 0 1
26600: PUSH
26601: LD_EXP 115
26605: IN
26606: NOT
26607: IFFALSE 26611
// exit ;
26609: GO 26696
// index := GetElementIndex ( hackTanks , hack ) ;
26611: LD_ADDR_VAR 0 5
26615: PUSH
26616: LD_EXP 115
26620: PPUSH
26621: LD_VAR 0 1
26625: PPUSH
26626: CALL 33454 0 2
26630: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
26631: LD_ADDR_VAR 0 4
26635: PUSH
26636: DOUBLE
26637: LD_INT 1
26639: DEC
26640: ST_TO_ADDR
26641: LD_EXP 116
26645: PUSH
26646: LD_VAR 0 5
26650: ARRAY
26651: PUSH
26652: FOR_TO
26653: IFFALSE 26694
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
26655: LD_EXP 116
26659: PUSH
26660: LD_VAR 0 5
26664: ARRAY
26665: PUSH
26666: LD_VAR 0 4
26670: ARRAY
26671: PUSH
26672: LD_INT 1
26674: ARRAY
26675: PUSH
26676: LD_VAR 0 2
26680: EQUAL
26681: IFFALSE 26692
// KillUnit ( vehicle ) ;
26683: LD_VAR 0 2
26687: PPUSH
26688: CALL_OW 66
26692: GO 26652
26694: POP
26695: POP
// end ;
26696: LD_VAR 0 3
26700: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
26701: LD_EXP 120
26705: NOT
26706: IFFALSE 26741
26708: GO 26710
26710: DISABLE
// begin initMiner := true ;
26711: LD_ADDR_EXP 120
26715: PUSH
26716: LD_INT 1
26718: ST_TO_ADDR
// minersList := [ ] ;
26719: LD_ADDR_EXP 121
26723: PUSH
26724: EMPTY
26725: ST_TO_ADDR
// minerMinesList := [ ] ;
26726: LD_ADDR_EXP 122
26730: PUSH
26731: EMPTY
26732: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
26733: LD_ADDR_EXP 123
26737: PUSH
26738: LD_INT 5
26740: ST_TO_ADDR
// end ;
26741: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
26742: LD_EXP 120
26746: PUSH
26747: LD_INT 34
26749: PUSH
26750: LD_INT 81
26752: PUSH
26753: EMPTY
26754: LIST
26755: LIST
26756: PPUSH
26757: CALL_OW 69
26761: AND
26762: IFFALSE 27223
26764: GO 26766
26766: DISABLE
26767: LD_INT 0
26769: PPUSH
26770: PPUSH
26771: PPUSH
26772: PPUSH
// begin enable ;
26773: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
26774: LD_ADDR_VAR 0 1
26778: PUSH
26779: LD_INT 34
26781: PUSH
26782: LD_INT 81
26784: PUSH
26785: EMPTY
26786: LIST
26787: LIST
26788: PPUSH
26789: CALL_OW 69
26793: PUSH
26794: FOR_IN
26795: IFFALSE 26867
// begin if not i in minersList then
26797: LD_VAR 0 1
26801: PUSH
26802: LD_EXP 121
26806: IN
26807: NOT
26808: IFFALSE 26865
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
26810: LD_ADDR_EXP 121
26814: PUSH
26815: LD_EXP 121
26819: PPUSH
26820: LD_EXP 121
26824: PUSH
26825: LD_INT 1
26827: PLUS
26828: PPUSH
26829: LD_VAR 0 1
26833: PPUSH
26834: CALL_OW 1
26838: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
26839: LD_ADDR_EXP 122
26843: PUSH
26844: LD_EXP 122
26848: PPUSH
26849: LD_EXP 122
26853: PUSH
26854: LD_INT 1
26856: PLUS
26857: PPUSH
26858: EMPTY
26859: PPUSH
26860: CALL_OW 1
26864: ST_TO_ADDR
// end end ;
26865: GO 26794
26867: POP
26868: POP
// for i := minerMinesList downto 1 do
26869: LD_ADDR_VAR 0 1
26873: PUSH
26874: DOUBLE
26875: LD_EXP 122
26879: INC
26880: ST_TO_ADDR
26881: LD_INT 1
26883: PUSH
26884: FOR_DOWNTO
26885: IFFALSE 27221
// begin if IsLive ( minersList [ i ] ) then
26887: LD_EXP 121
26891: PUSH
26892: LD_VAR 0 1
26896: ARRAY
26897: PPUSH
26898: CALL_OW 300
26902: IFFALSE 26930
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
26904: LD_EXP 121
26908: PUSH
26909: LD_VAR 0 1
26913: ARRAY
26914: PPUSH
26915: LD_EXP 122
26919: PUSH
26920: LD_VAR 0 1
26924: ARRAY
26925: PPUSH
26926: CALL_OW 505
// if not minerMinesList [ i ] then
26930: LD_EXP 122
26934: PUSH
26935: LD_VAR 0 1
26939: ARRAY
26940: NOT
26941: IFFALSE 26945
// continue ;
26943: GO 26884
// for j := minerMinesList [ i ] downto 1 do
26945: LD_ADDR_VAR 0 2
26949: PUSH
26950: DOUBLE
26951: LD_EXP 122
26955: PUSH
26956: LD_VAR 0 1
26960: ARRAY
26961: INC
26962: ST_TO_ADDR
26963: LD_INT 1
26965: PUSH
26966: FOR_DOWNTO
26967: IFFALSE 27217
// begin side := GetSide ( minersList [ i ] ) ;
26969: LD_ADDR_VAR 0 3
26973: PUSH
26974: LD_EXP 121
26978: PUSH
26979: LD_VAR 0 1
26983: ARRAY
26984: PPUSH
26985: CALL_OW 255
26989: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
26990: LD_ADDR_VAR 0 4
26994: PUSH
26995: LD_EXP 122
26999: PUSH
27000: LD_VAR 0 1
27004: ARRAY
27005: PUSH
27006: LD_VAR 0 2
27010: ARRAY
27011: PUSH
27012: LD_INT 1
27014: ARRAY
27015: PPUSH
27016: LD_EXP 122
27020: PUSH
27021: LD_VAR 0 1
27025: ARRAY
27026: PUSH
27027: LD_VAR 0 2
27031: ARRAY
27032: PUSH
27033: LD_INT 2
27035: ARRAY
27036: PPUSH
27037: CALL_OW 428
27041: ST_TO_ADDR
// if not tmp then
27042: LD_VAR 0 4
27046: NOT
27047: IFFALSE 27051
// continue ;
27049: GO 26966
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
27051: LD_VAR 0 4
27055: PUSH
27056: LD_INT 81
27058: PUSH
27059: LD_VAR 0 3
27063: PUSH
27064: EMPTY
27065: LIST
27066: LIST
27067: PPUSH
27068: CALL_OW 69
27072: IN
27073: PUSH
27074: LD_EXP 122
27078: PUSH
27079: LD_VAR 0 1
27083: ARRAY
27084: PUSH
27085: LD_VAR 0 2
27089: ARRAY
27090: PUSH
27091: LD_INT 1
27093: ARRAY
27094: PPUSH
27095: LD_EXP 122
27099: PUSH
27100: LD_VAR 0 1
27104: ARRAY
27105: PUSH
27106: LD_VAR 0 2
27110: ARRAY
27111: PUSH
27112: LD_INT 2
27114: ARRAY
27115: PPUSH
27116: CALL_OW 458
27120: AND
27121: IFFALSE 27215
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
27123: LD_EXP 122
27127: PUSH
27128: LD_VAR 0 1
27132: ARRAY
27133: PUSH
27134: LD_VAR 0 2
27138: ARRAY
27139: PUSH
27140: LD_INT 1
27142: ARRAY
27143: PPUSH
27144: LD_EXP 122
27148: PUSH
27149: LD_VAR 0 1
27153: ARRAY
27154: PUSH
27155: LD_VAR 0 2
27159: ARRAY
27160: PUSH
27161: LD_INT 2
27163: ARRAY
27164: PPUSH
27165: LD_VAR 0 3
27169: PPUSH
27170: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
27174: LD_ADDR_EXP 122
27178: PUSH
27179: LD_EXP 122
27183: PPUSH
27184: LD_VAR 0 1
27188: PPUSH
27189: LD_EXP 122
27193: PUSH
27194: LD_VAR 0 1
27198: ARRAY
27199: PPUSH
27200: LD_VAR 0 2
27204: PPUSH
27205: CALL_OW 3
27209: PPUSH
27210: CALL_OW 1
27214: ST_TO_ADDR
// end ; end ;
27215: GO 26966
27217: POP
27218: POP
// end ;
27219: GO 26884
27221: POP
27222: POP
// end ;
27223: PPOPN 4
27225: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
27226: LD_INT 0
27228: PPUSH
27229: PPUSH
// result := false ;
27230: LD_ADDR_VAR 0 4
27234: PUSH
27235: LD_INT 0
27237: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
27238: LD_VAR 0 1
27242: PPUSH
27243: CALL_OW 264
27247: PUSH
27248: LD_INT 81
27250: EQUAL
27251: NOT
27252: IFFALSE 27256
// exit ;
27254: GO 27496
// index := GetElementIndex ( minersList , unit ) ;
27256: LD_ADDR_VAR 0 5
27260: PUSH
27261: LD_EXP 121
27265: PPUSH
27266: LD_VAR 0 1
27270: PPUSH
27271: CALL 33454 0 2
27275: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
27276: LD_EXP 122
27280: PUSH
27281: LD_VAR 0 5
27285: ARRAY
27286: PUSH
27287: LD_EXP 123
27291: GREATEREQUAL
27292: IFFALSE 27296
// exit ;
27294: GO 27496
// ComMoveXY ( unit , x , y ) ;
27296: LD_VAR 0 1
27300: PPUSH
27301: LD_VAR 0 2
27305: PPUSH
27306: LD_VAR 0 3
27310: PPUSH
27311: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
27315: LD_INT 35
27317: PPUSH
27318: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
27322: LD_VAR 0 1
27326: PPUSH
27327: LD_VAR 0 2
27331: PPUSH
27332: LD_VAR 0 3
27336: PPUSH
27337: CALL 64838 0 3
27341: NOT
27342: PUSH
27343: LD_VAR 0 1
27347: PPUSH
27348: CALL_OW 314
27352: AND
27353: IFFALSE 27357
// exit ;
27355: GO 27496
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
27357: LD_VAR 0 2
27361: PPUSH
27362: LD_VAR 0 3
27366: PPUSH
27367: CALL_OW 428
27371: PUSH
27372: LD_VAR 0 1
27376: EQUAL
27377: PUSH
27378: LD_VAR 0 1
27382: PPUSH
27383: CALL_OW 314
27387: NOT
27388: AND
27389: IFFALSE 27315
// PlaySoundXY ( x , y , PlantMine ) ;
27391: LD_VAR 0 2
27395: PPUSH
27396: LD_VAR 0 3
27400: PPUSH
27401: LD_STRING PlantMine
27403: PPUSH
27404: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
27408: LD_VAR 0 2
27412: PPUSH
27413: LD_VAR 0 3
27417: PPUSH
27418: LD_VAR 0 1
27422: PPUSH
27423: CALL_OW 255
27427: PPUSH
27428: LD_INT 0
27430: PPUSH
27431: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
27435: LD_ADDR_EXP 122
27439: PUSH
27440: LD_EXP 122
27444: PPUSH
27445: LD_VAR 0 5
27449: PUSH
27450: LD_EXP 122
27454: PUSH
27455: LD_VAR 0 5
27459: ARRAY
27460: PUSH
27461: LD_INT 1
27463: PLUS
27464: PUSH
27465: EMPTY
27466: LIST
27467: LIST
27468: PPUSH
27469: LD_VAR 0 2
27473: PUSH
27474: LD_VAR 0 3
27478: PUSH
27479: EMPTY
27480: LIST
27481: LIST
27482: PPUSH
27483: CALL 33669 0 3
27487: ST_TO_ADDR
// result := true ;
27488: LD_ADDR_VAR 0 4
27492: PUSH
27493: LD_INT 1
27495: ST_TO_ADDR
// end ;
27496: LD_VAR 0 4
27500: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
27501: LD_INT 0
27503: PPUSH
27504: PPUSH
27505: PPUSH
// if not unit in minersList then
27506: LD_VAR 0 1
27510: PUSH
27511: LD_EXP 121
27515: IN
27516: NOT
27517: IFFALSE 27521
// exit ;
27519: GO 27913
// index := GetElementIndex ( minersList , unit ) ;
27521: LD_ADDR_VAR 0 6
27525: PUSH
27526: LD_EXP 121
27530: PPUSH
27531: LD_VAR 0 1
27535: PPUSH
27536: CALL 33454 0 2
27540: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
27541: LD_ADDR_VAR 0 5
27545: PUSH
27546: DOUBLE
27547: LD_EXP 122
27551: PUSH
27552: LD_VAR 0 6
27556: ARRAY
27557: INC
27558: ST_TO_ADDR
27559: LD_INT 1
27561: PUSH
27562: FOR_DOWNTO
27563: IFFALSE 27724
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
27565: LD_EXP 122
27569: PUSH
27570: LD_VAR 0 6
27574: ARRAY
27575: PUSH
27576: LD_VAR 0 5
27580: ARRAY
27581: PUSH
27582: LD_INT 1
27584: ARRAY
27585: PUSH
27586: LD_VAR 0 2
27590: EQUAL
27591: PUSH
27592: LD_EXP 122
27596: PUSH
27597: LD_VAR 0 6
27601: ARRAY
27602: PUSH
27603: LD_VAR 0 5
27607: ARRAY
27608: PUSH
27609: LD_INT 2
27611: ARRAY
27612: PUSH
27613: LD_VAR 0 3
27617: EQUAL
27618: AND
27619: IFFALSE 27722
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
27621: LD_EXP 122
27625: PUSH
27626: LD_VAR 0 6
27630: ARRAY
27631: PUSH
27632: LD_VAR 0 5
27636: ARRAY
27637: PUSH
27638: LD_INT 1
27640: ARRAY
27641: PPUSH
27642: LD_EXP 122
27646: PUSH
27647: LD_VAR 0 6
27651: ARRAY
27652: PUSH
27653: LD_VAR 0 5
27657: ARRAY
27658: PUSH
27659: LD_INT 2
27661: ARRAY
27662: PPUSH
27663: LD_VAR 0 1
27667: PPUSH
27668: CALL_OW 255
27672: PPUSH
27673: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
27677: LD_ADDR_EXP 122
27681: PUSH
27682: LD_EXP 122
27686: PPUSH
27687: LD_VAR 0 6
27691: PPUSH
27692: LD_EXP 122
27696: PUSH
27697: LD_VAR 0 6
27701: ARRAY
27702: PPUSH
27703: LD_VAR 0 5
27707: PPUSH
27708: CALL_OW 3
27712: PPUSH
27713: CALL_OW 1
27717: ST_TO_ADDR
// exit ;
27718: POP
27719: POP
27720: GO 27913
// end ; end ;
27722: GO 27562
27724: POP
27725: POP
// for i := minerMinesList [ index ] downto 1 do
27726: LD_ADDR_VAR 0 5
27730: PUSH
27731: DOUBLE
27732: LD_EXP 122
27736: PUSH
27737: LD_VAR 0 6
27741: ARRAY
27742: INC
27743: ST_TO_ADDR
27744: LD_INT 1
27746: PUSH
27747: FOR_DOWNTO
27748: IFFALSE 27911
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
27750: LD_EXP 122
27754: PUSH
27755: LD_VAR 0 6
27759: ARRAY
27760: PUSH
27761: LD_VAR 0 5
27765: ARRAY
27766: PUSH
27767: LD_INT 1
27769: ARRAY
27770: PPUSH
27771: LD_EXP 122
27775: PUSH
27776: LD_VAR 0 6
27780: ARRAY
27781: PUSH
27782: LD_VAR 0 5
27786: ARRAY
27787: PUSH
27788: LD_INT 2
27790: ARRAY
27791: PPUSH
27792: LD_VAR 0 2
27796: PPUSH
27797: LD_VAR 0 3
27801: PPUSH
27802: CALL_OW 298
27806: PUSH
27807: LD_INT 6
27809: LESS
27810: IFFALSE 27909
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
27812: LD_EXP 122
27816: PUSH
27817: LD_VAR 0 6
27821: ARRAY
27822: PUSH
27823: LD_VAR 0 5
27827: ARRAY
27828: PUSH
27829: LD_INT 1
27831: ARRAY
27832: PPUSH
27833: LD_EXP 122
27837: PUSH
27838: LD_VAR 0 6
27842: ARRAY
27843: PUSH
27844: LD_VAR 0 5
27848: ARRAY
27849: PUSH
27850: LD_INT 2
27852: ARRAY
27853: PPUSH
27854: LD_VAR 0 1
27858: PPUSH
27859: CALL_OW 255
27863: PPUSH
27864: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
27868: LD_ADDR_EXP 122
27872: PUSH
27873: LD_EXP 122
27877: PPUSH
27878: LD_VAR 0 6
27882: PPUSH
27883: LD_EXP 122
27887: PUSH
27888: LD_VAR 0 6
27892: ARRAY
27893: PPUSH
27894: LD_VAR 0 5
27898: PPUSH
27899: CALL_OW 3
27903: PPUSH
27904: CALL_OW 1
27908: ST_TO_ADDR
// end ; end ;
27909: GO 27747
27911: POP
27912: POP
// end ;
27913: LD_VAR 0 4
27917: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
27918: LD_INT 0
27920: PPUSH
27921: PPUSH
27922: PPUSH
27923: PPUSH
27924: PPUSH
27925: PPUSH
27926: PPUSH
27927: PPUSH
27928: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
27929: LD_VAR 0 1
27933: PPUSH
27934: CALL_OW 264
27938: PUSH
27939: LD_INT 81
27941: EQUAL
27942: NOT
27943: PUSH
27944: LD_VAR 0 1
27948: PUSH
27949: LD_EXP 121
27953: IN
27954: NOT
27955: OR
27956: IFFALSE 27960
// exit ;
27958: GO 28282
// index := GetElementIndex ( minersList , unit ) ;
27960: LD_ADDR_VAR 0 6
27964: PUSH
27965: LD_EXP 121
27969: PPUSH
27970: LD_VAR 0 1
27974: PPUSH
27975: CALL 33454 0 2
27979: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
27980: LD_ADDR_VAR 0 8
27984: PUSH
27985: LD_EXP 123
27989: PUSH
27990: LD_EXP 122
27994: PUSH
27995: LD_VAR 0 6
27999: ARRAY
28000: MINUS
28001: ST_TO_ADDR
// if not minesFreeAmount then
28002: LD_VAR 0 8
28006: NOT
28007: IFFALSE 28011
// exit ;
28009: GO 28282
// tmp := [ ] ;
28011: LD_ADDR_VAR 0 7
28015: PUSH
28016: EMPTY
28017: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
28018: LD_ADDR_VAR 0 5
28022: PUSH
28023: DOUBLE
28024: LD_INT 1
28026: DEC
28027: ST_TO_ADDR
28028: LD_VAR 0 8
28032: PUSH
28033: FOR_TO
28034: IFFALSE 28229
// begin _d := rand ( 0 , 5 ) ;
28036: LD_ADDR_VAR 0 11
28040: PUSH
28041: LD_INT 0
28043: PPUSH
28044: LD_INT 5
28046: PPUSH
28047: CALL_OW 12
28051: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
28052: LD_ADDR_VAR 0 12
28056: PUSH
28057: LD_INT 2
28059: PPUSH
28060: LD_INT 6
28062: PPUSH
28063: CALL_OW 12
28067: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
28068: LD_ADDR_VAR 0 9
28072: PUSH
28073: LD_VAR 0 2
28077: PPUSH
28078: LD_VAR 0 11
28082: PPUSH
28083: LD_VAR 0 12
28087: PPUSH
28088: CALL_OW 272
28092: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
28093: LD_ADDR_VAR 0 10
28097: PUSH
28098: LD_VAR 0 3
28102: PPUSH
28103: LD_VAR 0 11
28107: PPUSH
28108: LD_VAR 0 12
28112: PPUSH
28113: CALL_OW 273
28117: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
28118: LD_VAR 0 9
28122: PPUSH
28123: LD_VAR 0 10
28127: PPUSH
28128: CALL_OW 488
28132: PUSH
28133: LD_VAR 0 9
28137: PUSH
28138: LD_VAR 0 10
28142: PUSH
28143: EMPTY
28144: LIST
28145: LIST
28146: PUSH
28147: LD_VAR 0 7
28151: IN
28152: NOT
28153: AND
28154: PUSH
28155: LD_VAR 0 9
28159: PPUSH
28160: LD_VAR 0 10
28164: PPUSH
28165: CALL_OW 458
28169: NOT
28170: AND
28171: IFFALSE 28213
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
28173: LD_ADDR_VAR 0 7
28177: PUSH
28178: LD_VAR 0 7
28182: PPUSH
28183: LD_VAR 0 7
28187: PUSH
28188: LD_INT 1
28190: PLUS
28191: PPUSH
28192: LD_VAR 0 9
28196: PUSH
28197: LD_VAR 0 10
28201: PUSH
28202: EMPTY
28203: LIST
28204: LIST
28205: PPUSH
28206: CALL_OW 1
28210: ST_TO_ADDR
28211: GO 28227
// i := i - 1 ;
28213: LD_ADDR_VAR 0 5
28217: PUSH
28218: LD_VAR 0 5
28222: PUSH
28223: LD_INT 1
28225: MINUS
28226: ST_TO_ADDR
// end ;
28227: GO 28033
28229: POP
28230: POP
// for i in tmp do
28231: LD_ADDR_VAR 0 5
28235: PUSH
28236: LD_VAR 0 7
28240: PUSH
28241: FOR_IN
28242: IFFALSE 28280
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
28244: LD_VAR 0 1
28248: PPUSH
28249: LD_VAR 0 5
28253: PUSH
28254: LD_INT 1
28256: ARRAY
28257: PPUSH
28258: LD_VAR 0 5
28262: PUSH
28263: LD_INT 2
28265: ARRAY
28266: PPUSH
28267: CALL 27226 0 3
28271: NOT
28272: IFFALSE 28278
// exit ;
28274: POP
28275: POP
28276: GO 28282
28278: GO 28241
28280: POP
28281: POP
// end ;
28282: LD_VAR 0 4
28286: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
28287: LD_INT 0
28289: PPUSH
28290: PPUSH
28291: PPUSH
28292: PPUSH
28293: PPUSH
28294: PPUSH
28295: PPUSH
// if not GetClass ( unit ) = class_sniper then
28296: LD_VAR 0 1
28300: PPUSH
28301: CALL_OW 257
28305: PUSH
28306: LD_INT 5
28308: EQUAL
28309: NOT
28310: IFFALSE 28314
// exit ;
28312: GO 28702
// dist := 8 ;
28314: LD_ADDR_VAR 0 5
28318: PUSH
28319: LD_INT 8
28321: ST_TO_ADDR
// viewRange := 12 ;
28322: LD_ADDR_VAR 0 7
28326: PUSH
28327: LD_INT 12
28329: ST_TO_ADDR
// side := GetSide ( unit ) ;
28330: LD_ADDR_VAR 0 6
28334: PUSH
28335: LD_VAR 0 1
28339: PPUSH
28340: CALL_OW 255
28344: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
28345: LD_INT 61
28347: PPUSH
28348: LD_VAR 0 6
28352: PPUSH
28353: CALL_OW 321
28357: PUSH
28358: LD_INT 2
28360: EQUAL
28361: IFFALSE 28371
// viewRange := 16 ;
28363: LD_ADDR_VAR 0 7
28367: PUSH
28368: LD_INT 16
28370: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
28371: LD_VAR 0 1
28375: PPUSH
28376: LD_VAR 0 2
28380: PPUSH
28381: LD_VAR 0 3
28385: PPUSH
28386: CALL_OW 297
28390: PUSH
28391: LD_VAR 0 5
28395: GREATER
28396: IFFALSE 28475
// begin ComMoveXY ( unit , x , y ) ;
28398: LD_VAR 0 1
28402: PPUSH
28403: LD_VAR 0 2
28407: PPUSH
28408: LD_VAR 0 3
28412: PPUSH
28413: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
28417: LD_INT 35
28419: PPUSH
28420: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
28424: LD_VAR 0 1
28428: PPUSH
28429: LD_VAR 0 2
28433: PPUSH
28434: LD_VAR 0 3
28438: PPUSH
28439: CALL 64838 0 3
28443: NOT
28444: IFFALSE 28448
// exit ;
28446: GO 28702
// until GetDistUnitXY ( unit , x , y ) < dist ;
28448: LD_VAR 0 1
28452: PPUSH
28453: LD_VAR 0 2
28457: PPUSH
28458: LD_VAR 0 3
28462: PPUSH
28463: CALL_OW 297
28467: PUSH
28468: LD_VAR 0 5
28472: LESS
28473: IFFALSE 28417
// end ; ComTurnXY ( unit , x , y ) ;
28475: LD_VAR 0 1
28479: PPUSH
28480: LD_VAR 0 2
28484: PPUSH
28485: LD_VAR 0 3
28489: PPUSH
28490: CALL_OW 118
// wait ( 5 ) ;
28494: LD_INT 5
28496: PPUSH
28497: CALL_OW 67
// _d := GetDir ( unit ) ;
28501: LD_ADDR_VAR 0 10
28505: PUSH
28506: LD_VAR 0 1
28510: PPUSH
28511: CALL_OW 254
28515: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
28516: LD_ADDR_VAR 0 8
28520: PUSH
28521: LD_VAR 0 1
28525: PPUSH
28526: CALL_OW 250
28530: PPUSH
28531: LD_VAR 0 10
28535: PPUSH
28536: LD_VAR 0 5
28540: PPUSH
28541: CALL_OW 272
28545: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
28546: LD_ADDR_VAR 0 9
28550: PUSH
28551: LD_VAR 0 1
28555: PPUSH
28556: CALL_OW 251
28560: PPUSH
28561: LD_VAR 0 10
28565: PPUSH
28566: LD_VAR 0 5
28570: PPUSH
28571: CALL_OW 273
28575: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28576: LD_VAR 0 8
28580: PPUSH
28581: LD_VAR 0 9
28585: PPUSH
28586: CALL_OW 488
28590: NOT
28591: IFFALSE 28595
// exit ;
28593: GO 28702
// ComAnimCustom ( unit , 1 ) ;
28595: LD_VAR 0 1
28599: PPUSH
28600: LD_INT 1
28602: PPUSH
28603: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
28607: LD_VAR 0 8
28611: PPUSH
28612: LD_VAR 0 9
28616: PPUSH
28617: LD_VAR 0 6
28621: PPUSH
28622: LD_VAR 0 7
28626: PPUSH
28627: CALL_OW 330
// repeat wait ( 1 ) ;
28631: LD_INT 1
28633: PPUSH
28634: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
28638: LD_VAR 0 1
28642: PPUSH
28643: CALL_OW 316
28647: PUSH
28648: LD_VAR 0 1
28652: PPUSH
28653: CALL_OW 314
28657: OR
28658: PUSH
28659: LD_VAR 0 1
28663: PPUSH
28664: CALL_OW 302
28668: NOT
28669: OR
28670: PUSH
28671: LD_VAR 0 1
28675: PPUSH
28676: CALL_OW 301
28680: OR
28681: IFFALSE 28631
// RemoveSeeing ( _x , _y , side ) ;
28683: LD_VAR 0 8
28687: PPUSH
28688: LD_VAR 0 9
28692: PPUSH
28693: LD_VAR 0 6
28697: PPUSH
28698: CALL_OW 331
// end ; end_of_file
28702: LD_VAR 0 4
28706: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
28707: LD_INT 0
28709: PPUSH
28710: PPUSH
// if exist_mode then
28711: LD_VAR 0 2
28715: IFFALSE 28740
// unit := CreateCharacter ( prefix & ident ) else
28717: LD_ADDR_VAR 0 5
28721: PUSH
28722: LD_VAR 0 3
28726: PUSH
28727: LD_VAR 0 1
28731: STR
28732: PPUSH
28733: CALL_OW 34
28737: ST_TO_ADDR
28738: GO 28755
// unit := NewCharacter ( ident ) ;
28740: LD_ADDR_VAR 0 5
28744: PUSH
28745: LD_VAR 0 1
28749: PPUSH
28750: CALL_OW 25
28754: ST_TO_ADDR
// result := unit ;
28755: LD_ADDR_VAR 0 4
28759: PUSH
28760: LD_VAR 0 5
28764: ST_TO_ADDR
// end ;
28765: LD_VAR 0 4
28769: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
28770: LD_INT 0
28772: PPUSH
28773: PPUSH
// if not side or not nation then
28774: LD_VAR 0 1
28778: NOT
28779: PUSH
28780: LD_VAR 0 2
28784: NOT
28785: OR
28786: IFFALSE 28790
// exit ;
28788: GO 29558
// case nation of nation_american :
28790: LD_VAR 0 2
28794: PUSH
28795: LD_INT 1
28797: DOUBLE
28798: EQUAL
28799: IFTRUE 28803
28801: GO 29017
28803: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
28804: LD_ADDR_VAR 0 4
28808: PUSH
28809: LD_INT 35
28811: PUSH
28812: LD_INT 45
28814: PUSH
28815: LD_INT 46
28817: PUSH
28818: LD_INT 47
28820: PUSH
28821: LD_INT 82
28823: PUSH
28824: LD_INT 83
28826: PUSH
28827: LD_INT 84
28829: PUSH
28830: LD_INT 85
28832: PUSH
28833: LD_INT 86
28835: PUSH
28836: LD_INT 1
28838: PUSH
28839: LD_INT 2
28841: PUSH
28842: LD_INT 6
28844: PUSH
28845: LD_INT 15
28847: PUSH
28848: LD_INT 16
28850: PUSH
28851: LD_INT 7
28853: PUSH
28854: LD_INT 12
28856: PUSH
28857: LD_INT 13
28859: PUSH
28860: LD_INT 10
28862: PUSH
28863: LD_INT 14
28865: PUSH
28866: LD_INT 20
28868: PUSH
28869: LD_INT 21
28871: PUSH
28872: LD_INT 22
28874: PUSH
28875: LD_INT 25
28877: PUSH
28878: LD_INT 32
28880: PUSH
28881: LD_INT 27
28883: PUSH
28884: LD_INT 36
28886: PUSH
28887: LD_INT 69
28889: PUSH
28890: LD_INT 39
28892: PUSH
28893: LD_INT 34
28895: PUSH
28896: LD_INT 40
28898: PUSH
28899: LD_INT 48
28901: PUSH
28902: LD_INT 49
28904: PUSH
28905: LD_INT 50
28907: PUSH
28908: LD_INT 51
28910: PUSH
28911: LD_INT 52
28913: PUSH
28914: LD_INT 53
28916: PUSH
28917: LD_INT 54
28919: PUSH
28920: LD_INT 55
28922: PUSH
28923: LD_INT 56
28925: PUSH
28926: LD_INT 57
28928: PUSH
28929: LD_INT 58
28931: PUSH
28932: LD_INT 59
28934: PUSH
28935: LD_INT 60
28937: PUSH
28938: LD_INT 61
28940: PUSH
28941: LD_INT 62
28943: PUSH
28944: LD_INT 80
28946: PUSH
28947: LD_INT 82
28949: PUSH
28950: LD_INT 83
28952: PUSH
28953: LD_INT 84
28955: PUSH
28956: LD_INT 85
28958: PUSH
28959: LD_INT 86
28961: PUSH
28962: EMPTY
28963: LIST
28964: LIST
28965: LIST
28966: LIST
28967: LIST
28968: LIST
28969: LIST
28970: LIST
28971: LIST
28972: LIST
28973: LIST
28974: LIST
28975: LIST
28976: LIST
28977: LIST
28978: LIST
28979: LIST
28980: LIST
28981: LIST
28982: LIST
28983: LIST
28984: LIST
28985: LIST
28986: LIST
28987: LIST
28988: LIST
28989: LIST
28990: LIST
28991: LIST
28992: LIST
28993: LIST
28994: LIST
28995: LIST
28996: LIST
28997: LIST
28998: LIST
28999: LIST
29000: LIST
29001: LIST
29002: LIST
29003: LIST
29004: LIST
29005: LIST
29006: LIST
29007: LIST
29008: LIST
29009: LIST
29010: LIST
29011: LIST
29012: LIST
29013: LIST
29014: ST_TO_ADDR
29015: GO 29482
29017: LD_INT 2
29019: DOUBLE
29020: EQUAL
29021: IFTRUE 29025
29023: GO 29251
29025: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
29026: LD_ADDR_VAR 0 4
29030: PUSH
29031: LD_INT 35
29033: PUSH
29034: LD_INT 45
29036: PUSH
29037: LD_INT 46
29039: PUSH
29040: LD_INT 47
29042: PUSH
29043: LD_INT 82
29045: PUSH
29046: LD_INT 83
29048: PUSH
29049: LD_INT 84
29051: PUSH
29052: LD_INT 85
29054: PUSH
29055: LD_INT 87
29057: PUSH
29058: LD_INT 70
29060: PUSH
29061: LD_INT 1
29063: PUSH
29064: LD_INT 11
29066: PUSH
29067: LD_INT 3
29069: PUSH
29070: LD_INT 4
29072: PUSH
29073: LD_INT 5
29075: PUSH
29076: LD_INT 6
29078: PUSH
29079: LD_INT 15
29081: PUSH
29082: LD_INT 18
29084: PUSH
29085: LD_INT 7
29087: PUSH
29088: LD_INT 17
29090: PUSH
29091: LD_INT 8
29093: PUSH
29094: LD_INT 20
29096: PUSH
29097: LD_INT 21
29099: PUSH
29100: LD_INT 22
29102: PUSH
29103: LD_INT 72
29105: PUSH
29106: LD_INT 26
29108: PUSH
29109: LD_INT 69
29111: PUSH
29112: LD_INT 39
29114: PUSH
29115: LD_INT 40
29117: PUSH
29118: LD_INT 41
29120: PUSH
29121: LD_INT 42
29123: PUSH
29124: LD_INT 43
29126: PUSH
29127: LD_INT 48
29129: PUSH
29130: LD_INT 49
29132: PUSH
29133: LD_INT 50
29135: PUSH
29136: LD_INT 51
29138: PUSH
29139: LD_INT 52
29141: PUSH
29142: LD_INT 53
29144: PUSH
29145: LD_INT 54
29147: PUSH
29148: LD_INT 55
29150: PUSH
29151: LD_INT 56
29153: PUSH
29154: LD_INT 60
29156: PUSH
29157: LD_INT 61
29159: PUSH
29160: LD_INT 62
29162: PUSH
29163: LD_INT 66
29165: PUSH
29166: LD_INT 67
29168: PUSH
29169: LD_INT 68
29171: PUSH
29172: LD_INT 81
29174: PUSH
29175: LD_INT 82
29177: PUSH
29178: LD_INT 83
29180: PUSH
29181: LD_INT 84
29183: PUSH
29184: LD_INT 85
29186: PUSH
29187: LD_INT 87
29189: PUSH
29190: LD_INT 88
29192: PUSH
29193: EMPTY
29194: LIST
29195: LIST
29196: LIST
29197: LIST
29198: LIST
29199: LIST
29200: LIST
29201: LIST
29202: LIST
29203: LIST
29204: LIST
29205: LIST
29206: LIST
29207: LIST
29208: LIST
29209: LIST
29210: LIST
29211: LIST
29212: LIST
29213: LIST
29214: LIST
29215: LIST
29216: LIST
29217: LIST
29218: LIST
29219: LIST
29220: LIST
29221: LIST
29222: LIST
29223: LIST
29224: LIST
29225: LIST
29226: LIST
29227: LIST
29228: LIST
29229: LIST
29230: LIST
29231: LIST
29232: LIST
29233: LIST
29234: LIST
29235: LIST
29236: LIST
29237: LIST
29238: LIST
29239: LIST
29240: LIST
29241: LIST
29242: LIST
29243: LIST
29244: LIST
29245: LIST
29246: LIST
29247: LIST
29248: ST_TO_ADDR
29249: GO 29482
29251: LD_INT 3
29253: DOUBLE
29254: EQUAL
29255: IFTRUE 29259
29257: GO 29481
29259: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
29260: LD_ADDR_VAR 0 4
29264: PUSH
29265: LD_INT 46
29267: PUSH
29268: LD_INT 47
29270: PUSH
29271: LD_INT 1
29273: PUSH
29274: LD_INT 2
29276: PUSH
29277: LD_INT 82
29279: PUSH
29280: LD_INT 83
29282: PUSH
29283: LD_INT 84
29285: PUSH
29286: LD_INT 85
29288: PUSH
29289: LD_INT 86
29291: PUSH
29292: LD_INT 11
29294: PUSH
29295: LD_INT 9
29297: PUSH
29298: LD_INT 20
29300: PUSH
29301: LD_INT 19
29303: PUSH
29304: LD_INT 21
29306: PUSH
29307: LD_INT 24
29309: PUSH
29310: LD_INT 22
29312: PUSH
29313: LD_INT 25
29315: PUSH
29316: LD_INT 28
29318: PUSH
29319: LD_INT 29
29321: PUSH
29322: LD_INT 30
29324: PUSH
29325: LD_INT 31
29327: PUSH
29328: LD_INT 37
29330: PUSH
29331: LD_INT 38
29333: PUSH
29334: LD_INT 32
29336: PUSH
29337: LD_INT 27
29339: PUSH
29340: LD_INT 33
29342: PUSH
29343: LD_INT 69
29345: PUSH
29346: LD_INT 39
29348: PUSH
29349: LD_INT 34
29351: PUSH
29352: LD_INT 40
29354: PUSH
29355: LD_INT 71
29357: PUSH
29358: LD_INT 23
29360: PUSH
29361: LD_INT 44
29363: PUSH
29364: LD_INT 48
29366: PUSH
29367: LD_INT 49
29369: PUSH
29370: LD_INT 50
29372: PUSH
29373: LD_INT 51
29375: PUSH
29376: LD_INT 52
29378: PUSH
29379: LD_INT 53
29381: PUSH
29382: LD_INT 54
29384: PUSH
29385: LD_INT 55
29387: PUSH
29388: LD_INT 56
29390: PUSH
29391: LD_INT 57
29393: PUSH
29394: LD_INT 58
29396: PUSH
29397: LD_INT 59
29399: PUSH
29400: LD_INT 63
29402: PUSH
29403: LD_INT 64
29405: PUSH
29406: LD_INT 65
29408: PUSH
29409: LD_INT 82
29411: PUSH
29412: LD_INT 83
29414: PUSH
29415: LD_INT 84
29417: PUSH
29418: LD_INT 85
29420: PUSH
29421: LD_INT 86
29423: PUSH
29424: EMPTY
29425: LIST
29426: LIST
29427: LIST
29428: LIST
29429: LIST
29430: LIST
29431: LIST
29432: LIST
29433: LIST
29434: LIST
29435: LIST
29436: LIST
29437: LIST
29438: LIST
29439: LIST
29440: LIST
29441: LIST
29442: LIST
29443: LIST
29444: LIST
29445: LIST
29446: LIST
29447: LIST
29448: LIST
29449: LIST
29450: LIST
29451: LIST
29452: LIST
29453: LIST
29454: LIST
29455: LIST
29456: LIST
29457: LIST
29458: LIST
29459: LIST
29460: LIST
29461: LIST
29462: LIST
29463: LIST
29464: LIST
29465: LIST
29466: LIST
29467: LIST
29468: LIST
29469: LIST
29470: LIST
29471: LIST
29472: LIST
29473: LIST
29474: LIST
29475: LIST
29476: LIST
29477: LIST
29478: ST_TO_ADDR
29479: GO 29482
29481: POP
// if state > - 1 and state < 3 then
29482: LD_VAR 0 3
29486: PUSH
29487: LD_INT 1
29489: NEG
29490: GREATER
29491: PUSH
29492: LD_VAR 0 3
29496: PUSH
29497: LD_INT 3
29499: LESS
29500: AND
29501: IFFALSE 29558
// for i in result do
29503: LD_ADDR_VAR 0 5
29507: PUSH
29508: LD_VAR 0 4
29512: PUSH
29513: FOR_IN
29514: IFFALSE 29556
// if GetTech ( i , side ) <> state then
29516: LD_VAR 0 5
29520: PPUSH
29521: LD_VAR 0 1
29525: PPUSH
29526: CALL_OW 321
29530: PUSH
29531: LD_VAR 0 3
29535: NONEQUAL
29536: IFFALSE 29554
// result := result diff i ;
29538: LD_ADDR_VAR 0 4
29542: PUSH
29543: LD_VAR 0 4
29547: PUSH
29548: LD_VAR 0 5
29552: DIFF
29553: ST_TO_ADDR
29554: GO 29513
29556: POP
29557: POP
// end ;
29558: LD_VAR 0 4
29562: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
29563: LD_INT 0
29565: PPUSH
29566: PPUSH
29567: PPUSH
// result := true ;
29568: LD_ADDR_VAR 0 3
29572: PUSH
29573: LD_INT 1
29575: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
29576: LD_ADDR_VAR 0 5
29580: PUSH
29581: LD_VAR 0 2
29585: PPUSH
29586: CALL_OW 480
29590: ST_TO_ADDR
// if not tmp then
29591: LD_VAR 0 5
29595: NOT
29596: IFFALSE 29600
// exit ;
29598: GO 29649
// for i in tmp do
29600: LD_ADDR_VAR 0 4
29604: PUSH
29605: LD_VAR 0 5
29609: PUSH
29610: FOR_IN
29611: IFFALSE 29647
// if GetTech ( i , side ) <> state_researched then
29613: LD_VAR 0 4
29617: PPUSH
29618: LD_VAR 0 1
29622: PPUSH
29623: CALL_OW 321
29627: PUSH
29628: LD_INT 2
29630: NONEQUAL
29631: IFFALSE 29645
// begin result := false ;
29633: LD_ADDR_VAR 0 3
29637: PUSH
29638: LD_INT 0
29640: ST_TO_ADDR
// exit ;
29641: POP
29642: POP
29643: GO 29649
// end ;
29645: GO 29610
29647: POP
29648: POP
// end ;
29649: LD_VAR 0 3
29653: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
29654: LD_INT 0
29656: PPUSH
29657: PPUSH
29658: PPUSH
29659: PPUSH
29660: PPUSH
29661: PPUSH
29662: PPUSH
29663: PPUSH
29664: PPUSH
29665: PPUSH
29666: PPUSH
29667: PPUSH
29668: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
29669: LD_VAR 0 1
29673: NOT
29674: PUSH
29675: LD_VAR 0 1
29679: PPUSH
29680: CALL_OW 257
29684: PUSH
29685: LD_INT 9
29687: NONEQUAL
29688: OR
29689: IFFALSE 29693
// exit ;
29691: GO 30266
// side := GetSide ( unit ) ;
29693: LD_ADDR_VAR 0 9
29697: PUSH
29698: LD_VAR 0 1
29702: PPUSH
29703: CALL_OW 255
29707: ST_TO_ADDR
// tech_space := tech_spacanom ;
29708: LD_ADDR_VAR 0 12
29712: PUSH
29713: LD_INT 29
29715: ST_TO_ADDR
// tech_time := tech_taurad ;
29716: LD_ADDR_VAR 0 13
29720: PUSH
29721: LD_INT 28
29723: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
29724: LD_ADDR_VAR 0 11
29728: PUSH
29729: LD_VAR 0 1
29733: PPUSH
29734: CALL_OW 310
29738: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
29739: LD_VAR 0 11
29743: PPUSH
29744: CALL_OW 247
29748: PUSH
29749: LD_INT 2
29751: EQUAL
29752: IFFALSE 29756
// exit ;
29754: GO 30266
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29756: LD_ADDR_VAR 0 8
29760: PUSH
29761: LD_INT 81
29763: PUSH
29764: LD_VAR 0 9
29768: PUSH
29769: EMPTY
29770: LIST
29771: LIST
29772: PUSH
29773: LD_INT 3
29775: PUSH
29776: LD_INT 21
29778: PUSH
29779: LD_INT 3
29781: PUSH
29782: EMPTY
29783: LIST
29784: LIST
29785: PUSH
29786: EMPTY
29787: LIST
29788: LIST
29789: PUSH
29790: EMPTY
29791: LIST
29792: LIST
29793: PPUSH
29794: CALL_OW 69
29798: ST_TO_ADDR
// if not tmp then
29799: LD_VAR 0 8
29803: NOT
29804: IFFALSE 29808
// exit ;
29806: GO 30266
// if in_unit then
29808: LD_VAR 0 11
29812: IFFALSE 29836
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
29814: LD_ADDR_VAR 0 10
29818: PUSH
29819: LD_VAR 0 8
29823: PPUSH
29824: LD_VAR 0 11
29828: PPUSH
29829: CALL_OW 74
29833: ST_TO_ADDR
29834: GO 29856
// enemy := NearestUnitToUnit ( tmp , unit ) ;
29836: LD_ADDR_VAR 0 10
29840: PUSH
29841: LD_VAR 0 8
29845: PPUSH
29846: LD_VAR 0 1
29850: PPUSH
29851: CALL_OW 74
29855: ST_TO_ADDR
// if not enemy then
29856: LD_VAR 0 10
29860: NOT
29861: IFFALSE 29865
// exit ;
29863: GO 30266
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
29865: LD_VAR 0 11
29869: PUSH
29870: LD_VAR 0 11
29874: PPUSH
29875: LD_VAR 0 10
29879: PPUSH
29880: CALL_OW 296
29884: PUSH
29885: LD_INT 13
29887: GREATER
29888: AND
29889: PUSH
29890: LD_VAR 0 1
29894: PPUSH
29895: LD_VAR 0 10
29899: PPUSH
29900: CALL_OW 296
29904: PUSH
29905: LD_INT 12
29907: GREATER
29908: OR
29909: IFFALSE 29913
// exit ;
29911: GO 30266
// missile := [ 1 ] ;
29913: LD_ADDR_VAR 0 14
29917: PUSH
29918: LD_INT 1
29920: PUSH
29921: EMPTY
29922: LIST
29923: ST_TO_ADDR
// if Researched ( side , tech_space ) then
29924: LD_VAR 0 9
29928: PPUSH
29929: LD_VAR 0 12
29933: PPUSH
29934: CALL_OW 325
29938: IFFALSE 29967
// missile := Replace ( missile , missile + 1 , 2 ) ;
29940: LD_ADDR_VAR 0 14
29944: PUSH
29945: LD_VAR 0 14
29949: PPUSH
29950: LD_VAR 0 14
29954: PUSH
29955: LD_INT 1
29957: PLUS
29958: PPUSH
29959: LD_INT 2
29961: PPUSH
29962: CALL_OW 1
29966: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
29967: LD_VAR 0 9
29971: PPUSH
29972: LD_VAR 0 13
29976: PPUSH
29977: CALL_OW 325
29981: PUSH
29982: LD_VAR 0 10
29986: PPUSH
29987: CALL_OW 255
29991: PPUSH
29992: LD_VAR 0 13
29996: PPUSH
29997: CALL_OW 325
30001: NOT
30002: AND
30003: IFFALSE 30032
// missile := Replace ( missile , missile + 1 , 3 ) ;
30005: LD_ADDR_VAR 0 14
30009: PUSH
30010: LD_VAR 0 14
30014: PPUSH
30015: LD_VAR 0 14
30019: PUSH
30020: LD_INT 1
30022: PLUS
30023: PPUSH
30024: LD_INT 3
30026: PPUSH
30027: CALL_OW 1
30031: ST_TO_ADDR
// if missile < 2 then
30032: LD_VAR 0 14
30036: PUSH
30037: LD_INT 2
30039: LESS
30040: IFFALSE 30044
// exit ;
30042: GO 30266
// x := GetX ( enemy ) ;
30044: LD_ADDR_VAR 0 4
30048: PUSH
30049: LD_VAR 0 10
30053: PPUSH
30054: CALL_OW 250
30058: ST_TO_ADDR
// y := GetY ( enemy ) ;
30059: LD_ADDR_VAR 0 5
30063: PUSH
30064: LD_VAR 0 10
30068: PPUSH
30069: CALL_OW 251
30073: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
30074: LD_ADDR_VAR 0 6
30078: PUSH
30079: LD_VAR 0 4
30083: PUSH
30084: LD_INT 1
30086: NEG
30087: PPUSH
30088: LD_INT 1
30090: PPUSH
30091: CALL_OW 12
30095: PLUS
30096: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
30097: LD_ADDR_VAR 0 7
30101: PUSH
30102: LD_VAR 0 5
30106: PUSH
30107: LD_INT 1
30109: NEG
30110: PPUSH
30111: LD_INT 1
30113: PPUSH
30114: CALL_OW 12
30118: PLUS
30119: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30120: LD_VAR 0 6
30124: PPUSH
30125: LD_VAR 0 7
30129: PPUSH
30130: CALL_OW 488
30134: NOT
30135: IFFALSE 30157
// begin _x := x ;
30137: LD_ADDR_VAR 0 6
30141: PUSH
30142: LD_VAR 0 4
30146: ST_TO_ADDR
// _y := y ;
30147: LD_ADDR_VAR 0 7
30151: PUSH
30152: LD_VAR 0 5
30156: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
30157: LD_ADDR_VAR 0 3
30161: PUSH
30162: LD_INT 1
30164: PPUSH
30165: LD_VAR 0 14
30169: PPUSH
30170: CALL_OW 12
30174: ST_TO_ADDR
// case i of 1 :
30175: LD_VAR 0 3
30179: PUSH
30180: LD_INT 1
30182: DOUBLE
30183: EQUAL
30184: IFTRUE 30188
30186: GO 30205
30188: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
30189: LD_VAR 0 1
30193: PPUSH
30194: LD_VAR 0 10
30198: PPUSH
30199: CALL_OW 115
30203: GO 30266
30205: LD_INT 2
30207: DOUBLE
30208: EQUAL
30209: IFTRUE 30213
30211: GO 30235
30213: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
30214: LD_VAR 0 1
30218: PPUSH
30219: LD_VAR 0 6
30223: PPUSH
30224: LD_VAR 0 7
30228: PPUSH
30229: CALL_OW 153
30233: GO 30266
30235: LD_INT 3
30237: DOUBLE
30238: EQUAL
30239: IFTRUE 30243
30241: GO 30265
30243: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
30244: LD_VAR 0 1
30248: PPUSH
30249: LD_VAR 0 6
30253: PPUSH
30254: LD_VAR 0 7
30258: PPUSH
30259: CALL_OW 154
30263: GO 30266
30265: POP
// end ;
30266: LD_VAR 0 2
30270: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
30271: LD_INT 0
30273: PPUSH
30274: PPUSH
30275: PPUSH
30276: PPUSH
30277: PPUSH
30278: PPUSH
// if not unit or not building then
30279: LD_VAR 0 1
30283: NOT
30284: PUSH
30285: LD_VAR 0 2
30289: NOT
30290: OR
30291: IFFALSE 30295
// exit ;
30293: GO 30453
// x := GetX ( building ) ;
30295: LD_ADDR_VAR 0 5
30299: PUSH
30300: LD_VAR 0 2
30304: PPUSH
30305: CALL_OW 250
30309: ST_TO_ADDR
// y := GetY ( building ) ;
30310: LD_ADDR_VAR 0 6
30314: PUSH
30315: LD_VAR 0 2
30319: PPUSH
30320: CALL_OW 251
30324: ST_TO_ADDR
// for i = 0 to 5 do
30325: LD_ADDR_VAR 0 4
30329: PUSH
30330: DOUBLE
30331: LD_INT 0
30333: DEC
30334: ST_TO_ADDR
30335: LD_INT 5
30337: PUSH
30338: FOR_TO
30339: IFFALSE 30451
// begin _x := ShiftX ( x , i , 3 ) ;
30341: LD_ADDR_VAR 0 7
30345: PUSH
30346: LD_VAR 0 5
30350: PPUSH
30351: LD_VAR 0 4
30355: PPUSH
30356: LD_INT 3
30358: PPUSH
30359: CALL_OW 272
30363: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
30364: LD_ADDR_VAR 0 8
30368: PUSH
30369: LD_VAR 0 6
30373: PPUSH
30374: LD_VAR 0 4
30378: PPUSH
30379: LD_INT 3
30381: PPUSH
30382: CALL_OW 273
30386: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30387: LD_VAR 0 7
30391: PPUSH
30392: LD_VAR 0 8
30396: PPUSH
30397: CALL_OW 488
30401: NOT
30402: IFFALSE 30406
// continue ;
30404: GO 30338
// if HexInfo ( _x , _y ) = 0 then
30406: LD_VAR 0 7
30410: PPUSH
30411: LD_VAR 0 8
30415: PPUSH
30416: CALL_OW 428
30420: PUSH
30421: LD_INT 0
30423: EQUAL
30424: IFFALSE 30449
// begin ComMoveXY ( unit , _x , _y ) ;
30426: LD_VAR 0 1
30430: PPUSH
30431: LD_VAR 0 7
30435: PPUSH
30436: LD_VAR 0 8
30440: PPUSH
30441: CALL_OW 111
// exit ;
30445: POP
30446: POP
30447: GO 30453
// end ; end ;
30449: GO 30338
30451: POP
30452: POP
// end ;
30453: LD_VAR 0 3
30457: RET
// export function ScanBase ( side , base_area ) ; begin
30458: LD_INT 0
30460: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
30461: LD_ADDR_VAR 0 3
30465: PUSH
30466: LD_VAR 0 2
30470: PPUSH
30471: LD_INT 81
30473: PUSH
30474: LD_VAR 0 1
30478: PUSH
30479: EMPTY
30480: LIST
30481: LIST
30482: PPUSH
30483: CALL_OW 70
30487: ST_TO_ADDR
// end ;
30488: LD_VAR 0 3
30492: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
30493: LD_INT 0
30495: PPUSH
30496: PPUSH
30497: PPUSH
30498: PPUSH
// result := false ;
30499: LD_ADDR_VAR 0 2
30503: PUSH
30504: LD_INT 0
30506: ST_TO_ADDR
// side := GetSide ( unit ) ;
30507: LD_ADDR_VAR 0 3
30511: PUSH
30512: LD_VAR 0 1
30516: PPUSH
30517: CALL_OW 255
30521: ST_TO_ADDR
// nat := GetNation ( unit ) ;
30522: LD_ADDR_VAR 0 4
30526: PUSH
30527: LD_VAR 0 1
30531: PPUSH
30532: CALL_OW 248
30536: ST_TO_ADDR
// case nat of 1 :
30537: LD_VAR 0 4
30541: PUSH
30542: LD_INT 1
30544: DOUBLE
30545: EQUAL
30546: IFTRUE 30550
30548: GO 30561
30550: POP
// tech := tech_lassight ; 2 :
30551: LD_ADDR_VAR 0 5
30555: PUSH
30556: LD_INT 12
30558: ST_TO_ADDR
30559: GO 30600
30561: LD_INT 2
30563: DOUBLE
30564: EQUAL
30565: IFTRUE 30569
30567: GO 30580
30569: POP
// tech := tech_mortar ; 3 :
30570: LD_ADDR_VAR 0 5
30574: PUSH
30575: LD_INT 41
30577: ST_TO_ADDR
30578: GO 30600
30580: LD_INT 3
30582: DOUBLE
30583: EQUAL
30584: IFTRUE 30588
30586: GO 30599
30588: POP
// tech := tech_bazooka ; end ;
30589: LD_ADDR_VAR 0 5
30593: PUSH
30594: LD_INT 44
30596: ST_TO_ADDR
30597: GO 30600
30599: POP
// if Researched ( side , tech ) then
30600: LD_VAR 0 3
30604: PPUSH
30605: LD_VAR 0 5
30609: PPUSH
30610: CALL_OW 325
30614: IFFALSE 30641
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
30616: LD_ADDR_VAR 0 2
30620: PUSH
30621: LD_INT 5
30623: PUSH
30624: LD_INT 8
30626: PUSH
30627: LD_INT 9
30629: PUSH
30630: EMPTY
30631: LIST
30632: LIST
30633: LIST
30634: PUSH
30635: LD_VAR 0 4
30639: ARRAY
30640: ST_TO_ADDR
// end ;
30641: LD_VAR 0 2
30645: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
30646: LD_INT 0
30648: PPUSH
30649: PPUSH
30650: PPUSH
// if not mines then
30651: LD_VAR 0 2
30655: NOT
30656: IFFALSE 30660
// exit ;
30658: GO 30804
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30660: LD_ADDR_VAR 0 5
30664: PUSH
30665: LD_INT 81
30667: PUSH
30668: LD_VAR 0 1
30672: PUSH
30673: EMPTY
30674: LIST
30675: LIST
30676: PUSH
30677: LD_INT 3
30679: PUSH
30680: LD_INT 21
30682: PUSH
30683: LD_INT 3
30685: PUSH
30686: EMPTY
30687: LIST
30688: LIST
30689: PUSH
30690: EMPTY
30691: LIST
30692: LIST
30693: PUSH
30694: EMPTY
30695: LIST
30696: LIST
30697: PPUSH
30698: CALL_OW 69
30702: ST_TO_ADDR
// for i in mines do
30703: LD_ADDR_VAR 0 4
30707: PUSH
30708: LD_VAR 0 2
30712: PUSH
30713: FOR_IN
30714: IFFALSE 30802
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
30716: LD_VAR 0 4
30720: PUSH
30721: LD_INT 1
30723: ARRAY
30724: PPUSH
30725: LD_VAR 0 4
30729: PUSH
30730: LD_INT 2
30732: ARRAY
30733: PPUSH
30734: CALL_OW 458
30738: NOT
30739: IFFALSE 30743
// continue ;
30741: GO 30713
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
30743: LD_VAR 0 4
30747: PUSH
30748: LD_INT 1
30750: ARRAY
30751: PPUSH
30752: LD_VAR 0 4
30756: PUSH
30757: LD_INT 2
30759: ARRAY
30760: PPUSH
30761: CALL_OW 428
30765: PUSH
30766: LD_VAR 0 5
30770: IN
30771: IFFALSE 30800
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
30773: LD_VAR 0 4
30777: PUSH
30778: LD_INT 1
30780: ARRAY
30781: PPUSH
30782: LD_VAR 0 4
30786: PUSH
30787: LD_INT 2
30789: ARRAY
30790: PPUSH
30791: LD_VAR 0 1
30795: PPUSH
30796: CALL_OW 456
// end ;
30800: GO 30713
30802: POP
30803: POP
// end ;
30804: LD_VAR 0 3
30808: RET
// export function Count ( array ) ; begin
30809: LD_INT 0
30811: PPUSH
// result := array + 0 ;
30812: LD_ADDR_VAR 0 2
30816: PUSH
30817: LD_VAR 0 1
30821: PUSH
30822: LD_INT 0
30824: PLUS
30825: ST_TO_ADDR
// end ;
30826: LD_VAR 0 2
30830: RET
// export function IsEmpty ( building ) ; begin
30831: LD_INT 0
30833: PPUSH
// if not building then
30834: LD_VAR 0 1
30838: NOT
30839: IFFALSE 30843
// exit ;
30841: GO 30886
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
30843: LD_ADDR_VAR 0 2
30847: PUSH
30848: LD_VAR 0 1
30852: PUSH
30853: LD_INT 22
30855: PUSH
30856: LD_VAR 0 1
30860: PPUSH
30861: CALL_OW 255
30865: PUSH
30866: EMPTY
30867: LIST
30868: LIST
30869: PUSH
30870: LD_INT 58
30872: PUSH
30873: EMPTY
30874: LIST
30875: PUSH
30876: EMPTY
30877: LIST
30878: LIST
30879: PPUSH
30880: CALL_OW 69
30884: IN
30885: ST_TO_ADDR
// end ;
30886: LD_VAR 0 2
30890: RET
// export function IsNotFull ( building ) ; var places ; begin
30891: LD_INT 0
30893: PPUSH
30894: PPUSH
// if not building then
30895: LD_VAR 0 1
30899: NOT
30900: IFFALSE 30904
// exit ;
30902: GO 30932
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
30904: LD_ADDR_VAR 0 2
30908: PUSH
30909: LD_VAR 0 1
30913: PPUSH
30914: LD_INT 3
30916: PUSH
30917: LD_INT 62
30919: PUSH
30920: EMPTY
30921: LIST
30922: PUSH
30923: EMPTY
30924: LIST
30925: LIST
30926: PPUSH
30927: CALL_OW 72
30931: ST_TO_ADDR
// end ;
30932: LD_VAR 0 2
30936: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
30937: LD_INT 0
30939: PPUSH
30940: PPUSH
30941: PPUSH
30942: PPUSH
// tmp := [ ] ;
30943: LD_ADDR_VAR 0 3
30947: PUSH
30948: EMPTY
30949: ST_TO_ADDR
// list := [ ] ;
30950: LD_ADDR_VAR 0 5
30954: PUSH
30955: EMPTY
30956: ST_TO_ADDR
// for i = 16 to 25 do
30957: LD_ADDR_VAR 0 4
30961: PUSH
30962: DOUBLE
30963: LD_INT 16
30965: DEC
30966: ST_TO_ADDR
30967: LD_INT 25
30969: PUSH
30970: FOR_TO
30971: IFFALSE 31044
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
30973: LD_ADDR_VAR 0 3
30977: PUSH
30978: LD_VAR 0 3
30982: PUSH
30983: LD_INT 22
30985: PUSH
30986: LD_VAR 0 1
30990: PPUSH
30991: CALL_OW 255
30995: PUSH
30996: EMPTY
30997: LIST
30998: LIST
30999: PUSH
31000: LD_INT 91
31002: PUSH
31003: LD_VAR 0 1
31007: PUSH
31008: LD_INT 6
31010: PUSH
31011: EMPTY
31012: LIST
31013: LIST
31014: LIST
31015: PUSH
31016: LD_INT 30
31018: PUSH
31019: LD_VAR 0 4
31023: PUSH
31024: EMPTY
31025: LIST
31026: LIST
31027: PUSH
31028: EMPTY
31029: LIST
31030: LIST
31031: LIST
31032: PUSH
31033: EMPTY
31034: LIST
31035: PPUSH
31036: CALL_OW 69
31040: ADD
31041: ST_TO_ADDR
31042: GO 30970
31044: POP
31045: POP
// for i = 1 to tmp do
31046: LD_ADDR_VAR 0 4
31050: PUSH
31051: DOUBLE
31052: LD_INT 1
31054: DEC
31055: ST_TO_ADDR
31056: LD_VAR 0 3
31060: PUSH
31061: FOR_TO
31062: IFFALSE 31150
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
31064: LD_ADDR_VAR 0 5
31068: PUSH
31069: LD_VAR 0 5
31073: PUSH
31074: LD_VAR 0 3
31078: PUSH
31079: LD_VAR 0 4
31083: ARRAY
31084: PPUSH
31085: CALL_OW 266
31089: PUSH
31090: LD_VAR 0 3
31094: PUSH
31095: LD_VAR 0 4
31099: ARRAY
31100: PPUSH
31101: CALL_OW 250
31105: PUSH
31106: LD_VAR 0 3
31110: PUSH
31111: LD_VAR 0 4
31115: ARRAY
31116: PPUSH
31117: CALL_OW 251
31121: PUSH
31122: LD_VAR 0 3
31126: PUSH
31127: LD_VAR 0 4
31131: ARRAY
31132: PPUSH
31133: CALL_OW 254
31137: PUSH
31138: EMPTY
31139: LIST
31140: LIST
31141: LIST
31142: LIST
31143: PUSH
31144: EMPTY
31145: LIST
31146: ADD
31147: ST_TO_ADDR
31148: GO 31061
31150: POP
31151: POP
// result := list ;
31152: LD_ADDR_VAR 0 2
31156: PUSH
31157: LD_VAR 0 5
31161: ST_TO_ADDR
// end ;
31162: LD_VAR 0 2
31166: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
31167: LD_INT 0
31169: PPUSH
31170: PPUSH
31171: PPUSH
31172: PPUSH
31173: PPUSH
31174: PPUSH
31175: PPUSH
// if not factory then
31176: LD_VAR 0 1
31180: NOT
31181: IFFALSE 31185
// exit ;
31183: GO 31778
// if control = control_apeman then
31185: LD_VAR 0 4
31189: PUSH
31190: LD_INT 5
31192: EQUAL
31193: IFFALSE 31302
// begin tmp := UnitsInside ( factory ) ;
31195: LD_ADDR_VAR 0 8
31199: PUSH
31200: LD_VAR 0 1
31204: PPUSH
31205: CALL_OW 313
31209: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
31210: LD_VAR 0 8
31214: PPUSH
31215: LD_INT 25
31217: PUSH
31218: LD_INT 12
31220: PUSH
31221: EMPTY
31222: LIST
31223: LIST
31224: PPUSH
31225: CALL_OW 72
31229: NOT
31230: IFFALSE 31240
// control := control_manual ;
31232: LD_ADDR_VAR 0 4
31236: PUSH
31237: LD_INT 1
31239: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
31240: LD_ADDR_VAR 0 8
31244: PUSH
31245: LD_VAR 0 1
31249: PPUSH
31250: CALL 30937 0 1
31254: ST_TO_ADDR
// if tmp then
31255: LD_VAR 0 8
31259: IFFALSE 31302
// begin for i in tmp do
31261: LD_ADDR_VAR 0 7
31265: PUSH
31266: LD_VAR 0 8
31270: PUSH
31271: FOR_IN
31272: IFFALSE 31300
// if i [ 1 ] = b_ext_radio then
31274: LD_VAR 0 7
31278: PUSH
31279: LD_INT 1
31281: ARRAY
31282: PUSH
31283: LD_INT 22
31285: EQUAL
31286: IFFALSE 31298
// begin control := control_remote ;
31288: LD_ADDR_VAR 0 4
31292: PUSH
31293: LD_INT 2
31295: ST_TO_ADDR
// break ;
31296: GO 31300
// end ;
31298: GO 31271
31300: POP
31301: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
31302: LD_VAR 0 1
31306: PPUSH
31307: LD_VAR 0 2
31311: PPUSH
31312: LD_VAR 0 3
31316: PPUSH
31317: LD_VAR 0 4
31321: PPUSH
31322: LD_VAR 0 5
31326: PPUSH
31327: CALL_OW 448
31331: IFFALSE 31366
// begin result := [ chassis , engine , control , weapon ] ;
31333: LD_ADDR_VAR 0 6
31337: PUSH
31338: LD_VAR 0 2
31342: PUSH
31343: LD_VAR 0 3
31347: PUSH
31348: LD_VAR 0 4
31352: PUSH
31353: LD_VAR 0 5
31357: PUSH
31358: EMPTY
31359: LIST
31360: LIST
31361: LIST
31362: LIST
31363: ST_TO_ADDR
// exit ;
31364: GO 31778
// end ; _chassis := AvailableChassisList ( factory ) ;
31366: LD_ADDR_VAR 0 9
31370: PUSH
31371: LD_VAR 0 1
31375: PPUSH
31376: CALL_OW 475
31380: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
31381: LD_ADDR_VAR 0 11
31385: PUSH
31386: LD_VAR 0 1
31390: PPUSH
31391: CALL_OW 476
31395: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
31396: LD_ADDR_VAR 0 12
31400: PUSH
31401: LD_VAR 0 1
31405: PPUSH
31406: CALL_OW 477
31410: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
31411: LD_ADDR_VAR 0 10
31415: PUSH
31416: LD_VAR 0 1
31420: PPUSH
31421: CALL_OW 478
31425: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
31426: LD_VAR 0 9
31430: NOT
31431: PUSH
31432: LD_VAR 0 11
31436: NOT
31437: OR
31438: PUSH
31439: LD_VAR 0 12
31443: NOT
31444: OR
31445: PUSH
31446: LD_VAR 0 10
31450: NOT
31451: OR
31452: IFFALSE 31487
// begin result := [ chassis , engine , control , weapon ] ;
31454: LD_ADDR_VAR 0 6
31458: PUSH
31459: LD_VAR 0 2
31463: PUSH
31464: LD_VAR 0 3
31468: PUSH
31469: LD_VAR 0 4
31473: PUSH
31474: LD_VAR 0 5
31478: PUSH
31479: EMPTY
31480: LIST
31481: LIST
31482: LIST
31483: LIST
31484: ST_TO_ADDR
// exit ;
31485: GO 31778
// end ; if not chassis in _chassis then
31487: LD_VAR 0 2
31491: PUSH
31492: LD_VAR 0 9
31496: IN
31497: NOT
31498: IFFALSE 31524
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
31500: LD_ADDR_VAR 0 2
31504: PUSH
31505: LD_VAR 0 9
31509: PUSH
31510: LD_INT 1
31512: PPUSH
31513: LD_VAR 0 9
31517: PPUSH
31518: CALL_OW 12
31522: ARRAY
31523: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
31524: LD_VAR 0 2
31528: PPUSH
31529: LD_VAR 0 3
31533: PPUSH
31534: CALL 31783 0 2
31538: NOT
31539: IFFALSE 31598
// repeat engine := _engine [ 1 ] ;
31541: LD_ADDR_VAR 0 3
31545: PUSH
31546: LD_VAR 0 11
31550: PUSH
31551: LD_INT 1
31553: ARRAY
31554: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
31555: LD_ADDR_VAR 0 11
31559: PUSH
31560: LD_VAR 0 11
31564: PPUSH
31565: LD_INT 1
31567: PPUSH
31568: CALL_OW 3
31572: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
31573: LD_VAR 0 2
31577: PPUSH
31578: LD_VAR 0 3
31582: PPUSH
31583: CALL 31783 0 2
31587: PUSH
31588: LD_VAR 0 11
31592: PUSH
31593: EMPTY
31594: EQUAL
31595: OR
31596: IFFALSE 31541
// if not control in _control then
31598: LD_VAR 0 4
31602: PUSH
31603: LD_VAR 0 12
31607: IN
31608: NOT
31609: IFFALSE 31635
// control := _control [ rand ( 1 , _control ) ] ;
31611: LD_ADDR_VAR 0 4
31615: PUSH
31616: LD_VAR 0 12
31620: PUSH
31621: LD_INT 1
31623: PPUSH
31624: LD_VAR 0 12
31628: PPUSH
31629: CALL_OW 12
31633: ARRAY
31634: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
31635: LD_VAR 0 2
31639: PPUSH
31640: LD_VAR 0 5
31644: PPUSH
31645: CALL 32003 0 2
31649: NOT
31650: IFFALSE 31709
// repeat weapon := _weapon [ 1 ] ;
31652: LD_ADDR_VAR 0 5
31656: PUSH
31657: LD_VAR 0 10
31661: PUSH
31662: LD_INT 1
31664: ARRAY
31665: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
31666: LD_ADDR_VAR 0 10
31670: PUSH
31671: LD_VAR 0 10
31675: PPUSH
31676: LD_INT 1
31678: PPUSH
31679: CALL_OW 3
31683: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
31684: LD_VAR 0 2
31688: PPUSH
31689: LD_VAR 0 5
31693: PPUSH
31694: CALL 32003 0 2
31698: PUSH
31699: LD_VAR 0 10
31703: PUSH
31704: EMPTY
31705: EQUAL
31706: OR
31707: IFFALSE 31652
// result := [ ] ;
31709: LD_ADDR_VAR 0 6
31713: PUSH
31714: EMPTY
31715: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
31716: LD_VAR 0 1
31720: PPUSH
31721: LD_VAR 0 2
31725: PPUSH
31726: LD_VAR 0 3
31730: PPUSH
31731: LD_VAR 0 4
31735: PPUSH
31736: LD_VAR 0 5
31740: PPUSH
31741: CALL_OW 448
31745: IFFALSE 31778
// result := [ chassis , engine , control , weapon ] ;
31747: LD_ADDR_VAR 0 6
31751: PUSH
31752: LD_VAR 0 2
31756: PUSH
31757: LD_VAR 0 3
31761: PUSH
31762: LD_VAR 0 4
31766: PUSH
31767: LD_VAR 0 5
31771: PUSH
31772: EMPTY
31773: LIST
31774: LIST
31775: LIST
31776: LIST
31777: ST_TO_ADDR
// end ;
31778: LD_VAR 0 6
31782: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
31783: LD_INT 0
31785: PPUSH
// if not chassis or not engine then
31786: LD_VAR 0 1
31790: NOT
31791: PUSH
31792: LD_VAR 0 2
31796: NOT
31797: OR
31798: IFFALSE 31802
// exit ;
31800: GO 31998
// case engine of engine_solar :
31802: LD_VAR 0 2
31806: PUSH
31807: LD_INT 2
31809: DOUBLE
31810: EQUAL
31811: IFTRUE 31815
31813: GO 31853
31815: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
31816: LD_ADDR_VAR 0 3
31820: PUSH
31821: LD_INT 11
31823: PUSH
31824: LD_INT 12
31826: PUSH
31827: LD_INT 13
31829: PUSH
31830: LD_INT 14
31832: PUSH
31833: LD_INT 1
31835: PUSH
31836: LD_INT 2
31838: PUSH
31839: LD_INT 3
31841: PUSH
31842: EMPTY
31843: LIST
31844: LIST
31845: LIST
31846: LIST
31847: LIST
31848: LIST
31849: LIST
31850: ST_TO_ADDR
31851: GO 31982
31853: LD_INT 1
31855: DOUBLE
31856: EQUAL
31857: IFTRUE 31861
31859: GO 31923
31861: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
31862: LD_ADDR_VAR 0 3
31866: PUSH
31867: LD_INT 11
31869: PUSH
31870: LD_INT 12
31872: PUSH
31873: LD_INT 13
31875: PUSH
31876: LD_INT 14
31878: PUSH
31879: LD_INT 1
31881: PUSH
31882: LD_INT 2
31884: PUSH
31885: LD_INT 3
31887: PUSH
31888: LD_INT 4
31890: PUSH
31891: LD_INT 5
31893: PUSH
31894: LD_INT 21
31896: PUSH
31897: LD_INT 23
31899: PUSH
31900: LD_INT 22
31902: PUSH
31903: LD_INT 24
31905: PUSH
31906: EMPTY
31907: LIST
31908: LIST
31909: LIST
31910: LIST
31911: LIST
31912: LIST
31913: LIST
31914: LIST
31915: LIST
31916: LIST
31917: LIST
31918: LIST
31919: LIST
31920: ST_TO_ADDR
31921: GO 31982
31923: LD_INT 3
31925: DOUBLE
31926: EQUAL
31927: IFTRUE 31931
31929: GO 31981
31931: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
31932: LD_ADDR_VAR 0 3
31936: PUSH
31937: LD_INT 13
31939: PUSH
31940: LD_INT 14
31942: PUSH
31943: LD_INT 2
31945: PUSH
31946: LD_INT 3
31948: PUSH
31949: LD_INT 4
31951: PUSH
31952: LD_INT 5
31954: PUSH
31955: LD_INT 21
31957: PUSH
31958: LD_INT 22
31960: PUSH
31961: LD_INT 23
31963: PUSH
31964: LD_INT 24
31966: PUSH
31967: EMPTY
31968: LIST
31969: LIST
31970: LIST
31971: LIST
31972: LIST
31973: LIST
31974: LIST
31975: LIST
31976: LIST
31977: LIST
31978: ST_TO_ADDR
31979: GO 31982
31981: POP
// result := ( chassis in result ) ;
31982: LD_ADDR_VAR 0 3
31986: PUSH
31987: LD_VAR 0 1
31991: PUSH
31992: LD_VAR 0 3
31996: IN
31997: ST_TO_ADDR
// end ;
31998: LD_VAR 0 3
32002: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
32003: LD_INT 0
32005: PPUSH
// if not chassis or not weapon then
32006: LD_VAR 0 1
32010: NOT
32011: PUSH
32012: LD_VAR 0 2
32016: NOT
32017: OR
32018: IFFALSE 32022
// exit ;
32020: GO 33082
// case weapon of us_machine_gun :
32022: LD_VAR 0 2
32026: PUSH
32027: LD_INT 2
32029: DOUBLE
32030: EQUAL
32031: IFTRUE 32035
32033: GO 32065
32035: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
32036: LD_ADDR_VAR 0 3
32040: PUSH
32041: LD_INT 1
32043: PUSH
32044: LD_INT 2
32046: PUSH
32047: LD_INT 3
32049: PUSH
32050: LD_INT 4
32052: PUSH
32053: LD_INT 5
32055: PUSH
32056: EMPTY
32057: LIST
32058: LIST
32059: LIST
32060: LIST
32061: LIST
32062: ST_TO_ADDR
32063: GO 33066
32065: LD_INT 3
32067: DOUBLE
32068: EQUAL
32069: IFTRUE 32073
32071: GO 32103
32073: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
32074: LD_ADDR_VAR 0 3
32078: PUSH
32079: LD_INT 1
32081: PUSH
32082: LD_INT 2
32084: PUSH
32085: LD_INT 3
32087: PUSH
32088: LD_INT 4
32090: PUSH
32091: LD_INT 5
32093: PUSH
32094: EMPTY
32095: LIST
32096: LIST
32097: LIST
32098: LIST
32099: LIST
32100: ST_TO_ADDR
32101: GO 33066
32103: LD_INT 11
32105: DOUBLE
32106: EQUAL
32107: IFTRUE 32111
32109: GO 32141
32111: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
32112: LD_ADDR_VAR 0 3
32116: PUSH
32117: LD_INT 1
32119: PUSH
32120: LD_INT 2
32122: PUSH
32123: LD_INT 3
32125: PUSH
32126: LD_INT 4
32128: PUSH
32129: LD_INT 5
32131: PUSH
32132: EMPTY
32133: LIST
32134: LIST
32135: LIST
32136: LIST
32137: LIST
32138: ST_TO_ADDR
32139: GO 33066
32141: LD_INT 4
32143: DOUBLE
32144: EQUAL
32145: IFTRUE 32149
32147: GO 32175
32149: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
32150: LD_ADDR_VAR 0 3
32154: PUSH
32155: LD_INT 2
32157: PUSH
32158: LD_INT 3
32160: PUSH
32161: LD_INT 4
32163: PUSH
32164: LD_INT 5
32166: PUSH
32167: EMPTY
32168: LIST
32169: LIST
32170: LIST
32171: LIST
32172: ST_TO_ADDR
32173: GO 33066
32175: LD_INT 5
32177: DOUBLE
32178: EQUAL
32179: IFTRUE 32183
32181: GO 32209
32183: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
32184: LD_ADDR_VAR 0 3
32188: PUSH
32189: LD_INT 2
32191: PUSH
32192: LD_INT 3
32194: PUSH
32195: LD_INT 4
32197: PUSH
32198: LD_INT 5
32200: PUSH
32201: EMPTY
32202: LIST
32203: LIST
32204: LIST
32205: LIST
32206: ST_TO_ADDR
32207: GO 33066
32209: LD_INT 9
32211: DOUBLE
32212: EQUAL
32213: IFTRUE 32217
32215: GO 32243
32217: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
32218: LD_ADDR_VAR 0 3
32222: PUSH
32223: LD_INT 2
32225: PUSH
32226: LD_INT 3
32228: PUSH
32229: LD_INT 4
32231: PUSH
32232: LD_INT 5
32234: PUSH
32235: EMPTY
32236: LIST
32237: LIST
32238: LIST
32239: LIST
32240: ST_TO_ADDR
32241: GO 33066
32243: LD_INT 7
32245: DOUBLE
32246: EQUAL
32247: IFTRUE 32251
32249: GO 32277
32251: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
32252: LD_ADDR_VAR 0 3
32256: PUSH
32257: LD_INT 2
32259: PUSH
32260: LD_INT 3
32262: PUSH
32263: LD_INT 4
32265: PUSH
32266: LD_INT 5
32268: PUSH
32269: EMPTY
32270: LIST
32271: LIST
32272: LIST
32273: LIST
32274: ST_TO_ADDR
32275: GO 33066
32277: LD_INT 12
32279: DOUBLE
32280: EQUAL
32281: IFTRUE 32285
32283: GO 32311
32285: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
32286: LD_ADDR_VAR 0 3
32290: PUSH
32291: LD_INT 2
32293: PUSH
32294: LD_INT 3
32296: PUSH
32297: LD_INT 4
32299: PUSH
32300: LD_INT 5
32302: PUSH
32303: EMPTY
32304: LIST
32305: LIST
32306: LIST
32307: LIST
32308: ST_TO_ADDR
32309: GO 33066
32311: LD_INT 13
32313: DOUBLE
32314: EQUAL
32315: IFTRUE 32319
32317: GO 32345
32319: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
32320: LD_ADDR_VAR 0 3
32324: PUSH
32325: LD_INT 2
32327: PUSH
32328: LD_INT 3
32330: PUSH
32331: LD_INT 4
32333: PUSH
32334: LD_INT 5
32336: PUSH
32337: EMPTY
32338: LIST
32339: LIST
32340: LIST
32341: LIST
32342: ST_TO_ADDR
32343: GO 33066
32345: LD_INT 14
32347: DOUBLE
32348: EQUAL
32349: IFTRUE 32353
32351: GO 32371
32353: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
32354: LD_ADDR_VAR 0 3
32358: PUSH
32359: LD_INT 4
32361: PUSH
32362: LD_INT 5
32364: PUSH
32365: EMPTY
32366: LIST
32367: LIST
32368: ST_TO_ADDR
32369: GO 33066
32371: LD_INT 6
32373: DOUBLE
32374: EQUAL
32375: IFTRUE 32379
32377: GO 32397
32379: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
32380: LD_ADDR_VAR 0 3
32384: PUSH
32385: LD_INT 4
32387: PUSH
32388: LD_INT 5
32390: PUSH
32391: EMPTY
32392: LIST
32393: LIST
32394: ST_TO_ADDR
32395: GO 33066
32397: LD_INT 10
32399: DOUBLE
32400: EQUAL
32401: IFTRUE 32405
32403: GO 32423
32405: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
32406: LD_ADDR_VAR 0 3
32410: PUSH
32411: LD_INT 4
32413: PUSH
32414: LD_INT 5
32416: PUSH
32417: EMPTY
32418: LIST
32419: LIST
32420: ST_TO_ADDR
32421: GO 33066
32423: LD_INT 22
32425: DOUBLE
32426: EQUAL
32427: IFTRUE 32431
32429: GO 32457
32431: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
32432: LD_ADDR_VAR 0 3
32436: PUSH
32437: LD_INT 11
32439: PUSH
32440: LD_INT 12
32442: PUSH
32443: LD_INT 13
32445: PUSH
32446: LD_INT 14
32448: PUSH
32449: EMPTY
32450: LIST
32451: LIST
32452: LIST
32453: LIST
32454: ST_TO_ADDR
32455: GO 33066
32457: LD_INT 23
32459: DOUBLE
32460: EQUAL
32461: IFTRUE 32465
32463: GO 32491
32465: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
32466: LD_ADDR_VAR 0 3
32470: PUSH
32471: LD_INT 11
32473: PUSH
32474: LD_INT 12
32476: PUSH
32477: LD_INT 13
32479: PUSH
32480: LD_INT 14
32482: PUSH
32483: EMPTY
32484: LIST
32485: LIST
32486: LIST
32487: LIST
32488: ST_TO_ADDR
32489: GO 33066
32491: LD_INT 24
32493: DOUBLE
32494: EQUAL
32495: IFTRUE 32499
32497: GO 32525
32499: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
32500: LD_ADDR_VAR 0 3
32504: PUSH
32505: LD_INT 11
32507: PUSH
32508: LD_INT 12
32510: PUSH
32511: LD_INT 13
32513: PUSH
32514: LD_INT 14
32516: PUSH
32517: EMPTY
32518: LIST
32519: LIST
32520: LIST
32521: LIST
32522: ST_TO_ADDR
32523: GO 33066
32525: LD_INT 30
32527: DOUBLE
32528: EQUAL
32529: IFTRUE 32533
32531: GO 32559
32533: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
32534: LD_ADDR_VAR 0 3
32538: PUSH
32539: LD_INT 11
32541: PUSH
32542: LD_INT 12
32544: PUSH
32545: LD_INT 13
32547: PUSH
32548: LD_INT 14
32550: PUSH
32551: EMPTY
32552: LIST
32553: LIST
32554: LIST
32555: LIST
32556: ST_TO_ADDR
32557: GO 33066
32559: LD_INT 25
32561: DOUBLE
32562: EQUAL
32563: IFTRUE 32567
32565: GO 32585
32567: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
32568: LD_ADDR_VAR 0 3
32572: PUSH
32573: LD_INT 13
32575: PUSH
32576: LD_INT 14
32578: PUSH
32579: EMPTY
32580: LIST
32581: LIST
32582: ST_TO_ADDR
32583: GO 33066
32585: LD_INT 27
32587: DOUBLE
32588: EQUAL
32589: IFTRUE 32593
32591: GO 32611
32593: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
32594: LD_ADDR_VAR 0 3
32598: PUSH
32599: LD_INT 13
32601: PUSH
32602: LD_INT 14
32604: PUSH
32605: EMPTY
32606: LIST
32607: LIST
32608: ST_TO_ADDR
32609: GO 33066
32611: LD_INT 92
32613: DOUBLE
32614: EQUAL
32615: IFTRUE 32619
32617: GO 32645
32619: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
32620: LD_ADDR_VAR 0 3
32624: PUSH
32625: LD_INT 11
32627: PUSH
32628: LD_INT 12
32630: PUSH
32631: LD_INT 13
32633: PUSH
32634: LD_INT 14
32636: PUSH
32637: EMPTY
32638: LIST
32639: LIST
32640: LIST
32641: LIST
32642: ST_TO_ADDR
32643: GO 33066
32645: LD_INT 28
32647: DOUBLE
32648: EQUAL
32649: IFTRUE 32653
32651: GO 32671
32653: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
32654: LD_ADDR_VAR 0 3
32658: PUSH
32659: LD_INT 13
32661: PUSH
32662: LD_INT 14
32664: PUSH
32665: EMPTY
32666: LIST
32667: LIST
32668: ST_TO_ADDR
32669: GO 33066
32671: LD_INT 29
32673: DOUBLE
32674: EQUAL
32675: IFTRUE 32679
32677: GO 32697
32679: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
32680: LD_ADDR_VAR 0 3
32684: PUSH
32685: LD_INT 13
32687: PUSH
32688: LD_INT 14
32690: PUSH
32691: EMPTY
32692: LIST
32693: LIST
32694: ST_TO_ADDR
32695: GO 33066
32697: LD_INT 31
32699: DOUBLE
32700: EQUAL
32701: IFTRUE 32705
32703: GO 32723
32705: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
32706: LD_ADDR_VAR 0 3
32710: PUSH
32711: LD_INT 13
32713: PUSH
32714: LD_INT 14
32716: PUSH
32717: EMPTY
32718: LIST
32719: LIST
32720: ST_TO_ADDR
32721: GO 33066
32723: LD_INT 26
32725: DOUBLE
32726: EQUAL
32727: IFTRUE 32731
32729: GO 32749
32731: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
32732: LD_ADDR_VAR 0 3
32736: PUSH
32737: LD_INT 13
32739: PUSH
32740: LD_INT 14
32742: PUSH
32743: EMPTY
32744: LIST
32745: LIST
32746: ST_TO_ADDR
32747: GO 33066
32749: LD_INT 42
32751: DOUBLE
32752: EQUAL
32753: IFTRUE 32757
32755: GO 32783
32757: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
32758: LD_ADDR_VAR 0 3
32762: PUSH
32763: LD_INT 21
32765: PUSH
32766: LD_INT 22
32768: PUSH
32769: LD_INT 23
32771: PUSH
32772: LD_INT 24
32774: PUSH
32775: EMPTY
32776: LIST
32777: LIST
32778: LIST
32779: LIST
32780: ST_TO_ADDR
32781: GO 33066
32783: LD_INT 43
32785: DOUBLE
32786: EQUAL
32787: IFTRUE 32791
32789: GO 32817
32791: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
32792: LD_ADDR_VAR 0 3
32796: PUSH
32797: LD_INT 21
32799: PUSH
32800: LD_INT 22
32802: PUSH
32803: LD_INT 23
32805: PUSH
32806: LD_INT 24
32808: PUSH
32809: EMPTY
32810: LIST
32811: LIST
32812: LIST
32813: LIST
32814: ST_TO_ADDR
32815: GO 33066
32817: LD_INT 44
32819: DOUBLE
32820: EQUAL
32821: IFTRUE 32825
32823: GO 32851
32825: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
32826: LD_ADDR_VAR 0 3
32830: PUSH
32831: LD_INT 21
32833: PUSH
32834: LD_INT 22
32836: PUSH
32837: LD_INT 23
32839: PUSH
32840: LD_INT 24
32842: PUSH
32843: EMPTY
32844: LIST
32845: LIST
32846: LIST
32847: LIST
32848: ST_TO_ADDR
32849: GO 33066
32851: LD_INT 45
32853: DOUBLE
32854: EQUAL
32855: IFTRUE 32859
32857: GO 32885
32859: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
32860: LD_ADDR_VAR 0 3
32864: PUSH
32865: LD_INT 21
32867: PUSH
32868: LD_INT 22
32870: PUSH
32871: LD_INT 23
32873: PUSH
32874: LD_INT 24
32876: PUSH
32877: EMPTY
32878: LIST
32879: LIST
32880: LIST
32881: LIST
32882: ST_TO_ADDR
32883: GO 33066
32885: LD_INT 49
32887: DOUBLE
32888: EQUAL
32889: IFTRUE 32893
32891: GO 32919
32893: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
32894: LD_ADDR_VAR 0 3
32898: PUSH
32899: LD_INT 21
32901: PUSH
32902: LD_INT 22
32904: PUSH
32905: LD_INT 23
32907: PUSH
32908: LD_INT 24
32910: PUSH
32911: EMPTY
32912: LIST
32913: LIST
32914: LIST
32915: LIST
32916: ST_TO_ADDR
32917: GO 33066
32919: LD_INT 51
32921: DOUBLE
32922: EQUAL
32923: IFTRUE 32927
32925: GO 32953
32927: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
32928: LD_ADDR_VAR 0 3
32932: PUSH
32933: LD_INT 21
32935: PUSH
32936: LD_INT 22
32938: PUSH
32939: LD_INT 23
32941: PUSH
32942: LD_INT 24
32944: PUSH
32945: EMPTY
32946: LIST
32947: LIST
32948: LIST
32949: LIST
32950: ST_TO_ADDR
32951: GO 33066
32953: LD_INT 52
32955: DOUBLE
32956: EQUAL
32957: IFTRUE 32961
32959: GO 32987
32961: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
32962: LD_ADDR_VAR 0 3
32966: PUSH
32967: LD_INT 21
32969: PUSH
32970: LD_INT 22
32972: PUSH
32973: LD_INT 23
32975: PUSH
32976: LD_INT 24
32978: PUSH
32979: EMPTY
32980: LIST
32981: LIST
32982: LIST
32983: LIST
32984: ST_TO_ADDR
32985: GO 33066
32987: LD_INT 53
32989: DOUBLE
32990: EQUAL
32991: IFTRUE 32995
32993: GO 33013
32995: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
32996: LD_ADDR_VAR 0 3
33000: PUSH
33001: LD_INT 23
33003: PUSH
33004: LD_INT 24
33006: PUSH
33007: EMPTY
33008: LIST
33009: LIST
33010: ST_TO_ADDR
33011: GO 33066
33013: LD_INT 46
33015: DOUBLE
33016: EQUAL
33017: IFTRUE 33021
33019: GO 33039
33021: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
33022: LD_ADDR_VAR 0 3
33026: PUSH
33027: LD_INT 23
33029: PUSH
33030: LD_INT 24
33032: PUSH
33033: EMPTY
33034: LIST
33035: LIST
33036: ST_TO_ADDR
33037: GO 33066
33039: LD_INT 47
33041: DOUBLE
33042: EQUAL
33043: IFTRUE 33047
33045: GO 33065
33047: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33048: LD_ADDR_VAR 0 3
33052: PUSH
33053: LD_INT 23
33055: PUSH
33056: LD_INT 24
33058: PUSH
33059: EMPTY
33060: LIST
33061: LIST
33062: ST_TO_ADDR
33063: GO 33066
33065: POP
// result := ( chassis in result ) ;
33066: LD_ADDR_VAR 0 3
33070: PUSH
33071: LD_VAR 0 1
33075: PUSH
33076: LD_VAR 0 3
33080: IN
33081: ST_TO_ADDR
// end ;
33082: LD_VAR 0 3
33086: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
33087: LD_INT 0
33089: PPUSH
33090: PPUSH
33091: PPUSH
33092: PPUSH
33093: PPUSH
33094: PPUSH
33095: PPUSH
// result := array ;
33096: LD_ADDR_VAR 0 5
33100: PUSH
33101: LD_VAR 0 1
33105: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
33106: LD_VAR 0 1
33110: NOT
33111: PUSH
33112: LD_VAR 0 2
33116: NOT
33117: OR
33118: PUSH
33119: LD_VAR 0 3
33123: NOT
33124: OR
33125: PUSH
33126: LD_VAR 0 2
33130: PUSH
33131: LD_VAR 0 1
33135: GREATER
33136: OR
33137: PUSH
33138: LD_VAR 0 3
33142: PUSH
33143: LD_VAR 0 1
33147: GREATER
33148: OR
33149: IFFALSE 33153
// exit ;
33151: GO 33449
// if direction then
33153: LD_VAR 0 4
33157: IFFALSE 33221
// begin d := 1 ;
33159: LD_ADDR_VAR 0 9
33163: PUSH
33164: LD_INT 1
33166: ST_TO_ADDR
// if i_from > i_to then
33167: LD_VAR 0 2
33171: PUSH
33172: LD_VAR 0 3
33176: GREATER
33177: IFFALSE 33203
// length := ( array - i_from ) + i_to else
33179: LD_ADDR_VAR 0 11
33183: PUSH
33184: LD_VAR 0 1
33188: PUSH
33189: LD_VAR 0 2
33193: MINUS
33194: PUSH
33195: LD_VAR 0 3
33199: PLUS
33200: ST_TO_ADDR
33201: GO 33219
// length := i_to - i_from ;
33203: LD_ADDR_VAR 0 11
33207: PUSH
33208: LD_VAR 0 3
33212: PUSH
33213: LD_VAR 0 2
33217: MINUS
33218: ST_TO_ADDR
// end else
33219: GO 33282
// begin d := - 1 ;
33221: LD_ADDR_VAR 0 9
33225: PUSH
33226: LD_INT 1
33228: NEG
33229: ST_TO_ADDR
// if i_from > i_to then
33230: LD_VAR 0 2
33234: PUSH
33235: LD_VAR 0 3
33239: GREATER
33240: IFFALSE 33260
// length := i_from - i_to else
33242: LD_ADDR_VAR 0 11
33246: PUSH
33247: LD_VAR 0 2
33251: PUSH
33252: LD_VAR 0 3
33256: MINUS
33257: ST_TO_ADDR
33258: GO 33282
// length := ( array - i_to ) + i_from ;
33260: LD_ADDR_VAR 0 11
33264: PUSH
33265: LD_VAR 0 1
33269: PUSH
33270: LD_VAR 0 3
33274: MINUS
33275: PUSH
33276: LD_VAR 0 2
33280: PLUS
33281: ST_TO_ADDR
// end ; if not length then
33282: LD_VAR 0 11
33286: NOT
33287: IFFALSE 33291
// exit ;
33289: GO 33449
// tmp := array ;
33291: LD_ADDR_VAR 0 10
33295: PUSH
33296: LD_VAR 0 1
33300: ST_TO_ADDR
// for i = 1 to length do
33301: LD_ADDR_VAR 0 6
33305: PUSH
33306: DOUBLE
33307: LD_INT 1
33309: DEC
33310: ST_TO_ADDR
33311: LD_VAR 0 11
33315: PUSH
33316: FOR_TO
33317: IFFALSE 33437
// begin for j = 1 to array do
33319: LD_ADDR_VAR 0 7
33323: PUSH
33324: DOUBLE
33325: LD_INT 1
33327: DEC
33328: ST_TO_ADDR
33329: LD_VAR 0 1
33333: PUSH
33334: FOR_TO
33335: IFFALSE 33423
// begin k := j + d ;
33337: LD_ADDR_VAR 0 8
33341: PUSH
33342: LD_VAR 0 7
33346: PUSH
33347: LD_VAR 0 9
33351: PLUS
33352: ST_TO_ADDR
// if k > array then
33353: LD_VAR 0 8
33357: PUSH
33358: LD_VAR 0 1
33362: GREATER
33363: IFFALSE 33373
// k := 1 ;
33365: LD_ADDR_VAR 0 8
33369: PUSH
33370: LD_INT 1
33372: ST_TO_ADDR
// if not k then
33373: LD_VAR 0 8
33377: NOT
33378: IFFALSE 33390
// k := array ;
33380: LD_ADDR_VAR 0 8
33384: PUSH
33385: LD_VAR 0 1
33389: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
33390: LD_ADDR_VAR 0 10
33394: PUSH
33395: LD_VAR 0 10
33399: PPUSH
33400: LD_VAR 0 8
33404: PPUSH
33405: LD_VAR 0 1
33409: PUSH
33410: LD_VAR 0 7
33414: ARRAY
33415: PPUSH
33416: CALL_OW 1
33420: ST_TO_ADDR
// end ;
33421: GO 33334
33423: POP
33424: POP
// array := tmp ;
33425: LD_ADDR_VAR 0 1
33429: PUSH
33430: LD_VAR 0 10
33434: ST_TO_ADDR
// end ;
33435: GO 33316
33437: POP
33438: POP
// result := array ;
33439: LD_ADDR_VAR 0 5
33443: PUSH
33444: LD_VAR 0 1
33448: ST_TO_ADDR
// end ;
33449: LD_VAR 0 5
33453: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
33454: LD_INT 0
33456: PPUSH
33457: PPUSH
// result := 0 ;
33458: LD_ADDR_VAR 0 3
33462: PUSH
33463: LD_INT 0
33465: ST_TO_ADDR
// if not array or not value in array then
33466: LD_VAR 0 1
33470: NOT
33471: PUSH
33472: LD_VAR 0 2
33476: PUSH
33477: LD_VAR 0 1
33481: IN
33482: NOT
33483: OR
33484: IFFALSE 33488
// exit ;
33486: GO 33542
// for i = 1 to array do
33488: LD_ADDR_VAR 0 4
33492: PUSH
33493: DOUBLE
33494: LD_INT 1
33496: DEC
33497: ST_TO_ADDR
33498: LD_VAR 0 1
33502: PUSH
33503: FOR_TO
33504: IFFALSE 33540
// if value = array [ i ] then
33506: LD_VAR 0 2
33510: PUSH
33511: LD_VAR 0 1
33515: PUSH
33516: LD_VAR 0 4
33520: ARRAY
33521: EQUAL
33522: IFFALSE 33538
// begin result := i ;
33524: LD_ADDR_VAR 0 3
33528: PUSH
33529: LD_VAR 0 4
33533: ST_TO_ADDR
// exit ;
33534: POP
33535: POP
33536: GO 33542
// end ;
33538: GO 33503
33540: POP
33541: POP
// end ;
33542: LD_VAR 0 3
33546: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
33547: LD_INT 0
33549: PPUSH
// vc_chassis := chassis ;
33550: LD_ADDR_OWVAR 37
33554: PUSH
33555: LD_VAR 0 1
33559: ST_TO_ADDR
// vc_engine := engine ;
33560: LD_ADDR_OWVAR 39
33564: PUSH
33565: LD_VAR 0 2
33569: ST_TO_ADDR
// vc_control := control ;
33570: LD_ADDR_OWVAR 38
33574: PUSH
33575: LD_VAR 0 3
33579: ST_TO_ADDR
// vc_weapon := weapon ;
33580: LD_ADDR_OWVAR 40
33584: PUSH
33585: LD_VAR 0 4
33589: ST_TO_ADDR
// vc_fuel_battery := fuel ;
33590: LD_ADDR_OWVAR 41
33594: PUSH
33595: LD_VAR 0 5
33599: ST_TO_ADDR
// end ;
33600: LD_VAR 0 6
33604: RET
// export function WantPlant ( unit ) ; var task ; begin
33605: LD_INT 0
33607: PPUSH
33608: PPUSH
// result := false ;
33609: LD_ADDR_VAR 0 2
33613: PUSH
33614: LD_INT 0
33616: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
33617: LD_ADDR_VAR 0 3
33621: PUSH
33622: LD_VAR 0 1
33626: PPUSH
33627: CALL_OW 437
33631: ST_TO_ADDR
// if task then
33632: LD_VAR 0 3
33636: IFFALSE 33664
// if task [ 1 ] [ 1 ] = p then
33638: LD_VAR 0 3
33642: PUSH
33643: LD_INT 1
33645: ARRAY
33646: PUSH
33647: LD_INT 1
33649: ARRAY
33650: PUSH
33651: LD_STRING p
33653: EQUAL
33654: IFFALSE 33664
// result := true ;
33656: LD_ADDR_VAR 0 2
33660: PUSH
33661: LD_INT 1
33663: ST_TO_ADDR
// end ;
33664: LD_VAR 0 2
33668: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
33669: LD_INT 0
33671: PPUSH
33672: PPUSH
33673: PPUSH
33674: PPUSH
// if pos < 1 then
33675: LD_VAR 0 2
33679: PUSH
33680: LD_INT 1
33682: LESS
33683: IFFALSE 33687
// exit ;
33685: GO 33990
// if pos = 1 then
33687: LD_VAR 0 2
33691: PUSH
33692: LD_INT 1
33694: EQUAL
33695: IFFALSE 33728
// result := Replace ( arr , pos [ 1 ] , value ) else
33697: LD_ADDR_VAR 0 4
33701: PUSH
33702: LD_VAR 0 1
33706: PPUSH
33707: LD_VAR 0 2
33711: PUSH
33712: LD_INT 1
33714: ARRAY
33715: PPUSH
33716: LD_VAR 0 3
33720: PPUSH
33721: CALL_OW 1
33725: ST_TO_ADDR
33726: GO 33990
// begin tmp := arr ;
33728: LD_ADDR_VAR 0 6
33732: PUSH
33733: LD_VAR 0 1
33737: ST_TO_ADDR
// s_arr := [ tmp ] ;
33738: LD_ADDR_VAR 0 7
33742: PUSH
33743: LD_VAR 0 6
33747: PUSH
33748: EMPTY
33749: LIST
33750: ST_TO_ADDR
// for i = 1 to pos - 1 do
33751: LD_ADDR_VAR 0 5
33755: PUSH
33756: DOUBLE
33757: LD_INT 1
33759: DEC
33760: ST_TO_ADDR
33761: LD_VAR 0 2
33765: PUSH
33766: LD_INT 1
33768: MINUS
33769: PUSH
33770: FOR_TO
33771: IFFALSE 33816
// begin tmp := tmp [ pos [ i ] ] ;
33773: LD_ADDR_VAR 0 6
33777: PUSH
33778: LD_VAR 0 6
33782: PUSH
33783: LD_VAR 0 2
33787: PUSH
33788: LD_VAR 0 5
33792: ARRAY
33793: ARRAY
33794: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
33795: LD_ADDR_VAR 0 7
33799: PUSH
33800: LD_VAR 0 7
33804: PUSH
33805: LD_VAR 0 6
33809: PUSH
33810: EMPTY
33811: LIST
33812: ADD
33813: ST_TO_ADDR
// end ;
33814: GO 33770
33816: POP
33817: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
33818: LD_ADDR_VAR 0 6
33822: PUSH
33823: LD_VAR 0 6
33827: PPUSH
33828: LD_VAR 0 2
33832: PUSH
33833: LD_VAR 0 2
33837: ARRAY
33838: PPUSH
33839: LD_VAR 0 3
33843: PPUSH
33844: CALL_OW 1
33848: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
33849: LD_ADDR_VAR 0 7
33853: PUSH
33854: LD_VAR 0 7
33858: PPUSH
33859: LD_VAR 0 7
33863: PPUSH
33864: LD_VAR 0 6
33868: PPUSH
33869: CALL_OW 1
33873: ST_TO_ADDR
// for i = s_arr downto 2 do
33874: LD_ADDR_VAR 0 5
33878: PUSH
33879: DOUBLE
33880: LD_VAR 0 7
33884: INC
33885: ST_TO_ADDR
33886: LD_INT 2
33888: PUSH
33889: FOR_DOWNTO
33890: IFFALSE 33974
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
33892: LD_ADDR_VAR 0 6
33896: PUSH
33897: LD_VAR 0 7
33901: PUSH
33902: LD_VAR 0 5
33906: PUSH
33907: LD_INT 1
33909: MINUS
33910: ARRAY
33911: PPUSH
33912: LD_VAR 0 2
33916: PUSH
33917: LD_VAR 0 5
33921: PUSH
33922: LD_INT 1
33924: MINUS
33925: ARRAY
33926: PPUSH
33927: LD_VAR 0 7
33931: PUSH
33932: LD_VAR 0 5
33936: ARRAY
33937: PPUSH
33938: CALL_OW 1
33942: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
33943: LD_ADDR_VAR 0 7
33947: PUSH
33948: LD_VAR 0 7
33952: PPUSH
33953: LD_VAR 0 5
33957: PUSH
33958: LD_INT 1
33960: MINUS
33961: PPUSH
33962: LD_VAR 0 6
33966: PPUSH
33967: CALL_OW 1
33971: ST_TO_ADDR
// end ;
33972: GO 33889
33974: POP
33975: POP
// result := s_arr [ 1 ] ;
33976: LD_ADDR_VAR 0 4
33980: PUSH
33981: LD_VAR 0 7
33985: PUSH
33986: LD_INT 1
33988: ARRAY
33989: ST_TO_ADDR
// end ; end ;
33990: LD_VAR 0 4
33994: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
33995: LD_INT 0
33997: PPUSH
33998: PPUSH
// if not list then
33999: LD_VAR 0 1
34003: NOT
34004: IFFALSE 34008
// exit ;
34006: GO 34099
// i := list [ pos1 ] ;
34008: LD_ADDR_VAR 0 5
34012: PUSH
34013: LD_VAR 0 1
34017: PUSH
34018: LD_VAR 0 2
34022: ARRAY
34023: ST_TO_ADDR
// if not i then
34024: LD_VAR 0 5
34028: NOT
34029: IFFALSE 34033
// exit ;
34031: GO 34099
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
34033: LD_ADDR_VAR 0 1
34037: PUSH
34038: LD_VAR 0 1
34042: PPUSH
34043: LD_VAR 0 2
34047: PPUSH
34048: LD_VAR 0 1
34052: PUSH
34053: LD_VAR 0 3
34057: ARRAY
34058: PPUSH
34059: CALL_OW 1
34063: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
34064: LD_ADDR_VAR 0 1
34068: PUSH
34069: LD_VAR 0 1
34073: PPUSH
34074: LD_VAR 0 3
34078: PPUSH
34079: LD_VAR 0 5
34083: PPUSH
34084: CALL_OW 1
34088: ST_TO_ADDR
// result := list ;
34089: LD_ADDR_VAR 0 4
34093: PUSH
34094: LD_VAR 0 1
34098: ST_TO_ADDR
// end ;
34099: LD_VAR 0 4
34103: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
34104: LD_INT 0
34106: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
34107: LD_ADDR_VAR 0 5
34111: PUSH
34112: LD_VAR 0 1
34116: PPUSH
34117: CALL_OW 250
34121: PPUSH
34122: LD_VAR 0 1
34126: PPUSH
34127: CALL_OW 251
34131: PPUSH
34132: LD_VAR 0 2
34136: PPUSH
34137: LD_VAR 0 3
34141: PPUSH
34142: LD_VAR 0 4
34146: PPUSH
34147: CALL 34157 0 5
34151: ST_TO_ADDR
// end ;
34152: LD_VAR 0 5
34156: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
34157: LD_INT 0
34159: PPUSH
34160: PPUSH
34161: PPUSH
34162: PPUSH
// if not list then
34163: LD_VAR 0 3
34167: NOT
34168: IFFALSE 34172
// exit ;
34170: GO 34560
// result := [ ] ;
34172: LD_ADDR_VAR 0 6
34176: PUSH
34177: EMPTY
34178: ST_TO_ADDR
// for i in list do
34179: LD_ADDR_VAR 0 7
34183: PUSH
34184: LD_VAR 0 3
34188: PUSH
34189: FOR_IN
34190: IFFALSE 34392
// begin tmp := GetDistUnitXY ( i , x , y ) ;
34192: LD_ADDR_VAR 0 9
34196: PUSH
34197: LD_VAR 0 7
34201: PPUSH
34202: LD_VAR 0 1
34206: PPUSH
34207: LD_VAR 0 2
34211: PPUSH
34212: CALL_OW 297
34216: ST_TO_ADDR
// if not result then
34217: LD_VAR 0 6
34221: NOT
34222: IFFALSE 34248
// result := [ [ i , tmp ] ] else
34224: LD_ADDR_VAR 0 6
34228: PUSH
34229: LD_VAR 0 7
34233: PUSH
34234: LD_VAR 0 9
34238: PUSH
34239: EMPTY
34240: LIST
34241: LIST
34242: PUSH
34243: EMPTY
34244: LIST
34245: ST_TO_ADDR
34246: GO 34390
// begin if result [ result ] [ 2 ] < tmp then
34248: LD_VAR 0 6
34252: PUSH
34253: LD_VAR 0 6
34257: ARRAY
34258: PUSH
34259: LD_INT 2
34261: ARRAY
34262: PUSH
34263: LD_VAR 0 9
34267: LESS
34268: IFFALSE 34310
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
34270: LD_ADDR_VAR 0 6
34274: PUSH
34275: LD_VAR 0 6
34279: PPUSH
34280: LD_VAR 0 6
34284: PUSH
34285: LD_INT 1
34287: PLUS
34288: PPUSH
34289: LD_VAR 0 7
34293: PUSH
34294: LD_VAR 0 9
34298: PUSH
34299: EMPTY
34300: LIST
34301: LIST
34302: PPUSH
34303: CALL_OW 2
34307: ST_TO_ADDR
34308: GO 34390
// for j = 1 to result do
34310: LD_ADDR_VAR 0 8
34314: PUSH
34315: DOUBLE
34316: LD_INT 1
34318: DEC
34319: ST_TO_ADDR
34320: LD_VAR 0 6
34324: PUSH
34325: FOR_TO
34326: IFFALSE 34388
// begin if tmp < result [ j ] [ 2 ] then
34328: LD_VAR 0 9
34332: PUSH
34333: LD_VAR 0 6
34337: PUSH
34338: LD_VAR 0 8
34342: ARRAY
34343: PUSH
34344: LD_INT 2
34346: ARRAY
34347: LESS
34348: IFFALSE 34386
// begin result := Insert ( result , j , [ i , tmp ] ) ;
34350: LD_ADDR_VAR 0 6
34354: PUSH
34355: LD_VAR 0 6
34359: PPUSH
34360: LD_VAR 0 8
34364: PPUSH
34365: LD_VAR 0 7
34369: PUSH
34370: LD_VAR 0 9
34374: PUSH
34375: EMPTY
34376: LIST
34377: LIST
34378: PPUSH
34379: CALL_OW 2
34383: ST_TO_ADDR
// break ;
34384: GO 34388
// end ; end ;
34386: GO 34325
34388: POP
34389: POP
// end ; end ;
34390: GO 34189
34392: POP
34393: POP
// if result and not asc then
34394: LD_VAR 0 6
34398: PUSH
34399: LD_VAR 0 4
34403: NOT
34404: AND
34405: IFFALSE 34480
// begin tmp := result ;
34407: LD_ADDR_VAR 0 9
34411: PUSH
34412: LD_VAR 0 6
34416: ST_TO_ADDR
// for i = tmp downto 1 do
34417: LD_ADDR_VAR 0 7
34421: PUSH
34422: DOUBLE
34423: LD_VAR 0 9
34427: INC
34428: ST_TO_ADDR
34429: LD_INT 1
34431: PUSH
34432: FOR_DOWNTO
34433: IFFALSE 34478
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
34435: LD_ADDR_VAR 0 6
34439: PUSH
34440: LD_VAR 0 6
34444: PPUSH
34445: LD_VAR 0 9
34449: PUSH
34450: LD_VAR 0 7
34454: MINUS
34455: PUSH
34456: LD_INT 1
34458: PLUS
34459: PPUSH
34460: LD_VAR 0 9
34464: PUSH
34465: LD_VAR 0 7
34469: ARRAY
34470: PPUSH
34471: CALL_OW 1
34475: ST_TO_ADDR
34476: GO 34432
34478: POP
34479: POP
// end ; tmp := [ ] ;
34480: LD_ADDR_VAR 0 9
34484: PUSH
34485: EMPTY
34486: ST_TO_ADDR
// if mode then
34487: LD_VAR 0 5
34491: IFFALSE 34560
// begin for i = 1 to result do
34493: LD_ADDR_VAR 0 7
34497: PUSH
34498: DOUBLE
34499: LD_INT 1
34501: DEC
34502: ST_TO_ADDR
34503: LD_VAR 0 6
34507: PUSH
34508: FOR_TO
34509: IFFALSE 34548
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
34511: LD_ADDR_VAR 0 9
34515: PUSH
34516: LD_VAR 0 9
34520: PPUSH
34521: LD_VAR 0 7
34525: PPUSH
34526: LD_VAR 0 6
34530: PUSH
34531: LD_VAR 0 7
34535: ARRAY
34536: PUSH
34537: LD_INT 1
34539: ARRAY
34540: PPUSH
34541: CALL_OW 1
34545: ST_TO_ADDR
34546: GO 34508
34548: POP
34549: POP
// result := tmp ;
34550: LD_ADDR_VAR 0 6
34554: PUSH
34555: LD_VAR 0 9
34559: ST_TO_ADDR
// end ; end ;
34560: LD_VAR 0 6
34564: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
34565: LD_INT 0
34567: PPUSH
34568: PPUSH
34569: PPUSH
34570: PPUSH
34571: PPUSH
34572: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
34573: LD_ADDR_VAR 0 5
34577: PUSH
34578: LD_INT 0
34580: PUSH
34581: LD_INT 0
34583: PUSH
34584: LD_INT 0
34586: PUSH
34587: EMPTY
34588: PUSH
34589: EMPTY
34590: LIST
34591: LIST
34592: LIST
34593: LIST
34594: ST_TO_ADDR
// if not x or not y then
34595: LD_VAR 0 2
34599: NOT
34600: PUSH
34601: LD_VAR 0 3
34605: NOT
34606: OR
34607: IFFALSE 34611
// exit ;
34609: GO 36261
// if not range then
34611: LD_VAR 0 4
34615: NOT
34616: IFFALSE 34626
// range := 10 ;
34618: LD_ADDR_VAR 0 4
34622: PUSH
34623: LD_INT 10
34625: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34626: LD_ADDR_VAR 0 8
34630: PUSH
34631: LD_INT 81
34633: PUSH
34634: LD_VAR 0 1
34638: PUSH
34639: EMPTY
34640: LIST
34641: LIST
34642: PUSH
34643: LD_INT 92
34645: PUSH
34646: LD_VAR 0 2
34650: PUSH
34651: LD_VAR 0 3
34655: PUSH
34656: LD_VAR 0 4
34660: PUSH
34661: EMPTY
34662: LIST
34663: LIST
34664: LIST
34665: LIST
34666: PUSH
34667: LD_INT 3
34669: PUSH
34670: LD_INT 21
34672: PUSH
34673: LD_INT 3
34675: PUSH
34676: EMPTY
34677: LIST
34678: LIST
34679: PUSH
34680: EMPTY
34681: LIST
34682: LIST
34683: PUSH
34684: EMPTY
34685: LIST
34686: LIST
34687: LIST
34688: PPUSH
34689: CALL_OW 69
34693: ST_TO_ADDR
// if not tmp then
34694: LD_VAR 0 8
34698: NOT
34699: IFFALSE 34703
// exit ;
34701: GO 36261
// for i in tmp do
34703: LD_ADDR_VAR 0 6
34707: PUSH
34708: LD_VAR 0 8
34712: PUSH
34713: FOR_IN
34714: IFFALSE 36236
// begin points := [ 0 , 0 , 0 ] ;
34716: LD_ADDR_VAR 0 9
34720: PUSH
34721: LD_INT 0
34723: PUSH
34724: LD_INT 0
34726: PUSH
34727: LD_INT 0
34729: PUSH
34730: EMPTY
34731: LIST
34732: LIST
34733: LIST
34734: ST_TO_ADDR
// bpoints := 1 ;
34735: LD_ADDR_VAR 0 10
34739: PUSH
34740: LD_INT 1
34742: ST_TO_ADDR
// case GetType ( i ) of unit_human :
34743: LD_VAR 0 6
34747: PPUSH
34748: CALL_OW 247
34752: PUSH
34753: LD_INT 1
34755: DOUBLE
34756: EQUAL
34757: IFTRUE 34761
34759: GO 35339
34761: POP
// begin if GetClass ( i ) = 1 then
34762: LD_VAR 0 6
34766: PPUSH
34767: CALL_OW 257
34771: PUSH
34772: LD_INT 1
34774: EQUAL
34775: IFFALSE 34796
// points := [ 10 , 5 , 3 ] ;
34777: LD_ADDR_VAR 0 9
34781: PUSH
34782: LD_INT 10
34784: PUSH
34785: LD_INT 5
34787: PUSH
34788: LD_INT 3
34790: PUSH
34791: EMPTY
34792: LIST
34793: LIST
34794: LIST
34795: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
34796: LD_VAR 0 6
34800: PPUSH
34801: CALL_OW 257
34805: PUSH
34806: LD_INT 2
34808: PUSH
34809: LD_INT 3
34811: PUSH
34812: LD_INT 4
34814: PUSH
34815: EMPTY
34816: LIST
34817: LIST
34818: LIST
34819: IN
34820: IFFALSE 34841
// points := [ 3 , 2 , 1 ] ;
34822: LD_ADDR_VAR 0 9
34826: PUSH
34827: LD_INT 3
34829: PUSH
34830: LD_INT 2
34832: PUSH
34833: LD_INT 1
34835: PUSH
34836: EMPTY
34837: LIST
34838: LIST
34839: LIST
34840: ST_TO_ADDR
// if GetClass ( i ) = 5 then
34841: LD_VAR 0 6
34845: PPUSH
34846: CALL_OW 257
34850: PUSH
34851: LD_INT 5
34853: EQUAL
34854: IFFALSE 34875
// points := [ 130 , 5 , 2 ] ;
34856: LD_ADDR_VAR 0 9
34860: PUSH
34861: LD_INT 130
34863: PUSH
34864: LD_INT 5
34866: PUSH
34867: LD_INT 2
34869: PUSH
34870: EMPTY
34871: LIST
34872: LIST
34873: LIST
34874: ST_TO_ADDR
// if GetClass ( i ) = 8 then
34875: LD_VAR 0 6
34879: PPUSH
34880: CALL_OW 257
34884: PUSH
34885: LD_INT 8
34887: EQUAL
34888: IFFALSE 34909
// points := [ 35 , 35 , 30 ] ;
34890: LD_ADDR_VAR 0 9
34894: PUSH
34895: LD_INT 35
34897: PUSH
34898: LD_INT 35
34900: PUSH
34901: LD_INT 30
34903: PUSH
34904: EMPTY
34905: LIST
34906: LIST
34907: LIST
34908: ST_TO_ADDR
// if GetClass ( i ) = 9 then
34909: LD_VAR 0 6
34913: PPUSH
34914: CALL_OW 257
34918: PUSH
34919: LD_INT 9
34921: EQUAL
34922: IFFALSE 34943
// points := [ 20 , 55 , 40 ] ;
34924: LD_ADDR_VAR 0 9
34928: PUSH
34929: LD_INT 20
34931: PUSH
34932: LD_INT 55
34934: PUSH
34935: LD_INT 40
34937: PUSH
34938: EMPTY
34939: LIST
34940: LIST
34941: LIST
34942: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
34943: LD_VAR 0 6
34947: PPUSH
34948: CALL_OW 257
34952: PUSH
34953: LD_INT 12
34955: PUSH
34956: LD_INT 16
34958: PUSH
34959: EMPTY
34960: LIST
34961: LIST
34962: IN
34963: IFFALSE 34984
// points := [ 5 , 3 , 2 ] ;
34965: LD_ADDR_VAR 0 9
34969: PUSH
34970: LD_INT 5
34972: PUSH
34973: LD_INT 3
34975: PUSH
34976: LD_INT 2
34978: PUSH
34979: EMPTY
34980: LIST
34981: LIST
34982: LIST
34983: ST_TO_ADDR
// if GetClass ( i ) = 17 then
34984: LD_VAR 0 6
34988: PPUSH
34989: CALL_OW 257
34993: PUSH
34994: LD_INT 17
34996: EQUAL
34997: IFFALSE 35018
// points := [ 100 , 50 , 75 ] ;
34999: LD_ADDR_VAR 0 9
35003: PUSH
35004: LD_INT 100
35006: PUSH
35007: LD_INT 50
35009: PUSH
35010: LD_INT 75
35012: PUSH
35013: EMPTY
35014: LIST
35015: LIST
35016: LIST
35017: ST_TO_ADDR
// if GetClass ( i ) = 15 then
35018: LD_VAR 0 6
35022: PPUSH
35023: CALL_OW 257
35027: PUSH
35028: LD_INT 15
35030: EQUAL
35031: IFFALSE 35052
// points := [ 10 , 5 , 3 ] ;
35033: LD_ADDR_VAR 0 9
35037: PUSH
35038: LD_INT 10
35040: PUSH
35041: LD_INT 5
35043: PUSH
35044: LD_INT 3
35046: PUSH
35047: EMPTY
35048: LIST
35049: LIST
35050: LIST
35051: ST_TO_ADDR
// if GetClass ( i ) = 14 then
35052: LD_VAR 0 6
35056: PPUSH
35057: CALL_OW 257
35061: PUSH
35062: LD_INT 14
35064: EQUAL
35065: IFFALSE 35086
// points := [ 10 , 0 , 0 ] ;
35067: LD_ADDR_VAR 0 9
35071: PUSH
35072: LD_INT 10
35074: PUSH
35075: LD_INT 0
35077: PUSH
35078: LD_INT 0
35080: PUSH
35081: EMPTY
35082: LIST
35083: LIST
35084: LIST
35085: ST_TO_ADDR
// if GetClass ( i ) = 11 then
35086: LD_VAR 0 6
35090: PPUSH
35091: CALL_OW 257
35095: PUSH
35096: LD_INT 11
35098: EQUAL
35099: IFFALSE 35120
// points := [ 30 , 10 , 5 ] ;
35101: LD_ADDR_VAR 0 9
35105: PUSH
35106: LD_INT 30
35108: PUSH
35109: LD_INT 10
35111: PUSH
35112: LD_INT 5
35114: PUSH
35115: EMPTY
35116: LIST
35117: LIST
35118: LIST
35119: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
35120: LD_VAR 0 1
35124: PPUSH
35125: LD_INT 5
35127: PPUSH
35128: CALL_OW 321
35132: PUSH
35133: LD_INT 2
35135: EQUAL
35136: IFFALSE 35153
// bpoints := bpoints * 1.8 ;
35138: LD_ADDR_VAR 0 10
35142: PUSH
35143: LD_VAR 0 10
35147: PUSH
35148: LD_REAL  1.80000000000000E+0000
35151: MUL
35152: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
35153: LD_VAR 0 6
35157: PPUSH
35158: CALL_OW 257
35162: PUSH
35163: LD_INT 1
35165: PUSH
35166: LD_INT 2
35168: PUSH
35169: LD_INT 3
35171: PUSH
35172: LD_INT 4
35174: PUSH
35175: EMPTY
35176: LIST
35177: LIST
35178: LIST
35179: LIST
35180: IN
35181: PUSH
35182: LD_VAR 0 1
35186: PPUSH
35187: LD_INT 51
35189: PPUSH
35190: CALL_OW 321
35194: PUSH
35195: LD_INT 2
35197: EQUAL
35198: AND
35199: IFFALSE 35216
// bpoints := bpoints * 1.2 ;
35201: LD_ADDR_VAR 0 10
35205: PUSH
35206: LD_VAR 0 10
35210: PUSH
35211: LD_REAL  1.20000000000000E+0000
35214: MUL
35215: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
35216: LD_VAR 0 6
35220: PPUSH
35221: CALL_OW 257
35225: PUSH
35226: LD_INT 5
35228: PUSH
35229: LD_INT 7
35231: PUSH
35232: LD_INT 9
35234: PUSH
35235: EMPTY
35236: LIST
35237: LIST
35238: LIST
35239: IN
35240: PUSH
35241: LD_VAR 0 1
35245: PPUSH
35246: LD_INT 52
35248: PPUSH
35249: CALL_OW 321
35253: PUSH
35254: LD_INT 2
35256: EQUAL
35257: AND
35258: IFFALSE 35275
// bpoints := bpoints * 1.5 ;
35260: LD_ADDR_VAR 0 10
35264: PUSH
35265: LD_VAR 0 10
35269: PUSH
35270: LD_REAL  1.50000000000000E+0000
35273: MUL
35274: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
35275: LD_VAR 0 1
35279: PPUSH
35280: LD_INT 66
35282: PPUSH
35283: CALL_OW 321
35287: PUSH
35288: LD_INT 2
35290: EQUAL
35291: IFFALSE 35308
// bpoints := bpoints * 1.1 ;
35293: LD_ADDR_VAR 0 10
35297: PUSH
35298: LD_VAR 0 10
35302: PUSH
35303: LD_REAL  1.10000000000000E+0000
35306: MUL
35307: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
35308: LD_ADDR_VAR 0 10
35312: PUSH
35313: LD_VAR 0 10
35317: PUSH
35318: LD_VAR 0 6
35322: PPUSH
35323: LD_INT 1
35325: PPUSH
35326: CALL_OW 259
35330: PUSH
35331: LD_REAL  1.15000000000000E+0000
35334: MUL
35335: MUL
35336: ST_TO_ADDR
// end ; unit_vehicle :
35337: GO 36165
35339: LD_INT 2
35341: DOUBLE
35342: EQUAL
35343: IFTRUE 35347
35345: GO 36153
35347: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
35348: LD_VAR 0 6
35352: PPUSH
35353: CALL_OW 264
35357: PUSH
35358: LD_INT 2
35360: PUSH
35361: LD_INT 42
35363: PUSH
35364: LD_INT 24
35366: PUSH
35367: EMPTY
35368: LIST
35369: LIST
35370: LIST
35371: IN
35372: IFFALSE 35393
// points := [ 25 , 5 , 3 ] ;
35374: LD_ADDR_VAR 0 9
35378: PUSH
35379: LD_INT 25
35381: PUSH
35382: LD_INT 5
35384: PUSH
35385: LD_INT 3
35387: PUSH
35388: EMPTY
35389: LIST
35390: LIST
35391: LIST
35392: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
35393: LD_VAR 0 6
35397: PPUSH
35398: CALL_OW 264
35402: PUSH
35403: LD_INT 4
35405: PUSH
35406: LD_INT 43
35408: PUSH
35409: LD_INT 25
35411: PUSH
35412: EMPTY
35413: LIST
35414: LIST
35415: LIST
35416: IN
35417: IFFALSE 35438
// points := [ 40 , 15 , 5 ] ;
35419: LD_ADDR_VAR 0 9
35423: PUSH
35424: LD_INT 40
35426: PUSH
35427: LD_INT 15
35429: PUSH
35430: LD_INT 5
35432: PUSH
35433: EMPTY
35434: LIST
35435: LIST
35436: LIST
35437: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
35438: LD_VAR 0 6
35442: PPUSH
35443: CALL_OW 264
35447: PUSH
35448: LD_INT 3
35450: PUSH
35451: LD_INT 23
35453: PUSH
35454: EMPTY
35455: LIST
35456: LIST
35457: IN
35458: IFFALSE 35479
// points := [ 7 , 25 , 8 ] ;
35460: LD_ADDR_VAR 0 9
35464: PUSH
35465: LD_INT 7
35467: PUSH
35468: LD_INT 25
35470: PUSH
35471: LD_INT 8
35473: PUSH
35474: EMPTY
35475: LIST
35476: LIST
35477: LIST
35478: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
35479: LD_VAR 0 6
35483: PPUSH
35484: CALL_OW 264
35488: PUSH
35489: LD_INT 5
35491: PUSH
35492: LD_INT 27
35494: PUSH
35495: LD_INT 44
35497: PUSH
35498: EMPTY
35499: LIST
35500: LIST
35501: LIST
35502: IN
35503: IFFALSE 35524
// points := [ 14 , 50 , 16 ] ;
35505: LD_ADDR_VAR 0 9
35509: PUSH
35510: LD_INT 14
35512: PUSH
35513: LD_INT 50
35515: PUSH
35516: LD_INT 16
35518: PUSH
35519: EMPTY
35520: LIST
35521: LIST
35522: LIST
35523: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
35524: LD_VAR 0 6
35528: PPUSH
35529: CALL_OW 264
35533: PUSH
35534: LD_INT 6
35536: PUSH
35537: LD_INT 46
35539: PUSH
35540: EMPTY
35541: LIST
35542: LIST
35543: IN
35544: IFFALSE 35565
// points := [ 32 , 120 , 70 ] ;
35546: LD_ADDR_VAR 0 9
35550: PUSH
35551: LD_INT 32
35553: PUSH
35554: LD_INT 120
35556: PUSH
35557: LD_INT 70
35559: PUSH
35560: EMPTY
35561: LIST
35562: LIST
35563: LIST
35564: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
35565: LD_VAR 0 6
35569: PPUSH
35570: CALL_OW 264
35574: PUSH
35575: LD_INT 7
35577: PUSH
35578: LD_INT 28
35580: PUSH
35581: LD_INT 45
35583: PUSH
35584: LD_INT 92
35586: PUSH
35587: EMPTY
35588: LIST
35589: LIST
35590: LIST
35591: LIST
35592: IN
35593: IFFALSE 35614
// points := [ 35 , 20 , 45 ] ;
35595: LD_ADDR_VAR 0 9
35599: PUSH
35600: LD_INT 35
35602: PUSH
35603: LD_INT 20
35605: PUSH
35606: LD_INT 45
35608: PUSH
35609: EMPTY
35610: LIST
35611: LIST
35612: LIST
35613: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
35614: LD_VAR 0 6
35618: PPUSH
35619: CALL_OW 264
35623: PUSH
35624: LD_INT 47
35626: PUSH
35627: EMPTY
35628: LIST
35629: IN
35630: IFFALSE 35651
// points := [ 67 , 45 , 75 ] ;
35632: LD_ADDR_VAR 0 9
35636: PUSH
35637: LD_INT 67
35639: PUSH
35640: LD_INT 45
35642: PUSH
35643: LD_INT 75
35645: PUSH
35646: EMPTY
35647: LIST
35648: LIST
35649: LIST
35650: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
35651: LD_VAR 0 6
35655: PPUSH
35656: CALL_OW 264
35660: PUSH
35661: LD_INT 26
35663: PUSH
35664: EMPTY
35665: LIST
35666: IN
35667: IFFALSE 35688
// points := [ 120 , 30 , 80 ] ;
35669: LD_ADDR_VAR 0 9
35673: PUSH
35674: LD_INT 120
35676: PUSH
35677: LD_INT 30
35679: PUSH
35680: LD_INT 80
35682: PUSH
35683: EMPTY
35684: LIST
35685: LIST
35686: LIST
35687: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
35688: LD_VAR 0 6
35692: PPUSH
35693: CALL_OW 264
35697: PUSH
35698: LD_INT 22
35700: PUSH
35701: EMPTY
35702: LIST
35703: IN
35704: IFFALSE 35725
// points := [ 40 , 1 , 1 ] ;
35706: LD_ADDR_VAR 0 9
35710: PUSH
35711: LD_INT 40
35713: PUSH
35714: LD_INT 1
35716: PUSH
35717: LD_INT 1
35719: PUSH
35720: EMPTY
35721: LIST
35722: LIST
35723: LIST
35724: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
35725: LD_VAR 0 6
35729: PPUSH
35730: CALL_OW 264
35734: PUSH
35735: LD_INT 29
35737: PUSH
35738: EMPTY
35739: LIST
35740: IN
35741: IFFALSE 35762
// points := [ 70 , 200 , 400 ] ;
35743: LD_ADDR_VAR 0 9
35747: PUSH
35748: LD_INT 70
35750: PUSH
35751: LD_INT 200
35753: PUSH
35754: LD_INT 400
35756: PUSH
35757: EMPTY
35758: LIST
35759: LIST
35760: LIST
35761: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
35762: LD_VAR 0 6
35766: PPUSH
35767: CALL_OW 264
35771: PUSH
35772: LD_INT 14
35774: PUSH
35775: LD_INT 53
35777: PUSH
35778: EMPTY
35779: LIST
35780: LIST
35781: IN
35782: IFFALSE 35803
// points := [ 40 , 10 , 20 ] ;
35784: LD_ADDR_VAR 0 9
35788: PUSH
35789: LD_INT 40
35791: PUSH
35792: LD_INT 10
35794: PUSH
35795: LD_INT 20
35797: PUSH
35798: EMPTY
35799: LIST
35800: LIST
35801: LIST
35802: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
35803: LD_VAR 0 6
35807: PPUSH
35808: CALL_OW 264
35812: PUSH
35813: LD_INT 9
35815: PUSH
35816: EMPTY
35817: LIST
35818: IN
35819: IFFALSE 35840
// points := [ 5 , 70 , 20 ] ;
35821: LD_ADDR_VAR 0 9
35825: PUSH
35826: LD_INT 5
35828: PUSH
35829: LD_INT 70
35831: PUSH
35832: LD_INT 20
35834: PUSH
35835: EMPTY
35836: LIST
35837: LIST
35838: LIST
35839: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
35840: LD_VAR 0 6
35844: PPUSH
35845: CALL_OW 264
35849: PUSH
35850: LD_INT 10
35852: PUSH
35853: EMPTY
35854: LIST
35855: IN
35856: IFFALSE 35877
// points := [ 35 , 110 , 70 ] ;
35858: LD_ADDR_VAR 0 9
35862: PUSH
35863: LD_INT 35
35865: PUSH
35866: LD_INT 110
35868: PUSH
35869: LD_INT 70
35871: PUSH
35872: EMPTY
35873: LIST
35874: LIST
35875: LIST
35876: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
35877: LD_VAR 0 6
35881: PPUSH
35882: CALL_OW 265
35886: PUSH
35887: LD_INT 25
35889: EQUAL
35890: IFFALSE 35911
// points := [ 80 , 65 , 100 ] ;
35892: LD_ADDR_VAR 0 9
35896: PUSH
35897: LD_INT 80
35899: PUSH
35900: LD_INT 65
35902: PUSH
35903: LD_INT 100
35905: PUSH
35906: EMPTY
35907: LIST
35908: LIST
35909: LIST
35910: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
35911: LD_VAR 0 6
35915: PPUSH
35916: CALL_OW 263
35920: PUSH
35921: LD_INT 1
35923: EQUAL
35924: IFFALSE 35959
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
35926: LD_ADDR_VAR 0 10
35930: PUSH
35931: LD_VAR 0 10
35935: PUSH
35936: LD_VAR 0 6
35940: PPUSH
35941: CALL_OW 311
35945: PPUSH
35946: LD_INT 3
35948: PPUSH
35949: CALL_OW 259
35953: PUSH
35954: LD_INT 4
35956: MUL
35957: MUL
35958: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
35959: LD_VAR 0 6
35963: PPUSH
35964: CALL_OW 263
35968: PUSH
35969: LD_INT 2
35971: EQUAL
35972: IFFALSE 36023
// begin j := IsControledBy ( i ) ;
35974: LD_ADDR_VAR 0 7
35978: PUSH
35979: LD_VAR 0 6
35983: PPUSH
35984: CALL_OW 312
35988: ST_TO_ADDR
// if j then
35989: LD_VAR 0 7
35993: IFFALSE 36023
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
35995: LD_ADDR_VAR 0 10
35999: PUSH
36000: LD_VAR 0 10
36004: PUSH
36005: LD_VAR 0 7
36009: PPUSH
36010: LD_INT 3
36012: PPUSH
36013: CALL_OW 259
36017: PUSH
36018: LD_INT 3
36020: MUL
36021: MUL
36022: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
36023: LD_VAR 0 6
36027: PPUSH
36028: CALL_OW 264
36032: PUSH
36033: LD_INT 5
36035: PUSH
36036: LD_INT 6
36038: PUSH
36039: LD_INT 46
36041: PUSH
36042: LD_INT 44
36044: PUSH
36045: LD_INT 47
36047: PUSH
36048: LD_INT 45
36050: PUSH
36051: LD_INT 28
36053: PUSH
36054: LD_INT 7
36056: PUSH
36057: LD_INT 27
36059: PUSH
36060: LD_INT 29
36062: PUSH
36063: EMPTY
36064: LIST
36065: LIST
36066: LIST
36067: LIST
36068: LIST
36069: LIST
36070: LIST
36071: LIST
36072: LIST
36073: LIST
36074: IN
36075: PUSH
36076: LD_VAR 0 1
36080: PPUSH
36081: LD_INT 52
36083: PPUSH
36084: CALL_OW 321
36088: PUSH
36089: LD_INT 2
36091: EQUAL
36092: AND
36093: IFFALSE 36110
// bpoints := bpoints * 1.2 ;
36095: LD_ADDR_VAR 0 10
36099: PUSH
36100: LD_VAR 0 10
36104: PUSH
36105: LD_REAL  1.20000000000000E+0000
36108: MUL
36109: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
36110: LD_VAR 0 6
36114: PPUSH
36115: CALL_OW 264
36119: PUSH
36120: LD_INT 6
36122: PUSH
36123: LD_INT 46
36125: PUSH
36126: LD_INT 47
36128: PUSH
36129: EMPTY
36130: LIST
36131: LIST
36132: LIST
36133: IN
36134: IFFALSE 36151
// bpoints := bpoints * 1.2 ;
36136: LD_ADDR_VAR 0 10
36140: PUSH
36141: LD_VAR 0 10
36145: PUSH
36146: LD_REAL  1.20000000000000E+0000
36149: MUL
36150: ST_TO_ADDR
// end ; unit_building :
36151: GO 36165
36153: LD_INT 3
36155: DOUBLE
36156: EQUAL
36157: IFTRUE 36161
36159: GO 36164
36161: POP
// ; end ;
36162: GO 36165
36164: POP
// for j = 1 to 3 do
36165: LD_ADDR_VAR 0 7
36169: PUSH
36170: DOUBLE
36171: LD_INT 1
36173: DEC
36174: ST_TO_ADDR
36175: LD_INT 3
36177: PUSH
36178: FOR_TO
36179: IFFALSE 36232
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
36181: LD_ADDR_VAR 0 5
36185: PUSH
36186: LD_VAR 0 5
36190: PPUSH
36191: LD_VAR 0 7
36195: PPUSH
36196: LD_VAR 0 5
36200: PUSH
36201: LD_VAR 0 7
36205: ARRAY
36206: PUSH
36207: LD_VAR 0 9
36211: PUSH
36212: LD_VAR 0 7
36216: ARRAY
36217: PUSH
36218: LD_VAR 0 10
36222: MUL
36223: PLUS
36224: PPUSH
36225: CALL_OW 1
36229: ST_TO_ADDR
36230: GO 36178
36232: POP
36233: POP
// end ;
36234: GO 34713
36236: POP
36237: POP
// result := Replace ( result , 4 , tmp ) ;
36238: LD_ADDR_VAR 0 5
36242: PUSH
36243: LD_VAR 0 5
36247: PPUSH
36248: LD_INT 4
36250: PPUSH
36251: LD_VAR 0 8
36255: PPUSH
36256: CALL_OW 1
36260: ST_TO_ADDR
// end ;
36261: LD_VAR 0 5
36265: RET
// export function DangerAtRange ( unit , range ) ; begin
36266: LD_INT 0
36268: PPUSH
// if not unit then
36269: LD_VAR 0 1
36273: NOT
36274: IFFALSE 36278
// exit ;
36276: GO 36323
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
36278: LD_ADDR_VAR 0 3
36282: PUSH
36283: LD_VAR 0 1
36287: PPUSH
36288: CALL_OW 255
36292: PPUSH
36293: LD_VAR 0 1
36297: PPUSH
36298: CALL_OW 250
36302: PPUSH
36303: LD_VAR 0 1
36307: PPUSH
36308: CALL_OW 251
36312: PPUSH
36313: LD_VAR 0 2
36317: PPUSH
36318: CALL 34565 0 4
36322: ST_TO_ADDR
// end ;
36323: LD_VAR 0 3
36327: RET
// export function DangerInArea ( side , area ) ; begin
36328: LD_INT 0
36330: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
36331: LD_ADDR_VAR 0 3
36335: PUSH
36336: LD_VAR 0 2
36340: PPUSH
36341: LD_INT 81
36343: PUSH
36344: LD_VAR 0 1
36348: PUSH
36349: EMPTY
36350: LIST
36351: LIST
36352: PPUSH
36353: CALL_OW 70
36357: ST_TO_ADDR
// end ;
36358: LD_VAR 0 3
36362: RET
// export function IsExtension ( b ) ; begin
36363: LD_INT 0
36365: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
36366: LD_ADDR_VAR 0 2
36370: PUSH
36371: LD_VAR 0 1
36375: PUSH
36376: LD_INT 23
36378: PUSH
36379: LD_INT 20
36381: PUSH
36382: LD_INT 22
36384: PUSH
36385: LD_INT 17
36387: PUSH
36388: LD_INT 24
36390: PUSH
36391: LD_INT 21
36393: PUSH
36394: LD_INT 19
36396: PUSH
36397: LD_INT 16
36399: PUSH
36400: LD_INT 25
36402: PUSH
36403: LD_INT 18
36405: PUSH
36406: EMPTY
36407: LIST
36408: LIST
36409: LIST
36410: LIST
36411: LIST
36412: LIST
36413: LIST
36414: LIST
36415: LIST
36416: LIST
36417: IN
36418: ST_TO_ADDR
// end ;
36419: LD_VAR 0 2
36423: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
36424: LD_INT 0
36426: PPUSH
36427: PPUSH
36428: PPUSH
// result := [ ] ;
36429: LD_ADDR_VAR 0 4
36433: PUSH
36434: EMPTY
36435: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
36436: LD_ADDR_VAR 0 5
36440: PUSH
36441: LD_VAR 0 2
36445: PPUSH
36446: LD_INT 21
36448: PUSH
36449: LD_INT 3
36451: PUSH
36452: EMPTY
36453: LIST
36454: LIST
36455: PPUSH
36456: CALL_OW 70
36460: ST_TO_ADDR
// if not tmp then
36461: LD_VAR 0 5
36465: NOT
36466: IFFALSE 36470
// exit ;
36468: GO 36534
// if checkLink then
36470: LD_VAR 0 3
36474: IFFALSE 36524
// begin for i in tmp do
36476: LD_ADDR_VAR 0 6
36480: PUSH
36481: LD_VAR 0 5
36485: PUSH
36486: FOR_IN
36487: IFFALSE 36522
// if GetBase ( i ) <> base then
36489: LD_VAR 0 6
36493: PPUSH
36494: CALL_OW 274
36498: PUSH
36499: LD_VAR 0 1
36503: NONEQUAL
36504: IFFALSE 36520
// ComLinkToBase ( base , i ) ;
36506: LD_VAR 0 1
36510: PPUSH
36511: LD_VAR 0 6
36515: PPUSH
36516: CALL_OW 169
36520: GO 36486
36522: POP
36523: POP
// end ; result := tmp ;
36524: LD_ADDR_VAR 0 4
36528: PUSH
36529: LD_VAR 0 5
36533: ST_TO_ADDR
// end ;
36534: LD_VAR 0 4
36538: RET
// export function ComComplete ( units , b ) ; var i ; begin
36539: LD_INT 0
36541: PPUSH
36542: PPUSH
// if not units then
36543: LD_VAR 0 1
36547: NOT
36548: IFFALSE 36552
// exit ;
36550: GO 36642
// for i in units do
36552: LD_ADDR_VAR 0 4
36556: PUSH
36557: LD_VAR 0 1
36561: PUSH
36562: FOR_IN
36563: IFFALSE 36640
// if BuildingStatus ( b ) = bs_build then
36565: LD_VAR 0 2
36569: PPUSH
36570: CALL_OW 461
36574: PUSH
36575: LD_INT 1
36577: EQUAL
36578: IFFALSE 36638
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
36580: LD_VAR 0 4
36584: PPUSH
36585: LD_STRING h
36587: PUSH
36588: LD_VAR 0 2
36592: PPUSH
36593: CALL_OW 250
36597: PUSH
36598: LD_VAR 0 2
36602: PPUSH
36603: CALL_OW 251
36607: PUSH
36608: LD_VAR 0 2
36612: PUSH
36613: LD_INT 0
36615: PUSH
36616: LD_INT 0
36618: PUSH
36619: LD_INT 0
36621: PUSH
36622: EMPTY
36623: LIST
36624: LIST
36625: LIST
36626: LIST
36627: LIST
36628: LIST
36629: LIST
36630: PUSH
36631: EMPTY
36632: LIST
36633: PPUSH
36634: CALL_OW 446
36638: GO 36562
36640: POP
36641: POP
// end ;
36642: LD_VAR 0 3
36646: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
36647: LD_INT 0
36649: PPUSH
36650: PPUSH
36651: PPUSH
36652: PPUSH
36653: PPUSH
36654: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
36655: LD_VAR 0 1
36659: NOT
36660: PUSH
36661: LD_VAR 0 1
36665: PPUSH
36666: CALL_OW 263
36670: PUSH
36671: LD_INT 2
36673: NONEQUAL
36674: OR
36675: IFFALSE 36679
// exit ;
36677: GO 36995
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
36679: LD_ADDR_VAR 0 6
36683: PUSH
36684: LD_INT 22
36686: PUSH
36687: LD_VAR 0 1
36691: PPUSH
36692: CALL_OW 255
36696: PUSH
36697: EMPTY
36698: LIST
36699: LIST
36700: PUSH
36701: LD_INT 2
36703: PUSH
36704: LD_INT 30
36706: PUSH
36707: LD_INT 36
36709: PUSH
36710: EMPTY
36711: LIST
36712: LIST
36713: PUSH
36714: LD_INT 34
36716: PUSH
36717: LD_INT 31
36719: PUSH
36720: EMPTY
36721: LIST
36722: LIST
36723: PUSH
36724: EMPTY
36725: LIST
36726: LIST
36727: LIST
36728: PUSH
36729: EMPTY
36730: LIST
36731: LIST
36732: PPUSH
36733: CALL_OW 69
36737: ST_TO_ADDR
// if not tmp then
36738: LD_VAR 0 6
36742: NOT
36743: IFFALSE 36747
// exit ;
36745: GO 36995
// result := [ ] ;
36747: LD_ADDR_VAR 0 2
36751: PUSH
36752: EMPTY
36753: ST_TO_ADDR
// for i in tmp do
36754: LD_ADDR_VAR 0 3
36758: PUSH
36759: LD_VAR 0 6
36763: PUSH
36764: FOR_IN
36765: IFFALSE 36836
// begin t := UnitsInside ( i ) ;
36767: LD_ADDR_VAR 0 4
36771: PUSH
36772: LD_VAR 0 3
36776: PPUSH
36777: CALL_OW 313
36781: ST_TO_ADDR
// if t then
36782: LD_VAR 0 4
36786: IFFALSE 36834
// for j in t do
36788: LD_ADDR_VAR 0 7
36792: PUSH
36793: LD_VAR 0 4
36797: PUSH
36798: FOR_IN
36799: IFFALSE 36832
// result := Replace ( result , result + 1 , j ) ;
36801: LD_ADDR_VAR 0 2
36805: PUSH
36806: LD_VAR 0 2
36810: PPUSH
36811: LD_VAR 0 2
36815: PUSH
36816: LD_INT 1
36818: PLUS
36819: PPUSH
36820: LD_VAR 0 7
36824: PPUSH
36825: CALL_OW 1
36829: ST_TO_ADDR
36830: GO 36798
36832: POP
36833: POP
// end ;
36834: GO 36764
36836: POP
36837: POP
// if not result then
36838: LD_VAR 0 2
36842: NOT
36843: IFFALSE 36847
// exit ;
36845: GO 36995
// mech := result [ 1 ] ;
36847: LD_ADDR_VAR 0 5
36851: PUSH
36852: LD_VAR 0 2
36856: PUSH
36857: LD_INT 1
36859: ARRAY
36860: ST_TO_ADDR
// if result > 1 then
36861: LD_VAR 0 2
36865: PUSH
36866: LD_INT 1
36868: GREATER
36869: IFFALSE 36981
// begin for i = 2 to result do
36871: LD_ADDR_VAR 0 3
36875: PUSH
36876: DOUBLE
36877: LD_INT 2
36879: DEC
36880: ST_TO_ADDR
36881: LD_VAR 0 2
36885: PUSH
36886: FOR_TO
36887: IFFALSE 36979
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
36889: LD_ADDR_VAR 0 4
36893: PUSH
36894: LD_VAR 0 2
36898: PUSH
36899: LD_VAR 0 3
36903: ARRAY
36904: PPUSH
36905: LD_INT 3
36907: PPUSH
36908: CALL_OW 259
36912: PUSH
36913: LD_VAR 0 2
36917: PUSH
36918: LD_VAR 0 3
36922: ARRAY
36923: PPUSH
36924: CALL_OW 432
36928: MINUS
36929: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
36930: LD_VAR 0 4
36934: PUSH
36935: LD_VAR 0 5
36939: PPUSH
36940: LD_INT 3
36942: PPUSH
36943: CALL_OW 259
36947: PUSH
36948: LD_VAR 0 5
36952: PPUSH
36953: CALL_OW 432
36957: MINUS
36958: GREATEREQUAL
36959: IFFALSE 36977
// mech := result [ i ] ;
36961: LD_ADDR_VAR 0 5
36965: PUSH
36966: LD_VAR 0 2
36970: PUSH
36971: LD_VAR 0 3
36975: ARRAY
36976: ST_TO_ADDR
// end ;
36977: GO 36886
36979: POP
36980: POP
// end ; ComLinkTo ( vehicle , mech ) ;
36981: LD_VAR 0 1
36985: PPUSH
36986: LD_VAR 0 5
36990: PPUSH
36991: CALL_OW 135
// end ;
36995: LD_VAR 0 2
36999: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
37000: LD_INT 0
37002: PPUSH
37003: PPUSH
37004: PPUSH
37005: PPUSH
37006: PPUSH
37007: PPUSH
37008: PPUSH
37009: PPUSH
37010: PPUSH
37011: PPUSH
37012: PPUSH
37013: PPUSH
37014: PPUSH
// result := [ ] ;
37015: LD_ADDR_VAR 0 7
37019: PUSH
37020: EMPTY
37021: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
37022: LD_VAR 0 1
37026: PPUSH
37027: CALL_OW 266
37031: PUSH
37032: LD_INT 0
37034: PUSH
37035: LD_INT 1
37037: PUSH
37038: EMPTY
37039: LIST
37040: LIST
37041: IN
37042: NOT
37043: IFFALSE 37047
// exit ;
37045: GO 38681
// if name then
37047: LD_VAR 0 3
37051: IFFALSE 37067
// SetBName ( base_dep , name ) ;
37053: LD_VAR 0 1
37057: PPUSH
37058: LD_VAR 0 3
37062: PPUSH
37063: CALL_OW 500
// base := GetBase ( base_dep ) ;
37067: LD_ADDR_VAR 0 15
37071: PUSH
37072: LD_VAR 0 1
37076: PPUSH
37077: CALL_OW 274
37081: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
37082: LD_ADDR_VAR 0 16
37086: PUSH
37087: LD_VAR 0 1
37091: PPUSH
37092: CALL_OW 255
37096: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
37097: LD_ADDR_VAR 0 17
37101: PUSH
37102: LD_VAR 0 1
37106: PPUSH
37107: CALL_OW 248
37111: ST_TO_ADDR
// if sources then
37112: LD_VAR 0 5
37116: IFFALSE 37163
// for i = 1 to 3 do
37118: LD_ADDR_VAR 0 8
37122: PUSH
37123: DOUBLE
37124: LD_INT 1
37126: DEC
37127: ST_TO_ADDR
37128: LD_INT 3
37130: PUSH
37131: FOR_TO
37132: IFFALSE 37161
// AddResourceType ( base , i , sources [ i ] ) ;
37134: LD_VAR 0 15
37138: PPUSH
37139: LD_VAR 0 8
37143: PPUSH
37144: LD_VAR 0 5
37148: PUSH
37149: LD_VAR 0 8
37153: ARRAY
37154: PPUSH
37155: CALL_OW 276
37159: GO 37131
37161: POP
37162: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
37163: LD_ADDR_VAR 0 18
37167: PUSH
37168: LD_VAR 0 15
37172: PPUSH
37173: LD_VAR 0 2
37177: PPUSH
37178: LD_INT 1
37180: PPUSH
37181: CALL 36424 0 3
37185: ST_TO_ADDR
// InitHc ;
37186: CALL_OW 19
// InitUc ;
37190: CALL_OW 18
// uc_side := side ;
37194: LD_ADDR_OWVAR 20
37198: PUSH
37199: LD_VAR 0 16
37203: ST_TO_ADDR
// uc_nation := nation ;
37204: LD_ADDR_OWVAR 21
37208: PUSH
37209: LD_VAR 0 17
37213: ST_TO_ADDR
// if buildings then
37214: LD_VAR 0 18
37218: IFFALSE 38540
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
37220: LD_ADDR_VAR 0 19
37224: PUSH
37225: LD_VAR 0 18
37229: PPUSH
37230: LD_INT 2
37232: PUSH
37233: LD_INT 30
37235: PUSH
37236: LD_INT 29
37238: PUSH
37239: EMPTY
37240: LIST
37241: LIST
37242: PUSH
37243: LD_INT 30
37245: PUSH
37246: LD_INT 30
37248: PUSH
37249: EMPTY
37250: LIST
37251: LIST
37252: PUSH
37253: EMPTY
37254: LIST
37255: LIST
37256: LIST
37257: PPUSH
37258: CALL_OW 72
37262: ST_TO_ADDR
// if tmp then
37263: LD_VAR 0 19
37267: IFFALSE 37315
// for i in tmp do
37269: LD_ADDR_VAR 0 8
37273: PUSH
37274: LD_VAR 0 19
37278: PUSH
37279: FOR_IN
37280: IFFALSE 37313
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
37282: LD_VAR 0 8
37286: PPUSH
37287: CALL_OW 250
37291: PPUSH
37292: LD_VAR 0 8
37296: PPUSH
37297: CALL_OW 251
37301: PPUSH
37302: LD_VAR 0 16
37306: PPUSH
37307: CALL_OW 441
37311: GO 37279
37313: POP
37314: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
37315: LD_VAR 0 18
37319: PPUSH
37320: LD_INT 2
37322: PUSH
37323: LD_INT 30
37325: PUSH
37326: LD_INT 32
37328: PUSH
37329: EMPTY
37330: LIST
37331: LIST
37332: PUSH
37333: LD_INT 30
37335: PUSH
37336: LD_INT 33
37338: PUSH
37339: EMPTY
37340: LIST
37341: LIST
37342: PUSH
37343: EMPTY
37344: LIST
37345: LIST
37346: LIST
37347: PPUSH
37348: CALL_OW 72
37352: IFFALSE 37440
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
37354: LD_ADDR_VAR 0 8
37358: PUSH
37359: LD_VAR 0 18
37363: PPUSH
37364: LD_INT 2
37366: PUSH
37367: LD_INT 30
37369: PUSH
37370: LD_INT 32
37372: PUSH
37373: EMPTY
37374: LIST
37375: LIST
37376: PUSH
37377: LD_INT 30
37379: PUSH
37380: LD_INT 33
37382: PUSH
37383: EMPTY
37384: LIST
37385: LIST
37386: PUSH
37387: EMPTY
37388: LIST
37389: LIST
37390: LIST
37391: PPUSH
37392: CALL_OW 72
37396: PUSH
37397: FOR_IN
37398: IFFALSE 37438
// begin if not GetBWeapon ( i ) then
37400: LD_VAR 0 8
37404: PPUSH
37405: CALL_OW 269
37409: NOT
37410: IFFALSE 37436
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
37412: LD_VAR 0 8
37416: PPUSH
37417: LD_VAR 0 8
37421: PPUSH
37422: LD_VAR 0 2
37426: PPUSH
37427: CALL 38686 0 2
37431: PPUSH
37432: CALL_OW 431
// end ;
37436: GO 37397
37438: POP
37439: POP
// end ; for i = 1 to personel do
37440: LD_ADDR_VAR 0 8
37444: PUSH
37445: DOUBLE
37446: LD_INT 1
37448: DEC
37449: ST_TO_ADDR
37450: LD_VAR 0 6
37454: PUSH
37455: FOR_TO
37456: IFFALSE 38520
// begin if i > 4 then
37458: LD_VAR 0 8
37462: PUSH
37463: LD_INT 4
37465: GREATER
37466: IFFALSE 37470
// break ;
37468: GO 38520
// case i of 1 :
37470: LD_VAR 0 8
37474: PUSH
37475: LD_INT 1
37477: DOUBLE
37478: EQUAL
37479: IFTRUE 37483
37481: GO 37563
37483: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
37484: LD_ADDR_VAR 0 12
37488: PUSH
37489: LD_VAR 0 18
37493: PPUSH
37494: LD_INT 22
37496: PUSH
37497: LD_VAR 0 16
37501: PUSH
37502: EMPTY
37503: LIST
37504: LIST
37505: PUSH
37506: LD_INT 58
37508: PUSH
37509: EMPTY
37510: LIST
37511: PUSH
37512: LD_INT 2
37514: PUSH
37515: LD_INT 30
37517: PUSH
37518: LD_INT 32
37520: PUSH
37521: EMPTY
37522: LIST
37523: LIST
37524: PUSH
37525: LD_INT 30
37527: PUSH
37528: LD_INT 4
37530: PUSH
37531: EMPTY
37532: LIST
37533: LIST
37534: PUSH
37535: LD_INT 30
37537: PUSH
37538: LD_INT 5
37540: PUSH
37541: EMPTY
37542: LIST
37543: LIST
37544: PUSH
37545: EMPTY
37546: LIST
37547: LIST
37548: LIST
37549: LIST
37550: PUSH
37551: EMPTY
37552: LIST
37553: LIST
37554: LIST
37555: PPUSH
37556: CALL_OW 72
37560: ST_TO_ADDR
37561: GO 37785
37563: LD_INT 2
37565: DOUBLE
37566: EQUAL
37567: IFTRUE 37571
37569: GO 37633
37571: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
37572: LD_ADDR_VAR 0 12
37576: PUSH
37577: LD_VAR 0 18
37581: PPUSH
37582: LD_INT 22
37584: PUSH
37585: LD_VAR 0 16
37589: PUSH
37590: EMPTY
37591: LIST
37592: LIST
37593: PUSH
37594: LD_INT 2
37596: PUSH
37597: LD_INT 30
37599: PUSH
37600: LD_INT 0
37602: PUSH
37603: EMPTY
37604: LIST
37605: LIST
37606: PUSH
37607: LD_INT 30
37609: PUSH
37610: LD_INT 1
37612: PUSH
37613: EMPTY
37614: LIST
37615: LIST
37616: PUSH
37617: EMPTY
37618: LIST
37619: LIST
37620: LIST
37621: PUSH
37622: EMPTY
37623: LIST
37624: LIST
37625: PPUSH
37626: CALL_OW 72
37630: ST_TO_ADDR
37631: GO 37785
37633: LD_INT 3
37635: DOUBLE
37636: EQUAL
37637: IFTRUE 37641
37639: GO 37703
37641: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
37642: LD_ADDR_VAR 0 12
37646: PUSH
37647: LD_VAR 0 18
37651: PPUSH
37652: LD_INT 22
37654: PUSH
37655: LD_VAR 0 16
37659: PUSH
37660: EMPTY
37661: LIST
37662: LIST
37663: PUSH
37664: LD_INT 2
37666: PUSH
37667: LD_INT 30
37669: PUSH
37670: LD_INT 2
37672: PUSH
37673: EMPTY
37674: LIST
37675: LIST
37676: PUSH
37677: LD_INT 30
37679: PUSH
37680: LD_INT 3
37682: PUSH
37683: EMPTY
37684: LIST
37685: LIST
37686: PUSH
37687: EMPTY
37688: LIST
37689: LIST
37690: LIST
37691: PUSH
37692: EMPTY
37693: LIST
37694: LIST
37695: PPUSH
37696: CALL_OW 72
37700: ST_TO_ADDR
37701: GO 37785
37703: LD_INT 4
37705: DOUBLE
37706: EQUAL
37707: IFTRUE 37711
37709: GO 37784
37711: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
37712: LD_ADDR_VAR 0 12
37716: PUSH
37717: LD_VAR 0 18
37721: PPUSH
37722: LD_INT 22
37724: PUSH
37725: LD_VAR 0 16
37729: PUSH
37730: EMPTY
37731: LIST
37732: LIST
37733: PUSH
37734: LD_INT 2
37736: PUSH
37737: LD_INT 30
37739: PUSH
37740: LD_INT 6
37742: PUSH
37743: EMPTY
37744: LIST
37745: LIST
37746: PUSH
37747: LD_INT 30
37749: PUSH
37750: LD_INT 7
37752: PUSH
37753: EMPTY
37754: LIST
37755: LIST
37756: PUSH
37757: LD_INT 30
37759: PUSH
37760: LD_INT 8
37762: PUSH
37763: EMPTY
37764: LIST
37765: LIST
37766: PUSH
37767: EMPTY
37768: LIST
37769: LIST
37770: LIST
37771: LIST
37772: PUSH
37773: EMPTY
37774: LIST
37775: LIST
37776: PPUSH
37777: CALL_OW 72
37781: ST_TO_ADDR
37782: GO 37785
37784: POP
// if i = 1 then
37785: LD_VAR 0 8
37789: PUSH
37790: LD_INT 1
37792: EQUAL
37793: IFFALSE 37904
// begin tmp := [ ] ;
37795: LD_ADDR_VAR 0 19
37799: PUSH
37800: EMPTY
37801: ST_TO_ADDR
// for j in f do
37802: LD_ADDR_VAR 0 9
37806: PUSH
37807: LD_VAR 0 12
37811: PUSH
37812: FOR_IN
37813: IFFALSE 37886
// if GetBType ( j ) = b_bunker then
37815: LD_VAR 0 9
37819: PPUSH
37820: CALL_OW 266
37824: PUSH
37825: LD_INT 32
37827: EQUAL
37828: IFFALSE 37855
// tmp := Insert ( tmp , 1 , j ) else
37830: LD_ADDR_VAR 0 19
37834: PUSH
37835: LD_VAR 0 19
37839: PPUSH
37840: LD_INT 1
37842: PPUSH
37843: LD_VAR 0 9
37847: PPUSH
37848: CALL_OW 2
37852: ST_TO_ADDR
37853: GO 37884
// tmp := Insert ( tmp , tmp + 1 , j ) ;
37855: LD_ADDR_VAR 0 19
37859: PUSH
37860: LD_VAR 0 19
37864: PPUSH
37865: LD_VAR 0 19
37869: PUSH
37870: LD_INT 1
37872: PLUS
37873: PPUSH
37874: LD_VAR 0 9
37878: PPUSH
37879: CALL_OW 2
37883: ST_TO_ADDR
37884: GO 37812
37886: POP
37887: POP
// if tmp then
37888: LD_VAR 0 19
37892: IFFALSE 37904
// f := tmp ;
37894: LD_ADDR_VAR 0 12
37898: PUSH
37899: LD_VAR 0 19
37903: ST_TO_ADDR
// end ; x := personel [ i ] ;
37904: LD_ADDR_VAR 0 13
37908: PUSH
37909: LD_VAR 0 6
37913: PUSH
37914: LD_VAR 0 8
37918: ARRAY
37919: ST_TO_ADDR
// if x = - 1 then
37920: LD_VAR 0 13
37924: PUSH
37925: LD_INT 1
37927: NEG
37928: EQUAL
37929: IFFALSE 38138
// begin for j in f do
37931: LD_ADDR_VAR 0 9
37935: PUSH
37936: LD_VAR 0 12
37940: PUSH
37941: FOR_IN
37942: IFFALSE 38134
// repeat InitHc ;
37944: CALL_OW 19
// if GetBType ( j ) = b_barracks then
37948: LD_VAR 0 9
37952: PPUSH
37953: CALL_OW 266
37957: PUSH
37958: LD_INT 5
37960: EQUAL
37961: IFFALSE 38031
// begin if UnitsInside ( j ) < 3 then
37963: LD_VAR 0 9
37967: PPUSH
37968: CALL_OW 313
37972: PUSH
37973: LD_INT 3
37975: LESS
37976: IFFALSE 38012
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
37978: LD_INT 0
37980: PPUSH
37981: LD_INT 5
37983: PUSH
37984: LD_INT 8
37986: PUSH
37987: LD_INT 9
37989: PUSH
37990: EMPTY
37991: LIST
37992: LIST
37993: LIST
37994: PUSH
37995: LD_VAR 0 17
37999: ARRAY
38000: PPUSH
38001: LD_VAR 0 4
38005: PPUSH
38006: CALL_OW 380
38010: GO 38029
// PrepareHuman ( false , i , skill ) ;
38012: LD_INT 0
38014: PPUSH
38015: LD_VAR 0 8
38019: PPUSH
38020: LD_VAR 0 4
38024: PPUSH
38025: CALL_OW 380
// end else
38029: GO 38048
// PrepareHuman ( false , i , skill ) ;
38031: LD_INT 0
38033: PPUSH
38034: LD_VAR 0 8
38038: PPUSH
38039: LD_VAR 0 4
38043: PPUSH
38044: CALL_OW 380
// un := CreateHuman ;
38048: LD_ADDR_VAR 0 14
38052: PUSH
38053: CALL_OW 44
38057: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38058: LD_ADDR_VAR 0 7
38062: PUSH
38063: LD_VAR 0 7
38067: PPUSH
38068: LD_INT 1
38070: PPUSH
38071: LD_VAR 0 14
38075: PPUSH
38076: CALL_OW 2
38080: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
38081: LD_VAR 0 14
38085: PPUSH
38086: LD_VAR 0 9
38090: PPUSH
38091: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
38095: LD_VAR 0 9
38099: PPUSH
38100: CALL_OW 313
38104: PUSH
38105: LD_INT 6
38107: EQUAL
38108: PUSH
38109: LD_VAR 0 9
38113: PPUSH
38114: CALL_OW 266
38118: PUSH
38119: LD_INT 32
38121: PUSH
38122: LD_INT 31
38124: PUSH
38125: EMPTY
38126: LIST
38127: LIST
38128: IN
38129: OR
38130: IFFALSE 37944
38132: GO 37941
38134: POP
38135: POP
// end else
38136: GO 38518
// for j = 1 to x do
38138: LD_ADDR_VAR 0 9
38142: PUSH
38143: DOUBLE
38144: LD_INT 1
38146: DEC
38147: ST_TO_ADDR
38148: LD_VAR 0 13
38152: PUSH
38153: FOR_TO
38154: IFFALSE 38516
// begin InitHc ;
38156: CALL_OW 19
// if not f then
38160: LD_VAR 0 12
38164: NOT
38165: IFFALSE 38254
// begin PrepareHuman ( false , i , skill ) ;
38167: LD_INT 0
38169: PPUSH
38170: LD_VAR 0 8
38174: PPUSH
38175: LD_VAR 0 4
38179: PPUSH
38180: CALL_OW 380
// un := CreateHuman ;
38184: LD_ADDR_VAR 0 14
38188: PUSH
38189: CALL_OW 44
38193: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38194: LD_ADDR_VAR 0 7
38198: PUSH
38199: LD_VAR 0 7
38203: PPUSH
38204: LD_INT 1
38206: PPUSH
38207: LD_VAR 0 14
38211: PPUSH
38212: CALL_OW 2
38216: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
38217: LD_VAR 0 14
38221: PPUSH
38222: LD_VAR 0 1
38226: PPUSH
38227: CALL_OW 250
38231: PPUSH
38232: LD_VAR 0 1
38236: PPUSH
38237: CALL_OW 251
38241: PPUSH
38242: LD_INT 10
38244: PPUSH
38245: LD_INT 0
38247: PPUSH
38248: CALL_OW 50
// continue ;
38252: GO 38153
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
38254: LD_VAR 0 12
38258: PUSH
38259: LD_INT 1
38261: ARRAY
38262: PPUSH
38263: CALL_OW 313
38267: PUSH
38268: LD_VAR 0 12
38272: PUSH
38273: LD_INT 1
38275: ARRAY
38276: PPUSH
38277: CALL_OW 266
38281: PUSH
38282: LD_INT 32
38284: PUSH
38285: LD_INT 31
38287: PUSH
38288: EMPTY
38289: LIST
38290: LIST
38291: IN
38292: AND
38293: PUSH
38294: LD_VAR 0 12
38298: PUSH
38299: LD_INT 1
38301: ARRAY
38302: PPUSH
38303: CALL_OW 313
38307: PUSH
38308: LD_INT 6
38310: EQUAL
38311: OR
38312: IFFALSE 38332
// f := Delete ( f , 1 ) ;
38314: LD_ADDR_VAR 0 12
38318: PUSH
38319: LD_VAR 0 12
38323: PPUSH
38324: LD_INT 1
38326: PPUSH
38327: CALL_OW 3
38331: ST_TO_ADDR
// if not f then
38332: LD_VAR 0 12
38336: NOT
38337: IFFALSE 38355
// begin x := x + 2 ;
38339: LD_ADDR_VAR 0 13
38343: PUSH
38344: LD_VAR 0 13
38348: PUSH
38349: LD_INT 2
38351: PLUS
38352: ST_TO_ADDR
// continue ;
38353: GO 38153
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
38355: LD_VAR 0 12
38359: PUSH
38360: LD_INT 1
38362: ARRAY
38363: PPUSH
38364: CALL_OW 266
38368: PUSH
38369: LD_INT 5
38371: EQUAL
38372: IFFALSE 38446
// begin if UnitsInside ( f [ 1 ] ) < 3 then
38374: LD_VAR 0 12
38378: PUSH
38379: LD_INT 1
38381: ARRAY
38382: PPUSH
38383: CALL_OW 313
38387: PUSH
38388: LD_INT 3
38390: LESS
38391: IFFALSE 38427
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
38393: LD_INT 0
38395: PPUSH
38396: LD_INT 5
38398: PUSH
38399: LD_INT 8
38401: PUSH
38402: LD_INT 9
38404: PUSH
38405: EMPTY
38406: LIST
38407: LIST
38408: LIST
38409: PUSH
38410: LD_VAR 0 17
38414: ARRAY
38415: PPUSH
38416: LD_VAR 0 4
38420: PPUSH
38421: CALL_OW 380
38425: GO 38444
// PrepareHuman ( false , i , skill ) ;
38427: LD_INT 0
38429: PPUSH
38430: LD_VAR 0 8
38434: PPUSH
38435: LD_VAR 0 4
38439: PPUSH
38440: CALL_OW 380
// end else
38444: GO 38463
// PrepareHuman ( false , i , skill ) ;
38446: LD_INT 0
38448: PPUSH
38449: LD_VAR 0 8
38453: PPUSH
38454: LD_VAR 0 4
38458: PPUSH
38459: CALL_OW 380
// un := CreateHuman ;
38463: LD_ADDR_VAR 0 14
38467: PUSH
38468: CALL_OW 44
38472: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38473: LD_ADDR_VAR 0 7
38477: PUSH
38478: LD_VAR 0 7
38482: PPUSH
38483: LD_INT 1
38485: PPUSH
38486: LD_VAR 0 14
38490: PPUSH
38491: CALL_OW 2
38495: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
38496: LD_VAR 0 14
38500: PPUSH
38501: LD_VAR 0 12
38505: PUSH
38506: LD_INT 1
38508: ARRAY
38509: PPUSH
38510: CALL_OW 52
// end ;
38514: GO 38153
38516: POP
38517: POP
// end ;
38518: GO 37455
38520: POP
38521: POP
// result := result ^ buildings ;
38522: LD_ADDR_VAR 0 7
38526: PUSH
38527: LD_VAR 0 7
38531: PUSH
38532: LD_VAR 0 18
38536: ADD
38537: ST_TO_ADDR
// end else
38538: GO 38681
// begin for i = 1 to personel do
38540: LD_ADDR_VAR 0 8
38544: PUSH
38545: DOUBLE
38546: LD_INT 1
38548: DEC
38549: ST_TO_ADDR
38550: LD_VAR 0 6
38554: PUSH
38555: FOR_TO
38556: IFFALSE 38679
// begin if i > 4 then
38558: LD_VAR 0 8
38562: PUSH
38563: LD_INT 4
38565: GREATER
38566: IFFALSE 38570
// break ;
38568: GO 38679
// x := personel [ i ] ;
38570: LD_ADDR_VAR 0 13
38574: PUSH
38575: LD_VAR 0 6
38579: PUSH
38580: LD_VAR 0 8
38584: ARRAY
38585: ST_TO_ADDR
// if x = - 1 then
38586: LD_VAR 0 13
38590: PUSH
38591: LD_INT 1
38593: NEG
38594: EQUAL
38595: IFFALSE 38599
// continue ;
38597: GO 38555
// PrepareHuman ( false , i , skill ) ;
38599: LD_INT 0
38601: PPUSH
38602: LD_VAR 0 8
38606: PPUSH
38607: LD_VAR 0 4
38611: PPUSH
38612: CALL_OW 380
// un := CreateHuman ;
38616: LD_ADDR_VAR 0 14
38620: PUSH
38621: CALL_OW 44
38625: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
38626: LD_VAR 0 14
38630: PPUSH
38631: LD_VAR 0 1
38635: PPUSH
38636: CALL_OW 250
38640: PPUSH
38641: LD_VAR 0 1
38645: PPUSH
38646: CALL_OW 251
38650: PPUSH
38651: LD_INT 10
38653: PPUSH
38654: LD_INT 0
38656: PPUSH
38657: CALL_OW 50
// result := result ^ un ;
38661: LD_ADDR_VAR 0 7
38665: PUSH
38666: LD_VAR 0 7
38670: PUSH
38671: LD_VAR 0 14
38675: ADD
38676: ST_TO_ADDR
// end ;
38677: GO 38555
38679: POP
38680: POP
// end ; end ;
38681: LD_VAR 0 7
38685: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
38686: LD_INT 0
38688: PPUSH
38689: PPUSH
38690: PPUSH
38691: PPUSH
38692: PPUSH
38693: PPUSH
38694: PPUSH
38695: PPUSH
38696: PPUSH
38697: PPUSH
38698: PPUSH
38699: PPUSH
38700: PPUSH
38701: PPUSH
38702: PPUSH
38703: PPUSH
// result := false ;
38704: LD_ADDR_VAR 0 3
38708: PUSH
38709: LD_INT 0
38711: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
38712: LD_VAR 0 1
38716: NOT
38717: PUSH
38718: LD_VAR 0 1
38722: PPUSH
38723: CALL_OW 266
38727: PUSH
38728: LD_INT 32
38730: PUSH
38731: LD_INT 33
38733: PUSH
38734: EMPTY
38735: LIST
38736: LIST
38737: IN
38738: NOT
38739: OR
38740: IFFALSE 38744
// exit ;
38742: GO 39853
// nat := GetNation ( tower ) ;
38744: LD_ADDR_VAR 0 12
38748: PUSH
38749: LD_VAR 0 1
38753: PPUSH
38754: CALL_OW 248
38758: ST_TO_ADDR
// side := GetSide ( tower ) ;
38759: LD_ADDR_VAR 0 16
38763: PUSH
38764: LD_VAR 0 1
38768: PPUSH
38769: CALL_OW 255
38773: ST_TO_ADDR
// x := GetX ( tower ) ;
38774: LD_ADDR_VAR 0 10
38778: PUSH
38779: LD_VAR 0 1
38783: PPUSH
38784: CALL_OW 250
38788: ST_TO_ADDR
// y := GetY ( tower ) ;
38789: LD_ADDR_VAR 0 11
38793: PUSH
38794: LD_VAR 0 1
38798: PPUSH
38799: CALL_OW 251
38803: ST_TO_ADDR
// if not x or not y then
38804: LD_VAR 0 10
38808: NOT
38809: PUSH
38810: LD_VAR 0 11
38814: NOT
38815: OR
38816: IFFALSE 38820
// exit ;
38818: GO 39853
// weapon := 0 ;
38820: LD_ADDR_VAR 0 18
38824: PUSH
38825: LD_INT 0
38827: ST_TO_ADDR
// fac_list := [ ] ;
38828: LD_ADDR_VAR 0 17
38832: PUSH
38833: EMPTY
38834: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
38835: LD_ADDR_VAR 0 6
38839: PUSH
38840: LD_VAR 0 1
38844: PPUSH
38845: CALL_OW 274
38849: PPUSH
38850: LD_VAR 0 2
38854: PPUSH
38855: LD_INT 0
38857: PPUSH
38858: CALL 36424 0 3
38862: PPUSH
38863: LD_INT 30
38865: PUSH
38866: LD_INT 3
38868: PUSH
38869: EMPTY
38870: LIST
38871: LIST
38872: PPUSH
38873: CALL_OW 72
38877: ST_TO_ADDR
// if not factories then
38878: LD_VAR 0 6
38882: NOT
38883: IFFALSE 38887
// exit ;
38885: GO 39853
// for i in factories do
38887: LD_ADDR_VAR 0 8
38891: PUSH
38892: LD_VAR 0 6
38896: PUSH
38897: FOR_IN
38898: IFFALSE 38923
// fac_list := fac_list union AvailableWeaponList ( i ) ;
38900: LD_ADDR_VAR 0 17
38904: PUSH
38905: LD_VAR 0 17
38909: PUSH
38910: LD_VAR 0 8
38914: PPUSH
38915: CALL_OW 478
38919: UNION
38920: ST_TO_ADDR
38921: GO 38897
38923: POP
38924: POP
// if not fac_list then
38925: LD_VAR 0 17
38929: NOT
38930: IFFALSE 38934
// exit ;
38932: GO 39853
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
38934: LD_ADDR_VAR 0 5
38938: PUSH
38939: LD_INT 4
38941: PUSH
38942: LD_INT 5
38944: PUSH
38945: LD_INT 9
38947: PUSH
38948: LD_INT 10
38950: PUSH
38951: LD_INT 6
38953: PUSH
38954: LD_INT 7
38956: PUSH
38957: LD_INT 11
38959: PUSH
38960: EMPTY
38961: LIST
38962: LIST
38963: LIST
38964: LIST
38965: LIST
38966: LIST
38967: LIST
38968: PUSH
38969: LD_INT 27
38971: PUSH
38972: LD_INT 28
38974: PUSH
38975: LD_INT 26
38977: PUSH
38978: LD_INT 30
38980: PUSH
38981: EMPTY
38982: LIST
38983: LIST
38984: LIST
38985: LIST
38986: PUSH
38987: LD_INT 43
38989: PUSH
38990: LD_INT 44
38992: PUSH
38993: LD_INT 46
38995: PUSH
38996: LD_INT 45
38998: PUSH
38999: LD_INT 47
39001: PUSH
39002: LD_INT 49
39004: PUSH
39005: EMPTY
39006: LIST
39007: LIST
39008: LIST
39009: LIST
39010: LIST
39011: LIST
39012: PUSH
39013: EMPTY
39014: LIST
39015: LIST
39016: LIST
39017: PUSH
39018: LD_VAR 0 12
39022: ARRAY
39023: ST_TO_ADDR
// list := list isect fac_list ;
39024: LD_ADDR_VAR 0 5
39028: PUSH
39029: LD_VAR 0 5
39033: PUSH
39034: LD_VAR 0 17
39038: ISECT
39039: ST_TO_ADDR
// if not list then
39040: LD_VAR 0 5
39044: NOT
39045: IFFALSE 39049
// exit ;
39047: GO 39853
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
39049: LD_VAR 0 12
39053: PUSH
39054: LD_INT 3
39056: EQUAL
39057: PUSH
39058: LD_INT 49
39060: PUSH
39061: LD_VAR 0 5
39065: IN
39066: AND
39067: PUSH
39068: LD_INT 31
39070: PPUSH
39071: LD_VAR 0 16
39075: PPUSH
39076: CALL_OW 321
39080: PUSH
39081: LD_INT 2
39083: EQUAL
39084: AND
39085: IFFALSE 39145
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
39087: LD_INT 22
39089: PUSH
39090: LD_VAR 0 16
39094: PUSH
39095: EMPTY
39096: LIST
39097: LIST
39098: PUSH
39099: LD_INT 35
39101: PUSH
39102: LD_INT 49
39104: PUSH
39105: EMPTY
39106: LIST
39107: LIST
39108: PUSH
39109: LD_INT 91
39111: PUSH
39112: LD_VAR 0 1
39116: PUSH
39117: LD_INT 10
39119: PUSH
39120: EMPTY
39121: LIST
39122: LIST
39123: LIST
39124: PUSH
39125: EMPTY
39126: LIST
39127: LIST
39128: LIST
39129: PPUSH
39130: CALL_OW 69
39134: NOT
39135: IFFALSE 39145
// weapon := ru_time_lapser ;
39137: LD_ADDR_VAR 0 18
39141: PUSH
39142: LD_INT 49
39144: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
39145: LD_VAR 0 12
39149: PUSH
39150: LD_INT 1
39152: PUSH
39153: LD_INT 2
39155: PUSH
39156: EMPTY
39157: LIST
39158: LIST
39159: IN
39160: PUSH
39161: LD_INT 11
39163: PUSH
39164: LD_VAR 0 5
39168: IN
39169: PUSH
39170: LD_INT 30
39172: PUSH
39173: LD_VAR 0 5
39177: IN
39178: OR
39179: AND
39180: PUSH
39181: LD_INT 6
39183: PPUSH
39184: LD_VAR 0 16
39188: PPUSH
39189: CALL_OW 321
39193: PUSH
39194: LD_INT 2
39196: EQUAL
39197: AND
39198: IFFALSE 39363
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
39200: LD_INT 22
39202: PUSH
39203: LD_VAR 0 16
39207: PUSH
39208: EMPTY
39209: LIST
39210: LIST
39211: PUSH
39212: LD_INT 2
39214: PUSH
39215: LD_INT 35
39217: PUSH
39218: LD_INT 11
39220: PUSH
39221: EMPTY
39222: LIST
39223: LIST
39224: PUSH
39225: LD_INT 35
39227: PUSH
39228: LD_INT 30
39230: PUSH
39231: EMPTY
39232: LIST
39233: LIST
39234: PUSH
39235: EMPTY
39236: LIST
39237: LIST
39238: LIST
39239: PUSH
39240: LD_INT 91
39242: PUSH
39243: LD_VAR 0 1
39247: PUSH
39248: LD_INT 18
39250: PUSH
39251: EMPTY
39252: LIST
39253: LIST
39254: LIST
39255: PUSH
39256: EMPTY
39257: LIST
39258: LIST
39259: LIST
39260: PPUSH
39261: CALL_OW 69
39265: NOT
39266: PUSH
39267: LD_INT 22
39269: PUSH
39270: LD_VAR 0 16
39274: PUSH
39275: EMPTY
39276: LIST
39277: LIST
39278: PUSH
39279: LD_INT 2
39281: PUSH
39282: LD_INT 30
39284: PUSH
39285: LD_INT 32
39287: PUSH
39288: EMPTY
39289: LIST
39290: LIST
39291: PUSH
39292: LD_INT 30
39294: PUSH
39295: LD_INT 33
39297: PUSH
39298: EMPTY
39299: LIST
39300: LIST
39301: PUSH
39302: EMPTY
39303: LIST
39304: LIST
39305: LIST
39306: PUSH
39307: LD_INT 91
39309: PUSH
39310: LD_VAR 0 1
39314: PUSH
39315: LD_INT 12
39317: PUSH
39318: EMPTY
39319: LIST
39320: LIST
39321: LIST
39322: PUSH
39323: EMPTY
39324: LIST
39325: LIST
39326: LIST
39327: PUSH
39328: EMPTY
39329: LIST
39330: PPUSH
39331: CALL_OW 69
39335: PUSH
39336: LD_INT 2
39338: GREATER
39339: AND
39340: IFFALSE 39363
// weapon := [ us_radar , ar_radar ] [ nat ] ;
39342: LD_ADDR_VAR 0 18
39346: PUSH
39347: LD_INT 11
39349: PUSH
39350: LD_INT 30
39352: PUSH
39353: EMPTY
39354: LIST
39355: LIST
39356: PUSH
39357: LD_VAR 0 12
39361: ARRAY
39362: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
39363: LD_VAR 0 18
39367: NOT
39368: PUSH
39369: LD_INT 40
39371: PPUSH
39372: LD_VAR 0 16
39376: PPUSH
39377: CALL_OW 321
39381: PUSH
39382: LD_INT 2
39384: EQUAL
39385: AND
39386: PUSH
39387: LD_INT 7
39389: PUSH
39390: LD_VAR 0 5
39394: IN
39395: PUSH
39396: LD_INT 28
39398: PUSH
39399: LD_VAR 0 5
39403: IN
39404: OR
39405: PUSH
39406: LD_INT 45
39408: PUSH
39409: LD_VAR 0 5
39413: IN
39414: OR
39415: AND
39416: IFFALSE 39670
// begin hex := GetHexInfo ( x , y ) ;
39418: LD_ADDR_VAR 0 4
39422: PUSH
39423: LD_VAR 0 10
39427: PPUSH
39428: LD_VAR 0 11
39432: PPUSH
39433: CALL_OW 546
39437: ST_TO_ADDR
// if hex [ 1 ] then
39438: LD_VAR 0 4
39442: PUSH
39443: LD_INT 1
39445: ARRAY
39446: IFFALSE 39450
// exit ;
39448: GO 39853
// height := hex [ 2 ] ;
39450: LD_ADDR_VAR 0 15
39454: PUSH
39455: LD_VAR 0 4
39459: PUSH
39460: LD_INT 2
39462: ARRAY
39463: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
39464: LD_ADDR_VAR 0 14
39468: PUSH
39469: LD_INT 0
39471: PUSH
39472: LD_INT 2
39474: PUSH
39475: LD_INT 3
39477: PUSH
39478: LD_INT 5
39480: PUSH
39481: EMPTY
39482: LIST
39483: LIST
39484: LIST
39485: LIST
39486: ST_TO_ADDR
// for i in tmp do
39487: LD_ADDR_VAR 0 8
39491: PUSH
39492: LD_VAR 0 14
39496: PUSH
39497: FOR_IN
39498: IFFALSE 39668
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
39500: LD_ADDR_VAR 0 9
39504: PUSH
39505: LD_VAR 0 10
39509: PPUSH
39510: LD_VAR 0 8
39514: PPUSH
39515: LD_INT 5
39517: PPUSH
39518: CALL_OW 272
39522: PUSH
39523: LD_VAR 0 11
39527: PPUSH
39528: LD_VAR 0 8
39532: PPUSH
39533: LD_INT 5
39535: PPUSH
39536: CALL_OW 273
39540: PUSH
39541: EMPTY
39542: LIST
39543: LIST
39544: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
39545: LD_VAR 0 9
39549: PUSH
39550: LD_INT 1
39552: ARRAY
39553: PPUSH
39554: LD_VAR 0 9
39558: PUSH
39559: LD_INT 2
39561: ARRAY
39562: PPUSH
39563: CALL_OW 488
39567: IFFALSE 39666
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
39569: LD_ADDR_VAR 0 4
39573: PUSH
39574: LD_VAR 0 9
39578: PUSH
39579: LD_INT 1
39581: ARRAY
39582: PPUSH
39583: LD_VAR 0 9
39587: PUSH
39588: LD_INT 2
39590: ARRAY
39591: PPUSH
39592: CALL_OW 546
39596: ST_TO_ADDR
// if hex [ 1 ] then
39597: LD_VAR 0 4
39601: PUSH
39602: LD_INT 1
39604: ARRAY
39605: IFFALSE 39609
// continue ;
39607: GO 39497
// h := hex [ 2 ] ;
39609: LD_ADDR_VAR 0 13
39613: PUSH
39614: LD_VAR 0 4
39618: PUSH
39619: LD_INT 2
39621: ARRAY
39622: ST_TO_ADDR
// if h + 7 < height then
39623: LD_VAR 0 13
39627: PUSH
39628: LD_INT 7
39630: PLUS
39631: PUSH
39632: LD_VAR 0 15
39636: LESS
39637: IFFALSE 39666
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
39639: LD_ADDR_VAR 0 18
39643: PUSH
39644: LD_INT 7
39646: PUSH
39647: LD_INT 28
39649: PUSH
39650: LD_INT 45
39652: PUSH
39653: EMPTY
39654: LIST
39655: LIST
39656: LIST
39657: PUSH
39658: LD_VAR 0 12
39662: ARRAY
39663: ST_TO_ADDR
// break ;
39664: GO 39668
// end ; end ; end ;
39666: GO 39497
39668: POP
39669: POP
// end ; if not weapon then
39670: LD_VAR 0 18
39674: NOT
39675: IFFALSE 39735
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
39677: LD_ADDR_VAR 0 5
39681: PUSH
39682: LD_VAR 0 5
39686: PUSH
39687: LD_INT 11
39689: PUSH
39690: LD_INT 30
39692: PUSH
39693: LD_INT 49
39695: PUSH
39696: EMPTY
39697: LIST
39698: LIST
39699: LIST
39700: DIFF
39701: ST_TO_ADDR
// if not list then
39702: LD_VAR 0 5
39706: NOT
39707: IFFALSE 39711
// exit ;
39709: GO 39853
// weapon := list [ rand ( 1 , list ) ] ;
39711: LD_ADDR_VAR 0 18
39715: PUSH
39716: LD_VAR 0 5
39720: PUSH
39721: LD_INT 1
39723: PPUSH
39724: LD_VAR 0 5
39728: PPUSH
39729: CALL_OW 12
39733: ARRAY
39734: ST_TO_ADDR
// end ; if weapon then
39735: LD_VAR 0 18
39739: IFFALSE 39853
// begin tmp := CostOfWeapon ( weapon ) ;
39741: LD_ADDR_VAR 0 14
39745: PUSH
39746: LD_VAR 0 18
39750: PPUSH
39751: CALL_OW 451
39755: ST_TO_ADDR
// j := GetBase ( tower ) ;
39756: LD_ADDR_VAR 0 9
39760: PUSH
39761: LD_VAR 0 1
39765: PPUSH
39766: CALL_OW 274
39770: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
39771: LD_VAR 0 9
39775: PPUSH
39776: LD_INT 1
39778: PPUSH
39779: CALL_OW 275
39783: PUSH
39784: LD_VAR 0 14
39788: PUSH
39789: LD_INT 1
39791: ARRAY
39792: GREATEREQUAL
39793: PUSH
39794: LD_VAR 0 9
39798: PPUSH
39799: LD_INT 2
39801: PPUSH
39802: CALL_OW 275
39806: PUSH
39807: LD_VAR 0 14
39811: PUSH
39812: LD_INT 2
39814: ARRAY
39815: GREATEREQUAL
39816: AND
39817: PUSH
39818: LD_VAR 0 9
39822: PPUSH
39823: LD_INT 3
39825: PPUSH
39826: CALL_OW 275
39830: PUSH
39831: LD_VAR 0 14
39835: PUSH
39836: LD_INT 3
39838: ARRAY
39839: GREATEREQUAL
39840: AND
39841: IFFALSE 39853
// result := weapon ;
39843: LD_ADDR_VAR 0 3
39847: PUSH
39848: LD_VAR 0 18
39852: ST_TO_ADDR
// end ; end ;
39853: LD_VAR 0 3
39857: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
39858: LD_INT 0
39860: PPUSH
39861: PPUSH
// result := true ;
39862: LD_ADDR_VAR 0 3
39866: PUSH
39867: LD_INT 1
39869: ST_TO_ADDR
// if array1 = array2 then
39870: LD_VAR 0 1
39874: PUSH
39875: LD_VAR 0 2
39879: EQUAL
39880: IFFALSE 39940
// begin for i = 1 to array1 do
39882: LD_ADDR_VAR 0 4
39886: PUSH
39887: DOUBLE
39888: LD_INT 1
39890: DEC
39891: ST_TO_ADDR
39892: LD_VAR 0 1
39896: PUSH
39897: FOR_TO
39898: IFFALSE 39936
// if array1 [ i ] <> array2 [ i ] then
39900: LD_VAR 0 1
39904: PUSH
39905: LD_VAR 0 4
39909: ARRAY
39910: PUSH
39911: LD_VAR 0 2
39915: PUSH
39916: LD_VAR 0 4
39920: ARRAY
39921: NONEQUAL
39922: IFFALSE 39934
// begin result := false ;
39924: LD_ADDR_VAR 0 3
39928: PUSH
39929: LD_INT 0
39931: ST_TO_ADDR
// break ;
39932: GO 39936
// end ;
39934: GO 39897
39936: POP
39937: POP
// end else
39938: GO 39948
// result := false ;
39940: LD_ADDR_VAR 0 3
39944: PUSH
39945: LD_INT 0
39947: ST_TO_ADDR
// end ;
39948: LD_VAR 0 3
39952: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
39953: LD_INT 0
39955: PPUSH
39956: PPUSH
// if not array1 or not array2 then
39957: LD_VAR 0 1
39961: NOT
39962: PUSH
39963: LD_VAR 0 2
39967: NOT
39968: OR
39969: IFFALSE 39973
// exit ;
39971: GO 40037
// result := true ;
39973: LD_ADDR_VAR 0 3
39977: PUSH
39978: LD_INT 1
39980: ST_TO_ADDR
// for i = 1 to array1 do
39981: LD_ADDR_VAR 0 4
39985: PUSH
39986: DOUBLE
39987: LD_INT 1
39989: DEC
39990: ST_TO_ADDR
39991: LD_VAR 0 1
39995: PUSH
39996: FOR_TO
39997: IFFALSE 40035
// if array1 [ i ] <> array2 [ i ] then
39999: LD_VAR 0 1
40003: PUSH
40004: LD_VAR 0 4
40008: ARRAY
40009: PUSH
40010: LD_VAR 0 2
40014: PUSH
40015: LD_VAR 0 4
40019: ARRAY
40020: NONEQUAL
40021: IFFALSE 40033
// begin result := false ;
40023: LD_ADDR_VAR 0 3
40027: PUSH
40028: LD_INT 0
40030: ST_TO_ADDR
// break ;
40031: GO 40035
// end ;
40033: GO 39996
40035: POP
40036: POP
// end ;
40037: LD_VAR 0 3
40041: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
40042: LD_INT 0
40044: PPUSH
40045: PPUSH
40046: PPUSH
// pom := GetBase ( fac ) ;
40047: LD_ADDR_VAR 0 5
40051: PUSH
40052: LD_VAR 0 1
40056: PPUSH
40057: CALL_OW 274
40061: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
40062: LD_ADDR_VAR 0 4
40066: PUSH
40067: LD_VAR 0 2
40071: PUSH
40072: LD_INT 1
40074: ARRAY
40075: PPUSH
40076: LD_VAR 0 2
40080: PUSH
40081: LD_INT 2
40083: ARRAY
40084: PPUSH
40085: LD_VAR 0 2
40089: PUSH
40090: LD_INT 3
40092: ARRAY
40093: PPUSH
40094: LD_VAR 0 2
40098: PUSH
40099: LD_INT 4
40101: ARRAY
40102: PPUSH
40103: CALL_OW 449
40107: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40108: LD_ADDR_VAR 0 3
40112: PUSH
40113: LD_VAR 0 5
40117: PPUSH
40118: LD_INT 1
40120: PPUSH
40121: CALL_OW 275
40125: PUSH
40126: LD_VAR 0 4
40130: PUSH
40131: LD_INT 1
40133: ARRAY
40134: GREATEREQUAL
40135: PUSH
40136: LD_VAR 0 5
40140: PPUSH
40141: LD_INT 2
40143: PPUSH
40144: CALL_OW 275
40148: PUSH
40149: LD_VAR 0 4
40153: PUSH
40154: LD_INT 2
40156: ARRAY
40157: GREATEREQUAL
40158: AND
40159: PUSH
40160: LD_VAR 0 5
40164: PPUSH
40165: LD_INT 3
40167: PPUSH
40168: CALL_OW 275
40172: PUSH
40173: LD_VAR 0 4
40177: PUSH
40178: LD_INT 3
40180: ARRAY
40181: GREATEREQUAL
40182: AND
40183: ST_TO_ADDR
// end ;
40184: LD_VAR 0 3
40188: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
40189: LD_INT 0
40191: PPUSH
40192: PPUSH
40193: PPUSH
40194: PPUSH
// pom := GetBase ( building ) ;
40195: LD_ADDR_VAR 0 3
40199: PUSH
40200: LD_VAR 0 1
40204: PPUSH
40205: CALL_OW 274
40209: ST_TO_ADDR
// if not pom then
40210: LD_VAR 0 3
40214: NOT
40215: IFFALSE 40219
// exit ;
40217: GO 40389
// btype := GetBType ( building ) ;
40219: LD_ADDR_VAR 0 5
40223: PUSH
40224: LD_VAR 0 1
40228: PPUSH
40229: CALL_OW 266
40233: ST_TO_ADDR
// if btype = b_armoury then
40234: LD_VAR 0 5
40238: PUSH
40239: LD_INT 4
40241: EQUAL
40242: IFFALSE 40252
// btype := b_barracks ;
40244: LD_ADDR_VAR 0 5
40248: PUSH
40249: LD_INT 5
40251: ST_TO_ADDR
// if btype = b_depot then
40252: LD_VAR 0 5
40256: PUSH
40257: LD_INT 0
40259: EQUAL
40260: IFFALSE 40270
// btype := b_warehouse ;
40262: LD_ADDR_VAR 0 5
40266: PUSH
40267: LD_INT 1
40269: ST_TO_ADDR
// if btype = b_workshop then
40270: LD_VAR 0 5
40274: PUSH
40275: LD_INT 2
40277: EQUAL
40278: IFFALSE 40288
// btype := b_factory ;
40280: LD_ADDR_VAR 0 5
40284: PUSH
40285: LD_INT 3
40287: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
40288: LD_ADDR_VAR 0 4
40292: PUSH
40293: LD_VAR 0 5
40297: PPUSH
40298: LD_VAR 0 1
40302: PPUSH
40303: CALL_OW 248
40307: PPUSH
40308: CALL_OW 450
40312: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40313: LD_ADDR_VAR 0 2
40317: PUSH
40318: LD_VAR 0 3
40322: PPUSH
40323: LD_INT 1
40325: PPUSH
40326: CALL_OW 275
40330: PUSH
40331: LD_VAR 0 4
40335: PUSH
40336: LD_INT 1
40338: ARRAY
40339: GREATEREQUAL
40340: PUSH
40341: LD_VAR 0 3
40345: PPUSH
40346: LD_INT 2
40348: PPUSH
40349: CALL_OW 275
40353: PUSH
40354: LD_VAR 0 4
40358: PUSH
40359: LD_INT 2
40361: ARRAY
40362: GREATEREQUAL
40363: AND
40364: PUSH
40365: LD_VAR 0 3
40369: PPUSH
40370: LD_INT 3
40372: PPUSH
40373: CALL_OW 275
40377: PUSH
40378: LD_VAR 0 4
40382: PUSH
40383: LD_INT 3
40385: ARRAY
40386: GREATEREQUAL
40387: AND
40388: ST_TO_ADDR
// end ;
40389: LD_VAR 0 2
40393: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
40394: LD_INT 0
40396: PPUSH
40397: PPUSH
40398: PPUSH
// pom := GetBase ( building ) ;
40399: LD_ADDR_VAR 0 4
40403: PUSH
40404: LD_VAR 0 1
40408: PPUSH
40409: CALL_OW 274
40413: ST_TO_ADDR
// if not pom then
40414: LD_VAR 0 4
40418: NOT
40419: IFFALSE 40423
// exit ;
40421: GO 40524
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
40423: LD_ADDR_VAR 0 5
40427: PUSH
40428: LD_VAR 0 2
40432: PPUSH
40433: LD_VAR 0 1
40437: PPUSH
40438: CALL_OW 248
40442: PPUSH
40443: CALL_OW 450
40447: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40448: LD_ADDR_VAR 0 3
40452: PUSH
40453: LD_VAR 0 4
40457: PPUSH
40458: LD_INT 1
40460: PPUSH
40461: CALL_OW 275
40465: PUSH
40466: LD_VAR 0 5
40470: PUSH
40471: LD_INT 1
40473: ARRAY
40474: GREATEREQUAL
40475: PUSH
40476: LD_VAR 0 4
40480: PPUSH
40481: LD_INT 2
40483: PPUSH
40484: CALL_OW 275
40488: PUSH
40489: LD_VAR 0 5
40493: PUSH
40494: LD_INT 2
40496: ARRAY
40497: GREATEREQUAL
40498: AND
40499: PUSH
40500: LD_VAR 0 4
40504: PPUSH
40505: LD_INT 3
40507: PPUSH
40508: CALL_OW 275
40512: PUSH
40513: LD_VAR 0 5
40517: PUSH
40518: LD_INT 3
40520: ARRAY
40521: GREATEREQUAL
40522: AND
40523: ST_TO_ADDR
// end ;
40524: LD_VAR 0 3
40528: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
40529: LD_INT 0
40531: PPUSH
40532: PPUSH
40533: PPUSH
40534: PPUSH
40535: PPUSH
40536: PPUSH
40537: PPUSH
40538: PPUSH
40539: PPUSH
40540: PPUSH
40541: PPUSH
// result := false ;
40542: LD_ADDR_VAR 0 8
40546: PUSH
40547: LD_INT 0
40549: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
40550: LD_VAR 0 5
40554: NOT
40555: PUSH
40556: LD_VAR 0 1
40560: NOT
40561: OR
40562: PUSH
40563: LD_VAR 0 2
40567: NOT
40568: OR
40569: PUSH
40570: LD_VAR 0 3
40574: NOT
40575: OR
40576: IFFALSE 40580
// exit ;
40578: GO 41394
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
40580: LD_ADDR_VAR 0 14
40584: PUSH
40585: LD_VAR 0 1
40589: PPUSH
40590: LD_VAR 0 2
40594: PPUSH
40595: LD_VAR 0 3
40599: PPUSH
40600: LD_VAR 0 4
40604: PPUSH
40605: LD_VAR 0 5
40609: PUSH
40610: LD_INT 1
40612: ARRAY
40613: PPUSH
40614: CALL_OW 248
40618: PPUSH
40619: LD_INT 0
40621: PPUSH
40622: CALL 42647 0 6
40626: ST_TO_ADDR
// if not hexes then
40627: LD_VAR 0 14
40631: NOT
40632: IFFALSE 40636
// exit ;
40634: GO 41394
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
40636: LD_ADDR_VAR 0 17
40640: PUSH
40641: LD_VAR 0 5
40645: PPUSH
40646: LD_INT 22
40648: PUSH
40649: LD_VAR 0 13
40653: PPUSH
40654: CALL_OW 255
40658: PUSH
40659: EMPTY
40660: LIST
40661: LIST
40662: PUSH
40663: LD_INT 2
40665: PUSH
40666: LD_INT 30
40668: PUSH
40669: LD_INT 0
40671: PUSH
40672: EMPTY
40673: LIST
40674: LIST
40675: PUSH
40676: LD_INT 30
40678: PUSH
40679: LD_INT 1
40681: PUSH
40682: EMPTY
40683: LIST
40684: LIST
40685: PUSH
40686: EMPTY
40687: LIST
40688: LIST
40689: LIST
40690: PUSH
40691: EMPTY
40692: LIST
40693: LIST
40694: PPUSH
40695: CALL_OW 72
40699: ST_TO_ADDR
// for i = 1 to hexes do
40700: LD_ADDR_VAR 0 9
40704: PUSH
40705: DOUBLE
40706: LD_INT 1
40708: DEC
40709: ST_TO_ADDR
40710: LD_VAR 0 14
40714: PUSH
40715: FOR_TO
40716: IFFALSE 41392
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
40718: LD_ADDR_VAR 0 13
40722: PUSH
40723: LD_VAR 0 14
40727: PUSH
40728: LD_VAR 0 9
40732: ARRAY
40733: PUSH
40734: LD_INT 1
40736: ARRAY
40737: PPUSH
40738: LD_VAR 0 14
40742: PUSH
40743: LD_VAR 0 9
40747: ARRAY
40748: PUSH
40749: LD_INT 2
40751: ARRAY
40752: PPUSH
40753: CALL_OW 428
40757: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
40758: LD_VAR 0 14
40762: PUSH
40763: LD_VAR 0 9
40767: ARRAY
40768: PUSH
40769: LD_INT 1
40771: ARRAY
40772: PPUSH
40773: LD_VAR 0 14
40777: PUSH
40778: LD_VAR 0 9
40782: ARRAY
40783: PUSH
40784: LD_INT 2
40786: ARRAY
40787: PPUSH
40788: CALL_OW 351
40792: PUSH
40793: LD_VAR 0 14
40797: PUSH
40798: LD_VAR 0 9
40802: ARRAY
40803: PUSH
40804: LD_INT 1
40806: ARRAY
40807: PPUSH
40808: LD_VAR 0 14
40812: PUSH
40813: LD_VAR 0 9
40817: ARRAY
40818: PUSH
40819: LD_INT 2
40821: ARRAY
40822: PPUSH
40823: CALL_OW 488
40827: NOT
40828: OR
40829: PUSH
40830: LD_VAR 0 13
40834: PPUSH
40835: CALL_OW 247
40839: PUSH
40840: LD_INT 3
40842: EQUAL
40843: OR
40844: IFFALSE 40850
// exit ;
40846: POP
40847: POP
40848: GO 41394
// if not tmp then
40850: LD_VAR 0 13
40854: NOT
40855: IFFALSE 40859
// continue ;
40857: GO 40715
// result := true ;
40859: LD_ADDR_VAR 0 8
40863: PUSH
40864: LD_INT 1
40866: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
40867: LD_VAR 0 6
40871: PUSH
40872: LD_VAR 0 13
40876: PPUSH
40877: CALL_OW 247
40881: PUSH
40882: LD_INT 2
40884: EQUAL
40885: AND
40886: PUSH
40887: LD_VAR 0 13
40891: PPUSH
40892: CALL_OW 263
40896: PUSH
40897: LD_INT 1
40899: EQUAL
40900: AND
40901: IFFALSE 41065
// begin if IsDrivenBy ( tmp ) then
40903: LD_VAR 0 13
40907: PPUSH
40908: CALL_OW 311
40912: IFFALSE 40916
// continue ;
40914: GO 40715
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
40916: LD_VAR 0 6
40920: PPUSH
40921: LD_INT 3
40923: PUSH
40924: LD_INT 60
40926: PUSH
40927: EMPTY
40928: LIST
40929: PUSH
40930: EMPTY
40931: LIST
40932: LIST
40933: PUSH
40934: LD_INT 3
40936: PUSH
40937: LD_INT 55
40939: PUSH
40940: EMPTY
40941: LIST
40942: PUSH
40943: EMPTY
40944: LIST
40945: LIST
40946: PUSH
40947: EMPTY
40948: LIST
40949: LIST
40950: PPUSH
40951: CALL_OW 72
40955: IFFALSE 41063
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
40957: LD_ADDR_VAR 0 18
40961: PUSH
40962: LD_VAR 0 6
40966: PPUSH
40967: LD_INT 3
40969: PUSH
40970: LD_INT 60
40972: PUSH
40973: EMPTY
40974: LIST
40975: PUSH
40976: EMPTY
40977: LIST
40978: LIST
40979: PUSH
40980: LD_INT 3
40982: PUSH
40983: LD_INT 55
40985: PUSH
40986: EMPTY
40987: LIST
40988: PUSH
40989: EMPTY
40990: LIST
40991: LIST
40992: PUSH
40993: EMPTY
40994: LIST
40995: LIST
40996: PPUSH
40997: CALL_OW 72
41001: PUSH
41002: LD_INT 1
41004: ARRAY
41005: ST_TO_ADDR
// if IsInUnit ( driver ) then
41006: LD_VAR 0 18
41010: PPUSH
41011: CALL_OW 310
41015: IFFALSE 41026
// ComExit ( driver ) ;
41017: LD_VAR 0 18
41021: PPUSH
41022: CALL 66426 0 1
// AddComEnterUnit ( driver , tmp ) ;
41026: LD_VAR 0 18
41030: PPUSH
41031: LD_VAR 0 13
41035: PPUSH
41036: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
41040: LD_VAR 0 18
41044: PPUSH
41045: LD_VAR 0 7
41049: PPUSH
41050: CALL_OW 173
// AddComExitVehicle ( driver ) ;
41054: LD_VAR 0 18
41058: PPUSH
41059: CALL_OW 181
// end ; continue ;
41063: GO 40715
// end ; if not cleaners or not tmp in cleaners then
41065: LD_VAR 0 6
41069: NOT
41070: PUSH
41071: LD_VAR 0 13
41075: PUSH
41076: LD_VAR 0 6
41080: IN
41081: NOT
41082: OR
41083: IFFALSE 41390
// begin if dep then
41085: LD_VAR 0 17
41089: IFFALSE 41225
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
41091: LD_ADDR_VAR 0 16
41095: PUSH
41096: LD_VAR 0 17
41100: PUSH
41101: LD_INT 1
41103: ARRAY
41104: PPUSH
41105: CALL_OW 250
41109: PPUSH
41110: LD_VAR 0 17
41114: PUSH
41115: LD_INT 1
41117: ARRAY
41118: PPUSH
41119: CALL_OW 254
41123: PPUSH
41124: LD_INT 5
41126: PPUSH
41127: CALL_OW 272
41131: PUSH
41132: LD_VAR 0 17
41136: PUSH
41137: LD_INT 1
41139: ARRAY
41140: PPUSH
41141: CALL_OW 251
41145: PPUSH
41146: LD_VAR 0 17
41150: PUSH
41151: LD_INT 1
41153: ARRAY
41154: PPUSH
41155: CALL_OW 254
41159: PPUSH
41160: LD_INT 5
41162: PPUSH
41163: CALL_OW 273
41167: PUSH
41168: EMPTY
41169: LIST
41170: LIST
41171: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
41172: LD_VAR 0 16
41176: PUSH
41177: LD_INT 1
41179: ARRAY
41180: PPUSH
41181: LD_VAR 0 16
41185: PUSH
41186: LD_INT 2
41188: ARRAY
41189: PPUSH
41190: CALL_OW 488
41194: IFFALSE 41225
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
41196: LD_VAR 0 13
41200: PPUSH
41201: LD_VAR 0 16
41205: PUSH
41206: LD_INT 1
41208: ARRAY
41209: PPUSH
41210: LD_VAR 0 16
41214: PUSH
41215: LD_INT 2
41217: ARRAY
41218: PPUSH
41219: CALL_OW 111
// continue ;
41223: GO 40715
// end ; end ; r := GetDir ( tmp ) ;
41225: LD_ADDR_VAR 0 15
41229: PUSH
41230: LD_VAR 0 13
41234: PPUSH
41235: CALL_OW 254
41239: ST_TO_ADDR
// if r = 5 then
41240: LD_VAR 0 15
41244: PUSH
41245: LD_INT 5
41247: EQUAL
41248: IFFALSE 41258
// r := 0 ;
41250: LD_ADDR_VAR 0 15
41254: PUSH
41255: LD_INT 0
41257: ST_TO_ADDR
// for j = r to 5 do
41258: LD_ADDR_VAR 0 10
41262: PUSH
41263: DOUBLE
41264: LD_VAR 0 15
41268: DEC
41269: ST_TO_ADDR
41270: LD_INT 5
41272: PUSH
41273: FOR_TO
41274: IFFALSE 41388
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
41276: LD_ADDR_VAR 0 11
41280: PUSH
41281: LD_VAR 0 13
41285: PPUSH
41286: CALL_OW 250
41290: PPUSH
41291: LD_VAR 0 10
41295: PPUSH
41296: LD_INT 2
41298: PPUSH
41299: CALL_OW 272
41303: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
41304: LD_ADDR_VAR 0 12
41308: PUSH
41309: LD_VAR 0 13
41313: PPUSH
41314: CALL_OW 251
41318: PPUSH
41319: LD_VAR 0 10
41323: PPUSH
41324: LD_INT 2
41326: PPUSH
41327: CALL_OW 273
41331: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
41332: LD_VAR 0 11
41336: PPUSH
41337: LD_VAR 0 12
41341: PPUSH
41342: CALL_OW 488
41346: PUSH
41347: LD_VAR 0 11
41351: PPUSH
41352: LD_VAR 0 12
41356: PPUSH
41357: CALL_OW 428
41361: NOT
41362: AND
41363: IFFALSE 41386
// begin ComMoveXY ( tmp , _x , _y ) ;
41365: LD_VAR 0 13
41369: PPUSH
41370: LD_VAR 0 11
41374: PPUSH
41375: LD_VAR 0 12
41379: PPUSH
41380: CALL_OW 111
// break ;
41384: GO 41388
// end ; end ;
41386: GO 41273
41388: POP
41389: POP
// end ; end ;
41390: GO 40715
41392: POP
41393: POP
// end ;
41394: LD_VAR 0 8
41398: RET
// export function BuildingTechInvented ( side , btype ) ; begin
41399: LD_INT 0
41401: PPUSH
// result := true ;
41402: LD_ADDR_VAR 0 3
41406: PUSH
41407: LD_INT 1
41409: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
41410: LD_VAR 0 2
41414: PUSH
41415: LD_INT 24
41417: DOUBLE
41418: EQUAL
41419: IFTRUE 41429
41421: LD_INT 33
41423: DOUBLE
41424: EQUAL
41425: IFTRUE 41429
41427: GO 41454
41429: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
41430: LD_ADDR_VAR 0 3
41434: PUSH
41435: LD_INT 32
41437: PPUSH
41438: LD_VAR 0 1
41442: PPUSH
41443: CALL_OW 321
41447: PUSH
41448: LD_INT 2
41450: EQUAL
41451: ST_TO_ADDR
41452: GO 41770
41454: LD_INT 20
41456: DOUBLE
41457: EQUAL
41458: IFTRUE 41462
41460: GO 41487
41462: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
41463: LD_ADDR_VAR 0 3
41467: PUSH
41468: LD_INT 6
41470: PPUSH
41471: LD_VAR 0 1
41475: PPUSH
41476: CALL_OW 321
41480: PUSH
41481: LD_INT 2
41483: EQUAL
41484: ST_TO_ADDR
41485: GO 41770
41487: LD_INT 22
41489: DOUBLE
41490: EQUAL
41491: IFTRUE 41501
41493: LD_INT 36
41495: DOUBLE
41496: EQUAL
41497: IFTRUE 41501
41499: GO 41526
41501: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
41502: LD_ADDR_VAR 0 3
41506: PUSH
41507: LD_INT 15
41509: PPUSH
41510: LD_VAR 0 1
41514: PPUSH
41515: CALL_OW 321
41519: PUSH
41520: LD_INT 2
41522: EQUAL
41523: ST_TO_ADDR
41524: GO 41770
41526: LD_INT 30
41528: DOUBLE
41529: EQUAL
41530: IFTRUE 41534
41532: GO 41559
41534: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
41535: LD_ADDR_VAR 0 3
41539: PUSH
41540: LD_INT 20
41542: PPUSH
41543: LD_VAR 0 1
41547: PPUSH
41548: CALL_OW 321
41552: PUSH
41553: LD_INT 2
41555: EQUAL
41556: ST_TO_ADDR
41557: GO 41770
41559: LD_INT 28
41561: DOUBLE
41562: EQUAL
41563: IFTRUE 41573
41565: LD_INT 21
41567: DOUBLE
41568: EQUAL
41569: IFTRUE 41573
41571: GO 41598
41573: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
41574: LD_ADDR_VAR 0 3
41578: PUSH
41579: LD_INT 21
41581: PPUSH
41582: LD_VAR 0 1
41586: PPUSH
41587: CALL_OW 321
41591: PUSH
41592: LD_INT 2
41594: EQUAL
41595: ST_TO_ADDR
41596: GO 41770
41598: LD_INT 16
41600: DOUBLE
41601: EQUAL
41602: IFTRUE 41606
41604: GO 41631
41606: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
41607: LD_ADDR_VAR 0 3
41611: PUSH
41612: LD_INT 84
41614: PPUSH
41615: LD_VAR 0 1
41619: PPUSH
41620: CALL_OW 321
41624: PUSH
41625: LD_INT 2
41627: EQUAL
41628: ST_TO_ADDR
41629: GO 41770
41631: LD_INT 19
41633: DOUBLE
41634: EQUAL
41635: IFTRUE 41645
41637: LD_INT 23
41639: DOUBLE
41640: EQUAL
41641: IFTRUE 41645
41643: GO 41670
41645: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
41646: LD_ADDR_VAR 0 3
41650: PUSH
41651: LD_INT 83
41653: PPUSH
41654: LD_VAR 0 1
41658: PPUSH
41659: CALL_OW 321
41663: PUSH
41664: LD_INT 2
41666: EQUAL
41667: ST_TO_ADDR
41668: GO 41770
41670: LD_INT 17
41672: DOUBLE
41673: EQUAL
41674: IFTRUE 41678
41676: GO 41703
41678: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
41679: LD_ADDR_VAR 0 3
41683: PUSH
41684: LD_INT 39
41686: PPUSH
41687: LD_VAR 0 1
41691: PPUSH
41692: CALL_OW 321
41696: PUSH
41697: LD_INT 2
41699: EQUAL
41700: ST_TO_ADDR
41701: GO 41770
41703: LD_INT 18
41705: DOUBLE
41706: EQUAL
41707: IFTRUE 41711
41709: GO 41736
41711: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
41712: LD_ADDR_VAR 0 3
41716: PUSH
41717: LD_INT 40
41719: PPUSH
41720: LD_VAR 0 1
41724: PPUSH
41725: CALL_OW 321
41729: PUSH
41730: LD_INT 2
41732: EQUAL
41733: ST_TO_ADDR
41734: GO 41770
41736: LD_INT 27
41738: DOUBLE
41739: EQUAL
41740: IFTRUE 41744
41742: GO 41769
41744: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
41745: LD_ADDR_VAR 0 3
41749: PUSH
41750: LD_INT 35
41752: PPUSH
41753: LD_VAR 0 1
41757: PPUSH
41758: CALL_OW 321
41762: PUSH
41763: LD_INT 2
41765: EQUAL
41766: ST_TO_ADDR
41767: GO 41770
41769: POP
// end ;
41770: LD_VAR 0 3
41774: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
41775: LD_INT 0
41777: PPUSH
41778: PPUSH
41779: PPUSH
41780: PPUSH
41781: PPUSH
41782: PPUSH
41783: PPUSH
41784: PPUSH
41785: PPUSH
41786: PPUSH
41787: PPUSH
// result := false ;
41788: LD_ADDR_VAR 0 6
41792: PUSH
41793: LD_INT 0
41795: ST_TO_ADDR
// if btype = b_depot then
41796: LD_VAR 0 2
41800: PUSH
41801: LD_INT 0
41803: EQUAL
41804: IFFALSE 41816
// begin result := true ;
41806: LD_ADDR_VAR 0 6
41810: PUSH
41811: LD_INT 1
41813: ST_TO_ADDR
// exit ;
41814: GO 42642
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
41816: LD_VAR 0 1
41820: NOT
41821: PUSH
41822: LD_VAR 0 1
41826: PPUSH
41827: CALL_OW 266
41831: PUSH
41832: LD_INT 0
41834: PUSH
41835: LD_INT 1
41837: PUSH
41838: EMPTY
41839: LIST
41840: LIST
41841: IN
41842: NOT
41843: OR
41844: PUSH
41845: LD_VAR 0 2
41849: NOT
41850: OR
41851: PUSH
41852: LD_VAR 0 5
41856: PUSH
41857: LD_INT 0
41859: PUSH
41860: LD_INT 1
41862: PUSH
41863: LD_INT 2
41865: PUSH
41866: LD_INT 3
41868: PUSH
41869: LD_INT 4
41871: PUSH
41872: LD_INT 5
41874: PUSH
41875: EMPTY
41876: LIST
41877: LIST
41878: LIST
41879: LIST
41880: LIST
41881: LIST
41882: IN
41883: NOT
41884: OR
41885: PUSH
41886: LD_VAR 0 3
41890: PPUSH
41891: LD_VAR 0 4
41895: PPUSH
41896: CALL_OW 488
41900: NOT
41901: OR
41902: IFFALSE 41906
// exit ;
41904: GO 42642
// side := GetSide ( depot ) ;
41906: LD_ADDR_VAR 0 9
41910: PUSH
41911: LD_VAR 0 1
41915: PPUSH
41916: CALL_OW 255
41920: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
41921: LD_VAR 0 9
41925: PPUSH
41926: LD_VAR 0 2
41930: PPUSH
41931: CALL 41399 0 2
41935: NOT
41936: IFFALSE 41940
// exit ;
41938: GO 42642
// pom := GetBase ( depot ) ;
41940: LD_ADDR_VAR 0 10
41944: PUSH
41945: LD_VAR 0 1
41949: PPUSH
41950: CALL_OW 274
41954: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
41955: LD_ADDR_VAR 0 11
41959: PUSH
41960: LD_VAR 0 2
41964: PPUSH
41965: LD_VAR 0 1
41969: PPUSH
41970: CALL_OW 248
41974: PPUSH
41975: CALL_OW 450
41979: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
41980: LD_VAR 0 10
41984: PPUSH
41985: LD_INT 1
41987: PPUSH
41988: CALL_OW 275
41992: PUSH
41993: LD_VAR 0 11
41997: PUSH
41998: LD_INT 1
42000: ARRAY
42001: GREATEREQUAL
42002: PUSH
42003: LD_VAR 0 10
42007: PPUSH
42008: LD_INT 2
42010: PPUSH
42011: CALL_OW 275
42015: PUSH
42016: LD_VAR 0 11
42020: PUSH
42021: LD_INT 2
42023: ARRAY
42024: GREATEREQUAL
42025: AND
42026: PUSH
42027: LD_VAR 0 10
42031: PPUSH
42032: LD_INT 3
42034: PPUSH
42035: CALL_OW 275
42039: PUSH
42040: LD_VAR 0 11
42044: PUSH
42045: LD_INT 3
42047: ARRAY
42048: GREATEREQUAL
42049: AND
42050: NOT
42051: IFFALSE 42055
// exit ;
42053: GO 42642
// if GetBType ( depot ) = b_depot then
42055: LD_VAR 0 1
42059: PPUSH
42060: CALL_OW 266
42064: PUSH
42065: LD_INT 0
42067: EQUAL
42068: IFFALSE 42080
// dist := 28 else
42070: LD_ADDR_VAR 0 14
42074: PUSH
42075: LD_INT 28
42077: ST_TO_ADDR
42078: GO 42088
// dist := 36 ;
42080: LD_ADDR_VAR 0 14
42084: PUSH
42085: LD_INT 36
42087: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
42088: LD_VAR 0 1
42092: PPUSH
42093: LD_VAR 0 3
42097: PPUSH
42098: LD_VAR 0 4
42102: PPUSH
42103: CALL_OW 297
42107: PUSH
42108: LD_VAR 0 14
42112: GREATER
42113: IFFALSE 42117
// exit ;
42115: GO 42642
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
42117: LD_ADDR_VAR 0 12
42121: PUSH
42122: LD_VAR 0 2
42126: PPUSH
42127: LD_VAR 0 3
42131: PPUSH
42132: LD_VAR 0 4
42136: PPUSH
42137: LD_VAR 0 5
42141: PPUSH
42142: LD_VAR 0 1
42146: PPUSH
42147: CALL_OW 248
42151: PPUSH
42152: LD_INT 0
42154: PPUSH
42155: CALL 42647 0 6
42159: ST_TO_ADDR
// if not hexes then
42160: LD_VAR 0 12
42164: NOT
42165: IFFALSE 42169
// exit ;
42167: GO 42642
// hex := GetHexInfo ( x , y ) ;
42169: LD_ADDR_VAR 0 15
42173: PUSH
42174: LD_VAR 0 3
42178: PPUSH
42179: LD_VAR 0 4
42183: PPUSH
42184: CALL_OW 546
42188: ST_TO_ADDR
// if hex [ 1 ] then
42189: LD_VAR 0 15
42193: PUSH
42194: LD_INT 1
42196: ARRAY
42197: IFFALSE 42201
// exit ;
42199: GO 42642
// height := hex [ 2 ] ;
42201: LD_ADDR_VAR 0 13
42205: PUSH
42206: LD_VAR 0 15
42210: PUSH
42211: LD_INT 2
42213: ARRAY
42214: ST_TO_ADDR
// for i = 1 to hexes do
42215: LD_ADDR_VAR 0 7
42219: PUSH
42220: DOUBLE
42221: LD_INT 1
42223: DEC
42224: ST_TO_ADDR
42225: LD_VAR 0 12
42229: PUSH
42230: FOR_TO
42231: IFFALSE 42561
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
42233: LD_VAR 0 12
42237: PUSH
42238: LD_VAR 0 7
42242: ARRAY
42243: PUSH
42244: LD_INT 1
42246: ARRAY
42247: PPUSH
42248: LD_VAR 0 12
42252: PUSH
42253: LD_VAR 0 7
42257: ARRAY
42258: PUSH
42259: LD_INT 2
42261: ARRAY
42262: PPUSH
42263: CALL_OW 488
42267: NOT
42268: PUSH
42269: LD_VAR 0 12
42273: PUSH
42274: LD_VAR 0 7
42278: ARRAY
42279: PUSH
42280: LD_INT 1
42282: ARRAY
42283: PPUSH
42284: LD_VAR 0 12
42288: PUSH
42289: LD_VAR 0 7
42293: ARRAY
42294: PUSH
42295: LD_INT 2
42297: ARRAY
42298: PPUSH
42299: CALL_OW 428
42303: PUSH
42304: LD_INT 0
42306: GREATER
42307: OR
42308: PUSH
42309: LD_VAR 0 12
42313: PUSH
42314: LD_VAR 0 7
42318: ARRAY
42319: PUSH
42320: LD_INT 1
42322: ARRAY
42323: PPUSH
42324: LD_VAR 0 12
42328: PUSH
42329: LD_VAR 0 7
42333: ARRAY
42334: PUSH
42335: LD_INT 2
42337: ARRAY
42338: PPUSH
42339: CALL_OW 351
42343: OR
42344: IFFALSE 42350
// exit ;
42346: POP
42347: POP
42348: GO 42642
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42350: LD_ADDR_VAR 0 8
42354: PUSH
42355: LD_VAR 0 12
42359: PUSH
42360: LD_VAR 0 7
42364: ARRAY
42365: PUSH
42366: LD_INT 1
42368: ARRAY
42369: PPUSH
42370: LD_VAR 0 12
42374: PUSH
42375: LD_VAR 0 7
42379: ARRAY
42380: PUSH
42381: LD_INT 2
42383: ARRAY
42384: PPUSH
42385: CALL_OW 546
42389: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
42390: LD_VAR 0 8
42394: PUSH
42395: LD_INT 1
42397: ARRAY
42398: PUSH
42399: LD_VAR 0 8
42403: PUSH
42404: LD_INT 2
42406: ARRAY
42407: PUSH
42408: LD_VAR 0 13
42412: PUSH
42413: LD_INT 2
42415: PLUS
42416: GREATER
42417: OR
42418: PUSH
42419: LD_VAR 0 8
42423: PUSH
42424: LD_INT 2
42426: ARRAY
42427: PUSH
42428: LD_VAR 0 13
42432: PUSH
42433: LD_INT 2
42435: MINUS
42436: LESS
42437: OR
42438: PUSH
42439: LD_VAR 0 8
42443: PUSH
42444: LD_INT 3
42446: ARRAY
42447: PUSH
42448: LD_INT 0
42450: PUSH
42451: LD_INT 8
42453: PUSH
42454: LD_INT 9
42456: PUSH
42457: LD_INT 10
42459: PUSH
42460: LD_INT 11
42462: PUSH
42463: LD_INT 12
42465: PUSH
42466: LD_INT 13
42468: PUSH
42469: LD_INT 16
42471: PUSH
42472: LD_INT 17
42474: PUSH
42475: LD_INT 18
42477: PUSH
42478: LD_INT 19
42480: PUSH
42481: LD_INT 20
42483: PUSH
42484: LD_INT 21
42486: PUSH
42487: EMPTY
42488: LIST
42489: LIST
42490: LIST
42491: LIST
42492: LIST
42493: LIST
42494: LIST
42495: LIST
42496: LIST
42497: LIST
42498: LIST
42499: LIST
42500: LIST
42501: IN
42502: NOT
42503: OR
42504: PUSH
42505: LD_VAR 0 8
42509: PUSH
42510: LD_INT 5
42512: ARRAY
42513: NOT
42514: OR
42515: PUSH
42516: LD_VAR 0 8
42520: PUSH
42521: LD_INT 6
42523: ARRAY
42524: PUSH
42525: LD_INT 1
42527: PUSH
42528: LD_INT 2
42530: PUSH
42531: LD_INT 7
42533: PUSH
42534: LD_INT 9
42536: PUSH
42537: LD_INT 10
42539: PUSH
42540: LD_INT 11
42542: PUSH
42543: EMPTY
42544: LIST
42545: LIST
42546: LIST
42547: LIST
42548: LIST
42549: LIST
42550: IN
42551: NOT
42552: OR
42553: IFFALSE 42559
// exit ;
42555: POP
42556: POP
42557: GO 42642
// end ;
42559: GO 42230
42561: POP
42562: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
42563: LD_VAR 0 9
42567: PPUSH
42568: LD_VAR 0 3
42572: PPUSH
42573: LD_VAR 0 4
42577: PPUSH
42578: LD_INT 20
42580: PPUSH
42581: CALL 34565 0 4
42585: PUSH
42586: LD_INT 4
42588: ARRAY
42589: IFFALSE 42593
// exit ;
42591: GO 42642
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
42593: LD_VAR 0 2
42597: PUSH
42598: LD_INT 29
42600: PUSH
42601: LD_INT 30
42603: PUSH
42604: EMPTY
42605: LIST
42606: LIST
42607: IN
42608: PUSH
42609: LD_VAR 0 3
42613: PPUSH
42614: LD_VAR 0 4
42618: PPUSH
42619: LD_VAR 0 9
42623: PPUSH
42624: CALL_OW 440
42628: NOT
42629: AND
42630: IFFALSE 42634
// exit ;
42632: GO 42642
// result := true ;
42634: LD_ADDR_VAR 0 6
42638: PUSH
42639: LD_INT 1
42641: ST_TO_ADDR
// end ;
42642: LD_VAR 0 6
42646: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
42647: LD_INT 0
42649: PPUSH
42650: PPUSH
42651: PPUSH
42652: PPUSH
42653: PPUSH
42654: PPUSH
42655: PPUSH
42656: PPUSH
42657: PPUSH
42658: PPUSH
42659: PPUSH
42660: PPUSH
42661: PPUSH
42662: PPUSH
42663: PPUSH
42664: PPUSH
42665: PPUSH
42666: PPUSH
42667: PPUSH
42668: PPUSH
42669: PPUSH
42670: PPUSH
42671: PPUSH
42672: PPUSH
42673: PPUSH
42674: PPUSH
42675: PPUSH
42676: PPUSH
42677: PPUSH
42678: PPUSH
42679: PPUSH
42680: PPUSH
42681: PPUSH
42682: PPUSH
42683: PPUSH
42684: PPUSH
42685: PPUSH
42686: PPUSH
42687: PPUSH
42688: PPUSH
42689: PPUSH
42690: PPUSH
42691: PPUSH
42692: PPUSH
42693: PPUSH
42694: PPUSH
42695: PPUSH
42696: PPUSH
42697: PPUSH
42698: PPUSH
42699: PPUSH
42700: PPUSH
42701: PPUSH
42702: PPUSH
42703: PPUSH
42704: PPUSH
42705: PPUSH
42706: PPUSH
// result = [ ] ;
42707: LD_ADDR_VAR 0 7
42711: PUSH
42712: EMPTY
42713: ST_TO_ADDR
// temp_list = [ ] ;
42714: LD_ADDR_VAR 0 9
42718: PUSH
42719: EMPTY
42720: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
42721: LD_VAR 0 4
42725: PUSH
42726: LD_INT 0
42728: PUSH
42729: LD_INT 1
42731: PUSH
42732: LD_INT 2
42734: PUSH
42735: LD_INT 3
42737: PUSH
42738: LD_INT 4
42740: PUSH
42741: LD_INT 5
42743: PUSH
42744: EMPTY
42745: LIST
42746: LIST
42747: LIST
42748: LIST
42749: LIST
42750: LIST
42751: IN
42752: NOT
42753: PUSH
42754: LD_VAR 0 1
42758: PUSH
42759: LD_INT 0
42761: PUSH
42762: LD_INT 1
42764: PUSH
42765: EMPTY
42766: LIST
42767: LIST
42768: IN
42769: PUSH
42770: LD_VAR 0 5
42774: PUSH
42775: LD_INT 1
42777: PUSH
42778: LD_INT 2
42780: PUSH
42781: LD_INT 3
42783: PUSH
42784: EMPTY
42785: LIST
42786: LIST
42787: LIST
42788: IN
42789: NOT
42790: AND
42791: OR
42792: IFFALSE 42796
// exit ;
42794: GO 61187
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
42796: LD_VAR 0 1
42800: PUSH
42801: LD_INT 6
42803: PUSH
42804: LD_INT 7
42806: PUSH
42807: LD_INT 8
42809: PUSH
42810: LD_INT 13
42812: PUSH
42813: LD_INT 12
42815: PUSH
42816: LD_INT 15
42818: PUSH
42819: LD_INT 11
42821: PUSH
42822: LD_INT 14
42824: PUSH
42825: LD_INT 10
42827: PUSH
42828: EMPTY
42829: LIST
42830: LIST
42831: LIST
42832: LIST
42833: LIST
42834: LIST
42835: LIST
42836: LIST
42837: LIST
42838: IN
42839: IFFALSE 42849
// btype = b_lab ;
42841: LD_ADDR_VAR 0 1
42845: PUSH
42846: LD_INT 6
42848: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
42849: LD_VAR 0 6
42853: PUSH
42854: LD_INT 0
42856: PUSH
42857: LD_INT 1
42859: PUSH
42860: LD_INT 2
42862: PUSH
42863: EMPTY
42864: LIST
42865: LIST
42866: LIST
42867: IN
42868: NOT
42869: PUSH
42870: LD_VAR 0 1
42874: PUSH
42875: LD_INT 0
42877: PUSH
42878: LD_INT 1
42880: PUSH
42881: LD_INT 2
42883: PUSH
42884: LD_INT 3
42886: PUSH
42887: LD_INT 6
42889: PUSH
42890: LD_INT 36
42892: PUSH
42893: LD_INT 4
42895: PUSH
42896: LD_INT 5
42898: PUSH
42899: LD_INT 31
42901: PUSH
42902: LD_INT 32
42904: PUSH
42905: LD_INT 33
42907: PUSH
42908: EMPTY
42909: LIST
42910: LIST
42911: LIST
42912: LIST
42913: LIST
42914: LIST
42915: LIST
42916: LIST
42917: LIST
42918: LIST
42919: LIST
42920: IN
42921: NOT
42922: PUSH
42923: LD_VAR 0 6
42927: PUSH
42928: LD_INT 1
42930: EQUAL
42931: AND
42932: OR
42933: PUSH
42934: LD_VAR 0 1
42938: PUSH
42939: LD_INT 2
42941: PUSH
42942: LD_INT 3
42944: PUSH
42945: EMPTY
42946: LIST
42947: LIST
42948: IN
42949: NOT
42950: PUSH
42951: LD_VAR 0 6
42955: PUSH
42956: LD_INT 2
42958: EQUAL
42959: AND
42960: OR
42961: IFFALSE 42971
// mode = 0 ;
42963: LD_ADDR_VAR 0 6
42967: PUSH
42968: LD_INT 0
42970: ST_TO_ADDR
// case mode of 0 :
42971: LD_VAR 0 6
42975: PUSH
42976: LD_INT 0
42978: DOUBLE
42979: EQUAL
42980: IFTRUE 42984
42982: GO 54437
42984: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
42985: LD_ADDR_VAR 0 11
42989: PUSH
42990: LD_INT 0
42992: PUSH
42993: LD_INT 0
42995: PUSH
42996: EMPTY
42997: LIST
42998: LIST
42999: PUSH
43000: LD_INT 0
43002: PUSH
43003: LD_INT 1
43005: NEG
43006: PUSH
43007: EMPTY
43008: LIST
43009: LIST
43010: PUSH
43011: LD_INT 1
43013: PUSH
43014: LD_INT 0
43016: PUSH
43017: EMPTY
43018: LIST
43019: LIST
43020: PUSH
43021: LD_INT 1
43023: PUSH
43024: LD_INT 1
43026: PUSH
43027: EMPTY
43028: LIST
43029: LIST
43030: PUSH
43031: LD_INT 0
43033: PUSH
43034: LD_INT 1
43036: PUSH
43037: EMPTY
43038: LIST
43039: LIST
43040: PUSH
43041: LD_INT 1
43043: NEG
43044: PUSH
43045: LD_INT 0
43047: PUSH
43048: EMPTY
43049: LIST
43050: LIST
43051: PUSH
43052: LD_INT 1
43054: NEG
43055: PUSH
43056: LD_INT 1
43058: NEG
43059: PUSH
43060: EMPTY
43061: LIST
43062: LIST
43063: PUSH
43064: LD_INT 1
43066: NEG
43067: PUSH
43068: LD_INT 2
43070: NEG
43071: PUSH
43072: EMPTY
43073: LIST
43074: LIST
43075: PUSH
43076: LD_INT 0
43078: PUSH
43079: LD_INT 2
43081: NEG
43082: PUSH
43083: EMPTY
43084: LIST
43085: LIST
43086: PUSH
43087: LD_INT 1
43089: PUSH
43090: LD_INT 1
43092: NEG
43093: PUSH
43094: EMPTY
43095: LIST
43096: LIST
43097: PUSH
43098: LD_INT 1
43100: PUSH
43101: LD_INT 2
43103: PUSH
43104: EMPTY
43105: LIST
43106: LIST
43107: PUSH
43108: LD_INT 0
43110: PUSH
43111: LD_INT 2
43113: PUSH
43114: EMPTY
43115: LIST
43116: LIST
43117: PUSH
43118: LD_INT 1
43120: NEG
43121: PUSH
43122: LD_INT 1
43124: PUSH
43125: EMPTY
43126: LIST
43127: LIST
43128: PUSH
43129: LD_INT 1
43131: PUSH
43132: LD_INT 3
43134: PUSH
43135: EMPTY
43136: LIST
43137: LIST
43138: PUSH
43139: LD_INT 0
43141: PUSH
43142: LD_INT 3
43144: PUSH
43145: EMPTY
43146: LIST
43147: LIST
43148: PUSH
43149: LD_INT 1
43151: NEG
43152: PUSH
43153: LD_INT 2
43155: PUSH
43156: EMPTY
43157: LIST
43158: LIST
43159: PUSH
43160: EMPTY
43161: LIST
43162: LIST
43163: LIST
43164: LIST
43165: LIST
43166: LIST
43167: LIST
43168: LIST
43169: LIST
43170: LIST
43171: LIST
43172: LIST
43173: LIST
43174: LIST
43175: LIST
43176: LIST
43177: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43178: LD_ADDR_VAR 0 12
43182: PUSH
43183: LD_INT 0
43185: PUSH
43186: LD_INT 0
43188: PUSH
43189: EMPTY
43190: LIST
43191: LIST
43192: PUSH
43193: LD_INT 0
43195: PUSH
43196: LD_INT 1
43198: NEG
43199: PUSH
43200: EMPTY
43201: LIST
43202: LIST
43203: PUSH
43204: LD_INT 1
43206: PUSH
43207: LD_INT 0
43209: PUSH
43210: EMPTY
43211: LIST
43212: LIST
43213: PUSH
43214: LD_INT 1
43216: PUSH
43217: LD_INT 1
43219: PUSH
43220: EMPTY
43221: LIST
43222: LIST
43223: PUSH
43224: LD_INT 0
43226: PUSH
43227: LD_INT 1
43229: PUSH
43230: EMPTY
43231: LIST
43232: LIST
43233: PUSH
43234: LD_INT 1
43236: NEG
43237: PUSH
43238: LD_INT 0
43240: PUSH
43241: EMPTY
43242: LIST
43243: LIST
43244: PUSH
43245: LD_INT 1
43247: NEG
43248: PUSH
43249: LD_INT 1
43251: NEG
43252: PUSH
43253: EMPTY
43254: LIST
43255: LIST
43256: PUSH
43257: LD_INT 1
43259: PUSH
43260: LD_INT 1
43262: NEG
43263: PUSH
43264: EMPTY
43265: LIST
43266: LIST
43267: PUSH
43268: LD_INT 2
43270: PUSH
43271: LD_INT 0
43273: PUSH
43274: EMPTY
43275: LIST
43276: LIST
43277: PUSH
43278: LD_INT 2
43280: PUSH
43281: LD_INT 1
43283: PUSH
43284: EMPTY
43285: LIST
43286: LIST
43287: PUSH
43288: LD_INT 1
43290: NEG
43291: PUSH
43292: LD_INT 1
43294: PUSH
43295: EMPTY
43296: LIST
43297: LIST
43298: PUSH
43299: LD_INT 2
43301: NEG
43302: PUSH
43303: LD_INT 0
43305: PUSH
43306: EMPTY
43307: LIST
43308: LIST
43309: PUSH
43310: LD_INT 2
43312: NEG
43313: PUSH
43314: LD_INT 1
43316: NEG
43317: PUSH
43318: EMPTY
43319: LIST
43320: LIST
43321: PUSH
43322: LD_INT 2
43324: NEG
43325: PUSH
43326: LD_INT 1
43328: PUSH
43329: EMPTY
43330: LIST
43331: LIST
43332: PUSH
43333: LD_INT 3
43335: NEG
43336: PUSH
43337: LD_INT 0
43339: PUSH
43340: EMPTY
43341: LIST
43342: LIST
43343: PUSH
43344: LD_INT 3
43346: NEG
43347: PUSH
43348: LD_INT 1
43350: NEG
43351: PUSH
43352: EMPTY
43353: LIST
43354: LIST
43355: PUSH
43356: EMPTY
43357: LIST
43358: LIST
43359: LIST
43360: LIST
43361: LIST
43362: LIST
43363: LIST
43364: LIST
43365: LIST
43366: LIST
43367: LIST
43368: LIST
43369: LIST
43370: LIST
43371: LIST
43372: LIST
43373: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43374: LD_ADDR_VAR 0 13
43378: PUSH
43379: LD_INT 0
43381: PUSH
43382: LD_INT 0
43384: PUSH
43385: EMPTY
43386: LIST
43387: LIST
43388: PUSH
43389: LD_INT 0
43391: PUSH
43392: LD_INT 1
43394: NEG
43395: PUSH
43396: EMPTY
43397: LIST
43398: LIST
43399: PUSH
43400: LD_INT 1
43402: PUSH
43403: LD_INT 0
43405: PUSH
43406: EMPTY
43407: LIST
43408: LIST
43409: PUSH
43410: LD_INT 1
43412: PUSH
43413: LD_INT 1
43415: PUSH
43416: EMPTY
43417: LIST
43418: LIST
43419: PUSH
43420: LD_INT 0
43422: PUSH
43423: LD_INT 1
43425: PUSH
43426: EMPTY
43427: LIST
43428: LIST
43429: PUSH
43430: LD_INT 1
43432: NEG
43433: PUSH
43434: LD_INT 0
43436: PUSH
43437: EMPTY
43438: LIST
43439: LIST
43440: PUSH
43441: LD_INT 1
43443: NEG
43444: PUSH
43445: LD_INT 1
43447: NEG
43448: PUSH
43449: EMPTY
43450: LIST
43451: LIST
43452: PUSH
43453: LD_INT 1
43455: NEG
43456: PUSH
43457: LD_INT 2
43459: NEG
43460: PUSH
43461: EMPTY
43462: LIST
43463: LIST
43464: PUSH
43465: LD_INT 2
43467: PUSH
43468: LD_INT 1
43470: PUSH
43471: EMPTY
43472: LIST
43473: LIST
43474: PUSH
43475: LD_INT 2
43477: PUSH
43478: LD_INT 2
43480: PUSH
43481: EMPTY
43482: LIST
43483: LIST
43484: PUSH
43485: LD_INT 1
43487: PUSH
43488: LD_INT 2
43490: PUSH
43491: EMPTY
43492: LIST
43493: LIST
43494: PUSH
43495: LD_INT 2
43497: NEG
43498: PUSH
43499: LD_INT 1
43501: NEG
43502: PUSH
43503: EMPTY
43504: LIST
43505: LIST
43506: PUSH
43507: LD_INT 2
43509: NEG
43510: PUSH
43511: LD_INT 2
43513: NEG
43514: PUSH
43515: EMPTY
43516: LIST
43517: LIST
43518: PUSH
43519: LD_INT 2
43521: NEG
43522: PUSH
43523: LD_INT 3
43525: NEG
43526: PUSH
43527: EMPTY
43528: LIST
43529: LIST
43530: PUSH
43531: LD_INT 3
43533: NEG
43534: PUSH
43535: LD_INT 2
43537: NEG
43538: PUSH
43539: EMPTY
43540: LIST
43541: LIST
43542: PUSH
43543: LD_INT 3
43545: NEG
43546: PUSH
43547: LD_INT 3
43549: NEG
43550: PUSH
43551: EMPTY
43552: LIST
43553: LIST
43554: PUSH
43555: EMPTY
43556: LIST
43557: LIST
43558: LIST
43559: LIST
43560: LIST
43561: LIST
43562: LIST
43563: LIST
43564: LIST
43565: LIST
43566: LIST
43567: LIST
43568: LIST
43569: LIST
43570: LIST
43571: LIST
43572: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
43573: LD_ADDR_VAR 0 14
43577: PUSH
43578: LD_INT 0
43580: PUSH
43581: LD_INT 0
43583: PUSH
43584: EMPTY
43585: LIST
43586: LIST
43587: PUSH
43588: LD_INT 0
43590: PUSH
43591: LD_INT 1
43593: NEG
43594: PUSH
43595: EMPTY
43596: LIST
43597: LIST
43598: PUSH
43599: LD_INT 1
43601: PUSH
43602: LD_INT 0
43604: PUSH
43605: EMPTY
43606: LIST
43607: LIST
43608: PUSH
43609: LD_INT 1
43611: PUSH
43612: LD_INT 1
43614: PUSH
43615: EMPTY
43616: LIST
43617: LIST
43618: PUSH
43619: LD_INT 0
43621: PUSH
43622: LD_INT 1
43624: PUSH
43625: EMPTY
43626: LIST
43627: LIST
43628: PUSH
43629: LD_INT 1
43631: NEG
43632: PUSH
43633: LD_INT 0
43635: PUSH
43636: EMPTY
43637: LIST
43638: LIST
43639: PUSH
43640: LD_INT 1
43642: NEG
43643: PUSH
43644: LD_INT 1
43646: NEG
43647: PUSH
43648: EMPTY
43649: LIST
43650: LIST
43651: PUSH
43652: LD_INT 1
43654: NEG
43655: PUSH
43656: LD_INT 2
43658: NEG
43659: PUSH
43660: EMPTY
43661: LIST
43662: LIST
43663: PUSH
43664: LD_INT 0
43666: PUSH
43667: LD_INT 2
43669: NEG
43670: PUSH
43671: EMPTY
43672: LIST
43673: LIST
43674: PUSH
43675: LD_INT 1
43677: PUSH
43678: LD_INT 1
43680: NEG
43681: PUSH
43682: EMPTY
43683: LIST
43684: LIST
43685: PUSH
43686: LD_INT 1
43688: PUSH
43689: LD_INT 2
43691: PUSH
43692: EMPTY
43693: LIST
43694: LIST
43695: PUSH
43696: LD_INT 0
43698: PUSH
43699: LD_INT 2
43701: PUSH
43702: EMPTY
43703: LIST
43704: LIST
43705: PUSH
43706: LD_INT 1
43708: NEG
43709: PUSH
43710: LD_INT 1
43712: PUSH
43713: EMPTY
43714: LIST
43715: LIST
43716: PUSH
43717: LD_INT 1
43719: NEG
43720: PUSH
43721: LD_INT 3
43723: NEG
43724: PUSH
43725: EMPTY
43726: LIST
43727: LIST
43728: PUSH
43729: LD_INT 0
43731: PUSH
43732: LD_INT 3
43734: NEG
43735: PUSH
43736: EMPTY
43737: LIST
43738: LIST
43739: PUSH
43740: LD_INT 1
43742: PUSH
43743: LD_INT 2
43745: NEG
43746: PUSH
43747: EMPTY
43748: LIST
43749: LIST
43750: PUSH
43751: EMPTY
43752: LIST
43753: LIST
43754: LIST
43755: LIST
43756: LIST
43757: LIST
43758: LIST
43759: LIST
43760: LIST
43761: LIST
43762: LIST
43763: LIST
43764: LIST
43765: LIST
43766: LIST
43767: LIST
43768: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43769: LD_ADDR_VAR 0 15
43773: PUSH
43774: LD_INT 0
43776: PUSH
43777: LD_INT 0
43779: PUSH
43780: EMPTY
43781: LIST
43782: LIST
43783: PUSH
43784: LD_INT 0
43786: PUSH
43787: LD_INT 1
43789: NEG
43790: PUSH
43791: EMPTY
43792: LIST
43793: LIST
43794: PUSH
43795: LD_INT 1
43797: PUSH
43798: LD_INT 0
43800: PUSH
43801: EMPTY
43802: LIST
43803: LIST
43804: PUSH
43805: LD_INT 1
43807: PUSH
43808: LD_INT 1
43810: PUSH
43811: EMPTY
43812: LIST
43813: LIST
43814: PUSH
43815: LD_INT 0
43817: PUSH
43818: LD_INT 1
43820: PUSH
43821: EMPTY
43822: LIST
43823: LIST
43824: PUSH
43825: LD_INT 1
43827: NEG
43828: PUSH
43829: LD_INT 0
43831: PUSH
43832: EMPTY
43833: LIST
43834: LIST
43835: PUSH
43836: LD_INT 1
43838: NEG
43839: PUSH
43840: LD_INT 1
43842: NEG
43843: PUSH
43844: EMPTY
43845: LIST
43846: LIST
43847: PUSH
43848: LD_INT 1
43850: PUSH
43851: LD_INT 1
43853: NEG
43854: PUSH
43855: EMPTY
43856: LIST
43857: LIST
43858: PUSH
43859: LD_INT 2
43861: PUSH
43862: LD_INT 0
43864: PUSH
43865: EMPTY
43866: LIST
43867: LIST
43868: PUSH
43869: LD_INT 2
43871: PUSH
43872: LD_INT 1
43874: PUSH
43875: EMPTY
43876: LIST
43877: LIST
43878: PUSH
43879: LD_INT 1
43881: NEG
43882: PUSH
43883: LD_INT 1
43885: PUSH
43886: EMPTY
43887: LIST
43888: LIST
43889: PUSH
43890: LD_INT 2
43892: NEG
43893: PUSH
43894: LD_INT 0
43896: PUSH
43897: EMPTY
43898: LIST
43899: LIST
43900: PUSH
43901: LD_INT 2
43903: NEG
43904: PUSH
43905: LD_INT 1
43907: NEG
43908: PUSH
43909: EMPTY
43910: LIST
43911: LIST
43912: PUSH
43913: LD_INT 2
43915: PUSH
43916: LD_INT 1
43918: NEG
43919: PUSH
43920: EMPTY
43921: LIST
43922: LIST
43923: PUSH
43924: LD_INT 3
43926: PUSH
43927: LD_INT 0
43929: PUSH
43930: EMPTY
43931: LIST
43932: LIST
43933: PUSH
43934: LD_INT 3
43936: PUSH
43937: LD_INT 1
43939: PUSH
43940: EMPTY
43941: LIST
43942: LIST
43943: PUSH
43944: EMPTY
43945: LIST
43946: LIST
43947: LIST
43948: LIST
43949: LIST
43950: LIST
43951: LIST
43952: LIST
43953: LIST
43954: LIST
43955: LIST
43956: LIST
43957: LIST
43958: LIST
43959: LIST
43960: LIST
43961: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
43962: LD_ADDR_VAR 0 16
43966: PUSH
43967: LD_INT 0
43969: PUSH
43970: LD_INT 0
43972: PUSH
43973: EMPTY
43974: LIST
43975: LIST
43976: PUSH
43977: LD_INT 0
43979: PUSH
43980: LD_INT 1
43982: NEG
43983: PUSH
43984: EMPTY
43985: LIST
43986: LIST
43987: PUSH
43988: LD_INT 1
43990: PUSH
43991: LD_INT 0
43993: PUSH
43994: EMPTY
43995: LIST
43996: LIST
43997: PUSH
43998: LD_INT 1
44000: PUSH
44001: LD_INT 1
44003: PUSH
44004: EMPTY
44005: LIST
44006: LIST
44007: PUSH
44008: LD_INT 0
44010: PUSH
44011: LD_INT 1
44013: PUSH
44014: EMPTY
44015: LIST
44016: LIST
44017: PUSH
44018: LD_INT 1
44020: NEG
44021: PUSH
44022: LD_INT 0
44024: PUSH
44025: EMPTY
44026: LIST
44027: LIST
44028: PUSH
44029: LD_INT 1
44031: NEG
44032: PUSH
44033: LD_INT 1
44035: NEG
44036: PUSH
44037: EMPTY
44038: LIST
44039: LIST
44040: PUSH
44041: LD_INT 1
44043: NEG
44044: PUSH
44045: LD_INT 2
44047: NEG
44048: PUSH
44049: EMPTY
44050: LIST
44051: LIST
44052: PUSH
44053: LD_INT 2
44055: PUSH
44056: LD_INT 1
44058: PUSH
44059: EMPTY
44060: LIST
44061: LIST
44062: PUSH
44063: LD_INT 2
44065: PUSH
44066: LD_INT 2
44068: PUSH
44069: EMPTY
44070: LIST
44071: LIST
44072: PUSH
44073: LD_INT 1
44075: PUSH
44076: LD_INT 2
44078: PUSH
44079: EMPTY
44080: LIST
44081: LIST
44082: PUSH
44083: LD_INT 2
44085: NEG
44086: PUSH
44087: LD_INT 1
44089: NEG
44090: PUSH
44091: EMPTY
44092: LIST
44093: LIST
44094: PUSH
44095: LD_INT 2
44097: NEG
44098: PUSH
44099: LD_INT 2
44101: NEG
44102: PUSH
44103: EMPTY
44104: LIST
44105: LIST
44106: PUSH
44107: LD_INT 3
44109: PUSH
44110: LD_INT 2
44112: PUSH
44113: EMPTY
44114: LIST
44115: LIST
44116: PUSH
44117: LD_INT 3
44119: PUSH
44120: LD_INT 3
44122: PUSH
44123: EMPTY
44124: LIST
44125: LIST
44126: PUSH
44127: LD_INT 2
44129: PUSH
44130: LD_INT 3
44132: PUSH
44133: EMPTY
44134: LIST
44135: LIST
44136: PUSH
44137: EMPTY
44138: LIST
44139: LIST
44140: LIST
44141: LIST
44142: LIST
44143: LIST
44144: LIST
44145: LIST
44146: LIST
44147: LIST
44148: LIST
44149: LIST
44150: LIST
44151: LIST
44152: LIST
44153: LIST
44154: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44155: LD_ADDR_VAR 0 17
44159: PUSH
44160: LD_INT 0
44162: PUSH
44163: LD_INT 0
44165: PUSH
44166: EMPTY
44167: LIST
44168: LIST
44169: PUSH
44170: LD_INT 0
44172: PUSH
44173: LD_INT 1
44175: NEG
44176: PUSH
44177: EMPTY
44178: LIST
44179: LIST
44180: PUSH
44181: LD_INT 1
44183: PUSH
44184: LD_INT 0
44186: PUSH
44187: EMPTY
44188: LIST
44189: LIST
44190: PUSH
44191: LD_INT 1
44193: PUSH
44194: LD_INT 1
44196: PUSH
44197: EMPTY
44198: LIST
44199: LIST
44200: PUSH
44201: LD_INT 0
44203: PUSH
44204: LD_INT 1
44206: PUSH
44207: EMPTY
44208: LIST
44209: LIST
44210: PUSH
44211: LD_INT 1
44213: NEG
44214: PUSH
44215: LD_INT 0
44217: PUSH
44218: EMPTY
44219: LIST
44220: LIST
44221: PUSH
44222: LD_INT 1
44224: NEG
44225: PUSH
44226: LD_INT 1
44228: NEG
44229: PUSH
44230: EMPTY
44231: LIST
44232: LIST
44233: PUSH
44234: LD_INT 1
44236: NEG
44237: PUSH
44238: LD_INT 2
44240: NEG
44241: PUSH
44242: EMPTY
44243: LIST
44244: LIST
44245: PUSH
44246: LD_INT 0
44248: PUSH
44249: LD_INT 2
44251: NEG
44252: PUSH
44253: EMPTY
44254: LIST
44255: LIST
44256: PUSH
44257: LD_INT 1
44259: PUSH
44260: LD_INT 1
44262: NEG
44263: PUSH
44264: EMPTY
44265: LIST
44266: LIST
44267: PUSH
44268: LD_INT 2
44270: PUSH
44271: LD_INT 0
44273: PUSH
44274: EMPTY
44275: LIST
44276: LIST
44277: PUSH
44278: LD_INT 2
44280: PUSH
44281: LD_INT 1
44283: PUSH
44284: EMPTY
44285: LIST
44286: LIST
44287: PUSH
44288: LD_INT 2
44290: PUSH
44291: LD_INT 2
44293: PUSH
44294: EMPTY
44295: LIST
44296: LIST
44297: PUSH
44298: LD_INT 1
44300: PUSH
44301: LD_INT 2
44303: PUSH
44304: EMPTY
44305: LIST
44306: LIST
44307: PUSH
44308: LD_INT 0
44310: PUSH
44311: LD_INT 2
44313: PUSH
44314: EMPTY
44315: LIST
44316: LIST
44317: PUSH
44318: LD_INT 1
44320: NEG
44321: PUSH
44322: LD_INT 1
44324: PUSH
44325: EMPTY
44326: LIST
44327: LIST
44328: PUSH
44329: LD_INT 2
44331: NEG
44332: PUSH
44333: LD_INT 0
44335: PUSH
44336: EMPTY
44337: LIST
44338: LIST
44339: PUSH
44340: LD_INT 2
44342: NEG
44343: PUSH
44344: LD_INT 1
44346: NEG
44347: PUSH
44348: EMPTY
44349: LIST
44350: LIST
44351: PUSH
44352: LD_INT 2
44354: NEG
44355: PUSH
44356: LD_INT 2
44358: NEG
44359: PUSH
44360: EMPTY
44361: LIST
44362: LIST
44363: PUSH
44364: EMPTY
44365: LIST
44366: LIST
44367: LIST
44368: LIST
44369: LIST
44370: LIST
44371: LIST
44372: LIST
44373: LIST
44374: LIST
44375: LIST
44376: LIST
44377: LIST
44378: LIST
44379: LIST
44380: LIST
44381: LIST
44382: LIST
44383: LIST
44384: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44385: LD_ADDR_VAR 0 18
44389: PUSH
44390: LD_INT 0
44392: PUSH
44393: LD_INT 0
44395: PUSH
44396: EMPTY
44397: LIST
44398: LIST
44399: PUSH
44400: LD_INT 0
44402: PUSH
44403: LD_INT 1
44405: NEG
44406: PUSH
44407: EMPTY
44408: LIST
44409: LIST
44410: PUSH
44411: LD_INT 1
44413: PUSH
44414: LD_INT 0
44416: PUSH
44417: EMPTY
44418: LIST
44419: LIST
44420: PUSH
44421: LD_INT 1
44423: PUSH
44424: LD_INT 1
44426: PUSH
44427: EMPTY
44428: LIST
44429: LIST
44430: PUSH
44431: LD_INT 0
44433: PUSH
44434: LD_INT 1
44436: PUSH
44437: EMPTY
44438: LIST
44439: LIST
44440: PUSH
44441: LD_INT 1
44443: NEG
44444: PUSH
44445: LD_INT 0
44447: PUSH
44448: EMPTY
44449: LIST
44450: LIST
44451: PUSH
44452: LD_INT 1
44454: NEG
44455: PUSH
44456: LD_INT 1
44458: NEG
44459: PUSH
44460: EMPTY
44461: LIST
44462: LIST
44463: PUSH
44464: LD_INT 1
44466: NEG
44467: PUSH
44468: LD_INT 2
44470: NEG
44471: PUSH
44472: EMPTY
44473: LIST
44474: LIST
44475: PUSH
44476: LD_INT 0
44478: PUSH
44479: LD_INT 2
44481: NEG
44482: PUSH
44483: EMPTY
44484: LIST
44485: LIST
44486: PUSH
44487: LD_INT 1
44489: PUSH
44490: LD_INT 1
44492: NEG
44493: PUSH
44494: EMPTY
44495: LIST
44496: LIST
44497: PUSH
44498: LD_INT 2
44500: PUSH
44501: LD_INT 0
44503: PUSH
44504: EMPTY
44505: LIST
44506: LIST
44507: PUSH
44508: LD_INT 2
44510: PUSH
44511: LD_INT 1
44513: PUSH
44514: EMPTY
44515: LIST
44516: LIST
44517: PUSH
44518: LD_INT 2
44520: PUSH
44521: LD_INT 2
44523: PUSH
44524: EMPTY
44525: LIST
44526: LIST
44527: PUSH
44528: LD_INT 1
44530: PUSH
44531: LD_INT 2
44533: PUSH
44534: EMPTY
44535: LIST
44536: LIST
44537: PUSH
44538: LD_INT 0
44540: PUSH
44541: LD_INT 2
44543: PUSH
44544: EMPTY
44545: LIST
44546: LIST
44547: PUSH
44548: LD_INT 1
44550: NEG
44551: PUSH
44552: LD_INT 1
44554: PUSH
44555: EMPTY
44556: LIST
44557: LIST
44558: PUSH
44559: LD_INT 2
44561: NEG
44562: PUSH
44563: LD_INT 0
44565: PUSH
44566: EMPTY
44567: LIST
44568: LIST
44569: PUSH
44570: LD_INT 2
44572: NEG
44573: PUSH
44574: LD_INT 1
44576: NEG
44577: PUSH
44578: EMPTY
44579: LIST
44580: LIST
44581: PUSH
44582: LD_INT 2
44584: NEG
44585: PUSH
44586: LD_INT 2
44588: NEG
44589: PUSH
44590: EMPTY
44591: LIST
44592: LIST
44593: PUSH
44594: EMPTY
44595: LIST
44596: LIST
44597: LIST
44598: LIST
44599: LIST
44600: LIST
44601: LIST
44602: LIST
44603: LIST
44604: LIST
44605: LIST
44606: LIST
44607: LIST
44608: LIST
44609: LIST
44610: LIST
44611: LIST
44612: LIST
44613: LIST
44614: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44615: LD_ADDR_VAR 0 19
44619: PUSH
44620: LD_INT 0
44622: PUSH
44623: LD_INT 0
44625: PUSH
44626: EMPTY
44627: LIST
44628: LIST
44629: PUSH
44630: LD_INT 0
44632: PUSH
44633: LD_INT 1
44635: NEG
44636: PUSH
44637: EMPTY
44638: LIST
44639: LIST
44640: PUSH
44641: LD_INT 1
44643: PUSH
44644: LD_INT 0
44646: PUSH
44647: EMPTY
44648: LIST
44649: LIST
44650: PUSH
44651: LD_INT 1
44653: PUSH
44654: LD_INT 1
44656: PUSH
44657: EMPTY
44658: LIST
44659: LIST
44660: PUSH
44661: LD_INT 0
44663: PUSH
44664: LD_INT 1
44666: PUSH
44667: EMPTY
44668: LIST
44669: LIST
44670: PUSH
44671: LD_INT 1
44673: NEG
44674: PUSH
44675: LD_INT 0
44677: PUSH
44678: EMPTY
44679: LIST
44680: LIST
44681: PUSH
44682: LD_INT 1
44684: NEG
44685: PUSH
44686: LD_INT 1
44688: NEG
44689: PUSH
44690: EMPTY
44691: LIST
44692: LIST
44693: PUSH
44694: LD_INT 1
44696: NEG
44697: PUSH
44698: LD_INT 2
44700: NEG
44701: PUSH
44702: EMPTY
44703: LIST
44704: LIST
44705: PUSH
44706: LD_INT 0
44708: PUSH
44709: LD_INT 2
44711: NEG
44712: PUSH
44713: EMPTY
44714: LIST
44715: LIST
44716: PUSH
44717: LD_INT 1
44719: PUSH
44720: LD_INT 1
44722: NEG
44723: PUSH
44724: EMPTY
44725: LIST
44726: LIST
44727: PUSH
44728: LD_INT 2
44730: PUSH
44731: LD_INT 0
44733: PUSH
44734: EMPTY
44735: LIST
44736: LIST
44737: PUSH
44738: LD_INT 2
44740: PUSH
44741: LD_INT 1
44743: PUSH
44744: EMPTY
44745: LIST
44746: LIST
44747: PUSH
44748: LD_INT 2
44750: PUSH
44751: LD_INT 2
44753: PUSH
44754: EMPTY
44755: LIST
44756: LIST
44757: PUSH
44758: LD_INT 1
44760: PUSH
44761: LD_INT 2
44763: PUSH
44764: EMPTY
44765: LIST
44766: LIST
44767: PUSH
44768: LD_INT 0
44770: PUSH
44771: LD_INT 2
44773: PUSH
44774: EMPTY
44775: LIST
44776: LIST
44777: PUSH
44778: LD_INT 1
44780: NEG
44781: PUSH
44782: LD_INT 1
44784: PUSH
44785: EMPTY
44786: LIST
44787: LIST
44788: PUSH
44789: LD_INT 2
44791: NEG
44792: PUSH
44793: LD_INT 0
44795: PUSH
44796: EMPTY
44797: LIST
44798: LIST
44799: PUSH
44800: LD_INT 2
44802: NEG
44803: PUSH
44804: LD_INT 1
44806: NEG
44807: PUSH
44808: EMPTY
44809: LIST
44810: LIST
44811: PUSH
44812: LD_INT 2
44814: NEG
44815: PUSH
44816: LD_INT 2
44818: NEG
44819: PUSH
44820: EMPTY
44821: LIST
44822: LIST
44823: PUSH
44824: EMPTY
44825: LIST
44826: LIST
44827: LIST
44828: LIST
44829: LIST
44830: LIST
44831: LIST
44832: LIST
44833: LIST
44834: LIST
44835: LIST
44836: LIST
44837: LIST
44838: LIST
44839: LIST
44840: LIST
44841: LIST
44842: LIST
44843: LIST
44844: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44845: LD_ADDR_VAR 0 20
44849: PUSH
44850: LD_INT 0
44852: PUSH
44853: LD_INT 0
44855: PUSH
44856: EMPTY
44857: LIST
44858: LIST
44859: PUSH
44860: LD_INT 0
44862: PUSH
44863: LD_INT 1
44865: NEG
44866: PUSH
44867: EMPTY
44868: LIST
44869: LIST
44870: PUSH
44871: LD_INT 1
44873: PUSH
44874: LD_INT 0
44876: PUSH
44877: EMPTY
44878: LIST
44879: LIST
44880: PUSH
44881: LD_INT 1
44883: PUSH
44884: LD_INT 1
44886: PUSH
44887: EMPTY
44888: LIST
44889: LIST
44890: PUSH
44891: LD_INT 0
44893: PUSH
44894: LD_INT 1
44896: PUSH
44897: EMPTY
44898: LIST
44899: LIST
44900: PUSH
44901: LD_INT 1
44903: NEG
44904: PUSH
44905: LD_INT 0
44907: PUSH
44908: EMPTY
44909: LIST
44910: LIST
44911: PUSH
44912: LD_INT 1
44914: NEG
44915: PUSH
44916: LD_INT 1
44918: NEG
44919: PUSH
44920: EMPTY
44921: LIST
44922: LIST
44923: PUSH
44924: LD_INT 1
44926: NEG
44927: PUSH
44928: LD_INT 2
44930: NEG
44931: PUSH
44932: EMPTY
44933: LIST
44934: LIST
44935: PUSH
44936: LD_INT 0
44938: PUSH
44939: LD_INT 2
44941: NEG
44942: PUSH
44943: EMPTY
44944: LIST
44945: LIST
44946: PUSH
44947: LD_INT 1
44949: PUSH
44950: LD_INT 1
44952: NEG
44953: PUSH
44954: EMPTY
44955: LIST
44956: LIST
44957: PUSH
44958: LD_INT 2
44960: PUSH
44961: LD_INT 0
44963: PUSH
44964: EMPTY
44965: LIST
44966: LIST
44967: PUSH
44968: LD_INT 2
44970: PUSH
44971: LD_INT 1
44973: PUSH
44974: EMPTY
44975: LIST
44976: LIST
44977: PUSH
44978: LD_INT 2
44980: PUSH
44981: LD_INT 2
44983: PUSH
44984: EMPTY
44985: LIST
44986: LIST
44987: PUSH
44988: LD_INT 1
44990: PUSH
44991: LD_INT 2
44993: PUSH
44994: EMPTY
44995: LIST
44996: LIST
44997: PUSH
44998: LD_INT 0
45000: PUSH
45001: LD_INT 2
45003: PUSH
45004: EMPTY
45005: LIST
45006: LIST
45007: PUSH
45008: LD_INT 1
45010: NEG
45011: PUSH
45012: LD_INT 1
45014: PUSH
45015: EMPTY
45016: LIST
45017: LIST
45018: PUSH
45019: LD_INT 2
45021: NEG
45022: PUSH
45023: LD_INT 0
45025: PUSH
45026: EMPTY
45027: LIST
45028: LIST
45029: PUSH
45030: LD_INT 2
45032: NEG
45033: PUSH
45034: LD_INT 1
45036: NEG
45037: PUSH
45038: EMPTY
45039: LIST
45040: LIST
45041: PUSH
45042: LD_INT 2
45044: NEG
45045: PUSH
45046: LD_INT 2
45048: NEG
45049: PUSH
45050: EMPTY
45051: LIST
45052: LIST
45053: PUSH
45054: EMPTY
45055: LIST
45056: LIST
45057: LIST
45058: LIST
45059: LIST
45060: LIST
45061: LIST
45062: LIST
45063: LIST
45064: LIST
45065: LIST
45066: LIST
45067: LIST
45068: LIST
45069: LIST
45070: LIST
45071: LIST
45072: LIST
45073: LIST
45074: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45075: LD_ADDR_VAR 0 21
45079: PUSH
45080: LD_INT 0
45082: PUSH
45083: LD_INT 0
45085: PUSH
45086: EMPTY
45087: LIST
45088: LIST
45089: PUSH
45090: LD_INT 0
45092: PUSH
45093: LD_INT 1
45095: NEG
45096: PUSH
45097: EMPTY
45098: LIST
45099: LIST
45100: PUSH
45101: LD_INT 1
45103: PUSH
45104: LD_INT 0
45106: PUSH
45107: EMPTY
45108: LIST
45109: LIST
45110: PUSH
45111: LD_INT 1
45113: PUSH
45114: LD_INT 1
45116: PUSH
45117: EMPTY
45118: LIST
45119: LIST
45120: PUSH
45121: LD_INT 0
45123: PUSH
45124: LD_INT 1
45126: PUSH
45127: EMPTY
45128: LIST
45129: LIST
45130: PUSH
45131: LD_INT 1
45133: NEG
45134: PUSH
45135: LD_INT 0
45137: PUSH
45138: EMPTY
45139: LIST
45140: LIST
45141: PUSH
45142: LD_INT 1
45144: NEG
45145: PUSH
45146: LD_INT 1
45148: NEG
45149: PUSH
45150: EMPTY
45151: LIST
45152: LIST
45153: PUSH
45154: LD_INT 1
45156: NEG
45157: PUSH
45158: LD_INT 2
45160: NEG
45161: PUSH
45162: EMPTY
45163: LIST
45164: LIST
45165: PUSH
45166: LD_INT 0
45168: PUSH
45169: LD_INT 2
45171: NEG
45172: PUSH
45173: EMPTY
45174: LIST
45175: LIST
45176: PUSH
45177: LD_INT 1
45179: PUSH
45180: LD_INT 1
45182: NEG
45183: PUSH
45184: EMPTY
45185: LIST
45186: LIST
45187: PUSH
45188: LD_INT 2
45190: PUSH
45191: LD_INT 0
45193: PUSH
45194: EMPTY
45195: LIST
45196: LIST
45197: PUSH
45198: LD_INT 2
45200: PUSH
45201: LD_INT 1
45203: PUSH
45204: EMPTY
45205: LIST
45206: LIST
45207: PUSH
45208: LD_INT 2
45210: PUSH
45211: LD_INT 2
45213: PUSH
45214: EMPTY
45215: LIST
45216: LIST
45217: PUSH
45218: LD_INT 1
45220: PUSH
45221: LD_INT 2
45223: PUSH
45224: EMPTY
45225: LIST
45226: LIST
45227: PUSH
45228: LD_INT 0
45230: PUSH
45231: LD_INT 2
45233: PUSH
45234: EMPTY
45235: LIST
45236: LIST
45237: PUSH
45238: LD_INT 1
45240: NEG
45241: PUSH
45242: LD_INT 1
45244: PUSH
45245: EMPTY
45246: LIST
45247: LIST
45248: PUSH
45249: LD_INT 2
45251: NEG
45252: PUSH
45253: LD_INT 0
45255: PUSH
45256: EMPTY
45257: LIST
45258: LIST
45259: PUSH
45260: LD_INT 2
45262: NEG
45263: PUSH
45264: LD_INT 1
45266: NEG
45267: PUSH
45268: EMPTY
45269: LIST
45270: LIST
45271: PUSH
45272: LD_INT 2
45274: NEG
45275: PUSH
45276: LD_INT 2
45278: NEG
45279: PUSH
45280: EMPTY
45281: LIST
45282: LIST
45283: PUSH
45284: EMPTY
45285: LIST
45286: LIST
45287: LIST
45288: LIST
45289: LIST
45290: LIST
45291: LIST
45292: LIST
45293: LIST
45294: LIST
45295: LIST
45296: LIST
45297: LIST
45298: LIST
45299: LIST
45300: LIST
45301: LIST
45302: LIST
45303: LIST
45304: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45305: LD_ADDR_VAR 0 22
45309: PUSH
45310: LD_INT 0
45312: PUSH
45313: LD_INT 0
45315: PUSH
45316: EMPTY
45317: LIST
45318: LIST
45319: PUSH
45320: LD_INT 0
45322: PUSH
45323: LD_INT 1
45325: NEG
45326: PUSH
45327: EMPTY
45328: LIST
45329: LIST
45330: PUSH
45331: LD_INT 1
45333: PUSH
45334: LD_INT 0
45336: PUSH
45337: EMPTY
45338: LIST
45339: LIST
45340: PUSH
45341: LD_INT 1
45343: PUSH
45344: LD_INT 1
45346: PUSH
45347: EMPTY
45348: LIST
45349: LIST
45350: PUSH
45351: LD_INT 0
45353: PUSH
45354: LD_INT 1
45356: PUSH
45357: EMPTY
45358: LIST
45359: LIST
45360: PUSH
45361: LD_INT 1
45363: NEG
45364: PUSH
45365: LD_INT 0
45367: PUSH
45368: EMPTY
45369: LIST
45370: LIST
45371: PUSH
45372: LD_INT 1
45374: NEG
45375: PUSH
45376: LD_INT 1
45378: NEG
45379: PUSH
45380: EMPTY
45381: LIST
45382: LIST
45383: PUSH
45384: LD_INT 1
45386: NEG
45387: PUSH
45388: LD_INT 2
45390: NEG
45391: PUSH
45392: EMPTY
45393: LIST
45394: LIST
45395: PUSH
45396: LD_INT 0
45398: PUSH
45399: LD_INT 2
45401: NEG
45402: PUSH
45403: EMPTY
45404: LIST
45405: LIST
45406: PUSH
45407: LD_INT 1
45409: PUSH
45410: LD_INT 1
45412: NEG
45413: PUSH
45414: EMPTY
45415: LIST
45416: LIST
45417: PUSH
45418: LD_INT 2
45420: PUSH
45421: LD_INT 0
45423: PUSH
45424: EMPTY
45425: LIST
45426: LIST
45427: PUSH
45428: LD_INT 2
45430: PUSH
45431: LD_INT 1
45433: PUSH
45434: EMPTY
45435: LIST
45436: LIST
45437: PUSH
45438: LD_INT 2
45440: PUSH
45441: LD_INT 2
45443: PUSH
45444: EMPTY
45445: LIST
45446: LIST
45447: PUSH
45448: LD_INT 1
45450: PUSH
45451: LD_INT 2
45453: PUSH
45454: EMPTY
45455: LIST
45456: LIST
45457: PUSH
45458: LD_INT 0
45460: PUSH
45461: LD_INT 2
45463: PUSH
45464: EMPTY
45465: LIST
45466: LIST
45467: PUSH
45468: LD_INT 1
45470: NEG
45471: PUSH
45472: LD_INT 1
45474: PUSH
45475: EMPTY
45476: LIST
45477: LIST
45478: PUSH
45479: LD_INT 2
45481: NEG
45482: PUSH
45483: LD_INT 0
45485: PUSH
45486: EMPTY
45487: LIST
45488: LIST
45489: PUSH
45490: LD_INT 2
45492: NEG
45493: PUSH
45494: LD_INT 1
45496: NEG
45497: PUSH
45498: EMPTY
45499: LIST
45500: LIST
45501: PUSH
45502: LD_INT 2
45504: NEG
45505: PUSH
45506: LD_INT 2
45508: NEG
45509: PUSH
45510: EMPTY
45511: LIST
45512: LIST
45513: PUSH
45514: EMPTY
45515: LIST
45516: LIST
45517: LIST
45518: LIST
45519: LIST
45520: LIST
45521: LIST
45522: LIST
45523: LIST
45524: LIST
45525: LIST
45526: LIST
45527: LIST
45528: LIST
45529: LIST
45530: LIST
45531: LIST
45532: LIST
45533: LIST
45534: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
45535: LD_ADDR_VAR 0 23
45539: PUSH
45540: LD_INT 0
45542: PUSH
45543: LD_INT 0
45545: PUSH
45546: EMPTY
45547: LIST
45548: LIST
45549: PUSH
45550: LD_INT 0
45552: PUSH
45553: LD_INT 1
45555: NEG
45556: PUSH
45557: EMPTY
45558: LIST
45559: LIST
45560: PUSH
45561: LD_INT 1
45563: PUSH
45564: LD_INT 0
45566: PUSH
45567: EMPTY
45568: LIST
45569: LIST
45570: PUSH
45571: LD_INT 1
45573: PUSH
45574: LD_INT 1
45576: PUSH
45577: EMPTY
45578: LIST
45579: LIST
45580: PUSH
45581: LD_INT 0
45583: PUSH
45584: LD_INT 1
45586: PUSH
45587: EMPTY
45588: LIST
45589: LIST
45590: PUSH
45591: LD_INT 1
45593: NEG
45594: PUSH
45595: LD_INT 0
45597: PUSH
45598: EMPTY
45599: LIST
45600: LIST
45601: PUSH
45602: LD_INT 1
45604: NEG
45605: PUSH
45606: LD_INT 1
45608: NEG
45609: PUSH
45610: EMPTY
45611: LIST
45612: LIST
45613: PUSH
45614: LD_INT 1
45616: NEG
45617: PUSH
45618: LD_INT 2
45620: NEG
45621: PUSH
45622: EMPTY
45623: LIST
45624: LIST
45625: PUSH
45626: LD_INT 0
45628: PUSH
45629: LD_INT 2
45631: NEG
45632: PUSH
45633: EMPTY
45634: LIST
45635: LIST
45636: PUSH
45637: LD_INT 1
45639: PUSH
45640: LD_INT 1
45642: NEG
45643: PUSH
45644: EMPTY
45645: LIST
45646: LIST
45647: PUSH
45648: LD_INT 2
45650: PUSH
45651: LD_INT 0
45653: PUSH
45654: EMPTY
45655: LIST
45656: LIST
45657: PUSH
45658: LD_INT 2
45660: PUSH
45661: LD_INT 1
45663: PUSH
45664: EMPTY
45665: LIST
45666: LIST
45667: PUSH
45668: LD_INT 2
45670: PUSH
45671: LD_INT 2
45673: PUSH
45674: EMPTY
45675: LIST
45676: LIST
45677: PUSH
45678: LD_INT 1
45680: PUSH
45681: LD_INT 2
45683: PUSH
45684: EMPTY
45685: LIST
45686: LIST
45687: PUSH
45688: LD_INT 0
45690: PUSH
45691: LD_INT 2
45693: PUSH
45694: EMPTY
45695: LIST
45696: LIST
45697: PUSH
45698: LD_INT 1
45700: NEG
45701: PUSH
45702: LD_INT 1
45704: PUSH
45705: EMPTY
45706: LIST
45707: LIST
45708: PUSH
45709: LD_INT 2
45711: NEG
45712: PUSH
45713: LD_INT 0
45715: PUSH
45716: EMPTY
45717: LIST
45718: LIST
45719: PUSH
45720: LD_INT 2
45722: NEG
45723: PUSH
45724: LD_INT 1
45726: NEG
45727: PUSH
45728: EMPTY
45729: LIST
45730: LIST
45731: PUSH
45732: LD_INT 2
45734: NEG
45735: PUSH
45736: LD_INT 2
45738: NEG
45739: PUSH
45740: EMPTY
45741: LIST
45742: LIST
45743: PUSH
45744: LD_INT 2
45746: NEG
45747: PUSH
45748: LD_INT 3
45750: NEG
45751: PUSH
45752: EMPTY
45753: LIST
45754: LIST
45755: PUSH
45756: LD_INT 1
45758: NEG
45759: PUSH
45760: LD_INT 3
45762: NEG
45763: PUSH
45764: EMPTY
45765: LIST
45766: LIST
45767: PUSH
45768: LD_INT 1
45770: PUSH
45771: LD_INT 2
45773: NEG
45774: PUSH
45775: EMPTY
45776: LIST
45777: LIST
45778: PUSH
45779: LD_INT 2
45781: PUSH
45782: LD_INT 1
45784: NEG
45785: PUSH
45786: EMPTY
45787: LIST
45788: LIST
45789: PUSH
45790: EMPTY
45791: LIST
45792: LIST
45793: LIST
45794: LIST
45795: LIST
45796: LIST
45797: LIST
45798: LIST
45799: LIST
45800: LIST
45801: LIST
45802: LIST
45803: LIST
45804: LIST
45805: LIST
45806: LIST
45807: LIST
45808: LIST
45809: LIST
45810: LIST
45811: LIST
45812: LIST
45813: LIST
45814: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
45815: LD_ADDR_VAR 0 24
45819: PUSH
45820: LD_INT 0
45822: PUSH
45823: LD_INT 0
45825: PUSH
45826: EMPTY
45827: LIST
45828: LIST
45829: PUSH
45830: LD_INT 0
45832: PUSH
45833: LD_INT 1
45835: NEG
45836: PUSH
45837: EMPTY
45838: LIST
45839: LIST
45840: PUSH
45841: LD_INT 1
45843: PUSH
45844: LD_INT 0
45846: PUSH
45847: EMPTY
45848: LIST
45849: LIST
45850: PUSH
45851: LD_INT 1
45853: PUSH
45854: LD_INT 1
45856: PUSH
45857: EMPTY
45858: LIST
45859: LIST
45860: PUSH
45861: LD_INT 0
45863: PUSH
45864: LD_INT 1
45866: PUSH
45867: EMPTY
45868: LIST
45869: LIST
45870: PUSH
45871: LD_INT 1
45873: NEG
45874: PUSH
45875: LD_INT 0
45877: PUSH
45878: EMPTY
45879: LIST
45880: LIST
45881: PUSH
45882: LD_INT 1
45884: NEG
45885: PUSH
45886: LD_INT 1
45888: NEG
45889: PUSH
45890: EMPTY
45891: LIST
45892: LIST
45893: PUSH
45894: LD_INT 1
45896: NEG
45897: PUSH
45898: LD_INT 2
45900: NEG
45901: PUSH
45902: EMPTY
45903: LIST
45904: LIST
45905: PUSH
45906: LD_INT 0
45908: PUSH
45909: LD_INT 2
45911: NEG
45912: PUSH
45913: EMPTY
45914: LIST
45915: LIST
45916: PUSH
45917: LD_INT 1
45919: PUSH
45920: LD_INT 1
45922: NEG
45923: PUSH
45924: EMPTY
45925: LIST
45926: LIST
45927: PUSH
45928: LD_INT 2
45930: PUSH
45931: LD_INT 0
45933: PUSH
45934: EMPTY
45935: LIST
45936: LIST
45937: PUSH
45938: LD_INT 2
45940: PUSH
45941: LD_INT 1
45943: PUSH
45944: EMPTY
45945: LIST
45946: LIST
45947: PUSH
45948: LD_INT 2
45950: PUSH
45951: LD_INT 2
45953: PUSH
45954: EMPTY
45955: LIST
45956: LIST
45957: PUSH
45958: LD_INT 1
45960: PUSH
45961: LD_INT 2
45963: PUSH
45964: EMPTY
45965: LIST
45966: LIST
45967: PUSH
45968: LD_INT 0
45970: PUSH
45971: LD_INT 2
45973: PUSH
45974: EMPTY
45975: LIST
45976: LIST
45977: PUSH
45978: LD_INT 1
45980: NEG
45981: PUSH
45982: LD_INT 1
45984: PUSH
45985: EMPTY
45986: LIST
45987: LIST
45988: PUSH
45989: LD_INT 2
45991: NEG
45992: PUSH
45993: LD_INT 0
45995: PUSH
45996: EMPTY
45997: LIST
45998: LIST
45999: PUSH
46000: LD_INT 2
46002: NEG
46003: PUSH
46004: LD_INT 1
46006: NEG
46007: PUSH
46008: EMPTY
46009: LIST
46010: LIST
46011: PUSH
46012: LD_INT 2
46014: NEG
46015: PUSH
46016: LD_INT 2
46018: NEG
46019: PUSH
46020: EMPTY
46021: LIST
46022: LIST
46023: PUSH
46024: LD_INT 1
46026: PUSH
46027: LD_INT 2
46029: NEG
46030: PUSH
46031: EMPTY
46032: LIST
46033: LIST
46034: PUSH
46035: LD_INT 2
46037: PUSH
46038: LD_INT 1
46040: NEG
46041: PUSH
46042: EMPTY
46043: LIST
46044: LIST
46045: PUSH
46046: LD_INT 3
46048: PUSH
46049: LD_INT 1
46051: PUSH
46052: EMPTY
46053: LIST
46054: LIST
46055: PUSH
46056: LD_INT 3
46058: PUSH
46059: LD_INT 2
46061: PUSH
46062: EMPTY
46063: LIST
46064: LIST
46065: PUSH
46066: EMPTY
46067: LIST
46068: LIST
46069: LIST
46070: LIST
46071: LIST
46072: LIST
46073: LIST
46074: LIST
46075: LIST
46076: LIST
46077: LIST
46078: LIST
46079: LIST
46080: LIST
46081: LIST
46082: LIST
46083: LIST
46084: LIST
46085: LIST
46086: LIST
46087: LIST
46088: LIST
46089: LIST
46090: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
46091: LD_ADDR_VAR 0 25
46095: PUSH
46096: LD_INT 0
46098: PUSH
46099: LD_INT 0
46101: PUSH
46102: EMPTY
46103: LIST
46104: LIST
46105: PUSH
46106: LD_INT 0
46108: PUSH
46109: LD_INT 1
46111: NEG
46112: PUSH
46113: EMPTY
46114: LIST
46115: LIST
46116: PUSH
46117: LD_INT 1
46119: PUSH
46120: LD_INT 0
46122: PUSH
46123: EMPTY
46124: LIST
46125: LIST
46126: PUSH
46127: LD_INT 1
46129: PUSH
46130: LD_INT 1
46132: PUSH
46133: EMPTY
46134: LIST
46135: LIST
46136: PUSH
46137: LD_INT 0
46139: PUSH
46140: LD_INT 1
46142: PUSH
46143: EMPTY
46144: LIST
46145: LIST
46146: PUSH
46147: LD_INT 1
46149: NEG
46150: PUSH
46151: LD_INT 0
46153: PUSH
46154: EMPTY
46155: LIST
46156: LIST
46157: PUSH
46158: LD_INT 1
46160: NEG
46161: PUSH
46162: LD_INT 1
46164: NEG
46165: PUSH
46166: EMPTY
46167: LIST
46168: LIST
46169: PUSH
46170: LD_INT 1
46172: NEG
46173: PUSH
46174: LD_INT 2
46176: NEG
46177: PUSH
46178: EMPTY
46179: LIST
46180: LIST
46181: PUSH
46182: LD_INT 0
46184: PUSH
46185: LD_INT 2
46187: NEG
46188: PUSH
46189: EMPTY
46190: LIST
46191: LIST
46192: PUSH
46193: LD_INT 1
46195: PUSH
46196: LD_INT 1
46198: NEG
46199: PUSH
46200: EMPTY
46201: LIST
46202: LIST
46203: PUSH
46204: LD_INT 2
46206: PUSH
46207: LD_INT 0
46209: PUSH
46210: EMPTY
46211: LIST
46212: LIST
46213: PUSH
46214: LD_INT 2
46216: PUSH
46217: LD_INT 1
46219: PUSH
46220: EMPTY
46221: LIST
46222: LIST
46223: PUSH
46224: LD_INT 2
46226: PUSH
46227: LD_INT 2
46229: PUSH
46230: EMPTY
46231: LIST
46232: LIST
46233: PUSH
46234: LD_INT 1
46236: PUSH
46237: LD_INT 2
46239: PUSH
46240: EMPTY
46241: LIST
46242: LIST
46243: PUSH
46244: LD_INT 0
46246: PUSH
46247: LD_INT 2
46249: PUSH
46250: EMPTY
46251: LIST
46252: LIST
46253: PUSH
46254: LD_INT 1
46256: NEG
46257: PUSH
46258: LD_INT 1
46260: PUSH
46261: EMPTY
46262: LIST
46263: LIST
46264: PUSH
46265: LD_INT 2
46267: NEG
46268: PUSH
46269: LD_INT 0
46271: PUSH
46272: EMPTY
46273: LIST
46274: LIST
46275: PUSH
46276: LD_INT 2
46278: NEG
46279: PUSH
46280: LD_INT 1
46282: NEG
46283: PUSH
46284: EMPTY
46285: LIST
46286: LIST
46287: PUSH
46288: LD_INT 2
46290: NEG
46291: PUSH
46292: LD_INT 2
46294: NEG
46295: PUSH
46296: EMPTY
46297: LIST
46298: LIST
46299: PUSH
46300: LD_INT 3
46302: PUSH
46303: LD_INT 1
46305: PUSH
46306: EMPTY
46307: LIST
46308: LIST
46309: PUSH
46310: LD_INT 3
46312: PUSH
46313: LD_INT 2
46315: PUSH
46316: EMPTY
46317: LIST
46318: LIST
46319: PUSH
46320: LD_INT 2
46322: PUSH
46323: LD_INT 3
46325: PUSH
46326: EMPTY
46327: LIST
46328: LIST
46329: PUSH
46330: LD_INT 1
46332: PUSH
46333: LD_INT 3
46335: PUSH
46336: EMPTY
46337: LIST
46338: LIST
46339: PUSH
46340: EMPTY
46341: LIST
46342: LIST
46343: LIST
46344: LIST
46345: LIST
46346: LIST
46347: LIST
46348: LIST
46349: LIST
46350: LIST
46351: LIST
46352: LIST
46353: LIST
46354: LIST
46355: LIST
46356: LIST
46357: LIST
46358: LIST
46359: LIST
46360: LIST
46361: LIST
46362: LIST
46363: LIST
46364: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
46365: LD_ADDR_VAR 0 26
46369: PUSH
46370: LD_INT 0
46372: PUSH
46373: LD_INT 0
46375: PUSH
46376: EMPTY
46377: LIST
46378: LIST
46379: PUSH
46380: LD_INT 0
46382: PUSH
46383: LD_INT 1
46385: NEG
46386: PUSH
46387: EMPTY
46388: LIST
46389: LIST
46390: PUSH
46391: LD_INT 1
46393: PUSH
46394: LD_INT 0
46396: PUSH
46397: EMPTY
46398: LIST
46399: LIST
46400: PUSH
46401: LD_INT 1
46403: PUSH
46404: LD_INT 1
46406: PUSH
46407: EMPTY
46408: LIST
46409: LIST
46410: PUSH
46411: LD_INT 0
46413: PUSH
46414: LD_INT 1
46416: PUSH
46417: EMPTY
46418: LIST
46419: LIST
46420: PUSH
46421: LD_INT 1
46423: NEG
46424: PUSH
46425: LD_INT 0
46427: PUSH
46428: EMPTY
46429: LIST
46430: LIST
46431: PUSH
46432: LD_INT 1
46434: NEG
46435: PUSH
46436: LD_INT 1
46438: NEG
46439: PUSH
46440: EMPTY
46441: LIST
46442: LIST
46443: PUSH
46444: LD_INT 1
46446: NEG
46447: PUSH
46448: LD_INT 2
46450: NEG
46451: PUSH
46452: EMPTY
46453: LIST
46454: LIST
46455: PUSH
46456: LD_INT 0
46458: PUSH
46459: LD_INT 2
46461: NEG
46462: PUSH
46463: EMPTY
46464: LIST
46465: LIST
46466: PUSH
46467: LD_INT 1
46469: PUSH
46470: LD_INT 1
46472: NEG
46473: PUSH
46474: EMPTY
46475: LIST
46476: LIST
46477: PUSH
46478: LD_INT 2
46480: PUSH
46481: LD_INT 0
46483: PUSH
46484: EMPTY
46485: LIST
46486: LIST
46487: PUSH
46488: LD_INT 2
46490: PUSH
46491: LD_INT 1
46493: PUSH
46494: EMPTY
46495: LIST
46496: LIST
46497: PUSH
46498: LD_INT 2
46500: PUSH
46501: LD_INT 2
46503: PUSH
46504: EMPTY
46505: LIST
46506: LIST
46507: PUSH
46508: LD_INT 1
46510: PUSH
46511: LD_INT 2
46513: PUSH
46514: EMPTY
46515: LIST
46516: LIST
46517: PUSH
46518: LD_INT 0
46520: PUSH
46521: LD_INT 2
46523: PUSH
46524: EMPTY
46525: LIST
46526: LIST
46527: PUSH
46528: LD_INT 1
46530: NEG
46531: PUSH
46532: LD_INT 1
46534: PUSH
46535: EMPTY
46536: LIST
46537: LIST
46538: PUSH
46539: LD_INT 2
46541: NEG
46542: PUSH
46543: LD_INT 0
46545: PUSH
46546: EMPTY
46547: LIST
46548: LIST
46549: PUSH
46550: LD_INT 2
46552: NEG
46553: PUSH
46554: LD_INT 1
46556: NEG
46557: PUSH
46558: EMPTY
46559: LIST
46560: LIST
46561: PUSH
46562: LD_INT 2
46564: NEG
46565: PUSH
46566: LD_INT 2
46568: NEG
46569: PUSH
46570: EMPTY
46571: LIST
46572: LIST
46573: PUSH
46574: LD_INT 2
46576: PUSH
46577: LD_INT 3
46579: PUSH
46580: EMPTY
46581: LIST
46582: LIST
46583: PUSH
46584: LD_INT 1
46586: PUSH
46587: LD_INT 3
46589: PUSH
46590: EMPTY
46591: LIST
46592: LIST
46593: PUSH
46594: LD_INT 1
46596: NEG
46597: PUSH
46598: LD_INT 2
46600: PUSH
46601: EMPTY
46602: LIST
46603: LIST
46604: PUSH
46605: LD_INT 2
46607: NEG
46608: PUSH
46609: LD_INT 1
46611: PUSH
46612: EMPTY
46613: LIST
46614: LIST
46615: PUSH
46616: EMPTY
46617: LIST
46618: LIST
46619: LIST
46620: LIST
46621: LIST
46622: LIST
46623: LIST
46624: LIST
46625: LIST
46626: LIST
46627: LIST
46628: LIST
46629: LIST
46630: LIST
46631: LIST
46632: LIST
46633: LIST
46634: LIST
46635: LIST
46636: LIST
46637: LIST
46638: LIST
46639: LIST
46640: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
46641: LD_ADDR_VAR 0 27
46645: PUSH
46646: LD_INT 0
46648: PUSH
46649: LD_INT 0
46651: PUSH
46652: EMPTY
46653: LIST
46654: LIST
46655: PUSH
46656: LD_INT 0
46658: PUSH
46659: LD_INT 1
46661: NEG
46662: PUSH
46663: EMPTY
46664: LIST
46665: LIST
46666: PUSH
46667: LD_INT 1
46669: PUSH
46670: LD_INT 0
46672: PUSH
46673: EMPTY
46674: LIST
46675: LIST
46676: PUSH
46677: LD_INT 1
46679: PUSH
46680: LD_INT 1
46682: PUSH
46683: EMPTY
46684: LIST
46685: LIST
46686: PUSH
46687: LD_INT 0
46689: PUSH
46690: LD_INT 1
46692: PUSH
46693: EMPTY
46694: LIST
46695: LIST
46696: PUSH
46697: LD_INT 1
46699: NEG
46700: PUSH
46701: LD_INT 0
46703: PUSH
46704: EMPTY
46705: LIST
46706: LIST
46707: PUSH
46708: LD_INT 1
46710: NEG
46711: PUSH
46712: LD_INT 1
46714: NEG
46715: PUSH
46716: EMPTY
46717: LIST
46718: LIST
46719: PUSH
46720: LD_INT 1
46722: NEG
46723: PUSH
46724: LD_INT 2
46726: NEG
46727: PUSH
46728: EMPTY
46729: LIST
46730: LIST
46731: PUSH
46732: LD_INT 0
46734: PUSH
46735: LD_INT 2
46737: NEG
46738: PUSH
46739: EMPTY
46740: LIST
46741: LIST
46742: PUSH
46743: LD_INT 1
46745: PUSH
46746: LD_INT 1
46748: NEG
46749: PUSH
46750: EMPTY
46751: LIST
46752: LIST
46753: PUSH
46754: LD_INT 2
46756: PUSH
46757: LD_INT 0
46759: PUSH
46760: EMPTY
46761: LIST
46762: LIST
46763: PUSH
46764: LD_INT 2
46766: PUSH
46767: LD_INT 1
46769: PUSH
46770: EMPTY
46771: LIST
46772: LIST
46773: PUSH
46774: LD_INT 2
46776: PUSH
46777: LD_INT 2
46779: PUSH
46780: EMPTY
46781: LIST
46782: LIST
46783: PUSH
46784: LD_INT 1
46786: PUSH
46787: LD_INT 2
46789: PUSH
46790: EMPTY
46791: LIST
46792: LIST
46793: PUSH
46794: LD_INT 0
46796: PUSH
46797: LD_INT 2
46799: PUSH
46800: EMPTY
46801: LIST
46802: LIST
46803: PUSH
46804: LD_INT 1
46806: NEG
46807: PUSH
46808: LD_INT 1
46810: PUSH
46811: EMPTY
46812: LIST
46813: LIST
46814: PUSH
46815: LD_INT 2
46817: NEG
46818: PUSH
46819: LD_INT 0
46821: PUSH
46822: EMPTY
46823: LIST
46824: LIST
46825: PUSH
46826: LD_INT 2
46828: NEG
46829: PUSH
46830: LD_INT 1
46832: NEG
46833: PUSH
46834: EMPTY
46835: LIST
46836: LIST
46837: PUSH
46838: LD_INT 2
46840: NEG
46841: PUSH
46842: LD_INT 2
46844: NEG
46845: PUSH
46846: EMPTY
46847: LIST
46848: LIST
46849: PUSH
46850: LD_INT 1
46852: NEG
46853: PUSH
46854: LD_INT 2
46856: PUSH
46857: EMPTY
46858: LIST
46859: LIST
46860: PUSH
46861: LD_INT 2
46863: NEG
46864: PUSH
46865: LD_INT 1
46867: PUSH
46868: EMPTY
46869: LIST
46870: LIST
46871: PUSH
46872: LD_INT 3
46874: NEG
46875: PUSH
46876: LD_INT 1
46878: NEG
46879: PUSH
46880: EMPTY
46881: LIST
46882: LIST
46883: PUSH
46884: LD_INT 3
46886: NEG
46887: PUSH
46888: LD_INT 2
46890: NEG
46891: PUSH
46892: EMPTY
46893: LIST
46894: LIST
46895: PUSH
46896: EMPTY
46897: LIST
46898: LIST
46899: LIST
46900: LIST
46901: LIST
46902: LIST
46903: LIST
46904: LIST
46905: LIST
46906: LIST
46907: LIST
46908: LIST
46909: LIST
46910: LIST
46911: LIST
46912: LIST
46913: LIST
46914: LIST
46915: LIST
46916: LIST
46917: LIST
46918: LIST
46919: LIST
46920: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
46921: LD_ADDR_VAR 0 28
46925: PUSH
46926: LD_INT 0
46928: PUSH
46929: LD_INT 0
46931: PUSH
46932: EMPTY
46933: LIST
46934: LIST
46935: PUSH
46936: LD_INT 0
46938: PUSH
46939: LD_INT 1
46941: NEG
46942: PUSH
46943: EMPTY
46944: LIST
46945: LIST
46946: PUSH
46947: LD_INT 1
46949: PUSH
46950: LD_INT 0
46952: PUSH
46953: EMPTY
46954: LIST
46955: LIST
46956: PUSH
46957: LD_INT 1
46959: PUSH
46960: LD_INT 1
46962: PUSH
46963: EMPTY
46964: LIST
46965: LIST
46966: PUSH
46967: LD_INT 0
46969: PUSH
46970: LD_INT 1
46972: PUSH
46973: EMPTY
46974: LIST
46975: LIST
46976: PUSH
46977: LD_INT 1
46979: NEG
46980: PUSH
46981: LD_INT 0
46983: PUSH
46984: EMPTY
46985: LIST
46986: LIST
46987: PUSH
46988: LD_INT 1
46990: NEG
46991: PUSH
46992: LD_INT 1
46994: NEG
46995: PUSH
46996: EMPTY
46997: LIST
46998: LIST
46999: PUSH
47000: LD_INT 1
47002: NEG
47003: PUSH
47004: LD_INT 2
47006: NEG
47007: PUSH
47008: EMPTY
47009: LIST
47010: LIST
47011: PUSH
47012: LD_INT 0
47014: PUSH
47015: LD_INT 2
47017: NEG
47018: PUSH
47019: EMPTY
47020: LIST
47021: LIST
47022: PUSH
47023: LD_INT 1
47025: PUSH
47026: LD_INT 1
47028: NEG
47029: PUSH
47030: EMPTY
47031: LIST
47032: LIST
47033: PUSH
47034: LD_INT 2
47036: PUSH
47037: LD_INT 0
47039: PUSH
47040: EMPTY
47041: LIST
47042: LIST
47043: PUSH
47044: LD_INT 2
47046: PUSH
47047: LD_INT 1
47049: PUSH
47050: EMPTY
47051: LIST
47052: LIST
47053: PUSH
47054: LD_INT 2
47056: PUSH
47057: LD_INT 2
47059: PUSH
47060: EMPTY
47061: LIST
47062: LIST
47063: PUSH
47064: LD_INT 1
47066: PUSH
47067: LD_INT 2
47069: PUSH
47070: EMPTY
47071: LIST
47072: LIST
47073: PUSH
47074: LD_INT 0
47076: PUSH
47077: LD_INT 2
47079: PUSH
47080: EMPTY
47081: LIST
47082: LIST
47083: PUSH
47084: LD_INT 1
47086: NEG
47087: PUSH
47088: LD_INT 1
47090: PUSH
47091: EMPTY
47092: LIST
47093: LIST
47094: PUSH
47095: LD_INT 2
47097: NEG
47098: PUSH
47099: LD_INT 0
47101: PUSH
47102: EMPTY
47103: LIST
47104: LIST
47105: PUSH
47106: LD_INT 2
47108: NEG
47109: PUSH
47110: LD_INT 1
47112: NEG
47113: PUSH
47114: EMPTY
47115: LIST
47116: LIST
47117: PUSH
47118: LD_INT 2
47120: NEG
47121: PUSH
47122: LD_INT 2
47124: NEG
47125: PUSH
47126: EMPTY
47127: LIST
47128: LIST
47129: PUSH
47130: LD_INT 2
47132: NEG
47133: PUSH
47134: LD_INT 3
47136: NEG
47137: PUSH
47138: EMPTY
47139: LIST
47140: LIST
47141: PUSH
47142: LD_INT 1
47144: NEG
47145: PUSH
47146: LD_INT 3
47148: NEG
47149: PUSH
47150: EMPTY
47151: LIST
47152: LIST
47153: PUSH
47154: LD_INT 3
47156: NEG
47157: PUSH
47158: LD_INT 1
47160: NEG
47161: PUSH
47162: EMPTY
47163: LIST
47164: LIST
47165: PUSH
47166: LD_INT 3
47168: NEG
47169: PUSH
47170: LD_INT 2
47172: NEG
47173: PUSH
47174: EMPTY
47175: LIST
47176: LIST
47177: PUSH
47178: EMPTY
47179: LIST
47180: LIST
47181: LIST
47182: LIST
47183: LIST
47184: LIST
47185: LIST
47186: LIST
47187: LIST
47188: LIST
47189: LIST
47190: LIST
47191: LIST
47192: LIST
47193: LIST
47194: LIST
47195: LIST
47196: LIST
47197: LIST
47198: LIST
47199: LIST
47200: LIST
47201: LIST
47202: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47203: LD_ADDR_VAR 0 29
47207: PUSH
47208: LD_INT 0
47210: PUSH
47211: LD_INT 0
47213: PUSH
47214: EMPTY
47215: LIST
47216: LIST
47217: PUSH
47218: LD_INT 0
47220: PUSH
47221: LD_INT 1
47223: NEG
47224: PUSH
47225: EMPTY
47226: LIST
47227: LIST
47228: PUSH
47229: LD_INT 1
47231: PUSH
47232: LD_INT 0
47234: PUSH
47235: EMPTY
47236: LIST
47237: LIST
47238: PUSH
47239: LD_INT 1
47241: PUSH
47242: LD_INT 1
47244: PUSH
47245: EMPTY
47246: LIST
47247: LIST
47248: PUSH
47249: LD_INT 0
47251: PUSH
47252: LD_INT 1
47254: PUSH
47255: EMPTY
47256: LIST
47257: LIST
47258: PUSH
47259: LD_INT 1
47261: NEG
47262: PUSH
47263: LD_INT 0
47265: PUSH
47266: EMPTY
47267: LIST
47268: LIST
47269: PUSH
47270: LD_INT 1
47272: NEG
47273: PUSH
47274: LD_INT 1
47276: NEG
47277: PUSH
47278: EMPTY
47279: LIST
47280: LIST
47281: PUSH
47282: LD_INT 1
47284: NEG
47285: PUSH
47286: LD_INT 2
47288: NEG
47289: PUSH
47290: EMPTY
47291: LIST
47292: LIST
47293: PUSH
47294: LD_INT 0
47296: PUSH
47297: LD_INT 2
47299: NEG
47300: PUSH
47301: EMPTY
47302: LIST
47303: LIST
47304: PUSH
47305: LD_INT 1
47307: PUSH
47308: LD_INT 1
47310: NEG
47311: PUSH
47312: EMPTY
47313: LIST
47314: LIST
47315: PUSH
47316: LD_INT 2
47318: PUSH
47319: LD_INT 0
47321: PUSH
47322: EMPTY
47323: LIST
47324: LIST
47325: PUSH
47326: LD_INT 2
47328: PUSH
47329: LD_INT 1
47331: PUSH
47332: EMPTY
47333: LIST
47334: LIST
47335: PUSH
47336: LD_INT 1
47338: PUSH
47339: LD_INT 2
47341: PUSH
47342: EMPTY
47343: LIST
47344: LIST
47345: PUSH
47346: LD_INT 0
47348: PUSH
47349: LD_INT 2
47351: PUSH
47352: EMPTY
47353: LIST
47354: LIST
47355: PUSH
47356: LD_INT 1
47358: NEG
47359: PUSH
47360: LD_INT 1
47362: PUSH
47363: EMPTY
47364: LIST
47365: LIST
47366: PUSH
47367: LD_INT 2
47369: NEG
47370: PUSH
47371: LD_INT 1
47373: NEG
47374: PUSH
47375: EMPTY
47376: LIST
47377: LIST
47378: PUSH
47379: LD_INT 2
47381: NEG
47382: PUSH
47383: LD_INT 2
47385: NEG
47386: PUSH
47387: EMPTY
47388: LIST
47389: LIST
47390: PUSH
47391: LD_INT 2
47393: NEG
47394: PUSH
47395: LD_INT 3
47397: NEG
47398: PUSH
47399: EMPTY
47400: LIST
47401: LIST
47402: PUSH
47403: LD_INT 2
47405: PUSH
47406: LD_INT 1
47408: NEG
47409: PUSH
47410: EMPTY
47411: LIST
47412: LIST
47413: PUSH
47414: LD_INT 3
47416: PUSH
47417: LD_INT 1
47419: PUSH
47420: EMPTY
47421: LIST
47422: LIST
47423: PUSH
47424: LD_INT 1
47426: PUSH
47427: LD_INT 3
47429: PUSH
47430: EMPTY
47431: LIST
47432: LIST
47433: PUSH
47434: LD_INT 1
47436: NEG
47437: PUSH
47438: LD_INT 2
47440: PUSH
47441: EMPTY
47442: LIST
47443: LIST
47444: PUSH
47445: LD_INT 3
47447: NEG
47448: PUSH
47449: LD_INT 2
47451: NEG
47452: PUSH
47453: EMPTY
47454: LIST
47455: LIST
47456: PUSH
47457: EMPTY
47458: LIST
47459: LIST
47460: LIST
47461: LIST
47462: LIST
47463: LIST
47464: LIST
47465: LIST
47466: LIST
47467: LIST
47468: LIST
47469: LIST
47470: LIST
47471: LIST
47472: LIST
47473: LIST
47474: LIST
47475: LIST
47476: LIST
47477: LIST
47478: LIST
47479: LIST
47480: LIST
47481: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47482: LD_ADDR_VAR 0 30
47486: PUSH
47487: LD_INT 0
47489: PUSH
47490: LD_INT 0
47492: PUSH
47493: EMPTY
47494: LIST
47495: LIST
47496: PUSH
47497: LD_INT 0
47499: PUSH
47500: LD_INT 1
47502: NEG
47503: PUSH
47504: EMPTY
47505: LIST
47506: LIST
47507: PUSH
47508: LD_INT 1
47510: PUSH
47511: LD_INT 0
47513: PUSH
47514: EMPTY
47515: LIST
47516: LIST
47517: PUSH
47518: LD_INT 1
47520: PUSH
47521: LD_INT 1
47523: PUSH
47524: EMPTY
47525: LIST
47526: LIST
47527: PUSH
47528: LD_INT 0
47530: PUSH
47531: LD_INT 1
47533: PUSH
47534: EMPTY
47535: LIST
47536: LIST
47537: PUSH
47538: LD_INT 1
47540: NEG
47541: PUSH
47542: LD_INT 0
47544: PUSH
47545: EMPTY
47546: LIST
47547: LIST
47548: PUSH
47549: LD_INT 1
47551: NEG
47552: PUSH
47553: LD_INT 1
47555: NEG
47556: PUSH
47557: EMPTY
47558: LIST
47559: LIST
47560: PUSH
47561: LD_INT 1
47563: NEG
47564: PUSH
47565: LD_INT 2
47567: NEG
47568: PUSH
47569: EMPTY
47570: LIST
47571: LIST
47572: PUSH
47573: LD_INT 0
47575: PUSH
47576: LD_INT 2
47578: NEG
47579: PUSH
47580: EMPTY
47581: LIST
47582: LIST
47583: PUSH
47584: LD_INT 1
47586: PUSH
47587: LD_INT 1
47589: NEG
47590: PUSH
47591: EMPTY
47592: LIST
47593: LIST
47594: PUSH
47595: LD_INT 2
47597: PUSH
47598: LD_INT 0
47600: PUSH
47601: EMPTY
47602: LIST
47603: LIST
47604: PUSH
47605: LD_INT 2
47607: PUSH
47608: LD_INT 1
47610: PUSH
47611: EMPTY
47612: LIST
47613: LIST
47614: PUSH
47615: LD_INT 2
47617: PUSH
47618: LD_INT 2
47620: PUSH
47621: EMPTY
47622: LIST
47623: LIST
47624: PUSH
47625: LD_INT 1
47627: PUSH
47628: LD_INT 2
47630: PUSH
47631: EMPTY
47632: LIST
47633: LIST
47634: PUSH
47635: LD_INT 1
47637: NEG
47638: PUSH
47639: LD_INT 1
47641: PUSH
47642: EMPTY
47643: LIST
47644: LIST
47645: PUSH
47646: LD_INT 2
47648: NEG
47649: PUSH
47650: LD_INT 0
47652: PUSH
47653: EMPTY
47654: LIST
47655: LIST
47656: PUSH
47657: LD_INT 2
47659: NEG
47660: PUSH
47661: LD_INT 1
47663: NEG
47664: PUSH
47665: EMPTY
47666: LIST
47667: LIST
47668: PUSH
47669: LD_INT 1
47671: NEG
47672: PUSH
47673: LD_INT 3
47675: NEG
47676: PUSH
47677: EMPTY
47678: LIST
47679: LIST
47680: PUSH
47681: LD_INT 1
47683: PUSH
47684: LD_INT 2
47686: NEG
47687: PUSH
47688: EMPTY
47689: LIST
47690: LIST
47691: PUSH
47692: LD_INT 3
47694: PUSH
47695: LD_INT 2
47697: PUSH
47698: EMPTY
47699: LIST
47700: LIST
47701: PUSH
47702: LD_INT 2
47704: PUSH
47705: LD_INT 3
47707: PUSH
47708: EMPTY
47709: LIST
47710: LIST
47711: PUSH
47712: LD_INT 2
47714: NEG
47715: PUSH
47716: LD_INT 1
47718: PUSH
47719: EMPTY
47720: LIST
47721: LIST
47722: PUSH
47723: LD_INT 3
47725: NEG
47726: PUSH
47727: LD_INT 1
47729: NEG
47730: PUSH
47731: EMPTY
47732: LIST
47733: LIST
47734: PUSH
47735: EMPTY
47736: LIST
47737: LIST
47738: LIST
47739: LIST
47740: LIST
47741: LIST
47742: LIST
47743: LIST
47744: LIST
47745: LIST
47746: LIST
47747: LIST
47748: LIST
47749: LIST
47750: LIST
47751: LIST
47752: LIST
47753: LIST
47754: LIST
47755: LIST
47756: LIST
47757: LIST
47758: LIST
47759: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47760: LD_ADDR_VAR 0 31
47764: PUSH
47765: LD_INT 0
47767: PUSH
47768: LD_INT 0
47770: PUSH
47771: EMPTY
47772: LIST
47773: LIST
47774: PUSH
47775: LD_INT 0
47777: PUSH
47778: LD_INT 1
47780: NEG
47781: PUSH
47782: EMPTY
47783: LIST
47784: LIST
47785: PUSH
47786: LD_INT 1
47788: PUSH
47789: LD_INT 0
47791: PUSH
47792: EMPTY
47793: LIST
47794: LIST
47795: PUSH
47796: LD_INT 1
47798: PUSH
47799: LD_INT 1
47801: PUSH
47802: EMPTY
47803: LIST
47804: LIST
47805: PUSH
47806: LD_INT 0
47808: PUSH
47809: LD_INT 1
47811: PUSH
47812: EMPTY
47813: LIST
47814: LIST
47815: PUSH
47816: LD_INT 1
47818: NEG
47819: PUSH
47820: LD_INT 0
47822: PUSH
47823: EMPTY
47824: LIST
47825: LIST
47826: PUSH
47827: LD_INT 1
47829: NEG
47830: PUSH
47831: LD_INT 1
47833: NEG
47834: PUSH
47835: EMPTY
47836: LIST
47837: LIST
47838: PUSH
47839: LD_INT 1
47841: NEG
47842: PUSH
47843: LD_INT 2
47845: NEG
47846: PUSH
47847: EMPTY
47848: LIST
47849: LIST
47850: PUSH
47851: LD_INT 1
47853: PUSH
47854: LD_INT 1
47856: NEG
47857: PUSH
47858: EMPTY
47859: LIST
47860: LIST
47861: PUSH
47862: LD_INT 2
47864: PUSH
47865: LD_INT 0
47867: PUSH
47868: EMPTY
47869: LIST
47870: LIST
47871: PUSH
47872: LD_INT 2
47874: PUSH
47875: LD_INT 1
47877: PUSH
47878: EMPTY
47879: LIST
47880: LIST
47881: PUSH
47882: LD_INT 2
47884: PUSH
47885: LD_INT 2
47887: PUSH
47888: EMPTY
47889: LIST
47890: LIST
47891: PUSH
47892: LD_INT 1
47894: PUSH
47895: LD_INT 2
47897: PUSH
47898: EMPTY
47899: LIST
47900: LIST
47901: PUSH
47902: LD_INT 0
47904: PUSH
47905: LD_INT 2
47907: PUSH
47908: EMPTY
47909: LIST
47910: LIST
47911: PUSH
47912: LD_INT 1
47914: NEG
47915: PUSH
47916: LD_INT 1
47918: PUSH
47919: EMPTY
47920: LIST
47921: LIST
47922: PUSH
47923: LD_INT 2
47925: NEG
47926: PUSH
47927: LD_INT 1
47929: NEG
47930: PUSH
47931: EMPTY
47932: LIST
47933: LIST
47934: PUSH
47935: LD_INT 2
47937: NEG
47938: PUSH
47939: LD_INT 2
47941: NEG
47942: PUSH
47943: EMPTY
47944: LIST
47945: LIST
47946: PUSH
47947: LD_INT 2
47949: NEG
47950: PUSH
47951: LD_INT 3
47953: NEG
47954: PUSH
47955: EMPTY
47956: LIST
47957: LIST
47958: PUSH
47959: LD_INT 2
47961: PUSH
47962: LD_INT 1
47964: NEG
47965: PUSH
47966: EMPTY
47967: LIST
47968: LIST
47969: PUSH
47970: LD_INT 3
47972: PUSH
47973: LD_INT 1
47975: PUSH
47976: EMPTY
47977: LIST
47978: LIST
47979: PUSH
47980: LD_INT 1
47982: PUSH
47983: LD_INT 3
47985: PUSH
47986: EMPTY
47987: LIST
47988: LIST
47989: PUSH
47990: LD_INT 1
47992: NEG
47993: PUSH
47994: LD_INT 2
47996: PUSH
47997: EMPTY
47998: LIST
47999: LIST
48000: PUSH
48001: LD_INT 3
48003: NEG
48004: PUSH
48005: LD_INT 2
48007: NEG
48008: PUSH
48009: EMPTY
48010: LIST
48011: LIST
48012: PUSH
48013: EMPTY
48014: LIST
48015: LIST
48016: LIST
48017: LIST
48018: LIST
48019: LIST
48020: LIST
48021: LIST
48022: LIST
48023: LIST
48024: LIST
48025: LIST
48026: LIST
48027: LIST
48028: LIST
48029: LIST
48030: LIST
48031: LIST
48032: LIST
48033: LIST
48034: LIST
48035: LIST
48036: LIST
48037: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48038: LD_ADDR_VAR 0 32
48042: PUSH
48043: LD_INT 0
48045: PUSH
48046: LD_INT 0
48048: PUSH
48049: EMPTY
48050: LIST
48051: LIST
48052: PUSH
48053: LD_INT 0
48055: PUSH
48056: LD_INT 1
48058: NEG
48059: PUSH
48060: EMPTY
48061: LIST
48062: LIST
48063: PUSH
48064: LD_INT 1
48066: PUSH
48067: LD_INT 0
48069: PUSH
48070: EMPTY
48071: LIST
48072: LIST
48073: PUSH
48074: LD_INT 1
48076: PUSH
48077: LD_INT 1
48079: PUSH
48080: EMPTY
48081: LIST
48082: LIST
48083: PUSH
48084: LD_INT 0
48086: PUSH
48087: LD_INT 1
48089: PUSH
48090: EMPTY
48091: LIST
48092: LIST
48093: PUSH
48094: LD_INT 1
48096: NEG
48097: PUSH
48098: LD_INT 0
48100: PUSH
48101: EMPTY
48102: LIST
48103: LIST
48104: PUSH
48105: LD_INT 1
48107: NEG
48108: PUSH
48109: LD_INT 1
48111: NEG
48112: PUSH
48113: EMPTY
48114: LIST
48115: LIST
48116: PUSH
48117: LD_INT 1
48119: NEG
48120: PUSH
48121: LD_INT 2
48123: NEG
48124: PUSH
48125: EMPTY
48126: LIST
48127: LIST
48128: PUSH
48129: LD_INT 0
48131: PUSH
48132: LD_INT 2
48134: NEG
48135: PUSH
48136: EMPTY
48137: LIST
48138: LIST
48139: PUSH
48140: LD_INT 1
48142: PUSH
48143: LD_INT 1
48145: NEG
48146: PUSH
48147: EMPTY
48148: LIST
48149: LIST
48150: PUSH
48151: LD_INT 2
48153: PUSH
48154: LD_INT 1
48156: PUSH
48157: EMPTY
48158: LIST
48159: LIST
48160: PUSH
48161: LD_INT 2
48163: PUSH
48164: LD_INT 2
48166: PUSH
48167: EMPTY
48168: LIST
48169: LIST
48170: PUSH
48171: LD_INT 1
48173: PUSH
48174: LD_INT 2
48176: PUSH
48177: EMPTY
48178: LIST
48179: LIST
48180: PUSH
48181: LD_INT 0
48183: PUSH
48184: LD_INT 2
48186: PUSH
48187: EMPTY
48188: LIST
48189: LIST
48190: PUSH
48191: LD_INT 1
48193: NEG
48194: PUSH
48195: LD_INT 1
48197: PUSH
48198: EMPTY
48199: LIST
48200: LIST
48201: PUSH
48202: LD_INT 2
48204: NEG
48205: PUSH
48206: LD_INT 0
48208: PUSH
48209: EMPTY
48210: LIST
48211: LIST
48212: PUSH
48213: LD_INT 2
48215: NEG
48216: PUSH
48217: LD_INT 1
48219: NEG
48220: PUSH
48221: EMPTY
48222: LIST
48223: LIST
48224: PUSH
48225: LD_INT 1
48227: NEG
48228: PUSH
48229: LD_INT 3
48231: NEG
48232: PUSH
48233: EMPTY
48234: LIST
48235: LIST
48236: PUSH
48237: LD_INT 1
48239: PUSH
48240: LD_INT 2
48242: NEG
48243: PUSH
48244: EMPTY
48245: LIST
48246: LIST
48247: PUSH
48248: LD_INT 3
48250: PUSH
48251: LD_INT 2
48253: PUSH
48254: EMPTY
48255: LIST
48256: LIST
48257: PUSH
48258: LD_INT 2
48260: PUSH
48261: LD_INT 3
48263: PUSH
48264: EMPTY
48265: LIST
48266: LIST
48267: PUSH
48268: LD_INT 2
48270: NEG
48271: PUSH
48272: LD_INT 1
48274: PUSH
48275: EMPTY
48276: LIST
48277: LIST
48278: PUSH
48279: LD_INT 3
48281: NEG
48282: PUSH
48283: LD_INT 1
48285: NEG
48286: PUSH
48287: EMPTY
48288: LIST
48289: LIST
48290: PUSH
48291: EMPTY
48292: LIST
48293: LIST
48294: LIST
48295: LIST
48296: LIST
48297: LIST
48298: LIST
48299: LIST
48300: LIST
48301: LIST
48302: LIST
48303: LIST
48304: LIST
48305: LIST
48306: LIST
48307: LIST
48308: LIST
48309: LIST
48310: LIST
48311: LIST
48312: LIST
48313: LIST
48314: LIST
48315: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48316: LD_ADDR_VAR 0 33
48320: PUSH
48321: LD_INT 0
48323: PUSH
48324: LD_INT 0
48326: PUSH
48327: EMPTY
48328: LIST
48329: LIST
48330: PUSH
48331: LD_INT 0
48333: PUSH
48334: LD_INT 1
48336: NEG
48337: PUSH
48338: EMPTY
48339: LIST
48340: LIST
48341: PUSH
48342: LD_INT 1
48344: PUSH
48345: LD_INT 0
48347: PUSH
48348: EMPTY
48349: LIST
48350: LIST
48351: PUSH
48352: LD_INT 1
48354: PUSH
48355: LD_INT 1
48357: PUSH
48358: EMPTY
48359: LIST
48360: LIST
48361: PUSH
48362: LD_INT 0
48364: PUSH
48365: LD_INT 1
48367: PUSH
48368: EMPTY
48369: LIST
48370: LIST
48371: PUSH
48372: LD_INT 1
48374: NEG
48375: PUSH
48376: LD_INT 0
48378: PUSH
48379: EMPTY
48380: LIST
48381: LIST
48382: PUSH
48383: LD_INT 1
48385: NEG
48386: PUSH
48387: LD_INT 1
48389: NEG
48390: PUSH
48391: EMPTY
48392: LIST
48393: LIST
48394: PUSH
48395: LD_INT 1
48397: NEG
48398: PUSH
48399: LD_INT 2
48401: NEG
48402: PUSH
48403: EMPTY
48404: LIST
48405: LIST
48406: PUSH
48407: LD_INT 1
48409: PUSH
48410: LD_INT 1
48412: NEG
48413: PUSH
48414: EMPTY
48415: LIST
48416: LIST
48417: PUSH
48418: LD_INT 2
48420: PUSH
48421: LD_INT 0
48423: PUSH
48424: EMPTY
48425: LIST
48426: LIST
48427: PUSH
48428: LD_INT 2
48430: PUSH
48431: LD_INT 1
48433: PUSH
48434: EMPTY
48435: LIST
48436: LIST
48437: PUSH
48438: LD_INT 1
48440: PUSH
48441: LD_INT 2
48443: PUSH
48444: EMPTY
48445: LIST
48446: LIST
48447: PUSH
48448: LD_INT 0
48450: PUSH
48451: LD_INT 2
48453: PUSH
48454: EMPTY
48455: LIST
48456: LIST
48457: PUSH
48458: LD_INT 1
48460: NEG
48461: PUSH
48462: LD_INT 1
48464: PUSH
48465: EMPTY
48466: LIST
48467: LIST
48468: PUSH
48469: LD_INT 2
48471: NEG
48472: PUSH
48473: LD_INT 0
48475: PUSH
48476: EMPTY
48477: LIST
48478: LIST
48479: PUSH
48480: LD_INT 2
48482: NEG
48483: PUSH
48484: LD_INT 1
48486: NEG
48487: PUSH
48488: EMPTY
48489: LIST
48490: LIST
48491: PUSH
48492: LD_INT 2
48494: NEG
48495: PUSH
48496: LD_INT 2
48498: NEG
48499: PUSH
48500: EMPTY
48501: LIST
48502: LIST
48503: PUSH
48504: LD_INT 2
48506: NEG
48507: PUSH
48508: LD_INT 3
48510: NEG
48511: PUSH
48512: EMPTY
48513: LIST
48514: LIST
48515: PUSH
48516: LD_INT 2
48518: PUSH
48519: LD_INT 1
48521: NEG
48522: PUSH
48523: EMPTY
48524: LIST
48525: LIST
48526: PUSH
48527: LD_INT 3
48529: PUSH
48530: LD_INT 1
48532: PUSH
48533: EMPTY
48534: LIST
48535: LIST
48536: PUSH
48537: LD_INT 1
48539: PUSH
48540: LD_INT 3
48542: PUSH
48543: EMPTY
48544: LIST
48545: LIST
48546: PUSH
48547: LD_INT 1
48549: NEG
48550: PUSH
48551: LD_INT 2
48553: PUSH
48554: EMPTY
48555: LIST
48556: LIST
48557: PUSH
48558: LD_INT 3
48560: NEG
48561: PUSH
48562: LD_INT 2
48564: NEG
48565: PUSH
48566: EMPTY
48567: LIST
48568: LIST
48569: PUSH
48570: EMPTY
48571: LIST
48572: LIST
48573: LIST
48574: LIST
48575: LIST
48576: LIST
48577: LIST
48578: LIST
48579: LIST
48580: LIST
48581: LIST
48582: LIST
48583: LIST
48584: LIST
48585: LIST
48586: LIST
48587: LIST
48588: LIST
48589: LIST
48590: LIST
48591: LIST
48592: LIST
48593: LIST
48594: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48595: LD_ADDR_VAR 0 34
48599: PUSH
48600: LD_INT 0
48602: PUSH
48603: LD_INT 0
48605: PUSH
48606: EMPTY
48607: LIST
48608: LIST
48609: PUSH
48610: LD_INT 0
48612: PUSH
48613: LD_INT 1
48615: NEG
48616: PUSH
48617: EMPTY
48618: LIST
48619: LIST
48620: PUSH
48621: LD_INT 1
48623: PUSH
48624: LD_INT 0
48626: PUSH
48627: EMPTY
48628: LIST
48629: LIST
48630: PUSH
48631: LD_INT 1
48633: PUSH
48634: LD_INT 1
48636: PUSH
48637: EMPTY
48638: LIST
48639: LIST
48640: PUSH
48641: LD_INT 0
48643: PUSH
48644: LD_INT 1
48646: PUSH
48647: EMPTY
48648: LIST
48649: LIST
48650: PUSH
48651: LD_INT 1
48653: NEG
48654: PUSH
48655: LD_INT 0
48657: PUSH
48658: EMPTY
48659: LIST
48660: LIST
48661: PUSH
48662: LD_INT 1
48664: NEG
48665: PUSH
48666: LD_INT 1
48668: NEG
48669: PUSH
48670: EMPTY
48671: LIST
48672: LIST
48673: PUSH
48674: LD_INT 1
48676: NEG
48677: PUSH
48678: LD_INT 2
48680: NEG
48681: PUSH
48682: EMPTY
48683: LIST
48684: LIST
48685: PUSH
48686: LD_INT 0
48688: PUSH
48689: LD_INT 2
48691: NEG
48692: PUSH
48693: EMPTY
48694: LIST
48695: LIST
48696: PUSH
48697: LD_INT 1
48699: PUSH
48700: LD_INT 1
48702: NEG
48703: PUSH
48704: EMPTY
48705: LIST
48706: LIST
48707: PUSH
48708: LD_INT 2
48710: PUSH
48711: LD_INT 1
48713: PUSH
48714: EMPTY
48715: LIST
48716: LIST
48717: PUSH
48718: LD_INT 2
48720: PUSH
48721: LD_INT 2
48723: PUSH
48724: EMPTY
48725: LIST
48726: LIST
48727: PUSH
48728: LD_INT 1
48730: PUSH
48731: LD_INT 2
48733: PUSH
48734: EMPTY
48735: LIST
48736: LIST
48737: PUSH
48738: LD_INT 1
48740: NEG
48741: PUSH
48742: LD_INT 1
48744: PUSH
48745: EMPTY
48746: LIST
48747: LIST
48748: PUSH
48749: LD_INT 2
48751: NEG
48752: PUSH
48753: LD_INT 0
48755: PUSH
48756: EMPTY
48757: LIST
48758: LIST
48759: PUSH
48760: LD_INT 2
48762: NEG
48763: PUSH
48764: LD_INT 1
48766: NEG
48767: PUSH
48768: EMPTY
48769: LIST
48770: LIST
48771: PUSH
48772: LD_INT 2
48774: NEG
48775: PUSH
48776: LD_INT 2
48778: NEG
48779: PUSH
48780: EMPTY
48781: LIST
48782: LIST
48783: PUSH
48784: LD_INT 1
48786: NEG
48787: PUSH
48788: LD_INT 3
48790: NEG
48791: PUSH
48792: EMPTY
48793: LIST
48794: LIST
48795: PUSH
48796: LD_INT 1
48798: PUSH
48799: LD_INT 2
48801: NEG
48802: PUSH
48803: EMPTY
48804: LIST
48805: LIST
48806: PUSH
48807: LD_INT 3
48809: PUSH
48810: LD_INT 2
48812: PUSH
48813: EMPTY
48814: LIST
48815: LIST
48816: PUSH
48817: LD_INT 2
48819: PUSH
48820: LD_INT 3
48822: PUSH
48823: EMPTY
48824: LIST
48825: LIST
48826: PUSH
48827: LD_INT 2
48829: NEG
48830: PUSH
48831: LD_INT 1
48833: PUSH
48834: EMPTY
48835: LIST
48836: LIST
48837: PUSH
48838: LD_INT 3
48840: NEG
48841: PUSH
48842: LD_INT 1
48844: NEG
48845: PUSH
48846: EMPTY
48847: LIST
48848: LIST
48849: PUSH
48850: EMPTY
48851: LIST
48852: LIST
48853: LIST
48854: LIST
48855: LIST
48856: LIST
48857: LIST
48858: LIST
48859: LIST
48860: LIST
48861: LIST
48862: LIST
48863: LIST
48864: LIST
48865: LIST
48866: LIST
48867: LIST
48868: LIST
48869: LIST
48870: LIST
48871: LIST
48872: LIST
48873: LIST
48874: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
48875: LD_ADDR_VAR 0 35
48879: PUSH
48880: LD_INT 0
48882: PUSH
48883: LD_INT 0
48885: PUSH
48886: EMPTY
48887: LIST
48888: LIST
48889: PUSH
48890: LD_INT 0
48892: PUSH
48893: LD_INT 1
48895: NEG
48896: PUSH
48897: EMPTY
48898: LIST
48899: LIST
48900: PUSH
48901: LD_INT 1
48903: PUSH
48904: LD_INT 0
48906: PUSH
48907: EMPTY
48908: LIST
48909: LIST
48910: PUSH
48911: LD_INT 1
48913: PUSH
48914: LD_INT 1
48916: PUSH
48917: EMPTY
48918: LIST
48919: LIST
48920: PUSH
48921: LD_INT 0
48923: PUSH
48924: LD_INT 1
48926: PUSH
48927: EMPTY
48928: LIST
48929: LIST
48930: PUSH
48931: LD_INT 1
48933: NEG
48934: PUSH
48935: LD_INT 0
48937: PUSH
48938: EMPTY
48939: LIST
48940: LIST
48941: PUSH
48942: LD_INT 1
48944: NEG
48945: PUSH
48946: LD_INT 1
48948: NEG
48949: PUSH
48950: EMPTY
48951: LIST
48952: LIST
48953: PUSH
48954: LD_INT 2
48956: PUSH
48957: LD_INT 1
48959: PUSH
48960: EMPTY
48961: LIST
48962: LIST
48963: PUSH
48964: LD_INT 2
48966: NEG
48967: PUSH
48968: LD_INT 1
48970: NEG
48971: PUSH
48972: EMPTY
48973: LIST
48974: LIST
48975: PUSH
48976: EMPTY
48977: LIST
48978: LIST
48979: LIST
48980: LIST
48981: LIST
48982: LIST
48983: LIST
48984: LIST
48985: LIST
48986: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
48987: LD_ADDR_VAR 0 36
48991: PUSH
48992: LD_INT 0
48994: PUSH
48995: LD_INT 0
48997: PUSH
48998: EMPTY
48999: LIST
49000: LIST
49001: PUSH
49002: LD_INT 0
49004: PUSH
49005: LD_INT 1
49007: NEG
49008: PUSH
49009: EMPTY
49010: LIST
49011: LIST
49012: PUSH
49013: LD_INT 1
49015: PUSH
49016: LD_INT 0
49018: PUSH
49019: EMPTY
49020: LIST
49021: LIST
49022: PUSH
49023: LD_INT 1
49025: PUSH
49026: LD_INT 1
49028: PUSH
49029: EMPTY
49030: LIST
49031: LIST
49032: PUSH
49033: LD_INT 0
49035: PUSH
49036: LD_INT 1
49038: PUSH
49039: EMPTY
49040: LIST
49041: LIST
49042: PUSH
49043: LD_INT 1
49045: NEG
49046: PUSH
49047: LD_INT 0
49049: PUSH
49050: EMPTY
49051: LIST
49052: LIST
49053: PUSH
49054: LD_INT 1
49056: NEG
49057: PUSH
49058: LD_INT 1
49060: NEG
49061: PUSH
49062: EMPTY
49063: LIST
49064: LIST
49065: PUSH
49066: LD_INT 1
49068: NEG
49069: PUSH
49070: LD_INT 2
49072: NEG
49073: PUSH
49074: EMPTY
49075: LIST
49076: LIST
49077: PUSH
49078: LD_INT 1
49080: PUSH
49081: LD_INT 2
49083: PUSH
49084: EMPTY
49085: LIST
49086: LIST
49087: PUSH
49088: EMPTY
49089: LIST
49090: LIST
49091: LIST
49092: LIST
49093: LIST
49094: LIST
49095: LIST
49096: LIST
49097: LIST
49098: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
49099: LD_ADDR_VAR 0 37
49103: PUSH
49104: LD_INT 0
49106: PUSH
49107: LD_INT 0
49109: PUSH
49110: EMPTY
49111: LIST
49112: LIST
49113: PUSH
49114: LD_INT 0
49116: PUSH
49117: LD_INT 1
49119: NEG
49120: PUSH
49121: EMPTY
49122: LIST
49123: LIST
49124: PUSH
49125: LD_INT 1
49127: PUSH
49128: LD_INT 0
49130: PUSH
49131: EMPTY
49132: LIST
49133: LIST
49134: PUSH
49135: LD_INT 1
49137: PUSH
49138: LD_INT 1
49140: PUSH
49141: EMPTY
49142: LIST
49143: LIST
49144: PUSH
49145: LD_INT 0
49147: PUSH
49148: LD_INT 1
49150: PUSH
49151: EMPTY
49152: LIST
49153: LIST
49154: PUSH
49155: LD_INT 1
49157: NEG
49158: PUSH
49159: LD_INT 0
49161: PUSH
49162: EMPTY
49163: LIST
49164: LIST
49165: PUSH
49166: LD_INT 1
49168: NEG
49169: PUSH
49170: LD_INT 1
49172: NEG
49173: PUSH
49174: EMPTY
49175: LIST
49176: LIST
49177: PUSH
49178: LD_INT 1
49180: PUSH
49181: LD_INT 1
49183: NEG
49184: PUSH
49185: EMPTY
49186: LIST
49187: LIST
49188: PUSH
49189: LD_INT 1
49191: NEG
49192: PUSH
49193: LD_INT 1
49195: PUSH
49196: EMPTY
49197: LIST
49198: LIST
49199: PUSH
49200: EMPTY
49201: LIST
49202: LIST
49203: LIST
49204: LIST
49205: LIST
49206: LIST
49207: LIST
49208: LIST
49209: LIST
49210: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
49211: LD_ADDR_VAR 0 38
49215: PUSH
49216: LD_INT 0
49218: PUSH
49219: LD_INT 0
49221: PUSH
49222: EMPTY
49223: LIST
49224: LIST
49225: PUSH
49226: LD_INT 0
49228: PUSH
49229: LD_INT 1
49231: NEG
49232: PUSH
49233: EMPTY
49234: LIST
49235: LIST
49236: PUSH
49237: LD_INT 1
49239: PUSH
49240: LD_INT 0
49242: PUSH
49243: EMPTY
49244: LIST
49245: LIST
49246: PUSH
49247: LD_INT 1
49249: PUSH
49250: LD_INT 1
49252: PUSH
49253: EMPTY
49254: LIST
49255: LIST
49256: PUSH
49257: LD_INT 0
49259: PUSH
49260: LD_INT 1
49262: PUSH
49263: EMPTY
49264: LIST
49265: LIST
49266: PUSH
49267: LD_INT 1
49269: NEG
49270: PUSH
49271: LD_INT 0
49273: PUSH
49274: EMPTY
49275: LIST
49276: LIST
49277: PUSH
49278: LD_INT 1
49280: NEG
49281: PUSH
49282: LD_INT 1
49284: NEG
49285: PUSH
49286: EMPTY
49287: LIST
49288: LIST
49289: PUSH
49290: LD_INT 2
49292: PUSH
49293: LD_INT 1
49295: PUSH
49296: EMPTY
49297: LIST
49298: LIST
49299: PUSH
49300: LD_INT 2
49302: NEG
49303: PUSH
49304: LD_INT 1
49306: NEG
49307: PUSH
49308: EMPTY
49309: LIST
49310: LIST
49311: PUSH
49312: EMPTY
49313: LIST
49314: LIST
49315: LIST
49316: LIST
49317: LIST
49318: LIST
49319: LIST
49320: LIST
49321: LIST
49322: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
49323: LD_ADDR_VAR 0 39
49327: PUSH
49328: LD_INT 0
49330: PUSH
49331: LD_INT 0
49333: PUSH
49334: EMPTY
49335: LIST
49336: LIST
49337: PUSH
49338: LD_INT 0
49340: PUSH
49341: LD_INT 1
49343: NEG
49344: PUSH
49345: EMPTY
49346: LIST
49347: LIST
49348: PUSH
49349: LD_INT 1
49351: PUSH
49352: LD_INT 0
49354: PUSH
49355: EMPTY
49356: LIST
49357: LIST
49358: PUSH
49359: LD_INT 1
49361: PUSH
49362: LD_INT 1
49364: PUSH
49365: EMPTY
49366: LIST
49367: LIST
49368: PUSH
49369: LD_INT 0
49371: PUSH
49372: LD_INT 1
49374: PUSH
49375: EMPTY
49376: LIST
49377: LIST
49378: PUSH
49379: LD_INT 1
49381: NEG
49382: PUSH
49383: LD_INT 0
49385: PUSH
49386: EMPTY
49387: LIST
49388: LIST
49389: PUSH
49390: LD_INT 1
49392: NEG
49393: PUSH
49394: LD_INT 1
49396: NEG
49397: PUSH
49398: EMPTY
49399: LIST
49400: LIST
49401: PUSH
49402: LD_INT 1
49404: NEG
49405: PUSH
49406: LD_INT 2
49408: NEG
49409: PUSH
49410: EMPTY
49411: LIST
49412: LIST
49413: PUSH
49414: LD_INT 1
49416: PUSH
49417: LD_INT 2
49419: PUSH
49420: EMPTY
49421: LIST
49422: LIST
49423: PUSH
49424: EMPTY
49425: LIST
49426: LIST
49427: LIST
49428: LIST
49429: LIST
49430: LIST
49431: LIST
49432: LIST
49433: LIST
49434: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
49435: LD_ADDR_VAR 0 40
49439: PUSH
49440: LD_INT 0
49442: PUSH
49443: LD_INT 0
49445: PUSH
49446: EMPTY
49447: LIST
49448: LIST
49449: PUSH
49450: LD_INT 0
49452: PUSH
49453: LD_INT 1
49455: NEG
49456: PUSH
49457: EMPTY
49458: LIST
49459: LIST
49460: PUSH
49461: LD_INT 1
49463: PUSH
49464: LD_INT 0
49466: PUSH
49467: EMPTY
49468: LIST
49469: LIST
49470: PUSH
49471: LD_INT 1
49473: PUSH
49474: LD_INT 1
49476: PUSH
49477: EMPTY
49478: LIST
49479: LIST
49480: PUSH
49481: LD_INT 0
49483: PUSH
49484: LD_INT 1
49486: PUSH
49487: EMPTY
49488: LIST
49489: LIST
49490: PUSH
49491: LD_INT 1
49493: NEG
49494: PUSH
49495: LD_INT 0
49497: PUSH
49498: EMPTY
49499: LIST
49500: LIST
49501: PUSH
49502: LD_INT 1
49504: NEG
49505: PUSH
49506: LD_INT 1
49508: NEG
49509: PUSH
49510: EMPTY
49511: LIST
49512: LIST
49513: PUSH
49514: LD_INT 1
49516: PUSH
49517: LD_INT 1
49519: NEG
49520: PUSH
49521: EMPTY
49522: LIST
49523: LIST
49524: PUSH
49525: LD_INT 1
49527: NEG
49528: PUSH
49529: LD_INT 1
49531: PUSH
49532: EMPTY
49533: LIST
49534: LIST
49535: PUSH
49536: EMPTY
49537: LIST
49538: LIST
49539: LIST
49540: LIST
49541: LIST
49542: LIST
49543: LIST
49544: LIST
49545: LIST
49546: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49547: LD_ADDR_VAR 0 41
49551: PUSH
49552: LD_INT 0
49554: PUSH
49555: LD_INT 0
49557: PUSH
49558: EMPTY
49559: LIST
49560: LIST
49561: PUSH
49562: LD_INT 0
49564: PUSH
49565: LD_INT 1
49567: NEG
49568: PUSH
49569: EMPTY
49570: LIST
49571: LIST
49572: PUSH
49573: LD_INT 1
49575: PUSH
49576: LD_INT 0
49578: PUSH
49579: EMPTY
49580: LIST
49581: LIST
49582: PUSH
49583: LD_INT 1
49585: PUSH
49586: LD_INT 1
49588: PUSH
49589: EMPTY
49590: LIST
49591: LIST
49592: PUSH
49593: LD_INT 0
49595: PUSH
49596: LD_INT 1
49598: PUSH
49599: EMPTY
49600: LIST
49601: LIST
49602: PUSH
49603: LD_INT 1
49605: NEG
49606: PUSH
49607: LD_INT 0
49609: PUSH
49610: EMPTY
49611: LIST
49612: LIST
49613: PUSH
49614: LD_INT 1
49616: NEG
49617: PUSH
49618: LD_INT 1
49620: NEG
49621: PUSH
49622: EMPTY
49623: LIST
49624: LIST
49625: PUSH
49626: LD_INT 1
49628: NEG
49629: PUSH
49630: LD_INT 2
49632: NEG
49633: PUSH
49634: EMPTY
49635: LIST
49636: LIST
49637: PUSH
49638: LD_INT 1
49640: PUSH
49641: LD_INT 1
49643: NEG
49644: PUSH
49645: EMPTY
49646: LIST
49647: LIST
49648: PUSH
49649: LD_INT 2
49651: PUSH
49652: LD_INT 0
49654: PUSH
49655: EMPTY
49656: LIST
49657: LIST
49658: PUSH
49659: LD_INT 2
49661: PUSH
49662: LD_INT 1
49664: PUSH
49665: EMPTY
49666: LIST
49667: LIST
49668: PUSH
49669: LD_INT 2
49671: PUSH
49672: LD_INT 2
49674: PUSH
49675: EMPTY
49676: LIST
49677: LIST
49678: PUSH
49679: LD_INT 1
49681: PUSH
49682: LD_INT 2
49684: PUSH
49685: EMPTY
49686: LIST
49687: LIST
49688: PUSH
49689: LD_INT 1
49691: NEG
49692: PUSH
49693: LD_INT 1
49695: PUSH
49696: EMPTY
49697: LIST
49698: LIST
49699: PUSH
49700: LD_INT 2
49702: NEG
49703: PUSH
49704: LD_INT 0
49706: PUSH
49707: EMPTY
49708: LIST
49709: LIST
49710: PUSH
49711: LD_INT 2
49713: NEG
49714: PUSH
49715: LD_INT 1
49717: NEG
49718: PUSH
49719: EMPTY
49720: LIST
49721: LIST
49722: PUSH
49723: LD_INT 2
49725: NEG
49726: PUSH
49727: LD_INT 2
49729: NEG
49730: PUSH
49731: EMPTY
49732: LIST
49733: LIST
49734: PUSH
49735: LD_INT 2
49737: NEG
49738: PUSH
49739: LD_INT 3
49741: NEG
49742: PUSH
49743: EMPTY
49744: LIST
49745: LIST
49746: PUSH
49747: LD_INT 2
49749: PUSH
49750: LD_INT 1
49752: NEG
49753: PUSH
49754: EMPTY
49755: LIST
49756: LIST
49757: PUSH
49758: LD_INT 3
49760: PUSH
49761: LD_INT 0
49763: PUSH
49764: EMPTY
49765: LIST
49766: LIST
49767: PUSH
49768: LD_INT 3
49770: PUSH
49771: LD_INT 1
49773: PUSH
49774: EMPTY
49775: LIST
49776: LIST
49777: PUSH
49778: LD_INT 3
49780: PUSH
49781: LD_INT 2
49783: PUSH
49784: EMPTY
49785: LIST
49786: LIST
49787: PUSH
49788: LD_INT 3
49790: PUSH
49791: LD_INT 3
49793: PUSH
49794: EMPTY
49795: LIST
49796: LIST
49797: PUSH
49798: LD_INT 2
49800: PUSH
49801: LD_INT 3
49803: PUSH
49804: EMPTY
49805: LIST
49806: LIST
49807: PUSH
49808: LD_INT 2
49810: NEG
49811: PUSH
49812: LD_INT 1
49814: PUSH
49815: EMPTY
49816: LIST
49817: LIST
49818: PUSH
49819: LD_INT 3
49821: NEG
49822: PUSH
49823: LD_INT 0
49825: PUSH
49826: EMPTY
49827: LIST
49828: LIST
49829: PUSH
49830: LD_INT 3
49832: NEG
49833: PUSH
49834: LD_INT 1
49836: NEG
49837: PUSH
49838: EMPTY
49839: LIST
49840: LIST
49841: PUSH
49842: LD_INT 3
49844: NEG
49845: PUSH
49846: LD_INT 2
49848: NEG
49849: PUSH
49850: EMPTY
49851: LIST
49852: LIST
49853: PUSH
49854: LD_INT 3
49856: NEG
49857: PUSH
49858: LD_INT 3
49860: NEG
49861: PUSH
49862: EMPTY
49863: LIST
49864: LIST
49865: PUSH
49866: EMPTY
49867: LIST
49868: LIST
49869: LIST
49870: LIST
49871: LIST
49872: LIST
49873: LIST
49874: LIST
49875: LIST
49876: LIST
49877: LIST
49878: LIST
49879: LIST
49880: LIST
49881: LIST
49882: LIST
49883: LIST
49884: LIST
49885: LIST
49886: LIST
49887: LIST
49888: LIST
49889: LIST
49890: LIST
49891: LIST
49892: LIST
49893: LIST
49894: LIST
49895: LIST
49896: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49897: LD_ADDR_VAR 0 42
49901: PUSH
49902: LD_INT 0
49904: PUSH
49905: LD_INT 0
49907: PUSH
49908: EMPTY
49909: LIST
49910: LIST
49911: PUSH
49912: LD_INT 0
49914: PUSH
49915: LD_INT 1
49917: NEG
49918: PUSH
49919: EMPTY
49920: LIST
49921: LIST
49922: PUSH
49923: LD_INT 1
49925: PUSH
49926: LD_INT 0
49928: PUSH
49929: EMPTY
49930: LIST
49931: LIST
49932: PUSH
49933: LD_INT 1
49935: PUSH
49936: LD_INT 1
49938: PUSH
49939: EMPTY
49940: LIST
49941: LIST
49942: PUSH
49943: LD_INT 0
49945: PUSH
49946: LD_INT 1
49948: PUSH
49949: EMPTY
49950: LIST
49951: LIST
49952: PUSH
49953: LD_INT 1
49955: NEG
49956: PUSH
49957: LD_INT 0
49959: PUSH
49960: EMPTY
49961: LIST
49962: LIST
49963: PUSH
49964: LD_INT 1
49966: NEG
49967: PUSH
49968: LD_INT 1
49970: NEG
49971: PUSH
49972: EMPTY
49973: LIST
49974: LIST
49975: PUSH
49976: LD_INT 1
49978: NEG
49979: PUSH
49980: LD_INT 2
49982: NEG
49983: PUSH
49984: EMPTY
49985: LIST
49986: LIST
49987: PUSH
49988: LD_INT 0
49990: PUSH
49991: LD_INT 2
49993: NEG
49994: PUSH
49995: EMPTY
49996: LIST
49997: LIST
49998: PUSH
49999: LD_INT 1
50001: PUSH
50002: LD_INT 1
50004: NEG
50005: PUSH
50006: EMPTY
50007: LIST
50008: LIST
50009: PUSH
50010: LD_INT 2
50012: PUSH
50013: LD_INT 1
50015: PUSH
50016: EMPTY
50017: LIST
50018: LIST
50019: PUSH
50020: LD_INT 2
50022: PUSH
50023: LD_INT 2
50025: PUSH
50026: EMPTY
50027: LIST
50028: LIST
50029: PUSH
50030: LD_INT 1
50032: PUSH
50033: LD_INT 2
50035: PUSH
50036: EMPTY
50037: LIST
50038: LIST
50039: PUSH
50040: LD_INT 0
50042: PUSH
50043: LD_INT 2
50045: PUSH
50046: EMPTY
50047: LIST
50048: LIST
50049: PUSH
50050: LD_INT 1
50052: NEG
50053: PUSH
50054: LD_INT 1
50056: PUSH
50057: EMPTY
50058: LIST
50059: LIST
50060: PUSH
50061: LD_INT 2
50063: NEG
50064: PUSH
50065: LD_INT 1
50067: NEG
50068: PUSH
50069: EMPTY
50070: LIST
50071: LIST
50072: PUSH
50073: LD_INT 2
50075: NEG
50076: PUSH
50077: LD_INT 2
50079: NEG
50080: PUSH
50081: EMPTY
50082: LIST
50083: LIST
50084: PUSH
50085: LD_INT 2
50087: NEG
50088: PUSH
50089: LD_INT 3
50091: NEG
50092: PUSH
50093: EMPTY
50094: LIST
50095: LIST
50096: PUSH
50097: LD_INT 1
50099: NEG
50100: PUSH
50101: LD_INT 3
50103: NEG
50104: PUSH
50105: EMPTY
50106: LIST
50107: LIST
50108: PUSH
50109: LD_INT 0
50111: PUSH
50112: LD_INT 3
50114: NEG
50115: PUSH
50116: EMPTY
50117: LIST
50118: LIST
50119: PUSH
50120: LD_INT 1
50122: PUSH
50123: LD_INT 2
50125: NEG
50126: PUSH
50127: EMPTY
50128: LIST
50129: LIST
50130: PUSH
50131: LD_INT 3
50133: PUSH
50134: LD_INT 2
50136: PUSH
50137: EMPTY
50138: LIST
50139: LIST
50140: PUSH
50141: LD_INT 3
50143: PUSH
50144: LD_INT 3
50146: PUSH
50147: EMPTY
50148: LIST
50149: LIST
50150: PUSH
50151: LD_INT 2
50153: PUSH
50154: LD_INT 3
50156: PUSH
50157: EMPTY
50158: LIST
50159: LIST
50160: PUSH
50161: LD_INT 1
50163: PUSH
50164: LD_INT 3
50166: PUSH
50167: EMPTY
50168: LIST
50169: LIST
50170: PUSH
50171: LD_INT 0
50173: PUSH
50174: LD_INT 3
50176: PUSH
50177: EMPTY
50178: LIST
50179: LIST
50180: PUSH
50181: LD_INT 1
50183: NEG
50184: PUSH
50185: LD_INT 2
50187: PUSH
50188: EMPTY
50189: LIST
50190: LIST
50191: PUSH
50192: LD_INT 3
50194: NEG
50195: PUSH
50196: LD_INT 2
50198: NEG
50199: PUSH
50200: EMPTY
50201: LIST
50202: LIST
50203: PUSH
50204: LD_INT 3
50206: NEG
50207: PUSH
50208: LD_INT 3
50210: NEG
50211: PUSH
50212: EMPTY
50213: LIST
50214: LIST
50215: PUSH
50216: EMPTY
50217: LIST
50218: LIST
50219: LIST
50220: LIST
50221: LIST
50222: LIST
50223: LIST
50224: LIST
50225: LIST
50226: LIST
50227: LIST
50228: LIST
50229: LIST
50230: LIST
50231: LIST
50232: LIST
50233: LIST
50234: LIST
50235: LIST
50236: LIST
50237: LIST
50238: LIST
50239: LIST
50240: LIST
50241: LIST
50242: LIST
50243: LIST
50244: LIST
50245: LIST
50246: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50247: LD_ADDR_VAR 0 43
50251: PUSH
50252: LD_INT 0
50254: PUSH
50255: LD_INT 0
50257: PUSH
50258: EMPTY
50259: LIST
50260: LIST
50261: PUSH
50262: LD_INT 0
50264: PUSH
50265: LD_INT 1
50267: NEG
50268: PUSH
50269: EMPTY
50270: LIST
50271: LIST
50272: PUSH
50273: LD_INT 1
50275: PUSH
50276: LD_INT 0
50278: PUSH
50279: EMPTY
50280: LIST
50281: LIST
50282: PUSH
50283: LD_INT 1
50285: PUSH
50286: LD_INT 1
50288: PUSH
50289: EMPTY
50290: LIST
50291: LIST
50292: PUSH
50293: LD_INT 0
50295: PUSH
50296: LD_INT 1
50298: PUSH
50299: EMPTY
50300: LIST
50301: LIST
50302: PUSH
50303: LD_INT 1
50305: NEG
50306: PUSH
50307: LD_INT 0
50309: PUSH
50310: EMPTY
50311: LIST
50312: LIST
50313: PUSH
50314: LD_INT 1
50316: NEG
50317: PUSH
50318: LD_INT 1
50320: NEG
50321: PUSH
50322: EMPTY
50323: LIST
50324: LIST
50325: PUSH
50326: LD_INT 1
50328: NEG
50329: PUSH
50330: LD_INT 2
50332: NEG
50333: PUSH
50334: EMPTY
50335: LIST
50336: LIST
50337: PUSH
50338: LD_INT 0
50340: PUSH
50341: LD_INT 2
50343: NEG
50344: PUSH
50345: EMPTY
50346: LIST
50347: LIST
50348: PUSH
50349: LD_INT 1
50351: PUSH
50352: LD_INT 1
50354: NEG
50355: PUSH
50356: EMPTY
50357: LIST
50358: LIST
50359: PUSH
50360: LD_INT 2
50362: PUSH
50363: LD_INT 0
50365: PUSH
50366: EMPTY
50367: LIST
50368: LIST
50369: PUSH
50370: LD_INT 2
50372: PUSH
50373: LD_INT 1
50375: PUSH
50376: EMPTY
50377: LIST
50378: LIST
50379: PUSH
50380: LD_INT 1
50382: PUSH
50383: LD_INT 2
50385: PUSH
50386: EMPTY
50387: LIST
50388: LIST
50389: PUSH
50390: LD_INT 0
50392: PUSH
50393: LD_INT 2
50395: PUSH
50396: EMPTY
50397: LIST
50398: LIST
50399: PUSH
50400: LD_INT 1
50402: NEG
50403: PUSH
50404: LD_INT 1
50406: PUSH
50407: EMPTY
50408: LIST
50409: LIST
50410: PUSH
50411: LD_INT 2
50413: NEG
50414: PUSH
50415: LD_INT 0
50417: PUSH
50418: EMPTY
50419: LIST
50420: LIST
50421: PUSH
50422: LD_INT 2
50424: NEG
50425: PUSH
50426: LD_INT 1
50428: NEG
50429: PUSH
50430: EMPTY
50431: LIST
50432: LIST
50433: PUSH
50434: LD_INT 1
50436: NEG
50437: PUSH
50438: LD_INT 3
50440: NEG
50441: PUSH
50442: EMPTY
50443: LIST
50444: LIST
50445: PUSH
50446: LD_INT 0
50448: PUSH
50449: LD_INT 3
50451: NEG
50452: PUSH
50453: EMPTY
50454: LIST
50455: LIST
50456: PUSH
50457: LD_INT 1
50459: PUSH
50460: LD_INT 2
50462: NEG
50463: PUSH
50464: EMPTY
50465: LIST
50466: LIST
50467: PUSH
50468: LD_INT 2
50470: PUSH
50471: LD_INT 1
50473: NEG
50474: PUSH
50475: EMPTY
50476: LIST
50477: LIST
50478: PUSH
50479: LD_INT 3
50481: PUSH
50482: LD_INT 0
50484: PUSH
50485: EMPTY
50486: LIST
50487: LIST
50488: PUSH
50489: LD_INT 3
50491: PUSH
50492: LD_INT 1
50494: PUSH
50495: EMPTY
50496: LIST
50497: LIST
50498: PUSH
50499: LD_INT 1
50501: PUSH
50502: LD_INT 3
50504: PUSH
50505: EMPTY
50506: LIST
50507: LIST
50508: PUSH
50509: LD_INT 0
50511: PUSH
50512: LD_INT 3
50514: PUSH
50515: EMPTY
50516: LIST
50517: LIST
50518: PUSH
50519: LD_INT 1
50521: NEG
50522: PUSH
50523: LD_INT 2
50525: PUSH
50526: EMPTY
50527: LIST
50528: LIST
50529: PUSH
50530: LD_INT 2
50532: NEG
50533: PUSH
50534: LD_INT 1
50536: PUSH
50537: EMPTY
50538: LIST
50539: LIST
50540: PUSH
50541: LD_INT 3
50543: NEG
50544: PUSH
50545: LD_INT 0
50547: PUSH
50548: EMPTY
50549: LIST
50550: LIST
50551: PUSH
50552: LD_INT 3
50554: NEG
50555: PUSH
50556: LD_INT 1
50558: NEG
50559: PUSH
50560: EMPTY
50561: LIST
50562: LIST
50563: PUSH
50564: EMPTY
50565: LIST
50566: LIST
50567: LIST
50568: LIST
50569: LIST
50570: LIST
50571: LIST
50572: LIST
50573: LIST
50574: LIST
50575: LIST
50576: LIST
50577: LIST
50578: LIST
50579: LIST
50580: LIST
50581: LIST
50582: LIST
50583: LIST
50584: LIST
50585: LIST
50586: LIST
50587: LIST
50588: LIST
50589: LIST
50590: LIST
50591: LIST
50592: LIST
50593: LIST
50594: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50595: LD_ADDR_VAR 0 44
50599: PUSH
50600: LD_INT 0
50602: PUSH
50603: LD_INT 0
50605: PUSH
50606: EMPTY
50607: LIST
50608: LIST
50609: PUSH
50610: LD_INT 0
50612: PUSH
50613: LD_INT 1
50615: NEG
50616: PUSH
50617: EMPTY
50618: LIST
50619: LIST
50620: PUSH
50621: LD_INT 1
50623: PUSH
50624: LD_INT 0
50626: PUSH
50627: EMPTY
50628: LIST
50629: LIST
50630: PUSH
50631: LD_INT 1
50633: PUSH
50634: LD_INT 1
50636: PUSH
50637: EMPTY
50638: LIST
50639: LIST
50640: PUSH
50641: LD_INT 0
50643: PUSH
50644: LD_INT 1
50646: PUSH
50647: EMPTY
50648: LIST
50649: LIST
50650: PUSH
50651: LD_INT 1
50653: NEG
50654: PUSH
50655: LD_INT 0
50657: PUSH
50658: EMPTY
50659: LIST
50660: LIST
50661: PUSH
50662: LD_INT 1
50664: NEG
50665: PUSH
50666: LD_INT 1
50668: NEG
50669: PUSH
50670: EMPTY
50671: LIST
50672: LIST
50673: PUSH
50674: LD_INT 1
50676: NEG
50677: PUSH
50678: LD_INT 2
50680: NEG
50681: PUSH
50682: EMPTY
50683: LIST
50684: LIST
50685: PUSH
50686: LD_INT 1
50688: PUSH
50689: LD_INT 1
50691: NEG
50692: PUSH
50693: EMPTY
50694: LIST
50695: LIST
50696: PUSH
50697: LD_INT 2
50699: PUSH
50700: LD_INT 0
50702: PUSH
50703: EMPTY
50704: LIST
50705: LIST
50706: PUSH
50707: LD_INT 2
50709: PUSH
50710: LD_INT 1
50712: PUSH
50713: EMPTY
50714: LIST
50715: LIST
50716: PUSH
50717: LD_INT 2
50719: PUSH
50720: LD_INT 2
50722: PUSH
50723: EMPTY
50724: LIST
50725: LIST
50726: PUSH
50727: LD_INT 1
50729: PUSH
50730: LD_INT 2
50732: PUSH
50733: EMPTY
50734: LIST
50735: LIST
50736: PUSH
50737: LD_INT 1
50739: NEG
50740: PUSH
50741: LD_INT 1
50743: PUSH
50744: EMPTY
50745: LIST
50746: LIST
50747: PUSH
50748: LD_INT 2
50750: NEG
50751: PUSH
50752: LD_INT 0
50754: PUSH
50755: EMPTY
50756: LIST
50757: LIST
50758: PUSH
50759: LD_INT 2
50761: NEG
50762: PUSH
50763: LD_INT 1
50765: NEG
50766: PUSH
50767: EMPTY
50768: LIST
50769: LIST
50770: PUSH
50771: LD_INT 2
50773: NEG
50774: PUSH
50775: LD_INT 2
50777: NEG
50778: PUSH
50779: EMPTY
50780: LIST
50781: LIST
50782: PUSH
50783: LD_INT 2
50785: NEG
50786: PUSH
50787: LD_INT 3
50789: NEG
50790: PUSH
50791: EMPTY
50792: LIST
50793: LIST
50794: PUSH
50795: LD_INT 2
50797: PUSH
50798: LD_INT 1
50800: NEG
50801: PUSH
50802: EMPTY
50803: LIST
50804: LIST
50805: PUSH
50806: LD_INT 3
50808: PUSH
50809: LD_INT 0
50811: PUSH
50812: EMPTY
50813: LIST
50814: LIST
50815: PUSH
50816: LD_INT 3
50818: PUSH
50819: LD_INT 1
50821: PUSH
50822: EMPTY
50823: LIST
50824: LIST
50825: PUSH
50826: LD_INT 3
50828: PUSH
50829: LD_INT 2
50831: PUSH
50832: EMPTY
50833: LIST
50834: LIST
50835: PUSH
50836: LD_INT 3
50838: PUSH
50839: LD_INT 3
50841: PUSH
50842: EMPTY
50843: LIST
50844: LIST
50845: PUSH
50846: LD_INT 2
50848: PUSH
50849: LD_INT 3
50851: PUSH
50852: EMPTY
50853: LIST
50854: LIST
50855: PUSH
50856: LD_INT 2
50858: NEG
50859: PUSH
50860: LD_INT 1
50862: PUSH
50863: EMPTY
50864: LIST
50865: LIST
50866: PUSH
50867: LD_INT 3
50869: NEG
50870: PUSH
50871: LD_INT 0
50873: PUSH
50874: EMPTY
50875: LIST
50876: LIST
50877: PUSH
50878: LD_INT 3
50880: NEG
50881: PUSH
50882: LD_INT 1
50884: NEG
50885: PUSH
50886: EMPTY
50887: LIST
50888: LIST
50889: PUSH
50890: LD_INT 3
50892: NEG
50893: PUSH
50894: LD_INT 2
50896: NEG
50897: PUSH
50898: EMPTY
50899: LIST
50900: LIST
50901: PUSH
50902: LD_INT 3
50904: NEG
50905: PUSH
50906: LD_INT 3
50908: NEG
50909: PUSH
50910: EMPTY
50911: LIST
50912: LIST
50913: PUSH
50914: EMPTY
50915: LIST
50916: LIST
50917: LIST
50918: LIST
50919: LIST
50920: LIST
50921: LIST
50922: LIST
50923: LIST
50924: LIST
50925: LIST
50926: LIST
50927: LIST
50928: LIST
50929: LIST
50930: LIST
50931: LIST
50932: LIST
50933: LIST
50934: LIST
50935: LIST
50936: LIST
50937: LIST
50938: LIST
50939: LIST
50940: LIST
50941: LIST
50942: LIST
50943: LIST
50944: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50945: LD_ADDR_VAR 0 45
50949: PUSH
50950: LD_INT 0
50952: PUSH
50953: LD_INT 0
50955: PUSH
50956: EMPTY
50957: LIST
50958: LIST
50959: PUSH
50960: LD_INT 0
50962: PUSH
50963: LD_INT 1
50965: NEG
50966: PUSH
50967: EMPTY
50968: LIST
50969: LIST
50970: PUSH
50971: LD_INT 1
50973: PUSH
50974: LD_INT 0
50976: PUSH
50977: EMPTY
50978: LIST
50979: LIST
50980: PUSH
50981: LD_INT 1
50983: PUSH
50984: LD_INT 1
50986: PUSH
50987: EMPTY
50988: LIST
50989: LIST
50990: PUSH
50991: LD_INT 0
50993: PUSH
50994: LD_INT 1
50996: PUSH
50997: EMPTY
50998: LIST
50999: LIST
51000: PUSH
51001: LD_INT 1
51003: NEG
51004: PUSH
51005: LD_INT 0
51007: PUSH
51008: EMPTY
51009: LIST
51010: LIST
51011: PUSH
51012: LD_INT 1
51014: NEG
51015: PUSH
51016: LD_INT 1
51018: NEG
51019: PUSH
51020: EMPTY
51021: LIST
51022: LIST
51023: PUSH
51024: LD_INT 1
51026: NEG
51027: PUSH
51028: LD_INT 2
51030: NEG
51031: PUSH
51032: EMPTY
51033: LIST
51034: LIST
51035: PUSH
51036: LD_INT 0
51038: PUSH
51039: LD_INT 2
51041: NEG
51042: PUSH
51043: EMPTY
51044: LIST
51045: LIST
51046: PUSH
51047: LD_INT 1
51049: PUSH
51050: LD_INT 1
51052: NEG
51053: PUSH
51054: EMPTY
51055: LIST
51056: LIST
51057: PUSH
51058: LD_INT 2
51060: PUSH
51061: LD_INT 1
51063: PUSH
51064: EMPTY
51065: LIST
51066: LIST
51067: PUSH
51068: LD_INT 2
51070: PUSH
51071: LD_INT 2
51073: PUSH
51074: EMPTY
51075: LIST
51076: LIST
51077: PUSH
51078: LD_INT 1
51080: PUSH
51081: LD_INT 2
51083: PUSH
51084: EMPTY
51085: LIST
51086: LIST
51087: PUSH
51088: LD_INT 0
51090: PUSH
51091: LD_INT 2
51093: PUSH
51094: EMPTY
51095: LIST
51096: LIST
51097: PUSH
51098: LD_INT 1
51100: NEG
51101: PUSH
51102: LD_INT 1
51104: PUSH
51105: EMPTY
51106: LIST
51107: LIST
51108: PUSH
51109: LD_INT 2
51111: NEG
51112: PUSH
51113: LD_INT 1
51115: NEG
51116: PUSH
51117: EMPTY
51118: LIST
51119: LIST
51120: PUSH
51121: LD_INT 2
51123: NEG
51124: PUSH
51125: LD_INT 2
51127: NEG
51128: PUSH
51129: EMPTY
51130: LIST
51131: LIST
51132: PUSH
51133: LD_INT 2
51135: NEG
51136: PUSH
51137: LD_INT 3
51139: NEG
51140: PUSH
51141: EMPTY
51142: LIST
51143: LIST
51144: PUSH
51145: LD_INT 1
51147: NEG
51148: PUSH
51149: LD_INT 3
51151: NEG
51152: PUSH
51153: EMPTY
51154: LIST
51155: LIST
51156: PUSH
51157: LD_INT 0
51159: PUSH
51160: LD_INT 3
51162: NEG
51163: PUSH
51164: EMPTY
51165: LIST
51166: LIST
51167: PUSH
51168: LD_INT 1
51170: PUSH
51171: LD_INT 2
51173: NEG
51174: PUSH
51175: EMPTY
51176: LIST
51177: LIST
51178: PUSH
51179: LD_INT 3
51181: PUSH
51182: LD_INT 2
51184: PUSH
51185: EMPTY
51186: LIST
51187: LIST
51188: PUSH
51189: LD_INT 3
51191: PUSH
51192: LD_INT 3
51194: PUSH
51195: EMPTY
51196: LIST
51197: LIST
51198: PUSH
51199: LD_INT 2
51201: PUSH
51202: LD_INT 3
51204: PUSH
51205: EMPTY
51206: LIST
51207: LIST
51208: PUSH
51209: LD_INT 1
51211: PUSH
51212: LD_INT 3
51214: PUSH
51215: EMPTY
51216: LIST
51217: LIST
51218: PUSH
51219: LD_INT 0
51221: PUSH
51222: LD_INT 3
51224: PUSH
51225: EMPTY
51226: LIST
51227: LIST
51228: PUSH
51229: LD_INT 1
51231: NEG
51232: PUSH
51233: LD_INT 2
51235: PUSH
51236: EMPTY
51237: LIST
51238: LIST
51239: PUSH
51240: LD_INT 3
51242: NEG
51243: PUSH
51244: LD_INT 2
51246: NEG
51247: PUSH
51248: EMPTY
51249: LIST
51250: LIST
51251: PUSH
51252: LD_INT 3
51254: NEG
51255: PUSH
51256: LD_INT 3
51258: NEG
51259: PUSH
51260: EMPTY
51261: LIST
51262: LIST
51263: PUSH
51264: EMPTY
51265: LIST
51266: LIST
51267: LIST
51268: LIST
51269: LIST
51270: LIST
51271: LIST
51272: LIST
51273: LIST
51274: LIST
51275: LIST
51276: LIST
51277: LIST
51278: LIST
51279: LIST
51280: LIST
51281: LIST
51282: LIST
51283: LIST
51284: LIST
51285: LIST
51286: LIST
51287: LIST
51288: LIST
51289: LIST
51290: LIST
51291: LIST
51292: LIST
51293: LIST
51294: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51295: LD_ADDR_VAR 0 46
51299: PUSH
51300: LD_INT 0
51302: PUSH
51303: LD_INT 0
51305: PUSH
51306: EMPTY
51307: LIST
51308: LIST
51309: PUSH
51310: LD_INT 0
51312: PUSH
51313: LD_INT 1
51315: NEG
51316: PUSH
51317: EMPTY
51318: LIST
51319: LIST
51320: PUSH
51321: LD_INT 1
51323: PUSH
51324: LD_INT 0
51326: PUSH
51327: EMPTY
51328: LIST
51329: LIST
51330: PUSH
51331: LD_INT 1
51333: PUSH
51334: LD_INT 1
51336: PUSH
51337: EMPTY
51338: LIST
51339: LIST
51340: PUSH
51341: LD_INT 0
51343: PUSH
51344: LD_INT 1
51346: PUSH
51347: EMPTY
51348: LIST
51349: LIST
51350: PUSH
51351: LD_INT 1
51353: NEG
51354: PUSH
51355: LD_INT 0
51357: PUSH
51358: EMPTY
51359: LIST
51360: LIST
51361: PUSH
51362: LD_INT 1
51364: NEG
51365: PUSH
51366: LD_INT 1
51368: NEG
51369: PUSH
51370: EMPTY
51371: LIST
51372: LIST
51373: PUSH
51374: LD_INT 1
51376: NEG
51377: PUSH
51378: LD_INT 2
51380: NEG
51381: PUSH
51382: EMPTY
51383: LIST
51384: LIST
51385: PUSH
51386: LD_INT 0
51388: PUSH
51389: LD_INT 2
51391: NEG
51392: PUSH
51393: EMPTY
51394: LIST
51395: LIST
51396: PUSH
51397: LD_INT 1
51399: PUSH
51400: LD_INT 1
51402: NEG
51403: PUSH
51404: EMPTY
51405: LIST
51406: LIST
51407: PUSH
51408: LD_INT 2
51410: PUSH
51411: LD_INT 0
51413: PUSH
51414: EMPTY
51415: LIST
51416: LIST
51417: PUSH
51418: LD_INT 2
51420: PUSH
51421: LD_INT 1
51423: PUSH
51424: EMPTY
51425: LIST
51426: LIST
51427: PUSH
51428: LD_INT 1
51430: PUSH
51431: LD_INT 2
51433: PUSH
51434: EMPTY
51435: LIST
51436: LIST
51437: PUSH
51438: LD_INT 0
51440: PUSH
51441: LD_INT 2
51443: PUSH
51444: EMPTY
51445: LIST
51446: LIST
51447: PUSH
51448: LD_INT 1
51450: NEG
51451: PUSH
51452: LD_INT 1
51454: PUSH
51455: EMPTY
51456: LIST
51457: LIST
51458: PUSH
51459: LD_INT 2
51461: NEG
51462: PUSH
51463: LD_INT 0
51465: PUSH
51466: EMPTY
51467: LIST
51468: LIST
51469: PUSH
51470: LD_INT 2
51472: NEG
51473: PUSH
51474: LD_INT 1
51476: NEG
51477: PUSH
51478: EMPTY
51479: LIST
51480: LIST
51481: PUSH
51482: LD_INT 1
51484: NEG
51485: PUSH
51486: LD_INT 3
51488: NEG
51489: PUSH
51490: EMPTY
51491: LIST
51492: LIST
51493: PUSH
51494: LD_INT 0
51496: PUSH
51497: LD_INT 3
51499: NEG
51500: PUSH
51501: EMPTY
51502: LIST
51503: LIST
51504: PUSH
51505: LD_INT 1
51507: PUSH
51508: LD_INT 2
51510: NEG
51511: PUSH
51512: EMPTY
51513: LIST
51514: LIST
51515: PUSH
51516: LD_INT 2
51518: PUSH
51519: LD_INT 1
51521: NEG
51522: PUSH
51523: EMPTY
51524: LIST
51525: LIST
51526: PUSH
51527: LD_INT 3
51529: PUSH
51530: LD_INT 0
51532: PUSH
51533: EMPTY
51534: LIST
51535: LIST
51536: PUSH
51537: LD_INT 3
51539: PUSH
51540: LD_INT 1
51542: PUSH
51543: EMPTY
51544: LIST
51545: LIST
51546: PUSH
51547: LD_INT 1
51549: PUSH
51550: LD_INT 3
51552: PUSH
51553: EMPTY
51554: LIST
51555: LIST
51556: PUSH
51557: LD_INT 0
51559: PUSH
51560: LD_INT 3
51562: PUSH
51563: EMPTY
51564: LIST
51565: LIST
51566: PUSH
51567: LD_INT 1
51569: NEG
51570: PUSH
51571: LD_INT 2
51573: PUSH
51574: EMPTY
51575: LIST
51576: LIST
51577: PUSH
51578: LD_INT 2
51580: NEG
51581: PUSH
51582: LD_INT 1
51584: PUSH
51585: EMPTY
51586: LIST
51587: LIST
51588: PUSH
51589: LD_INT 3
51591: NEG
51592: PUSH
51593: LD_INT 0
51595: PUSH
51596: EMPTY
51597: LIST
51598: LIST
51599: PUSH
51600: LD_INT 3
51602: NEG
51603: PUSH
51604: LD_INT 1
51606: NEG
51607: PUSH
51608: EMPTY
51609: LIST
51610: LIST
51611: PUSH
51612: EMPTY
51613: LIST
51614: LIST
51615: LIST
51616: LIST
51617: LIST
51618: LIST
51619: LIST
51620: LIST
51621: LIST
51622: LIST
51623: LIST
51624: LIST
51625: LIST
51626: LIST
51627: LIST
51628: LIST
51629: LIST
51630: LIST
51631: LIST
51632: LIST
51633: LIST
51634: LIST
51635: LIST
51636: LIST
51637: LIST
51638: LIST
51639: LIST
51640: LIST
51641: LIST
51642: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51643: LD_ADDR_VAR 0 47
51647: PUSH
51648: LD_INT 0
51650: PUSH
51651: LD_INT 0
51653: PUSH
51654: EMPTY
51655: LIST
51656: LIST
51657: PUSH
51658: LD_INT 0
51660: PUSH
51661: LD_INT 1
51663: NEG
51664: PUSH
51665: EMPTY
51666: LIST
51667: LIST
51668: PUSH
51669: LD_INT 1
51671: PUSH
51672: LD_INT 0
51674: PUSH
51675: EMPTY
51676: LIST
51677: LIST
51678: PUSH
51679: LD_INT 1
51681: PUSH
51682: LD_INT 1
51684: PUSH
51685: EMPTY
51686: LIST
51687: LIST
51688: PUSH
51689: LD_INT 0
51691: PUSH
51692: LD_INT 1
51694: PUSH
51695: EMPTY
51696: LIST
51697: LIST
51698: PUSH
51699: LD_INT 1
51701: NEG
51702: PUSH
51703: LD_INT 0
51705: PUSH
51706: EMPTY
51707: LIST
51708: LIST
51709: PUSH
51710: LD_INT 1
51712: NEG
51713: PUSH
51714: LD_INT 1
51716: NEG
51717: PUSH
51718: EMPTY
51719: LIST
51720: LIST
51721: PUSH
51722: LD_INT 1
51724: NEG
51725: PUSH
51726: LD_INT 2
51728: NEG
51729: PUSH
51730: EMPTY
51731: LIST
51732: LIST
51733: PUSH
51734: LD_INT 0
51736: PUSH
51737: LD_INT 2
51739: NEG
51740: PUSH
51741: EMPTY
51742: LIST
51743: LIST
51744: PUSH
51745: LD_INT 1
51747: PUSH
51748: LD_INT 1
51750: NEG
51751: PUSH
51752: EMPTY
51753: LIST
51754: LIST
51755: PUSH
51756: LD_INT 2
51758: NEG
51759: PUSH
51760: LD_INT 1
51762: NEG
51763: PUSH
51764: EMPTY
51765: LIST
51766: LIST
51767: PUSH
51768: LD_INT 2
51770: NEG
51771: PUSH
51772: LD_INT 2
51774: NEG
51775: PUSH
51776: EMPTY
51777: LIST
51778: LIST
51779: PUSH
51780: EMPTY
51781: LIST
51782: LIST
51783: LIST
51784: LIST
51785: LIST
51786: LIST
51787: LIST
51788: LIST
51789: LIST
51790: LIST
51791: LIST
51792: LIST
51793: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
51794: LD_ADDR_VAR 0 48
51798: PUSH
51799: LD_INT 0
51801: PUSH
51802: LD_INT 0
51804: PUSH
51805: EMPTY
51806: LIST
51807: LIST
51808: PUSH
51809: LD_INT 0
51811: PUSH
51812: LD_INT 1
51814: NEG
51815: PUSH
51816: EMPTY
51817: LIST
51818: LIST
51819: PUSH
51820: LD_INT 1
51822: PUSH
51823: LD_INT 0
51825: PUSH
51826: EMPTY
51827: LIST
51828: LIST
51829: PUSH
51830: LD_INT 1
51832: PUSH
51833: LD_INT 1
51835: PUSH
51836: EMPTY
51837: LIST
51838: LIST
51839: PUSH
51840: LD_INT 0
51842: PUSH
51843: LD_INT 1
51845: PUSH
51846: EMPTY
51847: LIST
51848: LIST
51849: PUSH
51850: LD_INT 1
51852: NEG
51853: PUSH
51854: LD_INT 0
51856: PUSH
51857: EMPTY
51858: LIST
51859: LIST
51860: PUSH
51861: LD_INT 1
51863: NEG
51864: PUSH
51865: LD_INT 1
51867: NEG
51868: PUSH
51869: EMPTY
51870: LIST
51871: LIST
51872: PUSH
51873: LD_INT 1
51875: NEG
51876: PUSH
51877: LD_INT 2
51879: NEG
51880: PUSH
51881: EMPTY
51882: LIST
51883: LIST
51884: PUSH
51885: LD_INT 0
51887: PUSH
51888: LD_INT 2
51890: NEG
51891: PUSH
51892: EMPTY
51893: LIST
51894: LIST
51895: PUSH
51896: LD_INT 1
51898: PUSH
51899: LD_INT 1
51901: NEG
51902: PUSH
51903: EMPTY
51904: LIST
51905: LIST
51906: PUSH
51907: LD_INT 2
51909: PUSH
51910: LD_INT 0
51912: PUSH
51913: EMPTY
51914: LIST
51915: LIST
51916: PUSH
51917: LD_INT 2
51919: PUSH
51920: LD_INT 1
51922: PUSH
51923: EMPTY
51924: LIST
51925: LIST
51926: PUSH
51927: EMPTY
51928: LIST
51929: LIST
51930: LIST
51931: LIST
51932: LIST
51933: LIST
51934: LIST
51935: LIST
51936: LIST
51937: LIST
51938: LIST
51939: LIST
51940: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
51941: LD_ADDR_VAR 0 49
51945: PUSH
51946: LD_INT 0
51948: PUSH
51949: LD_INT 0
51951: PUSH
51952: EMPTY
51953: LIST
51954: LIST
51955: PUSH
51956: LD_INT 0
51958: PUSH
51959: LD_INT 1
51961: NEG
51962: PUSH
51963: EMPTY
51964: LIST
51965: LIST
51966: PUSH
51967: LD_INT 1
51969: PUSH
51970: LD_INT 0
51972: PUSH
51973: EMPTY
51974: LIST
51975: LIST
51976: PUSH
51977: LD_INT 1
51979: PUSH
51980: LD_INT 1
51982: PUSH
51983: EMPTY
51984: LIST
51985: LIST
51986: PUSH
51987: LD_INT 0
51989: PUSH
51990: LD_INT 1
51992: PUSH
51993: EMPTY
51994: LIST
51995: LIST
51996: PUSH
51997: LD_INT 1
51999: NEG
52000: PUSH
52001: LD_INT 0
52003: PUSH
52004: EMPTY
52005: LIST
52006: LIST
52007: PUSH
52008: LD_INT 1
52010: NEG
52011: PUSH
52012: LD_INT 1
52014: NEG
52015: PUSH
52016: EMPTY
52017: LIST
52018: LIST
52019: PUSH
52020: LD_INT 1
52022: PUSH
52023: LD_INT 1
52025: NEG
52026: PUSH
52027: EMPTY
52028: LIST
52029: LIST
52030: PUSH
52031: LD_INT 2
52033: PUSH
52034: LD_INT 0
52036: PUSH
52037: EMPTY
52038: LIST
52039: LIST
52040: PUSH
52041: LD_INT 2
52043: PUSH
52044: LD_INT 1
52046: PUSH
52047: EMPTY
52048: LIST
52049: LIST
52050: PUSH
52051: LD_INT 2
52053: PUSH
52054: LD_INT 2
52056: PUSH
52057: EMPTY
52058: LIST
52059: LIST
52060: PUSH
52061: LD_INT 1
52063: PUSH
52064: LD_INT 2
52066: PUSH
52067: EMPTY
52068: LIST
52069: LIST
52070: PUSH
52071: EMPTY
52072: LIST
52073: LIST
52074: LIST
52075: LIST
52076: LIST
52077: LIST
52078: LIST
52079: LIST
52080: LIST
52081: LIST
52082: LIST
52083: LIST
52084: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
52085: LD_ADDR_VAR 0 50
52089: PUSH
52090: LD_INT 0
52092: PUSH
52093: LD_INT 0
52095: PUSH
52096: EMPTY
52097: LIST
52098: LIST
52099: PUSH
52100: LD_INT 0
52102: PUSH
52103: LD_INT 1
52105: NEG
52106: PUSH
52107: EMPTY
52108: LIST
52109: LIST
52110: PUSH
52111: LD_INT 1
52113: PUSH
52114: LD_INT 0
52116: PUSH
52117: EMPTY
52118: LIST
52119: LIST
52120: PUSH
52121: LD_INT 1
52123: PUSH
52124: LD_INT 1
52126: PUSH
52127: EMPTY
52128: LIST
52129: LIST
52130: PUSH
52131: LD_INT 0
52133: PUSH
52134: LD_INT 1
52136: PUSH
52137: EMPTY
52138: LIST
52139: LIST
52140: PUSH
52141: LD_INT 1
52143: NEG
52144: PUSH
52145: LD_INT 0
52147: PUSH
52148: EMPTY
52149: LIST
52150: LIST
52151: PUSH
52152: LD_INT 1
52154: NEG
52155: PUSH
52156: LD_INT 1
52158: NEG
52159: PUSH
52160: EMPTY
52161: LIST
52162: LIST
52163: PUSH
52164: LD_INT 2
52166: PUSH
52167: LD_INT 1
52169: PUSH
52170: EMPTY
52171: LIST
52172: LIST
52173: PUSH
52174: LD_INT 2
52176: PUSH
52177: LD_INT 2
52179: PUSH
52180: EMPTY
52181: LIST
52182: LIST
52183: PUSH
52184: LD_INT 1
52186: PUSH
52187: LD_INT 2
52189: PUSH
52190: EMPTY
52191: LIST
52192: LIST
52193: PUSH
52194: LD_INT 0
52196: PUSH
52197: LD_INT 2
52199: PUSH
52200: EMPTY
52201: LIST
52202: LIST
52203: PUSH
52204: LD_INT 1
52206: NEG
52207: PUSH
52208: LD_INT 1
52210: PUSH
52211: EMPTY
52212: LIST
52213: LIST
52214: PUSH
52215: EMPTY
52216: LIST
52217: LIST
52218: LIST
52219: LIST
52220: LIST
52221: LIST
52222: LIST
52223: LIST
52224: LIST
52225: LIST
52226: LIST
52227: LIST
52228: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
52229: LD_ADDR_VAR 0 51
52233: PUSH
52234: LD_INT 0
52236: PUSH
52237: LD_INT 0
52239: PUSH
52240: EMPTY
52241: LIST
52242: LIST
52243: PUSH
52244: LD_INT 0
52246: PUSH
52247: LD_INT 1
52249: NEG
52250: PUSH
52251: EMPTY
52252: LIST
52253: LIST
52254: PUSH
52255: LD_INT 1
52257: PUSH
52258: LD_INT 0
52260: PUSH
52261: EMPTY
52262: LIST
52263: LIST
52264: PUSH
52265: LD_INT 1
52267: PUSH
52268: LD_INT 1
52270: PUSH
52271: EMPTY
52272: LIST
52273: LIST
52274: PUSH
52275: LD_INT 0
52277: PUSH
52278: LD_INT 1
52280: PUSH
52281: EMPTY
52282: LIST
52283: LIST
52284: PUSH
52285: LD_INT 1
52287: NEG
52288: PUSH
52289: LD_INT 0
52291: PUSH
52292: EMPTY
52293: LIST
52294: LIST
52295: PUSH
52296: LD_INT 1
52298: NEG
52299: PUSH
52300: LD_INT 1
52302: NEG
52303: PUSH
52304: EMPTY
52305: LIST
52306: LIST
52307: PUSH
52308: LD_INT 1
52310: PUSH
52311: LD_INT 2
52313: PUSH
52314: EMPTY
52315: LIST
52316: LIST
52317: PUSH
52318: LD_INT 0
52320: PUSH
52321: LD_INT 2
52323: PUSH
52324: EMPTY
52325: LIST
52326: LIST
52327: PUSH
52328: LD_INT 1
52330: NEG
52331: PUSH
52332: LD_INT 1
52334: PUSH
52335: EMPTY
52336: LIST
52337: LIST
52338: PUSH
52339: LD_INT 2
52341: NEG
52342: PUSH
52343: LD_INT 0
52345: PUSH
52346: EMPTY
52347: LIST
52348: LIST
52349: PUSH
52350: LD_INT 2
52352: NEG
52353: PUSH
52354: LD_INT 1
52356: NEG
52357: PUSH
52358: EMPTY
52359: LIST
52360: LIST
52361: PUSH
52362: EMPTY
52363: LIST
52364: LIST
52365: LIST
52366: LIST
52367: LIST
52368: LIST
52369: LIST
52370: LIST
52371: LIST
52372: LIST
52373: LIST
52374: LIST
52375: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52376: LD_ADDR_VAR 0 52
52380: PUSH
52381: LD_INT 0
52383: PUSH
52384: LD_INT 0
52386: PUSH
52387: EMPTY
52388: LIST
52389: LIST
52390: PUSH
52391: LD_INT 0
52393: PUSH
52394: LD_INT 1
52396: NEG
52397: PUSH
52398: EMPTY
52399: LIST
52400: LIST
52401: PUSH
52402: LD_INT 1
52404: PUSH
52405: LD_INT 0
52407: PUSH
52408: EMPTY
52409: LIST
52410: LIST
52411: PUSH
52412: LD_INT 1
52414: PUSH
52415: LD_INT 1
52417: PUSH
52418: EMPTY
52419: LIST
52420: LIST
52421: PUSH
52422: LD_INT 0
52424: PUSH
52425: LD_INT 1
52427: PUSH
52428: EMPTY
52429: LIST
52430: LIST
52431: PUSH
52432: LD_INT 1
52434: NEG
52435: PUSH
52436: LD_INT 0
52438: PUSH
52439: EMPTY
52440: LIST
52441: LIST
52442: PUSH
52443: LD_INT 1
52445: NEG
52446: PUSH
52447: LD_INT 1
52449: NEG
52450: PUSH
52451: EMPTY
52452: LIST
52453: LIST
52454: PUSH
52455: LD_INT 1
52457: NEG
52458: PUSH
52459: LD_INT 2
52461: NEG
52462: PUSH
52463: EMPTY
52464: LIST
52465: LIST
52466: PUSH
52467: LD_INT 1
52469: NEG
52470: PUSH
52471: LD_INT 1
52473: PUSH
52474: EMPTY
52475: LIST
52476: LIST
52477: PUSH
52478: LD_INT 2
52480: NEG
52481: PUSH
52482: LD_INT 0
52484: PUSH
52485: EMPTY
52486: LIST
52487: LIST
52488: PUSH
52489: LD_INT 2
52491: NEG
52492: PUSH
52493: LD_INT 1
52495: NEG
52496: PUSH
52497: EMPTY
52498: LIST
52499: LIST
52500: PUSH
52501: LD_INT 2
52503: NEG
52504: PUSH
52505: LD_INT 2
52507: NEG
52508: PUSH
52509: EMPTY
52510: LIST
52511: LIST
52512: PUSH
52513: EMPTY
52514: LIST
52515: LIST
52516: LIST
52517: LIST
52518: LIST
52519: LIST
52520: LIST
52521: LIST
52522: LIST
52523: LIST
52524: LIST
52525: LIST
52526: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52527: LD_ADDR_VAR 0 53
52531: PUSH
52532: LD_INT 0
52534: PUSH
52535: LD_INT 0
52537: PUSH
52538: EMPTY
52539: LIST
52540: LIST
52541: PUSH
52542: LD_INT 0
52544: PUSH
52545: LD_INT 1
52547: NEG
52548: PUSH
52549: EMPTY
52550: LIST
52551: LIST
52552: PUSH
52553: LD_INT 1
52555: PUSH
52556: LD_INT 0
52558: PUSH
52559: EMPTY
52560: LIST
52561: LIST
52562: PUSH
52563: LD_INT 1
52565: PUSH
52566: LD_INT 1
52568: PUSH
52569: EMPTY
52570: LIST
52571: LIST
52572: PUSH
52573: LD_INT 0
52575: PUSH
52576: LD_INT 1
52578: PUSH
52579: EMPTY
52580: LIST
52581: LIST
52582: PUSH
52583: LD_INT 1
52585: NEG
52586: PUSH
52587: LD_INT 0
52589: PUSH
52590: EMPTY
52591: LIST
52592: LIST
52593: PUSH
52594: LD_INT 1
52596: NEG
52597: PUSH
52598: LD_INT 1
52600: NEG
52601: PUSH
52602: EMPTY
52603: LIST
52604: LIST
52605: PUSH
52606: LD_INT 1
52608: NEG
52609: PUSH
52610: LD_INT 2
52612: NEG
52613: PUSH
52614: EMPTY
52615: LIST
52616: LIST
52617: PUSH
52618: LD_INT 0
52620: PUSH
52621: LD_INT 2
52623: NEG
52624: PUSH
52625: EMPTY
52626: LIST
52627: LIST
52628: PUSH
52629: LD_INT 1
52631: PUSH
52632: LD_INT 1
52634: NEG
52635: PUSH
52636: EMPTY
52637: LIST
52638: LIST
52639: PUSH
52640: LD_INT 2
52642: PUSH
52643: LD_INT 0
52645: PUSH
52646: EMPTY
52647: LIST
52648: LIST
52649: PUSH
52650: LD_INT 2
52652: PUSH
52653: LD_INT 1
52655: PUSH
52656: EMPTY
52657: LIST
52658: LIST
52659: PUSH
52660: LD_INT 2
52662: PUSH
52663: LD_INT 2
52665: PUSH
52666: EMPTY
52667: LIST
52668: LIST
52669: PUSH
52670: LD_INT 1
52672: PUSH
52673: LD_INT 2
52675: PUSH
52676: EMPTY
52677: LIST
52678: LIST
52679: PUSH
52680: LD_INT 0
52682: PUSH
52683: LD_INT 2
52685: PUSH
52686: EMPTY
52687: LIST
52688: LIST
52689: PUSH
52690: LD_INT 1
52692: NEG
52693: PUSH
52694: LD_INT 1
52696: PUSH
52697: EMPTY
52698: LIST
52699: LIST
52700: PUSH
52701: LD_INT 2
52703: NEG
52704: PUSH
52705: LD_INT 0
52707: PUSH
52708: EMPTY
52709: LIST
52710: LIST
52711: PUSH
52712: LD_INT 2
52714: NEG
52715: PUSH
52716: LD_INT 1
52718: NEG
52719: PUSH
52720: EMPTY
52721: LIST
52722: LIST
52723: PUSH
52724: LD_INT 2
52726: NEG
52727: PUSH
52728: LD_INT 2
52730: NEG
52731: PUSH
52732: EMPTY
52733: LIST
52734: LIST
52735: PUSH
52736: EMPTY
52737: LIST
52738: LIST
52739: LIST
52740: LIST
52741: LIST
52742: LIST
52743: LIST
52744: LIST
52745: LIST
52746: LIST
52747: LIST
52748: LIST
52749: LIST
52750: LIST
52751: LIST
52752: LIST
52753: LIST
52754: LIST
52755: LIST
52756: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52757: LD_ADDR_VAR 0 54
52761: PUSH
52762: LD_INT 0
52764: PUSH
52765: LD_INT 0
52767: PUSH
52768: EMPTY
52769: LIST
52770: LIST
52771: PUSH
52772: LD_INT 0
52774: PUSH
52775: LD_INT 1
52777: NEG
52778: PUSH
52779: EMPTY
52780: LIST
52781: LIST
52782: PUSH
52783: LD_INT 1
52785: PUSH
52786: LD_INT 0
52788: PUSH
52789: EMPTY
52790: LIST
52791: LIST
52792: PUSH
52793: LD_INT 1
52795: PUSH
52796: LD_INT 1
52798: PUSH
52799: EMPTY
52800: LIST
52801: LIST
52802: PUSH
52803: LD_INT 0
52805: PUSH
52806: LD_INT 1
52808: PUSH
52809: EMPTY
52810: LIST
52811: LIST
52812: PUSH
52813: LD_INT 1
52815: NEG
52816: PUSH
52817: LD_INT 0
52819: PUSH
52820: EMPTY
52821: LIST
52822: LIST
52823: PUSH
52824: LD_INT 1
52826: NEG
52827: PUSH
52828: LD_INT 1
52830: NEG
52831: PUSH
52832: EMPTY
52833: LIST
52834: LIST
52835: PUSH
52836: LD_INT 1
52838: NEG
52839: PUSH
52840: LD_INT 2
52842: NEG
52843: PUSH
52844: EMPTY
52845: LIST
52846: LIST
52847: PUSH
52848: LD_INT 0
52850: PUSH
52851: LD_INT 2
52853: NEG
52854: PUSH
52855: EMPTY
52856: LIST
52857: LIST
52858: PUSH
52859: LD_INT 1
52861: PUSH
52862: LD_INT 1
52864: NEG
52865: PUSH
52866: EMPTY
52867: LIST
52868: LIST
52869: PUSH
52870: LD_INT 2
52872: PUSH
52873: LD_INT 0
52875: PUSH
52876: EMPTY
52877: LIST
52878: LIST
52879: PUSH
52880: LD_INT 2
52882: PUSH
52883: LD_INT 1
52885: PUSH
52886: EMPTY
52887: LIST
52888: LIST
52889: PUSH
52890: LD_INT 2
52892: PUSH
52893: LD_INT 2
52895: PUSH
52896: EMPTY
52897: LIST
52898: LIST
52899: PUSH
52900: LD_INT 1
52902: PUSH
52903: LD_INT 2
52905: PUSH
52906: EMPTY
52907: LIST
52908: LIST
52909: PUSH
52910: LD_INT 0
52912: PUSH
52913: LD_INT 2
52915: PUSH
52916: EMPTY
52917: LIST
52918: LIST
52919: PUSH
52920: LD_INT 1
52922: NEG
52923: PUSH
52924: LD_INT 1
52926: PUSH
52927: EMPTY
52928: LIST
52929: LIST
52930: PUSH
52931: LD_INT 2
52933: NEG
52934: PUSH
52935: LD_INT 0
52937: PUSH
52938: EMPTY
52939: LIST
52940: LIST
52941: PUSH
52942: LD_INT 2
52944: NEG
52945: PUSH
52946: LD_INT 1
52948: NEG
52949: PUSH
52950: EMPTY
52951: LIST
52952: LIST
52953: PUSH
52954: LD_INT 2
52956: NEG
52957: PUSH
52958: LD_INT 2
52960: NEG
52961: PUSH
52962: EMPTY
52963: LIST
52964: LIST
52965: PUSH
52966: EMPTY
52967: LIST
52968: LIST
52969: LIST
52970: LIST
52971: LIST
52972: LIST
52973: LIST
52974: LIST
52975: LIST
52976: LIST
52977: LIST
52978: LIST
52979: LIST
52980: LIST
52981: LIST
52982: LIST
52983: LIST
52984: LIST
52985: LIST
52986: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52987: LD_ADDR_VAR 0 55
52991: PUSH
52992: LD_INT 0
52994: PUSH
52995: LD_INT 0
52997: PUSH
52998: EMPTY
52999: LIST
53000: LIST
53001: PUSH
53002: LD_INT 0
53004: PUSH
53005: LD_INT 1
53007: NEG
53008: PUSH
53009: EMPTY
53010: LIST
53011: LIST
53012: PUSH
53013: LD_INT 1
53015: PUSH
53016: LD_INT 0
53018: PUSH
53019: EMPTY
53020: LIST
53021: LIST
53022: PUSH
53023: LD_INT 1
53025: PUSH
53026: LD_INT 1
53028: PUSH
53029: EMPTY
53030: LIST
53031: LIST
53032: PUSH
53033: LD_INT 0
53035: PUSH
53036: LD_INT 1
53038: PUSH
53039: EMPTY
53040: LIST
53041: LIST
53042: PUSH
53043: LD_INT 1
53045: NEG
53046: PUSH
53047: LD_INT 0
53049: PUSH
53050: EMPTY
53051: LIST
53052: LIST
53053: PUSH
53054: LD_INT 1
53056: NEG
53057: PUSH
53058: LD_INT 1
53060: NEG
53061: PUSH
53062: EMPTY
53063: LIST
53064: LIST
53065: PUSH
53066: LD_INT 1
53068: NEG
53069: PUSH
53070: LD_INT 2
53072: NEG
53073: PUSH
53074: EMPTY
53075: LIST
53076: LIST
53077: PUSH
53078: LD_INT 0
53080: PUSH
53081: LD_INT 2
53083: NEG
53084: PUSH
53085: EMPTY
53086: LIST
53087: LIST
53088: PUSH
53089: LD_INT 1
53091: PUSH
53092: LD_INT 1
53094: NEG
53095: PUSH
53096: EMPTY
53097: LIST
53098: LIST
53099: PUSH
53100: LD_INT 2
53102: PUSH
53103: LD_INT 0
53105: PUSH
53106: EMPTY
53107: LIST
53108: LIST
53109: PUSH
53110: LD_INT 2
53112: PUSH
53113: LD_INT 1
53115: PUSH
53116: EMPTY
53117: LIST
53118: LIST
53119: PUSH
53120: LD_INT 2
53122: PUSH
53123: LD_INT 2
53125: PUSH
53126: EMPTY
53127: LIST
53128: LIST
53129: PUSH
53130: LD_INT 1
53132: PUSH
53133: LD_INT 2
53135: PUSH
53136: EMPTY
53137: LIST
53138: LIST
53139: PUSH
53140: LD_INT 0
53142: PUSH
53143: LD_INT 2
53145: PUSH
53146: EMPTY
53147: LIST
53148: LIST
53149: PUSH
53150: LD_INT 1
53152: NEG
53153: PUSH
53154: LD_INT 1
53156: PUSH
53157: EMPTY
53158: LIST
53159: LIST
53160: PUSH
53161: LD_INT 2
53163: NEG
53164: PUSH
53165: LD_INT 0
53167: PUSH
53168: EMPTY
53169: LIST
53170: LIST
53171: PUSH
53172: LD_INT 2
53174: NEG
53175: PUSH
53176: LD_INT 1
53178: NEG
53179: PUSH
53180: EMPTY
53181: LIST
53182: LIST
53183: PUSH
53184: LD_INT 2
53186: NEG
53187: PUSH
53188: LD_INT 2
53190: NEG
53191: PUSH
53192: EMPTY
53193: LIST
53194: LIST
53195: PUSH
53196: EMPTY
53197: LIST
53198: LIST
53199: LIST
53200: LIST
53201: LIST
53202: LIST
53203: LIST
53204: LIST
53205: LIST
53206: LIST
53207: LIST
53208: LIST
53209: LIST
53210: LIST
53211: LIST
53212: LIST
53213: LIST
53214: LIST
53215: LIST
53216: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53217: LD_ADDR_VAR 0 56
53221: PUSH
53222: LD_INT 0
53224: PUSH
53225: LD_INT 0
53227: PUSH
53228: EMPTY
53229: LIST
53230: LIST
53231: PUSH
53232: LD_INT 0
53234: PUSH
53235: LD_INT 1
53237: NEG
53238: PUSH
53239: EMPTY
53240: LIST
53241: LIST
53242: PUSH
53243: LD_INT 1
53245: PUSH
53246: LD_INT 0
53248: PUSH
53249: EMPTY
53250: LIST
53251: LIST
53252: PUSH
53253: LD_INT 1
53255: PUSH
53256: LD_INT 1
53258: PUSH
53259: EMPTY
53260: LIST
53261: LIST
53262: PUSH
53263: LD_INT 0
53265: PUSH
53266: LD_INT 1
53268: PUSH
53269: EMPTY
53270: LIST
53271: LIST
53272: PUSH
53273: LD_INT 1
53275: NEG
53276: PUSH
53277: LD_INT 0
53279: PUSH
53280: EMPTY
53281: LIST
53282: LIST
53283: PUSH
53284: LD_INT 1
53286: NEG
53287: PUSH
53288: LD_INT 1
53290: NEG
53291: PUSH
53292: EMPTY
53293: LIST
53294: LIST
53295: PUSH
53296: LD_INT 1
53298: NEG
53299: PUSH
53300: LD_INT 2
53302: NEG
53303: PUSH
53304: EMPTY
53305: LIST
53306: LIST
53307: PUSH
53308: LD_INT 0
53310: PUSH
53311: LD_INT 2
53313: NEG
53314: PUSH
53315: EMPTY
53316: LIST
53317: LIST
53318: PUSH
53319: LD_INT 1
53321: PUSH
53322: LD_INT 1
53324: NEG
53325: PUSH
53326: EMPTY
53327: LIST
53328: LIST
53329: PUSH
53330: LD_INT 2
53332: PUSH
53333: LD_INT 0
53335: PUSH
53336: EMPTY
53337: LIST
53338: LIST
53339: PUSH
53340: LD_INT 2
53342: PUSH
53343: LD_INT 1
53345: PUSH
53346: EMPTY
53347: LIST
53348: LIST
53349: PUSH
53350: LD_INT 2
53352: PUSH
53353: LD_INT 2
53355: PUSH
53356: EMPTY
53357: LIST
53358: LIST
53359: PUSH
53360: LD_INT 1
53362: PUSH
53363: LD_INT 2
53365: PUSH
53366: EMPTY
53367: LIST
53368: LIST
53369: PUSH
53370: LD_INT 0
53372: PUSH
53373: LD_INT 2
53375: PUSH
53376: EMPTY
53377: LIST
53378: LIST
53379: PUSH
53380: LD_INT 1
53382: NEG
53383: PUSH
53384: LD_INT 1
53386: PUSH
53387: EMPTY
53388: LIST
53389: LIST
53390: PUSH
53391: LD_INT 2
53393: NEG
53394: PUSH
53395: LD_INT 0
53397: PUSH
53398: EMPTY
53399: LIST
53400: LIST
53401: PUSH
53402: LD_INT 2
53404: NEG
53405: PUSH
53406: LD_INT 1
53408: NEG
53409: PUSH
53410: EMPTY
53411: LIST
53412: LIST
53413: PUSH
53414: LD_INT 2
53416: NEG
53417: PUSH
53418: LD_INT 2
53420: NEG
53421: PUSH
53422: EMPTY
53423: LIST
53424: LIST
53425: PUSH
53426: EMPTY
53427: LIST
53428: LIST
53429: LIST
53430: LIST
53431: LIST
53432: LIST
53433: LIST
53434: LIST
53435: LIST
53436: LIST
53437: LIST
53438: LIST
53439: LIST
53440: LIST
53441: LIST
53442: LIST
53443: LIST
53444: LIST
53445: LIST
53446: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53447: LD_ADDR_VAR 0 57
53451: PUSH
53452: LD_INT 0
53454: PUSH
53455: LD_INT 0
53457: PUSH
53458: EMPTY
53459: LIST
53460: LIST
53461: PUSH
53462: LD_INT 0
53464: PUSH
53465: LD_INT 1
53467: NEG
53468: PUSH
53469: EMPTY
53470: LIST
53471: LIST
53472: PUSH
53473: LD_INT 1
53475: PUSH
53476: LD_INT 0
53478: PUSH
53479: EMPTY
53480: LIST
53481: LIST
53482: PUSH
53483: LD_INT 1
53485: PUSH
53486: LD_INT 1
53488: PUSH
53489: EMPTY
53490: LIST
53491: LIST
53492: PUSH
53493: LD_INT 0
53495: PUSH
53496: LD_INT 1
53498: PUSH
53499: EMPTY
53500: LIST
53501: LIST
53502: PUSH
53503: LD_INT 1
53505: NEG
53506: PUSH
53507: LD_INT 0
53509: PUSH
53510: EMPTY
53511: LIST
53512: LIST
53513: PUSH
53514: LD_INT 1
53516: NEG
53517: PUSH
53518: LD_INT 1
53520: NEG
53521: PUSH
53522: EMPTY
53523: LIST
53524: LIST
53525: PUSH
53526: LD_INT 1
53528: NEG
53529: PUSH
53530: LD_INT 2
53532: NEG
53533: PUSH
53534: EMPTY
53535: LIST
53536: LIST
53537: PUSH
53538: LD_INT 0
53540: PUSH
53541: LD_INT 2
53543: NEG
53544: PUSH
53545: EMPTY
53546: LIST
53547: LIST
53548: PUSH
53549: LD_INT 1
53551: PUSH
53552: LD_INT 1
53554: NEG
53555: PUSH
53556: EMPTY
53557: LIST
53558: LIST
53559: PUSH
53560: LD_INT 2
53562: PUSH
53563: LD_INT 0
53565: PUSH
53566: EMPTY
53567: LIST
53568: LIST
53569: PUSH
53570: LD_INT 2
53572: PUSH
53573: LD_INT 1
53575: PUSH
53576: EMPTY
53577: LIST
53578: LIST
53579: PUSH
53580: LD_INT 2
53582: PUSH
53583: LD_INT 2
53585: PUSH
53586: EMPTY
53587: LIST
53588: LIST
53589: PUSH
53590: LD_INT 1
53592: PUSH
53593: LD_INT 2
53595: PUSH
53596: EMPTY
53597: LIST
53598: LIST
53599: PUSH
53600: LD_INT 0
53602: PUSH
53603: LD_INT 2
53605: PUSH
53606: EMPTY
53607: LIST
53608: LIST
53609: PUSH
53610: LD_INT 1
53612: NEG
53613: PUSH
53614: LD_INT 1
53616: PUSH
53617: EMPTY
53618: LIST
53619: LIST
53620: PUSH
53621: LD_INT 2
53623: NEG
53624: PUSH
53625: LD_INT 0
53627: PUSH
53628: EMPTY
53629: LIST
53630: LIST
53631: PUSH
53632: LD_INT 2
53634: NEG
53635: PUSH
53636: LD_INT 1
53638: NEG
53639: PUSH
53640: EMPTY
53641: LIST
53642: LIST
53643: PUSH
53644: LD_INT 2
53646: NEG
53647: PUSH
53648: LD_INT 2
53650: NEG
53651: PUSH
53652: EMPTY
53653: LIST
53654: LIST
53655: PUSH
53656: EMPTY
53657: LIST
53658: LIST
53659: LIST
53660: LIST
53661: LIST
53662: LIST
53663: LIST
53664: LIST
53665: LIST
53666: LIST
53667: LIST
53668: LIST
53669: LIST
53670: LIST
53671: LIST
53672: LIST
53673: LIST
53674: LIST
53675: LIST
53676: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53677: LD_ADDR_VAR 0 58
53681: PUSH
53682: LD_INT 0
53684: PUSH
53685: LD_INT 0
53687: PUSH
53688: EMPTY
53689: LIST
53690: LIST
53691: PUSH
53692: LD_INT 0
53694: PUSH
53695: LD_INT 1
53697: NEG
53698: PUSH
53699: EMPTY
53700: LIST
53701: LIST
53702: PUSH
53703: LD_INT 1
53705: PUSH
53706: LD_INT 0
53708: PUSH
53709: EMPTY
53710: LIST
53711: LIST
53712: PUSH
53713: LD_INT 1
53715: PUSH
53716: LD_INT 1
53718: PUSH
53719: EMPTY
53720: LIST
53721: LIST
53722: PUSH
53723: LD_INT 0
53725: PUSH
53726: LD_INT 1
53728: PUSH
53729: EMPTY
53730: LIST
53731: LIST
53732: PUSH
53733: LD_INT 1
53735: NEG
53736: PUSH
53737: LD_INT 0
53739: PUSH
53740: EMPTY
53741: LIST
53742: LIST
53743: PUSH
53744: LD_INT 1
53746: NEG
53747: PUSH
53748: LD_INT 1
53750: NEG
53751: PUSH
53752: EMPTY
53753: LIST
53754: LIST
53755: PUSH
53756: LD_INT 1
53758: NEG
53759: PUSH
53760: LD_INT 2
53762: NEG
53763: PUSH
53764: EMPTY
53765: LIST
53766: LIST
53767: PUSH
53768: LD_INT 0
53770: PUSH
53771: LD_INT 2
53773: NEG
53774: PUSH
53775: EMPTY
53776: LIST
53777: LIST
53778: PUSH
53779: LD_INT 1
53781: PUSH
53782: LD_INT 1
53784: NEG
53785: PUSH
53786: EMPTY
53787: LIST
53788: LIST
53789: PUSH
53790: LD_INT 2
53792: PUSH
53793: LD_INT 0
53795: PUSH
53796: EMPTY
53797: LIST
53798: LIST
53799: PUSH
53800: LD_INT 2
53802: PUSH
53803: LD_INT 1
53805: PUSH
53806: EMPTY
53807: LIST
53808: LIST
53809: PUSH
53810: LD_INT 2
53812: PUSH
53813: LD_INT 2
53815: PUSH
53816: EMPTY
53817: LIST
53818: LIST
53819: PUSH
53820: LD_INT 1
53822: PUSH
53823: LD_INT 2
53825: PUSH
53826: EMPTY
53827: LIST
53828: LIST
53829: PUSH
53830: LD_INT 0
53832: PUSH
53833: LD_INT 2
53835: PUSH
53836: EMPTY
53837: LIST
53838: LIST
53839: PUSH
53840: LD_INT 1
53842: NEG
53843: PUSH
53844: LD_INT 1
53846: PUSH
53847: EMPTY
53848: LIST
53849: LIST
53850: PUSH
53851: LD_INT 2
53853: NEG
53854: PUSH
53855: LD_INT 0
53857: PUSH
53858: EMPTY
53859: LIST
53860: LIST
53861: PUSH
53862: LD_INT 2
53864: NEG
53865: PUSH
53866: LD_INT 1
53868: NEG
53869: PUSH
53870: EMPTY
53871: LIST
53872: LIST
53873: PUSH
53874: LD_INT 2
53876: NEG
53877: PUSH
53878: LD_INT 2
53880: NEG
53881: PUSH
53882: EMPTY
53883: LIST
53884: LIST
53885: PUSH
53886: EMPTY
53887: LIST
53888: LIST
53889: LIST
53890: LIST
53891: LIST
53892: LIST
53893: LIST
53894: LIST
53895: LIST
53896: LIST
53897: LIST
53898: LIST
53899: LIST
53900: LIST
53901: LIST
53902: LIST
53903: LIST
53904: LIST
53905: LIST
53906: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53907: LD_ADDR_VAR 0 59
53911: PUSH
53912: LD_INT 0
53914: PUSH
53915: LD_INT 0
53917: PUSH
53918: EMPTY
53919: LIST
53920: LIST
53921: PUSH
53922: LD_INT 0
53924: PUSH
53925: LD_INT 1
53927: NEG
53928: PUSH
53929: EMPTY
53930: LIST
53931: LIST
53932: PUSH
53933: LD_INT 1
53935: PUSH
53936: LD_INT 0
53938: PUSH
53939: EMPTY
53940: LIST
53941: LIST
53942: PUSH
53943: LD_INT 1
53945: PUSH
53946: LD_INT 1
53948: PUSH
53949: EMPTY
53950: LIST
53951: LIST
53952: PUSH
53953: LD_INT 0
53955: PUSH
53956: LD_INT 1
53958: PUSH
53959: EMPTY
53960: LIST
53961: LIST
53962: PUSH
53963: LD_INT 1
53965: NEG
53966: PUSH
53967: LD_INT 0
53969: PUSH
53970: EMPTY
53971: LIST
53972: LIST
53973: PUSH
53974: LD_INT 1
53976: NEG
53977: PUSH
53978: LD_INT 1
53980: NEG
53981: PUSH
53982: EMPTY
53983: LIST
53984: LIST
53985: PUSH
53986: EMPTY
53987: LIST
53988: LIST
53989: LIST
53990: LIST
53991: LIST
53992: LIST
53993: LIST
53994: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53995: LD_ADDR_VAR 0 60
53999: PUSH
54000: LD_INT 0
54002: PUSH
54003: LD_INT 0
54005: PUSH
54006: EMPTY
54007: LIST
54008: LIST
54009: PUSH
54010: LD_INT 0
54012: PUSH
54013: LD_INT 1
54015: NEG
54016: PUSH
54017: EMPTY
54018: LIST
54019: LIST
54020: PUSH
54021: LD_INT 1
54023: PUSH
54024: LD_INT 0
54026: PUSH
54027: EMPTY
54028: LIST
54029: LIST
54030: PUSH
54031: LD_INT 1
54033: PUSH
54034: LD_INT 1
54036: PUSH
54037: EMPTY
54038: LIST
54039: LIST
54040: PUSH
54041: LD_INT 0
54043: PUSH
54044: LD_INT 1
54046: PUSH
54047: EMPTY
54048: LIST
54049: LIST
54050: PUSH
54051: LD_INT 1
54053: NEG
54054: PUSH
54055: LD_INT 0
54057: PUSH
54058: EMPTY
54059: LIST
54060: LIST
54061: PUSH
54062: LD_INT 1
54064: NEG
54065: PUSH
54066: LD_INT 1
54068: NEG
54069: PUSH
54070: EMPTY
54071: LIST
54072: LIST
54073: PUSH
54074: EMPTY
54075: LIST
54076: LIST
54077: LIST
54078: LIST
54079: LIST
54080: LIST
54081: LIST
54082: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54083: LD_ADDR_VAR 0 61
54087: PUSH
54088: LD_INT 0
54090: PUSH
54091: LD_INT 0
54093: PUSH
54094: EMPTY
54095: LIST
54096: LIST
54097: PUSH
54098: LD_INT 0
54100: PUSH
54101: LD_INT 1
54103: NEG
54104: PUSH
54105: EMPTY
54106: LIST
54107: LIST
54108: PUSH
54109: LD_INT 1
54111: PUSH
54112: LD_INT 0
54114: PUSH
54115: EMPTY
54116: LIST
54117: LIST
54118: PUSH
54119: LD_INT 1
54121: PUSH
54122: LD_INT 1
54124: PUSH
54125: EMPTY
54126: LIST
54127: LIST
54128: PUSH
54129: LD_INT 0
54131: PUSH
54132: LD_INT 1
54134: PUSH
54135: EMPTY
54136: LIST
54137: LIST
54138: PUSH
54139: LD_INT 1
54141: NEG
54142: PUSH
54143: LD_INT 0
54145: PUSH
54146: EMPTY
54147: LIST
54148: LIST
54149: PUSH
54150: LD_INT 1
54152: NEG
54153: PUSH
54154: LD_INT 1
54156: NEG
54157: PUSH
54158: EMPTY
54159: LIST
54160: LIST
54161: PUSH
54162: EMPTY
54163: LIST
54164: LIST
54165: LIST
54166: LIST
54167: LIST
54168: LIST
54169: LIST
54170: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54171: LD_ADDR_VAR 0 62
54175: PUSH
54176: LD_INT 0
54178: PUSH
54179: LD_INT 0
54181: PUSH
54182: EMPTY
54183: LIST
54184: LIST
54185: PUSH
54186: LD_INT 0
54188: PUSH
54189: LD_INT 1
54191: NEG
54192: PUSH
54193: EMPTY
54194: LIST
54195: LIST
54196: PUSH
54197: LD_INT 1
54199: PUSH
54200: LD_INT 0
54202: PUSH
54203: EMPTY
54204: LIST
54205: LIST
54206: PUSH
54207: LD_INT 1
54209: PUSH
54210: LD_INT 1
54212: PUSH
54213: EMPTY
54214: LIST
54215: LIST
54216: PUSH
54217: LD_INT 0
54219: PUSH
54220: LD_INT 1
54222: PUSH
54223: EMPTY
54224: LIST
54225: LIST
54226: PUSH
54227: LD_INT 1
54229: NEG
54230: PUSH
54231: LD_INT 0
54233: PUSH
54234: EMPTY
54235: LIST
54236: LIST
54237: PUSH
54238: LD_INT 1
54240: NEG
54241: PUSH
54242: LD_INT 1
54244: NEG
54245: PUSH
54246: EMPTY
54247: LIST
54248: LIST
54249: PUSH
54250: EMPTY
54251: LIST
54252: LIST
54253: LIST
54254: LIST
54255: LIST
54256: LIST
54257: LIST
54258: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54259: LD_ADDR_VAR 0 63
54263: PUSH
54264: LD_INT 0
54266: PUSH
54267: LD_INT 0
54269: PUSH
54270: EMPTY
54271: LIST
54272: LIST
54273: PUSH
54274: LD_INT 0
54276: PUSH
54277: LD_INT 1
54279: NEG
54280: PUSH
54281: EMPTY
54282: LIST
54283: LIST
54284: PUSH
54285: LD_INT 1
54287: PUSH
54288: LD_INT 0
54290: PUSH
54291: EMPTY
54292: LIST
54293: LIST
54294: PUSH
54295: LD_INT 1
54297: PUSH
54298: LD_INT 1
54300: PUSH
54301: EMPTY
54302: LIST
54303: LIST
54304: PUSH
54305: LD_INT 0
54307: PUSH
54308: LD_INT 1
54310: PUSH
54311: EMPTY
54312: LIST
54313: LIST
54314: PUSH
54315: LD_INT 1
54317: NEG
54318: PUSH
54319: LD_INT 0
54321: PUSH
54322: EMPTY
54323: LIST
54324: LIST
54325: PUSH
54326: LD_INT 1
54328: NEG
54329: PUSH
54330: LD_INT 1
54332: NEG
54333: PUSH
54334: EMPTY
54335: LIST
54336: LIST
54337: PUSH
54338: EMPTY
54339: LIST
54340: LIST
54341: LIST
54342: LIST
54343: LIST
54344: LIST
54345: LIST
54346: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54347: LD_ADDR_VAR 0 64
54351: PUSH
54352: LD_INT 0
54354: PUSH
54355: LD_INT 0
54357: PUSH
54358: EMPTY
54359: LIST
54360: LIST
54361: PUSH
54362: LD_INT 0
54364: PUSH
54365: LD_INT 1
54367: NEG
54368: PUSH
54369: EMPTY
54370: LIST
54371: LIST
54372: PUSH
54373: LD_INT 1
54375: PUSH
54376: LD_INT 0
54378: PUSH
54379: EMPTY
54380: LIST
54381: LIST
54382: PUSH
54383: LD_INT 1
54385: PUSH
54386: LD_INT 1
54388: PUSH
54389: EMPTY
54390: LIST
54391: LIST
54392: PUSH
54393: LD_INT 0
54395: PUSH
54396: LD_INT 1
54398: PUSH
54399: EMPTY
54400: LIST
54401: LIST
54402: PUSH
54403: LD_INT 1
54405: NEG
54406: PUSH
54407: LD_INT 0
54409: PUSH
54410: EMPTY
54411: LIST
54412: LIST
54413: PUSH
54414: LD_INT 1
54416: NEG
54417: PUSH
54418: LD_INT 1
54420: NEG
54421: PUSH
54422: EMPTY
54423: LIST
54424: LIST
54425: PUSH
54426: EMPTY
54427: LIST
54428: LIST
54429: LIST
54430: LIST
54431: LIST
54432: LIST
54433: LIST
54434: ST_TO_ADDR
// end ; 1 :
54435: GO 60332
54437: LD_INT 1
54439: DOUBLE
54440: EQUAL
54441: IFTRUE 54445
54443: GO 57068
54445: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54446: LD_ADDR_VAR 0 11
54450: PUSH
54451: LD_INT 1
54453: NEG
54454: PUSH
54455: LD_INT 3
54457: NEG
54458: PUSH
54459: EMPTY
54460: LIST
54461: LIST
54462: PUSH
54463: LD_INT 0
54465: PUSH
54466: LD_INT 3
54468: NEG
54469: PUSH
54470: EMPTY
54471: LIST
54472: LIST
54473: PUSH
54474: LD_INT 1
54476: PUSH
54477: LD_INT 2
54479: NEG
54480: PUSH
54481: EMPTY
54482: LIST
54483: LIST
54484: PUSH
54485: EMPTY
54486: LIST
54487: LIST
54488: LIST
54489: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54490: LD_ADDR_VAR 0 12
54494: PUSH
54495: LD_INT 2
54497: PUSH
54498: LD_INT 1
54500: NEG
54501: PUSH
54502: EMPTY
54503: LIST
54504: LIST
54505: PUSH
54506: LD_INT 3
54508: PUSH
54509: LD_INT 0
54511: PUSH
54512: EMPTY
54513: LIST
54514: LIST
54515: PUSH
54516: LD_INT 3
54518: PUSH
54519: LD_INT 1
54521: PUSH
54522: EMPTY
54523: LIST
54524: LIST
54525: PUSH
54526: EMPTY
54527: LIST
54528: LIST
54529: LIST
54530: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54531: LD_ADDR_VAR 0 13
54535: PUSH
54536: LD_INT 3
54538: PUSH
54539: LD_INT 2
54541: PUSH
54542: EMPTY
54543: LIST
54544: LIST
54545: PUSH
54546: LD_INT 3
54548: PUSH
54549: LD_INT 3
54551: PUSH
54552: EMPTY
54553: LIST
54554: LIST
54555: PUSH
54556: LD_INT 2
54558: PUSH
54559: LD_INT 3
54561: PUSH
54562: EMPTY
54563: LIST
54564: LIST
54565: PUSH
54566: EMPTY
54567: LIST
54568: LIST
54569: LIST
54570: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54571: LD_ADDR_VAR 0 14
54575: PUSH
54576: LD_INT 1
54578: PUSH
54579: LD_INT 3
54581: PUSH
54582: EMPTY
54583: LIST
54584: LIST
54585: PUSH
54586: LD_INT 0
54588: PUSH
54589: LD_INT 3
54591: PUSH
54592: EMPTY
54593: LIST
54594: LIST
54595: PUSH
54596: LD_INT 1
54598: NEG
54599: PUSH
54600: LD_INT 2
54602: PUSH
54603: EMPTY
54604: LIST
54605: LIST
54606: PUSH
54607: EMPTY
54608: LIST
54609: LIST
54610: LIST
54611: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54612: LD_ADDR_VAR 0 15
54616: PUSH
54617: LD_INT 2
54619: NEG
54620: PUSH
54621: LD_INT 1
54623: PUSH
54624: EMPTY
54625: LIST
54626: LIST
54627: PUSH
54628: LD_INT 3
54630: NEG
54631: PUSH
54632: LD_INT 0
54634: PUSH
54635: EMPTY
54636: LIST
54637: LIST
54638: PUSH
54639: LD_INT 3
54641: NEG
54642: PUSH
54643: LD_INT 1
54645: NEG
54646: PUSH
54647: EMPTY
54648: LIST
54649: LIST
54650: PUSH
54651: EMPTY
54652: LIST
54653: LIST
54654: LIST
54655: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54656: LD_ADDR_VAR 0 16
54660: PUSH
54661: LD_INT 2
54663: NEG
54664: PUSH
54665: LD_INT 3
54667: NEG
54668: PUSH
54669: EMPTY
54670: LIST
54671: LIST
54672: PUSH
54673: LD_INT 3
54675: NEG
54676: PUSH
54677: LD_INT 2
54679: NEG
54680: PUSH
54681: EMPTY
54682: LIST
54683: LIST
54684: PUSH
54685: LD_INT 3
54687: NEG
54688: PUSH
54689: LD_INT 3
54691: NEG
54692: PUSH
54693: EMPTY
54694: LIST
54695: LIST
54696: PUSH
54697: EMPTY
54698: LIST
54699: LIST
54700: LIST
54701: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54702: LD_ADDR_VAR 0 17
54706: PUSH
54707: LD_INT 1
54709: NEG
54710: PUSH
54711: LD_INT 3
54713: NEG
54714: PUSH
54715: EMPTY
54716: LIST
54717: LIST
54718: PUSH
54719: LD_INT 0
54721: PUSH
54722: LD_INT 3
54724: NEG
54725: PUSH
54726: EMPTY
54727: LIST
54728: LIST
54729: PUSH
54730: LD_INT 1
54732: PUSH
54733: LD_INT 2
54735: NEG
54736: PUSH
54737: EMPTY
54738: LIST
54739: LIST
54740: PUSH
54741: EMPTY
54742: LIST
54743: LIST
54744: LIST
54745: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54746: LD_ADDR_VAR 0 18
54750: PUSH
54751: LD_INT 2
54753: PUSH
54754: LD_INT 1
54756: NEG
54757: PUSH
54758: EMPTY
54759: LIST
54760: LIST
54761: PUSH
54762: LD_INT 3
54764: PUSH
54765: LD_INT 0
54767: PUSH
54768: EMPTY
54769: LIST
54770: LIST
54771: PUSH
54772: LD_INT 3
54774: PUSH
54775: LD_INT 1
54777: PUSH
54778: EMPTY
54779: LIST
54780: LIST
54781: PUSH
54782: EMPTY
54783: LIST
54784: LIST
54785: LIST
54786: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54787: LD_ADDR_VAR 0 19
54791: PUSH
54792: LD_INT 3
54794: PUSH
54795: LD_INT 2
54797: PUSH
54798: EMPTY
54799: LIST
54800: LIST
54801: PUSH
54802: LD_INT 3
54804: PUSH
54805: LD_INT 3
54807: PUSH
54808: EMPTY
54809: LIST
54810: LIST
54811: PUSH
54812: LD_INT 2
54814: PUSH
54815: LD_INT 3
54817: PUSH
54818: EMPTY
54819: LIST
54820: LIST
54821: PUSH
54822: EMPTY
54823: LIST
54824: LIST
54825: LIST
54826: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54827: LD_ADDR_VAR 0 20
54831: PUSH
54832: LD_INT 1
54834: PUSH
54835: LD_INT 3
54837: PUSH
54838: EMPTY
54839: LIST
54840: LIST
54841: PUSH
54842: LD_INT 0
54844: PUSH
54845: LD_INT 3
54847: PUSH
54848: EMPTY
54849: LIST
54850: LIST
54851: PUSH
54852: LD_INT 1
54854: NEG
54855: PUSH
54856: LD_INT 2
54858: PUSH
54859: EMPTY
54860: LIST
54861: LIST
54862: PUSH
54863: EMPTY
54864: LIST
54865: LIST
54866: LIST
54867: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54868: LD_ADDR_VAR 0 21
54872: PUSH
54873: LD_INT 2
54875: NEG
54876: PUSH
54877: LD_INT 1
54879: PUSH
54880: EMPTY
54881: LIST
54882: LIST
54883: PUSH
54884: LD_INT 3
54886: NEG
54887: PUSH
54888: LD_INT 0
54890: PUSH
54891: EMPTY
54892: LIST
54893: LIST
54894: PUSH
54895: LD_INT 3
54897: NEG
54898: PUSH
54899: LD_INT 1
54901: NEG
54902: PUSH
54903: EMPTY
54904: LIST
54905: LIST
54906: PUSH
54907: EMPTY
54908: LIST
54909: LIST
54910: LIST
54911: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54912: LD_ADDR_VAR 0 22
54916: PUSH
54917: LD_INT 2
54919: NEG
54920: PUSH
54921: LD_INT 3
54923: NEG
54924: PUSH
54925: EMPTY
54926: LIST
54927: LIST
54928: PUSH
54929: LD_INT 3
54931: NEG
54932: PUSH
54933: LD_INT 2
54935: NEG
54936: PUSH
54937: EMPTY
54938: LIST
54939: LIST
54940: PUSH
54941: LD_INT 3
54943: NEG
54944: PUSH
54945: LD_INT 3
54947: NEG
54948: PUSH
54949: EMPTY
54950: LIST
54951: LIST
54952: PUSH
54953: EMPTY
54954: LIST
54955: LIST
54956: LIST
54957: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
54958: LD_ADDR_VAR 0 23
54962: PUSH
54963: LD_INT 0
54965: PUSH
54966: LD_INT 3
54968: NEG
54969: PUSH
54970: EMPTY
54971: LIST
54972: LIST
54973: PUSH
54974: LD_INT 1
54976: NEG
54977: PUSH
54978: LD_INT 4
54980: NEG
54981: PUSH
54982: EMPTY
54983: LIST
54984: LIST
54985: PUSH
54986: LD_INT 1
54988: PUSH
54989: LD_INT 3
54991: NEG
54992: PUSH
54993: EMPTY
54994: LIST
54995: LIST
54996: PUSH
54997: EMPTY
54998: LIST
54999: LIST
55000: LIST
55001: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
55002: LD_ADDR_VAR 0 24
55006: PUSH
55007: LD_INT 3
55009: PUSH
55010: LD_INT 0
55012: PUSH
55013: EMPTY
55014: LIST
55015: LIST
55016: PUSH
55017: LD_INT 3
55019: PUSH
55020: LD_INT 1
55022: NEG
55023: PUSH
55024: EMPTY
55025: LIST
55026: LIST
55027: PUSH
55028: LD_INT 4
55030: PUSH
55031: LD_INT 1
55033: PUSH
55034: EMPTY
55035: LIST
55036: LIST
55037: PUSH
55038: EMPTY
55039: LIST
55040: LIST
55041: LIST
55042: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
55043: LD_ADDR_VAR 0 25
55047: PUSH
55048: LD_INT 3
55050: PUSH
55051: LD_INT 3
55053: PUSH
55054: EMPTY
55055: LIST
55056: LIST
55057: PUSH
55058: LD_INT 4
55060: PUSH
55061: LD_INT 3
55063: PUSH
55064: EMPTY
55065: LIST
55066: LIST
55067: PUSH
55068: LD_INT 3
55070: PUSH
55071: LD_INT 4
55073: PUSH
55074: EMPTY
55075: LIST
55076: LIST
55077: PUSH
55078: EMPTY
55079: LIST
55080: LIST
55081: LIST
55082: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
55083: LD_ADDR_VAR 0 26
55087: PUSH
55088: LD_INT 0
55090: PUSH
55091: LD_INT 3
55093: PUSH
55094: EMPTY
55095: LIST
55096: LIST
55097: PUSH
55098: LD_INT 1
55100: PUSH
55101: LD_INT 4
55103: PUSH
55104: EMPTY
55105: LIST
55106: LIST
55107: PUSH
55108: LD_INT 1
55110: NEG
55111: PUSH
55112: LD_INT 3
55114: PUSH
55115: EMPTY
55116: LIST
55117: LIST
55118: PUSH
55119: EMPTY
55120: LIST
55121: LIST
55122: LIST
55123: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
55124: LD_ADDR_VAR 0 27
55128: PUSH
55129: LD_INT 3
55131: NEG
55132: PUSH
55133: LD_INT 0
55135: PUSH
55136: EMPTY
55137: LIST
55138: LIST
55139: PUSH
55140: LD_INT 3
55142: NEG
55143: PUSH
55144: LD_INT 1
55146: PUSH
55147: EMPTY
55148: LIST
55149: LIST
55150: PUSH
55151: LD_INT 4
55153: NEG
55154: PUSH
55155: LD_INT 1
55157: NEG
55158: PUSH
55159: EMPTY
55160: LIST
55161: LIST
55162: PUSH
55163: EMPTY
55164: LIST
55165: LIST
55166: LIST
55167: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
55168: LD_ADDR_VAR 0 28
55172: PUSH
55173: LD_INT 3
55175: NEG
55176: PUSH
55177: LD_INT 3
55179: NEG
55180: PUSH
55181: EMPTY
55182: LIST
55183: LIST
55184: PUSH
55185: LD_INT 3
55187: NEG
55188: PUSH
55189: LD_INT 4
55191: NEG
55192: PUSH
55193: EMPTY
55194: LIST
55195: LIST
55196: PUSH
55197: LD_INT 4
55199: NEG
55200: PUSH
55201: LD_INT 3
55203: NEG
55204: PUSH
55205: EMPTY
55206: LIST
55207: LIST
55208: PUSH
55209: EMPTY
55210: LIST
55211: LIST
55212: LIST
55213: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
55214: LD_ADDR_VAR 0 29
55218: PUSH
55219: LD_INT 1
55221: NEG
55222: PUSH
55223: LD_INT 3
55225: NEG
55226: PUSH
55227: EMPTY
55228: LIST
55229: LIST
55230: PUSH
55231: LD_INT 0
55233: PUSH
55234: LD_INT 3
55236: NEG
55237: PUSH
55238: EMPTY
55239: LIST
55240: LIST
55241: PUSH
55242: LD_INT 1
55244: PUSH
55245: LD_INT 2
55247: NEG
55248: PUSH
55249: EMPTY
55250: LIST
55251: LIST
55252: PUSH
55253: LD_INT 1
55255: NEG
55256: PUSH
55257: LD_INT 4
55259: NEG
55260: PUSH
55261: EMPTY
55262: LIST
55263: LIST
55264: PUSH
55265: LD_INT 0
55267: PUSH
55268: LD_INT 4
55270: NEG
55271: PUSH
55272: EMPTY
55273: LIST
55274: LIST
55275: PUSH
55276: LD_INT 1
55278: PUSH
55279: LD_INT 3
55281: NEG
55282: PUSH
55283: EMPTY
55284: LIST
55285: LIST
55286: PUSH
55287: LD_INT 1
55289: NEG
55290: PUSH
55291: LD_INT 5
55293: NEG
55294: PUSH
55295: EMPTY
55296: LIST
55297: LIST
55298: PUSH
55299: LD_INT 0
55301: PUSH
55302: LD_INT 5
55304: NEG
55305: PUSH
55306: EMPTY
55307: LIST
55308: LIST
55309: PUSH
55310: LD_INT 1
55312: PUSH
55313: LD_INT 4
55315: NEG
55316: PUSH
55317: EMPTY
55318: LIST
55319: LIST
55320: PUSH
55321: LD_INT 1
55323: NEG
55324: PUSH
55325: LD_INT 6
55327: NEG
55328: PUSH
55329: EMPTY
55330: LIST
55331: LIST
55332: PUSH
55333: LD_INT 0
55335: PUSH
55336: LD_INT 6
55338: NEG
55339: PUSH
55340: EMPTY
55341: LIST
55342: LIST
55343: PUSH
55344: LD_INT 1
55346: PUSH
55347: LD_INT 5
55349: NEG
55350: PUSH
55351: EMPTY
55352: LIST
55353: LIST
55354: PUSH
55355: EMPTY
55356: LIST
55357: LIST
55358: LIST
55359: LIST
55360: LIST
55361: LIST
55362: LIST
55363: LIST
55364: LIST
55365: LIST
55366: LIST
55367: LIST
55368: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
55369: LD_ADDR_VAR 0 30
55373: PUSH
55374: LD_INT 2
55376: PUSH
55377: LD_INT 1
55379: NEG
55380: PUSH
55381: EMPTY
55382: LIST
55383: LIST
55384: PUSH
55385: LD_INT 3
55387: PUSH
55388: LD_INT 0
55390: PUSH
55391: EMPTY
55392: LIST
55393: LIST
55394: PUSH
55395: LD_INT 3
55397: PUSH
55398: LD_INT 1
55400: PUSH
55401: EMPTY
55402: LIST
55403: LIST
55404: PUSH
55405: LD_INT 3
55407: PUSH
55408: LD_INT 1
55410: NEG
55411: PUSH
55412: EMPTY
55413: LIST
55414: LIST
55415: PUSH
55416: LD_INT 4
55418: PUSH
55419: LD_INT 0
55421: PUSH
55422: EMPTY
55423: LIST
55424: LIST
55425: PUSH
55426: LD_INT 4
55428: PUSH
55429: LD_INT 1
55431: PUSH
55432: EMPTY
55433: LIST
55434: LIST
55435: PUSH
55436: LD_INT 4
55438: PUSH
55439: LD_INT 1
55441: NEG
55442: PUSH
55443: EMPTY
55444: LIST
55445: LIST
55446: PUSH
55447: LD_INT 5
55449: PUSH
55450: LD_INT 0
55452: PUSH
55453: EMPTY
55454: LIST
55455: LIST
55456: PUSH
55457: LD_INT 5
55459: PUSH
55460: LD_INT 1
55462: PUSH
55463: EMPTY
55464: LIST
55465: LIST
55466: PUSH
55467: LD_INT 5
55469: PUSH
55470: LD_INT 1
55472: NEG
55473: PUSH
55474: EMPTY
55475: LIST
55476: LIST
55477: PUSH
55478: LD_INT 6
55480: PUSH
55481: LD_INT 0
55483: PUSH
55484: EMPTY
55485: LIST
55486: LIST
55487: PUSH
55488: LD_INT 6
55490: PUSH
55491: LD_INT 1
55493: PUSH
55494: EMPTY
55495: LIST
55496: LIST
55497: PUSH
55498: EMPTY
55499: LIST
55500: LIST
55501: LIST
55502: LIST
55503: LIST
55504: LIST
55505: LIST
55506: LIST
55507: LIST
55508: LIST
55509: LIST
55510: LIST
55511: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
55512: LD_ADDR_VAR 0 31
55516: PUSH
55517: LD_INT 3
55519: PUSH
55520: LD_INT 2
55522: PUSH
55523: EMPTY
55524: LIST
55525: LIST
55526: PUSH
55527: LD_INT 3
55529: PUSH
55530: LD_INT 3
55532: PUSH
55533: EMPTY
55534: LIST
55535: LIST
55536: PUSH
55537: LD_INT 2
55539: PUSH
55540: LD_INT 3
55542: PUSH
55543: EMPTY
55544: LIST
55545: LIST
55546: PUSH
55547: LD_INT 4
55549: PUSH
55550: LD_INT 3
55552: PUSH
55553: EMPTY
55554: LIST
55555: LIST
55556: PUSH
55557: LD_INT 4
55559: PUSH
55560: LD_INT 4
55562: PUSH
55563: EMPTY
55564: LIST
55565: LIST
55566: PUSH
55567: LD_INT 3
55569: PUSH
55570: LD_INT 4
55572: PUSH
55573: EMPTY
55574: LIST
55575: LIST
55576: PUSH
55577: LD_INT 5
55579: PUSH
55580: LD_INT 4
55582: PUSH
55583: EMPTY
55584: LIST
55585: LIST
55586: PUSH
55587: LD_INT 5
55589: PUSH
55590: LD_INT 5
55592: PUSH
55593: EMPTY
55594: LIST
55595: LIST
55596: PUSH
55597: LD_INT 4
55599: PUSH
55600: LD_INT 5
55602: PUSH
55603: EMPTY
55604: LIST
55605: LIST
55606: PUSH
55607: LD_INT 6
55609: PUSH
55610: LD_INT 5
55612: PUSH
55613: EMPTY
55614: LIST
55615: LIST
55616: PUSH
55617: LD_INT 6
55619: PUSH
55620: LD_INT 6
55622: PUSH
55623: EMPTY
55624: LIST
55625: LIST
55626: PUSH
55627: LD_INT 5
55629: PUSH
55630: LD_INT 6
55632: PUSH
55633: EMPTY
55634: LIST
55635: LIST
55636: PUSH
55637: EMPTY
55638: LIST
55639: LIST
55640: LIST
55641: LIST
55642: LIST
55643: LIST
55644: LIST
55645: LIST
55646: LIST
55647: LIST
55648: LIST
55649: LIST
55650: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
55651: LD_ADDR_VAR 0 32
55655: PUSH
55656: LD_INT 1
55658: PUSH
55659: LD_INT 3
55661: PUSH
55662: EMPTY
55663: LIST
55664: LIST
55665: PUSH
55666: LD_INT 0
55668: PUSH
55669: LD_INT 3
55671: PUSH
55672: EMPTY
55673: LIST
55674: LIST
55675: PUSH
55676: LD_INT 1
55678: NEG
55679: PUSH
55680: LD_INT 2
55682: PUSH
55683: EMPTY
55684: LIST
55685: LIST
55686: PUSH
55687: LD_INT 1
55689: PUSH
55690: LD_INT 4
55692: PUSH
55693: EMPTY
55694: LIST
55695: LIST
55696: PUSH
55697: LD_INT 0
55699: PUSH
55700: LD_INT 4
55702: PUSH
55703: EMPTY
55704: LIST
55705: LIST
55706: PUSH
55707: LD_INT 1
55709: NEG
55710: PUSH
55711: LD_INT 3
55713: PUSH
55714: EMPTY
55715: LIST
55716: LIST
55717: PUSH
55718: LD_INT 1
55720: PUSH
55721: LD_INT 5
55723: PUSH
55724: EMPTY
55725: LIST
55726: LIST
55727: PUSH
55728: LD_INT 0
55730: PUSH
55731: LD_INT 5
55733: PUSH
55734: EMPTY
55735: LIST
55736: LIST
55737: PUSH
55738: LD_INT 1
55740: NEG
55741: PUSH
55742: LD_INT 4
55744: PUSH
55745: EMPTY
55746: LIST
55747: LIST
55748: PUSH
55749: LD_INT 1
55751: PUSH
55752: LD_INT 6
55754: PUSH
55755: EMPTY
55756: LIST
55757: LIST
55758: PUSH
55759: LD_INT 0
55761: PUSH
55762: LD_INT 6
55764: PUSH
55765: EMPTY
55766: LIST
55767: LIST
55768: PUSH
55769: LD_INT 1
55771: NEG
55772: PUSH
55773: LD_INT 5
55775: PUSH
55776: EMPTY
55777: LIST
55778: LIST
55779: PUSH
55780: EMPTY
55781: LIST
55782: LIST
55783: LIST
55784: LIST
55785: LIST
55786: LIST
55787: LIST
55788: LIST
55789: LIST
55790: LIST
55791: LIST
55792: LIST
55793: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
55794: LD_ADDR_VAR 0 33
55798: PUSH
55799: LD_INT 2
55801: NEG
55802: PUSH
55803: LD_INT 1
55805: PUSH
55806: EMPTY
55807: LIST
55808: LIST
55809: PUSH
55810: LD_INT 3
55812: NEG
55813: PUSH
55814: LD_INT 0
55816: PUSH
55817: EMPTY
55818: LIST
55819: LIST
55820: PUSH
55821: LD_INT 3
55823: NEG
55824: PUSH
55825: LD_INT 1
55827: NEG
55828: PUSH
55829: EMPTY
55830: LIST
55831: LIST
55832: PUSH
55833: LD_INT 3
55835: NEG
55836: PUSH
55837: LD_INT 1
55839: PUSH
55840: EMPTY
55841: LIST
55842: LIST
55843: PUSH
55844: LD_INT 4
55846: NEG
55847: PUSH
55848: LD_INT 0
55850: PUSH
55851: EMPTY
55852: LIST
55853: LIST
55854: PUSH
55855: LD_INT 4
55857: NEG
55858: PUSH
55859: LD_INT 1
55861: NEG
55862: PUSH
55863: EMPTY
55864: LIST
55865: LIST
55866: PUSH
55867: LD_INT 4
55869: NEG
55870: PUSH
55871: LD_INT 1
55873: PUSH
55874: EMPTY
55875: LIST
55876: LIST
55877: PUSH
55878: LD_INT 5
55880: NEG
55881: PUSH
55882: LD_INT 0
55884: PUSH
55885: EMPTY
55886: LIST
55887: LIST
55888: PUSH
55889: LD_INT 5
55891: NEG
55892: PUSH
55893: LD_INT 1
55895: NEG
55896: PUSH
55897: EMPTY
55898: LIST
55899: LIST
55900: PUSH
55901: LD_INT 5
55903: NEG
55904: PUSH
55905: LD_INT 1
55907: PUSH
55908: EMPTY
55909: LIST
55910: LIST
55911: PUSH
55912: LD_INT 6
55914: NEG
55915: PUSH
55916: LD_INT 0
55918: PUSH
55919: EMPTY
55920: LIST
55921: LIST
55922: PUSH
55923: LD_INT 6
55925: NEG
55926: PUSH
55927: LD_INT 1
55929: NEG
55930: PUSH
55931: EMPTY
55932: LIST
55933: LIST
55934: PUSH
55935: EMPTY
55936: LIST
55937: LIST
55938: LIST
55939: LIST
55940: LIST
55941: LIST
55942: LIST
55943: LIST
55944: LIST
55945: LIST
55946: LIST
55947: LIST
55948: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
55949: LD_ADDR_VAR 0 34
55953: PUSH
55954: LD_INT 2
55956: NEG
55957: PUSH
55958: LD_INT 3
55960: NEG
55961: PUSH
55962: EMPTY
55963: LIST
55964: LIST
55965: PUSH
55966: LD_INT 3
55968: NEG
55969: PUSH
55970: LD_INT 2
55972: NEG
55973: PUSH
55974: EMPTY
55975: LIST
55976: LIST
55977: PUSH
55978: LD_INT 3
55980: NEG
55981: PUSH
55982: LD_INT 3
55984: NEG
55985: PUSH
55986: EMPTY
55987: LIST
55988: LIST
55989: PUSH
55990: LD_INT 3
55992: NEG
55993: PUSH
55994: LD_INT 4
55996: NEG
55997: PUSH
55998: EMPTY
55999: LIST
56000: LIST
56001: PUSH
56002: LD_INT 4
56004: NEG
56005: PUSH
56006: LD_INT 3
56008: NEG
56009: PUSH
56010: EMPTY
56011: LIST
56012: LIST
56013: PUSH
56014: LD_INT 4
56016: NEG
56017: PUSH
56018: LD_INT 4
56020: NEG
56021: PUSH
56022: EMPTY
56023: LIST
56024: LIST
56025: PUSH
56026: LD_INT 4
56028: NEG
56029: PUSH
56030: LD_INT 5
56032: NEG
56033: PUSH
56034: EMPTY
56035: LIST
56036: LIST
56037: PUSH
56038: LD_INT 5
56040: NEG
56041: PUSH
56042: LD_INT 4
56044: NEG
56045: PUSH
56046: EMPTY
56047: LIST
56048: LIST
56049: PUSH
56050: LD_INT 5
56052: NEG
56053: PUSH
56054: LD_INT 5
56056: NEG
56057: PUSH
56058: EMPTY
56059: LIST
56060: LIST
56061: PUSH
56062: LD_INT 5
56064: NEG
56065: PUSH
56066: LD_INT 6
56068: NEG
56069: PUSH
56070: EMPTY
56071: LIST
56072: LIST
56073: PUSH
56074: LD_INT 6
56076: NEG
56077: PUSH
56078: LD_INT 5
56080: NEG
56081: PUSH
56082: EMPTY
56083: LIST
56084: LIST
56085: PUSH
56086: LD_INT 6
56088: NEG
56089: PUSH
56090: LD_INT 6
56092: NEG
56093: PUSH
56094: EMPTY
56095: LIST
56096: LIST
56097: PUSH
56098: EMPTY
56099: LIST
56100: LIST
56101: LIST
56102: LIST
56103: LIST
56104: LIST
56105: LIST
56106: LIST
56107: LIST
56108: LIST
56109: LIST
56110: LIST
56111: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
56112: LD_ADDR_VAR 0 41
56116: PUSH
56117: LD_INT 0
56119: PUSH
56120: LD_INT 2
56122: NEG
56123: PUSH
56124: EMPTY
56125: LIST
56126: LIST
56127: PUSH
56128: LD_INT 1
56130: NEG
56131: PUSH
56132: LD_INT 3
56134: NEG
56135: PUSH
56136: EMPTY
56137: LIST
56138: LIST
56139: PUSH
56140: LD_INT 1
56142: PUSH
56143: LD_INT 2
56145: NEG
56146: PUSH
56147: EMPTY
56148: LIST
56149: LIST
56150: PUSH
56151: EMPTY
56152: LIST
56153: LIST
56154: LIST
56155: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
56156: LD_ADDR_VAR 0 42
56160: PUSH
56161: LD_INT 2
56163: PUSH
56164: LD_INT 0
56166: PUSH
56167: EMPTY
56168: LIST
56169: LIST
56170: PUSH
56171: LD_INT 2
56173: PUSH
56174: LD_INT 1
56176: NEG
56177: PUSH
56178: EMPTY
56179: LIST
56180: LIST
56181: PUSH
56182: LD_INT 3
56184: PUSH
56185: LD_INT 1
56187: PUSH
56188: EMPTY
56189: LIST
56190: LIST
56191: PUSH
56192: EMPTY
56193: LIST
56194: LIST
56195: LIST
56196: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
56197: LD_ADDR_VAR 0 43
56201: PUSH
56202: LD_INT 2
56204: PUSH
56205: LD_INT 2
56207: PUSH
56208: EMPTY
56209: LIST
56210: LIST
56211: PUSH
56212: LD_INT 3
56214: PUSH
56215: LD_INT 2
56217: PUSH
56218: EMPTY
56219: LIST
56220: LIST
56221: PUSH
56222: LD_INT 2
56224: PUSH
56225: LD_INT 3
56227: PUSH
56228: EMPTY
56229: LIST
56230: LIST
56231: PUSH
56232: EMPTY
56233: LIST
56234: LIST
56235: LIST
56236: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
56237: LD_ADDR_VAR 0 44
56241: PUSH
56242: LD_INT 0
56244: PUSH
56245: LD_INT 2
56247: PUSH
56248: EMPTY
56249: LIST
56250: LIST
56251: PUSH
56252: LD_INT 1
56254: PUSH
56255: LD_INT 3
56257: PUSH
56258: EMPTY
56259: LIST
56260: LIST
56261: PUSH
56262: LD_INT 1
56264: NEG
56265: PUSH
56266: LD_INT 2
56268: PUSH
56269: EMPTY
56270: LIST
56271: LIST
56272: PUSH
56273: EMPTY
56274: LIST
56275: LIST
56276: LIST
56277: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56278: LD_ADDR_VAR 0 45
56282: PUSH
56283: LD_INT 2
56285: NEG
56286: PUSH
56287: LD_INT 0
56289: PUSH
56290: EMPTY
56291: LIST
56292: LIST
56293: PUSH
56294: LD_INT 2
56296: NEG
56297: PUSH
56298: LD_INT 1
56300: PUSH
56301: EMPTY
56302: LIST
56303: LIST
56304: PUSH
56305: LD_INT 3
56307: NEG
56308: PUSH
56309: LD_INT 1
56311: NEG
56312: PUSH
56313: EMPTY
56314: LIST
56315: LIST
56316: PUSH
56317: EMPTY
56318: LIST
56319: LIST
56320: LIST
56321: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
56322: LD_ADDR_VAR 0 46
56326: PUSH
56327: LD_INT 2
56329: NEG
56330: PUSH
56331: LD_INT 2
56333: NEG
56334: PUSH
56335: EMPTY
56336: LIST
56337: LIST
56338: PUSH
56339: LD_INT 2
56341: NEG
56342: PUSH
56343: LD_INT 3
56345: NEG
56346: PUSH
56347: EMPTY
56348: LIST
56349: LIST
56350: PUSH
56351: LD_INT 3
56353: NEG
56354: PUSH
56355: LD_INT 2
56357: NEG
56358: PUSH
56359: EMPTY
56360: LIST
56361: LIST
56362: PUSH
56363: EMPTY
56364: LIST
56365: LIST
56366: LIST
56367: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
56368: LD_ADDR_VAR 0 47
56372: PUSH
56373: LD_INT 2
56375: NEG
56376: PUSH
56377: LD_INT 3
56379: NEG
56380: PUSH
56381: EMPTY
56382: LIST
56383: LIST
56384: PUSH
56385: LD_INT 1
56387: NEG
56388: PUSH
56389: LD_INT 3
56391: NEG
56392: PUSH
56393: EMPTY
56394: LIST
56395: LIST
56396: PUSH
56397: EMPTY
56398: LIST
56399: LIST
56400: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
56401: LD_ADDR_VAR 0 48
56405: PUSH
56406: LD_INT 1
56408: PUSH
56409: LD_INT 2
56411: NEG
56412: PUSH
56413: EMPTY
56414: LIST
56415: LIST
56416: PUSH
56417: LD_INT 2
56419: PUSH
56420: LD_INT 1
56422: NEG
56423: PUSH
56424: EMPTY
56425: LIST
56426: LIST
56427: PUSH
56428: EMPTY
56429: LIST
56430: LIST
56431: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
56432: LD_ADDR_VAR 0 49
56436: PUSH
56437: LD_INT 3
56439: PUSH
56440: LD_INT 1
56442: PUSH
56443: EMPTY
56444: LIST
56445: LIST
56446: PUSH
56447: LD_INT 3
56449: PUSH
56450: LD_INT 2
56452: PUSH
56453: EMPTY
56454: LIST
56455: LIST
56456: PUSH
56457: EMPTY
56458: LIST
56459: LIST
56460: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
56461: LD_ADDR_VAR 0 50
56465: PUSH
56466: LD_INT 2
56468: PUSH
56469: LD_INT 3
56471: PUSH
56472: EMPTY
56473: LIST
56474: LIST
56475: PUSH
56476: LD_INT 1
56478: PUSH
56479: LD_INT 3
56481: PUSH
56482: EMPTY
56483: LIST
56484: LIST
56485: PUSH
56486: EMPTY
56487: LIST
56488: LIST
56489: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
56490: LD_ADDR_VAR 0 51
56494: PUSH
56495: LD_INT 1
56497: NEG
56498: PUSH
56499: LD_INT 2
56501: PUSH
56502: EMPTY
56503: LIST
56504: LIST
56505: PUSH
56506: LD_INT 2
56508: NEG
56509: PUSH
56510: LD_INT 1
56512: PUSH
56513: EMPTY
56514: LIST
56515: LIST
56516: PUSH
56517: EMPTY
56518: LIST
56519: LIST
56520: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56521: LD_ADDR_VAR 0 52
56525: PUSH
56526: LD_INT 3
56528: NEG
56529: PUSH
56530: LD_INT 1
56532: NEG
56533: PUSH
56534: EMPTY
56535: LIST
56536: LIST
56537: PUSH
56538: LD_INT 3
56540: NEG
56541: PUSH
56542: LD_INT 2
56544: NEG
56545: PUSH
56546: EMPTY
56547: LIST
56548: LIST
56549: PUSH
56550: EMPTY
56551: LIST
56552: LIST
56553: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56554: LD_ADDR_VAR 0 53
56558: PUSH
56559: LD_INT 1
56561: NEG
56562: PUSH
56563: LD_INT 3
56565: NEG
56566: PUSH
56567: EMPTY
56568: LIST
56569: LIST
56570: PUSH
56571: LD_INT 0
56573: PUSH
56574: LD_INT 3
56576: NEG
56577: PUSH
56578: EMPTY
56579: LIST
56580: LIST
56581: PUSH
56582: LD_INT 1
56584: PUSH
56585: LD_INT 2
56587: NEG
56588: PUSH
56589: EMPTY
56590: LIST
56591: LIST
56592: PUSH
56593: EMPTY
56594: LIST
56595: LIST
56596: LIST
56597: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56598: LD_ADDR_VAR 0 54
56602: PUSH
56603: LD_INT 2
56605: PUSH
56606: LD_INT 1
56608: NEG
56609: PUSH
56610: EMPTY
56611: LIST
56612: LIST
56613: PUSH
56614: LD_INT 3
56616: PUSH
56617: LD_INT 0
56619: PUSH
56620: EMPTY
56621: LIST
56622: LIST
56623: PUSH
56624: LD_INT 3
56626: PUSH
56627: LD_INT 1
56629: PUSH
56630: EMPTY
56631: LIST
56632: LIST
56633: PUSH
56634: EMPTY
56635: LIST
56636: LIST
56637: LIST
56638: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56639: LD_ADDR_VAR 0 55
56643: PUSH
56644: LD_INT 3
56646: PUSH
56647: LD_INT 2
56649: PUSH
56650: EMPTY
56651: LIST
56652: LIST
56653: PUSH
56654: LD_INT 3
56656: PUSH
56657: LD_INT 3
56659: PUSH
56660: EMPTY
56661: LIST
56662: LIST
56663: PUSH
56664: LD_INT 2
56666: PUSH
56667: LD_INT 3
56669: PUSH
56670: EMPTY
56671: LIST
56672: LIST
56673: PUSH
56674: EMPTY
56675: LIST
56676: LIST
56677: LIST
56678: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56679: LD_ADDR_VAR 0 56
56683: PUSH
56684: LD_INT 1
56686: PUSH
56687: LD_INT 3
56689: PUSH
56690: EMPTY
56691: LIST
56692: LIST
56693: PUSH
56694: LD_INT 0
56696: PUSH
56697: LD_INT 3
56699: PUSH
56700: EMPTY
56701: LIST
56702: LIST
56703: PUSH
56704: LD_INT 1
56706: NEG
56707: PUSH
56708: LD_INT 2
56710: PUSH
56711: EMPTY
56712: LIST
56713: LIST
56714: PUSH
56715: EMPTY
56716: LIST
56717: LIST
56718: LIST
56719: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56720: LD_ADDR_VAR 0 57
56724: PUSH
56725: LD_INT 2
56727: NEG
56728: PUSH
56729: LD_INT 1
56731: PUSH
56732: EMPTY
56733: LIST
56734: LIST
56735: PUSH
56736: LD_INT 3
56738: NEG
56739: PUSH
56740: LD_INT 0
56742: PUSH
56743: EMPTY
56744: LIST
56745: LIST
56746: PUSH
56747: LD_INT 3
56749: NEG
56750: PUSH
56751: LD_INT 1
56753: NEG
56754: PUSH
56755: EMPTY
56756: LIST
56757: LIST
56758: PUSH
56759: EMPTY
56760: LIST
56761: LIST
56762: LIST
56763: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56764: LD_ADDR_VAR 0 58
56768: PUSH
56769: LD_INT 2
56771: NEG
56772: PUSH
56773: LD_INT 3
56775: NEG
56776: PUSH
56777: EMPTY
56778: LIST
56779: LIST
56780: PUSH
56781: LD_INT 3
56783: NEG
56784: PUSH
56785: LD_INT 2
56787: NEG
56788: PUSH
56789: EMPTY
56790: LIST
56791: LIST
56792: PUSH
56793: LD_INT 3
56795: NEG
56796: PUSH
56797: LD_INT 3
56799: NEG
56800: PUSH
56801: EMPTY
56802: LIST
56803: LIST
56804: PUSH
56805: EMPTY
56806: LIST
56807: LIST
56808: LIST
56809: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
56810: LD_ADDR_VAR 0 59
56814: PUSH
56815: LD_INT 1
56817: NEG
56818: PUSH
56819: LD_INT 2
56821: NEG
56822: PUSH
56823: EMPTY
56824: LIST
56825: LIST
56826: PUSH
56827: LD_INT 0
56829: PUSH
56830: LD_INT 2
56832: NEG
56833: PUSH
56834: EMPTY
56835: LIST
56836: LIST
56837: PUSH
56838: LD_INT 1
56840: PUSH
56841: LD_INT 1
56843: NEG
56844: PUSH
56845: EMPTY
56846: LIST
56847: LIST
56848: PUSH
56849: EMPTY
56850: LIST
56851: LIST
56852: LIST
56853: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
56854: LD_ADDR_VAR 0 60
56858: PUSH
56859: LD_INT 1
56861: PUSH
56862: LD_INT 1
56864: NEG
56865: PUSH
56866: EMPTY
56867: LIST
56868: LIST
56869: PUSH
56870: LD_INT 2
56872: PUSH
56873: LD_INT 0
56875: PUSH
56876: EMPTY
56877: LIST
56878: LIST
56879: PUSH
56880: LD_INT 2
56882: PUSH
56883: LD_INT 1
56885: PUSH
56886: EMPTY
56887: LIST
56888: LIST
56889: PUSH
56890: EMPTY
56891: LIST
56892: LIST
56893: LIST
56894: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
56895: LD_ADDR_VAR 0 61
56899: PUSH
56900: LD_INT 2
56902: PUSH
56903: LD_INT 1
56905: PUSH
56906: EMPTY
56907: LIST
56908: LIST
56909: PUSH
56910: LD_INT 2
56912: PUSH
56913: LD_INT 2
56915: PUSH
56916: EMPTY
56917: LIST
56918: LIST
56919: PUSH
56920: LD_INT 1
56922: PUSH
56923: LD_INT 2
56925: PUSH
56926: EMPTY
56927: LIST
56928: LIST
56929: PUSH
56930: EMPTY
56931: LIST
56932: LIST
56933: LIST
56934: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
56935: LD_ADDR_VAR 0 62
56939: PUSH
56940: LD_INT 1
56942: PUSH
56943: LD_INT 2
56945: PUSH
56946: EMPTY
56947: LIST
56948: LIST
56949: PUSH
56950: LD_INT 0
56952: PUSH
56953: LD_INT 2
56955: PUSH
56956: EMPTY
56957: LIST
56958: LIST
56959: PUSH
56960: LD_INT 1
56962: NEG
56963: PUSH
56964: LD_INT 1
56966: PUSH
56967: EMPTY
56968: LIST
56969: LIST
56970: PUSH
56971: EMPTY
56972: LIST
56973: LIST
56974: LIST
56975: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
56976: LD_ADDR_VAR 0 63
56980: PUSH
56981: LD_INT 1
56983: NEG
56984: PUSH
56985: LD_INT 1
56987: PUSH
56988: EMPTY
56989: LIST
56990: LIST
56991: PUSH
56992: LD_INT 2
56994: NEG
56995: PUSH
56996: LD_INT 0
56998: PUSH
56999: EMPTY
57000: LIST
57001: LIST
57002: PUSH
57003: LD_INT 2
57005: NEG
57006: PUSH
57007: LD_INT 1
57009: NEG
57010: PUSH
57011: EMPTY
57012: LIST
57013: LIST
57014: PUSH
57015: EMPTY
57016: LIST
57017: LIST
57018: LIST
57019: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57020: LD_ADDR_VAR 0 64
57024: PUSH
57025: LD_INT 1
57027: NEG
57028: PUSH
57029: LD_INT 2
57031: NEG
57032: PUSH
57033: EMPTY
57034: LIST
57035: LIST
57036: PUSH
57037: LD_INT 2
57039: NEG
57040: PUSH
57041: LD_INT 1
57043: NEG
57044: PUSH
57045: EMPTY
57046: LIST
57047: LIST
57048: PUSH
57049: LD_INT 2
57051: NEG
57052: PUSH
57053: LD_INT 2
57055: NEG
57056: PUSH
57057: EMPTY
57058: LIST
57059: LIST
57060: PUSH
57061: EMPTY
57062: LIST
57063: LIST
57064: LIST
57065: ST_TO_ADDR
// end ; 2 :
57066: GO 60332
57068: LD_INT 2
57070: DOUBLE
57071: EQUAL
57072: IFTRUE 57076
57074: GO 60331
57076: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
57077: LD_ADDR_VAR 0 29
57081: PUSH
57082: LD_INT 4
57084: PUSH
57085: LD_INT 0
57087: PUSH
57088: EMPTY
57089: LIST
57090: LIST
57091: PUSH
57092: LD_INT 4
57094: PUSH
57095: LD_INT 1
57097: NEG
57098: PUSH
57099: EMPTY
57100: LIST
57101: LIST
57102: PUSH
57103: LD_INT 5
57105: PUSH
57106: LD_INT 0
57108: PUSH
57109: EMPTY
57110: LIST
57111: LIST
57112: PUSH
57113: LD_INT 5
57115: PUSH
57116: LD_INT 1
57118: PUSH
57119: EMPTY
57120: LIST
57121: LIST
57122: PUSH
57123: LD_INT 4
57125: PUSH
57126: LD_INT 1
57128: PUSH
57129: EMPTY
57130: LIST
57131: LIST
57132: PUSH
57133: LD_INT 3
57135: PUSH
57136: LD_INT 0
57138: PUSH
57139: EMPTY
57140: LIST
57141: LIST
57142: PUSH
57143: LD_INT 3
57145: PUSH
57146: LD_INT 1
57148: NEG
57149: PUSH
57150: EMPTY
57151: LIST
57152: LIST
57153: PUSH
57154: LD_INT 3
57156: PUSH
57157: LD_INT 2
57159: NEG
57160: PUSH
57161: EMPTY
57162: LIST
57163: LIST
57164: PUSH
57165: LD_INT 5
57167: PUSH
57168: LD_INT 2
57170: PUSH
57171: EMPTY
57172: LIST
57173: LIST
57174: PUSH
57175: LD_INT 3
57177: PUSH
57178: LD_INT 3
57180: PUSH
57181: EMPTY
57182: LIST
57183: LIST
57184: PUSH
57185: LD_INT 3
57187: PUSH
57188: LD_INT 2
57190: PUSH
57191: EMPTY
57192: LIST
57193: LIST
57194: PUSH
57195: LD_INT 4
57197: PUSH
57198: LD_INT 3
57200: PUSH
57201: EMPTY
57202: LIST
57203: LIST
57204: PUSH
57205: LD_INT 4
57207: PUSH
57208: LD_INT 4
57210: PUSH
57211: EMPTY
57212: LIST
57213: LIST
57214: PUSH
57215: LD_INT 3
57217: PUSH
57218: LD_INT 4
57220: PUSH
57221: EMPTY
57222: LIST
57223: LIST
57224: PUSH
57225: LD_INT 2
57227: PUSH
57228: LD_INT 3
57230: PUSH
57231: EMPTY
57232: LIST
57233: LIST
57234: PUSH
57235: LD_INT 2
57237: PUSH
57238: LD_INT 2
57240: PUSH
57241: EMPTY
57242: LIST
57243: LIST
57244: PUSH
57245: LD_INT 4
57247: PUSH
57248: LD_INT 2
57250: PUSH
57251: EMPTY
57252: LIST
57253: LIST
57254: PUSH
57255: LD_INT 2
57257: PUSH
57258: LD_INT 4
57260: PUSH
57261: EMPTY
57262: LIST
57263: LIST
57264: PUSH
57265: LD_INT 0
57267: PUSH
57268: LD_INT 4
57270: PUSH
57271: EMPTY
57272: LIST
57273: LIST
57274: PUSH
57275: LD_INT 0
57277: PUSH
57278: LD_INT 3
57280: PUSH
57281: EMPTY
57282: LIST
57283: LIST
57284: PUSH
57285: LD_INT 1
57287: PUSH
57288: LD_INT 4
57290: PUSH
57291: EMPTY
57292: LIST
57293: LIST
57294: PUSH
57295: LD_INT 1
57297: PUSH
57298: LD_INT 5
57300: PUSH
57301: EMPTY
57302: LIST
57303: LIST
57304: PUSH
57305: LD_INT 0
57307: PUSH
57308: LD_INT 5
57310: PUSH
57311: EMPTY
57312: LIST
57313: LIST
57314: PUSH
57315: LD_INT 1
57317: NEG
57318: PUSH
57319: LD_INT 4
57321: PUSH
57322: EMPTY
57323: LIST
57324: LIST
57325: PUSH
57326: LD_INT 1
57328: NEG
57329: PUSH
57330: LD_INT 3
57332: PUSH
57333: EMPTY
57334: LIST
57335: LIST
57336: PUSH
57337: LD_INT 2
57339: PUSH
57340: LD_INT 5
57342: PUSH
57343: EMPTY
57344: LIST
57345: LIST
57346: PUSH
57347: LD_INT 2
57349: NEG
57350: PUSH
57351: LD_INT 3
57353: PUSH
57354: EMPTY
57355: LIST
57356: LIST
57357: PUSH
57358: LD_INT 3
57360: NEG
57361: PUSH
57362: LD_INT 0
57364: PUSH
57365: EMPTY
57366: LIST
57367: LIST
57368: PUSH
57369: LD_INT 3
57371: NEG
57372: PUSH
57373: LD_INT 1
57375: NEG
57376: PUSH
57377: EMPTY
57378: LIST
57379: LIST
57380: PUSH
57381: LD_INT 2
57383: NEG
57384: PUSH
57385: LD_INT 0
57387: PUSH
57388: EMPTY
57389: LIST
57390: LIST
57391: PUSH
57392: LD_INT 2
57394: NEG
57395: PUSH
57396: LD_INT 1
57398: PUSH
57399: EMPTY
57400: LIST
57401: LIST
57402: PUSH
57403: LD_INT 3
57405: NEG
57406: PUSH
57407: LD_INT 1
57409: PUSH
57410: EMPTY
57411: LIST
57412: LIST
57413: PUSH
57414: LD_INT 4
57416: NEG
57417: PUSH
57418: LD_INT 0
57420: PUSH
57421: EMPTY
57422: LIST
57423: LIST
57424: PUSH
57425: LD_INT 4
57427: NEG
57428: PUSH
57429: LD_INT 1
57431: NEG
57432: PUSH
57433: EMPTY
57434: LIST
57435: LIST
57436: PUSH
57437: LD_INT 4
57439: NEG
57440: PUSH
57441: LD_INT 2
57443: NEG
57444: PUSH
57445: EMPTY
57446: LIST
57447: LIST
57448: PUSH
57449: LD_INT 2
57451: NEG
57452: PUSH
57453: LD_INT 2
57455: PUSH
57456: EMPTY
57457: LIST
57458: LIST
57459: PUSH
57460: LD_INT 4
57462: NEG
57463: PUSH
57464: LD_INT 4
57466: NEG
57467: PUSH
57468: EMPTY
57469: LIST
57470: LIST
57471: PUSH
57472: LD_INT 4
57474: NEG
57475: PUSH
57476: LD_INT 5
57478: NEG
57479: PUSH
57480: EMPTY
57481: LIST
57482: LIST
57483: PUSH
57484: LD_INT 3
57486: NEG
57487: PUSH
57488: LD_INT 4
57490: NEG
57491: PUSH
57492: EMPTY
57493: LIST
57494: LIST
57495: PUSH
57496: LD_INT 3
57498: NEG
57499: PUSH
57500: LD_INT 3
57502: NEG
57503: PUSH
57504: EMPTY
57505: LIST
57506: LIST
57507: PUSH
57508: LD_INT 4
57510: NEG
57511: PUSH
57512: LD_INT 3
57514: NEG
57515: PUSH
57516: EMPTY
57517: LIST
57518: LIST
57519: PUSH
57520: LD_INT 5
57522: NEG
57523: PUSH
57524: LD_INT 4
57526: NEG
57527: PUSH
57528: EMPTY
57529: LIST
57530: LIST
57531: PUSH
57532: LD_INT 5
57534: NEG
57535: PUSH
57536: LD_INT 5
57538: NEG
57539: PUSH
57540: EMPTY
57541: LIST
57542: LIST
57543: PUSH
57544: LD_INT 3
57546: NEG
57547: PUSH
57548: LD_INT 5
57550: NEG
57551: PUSH
57552: EMPTY
57553: LIST
57554: LIST
57555: PUSH
57556: LD_INT 5
57558: NEG
57559: PUSH
57560: LD_INT 3
57562: NEG
57563: PUSH
57564: EMPTY
57565: LIST
57566: LIST
57567: PUSH
57568: EMPTY
57569: LIST
57570: LIST
57571: LIST
57572: LIST
57573: LIST
57574: LIST
57575: LIST
57576: LIST
57577: LIST
57578: LIST
57579: LIST
57580: LIST
57581: LIST
57582: LIST
57583: LIST
57584: LIST
57585: LIST
57586: LIST
57587: LIST
57588: LIST
57589: LIST
57590: LIST
57591: LIST
57592: LIST
57593: LIST
57594: LIST
57595: LIST
57596: LIST
57597: LIST
57598: LIST
57599: LIST
57600: LIST
57601: LIST
57602: LIST
57603: LIST
57604: LIST
57605: LIST
57606: LIST
57607: LIST
57608: LIST
57609: LIST
57610: LIST
57611: LIST
57612: LIST
57613: LIST
57614: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
57615: LD_ADDR_VAR 0 30
57619: PUSH
57620: LD_INT 4
57622: PUSH
57623: LD_INT 4
57625: PUSH
57626: EMPTY
57627: LIST
57628: LIST
57629: PUSH
57630: LD_INT 4
57632: PUSH
57633: LD_INT 3
57635: PUSH
57636: EMPTY
57637: LIST
57638: LIST
57639: PUSH
57640: LD_INT 5
57642: PUSH
57643: LD_INT 4
57645: PUSH
57646: EMPTY
57647: LIST
57648: LIST
57649: PUSH
57650: LD_INT 5
57652: PUSH
57653: LD_INT 5
57655: PUSH
57656: EMPTY
57657: LIST
57658: LIST
57659: PUSH
57660: LD_INT 4
57662: PUSH
57663: LD_INT 5
57665: PUSH
57666: EMPTY
57667: LIST
57668: LIST
57669: PUSH
57670: LD_INT 3
57672: PUSH
57673: LD_INT 4
57675: PUSH
57676: EMPTY
57677: LIST
57678: LIST
57679: PUSH
57680: LD_INT 3
57682: PUSH
57683: LD_INT 3
57685: PUSH
57686: EMPTY
57687: LIST
57688: LIST
57689: PUSH
57690: LD_INT 5
57692: PUSH
57693: LD_INT 3
57695: PUSH
57696: EMPTY
57697: LIST
57698: LIST
57699: PUSH
57700: LD_INT 3
57702: PUSH
57703: LD_INT 5
57705: PUSH
57706: EMPTY
57707: LIST
57708: LIST
57709: PUSH
57710: LD_INT 0
57712: PUSH
57713: LD_INT 3
57715: PUSH
57716: EMPTY
57717: LIST
57718: LIST
57719: PUSH
57720: LD_INT 0
57722: PUSH
57723: LD_INT 2
57725: PUSH
57726: EMPTY
57727: LIST
57728: LIST
57729: PUSH
57730: LD_INT 1
57732: PUSH
57733: LD_INT 3
57735: PUSH
57736: EMPTY
57737: LIST
57738: LIST
57739: PUSH
57740: LD_INT 1
57742: PUSH
57743: LD_INT 4
57745: PUSH
57746: EMPTY
57747: LIST
57748: LIST
57749: PUSH
57750: LD_INT 0
57752: PUSH
57753: LD_INT 4
57755: PUSH
57756: EMPTY
57757: LIST
57758: LIST
57759: PUSH
57760: LD_INT 1
57762: NEG
57763: PUSH
57764: LD_INT 3
57766: PUSH
57767: EMPTY
57768: LIST
57769: LIST
57770: PUSH
57771: LD_INT 1
57773: NEG
57774: PUSH
57775: LD_INT 2
57777: PUSH
57778: EMPTY
57779: LIST
57780: LIST
57781: PUSH
57782: LD_INT 2
57784: PUSH
57785: LD_INT 4
57787: PUSH
57788: EMPTY
57789: LIST
57790: LIST
57791: PUSH
57792: LD_INT 2
57794: NEG
57795: PUSH
57796: LD_INT 2
57798: PUSH
57799: EMPTY
57800: LIST
57801: LIST
57802: PUSH
57803: LD_INT 4
57805: NEG
57806: PUSH
57807: LD_INT 0
57809: PUSH
57810: EMPTY
57811: LIST
57812: LIST
57813: PUSH
57814: LD_INT 4
57816: NEG
57817: PUSH
57818: LD_INT 1
57820: NEG
57821: PUSH
57822: EMPTY
57823: LIST
57824: LIST
57825: PUSH
57826: LD_INT 3
57828: NEG
57829: PUSH
57830: LD_INT 0
57832: PUSH
57833: EMPTY
57834: LIST
57835: LIST
57836: PUSH
57837: LD_INT 3
57839: NEG
57840: PUSH
57841: LD_INT 1
57843: PUSH
57844: EMPTY
57845: LIST
57846: LIST
57847: PUSH
57848: LD_INT 4
57850: NEG
57851: PUSH
57852: LD_INT 1
57854: PUSH
57855: EMPTY
57856: LIST
57857: LIST
57858: PUSH
57859: LD_INT 5
57861: NEG
57862: PUSH
57863: LD_INT 0
57865: PUSH
57866: EMPTY
57867: LIST
57868: LIST
57869: PUSH
57870: LD_INT 5
57872: NEG
57873: PUSH
57874: LD_INT 1
57876: NEG
57877: PUSH
57878: EMPTY
57879: LIST
57880: LIST
57881: PUSH
57882: LD_INT 5
57884: NEG
57885: PUSH
57886: LD_INT 2
57888: NEG
57889: PUSH
57890: EMPTY
57891: LIST
57892: LIST
57893: PUSH
57894: LD_INT 3
57896: NEG
57897: PUSH
57898: LD_INT 2
57900: PUSH
57901: EMPTY
57902: LIST
57903: LIST
57904: PUSH
57905: LD_INT 3
57907: NEG
57908: PUSH
57909: LD_INT 3
57911: NEG
57912: PUSH
57913: EMPTY
57914: LIST
57915: LIST
57916: PUSH
57917: LD_INT 3
57919: NEG
57920: PUSH
57921: LD_INT 4
57923: NEG
57924: PUSH
57925: EMPTY
57926: LIST
57927: LIST
57928: PUSH
57929: LD_INT 2
57931: NEG
57932: PUSH
57933: LD_INT 3
57935: NEG
57936: PUSH
57937: EMPTY
57938: LIST
57939: LIST
57940: PUSH
57941: LD_INT 2
57943: NEG
57944: PUSH
57945: LD_INT 2
57947: NEG
57948: PUSH
57949: EMPTY
57950: LIST
57951: LIST
57952: PUSH
57953: LD_INT 3
57955: NEG
57956: PUSH
57957: LD_INT 2
57959: NEG
57960: PUSH
57961: EMPTY
57962: LIST
57963: LIST
57964: PUSH
57965: LD_INT 4
57967: NEG
57968: PUSH
57969: LD_INT 3
57971: NEG
57972: PUSH
57973: EMPTY
57974: LIST
57975: LIST
57976: PUSH
57977: LD_INT 4
57979: NEG
57980: PUSH
57981: LD_INT 4
57983: NEG
57984: PUSH
57985: EMPTY
57986: LIST
57987: LIST
57988: PUSH
57989: LD_INT 2
57991: NEG
57992: PUSH
57993: LD_INT 4
57995: NEG
57996: PUSH
57997: EMPTY
57998: LIST
57999: LIST
58000: PUSH
58001: LD_INT 4
58003: NEG
58004: PUSH
58005: LD_INT 2
58007: NEG
58008: PUSH
58009: EMPTY
58010: LIST
58011: LIST
58012: PUSH
58013: LD_INT 0
58015: PUSH
58016: LD_INT 4
58018: NEG
58019: PUSH
58020: EMPTY
58021: LIST
58022: LIST
58023: PUSH
58024: LD_INT 0
58026: PUSH
58027: LD_INT 5
58029: NEG
58030: PUSH
58031: EMPTY
58032: LIST
58033: LIST
58034: PUSH
58035: LD_INT 1
58037: PUSH
58038: LD_INT 4
58040: NEG
58041: PUSH
58042: EMPTY
58043: LIST
58044: LIST
58045: PUSH
58046: LD_INT 1
58048: PUSH
58049: LD_INT 3
58051: NEG
58052: PUSH
58053: EMPTY
58054: LIST
58055: LIST
58056: PUSH
58057: LD_INT 0
58059: PUSH
58060: LD_INT 3
58062: NEG
58063: PUSH
58064: EMPTY
58065: LIST
58066: LIST
58067: PUSH
58068: LD_INT 1
58070: NEG
58071: PUSH
58072: LD_INT 4
58074: NEG
58075: PUSH
58076: EMPTY
58077: LIST
58078: LIST
58079: PUSH
58080: LD_INT 1
58082: NEG
58083: PUSH
58084: LD_INT 5
58086: NEG
58087: PUSH
58088: EMPTY
58089: LIST
58090: LIST
58091: PUSH
58092: LD_INT 2
58094: PUSH
58095: LD_INT 3
58097: NEG
58098: PUSH
58099: EMPTY
58100: LIST
58101: LIST
58102: PUSH
58103: LD_INT 2
58105: NEG
58106: PUSH
58107: LD_INT 5
58109: NEG
58110: PUSH
58111: EMPTY
58112: LIST
58113: LIST
58114: PUSH
58115: EMPTY
58116: LIST
58117: LIST
58118: LIST
58119: LIST
58120: LIST
58121: LIST
58122: LIST
58123: LIST
58124: LIST
58125: LIST
58126: LIST
58127: LIST
58128: LIST
58129: LIST
58130: LIST
58131: LIST
58132: LIST
58133: LIST
58134: LIST
58135: LIST
58136: LIST
58137: LIST
58138: LIST
58139: LIST
58140: LIST
58141: LIST
58142: LIST
58143: LIST
58144: LIST
58145: LIST
58146: LIST
58147: LIST
58148: LIST
58149: LIST
58150: LIST
58151: LIST
58152: LIST
58153: LIST
58154: LIST
58155: LIST
58156: LIST
58157: LIST
58158: LIST
58159: LIST
58160: LIST
58161: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
58162: LD_ADDR_VAR 0 31
58166: PUSH
58167: LD_INT 0
58169: PUSH
58170: LD_INT 4
58172: PUSH
58173: EMPTY
58174: LIST
58175: LIST
58176: PUSH
58177: LD_INT 0
58179: PUSH
58180: LD_INT 3
58182: PUSH
58183: EMPTY
58184: LIST
58185: LIST
58186: PUSH
58187: LD_INT 1
58189: PUSH
58190: LD_INT 4
58192: PUSH
58193: EMPTY
58194: LIST
58195: LIST
58196: PUSH
58197: LD_INT 1
58199: PUSH
58200: LD_INT 5
58202: PUSH
58203: EMPTY
58204: LIST
58205: LIST
58206: PUSH
58207: LD_INT 0
58209: PUSH
58210: LD_INT 5
58212: PUSH
58213: EMPTY
58214: LIST
58215: LIST
58216: PUSH
58217: LD_INT 1
58219: NEG
58220: PUSH
58221: LD_INT 4
58223: PUSH
58224: EMPTY
58225: LIST
58226: LIST
58227: PUSH
58228: LD_INT 1
58230: NEG
58231: PUSH
58232: LD_INT 3
58234: PUSH
58235: EMPTY
58236: LIST
58237: LIST
58238: PUSH
58239: LD_INT 2
58241: PUSH
58242: LD_INT 5
58244: PUSH
58245: EMPTY
58246: LIST
58247: LIST
58248: PUSH
58249: LD_INT 2
58251: NEG
58252: PUSH
58253: LD_INT 3
58255: PUSH
58256: EMPTY
58257: LIST
58258: LIST
58259: PUSH
58260: LD_INT 3
58262: NEG
58263: PUSH
58264: LD_INT 0
58266: PUSH
58267: EMPTY
58268: LIST
58269: LIST
58270: PUSH
58271: LD_INT 3
58273: NEG
58274: PUSH
58275: LD_INT 1
58277: NEG
58278: PUSH
58279: EMPTY
58280: LIST
58281: LIST
58282: PUSH
58283: LD_INT 2
58285: NEG
58286: PUSH
58287: LD_INT 0
58289: PUSH
58290: EMPTY
58291: LIST
58292: LIST
58293: PUSH
58294: LD_INT 2
58296: NEG
58297: PUSH
58298: LD_INT 1
58300: PUSH
58301: EMPTY
58302: LIST
58303: LIST
58304: PUSH
58305: LD_INT 3
58307: NEG
58308: PUSH
58309: LD_INT 1
58311: PUSH
58312: EMPTY
58313: LIST
58314: LIST
58315: PUSH
58316: LD_INT 4
58318: NEG
58319: PUSH
58320: LD_INT 0
58322: PUSH
58323: EMPTY
58324: LIST
58325: LIST
58326: PUSH
58327: LD_INT 4
58329: NEG
58330: PUSH
58331: LD_INT 1
58333: NEG
58334: PUSH
58335: EMPTY
58336: LIST
58337: LIST
58338: PUSH
58339: LD_INT 4
58341: NEG
58342: PUSH
58343: LD_INT 2
58345: NEG
58346: PUSH
58347: EMPTY
58348: LIST
58349: LIST
58350: PUSH
58351: LD_INT 2
58353: NEG
58354: PUSH
58355: LD_INT 2
58357: PUSH
58358: EMPTY
58359: LIST
58360: LIST
58361: PUSH
58362: LD_INT 4
58364: NEG
58365: PUSH
58366: LD_INT 4
58368: NEG
58369: PUSH
58370: EMPTY
58371: LIST
58372: LIST
58373: PUSH
58374: LD_INT 4
58376: NEG
58377: PUSH
58378: LD_INT 5
58380: NEG
58381: PUSH
58382: EMPTY
58383: LIST
58384: LIST
58385: PUSH
58386: LD_INT 3
58388: NEG
58389: PUSH
58390: LD_INT 4
58392: NEG
58393: PUSH
58394: EMPTY
58395: LIST
58396: LIST
58397: PUSH
58398: LD_INT 3
58400: NEG
58401: PUSH
58402: LD_INT 3
58404: NEG
58405: PUSH
58406: EMPTY
58407: LIST
58408: LIST
58409: PUSH
58410: LD_INT 4
58412: NEG
58413: PUSH
58414: LD_INT 3
58416: NEG
58417: PUSH
58418: EMPTY
58419: LIST
58420: LIST
58421: PUSH
58422: LD_INT 5
58424: NEG
58425: PUSH
58426: LD_INT 4
58428: NEG
58429: PUSH
58430: EMPTY
58431: LIST
58432: LIST
58433: PUSH
58434: LD_INT 5
58436: NEG
58437: PUSH
58438: LD_INT 5
58440: NEG
58441: PUSH
58442: EMPTY
58443: LIST
58444: LIST
58445: PUSH
58446: LD_INT 3
58448: NEG
58449: PUSH
58450: LD_INT 5
58452: NEG
58453: PUSH
58454: EMPTY
58455: LIST
58456: LIST
58457: PUSH
58458: LD_INT 5
58460: NEG
58461: PUSH
58462: LD_INT 3
58464: NEG
58465: PUSH
58466: EMPTY
58467: LIST
58468: LIST
58469: PUSH
58470: LD_INT 0
58472: PUSH
58473: LD_INT 3
58475: NEG
58476: PUSH
58477: EMPTY
58478: LIST
58479: LIST
58480: PUSH
58481: LD_INT 0
58483: PUSH
58484: LD_INT 4
58486: NEG
58487: PUSH
58488: EMPTY
58489: LIST
58490: LIST
58491: PUSH
58492: LD_INT 1
58494: PUSH
58495: LD_INT 3
58497: NEG
58498: PUSH
58499: EMPTY
58500: LIST
58501: LIST
58502: PUSH
58503: LD_INT 1
58505: PUSH
58506: LD_INT 2
58508: NEG
58509: PUSH
58510: EMPTY
58511: LIST
58512: LIST
58513: PUSH
58514: LD_INT 0
58516: PUSH
58517: LD_INT 2
58519: NEG
58520: PUSH
58521: EMPTY
58522: LIST
58523: LIST
58524: PUSH
58525: LD_INT 1
58527: NEG
58528: PUSH
58529: LD_INT 3
58531: NEG
58532: PUSH
58533: EMPTY
58534: LIST
58535: LIST
58536: PUSH
58537: LD_INT 1
58539: NEG
58540: PUSH
58541: LD_INT 4
58543: NEG
58544: PUSH
58545: EMPTY
58546: LIST
58547: LIST
58548: PUSH
58549: LD_INT 2
58551: PUSH
58552: LD_INT 2
58554: NEG
58555: PUSH
58556: EMPTY
58557: LIST
58558: LIST
58559: PUSH
58560: LD_INT 2
58562: NEG
58563: PUSH
58564: LD_INT 4
58566: NEG
58567: PUSH
58568: EMPTY
58569: LIST
58570: LIST
58571: PUSH
58572: LD_INT 4
58574: PUSH
58575: LD_INT 0
58577: PUSH
58578: EMPTY
58579: LIST
58580: LIST
58581: PUSH
58582: LD_INT 4
58584: PUSH
58585: LD_INT 1
58587: NEG
58588: PUSH
58589: EMPTY
58590: LIST
58591: LIST
58592: PUSH
58593: LD_INT 5
58595: PUSH
58596: LD_INT 0
58598: PUSH
58599: EMPTY
58600: LIST
58601: LIST
58602: PUSH
58603: LD_INT 5
58605: PUSH
58606: LD_INT 1
58608: PUSH
58609: EMPTY
58610: LIST
58611: LIST
58612: PUSH
58613: LD_INT 4
58615: PUSH
58616: LD_INT 1
58618: PUSH
58619: EMPTY
58620: LIST
58621: LIST
58622: PUSH
58623: LD_INT 3
58625: PUSH
58626: LD_INT 0
58628: PUSH
58629: EMPTY
58630: LIST
58631: LIST
58632: PUSH
58633: LD_INT 3
58635: PUSH
58636: LD_INT 1
58638: NEG
58639: PUSH
58640: EMPTY
58641: LIST
58642: LIST
58643: PUSH
58644: LD_INT 3
58646: PUSH
58647: LD_INT 2
58649: NEG
58650: PUSH
58651: EMPTY
58652: LIST
58653: LIST
58654: PUSH
58655: LD_INT 5
58657: PUSH
58658: LD_INT 2
58660: PUSH
58661: EMPTY
58662: LIST
58663: LIST
58664: PUSH
58665: EMPTY
58666: LIST
58667: LIST
58668: LIST
58669: LIST
58670: LIST
58671: LIST
58672: LIST
58673: LIST
58674: LIST
58675: LIST
58676: LIST
58677: LIST
58678: LIST
58679: LIST
58680: LIST
58681: LIST
58682: LIST
58683: LIST
58684: LIST
58685: LIST
58686: LIST
58687: LIST
58688: LIST
58689: LIST
58690: LIST
58691: LIST
58692: LIST
58693: LIST
58694: LIST
58695: LIST
58696: LIST
58697: LIST
58698: LIST
58699: LIST
58700: LIST
58701: LIST
58702: LIST
58703: LIST
58704: LIST
58705: LIST
58706: LIST
58707: LIST
58708: LIST
58709: LIST
58710: LIST
58711: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
58712: LD_ADDR_VAR 0 32
58716: PUSH
58717: LD_INT 4
58719: NEG
58720: PUSH
58721: LD_INT 0
58723: PUSH
58724: EMPTY
58725: LIST
58726: LIST
58727: PUSH
58728: LD_INT 4
58730: NEG
58731: PUSH
58732: LD_INT 1
58734: NEG
58735: PUSH
58736: EMPTY
58737: LIST
58738: LIST
58739: PUSH
58740: LD_INT 3
58742: NEG
58743: PUSH
58744: LD_INT 0
58746: PUSH
58747: EMPTY
58748: LIST
58749: LIST
58750: PUSH
58751: LD_INT 3
58753: NEG
58754: PUSH
58755: LD_INT 1
58757: PUSH
58758: EMPTY
58759: LIST
58760: LIST
58761: PUSH
58762: LD_INT 4
58764: NEG
58765: PUSH
58766: LD_INT 1
58768: PUSH
58769: EMPTY
58770: LIST
58771: LIST
58772: PUSH
58773: LD_INT 5
58775: NEG
58776: PUSH
58777: LD_INT 0
58779: PUSH
58780: EMPTY
58781: LIST
58782: LIST
58783: PUSH
58784: LD_INT 5
58786: NEG
58787: PUSH
58788: LD_INT 1
58790: NEG
58791: PUSH
58792: EMPTY
58793: LIST
58794: LIST
58795: PUSH
58796: LD_INT 5
58798: NEG
58799: PUSH
58800: LD_INT 2
58802: NEG
58803: PUSH
58804: EMPTY
58805: LIST
58806: LIST
58807: PUSH
58808: LD_INT 3
58810: NEG
58811: PUSH
58812: LD_INT 2
58814: PUSH
58815: EMPTY
58816: LIST
58817: LIST
58818: PUSH
58819: LD_INT 3
58821: NEG
58822: PUSH
58823: LD_INT 3
58825: NEG
58826: PUSH
58827: EMPTY
58828: LIST
58829: LIST
58830: PUSH
58831: LD_INT 3
58833: NEG
58834: PUSH
58835: LD_INT 4
58837: NEG
58838: PUSH
58839: EMPTY
58840: LIST
58841: LIST
58842: PUSH
58843: LD_INT 2
58845: NEG
58846: PUSH
58847: LD_INT 3
58849: NEG
58850: PUSH
58851: EMPTY
58852: LIST
58853: LIST
58854: PUSH
58855: LD_INT 2
58857: NEG
58858: PUSH
58859: LD_INT 2
58861: NEG
58862: PUSH
58863: EMPTY
58864: LIST
58865: LIST
58866: PUSH
58867: LD_INT 3
58869: NEG
58870: PUSH
58871: LD_INT 2
58873: NEG
58874: PUSH
58875: EMPTY
58876: LIST
58877: LIST
58878: PUSH
58879: LD_INT 4
58881: NEG
58882: PUSH
58883: LD_INT 3
58885: NEG
58886: PUSH
58887: EMPTY
58888: LIST
58889: LIST
58890: PUSH
58891: LD_INT 4
58893: NEG
58894: PUSH
58895: LD_INT 4
58897: NEG
58898: PUSH
58899: EMPTY
58900: LIST
58901: LIST
58902: PUSH
58903: LD_INT 2
58905: NEG
58906: PUSH
58907: LD_INT 4
58909: NEG
58910: PUSH
58911: EMPTY
58912: LIST
58913: LIST
58914: PUSH
58915: LD_INT 4
58917: NEG
58918: PUSH
58919: LD_INT 2
58921: NEG
58922: PUSH
58923: EMPTY
58924: LIST
58925: LIST
58926: PUSH
58927: LD_INT 0
58929: PUSH
58930: LD_INT 4
58932: NEG
58933: PUSH
58934: EMPTY
58935: LIST
58936: LIST
58937: PUSH
58938: LD_INT 0
58940: PUSH
58941: LD_INT 5
58943: NEG
58944: PUSH
58945: EMPTY
58946: LIST
58947: LIST
58948: PUSH
58949: LD_INT 1
58951: PUSH
58952: LD_INT 4
58954: NEG
58955: PUSH
58956: EMPTY
58957: LIST
58958: LIST
58959: PUSH
58960: LD_INT 1
58962: PUSH
58963: LD_INT 3
58965: NEG
58966: PUSH
58967: EMPTY
58968: LIST
58969: LIST
58970: PUSH
58971: LD_INT 0
58973: PUSH
58974: LD_INT 3
58976: NEG
58977: PUSH
58978: EMPTY
58979: LIST
58980: LIST
58981: PUSH
58982: LD_INT 1
58984: NEG
58985: PUSH
58986: LD_INT 4
58988: NEG
58989: PUSH
58990: EMPTY
58991: LIST
58992: LIST
58993: PUSH
58994: LD_INT 1
58996: NEG
58997: PUSH
58998: LD_INT 5
59000: NEG
59001: PUSH
59002: EMPTY
59003: LIST
59004: LIST
59005: PUSH
59006: LD_INT 2
59008: PUSH
59009: LD_INT 3
59011: NEG
59012: PUSH
59013: EMPTY
59014: LIST
59015: LIST
59016: PUSH
59017: LD_INT 2
59019: NEG
59020: PUSH
59021: LD_INT 5
59023: NEG
59024: PUSH
59025: EMPTY
59026: LIST
59027: LIST
59028: PUSH
59029: LD_INT 3
59031: PUSH
59032: LD_INT 0
59034: PUSH
59035: EMPTY
59036: LIST
59037: LIST
59038: PUSH
59039: LD_INT 3
59041: PUSH
59042: LD_INT 1
59044: NEG
59045: PUSH
59046: EMPTY
59047: LIST
59048: LIST
59049: PUSH
59050: LD_INT 4
59052: PUSH
59053: LD_INT 0
59055: PUSH
59056: EMPTY
59057: LIST
59058: LIST
59059: PUSH
59060: LD_INT 4
59062: PUSH
59063: LD_INT 1
59065: PUSH
59066: EMPTY
59067: LIST
59068: LIST
59069: PUSH
59070: LD_INT 3
59072: PUSH
59073: LD_INT 1
59075: PUSH
59076: EMPTY
59077: LIST
59078: LIST
59079: PUSH
59080: LD_INT 2
59082: PUSH
59083: LD_INT 0
59085: PUSH
59086: EMPTY
59087: LIST
59088: LIST
59089: PUSH
59090: LD_INT 2
59092: PUSH
59093: LD_INT 1
59095: NEG
59096: PUSH
59097: EMPTY
59098: LIST
59099: LIST
59100: PUSH
59101: LD_INT 2
59103: PUSH
59104: LD_INT 2
59106: NEG
59107: PUSH
59108: EMPTY
59109: LIST
59110: LIST
59111: PUSH
59112: LD_INT 4
59114: PUSH
59115: LD_INT 2
59117: PUSH
59118: EMPTY
59119: LIST
59120: LIST
59121: PUSH
59122: LD_INT 4
59124: PUSH
59125: LD_INT 4
59127: PUSH
59128: EMPTY
59129: LIST
59130: LIST
59131: PUSH
59132: LD_INT 4
59134: PUSH
59135: LD_INT 3
59137: PUSH
59138: EMPTY
59139: LIST
59140: LIST
59141: PUSH
59142: LD_INT 5
59144: PUSH
59145: LD_INT 4
59147: PUSH
59148: EMPTY
59149: LIST
59150: LIST
59151: PUSH
59152: LD_INT 5
59154: PUSH
59155: LD_INT 5
59157: PUSH
59158: EMPTY
59159: LIST
59160: LIST
59161: PUSH
59162: LD_INT 4
59164: PUSH
59165: LD_INT 5
59167: PUSH
59168: EMPTY
59169: LIST
59170: LIST
59171: PUSH
59172: LD_INT 3
59174: PUSH
59175: LD_INT 4
59177: PUSH
59178: EMPTY
59179: LIST
59180: LIST
59181: PUSH
59182: LD_INT 3
59184: PUSH
59185: LD_INT 3
59187: PUSH
59188: EMPTY
59189: LIST
59190: LIST
59191: PUSH
59192: LD_INT 5
59194: PUSH
59195: LD_INT 3
59197: PUSH
59198: EMPTY
59199: LIST
59200: LIST
59201: PUSH
59202: LD_INT 3
59204: PUSH
59205: LD_INT 5
59207: PUSH
59208: EMPTY
59209: LIST
59210: LIST
59211: PUSH
59212: EMPTY
59213: LIST
59214: LIST
59215: LIST
59216: LIST
59217: LIST
59218: LIST
59219: LIST
59220: LIST
59221: LIST
59222: LIST
59223: LIST
59224: LIST
59225: LIST
59226: LIST
59227: LIST
59228: LIST
59229: LIST
59230: LIST
59231: LIST
59232: LIST
59233: LIST
59234: LIST
59235: LIST
59236: LIST
59237: LIST
59238: LIST
59239: LIST
59240: LIST
59241: LIST
59242: LIST
59243: LIST
59244: LIST
59245: LIST
59246: LIST
59247: LIST
59248: LIST
59249: LIST
59250: LIST
59251: LIST
59252: LIST
59253: LIST
59254: LIST
59255: LIST
59256: LIST
59257: LIST
59258: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
59259: LD_ADDR_VAR 0 33
59263: PUSH
59264: LD_INT 4
59266: NEG
59267: PUSH
59268: LD_INT 4
59270: NEG
59271: PUSH
59272: EMPTY
59273: LIST
59274: LIST
59275: PUSH
59276: LD_INT 4
59278: NEG
59279: PUSH
59280: LD_INT 5
59282: NEG
59283: PUSH
59284: EMPTY
59285: LIST
59286: LIST
59287: PUSH
59288: LD_INT 3
59290: NEG
59291: PUSH
59292: LD_INT 4
59294: NEG
59295: PUSH
59296: EMPTY
59297: LIST
59298: LIST
59299: PUSH
59300: LD_INT 3
59302: NEG
59303: PUSH
59304: LD_INT 3
59306: NEG
59307: PUSH
59308: EMPTY
59309: LIST
59310: LIST
59311: PUSH
59312: LD_INT 4
59314: NEG
59315: PUSH
59316: LD_INT 3
59318: NEG
59319: PUSH
59320: EMPTY
59321: LIST
59322: LIST
59323: PUSH
59324: LD_INT 5
59326: NEG
59327: PUSH
59328: LD_INT 4
59330: NEG
59331: PUSH
59332: EMPTY
59333: LIST
59334: LIST
59335: PUSH
59336: LD_INT 5
59338: NEG
59339: PUSH
59340: LD_INT 5
59342: NEG
59343: PUSH
59344: EMPTY
59345: LIST
59346: LIST
59347: PUSH
59348: LD_INT 3
59350: NEG
59351: PUSH
59352: LD_INT 5
59354: NEG
59355: PUSH
59356: EMPTY
59357: LIST
59358: LIST
59359: PUSH
59360: LD_INT 5
59362: NEG
59363: PUSH
59364: LD_INT 3
59366: NEG
59367: PUSH
59368: EMPTY
59369: LIST
59370: LIST
59371: PUSH
59372: LD_INT 0
59374: PUSH
59375: LD_INT 3
59377: NEG
59378: PUSH
59379: EMPTY
59380: LIST
59381: LIST
59382: PUSH
59383: LD_INT 0
59385: PUSH
59386: LD_INT 4
59388: NEG
59389: PUSH
59390: EMPTY
59391: LIST
59392: LIST
59393: PUSH
59394: LD_INT 1
59396: PUSH
59397: LD_INT 3
59399: NEG
59400: PUSH
59401: EMPTY
59402: LIST
59403: LIST
59404: PUSH
59405: LD_INT 1
59407: PUSH
59408: LD_INT 2
59410: NEG
59411: PUSH
59412: EMPTY
59413: LIST
59414: LIST
59415: PUSH
59416: LD_INT 0
59418: PUSH
59419: LD_INT 2
59421: NEG
59422: PUSH
59423: EMPTY
59424: LIST
59425: LIST
59426: PUSH
59427: LD_INT 1
59429: NEG
59430: PUSH
59431: LD_INT 3
59433: NEG
59434: PUSH
59435: EMPTY
59436: LIST
59437: LIST
59438: PUSH
59439: LD_INT 1
59441: NEG
59442: PUSH
59443: LD_INT 4
59445: NEG
59446: PUSH
59447: EMPTY
59448: LIST
59449: LIST
59450: PUSH
59451: LD_INT 2
59453: PUSH
59454: LD_INT 2
59456: NEG
59457: PUSH
59458: EMPTY
59459: LIST
59460: LIST
59461: PUSH
59462: LD_INT 2
59464: NEG
59465: PUSH
59466: LD_INT 4
59468: NEG
59469: PUSH
59470: EMPTY
59471: LIST
59472: LIST
59473: PUSH
59474: LD_INT 4
59476: PUSH
59477: LD_INT 0
59479: PUSH
59480: EMPTY
59481: LIST
59482: LIST
59483: PUSH
59484: LD_INT 4
59486: PUSH
59487: LD_INT 1
59489: NEG
59490: PUSH
59491: EMPTY
59492: LIST
59493: LIST
59494: PUSH
59495: LD_INT 5
59497: PUSH
59498: LD_INT 0
59500: PUSH
59501: EMPTY
59502: LIST
59503: LIST
59504: PUSH
59505: LD_INT 5
59507: PUSH
59508: LD_INT 1
59510: PUSH
59511: EMPTY
59512: LIST
59513: LIST
59514: PUSH
59515: LD_INT 4
59517: PUSH
59518: LD_INT 1
59520: PUSH
59521: EMPTY
59522: LIST
59523: LIST
59524: PUSH
59525: LD_INT 3
59527: PUSH
59528: LD_INT 0
59530: PUSH
59531: EMPTY
59532: LIST
59533: LIST
59534: PUSH
59535: LD_INT 3
59537: PUSH
59538: LD_INT 1
59540: NEG
59541: PUSH
59542: EMPTY
59543: LIST
59544: LIST
59545: PUSH
59546: LD_INT 3
59548: PUSH
59549: LD_INT 2
59551: NEG
59552: PUSH
59553: EMPTY
59554: LIST
59555: LIST
59556: PUSH
59557: LD_INT 5
59559: PUSH
59560: LD_INT 2
59562: PUSH
59563: EMPTY
59564: LIST
59565: LIST
59566: PUSH
59567: LD_INT 3
59569: PUSH
59570: LD_INT 3
59572: PUSH
59573: EMPTY
59574: LIST
59575: LIST
59576: PUSH
59577: LD_INT 3
59579: PUSH
59580: LD_INT 2
59582: PUSH
59583: EMPTY
59584: LIST
59585: LIST
59586: PUSH
59587: LD_INT 4
59589: PUSH
59590: LD_INT 3
59592: PUSH
59593: EMPTY
59594: LIST
59595: LIST
59596: PUSH
59597: LD_INT 4
59599: PUSH
59600: LD_INT 4
59602: PUSH
59603: EMPTY
59604: LIST
59605: LIST
59606: PUSH
59607: LD_INT 3
59609: PUSH
59610: LD_INT 4
59612: PUSH
59613: EMPTY
59614: LIST
59615: LIST
59616: PUSH
59617: LD_INT 2
59619: PUSH
59620: LD_INT 3
59622: PUSH
59623: EMPTY
59624: LIST
59625: LIST
59626: PUSH
59627: LD_INT 2
59629: PUSH
59630: LD_INT 2
59632: PUSH
59633: EMPTY
59634: LIST
59635: LIST
59636: PUSH
59637: LD_INT 4
59639: PUSH
59640: LD_INT 2
59642: PUSH
59643: EMPTY
59644: LIST
59645: LIST
59646: PUSH
59647: LD_INT 2
59649: PUSH
59650: LD_INT 4
59652: PUSH
59653: EMPTY
59654: LIST
59655: LIST
59656: PUSH
59657: LD_INT 0
59659: PUSH
59660: LD_INT 4
59662: PUSH
59663: EMPTY
59664: LIST
59665: LIST
59666: PUSH
59667: LD_INT 0
59669: PUSH
59670: LD_INT 3
59672: PUSH
59673: EMPTY
59674: LIST
59675: LIST
59676: PUSH
59677: LD_INT 1
59679: PUSH
59680: LD_INT 4
59682: PUSH
59683: EMPTY
59684: LIST
59685: LIST
59686: PUSH
59687: LD_INT 1
59689: PUSH
59690: LD_INT 5
59692: PUSH
59693: EMPTY
59694: LIST
59695: LIST
59696: PUSH
59697: LD_INT 0
59699: PUSH
59700: LD_INT 5
59702: PUSH
59703: EMPTY
59704: LIST
59705: LIST
59706: PUSH
59707: LD_INT 1
59709: NEG
59710: PUSH
59711: LD_INT 4
59713: PUSH
59714: EMPTY
59715: LIST
59716: LIST
59717: PUSH
59718: LD_INT 1
59720: NEG
59721: PUSH
59722: LD_INT 3
59724: PUSH
59725: EMPTY
59726: LIST
59727: LIST
59728: PUSH
59729: LD_INT 2
59731: PUSH
59732: LD_INT 5
59734: PUSH
59735: EMPTY
59736: LIST
59737: LIST
59738: PUSH
59739: LD_INT 2
59741: NEG
59742: PUSH
59743: LD_INT 3
59745: PUSH
59746: EMPTY
59747: LIST
59748: LIST
59749: PUSH
59750: EMPTY
59751: LIST
59752: LIST
59753: LIST
59754: LIST
59755: LIST
59756: LIST
59757: LIST
59758: LIST
59759: LIST
59760: LIST
59761: LIST
59762: LIST
59763: LIST
59764: LIST
59765: LIST
59766: LIST
59767: LIST
59768: LIST
59769: LIST
59770: LIST
59771: LIST
59772: LIST
59773: LIST
59774: LIST
59775: LIST
59776: LIST
59777: LIST
59778: LIST
59779: LIST
59780: LIST
59781: LIST
59782: LIST
59783: LIST
59784: LIST
59785: LIST
59786: LIST
59787: LIST
59788: LIST
59789: LIST
59790: LIST
59791: LIST
59792: LIST
59793: LIST
59794: LIST
59795: LIST
59796: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
59797: LD_ADDR_VAR 0 34
59801: PUSH
59802: LD_INT 0
59804: PUSH
59805: LD_INT 4
59807: NEG
59808: PUSH
59809: EMPTY
59810: LIST
59811: LIST
59812: PUSH
59813: LD_INT 0
59815: PUSH
59816: LD_INT 5
59818: NEG
59819: PUSH
59820: EMPTY
59821: LIST
59822: LIST
59823: PUSH
59824: LD_INT 1
59826: PUSH
59827: LD_INT 4
59829: NEG
59830: PUSH
59831: EMPTY
59832: LIST
59833: LIST
59834: PUSH
59835: LD_INT 1
59837: PUSH
59838: LD_INT 3
59840: NEG
59841: PUSH
59842: EMPTY
59843: LIST
59844: LIST
59845: PUSH
59846: LD_INT 0
59848: PUSH
59849: LD_INT 3
59851: NEG
59852: PUSH
59853: EMPTY
59854: LIST
59855: LIST
59856: PUSH
59857: LD_INT 1
59859: NEG
59860: PUSH
59861: LD_INT 4
59863: NEG
59864: PUSH
59865: EMPTY
59866: LIST
59867: LIST
59868: PUSH
59869: LD_INT 1
59871: NEG
59872: PUSH
59873: LD_INT 5
59875: NEG
59876: PUSH
59877: EMPTY
59878: LIST
59879: LIST
59880: PUSH
59881: LD_INT 2
59883: PUSH
59884: LD_INT 3
59886: NEG
59887: PUSH
59888: EMPTY
59889: LIST
59890: LIST
59891: PUSH
59892: LD_INT 2
59894: NEG
59895: PUSH
59896: LD_INT 5
59898: NEG
59899: PUSH
59900: EMPTY
59901: LIST
59902: LIST
59903: PUSH
59904: LD_INT 3
59906: PUSH
59907: LD_INT 0
59909: PUSH
59910: EMPTY
59911: LIST
59912: LIST
59913: PUSH
59914: LD_INT 3
59916: PUSH
59917: LD_INT 1
59919: NEG
59920: PUSH
59921: EMPTY
59922: LIST
59923: LIST
59924: PUSH
59925: LD_INT 4
59927: PUSH
59928: LD_INT 0
59930: PUSH
59931: EMPTY
59932: LIST
59933: LIST
59934: PUSH
59935: LD_INT 4
59937: PUSH
59938: LD_INT 1
59940: PUSH
59941: EMPTY
59942: LIST
59943: LIST
59944: PUSH
59945: LD_INT 3
59947: PUSH
59948: LD_INT 1
59950: PUSH
59951: EMPTY
59952: LIST
59953: LIST
59954: PUSH
59955: LD_INT 2
59957: PUSH
59958: LD_INT 0
59960: PUSH
59961: EMPTY
59962: LIST
59963: LIST
59964: PUSH
59965: LD_INT 2
59967: PUSH
59968: LD_INT 1
59970: NEG
59971: PUSH
59972: EMPTY
59973: LIST
59974: LIST
59975: PUSH
59976: LD_INT 2
59978: PUSH
59979: LD_INT 2
59981: NEG
59982: PUSH
59983: EMPTY
59984: LIST
59985: LIST
59986: PUSH
59987: LD_INT 4
59989: PUSH
59990: LD_INT 2
59992: PUSH
59993: EMPTY
59994: LIST
59995: LIST
59996: PUSH
59997: LD_INT 4
59999: PUSH
60000: LD_INT 4
60002: PUSH
60003: EMPTY
60004: LIST
60005: LIST
60006: PUSH
60007: LD_INT 4
60009: PUSH
60010: LD_INT 3
60012: PUSH
60013: EMPTY
60014: LIST
60015: LIST
60016: PUSH
60017: LD_INT 5
60019: PUSH
60020: LD_INT 4
60022: PUSH
60023: EMPTY
60024: LIST
60025: LIST
60026: PUSH
60027: LD_INT 5
60029: PUSH
60030: LD_INT 5
60032: PUSH
60033: EMPTY
60034: LIST
60035: LIST
60036: PUSH
60037: LD_INT 4
60039: PUSH
60040: LD_INT 5
60042: PUSH
60043: EMPTY
60044: LIST
60045: LIST
60046: PUSH
60047: LD_INT 3
60049: PUSH
60050: LD_INT 4
60052: PUSH
60053: EMPTY
60054: LIST
60055: LIST
60056: PUSH
60057: LD_INT 3
60059: PUSH
60060: LD_INT 3
60062: PUSH
60063: EMPTY
60064: LIST
60065: LIST
60066: PUSH
60067: LD_INT 5
60069: PUSH
60070: LD_INT 3
60072: PUSH
60073: EMPTY
60074: LIST
60075: LIST
60076: PUSH
60077: LD_INT 3
60079: PUSH
60080: LD_INT 5
60082: PUSH
60083: EMPTY
60084: LIST
60085: LIST
60086: PUSH
60087: LD_INT 0
60089: PUSH
60090: LD_INT 3
60092: PUSH
60093: EMPTY
60094: LIST
60095: LIST
60096: PUSH
60097: LD_INT 0
60099: PUSH
60100: LD_INT 2
60102: PUSH
60103: EMPTY
60104: LIST
60105: LIST
60106: PUSH
60107: LD_INT 1
60109: PUSH
60110: LD_INT 3
60112: PUSH
60113: EMPTY
60114: LIST
60115: LIST
60116: PUSH
60117: LD_INT 1
60119: PUSH
60120: LD_INT 4
60122: PUSH
60123: EMPTY
60124: LIST
60125: LIST
60126: PUSH
60127: LD_INT 0
60129: PUSH
60130: LD_INT 4
60132: PUSH
60133: EMPTY
60134: LIST
60135: LIST
60136: PUSH
60137: LD_INT 1
60139: NEG
60140: PUSH
60141: LD_INT 3
60143: PUSH
60144: EMPTY
60145: LIST
60146: LIST
60147: PUSH
60148: LD_INT 1
60150: NEG
60151: PUSH
60152: LD_INT 2
60154: PUSH
60155: EMPTY
60156: LIST
60157: LIST
60158: PUSH
60159: LD_INT 2
60161: PUSH
60162: LD_INT 4
60164: PUSH
60165: EMPTY
60166: LIST
60167: LIST
60168: PUSH
60169: LD_INT 2
60171: NEG
60172: PUSH
60173: LD_INT 2
60175: PUSH
60176: EMPTY
60177: LIST
60178: LIST
60179: PUSH
60180: LD_INT 4
60182: NEG
60183: PUSH
60184: LD_INT 0
60186: PUSH
60187: EMPTY
60188: LIST
60189: LIST
60190: PUSH
60191: LD_INT 4
60193: NEG
60194: PUSH
60195: LD_INT 1
60197: NEG
60198: PUSH
60199: EMPTY
60200: LIST
60201: LIST
60202: PUSH
60203: LD_INT 3
60205: NEG
60206: PUSH
60207: LD_INT 0
60209: PUSH
60210: EMPTY
60211: LIST
60212: LIST
60213: PUSH
60214: LD_INT 3
60216: NEG
60217: PUSH
60218: LD_INT 1
60220: PUSH
60221: EMPTY
60222: LIST
60223: LIST
60224: PUSH
60225: LD_INT 4
60227: NEG
60228: PUSH
60229: LD_INT 1
60231: PUSH
60232: EMPTY
60233: LIST
60234: LIST
60235: PUSH
60236: LD_INT 5
60238: NEG
60239: PUSH
60240: LD_INT 0
60242: PUSH
60243: EMPTY
60244: LIST
60245: LIST
60246: PUSH
60247: LD_INT 5
60249: NEG
60250: PUSH
60251: LD_INT 1
60253: NEG
60254: PUSH
60255: EMPTY
60256: LIST
60257: LIST
60258: PUSH
60259: LD_INT 5
60261: NEG
60262: PUSH
60263: LD_INT 2
60265: NEG
60266: PUSH
60267: EMPTY
60268: LIST
60269: LIST
60270: PUSH
60271: LD_INT 3
60273: NEG
60274: PUSH
60275: LD_INT 2
60277: PUSH
60278: EMPTY
60279: LIST
60280: LIST
60281: PUSH
60282: EMPTY
60283: LIST
60284: LIST
60285: LIST
60286: LIST
60287: LIST
60288: LIST
60289: LIST
60290: LIST
60291: LIST
60292: LIST
60293: LIST
60294: LIST
60295: LIST
60296: LIST
60297: LIST
60298: LIST
60299: LIST
60300: LIST
60301: LIST
60302: LIST
60303: LIST
60304: LIST
60305: LIST
60306: LIST
60307: LIST
60308: LIST
60309: LIST
60310: LIST
60311: LIST
60312: LIST
60313: LIST
60314: LIST
60315: LIST
60316: LIST
60317: LIST
60318: LIST
60319: LIST
60320: LIST
60321: LIST
60322: LIST
60323: LIST
60324: LIST
60325: LIST
60326: LIST
60327: LIST
60328: ST_TO_ADDR
// end ; end ;
60329: GO 60332
60331: POP
// case btype of b_depot , b_warehouse :
60332: LD_VAR 0 1
60336: PUSH
60337: LD_INT 0
60339: DOUBLE
60340: EQUAL
60341: IFTRUE 60351
60343: LD_INT 1
60345: DOUBLE
60346: EQUAL
60347: IFTRUE 60351
60349: GO 60552
60351: POP
// case nation of nation_american :
60352: LD_VAR 0 5
60356: PUSH
60357: LD_INT 1
60359: DOUBLE
60360: EQUAL
60361: IFTRUE 60365
60363: GO 60421
60365: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
60366: LD_ADDR_VAR 0 9
60370: PUSH
60371: LD_VAR 0 11
60375: PUSH
60376: LD_VAR 0 12
60380: PUSH
60381: LD_VAR 0 13
60385: PUSH
60386: LD_VAR 0 14
60390: PUSH
60391: LD_VAR 0 15
60395: PUSH
60396: LD_VAR 0 16
60400: PUSH
60401: EMPTY
60402: LIST
60403: LIST
60404: LIST
60405: LIST
60406: LIST
60407: LIST
60408: PUSH
60409: LD_VAR 0 4
60413: PUSH
60414: LD_INT 1
60416: PLUS
60417: ARRAY
60418: ST_TO_ADDR
60419: GO 60550
60421: LD_INT 2
60423: DOUBLE
60424: EQUAL
60425: IFTRUE 60429
60427: GO 60485
60429: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
60430: LD_ADDR_VAR 0 9
60434: PUSH
60435: LD_VAR 0 17
60439: PUSH
60440: LD_VAR 0 18
60444: PUSH
60445: LD_VAR 0 19
60449: PUSH
60450: LD_VAR 0 20
60454: PUSH
60455: LD_VAR 0 21
60459: PUSH
60460: LD_VAR 0 22
60464: PUSH
60465: EMPTY
60466: LIST
60467: LIST
60468: LIST
60469: LIST
60470: LIST
60471: LIST
60472: PUSH
60473: LD_VAR 0 4
60477: PUSH
60478: LD_INT 1
60480: PLUS
60481: ARRAY
60482: ST_TO_ADDR
60483: GO 60550
60485: LD_INT 3
60487: DOUBLE
60488: EQUAL
60489: IFTRUE 60493
60491: GO 60549
60493: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
60494: LD_ADDR_VAR 0 9
60498: PUSH
60499: LD_VAR 0 23
60503: PUSH
60504: LD_VAR 0 24
60508: PUSH
60509: LD_VAR 0 25
60513: PUSH
60514: LD_VAR 0 26
60518: PUSH
60519: LD_VAR 0 27
60523: PUSH
60524: LD_VAR 0 28
60528: PUSH
60529: EMPTY
60530: LIST
60531: LIST
60532: LIST
60533: LIST
60534: LIST
60535: LIST
60536: PUSH
60537: LD_VAR 0 4
60541: PUSH
60542: LD_INT 1
60544: PLUS
60545: ARRAY
60546: ST_TO_ADDR
60547: GO 60550
60549: POP
60550: GO 61105
60552: LD_INT 2
60554: DOUBLE
60555: EQUAL
60556: IFTRUE 60566
60558: LD_INT 3
60560: DOUBLE
60561: EQUAL
60562: IFTRUE 60566
60564: GO 60622
60566: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
60567: LD_ADDR_VAR 0 9
60571: PUSH
60572: LD_VAR 0 29
60576: PUSH
60577: LD_VAR 0 30
60581: PUSH
60582: LD_VAR 0 31
60586: PUSH
60587: LD_VAR 0 32
60591: PUSH
60592: LD_VAR 0 33
60596: PUSH
60597: LD_VAR 0 34
60601: PUSH
60602: EMPTY
60603: LIST
60604: LIST
60605: LIST
60606: LIST
60607: LIST
60608: LIST
60609: PUSH
60610: LD_VAR 0 4
60614: PUSH
60615: LD_INT 1
60617: PLUS
60618: ARRAY
60619: ST_TO_ADDR
60620: GO 61105
60622: LD_INT 16
60624: DOUBLE
60625: EQUAL
60626: IFTRUE 60684
60628: LD_INT 17
60630: DOUBLE
60631: EQUAL
60632: IFTRUE 60684
60634: LD_INT 18
60636: DOUBLE
60637: EQUAL
60638: IFTRUE 60684
60640: LD_INT 19
60642: DOUBLE
60643: EQUAL
60644: IFTRUE 60684
60646: LD_INT 22
60648: DOUBLE
60649: EQUAL
60650: IFTRUE 60684
60652: LD_INT 20
60654: DOUBLE
60655: EQUAL
60656: IFTRUE 60684
60658: LD_INT 21
60660: DOUBLE
60661: EQUAL
60662: IFTRUE 60684
60664: LD_INT 23
60666: DOUBLE
60667: EQUAL
60668: IFTRUE 60684
60670: LD_INT 24
60672: DOUBLE
60673: EQUAL
60674: IFTRUE 60684
60676: LD_INT 25
60678: DOUBLE
60679: EQUAL
60680: IFTRUE 60684
60682: GO 60740
60684: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
60685: LD_ADDR_VAR 0 9
60689: PUSH
60690: LD_VAR 0 35
60694: PUSH
60695: LD_VAR 0 36
60699: PUSH
60700: LD_VAR 0 37
60704: PUSH
60705: LD_VAR 0 38
60709: PUSH
60710: LD_VAR 0 39
60714: PUSH
60715: LD_VAR 0 40
60719: PUSH
60720: EMPTY
60721: LIST
60722: LIST
60723: LIST
60724: LIST
60725: LIST
60726: LIST
60727: PUSH
60728: LD_VAR 0 4
60732: PUSH
60733: LD_INT 1
60735: PLUS
60736: ARRAY
60737: ST_TO_ADDR
60738: GO 61105
60740: LD_INT 6
60742: DOUBLE
60743: EQUAL
60744: IFTRUE 60796
60746: LD_INT 7
60748: DOUBLE
60749: EQUAL
60750: IFTRUE 60796
60752: LD_INT 8
60754: DOUBLE
60755: EQUAL
60756: IFTRUE 60796
60758: LD_INT 13
60760: DOUBLE
60761: EQUAL
60762: IFTRUE 60796
60764: LD_INT 12
60766: DOUBLE
60767: EQUAL
60768: IFTRUE 60796
60770: LD_INT 15
60772: DOUBLE
60773: EQUAL
60774: IFTRUE 60796
60776: LD_INT 11
60778: DOUBLE
60779: EQUAL
60780: IFTRUE 60796
60782: LD_INT 14
60784: DOUBLE
60785: EQUAL
60786: IFTRUE 60796
60788: LD_INT 10
60790: DOUBLE
60791: EQUAL
60792: IFTRUE 60796
60794: GO 60852
60796: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
60797: LD_ADDR_VAR 0 9
60801: PUSH
60802: LD_VAR 0 41
60806: PUSH
60807: LD_VAR 0 42
60811: PUSH
60812: LD_VAR 0 43
60816: PUSH
60817: LD_VAR 0 44
60821: PUSH
60822: LD_VAR 0 45
60826: PUSH
60827: LD_VAR 0 46
60831: PUSH
60832: EMPTY
60833: LIST
60834: LIST
60835: LIST
60836: LIST
60837: LIST
60838: LIST
60839: PUSH
60840: LD_VAR 0 4
60844: PUSH
60845: LD_INT 1
60847: PLUS
60848: ARRAY
60849: ST_TO_ADDR
60850: GO 61105
60852: LD_INT 36
60854: DOUBLE
60855: EQUAL
60856: IFTRUE 60860
60858: GO 60916
60860: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
60861: LD_ADDR_VAR 0 9
60865: PUSH
60866: LD_VAR 0 47
60870: PUSH
60871: LD_VAR 0 48
60875: PUSH
60876: LD_VAR 0 49
60880: PUSH
60881: LD_VAR 0 50
60885: PUSH
60886: LD_VAR 0 51
60890: PUSH
60891: LD_VAR 0 52
60895: PUSH
60896: EMPTY
60897: LIST
60898: LIST
60899: LIST
60900: LIST
60901: LIST
60902: LIST
60903: PUSH
60904: LD_VAR 0 4
60908: PUSH
60909: LD_INT 1
60911: PLUS
60912: ARRAY
60913: ST_TO_ADDR
60914: GO 61105
60916: LD_INT 4
60918: DOUBLE
60919: EQUAL
60920: IFTRUE 60942
60922: LD_INT 5
60924: DOUBLE
60925: EQUAL
60926: IFTRUE 60942
60928: LD_INT 34
60930: DOUBLE
60931: EQUAL
60932: IFTRUE 60942
60934: LD_INT 37
60936: DOUBLE
60937: EQUAL
60938: IFTRUE 60942
60940: GO 60998
60942: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
60943: LD_ADDR_VAR 0 9
60947: PUSH
60948: LD_VAR 0 53
60952: PUSH
60953: LD_VAR 0 54
60957: PUSH
60958: LD_VAR 0 55
60962: PUSH
60963: LD_VAR 0 56
60967: PUSH
60968: LD_VAR 0 57
60972: PUSH
60973: LD_VAR 0 58
60977: PUSH
60978: EMPTY
60979: LIST
60980: LIST
60981: LIST
60982: LIST
60983: LIST
60984: LIST
60985: PUSH
60986: LD_VAR 0 4
60990: PUSH
60991: LD_INT 1
60993: PLUS
60994: ARRAY
60995: ST_TO_ADDR
60996: GO 61105
60998: LD_INT 31
61000: DOUBLE
61001: EQUAL
61002: IFTRUE 61048
61004: LD_INT 32
61006: DOUBLE
61007: EQUAL
61008: IFTRUE 61048
61010: LD_INT 33
61012: DOUBLE
61013: EQUAL
61014: IFTRUE 61048
61016: LD_INT 27
61018: DOUBLE
61019: EQUAL
61020: IFTRUE 61048
61022: LD_INT 26
61024: DOUBLE
61025: EQUAL
61026: IFTRUE 61048
61028: LD_INT 28
61030: DOUBLE
61031: EQUAL
61032: IFTRUE 61048
61034: LD_INT 29
61036: DOUBLE
61037: EQUAL
61038: IFTRUE 61048
61040: LD_INT 30
61042: DOUBLE
61043: EQUAL
61044: IFTRUE 61048
61046: GO 61104
61048: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
61049: LD_ADDR_VAR 0 9
61053: PUSH
61054: LD_VAR 0 59
61058: PUSH
61059: LD_VAR 0 60
61063: PUSH
61064: LD_VAR 0 61
61068: PUSH
61069: LD_VAR 0 62
61073: PUSH
61074: LD_VAR 0 63
61078: PUSH
61079: LD_VAR 0 64
61083: PUSH
61084: EMPTY
61085: LIST
61086: LIST
61087: LIST
61088: LIST
61089: LIST
61090: LIST
61091: PUSH
61092: LD_VAR 0 4
61096: PUSH
61097: LD_INT 1
61099: PLUS
61100: ARRAY
61101: ST_TO_ADDR
61102: GO 61105
61104: POP
// temp_list2 = [ ] ;
61105: LD_ADDR_VAR 0 10
61109: PUSH
61110: EMPTY
61111: ST_TO_ADDR
// for i in temp_list do
61112: LD_ADDR_VAR 0 8
61116: PUSH
61117: LD_VAR 0 9
61121: PUSH
61122: FOR_IN
61123: IFFALSE 61175
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
61125: LD_ADDR_VAR 0 10
61129: PUSH
61130: LD_VAR 0 10
61134: PUSH
61135: LD_VAR 0 8
61139: PUSH
61140: LD_INT 1
61142: ARRAY
61143: PUSH
61144: LD_VAR 0 2
61148: PLUS
61149: PUSH
61150: LD_VAR 0 8
61154: PUSH
61155: LD_INT 2
61157: ARRAY
61158: PUSH
61159: LD_VAR 0 3
61163: PLUS
61164: PUSH
61165: EMPTY
61166: LIST
61167: LIST
61168: PUSH
61169: EMPTY
61170: LIST
61171: ADD
61172: ST_TO_ADDR
61173: GO 61122
61175: POP
61176: POP
// result = temp_list2 ;
61177: LD_ADDR_VAR 0 7
61181: PUSH
61182: LD_VAR 0 10
61186: ST_TO_ADDR
// end ;
61187: LD_VAR 0 7
61191: RET
// export function EnemyInRange ( unit , dist ) ; begin
61192: LD_INT 0
61194: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
61195: LD_ADDR_VAR 0 3
61199: PUSH
61200: LD_VAR 0 1
61204: PPUSH
61205: CALL_OW 255
61209: PPUSH
61210: LD_VAR 0 1
61214: PPUSH
61215: CALL_OW 250
61219: PPUSH
61220: LD_VAR 0 1
61224: PPUSH
61225: CALL_OW 251
61229: PPUSH
61230: LD_VAR 0 2
61234: PPUSH
61235: CALL 34565 0 4
61239: PUSH
61240: LD_INT 4
61242: ARRAY
61243: ST_TO_ADDR
// end ;
61244: LD_VAR 0 3
61248: RET
// export function PlayerSeeMe ( unit ) ; begin
61249: LD_INT 0
61251: PPUSH
// result := See ( your_side , unit ) ;
61252: LD_ADDR_VAR 0 2
61256: PUSH
61257: LD_OWVAR 2
61261: PPUSH
61262: LD_VAR 0 1
61266: PPUSH
61267: CALL_OW 292
61271: ST_TO_ADDR
// end ;
61272: LD_VAR 0 2
61276: RET
// export function ReverseDir ( unit ) ; begin
61277: LD_INT 0
61279: PPUSH
// if not unit then
61280: LD_VAR 0 1
61284: NOT
61285: IFFALSE 61289
// exit ;
61287: GO 61312
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
61289: LD_ADDR_VAR 0 2
61293: PUSH
61294: LD_VAR 0 1
61298: PPUSH
61299: CALL_OW 254
61303: PUSH
61304: LD_INT 3
61306: PLUS
61307: PUSH
61308: LD_INT 6
61310: MOD
61311: ST_TO_ADDR
// end ;
61312: LD_VAR 0 2
61316: RET
// export function ReverseArray ( array ) ; var i ; begin
61317: LD_INT 0
61319: PPUSH
61320: PPUSH
// if not array then
61321: LD_VAR 0 1
61325: NOT
61326: IFFALSE 61330
// exit ;
61328: GO 61385
// result := [ ] ;
61330: LD_ADDR_VAR 0 2
61334: PUSH
61335: EMPTY
61336: ST_TO_ADDR
// for i := array downto 1 do
61337: LD_ADDR_VAR 0 3
61341: PUSH
61342: DOUBLE
61343: LD_VAR 0 1
61347: INC
61348: ST_TO_ADDR
61349: LD_INT 1
61351: PUSH
61352: FOR_DOWNTO
61353: IFFALSE 61383
// result := Join ( result , array [ i ] ) ;
61355: LD_ADDR_VAR 0 2
61359: PUSH
61360: LD_VAR 0 2
61364: PPUSH
61365: LD_VAR 0 1
61369: PUSH
61370: LD_VAR 0 3
61374: ARRAY
61375: PPUSH
61376: CALL 66028 0 2
61380: ST_TO_ADDR
61381: GO 61352
61383: POP
61384: POP
// end ;
61385: LD_VAR 0 2
61389: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
61390: LD_INT 0
61392: PPUSH
61393: PPUSH
61394: PPUSH
61395: PPUSH
61396: PPUSH
61397: PPUSH
// if not unit or not hexes then
61398: LD_VAR 0 1
61402: NOT
61403: PUSH
61404: LD_VAR 0 2
61408: NOT
61409: OR
61410: IFFALSE 61414
// exit ;
61412: GO 61537
// dist := 9999 ;
61414: LD_ADDR_VAR 0 5
61418: PUSH
61419: LD_INT 9999
61421: ST_TO_ADDR
// for i = 1 to hexes do
61422: LD_ADDR_VAR 0 4
61426: PUSH
61427: DOUBLE
61428: LD_INT 1
61430: DEC
61431: ST_TO_ADDR
61432: LD_VAR 0 2
61436: PUSH
61437: FOR_TO
61438: IFFALSE 61525
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
61440: LD_ADDR_VAR 0 6
61444: PUSH
61445: LD_VAR 0 1
61449: PPUSH
61450: LD_VAR 0 2
61454: PUSH
61455: LD_VAR 0 4
61459: ARRAY
61460: PUSH
61461: LD_INT 1
61463: ARRAY
61464: PPUSH
61465: LD_VAR 0 2
61469: PUSH
61470: LD_VAR 0 4
61474: ARRAY
61475: PUSH
61476: LD_INT 2
61478: ARRAY
61479: PPUSH
61480: CALL_OW 297
61484: ST_TO_ADDR
// if tdist < dist then
61485: LD_VAR 0 6
61489: PUSH
61490: LD_VAR 0 5
61494: LESS
61495: IFFALSE 61523
// begin hex := hexes [ i ] ;
61497: LD_ADDR_VAR 0 8
61501: PUSH
61502: LD_VAR 0 2
61506: PUSH
61507: LD_VAR 0 4
61511: ARRAY
61512: ST_TO_ADDR
// dist := tdist ;
61513: LD_ADDR_VAR 0 5
61517: PUSH
61518: LD_VAR 0 6
61522: ST_TO_ADDR
// end ; end ;
61523: GO 61437
61525: POP
61526: POP
// result := hex ;
61527: LD_ADDR_VAR 0 3
61531: PUSH
61532: LD_VAR 0 8
61536: ST_TO_ADDR
// end ;
61537: LD_VAR 0 3
61541: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
61542: LD_INT 0
61544: PPUSH
61545: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
61546: LD_VAR 0 1
61550: NOT
61551: PUSH
61552: LD_VAR 0 1
61556: PUSH
61557: LD_INT 21
61559: PUSH
61560: LD_INT 2
61562: PUSH
61563: EMPTY
61564: LIST
61565: LIST
61566: PUSH
61567: LD_INT 23
61569: PUSH
61570: LD_INT 2
61572: PUSH
61573: EMPTY
61574: LIST
61575: LIST
61576: PUSH
61577: EMPTY
61578: LIST
61579: LIST
61580: PPUSH
61581: CALL_OW 69
61585: IN
61586: NOT
61587: OR
61588: IFFALSE 61592
// exit ;
61590: GO 61639
// for i = 1 to 3 do
61592: LD_ADDR_VAR 0 3
61596: PUSH
61597: DOUBLE
61598: LD_INT 1
61600: DEC
61601: ST_TO_ADDR
61602: LD_INT 3
61604: PUSH
61605: FOR_TO
61606: IFFALSE 61637
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
61608: LD_VAR 0 1
61612: PPUSH
61613: CALL_OW 250
61617: PPUSH
61618: LD_VAR 0 1
61622: PPUSH
61623: CALL_OW 251
61627: PPUSH
61628: LD_INT 1
61630: PPUSH
61631: CALL_OW 453
61635: GO 61605
61637: POP
61638: POP
// end ;
61639: LD_VAR 0 2
61643: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
61644: LD_INT 0
61646: PPUSH
61647: PPUSH
61648: PPUSH
61649: PPUSH
61650: PPUSH
61651: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
61652: LD_VAR 0 1
61656: NOT
61657: PUSH
61658: LD_VAR 0 2
61662: NOT
61663: OR
61664: PUSH
61665: LD_VAR 0 1
61669: PPUSH
61670: CALL_OW 314
61674: OR
61675: IFFALSE 61679
// exit ;
61677: GO 62146
// if GetLives ( i ) < 250 then
61679: LD_VAR 0 4
61683: PPUSH
61684: CALL_OW 256
61688: PUSH
61689: LD_INT 250
61691: LESS
61692: IFFALSE 61705
// begin ComAutodestruct ( i ) ;
61694: LD_VAR 0 4
61698: PPUSH
61699: CALL 61542 0 1
// exit ;
61703: GO 62146
// end ; x := GetX ( enemy_unit ) ;
61705: LD_ADDR_VAR 0 7
61709: PUSH
61710: LD_VAR 0 2
61714: PPUSH
61715: CALL_OW 250
61719: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
61720: LD_ADDR_VAR 0 8
61724: PUSH
61725: LD_VAR 0 2
61729: PPUSH
61730: CALL_OW 251
61734: ST_TO_ADDR
// if not x or not y then
61735: LD_VAR 0 7
61739: NOT
61740: PUSH
61741: LD_VAR 0 8
61745: NOT
61746: OR
61747: IFFALSE 61751
// exit ;
61749: GO 62146
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
61751: LD_ADDR_VAR 0 6
61755: PUSH
61756: LD_VAR 0 7
61760: PPUSH
61761: LD_INT 0
61763: PPUSH
61764: LD_INT 4
61766: PPUSH
61767: CALL_OW 272
61771: PUSH
61772: LD_VAR 0 8
61776: PPUSH
61777: LD_INT 0
61779: PPUSH
61780: LD_INT 4
61782: PPUSH
61783: CALL_OW 273
61787: PUSH
61788: EMPTY
61789: LIST
61790: LIST
61791: PUSH
61792: LD_VAR 0 7
61796: PPUSH
61797: LD_INT 1
61799: PPUSH
61800: LD_INT 4
61802: PPUSH
61803: CALL_OW 272
61807: PUSH
61808: LD_VAR 0 8
61812: PPUSH
61813: LD_INT 1
61815: PPUSH
61816: LD_INT 4
61818: PPUSH
61819: CALL_OW 273
61823: PUSH
61824: EMPTY
61825: LIST
61826: LIST
61827: PUSH
61828: LD_VAR 0 7
61832: PPUSH
61833: LD_INT 2
61835: PPUSH
61836: LD_INT 4
61838: PPUSH
61839: CALL_OW 272
61843: PUSH
61844: LD_VAR 0 8
61848: PPUSH
61849: LD_INT 2
61851: PPUSH
61852: LD_INT 4
61854: PPUSH
61855: CALL_OW 273
61859: PUSH
61860: EMPTY
61861: LIST
61862: LIST
61863: PUSH
61864: LD_VAR 0 7
61868: PPUSH
61869: LD_INT 3
61871: PPUSH
61872: LD_INT 4
61874: PPUSH
61875: CALL_OW 272
61879: PUSH
61880: LD_VAR 0 8
61884: PPUSH
61885: LD_INT 3
61887: PPUSH
61888: LD_INT 4
61890: PPUSH
61891: CALL_OW 273
61895: PUSH
61896: EMPTY
61897: LIST
61898: LIST
61899: PUSH
61900: LD_VAR 0 7
61904: PPUSH
61905: LD_INT 4
61907: PPUSH
61908: LD_INT 4
61910: PPUSH
61911: CALL_OW 272
61915: PUSH
61916: LD_VAR 0 8
61920: PPUSH
61921: LD_INT 4
61923: PPUSH
61924: LD_INT 4
61926: PPUSH
61927: CALL_OW 273
61931: PUSH
61932: EMPTY
61933: LIST
61934: LIST
61935: PUSH
61936: LD_VAR 0 7
61940: PPUSH
61941: LD_INT 5
61943: PPUSH
61944: LD_INT 4
61946: PPUSH
61947: CALL_OW 272
61951: PUSH
61952: LD_VAR 0 8
61956: PPUSH
61957: LD_INT 5
61959: PPUSH
61960: LD_INT 4
61962: PPUSH
61963: CALL_OW 273
61967: PUSH
61968: EMPTY
61969: LIST
61970: LIST
61971: PUSH
61972: EMPTY
61973: LIST
61974: LIST
61975: LIST
61976: LIST
61977: LIST
61978: LIST
61979: ST_TO_ADDR
// for i = tmp downto 1 do
61980: LD_ADDR_VAR 0 4
61984: PUSH
61985: DOUBLE
61986: LD_VAR 0 6
61990: INC
61991: ST_TO_ADDR
61992: LD_INT 1
61994: PUSH
61995: FOR_DOWNTO
61996: IFFALSE 62097
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
61998: LD_VAR 0 6
62002: PUSH
62003: LD_VAR 0 4
62007: ARRAY
62008: PUSH
62009: LD_INT 1
62011: ARRAY
62012: PPUSH
62013: LD_VAR 0 6
62017: PUSH
62018: LD_VAR 0 4
62022: ARRAY
62023: PUSH
62024: LD_INT 2
62026: ARRAY
62027: PPUSH
62028: CALL_OW 488
62032: NOT
62033: PUSH
62034: LD_VAR 0 6
62038: PUSH
62039: LD_VAR 0 4
62043: ARRAY
62044: PUSH
62045: LD_INT 1
62047: ARRAY
62048: PPUSH
62049: LD_VAR 0 6
62053: PUSH
62054: LD_VAR 0 4
62058: ARRAY
62059: PUSH
62060: LD_INT 2
62062: ARRAY
62063: PPUSH
62064: CALL_OW 428
62068: PUSH
62069: LD_INT 0
62071: NONEQUAL
62072: OR
62073: IFFALSE 62095
// tmp := Delete ( tmp , i ) ;
62075: LD_ADDR_VAR 0 6
62079: PUSH
62080: LD_VAR 0 6
62084: PPUSH
62085: LD_VAR 0 4
62089: PPUSH
62090: CALL_OW 3
62094: ST_TO_ADDR
62095: GO 61995
62097: POP
62098: POP
// j := GetClosestHex ( unit , tmp ) ;
62099: LD_ADDR_VAR 0 5
62103: PUSH
62104: LD_VAR 0 1
62108: PPUSH
62109: LD_VAR 0 6
62113: PPUSH
62114: CALL 61390 0 2
62118: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
62119: LD_VAR 0 1
62123: PPUSH
62124: LD_VAR 0 5
62128: PUSH
62129: LD_INT 1
62131: ARRAY
62132: PPUSH
62133: LD_VAR 0 5
62137: PUSH
62138: LD_INT 2
62140: ARRAY
62141: PPUSH
62142: CALL_OW 111
// end ;
62146: LD_VAR 0 3
62150: RET
// export function PrepareApemanSoldier ( ) ; begin
62151: LD_INT 0
62153: PPUSH
// uc_nation := 0 ;
62154: LD_ADDR_OWVAR 21
62158: PUSH
62159: LD_INT 0
62161: ST_TO_ADDR
// hc_sex := sex_male ;
62162: LD_ADDR_OWVAR 27
62166: PUSH
62167: LD_INT 1
62169: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
62170: LD_ADDR_OWVAR 28
62174: PUSH
62175: LD_INT 15
62177: ST_TO_ADDR
// hc_gallery :=  ;
62178: LD_ADDR_OWVAR 33
62182: PUSH
62183: LD_STRING 
62185: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
62186: LD_ADDR_OWVAR 31
62190: PUSH
62191: LD_INT 0
62193: PPUSH
62194: LD_INT 3
62196: PPUSH
62197: CALL_OW 12
62201: PUSH
62202: LD_INT 0
62204: PPUSH
62205: LD_INT 3
62207: PPUSH
62208: CALL_OW 12
62212: PUSH
62213: LD_INT 0
62215: PUSH
62216: LD_INT 0
62218: PUSH
62219: EMPTY
62220: LIST
62221: LIST
62222: LIST
62223: LIST
62224: ST_TO_ADDR
// end ;
62225: LD_VAR 0 1
62229: RET
// export function PrepareApemanEngineer ( ) ; begin
62230: LD_INT 0
62232: PPUSH
// uc_nation := 0 ;
62233: LD_ADDR_OWVAR 21
62237: PUSH
62238: LD_INT 0
62240: ST_TO_ADDR
// hc_sex := sex_male ;
62241: LD_ADDR_OWVAR 27
62245: PUSH
62246: LD_INT 1
62248: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
62249: LD_ADDR_OWVAR 28
62253: PUSH
62254: LD_INT 16
62256: ST_TO_ADDR
// hc_gallery :=  ;
62257: LD_ADDR_OWVAR 33
62261: PUSH
62262: LD_STRING 
62264: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
62265: LD_ADDR_OWVAR 31
62269: PUSH
62270: LD_INT 0
62272: PPUSH
62273: LD_INT 3
62275: PPUSH
62276: CALL_OW 12
62280: PUSH
62281: LD_INT 0
62283: PPUSH
62284: LD_INT 3
62286: PPUSH
62287: CALL_OW 12
62291: PUSH
62292: LD_INT 0
62294: PUSH
62295: LD_INT 0
62297: PUSH
62298: EMPTY
62299: LIST
62300: LIST
62301: LIST
62302: LIST
62303: ST_TO_ADDR
// end ;
62304: LD_VAR 0 1
62308: RET
// export function PrepareApeman ( agressivity ) ; begin
62309: LD_INT 0
62311: PPUSH
// uc_side := 0 ;
62312: LD_ADDR_OWVAR 20
62316: PUSH
62317: LD_INT 0
62319: ST_TO_ADDR
// uc_nation := 0 ;
62320: LD_ADDR_OWVAR 21
62324: PUSH
62325: LD_INT 0
62327: ST_TO_ADDR
// hc_sex := sex_male ;
62328: LD_ADDR_OWVAR 27
62332: PUSH
62333: LD_INT 1
62335: ST_TO_ADDR
// hc_class := class_apeman ;
62336: LD_ADDR_OWVAR 28
62340: PUSH
62341: LD_INT 12
62343: ST_TO_ADDR
// hc_gallery :=  ;
62344: LD_ADDR_OWVAR 33
62348: PUSH
62349: LD_STRING 
62351: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
62352: LD_ADDR_OWVAR 35
62356: PUSH
62357: LD_VAR 0 1
62361: NEG
62362: PPUSH
62363: LD_VAR 0 1
62367: PPUSH
62368: CALL_OW 12
62372: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
62373: LD_ADDR_OWVAR 31
62377: PUSH
62378: LD_INT 0
62380: PPUSH
62381: LD_INT 3
62383: PPUSH
62384: CALL_OW 12
62388: PUSH
62389: LD_INT 0
62391: PPUSH
62392: LD_INT 3
62394: PPUSH
62395: CALL_OW 12
62399: PUSH
62400: LD_INT 0
62402: PUSH
62403: LD_INT 0
62405: PUSH
62406: EMPTY
62407: LIST
62408: LIST
62409: LIST
62410: LIST
62411: ST_TO_ADDR
// end ;
62412: LD_VAR 0 2
62416: RET
// export function PrepareTiger ( agressivity ) ; begin
62417: LD_INT 0
62419: PPUSH
// uc_side := 0 ;
62420: LD_ADDR_OWVAR 20
62424: PUSH
62425: LD_INT 0
62427: ST_TO_ADDR
// uc_nation := 0 ;
62428: LD_ADDR_OWVAR 21
62432: PUSH
62433: LD_INT 0
62435: ST_TO_ADDR
// hc_class := class_tiger ;
62436: LD_ADDR_OWVAR 28
62440: PUSH
62441: LD_INT 14
62443: ST_TO_ADDR
// hc_gallery :=  ;
62444: LD_ADDR_OWVAR 33
62448: PUSH
62449: LD_STRING 
62451: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
62452: LD_ADDR_OWVAR 35
62456: PUSH
62457: LD_VAR 0 1
62461: NEG
62462: PPUSH
62463: LD_VAR 0 1
62467: PPUSH
62468: CALL_OW 12
62472: ST_TO_ADDR
// end ;
62473: LD_VAR 0 2
62477: RET
// export function PrepareEnchidna ( ) ; begin
62478: LD_INT 0
62480: PPUSH
// uc_side := 0 ;
62481: LD_ADDR_OWVAR 20
62485: PUSH
62486: LD_INT 0
62488: ST_TO_ADDR
// uc_nation := 0 ;
62489: LD_ADDR_OWVAR 21
62493: PUSH
62494: LD_INT 0
62496: ST_TO_ADDR
// hc_class := class_baggie ;
62497: LD_ADDR_OWVAR 28
62501: PUSH
62502: LD_INT 13
62504: ST_TO_ADDR
// hc_gallery :=  ;
62505: LD_ADDR_OWVAR 33
62509: PUSH
62510: LD_STRING 
62512: ST_TO_ADDR
// end ;
62513: LD_VAR 0 1
62517: RET
// export function PrepareFrog ( ) ; begin
62518: LD_INT 0
62520: PPUSH
// uc_side := 0 ;
62521: LD_ADDR_OWVAR 20
62525: PUSH
62526: LD_INT 0
62528: ST_TO_ADDR
// uc_nation := 0 ;
62529: LD_ADDR_OWVAR 21
62533: PUSH
62534: LD_INT 0
62536: ST_TO_ADDR
// hc_class := class_frog ;
62537: LD_ADDR_OWVAR 28
62541: PUSH
62542: LD_INT 19
62544: ST_TO_ADDR
// hc_gallery :=  ;
62545: LD_ADDR_OWVAR 33
62549: PUSH
62550: LD_STRING 
62552: ST_TO_ADDR
// end ;
62553: LD_VAR 0 1
62557: RET
// export function PrepareFish ( ) ; begin
62558: LD_INT 0
62560: PPUSH
// uc_side := 0 ;
62561: LD_ADDR_OWVAR 20
62565: PUSH
62566: LD_INT 0
62568: ST_TO_ADDR
// uc_nation := 0 ;
62569: LD_ADDR_OWVAR 21
62573: PUSH
62574: LD_INT 0
62576: ST_TO_ADDR
// hc_class := class_fish ;
62577: LD_ADDR_OWVAR 28
62581: PUSH
62582: LD_INT 20
62584: ST_TO_ADDR
// hc_gallery :=  ;
62585: LD_ADDR_OWVAR 33
62589: PUSH
62590: LD_STRING 
62592: ST_TO_ADDR
// end ;
62593: LD_VAR 0 1
62597: RET
// export function PrepareBird ( ) ; begin
62598: LD_INT 0
62600: PPUSH
// uc_side := 0 ;
62601: LD_ADDR_OWVAR 20
62605: PUSH
62606: LD_INT 0
62608: ST_TO_ADDR
// uc_nation := 0 ;
62609: LD_ADDR_OWVAR 21
62613: PUSH
62614: LD_INT 0
62616: ST_TO_ADDR
// hc_class := class_phororhacos ;
62617: LD_ADDR_OWVAR 28
62621: PUSH
62622: LD_INT 18
62624: ST_TO_ADDR
// hc_gallery :=  ;
62625: LD_ADDR_OWVAR 33
62629: PUSH
62630: LD_STRING 
62632: ST_TO_ADDR
// end ;
62633: LD_VAR 0 1
62637: RET
// export function PrepareHorse ( ) ; begin
62638: LD_INT 0
62640: PPUSH
// uc_side := 0 ;
62641: LD_ADDR_OWVAR 20
62645: PUSH
62646: LD_INT 0
62648: ST_TO_ADDR
// uc_nation := 0 ;
62649: LD_ADDR_OWVAR 21
62653: PUSH
62654: LD_INT 0
62656: ST_TO_ADDR
// hc_class := class_horse ;
62657: LD_ADDR_OWVAR 28
62661: PUSH
62662: LD_INT 21
62664: ST_TO_ADDR
// hc_gallery :=  ;
62665: LD_ADDR_OWVAR 33
62669: PUSH
62670: LD_STRING 
62672: ST_TO_ADDR
// end ;
62673: LD_VAR 0 1
62677: RET
// export function PrepareMastodont ( ) ; begin
62678: LD_INT 0
62680: PPUSH
// uc_side := 0 ;
62681: LD_ADDR_OWVAR 20
62685: PUSH
62686: LD_INT 0
62688: ST_TO_ADDR
// uc_nation := 0 ;
62689: LD_ADDR_OWVAR 21
62693: PUSH
62694: LD_INT 0
62696: ST_TO_ADDR
// vc_chassis := class_mastodont ;
62697: LD_ADDR_OWVAR 37
62701: PUSH
62702: LD_INT 31
62704: ST_TO_ADDR
// vc_control := control_rider ;
62705: LD_ADDR_OWVAR 38
62709: PUSH
62710: LD_INT 4
62712: ST_TO_ADDR
// end ;
62713: LD_VAR 0 1
62717: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
62718: LD_INT 0
62720: PPUSH
62721: PPUSH
62722: PPUSH
// uc_side = 0 ;
62723: LD_ADDR_OWVAR 20
62727: PUSH
62728: LD_INT 0
62730: ST_TO_ADDR
// uc_nation = 0 ;
62731: LD_ADDR_OWVAR 21
62735: PUSH
62736: LD_INT 0
62738: ST_TO_ADDR
// InitHc_All ( ) ;
62739: CALL_OW 584
// InitVc ;
62743: CALL_OW 20
// if mastodonts then
62747: LD_VAR 0 6
62751: IFFALSE 62818
// for i = 1 to mastodonts do
62753: LD_ADDR_VAR 0 11
62757: PUSH
62758: DOUBLE
62759: LD_INT 1
62761: DEC
62762: ST_TO_ADDR
62763: LD_VAR 0 6
62767: PUSH
62768: FOR_TO
62769: IFFALSE 62816
// begin vc_chassis := 31 ;
62771: LD_ADDR_OWVAR 37
62775: PUSH
62776: LD_INT 31
62778: ST_TO_ADDR
// vc_control := control_rider ;
62779: LD_ADDR_OWVAR 38
62783: PUSH
62784: LD_INT 4
62786: ST_TO_ADDR
// animal := CreateVehicle ;
62787: LD_ADDR_VAR 0 12
62791: PUSH
62792: CALL_OW 45
62796: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62797: LD_VAR 0 12
62801: PPUSH
62802: LD_VAR 0 8
62806: PPUSH
62807: LD_INT 0
62809: PPUSH
62810: CALL 64946 0 3
// end ;
62814: GO 62768
62816: POP
62817: POP
// if horses then
62818: LD_VAR 0 5
62822: IFFALSE 62889
// for i = 1 to horses do
62824: LD_ADDR_VAR 0 11
62828: PUSH
62829: DOUBLE
62830: LD_INT 1
62832: DEC
62833: ST_TO_ADDR
62834: LD_VAR 0 5
62838: PUSH
62839: FOR_TO
62840: IFFALSE 62887
// begin hc_class := 21 ;
62842: LD_ADDR_OWVAR 28
62846: PUSH
62847: LD_INT 21
62849: ST_TO_ADDR
// hc_gallery :=  ;
62850: LD_ADDR_OWVAR 33
62854: PUSH
62855: LD_STRING 
62857: ST_TO_ADDR
// animal := CreateHuman ;
62858: LD_ADDR_VAR 0 12
62862: PUSH
62863: CALL_OW 44
62867: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62868: LD_VAR 0 12
62872: PPUSH
62873: LD_VAR 0 8
62877: PPUSH
62878: LD_INT 0
62880: PPUSH
62881: CALL 64946 0 3
// end ;
62885: GO 62839
62887: POP
62888: POP
// if birds then
62889: LD_VAR 0 1
62893: IFFALSE 62960
// for i = 1 to birds do
62895: LD_ADDR_VAR 0 11
62899: PUSH
62900: DOUBLE
62901: LD_INT 1
62903: DEC
62904: ST_TO_ADDR
62905: LD_VAR 0 1
62909: PUSH
62910: FOR_TO
62911: IFFALSE 62958
// begin hc_class := 18 ;
62913: LD_ADDR_OWVAR 28
62917: PUSH
62918: LD_INT 18
62920: ST_TO_ADDR
// hc_gallery =  ;
62921: LD_ADDR_OWVAR 33
62925: PUSH
62926: LD_STRING 
62928: ST_TO_ADDR
// animal := CreateHuman ;
62929: LD_ADDR_VAR 0 12
62933: PUSH
62934: CALL_OW 44
62938: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62939: LD_VAR 0 12
62943: PPUSH
62944: LD_VAR 0 8
62948: PPUSH
62949: LD_INT 0
62951: PPUSH
62952: CALL 64946 0 3
// end ;
62956: GO 62910
62958: POP
62959: POP
// if tigers then
62960: LD_VAR 0 2
62964: IFFALSE 63048
// for i = 1 to tigers do
62966: LD_ADDR_VAR 0 11
62970: PUSH
62971: DOUBLE
62972: LD_INT 1
62974: DEC
62975: ST_TO_ADDR
62976: LD_VAR 0 2
62980: PUSH
62981: FOR_TO
62982: IFFALSE 63046
// begin hc_class = class_tiger ;
62984: LD_ADDR_OWVAR 28
62988: PUSH
62989: LD_INT 14
62991: ST_TO_ADDR
// hc_gallery =  ;
62992: LD_ADDR_OWVAR 33
62996: PUSH
62997: LD_STRING 
62999: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
63000: LD_ADDR_OWVAR 35
63004: PUSH
63005: LD_INT 7
63007: NEG
63008: PPUSH
63009: LD_INT 7
63011: PPUSH
63012: CALL_OW 12
63016: ST_TO_ADDR
// animal := CreateHuman ;
63017: LD_ADDR_VAR 0 12
63021: PUSH
63022: CALL_OW 44
63026: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63027: LD_VAR 0 12
63031: PPUSH
63032: LD_VAR 0 8
63036: PPUSH
63037: LD_INT 0
63039: PPUSH
63040: CALL 64946 0 3
// end ;
63044: GO 62981
63046: POP
63047: POP
// if apemans then
63048: LD_VAR 0 3
63052: IFFALSE 63175
// for i = 1 to apemans do
63054: LD_ADDR_VAR 0 11
63058: PUSH
63059: DOUBLE
63060: LD_INT 1
63062: DEC
63063: ST_TO_ADDR
63064: LD_VAR 0 3
63068: PUSH
63069: FOR_TO
63070: IFFALSE 63173
// begin hc_class = class_apeman ;
63072: LD_ADDR_OWVAR 28
63076: PUSH
63077: LD_INT 12
63079: ST_TO_ADDR
// hc_gallery =  ;
63080: LD_ADDR_OWVAR 33
63084: PUSH
63085: LD_STRING 
63087: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
63088: LD_ADDR_OWVAR 35
63092: PUSH
63093: LD_INT 2
63095: NEG
63096: PPUSH
63097: LD_INT 2
63099: PPUSH
63100: CALL_OW 12
63104: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
63105: LD_ADDR_OWVAR 31
63109: PUSH
63110: LD_INT 1
63112: PPUSH
63113: LD_INT 3
63115: PPUSH
63116: CALL_OW 12
63120: PUSH
63121: LD_INT 1
63123: PPUSH
63124: LD_INT 3
63126: PPUSH
63127: CALL_OW 12
63131: PUSH
63132: LD_INT 0
63134: PUSH
63135: LD_INT 0
63137: PUSH
63138: EMPTY
63139: LIST
63140: LIST
63141: LIST
63142: LIST
63143: ST_TO_ADDR
// animal := CreateHuman ;
63144: LD_ADDR_VAR 0 12
63148: PUSH
63149: CALL_OW 44
63153: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63154: LD_VAR 0 12
63158: PPUSH
63159: LD_VAR 0 8
63163: PPUSH
63164: LD_INT 0
63166: PPUSH
63167: CALL 64946 0 3
// end ;
63171: GO 63069
63173: POP
63174: POP
// if enchidnas then
63175: LD_VAR 0 4
63179: IFFALSE 63246
// for i = 1 to enchidnas do
63181: LD_ADDR_VAR 0 11
63185: PUSH
63186: DOUBLE
63187: LD_INT 1
63189: DEC
63190: ST_TO_ADDR
63191: LD_VAR 0 4
63195: PUSH
63196: FOR_TO
63197: IFFALSE 63244
// begin hc_class = 13 ;
63199: LD_ADDR_OWVAR 28
63203: PUSH
63204: LD_INT 13
63206: ST_TO_ADDR
// hc_gallery =  ;
63207: LD_ADDR_OWVAR 33
63211: PUSH
63212: LD_STRING 
63214: ST_TO_ADDR
// animal := CreateHuman ;
63215: LD_ADDR_VAR 0 12
63219: PUSH
63220: CALL_OW 44
63224: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63225: LD_VAR 0 12
63229: PPUSH
63230: LD_VAR 0 8
63234: PPUSH
63235: LD_INT 0
63237: PPUSH
63238: CALL 64946 0 3
// end ;
63242: GO 63196
63244: POP
63245: POP
// if fishes then
63246: LD_VAR 0 7
63250: IFFALSE 63317
// for i = 1 to fishes do
63252: LD_ADDR_VAR 0 11
63256: PUSH
63257: DOUBLE
63258: LD_INT 1
63260: DEC
63261: ST_TO_ADDR
63262: LD_VAR 0 7
63266: PUSH
63267: FOR_TO
63268: IFFALSE 63315
// begin hc_class = 20 ;
63270: LD_ADDR_OWVAR 28
63274: PUSH
63275: LD_INT 20
63277: ST_TO_ADDR
// hc_gallery =  ;
63278: LD_ADDR_OWVAR 33
63282: PUSH
63283: LD_STRING 
63285: ST_TO_ADDR
// animal := CreateHuman ;
63286: LD_ADDR_VAR 0 12
63290: PUSH
63291: CALL_OW 44
63295: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
63296: LD_VAR 0 12
63300: PPUSH
63301: LD_VAR 0 9
63305: PPUSH
63306: LD_INT 0
63308: PPUSH
63309: CALL 64946 0 3
// end ;
63313: GO 63267
63315: POP
63316: POP
// end ;
63317: LD_VAR 0 10
63321: RET
// export function WantHeal ( sci , unit ) ; begin
63322: LD_INT 0
63324: PPUSH
// if GetTaskList ( sci ) > 0 then
63325: LD_VAR 0 1
63329: PPUSH
63330: CALL_OW 437
63334: PUSH
63335: LD_INT 0
63337: GREATER
63338: IFFALSE 63408
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
63340: LD_VAR 0 1
63344: PPUSH
63345: CALL_OW 437
63349: PUSH
63350: LD_INT 1
63352: ARRAY
63353: PUSH
63354: LD_INT 1
63356: ARRAY
63357: PUSH
63358: LD_STRING l
63360: EQUAL
63361: PUSH
63362: LD_VAR 0 1
63366: PPUSH
63367: CALL_OW 437
63371: PUSH
63372: LD_INT 1
63374: ARRAY
63375: PUSH
63376: LD_INT 4
63378: ARRAY
63379: PUSH
63380: LD_VAR 0 2
63384: EQUAL
63385: AND
63386: IFFALSE 63398
// result := true else
63388: LD_ADDR_VAR 0 3
63392: PUSH
63393: LD_INT 1
63395: ST_TO_ADDR
63396: GO 63406
// result := false ;
63398: LD_ADDR_VAR 0 3
63402: PUSH
63403: LD_INT 0
63405: ST_TO_ADDR
// end else
63406: GO 63416
// result := false ;
63408: LD_ADDR_VAR 0 3
63412: PUSH
63413: LD_INT 0
63415: ST_TO_ADDR
// end ;
63416: LD_VAR 0 3
63420: RET
// export function HealTarget ( sci ) ; begin
63421: LD_INT 0
63423: PPUSH
// if not sci then
63424: LD_VAR 0 1
63428: NOT
63429: IFFALSE 63433
// exit ;
63431: GO 63498
// result := 0 ;
63433: LD_ADDR_VAR 0 2
63437: PUSH
63438: LD_INT 0
63440: ST_TO_ADDR
// if GetTaskList ( sci ) then
63441: LD_VAR 0 1
63445: PPUSH
63446: CALL_OW 437
63450: IFFALSE 63498
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
63452: LD_VAR 0 1
63456: PPUSH
63457: CALL_OW 437
63461: PUSH
63462: LD_INT 1
63464: ARRAY
63465: PUSH
63466: LD_INT 1
63468: ARRAY
63469: PUSH
63470: LD_STRING l
63472: EQUAL
63473: IFFALSE 63498
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
63475: LD_ADDR_VAR 0 2
63479: PUSH
63480: LD_VAR 0 1
63484: PPUSH
63485: CALL_OW 437
63489: PUSH
63490: LD_INT 1
63492: ARRAY
63493: PUSH
63494: LD_INT 4
63496: ARRAY
63497: ST_TO_ADDR
// end ;
63498: LD_VAR 0 2
63502: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
63503: LD_INT 0
63505: PPUSH
63506: PPUSH
63507: PPUSH
63508: PPUSH
// if not base_units then
63509: LD_VAR 0 1
63513: NOT
63514: IFFALSE 63518
// exit ;
63516: GO 63605
// result := false ;
63518: LD_ADDR_VAR 0 2
63522: PUSH
63523: LD_INT 0
63525: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
63526: LD_ADDR_VAR 0 5
63530: PUSH
63531: LD_VAR 0 1
63535: PPUSH
63536: LD_INT 21
63538: PUSH
63539: LD_INT 3
63541: PUSH
63542: EMPTY
63543: LIST
63544: LIST
63545: PPUSH
63546: CALL_OW 72
63550: ST_TO_ADDR
// if not tmp then
63551: LD_VAR 0 5
63555: NOT
63556: IFFALSE 63560
// exit ;
63558: GO 63605
// for i in tmp do
63560: LD_ADDR_VAR 0 3
63564: PUSH
63565: LD_VAR 0 5
63569: PUSH
63570: FOR_IN
63571: IFFALSE 63603
// begin result := EnemyInRange ( i , 22 ) ;
63573: LD_ADDR_VAR 0 2
63577: PUSH
63578: LD_VAR 0 3
63582: PPUSH
63583: LD_INT 22
63585: PPUSH
63586: CALL 61192 0 2
63590: ST_TO_ADDR
// if result then
63591: LD_VAR 0 2
63595: IFFALSE 63601
// exit ;
63597: POP
63598: POP
63599: GO 63605
// end ;
63601: GO 63570
63603: POP
63604: POP
// end ;
63605: LD_VAR 0 2
63609: RET
// export function FilterByTag ( units , tag ) ; begin
63610: LD_INT 0
63612: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
63613: LD_ADDR_VAR 0 3
63617: PUSH
63618: LD_VAR 0 1
63622: PPUSH
63623: LD_INT 120
63625: PUSH
63626: LD_VAR 0 2
63630: PUSH
63631: EMPTY
63632: LIST
63633: LIST
63634: PPUSH
63635: CALL_OW 72
63639: ST_TO_ADDR
// end ;
63640: LD_VAR 0 3
63644: RET
// export function IsDriver ( un ) ; begin
63645: LD_INT 0
63647: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
63648: LD_ADDR_VAR 0 2
63652: PUSH
63653: LD_VAR 0 1
63657: PUSH
63658: LD_INT 55
63660: PUSH
63661: EMPTY
63662: LIST
63663: PPUSH
63664: CALL_OW 69
63668: IN
63669: ST_TO_ADDR
// end ;
63670: LD_VAR 0 2
63674: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
63675: LD_INT 0
63677: PPUSH
63678: PPUSH
// list := [ ] ;
63679: LD_ADDR_VAR 0 5
63683: PUSH
63684: EMPTY
63685: ST_TO_ADDR
// case d of 0 :
63686: LD_VAR 0 3
63690: PUSH
63691: LD_INT 0
63693: DOUBLE
63694: EQUAL
63695: IFTRUE 63699
63697: GO 63832
63699: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
63700: LD_ADDR_VAR 0 5
63704: PUSH
63705: LD_VAR 0 1
63709: PUSH
63710: LD_INT 4
63712: MINUS
63713: PUSH
63714: LD_VAR 0 2
63718: PUSH
63719: LD_INT 4
63721: MINUS
63722: PUSH
63723: LD_INT 2
63725: PUSH
63726: EMPTY
63727: LIST
63728: LIST
63729: LIST
63730: PUSH
63731: LD_VAR 0 1
63735: PUSH
63736: LD_INT 3
63738: MINUS
63739: PUSH
63740: LD_VAR 0 2
63744: PUSH
63745: LD_INT 1
63747: PUSH
63748: EMPTY
63749: LIST
63750: LIST
63751: LIST
63752: PUSH
63753: LD_VAR 0 1
63757: PUSH
63758: LD_INT 4
63760: PLUS
63761: PUSH
63762: LD_VAR 0 2
63766: PUSH
63767: LD_INT 4
63769: PUSH
63770: EMPTY
63771: LIST
63772: LIST
63773: LIST
63774: PUSH
63775: LD_VAR 0 1
63779: PUSH
63780: LD_INT 3
63782: PLUS
63783: PUSH
63784: LD_VAR 0 2
63788: PUSH
63789: LD_INT 3
63791: PLUS
63792: PUSH
63793: LD_INT 5
63795: PUSH
63796: EMPTY
63797: LIST
63798: LIST
63799: LIST
63800: PUSH
63801: LD_VAR 0 1
63805: PUSH
63806: LD_VAR 0 2
63810: PUSH
63811: LD_INT 4
63813: PLUS
63814: PUSH
63815: LD_INT 0
63817: PUSH
63818: EMPTY
63819: LIST
63820: LIST
63821: LIST
63822: PUSH
63823: EMPTY
63824: LIST
63825: LIST
63826: LIST
63827: LIST
63828: LIST
63829: ST_TO_ADDR
// end ; 1 :
63830: GO 64530
63832: LD_INT 1
63834: DOUBLE
63835: EQUAL
63836: IFTRUE 63840
63838: GO 63973
63840: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
63841: LD_ADDR_VAR 0 5
63845: PUSH
63846: LD_VAR 0 1
63850: PUSH
63851: LD_VAR 0 2
63855: PUSH
63856: LD_INT 4
63858: MINUS
63859: PUSH
63860: LD_INT 3
63862: PUSH
63863: EMPTY
63864: LIST
63865: LIST
63866: LIST
63867: PUSH
63868: LD_VAR 0 1
63872: PUSH
63873: LD_INT 3
63875: MINUS
63876: PUSH
63877: LD_VAR 0 2
63881: PUSH
63882: LD_INT 3
63884: MINUS
63885: PUSH
63886: LD_INT 2
63888: PUSH
63889: EMPTY
63890: LIST
63891: LIST
63892: LIST
63893: PUSH
63894: LD_VAR 0 1
63898: PUSH
63899: LD_INT 4
63901: MINUS
63902: PUSH
63903: LD_VAR 0 2
63907: PUSH
63908: LD_INT 1
63910: PUSH
63911: EMPTY
63912: LIST
63913: LIST
63914: LIST
63915: PUSH
63916: LD_VAR 0 1
63920: PUSH
63921: LD_VAR 0 2
63925: PUSH
63926: LD_INT 3
63928: PLUS
63929: PUSH
63930: LD_INT 0
63932: PUSH
63933: EMPTY
63934: LIST
63935: LIST
63936: LIST
63937: PUSH
63938: LD_VAR 0 1
63942: PUSH
63943: LD_INT 4
63945: PLUS
63946: PUSH
63947: LD_VAR 0 2
63951: PUSH
63952: LD_INT 4
63954: PLUS
63955: PUSH
63956: LD_INT 5
63958: PUSH
63959: EMPTY
63960: LIST
63961: LIST
63962: LIST
63963: PUSH
63964: EMPTY
63965: LIST
63966: LIST
63967: LIST
63968: LIST
63969: LIST
63970: ST_TO_ADDR
// end ; 2 :
63971: GO 64530
63973: LD_INT 2
63975: DOUBLE
63976: EQUAL
63977: IFTRUE 63981
63979: GO 64110
63981: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
63982: LD_ADDR_VAR 0 5
63986: PUSH
63987: LD_VAR 0 1
63991: PUSH
63992: LD_VAR 0 2
63996: PUSH
63997: LD_INT 3
63999: MINUS
64000: PUSH
64001: LD_INT 3
64003: PUSH
64004: EMPTY
64005: LIST
64006: LIST
64007: LIST
64008: PUSH
64009: LD_VAR 0 1
64013: PUSH
64014: LD_INT 4
64016: PLUS
64017: PUSH
64018: LD_VAR 0 2
64022: PUSH
64023: LD_INT 4
64025: PUSH
64026: EMPTY
64027: LIST
64028: LIST
64029: LIST
64030: PUSH
64031: LD_VAR 0 1
64035: PUSH
64036: LD_VAR 0 2
64040: PUSH
64041: LD_INT 4
64043: PLUS
64044: PUSH
64045: LD_INT 0
64047: PUSH
64048: EMPTY
64049: LIST
64050: LIST
64051: LIST
64052: PUSH
64053: LD_VAR 0 1
64057: PUSH
64058: LD_INT 3
64060: MINUS
64061: PUSH
64062: LD_VAR 0 2
64066: PUSH
64067: LD_INT 1
64069: PUSH
64070: EMPTY
64071: LIST
64072: LIST
64073: LIST
64074: PUSH
64075: LD_VAR 0 1
64079: PUSH
64080: LD_INT 4
64082: MINUS
64083: PUSH
64084: LD_VAR 0 2
64088: PUSH
64089: LD_INT 4
64091: MINUS
64092: PUSH
64093: LD_INT 2
64095: PUSH
64096: EMPTY
64097: LIST
64098: LIST
64099: LIST
64100: PUSH
64101: EMPTY
64102: LIST
64103: LIST
64104: LIST
64105: LIST
64106: LIST
64107: ST_TO_ADDR
// end ; 3 :
64108: GO 64530
64110: LD_INT 3
64112: DOUBLE
64113: EQUAL
64114: IFTRUE 64118
64116: GO 64251
64118: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
64119: LD_ADDR_VAR 0 5
64123: PUSH
64124: LD_VAR 0 1
64128: PUSH
64129: LD_INT 3
64131: PLUS
64132: PUSH
64133: LD_VAR 0 2
64137: PUSH
64138: LD_INT 4
64140: PUSH
64141: EMPTY
64142: LIST
64143: LIST
64144: LIST
64145: PUSH
64146: LD_VAR 0 1
64150: PUSH
64151: LD_INT 4
64153: PLUS
64154: PUSH
64155: LD_VAR 0 2
64159: PUSH
64160: LD_INT 4
64162: PLUS
64163: PUSH
64164: LD_INT 5
64166: PUSH
64167: EMPTY
64168: LIST
64169: LIST
64170: LIST
64171: PUSH
64172: LD_VAR 0 1
64176: PUSH
64177: LD_INT 4
64179: MINUS
64180: PUSH
64181: LD_VAR 0 2
64185: PUSH
64186: LD_INT 1
64188: PUSH
64189: EMPTY
64190: LIST
64191: LIST
64192: LIST
64193: PUSH
64194: LD_VAR 0 1
64198: PUSH
64199: LD_VAR 0 2
64203: PUSH
64204: LD_INT 4
64206: MINUS
64207: PUSH
64208: LD_INT 3
64210: PUSH
64211: EMPTY
64212: LIST
64213: LIST
64214: LIST
64215: PUSH
64216: LD_VAR 0 1
64220: PUSH
64221: LD_INT 3
64223: MINUS
64224: PUSH
64225: LD_VAR 0 2
64229: PUSH
64230: LD_INT 3
64232: MINUS
64233: PUSH
64234: LD_INT 2
64236: PUSH
64237: EMPTY
64238: LIST
64239: LIST
64240: LIST
64241: PUSH
64242: EMPTY
64243: LIST
64244: LIST
64245: LIST
64246: LIST
64247: LIST
64248: ST_TO_ADDR
// end ; 4 :
64249: GO 64530
64251: LD_INT 4
64253: DOUBLE
64254: EQUAL
64255: IFTRUE 64259
64257: GO 64392
64259: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
64260: LD_ADDR_VAR 0 5
64264: PUSH
64265: LD_VAR 0 1
64269: PUSH
64270: LD_VAR 0 2
64274: PUSH
64275: LD_INT 4
64277: PLUS
64278: PUSH
64279: LD_INT 0
64281: PUSH
64282: EMPTY
64283: LIST
64284: LIST
64285: LIST
64286: PUSH
64287: LD_VAR 0 1
64291: PUSH
64292: LD_INT 3
64294: PLUS
64295: PUSH
64296: LD_VAR 0 2
64300: PUSH
64301: LD_INT 3
64303: PLUS
64304: PUSH
64305: LD_INT 5
64307: PUSH
64308: EMPTY
64309: LIST
64310: LIST
64311: LIST
64312: PUSH
64313: LD_VAR 0 1
64317: PUSH
64318: LD_INT 4
64320: PLUS
64321: PUSH
64322: LD_VAR 0 2
64326: PUSH
64327: LD_INT 4
64329: PUSH
64330: EMPTY
64331: LIST
64332: LIST
64333: LIST
64334: PUSH
64335: LD_VAR 0 1
64339: PUSH
64340: LD_VAR 0 2
64344: PUSH
64345: LD_INT 3
64347: MINUS
64348: PUSH
64349: LD_INT 3
64351: PUSH
64352: EMPTY
64353: LIST
64354: LIST
64355: LIST
64356: PUSH
64357: LD_VAR 0 1
64361: PUSH
64362: LD_INT 4
64364: MINUS
64365: PUSH
64366: LD_VAR 0 2
64370: PUSH
64371: LD_INT 4
64373: MINUS
64374: PUSH
64375: LD_INT 2
64377: PUSH
64378: EMPTY
64379: LIST
64380: LIST
64381: LIST
64382: PUSH
64383: EMPTY
64384: LIST
64385: LIST
64386: LIST
64387: LIST
64388: LIST
64389: ST_TO_ADDR
// end ; 5 :
64390: GO 64530
64392: LD_INT 5
64394: DOUBLE
64395: EQUAL
64396: IFTRUE 64400
64398: GO 64529
64400: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
64401: LD_ADDR_VAR 0 5
64405: PUSH
64406: LD_VAR 0 1
64410: PUSH
64411: LD_INT 4
64413: MINUS
64414: PUSH
64415: LD_VAR 0 2
64419: PUSH
64420: LD_INT 1
64422: PUSH
64423: EMPTY
64424: LIST
64425: LIST
64426: LIST
64427: PUSH
64428: LD_VAR 0 1
64432: PUSH
64433: LD_VAR 0 2
64437: PUSH
64438: LD_INT 4
64440: MINUS
64441: PUSH
64442: LD_INT 3
64444: PUSH
64445: EMPTY
64446: LIST
64447: LIST
64448: LIST
64449: PUSH
64450: LD_VAR 0 1
64454: PUSH
64455: LD_INT 4
64457: PLUS
64458: PUSH
64459: LD_VAR 0 2
64463: PUSH
64464: LD_INT 4
64466: PLUS
64467: PUSH
64468: LD_INT 5
64470: PUSH
64471: EMPTY
64472: LIST
64473: LIST
64474: LIST
64475: PUSH
64476: LD_VAR 0 1
64480: PUSH
64481: LD_INT 3
64483: PLUS
64484: PUSH
64485: LD_VAR 0 2
64489: PUSH
64490: LD_INT 4
64492: PUSH
64493: EMPTY
64494: LIST
64495: LIST
64496: LIST
64497: PUSH
64498: LD_VAR 0 1
64502: PUSH
64503: LD_VAR 0 2
64507: PUSH
64508: LD_INT 3
64510: PLUS
64511: PUSH
64512: LD_INT 0
64514: PUSH
64515: EMPTY
64516: LIST
64517: LIST
64518: LIST
64519: PUSH
64520: EMPTY
64521: LIST
64522: LIST
64523: LIST
64524: LIST
64525: LIST
64526: ST_TO_ADDR
// end ; end ;
64527: GO 64530
64529: POP
// result := list ;
64530: LD_ADDR_VAR 0 4
64534: PUSH
64535: LD_VAR 0 5
64539: ST_TO_ADDR
// end ;
64540: LD_VAR 0 4
64544: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
64545: LD_INT 0
64547: PPUSH
64548: PPUSH
64549: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
64550: LD_VAR 0 1
64554: NOT
64555: PUSH
64556: LD_VAR 0 2
64560: PUSH
64561: LD_INT 1
64563: PUSH
64564: LD_INT 2
64566: PUSH
64567: LD_INT 3
64569: PUSH
64570: LD_INT 4
64572: PUSH
64573: EMPTY
64574: LIST
64575: LIST
64576: LIST
64577: LIST
64578: IN
64579: NOT
64580: OR
64581: IFFALSE 64585
// exit ;
64583: GO 64668
// tmp := [ ] ;
64585: LD_ADDR_VAR 0 5
64589: PUSH
64590: EMPTY
64591: ST_TO_ADDR
// for i in units do
64592: LD_ADDR_VAR 0 4
64596: PUSH
64597: LD_VAR 0 1
64601: PUSH
64602: FOR_IN
64603: IFFALSE 64637
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
64605: LD_ADDR_VAR 0 5
64609: PUSH
64610: LD_VAR 0 5
64614: PPUSH
64615: LD_VAR 0 4
64619: PPUSH
64620: LD_VAR 0 2
64624: PPUSH
64625: CALL_OW 259
64629: PPUSH
64630: CALL 66028 0 2
64634: ST_TO_ADDR
64635: GO 64602
64637: POP
64638: POP
// if not tmp then
64639: LD_VAR 0 5
64643: NOT
64644: IFFALSE 64648
// exit ;
64646: GO 64668
// result := SortListByListDesc ( units , tmp ) ;
64648: LD_ADDR_VAR 0 3
64652: PUSH
64653: LD_VAR 0 1
64657: PPUSH
64658: LD_VAR 0 5
64662: PPUSH
64663: CALL_OW 77
64667: ST_TO_ADDR
// end ;
64668: LD_VAR 0 3
64672: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
64673: LD_INT 0
64675: PPUSH
64676: PPUSH
64677: PPUSH
// result := false ;
64678: LD_ADDR_VAR 0 3
64682: PUSH
64683: LD_INT 0
64685: ST_TO_ADDR
// if not building then
64686: LD_VAR 0 2
64690: NOT
64691: IFFALSE 64695
// exit ;
64693: GO 64833
// x := GetX ( building ) ;
64695: LD_ADDR_VAR 0 4
64699: PUSH
64700: LD_VAR 0 2
64704: PPUSH
64705: CALL_OW 250
64709: ST_TO_ADDR
// y := GetY ( building ) ;
64710: LD_ADDR_VAR 0 5
64714: PUSH
64715: LD_VAR 0 2
64719: PPUSH
64720: CALL_OW 251
64724: ST_TO_ADDR
// if not x or not y then
64725: LD_VAR 0 4
64729: NOT
64730: PUSH
64731: LD_VAR 0 5
64735: NOT
64736: OR
64737: IFFALSE 64741
// exit ;
64739: GO 64833
// if GetTaskList ( unit ) then
64741: LD_VAR 0 1
64745: PPUSH
64746: CALL_OW 437
64750: IFFALSE 64833
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
64752: LD_STRING e
64754: PUSH
64755: LD_VAR 0 1
64759: PPUSH
64760: CALL_OW 437
64764: PUSH
64765: LD_INT 1
64767: ARRAY
64768: PUSH
64769: LD_INT 1
64771: ARRAY
64772: EQUAL
64773: PUSH
64774: LD_VAR 0 4
64778: PUSH
64779: LD_VAR 0 1
64783: PPUSH
64784: CALL_OW 437
64788: PUSH
64789: LD_INT 1
64791: ARRAY
64792: PUSH
64793: LD_INT 2
64795: ARRAY
64796: EQUAL
64797: AND
64798: PUSH
64799: LD_VAR 0 5
64803: PUSH
64804: LD_VAR 0 1
64808: PPUSH
64809: CALL_OW 437
64813: PUSH
64814: LD_INT 1
64816: ARRAY
64817: PUSH
64818: LD_INT 3
64820: ARRAY
64821: EQUAL
64822: AND
64823: IFFALSE 64833
// result := true end ;
64825: LD_ADDR_VAR 0 3
64829: PUSH
64830: LD_INT 1
64832: ST_TO_ADDR
// end ;
64833: LD_VAR 0 3
64837: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
64838: LD_INT 0
64840: PPUSH
// result := false ;
64841: LD_ADDR_VAR 0 4
64845: PUSH
64846: LD_INT 0
64848: ST_TO_ADDR
// if GetTaskList ( unit ) then
64849: LD_VAR 0 1
64853: PPUSH
64854: CALL_OW 437
64858: IFFALSE 64941
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
64860: LD_STRING M
64862: PUSH
64863: LD_VAR 0 1
64867: PPUSH
64868: CALL_OW 437
64872: PUSH
64873: LD_INT 1
64875: ARRAY
64876: PUSH
64877: LD_INT 1
64879: ARRAY
64880: EQUAL
64881: PUSH
64882: LD_VAR 0 2
64886: PUSH
64887: LD_VAR 0 1
64891: PPUSH
64892: CALL_OW 437
64896: PUSH
64897: LD_INT 1
64899: ARRAY
64900: PUSH
64901: LD_INT 2
64903: ARRAY
64904: EQUAL
64905: AND
64906: PUSH
64907: LD_VAR 0 3
64911: PUSH
64912: LD_VAR 0 1
64916: PPUSH
64917: CALL_OW 437
64921: PUSH
64922: LD_INT 1
64924: ARRAY
64925: PUSH
64926: LD_INT 3
64928: ARRAY
64929: EQUAL
64930: AND
64931: IFFALSE 64941
// result := true ;
64933: LD_ADDR_VAR 0 4
64937: PUSH
64938: LD_INT 1
64940: ST_TO_ADDR
// end ; end ;
64941: LD_VAR 0 4
64945: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
64946: LD_INT 0
64948: PPUSH
64949: PPUSH
64950: PPUSH
64951: PPUSH
// if not unit or not area then
64952: LD_VAR 0 1
64956: NOT
64957: PUSH
64958: LD_VAR 0 2
64962: NOT
64963: OR
64964: IFFALSE 64968
// exit ;
64966: GO 65131
// tmp := AreaToList ( area , i ) ;
64968: LD_ADDR_VAR 0 6
64972: PUSH
64973: LD_VAR 0 2
64977: PPUSH
64978: LD_VAR 0 5
64982: PPUSH
64983: CALL_OW 517
64987: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
64988: LD_ADDR_VAR 0 5
64992: PUSH
64993: DOUBLE
64994: LD_INT 1
64996: DEC
64997: ST_TO_ADDR
64998: LD_VAR 0 6
65002: PUSH
65003: LD_INT 1
65005: ARRAY
65006: PUSH
65007: FOR_TO
65008: IFFALSE 65129
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
65010: LD_ADDR_VAR 0 7
65014: PUSH
65015: LD_VAR 0 6
65019: PUSH
65020: LD_INT 1
65022: ARRAY
65023: PUSH
65024: LD_VAR 0 5
65028: ARRAY
65029: PUSH
65030: LD_VAR 0 6
65034: PUSH
65035: LD_INT 2
65037: ARRAY
65038: PUSH
65039: LD_VAR 0 5
65043: ARRAY
65044: PUSH
65045: EMPTY
65046: LIST
65047: LIST
65048: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 3 ] ) = 0 then
65049: LD_INT 92
65051: PUSH
65052: LD_VAR 0 7
65056: PUSH
65057: LD_INT 1
65059: ARRAY
65060: PUSH
65061: LD_VAR 0 7
65065: PUSH
65066: LD_INT 2
65068: ARRAY
65069: PUSH
65070: LD_INT 3
65072: PUSH
65073: EMPTY
65074: LIST
65075: LIST
65076: LIST
65077: LIST
65078: PPUSH
65079: CALL_OW 69
65083: PUSH
65084: LD_INT 0
65086: EQUAL
65087: IFFALSE 65127
// begin PlaceUnitArea ( unit , area , mode ) ;
65089: LD_VAR 0 1
65093: PPUSH
65094: LD_VAR 0 2
65098: PPUSH
65099: LD_VAR 0 3
65103: PPUSH
65104: CALL_OW 49
// result := IsPlaced ( unit ) ;
65108: LD_ADDR_VAR 0 4
65112: PUSH
65113: LD_VAR 0 1
65117: PPUSH
65118: CALL_OW 305
65122: ST_TO_ADDR
// exit ;
65123: POP
65124: POP
65125: GO 65131
// end ; end ;
65127: GO 65007
65129: POP
65130: POP
// end ;
65131: LD_VAR 0 4
65135: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
65136: LD_INT 0
65138: PPUSH
65139: PPUSH
65140: PPUSH
// if not side or side > 8 then
65141: LD_VAR 0 1
65145: NOT
65146: PUSH
65147: LD_VAR 0 1
65151: PUSH
65152: LD_INT 8
65154: GREATER
65155: OR
65156: IFFALSE 65160
// exit ;
65158: GO 65347
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
65160: LD_ADDR_VAR 0 4
65164: PUSH
65165: LD_INT 22
65167: PUSH
65168: LD_VAR 0 1
65172: PUSH
65173: EMPTY
65174: LIST
65175: LIST
65176: PUSH
65177: LD_INT 21
65179: PUSH
65180: LD_INT 3
65182: PUSH
65183: EMPTY
65184: LIST
65185: LIST
65186: PUSH
65187: EMPTY
65188: LIST
65189: LIST
65190: PPUSH
65191: CALL_OW 69
65195: ST_TO_ADDR
// if not tmp then
65196: LD_VAR 0 4
65200: NOT
65201: IFFALSE 65205
// exit ;
65203: GO 65347
// enable_addtolog := true ;
65205: LD_ADDR_OWVAR 81
65209: PUSH
65210: LD_INT 1
65212: ST_TO_ADDR
// AddToLog ( [ ) ;
65213: LD_STRING [
65215: PPUSH
65216: CALL_OW 561
// for i in tmp do
65220: LD_ADDR_VAR 0 3
65224: PUSH
65225: LD_VAR 0 4
65229: PUSH
65230: FOR_IN
65231: IFFALSE 65338
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
65233: LD_STRING [
65235: PUSH
65236: LD_VAR 0 3
65240: PPUSH
65241: CALL_OW 266
65245: STR
65246: PUSH
65247: LD_STRING , 
65249: STR
65250: PUSH
65251: LD_VAR 0 3
65255: PPUSH
65256: CALL_OW 250
65260: STR
65261: PUSH
65262: LD_STRING , 
65264: STR
65265: PUSH
65266: LD_VAR 0 3
65270: PPUSH
65271: CALL_OW 251
65275: STR
65276: PUSH
65277: LD_STRING , 
65279: STR
65280: PUSH
65281: LD_VAR 0 3
65285: PPUSH
65286: CALL_OW 254
65290: STR
65291: PUSH
65292: LD_STRING , 
65294: STR
65295: PUSH
65296: LD_VAR 0 3
65300: PPUSH
65301: LD_INT 1
65303: PPUSH
65304: CALL_OW 268
65308: STR
65309: PUSH
65310: LD_STRING , 
65312: STR
65313: PUSH
65314: LD_VAR 0 3
65318: PPUSH
65319: LD_INT 2
65321: PPUSH
65322: CALL_OW 268
65326: STR
65327: PUSH
65328: LD_STRING ],
65330: STR
65331: PPUSH
65332: CALL_OW 561
// end ;
65336: GO 65230
65338: POP
65339: POP
// AddToLog ( ]; ) ;
65340: LD_STRING ];
65342: PPUSH
65343: CALL_OW 561
// end ;
65347: LD_VAR 0 2
65351: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
65352: LD_INT 0
65354: PPUSH
65355: PPUSH
65356: PPUSH
65357: PPUSH
65358: PPUSH
// if not area or not rate or not max then
65359: LD_VAR 0 1
65363: NOT
65364: PUSH
65365: LD_VAR 0 2
65369: NOT
65370: OR
65371: PUSH
65372: LD_VAR 0 4
65376: NOT
65377: OR
65378: IFFALSE 65382
// exit ;
65380: GO 65571
// while 1 do
65382: LD_INT 1
65384: IFFALSE 65571
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
65386: LD_ADDR_VAR 0 9
65390: PUSH
65391: LD_VAR 0 1
65395: PPUSH
65396: LD_INT 1
65398: PPUSH
65399: CALL_OW 287
65403: PUSH
65404: LD_INT 10
65406: MUL
65407: ST_TO_ADDR
// r := rate / 10 ;
65408: LD_ADDR_VAR 0 7
65412: PUSH
65413: LD_VAR 0 2
65417: PUSH
65418: LD_INT 10
65420: DIVREAL
65421: ST_TO_ADDR
// time := 1 1$00 ;
65422: LD_ADDR_VAR 0 8
65426: PUSH
65427: LD_INT 2100
65429: ST_TO_ADDR
// if amount < min then
65430: LD_VAR 0 9
65434: PUSH
65435: LD_VAR 0 3
65439: LESS
65440: IFFALSE 65458
// r := r * 2 else
65442: LD_ADDR_VAR 0 7
65446: PUSH
65447: LD_VAR 0 7
65451: PUSH
65452: LD_INT 2
65454: MUL
65455: ST_TO_ADDR
65456: GO 65484
// if amount > max then
65458: LD_VAR 0 9
65462: PUSH
65463: LD_VAR 0 4
65467: GREATER
65468: IFFALSE 65484
// r := r / 2 ;
65470: LD_ADDR_VAR 0 7
65474: PUSH
65475: LD_VAR 0 7
65479: PUSH
65480: LD_INT 2
65482: DIVREAL
65483: ST_TO_ADDR
// time := time / r ;
65484: LD_ADDR_VAR 0 8
65488: PUSH
65489: LD_VAR 0 8
65493: PUSH
65494: LD_VAR 0 7
65498: DIVREAL
65499: ST_TO_ADDR
// if time < 0 then
65500: LD_VAR 0 8
65504: PUSH
65505: LD_INT 0
65507: LESS
65508: IFFALSE 65525
// time := time * - 1 ;
65510: LD_ADDR_VAR 0 8
65514: PUSH
65515: LD_VAR 0 8
65519: PUSH
65520: LD_INT 1
65522: NEG
65523: MUL
65524: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
65525: LD_VAR 0 8
65529: PUSH
65530: LD_INT 35
65532: PPUSH
65533: LD_INT 875
65535: PPUSH
65536: CALL_OW 12
65540: PLUS
65541: PPUSH
65542: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
65546: LD_INT 1
65548: PPUSH
65549: LD_INT 5
65551: PPUSH
65552: CALL_OW 12
65556: PPUSH
65557: LD_VAR 0 1
65561: PPUSH
65562: LD_INT 1
65564: PPUSH
65565: CALL_OW 55
// end ;
65569: GO 65382
// end ;
65571: LD_VAR 0 5
65575: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
65576: LD_INT 0
65578: PPUSH
65579: PPUSH
65580: PPUSH
65581: PPUSH
65582: PPUSH
65583: PPUSH
65584: PPUSH
65585: PPUSH
// if not turrets or not factories then
65586: LD_VAR 0 1
65590: NOT
65591: PUSH
65592: LD_VAR 0 2
65596: NOT
65597: OR
65598: IFFALSE 65602
// exit ;
65600: GO 65909
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
65602: LD_ADDR_VAR 0 10
65606: PUSH
65607: LD_INT 5
65609: PUSH
65610: LD_INT 6
65612: PUSH
65613: EMPTY
65614: LIST
65615: LIST
65616: PUSH
65617: LD_INT 2
65619: PUSH
65620: LD_INT 4
65622: PUSH
65623: EMPTY
65624: LIST
65625: LIST
65626: PUSH
65627: LD_INT 3
65629: PUSH
65630: LD_INT 5
65632: PUSH
65633: EMPTY
65634: LIST
65635: LIST
65636: PUSH
65637: EMPTY
65638: LIST
65639: LIST
65640: LIST
65641: PUSH
65642: LD_INT 24
65644: PUSH
65645: LD_INT 25
65647: PUSH
65648: EMPTY
65649: LIST
65650: LIST
65651: PUSH
65652: LD_INT 23
65654: PUSH
65655: LD_INT 27
65657: PUSH
65658: EMPTY
65659: LIST
65660: LIST
65661: PUSH
65662: EMPTY
65663: LIST
65664: LIST
65665: PUSH
65666: LD_INT 42
65668: PUSH
65669: LD_INT 43
65671: PUSH
65672: EMPTY
65673: LIST
65674: LIST
65675: PUSH
65676: LD_INT 44
65678: PUSH
65679: LD_INT 46
65681: PUSH
65682: EMPTY
65683: LIST
65684: LIST
65685: PUSH
65686: LD_INT 45
65688: PUSH
65689: LD_INT 47
65691: PUSH
65692: EMPTY
65693: LIST
65694: LIST
65695: PUSH
65696: EMPTY
65697: LIST
65698: LIST
65699: LIST
65700: PUSH
65701: EMPTY
65702: LIST
65703: LIST
65704: LIST
65705: ST_TO_ADDR
// result := [ ] ;
65706: LD_ADDR_VAR 0 3
65710: PUSH
65711: EMPTY
65712: ST_TO_ADDR
// for i in turrets do
65713: LD_ADDR_VAR 0 4
65717: PUSH
65718: LD_VAR 0 1
65722: PUSH
65723: FOR_IN
65724: IFFALSE 65907
// begin nat := GetNation ( i ) ;
65726: LD_ADDR_VAR 0 7
65730: PUSH
65731: LD_VAR 0 4
65735: PPUSH
65736: CALL_OW 248
65740: ST_TO_ADDR
// weapon := 0 ;
65741: LD_ADDR_VAR 0 8
65745: PUSH
65746: LD_INT 0
65748: ST_TO_ADDR
// if not nat then
65749: LD_VAR 0 7
65753: NOT
65754: IFFALSE 65758
// continue ;
65756: GO 65723
// for j in list [ nat ] do
65758: LD_ADDR_VAR 0 5
65762: PUSH
65763: LD_VAR 0 10
65767: PUSH
65768: LD_VAR 0 7
65772: ARRAY
65773: PUSH
65774: FOR_IN
65775: IFFALSE 65816
// if GetBWeapon ( i ) = j [ 1 ] then
65777: LD_VAR 0 4
65781: PPUSH
65782: CALL_OW 269
65786: PUSH
65787: LD_VAR 0 5
65791: PUSH
65792: LD_INT 1
65794: ARRAY
65795: EQUAL
65796: IFFALSE 65814
// begin weapon := j [ 2 ] ;
65798: LD_ADDR_VAR 0 8
65802: PUSH
65803: LD_VAR 0 5
65807: PUSH
65808: LD_INT 2
65810: ARRAY
65811: ST_TO_ADDR
// break ;
65812: GO 65816
// end ;
65814: GO 65774
65816: POP
65817: POP
// if not weapon then
65818: LD_VAR 0 8
65822: NOT
65823: IFFALSE 65827
// continue ;
65825: GO 65723
// for k in factories do
65827: LD_ADDR_VAR 0 6
65831: PUSH
65832: LD_VAR 0 2
65836: PUSH
65837: FOR_IN
65838: IFFALSE 65903
// begin weapons := AvailableWeaponList ( k ) ;
65840: LD_ADDR_VAR 0 9
65844: PUSH
65845: LD_VAR 0 6
65849: PPUSH
65850: CALL_OW 478
65854: ST_TO_ADDR
// if not weapons then
65855: LD_VAR 0 9
65859: NOT
65860: IFFALSE 65864
// continue ;
65862: GO 65837
// if weapon in weapons then
65864: LD_VAR 0 8
65868: PUSH
65869: LD_VAR 0 9
65873: IN
65874: IFFALSE 65901
// begin result := [ i , weapon ] ;
65876: LD_ADDR_VAR 0 3
65880: PUSH
65881: LD_VAR 0 4
65885: PUSH
65886: LD_VAR 0 8
65890: PUSH
65891: EMPTY
65892: LIST
65893: LIST
65894: ST_TO_ADDR
// exit ;
65895: POP
65896: POP
65897: POP
65898: POP
65899: GO 65909
// end ; end ;
65901: GO 65837
65903: POP
65904: POP
// end ;
65905: GO 65723
65907: POP
65908: POP
// end ;
65909: LD_VAR 0 3
65913: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
65914: LD_INT 0
65916: PPUSH
// if not side or side > 8 then
65917: LD_VAR 0 3
65921: NOT
65922: PUSH
65923: LD_VAR 0 3
65927: PUSH
65928: LD_INT 8
65930: GREATER
65931: OR
65932: IFFALSE 65936
// exit ;
65934: GO 65995
// if not range then
65936: LD_VAR 0 4
65940: NOT
65941: IFFALSE 65952
// range := - 12 ;
65943: LD_ADDR_VAR 0 4
65947: PUSH
65948: LD_INT 12
65950: NEG
65951: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
65952: LD_VAR 0 1
65956: PPUSH
65957: LD_VAR 0 2
65961: PPUSH
65962: LD_VAR 0 3
65966: PPUSH
65967: LD_VAR 0 4
65971: PPUSH
65972: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
65976: LD_VAR 0 1
65980: PPUSH
65981: LD_VAR 0 2
65985: PPUSH
65986: LD_VAR 0 3
65990: PPUSH
65991: CALL_OW 331
// end ;
65995: LD_VAR 0 5
65999: RET
// export function Video ( mode ) ; begin
66000: LD_INT 0
66002: PPUSH
// ingame_video = mode ;
66003: LD_ADDR_OWVAR 52
66007: PUSH
66008: LD_VAR 0 1
66012: ST_TO_ADDR
// interface_hidden = mode ;
66013: LD_ADDR_OWVAR 54
66017: PUSH
66018: LD_VAR 0 1
66022: ST_TO_ADDR
// end ;
66023: LD_VAR 0 2
66027: RET
// export function Join ( array , element ) ; begin
66028: LD_INT 0
66030: PPUSH
// result := Replace ( array , array + 1 , element ) ;
66031: LD_ADDR_VAR 0 3
66035: PUSH
66036: LD_VAR 0 1
66040: PPUSH
66041: LD_VAR 0 1
66045: PUSH
66046: LD_INT 1
66048: PLUS
66049: PPUSH
66050: LD_VAR 0 2
66054: PPUSH
66055: CALL_OW 1
66059: ST_TO_ADDR
// end ;
66060: LD_VAR 0 3
66064: RET
// export function JoinUnion ( array , element ) ; begin
66065: LD_INT 0
66067: PPUSH
// result := array union element ;
66068: LD_ADDR_VAR 0 3
66072: PUSH
66073: LD_VAR 0 1
66077: PUSH
66078: LD_VAR 0 2
66082: UNION
66083: ST_TO_ADDR
// end ;
66084: LD_VAR 0 3
66088: RET
// export function GetBehemoths ( side ) ; begin
66089: LD_INT 0
66091: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
66092: LD_ADDR_VAR 0 2
66096: PUSH
66097: LD_INT 22
66099: PUSH
66100: LD_VAR 0 1
66104: PUSH
66105: EMPTY
66106: LIST
66107: LIST
66108: PUSH
66109: LD_INT 31
66111: PUSH
66112: LD_INT 25
66114: PUSH
66115: EMPTY
66116: LIST
66117: LIST
66118: PUSH
66119: EMPTY
66120: LIST
66121: LIST
66122: PPUSH
66123: CALL_OW 69
66127: ST_TO_ADDR
// end ;
66128: LD_VAR 0 2
66132: RET
// export function Shuffle ( array ) ; var i , index ; begin
66133: LD_INT 0
66135: PPUSH
66136: PPUSH
66137: PPUSH
// result := [ ] ;
66138: LD_ADDR_VAR 0 2
66142: PUSH
66143: EMPTY
66144: ST_TO_ADDR
// if not array then
66145: LD_VAR 0 1
66149: NOT
66150: IFFALSE 66154
// exit ;
66152: GO 66253
// Randomize ;
66154: CALL_OW 10
// for i = array downto 1 do
66158: LD_ADDR_VAR 0 3
66162: PUSH
66163: DOUBLE
66164: LD_VAR 0 1
66168: INC
66169: ST_TO_ADDR
66170: LD_INT 1
66172: PUSH
66173: FOR_DOWNTO
66174: IFFALSE 66251
// begin index := rand ( 1 , array ) ;
66176: LD_ADDR_VAR 0 4
66180: PUSH
66181: LD_INT 1
66183: PPUSH
66184: LD_VAR 0 1
66188: PPUSH
66189: CALL_OW 12
66193: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
66194: LD_ADDR_VAR 0 2
66198: PUSH
66199: LD_VAR 0 2
66203: PPUSH
66204: LD_VAR 0 2
66208: PUSH
66209: LD_INT 1
66211: PLUS
66212: PPUSH
66213: LD_VAR 0 1
66217: PUSH
66218: LD_VAR 0 4
66222: ARRAY
66223: PPUSH
66224: CALL_OW 2
66228: ST_TO_ADDR
// array := Delete ( array , index ) ;
66229: LD_ADDR_VAR 0 1
66233: PUSH
66234: LD_VAR 0 1
66238: PPUSH
66239: LD_VAR 0 4
66243: PPUSH
66244: CALL_OW 3
66248: ST_TO_ADDR
// end ;
66249: GO 66173
66251: POP
66252: POP
// end ;
66253: LD_VAR 0 2
66257: RET
// export function GetBaseMaterials ( base ) ; begin
66258: LD_INT 0
66260: PPUSH
// result := [ 0 , 0 , 0 ] ;
66261: LD_ADDR_VAR 0 2
66265: PUSH
66266: LD_INT 0
66268: PUSH
66269: LD_INT 0
66271: PUSH
66272: LD_INT 0
66274: PUSH
66275: EMPTY
66276: LIST
66277: LIST
66278: LIST
66279: ST_TO_ADDR
// if not base then
66280: LD_VAR 0 1
66284: NOT
66285: IFFALSE 66289
// exit ;
66287: GO 66338
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
66289: LD_ADDR_VAR 0 2
66293: PUSH
66294: LD_VAR 0 1
66298: PPUSH
66299: LD_INT 1
66301: PPUSH
66302: CALL_OW 275
66306: PUSH
66307: LD_VAR 0 1
66311: PPUSH
66312: LD_INT 2
66314: PPUSH
66315: CALL_OW 275
66319: PUSH
66320: LD_VAR 0 1
66324: PPUSH
66325: LD_INT 3
66327: PPUSH
66328: CALL_OW 275
66332: PUSH
66333: EMPTY
66334: LIST
66335: LIST
66336: LIST
66337: ST_TO_ADDR
// end ;
66338: LD_VAR 0 2
66342: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
66343: LD_INT 0
66345: PPUSH
66346: PPUSH
// result := array ;
66347: LD_ADDR_VAR 0 3
66351: PUSH
66352: LD_VAR 0 1
66356: ST_TO_ADDR
// if size >= result then
66357: LD_VAR 0 2
66361: PUSH
66362: LD_VAR 0 3
66366: GREATEREQUAL
66367: IFFALSE 66371
// exit ;
66369: GO 66421
// if size then
66371: LD_VAR 0 2
66375: IFFALSE 66421
// for i := array downto size do
66377: LD_ADDR_VAR 0 4
66381: PUSH
66382: DOUBLE
66383: LD_VAR 0 1
66387: INC
66388: ST_TO_ADDR
66389: LD_VAR 0 2
66393: PUSH
66394: FOR_DOWNTO
66395: IFFALSE 66419
// result := Delete ( result , result ) ;
66397: LD_ADDR_VAR 0 3
66401: PUSH
66402: LD_VAR 0 3
66406: PPUSH
66407: LD_VAR 0 3
66411: PPUSH
66412: CALL_OW 3
66416: ST_TO_ADDR
66417: GO 66394
66419: POP
66420: POP
// end ;
66421: LD_VAR 0 3
66425: RET
// export function ComExit ( unit ) ; var tmp ; begin
66426: LD_INT 0
66428: PPUSH
66429: PPUSH
// if not IsInUnit ( unit ) then
66430: LD_VAR 0 1
66434: PPUSH
66435: CALL_OW 310
66439: NOT
66440: IFFALSE 66444
// exit ;
66442: GO 66504
// tmp := IsInUnit ( unit ) ;
66444: LD_ADDR_VAR 0 3
66448: PUSH
66449: LD_VAR 0 1
66453: PPUSH
66454: CALL_OW 310
66458: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
66459: LD_VAR 0 3
66463: PPUSH
66464: CALL_OW 247
66468: PUSH
66469: LD_INT 2
66471: EQUAL
66472: IFFALSE 66485
// ComExitVehicle ( unit ) else
66474: LD_VAR 0 1
66478: PPUSH
66479: CALL_OW 121
66483: GO 66494
// ComExitBuilding ( unit ) ;
66485: LD_VAR 0 1
66489: PPUSH
66490: CALL_OW 122
// result := tmp ;
66494: LD_ADDR_VAR 0 2
66498: PUSH
66499: LD_VAR 0 3
66503: ST_TO_ADDR
// end ;
66504: LD_VAR 0 2
66508: RET
// export function ComExitAll ( units ) ; var i ; begin
66509: LD_INT 0
66511: PPUSH
66512: PPUSH
// if not units then
66513: LD_VAR 0 1
66517: NOT
66518: IFFALSE 66522
// exit ;
66520: GO 66548
// for i in units do
66522: LD_ADDR_VAR 0 3
66526: PUSH
66527: LD_VAR 0 1
66531: PUSH
66532: FOR_IN
66533: IFFALSE 66546
// ComExit ( i ) ;
66535: LD_VAR 0 3
66539: PPUSH
66540: CALL 66426 0 1
66544: GO 66532
66546: POP
66547: POP
// end ;
66548: LD_VAR 0 2
66552: RET
// export function ResetHc ; begin
66553: LD_INT 0
66555: PPUSH
// InitHc ;
66556: CALL_OW 19
// hc_importance := 0 ;
66560: LD_ADDR_OWVAR 32
66564: PUSH
66565: LD_INT 0
66567: ST_TO_ADDR
// end ;
66568: LD_VAR 0 1
66572: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
66573: LD_INT 0
66575: PPUSH
66576: PPUSH
66577: PPUSH
// _x := ( x1 + x2 ) div 2 ;
66578: LD_ADDR_VAR 0 6
66582: PUSH
66583: LD_VAR 0 1
66587: PUSH
66588: LD_VAR 0 3
66592: PLUS
66593: PUSH
66594: LD_INT 2
66596: DIV
66597: ST_TO_ADDR
// if _x < 0 then
66598: LD_VAR 0 6
66602: PUSH
66603: LD_INT 0
66605: LESS
66606: IFFALSE 66623
// _x := _x * - 1 ;
66608: LD_ADDR_VAR 0 6
66612: PUSH
66613: LD_VAR 0 6
66617: PUSH
66618: LD_INT 1
66620: NEG
66621: MUL
66622: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
66623: LD_ADDR_VAR 0 7
66627: PUSH
66628: LD_VAR 0 2
66632: PUSH
66633: LD_VAR 0 4
66637: PLUS
66638: PUSH
66639: LD_INT 2
66641: DIV
66642: ST_TO_ADDR
// if _y < 0 then
66643: LD_VAR 0 7
66647: PUSH
66648: LD_INT 0
66650: LESS
66651: IFFALSE 66668
// _y := _y * - 1 ;
66653: LD_ADDR_VAR 0 7
66657: PUSH
66658: LD_VAR 0 7
66662: PUSH
66663: LD_INT 1
66665: NEG
66666: MUL
66667: ST_TO_ADDR
// result := [ _x , _y ] ;
66668: LD_ADDR_VAR 0 5
66672: PUSH
66673: LD_VAR 0 6
66677: PUSH
66678: LD_VAR 0 7
66682: PUSH
66683: EMPTY
66684: LIST
66685: LIST
66686: ST_TO_ADDR
// end ;
66687: LD_VAR 0 5
66691: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
66692: LD_INT 0
66694: PPUSH
66695: PPUSH
66696: PPUSH
66697: PPUSH
// task := GetTaskList ( unit ) ;
66698: LD_ADDR_VAR 0 7
66702: PUSH
66703: LD_VAR 0 1
66707: PPUSH
66708: CALL_OW 437
66712: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
66713: LD_VAR 0 7
66717: NOT
66718: PUSH
66719: LD_VAR 0 1
66723: PPUSH
66724: LD_VAR 0 2
66728: PPUSH
66729: CALL_OW 308
66733: NOT
66734: AND
66735: IFFALSE 66739
// exit ;
66737: GO 66857
// if IsInArea ( unit , area ) then
66739: LD_VAR 0 1
66743: PPUSH
66744: LD_VAR 0 2
66748: PPUSH
66749: CALL_OW 308
66753: IFFALSE 66771
// begin ComMoveToArea ( unit , goAway ) ;
66755: LD_VAR 0 1
66759: PPUSH
66760: LD_VAR 0 3
66764: PPUSH
66765: CALL_OW 113
// exit ;
66769: GO 66857
// end ; if task [ 1 ] [ 1 ] <> M then
66771: LD_VAR 0 7
66775: PUSH
66776: LD_INT 1
66778: ARRAY
66779: PUSH
66780: LD_INT 1
66782: ARRAY
66783: PUSH
66784: LD_STRING M
66786: NONEQUAL
66787: IFFALSE 66791
// exit ;
66789: GO 66857
// x := task [ 1 ] [ 2 ] ;
66791: LD_ADDR_VAR 0 5
66795: PUSH
66796: LD_VAR 0 7
66800: PUSH
66801: LD_INT 1
66803: ARRAY
66804: PUSH
66805: LD_INT 2
66807: ARRAY
66808: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
66809: LD_ADDR_VAR 0 6
66813: PUSH
66814: LD_VAR 0 7
66818: PUSH
66819: LD_INT 1
66821: ARRAY
66822: PUSH
66823: LD_INT 3
66825: ARRAY
66826: ST_TO_ADDR
// if InArea ( x , y , area ) then
66827: LD_VAR 0 5
66831: PPUSH
66832: LD_VAR 0 6
66836: PPUSH
66837: LD_VAR 0 2
66841: PPUSH
66842: CALL_OW 309
66846: IFFALSE 66857
// ComStop ( unit ) ;
66848: LD_VAR 0 1
66852: PPUSH
66853: CALL_OW 141
// end ;
66857: LD_VAR 0 4
66861: RET
// export function Abs ( value ) ; begin
66862: LD_INT 0
66864: PPUSH
// result := value ;
66865: LD_ADDR_VAR 0 2
66869: PUSH
66870: LD_VAR 0 1
66874: ST_TO_ADDR
// if value < 0 then
66875: LD_VAR 0 1
66879: PUSH
66880: LD_INT 0
66882: LESS
66883: IFFALSE 66900
// result := value * - 1 ;
66885: LD_ADDR_VAR 0 2
66889: PUSH
66890: LD_VAR 0 1
66894: PUSH
66895: LD_INT 1
66897: NEG
66898: MUL
66899: ST_TO_ADDR
// end ;
66900: LD_VAR 0 2
66904: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
66905: LD_INT 0
66907: PPUSH
66908: PPUSH
66909: PPUSH
66910: PPUSH
66911: PPUSH
66912: PPUSH
66913: PPUSH
66914: PPUSH
// if not unit or not building then
66915: LD_VAR 0 1
66919: NOT
66920: PUSH
66921: LD_VAR 0 2
66925: NOT
66926: OR
66927: IFFALSE 66931
// exit ;
66929: GO 67157
// x := GetX ( building ) ;
66931: LD_ADDR_VAR 0 4
66935: PUSH
66936: LD_VAR 0 2
66940: PPUSH
66941: CALL_OW 250
66945: ST_TO_ADDR
// y := GetY ( building ) ;
66946: LD_ADDR_VAR 0 6
66950: PUSH
66951: LD_VAR 0 2
66955: PPUSH
66956: CALL_OW 251
66960: ST_TO_ADDR
// d := GetDir ( building ) ;
66961: LD_ADDR_VAR 0 8
66965: PUSH
66966: LD_VAR 0 2
66970: PPUSH
66971: CALL_OW 254
66975: ST_TO_ADDR
// r := 4 ;
66976: LD_ADDR_VAR 0 9
66980: PUSH
66981: LD_INT 4
66983: ST_TO_ADDR
// for i := 1 to 5 do
66984: LD_ADDR_VAR 0 10
66988: PUSH
66989: DOUBLE
66990: LD_INT 1
66992: DEC
66993: ST_TO_ADDR
66994: LD_INT 5
66996: PUSH
66997: FOR_TO
66998: IFFALSE 67155
// begin _x := ShiftX ( x , d , r + i ) ;
67000: LD_ADDR_VAR 0 5
67004: PUSH
67005: LD_VAR 0 4
67009: PPUSH
67010: LD_VAR 0 8
67014: PPUSH
67015: LD_VAR 0 9
67019: PUSH
67020: LD_VAR 0 10
67024: PLUS
67025: PPUSH
67026: CALL_OW 272
67030: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
67031: LD_ADDR_VAR 0 7
67035: PUSH
67036: LD_VAR 0 6
67040: PPUSH
67041: LD_VAR 0 8
67045: PPUSH
67046: LD_VAR 0 9
67050: PUSH
67051: LD_VAR 0 10
67055: PLUS
67056: PPUSH
67057: CALL_OW 273
67061: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
67062: LD_VAR 0 5
67066: PPUSH
67067: LD_VAR 0 7
67071: PPUSH
67072: CALL_OW 488
67076: PUSH
67077: LD_VAR 0 5
67081: PPUSH
67082: LD_VAR 0 7
67086: PPUSH
67087: CALL_OW 428
67091: PPUSH
67092: CALL_OW 247
67096: PUSH
67097: LD_INT 3
67099: PUSH
67100: LD_INT 2
67102: PUSH
67103: EMPTY
67104: LIST
67105: LIST
67106: IN
67107: NOT
67108: AND
67109: IFFALSE 67153
// begin ComMoveXY ( unit , _x , _y ) ;
67111: LD_VAR 0 1
67115: PPUSH
67116: LD_VAR 0 5
67120: PPUSH
67121: LD_VAR 0 7
67125: PPUSH
67126: CALL_OW 111
// result := [ _x , _y ] ;
67130: LD_ADDR_VAR 0 3
67134: PUSH
67135: LD_VAR 0 5
67139: PUSH
67140: LD_VAR 0 7
67144: PUSH
67145: EMPTY
67146: LIST
67147: LIST
67148: ST_TO_ADDR
// exit ;
67149: POP
67150: POP
67151: GO 67157
// end ; end ;
67153: GO 66997
67155: POP
67156: POP
// end ;
67157: LD_VAR 0 3
67161: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
67162: LD_INT 0
67164: PPUSH
67165: PPUSH
67166: PPUSH
// result := 0 ;
67167: LD_ADDR_VAR 0 3
67171: PUSH
67172: LD_INT 0
67174: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
67175: LD_VAR 0 1
67179: PUSH
67180: LD_INT 0
67182: LESS
67183: PUSH
67184: LD_VAR 0 1
67188: PUSH
67189: LD_INT 8
67191: GREATER
67192: OR
67193: PUSH
67194: LD_VAR 0 2
67198: PUSH
67199: LD_INT 0
67201: LESS
67202: OR
67203: PUSH
67204: LD_VAR 0 2
67208: PUSH
67209: LD_INT 8
67211: GREATER
67212: OR
67213: IFFALSE 67217
// exit ;
67215: GO 67292
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
67217: LD_ADDR_VAR 0 4
67221: PUSH
67222: LD_INT 22
67224: PUSH
67225: LD_VAR 0 2
67229: PUSH
67230: EMPTY
67231: LIST
67232: LIST
67233: PPUSH
67234: CALL_OW 69
67238: PUSH
67239: FOR_IN
67240: IFFALSE 67290
// begin un := UnitShoot ( i ) ;
67242: LD_ADDR_VAR 0 5
67246: PUSH
67247: LD_VAR 0 4
67251: PPUSH
67252: CALL_OW 504
67256: ST_TO_ADDR
// if GetSide ( un ) = side1 then
67257: LD_VAR 0 5
67261: PPUSH
67262: CALL_OW 255
67266: PUSH
67267: LD_VAR 0 1
67271: EQUAL
67272: IFFALSE 67288
// begin result := un ;
67274: LD_ADDR_VAR 0 3
67278: PUSH
67279: LD_VAR 0 5
67283: ST_TO_ADDR
// exit ;
67284: POP
67285: POP
67286: GO 67292
// end ; end ;
67288: GO 67239
67290: POP
67291: POP
// end ;
67292: LD_VAR 0 3
67296: RET
// export function GetCargoBay ( units ) ; begin
67297: LD_INT 0
67299: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
67300: LD_ADDR_VAR 0 2
67304: PUSH
67305: LD_VAR 0 1
67309: PPUSH
67310: LD_INT 2
67312: PUSH
67313: LD_INT 34
67315: PUSH
67316: LD_INT 12
67318: PUSH
67319: EMPTY
67320: LIST
67321: LIST
67322: PUSH
67323: LD_INT 34
67325: PUSH
67326: LD_INT 51
67328: PUSH
67329: EMPTY
67330: LIST
67331: LIST
67332: PUSH
67333: LD_INT 34
67335: PUSH
67336: LD_INT 32
67338: PUSH
67339: EMPTY
67340: LIST
67341: LIST
67342: PUSH
67343: LD_INT 34
67345: PUSH
67346: LD_INT 89
67348: PUSH
67349: EMPTY
67350: LIST
67351: LIST
67352: PUSH
67353: EMPTY
67354: LIST
67355: LIST
67356: LIST
67357: LIST
67358: LIST
67359: PPUSH
67360: CALL_OW 72
67364: ST_TO_ADDR
// end ;
67365: LD_VAR 0 2
67369: RET
// export function Negate ( value ) ; begin
67370: LD_INT 0
67372: PPUSH
// result := not value ;
67373: LD_ADDR_VAR 0 2
67377: PUSH
67378: LD_VAR 0 1
67382: NOT
67383: ST_TO_ADDR
// end ;
67384: LD_VAR 0 2
67388: RET
// export function Inc ( value ) ; begin
67389: LD_INT 0
67391: PPUSH
// result := value + 1 ;
67392: LD_ADDR_VAR 0 2
67396: PUSH
67397: LD_VAR 0 1
67401: PUSH
67402: LD_INT 1
67404: PLUS
67405: ST_TO_ADDR
// end ;
67406: LD_VAR 0 2
67410: RET
// export function Dec ( value ) ; begin
67411: LD_INT 0
67413: PPUSH
// result := value - 1 ;
67414: LD_ADDR_VAR 0 2
67418: PUSH
67419: LD_VAR 0 1
67423: PUSH
67424: LD_INT 1
67426: MINUS
67427: ST_TO_ADDR
// end ;
67428: LD_VAR 0 2
67432: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
67433: LD_INT 0
67435: PPUSH
67436: PPUSH
67437: PPUSH
67438: PPUSH
67439: PPUSH
67440: PPUSH
67441: PPUSH
67442: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
67443: LD_VAR 0 1
67447: PPUSH
67448: LD_VAR 0 2
67452: PPUSH
67453: CALL_OW 488
67457: NOT
67458: PUSH
67459: LD_VAR 0 3
67463: PPUSH
67464: LD_VAR 0 4
67468: PPUSH
67469: CALL_OW 488
67473: NOT
67474: OR
67475: IFFALSE 67488
// begin result := - 1 ;
67477: LD_ADDR_VAR 0 5
67481: PUSH
67482: LD_INT 1
67484: NEG
67485: ST_TO_ADDR
// exit ;
67486: GO 67723
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
67488: LD_ADDR_VAR 0 12
67492: PUSH
67493: LD_VAR 0 1
67497: PPUSH
67498: LD_VAR 0 2
67502: PPUSH
67503: LD_VAR 0 3
67507: PPUSH
67508: LD_VAR 0 4
67512: PPUSH
67513: CALL 66573 0 4
67517: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
67518: LD_ADDR_VAR 0 11
67522: PUSH
67523: LD_VAR 0 1
67527: PPUSH
67528: LD_VAR 0 2
67532: PPUSH
67533: LD_VAR 0 12
67537: PUSH
67538: LD_INT 1
67540: ARRAY
67541: PPUSH
67542: LD_VAR 0 12
67546: PUSH
67547: LD_INT 2
67549: ARRAY
67550: PPUSH
67551: CALL_OW 298
67555: ST_TO_ADDR
// distance := 9999 ;
67556: LD_ADDR_VAR 0 10
67560: PUSH
67561: LD_INT 9999
67563: ST_TO_ADDR
// for i := 0 to 5 do
67564: LD_ADDR_VAR 0 6
67568: PUSH
67569: DOUBLE
67570: LD_INT 0
67572: DEC
67573: ST_TO_ADDR
67574: LD_INT 5
67576: PUSH
67577: FOR_TO
67578: IFFALSE 67721
// begin _x := ShiftX ( x1 , i , centerDist ) ;
67580: LD_ADDR_VAR 0 7
67584: PUSH
67585: LD_VAR 0 1
67589: PPUSH
67590: LD_VAR 0 6
67594: PPUSH
67595: LD_VAR 0 11
67599: PPUSH
67600: CALL_OW 272
67604: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
67605: LD_ADDR_VAR 0 8
67609: PUSH
67610: LD_VAR 0 2
67614: PPUSH
67615: LD_VAR 0 6
67619: PPUSH
67620: LD_VAR 0 11
67624: PPUSH
67625: CALL_OW 273
67629: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
67630: LD_VAR 0 7
67634: PPUSH
67635: LD_VAR 0 8
67639: PPUSH
67640: CALL_OW 488
67644: NOT
67645: IFFALSE 67649
// continue ;
67647: GO 67577
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
67649: LD_ADDR_VAR 0 9
67653: PUSH
67654: LD_VAR 0 12
67658: PUSH
67659: LD_INT 1
67661: ARRAY
67662: PPUSH
67663: LD_VAR 0 12
67667: PUSH
67668: LD_INT 2
67670: ARRAY
67671: PPUSH
67672: LD_VAR 0 7
67676: PPUSH
67677: LD_VAR 0 8
67681: PPUSH
67682: CALL_OW 298
67686: ST_TO_ADDR
// if tmp < distance then
67687: LD_VAR 0 9
67691: PUSH
67692: LD_VAR 0 10
67696: LESS
67697: IFFALSE 67719
// begin result := i ;
67699: LD_ADDR_VAR 0 5
67703: PUSH
67704: LD_VAR 0 6
67708: ST_TO_ADDR
// distance := tmp ;
67709: LD_ADDR_VAR 0 10
67713: PUSH
67714: LD_VAR 0 9
67718: ST_TO_ADDR
// end ; end ;
67719: GO 67577
67721: POP
67722: POP
// end ;
67723: LD_VAR 0 5
67727: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
67728: LD_INT 0
67730: PPUSH
67731: PPUSH
// if not driver or not IsInUnit ( driver ) then
67732: LD_VAR 0 1
67736: NOT
67737: PUSH
67738: LD_VAR 0 1
67742: PPUSH
67743: CALL_OW 310
67747: NOT
67748: OR
67749: IFFALSE 67753
// exit ;
67751: GO 67843
// vehicle := IsInUnit ( driver ) ;
67753: LD_ADDR_VAR 0 3
67757: PUSH
67758: LD_VAR 0 1
67762: PPUSH
67763: CALL_OW 310
67767: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
67768: LD_VAR 0 1
67772: PPUSH
67773: LD_STRING \
67775: PUSH
67776: LD_INT 0
67778: PUSH
67779: LD_INT 0
67781: PUSH
67782: LD_INT 0
67784: PUSH
67785: LD_INT 0
67787: PUSH
67788: LD_INT 0
67790: PUSH
67791: LD_INT 0
67793: PUSH
67794: EMPTY
67795: LIST
67796: LIST
67797: LIST
67798: LIST
67799: LIST
67800: LIST
67801: LIST
67802: PUSH
67803: LD_STRING E
67805: PUSH
67806: LD_INT 0
67808: PUSH
67809: LD_INT 0
67811: PUSH
67812: LD_VAR 0 3
67816: PUSH
67817: LD_INT 0
67819: PUSH
67820: LD_INT 0
67822: PUSH
67823: LD_INT 0
67825: PUSH
67826: EMPTY
67827: LIST
67828: LIST
67829: LIST
67830: LIST
67831: LIST
67832: LIST
67833: LIST
67834: PUSH
67835: EMPTY
67836: LIST
67837: LIST
67838: PPUSH
67839: CALL_OW 446
// end ;
67843: LD_VAR 0 2
67847: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
67848: LD_INT 0
67850: PPUSH
67851: PPUSH
// if not driver or not IsInUnit ( driver ) then
67852: LD_VAR 0 1
67856: NOT
67857: PUSH
67858: LD_VAR 0 1
67862: PPUSH
67863: CALL_OW 310
67867: NOT
67868: OR
67869: IFFALSE 67873
// exit ;
67871: GO 67963
// vehicle := IsInUnit ( driver ) ;
67873: LD_ADDR_VAR 0 3
67877: PUSH
67878: LD_VAR 0 1
67882: PPUSH
67883: CALL_OW 310
67887: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
67888: LD_VAR 0 1
67892: PPUSH
67893: LD_STRING \
67895: PUSH
67896: LD_INT 0
67898: PUSH
67899: LD_INT 0
67901: PUSH
67902: LD_INT 0
67904: PUSH
67905: LD_INT 0
67907: PUSH
67908: LD_INT 0
67910: PUSH
67911: LD_INT 0
67913: PUSH
67914: EMPTY
67915: LIST
67916: LIST
67917: LIST
67918: LIST
67919: LIST
67920: LIST
67921: LIST
67922: PUSH
67923: LD_STRING E
67925: PUSH
67926: LD_INT 0
67928: PUSH
67929: LD_INT 0
67931: PUSH
67932: LD_VAR 0 3
67936: PUSH
67937: LD_INT 0
67939: PUSH
67940: LD_INT 0
67942: PUSH
67943: LD_INT 0
67945: PUSH
67946: EMPTY
67947: LIST
67948: LIST
67949: LIST
67950: LIST
67951: LIST
67952: LIST
67953: LIST
67954: PUSH
67955: EMPTY
67956: LIST
67957: LIST
67958: PPUSH
67959: CALL_OW 447
// end ;
67963: LD_VAR 0 2
67967: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
67968: LD_INT 0
67970: PPUSH
67971: PPUSH
67972: PPUSH
// tmp := [ ] ;
67973: LD_ADDR_VAR 0 5
67977: PUSH
67978: EMPTY
67979: ST_TO_ADDR
// for i in units do
67980: LD_ADDR_VAR 0 4
67984: PUSH
67985: LD_VAR 0 1
67989: PUSH
67990: FOR_IN
67991: IFFALSE 68029
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
67993: LD_ADDR_VAR 0 5
67997: PUSH
67998: LD_VAR 0 5
68002: PPUSH
68003: LD_VAR 0 5
68007: PUSH
68008: LD_INT 1
68010: PLUS
68011: PPUSH
68012: LD_VAR 0 4
68016: PPUSH
68017: CALL_OW 256
68021: PPUSH
68022: CALL_OW 2
68026: ST_TO_ADDR
68027: GO 67990
68029: POP
68030: POP
// if not tmp then
68031: LD_VAR 0 5
68035: NOT
68036: IFFALSE 68040
// exit ;
68038: GO 68088
// if asc then
68040: LD_VAR 0 2
68044: IFFALSE 68068
// result := SortListByListAsc ( units , tmp ) else
68046: LD_ADDR_VAR 0 3
68050: PUSH
68051: LD_VAR 0 1
68055: PPUSH
68056: LD_VAR 0 5
68060: PPUSH
68061: CALL_OW 76
68065: ST_TO_ADDR
68066: GO 68088
// result := SortListByListDesc ( units , tmp ) ;
68068: LD_ADDR_VAR 0 3
68072: PUSH
68073: LD_VAR 0 1
68077: PPUSH
68078: LD_VAR 0 5
68082: PPUSH
68083: CALL_OW 77
68087: ST_TO_ADDR
// end ;
68088: LD_VAR 0 3
68092: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
68093: LD_INT 0
68095: PPUSH
68096: PPUSH
// task := GetTaskList ( mech ) ;
68097: LD_ADDR_VAR 0 4
68101: PUSH
68102: LD_VAR 0 1
68106: PPUSH
68107: CALL_OW 437
68111: ST_TO_ADDR
// if not task then
68112: LD_VAR 0 4
68116: NOT
68117: IFFALSE 68121
// exit ;
68119: GO 68163
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
68121: LD_ADDR_VAR 0 3
68125: PUSH
68126: LD_VAR 0 4
68130: PUSH
68131: LD_INT 1
68133: ARRAY
68134: PUSH
68135: LD_INT 1
68137: ARRAY
68138: PUSH
68139: LD_STRING r
68141: EQUAL
68142: PUSH
68143: LD_VAR 0 4
68147: PUSH
68148: LD_INT 1
68150: ARRAY
68151: PUSH
68152: LD_INT 4
68154: ARRAY
68155: PUSH
68156: LD_VAR 0 2
68160: EQUAL
68161: AND
68162: ST_TO_ADDR
// end ;
68163: LD_VAR 0 3
68167: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
68168: LD_INT 0
68170: PPUSH
// SetDir ( unit , d ) ;
68171: LD_VAR 0 1
68175: PPUSH
68176: LD_VAR 0 4
68180: PPUSH
68181: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
68185: LD_VAR 0 1
68189: PPUSH
68190: LD_VAR 0 2
68194: PPUSH
68195: LD_VAR 0 3
68199: PPUSH
68200: LD_VAR 0 5
68204: PPUSH
68205: CALL_OW 48
// end ;
68209: LD_VAR 0 6
68213: RET
// export function ToNaturalNumber ( number ) ; begin
68214: LD_INT 0
68216: PPUSH
// result := number div 1 ;
68217: LD_ADDR_VAR 0 2
68221: PUSH
68222: LD_VAR 0 1
68226: PUSH
68227: LD_INT 1
68229: DIV
68230: ST_TO_ADDR
// if number < 0 then
68231: LD_VAR 0 1
68235: PUSH
68236: LD_INT 0
68238: LESS
68239: IFFALSE 68249
// result := 0 ;
68241: LD_ADDR_VAR 0 2
68245: PUSH
68246: LD_INT 0
68248: ST_TO_ADDR
// end ;
68249: LD_VAR 0 2
68253: RET
// export function SortByClass ( units , class ) ; var un ; begin
68254: LD_INT 0
68256: PPUSH
68257: PPUSH
// if not units or not class then
68258: LD_VAR 0 1
68262: NOT
68263: PUSH
68264: LD_VAR 0 2
68268: NOT
68269: OR
68270: IFFALSE 68274
// exit ;
68272: GO 68369
// result := [ ] ;
68274: LD_ADDR_VAR 0 3
68278: PUSH
68279: EMPTY
68280: ST_TO_ADDR
// for un in units do
68281: LD_ADDR_VAR 0 4
68285: PUSH
68286: LD_VAR 0 1
68290: PUSH
68291: FOR_IN
68292: IFFALSE 68367
// if GetClass ( un ) = class then
68294: LD_VAR 0 4
68298: PPUSH
68299: CALL_OW 257
68303: PUSH
68304: LD_VAR 0 2
68308: EQUAL
68309: IFFALSE 68336
// result := Insert ( result , 1 , un ) else
68311: LD_ADDR_VAR 0 3
68315: PUSH
68316: LD_VAR 0 3
68320: PPUSH
68321: LD_INT 1
68323: PPUSH
68324: LD_VAR 0 4
68328: PPUSH
68329: CALL_OW 2
68333: ST_TO_ADDR
68334: GO 68365
// result := Replace ( result , result + 1 , un ) ;
68336: LD_ADDR_VAR 0 3
68340: PUSH
68341: LD_VAR 0 3
68345: PPUSH
68346: LD_VAR 0 3
68350: PUSH
68351: LD_INT 1
68353: PLUS
68354: PPUSH
68355: LD_VAR 0 4
68359: PPUSH
68360: CALL_OW 1
68364: ST_TO_ADDR
68365: GO 68291
68367: POP
68368: POP
// end ;
68369: LD_VAR 0 3
68373: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
68374: LD_INT 0
68376: PPUSH
68377: PPUSH
68378: PPUSH
68379: PPUSH
68380: PPUSH
68381: PPUSH
68382: PPUSH
// result := [ ] ;
68383: LD_ADDR_VAR 0 4
68387: PUSH
68388: EMPTY
68389: ST_TO_ADDR
// if x - r < 0 then
68390: LD_VAR 0 1
68394: PUSH
68395: LD_VAR 0 3
68399: MINUS
68400: PUSH
68401: LD_INT 0
68403: LESS
68404: IFFALSE 68416
// min_x := 0 else
68406: LD_ADDR_VAR 0 8
68410: PUSH
68411: LD_INT 0
68413: ST_TO_ADDR
68414: GO 68432
// min_x := x - r ;
68416: LD_ADDR_VAR 0 8
68420: PUSH
68421: LD_VAR 0 1
68425: PUSH
68426: LD_VAR 0 3
68430: MINUS
68431: ST_TO_ADDR
// if y - r < 0 then
68432: LD_VAR 0 2
68436: PUSH
68437: LD_VAR 0 3
68441: MINUS
68442: PUSH
68443: LD_INT 0
68445: LESS
68446: IFFALSE 68458
// min_y := 0 else
68448: LD_ADDR_VAR 0 7
68452: PUSH
68453: LD_INT 0
68455: ST_TO_ADDR
68456: GO 68474
// min_y := y - r ;
68458: LD_ADDR_VAR 0 7
68462: PUSH
68463: LD_VAR 0 2
68467: PUSH
68468: LD_VAR 0 3
68472: MINUS
68473: ST_TO_ADDR
// max_x := x + r ;
68474: LD_ADDR_VAR 0 9
68478: PUSH
68479: LD_VAR 0 1
68483: PUSH
68484: LD_VAR 0 3
68488: PLUS
68489: ST_TO_ADDR
// max_y := y + r ;
68490: LD_ADDR_VAR 0 10
68494: PUSH
68495: LD_VAR 0 2
68499: PUSH
68500: LD_VAR 0 3
68504: PLUS
68505: ST_TO_ADDR
// for _x = min_x to max_x do
68506: LD_ADDR_VAR 0 5
68510: PUSH
68511: DOUBLE
68512: LD_VAR 0 8
68516: DEC
68517: ST_TO_ADDR
68518: LD_VAR 0 9
68522: PUSH
68523: FOR_TO
68524: IFFALSE 68625
// for _y = min_y to max_y do
68526: LD_ADDR_VAR 0 6
68530: PUSH
68531: DOUBLE
68532: LD_VAR 0 7
68536: DEC
68537: ST_TO_ADDR
68538: LD_VAR 0 10
68542: PUSH
68543: FOR_TO
68544: IFFALSE 68621
// begin if not ValidHex ( _x , _y ) then
68546: LD_VAR 0 5
68550: PPUSH
68551: LD_VAR 0 6
68555: PPUSH
68556: CALL_OW 488
68560: NOT
68561: IFFALSE 68565
// continue ;
68563: GO 68543
// if GetResourceTypeXY ( _x , _y ) then
68565: LD_VAR 0 5
68569: PPUSH
68570: LD_VAR 0 6
68574: PPUSH
68575: CALL_OW 283
68579: IFFALSE 68619
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
68581: LD_ADDR_VAR 0 4
68585: PUSH
68586: LD_VAR 0 4
68590: PPUSH
68591: LD_VAR 0 4
68595: PUSH
68596: LD_INT 1
68598: PLUS
68599: PPUSH
68600: LD_VAR 0 5
68604: PUSH
68605: LD_VAR 0 6
68609: PUSH
68610: EMPTY
68611: LIST
68612: LIST
68613: PPUSH
68614: CALL_OW 1
68618: ST_TO_ADDR
// end ;
68619: GO 68543
68621: POP
68622: POP
68623: GO 68523
68625: POP
68626: POP
// end ;
68627: LD_VAR 0 4
68631: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
68632: LD_INT 0
68634: PPUSH
68635: PPUSH
68636: PPUSH
68637: PPUSH
68638: PPUSH
68639: PPUSH
68640: PPUSH
68641: PPUSH
// if not units then
68642: LD_VAR 0 1
68646: NOT
68647: IFFALSE 68651
// exit ;
68649: GO 69175
// result := UnitFilter ( units , [ f_ok ] ) ;
68651: LD_ADDR_VAR 0 3
68655: PUSH
68656: LD_VAR 0 1
68660: PPUSH
68661: LD_INT 50
68663: PUSH
68664: EMPTY
68665: LIST
68666: PPUSH
68667: CALL_OW 72
68671: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
68672: LD_ADDR_VAR 0 8
68676: PUSH
68677: LD_VAR 0 1
68681: PUSH
68682: LD_INT 1
68684: ARRAY
68685: PPUSH
68686: CALL_OW 255
68690: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
68691: LD_ADDR_VAR 0 10
68695: PUSH
68696: LD_INT 29
68698: PUSH
68699: LD_INT 91
68701: PUSH
68702: LD_INT 49
68704: PUSH
68705: EMPTY
68706: LIST
68707: LIST
68708: LIST
68709: ST_TO_ADDR
// if not result then
68710: LD_VAR 0 3
68714: NOT
68715: IFFALSE 68719
// exit ;
68717: GO 69175
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
68719: LD_ADDR_VAR 0 5
68723: PUSH
68724: LD_INT 81
68726: PUSH
68727: LD_VAR 0 8
68731: PUSH
68732: EMPTY
68733: LIST
68734: LIST
68735: PPUSH
68736: CALL_OW 69
68740: ST_TO_ADDR
// for i in result do
68741: LD_ADDR_VAR 0 4
68745: PUSH
68746: LD_VAR 0 3
68750: PUSH
68751: FOR_IN
68752: IFFALSE 69173
// begin tag := GetTag ( i ) + 1 ;
68754: LD_ADDR_VAR 0 9
68758: PUSH
68759: LD_VAR 0 4
68763: PPUSH
68764: CALL_OW 110
68768: PUSH
68769: LD_INT 1
68771: PLUS
68772: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
68773: LD_ADDR_VAR 0 7
68777: PUSH
68778: LD_VAR 0 4
68782: PPUSH
68783: CALL_OW 250
68787: PPUSH
68788: LD_VAR 0 4
68792: PPUSH
68793: CALL_OW 251
68797: PPUSH
68798: LD_INT 6
68800: PPUSH
68801: CALL 68374 0 3
68805: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
68806: LD_VAR 0 4
68810: PPUSH
68811: CALL_OW 247
68815: PUSH
68816: LD_INT 2
68818: EQUAL
68819: PUSH
68820: LD_VAR 0 7
68824: AND
68825: PUSH
68826: LD_VAR 0 4
68830: PPUSH
68831: CALL_OW 264
68835: PUSH
68836: LD_VAR 0 10
68840: IN
68841: NOT
68842: AND
68843: IFFALSE 68882
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
68845: LD_VAR 0 4
68849: PPUSH
68850: LD_VAR 0 7
68854: PUSH
68855: LD_INT 1
68857: ARRAY
68858: PUSH
68859: LD_INT 1
68861: ARRAY
68862: PPUSH
68863: LD_VAR 0 7
68867: PUSH
68868: LD_INT 1
68870: ARRAY
68871: PUSH
68872: LD_INT 2
68874: ARRAY
68875: PPUSH
68876: CALL_OW 116
68880: GO 69171
// if path > tag then
68882: LD_VAR 0 2
68886: PUSH
68887: LD_VAR 0 9
68891: GREATER
68892: IFFALSE 69100
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
68894: LD_ADDR_VAR 0 6
68898: PUSH
68899: LD_VAR 0 5
68903: PPUSH
68904: LD_INT 91
68906: PUSH
68907: LD_VAR 0 4
68911: PUSH
68912: LD_INT 8
68914: PUSH
68915: EMPTY
68916: LIST
68917: LIST
68918: LIST
68919: PPUSH
68920: CALL_OW 72
68924: ST_TO_ADDR
// if nearEnemy then
68925: LD_VAR 0 6
68929: IFFALSE 68998
// begin if GetWeapon ( i ) = ru_time_lapser then
68931: LD_VAR 0 4
68935: PPUSH
68936: CALL_OW 264
68940: PUSH
68941: LD_INT 49
68943: EQUAL
68944: IFFALSE 68972
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
68946: LD_VAR 0 4
68950: PPUSH
68951: LD_VAR 0 6
68955: PPUSH
68956: LD_VAR 0 4
68960: PPUSH
68961: CALL_OW 74
68965: PPUSH
68966: CALL_OW 112
68970: GO 68996
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
68972: LD_VAR 0 4
68976: PPUSH
68977: LD_VAR 0 6
68981: PPUSH
68982: LD_VAR 0 4
68986: PPUSH
68987: CALL_OW 74
68991: PPUSH
68992: CALL 70100 0 2
// end else
68996: GO 69098
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
68998: LD_VAR 0 4
69002: PPUSH
69003: LD_VAR 0 2
69007: PUSH
69008: LD_VAR 0 9
69012: ARRAY
69013: PUSH
69014: LD_INT 1
69016: ARRAY
69017: PPUSH
69018: LD_VAR 0 2
69022: PUSH
69023: LD_VAR 0 9
69027: ARRAY
69028: PUSH
69029: LD_INT 2
69031: ARRAY
69032: PPUSH
69033: CALL_OW 297
69037: PUSH
69038: LD_INT 6
69040: GREATER
69041: IFFALSE 69084
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
69043: LD_VAR 0 4
69047: PPUSH
69048: LD_VAR 0 2
69052: PUSH
69053: LD_VAR 0 9
69057: ARRAY
69058: PUSH
69059: LD_INT 1
69061: ARRAY
69062: PPUSH
69063: LD_VAR 0 2
69067: PUSH
69068: LD_VAR 0 9
69072: ARRAY
69073: PUSH
69074: LD_INT 2
69076: ARRAY
69077: PPUSH
69078: CALL_OW 114
69082: GO 69098
// SetTag ( i , tag ) ;
69084: LD_VAR 0 4
69088: PPUSH
69089: LD_VAR 0 9
69093: PPUSH
69094: CALL_OW 109
// end else
69098: GO 69171
// if enemy then
69100: LD_VAR 0 5
69104: IFFALSE 69171
// begin if GetWeapon ( i ) = ru_time_lapser then
69106: LD_VAR 0 4
69110: PPUSH
69111: CALL_OW 264
69115: PUSH
69116: LD_INT 49
69118: EQUAL
69119: IFFALSE 69147
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
69121: LD_VAR 0 4
69125: PPUSH
69126: LD_VAR 0 5
69130: PPUSH
69131: LD_VAR 0 4
69135: PPUSH
69136: CALL_OW 74
69140: PPUSH
69141: CALL_OW 112
69145: GO 69171
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
69147: LD_VAR 0 4
69151: PPUSH
69152: LD_VAR 0 5
69156: PPUSH
69157: LD_VAR 0 4
69161: PPUSH
69162: CALL_OW 74
69166: PPUSH
69167: CALL 70100 0 2
// end ; end ;
69171: GO 68751
69173: POP
69174: POP
// end ;
69175: LD_VAR 0 3
69179: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
69180: LD_INT 0
69182: PPUSH
69183: PPUSH
69184: PPUSH
// if not unit or IsInUnit ( unit ) then
69185: LD_VAR 0 1
69189: NOT
69190: PUSH
69191: LD_VAR 0 1
69195: PPUSH
69196: CALL_OW 310
69200: OR
69201: IFFALSE 69205
// exit ;
69203: GO 69296
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
69205: LD_ADDR_VAR 0 4
69209: PUSH
69210: LD_VAR 0 1
69214: PPUSH
69215: CALL_OW 250
69219: PPUSH
69220: LD_VAR 0 2
69224: PPUSH
69225: LD_INT 1
69227: PPUSH
69228: CALL_OW 272
69232: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
69233: LD_ADDR_VAR 0 5
69237: PUSH
69238: LD_VAR 0 1
69242: PPUSH
69243: CALL_OW 251
69247: PPUSH
69248: LD_VAR 0 2
69252: PPUSH
69253: LD_INT 1
69255: PPUSH
69256: CALL_OW 273
69260: ST_TO_ADDR
// if ValidHex ( x , y ) then
69261: LD_VAR 0 4
69265: PPUSH
69266: LD_VAR 0 5
69270: PPUSH
69271: CALL_OW 488
69275: IFFALSE 69296
// ComTurnXY ( unit , x , y ) ;
69277: LD_VAR 0 1
69281: PPUSH
69282: LD_VAR 0 4
69286: PPUSH
69287: LD_VAR 0 5
69291: PPUSH
69292: CALL_OW 118
// end ;
69296: LD_VAR 0 3
69300: RET
// export function SeeUnits ( side , units ) ; var i ; begin
69301: LD_INT 0
69303: PPUSH
69304: PPUSH
// result := false ;
69305: LD_ADDR_VAR 0 3
69309: PUSH
69310: LD_INT 0
69312: ST_TO_ADDR
// if not units then
69313: LD_VAR 0 2
69317: NOT
69318: IFFALSE 69322
// exit ;
69320: GO 69367
// for i in units do
69322: LD_ADDR_VAR 0 4
69326: PUSH
69327: LD_VAR 0 2
69331: PUSH
69332: FOR_IN
69333: IFFALSE 69365
// if See ( side , i ) then
69335: LD_VAR 0 1
69339: PPUSH
69340: LD_VAR 0 4
69344: PPUSH
69345: CALL_OW 292
69349: IFFALSE 69363
// begin result := true ;
69351: LD_ADDR_VAR 0 3
69355: PUSH
69356: LD_INT 1
69358: ST_TO_ADDR
// exit ;
69359: POP
69360: POP
69361: GO 69367
// end ;
69363: GO 69332
69365: POP
69366: POP
// end ;
69367: LD_VAR 0 3
69371: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
69372: LD_INT 0
69374: PPUSH
69375: PPUSH
69376: PPUSH
69377: PPUSH
// if not unit or not points then
69378: LD_VAR 0 1
69382: NOT
69383: PUSH
69384: LD_VAR 0 2
69388: NOT
69389: OR
69390: IFFALSE 69394
// exit ;
69392: GO 69484
// dist := 99999 ;
69394: LD_ADDR_VAR 0 5
69398: PUSH
69399: LD_INT 99999
69401: ST_TO_ADDR
// for i in points do
69402: LD_ADDR_VAR 0 4
69406: PUSH
69407: LD_VAR 0 2
69411: PUSH
69412: FOR_IN
69413: IFFALSE 69482
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
69415: LD_ADDR_VAR 0 6
69419: PUSH
69420: LD_VAR 0 1
69424: PPUSH
69425: LD_VAR 0 4
69429: PUSH
69430: LD_INT 1
69432: ARRAY
69433: PPUSH
69434: LD_VAR 0 4
69438: PUSH
69439: LD_INT 2
69441: ARRAY
69442: PPUSH
69443: CALL_OW 297
69447: ST_TO_ADDR
// if tmpDist < dist then
69448: LD_VAR 0 6
69452: PUSH
69453: LD_VAR 0 5
69457: LESS
69458: IFFALSE 69480
// begin result := i ;
69460: LD_ADDR_VAR 0 3
69464: PUSH
69465: LD_VAR 0 4
69469: ST_TO_ADDR
// dist := tmpDist ;
69470: LD_ADDR_VAR 0 5
69474: PUSH
69475: LD_VAR 0 6
69479: ST_TO_ADDR
// end ; end ;
69480: GO 69412
69482: POP
69483: POP
// end ;
69484: LD_VAR 0 3
69488: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
69489: LD_INT 0
69491: PPUSH
// uc_side := side ;
69492: LD_ADDR_OWVAR 20
69496: PUSH
69497: LD_VAR 0 1
69501: ST_TO_ADDR
// uc_nation := 3 ;
69502: LD_ADDR_OWVAR 21
69506: PUSH
69507: LD_INT 3
69509: ST_TO_ADDR
// vc_chassis := 25 ;
69510: LD_ADDR_OWVAR 37
69514: PUSH
69515: LD_INT 25
69517: ST_TO_ADDR
// vc_engine := engine_siberite ;
69518: LD_ADDR_OWVAR 39
69522: PUSH
69523: LD_INT 3
69525: ST_TO_ADDR
// vc_control := control_computer ;
69526: LD_ADDR_OWVAR 38
69530: PUSH
69531: LD_INT 3
69533: ST_TO_ADDR
// vc_weapon := 59 ;
69534: LD_ADDR_OWVAR 40
69538: PUSH
69539: LD_INT 59
69541: ST_TO_ADDR
// result := CreateVehicle ;
69542: LD_ADDR_VAR 0 5
69546: PUSH
69547: CALL_OW 45
69551: ST_TO_ADDR
// SetDir ( result , d ) ;
69552: LD_VAR 0 5
69556: PPUSH
69557: LD_VAR 0 4
69561: PPUSH
69562: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
69566: LD_VAR 0 5
69570: PPUSH
69571: LD_VAR 0 2
69575: PPUSH
69576: LD_VAR 0 3
69580: PPUSH
69581: LD_INT 0
69583: PPUSH
69584: CALL_OW 48
// end ;
69588: LD_VAR 0 5
69592: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
69593: LD_INT 0
69595: PPUSH
69596: PPUSH
69597: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
69598: LD_ADDR_VAR 0 2
69602: PUSH
69603: LD_INT 0
69605: PUSH
69606: LD_INT 0
69608: PUSH
69609: LD_INT 0
69611: PUSH
69612: LD_INT 0
69614: PUSH
69615: EMPTY
69616: LIST
69617: LIST
69618: LIST
69619: LIST
69620: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
69621: LD_VAR 0 1
69625: NOT
69626: PUSH
69627: LD_VAR 0 1
69631: PPUSH
69632: CALL_OW 264
69636: PUSH
69637: LD_INT 12
69639: PUSH
69640: LD_INT 51
69642: PUSH
69643: LD_INT 32
69645: PUSH
69646: LD_INT 89
69648: PUSH
69649: EMPTY
69650: LIST
69651: LIST
69652: LIST
69653: LIST
69654: IN
69655: NOT
69656: OR
69657: IFFALSE 69661
// exit ;
69659: GO 69759
// for i := 1 to 3 do
69661: LD_ADDR_VAR 0 3
69665: PUSH
69666: DOUBLE
69667: LD_INT 1
69669: DEC
69670: ST_TO_ADDR
69671: LD_INT 3
69673: PUSH
69674: FOR_TO
69675: IFFALSE 69757
// begin tmp := GetCargo ( cargo , i ) ;
69677: LD_ADDR_VAR 0 4
69681: PUSH
69682: LD_VAR 0 1
69686: PPUSH
69687: LD_VAR 0 3
69691: PPUSH
69692: CALL_OW 289
69696: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
69697: LD_ADDR_VAR 0 2
69701: PUSH
69702: LD_VAR 0 2
69706: PPUSH
69707: LD_VAR 0 3
69711: PPUSH
69712: LD_VAR 0 4
69716: PPUSH
69717: CALL_OW 1
69721: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
69722: LD_ADDR_VAR 0 2
69726: PUSH
69727: LD_VAR 0 2
69731: PPUSH
69732: LD_INT 4
69734: PPUSH
69735: LD_VAR 0 2
69739: PUSH
69740: LD_INT 4
69742: ARRAY
69743: PUSH
69744: LD_VAR 0 4
69748: PLUS
69749: PPUSH
69750: CALL_OW 1
69754: ST_TO_ADDR
// end ;
69755: GO 69674
69757: POP
69758: POP
// end ;
69759: LD_VAR 0 2
69763: RET
// export function Length ( array ) ; begin
69764: LD_INT 0
69766: PPUSH
// result := array + 0 ;
69767: LD_ADDR_VAR 0 2
69771: PUSH
69772: LD_VAR 0 1
69776: PUSH
69777: LD_INT 0
69779: PLUS
69780: ST_TO_ADDR
// end ;
69781: LD_VAR 0 2
69785: RET
// export function PrepareArray ( array ) ; begin
69786: LD_INT 0
69788: PPUSH
// result := array diff 0 ;
69789: LD_ADDR_VAR 0 2
69793: PUSH
69794: LD_VAR 0 1
69798: PUSH
69799: LD_INT 0
69801: DIFF
69802: ST_TO_ADDR
// if not result [ 1 ] then
69803: LD_VAR 0 2
69807: PUSH
69808: LD_INT 1
69810: ARRAY
69811: NOT
69812: IFFALSE 69832
// result := Delete ( result , 1 ) ;
69814: LD_ADDR_VAR 0 2
69818: PUSH
69819: LD_VAR 0 2
69823: PPUSH
69824: LD_INT 1
69826: PPUSH
69827: CALL_OW 3
69831: ST_TO_ADDR
// end ;
69832: LD_VAR 0 2
69836: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
69837: LD_INT 0
69839: PPUSH
69840: PPUSH
69841: PPUSH
69842: PPUSH
// sibRocketRange := 25 ;
69843: LD_ADDR_VAR 0 6
69847: PUSH
69848: LD_INT 25
69850: ST_TO_ADDR
// result := false ;
69851: LD_ADDR_VAR 0 4
69855: PUSH
69856: LD_INT 0
69858: ST_TO_ADDR
// for i := 0 to 5 do
69859: LD_ADDR_VAR 0 5
69863: PUSH
69864: DOUBLE
69865: LD_INT 0
69867: DEC
69868: ST_TO_ADDR
69869: LD_INT 5
69871: PUSH
69872: FOR_TO
69873: IFFALSE 69940
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
69875: LD_VAR 0 1
69879: PPUSH
69880: LD_VAR 0 5
69884: PPUSH
69885: LD_VAR 0 6
69889: PPUSH
69890: CALL_OW 272
69894: PPUSH
69895: LD_VAR 0 2
69899: PPUSH
69900: LD_VAR 0 5
69904: PPUSH
69905: LD_VAR 0 6
69909: PPUSH
69910: CALL_OW 273
69914: PPUSH
69915: LD_VAR 0 3
69919: PPUSH
69920: CALL_OW 309
69924: IFFALSE 69938
// begin result := true ;
69926: LD_ADDR_VAR 0 4
69930: PUSH
69931: LD_INT 1
69933: ST_TO_ADDR
// exit ;
69934: POP
69935: POP
69936: GO 69942
// end ;
69938: GO 69872
69940: POP
69941: POP
// end ;
69942: LD_VAR 0 4
69946: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
69947: LD_INT 0
69949: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
69950: LD_VAR 0 1
69954: PPUSH
69955: LD_VAR 0 2
69959: PPUSH
69960: LD_INT 0
69962: PPUSH
69963: LD_INT 0
69965: PPUSH
69966: LD_INT 1
69968: PPUSH
69969: LD_INT 0
69971: PPUSH
69972: CALL_OW 587
// end ;
69976: LD_VAR 0 3
69980: RET
// export function CenterOnNow ( unit ) ; begin
69981: LD_INT 0
69983: PPUSH
// result := IsInUnit ( unit ) ;
69984: LD_ADDR_VAR 0 2
69988: PUSH
69989: LD_VAR 0 1
69993: PPUSH
69994: CALL_OW 310
69998: ST_TO_ADDR
// if not result then
69999: LD_VAR 0 2
70003: NOT
70004: IFFALSE 70016
// result := unit ;
70006: LD_ADDR_VAR 0 2
70010: PUSH
70011: LD_VAR 0 1
70015: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
70016: LD_VAR 0 1
70020: PPUSH
70021: CALL_OW 87
// end ;
70025: LD_VAR 0 2
70029: RET
// export function ComMoveHex ( unit , hex ) ; begin
70030: LD_INT 0
70032: PPUSH
// if not hex then
70033: LD_VAR 0 2
70037: NOT
70038: IFFALSE 70042
// exit ;
70040: GO 70095
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
70042: LD_VAR 0 2
70046: PUSH
70047: LD_INT 1
70049: ARRAY
70050: PPUSH
70051: LD_VAR 0 2
70055: PUSH
70056: LD_INT 2
70058: ARRAY
70059: PPUSH
70060: CALL_OW 428
70064: IFFALSE 70068
// exit ;
70066: GO 70095
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
70068: LD_VAR 0 1
70072: PPUSH
70073: LD_VAR 0 2
70077: PUSH
70078: LD_INT 1
70080: ARRAY
70081: PPUSH
70082: LD_VAR 0 2
70086: PUSH
70087: LD_INT 2
70089: ARRAY
70090: PPUSH
70091: CALL_OW 111
// end ;
70095: LD_VAR 0 3
70099: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
70100: LD_INT 0
70102: PPUSH
70103: PPUSH
70104: PPUSH
// if not unit or not enemy then
70105: LD_VAR 0 1
70109: NOT
70110: PUSH
70111: LD_VAR 0 2
70115: NOT
70116: OR
70117: IFFALSE 70121
// exit ;
70119: GO 70245
// x := GetX ( enemy ) ;
70121: LD_ADDR_VAR 0 4
70125: PUSH
70126: LD_VAR 0 2
70130: PPUSH
70131: CALL_OW 250
70135: ST_TO_ADDR
// y := GetY ( enemy ) ;
70136: LD_ADDR_VAR 0 5
70140: PUSH
70141: LD_VAR 0 2
70145: PPUSH
70146: CALL_OW 251
70150: ST_TO_ADDR
// if ValidHex ( x , y ) then
70151: LD_VAR 0 4
70155: PPUSH
70156: LD_VAR 0 5
70160: PPUSH
70161: CALL_OW 488
70165: IFFALSE 70245
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
70167: LD_VAR 0 2
70171: PPUSH
70172: CALL_OW 247
70176: PUSH
70177: LD_INT 3
70179: PUSH
70180: LD_INT 2
70182: PUSH
70183: EMPTY
70184: LIST
70185: LIST
70186: IN
70187: PUSH
70188: LD_VAR 0 1
70192: PPUSH
70193: CALL_OW 255
70197: PPUSH
70198: LD_VAR 0 2
70202: PPUSH
70203: CALL_OW 292
70207: AND
70208: IFFALSE 70226
// ComAttackUnit ( unit , enemy ) else
70210: LD_VAR 0 1
70214: PPUSH
70215: LD_VAR 0 2
70219: PPUSH
70220: CALL_OW 115
70224: GO 70245
// ComAgressiveMove ( unit , x , y ) ;
70226: LD_VAR 0 1
70230: PPUSH
70231: LD_VAR 0 4
70235: PPUSH
70236: LD_VAR 0 5
70240: PPUSH
70241: CALL_OW 114
// end ; end_of_file
70245: LD_VAR 0 3
70249: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
70250: LD_VAR 0 1
70254: PUSH
70255: LD_INT 200
70257: DOUBLE
70258: GREATEREQUAL
70259: IFFALSE 70267
70261: LD_INT 299
70263: DOUBLE
70264: LESSEQUAL
70265: IFTRUE 70269
70267: GO 70301
70269: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
70270: LD_VAR 0 1
70274: PPUSH
70275: LD_VAR 0 2
70279: PPUSH
70280: LD_VAR 0 3
70284: PPUSH
70285: LD_VAR 0 4
70289: PPUSH
70290: LD_VAR 0 5
70294: PPUSH
70295: CALL 24794 0 5
70299: GO 70378
70301: LD_INT 300
70303: DOUBLE
70304: GREATEREQUAL
70305: IFFALSE 70313
70307: LD_INT 399
70309: DOUBLE
70310: LESSEQUAL
70311: IFTRUE 70315
70313: GO 70377
70315: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
70316: LD_VAR 0 1
70320: PPUSH
70321: LD_VAR 0 2
70325: PPUSH
70326: LD_VAR 0 3
70330: PPUSH
70331: LD_VAR 0 4
70335: PPUSH
70336: LD_VAR 0 5
70340: PPUSH
70341: LD_VAR 0 6
70345: PPUSH
70346: LD_VAR 0 7
70350: PPUSH
70351: LD_VAR 0 8
70355: PPUSH
70356: LD_VAR 0 9
70360: PPUSH
70361: LD_VAR 0 10
70365: PPUSH
70366: LD_VAR 0 11
70370: PPUSH
70371: CALL 21119 0 11
70375: GO 70378
70377: POP
// end ;
70378: PPOPN 11
70380: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
70381: LD_VAR 0 1
70385: PPUSH
70386: LD_VAR 0 2
70390: PPUSH
70391: LD_VAR 0 3
70395: PPUSH
70396: LD_VAR 0 4
70400: PPUSH
70401: LD_VAR 0 5
70405: PPUSH
70406: CALL 24530 0 5
// end ; end_of_file
70410: PPOPN 5
70412: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
70413: LD_VAR 0 1
70417: PPUSH
70418: LD_VAR 0 2
70422: PPUSH
70423: LD_VAR 0 3
70427: PPUSH
70428: LD_VAR 0 4
70432: PPUSH
70433: LD_VAR 0 5
70437: PPUSH
70438: LD_VAR 0 6
70442: PPUSH
70443: CALL 8771 0 6
// end ;
70447: PPOPN 6
70449: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
70450: LD_INT 0
70452: PPUSH
// begin if not units then
70453: LD_VAR 0 1
70457: NOT
70458: IFFALSE 70462
// exit ;
70460: GO 70462
// end ;
70462: PPOPN 7
70464: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
70465: CALL 8675 0 0
// end ;
70469: PPOPN 1
70471: END
