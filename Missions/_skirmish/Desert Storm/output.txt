// starting begin PrepareMap ;
   0: CALL 13 0 0
// Main_Variables ;
   4: CALL 136 0 0
// Start_Mission ;
   8: CALL 3472 0 0
// end ;
  12: END
// function PrepareMap ; begin
  13: LD_INT 0
  15: PPUSH
// ResetFog ;
  16: CALL_OW 335
// RandomizeAll ;
  20: CALL_OW 11
// game_difficulty := GetMultiplayerSetting ( 0 ) ;
  24: LD_ADDR_EXP 2
  28: PUSH
  29: LD_INT 0
  31: PPUSH
  32: CALL_OW 426
  36: ST_TO_ADDR
// Difficulty := game_difficulty ;
  37: LD_ADDR_OWVAR 67
  41: PUSH
  42: LD_EXP 2
  46: ST_TO_ADDR
// ChangeSideFog ( 8 , 6 ) ;
  47: LD_INT 8
  49: PPUSH
  50: LD_INT 6
  52: PPUSH
  53: CALL_OW 343
// PlaceSeeing ( 1 , 1 , 8 , - 37963 ) ;
  57: LD_INT 1
  59: PPUSH
  60: LD_INT 1
  62: PPUSH
  63: LD_INT 8
  65: PPUSH
  66: LD_INT 37963
  68: NEG
  69: PPUSH
  70: CALL_OW 330
// RemoveSeeing ( 1 , 1 , 8 ) ;
  74: LD_INT 1
  76: PPUSH
  77: LD_INT 1
  79: PPUSH
  80: LD_INT 8
  82: PPUSH
  83: CALL_OW 331
// PlaceCamera ;
  87: CALL 3939 0 0
// CreateNature ( nature , 4 , 3 , 2 , 1 ) ;
  91: LD_INT 2
  93: PPUSH
  94: LD_INT 4
  96: PPUSH
  97: LD_INT 3
  99: PPUSH
 100: LD_INT 2
 102: PPUSH
 103: LD_INT 1
 105: PPUSH
 106: CALL 7889 0 5
// PrepareComm ;
 110: CALL 8372 0 0
// SetSide ( fort , 6 ) ;
 114: LD_INT 23
 116: PPUSH
 117: LD_INT 6
 119: PPUSH
 120: CALL_OW 235
// CenterNowOnUnits ( fort ) ;
 124: LD_INT 23
 126: PPUSH
 127: CALL_OW 87
// end ;
 131: LD_VAR 0 1
 135: RET
// export game_on , game_difficulty , game_time , game_option , game_end , game_strings ; export leopold , leopold_in_fort , samuel , samuel_in_fort , mortars_in_fort , scout ; export u_mine , u_fac ; export areas ; export skill ; export ar_weapons , ru_weapons , us_weapons ; export arabian_force , russian_force , american_force , arabian_timeing , russian_timeing , american_timeing ; export meeting_start , meeting_arive , meeting_break , meeting_end , meeting_time , russian_timer , fort_destroyed , hero_died , mission_time , cargo_ok , american_hchan , dezert , arabian_attack , russian_attack , american_attack , american_help , american_sib_bomb , russian_trade , heike_dialog1 , heike_dialog2 ; export am_comander , ru_comander , ar_comander ; function Main_Variables ; begin
 136: LD_INT 0
 138: PPUSH
// game_on := false ;
 139: LD_ADDR_EXP 1
 143: PUSH
 144: LD_INT 0
 146: ST_TO_ADDR
// game_time := 0 0$00 ;
 147: LD_ADDR_EXP 3
 151: PUSH
 152: LD_INT 0
 154: ST_TO_ADDR
// game_option := [ 1 ] ;
 155: LD_ADDR_EXP 4
 159: PUSH
 160: LD_INT 1
 162: PUSH
 163: EMPTY
 164: LIST
 165: ST_TO_ADDR
// game_end := false ;
 166: LD_ADDR_EXP 5
 170: PUSH
 171: LD_INT 0
 173: ST_TO_ADDR
// game_strings := [ ] ;
 174: LD_ADDR_EXP 6
 178: PUSH
 179: EMPTY
 180: ST_TO_ADDR
// game_time := 0 0$00 ;
 181: LD_ADDR_EXP 3
 185: PUSH
 186: LD_INT 0
 188: ST_TO_ADDR
// mission_time := 0 0$00 ;
 189: LD_ADDR_EXP 34
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// skill := [ 5 , 7 , 9 ] [ game_difficulty ] ;
 197: LD_ADDR_EXP 16
 201: PUSH
 202: LD_INT 5
 204: PUSH
 205: LD_INT 7
 207: PUSH
 208: LD_INT 9
 210: PUSH
 211: EMPTY
 212: LIST
 213: LIST
 214: LIST
 215: PUSH
 216: LD_EXP 2
 220: ARRAY
 221: ST_TO_ADDR
// areas := [ a_swest , a_nwest , a_neast , a_seast ] ;
 222: LD_ADDR_EXP 15
 226: PUSH
 227: LD_INT 5
 229: PUSH
 230: LD_INT 6
 232: PUSH
 233: LD_INT 7
 235: PUSH
 236: LD_INT 8
 238: PUSH
 239: EMPTY
 240: LIST
 241: LIST
 242: LIST
 243: LIST
 244: ST_TO_ADDR
// meeting_start := false ;
 245: LD_ADDR_EXP 26
 249: PUSH
 250: LD_INT 0
 252: ST_TO_ADDR
// meeting_arive := false ;
 253: LD_ADDR_EXP 27
 257: PUSH
 258: LD_INT 0
 260: ST_TO_ADDR
// meeting_break := false ;
 261: LD_ADDR_EXP 28
 265: PUSH
 266: LD_INT 0
 268: ST_TO_ADDR
// meeting_end := false ;
 269: LD_ADDR_EXP 29
 273: PUSH
 274: LD_INT 0
 276: ST_TO_ADDR
// meeting_time := [ 4 4$00 , 3 3$40 , 3 3$20 ] [ game_difficulty ] ;
 277: LD_ADDR_EXP 30
 281: PUSH
 282: LD_INT 8400
 284: PUSH
 285: LD_INT 7700
 287: PUSH
 288: LD_INT 7000
 290: PUSH
 291: EMPTY
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: LD_EXP 2
 300: ARRAY
 301: ST_TO_ADDR
// arabian_force := [ 4 , 5 , 6 ] [ game_difficulty ] ;
 302: LD_ADDR_EXP 20
 306: PUSH
 307: LD_INT 4
 309: PUSH
 310: LD_INT 5
 312: PUSH
 313: LD_INT 6
 315: PUSH
 316: EMPTY
 317: LIST
 318: LIST
 319: LIST
 320: PUSH
 321: LD_EXP 2
 325: ARRAY
 326: ST_TO_ADDR
// american_force := [ 5 , 6 , 7 ] [ game_difficulty ] ;
 327: LD_ADDR_EXP 22
 331: PUSH
 332: LD_INT 5
 334: PUSH
 335: LD_INT 6
 337: PUSH
 338: LD_INT 7
 340: PUSH
 341: EMPTY
 342: LIST
 343: LIST
 344: LIST
 345: PUSH
 346: LD_EXP 2
 350: ARRAY
 351: ST_TO_ADDR
// russian_force := [ 6 , 7 , 8 ] [ game_difficulty ] ;
 352: LD_ADDR_EXP 21
 356: PUSH
 357: LD_INT 6
 359: PUSH
 360: LD_INT 7
 362: PUSH
 363: LD_INT 8
 365: PUSH
 366: EMPTY
 367: LIST
 368: LIST
 369: LIST
 370: PUSH
 371: LD_EXP 2
 375: ARRAY
 376: ST_TO_ADDR
// u_mine := false ;
 377: LD_ADDR_EXP 13
 381: PUSH
 382: LD_INT 0
 384: ST_TO_ADDR
// u_fac := false ;
 385: LD_ADDR_EXP 14
 389: PUSH
 390: LD_INT 0
 392: ST_TO_ADDR
// leopold_in_fort := false ;
 393: LD_ADDR_EXP 8
 397: PUSH
 398: LD_INT 0
 400: ST_TO_ADDR
// samuel_in_fort := false ;
 401: LD_ADDR_EXP 10
 405: PUSH
 406: LD_INT 0
 408: ST_TO_ADDR
// mortars_in_fort := false ;
 409: LD_ADDR_EXP 11
 413: PUSH
 414: LD_INT 0
 416: ST_TO_ADDR
// fort_destroyed := false ;
 417: LD_ADDR_EXP 32
 421: PUSH
 422: LD_INT 0
 424: ST_TO_ADDR
// hero_died := false ;
 425: LD_ADDR_EXP 33
 429: PUSH
 430: LD_INT 0
 432: ST_TO_ADDR
// dezert := false ;
 433: LD_ADDR_EXP 37
 437: PUSH
 438: LD_INT 0
 440: ST_TO_ADDR
// arabian_attack := false ;
 441: LD_ADDR_EXP 38
 445: PUSH
 446: LD_INT 0
 448: ST_TO_ADDR
// russian_attack := false ;
 449: LD_ADDR_EXP 39
 453: PUSH
 454: LD_INT 0
 456: ST_TO_ADDR
// american_attack := false ;
 457: LD_ADDR_EXP 40
 461: PUSH
 462: LD_INT 0
 464: ST_TO_ADDR
// american_help := false ;
 465: LD_ADDR_EXP 41
 469: PUSH
 470: LD_INT 0
 472: ST_TO_ADDR
// american_hchan := [ 91 , 81 , 71 ] [ game_difficulty ] ;
 473: LD_ADDR_EXP 36
 477: PUSH
 478: LD_INT 91
 480: PUSH
 481: LD_INT 81
 483: PUSH
 484: LD_INT 71
 486: PUSH
 487: EMPTY
 488: LIST
 489: LIST
 490: LIST
 491: PUSH
 492: LD_EXP 2
 496: ARRAY
 497: ST_TO_ADDR
// american_sib_bomb := false ;
 498: LD_ADDR_EXP 42
 502: PUSH
 503: LD_INT 0
 505: ST_TO_ADDR
// russian_trade := false ;
 506: LD_ADDR_EXP 43
 510: PUSH
 511: LD_INT 0
 513: ST_TO_ADDR
// russian_timer := 5 5$00 ;
 514: LD_ADDR_EXP 31
 518: PUSH
 519: LD_INT 10500
 521: ST_TO_ADDR
// cargo_ok := false ;
 522: LD_ADDR_EXP 35
 526: PUSH
 527: LD_INT 0
 529: ST_TO_ADDR
// heike_dialog1 := false ;
 530: LD_ADDR_EXP 44
 534: PUSH
 535: LD_INT 0
 537: ST_TO_ADDR
// heike_dialog2 := false ;
 538: LD_ADDR_EXP 45
 542: PUSH
 543: LD_INT 0
 545: ST_TO_ADDR
// american_timeing := [ 10 10$00 , 9 9$50 , 9 9$30 ] [ game_difficulty ] ;
 546: LD_ADDR_EXP 25
 550: PUSH
 551: LD_INT 21000
 553: PUSH
 554: LD_INT 20650
 556: PUSH
 557: LD_INT 19950
 559: PUSH
 560: EMPTY
 561: LIST
 562: LIST
 563: LIST
 564: PUSH
 565: LD_EXP 2
 569: ARRAY
 570: ST_TO_ADDR
// arabian_timeing := [ 8 8$00 , 7 7$30 , 6 6$40 ] [ game_difficulty ] ;
 571: LD_ADDR_EXP 23
 575: PUSH
 576: LD_INT 16800
 578: PUSH
 579: LD_INT 15750
 581: PUSH
 582: LD_INT 14000
 584: PUSH
 585: EMPTY
 586: LIST
 587: LIST
 588: LIST
 589: PUSH
 590: LD_EXP 2
 594: ARRAY
 595: ST_TO_ADDR
// russian_timeing := [ 11 11$00 , 10 10$30 , 9 9$20 ] [ game_difficulty ] ;
 596: LD_ADDR_EXP 24
 600: PUSH
 601: LD_INT 23100
 603: PUSH
 604: LD_INT 22050
 606: PUSH
 607: LD_INT 19600
 609: PUSH
 610: EMPTY
 611: LIST
 612: LIST
 613: LIST
 614: PUSH
 615: LD_EXP 2
 619: ARRAY
 620: ST_TO_ADDR
// ar_weapons := [ ar_rocket_launcher , ar_gun , ar_flame_thrower , ar_selfpropelled_bomb , ar_bio_bomb ] ;
 621: LD_ADDR_EXP 17
 625: PUSH
 626: LD_INT 28
 628: PUSH
 629: LD_INT 27
 631: PUSH
 632: LD_INT 26
 634: PUSH
 635: LD_INT 29
 637: PUSH
 638: LD_INT 91
 640: PUSH
 641: EMPTY
 642: LIST
 643: LIST
 644: LIST
 645: LIST
 646: LIST
 647: ST_TO_ADDR
// us_weapons := [ us_rocket_launcher , us_heavy_gun , us_double_laser , us_laser ] ;
 648: LD_ADDR_EXP 19
 652: PUSH
 653: LD_INT 7
 655: PUSH
 656: LD_INT 6
 658: PUSH
 659: LD_INT 10
 661: PUSH
 662: LD_INT 9
 664: PUSH
 665: EMPTY
 666: LIST
 667: LIST
 668: LIST
 669: LIST
 670: ST_TO_ADDR
// ru_weapons := [ ru_rocket_launcher , ru_rocket , ru_heavy_gun , ru_heavy_gun ] ;
 671: LD_ADDR_EXP 18
 675: PUSH
 676: LD_INT 45
 678: PUSH
 679: LD_INT 47
 681: PUSH
 682: LD_INT 46
 684: PUSH
 685: LD_INT 46
 687: PUSH
 688: EMPTY
 689: LIST
 690: LIST
 691: LIST
 692: LIST
 693: ST_TO_ADDR
// end ;
 694: LD_VAR 0 1
 698: RET
// every 0 0$01 trigger game_on do var i , p , x , filter ;
 699: LD_EXP 1
 703: IFFALSE 3469
 705: GO 707
 707: DISABLE
 708: LD_INT 0
 710: PPUSH
 711: PPUSH
 712: PPUSH
 713: PPUSH
// begin enable ;
 714: ENABLE
// Display_Strings := [ #tick , game_time ] ^ game_strings ;
 715: LD_ADDR_OWVAR 47
 719: PUSH
 720: LD_STRING #tick
 722: PUSH
 723: LD_EXP 3
 727: PUSH
 728: EMPTY
 729: LIST
 730: LIST
 731: PUSH
 732: LD_EXP 6
 736: ADD
 737: ST_TO_ADDR
// game_time := RefreshTime ( game_time , true ) ;
 738: LD_ADDR_EXP 3
 742: PUSH
 743: LD_EXP 3
 747: PPUSH
 748: LD_INT 1
 750: PPUSH
 751: CALL 6975 0 2
 755: ST_TO_ADDR
// if meeting_start and meeting_time > 0 0$00 then
 756: LD_EXP 26
 760: PUSH
 761: LD_EXP 30
 765: PUSH
 766: LD_INT 0
 768: GREATER
 769: AND
 770: IFFALSE 807
// begin game_strings := [ #mtime , meeting_time ] ;
 772: LD_ADDR_EXP 6
 776: PUSH
 777: LD_STRING #mtime
 779: PUSH
 780: LD_EXP 30
 784: PUSH
 785: EMPTY
 786: LIST
 787: LIST
 788: ST_TO_ADDR
// meeting_time := RefreshTime ( meeting_time , false ) ;
 789: LD_ADDR_EXP 30
 793: PUSH
 794: LD_EXP 30
 798: PPUSH
 799: LD_INT 0
 801: PPUSH
 802: CALL 6975 0 2
 806: ST_TO_ADDR
// end ; if meeting_arive then
 807: LD_EXP 27
 811: IFFALSE 831
// mission_time := RefreshTime ( mission_time , true ) ;
 813: LD_ADDR_EXP 34
 817: PUSH
 818: LD_EXP 34
 822: PPUSH
 823: LD_INT 1
 825: PPUSH
 826: CALL 6975 0 2
 830: ST_TO_ADDR
// if arabian_attack and arabian_timeing > 0 0$00 and meeting_arive then
 831: LD_EXP 38
 835: PUSH
 836: LD_EXP 23
 840: PUSH
 841: LD_INT 0
 843: GREATER
 844: AND
 845: PUSH
 846: LD_EXP 27
 850: AND
 851: IFFALSE 871
// begin arabian_timeing := RefreshTime ( arabian_timeing , false ) ;
 853: LD_ADDR_EXP 23
 857: PUSH
 858: LD_EXP 23
 862: PPUSH
 863: LD_INT 0
 865: PPUSH
 866: CALL 6975 0 2
 870: ST_TO_ADDR
// end ; if russian_attack and russian_timeing > 0 0$00 and meeting_arive then
 871: LD_EXP 39
 875: PUSH
 876: LD_EXP 24
 880: PUSH
 881: LD_INT 0
 883: GREATER
 884: AND
 885: PUSH
 886: LD_EXP 27
 890: AND
 891: IFFALSE 911
// begin russian_timeing := RefreshTime ( russian_timeing , false ) ;
 893: LD_ADDR_EXP 24
 897: PUSH
 898: LD_EXP 24
 902: PPUSH
 903: LD_INT 0
 905: PPUSH
 906: CALL 6975 0 2
 910: ST_TO_ADDR
// end ; if american_attack and american_timeing > 0 0$00 and meeting_arive then
 911: LD_EXP 40
 915: PUSH
 916: LD_EXP 25
 920: PUSH
 921: LD_INT 0
 923: GREATER
 924: AND
 925: PUSH
 926: LD_EXP 27
 930: AND
 931: IFFALSE 951
// begin american_timeing := RefreshTime ( american_timeing , false ) ;
 933: LD_ADDR_EXP 25
 937: PUSH
 938: LD_EXP 25
 942: PPUSH
 943: LD_INT 0
 945: PPUSH
 946: CALL 6975 0 2
 950: ST_TO_ADDR
// end ; if russian_trade and russian_timer > 0 0$00 then
 951: LD_EXP 43
 955: PUSH
 956: LD_EXP 31
 960: PUSH
 961: LD_INT 0
 963: GREATER
 964: AND
 965: IFFALSE 1002
// begin game_strings := [ #rtime , russian_timer ] ;
 967: LD_ADDR_EXP 6
 971: PUSH
 972: LD_STRING #rtime
 974: PUSH
 975: LD_EXP 31
 979: PUSH
 980: EMPTY
 981: LIST
 982: LIST
 983: ST_TO_ADDR
// russian_timer := RefreshTime ( russian_timer , false ) ;
 984: LD_ADDR_EXP 31
 988: PUSH
 989: LD_EXP 31
 993: PPUSH
 994: LD_INT 0
 996: PPUSH
 997: CALL 6975 0 2
1001: ST_TO_ADDR
// end ; if russian_trade and russian_timer = 0 0$00 or cargo_ok then
1002: LD_EXP 43
1006: PUSH
1007: LD_EXP 31
1011: PUSH
1012: LD_INT 0
1014: EQUAL
1015: AND
1016: PUSH
1017: LD_EXP 35
1021: OR
1022: IFFALSE 1031
// game_strings := [ ] ;
1024: LD_ADDR_EXP 6
1028: PUSH
1029: EMPTY
1030: ST_TO_ADDR
// if dezert = false and tick mod 33600 = 0 then
1031: LD_EXP 37
1035: PUSH
1036: LD_INT 0
1038: EQUAL
1039: PUSH
1040: LD_OWVAR 1
1044: PUSH
1045: LD_INT 33600
1047: MOD
1048: PUSH
1049: LD_INT 0
1051: EQUAL
1052: AND
1053: IFFALSE 1113
// begin p := Rand ( 1 , 5 ) ;
1055: LD_ADDR_VAR 0 2
1059: PUSH
1060: LD_INT 1
1062: PPUSH
1063: LD_INT 5
1065: PPUSH
1066: CALL_OW 12
1070: ST_TO_ADDR
// if p <= [ 4 , 3 , 3 ] [ game_difficulty ] then
1071: LD_VAR 0 2
1075: PUSH
1076: LD_INT 4
1078: PUSH
1079: LD_INT 3
1081: PUSH
1082: LD_INT 3
1084: PUSH
1085: EMPTY
1086: LIST
1087: LIST
1088: LIST
1089: PUSH
1090: LD_EXP 2
1094: ARRAY
1095: LESSEQUAL
1096: IFFALSE 1113
// begin RaiseSailEvent ( 92 ) ;
1098: LD_INT 92
1100: PPUSH
1101: CALL_OW 427
// dezert := true ;
1105: LD_ADDR_EXP 37
1109: PUSH
1110: LD_INT 1
1112: ST_TO_ADDR
// end ; end ; if tick mod 8400 = 0 then
1113: LD_OWVAR 1
1117: PUSH
1118: LD_INT 8400
1120: MOD
1121: PUSH
1122: LD_INT 0
1124: EQUAL
1125: IFFALSE 1134
// RaiseSailEvent ( 101 ) ;
1127: LD_INT 101
1129: PPUSH
1130: CALL_OW 427
// if MineExist ( 8 ) and u_mine = false then
1134: LD_INT 8
1136: PPUSH
1137: CALL 7029 0 1
1141: PUSH
1142: LD_EXP 13
1146: PUSH
1147: LD_INT 0
1149: EQUAL
1150: AND
1151: IFFALSE 1168
// begin u_mine := true ;
1153: LD_ADDR_EXP 13
1157: PUSH
1158: LD_INT 1
1160: ST_TO_ADDR
// ChangeMissionObjectives ( DS-T1m ) ;
1161: LD_STRING DS-T1m
1163: PPUSH
1164: CALL_OW 337
// end ; if FacExist ( 8 ) and u_fac = false then
1168: LD_INT 8
1170: PPUSH
1171: CALL 7091 0 1
1175: PUSH
1176: LD_EXP 14
1180: PUSH
1181: LD_INT 0
1183: EQUAL
1184: AND
1185: IFFALSE 1202
// begin u_fac := true ;
1187: LD_ADDR_EXP 14
1191: PUSH
1192: LD_INT 1
1194: ST_TO_ADDR
// ChangeMissionObjectives ( DS-T1f ) ;
1195: LD_STRING DS-T1f
1197: PPUSH
1198: CALL_OW 337
// end ; if hero_died then
1202: LD_EXP 33
1206: IFFALSE 1215
// YouLost ( DS-h1 ) ;
1208: LD_STRING DS-h1
1210: PPUSH
1211: CALL_OW 104
// if fort_destroyed then
1215: LD_EXP 32
1219: IFFALSE 1228
// YouLost ( DS-h2 ) ;
1221: LD_STRING DS-h2
1223: PPUSH
1224: CALL_OW 104
// if GetDistUnits ( leopold , l_cmndr ) > 6 and meeting_start = false then
1228: LD_EXP 7
1232: PPUSH
1233: LD_EXP 49
1237: PPUSH
1238: CALL_OW 296
1242: PUSH
1243: LD_INT 6
1245: GREATER
1246: PUSH
1247: LD_EXP 26
1251: PUSH
1252: LD_INT 0
1254: EQUAL
1255: AND
1256: IFFALSE 1279
// begin if not HasTask ( leopold ) then
1258: LD_EXP 7
1262: PPUSH
1263: CALL_OW 314
1267: NOT
1268: IFFALSE 1277
// RaiseSailEvent ( 1 ) ;
1270: LD_INT 1
1272: PPUSH
1273: CALL_OW 427
// end else
1277: GO 1296
// if meeting_start = false then
1279: LD_EXP 26
1283: PUSH
1284: LD_INT 0
1286: EQUAL
1287: IFFALSE 1296
// begin RaiseSailEvent ( 2 ) ;
1289: LD_INT 2
1291: PPUSH
1292: CALL_OW 427
// end ; if game_time >= [ 50 50$00 , 62 62$30 , 72 72$00 ] [ game_difficulty ] and meeting_end = false then
1296: LD_EXP 3
1300: PUSH
1301: LD_INT 105000
1303: PUSH
1304: LD_INT 131250
1306: PUSH
1307: LD_INT 151200
1309: PUSH
1310: EMPTY
1311: LIST
1312: LIST
1313: LIST
1314: PUSH
1315: LD_EXP 2
1319: ARRAY
1320: GREATEREQUAL
1321: PUSH
1322: LD_EXP 29
1326: PUSH
1327: LD_INT 0
1329: EQUAL
1330: AND
1331: IFFALSE 1348
// begin meeting_end := true ;
1333: LD_ADDR_EXP 29
1337: PUSH
1338: LD_INT 1
1340: ST_TO_ADDR
// RaiseSailEvent ( 200 ) ;
1341: LD_INT 200
1343: PPUSH
1344: CALL_OW 427
// end ; if meeting_time = 0 0$00 and meeting_arive = false then
1348: LD_EXP 30
1352: PUSH
1353: LD_INT 0
1355: EQUAL
1356: PUSH
1357: LD_EXP 27
1361: PUSH
1362: LD_INT 0
1364: EQUAL
1365: AND
1366: IFFALSE 1390
// begin meeting_arive := true ;
1368: LD_ADDR_EXP 27
1372: PUSH
1373: LD_INT 1
1375: ST_TO_ADDR
// game_strings := [ ] ;
1376: LD_ADDR_EXP 6
1380: PUSH
1381: EMPTY
1382: ST_TO_ADDR
// RaiseSailEvent ( 10 ) ;
1383: LD_INT 10
1385: PPUSH
1386: CALL_OW 427
// end ; if meeting_arive then
1390: LD_EXP 27
1394: IFFALSE 2193
// begin if arabian_attack = false and tick mod 4200 = 0 then
1396: LD_EXP 38
1400: PUSH
1401: LD_INT 0
1403: EQUAL
1404: PUSH
1405: LD_OWVAR 1
1409: PUSH
1410: LD_INT 4200
1412: MOD
1413: PUSH
1414: LD_INT 0
1416: EQUAL
1417: AND
1418: IFFALSE 1471
// begin p := Rand ( 1 , 100 ) ;
1420: LD_ADDR_VAR 0 2
1424: PUSH
1425: LD_INT 1
1427: PPUSH
1428: LD_INT 100
1430: PPUSH
1431: CALL_OW 12
1435: ST_TO_ADDR
// if p <= [ 85 , 90 , 95 ] [ game_difficulty ] then
1436: LD_VAR 0 2
1440: PUSH
1441: LD_INT 85
1443: PUSH
1444: LD_INT 90
1446: PUSH
1447: LD_INT 95
1449: PUSH
1450: EMPTY
1451: LIST
1452: LIST
1453: LIST
1454: PUSH
1455: LD_EXP 2
1459: ARRAY
1460: LESSEQUAL
1461: IFFALSE 1471
// arabian_attack := true ;
1463: LD_ADDR_EXP 38
1467: PUSH
1468: LD_INT 1
1470: ST_TO_ADDR
// end ; if russian_trade = false and russian_attack = false and tick > 52500 then
1471: LD_EXP 43
1475: PUSH
1476: LD_INT 0
1478: EQUAL
1479: PUSH
1480: LD_EXP 39
1484: PUSH
1485: LD_INT 0
1487: EQUAL
1488: AND
1489: PUSH
1490: LD_OWVAR 1
1494: PUSH
1495: LD_INT 52500
1497: GREATER
1498: AND
1499: IFFALSE 1570
// begin russian_trade = true ;
1501: LD_ADDR_EXP 43
1505: PUSH
1506: LD_INT 1
1508: ST_TO_ADDR
// DialogueOn ;
1509: CALL_OW 6
// SayRadio ( ru_comander , DS-DR-RTr ) ;
1513: LD_EXP 47
1517: PPUSH
1518: LD_STRING DS-DR-RTr
1520: PPUSH
1521: CALL_OW 94
// Say ( l_cmndr , DS-DC-RTr ) ;
1525: LD_EXP 49
1529: PPUSH
1530: LD_STRING DS-DC-RTr
1532: PPUSH
1533: CALL_OW 88
// SayRadio ( ru_comander , DS-DR-RTr2 ) ;
1537: LD_EXP 47
1541: PPUSH
1542: LD_STRING DS-DR-RTr2
1544: PPUSH
1545: CALL_OW 94
// DialogueOff ;
1549: CALL_OW 7
// ChangeMissionObjectives ( DS-T2 ) ;
1553: LD_STRING DS-T2
1555: PPUSH
1556: CALL_OW 337
// SetAreaMapShow ( tree , 1 ) ;
1560: LD_INT 10
1562: PPUSH
1563: LD_INT 1
1565: PPUSH
1566: CALL_OW 424
// end ; if russian_trade and cargo_ok = false and russian_timer > 0 0$00 then
1570: LD_EXP 43
1574: PUSH
1575: LD_EXP 35
1579: PUSH
1580: LD_INT 0
1582: EQUAL
1583: AND
1584: PUSH
1585: LD_EXP 31
1589: PUSH
1590: LD_INT 0
1592: GREATER
1593: AND
1594: IFFALSE 1843
// begin if FilterUnitsInArea ( tree , ( [ [ f_empty ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] , [ f_not , [ f_control , control_remote ] ] ] ) ) > 0 then
1596: LD_INT 10
1598: PPUSH
1599: LD_INT 58
1601: PUSH
1602: EMPTY
1603: LIST
1604: PUSH
1605: LD_INT 2
1607: PUSH
1608: LD_INT 34
1610: PUSH
1611: LD_INT 32
1613: PUSH
1614: EMPTY
1615: LIST
1616: LIST
1617: PUSH
1618: LD_INT 34
1620: PUSH
1621: LD_INT 12
1623: PUSH
1624: EMPTY
1625: LIST
1626: LIST
1627: PUSH
1628: EMPTY
1629: LIST
1630: LIST
1631: LIST
1632: PUSH
1633: LD_INT 3
1635: PUSH
1636: LD_INT 33
1638: PUSH
1639: LD_INT 2
1641: PUSH
1642: EMPTY
1643: LIST
1644: LIST
1645: PUSH
1646: EMPTY
1647: LIST
1648: LIST
1649: PUSH
1650: EMPTY
1651: LIST
1652: LIST
1653: LIST
1654: PPUSH
1655: CALL_OW 70
1659: PUSH
1660: LD_INT 0
1662: GREATER
1663: IFFALSE 1843
// if GetCargo ( FilterUnitsInArea ( tree , ( [ [ f_empty ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] , [ f_not , [ f_control , control_remote ] ] ] ) ) [ 1 ] , mat_siberit ) = 100 then
1665: LD_INT 10
1667: PPUSH
1668: LD_INT 58
1670: PUSH
1671: EMPTY
1672: LIST
1673: PUSH
1674: LD_INT 2
1676: PUSH
1677: LD_INT 34
1679: PUSH
1680: LD_INT 32
1682: PUSH
1683: EMPTY
1684: LIST
1685: LIST
1686: PUSH
1687: LD_INT 34
1689: PUSH
1690: LD_INT 12
1692: PUSH
1693: EMPTY
1694: LIST
1695: LIST
1696: PUSH
1697: EMPTY
1698: LIST
1699: LIST
1700: LIST
1701: PUSH
1702: LD_INT 3
1704: PUSH
1705: LD_INT 33
1707: PUSH
1708: LD_INT 2
1710: PUSH
1711: EMPTY
1712: LIST
1713: LIST
1714: PUSH
1715: EMPTY
1716: LIST
1717: LIST
1718: PUSH
1719: EMPTY
1720: LIST
1721: LIST
1722: LIST
1723: PPUSH
1724: CALL_OW 70
1728: PUSH
1729: LD_INT 1
1731: ARRAY
1732: PPUSH
1733: LD_INT 3
1735: PPUSH
1736: CALL_OW 289
1740: PUSH
1741: LD_INT 100
1743: EQUAL
1744: IFFALSE 1843
// begin cargo_ok := true ;
1746: LD_ADDR_EXP 35
1750: PUSH
1751: LD_INT 1
1753: ST_TO_ADDR
// RemoveUnit ( FilterUnitsInArea ( tree , ( [ [ f_empty ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] , [ f_not , [ f_control , control_remote ] ] ] ) ) [ 1 ] ) ;
1754: LD_INT 10
1756: PPUSH
1757: LD_INT 58
1759: PUSH
1760: EMPTY
1761: LIST
1762: PUSH
1763: LD_INT 2
1765: PUSH
1766: LD_INT 34
1768: PUSH
1769: LD_INT 32
1771: PUSH
1772: EMPTY
1773: LIST
1774: LIST
1775: PUSH
1776: LD_INT 34
1778: PUSH
1779: LD_INT 12
1781: PUSH
1782: EMPTY
1783: LIST
1784: LIST
1785: PUSH
1786: EMPTY
1787: LIST
1788: LIST
1789: LIST
1790: PUSH
1791: LD_INT 3
1793: PUSH
1794: LD_INT 33
1796: PUSH
1797: LD_INT 2
1799: PUSH
1800: EMPTY
1801: LIST
1802: LIST
1803: PUSH
1804: EMPTY
1805: LIST
1806: LIST
1807: PUSH
1808: EMPTY
1809: LIST
1810: LIST
1811: LIST
1812: PPUSH
1813: CALL_OW 70
1817: PUSH
1818: LD_INT 1
1820: ARRAY
1821: PPUSH
1822: CALL_OW 64
// ChangeMissionObjectives ( DS-T2-out ) ;
1826: LD_STRING DS-T2-out
1828: PPUSH
1829: CALL_OW 337
// SetAreaMapShow ( tree , 0 ) ;
1833: LD_INT 10
1835: PPUSH
1836: LD_INT 0
1838: PPUSH
1839: CALL_OW 424
// end ; end ; if russian_attack = false and russian_trade and cargo_ok = false and russian_timer = 0 0$00 then
1843: LD_EXP 39
1847: PUSH
1848: LD_INT 0
1850: EQUAL
1851: PUSH
1852: LD_EXP 43
1856: AND
1857: PUSH
1858: LD_EXP 35
1862: PUSH
1863: LD_INT 0
1865: EQUAL
1866: AND
1867: PUSH
1868: LD_EXP 31
1872: PUSH
1873: LD_INT 0
1875: EQUAL
1876: AND
1877: IFFALSE 1904
// begin russian_attack := true ;
1879: LD_ADDR_EXP 39
1883: PUSH
1884: LD_INT 1
1886: ST_TO_ADDR
// ChangeMissionObjectives ( DS-T2-out ) ;
1887: LD_STRING DS-T2-out
1889: PPUSH
1890: CALL_OW 337
// SetAreaMapShow ( tree , 0 ) ;
1894: LD_INT 10
1896: PPUSH
1897: LD_INT 0
1899: PPUSH
1900: CALL_OW 424
// end ; if russian_trade = false and russian_attack = false and american_attack = false and tick mod 21000 = 0 then
1904: LD_EXP 43
1908: PUSH
1909: LD_INT 0
1911: EQUAL
1912: PUSH
1913: LD_EXP 39
1917: PUSH
1918: LD_INT 0
1920: EQUAL
1921: AND
1922: PUSH
1923: LD_EXP 40
1927: PUSH
1928: LD_INT 0
1930: EQUAL
1931: AND
1932: PUSH
1933: LD_OWVAR 1
1937: PUSH
1938: LD_INT 21000
1940: MOD
1941: PUSH
1942: LD_INT 0
1944: EQUAL
1945: AND
1946: IFFALSE 1999
// begin p := Rand ( 1 , 100 ) ;
1948: LD_ADDR_VAR 0 2
1952: PUSH
1953: LD_INT 1
1955: PPUSH
1956: LD_INT 100
1958: PPUSH
1959: CALL_OW 12
1963: ST_TO_ADDR
// if p <= [ 35 , 45 , 55 ] [ game_difficulty ] then
1964: LD_VAR 0 2
1968: PUSH
1969: LD_INT 35
1971: PUSH
1972: LD_INT 45
1974: PUSH
1975: LD_INT 55
1977: PUSH
1978: EMPTY
1979: LIST
1980: LIST
1981: LIST
1982: PUSH
1983: LD_EXP 2
1987: ARRAY
1988: LESSEQUAL
1989: IFFALSE 1999
// russian_attack := true ;
1991: LD_ADDR_EXP 39
1995: PUSH
1996: LD_INT 1
1998: ST_TO_ADDR
// end ; if american_help = false and american_attack = false and russian_attack = false and tick mod 31500 = 0 then
1999: LD_EXP 41
2003: PUSH
2004: LD_INT 0
2006: EQUAL
2007: PUSH
2008: LD_EXP 40
2012: PUSH
2013: LD_INT 0
2015: EQUAL
2016: AND
2017: PUSH
2018: LD_EXP 39
2022: PUSH
2023: LD_INT 0
2025: EQUAL
2026: AND
2027: PUSH
2028: LD_OWVAR 1
2032: PUSH
2033: LD_INT 31500
2035: MOD
2036: PUSH
2037: LD_INT 0
2039: EQUAL
2040: AND
2041: IFFALSE 2094
// begin p := Rand ( 1 , 100 ) ;
2043: LD_ADDR_VAR 0 2
2047: PUSH
2048: LD_INT 1
2050: PPUSH
2051: LD_INT 100
2053: PPUSH
2054: CALL_OW 12
2058: ST_TO_ADDR
// if p <= [ 33 , 44 , 55 ] [ game_difficulty ] then
2059: LD_VAR 0 2
2063: PUSH
2064: LD_INT 33
2066: PUSH
2067: LD_INT 44
2069: PUSH
2070: LD_INT 55
2072: PUSH
2073: EMPTY
2074: LIST
2075: LIST
2076: LIST
2077: PUSH
2078: LD_EXP 2
2082: ARRAY
2083: LESSEQUAL
2084: IFFALSE 2094
// american_attack := true ;
2086: LD_ADDR_EXP 40
2090: PUSH
2091: LD_INT 1
2093: ST_TO_ADDR
// end ; if american_attack = false and russian_attack = false and american_help = false and tick mod 21200 = 0 then
2094: LD_EXP 40
2098: PUSH
2099: LD_INT 0
2101: EQUAL
2102: PUSH
2103: LD_EXP 39
2107: PUSH
2108: LD_INT 0
2110: EQUAL
2111: AND
2112: PUSH
2113: LD_EXP 41
2117: PUSH
2118: LD_INT 0
2120: EQUAL
2121: AND
2122: PUSH
2123: LD_OWVAR 1
2127: PUSH
2128: LD_INT 21200
2130: MOD
2131: PUSH
2132: LD_INT 0
2134: EQUAL
2135: AND
2136: IFFALSE 2193
// begin p := Rand ( 1 , 100 ) ;
2138: LD_ADDR_VAR 0 2
2142: PUSH
2143: LD_INT 1
2145: PPUSH
2146: LD_INT 100
2148: PPUSH
2149: CALL_OW 12
2153: ST_TO_ADDR
// if p <= american_hchan then
2154: LD_VAR 0 2
2158: PUSH
2159: LD_EXP 36
2163: LESSEQUAL
2164: IFFALSE 2193
// begin american_help := true ;
2166: LD_ADDR_EXP 41
2170: PUSH
2171: LD_INT 1
2173: ST_TO_ADDR
// SayRadio ( am_comander , DS-amhelp ) ;
2174: LD_EXP 46
2178: PPUSH
2179: LD_STRING DS-amhelp
2181: PPUSH
2182: CALL_OW 94
// RaiseSailEvent ( 91 ) ;
2186: LD_INT 91
2188: PPUSH
2189: CALL_OW 427
// end ; end ; end ; if american_attack and american_timeing = 0 0$00 and FilterAllUnits ( [ f_side , 1 ] ) = 0 then
2193: LD_EXP 40
2197: PUSH
2198: LD_EXP 25
2202: PUSH
2203: LD_INT 0
2205: EQUAL
2206: AND
2207: PUSH
2208: LD_INT 22
2210: PUSH
2211: LD_INT 1
2213: PUSH
2214: EMPTY
2215: LIST
2216: LIST
2217: PPUSH
2218: CALL_OW 69
2222: PUSH
2223: LD_INT 0
2225: EQUAL
2226: AND
2227: IFFALSE 2329
// begin american_timeing := Rand ( 17 17$00 , 20 20$00 ) ;
2229: LD_ADDR_EXP 25
2233: PUSH
2234: LD_INT 35700
2236: PPUSH
2237: LD_INT 42000
2239: PPUSH
2240: CALL_OW 12
2244: ST_TO_ADDR
// SayRadio ( scout , DS-DZ-U ) ;
2245: LD_EXP 12
2249: PPUSH
2250: LD_STRING DS-DZ-U
2252: PPUSH
2253: CALL_OW 94
// Wait ( 0 0$33 ) ;
2257: LD_INT 1155
2259: PPUSH
2260: CALL_OW 67
// x := Rand ( 1 , 2 ) ;
2264: LD_ADDR_VAR 0 3
2268: PUSH
2269: LD_INT 1
2271: PPUSH
2272: LD_INT 2
2274: PPUSH
2275: CALL_OW 12
2279: ST_TO_ADDR
// case x of 1 :
2280: LD_VAR 0 3
2284: PUSH
2285: LD_INT 1
2287: DOUBLE
2288: EQUAL
2289: IFTRUE 2293
2291: GO 2303
2293: POP
// RaiseSailEvent ( 41 ) ; 2 :
2294: LD_INT 41
2296: PPUSH
2297: CALL_OW 427
2301: GO 2322
2303: LD_INT 2
2305: DOUBLE
2306: EQUAL
2307: IFTRUE 2311
2309: GO 2321
2311: POP
// RaiseSailEvent ( 42 ) ; end ;
2312: LD_INT 42
2314: PPUSH
2315: CALL_OW 427
2319: GO 2322
2321: POP
// RaiseSailEvent ( 42 ) ;
2322: LD_INT 42
2324: PPUSH
2325: CALL_OW 427
// end ; if russian_attack and russian_timeing = 0 0$00 and FilterAllUnits ( [ f_side , 3 ] ) = 0 then
2329: LD_EXP 39
2333: PUSH
2334: LD_EXP 24
2338: PUSH
2339: LD_INT 0
2341: EQUAL
2342: AND
2343: PUSH
2344: LD_INT 22
2346: PUSH
2347: LD_INT 3
2349: PUSH
2350: EMPTY
2351: LIST
2352: LIST
2353: PPUSH
2354: CALL_OW 69
2358: PUSH
2359: LD_INT 0
2361: EQUAL
2362: AND
2363: IFFALSE 2419
// begin russian_timeing := Rand ( 17 17$00 , 20 20$00 ) ;
2365: LD_ADDR_EXP 24
2369: PUSH
2370: LD_INT 35700
2372: PPUSH
2373: LD_INT 42000
2375: PPUSH
2376: CALL_OW 12
2380: ST_TO_ADDR
// SayRadio ( scout , DS-DZ-R ) ;
2381: LD_EXP 12
2385: PPUSH
2386: LD_STRING DS-DZ-R
2388: PPUSH
2389: CALL_OW 94
// Wait ( 0 0$45 ) ;
2393: LD_INT 1575
2395: PPUSH
2396: CALL_OW 67
// SayRadio ( ru_comander , DS-DR-R1 ) ;
2400: LD_EXP 47
2404: PPUSH
2405: LD_STRING DS-DR-R1
2407: PPUSH
2408: CALL_OW 94
// RaiseSailEvent ( 51 ) ;
2412: LD_INT 51
2414: PPUSH
2415: CALL_OW 427
// end ; if mission_time >= 25 25$00 and arabian_force < 10 then
2419: LD_EXP 34
2423: PUSH
2424: LD_INT 52500
2426: GREATEREQUAL
2427: PUSH
2428: LD_EXP 20
2432: PUSH
2433: LD_INT 10
2435: LESS
2436: AND
2437: IFFALSE 2461
// begin mission_time := 0 0$00 ;
2439: LD_ADDR_EXP 34
2443: PUSH
2444: LD_INT 0
2446: ST_TO_ADDR
// arabian_force := arabian_force + 1 ;
2447: LD_ADDR_EXP 20
2451: PUSH
2452: LD_EXP 20
2456: PUSH
2457: LD_INT 1
2459: PLUS
2460: ST_TO_ADDR
// end ; if arabian_timeing = 0 0$00 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_weapon , ar_control_tower ] ] ] ) = 0 then
2461: LD_EXP 23
2465: PUSH
2466: LD_INT 0
2468: EQUAL
2469: PUSH
2470: LD_INT 22
2472: PUSH
2473: LD_INT 2
2475: PUSH
2476: EMPTY
2477: LIST
2478: LIST
2479: PUSH
2480: LD_INT 3
2482: PUSH
2483: LD_INT 34
2485: PUSH
2486: LD_INT 31
2488: PUSH
2489: EMPTY
2490: LIST
2491: LIST
2492: PUSH
2493: EMPTY
2494: LIST
2495: LIST
2496: PUSH
2497: EMPTY
2498: LIST
2499: LIST
2500: PPUSH
2501: CALL_OW 69
2505: PUSH
2506: LD_INT 0
2508: EQUAL
2509: AND
2510: IFFALSE 2708
// begin arabian_timeing := 7 7$30 ;
2512: LD_ADDR_EXP 23
2516: PUSH
2517: LD_INT 15750
2519: ST_TO_ADDR
// x := Rand ( 1 , 3 ) ;
2520: LD_ADDR_VAR 0 3
2524: PUSH
2525: LD_INT 1
2527: PPUSH
2528: LD_INT 3
2530: PPUSH
2531: CALL_OW 12
2535: ST_TO_ADDR
// SayRadio ( scout , DS-DZ-H ) ;
2536: LD_EXP 12
2540: PPUSH
2541: LD_STRING DS-DZ-H
2543: PPUSH
2544: CALL_OW 94
// case x of 1 :
2548: LD_VAR 0 3
2552: PUSH
2553: LD_INT 1
2555: DOUBLE
2556: EQUAL
2557: IFTRUE 2561
2559: GO 2571
2561: POP
// RaiseSailEvent ( 31 ) ; 2 :
2562: LD_INT 31
2564: PPUSH
2565: CALL_OW 427
2569: GO 2608
2571: LD_INT 2
2573: DOUBLE
2574: EQUAL
2575: IFTRUE 2579
2577: GO 2589
2579: POP
// RaiseSailEvent ( 32 ) ; 3 :
2580: LD_INT 32
2582: PPUSH
2583: CALL_OW 427
2587: GO 2608
2589: LD_INT 3
2591: DOUBLE
2592: EQUAL
2593: IFTRUE 2597
2595: GO 2607
2597: POP
// RaiseSailEvent ( 33 ) ; end ;
2598: LD_INT 33
2600: PPUSH
2601: CALL_OW 427
2605: GO 2608
2607: POP
// RaiseSailEvent ( 33 ) ;
2608: LD_INT 33
2610: PPUSH
2611: CALL_OW 427
// if game_difficulty > 1 then
2615: LD_EXP 2
2619: PUSH
2620: LD_INT 1
2622: GREATER
2623: IFFALSE 2632
// RaiseSailEvent ( 33 ) ;
2625: LD_INT 33
2627: PPUSH
2628: CALL_OW 427
// if heike_dialog1 = false then
2632: LD_EXP 44
2636: PUSH
2637: LD_INT 0
2639: EQUAL
2640: IFFALSE 2671
// begin heike_dialog1 := true ;
2642: LD_ADDR_EXP 44
2646: PUSH
2647: LD_INT 1
2649: ST_TO_ADDR
// Wait ( 0 0$03 ) ;
2650: LD_INT 105
2652: PPUSH
2653: CALL_OW 67
// SayRadio ( ar_comander , heike1 ) ;
2657: LD_EXP 48
2661: PPUSH
2662: LD_STRING heike1
2664: PPUSH
2665: CALL_OW 94
// end else
2669: GO 2708
// if heike_dialog2 = false then
2671: LD_EXP 45
2675: PUSH
2676: LD_INT 0
2678: EQUAL
2679: IFFALSE 2708
// begin heike_dialog2 := true ;
2681: LD_ADDR_EXP 45
2685: PUSH
2686: LD_INT 1
2688: ST_TO_ADDR
// Wait ( 0 0$03 ) ;
2689: LD_INT 105
2691: PPUSH
2692: CALL_OW 67
// SayRadio ( ar_comander , heike2 ) ;
2696: LD_EXP 48
2700: PPUSH
2701: LD_STRING heike2
2703: PPUSH
2704: CALL_OW 94
// end ; end ; if FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) > 0 then
2708: LD_INT 22
2710: PUSH
2711: LD_INT 2
2713: PUSH
2714: EMPTY
2715: LIST
2716: LIST
2717: PUSH
2718: LD_INT 33
2720: PUSH
2721: LD_INT 2
2723: PUSH
2724: EMPTY
2725: LIST
2726: LIST
2727: PUSH
2728: EMPTY
2729: LIST
2730: LIST
2731: PPUSH
2732: CALL_OW 69
2736: PUSH
2737: LD_INT 0
2739: GREATER
2740: IFFALSE 2749
// ConnectWithTower ( 2 ) ;
2742: LD_INT 2
2744: PPUSH
2745: CALL 7139 0 1
// if FilterAllUnits ( [ [ [ f_side , 2 ] , [ f_not , [ f_weapon , ar_control_tower ] ] , [ f_not , [ f_hastask ] ] ] ] ) > 0 then
2749: LD_INT 22
2751: PUSH
2752: LD_INT 2
2754: PUSH
2755: EMPTY
2756: LIST
2757: LIST
2758: PUSH
2759: LD_INT 3
2761: PUSH
2762: LD_INT 34
2764: PUSH
2765: LD_INT 31
2767: PUSH
2768: EMPTY
2769: LIST
2770: LIST
2771: PUSH
2772: EMPTY
2773: LIST
2774: LIST
2775: PUSH
2776: LD_INT 3
2778: PUSH
2779: LD_INT 60
2781: PUSH
2782: EMPTY
2783: LIST
2784: PUSH
2785: EMPTY
2786: LIST
2787: LIST
2788: PUSH
2789: EMPTY
2790: LIST
2791: LIST
2792: LIST
2793: PUSH
2794: EMPTY
2795: LIST
2796: PPUSH
2797: CALL_OW 69
2801: PUSH
2802: LD_INT 0
2804: GREATER
2805: IFFALSE 2951
// begin filter := FilterAllUnits ( [ [ [ f_side , 2 ] , [ f_not , [ f_weapon , ar_control_tower ] ] , [ f_not , [ f_hastask ] ] ] ] ) ;
2807: LD_ADDR_VAR 0 4
2811: PUSH
2812: LD_INT 22
2814: PUSH
2815: LD_INT 2
2817: PUSH
2818: EMPTY
2819: LIST
2820: LIST
2821: PUSH
2822: LD_INT 3
2824: PUSH
2825: LD_INT 34
2827: PUSH
2828: LD_INT 31
2830: PUSH
2831: EMPTY
2832: LIST
2833: LIST
2834: PUSH
2835: EMPTY
2836: LIST
2837: LIST
2838: PUSH
2839: LD_INT 3
2841: PUSH
2842: LD_INT 60
2844: PUSH
2845: EMPTY
2846: LIST
2847: PUSH
2848: EMPTY
2849: LIST
2850: LIST
2851: PUSH
2852: EMPTY
2853: LIST
2854: LIST
2855: LIST
2856: PUSH
2857: EMPTY
2858: LIST
2859: PPUSH
2860: CALL_OW 69
2864: ST_TO_ADDR
// x := SpeedFilter ( FilterAllUnits ( [ f_enemy , 2 ] ) , 20 ) ;
2865: LD_ADDR_VAR 0 3
2869: PUSH
2870: LD_INT 81
2872: PUSH
2873: LD_INT 2
2875: PUSH
2876: EMPTY
2877: LIST
2878: LIST
2879: PPUSH
2880: CALL_OW 69
2884: PPUSH
2885: LD_INT 20
2887: PPUSH
2888: CALL 8522 0 2
2892: ST_TO_ADDR
// for i = 1 to filter do
2893: LD_ADDR_VAR 0 1
2897: PUSH
2898: DOUBLE
2899: LD_INT 1
2901: DEC
2902: ST_TO_ADDR
2903: LD_VAR 0 4
2907: PUSH
2908: FOR_TO
2909: IFFALSE 2949
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( x , filter [ i ] ) ) ;
2911: LD_VAR 0 4
2915: PUSH
2916: LD_VAR 0 1
2920: ARRAY
2921: PPUSH
2922: LD_VAR 0 3
2926: PPUSH
2927: LD_VAR 0 4
2931: PUSH
2932: LD_VAR 0 1
2936: ARRAY
2937: PPUSH
2938: CALL_OW 74
2942: PPUSH
2943: CALL_OW 115
2947: GO 2908
2949: POP
2950: POP
// end ; if FilterAllUnits ( [ [ [ f_side , 3 ] , [ f_not , [ f_hastask ] ] ] ] ) > 0 then
2951: LD_INT 22
2953: PUSH
2954: LD_INT 3
2956: PUSH
2957: EMPTY
2958: LIST
2959: LIST
2960: PUSH
2961: LD_INT 3
2963: PUSH
2964: LD_INT 60
2966: PUSH
2967: EMPTY
2968: LIST
2969: PUSH
2970: EMPTY
2971: LIST
2972: LIST
2973: PUSH
2974: EMPTY
2975: LIST
2976: LIST
2977: PUSH
2978: EMPTY
2979: LIST
2980: PPUSH
2981: CALL_OW 69
2985: PUSH
2986: LD_INT 0
2988: GREATER
2989: IFFALSE 3135
// begin filter := FilterAllUnits ( [ [ [ f_side , 3 ] , [ f_not , [ f_weapon , ar_control_tower ] ] , [ f_not , [ f_hastask ] ] ] ] ) ;
2991: LD_ADDR_VAR 0 4
2995: PUSH
2996: LD_INT 22
2998: PUSH
2999: LD_INT 3
3001: PUSH
3002: EMPTY
3003: LIST
3004: LIST
3005: PUSH
3006: LD_INT 3
3008: PUSH
3009: LD_INT 34
3011: PUSH
3012: LD_INT 31
3014: PUSH
3015: EMPTY
3016: LIST
3017: LIST
3018: PUSH
3019: EMPTY
3020: LIST
3021: LIST
3022: PUSH
3023: LD_INT 3
3025: PUSH
3026: LD_INT 60
3028: PUSH
3029: EMPTY
3030: LIST
3031: PUSH
3032: EMPTY
3033: LIST
3034: LIST
3035: PUSH
3036: EMPTY
3037: LIST
3038: LIST
3039: LIST
3040: PUSH
3041: EMPTY
3042: LIST
3043: PPUSH
3044: CALL_OW 69
3048: ST_TO_ADDR
// x := SpeedFilter ( FilterAllUnits ( [ f_enemy , 3 ] ) , 20 ) ;
3049: LD_ADDR_VAR 0 3
3053: PUSH
3054: LD_INT 81
3056: PUSH
3057: LD_INT 3
3059: PUSH
3060: EMPTY
3061: LIST
3062: LIST
3063: PPUSH
3064: CALL_OW 69
3068: PPUSH
3069: LD_INT 20
3071: PPUSH
3072: CALL 8522 0 2
3076: ST_TO_ADDR
// for i = 1 to filter do
3077: LD_ADDR_VAR 0 1
3081: PUSH
3082: DOUBLE
3083: LD_INT 1
3085: DEC
3086: ST_TO_ADDR
3087: LD_VAR 0 4
3091: PUSH
3092: FOR_TO
3093: IFFALSE 3133
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( x , filter [ i ] ) ) ;
3095: LD_VAR 0 4
3099: PUSH
3100: LD_VAR 0 1
3104: ARRAY
3105: PPUSH
3106: LD_VAR 0 3
3110: PPUSH
3111: LD_VAR 0 4
3115: PUSH
3116: LD_VAR 0 1
3120: ARRAY
3121: PPUSH
3122: CALL_OW 74
3126: PPUSH
3127: CALL_OW 115
3131: GO 3092
3133: POP
3134: POP
// end ; if FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] ] ] ) > 0 then
3135: LD_INT 22
3137: PUSH
3138: LD_INT 1
3140: PUSH
3141: EMPTY
3142: LIST
3143: LIST
3144: PUSH
3145: LD_INT 3
3147: PUSH
3148: LD_INT 60
3150: PUSH
3151: EMPTY
3152: LIST
3153: PUSH
3154: EMPTY
3155: LIST
3156: LIST
3157: PUSH
3158: EMPTY
3159: LIST
3160: LIST
3161: PUSH
3162: EMPTY
3163: LIST
3164: PPUSH
3165: CALL_OW 69
3169: PUSH
3170: LD_INT 0
3172: GREATER
3173: IFFALSE 3319
// begin filter := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_not , [ f_weapon , ar_control_tower ] ] , [ f_not , [ f_hastask ] ] ] ] ) ;
3175: LD_ADDR_VAR 0 4
3179: PUSH
3180: LD_INT 22
3182: PUSH
3183: LD_INT 1
3185: PUSH
3186: EMPTY
3187: LIST
3188: LIST
3189: PUSH
3190: LD_INT 3
3192: PUSH
3193: LD_INT 34
3195: PUSH
3196: LD_INT 31
3198: PUSH
3199: EMPTY
3200: LIST
3201: LIST
3202: PUSH
3203: EMPTY
3204: LIST
3205: LIST
3206: PUSH
3207: LD_INT 3
3209: PUSH
3210: LD_INT 60
3212: PUSH
3213: EMPTY
3214: LIST
3215: PUSH
3216: EMPTY
3217: LIST
3218: LIST
3219: PUSH
3220: EMPTY
3221: LIST
3222: LIST
3223: LIST
3224: PUSH
3225: EMPTY
3226: LIST
3227: PPUSH
3228: CALL_OW 69
3232: ST_TO_ADDR
// x := SpeedFilter ( FilterAllUnits ( [ f_enemy , 1 ] ) , 20 ) ;
3233: LD_ADDR_VAR 0 3
3237: PUSH
3238: LD_INT 81
3240: PUSH
3241: LD_INT 1
3243: PUSH
3244: EMPTY
3245: LIST
3246: LIST
3247: PPUSH
3248: CALL_OW 69
3252: PPUSH
3253: LD_INT 20
3255: PPUSH
3256: CALL 8522 0 2
3260: ST_TO_ADDR
// for i = 1 to filter do
3261: LD_ADDR_VAR 0 1
3265: PUSH
3266: DOUBLE
3267: LD_INT 1
3269: DEC
3270: ST_TO_ADDR
3271: LD_VAR 0 4
3275: PUSH
3276: FOR_TO
3277: IFFALSE 3317
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( x , filter [ i ] ) ) ;
3279: LD_VAR 0 4
3283: PUSH
3284: LD_VAR 0 1
3288: ARRAY
3289: PPUSH
3290: LD_VAR 0 3
3294: PPUSH
3295: LD_VAR 0 4
3299: PUSH
3300: LD_VAR 0 1
3304: ARRAY
3305: PPUSH
3306: CALL_OW 74
3310: PPUSH
3311: CALL_OW 115
3315: GO 3276
3317: POP
3318: POP
// end ; if FilterAllUnits ( [ [ [ f_side , 2 ] , [ f_weapon , ar_bio_bomb ] , [ f_not , [ f_lives , 700 ] ] ] ] ) > 0 then
3319: LD_INT 22
3321: PUSH
3322: LD_INT 2
3324: PUSH
3325: EMPTY
3326: LIST
3327: LIST
3328: PUSH
3329: LD_INT 34
3331: PUSH
3332: LD_INT 91
3334: PUSH
3335: EMPTY
3336: LIST
3337: LIST
3338: PUSH
3339: LD_INT 3
3341: PUSH
3342: LD_INT 24
3344: PUSH
3345: LD_INT 700
3347: PUSH
3348: EMPTY
3349: LIST
3350: LIST
3351: PUSH
3352: EMPTY
3353: LIST
3354: LIST
3355: PUSH
3356: EMPTY
3357: LIST
3358: LIST
3359: LIST
3360: PUSH
3361: EMPTY
3362: LIST
3363: PPUSH
3364: CALL_OW 69
3368: PUSH
3369: LD_INT 0
3371: GREATER
3372: IFFALSE 3469
// begin filter := FilterAllUnits ( [ [ [ f_side , 2 ] , [ f_weapon , ar_bio_bomb ] , [ f_not , [ f_lives , 700 ] ] ] ] ) ;
3374: LD_ADDR_VAR 0 4
3378: PUSH
3379: LD_INT 22
3381: PUSH
3382: LD_INT 2
3384: PUSH
3385: EMPTY
3386: LIST
3387: LIST
3388: PUSH
3389: LD_INT 34
3391: PUSH
3392: LD_INT 91
3394: PUSH
3395: EMPTY
3396: LIST
3397: LIST
3398: PUSH
3399: LD_INT 3
3401: PUSH
3402: LD_INT 24
3404: PUSH
3405: LD_INT 700
3407: PUSH
3408: EMPTY
3409: LIST
3410: LIST
3411: PUSH
3412: EMPTY
3413: LIST
3414: LIST
3415: PUSH
3416: EMPTY
3417: LIST
3418: LIST
3419: LIST
3420: PUSH
3421: EMPTY
3422: LIST
3423: PPUSH
3424: CALL_OW 69
3428: ST_TO_ADDR
// for i = 1 to filter do
3429: LD_ADDR_VAR 0 1
3433: PUSH
3434: DOUBLE
3435: LD_INT 1
3437: DEC
3438: ST_TO_ADDR
3439: LD_VAR 0 4
3443: PUSH
3444: FOR_TO
3445: IFFALSE 3467
// SetLives ( filter [ i ] , 1 ) ;
3447: LD_VAR 0 4
3451: PUSH
3452: LD_VAR 0 1
3456: ARRAY
3457: PPUSH
3458: LD_INT 1
3460: PPUSH
3461: CALL_OW 234
3465: GO 3444
3467: POP
3468: POP
// end ; end ; end_of_file
3469: PPOPN 4
3471: END
// export function Start_Mission ; begin
3472: LD_INT 0
3474: PPUSH
// PrepareLegion ;
3475: CALL 3516 0 0
// PrepareMeeting ;
3479: CALL 4133 0 0
// case Query ( DS-text-beg ) of 1 :
3483: LD_STRING DS-text-beg
3485: PPUSH
3486: CALL_OW 97
3490: PUSH
3491: LD_INT 1
3493: DOUBLE
3494: EQUAL
3495: IFTRUE 3499
3497: GO 3502
3499: POP
// ; end ;
3500: GO 3503
3502: POP
// game_on := true ;
3503: LD_ADDR_EXP 1
3507: PUSH
3508: LD_INT 1
3510: ST_TO_ADDR
// end ;
3511: LD_VAR 0 1
3515: RET
// export l_cmndr , l_skill , l_units ; function PrepareLegion ; var i , p , filter , team ; begin
3516: LD_INT 0
3518: PPUSH
3519: PPUSH
3520: PPUSH
3521: PPUSH
3522: PPUSH
// uc_side := 8 ;
3523: LD_ADDR_OWVAR 20
3527: PUSH
3528: LD_INT 8
3530: ST_TO_ADDR
// uc_nation := 2 ;
3531: LD_ADDR_OWVAR 21
3535: PUSH
3536: LD_INT 2
3538: ST_TO_ADDR
// l_skill := [ 9 , 8 , 7 ] [ difficulty ] ;
3539: LD_ADDR_EXP 50
3543: PUSH
3544: LD_INT 9
3546: PUSH
3547: LD_INT 8
3549: PUSH
3550: LD_INT 7
3552: PUSH
3553: EMPTY
3554: LIST
3555: LIST
3556: LIST
3557: PUSH
3558: LD_OWVAR 67
3562: ARRAY
3563: ST_TO_ADDR
// l_units := [ 9 , 8 , 8 ] [ difficulty ] ;
3564: LD_ADDR_EXP 51
3568: PUSH
3569: LD_INT 9
3571: PUSH
3572: LD_INT 8
3574: PUSH
3575: LD_INT 8
3577: PUSH
3578: EMPTY
3579: LIST
3580: LIST
3581: LIST
3582: PUSH
3583: LD_OWVAR 67
3587: ARRAY
3588: ST_TO_ADDR
// filter := [ ] ;
3589: LD_ADDR_VAR 0 4
3593: PUSH
3594: EMPTY
3595: ST_TO_ADDR
// hc_gallery := desert ;
3596: LD_ADDR_OWVAR 33
3600: PUSH
3601: LD_STRING desert
3603: ST_TO_ADDR
// hc_face_number := 1 ;
3604: LD_ADDR_OWVAR 34
3608: PUSH
3609: LD_INT 1
3611: ST_TO_ADDR
// hc_skills := [ l_skill + 2 , l_skill - 1 , l_skill , l_skill + 1 ] ;
3612: LD_ADDR_OWVAR 31
3616: PUSH
3617: LD_EXP 50
3621: PUSH
3622: LD_INT 2
3624: PLUS
3625: PUSH
3626: LD_EXP 50
3630: PUSH
3631: LD_INT 1
3633: MINUS
3634: PUSH
3635: LD_EXP 50
3639: PUSH
3640: LD_EXP 50
3644: PUSH
3645: LD_INT 1
3647: PLUS
3648: PUSH
3649: EMPTY
3650: LIST
3651: LIST
3652: LIST
3653: LIST
3654: ST_TO_ADDR
// hc_sex := sex_male ;
3655: LD_ADDR_OWVAR 27
3659: PUSH
3660: LD_INT 1
3662: ST_TO_ADDR
// hc_name := Henri Ruotz ;
3663: LD_ADDR_OWVAR 26
3667: PUSH
3668: LD_STRING Henri Ruotz
3670: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
3671: LD_ADDR_OWVAR 29
3675: PUSH
3676: LD_INT 10
3678: PUSH
3679: LD_INT 10
3681: PUSH
3682: EMPTY
3683: LIST
3684: LIST
3685: ST_TO_ADDR
// hc_class := 1 ;
3686: LD_ADDR_OWVAR 28
3690: PUSH
3691: LD_INT 1
3693: ST_TO_ADDR
// hc_importance := 100 ;
3694: LD_ADDR_OWVAR 32
3698: PUSH
3699: LD_INT 100
3701: ST_TO_ADDR
// l_cmndr := CreateHuman ;
3702: LD_ADDR_EXP 49
3706: PUSH
3707: CALL_OW 44
3711: ST_TO_ADDR
// hc_importance := 0 ;
3712: LD_ADDR_OWVAR 32
3716: PUSH
3717: LD_INT 0
3719: ST_TO_ADDR
// scout := PrepareHuman ( sex_male , 1 , 0 ) ;
3720: LD_ADDR_EXP 12
3724: PUSH
3725: LD_INT 1
3727: PPUSH
3728: LD_INT 1
3730: PPUSH
3731: LD_INT 0
3733: PPUSH
3734: CALL_OW 380
3738: ST_TO_ADDR
// for i = 1 to 4 do
3739: LD_ADDR_VAR 0 2
3743: PUSH
3744: DOUBLE
3745: LD_INT 1
3747: DEC
3748: ST_TO_ADDR
3749: LD_INT 4
3751: PUSH
3752: FOR_TO
3753: IFFALSE 3803
// for p = 1 to 6 do
3755: LD_ADDR_VAR 0 3
3759: PUSH
3760: DOUBLE
3761: LD_INT 1
3763: DEC
3764: ST_TO_ADDR
3765: LD_INT 6
3767: PUSH
3768: FOR_TO
3769: IFFALSE 3799
// filter := filter ^ CreateHumanWithClass ( i , l_skill ) ;
3771: LD_ADDR_VAR 0 4
3775: PUSH
3776: LD_VAR 0 4
3780: PUSH
3781: LD_VAR 0 2
3785: PPUSH
3786: LD_EXP 50
3790: PPUSH
3791: CALL 7323 0 2
3795: ADD
3796: ST_TO_ADDR
3797: GO 3768
3799: POP
3800: POP
3801: GO 3752
3803: POP
3804: POP
// team := CharacterSelection ( text , l_units , l_units , [ sel_change_class , l_cmndr , sel_changeable , sel_not_hired ] ^ filter , [ class_soldier , class_mechanic , class_engineer , class_scientistic , class_mortar ] ) ;
3805: LD_ADDR_VAR 0 5
3809: PUSH
3810: LD_STRING text
3812: PPUSH
3813: LD_EXP 51
3817: PPUSH
3818: LD_EXP 51
3822: PPUSH
3823: LD_INT -5
3825: PUSH
3826: LD_EXP 49
3830: PUSH
3831: LD_INT -3
3833: PUSH
3834: LD_INT -2
3836: PUSH
3837: EMPTY
3838: LIST
3839: LIST
3840: LIST
3841: LIST
3842: PUSH
3843: LD_VAR 0 4
3847: ADD
3848: PPUSH
3849: LD_INT 1
3851: PUSH
3852: LD_INT 3
3854: PUSH
3855: LD_INT 2
3857: PUSH
3858: LD_INT 4
3860: PUSH
3861: LD_INT 8
3863: PUSH
3864: EMPTY
3865: LIST
3866: LIST
3867: LIST
3868: LIST
3869: LIST
3870: PPUSH
3871: CALL_OW 42
3875: ST_TO_ADDR
// for i = 1 to l_units do
3876: LD_ADDR_VAR 0 2
3880: PUSH
3881: DOUBLE
3882: LD_INT 1
3884: DEC
3885: ST_TO_ADDR
3886: LD_EXP 51
3890: PUSH
3891: FOR_TO
3892: IFFALSE 3917
// PlaceUnitArea ( team [ i ] , legion_spawn , false ) ;
3894: LD_VAR 0 5
3898: PUSH
3899: LD_VAR 0 2
3903: ARRAY
3904: PPUSH
3905: LD_INT 1
3907: PPUSH
3908: LD_INT 0
3910: PPUSH
3911: CALL_OW 49
3915: GO 3891
3917: POP
3918: POP
// PlaceUnitArea ( l_cmndr , legion_spawn , false ) ;
3919: LD_EXP 49
3923: PPUSH
3924: LD_INT 1
3926: PPUSH
3927: LD_INT 0
3929: PPUSH
3930: CALL_OW 49
// end ;
3934: LD_VAR 0 1
3938: RET
// export function PlaceCamera ; begin
3939: LD_INT 0
3941: PPUSH
// PlaceSeeing ( 46 , 48 , 8 , 10 ) ;
3942: LD_INT 46
3944: PPUSH
3945: LD_INT 48
3947: PPUSH
3948: LD_INT 8
3950: PPUSH
3951: LD_INT 10
3953: PPUSH
3954: CALL_OW 330
// PlaceSeeing ( 58 , 66 , 8 , 10 ) ;
3958: LD_INT 58
3960: PPUSH
3961: LD_INT 66
3963: PPUSH
3964: LD_INT 8
3966: PPUSH
3967: LD_INT 10
3969: PPUSH
3970: CALL_OW 330
// PlaceSeeing ( 82 , 82 , 8 , 10 ) ;
3974: LD_INT 82
3976: PPUSH
3977: LD_INT 82
3979: PPUSH
3980: LD_INT 8
3982: PPUSH
3983: LD_INT 10
3985: PPUSH
3986: CALL_OW 330
// PlaceSeeing ( 107 , 79 , 8 , 10 ) ;
3990: LD_INT 107
3992: PPUSH
3993: LD_INT 79
3995: PPUSH
3996: LD_INT 8
3998: PPUSH
3999: LD_INT 10
4001: PPUSH
4002: CALL_OW 330
// PlaceSeeing ( 101 , 57 , 8 , 10 ) ;
4006: LD_INT 101
4008: PPUSH
4009: LD_INT 57
4011: PPUSH
4012: LD_INT 8
4014: PPUSH
4015: LD_INT 10
4017: PPUSH
4018: CALL_OW 330
// PlaceSeeing ( 85 , 32 , 8 , 10 ) ;
4022: LD_INT 85
4024: PPUSH
4025: LD_INT 32
4027: PPUSH
4028: LD_INT 8
4030: PPUSH
4031: LD_INT 10
4033: PPUSH
4034: CALL_OW 330
// PlaceSeeing ( 108 , 72 , 8 , 10 ) ;
4038: LD_INT 108
4040: PPUSH
4041: LD_INT 72
4043: PPUSH
4044: LD_INT 8
4046: PPUSH
4047: LD_INT 10
4049: PPUSH
4050: CALL_OW 330
// PlaceSeeing ( 124 , 74 , 8 , 10 ) ;
4054: LD_INT 124
4056: PPUSH
4057: LD_INT 74
4059: PPUSH
4060: LD_INT 8
4062: PPUSH
4063: LD_INT 10
4065: PPUSH
4066: CALL_OW 330
// PlaceSeeing ( 67 , 33 , 8 , 20 ) ;
4070: LD_INT 67
4072: PPUSH
4073: LD_INT 33
4075: PPUSH
4076: LD_INT 8
4078: PPUSH
4079: LD_INT 20
4081: PPUSH
4082: CALL_OW 330
// RemoveSeeing ( 67 , 33 , 8 ) ;
4086: LD_INT 67
4088: PPUSH
4089: LD_INT 33
4091: PPUSH
4092: LD_INT 8
4094: PPUSH
4095: CALL_OW 331
// PlaceSeeing ( 94 , 84 , 8 , 20 ) ;
4099: LD_INT 94
4101: PPUSH
4102: LD_INT 84
4104: PPUSH
4105: LD_INT 8
4107: PPUSH
4108: LD_INT 20
4110: PPUSH
4111: CALL_OW 330
// RemoveSeeing ( 94 , 84 , 8 ) ;
4115: LD_INT 94
4117: PPUSH
4118: LD_INT 84
4120: PPUSH
4121: LD_INT 8
4123: PPUSH
4124: CALL_OW 331
// end ;
4128: LD_VAR 0 1
4132: RET
// export function PrepareMeeting ; begin
4133: LD_INT 0
4135: PPUSH
// uc_side := 6 ;
4136: LD_ADDR_OWVAR 20
4140: PUSH
4141: LD_INT 6
4143: ST_TO_ADDR
// hc_gallery := desert ;
4144: LD_ADDR_OWVAR 33
4148: PUSH
4149: LD_STRING desert
4151: ST_TO_ADDR
// hc_face_number := 2 ;
4152: LD_ADDR_OWVAR 34
4156: PUSH
4157: LD_INT 2
4159: ST_TO_ADDR
// hc_name := Leopold Drass ;
4160: LD_ADDR_OWVAR 26
4164: PUSH
4165: LD_STRING Leopold Drass
4167: ST_TO_ADDR
// hc_class := 1 ;
4168: LD_ADDR_OWVAR 28
4172: PUSH
4173: LD_INT 1
4175: ST_TO_ADDR
// hc_sex := sex_male ;
4176: LD_ADDR_OWVAR 27
4180: PUSH
4181: LD_INT 1
4183: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
4184: LD_ADDR_OWVAR 29
4188: PUSH
4189: LD_INT 12
4191: PUSH
4192: LD_INT 12
4194: PUSH
4195: EMPTY
4196: LIST
4197: LIST
4198: ST_TO_ADDR
// Leopold := CreateHuman ;
4199: LD_ADDR_EXP 7
4203: PUSH
4204: CALL_OW 44
4208: ST_TO_ADDR
// PlaceUnitArea ( Leopold , north_spawn , false ) ;
4209: LD_EXP 7
4213: PPUSH
4214: LD_INT 3
4216: PPUSH
4217: LD_INT 0
4219: PPUSH
4220: CALL_OW 49
// end ; end_of_file
4224: LD_VAR 0 1
4228: RET
// on SailEvent ( num ) do var i , filter , un , p , area ;
4229: LD_INT 0
4231: PPUSH
4232: PPUSH
4233: PPUSH
4234: PPUSH
4235: PPUSH
// begin case num of 1 :
4236: LD_VAR 0 1
4240: PUSH
4241: LD_INT 1
4243: DOUBLE
4244: EQUAL
4245: IFTRUE 4249
4247: GO 4281
4249: POP
// begin ComMoveXY ( leopold , GetX ( l_cmndr ) , GetY ( l_cmndr ) ) ;
4250: LD_EXP 7
4254: PPUSH
4255: LD_EXP 49
4259: PPUSH
4260: CALL_OW 250
4264: PPUSH
4265: LD_EXP 49
4269: PPUSH
4270: CALL_OW 251
4274: PPUSH
4275: CALL_OW 111
// end ; 2 :
4279: GO 6699
4281: LD_INT 2
4283: DOUBLE
4284: EQUAL
4285: IFTRUE 4289
4287: GO 4398
4289: POP
// begin InGameOn ;
4290: CALL_OW 8
// meeting_start := true ;
4294: LD_ADDR_EXP 26
4298: PUSH
4299: LD_INT 1
4301: ST_TO_ADDR
// ComTurnUnit ( leopold , l_cmndr ) ;
4302: LD_EXP 7
4306: PPUSH
4307: LD_EXP 49
4311: PPUSH
4312: CALL_OW 119
// ComTurnUnit ( l_cmndr , leopold ) ;
4316: LD_EXP 49
4320: PPUSH
4321: LD_EXP 7
4325: PPUSH
4326: CALL_OW 119
// Say ( leopold , DS-DL-1 ) ;
4330: LD_EXP 7
4334: PPUSH
4335: LD_STRING DS-DL-1
4337: PPUSH
4338: CALL_OW 88
// Say ( l_cmndr , DS-DC-1 ) ;
4342: LD_EXP 49
4346: PPUSH
4347: LD_STRING DS-DC-1
4349: PPUSH
4350: CALL_OW 88
// Say ( leopold , DS-DL-2 ) ;
4354: LD_EXP 7
4358: PPUSH
4359: LD_STRING DS-DL-2
4361: PPUSH
4362: CALL_OW 88
// ComEnterUnit ( leopold , fort ) ;
4366: LD_EXP 7
4370: PPUSH
4371: LD_INT 23
4373: PPUSH
4374: CALL_OW 120
// InGameOff ;
4378: CALL_OW 9
// Wait ( 0 0$01 ) ;
4382: LD_INT 35
4384: PPUSH
4385: CALL_OW 67
// ChangeMissionObjectives ( DS-T1 ) ;
4389: LD_STRING DS-T1
4391: PPUSH
4392: CALL_OW 337
// end ; 10 :
4396: GO 6699
4398: LD_INT 10
4400: DOUBLE
4401: EQUAL
4402: IFTRUE 4406
4404: GO 4618
4406: POP
// begin uc_side := 6 ;
4407: LD_ADDR_OWVAR 20
4411: PUSH
4412: LD_INT 6
4414: ST_TO_ADDR
// uc_nation := 2 ;
4415: LD_ADDR_OWVAR 21
4419: PUSH
4420: LD_INT 2
4422: ST_TO_ADDR
// hc_gallery :=  ;
4423: LD_ADDR_OWVAR 33
4427: PUSH
4428: LD_STRING 
4430: ST_TO_ADDR
// hc_skills := [ skill + 2 , skill - 1 , skill , skill + 1 ] ;
4431: LD_ADDR_OWVAR 31
4435: PUSH
4436: LD_EXP 16
4440: PUSH
4441: LD_INT 2
4443: PLUS
4444: PUSH
4445: LD_EXP 16
4449: PUSH
4450: LD_INT 1
4452: MINUS
4453: PUSH
4454: LD_EXP 16
4458: PUSH
4459: LD_EXP 16
4463: PUSH
4464: LD_INT 1
4466: PLUS
4467: PUSH
4468: EMPTY
4469: LIST
4470: LIST
4471: LIST
4472: LIST
4473: ST_TO_ADDR
// hc_sex := sex_male ;
4474: LD_ADDR_OWVAR 27
4478: PUSH
4479: LD_INT 1
4481: ST_TO_ADDR
// hc_name := Samuel van Horn ;
4482: LD_ADDR_OWVAR 26
4486: PUSH
4487: LD_STRING Samuel van Horn
4489: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
4490: LD_ADDR_OWVAR 29
4494: PUSH
4495: LD_INT 11
4497: PUSH
4498: LD_INT 10
4500: PUSH
4501: EMPTY
4502: LIST
4503: LIST
4504: ST_TO_ADDR
// hc_class := 1 ;
4505: LD_ADDR_OWVAR 28
4509: PUSH
4510: LD_INT 1
4512: ST_TO_ADDR
// samuel := CreateHuman ;
4513: LD_ADDR_EXP 9
4517: PUSH
4518: CALL_OW 44
4522: ST_TO_ADDR
// PlaceUnitArea ( samuel , south_spawn , false ) ;
4523: LD_EXP 9
4527: PPUSH
4528: LD_INT 4
4530: PPUSH
4531: LD_INT 0
4533: PPUSH
4534: CALL_OW 49
// for i = 1 to 3 do
4538: LD_ADDR_VAR 0 2
4542: PUSH
4543: DOUBLE
4544: LD_INT 1
4546: DEC
4547: ST_TO_ADDR
4548: LD_INT 3
4550: PUSH
4551: FOR_TO
4552: IFFALSE 4579
// PlaceUnitArea ( CreateHumanWithClass ( class_mortar , skill ) , south_spawn , false ) ;
4554: LD_INT 8
4556: PPUSH
4557: LD_EXP 16
4561: PPUSH
4562: CALL 7323 0 2
4566: PPUSH
4567: LD_INT 4
4569: PPUSH
4570: LD_INT 0
4572: PPUSH
4573: CALL_OW 49
4577: GO 4551
4579: POP
4580: POP
// ComEnterUnit ( FilterAllUnits ( [ f_side , 6 ] ) diff [ leopold , fort ] , fort ) ;
4581: LD_INT 22
4583: PUSH
4584: LD_INT 6
4586: PUSH
4587: EMPTY
4588: LIST
4589: LIST
4590: PPUSH
4591: CALL_OW 69
4595: PUSH
4596: LD_EXP 7
4600: PUSH
4601: LD_INT 23
4603: PUSH
4604: EMPTY
4605: LIST
4606: LIST
4607: DIFF
4608: PPUSH
4609: LD_INT 23
4611: PPUSH
4612: CALL_OW 120
// end ; 3 :
4616: GO 6699
4618: LD_INT 3
4620: DOUBLE
4621: EQUAL
4622: IFTRUE 4626
4624: GO 4637
4626: POP
// begin arabian_attack := true ;
4627: LD_ADDR_EXP 38
4631: PUSH
4632: LD_INT 1
4634: ST_TO_ADDR
// end ; 4 :
4635: GO 6699
4637: LD_INT 4
4639: DOUBLE
4640: EQUAL
4641: IFTRUE 4645
4643: GO 4656
4645: POP
// begin american_attack := true ;
4646: LD_ADDR_EXP 40
4650: PUSH
4651: LD_INT 1
4653: ST_TO_ADDR
// end ; 5 :
4654: GO 6699
4656: LD_INT 5
4658: DOUBLE
4659: EQUAL
4660: IFTRUE 4664
4662: GO 4675
4664: POP
// begin russian_attack := true ;
4665: LD_ADDR_EXP 39
4669: PUSH
4670: LD_INT 1
4672: ST_TO_ADDR
// end ; 31 :
4673: GO 6699
4675: LD_INT 31
4677: DOUBLE
4678: EQUAL
4679: IFTRUE 4683
4681: GO 4958
4683: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
4684: LD_ADDR_VAR 0 6
4688: PUSH
4689: LD_EXP 15
4693: PUSH
4694: LD_INT 1
4696: PPUSH
4697: LD_EXP 15
4701: PPUSH
4702: CALL_OW 12
4706: ARRAY
4707: ST_TO_ADDR
// uc_side := 2 ;
4708: LD_ADDR_OWVAR 20
4712: PUSH
4713: LD_INT 2
4715: ST_TO_ADDR
// uc_nation := 2 ;
4716: LD_ADDR_OWVAR 21
4720: PUSH
4721: LD_INT 2
4723: ST_TO_ADDR
// for i = 1 to arabian_force do
4724: LD_ADDR_VAR 0 2
4728: PUSH
4729: DOUBLE
4730: LD_INT 1
4732: DEC
4733: ST_TO_ADDR
4734: LD_EXP 20
4738: PUSH
4739: FOR_TO
4740: IFFALSE 4819
// begin vc_chassis := ar_half_tracked ;
4742: LD_ADDR_OWVAR 37
4746: PUSH
4747: LD_INT 14
4749: ST_TO_ADDR
// vc_engine := engine_siberite ;
4750: LD_ADDR_OWVAR 39
4754: PUSH
4755: LD_INT 3
4757: ST_TO_ADDR
// vc_control := control_remote ;
4758: LD_ADDR_OWVAR 38
4762: PUSH
4763: LD_INT 2
4765: ST_TO_ADDR
// vc_weapon := ar_weapons [ Rand ( 1 , ar_weapons ) ] ;
4766: LD_ADDR_OWVAR 40
4770: PUSH
4771: LD_EXP 17
4775: PUSH
4776: LD_INT 1
4778: PPUSH
4779: LD_EXP 17
4783: PPUSH
4784: CALL_OW 12
4788: ARRAY
4789: ST_TO_ADDR
// un := CreateVehicle ;
4790: LD_ADDR_VAR 0 4
4794: PUSH
4795: CALL_OW 45
4799: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
4800: LD_VAR 0 4
4804: PPUSH
4805: LD_VAR 0 6
4809: PPUSH
4810: LD_INT 0
4812: PPUSH
4813: CALL_OW 49
// end ;
4817: GO 4739
4819: POP
4820: POP
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_manual ] ] ) < 2 then
4821: LD_INT 22
4823: PUSH
4824: LD_INT 2
4826: PUSH
4827: EMPTY
4828: LIST
4829: LIST
4830: PUSH
4831: LD_INT 33
4833: PUSH
4834: LD_INT 1
4836: PUSH
4837: EMPTY
4838: LIST
4839: LIST
4840: PUSH
4841: EMPTY
4842: LIST
4843: LIST
4844: PPUSH
4845: CALL_OW 69
4849: PUSH
4850: LD_INT 2
4852: LESS
4853: IFFALSE 4956
// for i = 1 to 2 do
4855: LD_ADDR_VAR 0 2
4859: PUSH
4860: DOUBLE
4861: LD_INT 1
4863: DEC
4864: ST_TO_ADDR
4865: LD_INT 2
4867: PUSH
4868: FOR_TO
4869: IFFALSE 4954
// begin vc_chassis := ar_half_tracked ;
4871: LD_ADDR_OWVAR 37
4875: PUSH
4876: LD_INT 14
4878: ST_TO_ADDR
// vc_engine := engine_siberite ;
4879: LD_ADDR_OWVAR 39
4883: PUSH
4884: LD_INT 3
4886: ST_TO_ADDR
// vc_control := control_manual ;
4887: LD_ADDR_OWVAR 38
4891: PUSH
4892: LD_INT 1
4894: ST_TO_ADDR
// vc_weapon := ar_control_tower ;
4895: LD_ADDR_OWVAR 40
4899: PUSH
4900: LD_INT 31
4902: ST_TO_ADDR
// un := CreateVehicle ;
4903: LD_ADDR_VAR 0 4
4907: PUSH
4908: CALL_OW 45
4912: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
4913: LD_VAR 0 4
4917: PPUSH
4918: LD_VAR 0 6
4922: PPUSH
4923: LD_INT 0
4925: PPUSH
4926: CALL_OW 49
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , skill ) , un ) ;
4930: LD_INT 3
4932: PPUSH
4933: LD_EXP 16
4937: PPUSH
4938: CALL 7323 0 2
4942: PPUSH
4943: LD_VAR 0 4
4947: PPUSH
4948: CALL_OW 52
// end ;
4952: GO 4868
4954: POP
4955: POP
// end ; 32 :
4956: GO 6699
4958: LD_INT 32
4960: DOUBLE
4961: EQUAL
4962: IFTRUE 4966
4964: GO 5339
4966: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
4967: LD_ADDR_VAR 0 6
4971: PUSH
4972: LD_EXP 15
4976: PUSH
4977: LD_INT 1
4979: PPUSH
4980: LD_EXP 15
4984: PPUSH
4985: CALL_OW 12
4989: ARRAY
4990: ST_TO_ADDR
// uc_side := 2 ;
4991: LD_ADDR_OWVAR 20
4995: PUSH
4996: LD_INT 2
4998: ST_TO_ADDR
// uc_nation := 2 ;
4999: LD_ADDR_OWVAR 21
5003: PUSH
5004: LD_INT 2
5006: ST_TO_ADDR
// for i = 1 to ( arabian_force - 2 ) do
5007: LD_ADDR_VAR 0 2
5011: PUSH
5012: DOUBLE
5013: LD_INT 1
5015: DEC
5016: ST_TO_ADDR
5017: LD_EXP 20
5021: PUSH
5022: LD_INT 2
5024: MINUS
5025: PUSH
5026: FOR_TO
5027: IFFALSE 5110
// begin vc_chassis := ar_half_tracked ;
5029: LD_ADDR_OWVAR 37
5033: PUSH
5034: LD_INT 14
5036: ST_TO_ADDR
// vc_engine := engine_siberite ;
5037: LD_ADDR_OWVAR 39
5041: PUSH
5042: LD_INT 3
5044: ST_TO_ADDR
// vc_control := control_remote ;
5045: LD_ADDR_OWVAR 38
5049: PUSH
5050: LD_INT 2
5052: ST_TO_ADDR
// vc_weapon := ar_weapons [ Rand ( 1 , ar_weapons - 1 ) ] ;
5053: LD_ADDR_OWVAR 40
5057: PUSH
5058: LD_EXP 17
5062: PUSH
5063: LD_INT 1
5065: PPUSH
5066: LD_EXP 17
5070: PUSH
5071: LD_INT 1
5073: MINUS
5074: PPUSH
5075: CALL_OW 12
5079: ARRAY
5080: ST_TO_ADDR
// un := CreateVehicle ;
5081: LD_ADDR_VAR 0 4
5085: PUSH
5086: CALL_OW 45
5090: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5091: LD_VAR 0 4
5095: PPUSH
5096: LD_VAR 0 6
5100: PPUSH
5101: LD_INT 0
5103: PPUSH
5104: CALL_OW 49
// end ;
5108: GO 5026
5110: POP
5111: POP
// for i = 1 to Rand ( 0 , 1 ) + [ 2 , 3 , 3 ] [ game_difficulty ] do
5112: LD_ADDR_VAR 0 2
5116: PUSH
5117: DOUBLE
5118: LD_INT 1
5120: DEC
5121: ST_TO_ADDR
5122: LD_INT 0
5124: PPUSH
5125: LD_INT 1
5127: PPUSH
5128: CALL_OW 12
5132: PUSH
5133: LD_INT 2
5135: PUSH
5136: LD_INT 3
5138: PUSH
5139: LD_INT 3
5141: PUSH
5142: EMPTY
5143: LIST
5144: LIST
5145: LIST
5146: PUSH
5147: LD_EXP 2
5151: ARRAY
5152: PLUS
5153: PUSH
5154: FOR_TO
5155: IFFALSE 5192
// begin uc_nation := 0 ;
5157: LD_ADDR_OWVAR 21
5161: PUSH
5162: LD_INT 0
5164: ST_TO_ADDR
// PlaceUnitArea ( CreateHumanWithClass ( 17 , skill ) , area , false ) ;
5165: LD_INT 17
5167: PPUSH
5168: LD_EXP 16
5172: PPUSH
5173: CALL 7323 0 2
5177: PPUSH
5178: LD_VAR 0 6
5182: PPUSH
5183: LD_INT 0
5185: PPUSH
5186: CALL_OW 49
// end ;
5190: GO 5154
5192: POP
5193: POP
// uc_nation := 2 ;
5194: LD_ADDR_OWVAR 21
5198: PUSH
5199: LD_INT 2
5201: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_manual ] ] ) < 2 then
5202: LD_INT 22
5204: PUSH
5205: LD_INT 2
5207: PUSH
5208: EMPTY
5209: LIST
5210: LIST
5211: PUSH
5212: LD_INT 33
5214: PUSH
5215: LD_INT 1
5217: PUSH
5218: EMPTY
5219: LIST
5220: LIST
5221: PUSH
5222: EMPTY
5223: LIST
5224: LIST
5225: PPUSH
5226: CALL_OW 69
5230: PUSH
5231: LD_INT 2
5233: LESS
5234: IFFALSE 5337
// for i = 1 to 2 do
5236: LD_ADDR_VAR 0 2
5240: PUSH
5241: DOUBLE
5242: LD_INT 1
5244: DEC
5245: ST_TO_ADDR
5246: LD_INT 2
5248: PUSH
5249: FOR_TO
5250: IFFALSE 5335
// begin vc_chassis := ar_half_tracked ;
5252: LD_ADDR_OWVAR 37
5256: PUSH
5257: LD_INT 14
5259: ST_TO_ADDR
// vc_engine := engine_siberite ;
5260: LD_ADDR_OWVAR 39
5264: PUSH
5265: LD_INT 3
5267: ST_TO_ADDR
// vc_control := control_manual ;
5268: LD_ADDR_OWVAR 38
5272: PUSH
5273: LD_INT 1
5275: ST_TO_ADDR
// vc_weapon := ar_control_tower ;
5276: LD_ADDR_OWVAR 40
5280: PUSH
5281: LD_INT 31
5283: ST_TO_ADDR
// un := CreateVehicle ;
5284: LD_ADDR_VAR 0 4
5288: PUSH
5289: CALL_OW 45
5293: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5294: LD_VAR 0 4
5298: PPUSH
5299: LD_VAR 0 6
5303: PPUSH
5304: LD_INT 0
5306: PPUSH
5307: CALL_OW 49
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , skill ) , un ) ;
5311: LD_INT 3
5313: PPUSH
5314: LD_EXP 16
5318: PPUSH
5319: CALL 7323 0 2
5323: PPUSH
5324: LD_VAR 0 4
5328: PPUSH
5329: CALL_OW 52
// end ;
5333: GO 5249
5335: POP
5336: POP
// end ; 33 :
5337: GO 6699
5339: LD_INT 33
5341: DOUBLE
5342: EQUAL
5343: IFTRUE 5347
5345: GO 5618
5347: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
5348: LD_ADDR_VAR 0 6
5352: PUSH
5353: LD_EXP 15
5357: PUSH
5358: LD_INT 1
5360: PPUSH
5361: LD_EXP 15
5365: PPUSH
5366: CALL_OW 12
5370: ARRAY
5371: ST_TO_ADDR
// uc_side := 2 ;
5372: LD_ADDR_OWVAR 20
5376: PUSH
5377: LD_INT 2
5379: ST_TO_ADDR
// uc_nation := 2 ;
5380: LD_ADDR_OWVAR 21
5384: PUSH
5385: LD_INT 2
5387: ST_TO_ADDR
// for i = 1 to ( arabian_force / 2 ) do
5388: LD_ADDR_VAR 0 2
5392: PUSH
5393: DOUBLE
5394: LD_INT 1
5396: DEC
5397: ST_TO_ADDR
5398: LD_EXP 20
5402: PUSH
5403: LD_INT 2
5405: DIVREAL
5406: PUSH
5407: FOR_TO
5408: IFFALSE 5513
// begin vc_chassis := ar_half_tracked ;
5410: LD_ADDR_OWVAR 37
5414: PUSH
5415: LD_INT 14
5417: ST_TO_ADDR
// vc_engine := engine_siberite ;
5418: LD_ADDR_OWVAR 39
5422: PUSH
5423: LD_INT 3
5425: ST_TO_ADDR
// vc_control := control_manual ;
5426: LD_ADDR_OWVAR 38
5430: PUSH
5431: LD_INT 1
5433: ST_TO_ADDR
// vc_weapon := ar_weapons [ Rand ( 1 , ar_weapons - 2 ) ] ;
5434: LD_ADDR_OWVAR 40
5438: PUSH
5439: LD_EXP 17
5443: PUSH
5444: LD_INT 1
5446: PPUSH
5447: LD_EXP 17
5451: PUSH
5452: LD_INT 2
5454: MINUS
5455: PPUSH
5456: CALL_OW 12
5460: ARRAY
5461: ST_TO_ADDR
// un := CreateVehicle ;
5462: LD_ADDR_VAR 0 4
5466: PUSH
5467: CALL_OW 45
5471: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5472: LD_VAR 0 4
5476: PPUSH
5477: LD_VAR 0 6
5481: PPUSH
5482: LD_INT 0
5484: PPUSH
5485: CALL_OW 49
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , skill ) , un ) ;
5489: LD_INT 3
5491: PPUSH
5492: LD_EXP 16
5496: PPUSH
5497: CALL 7323 0 2
5501: PPUSH
5502: LD_VAR 0 4
5506: PPUSH
5507: CALL_OW 52
// end ;
5511: GO 5407
5513: POP
5514: POP
// for i = 1 to ( arabian_force / 2 ) do
5515: LD_ADDR_VAR 0 2
5519: PUSH
5520: DOUBLE
5521: LD_INT 1
5523: DEC
5524: ST_TO_ADDR
5525: LD_EXP 20
5529: PUSH
5530: LD_INT 2
5532: DIVREAL
5533: PUSH
5534: FOR_TO
5535: IFFALSE 5614
// begin vc_chassis := ar_half_tracked ;
5537: LD_ADDR_OWVAR 37
5541: PUSH
5542: LD_INT 14
5544: ST_TO_ADDR
// vc_engine := engine_siberite ;
5545: LD_ADDR_OWVAR 39
5549: PUSH
5550: LD_INT 3
5552: ST_TO_ADDR
// vc_control := control_apeman ;
5553: LD_ADDR_OWVAR 38
5557: PUSH
5558: LD_INT 5
5560: ST_TO_ADDR
// vc_weapon := ar_weapons [ Rand ( 2 , ar_weapons ) ] ;
5561: LD_ADDR_OWVAR 40
5565: PUSH
5566: LD_EXP 17
5570: PUSH
5571: LD_INT 2
5573: PPUSH
5574: LD_EXP 17
5578: PPUSH
5579: CALL_OW 12
5583: ARRAY
5584: ST_TO_ADDR
// un := CreateVehicle ;
5585: LD_ADDR_VAR 0 4
5589: PUSH
5590: CALL_OW 45
5594: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5595: LD_VAR 0 4
5599: PPUSH
5600: LD_VAR 0 6
5604: PPUSH
5605: LD_INT 0
5607: PPUSH
5608: CALL_OW 49
// end ;
5612: GO 5534
5614: POP
5615: POP
// end ; 41 :
5616: GO 6699
5618: LD_INT 41
5620: DOUBLE
5621: EQUAL
5622: IFTRUE 5626
5624: GO 5770
5626: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
5627: LD_ADDR_VAR 0 6
5631: PUSH
5632: LD_EXP 15
5636: PUSH
5637: LD_INT 1
5639: PPUSH
5640: LD_EXP 15
5644: PPUSH
5645: CALL_OW 12
5649: ARRAY
5650: ST_TO_ADDR
// uc_side := 1 ;
5651: LD_ADDR_OWVAR 20
5655: PUSH
5656: LD_INT 1
5658: ST_TO_ADDR
// uc_nation := 1 ;
5659: LD_ADDR_OWVAR 21
5663: PUSH
5664: LD_INT 1
5666: ST_TO_ADDR
// for i = 1 to american_force do
5667: LD_ADDR_VAR 0 2
5671: PUSH
5672: DOUBLE
5673: LD_INT 1
5675: DEC
5676: ST_TO_ADDR
5677: LD_EXP 22
5681: PUSH
5682: FOR_TO
5683: IFFALSE 5766
// begin vc_chassis := us_morphling ;
5685: LD_ADDR_OWVAR 37
5689: PUSH
5690: LD_INT 5
5692: ST_TO_ADDR
// vc_engine := engine_siberite ;
5693: LD_ADDR_OWVAR 39
5697: PUSH
5698: LD_INT 3
5700: ST_TO_ADDR
// vc_control := control_computer ;
5701: LD_ADDR_OWVAR 38
5705: PUSH
5706: LD_INT 3
5708: ST_TO_ADDR
// vc_weapon := us_weapons [ Rand ( 1 , us_weapons - 1 ) ] ;
5709: LD_ADDR_OWVAR 40
5713: PUSH
5714: LD_EXP 19
5718: PUSH
5719: LD_INT 1
5721: PPUSH
5722: LD_EXP 19
5726: PUSH
5727: LD_INT 1
5729: MINUS
5730: PPUSH
5731: CALL_OW 12
5735: ARRAY
5736: ST_TO_ADDR
// un := CreateVehicle ;
5737: LD_ADDR_VAR 0 4
5741: PUSH
5742: CALL_OW 45
5746: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5747: LD_VAR 0 4
5751: PPUSH
5752: LD_VAR 0 6
5756: PPUSH
5757: LD_INT 0
5759: PPUSH
5760: CALL_OW 49
// end ;
5764: GO 5682
5766: POP
5767: POP
// end ; 42 :
5768: GO 6699
5770: LD_INT 42
5772: DOUBLE
5773: EQUAL
5774: IFTRUE 5778
5776: GO 5918
5778: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
5779: LD_ADDR_VAR 0 6
5783: PUSH
5784: LD_EXP 15
5788: PUSH
5789: LD_INT 1
5791: PPUSH
5792: LD_EXP 15
5796: PPUSH
5797: CALL_OW 12
5801: ARRAY
5802: ST_TO_ADDR
// uc_side := 1 ;
5803: LD_ADDR_OWVAR 20
5807: PUSH
5808: LD_INT 1
5810: ST_TO_ADDR
// uc_nation := 1 ;
5811: LD_ADDR_OWVAR 21
5815: PUSH
5816: LD_INT 1
5818: ST_TO_ADDR
// for i = 1 to american_force do
5819: LD_ADDR_VAR 0 2
5823: PUSH
5824: DOUBLE
5825: LD_INT 1
5827: DEC
5828: ST_TO_ADDR
5829: LD_EXP 22
5833: PUSH
5834: FOR_TO
5835: IFFALSE 5914
// begin vc_chassis := us_morphling ;
5837: LD_ADDR_OWVAR 37
5841: PUSH
5842: LD_INT 5
5844: ST_TO_ADDR
// vc_engine := engine_siberite ;
5845: LD_ADDR_OWVAR 39
5849: PUSH
5850: LD_INT 3
5852: ST_TO_ADDR
// vc_control := control_computer ;
5853: LD_ADDR_OWVAR 38
5857: PUSH
5858: LD_INT 3
5860: ST_TO_ADDR
// vc_weapon := us_weapons [ Rand ( 1 , us_weapons ) ] ;
5861: LD_ADDR_OWVAR 40
5865: PUSH
5866: LD_EXP 19
5870: PUSH
5871: LD_INT 1
5873: PPUSH
5874: LD_EXP 19
5878: PPUSH
5879: CALL_OW 12
5883: ARRAY
5884: ST_TO_ADDR
// un := CreateVehicle ;
5885: LD_ADDR_VAR 0 4
5889: PUSH
5890: CALL_OW 45
5894: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5895: LD_VAR 0 4
5899: PPUSH
5900: LD_VAR 0 6
5904: PPUSH
5905: LD_INT 0
5907: PPUSH
5908: CALL_OW 49
// end ;
5912: GO 5834
5914: POP
5915: POP
// end ; 51 :
5916: GO 6699
5918: LD_INT 51
5920: DOUBLE
5921: EQUAL
5922: IFTRUE 5926
5924: GO 6066
5926: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
5927: LD_ADDR_VAR 0 6
5931: PUSH
5932: LD_EXP 15
5936: PUSH
5937: LD_INT 1
5939: PPUSH
5940: LD_EXP 15
5944: PPUSH
5945: CALL_OW 12
5949: ARRAY
5950: ST_TO_ADDR
// uc_side := 3 ;
5951: LD_ADDR_OWVAR 20
5955: PUSH
5956: LD_INT 3
5958: ST_TO_ADDR
// uc_nation := 3 ;
5959: LD_ADDR_OWVAR 21
5963: PUSH
5964: LD_INT 3
5966: ST_TO_ADDR
// for i = 1 to russian_force do
5967: LD_ADDR_VAR 0 2
5971: PUSH
5972: DOUBLE
5973: LD_INT 1
5975: DEC
5976: ST_TO_ADDR
5977: LD_EXP 21
5981: PUSH
5982: FOR_TO
5983: IFFALSE 6062
// begin vc_chassis := ru_heavy_tracked ;
5985: LD_ADDR_OWVAR 37
5989: PUSH
5990: LD_INT 24
5992: ST_TO_ADDR
// vc_engine := engine_siberite ;
5993: LD_ADDR_OWVAR 39
5997: PUSH
5998: LD_INT 3
6000: ST_TO_ADDR
// vc_control := control_computer ;
6001: LD_ADDR_OWVAR 38
6005: PUSH
6006: LD_INT 3
6008: ST_TO_ADDR
// vc_weapon := ru_weapons [ Rand ( 1 , ru_weapons ) ] ;
6009: LD_ADDR_OWVAR 40
6013: PUSH
6014: LD_EXP 18
6018: PUSH
6019: LD_INT 1
6021: PPUSH
6022: LD_EXP 18
6026: PPUSH
6027: CALL_OW 12
6031: ARRAY
6032: ST_TO_ADDR
// un := CreateVehicle ;
6033: LD_ADDR_VAR 0 4
6037: PUSH
6038: CALL_OW 45
6042: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
6043: LD_VAR 0 4
6047: PPUSH
6048: LD_VAR 0 6
6052: PPUSH
6053: LD_INT 0
6055: PPUSH
6056: CALL_OW 49
// end ;
6060: GO 5982
6062: POP
6063: POP
// end ; 91 :
6064: GO 6699
6066: LD_INT 91
6068: DOUBLE
6069: EQUAL
6070: IFTRUE 6074
6072: GO 6212
6074: POP
// begin uc_side := 8 ;
6075: LD_ADDR_OWVAR 20
6079: PUSH
6080: LD_INT 8
6082: ST_TO_ADDR
// uc_nation := 1 ;
6083: LD_ADDR_OWVAR 21
6087: PUSH
6088: LD_INT 1
6090: ST_TO_ADDR
// for i = 1 to [ 4 , 3 , 3 ] [ game_difficulty ] do
6091: LD_ADDR_VAR 0 2
6095: PUSH
6096: DOUBLE
6097: LD_INT 1
6099: DEC
6100: ST_TO_ADDR
6101: LD_INT 4
6103: PUSH
6104: LD_INT 3
6106: PUSH
6107: LD_INT 3
6109: PUSH
6110: EMPTY
6111: LIST
6112: LIST
6113: LIST
6114: PUSH
6115: LD_EXP 2
6119: ARRAY
6120: PUSH
6121: FOR_TO
6122: IFFALSE 6208
// begin vc_chassis := us_heavy_tracked ;
6124: LD_ADDR_OWVAR 37
6128: PUSH
6129: LD_INT 4
6131: ST_TO_ADDR
// vc_engine := engine_siberite ;
6132: LD_ADDR_OWVAR 39
6136: PUSH
6137: LD_INT 3
6139: ST_TO_ADDR
// vc_control := control_computer ;
6140: LD_ADDR_OWVAR 38
6144: PUSH
6145: LD_INT 3
6147: ST_TO_ADDR
// vc_weapon := [ us_double_gun , us_heavy_gun ] [ Rand ( 1 , 2 ) ] ;
6148: LD_ADDR_OWVAR 40
6152: PUSH
6153: LD_INT 5
6155: PUSH
6156: LD_INT 6
6158: PUSH
6159: EMPTY
6160: LIST
6161: LIST
6162: PUSH
6163: LD_INT 1
6165: PPUSH
6166: LD_INT 2
6168: PPUSH
6169: CALL_OW 12
6173: ARRAY
6174: ST_TO_ADDR
// un := CreateVehicle ;
6175: LD_ADDR_VAR 0 4
6179: PUSH
6180: CALL_OW 45
6184: ST_TO_ADDR
// PlaceUnitArea ( un , areas [ 1 ] , false ) ;
6185: LD_VAR 0 4
6189: PPUSH
6190: LD_EXP 15
6194: PUSH
6195: LD_INT 1
6197: ARRAY
6198: PPUSH
6199: LD_INT 0
6201: PPUSH
6202: CALL_OW 49
// end ;
6206: GO 6121
6208: POP
6209: POP
// end ; 92 :
6210: GO 6699
6212: LD_INT 92
6214: DOUBLE
6215: EQUAL
6216: IFTRUE 6220
6218: GO 6549
6220: POP
// begin uc_side := 5 ;
6221: LD_ADDR_OWVAR 20
6225: PUSH
6226: LD_INT 5
6228: ST_TO_ADDR
// uc_nation := 2 ;
6229: LD_ADDR_OWVAR 21
6233: PUSH
6234: LD_INT 2
6236: ST_TO_ADDR
// filter := [ ] ;
6237: LD_ADDR_VAR 0 3
6241: PUSH
6242: EMPTY
6243: ST_TO_ADDR
// InitHc ;
6244: CALL_OW 19
// PrepareHuman ( false , 1 , l_skill ) ;
6248: LD_INT 0
6250: PPUSH
6251: LD_INT 1
6253: PPUSH
6254: LD_EXP 50
6258: PPUSH
6259: CALL_OW 380
// un := CreateHuman ;
6263: LD_ADDR_VAR 0 4
6267: PUSH
6268: CALL_OW 44
6272: ST_TO_ADDR
// filter := filter ^ un ;
6273: LD_ADDR_VAR 0 3
6277: PUSH
6278: LD_VAR 0 3
6282: PUSH
6283: LD_VAR 0 4
6287: ADD
6288: ST_TO_ADDR
// for i = 1 to [ 4 , 3 , 2 ] [ game_difficulty ] do
6289: LD_ADDR_VAR 0 2
6293: PUSH
6294: DOUBLE
6295: LD_INT 1
6297: DEC
6298: ST_TO_ADDR
6299: LD_INT 4
6301: PUSH
6302: LD_INT 3
6304: PUSH
6305: LD_INT 2
6307: PUSH
6308: EMPTY
6309: LIST
6310: LIST
6311: LIST
6312: PUSH
6313: LD_EXP 2
6317: ARRAY
6318: PUSH
6319: FOR_TO
6320: IFFALSE 6358
// begin un := CreateHumanWithClass ( 1 , l_skill ) ;
6322: LD_ADDR_VAR 0 4
6326: PUSH
6327: LD_INT 1
6329: PPUSH
6330: LD_EXP 50
6334: PPUSH
6335: CALL 7323 0 2
6339: ST_TO_ADDR
// filter := filter ^ un ;
6340: LD_ADDR_VAR 0 3
6344: PUSH
6345: LD_VAR 0 3
6349: PUSH
6350: LD_VAR 0 4
6354: ADD
6355: ST_TO_ADDR
// end ;
6356: GO 6319
6358: POP
6359: POP
// DialogueOn ;
6360: CALL_OW 6
// if GetSex ( filter [ 1 ] ) = sex_male then
6364: LD_VAR 0 3
6368: PUSH
6369: LD_INT 1
6371: ARRAY
6372: PPUSH
6373: CALL_OW 258
6377: PUSH
6378: LD_INT 1
6380: EQUAL
6381: IFFALSE 6401
// SayRadio ( filter [ 1 ] , DS-DF-1 ) else
6383: LD_VAR 0 3
6387: PUSH
6388: LD_INT 1
6390: ARRAY
6391: PPUSH
6392: LD_STRING DS-DF-1
6394: PPUSH
6395: CALL_OW 94
6399: GO 6417
// SayRadio ( filter [ 1 ] , DS-DF-f1 ) ;
6401: LD_VAR 0 3
6405: PUSH
6406: LD_INT 1
6408: ARRAY
6409: PPUSH
6410: LD_STRING DS-DF-f1
6412: PPUSH
6413: CALL_OW 94
// case Query ( DS-dezert ) of 1 :
6417: LD_STRING DS-dezert
6419: PPUSH
6420: CALL_OW 97
6424: PUSH
6425: LD_INT 1
6427: DOUBLE
6428: EQUAL
6429: IFTRUE 6433
6431: GO 6448
6433: POP
// Say ( l_cmndr , DS-DC-dis ) ; 2 :
6434: LD_EXP 49
6438: PPUSH
6439: LD_STRING DS-DC-dis
6441: PPUSH
6442: CALL_OW 88
6446: GO 6543
6448: LD_INT 2
6450: DOUBLE
6451: EQUAL
6452: IFTRUE 6456
6454: GO 6542
6456: POP
// begin Say ( l_cmndr , DS-DC-acp ) ;
6457: LD_EXP 49
6461: PPUSH
6462: LD_STRING DS-DC-acp
6464: PPUSH
6465: CALL_OW 88
// for i = 1 to filter do
6469: LD_ADDR_VAR 0 2
6473: PUSH
6474: DOUBLE
6475: LD_INT 1
6477: DEC
6478: ST_TO_ADDR
6479: LD_VAR 0 3
6483: PUSH
6484: FOR_TO
6485: IFFALSE 6538
// begin SetSide ( filter [ i ] , 8 ) ;
6487: LD_VAR 0 3
6491: PUSH
6492: LD_VAR 0 2
6496: ARRAY
6497: PPUSH
6498: LD_INT 8
6500: PPUSH
6501: CALL_OW 235
// PlaceUnitArea ( filter [ i ] , south_spawn , false ) ;
6505: LD_VAR 0 3
6509: PUSH
6510: LD_VAR 0 2
6514: ARRAY
6515: PPUSH
6516: LD_INT 4
6518: PPUSH
6519: LD_INT 0
6521: PPUSH
6522: CALL_OW 49
// CenterNowOnXY ( 111 , 121 ) ;
6526: LD_INT 111
6528: PPUSH
6529: LD_INT 121
6531: PPUSH
6532: CALL_OW 86
// end ;
6536: GO 6484
6538: POP
6539: POP
// end ; end ;
6540: GO 6543
6542: POP
// DialogueOff ;
6543: CALL_OW 7
// end ; 101 :
6547: GO 6699
6549: LD_INT 101
6551: DOUBLE
6552: EQUAL
6553: IFTRUE 6557
6555: GO 6609
6557: POP
// begin CreateCratesArea ( Rand ( 3 , 5 ) , crates_area , true ) ;
6558: LD_INT 3
6560: PPUSH
6561: LD_INT 5
6563: PPUSH
6564: CALL_OW 12
6568: PPUSH
6569: LD_INT 9
6571: PPUSH
6572: LD_INT 1
6574: PPUSH
6575: CALL_OW 55
// Wait ( 0 0$11 ) ;
6579: LD_INT 385
6581: PPUSH
6582: CALL_OW 67
// CreateCratesArea ( Rand ( 3 , 5 ) , crates_area , true ) ;
6586: LD_INT 3
6588: PPUSH
6589: LD_INT 5
6591: PPUSH
6592: CALL_OW 12
6596: PPUSH
6597: LD_INT 9
6599: PPUSH
6600: LD_INT 1
6602: PPUSH
6603: CALL_OW 55
// end ; 200 :
6607: GO 6699
6609: LD_INT 200
6611: DOUBLE
6612: EQUAL
6613: IFTRUE 6617
6615: GO 6698
6617: POP
// begin Say ( Leopold , DS-end ) ;
6618: LD_EXP 7
6622: PPUSH
6623: LD_STRING DS-end
6625: PPUSH
6626: CALL_OW 88
// if Difficulty = 3 then
6630: LD_OWVAR 67
6634: PUSH
6635: LD_INT 3
6637: EQUAL
6638: IFFALSE 6647
// SetAchievement ( ACH_DESERT ) ;
6640: LD_STRING ACH_DESERT
6642: PPUSH
6643: CALL_OW 543
// music_nat := 5 ;
6647: LD_ADDR_OWVAR 71
6651: PUSH
6652: LD_INT 5
6654: ST_TO_ADDR
// AddMedal ( med , 1 ) ;
6655: LD_STRING med
6657: PPUSH
6658: LD_INT 1
6660: PPUSH
6661: CALL_OW 101
// AddMedal ( med , 1 ) ;
6665: LD_STRING med
6667: PPUSH
6668: LD_INT 1
6670: PPUSH
6671: CALL_OW 101
// AddMedal ( med , 1 ) ;
6675: LD_STRING med
6677: PPUSH
6678: LD_INT 1
6680: PPUSH
6681: CALL_OW 101
// GiveMedals ( MAIN ) ;
6685: LD_STRING MAIN
6687: PPUSH
6688: CALL_OW 102
// YouWin ;
6692: CALL_OW 103
// end ; end ;
6696: GO 6699
6698: POP
// end ;
6699: PPOPN 6
6701: END
// on UnitGoesToRed ( un ) do begin if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) then
6702: LD_VAR 0 1
6706: PUSH
6707: LD_INT 22
6709: PUSH
6710: LD_INT 2
6712: PUSH
6713: EMPTY
6714: LIST
6715: LIST
6716: PUSH
6717: LD_INT 21
6719: PUSH
6720: LD_INT 2
6722: PUSH
6723: EMPTY
6724: LIST
6725: LIST
6726: PUSH
6727: EMPTY
6728: LIST
6729: LIST
6730: PPUSH
6731: CALL_OW 69
6735: IN
6736: IFFALSE 6861
// begin Wait ( Rand ( 0 0$03 , 0 0$06 ) ) ;
6738: LD_INT 105
6740: PPUSH
6741: LD_INT 210
6743: PPUSH
6744: CALL_OW 12
6748: PPUSH
6749: CALL_OW 67
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
6753: LD_VAR 0 1
6757: PPUSH
6758: CALL_OW 250
6762: PPUSH
6763: LD_VAR 0 1
6767: PPUSH
6768: CALL_OW 251
6772: PPUSH
6773: LD_INT 3
6775: PPUSH
6776: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
6780: LD_VAR 0 1
6784: PPUSH
6785: CALL_OW 250
6789: PPUSH
6790: LD_VAR 0 1
6794: PPUSH
6795: CALL_OW 251
6799: PPUSH
6800: LD_INT 3
6802: PPUSH
6803: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
6807: LD_VAR 0 1
6811: PPUSH
6812: CALL_OW 250
6816: PPUSH
6817: LD_VAR 0 1
6821: PPUSH
6822: CALL_OW 251
6826: PPUSH
6827: LD_INT 3
6829: PPUSH
6830: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
6834: LD_VAR 0 1
6838: PPUSH
6839: CALL_OW 250
6843: PPUSH
6844: LD_VAR 0 1
6848: PPUSH
6849: CALL_OW 251
6853: PPUSH
6854: LD_INT 3
6856: PPUSH
6857: CALL_OW 453
// end ; end ;
6861: PPOPN 1
6863: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
6864: LD_VAR 0 1
6868: PPUSH
6869: CALL 24435 0 1
// if un = fort then
6873: LD_VAR 0 1
6877: PUSH
6878: LD_INT 23
6880: EQUAL
6881: IFFALSE 6891
// fort_destroyed := true ;
6883: LD_ADDR_EXP 32
6887: PUSH
6888: LD_INT 1
6890: ST_TO_ADDR
// if un = l_cmndr then
6891: LD_VAR 0 1
6895: PUSH
6896: LD_EXP 49
6900: EQUAL
6901: IFFALSE 6911
// hero_died := true ;
6903: LD_ADDR_EXP 33
6907: PUSH
6908: LD_INT 1
6910: ST_TO_ADDR
// end ;
6911: PPOPN 1
6913: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin debug_strings := un ;
6914: LD_ADDR_OWVAR 48
6918: PUSH
6919: LD_VAR 0 1
6923: ST_TO_ADDR
// SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
6924: LD_VAR 0 1
6928: PPUSH
6929: LD_VAR 0 2
6933: PPUSH
6934: LD_VAR 0 3
6938: PPUSH
6939: CALL 24531 0 3
// end ;
6943: PPOPN 3
6945: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
6946: LD_VAR 0 1
6950: PPUSH
6951: CALL 24539 0 1
// end ;
6955: PPOPN 1
6957: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
6958: LD_VAR 0 1
6962: PPUSH
6963: LD_VAR 0 2
6967: PPUSH
6968: CALL 24555 0 2
// end ; end_of_file
6972: PPOPN 2
6974: END
// export function RefreshTime ( time , bool ) ; begin
6975: LD_INT 0
6977: PPUSH
// if bool then
6978: LD_VAR 0 2
6982: IFFALSE 7000
// time := time + 0 0$01 else
6984: LD_ADDR_VAR 0 1
6988: PUSH
6989: LD_VAR 0 1
6993: PUSH
6994: LD_INT 35
6996: PLUS
6997: ST_TO_ADDR
6998: GO 7014
// time := time - 0 0$01 ;
7000: LD_ADDR_VAR 0 1
7004: PUSH
7005: LD_VAR 0 1
7009: PUSH
7010: LD_INT 35
7012: MINUS
7013: ST_TO_ADDR
// result := time ;
7014: LD_ADDR_VAR 0 3
7018: PUSH
7019: LD_VAR 0 1
7023: ST_TO_ADDR
// end ;
7024: LD_VAR 0 3
7028: RET
// export function MineExist ( side ) ; begin
7029: LD_INT 0
7031: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_siberite_mine ] ] ) > 0 then
7032: LD_INT 22
7034: PUSH
7035: LD_VAR 0 1
7039: PUSH
7040: EMPTY
7041: LIST
7042: LIST
7043: PUSH
7044: LD_INT 30
7046: PUSH
7047: LD_INT 30
7049: PUSH
7050: EMPTY
7051: LIST
7052: LIST
7053: PUSH
7054: EMPTY
7055: LIST
7056: LIST
7057: PPUSH
7058: CALL_OW 69
7062: PUSH
7063: LD_INT 0
7065: GREATER
7066: IFFALSE 7078
// result := true else
7068: LD_ADDR_VAR 0 2
7072: PUSH
7073: LD_INT 1
7075: ST_TO_ADDR
7076: GO 7086
// result := false ;
7078: LD_ADDR_VAR 0 2
7082: PUSH
7083: LD_INT 0
7085: ST_TO_ADDR
// end ;
7086: LD_VAR 0 2
7090: RET
// export function FacExist ( side ) ; begin
7091: LD_INT 0
7093: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_factory ] ] ) > 0 ;
7094: LD_ADDR_VAR 0 2
7098: PUSH
7099: LD_INT 22
7101: PUSH
7102: LD_VAR 0 1
7106: PUSH
7107: EMPTY
7108: LIST
7109: LIST
7110: PUSH
7111: LD_INT 30
7113: PUSH
7114: LD_INT 3
7116: PUSH
7117: EMPTY
7118: LIST
7119: LIST
7120: PUSH
7121: EMPTY
7122: LIST
7123: LIST
7124: PPUSH
7125: CALL_OW 69
7129: PUSH
7130: LD_INT 0
7132: GREATER
7133: ST_TO_ADDR
// end ;
7134: LD_VAR 0 2
7138: RET
// export function ConnectWithTower ( side ) ; var i , filter , tower ; begin
7139: LD_INT 0
7141: PPUSH
7142: PPUSH
7143: PPUSH
7144: PPUSH
// filter := FilterAllUnits ( [ [ f_side , side ] , [ f_control , control_remote ] , [ f_ok ] ] ) ;
7145: LD_ADDR_VAR 0 4
7149: PUSH
7150: LD_INT 22
7152: PUSH
7153: LD_VAR 0 1
7157: PUSH
7158: EMPTY
7159: LIST
7160: LIST
7161: PUSH
7162: LD_INT 33
7164: PUSH
7165: LD_INT 2
7167: PUSH
7168: EMPTY
7169: LIST
7170: LIST
7171: PUSH
7172: LD_INT 50
7174: PUSH
7175: EMPTY
7176: LIST
7177: PUSH
7178: EMPTY
7179: LIST
7180: LIST
7181: LIST
7182: PPUSH
7183: CALL_OW 69
7187: ST_TO_ADDR
// tower := FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , ar_control_tower ] ] ) ;
7188: LD_ADDR_VAR 0 5
7192: PUSH
7193: LD_INT 22
7195: PUSH
7196: LD_VAR 0 1
7200: PUSH
7201: EMPTY
7202: LIST
7203: LIST
7204: PUSH
7205: LD_INT 34
7207: PUSH
7208: LD_INT 31
7210: PUSH
7211: EMPTY
7212: LIST
7213: LIST
7214: PUSH
7215: EMPTY
7216: LIST
7217: LIST
7218: PPUSH
7219: CALL_OW 69
7223: ST_TO_ADDR
// if tower > 0 and filter > 0 then
7224: LD_VAR 0 5
7228: PUSH
7229: LD_INT 0
7231: GREATER
7232: PUSH
7233: LD_VAR 0 4
7237: PUSH
7238: LD_INT 0
7240: GREATER
7241: AND
7242: IFFALSE 7318
// for i = 1 to filter do
7244: LD_ADDR_VAR 0 3
7248: PUSH
7249: DOUBLE
7250: LD_INT 1
7252: DEC
7253: ST_TO_ADDR
7254: LD_VAR 0 4
7258: PUSH
7259: FOR_TO
7260: IFFALSE 7316
// if not IsControledBy ( filter [ i ] ) then
7262: LD_VAR 0 4
7266: PUSH
7267: LD_VAR 0 3
7271: ARRAY
7272: PPUSH
7273: CALL_OW 312
7277: NOT
7278: IFFALSE 7314
// ComLinkTo ( filter [ i ] , tower [ Rand ( 1 , tower ) ] ) ;
7280: LD_VAR 0 4
7284: PUSH
7285: LD_VAR 0 3
7289: ARRAY
7290: PPUSH
7291: LD_VAR 0 5
7295: PUSH
7296: LD_INT 1
7298: PPUSH
7299: LD_VAR 0 5
7303: PPUSH
7304: CALL_OW 12
7308: ARRAY
7309: PPUSH
7310: CALL_OW 135
7314: GO 7259
7316: POP
7317: POP
// end ;
7318: LD_VAR 0 2
7322: RET
// export function CreateHumanWithClass ( clas , lvl ) ; var skill_com , skill_eng , skill_mech , skill_sci , bonus ; begin
7323: LD_INT 0
7325: PPUSH
7326: PPUSH
7327: PPUSH
7328: PPUSH
7329: PPUSH
7330: PPUSH
// hc_class := clas ;
7331: LD_ADDR_OWVAR 28
7335: PUSH
7336: LD_VAR 0 1
7340: ST_TO_ADDR
// skill_com := ( lvl + Rand ( - 1 , 1 ) ) ;
7341: LD_ADDR_VAR 0 4
7345: PUSH
7346: LD_VAR 0 2
7350: PUSH
7351: LD_INT 1
7353: NEG
7354: PPUSH
7355: LD_INT 1
7357: PPUSH
7358: CALL_OW 12
7362: PLUS
7363: ST_TO_ADDR
// skill_eng := ( lvl + Rand ( - 1 , 1 ) ) ;
7364: LD_ADDR_VAR 0 5
7368: PUSH
7369: LD_VAR 0 2
7373: PUSH
7374: LD_INT 1
7376: NEG
7377: PPUSH
7378: LD_INT 1
7380: PPUSH
7381: CALL_OW 12
7385: PLUS
7386: ST_TO_ADDR
// skill_mech := ( lvl + Rand ( - 1 , 1 ) ) ;
7387: LD_ADDR_VAR 0 6
7391: PUSH
7392: LD_VAR 0 2
7396: PUSH
7397: LD_INT 1
7399: NEG
7400: PPUSH
7401: LD_INT 1
7403: PPUSH
7404: CALL_OW 12
7408: PLUS
7409: ST_TO_ADDR
// skill_sci := ( lvl + Rand ( - 1 , 1 ) ) ;
7410: LD_ADDR_VAR 0 7
7414: PUSH
7415: LD_VAR 0 2
7419: PUSH
7420: LD_INT 1
7422: NEG
7423: PPUSH
7424: LD_INT 1
7426: PPUSH
7427: CALL_OW 12
7431: PLUS
7432: ST_TO_ADDR
// if clas = 1 or clas = 9 or clas = class_sniper or clas = class_mortar then
7433: LD_VAR 0 1
7437: PUSH
7438: LD_INT 1
7440: EQUAL
7441: PUSH
7442: LD_VAR 0 1
7446: PUSH
7447: LD_INT 9
7449: EQUAL
7450: OR
7451: PUSH
7452: LD_VAR 0 1
7456: PUSH
7457: LD_INT 5
7459: EQUAL
7460: OR
7461: PUSH
7462: LD_VAR 0 1
7466: PUSH
7467: LD_INT 8
7469: EQUAL
7470: OR
7471: IFFALSE 7496
// bonus := [ 2 , 0 , 0 , 0 ] ;
7473: LD_ADDR_VAR 0 8
7477: PUSH
7478: LD_INT 2
7480: PUSH
7481: LD_INT 0
7483: PUSH
7484: LD_INT 0
7486: PUSH
7487: LD_INT 0
7489: PUSH
7490: EMPTY
7491: LIST
7492: LIST
7493: LIST
7494: LIST
7495: ST_TO_ADDR
// if clas = 2 then
7496: LD_VAR 0 1
7500: PUSH
7501: LD_INT 2
7503: EQUAL
7504: IFFALSE 7529
// bonus := [ 0 , 2 , 0 , 0 ] ;
7506: LD_ADDR_VAR 0 8
7510: PUSH
7511: LD_INT 0
7513: PUSH
7514: LD_INT 2
7516: PUSH
7517: LD_INT 0
7519: PUSH
7520: LD_INT 0
7522: PUSH
7523: EMPTY
7524: LIST
7525: LIST
7526: LIST
7527: LIST
7528: ST_TO_ADDR
// if clas = 3 then
7529: LD_VAR 0 1
7533: PUSH
7534: LD_INT 3
7536: EQUAL
7537: IFFALSE 7562
// bonus := [ 0 , 0 , 2 , 0 ] ;
7539: LD_ADDR_VAR 0 8
7543: PUSH
7544: LD_INT 0
7546: PUSH
7547: LD_INT 0
7549: PUSH
7550: LD_INT 2
7552: PUSH
7553: LD_INT 0
7555: PUSH
7556: EMPTY
7557: LIST
7558: LIST
7559: LIST
7560: LIST
7561: ST_TO_ADDR
// if clas = 4 then
7562: LD_VAR 0 1
7566: PUSH
7567: LD_INT 4
7569: EQUAL
7570: IFFALSE 7595
// bonus := [ 0 , 0 , 0 , 2 ] ;
7572: LD_ADDR_VAR 0 8
7576: PUSH
7577: LD_INT 0
7579: PUSH
7580: LD_INT 0
7582: PUSH
7583: LD_INT 0
7585: PUSH
7586: LD_INT 2
7588: PUSH
7589: EMPTY
7590: LIST
7591: LIST
7592: LIST
7593: LIST
7594: ST_TO_ADDR
// if clas > 4 and clas <> 9 and clas <> class_sniper and clas <> class_mortar then
7595: LD_VAR 0 1
7599: PUSH
7600: LD_INT 4
7602: GREATER
7603: PUSH
7604: LD_VAR 0 1
7608: PUSH
7609: LD_INT 9
7611: NONEQUAL
7612: AND
7613: PUSH
7614: LD_VAR 0 1
7618: PUSH
7619: LD_INT 5
7621: NONEQUAL
7622: AND
7623: PUSH
7624: LD_VAR 0 1
7628: PUSH
7629: LD_INT 8
7631: NONEQUAL
7632: AND
7633: IFFALSE 7658
// bonus := [ 0 , 0 , 0 , 0 ] ;
7635: LD_ADDR_VAR 0 8
7639: PUSH
7640: LD_INT 0
7642: PUSH
7643: LD_INT 0
7645: PUSH
7646: LD_INT 0
7648: PUSH
7649: LD_INT 0
7651: PUSH
7652: EMPTY
7653: LIST
7654: LIST
7655: LIST
7656: LIST
7657: ST_TO_ADDR
// hc_basic_skills := [ Rand ( 0 , 2 ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) ] ;
7658: LD_ADDR_OWVAR 30
7662: PUSH
7663: LD_INT 0
7665: PPUSH
7666: LD_INT 2
7668: PPUSH
7669: CALL_OW 12
7673: PUSH
7674: LD_INT 0
7676: PPUSH
7677: LD_INT 2
7679: PPUSH
7680: CALL_OW 12
7684: PUSH
7685: LD_INT 0
7687: PPUSH
7688: LD_INT 2
7690: PPUSH
7691: CALL_OW 12
7695: PUSH
7696: LD_INT 0
7698: PPUSH
7699: LD_INT 2
7701: PPUSH
7702: CALL_OW 12
7706: PUSH
7707: EMPTY
7708: LIST
7709: LIST
7710: LIST
7711: LIST
7712: ST_TO_ADDR
// hc_skills := [ skill_com + bonus [ 1 ] , skill_eng + bonus [ 2 ] , skill_mech + bonus [ 3 ] , skill_sci + bonus [ 4 ] ] ;
7713: LD_ADDR_OWVAR 31
7717: PUSH
7718: LD_VAR 0 4
7722: PUSH
7723: LD_VAR 0 8
7727: PUSH
7728: LD_INT 1
7730: ARRAY
7731: PLUS
7732: PUSH
7733: LD_VAR 0 5
7737: PUSH
7738: LD_VAR 0 8
7742: PUSH
7743: LD_INT 2
7745: ARRAY
7746: PLUS
7747: PUSH
7748: LD_VAR 0 6
7752: PUSH
7753: LD_VAR 0 8
7757: PUSH
7758: LD_INT 3
7760: ARRAY
7761: PLUS
7762: PUSH
7763: LD_VAR 0 7
7767: PUSH
7768: LD_VAR 0 8
7772: PUSH
7773: LD_INT 4
7775: ARRAY
7776: PLUS
7777: PUSH
7778: EMPTY
7779: LIST
7780: LIST
7781: LIST
7782: LIST
7783: ST_TO_ADDR
// hc_sex := Rand ( sex_male , sex_female ) ;
7784: LD_ADDR_OWVAR 27
7788: PUSH
7789: LD_INT 1
7791: PPUSH
7792: LD_INT 2
7794: PPUSH
7795: CALL_OW 12
7799: ST_TO_ADDR
// hc_gallery :=  ;
7800: LD_ADDR_OWVAR 33
7804: PUSH
7805: LD_STRING 
7807: ST_TO_ADDR
// hc_attr := [ Rand ( 8 , 12 ) , Rand ( 9 , 11 ) ] ;
7808: LD_ADDR_OWVAR 29
7812: PUSH
7813: LD_INT 8
7815: PPUSH
7816: LD_INT 12
7818: PPUSH
7819: CALL_OW 12
7823: PUSH
7824: LD_INT 9
7826: PPUSH
7827: LD_INT 11
7829: PPUSH
7830: CALL_OW 12
7834: PUSH
7835: EMPTY
7836: LIST
7837: LIST
7838: ST_TO_ADDR
// hc_name :=  ;
7839: LD_ADDR_OWVAR 26
7843: PUSH
7844: LD_STRING 
7846: ST_TO_ADDR
// result := CreateHuman ;
7847: LD_ADDR_VAR 0 3
7851: PUSH
7852: CALL_OW 44
7856: ST_TO_ADDR
// end ;
7857: LD_VAR 0 3
7861: RET
// export function GetSpeed ( unit ) ; begin
7862: LD_INT 0
7864: PPUSH
// result := GetProperties ( unit ) [ 1 ] ;
7865: LD_ADDR_VAR 0 2
7869: PUSH
7870: LD_VAR 0 1
7874: PPUSH
7875: CALL_OW 464
7879: PUSH
7880: LD_INT 1
7882: ARRAY
7883: ST_TO_ADDR
// end ;
7884: LD_VAR 0 2
7888: RET
// export function CreateNature ( area , num1 , num2 , num3 , num4 ) ; var l , apeman , tiger , bird , horse ; begin
7889: LD_INT 0
7891: PPUSH
7892: PPUSH
7893: PPUSH
7894: PPUSH
7895: PPUSH
7896: PPUSH
// uc_nation = nation_nature ;
7897: LD_ADDR_OWVAR 21
7901: PUSH
7902: LD_INT 0
7904: ST_TO_ADDR
// uc_side = 0 ;
7905: LD_ADDR_OWVAR 20
7909: PUSH
7910: LD_INT 0
7912: ST_TO_ADDR
// l = 0 ;
7913: LD_ADDR_VAR 0 7
7917: PUSH
7918: LD_INT 0
7920: ST_TO_ADDR
// repeat begin uc_direction = Rand ( 0 , 5 ) ;
7921: LD_ADDR_OWVAR 24
7925: PUSH
7926: LD_INT 0
7928: PPUSH
7929: LD_INT 5
7931: PPUSH
7932: CALL_OW 12
7936: ST_TO_ADDR
// hc_agressivity = Rand ( - 5 , 0 ) ;
7937: LD_ADDR_OWVAR 35
7941: PUSH
7942: LD_INT 5
7944: NEG
7945: PPUSH
7946: LD_INT 0
7948: PPUSH
7949: CALL_OW 12
7953: ST_TO_ADDR
// hc_gallery =  ;
7954: LD_ADDR_OWVAR 33
7958: PUSH
7959: LD_STRING 
7961: ST_TO_ADDR
// hc_class = class_apeman ;
7962: LD_ADDR_OWVAR 28
7966: PUSH
7967: LD_INT 12
7969: ST_TO_ADDR
// hc_attr = [ Rand ( 11 , 13 ) , Rand ( 10 , 11 ) ] ;
7970: LD_ADDR_OWVAR 29
7974: PUSH
7975: LD_INT 11
7977: PPUSH
7978: LD_INT 13
7980: PPUSH
7981: CALL_OW 12
7985: PUSH
7986: LD_INT 10
7988: PPUSH
7989: LD_INT 11
7991: PPUSH
7992: CALL_OW 12
7996: PUSH
7997: EMPTY
7998: LIST
7999: LIST
8000: ST_TO_ADDR
// hc_sex = sex_male ;
8001: LD_ADDR_OWVAR 27
8005: PUSH
8006: LD_INT 1
8008: ST_TO_ADDR
// hc_skills = [ Rand ( 0 , 2 ) , 0 , 0 , 0 ] ;
8009: LD_ADDR_OWVAR 31
8013: PUSH
8014: LD_INT 0
8016: PPUSH
8017: LD_INT 2
8019: PPUSH
8020: CALL_OW 12
8024: PUSH
8025: LD_INT 0
8027: PUSH
8028: LD_INT 0
8030: PUSH
8031: LD_INT 0
8033: PUSH
8034: EMPTY
8035: LIST
8036: LIST
8037: LIST
8038: LIST
8039: ST_TO_ADDR
// apeman = CreateHuman ;
8040: LD_ADDR_VAR 0 8
8044: PUSH
8045: CALL_OW 44
8049: ST_TO_ADDR
// PlaceUnitArea ( apeman , area , false ) ;
8050: LD_VAR 0 8
8054: PPUSH
8055: LD_VAR 0 1
8059: PPUSH
8060: LD_INT 0
8062: PPUSH
8063: CALL_OW 49
// l = l + 1 ;
8067: LD_ADDR_VAR 0 7
8071: PUSH
8072: LD_VAR 0 7
8076: PUSH
8077: LD_INT 1
8079: PLUS
8080: ST_TO_ADDR
// end until l = num1 ;
8081: LD_VAR 0 7
8085: PUSH
8086: LD_VAR 0 2
8090: EQUAL
8091: IFFALSE 7921
// l = 0 ;
8093: LD_ADDR_VAR 0 7
8097: PUSH
8098: LD_INT 0
8100: ST_TO_ADDR
// repeat begin hc_agressivity = Rand ( 0 , 25 ) ;
8101: LD_ADDR_OWVAR 35
8105: PUSH
8106: LD_INT 0
8108: PPUSH
8109: LD_INT 25
8111: PPUSH
8112: CALL_OW 12
8116: ST_TO_ADDR
// hc_class = class_tiger ;
8117: LD_ADDR_OWVAR 28
8121: PUSH
8122: LD_INT 14
8124: ST_TO_ADDR
// hc_sex = sex_male ;
8125: LD_ADDR_OWVAR 27
8129: PUSH
8130: LD_INT 1
8132: ST_TO_ADDR
// hc_gallery = sandnature ;
8133: LD_ADDR_OWVAR 33
8137: PUSH
8138: LD_STRING sandnature
8140: ST_TO_ADDR
// hc_face_number = 3 ;
8141: LD_ADDR_OWVAR 34
8145: PUSH
8146: LD_INT 3
8148: ST_TO_ADDR
// tiger = CreateHuman ;
8149: LD_ADDR_VAR 0 9
8153: PUSH
8154: CALL_OW 44
8158: ST_TO_ADDR
// PlaceUnitArea ( tiger , area , false ) ;
8159: LD_VAR 0 9
8163: PPUSH
8164: LD_VAR 0 1
8168: PPUSH
8169: LD_INT 0
8171: PPUSH
8172: CALL_OW 49
// l = l + 1 ;
8176: LD_ADDR_VAR 0 7
8180: PUSH
8181: LD_VAR 0 7
8185: PUSH
8186: LD_INT 1
8188: PLUS
8189: ST_TO_ADDR
// end until l = num2 ;
8190: LD_VAR 0 7
8194: PUSH
8195: LD_VAR 0 3
8199: EQUAL
8200: IFFALSE 8101
// l = 0 ;
8202: LD_ADDR_VAR 0 7
8206: PUSH
8207: LD_INT 0
8209: ST_TO_ADDR
// repeat begin hc_class = class_phororhacos ;
8210: LD_ADDR_OWVAR 28
8214: PUSH
8215: LD_INT 18
8217: ST_TO_ADDR
// hc_gallery = sandnature ;
8218: LD_ADDR_OWVAR 33
8222: PUSH
8223: LD_STRING sandnature
8225: ST_TO_ADDR
// hc_face_number = 1 ;
8226: LD_ADDR_OWVAR 34
8230: PUSH
8231: LD_INT 1
8233: ST_TO_ADDR
// bird = CreateHuman ;
8234: LD_ADDR_VAR 0 10
8238: PUSH
8239: CALL_OW 44
8243: ST_TO_ADDR
// PlaceUnitAnywhere ( bird , false ) ;
8244: LD_VAR 0 10
8248: PPUSH
8249: LD_INT 0
8251: PPUSH
8252: CALL_OW 51
// l = l + 1 ;
8256: LD_ADDR_VAR 0 7
8260: PUSH
8261: LD_VAR 0 7
8265: PUSH
8266: LD_INT 1
8268: PLUS
8269: ST_TO_ADDR
// end until l = num3 ;
8270: LD_VAR 0 7
8274: PUSH
8275: LD_VAR 0 4
8279: EQUAL
8280: IFFALSE 8210
// l = 0 ;
8282: LD_ADDR_VAR 0 7
8286: PUSH
8287: LD_INT 0
8289: ST_TO_ADDR
// repeat begin hc_class = 21 ;
8290: LD_ADDR_OWVAR 28
8294: PUSH
8295: LD_INT 21
8297: ST_TO_ADDR
// hc_gallery = sandnature ;
8298: LD_ADDR_OWVAR 33
8302: PUSH
8303: LD_STRING sandnature
8305: ST_TO_ADDR
// hc_face_number = 5 ;
8306: LD_ADDR_OWVAR 34
8310: PUSH
8311: LD_INT 5
8313: ST_TO_ADDR
// horse := CreateHuman ;
8314: LD_ADDR_VAR 0 11
8318: PUSH
8319: CALL_OW 44
8323: ST_TO_ADDR
// PlaceUnitArea ( horse , area , false ) ;
8324: LD_VAR 0 11
8328: PPUSH
8329: LD_VAR 0 1
8333: PPUSH
8334: LD_INT 0
8336: PPUSH
8337: CALL_OW 49
// l = l + 1 ;
8341: LD_ADDR_VAR 0 7
8345: PUSH
8346: LD_VAR 0 7
8350: PUSH
8351: LD_INT 1
8353: PLUS
8354: ST_TO_ADDR
// end until l = num4 ;
8355: LD_VAR 0 7
8359: PUSH
8360: LD_VAR 0 5
8364: EQUAL
8365: IFFALSE 8290
// end ;
8367: LD_VAR 0 6
8371: RET
// export function PrepareComm ; begin
8372: LD_INT 0
8374: PPUSH
// uc_side := 1 ;
8375: LD_ADDR_OWVAR 20
8379: PUSH
8380: LD_INT 1
8382: ST_TO_ADDR
// uc_nation := 1 ;
8383: LD_ADDR_OWVAR 21
8387: PUSH
8388: LD_INT 1
8390: ST_TO_ADDR
// hc_gallery :=  ;
8391: LD_ADDR_OWVAR 33
8395: PUSH
8396: LD_STRING 
8398: ST_TO_ADDR
// hc_name :=  ;
8399: LD_ADDR_OWVAR 26
8403: PUSH
8404: LD_STRING 
8406: ST_TO_ADDR
// hc_class := 1 ;
8407: LD_ADDR_OWVAR 28
8411: PUSH
8412: LD_INT 1
8414: ST_TO_ADDR
// hc_sex := sex_male ;
8415: LD_ADDR_OWVAR 27
8419: PUSH
8420: LD_INT 1
8422: ST_TO_ADDR
// am_comander := CreateHuman ;
8423: LD_ADDR_EXP 46
8427: PUSH
8428: CALL_OW 44
8432: ST_TO_ADDR
// uc_side := 3 ;
8433: LD_ADDR_OWVAR 20
8437: PUSH
8438: LD_INT 3
8440: ST_TO_ADDR
// uc_nation := 3 ;
8441: LD_ADDR_OWVAR 21
8445: PUSH
8446: LD_INT 3
8448: ST_TO_ADDR
// ru_comander := CreateHuman ;
8449: LD_ADDR_EXP 47
8453: PUSH
8454: CALL_OW 44
8458: ST_TO_ADDR
// uc_side := 2 ;
8459: LD_ADDR_OWVAR 20
8463: PUSH
8464: LD_INT 2
8466: ST_TO_ADDR
// uc_nation := 2 ;
8467: LD_ADDR_OWVAR 21
8471: PUSH
8472: LD_INT 2
8474: ST_TO_ADDR
// hc_name := Heike Steyer ;
8475: LD_ADDR_OWVAR 26
8479: PUSH
8480: LD_STRING Heike Steyer
8482: ST_TO_ADDR
// hc_sex := sex_female ;
8483: LD_ADDR_OWVAR 27
8487: PUSH
8488: LD_INT 2
8490: ST_TO_ADDR
// hc_gallery := sandar ;
8491: LD_ADDR_OWVAR 33
8495: PUSH
8496: LD_STRING sandar
8498: ST_TO_ADDR
// hc_face_number := 14 ;
8499: LD_ADDR_OWVAR 34
8503: PUSH
8504: LD_INT 14
8506: ST_TO_ADDR
// ar_comander := CreateHuman ;
8507: LD_ADDR_EXP 48
8511: PUSH
8512: CALL_OW 44
8516: ST_TO_ADDR
// end ;
8517: LD_VAR 0 1
8521: RET
// export function SpeedFilter ( filter , speed ) ; var list , i ; begin
8522: LD_INT 0
8524: PPUSH
8525: PPUSH
8526: PPUSH
// list := [ ] ;
8527: LD_ADDR_VAR 0 4
8531: PUSH
8532: EMPTY
8533: ST_TO_ADDR
// for i = 1 to filter do
8534: LD_ADDR_VAR 0 5
8538: PUSH
8539: DOUBLE
8540: LD_INT 1
8542: DEC
8543: ST_TO_ADDR
8544: LD_VAR 0 1
8548: PUSH
8549: FOR_TO
8550: IFFALSE 8599
// if GetSpeed ( filter [ i ] ) < speed then
8552: LD_VAR 0 1
8556: PUSH
8557: LD_VAR 0 5
8561: ARRAY
8562: PPUSH
8563: CALL 7862 0 1
8567: PUSH
8568: LD_VAR 0 2
8572: LESS
8573: IFFALSE 8597
// list := list ^ filter [ i ] ;
8575: LD_ADDR_VAR 0 4
8579: PUSH
8580: LD_VAR 0 4
8584: PUSH
8585: LD_VAR 0 1
8589: PUSH
8590: LD_VAR 0 5
8594: ARRAY
8595: ADD
8596: ST_TO_ADDR
8597: GO 8549
8599: POP
8600: POP
// result := list ;
8601: LD_ADDR_VAR 0 3
8605: PUSH
8606: LD_VAR 0 4
8610: ST_TO_ADDR
// end ; end_of_file end_of_file
8611: LD_VAR 0 3
8615: RET
// export globalGameSaveCounter ; every 0 0$1 do
8616: GO 8618
8618: DISABLE
// begin enable ;
8619: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
8620: LD_STRING updateTimer(
8622: PUSH
8623: LD_OWVAR 1
8627: STR
8628: PUSH
8629: LD_STRING );
8631: STR
8632: PPUSH
8633: CALL_OW 559
// end ;
8637: END
// every 0 0$1 do
8638: GO 8640
8640: DISABLE
// begin globalGameSaveCounter := 0 ;
8641: LD_ADDR_EXP 52
8645: PUSH
8646: LD_INT 0
8648: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
8649: LD_STRING setGameSaveCounter(0)
8651: PPUSH
8652: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
8656: LD_STRING initStreamRollete();
8658: PPUSH
8659: CALL_OW 559
// InitStreamMode ;
8663: CALL 10006 0 0
// DefineStreamItems ( false ) ;
8667: LD_INT 0
8669: PPUSH
8670: CALL 10470 0 1
// end ;
8674: END
// export function SOS_MapStart ( ) ; begin
8675: LD_INT 0
8677: PPUSH
// if streamModeActive then
8678: LD_EXP 53
8682: IFFALSE 8691
// DefineStreamItems ( true ) ;
8684: LD_INT 1
8686: PPUSH
8687: CALL 10470 0 1
// UpdateLuaVariables ( ) ;
8691: CALL 8708 0 0
// UpdateFactoryWaypoints ( ) ;
8695: CALL 23339 0 0
// UpdateWarehouseGatheringPoints ( ) ;
8699: CALL 23596 0 0
// end ;
8703: LD_VAR 0 1
8707: RET
// function UpdateLuaVariables ( ) ; begin
8708: LD_INT 0
8710: PPUSH
// if globalGameSaveCounter then
8711: LD_EXP 52
8715: IFFALSE 8749
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
8717: LD_ADDR_EXP 52
8721: PUSH
8722: LD_EXP 52
8726: PPUSH
8727: CALL 68381 0 1
8731: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
8732: LD_STRING setGameSaveCounter(
8734: PUSH
8735: LD_EXP 52
8739: STR
8740: PUSH
8741: LD_STRING )
8743: STR
8744: PPUSH
8745: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
8749: LD_STRING setGameDifficulty(
8751: PUSH
8752: LD_OWVAR 67
8756: STR
8757: PUSH
8758: LD_STRING )
8760: STR
8761: PPUSH
8762: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
8766: LD_STRING displayDifficulty(
8768: PUSH
8769: LD_OWVAR 67
8773: STR
8774: PUSH
8775: LD_STRING )
8777: STR
8778: PPUSH
8779: CALL_OW 559
// end ;
8783: LD_VAR 0 1
8787: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
8788: LD_INT 0
8790: PPUSH
// if p2 = stream_mode then
8791: LD_VAR 0 2
8795: PUSH
8796: LD_INT 100
8798: EQUAL
8799: IFFALSE 9802
// begin if not StreamModeActive then
8801: LD_EXP 53
8805: NOT
8806: IFFALSE 8816
// StreamModeActive := true ;
8808: LD_ADDR_EXP 53
8812: PUSH
8813: LD_INT 1
8815: ST_TO_ADDR
// if p3 = 0 then
8816: LD_VAR 0 3
8820: PUSH
8821: LD_INT 0
8823: EQUAL
8824: IFFALSE 8830
// InitStreamMode ;
8826: CALL 10006 0 0
// if p3 = 1 then
8830: LD_VAR 0 3
8834: PUSH
8835: LD_INT 1
8837: EQUAL
8838: IFFALSE 8848
// sRocket := true ;
8840: LD_ADDR_EXP 58
8844: PUSH
8845: LD_INT 1
8847: ST_TO_ADDR
// if p3 = 2 then
8848: LD_VAR 0 3
8852: PUSH
8853: LD_INT 2
8855: EQUAL
8856: IFFALSE 8866
// sSpeed := true ;
8858: LD_ADDR_EXP 57
8862: PUSH
8863: LD_INT 1
8865: ST_TO_ADDR
// if p3 = 3 then
8866: LD_VAR 0 3
8870: PUSH
8871: LD_INT 3
8873: EQUAL
8874: IFFALSE 8884
// sEngine := true ;
8876: LD_ADDR_EXP 59
8880: PUSH
8881: LD_INT 1
8883: ST_TO_ADDR
// if p3 = 4 then
8884: LD_VAR 0 3
8888: PUSH
8889: LD_INT 4
8891: EQUAL
8892: IFFALSE 8902
// sSpec := true ;
8894: LD_ADDR_EXP 56
8898: PUSH
8899: LD_INT 1
8901: ST_TO_ADDR
// if p3 = 5 then
8902: LD_VAR 0 3
8906: PUSH
8907: LD_INT 5
8909: EQUAL
8910: IFFALSE 8920
// sLevel := true ;
8912: LD_ADDR_EXP 60
8916: PUSH
8917: LD_INT 1
8919: ST_TO_ADDR
// if p3 = 6 then
8920: LD_VAR 0 3
8924: PUSH
8925: LD_INT 6
8927: EQUAL
8928: IFFALSE 8938
// sArmoury := true ;
8930: LD_ADDR_EXP 61
8934: PUSH
8935: LD_INT 1
8937: ST_TO_ADDR
// if p3 = 7 then
8938: LD_VAR 0 3
8942: PUSH
8943: LD_INT 7
8945: EQUAL
8946: IFFALSE 8956
// sRadar := true ;
8948: LD_ADDR_EXP 62
8952: PUSH
8953: LD_INT 1
8955: ST_TO_ADDR
// if p3 = 8 then
8956: LD_VAR 0 3
8960: PUSH
8961: LD_INT 8
8963: EQUAL
8964: IFFALSE 8974
// sBunker := true ;
8966: LD_ADDR_EXP 63
8970: PUSH
8971: LD_INT 1
8973: ST_TO_ADDR
// if p3 = 9 then
8974: LD_VAR 0 3
8978: PUSH
8979: LD_INT 9
8981: EQUAL
8982: IFFALSE 8992
// sHack := true ;
8984: LD_ADDR_EXP 64
8988: PUSH
8989: LD_INT 1
8991: ST_TO_ADDR
// if p3 = 10 then
8992: LD_VAR 0 3
8996: PUSH
8997: LD_INT 10
8999: EQUAL
9000: IFFALSE 9010
// sFire := true ;
9002: LD_ADDR_EXP 65
9006: PUSH
9007: LD_INT 1
9009: ST_TO_ADDR
// if p3 = 11 then
9010: LD_VAR 0 3
9014: PUSH
9015: LD_INT 11
9017: EQUAL
9018: IFFALSE 9028
// sRefresh := true ;
9020: LD_ADDR_EXP 66
9024: PUSH
9025: LD_INT 1
9027: ST_TO_ADDR
// if p3 = 12 then
9028: LD_VAR 0 3
9032: PUSH
9033: LD_INT 12
9035: EQUAL
9036: IFFALSE 9046
// sExp := true ;
9038: LD_ADDR_EXP 67
9042: PUSH
9043: LD_INT 1
9045: ST_TO_ADDR
// if p3 = 13 then
9046: LD_VAR 0 3
9050: PUSH
9051: LD_INT 13
9053: EQUAL
9054: IFFALSE 9064
// sDepot := true ;
9056: LD_ADDR_EXP 68
9060: PUSH
9061: LD_INT 1
9063: ST_TO_ADDR
// if p3 = 14 then
9064: LD_VAR 0 3
9068: PUSH
9069: LD_INT 14
9071: EQUAL
9072: IFFALSE 9082
// sFlag := true ;
9074: LD_ADDR_EXP 69
9078: PUSH
9079: LD_INT 1
9081: ST_TO_ADDR
// if p3 = 15 then
9082: LD_VAR 0 3
9086: PUSH
9087: LD_INT 15
9089: EQUAL
9090: IFFALSE 9100
// sKamikadze := true ;
9092: LD_ADDR_EXP 77
9096: PUSH
9097: LD_INT 1
9099: ST_TO_ADDR
// if p3 = 16 then
9100: LD_VAR 0 3
9104: PUSH
9105: LD_INT 16
9107: EQUAL
9108: IFFALSE 9118
// sTroll := true ;
9110: LD_ADDR_EXP 78
9114: PUSH
9115: LD_INT 1
9117: ST_TO_ADDR
// if p3 = 17 then
9118: LD_VAR 0 3
9122: PUSH
9123: LD_INT 17
9125: EQUAL
9126: IFFALSE 9136
// sSlow := true ;
9128: LD_ADDR_EXP 79
9132: PUSH
9133: LD_INT 1
9135: ST_TO_ADDR
// if p3 = 18 then
9136: LD_VAR 0 3
9140: PUSH
9141: LD_INT 18
9143: EQUAL
9144: IFFALSE 9154
// sLack := true ;
9146: LD_ADDR_EXP 80
9150: PUSH
9151: LD_INT 1
9153: ST_TO_ADDR
// if p3 = 19 then
9154: LD_VAR 0 3
9158: PUSH
9159: LD_INT 19
9161: EQUAL
9162: IFFALSE 9172
// sTank := true ;
9164: LD_ADDR_EXP 82
9168: PUSH
9169: LD_INT 1
9171: ST_TO_ADDR
// if p3 = 20 then
9172: LD_VAR 0 3
9176: PUSH
9177: LD_INT 20
9179: EQUAL
9180: IFFALSE 9190
// sRemote := true ;
9182: LD_ADDR_EXP 83
9186: PUSH
9187: LD_INT 1
9189: ST_TO_ADDR
// if p3 = 21 then
9190: LD_VAR 0 3
9194: PUSH
9195: LD_INT 21
9197: EQUAL
9198: IFFALSE 9208
// sPowell := true ;
9200: LD_ADDR_EXP 84
9204: PUSH
9205: LD_INT 1
9207: ST_TO_ADDR
// if p3 = 22 then
9208: LD_VAR 0 3
9212: PUSH
9213: LD_INT 22
9215: EQUAL
9216: IFFALSE 9226
// sTeleport := true ;
9218: LD_ADDR_EXP 87
9222: PUSH
9223: LD_INT 1
9225: ST_TO_ADDR
// if p3 = 23 then
9226: LD_VAR 0 3
9230: PUSH
9231: LD_INT 23
9233: EQUAL
9234: IFFALSE 9244
// sOilTower := true ;
9236: LD_ADDR_EXP 89
9240: PUSH
9241: LD_INT 1
9243: ST_TO_ADDR
// if p3 = 24 then
9244: LD_VAR 0 3
9248: PUSH
9249: LD_INT 24
9251: EQUAL
9252: IFFALSE 9262
// sShovel := true ;
9254: LD_ADDR_EXP 90
9258: PUSH
9259: LD_INT 1
9261: ST_TO_ADDR
// if p3 = 25 then
9262: LD_VAR 0 3
9266: PUSH
9267: LD_INT 25
9269: EQUAL
9270: IFFALSE 9280
// sSheik := true ;
9272: LD_ADDR_EXP 91
9276: PUSH
9277: LD_INT 1
9279: ST_TO_ADDR
// if p3 = 26 then
9280: LD_VAR 0 3
9284: PUSH
9285: LD_INT 26
9287: EQUAL
9288: IFFALSE 9298
// sEarthquake := true ;
9290: LD_ADDR_EXP 93
9294: PUSH
9295: LD_INT 1
9297: ST_TO_ADDR
// if p3 = 27 then
9298: LD_VAR 0 3
9302: PUSH
9303: LD_INT 27
9305: EQUAL
9306: IFFALSE 9316
// sAI := true ;
9308: LD_ADDR_EXP 94
9312: PUSH
9313: LD_INT 1
9315: ST_TO_ADDR
// if p3 = 28 then
9316: LD_VAR 0 3
9320: PUSH
9321: LD_INT 28
9323: EQUAL
9324: IFFALSE 9334
// sCargo := true ;
9326: LD_ADDR_EXP 97
9330: PUSH
9331: LD_INT 1
9333: ST_TO_ADDR
// if p3 = 29 then
9334: LD_VAR 0 3
9338: PUSH
9339: LD_INT 29
9341: EQUAL
9342: IFFALSE 9352
// sDLaser := true ;
9344: LD_ADDR_EXP 98
9348: PUSH
9349: LD_INT 1
9351: ST_TO_ADDR
// if p3 = 30 then
9352: LD_VAR 0 3
9356: PUSH
9357: LD_INT 30
9359: EQUAL
9360: IFFALSE 9370
// sExchange := true ;
9362: LD_ADDR_EXP 99
9366: PUSH
9367: LD_INT 1
9369: ST_TO_ADDR
// if p3 = 31 then
9370: LD_VAR 0 3
9374: PUSH
9375: LD_INT 31
9377: EQUAL
9378: IFFALSE 9388
// sFac := true ;
9380: LD_ADDR_EXP 100
9384: PUSH
9385: LD_INT 1
9387: ST_TO_ADDR
// if p3 = 32 then
9388: LD_VAR 0 3
9392: PUSH
9393: LD_INT 32
9395: EQUAL
9396: IFFALSE 9406
// sPower := true ;
9398: LD_ADDR_EXP 101
9402: PUSH
9403: LD_INT 1
9405: ST_TO_ADDR
// if p3 = 33 then
9406: LD_VAR 0 3
9410: PUSH
9411: LD_INT 33
9413: EQUAL
9414: IFFALSE 9424
// sRandom := true ;
9416: LD_ADDR_EXP 102
9420: PUSH
9421: LD_INT 1
9423: ST_TO_ADDR
// if p3 = 34 then
9424: LD_VAR 0 3
9428: PUSH
9429: LD_INT 34
9431: EQUAL
9432: IFFALSE 9442
// sShield := true ;
9434: LD_ADDR_EXP 103
9438: PUSH
9439: LD_INT 1
9441: ST_TO_ADDR
// if p3 = 35 then
9442: LD_VAR 0 3
9446: PUSH
9447: LD_INT 35
9449: EQUAL
9450: IFFALSE 9460
// sTime := true ;
9452: LD_ADDR_EXP 104
9456: PUSH
9457: LD_INT 1
9459: ST_TO_ADDR
// if p3 = 36 then
9460: LD_VAR 0 3
9464: PUSH
9465: LD_INT 36
9467: EQUAL
9468: IFFALSE 9478
// sTools := true ;
9470: LD_ADDR_EXP 105
9474: PUSH
9475: LD_INT 1
9477: ST_TO_ADDR
// if p3 = 101 then
9478: LD_VAR 0 3
9482: PUSH
9483: LD_INT 101
9485: EQUAL
9486: IFFALSE 9496
// sSold := true ;
9488: LD_ADDR_EXP 70
9492: PUSH
9493: LD_INT 1
9495: ST_TO_ADDR
// if p3 = 102 then
9496: LD_VAR 0 3
9500: PUSH
9501: LD_INT 102
9503: EQUAL
9504: IFFALSE 9514
// sDiff := true ;
9506: LD_ADDR_EXP 71
9510: PUSH
9511: LD_INT 1
9513: ST_TO_ADDR
// if p3 = 103 then
9514: LD_VAR 0 3
9518: PUSH
9519: LD_INT 103
9521: EQUAL
9522: IFFALSE 9532
// sFog := true ;
9524: LD_ADDR_EXP 74
9528: PUSH
9529: LD_INT 1
9531: ST_TO_ADDR
// if p3 = 104 then
9532: LD_VAR 0 3
9536: PUSH
9537: LD_INT 104
9539: EQUAL
9540: IFFALSE 9550
// sReset := true ;
9542: LD_ADDR_EXP 75
9546: PUSH
9547: LD_INT 1
9549: ST_TO_ADDR
// if p3 = 105 then
9550: LD_VAR 0 3
9554: PUSH
9555: LD_INT 105
9557: EQUAL
9558: IFFALSE 9568
// sSun := true ;
9560: LD_ADDR_EXP 76
9564: PUSH
9565: LD_INT 1
9567: ST_TO_ADDR
// if p3 = 106 then
9568: LD_VAR 0 3
9572: PUSH
9573: LD_INT 106
9575: EQUAL
9576: IFFALSE 9586
// sTiger := true ;
9578: LD_ADDR_EXP 72
9582: PUSH
9583: LD_INT 1
9585: ST_TO_ADDR
// if p3 = 107 then
9586: LD_VAR 0 3
9590: PUSH
9591: LD_INT 107
9593: EQUAL
9594: IFFALSE 9604
// sBomb := true ;
9596: LD_ADDR_EXP 73
9600: PUSH
9601: LD_INT 1
9603: ST_TO_ADDR
// if p3 = 108 then
9604: LD_VAR 0 3
9608: PUSH
9609: LD_INT 108
9611: EQUAL
9612: IFFALSE 9622
// sWound := true ;
9614: LD_ADDR_EXP 81
9618: PUSH
9619: LD_INT 1
9621: ST_TO_ADDR
// if p3 = 109 then
9622: LD_VAR 0 3
9626: PUSH
9627: LD_INT 109
9629: EQUAL
9630: IFFALSE 9640
// sBetray := true ;
9632: LD_ADDR_EXP 85
9636: PUSH
9637: LD_INT 1
9639: ST_TO_ADDR
// if p3 = 110 then
9640: LD_VAR 0 3
9644: PUSH
9645: LD_INT 110
9647: EQUAL
9648: IFFALSE 9658
// sContamin := true ;
9650: LD_ADDR_EXP 86
9654: PUSH
9655: LD_INT 1
9657: ST_TO_ADDR
// if p3 = 111 then
9658: LD_VAR 0 3
9662: PUSH
9663: LD_INT 111
9665: EQUAL
9666: IFFALSE 9676
// sOil := true ;
9668: LD_ADDR_EXP 88
9672: PUSH
9673: LD_INT 1
9675: ST_TO_ADDR
// if p3 = 112 then
9676: LD_VAR 0 3
9680: PUSH
9681: LD_INT 112
9683: EQUAL
9684: IFFALSE 9694
// sStu := true ;
9686: LD_ADDR_EXP 92
9690: PUSH
9691: LD_INT 1
9693: ST_TO_ADDR
// if p3 = 113 then
9694: LD_VAR 0 3
9698: PUSH
9699: LD_INT 113
9701: EQUAL
9702: IFFALSE 9712
// sBazooka := true ;
9704: LD_ADDR_EXP 95
9708: PUSH
9709: LD_INT 1
9711: ST_TO_ADDR
// if p3 = 114 then
9712: LD_VAR 0 3
9716: PUSH
9717: LD_INT 114
9719: EQUAL
9720: IFFALSE 9730
// sMortar := true ;
9722: LD_ADDR_EXP 96
9726: PUSH
9727: LD_INT 1
9729: ST_TO_ADDR
// if p3 = 115 then
9730: LD_VAR 0 3
9734: PUSH
9735: LD_INT 115
9737: EQUAL
9738: IFFALSE 9748
// sRanger := true ;
9740: LD_ADDR_EXP 106
9744: PUSH
9745: LD_INT 1
9747: ST_TO_ADDR
// if p3 = 116 then
9748: LD_VAR 0 3
9752: PUSH
9753: LD_INT 116
9755: EQUAL
9756: IFFALSE 9766
// sComputer := true ;
9758: LD_ADDR_EXP 107
9762: PUSH
9763: LD_INT 1
9765: ST_TO_ADDR
// if p3 = 117 then
9766: LD_VAR 0 3
9770: PUSH
9771: LD_INT 117
9773: EQUAL
9774: IFFALSE 9784
// s30 := true ;
9776: LD_ADDR_EXP 108
9780: PUSH
9781: LD_INT 1
9783: ST_TO_ADDR
// if p3 = 118 then
9784: LD_VAR 0 3
9788: PUSH
9789: LD_INT 118
9791: EQUAL
9792: IFFALSE 9802
// s60 := true ;
9794: LD_ADDR_EXP 109
9798: PUSH
9799: LD_INT 1
9801: ST_TO_ADDR
// end ; if p2 = hack_mode then
9802: LD_VAR 0 2
9806: PUSH
9807: LD_INT 101
9809: EQUAL
9810: IFFALSE 9938
// begin case p3 of 1 :
9812: LD_VAR 0 3
9816: PUSH
9817: LD_INT 1
9819: DOUBLE
9820: EQUAL
9821: IFTRUE 9825
9823: GO 9832
9825: POP
// hHackUnlimitedResources ; 2 :
9826: CALL 22085 0 0
9830: GO 9938
9832: LD_INT 2
9834: DOUBLE
9835: EQUAL
9836: IFTRUE 9840
9838: GO 9847
9840: POP
// hHackSetLevel10 ; 3 :
9841: CALL 22218 0 0
9845: GO 9938
9847: LD_INT 3
9849: DOUBLE
9850: EQUAL
9851: IFTRUE 9855
9853: GO 9862
9855: POP
// hHackSetLevel10YourUnits ; 4 :
9856: CALL 22303 0 0
9860: GO 9938
9862: LD_INT 4
9864: DOUBLE
9865: EQUAL
9866: IFTRUE 9870
9868: GO 9877
9870: POP
// hHackInvincible ; 5 :
9871: CALL 22751 0 0
9875: GO 9938
9877: LD_INT 5
9879: DOUBLE
9880: EQUAL
9881: IFTRUE 9885
9883: GO 9892
9885: POP
// hHackInvisible ; 6 :
9886: CALL 22862 0 0
9890: GO 9938
9892: LD_INT 6
9894: DOUBLE
9895: EQUAL
9896: IFTRUE 9900
9898: GO 9907
9900: POP
// hHackChangeYourSide ; 7 :
9901: CALL 22919 0 0
9905: GO 9938
9907: LD_INT 7
9909: DOUBLE
9910: EQUAL
9911: IFTRUE 9915
9913: GO 9922
9915: POP
// hHackChangeUnitSide ; 8 :
9916: CALL 22961 0 0
9920: GO 9938
9922: LD_INT 8
9924: DOUBLE
9925: EQUAL
9926: IFTRUE 9930
9928: GO 9937
9930: POP
// hHackFog ; end ;
9931: CALL 23062 0 0
9935: GO 9938
9937: POP
// end ; if p2 = game_save_mode then
9938: LD_VAR 0 2
9942: PUSH
9943: LD_INT 102
9945: EQUAL
9946: IFFALSE 10001
// begin if p3 = 1 then
9948: LD_VAR 0 3
9952: PUSH
9953: LD_INT 1
9955: EQUAL
9956: IFFALSE 9968
// globalGameSaveCounter := p4 ;
9958: LD_ADDR_EXP 52
9962: PUSH
9963: LD_VAR 0 4
9967: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
9968: LD_VAR 0 3
9972: PUSH
9973: LD_INT 2
9975: EQUAL
9976: PUSH
9977: LD_EXP 52
9981: AND
9982: IFFALSE 10001
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
9984: LD_STRING setGameSaveCounter(
9986: PUSH
9987: LD_EXP 52
9991: STR
9992: PUSH
9993: LD_STRING )
9995: STR
9996: PPUSH
9997: CALL_OW 559
// end ; end ;
10001: LD_VAR 0 7
10005: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
10006: LD_INT 0
10008: PPUSH
// streamModeActive := false ;
10009: LD_ADDR_EXP 53
10013: PUSH
10014: LD_INT 0
10016: ST_TO_ADDR
// normalCounter := 36 ;
10017: LD_ADDR_EXP 54
10021: PUSH
10022: LD_INT 36
10024: ST_TO_ADDR
// hardcoreCounter := 18 ;
10025: LD_ADDR_EXP 55
10029: PUSH
10030: LD_INT 18
10032: ST_TO_ADDR
// sRocket := false ;
10033: LD_ADDR_EXP 58
10037: PUSH
10038: LD_INT 0
10040: ST_TO_ADDR
// sSpeed := false ;
10041: LD_ADDR_EXP 57
10045: PUSH
10046: LD_INT 0
10048: ST_TO_ADDR
// sEngine := false ;
10049: LD_ADDR_EXP 59
10053: PUSH
10054: LD_INT 0
10056: ST_TO_ADDR
// sSpec := false ;
10057: LD_ADDR_EXP 56
10061: PUSH
10062: LD_INT 0
10064: ST_TO_ADDR
// sLevel := false ;
10065: LD_ADDR_EXP 60
10069: PUSH
10070: LD_INT 0
10072: ST_TO_ADDR
// sArmoury := false ;
10073: LD_ADDR_EXP 61
10077: PUSH
10078: LD_INT 0
10080: ST_TO_ADDR
// sRadar := false ;
10081: LD_ADDR_EXP 62
10085: PUSH
10086: LD_INT 0
10088: ST_TO_ADDR
// sBunker := false ;
10089: LD_ADDR_EXP 63
10093: PUSH
10094: LD_INT 0
10096: ST_TO_ADDR
// sHack := false ;
10097: LD_ADDR_EXP 64
10101: PUSH
10102: LD_INT 0
10104: ST_TO_ADDR
// sFire := false ;
10105: LD_ADDR_EXP 65
10109: PUSH
10110: LD_INT 0
10112: ST_TO_ADDR
// sRefresh := false ;
10113: LD_ADDR_EXP 66
10117: PUSH
10118: LD_INT 0
10120: ST_TO_ADDR
// sExp := false ;
10121: LD_ADDR_EXP 67
10125: PUSH
10126: LD_INT 0
10128: ST_TO_ADDR
// sDepot := false ;
10129: LD_ADDR_EXP 68
10133: PUSH
10134: LD_INT 0
10136: ST_TO_ADDR
// sFlag := false ;
10137: LD_ADDR_EXP 69
10141: PUSH
10142: LD_INT 0
10144: ST_TO_ADDR
// sKamikadze := false ;
10145: LD_ADDR_EXP 77
10149: PUSH
10150: LD_INT 0
10152: ST_TO_ADDR
// sTroll := false ;
10153: LD_ADDR_EXP 78
10157: PUSH
10158: LD_INT 0
10160: ST_TO_ADDR
// sSlow := false ;
10161: LD_ADDR_EXP 79
10165: PUSH
10166: LD_INT 0
10168: ST_TO_ADDR
// sLack := false ;
10169: LD_ADDR_EXP 80
10173: PUSH
10174: LD_INT 0
10176: ST_TO_ADDR
// sTank := false ;
10177: LD_ADDR_EXP 82
10181: PUSH
10182: LD_INT 0
10184: ST_TO_ADDR
// sRemote := false ;
10185: LD_ADDR_EXP 83
10189: PUSH
10190: LD_INT 0
10192: ST_TO_ADDR
// sPowell := false ;
10193: LD_ADDR_EXP 84
10197: PUSH
10198: LD_INT 0
10200: ST_TO_ADDR
// sTeleport := false ;
10201: LD_ADDR_EXP 87
10205: PUSH
10206: LD_INT 0
10208: ST_TO_ADDR
// sOilTower := false ;
10209: LD_ADDR_EXP 89
10213: PUSH
10214: LD_INT 0
10216: ST_TO_ADDR
// sShovel := false ;
10217: LD_ADDR_EXP 90
10221: PUSH
10222: LD_INT 0
10224: ST_TO_ADDR
// sSheik := false ;
10225: LD_ADDR_EXP 91
10229: PUSH
10230: LD_INT 0
10232: ST_TO_ADDR
// sEarthquake := false ;
10233: LD_ADDR_EXP 93
10237: PUSH
10238: LD_INT 0
10240: ST_TO_ADDR
// sAI := false ;
10241: LD_ADDR_EXP 94
10245: PUSH
10246: LD_INT 0
10248: ST_TO_ADDR
// sCargo := false ;
10249: LD_ADDR_EXP 97
10253: PUSH
10254: LD_INT 0
10256: ST_TO_ADDR
// sDLaser := false ;
10257: LD_ADDR_EXP 98
10261: PUSH
10262: LD_INT 0
10264: ST_TO_ADDR
// sExchange := false ;
10265: LD_ADDR_EXP 99
10269: PUSH
10270: LD_INT 0
10272: ST_TO_ADDR
// sFac := false ;
10273: LD_ADDR_EXP 100
10277: PUSH
10278: LD_INT 0
10280: ST_TO_ADDR
// sPower := false ;
10281: LD_ADDR_EXP 101
10285: PUSH
10286: LD_INT 0
10288: ST_TO_ADDR
// sRandom := false ;
10289: LD_ADDR_EXP 102
10293: PUSH
10294: LD_INT 0
10296: ST_TO_ADDR
// sShield := false ;
10297: LD_ADDR_EXP 103
10301: PUSH
10302: LD_INT 0
10304: ST_TO_ADDR
// sTime := false ;
10305: LD_ADDR_EXP 104
10309: PUSH
10310: LD_INT 0
10312: ST_TO_ADDR
// sTools := false ;
10313: LD_ADDR_EXP 105
10317: PUSH
10318: LD_INT 0
10320: ST_TO_ADDR
// sSold := false ;
10321: LD_ADDR_EXP 70
10325: PUSH
10326: LD_INT 0
10328: ST_TO_ADDR
// sDiff := false ;
10329: LD_ADDR_EXP 71
10333: PUSH
10334: LD_INT 0
10336: ST_TO_ADDR
// sFog := false ;
10337: LD_ADDR_EXP 74
10341: PUSH
10342: LD_INT 0
10344: ST_TO_ADDR
// sReset := false ;
10345: LD_ADDR_EXP 75
10349: PUSH
10350: LD_INT 0
10352: ST_TO_ADDR
// sSun := false ;
10353: LD_ADDR_EXP 76
10357: PUSH
10358: LD_INT 0
10360: ST_TO_ADDR
// sTiger := false ;
10361: LD_ADDR_EXP 72
10365: PUSH
10366: LD_INT 0
10368: ST_TO_ADDR
// sBomb := false ;
10369: LD_ADDR_EXP 73
10373: PUSH
10374: LD_INT 0
10376: ST_TO_ADDR
// sWound := false ;
10377: LD_ADDR_EXP 81
10381: PUSH
10382: LD_INT 0
10384: ST_TO_ADDR
// sBetray := false ;
10385: LD_ADDR_EXP 85
10389: PUSH
10390: LD_INT 0
10392: ST_TO_ADDR
// sContamin := false ;
10393: LD_ADDR_EXP 86
10397: PUSH
10398: LD_INT 0
10400: ST_TO_ADDR
// sOil := false ;
10401: LD_ADDR_EXP 88
10405: PUSH
10406: LD_INT 0
10408: ST_TO_ADDR
// sStu := false ;
10409: LD_ADDR_EXP 92
10413: PUSH
10414: LD_INT 0
10416: ST_TO_ADDR
// sBazooka := false ;
10417: LD_ADDR_EXP 95
10421: PUSH
10422: LD_INT 0
10424: ST_TO_ADDR
// sMortar := false ;
10425: LD_ADDR_EXP 96
10429: PUSH
10430: LD_INT 0
10432: ST_TO_ADDR
// sRanger := false ;
10433: LD_ADDR_EXP 106
10437: PUSH
10438: LD_INT 0
10440: ST_TO_ADDR
// sComputer := false ;
10441: LD_ADDR_EXP 107
10445: PUSH
10446: LD_INT 0
10448: ST_TO_ADDR
// s30 := false ;
10449: LD_ADDR_EXP 108
10453: PUSH
10454: LD_INT 0
10456: ST_TO_ADDR
// s60 := false ;
10457: LD_ADDR_EXP 109
10461: PUSH
10462: LD_INT 0
10464: ST_TO_ADDR
// end ;
10465: LD_VAR 0 1
10469: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
10470: LD_INT 0
10472: PPUSH
10473: PPUSH
10474: PPUSH
10475: PPUSH
10476: PPUSH
10477: PPUSH
10478: PPUSH
// result := [ ] ;
10479: LD_ADDR_VAR 0 2
10483: PUSH
10484: EMPTY
10485: ST_TO_ADDR
// if campaign_id = 1 then
10486: LD_OWVAR 69
10490: PUSH
10491: LD_INT 1
10493: EQUAL
10494: IFFALSE 13660
// begin case mission_number of 1 :
10496: LD_OWVAR 70
10500: PUSH
10501: LD_INT 1
10503: DOUBLE
10504: EQUAL
10505: IFTRUE 10509
10507: GO 10585
10509: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
10510: LD_ADDR_VAR 0 2
10514: PUSH
10515: LD_INT 2
10517: PUSH
10518: LD_INT 4
10520: PUSH
10521: LD_INT 11
10523: PUSH
10524: LD_INT 12
10526: PUSH
10527: LD_INT 15
10529: PUSH
10530: LD_INT 16
10532: PUSH
10533: LD_INT 22
10535: PUSH
10536: LD_INT 23
10538: PUSH
10539: LD_INT 26
10541: PUSH
10542: EMPTY
10543: LIST
10544: LIST
10545: LIST
10546: LIST
10547: LIST
10548: LIST
10549: LIST
10550: LIST
10551: LIST
10552: PUSH
10553: LD_INT 101
10555: PUSH
10556: LD_INT 102
10558: PUSH
10559: LD_INT 106
10561: PUSH
10562: LD_INT 116
10564: PUSH
10565: LD_INT 117
10567: PUSH
10568: LD_INT 118
10570: PUSH
10571: EMPTY
10572: LIST
10573: LIST
10574: LIST
10575: LIST
10576: LIST
10577: LIST
10578: PUSH
10579: EMPTY
10580: LIST
10581: LIST
10582: ST_TO_ADDR
10583: GO 13658
10585: LD_INT 2
10587: DOUBLE
10588: EQUAL
10589: IFTRUE 10593
10591: GO 10677
10593: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
10594: LD_ADDR_VAR 0 2
10598: PUSH
10599: LD_INT 2
10601: PUSH
10602: LD_INT 4
10604: PUSH
10605: LD_INT 11
10607: PUSH
10608: LD_INT 12
10610: PUSH
10611: LD_INT 15
10613: PUSH
10614: LD_INT 16
10616: PUSH
10617: LD_INT 22
10619: PUSH
10620: LD_INT 23
10622: PUSH
10623: LD_INT 26
10625: PUSH
10626: EMPTY
10627: LIST
10628: LIST
10629: LIST
10630: LIST
10631: LIST
10632: LIST
10633: LIST
10634: LIST
10635: LIST
10636: PUSH
10637: LD_INT 101
10639: PUSH
10640: LD_INT 102
10642: PUSH
10643: LD_INT 105
10645: PUSH
10646: LD_INT 106
10648: PUSH
10649: LD_INT 108
10651: PUSH
10652: LD_INT 116
10654: PUSH
10655: LD_INT 117
10657: PUSH
10658: LD_INT 118
10660: PUSH
10661: EMPTY
10662: LIST
10663: LIST
10664: LIST
10665: LIST
10666: LIST
10667: LIST
10668: LIST
10669: LIST
10670: PUSH
10671: EMPTY
10672: LIST
10673: LIST
10674: ST_TO_ADDR
10675: GO 13658
10677: LD_INT 3
10679: DOUBLE
10680: EQUAL
10681: IFTRUE 10685
10683: GO 10773
10685: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
10686: LD_ADDR_VAR 0 2
10690: PUSH
10691: LD_INT 2
10693: PUSH
10694: LD_INT 4
10696: PUSH
10697: LD_INT 5
10699: PUSH
10700: LD_INT 11
10702: PUSH
10703: LD_INT 12
10705: PUSH
10706: LD_INT 15
10708: PUSH
10709: LD_INT 16
10711: PUSH
10712: LD_INT 22
10714: PUSH
10715: LD_INT 26
10717: PUSH
10718: LD_INT 36
10720: PUSH
10721: EMPTY
10722: LIST
10723: LIST
10724: LIST
10725: LIST
10726: LIST
10727: LIST
10728: LIST
10729: LIST
10730: LIST
10731: LIST
10732: PUSH
10733: LD_INT 101
10735: PUSH
10736: LD_INT 102
10738: PUSH
10739: LD_INT 105
10741: PUSH
10742: LD_INT 106
10744: PUSH
10745: LD_INT 108
10747: PUSH
10748: LD_INT 116
10750: PUSH
10751: LD_INT 117
10753: PUSH
10754: LD_INT 118
10756: PUSH
10757: EMPTY
10758: LIST
10759: LIST
10760: LIST
10761: LIST
10762: LIST
10763: LIST
10764: LIST
10765: LIST
10766: PUSH
10767: EMPTY
10768: LIST
10769: LIST
10770: ST_TO_ADDR
10771: GO 13658
10773: LD_INT 4
10775: DOUBLE
10776: EQUAL
10777: IFTRUE 10781
10779: GO 10877
10781: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
10782: LD_ADDR_VAR 0 2
10786: PUSH
10787: LD_INT 2
10789: PUSH
10790: LD_INT 4
10792: PUSH
10793: LD_INT 5
10795: PUSH
10796: LD_INT 8
10798: PUSH
10799: LD_INT 11
10801: PUSH
10802: LD_INT 12
10804: PUSH
10805: LD_INT 15
10807: PUSH
10808: LD_INT 16
10810: PUSH
10811: LD_INT 22
10813: PUSH
10814: LD_INT 23
10816: PUSH
10817: LD_INT 26
10819: PUSH
10820: LD_INT 36
10822: PUSH
10823: EMPTY
10824: LIST
10825: LIST
10826: LIST
10827: LIST
10828: LIST
10829: LIST
10830: LIST
10831: LIST
10832: LIST
10833: LIST
10834: LIST
10835: LIST
10836: PUSH
10837: LD_INT 101
10839: PUSH
10840: LD_INT 102
10842: PUSH
10843: LD_INT 105
10845: PUSH
10846: LD_INT 106
10848: PUSH
10849: LD_INT 108
10851: PUSH
10852: LD_INT 116
10854: PUSH
10855: LD_INT 117
10857: PUSH
10858: LD_INT 118
10860: PUSH
10861: EMPTY
10862: LIST
10863: LIST
10864: LIST
10865: LIST
10866: LIST
10867: LIST
10868: LIST
10869: LIST
10870: PUSH
10871: EMPTY
10872: LIST
10873: LIST
10874: ST_TO_ADDR
10875: GO 13658
10877: LD_INT 5
10879: DOUBLE
10880: EQUAL
10881: IFTRUE 10885
10883: GO 10997
10885: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
10886: LD_ADDR_VAR 0 2
10890: PUSH
10891: LD_INT 2
10893: PUSH
10894: LD_INT 4
10896: PUSH
10897: LD_INT 5
10899: PUSH
10900: LD_INT 6
10902: PUSH
10903: LD_INT 8
10905: PUSH
10906: LD_INT 11
10908: PUSH
10909: LD_INT 12
10911: PUSH
10912: LD_INT 15
10914: PUSH
10915: LD_INT 16
10917: PUSH
10918: LD_INT 22
10920: PUSH
10921: LD_INT 23
10923: PUSH
10924: LD_INT 25
10926: PUSH
10927: LD_INT 26
10929: PUSH
10930: LD_INT 36
10932: PUSH
10933: EMPTY
10934: LIST
10935: LIST
10936: LIST
10937: LIST
10938: LIST
10939: LIST
10940: LIST
10941: LIST
10942: LIST
10943: LIST
10944: LIST
10945: LIST
10946: LIST
10947: LIST
10948: PUSH
10949: LD_INT 101
10951: PUSH
10952: LD_INT 102
10954: PUSH
10955: LD_INT 105
10957: PUSH
10958: LD_INT 106
10960: PUSH
10961: LD_INT 108
10963: PUSH
10964: LD_INT 109
10966: PUSH
10967: LD_INT 112
10969: PUSH
10970: LD_INT 116
10972: PUSH
10973: LD_INT 117
10975: PUSH
10976: LD_INT 118
10978: PUSH
10979: EMPTY
10980: LIST
10981: LIST
10982: LIST
10983: LIST
10984: LIST
10985: LIST
10986: LIST
10987: LIST
10988: LIST
10989: LIST
10990: PUSH
10991: EMPTY
10992: LIST
10993: LIST
10994: ST_TO_ADDR
10995: GO 13658
10997: LD_INT 6
10999: DOUBLE
11000: EQUAL
11001: IFTRUE 11005
11003: GO 11137
11005: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
11006: LD_ADDR_VAR 0 2
11010: PUSH
11011: LD_INT 2
11013: PUSH
11014: LD_INT 4
11016: PUSH
11017: LD_INT 5
11019: PUSH
11020: LD_INT 6
11022: PUSH
11023: LD_INT 8
11025: PUSH
11026: LD_INT 11
11028: PUSH
11029: LD_INT 12
11031: PUSH
11032: LD_INT 15
11034: PUSH
11035: LD_INT 16
11037: PUSH
11038: LD_INT 20
11040: PUSH
11041: LD_INT 21
11043: PUSH
11044: LD_INT 22
11046: PUSH
11047: LD_INT 23
11049: PUSH
11050: LD_INT 25
11052: PUSH
11053: LD_INT 26
11055: PUSH
11056: LD_INT 30
11058: PUSH
11059: LD_INT 31
11061: PUSH
11062: LD_INT 32
11064: PUSH
11065: LD_INT 36
11067: PUSH
11068: EMPTY
11069: LIST
11070: LIST
11071: LIST
11072: LIST
11073: LIST
11074: LIST
11075: LIST
11076: LIST
11077: LIST
11078: LIST
11079: LIST
11080: LIST
11081: LIST
11082: LIST
11083: LIST
11084: LIST
11085: LIST
11086: LIST
11087: LIST
11088: PUSH
11089: LD_INT 101
11091: PUSH
11092: LD_INT 102
11094: PUSH
11095: LD_INT 105
11097: PUSH
11098: LD_INT 106
11100: PUSH
11101: LD_INT 108
11103: PUSH
11104: LD_INT 109
11106: PUSH
11107: LD_INT 112
11109: PUSH
11110: LD_INT 116
11112: PUSH
11113: LD_INT 117
11115: PUSH
11116: LD_INT 118
11118: PUSH
11119: EMPTY
11120: LIST
11121: LIST
11122: LIST
11123: LIST
11124: LIST
11125: LIST
11126: LIST
11127: LIST
11128: LIST
11129: LIST
11130: PUSH
11131: EMPTY
11132: LIST
11133: LIST
11134: ST_TO_ADDR
11135: GO 13658
11137: LD_INT 7
11139: DOUBLE
11140: EQUAL
11141: IFTRUE 11145
11143: GO 11257
11145: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
11146: LD_ADDR_VAR 0 2
11150: PUSH
11151: LD_INT 2
11153: PUSH
11154: LD_INT 4
11156: PUSH
11157: LD_INT 5
11159: PUSH
11160: LD_INT 7
11162: PUSH
11163: LD_INT 11
11165: PUSH
11166: LD_INT 12
11168: PUSH
11169: LD_INT 15
11171: PUSH
11172: LD_INT 16
11174: PUSH
11175: LD_INT 20
11177: PUSH
11178: LD_INT 21
11180: PUSH
11181: LD_INT 22
11183: PUSH
11184: LD_INT 23
11186: PUSH
11187: LD_INT 25
11189: PUSH
11190: LD_INT 26
11192: PUSH
11193: EMPTY
11194: LIST
11195: LIST
11196: LIST
11197: LIST
11198: LIST
11199: LIST
11200: LIST
11201: LIST
11202: LIST
11203: LIST
11204: LIST
11205: LIST
11206: LIST
11207: LIST
11208: PUSH
11209: LD_INT 101
11211: PUSH
11212: LD_INT 102
11214: PUSH
11215: LD_INT 103
11217: PUSH
11218: LD_INT 105
11220: PUSH
11221: LD_INT 106
11223: PUSH
11224: LD_INT 108
11226: PUSH
11227: LD_INT 112
11229: PUSH
11230: LD_INT 116
11232: PUSH
11233: LD_INT 117
11235: PUSH
11236: LD_INT 118
11238: PUSH
11239: EMPTY
11240: LIST
11241: LIST
11242: LIST
11243: LIST
11244: LIST
11245: LIST
11246: LIST
11247: LIST
11248: LIST
11249: LIST
11250: PUSH
11251: EMPTY
11252: LIST
11253: LIST
11254: ST_TO_ADDR
11255: GO 13658
11257: LD_INT 8
11259: DOUBLE
11260: EQUAL
11261: IFTRUE 11265
11263: GO 11405
11265: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
11266: LD_ADDR_VAR 0 2
11270: PUSH
11271: LD_INT 2
11273: PUSH
11274: LD_INT 4
11276: PUSH
11277: LD_INT 5
11279: PUSH
11280: LD_INT 6
11282: PUSH
11283: LD_INT 7
11285: PUSH
11286: LD_INT 8
11288: PUSH
11289: LD_INT 11
11291: PUSH
11292: LD_INT 12
11294: PUSH
11295: LD_INT 15
11297: PUSH
11298: LD_INT 16
11300: PUSH
11301: LD_INT 20
11303: PUSH
11304: LD_INT 21
11306: PUSH
11307: LD_INT 22
11309: PUSH
11310: LD_INT 23
11312: PUSH
11313: LD_INT 25
11315: PUSH
11316: LD_INT 26
11318: PUSH
11319: LD_INT 30
11321: PUSH
11322: LD_INT 31
11324: PUSH
11325: LD_INT 32
11327: PUSH
11328: LD_INT 36
11330: PUSH
11331: EMPTY
11332: LIST
11333: LIST
11334: LIST
11335: LIST
11336: LIST
11337: LIST
11338: LIST
11339: LIST
11340: LIST
11341: LIST
11342: LIST
11343: LIST
11344: LIST
11345: LIST
11346: LIST
11347: LIST
11348: LIST
11349: LIST
11350: LIST
11351: LIST
11352: PUSH
11353: LD_INT 101
11355: PUSH
11356: LD_INT 102
11358: PUSH
11359: LD_INT 103
11361: PUSH
11362: LD_INT 105
11364: PUSH
11365: LD_INT 106
11367: PUSH
11368: LD_INT 108
11370: PUSH
11371: LD_INT 109
11373: PUSH
11374: LD_INT 112
11376: PUSH
11377: LD_INT 116
11379: PUSH
11380: LD_INT 117
11382: PUSH
11383: LD_INT 118
11385: PUSH
11386: EMPTY
11387: LIST
11388: LIST
11389: LIST
11390: LIST
11391: LIST
11392: LIST
11393: LIST
11394: LIST
11395: LIST
11396: LIST
11397: LIST
11398: PUSH
11399: EMPTY
11400: LIST
11401: LIST
11402: ST_TO_ADDR
11403: GO 13658
11405: LD_INT 9
11407: DOUBLE
11408: EQUAL
11409: IFTRUE 11413
11411: GO 11561
11413: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
11414: LD_ADDR_VAR 0 2
11418: PUSH
11419: LD_INT 2
11421: PUSH
11422: LD_INT 4
11424: PUSH
11425: LD_INT 5
11427: PUSH
11428: LD_INT 6
11430: PUSH
11431: LD_INT 7
11433: PUSH
11434: LD_INT 8
11436: PUSH
11437: LD_INT 11
11439: PUSH
11440: LD_INT 12
11442: PUSH
11443: LD_INT 15
11445: PUSH
11446: LD_INT 16
11448: PUSH
11449: LD_INT 20
11451: PUSH
11452: LD_INT 21
11454: PUSH
11455: LD_INT 22
11457: PUSH
11458: LD_INT 23
11460: PUSH
11461: LD_INT 25
11463: PUSH
11464: LD_INT 26
11466: PUSH
11467: LD_INT 28
11469: PUSH
11470: LD_INT 30
11472: PUSH
11473: LD_INT 31
11475: PUSH
11476: LD_INT 32
11478: PUSH
11479: LD_INT 36
11481: PUSH
11482: EMPTY
11483: LIST
11484: LIST
11485: LIST
11486: LIST
11487: LIST
11488: LIST
11489: LIST
11490: LIST
11491: LIST
11492: LIST
11493: LIST
11494: LIST
11495: LIST
11496: LIST
11497: LIST
11498: LIST
11499: LIST
11500: LIST
11501: LIST
11502: LIST
11503: LIST
11504: PUSH
11505: LD_INT 101
11507: PUSH
11508: LD_INT 102
11510: PUSH
11511: LD_INT 103
11513: PUSH
11514: LD_INT 105
11516: PUSH
11517: LD_INT 106
11519: PUSH
11520: LD_INT 108
11522: PUSH
11523: LD_INT 109
11525: PUSH
11526: LD_INT 112
11528: PUSH
11529: LD_INT 114
11531: PUSH
11532: LD_INT 116
11534: PUSH
11535: LD_INT 117
11537: PUSH
11538: LD_INT 118
11540: PUSH
11541: EMPTY
11542: LIST
11543: LIST
11544: LIST
11545: LIST
11546: LIST
11547: LIST
11548: LIST
11549: LIST
11550: LIST
11551: LIST
11552: LIST
11553: LIST
11554: PUSH
11555: EMPTY
11556: LIST
11557: LIST
11558: ST_TO_ADDR
11559: GO 13658
11561: LD_INT 10
11563: DOUBLE
11564: EQUAL
11565: IFTRUE 11569
11567: GO 11765
11569: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
11570: LD_ADDR_VAR 0 2
11574: PUSH
11575: LD_INT 2
11577: PUSH
11578: LD_INT 4
11580: PUSH
11581: LD_INT 5
11583: PUSH
11584: LD_INT 6
11586: PUSH
11587: LD_INT 7
11589: PUSH
11590: LD_INT 8
11592: PUSH
11593: LD_INT 9
11595: PUSH
11596: LD_INT 10
11598: PUSH
11599: LD_INT 11
11601: PUSH
11602: LD_INT 12
11604: PUSH
11605: LD_INT 13
11607: PUSH
11608: LD_INT 14
11610: PUSH
11611: LD_INT 15
11613: PUSH
11614: LD_INT 16
11616: PUSH
11617: LD_INT 17
11619: PUSH
11620: LD_INT 18
11622: PUSH
11623: LD_INT 19
11625: PUSH
11626: LD_INT 20
11628: PUSH
11629: LD_INT 21
11631: PUSH
11632: LD_INT 22
11634: PUSH
11635: LD_INT 23
11637: PUSH
11638: LD_INT 24
11640: PUSH
11641: LD_INT 25
11643: PUSH
11644: LD_INT 26
11646: PUSH
11647: LD_INT 28
11649: PUSH
11650: LD_INT 30
11652: PUSH
11653: LD_INT 31
11655: PUSH
11656: LD_INT 32
11658: PUSH
11659: LD_INT 36
11661: PUSH
11662: EMPTY
11663: LIST
11664: LIST
11665: LIST
11666: LIST
11667: LIST
11668: LIST
11669: LIST
11670: LIST
11671: LIST
11672: LIST
11673: LIST
11674: LIST
11675: LIST
11676: LIST
11677: LIST
11678: LIST
11679: LIST
11680: LIST
11681: LIST
11682: LIST
11683: LIST
11684: LIST
11685: LIST
11686: LIST
11687: LIST
11688: LIST
11689: LIST
11690: LIST
11691: LIST
11692: PUSH
11693: LD_INT 101
11695: PUSH
11696: LD_INT 102
11698: PUSH
11699: LD_INT 103
11701: PUSH
11702: LD_INT 104
11704: PUSH
11705: LD_INT 105
11707: PUSH
11708: LD_INT 106
11710: PUSH
11711: LD_INT 107
11713: PUSH
11714: LD_INT 108
11716: PUSH
11717: LD_INT 109
11719: PUSH
11720: LD_INT 110
11722: PUSH
11723: LD_INT 111
11725: PUSH
11726: LD_INT 112
11728: PUSH
11729: LD_INT 114
11731: PUSH
11732: LD_INT 116
11734: PUSH
11735: LD_INT 117
11737: PUSH
11738: LD_INT 118
11740: PUSH
11741: EMPTY
11742: LIST
11743: LIST
11744: LIST
11745: LIST
11746: LIST
11747: LIST
11748: LIST
11749: LIST
11750: LIST
11751: LIST
11752: LIST
11753: LIST
11754: LIST
11755: LIST
11756: LIST
11757: LIST
11758: PUSH
11759: EMPTY
11760: LIST
11761: LIST
11762: ST_TO_ADDR
11763: GO 13658
11765: LD_INT 11
11767: DOUBLE
11768: EQUAL
11769: IFTRUE 11773
11771: GO 11977
11773: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
11774: LD_ADDR_VAR 0 2
11778: PUSH
11779: LD_INT 2
11781: PUSH
11782: LD_INT 3
11784: PUSH
11785: LD_INT 4
11787: PUSH
11788: LD_INT 5
11790: PUSH
11791: LD_INT 6
11793: PUSH
11794: LD_INT 7
11796: PUSH
11797: LD_INT 8
11799: PUSH
11800: LD_INT 9
11802: PUSH
11803: LD_INT 10
11805: PUSH
11806: LD_INT 11
11808: PUSH
11809: LD_INT 12
11811: PUSH
11812: LD_INT 13
11814: PUSH
11815: LD_INT 14
11817: PUSH
11818: LD_INT 15
11820: PUSH
11821: LD_INT 16
11823: PUSH
11824: LD_INT 17
11826: PUSH
11827: LD_INT 18
11829: PUSH
11830: LD_INT 19
11832: PUSH
11833: LD_INT 20
11835: PUSH
11836: LD_INT 21
11838: PUSH
11839: LD_INT 22
11841: PUSH
11842: LD_INT 23
11844: PUSH
11845: LD_INT 24
11847: PUSH
11848: LD_INT 25
11850: PUSH
11851: LD_INT 26
11853: PUSH
11854: LD_INT 28
11856: PUSH
11857: LD_INT 30
11859: PUSH
11860: LD_INT 31
11862: PUSH
11863: LD_INT 32
11865: PUSH
11866: LD_INT 34
11868: PUSH
11869: LD_INT 36
11871: PUSH
11872: EMPTY
11873: LIST
11874: LIST
11875: LIST
11876: LIST
11877: LIST
11878: LIST
11879: LIST
11880: LIST
11881: LIST
11882: LIST
11883: LIST
11884: LIST
11885: LIST
11886: LIST
11887: LIST
11888: LIST
11889: LIST
11890: LIST
11891: LIST
11892: LIST
11893: LIST
11894: LIST
11895: LIST
11896: LIST
11897: LIST
11898: LIST
11899: LIST
11900: LIST
11901: LIST
11902: LIST
11903: LIST
11904: PUSH
11905: LD_INT 101
11907: PUSH
11908: LD_INT 102
11910: PUSH
11911: LD_INT 103
11913: PUSH
11914: LD_INT 104
11916: PUSH
11917: LD_INT 105
11919: PUSH
11920: LD_INT 106
11922: PUSH
11923: LD_INT 107
11925: PUSH
11926: LD_INT 108
11928: PUSH
11929: LD_INT 109
11931: PUSH
11932: LD_INT 110
11934: PUSH
11935: LD_INT 111
11937: PUSH
11938: LD_INT 112
11940: PUSH
11941: LD_INT 114
11943: PUSH
11944: LD_INT 116
11946: PUSH
11947: LD_INT 117
11949: PUSH
11950: LD_INT 118
11952: PUSH
11953: EMPTY
11954: LIST
11955: LIST
11956: LIST
11957: LIST
11958: LIST
11959: LIST
11960: LIST
11961: LIST
11962: LIST
11963: LIST
11964: LIST
11965: LIST
11966: LIST
11967: LIST
11968: LIST
11969: LIST
11970: PUSH
11971: EMPTY
11972: LIST
11973: LIST
11974: ST_TO_ADDR
11975: GO 13658
11977: LD_INT 12
11979: DOUBLE
11980: EQUAL
11981: IFTRUE 11985
11983: GO 12205
11985: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
11986: LD_ADDR_VAR 0 2
11990: PUSH
11991: LD_INT 1
11993: PUSH
11994: LD_INT 2
11996: PUSH
11997: LD_INT 3
11999: PUSH
12000: LD_INT 4
12002: PUSH
12003: LD_INT 5
12005: PUSH
12006: LD_INT 6
12008: PUSH
12009: LD_INT 7
12011: PUSH
12012: LD_INT 8
12014: PUSH
12015: LD_INT 9
12017: PUSH
12018: LD_INT 10
12020: PUSH
12021: LD_INT 11
12023: PUSH
12024: LD_INT 12
12026: PUSH
12027: LD_INT 13
12029: PUSH
12030: LD_INT 14
12032: PUSH
12033: LD_INT 15
12035: PUSH
12036: LD_INT 16
12038: PUSH
12039: LD_INT 17
12041: PUSH
12042: LD_INT 18
12044: PUSH
12045: LD_INT 19
12047: PUSH
12048: LD_INT 20
12050: PUSH
12051: LD_INT 21
12053: PUSH
12054: LD_INT 22
12056: PUSH
12057: LD_INT 23
12059: PUSH
12060: LD_INT 24
12062: PUSH
12063: LD_INT 25
12065: PUSH
12066: LD_INT 26
12068: PUSH
12069: LD_INT 27
12071: PUSH
12072: LD_INT 28
12074: PUSH
12075: LD_INT 30
12077: PUSH
12078: LD_INT 31
12080: PUSH
12081: LD_INT 32
12083: PUSH
12084: LD_INT 33
12086: PUSH
12087: LD_INT 34
12089: PUSH
12090: LD_INT 36
12092: PUSH
12093: EMPTY
12094: LIST
12095: LIST
12096: LIST
12097: LIST
12098: LIST
12099: LIST
12100: LIST
12101: LIST
12102: LIST
12103: LIST
12104: LIST
12105: LIST
12106: LIST
12107: LIST
12108: LIST
12109: LIST
12110: LIST
12111: LIST
12112: LIST
12113: LIST
12114: LIST
12115: LIST
12116: LIST
12117: LIST
12118: LIST
12119: LIST
12120: LIST
12121: LIST
12122: LIST
12123: LIST
12124: LIST
12125: LIST
12126: LIST
12127: LIST
12128: PUSH
12129: LD_INT 101
12131: PUSH
12132: LD_INT 102
12134: PUSH
12135: LD_INT 103
12137: PUSH
12138: LD_INT 104
12140: PUSH
12141: LD_INT 105
12143: PUSH
12144: LD_INT 106
12146: PUSH
12147: LD_INT 107
12149: PUSH
12150: LD_INT 108
12152: PUSH
12153: LD_INT 109
12155: PUSH
12156: LD_INT 110
12158: PUSH
12159: LD_INT 111
12161: PUSH
12162: LD_INT 112
12164: PUSH
12165: LD_INT 113
12167: PUSH
12168: LD_INT 114
12170: PUSH
12171: LD_INT 116
12173: PUSH
12174: LD_INT 117
12176: PUSH
12177: LD_INT 118
12179: PUSH
12180: EMPTY
12181: LIST
12182: LIST
12183: LIST
12184: LIST
12185: LIST
12186: LIST
12187: LIST
12188: LIST
12189: LIST
12190: LIST
12191: LIST
12192: LIST
12193: LIST
12194: LIST
12195: LIST
12196: LIST
12197: LIST
12198: PUSH
12199: EMPTY
12200: LIST
12201: LIST
12202: ST_TO_ADDR
12203: GO 13658
12205: LD_INT 13
12207: DOUBLE
12208: EQUAL
12209: IFTRUE 12213
12211: GO 12421
12213: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
12214: LD_ADDR_VAR 0 2
12218: PUSH
12219: LD_INT 1
12221: PUSH
12222: LD_INT 2
12224: PUSH
12225: LD_INT 3
12227: PUSH
12228: LD_INT 4
12230: PUSH
12231: LD_INT 5
12233: PUSH
12234: LD_INT 8
12236: PUSH
12237: LD_INT 9
12239: PUSH
12240: LD_INT 10
12242: PUSH
12243: LD_INT 11
12245: PUSH
12246: LD_INT 12
12248: PUSH
12249: LD_INT 14
12251: PUSH
12252: LD_INT 15
12254: PUSH
12255: LD_INT 16
12257: PUSH
12258: LD_INT 17
12260: PUSH
12261: LD_INT 18
12263: PUSH
12264: LD_INT 19
12266: PUSH
12267: LD_INT 20
12269: PUSH
12270: LD_INT 21
12272: PUSH
12273: LD_INT 22
12275: PUSH
12276: LD_INT 23
12278: PUSH
12279: LD_INT 24
12281: PUSH
12282: LD_INT 25
12284: PUSH
12285: LD_INT 26
12287: PUSH
12288: LD_INT 27
12290: PUSH
12291: LD_INT 28
12293: PUSH
12294: LD_INT 30
12296: PUSH
12297: LD_INT 31
12299: PUSH
12300: LD_INT 32
12302: PUSH
12303: LD_INT 33
12305: PUSH
12306: LD_INT 34
12308: PUSH
12309: LD_INT 36
12311: PUSH
12312: EMPTY
12313: LIST
12314: LIST
12315: LIST
12316: LIST
12317: LIST
12318: LIST
12319: LIST
12320: LIST
12321: LIST
12322: LIST
12323: LIST
12324: LIST
12325: LIST
12326: LIST
12327: LIST
12328: LIST
12329: LIST
12330: LIST
12331: LIST
12332: LIST
12333: LIST
12334: LIST
12335: LIST
12336: LIST
12337: LIST
12338: LIST
12339: LIST
12340: LIST
12341: LIST
12342: LIST
12343: LIST
12344: PUSH
12345: LD_INT 101
12347: PUSH
12348: LD_INT 102
12350: PUSH
12351: LD_INT 103
12353: PUSH
12354: LD_INT 104
12356: PUSH
12357: LD_INT 105
12359: PUSH
12360: LD_INT 106
12362: PUSH
12363: LD_INT 107
12365: PUSH
12366: LD_INT 108
12368: PUSH
12369: LD_INT 109
12371: PUSH
12372: LD_INT 110
12374: PUSH
12375: LD_INT 111
12377: PUSH
12378: LD_INT 112
12380: PUSH
12381: LD_INT 113
12383: PUSH
12384: LD_INT 114
12386: PUSH
12387: LD_INT 116
12389: PUSH
12390: LD_INT 117
12392: PUSH
12393: LD_INT 118
12395: PUSH
12396: EMPTY
12397: LIST
12398: LIST
12399: LIST
12400: LIST
12401: LIST
12402: LIST
12403: LIST
12404: LIST
12405: LIST
12406: LIST
12407: LIST
12408: LIST
12409: LIST
12410: LIST
12411: LIST
12412: LIST
12413: LIST
12414: PUSH
12415: EMPTY
12416: LIST
12417: LIST
12418: ST_TO_ADDR
12419: GO 13658
12421: LD_INT 14
12423: DOUBLE
12424: EQUAL
12425: IFTRUE 12429
12427: GO 12653
12429: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
12430: LD_ADDR_VAR 0 2
12434: PUSH
12435: LD_INT 1
12437: PUSH
12438: LD_INT 2
12440: PUSH
12441: LD_INT 3
12443: PUSH
12444: LD_INT 4
12446: PUSH
12447: LD_INT 5
12449: PUSH
12450: LD_INT 6
12452: PUSH
12453: LD_INT 7
12455: PUSH
12456: LD_INT 8
12458: PUSH
12459: LD_INT 9
12461: PUSH
12462: LD_INT 10
12464: PUSH
12465: LD_INT 11
12467: PUSH
12468: LD_INT 12
12470: PUSH
12471: LD_INT 13
12473: PUSH
12474: LD_INT 14
12476: PUSH
12477: LD_INT 15
12479: PUSH
12480: LD_INT 16
12482: PUSH
12483: LD_INT 17
12485: PUSH
12486: LD_INT 18
12488: PUSH
12489: LD_INT 19
12491: PUSH
12492: LD_INT 20
12494: PUSH
12495: LD_INT 21
12497: PUSH
12498: LD_INT 22
12500: PUSH
12501: LD_INT 23
12503: PUSH
12504: LD_INT 24
12506: PUSH
12507: LD_INT 25
12509: PUSH
12510: LD_INT 26
12512: PUSH
12513: LD_INT 27
12515: PUSH
12516: LD_INT 28
12518: PUSH
12519: LD_INT 29
12521: PUSH
12522: LD_INT 30
12524: PUSH
12525: LD_INT 31
12527: PUSH
12528: LD_INT 32
12530: PUSH
12531: LD_INT 33
12533: PUSH
12534: LD_INT 34
12536: PUSH
12537: LD_INT 36
12539: PUSH
12540: EMPTY
12541: LIST
12542: LIST
12543: LIST
12544: LIST
12545: LIST
12546: LIST
12547: LIST
12548: LIST
12549: LIST
12550: LIST
12551: LIST
12552: LIST
12553: LIST
12554: LIST
12555: LIST
12556: LIST
12557: LIST
12558: LIST
12559: LIST
12560: LIST
12561: LIST
12562: LIST
12563: LIST
12564: LIST
12565: LIST
12566: LIST
12567: LIST
12568: LIST
12569: LIST
12570: LIST
12571: LIST
12572: LIST
12573: LIST
12574: LIST
12575: LIST
12576: PUSH
12577: LD_INT 101
12579: PUSH
12580: LD_INT 102
12582: PUSH
12583: LD_INT 103
12585: PUSH
12586: LD_INT 104
12588: PUSH
12589: LD_INT 105
12591: PUSH
12592: LD_INT 106
12594: PUSH
12595: LD_INT 107
12597: PUSH
12598: LD_INT 108
12600: PUSH
12601: LD_INT 109
12603: PUSH
12604: LD_INT 110
12606: PUSH
12607: LD_INT 111
12609: PUSH
12610: LD_INT 112
12612: PUSH
12613: LD_INT 113
12615: PUSH
12616: LD_INT 114
12618: PUSH
12619: LD_INT 116
12621: PUSH
12622: LD_INT 117
12624: PUSH
12625: LD_INT 118
12627: PUSH
12628: EMPTY
12629: LIST
12630: LIST
12631: LIST
12632: LIST
12633: LIST
12634: LIST
12635: LIST
12636: LIST
12637: LIST
12638: LIST
12639: LIST
12640: LIST
12641: LIST
12642: LIST
12643: LIST
12644: LIST
12645: LIST
12646: PUSH
12647: EMPTY
12648: LIST
12649: LIST
12650: ST_TO_ADDR
12651: GO 13658
12653: LD_INT 15
12655: DOUBLE
12656: EQUAL
12657: IFTRUE 12661
12659: GO 12885
12661: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
12662: LD_ADDR_VAR 0 2
12666: PUSH
12667: LD_INT 1
12669: PUSH
12670: LD_INT 2
12672: PUSH
12673: LD_INT 3
12675: PUSH
12676: LD_INT 4
12678: PUSH
12679: LD_INT 5
12681: PUSH
12682: LD_INT 6
12684: PUSH
12685: LD_INT 7
12687: PUSH
12688: LD_INT 8
12690: PUSH
12691: LD_INT 9
12693: PUSH
12694: LD_INT 10
12696: PUSH
12697: LD_INT 11
12699: PUSH
12700: LD_INT 12
12702: PUSH
12703: LD_INT 13
12705: PUSH
12706: LD_INT 14
12708: PUSH
12709: LD_INT 15
12711: PUSH
12712: LD_INT 16
12714: PUSH
12715: LD_INT 17
12717: PUSH
12718: LD_INT 18
12720: PUSH
12721: LD_INT 19
12723: PUSH
12724: LD_INT 20
12726: PUSH
12727: LD_INT 21
12729: PUSH
12730: LD_INT 22
12732: PUSH
12733: LD_INT 23
12735: PUSH
12736: LD_INT 24
12738: PUSH
12739: LD_INT 25
12741: PUSH
12742: LD_INT 26
12744: PUSH
12745: LD_INT 27
12747: PUSH
12748: LD_INT 28
12750: PUSH
12751: LD_INT 29
12753: PUSH
12754: LD_INT 30
12756: PUSH
12757: LD_INT 31
12759: PUSH
12760: LD_INT 32
12762: PUSH
12763: LD_INT 33
12765: PUSH
12766: LD_INT 34
12768: PUSH
12769: LD_INT 36
12771: PUSH
12772: EMPTY
12773: LIST
12774: LIST
12775: LIST
12776: LIST
12777: LIST
12778: LIST
12779: LIST
12780: LIST
12781: LIST
12782: LIST
12783: LIST
12784: LIST
12785: LIST
12786: LIST
12787: LIST
12788: LIST
12789: LIST
12790: LIST
12791: LIST
12792: LIST
12793: LIST
12794: LIST
12795: LIST
12796: LIST
12797: LIST
12798: LIST
12799: LIST
12800: LIST
12801: LIST
12802: LIST
12803: LIST
12804: LIST
12805: LIST
12806: LIST
12807: LIST
12808: PUSH
12809: LD_INT 101
12811: PUSH
12812: LD_INT 102
12814: PUSH
12815: LD_INT 103
12817: PUSH
12818: LD_INT 104
12820: PUSH
12821: LD_INT 105
12823: PUSH
12824: LD_INT 106
12826: PUSH
12827: LD_INT 107
12829: PUSH
12830: LD_INT 108
12832: PUSH
12833: LD_INT 109
12835: PUSH
12836: LD_INT 110
12838: PUSH
12839: LD_INT 111
12841: PUSH
12842: LD_INT 112
12844: PUSH
12845: LD_INT 113
12847: PUSH
12848: LD_INT 114
12850: PUSH
12851: LD_INT 116
12853: PUSH
12854: LD_INT 117
12856: PUSH
12857: LD_INT 118
12859: PUSH
12860: EMPTY
12861: LIST
12862: LIST
12863: LIST
12864: LIST
12865: LIST
12866: LIST
12867: LIST
12868: LIST
12869: LIST
12870: LIST
12871: LIST
12872: LIST
12873: LIST
12874: LIST
12875: LIST
12876: LIST
12877: LIST
12878: PUSH
12879: EMPTY
12880: LIST
12881: LIST
12882: ST_TO_ADDR
12883: GO 13658
12885: LD_INT 16
12887: DOUBLE
12888: EQUAL
12889: IFTRUE 12893
12891: GO 13029
12893: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
12894: LD_ADDR_VAR 0 2
12898: PUSH
12899: LD_INT 2
12901: PUSH
12902: LD_INT 4
12904: PUSH
12905: LD_INT 5
12907: PUSH
12908: LD_INT 7
12910: PUSH
12911: LD_INT 11
12913: PUSH
12914: LD_INT 12
12916: PUSH
12917: LD_INT 15
12919: PUSH
12920: LD_INT 16
12922: PUSH
12923: LD_INT 20
12925: PUSH
12926: LD_INT 21
12928: PUSH
12929: LD_INT 22
12931: PUSH
12932: LD_INT 23
12934: PUSH
12935: LD_INT 25
12937: PUSH
12938: LD_INT 26
12940: PUSH
12941: LD_INT 30
12943: PUSH
12944: LD_INT 31
12946: PUSH
12947: LD_INT 32
12949: PUSH
12950: LD_INT 33
12952: PUSH
12953: LD_INT 34
12955: PUSH
12956: EMPTY
12957: LIST
12958: LIST
12959: LIST
12960: LIST
12961: LIST
12962: LIST
12963: LIST
12964: LIST
12965: LIST
12966: LIST
12967: LIST
12968: LIST
12969: LIST
12970: LIST
12971: LIST
12972: LIST
12973: LIST
12974: LIST
12975: LIST
12976: PUSH
12977: LD_INT 101
12979: PUSH
12980: LD_INT 102
12982: PUSH
12983: LD_INT 103
12985: PUSH
12986: LD_INT 106
12988: PUSH
12989: LD_INT 108
12991: PUSH
12992: LD_INT 112
12994: PUSH
12995: LD_INT 113
12997: PUSH
12998: LD_INT 114
13000: PUSH
13001: LD_INT 116
13003: PUSH
13004: LD_INT 117
13006: PUSH
13007: LD_INT 118
13009: PUSH
13010: EMPTY
13011: LIST
13012: LIST
13013: LIST
13014: LIST
13015: LIST
13016: LIST
13017: LIST
13018: LIST
13019: LIST
13020: LIST
13021: LIST
13022: PUSH
13023: EMPTY
13024: LIST
13025: LIST
13026: ST_TO_ADDR
13027: GO 13658
13029: LD_INT 17
13031: DOUBLE
13032: EQUAL
13033: IFTRUE 13037
13035: GO 13261
13037: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
13038: LD_ADDR_VAR 0 2
13042: PUSH
13043: LD_INT 1
13045: PUSH
13046: LD_INT 2
13048: PUSH
13049: LD_INT 3
13051: PUSH
13052: LD_INT 4
13054: PUSH
13055: LD_INT 5
13057: PUSH
13058: LD_INT 6
13060: PUSH
13061: LD_INT 7
13063: PUSH
13064: LD_INT 8
13066: PUSH
13067: LD_INT 9
13069: PUSH
13070: LD_INT 10
13072: PUSH
13073: LD_INT 11
13075: PUSH
13076: LD_INT 12
13078: PUSH
13079: LD_INT 13
13081: PUSH
13082: LD_INT 14
13084: PUSH
13085: LD_INT 15
13087: PUSH
13088: LD_INT 16
13090: PUSH
13091: LD_INT 17
13093: PUSH
13094: LD_INT 18
13096: PUSH
13097: LD_INT 19
13099: PUSH
13100: LD_INT 20
13102: PUSH
13103: LD_INT 21
13105: PUSH
13106: LD_INT 22
13108: PUSH
13109: LD_INT 23
13111: PUSH
13112: LD_INT 24
13114: PUSH
13115: LD_INT 25
13117: PUSH
13118: LD_INT 26
13120: PUSH
13121: LD_INT 27
13123: PUSH
13124: LD_INT 28
13126: PUSH
13127: LD_INT 29
13129: PUSH
13130: LD_INT 30
13132: PUSH
13133: LD_INT 31
13135: PUSH
13136: LD_INT 32
13138: PUSH
13139: LD_INT 33
13141: PUSH
13142: LD_INT 34
13144: PUSH
13145: LD_INT 36
13147: PUSH
13148: EMPTY
13149: LIST
13150: LIST
13151: LIST
13152: LIST
13153: LIST
13154: LIST
13155: LIST
13156: LIST
13157: LIST
13158: LIST
13159: LIST
13160: LIST
13161: LIST
13162: LIST
13163: LIST
13164: LIST
13165: LIST
13166: LIST
13167: LIST
13168: LIST
13169: LIST
13170: LIST
13171: LIST
13172: LIST
13173: LIST
13174: LIST
13175: LIST
13176: LIST
13177: LIST
13178: LIST
13179: LIST
13180: LIST
13181: LIST
13182: LIST
13183: LIST
13184: PUSH
13185: LD_INT 101
13187: PUSH
13188: LD_INT 102
13190: PUSH
13191: LD_INT 103
13193: PUSH
13194: LD_INT 104
13196: PUSH
13197: LD_INT 105
13199: PUSH
13200: LD_INT 106
13202: PUSH
13203: LD_INT 107
13205: PUSH
13206: LD_INT 108
13208: PUSH
13209: LD_INT 109
13211: PUSH
13212: LD_INT 110
13214: PUSH
13215: LD_INT 111
13217: PUSH
13218: LD_INT 112
13220: PUSH
13221: LD_INT 113
13223: PUSH
13224: LD_INT 114
13226: PUSH
13227: LD_INT 116
13229: PUSH
13230: LD_INT 117
13232: PUSH
13233: LD_INT 118
13235: PUSH
13236: EMPTY
13237: LIST
13238: LIST
13239: LIST
13240: LIST
13241: LIST
13242: LIST
13243: LIST
13244: LIST
13245: LIST
13246: LIST
13247: LIST
13248: LIST
13249: LIST
13250: LIST
13251: LIST
13252: LIST
13253: LIST
13254: PUSH
13255: EMPTY
13256: LIST
13257: LIST
13258: ST_TO_ADDR
13259: GO 13658
13261: LD_INT 18
13263: DOUBLE
13264: EQUAL
13265: IFTRUE 13269
13267: GO 13417
13269: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
13270: LD_ADDR_VAR 0 2
13274: PUSH
13275: LD_INT 2
13277: PUSH
13278: LD_INT 4
13280: PUSH
13281: LD_INT 5
13283: PUSH
13284: LD_INT 7
13286: PUSH
13287: LD_INT 11
13289: PUSH
13290: LD_INT 12
13292: PUSH
13293: LD_INT 15
13295: PUSH
13296: LD_INT 16
13298: PUSH
13299: LD_INT 20
13301: PUSH
13302: LD_INT 21
13304: PUSH
13305: LD_INT 22
13307: PUSH
13308: LD_INT 23
13310: PUSH
13311: LD_INT 25
13313: PUSH
13314: LD_INT 26
13316: PUSH
13317: LD_INT 30
13319: PUSH
13320: LD_INT 31
13322: PUSH
13323: LD_INT 32
13325: PUSH
13326: LD_INT 33
13328: PUSH
13329: LD_INT 34
13331: PUSH
13332: LD_INT 35
13334: PUSH
13335: LD_INT 36
13337: PUSH
13338: EMPTY
13339: LIST
13340: LIST
13341: LIST
13342: LIST
13343: LIST
13344: LIST
13345: LIST
13346: LIST
13347: LIST
13348: LIST
13349: LIST
13350: LIST
13351: LIST
13352: LIST
13353: LIST
13354: LIST
13355: LIST
13356: LIST
13357: LIST
13358: LIST
13359: LIST
13360: PUSH
13361: LD_INT 101
13363: PUSH
13364: LD_INT 102
13366: PUSH
13367: LD_INT 103
13369: PUSH
13370: LD_INT 106
13372: PUSH
13373: LD_INT 108
13375: PUSH
13376: LD_INT 112
13378: PUSH
13379: LD_INT 113
13381: PUSH
13382: LD_INT 114
13384: PUSH
13385: LD_INT 115
13387: PUSH
13388: LD_INT 116
13390: PUSH
13391: LD_INT 117
13393: PUSH
13394: LD_INT 118
13396: PUSH
13397: EMPTY
13398: LIST
13399: LIST
13400: LIST
13401: LIST
13402: LIST
13403: LIST
13404: LIST
13405: LIST
13406: LIST
13407: LIST
13408: LIST
13409: LIST
13410: PUSH
13411: EMPTY
13412: LIST
13413: LIST
13414: ST_TO_ADDR
13415: GO 13658
13417: LD_INT 19
13419: DOUBLE
13420: EQUAL
13421: IFTRUE 13425
13423: GO 13657
13425: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
13426: LD_ADDR_VAR 0 2
13430: PUSH
13431: LD_INT 1
13433: PUSH
13434: LD_INT 2
13436: PUSH
13437: LD_INT 3
13439: PUSH
13440: LD_INT 4
13442: PUSH
13443: LD_INT 5
13445: PUSH
13446: LD_INT 6
13448: PUSH
13449: LD_INT 7
13451: PUSH
13452: LD_INT 8
13454: PUSH
13455: LD_INT 9
13457: PUSH
13458: LD_INT 10
13460: PUSH
13461: LD_INT 11
13463: PUSH
13464: LD_INT 12
13466: PUSH
13467: LD_INT 13
13469: PUSH
13470: LD_INT 14
13472: PUSH
13473: LD_INT 15
13475: PUSH
13476: LD_INT 16
13478: PUSH
13479: LD_INT 17
13481: PUSH
13482: LD_INT 18
13484: PUSH
13485: LD_INT 19
13487: PUSH
13488: LD_INT 20
13490: PUSH
13491: LD_INT 21
13493: PUSH
13494: LD_INT 22
13496: PUSH
13497: LD_INT 23
13499: PUSH
13500: LD_INT 24
13502: PUSH
13503: LD_INT 25
13505: PUSH
13506: LD_INT 26
13508: PUSH
13509: LD_INT 27
13511: PUSH
13512: LD_INT 28
13514: PUSH
13515: LD_INT 29
13517: PUSH
13518: LD_INT 30
13520: PUSH
13521: LD_INT 31
13523: PUSH
13524: LD_INT 32
13526: PUSH
13527: LD_INT 33
13529: PUSH
13530: LD_INT 34
13532: PUSH
13533: LD_INT 35
13535: PUSH
13536: LD_INT 36
13538: PUSH
13539: EMPTY
13540: LIST
13541: LIST
13542: LIST
13543: LIST
13544: LIST
13545: LIST
13546: LIST
13547: LIST
13548: LIST
13549: LIST
13550: LIST
13551: LIST
13552: LIST
13553: LIST
13554: LIST
13555: LIST
13556: LIST
13557: LIST
13558: LIST
13559: LIST
13560: LIST
13561: LIST
13562: LIST
13563: LIST
13564: LIST
13565: LIST
13566: LIST
13567: LIST
13568: LIST
13569: LIST
13570: LIST
13571: LIST
13572: LIST
13573: LIST
13574: LIST
13575: LIST
13576: PUSH
13577: LD_INT 101
13579: PUSH
13580: LD_INT 102
13582: PUSH
13583: LD_INT 103
13585: PUSH
13586: LD_INT 104
13588: PUSH
13589: LD_INT 105
13591: PUSH
13592: LD_INT 106
13594: PUSH
13595: LD_INT 107
13597: PUSH
13598: LD_INT 108
13600: PUSH
13601: LD_INT 109
13603: PUSH
13604: LD_INT 110
13606: PUSH
13607: LD_INT 111
13609: PUSH
13610: LD_INT 112
13612: PUSH
13613: LD_INT 113
13615: PUSH
13616: LD_INT 114
13618: PUSH
13619: LD_INT 115
13621: PUSH
13622: LD_INT 116
13624: PUSH
13625: LD_INT 117
13627: PUSH
13628: LD_INT 118
13630: PUSH
13631: EMPTY
13632: LIST
13633: LIST
13634: LIST
13635: LIST
13636: LIST
13637: LIST
13638: LIST
13639: LIST
13640: LIST
13641: LIST
13642: LIST
13643: LIST
13644: LIST
13645: LIST
13646: LIST
13647: LIST
13648: LIST
13649: LIST
13650: PUSH
13651: EMPTY
13652: LIST
13653: LIST
13654: ST_TO_ADDR
13655: GO 13658
13657: POP
// end else
13658: GO 13889
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
13660: LD_ADDR_VAR 0 2
13664: PUSH
13665: LD_INT 1
13667: PUSH
13668: LD_INT 2
13670: PUSH
13671: LD_INT 3
13673: PUSH
13674: LD_INT 4
13676: PUSH
13677: LD_INT 5
13679: PUSH
13680: LD_INT 6
13682: PUSH
13683: LD_INT 7
13685: PUSH
13686: LD_INT 8
13688: PUSH
13689: LD_INT 9
13691: PUSH
13692: LD_INT 10
13694: PUSH
13695: LD_INT 11
13697: PUSH
13698: LD_INT 12
13700: PUSH
13701: LD_INT 13
13703: PUSH
13704: LD_INT 14
13706: PUSH
13707: LD_INT 15
13709: PUSH
13710: LD_INT 16
13712: PUSH
13713: LD_INT 17
13715: PUSH
13716: LD_INT 18
13718: PUSH
13719: LD_INT 19
13721: PUSH
13722: LD_INT 20
13724: PUSH
13725: LD_INT 21
13727: PUSH
13728: LD_INT 22
13730: PUSH
13731: LD_INT 23
13733: PUSH
13734: LD_INT 24
13736: PUSH
13737: LD_INT 25
13739: PUSH
13740: LD_INT 26
13742: PUSH
13743: LD_INT 27
13745: PUSH
13746: LD_INT 28
13748: PUSH
13749: LD_INT 29
13751: PUSH
13752: LD_INT 30
13754: PUSH
13755: LD_INT 31
13757: PUSH
13758: LD_INT 32
13760: PUSH
13761: LD_INT 33
13763: PUSH
13764: LD_INT 34
13766: PUSH
13767: LD_INT 35
13769: PUSH
13770: LD_INT 36
13772: PUSH
13773: EMPTY
13774: LIST
13775: LIST
13776: LIST
13777: LIST
13778: LIST
13779: LIST
13780: LIST
13781: LIST
13782: LIST
13783: LIST
13784: LIST
13785: LIST
13786: LIST
13787: LIST
13788: LIST
13789: LIST
13790: LIST
13791: LIST
13792: LIST
13793: LIST
13794: LIST
13795: LIST
13796: LIST
13797: LIST
13798: LIST
13799: LIST
13800: LIST
13801: LIST
13802: LIST
13803: LIST
13804: LIST
13805: LIST
13806: LIST
13807: LIST
13808: LIST
13809: LIST
13810: PUSH
13811: LD_INT 101
13813: PUSH
13814: LD_INT 102
13816: PUSH
13817: LD_INT 103
13819: PUSH
13820: LD_INT 104
13822: PUSH
13823: LD_INT 105
13825: PUSH
13826: LD_INT 106
13828: PUSH
13829: LD_INT 107
13831: PUSH
13832: LD_INT 108
13834: PUSH
13835: LD_INT 109
13837: PUSH
13838: LD_INT 110
13840: PUSH
13841: LD_INT 111
13843: PUSH
13844: LD_INT 112
13846: PUSH
13847: LD_INT 113
13849: PUSH
13850: LD_INT 114
13852: PUSH
13853: LD_INT 115
13855: PUSH
13856: LD_INT 116
13858: PUSH
13859: LD_INT 117
13861: PUSH
13862: LD_INT 118
13864: PUSH
13865: EMPTY
13866: LIST
13867: LIST
13868: LIST
13869: LIST
13870: LIST
13871: LIST
13872: LIST
13873: LIST
13874: LIST
13875: LIST
13876: LIST
13877: LIST
13878: LIST
13879: LIST
13880: LIST
13881: LIST
13882: LIST
13883: LIST
13884: PUSH
13885: EMPTY
13886: LIST
13887: LIST
13888: ST_TO_ADDR
// if result then
13889: LD_VAR 0 2
13893: IFFALSE 14679
// begin normal :=  ;
13895: LD_ADDR_VAR 0 5
13899: PUSH
13900: LD_STRING 
13902: ST_TO_ADDR
// hardcore :=  ;
13903: LD_ADDR_VAR 0 6
13907: PUSH
13908: LD_STRING 
13910: ST_TO_ADDR
// active :=  ;
13911: LD_ADDR_VAR 0 7
13915: PUSH
13916: LD_STRING 
13918: ST_TO_ADDR
// for i = 1 to normalCounter do
13919: LD_ADDR_VAR 0 8
13923: PUSH
13924: DOUBLE
13925: LD_INT 1
13927: DEC
13928: ST_TO_ADDR
13929: LD_EXP 54
13933: PUSH
13934: FOR_TO
13935: IFFALSE 14036
// begin tmp := 0 ;
13937: LD_ADDR_VAR 0 3
13941: PUSH
13942: LD_STRING 0
13944: ST_TO_ADDR
// if result [ 1 ] then
13945: LD_VAR 0 2
13949: PUSH
13950: LD_INT 1
13952: ARRAY
13953: IFFALSE 14018
// if result [ 1 ] [ 1 ] = i then
13955: LD_VAR 0 2
13959: PUSH
13960: LD_INT 1
13962: ARRAY
13963: PUSH
13964: LD_INT 1
13966: ARRAY
13967: PUSH
13968: LD_VAR 0 8
13972: EQUAL
13973: IFFALSE 14018
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
13975: LD_ADDR_VAR 0 2
13979: PUSH
13980: LD_VAR 0 2
13984: PPUSH
13985: LD_INT 1
13987: PPUSH
13988: LD_VAR 0 2
13992: PUSH
13993: LD_INT 1
13995: ARRAY
13996: PPUSH
13997: LD_INT 1
13999: PPUSH
14000: CALL_OW 3
14004: PPUSH
14005: CALL_OW 1
14009: ST_TO_ADDR
// tmp := 1 ;
14010: LD_ADDR_VAR 0 3
14014: PUSH
14015: LD_STRING 1
14017: ST_TO_ADDR
// end ; normal := normal & tmp ;
14018: LD_ADDR_VAR 0 5
14022: PUSH
14023: LD_VAR 0 5
14027: PUSH
14028: LD_VAR 0 3
14032: STR
14033: ST_TO_ADDR
// end ;
14034: GO 13934
14036: POP
14037: POP
// for i = 1 to hardcoreCounter do
14038: LD_ADDR_VAR 0 8
14042: PUSH
14043: DOUBLE
14044: LD_INT 1
14046: DEC
14047: ST_TO_ADDR
14048: LD_EXP 55
14052: PUSH
14053: FOR_TO
14054: IFFALSE 14159
// begin tmp := 0 ;
14056: LD_ADDR_VAR 0 3
14060: PUSH
14061: LD_STRING 0
14063: ST_TO_ADDR
// if result [ 2 ] then
14064: LD_VAR 0 2
14068: PUSH
14069: LD_INT 2
14071: ARRAY
14072: IFFALSE 14141
// if result [ 2 ] [ 1 ] = 100 + i then
14074: LD_VAR 0 2
14078: PUSH
14079: LD_INT 2
14081: ARRAY
14082: PUSH
14083: LD_INT 1
14085: ARRAY
14086: PUSH
14087: LD_INT 100
14089: PUSH
14090: LD_VAR 0 8
14094: PLUS
14095: EQUAL
14096: IFFALSE 14141
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
14098: LD_ADDR_VAR 0 2
14102: PUSH
14103: LD_VAR 0 2
14107: PPUSH
14108: LD_INT 2
14110: PPUSH
14111: LD_VAR 0 2
14115: PUSH
14116: LD_INT 2
14118: ARRAY
14119: PPUSH
14120: LD_INT 1
14122: PPUSH
14123: CALL_OW 3
14127: PPUSH
14128: CALL_OW 1
14132: ST_TO_ADDR
// tmp := 1 ;
14133: LD_ADDR_VAR 0 3
14137: PUSH
14138: LD_STRING 1
14140: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
14141: LD_ADDR_VAR 0 6
14145: PUSH
14146: LD_VAR 0 6
14150: PUSH
14151: LD_VAR 0 3
14155: STR
14156: ST_TO_ADDR
// end ;
14157: GO 14053
14159: POP
14160: POP
// if isGameLoad then
14161: LD_VAR 0 1
14165: IFFALSE 14640
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
14167: LD_ADDR_VAR 0 4
14171: PUSH
14172: LD_EXP 58
14176: PUSH
14177: LD_EXP 57
14181: PUSH
14182: LD_EXP 59
14186: PUSH
14187: LD_EXP 56
14191: PUSH
14192: LD_EXP 60
14196: PUSH
14197: LD_EXP 61
14201: PUSH
14202: LD_EXP 62
14206: PUSH
14207: LD_EXP 63
14211: PUSH
14212: LD_EXP 64
14216: PUSH
14217: LD_EXP 65
14221: PUSH
14222: LD_EXP 66
14226: PUSH
14227: LD_EXP 67
14231: PUSH
14232: LD_EXP 68
14236: PUSH
14237: LD_EXP 69
14241: PUSH
14242: LD_EXP 77
14246: PUSH
14247: LD_EXP 78
14251: PUSH
14252: LD_EXP 79
14256: PUSH
14257: LD_EXP 80
14261: PUSH
14262: LD_EXP 82
14266: PUSH
14267: LD_EXP 83
14271: PUSH
14272: LD_EXP 84
14276: PUSH
14277: LD_EXP 87
14281: PUSH
14282: LD_EXP 89
14286: PUSH
14287: LD_EXP 90
14291: PUSH
14292: LD_EXP 91
14296: PUSH
14297: LD_EXP 93
14301: PUSH
14302: LD_EXP 94
14306: PUSH
14307: LD_EXP 97
14311: PUSH
14312: LD_EXP 98
14316: PUSH
14317: LD_EXP 99
14321: PUSH
14322: LD_EXP 100
14326: PUSH
14327: LD_EXP 101
14331: PUSH
14332: LD_EXP 102
14336: PUSH
14337: LD_EXP 103
14341: PUSH
14342: LD_EXP 104
14346: PUSH
14347: LD_EXP 105
14351: PUSH
14352: LD_EXP 70
14356: PUSH
14357: LD_EXP 71
14361: PUSH
14362: LD_EXP 74
14366: PUSH
14367: LD_EXP 75
14371: PUSH
14372: LD_EXP 76
14376: PUSH
14377: LD_EXP 72
14381: PUSH
14382: LD_EXP 73
14386: PUSH
14387: LD_EXP 81
14391: PUSH
14392: LD_EXP 85
14396: PUSH
14397: LD_EXP 86
14401: PUSH
14402: LD_EXP 88
14406: PUSH
14407: LD_EXP 92
14411: PUSH
14412: LD_EXP 95
14416: PUSH
14417: LD_EXP 96
14421: PUSH
14422: LD_EXP 106
14426: PUSH
14427: LD_EXP 107
14431: PUSH
14432: LD_EXP 108
14436: PUSH
14437: LD_EXP 109
14441: PUSH
14442: EMPTY
14443: LIST
14444: LIST
14445: LIST
14446: LIST
14447: LIST
14448: LIST
14449: LIST
14450: LIST
14451: LIST
14452: LIST
14453: LIST
14454: LIST
14455: LIST
14456: LIST
14457: LIST
14458: LIST
14459: LIST
14460: LIST
14461: LIST
14462: LIST
14463: LIST
14464: LIST
14465: LIST
14466: LIST
14467: LIST
14468: LIST
14469: LIST
14470: LIST
14471: LIST
14472: LIST
14473: LIST
14474: LIST
14475: LIST
14476: LIST
14477: LIST
14478: LIST
14479: LIST
14480: LIST
14481: LIST
14482: LIST
14483: LIST
14484: LIST
14485: LIST
14486: LIST
14487: LIST
14488: LIST
14489: LIST
14490: LIST
14491: LIST
14492: LIST
14493: LIST
14494: LIST
14495: LIST
14496: LIST
14497: ST_TO_ADDR
// tmp :=  ;
14498: LD_ADDR_VAR 0 3
14502: PUSH
14503: LD_STRING 
14505: ST_TO_ADDR
// for i = 1 to normalCounter do
14506: LD_ADDR_VAR 0 8
14510: PUSH
14511: DOUBLE
14512: LD_INT 1
14514: DEC
14515: ST_TO_ADDR
14516: LD_EXP 54
14520: PUSH
14521: FOR_TO
14522: IFFALSE 14558
// begin if flags [ i ] then
14524: LD_VAR 0 4
14528: PUSH
14529: LD_VAR 0 8
14533: ARRAY
14534: IFFALSE 14556
// tmp := tmp & i & ; ;
14536: LD_ADDR_VAR 0 3
14540: PUSH
14541: LD_VAR 0 3
14545: PUSH
14546: LD_VAR 0 8
14550: STR
14551: PUSH
14552: LD_STRING ;
14554: STR
14555: ST_TO_ADDR
// end ;
14556: GO 14521
14558: POP
14559: POP
// for i = 1 to hardcoreCounter do
14560: LD_ADDR_VAR 0 8
14564: PUSH
14565: DOUBLE
14566: LD_INT 1
14568: DEC
14569: ST_TO_ADDR
14570: LD_EXP 55
14574: PUSH
14575: FOR_TO
14576: IFFALSE 14622
// begin if flags [ normalCounter + i ] then
14578: LD_VAR 0 4
14582: PUSH
14583: LD_EXP 54
14587: PUSH
14588: LD_VAR 0 8
14592: PLUS
14593: ARRAY
14594: IFFALSE 14620
// tmp := tmp & ( 100 + i ) & ; ;
14596: LD_ADDR_VAR 0 3
14600: PUSH
14601: LD_VAR 0 3
14605: PUSH
14606: LD_INT 100
14608: PUSH
14609: LD_VAR 0 8
14613: PLUS
14614: STR
14615: PUSH
14616: LD_STRING ;
14618: STR
14619: ST_TO_ADDR
// end ;
14620: GO 14575
14622: POP
14623: POP
// if tmp then
14624: LD_VAR 0 3
14628: IFFALSE 14640
// active := tmp ;
14630: LD_ADDR_VAR 0 7
14634: PUSH
14635: LD_VAR 0 3
14639: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
14640: LD_STRING getStreamItemsFromMission("
14642: PUSH
14643: LD_VAR 0 5
14647: STR
14648: PUSH
14649: LD_STRING ","
14651: STR
14652: PUSH
14653: LD_VAR 0 6
14657: STR
14658: PUSH
14659: LD_STRING ","
14661: STR
14662: PUSH
14663: LD_VAR 0 7
14667: STR
14668: PUSH
14669: LD_STRING ")
14671: STR
14672: PPUSH
14673: CALL_OW 559
// end else
14677: GO 14686
// ToLua ( getStreamItemsFromMission("","","") ) ;
14679: LD_STRING getStreamItemsFromMission("","","")
14681: PPUSH
14682: CALL_OW 559
// end ;
14686: LD_VAR 0 2
14690: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
14691: LD_EXP 53
14695: PUSH
14696: LD_EXP 58
14700: AND
14701: IFFALSE 14825
14703: GO 14705
14705: DISABLE
14706: LD_INT 0
14708: PPUSH
14709: PPUSH
// begin enable ;
14710: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
14711: LD_ADDR_VAR 0 2
14715: PUSH
14716: LD_INT 22
14718: PUSH
14719: LD_OWVAR 2
14723: PUSH
14724: EMPTY
14725: LIST
14726: LIST
14727: PUSH
14728: LD_INT 2
14730: PUSH
14731: LD_INT 34
14733: PUSH
14734: LD_INT 7
14736: PUSH
14737: EMPTY
14738: LIST
14739: LIST
14740: PUSH
14741: LD_INT 34
14743: PUSH
14744: LD_INT 45
14746: PUSH
14747: EMPTY
14748: LIST
14749: LIST
14750: PUSH
14751: LD_INT 34
14753: PUSH
14754: LD_INT 28
14756: PUSH
14757: EMPTY
14758: LIST
14759: LIST
14760: PUSH
14761: LD_INT 34
14763: PUSH
14764: LD_INT 47
14766: PUSH
14767: EMPTY
14768: LIST
14769: LIST
14770: PUSH
14771: EMPTY
14772: LIST
14773: LIST
14774: LIST
14775: LIST
14776: LIST
14777: PUSH
14778: EMPTY
14779: LIST
14780: LIST
14781: PPUSH
14782: CALL_OW 69
14786: ST_TO_ADDR
// if not tmp then
14787: LD_VAR 0 2
14791: NOT
14792: IFFALSE 14796
// exit ;
14794: GO 14825
// for i in tmp do
14796: LD_ADDR_VAR 0 1
14800: PUSH
14801: LD_VAR 0 2
14805: PUSH
14806: FOR_IN
14807: IFFALSE 14823
// begin SetLives ( i , 0 ) ;
14809: LD_VAR 0 1
14813: PPUSH
14814: LD_INT 0
14816: PPUSH
14817: CALL_OW 234
// end ;
14821: GO 14806
14823: POP
14824: POP
// end ;
14825: PPOPN 2
14827: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
14828: LD_EXP 53
14832: PUSH
14833: LD_EXP 59
14837: AND
14838: IFFALSE 14922
14840: GO 14842
14842: DISABLE
14843: LD_INT 0
14845: PPUSH
14846: PPUSH
// begin enable ;
14847: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
14848: LD_ADDR_VAR 0 2
14852: PUSH
14853: LD_INT 22
14855: PUSH
14856: LD_OWVAR 2
14860: PUSH
14861: EMPTY
14862: LIST
14863: LIST
14864: PUSH
14865: LD_INT 32
14867: PUSH
14868: LD_INT 3
14870: PUSH
14871: EMPTY
14872: LIST
14873: LIST
14874: PUSH
14875: EMPTY
14876: LIST
14877: LIST
14878: PPUSH
14879: CALL_OW 69
14883: ST_TO_ADDR
// if not tmp then
14884: LD_VAR 0 2
14888: NOT
14889: IFFALSE 14893
// exit ;
14891: GO 14922
// for i in tmp do
14893: LD_ADDR_VAR 0 1
14897: PUSH
14898: LD_VAR 0 2
14902: PUSH
14903: FOR_IN
14904: IFFALSE 14920
// begin SetLives ( i , 0 ) ;
14906: LD_VAR 0 1
14910: PPUSH
14911: LD_INT 0
14913: PPUSH
14914: CALL_OW 234
// end ;
14918: GO 14903
14920: POP
14921: POP
// end ;
14922: PPOPN 2
14924: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
14925: LD_EXP 53
14929: PUSH
14930: LD_EXP 56
14934: AND
14935: IFFALSE 15028
14937: GO 14939
14939: DISABLE
14940: LD_INT 0
14942: PPUSH
// begin enable ;
14943: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
14944: LD_ADDR_VAR 0 1
14948: PUSH
14949: LD_INT 22
14951: PUSH
14952: LD_OWVAR 2
14956: PUSH
14957: EMPTY
14958: LIST
14959: LIST
14960: PUSH
14961: LD_INT 2
14963: PUSH
14964: LD_INT 25
14966: PUSH
14967: LD_INT 5
14969: PUSH
14970: EMPTY
14971: LIST
14972: LIST
14973: PUSH
14974: LD_INT 25
14976: PUSH
14977: LD_INT 9
14979: PUSH
14980: EMPTY
14981: LIST
14982: LIST
14983: PUSH
14984: LD_INT 25
14986: PUSH
14987: LD_INT 8
14989: PUSH
14990: EMPTY
14991: LIST
14992: LIST
14993: PUSH
14994: EMPTY
14995: LIST
14996: LIST
14997: LIST
14998: LIST
14999: PUSH
15000: EMPTY
15001: LIST
15002: LIST
15003: PPUSH
15004: CALL_OW 69
15008: PUSH
15009: FOR_IN
15010: IFFALSE 15026
// begin SetClass ( i , 1 ) ;
15012: LD_VAR 0 1
15016: PPUSH
15017: LD_INT 1
15019: PPUSH
15020: CALL_OW 336
// end ;
15024: GO 15009
15026: POP
15027: POP
// end ;
15028: PPOPN 1
15030: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
15031: LD_EXP 53
15035: PUSH
15036: LD_EXP 57
15040: AND
15041: PUSH
15042: LD_OWVAR 65
15046: PUSH
15047: LD_INT 7
15049: LESS
15050: AND
15051: IFFALSE 15065
15053: GO 15055
15055: DISABLE
// begin enable ;
15056: ENABLE
// game_speed := 7 ;
15057: LD_ADDR_OWVAR 65
15061: PUSH
15062: LD_INT 7
15064: ST_TO_ADDR
// end ;
15065: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
15066: LD_EXP 53
15070: PUSH
15071: LD_EXP 60
15075: AND
15076: IFFALSE 15278
15078: GO 15080
15080: DISABLE
15081: LD_INT 0
15083: PPUSH
15084: PPUSH
15085: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
15086: LD_ADDR_VAR 0 3
15090: PUSH
15091: LD_INT 81
15093: PUSH
15094: LD_OWVAR 2
15098: PUSH
15099: EMPTY
15100: LIST
15101: LIST
15102: PUSH
15103: LD_INT 21
15105: PUSH
15106: LD_INT 1
15108: PUSH
15109: EMPTY
15110: LIST
15111: LIST
15112: PUSH
15113: EMPTY
15114: LIST
15115: LIST
15116: PPUSH
15117: CALL_OW 69
15121: ST_TO_ADDR
// if not tmp then
15122: LD_VAR 0 3
15126: NOT
15127: IFFALSE 15131
// exit ;
15129: GO 15278
// if tmp > 5 then
15131: LD_VAR 0 3
15135: PUSH
15136: LD_INT 5
15138: GREATER
15139: IFFALSE 15151
// k := 5 else
15141: LD_ADDR_VAR 0 2
15145: PUSH
15146: LD_INT 5
15148: ST_TO_ADDR
15149: GO 15161
// k := tmp ;
15151: LD_ADDR_VAR 0 2
15155: PUSH
15156: LD_VAR 0 3
15160: ST_TO_ADDR
// for i := 1 to k do
15161: LD_ADDR_VAR 0 1
15165: PUSH
15166: DOUBLE
15167: LD_INT 1
15169: DEC
15170: ST_TO_ADDR
15171: LD_VAR 0 2
15175: PUSH
15176: FOR_TO
15177: IFFALSE 15276
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
15179: LD_VAR 0 3
15183: PUSH
15184: LD_VAR 0 1
15188: ARRAY
15189: PPUSH
15190: LD_VAR 0 1
15194: PUSH
15195: LD_INT 4
15197: MOD
15198: PUSH
15199: LD_INT 1
15201: PLUS
15202: PPUSH
15203: CALL_OW 259
15207: PUSH
15208: LD_INT 10
15210: LESS
15211: IFFALSE 15274
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
15213: LD_VAR 0 3
15217: PUSH
15218: LD_VAR 0 1
15222: ARRAY
15223: PPUSH
15224: LD_VAR 0 1
15228: PUSH
15229: LD_INT 4
15231: MOD
15232: PUSH
15233: LD_INT 1
15235: PLUS
15236: PPUSH
15237: LD_VAR 0 3
15241: PUSH
15242: LD_VAR 0 1
15246: ARRAY
15247: PPUSH
15248: LD_VAR 0 1
15252: PUSH
15253: LD_INT 4
15255: MOD
15256: PUSH
15257: LD_INT 1
15259: PLUS
15260: PPUSH
15261: CALL_OW 259
15265: PUSH
15266: LD_INT 1
15268: PLUS
15269: PPUSH
15270: CALL_OW 237
15274: GO 15176
15276: POP
15277: POP
// end ;
15278: PPOPN 3
15280: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
15281: LD_EXP 53
15285: PUSH
15286: LD_EXP 61
15290: AND
15291: IFFALSE 15311
15293: GO 15295
15295: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
15296: LD_INT 4
15298: PPUSH
15299: LD_OWVAR 2
15303: PPUSH
15304: LD_INT 0
15306: PPUSH
15307: CALL_OW 324
15311: END
// every 0 0$1 trigger StreamModeActive and sShovel do
15312: LD_EXP 53
15316: PUSH
15317: LD_EXP 90
15321: AND
15322: IFFALSE 15342
15324: GO 15326
15326: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
15327: LD_INT 19
15329: PPUSH
15330: LD_OWVAR 2
15334: PPUSH
15335: LD_INT 0
15337: PPUSH
15338: CALL_OW 324
15342: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
15343: LD_EXP 53
15347: PUSH
15348: LD_EXP 62
15352: AND
15353: IFFALSE 15455
15355: GO 15357
15357: DISABLE
15358: LD_INT 0
15360: PPUSH
15361: PPUSH
// begin enable ;
15362: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
15363: LD_ADDR_VAR 0 2
15367: PUSH
15368: LD_INT 22
15370: PUSH
15371: LD_OWVAR 2
15375: PUSH
15376: EMPTY
15377: LIST
15378: LIST
15379: PUSH
15380: LD_INT 2
15382: PUSH
15383: LD_INT 34
15385: PUSH
15386: LD_INT 11
15388: PUSH
15389: EMPTY
15390: LIST
15391: LIST
15392: PUSH
15393: LD_INT 34
15395: PUSH
15396: LD_INT 30
15398: PUSH
15399: EMPTY
15400: LIST
15401: LIST
15402: PUSH
15403: EMPTY
15404: LIST
15405: LIST
15406: LIST
15407: PUSH
15408: EMPTY
15409: LIST
15410: LIST
15411: PPUSH
15412: CALL_OW 69
15416: ST_TO_ADDR
// if not tmp then
15417: LD_VAR 0 2
15421: NOT
15422: IFFALSE 15426
// exit ;
15424: GO 15455
// for i in tmp do
15426: LD_ADDR_VAR 0 1
15430: PUSH
15431: LD_VAR 0 2
15435: PUSH
15436: FOR_IN
15437: IFFALSE 15453
// begin SetLives ( i , 0 ) ;
15439: LD_VAR 0 1
15443: PPUSH
15444: LD_INT 0
15446: PPUSH
15447: CALL_OW 234
// end ;
15451: GO 15436
15453: POP
15454: POP
// end ;
15455: PPOPN 2
15457: END
// every 0 0$1 trigger StreamModeActive and sBunker do
15458: LD_EXP 53
15462: PUSH
15463: LD_EXP 63
15467: AND
15468: IFFALSE 15488
15470: GO 15472
15472: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
15473: LD_INT 32
15475: PPUSH
15476: LD_OWVAR 2
15480: PPUSH
15481: LD_INT 0
15483: PPUSH
15484: CALL_OW 324
15488: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
15489: LD_EXP 53
15493: PUSH
15494: LD_EXP 64
15498: AND
15499: IFFALSE 15680
15501: GO 15503
15503: DISABLE
15504: LD_INT 0
15506: PPUSH
15507: PPUSH
15508: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
15509: LD_ADDR_VAR 0 2
15513: PUSH
15514: LD_INT 22
15516: PUSH
15517: LD_OWVAR 2
15521: PUSH
15522: EMPTY
15523: LIST
15524: LIST
15525: PUSH
15526: LD_INT 33
15528: PUSH
15529: LD_INT 3
15531: PUSH
15532: EMPTY
15533: LIST
15534: LIST
15535: PUSH
15536: EMPTY
15537: LIST
15538: LIST
15539: PPUSH
15540: CALL_OW 69
15544: ST_TO_ADDR
// if not tmp then
15545: LD_VAR 0 2
15549: NOT
15550: IFFALSE 15554
// exit ;
15552: GO 15680
// side := 0 ;
15554: LD_ADDR_VAR 0 3
15558: PUSH
15559: LD_INT 0
15561: ST_TO_ADDR
// for i := 1 to 8 do
15562: LD_ADDR_VAR 0 1
15566: PUSH
15567: DOUBLE
15568: LD_INT 1
15570: DEC
15571: ST_TO_ADDR
15572: LD_INT 8
15574: PUSH
15575: FOR_TO
15576: IFFALSE 15624
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
15578: LD_OWVAR 2
15582: PUSH
15583: LD_VAR 0 1
15587: NONEQUAL
15588: PUSH
15589: LD_OWVAR 2
15593: PPUSH
15594: LD_VAR 0 1
15598: PPUSH
15599: CALL_OW 81
15603: PUSH
15604: LD_INT 2
15606: EQUAL
15607: AND
15608: IFFALSE 15622
// begin side := i ;
15610: LD_ADDR_VAR 0 3
15614: PUSH
15615: LD_VAR 0 1
15619: ST_TO_ADDR
// break ;
15620: GO 15624
// end ;
15622: GO 15575
15624: POP
15625: POP
// if not side then
15626: LD_VAR 0 3
15630: NOT
15631: IFFALSE 15635
// exit ;
15633: GO 15680
// for i := 1 to tmp do
15635: LD_ADDR_VAR 0 1
15639: PUSH
15640: DOUBLE
15641: LD_INT 1
15643: DEC
15644: ST_TO_ADDR
15645: LD_VAR 0 2
15649: PUSH
15650: FOR_TO
15651: IFFALSE 15678
// if Prob ( 60 ) then
15653: LD_INT 60
15655: PPUSH
15656: CALL_OW 13
15660: IFFALSE 15676
// SetSide ( i , side ) ;
15662: LD_VAR 0 1
15666: PPUSH
15667: LD_VAR 0 3
15671: PPUSH
15672: CALL_OW 235
15676: GO 15650
15678: POP
15679: POP
// end ;
15680: PPOPN 3
15682: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
15683: LD_EXP 53
15687: PUSH
15688: LD_EXP 66
15692: AND
15693: IFFALSE 15812
15695: GO 15697
15697: DISABLE
15698: LD_INT 0
15700: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
15701: LD_ADDR_VAR 0 1
15705: PUSH
15706: LD_INT 22
15708: PUSH
15709: LD_OWVAR 2
15713: PUSH
15714: EMPTY
15715: LIST
15716: LIST
15717: PUSH
15718: LD_INT 21
15720: PUSH
15721: LD_INT 1
15723: PUSH
15724: EMPTY
15725: LIST
15726: LIST
15727: PUSH
15728: LD_INT 3
15730: PUSH
15731: LD_INT 23
15733: PUSH
15734: LD_INT 0
15736: PUSH
15737: EMPTY
15738: LIST
15739: LIST
15740: PUSH
15741: EMPTY
15742: LIST
15743: LIST
15744: PUSH
15745: EMPTY
15746: LIST
15747: LIST
15748: LIST
15749: PPUSH
15750: CALL_OW 69
15754: PUSH
15755: FOR_IN
15756: IFFALSE 15810
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
15758: LD_VAR 0 1
15762: PPUSH
15763: CALL_OW 257
15767: PUSH
15768: LD_INT 1
15770: PUSH
15771: LD_INT 2
15773: PUSH
15774: LD_INT 3
15776: PUSH
15777: LD_INT 4
15779: PUSH
15780: EMPTY
15781: LIST
15782: LIST
15783: LIST
15784: LIST
15785: IN
15786: IFFALSE 15808
// SetClass ( un , rand ( 1 , 4 ) ) ;
15788: LD_VAR 0 1
15792: PPUSH
15793: LD_INT 1
15795: PPUSH
15796: LD_INT 4
15798: PPUSH
15799: CALL_OW 12
15803: PPUSH
15804: CALL_OW 336
15808: GO 15755
15810: POP
15811: POP
// end ;
15812: PPOPN 1
15814: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
15815: LD_EXP 53
15819: PUSH
15820: LD_EXP 65
15824: AND
15825: IFFALSE 15904
15827: GO 15829
15829: DISABLE
15830: LD_INT 0
15832: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
15833: LD_ADDR_VAR 0 1
15837: PUSH
15838: LD_INT 22
15840: PUSH
15841: LD_OWVAR 2
15845: PUSH
15846: EMPTY
15847: LIST
15848: LIST
15849: PUSH
15850: LD_INT 21
15852: PUSH
15853: LD_INT 3
15855: PUSH
15856: EMPTY
15857: LIST
15858: LIST
15859: PUSH
15860: EMPTY
15861: LIST
15862: LIST
15863: PPUSH
15864: CALL_OW 69
15868: ST_TO_ADDR
// if not tmp then
15869: LD_VAR 0 1
15873: NOT
15874: IFFALSE 15878
// exit ;
15876: GO 15904
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
15878: LD_VAR 0 1
15882: PUSH
15883: LD_INT 1
15885: PPUSH
15886: LD_VAR 0 1
15890: PPUSH
15891: CALL_OW 12
15895: ARRAY
15896: PPUSH
15897: LD_INT 100
15899: PPUSH
15900: CALL_OW 234
// end ;
15904: PPOPN 1
15906: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
15907: LD_EXP 53
15911: PUSH
15912: LD_EXP 67
15916: AND
15917: IFFALSE 16015
15919: GO 15921
15921: DISABLE
15922: LD_INT 0
15924: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15925: LD_ADDR_VAR 0 1
15929: PUSH
15930: LD_INT 22
15932: PUSH
15933: LD_OWVAR 2
15937: PUSH
15938: EMPTY
15939: LIST
15940: LIST
15941: PUSH
15942: LD_INT 21
15944: PUSH
15945: LD_INT 1
15947: PUSH
15948: EMPTY
15949: LIST
15950: LIST
15951: PUSH
15952: EMPTY
15953: LIST
15954: LIST
15955: PPUSH
15956: CALL_OW 69
15960: ST_TO_ADDR
// if not tmp then
15961: LD_VAR 0 1
15965: NOT
15966: IFFALSE 15970
// exit ;
15968: GO 16015
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
15970: LD_VAR 0 1
15974: PUSH
15975: LD_INT 1
15977: PPUSH
15978: LD_VAR 0 1
15982: PPUSH
15983: CALL_OW 12
15987: ARRAY
15988: PPUSH
15989: LD_INT 1
15991: PPUSH
15992: LD_INT 4
15994: PPUSH
15995: CALL_OW 12
15999: PPUSH
16000: LD_INT 3000
16002: PPUSH
16003: LD_INT 9000
16005: PPUSH
16006: CALL_OW 12
16010: PPUSH
16011: CALL_OW 492
// end ;
16015: PPOPN 1
16017: END
// every 0 0$1 trigger StreamModeActive and sDepot do
16018: LD_EXP 53
16022: PUSH
16023: LD_EXP 68
16027: AND
16028: IFFALSE 16048
16030: GO 16032
16032: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
16033: LD_INT 1
16035: PPUSH
16036: LD_OWVAR 2
16040: PPUSH
16041: LD_INT 0
16043: PPUSH
16044: CALL_OW 324
16048: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
16049: LD_EXP 53
16053: PUSH
16054: LD_EXP 69
16058: AND
16059: IFFALSE 16142
16061: GO 16063
16063: DISABLE
16064: LD_INT 0
16066: PPUSH
16067: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
16068: LD_ADDR_VAR 0 2
16072: PUSH
16073: LD_INT 22
16075: PUSH
16076: LD_OWVAR 2
16080: PUSH
16081: EMPTY
16082: LIST
16083: LIST
16084: PUSH
16085: LD_INT 21
16087: PUSH
16088: LD_INT 3
16090: PUSH
16091: EMPTY
16092: LIST
16093: LIST
16094: PUSH
16095: EMPTY
16096: LIST
16097: LIST
16098: PPUSH
16099: CALL_OW 69
16103: ST_TO_ADDR
// if not tmp then
16104: LD_VAR 0 2
16108: NOT
16109: IFFALSE 16113
// exit ;
16111: GO 16142
// for i in tmp do
16113: LD_ADDR_VAR 0 1
16117: PUSH
16118: LD_VAR 0 2
16122: PUSH
16123: FOR_IN
16124: IFFALSE 16140
// SetBLevel ( i , 10 ) ;
16126: LD_VAR 0 1
16130: PPUSH
16131: LD_INT 10
16133: PPUSH
16134: CALL_OW 241
16138: GO 16123
16140: POP
16141: POP
// end ;
16142: PPOPN 2
16144: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
16145: LD_EXP 53
16149: PUSH
16150: LD_EXP 70
16154: AND
16155: IFFALSE 16266
16157: GO 16159
16159: DISABLE
16160: LD_INT 0
16162: PPUSH
16163: PPUSH
16164: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16165: LD_ADDR_VAR 0 3
16169: PUSH
16170: LD_INT 22
16172: PUSH
16173: LD_OWVAR 2
16177: PUSH
16178: EMPTY
16179: LIST
16180: LIST
16181: PUSH
16182: LD_INT 25
16184: PUSH
16185: LD_INT 1
16187: PUSH
16188: EMPTY
16189: LIST
16190: LIST
16191: PUSH
16192: EMPTY
16193: LIST
16194: LIST
16195: PPUSH
16196: CALL_OW 69
16200: ST_TO_ADDR
// if not tmp then
16201: LD_VAR 0 3
16205: NOT
16206: IFFALSE 16210
// exit ;
16208: GO 16266
// un := tmp [ rand ( 1 , tmp ) ] ;
16210: LD_ADDR_VAR 0 2
16214: PUSH
16215: LD_VAR 0 3
16219: PUSH
16220: LD_INT 1
16222: PPUSH
16223: LD_VAR 0 3
16227: PPUSH
16228: CALL_OW 12
16232: ARRAY
16233: ST_TO_ADDR
// if Crawls ( un ) then
16234: LD_VAR 0 2
16238: PPUSH
16239: CALL_OW 318
16243: IFFALSE 16254
// ComWalk ( un ) ;
16245: LD_VAR 0 2
16249: PPUSH
16250: CALL_OW 138
// SetClass ( un , class_sniper ) ;
16254: LD_VAR 0 2
16258: PPUSH
16259: LD_INT 5
16261: PPUSH
16262: CALL_OW 336
// end ;
16266: PPOPN 3
16268: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
16269: LD_EXP 53
16273: PUSH
16274: LD_EXP 71
16278: AND
16279: PUSH
16280: LD_OWVAR 67
16284: PUSH
16285: LD_INT 4
16287: LESS
16288: AND
16289: IFFALSE 16308
16291: GO 16293
16293: DISABLE
// begin Difficulty := Difficulty + 1 ;
16294: LD_ADDR_OWVAR 67
16298: PUSH
16299: LD_OWVAR 67
16303: PUSH
16304: LD_INT 1
16306: PLUS
16307: ST_TO_ADDR
// end ;
16308: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
16309: LD_EXP 53
16313: PUSH
16314: LD_EXP 72
16318: AND
16319: IFFALSE 16422
16321: GO 16323
16323: DISABLE
16324: LD_INT 0
16326: PPUSH
// begin for i := 1 to 5 do
16327: LD_ADDR_VAR 0 1
16331: PUSH
16332: DOUBLE
16333: LD_INT 1
16335: DEC
16336: ST_TO_ADDR
16337: LD_INT 5
16339: PUSH
16340: FOR_TO
16341: IFFALSE 16420
// begin uc_nation := nation_nature ;
16343: LD_ADDR_OWVAR 21
16347: PUSH
16348: LD_INT 0
16350: ST_TO_ADDR
// uc_side := 0 ;
16351: LD_ADDR_OWVAR 20
16355: PUSH
16356: LD_INT 0
16358: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
16359: LD_ADDR_OWVAR 29
16363: PUSH
16364: LD_INT 12
16366: PUSH
16367: LD_INT 12
16369: PUSH
16370: EMPTY
16371: LIST
16372: LIST
16373: ST_TO_ADDR
// hc_agressivity := 20 ;
16374: LD_ADDR_OWVAR 35
16378: PUSH
16379: LD_INT 20
16381: ST_TO_ADDR
// hc_class := class_tiger ;
16382: LD_ADDR_OWVAR 28
16386: PUSH
16387: LD_INT 14
16389: ST_TO_ADDR
// hc_gallery :=  ;
16390: LD_ADDR_OWVAR 33
16394: PUSH
16395: LD_STRING 
16397: ST_TO_ADDR
// hc_name :=  ;
16398: LD_ADDR_OWVAR 26
16402: PUSH
16403: LD_STRING 
16405: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
16406: CALL_OW 44
16410: PPUSH
16411: LD_INT 0
16413: PPUSH
16414: CALL_OW 51
// end ;
16418: GO 16340
16420: POP
16421: POP
// end ;
16422: PPOPN 1
16424: END
// every 0 0$1 trigger StreamModeActive and sBomb do
16425: LD_EXP 53
16429: PUSH
16430: LD_EXP 73
16434: AND
16435: IFFALSE 16444
16437: GO 16439
16439: DISABLE
// StreamSibBomb ;
16440: CALL 16445 0 0
16444: END
// export function StreamSibBomb ; var i , x , y ; begin
16445: LD_INT 0
16447: PPUSH
16448: PPUSH
16449: PPUSH
16450: PPUSH
// result := false ;
16451: LD_ADDR_VAR 0 1
16455: PUSH
16456: LD_INT 0
16458: ST_TO_ADDR
// for i := 1 to 16 do
16459: LD_ADDR_VAR 0 2
16463: PUSH
16464: DOUBLE
16465: LD_INT 1
16467: DEC
16468: ST_TO_ADDR
16469: LD_INT 16
16471: PUSH
16472: FOR_TO
16473: IFFALSE 16672
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
16475: LD_ADDR_VAR 0 3
16479: PUSH
16480: LD_INT 10
16482: PUSH
16483: LD_INT 20
16485: PUSH
16486: LD_INT 30
16488: PUSH
16489: LD_INT 40
16491: PUSH
16492: LD_INT 50
16494: PUSH
16495: LD_INT 60
16497: PUSH
16498: LD_INT 70
16500: PUSH
16501: LD_INT 80
16503: PUSH
16504: LD_INT 90
16506: PUSH
16507: LD_INT 100
16509: PUSH
16510: LD_INT 110
16512: PUSH
16513: LD_INT 120
16515: PUSH
16516: LD_INT 130
16518: PUSH
16519: LD_INT 140
16521: PUSH
16522: LD_INT 150
16524: PUSH
16525: EMPTY
16526: LIST
16527: LIST
16528: LIST
16529: LIST
16530: LIST
16531: LIST
16532: LIST
16533: LIST
16534: LIST
16535: LIST
16536: LIST
16537: LIST
16538: LIST
16539: LIST
16540: LIST
16541: PUSH
16542: LD_INT 1
16544: PPUSH
16545: LD_INT 15
16547: PPUSH
16548: CALL_OW 12
16552: ARRAY
16553: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
16554: LD_ADDR_VAR 0 4
16558: PUSH
16559: LD_INT 10
16561: PUSH
16562: LD_INT 20
16564: PUSH
16565: LD_INT 30
16567: PUSH
16568: LD_INT 40
16570: PUSH
16571: LD_INT 50
16573: PUSH
16574: LD_INT 60
16576: PUSH
16577: LD_INT 70
16579: PUSH
16580: LD_INT 80
16582: PUSH
16583: LD_INT 90
16585: PUSH
16586: LD_INT 100
16588: PUSH
16589: LD_INT 110
16591: PUSH
16592: LD_INT 120
16594: PUSH
16595: LD_INT 130
16597: PUSH
16598: LD_INT 140
16600: PUSH
16601: LD_INT 150
16603: PUSH
16604: EMPTY
16605: LIST
16606: LIST
16607: LIST
16608: LIST
16609: LIST
16610: LIST
16611: LIST
16612: LIST
16613: LIST
16614: LIST
16615: LIST
16616: LIST
16617: LIST
16618: LIST
16619: LIST
16620: PUSH
16621: LD_INT 1
16623: PPUSH
16624: LD_INT 15
16626: PPUSH
16627: CALL_OW 12
16631: ARRAY
16632: ST_TO_ADDR
// if ValidHex ( x , y ) then
16633: LD_VAR 0 3
16637: PPUSH
16638: LD_VAR 0 4
16642: PPUSH
16643: CALL_OW 488
16647: IFFALSE 16670
// begin result := [ x , y ] ;
16649: LD_ADDR_VAR 0 1
16653: PUSH
16654: LD_VAR 0 3
16658: PUSH
16659: LD_VAR 0 4
16663: PUSH
16664: EMPTY
16665: LIST
16666: LIST
16667: ST_TO_ADDR
// break ;
16668: GO 16672
// end ; end ;
16670: GO 16472
16672: POP
16673: POP
// if result then
16674: LD_VAR 0 1
16678: IFFALSE 16738
// begin ToLua ( playSibBomb() ) ;
16680: LD_STRING playSibBomb()
16682: PPUSH
16683: CALL_OW 559
// wait ( 0 0$14 ) ;
16687: LD_INT 490
16689: PPUSH
16690: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
16694: LD_VAR 0 1
16698: PUSH
16699: LD_INT 1
16701: ARRAY
16702: PPUSH
16703: LD_VAR 0 1
16707: PUSH
16708: LD_INT 2
16710: ARRAY
16711: PPUSH
16712: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
16716: LD_VAR 0 1
16720: PUSH
16721: LD_INT 1
16723: ARRAY
16724: PPUSH
16725: LD_VAR 0 1
16729: PUSH
16730: LD_INT 2
16732: ARRAY
16733: PPUSH
16734: CALL_OW 429
// end ; end ;
16738: LD_VAR 0 1
16742: RET
// every 0 0$1 trigger StreamModeActive and sReset do
16743: LD_EXP 53
16747: PUSH
16748: LD_EXP 75
16752: AND
16753: IFFALSE 16765
16755: GO 16757
16757: DISABLE
// YouLost (  ) ;
16758: LD_STRING 
16760: PPUSH
16761: CALL_OW 104
16765: END
// every 0 0$1 trigger StreamModeActive and sFog do
16766: LD_EXP 53
16770: PUSH
16771: LD_EXP 74
16775: AND
16776: IFFALSE 16790
16778: GO 16780
16780: DISABLE
// FogOff ( your_side ) ;
16781: LD_OWVAR 2
16785: PPUSH
16786: CALL_OW 344
16790: END
// every 0 0$1 trigger StreamModeActive and sSun do
16791: LD_EXP 53
16795: PUSH
16796: LD_EXP 76
16800: AND
16801: IFFALSE 16829
16803: GO 16805
16805: DISABLE
// begin solar_recharge_percent := 0 ;
16806: LD_ADDR_OWVAR 79
16810: PUSH
16811: LD_INT 0
16813: ST_TO_ADDR
// wait ( 5 5$00 ) ;
16814: LD_INT 10500
16816: PPUSH
16817: CALL_OW 67
// solar_recharge_percent := 100 ;
16821: LD_ADDR_OWVAR 79
16825: PUSH
16826: LD_INT 100
16828: ST_TO_ADDR
// end ;
16829: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
16830: LD_EXP 53
16834: PUSH
16835: LD_EXP 77
16839: AND
16840: IFFALSE 17079
16842: GO 16844
16844: DISABLE
16845: LD_INT 0
16847: PPUSH
16848: PPUSH
16849: PPUSH
// begin tmp := [ ] ;
16850: LD_ADDR_VAR 0 3
16854: PUSH
16855: EMPTY
16856: ST_TO_ADDR
// for i := 1 to 6 do
16857: LD_ADDR_VAR 0 1
16861: PUSH
16862: DOUBLE
16863: LD_INT 1
16865: DEC
16866: ST_TO_ADDR
16867: LD_INT 6
16869: PUSH
16870: FOR_TO
16871: IFFALSE 16976
// begin uc_nation := nation_nature ;
16873: LD_ADDR_OWVAR 21
16877: PUSH
16878: LD_INT 0
16880: ST_TO_ADDR
// uc_side := 0 ;
16881: LD_ADDR_OWVAR 20
16885: PUSH
16886: LD_INT 0
16888: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
16889: LD_ADDR_OWVAR 29
16893: PUSH
16894: LD_INT 12
16896: PUSH
16897: LD_INT 12
16899: PUSH
16900: EMPTY
16901: LIST
16902: LIST
16903: ST_TO_ADDR
// hc_agressivity := 20 ;
16904: LD_ADDR_OWVAR 35
16908: PUSH
16909: LD_INT 20
16911: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
16912: LD_ADDR_OWVAR 28
16916: PUSH
16917: LD_INT 17
16919: ST_TO_ADDR
// hc_gallery :=  ;
16920: LD_ADDR_OWVAR 33
16924: PUSH
16925: LD_STRING 
16927: ST_TO_ADDR
// hc_name :=  ;
16928: LD_ADDR_OWVAR 26
16932: PUSH
16933: LD_STRING 
16935: ST_TO_ADDR
// un := CreateHuman ;
16936: LD_ADDR_VAR 0 2
16940: PUSH
16941: CALL_OW 44
16945: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
16946: LD_VAR 0 2
16950: PPUSH
16951: LD_INT 1
16953: PPUSH
16954: CALL_OW 51
// tmp := tmp ^ un ;
16958: LD_ADDR_VAR 0 3
16962: PUSH
16963: LD_VAR 0 3
16967: PUSH
16968: LD_VAR 0 2
16972: ADD
16973: ST_TO_ADDR
// end ;
16974: GO 16870
16976: POP
16977: POP
// repeat wait ( 0 0$1 ) ;
16978: LD_INT 35
16980: PPUSH
16981: CALL_OW 67
// for un in tmp do
16985: LD_ADDR_VAR 0 2
16989: PUSH
16990: LD_VAR 0 3
16994: PUSH
16995: FOR_IN
16996: IFFALSE 17070
// begin if IsDead ( un ) then
16998: LD_VAR 0 2
17002: PPUSH
17003: CALL_OW 301
17007: IFFALSE 17027
// begin tmp := tmp diff un ;
17009: LD_ADDR_VAR 0 3
17013: PUSH
17014: LD_VAR 0 3
17018: PUSH
17019: LD_VAR 0 2
17023: DIFF
17024: ST_TO_ADDR
// continue ;
17025: GO 16995
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
17027: LD_VAR 0 2
17031: PPUSH
17032: LD_INT 3
17034: PUSH
17035: LD_INT 22
17037: PUSH
17038: LD_INT 0
17040: PUSH
17041: EMPTY
17042: LIST
17043: LIST
17044: PUSH
17045: EMPTY
17046: LIST
17047: LIST
17048: PPUSH
17049: CALL_OW 69
17053: PPUSH
17054: LD_VAR 0 2
17058: PPUSH
17059: CALL_OW 74
17063: PPUSH
17064: CALL_OW 115
// end ;
17068: GO 16995
17070: POP
17071: POP
// until not tmp ;
17072: LD_VAR 0 3
17076: NOT
17077: IFFALSE 16978
// end ;
17079: PPOPN 3
17081: END
// every 0 0$1 trigger StreamModeActive and sTroll do
17082: LD_EXP 53
17086: PUSH
17087: LD_EXP 78
17091: AND
17092: IFFALSE 17146
17094: GO 17096
17096: DISABLE
// begin ToLua ( displayTroll(); ) ;
17097: LD_STRING displayTroll();
17099: PPUSH
17100: CALL_OW 559
// wait ( 3 3$00 ) ;
17104: LD_INT 6300
17106: PPUSH
17107: CALL_OW 67
// ToLua ( hideTroll(); ) ;
17111: LD_STRING hideTroll();
17113: PPUSH
17114: CALL_OW 559
// wait ( 1 1$00 ) ;
17118: LD_INT 2100
17120: PPUSH
17121: CALL_OW 67
// ToLua ( displayTroll(); ) ;
17125: LD_STRING displayTroll();
17127: PPUSH
17128: CALL_OW 559
// wait ( 1 1$00 ) ;
17132: LD_INT 2100
17134: PPUSH
17135: CALL_OW 67
// ToLua ( hideTroll(); ) ;
17139: LD_STRING hideTroll();
17141: PPUSH
17142: CALL_OW 559
// end ;
17146: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
17147: LD_EXP 53
17151: PUSH
17152: LD_EXP 79
17156: AND
17157: IFFALSE 17220
17159: GO 17161
17161: DISABLE
17162: LD_INT 0
17164: PPUSH
// begin p := 0 ;
17165: LD_ADDR_VAR 0 1
17169: PUSH
17170: LD_INT 0
17172: ST_TO_ADDR
// repeat game_speed := 1 ;
17173: LD_ADDR_OWVAR 65
17177: PUSH
17178: LD_INT 1
17180: ST_TO_ADDR
// wait ( 0 0$1 ) ;
17181: LD_INT 35
17183: PPUSH
17184: CALL_OW 67
// p := p + 1 ;
17188: LD_ADDR_VAR 0 1
17192: PUSH
17193: LD_VAR 0 1
17197: PUSH
17198: LD_INT 1
17200: PLUS
17201: ST_TO_ADDR
// until p >= 60 ;
17202: LD_VAR 0 1
17206: PUSH
17207: LD_INT 60
17209: GREATEREQUAL
17210: IFFALSE 17173
// game_speed := 4 ;
17212: LD_ADDR_OWVAR 65
17216: PUSH
17217: LD_INT 4
17219: ST_TO_ADDR
// end ;
17220: PPOPN 1
17222: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
17223: LD_EXP 53
17227: PUSH
17228: LD_EXP 80
17232: AND
17233: IFFALSE 17379
17235: GO 17237
17237: DISABLE
17238: LD_INT 0
17240: PPUSH
17241: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17242: LD_ADDR_VAR 0 1
17246: PUSH
17247: LD_INT 22
17249: PUSH
17250: LD_OWVAR 2
17254: PUSH
17255: EMPTY
17256: LIST
17257: LIST
17258: PUSH
17259: LD_INT 2
17261: PUSH
17262: LD_INT 30
17264: PUSH
17265: LD_INT 0
17267: PUSH
17268: EMPTY
17269: LIST
17270: LIST
17271: PUSH
17272: LD_INT 30
17274: PUSH
17275: LD_INT 1
17277: PUSH
17278: EMPTY
17279: LIST
17280: LIST
17281: PUSH
17282: EMPTY
17283: LIST
17284: LIST
17285: LIST
17286: PUSH
17287: EMPTY
17288: LIST
17289: LIST
17290: PPUSH
17291: CALL_OW 69
17295: ST_TO_ADDR
// if not depot then
17296: LD_VAR 0 1
17300: NOT
17301: IFFALSE 17305
// exit ;
17303: GO 17379
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
17305: LD_ADDR_VAR 0 2
17309: PUSH
17310: LD_VAR 0 1
17314: PUSH
17315: LD_INT 1
17317: PPUSH
17318: LD_VAR 0 1
17322: PPUSH
17323: CALL_OW 12
17327: ARRAY
17328: PPUSH
17329: CALL_OW 274
17333: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
17334: LD_VAR 0 2
17338: PPUSH
17339: LD_INT 1
17341: PPUSH
17342: LD_INT 0
17344: PPUSH
17345: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
17349: LD_VAR 0 2
17353: PPUSH
17354: LD_INT 2
17356: PPUSH
17357: LD_INT 0
17359: PPUSH
17360: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
17364: LD_VAR 0 2
17368: PPUSH
17369: LD_INT 3
17371: PPUSH
17372: LD_INT 0
17374: PPUSH
17375: CALL_OW 277
// end ;
17379: PPOPN 2
17381: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
17382: LD_EXP 53
17386: PUSH
17387: LD_EXP 81
17391: AND
17392: IFFALSE 17489
17394: GO 17396
17396: DISABLE
17397: LD_INT 0
17399: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17400: LD_ADDR_VAR 0 1
17404: PUSH
17405: LD_INT 22
17407: PUSH
17408: LD_OWVAR 2
17412: PUSH
17413: EMPTY
17414: LIST
17415: LIST
17416: PUSH
17417: LD_INT 21
17419: PUSH
17420: LD_INT 1
17422: PUSH
17423: EMPTY
17424: LIST
17425: LIST
17426: PUSH
17427: LD_INT 3
17429: PUSH
17430: LD_INT 23
17432: PUSH
17433: LD_INT 0
17435: PUSH
17436: EMPTY
17437: LIST
17438: LIST
17439: PUSH
17440: EMPTY
17441: LIST
17442: LIST
17443: PUSH
17444: EMPTY
17445: LIST
17446: LIST
17447: LIST
17448: PPUSH
17449: CALL_OW 69
17453: ST_TO_ADDR
// if not tmp then
17454: LD_VAR 0 1
17458: NOT
17459: IFFALSE 17463
// exit ;
17461: GO 17489
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
17463: LD_VAR 0 1
17467: PUSH
17468: LD_INT 1
17470: PPUSH
17471: LD_VAR 0 1
17475: PPUSH
17476: CALL_OW 12
17480: ARRAY
17481: PPUSH
17482: LD_INT 200
17484: PPUSH
17485: CALL_OW 234
// end ;
17489: PPOPN 1
17491: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
17492: LD_EXP 53
17496: PUSH
17497: LD_EXP 82
17501: AND
17502: IFFALSE 17581
17504: GO 17506
17506: DISABLE
17507: LD_INT 0
17509: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
17510: LD_ADDR_VAR 0 1
17514: PUSH
17515: LD_INT 22
17517: PUSH
17518: LD_OWVAR 2
17522: PUSH
17523: EMPTY
17524: LIST
17525: LIST
17526: PUSH
17527: LD_INT 21
17529: PUSH
17530: LD_INT 2
17532: PUSH
17533: EMPTY
17534: LIST
17535: LIST
17536: PUSH
17537: EMPTY
17538: LIST
17539: LIST
17540: PPUSH
17541: CALL_OW 69
17545: ST_TO_ADDR
// if not tmp then
17546: LD_VAR 0 1
17550: NOT
17551: IFFALSE 17555
// exit ;
17553: GO 17581
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
17555: LD_VAR 0 1
17559: PUSH
17560: LD_INT 1
17562: PPUSH
17563: LD_VAR 0 1
17567: PPUSH
17568: CALL_OW 12
17572: ARRAY
17573: PPUSH
17574: LD_INT 60
17576: PPUSH
17577: CALL_OW 234
// end ;
17581: PPOPN 1
17583: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
17584: LD_EXP 53
17588: PUSH
17589: LD_EXP 83
17593: AND
17594: IFFALSE 17693
17596: GO 17598
17598: DISABLE
17599: LD_INT 0
17601: PPUSH
17602: PPUSH
// begin enable ;
17603: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
17604: LD_ADDR_VAR 0 1
17608: PUSH
17609: LD_INT 22
17611: PUSH
17612: LD_OWVAR 2
17616: PUSH
17617: EMPTY
17618: LIST
17619: LIST
17620: PUSH
17621: LD_INT 61
17623: PUSH
17624: EMPTY
17625: LIST
17626: PUSH
17627: LD_INT 33
17629: PUSH
17630: LD_INT 2
17632: PUSH
17633: EMPTY
17634: LIST
17635: LIST
17636: PUSH
17637: EMPTY
17638: LIST
17639: LIST
17640: LIST
17641: PPUSH
17642: CALL_OW 69
17646: ST_TO_ADDR
// if not tmp then
17647: LD_VAR 0 1
17651: NOT
17652: IFFALSE 17656
// exit ;
17654: GO 17693
// for i in tmp do
17656: LD_ADDR_VAR 0 2
17660: PUSH
17661: LD_VAR 0 1
17665: PUSH
17666: FOR_IN
17667: IFFALSE 17691
// if IsControledBy ( i ) then
17669: LD_VAR 0 2
17673: PPUSH
17674: CALL_OW 312
17678: IFFALSE 17689
// ComUnlink ( i ) ;
17680: LD_VAR 0 2
17684: PPUSH
17685: CALL_OW 136
17689: GO 17666
17691: POP
17692: POP
// end ;
17693: PPOPN 2
17695: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
17696: LD_EXP 53
17700: PUSH
17701: LD_EXP 84
17705: AND
17706: IFFALSE 17846
17708: GO 17710
17710: DISABLE
17711: LD_INT 0
17713: PPUSH
17714: PPUSH
// begin ToLua ( displayPowell(); ) ;
17715: LD_STRING displayPowell();
17717: PPUSH
17718: CALL_OW 559
// uc_side := 0 ;
17722: LD_ADDR_OWVAR 20
17726: PUSH
17727: LD_INT 0
17729: ST_TO_ADDR
// uc_nation := 2 ;
17730: LD_ADDR_OWVAR 21
17734: PUSH
17735: LD_INT 2
17737: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
17738: LD_ADDR_OWVAR 37
17742: PUSH
17743: LD_INT 14
17745: ST_TO_ADDR
// vc_engine := engine_siberite ;
17746: LD_ADDR_OWVAR 39
17750: PUSH
17751: LD_INT 3
17753: ST_TO_ADDR
// vc_control := control_apeman ;
17754: LD_ADDR_OWVAR 38
17758: PUSH
17759: LD_INT 5
17761: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
17762: LD_ADDR_OWVAR 40
17766: PUSH
17767: LD_INT 29
17769: ST_TO_ADDR
// un := CreateVehicle ;
17770: LD_ADDR_VAR 0 2
17774: PUSH
17775: CALL_OW 45
17779: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17780: LD_VAR 0 2
17784: PPUSH
17785: LD_INT 1
17787: PPUSH
17788: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
17792: LD_INT 35
17794: PPUSH
17795: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
17799: LD_VAR 0 2
17803: PPUSH
17804: LD_INT 22
17806: PUSH
17807: LD_OWVAR 2
17811: PUSH
17812: EMPTY
17813: LIST
17814: LIST
17815: PPUSH
17816: CALL_OW 69
17820: PPUSH
17821: LD_VAR 0 2
17825: PPUSH
17826: CALL_OW 74
17830: PPUSH
17831: CALL_OW 115
// until IsDead ( un ) ;
17835: LD_VAR 0 2
17839: PPUSH
17840: CALL_OW 301
17844: IFFALSE 17792
// end ;
17846: PPOPN 2
17848: END
// every 0 0$1 trigger StreamModeActive and sStu do
17849: LD_EXP 53
17853: PUSH
17854: LD_EXP 92
17858: AND
17859: IFFALSE 17875
17861: GO 17863
17863: DISABLE
// begin ToLua ( displayStucuk(); ) ;
17864: LD_STRING displayStucuk();
17866: PPUSH
17867: CALL_OW 559
// ResetFog ;
17871: CALL_OW 335
// end ;
17875: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
17876: LD_EXP 53
17880: PUSH
17881: LD_EXP 85
17885: AND
17886: IFFALSE 18027
17888: GO 17890
17890: DISABLE
17891: LD_INT 0
17893: PPUSH
17894: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17895: LD_ADDR_VAR 0 2
17899: PUSH
17900: LD_INT 22
17902: PUSH
17903: LD_OWVAR 2
17907: PUSH
17908: EMPTY
17909: LIST
17910: LIST
17911: PUSH
17912: LD_INT 21
17914: PUSH
17915: LD_INT 1
17917: PUSH
17918: EMPTY
17919: LIST
17920: LIST
17921: PUSH
17922: EMPTY
17923: LIST
17924: LIST
17925: PPUSH
17926: CALL_OW 69
17930: ST_TO_ADDR
// if not tmp then
17931: LD_VAR 0 2
17935: NOT
17936: IFFALSE 17940
// exit ;
17938: GO 18027
// un := tmp [ rand ( 1 , tmp ) ] ;
17940: LD_ADDR_VAR 0 1
17944: PUSH
17945: LD_VAR 0 2
17949: PUSH
17950: LD_INT 1
17952: PPUSH
17953: LD_VAR 0 2
17957: PPUSH
17958: CALL_OW 12
17962: ARRAY
17963: ST_TO_ADDR
// SetSide ( un , 0 ) ;
17964: LD_VAR 0 1
17968: PPUSH
17969: LD_INT 0
17971: PPUSH
17972: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
17976: LD_VAR 0 1
17980: PPUSH
17981: LD_OWVAR 3
17985: PUSH
17986: LD_VAR 0 1
17990: DIFF
17991: PPUSH
17992: LD_VAR 0 1
17996: PPUSH
17997: CALL_OW 74
18001: PPUSH
18002: CALL_OW 115
// wait ( 0 0$20 ) ;
18006: LD_INT 700
18008: PPUSH
18009: CALL_OW 67
// SetSide ( un , your_side ) ;
18013: LD_VAR 0 1
18017: PPUSH
18018: LD_OWVAR 2
18022: PPUSH
18023: CALL_OW 235
// end ;
18027: PPOPN 2
18029: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
18030: LD_EXP 53
18034: PUSH
18035: LD_EXP 86
18039: AND
18040: IFFALSE 18146
18042: GO 18044
18044: DISABLE
18045: LD_INT 0
18047: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18048: LD_ADDR_VAR 0 1
18052: PUSH
18053: LD_INT 22
18055: PUSH
18056: LD_OWVAR 2
18060: PUSH
18061: EMPTY
18062: LIST
18063: LIST
18064: PUSH
18065: LD_INT 2
18067: PUSH
18068: LD_INT 30
18070: PUSH
18071: LD_INT 0
18073: PUSH
18074: EMPTY
18075: LIST
18076: LIST
18077: PUSH
18078: LD_INT 30
18080: PUSH
18081: LD_INT 1
18083: PUSH
18084: EMPTY
18085: LIST
18086: LIST
18087: PUSH
18088: EMPTY
18089: LIST
18090: LIST
18091: LIST
18092: PUSH
18093: EMPTY
18094: LIST
18095: LIST
18096: PPUSH
18097: CALL_OW 69
18101: ST_TO_ADDR
// if not depot then
18102: LD_VAR 0 1
18106: NOT
18107: IFFALSE 18111
// exit ;
18109: GO 18146
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
18111: LD_VAR 0 1
18115: PUSH
18116: LD_INT 1
18118: ARRAY
18119: PPUSH
18120: CALL_OW 250
18124: PPUSH
18125: LD_VAR 0 1
18129: PUSH
18130: LD_INT 1
18132: ARRAY
18133: PPUSH
18134: CALL_OW 251
18138: PPUSH
18139: LD_INT 70
18141: PPUSH
18142: CALL_OW 495
// end ;
18146: PPOPN 1
18148: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
18149: LD_EXP 53
18153: PUSH
18154: LD_EXP 87
18158: AND
18159: IFFALSE 18370
18161: GO 18163
18163: DISABLE
18164: LD_INT 0
18166: PPUSH
18167: PPUSH
18168: PPUSH
18169: PPUSH
18170: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18171: LD_ADDR_VAR 0 5
18175: PUSH
18176: LD_INT 22
18178: PUSH
18179: LD_OWVAR 2
18183: PUSH
18184: EMPTY
18185: LIST
18186: LIST
18187: PUSH
18188: LD_INT 21
18190: PUSH
18191: LD_INT 1
18193: PUSH
18194: EMPTY
18195: LIST
18196: LIST
18197: PUSH
18198: EMPTY
18199: LIST
18200: LIST
18201: PPUSH
18202: CALL_OW 69
18206: ST_TO_ADDR
// if not tmp then
18207: LD_VAR 0 5
18211: NOT
18212: IFFALSE 18216
// exit ;
18214: GO 18370
// for i in tmp do
18216: LD_ADDR_VAR 0 1
18220: PUSH
18221: LD_VAR 0 5
18225: PUSH
18226: FOR_IN
18227: IFFALSE 18368
// begin d := rand ( 0 , 5 ) ;
18229: LD_ADDR_VAR 0 4
18233: PUSH
18234: LD_INT 0
18236: PPUSH
18237: LD_INT 5
18239: PPUSH
18240: CALL_OW 12
18244: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
18245: LD_ADDR_VAR 0 2
18249: PUSH
18250: LD_VAR 0 1
18254: PPUSH
18255: CALL_OW 250
18259: PPUSH
18260: LD_VAR 0 4
18264: PPUSH
18265: LD_INT 3
18267: PPUSH
18268: LD_INT 12
18270: PPUSH
18271: CALL_OW 12
18275: PPUSH
18276: CALL_OW 272
18280: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
18281: LD_ADDR_VAR 0 3
18285: PUSH
18286: LD_VAR 0 1
18290: PPUSH
18291: CALL_OW 251
18295: PPUSH
18296: LD_VAR 0 4
18300: PPUSH
18301: LD_INT 3
18303: PPUSH
18304: LD_INT 12
18306: PPUSH
18307: CALL_OW 12
18311: PPUSH
18312: CALL_OW 273
18316: ST_TO_ADDR
// if ValidHex ( x , y ) then
18317: LD_VAR 0 2
18321: PPUSH
18322: LD_VAR 0 3
18326: PPUSH
18327: CALL_OW 488
18331: IFFALSE 18366
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
18333: LD_VAR 0 1
18337: PPUSH
18338: LD_VAR 0 2
18342: PPUSH
18343: LD_VAR 0 3
18347: PPUSH
18348: LD_INT 3
18350: PPUSH
18351: LD_INT 6
18353: PPUSH
18354: CALL_OW 12
18358: PPUSH
18359: LD_INT 1
18361: PPUSH
18362: CALL_OW 483
// end ;
18366: GO 18226
18368: POP
18369: POP
// end ;
18370: PPOPN 5
18372: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
18373: LD_EXP 53
18377: PUSH
18378: LD_EXP 88
18382: AND
18383: IFFALSE 18477
18385: GO 18387
18387: DISABLE
18388: LD_INT 0
18390: PPUSH
18391: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
18392: LD_ADDR_VAR 0 2
18396: PUSH
18397: LD_INT 22
18399: PUSH
18400: LD_OWVAR 2
18404: PUSH
18405: EMPTY
18406: LIST
18407: LIST
18408: PUSH
18409: LD_INT 32
18411: PUSH
18412: LD_INT 1
18414: PUSH
18415: EMPTY
18416: LIST
18417: LIST
18418: PUSH
18419: LD_INT 21
18421: PUSH
18422: LD_INT 2
18424: PUSH
18425: EMPTY
18426: LIST
18427: LIST
18428: PUSH
18429: EMPTY
18430: LIST
18431: LIST
18432: LIST
18433: PPUSH
18434: CALL_OW 69
18438: ST_TO_ADDR
// if not tmp then
18439: LD_VAR 0 2
18443: NOT
18444: IFFALSE 18448
// exit ;
18446: GO 18477
// for i in tmp do
18448: LD_ADDR_VAR 0 1
18452: PUSH
18453: LD_VAR 0 2
18457: PUSH
18458: FOR_IN
18459: IFFALSE 18475
// SetFuel ( i , 0 ) ;
18461: LD_VAR 0 1
18465: PPUSH
18466: LD_INT 0
18468: PPUSH
18469: CALL_OW 240
18473: GO 18458
18475: POP
18476: POP
// end ;
18477: PPOPN 2
18479: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
18480: LD_EXP 53
18484: PUSH
18485: LD_EXP 89
18489: AND
18490: IFFALSE 18556
18492: GO 18494
18494: DISABLE
18495: LD_INT 0
18497: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
18498: LD_ADDR_VAR 0 1
18502: PUSH
18503: LD_INT 22
18505: PUSH
18506: LD_OWVAR 2
18510: PUSH
18511: EMPTY
18512: LIST
18513: LIST
18514: PUSH
18515: LD_INT 30
18517: PUSH
18518: LD_INT 29
18520: PUSH
18521: EMPTY
18522: LIST
18523: LIST
18524: PUSH
18525: EMPTY
18526: LIST
18527: LIST
18528: PPUSH
18529: CALL_OW 69
18533: ST_TO_ADDR
// if not tmp then
18534: LD_VAR 0 1
18538: NOT
18539: IFFALSE 18543
// exit ;
18541: GO 18556
// DestroyUnit ( tmp [ 1 ] ) ;
18543: LD_VAR 0 1
18547: PUSH
18548: LD_INT 1
18550: ARRAY
18551: PPUSH
18552: CALL_OW 65
// end ;
18556: PPOPN 1
18558: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
18559: LD_EXP 53
18563: PUSH
18564: LD_EXP 91
18568: AND
18569: IFFALSE 18698
18571: GO 18573
18573: DISABLE
18574: LD_INT 0
18576: PPUSH
// begin uc_side := 0 ;
18577: LD_ADDR_OWVAR 20
18581: PUSH
18582: LD_INT 0
18584: ST_TO_ADDR
// uc_nation := nation_arabian ;
18585: LD_ADDR_OWVAR 21
18589: PUSH
18590: LD_INT 2
18592: ST_TO_ADDR
// hc_gallery :=  ;
18593: LD_ADDR_OWVAR 33
18597: PUSH
18598: LD_STRING 
18600: ST_TO_ADDR
// hc_name :=  ;
18601: LD_ADDR_OWVAR 26
18605: PUSH
18606: LD_STRING 
18608: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
18609: LD_INT 1
18611: PPUSH
18612: LD_INT 11
18614: PPUSH
18615: LD_INT 10
18617: PPUSH
18618: CALL_OW 380
// un := CreateHuman ;
18622: LD_ADDR_VAR 0 1
18626: PUSH
18627: CALL_OW 44
18631: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18632: LD_VAR 0 1
18636: PPUSH
18637: LD_INT 1
18639: PPUSH
18640: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
18644: LD_INT 35
18646: PPUSH
18647: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
18651: LD_VAR 0 1
18655: PPUSH
18656: LD_INT 22
18658: PUSH
18659: LD_OWVAR 2
18663: PUSH
18664: EMPTY
18665: LIST
18666: LIST
18667: PPUSH
18668: CALL_OW 69
18672: PPUSH
18673: LD_VAR 0 1
18677: PPUSH
18678: CALL_OW 74
18682: PPUSH
18683: CALL_OW 115
// until IsDead ( un ) ;
18687: LD_VAR 0 1
18691: PPUSH
18692: CALL_OW 301
18696: IFFALSE 18644
// end ;
18698: PPOPN 1
18700: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
18701: LD_EXP 53
18705: PUSH
18706: LD_EXP 93
18710: AND
18711: IFFALSE 18723
18713: GO 18715
18715: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
18716: LD_STRING earthquake(getX(game), 0, 32)
18718: PPUSH
18719: CALL_OW 559
18723: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
18724: LD_EXP 53
18728: PUSH
18729: LD_EXP 94
18733: AND
18734: IFFALSE 18825
18736: GO 18738
18738: DISABLE
18739: LD_INT 0
18741: PPUSH
// begin enable ;
18742: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
18743: LD_ADDR_VAR 0 1
18747: PUSH
18748: LD_INT 22
18750: PUSH
18751: LD_OWVAR 2
18755: PUSH
18756: EMPTY
18757: LIST
18758: LIST
18759: PUSH
18760: LD_INT 21
18762: PUSH
18763: LD_INT 2
18765: PUSH
18766: EMPTY
18767: LIST
18768: LIST
18769: PUSH
18770: LD_INT 33
18772: PUSH
18773: LD_INT 3
18775: PUSH
18776: EMPTY
18777: LIST
18778: LIST
18779: PUSH
18780: EMPTY
18781: LIST
18782: LIST
18783: LIST
18784: PPUSH
18785: CALL_OW 69
18789: ST_TO_ADDR
// if not tmp then
18790: LD_VAR 0 1
18794: NOT
18795: IFFALSE 18799
// exit ;
18797: GO 18825
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
18799: LD_VAR 0 1
18803: PUSH
18804: LD_INT 1
18806: PPUSH
18807: LD_VAR 0 1
18811: PPUSH
18812: CALL_OW 12
18816: ARRAY
18817: PPUSH
18818: LD_INT 1
18820: PPUSH
18821: CALL_OW 234
// end ;
18825: PPOPN 1
18827: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
18828: LD_EXP 53
18832: PUSH
18833: LD_EXP 95
18837: AND
18838: IFFALSE 18979
18840: GO 18842
18842: DISABLE
18843: LD_INT 0
18845: PPUSH
18846: PPUSH
18847: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18848: LD_ADDR_VAR 0 3
18852: PUSH
18853: LD_INT 22
18855: PUSH
18856: LD_OWVAR 2
18860: PUSH
18861: EMPTY
18862: LIST
18863: LIST
18864: PUSH
18865: LD_INT 25
18867: PUSH
18868: LD_INT 1
18870: PUSH
18871: EMPTY
18872: LIST
18873: LIST
18874: PUSH
18875: EMPTY
18876: LIST
18877: LIST
18878: PPUSH
18879: CALL_OW 69
18883: ST_TO_ADDR
// if not tmp then
18884: LD_VAR 0 3
18888: NOT
18889: IFFALSE 18893
// exit ;
18891: GO 18979
// un := tmp [ rand ( 1 , tmp ) ] ;
18893: LD_ADDR_VAR 0 2
18897: PUSH
18898: LD_VAR 0 3
18902: PUSH
18903: LD_INT 1
18905: PPUSH
18906: LD_VAR 0 3
18910: PPUSH
18911: CALL_OW 12
18915: ARRAY
18916: ST_TO_ADDR
// if Crawls ( un ) then
18917: LD_VAR 0 2
18921: PPUSH
18922: CALL_OW 318
18926: IFFALSE 18937
// ComWalk ( un ) ;
18928: LD_VAR 0 2
18932: PPUSH
18933: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
18937: LD_VAR 0 2
18941: PPUSH
18942: LD_INT 9
18944: PPUSH
18945: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
18949: LD_INT 28
18951: PPUSH
18952: LD_OWVAR 2
18956: PPUSH
18957: LD_INT 2
18959: PPUSH
18960: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
18964: LD_INT 29
18966: PPUSH
18967: LD_OWVAR 2
18971: PPUSH
18972: LD_INT 2
18974: PPUSH
18975: CALL_OW 322
// end ;
18979: PPOPN 3
18981: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
18982: LD_EXP 53
18986: PUSH
18987: LD_EXP 96
18991: AND
18992: IFFALSE 19103
18994: GO 18996
18996: DISABLE
18997: LD_INT 0
18999: PPUSH
19000: PPUSH
19001: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19002: LD_ADDR_VAR 0 3
19006: PUSH
19007: LD_INT 22
19009: PUSH
19010: LD_OWVAR 2
19014: PUSH
19015: EMPTY
19016: LIST
19017: LIST
19018: PUSH
19019: LD_INT 25
19021: PUSH
19022: LD_INT 1
19024: PUSH
19025: EMPTY
19026: LIST
19027: LIST
19028: PUSH
19029: EMPTY
19030: LIST
19031: LIST
19032: PPUSH
19033: CALL_OW 69
19037: ST_TO_ADDR
// if not tmp then
19038: LD_VAR 0 3
19042: NOT
19043: IFFALSE 19047
// exit ;
19045: GO 19103
// un := tmp [ rand ( 1 , tmp ) ] ;
19047: LD_ADDR_VAR 0 2
19051: PUSH
19052: LD_VAR 0 3
19056: PUSH
19057: LD_INT 1
19059: PPUSH
19060: LD_VAR 0 3
19064: PPUSH
19065: CALL_OW 12
19069: ARRAY
19070: ST_TO_ADDR
// if Crawls ( un ) then
19071: LD_VAR 0 2
19075: PPUSH
19076: CALL_OW 318
19080: IFFALSE 19091
// ComWalk ( un ) ;
19082: LD_VAR 0 2
19086: PPUSH
19087: CALL_OW 138
// SetClass ( un , class_mortar ) ;
19091: LD_VAR 0 2
19095: PPUSH
19096: LD_INT 8
19098: PPUSH
19099: CALL_OW 336
// end ;
19103: PPOPN 3
19105: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
19106: LD_EXP 53
19110: PUSH
19111: LD_EXP 97
19115: AND
19116: IFFALSE 19260
19118: GO 19120
19120: DISABLE
19121: LD_INT 0
19123: PPUSH
19124: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
19125: LD_ADDR_VAR 0 2
19129: PUSH
19130: LD_INT 22
19132: PUSH
19133: LD_OWVAR 2
19137: PUSH
19138: EMPTY
19139: LIST
19140: LIST
19141: PUSH
19142: LD_INT 21
19144: PUSH
19145: LD_INT 2
19147: PUSH
19148: EMPTY
19149: LIST
19150: LIST
19151: PUSH
19152: LD_INT 2
19154: PUSH
19155: LD_INT 34
19157: PUSH
19158: LD_INT 12
19160: PUSH
19161: EMPTY
19162: LIST
19163: LIST
19164: PUSH
19165: LD_INT 34
19167: PUSH
19168: LD_INT 51
19170: PUSH
19171: EMPTY
19172: LIST
19173: LIST
19174: PUSH
19175: LD_INT 34
19177: PUSH
19178: LD_INT 32
19180: PUSH
19181: EMPTY
19182: LIST
19183: LIST
19184: PUSH
19185: EMPTY
19186: LIST
19187: LIST
19188: LIST
19189: LIST
19190: PUSH
19191: EMPTY
19192: LIST
19193: LIST
19194: LIST
19195: PPUSH
19196: CALL_OW 69
19200: ST_TO_ADDR
// if not tmp then
19201: LD_VAR 0 2
19205: NOT
19206: IFFALSE 19210
// exit ;
19208: GO 19260
// for i in tmp do
19210: LD_ADDR_VAR 0 1
19214: PUSH
19215: LD_VAR 0 2
19219: PUSH
19220: FOR_IN
19221: IFFALSE 19258
// if GetCargo ( i , mat_artifact ) = 0 then
19223: LD_VAR 0 1
19227: PPUSH
19228: LD_INT 4
19230: PPUSH
19231: CALL_OW 289
19235: PUSH
19236: LD_INT 0
19238: EQUAL
19239: IFFALSE 19256
// SetCargo ( i , mat_siberit , 100 ) ;
19241: LD_VAR 0 1
19245: PPUSH
19246: LD_INT 3
19248: PPUSH
19249: LD_INT 100
19251: PPUSH
19252: CALL_OW 290
19256: GO 19220
19258: POP
19259: POP
// end ;
19260: PPOPN 2
19262: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
19263: LD_EXP 53
19267: PUSH
19268: LD_EXP 98
19272: AND
19273: IFFALSE 19456
19275: GO 19277
19277: DISABLE
19278: LD_INT 0
19280: PPUSH
19281: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19282: LD_ADDR_VAR 0 2
19286: PUSH
19287: LD_INT 22
19289: PUSH
19290: LD_OWVAR 2
19294: PUSH
19295: EMPTY
19296: LIST
19297: LIST
19298: PPUSH
19299: CALL_OW 69
19303: ST_TO_ADDR
// if not tmp then
19304: LD_VAR 0 2
19308: NOT
19309: IFFALSE 19313
// exit ;
19311: GO 19456
// for i := 1 to 2 do
19313: LD_ADDR_VAR 0 1
19317: PUSH
19318: DOUBLE
19319: LD_INT 1
19321: DEC
19322: ST_TO_ADDR
19323: LD_INT 2
19325: PUSH
19326: FOR_TO
19327: IFFALSE 19454
// begin uc_side := your_side ;
19329: LD_ADDR_OWVAR 20
19333: PUSH
19334: LD_OWVAR 2
19338: ST_TO_ADDR
// uc_nation := nation_american ;
19339: LD_ADDR_OWVAR 21
19343: PUSH
19344: LD_INT 1
19346: ST_TO_ADDR
// vc_chassis := us_morphling ;
19347: LD_ADDR_OWVAR 37
19351: PUSH
19352: LD_INT 5
19354: ST_TO_ADDR
// vc_engine := engine_siberite ;
19355: LD_ADDR_OWVAR 39
19359: PUSH
19360: LD_INT 3
19362: ST_TO_ADDR
// vc_control := control_computer ;
19363: LD_ADDR_OWVAR 38
19367: PUSH
19368: LD_INT 3
19370: ST_TO_ADDR
// vc_weapon := us_double_laser ;
19371: LD_ADDR_OWVAR 40
19375: PUSH
19376: LD_INT 10
19378: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
19379: LD_VAR 0 2
19383: PUSH
19384: LD_INT 1
19386: ARRAY
19387: PPUSH
19388: CALL_OW 310
19392: NOT
19393: IFFALSE 19440
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
19395: CALL_OW 45
19399: PPUSH
19400: LD_VAR 0 2
19404: PUSH
19405: LD_INT 1
19407: ARRAY
19408: PPUSH
19409: CALL_OW 250
19413: PPUSH
19414: LD_VAR 0 2
19418: PUSH
19419: LD_INT 1
19421: ARRAY
19422: PPUSH
19423: CALL_OW 251
19427: PPUSH
19428: LD_INT 12
19430: PPUSH
19431: LD_INT 1
19433: PPUSH
19434: CALL_OW 50
19438: GO 19452
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
19440: CALL_OW 45
19444: PPUSH
19445: LD_INT 1
19447: PPUSH
19448: CALL_OW 51
// end ;
19452: GO 19326
19454: POP
19455: POP
// end ;
19456: PPOPN 2
19458: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
19459: LD_EXP 53
19463: PUSH
19464: LD_EXP 99
19468: AND
19469: IFFALSE 19691
19471: GO 19473
19473: DISABLE
19474: LD_INT 0
19476: PPUSH
19477: PPUSH
19478: PPUSH
19479: PPUSH
19480: PPUSH
19481: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19482: LD_ADDR_VAR 0 6
19486: PUSH
19487: LD_INT 22
19489: PUSH
19490: LD_OWVAR 2
19494: PUSH
19495: EMPTY
19496: LIST
19497: LIST
19498: PUSH
19499: LD_INT 21
19501: PUSH
19502: LD_INT 1
19504: PUSH
19505: EMPTY
19506: LIST
19507: LIST
19508: PUSH
19509: LD_INT 3
19511: PUSH
19512: LD_INT 23
19514: PUSH
19515: LD_INT 0
19517: PUSH
19518: EMPTY
19519: LIST
19520: LIST
19521: PUSH
19522: EMPTY
19523: LIST
19524: LIST
19525: PUSH
19526: EMPTY
19527: LIST
19528: LIST
19529: LIST
19530: PPUSH
19531: CALL_OW 69
19535: ST_TO_ADDR
// if not tmp then
19536: LD_VAR 0 6
19540: NOT
19541: IFFALSE 19545
// exit ;
19543: GO 19691
// s1 := rand ( 1 , 4 ) ;
19545: LD_ADDR_VAR 0 2
19549: PUSH
19550: LD_INT 1
19552: PPUSH
19553: LD_INT 4
19555: PPUSH
19556: CALL_OW 12
19560: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
19561: LD_ADDR_VAR 0 4
19565: PUSH
19566: LD_VAR 0 6
19570: PUSH
19571: LD_INT 1
19573: ARRAY
19574: PPUSH
19575: LD_VAR 0 2
19579: PPUSH
19580: CALL_OW 259
19584: ST_TO_ADDR
// if s1 = 1 then
19585: LD_VAR 0 2
19589: PUSH
19590: LD_INT 1
19592: EQUAL
19593: IFFALSE 19613
// s2 := rand ( 2 , 4 ) else
19595: LD_ADDR_VAR 0 3
19599: PUSH
19600: LD_INT 2
19602: PPUSH
19603: LD_INT 4
19605: PPUSH
19606: CALL_OW 12
19610: ST_TO_ADDR
19611: GO 19621
// s2 := 1 ;
19613: LD_ADDR_VAR 0 3
19617: PUSH
19618: LD_INT 1
19620: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
19621: LD_ADDR_VAR 0 5
19625: PUSH
19626: LD_VAR 0 6
19630: PUSH
19631: LD_INT 1
19633: ARRAY
19634: PPUSH
19635: LD_VAR 0 3
19639: PPUSH
19640: CALL_OW 259
19644: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
19645: LD_VAR 0 6
19649: PUSH
19650: LD_INT 1
19652: ARRAY
19653: PPUSH
19654: LD_VAR 0 2
19658: PPUSH
19659: LD_VAR 0 5
19663: PPUSH
19664: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
19668: LD_VAR 0 6
19672: PUSH
19673: LD_INT 1
19675: ARRAY
19676: PPUSH
19677: LD_VAR 0 3
19681: PPUSH
19682: LD_VAR 0 4
19686: PPUSH
19687: CALL_OW 237
// end ;
19691: PPOPN 6
19693: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
19694: LD_EXP 53
19698: PUSH
19699: LD_EXP 100
19703: AND
19704: IFFALSE 19783
19706: GO 19708
19708: DISABLE
19709: LD_INT 0
19711: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
19712: LD_ADDR_VAR 0 1
19716: PUSH
19717: LD_INT 22
19719: PUSH
19720: LD_OWVAR 2
19724: PUSH
19725: EMPTY
19726: LIST
19727: LIST
19728: PUSH
19729: LD_INT 30
19731: PUSH
19732: LD_INT 3
19734: PUSH
19735: EMPTY
19736: LIST
19737: LIST
19738: PUSH
19739: EMPTY
19740: LIST
19741: LIST
19742: PPUSH
19743: CALL_OW 69
19747: ST_TO_ADDR
// if not tmp then
19748: LD_VAR 0 1
19752: NOT
19753: IFFALSE 19757
// exit ;
19755: GO 19783
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
19757: LD_VAR 0 1
19761: PUSH
19762: LD_INT 1
19764: PPUSH
19765: LD_VAR 0 1
19769: PPUSH
19770: CALL_OW 12
19774: ARRAY
19775: PPUSH
19776: LD_INT 1
19778: PPUSH
19779: CALL_OW 234
// end ;
19783: PPOPN 1
19785: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
19786: LD_EXP 53
19790: PUSH
19791: LD_EXP 101
19795: AND
19796: IFFALSE 19908
19798: GO 19800
19800: DISABLE
19801: LD_INT 0
19803: PPUSH
19804: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
19805: LD_ADDR_VAR 0 2
19809: PUSH
19810: LD_INT 22
19812: PUSH
19813: LD_OWVAR 2
19817: PUSH
19818: EMPTY
19819: LIST
19820: LIST
19821: PUSH
19822: LD_INT 2
19824: PUSH
19825: LD_INT 30
19827: PUSH
19828: LD_INT 27
19830: PUSH
19831: EMPTY
19832: LIST
19833: LIST
19834: PUSH
19835: LD_INT 30
19837: PUSH
19838: LD_INT 26
19840: PUSH
19841: EMPTY
19842: LIST
19843: LIST
19844: PUSH
19845: LD_INT 30
19847: PUSH
19848: LD_INT 28
19850: PUSH
19851: EMPTY
19852: LIST
19853: LIST
19854: PUSH
19855: EMPTY
19856: LIST
19857: LIST
19858: LIST
19859: LIST
19860: PUSH
19861: EMPTY
19862: LIST
19863: LIST
19864: PPUSH
19865: CALL_OW 69
19869: ST_TO_ADDR
// if not tmp then
19870: LD_VAR 0 2
19874: NOT
19875: IFFALSE 19879
// exit ;
19877: GO 19908
// for i in tmp do
19879: LD_ADDR_VAR 0 1
19883: PUSH
19884: LD_VAR 0 2
19888: PUSH
19889: FOR_IN
19890: IFFALSE 19906
// SetLives ( i , 1 ) ;
19892: LD_VAR 0 1
19896: PPUSH
19897: LD_INT 1
19899: PPUSH
19900: CALL_OW 234
19904: GO 19889
19906: POP
19907: POP
// end ;
19908: PPOPN 2
19910: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
19911: LD_EXP 53
19915: PUSH
19916: LD_EXP 102
19920: AND
19921: IFFALSE 20208
19923: GO 19925
19925: DISABLE
19926: LD_INT 0
19928: PPUSH
19929: PPUSH
19930: PPUSH
// begin i := rand ( 1 , 7 ) ;
19931: LD_ADDR_VAR 0 1
19935: PUSH
19936: LD_INT 1
19938: PPUSH
19939: LD_INT 7
19941: PPUSH
19942: CALL_OW 12
19946: ST_TO_ADDR
// case i of 1 :
19947: LD_VAR 0 1
19951: PUSH
19952: LD_INT 1
19954: DOUBLE
19955: EQUAL
19956: IFTRUE 19960
19958: GO 19970
19960: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
19961: LD_STRING earthquake(getX(game), 0, 32)
19963: PPUSH
19964: CALL_OW 559
19968: GO 20208
19970: LD_INT 2
19972: DOUBLE
19973: EQUAL
19974: IFTRUE 19978
19976: GO 19992
19978: POP
// begin ToLua ( displayStucuk(); ) ;
19979: LD_STRING displayStucuk();
19981: PPUSH
19982: CALL_OW 559
// ResetFog ;
19986: CALL_OW 335
// end ; 3 :
19990: GO 20208
19992: LD_INT 3
19994: DOUBLE
19995: EQUAL
19996: IFTRUE 20000
19998: GO 20104
20000: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20001: LD_ADDR_VAR 0 2
20005: PUSH
20006: LD_INT 22
20008: PUSH
20009: LD_OWVAR 2
20013: PUSH
20014: EMPTY
20015: LIST
20016: LIST
20017: PUSH
20018: LD_INT 25
20020: PUSH
20021: LD_INT 1
20023: PUSH
20024: EMPTY
20025: LIST
20026: LIST
20027: PUSH
20028: EMPTY
20029: LIST
20030: LIST
20031: PPUSH
20032: CALL_OW 69
20036: ST_TO_ADDR
// if not tmp then
20037: LD_VAR 0 2
20041: NOT
20042: IFFALSE 20046
// exit ;
20044: GO 20208
// un := tmp [ rand ( 1 , tmp ) ] ;
20046: LD_ADDR_VAR 0 3
20050: PUSH
20051: LD_VAR 0 2
20055: PUSH
20056: LD_INT 1
20058: PPUSH
20059: LD_VAR 0 2
20063: PPUSH
20064: CALL_OW 12
20068: ARRAY
20069: ST_TO_ADDR
// if Crawls ( un ) then
20070: LD_VAR 0 3
20074: PPUSH
20075: CALL_OW 318
20079: IFFALSE 20090
// ComWalk ( un ) ;
20081: LD_VAR 0 3
20085: PPUSH
20086: CALL_OW 138
// SetClass ( un , class_mortar ) ;
20090: LD_VAR 0 3
20094: PPUSH
20095: LD_INT 8
20097: PPUSH
20098: CALL_OW 336
// end ; 4 :
20102: GO 20208
20104: LD_INT 4
20106: DOUBLE
20107: EQUAL
20108: IFTRUE 20112
20110: GO 20186
20112: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
20113: LD_ADDR_VAR 0 2
20117: PUSH
20118: LD_INT 22
20120: PUSH
20121: LD_OWVAR 2
20125: PUSH
20126: EMPTY
20127: LIST
20128: LIST
20129: PUSH
20130: LD_INT 30
20132: PUSH
20133: LD_INT 29
20135: PUSH
20136: EMPTY
20137: LIST
20138: LIST
20139: PUSH
20140: EMPTY
20141: LIST
20142: LIST
20143: PPUSH
20144: CALL_OW 69
20148: ST_TO_ADDR
// if not tmp then
20149: LD_VAR 0 2
20153: NOT
20154: IFFALSE 20158
// exit ;
20156: GO 20208
// CenterNowOnUnits ( tmp [ 1 ] ) ;
20158: LD_VAR 0 2
20162: PUSH
20163: LD_INT 1
20165: ARRAY
20166: PPUSH
20167: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
20171: LD_VAR 0 2
20175: PUSH
20176: LD_INT 1
20178: ARRAY
20179: PPUSH
20180: CALL_OW 65
// end ; 5 .. 7 :
20184: GO 20208
20186: LD_INT 5
20188: DOUBLE
20189: GREATEREQUAL
20190: IFFALSE 20198
20192: LD_INT 7
20194: DOUBLE
20195: LESSEQUAL
20196: IFTRUE 20200
20198: GO 20207
20200: POP
// StreamSibBomb ; end ;
20201: CALL 16445 0 0
20205: GO 20208
20207: POP
// end ;
20208: PPOPN 3
20210: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
20211: LD_EXP 53
20215: PUSH
20216: LD_EXP 103
20220: AND
20221: IFFALSE 20377
20223: GO 20225
20225: DISABLE
20226: LD_INT 0
20228: PPUSH
20229: PPUSH
20230: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
20231: LD_ADDR_VAR 0 2
20235: PUSH
20236: LD_INT 81
20238: PUSH
20239: LD_OWVAR 2
20243: PUSH
20244: EMPTY
20245: LIST
20246: LIST
20247: PUSH
20248: LD_INT 2
20250: PUSH
20251: LD_INT 21
20253: PUSH
20254: LD_INT 1
20256: PUSH
20257: EMPTY
20258: LIST
20259: LIST
20260: PUSH
20261: LD_INT 21
20263: PUSH
20264: LD_INT 2
20266: PUSH
20267: EMPTY
20268: LIST
20269: LIST
20270: PUSH
20271: EMPTY
20272: LIST
20273: LIST
20274: LIST
20275: PUSH
20276: EMPTY
20277: LIST
20278: LIST
20279: PPUSH
20280: CALL_OW 69
20284: ST_TO_ADDR
// if not tmp then
20285: LD_VAR 0 2
20289: NOT
20290: IFFALSE 20294
// exit ;
20292: GO 20377
// p := 0 ;
20294: LD_ADDR_VAR 0 3
20298: PUSH
20299: LD_INT 0
20301: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
20302: LD_INT 35
20304: PPUSH
20305: CALL_OW 67
// p := p + 1 ;
20309: LD_ADDR_VAR 0 3
20313: PUSH
20314: LD_VAR 0 3
20318: PUSH
20319: LD_INT 1
20321: PLUS
20322: ST_TO_ADDR
// for i in tmp do
20323: LD_ADDR_VAR 0 1
20327: PUSH
20328: LD_VAR 0 2
20332: PUSH
20333: FOR_IN
20334: IFFALSE 20365
// if GetLives ( i ) < 1000 then
20336: LD_VAR 0 1
20340: PPUSH
20341: CALL_OW 256
20345: PUSH
20346: LD_INT 1000
20348: LESS
20349: IFFALSE 20363
// SetLives ( i , 1000 ) ;
20351: LD_VAR 0 1
20355: PPUSH
20356: LD_INT 1000
20358: PPUSH
20359: CALL_OW 234
20363: GO 20333
20365: POP
20366: POP
// until p > 20 ;
20367: LD_VAR 0 3
20371: PUSH
20372: LD_INT 20
20374: GREATER
20375: IFFALSE 20302
// end ;
20377: PPOPN 3
20379: END
// every 0 0$1 trigger StreamModeActive and sTime do
20380: LD_EXP 53
20384: PUSH
20385: LD_EXP 104
20389: AND
20390: IFFALSE 20425
20392: GO 20394
20394: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
20395: LD_INT 28
20397: PPUSH
20398: LD_OWVAR 2
20402: PPUSH
20403: LD_INT 2
20405: PPUSH
20406: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
20410: LD_INT 30
20412: PPUSH
20413: LD_OWVAR 2
20417: PPUSH
20418: LD_INT 2
20420: PPUSH
20421: CALL_OW 322
// end ;
20425: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
20426: LD_EXP 53
20430: PUSH
20431: LD_EXP 105
20435: AND
20436: IFFALSE 20557
20438: GO 20440
20440: DISABLE
20441: LD_INT 0
20443: PPUSH
20444: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20445: LD_ADDR_VAR 0 2
20449: PUSH
20450: LD_INT 22
20452: PUSH
20453: LD_OWVAR 2
20457: PUSH
20458: EMPTY
20459: LIST
20460: LIST
20461: PUSH
20462: LD_INT 21
20464: PUSH
20465: LD_INT 1
20467: PUSH
20468: EMPTY
20469: LIST
20470: LIST
20471: PUSH
20472: LD_INT 3
20474: PUSH
20475: LD_INT 23
20477: PUSH
20478: LD_INT 0
20480: PUSH
20481: EMPTY
20482: LIST
20483: LIST
20484: PUSH
20485: EMPTY
20486: LIST
20487: LIST
20488: PUSH
20489: EMPTY
20490: LIST
20491: LIST
20492: LIST
20493: PPUSH
20494: CALL_OW 69
20498: ST_TO_ADDR
// if not tmp then
20499: LD_VAR 0 2
20503: NOT
20504: IFFALSE 20508
// exit ;
20506: GO 20557
// for i in tmp do
20508: LD_ADDR_VAR 0 1
20512: PUSH
20513: LD_VAR 0 2
20517: PUSH
20518: FOR_IN
20519: IFFALSE 20555
// begin if Crawls ( i ) then
20521: LD_VAR 0 1
20525: PPUSH
20526: CALL_OW 318
20530: IFFALSE 20541
// ComWalk ( i ) ;
20532: LD_VAR 0 1
20536: PPUSH
20537: CALL_OW 138
// SetClass ( i , 2 ) ;
20541: LD_VAR 0 1
20545: PPUSH
20546: LD_INT 2
20548: PPUSH
20549: CALL_OW 336
// end ;
20553: GO 20518
20555: POP
20556: POP
// end ;
20557: PPOPN 2
20559: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
20560: LD_EXP 53
20564: PUSH
20565: LD_EXP 106
20569: AND
20570: IFFALSE 20858
20572: GO 20574
20574: DISABLE
20575: LD_INT 0
20577: PPUSH
20578: PPUSH
20579: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
20580: LD_OWVAR 2
20584: PPUSH
20585: LD_INT 9
20587: PPUSH
20588: LD_INT 1
20590: PPUSH
20591: LD_INT 1
20593: PPUSH
20594: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
20598: LD_INT 9
20600: PPUSH
20601: LD_OWVAR 2
20605: PPUSH
20606: CALL_OW 343
// uc_side := 9 ;
20610: LD_ADDR_OWVAR 20
20614: PUSH
20615: LD_INT 9
20617: ST_TO_ADDR
// uc_nation := 2 ;
20618: LD_ADDR_OWVAR 21
20622: PUSH
20623: LD_INT 2
20625: ST_TO_ADDR
// hc_name := Dark Warrior ;
20626: LD_ADDR_OWVAR 26
20630: PUSH
20631: LD_STRING Dark Warrior
20633: ST_TO_ADDR
// hc_gallery :=  ;
20634: LD_ADDR_OWVAR 33
20638: PUSH
20639: LD_STRING 
20641: ST_TO_ADDR
// hc_noskilllimit := true ;
20642: LD_ADDR_OWVAR 76
20646: PUSH
20647: LD_INT 1
20649: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
20650: LD_ADDR_OWVAR 31
20654: PUSH
20655: LD_INT 30
20657: PUSH
20658: LD_INT 30
20660: PUSH
20661: LD_INT 30
20663: PUSH
20664: LD_INT 30
20666: PUSH
20667: EMPTY
20668: LIST
20669: LIST
20670: LIST
20671: LIST
20672: ST_TO_ADDR
// un := CreateHuman ;
20673: LD_ADDR_VAR 0 3
20677: PUSH
20678: CALL_OW 44
20682: ST_TO_ADDR
// hc_noskilllimit := false ;
20683: LD_ADDR_OWVAR 76
20687: PUSH
20688: LD_INT 0
20690: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20691: LD_VAR 0 3
20695: PPUSH
20696: LD_INT 1
20698: PPUSH
20699: CALL_OW 51
// ToLua ( playRanger() ) ;
20703: LD_STRING playRanger()
20705: PPUSH
20706: CALL_OW 559
// p := 0 ;
20710: LD_ADDR_VAR 0 2
20714: PUSH
20715: LD_INT 0
20717: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
20718: LD_INT 35
20720: PPUSH
20721: CALL_OW 67
// p := p + 1 ;
20725: LD_ADDR_VAR 0 2
20729: PUSH
20730: LD_VAR 0 2
20734: PUSH
20735: LD_INT 1
20737: PLUS
20738: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
20739: LD_VAR 0 3
20743: PPUSH
20744: CALL_OW 256
20748: PUSH
20749: LD_INT 1000
20751: LESS
20752: IFFALSE 20766
// SetLives ( un , 1000 ) ;
20754: LD_VAR 0 3
20758: PPUSH
20759: LD_INT 1000
20761: PPUSH
20762: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
20766: LD_VAR 0 3
20770: PPUSH
20771: LD_INT 81
20773: PUSH
20774: LD_OWVAR 2
20778: PUSH
20779: EMPTY
20780: LIST
20781: LIST
20782: PUSH
20783: LD_INT 91
20785: PUSH
20786: LD_VAR 0 3
20790: PUSH
20791: LD_INT 30
20793: PUSH
20794: EMPTY
20795: LIST
20796: LIST
20797: LIST
20798: PUSH
20799: EMPTY
20800: LIST
20801: LIST
20802: PPUSH
20803: CALL_OW 69
20807: PPUSH
20808: LD_VAR 0 3
20812: PPUSH
20813: CALL_OW 74
20817: PPUSH
20818: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
20822: LD_VAR 0 2
20826: PUSH
20827: LD_INT 80
20829: GREATER
20830: PUSH
20831: LD_VAR 0 3
20835: PPUSH
20836: CALL_OW 301
20840: OR
20841: IFFALSE 20718
// if un then
20843: LD_VAR 0 3
20847: IFFALSE 20858
// RemoveUnit ( un ) ;
20849: LD_VAR 0 3
20853: PPUSH
20854: CALL_OW 64
// end ;
20858: PPOPN 3
20860: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
20861: LD_EXP 107
20865: IFFALSE 20981
20867: GO 20869
20869: DISABLE
20870: LD_INT 0
20872: PPUSH
20873: PPUSH
20874: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
20875: LD_ADDR_VAR 0 2
20879: PUSH
20880: LD_INT 81
20882: PUSH
20883: LD_OWVAR 2
20887: PUSH
20888: EMPTY
20889: LIST
20890: LIST
20891: PUSH
20892: LD_INT 21
20894: PUSH
20895: LD_INT 1
20897: PUSH
20898: EMPTY
20899: LIST
20900: LIST
20901: PUSH
20902: EMPTY
20903: LIST
20904: LIST
20905: PPUSH
20906: CALL_OW 69
20910: ST_TO_ADDR
// ToLua ( playComputer() ) ;
20911: LD_STRING playComputer()
20913: PPUSH
20914: CALL_OW 559
// if not tmp then
20918: LD_VAR 0 2
20922: NOT
20923: IFFALSE 20927
// exit ;
20925: GO 20981
// for i in tmp do
20927: LD_ADDR_VAR 0 1
20931: PUSH
20932: LD_VAR 0 2
20936: PUSH
20937: FOR_IN
20938: IFFALSE 20979
// for j := 1 to 4 do
20940: LD_ADDR_VAR 0 3
20944: PUSH
20945: DOUBLE
20946: LD_INT 1
20948: DEC
20949: ST_TO_ADDR
20950: LD_INT 4
20952: PUSH
20953: FOR_TO
20954: IFFALSE 20975
// SetSkill ( i , j , 10 ) ;
20956: LD_VAR 0 1
20960: PPUSH
20961: LD_VAR 0 3
20965: PPUSH
20966: LD_INT 10
20968: PPUSH
20969: CALL_OW 237
20973: GO 20953
20975: POP
20976: POP
20977: GO 20937
20979: POP
20980: POP
// end ;
20981: PPOPN 3
20983: END
// every 0 0$1 trigger s30 do var i , tmp ;
20984: LD_EXP 108
20988: IFFALSE 21057
20990: GO 20992
20992: DISABLE
20993: LD_INT 0
20995: PPUSH
20996: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
20997: LD_ADDR_VAR 0 2
21001: PUSH
21002: LD_INT 22
21004: PUSH
21005: LD_OWVAR 2
21009: PUSH
21010: EMPTY
21011: LIST
21012: LIST
21013: PPUSH
21014: CALL_OW 69
21018: ST_TO_ADDR
// if not tmp then
21019: LD_VAR 0 2
21023: NOT
21024: IFFALSE 21028
// exit ;
21026: GO 21057
// for i in tmp do
21028: LD_ADDR_VAR 0 1
21032: PUSH
21033: LD_VAR 0 2
21037: PUSH
21038: FOR_IN
21039: IFFALSE 21055
// SetLives ( i , 300 ) ;
21041: LD_VAR 0 1
21045: PPUSH
21046: LD_INT 300
21048: PPUSH
21049: CALL_OW 234
21053: GO 21038
21055: POP
21056: POP
// end ;
21057: PPOPN 2
21059: END
// every 0 0$1 trigger s60 do var i , tmp ;
21060: LD_EXP 109
21064: IFFALSE 21133
21066: GO 21068
21068: DISABLE
21069: LD_INT 0
21071: PPUSH
21072: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21073: LD_ADDR_VAR 0 2
21077: PUSH
21078: LD_INT 22
21080: PUSH
21081: LD_OWVAR 2
21085: PUSH
21086: EMPTY
21087: LIST
21088: LIST
21089: PPUSH
21090: CALL_OW 69
21094: ST_TO_ADDR
// if not tmp then
21095: LD_VAR 0 2
21099: NOT
21100: IFFALSE 21104
// exit ;
21102: GO 21133
// for i in tmp do
21104: LD_ADDR_VAR 0 1
21108: PUSH
21109: LD_VAR 0 2
21113: PUSH
21114: FOR_IN
21115: IFFALSE 21131
// SetLives ( i , 600 ) ;
21117: LD_VAR 0 1
21121: PPUSH
21122: LD_INT 600
21124: PPUSH
21125: CALL_OW 234
21129: GO 21114
21131: POP
21132: POP
// end ;
21133: PPOPN 2
21135: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
21136: LD_INT 0
21138: PPUSH
// case cmd of 301 :
21139: LD_VAR 0 1
21143: PUSH
21144: LD_INT 301
21146: DOUBLE
21147: EQUAL
21148: IFTRUE 21152
21150: GO 21184
21152: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
21153: LD_VAR 0 6
21157: PPUSH
21158: LD_VAR 0 7
21162: PPUSH
21163: LD_VAR 0 8
21167: PPUSH
21168: LD_VAR 0 4
21172: PPUSH
21173: LD_VAR 0 5
21177: PPUSH
21178: CALL 22393 0 5
21182: GO 21305
21184: LD_INT 302
21186: DOUBLE
21187: EQUAL
21188: IFTRUE 21192
21190: GO 21229
21192: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
21193: LD_VAR 0 6
21197: PPUSH
21198: LD_VAR 0 7
21202: PPUSH
21203: LD_VAR 0 8
21207: PPUSH
21208: LD_VAR 0 9
21212: PPUSH
21213: LD_VAR 0 4
21217: PPUSH
21218: LD_VAR 0 5
21222: PPUSH
21223: CALL 22484 0 6
21227: GO 21305
21229: LD_INT 303
21231: DOUBLE
21232: EQUAL
21233: IFTRUE 21237
21235: GO 21274
21237: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
21238: LD_VAR 0 6
21242: PPUSH
21243: LD_VAR 0 7
21247: PPUSH
21248: LD_VAR 0 8
21252: PPUSH
21253: LD_VAR 0 9
21257: PPUSH
21258: LD_VAR 0 4
21262: PPUSH
21263: LD_VAR 0 5
21267: PPUSH
21268: CALL 21310 0 6
21272: GO 21305
21274: LD_INT 304
21276: DOUBLE
21277: EQUAL
21278: IFTRUE 21282
21280: GO 21304
21282: POP
// hHackTeleport ( unit , x , y ) ; end ;
21283: LD_VAR 0 2
21287: PPUSH
21288: LD_VAR 0 4
21292: PPUSH
21293: LD_VAR 0 5
21297: PPUSH
21298: CALL 23077 0 3
21302: GO 21305
21304: POP
// end ;
21305: LD_VAR 0 12
21309: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
21310: LD_INT 0
21312: PPUSH
21313: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
21314: LD_VAR 0 1
21318: PUSH
21319: LD_INT 1
21321: LESS
21322: PUSH
21323: LD_VAR 0 1
21327: PUSH
21328: LD_INT 3
21330: GREATER
21331: OR
21332: PUSH
21333: LD_VAR 0 5
21337: PPUSH
21338: LD_VAR 0 6
21342: PPUSH
21343: CALL_OW 428
21347: OR
21348: IFFALSE 21352
// exit ;
21350: GO 22080
// uc_side := your_side ;
21352: LD_ADDR_OWVAR 20
21356: PUSH
21357: LD_OWVAR 2
21361: ST_TO_ADDR
// uc_nation := nation ;
21362: LD_ADDR_OWVAR 21
21366: PUSH
21367: LD_VAR 0 1
21371: ST_TO_ADDR
// bc_level = 1 ;
21372: LD_ADDR_OWVAR 43
21376: PUSH
21377: LD_INT 1
21379: ST_TO_ADDR
// case btype of 1 :
21380: LD_VAR 0 2
21384: PUSH
21385: LD_INT 1
21387: DOUBLE
21388: EQUAL
21389: IFTRUE 21393
21391: GO 21404
21393: POP
// bc_type := b_depot ; 2 :
21394: LD_ADDR_OWVAR 42
21398: PUSH
21399: LD_INT 0
21401: ST_TO_ADDR
21402: GO 22024
21404: LD_INT 2
21406: DOUBLE
21407: EQUAL
21408: IFTRUE 21412
21410: GO 21423
21412: POP
// bc_type := b_warehouse ; 3 :
21413: LD_ADDR_OWVAR 42
21417: PUSH
21418: LD_INT 1
21420: ST_TO_ADDR
21421: GO 22024
21423: LD_INT 3
21425: DOUBLE
21426: EQUAL
21427: IFTRUE 21431
21429: GO 21442
21431: POP
// bc_type := b_lab ; 4 .. 9 :
21432: LD_ADDR_OWVAR 42
21436: PUSH
21437: LD_INT 6
21439: ST_TO_ADDR
21440: GO 22024
21442: LD_INT 4
21444: DOUBLE
21445: GREATEREQUAL
21446: IFFALSE 21454
21448: LD_INT 9
21450: DOUBLE
21451: LESSEQUAL
21452: IFTRUE 21456
21454: GO 21516
21456: POP
// begin bc_type := b_lab_half ;
21457: LD_ADDR_OWVAR 42
21461: PUSH
21462: LD_INT 7
21464: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
21465: LD_ADDR_OWVAR 44
21469: PUSH
21470: LD_INT 10
21472: PUSH
21473: LD_INT 11
21475: PUSH
21476: LD_INT 12
21478: PUSH
21479: LD_INT 15
21481: PUSH
21482: LD_INT 14
21484: PUSH
21485: LD_INT 13
21487: PUSH
21488: EMPTY
21489: LIST
21490: LIST
21491: LIST
21492: LIST
21493: LIST
21494: LIST
21495: PUSH
21496: LD_VAR 0 2
21500: PUSH
21501: LD_INT 3
21503: MINUS
21504: ARRAY
21505: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
21506: LD_ADDR_OWVAR 45
21510: PUSH
21511: LD_INT 9
21513: ST_TO_ADDR
// end ; 10 .. 13 :
21514: GO 22024
21516: LD_INT 10
21518: DOUBLE
21519: GREATEREQUAL
21520: IFFALSE 21528
21522: LD_INT 13
21524: DOUBLE
21525: LESSEQUAL
21526: IFTRUE 21530
21528: GO 21607
21530: POP
// begin bc_type := b_lab_full ;
21531: LD_ADDR_OWVAR 42
21535: PUSH
21536: LD_INT 8
21538: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
21539: LD_ADDR_OWVAR 44
21543: PUSH
21544: LD_INT 10
21546: PUSH
21547: LD_INT 12
21549: PUSH
21550: LD_INT 14
21552: PUSH
21553: LD_INT 13
21555: PUSH
21556: EMPTY
21557: LIST
21558: LIST
21559: LIST
21560: LIST
21561: PUSH
21562: LD_VAR 0 2
21566: PUSH
21567: LD_INT 9
21569: MINUS
21570: ARRAY
21571: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
21572: LD_ADDR_OWVAR 45
21576: PUSH
21577: LD_INT 11
21579: PUSH
21580: LD_INT 15
21582: PUSH
21583: LD_INT 12
21585: PUSH
21586: LD_INT 15
21588: PUSH
21589: EMPTY
21590: LIST
21591: LIST
21592: LIST
21593: LIST
21594: PUSH
21595: LD_VAR 0 2
21599: PUSH
21600: LD_INT 9
21602: MINUS
21603: ARRAY
21604: ST_TO_ADDR
// end ; 14 :
21605: GO 22024
21607: LD_INT 14
21609: DOUBLE
21610: EQUAL
21611: IFTRUE 21615
21613: GO 21626
21615: POP
// bc_type := b_workshop ; 15 :
21616: LD_ADDR_OWVAR 42
21620: PUSH
21621: LD_INT 2
21623: ST_TO_ADDR
21624: GO 22024
21626: LD_INT 15
21628: DOUBLE
21629: EQUAL
21630: IFTRUE 21634
21632: GO 21645
21634: POP
// bc_type := b_factory ; 16 :
21635: LD_ADDR_OWVAR 42
21639: PUSH
21640: LD_INT 3
21642: ST_TO_ADDR
21643: GO 22024
21645: LD_INT 16
21647: DOUBLE
21648: EQUAL
21649: IFTRUE 21653
21651: GO 21664
21653: POP
// bc_type := b_ext_gun ; 17 :
21654: LD_ADDR_OWVAR 42
21658: PUSH
21659: LD_INT 17
21661: ST_TO_ADDR
21662: GO 22024
21664: LD_INT 17
21666: DOUBLE
21667: EQUAL
21668: IFTRUE 21672
21670: GO 21700
21672: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
21673: LD_ADDR_OWVAR 42
21677: PUSH
21678: LD_INT 19
21680: PUSH
21681: LD_INT 23
21683: PUSH
21684: LD_INT 19
21686: PUSH
21687: EMPTY
21688: LIST
21689: LIST
21690: LIST
21691: PUSH
21692: LD_VAR 0 1
21696: ARRAY
21697: ST_TO_ADDR
21698: GO 22024
21700: LD_INT 18
21702: DOUBLE
21703: EQUAL
21704: IFTRUE 21708
21706: GO 21719
21708: POP
// bc_type := b_ext_radar ; 19 :
21709: LD_ADDR_OWVAR 42
21713: PUSH
21714: LD_INT 20
21716: ST_TO_ADDR
21717: GO 22024
21719: LD_INT 19
21721: DOUBLE
21722: EQUAL
21723: IFTRUE 21727
21725: GO 21738
21727: POP
// bc_type := b_ext_radio ; 20 :
21728: LD_ADDR_OWVAR 42
21732: PUSH
21733: LD_INT 22
21735: ST_TO_ADDR
21736: GO 22024
21738: LD_INT 20
21740: DOUBLE
21741: EQUAL
21742: IFTRUE 21746
21744: GO 21757
21746: POP
// bc_type := b_ext_siberium ; 21 :
21747: LD_ADDR_OWVAR 42
21751: PUSH
21752: LD_INT 21
21754: ST_TO_ADDR
21755: GO 22024
21757: LD_INT 21
21759: DOUBLE
21760: EQUAL
21761: IFTRUE 21765
21763: GO 21776
21765: POP
// bc_type := b_ext_computer ; 22 :
21766: LD_ADDR_OWVAR 42
21770: PUSH
21771: LD_INT 24
21773: ST_TO_ADDR
21774: GO 22024
21776: LD_INT 22
21778: DOUBLE
21779: EQUAL
21780: IFTRUE 21784
21782: GO 21795
21784: POP
// bc_type := b_ext_track ; 23 :
21785: LD_ADDR_OWVAR 42
21789: PUSH
21790: LD_INT 16
21792: ST_TO_ADDR
21793: GO 22024
21795: LD_INT 23
21797: DOUBLE
21798: EQUAL
21799: IFTRUE 21803
21801: GO 21814
21803: POP
// bc_type := b_ext_laser ; 24 :
21804: LD_ADDR_OWVAR 42
21808: PUSH
21809: LD_INT 25
21811: ST_TO_ADDR
21812: GO 22024
21814: LD_INT 24
21816: DOUBLE
21817: EQUAL
21818: IFTRUE 21822
21820: GO 21833
21822: POP
// bc_type := b_control_tower ; 25 :
21823: LD_ADDR_OWVAR 42
21827: PUSH
21828: LD_INT 36
21830: ST_TO_ADDR
21831: GO 22024
21833: LD_INT 25
21835: DOUBLE
21836: EQUAL
21837: IFTRUE 21841
21839: GO 21852
21841: POP
// bc_type := b_breastwork ; 26 :
21842: LD_ADDR_OWVAR 42
21846: PUSH
21847: LD_INT 31
21849: ST_TO_ADDR
21850: GO 22024
21852: LD_INT 26
21854: DOUBLE
21855: EQUAL
21856: IFTRUE 21860
21858: GO 21871
21860: POP
// bc_type := b_bunker ; 27 :
21861: LD_ADDR_OWVAR 42
21865: PUSH
21866: LD_INT 32
21868: ST_TO_ADDR
21869: GO 22024
21871: LD_INT 27
21873: DOUBLE
21874: EQUAL
21875: IFTRUE 21879
21877: GO 21890
21879: POP
// bc_type := b_turret ; 28 :
21880: LD_ADDR_OWVAR 42
21884: PUSH
21885: LD_INT 33
21887: ST_TO_ADDR
21888: GO 22024
21890: LD_INT 28
21892: DOUBLE
21893: EQUAL
21894: IFTRUE 21898
21896: GO 21909
21898: POP
// bc_type := b_armoury ; 29 :
21899: LD_ADDR_OWVAR 42
21903: PUSH
21904: LD_INT 4
21906: ST_TO_ADDR
21907: GO 22024
21909: LD_INT 29
21911: DOUBLE
21912: EQUAL
21913: IFTRUE 21917
21915: GO 21928
21917: POP
// bc_type := b_barracks ; 30 :
21918: LD_ADDR_OWVAR 42
21922: PUSH
21923: LD_INT 5
21925: ST_TO_ADDR
21926: GO 22024
21928: LD_INT 30
21930: DOUBLE
21931: EQUAL
21932: IFTRUE 21936
21934: GO 21947
21936: POP
// bc_type := b_solar_power ; 31 :
21937: LD_ADDR_OWVAR 42
21941: PUSH
21942: LD_INT 27
21944: ST_TO_ADDR
21945: GO 22024
21947: LD_INT 31
21949: DOUBLE
21950: EQUAL
21951: IFTRUE 21955
21953: GO 21966
21955: POP
// bc_type := b_oil_power ; 32 :
21956: LD_ADDR_OWVAR 42
21960: PUSH
21961: LD_INT 26
21963: ST_TO_ADDR
21964: GO 22024
21966: LD_INT 32
21968: DOUBLE
21969: EQUAL
21970: IFTRUE 21974
21972: GO 21985
21974: POP
// bc_type := b_siberite_power ; 33 :
21975: LD_ADDR_OWVAR 42
21979: PUSH
21980: LD_INT 28
21982: ST_TO_ADDR
21983: GO 22024
21985: LD_INT 33
21987: DOUBLE
21988: EQUAL
21989: IFTRUE 21993
21991: GO 22004
21993: POP
// bc_type := b_oil_mine ; 34 :
21994: LD_ADDR_OWVAR 42
21998: PUSH
21999: LD_INT 29
22001: ST_TO_ADDR
22002: GO 22024
22004: LD_INT 34
22006: DOUBLE
22007: EQUAL
22008: IFTRUE 22012
22010: GO 22023
22012: POP
// bc_type := b_siberite_mine ; end ;
22013: LD_ADDR_OWVAR 42
22017: PUSH
22018: LD_INT 30
22020: ST_TO_ADDR
22021: GO 22024
22023: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
22024: LD_ADDR_VAR 0 8
22028: PUSH
22029: LD_VAR 0 5
22033: PPUSH
22034: LD_VAR 0 6
22038: PPUSH
22039: LD_VAR 0 3
22043: PPUSH
22044: CALL_OW 47
22048: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
22049: LD_OWVAR 42
22053: PUSH
22054: LD_INT 32
22056: PUSH
22057: LD_INT 33
22059: PUSH
22060: EMPTY
22061: LIST
22062: LIST
22063: IN
22064: IFFALSE 22080
// PlaceWeaponTurret ( b , weapon ) ;
22066: LD_VAR 0 8
22070: PPUSH
22071: LD_VAR 0 4
22075: PPUSH
22076: CALL_OW 431
// end ;
22080: LD_VAR 0 7
22084: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
22085: LD_INT 0
22087: PPUSH
22088: PPUSH
22089: PPUSH
22090: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22091: LD_ADDR_VAR 0 4
22095: PUSH
22096: LD_INT 22
22098: PUSH
22099: LD_OWVAR 2
22103: PUSH
22104: EMPTY
22105: LIST
22106: LIST
22107: PUSH
22108: LD_INT 2
22110: PUSH
22111: LD_INT 30
22113: PUSH
22114: LD_INT 0
22116: PUSH
22117: EMPTY
22118: LIST
22119: LIST
22120: PUSH
22121: LD_INT 30
22123: PUSH
22124: LD_INT 1
22126: PUSH
22127: EMPTY
22128: LIST
22129: LIST
22130: PUSH
22131: EMPTY
22132: LIST
22133: LIST
22134: LIST
22135: PUSH
22136: EMPTY
22137: LIST
22138: LIST
22139: PPUSH
22140: CALL_OW 69
22144: ST_TO_ADDR
// if not tmp then
22145: LD_VAR 0 4
22149: NOT
22150: IFFALSE 22154
// exit ;
22152: GO 22213
// for i in tmp do
22154: LD_ADDR_VAR 0 2
22158: PUSH
22159: LD_VAR 0 4
22163: PUSH
22164: FOR_IN
22165: IFFALSE 22211
// for j = 1 to 3 do
22167: LD_ADDR_VAR 0 3
22171: PUSH
22172: DOUBLE
22173: LD_INT 1
22175: DEC
22176: ST_TO_ADDR
22177: LD_INT 3
22179: PUSH
22180: FOR_TO
22181: IFFALSE 22207
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
22183: LD_VAR 0 2
22187: PPUSH
22188: CALL_OW 274
22192: PPUSH
22193: LD_VAR 0 3
22197: PPUSH
22198: LD_INT 99999
22200: PPUSH
22201: CALL_OW 277
22205: GO 22180
22207: POP
22208: POP
22209: GO 22164
22211: POP
22212: POP
// end ;
22213: LD_VAR 0 1
22217: RET
// export function hHackSetLevel10 ; var i , j ; begin
22218: LD_INT 0
22220: PPUSH
22221: PPUSH
22222: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
22223: LD_ADDR_VAR 0 2
22227: PUSH
22228: LD_INT 21
22230: PUSH
22231: LD_INT 1
22233: PUSH
22234: EMPTY
22235: LIST
22236: LIST
22237: PPUSH
22238: CALL_OW 69
22242: PUSH
22243: FOR_IN
22244: IFFALSE 22296
// if IsSelected ( i ) then
22246: LD_VAR 0 2
22250: PPUSH
22251: CALL_OW 306
22255: IFFALSE 22294
// begin for j := 1 to 4 do
22257: LD_ADDR_VAR 0 3
22261: PUSH
22262: DOUBLE
22263: LD_INT 1
22265: DEC
22266: ST_TO_ADDR
22267: LD_INT 4
22269: PUSH
22270: FOR_TO
22271: IFFALSE 22292
// SetSkill ( i , j , 10 ) ;
22273: LD_VAR 0 2
22277: PPUSH
22278: LD_VAR 0 3
22282: PPUSH
22283: LD_INT 10
22285: PPUSH
22286: CALL_OW 237
22290: GO 22270
22292: POP
22293: POP
// end ;
22294: GO 22243
22296: POP
22297: POP
// end ;
22298: LD_VAR 0 1
22302: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
22303: LD_INT 0
22305: PPUSH
22306: PPUSH
22307: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
22308: LD_ADDR_VAR 0 2
22312: PUSH
22313: LD_INT 22
22315: PUSH
22316: LD_OWVAR 2
22320: PUSH
22321: EMPTY
22322: LIST
22323: LIST
22324: PUSH
22325: LD_INT 21
22327: PUSH
22328: LD_INT 1
22330: PUSH
22331: EMPTY
22332: LIST
22333: LIST
22334: PUSH
22335: EMPTY
22336: LIST
22337: LIST
22338: PPUSH
22339: CALL_OW 69
22343: PUSH
22344: FOR_IN
22345: IFFALSE 22386
// begin for j := 1 to 4 do
22347: LD_ADDR_VAR 0 3
22351: PUSH
22352: DOUBLE
22353: LD_INT 1
22355: DEC
22356: ST_TO_ADDR
22357: LD_INT 4
22359: PUSH
22360: FOR_TO
22361: IFFALSE 22382
// SetSkill ( i , j , 10 ) ;
22363: LD_VAR 0 2
22367: PPUSH
22368: LD_VAR 0 3
22372: PPUSH
22373: LD_INT 10
22375: PPUSH
22376: CALL_OW 237
22380: GO 22360
22382: POP
22383: POP
// end ;
22384: GO 22344
22386: POP
22387: POP
// end ;
22388: LD_VAR 0 1
22392: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
22393: LD_INT 0
22395: PPUSH
// uc_side := your_side ;
22396: LD_ADDR_OWVAR 20
22400: PUSH
22401: LD_OWVAR 2
22405: ST_TO_ADDR
// uc_nation := nation ;
22406: LD_ADDR_OWVAR 21
22410: PUSH
22411: LD_VAR 0 1
22415: ST_TO_ADDR
// InitHc ;
22416: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
22420: LD_INT 0
22422: PPUSH
22423: LD_VAR 0 2
22427: PPUSH
22428: LD_VAR 0 3
22432: PPUSH
22433: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
22437: LD_VAR 0 4
22441: PPUSH
22442: LD_VAR 0 5
22446: PPUSH
22447: CALL_OW 428
22451: PUSH
22452: LD_INT 0
22454: EQUAL
22455: IFFALSE 22479
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
22457: CALL_OW 44
22461: PPUSH
22462: LD_VAR 0 4
22466: PPUSH
22467: LD_VAR 0 5
22471: PPUSH
22472: LD_INT 1
22474: PPUSH
22475: CALL_OW 48
// end ;
22479: LD_VAR 0 6
22483: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
22484: LD_INT 0
22486: PPUSH
22487: PPUSH
// uc_side := your_side ;
22488: LD_ADDR_OWVAR 20
22492: PUSH
22493: LD_OWVAR 2
22497: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
22498: LD_VAR 0 1
22502: PUSH
22503: LD_INT 1
22505: PUSH
22506: LD_INT 2
22508: PUSH
22509: LD_INT 3
22511: PUSH
22512: LD_INT 4
22514: PUSH
22515: LD_INT 5
22517: PUSH
22518: EMPTY
22519: LIST
22520: LIST
22521: LIST
22522: LIST
22523: LIST
22524: IN
22525: IFFALSE 22537
// uc_nation := nation_american else
22527: LD_ADDR_OWVAR 21
22531: PUSH
22532: LD_INT 1
22534: ST_TO_ADDR
22535: GO 22580
// if chassis in [ 11 , 12 , 13 , 14 ] then
22537: LD_VAR 0 1
22541: PUSH
22542: LD_INT 11
22544: PUSH
22545: LD_INT 12
22547: PUSH
22548: LD_INT 13
22550: PUSH
22551: LD_INT 14
22553: PUSH
22554: EMPTY
22555: LIST
22556: LIST
22557: LIST
22558: LIST
22559: IN
22560: IFFALSE 22572
// uc_nation := nation_arabian else
22562: LD_ADDR_OWVAR 21
22566: PUSH
22567: LD_INT 2
22569: ST_TO_ADDR
22570: GO 22580
// uc_nation := nation_russian ;
22572: LD_ADDR_OWVAR 21
22576: PUSH
22577: LD_INT 3
22579: ST_TO_ADDR
// vc_chassis := chassis ;
22580: LD_ADDR_OWVAR 37
22584: PUSH
22585: LD_VAR 0 1
22589: ST_TO_ADDR
// vc_engine := engine ;
22590: LD_ADDR_OWVAR 39
22594: PUSH
22595: LD_VAR 0 2
22599: ST_TO_ADDR
// vc_control := control ;
22600: LD_ADDR_OWVAR 38
22604: PUSH
22605: LD_VAR 0 3
22609: ST_TO_ADDR
// vc_weapon := weapon ;
22610: LD_ADDR_OWVAR 40
22614: PUSH
22615: LD_VAR 0 4
22619: ST_TO_ADDR
// un := CreateVehicle ;
22620: LD_ADDR_VAR 0 8
22624: PUSH
22625: CALL_OW 45
22629: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
22630: LD_VAR 0 8
22634: PPUSH
22635: LD_INT 0
22637: PPUSH
22638: LD_INT 5
22640: PPUSH
22641: CALL_OW 12
22645: PPUSH
22646: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
22650: LD_VAR 0 8
22654: PPUSH
22655: LD_VAR 0 5
22659: PPUSH
22660: LD_VAR 0 6
22664: PPUSH
22665: LD_INT 1
22667: PPUSH
22668: CALL_OW 48
// end ;
22672: LD_VAR 0 7
22676: RET
// export hInvincible ; every 1 do
22677: GO 22679
22679: DISABLE
// hInvincible := [ ] ;
22680: LD_ADDR_EXP 110
22684: PUSH
22685: EMPTY
22686: ST_TO_ADDR
22687: END
// every 10 do var i ;
22688: GO 22690
22690: DISABLE
22691: LD_INT 0
22693: PPUSH
// begin enable ;
22694: ENABLE
// if not hInvincible then
22695: LD_EXP 110
22699: NOT
22700: IFFALSE 22704
// exit ;
22702: GO 22748
// for i in hInvincible do
22704: LD_ADDR_VAR 0 1
22708: PUSH
22709: LD_EXP 110
22713: PUSH
22714: FOR_IN
22715: IFFALSE 22746
// if GetLives ( i ) < 1000 then
22717: LD_VAR 0 1
22721: PPUSH
22722: CALL_OW 256
22726: PUSH
22727: LD_INT 1000
22729: LESS
22730: IFFALSE 22744
// SetLives ( i , 1000 ) ;
22732: LD_VAR 0 1
22736: PPUSH
22737: LD_INT 1000
22739: PPUSH
22740: CALL_OW 234
22744: GO 22714
22746: POP
22747: POP
// end ;
22748: PPOPN 1
22750: END
// export function hHackInvincible ; var i ; begin
22751: LD_INT 0
22753: PPUSH
22754: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
22755: LD_ADDR_VAR 0 2
22759: PUSH
22760: LD_INT 2
22762: PUSH
22763: LD_INT 21
22765: PUSH
22766: LD_INT 1
22768: PUSH
22769: EMPTY
22770: LIST
22771: LIST
22772: PUSH
22773: LD_INT 21
22775: PUSH
22776: LD_INT 2
22778: PUSH
22779: EMPTY
22780: LIST
22781: LIST
22782: PUSH
22783: EMPTY
22784: LIST
22785: LIST
22786: LIST
22787: PPUSH
22788: CALL_OW 69
22792: PUSH
22793: FOR_IN
22794: IFFALSE 22855
// if IsSelected ( i ) then
22796: LD_VAR 0 2
22800: PPUSH
22801: CALL_OW 306
22805: IFFALSE 22853
// begin if i in hInvincible then
22807: LD_VAR 0 2
22811: PUSH
22812: LD_EXP 110
22816: IN
22817: IFFALSE 22837
// hInvincible := hInvincible diff i else
22819: LD_ADDR_EXP 110
22823: PUSH
22824: LD_EXP 110
22828: PUSH
22829: LD_VAR 0 2
22833: DIFF
22834: ST_TO_ADDR
22835: GO 22853
// hInvincible := hInvincible union i ;
22837: LD_ADDR_EXP 110
22841: PUSH
22842: LD_EXP 110
22846: PUSH
22847: LD_VAR 0 2
22851: UNION
22852: ST_TO_ADDR
// end ;
22853: GO 22793
22855: POP
22856: POP
// end ;
22857: LD_VAR 0 1
22861: RET
// export function hHackInvisible ; var i , j ; begin
22862: LD_INT 0
22864: PPUSH
22865: PPUSH
22866: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
22867: LD_ADDR_VAR 0 2
22871: PUSH
22872: LD_INT 21
22874: PUSH
22875: LD_INT 1
22877: PUSH
22878: EMPTY
22879: LIST
22880: LIST
22881: PPUSH
22882: CALL_OW 69
22886: PUSH
22887: FOR_IN
22888: IFFALSE 22912
// if IsSelected ( i ) then
22890: LD_VAR 0 2
22894: PPUSH
22895: CALL_OW 306
22899: IFFALSE 22910
// ComForceInvisible ( i ) ;
22901: LD_VAR 0 2
22905: PPUSH
22906: CALL_OW 496
22910: GO 22887
22912: POP
22913: POP
// end ;
22914: LD_VAR 0 1
22918: RET
// export function hHackChangeYourSide ; begin
22919: LD_INT 0
22921: PPUSH
// if your_side = 8 then
22922: LD_OWVAR 2
22926: PUSH
22927: LD_INT 8
22929: EQUAL
22930: IFFALSE 22942
// your_side := 0 else
22932: LD_ADDR_OWVAR 2
22936: PUSH
22937: LD_INT 0
22939: ST_TO_ADDR
22940: GO 22956
// your_side := your_side + 1 ;
22942: LD_ADDR_OWVAR 2
22946: PUSH
22947: LD_OWVAR 2
22951: PUSH
22952: LD_INT 1
22954: PLUS
22955: ST_TO_ADDR
// end ;
22956: LD_VAR 0 1
22960: RET
// export function hHackChangeUnitSide ; var i , j ; begin
22961: LD_INT 0
22963: PPUSH
22964: PPUSH
22965: PPUSH
// for i in all_units do
22966: LD_ADDR_VAR 0 2
22970: PUSH
22971: LD_OWVAR 3
22975: PUSH
22976: FOR_IN
22977: IFFALSE 23055
// if IsSelected ( i ) then
22979: LD_VAR 0 2
22983: PPUSH
22984: CALL_OW 306
22988: IFFALSE 23053
// begin j := GetSide ( i ) ;
22990: LD_ADDR_VAR 0 3
22994: PUSH
22995: LD_VAR 0 2
22999: PPUSH
23000: CALL_OW 255
23004: ST_TO_ADDR
// if j = 8 then
23005: LD_VAR 0 3
23009: PUSH
23010: LD_INT 8
23012: EQUAL
23013: IFFALSE 23025
// j := 0 else
23015: LD_ADDR_VAR 0 3
23019: PUSH
23020: LD_INT 0
23022: ST_TO_ADDR
23023: GO 23039
// j := j + 1 ;
23025: LD_ADDR_VAR 0 3
23029: PUSH
23030: LD_VAR 0 3
23034: PUSH
23035: LD_INT 1
23037: PLUS
23038: ST_TO_ADDR
// SetSide ( i , j ) ;
23039: LD_VAR 0 2
23043: PPUSH
23044: LD_VAR 0 3
23048: PPUSH
23049: CALL_OW 235
// end ;
23053: GO 22976
23055: POP
23056: POP
// end ;
23057: LD_VAR 0 1
23061: RET
// export function hHackFog ; begin
23062: LD_INT 0
23064: PPUSH
// FogOff ( true ) ;
23065: LD_INT 1
23067: PPUSH
23068: CALL_OW 344
// end ;
23072: LD_VAR 0 1
23076: RET
// export function hHackTeleport ( unit , x , y ) ; begin
23077: LD_INT 0
23079: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
23080: LD_VAR 0 1
23084: PPUSH
23085: LD_VAR 0 2
23089: PPUSH
23090: LD_VAR 0 3
23094: PPUSH
23095: LD_INT 1
23097: PPUSH
23098: LD_INT 1
23100: PPUSH
23101: CALL_OW 483
// CenterOnXY ( x , y ) ;
23105: LD_VAR 0 2
23109: PPUSH
23110: LD_VAR 0 3
23114: PPUSH
23115: CALL_OW 84
// end ;
23119: LD_VAR 0 4
23123: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
23124: LD_INT 0
23126: PPUSH
23127: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
23128: LD_VAR 0 1
23132: NOT
23133: PUSH
23134: LD_VAR 0 2
23138: PPUSH
23139: LD_VAR 0 3
23143: PPUSH
23144: CALL_OW 488
23148: NOT
23149: OR
23150: PUSH
23151: LD_VAR 0 1
23155: PPUSH
23156: CALL_OW 266
23160: PUSH
23161: LD_INT 3
23163: NONEQUAL
23164: PUSH
23165: LD_VAR 0 1
23169: PPUSH
23170: CALL_OW 247
23174: PUSH
23175: LD_INT 1
23177: EQUAL
23178: NOT
23179: AND
23180: OR
23181: IFFALSE 23185
// exit ;
23183: GO 23334
// if GetType ( factory ) = unit_human then
23185: LD_VAR 0 1
23189: PPUSH
23190: CALL_OW 247
23194: PUSH
23195: LD_INT 1
23197: EQUAL
23198: IFFALSE 23215
// factory := IsInUnit ( factory ) ;
23200: LD_ADDR_VAR 0 1
23204: PUSH
23205: LD_VAR 0 1
23209: PPUSH
23210: CALL_OW 310
23214: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
23215: LD_VAR 0 1
23219: PPUSH
23220: CALL_OW 266
23224: PUSH
23225: LD_INT 3
23227: NONEQUAL
23228: IFFALSE 23232
// exit ;
23230: GO 23334
// if HexInfo ( x , y ) = factory then
23232: LD_VAR 0 2
23236: PPUSH
23237: LD_VAR 0 3
23241: PPUSH
23242: CALL_OW 428
23246: PUSH
23247: LD_VAR 0 1
23251: EQUAL
23252: IFFALSE 23279
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
23254: LD_ADDR_EXP 111
23258: PUSH
23259: LD_EXP 111
23263: PPUSH
23264: LD_VAR 0 1
23268: PPUSH
23269: LD_INT 0
23271: PPUSH
23272: CALL_OW 1
23276: ST_TO_ADDR
23277: GO 23330
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
23279: LD_ADDR_EXP 111
23283: PUSH
23284: LD_EXP 111
23288: PPUSH
23289: LD_VAR 0 1
23293: PPUSH
23294: LD_VAR 0 1
23298: PPUSH
23299: CALL_OW 255
23303: PUSH
23304: LD_VAR 0 1
23308: PUSH
23309: LD_VAR 0 2
23313: PUSH
23314: LD_VAR 0 3
23318: PUSH
23319: EMPTY
23320: LIST
23321: LIST
23322: LIST
23323: LIST
23324: PPUSH
23325: CALL_OW 1
23329: ST_TO_ADDR
// UpdateFactoryWaypoints ;
23330: CALL 23339 0 0
// end ;
23334: LD_VAR 0 4
23338: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
23339: LD_INT 0
23341: PPUSH
23342: PPUSH
23343: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
23344: LD_STRING resetFactoryWaypoint();
23346: PPUSH
23347: CALL_OW 559
// if factoryWaypoints then
23351: LD_EXP 111
23355: IFFALSE 23481
// begin list := PrepareArray ( factoryWaypoints ) ;
23357: LD_ADDR_VAR 0 3
23361: PUSH
23362: LD_EXP 111
23366: PPUSH
23367: CALL 70778 0 1
23371: ST_TO_ADDR
// for i := 1 to list do
23372: LD_ADDR_VAR 0 2
23376: PUSH
23377: DOUBLE
23378: LD_INT 1
23380: DEC
23381: ST_TO_ADDR
23382: LD_VAR 0 3
23386: PUSH
23387: FOR_TO
23388: IFFALSE 23479
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
23390: LD_STRING setFactoryWaypointXY(
23392: PUSH
23393: LD_VAR 0 3
23397: PUSH
23398: LD_VAR 0 2
23402: ARRAY
23403: PUSH
23404: LD_INT 1
23406: ARRAY
23407: STR
23408: PUSH
23409: LD_STRING ,
23411: STR
23412: PUSH
23413: LD_VAR 0 3
23417: PUSH
23418: LD_VAR 0 2
23422: ARRAY
23423: PUSH
23424: LD_INT 2
23426: ARRAY
23427: STR
23428: PUSH
23429: LD_STRING ,
23431: STR
23432: PUSH
23433: LD_VAR 0 3
23437: PUSH
23438: LD_VAR 0 2
23442: ARRAY
23443: PUSH
23444: LD_INT 3
23446: ARRAY
23447: STR
23448: PUSH
23449: LD_STRING ,
23451: STR
23452: PUSH
23453: LD_VAR 0 3
23457: PUSH
23458: LD_VAR 0 2
23462: ARRAY
23463: PUSH
23464: LD_INT 4
23466: ARRAY
23467: STR
23468: PUSH
23469: LD_STRING )
23471: STR
23472: PPUSH
23473: CALL_OW 559
23477: GO 23387
23479: POP
23480: POP
// end ; end ;
23481: LD_VAR 0 1
23485: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
23486: LD_INT 0
23488: PPUSH
// if HexInfo ( x , y ) = warehouse then
23489: LD_VAR 0 2
23493: PPUSH
23494: LD_VAR 0 3
23498: PPUSH
23499: CALL_OW 428
23503: PUSH
23504: LD_VAR 0 1
23508: EQUAL
23509: IFFALSE 23536
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
23511: LD_ADDR_EXP 112
23515: PUSH
23516: LD_EXP 112
23520: PPUSH
23521: LD_VAR 0 1
23525: PPUSH
23526: LD_INT 0
23528: PPUSH
23529: CALL_OW 1
23533: ST_TO_ADDR
23534: GO 23587
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
23536: LD_ADDR_EXP 112
23540: PUSH
23541: LD_EXP 112
23545: PPUSH
23546: LD_VAR 0 1
23550: PPUSH
23551: LD_VAR 0 1
23555: PPUSH
23556: CALL_OW 255
23560: PUSH
23561: LD_VAR 0 1
23565: PUSH
23566: LD_VAR 0 2
23570: PUSH
23571: LD_VAR 0 3
23575: PUSH
23576: EMPTY
23577: LIST
23578: LIST
23579: LIST
23580: LIST
23581: PPUSH
23582: CALL_OW 1
23586: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
23587: CALL 23596 0 0
// end ;
23591: LD_VAR 0 4
23595: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
23596: LD_INT 0
23598: PPUSH
23599: PPUSH
23600: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
23601: LD_STRING resetWarehouseGatheringPoints();
23603: PPUSH
23604: CALL_OW 559
// if warehouseGatheringPoints then
23608: LD_EXP 112
23612: IFFALSE 23738
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
23614: LD_ADDR_VAR 0 3
23618: PUSH
23619: LD_EXP 112
23623: PPUSH
23624: CALL 70778 0 1
23628: ST_TO_ADDR
// for i := 1 to list do
23629: LD_ADDR_VAR 0 2
23633: PUSH
23634: DOUBLE
23635: LD_INT 1
23637: DEC
23638: ST_TO_ADDR
23639: LD_VAR 0 3
23643: PUSH
23644: FOR_TO
23645: IFFALSE 23736
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
23647: LD_STRING setWarehouseGatheringPointXY(
23649: PUSH
23650: LD_VAR 0 3
23654: PUSH
23655: LD_VAR 0 2
23659: ARRAY
23660: PUSH
23661: LD_INT 1
23663: ARRAY
23664: STR
23665: PUSH
23666: LD_STRING ,
23668: STR
23669: PUSH
23670: LD_VAR 0 3
23674: PUSH
23675: LD_VAR 0 2
23679: ARRAY
23680: PUSH
23681: LD_INT 2
23683: ARRAY
23684: STR
23685: PUSH
23686: LD_STRING ,
23688: STR
23689: PUSH
23690: LD_VAR 0 3
23694: PUSH
23695: LD_VAR 0 2
23699: ARRAY
23700: PUSH
23701: LD_INT 3
23703: ARRAY
23704: STR
23705: PUSH
23706: LD_STRING ,
23708: STR
23709: PUSH
23710: LD_VAR 0 3
23714: PUSH
23715: LD_VAR 0 2
23719: ARRAY
23720: PUSH
23721: LD_INT 4
23723: ARRAY
23724: STR
23725: PUSH
23726: LD_STRING )
23728: STR
23729: PPUSH
23730: CALL_OW 559
23734: GO 23644
23736: POP
23737: POP
// end ; end ;
23738: LD_VAR 0 1
23742: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
23743: LD_EXP 112
23747: IFFALSE 24432
23749: GO 23751
23751: DISABLE
23752: LD_INT 0
23754: PPUSH
23755: PPUSH
23756: PPUSH
23757: PPUSH
23758: PPUSH
23759: PPUSH
23760: PPUSH
23761: PPUSH
23762: PPUSH
// begin enable ;
23763: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
23764: LD_ADDR_VAR 0 3
23768: PUSH
23769: LD_EXP 112
23773: PPUSH
23774: CALL 70778 0 1
23778: ST_TO_ADDR
// if not list then
23779: LD_VAR 0 3
23783: NOT
23784: IFFALSE 23788
// exit ;
23786: GO 24432
// for i := 1 to list do
23788: LD_ADDR_VAR 0 1
23792: PUSH
23793: DOUBLE
23794: LD_INT 1
23796: DEC
23797: ST_TO_ADDR
23798: LD_VAR 0 3
23802: PUSH
23803: FOR_TO
23804: IFFALSE 24430
// begin depot := list [ i ] [ 2 ] ;
23806: LD_ADDR_VAR 0 8
23810: PUSH
23811: LD_VAR 0 3
23815: PUSH
23816: LD_VAR 0 1
23820: ARRAY
23821: PUSH
23822: LD_INT 2
23824: ARRAY
23825: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
23826: LD_ADDR_VAR 0 5
23830: PUSH
23831: LD_VAR 0 3
23835: PUSH
23836: LD_VAR 0 1
23840: ARRAY
23841: PUSH
23842: LD_INT 1
23844: ARRAY
23845: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
23846: LD_VAR 0 8
23850: PPUSH
23851: CALL_OW 301
23855: PUSH
23856: LD_VAR 0 5
23860: PUSH
23861: LD_VAR 0 8
23865: PPUSH
23866: CALL_OW 255
23870: NONEQUAL
23871: OR
23872: IFFALSE 23901
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
23874: LD_ADDR_EXP 112
23878: PUSH
23879: LD_EXP 112
23883: PPUSH
23884: LD_VAR 0 8
23888: PPUSH
23889: LD_INT 0
23891: PPUSH
23892: CALL_OW 1
23896: ST_TO_ADDR
// exit ;
23897: POP
23898: POP
23899: GO 24432
// end ; x := list [ i ] [ 3 ] ;
23901: LD_ADDR_VAR 0 6
23905: PUSH
23906: LD_VAR 0 3
23910: PUSH
23911: LD_VAR 0 1
23915: ARRAY
23916: PUSH
23917: LD_INT 3
23919: ARRAY
23920: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
23921: LD_ADDR_VAR 0 7
23925: PUSH
23926: LD_VAR 0 3
23930: PUSH
23931: LD_VAR 0 1
23935: ARRAY
23936: PUSH
23937: LD_INT 4
23939: ARRAY
23940: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
23941: LD_ADDR_VAR 0 9
23945: PUSH
23946: LD_VAR 0 6
23950: PPUSH
23951: LD_VAR 0 7
23955: PPUSH
23956: LD_INT 16
23958: PPUSH
23959: CALL 69366 0 3
23963: ST_TO_ADDR
// if not cratesNearbyPoint then
23964: LD_VAR 0 9
23968: NOT
23969: IFFALSE 23975
// exit ;
23971: POP
23972: POP
23973: GO 24432
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
23975: LD_ADDR_VAR 0 4
23979: PUSH
23980: LD_INT 22
23982: PUSH
23983: LD_VAR 0 5
23987: PUSH
23988: EMPTY
23989: LIST
23990: LIST
23991: PUSH
23992: LD_INT 3
23994: PUSH
23995: LD_INT 60
23997: PUSH
23998: EMPTY
23999: LIST
24000: PUSH
24001: EMPTY
24002: LIST
24003: LIST
24004: PUSH
24005: LD_INT 91
24007: PUSH
24008: LD_VAR 0 8
24012: PUSH
24013: LD_INT 6
24015: PUSH
24016: EMPTY
24017: LIST
24018: LIST
24019: LIST
24020: PUSH
24021: LD_INT 2
24023: PUSH
24024: LD_INT 25
24026: PUSH
24027: LD_INT 2
24029: PUSH
24030: EMPTY
24031: LIST
24032: LIST
24033: PUSH
24034: LD_INT 25
24036: PUSH
24037: LD_INT 16
24039: PUSH
24040: EMPTY
24041: LIST
24042: LIST
24043: PUSH
24044: EMPTY
24045: LIST
24046: LIST
24047: LIST
24048: PUSH
24049: EMPTY
24050: LIST
24051: LIST
24052: LIST
24053: LIST
24054: PPUSH
24055: CALL_OW 69
24059: PUSH
24060: LD_VAR 0 8
24064: PPUSH
24065: CALL_OW 313
24069: PPUSH
24070: LD_INT 3
24072: PUSH
24073: LD_INT 60
24075: PUSH
24076: EMPTY
24077: LIST
24078: PUSH
24079: EMPTY
24080: LIST
24081: LIST
24082: PUSH
24083: LD_INT 2
24085: PUSH
24086: LD_INT 25
24088: PUSH
24089: LD_INT 2
24091: PUSH
24092: EMPTY
24093: LIST
24094: LIST
24095: PUSH
24096: LD_INT 25
24098: PUSH
24099: LD_INT 16
24101: PUSH
24102: EMPTY
24103: LIST
24104: LIST
24105: PUSH
24106: EMPTY
24107: LIST
24108: LIST
24109: LIST
24110: PUSH
24111: EMPTY
24112: LIST
24113: LIST
24114: PPUSH
24115: CALL_OW 72
24119: UNION
24120: ST_TO_ADDR
// if tmp then
24121: LD_VAR 0 4
24125: IFFALSE 24205
// begin tmp := ShrinkArray ( tmp , 3 ) ;
24127: LD_ADDR_VAR 0 4
24131: PUSH
24132: LD_VAR 0 4
24136: PPUSH
24137: LD_INT 3
24139: PPUSH
24140: CALL 67335 0 2
24144: ST_TO_ADDR
// for j in tmp do
24145: LD_ADDR_VAR 0 2
24149: PUSH
24150: LD_VAR 0 4
24154: PUSH
24155: FOR_IN
24156: IFFALSE 24199
// begin if IsInUnit ( j ) then
24158: LD_VAR 0 2
24162: PPUSH
24163: CALL_OW 310
24167: IFFALSE 24178
// ComExit ( j ) ;
24169: LD_VAR 0 2
24173: PPUSH
24174: CALL 67418 0 1
// AddComCollect ( j , x , y ) ;
24178: LD_VAR 0 2
24182: PPUSH
24183: LD_VAR 0 6
24187: PPUSH
24188: LD_VAR 0 7
24192: PPUSH
24193: CALL_OW 177
// end ;
24197: GO 24155
24199: POP
24200: POP
// exit ;
24201: POP
24202: POP
24203: GO 24432
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
24205: LD_ADDR_VAR 0 4
24209: PUSH
24210: LD_INT 22
24212: PUSH
24213: LD_VAR 0 5
24217: PUSH
24218: EMPTY
24219: LIST
24220: LIST
24221: PUSH
24222: LD_INT 91
24224: PUSH
24225: LD_VAR 0 8
24229: PUSH
24230: LD_INT 8
24232: PUSH
24233: EMPTY
24234: LIST
24235: LIST
24236: LIST
24237: PUSH
24238: LD_INT 2
24240: PUSH
24241: LD_INT 34
24243: PUSH
24244: LD_INT 12
24246: PUSH
24247: EMPTY
24248: LIST
24249: LIST
24250: PUSH
24251: LD_INT 34
24253: PUSH
24254: LD_INT 51
24256: PUSH
24257: EMPTY
24258: LIST
24259: LIST
24260: PUSH
24261: LD_INT 34
24263: PUSH
24264: LD_INT 32
24266: PUSH
24267: EMPTY
24268: LIST
24269: LIST
24270: PUSH
24271: LD_INT 34
24273: PUSH
24274: LD_INT 89
24276: PUSH
24277: EMPTY
24278: LIST
24279: LIST
24280: PUSH
24281: EMPTY
24282: LIST
24283: LIST
24284: LIST
24285: LIST
24286: LIST
24287: PUSH
24288: EMPTY
24289: LIST
24290: LIST
24291: LIST
24292: PPUSH
24293: CALL_OW 69
24297: ST_TO_ADDR
// if tmp then
24298: LD_VAR 0 4
24302: IFFALSE 24428
// begin for j in tmp do
24304: LD_ADDR_VAR 0 2
24308: PUSH
24309: LD_VAR 0 4
24313: PUSH
24314: FOR_IN
24315: IFFALSE 24426
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
24317: LD_VAR 0 2
24321: PPUSH
24322: CALL_OW 262
24326: PUSH
24327: LD_INT 3
24329: EQUAL
24330: PUSH
24331: LD_VAR 0 2
24335: PPUSH
24336: CALL_OW 261
24340: PUSH
24341: LD_INT 20
24343: GREATER
24344: OR
24345: PUSH
24346: LD_VAR 0 2
24350: PPUSH
24351: CALL_OW 314
24355: NOT
24356: AND
24357: PUSH
24358: LD_VAR 0 2
24362: PPUSH
24363: CALL_OW 263
24367: PUSH
24368: LD_INT 1
24370: NONEQUAL
24371: PUSH
24372: LD_VAR 0 2
24376: PPUSH
24377: CALL_OW 311
24381: OR
24382: AND
24383: IFFALSE 24424
// begin ComCollect ( j , x , y ) ;
24385: LD_VAR 0 2
24389: PPUSH
24390: LD_VAR 0 6
24394: PPUSH
24395: LD_VAR 0 7
24399: PPUSH
24400: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
24404: LD_VAR 0 2
24408: PPUSH
24409: LD_VAR 0 8
24413: PPUSH
24414: CALL_OW 172
// exit ;
24418: POP
24419: POP
24420: POP
24421: POP
24422: GO 24432
// end ;
24424: GO 24314
24426: POP
24427: POP
// end ; end ;
24428: GO 23803
24430: POP
24431: POP
// end ; end_of_file
24432: PPOPN 9
24434: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
24435: LD_INT 0
24437: PPUSH
24438: PPUSH
24439: PPUSH
24440: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
24441: LD_VAR 0 1
24445: PPUSH
24446: CALL_OW 264
24450: PUSH
24451: LD_INT 91
24453: EQUAL
24454: IFFALSE 24526
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
24456: LD_INT 68
24458: PPUSH
24459: LD_VAR 0 1
24463: PPUSH
24464: CALL_OW 255
24468: PPUSH
24469: CALL_OW 321
24473: PUSH
24474: LD_INT 2
24476: EQUAL
24477: IFFALSE 24489
// eff := 70 else
24479: LD_ADDR_VAR 0 4
24483: PUSH
24484: LD_INT 70
24486: ST_TO_ADDR
24487: GO 24497
// eff := 30 ;
24489: LD_ADDR_VAR 0 4
24493: PUSH
24494: LD_INT 30
24496: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
24497: LD_VAR 0 1
24501: PPUSH
24502: CALL_OW 250
24506: PPUSH
24507: LD_VAR 0 1
24511: PPUSH
24512: CALL_OW 251
24516: PPUSH
24517: LD_VAR 0 4
24521: PPUSH
24522: CALL_OW 495
// end ; end ;
24526: LD_VAR 0 2
24530: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
24531: LD_INT 0
24533: PPUSH
// end ;
24534: LD_VAR 0 4
24538: RET
// export function SOS_Command ( cmd ) ; begin
24539: LD_INT 0
24541: PPUSH
// end ;
24542: LD_VAR 0 2
24546: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
24547: LD_INT 0
24549: PPUSH
// end ;
24550: LD_VAR 0 6
24554: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
24555: LD_INT 0
24557: PPUSH
24558: PPUSH
// if not vehicle or not factory then
24559: LD_VAR 0 1
24563: NOT
24564: PUSH
24565: LD_VAR 0 2
24569: NOT
24570: OR
24571: IFFALSE 24575
// exit ;
24573: GO 24806
// if factoryWaypoints >= factory then
24575: LD_EXP 111
24579: PUSH
24580: LD_VAR 0 2
24584: GREATEREQUAL
24585: IFFALSE 24806
// if factoryWaypoints [ factory ] then
24587: LD_EXP 111
24591: PUSH
24592: LD_VAR 0 2
24596: ARRAY
24597: IFFALSE 24806
// begin if GetControl ( vehicle ) = control_manual then
24599: LD_VAR 0 1
24603: PPUSH
24604: CALL_OW 263
24608: PUSH
24609: LD_INT 1
24611: EQUAL
24612: IFFALSE 24693
// begin driver := IsDrivenBy ( vehicle ) ;
24614: LD_ADDR_VAR 0 4
24618: PUSH
24619: LD_VAR 0 1
24623: PPUSH
24624: CALL_OW 311
24628: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
24629: LD_VAR 0 4
24633: PPUSH
24634: LD_EXP 111
24638: PUSH
24639: LD_VAR 0 2
24643: ARRAY
24644: PUSH
24645: LD_INT 3
24647: ARRAY
24648: PPUSH
24649: LD_EXP 111
24653: PUSH
24654: LD_VAR 0 2
24658: ARRAY
24659: PUSH
24660: LD_INT 4
24662: ARRAY
24663: PPUSH
24664: CALL_OW 171
// AddComExitVehicle ( driver ) ;
24668: LD_VAR 0 4
24672: PPUSH
24673: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
24677: LD_VAR 0 4
24681: PPUSH
24682: LD_VAR 0 2
24686: PPUSH
24687: CALL_OW 180
// end else
24691: GO 24806
// if GetControl ( vehicle ) = control_remote then
24693: LD_VAR 0 1
24697: PPUSH
24698: CALL_OW 263
24702: PUSH
24703: LD_INT 2
24705: EQUAL
24706: IFFALSE 24767
// begin wait ( 0 0$2 ) ;
24708: LD_INT 70
24710: PPUSH
24711: CALL_OW 67
// if Connect ( vehicle ) then
24715: LD_VAR 0 1
24719: PPUSH
24720: CALL 37637 0 1
24724: IFFALSE 24765
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
24726: LD_VAR 0 1
24730: PPUSH
24731: LD_EXP 111
24735: PUSH
24736: LD_VAR 0 2
24740: ARRAY
24741: PUSH
24742: LD_INT 3
24744: ARRAY
24745: PPUSH
24746: LD_EXP 111
24750: PUSH
24751: LD_VAR 0 2
24755: ARRAY
24756: PUSH
24757: LD_INT 4
24759: ARRAY
24760: PPUSH
24761: CALL_OW 171
// end else
24765: GO 24806
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
24767: LD_VAR 0 1
24771: PPUSH
24772: LD_EXP 111
24776: PUSH
24777: LD_VAR 0 2
24781: ARRAY
24782: PUSH
24783: LD_INT 3
24785: ARRAY
24786: PPUSH
24787: LD_EXP 111
24791: PUSH
24792: LD_VAR 0 2
24796: ARRAY
24797: PUSH
24798: LD_INT 4
24800: ARRAY
24801: PPUSH
24802: CALL_OW 171
// end ; end ;
24806: LD_VAR 0 3
24810: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
24811: LD_INT 0
24813: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
24814: LD_VAR 0 1
24818: PUSH
24819: LD_INT 250
24821: EQUAL
24822: PUSH
24823: LD_VAR 0 2
24827: PPUSH
24828: CALL_OW 264
24832: PUSH
24833: LD_INT 81
24835: EQUAL
24836: AND
24837: IFFALSE 24858
// MinerPlaceMine ( unit , x , y ) ;
24839: LD_VAR 0 2
24843: PPUSH
24844: LD_VAR 0 4
24848: PPUSH
24849: LD_VAR 0 5
24853: PPUSH
24854: CALL 27848 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
24858: LD_VAR 0 1
24862: PUSH
24863: LD_INT 251
24865: EQUAL
24866: PUSH
24867: LD_VAR 0 2
24871: PPUSH
24872: CALL_OW 264
24876: PUSH
24877: LD_INT 81
24879: EQUAL
24880: AND
24881: IFFALSE 24902
// MinerDetonateMine ( unit , x , y ) ;
24883: LD_VAR 0 2
24887: PPUSH
24888: LD_VAR 0 4
24892: PPUSH
24893: LD_VAR 0 5
24897: PPUSH
24898: CALL 28123 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
24902: LD_VAR 0 1
24906: PUSH
24907: LD_INT 252
24909: EQUAL
24910: PUSH
24911: LD_VAR 0 2
24915: PPUSH
24916: CALL_OW 264
24920: PUSH
24921: LD_INT 81
24923: EQUAL
24924: AND
24925: IFFALSE 24946
// MinerCreateMinefield ( unit , x , y ) ;
24927: LD_VAR 0 2
24931: PPUSH
24932: LD_VAR 0 4
24936: PPUSH
24937: LD_VAR 0 5
24941: PPUSH
24942: CALL 28540 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
24946: LD_VAR 0 1
24950: PUSH
24951: LD_INT 253
24953: EQUAL
24954: PUSH
24955: LD_VAR 0 2
24959: PPUSH
24960: CALL_OW 257
24964: PUSH
24965: LD_INT 5
24967: EQUAL
24968: AND
24969: IFFALSE 24990
// ComBinocular ( unit , x , y ) ;
24971: LD_VAR 0 2
24975: PPUSH
24976: LD_VAR 0 4
24980: PPUSH
24981: LD_VAR 0 5
24985: PPUSH
24986: CALL 28909 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
24990: LD_VAR 0 1
24994: PUSH
24995: LD_INT 254
24997: EQUAL
24998: PUSH
24999: LD_VAR 0 2
25003: PPUSH
25004: CALL_OW 264
25008: PUSH
25009: LD_INT 99
25011: EQUAL
25012: AND
25013: PUSH
25014: LD_VAR 0 3
25018: PPUSH
25019: CALL_OW 263
25023: PUSH
25024: LD_INT 3
25026: EQUAL
25027: AND
25028: IFFALSE 25044
// HackDestroyVehicle ( unit , selectedUnit ) ;
25030: LD_VAR 0 2
25034: PPUSH
25035: LD_VAR 0 3
25039: PPUSH
25040: CALL 27212 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
25044: LD_VAR 0 1
25048: PUSH
25049: LD_INT 255
25051: EQUAL
25052: PUSH
25053: LD_VAR 0 2
25057: PPUSH
25058: CALL_OW 264
25062: PUSH
25063: LD_INT 14
25065: PUSH
25066: LD_INT 53
25068: PUSH
25069: EMPTY
25070: LIST
25071: LIST
25072: IN
25073: AND
25074: PUSH
25075: LD_VAR 0 4
25079: PPUSH
25080: LD_VAR 0 5
25084: PPUSH
25085: CALL_OW 488
25089: AND
25090: IFFALSE 25114
// CutTreeXYR ( unit , x , y , 12 ) ;
25092: LD_VAR 0 2
25096: PPUSH
25097: LD_VAR 0 4
25101: PPUSH
25102: LD_VAR 0 5
25106: PPUSH
25107: LD_INT 12
25109: PPUSH
25110: CALL 25209 0 4
// if cmd = 256 then
25114: LD_VAR 0 1
25118: PUSH
25119: LD_INT 256
25121: EQUAL
25122: IFFALSE 25143
// SetFactoryWaypoint ( unit , x , y ) ;
25124: LD_VAR 0 2
25128: PPUSH
25129: LD_VAR 0 4
25133: PPUSH
25134: LD_VAR 0 5
25138: PPUSH
25139: CALL 23124 0 3
// if cmd = 257 then
25143: LD_VAR 0 1
25147: PUSH
25148: LD_INT 257
25150: EQUAL
25151: IFFALSE 25172
// SetWarehouseGatheringPoint ( unit , x , y ) ;
25153: LD_VAR 0 2
25157: PPUSH
25158: LD_VAR 0 4
25162: PPUSH
25163: LD_VAR 0 5
25167: PPUSH
25168: CALL 23486 0 3
// if cmd = 258 then
25172: LD_VAR 0 1
25176: PUSH
25177: LD_INT 258
25179: EQUAL
25180: IFFALSE 25204
// BurnTreeXYR ( unit , x , y , 8 ) ;
25182: LD_VAR 0 2
25186: PPUSH
25187: LD_VAR 0 4
25191: PPUSH
25192: LD_VAR 0 5
25196: PPUSH
25197: LD_INT 8
25199: PPUSH
25200: CALL 25603 0 4
// end ;
25204: LD_VAR 0 6
25208: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
25209: LD_INT 0
25211: PPUSH
25212: PPUSH
25213: PPUSH
25214: PPUSH
25215: PPUSH
25216: PPUSH
25217: PPUSH
25218: PPUSH
25219: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
25220: LD_VAR 0 1
25224: PPUSH
25225: CALL_OW 302
25229: NOT
25230: PUSH
25231: LD_VAR 0 2
25235: PPUSH
25236: LD_VAR 0 3
25240: PPUSH
25241: CALL_OW 488
25245: NOT
25246: OR
25247: PUSH
25248: LD_VAR 0 4
25252: NOT
25253: OR
25254: IFFALSE 25258
// exit ;
25256: GO 25598
// list := [ ] ;
25258: LD_ADDR_VAR 0 13
25262: PUSH
25263: EMPTY
25264: ST_TO_ADDR
// if x - r < 0 then
25265: LD_VAR 0 2
25269: PUSH
25270: LD_VAR 0 4
25274: MINUS
25275: PUSH
25276: LD_INT 0
25278: LESS
25279: IFFALSE 25291
// min_x := 0 else
25281: LD_ADDR_VAR 0 7
25285: PUSH
25286: LD_INT 0
25288: ST_TO_ADDR
25289: GO 25307
// min_x := x - r ;
25291: LD_ADDR_VAR 0 7
25295: PUSH
25296: LD_VAR 0 2
25300: PUSH
25301: LD_VAR 0 4
25305: MINUS
25306: ST_TO_ADDR
// if y - r < 0 then
25307: LD_VAR 0 3
25311: PUSH
25312: LD_VAR 0 4
25316: MINUS
25317: PUSH
25318: LD_INT 0
25320: LESS
25321: IFFALSE 25333
// min_y := 0 else
25323: LD_ADDR_VAR 0 8
25327: PUSH
25328: LD_INT 0
25330: ST_TO_ADDR
25331: GO 25349
// min_y := y - r ;
25333: LD_ADDR_VAR 0 8
25337: PUSH
25338: LD_VAR 0 3
25342: PUSH
25343: LD_VAR 0 4
25347: MINUS
25348: ST_TO_ADDR
// max_x := x + r ;
25349: LD_ADDR_VAR 0 9
25353: PUSH
25354: LD_VAR 0 2
25358: PUSH
25359: LD_VAR 0 4
25363: PLUS
25364: ST_TO_ADDR
// max_y := y + r ;
25365: LD_ADDR_VAR 0 10
25369: PUSH
25370: LD_VAR 0 3
25374: PUSH
25375: LD_VAR 0 4
25379: PLUS
25380: ST_TO_ADDR
// for _x = min_x to max_x do
25381: LD_ADDR_VAR 0 11
25385: PUSH
25386: DOUBLE
25387: LD_VAR 0 7
25391: DEC
25392: ST_TO_ADDR
25393: LD_VAR 0 9
25397: PUSH
25398: FOR_TO
25399: IFFALSE 25516
// for _y = min_y to max_y do
25401: LD_ADDR_VAR 0 12
25405: PUSH
25406: DOUBLE
25407: LD_VAR 0 8
25411: DEC
25412: ST_TO_ADDR
25413: LD_VAR 0 10
25417: PUSH
25418: FOR_TO
25419: IFFALSE 25512
// begin if not ValidHex ( _x , _y ) then
25421: LD_VAR 0 11
25425: PPUSH
25426: LD_VAR 0 12
25430: PPUSH
25431: CALL_OW 488
25435: NOT
25436: IFFALSE 25440
// continue ;
25438: GO 25418
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
25440: LD_VAR 0 11
25444: PPUSH
25445: LD_VAR 0 12
25449: PPUSH
25450: CALL_OW 351
25454: PUSH
25455: LD_VAR 0 11
25459: PPUSH
25460: LD_VAR 0 12
25464: PPUSH
25465: CALL_OW 554
25469: AND
25470: IFFALSE 25510
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
25472: LD_ADDR_VAR 0 13
25476: PUSH
25477: LD_VAR 0 13
25481: PPUSH
25482: LD_VAR 0 13
25486: PUSH
25487: LD_INT 1
25489: PLUS
25490: PPUSH
25491: LD_VAR 0 11
25495: PUSH
25496: LD_VAR 0 12
25500: PUSH
25501: EMPTY
25502: LIST
25503: LIST
25504: PPUSH
25505: CALL_OW 2
25509: ST_TO_ADDR
// end ;
25510: GO 25418
25512: POP
25513: POP
25514: GO 25398
25516: POP
25517: POP
// if not list then
25518: LD_VAR 0 13
25522: NOT
25523: IFFALSE 25527
// exit ;
25525: GO 25598
// for i in list do
25527: LD_ADDR_VAR 0 6
25531: PUSH
25532: LD_VAR 0 13
25536: PUSH
25537: FOR_IN
25538: IFFALSE 25596
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
25540: LD_VAR 0 1
25544: PPUSH
25545: LD_STRING M
25547: PUSH
25548: LD_VAR 0 6
25552: PUSH
25553: LD_INT 1
25555: ARRAY
25556: PUSH
25557: LD_VAR 0 6
25561: PUSH
25562: LD_INT 2
25564: ARRAY
25565: PUSH
25566: LD_INT 0
25568: PUSH
25569: LD_INT 0
25571: PUSH
25572: LD_INT 0
25574: PUSH
25575: LD_INT 0
25577: PUSH
25578: EMPTY
25579: LIST
25580: LIST
25581: LIST
25582: LIST
25583: LIST
25584: LIST
25585: LIST
25586: PUSH
25587: EMPTY
25588: LIST
25589: PPUSH
25590: CALL_OW 447
25594: GO 25537
25596: POP
25597: POP
// end ;
25598: LD_VAR 0 5
25602: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
25603: LD_INT 0
25605: PPUSH
25606: PPUSH
25607: PPUSH
25608: PPUSH
25609: PPUSH
25610: PPUSH
25611: PPUSH
25612: PPUSH
25613: PPUSH
25614: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
25615: LD_VAR 0 1
25619: PPUSH
25620: CALL_OW 302
25624: NOT
25625: PUSH
25626: LD_VAR 0 2
25630: PPUSH
25631: LD_VAR 0 3
25635: PPUSH
25636: CALL_OW 488
25640: NOT
25641: OR
25642: PUSH
25643: LD_VAR 0 4
25647: NOT
25648: OR
25649: IFFALSE 25653
// exit ;
25651: GO 26166
// list := [ ] ;
25653: LD_ADDR_VAR 0 13
25657: PUSH
25658: EMPTY
25659: ST_TO_ADDR
// if x - r < 0 then
25660: LD_VAR 0 2
25664: PUSH
25665: LD_VAR 0 4
25669: MINUS
25670: PUSH
25671: LD_INT 0
25673: LESS
25674: IFFALSE 25686
// min_x := 0 else
25676: LD_ADDR_VAR 0 7
25680: PUSH
25681: LD_INT 0
25683: ST_TO_ADDR
25684: GO 25702
// min_x := x - r ;
25686: LD_ADDR_VAR 0 7
25690: PUSH
25691: LD_VAR 0 2
25695: PUSH
25696: LD_VAR 0 4
25700: MINUS
25701: ST_TO_ADDR
// if y - r < 0 then
25702: LD_VAR 0 3
25706: PUSH
25707: LD_VAR 0 4
25711: MINUS
25712: PUSH
25713: LD_INT 0
25715: LESS
25716: IFFALSE 25728
// min_y := 0 else
25718: LD_ADDR_VAR 0 8
25722: PUSH
25723: LD_INT 0
25725: ST_TO_ADDR
25726: GO 25744
// min_y := y - r ;
25728: LD_ADDR_VAR 0 8
25732: PUSH
25733: LD_VAR 0 3
25737: PUSH
25738: LD_VAR 0 4
25742: MINUS
25743: ST_TO_ADDR
// max_x := x + r ;
25744: LD_ADDR_VAR 0 9
25748: PUSH
25749: LD_VAR 0 2
25753: PUSH
25754: LD_VAR 0 4
25758: PLUS
25759: ST_TO_ADDR
// max_y := y + r ;
25760: LD_ADDR_VAR 0 10
25764: PUSH
25765: LD_VAR 0 3
25769: PUSH
25770: LD_VAR 0 4
25774: PLUS
25775: ST_TO_ADDR
// for _x = min_x to max_x do
25776: LD_ADDR_VAR 0 11
25780: PUSH
25781: DOUBLE
25782: LD_VAR 0 7
25786: DEC
25787: ST_TO_ADDR
25788: LD_VAR 0 9
25792: PUSH
25793: FOR_TO
25794: IFFALSE 25911
// for _y = min_y to max_y do
25796: LD_ADDR_VAR 0 12
25800: PUSH
25801: DOUBLE
25802: LD_VAR 0 8
25806: DEC
25807: ST_TO_ADDR
25808: LD_VAR 0 10
25812: PUSH
25813: FOR_TO
25814: IFFALSE 25907
// begin if not ValidHex ( _x , _y ) then
25816: LD_VAR 0 11
25820: PPUSH
25821: LD_VAR 0 12
25825: PPUSH
25826: CALL_OW 488
25830: NOT
25831: IFFALSE 25835
// continue ;
25833: GO 25813
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
25835: LD_VAR 0 11
25839: PPUSH
25840: LD_VAR 0 12
25844: PPUSH
25845: CALL_OW 351
25849: PUSH
25850: LD_VAR 0 11
25854: PPUSH
25855: LD_VAR 0 12
25859: PPUSH
25860: CALL_OW 554
25864: AND
25865: IFFALSE 25905
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
25867: LD_ADDR_VAR 0 13
25871: PUSH
25872: LD_VAR 0 13
25876: PPUSH
25877: LD_VAR 0 13
25881: PUSH
25882: LD_INT 1
25884: PLUS
25885: PPUSH
25886: LD_VAR 0 11
25890: PUSH
25891: LD_VAR 0 12
25895: PUSH
25896: EMPTY
25897: LIST
25898: LIST
25899: PPUSH
25900: CALL_OW 2
25904: ST_TO_ADDR
// end ;
25905: GO 25813
25907: POP
25908: POP
25909: GO 25793
25911: POP
25912: POP
// if not list then
25913: LD_VAR 0 13
25917: NOT
25918: IFFALSE 25922
// exit ;
25920: GO 26166
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
25922: LD_ADDR_VAR 0 13
25926: PUSH
25927: LD_VAR 0 1
25931: PPUSH
25932: LD_VAR 0 13
25936: PPUSH
25937: LD_INT 1
25939: PPUSH
25940: LD_INT 1
25942: PPUSH
25943: CALL 34779 0 4
25947: ST_TO_ADDR
// ComStop ( flame ) ;
25948: LD_VAR 0 1
25952: PPUSH
25953: CALL_OW 141
// for i in list do
25957: LD_ADDR_VAR 0 6
25961: PUSH
25962: LD_VAR 0 13
25966: PUSH
25967: FOR_IN
25968: IFFALSE 25999
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
25970: LD_VAR 0 1
25974: PPUSH
25975: LD_VAR 0 6
25979: PUSH
25980: LD_INT 1
25982: ARRAY
25983: PPUSH
25984: LD_VAR 0 6
25988: PUSH
25989: LD_INT 2
25991: ARRAY
25992: PPUSH
25993: CALL_OW 176
25997: GO 25967
25999: POP
26000: POP
// repeat wait ( 0 0$1 ) ;
26001: LD_INT 35
26003: PPUSH
26004: CALL_OW 67
// task := GetTaskList ( flame ) ;
26008: LD_ADDR_VAR 0 14
26012: PUSH
26013: LD_VAR 0 1
26017: PPUSH
26018: CALL_OW 437
26022: ST_TO_ADDR
// if not task then
26023: LD_VAR 0 14
26027: NOT
26028: IFFALSE 26032
// exit ;
26030: GO 26166
// if task [ 1 ] [ 1 ] <> | then
26032: LD_VAR 0 14
26036: PUSH
26037: LD_INT 1
26039: ARRAY
26040: PUSH
26041: LD_INT 1
26043: ARRAY
26044: PUSH
26045: LD_STRING |
26047: NONEQUAL
26048: IFFALSE 26052
// exit ;
26050: GO 26166
// _x := task [ 1 ] [ 2 ] ;
26052: LD_ADDR_VAR 0 11
26056: PUSH
26057: LD_VAR 0 14
26061: PUSH
26062: LD_INT 1
26064: ARRAY
26065: PUSH
26066: LD_INT 2
26068: ARRAY
26069: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
26070: LD_ADDR_VAR 0 12
26074: PUSH
26075: LD_VAR 0 14
26079: PUSH
26080: LD_INT 1
26082: ARRAY
26083: PUSH
26084: LD_INT 3
26086: ARRAY
26087: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
26088: LD_VAR 0 11
26092: PPUSH
26093: LD_VAR 0 12
26097: PPUSH
26098: CALL_OW 351
26102: NOT
26103: PUSH
26104: LD_VAR 0 11
26108: PPUSH
26109: LD_VAR 0 12
26113: PPUSH
26114: CALL_OW 554
26118: NOT
26119: OR
26120: IFFALSE 26154
// begin task := Delete ( task , 1 ) ;
26122: LD_ADDR_VAR 0 14
26126: PUSH
26127: LD_VAR 0 14
26131: PPUSH
26132: LD_INT 1
26134: PPUSH
26135: CALL_OW 3
26139: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
26140: LD_VAR 0 1
26144: PPUSH
26145: LD_VAR 0 14
26149: PPUSH
26150: CALL_OW 446
// end ; until not HasTask ( flame ) ;
26154: LD_VAR 0 1
26158: PPUSH
26159: CALL_OW 314
26163: NOT
26164: IFFALSE 26001
// end ;
26166: LD_VAR 0 5
26170: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
26171: LD_EXP 114
26175: NOT
26176: IFFALSE 26226
26178: GO 26180
26180: DISABLE
// begin initHack := true ;
26181: LD_ADDR_EXP 114
26185: PUSH
26186: LD_INT 1
26188: ST_TO_ADDR
// hackTanks := [ ] ;
26189: LD_ADDR_EXP 115
26193: PUSH
26194: EMPTY
26195: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
26196: LD_ADDR_EXP 116
26200: PUSH
26201: EMPTY
26202: ST_TO_ADDR
// hackLimit := 3 ;
26203: LD_ADDR_EXP 117
26207: PUSH
26208: LD_INT 3
26210: ST_TO_ADDR
// hackDist := 12 ;
26211: LD_ADDR_EXP 118
26215: PUSH
26216: LD_INT 12
26218: ST_TO_ADDR
// hackCounter := [ ] ;
26219: LD_ADDR_EXP 119
26223: PUSH
26224: EMPTY
26225: ST_TO_ADDR
// end ;
26226: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
26227: LD_EXP 114
26231: PUSH
26232: LD_INT 34
26234: PUSH
26235: LD_INT 99
26237: PUSH
26238: EMPTY
26239: LIST
26240: LIST
26241: PPUSH
26242: CALL_OW 69
26246: AND
26247: IFFALSE 26500
26249: GO 26251
26251: DISABLE
26252: LD_INT 0
26254: PPUSH
26255: PPUSH
// begin enable ;
26256: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
26257: LD_ADDR_VAR 0 1
26261: PUSH
26262: LD_INT 34
26264: PUSH
26265: LD_INT 99
26267: PUSH
26268: EMPTY
26269: LIST
26270: LIST
26271: PPUSH
26272: CALL_OW 69
26276: PUSH
26277: FOR_IN
26278: IFFALSE 26498
// begin if not i in hackTanks then
26280: LD_VAR 0 1
26284: PUSH
26285: LD_EXP 115
26289: IN
26290: NOT
26291: IFFALSE 26374
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
26293: LD_ADDR_EXP 115
26297: PUSH
26298: LD_EXP 115
26302: PPUSH
26303: LD_EXP 115
26307: PUSH
26308: LD_INT 1
26310: PLUS
26311: PPUSH
26312: LD_VAR 0 1
26316: PPUSH
26317: CALL_OW 1
26321: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
26322: LD_ADDR_EXP 116
26326: PUSH
26327: LD_EXP 116
26331: PPUSH
26332: LD_EXP 116
26336: PUSH
26337: LD_INT 1
26339: PLUS
26340: PPUSH
26341: EMPTY
26342: PPUSH
26343: CALL_OW 1
26347: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
26348: LD_ADDR_EXP 119
26352: PUSH
26353: LD_EXP 119
26357: PPUSH
26358: LD_EXP 119
26362: PUSH
26363: LD_INT 1
26365: PLUS
26366: PPUSH
26367: EMPTY
26368: PPUSH
26369: CALL_OW 1
26373: ST_TO_ADDR
// end ; if not IsOk ( i ) then
26374: LD_VAR 0 1
26378: PPUSH
26379: CALL_OW 302
26383: NOT
26384: IFFALSE 26397
// begin HackUnlinkAll ( i ) ;
26386: LD_VAR 0 1
26390: PPUSH
26391: CALL 26503 0 1
// continue ;
26395: GO 26277
// end ; HackCheckCapturedStatus ( i ) ;
26397: LD_VAR 0 1
26401: PPUSH
26402: CALL 26946 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
26406: LD_ADDR_VAR 0 2
26410: PUSH
26411: LD_INT 81
26413: PUSH
26414: LD_VAR 0 1
26418: PPUSH
26419: CALL_OW 255
26423: PUSH
26424: EMPTY
26425: LIST
26426: LIST
26427: PUSH
26428: LD_INT 33
26430: PUSH
26431: LD_INT 3
26433: PUSH
26434: EMPTY
26435: LIST
26436: LIST
26437: PUSH
26438: LD_INT 91
26440: PUSH
26441: LD_VAR 0 1
26445: PUSH
26446: LD_EXP 118
26450: PUSH
26451: EMPTY
26452: LIST
26453: LIST
26454: LIST
26455: PUSH
26456: LD_INT 50
26458: PUSH
26459: EMPTY
26460: LIST
26461: PUSH
26462: EMPTY
26463: LIST
26464: LIST
26465: LIST
26466: LIST
26467: PPUSH
26468: CALL_OW 69
26472: ST_TO_ADDR
// if not tmp then
26473: LD_VAR 0 2
26477: NOT
26478: IFFALSE 26482
// continue ;
26480: GO 26277
// HackLink ( i , tmp ) ;
26482: LD_VAR 0 1
26486: PPUSH
26487: LD_VAR 0 2
26491: PPUSH
26492: CALL 26639 0 2
// end ;
26496: GO 26277
26498: POP
26499: POP
// end ;
26500: PPOPN 2
26502: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
26503: LD_INT 0
26505: PPUSH
26506: PPUSH
26507: PPUSH
// if not hack in hackTanks then
26508: LD_VAR 0 1
26512: PUSH
26513: LD_EXP 115
26517: IN
26518: NOT
26519: IFFALSE 26523
// exit ;
26521: GO 26634
// index := GetElementIndex ( hackTanks , hack ) ;
26523: LD_ADDR_VAR 0 4
26527: PUSH
26528: LD_EXP 115
26532: PPUSH
26533: LD_VAR 0 1
26537: PPUSH
26538: CALL 34076 0 2
26542: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
26543: LD_EXP 116
26547: PUSH
26548: LD_VAR 0 4
26552: ARRAY
26553: IFFALSE 26634
// begin for i in hackTanksCaptured [ index ] do
26555: LD_ADDR_VAR 0 3
26559: PUSH
26560: LD_EXP 116
26564: PUSH
26565: LD_VAR 0 4
26569: ARRAY
26570: PUSH
26571: FOR_IN
26572: IFFALSE 26598
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
26574: LD_VAR 0 3
26578: PUSH
26579: LD_INT 1
26581: ARRAY
26582: PPUSH
26583: LD_VAR 0 3
26587: PUSH
26588: LD_INT 2
26590: ARRAY
26591: PPUSH
26592: CALL_OW 235
26596: GO 26571
26598: POP
26599: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
26600: LD_ADDR_EXP 116
26604: PUSH
26605: LD_EXP 116
26609: PPUSH
26610: LD_VAR 0 4
26614: PPUSH
26615: EMPTY
26616: PPUSH
26617: CALL_OW 1
26621: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
26622: LD_VAR 0 1
26626: PPUSH
26627: LD_INT 0
26629: PPUSH
26630: CALL_OW 505
// end ; end ;
26634: LD_VAR 0 2
26638: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
26639: LD_INT 0
26641: PPUSH
26642: PPUSH
26643: PPUSH
// if not hack in hackTanks or not vehicles then
26644: LD_VAR 0 1
26648: PUSH
26649: LD_EXP 115
26653: IN
26654: NOT
26655: PUSH
26656: LD_VAR 0 2
26660: NOT
26661: OR
26662: IFFALSE 26666
// exit ;
26664: GO 26941
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
26666: LD_ADDR_VAR 0 2
26670: PUSH
26671: LD_VAR 0 1
26675: PPUSH
26676: LD_VAR 0 2
26680: PPUSH
26681: LD_INT 1
26683: PPUSH
26684: LD_INT 1
26686: PPUSH
26687: CALL 34726 0 4
26691: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
26692: LD_ADDR_VAR 0 5
26696: PUSH
26697: LD_EXP 115
26701: PPUSH
26702: LD_VAR 0 1
26706: PPUSH
26707: CALL 34076 0 2
26711: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
26712: LD_EXP 116
26716: PUSH
26717: LD_VAR 0 5
26721: ARRAY
26722: PUSH
26723: LD_EXP 117
26727: LESS
26728: IFFALSE 26917
// begin for i := 1 to vehicles do
26730: LD_ADDR_VAR 0 4
26734: PUSH
26735: DOUBLE
26736: LD_INT 1
26738: DEC
26739: ST_TO_ADDR
26740: LD_VAR 0 2
26744: PUSH
26745: FOR_TO
26746: IFFALSE 26915
// begin if hackTanksCaptured [ index ] = hackLimit then
26748: LD_EXP 116
26752: PUSH
26753: LD_VAR 0 5
26757: ARRAY
26758: PUSH
26759: LD_EXP 117
26763: EQUAL
26764: IFFALSE 26768
// break ;
26766: GO 26915
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
26768: LD_ADDR_EXP 119
26772: PUSH
26773: LD_EXP 119
26777: PPUSH
26778: LD_VAR 0 5
26782: PPUSH
26783: LD_EXP 119
26787: PUSH
26788: LD_VAR 0 5
26792: ARRAY
26793: PUSH
26794: LD_INT 1
26796: PLUS
26797: PPUSH
26798: CALL_OW 1
26802: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
26803: LD_ADDR_EXP 116
26807: PUSH
26808: LD_EXP 116
26812: PPUSH
26813: LD_VAR 0 5
26817: PUSH
26818: LD_EXP 116
26822: PUSH
26823: LD_VAR 0 5
26827: ARRAY
26828: PUSH
26829: LD_INT 1
26831: PLUS
26832: PUSH
26833: EMPTY
26834: LIST
26835: LIST
26836: PPUSH
26837: LD_VAR 0 2
26841: PUSH
26842: LD_VAR 0 4
26846: ARRAY
26847: PUSH
26848: LD_VAR 0 2
26852: PUSH
26853: LD_VAR 0 4
26857: ARRAY
26858: PPUSH
26859: CALL_OW 255
26863: PUSH
26864: EMPTY
26865: LIST
26866: LIST
26867: PPUSH
26868: CALL 34291 0 3
26872: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
26873: LD_VAR 0 2
26877: PUSH
26878: LD_VAR 0 4
26882: ARRAY
26883: PPUSH
26884: LD_VAR 0 1
26888: PPUSH
26889: CALL_OW 255
26893: PPUSH
26894: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
26898: LD_VAR 0 2
26902: PUSH
26903: LD_VAR 0 4
26907: ARRAY
26908: PPUSH
26909: CALL_OW 141
// end ;
26913: GO 26745
26915: POP
26916: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
26917: LD_VAR 0 1
26921: PPUSH
26922: LD_EXP 116
26926: PUSH
26927: LD_VAR 0 5
26931: ARRAY
26932: PUSH
26933: LD_INT 0
26935: PLUS
26936: PPUSH
26937: CALL_OW 505
// end ;
26941: LD_VAR 0 3
26945: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
26946: LD_INT 0
26948: PPUSH
26949: PPUSH
26950: PPUSH
26951: PPUSH
// if not hack in hackTanks then
26952: LD_VAR 0 1
26956: PUSH
26957: LD_EXP 115
26961: IN
26962: NOT
26963: IFFALSE 26967
// exit ;
26965: GO 27207
// index := GetElementIndex ( hackTanks , hack ) ;
26967: LD_ADDR_VAR 0 4
26971: PUSH
26972: LD_EXP 115
26976: PPUSH
26977: LD_VAR 0 1
26981: PPUSH
26982: CALL 34076 0 2
26986: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
26987: LD_ADDR_VAR 0 3
26991: PUSH
26992: DOUBLE
26993: LD_EXP 116
26997: PUSH
26998: LD_VAR 0 4
27002: ARRAY
27003: INC
27004: ST_TO_ADDR
27005: LD_INT 1
27007: PUSH
27008: FOR_DOWNTO
27009: IFFALSE 27181
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
27011: LD_ADDR_VAR 0 5
27015: PUSH
27016: LD_EXP 116
27020: PUSH
27021: LD_VAR 0 4
27025: ARRAY
27026: PUSH
27027: LD_VAR 0 3
27031: ARRAY
27032: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
27033: LD_VAR 0 5
27037: PUSH
27038: LD_INT 1
27040: ARRAY
27041: PPUSH
27042: CALL_OW 302
27046: NOT
27047: PUSH
27048: LD_VAR 0 5
27052: PUSH
27053: LD_INT 1
27055: ARRAY
27056: PPUSH
27057: CALL_OW 255
27061: PUSH
27062: LD_VAR 0 1
27066: PPUSH
27067: CALL_OW 255
27071: NONEQUAL
27072: OR
27073: IFFALSE 27179
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
27075: LD_VAR 0 5
27079: PUSH
27080: LD_INT 1
27082: ARRAY
27083: PPUSH
27084: CALL_OW 305
27088: PUSH
27089: LD_VAR 0 5
27093: PUSH
27094: LD_INT 1
27096: ARRAY
27097: PPUSH
27098: CALL_OW 255
27102: PUSH
27103: LD_VAR 0 1
27107: PPUSH
27108: CALL_OW 255
27112: EQUAL
27113: AND
27114: IFFALSE 27138
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
27116: LD_VAR 0 5
27120: PUSH
27121: LD_INT 1
27123: ARRAY
27124: PPUSH
27125: LD_VAR 0 5
27129: PUSH
27130: LD_INT 2
27132: ARRAY
27133: PPUSH
27134: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
27138: LD_ADDR_EXP 116
27142: PUSH
27143: LD_EXP 116
27147: PPUSH
27148: LD_VAR 0 4
27152: PPUSH
27153: LD_EXP 116
27157: PUSH
27158: LD_VAR 0 4
27162: ARRAY
27163: PPUSH
27164: LD_VAR 0 3
27168: PPUSH
27169: CALL_OW 3
27173: PPUSH
27174: CALL_OW 1
27178: ST_TO_ADDR
// end ; end ;
27179: GO 27008
27181: POP
27182: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
27183: LD_VAR 0 1
27187: PPUSH
27188: LD_EXP 116
27192: PUSH
27193: LD_VAR 0 4
27197: ARRAY
27198: PUSH
27199: LD_INT 0
27201: PLUS
27202: PPUSH
27203: CALL_OW 505
// end ;
27207: LD_VAR 0 2
27211: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
27212: LD_INT 0
27214: PPUSH
27215: PPUSH
27216: PPUSH
27217: PPUSH
// if not hack in hackTanks then
27218: LD_VAR 0 1
27222: PUSH
27223: LD_EXP 115
27227: IN
27228: NOT
27229: IFFALSE 27233
// exit ;
27231: GO 27318
// index := GetElementIndex ( hackTanks , hack ) ;
27233: LD_ADDR_VAR 0 5
27237: PUSH
27238: LD_EXP 115
27242: PPUSH
27243: LD_VAR 0 1
27247: PPUSH
27248: CALL 34076 0 2
27252: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
27253: LD_ADDR_VAR 0 4
27257: PUSH
27258: DOUBLE
27259: LD_INT 1
27261: DEC
27262: ST_TO_ADDR
27263: LD_EXP 116
27267: PUSH
27268: LD_VAR 0 5
27272: ARRAY
27273: PUSH
27274: FOR_TO
27275: IFFALSE 27316
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
27277: LD_EXP 116
27281: PUSH
27282: LD_VAR 0 5
27286: ARRAY
27287: PUSH
27288: LD_VAR 0 4
27292: ARRAY
27293: PUSH
27294: LD_INT 1
27296: ARRAY
27297: PUSH
27298: LD_VAR 0 2
27302: EQUAL
27303: IFFALSE 27314
// KillUnit ( vehicle ) ;
27305: LD_VAR 0 2
27309: PPUSH
27310: CALL_OW 66
27314: GO 27274
27316: POP
27317: POP
// end ;
27318: LD_VAR 0 3
27322: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
27323: LD_EXP 120
27327: NOT
27328: IFFALSE 27363
27330: GO 27332
27332: DISABLE
// begin initMiner := true ;
27333: LD_ADDR_EXP 120
27337: PUSH
27338: LD_INT 1
27340: ST_TO_ADDR
// minersList := [ ] ;
27341: LD_ADDR_EXP 121
27345: PUSH
27346: EMPTY
27347: ST_TO_ADDR
// minerMinesList := [ ] ;
27348: LD_ADDR_EXP 122
27352: PUSH
27353: EMPTY
27354: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
27355: LD_ADDR_EXP 123
27359: PUSH
27360: LD_INT 5
27362: ST_TO_ADDR
// end ;
27363: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
27364: LD_EXP 120
27368: PUSH
27369: LD_INT 34
27371: PUSH
27372: LD_INT 81
27374: PUSH
27375: EMPTY
27376: LIST
27377: LIST
27378: PPUSH
27379: CALL_OW 69
27383: AND
27384: IFFALSE 27845
27386: GO 27388
27388: DISABLE
27389: LD_INT 0
27391: PPUSH
27392: PPUSH
27393: PPUSH
27394: PPUSH
// begin enable ;
27395: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
27396: LD_ADDR_VAR 0 1
27400: PUSH
27401: LD_INT 34
27403: PUSH
27404: LD_INT 81
27406: PUSH
27407: EMPTY
27408: LIST
27409: LIST
27410: PPUSH
27411: CALL_OW 69
27415: PUSH
27416: FOR_IN
27417: IFFALSE 27489
// begin if not i in minersList then
27419: LD_VAR 0 1
27423: PUSH
27424: LD_EXP 121
27428: IN
27429: NOT
27430: IFFALSE 27487
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
27432: LD_ADDR_EXP 121
27436: PUSH
27437: LD_EXP 121
27441: PPUSH
27442: LD_EXP 121
27446: PUSH
27447: LD_INT 1
27449: PLUS
27450: PPUSH
27451: LD_VAR 0 1
27455: PPUSH
27456: CALL_OW 1
27460: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
27461: LD_ADDR_EXP 122
27465: PUSH
27466: LD_EXP 122
27470: PPUSH
27471: LD_EXP 122
27475: PUSH
27476: LD_INT 1
27478: PLUS
27479: PPUSH
27480: EMPTY
27481: PPUSH
27482: CALL_OW 1
27486: ST_TO_ADDR
// end end ;
27487: GO 27416
27489: POP
27490: POP
// for i := minerMinesList downto 1 do
27491: LD_ADDR_VAR 0 1
27495: PUSH
27496: DOUBLE
27497: LD_EXP 122
27501: INC
27502: ST_TO_ADDR
27503: LD_INT 1
27505: PUSH
27506: FOR_DOWNTO
27507: IFFALSE 27843
// begin if IsLive ( minersList [ i ] ) then
27509: LD_EXP 121
27513: PUSH
27514: LD_VAR 0 1
27518: ARRAY
27519: PPUSH
27520: CALL_OW 300
27524: IFFALSE 27552
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
27526: LD_EXP 121
27530: PUSH
27531: LD_VAR 0 1
27535: ARRAY
27536: PPUSH
27537: LD_EXP 122
27541: PUSH
27542: LD_VAR 0 1
27546: ARRAY
27547: PPUSH
27548: CALL_OW 505
// if not minerMinesList [ i ] then
27552: LD_EXP 122
27556: PUSH
27557: LD_VAR 0 1
27561: ARRAY
27562: NOT
27563: IFFALSE 27567
// continue ;
27565: GO 27506
// for j := minerMinesList [ i ] downto 1 do
27567: LD_ADDR_VAR 0 2
27571: PUSH
27572: DOUBLE
27573: LD_EXP 122
27577: PUSH
27578: LD_VAR 0 1
27582: ARRAY
27583: INC
27584: ST_TO_ADDR
27585: LD_INT 1
27587: PUSH
27588: FOR_DOWNTO
27589: IFFALSE 27839
// begin side := GetSide ( minersList [ i ] ) ;
27591: LD_ADDR_VAR 0 3
27595: PUSH
27596: LD_EXP 121
27600: PUSH
27601: LD_VAR 0 1
27605: ARRAY
27606: PPUSH
27607: CALL_OW 255
27611: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
27612: LD_ADDR_VAR 0 4
27616: PUSH
27617: LD_EXP 122
27621: PUSH
27622: LD_VAR 0 1
27626: ARRAY
27627: PUSH
27628: LD_VAR 0 2
27632: ARRAY
27633: PUSH
27634: LD_INT 1
27636: ARRAY
27637: PPUSH
27638: LD_EXP 122
27642: PUSH
27643: LD_VAR 0 1
27647: ARRAY
27648: PUSH
27649: LD_VAR 0 2
27653: ARRAY
27654: PUSH
27655: LD_INT 2
27657: ARRAY
27658: PPUSH
27659: CALL_OW 428
27663: ST_TO_ADDR
// if not tmp then
27664: LD_VAR 0 4
27668: NOT
27669: IFFALSE 27673
// continue ;
27671: GO 27588
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
27673: LD_VAR 0 4
27677: PUSH
27678: LD_INT 81
27680: PUSH
27681: LD_VAR 0 3
27685: PUSH
27686: EMPTY
27687: LIST
27688: LIST
27689: PPUSH
27690: CALL_OW 69
27694: IN
27695: PUSH
27696: LD_EXP 122
27700: PUSH
27701: LD_VAR 0 1
27705: ARRAY
27706: PUSH
27707: LD_VAR 0 2
27711: ARRAY
27712: PUSH
27713: LD_INT 1
27715: ARRAY
27716: PPUSH
27717: LD_EXP 122
27721: PUSH
27722: LD_VAR 0 1
27726: ARRAY
27727: PUSH
27728: LD_VAR 0 2
27732: ARRAY
27733: PUSH
27734: LD_INT 2
27736: ARRAY
27737: PPUSH
27738: CALL_OW 458
27742: AND
27743: IFFALSE 27837
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
27745: LD_EXP 122
27749: PUSH
27750: LD_VAR 0 1
27754: ARRAY
27755: PUSH
27756: LD_VAR 0 2
27760: ARRAY
27761: PUSH
27762: LD_INT 1
27764: ARRAY
27765: PPUSH
27766: LD_EXP 122
27770: PUSH
27771: LD_VAR 0 1
27775: ARRAY
27776: PUSH
27777: LD_VAR 0 2
27781: ARRAY
27782: PUSH
27783: LD_INT 2
27785: ARRAY
27786: PPUSH
27787: LD_VAR 0 3
27791: PPUSH
27792: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
27796: LD_ADDR_EXP 122
27800: PUSH
27801: LD_EXP 122
27805: PPUSH
27806: LD_VAR 0 1
27810: PPUSH
27811: LD_EXP 122
27815: PUSH
27816: LD_VAR 0 1
27820: ARRAY
27821: PPUSH
27822: LD_VAR 0 2
27826: PPUSH
27827: CALL_OW 3
27831: PPUSH
27832: CALL_OW 1
27836: ST_TO_ADDR
// end ; end ;
27837: GO 27588
27839: POP
27840: POP
// end ;
27841: GO 27506
27843: POP
27844: POP
// end ;
27845: PPOPN 4
27847: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
27848: LD_INT 0
27850: PPUSH
27851: PPUSH
// result := false ;
27852: LD_ADDR_VAR 0 4
27856: PUSH
27857: LD_INT 0
27859: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
27860: LD_VAR 0 1
27864: PPUSH
27865: CALL_OW 264
27869: PUSH
27870: LD_INT 81
27872: EQUAL
27873: NOT
27874: IFFALSE 27878
// exit ;
27876: GO 28118
// index := GetElementIndex ( minersList , unit ) ;
27878: LD_ADDR_VAR 0 5
27882: PUSH
27883: LD_EXP 121
27887: PPUSH
27888: LD_VAR 0 1
27892: PPUSH
27893: CALL 34076 0 2
27897: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
27898: LD_EXP 122
27902: PUSH
27903: LD_VAR 0 5
27907: ARRAY
27908: PUSH
27909: LD_EXP 123
27913: GREATEREQUAL
27914: IFFALSE 27918
// exit ;
27916: GO 28118
// ComMoveXY ( unit , x , y ) ;
27918: LD_VAR 0 1
27922: PPUSH
27923: LD_VAR 0 2
27927: PPUSH
27928: LD_VAR 0 3
27932: PPUSH
27933: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
27937: LD_INT 35
27939: PPUSH
27940: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
27944: LD_VAR 0 1
27948: PPUSH
27949: LD_VAR 0 2
27953: PPUSH
27954: LD_VAR 0 3
27958: PPUSH
27959: CALL 65817 0 3
27963: NOT
27964: PUSH
27965: LD_VAR 0 1
27969: PPUSH
27970: CALL_OW 314
27974: AND
27975: IFFALSE 27979
// exit ;
27977: GO 28118
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
27979: LD_VAR 0 2
27983: PPUSH
27984: LD_VAR 0 3
27988: PPUSH
27989: CALL_OW 428
27993: PUSH
27994: LD_VAR 0 1
27998: EQUAL
27999: PUSH
28000: LD_VAR 0 1
28004: PPUSH
28005: CALL_OW 314
28009: NOT
28010: AND
28011: IFFALSE 27937
// PlaySoundXY ( x , y , PlantMine ) ;
28013: LD_VAR 0 2
28017: PPUSH
28018: LD_VAR 0 3
28022: PPUSH
28023: LD_STRING PlantMine
28025: PPUSH
28026: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
28030: LD_VAR 0 2
28034: PPUSH
28035: LD_VAR 0 3
28039: PPUSH
28040: LD_VAR 0 1
28044: PPUSH
28045: CALL_OW 255
28049: PPUSH
28050: LD_INT 0
28052: PPUSH
28053: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
28057: LD_ADDR_EXP 122
28061: PUSH
28062: LD_EXP 122
28066: PPUSH
28067: LD_VAR 0 5
28071: PUSH
28072: LD_EXP 122
28076: PUSH
28077: LD_VAR 0 5
28081: ARRAY
28082: PUSH
28083: LD_INT 1
28085: PLUS
28086: PUSH
28087: EMPTY
28088: LIST
28089: LIST
28090: PPUSH
28091: LD_VAR 0 2
28095: PUSH
28096: LD_VAR 0 3
28100: PUSH
28101: EMPTY
28102: LIST
28103: LIST
28104: PPUSH
28105: CALL 34291 0 3
28109: ST_TO_ADDR
// result := true ;
28110: LD_ADDR_VAR 0 4
28114: PUSH
28115: LD_INT 1
28117: ST_TO_ADDR
// end ;
28118: LD_VAR 0 4
28122: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
28123: LD_INT 0
28125: PPUSH
28126: PPUSH
28127: PPUSH
// if not unit in minersList then
28128: LD_VAR 0 1
28132: PUSH
28133: LD_EXP 121
28137: IN
28138: NOT
28139: IFFALSE 28143
// exit ;
28141: GO 28535
// index := GetElementIndex ( minersList , unit ) ;
28143: LD_ADDR_VAR 0 6
28147: PUSH
28148: LD_EXP 121
28152: PPUSH
28153: LD_VAR 0 1
28157: PPUSH
28158: CALL 34076 0 2
28162: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
28163: LD_ADDR_VAR 0 5
28167: PUSH
28168: DOUBLE
28169: LD_EXP 122
28173: PUSH
28174: LD_VAR 0 6
28178: ARRAY
28179: INC
28180: ST_TO_ADDR
28181: LD_INT 1
28183: PUSH
28184: FOR_DOWNTO
28185: IFFALSE 28346
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
28187: LD_EXP 122
28191: PUSH
28192: LD_VAR 0 6
28196: ARRAY
28197: PUSH
28198: LD_VAR 0 5
28202: ARRAY
28203: PUSH
28204: LD_INT 1
28206: ARRAY
28207: PUSH
28208: LD_VAR 0 2
28212: EQUAL
28213: PUSH
28214: LD_EXP 122
28218: PUSH
28219: LD_VAR 0 6
28223: ARRAY
28224: PUSH
28225: LD_VAR 0 5
28229: ARRAY
28230: PUSH
28231: LD_INT 2
28233: ARRAY
28234: PUSH
28235: LD_VAR 0 3
28239: EQUAL
28240: AND
28241: IFFALSE 28344
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
28243: LD_EXP 122
28247: PUSH
28248: LD_VAR 0 6
28252: ARRAY
28253: PUSH
28254: LD_VAR 0 5
28258: ARRAY
28259: PUSH
28260: LD_INT 1
28262: ARRAY
28263: PPUSH
28264: LD_EXP 122
28268: PUSH
28269: LD_VAR 0 6
28273: ARRAY
28274: PUSH
28275: LD_VAR 0 5
28279: ARRAY
28280: PUSH
28281: LD_INT 2
28283: ARRAY
28284: PPUSH
28285: LD_VAR 0 1
28289: PPUSH
28290: CALL_OW 255
28294: PPUSH
28295: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
28299: LD_ADDR_EXP 122
28303: PUSH
28304: LD_EXP 122
28308: PPUSH
28309: LD_VAR 0 6
28313: PPUSH
28314: LD_EXP 122
28318: PUSH
28319: LD_VAR 0 6
28323: ARRAY
28324: PPUSH
28325: LD_VAR 0 5
28329: PPUSH
28330: CALL_OW 3
28334: PPUSH
28335: CALL_OW 1
28339: ST_TO_ADDR
// exit ;
28340: POP
28341: POP
28342: GO 28535
// end ; end ;
28344: GO 28184
28346: POP
28347: POP
// for i := minerMinesList [ index ] downto 1 do
28348: LD_ADDR_VAR 0 5
28352: PUSH
28353: DOUBLE
28354: LD_EXP 122
28358: PUSH
28359: LD_VAR 0 6
28363: ARRAY
28364: INC
28365: ST_TO_ADDR
28366: LD_INT 1
28368: PUSH
28369: FOR_DOWNTO
28370: IFFALSE 28533
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
28372: LD_EXP 122
28376: PUSH
28377: LD_VAR 0 6
28381: ARRAY
28382: PUSH
28383: LD_VAR 0 5
28387: ARRAY
28388: PUSH
28389: LD_INT 1
28391: ARRAY
28392: PPUSH
28393: LD_EXP 122
28397: PUSH
28398: LD_VAR 0 6
28402: ARRAY
28403: PUSH
28404: LD_VAR 0 5
28408: ARRAY
28409: PUSH
28410: LD_INT 2
28412: ARRAY
28413: PPUSH
28414: LD_VAR 0 2
28418: PPUSH
28419: LD_VAR 0 3
28423: PPUSH
28424: CALL_OW 298
28428: PUSH
28429: LD_INT 6
28431: LESS
28432: IFFALSE 28531
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
28434: LD_EXP 122
28438: PUSH
28439: LD_VAR 0 6
28443: ARRAY
28444: PUSH
28445: LD_VAR 0 5
28449: ARRAY
28450: PUSH
28451: LD_INT 1
28453: ARRAY
28454: PPUSH
28455: LD_EXP 122
28459: PUSH
28460: LD_VAR 0 6
28464: ARRAY
28465: PUSH
28466: LD_VAR 0 5
28470: ARRAY
28471: PUSH
28472: LD_INT 2
28474: ARRAY
28475: PPUSH
28476: LD_VAR 0 1
28480: PPUSH
28481: CALL_OW 255
28485: PPUSH
28486: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
28490: LD_ADDR_EXP 122
28494: PUSH
28495: LD_EXP 122
28499: PPUSH
28500: LD_VAR 0 6
28504: PPUSH
28505: LD_EXP 122
28509: PUSH
28510: LD_VAR 0 6
28514: ARRAY
28515: PPUSH
28516: LD_VAR 0 5
28520: PPUSH
28521: CALL_OW 3
28525: PPUSH
28526: CALL_OW 1
28530: ST_TO_ADDR
// end ; end ;
28531: GO 28369
28533: POP
28534: POP
// end ;
28535: LD_VAR 0 4
28539: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
28540: LD_INT 0
28542: PPUSH
28543: PPUSH
28544: PPUSH
28545: PPUSH
28546: PPUSH
28547: PPUSH
28548: PPUSH
28549: PPUSH
28550: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
28551: LD_VAR 0 1
28555: PPUSH
28556: CALL_OW 264
28560: PUSH
28561: LD_INT 81
28563: EQUAL
28564: NOT
28565: PUSH
28566: LD_VAR 0 1
28570: PUSH
28571: LD_EXP 121
28575: IN
28576: NOT
28577: OR
28578: IFFALSE 28582
// exit ;
28580: GO 28904
// index := GetElementIndex ( minersList , unit ) ;
28582: LD_ADDR_VAR 0 6
28586: PUSH
28587: LD_EXP 121
28591: PPUSH
28592: LD_VAR 0 1
28596: PPUSH
28597: CALL 34076 0 2
28601: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
28602: LD_ADDR_VAR 0 8
28606: PUSH
28607: LD_EXP 123
28611: PUSH
28612: LD_EXP 122
28616: PUSH
28617: LD_VAR 0 6
28621: ARRAY
28622: MINUS
28623: ST_TO_ADDR
// if not minesFreeAmount then
28624: LD_VAR 0 8
28628: NOT
28629: IFFALSE 28633
// exit ;
28631: GO 28904
// tmp := [ ] ;
28633: LD_ADDR_VAR 0 7
28637: PUSH
28638: EMPTY
28639: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
28640: LD_ADDR_VAR 0 5
28644: PUSH
28645: DOUBLE
28646: LD_INT 1
28648: DEC
28649: ST_TO_ADDR
28650: LD_VAR 0 8
28654: PUSH
28655: FOR_TO
28656: IFFALSE 28851
// begin _d := rand ( 0 , 5 ) ;
28658: LD_ADDR_VAR 0 11
28662: PUSH
28663: LD_INT 0
28665: PPUSH
28666: LD_INT 5
28668: PPUSH
28669: CALL_OW 12
28673: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
28674: LD_ADDR_VAR 0 12
28678: PUSH
28679: LD_INT 2
28681: PPUSH
28682: LD_INT 6
28684: PPUSH
28685: CALL_OW 12
28689: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
28690: LD_ADDR_VAR 0 9
28694: PUSH
28695: LD_VAR 0 2
28699: PPUSH
28700: LD_VAR 0 11
28704: PPUSH
28705: LD_VAR 0 12
28709: PPUSH
28710: CALL_OW 272
28714: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
28715: LD_ADDR_VAR 0 10
28719: PUSH
28720: LD_VAR 0 3
28724: PPUSH
28725: LD_VAR 0 11
28729: PPUSH
28730: LD_VAR 0 12
28734: PPUSH
28735: CALL_OW 273
28739: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
28740: LD_VAR 0 9
28744: PPUSH
28745: LD_VAR 0 10
28749: PPUSH
28750: CALL_OW 488
28754: PUSH
28755: LD_VAR 0 9
28759: PUSH
28760: LD_VAR 0 10
28764: PUSH
28765: EMPTY
28766: LIST
28767: LIST
28768: PUSH
28769: LD_VAR 0 7
28773: IN
28774: NOT
28775: AND
28776: PUSH
28777: LD_VAR 0 9
28781: PPUSH
28782: LD_VAR 0 10
28786: PPUSH
28787: CALL_OW 458
28791: NOT
28792: AND
28793: IFFALSE 28835
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
28795: LD_ADDR_VAR 0 7
28799: PUSH
28800: LD_VAR 0 7
28804: PPUSH
28805: LD_VAR 0 7
28809: PUSH
28810: LD_INT 1
28812: PLUS
28813: PPUSH
28814: LD_VAR 0 9
28818: PUSH
28819: LD_VAR 0 10
28823: PUSH
28824: EMPTY
28825: LIST
28826: LIST
28827: PPUSH
28828: CALL_OW 1
28832: ST_TO_ADDR
28833: GO 28849
// i := i - 1 ;
28835: LD_ADDR_VAR 0 5
28839: PUSH
28840: LD_VAR 0 5
28844: PUSH
28845: LD_INT 1
28847: MINUS
28848: ST_TO_ADDR
// end ;
28849: GO 28655
28851: POP
28852: POP
// for i in tmp do
28853: LD_ADDR_VAR 0 5
28857: PUSH
28858: LD_VAR 0 7
28862: PUSH
28863: FOR_IN
28864: IFFALSE 28902
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
28866: LD_VAR 0 1
28870: PPUSH
28871: LD_VAR 0 5
28875: PUSH
28876: LD_INT 1
28878: ARRAY
28879: PPUSH
28880: LD_VAR 0 5
28884: PUSH
28885: LD_INT 2
28887: ARRAY
28888: PPUSH
28889: CALL 27848 0 3
28893: NOT
28894: IFFALSE 28900
// exit ;
28896: POP
28897: POP
28898: GO 28904
28900: GO 28863
28902: POP
28903: POP
// end ;
28904: LD_VAR 0 4
28908: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
28909: LD_INT 0
28911: PPUSH
28912: PPUSH
28913: PPUSH
28914: PPUSH
28915: PPUSH
28916: PPUSH
28917: PPUSH
// if not GetClass ( unit ) = class_sniper then
28918: LD_VAR 0 1
28922: PPUSH
28923: CALL_OW 257
28927: PUSH
28928: LD_INT 5
28930: EQUAL
28931: NOT
28932: IFFALSE 28936
// exit ;
28934: GO 29324
// dist := 8 ;
28936: LD_ADDR_VAR 0 5
28940: PUSH
28941: LD_INT 8
28943: ST_TO_ADDR
// viewRange := 12 ;
28944: LD_ADDR_VAR 0 7
28948: PUSH
28949: LD_INT 12
28951: ST_TO_ADDR
// side := GetSide ( unit ) ;
28952: LD_ADDR_VAR 0 6
28956: PUSH
28957: LD_VAR 0 1
28961: PPUSH
28962: CALL_OW 255
28966: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
28967: LD_INT 61
28969: PPUSH
28970: LD_VAR 0 6
28974: PPUSH
28975: CALL_OW 321
28979: PUSH
28980: LD_INT 2
28982: EQUAL
28983: IFFALSE 28993
// viewRange := 16 ;
28985: LD_ADDR_VAR 0 7
28989: PUSH
28990: LD_INT 16
28992: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
28993: LD_VAR 0 1
28997: PPUSH
28998: LD_VAR 0 2
29002: PPUSH
29003: LD_VAR 0 3
29007: PPUSH
29008: CALL_OW 297
29012: PUSH
29013: LD_VAR 0 5
29017: GREATER
29018: IFFALSE 29097
// begin ComMoveXY ( unit , x , y ) ;
29020: LD_VAR 0 1
29024: PPUSH
29025: LD_VAR 0 2
29029: PPUSH
29030: LD_VAR 0 3
29034: PPUSH
29035: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
29039: LD_INT 35
29041: PPUSH
29042: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
29046: LD_VAR 0 1
29050: PPUSH
29051: LD_VAR 0 2
29055: PPUSH
29056: LD_VAR 0 3
29060: PPUSH
29061: CALL 65817 0 3
29065: NOT
29066: IFFALSE 29070
// exit ;
29068: GO 29324
// until GetDistUnitXY ( unit , x , y ) < dist ;
29070: LD_VAR 0 1
29074: PPUSH
29075: LD_VAR 0 2
29079: PPUSH
29080: LD_VAR 0 3
29084: PPUSH
29085: CALL_OW 297
29089: PUSH
29090: LD_VAR 0 5
29094: LESS
29095: IFFALSE 29039
// end ; ComTurnXY ( unit , x , y ) ;
29097: LD_VAR 0 1
29101: PPUSH
29102: LD_VAR 0 2
29106: PPUSH
29107: LD_VAR 0 3
29111: PPUSH
29112: CALL_OW 118
// wait ( 5 ) ;
29116: LD_INT 5
29118: PPUSH
29119: CALL_OW 67
// _d := GetDir ( unit ) ;
29123: LD_ADDR_VAR 0 10
29127: PUSH
29128: LD_VAR 0 1
29132: PPUSH
29133: CALL_OW 254
29137: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
29138: LD_ADDR_VAR 0 8
29142: PUSH
29143: LD_VAR 0 1
29147: PPUSH
29148: CALL_OW 250
29152: PPUSH
29153: LD_VAR 0 10
29157: PPUSH
29158: LD_VAR 0 5
29162: PPUSH
29163: CALL_OW 272
29167: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
29168: LD_ADDR_VAR 0 9
29172: PUSH
29173: LD_VAR 0 1
29177: PPUSH
29178: CALL_OW 251
29182: PPUSH
29183: LD_VAR 0 10
29187: PPUSH
29188: LD_VAR 0 5
29192: PPUSH
29193: CALL_OW 273
29197: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29198: LD_VAR 0 8
29202: PPUSH
29203: LD_VAR 0 9
29207: PPUSH
29208: CALL_OW 488
29212: NOT
29213: IFFALSE 29217
// exit ;
29215: GO 29324
// ComAnimCustom ( unit , 1 ) ;
29217: LD_VAR 0 1
29221: PPUSH
29222: LD_INT 1
29224: PPUSH
29225: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
29229: LD_VAR 0 8
29233: PPUSH
29234: LD_VAR 0 9
29238: PPUSH
29239: LD_VAR 0 6
29243: PPUSH
29244: LD_VAR 0 7
29248: PPUSH
29249: CALL_OW 330
// repeat wait ( 1 ) ;
29253: LD_INT 1
29255: PPUSH
29256: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
29260: LD_VAR 0 1
29264: PPUSH
29265: CALL_OW 316
29269: PUSH
29270: LD_VAR 0 1
29274: PPUSH
29275: CALL_OW 314
29279: OR
29280: PUSH
29281: LD_VAR 0 1
29285: PPUSH
29286: CALL_OW 302
29290: NOT
29291: OR
29292: PUSH
29293: LD_VAR 0 1
29297: PPUSH
29298: CALL_OW 301
29302: OR
29303: IFFALSE 29253
// RemoveSeeing ( _x , _y , side ) ;
29305: LD_VAR 0 8
29309: PPUSH
29310: LD_VAR 0 9
29314: PPUSH
29315: LD_VAR 0 6
29319: PPUSH
29320: CALL_OW 331
// end ; end_of_file
29324: LD_VAR 0 4
29328: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
29329: LD_INT 0
29331: PPUSH
29332: PPUSH
// if exist_mode then
29333: LD_VAR 0 2
29337: IFFALSE 29362
// unit := CreateCharacter ( prefix & ident ) else
29339: LD_ADDR_VAR 0 5
29343: PUSH
29344: LD_VAR 0 3
29348: PUSH
29349: LD_VAR 0 1
29353: STR
29354: PPUSH
29355: CALL_OW 34
29359: ST_TO_ADDR
29360: GO 29377
// unit := NewCharacter ( ident ) ;
29362: LD_ADDR_VAR 0 5
29366: PUSH
29367: LD_VAR 0 1
29371: PPUSH
29372: CALL_OW 25
29376: ST_TO_ADDR
// result := unit ;
29377: LD_ADDR_VAR 0 4
29381: PUSH
29382: LD_VAR 0 5
29386: ST_TO_ADDR
// end ;
29387: LD_VAR 0 4
29391: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
29392: LD_INT 0
29394: PPUSH
29395: PPUSH
// if not side or not nation then
29396: LD_VAR 0 1
29400: NOT
29401: PUSH
29402: LD_VAR 0 2
29406: NOT
29407: OR
29408: IFFALSE 29412
// exit ;
29410: GO 30180
// case nation of nation_american :
29412: LD_VAR 0 2
29416: PUSH
29417: LD_INT 1
29419: DOUBLE
29420: EQUAL
29421: IFTRUE 29425
29423: GO 29639
29425: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
29426: LD_ADDR_VAR 0 4
29430: PUSH
29431: LD_INT 35
29433: PUSH
29434: LD_INT 45
29436: PUSH
29437: LD_INT 46
29439: PUSH
29440: LD_INT 47
29442: PUSH
29443: LD_INT 82
29445: PUSH
29446: LD_INT 83
29448: PUSH
29449: LD_INT 84
29451: PUSH
29452: LD_INT 85
29454: PUSH
29455: LD_INT 86
29457: PUSH
29458: LD_INT 1
29460: PUSH
29461: LD_INT 2
29463: PUSH
29464: LD_INT 6
29466: PUSH
29467: LD_INT 15
29469: PUSH
29470: LD_INT 16
29472: PUSH
29473: LD_INT 7
29475: PUSH
29476: LD_INT 12
29478: PUSH
29479: LD_INT 13
29481: PUSH
29482: LD_INT 10
29484: PUSH
29485: LD_INT 14
29487: PUSH
29488: LD_INT 20
29490: PUSH
29491: LD_INT 21
29493: PUSH
29494: LD_INT 22
29496: PUSH
29497: LD_INT 25
29499: PUSH
29500: LD_INT 32
29502: PUSH
29503: LD_INT 27
29505: PUSH
29506: LD_INT 36
29508: PUSH
29509: LD_INT 69
29511: PUSH
29512: LD_INT 39
29514: PUSH
29515: LD_INT 34
29517: PUSH
29518: LD_INT 40
29520: PUSH
29521: LD_INT 48
29523: PUSH
29524: LD_INT 49
29526: PUSH
29527: LD_INT 50
29529: PUSH
29530: LD_INT 51
29532: PUSH
29533: LD_INT 52
29535: PUSH
29536: LD_INT 53
29538: PUSH
29539: LD_INT 54
29541: PUSH
29542: LD_INT 55
29544: PUSH
29545: LD_INT 56
29547: PUSH
29548: LD_INT 57
29550: PUSH
29551: LD_INT 58
29553: PUSH
29554: LD_INT 59
29556: PUSH
29557: LD_INT 60
29559: PUSH
29560: LD_INT 61
29562: PUSH
29563: LD_INT 62
29565: PUSH
29566: LD_INT 80
29568: PUSH
29569: LD_INT 82
29571: PUSH
29572: LD_INT 83
29574: PUSH
29575: LD_INT 84
29577: PUSH
29578: LD_INT 85
29580: PUSH
29581: LD_INT 86
29583: PUSH
29584: EMPTY
29585: LIST
29586: LIST
29587: LIST
29588: LIST
29589: LIST
29590: LIST
29591: LIST
29592: LIST
29593: LIST
29594: LIST
29595: LIST
29596: LIST
29597: LIST
29598: LIST
29599: LIST
29600: LIST
29601: LIST
29602: LIST
29603: LIST
29604: LIST
29605: LIST
29606: LIST
29607: LIST
29608: LIST
29609: LIST
29610: LIST
29611: LIST
29612: LIST
29613: LIST
29614: LIST
29615: LIST
29616: LIST
29617: LIST
29618: LIST
29619: LIST
29620: LIST
29621: LIST
29622: LIST
29623: LIST
29624: LIST
29625: LIST
29626: LIST
29627: LIST
29628: LIST
29629: LIST
29630: LIST
29631: LIST
29632: LIST
29633: LIST
29634: LIST
29635: LIST
29636: ST_TO_ADDR
29637: GO 30104
29639: LD_INT 2
29641: DOUBLE
29642: EQUAL
29643: IFTRUE 29647
29645: GO 29873
29647: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
29648: LD_ADDR_VAR 0 4
29652: PUSH
29653: LD_INT 35
29655: PUSH
29656: LD_INT 45
29658: PUSH
29659: LD_INT 46
29661: PUSH
29662: LD_INT 47
29664: PUSH
29665: LD_INT 82
29667: PUSH
29668: LD_INT 83
29670: PUSH
29671: LD_INT 84
29673: PUSH
29674: LD_INT 85
29676: PUSH
29677: LD_INT 87
29679: PUSH
29680: LD_INT 70
29682: PUSH
29683: LD_INT 1
29685: PUSH
29686: LD_INT 11
29688: PUSH
29689: LD_INT 3
29691: PUSH
29692: LD_INT 4
29694: PUSH
29695: LD_INT 5
29697: PUSH
29698: LD_INT 6
29700: PUSH
29701: LD_INT 15
29703: PUSH
29704: LD_INT 18
29706: PUSH
29707: LD_INT 7
29709: PUSH
29710: LD_INT 17
29712: PUSH
29713: LD_INT 8
29715: PUSH
29716: LD_INT 20
29718: PUSH
29719: LD_INT 21
29721: PUSH
29722: LD_INT 22
29724: PUSH
29725: LD_INT 72
29727: PUSH
29728: LD_INT 26
29730: PUSH
29731: LD_INT 69
29733: PUSH
29734: LD_INT 39
29736: PUSH
29737: LD_INT 40
29739: PUSH
29740: LD_INT 41
29742: PUSH
29743: LD_INT 42
29745: PUSH
29746: LD_INT 43
29748: PUSH
29749: LD_INT 48
29751: PUSH
29752: LD_INT 49
29754: PUSH
29755: LD_INT 50
29757: PUSH
29758: LD_INT 51
29760: PUSH
29761: LD_INT 52
29763: PUSH
29764: LD_INT 53
29766: PUSH
29767: LD_INT 54
29769: PUSH
29770: LD_INT 55
29772: PUSH
29773: LD_INT 56
29775: PUSH
29776: LD_INT 60
29778: PUSH
29779: LD_INT 61
29781: PUSH
29782: LD_INT 62
29784: PUSH
29785: LD_INT 66
29787: PUSH
29788: LD_INT 67
29790: PUSH
29791: LD_INT 68
29793: PUSH
29794: LD_INT 81
29796: PUSH
29797: LD_INT 82
29799: PUSH
29800: LD_INT 83
29802: PUSH
29803: LD_INT 84
29805: PUSH
29806: LD_INT 85
29808: PUSH
29809: LD_INT 87
29811: PUSH
29812: LD_INT 88
29814: PUSH
29815: EMPTY
29816: LIST
29817: LIST
29818: LIST
29819: LIST
29820: LIST
29821: LIST
29822: LIST
29823: LIST
29824: LIST
29825: LIST
29826: LIST
29827: LIST
29828: LIST
29829: LIST
29830: LIST
29831: LIST
29832: LIST
29833: LIST
29834: LIST
29835: LIST
29836: LIST
29837: LIST
29838: LIST
29839: LIST
29840: LIST
29841: LIST
29842: LIST
29843: LIST
29844: LIST
29845: LIST
29846: LIST
29847: LIST
29848: LIST
29849: LIST
29850: LIST
29851: LIST
29852: LIST
29853: LIST
29854: LIST
29855: LIST
29856: LIST
29857: LIST
29858: LIST
29859: LIST
29860: LIST
29861: LIST
29862: LIST
29863: LIST
29864: LIST
29865: LIST
29866: LIST
29867: LIST
29868: LIST
29869: LIST
29870: ST_TO_ADDR
29871: GO 30104
29873: LD_INT 3
29875: DOUBLE
29876: EQUAL
29877: IFTRUE 29881
29879: GO 30103
29881: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
29882: LD_ADDR_VAR 0 4
29886: PUSH
29887: LD_INT 46
29889: PUSH
29890: LD_INT 47
29892: PUSH
29893: LD_INT 1
29895: PUSH
29896: LD_INT 2
29898: PUSH
29899: LD_INT 82
29901: PUSH
29902: LD_INT 83
29904: PUSH
29905: LD_INT 84
29907: PUSH
29908: LD_INT 85
29910: PUSH
29911: LD_INT 86
29913: PUSH
29914: LD_INT 11
29916: PUSH
29917: LD_INT 9
29919: PUSH
29920: LD_INT 20
29922: PUSH
29923: LD_INT 19
29925: PUSH
29926: LD_INT 21
29928: PUSH
29929: LD_INT 24
29931: PUSH
29932: LD_INT 22
29934: PUSH
29935: LD_INT 25
29937: PUSH
29938: LD_INT 28
29940: PUSH
29941: LD_INT 29
29943: PUSH
29944: LD_INT 30
29946: PUSH
29947: LD_INT 31
29949: PUSH
29950: LD_INT 37
29952: PUSH
29953: LD_INT 38
29955: PUSH
29956: LD_INT 32
29958: PUSH
29959: LD_INT 27
29961: PUSH
29962: LD_INT 33
29964: PUSH
29965: LD_INT 69
29967: PUSH
29968: LD_INT 39
29970: PUSH
29971: LD_INT 34
29973: PUSH
29974: LD_INT 40
29976: PUSH
29977: LD_INT 71
29979: PUSH
29980: LD_INT 23
29982: PUSH
29983: LD_INT 44
29985: PUSH
29986: LD_INT 48
29988: PUSH
29989: LD_INT 49
29991: PUSH
29992: LD_INT 50
29994: PUSH
29995: LD_INT 51
29997: PUSH
29998: LD_INT 52
30000: PUSH
30001: LD_INT 53
30003: PUSH
30004: LD_INT 54
30006: PUSH
30007: LD_INT 55
30009: PUSH
30010: LD_INT 56
30012: PUSH
30013: LD_INT 57
30015: PUSH
30016: LD_INT 58
30018: PUSH
30019: LD_INT 59
30021: PUSH
30022: LD_INT 63
30024: PUSH
30025: LD_INT 64
30027: PUSH
30028: LD_INT 65
30030: PUSH
30031: LD_INT 82
30033: PUSH
30034: LD_INT 83
30036: PUSH
30037: LD_INT 84
30039: PUSH
30040: LD_INT 85
30042: PUSH
30043: LD_INT 86
30045: PUSH
30046: EMPTY
30047: LIST
30048: LIST
30049: LIST
30050: LIST
30051: LIST
30052: LIST
30053: LIST
30054: LIST
30055: LIST
30056: LIST
30057: LIST
30058: LIST
30059: LIST
30060: LIST
30061: LIST
30062: LIST
30063: LIST
30064: LIST
30065: LIST
30066: LIST
30067: LIST
30068: LIST
30069: LIST
30070: LIST
30071: LIST
30072: LIST
30073: LIST
30074: LIST
30075: LIST
30076: LIST
30077: LIST
30078: LIST
30079: LIST
30080: LIST
30081: LIST
30082: LIST
30083: LIST
30084: LIST
30085: LIST
30086: LIST
30087: LIST
30088: LIST
30089: LIST
30090: LIST
30091: LIST
30092: LIST
30093: LIST
30094: LIST
30095: LIST
30096: LIST
30097: LIST
30098: LIST
30099: LIST
30100: ST_TO_ADDR
30101: GO 30104
30103: POP
// if state > - 1 and state < 3 then
30104: LD_VAR 0 3
30108: PUSH
30109: LD_INT 1
30111: NEG
30112: GREATER
30113: PUSH
30114: LD_VAR 0 3
30118: PUSH
30119: LD_INT 3
30121: LESS
30122: AND
30123: IFFALSE 30180
// for i in result do
30125: LD_ADDR_VAR 0 5
30129: PUSH
30130: LD_VAR 0 4
30134: PUSH
30135: FOR_IN
30136: IFFALSE 30178
// if GetTech ( i , side ) <> state then
30138: LD_VAR 0 5
30142: PPUSH
30143: LD_VAR 0 1
30147: PPUSH
30148: CALL_OW 321
30152: PUSH
30153: LD_VAR 0 3
30157: NONEQUAL
30158: IFFALSE 30176
// result := result diff i ;
30160: LD_ADDR_VAR 0 4
30164: PUSH
30165: LD_VAR 0 4
30169: PUSH
30170: LD_VAR 0 5
30174: DIFF
30175: ST_TO_ADDR
30176: GO 30135
30178: POP
30179: POP
// end ;
30180: LD_VAR 0 4
30184: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
30185: LD_INT 0
30187: PPUSH
30188: PPUSH
30189: PPUSH
// result := true ;
30190: LD_ADDR_VAR 0 3
30194: PUSH
30195: LD_INT 1
30197: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
30198: LD_ADDR_VAR 0 5
30202: PUSH
30203: LD_VAR 0 2
30207: PPUSH
30208: CALL_OW 480
30212: ST_TO_ADDR
// if not tmp then
30213: LD_VAR 0 5
30217: NOT
30218: IFFALSE 30222
// exit ;
30220: GO 30271
// for i in tmp do
30222: LD_ADDR_VAR 0 4
30226: PUSH
30227: LD_VAR 0 5
30231: PUSH
30232: FOR_IN
30233: IFFALSE 30269
// if GetTech ( i , side ) <> state_researched then
30235: LD_VAR 0 4
30239: PPUSH
30240: LD_VAR 0 1
30244: PPUSH
30245: CALL_OW 321
30249: PUSH
30250: LD_INT 2
30252: NONEQUAL
30253: IFFALSE 30267
// begin result := false ;
30255: LD_ADDR_VAR 0 3
30259: PUSH
30260: LD_INT 0
30262: ST_TO_ADDR
// exit ;
30263: POP
30264: POP
30265: GO 30271
// end ;
30267: GO 30232
30269: POP
30270: POP
// end ;
30271: LD_VAR 0 3
30275: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
30276: LD_INT 0
30278: PPUSH
30279: PPUSH
30280: PPUSH
30281: PPUSH
30282: PPUSH
30283: PPUSH
30284: PPUSH
30285: PPUSH
30286: PPUSH
30287: PPUSH
30288: PPUSH
30289: PPUSH
30290: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
30291: LD_VAR 0 1
30295: NOT
30296: PUSH
30297: LD_VAR 0 1
30301: PPUSH
30302: CALL_OW 257
30306: PUSH
30307: LD_INT 9
30309: NONEQUAL
30310: OR
30311: IFFALSE 30315
// exit ;
30313: GO 30888
// side := GetSide ( unit ) ;
30315: LD_ADDR_VAR 0 9
30319: PUSH
30320: LD_VAR 0 1
30324: PPUSH
30325: CALL_OW 255
30329: ST_TO_ADDR
// tech_space := tech_spacanom ;
30330: LD_ADDR_VAR 0 12
30334: PUSH
30335: LD_INT 29
30337: ST_TO_ADDR
// tech_time := tech_taurad ;
30338: LD_ADDR_VAR 0 13
30342: PUSH
30343: LD_INT 28
30345: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
30346: LD_ADDR_VAR 0 11
30350: PUSH
30351: LD_VAR 0 1
30355: PPUSH
30356: CALL_OW 310
30360: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
30361: LD_VAR 0 11
30365: PPUSH
30366: CALL_OW 247
30370: PUSH
30371: LD_INT 2
30373: EQUAL
30374: IFFALSE 30378
// exit ;
30376: GO 30888
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30378: LD_ADDR_VAR 0 8
30382: PUSH
30383: LD_INT 81
30385: PUSH
30386: LD_VAR 0 9
30390: PUSH
30391: EMPTY
30392: LIST
30393: LIST
30394: PUSH
30395: LD_INT 3
30397: PUSH
30398: LD_INT 21
30400: PUSH
30401: LD_INT 3
30403: PUSH
30404: EMPTY
30405: LIST
30406: LIST
30407: PUSH
30408: EMPTY
30409: LIST
30410: LIST
30411: PUSH
30412: EMPTY
30413: LIST
30414: LIST
30415: PPUSH
30416: CALL_OW 69
30420: ST_TO_ADDR
// if not tmp then
30421: LD_VAR 0 8
30425: NOT
30426: IFFALSE 30430
// exit ;
30428: GO 30888
// if in_unit then
30430: LD_VAR 0 11
30434: IFFALSE 30458
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
30436: LD_ADDR_VAR 0 10
30440: PUSH
30441: LD_VAR 0 8
30445: PPUSH
30446: LD_VAR 0 11
30450: PPUSH
30451: CALL_OW 74
30455: ST_TO_ADDR
30456: GO 30478
// enemy := NearestUnitToUnit ( tmp , unit ) ;
30458: LD_ADDR_VAR 0 10
30462: PUSH
30463: LD_VAR 0 8
30467: PPUSH
30468: LD_VAR 0 1
30472: PPUSH
30473: CALL_OW 74
30477: ST_TO_ADDR
// if not enemy then
30478: LD_VAR 0 10
30482: NOT
30483: IFFALSE 30487
// exit ;
30485: GO 30888
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
30487: LD_VAR 0 11
30491: PUSH
30492: LD_VAR 0 11
30496: PPUSH
30497: LD_VAR 0 10
30501: PPUSH
30502: CALL_OW 296
30506: PUSH
30507: LD_INT 13
30509: GREATER
30510: AND
30511: PUSH
30512: LD_VAR 0 1
30516: PPUSH
30517: LD_VAR 0 10
30521: PPUSH
30522: CALL_OW 296
30526: PUSH
30527: LD_INT 12
30529: GREATER
30530: OR
30531: IFFALSE 30535
// exit ;
30533: GO 30888
// missile := [ 1 ] ;
30535: LD_ADDR_VAR 0 14
30539: PUSH
30540: LD_INT 1
30542: PUSH
30543: EMPTY
30544: LIST
30545: ST_TO_ADDR
// if Researched ( side , tech_space ) then
30546: LD_VAR 0 9
30550: PPUSH
30551: LD_VAR 0 12
30555: PPUSH
30556: CALL_OW 325
30560: IFFALSE 30589
// missile := Replace ( missile , missile + 1 , 2 ) ;
30562: LD_ADDR_VAR 0 14
30566: PUSH
30567: LD_VAR 0 14
30571: PPUSH
30572: LD_VAR 0 14
30576: PUSH
30577: LD_INT 1
30579: PLUS
30580: PPUSH
30581: LD_INT 2
30583: PPUSH
30584: CALL_OW 1
30588: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
30589: LD_VAR 0 9
30593: PPUSH
30594: LD_VAR 0 13
30598: PPUSH
30599: CALL_OW 325
30603: PUSH
30604: LD_VAR 0 10
30608: PPUSH
30609: CALL_OW 255
30613: PPUSH
30614: LD_VAR 0 13
30618: PPUSH
30619: CALL_OW 325
30623: NOT
30624: AND
30625: IFFALSE 30654
// missile := Replace ( missile , missile + 1 , 3 ) ;
30627: LD_ADDR_VAR 0 14
30631: PUSH
30632: LD_VAR 0 14
30636: PPUSH
30637: LD_VAR 0 14
30641: PUSH
30642: LD_INT 1
30644: PLUS
30645: PPUSH
30646: LD_INT 3
30648: PPUSH
30649: CALL_OW 1
30653: ST_TO_ADDR
// if missile < 2 then
30654: LD_VAR 0 14
30658: PUSH
30659: LD_INT 2
30661: LESS
30662: IFFALSE 30666
// exit ;
30664: GO 30888
// x := GetX ( enemy ) ;
30666: LD_ADDR_VAR 0 4
30670: PUSH
30671: LD_VAR 0 10
30675: PPUSH
30676: CALL_OW 250
30680: ST_TO_ADDR
// y := GetY ( enemy ) ;
30681: LD_ADDR_VAR 0 5
30685: PUSH
30686: LD_VAR 0 10
30690: PPUSH
30691: CALL_OW 251
30695: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
30696: LD_ADDR_VAR 0 6
30700: PUSH
30701: LD_VAR 0 4
30705: PUSH
30706: LD_INT 1
30708: NEG
30709: PPUSH
30710: LD_INT 1
30712: PPUSH
30713: CALL_OW 12
30717: PLUS
30718: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
30719: LD_ADDR_VAR 0 7
30723: PUSH
30724: LD_VAR 0 5
30728: PUSH
30729: LD_INT 1
30731: NEG
30732: PPUSH
30733: LD_INT 1
30735: PPUSH
30736: CALL_OW 12
30740: PLUS
30741: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30742: LD_VAR 0 6
30746: PPUSH
30747: LD_VAR 0 7
30751: PPUSH
30752: CALL_OW 488
30756: NOT
30757: IFFALSE 30779
// begin _x := x ;
30759: LD_ADDR_VAR 0 6
30763: PUSH
30764: LD_VAR 0 4
30768: ST_TO_ADDR
// _y := y ;
30769: LD_ADDR_VAR 0 7
30773: PUSH
30774: LD_VAR 0 5
30778: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
30779: LD_ADDR_VAR 0 3
30783: PUSH
30784: LD_INT 1
30786: PPUSH
30787: LD_VAR 0 14
30791: PPUSH
30792: CALL_OW 12
30796: ST_TO_ADDR
// case i of 1 :
30797: LD_VAR 0 3
30801: PUSH
30802: LD_INT 1
30804: DOUBLE
30805: EQUAL
30806: IFTRUE 30810
30808: GO 30827
30810: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
30811: LD_VAR 0 1
30815: PPUSH
30816: LD_VAR 0 10
30820: PPUSH
30821: CALL_OW 115
30825: GO 30888
30827: LD_INT 2
30829: DOUBLE
30830: EQUAL
30831: IFTRUE 30835
30833: GO 30857
30835: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
30836: LD_VAR 0 1
30840: PPUSH
30841: LD_VAR 0 6
30845: PPUSH
30846: LD_VAR 0 7
30850: PPUSH
30851: CALL_OW 153
30855: GO 30888
30857: LD_INT 3
30859: DOUBLE
30860: EQUAL
30861: IFTRUE 30865
30863: GO 30887
30865: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
30866: LD_VAR 0 1
30870: PPUSH
30871: LD_VAR 0 6
30875: PPUSH
30876: LD_VAR 0 7
30880: PPUSH
30881: CALL_OW 154
30885: GO 30888
30887: POP
// end ;
30888: LD_VAR 0 2
30892: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
30893: LD_INT 0
30895: PPUSH
30896: PPUSH
30897: PPUSH
30898: PPUSH
30899: PPUSH
30900: PPUSH
// if not unit or not building then
30901: LD_VAR 0 1
30905: NOT
30906: PUSH
30907: LD_VAR 0 2
30911: NOT
30912: OR
30913: IFFALSE 30917
// exit ;
30915: GO 31075
// x := GetX ( building ) ;
30917: LD_ADDR_VAR 0 5
30921: PUSH
30922: LD_VAR 0 2
30926: PPUSH
30927: CALL_OW 250
30931: ST_TO_ADDR
// y := GetY ( building ) ;
30932: LD_ADDR_VAR 0 6
30936: PUSH
30937: LD_VAR 0 2
30941: PPUSH
30942: CALL_OW 251
30946: ST_TO_ADDR
// for i = 0 to 5 do
30947: LD_ADDR_VAR 0 4
30951: PUSH
30952: DOUBLE
30953: LD_INT 0
30955: DEC
30956: ST_TO_ADDR
30957: LD_INT 5
30959: PUSH
30960: FOR_TO
30961: IFFALSE 31073
// begin _x := ShiftX ( x , i , 3 ) ;
30963: LD_ADDR_VAR 0 7
30967: PUSH
30968: LD_VAR 0 5
30972: PPUSH
30973: LD_VAR 0 4
30977: PPUSH
30978: LD_INT 3
30980: PPUSH
30981: CALL_OW 272
30985: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
30986: LD_ADDR_VAR 0 8
30990: PUSH
30991: LD_VAR 0 6
30995: PPUSH
30996: LD_VAR 0 4
31000: PPUSH
31001: LD_INT 3
31003: PPUSH
31004: CALL_OW 273
31008: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31009: LD_VAR 0 7
31013: PPUSH
31014: LD_VAR 0 8
31018: PPUSH
31019: CALL_OW 488
31023: NOT
31024: IFFALSE 31028
// continue ;
31026: GO 30960
// if HexInfo ( _x , _y ) = 0 then
31028: LD_VAR 0 7
31032: PPUSH
31033: LD_VAR 0 8
31037: PPUSH
31038: CALL_OW 428
31042: PUSH
31043: LD_INT 0
31045: EQUAL
31046: IFFALSE 31071
// begin ComMoveXY ( unit , _x , _y ) ;
31048: LD_VAR 0 1
31052: PPUSH
31053: LD_VAR 0 7
31057: PPUSH
31058: LD_VAR 0 8
31062: PPUSH
31063: CALL_OW 111
// exit ;
31067: POP
31068: POP
31069: GO 31075
// end ; end ;
31071: GO 30960
31073: POP
31074: POP
// end ;
31075: LD_VAR 0 3
31079: RET
// export function ScanBase ( side , base_area ) ; begin
31080: LD_INT 0
31082: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
31083: LD_ADDR_VAR 0 3
31087: PUSH
31088: LD_VAR 0 2
31092: PPUSH
31093: LD_INT 81
31095: PUSH
31096: LD_VAR 0 1
31100: PUSH
31101: EMPTY
31102: LIST
31103: LIST
31104: PPUSH
31105: CALL_OW 70
31109: ST_TO_ADDR
// end ;
31110: LD_VAR 0 3
31114: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
31115: LD_INT 0
31117: PPUSH
31118: PPUSH
31119: PPUSH
31120: PPUSH
// result := false ;
31121: LD_ADDR_VAR 0 2
31125: PUSH
31126: LD_INT 0
31128: ST_TO_ADDR
// side := GetSide ( unit ) ;
31129: LD_ADDR_VAR 0 3
31133: PUSH
31134: LD_VAR 0 1
31138: PPUSH
31139: CALL_OW 255
31143: ST_TO_ADDR
// nat := GetNation ( unit ) ;
31144: LD_ADDR_VAR 0 4
31148: PUSH
31149: LD_VAR 0 1
31153: PPUSH
31154: CALL_OW 248
31158: ST_TO_ADDR
// case nat of 1 :
31159: LD_VAR 0 4
31163: PUSH
31164: LD_INT 1
31166: DOUBLE
31167: EQUAL
31168: IFTRUE 31172
31170: GO 31183
31172: POP
// tech := tech_lassight ; 2 :
31173: LD_ADDR_VAR 0 5
31177: PUSH
31178: LD_INT 12
31180: ST_TO_ADDR
31181: GO 31222
31183: LD_INT 2
31185: DOUBLE
31186: EQUAL
31187: IFTRUE 31191
31189: GO 31202
31191: POP
// tech := tech_mortar ; 3 :
31192: LD_ADDR_VAR 0 5
31196: PUSH
31197: LD_INT 41
31199: ST_TO_ADDR
31200: GO 31222
31202: LD_INT 3
31204: DOUBLE
31205: EQUAL
31206: IFTRUE 31210
31208: GO 31221
31210: POP
// tech := tech_bazooka ; end ;
31211: LD_ADDR_VAR 0 5
31215: PUSH
31216: LD_INT 44
31218: ST_TO_ADDR
31219: GO 31222
31221: POP
// if Researched ( side , tech ) then
31222: LD_VAR 0 3
31226: PPUSH
31227: LD_VAR 0 5
31231: PPUSH
31232: CALL_OW 325
31236: IFFALSE 31263
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
31238: LD_ADDR_VAR 0 2
31242: PUSH
31243: LD_INT 5
31245: PUSH
31246: LD_INT 8
31248: PUSH
31249: LD_INT 9
31251: PUSH
31252: EMPTY
31253: LIST
31254: LIST
31255: LIST
31256: PUSH
31257: LD_VAR 0 4
31261: ARRAY
31262: ST_TO_ADDR
// end ;
31263: LD_VAR 0 2
31267: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
31268: LD_INT 0
31270: PPUSH
31271: PPUSH
31272: PPUSH
// if not mines then
31273: LD_VAR 0 2
31277: NOT
31278: IFFALSE 31282
// exit ;
31280: GO 31426
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31282: LD_ADDR_VAR 0 5
31286: PUSH
31287: LD_INT 81
31289: PUSH
31290: LD_VAR 0 1
31294: PUSH
31295: EMPTY
31296: LIST
31297: LIST
31298: PUSH
31299: LD_INT 3
31301: PUSH
31302: LD_INT 21
31304: PUSH
31305: LD_INT 3
31307: PUSH
31308: EMPTY
31309: LIST
31310: LIST
31311: PUSH
31312: EMPTY
31313: LIST
31314: LIST
31315: PUSH
31316: EMPTY
31317: LIST
31318: LIST
31319: PPUSH
31320: CALL_OW 69
31324: ST_TO_ADDR
// for i in mines do
31325: LD_ADDR_VAR 0 4
31329: PUSH
31330: LD_VAR 0 2
31334: PUSH
31335: FOR_IN
31336: IFFALSE 31424
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
31338: LD_VAR 0 4
31342: PUSH
31343: LD_INT 1
31345: ARRAY
31346: PPUSH
31347: LD_VAR 0 4
31351: PUSH
31352: LD_INT 2
31354: ARRAY
31355: PPUSH
31356: CALL_OW 458
31360: NOT
31361: IFFALSE 31365
// continue ;
31363: GO 31335
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
31365: LD_VAR 0 4
31369: PUSH
31370: LD_INT 1
31372: ARRAY
31373: PPUSH
31374: LD_VAR 0 4
31378: PUSH
31379: LD_INT 2
31381: ARRAY
31382: PPUSH
31383: CALL_OW 428
31387: PUSH
31388: LD_VAR 0 5
31392: IN
31393: IFFALSE 31422
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
31395: LD_VAR 0 4
31399: PUSH
31400: LD_INT 1
31402: ARRAY
31403: PPUSH
31404: LD_VAR 0 4
31408: PUSH
31409: LD_INT 2
31411: ARRAY
31412: PPUSH
31413: LD_VAR 0 1
31417: PPUSH
31418: CALL_OW 456
// end ;
31422: GO 31335
31424: POP
31425: POP
// end ;
31426: LD_VAR 0 3
31430: RET
// export function Count ( array ) ; begin
31431: LD_INT 0
31433: PPUSH
// result := array + 0 ;
31434: LD_ADDR_VAR 0 2
31438: PUSH
31439: LD_VAR 0 1
31443: PUSH
31444: LD_INT 0
31446: PLUS
31447: ST_TO_ADDR
// end ;
31448: LD_VAR 0 2
31452: RET
// export function IsEmpty ( building ) ; begin
31453: LD_INT 0
31455: PPUSH
// if not building then
31456: LD_VAR 0 1
31460: NOT
31461: IFFALSE 31465
// exit ;
31463: GO 31508
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
31465: LD_ADDR_VAR 0 2
31469: PUSH
31470: LD_VAR 0 1
31474: PUSH
31475: LD_INT 22
31477: PUSH
31478: LD_VAR 0 1
31482: PPUSH
31483: CALL_OW 255
31487: PUSH
31488: EMPTY
31489: LIST
31490: LIST
31491: PUSH
31492: LD_INT 58
31494: PUSH
31495: EMPTY
31496: LIST
31497: PUSH
31498: EMPTY
31499: LIST
31500: LIST
31501: PPUSH
31502: CALL_OW 69
31506: IN
31507: ST_TO_ADDR
// end ;
31508: LD_VAR 0 2
31512: RET
// export function IsNotFull ( building ) ; var places ; begin
31513: LD_INT 0
31515: PPUSH
31516: PPUSH
// if not building then
31517: LD_VAR 0 1
31521: NOT
31522: IFFALSE 31526
// exit ;
31524: GO 31554
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
31526: LD_ADDR_VAR 0 2
31530: PUSH
31531: LD_VAR 0 1
31535: PPUSH
31536: LD_INT 3
31538: PUSH
31539: LD_INT 62
31541: PUSH
31542: EMPTY
31543: LIST
31544: PUSH
31545: EMPTY
31546: LIST
31547: LIST
31548: PPUSH
31549: CALL_OW 72
31553: ST_TO_ADDR
// end ;
31554: LD_VAR 0 2
31558: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
31559: LD_INT 0
31561: PPUSH
31562: PPUSH
31563: PPUSH
31564: PPUSH
// tmp := [ ] ;
31565: LD_ADDR_VAR 0 3
31569: PUSH
31570: EMPTY
31571: ST_TO_ADDR
// list := [ ] ;
31572: LD_ADDR_VAR 0 5
31576: PUSH
31577: EMPTY
31578: ST_TO_ADDR
// for i = 16 to 25 do
31579: LD_ADDR_VAR 0 4
31583: PUSH
31584: DOUBLE
31585: LD_INT 16
31587: DEC
31588: ST_TO_ADDR
31589: LD_INT 25
31591: PUSH
31592: FOR_TO
31593: IFFALSE 31666
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
31595: LD_ADDR_VAR 0 3
31599: PUSH
31600: LD_VAR 0 3
31604: PUSH
31605: LD_INT 22
31607: PUSH
31608: LD_VAR 0 1
31612: PPUSH
31613: CALL_OW 255
31617: PUSH
31618: EMPTY
31619: LIST
31620: LIST
31621: PUSH
31622: LD_INT 91
31624: PUSH
31625: LD_VAR 0 1
31629: PUSH
31630: LD_INT 6
31632: PUSH
31633: EMPTY
31634: LIST
31635: LIST
31636: LIST
31637: PUSH
31638: LD_INT 30
31640: PUSH
31641: LD_VAR 0 4
31645: PUSH
31646: EMPTY
31647: LIST
31648: LIST
31649: PUSH
31650: EMPTY
31651: LIST
31652: LIST
31653: LIST
31654: PUSH
31655: EMPTY
31656: LIST
31657: PPUSH
31658: CALL_OW 69
31662: ADD
31663: ST_TO_ADDR
31664: GO 31592
31666: POP
31667: POP
// for i = 1 to tmp do
31668: LD_ADDR_VAR 0 4
31672: PUSH
31673: DOUBLE
31674: LD_INT 1
31676: DEC
31677: ST_TO_ADDR
31678: LD_VAR 0 3
31682: PUSH
31683: FOR_TO
31684: IFFALSE 31772
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
31686: LD_ADDR_VAR 0 5
31690: PUSH
31691: LD_VAR 0 5
31695: PUSH
31696: LD_VAR 0 3
31700: PUSH
31701: LD_VAR 0 4
31705: ARRAY
31706: PPUSH
31707: CALL_OW 266
31711: PUSH
31712: LD_VAR 0 3
31716: PUSH
31717: LD_VAR 0 4
31721: ARRAY
31722: PPUSH
31723: CALL_OW 250
31727: PUSH
31728: LD_VAR 0 3
31732: PUSH
31733: LD_VAR 0 4
31737: ARRAY
31738: PPUSH
31739: CALL_OW 251
31743: PUSH
31744: LD_VAR 0 3
31748: PUSH
31749: LD_VAR 0 4
31753: ARRAY
31754: PPUSH
31755: CALL_OW 254
31759: PUSH
31760: EMPTY
31761: LIST
31762: LIST
31763: LIST
31764: LIST
31765: PUSH
31766: EMPTY
31767: LIST
31768: ADD
31769: ST_TO_ADDR
31770: GO 31683
31772: POP
31773: POP
// result := list ;
31774: LD_ADDR_VAR 0 2
31778: PUSH
31779: LD_VAR 0 5
31783: ST_TO_ADDR
// end ;
31784: LD_VAR 0 2
31788: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
31789: LD_INT 0
31791: PPUSH
31792: PPUSH
31793: PPUSH
31794: PPUSH
31795: PPUSH
31796: PPUSH
31797: PPUSH
// if not factory then
31798: LD_VAR 0 1
31802: NOT
31803: IFFALSE 31807
// exit ;
31805: GO 32400
// if control = control_apeman then
31807: LD_VAR 0 4
31811: PUSH
31812: LD_INT 5
31814: EQUAL
31815: IFFALSE 31924
// begin tmp := UnitsInside ( factory ) ;
31817: LD_ADDR_VAR 0 8
31821: PUSH
31822: LD_VAR 0 1
31826: PPUSH
31827: CALL_OW 313
31831: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
31832: LD_VAR 0 8
31836: PPUSH
31837: LD_INT 25
31839: PUSH
31840: LD_INT 12
31842: PUSH
31843: EMPTY
31844: LIST
31845: LIST
31846: PPUSH
31847: CALL_OW 72
31851: NOT
31852: IFFALSE 31862
// control := control_manual ;
31854: LD_ADDR_VAR 0 4
31858: PUSH
31859: LD_INT 1
31861: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
31862: LD_ADDR_VAR 0 8
31866: PUSH
31867: LD_VAR 0 1
31871: PPUSH
31872: CALL 31559 0 1
31876: ST_TO_ADDR
// if tmp then
31877: LD_VAR 0 8
31881: IFFALSE 31924
// begin for i in tmp do
31883: LD_ADDR_VAR 0 7
31887: PUSH
31888: LD_VAR 0 8
31892: PUSH
31893: FOR_IN
31894: IFFALSE 31922
// if i [ 1 ] = b_ext_radio then
31896: LD_VAR 0 7
31900: PUSH
31901: LD_INT 1
31903: ARRAY
31904: PUSH
31905: LD_INT 22
31907: EQUAL
31908: IFFALSE 31920
// begin control := control_remote ;
31910: LD_ADDR_VAR 0 4
31914: PUSH
31915: LD_INT 2
31917: ST_TO_ADDR
// break ;
31918: GO 31922
// end ;
31920: GO 31893
31922: POP
31923: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
31924: LD_VAR 0 1
31928: PPUSH
31929: LD_VAR 0 2
31933: PPUSH
31934: LD_VAR 0 3
31938: PPUSH
31939: LD_VAR 0 4
31943: PPUSH
31944: LD_VAR 0 5
31948: PPUSH
31949: CALL_OW 448
31953: IFFALSE 31988
// begin result := [ chassis , engine , control , weapon ] ;
31955: LD_ADDR_VAR 0 6
31959: PUSH
31960: LD_VAR 0 2
31964: PUSH
31965: LD_VAR 0 3
31969: PUSH
31970: LD_VAR 0 4
31974: PUSH
31975: LD_VAR 0 5
31979: PUSH
31980: EMPTY
31981: LIST
31982: LIST
31983: LIST
31984: LIST
31985: ST_TO_ADDR
// exit ;
31986: GO 32400
// end ; _chassis := AvailableChassisList ( factory ) ;
31988: LD_ADDR_VAR 0 9
31992: PUSH
31993: LD_VAR 0 1
31997: PPUSH
31998: CALL_OW 475
32002: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
32003: LD_ADDR_VAR 0 11
32007: PUSH
32008: LD_VAR 0 1
32012: PPUSH
32013: CALL_OW 476
32017: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
32018: LD_ADDR_VAR 0 12
32022: PUSH
32023: LD_VAR 0 1
32027: PPUSH
32028: CALL_OW 477
32032: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
32033: LD_ADDR_VAR 0 10
32037: PUSH
32038: LD_VAR 0 1
32042: PPUSH
32043: CALL_OW 478
32047: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
32048: LD_VAR 0 9
32052: NOT
32053: PUSH
32054: LD_VAR 0 11
32058: NOT
32059: OR
32060: PUSH
32061: LD_VAR 0 12
32065: NOT
32066: OR
32067: PUSH
32068: LD_VAR 0 10
32072: NOT
32073: OR
32074: IFFALSE 32109
// begin result := [ chassis , engine , control , weapon ] ;
32076: LD_ADDR_VAR 0 6
32080: PUSH
32081: LD_VAR 0 2
32085: PUSH
32086: LD_VAR 0 3
32090: PUSH
32091: LD_VAR 0 4
32095: PUSH
32096: LD_VAR 0 5
32100: PUSH
32101: EMPTY
32102: LIST
32103: LIST
32104: LIST
32105: LIST
32106: ST_TO_ADDR
// exit ;
32107: GO 32400
// end ; if not chassis in _chassis then
32109: LD_VAR 0 2
32113: PUSH
32114: LD_VAR 0 9
32118: IN
32119: NOT
32120: IFFALSE 32146
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
32122: LD_ADDR_VAR 0 2
32126: PUSH
32127: LD_VAR 0 9
32131: PUSH
32132: LD_INT 1
32134: PPUSH
32135: LD_VAR 0 9
32139: PPUSH
32140: CALL_OW 12
32144: ARRAY
32145: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
32146: LD_VAR 0 2
32150: PPUSH
32151: LD_VAR 0 3
32155: PPUSH
32156: CALL 32405 0 2
32160: NOT
32161: IFFALSE 32220
// repeat engine := _engine [ 1 ] ;
32163: LD_ADDR_VAR 0 3
32167: PUSH
32168: LD_VAR 0 11
32172: PUSH
32173: LD_INT 1
32175: ARRAY
32176: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
32177: LD_ADDR_VAR 0 11
32181: PUSH
32182: LD_VAR 0 11
32186: PPUSH
32187: LD_INT 1
32189: PPUSH
32190: CALL_OW 3
32194: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
32195: LD_VAR 0 2
32199: PPUSH
32200: LD_VAR 0 3
32204: PPUSH
32205: CALL 32405 0 2
32209: PUSH
32210: LD_VAR 0 11
32214: PUSH
32215: EMPTY
32216: EQUAL
32217: OR
32218: IFFALSE 32163
// if not control in _control then
32220: LD_VAR 0 4
32224: PUSH
32225: LD_VAR 0 12
32229: IN
32230: NOT
32231: IFFALSE 32257
// control := _control [ rand ( 1 , _control ) ] ;
32233: LD_ADDR_VAR 0 4
32237: PUSH
32238: LD_VAR 0 12
32242: PUSH
32243: LD_INT 1
32245: PPUSH
32246: LD_VAR 0 12
32250: PPUSH
32251: CALL_OW 12
32255: ARRAY
32256: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
32257: LD_VAR 0 2
32261: PPUSH
32262: LD_VAR 0 5
32266: PPUSH
32267: CALL 32625 0 2
32271: NOT
32272: IFFALSE 32331
// repeat weapon := _weapon [ 1 ] ;
32274: LD_ADDR_VAR 0 5
32278: PUSH
32279: LD_VAR 0 10
32283: PUSH
32284: LD_INT 1
32286: ARRAY
32287: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
32288: LD_ADDR_VAR 0 10
32292: PUSH
32293: LD_VAR 0 10
32297: PPUSH
32298: LD_INT 1
32300: PPUSH
32301: CALL_OW 3
32305: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
32306: LD_VAR 0 2
32310: PPUSH
32311: LD_VAR 0 5
32315: PPUSH
32316: CALL 32625 0 2
32320: PUSH
32321: LD_VAR 0 10
32325: PUSH
32326: EMPTY
32327: EQUAL
32328: OR
32329: IFFALSE 32274
// result := [ ] ;
32331: LD_ADDR_VAR 0 6
32335: PUSH
32336: EMPTY
32337: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32338: LD_VAR 0 1
32342: PPUSH
32343: LD_VAR 0 2
32347: PPUSH
32348: LD_VAR 0 3
32352: PPUSH
32353: LD_VAR 0 4
32357: PPUSH
32358: LD_VAR 0 5
32362: PPUSH
32363: CALL_OW 448
32367: IFFALSE 32400
// result := [ chassis , engine , control , weapon ] ;
32369: LD_ADDR_VAR 0 6
32373: PUSH
32374: LD_VAR 0 2
32378: PUSH
32379: LD_VAR 0 3
32383: PUSH
32384: LD_VAR 0 4
32388: PUSH
32389: LD_VAR 0 5
32393: PUSH
32394: EMPTY
32395: LIST
32396: LIST
32397: LIST
32398: LIST
32399: ST_TO_ADDR
// end ;
32400: LD_VAR 0 6
32404: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
32405: LD_INT 0
32407: PPUSH
// if not chassis or not engine then
32408: LD_VAR 0 1
32412: NOT
32413: PUSH
32414: LD_VAR 0 2
32418: NOT
32419: OR
32420: IFFALSE 32424
// exit ;
32422: GO 32620
// case engine of engine_solar :
32424: LD_VAR 0 2
32428: PUSH
32429: LD_INT 2
32431: DOUBLE
32432: EQUAL
32433: IFTRUE 32437
32435: GO 32475
32437: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
32438: LD_ADDR_VAR 0 3
32442: PUSH
32443: LD_INT 11
32445: PUSH
32446: LD_INT 12
32448: PUSH
32449: LD_INT 13
32451: PUSH
32452: LD_INT 14
32454: PUSH
32455: LD_INT 1
32457: PUSH
32458: LD_INT 2
32460: PUSH
32461: LD_INT 3
32463: PUSH
32464: EMPTY
32465: LIST
32466: LIST
32467: LIST
32468: LIST
32469: LIST
32470: LIST
32471: LIST
32472: ST_TO_ADDR
32473: GO 32604
32475: LD_INT 1
32477: DOUBLE
32478: EQUAL
32479: IFTRUE 32483
32481: GO 32545
32483: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
32484: LD_ADDR_VAR 0 3
32488: PUSH
32489: LD_INT 11
32491: PUSH
32492: LD_INT 12
32494: PUSH
32495: LD_INT 13
32497: PUSH
32498: LD_INT 14
32500: PUSH
32501: LD_INT 1
32503: PUSH
32504: LD_INT 2
32506: PUSH
32507: LD_INT 3
32509: PUSH
32510: LD_INT 4
32512: PUSH
32513: LD_INT 5
32515: PUSH
32516: LD_INT 21
32518: PUSH
32519: LD_INT 23
32521: PUSH
32522: LD_INT 22
32524: PUSH
32525: LD_INT 24
32527: PUSH
32528: EMPTY
32529: LIST
32530: LIST
32531: LIST
32532: LIST
32533: LIST
32534: LIST
32535: LIST
32536: LIST
32537: LIST
32538: LIST
32539: LIST
32540: LIST
32541: LIST
32542: ST_TO_ADDR
32543: GO 32604
32545: LD_INT 3
32547: DOUBLE
32548: EQUAL
32549: IFTRUE 32553
32551: GO 32603
32553: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
32554: LD_ADDR_VAR 0 3
32558: PUSH
32559: LD_INT 13
32561: PUSH
32562: LD_INT 14
32564: PUSH
32565: LD_INT 2
32567: PUSH
32568: LD_INT 3
32570: PUSH
32571: LD_INT 4
32573: PUSH
32574: LD_INT 5
32576: PUSH
32577: LD_INT 21
32579: PUSH
32580: LD_INT 22
32582: PUSH
32583: LD_INT 23
32585: PUSH
32586: LD_INT 24
32588: PUSH
32589: EMPTY
32590: LIST
32591: LIST
32592: LIST
32593: LIST
32594: LIST
32595: LIST
32596: LIST
32597: LIST
32598: LIST
32599: LIST
32600: ST_TO_ADDR
32601: GO 32604
32603: POP
// result := ( chassis in result ) ;
32604: LD_ADDR_VAR 0 3
32608: PUSH
32609: LD_VAR 0 1
32613: PUSH
32614: LD_VAR 0 3
32618: IN
32619: ST_TO_ADDR
// end ;
32620: LD_VAR 0 3
32624: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
32625: LD_INT 0
32627: PPUSH
// if not chassis or not weapon then
32628: LD_VAR 0 1
32632: NOT
32633: PUSH
32634: LD_VAR 0 2
32638: NOT
32639: OR
32640: IFFALSE 32644
// exit ;
32642: GO 33704
// case weapon of us_machine_gun :
32644: LD_VAR 0 2
32648: PUSH
32649: LD_INT 2
32651: DOUBLE
32652: EQUAL
32653: IFTRUE 32657
32655: GO 32687
32657: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
32658: LD_ADDR_VAR 0 3
32662: PUSH
32663: LD_INT 1
32665: PUSH
32666: LD_INT 2
32668: PUSH
32669: LD_INT 3
32671: PUSH
32672: LD_INT 4
32674: PUSH
32675: LD_INT 5
32677: PUSH
32678: EMPTY
32679: LIST
32680: LIST
32681: LIST
32682: LIST
32683: LIST
32684: ST_TO_ADDR
32685: GO 33688
32687: LD_INT 3
32689: DOUBLE
32690: EQUAL
32691: IFTRUE 32695
32693: GO 32725
32695: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
32696: LD_ADDR_VAR 0 3
32700: PUSH
32701: LD_INT 1
32703: PUSH
32704: LD_INT 2
32706: PUSH
32707: LD_INT 3
32709: PUSH
32710: LD_INT 4
32712: PUSH
32713: LD_INT 5
32715: PUSH
32716: EMPTY
32717: LIST
32718: LIST
32719: LIST
32720: LIST
32721: LIST
32722: ST_TO_ADDR
32723: GO 33688
32725: LD_INT 11
32727: DOUBLE
32728: EQUAL
32729: IFTRUE 32733
32731: GO 32763
32733: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
32734: LD_ADDR_VAR 0 3
32738: PUSH
32739: LD_INT 1
32741: PUSH
32742: LD_INT 2
32744: PUSH
32745: LD_INT 3
32747: PUSH
32748: LD_INT 4
32750: PUSH
32751: LD_INT 5
32753: PUSH
32754: EMPTY
32755: LIST
32756: LIST
32757: LIST
32758: LIST
32759: LIST
32760: ST_TO_ADDR
32761: GO 33688
32763: LD_INT 4
32765: DOUBLE
32766: EQUAL
32767: IFTRUE 32771
32769: GO 32797
32771: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
32772: LD_ADDR_VAR 0 3
32776: PUSH
32777: LD_INT 2
32779: PUSH
32780: LD_INT 3
32782: PUSH
32783: LD_INT 4
32785: PUSH
32786: LD_INT 5
32788: PUSH
32789: EMPTY
32790: LIST
32791: LIST
32792: LIST
32793: LIST
32794: ST_TO_ADDR
32795: GO 33688
32797: LD_INT 5
32799: DOUBLE
32800: EQUAL
32801: IFTRUE 32805
32803: GO 32831
32805: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
32806: LD_ADDR_VAR 0 3
32810: PUSH
32811: LD_INT 2
32813: PUSH
32814: LD_INT 3
32816: PUSH
32817: LD_INT 4
32819: PUSH
32820: LD_INT 5
32822: PUSH
32823: EMPTY
32824: LIST
32825: LIST
32826: LIST
32827: LIST
32828: ST_TO_ADDR
32829: GO 33688
32831: LD_INT 9
32833: DOUBLE
32834: EQUAL
32835: IFTRUE 32839
32837: GO 32865
32839: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
32840: LD_ADDR_VAR 0 3
32844: PUSH
32845: LD_INT 2
32847: PUSH
32848: LD_INT 3
32850: PUSH
32851: LD_INT 4
32853: PUSH
32854: LD_INT 5
32856: PUSH
32857: EMPTY
32858: LIST
32859: LIST
32860: LIST
32861: LIST
32862: ST_TO_ADDR
32863: GO 33688
32865: LD_INT 7
32867: DOUBLE
32868: EQUAL
32869: IFTRUE 32873
32871: GO 32899
32873: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
32874: LD_ADDR_VAR 0 3
32878: PUSH
32879: LD_INT 2
32881: PUSH
32882: LD_INT 3
32884: PUSH
32885: LD_INT 4
32887: PUSH
32888: LD_INT 5
32890: PUSH
32891: EMPTY
32892: LIST
32893: LIST
32894: LIST
32895: LIST
32896: ST_TO_ADDR
32897: GO 33688
32899: LD_INT 12
32901: DOUBLE
32902: EQUAL
32903: IFTRUE 32907
32905: GO 32933
32907: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
32908: LD_ADDR_VAR 0 3
32912: PUSH
32913: LD_INT 2
32915: PUSH
32916: LD_INT 3
32918: PUSH
32919: LD_INT 4
32921: PUSH
32922: LD_INT 5
32924: PUSH
32925: EMPTY
32926: LIST
32927: LIST
32928: LIST
32929: LIST
32930: ST_TO_ADDR
32931: GO 33688
32933: LD_INT 13
32935: DOUBLE
32936: EQUAL
32937: IFTRUE 32941
32939: GO 32967
32941: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
32942: LD_ADDR_VAR 0 3
32946: PUSH
32947: LD_INT 2
32949: PUSH
32950: LD_INT 3
32952: PUSH
32953: LD_INT 4
32955: PUSH
32956: LD_INT 5
32958: PUSH
32959: EMPTY
32960: LIST
32961: LIST
32962: LIST
32963: LIST
32964: ST_TO_ADDR
32965: GO 33688
32967: LD_INT 14
32969: DOUBLE
32970: EQUAL
32971: IFTRUE 32975
32973: GO 32993
32975: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
32976: LD_ADDR_VAR 0 3
32980: PUSH
32981: LD_INT 4
32983: PUSH
32984: LD_INT 5
32986: PUSH
32987: EMPTY
32988: LIST
32989: LIST
32990: ST_TO_ADDR
32991: GO 33688
32993: LD_INT 6
32995: DOUBLE
32996: EQUAL
32997: IFTRUE 33001
32999: GO 33019
33001: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
33002: LD_ADDR_VAR 0 3
33006: PUSH
33007: LD_INT 4
33009: PUSH
33010: LD_INT 5
33012: PUSH
33013: EMPTY
33014: LIST
33015: LIST
33016: ST_TO_ADDR
33017: GO 33688
33019: LD_INT 10
33021: DOUBLE
33022: EQUAL
33023: IFTRUE 33027
33025: GO 33045
33027: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
33028: LD_ADDR_VAR 0 3
33032: PUSH
33033: LD_INT 4
33035: PUSH
33036: LD_INT 5
33038: PUSH
33039: EMPTY
33040: LIST
33041: LIST
33042: ST_TO_ADDR
33043: GO 33688
33045: LD_INT 22
33047: DOUBLE
33048: EQUAL
33049: IFTRUE 33053
33051: GO 33079
33053: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
33054: LD_ADDR_VAR 0 3
33058: PUSH
33059: LD_INT 11
33061: PUSH
33062: LD_INT 12
33064: PUSH
33065: LD_INT 13
33067: PUSH
33068: LD_INT 14
33070: PUSH
33071: EMPTY
33072: LIST
33073: LIST
33074: LIST
33075: LIST
33076: ST_TO_ADDR
33077: GO 33688
33079: LD_INT 23
33081: DOUBLE
33082: EQUAL
33083: IFTRUE 33087
33085: GO 33113
33087: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
33088: LD_ADDR_VAR 0 3
33092: PUSH
33093: LD_INT 11
33095: PUSH
33096: LD_INT 12
33098: PUSH
33099: LD_INT 13
33101: PUSH
33102: LD_INT 14
33104: PUSH
33105: EMPTY
33106: LIST
33107: LIST
33108: LIST
33109: LIST
33110: ST_TO_ADDR
33111: GO 33688
33113: LD_INT 24
33115: DOUBLE
33116: EQUAL
33117: IFTRUE 33121
33119: GO 33147
33121: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
33122: LD_ADDR_VAR 0 3
33126: PUSH
33127: LD_INT 11
33129: PUSH
33130: LD_INT 12
33132: PUSH
33133: LD_INT 13
33135: PUSH
33136: LD_INT 14
33138: PUSH
33139: EMPTY
33140: LIST
33141: LIST
33142: LIST
33143: LIST
33144: ST_TO_ADDR
33145: GO 33688
33147: LD_INT 30
33149: DOUBLE
33150: EQUAL
33151: IFTRUE 33155
33153: GO 33181
33155: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
33156: LD_ADDR_VAR 0 3
33160: PUSH
33161: LD_INT 11
33163: PUSH
33164: LD_INT 12
33166: PUSH
33167: LD_INT 13
33169: PUSH
33170: LD_INT 14
33172: PUSH
33173: EMPTY
33174: LIST
33175: LIST
33176: LIST
33177: LIST
33178: ST_TO_ADDR
33179: GO 33688
33181: LD_INT 25
33183: DOUBLE
33184: EQUAL
33185: IFTRUE 33189
33187: GO 33207
33189: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
33190: LD_ADDR_VAR 0 3
33194: PUSH
33195: LD_INT 13
33197: PUSH
33198: LD_INT 14
33200: PUSH
33201: EMPTY
33202: LIST
33203: LIST
33204: ST_TO_ADDR
33205: GO 33688
33207: LD_INT 27
33209: DOUBLE
33210: EQUAL
33211: IFTRUE 33215
33213: GO 33233
33215: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
33216: LD_ADDR_VAR 0 3
33220: PUSH
33221: LD_INT 13
33223: PUSH
33224: LD_INT 14
33226: PUSH
33227: EMPTY
33228: LIST
33229: LIST
33230: ST_TO_ADDR
33231: GO 33688
33233: LD_INT 92
33235: DOUBLE
33236: EQUAL
33237: IFTRUE 33241
33239: GO 33267
33241: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
33242: LD_ADDR_VAR 0 3
33246: PUSH
33247: LD_INT 11
33249: PUSH
33250: LD_INT 12
33252: PUSH
33253: LD_INT 13
33255: PUSH
33256: LD_INT 14
33258: PUSH
33259: EMPTY
33260: LIST
33261: LIST
33262: LIST
33263: LIST
33264: ST_TO_ADDR
33265: GO 33688
33267: LD_INT 28
33269: DOUBLE
33270: EQUAL
33271: IFTRUE 33275
33273: GO 33293
33275: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
33276: LD_ADDR_VAR 0 3
33280: PUSH
33281: LD_INT 13
33283: PUSH
33284: LD_INT 14
33286: PUSH
33287: EMPTY
33288: LIST
33289: LIST
33290: ST_TO_ADDR
33291: GO 33688
33293: LD_INT 29
33295: DOUBLE
33296: EQUAL
33297: IFTRUE 33301
33299: GO 33319
33301: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
33302: LD_ADDR_VAR 0 3
33306: PUSH
33307: LD_INT 13
33309: PUSH
33310: LD_INT 14
33312: PUSH
33313: EMPTY
33314: LIST
33315: LIST
33316: ST_TO_ADDR
33317: GO 33688
33319: LD_INT 31
33321: DOUBLE
33322: EQUAL
33323: IFTRUE 33327
33325: GO 33345
33327: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
33328: LD_ADDR_VAR 0 3
33332: PUSH
33333: LD_INT 13
33335: PUSH
33336: LD_INT 14
33338: PUSH
33339: EMPTY
33340: LIST
33341: LIST
33342: ST_TO_ADDR
33343: GO 33688
33345: LD_INT 26
33347: DOUBLE
33348: EQUAL
33349: IFTRUE 33353
33351: GO 33371
33353: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
33354: LD_ADDR_VAR 0 3
33358: PUSH
33359: LD_INT 13
33361: PUSH
33362: LD_INT 14
33364: PUSH
33365: EMPTY
33366: LIST
33367: LIST
33368: ST_TO_ADDR
33369: GO 33688
33371: LD_INT 42
33373: DOUBLE
33374: EQUAL
33375: IFTRUE 33379
33377: GO 33405
33379: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
33380: LD_ADDR_VAR 0 3
33384: PUSH
33385: LD_INT 21
33387: PUSH
33388: LD_INT 22
33390: PUSH
33391: LD_INT 23
33393: PUSH
33394: LD_INT 24
33396: PUSH
33397: EMPTY
33398: LIST
33399: LIST
33400: LIST
33401: LIST
33402: ST_TO_ADDR
33403: GO 33688
33405: LD_INT 43
33407: DOUBLE
33408: EQUAL
33409: IFTRUE 33413
33411: GO 33439
33413: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
33414: LD_ADDR_VAR 0 3
33418: PUSH
33419: LD_INT 21
33421: PUSH
33422: LD_INT 22
33424: PUSH
33425: LD_INT 23
33427: PUSH
33428: LD_INT 24
33430: PUSH
33431: EMPTY
33432: LIST
33433: LIST
33434: LIST
33435: LIST
33436: ST_TO_ADDR
33437: GO 33688
33439: LD_INT 44
33441: DOUBLE
33442: EQUAL
33443: IFTRUE 33447
33445: GO 33473
33447: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
33448: LD_ADDR_VAR 0 3
33452: PUSH
33453: LD_INT 21
33455: PUSH
33456: LD_INT 22
33458: PUSH
33459: LD_INT 23
33461: PUSH
33462: LD_INT 24
33464: PUSH
33465: EMPTY
33466: LIST
33467: LIST
33468: LIST
33469: LIST
33470: ST_TO_ADDR
33471: GO 33688
33473: LD_INT 45
33475: DOUBLE
33476: EQUAL
33477: IFTRUE 33481
33479: GO 33507
33481: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
33482: LD_ADDR_VAR 0 3
33486: PUSH
33487: LD_INT 21
33489: PUSH
33490: LD_INT 22
33492: PUSH
33493: LD_INT 23
33495: PUSH
33496: LD_INT 24
33498: PUSH
33499: EMPTY
33500: LIST
33501: LIST
33502: LIST
33503: LIST
33504: ST_TO_ADDR
33505: GO 33688
33507: LD_INT 49
33509: DOUBLE
33510: EQUAL
33511: IFTRUE 33515
33513: GO 33541
33515: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
33516: LD_ADDR_VAR 0 3
33520: PUSH
33521: LD_INT 21
33523: PUSH
33524: LD_INT 22
33526: PUSH
33527: LD_INT 23
33529: PUSH
33530: LD_INT 24
33532: PUSH
33533: EMPTY
33534: LIST
33535: LIST
33536: LIST
33537: LIST
33538: ST_TO_ADDR
33539: GO 33688
33541: LD_INT 51
33543: DOUBLE
33544: EQUAL
33545: IFTRUE 33549
33547: GO 33575
33549: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
33550: LD_ADDR_VAR 0 3
33554: PUSH
33555: LD_INT 21
33557: PUSH
33558: LD_INT 22
33560: PUSH
33561: LD_INT 23
33563: PUSH
33564: LD_INT 24
33566: PUSH
33567: EMPTY
33568: LIST
33569: LIST
33570: LIST
33571: LIST
33572: ST_TO_ADDR
33573: GO 33688
33575: LD_INT 52
33577: DOUBLE
33578: EQUAL
33579: IFTRUE 33583
33581: GO 33609
33583: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
33584: LD_ADDR_VAR 0 3
33588: PUSH
33589: LD_INT 21
33591: PUSH
33592: LD_INT 22
33594: PUSH
33595: LD_INT 23
33597: PUSH
33598: LD_INT 24
33600: PUSH
33601: EMPTY
33602: LIST
33603: LIST
33604: LIST
33605: LIST
33606: ST_TO_ADDR
33607: GO 33688
33609: LD_INT 53
33611: DOUBLE
33612: EQUAL
33613: IFTRUE 33617
33615: GO 33635
33617: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
33618: LD_ADDR_VAR 0 3
33622: PUSH
33623: LD_INT 23
33625: PUSH
33626: LD_INT 24
33628: PUSH
33629: EMPTY
33630: LIST
33631: LIST
33632: ST_TO_ADDR
33633: GO 33688
33635: LD_INT 46
33637: DOUBLE
33638: EQUAL
33639: IFTRUE 33643
33641: GO 33661
33643: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
33644: LD_ADDR_VAR 0 3
33648: PUSH
33649: LD_INT 23
33651: PUSH
33652: LD_INT 24
33654: PUSH
33655: EMPTY
33656: LIST
33657: LIST
33658: ST_TO_ADDR
33659: GO 33688
33661: LD_INT 47
33663: DOUBLE
33664: EQUAL
33665: IFTRUE 33669
33667: GO 33687
33669: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33670: LD_ADDR_VAR 0 3
33674: PUSH
33675: LD_INT 23
33677: PUSH
33678: LD_INT 24
33680: PUSH
33681: EMPTY
33682: LIST
33683: LIST
33684: ST_TO_ADDR
33685: GO 33688
33687: POP
// result := ( chassis in result ) ;
33688: LD_ADDR_VAR 0 3
33692: PUSH
33693: LD_VAR 0 1
33697: PUSH
33698: LD_VAR 0 3
33702: IN
33703: ST_TO_ADDR
// end ;
33704: LD_VAR 0 3
33708: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
33709: LD_INT 0
33711: PPUSH
33712: PPUSH
33713: PPUSH
33714: PPUSH
33715: PPUSH
33716: PPUSH
33717: PPUSH
// result := array ;
33718: LD_ADDR_VAR 0 5
33722: PUSH
33723: LD_VAR 0 1
33727: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
33728: LD_VAR 0 1
33732: NOT
33733: PUSH
33734: LD_VAR 0 2
33738: NOT
33739: OR
33740: PUSH
33741: LD_VAR 0 3
33745: NOT
33746: OR
33747: PUSH
33748: LD_VAR 0 2
33752: PUSH
33753: LD_VAR 0 1
33757: GREATER
33758: OR
33759: PUSH
33760: LD_VAR 0 3
33764: PUSH
33765: LD_VAR 0 1
33769: GREATER
33770: OR
33771: IFFALSE 33775
// exit ;
33773: GO 34071
// if direction then
33775: LD_VAR 0 4
33779: IFFALSE 33843
// begin d := 1 ;
33781: LD_ADDR_VAR 0 9
33785: PUSH
33786: LD_INT 1
33788: ST_TO_ADDR
// if i_from > i_to then
33789: LD_VAR 0 2
33793: PUSH
33794: LD_VAR 0 3
33798: GREATER
33799: IFFALSE 33825
// length := ( array - i_from ) + i_to else
33801: LD_ADDR_VAR 0 11
33805: PUSH
33806: LD_VAR 0 1
33810: PUSH
33811: LD_VAR 0 2
33815: MINUS
33816: PUSH
33817: LD_VAR 0 3
33821: PLUS
33822: ST_TO_ADDR
33823: GO 33841
// length := i_to - i_from ;
33825: LD_ADDR_VAR 0 11
33829: PUSH
33830: LD_VAR 0 3
33834: PUSH
33835: LD_VAR 0 2
33839: MINUS
33840: ST_TO_ADDR
// end else
33841: GO 33904
// begin d := - 1 ;
33843: LD_ADDR_VAR 0 9
33847: PUSH
33848: LD_INT 1
33850: NEG
33851: ST_TO_ADDR
// if i_from > i_to then
33852: LD_VAR 0 2
33856: PUSH
33857: LD_VAR 0 3
33861: GREATER
33862: IFFALSE 33882
// length := i_from - i_to else
33864: LD_ADDR_VAR 0 11
33868: PUSH
33869: LD_VAR 0 2
33873: PUSH
33874: LD_VAR 0 3
33878: MINUS
33879: ST_TO_ADDR
33880: GO 33904
// length := ( array - i_to ) + i_from ;
33882: LD_ADDR_VAR 0 11
33886: PUSH
33887: LD_VAR 0 1
33891: PUSH
33892: LD_VAR 0 3
33896: MINUS
33897: PUSH
33898: LD_VAR 0 2
33902: PLUS
33903: ST_TO_ADDR
// end ; if not length then
33904: LD_VAR 0 11
33908: NOT
33909: IFFALSE 33913
// exit ;
33911: GO 34071
// tmp := array ;
33913: LD_ADDR_VAR 0 10
33917: PUSH
33918: LD_VAR 0 1
33922: ST_TO_ADDR
// for i = 1 to length do
33923: LD_ADDR_VAR 0 6
33927: PUSH
33928: DOUBLE
33929: LD_INT 1
33931: DEC
33932: ST_TO_ADDR
33933: LD_VAR 0 11
33937: PUSH
33938: FOR_TO
33939: IFFALSE 34059
// begin for j = 1 to array do
33941: LD_ADDR_VAR 0 7
33945: PUSH
33946: DOUBLE
33947: LD_INT 1
33949: DEC
33950: ST_TO_ADDR
33951: LD_VAR 0 1
33955: PUSH
33956: FOR_TO
33957: IFFALSE 34045
// begin k := j + d ;
33959: LD_ADDR_VAR 0 8
33963: PUSH
33964: LD_VAR 0 7
33968: PUSH
33969: LD_VAR 0 9
33973: PLUS
33974: ST_TO_ADDR
// if k > array then
33975: LD_VAR 0 8
33979: PUSH
33980: LD_VAR 0 1
33984: GREATER
33985: IFFALSE 33995
// k := 1 ;
33987: LD_ADDR_VAR 0 8
33991: PUSH
33992: LD_INT 1
33994: ST_TO_ADDR
// if not k then
33995: LD_VAR 0 8
33999: NOT
34000: IFFALSE 34012
// k := array ;
34002: LD_ADDR_VAR 0 8
34006: PUSH
34007: LD_VAR 0 1
34011: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
34012: LD_ADDR_VAR 0 10
34016: PUSH
34017: LD_VAR 0 10
34021: PPUSH
34022: LD_VAR 0 8
34026: PPUSH
34027: LD_VAR 0 1
34031: PUSH
34032: LD_VAR 0 7
34036: ARRAY
34037: PPUSH
34038: CALL_OW 1
34042: ST_TO_ADDR
// end ;
34043: GO 33956
34045: POP
34046: POP
// array := tmp ;
34047: LD_ADDR_VAR 0 1
34051: PUSH
34052: LD_VAR 0 10
34056: ST_TO_ADDR
// end ;
34057: GO 33938
34059: POP
34060: POP
// result := array ;
34061: LD_ADDR_VAR 0 5
34065: PUSH
34066: LD_VAR 0 1
34070: ST_TO_ADDR
// end ;
34071: LD_VAR 0 5
34075: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
34076: LD_INT 0
34078: PPUSH
34079: PPUSH
// result := 0 ;
34080: LD_ADDR_VAR 0 3
34084: PUSH
34085: LD_INT 0
34087: ST_TO_ADDR
// if not array or not value in array then
34088: LD_VAR 0 1
34092: NOT
34093: PUSH
34094: LD_VAR 0 2
34098: PUSH
34099: LD_VAR 0 1
34103: IN
34104: NOT
34105: OR
34106: IFFALSE 34110
// exit ;
34108: GO 34164
// for i = 1 to array do
34110: LD_ADDR_VAR 0 4
34114: PUSH
34115: DOUBLE
34116: LD_INT 1
34118: DEC
34119: ST_TO_ADDR
34120: LD_VAR 0 1
34124: PUSH
34125: FOR_TO
34126: IFFALSE 34162
// if value = array [ i ] then
34128: LD_VAR 0 2
34132: PUSH
34133: LD_VAR 0 1
34137: PUSH
34138: LD_VAR 0 4
34142: ARRAY
34143: EQUAL
34144: IFFALSE 34160
// begin result := i ;
34146: LD_ADDR_VAR 0 3
34150: PUSH
34151: LD_VAR 0 4
34155: ST_TO_ADDR
// exit ;
34156: POP
34157: POP
34158: GO 34164
// end ;
34160: GO 34125
34162: POP
34163: POP
// end ;
34164: LD_VAR 0 3
34168: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
34169: LD_INT 0
34171: PPUSH
// vc_chassis := chassis ;
34172: LD_ADDR_OWVAR 37
34176: PUSH
34177: LD_VAR 0 1
34181: ST_TO_ADDR
// vc_engine := engine ;
34182: LD_ADDR_OWVAR 39
34186: PUSH
34187: LD_VAR 0 2
34191: ST_TO_ADDR
// vc_control := control ;
34192: LD_ADDR_OWVAR 38
34196: PUSH
34197: LD_VAR 0 3
34201: ST_TO_ADDR
// vc_weapon := weapon ;
34202: LD_ADDR_OWVAR 40
34206: PUSH
34207: LD_VAR 0 4
34211: ST_TO_ADDR
// vc_fuel_battery := fuel ;
34212: LD_ADDR_OWVAR 41
34216: PUSH
34217: LD_VAR 0 5
34221: ST_TO_ADDR
// end ;
34222: LD_VAR 0 6
34226: RET
// export function WantPlant ( unit ) ; var task ; begin
34227: LD_INT 0
34229: PPUSH
34230: PPUSH
// result := false ;
34231: LD_ADDR_VAR 0 2
34235: PUSH
34236: LD_INT 0
34238: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
34239: LD_ADDR_VAR 0 3
34243: PUSH
34244: LD_VAR 0 1
34248: PPUSH
34249: CALL_OW 437
34253: ST_TO_ADDR
// if task then
34254: LD_VAR 0 3
34258: IFFALSE 34286
// if task [ 1 ] [ 1 ] = p then
34260: LD_VAR 0 3
34264: PUSH
34265: LD_INT 1
34267: ARRAY
34268: PUSH
34269: LD_INT 1
34271: ARRAY
34272: PUSH
34273: LD_STRING p
34275: EQUAL
34276: IFFALSE 34286
// result := true ;
34278: LD_ADDR_VAR 0 2
34282: PUSH
34283: LD_INT 1
34285: ST_TO_ADDR
// end ;
34286: LD_VAR 0 2
34290: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
34291: LD_INT 0
34293: PPUSH
34294: PPUSH
34295: PPUSH
34296: PPUSH
// if pos < 1 then
34297: LD_VAR 0 2
34301: PUSH
34302: LD_INT 1
34304: LESS
34305: IFFALSE 34309
// exit ;
34307: GO 34612
// if pos = 1 then
34309: LD_VAR 0 2
34313: PUSH
34314: LD_INT 1
34316: EQUAL
34317: IFFALSE 34350
// result := Replace ( arr , pos [ 1 ] , value ) else
34319: LD_ADDR_VAR 0 4
34323: PUSH
34324: LD_VAR 0 1
34328: PPUSH
34329: LD_VAR 0 2
34333: PUSH
34334: LD_INT 1
34336: ARRAY
34337: PPUSH
34338: LD_VAR 0 3
34342: PPUSH
34343: CALL_OW 1
34347: ST_TO_ADDR
34348: GO 34612
// begin tmp := arr ;
34350: LD_ADDR_VAR 0 6
34354: PUSH
34355: LD_VAR 0 1
34359: ST_TO_ADDR
// s_arr := [ tmp ] ;
34360: LD_ADDR_VAR 0 7
34364: PUSH
34365: LD_VAR 0 6
34369: PUSH
34370: EMPTY
34371: LIST
34372: ST_TO_ADDR
// for i = 1 to pos - 1 do
34373: LD_ADDR_VAR 0 5
34377: PUSH
34378: DOUBLE
34379: LD_INT 1
34381: DEC
34382: ST_TO_ADDR
34383: LD_VAR 0 2
34387: PUSH
34388: LD_INT 1
34390: MINUS
34391: PUSH
34392: FOR_TO
34393: IFFALSE 34438
// begin tmp := tmp [ pos [ i ] ] ;
34395: LD_ADDR_VAR 0 6
34399: PUSH
34400: LD_VAR 0 6
34404: PUSH
34405: LD_VAR 0 2
34409: PUSH
34410: LD_VAR 0 5
34414: ARRAY
34415: ARRAY
34416: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
34417: LD_ADDR_VAR 0 7
34421: PUSH
34422: LD_VAR 0 7
34426: PUSH
34427: LD_VAR 0 6
34431: PUSH
34432: EMPTY
34433: LIST
34434: ADD
34435: ST_TO_ADDR
// end ;
34436: GO 34392
34438: POP
34439: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
34440: LD_ADDR_VAR 0 6
34444: PUSH
34445: LD_VAR 0 6
34449: PPUSH
34450: LD_VAR 0 2
34454: PUSH
34455: LD_VAR 0 2
34459: ARRAY
34460: PPUSH
34461: LD_VAR 0 3
34465: PPUSH
34466: CALL_OW 1
34470: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
34471: LD_ADDR_VAR 0 7
34475: PUSH
34476: LD_VAR 0 7
34480: PPUSH
34481: LD_VAR 0 7
34485: PPUSH
34486: LD_VAR 0 6
34490: PPUSH
34491: CALL_OW 1
34495: ST_TO_ADDR
// for i = s_arr downto 2 do
34496: LD_ADDR_VAR 0 5
34500: PUSH
34501: DOUBLE
34502: LD_VAR 0 7
34506: INC
34507: ST_TO_ADDR
34508: LD_INT 2
34510: PUSH
34511: FOR_DOWNTO
34512: IFFALSE 34596
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
34514: LD_ADDR_VAR 0 6
34518: PUSH
34519: LD_VAR 0 7
34523: PUSH
34524: LD_VAR 0 5
34528: PUSH
34529: LD_INT 1
34531: MINUS
34532: ARRAY
34533: PPUSH
34534: LD_VAR 0 2
34538: PUSH
34539: LD_VAR 0 5
34543: PUSH
34544: LD_INT 1
34546: MINUS
34547: ARRAY
34548: PPUSH
34549: LD_VAR 0 7
34553: PUSH
34554: LD_VAR 0 5
34558: ARRAY
34559: PPUSH
34560: CALL_OW 1
34564: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
34565: LD_ADDR_VAR 0 7
34569: PUSH
34570: LD_VAR 0 7
34574: PPUSH
34575: LD_VAR 0 5
34579: PUSH
34580: LD_INT 1
34582: MINUS
34583: PPUSH
34584: LD_VAR 0 6
34588: PPUSH
34589: CALL_OW 1
34593: ST_TO_ADDR
// end ;
34594: GO 34511
34596: POP
34597: POP
// result := s_arr [ 1 ] ;
34598: LD_ADDR_VAR 0 4
34602: PUSH
34603: LD_VAR 0 7
34607: PUSH
34608: LD_INT 1
34610: ARRAY
34611: ST_TO_ADDR
// end ; end ;
34612: LD_VAR 0 4
34616: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
34617: LD_INT 0
34619: PPUSH
34620: PPUSH
// if not list then
34621: LD_VAR 0 1
34625: NOT
34626: IFFALSE 34630
// exit ;
34628: GO 34721
// i := list [ pos1 ] ;
34630: LD_ADDR_VAR 0 5
34634: PUSH
34635: LD_VAR 0 1
34639: PUSH
34640: LD_VAR 0 2
34644: ARRAY
34645: ST_TO_ADDR
// if not i then
34646: LD_VAR 0 5
34650: NOT
34651: IFFALSE 34655
// exit ;
34653: GO 34721
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
34655: LD_ADDR_VAR 0 1
34659: PUSH
34660: LD_VAR 0 1
34664: PPUSH
34665: LD_VAR 0 2
34669: PPUSH
34670: LD_VAR 0 1
34674: PUSH
34675: LD_VAR 0 3
34679: ARRAY
34680: PPUSH
34681: CALL_OW 1
34685: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
34686: LD_ADDR_VAR 0 1
34690: PUSH
34691: LD_VAR 0 1
34695: PPUSH
34696: LD_VAR 0 3
34700: PPUSH
34701: LD_VAR 0 5
34705: PPUSH
34706: CALL_OW 1
34710: ST_TO_ADDR
// result := list ;
34711: LD_ADDR_VAR 0 4
34715: PUSH
34716: LD_VAR 0 1
34720: ST_TO_ADDR
// end ;
34721: LD_VAR 0 4
34725: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
34726: LD_INT 0
34728: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
34729: LD_ADDR_VAR 0 5
34733: PUSH
34734: LD_VAR 0 1
34738: PPUSH
34739: CALL_OW 250
34743: PPUSH
34744: LD_VAR 0 1
34748: PPUSH
34749: CALL_OW 251
34753: PPUSH
34754: LD_VAR 0 2
34758: PPUSH
34759: LD_VAR 0 3
34763: PPUSH
34764: LD_VAR 0 4
34768: PPUSH
34769: CALL 35147 0 5
34773: ST_TO_ADDR
// end ;
34774: LD_VAR 0 5
34778: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
34779: LD_INT 0
34781: PPUSH
34782: PPUSH
34783: PPUSH
34784: PPUSH
// if not list or not unit then
34785: LD_VAR 0 2
34789: NOT
34790: PUSH
34791: LD_VAR 0 1
34795: NOT
34796: OR
34797: IFFALSE 34801
// exit ;
34799: GO 35142
// result := [ ] ;
34801: LD_ADDR_VAR 0 5
34805: PUSH
34806: EMPTY
34807: ST_TO_ADDR
// for i in list do
34808: LD_ADDR_VAR 0 6
34812: PUSH
34813: LD_VAR 0 2
34817: PUSH
34818: FOR_IN
34819: IFFALSE 35037
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
34821: LD_ADDR_VAR 0 8
34825: PUSH
34826: LD_VAR 0 1
34830: PPUSH
34831: LD_VAR 0 6
34835: PUSH
34836: LD_INT 1
34838: ARRAY
34839: PPUSH
34840: LD_VAR 0 6
34844: PUSH
34845: LD_INT 2
34847: ARRAY
34848: PPUSH
34849: CALL_OW 297
34853: ST_TO_ADDR
// if not Count ( result ) then
34854: LD_VAR 0 5
34858: PPUSH
34859: CALL 31431 0 1
34863: NOT
34864: IFFALSE 34897
// begin result := Join ( result , [ i , tmp ] ) ;
34866: LD_ADDR_VAR 0 5
34870: PUSH
34871: LD_VAR 0 5
34875: PPUSH
34876: LD_VAR 0 6
34880: PUSH
34881: LD_VAR 0 8
34885: PUSH
34886: EMPTY
34887: LIST
34888: LIST
34889: PPUSH
34890: CALL 67020 0 2
34894: ST_TO_ADDR
// continue ;
34895: GO 34818
// end ; if result [ result ] [ 2 ] <= tmp then
34897: LD_VAR 0 5
34901: PUSH
34902: LD_VAR 0 5
34906: ARRAY
34907: PUSH
34908: LD_INT 2
34910: ARRAY
34911: PUSH
34912: LD_VAR 0 8
34916: LESSEQUAL
34917: IFFALSE 34950
// result := Join ( result , [ i , tmp ] ) else
34919: LD_ADDR_VAR 0 5
34923: PUSH
34924: LD_VAR 0 5
34928: PPUSH
34929: LD_VAR 0 6
34933: PUSH
34934: LD_VAR 0 8
34938: PUSH
34939: EMPTY
34940: LIST
34941: LIST
34942: PPUSH
34943: CALL 67020 0 2
34947: ST_TO_ADDR
34948: GO 35035
// begin for j := 1 to Count ( result ) do
34950: LD_ADDR_VAR 0 7
34954: PUSH
34955: DOUBLE
34956: LD_INT 1
34958: DEC
34959: ST_TO_ADDR
34960: LD_VAR 0 5
34964: PPUSH
34965: CALL 31431 0 1
34969: PUSH
34970: FOR_TO
34971: IFFALSE 35033
// begin if tmp < result [ j ] [ 2 ] then
34973: LD_VAR 0 8
34977: PUSH
34978: LD_VAR 0 5
34982: PUSH
34983: LD_VAR 0 7
34987: ARRAY
34988: PUSH
34989: LD_INT 2
34991: ARRAY
34992: LESS
34993: IFFALSE 35031
// begin result := Insert ( result , j , [ i , tmp ] ) ;
34995: LD_ADDR_VAR 0 5
34999: PUSH
35000: LD_VAR 0 5
35004: PPUSH
35005: LD_VAR 0 7
35009: PPUSH
35010: LD_VAR 0 6
35014: PUSH
35015: LD_VAR 0 8
35019: PUSH
35020: EMPTY
35021: LIST
35022: LIST
35023: PPUSH
35024: CALL_OW 2
35028: ST_TO_ADDR
// break ;
35029: GO 35033
// end ; end ;
35031: GO 34970
35033: POP
35034: POP
// end ; end ;
35035: GO 34818
35037: POP
35038: POP
// if result and not asc then
35039: LD_VAR 0 5
35043: PUSH
35044: LD_VAR 0 3
35048: NOT
35049: AND
35050: IFFALSE 35067
// result := ReverseArray ( result ) ;
35052: LD_ADDR_VAR 0 5
35056: PUSH
35057: LD_VAR 0 5
35061: PPUSH
35062: CALL 62307 0 1
35066: ST_TO_ADDR
// tmp := [ ] ;
35067: LD_ADDR_VAR 0 8
35071: PUSH
35072: EMPTY
35073: ST_TO_ADDR
// if mode then
35074: LD_VAR 0 4
35078: IFFALSE 35142
// begin for i := 1 to result do
35080: LD_ADDR_VAR 0 6
35084: PUSH
35085: DOUBLE
35086: LD_INT 1
35088: DEC
35089: ST_TO_ADDR
35090: LD_VAR 0 5
35094: PUSH
35095: FOR_TO
35096: IFFALSE 35130
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
35098: LD_ADDR_VAR 0 8
35102: PUSH
35103: LD_VAR 0 8
35107: PPUSH
35108: LD_VAR 0 5
35112: PUSH
35113: LD_VAR 0 6
35117: ARRAY
35118: PUSH
35119: LD_INT 1
35121: ARRAY
35122: PPUSH
35123: CALL 67020 0 2
35127: ST_TO_ADDR
35128: GO 35095
35130: POP
35131: POP
// result := tmp ;
35132: LD_ADDR_VAR 0 5
35136: PUSH
35137: LD_VAR 0 8
35141: ST_TO_ADDR
// end ; end ;
35142: LD_VAR 0 5
35146: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
35147: LD_INT 0
35149: PPUSH
35150: PPUSH
35151: PPUSH
35152: PPUSH
// if not list then
35153: LD_VAR 0 3
35157: NOT
35158: IFFALSE 35162
// exit ;
35160: GO 35550
// result := [ ] ;
35162: LD_ADDR_VAR 0 6
35166: PUSH
35167: EMPTY
35168: ST_TO_ADDR
// for i in list do
35169: LD_ADDR_VAR 0 7
35173: PUSH
35174: LD_VAR 0 3
35178: PUSH
35179: FOR_IN
35180: IFFALSE 35382
// begin tmp := GetDistUnitXY ( i , x , y ) ;
35182: LD_ADDR_VAR 0 9
35186: PUSH
35187: LD_VAR 0 7
35191: PPUSH
35192: LD_VAR 0 1
35196: PPUSH
35197: LD_VAR 0 2
35201: PPUSH
35202: CALL_OW 297
35206: ST_TO_ADDR
// if not result then
35207: LD_VAR 0 6
35211: NOT
35212: IFFALSE 35238
// result := [ [ i , tmp ] ] else
35214: LD_ADDR_VAR 0 6
35218: PUSH
35219: LD_VAR 0 7
35223: PUSH
35224: LD_VAR 0 9
35228: PUSH
35229: EMPTY
35230: LIST
35231: LIST
35232: PUSH
35233: EMPTY
35234: LIST
35235: ST_TO_ADDR
35236: GO 35380
// begin if result [ result ] [ 2 ] < tmp then
35238: LD_VAR 0 6
35242: PUSH
35243: LD_VAR 0 6
35247: ARRAY
35248: PUSH
35249: LD_INT 2
35251: ARRAY
35252: PUSH
35253: LD_VAR 0 9
35257: LESS
35258: IFFALSE 35300
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
35260: LD_ADDR_VAR 0 6
35264: PUSH
35265: LD_VAR 0 6
35269: PPUSH
35270: LD_VAR 0 6
35274: PUSH
35275: LD_INT 1
35277: PLUS
35278: PPUSH
35279: LD_VAR 0 7
35283: PUSH
35284: LD_VAR 0 9
35288: PUSH
35289: EMPTY
35290: LIST
35291: LIST
35292: PPUSH
35293: CALL_OW 2
35297: ST_TO_ADDR
35298: GO 35380
// for j = 1 to result do
35300: LD_ADDR_VAR 0 8
35304: PUSH
35305: DOUBLE
35306: LD_INT 1
35308: DEC
35309: ST_TO_ADDR
35310: LD_VAR 0 6
35314: PUSH
35315: FOR_TO
35316: IFFALSE 35378
// begin if tmp < result [ j ] [ 2 ] then
35318: LD_VAR 0 9
35322: PUSH
35323: LD_VAR 0 6
35327: PUSH
35328: LD_VAR 0 8
35332: ARRAY
35333: PUSH
35334: LD_INT 2
35336: ARRAY
35337: LESS
35338: IFFALSE 35376
// begin result := Insert ( result , j , [ i , tmp ] ) ;
35340: LD_ADDR_VAR 0 6
35344: PUSH
35345: LD_VAR 0 6
35349: PPUSH
35350: LD_VAR 0 8
35354: PPUSH
35355: LD_VAR 0 7
35359: PUSH
35360: LD_VAR 0 9
35364: PUSH
35365: EMPTY
35366: LIST
35367: LIST
35368: PPUSH
35369: CALL_OW 2
35373: ST_TO_ADDR
// break ;
35374: GO 35378
// end ; end ;
35376: GO 35315
35378: POP
35379: POP
// end ; end ;
35380: GO 35179
35382: POP
35383: POP
// if result and not asc then
35384: LD_VAR 0 6
35388: PUSH
35389: LD_VAR 0 4
35393: NOT
35394: AND
35395: IFFALSE 35470
// begin tmp := result ;
35397: LD_ADDR_VAR 0 9
35401: PUSH
35402: LD_VAR 0 6
35406: ST_TO_ADDR
// for i = tmp downto 1 do
35407: LD_ADDR_VAR 0 7
35411: PUSH
35412: DOUBLE
35413: LD_VAR 0 9
35417: INC
35418: ST_TO_ADDR
35419: LD_INT 1
35421: PUSH
35422: FOR_DOWNTO
35423: IFFALSE 35468
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
35425: LD_ADDR_VAR 0 6
35429: PUSH
35430: LD_VAR 0 6
35434: PPUSH
35435: LD_VAR 0 9
35439: PUSH
35440: LD_VAR 0 7
35444: MINUS
35445: PUSH
35446: LD_INT 1
35448: PLUS
35449: PPUSH
35450: LD_VAR 0 9
35454: PUSH
35455: LD_VAR 0 7
35459: ARRAY
35460: PPUSH
35461: CALL_OW 1
35465: ST_TO_ADDR
35466: GO 35422
35468: POP
35469: POP
// end ; tmp := [ ] ;
35470: LD_ADDR_VAR 0 9
35474: PUSH
35475: EMPTY
35476: ST_TO_ADDR
// if mode then
35477: LD_VAR 0 5
35481: IFFALSE 35550
// begin for i = 1 to result do
35483: LD_ADDR_VAR 0 7
35487: PUSH
35488: DOUBLE
35489: LD_INT 1
35491: DEC
35492: ST_TO_ADDR
35493: LD_VAR 0 6
35497: PUSH
35498: FOR_TO
35499: IFFALSE 35538
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
35501: LD_ADDR_VAR 0 9
35505: PUSH
35506: LD_VAR 0 9
35510: PPUSH
35511: LD_VAR 0 7
35515: PPUSH
35516: LD_VAR 0 6
35520: PUSH
35521: LD_VAR 0 7
35525: ARRAY
35526: PUSH
35527: LD_INT 1
35529: ARRAY
35530: PPUSH
35531: CALL_OW 1
35535: ST_TO_ADDR
35536: GO 35498
35538: POP
35539: POP
// result := tmp ;
35540: LD_ADDR_VAR 0 6
35544: PUSH
35545: LD_VAR 0 9
35549: ST_TO_ADDR
// end ; end ;
35550: LD_VAR 0 6
35554: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
35555: LD_INT 0
35557: PPUSH
35558: PPUSH
35559: PPUSH
35560: PPUSH
35561: PPUSH
35562: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
35563: LD_ADDR_VAR 0 5
35567: PUSH
35568: LD_INT 0
35570: PUSH
35571: LD_INT 0
35573: PUSH
35574: LD_INT 0
35576: PUSH
35577: EMPTY
35578: PUSH
35579: EMPTY
35580: LIST
35581: LIST
35582: LIST
35583: LIST
35584: ST_TO_ADDR
// if not x or not y then
35585: LD_VAR 0 2
35589: NOT
35590: PUSH
35591: LD_VAR 0 3
35595: NOT
35596: OR
35597: IFFALSE 35601
// exit ;
35599: GO 37251
// if not range then
35601: LD_VAR 0 4
35605: NOT
35606: IFFALSE 35616
// range := 10 ;
35608: LD_ADDR_VAR 0 4
35612: PUSH
35613: LD_INT 10
35615: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
35616: LD_ADDR_VAR 0 8
35620: PUSH
35621: LD_INT 81
35623: PUSH
35624: LD_VAR 0 1
35628: PUSH
35629: EMPTY
35630: LIST
35631: LIST
35632: PUSH
35633: LD_INT 92
35635: PUSH
35636: LD_VAR 0 2
35640: PUSH
35641: LD_VAR 0 3
35645: PUSH
35646: LD_VAR 0 4
35650: PUSH
35651: EMPTY
35652: LIST
35653: LIST
35654: LIST
35655: LIST
35656: PUSH
35657: LD_INT 3
35659: PUSH
35660: LD_INT 21
35662: PUSH
35663: LD_INT 3
35665: PUSH
35666: EMPTY
35667: LIST
35668: LIST
35669: PUSH
35670: EMPTY
35671: LIST
35672: LIST
35673: PUSH
35674: EMPTY
35675: LIST
35676: LIST
35677: LIST
35678: PPUSH
35679: CALL_OW 69
35683: ST_TO_ADDR
// if not tmp then
35684: LD_VAR 0 8
35688: NOT
35689: IFFALSE 35693
// exit ;
35691: GO 37251
// for i in tmp do
35693: LD_ADDR_VAR 0 6
35697: PUSH
35698: LD_VAR 0 8
35702: PUSH
35703: FOR_IN
35704: IFFALSE 37226
// begin points := [ 0 , 0 , 0 ] ;
35706: LD_ADDR_VAR 0 9
35710: PUSH
35711: LD_INT 0
35713: PUSH
35714: LD_INT 0
35716: PUSH
35717: LD_INT 0
35719: PUSH
35720: EMPTY
35721: LIST
35722: LIST
35723: LIST
35724: ST_TO_ADDR
// bpoints := 1 ;
35725: LD_ADDR_VAR 0 10
35729: PUSH
35730: LD_INT 1
35732: ST_TO_ADDR
// case GetType ( i ) of unit_human :
35733: LD_VAR 0 6
35737: PPUSH
35738: CALL_OW 247
35742: PUSH
35743: LD_INT 1
35745: DOUBLE
35746: EQUAL
35747: IFTRUE 35751
35749: GO 36329
35751: POP
// begin if GetClass ( i ) = 1 then
35752: LD_VAR 0 6
35756: PPUSH
35757: CALL_OW 257
35761: PUSH
35762: LD_INT 1
35764: EQUAL
35765: IFFALSE 35786
// points := [ 10 , 5 , 3 ] ;
35767: LD_ADDR_VAR 0 9
35771: PUSH
35772: LD_INT 10
35774: PUSH
35775: LD_INT 5
35777: PUSH
35778: LD_INT 3
35780: PUSH
35781: EMPTY
35782: LIST
35783: LIST
35784: LIST
35785: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
35786: LD_VAR 0 6
35790: PPUSH
35791: CALL_OW 257
35795: PUSH
35796: LD_INT 2
35798: PUSH
35799: LD_INT 3
35801: PUSH
35802: LD_INT 4
35804: PUSH
35805: EMPTY
35806: LIST
35807: LIST
35808: LIST
35809: IN
35810: IFFALSE 35831
// points := [ 3 , 2 , 1 ] ;
35812: LD_ADDR_VAR 0 9
35816: PUSH
35817: LD_INT 3
35819: PUSH
35820: LD_INT 2
35822: PUSH
35823: LD_INT 1
35825: PUSH
35826: EMPTY
35827: LIST
35828: LIST
35829: LIST
35830: ST_TO_ADDR
// if GetClass ( i ) = 5 then
35831: LD_VAR 0 6
35835: PPUSH
35836: CALL_OW 257
35840: PUSH
35841: LD_INT 5
35843: EQUAL
35844: IFFALSE 35865
// points := [ 130 , 5 , 2 ] ;
35846: LD_ADDR_VAR 0 9
35850: PUSH
35851: LD_INT 130
35853: PUSH
35854: LD_INT 5
35856: PUSH
35857: LD_INT 2
35859: PUSH
35860: EMPTY
35861: LIST
35862: LIST
35863: LIST
35864: ST_TO_ADDR
// if GetClass ( i ) = 8 then
35865: LD_VAR 0 6
35869: PPUSH
35870: CALL_OW 257
35874: PUSH
35875: LD_INT 8
35877: EQUAL
35878: IFFALSE 35899
// points := [ 35 , 35 , 30 ] ;
35880: LD_ADDR_VAR 0 9
35884: PUSH
35885: LD_INT 35
35887: PUSH
35888: LD_INT 35
35890: PUSH
35891: LD_INT 30
35893: PUSH
35894: EMPTY
35895: LIST
35896: LIST
35897: LIST
35898: ST_TO_ADDR
// if GetClass ( i ) = 9 then
35899: LD_VAR 0 6
35903: PPUSH
35904: CALL_OW 257
35908: PUSH
35909: LD_INT 9
35911: EQUAL
35912: IFFALSE 35933
// points := [ 20 , 55 , 40 ] ;
35914: LD_ADDR_VAR 0 9
35918: PUSH
35919: LD_INT 20
35921: PUSH
35922: LD_INT 55
35924: PUSH
35925: LD_INT 40
35927: PUSH
35928: EMPTY
35929: LIST
35930: LIST
35931: LIST
35932: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
35933: LD_VAR 0 6
35937: PPUSH
35938: CALL_OW 257
35942: PUSH
35943: LD_INT 12
35945: PUSH
35946: LD_INT 16
35948: PUSH
35949: EMPTY
35950: LIST
35951: LIST
35952: IN
35953: IFFALSE 35974
// points := [ 5 , 3 , 2 ] ;
35955: LD_ADDR_VAR 0 9
35959: PUSH
35960: LD_INT 5
35962: PUSH
35963: LD_INT 3
35965: PUSH
35966: LD_INT 2
35968: PUSH
35969: EMPTY
35970: LIST
35971: LIST
35972: LIST
35973: ST_TO_ADDR
// if GetClass ( i ) = 17 then
35974: LD_VAR 0 6
35978: PPUSH
35979: CALL_OW 257
35983: PUSH
35984: LD_INT 17
35986: EQUAL
35987: IFFALSE 36008
// points := [ 100 , 50 , 75 ] ;
35989: LD_ADDR_VAR 0 9
35993: PUSH
35994: LD_INT 100
35996: PUSH
35997: LD_INT 50
35999: PUSH
36000: LD_INT 75
36002: PUSH
36003: EMPTY
36004: LIST
36005: LIST
36006: LIST
36007: ST_TO_ADDR
// if GetClass ( i ) = 15 then
36008: LD_VAR 0 6
36012: PPUSH
36013: CALL_OW 257
36017: PUSH
36018: LD_INT 15
36020: EQUAL
36021: IFFALSE 36042
// points := [ 10 , 5 , 3 ] ;
36023: LD_ADDR_VAR 0 9
36027: PUSH
36028: LD_INT 10
36030: PUSH
36031: LD_INT 5
36033: PUSH
36034: LD_INT 3
36036: PUSH
36037: EMPTY
36038: LIST
36039: LIST
36040: LIST
36041: ST_TO_ADDR
// if GetClass ( i ) = 14 then
36042: LD_VAR 0 6
36046: PPUSH
36047: CALL_OW 257
36051: PUSH
36052: LD_INT 14
36054: EQUAL
36055: IFFALSE 36076
// points := [ 10 , 0 , 0 ] ;
36057: LD_ADDR_VAR 0 9
36061: PUSH
36062: LD_INT 10
36064: PUSH
36065: LD_INT 0
36067: PUSH
36068: LD_INT 0
36070: PUSH
36071: EMPTY
36072: LIST
36073: LIST
36074: LIST
36075: ST_TO_ADDR
// if GetClass ( i ) = 11 then
36076: LD_VAR 0 6
36080: PPUSH
36081: CALL_OW 257
36085: PUSH
36086: LD_INT 11
36088: EQUAL
36089: IFFALSE 36110
// points := [ 30 , 10 , 5 ] ;
36091: LD_ADDR_VAR 0 9
36095: PUSH
36096: LD_INT 30
36098: PUSH
36099: LD_INT 10
36101: PUSH
36102: LD_INT 5
36104: PUSH
36105: EMPTY
36106: LIST
36107: LIST
36108: LIST
36109: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
36110: LD_VAR 0 1
36114: PPUSH
36115: LD_INT 5
36117: PPUSH
36118: CALL_OW 321
36122: PUSH
36123: LD_INT 2
36125: EQUAL
36126: IFFALSE 36143
// bpoints := bpoints * 1.8 ;
36128: LD_ADDR_VAR 0 10
36132: PUSH
36133: LD_VAR 0 10
36137: PUSH
36138: LD_REAL  1.80000000000000E+0000
36141: MUL
36142: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
36143: LD_VAR 0 6
36147: PPUSH
36148: CALL_OW 257
36152: PUSH
36153: LD_INT 1
36155: PUSH
36156: LD_INT 2
36158: PUSH
36159: LD_INT 3
36161: PUSH
36162: LD_INT 4
36164: PUSH
36165: EMPTY
36166: LIST
36167: LIST
36168: LIST
36169: LIST
36170: IN
36171: PUSH
36172: LD_VAR 0 1
36176: PPUSH
36177: LD_INT 51
36179: PPUSH
36180: CALL_OW 321
36184: PUSH
36185: LD_INT 2
36187: EQUAL
36188: AND
36189: IFFALSE 36206
// bpoints := bpoints * 1.2 ;
36191: LD_ADDR_VAR 0 10
36195: PUSH
36196: LD_VAR 0 10
36200: PUSH
36201: LD_REAL  1.20000000000000E+0000
36204: MUL
36205: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
36206: LD_VAR 0 6
36210: PPUSH
36211: CALL_OW 257
36215: PUSH
36216: LD_INT 5
36218: PUSH
36219: LD_INT 7
36221: PUSH
36222: LD_INT 9
36224: PUSH
36225: EMPTY
36226: LIST
36227: LIST
36228: LIST
36229: IN
36230: PUSH
36231: LD_VAR 0 1
36235: PPUSH
36236: LD_INT 52
36238: PPUSH
36239: CALL_OW 321
36243: PUSH
36244: LD_INT 2
36246: EQUAL
36247: AND
36248: IFFALSE 36265
// bpoints := bpoints * 1.5 ;
36250: LD_ADDR_VAR 0 10
36254: PUSH
36255: LD_VAR 0 10
36259: PUSH
36260: LD_REAL  1.50000000000000E+0000
36263: MUL
36264: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
36265: LD_VAR 0 1
36269: PPUSH
36270: LD_INT 66
36272: PPUSH
36273: CALL_OW 321
36277: PUSH
36278: LD_INT 2
36280: EQUAL
36281: IFFALSE 36298
// bpoints := bpoints * 1.1 ;
36283: LD_ADDR_VAR 0 10
36287: PUSH
36288: LD_VAR 0 10
36292: PUSH
36293: LD_REAL  1.10000000000000E+0000
36296: MUL
36297: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
36298: LD_ADDR_VAR 0 10
36302: PUSH
36303: LD_VAR 0 10
36307: PUSH
36308: LD_VAR 0 6
36312: PPUSH
36313: LD_INT 1
36315: PPUSH
36316: CALL_OW 259
36320: PUSH
36321: LD_REAL  1.15000000000000E+0000
36324: MUL
36325: MUL
36326: ST_TO_ADDR
// end ; unit_vehicle :
36327: GO 37155
36329: LD_INT 2
36331: DOUBLE
36332: EQUAL
36333: IFTRUE 36337
36335: GO 37143
36337: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
36338: LD_VAR 0 6
36342: PPUSH
36343: CALL_OW 264
36347: PUSH
36348: LD_INT 2
36350: PUSH
36351: LD_INT 42
36353: PUSH
36354: LD_INT 24
36356: PUSH
36357: EMPTY
36358: LIST
36359: LIST
36360: LIST
36361: IN
36362: IFFALSE 36383
// points := [ 25 , 5 , 3 ] ;
36364: LD_ADDR_VAR 0 9
36368: PUSH
36369: LD_INT 25
36371: PUSH
36372: LD_INT 5
36374: PUSH
36375: LD_INT 3
36377: PUSH
36378: EMPTY
36379: LIST
36380: LIST
36381: LIST
36382: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
36383: LD_VAR 0 6
36387: PPUSH
36388: CALL_OW 264
36392: PUSH
36393: LD_INT 4
36395: PUSH
36396: LD_INT 43
36398: PUSH
36399: LD_INT 25
36401: PUSH
36402: EMPTY
36403: LIST
36404: LIST
36405: LIST
36406: IN
36407: IFFALSE 36428
// points := [ 40 , 15 , 5 ] ;
36409: LD_ADDR_VAR 0 9
36413: PUSH
36414: LD_INT 40
36416: PUSH
36417: LD_INT 15
36419: PUSH
36420: LD_INT 5
36422: PUSH
36423: EMPTY
36424: LIST
36425: LIST
36426: LIST
36427: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
36428: LD_VAR 0 6
36432: PPUSH
36433: CALL_OW 264
36437: PUSH
36438: LD_INT 3
36440: PUSH
36441: LD_INT 23
36443: PUSH
36444: EMPTY
36445: LIST
36446: LIST
36447: IN
36448: IFFALSE 36469
// points := [ 7 , 25 , 8 ] ;
36450: LD_ADDR_VAR 0 9
36454: PUSH
36455: LD_INT 7
36457: PUSH
36458: LD_INT 25
36460: PUSH
36461: LD_INT 8
36463: PUSH
36464: EMPTY
36465: LIST
36466: LIST
36467: LIST
36468: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
36469: LD_VAR 0 6
36473: PPUSH
36474: CALL_OW 264
36478: PUSH
36479: LD_INT 5
36481: PUSH
36482: LD_INT 27
36484: PUSH
36485: LD_INT 44
36487: PUSH
36488: EMPTY
36489: LIST
36490: LIST
36491: LIST
36492: IN
36493: IFFALSE 36514
// points := [ 14 , 50 , 16 ] ;
36495: LD_ADDR_VAR 0 9
36499: PUSH
36500: LD_INT 14
36502: PUSH
36503: LD_INT 50
36505: PUSH
36506: LD_INT 16
36508: PUSH
36509: EMPTY
36510: LIST
36511: LIST
36512: LIST
36513: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
36514: LD_VAR 0 6
36518: PPUSH
36519: CALL_OW 264
36523: PUSH
36524: LD_INT 6
36526: PUSH
36527: LD_INT 46
36529: PUSH
36530: EMPTY
36531: LIST
36532: LIST
36533: IN
36534: IFFALSE 36555
// points := [ 32 , 120 , 70 ] ;
36536: LD_ADDR_VAR 0 9
36540: PUSH
36541: LD_INT 32
36543: PUSH
36544: LD_INT 120
36546: PUSH
36547: LD_INT 70
36549: PUSH
36550: EMPTY
36551: LIST
36552: LIST
36553: LIST
36554: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
36555: LD_VAR 0 6
36559: PPUSH
36560: CALL_OW 264
36564: PUSH
36565: LD_INT 7
36567: PUSH
36568: LD_INT 28
36570: PUSH
36571: LD_INT 45
36573: PUSH
36574: LD_INT 92
36576: PUSH
36577: EMPTY
36578: LIST
36579: LIST
36580: LIST
36581: LIST
36582: IN
36583: IFFALSE 36604
// points := [ 35 , 20 , 45 ] ;
36585: LD_ADDR_VAR 0 9
36589: PUSH
36590: LD_INT 35
36592: PUSH
36593: LD_INT 20
36595: PUSH
36596: LD_INT 45
36598: PUSH
36599: EMPTY
36600: LIST
36601: LIST
36602: LIST
36603: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
36604: LD_VAR 0 6
36608: PPUSH
36609: CALL_OW 264
36613: PUSH
36614: LD_INT 47
36616: PUSH
36617: EMPTY
36618: LIST
36619: IN
36620: IFFALSE 36641
// points := [ 67 , 45 , 75 ] ;
36622: LD_ADDR_VAR 0 9
36626: PUSH
36627: LD_INT 67
36629: PUSH
36630: LD_INT 45
36632: PUSH
36633: LD_INT 75
36635: PUSH
36636: EMPTY
36637: LIST
36638: LIST
36639: LIST
36640: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
36641: LD_VAR 0 6
36645: PPUSH
36646: CALL_OW 264
36650: PUSH
36651: LD_INT 26
36653: PUSH
36654: EMPTY
36655: LIST
36656: IN
36657: IFFALSE 36678
// points := [ 120 , 30 , 80 ] ;
36659: LD_ADDR_VAR 0 9
36663: PUSH
36664: LD_INT 120
36666: PUSH
36667: LD_INT 30
36669: PUSH
36670: LD_INT 80
36672: PUSH
36673: EMPTY
36674: LIST
36675: LIST
36676: LIST
36677: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
36678: LD_VAR 0 6
36682: PPUSH
36683: CALL_OW 264
36687: PUSH
36688: LD_INT 22
36690: PUSH
36691: EMPTY
36692: LIST
36693: IN
36694: IFFALSE 36715
// points := [ 40 , 1 , 1 ] ;
36696: LD_ADDR_VAR 0 9
36700: PUSH
36701: LD_INT 40
36703: PUSH
36704: LD_INT 1
36706: PUSH
36707: LD_INT 1
36709: PUSH
36710: EMPTY
36711: LIST
36712: LIST
36713: LIST
36714: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
36715: LD_VAR 0 6
36719: PPUSH
36720: CALL_OW 264
36724: PUSH
36725: LD_INT 29
36727: PUSH
36728: EMPTY
36729: LIST
36730: IN
36731: IFFALSE 36752
// points := [ 70 , 200 , 400 ] ;
36733: LD_ADDR_VAR 0 9
36737: PUSH
36738: LD_INT 70
36740: PUSH
36741: LD_INT 200
36743: PUSH
36744: LD_INT 400
36746: PUSH
36747: EMPTY
36748: LIST
36749: LIST
36750: LIST
36751: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
36752: LD_VAR 0 6
36756: PPUSH
36757: CALL_OW 264
36761: PUSH
36762: LD_INT 14
36764: PUSH
36765: LD_INT 53
36767: PUSH
36768: EMPTY
36769: LIST
36770: LIST
36771: IN
36772: IFFALSE 36793
// points := [ 40 , 10 , 20 ] ;
36774: LD_ADDR_VAR 0 9
36778: PUSH
36779: LD_INT 40
36781: PUSH
36782: LD_INT 10
36784: PUSH
36785: LD_INT 20
36787: PUSH
36788: EMPTY
36789: LIST
36790: LIST
36791: LIST
36792: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
36793: LD_VAR 0 6
36797: PPUSH
36798: CALL_OW 264
36802: PUSH
36803: LD_INT 9
36805: PUSH
36806: EMPTY
36807: LIST
36808: IN
36809: IFFALSE 36830
// points := [ 5 , 70 , 20 ] ;
36811: LD_ADDR_VAR 0 9
36815: PUSH
36816: LD_INT 5
36818: PUSH
36819: LD_INT 70
36821: PUSH
36822: LD_INT 20
36824: PUSH
36825: EMPTY
36826: LIST
36827: LIST
36828: LIST
36829: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
36830: LD_VAR 0 6
36834: PPUSH
36835: CALL_OW 264
36839: PUSH
36840: LD_INT 10
36842: PUSH
36843: EMPTY
36844: LIST
36845: IN
36846: IFFALSE 36867
// points := [ 35 , 110 , 70 ] ;
36848: LD_ADDR_VAR 0 9
36852: PUSH
36853: LD_INT 35
36855: PUSH
36856: LD_INT 110
36858: PUSH
36859: LD_INT 70
36861: PUSH
36862: EMPTY
36863: LIST
36864: LIST
36865: LIST
36866: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
36867: LD_VAR 0 6
36871: PPUSH
36872: CALL_OW 265
36876: PUSH
36877: LD_INT 25
36879: EQUAL
36880: IFFALSE 36901
// points := [ 80 , 65 , 100 ] ;
36882: LD_ADDR_VAR 0 9
36886: PUSH
36887: LD_INT 80
36889: PUSH
36890: LD_INT 65
36892: PUSH
36893: LD_INT 100
36895: PUSH
36896: EMPTY
36897: LIST
36898: LIST
36899: LIST
36900: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
36901: LD_VAR 0 6
36905: PPUSH
36906: CALL_OW 263
36910: PUSH
36911: LD_INT 1
36913: EQUAL
36914: IFFALSE 36949
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
36916: LD_ADDR_VAR 0 10
36920: PUSH
36921: LD_VAR 0 10
36925: PUSH
36926: LD_VAR 0 6
36930: PPUSH
36931: CALL_OW 311
36935: PPUSH
36936: LD_INT 3
36938: PPUSH
36939: CALL_OW 259
36943: PUSH
36944: LD_INT 4
36946: MUL
36947: MUL
36948: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
36949: LD_VAR 0 6
36953: PPUSH
36954: CALL_OW 263
36958: PUSH
36959: LD_INT 2
36961: EQUAL
36962: IFFALSE 37013
// begin j := IsControledBy ( i ) ;
36964: LD_ADDR_VAR 0 7
36968: PUSH
36969: LD_VAR 0 6
36973: PPUSH
36974: CALL_OW 312
36978: ST_TO_ADDR
// if j then
36979: LD_VAR 0 7
36983: IFFALSE 37013
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
36985: LD_ADDR_VAR 0 10
36989: PUSH
36990: LD_VAR 0 10
36994: PUSH
36995: LD_VAR 0 7
36999: PPUSH
37000: LD_INT 3
37002: PPUSH
37003: CALL_OW 259
37007: PUSH
37008: LD_INT 3
37010: MUL
37011: MUL
37012: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
37013: LD_VAR 0 6
37017: PPUSH
37018: CALL_OW 264
37022: PUSH
37023: LD_INT 5
37025: PUSH
37026: LD_INT 6
37028: PUSH
37029: LD_INT 46
37031: PUSH
37032: LD_INT 44
37034: PUSH
37035: LD_INT 47
37037: PUSH
37038: LD_INT 45
37040: PUSH
37041: LD_INT 28
37043: PUSH
37044: LD_INT 7
37046: PUSH
37047: LD_INT 27
37049: PUSH
37050: LD_INT 29
37052: PUSH
37053: EMPTY
37054: LIST
37055: LIST
37056: LIST
37057: LIST
37058: LIST
37059: LIST
37060: LIST
37061: LIST
37062: LIST
37063: LIST
37064: IN
37065: PUSH
37066: LD_VAR 0 1
37070: PPUSH
37071: LD_INT 52
37073: PPUSH
37074: CALL_OW 321
37078: PUSH
37079: LD_INT 2
37081: EQUAL
37082: AND
37083: IFFALSE 37100
// bpoints := bpoints * 1.2 ;
37085: LD_ADDR_VAR 0 10
37089: PUSH
37090: LD_VAR 0 10
37094: PUSH
37095: LD_REAL  1.20000000000000E+0000
37098: MUL
37099: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
37100: LD_VAR 0 6
37104: PPUSH
37105: CALL_OW 264
37109: PUSH
37110: LD_INT 6
37112: PUSH
37113: LD_INT 46
37115: PUSH
37116: LD_INT 47
37118: PUSH
37119: EMPTY
37120: LIST
37121: LIST
37122: LIST
37123: IN
37124: IFFALSE 37141
// bpoints := bpoints * 1.2 ;
37126: LD_ADDR_VAR 0 10
37130: PUSH
37131: LD_VAR 0 10
37135: PUSH
37136: LD_REAL  1.20000000000000E+0000
37139: MUL
37140: ST_TO_ADDR
// end ; unit_building :
37141: GO 37155
37143: LD_INT 3
37145: DOUBLE
37146: EQUAL
37147: IFTRUE 37151
37149: GO 37154
37151: POP
// ; end ;
37152: GO 37155
37154: POP
// for j = 1 to 3 do
37155: LD_ADDR_VAR 0 7
37159: PUSH
37160: DOUBLE
37161: LD_INT 1
37163: DEC
37164: ST_TO_ADDR
37165: LD_INT 3
37167: PUSH
37168: FOR_TO
37169: IFFALSE 37222
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
37171: LD_ADDR_VAR 0 5
37175: PUSH
37176: LD_VAR 0 5
37180: PPUSH
37181: LD_VAR 0 7
37185: PPUSH
37186: LD_VAR 0 5
37190: PUSH
37191: LD_VAR 0 7
37195: ARRAY
37196: PUSH
37197: LD_VAR 0 9
37201: PUSH
37202: LD_VAR 0 7
37206: ARRAY
37207: PUSH
37208: LD_VAR 0 10
37212: MUL
37213: PLUS
37214: PPUSH
37215: CALL_OW 1
37219: ST_TO_ADDR
37220: GO 37168
37222: POP
37223: POP
// end ;
37224: GO 35703
37226: POP
37227: POP
// result := Replace ( result , 4 , tmp ) ;
37228: LD_ADDR_VAR 0 5
37232: PUSH
37233: LD_VAR 0 5
37237: PPUSH
37238: LD_INT 4
37240: PPUSH
37241: LD_VAR 0 8
37245: PPUSH
37246: CALL_OW 1
37250: ST_TO_ADDR
// end ;
37251: LD_VAR 0 5
37255: RET
// export function DangerAtRange ( unit , range ) ; begin
37256: LD_INT 0
37258: PPUSH
// if not unit then
37259: LD_VAR 0 1
37263: NOT
37264: IFFALSE 37268
// exit ;
37266: GO 37313
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
37268: LD_ADDR_VAR 0 3
37272: PUSH
37273: LD_VAR 0 1
37277: PPUSH
37278: CALL_OW 255
37282: PPUSH
37283: LD_VAR 0 1
37287: PPUSH
37288: CALL_OW 250
37292: PPUSH
37293: LD_VAR 0 1
37297: PPUSH
37298: CALL_OW 251
37302: PPUSH
37303: LD_VAR 0 2
37307: PPUSH
37308: CALL 35555 0 4
37312: ST_TO_ADDR
// end ;
37313: LD_VAR 0 3
37317: RET
// export function DangerInArea ( side , area ) ; begin
37318: LD_INT 0
37320: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
37321: LD_ADDR_VAR 0 3
37325: PUSH
37326: LD_VAR 0 2
37330: PPUSH
37331: LD_INT 81
37333: PUSH
37334: LD_VAR 0 1
37338: PUSH
37339: EMPTY
37340: LIST
37341: LIST
37342: PPUSH
37343: CALL_OW 70
37347: ST_TO_ADDR
// end ;
37348: LD_VAR 0 3
37352: RET
// export function IsExtension ( b ) ; begin
37353: LD_INT 0
37355: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
37356: LD_ADDR_VAR 0 2
37360: PUSH
37361: LD_VAR 0 1
37365: PUSH
37366: LD_INT 23
37368: PUSH
37369: LD_INT 20
37371: PUSH
37372: LD_INT 22
37374: PUSH
37375: LD_INT 17
37377: PUSH
37378: LD_INT 24
37380: PUSH
37381: LD_INT 21
37383: PUSH
37384: LD_INT 19
37386: PUSH
37387: LD_INT 16
37389: PUSH
37390: LD_INT 25
37392: PUSH
37393: LD_INT 18
37395: PUSH
37396: EMPTY
37397: LIST
37398: LIST
37399: LIST
37400: LIST
37401: LIST
37402: LIST
37403: LIST
37404: LIST
37405: LIST
37406: LIST
37407: IN
37408: ST_TO_ADDR
// end ;
37409: LD_VAR 0 2
37413: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
37414: LD_INT 0
37416: PPUSH
37417: PPUSH
37418: PPUSH
// result := [ ] ;
37419: LD_ADDR_VAR 0 4
37423: PUSH
37424: EMPTY
37425: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
37426: LD_ADDR_VAR 0 5
37430: PUSH
37431: LD_VAR 0 2
37435: PPUSH
37436: LD_INT 21
37438: PUSH
37439: LD_INT 3
37441: PUSH
37442: EMPTY
37443: LIST
37444: LIST
37445: PPUSH
37446: CALL_OW 70
37450: ST_TO_ADDR
// if not tmp then
37451: LD_VAR 0 5
37455: NOT
37456: IFFALSE 37460
// exit ;
37458: GO 37524
// if checkLink then
37460: LD_VAR 0 3
37464: IFFALSE 37514
// begin for i in tmp do
37466: LD_ADDR_VAR 0 6
37470: PUSH
37471: LD_VAR 0 5
37475: PUSH
37476: FOR_IN
37477: IFFALSE 37512
// if GetBase ( i ) <> base then
37479: LD_VAR 0 6
37483: PPUSH
37484: CALL_OW 274
37488: PUSH
37489: LD_VAR 0 1
37493: NONEQUAL
37494: IFFALSE 37510
// ComLinkToBase ( base , i ) ;
37496: LD_VAR 0 1
37500: PPUSH
37501: LD_VAR 0 6
37505: PPUSH
37506: CALL_OW 169
37510: GO 37476
37512: POP
37513: POP
// end ; result := tmp ;
37514: LD_ADDR_VAR 0 4
37518: PUSH
37519: LD_VAR 0 5
37523: ST_TO_ADDR
// end ;
37524: LD_VAR 0 4
37528: RET
// export function ComComplete ( units , b ) ; var i ; begin
37529: LD_INT 0
37531: PPUSH
37532: PPUSH
// if not units then
37533: LD_VAR 0 1
37537: NOT
37538: IFFALSE 37542
// exit ;
37540: GO 37632
// for i in units do
37542: LD_ADDR_VAR 0 4
37546: PUSH
37547: LD_VAR 0 1
37551: PUSH
37552: FOR_IN
37553: IFFALSE 37630
// if BuildingStatus ( b ) = bs_build then
37555: LD_VAR 0 2
37559: PPUSH
37560: CALL_OW 461
37564: PUSH
37565: LD_INT 1
37567: EQUAL
37568: IFFALSE 37628
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
37570: LD_VAR 0 4
37574: PPUSH
37575: LD_STRING h
37577: PUSH
37578: LD_VAR 0 2
37582: PPUSH
37583: CALL_OW 250
37587: PUSH
37588: LD_VAR 0 2
37592: PPUSH
37593: CALL_OW 251
37597: PUSH
37598: LD_VAR 0 2
37602: PUSH
37603: LD_INT 0
37605: PUSH
37606: LD_INT 0
37608: PUSH
37609: LD_INT 0
37611: PUSH
37612: EMPTY
37613: LIST
37614: LIST
37615: LIST
37616: LIST
37617: LIST
37618: LIST
37619: LIST
37620: PUSH
37621: EMPTY
37622: LIST
37623: PPUSH
37624: CALL_OW 446
37628: GO 37552
37630: POP
37631: POP
// end ;
37632: LD_VAR 0 3
37636: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
37637: LD_INT 0
37639: PPUSH
37640: PPUSH
37641: PPUSH
37642: PPUSH
37643: PPUSH
37644: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
37645: LD_VAR 0 1
37649: NOT
37650: PUSH
37651: LD_VAR 0 1
37655: PPUSH
37656: CALL_OW 263
37660: PUSH
37661: LD_INT 2
37663: NONEQUAL
37664: OR
37665: IFFALSE 37669
// exit ;
37667: GO 37985
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
37669: LD_ADDR_VAR 0 6
37673: PUSH
37674: LD_INT 22
37676: PUSH
37677: LD_VAR 0 1
37681: PPUSH
37682: CALL_OW 255
37686: PUSH
37687: EMPTY
37688: LIST
37689: LIST
37690: PUSH
37691: LD_INT 2
37693: PUSH
37694: LD_INT 30
37696: PUSH
37697: LD_INT 36
37699: PUSH
37700: EMPTY
37701: LIST
37702: LIST
37703: PUSH
37704: LD_INT 34
37706: PUSH
37707: LD_INT 31
37709: PUSH
37710: EMPTY
37711: LIST
37712: LIST
37713: PUSH
37714: EMPTY
37715: LIST
37716: LIST
37717: LIST
37718: PUSH
37719: EMPTY
37720: LIST
37721: LIST
37722: PPUSH
37723: CALL_OW 69
37727: ST_TO_ADDR
// if not tmp then
37728: LD_VAR 0 6
37732: NOT
37733: IFFALSE 37737
// exit ;
37735: GO 37985
// result := [ ] ;
37737: LD_ADDR_VAR 0 2
37741: PUSH
37742: EMPTY
37743: ST_TO_ADDR
// for i in tmp do
37744: LD_ADDR_VAR 0 3
37748: PUSH
37749: LD_VAR 0 6
37753: PUSH
37754: FOR_IN
37755: IFFALSE 37826
// begin t := UnitsInside ( i ) ;
37757: LD_ADDR_VAR 0 4
37761: PUSH
37762: LD_VAR 0 3
37766: PPUSH
37767: CALL_OW 313
37771: ST_TO_ADDR
// if t then
37772: LD_VAR 0 4
37776: IFFALSE 37824
// for j in t do
37778: LD_ADDR_VAR 0 7
37782: PUSH
37783: LD_VAR 0 4
37787: PUSH
37788: FOR_IN
37789: IFFALSE 37822
// result := Replace ( result , result + 1 , j ) ;
37791: LD_ADDR_VAR 0 2
37795: PUSH
37796: LD_VAR 0 2
37800: PPUSH
37801: LD_VAR 0 2
37805: PUSH
37806: LD_INT 1
37808: PLUS
37809: PPUSH
37810: LD_VAR 0 7
37814: PPUSH
37815: CALL_OW 1
37819: ST_TO_ADDR
37820: GO 37788
37822: POP
37823: POP
// end ;
37824: GO 37754
37826: POP
37827: POP
// if not result then
37828: LD_VAR 0 2
37832: NOT
37833: IFFALSE 37837
// exit ;
37835: GO 37985
// mech := result [ 1 ] ;
37837: LD_ADDR_VAR 0 5
37841: PUSH
37842: LD_VAR 0 2
37846: PUSH
37847: LD_INT 1
37849: ARRAY
37850: ST_TO_ADDR
// if result > 1 then
37851: LD_VAR 0 2
37855: PUSH
37856: LD_INT 1
37858: GREATER
37859: IFFALSE 37971
// begin for i = 2 to result do
37861: LD_ADDR_VAR 0 3
37865: PUSH
37866: DOUBLE
37867: LD_INT 2
37869: DEC
37870: ST_TO_ADDR
37871: LD_VAR 0 2
37875: PUSH
37876: FOR_TO
37877: IFFALSE 37969
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
37879: LD_ADDR_VAR 0 4
37883: PUSH
37884: LD_VAR 0 2
37888: PUSH
37889: LD_VAR 0 3
37893: ARRAY
37894: PPUSH
37895: LD_INT 3
37897: PPUSH
37898: CALL_OW 259
37902: PUSH
37903: LD_VAR 0 2
37907: PUSH
37908: LD_VAR 0 3
37912: ARRAY
37913: PPUSH
37914: CALL_OW 432
37918: MINUS
37919: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
37920: LD_VAR 0 4
37924: PUSH
37925: LD_VAR 0 5
37929: PPUSH
37930: LD_INT 3
37932: PPUSH
37933: CALL_OW 259
37937: PUSH
37938: LD_VAR 0 5
37942: PPUSH
37943: CALL_OW 432
37947: MINUS
37948: GREATEREQUAL
37949: IFFALSE 37967
// mech := result [ i ] ;
37951: LD_ADDR_VAR 0 5
37955: PUSH
37956: LD_VAR 0 2
37960: PUSH
37961: LD_VAR 0 3
37965: ARRAY
37966: ST_TO_ADDR
// end ;
37967: GO 37876
37969: POP
37970: POP
// end ; ComLinkTo ( vehicle , mech ) ;
37971: LD_VAR 0 1
37975: PPUSH
37976: LD_VAR 0 5
37980: PPUSH
37981: CALL_OW 135
// end ;
37985: LD_VAR 0 2
37989: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
37990: LD_INT 0
37992: PPUSH
37993: PPUSH
37994: PPUSH
37995: PPUSH
37996: PPUSH
37997: PPUSH
37998: PPUSH
37999: PPUSH
38000: PPUSH
38001: PPUSH
38002: PPUSH
38003: PPUSH
38004: PPUSH
// result := [ ] ;
38005: LD_ADDR_VAR 0 7
38009: PUSH
38010: EMPTY
38011: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
38012: LD_VAR 0 1
38016: PPUSH
38017: CALL_OW 266
38021: PUSH
38022: LD_INT 0
38024: PUSH
38025: LD_INT 1
38027: PUSH
38028: EMPTY
38029: LIST
38030: LIST
38031: IN
38032: NOT
38033: IFFALSE 38037
// exit ;
38035: GO 39671
// if name then
38037: LD_VAR 0 3
38041: IFFALSE 38057
// SetBName ( base_dep , name ) ;
38043: LD_VAR 0 1
38047: PPUSH
38048: LD_VAR 0 3
38052: PPUSH
38053: CALL_OW 500
// base := GetBase ( base_dep ) ;
38057: LD_ADDR_VAR 0 15
38061: PUSH
38062: LD_VAR 0 1
38066: PPUSH
38067: CALL_OW 274
38071: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
38072: LD_ADDR_VAR 0 16
38076: PUSH
38077: LD_VAR 0 1
38081: PPUSH
38082: CALL_OW 255
38086: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
38087: LD_ADDR_VAR 0 17
38091: PUSH
38092: LD_VAR 0 1
38096: PPUSH
38097: CALL_OW 248
38101: ST_TO_ADDR
// if sources then
38102: LD_VAR 0 5
38106: IFFALSE 38153
// for i = 1 to 3 do
38108: LD_ADDR_VAR 0 8
38112: PUSH
38113: DOUBLE
38114: LD_INT 1
38116: DEC
38117: ST_TO_ADDR
38118: LD_INT 3
38120: PUSH
38121: FOR_TO
38122: IFFALSE 38151
// AddResourceType ( base , i , sources [ i ] ) ;
38124: LD_VAR 0 15
38128: PPUSH
38129: LD_VAR 0 8
38133: PPUSH
38134: LD_VAR 0 5
38138: PUSH
38139: LD_VAR 0 8
38143: ARRAY
38144: PPUSH
38145: CALL_OW 276
38149: GO 38121
38151: POP
38152: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
38153: LD_ADDR_VAR 0 18
38157: PUSH
38158: LD_VAR 0 15
38162: PPUSH
38163: LD_VAR 0 2
38167: PPUSH
38168: LD_INT 1
38170: PPUSH
38171: CALL 37414 0 3
38175: ST_TO_ADDR
// InitHc ;
38176: CALL_OW 19
// InitUc ;
38180: CALL_OW 18
// uc_side := side ;
38184: LD_ADDR_OWVAR 20
38188: PUSH
38189: LD_VAR 0 16
38193: ST_TO_ADDR
// uc_nation := nation ;
38194: LD_ADDR_OWVAR 21
38198: PUSH
38199: LD_VAR 0 17
38203: ST_TO_ADDR
// if buildings then
38204: LD_VAR 0 18
38208: IFFALSE 39530
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
38210: LD_ADDR_VAR 0 19
38214: PUSH
38215: LD_VAR 0 18
38219: PPUSH
38220: LD_INT 2
38222: PUSH
38223: LD_INT 30
38225: PUSH
38226: LD_INT 29
38228: PUSH
38229: EMPTY
38230: LIST
38231: LIST
38232: PUSH
38233: LD_INT 30
38235: PUSH
38236: LD_INT 30
38238: PUSH
38239: EMPTY
38240: LIST
38241: LIST
38242: PUSH
38243: EMPTY
38244: LIST
38245: LIST
38246: LIST
38247: PPUSH
38248: CALL_OW 72
38252: ST_TO_ADDR
// if tmp then
38253: LD_VAR 0 19
38257: IFFALSE 38305
// for i in tmp do
38259: LD_ADDR_VAR 0 8
38263: PUSH
38264: LD_VAR 0 19
38268: PUSH
38269: FOR_IN
38270: IFFALSE 38303
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
38272: LD_VAR 0 8
38276: PPUSH
38277: CALL_OW 250
38281: PPUSH
38282: LD_VAR 0 8
38286: PPUSH
38287: CALL_OW 251
38291: PPUSH
38292: LD_VAR 0 16
38296: PPUSH
38297: CALL_OW 441
38301: GO 38269
38303: POP
38304: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
38305: LD_VAR 0 18
38309: PPUSH
38310: LD_INT 2
38312: PUSH
38313: LD_INT 30
38315: PUSH
38316: LD_INT 32
38318: PUSH
38319: EMPTY
38320: LIST
38321: LIST
38322: PUSH
38323: LD_INT 30
38325: PUSH
38326: LD_INT 33
38328: PUSH
38329: EMPTY
38330: LIST
38331: LIST
38332: PUSH
38333: EMPTY
38334: LIST
38335: LIST
38336: LIST
38337: PPUSH
38338: CALL_OW 72
38342: IFFALSE 38430
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
38344: LD_ADDR_VAR 0 8
38348: PUSH
38349: LD_VAR 0 18
38353: PPUSH
38354: LD_INT 2
38356: PUSH
38357: LD_INT 30
38359: PUSH
38360: LD_INT 32
38362: PUSH
38363: EMPTY
38364: LIST
38365: LIST
38366: PUSH
38367: LD_INT 30
38369: PUSH
38370: LD_INT 33
38372: PUSH
38373: EMPTY
38374: LIST
38375: LIST
38376: PUSH
38377: EMPTY
38378: LIST
38379: LIST
38380: LIST
38381: PPUSH
38382: CALL_OW 72
38386: PUSH
38387: FOR_IN
38388: IFFALSE 38428
// begin if not GetBWeapon ( i ) then
38390: LD_VAR 0 8
38394: PPUSH
38395: CALL_OW 269
38399: NOT
38400: IFFALSE 38426
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
38402: LD_VAR 0 8
38406: PPUSH
38407: LD_VAR 0 8
38411: PPUSH
38412: LD_VAR 0 2
38416: PPUSH
38417: CALL 39676 0 2
38421: PPUSH
38422: CALL_OW 431
// end ;
38426: GO 38387
38428: POP
38429: POP
// end ; for i = 1 to personel do
38430: LD_ADDR_VAR 0 8
38434: PUSH
38435: DOUBLE
38436: LD_INT 1
38438: DEC
38439: ST_TO_ADDR
38440: LD_VAR 0 6
38444: PUSH
38445: FOR_TO
38446: IFFALSE 39510
// begin if i > 4 then
38448: LD_VAR 0 8
38452: PUSH
38453: LD_INT 4
38455: GREATER
38456: IFFALSE 38460
// break ;
38458: GO 39510
// case i of 1 :
38460: LD_VAR 0 8
38464: PUSH
38465: LD_INT 1
38467: DOUBLE
38468: EQUAL
38469: IFTRUE 38473
38471: GO 38553
38473: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
38474: LD_ADDR_VAR 0 12
38478: PUSH
38479: LD_VAR 0 18
38483: PPUSH
38484: LD_INT 22
38486: PUSH
38487: LD_VAR 0 16
38491: PUSH
38492: EMPTY
38493: LIST
38494: LIST
38495: PUSH
38496: LD_INT 58
38498: PUSH
38499: EMPTY
38500: LIST
38501: PUSH
38502: LD_INT 2
38504: PUSH
38505: LD_INT 30
38507: PUSH
38508: LD_INT 32
38510: PUSH
38511: EMPTY
38512: LIST
38513: LIST
38514: PUSH
38515: LD_INT 30
38517: PUSH
38518: LD_INT 4
38520: PUSH
38521: EMPTY
38522: LIST
38523: LIST
38524: PUSH
38525: LD_INT 30
38527: PUSH
38528: LD_INT 5
38530: PUSH
38531: EMPTY
38532: LIST
38533: LIST
38534: PUSH
38535: EMPTY
38536: LIST
38537: LIST
38538: LIST
38539: LIST
38540: PUSH
38541: EMPTY
38542: LIST
38543: LIST
38544: LIST
38545: PPUSH
38546: CALL_OW 72
38550: ST_TO_ADDR
38551: GO 38775
38553: LD_INT 2
38555: DOUBLE
38556: EQUAL
38557: IFTRUE 38561
38559: GO 38623
38561: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
38562: LD_ADDR_VAR 0 12
38566: PUSH
38567: LD_VAR 0 18
38571: PPUSH
38572: LD_INT 22
38574: PUSH
38575: LD_VAR 0 16
38579: PUSH
38580: EMPTY
38581: LIST
38582: LIST
38583: PUSH
38584: LD_INT 2
38586: PUSH
38587: LD_INT 30
38589: PUSH
38590: LD_INT 0
38592: PUSH
38593: EMPTY
38594: LIST
38595: LIST
38596: PUSH
38597: LD_INT 30
38599: PUSH
38600: LD_INT 1
38602: PUSH
38603: EMPTY
38604: LIST
38605: LIST
38606: PUSH
38607: EMPTY
38608: LIST
38609: LIST
38610: LIST
38611: PUSH
38612: EMPTY
38613: LIST
38614: LIST
38615: PPUSH
38616: CALL_OW 72
38620: ST_TO_ADDR
38621: GO 38775
38623: LD_INT 3
38625: DOUBLE
38626: EQUAL
38627: IFTRUE 38631
38629: GO 38693
38631: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
38632: LD_ADDR_VAR 0 12
38636: PUSH
38637: LD_VAR 0 18
38641: PPUSH
38642: LD_INT 22
38644: PUSH
38645: LD_VAR 0 16
38649: PUSH
38650: EMPTY
38651: LIST
38652: LIST
38653: PUSH
38654: LD_INT 2
38656: PUSH
38657: LD_INT 30
38659: PUSH
38660: LD_INT 2
38662: PUSH
38663: EMPTY
38664: LIST
38665: LIST
38666: PUSH
38667: LD_INT 30
38669: PUSH
38670: LD_INT 3
38672: PUSH
38673: EMPTY
38674: LIST
38675: LIST
38676: PUSH
38677: EMPTY
38678: LIST
38679: LIST
38680: LIST
38681: PUSH
38682: EMPTY
38683: LIST
38684: LIST
38685: PPUSH
38686: CALL_OW 72
38690: ST_TO_ADDR
38691: GO 38775
38693: LD_INT 4
38695: DOUBLE
38696: EQUAL
38697: IFTRUE 38701
38699: GO 38774
38701: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
38702: LD_ADDR_VAR 0 12
38706: PUSH
38707: LD_VAR 0 18
38711: PPUSH
38712: LD_INT 22
38714: PUSH
38715: LD_VAR 0 16
38719: PUSH
38720: EMPTY
38721: LIST
38722: LIST
38723: PUSH
38724: LD_INT 2
38726: PUSH
38727: LD_INT 30
38729: PUSH
38730: LD_INT 6
38732: PUSH
38733: EMPTY
38734: LIST
38735: LIST
38736: PUSH
38737: LD_INT 30
38739: PUSH
38740: LD_INT 7
38742: PUSH
38743: EMPTY
38744: LIST
38745: LIST
38746: PUSH
38747: LD_INT 30
38749: PUSH
38750: LD_INT 8
38752: PUSH
38753: EMPTY
38754: LIST
38755: LIST
38756: PUSH
38757: EMPTY
38758: LIST
38759: LIST
38760: LIST
38761: LIST
38762: PUSH
38763: EMPTY
38764: LIST
38765: LIST
38766: PPUSH
38767: CALL_OW 72
38771: ST_TO_ADDR
38772: GO 38775
38774: POP
// if i = 1 then
38775: LD_VAR 0 8
38779: PUSH
38780: LD_INT 1
38782: EQUAL
38783: IFFALSE 38894
// begin tmp := [ ] ;
38785: LD_ADDR_VAR 0 19
38789: PUSH
38790: EMPTY
38791: ST_TO_ADDR
// for j in f do
38792: LD_ADDR_VAR 0 9
38796: PUSH
38797: LD_VAR 0 12
38801: PUSH
38802: FOR_IN
38803: IFFALSE 38876
// if GetBType ( j ) = b_bunker then
38805: LD_VAR 0 9
38809: PPUSH
38810: CALL_OW 266
38814: PUSH
38815: LD_INT 32
38817: EQUAL
38818: IFFALSE 38845
// tmp := Insert ( tmp , 1 , j ) else
38820: LD_ADDR_VAR 0 19
38824: PUSH
38825: LD_VAR 0 19
38829: PPUSH
38830: LD_INT 1
38832: PPUSH
38833: LD_VAR 0 9
38837: PPUSH
38838: CALL_OW 2
38842: ST_TO_ADDR
38843: GO 38874
// tmp := Insert ( tmp , tmp + 1 , j ) ;
38845: LD_ADDR_VAR 0 19
38849: PUSH
38850: LD_VAR 0 19
38854: PPUSH
38855: LD_VAR 0 19
38859: PUSH
38860: LD_INT 1
38862: PLUS
38863: PPUSH
38864: LD_VAR 0 9
38868: PPUSH
38869: CALL_OW 2
38873: ST_TO_ADDR
38874: GO 38802
38876: POP
38877: POP
// if tmp then
38878: LD_VAR 0 19
38882: IFFALSE 38894
// f := tmp ;
38884: LD_ADDR_VAR 0 12
38888: PUSH
38889: LD_VAR 0 19
38893: ST_TO_ADDR
// end ; x := personel [ i ] ;
38894: LD_ADDR_VAR 0 13
38898: PUSH
38899: LD_VAR 0 6
38903: PUSH
38904: LD_VAR 0 8
38908: ARRAY
38909: ST_TO_ADDR
// if x = - 1 then
38910: LD_VAR 0 13
38914: PUSH
38915: LD_INT 1
38917: NEG
38918: EQUAL
38919: IFFALSE 39128
// begin for j in f do
38921: LD_ADDR_VAR 0 9
38925: PUSH
38926: LD_VAR 0 12
38930: PUSH
38931: FOR_IN
38932: IFFALSE 39124
// repeat InitHc ;
38934: CALL_OW 19
// if GetBType ( j ) = b_barracks then
38938: LD_VAR 0 9
38942: PPUSH
38943: CALL_OW 266
38947: PUSH
38948: LD_INT 5
38950: EQUAL
38951: IFFALSE 39021
// begin if UnitsInside ( j ) < 3 then
38953: LD_VAR 0 9
38957: PPUSH
38958: CALL_OW 313
38962: PUSH
38963: LD_INT 3
38965: LESS
38966: IFFALSE 39002
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
38968: LD_INT 0
38970: PPUSH
38971: LD_INT 5
38973: PUSH
38974: LD_INT 8
38976: PUSH
38977: LD_INT 9
38979: PUSH
38980: EMPTY
38981: LIST
38982: LIST
38983: LIST
38984: PUSH
38985: LD_VAR 0 17
38989: ARRAY
38990: PPUSH
38991: LD_VAR 0 4
38995: PPUSH
38996: CALL_OW 380
39000: GO 39019
// PrepareHuman ( false , i , skill ) ;
39002: LD_INT 0
39004: PPUSH
39005: LD_VAR 0 8
39009: PPUSH
39010: LD_VAR 0 4
39014: PPUSH
39015: CALL_OW 380
// end else
39019: GO 39038
// PrepareHuman ( false , i , skill ) ;
39021: LD_INT 0
39023: PPUSH
39024: LD_VAR 0 8
39028: PPUSH
39029: LD_VAR 0 4
39033: PPUSH
39034: CALL_OW 380
// un := CreateHuman ;
39038: LD_ADDR_VAR 0 14
39042: PUSH
39043: CALL_OW 44
39047: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39048: LD_ADDR_VAR 0 7
39052: PUSH
39053: LD_VAR 0 7
39057: PPUSH
39058: LD_INT 1
39060: PPUSH
39061: LD_VAR 0 14
39065: PPUSH
39066: CALL_OW 2
39070: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
39071: LD_VAR 0 14
39075: PPUSH
39076: LD_VAR 0 9
39080: PPUSH
39081: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
39085: LD_VAR 0 9
39089: PPUSH
39090: CALL_OW 313
39094: PUSH
39095: LD_INT 6
39097: EQUAL
39098: PUSH
39099: LD_VAR 0 9
39103: PPUSH
39104: CALL_OW 266
39108: PUSH
39109: LD_INT 32
39111: PUSH
39112: LD_INT 31
39114: PUSH
39115: EMPTY
39116: LIST
39117: LIST
39118: IN
39119: OR
39120: IFFALSE 38934
39122: GO 38931
39124: POP
39125: POP
// end else
39126: GO 39508
// for j = 1 to x do
39128: LD_ADDR_VAR 0 9
39132: PUSH
39133: DOUBLE
39134: LD_INT 1
39136: DEC
39137: ST_TO_ADDR
39138: LD_VAR 0 13
39142: PUSH
39143: FOR_TO
39144: IFFALSE 39506
// begin InitHc ;
39146: CALL_OW 19
// if not f then
39150: LD_VAR 0 12
39154: NOT
39155: IFFALSE 39244
// begin PrepareHuman ( false , i , skill ) ;
39157: LD_INT 0
39159: PPUSH
39160: LD_VAR 0 8
39164: PPUSH
39165: LD_VAR 0 4
39169: PPUSH
39170: CALL_OW 380
// un := CreateHuman ;
39174: LD_ADDR_VAR 0 14
39178: PUSH
39179: CALL_OW 44
39183: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39184: LD_ADDR_VAR 0 7
39188: PUSH
39189: LD_VAR 0 7
39193: PPUSH
39194: LD_INT 1
39196: PPUSH
39197: LD_VAR 0 14
39201: PPUSH
39202: CALL_OW 2
39206: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39207: LD_VAR 0 14
39211: PPUSH
39212: LD_VAR 0 1
39216: PPUSH
39217: CALL_OW 250
39221: PPUSH
39222: LD_VAR 0 1
39226: PPUSH
39227: CALL_OW 251
39231: PPUSH
39232: LD_INT 10
39234: PPUSH
39235: LD_INT 0
39237: PPUSH
39238: CALL_OW 50
// continue ;
39242: GO 39143
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
39244: LD_VAR 0 12
39248: PUSH
39249: LD_INT 1
39251: ARRAY
39252: PPUSH
39253: CALL_OW 313
39257: PUSH
39258: LD_VAR 0 12
39262: PUSH
39263: LD_INT 1
39265: ARRAY
39266: PPUSH
39267: CALL_OW 266
39271: PUSH
39272: LD_INT 32
39274: PUSH
39275: LD_INT 31
39277: PUSH
39278: EMPTY
39279: LIST
39280: LIST
39281: IN
39282: AND
39283: PUSH
39284: LD_VAR 0 12
39288: PUSH
39289: LD_INT 1
39291: ARRAY
39292: PPUSH
39293: CALL_OW 313
39297: PUSH
39298: LD_INT 6
39300: EQUAL
39301: OR
39302: IFFALSE 39322
// f := Delete ( f , 1 ) ;
39304: LD_ADDR_VAR 0 12
39308: PUSH
39309: LD_VAR 0 12
39313: PPUSH
39314: LD_INT 1
39316: PPUSH
39317: CALL_OW 3
39321: ST_TO_ADDR
// if not f then
39322: LD_VAR 0 12
39326: NOT
39327: IFFALSE 39345
// begin x := x + 2 ;
39329: LD_ADDR_VAR 0 13
39333: PUSH
39334: LD_VAR 0 13
39338: PUSH
39339: LD_INT 2
39341: PLUS
39342: ST_TO_ADDR
// continue ;
39343: GO 39143
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
39345: LD_VAR 0 12
39349: PUSH
39350: LD_INT 1
39352: ARRAY
39353: PPUSH
39354: CALL_OW 266
39358: PUSH
39359: LD_INT 5
39361: EQUAL
39362: IFFALSE 39436
// begin if UnitsInside ( f [ 1 ] ) < 3 then
39364: LD_VAR 0 12
39368: PUSH
39369: LD_INT 1
39371: ARRAY
39372: PPUSH
39373: CALL_OW 313
39377: PUSH
39378: LD_INT 3
39380: LESS
39381: IFFALSE 39417
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39383: LD_INT 0
39385: PPUSH
39386: LD_INT 5
39388: PUSH
39389: LD_INT 8
39391: PUSH
39392: LD_INT 9
39394: PUSH
39395: EMPTY
39396: LIST
39397: LIST
39398: LIST
39399: PUSH
39400: LD_VAR 0 17
39404: ARRAY
39405: PPUSH
39406: LD_VAR 0 4
39410: PPUSH
39411: CALL_OW 380
39415: GO 39434
// PrepareHuman ( false , i , skill ) ;
39417: LD_INT 0
39419: PPUSH
39420: LD_VAR 0 8
39424: PPUSH
39425: LD_VAR 0 4
39429: PPUSH
39430: CALL_OW 380
// end else
39434: GO 39453
// PrepareHuman ( false , i , skill ) ;
39436: LD_INT 0
39438: PPUSH
39439: LD_VAR 0 8
39443: PPUSH
39444: LD_VAR 0 4
39448: PPUSH
39449: CALL_OW 380
// un := CreateHuman ;
39453: LD_ADDR_VAR 0 14
39457: PUSH
39458: CALL_OW 44
39462: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39463: LD_ADDR_VAR 0 7
39467: PUSH
39468: LD_VAR 0 7
39472: PPUSH
39473: LD_INT 1
39475: PPUSH
39476: LD_VAR 0 14
39480: PPUSH
39481: CALL_OW 2
39485: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
39486: LD_VAR 0 14
39490: PPUSH
39491: LD_VAR 0 12
39495: PUSH
39496: LD_INT 1
39498: ARRAY
39499: PPUSH
39500: CALL_OW 52
// end ;
39504: GO 39143
39506: POP
39507: POP
// end ;
39508: GO 38445
39510: POP
39511: POP
// result := result ^ buildings ;
39512: LD_ADDR_VAR 0 7
39516: PUSH
39517: LD_VAR 0 7
39521: PUSH
39522: LD_VAR 0 18
39526: ADD
39527: ST_TO_ADDR
// end else
39528: GO 39671
// begin for i = 1 to personel do
39530: LD_ADDR_VAR 0 8
39534: PUSH
39535: DOUBLE
39536: LD_INT 1
39538: DEC
39539: ST_TO_ADDR
39540: LD_VAR 0 6
39544: PUSH
39545: FOR_TO
39546: IFFALSE 39669
// begin if i > 4 then
39548: LD_VAR 0 8
39552: PUSH
39553: LD_INT 4
39555: GREATER
39556: IFFALSE 39560
// break ;
39558: GO 39669
// x := personel [ i ] ;
39560: LD_ADDR_VAR 0 13
39564: PUSH
39565: LD_VAR 0 6
39569: PUSH
39570: LD_VAR 0 8
39574: ARRAY
39575: ST_TO_ADDR
// if x = - 1 then
39576: LD_VAR 0 13
39580: PUSH
39581: LD_INT 1
39583: NEG
39584: EQUAL
39585: IFFALSE 39589
// continue ;
39587: GO 39545
// PrepareHuman ( false , i , skill ) ;
39589: LD_INT 0
39591: PPUSH
39592: LD_VAR 0 8
39596: PPUSH
39597: LD_VAR 0 4
39601: PPUSH
39602: CALL_OW 380
// un := CreateHuman ;
39606: LD_ADDR_VAR 0 14
39610: PUSH
39611: CALL_OW 44
39615: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39616: LD_VAR 0 14
39620: PPUSH
39621: LD_VAR 0 1
39625: PPUSH
39626: CALL_OW 250
39630: PPUSH
39631: LD_VAR 0 1
39635: PPUSH
39636: CALL_OW 251
39640: PPUSH
39641: LD_INT 10
39643: PPUSH
39644: LD_INT 0
39646: PPUSH
39647: CALL_OW 50
// result := result ^ un ;
39651: LD_ADDR_VAR 0 7
39655: PUSH
39656: LD_VAR 0 7
39660: PUSH
39661: LD_VAR 0 14
39665: ADD
39666: ST_TO_ADDR
// end ;
39667: GO 39545
39669: POP
39670: POP
// end ; end ;
39671: LD_VAR 0 7
39675: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
39676: LD_INT 0
39678: PPUSH
39679: PPUSH
39680: PPUSH
39681: PPUSH
39682: PPUSH
39683: PPUSH
39684: PPUSH
39685: PPUSH
39686: PPUSH
39687: PPUSH
39688: PPUSH
39689: PPUSH
39690: PPUSH
39691: PPUSH
39692: PPUSH
39693: PPUSH
// result := false ;
39694: LD_ADDR_VAR 0 3
39698: PUSH
39699: LD_INT 0
39701: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
39702: LD_VAR 0 1
39706: NOT
39707: PUSH
39708: LD_VAR 0 1
39712: PPUSH
39713: CALL_OW 266
39717: PUSH
39718: LD_INT 32
39720: PUSH
39721: LD_INT 33
39723: PUSH
39724: EMPTY
39725: LIST
39726: LIST
39727: IN
39728: NOT
39729: OR
39730: IFFALSE 39734
// exit ;
39732: GO 40843
// nat := GetNation ( tower ) ;
39734: LD_ADDR_VAR 0 12
39738: PUSH
39739: LD_VAR 0 1
39743: PPUSH
39744: CALL_OW 248
39748: ST_TO_ADDR
// side := GetSide ( tower ) ;
39749: LD_ADDR_VAR 0 16
39753: PUSH
39754: LD_VAR 0 1
39758: PPUSH
39759: CALL_OW 255
39763: ST_TO_ADDR
// x := GetX ( tower ) ;
39764: LD_ADDR_VAR 0 10
39768: PUSH
39769: LD_VAR 0 1
39773: PPUSH
39774: CALL_OW 250
39778: ST_TO_ADDR
// y := GetY ( tower ) ;
39779: LD_ADDR_VAR 0 11
39783: PUSH
39784: LD_VAR 0 1
39788: PPUSH
39789: CALL_OW 251
39793: ST_TO_ADDR
// if not x or not y then
39794: LD_VAR 0 10
39798: NOT
39799: PUSH
39800: LD_VAR 0 11
39804: NOT
39805: OR
39806: IFFALSE 39810
// exit ;
39808: GO 40843
// weapon := 0 ;
39810: LD_ADDR_VAR 0 18
39814: PUSH
39815: LD_INT 0
39817: ST_TO_ADDR
// fac_list := [ ] ;
39818: LD_ADDR_VAR 0 17
39822: PUSH
39823: EMPTY
39824: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
39825: LD_ADDR_VAR 0 6
39829: PUSH
39830: LD_VAR 0 1
39834: PPUSH
39835: CALL_OW 274
39839: PPUSH
39840: LD_VAR 0 2
39844: PPUSH
39845: LD_INT 0
39847: PPUSH
39848: CALL 37414 0 3
39852: PPUSH
39853: LD_INT 30
39855: PUSH
39856: LD_INT 3
39858: PUSH
39859: EMPTY
39860: LIST
39861: LIST
39862: PPUSH
39863: CALL_OW 72
39867: ST_TO_ADDR
// if not factories then
39868: LD_VAR 0 6
39872: NOT
39873: IFFALSE 39877
// exit ;
39875: GO 40843
// for i in factories do
39877: LD_ADDR_VAR 0 8
39881: PUSH
39882: LD_VAR 0 6
39886: PUSH
39887: FOR_IN
39888: IFFALSE 39913
// fac_list := fac_list union AvailableWeaponList ( i ) ;
39890: LD_ADDR_VAR 0 17
39894: PUSH
39895: LD_VAR 0 17
39899: PUSH
39900: LD_VAR 0 8
39904: PPUSH
39905: CALL_OW 478
39909: UNION
39910: ST_TO_ADDR
39911: GO 39887
39913: POP
39914: POP
// if not fac_list then
39915: LD_VAR 0 17
39919: NOT
39920: IFFALSE 39924
// exit ;
39922: GO 40843
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
39924: LD_ADDR_VAR 0 5
39928: PUSH
39929: LD_INT 4
39931: PUSH
39932: LD_INT 5
39934: PUSH
39935: LD_INT 9
39937: PUSH
39938: LD_INT 10
39940: PUSH
39941: LD_INT 6
39943: PUSH
39944: LD_INT 7
39946: PUSH
39947: LD_INT 11
39949: PUSH
39950: EMPTY
39951: LIST
39952: LIST
39953: LIST
39954: LIST
39955: LIST
39956: LIST
39957: LIST
39958: PUSH
39959: LD_INT 27
39961: PUSH
39962: LD_INT 28
39964: PUSH
39965: LD_INT 26
39967: PUSH
39968: LD_INT 30
39970: PUSH
39971: EMPTY
39972: LIST
39973: LIST
39974: LIST
39975: LIST
39976: PUSH
39977: LD_INT 43
39979: PUSH
39980: LD_INT 44
39982: PUSH
39983: LD_INT 46
39985: PUSH
39986: LD_INT 45
39988: PUSH
39989: LD_INT 47
39991: PUSH
39992: LD_INT 49
39994: PUSH
39995: EMPTY
39996: LIST
39997: LIST
39998: LIST
39999: LIST
40000: LIST
40001: LIST
40002: PUSH
40003: EMPTY
40004: LIST
40005: LIST
40006: LIST
40007: PUSH
40008: LD_VAR 0 12
40012: ARRAY
40013: ST_TO_ADDR
// list := list isect fac_list ;
40014: LD_ADDR_VAR 0 5
40018: PUSH
40019: LD_VAR 0 5
40023: PUSH
40024: LD_VAR 0 17
40028: ISECT
40029: ST_TO_ADDR
// if not list then
40030: LD_VAR 0 5
40034: NOT
40035: IFFALSE 40039
// exit ;
40037: GO 40843
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
40039: LD_VAR 0 12
40043: PUSH
40044: LD_INT 3
40046: EQUAL
40047: PUSH
40048: LD_INT 49
40050: PUSH
40051: LD_VAR 0 5
40055: IN
40056: AND
40057: PUSH
40058: LD_INT 31
40060: PPUSH
40061: LD_VAR 0 16
40065: PPUSH
40066: CALL_OW 321
40070: PUSH
40071: LD_INT 2
40073: EQUAL
40074: AND
40075: IFFALSE 40135
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
40077: LD_INT 22
40079: PUSH
40080: LD_VAR 0 16
40084: PUSH
40085: EMPTY
40086: LIST
40087: LIST
40088: PUSH
40089: LD_INT 35
40091: PUSH
40092: LD_INT 49
40094: PUSH
40095: EMPTY
40096: LIST
40097: LIST
40098: PUSH
40099: LD_INT 91
40101: PUSH
40102: LD_VAR 0 1
40106: PUSH
40107: LD_INT 10
40109: PUSH
40110: EMPTY
40111: LIST
40112: LIST
40113: LIST
40114: PUSH
40115: EMPTY
40116: LIST
40117: LIST
40118: LIST
40119: PPUSH
40120: CALL_OW 69
40124: NOT
40125: IFFALSE 40135
// weapon := ru_time_lapser ;
40127: LD_ADDR_VAR 0 18
40131: PUSH
40132: LD_INT 49
40134: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
40135: LD_VAR 0 12
40139: PUSH
40140: LD_INT 1
40142: PUSH
40143: LD_INT 2
40145: PUSH
40146: EMPTY
40147: LIST
40148: LIST
40149: IN
40150: PUSH
40151: LD_INT 11
40153: PUSH
40154: LD_VAR 0 5
40158: IN
40159: PUSH
40160: LD_INT 30
40162: PUSH
40163: LD_VAR 0 5
40167: IN
40168: OR
40169: AND
40170: PUSH
40171: LD_INT 6
40173: PPUSH
40174: LD_VAR 0 16
40178: PPUSH
40179: CALL_OW 321
40183: PUSH
40184: LD_INT 2
40186: EQUAL
40187: AND
40188: IFFALSE 40353
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
40190: LD_INT 22
40192: PUSH
40193: LD_VAR 0 16
40197: PUSH
40198: EMPTY
40199: LIST
40200: LIST
40201: PUSH
40202: LD_INT 2
40204: PUSH
40205: LD_INT 35
40207: PUSH
40208: LD_INT 11
40210: PUSH
40211: EMPTY
40212: LIST
40213: LIST
40214: PUSH
40215: LD_INT 35
40217: PUSH
40218: LD_INT 30
40220: PUSH
40221: EMPTY
40222: LIST
40223: LIST
40224: PUSH
40225: EMPTY
40226: LIST
40227: LIST
40228: LIST
40229: PUSH
40230: LD_INT 91
40232: PUSH
40233: LD_VAR 0 1
40237: PUSH
40238: LD_INT 18
40240: PUSH
40241: EMPTY
40242: LIST
40243: LIST
40244: LIST
40245: PUSH
40246: EMPTY
40247: LIST
40248: LIST
40249: LIST
40250: PPUSH
40251: CALL_OW 69
40255: NOT
40256: PUSH
40257: LD_INT 22
40259: PUSH
40260: LD_VAR 0 16
40264: PUSH
40265: EMPTY
40266: LIST
40267: LIST
40268: PUSH
40269: LD_INT 2
40271: PUSH
40272: LD_INT 30
40274: PUSH
40275: LD_INT 32
40277: PUSH
40278: EMPTY
40279: LIST
40280: LIST
40281: PUSH
40282: LD_INT 30
40284: PUSH
40285: LD_INT 33
40287: PUSH
40288: EMPTY
40289: LIST
40290: LIST
40291: PUSH
40292: EMPTY
40293: LIST
40294: LIST
40295: LIST
40296: PUSH
40297: LD_INT 91
40299: PUSH
40300: LD_VAR 0 1
40304: PUSH
40305: LD_INT 12
40307: PUSH
40308: EMPTY
40309: LIST
40310: LIST
40311: LIST
40312: PUSH
40313: EMPTY
40314: LIST
40315: LIST
40316: LIST
40317: PUSH
40318: EMPTY
40319: LIST
40320: PPUSH
40321: CALL_OW 69
40325: PUSH
40326: LD_INT 2
40328: GREATER
40329: AND
40330: IFFALSE 40353
// weapon := [ us_radar , ar_radar ] [ nat ] ;
40332: LD_ADDR_VAR 0 18
40336: PUSH
40337: LD_INT 11
40339: PUSH
40340: LD_INT 30
40342: PUSH
40343: EMPTY
40344: LIST
40345: LIST
40346: PUSH
40347: LD_VAR 0 12
40351: ARRAY
40352: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
40353: LD_VAR 0 18
40357: NOT
40358: PUSH
40359: LD_INT 40
40361: PPUSH
40362: LD_VAR 0 16
40366: PPUSH
40367: CALL_OW 321
40371: PUSH
40372: LD_INT 2
40374: EQUAL
40375: AND
40376: PUSH
40377: LD_INT 7
40379: PUSH
40380: LD_VAR 0 5
40384: IN
40385: PUSH
40386: LD_INT 28
40388: PUSH
40389: LD_VAR 0 5
40393: IN
40394: OR
40395: PUSH
40396: LD_INT 45
40398: PUSH
40399: LD_VAR 0 5
40403: IN
40404: OR
40405: AND
40406: IFFALSE 40660
// begin hex := GetHexInfo ( x , y ) ;
40408: LD_ADDR_VAR 0 4
40412: PUSH
40413: LD_VAR 0 10
40417: PPUSH
40418: LD_VAR 0 11
40422: PPUSH
40423: CALL_OW 546
40427: ST_TO_ADDR
// if hex [ 1 ] then
40428: LD_VAR 0 4
40432: PUSH
40433: LD_INT 1
40435: ARRAY
40436: IFFALSE 40440
// exit ;
40438: GO 40843
// height := hex [ 2 ] ;
40440: LD_ADDR_VAR 0 15
40444: PUSH
40445: LD_VAR 0 4
40449: PUSH
40450: LD_INT 2
40452: ARRAY
40453: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
40454: LD_ADDR_VAR 0 14
40458: PUSH
40459: LD_INT 0
40461: PUSH
40462: LD_INT 2
40464: PUSH
40465: LD_INT 3
40467: PUSH
40468: LD_INT 5
40470: PUSH
40471: EMPTY
40472: LIST
40473: LIST
40474: LIST
40475: LIST
40476: ST_TO_ADDR
// for i in tmp do
40477: LD_ADDR_VAR 0 8
40481: PUSH
40482: LD_VAR 0 14
40486: PUSH
40487: FOR_IN
40488: IFFALSE 40658
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
40490: LD_ADDR_VAR 0 9
40494: PUSH
40495: LD_VAR 0 10
40499: PPUSH
40500: LD_VAR 0 8
40504: PPUSH
40505: LD_INT 5
40507: PPUSH
40508: CALL_OW 272
40512: PUSH
40513: LD_VAR 0 11
40517: PPUSH
40518: LD_VAR 0 8
40522: PPUSH
40523: LD_INT 5
40525: PPUSH
40526: CALL_OW 273
40530: PUSH
40531: EMPTY
40532: LIST
40533: LIST
40534: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
40535: LD_VAR 0 9
40539: PUSH
40540: LD_INT 1
40542: ARRAY
40543: PPUSH
40544: LD_VAR 0 9
40548: PUSH
40549: LD_INT 2
40551: ARRAY
40552: PPUSH
40553: CALL_OW 488
40557: IFFALSE 40656
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
40559: LD_ADDR_VAR 0 4
40563: PUSH
40564: LD_VAR 0 9
40568: PUSH
40569: LD_INT 1
40571: ARRAY
40572: PPUSH
40573: LD_VAR 0 9
40577: PUSH
40578: LD_INT 2
40580: ARRAY
40581: PPUSH
40582: CALL_OW 546
40586: ST_TO_ADDR
// if hex [ 1 ] then
40587: LD_VAR 0 4
40591: PUSH
40592: LD_INT 1
40594: ARRAY
40595: IFFALSE 40599
// continue ;
40597: GO 40487
// h := hex [ 2 ] ;
40599: LD_ADDR_VAR 0 13
40603: PUSH
40604: LD_VAR 0 4
40608: PUSH
40609: LD_INT 2
40611: ARRAY
40612: ST_TO_ADDR
// if h + 7 < height then
40613: LD_VAR 0 13
40617: PUSH
40618: LD_INT 7
40620: PLUS
40621: PUSH
40622: LD_VAR 0 15
40626: LESS
40627: IFFALSE 40656
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
40629: LD_ADDR_VAR 0 18
40633: PUSH
40634: LD_INT 7
40636: PUSH
40637: LD_INT 28
40639: PUSH
40640: LD_INT 45
40642: PUSH
40643: EMPTY
40644: LIST
40645: LIST
40646: LIST
40647: PUSH
40648: LD_VAR 0 12
40652: ARRAY
40653: ST_TO_ADDR
// break ;
40654: GO 40658
// end ; end ; end ;
40656: GO 40487
40658: POP
40659: POP
// end ; if not weapon then
40660: LD_VAR 0 18
40664: NOT
40665: IFFALSE 40725
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
40667: LD_ADDR_VAR 0 5
40671: PUSH
40672: LD_VAR 0 5
40676: PUSH
40677: LD_INT 11
40679: PUSH
40680: LD_INT 30
40682: PUSH
40683: LD_INT 49
40685: PUSH
40686: EMPTY
40687: LIST
40688: LIST
40689: LIST
40690: DIFF
40691: ST_TO_ADDR
// if not list then
40692: LD_VAR 0 5
40696: NOT
40697: IFFALSE 40701
// exit ;
40699: GO 40843
// weapon := list [ rand ( 1 , list ) ] ;
40701: LD_ADDR_VAR 0 18
40705: PUSH
40706: LD_VAR 0 5
40710: PUSH
40711: LD_INT 1
40713: PPUSH
40714: LD_VAR 0 5
40718: PPUSH
40719: CALL_OW 12
40723: ARRAY
40724: ST_TO_ADDR
// end ; if weapon then
40725: LD_VAR 0 18
40729: IFFALSE 40843
// begin tmp := CostOfWeapon ( weapon ) ;
40731: LD_ADDR_VAR 0 14
40735: PUSH
40736: LD_VAR 0 18
40740: PPUSH
40741: CALL_OW 451
40745: ST_TO_ADDR
// j := GetBase ( tower ) ;
40746: LD_ADDR_VAR 0 9
40750: PUSH
40751: LD_VAR 0 1
40755: PPUSH
40756: CALL_OW 274
40760: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
40761: LD_VAR 0 9
40765: PPUSH
40766: LD_INT 1
40768: PPUSH
40769: CALL_OW 275
40773: PUSH
40774: LD_VAR 0 14
40778: PUSH
40779: LD_INT 1
40781: ARRAY
40782: GREATEREQUAL
40783: PUSH
40784: LD_VAR 0 9
40788: PPUSH
40789: LD_INT 2
40791: PPUSH
40792: CALL_OW 275
40796: PUSH
40797: LD_VAR 0 14
40801: PUSH
40802: LD_INT 2
40804: ARRAY
40805: GREATEREQUAL
40806: AND
40807: PUSH
40808: LD_VAR 0 9
40812: PPUSH
40813: LD_INT 3
40815: PPUSH
40816: CALL_OW 275
40820: PUSH
40821: LD_VAR 0 14
40825: PUSH
40826: LD_INT 3
40828: ARRAY
40829: GREATEREQUAL
40830: AND
40831: IFFALSE 40843
// result := weapon ;
40833: LD_ADDR_VAR 0 3
40837: PUSH
40838: LD_VAR 0 18
40842: ST_TO_ADDR
// end ; end ;
40843: LD_VAR 0 3
40847: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
40848: LD_INT 0
40850: PPUSH
40851: PPUSH
// result := true ;
40852: LD_ADDR_VAR 0 3
40856: PUSH
40857: LD_INT 1
40859: ST_TO_ADDR
// if array1 = array2 then
40860: LD_VAR 0 1
40864: PUSH
40865: LD_VAR 0 2
40869: EQUAL
40870: IFFALSE 40930
// begin for i = 1 to array1 do
40872: LD_ADDR_VAR 0 4
40876: PUSH
40877: DOUBLE
40878: LD_INT 1
40880: DEC
40881: ST_TO_ADDR
40882: LD_VAR 0 1
40886: PUSH
40887: FOR_TO
40888: IFFALSE 40926
// if array1 [ i ] <> array2 [ i ] then
40890: LD_VAR 0 1
40894: PUSH
40895: LD_VAR 0 4
40899: ARRAY
40900: PUSH
40901: LD_VAR 0 2
40905: PUSH
40906: LD_VAR 0 4
40910: ARRAY
40911: NONEQUAL
40912: IFFALSE 40924
// begin result := false ;
40914: LD_ADDR_VAR 0 3
40918: PUSH
40919: LD_INT 0
40921: ST_TO_ADDR
// break ;
40922: GO 40926
// end ;
40924: GO 40887
40926: POP
40927: POP
// end else
40928: GO 40938
// result := false ;
40930: LD_ADDR_VAR 0 3
40934: PUSH
40935: LD_INT 0
40937: ST_TO_ADDR
// end ;
40938: LD_VAR 0 3
40942: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
40943: LD_INT 0
40945: PPUSH
40946: PPUSH
// if not array1 or not array2 then
40947: LD_VAR 0 1
40951: NOT
40952: PUSH
40953: LD_VAR 0 2
40957: NOT
40958: OR
40959: IFFALSE 40963
// exit ;
40961: GO 41027
// result := true ;
40963: LD_ADDR_VAR 0 3
40967: PUSH
40968: LD_INT 1
40970: ST_TO_ADDR
// for i = 1 to array1 do
40971: LD_ADDR_VAR 0 4
40975: PUSH
40976: DOUBLE
40977: LD_INT 1
40979: DEC
40980: ST_TO_ADDR
40981: LD_VAR 0 1
40985: PUSH
40986: FOR_TO
40987: IFFALSE 41025
// if array1 [ i ] <> array2 [ i ] then
40989: LD_VAR 0 1
40993: PUSH
40994: LD_VAR 0 4
40998: ARRAY
40999: PUSH
41000: LD_VAR 0 2
41004: PUSH
41005: LD_VAR 0 4
41009: ARRAY
41010: NONEQUAL
41011: IFFALSE 41023
// begin result := false ;
41013: LD_ADDR_VAR 0 3
41017: PUSH
41018: LD_INT 0
41020: ST_TO_ADDR
// break ;
41021: GO 41025
// end ;
41023: GO 40986
41025: POP
41026: POP
// end ;
41027: LD_VAR 0 3
41031: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
41032: LD_INT 0
41034: PPUSH
41035: PPUSH
41036: PPUSH
// pom := GetBase ( fac ) ;
41037: LD_ADDR_VAR 0 5
41041: PUSH
41042: LD_VAR 0 1
41046: PPUSH
41047: CALL_OW 274
41051: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
41052: LD_ADDR_VAR 0 4
41056: PUSH
41057: LD_VAR 0 2
41061: PUSH
41062: LD_INT 1
41064: ARRAY
41065: PPUSH
41066: LD_VAR 0 2
41070: PUSH
41071: LD_INT 2
41073: ARRAY
41074: PPUSH
41075: LD_VAR 0 2
41079: PUSH
41080: LD_INT 3
41082: ARRAY
41083: PPUSH
41084: LD_VAR 0 2
41088: PUSH
41089: LD_INT 4
41091: ARRAY
41092: PPUSH
41093: CALL_OW 449
41097: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41098: LD_ADDR_VAR 0 3
41102: PUSH
41103: LD_VAR 0 5
41107: PPUSH
41108: LD_INT 1
41110: PPUSH
41111: CALL_OW 275
41115: PUSH
41116: LD_VAR 0 4
41120: PUSH
41121: LD_INT 1
41123: ARRAY
41124: GREATEREQUAL
41125: PUSH
41126: LD_VAR 0 5
41130: PPUSH
41131: LD_INT 2
41133: PPUSH
41134: CALL_OW 275
41138: PUSH
41139: LD_VAR 0 4
41143: PUSH
41144: LD_INT 2
41146: ARRAY
41147: GREATEREQUAL
41148: AND
41149: PUSH
41150: LD_VAR 0 5
41154: PPUSH
41155: LD_INT 3
41157: PPUSH
41158: CALL_OW 275
41162: PUSH
41163: LD_VAR 0 4
41167: PUSH
41168: LD_INT 3
41170: ARRAY
41171: GREATEREQUAL
41172: AND
41173: ST_TO_ADDR
// end ;
41174: LD_VAR 0 3
41178: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
41179: LD_INT 0
41181: PPUSH
41182: PPUSH
41183: PPUSH
41184: PPUSH
// pom := GetBase ( building ) ;
41185: LD_ADDR_VAR 0 3
41189: PUSH
41190: LD_VAR 0 1
41194: PPUSH
41195: CALL_OW 274
41199: ST_TO_ADDR
// if not pom then
41200: LD_VAR 0 3
41204: NOT
41205: IFFALSE 41209
// exit ;
41207: GO 41379
// btype := GetBType ( building ) ;
41209: LD_ADDR_VAR 0 5
41213: PUSH
41214: LD_VAR 0 1
41218: PPUSH
41219: CALL_OW 266
41223: ST_TO_ADDR
// if btype = b_armoury then
41224: LD_VAR 0 5
41228: PUSH
41229: LD_INT 4
41231: EQUAL
41232: IFFALSE 41242
// btype := b_barracks ;
41234: LD_ADDR_VAR 0 5
41238: PUSH
41239: LD_INT 5
41241: ST_TO_ADDR
// if btype = b_depot then
41242: LD_VAR 0 5
41246: PUSH
41247: LD_INT 0
41249: EQUAL
41250: IFFALSE 41260
// btype := b_warehouse ;
41252: LD_ADDR_VAR 0 5
41256: PUSH
41257: LD_INT 1
41259: ST_TO_ADDR
// if btype = b_workshop then
41260: LD_VAR 0 5
41264: PUSH
41265: LD_INT 2
41267: EQUAL
41268: IFFALSE 41278
// btype := b_factory ;
41270: LD_ADDR_VAR 0 5
41274: PUSH
41275: LD_INT 3
41277: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41278: LD_ADDR_VAR 0 4
41282: PUSH
41283: LD_VAR 0 5
41287: PPUSH
41288: LD_VAR 0 1
41292: PPUSH
41293: CALL_OW 248
41297: PPUSH
41298: CALL_OW 450
41302: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41303: LD_ADDR_VAR 0 2
41307: PUSH
41308: LD_VAR 0 3
41312: PPUSH
41313: LD_INT 1
41315: PPUSH
41316: CALL_OW 275
41320: PUSH
41321: LD_VAR 0 4
41325: PUSH
41326: LD_INT 1
41328: ARRAY
41329: GREATEREQUAL
41330: PUSH
41331: LD_VAR 0 3
41335: PPUSH
41336: LD_INT 2
41338: PPUSH
41339: CALL_OW 275
41343: PUSH
41344: LD_VAR 0 4
41348: PUSH
41349: LD_INT 2
41351: ARRAY
41352: GREATEREQUAL
41353: AND
41354: PUSH
41355: LD_VAR 0 3
41359: PPUSH
41360: LD_INT 3
41362: PPUSH
41363: CALL_OW 275
41367: PUSH
41368: LD_VAR 0 4
41372: PUSH
41373: LD_INT 3
41375: ARRAY
41376: GREATEREQUAL
41377: AND
41378: ST_TO_ADDR
// end ;
41379: LD_VAR 0 2
41383: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
41384: LD_INT 0
41386: PPUSH
41387: PPUSH
41388: PPUSH
// pom := GetBase ( building ) ;
41389: LD_ADDR_VAR 0 4
41393: PUSH
41394: LD_VAR 0 1
41398: PPUSH
41399: CALL_OW 274
41403: ST_TO_ADDR
// if not pom then
41404: LD_VAR 0 4
41408: NOT
41409: IFFALSE 41413
// exit ;
41411: GO 41514
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41413: LD_ADDR_VAR 0 5
41417: PUSH
41418: LD_VAR 0 2
41422: PPUSH
41423: LD_VAR 0 1
41427: PPUSH
41428: CALL_OW 248
41432: PPUSH
41433: CALL_OW 450
41437: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41438: LD_ADDR_VAR 0 3
41442: PUSH
41443: LD_VAR 0 4
41447: PPUSH
41448: LD_INT 1
41450: PPUSH
41451: CALL_OW 275
41455: PUSH
41456: LD_VAR 0 5
41460: PUSH
41461: LD_INT 1
41463: ARRAY
41464: GREATEREQUAL
41465: PUSH
41466: LD_VAR 0 4
41470: PPUSH
41471: LD_INT 2
41473: PPUSH
41474: CALL_OW 275
41478: PUSH
41479: LD_VAR 0 5
41483: PUSH
41484: LD_INT 2
41486: ARRAY
41487: GREATEREQUAL
41488: AND
41489: PUSH
41490: LD_VAR 0 4
41494: PPUSH
41495: LD_INT 3
41497: PPUSH
41498: CALL_OW 275
41502: PUSH
41503: LD_VAR 0 5
41507: PUSH
41508: LD_INT 3
41510: ARRAY
41511: GREATEREQUAL
41512: AND
41513: ST_TO_ADDR
// end ;
41514: LD_VAR 0 3
41518: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
41519: LD_INT 0
41521: PPUSH
41522: PPUSH
41523: PPUSH
41524: PPUSH
41525: PPUSH
41526: PPUSH
41527: PPUSH
41528: PPUSH
41529: PPUSH
41530: PPUSH
41531: PPUSH
// result := false ;
41532: LD_ADDR_VAR 0 8
41536: PUSH
41537: LD_INT 0
41539: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
41540: LD_VAR 0 5
41544: NOT
41545: PUSH
41546: LD_VAR 0 1
41550: NOT
41551: OR
41552: PUSH
41553: LD_VAR 0 2
41557: NOT
41558: OR
41559: PUSH
41560: LD_VAR 0 3
41564: NOT
41565: OR
41566: IFFALSE 41570
// exit ;
41568: GO 42384
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
41570: LD_ADDR_VAR 0 14
41574: PUSH
41575: LD_VAR 0 1
41579: PPUSH
41580: LD_VAR 0 2
41584: PPUSH
41585: LD_VAR 0 3
41589: PPUSH
41590: LD_VAR 0 4
41594: PPUSH
41595: LD_VAR 0 5
41599: PUSH
41600: LD_INT 1
41602: ARRAY
41603: PPUSH
41604: CALL_OW 248
41608: PPUSH
41609: LD_INT 0
41611: PPUSH
41612: CALL 43637 0 6
41616: ST_TO_ADDR
// if not hexes then
41617: LD_VAR 0 14
41621: NOT
41622: IFFALSE 41626
// exit ;
41624: GO 42384
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
41626: LD_ADDR_VAR 0 17
41630: PUSH
41631: LD_VAR 0 5
41635: PPUSH
41636: LD_INT 22
41638: PUSH
41639: LD_VAR 0 13
41643: PPUSH
41644: CALL_OW 255
41648: PUSH
41649: EMPTY
41650: LIST
41651: LIST
41652: PUSH
41653: LD_INT 2
41655: PUSH
41656: LD_INT 30
41658: PUSH
41659: LD_INT 0
41661: PUSH
41662: EMPTY
41663: LIST
41664: LIST
41665: PUSH
41666: LD_INT 30
41668: PUSH
41669: LD_INT 1
41671: PUSH
41672: EMPTY
41673: LIST
41674: LIST
41675: PUSH
41676: EMPTY
41677: LIST
41678: LIST
41679: LIST
41680: PUSH
41681: EMPTY
41682: LIST
41683: LIST
41684: PPUSH
41685: CALL_OW 72
41689: ST_TO_ADDR
// for i = 1 to hexes do
41690: LD_ADDR_VAR 0 9
41694: PUSH
41695: DOUBLE
41696: LD_INT 1
41698: DEC
41699: ST_TO_ADDR
41700: LD_VAR 0 14
41704: PUSH
41705: FOR_TO
41706: IFFALSE 42382
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41708: LD_ADDR_VAR 0 13
41712: PUSH
41713: LD_VAR 0 14
41717: PUSH
41718: LD_VAR 0 9
41722: ARRAY
41723: PUSH
41724: LD_INT 1
41726: ARRAY
41727: PPUSH
41728: LD_VAR 0 14
41732: PUSH
41733: LD_VAR 0 9
41737: ARRAY
41738: PUSH
41739: LD_INT 2
41741: ARRAY
41742: PPUSH
41743: CALL_OW 428
41747: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
41748: LD_VAR 0 14
41752: PUSH
41753: LD_VAR 0 9
41757: ARRAY
41758: PUSH
41759: LD_INT 1
41761: ARRAY
41762: PPUSH
41763: LD_VAR 0 14
41767: PUSH
41768: LD_VAR 0 9
41772: ARRAY
41773: PUSH
41774: LD_INT 2
41776: ARRAY
41777: PPUSH
41778: CALL_OW 351
41782: PUSH
41783: LD_VAR 0 14
41787: PUSH
41788: LD_VAR 0 9
41792: ARRAY
41793: PUSH
41794: LD_INT 1
41796: ARRAY
41797: PPUSH
41798: LD_VAR 0 14
41802: PUSH
41803: LD_VAR 0 9
41807: ARRAY
41808: PUSH
41809: LD_INT 2
41811: ARRAY
41812: PPUSH
41813: CALL_OW 488
41817: NOT
41818: OR
41819: PUSH
41820: LD_VAR 0 13
41824: PPUSH
41825: CALL_OW 247
41829: PUSH
41830: LD_INT 3
41832: EQUAL
41833: OR
41834: IFFALSE 41840
// exit ;
41836: POP
41837: POP
41838: GO 42384
// if not tmp then
41840: LD_VAR 0 13
41844: NOT
41845: IFFALSE 41849
// continue ;
41847: GO 41705
// result := true ;
41849: LD_ADDR_VAR 0 8
41853: PUSH
41854: LD_INT 1
41856: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
41857: LD_VAR 0 6
41861: PUSH
41862: LD_VAR 0 13
41866: PPUSH
41867: CALL_OW 247
41871: PUSH
41872: LD_INT 2
41874: EQUAL
41875: AND
41876: PUSH
41877: LD_VAR 0 13
41881: PPUSH
41882: CALL_OW 263
41886: PUSH
41887: LD_INT 1
41889: EQUAL
41890: AND
41891: IFFALSE 42055
// begin if IsDrivenBy ( tmp ) then
41893: LD_VAR 0 13
41897: PPUSH
41898: CALL_OW 311
41902: IFFALSE 41906
// continue ;
41904: GO 41705
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
41906: LD_VAR 0 6
41910: PPUSH
41911: LD_INT 3
41913: PUSH
41914: LD_INT 60
41916: PUSH
41917: EMPTY
41918: LIST
41919: PUSH
41920: EMPTY
41921: LIST
41922: LIST
41923: PUSH
41924: LD_INT 3
41926: PUSH
41927: LD_INT 55
41929: PUSH
41930: EMPTY
41931: LIST
41932: PUSH
41933: EMPTY
41934: LIST
41935: LIST
41936: PUSH
41937: EMPTY
41938: LIST
41939: LIST
41940: PPUSH
41941: CALL_OW 72
41945: IFFALSE 42053
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
41947: LD_ADDR_VAR 0 18
41951: PUSH
41952: LD_VAR 0 6
41956: PPUSH
41957: LD_INT 3
41959: PUSH
41960: LD_INT 60
41962: PUSH
41963: EMPTY
41964: LIST
41965: PUSH
41966: EMPTY
41967: LIST
41968: LIST
41969: PUSH
41970: LD_INT 3
41972: PUSH
41973: LD_INT 55
41975: PUSH
41976: EMPTY
41977: LIST
41978: PUSH
41979: EMPTY
41980: LIST
41981: LIST
41982: PUSH
41983: EMPTY
41984: LIST
41985: LIST
41986: PPUSH
41987: CALL_OW 72
41991: PUSH
41992: LD_INT 1
41994: ARRAY
41995: ST_TO_ADDR
// if IsInUnit ( driver ) then
41996: LD_VAR 0 18
42000: PPUSH
42001: CALL_OW 310
42005: IFFALSE 42016
// ComExit ( driver ) ;
42007: LD_VAR 0 18
42011: PPUSH
42012: CALL 67418 0 1
// AddComEnterUnit ( driver , tmp ) ;
42016: LD_VAR 0 18
42020: PPUSH
42021: LD_VAR 0 13
42025: PPUSH
42026: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
42030: LD_VAR 0 18
42034: PPUSH
42035: LD_VAR 0 7
42039: PPUSH
42040: CALL_OW 173
// AddComExitVehicle ( driver ) ;
42044: LD_VAR 0 18
42048: PPUSH
42049: CALL_OW 181
// end ; continue ;
42053: GO 41705
// end ; if not cleaners or not tmp in cleaners then
42055: LD_VAR 0 6
42059: NOT
42060: PUSH
42061: LD_VAR 0 13
42065: PUSH
42066: LD_VAR 0 6
42070: IN
42071: NOT
42072: OR
42073: IFFALSE 42380
// begin if dep then
42075: LD_VAR 0 17
42079: IFFALSE 42215
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
42081: LD_ADDR_VAR 0 16
42085: PUSH
42086: LD_VAR 0 17
42090: PUSH
42091: LD_INT 1
42093: ARRAY
42094: PPUSH
42095: CALL_OW 250
42099: PPUSH
42100: LD_VAR 0 17
42104: PUSH
42105: LD_INT 1
42107: ARRAY
42108: PPUSH
42109: CALL_OW 254
42113: PPUSH
42114: LD_INT 5
42116: PPUSH
42117: CALL_OW 272
42121: PUSH
42122: LD_VAR 0 17
42126: PUSH
42127: LD_INT 1
42129: ARRAY
42130: PPUSH
42131: CALL_OW 251
42135: PPUSH
42136: LD_VAR 0 17
42140: PUSH
42141: LD_INT 1
42143: ARRAY
42144: PPUSH
42145: CALL_OW 254
42149: PPUSH
42150: LD_INT 5
42152: PPUSH
42153: CALL_OW 273
42157: PUSH
42158: EMPTY
42159: LIST
42160: LIST
42161: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
42162: LD_VAR 0 16
42166: PUSH
42167: LD_INT 1
42169: ARRAY
42170: PPUSH
42171: LD_VAR 0 16
42175: PUSH
42176: LD_INT 2
42178: ARRAY
42179: PPUSH
42180: CALL_OW 488
42184: IFFALSE 42215
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
42186: LD_VAR 0 13
42190: PPUSH
42191: LD_VAR 0 16
42195: PUSH
42196: LD_INT 1
42198: ARRAY
42199: PPUSH
42200: LD_VAR 0 16
42204: PUSH
42205: LD_INT 2
42207: ARRAY
42208: PPUSH
42209: CALL_OW 111
// continue ;
42213: GO 41705
// end ; end ; r := GetDir ( tmp ) ;
42215: LD_ADDR_VAR 0 15
42219: PUSH
42220: LD_VAR 0 13
42224: PPUSH
42225: CALL_OW 254
42229: ST_TO_ADDR
// if r = 5 then
42230: LD_VAR 0 15
42234: PUSH
42235: LD_INT 5
42237: EQUAL
42238: IFFALSE 42248
// r := 0 ;
42240: LD_ADDR_VAR 0 15
42244: PUSH
42245: LD_INT 0
42247: ST_TO_ADDR
// for j = r to 5 do
42248: LD_ADDR_VAR 0 10
42252: PUSH
42253: DOUBLE
42254: LD_VAR 0 15
42258: DEC
42259: ST_TO_ADDR
42260: LD_INT 5
42262: PUSH
42263: FOR_TO
42264: IFFALSE 42378
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
42266: LD_ADDR_VAR 0 11
42270: PUSH
42271: LD_VAR 0 13
42275: PPUSH
42276: CALL_OW 250
42280: PPUSH
42281: LD_VAR 0 10
42285: PPUSH
42286: LD_INT 2
42288: PPUSH
42289: CALL_OW 272
42293: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
42294: LD_ADDR_VAR 0 12
42298: PUSH
42299: LD_VAR 0 13
42303: PPUSH
42304: CALL_OW 251
42308: PPUSH
42309: LD_VAR 0 10
42313: PPUSH
42314: LD_INT 2
42316: PPUSH
42317: CALL_OW 273
42321: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
42322: LD_VAR 0 11
42326: PPUSH
42327: LD_VAR 0 12
42331: PPUSH
42332: CALL_OW 488
42336: PUSH
42337: LD_VAR 0 11
42341: PPUSH
42342: LD_VAR 0 12
42346: PPUSH
42347: CALL_OW 428
42351: NOT
42352: AND
42353: IFFALSE 42376
// begin ComMoveXY ( tmp , _x , _y ) ;
42355: LD_VAR 0 13
42359: PPUSH
42360: LD_VAR 0 11
42364: PPUSH
42365: LD_VAR 0 12
42369: PPUSH
42370: CALL_OW 111
// break ;
42374: GO 42378
// end ; end ;
42376: GO 42263
42378: POP
42379: POP
// end ; end ;
42380: GO 41705
42382: POP
42383: POP
// end ;
42384: LD_VAR 0 8
42388: RET
// export function BuildingTechInvented ( side , btype ) ; begin
42389: LD_INT 0
42391: PPUSH
// result := true ;
42392: LD_ADDR_VAR 0 3
42396: PUSH
42397: LD_INT 1
42399: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
42400: LD_VAR 0 2
42404: PUSH
42405: LD_INT 24
42407: DOUBLE
42408: EQUAL
42409: IFTRUE 42419
42411: LD_INT 33
42413: DOUBLE
42414: EQUAL
42415: IFTRUE 42419
42417: GO 42444
42419: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
42420: LD_ADDR_VAR 0 3
42424: PUSH
42425: LD_INT 32
42427: PPUSH
42428: LD_VAR 0 1
42432: PPUSH
42433: CALL_OW 321
42437: PUSH
42438: LD_INT 2
42440: EQUAL
42441: ST_TO_ADDR
42442: GO 42760
42444: LD_INT 20
42446: DOUBLE
42447: EQUAL
42448: IFTRUE 42452
42450: GO 42477
42452: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
42453: LD_ADDR_VAR 0 3
42457: PUSH
42458: LD_INT 6
42460: PPUSH
42461: LD_VAR 0 1
42465: PPUSH
42466: CALL_OW 321
42470: PUSH
42471: LD_INT 2
42473: EQUAL
42474: ST_TO_ADDR
42475: GO 42760
42477: LD_INT 22
42479: DOUBLE
42480: EQUAL
42481: IFTRUE 42491
42483: LD_INT 36
42485: DOUBLE
42486: EQUAL
42487: IFTRUE 42491
42489: GO 42516
42491: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
42492: LD_ADDR_VAR 0 3
42496: PUSH
42497: LD_INT 15
42499: PPUSH
42500: LD_VAR 0 1
42504: PPUSH
42505: CALL_OW 321
42509: PUSH
42510: LD_INT 2
42512: EQUAL
42513: ST_TO_ADDR
42514: GO 42760
42516: LD_INT 30
42518: DOUBLE
42519: EQUAL
42520: IFTRUE 42524
42522: GO 42549
42524: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
42525: LD_ADDR_VAR 0 3
42529: PUSH
42530: LD_INT 20
42532: PPUSH
42533: LD_VAR 0 1
42537: PPUSH
42538: CALL_OW 321
42542: PUSH
42543: LD_INT 2
42545: EQUAL
42546: ST_TO_ADDR
42547: GO 42760
42549: LD_INT 28
42551: DOUBLE
42552: EQUAL
42553: IFTRUE 42563
42555: LD_INT 21
42557: DOUBLE
42558: EQUAL
42559: IFTRUE 42563
42561: GO 42588
42563: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
42564: LD_ADDR_VAR 0 3
42568: PUSH
42569: LD_INT 21
42571: PPUSH
42572: LD_VAR 0 1
42576: PPUSH
42577: CALL_OW 321
42581: PUSH
42582: LD_INT 2
42584: EQUAL
42585: ST_TO_ADDR
42586: GO 42760
42588: LD_INT 16
42590: DOUBLE
42591: EQUAL
42592: IFTRUE 42596
42594: GO 42621
42596: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
42597: LD_ADDR_VAR 0 3
42601: PUSH
42602: LD_INT 84
42604: PPUSH
42605: LD_VAR 0 1
42609: PPUSH
42610: CALL_OW 321
42614: PUSH
42615: LD_INT 2
42617: EQUAL
42618: ST_TO_ADDR
42619: GO 42760
42621: LD_INT 19
42623: DOUBLE
42624: EQUAL
42625: IFTRUE 42635
42627: LD_INT 23
42629: DOUBLE
42630: EQUAL
42631: IFTRUE 42635
42633: GO 42660
42635: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
42636: LD_ADDR_VAR 0 3
42640: PUSH
42641: LD_INT 83
42643: PPUSH
42644: LD_VAR 0 1
42648: PPUSH
42649: CALL_OW 321
42653: PUSH
42654: LD_INT 2
42656: EQUAL
42657: ST_TO_ADDR
42658: GO 42760
42660: LD_INT 17
42662: DOUBLE
42663: EQUAL
42664: IFTRUE 42668
42666: GO 42693
42668: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
42669: LD_ADDR_VAR 0 3
42673: PUSH
42674: LD_INT 39
42676: PPUSH
42677: LD_VAR 0 1
42681: PPUSH
42682: CALL_OW 321
42686: PUSH
42687: LD_INT 2
42689: EQUAL
42690: ST_TO_ADDR
42691: GO 42760
42693: LD_INT 18
42695: DOUBLE
42696: EQUAL
42697: IFTRUE 42701
42699: GO 42726
42701: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
42702: LD_ADDR_VAR 0 3
42706: PUSH
42707: LD_INT 40
42709: PPUSH
42710: LD_VAR 0 1
42714: PPUSH
42715: CALL_OW 321
42719: PUSH
42720: LD_INT 2
42722: EQUAL
42723: ST_TO_ADDR
42724: GO 42760
42726: LD_INT 27
42728: DOUBLE
42729: EQUAL
42730: IFTRUE 42734
42732: GO 42759
42734: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
42735: LD_ADDR_VAR 0 3
42739: PUSH
42740: LD_INT 35
42742: PPUSH
42743: LD_VAR 0 1
42747: PPUSH
42748: CALL_OW 321
42752: PUSH
42753: LD_INT 2
42755: EQUAL
42756: ST_TO_ADDR
42757: GO 42760
42759: POP
// end ;
42760: LD_VAR 0 3
42764: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
42765: LD_INT 0
42767: PPUSH
42768: PPUSH
42769: PPUSH
42770: PPUSH
42771: PPUSH
42772: PPUSH
42773: PPUSH
42774: PPUSH
42775: PPUSH
42776: PPUSH
42777: PPUSH
// result := false ;
42778: LD_ADDR_VAR 0 6
42782: PUSH
42783: LD_INT 0
42785: ST_TO_ADDR
// if btype = b_depot then
42786: LD_VAR 0 2
42790: PUSH
42791: LD_INT 0
42793: EQUAL
42794: IFFALSE 42806
// begin result := true ;
42796: LD_ADDR_VAR 0 6
42800: PUSH
42801: LD_INT 1
42803: ST_TO_ADDR
// exit ;
42804: GO 43632
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
42806: LD_VAR 0 1
42810: NOT
42811: PUSH
42812: LD_VAR 0 1
42816: PPUSH
42817: CALL_OW 266
42821: PUSH
42822: LD_INT 0
42824: PUSH
42825: LD_INT 1
42827: PUSH
42828: EMPTY
42829: LIST
42830: LIST
42831: IN
42832: NOT
42833: OR
42834: PUSH
42835: LD_VAR 0 2
42839: NOT
42840: OR
42841: PUSH
42842: LD_VAR 0 5
42846: PUSH
42847: LD_INT 0
42849: PUSH
42850: LD_INT 1
42852: PUSH
42853: LD_INT 2
42855: PUSH
42856: LD_INT 3
42858: PUSH
42859: LD_INT 4
42861: PUSH
42862: LD_INT 5
42864: PUSH
42865: EMPTY
42866: LIST
42867: LIST
42868: LIST
42869: LIST
42870: LIST
42871: LIST
42872: IN
42873: NOT
42874: OR
42875: PUSH
42876: LD_VAR 0 3
42880: PPUSH
42881: LD_VAR 0 4
42885: PPUSH
42886: CALL_OW 488
42890: NOT
42891: OR
42892: IFFALSE 42896
// exit ;
42894: GO 43632
// side := GetSide ( depot ) ;
42896: LD_ADDR_VAR 0 9
42900: PUSH
42901: LD_VAR 0 1
42905: PPUSH
42906: CALL_OW 255
42910: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
42911: LD_VAR 0 9
42915: PPUSH
42916: LD_VAR 0 2
42920: PPUSH
42921: CALL 42389 0 2
42925: NOT
42926: IFFALSE 42930
// exit ;
42928: GO 43632
// pom := GetBase ( depot ) ;
42930: LD_ADDR_VAR 0 10
42934: PUSH
42935: LD_VAR 0 1
42939: PPUSH
42940: CALL_OW 274
42944: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
42945: LD_ADDR_VAR 0 11
42949: PUSH
42950: LD_VAR 0 2
42954: PPUSH
42955: LD_VAR 0 1
42959: PPUSH
42960: CALL_OW 248
42964: PPUSH
42965: CALL_OW 450
42969: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
42970: LD_VAR 0 10
42974: PPUSH
42975: LD_INT 1
42977: PPUSH
42978: CALL_OW 275
42982: PUSH
42983: LD_VAR 0 11
42987: PUSH
42988: LD_INT 1
42990: ARRAY
42991: GREATEREQUAL
42992: PUSH
42993: LD_VAR 0 10
42997: PPUSH
42998: LD_INT 2
43000: PPUSH
43001: CALL_OW 275
43005: PUSH
43006: LD_VAR 0 11
43010: PUSH
43011: LD_INT 2
43013: ARRAY
43014: GREATEREQUAL
43015: AND
43016: PUSH
43017: LD_VAR 0 10
43021: PPUSH
43022: LD_INT 3
43024: PPUSH
43025: CALL_OW 275
43029: PUSH
43030: LD_VAR 0 11
43034: PUSH
43035: LD_INT 3
43037: ARRAY
43038: GREATEREQUAL
43039: AND
43040: NOT
43041: IFFALSE 43045
// exit ;
43043: GO 43632
// if GetBType ( depot ) = b_depot then
43045: LD_VAR 0 1
43049: PPUSH
43050: CALL_OW 266
43054: PUSH
43055: LD_INT 0
43057: EQUAL
43058: IFFALSE 43070
// dist := 28 else
43060: LD_ADDR_VAR 0 14
43064: PUSH
43065: LD_INT 28
43067: ST_TO_ADDR
43068: GO 43078
// dist := 36 ;
43070: LD_ADDR_VAR 0 14
43074: PUSH
43075: LD_INT 36
43077: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
43078: LD_VAR 0 1
43082: PPUSH
43083: LD_VAR 0 3
43087: PPUSH
43088: LD_VAR 0 4
43092: PPUSH
43093: CALL_OW 297
43097: PUSH
43098: LD_VAR 0 14
43102: GREATER
43103: IFFALSE 43107
// exit ;
43105: GO 43632
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
43107: LD_ADDR_VAR 0 12
43111: PUSH
43112: LD_VAR 0 2
43116: PPUSH
43117: LD_VAR 0 3
43121: PPUSH
43122: LD_VAR 0 4
43126: PPUSH
43127: LD_VAR 0 5
43131: PPUSH
43132: LD_VAR 0 1
43136: PPUSH
43137: CALL_OW 248
43141: PPUSH
43142: LD_INT 0
43144: PPUSH
43145: CALL 43637 0 6
43149: ST_TO_ADDR
// if not hexes then
43150: LD_VAR 0 12
43154: NOT
43155: IFFALSE 43159
// exit ;
43157: GO 43632
// hex := GetHexInfo ( x , y ) ;
43159: LD_ADDR_VAR 0 15
43163: PUSH
43164: LD_VAR 0 3
43168: PPUSH
43169: LD_VAR 0 4
43173: PPUSH
43174: CALL_OW 546
43178: ST_TO_ADDR
// if hex [ 1 ] then
43179: LD_VAR 0 15
43183: PUSH
43184: LD_INT 1
43186: ARRAY
43187: IFFALSE 43191
// exit ;
43189: GO 43632
// height := hex [ 2 ] ;
43191: LD_ADDR_VAR 0 13
43195: PUSH
43196: LD_VAR 0 15
43200: PUSH
43201: LD_INT 2
43203: ARRAY
43204: ST_TO_ADDR
// for i = 1 to hexes do
43205: LD_ADDR_VAR 0 7
43209: PUSH
43210: DOUBLE
43211: LD_INT 1
43213: DEC
43214: ST_TO_ADDR
43215: LD_VAR 0 12
43219: PUSH
43220: FOR_TO
43221: IFFALSE 43551
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
43223: LD_VAR 0 12
43227: PUSH
43228: LD_VAR 0 7
43232: ARRAY
43233: PUSH
43234: LD_INT 1
43236: ARRAY
43237: PPUSH
43238: LD_VAR 0 12
43242: PUSH
43243: LD_VAR 0 7
43247: ARRAY
43248: PUSH
43249: LD_INT 2
43251: ARRAY
43252: PPUSH
43253: CALL_OW 488
43257: NOT
43258: PUSH
43259: LD_VAR 0 12
43263: PUSH
43264: LD_VAR 0 7
43268: ARRAY
43269: PUSH
43270: LD_INT 1
43272: ARRAY
43273: PPUSH
43274: LD_VAR 0 12
43278: PUSH
43279: LD_VAR 0 7
43283: ARRAY
43284: PUSH
43285: LD_INT 2
43287: ARRAY
43288: PPUSH
43289: CALL_OW 428
43293: PUSH
43294: LD_INT 0
43296: GREATER
43297: OR
43298: PUSH
43299: LD_VAR 0 12
43303: PUSH
43304: LD_VAR 0 7
43308: ARRAY
43309: PUSH
43310: LD_INT 1
43312: ARRAY
43313: PPUSH
43314: LD_VAR 0 12
43318: PUSH
43319: LD_VAR 0 7
43323: ARRAY
43324: PUSH
43325: LD_INT 2
43327: ARRAY
43328: PPUSH
43329: CALL_OW 351
43333: OR
43334: IFFALSE 43340
// exit ;
43336: POP
43337: POP
43338: GO 43632
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43340: LD_ADDR_VAR 0 8
43344: PUSH
43345: LD_VAR 0 12
43349: PUSH
43350: LD_VAR 0 7
43354: ARRAY
43355: PUSH
43356: LD_INT 1
43358: ARRAY
43359: PPUSH
43360: LD_VAR 0 12
43364: PUSH
43365: LD_VAR 0 7
43369: ARRAY
43370: PUSH
43371: LD_INT 2
43373: ARRAY
43374: PPUSH
43375: CALL_OW 546
43379: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
43380: LD_VAR 0 8
43384: PUSH
43385: LD_INT 1
43387: ARRAY
43388: PUSH
43389: LD_VAR 0 8
43393: PUSH
43394: LD_INT 2
43396: ARRAY
43397: PUSH
43398: LD_VAR 0 13
43402: PUSH
43403: LD_INT 2
43405: PLUS
43406: GREATER
43407: OR
43408: PUSH
43409: LD_VAR 0 8
43413: PUSH
43414: LD_INT 2
43416: ARRAY
43417: PUSH
43418: LD_VAR 0 13
43422: PUSH
43423: LD_INT 2
43425: MINUS
43426: LESS
43427: OR
43428: PUSH
43429: LD_VAR 0 8
43433: PUSH
43434: LD_INT 3
43436: ARRAY
43437: PUSH
43438: LD_INT 0
43440: PUSH
43441: LD_INT 8
43443: PUSH
43444: LD_INT 9
43446: PUSH
43447: LD_INT 10
43449: PUSH
43450: LD_INT 11
43452: PUSH
43453: LD_INT 12
43455: PUSH
43456: LD_INT 13
43458: PUSH
43459: LD_INT 16
43461: PUSH
43462: LD_INT 17
43464: PUSH
43465: LD_INT 18
43467: PUSH
43468: LD_INT 19
43470: PUSH
43471: LD_INT 20
43473: PUSH
43474: LD_INT 21
43476: PUSH
43477: EMPTY
43478: LIST
43479: LIST
43480: LIST
43481: LIST
43482: LIST
43483: LIST
43484: LIST
43485: LIST
43486: LIST
43487: LIST
43488: LIST
43489: LIST
43490: LIST
43491: IN
43492: NOT
43493: OR
43494: PUSH
43495: LD_VAR 0 8
43499: PUSH
43500: LD_INT 5
43502: ARRAY
43503: NOT
43504: OR
43505: PUSH
43506: LD_VAR 0 8
43510: PUSH
43511: LD_INT 6
43513: ARRAY
43514: PUSH
43515: LD_INT 1
43517: PUSH
43518: LD_INT 2
43520: PUSH
43521: LD_INT 7
43523: PUSH
43524: LD_INT 9
43526: PUSH
43527: LD_INT 10
43529: PUSH
43530: LD_INT 11
43532: PUSH
43533: EMPTY
43534: LIST
43535: LIST
43536: LIST
43537: LIST
43538: LIST
43539: LIST
43540: IN
43541: NOT
43542: OR
43543: IFFALSE 43549
// exit ;
43545: POP
43546: POP
43547: GO 43632
// end ;
43549: GO 43220
43551: POP
43552: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
43553: LD_VAR 0 9
43557: PPUSH
43558: LD_VAR 0 3
43562: PPUSH
43563: LD_VAR 0 4
43567: PPUSH
43568: LD_INT 20
43570: PPUSH
43571: CALL 35555 0 4
43575: PUSH
43576: LD_INT 4
43578: ARRAY
43579: IFFALSE 43583
// exit ;
43581: GO 43632
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
43583: LD_VAR 0 2
43587: PUSH
43588: LD_INT 29
43590: PUSH
43591: LD_INT 30
43593: PUSH
43594: EMPTY
43595: LIST
43596: LIST
43597: IN
43598: PUSH
43599: LD_VAR 0 3
43603: PPUSH
43604: LD_VAR 0 4
43608: PPUSH
43609: LD_VAR 0 9
43613: PPUSH
43614: CALL_OW 440
43618: NOT
43619: AND
43620: IFFALSE 43624
// exit ;
43622: GO 43632
// result := true ;
43624: LD_ADDR_VAR 0 6
43628: PUSH
43629: LD_INT 1
43631: ST_TO_ADDR
// end ;
43632: LD_VAR 0 6
43636: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
43637: LD_INT 0
43639: PPUSH
43640: PPUSH
43641: PPUSH
43642: PPUSH
43643: PPUSH
43644: PPUSH
43645: PPUSH
43646: PPUSH
43647: PPUSH
43648: PPUSH
43649: PPUSH
43650: PPUSH
43651: PPUSH
43652: PPUSH
43653: PPUSH
43654: PPUSH
43655: PPUSH
43656: PPUSH
43657: PPUSH
43658: PPUSH
43659: PPUSH
43660: PPUSH
43661: PPUSH
43662: PPUSH
43663: PPUSH
43664: PPUSH
43665: PPUSH
43666: PPUSH
43667: PPUSH
43668: PPUSH
43669: PPUSH
43670: PPUSH
43671: PPUSH
43672: PPUSH
43673: PPUSH
43674: PPUSH
43675: PPUSH
43676: PPUSH
43677: PPUSH
43678: PPUSH
43679: PPUSH
43680: PPUSH
43681: PPUSH
43682: PPUSH
43683: PPUSH
43684: PPUSH
43685: PPUSH
43686: PPUSH
43687: PPUSH
43688: PPUSH
43689: PPUSH
43690: PPUSH
43691: PPUSH
43692: PPUSH
43693: PPUSH
43694: PPUSH
43695: PPUSH
43696: PPUSH
// result = [ ] ;
43697: LD_ADDR_VAR 0 7
43701: PUSH
43702: EMPTY
43703: ST_TO_ADDR
// temp_list = [ ] ;
43704: LD_ADDR_VAR 0 9
43708: PUSH
43709: EMPTY
43710: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
43711: LD_VAR 0 4
43715: PUSH
43716: LD_INT 0
43718: PUSH
43719: LD_INT 1
43721: PUSH
43722: LD_INT 2
43724: PUSH
43725: LD_INT 3
43727: PUSH
43728: LD_INT 4
43730: PUSH
43731: LD_INT 5
43733: PUSH
43734: EMPTY
43735: LIST
43736: LIST
43737: LIST
43738: LIST
43739: LIST
43740: LIST
43741: IN
43742: NOT
43743: PUSH
43744: LD_VAR 0 1
43748: PUSH
43749: LD_INT 0
43751: PUSH
43752: LD_INT 1
43754: PUSH
43755: EMPTY
43756: LIST
43757: LIST
43758: IN
43759: PUSH
43760: LD_VAR 0 5
43764: PUSH
43765: LD_INT 1
43767: PUSH
43768: LD_INT 2
43770: PUSH
43771: LD_INT 3
43773: PUSH
43774: EMPTY
43775: LIST
43776: LIST
43777: LIST
43778: IN
43779: NOT
43780: AND
43781: OR
43782: IFFALSE 43786
// exit ;
43784: GO 62177
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
43786: LD_VAR 0 1
43790: PUSH
43791: LD_INT 6
43793: PUSH
43794: LD_INT 7
43796: PUSH
43797: LD_INT 8
43799: PUSH
43800: LD_INT 13
43802: PUSH
43803: LD_INT 12
43805: PUSH
43806: LD_INT 15
43808: PUSH
43809: LD_INT 11
43811: PUSH
43812: LD_INT 14
43814: PUSH
43815: LD_INT 10
43817: PUSH
43818: EMPTY
43819: LIST
43820: LIST
43821: LIST
43822: LIST
43823: LIST
43824: LIST
43825: LIST
43826: LIST
43827: LIST
43828: IN
43829: IFFALSE 43839
// btype = b_lab ;
43831: LD_ADDR_VAR 0 1
43835: PUSH
43836: LD_INT 6
43838: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
43839: LD_VAR 0 6
43843: PUSH
43844: LD_INT 0
43846: PUSH
43847: LD_INT 1
43849: PUSH
43850: LD_INT 2
43852: PUSH
43853: EMPTY
43854: LIST
43855: LIST
43856: LIST
43857: IN
43858: NOT
43859: PUSH
43860: LD_VAR 0 1
43864: PUSH
43865: LD_INT 0
43867: PUSH
43868: LD_INT 1
43870: PUSH
43871: LD_INT 2
43873: PUSH
43874: LD_INT 3
43876: PUSH
43877: LD_INT 6
43879: PUSH
43880: LD_INT 36
43882: PUSH
43883: LD_INT 4
43885: PUSH
43886: LD_INT 5
43888: PUSH
43889: LD_INT 31
43891: PUSH
43892: LD_INT 32
43894: PUSH
43895: LD_INT 33
43897: PUSH
43898: EMPTY
43899: LIST
43900: LIST
43901: LIST
43902: LIST
43903: LIST
43904: LIST
43905: LIST
43906: LIST
43907: LIST
43908: LIST
43909: LIST
43910: IN
43911: NOT
43912: PUSH
43913: LD_VAR 0 6
43917: PUSH
43918: LD_INT 1
43920: EQUAL
43921: AND
43922: OR
43923: PUSH
43924: LD_VAR 0 1
43928: PUSH
43929: LD_INT 2
43931: PUSH
43932: LD_INT 3
43934: PUSH
43935: EMPTY
43936: LIST
43937: LIST
43938: IN
43939: NOT
43940: PUSH
43941: LD_VAR 0 6
43945: PUSH
43946: LD_INT 2
43948: EQUAL
43949: AND
43950: OR
43951: IFFALSE 43961
// mode = 0 ;
43953: LD_ADDR_VAR 0 6
43957: PUSH
43958: LD_INT 0
43960: ST_TO_ADDR
// case mode of 0 :
43961: LD_VAR 0 6
43965: PUSH
43966: LD_INT 0
43968: DOUBLE
43969: EQUAL
43970: IFTRUE 43974
43972: GO 55427
43974: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43975: LD_ADDR_VAR 0 11
43979: PUSH
43980: LD_INT 0
43982: PUSH
43983: LD_INT 0
43985: PUSH
43986: EMPTY
43987: LIST
43988: LIST
43989: PUSH
43990: LD_INT 0
43992: PUSH
43993: LD_INT 1
43995: NEG
43996: PUSH
43997: EMPTY
43998: LIST
43999: LIST
44000: PUSH
44001: LD_INT 1
44003: PUSH
44004: LD_INT 0
44006: PUSH
44007: EMPTY
44008: LIST
44009: LIST
44010: PUSH
44011: LD_INT 1
44013: PUSH
44014: LD_INT 1
44016: PUSH
44017: EMPTY
44018: LIST
44019: LIST
44020: PUSH
44021: LD_INT 0
44023: PUSH
44024: LD_INT 1
44026: PUSH
44027: EMPTY
44028: LIST
44029: LIST
44030: PUSH
44031: LD_INT 1
44033: NEG
44034: PUSH
44035: LD_INT 0
44037: PUSH
44038: EMPTY
44039: LIST
44040: LIST
44041: PUSH
44042: LD_INT 1
44044: NEG
44045: PUSH
44046: LD_INT 1
44048: NEG
44049: PUSH
44050: EMPTY
44051: LIST
44052: LIST
44053: PUSH
44054: LD_INT 1
44056: NEG
44057: PUSH
44058: LD_INT 2
44060: NEG
44061: PUSH
44062: EMPTY
44063: LIST
44064: LIST
44065: PUSH
44066: LD_INT 0
44068: PUSH
44069: LD_INT 2
44071: NEG
44072: PUSH
44073: EMPTY
44074: LIST
44075: LIST
44076: PUSH
44077: LD_INT 1
44079: PUSH
44080: LD_INT 1
44082: NEG
44083: PUSH
44084: EMPTY
44085: LIST
44086: LIST
44087: PUSH
44088: LD_INT 1
44090: PUSH
44091: LD_INT 2
44093: PUSH
44094: EMPTY
44095: LIST
44096: LIST
44097: PUSH
44098: LD_INT 0
44100: PUSH
44101: LD_INT 2
44103: PUSH
44104: EMPTY
44105: LIST
44106: LIST
44107: PUSH
44108: LD_INT 1
44110: NEG
44111: PUSH
44112: LD_INT 1
44114: PUSH
44115: EMPTY
44116: LIST
44117: LIST
44118: PUSH
44119: LD_INT 1
44121: PUSH
44122: LD_INT 3
44124: PUSH
44125: EMPTY
44126: LIST
44127: LIST
44128: PUSH
44129: LD_INT 0
44131: PUSH
44132: LD_INT 3
44134: PUSH
44135: EMPTY
44136: LIST
44137: LIST
44138: PUSH
44139: LD_INT 1
44141: NEG
44142: PUSH
44143: LD_INT 2
44145: PUSH
44146: EMPTY
44147: LIST
44148: LIST
44149: PUSH
44150: EMPTY
44151: LIST
44152: LIST
44153: LIST
44154: LIST
44155: LIST
44156: LIST
44157: LIST
44158: LIST
44159: LIST
44160: LIST
44161: LIST
44162: LIST
44163: LIST
44164: LIST
44165: LIST
44166: LIST
44167: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44168: LD_ADDR_VAR 0 12
44172: PUSH
44173: LD_INT 0
44175: PUSH
44176: LD_INT 0
44178: PUSH
44179: EMPTY
44180: LIST
44181: LIST
44182: PUSH
44183: LD_INT 0
44185: PUSH
44186: LD_INT 1
44188: NEG
44189: PUSH
44190: EMPTY
44191: LIST
44192: LIST
44193: PUSH
44194: LD_INT 1
44196: PUSH
44197: LD_INT 0
44199: PUSH
44200: EMPTY
44201: LIST
44202: LIST
44203: PUSH
44204: LD_INT 1
44206: PUSH
44207: LD_INT 1
44209: PUSH
44210: EMPTY
44211: LIST
44212: LIST
44213: PUSH
44214: LD_INT 0
44216: PUSH
44217: LD_INT 1
44219: PUSH
44220: EMPTY
44221: LIST
44222: LIST
44223: PUSH
44224: LD_INT 1
44226: NEG
44227: PUSH
44228: LD_INT 0
44230: PUSH
44231: EMPTY
44232: LIST
44233: LIST
44234: PUSH
44235: LD_INT 1
44237: NEG
44238: PUSH
44239: LD_INT 1
44241: NEG
44242: PUSH
44243: EMPTY
44244: LIST
44245: LIST
44246: PUSH
44247: LD_INT 1
44249: PUSH
44250: LD_INT 1
44252: NEG
44253: PUSH
44254: EMPTY
44255: LIST
44256: LIST
44257: PUSH
44258: LD_INT 2
44260: PUSH
44261: LD_INT 0
44263: PUSH
44264: EMPTY
44265: LIST
44266: LIST
44267: PUSH
44268: LD_INT 2
44270: PUSH
44271: LD_INT 1
44273: PUSH
44274: EMPTY
44275: LIST
44276: LIST
44277: PUSH
44278: LD_INT 1
44280: NEG
44281: PUSH
44282: LD_INT 1
44284: PUSH
44285: EMPTY
44286: LIST
44287: LIST
44288: PUSH
44289: LD_INT 2
44291: NEG
44292: PUSH
44293: LD_INT 0
44295: PUSH
44296: EMPTY
44297: LIST
44298: LIST
44299: PUSH
44300: LD_INT 2
44302: NEG
44303: PUSH
44304: LD_INT 1
44306: NEG
44307: PUSH
44308: EMPTY
44309: LIST
44310: LIST
44311: PUSH
44312: LD_INT 2
44314: NEG
44315: PUSH
44316: LD_INT 1
44318: PUSH
44319: EMPTY
44320: LIST
44321: LIST
44322: PUSH
44323: LD_INT 3
44325: NEG
44326: PUSH
44327: LD_INT 0
44329: PUSH
44330: EMPTY
44331: LIST
44332: LIST
44333: PUSH
44334: LD_INT 3
44336: NEG
44337: PUSH
44338: LD_INT 1
44340: NEG
44341: PUSH
44342: EMPTY
44343: LIST
44344: LIST
44345: PUSH
44346: EMPTY
44347: LIST
44348: LIST
44349: LIST
44350: LIST
44351: LIST
44352: LIST
44353: LIST
44354: LIST
44355: LIST
44356: LIST
44357: LIST
44358: LIST
44359: LIST
44360: LIST
44361: LIST
44362: LIST
44363: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44364: LD_ADDR_VAR 0 13
44368: PUSH
44369: LD_INT 0
44371: PUSH
44372: LD_INT 0
44374: PUSH
44375: EMPTY
44376: LIST
44377: LIST
44378: PUSH
44379: LD_INT 0
44381: PUSH
44382: LD_INT 1
44384: NEG
44385: PUSH
44386: EMPTY
44387: LIST
44388: LIST
44389: PUSH
44390: LD_INT 1
44392: PUSH
44393: LD_INT 0
44395: PUSH
44396: EMPTY
44397: LIST
44398: LIST
44399: PUSH
44400: LD_INT 1
44402: PUSH
44403: LD_INT 1
44405: PUSH
44406: EMPTY
44407: LIST
44408: LIST
44409: PUSH
44410: LD_INT 0
44412: PUSH
44413: LD_INT 1
44415: PUSH
44416: EMPTY
44417: LIST
44418: LIST
44419: PUSH
44420: LD_INT 1
44422: NEG
44423: PUSH
44424: LD_INT 0
44426: PUSH
44427: EMPTY
44428: LIST
44429: LIST
44430: PUSH
44431: LD_INT 1
44433: NEG
44434: PUSH
44435: LD_INT 1
44437: NEG
44438: PUSH
44439: EMPTY
44440: LIST
44441: LIST
44442: PUSH
44443: LD_INT 1
44445: NEG
44446: PUSH
44447: LD_INT 2
44449: NEG
44450: PUSH
44451: EMPTY
44452: LIST
44453: LIST
44454: PUSH
44455: LD_INT 2
44457: PUSH
44458: LD_INT 1
44460: PUSH
44461: EMPTY
44462: LIST
44463: LIST
44464: PUSH
44465: LD_INT 2
44467: PUSH
44468: LD_INT 2
44470: PUSH
44471: EMPTY
44472: LIST
44473: LIST
44474: PUSH
44475: LD_INT 1
44477: PUSH
44478: LD_INT 2
44480: PUSH
44481: EMPTY
44482: LIST
44483: LIST
44484: PUSH
44485: LD_INT 2
44487: NEG
44488: PUSH
44489: LD_INT 1
44491: NEG
44492: PUSH
44493: EMPTY
44494: LIST
44495: LIST
44496: PUSH
44497: LD_INT 2
44499: NEG
44500: PUSH
44501: LD_INT 2
44503: NEG
44504: PUSH
44505: EMPTY
44506: LIST
44507: LIST
44508: PUSH
44509: LD_INT 2
44511: NEG
44512: PUSH
44513: LD_INT 3
44515: NEG
44516: PUSH
44517: EMPTY
44518: LIST
44519: LIST
44520: PUSH
44521: LD_INT 3
44523: NEG
44524: PUSH
44525: LD_INT 2
44527: NEG
44528: PUSH
44529: EMPTY
44530: LIST
44531: LIST
44532: PUSH
44533: LD_INT 3
44535: NEG
44536: PUSH
44537: LD_INT 3
44539: NEG
44540: PUSH
44541: EMPTY
44542: LIST
44543: LIST
44544: PUSH
44545: EMPTY
44546: LIST
44547: LIST
44548: LIST
44549: LIST
44550: LIST
44551: LIST
44552: LIST
44553: LIST
44554: LIST
44555: LIST
44556: LIST
44557: LIST
44558: LIST
44559: LIST
44560: LIST
44561: LIST
44562: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44563: LD_ADDR_VAR 0 14
44567: PUSH
44568: LD_INT 0
44570: PUSH
44571: LD_INT 0
44573: PUSH
44574: EMPTY
44575: LIST
44576: LIST
44577: PUSH
44578: LD_INT 0
44580: PUSH
44581: LD_INT 1
44583: NEG
44584: PUSH
44585: EMPTY
44586: LIST
44587: LIST
44588: PUSH
44589: LD_INT 1
44591: PUSH
44592: LD_INT 0
44594: PUSH
44595: EMPTY
44596: LIST
44597: LIST
44598: PUSH
44599: LD_INT 1
44601: PUSH
44602: LD_INT 1
44604: PUSH
44605: EMPTY
44606: LIST
44607: LIST
44608: PUSH
44609: LD_INT 0
44611: PUSH
44612: LD_INT 1
44614: PUSH
44615: EMPTY
44616: LIST
44617: LIST
44618: PUSH
44619: LD_INT 1
44621: NEG
44622: PUSH
44623: LD_INT 0
44625: PUSH
44626: EMPTY
44627: LIST
44628: LIST
44629: PUSH
44630: LD_INT 1
44632: NEG
44633: PUSH
44634: LD_INT 1
44636: NEG
44637: PUSH
44638: EMPTY
44639: LIST
44640: LIST
44641: PUSH
44642: LD_INT 1
44644: NEG
44645: PUSH
44646: LD_INT 2
44648: NEG
44649: PUSH
44650: EMPTY
44651: LIST
44652: LIST
44653: PUSH
44654: LD_INT 0
44656: PUSH
44657: LD_INT 2
44659: NEG
44660: PUSH
44661: EMPTY
44662: LIST
44663: LIST
44664: PUSH
44665: LD_INT 1
44667: PUSH
44668: LD_INT 1
44670: NEG
44671: PUSH
44672: EMPTY
44673: LIST
44674: LIST
44675: PUSH
44676: LD_INT 1
44678: PUSH
44679: LD_INT 2
44681: PUSH
44682: EMPTY
44683: LIST
44684: LIST
44685: PUSH
44686: LD_INT 0
44688: PUSH
44689: LD_INT 2
44691: PUSH
44692: EMPTY
44693: LIST
44694: LIST
44695: PUSH
44696: LD_INT 1
44698: NEG
44699: PUSH
44700: LD_INT 1
44702: PUSH
44703: EMPTY
44704: LIST
44705: LIST
44706: PUSH
44707: LD_INT 1
44709: NEG
44710: PUSH
44711: LD_INT 3
44713: NEG
44714: PUSH
44715: EMPTY
44716: LIST
44717: LIST
44718: PUSH
44719: LD_INT 0
44721: PUSH
44722: LD_INT 3
44724: NEG
44725: PUSH
44726: EMPTY
44727: LIST
44728: LIST
44729: PUSH
44730: LD_INT 1
44732: PUSH
44733: LD_INT 2
44735: NEG
44736: PUSH
44737: EMPTY
44738: LIST
44739: LIST
44740: PUSH
44741: EMPTY
44742: LIST
44743: LIST
44744: LIST
44745: LIST
44746: LIST
44747: LIST
44748: LIST
44749: LIST
44750: LIST
44751: LIST
44752: LIST
44753: LIST
44754: LIST
44755: LIST
44756: LIST
44757: LIST
44758: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44759: LD_ADDR_VAR 0 15
44763: PUSH
44764: LD_INT 0
44766: PUSH
44767: LD_INT 0
44769: PUSH
44770: EMPTY
44771: LIST
44772: LIST
44773: PUSH
44774: LD_INT 0
44776: PUSH
44777: LD_INT 1
44779: NEG
44780: PUSH
44781: EMPTY
44782: LIST
44783: LIST
44784: PUSH
44785: LD_INT 1
44787: PUSH
44788: LD_INT 0
44790: PUSH
44791: EMPTY
44792: LIST
44793: LIST
44794: PUSH
44795: LD_INT 1
44797: PUSH
44798: LD_INT 1
44800: PUSH
44801: EMPTY
44802: LIST
44803: LIST
44804: PUSH
44805: LD_INT 0
44807: PUSH
44808: LD_INT 1
44810: PUSH
44811: EMPTY
44812: LIST
44813: LIST
44814: PUSH
44815: LD_INT 1
44817: NEG
44818: PUSH
44819: LD_INT 0
44821: PUSH
44822: EMPTY
44823: LIST
44824: LIST
44825: PUSH
44826: LD_INT 1
44828: NEG
44829: PUSH
44830: LD_INT 1
44832: NEG
44833: PUSH
44834: EMPTY
44835: LIST
44836: LIST
44837: PUSH
44838: LD_INT 1
44840: PUSH
44841: LD_INT 1
44843: NEG
44844: PUSH
44845: EMPTY
44846: LIST
44847: LIST
44848: PUSH
44849: LD_INT 2
44851: PUSH
44852: LD_INT 0
44854: PUSH
44855: EMPTY
44856: LIST
44857: LIST
44858: PUSH
44859: LD_INT 2
44861: PUSH
44862: LD_INT 1
44864: PUSH
44865: EMPTY
44866: LIST
44867: LIST
44868: PUSH
44869: LD_INT 1
44871: NEG
44872: PUSH
44873: LD_INT 1
44875: PUSH
44876: EMPTY
44877: LIST
44878: LIST
44879: PUSH
44880: LD_INT 2
44882: NEG
44883: PUSH
44884: LD_INT 0
44886: PUSH
44887: EMPTY
44888: LIST
44889: LIST
44890: PUSH
44891: LD_INT 2
44893: NEG
44894: PUSH
44895: LD_INT 1
44897: NEG
44898: PUSH
44899: EMPTY
44900: LIST
44901: LIST
44902: PUSH
44903: LD_INT 2
44905: PUSH
44906: LD_INT 1
44908: NEG
44909: PUSH
44910: EMPTY
44911: LIST
44912: LIST
44913: PUSH
44914: LD_INT 3
44916: PUSH
44917: LD_INT 0
44919: PUSH
44920: EMPTY
44921: LIST
44922: LIST
44923: PUSH
44924: LD_INT 3
44926: PUSH
44927: LD_INT 1
44929: PUSH
44930: EMPTY
44931: LIST
44932: LIST
44933: PUSH
44934: EMPTY
44935: LIST
44936: LIST
44937: LIST
44938: LIST
44939: LIST
44940: LIST
44941: LIST
44942: LIST
44943: LIST
44944: LIST
44945: LIST
44946: LIST
44947: LIST
44948: LIST
44949: LIST
44950: LIST
44951: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44952: LD_ADDR_VAR 0 16
44956: PUSH
44957: LD_INT 0
44959: PUSH
44960: LD_INT 0
44962: PUSH
44963: EMPTY
44964: LIST
44965: LIST
44966: PUSH
44967: LD_INT 0
44969: PUSH
44970: LD_INT 1
44972: NEG
44973: PUSH
44974: EMPTY
44975: LIST
44976: LIST
44977: PUSH
44978: LD_INT 1
44980: PUSH
44981: LD_INT 0
44983: PUSH
44984: EMPTY
44985: LIST
44986: LIST
44987: PUSH
44988: LD_INT 1
44990: PUSH
44991: LD_INT 1
44993: PUSH
44994: EMPTY
44995: LIST
44996: LIST
44997: PUSH
44998: LD_INT 0
45000: PUSH
45001: LD_INT 1
45003: PUSH
45004: EMPTY
45005: LIST
45006: LIST
45007: PUSH
45008: LD_INT 1
45010: NEG
45011: PUSH
45012: LD_INT 0
45014: PUSH
45015: EMPTY
45016: LIST
45017: LIST
45018: PUSH
45019: LD_INT 1
45021: NEG
45022: PUSH
45023: LD_INT 1
45025: NEG
45026: PUSH
45027: EMPTY
45028: LIST
45029: LIST
45030: PUSH
45031: LD_INT 1
45033: NEG
45034: PUSH
45035: LD_INT 2
45037: NEG
45038: PUSH
45039: EMPTY
45040: LIST
45041: LIST
45042: PUSH
45043: LD_INT 2
45045: PUSH
45046: LD_INT 1
45048: PUSH
45049: EMPTY
45050: LIST
45051: LIST
45052: PUSH
45053: LD_INT 2
45055: PUSH
45056: LD_INT 2
45058: PUSH
45059: EMPTY
45060: LIST
45061: LIST
45062: PUSH
45063: LD_INT 1
45065: PUSH
45066: LD_INT 2
45068: PUSH
45069: EMPTY
45070: LIST
45071: LIST
45072: PUSH
45073: LD_INT 2
45075: NEG
45076: PUSH
45077: LD_INT 1
45079: NEG
45080: PUSH
45081: EMPTY
45082: LIST
45083: LIST
45084: PUSH
45085: LD_INT 2
45087: NEG
45088: PUSH
45089: LD_INT 2
45091: NEG
45092: PUSH
45093: EMPTY
45094: LIST
45095: LIST
45096: PUSH
45097: LD_INT 3
45099: PUSH
45100: LD_INT 2
45102: PUSH
45103: EMPTY
45104: LIST
45105: LIST
45106: PUSH
45107: LD_INT 3
45109: PUSH
45110: LD_INT 3
45112: PUSH
45113: EMPTY
45114: LIST
45115: LIST
45116: PUSH
45117: LD_INT 2
45119: PUSH
45120: LD_INT 3
45122: PUSH
45123: EMPTY
45124: LIST
45125: LIST
45126: PUSH
45127: EMPTY
45128: LIST
45129: LIST
45130: LIST
45131: LIST
45132: LIST
45133: LIST
45134: LIST
45135: LIST
45136: LIST
45137: LIST
45138: LIST
45139: LIST
45140: LIST
45141: LIST
45142: LIST
45143: LIST
45144: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45145: LD_ADDR_VAR 0 17
45149: PUSH
45150: LD_INT 0
45152: PUSH
45153: LD_INT 0
45155: PUSH
45156: EMPTY
45157: LIST
45158: LIST
45159: PUSH
45160: LD_INT 0
45162: PUSH
45163: LD_INT 1
45165: NEG
45166: PUSH
45167: EMPTY
45168: LIST
45169: LIST
45170: PUSH
45171: LD_INT 1
45173: PUSH
45174: LD_INT 0
45176: PUSH
45177: EMPTY
45178: LIST
45179: LIST
45180: PUSH
45181: LD_INT 1
45183: PUSH
45184: LD_INT 1
45186: PUSH
45187: EMPTY
45188: LIST
45189: LIST
45190: PUSH
45191: LD_INT 0
45193: PUSH
45194: LD_INT 1
45196: PUSH
45197: EMPTY
45198: LIST
45199: LIST
45200: PUSH
45201: LD_INT 1
45203: NEG
45204: PUSH
45205: LD_INT 0
45207: PUSH
45208: EMPTY
45209: LIST
45210: LIST
45211: PUSH
45212: LD_INT 1
45214: NEG
45215: PUSH
45216: LD_INT 1
45218: NEG
45219: PUSH
45220: EMPTY
45221: LIST
45222: LIST
45223: PUSH
45224: LD_INT 1
45226: NEG
45227: PUSH
45228: LD_INT 2
45230: NEG
45231: PUSH
45232: EMPTY
45233: LIST
45234: LIST
45235: PUSH
45236: LD_INT 0
45238: PUSH
45239: LD_INT 2
45241: NEG
45242: PUSH
45243: EMPTY
45244: LIST
45245: LIST
45246: PUSH
45247: LD_INT 1
45249: PUSH
45250: LD_INT 1
45252: NEG
45253: PUSH
45254: EMPTY
45255: LIST
45256: LIST
45257: PUSH
45258: LD_INT 2
45260: PUSH
45261: LD_INT 0
45263: PUSH
45264: EMPTY
45265: LIST
45266: LIST
45267: PUSH
45268: LD_INT 2
45270: PUSH
45271: LD_INT 1
45273: PUSH
45274: EMPTY
45275: LIST
45276: LIST
45277: PUSH
45278: LD_INT 2
45280: PUSH
45281: LD_INT 2
45283: PUSH
45284: EMPTY
45285: LIST
45286: LIST
45287: PUSH
45288: LD_INT 1
45290: PUSH
45291: LD_INT 2
45293: PUSH
45294: EMPTY
45295: LIST
45296: LIST
45297: PUSH
45298: LD_INT 0
45300: PUSH
45301: LD_INT 2
45303: PUSH
45304: EMPTY
45305: LIST
45306: LIST
45307: PUSH
45308: LD_INT 1
45310: NEG
45311: PUSH
45312: LD_INT 1
45314: PUSH
45315: EMPTY
45316: LIST
45317: LIST
45318: PUSH
45319: LD_INT 2
45321: NEG
45322: PUSH
45323: LD_INT 0
45325: PUSH
45326: EMPTY
45327: LIST
45328: LIST
45329: PUSH
45330: LD_INT 2
45332: NEG
45333: PUSH
45334: LD_INT 1
45336: NEG
45337: PUSH
45338: EMPTY
45339: LIST
45340: LIST
45341: PUSH
45342: LD_INT 2
45344: NEG
45345: PUSH
45346: LD_INT 2
45348: NEG
45349: PUSH
45350: EMPTY
45351: LIST
45352: LIST
45353: PUSH
45354: EMPTY
45355: LIST
45356: LIST
45357: LIST
45358: LIST
45359: LIST
45360: LIST
45361: LIST
45362: LIST
45363: LIST
45364: LIST
45365: LIST
45366: LIST
45367: LIST
45368: LIST
45369: LIST
45370: LIST
45371: LIST
45372: LIST
45373: LIST
45374: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45375: LD_ADDR_VAR 0 18
45379: PUSH
45380: LD_INT 0
45382: PUSH
45383: LD_INT 0
45385: PUSH
45386: EMPTY
45387: LIST
45388: LIST
45389: PUSH
45390: LD_INT 0
45392: PUSH
45393: LD_INT 1
45395: NEG
45396: PUSH
45397: EMPTY
45398: LIST
45399: LIST
45400: PUSH
45401: LD_INT 1
45403: PUSH
45404: LD_INT 0
45406: PUSH
45407: EMPTY
45408: LIST
45409: LIST
45410: PUSH
45411: LD_INT 1
45413: PUSH
45414: LD_INT 1
45416: PUSH
45417: EMPTY
45418: LIST
45419: LIST
45420: PUSH
45421: LD_INT 0
45423: PUSH
45424: LD_INT 1
45426: PUSH
45427: EMPTY
45428: LIST
45429: LIST
45430: PUSH
45431: LD_INT 1
45433: NEG
45434: PUSH
45435: LD_INT 0
45437: PUSH
45438: EMPTY
45439: LIST
45440: LIST
45441: PUSH
45442: LD_INT 1
45444: NEG
45445: PUSH
45446: LD_INT 1
45448: NEG
45449: PUSH
45450: EMPTY
45451: LIST
45452: LIST
45453: PUSH
45454: LD_INT 1
45456: NEG
45457: PUSH
45458: LD_INT 2
45460: NEG
45461: PUSH
45462: EMPTY
45463: LIST
45464: LIST
45465: PUSH
45466: LD_INT 0
45468: PUSH
45469: LD_INT 2
45471: NEG
45472: PUSH
45473: EMPTY
45474: LIST
45475: LIST
45476: PUSH
45477: LD_INT 1
45479: PUSH
45480: LD_INT 1
45482: NEG
45483: PUSH
45484: EMPTY
45485: LIST
45486: LIST
45487: PUSH
45488: LD_INT 2
45490: PUSH
45491: LD_INT 0
45493: PUSH
45494: EMPTY
45495: LIST
45496: LIST
45497: PUSH
45498: LD_INT 2
45500: PUSH
45501: LD_INT 1
45503: PUSH
45504: EMPTY
45505: LIST
45506: LIST
45507: PUSH
45508: LD_INT 2
45510: PUSH
45511: LD_INT 2
45513: PUSH
45514: EMPTY
45515: LIST
45516: LIST
45517: PUSH
45518: LD_INT 1
45520: PUSH
45521: LD_INT 2
45523: PUSH
45524: EMPTY
45525: LIST
45526: LIST
45527: PUSH
45528: LD_INT 0
45530: PUSH
45531: LD_INT 2
45533: PUSH
45534: EMPTY
45535: LIST
45536: LIST
45537: PUSH
45538: LD_INT 1
45540: NEG
45541: PUSH
45542: LD_INT 1
45544: PUSH
45545: EMPTY
45546: LIST
45547: LIST
45548: PUSH
45549: LD_INT 2
45551: NEG
45552: PUSH
45553: LD_INT 0
45555: PUSH
45556: EMPTY
45557: LIST
45558: LIST
45559: PUSH
45560: LD_INT 2
45562: NEG
45563: PUSH
45564: LD_INT 1
45566: NEG
45567: PUSH
45568: EMPTY
45569: LIST
45570: LIST
45571: PUSH
45572: LD_INT 2
45574: NEG
45575: PUSH
45576: LD_INT 2
45578: NEG
45579: PUSH
45580: EMPTY
45581: LIST
45582: LIST
45583: PUSH
45584: EMPTY
45585: LIST
45586: LIST
45587: LIST
45588: LIST
45589: LIST
45590: LIST
45591: LIST
45592: LIST
45593: LIST
45594: LIST
45595: LIST
45596: LIST
45597: LIST
45598: LIST
45599: LIST
45600: LIST
45601: LIST
45602: LIST
45603: LIST
45604: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45605: LD_ADDR_VAR 0 19
45609: PUSH
45610: LD_INT 0
45612: PUSH
45613: LD_INT 0
45615: PUSH
45616: EMPTY
45617: LIST
45618: LIST
45619: PUSH
45620: LD_INT 0
45622: PUSH
45623: LD_INT 1
45625: NEG
45626: PUSH
45627: EMPTY
45628: LIST
45629: LIST
45630: PUSH
45631: LD_INT 1
45633: PUSH
45634: LD_INT 0
45636: PUSH
45637: EMPTY
45638: LIST
45639: LIST
45640: PUSH
45641: LD_INT 1
45643: PUSH
45644: LD_INT 1
45646: PUSH
45647: EMPTY
45648: LIST
45649: LIST
45650: PUSH
45651: LD_INT 0
45653: PUSH
45654: LD_INT 1
45656: PUSH
45657: EMPTY
45658: LIST
45659: LIST
45660: PUSH
45661: LD_INT 1
45663: NEG
45664: PUSH
45665: LD_INT 0
45667: PUSH
45668: EMPTY
45669: LIST
45670: LIST
45671: PUSH
45672: LD_INT 1
45674: NEG
45675: PUSH
45676: LD_INT 1
45678: NEG
45679: PUSH
45680: EMPTY
45681: LIST
45682: LIST
45683: PUSH
45684: LD_INT 1
45686: NEG
45687: PUSH
45688: LD_INT 2
45690: NEG
45691: PUSH
45692: EMPTY
45693: LIST
45694: LIST
45695: PUSH
45696: LD_INT 0
45698: PUSH
45699: LD_INT 2
45701: NEG
45702: PUSH
45703: EMPTY
45704: LIST
45705: LIST
45706: PUSH
45707: LD_INT 1
45709: PUSH
45710: LD_INT 1
45712: NEG
45713: PUSH
45714: EMPTY
45715: LIST
45716: LIST
45717: PUSH
45718: LD_INT 2
45720: PUSH
45721: LD_INT 0
45723: PUSH
45724: EMPTY
45725: LIST
45726: LIST
45727: PUSH
45728: LD_INT 2
45730: PUSH
45731: LD_INT 1
45733: PUSH
45734: EMPTY
45735: LIST
45736: LIST
45737: PUSH
45738: LD_INT 2
45740: PUSH
45741: LD_INT 2
45743: PUSH
45744: EMPTY
45745: LIST
45746: LIST
45747: PUSH
45748: LD_INT 1
45750: PUSH
45751: LD_INT 2
45753: PUSH
45754: EMPTY
45755: LIST
45756: LIST
45757: PUSH
45758: LD_INT 0
45760: PUSH
45761: LD_INT 2
45763: PUSH
45764: EMPTY
45765: LIST
45766: LIST
45767: PUSH
45768: LD_INT 1
45770: NEG
45771: PUSH
45772: LD_INT 1
45774: PUSH
45775: EMPTY
45776: LIST
45777: LIST
45778: PUSH
45779: LD_INT 2
45781: NEG
45782: PUSH
45783: LD_INT 0
45785: PUSH
45786: EMPTY
45787: LIST
45788: LIST
45789: PUSH
45790: LD_INT 2
45792: NEG
45793: PUSH
45794: LD_INT 1
45796: NEG
45797: PUSH
45798: EMPTY
45799: LIST
45800: LIST
45801: PUSH
45802: LD_INT 2
45804: NEG
45805: PUSH
45806: LD_INT 2
45808: NEG
45809: PUSH
45810: EMPTY
45811: LIST
45812: LIST
45813: PUSH
45814: EMPTY
45815: LIST
45816: LIST
45817: LIST
45818: LIST
45819: LIST
45820: LIST
45821: LIST
45822: LIST
45823: LIST
45824: LIST
45825: LIST
45826: LIST
45827: LIST
45828: LIST
45829: LIST
45830: LIST
45831: LIST
45832: LIST
45833: LIST
45834: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45835: LD_ADDR_VAR 0 20
45839: PUSH
45840: LD_INT 0
45842: PUSH
45843: LD_INT 0
45845: PUSH
45846: EMPTY
45847: LIST
45848: LIST
45849: PUSH
45850: LD_INT 0
45852: PUSH
45853: LD_INT 1
45855: NEG
45856: PUSH
45857: EMPTY
45858: LIST
45859: LIST
45860: PUSH
45861: LD_INT 1
45863: PUSH
45864: LD_INT 0
45866: PUSH
45867: EMPTY
45868: LIST
45869: LIST
45870: PUSH
45871: LD_INT 1
45873: PUSH
45874: LD_INT 1
45876: PUSH
45877: EMPTY
45878: LIST
45879: LIST
45880: PUSH
45881: LD_INT 0
45883: PUSH
45884: LD_INT 1
45886: PUSH
45887: EMPTY
45888: LIST
45889: LIST
45890: PUSH
45891: LD_INT 1
45893: NEG
45894: PUSH
45895: LD_INT 0
45897: PUSH
45898: EMPTY
45899: LIST
45900: LIST
45901: PUSH
45902: LD_INT 1
45904: NEG
45905: PUSH
45906: LD_INT 1
45908: NEG
45909: PUSH
45910: EMPTY
45911: LIST
45912: LIST
45913: PUSH
45914: LD_INT 1
45916: NEG
45917: PUSH
45918: LD_INT 2
45920: NEG
45921: PUSH
45922: EMPTY
45923: LIST
45924: LIST
45925: PUSH
45926: LD_INT 0
45928: PUSH
45929: LD_INT 2
45931: NEG
45932: PUSH
45933: EMPTY
45934: LIST
45935: LIST
45936: PUSH
45937: LD_INT 1
45939: PUSH
45940: LD_INT 1
45942: NEG
45943: PUSH
45944: EMPTY
45945: LIST
45946: LIST
45947: PUSH
45948: LD_INT 2
45950: PUSH
45951: LD_INT 0
45953: PUSH
45954: EMPTY
45955: LIST
45956: LIST
45957: PUSH
45958: LD_INT 2
45960: PUSH
45961: LD_INT 1
45963: PUSH
45964: EMPTY
45965: LIST
45966: LIST
45967: PUSH
45968: LD_INT 2
45970: PUSH
45971: LD_INT 2
45973: PUSH
45974: EMPTY
45975: LIST
45976: LIST
45977: PUSH
45978: LD_INT 1
45980: PUSH
45981: LD_INT 2
45983: PUSH
45984: EMPTY
45985: LIST
45986: LIST
45987: PUSH
45988: LD_INT 0
45990: PUSH
45991: LD_INT 2
45993: PUSH
45994: EMPTY
45995: LIST
45996: LIST
45997: PUSH
45998: LD_INT 1
46000: NEG
46001: PUSH
46002: LD_INT 1
46004: PUSH
46005: EMPTY
46006: LIST
46007: LIST
46008: PUSH
46009: LD_INT 2
46011: NEG
46012: PUSH
46013: LD_INT 0
46015: PUSH
46016: EMPTY
46017: LIST
46018: LIST
46019: PUSH
46020: LD_INT 2
46022: NEG
46023: PUSH
46024: LD_INT 1
46026: NEG
46027: PUSH
46028: EMPTY
46029: LIST
46030: LIST
46031: PUSH
46032: LD_INT 2
46034: NEG
46035: PUSH
46036: LD_INT 2
46038: NEG
46039: PUSH
46040: EMPTY
46041: LIST
46042: LIST
46043: PUSH
46044: EMPTY
46045: LIST
46046: LIST
46047: LIST
46048: LIST
46049: LIST
46050: LIST
46051: LIST
46052: LIST
46053: LIST
46054: LIST
46055: LIST
46056: LIST
46057: LIST
46058: LIST
46059: LIST
46060: LIST
46061: LIST
46062: LIST
46063: LIST
46064: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46065: LD_ADDR_VAR 0 21
46069: PUSH
46070: LD_INT 0
46072: PUSH
46073: LD_INT 0
46075: PUSH
46076: EMPTY
46077: LIST
46078: LIST
46079: PUSH
46080: LD_INT 0
46082: PUSH
46083: LD_INT 1
46085: NEG
46086: PUSH
46087: EMPTY
46088: LIST
46089: LIST
46090: PUSH
46091: LD_INT 1
46093: PUSH
46094: LD_INT 0
46096: PUSH
46097: EMPTY
46098: LIST
46099: LIST
46100: PUSH
46101: LD_INT 1
46103: PUSH
46104: LD_INT 1
46106: PUSH
46107: EMPTY
46108: LIST
46109: LIST
46110: PUSH
46111: LD_INT 0
46113: PUSH
46114: LD_INT 1
46116: PUSH
46117: EMPTY
46118: LIST
46119: LIST
46120: PUSH
46121: LD_INT 1
46123: NEG
46124: PUSH
46125: LD_INT 0
46127: PUSH
46128: EMPTY
46129: LIST
46130: LIST
46131: PUSH
46132: LD_INT 1
46134: NEG
46135: PUSH
46136: LD_INT 1
46138: NEG
46139: PUSH
46140: EMPTY
46141: LIST
46142: LIST
46143: PUSH
46144: LD_INT 1
46146: NEG
46147: PUSH
46148: LD_INT 2
46150: NEG
46151: PUSH
46152: EMPTY
46153: LIST
46154: LIST
46155: PUSH
46156: LD_INT 0
46158: PUSH
46159: LD_INT 2
46161: NEG
46162: PUSH
46163: EMPTY
46164: LIST
46165: LIST
46166: PUSH
46167: LD_INT 1
46169: PUSH
46170: LD_INT 1
46172: NEG
46173: PUSH
46174: EMPTY
46175: LIST
46176: LIST
46177: PUSH
46178: LD_INT 2
46180: PUSH
46181: LD_INT 0
46183: PUSH
46184: EMPTY
46185: LIST
46186: LIST
46187: PUSH
46188: LD_INT 2
46190: PUSH
46191: LD_INT 1
46193: PUSH
46194: EMPTY
46195: LIST
46196: LIST
46197: PUSH
46198: LD_INT 2
46200: PUSH
46201: LD_INT 2
46203: PUSH
46204: EMPTY
46205: LIST
46206: LIST
46207: PUSH
46208: LD_INT 1
46210: PUSH
46211: LD_INT 2
46213: PUSH
46214: EMPTY
46215: LIST
46216: LIST
46217: PUSH
46218: LD_INT 0
46220: PUSH
46221: LD_INT 2
46223: PUSH
46224: EMPTY
46225: LIST
46226: LIST
46227: PUSH
46228: LD_INT 1
46230: NEG
46231: PUSH
46232: LD_INT 1
46234: PUSH
46235: EMPTY
46236: LIST
46237: LIST
46238: PUSH
46239: LD_INT 2
46241: NEG
46242: PUSH
46243: LD_INT 0
46245: PUSH
46246: EMPTY
46247: LIST
46248: LIST
46249: PUSH
46250: LD_INT 2
46252: NEG
46253: PUSH
46254: LD_INT 1
46256: NEG
46257: PUSH
46258: EMPTY
46259: LIST
46260: LIST
46261: PUSH
46262: LD_INT 2
46264: NEG
46265: PUSH
46266: LD_INT 2
46268: NEG
46269: PUSH
46270: EMPTY
46271: LIST
46272: LIST
46273: PUSH
46274: EMPTY
46275: LIST
46276: LIST
46277: LIST
46278: LIST
46279: LIST
46280: LIST
46281: LIST
46282: LIST
46283: LIST
46284: LIST
46285: LIST
46286: LIST
46287: LIST
46288: LIST
46289: LIST
46290: LIST
46291: LIST
46292: LIST
46293: LIST
46294: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46295: LD_ADDR_VAR 0 22
46299: PUSH
46300: LD_INT 0
46302: PUSH
46303: LD_INT 0
46305: PUSH
46306: EMPTY
46307: LIST
46308: LIST
46309: PUSH
46310: LD_INT 0
46312: PUSH
46313: LD_INT 1
46315: NEG
46316: PUSH
46317: EMPTY
46318: LIST
46319: LIST
46320: PUSH
46321: LD_INT 1
46323: PUSH
46324: LD_INT 0
46326: PUSH
46327: EMPTY
46328: LIST
46329: LIST
46330: PUSH
46331: LD_INT 1
46333: PUSH
46334: LD_INT 1
46336: PUSH
46337: EMPTY
46338: LIST
46339: LIST
46340: PUSH
46341: LD_INT 0
46343: PUSH
46344: LD_INT 1
46346: PUSH
46347: EMPTY
46348: LIST
46349: LIST
46350: PUSH
46351: LD_INT 1
46353: NEG
46354: PUSH
46355: LD_INT 0
46357: PUSH
46358: EMPTY
46359: LIST
46360: LIST
46361: PUSH
46362: LD_INT 1
46364: NEG
46365: PUSH
46366: LD_INT 1
46368: NEG
46369: PUSH
46370: EMPTY
46371: LIST
46372: LIST
46373: PUSH
46374: LD_INT 1
46376: NEG
46377: PUSH
46378: LD_INT 2
46380: NEG
46381: PUSH
46382: EMPTY
46383: LIST
46384: LIST
46385: PUSH
46386: LD_INT 0
46388: PUSH
46389: LD_INT 2
46391: NEG
46392: PUSH
46393: EMPTY
46394: LIST
46395: LIST
46396: PUSH
46397: LD_INT 1
46399: PUSH
46400: LD_INT 1
46402: NEG
46403: PUSH
46404: EMPTY
46405: LIST
46406: LIST
46407: PUSH
46408: LD_INT 2
46410: PUSH
46411: LD_INT 0
46413: PUSH
46414: EMPTY
46415: LIST
46416: LIST
46417: PUSH
46418: LD_INT 2
46420: PUSH
46421: LD_INT 1
46423: PUSH
46424: EMPTY
46425: LIST
46426: LIST
46427: PUSH
46428: LD_INT 2
46430: PUSH
46431: LD_INT 2
46433: PUSH
46434: EMPTY
46435: LIST
46436: LIST
46437: PUSH
46438: LD_INT 1
46440: PUSH
46441: LD_INT 2
46443: PUSH
46444: EMPTY
46445: LIST
46446: LIST
46447: PUSH
46448: LD_INT 0
46450: PUSH
46451: LD_INT 2
46453: PUSH
46454: EMPTY
46455: LIST
46456: LIST
46457: PUSH
46458: LD_INT 1
46460: NEG
46461: PUSH
46462: LD_INT 1
46464: PUSH
46465: EMPTY
46466: LIST
46467: LIST
46468: PUSH
46469: LD_INT 2
46471: NEG
46472: PUSH
46473: LD_INT 0
46475: PUSH
46476: EMPTY
46477: LIST
46478: LIST
46479: PUSH
46480: LD_INT 2
46482: NEG
46483: PUSH
46484: LD_INT 1
46486: NEG
46487: PUSH
46488: EMPTY
46489: LIST
46490: LIST
46491: PUSH
46492: LD_INT 2
46494: NEG
46495: PUSH
46496: LD_INT 2
46498: NEG
46499: PUSH
46500: EMPTY
46501: LIST
46502: LIST
46503: PUSH
46504: EMPTY
46505: LIST
46506: LIST
46507: LIST
46508: LIST
46509: LIST
46510: LIST
46511: LIST
46512: LIST
46513: LIST
46514: LIST
46515: LIST
46516: LIST
46517: LIST
46518: LIST
46519: LIST
46520: LIST
46521: LIST
46522: LIST
46523: LIST
46524: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
46525: LD_ADDR_VAR 0 23
46529: PUSH
46530: LD_INT 0
46532: PUSH
46533: LD_INT 0
46535: PUSH
46536: EMPTY
46537: LIST
46538: LIST
46539: PUSH
46540: LD_INT 0
46542: PUSH
46543: LD_INT 1
46545: NEG
46546: PUSH
46547: EMPTY
46548: LIST
46549: LIST
46550: PUSH
46551: LD_INT 1
46553: PUSH
46554: LD_INT 0
46556: PUSH
46557: EMPTY
46558: LIST
46559: LIST
46560: PUSH
46561: LD_INT 1
46563: PUSH
46564: LD_INT 1
46566: PUSH
46567: EMPTY
46568: LIST
46569: LIST
46570: PUSH
46571: LD_INT 0
46573: PUSH
46574: LD_INT 1
46576: PUSH
46577: EMPTY
46578: LIST
46579: LIST
46580: PUSH
46581: LD_INT 1
46583: NEG
46584: PUSH
46585: LD_INT 0
46587: PUSH
46588: EMPTY
46589: LIST
46590: LIST
46591: PUSH
46592: LD_INT 1
46594: NEG
46595: PUSH
46596: LD_INT 1
46598: NEG
46599: PUSH
46600: EMPTY
46601: LIST
46602: LIST
46603: PUSH
46604: LD_INT 1
46606: NEG
46607: PUSH
46608: LD_INT 2
46610: NEG
46611: PUSH
46612: EMPTY
46613: LIST
46614: LIST
46615: PUSH
46616: LD_INT 0
46618: PUSH
46619: LD_INT 2
46621: NEG
46622: PUSH
46623: EMPTY
46624: LIST
46625: LIST
46626: PUSH
46627: LD_INT 1
46629: PUSH
46630: LD_INT 1
46632: NEG
46633: PUSH
46634: EMPTY
46635: LIST
46636: LIST
46637: PUSH
46638: LD_INT 2
46640: PUSH
46641: LD_INT 0
46643: PUSH
46644: EMPTY
46645: LIST
46646: LIST
46647: PUSH
46648: LD_INT 2
46650: PUSH
46651: LD_INT 1
46653: PUSH
46654: EMPTY
46655: LIST
46656: LIST
46657: PUSH
46658: LD_INT 2
46660: PUSH
46661: LD_INT 2
46663: PUSH
46664: EMPTY
46665: LIST
46666: LIST
46667: PUSH
46668: LD_INT 1
46670: PUSH
46671: LD_INT 2
46673: PUSH
46674: EMPTY
46675: LIST
46676: LIST
46677: PUSH
46678: LD_INT 0
46680: PUSH
46681: LD_INT 2
46683: PUSH
46684: EMPTY
46685: LIST
46686: LIST
46687: PUSH
46688: LD_INT 1
46690: NEG
46691: PUSH
46692: LD_INT 1
46694: PUSH
46695: EMPTY
46696: LIST
46697: LIST
46698: PUSH
46699: LD_INT 2
46701: NEG
46702: PUSH
46703: LD_INT 0
46705: PUSH
46706: EMPTY
46707: LIST
46708: LIST
46709: PUSH
46710: LD_INT 2
46712: NEG
46713: PUSH
46714: LD_INT 1
46716: NEG
46717: PUSH
46718: EMPTY
46719: LIST
46720: LIST
46721: PUSH
46722: LD_INT 2
46724: NEG
46725: PUSH
46726: LD_INT 2
46728: NEG
46729: PUSH
46730: EMPTY
46731: LIST
46732: LIST
46733: PUSH
46734: LD_INT 2
46736: NEG
46737: PUSH
46738: LD_INT 3
46740: NEG
46741: PUSH
46742: EMPTY
46743: LIST
46744: LIST
46745: PUSH
46746: LD_INT 1
46748: NEG
46749: PUSH
46750: LD_INT 3
46752: NEG
46753: PUSH
46754: EMPTY
46755: LIST
46756: LIST
46757: PUSH
46758: LD_INT 1
46760: PUSH
46761: LD_INT 2
46763: NEG
46764: PUSH
46765: EMPTY
46766: LIST
46767: LIST
46768: PUSH
46769: LD_INT 2
46771: PUSH
46772: LD_INT 1
46774: NEG
46775: PUSH
46776: EMPTY
46777: LIST
46778: LIST
46779: PUSH
46780: EMPTY
46781: LIST
46782: LIST
46783: LIST
46784: LIST
46785: LIST
46786: LIST
46787: LIST
46788: LIST
46789: LIST
46790: LIST
46791: LIST
46792: LIST
46793: LIST
46794: LIST
46795: LIST
46796: LIST
46797: LIST
46798: LIST
46799: LIST
46800: LIST
46801: LIST
46802: LIST
46803: LIST
46804: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
46805: LD_ADDR_VAR 0 24
46809: PUSH
46810: LD_INT 0
46812: PUSH
46813: LD_INT 0
46815: PUSH
46816: EMPTY
46817: LIST
46818: LIST
46819: PUSH
46820: LD_INT 0
46822: PUSH
46823: LD_INT 1
46825: NEG
46826: PUSH
46827: EMPTY
46828: LIST
46829: LIST
46830: PUSH
46831: LD_INT 1
46833: PUSH
46834: LD_INT 0
46836: PUSH
46837: EMPTY
46838: LIST
46839: LIST
46840: PUSH
46841: LD_INT 1
46843: PUSH
46844: LD_INT 1
46846: PUSH
46847: EMPTY
46848: LIST
46849: LIST
46850: PUSH
46851: LD_INT 0
46853: PUSH
46854: LD_INT 1
46856: PUSH
46857: EMPTY
46858: LIST
46859: LIST
46860: PUSH
46861: LD_INT 1
46863: NEG
46864: PUSH
46865: LD_INT 0
46867: PUSH
46868: EMPTY
46869: LIST
46870: LIST
46871: PUSH
46872: LD_INT 1
46874: NEG
46875: PUSH
46876: LD_INT 1
46878: NEG
46879: PUSH
46880: EMPTY
46881: LIST
46882: LIST
46883: PUSH
46884: LD_INT 1
46886: NEG
46887: PUSH
46888: LD_INT 2
46890: NEG
46891: PUSH
46892: EMPTY
46893: LIST
46894: LIST
46895: PUSH
46896: LD_INT 0
46898: PUSH
46899: LD_INT 2
46901: NEG
46902: PUSH
46903: EMPTY
46904: LIST
46905: LIST
46906: PUSH
46907: LD_INT 1
46909: PUSH
46910: LD_INT 1
46912: NEG
46913: PUSH
46914: EMPTY
46915: LIST
46916: LIST
46917: PUSH
46918: LD_INT 2
46920: PUSH
46921: LD_INT 0
46923: PUSH
46924: EMPTY
46925: LIST
46926: LIST
46927: PUSH
46928: LD_INT 2
46930: PUSH
46931: LD_INT 1
46933: PUSH
46934: EMPTY
46935: LIST
46936: LIST
46937: PUSH
46938: LD_INT 2
46940: PUSH
46941: LD_INT 2
46943: PUSH
46944: EMPTY
46945: LIST
46946: LIST
46947: PUSH
46948: LD_INT 1
46950: PUSH
46951: LD_INT 2
46953: PUSH
46954: EMPTY
46955: LIST
46956: LIST
46957: PUSH
46958: LD_INT 0
46960: PUSH
46961: LD_INT 2
46963: PUSH
46964: EMPTY
46965: LIST
46966: LIST
46967: PUSH
46968: LD_INT 1
46970: NEG
46971: PUSH
46972: LD_INT 1
46974: PUSH
46975: EMPTY
46976: LIST
46977: LIST
46978: PUSH
46979: LD_INT 2
46981: NEG
46982: PUSH
46983: LD_INT 0
46985: PUSH
46986: EMPTY
46987: LIST
46988: LIST
46989: PUSH
46990: LD_INT 2
46992: NEG
46993: PUSH
46994: LD_INT 1
46996: NEG
46997: PUSH
46998: EMPTY
46999: LIST
47000: LIST
47001: PUSH
47002: LD_INT 2
47004: NEG
47005: PUSH
47006: LD_INT 2
47008: NEG
47009: PUSH
47010: EMPTY
47011: LIST
47012: LIST
47013: PUSH
47014: LD_INT 1
47016: PUSH
47017: LD_INT 2
47019: NEG
47020: PUSH
47021: EMPTY
47022: LIST
47023: LIST
47024: PUSH
47025: LD_INT 2
47027: PUSH
47028: LD_INT 1
47030: NEG
47031: PUSH
47032: EMPTY
47033: LIST
47034: LIST
47035: PUSH
47036: LD_INT 3
47038: PUSH
47039: LD_INT 1
47041: PUSH
47042: EMPTY
47043: LIST
47044: LIST
47045: PUSH
47046: LD_INT 3
47048: PUSH
47049: LD_INT 2
47051: PUSH
47052: EMPTY
47053: LIST
47054: LIST
47055: PUSH
47056: EMPTY
47057: LIST
47058: LIST
47059: LIST
47060: LIST
47061: LIST
47062: LIST
47063: LIST
47064: LIST
47065: LIST
47066: LIST
47067: LIST
47068: LIST
47069: LIST
47070: LIST
47071: LIST
47072: LIST
47073: LIST
47074: LIST
47075: LIST
47076: LIST
47077: LIST
47078: LIST
47079: LIST
47080: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
47081: LD_ADDR_VAR 0 25
47085: PUSH
47086: LD_INT 0
47088: PUSH
47089: LD_INT 0
47091: PUSH
47092: EMPTY
47093: LIST
47094: LIST
47095: PUSH
47096: LD_INT 0
47098: PUSH
47099: LD_INT 1
47101: NEG
47102: PUSH
47103: EMPTY
47104: LIST
47105: LIST
47106: PUSH
47107: LD_INT 1
47109: PUSH
47110: LD_INT 0
47112: PUSH
47113: EMPTY
47114: LIST
47115: LIST
47116: PUSH
47117: LD_INT 1
47119: PUSH
47120: LD_INT 1
47122: PUSH
47123: EMPTY
47124: LIST
47125: LIST
47126: PUSH
47127: LD_INT 0
47129: PUSH
47130: LD_INT 1
47132: PUSH
47133: EMPTY
47134: LIST
47135: LIST
47136: PUSH
47137: LD_INT 1
47139: NEG
47140: PUSH
47141: LD_INT 0
47143: PUSH
47144: EMPTY
47145: LIST
47146: LIST
47147: PUSH
47148: LD_INT 1
47150: NEG
47151: PUSH
47152: LD_INT 1
47154: NEG
47155: PUSH
47156: EMPTY
47157: LIST
47158: LIST
47159: PUSH
47160: LD_INT 1
47162: NEG
47163: PUSH
47164: LD_INT 2
47166: NEG
47167: PUSH
47168: EMPTY
47169: LIST
47170: LIST
47171: PUSH
47172: LD_INT 0
47174: PUSH
47175: LD_INT 2
47177: NEG
47178: PUSH
47179: EMPTY
47180: LIST
47181: LIST
47182: PUSH
47183: LD_INT 1
47185: PUSH
47186: LD_INT 1
47188: NEG
47189: PUSH
47190: EMPTY
47191: LIST
47192: LIST
47193: PUSH
47194: LD_INT 2
47196: PUSH
47197: LD_INT 0
47199: PUSH
47200: EMPTY
47201: LIST
47202: LIST
47203: PUSH
47204: LD_INT 2
47206: PUSH
47207: LD_INT 1
47209: PUSH
47210: EMPTY
47211: LIST
47212: LIST
47213: PUSH
47214: LD_INT 2
47216: PUSH
47217: LD_INT 2
47219: PUSH
47220: EMPTY
47221: LIST
47222: LIST
47223: PUSH
47224: LD_INT 1
47226: PUSH
47227: LD_INT 2
47229: PUSH
47230: EMPTY
47231: LIST
47232: LIST
47233: PUSH
47234: LD_INT 0
47236: PUSH
47237: LD_INT 2
47239: PUSH
47240: EMPTY
47241: LIST
47242: LIST
47243: PUSH
47244: LD_INT 1
47246: NEG
47247: PUSH
47248: LD_INT 1
47250: PUSH
47251: EMPTY
47252: LIST
47253: LIST
47254: PUSH
47255: LD_INT 2
47257: NEG
47258: PUSH
47259: LD_INT 0
47261: PUSH
47262: EMPTY
47263: LIST
47264: LIST
47265: PUSH
47266: LD_INT 2
47268: NEG
47269: PUSH
47270: LD_INT 1
47272: NEG
47273: PUSH
47274: EMPTY
47275: LIST
47276: LIST
47277: PUSH
47278: LD_INT 2
47280: NEG
47281: PUSH
47282: LD_INT 2
47284: NEG
47285: PUSH
47286: EMPTY
47287: LIST
47288: LIST
47289: PUSH
47290: LD_INT 3
47292: PUSH
47293: LD_INT 1
47295: PUSH
47296: EMPTY
47297: LIST
47298: LIST
47299: PUSH
47300: LD_INT 3
47302: PUSH
47303: LD_INT 2
47305: PUSH
47306: EMPTY
47307: LIST
47308: LIST
47309: PUSH
47310: LD_INT 2
47312: PUSH
47313: LD_INT 3
47315: PUSH
47316: EMPTY
47317: LIST
47318: LIST
47319: PUSH
47320: LD_INT 1
47322: PUSH
47323: LD_INT 3
47325: PUSH
47326: EMPTY
47327: LIST
47328: LIST
47329: PUSH
47330: EMPTY
47331: LIST
47332: LIST
47333: LIST
47334: LIST
47335: LIST
47336: LIST
47337: LIST
47338: LIST
47339: LIST
47340: LIST
47341: LIST
47342: LIST
47343: LIST
47344: LIST
47345: LIST
47346: LIST
47347: LIST
47348: LIST
47349: LIST
47350: LIST
47351: LIST
47352: LIST
47353: LIST
47354: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
47355: LD_ADDR_VAR 0 26
47359: PUSH
47360: LD_INT 0
47362: PUSH
47363: LD_INT 0
47365: PUSH
47366: EMPTY
47367: LIST
47368: LIST
47369: PUSH
47370: LD_INT 0
47372: PUSH
47373: LD_INT 1
47375: NEG
47376: PUSH
47377: EMPTY
47378: LIST
47379: LIST
47380: PUSH
47381: LD_INT 1
47383: PUSH
47384: LD_INT 0
47386: PUSH
47387: EMPTY
47388: LIST
47389: LIST
47390: PUSH
47391: LD_INT 1
47393: PUSH
47394: LD_INT 1
47396: PUSH
47397: EMPTY
47398: LIST
47399: LIST
47400: PUSH
47401: LD_INT 0
47403: PUSH
47404: LD_INT 1
47406: PUSH
47407: EMPTY
47408: LIST
47409: LIST
47410: PUSH
47411: LD_INT 1
47413: NEG
47414: PUSH
47415: LD_INT 0
47417: PUSH
47418: EMPTY
47419: LIST
47420: LIST
47421: PUSH
47422: LD_INT 1
47424: NEG
47425: PUSH
47426: LD_INT 1
47428: NEG
47429: PUSH
47430: EMPTY
47431: LIST
47432: LIST
47433: PUSH
47434: LD_INT 1
47436: NEG
47437: PUSH
47438: LD_INT 2
47440: NEG
47441: PUSH
47442: EMPTY
47443: LIST
47444: LIST
47445: PUSH
47446: LD_INT 0
47448: PUSH
47449: LD_INT 2
47451: NEG
47452: PUSH
47453: EMPTY
47454: LIST
47455: LIST
47456: PUSH
47457: LD_INT 1
47459: PUSH
47460: LD_INT 1
47462: NEG
47463: PUSH
47464: EMPTY
47465: LIST
47466: LIST
47467: PUSH
47468: LD_INT 2
47470: PUSH
47471: LD_INT 0
47473: PUSH
47474: EMPTY
47475: LIST
47476: LIST
47477: PUSH
47478: LD_INT 2
47480: PUSH
47481: LD_INT 1
47483: PUSH
47484: EMPTY
47485: LIST
47486: LIST
47487: PUSH
47488: LD_INT 2
47490: PUSH
47491: LD_INT 2
47493: PUSH
47494: EMPTY
47495: LIST
47496: LIST
47497: PUSH
47498: LD_INT 1
47500: PUSH
47501: LD_INT 2
47503: PUSH
47504: EMPTY
47505: LIST
47506: LIST
47507: PUSH
47508: LD_INT 0
47510: PUSH
47511: LD_INT 2
47513: PUSH
47514: EMPTY
47515: LIST
47516: LIST
47517: PUSH
47518: LD_INT 1
47520: NEG
47521: PUSH
47522: LD_INT 1
47524: PUSH
47525: EMPTY
47526: LIST
47527: LIST
47528: PUSH
47529: LD_INT 2
47531: NEG
47532: PUSH
47533: LD_INT 0
47535: PUSH
47536: EMPTY
47537: LIST
47538: LIST
47539: PUSH
47540: LD_INT 2
47542: NEG
47543: PUSH
47544: LD_INT 1
47546: NEG
47547: PUSH
47548: EMPTY
47549: LIST
47550: LIST
47551: PUSH
47552: LD_INT 2
47554: NEG
47555: PUSH
47556: LD_INT 2
47558: NEG
47559: PUSH
47560: EMPTY
47561: LIST
47562: LIST
47563: PUSH
47564: LD_INT 2
47566: PUSH
47567: LD_INT 3
47569: PUSH
47570: EMPTY
47571: LIST
47572: LIST
47573: PUSH
47574: LD_INT 1
47576: PUSH
47577: LD_INT 3
47579: PUSH
47580: EMPTY
47581: LIST
47582: LIST
47583: PUSH
47584: LD_INT 1
47586: NEG
47587: PUSH
47588: LD_INT 2
47590: PUSH
47591: EMPTY
47592: LIST
47593: LIST
47594: PUSH
47595: LD_INT 2
47597: NEG
47598: PUSH
47599: LD_INT 1
47601: PUSH
47602: EMPTY
47603: LIST
47604: LIST
47605: PUSH
47606: EMPTY
47607: LIST
47608: LIST
47609: LIST
47610: LIST
47611: LIST
47612: LIST
47613: LIST
47614: LIST
47615: LIST
47616: LIST
47617: LIST
47618: LIST
47619: LIST
47620: LIST
47621: LIST
47622: LIST
47623: LIST
47624: LIST
47625: LIST
47626: LIST
47627: LIST
47628: LIST
47629: LIST
47630: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47631: LD_ADDR_VAR 0 27
47635: PUSH
47636: LD_INT 0
47638: PUSH
47639: LD_INT 0
47641: PUSH
47642: EMPTY
47643: LIST
47644: LIST
47645: PUSH
47646: LD_INT 0
47648: PUSH
47649: LD_INT 1
47651: NEG
47652: PUSH
47653: EMPTY
47654: LIST
47655: LIST
47656: PUSH
47657: LD_INT 1
47659: PUSH
47660: LD_INT 0
47662: PUSH
47663: EMPTY
47664: LIST
47665: LIST
47666: PUSH
47667: LD_INT 1
47669: PUSH
47670: LD_INT 1
47672: PUSH
47673: EMPTY
47674: LIST
47675: LIST
47676: PUSH
47677: LD_INT 0
47679: PUSH
47680: LD_INT 1
47682: PUSH
47683: EMPTY
47684: LIST
47685: LIST
47686: PUSH
47687: LD_INT 1
47689: NEG
47690: PUSH
47691: LD_INT 0
47693: PUSH
47694: EMPTY
47695: LIST
47696: LIST
47697: PUSH
47698: LD_INT 1
47700: NEG
47701: PUSH
47702: LD_INT 1
47704: NEG
47705: PUSH
47706: EMPTY
47707: LIST
47708: LIST
47709: PUSH
47710: LD_INT 1
47712: NEG
47713: PUSH
47714: LD_INT 2
47716: NEG
47717: PUSH
47718: EMPTY
47719: LIST
47720: LIST
47721: PUSH
47722: LD_INT 0
47724: PUSH
47725: LD_INT 2
47727: NEG
47728: PUSH
47729: EMPTY
47730: LIST
47731: LIST
47732: PUSH
47733: LD_INT 1
47735: PUSH
47736: LD_INT 1
47738: NEG
47739: PUSH
47740: EMPTY
47741: LIST
47742: LIST
47743: PUSH
47744: LD_INT 2
47746: PUSH
47747: LD_INT 0
47749: PUSH
47750: EMPTY
47751: LIST
47752: LIST
47753: PUSH
47754: LD_INT 2
47756: PUSH
47757: LD_INT 1
47759: PUSH
47760: EMPTY
47761: LIST
47762: LIST
47763: PUSH
47764: LD_INT 2
47766: PUSH
47767: LD_INT 2
47769: PUSH
47770: EMPTY
47771: LIST
47772: LIST
47773: PUSH
47774: LD_INT 1
47776: PUSH
47777: LD_INT 2
47779: PUSH
47780: EMPTY
47781: LIST
47782: LIST
47783: PUSH
47784: LD_INT 0
47786: PUSH
47787: LD_INT 2
47789: PUSH
47790: EMPTY
47791: LIST
47792: LIST
47793: PUSH
47794: LD_INT 1
47796: NEG
47797: PUSH
47798: LD_INT 1
47800: PUSH
47801: EMPTY
47802: LIST
47803: LIST
47804: PUSH
47805: LD_INT 2
47807: NEG
47808: PUSH
47809: LD_INT 0
47811: PUSH
47812: EMPTY
47813: LIST
47814: LIST
47815: PUSH
47816: LD_INT 2
47818: NEG
47819: PUSH
47820: LD_INT 1
47822: NEG
47823: PUSH
47824: EMPTY
47825: LIST
47826: LIST
47827: PUSH
47828: LD_INT 2
47830: NEG
47831: PUSH
47832: LD_INT 2
47834: NEG
47835: PUSH
47836: EMPTY
47837: LIST
47838: LIST
47839: PUSH
47840: LD_INT 1
47842: NEG
47843: PUSH
47844: LD_INT 2
47846: PUSH
47847: EMPTY
47848: LIST
47849: LIST
47850: PUSH
47851: LD_INT 2
47853: NEG
47854: PUSH
47855: LD_INT 1
47857: PUSH
47858: EMPTY
47859: LIST
47860: LIST
47861: PUSH
47862: LD_INT 3
47864: NEG
47865: PUSH
47866: LD_INT 1
47868: NEG
47869: PUSH
47870: EMPTY
47871: LIST
47872: LIST
47873: PUSH
47874: LD_INT 3
47876: NEG
47877: PUSH
47878: LD_INT 2
47880: NEG
47881: PUSH
47882: EMPTY
47883: LIST
47884: LIST
47885: PUSH
47886: EMPTY
47887: LIST
47888: LIST
47889: LIST
47890: LIST
47891: LIST
47892: LIST
47893: LIST
47894: LIST
47895: LIST
47896: LIST
47897: LIST
47898: LIST
47899: LIST
47900: LIST
47901: LIST
47902: LIST
47903: LIST
47904: LIST
47905: LIST
47906: LIST
47907: LIST
47908: LIST
47909: LIST
47910: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47911: LD_ADDR_VAR 0 28
47915: PUSH
47916: LD_INT 0
47918: PUSH
47919: LD_INT 0
47921: PUSH
47922: EMPTY
47923: LIST
47924: LIST
47925: PUSH
47926: LD_INT 0
47928: PUSH
47929: LD_INT 1
47931: NEG
47932: PUSH
47933: EMPTY
47934: LIST
47935: LIST
47936: PUSH
47937: LD_INT 1
47939: PUSH
47940: LD_INT 0
47942: PUSH
47943: EMPTY
47944: LIST
47945: LIST
47946: PUSH
47947: LD_INT 1
47949: PUSH
47950: LD_INT 1
47952: PUSH
47953: EMPTY
47954: LIST
47955: LIST
47956: PUSH
47957: LD_INT 0
47959: PUSH
47960: LD_INT 1
47962: PUSH
47963: EMPTY
47964: LIST
47965: LIST
47966: PUSH
47967: LD_INT 1
47969: NEG
47970: PUSH
47971: LD_INT 0
47973: PUSH
47974: EMPTY
47975: LIST
47976: LIST
47977: PUSH
47978: LD_INT 1
47980: NEG
47981: PUSH
47982: LD_INT 1
47984: NEG
47985: PUSH
47986: EMPTY
47987: LIST
47988: LIST
47989: PUSH
47990: LD_INT 1
47992: NEG
47993: PUSH
47994: LD_INT 2
47996: NEG
47997: PUSH
47998: EMPTY
47999: LIST
48000: LIST
48001: PUSH
48002: LD_INT 0
48004: PUSH
48005: LD_INT 2
48007: NEG
48008: PUSH
48009: EMPTY
48010: LIST
48011: LIST
48012: PUSH
48013: LD_INT 1
48015: PUSH
48016: LD_INT 1
48018: NEG
48019: PUSH
48020: EMPTY
48021: LIST
48022: LIST
48023: PUSH
48024: LD_INT 2
48026: PUSH
48027: LD_INT 0
48029: PUSH
48030: EMPTY
48031: LIST
48032: LIST
48033: PUSH
48034: LD_INT 2
48036: PUSH
48037: LD_INT 1
48039: PUSH
48040: EMPTY
48041: LIST
48042: LIST
48043: PUSH
48044: LD_INT 2
48046: PUSH
48047: LD_INT 2
48049: PUSH
48050: EMPTY
48051: LIST
48052: LIST
48053: PUSH
48054: LD_INT 1
48056: PUSH
48057: LD_INT 2
48059: PUSH
48060: EMPTY
48061: LIST
48062: LIST
48063: PUSH
48064: LD_INT 0
48066: PUSH
48067: LD_INT 2
48069: PUSH
48070: EMPTY
48071: LIST
48072: LIST
48073: PUSH
48074: LD_INT 1
48076: NEG
48077: PUSH
48078: LD_INT 1
48080: PUSH
48081: EMPTY
48082: LIST
48083: LIST
48084: PUSH
48085: LD_INT 2
48087: NEG
48088: PUSH
48089: LD_INT 0
48091: PUSH
48092: EMPTY
48093: LIST
48094: LIST
48095: PUSH
48096: LD_INT 2
48098: NEG
48099: PUSH
48100: LD_INT 1
48102: NEG
48103: PUSH
48104: EMPTY
48105: LIST
48106: LIST
48107: PUSH
48108: LD_INT 2
48110: NEG
48111: PUSH
48112: LD_INT 2
48114: NEG
48115: PUSH
48116: EMPTY
48117: LIST
48118: LIST
48119: PUSH
48120: LD_INT 2
48122: NEG
48123: PUSH
48124: LD_INT 3
48126: NEG
48127: PUSH
48128: EMPTY
48129: LIST
48130: LIST
48131: PUSH
48132: LD_INT 1
48134: NEG
48135: PUSH
48136: LD_INT 3
48138: NEG
48139: PUSH
48140: EMPTY
48141: LIST
48142: LIST
48143: PUSH
48144: LD_INT 3
48146: NEG
48147: PUSH
48148: LD_INT 1
48150: NEG
48151: PUSH
48152: EMPTY
48153: LIST
48154: LIST
48155: PUSH
48156: LD_INT 3
48158: NEG
48159: PUSH
48160: LD_INT 2
48162: NEG
48163: PUSH
48164: EMPTY
48165: LIST
48166: LIST
48167: PUSH
48168: EMPTY
48169: LIST
48170: LIST
48171: LIST
48172: LIST
48173: LIST
48174: LIST
48175: LIST
48176: LIST
48177: LIST
48178: LIST
48179: LIST
48180: LIST
48181: LIST
48182: LIST
48183: LIST
48184: LIST
48185: LIST
48186: LIST
48187: LIST
48188: LIST
48189: LIST
48190: LIST
48191: LIST
48192: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48193: LD_ADDR_VAR 0 29
48197: PUSH
48198: LD_INT 0
48200: PUSH
48201: LD_INT 0
48203: PUSH
48204: EMPTY
48205: LIST
48206: LIST
48207: PUSH
48208: LD_INT 0
48210: PUSH
48211: LD_INT 1
48213: NEG
48214: PUSH
48215: EMPTY
48216: LIST
48217: LIST
48218: PUSH
48219: LD_INT 1
48221: PUSH
48222: LD_INT 0
48224: PUSH
48225: EMPTY
48226: LIST
48227: LIST
48228: PUSH
48229: LD_INT 1
48231: PUSH
48232: LD_INT 1
48234: PUSH
48235: EMPTY
48236: LIST
48237: LIST
48238: PUSH
48239: LD_INT 0
48241: PUSH
48242: LD_INT 1
48244: PUSH
48245: EMPTY
48246: LIST
48247: LIST
48248: PUSH
48249: LD_INT 1
48251: NEG
48252: PUSH
48253: LD_INT 0
48255: PUSH
48256: EMPTY
48257: LIST
48258: LIST
48259: PUSH
48260: LD_INT 1
48262: NEG
48263: PUSH
48264: LD_INT 1
48266: NEG
48267: PUSH
48268: EMPTY
48269: LIST
48270: LIST
48271: PUSH
48272: LD_INT 1
48274: NEG
48275: PUSH
48276: LD_INT 2
48278: NEG
48279: PUSH
48280: EMPTY
48281: LIST
48282: LIST
48283: PUSH
48284: LD_INT 0
48286: PUSH
48287: LD_INT 2
48289: NEG
48290: PUSH
48291: EMPTY
48292: LIST
48293: LIST
48294: PUSH
48295: LD_INT 1
48297: PUSH
48298: LD_INT 1
48300: NEG
48301: PUSH
48302: EMPTY
48303: LIST
48304: LIST
48305: PUSH
48306: LD_INT 2
48308: PUSH
48309: LD_INT 0
48311: PUSH
48312: EMPTY
48313: LIST
48314: LIST
48315: PUSH
48316: LD_INT 2
48318: PUSH
48319: LD_INT 1
48321: PUSH
48322: EMPTY
48323: LIST
48324: LIST
48325: PUSH
48326: LD_INT 1
48328: PUSH
48329: LD_INT 2
48331: PUSH
48332: EMPTY
48333: LIST
48334: LIST
48335: PUSH
48336: LD_INT 0
48338: PUSH
48339: LD_INT 2
48341: PUSH
48342: EMPTY
48343: LIST
48344: LIST
48345: PUSH
48346: LD_INT 1
48348: NEG
48349: PUSH
48350: LD_INT 1
48352: PUSH
48353: EMPTY
48354: LIST
48355: LIST
48356: PUSH
48357: LD_INT 2
48359: NEG
48360: PUSH
48361: LD_INT 1
48363: NEG
48364: PUSH
48365: EMPTY
48366: LIST
48367: LIST
48368: PUSH
48369: LD_INT 2
48371: NEG
48372: PUSH
48373: LD_INT 2
48375: NEG
48376: PUSH
48377: EMPTY
48378: LIST
48379: LIST
48380: PUSH
48381: LD_INT 2
48383: NEG
48384: PUSH
48385: LD_INT 3
48387: NEG
48388: PUSH
48389: EMPTY
48390: LIST
48391: LIST
48392: PUSH
48393: LD_INT 2
48395: PUSH
48396: LD_INT 1
48398: NEG
48399: PUSH
48400: EMPTY
48401: LIST
48402: LIST
48403: PUSH
48404: LD_INT 3
48406: PUSH
48407: LD_INT 1
48409: PUSH
48410: EMPTY
48411: LIST
48412: LIST
48413: PUSH
48414: LD_INT 1
48416: PUSH
48417: LD_INT 3
48419: PUSH
48420: EMPTY
48421: LIST
48422: LIST
48423: PUSH
48424: LD_INT 1
48426: NEG
48427: PUSH
48428: LD_INT 2
48430: PUSH
48431: EMPTY
48432: LIST
48433: LIST
48434: PUSH
48435: LD_INT 3
48437: NEG
48438: PUSH
48439: LD_INT 2
48441: NEG
48442: PUSH
48443: EMPTY
48444: LIST
48445: LIST
48446: PUSH
48447: EMPTY
48448: LIST
48449: LIST
48450: LIST
48451: LIST
48452: LIST
48453: LIST
48454: LIST
48455: LIST
48456: LIST
48457: LIST
48458: LIST
48459: LIST
48460: LIST
48461: LIST
48462: LIST
48463: LIST
48464: LIST
48465: LIST
48466: LIST
48467: LIST
48468: LIST
48469: LIST
48470: LIST
48471: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48472: LD_ADDR_VAR 0 30
48476: PUSH
48477: LD_INT 0
48479: PUSH
48480: LD_INT 0
48482: PUSH
48483: EMPTY
48484: LIST
48485: LIST
48486: PUSH
48487: LD_INT 0
48489: PUSH
48490: LD_INT 1
48492: NEG
48493: PUSH
48494: EMPTY
48495: LIST
48496: LIST
48497: PUSH
48498: LD_INT 1
48500: PUSH
48501: LD_INT 0
48503: PUSH
48504: EMPTY
48505: LIST
48506: LIST
48507: PUSH
48508: LD_INT 1
48510: PUSH
48511: LD_INT 1
48513: PUSH
48514: EMPTY
48515: LIST
48516: LIST
48517: PUSH
48518: LD_INT 0
48520: PUSH
48521: LD_INT 1
48523: PUSH
48524: EMPTY
48525: LIST
48526: LIST
48527: PUSH
48528: LD_INT 1
48530: NEG
48531: PUSH
48532: LD_INT 0
48534: PUSH
48535: EMPTY
48536: LIST
48537: LIST
48538: PUSH
48539: LD_INT 1
48541: NEG
48542: PUSH
48543: LD_INT 1
48545: NEG
48546: PUSH
48547: EMPTY
48548: LIST
48549: LIST
48550: PUSH
48551: LD_INT 1
48553: NEG
48554: PUSH
48555: LD_INT 2
48557: NEG
48558: PUSH
48559: EMPTY
48560: LIST
48561: LIST
48562: PUSH
48563: LD_INT 0
48565: PUSH
48566: LD_INT 2
48568: NEG
48569: PUSH
48570: EMPTY
48571: LIST
48572: LIST
48573: PUSH
48574: LD_INT 1
48576: PUSH
48577: LD_INT 1
48579: NEG
48580: PUSH
48581: EMPTY
48582: LIST
48583: LIST
48584: PUSH
48585: LD_INT 2
48587: PUSH
48588: LD_INT 0
48590: PUSH
48591: EMPTY
48592: LIST
48593: LIST
48594: PUSH
48595: LD_INT 2
48597: PUSH
48598: LD_INT 1
48600: PUSH
48601: EMPTY
48602: LIST
48603: LIST
48604: PUSH
48605: LD_INT 2
48607: PUSH
48608: LD_INT 2
48610: PUSH
48611: EMPTY
48612: LIST
48613: LIST
48614: PUSH
48615: LD_INT 1
48617: PUSH
48618: LD_INT 2
48620: PUSH
48621: EMPTY
48622: LIST
48623: LIST
48624: PUSH
48625: LD_INT 1
48627: NEG
48628: PUSH
48629: LD_INT 1
48631: PUSH
48632: EMPTY
48633: LIST
48634: LIST
48635: PUSH
48636: LD_INT 2
48638: NEG
48639: PUSH
48640: LD_INT 0
48642: PUSH
48643: EMPTY
48644: LIST
48645: LIST
48646: PUSH
48647: LD_INT 2
48649: NEG
48650: PUSH
48651: LD_INT 1
48653: NEG
48654: PUSH
48655: EMPTY
48656: LIST
48657: LIST
48658: PUSH
48659: LD_INT 1
48661: NEG
48662: PUSH
48663: LD_INT 3
48665: NEG
48666: PUSH
48667: EMPTY
48668: LIST
48669: LIST
48670: PUSH
48671: LD_INT 1
48673: PUSH
48674: LD_INT 2
48676: NEG
48677: PUSH
48678: EMPTY
48679: LIST
48680: LIST
48681: PUSH
48682: LD_INT 3
48684: PUSH
48685: LD_INT 2
48687: PUSH
48688: EMPTY
48689: LIST
48690: LIST
48691: PUSH
48692: LD_INT 2
48694: PUSH
48695: LD_INT 3
48697: PUSH
48698: EMPTY
48699: LIST
48700: LIST
48701: PUSH
48702: LD_INT 2
48704: NEG
48705: PUSH
48706: LD_INT 1
48708: PUSH
48709: EMPTY
48710: LIST
48711: LIST
48712: PUSH
48713: LD_INT 3
48715: NEG
48716: PUSH
48717: LD_INT 1
48719: NEG
48720: PUSH
48721: EMPTY
48722: LIST
48723: LIST
48724: PUSH
48725: EMPTY
48726: LIST
48727: LIST
48728: LIST
48729: LIST
48730: LIST
48731: LIST
48732: LIST
48733: LIST
48734: LIST
48735: LIST
48736: LIST
48737: LIST
48738: LIST
48739: LIST
48740: LIST
48741: LIST
48742: LIST
48743: LIST
48744: LIST
48745: LIST
48746: LIST
48747: LIST
48748: LIST
48749: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48750: LD_ADDR_VAR 0 31
48754: PUSH
48755: LD_INT 0
48757: PUSH
48758: LD_INT 0
48760: PUSH
48761: EMPTY
48762: LIST
48763: LIST
48764: PUSH
48765: LD_INT 0
48767: PUSH
48768: LD_INT 1
48770: NEG
48771: PUSH
48772: EMPTY
48773: LIST
48774: LIST
48775: PUSH
48776: LD_INT 1
48778: PUSH
48779: LD_INT 0
48781: PUSH
48782: EMPTY
48783: LIST
48784: LIST
48785: PUSH
48786: LD_INT 1
48788: PUSH
48789: LD_INT 1
48791: PUSH
48792: EMPTY
48793: LIST
48794: LIST
48795: PUSH
48796: LD_INT 0
48798: PUSH
48799: LD_INT 1
48801: PUSH
48802: EMPTY
48803: LIST
48804: LIST
48805: PUSH
48806: LD_INT 1
48808: NEG
48809: PUSH
48810: LD_INT 0
48812: PUSH
48813: EMPTY
48814: LIST
48815: LIST
48816: PUSH
48817: LD_INT 1
48819: NEG
48820: PUSH
48821: LD_INT 1
48823: NEG
48824: PUSH
48825: EMPTY
48826: LIST
48827: LIST
48828: PUSH
48829: LD_INT 1
48831: NEG
48832: PUSH
48833: LD_INT 2
48835: NEG
48836: PUSH
48837: EMPTY
48838: LIST
48839: LIST
48840: PUSH
48841: LD_INT 1
48843: PUSH
48844: LD_INT 1
48846: NEG
48847: PUSH
48848: EMPTY
48849: LIST
48850: LIST
48851: PUSH
48852: LD_INT 2
48854: PUSH
48855: LD_INT 0
48857: PUSH
48858: EMPTY
48859: LIST
48860: LIST
48861: PUSH
48862: LD_INT 2
48864: PUSH
48865: LD_INT 1
48867: PUSH
48868: EMPTY
48869: LIST
48870: LIST
48871: PUSH
48872: LD_INT 2
48874: PUSH
48875: LD_INT 2
48877: PUSH
48878: EMPTY
48879: LIST
48880: LIST
48881: PUSH
48882: LD_INT 1
48884: PUSH
48885: LD_INT 2
48887: PUSH
48888: EMPTY
48889: LIST
48890: LIST
48891: PUSH
48892: LD_INT 0
48894: PUSH
48895: LD_INT 2
48897: PUSH
48898: EMPTY
48899: LIST
48900: LIST
48901: PUSH
48902: LD_INT 1
48904: NEG
48905: PUSH
48906: LD_INT 1
48908: PUSH
48909: EMPTY
48910: LIST
48911: LIST
48912: PUSH
48913: LD_INT 2
48915: NEG
48916: PUSH
48917: LD_INT 1
48919: NEG
48920: PUSH
48921: EMPTY
48922: LIST
48923: LIST
48924: PUSH
48925: LD_INT 2
48927: NEG
48928: PUSH
48929: LD_INT 2
48931: NEG
48932: PUSH
48933: EMPTY
48934: LIST
48935: LIST
48936: PUSH
48937: LD_INT 2
48939: NEG
48940: PUSH
48941: LD_INT 3
48943: NEG
48944: PUSH
48945: EMPTY
48946: LIST
48947: LIST
48948: PUSH
48949: LD_INT 2
48951: PUSH
48952: LD_INT 1
48954: NEG
48955: PUSH
48956: EMPTY
48957: LIST
48958: LIST
48959: PUSH
48960: LD_INT 3
48962: PUSH
48963: LD_INT 1
48965: PUSH
48966: EMPTY
48967: LIST
48968: LIST
48969: PUSH
48970: LD_INT 1
48972: PUSH
48973: LD_INT 3
48975: PUSH
48976: EMPTY
48977: LIST
48978: LIST
48979: PUSH
48980: LD_INT 1
48982: NEG
48983: PUSH
48984: LD_INT 2
48986: PUSH
48987: EMPTY
48988: LIST
48989: LIST
48990: PUSH
48991: LD_INT 3
48993: NEG
48994: PUSH
48995: LD_INT 2
48997: NEG
48998: PUSH
48999: EMPTY
49000: LIST
49001: LIST
49002: PUSH
49003: EMPTY
49004: LIST
49005: LIST
49006: LIST
49007: LIST
49008: LIST
49009: LIST
49010: LIST
49011: LIST
49012: LIST
49013: LIST
49014: LIST
49015: LIST
49016: LIST
49017: LIST
49018: LIST
49019: LIST
49020: LIST
49021: LIST
49022: LIST
49023: LIST
49024: LIST
49025: LIST
49026: LIST
49027: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49028: LD_ADDR_VAR 0 32
49032: PUSH
49033: LD_INT 0
49035: PUSH
49036: LD_INT 0
49038: PUSH
49039: EMPTY
49040: LIST
49041: LIST
49042: PUSH
49043: LD_INT 0
49045: PUSH
49046: LD_INT 1
49048: NEG
49049: PUSH
49050: EMPTY
49051: LIST
49052: LIST
49053: PUSH
49054: LD_INT 1
49056: PUSH
49057: LD_INT 0
49059: PUSH
49060: EMPTY
49061: LIST
49062: LIST
49063: PUSH
49064: LD_INT 1
49066: PUSH
49067: LD_INT 1
49069: PUSH
49070: EMPTY
49071: LIST
49072: LIST
49073: PUSH
49074: LD_INT 0
49076: PUSH
49077: LD_INT 1
49079: PUSH
49080: EMPTY
49081: LIST
49082: LIST
49083: PUSH
49084: LD_INT 1
49086: NEG
49087: PUSH
49088: LD_INT 0
49090: PUSH
49091: EMPTY
49092: LIST
49093: LIST
49094: PUSH
49095: LD_INT 1
49097: NEG
49098: PUSH
49099: LD_INT 1
49101: NEG
49102: PUSH
49103: EMPTY
49104: LIST
49105: LIST
49106: PUSH
49107: LD_INT 1
49109: NEG
49110: PUSH
49111: LD_INT 2
49113: NEG
49114: PUSH
49115: EMPTY
49116: LIST
49117: LIST
49118: PUSH
49119: LD_INT 0
49121: PUSH
49122: LD_INT 2
49124: NEG
49125: PUSH
49126: EMPTY
49127: LIST
49128: LIST
49129: PUSH
49130: LD_INT 1
49132: PUSH
49133: LD_INT 1
49135: NEG
49136: PUSH
49137: EMPTY
49138: LIST
49139: LIST
49140: PUSH
49141: LD_INT 2
49143: PUSH
49144: LD_INT 1
49146: PUSH
49147: EMPTY
49148: LIST
49149: LIST
49150: PUSH
49151: LD_INT 2
49153: PUSH
49154: LD_INT 2
49156: PUSH
49157: EMPTY
49158: LIST
49159: LIST
49160: PUSH
49161: LD_INT 1
49163: PUSH
49164: LD_INT 2
49166: PUSH
49167: EMPTY
49168: LIST
49169: LIST
49170: PUSH
49171: LD_INT 0
49173: PUSH
49174: LD_INT 2
49176: PUSH
49177: EMPTY
49178: LIST
49179: LIST
49180: PUSH
49181: LD_INT 1
49183: NEG
49184: PUSH
49185: LD_INT 1
49187: PUSH
49188: EMPTY
49189: LIST
49190: LIST
49191: PUSH
49192: LD_INT 2
49194: NEG
49195: PUSH
49196: LD_INT 0
49198: PUSH
49199: EMPTY
49200: LIST
49201: LIST
49202: PUSH
49203: LD_INT 2
49205: NEG
49206: PUSH
49207: LD_INT 1
49209: NEG
49210: PUSH
49211: EMPTY
49212: LIST
49213: LIST
49214: PUSH
49215: LD_INT 1
49217: NEG
49218: PUSH
49219: LD_INT 3
49221: NEG
49222: PUSH
49223: EMPTY
49224: LIST
49225: LIST
49226: PUSH
49227: LD_INT 1
49229: PUSH
49230: LD_INT 2
49232: NEG
49233: PUSH
49234: EMPTY
49235: LIST
49236: LIST
49237: PUSH
49238: LD_INT 3
49240: PUSH
49241: LD_INT 2
49243: PUSH
49244: EMPTY
49245: LIST
49246: LIST
49247: PUSH
49248: LD_INT 2
49250: PUSH
49251: LD_INT 3
49253: PUSH
49254: EMPTY
49255: LIST
49256: LIST
49257: PUSH
49258: LD_INT 2
49260: NEG
49261: PUSH
49262: LD_INT 1
49264: PUSH
49265: EMPTY
49266: LIST
49267: LIST
49268: PUSH
49269: LD_INT 3
49271: NEG
49272: PUSH
49273: LD_INT 1
49275: NEG
49276: PUSH
49277: EMPTY
49278: LIST
49279: LIST
49280: PUSH
49281: EMPTY
49282: LIST
49283: LIST
49284: LIST
49285: LIST
49286: LIST
49287: LIST
49288: LIST
49289: LIST
49290: LIST
49291: LIST
49292: LIST
49293: LIST
49294: LIST
49295: LIST
49296: LIST
49297: LIST
49298: LIST
49299: LIST
49300: LIST
49301: LIST
49302: LIST
49303: LIST
49304: LIST
49305: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49306: LD_ADDR_VAR 0 33
49310: PUSH
49311: LD_INT 0
49313: PUSH
49314: LD_INT 0
49316: PUSH
49317: EMPTY
49318: LIST
49319: LIST
49320: PUSH
49321: LD_INT 0
49323: PUSH
49324: LD_INT 1
49326: NEG
49327: PUSH
49328: EMPTY
49329: LIST
49330: LIST
49331: PUSH
49332: LD_INT 1
49334: PUSH
49335: LD_INT 0
49337: PUSH
49338: EMPTY
49339: LIST
49340: LIST
49341: PUSH
49342: LD_INT 1
49344: PUSH
49345: LD_INT 1
49347: PUSH
49348: EMPTY
49349: LIST
49350: LIST
49351: PUSH
49352: LD_INT 0
49354: PUSH
49355: LD_INT 1
49357: PUSH
49358: EMPTY
49359: LIST
49360: LIST
49361: PUSH
49362: LD_INT 1
49364: NEG
49365: PUSH
49366: LD_INT 0
49368: PUSH
49369: EMPTY
49370: LIST
49371: LIST
49372: PUSH
49373: LD_INT 1
49375: NEG
49376: PUSH
49377: LD_INT 1
49379: NEG
49380: PUSH
49381: EMPTY
49382: LIST
49383: LIST
49384: PUSH
49385: LD_INT 1
49387: NEG
49388: PUSH
49389: LD_INT 2
49391: NEG
49392: PUSH
49393: EMPTY
49394: LIST
49395: LIST
49396: PUSH
49397: LD_INT 1
49399: PUSH
49400: LD_INT 1
49402: NEG
49403: PUSH
49404: EMPTY
49405: LIST
49406: LIST
49407: PUSH
49408: LD_INT 2
49410: PUSH
49411: LD_INT 0
49413: PUSH
49414: EMPTY
49415: LIST
49416: LIST
49417: PUSH
49418: LD_INT 2
49420: PUSH
49421: LD_INT 1
49423: PUSH
49424: EMPTY
49425: LIST
49426: LIST
49427: PUSH
49428: LD_INT 1
49430: PUSH
49431: LD_INT 2
49433: PUSH
49434: EMPTY
49435: LIST
49436: LIST
49437: PUSH
49438: LD_INT 0
49440: PUSH
49441: LD_INT 2
49443: PUSH
49444: EMPTY
49445: LIST
49446: LIST
49447: PUSH
49448: LD_INT 1
49450: NEG
49451: PUSH
49452: LD_INT 1
49454: PUSH
49455: EMPTY
49456: LIST
49457: LIST
49458: PUSH
49459: LD_INT 2
49461: NEG
49462: PUSH
49463: LD_INT 0
49465: PUSH
49466: EMPTY
49467: LIST
49468: LIST
49469: PUSH
49470: LD_INT 2
49472: NEG
49473: PUSH
49474: LD_INT 1
49476: NEG
49477: PUSH
49478: EMPTY
49479: LIST
49480: LIST
49481: PUSH
49482: LD_INT 2
49484: NEG
49485: PUSH
49486: LD_INT 2
49488: NEG
49489: PUSH
49490: EMPTY
49491: LIST
49492: LIST
49493: PUSH
49494: LD_INT 2
49496: NEG
49497: PUSH
49498: LD_INT 3
49500: NEG
49501: PUSH
49502: EMPTY
49503: LIST
49504: LIST
49505: PUSH
49506: LD_INT 2
49508: PUSH
49509: LD_INT 1
49511: NEG
49512: PUSH
49513: EMPTY
49514: LIST
49515: LIST
49516: PUSH
49517: LD_INT 3
49519: PUSH
49520: LD_INT 1
49522: PUSH
49523: EMPTY
49524: LIST
49525: LIST
49526: PUSH
49527: LD_INT 1
49529: PUSH
49530: LD_INT 3
49532: PUSH
49533: EMPTY
49534: LIST
49535: LIST
49536: PUSH
49537: LD_INT 1
49539: NEG
49540: PUSH
49541: LD_INT 2
49543: PUSH
49544: EMPTY
49545: LIST
49546: LIST
49547: PUSH
49548: LD_INT 3
49550: NEG
49551: PUSH
49552: LD_INT 2
49554: NEG
49555: PUSH
49556: EMPTY
49557: LIST
49558: LIST
49559: PUSH
49560: EMPTY
49561: LIST
49562: LIST
49563: LIST
49564: LIST
49565: LIST
49566: LIST
49567: LIST
49568: LIST
49569: LIST
49570: LIST
49571: LIST
49572: LIST
49573: LIST
49574: LIST
49575: LIST
49576: LIST
49577: LIST
49578: LIST
49579: LIST
49580: LIST
49581: LIST
49582: LIST
49583: LIST
49584: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49585: LD_ADDR_VAR 0 34
49589: PUSH
49590: LD_INT 0
49592: PUSH
49593: LD_INT 0
49595: PUSH
49596: EMPTY
49597: LIST
49598: LIST
49599: PUSH
49600: LD_INT 0
49602: PUSH
49603: LD_INT 1
49605: NEG
49606: PUSH
49607: EMPTY
49608: LIST
49609: LIST
49610: PUSH
49611: LD_INT 1
49613: PUSH
49614: LD_INT 0
49616: PUSH
49617: EMPTY
49618: LIST
49619: LIST
49620: PUSH
49621: LD_INT 1
49623: PUSH
49624: LD_INT 1
49626: PUSH
49627: EMPTY
49628: LIST
49629: LIST
49630: PUSH
49631: LD_INT 0
49633: PUSH
49634: LD_INT 1
49636: PUSH
49637: EMPTY
49638: LIST
49639: LIST
49640: PUSH
49641: LD_INT 1
49643: NEG
49644: PUSH
49645: LD_INT 0
49647: PUSH
49648: EMPTY
49649: LIST
49650: LIST
49651: PUSH
49652: LD_INT 1
49654: NEG
49655: PUSH
49656: LD_INT 1
49658: NEG
49659: PUSH
49660: EMPTY
49661: LIST
49662: LIST
49663: PUSH
49664: LD_INT 1
49666: NEG
49667: PUSH
49668: LD_INT 2
49670: NEG
49671: PUSH
49672: EMPTY
49673: LIST
49674: LIST
49675: PUSH
49676: LD_INT 0
49678: PUSH
49679: LD_INT 2
49681: NEG
49682: PUSH
49683: EMPTY
49684: LIST
49685: LIST
49686: PUSH
49687: LD_INT 1
49689: PUSH
49690: LD_INT 1
49692: NEG
49693: PUSH
49694: EMPTY
49695: LIST
49696: LIST
49697: PUSH
49698: LD_INT 2
49700: PUSH
49701: LD_INT 1
49703: PUSH
49704: EMPTY
49705: LIST
49706: LIST
49707: PUSH
49708: LD_INT 2
49710: PUSH
49711: LD_INT 2
49713: PUSH
49714: EMPTY
49715: LIST
49716: LIST
49717: PUSH
49718: LD_INT 1
49720: PUSH
49721: LD_INT 2
49723: PUSH
49724: EMPTY
49725: LIST
49726: LIST
49727: PUSH
49728: LD_INT 1
49730: NEG
49731: PUSH
49732: LD_INT 1
49734: PUSH
49735: EMPTY
49736: LIST
49737: LIST
49738: PUSH
49739: LD_INT 2
49741: NEG
49742: PUSH
49743: LD_INT 0
49745: PUSH
49746: EMPTY
49747: LIST
49748: LIST
49749: PUSH
49750: LD_INT 2
49752: NEG
49753: PUSH
49754: LD_INT 1
49756: NEG
49757: PUSH
49758: EMPTY
49759: LIST
49760: LIST
49761: PUSH
49762: LD_INT 2
49764: NEG
49765: PUSH
49766: LD_INT 2
49768: NEG
49769: PUSH
49770: EMPTY
49771: LIST
49772: LIST
49773: PUSH
49774: LD_INT 1
49776: NEG
49777: PUSH
49778: LD_INT 3
49780: NEG
49781: PUSH
49782: EMPTY
49783: LIST
49784: LIST
49785: PUSH
49786: LD_INT 1
49788: PUSH
49789: LD_INT 2
49791: NEG
49792: PUSH
49793: EMPTY
49794: LIST
49795: LIST
49796: PUSH
49797: LD_INT 3
49799: PUSH
49800: LD_INT 2
49802: PUSH
49803: EMPTY
49804: LIST
49805: LIST
49806: PUSH
49807: LD_INT 2
49809: PUSH
49810: LD_INT 3
49812: PUSH
49813: EMPTY
49814: LIST
49815: LIST
49816: PUSH
49817: LD_INT 2
49819: NEG
49820: PUSH
49821: LD_INT 1
49823: PUSH
49824: EMPTY
49825: LIST
49826: LIST
49827: PUSH
49828: LD_INT 3
49830: NEG
49831: PUSH
49832: LD_INT 1
49834: NEG
49835: PUSH
49836: EMPTY
49837: LIST
49838: LIST
49839: PUSH
49840: EMPTY
49841: LIST
49842: LIST
49843: LIST
49844: LIST
49845: LIST
49846: LIST
49847: LIST
49848: LIST
49849: LIST
49850: LIST
49851: LIST
49852: LIST
49853: LIST
49854: LIST
49855: LIST
49856: LIST
49857: LIST
49858: LIST
49859: LIST
49860: LIST
49861: LIST
49862: LIST
49863: LIST
49864: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
49865: LD_ADDR_VAR 0 35
49869: PUSH
49870: LD_INT 0
49872: PUSH
49873: LD_INT 0
49875: PUSH
49876: EMPTY
49877: LIST
49878: LIST
49879: PUSH
49880: LD_INT 0
49882: PUSH
49883: LD_INT 1
49885: NEG
49886: PUSH
49887: EMPTY
49888: LIST
49889: LIST
49890: PUSH
49891: LD_INT 1
49893: PUSH
49894: LD_INT 0
49896: PUSH
49897: EMPTY
49898: LIST
49899: LIST
49900: PUSH
49901: LD_INT 1
49903: PUSH
49904: LD_INT 1
49906: PUSH
49907: EMPTY
49908: LIST
49909: LIST
49910: PUSH
49911: LD_INT 0
49913: PUSH
49914: LD_INT 1
49916: PUSH
49917: EMPTY
49918: LIST
49919: LIST
49920: PUSH
49921: LD_INT 1
49923: NEG
49924: PUSH
49925: LD_INT 0
49927: PUSH
49928: EMPTY
49929: LIST
49930: LIST
49931: PUSH
49932: LD_INT 1
49934: NEG
49935: PUSH
49936: LD_INT 1
49938: NEG
49939: PUSH
49940: EMPTY
49941: LIST
49942: LIST
49943: PUSH
49944: LD_INT 2
49946: PUSH
49947: LD_INT 1
49949: PUSH
49950: EMPTY
49951: LIST
49952: LIST
49953: PUSH
49954: LD_INT 2
49956: NEG
49957: PUSH
49958: LD_INT 1
49960: NEG
49961: PUSH
49962: EMPTY
49963: LIST
49964: LIST
49965: PUSH
49966: EMPTY
49967: LIST
49968: LIST
49969: LIST
49970: LIST
49971: LIST
49972: LIST
49973: LIST
49974: LIST
49975: LIST
49976: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
49977: LD_ADDR_VAR 0 36
49981: PUSH
49982: LD_INT 0
49984: PUSH
49985: LD_INT 0
49987: PUSH
49988: EMPTY
49989: LIST
49990: LIST
49991: PUSH
49992: LD_INT 0
49994: PUSH
49995: LD_INT 1
49997: NEG
49998: PUSH
49999: EMPTY
50000: LIST
50001: LIST
50002: PUSH
50003: LD_INT 1
50005: PUSH
50006: LD_INT 0
50008: PUSH
50009: EMPTY
50010: LIST
50011: LIST
50012: PUSH
50013: LD_INT 1
50015: PUSH
50016: LD_INT 1
50018: PUSH
50019: EMPTY
50020: LIST
50021: LIST
50022: PUSH
50023: LD_INT 0
50025: PUSH
50026: LD_INT 1
50028: PUSH
50029: EMPTY
50030: LIST
50031: LIST
50032: PUSH
50033: LD_INT 1
50035: NEG
50036: PUSH
50037: LD_INT 0
50039: PUSH
50040: EMPTY
50041: LIST
50042: LIST
50043: PUSH
50044: LD_INT 1
50046: NEG
50047: PUSH
50048: LD_INT 1
50050: NEG
50051: PUSH
50052: EMPTY
50053: LIST
50054: LIST
50055: PUSH
50056: LD_INT 1
50058: NEG
50059: PUSH
50060: LD_INT 2
50062: NEG
50063: PUSH
50064: EMPTY
50065: LIST
50066: LIST
50067: PUSH
50068: LD_INT 1
50070: PUSH
50071: LD_INT 2
50073: PUSH
50074: EMPTY
50075: LIST
50076: LIST
50077: PUSH
50078: EMPTY
50079: LIST
50080: LIST
50081: LIST
50082: LIST
50083: LIST
50084: LIST
50085: LIST
50086: LIST
50087: LIST
50088: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50089: LD_ADDR_VAR 0 37
50093: PUSH
50094: LD_INT 0
50096: PUSH
50097: LD_INT 0
50099: PUSH
50100: EMPTY
50101: LIST
50102: LIST
50103: PUSH
50104: LD_INT 0
50106: PUSH
50107: LD_INT 1
50109: NEG
50110: PUSH
50111: EMPTY
50112: LIST
50113: LIST
50114: PUSH
50115: LD_INT 1
50117: PUSH
50118: LD_INT 0
50120: PUSH
50121: EMPTY
50122: LIST
50123: LIST
50124: PUSH
50125: LD_INT 1
50127: PUSH
50128: LD_INT 1
50130: PUSH
50131: EMPTY
50132: LIST
50133: LIST
50134: PUSH
50135: LD_INT 0
50137: PUSH
50138: LD_INT 1
50140: PUSH
50141: EMPTY
50142: LIST
50143: LIST
50144: PUSH
50145: LD_INT 1
50147: NEG
50148: PUSH
50149: LD_INT 0
50151: PUSH
50152: EMPTY
50153: LIST
50154: LIST
50155: PUSH
50156: LD_INT 1
50158: NEG
50159: PUSH
50160: LD_INT 1
50162: NEG
50163: PUSH
50164: EMPTY
50165: LIST
50166: LIST
50167: PUSH
50168: LD_INT 1
50170: PUSH
50171: LD_INT 1
50173: NEG
50174: PUSH
50175: EMPTY
50176: LIST
50177: LIST
50178: PUSH
50179: LD_INT 1
50181: NEG
50182: PUSH
50183: LD_INT 1
50185: PUSH
50186: EMPTY
50187: LIST
50188: LIST
50189: PUSH
50190: EMPTY
50191: LIST
50192: LIST
50193: LIST
50194: LIST
50195: LIST
50196: LIST
50197: LIST
50198: LIST
50199: LIST
50200: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50201: LD_ADDR_VAR 0 38
50205: PUSH
50206: LD_INT 0
50208: PUSH
50209: LD_INT 0
50211: PUSH
50212: EMPTY
50213: LIST
50214: LIST
50215: PUSH
50216: LD_INT 0
50218: PUSH
50219: LD_INT 1
50221: NEG
50222: PUSH
50223: EMPTY
50224: LIST
50225: LIST
50226: PUSH
50227: LD_INT 1
50229: PUSH
50230: LD_INT 0
50232: PUSH
50233: EMPTY
50234: LIST
50235: LIST
50236: PUSH
50237: LD_INT 1
50239: PUSH
50240: LD_INT 1
50242: PUSH
50243: EMPTY
50244: LIST
50245: LIST
50246: PUSH
50247: LD_INT 0
50249: PUSH
50250: LD_INT 1
50252: PUSH
50253: EMPTY
50254: LIST
50255: LIST
50256: PUSH
50257: LD_INT 1
50259: NEG
50260: PUSH
50261: LD_INT 0
50263: PUSH
50264: EMPTY
50265: LIST
50266: LIST
50267: PUSH
50268: LD_INT 1
50270: NEG
50271: PUSH
50272: LD_INT 1
50274: NEG
50275: PUSH
50276: EMPTY
50277: LIST
50278: LIST
50279: PUSH
50280: LD_INT 2
50282: PUSH
50283: LD_INT 1
50285: PUSH
50286: EMPTY
50287: LIST
50288: LIST
50289: PUSH
50290: LD_INT 2
50292: NEG
50293: PUSH
50294: LD_INT 1
50296: NEG
50297: PUSH
50298: EMPTY
50299: LIST
50300: LIST
50301: PUSH
50302: EMPTY
50303: LIST
50304: LIST
50305: LIST
50306: LIST
50307: LIST
50308: LIST
50309: LIST
50310: LIST
50311: LIST
50312: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50313: LD_ADDR_VAR 0 39
50317: PUSH
50318: LD_INT 0
50320: PUSH
50321: LD_INT 0
50323: PUSH
50324: EMPTY
50325: LIST
50326: LIST
50327: PUSH
50328: LD_INT 0
50330: PUSH
50331: LD_INT 1
50333: NEG
50334: PUSH
50335: EMPTY
50336: LIST
50337: LIST
50338: PUSH
50339: LD_INT 1
50341: PUSH
50342: LD_INT 0
50344: PUSH
50345: EMPTY
50346: LIST
50347: LIST
50348: PUSH
50349: LD_INT 1
50351: PUSH
50352: LD_INT 1
50354: PUSH
50355: EMPTY
50356: LIST
50357: LIST
50358: PUSH
50359: LD_INT 0
50361: PUSH
50362: LD_INT 1
50364: PUSH
50365: EMPTY
50366: LIST
50367: LIST
50368: PUSH
50369: LD_INT 1
50371: NEG
50372: PUSH
50373: LD_INT 0
50375: PUSH
50376: EMPTY
50377: LIST
50378: LIST
50379: PUSH
50380: LD_INT 1
50382: NEG
50383: PUSH
50384: LD_INT 1
50386: NEG
50387: PUSH
50388: EMPTY
50389: LIST
50390: LIST
50391: PUSH
50392: LD_INT 1
50394: NEG
50395: PUSH
50396: LD_INT 2
50398: NEG
50399: PUSH
50400: EMPTY
50401: LIST
50402: LIST
50403: PUSH
50404: LD_INT 1
50406: PUSH
50407: LD_INT 2
50409: PUSH
50410: EMPTY
50411: LIST
50412: LIST
50413: PUSH
50414: EMPTY
50415: LIST
50416: LIST
50417: LIST
50418: LIST
50419: LIST
50420: LIST
50421: LIST
50422: LIST
50423: LIST
50424: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50425: LD_ADDR_VAR 0 40
50429: PUSH
50430: LD_INT 0
50432: PUSH
50433: LD_INT 0
50435: PUSH
50436: EMPTY
50437: LIST
50438: LIST
50439: PUSH
50440: LD_INT 0
50442: PUSH
50443: LD_INT 1
50445: NEG
50446: PUSH
50447: EMPTY
50448: LIST
50449: LIST
50450: PUSH
50451: LD_INT 1
50453: PUSH
50454: LD_INT 0
50456: PUSH
50457: EMPTY
50458: LIST
50459: LIST
50460: PUSH
50461: LD_INT 1
50463: PUSH
50464: LD_INT 1
50466: PUSH
50467: EMPTY
50468: LIST
50469: LIST
50470: PUSH
50471: LD_INT 0
50473: PUSH
50474: LD_INT 1
50476: PUSH
50477: EMPTY
50478: LIST
50479: LIST
50480: PUSH
50481: LD_INT 1
50483: NEG
50484: PUSH
50485: LD_INT 0
50487: PUSH
50488: EMPTY
50489: LIST
50490: LIST
50491: PUSH
50492: LD_INT 1
50494: NEG
50495: PUSH
50496: LD_INT 1
50498: NEG
50499: PUSH
50500: EMPTY
50501: LIST
50502: LIST
50503: PUSH
50504: LD_INT 1
50506: PUSH
50507: LD_INT 1
50509: NEG
50510: PUSH
50511: EMPTY
50512: LIST
50513: LIST
50514: PUSH
50515: LD_INT 1
50517: NEG
50518: PUSH
50519: LD_INT 1
50521: PUSH
50522: EMPTY
50523: LIST
50524: LIST
50525: PUSH
50526: EMPTY
50527: LIST
50528: LIST
50529: LIST
50530: LIST
50531: LIST
50532: LIST
50533: LIST
50534: LIST
50535: LIST
50536: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50537: LD_ADDR_VAR 0 41
50541: PUSH
50542: LD_INT 0
50544: PUSH
50545: LD_INT 0
50547: PUSH
50548: EMPTY
50549: LIST
50550: LIST
50551: PUSH
50552: LD_INT 0
50554: PUSH
50555: LD_INT 1
50557: NEG
50558: PUSH
50559: EMPTY
50560: LIST
50561: LIST
50562: PUSH
50563: LD_INT 1
50565: PUSH
50566: LD_INT 0
50568: PUSH
50569: EMPTY
50570: LIST
50571: LIST
50572: PUSH
50573: LD_INT 1
50575: PUSH
50576: LD_INT 1
50578: PUSH
50579: EMPTY
50580: LIST
50581: LIST
50582: PUSH
50583: LD_INT 0
50585: PUSH
50586: LD_INT 1
50588: PUSH
50589: EMPTY
50590: LIST
50591: LIST
50592: PUSH
50593: LD_INT 1
50595: NEG
50596: PUSH
50597: LD_INT 0
50599: PUSH
50600: EMPTY
50601: LIST
50602: LIST
50603: PUSH
50604: LD_INT 1
50606: NEG
50607: PUSH
50608: LD_INT 1
50610: NEG
50611: PUSH
50612: EMPTY
50613: LIST
50614: LIST
50615: PUSH
50616: LD_INT 1
50618: NEG
50619: PUSH
50620: LD_INT 2
50622: NEG
50623: PUSH
50624: EMPTY
50625: LIST
50626: LIST
50627: PUSH
50628: LD_INT 1
50630: PUSH
50631: LD_INT 1
50633: NEG
50634: PUSH
50635: EMPTY
50636: LIST
50637: LIST
50638: PUSH
50639: LD_INT 2
50641: PUSH
50642: LD_INT 0
50644: PUSH
50645: EMPTY
50646: LIST
50647: LIST
50648: PUSH
50649: LD_INT 2
50651: PUSH
50652: LD_INT 1
50654: PUSH
50655: EMPTY
50656: LIST
50657: LIST
50658: PUSH
50659: LD_INT 2
50661: PUSH
50662: LD_INT 2
50664: PUSH
50665: EMPTY
50666: LIST
50667: LIST
50668: PUSH
50669: LD_INT 1
50671: PUSH
50672: LD_INT 2
50674: PUSH
50675: EMPTY
50676: LIST
50677: LIST
50678: PUSH
50679: LD_INT 1
50681: NEG
50682: PUSH
50683: LD_INT 1
50685: PUSH
50686: EMPTY
50687: LIST
50688: LIST
50689: PUSH
50690: LD_INT 2
50692: NEG
50693: PUSH
50694: LD_INT 0
50696: PUSH
50697: EMPTY
50698: LIST
50699: LIST
50700: PUSH
50701: LD_INT 2
50703: NEG
50704: PUSH
50705: LD_INT 1
50707: NEG
50708: PUSH
50709: EMPTY
50710: LIST
50711: LIST
50712: PUSH
50713: LD_INT 2
50715: NEG
50716: PUSH
50717: LD_INT 2
50719: NEG
50720: PUSH
50721: EMPTY
50722: LIST
50723: LIST
50724: PUSH
50725: LD_INT 2
50727: NEG
50728: PUSH
50729: LD_INT 3
50731: NEG
50732: PUSH
50733: EMPTY
50734: LIST
50735: LIST
50736: PUSH
50737: LD_INT 2
50739: PUSH
50740: LD_INT 1
50742: NEG
50743: PUSH
50744: EMPTY
50745: LIST
50746: LIST
50747: PUSH
50748: LD_INT 3
50750: PUSH
50751: LD_INT 0
50753: PUSH
50754: EMPTY
50755: LIST
50756: LIST
50757: PUSH
50758: LD_INT 3
50760: PUSH
50761: LD_INT 1
50763: PUSH
50764: EMPTY
50765: LIST
50766: LIST
50767: PUSH
50768: LD_INT 3
50770: PUSH
50771: LD_INT 2
50773: PUSH
50774: EMPTY
50775: LIST
50776: LIST
50777: PUSH
50778: LD_INT 3
50780: PUSH
50781: LD_INT 3
50783: PUSH
50784: EMPTY
50785: LIST
50786: LIST
50787: PUSH
50788: LD_INT 2
50790: PUSH
50791: LD_INT 3
50793: PUSH
50794: EMPTY
50795: LIST
50796: LIST
50797: PUSH
50798: LD_INT 2
50800: NEG
50801: PUSH
50802: LD_INT 1
50804: PUSH
50805: EMPTY
50806: LIST
50807: LIST
50808: PUSH
50809: LD_INT 3
50811: NEG
50812: PUSH
50813: LD_INT 0
50815: PUSH
50816: EMPTY
50817: LIST
50818: LIST
50819: PUSH
50820: LD_INT 3
50822: NEG
50823: PUSH
50824: LD_INT 1
50826: NEG
50827: PUSH
50828: EMPTY
50829: LIST
50830: LIST
50831: PUSH
50832: LD_INT 3
50834: NEG
50835: PUSH
50836: LD_INT 2
50838: NEG
50839: PUSH
50840: EMPTY
50841: LIST
50842: LIST
50843: PUSH
50844: LD_INT 3
50846: NEG
50847: PUSH
50848: LD_INT 3
50850: NEG
50851: PUSH
50852: EMPTY
50853: LIST
50854: LIST
50855: PUSH
50856: EMPTY
50857: LIST
50858: LIST
50859: LIST
50860: LIST
50861: LIST
50862: LIST
50863: LIST
50864: LIST
50865: LIST
50866: LIST
50867: LIST
50868: LIST
50869: LIST
50870: LIST
50871: LIST
50872: LIST
50873: LIST
50874: LIST
50875: LIST
50876: LIST
50877: LIST
50878: LIST
50879: LIST
50880: LIST
50881: LIST
50882: LIST
50883: LIST
50884: LIST
50885: LIST
50886: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50887: LD_ADDR_VAR 0 42
50891: PUSH
50892: LD_INT 0
50894: PUSH
50895: LD_INT 0
50897: PUSH
50898: EMPTY
50899: LIST
50900: LIST
50901: PUSH
50902: LD_INT 0
50904: PUSH
50905: LD_INT 1
50907: NEG
50908: PUSH
50909: EMPTY
50910: LIST
50911: LIST
50912: PUSH
50913: LD_INT 1
50915: PUSH
50916: LD_INT 0
50918: PUSH
50919: EMPTY
50920: LIST
50921: LIST
50922: PUSH
50923: LD_INT 1
50925: PUSH
50926: LD_INT 1
50928: PUSH
50929: EMPTY
50930: LIST
50931: LIST
50932: PUSH
50933: LD_INT 0
50935: PUSH
50936: LD_INT 1
50938: PUSH
50939: EMPTY
50940: LIST
50941: LIST
50942: PUSH
50943: LD_INT 1
50945: NEG
50946: PUSH
50947: LD_INT 0
50949: PUSH
50950: EMPTY
50951: LIST
50952: LIST
50953: PUSH
50954: LD_INT 1
50956: NEG
50957: PUSH
50958: LD_INT 1
50960: NEG
50961: PUSH
50962: EMPTY
50963: LIST
50964: LIST
50965: PUSH
50966: LD_INT 1
50968: NEG
50969: PUSH
50970: LD_INT 2
50972: NEG
50973: PUSH
50974: EMPTY
50975: LIST
50976: LIST
50977: PUSH
50978: LD_INT 0
50980: PUSH
50981: LD_INT 2
50983: NEG
50984: PUSH
50985: EMPTY
50986: LIST
50987: LIST
50988: PUSH
50989: LD_INT 1
50991: PUSH
50992: LD_INT 1
50994: NEG
50995: PUSH
50996: EMPTY
50997: LIST
50998: LIST
50999: PUSH
51000: LD_INT 2
51002: PUSH
51003: LD_INT 1
51005: PUSH
51006: EMPTY
51007: LIST
51008: LIST
51009: PUSH
51010: LD_INT 2
51012: PUSH
51013: LD_INT 2
51015: PUSH
51016: EMPTY
51017: LIST
51018: LIST
51019: PUSH
51020: LD_INT 1
51022: PUSH
51023: LD_INT 2
51025: PUSH
51026: EMPTY
51027: LIST
51028: LIST
51029: PUSH
51030: LD_INT 0
51032: PUSH
51033: LD_INT 2
51035: PUSH
51036: EMPTY
51037: LIST
51038: LIST
51039: PUSH
51040: LD_INT 1
51042: NEG
51043: PUSH
51044: LD_INT 1
51046: PUSH
51047: EMPTY
51048: LIST
51049: LIST
51050: PUSH
51051: LD_INT 2
51053: NEG
51054: PUSH
51055: LD_INT 1
51057: NEG
51058: PUSH
51059: EMPTY
51060: LIST
51061: LIST
51062: PUSH
51063: LD_INT 2
51065: NEG
51066: PUSH
51067: LD_INT 2
51069: NEG
51070: PUSH
51071: EMPTY
51072: LIST
51073: LIST
51074: PUSH
51075: LD_INT 2
51077: NEG
51078: PUSH
51079: LD_INT 3
51081: NEG
51082: PUSH
51083: EMPTY
51084: LIST
51085: LIST
51086: PUSH
51087: LD_INT 1
51089: NEG
51090: PUSH
51091: LD_INT 3
51093: NEG
51094: PUSH
51095: EMPTY
51096: LIST
51097: LIST
51098: PUSH
51099: LD_INT 0
51101: PUSH
51102: LD_INT 3
51104: NEG
51105: PUSH
51106: EMPTY
51107: LIST
51108: LIST
51109: PUSH
51110: LD_INT 1
51112: PUSH
51113: LD_INT 2
51115: NEG
51116: PUSH
51117: EMPTY
51118: LIST
51119: LIST
51120: PUSH
51121: LD_INT 3
51123: PUSH
51124: LD_INT 2
51126: PUSH
51127: EMPTY
51128: LIST
51129: LIST
51130: PUSH
51131: LD_INT 3
51133: PUSH
51134: LD_INT 3
51136: PUSH
51137: EMPTY
51138: LIST
51139: LIST
51140: PUSH
51141: LD_INT 2
51143: PUSH
51144: LD_INT 3
51146: PUSH
51147: EMPTY
51148: LIST
51149: LIST
51150: PUSH
51151: LD_INT 1
51153: PUSH
51154: LD_INT 3
51156: PUSH
51157: EMPTY
51158: LIST
51159: LIST
51160: PUSH
51161: LD_INT 0
51163: PUSH
51164: LD_INT 3
51166: PUSH
51167: EMPTY
51168: LIST
51169: LIST
51170: PUSH
51171: LD_INT 1
51173: NEG
51174: PUSH
51175: LD_INT 2
51177: PUSH
51178: EMPTY
51179: LIST
51180: LIST
51181: PUSH
51182: LD_INT 3
51184: NEG
51185: PUSH
51186: LD_INT 2
51188: NEG
51189: PUSH
51190: EMPTY
51191: LIST
51192: LIST
51193: PUSH
51194: LD_INT 3
51196: NEG
51197: PUSH
51198: LD_INT 3
51200: NEG
51201: PUSH
51202: EMPTY
51203: LIST
51204: LIST
51205: PUSH
51206: EMPTY
51207: LIST
51208: LIST
51209: LIST
51210: LIST
51211: LIST
51212: LIST
51213: LIST
51214: LIST
51215: LIST
51216: LIST
51217: LIST
51218: LIST
51219: LIST
51220: LIST
51221: LIST
51222: LIST
51223: LIST
51224: LIST
51225: LIST
51226: LIST
51227: LIST
51228: LIST
51229: LIST
51230: LIST
51231: LIST
51232: LIST
51233: LIST
51234: LIST
51235: LIST
51236: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51237: LD_ADDR_VAR 0 43
51241: PUSH
51242: LD_INT 0
51244: PUSH
51245: LD_INT 0
51247: PUSH
51248: EMPTY
51249: LIST
51250: LIST
51251: PUSH
51252: LD_INT 0
51254: PUSH
51255: LD_INT 1
51257: NEG
51258: PUSH
51259: EMPTY
51260: LIST
51261: LIST
51262: PUSH
51263: LD_INT 1
51265: PUSH
51266: LD_INT 0
51268: PUSH
51269: EMPTY
51270: LIST
51271: LIST
51272: PUSH
51273: LD_INT 1
51275: PUSH
51276: LD_INT 1
51278: PUSH
51279: EMPTY
51280: LIST
51281: LIST
51282: PUSH
51283: LD_INT 0
51285: PUSH
51286: LD_INT 1
51288: PUSH
51289: EMPTY
51290: LIST
51291: LIST
51292: PUSH
51293: LD_INT 1
51295: NEG
51296: PUSH
51297: LD_INT 0
51299: PUSH
51300: EMPTY
51301: LIST
51302: LIST
51303: PUSH
51304: LD_INT 1
51306: NEG
51307: PUSH
51308: LD_INT 1
51310: NEG
51311: PUSH
51312: EMPTY
51313: LIST
51314: LIST
51315: PUSH
51316: LD_INT 1
51318: NEG
51319: PUSH
51320: LD_INT 2
51322: NEG
51323: PUSH
51324: EMPTY
51325: LIST
51326: LIST
51327: PUSH
51328: LD_INT 0
51330: PUSH
51331: LD_INT 2
51333: NEG
51334: PUSH
51335: EMPTY
51336: LIST
51337: LIST
51338: PUSH
51339: LD_INT 1
51341: PUSH
51342: LD_INT 1
51344: NEG
51345: PUSH
51346: EMPTY
51347: LIST
51348: LIST
51349: PUSH
51350: LD_INT 2
51352: PUSH
51353: LD_INT 0
51355: PUSH
51356: EMPTY
51357: LIST
51358: LIST
51359: PUSH
51360: LD_INT 2
51362: PUSH
51363: LD_INT 1
51365: PUSH
51366: EMPTY
51367: LIST
51368: LIST
51369: PUSH
51370: LD_INT 1
51372: PUSH
51373: LD_INT 2
51375: PUSH
51376: EMPTY
51377: LIST
51378: LIST
51379: PUSH
51380: LD_INT 0
51382: PUSH
51383: LD_INT 2
51385: PUSH
51386: EMPTY
51387: LIST
51388: LIST
51389: PUSH
51390: LD_INT 1
51392: NEG
51393: PUSH
51394: LD_INT 1
51396: PUSH
51397: EMPTY
51398: LIST
51399: LIST
51400: PUSH
51401: LD_INT 2
51403: NEG
51404: PUSH
51405: LD_INT 0
51407: PUSH
51408: EMPTY
51409: LIST
51410: LIST
51411: PUSH
51412: LD_INT 2
51414: NEG
51415: PUSH
51416: LD_INT 1
51418: NEG
51419: PUSH
51420: EMPTY
51421: LIST
51422: LIST
51423: PUSH
51424: LD_INT 1
51426: NEG
51427: PUSH
51428: LD_INT 3
51430: NEG
51431: PUSH
51432: EMPTY
51433: LIST
51434: LIST
51435: PUSH
51436: LD_INT 0
51438: PUSH
51439: LD_INT 3
51441: NEG
51442: PUSH
51443: EMPTY
51444: LIST
51445: LIST
51446: PUSH
51447: LD_INT 1
51449: PUSH
51450: LD_INT 2
51452: NEG
51453: PUSH
51454: EMPTY
51455: LIST
51456: LIST
51457: PUSH
51458: LD_INT 2
51460: PUSH
51461: LD_INT 1
51463: NEG
51464: PUSH
51465: EMPTY
51466: LIST
51467: LIST
51468: PUSH
51469: LD_INT 3
51471: PUSH
51472: LD_INT 0
51474: PUSH
51475: EMPTY
51476: LIST
51477: LIST
51478: PUSH
51479: LD_INT 3
51481: PUSH
51482: LD_INT 1
51484: PUSH
51485: EMPTY
51486: LIST
51487: LIST
51488: PUSH
51489: LD_INT 1
51491: PUSH
51492: LD_INT 3
51494: PUSH
51495: EMPTY
51496: LIST
51497: LIST
51498: PUSH
51499: LD_INT 0
51501: PUSH
51502: LD_INT 3
51504: PUSH
51505: EMPTY
51506: LIST
51507: LIST
51508: PUSH
51509: LD_INT 1
51511: NEG
51512: PUSH
51513: LD_INT 2
51515: PUSH
51516: EMPTY
51517: LIST
51518: LIST
51519: PUSH
51520: LD_INT 2
51522: NEG
51523: PUSH
51524: LD_INT 1
51526: PUSH
51527: EMPTY
51528: LIST
51529: LIST
51530: PUSH
51531: LD_INT 3
51533: NEG
51534: PUSH
51535: LD_INT 0
51537: PUSH
51538: EMPTY
51539: LIST
51540: LIST
51541: PUSH
51542: LD_INT 3
51544: NEG
51545: PUSH
51546: LD_INT 1
51548: NEG
51549: PUSH
51550: EMPTY
51551: LIST
51552: LIST
51553: PUSH
51554: EMPTY
51555: LIST
51556: LIST
51557: LIST
51558: LIST
51559: LIST
51560: LIST
51561: LIST
51562: LIST
51563: LIST
51564: LIST
51565: LIST
51566: LIST
51567: LIST
51568: LIST
51569: LIST
51570: LIST
51571: LIST
51572: LIST
51573: LIST
51574: LIST
51575: LIST
51576: LIST
51577: LIST
51578: LIST
51579: LIST
51580: LIST
51581: LIST
51582: LIST
51583: LIST
51584: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51585: LD_ADDR_VAR 0 44
51589: PUSH
51590: LD_INT 0
51592: PUSH
51593: LD_INT 0
51595: PUSH
51596: EMPTY
51597: LIST
51598: LIST
51599: PUSH
51600: LD_INT 0
51602: PUSH
51603: LD_INT 1
51605: NEG
51606: PUSH
51607: EMPTY
51608: LIST
51609: LIST
51610: PUSH
51611: LD_INT 1
51613: PUSH
51614: LD_INT 0
51616: PUSH
51617: EMPTY
51618: LIST
51619: LIST
51620: PUSH
51621: LD_INT 1
51623: PUSH
51624: LD_INT 1
51626: PUSH
51627: EMPTY
51628: LIST
51629: LIST
51630: PUSH
51631: LD_INT 0
51633: PUSH
51634: LD_INT 1
51636: PUSH
51637: EMPTY
51638: LIST
51639: LIST
51640: PUSH
51641: LD_INT 1
51643: NEG
51644: PUSH
51645: LD_INT 0
51647: PUSH
51648: EMPTY
51649: LIST
51650: LIST
51651: PUSH
51652: LD_INT 1
51654: NEG
51655: PUSH
51656: LD_INT 1
51658: NEG
51659: PUSH
51660: EMPTY
51661: LIST
51662: LIST
51663: PUSH
51664: LD_INT 1
51666: NEG
51667: PUSH
51668: LD_INT 2
51670: NEG
51671: PUSH
51672: EMPTY
51673: LIST
51674: LIST
51675: PUSH
51676: LD_INT 1
51678: PUSH
51679: LD_INT 1
51681: NEG
51682: PUSH
51683: EMPTY
51684: LIST
51685: LIST
51686: PUSH
51687: LD_INT 2
51689: PUSH
51690: LD_INT 0
51692: PUSH
51693: EMPTY
51694: LIST
51695: LIST
51696: PUSH
51697: LD_INT 2
51699: PUSH
51700: LD_INT 1
51702: PUSH
51703: EMPTY
51704: LIST
51705: LIST
51706: PUSH
51707: LD_INT 2
51709: PUSH
51710: LD_INT 2
51712: PUSH
51713: EMPTY
51714: LIST
51715: LIST
51716: PUSH
51717: LD_INT 1
51719: PUSH
51720: LD_INT 2
51722: PUSH
51723: EMPTY
51724: LIST
51725: LIST
51726: PUSH
51727: LD_INT 1
51729: NEG
51730: PUSH
51731: LD_INT 1
51733: PUSH
51734: EMPTY
51735: LIST
51736: LIST
51737: PUSH
51738: LD_INT 2
51740: NEG
51741: PUSH
51742: LD_INT 0
51744: PUSH
51745: EMPTY
51746: LIST
51747: LIST
51748: PUSH
51749: LD_INT 2
51751: NEG
51752: PUSH
51753: LD_INT 1
51755: NEG
51756: PUSH
51757: EMPTY
51758: LIST
51759: LIST
51760: PUSH
51761: LD_INT 2
51763: NEG
51764: PUSH
51765: LD_INT 2
51767: NEG
51768: PUSH
51769: EMPTY
51770: LIST
51771: LIST
51772: PUSH
51773: LD_INT 2
51775: NEG
51776: PUSH
51777: LD_INT 3
51779: NEG
51780: PUSH
51781: EMPTY
51782: LIST
51783: LIST
51784: PUSH
51785: LD_INT 2
51787: PUSH
51788: LD_INT 1
51790: NEG
51791: PUSH
51792: EMPTY
51793: LIST
51794: LIST
51795: PUSH
51796: LD_INT 3
51798: PUSH
51799: LD_INT 0
51801: PUSH
51802: EMPTY
51803: LIST
51804: LIST
51805: PUSH
51806: LD_INT 3
51808: PUSH
51809: LD_INT 1
51811: PUSH
51812: EMPTY
51813: LIST
51814: LIST
51815: PUSH
51816: LD_INT 3
51818: PUSH
51819: LD_INT 2
51821: PUSH
51822: EMPTY
51823: LIST
51824: LIST
51825: PUSH
51826: LD_INT 3
51828: PUSH
51829: LD_INT 3
51831: PUSH
51832: EMPTY
51833: LIST
51834: LIST
51835: PUSH
51836: LD_INT 2
51838: PUSH
51839: LD_INT 3
51841: PUSH
51842: EMPTY
51843: LIST
51844: LIST
51845: PUSH
51846: LD_INT 2
51848: NEG
51849: PUSH
51850: LD_INT 1
51852: PUSH
51853: EMPTY
51854: LIST
51855: LIST
51856: PUSH
51857: LD_INT 3
51859: NEG
51860: PUSH
51861: LD_INT 0
51863: PUSH
51864: EMPTY
51865: LIST
51866: LIST
51867: PUSH
51868: LD_INT 3
51870: NEG
51871: PUSH
51872: LD_INT 1
51874: NEG
51875: PUSH
51876: EMPTY
51877: LIST
51878: LIST
51879: PUSH
51880: LD_INT 3
51882: NEG
51883: PUSH
51884: LD_INT 2
51886: NEG
51887: PUSH
51888: EMPTY
51889: LIST
51890: LIST
51891: PUSH
51892: LD_INT 3
51894: NEG
51895: PUSH
51896: LD_INT 3
51898: NEG
51899: PUSH
51900: EMPTY
51901: LIST
51902: LIST
51903: PUSH
51904: EMPTY
51905: LIST
51906: LIST
51907: LIST
51908: LIST
51909: LIST
51910: LIST
51911: LIST
51912: LIST
51913: LIST
51914: LIST
51915: LIST
51916: LIST
51917: LIST
51918: LIST
51919: LIST
51920: LIST
51921: LIST
51922: LIST
51923: LIST
51924: LIST
51925: LIST
51926: LIST
51927: LIST
51928: LIST
51929: LIST
51930: LIST
51931: LIST
51932: LIST
51933: LIST
51934: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51935: LD_ADDR_VAR 0 45
51939: PUSH
51940: LD_INT 0
51942: PUSH
51943: LD_INT 0
51945: PUSH
51946: EMPTY
51947: LIST
51948: LIST
51949: PUSH
51950: LD_INT 0
51952: PUSH
51953: LD_INT 1
51955: NEG
51956: PUSH
51957: EMPTY
51958: LIST
51959: LIST
51960: PUSH
51961: LD_INT 1
51963: PUSH
51964: LD_INT 0
51966: PUSH
51967: EMPTY
51968: LIST
51969: LIST
51970: PUSH
51971: LD_INT 1
51973: PUSH
51974: LD_INT 1
51976: PUSH
51977: EMPTY
51978: LIST
51979: LIST
51980: PUSH
51981: LD_INT 0
51983: PUSH
51984: LD_INT 1
51986: PUSH
51987: EMPTY
51988: LIST
51989: LIST
51990: PUSH
51991: LD_INT 1
51993: NEG
51994: PUSH
51995: LD_INT 0
51997: PUSH
51998: EMPTY
51999: LIST
52000: LIST
52001: PUSH
52002: LD_INT 1
52004: NEG
52005: PUSH
52006: LD_INT 1
52008: NEG
52009: PUSH
52010: EMPTY
52011: LIST
52012: LIST
52013: PUSH
52014: LD_INT 1
52016: NEG
52017: PUSH
52018: LD_INT 2
52020: NEG
52021: PUSH
52022: EMPTY
52023: LIST
52024: LIST
52025: PUSH
52026: LD_INT 0
52028: PUSH
52029: LD_INT 2
52031: NEG
52032: PUSH
52033: EMPTY
52034: LIST
52035: LIST
52036: PUSH
52037: LD_INT 1
52039: PUSH
52040: LD_INT 1
52042: NEG
52043: PUSH
52044: EMPTY
52045: LIST
52046: LIST
52047: PUSH
52048: LD_INT 2
52050: PUSH
52051: LD_INT 1
52053: PUSH
52054: EMPTY
52055: LIST
52056: LIST
52057: PUSH
52058: LD_INT 2
52060: PUSH
52061: LD_INT 2
52063: PUSH
52064: EMPTY
52065: LIST
52066: LIST
52067: PUSH
52068: LD_INT 1
52070: PUSH
52071: LD_INT 2
52073: PUSH
52074: EMPTY
52075: LIST
52076: LIST
52077: PUSH
52078: LD_INT 0
52080: PUSH
52081: LD_INT 2
52083: PUSH
52084: EMPTY
52085: LIST
52086: LIST
52087: PUSH
52088: LD_INT 1
52090: NEG
52091: PUSH
52092: LD_INT 1
52094: PUSH
52095: EMPTY
52096: LIST
52097: LIST
52098: PUSH
52099: LD_INT 2
52101: NEG
52102: PUSH
52103: LD_INT 1
52105: NEG
52106: PUSH
52107: EMPTY
52108: LIST
52109: LIST
52110: PUSH
52111: LD_INT 2
52113: NEG
52114: PUSH
52115: LD_INT 2
52117: NEG
52118: PUSH
52119: EMPTY
52120: LIST
52121: LIST
52122: PUSH
52123: LD_INT 2
52125: NEG
52126: PUSH
52127: LD_INT 3
52129: NEG
52130: PUSH
52131: EMPTY
52132: LIST
52133: LIST
52134: PUSH
52135: LD_INT 1
52137: NEG
52138: PUSH
52139: LD_INT 3
52141: NEG
52142: PUSH
52143: EMPTY
52144: LIST
52145: LIST
52146: PUSH
52147: LD_INT 0
52149: PUSH
52150: LD_INT 3
52152: NEG
52153: PUSH
52154: EMPTY
52155: LIST
52156: LIST
52157: PUSH
52158: LD_INT 1
52160: PUSH
52161: LD_INT 2
52163: NEG
52164: PUSH
52165: EMPTY
52166: LIST
52167: LIST
52168: PUSH
52169: LD_INT 3
52171: PUSH
52172: LD_INT 2
52174: PUSH
52175: EMPTY
52176: LIST
52177: LIST
52178: PUSH
52179: LD_INT 3
52181: PUSH
52182: LD_INT 3
52184: PUSH
52185: EMPTY
52186: LIST
52187: LIST
52188: PUSH
52189: LD_INT 2
52191: PUSH
52192: LD_INT 3
52194: PUSH
52195: EMPTY
52196: LIST
52197: LIST
52198: PUSH
52199: LD_INT 1
52201: PUSH
52202: LD_INT 3
52204: PUSH
52205: EMPTY
52206: LIST
52207: LIST
52208: PUSH
52209: LD_INT 0
52211: PUSH
52212: LD_INT 3
52214: PUSH
52215: EMPTY
52216: LIST
52217: LIST
52218: PUSH
52219: LD_INT 1
52221: NEG
52222: PUSH
52223: LD_INT 2
52225: PUSH
52226: EMPTY
52227: LIST
52228: LIST
52229: PUSH
52230: LD_INT 3
52232: NEG
52233: PUSH
52234: LD_INT 2
52236: NEG
52237: PUSH
52238: EMPTY
52239: LIST
52240: LIST
52241: PUSH
52242: LD_INT 3
52244: NEG
52245: PUSH
52246: LD_INT 3
52248: NEG
52249: PUSH
52250: EMPTY
52251: LIST
52252: LIST
52253: PUSH
52254: EMPTY
52255: LIST
52256: LIST
52257: LIST
52258: LIST
52259: LIST
52260: LIST
52261: LIST
52262: LIST
52263: LIST
52264: LIST
52265: LIST
52266: LIST
52267: LIST
52268: LIST
52269: LIST
52270: LIST
52271: LIST
52272: LIST
52273: LIST
52274: LIST
52275: LIST
52276: LIST
52277: LIST
52278: LIST
52279: LIST
52280: LIST
52281: LIST
52282: LIST
52283: LIST
52284: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52285: LD_ADDR_VAR 0 46
52289: PUSH
52290: LD_INT 0
52292: PUSH
52293: LD_INT 0
52295: PUSH
52296: EMPTY
52297: LIST
52298: LIST
52299: PUSH
52300: LD_INT 0
52302: PUSH
52303: LD_INT 1
52305: NEG
52306: PUSH
52307: EMPTY
52308: LIST
52309: LIST
52310: PUSH
52311: LD_INT 1
52313: PUSH
52314: LD_INT 0
52316: PUSH
52317: EMPTY
52318: LIST
52319: LIST
52320: PUSH
52321: LD_INT 1
52323: PUSH
52324: LD_INT 1
52326: PUSH
52327: EMPTY
52328: LIST
52329: LIST
52330: PUSH
52331: LD_INT 0
52333: PUSH
52334: LD_INT 1
52336: PUSH
52337: EMPTY
52338: LIST
52339: LIST
52340: PUSH
52341: LD_INT 1
52343: NEG
52344: PUSH
52345: LD_INT 0
52347: PUSH
52348: EMPTY
52349: LIST
52350: LIST
52351: PUSH
52352: LD_INT 1
52354: NEG
52355: PUSH
52356: LD_INT 1
52358: NEG
52359: PUSH
52360: EMPTY
52361: LIST
52362: LIST
52363: PUSH
52364: LD_INT 1
52366: NEG
52367: PUSH
52368: LD_INT 2
52370: NEG
52371: PUSH
52372: EMPTY
52373: LIST
52374: LIST
52375: PUSH
52376: LD_INT 0
52378: PUSH
52379: LD_INT 2
52381: NEG
52382: PUSH
52383: EMPTY
52384: LIST
52385: LIST
52386: PUSH
52387: LD_INT 1
52389: PUSH
52390: LD_INT 1
52392: NEG
52393: PUSH
52394: EMPTY
52395: LIST
52396: LIST
52397: PUSH
52398: LD_INT 2
52400: PUSH
52401: LD_INT 0
52403: PUSH
52404: EMPTY
52405: LIST
52406: LIST
52407: PUSH
52408: LD_INT 2
52410: PUSH
52411: LD_INT 1
52413: PUSH
52414: EMPTY
52415: LIST
52416: LIST
52417: PUSH
52418: LD_INT 1
52420: PUSH
52421: LD_INT 2
52423: PUSH
52424: EMPTY
52425: LIST
52426: LIST
52427: PUSH
52428: LD_INT 0
52430: PUSH
52431: LD_INT 2
52433: PUSH
52434: EMPTY
52435: LIST
52436: LIST
52437: PUSH
52438: LD_INT 1
52440: NEG
52441: PUSH
52442: LD_INT 1
52444: PUSH
52445: EMPTY
52446: LIST
52447: LIST
52448: PUSH
52449: LD_INT 2
52451: NEG
52452: PUSH
52453: LD_INT 0
52455: PUSH
52456: EMPTY
52457: LIST
52458: LIST
52459: PUSH
52460: LD_INT 2
52462: NEG
52463: PUSH
52464: LD_INT 1
52466: NEG
52467: PUSH
52468: EMPTY
52469: LIST
52470: LIST
52471: PUSH
52472: LD_INT 1
52474: NEG
52475: PUSH
52476: LD_INT 3
52478: NEG
52479: PUSH
52480: EMPTY
52481: LIST
52482: LIST
52483: PUSH
52484: LD_INT 0
52486: PUSH
52487: LD_INT 3
52489: NEG
52490: PUSH
52491: EMPTY
52492: LIST
52493: LIST
52494: PUSH
52495: LD_INT 1
52497: PUSH
52498: LD_INT 2
52500: NEG
52501: PUSH
52502: EMPTY
52503: LIST
52504: LIST
52505: PUSH
52506: LD_INT 2
52508: PUSH
52509: LD_INT 1
52511: NEG
52512: PUSH
52513: EMPTY
52514: LIST
52515: LIST
52516: PUSH
52517: LD_INT 3
52519: PUSH
52520: LD_INT 0
52522: PUSH
52523: EMPTY
52524: LIST
52525: LIST
52526: PUSH
52527: LD_INT 3
52529: PUSH
52530: LD_INT 1
52532: PUSH
52533: EMPTY
52534: LIST
52535: LIST
52536: PUSH
52537: LD_INT 1
52539: PUSH
52540: LD_INT 3
52542: PUSH
52543: EMPTY
52544: LIST
52545: LIST
52546: PUSH
52547: LD_INT 0
52549: PUSH
52550: LD_INT 3
52552: PUSH
52553: EMPTY
52554: LIST
52555: LIST
52556: PUSH
52557: LD_INT 1
52559: NEG
52560: PUSH
52561: LD_INT 2
52563: PUSH
52564: EMPTY
52565: LIST
52566: LIST
52567: PUSH
52568: LD_INT 2
52570: NEG
52571: PUSH
52572: LD_INT 1
52574: PUSH
52575: EMPTY
52576: LIST
52577: LIST
52578: PUSH
52579: LD_INT 3
52581: NEG
52582: PUSH
52583: LD_INT 0
52585: PUSH
52586: EMPTY
52587: LIST
52588: LIST
52589: PUSH
52590: LD_INT 3
52592: NEG
52593: PUSH
52594: LD_INT 1
52596: NEG
52597: PUSH
52598: EMPTY
52599: LIST
52600: LIST
52601: PUSH
52602: EMPTY
52603: LIST
52604: LIST
52605: LIST
52606: LIST
52607: LIST
52608: LIST
52609: LIST
52610: LIST
52611: LIST
52612: LIST
52613: LIST
52614: LIST
52615: LIST
52616: LIST
52617: LIST
52618: LIST
52619: LIST
52620: LIST
52621: LIST
52622: LIST
52623: LIST
52624: LIST
52625: LIST
52626: LIST
52627: LIST
52628: LIST
52629: LIST
52630: LIST
52631: LIST
52632: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52633: LD_ADDR_VAR 0 47
52637: PUSH
52638: LD_INT 0
52640: PUSH
52641: LD_INT 0
52643: PUSH
52644: EMPTY
52645: LIST
52646: LIST
52647: PUSH
52648: LD_INT 0
52650: PUSH
52651: LD_INT 1
52653: NEG
52654: PUSH
52655: EMPTY
52656: LIST
52657: LIST
52658: PUSH
52659: LD_INT 1
52661: PUSH
52662: LD_INT 0
52664: PUSH
52665: EMPTY
52666: LIST
52667: LIST
52668: PUSH
52669: LD_INT 1
52671: PUSH
52672: LD_INT 1
52674: PUSH
52675: EMPTY
52676: LIST
52677: LIST
52678: PUSH
52679: LD_INT 0
52681: PUSH
52682: LD_INT 1
52684: PUSH
52685: EMPTY
52686: LIST
52687: LIST
52688: PUSH
52689: LD_INT 1
52691: NEG
52692: PUSH
52693: LD_INT 0
52695: PUSH
52696: EMPTY
52697: LIST
52698: LIST
52699: PUSH
52700: LD_INT 1
52702: NEG
52703: PUSH
52704: LD_INT 1
52706: NEG
52707: PUSH
52708: EMPTY
52709: LIST
52710: LIST
52711: PUSH
52712: LD_INT 1
52714: NEG
52715: PUSH
52716: LD_INT 2
52718: NEG
52719: PUSH
52720: EMPTY
52721: LIST
52722: LIST
52723: PUSH
52724: LD_INT 0
52726: PUSH
52727: LD_INT 2
52729: NEG
52730: PUSH
52731: EMPTY
52732: LIST
52733: LIST
52734: PUSH
52735: LD_INT 1
52737: PUSH
52738: LD_INT 1
52740: NEG
52741: PUSH
52742: EMPTY
52743: LIST
52744: LIST
52745: PUSH
52746: LD_INT 2
52748: NEG
52749: PUSH
52750: LD_INT 1
52752: NEG
52753: PUSH
52754: EMPTY
52755: LIST
52756: LIST
52757: PUSH
52758: LD_INT 2
52760: NEG
52761: PUSH
52762: LD_INT 2
52764: NEG
52765: PUSH
52766: EMPTY
52767: LIST
52768: LIST
52769: PUSH
52770: EMPTY
52771: LIST
52772: LIST
52773: LIST
52774: LIST
52775: LIST
52776: LIST
52777: LIST
52778: LIST
52779: LIST
52780: LIST
52781: LIST
52782: LIST
52783: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
52784: LD_ADDR_VAR 0 48
52788: PUSH
52789: LD_INT 0
52791: PUSH
52792: LD_INT 0
52794: PUSH
52795: EMPTY
52796: LIST
52797: LIST
52798: PUSH
52799: LD_INT 0
52801: PUSH
52802: LD_INT 1
52804: NEG
52805: PUSH
52806: EMPTY
52807: LIST
52808: LIST
52809: PUSH
52810: LD_INT 1
52812: PUSH
52813: LD_INT 0
52815: PUSH
52816: EMPTY
52817: LIST
52818: LIST
52819: PUSH
52820: LD_INT 1
52822: PUSH
52823: LD_INT 1
52825: PUSH
52826: EMPTY
52827: LIST
52828: LIST
52829: PUSH
52830: LD_INT 0
52832: PUSH
52833: LD_INT 1
52835: PUSH
52836: EMPTY
52837: LIST
52838: LIST
52839: PUSH
52840: LD_INT 1
52842: NEG
52843: PUSH
52844: LD_INT 0
52846: PUSH
52847: EMPTY
52848: LIST
52849: LIST
52850: PUSH
52851: LD_INT 1
52853: NEG
52854: PUSH
52855: LD_INT 1
52857: NEG
52858: PUSH
52859: EMPTY
52860: LIST
52861: LIST
52862: PUSH
52863: LD_INT 1
52865: NEG
52866: PUSH
52867: LD_INT 2
52869: NEG
52870: PUSH
52871: EMPTY
52872: LIST
52873: LIST
52874: PUSH
52875: LD_INT 0
52877: PUSH
52878: LD_INT 2
52880: NEG
52881: PUSH
52882: EMPTY
52883: LIST
52884: LIST
52885: PUSH
52886: LD_INT 1
52888: PUSH
52889: LD_INT 1
52891: NEG
52892: PUSH
52893: EMPTY
52894: LIST
52895: LIST
52896: PUSH
52897: LD_INT 2
52899: PUSH
52900: LD_INT 0
52902: PUSH
52903: EMPTY
52904: LIST
52905: LIST
52906: PUSH
52907: LD_INT 2
52909: PUSH
52910: LD_INT 1
52912: PUSH
52913: EMPTY
52914: LIST
52915: LIST
52916: PUSH
52917: EMPTY
52918: LIST
52919: LIST
52920: LIST
52921: LIST
52922: LIST
52923: LIST
52924: LIST
52925: LIST
52926: LIST
52927: LIST
52928: LIST
52929: LIST
52930: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
52931: LD_ADDR_VAR 0 49
52935: PUSH
52936: LD_INT 0
52938: PUSH
52939: LD_INT 0
52941: PUSH
52942: EMPTY
52943: LIST
52944: LIST
52945: PUSH
52946: LD_INT 0
52948: PUSH
52949: LD_INT 1
52951: NEG
52952: PUSH
52953: EMPTY
52954: LIST
52955: LIST
52956: PUSH
52957: LD_INT 1
52959: PUSH
52960: LD_INT 0
52962: PUSH
52963: EMPTY
52964: LIST
52965: LIST
52966: PUSH
52967: LD_INT 1
52969: PUSH
52970: LD_INT 1
52972: PUSH
52973: EMPTY
52974: LIST
52975: LIST
52976: PUSH
52977: LD_INT 0
52979: PUSH
52980: LD_INT 1
52982: PUSH
52983: EMPTY
52984: LIST
52985: LIST
52986: PUSH
52987: LD_INT 1
52989: NEG
52990: PUSH
52991: LD_INT 0
52993: PUSH
52994: EMPTY
52995: LIST
52996: LIST
52997: PUSH
52998: LD_INT 1
53000: NEG
53001: PUSH
53002: LD_INT 1
53004: NEG
53005: PUSH
53006: EMPTY
53007: LIST
53008: LIST
53009: PUSH
53010: LD_INT 1
53012: PUSH
53013: LD_INT 1
53015: NEG
53016: PUSH
53017: EMPTY
53018: LIST
53019: LIST
53020: PUSH
53021: LD_INT 2
53023: PUSH
53024: LD_INT 0
53026: PUSH
53027: EMPTY
53028: LIST
53029: LIST
53030: PUSH
53031: LD_INT 2
53033: PUSH
53034: LD_INT 1
53036: PUSH
53037: EMPTY
53038: LIST
53039: LIST
53040: PUSH
53041: LD_INT 2
53043: PUSH
53044: LD_INT 2
53046: PUSH
53047: EMPTY
53048: LIST
53049: LIST
53050: PUSH
53051: LD_INT 1
53053: PUSH
53054: LD_INT 2
53056: PUSH
53057: EMPTY
53058: LIST
53059: LIST
53060: PUSH
53061: EMPTY
53062: LIST
53063: LIST
53064: LIST
53065: LIST
53066: LIST
53067: LIST
53068: LIST
53069: LIST
53070: LIST
53071: LIST
53072: LIST
53073: LIST
53074: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
53075: LD_ADDR_VAR 0 50
53079: PUSH
53080: LD_INT 0
53082: PUSH
53083: LD_INT 0
53085: PUSH
53086: EMPTY
53087: LIST
53088: LIST
53089: PUSH
53090: LD_INT 0
53092: PUSH
53093: LD_INT 1
53095: NEG
53096: PUSH
53097: EMPTY
53098: LIST
53099: LIST
53100: PUSH
53101: LD_INT 1
53103: PUSH
53104: LD_INT 0
53106: PUSH
53107: EMPTY
53108: LIST
53109: LIST
53110: PUSH
53111: LD_INT 1
53113: PUSH
53114: LD_INT 1
53116: PUSH
53117: EMPTY
53118: LIST
53119: LIST
53120: PUSH
53121: LD_INT 0
53123: PUSH
53124: LD_INT 1
53126: PUSH
53127: EMPTY
53128: LIST
53129: LIST
53130: PUSH
53131: LD_INT 1
53133: NEG
53134: PUSH
53135: LD_INT 0
53137: PUSH
53138: EMPTY
53139: LIST
53140: LIST
53141: PUSH
53142: LD_INT 1
53144: NEG
53145: PUSH
53146: LD_INT 1
53148: NEG
53149: PUSH
53150: EMPTY
53151: LIST
53152: LIST
53153: PUSH
53154: LD_INT 2
53156: PUSH
53157: LD_INT 1
53159: PUSH
53160: EMPTY
53161: LIST
53162: LIST
53163: PUSH
53164: LD_INT 2
53166: PUSH
53167: LD_INT 2
53169: PUSH
53170: EMPTY
53171: LIST
53172: LIST
53173: PUSH
53174: LD_INT 1
53176: PUSH
53177: LD_INT 2
53179: PUSH
53180: EMPTY
53181: LIST
53182: LIST
53183: PUSH
53184: LD_INT 0
53186: PUSH
53187: LD_INT 2
53189: PUSH
53190: EMPTY
53191: LIST
53192: LIST
53193: PUSH
53194: LD_INT 1
53196: NEG
53197: PUSH
53198: LD_INT 1
53200: PUSH
53201: EMPTY
53202: LIST
53203: LIST
53204: PUSH
53205: EMPTY
53206: LIST
53207: LIST
53208: LIST
53209: LIST
53210: LIST
53211: LIST
53212: LIST
53213: LIST
53214: LIST
53215: LIST
53216: LIST
53217: LIST
53218: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
53219: LD_ADDR_VAR 0 51
53223: PUSH
53224: LD_INT 0
53226: PUSH
53227: LD_INT 0
53229: PUSH
53230: EMPTY
53231: LIST
53232: LIST
53233: PUSH
53234: LD_INT 0
53236: PUSH
53237: LD_INT 1
53239: NEG
53240: PUSH
53241: EMPTY
53242: LIST
53243: LIST
53244: PUSH
53245: LD_INT 1
53247: PUSH
53248: LD_INT 0
53250: PUSH
53251: EMPTY
53252: LIST
53253: LIST
53254: PUSH
53255: LD_INT 1
53257: PUSH
53258: LD_INT 1
53260: PUSH
53261: EMPTY
53262: LIST
53263: LIST
53264: PUSH
53265: LD_INT 0
53267: PUSH
53268: LD_INT 1
53270: PUSH
53271: EMPTY
53272: LIST
53273: LIST
53274: PUSH
53275: LD_INT 1
53277: NEG
53278: PUSH
53279: LD_INT 0
53281: PUSH
53282: EMPTY
53283: LIST
53284: LIST
53285: PUSH
53286: LD_INT 1
53288: NEG
53289: PUSH
53290: LD_INT 1
53292: NEG
53293: PUSH
53294: EMPTY
53295: LIST
53296: LIST
53297: PUSH
53298: LD_INT 1
53300: PUSH
53301: LD_INT 2
53303: PUSH
53304: EMPTY
53305: LIST
53306: LIST
53307: PUSH
53308: LD_INT 0
53310: PUSH
53311: LD_INT 2
53313: PUSH
53314: EMPTY
53315: LIST
53316: LIST
53317: PUSH
53318: LD_INT 1
53320: NEG
53321: PUSH
53322: LD_INT 1
53324: PUSH
53325: EMPTY
53326: LIST
53327: LIST
53328: PUSH
53329: LD_INT 2
53331: NEG
53332: PUSH
53333: LD_INT 0
53335: PUSH
53336: EMPTY
53337: LIST
53338: LIST
53339: PUSH
53340: LD_INT 2
53342: NEG
53343: PUSH
53344: LD_INT 1
53346: NEG
53347: PUSH
53348: EMPTY
53349: LIST
53350: LIST
53351: PUSH
53352: EMPTY
53353: LIST
53354: LIST
53355: LIST
53356: LIST
53357: LIST
53358: LIST
53359: LIST
53360: LIST
53361: LIST
53362: LIST
53363: LIST
53364: LIST
53365: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53366: LD_ADDR_VAR 0 52
53370: PUSH
53371: LD_INT 0
53373: PUSH
53374: LD_INT 0
53376: PUSH
53377: EMPTY
53378: LIST
53379: LIST
53380: PUSH
53381: LD_INT 0
53383: PUSH
53384: LD_INT 1
53386: NEG
53387: PUSH
53388: EMPTY
53389: LIST
53390: LIST
53391: PUSH
53392: LD_INT 1
53394: PUSH
53395: LD_INT 0
53397: PUSH
53398: EMPTY
53399: LIST
53400: LIST
53401: PUSH
53402: LD_INT 1
53404: PUSH
53405: LD_INT 1
53407: PUSH
53408: EMPTY
53409: LIST
53410: LIST
53411: PUSH
53412: LD_INT 0
53414: PUSH
53415: LD_INT 1
53417: PUSH
53418: EMPTY
53419: LIST
53420: LIST
53421: PUSH
53422: LD_INT 1
53424: NEG
53425: PUSH
53426: LD_INT 0
53428: PUSH
53429: EMPTY
53430: LIST
53431: LIST
53432: PUSH
53433: LD_INT 1
53435: NEG
53436: PUSH
53437: LD_INT 1
53439: NEG
53440: PUSH
53441: EMPTY
53442: LIST
53443: LIST
53444: PUSH
53445: LD_INT 1
53447: NEG
53448: PUSH
53449: LD_INT 2
53451: NEG
53452: PUSH
53453: EMPTY
53454: LIST
53455: LIST
53456: PUSH
53457: LD_INT 1
53459: NEG
53460: PUSH
53461: LD_INT 1
53463: PUSH
53464: EMPTY
53465: LIST
53466: LIST
53467: PUSH
53468: LD_INT 2
53470: NEG
53471: PUSH
53472: LD_INT 0
53474: PUSH
53475: EMPTY
53476: LIST
53477: LIST
53478: PUSH
53479: LD_INT 2
53481: NEG
53482: PUSH
53483: LD_INT 1
53485: NEG
53486: PUSH
53487: EMPTY
53488: LIST
53489: LIST
53490: PUSH
53491: LD_INT 2
53493: NEG
53494: PUSH
53495: LD_INT 2
53497: NEG
53498: PUSH
53499: EMPTY
53500: LIST
53501: LIST
53502: PUSH
53503: EMPTY
53504: LIST
53505: LIST
53506: LIST
53507: LIST
53508: LIST
53509: LIST
53510: LIST
53511: LIST
53512: LIST
53513: LIST
53514: LIST
53515: LIST
53516: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53517: LD_ADDR_VAR 0 53
53521: PUSH
53522: LD_INT 0
53524: PUSH
53525: LD_INT 0
53527: PUSH
53528: EMPTY
53529: LIST
53530: LIST
53531: PUSH
53532: LD_INT 0
53534: PUSH
53535: LD_INT 1
53537: NEG
53538: PUSH
53539: EMPTY
53540: LIST
53541: LIST
53542: PUSH
53543: LD_INT 1
53545: PUSH
53546: LD_INT 0
53548: PUSH
53549: EMPTY
53550: LIST
53551: LIST
53552: PUSH
53553: LD_INT 1
53555: PUSH
53556: LD_INT 1
53558: PUSH
53559: EMPTY
53560: LIST
53561: LIST
53562: PUSH
53563: LD_INT 0
53565: PUSH
53566: LD_INT 1
53568: PUSH
53569: EMPTY
53570: LIST
53571: LIST
53572: PUSH
53573: LD_INT 1
53575: NEG
53576: PUSH
53577: LD_INT 0
53579: PUSH
53580: EMPTY
53581: LIST
53582: LIST
53583: PUSH
53584: LD_INT 1
53586: NEG
53587: PUSH
53588: LD_INT 1
53590: NEG
53591: PUSH
53592: EMPTY
53593: LIST
53594: LIST
53595: PUSH
53596: LD_INT 1
53598: NEG
53599: PUSH
53600: LD_INT 2
53602: NEG
53603: PUSH
53604: EMPTY
53605: LIST
53606: LIST
53607: PUSH
53608: LD_INT 0
53610: PUSH
53611: LD_INT 2
53613: NEG
53614: PUSH
53615: EMPTY
53616: LIST
53617: LIST
53618: PUSH
53619: LD_INT 1
53621: PUSH
53622: LD_INT 1
53624: NEG
53625: PUSH
53626: EMPTY
53627: LIST
53628: LIST
53629: PUSH
53630: LD_INT 2
53632: PUSH
53633: LD_INT 0
53635: PUSH
53636: EMPTY
53637: LIST
53638: LIST
53639: PUSH
53640: LD_INT 2
53642: PUSH
53643: LD_INT 1
53645: PUSH
53646: EMPTY
53647: LIST
53648: LIST
53649: PUSH
53650: LD_INT 2
53652: PUSH
53653: LD_INT 2
53655: PUSH
53656: EMPTY
53657: LIST
53658: LIST
53659: PUSH
53660: LD_INT 1
53662: PUSH
53663: LD_INT 2
53665: PUSH
53666: EMPTY
53667: LIST
53668: LIST
53669: PUSH
53670: LD_INT 0
53672: PUSH
53673: LD_INT 2
53675: PUSH
53676: EMPTY
53677: LIST
53678: LIST
53679: PUSH
53680: LD_INT 1
53682: NEG
53683: PUSH
53684: LD_INT 1
53686: PUSH
53687: EMPTY
53688: LIST
53689: LIST
53690: PUSH
53691: LD_INT 2
53693: NEG
53694: PUSH
53695: LD_INT 0
53697: PUSH
53698: EMPTY
53699: LIST
53700: LIST
53701: PUSH
53702: LD_INT 2
53704: NEG
53705: PUSH
53706: LD_INT 1
53708: NEG
53709: PUSH
53710: EMPTY
53711: LIST
53712: LIST
53713: PUSH
53714: LD_INT 2
53716: NEG
53717: PUSH
53718: LD_INT 2
53720: NEG
53721: PUSH
53722: EMPTY
53723: LIST
53724: LIST
53725: PUSH
53726: EMPTY
53727: LIST
53728: LIST
53729: LIST
53730: LIST
53731: LIST
53732: LIST
53733: LIST
53734: LIST
53735: LIST
53736: LIST
53737: LIST
53738: LIST
53739: LIST
53740: LIST
53741: LIST
53742: LIST
53743: LIST
53744: LIST
53745: LIST
53746: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53747: LD_ADDR_VAR 0 54
53751: PUSH
53752: LD_INT 0
53754: PUSH
53755: LD_INT 0
53757: PUSH
53758: EMPTY
53759: LIST
53760: LIST
53761: PUSH
53762: LD_INT 0
53764: PUSH
53765: LD_INT 1
53767: NEG
53768: PUSH
53769: EMPTY
53770: LIST
53771: LIST
53772: PUSH
53773: LD_INT 1
53775: PUSH
53776: LD_INT 0
53778: PUSH
53779: EMPTY
53780: LIST
53781: LIST
53782: PUSH
53783: LD_INT 1
53785: PUSH
53786: LD_INT 1
53788: PUSH
53789: EMPTY
53790: LIST
53791: LIST
53792: PUSH
53793: LD_INT 0
53795: PUSH
53796: LD_INT 1
53798: PUSH
53799: EMPTY
53800: LIST
53801: LIST
53802: PUSH
53803: LD_INT 1
53805: NEG
53806: PUSH
53807: LD_INT 0
53809: PUSH
53810: EMPTY
53811: LIST
53812: LIST
53813: PUSH
53814: LD_INT 1
53816: NEG
53817: PUSH
53818: LD_INT 1
53820: NEG
53821: PUSH
53822: EMPTY
53823: LIST
53824: LIST
53825: PUSH
53826: LD_INT 1
53828: NEG
53829: PUSH
53830: LD_INT 2
53832: NEG
53833: PUSH
53834: EMPTY
53835: LIST
53836: LIST
53837: PUSH
53838: LD_INT 0
53840: PUSH
53841: LD_INT 2
53843: NEG
53844: PUSH
53845: EMPTY
53846: LIST
53847: LIST
53848: PUSH
53849: LD_INT 1
53851: PUSH
53852: LD_INT 1
53854: NEG
53855: PUSH
53856: EMPTY
53857: LIST
53858: LIST
53859: PUSH
53860: LD_INT 2
53862: PUSH
53863: LD_INT 0
53865: PUSH
53866: EMPTY
53867: LIST
53868: LIST
53869: PUSH
53870: LD_INT 2
53872: PUSH
53873: LD_INT 1
53875: PUSH
53876: EMPTY
53877: LIST
53878: LIST
53879: PUSH
53880: LD_INT 2
53882: PUSH
53883: LD_INT 2
53885: PUSH
53886: EMPTY
53887: LIST
53888: LIST
53889: PUSH
53890: LD_INT 1
53892: PUSH
53893: LD_INT 2
53895: PUSH
53896: EMPTY
53897: LIST
53898: LIST
53899: PUSH
53900: LD_INT 0
53902: PUSH
53903: LD_INT 2
53905: PUSH
53906: EMPTY
53907: LIST
53908: LIST
53909: PUSH
53910: LD_INT 1
53912: NEG
53913: PUSH
53914: LD_INT 1
53916: PUSH
53917: EMPTY
53918: LIST
53919: LIST
53920: PUSH
53921: LD_INT 2
53923: NEG
53924: PUSH
53925: LD_INT 0
53927: PUSH
53928: EMPTY
53929: LIST
53930: LIST
53931: PUSH
53932: LD_INT 2
53934: NEG
53935: PUSH
53936: LD_INT 1
53938: NEG
53939: PUSH
53940: EMPTY
53941: LIST
53942: LIST
53943: PUSH
53944: LD_INT 2
53946: NEG
53947: PUSH
53948: LD_INT 2
53950: NEG
53951: PUSH
53952: EMPTY
53953: LIST
53954: LIST
53955: PUSH
53956: EMPTY
53957: LIST
53958: LIST
53959: LIST
53960: LIST
53961: LIST
53962: LIST
53963: LIST
53964: LIST
53965: LIST
53966: LIST
53967: LIST
53968: LIST
53969: LIST
53970: LIST
53971: LIST
53972: LIST
53973: LIST
53974: LIST
53975: LIST
53976: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53977: LD_ADDR_VAR 0 55
53981: PUSH
53982: LD_INT 0
53984: PUSH
53985: LD_INT 0
53987: PUSH
53988: EMPTY
53989: LIST
53990: LIST
53991: PUSH
53992: LD_INT 0
53994: PUSH
53995: LD_INT 1
53997: NEG
53998: PUSH
53999: EMPTY
54000: LIST
54001: LIST
54002: PUSH
54003: LD_INT 1
54005: PUSH
54006: LD_INT 0
54008: PUSH
54009: EMPTY
54010: LIST
54011: LIST
54012: PUSH
54013: LD_INT 1
54015: PUSH
54016: LD_INT 1
54018: PUSH
54019: EMPTY
54020: LIST
54021: LIST
54022: PUSH
54023: LD_INT 0
54025: PUSH
54026: LD_INT 1
54028: PUSH
54029: EMPTY
54030: LIST
54031: LIST
54032: PUSH
54033: LD_INT 1
54035: NEG
54036: PUSH
54037: LD_INT 0
54039: PUSH
54040: EMPTY
54041: LIST
54042: LIST
54043: PUSH
54044: LD_INT 1
54046: NEG
54047: PUSH
54048: LD_INT 1
54050: NEG
54051: PUSH
54052: EMPTY
54053: LIST
54054: LIST
54055: PUSH
54056: LD_INT 1
54058: NEG
54059: PUSH
54060: LD_INT 2
54062: NEG
54063: PUSH
54064: EMPTY
54065: LIST
54066: LIST
54067: PUSH
54068: LD_INT 0
54070: PUSH
54071: LD_INT 2
54073: NEG
54074: PUSH
54075: EMPTY
54076: LIST
54077: LIST
54078: PUSH
54079: LD_INT 1
54081: PUSH
54082: LD_INT 1
54084: NEG
54085: PUSH
54086: EMPTY
54087: LIST
54088: LIST
54089: PUSH
54090: LD_INT 2
54092: PUSH
54093: LD_INT 0
54095: PUSH
54096: EMPTY
54097: LIST
54098: LIST
54099: PUSH
54100: LD_INT 2
54102: PUSH
54103: LD_INT 1
54105: PUSH
54106: EMPTY
54107: LIST
54108: LIST
54109: PUSH
54110: LD_INT 2
54112: PUSH
54113: LD_INT 2
54115: PUSH
54116: EMPTY
54117: LIST
54118: LIST
54119: PUSH
54120: LD_INT 1
54122: PUSH
54123: LD_INT 2
54125: PUSH
54126: EMPTY
54127: LIST
54128: LIST
54129: PUSH
54130: LD_INT 0
54132: PUSH
54133: LD_INT 2
54135: PUSH
54136: EMPTY
54137: LIST
54138: LIST
54139: PUSH
54140: LD_INT 1
54142: NEG
54143: PUSH
54144: LD_INT 1
54146: PUSH
54147: EMPTY
54148: LIST
54149: LIST
54150: PUSH
54151: LD_INT 2
54153: NEG
54154: PUSH
54155: LD_INT 0
54157: PUSH
54158: EMPTY
54159: LIST
54160: LIST
54161: PUSH
54162: LD_INT 2
54164: NEG
54165: PUSH
54166: LD_INT 1
54168: NEG
54169: PUSH
54170: EMPTY
54171: LIST
54172: LIST
54173: PUSH
54174: LD_INT 2
54176: NEG
54177: PUSH
54178: LD_INT 2
54180: NEG
54181: PUSH
54182: EMPTY
54183: LIST
54184: LIST
54185: PUSH
54186: EMPTY
54187: LIST
54188: LIST
54189: LIST
54190: LIST
54191: LIST
54192: LIST
54193: LIST
54194: LIST
54195: LIST
54196: LIST
54197: LIST
54198: LIST
54199: LIST
54200: LIST
54201: LIST
54202: LIST
54203: LIST
54204: LIST
54205: LIST
54206: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54207: LD_ADDR_VAR 0 56
54211: PUSH
54212: LD_INT 0
54214: PUSH
54215: LD_INT 0
54217: PUSH
54218: EMPTY
54219: LIST
54220: LIST
54221: PUSH
54222: LD_INT 0
54224: PUSH
54225: LD_INT 1
54227: NEG
54228: PUSH
54229: EMPTY
54230: LIST
54231: LIST
54232: PUSH
54233: LD_INT 1
54235: PUSH
54236: LD_INT 0
54238: PUSH
54239: EMPTY
54240: LIST
54241: LIST
54242: PUSH
54243: LD_INT 1
54245: PUSH
54246: LD_INT 1
54248: PUSH
54249: EMPTY
54250: LIST
54251: LIST
54252: PUSH
54253: LD_INT 0
54255: PUSH
54256: LD_INT 1
54258: PUSH
54259: EMPTY
54260: LIST
54261: LIST
54262: PUSH
54263: LD_INT 1
54265: NEG
54266: PUSH
54267: LD_INT 0
54269: PUSH
54270: EMPTY
54271: LIST
54272: LIST
54273: PUSH
54274: LD_INT 1
54276: NEG
54277: PUSH
54278: LD_INT 1
54280: NEG
54281: PUSH
54282: EMPTY
54283: LIST
54284: LIST
54285: PUSH
54286: LD_INT 1
54288: NEG
54289: PUSH
54290: LD_INT 2
54292: NEG
54293: PUSH
54294: EMPTY
54295: LIST
54296: LIST
54297: PUSH
54298: LD_INT 0
54300: PUSH
54301: LD_INT 2
54303: NEG
54304: PUSH
54305: EMPTY
54306: LIST
54307: LIST
54308: PUSH
54309: LD_INT 1
54311: PUSH
54312: LD_INT 1
54314: NEG
54315: PUSH
54316: EMPTY
54317: LIST
54318: LIST
54319: PUSH
54320: LD_INT 2
54322: PUSH
54323: LD_INT 0
54325: PUSH
54326: EMPTY
54327: LIST
54328: LIST
54329: PUSH
54330: LD_INT 2
54332: PUSH
54333: LD_INT 1
54335: PUSH
54336: EMPTY
54337: LIST
54338: LIST
54339: PUSH
54340: LD_INT 2
54342: PUSH
54343: LD_INT 2
54345: PUSH
54346: EMPTY
54347: LIST
54348: LIST
54349: PUSH
54350: LD_INT 1
54352: PUSH
54353: LD_INT 2
54355: PUSH
54356: EMPTY
54357: LIST
54358: LIST
54359: PUSH
54360: LD_INT 0
54362: PUSH
54363: LD_INT 2
54365: PUSH
54366: EMPTY
54367: LIST
54368: LIST
54369: PUSH
54370: LD_INT 1
54372: NEG
54373: PUSH
54374: LD_INT 1
54376: PUSH
54377: EMPTY
54378: LIST
54379: LIST
54380: PUSH
54381: LD_INT 2
54383: NEG
54384: PUSH
54385: LD_INT 0
54387: PUSH
54388: EMPTY
54389: LIST
54390: LIST
54391: PUSH
54392: LD_INT 2
54394: NEG
54395: PUSH
54396: LD_INT 1
54398: NEG
54399: PUSH
54400: EMPTY
54401: LIST
54402: LIST
54403: PUSH
54404: LD_INT 2
54406: NEG
54407: PUSH
54408: LD_INT 2
54410: NEG
54411: PUSH
54412: EMPTY
54413: LIST
54414: LIST
54415: PUSH
54416: EMPTY
54417: LIST
54418: LIST
54419: LIST
54420: LIST
54421: LIST
54422: LIST
54423: LIST
54424: LIST
54425: LIST
54426: LIST
54427: LIST
54428: LIST
54429: LIST
54430: LIST
54431: LIST
54432: LIST
54433: LIST
54434: LIST
54435: LIST
54436: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54437: LD_ADDR_VAR 0 57
54441: PUSH
54442: LD_INT 0
54444: PUSH
54445: LD_INT 0
54447: PUSH
54448: EMPTY
54449: LIST
54450: LIST
54451: PUSH
54452: LD_INT 0
54454: PUSH
54455: LD_INT 1
54457: NEG
54458: PUSH
54459: EMPTY
54460: LIST
54461: LIST
54462: PUSH
54463: LD_INT 1
54465: PUSH
54466: LD_INT 0
54468: PUSH
54469: EMPTY
54470: LIST
54471: LIST
54472: PUSH
54473: LD_INT 1
54475: PUSH
54476: LD_INT 1
54478: PUSH
54479: EMPTY
54480: LIST
54481: LIST
54482: PUSH
54483: LD_INT 0
54485: PUSH
54486: LD_INT 1
54488: PUSH
54489: EMPTY
54490: LIST
54491: LIST
54492: PUSH
54493: LD_INT 1
54495: NEG
54496: PUSH
54497: LD_INT 0
54499: PUSH
54500: EMPTY
54501: LIST
54502: LIST
54503: PUSH
54504: LD_INT 1
54506: NEG
54507: PUSH
54508: LD_INT 1
54510: NEG
54511: PUSH
54512: EMPTY
54513: LIST
54514: LIST
54515: PUSH
54516: LD_INT 1
54518: NEG
54519: PUSH
54520: LD_INT 2
54522: NEG
54523: PUSH
54524: EMPTY
54525: LIST
54526: LIST
54527: PUSH
54528: LD_INT 0
54530: PUSH
54531: LD_INT 2
54533: NEG
54534: PUSH
54535: EMPTY
54536: LIST
54537: LIST
54538: PUSH
54539: LD_INT 1
54541: PUSH
54542: LD_INT 1
54544: NEG
54545: PUSH
54546: EMPTY
54547: LIST
54548: LIST
54549: PUSH
54550: LD_INT 2
54552: PUSH
54553: LD_INT 0
54555: PUSH
54556: EMPTY
54557: LIST
54558: LIST
54559: PUSH
54560: LD_INT 2
54562: PUSH
54563: LD_INT 1
54565: PUSH
54566: EMPTY
54567: LIST
54568: LIST
54569: PUSH
54570: LD_INT 2
54572: PUSH
54573: LD_INT 2
54575: PUSH
54576: EMPTY
54577: LIST
54578: LIST
54579: PUSH
54580: LD_INT 1
54582: PUSH
54583: LD_INT 2
54585: PUSH
54586: EMPTY
54587: LIST
54588: LIST
54589: PUSH
54590: LD_INT 0
54592: PUSH
54593: LD_INT 2
54595: PUSH
54596: EMPTY
54597: LIST
54598: LIST
54599: PUSH
54600: LD_INT 1
54602: NEG
54603: PUSH
54604: LD_INT 1
54606: PUSH
54607: EMPTY
54608: LIST
54609: LIST
54610: PUSH
54611: LD_INT 2
54613: NEG
54614: PUSH
54615: LD_INT 0
54617: PUSH
54618: EMPTY
54619: LIST
54620: LIST
54621: PUSH
54622: LD_INT 2
54624: NEG
54625: PUSH
54626: LD_INT 1
54628: NEG
54629: PUSH
54630: EMPTY
54631: LIST
54632: LIST
54633: PUSH
54634: LD_INT 2
54636: NEG
54637: PUSH
54638: LD_INT 2
54640: NEG
54641: PUSH
54642: EMPTY
54643: LIST
54644: LIST
54645: PUSH
54646: EMPTY
54647: LIST
54648: LIST
54649: LIST
54650: LIST
54651: LIST
54652: LIST
54653: LIST
54654: LIST
54655: LIST
54656: LIST
54657: LIST
54658: LIST
54659: LIST
54660: LIST
54661: LIST
54662: LIST
54663: LIST
54664: LIST
54665: LIST
54666: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54667: LD_ADDR_VAR 0 58
54671: PUSH
54672: LD_INT 0
54674: PUSH
54675: LD_INT 0
54677: PUSH
54678: EMPTY
54679: LIST
54680: LIST
54681: PUSH
54682: LD_INT 0
54684: PUSH
54685: LD_INT 1
54687: NEG
54688: PUSH
54689: EMPTY
54690: LIST
54691: LIST
54692: PUSH
54693: LD_INT 1
54695: PUSH
54696: LD_INT 0
54698: PUSH
54699: EMPTY
54700: LIST
54701: LIST
54702: PUSH
54703: LD_INT 1
54705: PUSH
54706: LD_INT 1
54708: PUSH
54709: EMPTY
54710: LIST
54711: LIST
54712: PUSH
54713: LD_INT 0
54715: PUSH
54716: LD_INT 1
54718: PUSH
54719: EMPTY
54720: LIST
54721: LIST
54722: PUSH
54723: LD_INT 1
54725: NEG
54726: PUSH
54727: LD_INT 0
54729: PUSH
54730: EMPTY
54731: LIST
54732: LIST
54733: PUSH
54734: LD_INT 1
54736: NEG
54737: PUSH
54738: LD_INT 1
54740: NEG
54741: PUSH
54742: EMPTY
54743: LIST
54744: LIST
54745: PUSH
54746: LD_INT 1
54748: NEG
54749: PUSH
54750: LD_INT 2
54752: NEG
54753: PUSH
54754: EMPTY
54755: LIST
54756: LIST
54757: PUSH
54758: LD_INT 0
54760: PUSH
54761: LD_INT 2
54763: NEG
54764: PUSH
54765: EMPTY
54766: LIST
54767: LIST
54768: PUSH
54769: LD_INT 1
54771: PUSH
54772: LD_INT 1
54774: NEG
54775: PUSH
54776: EMPTY
54777: LIST
54778: LIST
54779: PUSH
54780: LD_INT 2
54782: PUSH
54783: LD_INT 0
54785: PUSH
54786: EMPTY
54787: LIST
54788: LIST
54789: PUSH
54790: LD_INT 2
54792: PUSH
54793: LD_INT 1
54795: PUSH
54796: EMPTY
54797: LIST
54798: LIST
54799: PUSH
54800: LD_INT 2
54802: PUSH
54803: LD_INT 2
54805: PUSH
54806: EMPTY
54807: LIST
54808: LIST
54809: PUSH
54810: LD_INT 1
54812: PUSH
54813: LD_INT 2
54815: PUSH
54816: EMPTY
54817: LIST
54818: LIST
54819: PUSH
54820: LD_INT 0
54822: PUSH
54823: LD_INT 2
54825: PUSH
54826: EMPTY
54827: LIST
54828: LIST
54829: PUSH
54830: LD_INT 1
54832: NEG
54833: PUSH
54834: LD_INT 1
54836: PUSH
54837: EMPTY
54838: LIST
54839: LIST
54840: PUSH
54841: LD_INT 2
54843: NEG
54844: PUSH
54845: LD_INT 0
54847: PUSH
54848: EMPTY
54849: LIST
54850: LIST
54851: PUSH
54852: LD_INT 2
54854: NEG
54855: PUSH
54856: LD_INT 1
54858: NEG
54859: PUSH
54860: EMPTY
54861: LIST
54862: LIST
54863: PUSH
54864: LD_INT 2
54866: NEG
54867: PUSH
54868: LD_INT 2
54870: NEG
54871: PUSH
54872: EMPTY
54873: LIST
54874: LIST
54875: PUSH
54876: EMPTY
54877: LIST
54878: LIST
54879: LIST
54880: LIST
54881: LIST
54882: LIST
54883: LIST
54884: LIST
54885: LIST
54886: LIST
54887: LIST
54888: LIST
54889: LIST
54890: LIST
54891: LIST
54892: LIST
54893: LIST
54894: LIST
54895: LIST
54896: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54897: LD_ADDR_VAR 0 59
54901: PUSH
54902: LD_INT 0
54904: PUSH
54905: LD_INT 0
54907: PUSH
54908: EMPTY
54909: LIST
54910: LIST
54911: PUSH
54912: LD_INT 0
54914: PUSH
54915: LD_INT 1
54917: NEG
54918: PUSH
54919: EMPTY
54920: LIST
54921: LIST
54922: PUSH
54923: LD_INT 1
54925: PUSH
54926: LD_INT 0
54928: PUSH
54929: EMPTY
54930: LIST
54931: LIST
54932: PUSH
54933: LD_INT 1
54935: PUSH
54936: LD_INT 1
54938: PUSH
54939: EMPTY
54940: LIST
54941: LIST
54942: PUSH
54943: LD_INT 0
54945: PUSH
54946: LD_INT 1
54948: PUSH
54949: EMPTY
54950: LIST
54951: LIST
54952: PUSH
54953: LD_INT 1
54955: NEG
54956: PUSH
54957: LD_INT 0
54959: PUSH
54960: EMPTY
54961: LIST
54962: LIST
54963: PUSH
54964: LD_INT 1
54966: NEG
54967: PUSH
54968: LD_INT 1
54970: NEG
54971: PUSH
54972: EMPTY
54973: LIST
54974: LIST
54975: PUSH
54976: EMPTY
54977: LIST
54978: LIST
54979: LIST
54980: LIST
54981: LIST
54982: LIST
54983: LIST
54984: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54985: LD_ADDR_VAR 0 60
54989: PUSH
54990: LD_INT 0
54992: PUSH
54993: LD_INT 0
54995: PUSH
54996: EMPTY
54997: LIST
54998: LIST
54999: PUSH
55000: LD_INT 0
55002: PUSH
55003: LD_INT 1
55005: NEG
55006: PUSH
55007: EMPTY
55008: LIST
55009: LIST
55010: PUSH
55011: LD_INT 1
55013: PUSH
55014: LD_INT 0
55016: PUSH
55017: EMPTY
55018: LIST
55019: LIST
55020: PUSH
55021: LD_INT 1
55023: PUSH
55024: LD_INT 1
55026: PUSH
55027: EMPTY
55028: LIST
55029: LIST
55030: PUSH
55031: LD_INT 0
55033: PUSH
55034: LD_INT 1
55036: PUSH
55037: EMPTY
55038: LIST
55039: LIST
55040: PUSH
55041: LD_INT 1
55043: NEG
55044: PUSH
55045: LD_INT 0
55047: PUSH
55048: EMPTY
55049: LIST
55050: LIST
55051: PUSH
55052: LD_INT 1
55054: NEG
55055: PUSH
55056: LD_INT 1
55058: NEG
55059: PUSH
55060: EMPTY
55061: LIST
55062: LIST
55063: PUSH
55064: EMPTY
55065: LIST
55066: LIST
55067: LIST
55068: LIST
55069: LIST
55070: LIST
55071: LIST
55072: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55073: LD_ADDR_VAR 0 61
55077: PUSH
55078: LD_INT 0
55080: PUSH
55081: LD_INT 0
55083: PUSH
55084: EMPTY
55085: LIST
55086: LIST
55087: PUSH
55088: LD_INT 0
55090: PUSH
55091: LD_INT 1
55093: NEG
55094: PUSH
55095: EMPTY
55096: LIST
55097: LIST
55098: PUSH
55099: LD_INT 1
55101: PUSH
55102: LD_INT 0
55104: PUSH
55105: EMPTY
55106: LIST
55107: LIST
55108: PUSH
55109: LD_INT 1
55111: PUSH
55112: LD_INT 1
55114: PUSH
55115: EMPTY
55116: LIST
55117: LIST
55118: PUSH
55119: LD_INT 0
55121: PUSH
55122: LD_INT 1
55124: PUSH
55125: EMPTY
55126: LIST
55127: LIST
55128: PUSH
55129: LD_INT 1
55131: NEG
55132: PUSH
55133: LD_INT 0
55135: PUSH
55136: EMPTY
55137: LIST
55138: LIST
55139: PUSH
55140: LD_INT 1
55142: NEG
55143: PUSH
55144: LD_INT 1
55146: NEG
55147: PUSH
55148: EMPTY
55149: LIST
55150: LIST
55151: PUSH
55152: EMPTY
55153: LIST
55154: LIST
55155: LIST
55156: LIST
55157: LIST
55158: LIST
55159: LIST
55160: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55161: LD_ADDR_VAR 0 62
55165: PUSH
55166: LD_INT 0
55168: PUSH
55169: LD_INT 0
55171: PUSH
55172: EMPTY
55173: LIST
55174: LIST
55175: PUSH
55176: LD_INT 0
55178: PUSH
55179: LD_INT 1
55181: NEG
55182: PUSH
55183: EMPTY
55184: LIST
55185: LIST
55186: PUSH
55187: LD_INT 1
55189: PUSH
55190: LD_INT 0
55192: PUSH
55193: EMPTY
55194: LIST
55195: LIST
55196: PUSH
55197: LD_INT 1
55199: PUSH
55200: LD_INT 1
55202: PUSH
55203: EMPTY
55204: LIST
55205: LIST
55206: PUSH
55207: LD_INT 0
55209: PUSH
55210: LD_INT 1
55212: PUSH
55213: EMPTY
55214: LIST
55215: LIST
55216: PUSH
55217: LD_INT 1
55219: NEG
55220: PUSH
55221: LD_INT 0
55223: PUSH
55224: EMPTY
55225: LIST
55226: LIST
55227: PUSH
55228: LD_INT 1
55230: NEG
55231: PUSH
55232: LD_INT 1
55234: NEG
55235: PUSH
55236: EMPTY
55237: LIST
55238: LIST
55239: PUSH
55240: EMPTY
55241: LIST
55242: LIST
55243: LIST
55244: LIST
55245: LIST
55246: LIST
55247: LIST
55248: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55249: LD_ADDR_VAR 0 63
55253: PUSH
55254: LD_INT 0
55256: PUSH
55257: LD_INT 0
55259: PUSH
55260: EMPTY
55261: LIST
55262: LIST
55263: PUSH
55264: LD_INT 0
55266: PUSH
55267: LD_INT 1
55269: NEG
55270: PUSH
55271: EMPTY
55272: LIST
55273: LIST
55274: PUSH
55275: LD_INT 1
55277: PUSH
55278: LD_INT 0
55280: PUSH
55281: EMPTY
55282: LIST
55283: LIST
55284: PUSH
55285: LD_INT 1
55287: PUSH
55288: LD_INT 1
55290: PUSH
55291: EMPTY
55292: LIST
55293: LIST
55294: PUSH
55295: LD_INT 0
55297: PUSH
55298: LD_INT 1
55300: PUSH
55301: EMPTY
55302: LIST
55303: LIST
55304: PUSH
55305: LD_INT 1
55307: NEG
55308: PUSH
55309: LD_INT 0
55311: PUSH
55312: EMPTY
55313: LIST
55314: LIST
55315: PUSH
55316: LD_INT 1
55318: NEG
55319: PUSH
55320: LD_INT 1
55322: NEG
55323: PUSH
55324: EMPTY
55325: LIST
55326: LIST
55327: PUSH
55328: EMPTY
55329: LIST
55330: LIST
55331: LIST
55332: LIST
55333: LIST
55334: LIST
55335: LIST
55336: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55337: LD_ADDR_VAR 0 64
55341: PUSH
55342: LD_INT 0
55344: PUSH
55345: LD_INT 0
55347: PUSH
55348: EMPTY
55349: LIST
55350: LIST
55351: PUSH
55352: LD_INT 0
55354: PUSH
55355: LD_INT 1
55357: NEG
55358: PUSH
55359: EMPTY
55360: LIST
55361: LIST
55362: PUSH
55363: LD_INT 1
55365: PUSH
55366: LD_INT 0
55368: PUSH
55369: EMPTY
55370: LIST
55371: LIST
55372: PUSH
55373: LD_INT 1
55375: PUSH
55376: LD_INT 1
55378: PUSH
55379: EMPTY
55380: LIST
55381: LIST
55382: PUSH
55383: LD_INT 0
55385: PUSH
55386: LD_INT 1
55388: PUSH
55389: EMPTY
55390: LIST
55391: LIST
55392: PUSH
55393: LD_INT 1
55395: NEG
55396: PUSH
55397: LD_INT 0
55399: PUSH
55400: EMPTY
55401: LIST
55402: LIST
55403: PUSH
55404: LD_INT 1
55406: NEG
55407: PUSH
55408: LD_INT 1
55410: NEG
55411: PUSH
55412: EMPTY
55413: LIST
55414: LIST
55415: PUSH
55416: EMPTY
55417: LIST
55418: LIST
55419: LIST
55420: LIST
55421: LIST
55422: LIST
55423: LIST
55424: ST_TO_ADDR
// end ; 1 :
55425: GO 61322
55427: LD_INT 1
55429: DOUBLE
55430: EQUAL
55431: IFTRUE 55435
55433: GO 58058
55435: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55436: LD_ADDR_VAR 0 11
55440: PUSH
55441: LD_INT 1
55443: NEG
55444: PUSH
55445: LD_INT 3
55447: NEG
55448: PUSH
55449: EMPTY
55450: LIST
55451: LIST
55452: PUSH
55453: LD_INT 0
55455: PUSH
55456: LD_INT 3
55458: NEG
55459: PUSH
55460: EMPTY
55461: LIST
55462: LIST
55463: PUSH
55464: LD_INT 1
55466: PUSH
55467: LD_INT 2
55469: NEG
55470: PUSH
55471: EMPTY
55472: LIST
55473: LIST
55474: PUSH
55475: EMPTY
55476: LIST
55477: LIST
55478: LIST
55479: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55480: LD_ADDR_VAR 0 12
55484: PUSH
55485: LD_INT 2
55487: PUSH
55488: LD_INT 1
55490: NEG
55491: PUSH
55492: EMPTY
55493: LIST
55494: LIST
55495: PUSH
55496: LD_INT 3
55498: PUSH
55499: LD_INT 0
55501: PUSH
55502: EMPTY
55503: LIST
55504: LIST
55505: PUSH
55506: LD_INT 3
55508: PUSH
55509: LD_INT 1
55511: PUSH
55512: EMPTY
55513: LIST
55514: LIST
55515: PUSH
55516: EMPTY
55517: LIST
55518: LIST
55519: LIST
55520: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55521: LD_ADDR_VAR 0 13
55525: PUSH
55526: LD_INT 3
55528: PUSH
55529: LD_INT 2
55531: PUSH
55532: EMPTY
55533: LIST
55534: LIST
55535: PUSH
55536: LD_INT 3
55538: PUSH
55539: LD_INT 3
55541: PUSH
55542: EMPTY
55543: LIST
55544: LIST
55545: PUSH
55546: LD_INT 2
55548: PUSH
55549: LD_INT 3
55551: PUSH
55552: EMPTY
55553: LIST
55554: LIST
55555: PUSH
55556: EMPTY
55557: LIST
55558: LIST
55559: LIST
55560: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55561: LD_ADDR_VAR 0 14
55565: PUSH
55566: LD_INT 1
55568: PUSH
55569: LD_INT 3
55571: PUSH
55572: EMPTY
55573: LIST
55574: LIST
55575: PUSH
55576: LD_INT 0
55578: PUSH
55579: LD_INT 3
55581: PUSH
55582: EMPTY
55583: LIST
55584: LIST
55585: PUSH
55586: LD_INT 1
55588: NEG
55589: PUSH
55590: LD_INT 2
55592: PUSH
55593: EMPTY
55594: LIST
55595: LIST
55596: PUSH
55597: EMPTY
55598: LIST
55599: LIST
55600: LIST
55601: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55602: LD_ADDR_VAR 0 15
55606: PUSH
55607: LD_INT 2
55609: NEG
55610: PUSH
55611: LD_INT 1
55613: PUSH
55614: EMPTY
55615: LIST
55616: LIST
55617: PUSH
55618: LD_INT 3
55620: NEG
55621: PUSH
55622: LD_INT 0
55624: PUSH
55625: EMPTY
55626: LIST
55627: LIST
55628: PUSH
55629: LD_INT 3
55631: NEG
55632: PUSH
55633: LD_INT 1
55635: NEG
55636: PUSH
55637: EMPTY
55638: LIST
55639: LIST
55640: PUSH
55641: EMPTY
55642: LIST
55643: LIST
55644: LIST
55645: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55646: LD_ADDR_VAR 0 16
55650: PUSH
55651: LD_INT 2
55653: NEG
55654: PUSH
55655: LD_INT 3
55657: NEG
55658: PUSH
55659: EMPTY
55660: LIST
55661: LIST
55662: PUSH
55663: LD_INT 3
55665: NEG
55666: PUSH
55667: LD_INT 2
55669: NEG
55670: PUSH
55671: EMPTY
55672: LIST
55673: LIST
55674: PUSH
55675: LD_INT 3
55677: NEG
55678: PUSH
55679: LD_INT 3
55681: NEG
55682: PUSH
55683: EMPTY
55684: LIST
55685: LIST
55686: PUSH
55687: EMPTY
55688: LIST
55689: LIST
55690: LIST
55691: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55692: LD_ADDR_VAR 0 17
55696: PUSH
55697: LD_INT 1
55699: NEG
55700: PUSH
55701: LD_INT 3
55703: NEG
55704: PUSH
55705: EMPTY
55706: LIST
55707: LIST
55708: PUSH
55709: LD_INT 0
55711: PUSH
55712: LD_INT 3
55714: NEG
55715: PUSH
55716: EMPTY
55717: LIST
55718: LIST
55719: PUSH
55720: LD_INT 1
55722: PUSH
55723: LD_INT 2
55725: NEG
55726: PUSH
55727: EMPTY
55728: LIST
55729: LIST
55730: PUSH
55731: EMPTY
55732: LIST
55733: LIST
55734: LIST
55735: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55736: LD_ADDR_VAR 0 18
55740: PUSH
55741: LD_INT 2
55743: PUSH
55744: LD_INT 1
55746: NEG
55747: PUSH
55748: EMPTY
55749: LIST
55750: LIST
55751: PUSH
55752: LD_INT 3
55754: PUSH
55755: LD_INT 0
55757: PUSH
55758: EMPTY
55759: LIST
55760: LIST
55761: PUSH
55762: LD_INT 3
55764: PUSH
55765: LD_INT 1
55767: PUSH
55768: EMPTY
55769: LIST
55770: LIST
55771: PUSH
55772: EMPTY
55773: LIST
55774: LIST
55775: LIST
55776: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55777: LD_ADDR_VAR 0 19
55781: PUSH
55782: LD_INT 3
55784: PUSH
55785: LD_INT 2
55787: PUSH
55788: EMPTY
55789: LIST
55790: LIST
55791: PUSH
55792: LD_INT 3
55794: PUSH
55795: LD_INT 3
55797: PUSH
55798: EMPTY
55799: LIST
55800: LIST
55801: PUSH
55802: LD_INT 2
55804: PUSH
55805: LD_INT 3
55807: PUSH
55808: EMPTY
55809: LIST
55810: LIST
55811: PUSH
55812: EMPTY
55813: LIST
55814: LIST
55815: LIST
55816: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55817: LD_ADDR_VAR 0 20
55821: PUSH
55822: LD_INT 1
55824: PUSH
55825: LD_INT 3
55827: PUSH
55828: EMPTY
55829: LIST
55830: LIST
55831: PUSH
55832: LD_INT 0
55834: PUSH
55835: LD_INT 3
55837: PUSH
55838: EMPTY
55839: LIST
55840: LIST
55841: PUSH
55842: LD_INT 1
55844: NEG
55845: PUSH
55846: LD_INT 2
55848: PUSH
55849: EMPTY
55850: LIST
55851: LIST
55852: PUSH
55853: EMPTY
55854: LIST
55855: LIST
55856: LIST
55857: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55858: LD_ADDR_VAR 0 21
55862: PUSH
55863: LD_INT 2
55865: NEG
55866: PUSH
55867: LD_INT 1
55869: PUSH
55870: EMPTY
55871: LIST
55872: LIST
55873: PUSH
55874: LD_INT 3
55876: NEG
55877: PUSH
55878: LD_INT 0
55880: PUSH
55881: EMPTY
55882: LIST
55883: LIST
55884: PUSH
55885: LD_INT 3
55887: NEG
55888: PUSH
55889: LD_INT 1
55891: NEG
55892: PUSH
55893: EMPTY
55894: LIST
55895: LIST
55896: PUSH
55897: EMPTY
55898: LIST
55899: LIST
55900: LIST
55901: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55902: LD_ADDR_VAR 0 22
55906: PUSH
55907: LD_INT 2
55909: NEG
55910: PUSH
55911: LD_INT 3
55913: NEG
55914: PUSH
55915: EMPTY
55916: LIST
55917: LIST
55918: PUSH
55919: LD_INT 3
55921: NEG
55922: PUSH
55923: LD_INT 2
55925: NEG
55926: PUSH
55927: EMPTY
55928: LIST
55929: LIST
55930: PUSH
55931: LD_INT 3
55933: NEG
55934: PUSH
55935: LD_INT 3
55937: NEG
55938: PUSH
55939: EMPTY
55940: LIST
55941: LIST
55942: PUSH
55943: EMPTY
55944: LIST
55945: LIST
55946: LIST
55947: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
55948: LD_ADDR_VAR 0 23
55952: PUSH
55953: LD_INT 0
55955: PUSH
55956: LD_INT 3
55958: NEG
55959: PUSH
55960: EMPTY
55961: LIST
55962: LIST
55963: PUSH
55964: LD_INT 1
55966: NEG
55967: PUSH
55968: LD_INT 4
55970: NEG
55971: PUSH
55972: EMPTY
55973: LIST
55974: LIST
55975: PUSH
55976: LD_INT 1
55978: PUSH
55979: LD_INT 3
55981: NEG
55982: PUSH
55983: EMPTY
55984: LIST
55985: LIST
55986: PUSH
55987: EMPTY
55988: LIST
55989: LIST
55990: LIST
55991: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
55992: LD_ADDR_VAR 0 24
55996: PUSH
55997: LD_INT 3
55999: PUSH
56000: LD_INT 0
56002: PUSH
56003: EMPTY
56004: LIST
56005: LIST
56006: PUSH
56007: LD_INT 3
56009: PUSH
56010: LD_INT 1
56012: NEG
56013: PUSH
56014: EMPTY
56015: LIST
56016: LIST
56017: PUSH
56018: LD_INT 4
56020: PUSH
56021: LD_INT 1
56023: PUSH
56024: EMPTY
56025: LIST
56026: LIST
56027: PUSH
56028: EMPTY
56029: LIST
56030: LIST
56031: LIST
56032: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
56033: LD_ADDR_VAR 0 25
56037: PUSH
56038: LD_INT 3
56040: PUSH
56041: LD_INT 3
56043: PUSH
56044: EMPTY
56045: LIST
56046: LIST
56047: PUSH
56048: LD_INT 4
56050: PUSH
56051: LD_INT 3
56053: PUSH
56054: EMPTY
56055: LIST
56056: LIST
56057: PUSH
56058: LD_INT 3
56060: PUSH
56061: LD_INT 4
56063: PUSH
56064: EMPTY
56065: LIST
56066: LIST
56067: PUSH
56068: EMPTY
56069: LIST
56070: LIST
56071: LIST
56072: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
56073: LD_ADDR_VAR 0 26
56077: PUSH
56078: LD_INT 0
56080: PUSH
56081: LD_INT 3
56083: PUSH
56084: EMPTY
56085: LIST
56086: LIST
56087: PUSH
56088: LD_INT 1
56090: PUSH
56091: LD_INT 4
56093: PUSH
56094: EMPTY
56095: LIST
56096: LIST
56097: PUSH
56098: LD_INT 1
56100: NEG
56101: PUSH
56102: LD_INT 3
56104: PUSH
56105: EMPTY
56106: LIST
56107: LIST
56108: PUSH
56109: EMPTY
56110: LIST
56111: LIST
56112: LIST
56113: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
56114: LD_ADDR_VAR 0 27
56118: PUSH
56119: LD_INT 3
56121: NEG
56122: PUSH
56123: LD_INT 0
56125: PUSH
56126: EMPTY
56127: LIST
56128: LIST
56129: PUSH
56130: LD_INT 3
56132: NEG
56133: PUSH
56134: LD_INT 1
56136: PUSH
56137: EMPTY
56138: LIST
56139: LIST
56140: PUSH
56141: LD_INT 4
56143: NEG
56144: PUSH
56145: LD_INT 1
56147: NEG
56148: PUSH
56149: EMPTY
56150: LIST
56151: LIST
56152: PUSH
56153: EMPTY
56154: LIST
56155: LIST
56156: LIST
56157: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
56158: LD_ADDR_VAR 0 28
56162: PUSH
56163: LD_INT 3
56165: NEG
56166: PUSH
56167: LD_INT 3
56169: NEG
56170: PUSH
56171: EMPTY
56172: LIST
56173: LIST
56174: PUSH
56175: LD_INT 3
56177: NEG
56178: PUSH
56179: LD_INT 4
56181: NEG
56182: PUSH
56183: EMPTY
56184: LIST
56185: LIST
56186: PUSH
56187: LD_INT 4
56189: NEG
56190: PUSH
56191: LD_INT 3
56193: NEG
56194: PUSH
56195: EMPTY
56196: LIST
56197: LIST
56198: PUSH
56199: EMPTY
56200: LIST
56201: LIST
56202: LIST
56203: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
56204: LD_ADDR_VAR 0 29
56208: PUSH
56209: LD_INT 1
56211: NEG
56212: PUSH
56213: LD_INT 3
56215: NEG
56216: PUSH
56217: EMPTY
56218: LIST
56219: LIST
56220: PUSH
56221: LD_INT 0
56223: PUSH
56224: LD_INT 3
56226: NEG
56227: PUSH
56228: EMPTY
56229: LIST
56230: LIST
56231: PUSH
56232: LD_INT 1
56234: PUSH
56235: LD_INT 2
56237: NEG
56238: PUSH
56239: EMPTY
56240: LIST
56241: LIST
56242: PUSH
56243: LD_INT 1
56245: NEG
56246: PUSH
56247: LD_INT 4
56249: NEG
56250: PUSH
56251: EMPTY
56252: LIST
56253: LIST
56254: PUSH
56255: LD_INT 0
56257: PUSH
56258: LD_INT 4
56260: NEG
56261: PUSH
56262: EMPTY
56263: LIST
56264: LIST
56265: PUSH
56266: LD_INT 1
56268: PUSH
56269: LD_INT 3
56271: NEG
56272: PUSH
56273: EMPTY
56274: LIST
56275: LIST
56276: PUSH
56277: LD_INT 1
56279: NEG
56280: PUSH
56281: LD_INT 5
56283: NEG
56284: PUSH
56285: EMPTY
56286: LIST
56287: LIST
56288: PUSH
56289: LD_INT 0
56291: PUSH
56292: LD_INT 5
56294: NEG
56295: PUSH
56296: EMPTY
56297: LIST
56298: LIST
56299: PUSH
56300: LD_INT 1
56302: PUSH
56303: LD_INT 4
56305: NEG
56306: PUSH
56307: EMPTY
56308: LIST
56309: LIST
56310: PUSH
56311: LD_INT 1
56313: NEG
56314: PUSH
56315: LD_INT 6
56317: NEG
56318: PUSH
56319: EMPTY
56320: LIST
56321: LIST
56322: PUSH
56323: LD_INT 0
56325: PUSH
56326: LD_INT 6
56328: NEG
56329: PUSH
56330: EMPTY
56331: LIST
56332: LIST
56333: PUSH
56334: LD_INT 1
56336: PUSH
56337: LD_INT 5
56339: NEG
56340: PUSH
56341: EMPTY
56342: LIST
56343: LIST
56344: PUSH
56345: EMPTY
56346: LIST
56347: LIST
56348: LIST
56349: LIST
56350: LIST
56351: LIST
56352: LIST
56353: LIST
56354: LIST
56355: LIST
56356: LIST
56357: LIST
56358: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
56359: LD_ADDR_VAR 0 30
56363: PUSH
56364: LD_INT 2
56366: PUSH
56367: LD_INT 1
56369: NEG
56370: PUSH
56371: EMPTY
56372: LIST
56373: LIST
56374: PUSH
56375: LD_INT 3
56377: PUSH
56378: LD_INT 0
56380: PUSH
56381: EMPTY
56382: LIST
56383: LIST
56384: PUSH
56385: LD_INT 3
56387: PUSH
56388: LD_INT 1
56390: PUSH
56391: EMPTY
56392: LIST
56393: LIST
56394: PUSH
56395: LD_INT 3
56397: PUSH
56398: LD_INT 1
56400: NEG
56401: PUSH
56402: EMPTY
56403: LIST
56404: LIST
56405: PUSH
56406: LD_INT 4
56408: PUSH
56409: LD_INT 0
56411: PUSH
56412: EMPTY
56413: LIST
56414: LIST
56415: PUSH
56416: LD_INT 4
56418: PUSH
56419: LD_INT 1
56421: PUSH
56422: EMPTY
56423: LIST
56424: LIST
56425: PUSH
56426: LD_INT 4
56428: PUSH
56429: LD_INT 1
56431: NEG
56432: PUSH
56433: EMPTY
56434: LIST
56435: LIST
56436: PUSH
56437: LD_INT 5
56439: PUSH
56440: LD_INT 0
56442: PUSH
56443: EMPTY
56444: LIST
56445: LIST
56446: PUSH
56447: LD_INT 5
56449: PUSH
56450: LD_INT 1
56452: PUSH
56453: EMPTY
56454: LIST
56455: LIST
56456: PUSH
56457: LD_INT 5
56459: PUSH
56460: LD_INT 1
56462: NEG
56463: PUSH
56464: EMPTY
56465: LIST
56466: LIST
56467: PUSH
56468: LD_INT 6
56470: PUSH
56471: LD_INT 0
56473: PUSH
56474: EMPTY
56475: LIST
56476: LIST
56477: PUSH
56478: LD_INT 6
56480: PUSH
56481: LD_INT 1
56483: PUSH
56484: EMPTY
56485: LIST
56486: LIST
56487: PUSH
56488: EMPTY
56489: LIST
56490: LIST
56491: LIST
56492: LIST
56493: LIST
56494: LIST
56495: LIST
56496: LIST
56497: LIST
56498: LIST
56499: LIST
56500: LIST
56501: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
56502: LD_ADDR_VAR 0 31
56506: PUSH
56507: LD_INT 3
56509: PUSH
56510: LD_INT 2
56512: PUSH
56513: EMPTY
56514: LIST
56515: LIST
56516: PUSH
56517: LD_INT 3
56519: PUSH
56520: LD_INT 3
56522: PUSH
56523: EMPTY
56524: LIST
56525: LIST
56526: PUSH
56527: LD_INT 2
56529: PUSH
56530: LD_INT 3
56532: PUSH
56533: EMPTY
56534: LIST
56535: LIST
56536: PUSH
56537: LD_INT 4
56539: PUSH
56540: LD_INT 3
56542: PUSH
56543: EMPTY
56544: LIST
56545: LIST
56546: PUSH
56547: LD_INT 4
56549: PUSH
56550: LD_INT 4
56552: PUSH
56553: EMPTY
56554: LIST
56555: LIST
56556: PUSH
56557: LD_INT 3
56559: PUSH
56560: LD_INT 4
56562: PUSH
56563: EMPTY
56564: LIST
56565: LIST
56566: PUSH
56567: LD_INT 5
56569: PUSH
56570: LD_INT 4
56572: PUSH
56573: EMPTY
56574: LIST
56575: LIST
56576: PUSH
56577: LD_INT 5
56579: PUSH
56580: LD_INT 5
56582: PUSH
56583: EMPTY
56584: LIST
56585: LIST
56586: PUSH
56587: LD_INT 4
56589: PUSH
56590: LD_INT 5
56592: PUSH
56593: EMPTY
56594: LIST
56595: LIST
56596: PUSH
56597: LD_INT 6
56599: PUSH
56600: LD_INT 5
56602: PUSH
56603: EMPTY
56604: LIST
56605: LIST
56606: PUSH
56607: LD_INT 6
56609: PUSH
56610: LD_INT 6
56612: PUSH
56613: EMPTY
56614: LIST
56615: LIST
56616: PUSH
56617: LD_INT 5
56619: PUSH
56620: LD_INT 6
56622: PUSH
56623: EMPTY
56624: LIST
56625: LIST
56626: PUSH
56627: EMPTY
56628: LIST
56629: LIST
56630: LIST
56631: LIST
56632: LIST
56633: LIST
56634: LIST
56635: LIST
56636: LIST
56637: LIST
56638: LIST
56639: LIST
56640: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
56641: LD_ADDR_VAR 0 32
56645: PUSH
56646: LD_INT 1
56648: PUSH
56649: LD_INT 3
56651: PUSH
56652: EMPTY
56653: LIST
56654: LIST
56655: PUSH
56656: LD_INT 0
56658: PUSH
56659: LD_INT 3
56661: PUSH
56662: EMPTY
56663: LIST
56664: LIST
56665: PUSH
56666: LD_INT 1
56668: NEG
56669: PUSH
56670: LD_INT 2
56672: PUSH
56673: EMPTY
56674: LIST
56675: LIST
56676: PUSH
56677: LD_INT 1
56679: PUSH
56680: LD_INT 4
56682: PUSH
56683: EMPTY
56684: LIST
56685: LIST
56686: PUSH
56687: LD_INT 0
56689: PUSH
56690: LD_INT 4
56692: PUSH
56693: EMPTY
56694: LIST
56695: LIST
56696: PUSH
56697: LD_INT 1
56699: NEG
56700: PUSH
56701: LD_INT 3
56703: PUSH
56704: EMPTY
56705: LIST
56706: LIST
56707: PUSH
56708: LD_INT 1
56710: PUSH
56711: LD_INT 5
56713: PUSH
56714: EMPTY
56715: LIST
56716: LIST
56717: PUSH
56718: LD_INT 0
56720: PUSH
56721: LD_INT 5
56723: PUSH
56724: EMPTY
56725: LIST
56726: LIST
56727: PUSH
56728: LD_INT 1
56730: NEG
56731: PUSH
56732: LD_INT 4
56734: PUSH
56735: EMPTY
56736: LIST
56737: LIST
56738: PUSH
56739: LD_INT 1
56741: PUSH
56742: LD_INT 6
56744: PUSH
56745: EMPTY
56746: LIST
56747: LIST
56748: PUSH
56749: LD_INT 0
56751: PUSH
56752: LD_INT 6
56754: PUSH
56755: EMPTY
56756: LIST
56757: LIST
56758: PUSH
56759: LD_INT 1
56761: NEG
56762: PUSH
56763: LD_INT 5
56765: PUSH
56766: EMPTY
56767: LIST
56768: LIST
56769: PUSH
56770: EMPTY
56771: LIST
56772: LIST
56773: LIST
56774: LIST
56775: LIST
56776: LIST
56777: LIST
56778: LIST
56779: LIST
56780: LIST
56781: LIST
56782: LIST
56783: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
56784: LD_ADDR_VAR 0 33
56788: PUSH
56789: LD_INT 2
56791: NEG
56792: PUSH
56793: LD_INT 1
56795: PUSH
56796: EMPTY
56797: LIST
56798: LIST
56799: PUSH
56800: LD_INT 3
56802: NEG
56803: PUSH
56804: LD_INT 0
56806: PUSH
56807: EMPTY
56808: LIST
56809: LIST
56810: PUSH
56811: LD_INT 3
56813: NEG
56814: PUSH
56815: LD_INT 1
56817: NEG
56818: PUSH
56819: EMPTY
56820: LIST
56821: LIST
56822: PUSH
56823: LD_INT 3
56825: NEG
56826: PUSH
56827: LD_INT 1
56829: PUSH
56830: EMPTY
56831: LIST
56832: LIST
56833: PUSH
56834: LD_INT 4
56836: NEG
56837: PUSH
56838: LD_INT 0
56840: PUSH
56841: EMPTY
56842: LIST
56843: LIST
56844: PUSH
56845: LD_INT 4
56847: NEG
56848: PUSH
56849: LD_INT 1
56851: NEG
56852: PUSH
56853: EMPTY
56854: LIST
56855: LIST
56856: PUSH
56857: LD_INT 4
56859: NEG
56860: PUSH
56861: LD_INT 1
56863: PUSH
56864: EMPTY
56865: LIST
56866: LIST
56867: PUSH
56868: LD_INT 5
56870: NEG
56871: PUSH
56872: LD_INT 0
56874: PUSH
56875: EMPTY
56876: LIST
56877: LIST
56878: PUSH
56879: LD_INT 5
56881: NEG
56882: PUSH
56883: LD_INT 1
56885: NEG
56886: PUSH
56887: EMPTY
56888: LIST
56889: LIST
56890: PUSH
56891: LD_INT 5
56893: NEG
56894: PUSH
56895: LD_INT 1
56897: PUSH
56898: EMPTY
56899: LIST
56900: LIST
56901: PUSH
56902: LD_INT 6
56904: NEG
56905: PUSH
56906: LD_INT 0
56908: PUSH
56909: EMPTY
56910: LIST
56911: LIST
56912: PUSH
56913: LD_INT 6
56915: NEG
56916: PUSH
56917: LD_INT 1
56919: NEG
56920: PUSH
56921: EMPTY
56922: LIST
56923: LIST
56924: PUSH
56925: EMPTY
56926: LIST
56927: LIST
56928: LIST
56929: LIST
56930: LIST
56931: LIST
56932: LIST
56933: LIST
56934: LIST
56935: LIST
56936: LIST
56937: LIST
56938: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
56939: LD_ADDR_VAR 0 34
56943: PUSH
56944: LD_INT 2
56946: NEG
56947: PUSH
56948: LD_INT 3
56950: NEG
56951: PUSH
56952: EMPTY
56953: LIST
56954: LIST
56955: PUSH
56956: LD_INT 3
56958: NEG
56959: PUSH
56960: LD_INT 2
56962: NEG
56963: PUSH
56964: EMPTY
56965: LIST
56966: LIST
56967: PUSH
56968: LD_INT 3
56970: NEG
56971: PUSH
56972: LD_INT 3
56974: NEG
56975: PUSH
56976: EMPTY
56977: LIST
56978: LIST
56979: PUSH
56980: LD_INT 3
56982: NEG
56983: PUSH
56984: LD_INT 4
56986: NEG
56987: PUSH
56988: EMPTY
56989: LIST
56990: LIST
56991: PUSH
56992: LD_INT 4
56994: NEG
56995: PUSH
56996: LD_INT 3
56998: NEG
56999: PUSH
57000: EMPTY
57001: LIST
57002: LIST
57003: PUSH
57004: LD_INT 4
57006: NEG
57007: PUSH
57008: LD_INT 4
57010: NEG
57011: PUSH
57012: EMPTY
57013: LIST
57014: LIST
57015: PUSH
57016: LD_INT 4
57018: NEG
57019: PUSH
57020: LD_INT 5
57022: NEG
57023: PUSH
57024: EMPTY
57025: LIST
57026: LIST
57027: PUSH
57028: LD_INT 5
57030: NEG
57031: PUSH
57032: LD_INT 4
57034: NEG
57035: PUSH
57036: EMPTY
57037: LIST
57038: LIST
57039: PUSH
57040: LD_INT 5
57042: NEG
57043: PUSH
57044: LD_INT 5
57046: NEG
57047: PUSH
57048: EMPTY
57049: LIST
57050: LIST
57051: PUSH
57052: LD_INT 5
57054: NEG
57055: PUSH
57056: LD_INT 6
57058: NEG
57059: PUSH
57060: EMPTY
57061: LIST
57062: LIST
57063: PUSH
57064: LD_INT 6
57066: NEG
57067: PUSH
57068: LD_INT 5
57070: NEG
57071: PUSH
57072: EMPTY
57073: LIST
57074: LIST
57075: PUSH
57076: LD_INT 6
57078: NEG
57079: PUSH
57080: LD_INT 6
57082: NEG
57083: PUSH
57084: EMPTY
57085: LIST
57086: LIST
57087: PUSH
57088: EMPTY
57089: LIST
57090: LIST
57091: LIST
57092: LIST
57093: LIST
57094: LIST
57095: LIST
57096: LIST
57097: LIST
57098: LIST
57099: LIST
57100: LIST
57101: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
57102: LD_ADDR_VAR 0 41
57106: PUSH
57107: LD_INT 0
57109: PUSH
57110: LD_INT 2
57112: NEG
57113: PUSH
57114: EMPTY
57115: LIST
57116: LIST
57117: PUSH
57118: LD_INT 1
57120: NEG
57121: PUSH
57122: LD_INT 3
57124: NEG
57125: PUSH
57126: EMPTY
57127: LIST
57128: LIST
57129: PUSH
57130: LD_INT 1
57132: PUSH
57133: LD_INT 2
57135: NEG
57136: PUSH
57137: EMPTY
57138: LIST
57139: LIST
57140: PUSH
57141: EMPTY
57142: LIST
57143: LIST
57144: LIST
57145: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
57146: LD_ADDR_VAR 0 42
57150: PUSH
57151: LD_INT 2
57153: PUSH
57154: LD_INT 0
57156: PUSH
57157: EMPTY
57158: LIST
57159: LIST
57160: PUSH
57161: LD_INT 2
57163: PUSH
57164: LD_INT 1
57166: NEG
57167: PUSH
57168: EMPTY
57169: LIST
57170: LIST
57171: PUSH
57172: LD_INT 3
57174: PUSH
57175: LD_INT 1
57177: PUSH
57178: EMPTY
57179: LIST
57180: LIST
57181: PUSH
57182: EMPTY
57183: LIST
57184: LIST
57185: LIST
57186: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
57187: LD_ADDR_VAR 0 43
57191: PUSH
57192: LD_INT 2
57194: PUSH
57195: LD_INT 2
57197: PUSH
57198: EMPTY
57199: LIST
57200: LIST
57201: PUSH
57202: LD_INT 3
57204: PUSH
57205: LD_INT 2
57207: PUSH
57208: EMPTY
57209: LIST
57210: LIST
57211: PUSH
57212: LD_INT 2
57214: PUSH
57215: LD_INT 3
57217: PUSH
57218: EMPTY
57219: LIST
57220: LIST
57221: PUSH
57222: EMPTY
57223: LIST
57224: LIST
57225: LIST
57226: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
57227: LD_ADDR_VAR 0 44
57231: PUSH
57232: LD_INT 0
57234: PUSH
57235: LD_INT 2
57237: PUSH
57238: EMPTY
57239: LIST
57240: LIST
57241: PUSH
57242: LD_INT 1
57244: PUSH
57245: LD_INT 3
57247: PUSH
57248: EMPTY
57249: LIST
57250: LIST
57251: PUSH
57252: LD_INT 1
57254: NEG
57255: PUSH
57256: LD_INT 2
57258: PUSH
57259: EMPTY
57260: LIST
57261: LIST
57262: PUSH
57263: EMPTY
57264: LIST
57265: LIST
57266: LIST
57267: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57268: LD_ADDR_VAR 0 45
57272: PUSH
57273: LD_INT 2
57275: NEG
57276: PUSH
57277: LD_INT 0
57279: PUSH
57280: EMPTY
57281: LIST
57282: LIST
57283: PUSH
57284: LD_INT 2
57286: NEG
57287: PUSH
57288: LD_INT 1
57290: PUSH
57291: EMPTY
57292: LIST
57293: LIST
57294: PUSH
57295: LD_INT 3
57297: NEG
57298: PUSH
57299: LD_INT 1
57301: NEG
57302: PUSH
57303: EMPTY
57304: LIST
57305: LIST
57306: PUSH
57307: EMPTY
57308: LIST
57309: LIST
57310: LIST
57311: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
57312: LD_ADDR_VAR 0 46
57316: PUSH
57317: LD_INT 2
57319: NEG
57320: PUSH
57321: LD_INT 2
57323: NEG
57324: PUSH
57325: EMPTY
57326: LIST
57327: LIST
57328: PUSH
57329: LD_INT 2
57331: NEG
57332: PUSH
57333: LD_INT 3
57335: NEG
57336: PUSH
57337: EMPTY
57338: LIST
57339: LIST
57340: PUSH
57341: LD_INT 3
57343: NEG
57344: PUSH
57345: LD_INT 2
57347: NEG
57348: PUSH
57349: EMPTY
57350: LIST
57351: LIST
57352: PUSH
57353: EMPTY
57354: LIST
57355: LIST
57356: LIST
57357: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
57358: LD_ADDR_VAR 0 47
57362: PUSH
57363: LD_INT 2
57365: NEG
57366: PUSH
57367: LD_INT 3
57369: NEG
57370: PUSH
57371: EMPTY
57372: LIST
57373: LIST
57374: PUSH
57375: LD_INT 1
57377: NEG
57378: PUSH
57379: LD_INT 3
57381: NEG
57382: PUSH
57383: EMPTY
57384: LIST
57385: LIST
57386: PUSH
57387: EMPTY
57388: LIST
57389: LIST
57390: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
57391: LD_ADDR_VAR 0 48
57395: PUSH
57396: LD_INT 1
57398: PUSH
57399: LD_INT 2
57401: NEG
57402: PUSH
57403: EMPTY
57404: LIST
57405: LIST
57406: PUSH
57407: LD_INT 2
57409: PUSH
57410: LD_INT 1
57412: NEG
57413: PUSH
57414: EMPTY
57415: LIST
57416: LIST
57417: PUSH
57418: EMPTY
57419: LIST
57420: LIST
57421: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
57422: LD_ADDR_VAR 0 49
57426: PUSH
57427: LD_INT 3
57429: PUSH
57430: LD_INT 1
57432: PUSH
57433: EMPTY
57434: LIST
57435: LIST
57436: PUSH
57437: LD_INT 3
57439: PUSH
57440: LD_INT 2
57442: PUSH
57443: EMPTY
57444: LIST
57445: LIST
57446: PUSH
57447: EMPTY
57448: LIST
57449: LIST
57450: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
57451: LD_ADDR_VAR 0 50
57455: PUSH
57456: LD_INT 2
57458: PUSH
57459: LD_INT 3
57461: PUSH
57462: EMPTY
57463: LIST
57464: LIST
57465: PUSH
57466: LD_INT 1
57468: PUSH
57469: LD_INT 3
57471: PUSH
57472: EMPTY
57473: LIST
57474: LIST
57475: PUSH
57476: EMPTY
57477: LIST
57478: LIST
57479: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
57480: LD_ADDR_VAR 0 51
57484: PUSH
57485: LD_INT 1
57487: NEG
57488: PUSH
57489: LD_INT 2
57491: PUSH
57492: EMPTY
57493: LIST
57494: LIST
57495: PUSH
57496: LD_INT 2
57498: NEG
57499: PUSH
57500: LD_INT 1
57502: PUSH
57503: EMPTY
57504: LIST
57505: LIST
57506: PUSH
57507: EMPTY
57508: LIST
57509: LIST
57510: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57511: LD_ADDR_VAR 0 52
57515: PUSH
57516: LD_INT 3
57518: NEG
57519: PUSH
57520: LD_INT 1
57522: NEG
57523: PUSH
57524: EMPTY
57525: LIST
57526: LIST
57527: PUSH
57528: LD_INT 3
57530: NEG
57531: PUSH
57532: LD_INT 2
57534: NEG
57535: PUSH
57536: EMPTY
57537: LIST
57538: LIST
57539: PUSH
57540: EMPTY
57541: LIST
57542: LIST
57543: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57544: LD_ADDR_VAR 0 53
57548: PUSH
57549: LD_INT 1
57551: NEG
57552: PUSH
57553: LD_INT 3
57555: NEG
57556: PUSH
57557: EMPTY
57558: LIST
57559: LIST
57560: PUSH
57561: LD_INT 0
57563: PUSH
57564: LD_INT 3
57566: NEG
57567: PUSH
57568: EMPTY
57569: LIST
57570: LIST
57571: PUSH
57572: LD_INT 1
57574: PUSH
57575: LD_INT 2
57577: NEG
57578: PUSH
57579: EMPTY
57580: LIST
57581: LIST
57582: PUSH
57583: EMPTY
57584: LIST
57585: LIST
57586: LIST
57587: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57588: LD_ADDR_VAR 0 54
57592: PUSH
57593: LD_INT 2
57595: PUSH
57596: LD_INT 1
57598: NEG
57599: PUSH
57600: EMPTY
57601: LIST
57602: LIST
57603: PUSH
57604: LD_INT 3
57606: PUSH
57607: LD_INT 0
57609: PUSH
57610: EMPTY
57611: LIST
57612: LIST
57613: PUSH
57614: LD_INT 3
57616: PUSH
57617: LD_INT 1
57619: PUSH
57620: EMPTY
57621: LIST
57622: LIST
57623: PUSH
57624: EMPTY
57625: LIST
57626: LIST
57627: LIST
57628: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57629: LD_ADDR_VAR 0 55
57633: PUSH
57634: LD_INT 3
57636: PUSH
57637: LD_INT 2
57639: PUSH
57640: EMPTY
57641: LIST
57642: LIST
57643: PUSH
57644: LD_INT 3
57646: PUSH
57647: LD_INT 3
57649: PUSH
57650: EMPTY
57651: LIST
57652: LIST
57653: PUSH
57654: LD_INT 2
57656: PUSH
57657: LD_INT 3
57659: PUSH
57660: EMPTY
57661: LIST
57662: LIST
57663: PUSH
57664: EMPTY
57665: LIST
57666: LIST
57667: LIST
57668: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57669: LD_ADDR_VAR 0 56
57673: PUSH
57674: LD_INT 1
57676: PUSH
57677: LD_INT 3
57679: PUSH
57680: EMPTY
57681: LIST
57682: LIST
57683: PUSH
57684: LD_INT 0
57686: PUSH
57687: LD_INT 3
57689: PUSH
57690: EMPTY
57691: LIST
57692: LIST
57693: PUSH
57694: LD_INT 1
57696: NEG
57697: PUSH
57698: LD_INT 2
57700: PUSH
57701: EMPTY
57702: LIST
57703: LIST
57704: PUSH
57705: EMPTY
57706: LIST
57707: LIST
57708: LIST
57709: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57710: LD_ADDR_VAR 0 57
57714: PUSH
57715: LD_INT 2
57717: NEG
57718: PUSH
57719: LD_INT 1
57721: PUSH
57722: EMPTY
57723: LIST
57724: LIST
57725: PUSH
57726: LD_INT 3
57728: NEG
57729: PUSH
57730: LD_INT 0
57732: PUSH
57733: EMPTY
57734: LIST
57735: LIST
57736: PUSH
57737: LD_INT 3
57739: NEG
57740: PUSH
57741: LD_INT 1
57743: NEG
57744: PUSH
57745: EMPTY
57746: LIST
57747: LIST
57748: PUSH
57749: EMPTY
57750: LIST
57751: LIST
57752: LIST
57753: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57754: LD_ADDR_VAR 0 58
57758: PUSH
57759: LD_INT 2
57761: NEG
57762: PUSH
57763: LD_INT 3
57765: NEG
57766: PUSH
57767: EMPTY
57768: LIST
57769: LIST
57770: PUSH
57771: LD_INT 3
57773: NEG
57774: PUSH
57775: LD_INT 2
57777: NEG
57778: PUSH
57779: EMPTY
57780: LIST
57781: LIST
57782: PUSH
57783: LD_INT 3
57785: NEG
57786: PUSH
57787: LD_INT 3
57789: NEG
57790: PUSH
57791: EMPTY
57792: LIST
57793: LIST
57794: PUSH
57795: EMPTY
57796: LIST
57797: LIST
57798: LIST
57799: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
57800: LD_ADDR_VAR 0 59
57804: PUSH
57805: LD_INT 1
57807: NEG
57808: PUSH
57809: LD_INT 2
57811: NEG
57812: PUSH
57813: EMPTY
57814: LIST
57815: LIST
57816: PUSH
57817: LD_INT 0
57819: PUSH
57820: LD_INT 2
57822: NEG
57823: PUSH
57824: EMPTY
57825: LIST
57826: LIST
57827: PUSH
57828: LD_INT 1
57830: PUSH
57831: LD_INT 1
57833: NEG
57834: PUSH
57835: EMPTY
57836: LIST
57837: LIST
57838: PUSH
57839: EMPTY
57840: LIST
57841: LIST
57842: LIST
57843: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
57844: LD_ADDR_VAR 0 60
57848: PUSH
57849: LD_INT 1
57851: PUSH
57852: LD_INT 1
57854: NEG
57855: PUSH
57856: EMPTY
57857: LIST
57858: LIST
57859: PUSH
57860: LD_INT 2
57862: PUSH
57863: LD_INT 0
57865: PUSH
57866: EMPTY
57867: LIST
57868: LIST
57869: PUSH
57870: LD_INT 2
57872: PUSH
57873: LD_INT 1
57875: PUSH
57876: EMPTY
57877: LIST
57878: LIST
57879: PUSH
57880: EMPTY
57881: LIST
57882: LIST
57883: LIST
57884: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
57885: LD_ADDR_VAR 0 61
57889: PUSH
57890: LD_INT 2
57892: PUSH
57893: LD_INT 1
57895: PUSH
57896: EMPTY
57897: LIST
57898: LIST
57899: PUSH
57900: LD_INT 2
57902: PUSH
57903: LD_INT 2
57905: PUSH
57906: EMPTY
57907: LIST
57908: LIST
57909: PUSH
57910: LD_INT 1
57912: PUSH
57913: LD_INT 2
57915: PUSH
57916: EMPTY
57917: LIST
57918: LIST
57919: PUSH
57920: EMPTY
57921: LIST
57922: LIST
57923: LIST
57924: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
57925: LD_ADDR_VAR 0 62
57929: PUSH
57930: LD_INT 1
57932: PUSH
57933: LD_INT 2
57935: PUSH
57936: EMPTY
57937: LIST
57938: LIST
57939: PUSH
57940: LD_INT 0
57942: PUSH
57943: LD_INT 2
57945: PUSH
57946: EMPTY
57947: LIST
57948: LIST
57949: PUSH
57950: LD_INT 1
57952: NEG
57953: PUSH
57954: LD_INT 1
57956: PUSH
57957: EMPTY
57958: LIST
57959: LIST
57960: PUSH
57961: EMPTY
57962: LIST
57963: LIST
57964: LIST
57965: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
57966: LD_ADDR_VAR 0 63
57970: PUSH
57971: LD_INT 1
57973: NEG
57974: PUSH
57975: LD_INT 1
57977: PUSH
57978: EMPTY
57979: LIST
57980: LIST
57981: PUSH
57982: LD_INT 2
57984: NEG
57985: PUSH
57986: LD_INT 0
57988: PUSH
57989: EMPTY
57990: LIST
57991: LIST
57992: PUSH
57993: LD_INT 2
57995: NEG
57996: PUSH
57997: LD_INT 1
57999: NEG
58000: PUSH
58001: EMPTY
58002: LIST
58003: LIST
58004: PUSH
58005: EMPTY
58006: LIST
58007: LIST
58008: LIST
58009: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58010: LD_ADDR_VAR 0 64
58014: PUSH
58015: LD_INT 1
58017: NEG
58018: PUSH
58019: LD_INT 2
58021: NEG
58022: PUSH
58023: EMPTY
58024: LIST
58025: LIST
58026: PUSH
58027: LD_INT 2
58029: NEG
58030: PUSH
58031: LD_INT 1
58033: NEG
58034: PUSH
58035: EMPTY
58036: LIST
58037: LIST
58038: PUSH
58039: LD_INT 2
58041: NEG
58042: PUSH
58043: LD_INT 2
58045: NEG
58046: PUSH
58047: EMPTY
58048: LIST
58049: LIST
58050: PUSH
58051: EMPTY
58052: LIST
58053: LIST
58054: LIST
58055: ST_TO_ADDR
// end ; 2 :
58056: GO 61322
58058: LD_INT 2
58060: DOUBLE
58061: EQUAL
58062: IFTRUE 58066
58064: GO 61321
58066: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
58067: LD_ADDR_VAR 0 29
58071: PUSH
58072: LD_INT 4
58074: PUSH
58075: LD_INT 0
58077: PUSH
58078: EMPTY
58079: LIST
58080: LIST
58081: PUSH
58082: LD_INT 4
58084: PUSH
58085: LD_INT 1
58087: NEG
58088: PUSH
58089: EMPTY
58090: LIST
58091: LIST
58092: PUSH
58093: LD_INT 5
58095: PUSH
58096: LD_INT 0
58098: PUSH
58099: EMPTY
58100: LIST
58101: LIST
58102: PUSH
58103: LD_INT 5
58105: PUSH
58106: LD_INT 1
58108: PUSH
58109: EMPTY
58110: LIST
58111: LIST
58112: PUSH
58113: LD_INT 4
58115: PUSH
58116: LD_INT 1
58118: PUSH
58119: EMPTY
58120: LIST
58121: LIST
58122: PUSH
58123: LD_INT 3
58125: PUSH
58126: LD_INT 0
58128: PUSH
58129: EMPTY
58130: LIST
58131: LIST
58132: PUSH
58133: LD_INT 3
58135: PUSH
58136: LD_INT 1
58138: NEG
58139: PUSH
58140: EMPTY
58141: LIST
58142: LIST
58143: PUSH
58144: LD_INT 3
58146: PUSH
58147: LD_INT 2
58149: NEG
58150: PUSH
58151: EMPTY
58152: LIST
58153: LIST
58154: PUSH
58155: LD_INT 5
58157: PUSH
58158: LD_INT 2
58160: PUSH
58161: EMPTY
58162: LIST
58163: LIST
58164: PUSH
58165: LD_INT 3
58167: PUSH
58168: LD_INT 3
58170: PUSH
58171: EMPTY
58172: LIST
58173: LIST
58174: PUSH
58175: LD_INT 3
58177: PUSH
58178: LD_INT 2
58180: PUSH
58181: EMPTY
58182: LIST
58183: LIST
58184: PUSH
58185: LD_INT 4
58187: PUSH
58188: LD_INT 3
58190: PUSH
58191: EMPTY
58192: LIST
58193: LIST
58194: PUSH
58195: LD_INT 4
58197: PUSH
58198: LD_INT 4
58200: PUSH
58201: EMPTY
58202: LIST
58203: LIST
58204: PUSH
58205: LD_INT 3
58207: PUSH
58208: LD_INT 4
58210: PUSH
58211: EMPTY
58212: LIST
58213: LIST
58214: PUSH
58215: LD_INT 2
58217: PUSH
58218: LD_INT 3
58220: PUSH
58221: EMPTY
58222: LIST
58223: LIST
58224: PUSH
58225: LD_INT 2
58227: PUSH
58228: LD_INT 2
58230: PUSH
58231: EMPTY
58232: LIST
58233: LIST
58234: PUSH
58235: LD_INT 4
58237: PUSH
58238: LD_INT 2
58240: PUSH
58241: EMPTY
58242: LIST
58243: LIST
58244: PUSH
58245: LD_INT 2
58247: PUSH
58248: LD_INT 4
58250: PUSH
58251: EMPTY
58252: LIST
58253: LIST
58254: PUSH
58255: LD_INT 0
58257: PUSH
58258: LD_INT 4
58260: PUSH
58261: EMPTY
58262: LIST
58263: LIST
58264: PUSH
58265: LD_INT 0
58267: PUSH
58268: LD_INT 3
58270: PUSH
58271: EMPTY
58272: LIST
58273: LIST
58274: PUSH
58275: LD_INT 1
58277: PUSH
58278: LD_INT 4
58280: PUSH
58281: EMPTY
58282: LIST
58283: LIST
58284: PUSH
58285: LD_INT 1
58287: PUSH
58288: LD_INT 5
58290: PUSH
58291: EMPTY
58292: LIST
58293: LIST
58294: PUSH
58295: LD_INT 0
58297: PUSH
58298: LD_INT 5
58300: PUSH
58301: EMPTY
58302: LIST
58303: LIST
58304: PUSH
58305: LD_INT 1
58307: NEG
58308: PUSH
58309: LD_INT 4
58311: PUSH
58312: EMPTY
58313: LIST
58314: LIST
58315: PUSH
58316: LD_INT 1
58318: NEG
58319: PUSH
58320: LD_INT 3
58322: PUSH
58323: EMPTY
58324: LIST
58325: LIST
58326: PUSH
58327: LD_INT 2
58329: PUSH
58330: LD_INT 5
58332: PUSH
58333: EMPTY
58334: LIST
58335: LIST
58336: PUSH
58337: LD_INT 2
58339: NEG
58340: PUSH
58341: LD_INT 3
58343: PUSH
58344: EMPTY
58345: LIST
58346: LIST
58347: PUSH
58348: LD_INT 3
58350: NEG
58351: PUSH
58352: LD_INT 0
58354: PUSH
58355: EMPTY
58356: LIST
58357: LIST
58358: PUSH
58359: LD_INT 3
58361: NEG
58362: PUSH
58363: LD_INT 1
58365: NEG
58366: PUSH
58367: EMPTY
58368: LIST
58369: LIST
58370: PUSH
58371: LD_INT 2
58373: NEG
58374: PUSH
58375: LD_INT 0
58377: PUSH
58378: EMPTY
58379: LIST
58380: LIST
58381: PUSH
58382: LD_INT 2
58384: NEG
58385: PUSH
58386: LD_INT 1
58388: PUSH
58389: EMPTY
58390: LIST
58391: LIST
58392: PUSH
58393: LD_INT 3
58395: NEG
58396: PUSH
58397: LD_INT 1
58399: PUSH
58400: EMPTY
58401: LIST
58402: LIST
58403: PUSH
58404: LD_INT 4
58406: NEG
58407: PUSH
58408: LD_INT 0
58410: PUSH
58411: EMPTY
58412: LIST
58413: LIST
58414: PUSH
58415: LD_INT 4
58417: NEG
58418: PUSH
58419: LD_INT 1
58421: NEG
58422: PUSH
58423: EMPTY
58424: LIST
58425: LIST
58426: PUSH
58427: LD_INT 4
58429: NEG
58430: PUSH
58431: LD_INT 2
58433: NEG
58434: PUSH
58435: EMPTY
58436: LIST
58437: LIST
58438: PUSH
58439: LD_INT 2
58441: NEG
58442: PUSH
58443: LD_INT 2
58445: PUSH
58446: EMPTY
58447: LIST
58448: LIST
58449: PUSH
58450: LD_INT 4
58452: NEG
58453: PUSH
58454: LD_INT 4
58456: NEG
58457: PUSH
58458: EMPTY
58459: LIST
58460: LIST
58461: PUSH
58462: LD_INT 4
58464: NEG
58465: PUSH
58466: LD_INT 5
58468: NEG
58469: PUSH
58470: EMPTY
58471: LIST
58472: LIST
58473: PUSH
58474: LD_INT 3
58476: NEG
58477: PUSH
58478: LD_INT 4
58480: NEG
58481: PUSH
58482: EMPTY
58483: LIST
58484: LIST
58485: PUSH
58486: LD_INT 3
58488: NEG
58489: PUSH
58490: LD_INT 3
58492: NEG
58493: PUSH
58494: EMPTY
58495: LIST
58496: LIST
58497: PUSH
58498: LD_INT 4
58500: NEG
58501: PUSH
58502: LD_INT 3
58504: NEG
58505: PUSH
58506: EMPTY
58507: LIST
58508: LIST
58509: PUSH
58510: LD_INT 5
58512: NEG
58513: PUSH
58514: LD_INT 4
58516: NEG
58517: PUSH
58518: EMPTY
58519: LIST
58520: LIST
58521: PUSH
58522: LD_INT 5
58524: NEG
58525: PUSH
58526: LD_INT 5
58528: NEG
58529: PUSH
58530: EMPTY
58531: LIST
58532: LIST
58533: PUSH
58534: LD_INT 3
58536: NEG
58537: PUSH
58538: LD_INT 5
58540: NEG
58541: PUSH
58542: EMPTY
58543: LIST
58544: LIST
58545: PUSH
58546: LD_INT 5
58548: NEG
58549: PUSH
58550: LD_INT 3
58552: NEG
58553: PUSH
58554: EMPTY
58555: LIST
58556: LIST
58557: PUSH
58558: EMPTY
58559: LIST
58560: LIST
58561: LIST
58562: LIST
58563: LIST
58564: LIST
58565: LIST
58566: LIST
58567: LIST
58568: LIST
58569: LIST
58570: LIST
58571: LIST
58572: LIST
58573: LIST
58574: LIST
58575: LIST
58576: LIST
58577: LIST
58578: LIST
58579: LIST
58580: LIST
58581: LIST
58582: LIST
58583: LIST
58584: LIST
58585: LIST
58586: LIST
58587: LIST
58588: LIST
58589: LIST
58590: LIST
58591: LIST
58592: LIST
58593: LIST
58594: LIST
58595: LIST
58596: LIST
58597: LIST
58598: LIST
58599: LIST
58600: LIST
58601: LIST
58602: LIST
58603: LIST
58604: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
58605: LD_ADDR_VAR 0 30
58609: PUSH
58610: LD_INT 4
58612: PUSH
58613: LD_INT 4
58615: PUSH
58616: EMPTY
58617: LIST
58618: LIST
58619: PUSH
58620: LD_INT 4
58622: PUSH
58623: LD_INT 3
58625: PUSH
58626: EMPTY
58627: LIST
58628: LIST
58629: PUSH
58630: LD_INT 5
58632: PUSH
58633: LD_INT 4
58635: PUSH
58636: EMPTY
58637: LIST
58638: LIST
58639: PUSH
58640: LD_INT 5
58642: PUSH
58643: LD_INT 5
58645: PUSH
58646: EMPTY
58647: LIST
58648: LIST
58649: PUSH
58650: LD_INT 4
58652: PUSH
58653: LD_INT 5
58655: PUSH
58656: EMPTY
58657: LIST
58658: LIST
58659: PUSH
58660: LD_INT 3
58662: PUSH
58663: LD_INT 4
58665: PUSH
58666: EMPTY
58667: LIST
58668: LIST
58669: PUSH
58670: LD_INT 3
58672: PUSH
58673: LD_INT 3
58675: PUSH
58676: EMPTY
58677: LIST
58678: LIST
58679: PUSH
58680: LD_INT 5
58682: PUSH
58683: LD_INT 3
58685: PUSH
58686: EMPTY
58687: LIST
58688: LIST
58689: PUSH
58690: LD_INT 3
58692: PUSH
58693: LD_INT 5
58695: PUSH
58696: EMPTY
58697: LIST
58698: LIST
58699: PUSH
58700: LD_INT 0
58702: PUSH
58703: LD_INT 3
58705: PUSH
58706: EMPTY
58707: LIST
58708: LIST
58709: PUSH
58710: LD_INT 0
58712: PUSH
58713: LD_INT 2
58715: PUSH
58716: EMPTY
58717: LIST
58718: LIST
58719: PUSH
58720: LD_INT 1
58722: PUSH
58723: LD_INT 3
58725: PUSH
58726: EMPTY
58727: LIST
58728: LIST
58729: PUSH
58730: LD_INT 1
58732: PUSH
58733: LD_INT 4
58735: PUSH
58736: EMPTY
58737: LIST
58738: LIST
58739: PUSH
58740: LD_INT 0
58742: PUSH
58743: LD_INT 4
58745: PUSH
58746: EMPTY
58747: LIST
58748: LIST
58749: PUSH
58750: LD_INT 1
58752: NEG
58753: PUSH
58754: LD_INT 3
58756: PUSH
58757: EMPTY
58758: LIST
58759: LIST
58760: PUSH
58761: LD_INT 1
58763: NEG
58764: PUSH
58765: LD_INT 2
58767: PUSH
58768: EMPTY
58769: LIST
58770: LIST
58771: PUSH
58772: LD_INT 2
58774: PUSH
58775: LD_INT 4
58777: PUSH
58778: EMPTY
58779: LIST
58780: LIST
58781: PUSH
58782: LD_INT 2
58784: NEG
58785: PUSH
58786: LD_INT 2
58788: PUSH
58789: EMPTY
58790: LIST
58791: LIST
58792: PUSH
58793: LD_INT 4
58795: NEG
58796: PUSH
58797: LD_INT 0
58799: PUSH
58800: EMPTY
58801: LIST
58802: LIST
58803: PUSH
58804: LD_INT 4
58806: NEG
58807: PUSH
58808: LD_INT 1
58810: NEG
58811: PUSH
58812: EMPTY
58813: LIST
58814: LIST
58815: PUSH
58816: LD_INT 3
58818: NEG
58819: PUSH
58820: LD_INT 0
58822: PUSH
58823: EMPTY
58824: LIST
58825: LIST
58826: PUSH
58827: LD_INT 3
58829: NEG
58830: PUSH
58831: LD_INT 1
58833: PUSH
58834: EMPTY
58835: LIST
58836: LIST
58837: PUSH
58838: LD_INT 4
58840: NEG
58841: PUSH
58842: LD_INT 1
58844: PUSH
58845: EMPTY
58846: LIST
58847: LIST
58848: PUSH
58849: LD_INT 5
58851: NEG
58852: PUSH
58853: LD_INT 0
58855: PUSH
58856: EMPTY
58857: LIST
58858: LIST
58859: PUSH
58860: LD_INT 5
58862: NEG
58863: PUSH
58864: LD_INT 1
58866: NEG
58867: PUSH
58868: EMPTY
58869: LIST
58870: LIST
58871: PUSH
58872: LD_INT 5
58874: NEG
58875: PUSH
58876: LD_INT 2
58878: NEG
58879: PUSH
58880: EMPTY
58881: LIST
58882: LIST
58883: PUSH
58884: LD_INT 3
58886: NEG
58887: PUSH
58888: LD_INT 2
58890: PUSH
58891: EMPTY
58892: LIST
58893: LIST
58894: PUSH
58895: LD_INT 3
58897: NEG
58898: PUSH
58899: LD_INT 3
58901: NEG
58902: PUSH
58903: EMPTY
58904: LIST
58905: LIST
58906: PUSH
58907: LD_INT 3
58909: NEG
58910: PUSH
58911: LD_INT 4
58913: NEG
58914: PUSH
58915: EMPTY
58916: LIST
58917: LIST
58918: PUSH
58919: LD_INT 2
58921: NEG
58922: PUSH
58923: LD_INT 3
58925: NEG
58926: PUSH
58927: EMPTY
58928: LIST
58929: LIST
58930: PUSH
58931: LD_INT 2
58933: NEG
58934: PUSH
58935: LD_INT 2
58937: NEG
58938: PUSH
58939: EMPTY
58940: LIST
58941: LIST
58942: PUSH
58943: LD_INT 3
58945: NEG
58946: PUSH
58947: LD_INT 2
58949: NEG
58950: PUSH
58951: EMPTY
58952: LIST
58953: LIST
58954: PUSH
58955: LD_INT 4
58957: NEG
58958: PUSH
58959: LD_INT 3
58961: NEG
58962: PUSH
58963: EMPTY
58964: LIST
58965: LIST
58966: PUSH
58967: LD_INT 4
58969: NEG
58970: PUSH
58971: LD_INT 4
58973: NEG
58974: PUSH
58975: EMPTY
58976: LIST
58977: LIST
58978: PUSH
58979: LD_INT 2
58981: NEG
58982: PUSH
58983: LD_INT 4
58985: NEG
58986: PUSH
58987: EMPTY
58988: LIST
58989: LIST
58990: PUSH
58991: LD_INT 4
58993: NEG
58994: PUSH
58995: LD_INT 2
58997: NEG
58998: PUSH
58999: EMPTY
59000: LIST
59001: LIST
59002: PUSH
59003: LD_INT 0
59005: PUSH
59006: LD_INT 4
59008: NEG
59009: PUSH
59010: EMPTY
59011: LIST
59012: LIST
59013: PUSH
59014: LD_INT 0
59016: PUSH
59017: LD_INT 5
59019: NEG
59020: PUSH
59021: EMPTY
59022: LIST
59023: LIST
59024: PUSH
59025: LD_INT 1
59027: PUSH
59028: LD_INT 4
59030: NEG
59031: PUSH
59032: EMPTY
59033: LIST
59034: LIST
59035: PUSH
59036: LD_INT 1
59038: PUSH
59039: LD_INT 3
59041: NEG
59042: PUSH
59043: EMPTY
59044: LIST
59045: LIST
59046: PUSH
59047: LD_INT 0
59049: PUSH
59050: LD_INT 3
59052: NEG
59053: PUSH
59054: EMPTY
59055: LIST
59056: LIST
59057: PUSH
59058: LD_INT 1
59060: NEG
59061: PUSH
59062: LD_INT 4
59064: NEG
59065: PUSH
59066: EMPTY
59067: LIST
59068: LIST
59069: PUSH
59070: LD_INT 1
59072: NEG
59073: PUSH
59074: LD_INT 5
59076: NEG
59077: PUSH
59078: EMPTY
59079: LIST
59080: LIST
59081: PUSH
59082: LD_INT 2
59084: PUSH
59085: LD_INT 3
59087: NEG
59088: PUSH
59089: EMPTY
59090: LIST
59091: LIST
59092: PUSH
59093: LD_INT 2
59095: NEG
59096: PUSH
59097: LD_INT 5
59099: NEG
59100: PUSH
59101: EMPTY
59102: LIST
59103: LIST
59104: PUSH
59105: EMPTY
59106: LIST
59107: LIST
59108: LIST
59109: LIST
59110: LIST
59111: LIST
59112: LIST
59113: LIST
59114: LIST
59115: LIST
59116: LIST
59117: LIST
59118: LIST
59119: LIST
59120: LIST
59121: LIST
59122: LIST
59123: LIST
59124: LIST
59125: LIST
59126: LIST
59127: LIST
59128: LIST
59129: LIST
59130: LIST
59131: LIST
59132: LIST
59133: LIST
59134: LIST
59135: LIST
59136: LIST
59137: LIST
59138: LIST
59139: LIST
59140: LIST
59141: LIST
59142: LIST
59143: LIST
59144: LIST
59145: LIST
59146: LIST
59147: LIST
59148: LIST
59149: LIST
59150: LIST
59151: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
59152: LD_ADDR_VAR 0 31
59156: PUSH
59157: LD_INT 0
59159: PUSH
59160: LD_INT 4
59162: PUSH
59163: EMPTY
59164: LIST
59165: LIST
59166: PUSH
59167: LD_INT 0
59169: PUSH
59170: LD_INT 3
59172: PUSH
59173: EMPTY
59174: LIST
59175: LIST
59176: PUSH
59177: LD_INT 1
59179: PUSH
59180: LD_INT 4
59182: PUSH
59183: EMPTY
59184: LIST
59185: LIST
59186: PUSH
59187: LD_INT 1
59189: PUSH
59190: LD_INT 5
59192: PUSH
59193: EMPTY
59194: LIST
59195: LIST
59196: PUSH
59197: LD_INT 0
59199: PUSH
59200: LD_INT 5
59202: PUSH
59203: EMPTY
59204: LIST
59205: LIST
59206: PUSH
59207: LD_INT 1
59209: NEG
59210: PUSH
59211: LD_INT 4
59213: PUSH
59214: EMPTY
59215: LIST
59216: LIST
59217: PUSH
59218: LD_INT 1
59220: NEG
59221: PUSH
59222: LD_INT 3
59224: PUSH
59225: EMPTY
59226: LIST
59227: LIST
59228: PUSH
59229: LD_INT 2
59231: PUSH
59232: LD_INT 5
59234: PUSH
59235: EMPTY
59236: LIST
59237: LIST
59238: PUSH
59239: LD_INT 2
59241: NEG
59242: PUSH
59243: LD_INT 3
59245: PUSH
59246: EMPTY
59247: LIST
59248: LIST
59249: PUSH
59250: LD_INT 3
59252: NEG
59253: PUSH
59254: LD_INT 0
59256: PUSH
59257: EMPTY
59258: LIST
59259: LIST
59260: PUSH
59261: LD_INT 3
59263: NEG
59264: PUSH
59265: LD_INT 1
59267: NEG
59268: PUSH
59269: EMPTY
59270: LIST
59271: LIST
59272: PUSH
59273: LD_INT 2
59275: NEG
59276: PUSH
59277: LD_INT 0
59279: PUSH
59280: EMPTY
59281: LIST
59282: LIST
59283: PUSH
59284: LD_INT 2
59286: NEG
59287: PUSH
59288: LD_INT 1
59290: PUSH
59291: EMPTY
59292: LIST
59293: LIST
59294: PUSH
59295: LD_INT 3
59297: NEG
59298: PUSH
59299: LD_INT 1
59301: PUSH
59302: EMPTY
59303: LIST
59304: LIST
59305: PUSH
59306: LD_INT 4
59308: NEG
59309: PUSH
59310: LD_INT 0
59312: PUSH
59313: EMPTY
59314: LIST
59315: LIST
59316: PUSH
59317: LD_INT 4
59319: NEG
59320: PUSH
59321: LD_INT 1
59323: NEG
59324: PUSH
59325: EMPTY
59326: LIST
59327: LIST
59328: PUSH
59329: LD_INT 4
59331: NEG
59332: PUSH
59333: LD_INT 2
59335: NEG
59336: PUSH
59337: EMPTY
59338: LIST
59339: LIST
59340: PUSH
59341: LD_INT 2
59343: NEG
59344: PUSH
59345: LD_INT 2
59347: PUSH
59348: EMPTY
59349: LIST
59350: LIST
59351: PUSH
59352: LD_INT 4
59354: NEG
59355: PUSH
59356: LD_INT 4
59358: NEG
59359: PUSH
59360: EMPTY
59361: LIST
59362: LIST
59363: PUSH
59364: LD_INT 4
59366: NEG
59367: PUSH
59368: LD_INT 5
59370: NEG
59371: PUSH
59372: EMPTY
59373: LIST
59374: LIST
59375: PUSH
59376: LD_INT 3
59378: NEG
59379: PUSH
59380: LD_INT 4
59382: NEG
59383: PUSH
59384: EMPTY
59385: LIST
59386: LIST
59387: PUSH
59388: LD_INT 3
59390: NEG
59391: PUSH
59392: LD_INT 3
59394: NEG
59395: PUSH
59396: EMPTY
59397: LIST
59398: LIST
59399: PUSH
59400: LD_INT 4
59402: NEG
59403: PUSH
59404: LD_INT 3
59406: NEG
59407: PUSH
59408: EMPTY
59409: LIST
59410: LIST
59411: PUSH
59412: LD_INT 5
59414: NEG
59415: PUSH
59416: LD_INT 4
59418: NEG
59419: PUSH
59420: EMPTY
59421: LIST
59422: LIST
59423: PUSH
59424: LD_INT 5
59426: NEG
59427: PUSH
59428: LD_INT 5
59430: NEG
59431: PUSH
59432: EMPTY
59433: LIST
59434: LIST
59435: PUSH
59436: LD_INT 3
59438: NEG
59439: PUSH
59440: LD_INT 5
59442: NEG
59443: PUSH
59444: EMPTY
59445: LIST
59446: LIST
59447: PUSH
59448: LD_INT 5
59450: NEG
59451: PUSH
59452: LD_INT 3
59454: NEG
59455: PUSH
59456: EMPTY
59457: LIST
59458: LIST
59459: PUSH
59460: LD_INT 0
59462: PUSH
59463: LD_INT 3
59465: NEG
59466: PUSH
59467: EMPTY
59468: LIST
59469: LIST
59470: PUSH
59471: LD_INT 0
59473: PUSH
59474: LD_INT 4
59476: NEG
59477: PUSH
59478: EMPTY
59479: LIST
59480: LIST
59481: PUSH
59482: LD_INT 1
59484: PUSH
59485: LD_INT 3
59487: NEG
59488: PUSH
59489: EMPTY
59490: LIST
59491: LIST
59492: PUSH
59493: LD_INT 1
59495: PUSH
59496: LD_INT 2
59498: NEG
59499: PUSH
59500: EMPTY
59501: LIST
59502: LIST
59503: PUSH
59504: LD_INT 0
59506: PUSH
59507: LD_INT 2
59509: NEG
59510: PUSH
59511: EMPTY
59512: LIST
59513: LIST
59514: PUSH
59515: LD_INT 1
59517: NEG
59518: PUSH
59519: LD_INT 3
59521: NEG
59522: PUSH
59523: EMPTY
59524: LIST
59525: LIST
59526: PUSH
59527: LD_INT 1
59529: NEG
59530: PUSH
59531: LD_INT 4
59533: NEG
59534: PUSH
59535: EMPTY
59536: LIST
59537: LIST
59538: PUSH
59539: LD_INT 2
59541: PUSH
59542: LD_INT 2
59544: NEG
59545: PUSH
59546: EMPTY
59547: LIST
59548: LIST
59549: PUSH
59550: LD_INT 2
59552: NEG
59553: PUSH
59554: LD_INT 4
59556: NEG
59557: PUSH
59558: EMPTY
59559: LIST
59560: LIST
59561: PUSH
59562: LD_INT 4
59564: PUSH
59565: LD_INT 0
59567: PUSH
59568: EMPTY
59569: LIST
59570: LIST
59571: PUSH
59572: LD_INT 4
59574: PUSH
59575: LD_INT 1
59577: NEG
59578: PUSH
59579: EMPTY
59580: LIST
59581: LIST
59582: PUSH
59583: LD_INT 5
59585: PUSH
59586: LD_INT 0
59588: PUSH
59589: EMPTY
59590: LIST
59591: LIST
59592: PUSH
59593: LD_INT 5
59595: PUSH
59596: LD_INT 1
59598: PUSH
59599: EMPTY
59600: LIST
59601: LIST
59602: PUSH
59603: LD_INT 4
59605: PUSH
59606: LD_INT 1
59608: PUSH
59609: EMPTY
59610: LIST
59611: LIST
59612: PUSH
59613: LD_INT 3
59615: PUSH
59616: LD_INT 0
59618: PUSH
59619: EMPTY
59620: LIST
59621: LIST
59622: PUSH
59623: LD_INT 3
59625: PUSH
59626: LD_INT 1
59628: NEG
59629: PUSH
59630: EMPTY
59631: LIST
59632: LIST
59633: PUSH
59634: LD_INT 3
59636: PUSH
59637: LD_INT 2
59639: NEG
59640: PUSH
59641: EMPTY
59642: LIST
59643: LIST
59644: PUSH
59645: LD_INT 5
59647: PUSH
59648: LD_INT 2
59650: PUSH
59651: EMPTY
59652: LIST
59653: LIST
59654: PUSH
59655: EMPTY
59656: LIST
59657: LIST
59658: LIST
59659: LIST
59660: LIST
59661: LIST
59662: LIST
59663: LIST
59664: LIST
59665: LIST
59666: LIST
59667: LIST
59668: LIST
59669: LIST
59670: LIST
59671: LIST
59672: LIST
59673: LIST
59674: LIST
59675: LIST
59676: LIST
59677: LIST
59678: LIST
59679: LIST
59680: LIST
59681: LIST
59682: LIST
59683: LIST
59684: LIST
59685: LIST
59686: LIST
59687: LIST
59688: LIST
59689: LIST
59690: LIST
59691: LIST
59692: LIST
59693: LIST
59694: LIST
59695: LIST
59696: LIST
59697: LIST
59698: LIST
59699: LIST
59700: LIST
59701: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
59702: LD_ADDR_VAR 0 32
59706: PUSH
59707: LD_INT 4
59709: NEG
59710: PUSH
59711: LD_INT 0
59713: PUSH
59714: EMPTY
59715: LIST
59716: LIST
59717: PUSH
59718: LD_INT 4
59720: NEG
59721: PUSH
59722: LD_INT 1
59724: NEG
59725: PUSH
59726: EMPTY
59727: LIST
59728: LIST
59729: PUSH
59730: LD_INT 3
59732: NEG
59733: PUSH
59734: LD_INT 0
59736: PUSH
59737: EMPTY
59738: LIST
59739: LIST
59740: PUSH
59741: LD_INT 3
59743: NEG
59744: PUSH
59745: LD_INT 1
59747: PUSH
59748: EMPTY
59749: LIST
59750: LIST
59751: PUSH
59752: LD_INT 4
59754: NEG
59755: PUSH
59756: LD_INT 1
59758: PUSH
59759: EMPTY
59760: LIST
59761: LIST
59762: PUSH
59763: LD_INT 5
59765: NEG
59766: PUSH
59767: LD_INT 0
59769: PUSH
59770: EMPTY
59771: LIST
59772: LIST
59773: PUSH
59774: LD_INT 5
59776: NEG
59777: PUSH
59778: LD_INT 1
59780: NEG
59781: PUSH
59782: EMPTY
59783: LIST
59784: LIST
59785: PUSH
59786: LD_INT 5
59788: NEG
59789: PUSH
59790: LD_INT 2
59792: NEG
59793: PUSH
59794: EMPTY
59795: LIST
59796: LIST
59797: PUSH
59798: LD_INT 3
59800: NEG
59801: PUSH
59802: LD_INT 2
59804: PUSH
59805: EMPTY
59806: LIST
59807: LIST
59808: PUSH
59809: LD_INT 3
59811: NEG
59812: PUSH
59813: LD_INT 3
59815: NEG
59816: PUSH
59817: EMPTY
59818: LIST
59819: LIST
59820: PUSH
59821: LD_INT 3
59823: NEG
59824: PUSH
59825: LD_INT 4
59827: NEG
59828: PUSH
59829: EMPTY
59830: LIST
59831: LIST
59832: PUSH
59833: LD_INT 2
59835: NEG
59836: PUSH
59837: LD_INT 3
59839: NEG
59840: PUSH
59841: EMPTY
59842: LIST
59843: LIST
59844: PUSH
59845: LD_INT 2
59847: NEG
59848: PUSH
59849: LD_INT 2
59851: NEG
59852: PUSH
59853: EMPTY
59854: LIST
59855: LIST
59856: PUSH
59857: LD_INT 3
59859: NEG
59860: PUSH
59861: LD_INT 2
59863: NEG
59864: PUSH
59865: EMPTY
59866: LIST
59867: LIST
59868: PUSH
59869: LD_INT 4
59871: NEG
59872: PUSH
59873: LD_INT 3
59875: NEG
59876: PUSH
59877: EMPTY
59878: LIST
59879: LIST
59880: PUSH
59881: LD_INT 4
59883: NEG
59884: PUSH
59885: LD_INT 4
59887: NEG
59888: PUSH
59889: EMPTY
59890: LIST
59891: LIST
59892: PUSH
59893: LD_INT 2
59895: NEG
59896: PUSH
59897: LD_INT 4
59899: NEG
59900: PUSH
59901: EMPTY
59902: LIST
59903: LIST
59904: PUSH
59905: LD_INT 4
59907: NEG
59908: PUSH
59909: LD_INT 2
59911: NEG
59912: PUSH
59913: EMPTY
59914: LIST
59915: LIST
59916: PUSH
59917: LD_INT 0
59919: PUSH
59920: LD_INT 4
59922: NEG
59923: PUSH
59924: EMPTY
59925: LIST
59926: LIST
59927: PUSH
59928: LD_INT 0
59930: PUSH
59931: LD_INT 5
59933: NEG
59934: PUSH
59935: EMPTY
59936: LIST
59937: LIST
59938: PUSH
59939: LD_INT 1
59941: PUSH
59942: LD_INT 4
59944: NEG
59945: PUSH
59946: EMPTY
59947: LIST
59948: LIST
59949: PUSH
59950: LD_INT 1
59952: PUSH
59953: LD_INT 3
59955: NEG
59956: PUSH
59957: EMPTY
59958: LIST
59959: LIST
59960: PUSH
59961: LD_INT 0
59963: PUSH
59964: LD_INT 3
59966: NEG
59967: PUSH
59968: EMPTY
59969: LIST
59970: LIST
59971: PUSH
59972: LD_INT 1
59974: NEG
59975: PUSH
59976: LD_INT 4
59978: NEG
59979: PUSH
59980: EMPTY
59981: LIST
59982: LIST
59983: PUSH
59984: LD_INT 1
59986: NEG
59987: PUSH
59988: LD_INT 5
59990: NEG
59991: PUSH
59992: EMPTY
59993: LIST
59994: LIST
59995: PUSH
59996: LD_INT 2
59998: PUSH
59999: LD_INT 3
60001: NEG
60002: PUSH
60003: EMPTY
60004: LIST
60005: LIST
60006: PUSH
60007: LD_INT 2
60009: NEG
60010: PUSH
60011: LD_INT 5
60013: NEG
60014: PUSH
60015: EMPTY
60016: LIST
60017: LIST
60018: PUSH
60019: LD_INT 3
60021: PUSH
60022: LD_INT 0
60024: PUSH
60025: EMPTY
60026: LIST
60027: LIST
60028: PUSH
60029: LD_INT 3
60031: PUSH
60032: LD_INT 1
60034: NEG
60035: PUSH
60036: EMPTY
60037: LIST
60038: LIST
60039: PUSH
60040: LD_INT 4
60042: PUSH
60043: LD_INT 0
60045: PUSH
60046: EMPTY
60047: LIST
60048: LIST
60049: PUSH
60050: LD_INT 4
60052: PUSH
60053: LD_INT 1
60055: PUSH
60056: EMPTY
60057: LIST
60058: LIST
60059: PUSH
60060: LD_INT 3
60062: PUSH
60063: LD_INT 1
60065: PUSH
60066: EMPTY
60067: LIST
60068: LIST
60069: PUSH
60070: LD_INT 2
60072: PUSH
60073: LD_INT 0
60075: PUSH
60076: EMPTY
60077: LIST
60078: LIST
60079: PUSH
60080: LD_INT 2
60082: PUSH
60083: LD_INT 1
60085: NEG
60086: PUSH
60087: EMPTY
60088: LIST
60089: LIST
60090: PUSH
60091: LD_INT 2
60093: PUSH
60094: LD_INT 2
60096: NEG
60097: PUSH
60098: EMPTY
60099: LIST
60100: LIST
60101: PUSH
60102: LD_INT 4
60104: PUSH
60105: LD_INT 2
60107: PUSH
60108: EMPTY
60109: LIST
60110: LIST
60111: PUSH
60112: LD_INT 4
60114: PUSH
60115: LD_INT 4
60117: PUSH
60118: EMPTY
60119: LIST
60120: LIST
60121: PUSH
60122: LD_INT 4
60124: PUSH
60125: LD_INT 3
60127: PUSH
60128: EMPTY
60129: LIST
60130: LIST
60131: PUSH
60132: LD_INT 5
60134: PUSH
60135: LD_INT 4
60137: PUSH
60138: EMPTY
60139: LIST
60140: LIST
60141: PUSH
60142: LD_INT 5
60144: PUSH
60145: LD_INT 5
60147: PUSH
60148: EMPTY
60149: LIST
60150: LIST
60151: PUSH
60152: LD_INT 4
60154: PUSH
60155: LD_INT 5
60157: PUSH
60158: EMPTY
60159: LIST
60160: LIST
60161: PUSH
60162: LD_INT 3
60164: PUSH
60165: LD_INT 4
60167: PUSH
60168: EMPTY
60169: LIST
60170: LIST
60171: PUSH
60172: LD_INT 3
60174: PUSH
60175: LD_INT 3
60177: PUSH
60178: EMPTY
60179: LIST
60180: LIST
60181: PUSH
60182: LD_INT 5
60184: PUSH
60185: LD_INT 3
60187: PUSH
60188: EMPTY
60189: LIST
60190: LIST
60191: PUSH
60192: LD_INT 3
60194: PUSH
60195: LD_INT 5
60197: PUSH
60198: EMPTY
60199: LIST
60200: LIST
60201: PUSH
60202: EMPTY
60203: LIST
60204: LIST
60205: LIST
60206: LIST
60207: LIST
60208: LIST
60209: LIST
60210: LIST
60211: LIST
60212: LIST
60213: LIST
60214: LIST
60215: LIST
60216: LIST
60217: LIST
60218: LIST
60219: LIST
60220: LIST
60221: LIST
60222: LIST
60223: LIST
60224: LIST
60225: LIST
60226: LIST
60227: LIST
60228: LIST
60229: LIST
60230: LIST
60231: LIST
60232: LIST
60233: LIST
60234: LIST
60235: LIST
60236: LIST
60237: LIST
60238: LIST
60239: LIST
60240: LIST
60241: LIST
60242: LIST
60243: LIST
60244: LIST
60245: LIST
60246: LIST
60247: LIST
60248: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
60249: LD_ADDR_VAR 0 33
60253: PUSH
60254: LD_INT 4
60256: NEG
60257: PUSH
60258: LD_INT 4
60260: NEG
60261: PUSH
60262: EMPTY
60263: LIST
60264: LIST
60265: PUSH
60266: LD_INT 4
60268: NEG
60269: PUSH
60270: LD_INT 5
60272: NEG
60273: PUSH
60274: EMPTY
60275: LIST
60276: LIST
60277: PUSH
60278: LD_INT 3
60280: NEG
60281: PUSH
60282: LD_INT 4
60284: NEG
60285: PUSH
60286: EMPTY
60287: LIST
60288: LIST
60289: PUSH
60290: LD_INT 3
60292: NEG
60293: PUSH
60294: LD_INT 3
60296: NEG
60297: PUSH
60298: EMPTY
60299: LIST
60300: LIST
60301: PUSH
60302: LD_INT 4
60304: NEG
60305: PUSH
60306: LD_INT 3
60308: NEG
60309: PUSH
60310: EMPTY
60311: LIST
60312: LIST
60313: PUSH
60314: LD_INT 5
60316: NEG
60317: PUSH
60318: LD_INT 4
60320: NEG
60321: PUSH
60322: EMPTY
60323: LIST
60324: LIST
60325: PUSH
60326: LD_INT 5
60328: NEG
60329: PUSH
60330: LD_INT 5
60332: NEG
60333: PUSH
60334: EMPTY
60335: LIST
60336: LIST
60337: PUSH
60338: LD_INT 3
60340: NEG
60341: PUSH
60342: LD_INT 5
60344: NEG
60345: PUSH
60346: EMPTY
60347: LIST
60348: LIST
60349: PUSH
60350: LD_INT 5
60352: NEG
60353: PUSH
60354: LD_INT 3
60356: NEG
60357: PUSH
60358: EMPTY
60359: LIST
60360: LIST
60361: PUSH
60362: LD_INT 0
60364: PUSH
60365: LD_INT 3
60367: NEG
60368: PUSH
60369: EMPTY
60370: LIST
60371: LIST
60372: PUSH
60373: LD_INT 0
60375: PUSH
60376: LD_INT 4
60378: NEG
60379: PUSH
60380: EMPTY
60381: LIST
60382: LIST
60383: PUSH
60384: LD_INT 1
60386: PUSH
60387: LD_INT 3
60389: NEG
60390: PUSH
60391: EMPTY
60392: LIST
60393: LIST
60394: PUSH
60395: LD_INT 1
60397: PUSH
60398: LD_INT 2
60400: NEG
60401: PUSH
60402: EMPTY
60403: LIST
60404: LIST
60405: PUSH
60406: LD_INT 0
60408: PUSH
60409: LD_INT 2
60411: NEG
60412: PUSH
60413: EMPTY
60414: LIST
60415: LIST
60416: PUSH
60417: LD_INT 1
60419: NEG
60420: PUSH
60421: LD_INT 3
60423: NEG
60424: PUSH
60425: EMPTY
60426: LIST
60427: LIST
60428: PUSH
60429: LD_INT 1
60431: NEG
60432: PUSH
60433: LD_INT 4
60435: NEG
60436: PUSH
60437: EMPTY
60438: LIST
60439: LIST
60440: PUSH
60441: LD_INT 2
60443: PUSH
60444: LD_INT 2
60446: NEG
60447: PUSH
60448: EMPTY
60449: LIST
60450: LIST
60451: PUSH
60452: LD_INT 2
60454: NEG
60455: PUSH
60456: LD_INT 4
60458: NEG
60459: PUSH
60460: EMPTY
60461: LIST
60462: LIST
60463: PUSH
60464: LD_INT 4
60466: PUSH
60467: LD_INT 0
60469: PUSH
60470: EMPTY
60471: LIST
60472: LIST
60473: PUSH
60474: LD_INT 4
60476: PUSH
60477: LD_INT 1
60479: NEG
60480: PUSH
60481: EMPTY
60482: LIST
60483: LIST
60484: PUSH
60485: LD_INT 5
60487: PUSH
60488: LD_INT 0
60490: PUSH
60491: EMPTY
60492: LIST
60493: LIST
60494: PUSH
60495: LD_INT 5
60497: PUSH
60498: LD_INT 1
60500: PUSH
60501: EMPTY
60502: LIST
60503: LIST
60504: PUSH
60505: LD_INT 4
60507: PUSH
60508: LD_INT 1
60510: PUSH
60511: EMPTY
60512: LIST
60513: LIST
60514: PUSH
60515: LD_INT 3
60517: PUSH
60518: LD_INT 0
60520: PUSH
60521: EMPTY
60522: LIST
60523: LIST
60524: PUSH
60525: LD_INT 3
60527: PUSH
60528: LD_INT 1
60530: NEG
60531: PUSH
60532: EMPTY
60533: LIST
60534: LIST
60535: PUSH
60536: LD_INT 3
60538: PUSH
60539: LD_INT 2
60541: NEG
60542: PUSH
60543: EMPTY
60544: LIST
60545: LIST
60546: PUSH
60547: LD_INT 5
60549: PUSH
60550: LD_INT 2
60552: PUSH
60553: EMPTY
60554: LIST
60555: LIST
60556: PUSH
60557: LD_INT 3
60559: PUSH
60560: LD_INT 3
60562: PUSH
60563: EMPTY
60564: LIST
60565: LIST
60566: PUSH
60567: LD_INT 3
60569: PUSH
60570: LD_INT 2
60572: PUSH
60573: EMPTY
60574: LIST
60575: LIST
60576: PUSH
60577: LD_INT 4
60579: PUSH
60580: LD_INT 3
60582: PUSH
60583: EMPTY
60584: LIST
60585: LIST
60586: PUSH
60587: LD_INT 4
60589: PUSH
60590: LD_INT 4
60592: PUSH
60593: EMPTY
60594: LIST
60595: LIST
60596: PUSH
60597: LD_INT 3
60599: PUSH
60600: LD_INT 4
60602: PUSH
60603: EMPTY
60604: LIST
60605: LIST
60606: PUSH
60607: LD_INT 2
60609: PUSH
60610: LD_INT 3
60612: PUSH
60613: EMPTY
60614: LIST
60615: LIST
60616: PUSH
60617: LD_INT 2
60619: PUSH
60620: LD_INT 2
60622: PUSH
60623: EMPTY
60624: LIST
60625: LIST
60626: PUSH
60627: LD_INT 4
60629: PUSH
60630: LD_INT 2
60632: PUSH
60633: EMPTY
60634: LIST
60635: LIST
60636: PUSH
60637: LD_INT 2
60639: PUSH
60640: LD_INT 4
60642: PUSH
60643: EMPTY
60644: LIST
60645: LIST
60646: PUSH
60647: LD_INT 0
60649: PUSH
60650: LD_INT 4
60652: PUSH
60653: EMPTY
60654: LIST
60655: LIST
60656: PUSH
60657: LD_INT 0
60659: PUSH
60660: LD_INT 3
60662: PUSH
60663: EMPTY
60664: LIST
60665: LIST
60666: PUSH
60667: LD_INT 1
60669: PUSH
60670: LD_INT 4
60672: PUSH
60673: EMPTY
60674: LIST
60675: LIST
60676: PUSH
60677: LD_INT 1
60679: PUSH
60680: LD_INT 5
60682: PUSH
60683: EMPTY
60684: LIST
60685: LIST
60686: PUSH
60687: LD_INT 0
60689: PUSH
60690: LD_INT 5
60692: PUSH
60693: EMPTY
60694: LIST
60695: LIST
60696: PUSH
60697: LD_INT 1
60699: NEG
60700: PUSH
60701: LD_INT 4
60703: PUSH
60704: EMPTY
60705: LIST
60706: LIST
60707: PUSH
60708: LD_INT 1
60710: NEG
60711: PUSH
60712: LD_INT 3
60714: PUSH
60715: EMPTY
60716: LIST
60717: LIST
60718: PUSH
60719: LD_INT 2
60721: PUSH
60722: LD_INT 5
60724: PUSH
60725: EMPTY
60726: LIST
60727: LIST
60728: PUSH
60729: LD_INT 2
60731: NEG
60732: PUSH
60733: LD_INT 3
60735: PUSH
60736: EMPTY
60737: LIST
60738: LIST
60739: PUSH
60740: EMPTY
60741: LIST
60742: LIST
60743: LIST
60744: LIST
60745: LIST
60746: LIST
60747: LIST
60748: LIST
60749: LIST
60750: LIST
60751: LIST
60752: LIST
60753: LIST
60754: LIST
60755: LIST
60756: LIST
60757: LIST
60758: LIST
60759: LIST
60760: LIST
60761: LIST
60762: LIST
60763: LIST
60764: LIST
60765: LIST
60766: LIST
60767: LIST
60768: LIST
60769: LIST
60770: LIST
60771: LIST
60772: LIST
60773: LIST
60774: LIST
60775: LIST
60776: LIST
60777: LIST
60778: LIST
60779: LIST
60780: LIST
60781: LIST
60782: LIST
60783: LIST
60784: LIST
60785: LIST
60786: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
60787: LD_ADDR_VAR 0 34
60791: PUSH
60792: LD_INT 0
60794: PUSH
60795: LD_INT 4
60797: NEG
60798: PUSH
60799: EMPTY
60800: LIST
60801: LIST
60802: PUSH
60803: LD_INT 0
60805: PUSH
60806: LD_INT 5
60808: NEG
60809: PUSH
60810: EMPTY
60811: LIST
60812: LIST
60813: PUSH
60814: LD_INT 1
60816: PUSH
60817: LD_INT 4
60819: NEG
60820: PUSH
60821: EMPTY
60822: LIST
60823: LIST
60824: PUSH
60825: LD_INT 1
60827: PUSH
60828: LD_INT 3
60830: NEG
60831: PUSH
60832: EMPTY
60833: LIST
60834: LIST
60835: PUSH
60836: LD_INT 0
60838: PUSH
60839: LD_INT 3
60841: NEG
60842: PUSH
60843: EMPTY
60844: LIST
60845: LIST
60846: PUSH
60847: LD_INT 1
60849: NEG
60850: PUSH
60851: LD_INT 4
60853: NEG
60854: PUSH
60855: EMPTY
60856: LIST
60857: LIST
60858: PUSH
60859: LD_INT 1
60861: NEG
60862: PUSH
60863: LD_INT 5
60865: NEG
60866: PUSH
60867: EMPTY
60868: LIST
60869: LIST
60870: PUSH
60871: LD_INT 2
60873: PUSH
60874: LD_INT 3
60876: NEG
60877: PUSH
60878: EMPTY
60879: LIST
60880: LIST
60881: PUSH
60882: LD_INT 2
60884: NEG
60885: PUSH
60886: LD_INT 5
60888: NEG
60889: PUSH
60890: EMPTY
60891: LIST
60892: LIST
60893: PUSH
60894: LD_INT 3
60896: PUSH
60897: LD_INT 0
60899: PUSH
60900: EMPTY
60901: LIST
60902: LIST
60903: PUSH
60904: LD_INT 3
60906: PUSH
60907: LD_INT 1
60909: NEG
60910: PUSH
60911: EMPTY
60912: LIST
60913: LIST
60914: PUSH
60915: LD_INT 4
60917: PUSH
60918: LD_INT 0
60920: PUSH
60921: EMPTY
60922: LIST
60923: LIST
60924: PUSH
60925: LD_INT 4
60927: PUSH
60928: LD_INT 1
60930: PUSH
60931: EMPTY
60932: LIST
60933: LIST
60934: PUSH
60935: LD_INT 3
60937: PUSH
60938: LD_INT 1
60940: PUSH
60941: EMPTY
60942: LIST
60943: LIST
60944: PUSH
60945: LD_INT 2
60947: PUSH
60948: LD_INT 0
60950: PUSH
60951: EMPTY
60952: LIST
60953: LIST
60954: PUSH
60955: LD_INT 2
60957: PUSH
60958: LD_INT 1
60960: NEG
60961: PUSH
60962: EMPTY
60963: LIST
60964: LIST
60965: PUSH
60966: LD_INT 2
60968: PUSH
60969: LD_INT 2
60971: NEG
60972: PUSH
60973: EMPTY
60974: LIST
60975: LIST
60976: PUSH
60977: LD_INT 4
60979: PUSH
60980: LD_INT 2
60982: PUSH
60983: EMPTY
60984: LIST
60985: LIST
60986: PUSH
60987: LD_INT 4
60989: PUSH
60990: LD_INT 4
60992: PUSH
60993: EMPTY
60994: LIST
60995: LIST
60996: PUSH
60997: LD_INT 4
60999: PUSH
61000: LD_INT 3
61002: PUSH
61003: EMPTY
61004: LIST
61005: LIST
61006: PUSH
61007: LD_INT 5
61009: PUSH
61010: LD_INT 4
61012: PUSH
61013: EMPTY
61014: LIST
61015: LIST
61016: PUSH
61017: LD_INT 5
61019: PUSH
61020: LD_INT 5
61022: PUSH
61023: EMPTY
61024: LIST
61025: LIST
61026: PUSH
61027: LD_INT 4
61029: PUSH
61030: LD_INT 5
61032: PUSH
61033: EMPTY
61034: LIST
61035: LIST
61036: PUSH
61037: LD_INT 3
61039: PUSH
61040: LD_INT 4
61042: PUSH
61043: EMPTY
61044: LIST
61045: LIST
61046: PUSH
61047: LD_INT 3
61049: PUSH
61050: LD_INT 3
61052: PUSH
61053: EMPTY
61054: LIST
61055: LIST
61056: PUSH
61057: LD_INT 5
61059: PUSH
61060: LD_INT 3
61062: PUSH
61063: EMPTY
61064: LIST
61065: LIST
61066: PUSH
61067: LD_INT 3
61069: PUSH
61070: LD_INT 5
61072: PUSH
61073: EMPTY
61074: LIST
61075: LIST
61076: PUSH
61077: LD_INT 0
61079: PUSH
61080: LD_INT 3
61082: PUSH
61083: EMPTY
61084: LIST
61085: LIST
61086: PUSH
61087: LD_INT 0
61089: PUSH
61090: LD_INT 2
61092: PUSH
61093: EMPTY
61094: LIST
61095: LIST
61096: PUSH
61097: LD_INT 1
61099: PUSH
61100: LD_INT 3
61102: PUSH
61103: EMPTY
61104: LIST
61105: LIST
61106: PUSH
61107: LD_INT 1
61109: PUSH
61110: LD_INT 4
61112: PUSH
61113: EMPTY
61114: LIST
61115: LIST
61116: PUSH
61117: LD_INT 0
61119: PUSH
61120: LD_INT 4
61122: PUSH
61123: EMPTY
61124: LIST
61125: LIST
61126: PUSH
61127: LD_INT 1
61129: NEG
61130: PUSH
61131: LD_INT 3
61133: PUSH
61134: EMPTY
61135: LIST
61136: LIST
61137: PUSH
61138: LD_INT 1
61140: NEG
61141: PUSH
61142: LD_INT 2
61144: PUSH
61145: EMPTY
61146: LIST
61147: LIST
61148: PUSH
61149: LD_INT 2
61151: PUSH
61152: LD_INT 4
61154: PUSH
61155: EMPTY
61156: LIST
61157: LIST
61158: PUSH
61159: LD_INT 2
61161: NEG
61162: PUSH
61163: LD_INT 2
61165: PUSH
61166: EMPTY
61167: LIST
61168: LIST
61169: PUSH
61170: LD_INT 4
61172: NEG
61173: PUSH
61174: LD_INT 0
61176: PUSH
61177: EMPTY
61178: LIST
61179: LIST
61180: PUSH
61181: LD_INT 4
61183: NEG
61184: PUSH
61185: LD_INT 1
61187: NEG
61188: PUSH
61189: EMPTY
61190: LIST
61191: LIST
61192: PUSH
61193: LD_INT 3
61195: NEG
61196: PUSH
61197: LD_INT 0
61199: PUSH
61200: EMPTY
61201: LIST
61202: LIST
61203: PUSH
61204: LD_INT 3
61206: NEG
61207: PUSH
61208: LD_INT 1
61210: PUSH
61211: EMPTY
61212: LIST
61213: LIST
61214: PUSH
61215: LD_INT 4
61217: NEG
61218: PUSH
61219: LD_INT 1
61221: PUSH
61222: EMPTY
61223: LIST
61224: LIST
61225: PUSH
61226: LD_INT 5
61228: NEG
61229: PUSH
61230: LD_INT 0
61232: PUSH
61233: EMPTY
61234: LIST
61235: LIST
61236: PUSH
61237: LD_INT 5
61239: NEG
61240: PUSH
61241: LD_INT 1
61243: NEG
61244: PUSH
61245: EMPTY
61246: LIST
61247: LIST
61248: PUSH
61249: LD_INT 5
61251: NEG
61252: PUSH
61253: LD_INT 2
61255: NEG
61256: PUSH
61257: EMPTY
61258: LIST
61259: LIST
61260: PUSH
61261: LD_INT 3
61263: NEG
61264: PUSH
61265: LD_INT 2
61267: PUSH
61268: EMPTY
61269: LIST
61270: LIST
61271: PUSH
61272: EMPTY
61273: LIST
61274: LIST
61275: LIST
61276: LIST
61277: LIST
61278: LIST
61279: LIST
61280: LIST
61281: LIST
61282: LIST
61283: LIST
61284: LIST
61285: LIST
61286: LIST
61287: LIST
61288: LIST
61289: LIST
61290: LIST
61291: LIST
61292: LIST
61293: LIST
61294: LIST
61295: LIST
61296: LIST
61297: LIST
61298: LIST
61299: LIST
61300: LIST
61301: LIST
61302: LIST
61303: LIST
61304: LIST
61305: LIST
61306: LIST
61307: LIST
61308: LIST
61309: LIST
61310: LIST
61311: LIST
61312: LIST
61313: LIST
61314: LIST
61315: LIST
61316: LIST
61317: LIST
61318: ST_TO_ADDR
// end ; end ;
61319: GO 61322
61321: POP
// case btype of b_depot , b_warehouse :
61322: LD_VAR 0 1
61326: PUSH
61327: LD_INT 0
61329: DOUBLE
61330: EQUAL
61331: IFTRUE 61341
61333: LD_INT 1
61335: DOUBLE
61336: EQUAL
61337: IFTRUE 61341
61339: GO 61542
61341: POP
// case nation of nation_american :
61342: LD_VAR 0 5
61346: PUSH
61347: LD_INT 1
61349: DOUBLE
61350: EQUAL
61351: IFTRUE 61355
61353: GO 61411
61355: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
61356: LD_ADDR_VAR 0 9
61360: PUSH
61361: LD_VAR 0 11
61365: PUSH
61366: LD_VAR 0 12
61370: PUSH
61371: LD_VAR 0 13
61375: PUSH
61376: LD_VAR 0 14
61380: PUSH
61381: LD_VAR 0 15
61385: PUSH
61386: LD_VAR 0 16
61390: PUSH
61391: EMPTY
61392: LIST
61393: LIST
61394: LIST
61395: LIST
61396: LIST
61397: LIST
61398: PUSH
61399: LD_VAR 0 4
61403: PUSH
61404: LD_INT 1
61406: PLUS
61407: ARRAY
61408: ST_TO_ADDR
61409: GO 61540
61411: LD_INT 2
61413: DOUBLE
61414: EQUAL
61415: IFTRUE 61419
61417: GO 61475
61419: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
61420: LD_ADDR_VAR 0 9
61424: PUSH
61425: LD_VAR 0 17
61429: PUSH
61430: LD_VAR 0 18
61434: PUSH
61435: LD_VAR 0 19
61439: PUSH
61440: LD_VAR 0 20
61444: PUSH
61445: LD_VAR 0 21
61449: PUSH
61450: LD_VAR 0 22
61454: PUSH
61455: EMPTY
61456: LIST
61457: LIST
61458: LIST
61459: LIST
61460: LIST
61461: LIST
61462: PUSH
61463: LD_VAR 0 4
61467: PUSH
61468: LD_INT 1
61470: PLUS
61471: ARRAY
61472: ST_TO_ADDR
61473: GO 61540
61475: LD_INT 3
61477: DOUBLE
61478: EQUAL
61479: IFTRUE 61483
61481: GO 61539
61483: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
61484: LD_ADDR_VAR 0 9
61488: PUSH
61489: LD_VAR 0 23
61493: PUSH
61494: LD_VAR 0 24
61498: PUSH
61499: LD_VAR 0 25
61503: PUSH
61504: LD_VAR 0 26
61508: PUSH
61509: LD_VAR 0 27
61513: PUSH
61514: LD_VAR 0 28
61518: PUSH
61519: EMPTY
61520: LIST
61521: LIST
61522: LIST
61523: LIST
61524: LIST
61525: LIST
61526: PUSH
61527: LD_VAR 0 4
61531: PUSH
61532: LD_INT 1
61534: PLUS
61535: ARRAY
61536: ST_TO_ADDR
61537: GO 61540
61539: POP
61540: GO 62095
61542: LD_INT 2
61544: DOUBLE
61545: EQUAL
61546: IFTRUE 61556
61548: LD_INT 3
61550: DOUBLE
61551: EQUAL
61552: IFTRUE 61556
61554: GO 61612
61556: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
61557: LD_ADDR_VAR 0 9
61561: PUSH
61562: LD_VAR 0 29
61566: PUSH
61567: LD_VAR 0 30
61571: PUSH
61572: LD_VAR 0 31
61576: PUSH
61577: LD_VAR 0 32
61581: PUSH
61582: LD_VAR 0 33
61586: PUSH
61587: LD_VAR 0 34
61591: PUSH
61592: EMPTY
61593: LIST
61594: LIST
61595: LIST
61596: LIST
61597: LIST
61598: LIST
61599: PUSH
61600: LD_VAR 0 4
61604: PUSH
61605: LD_INT 1
61607: PLUS
61608: ARRAY
61609: ST_TO_ADDR
61610: GO 62095
61612: LD_INT 16
61614: DOUBLE
61615: EQUAL
61616: IFTRUE 61674
61618: LD_INT 17
61620: DOUBLE
61621: EQUAL
61622: IFTRUE 61674
61624: LD_INT 18
61626: DOUBLE
61627: EQUAL
61628: IFTRUE 61674
61630: LD_INT 19
61632: DOUBLE
61633: EQUAL
61634: IFTRUE 61674
61636: LD_INT 22
61638: DOUBLE
61639: EQUAL
61640: IFTRUE 61674
61642: LD_INT 20
61644: DOUBLE
61645: EQUAL
61646: IFTRUE 61674
61648: LD_INT 21
61650: DOUBLE
61651: EQUAL
61652: IFTRUE 61674
61654: LD_INT 23
61656: DOUBLE
61657: EQUAL
61658: IFTRUE 61674
61660: LD_INT 24
61662: DOUBLE
61663: EQUAL
61664: IFTRUE 61674
61666: LD_INT 25
61668: DOUBLE
61669: EQUAL
61670: IFTRUE 61674
61672: GO 61730
61674: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
61675: LD_ADDR_VAR 0 9
61679: PUSH
61680: LD_VAR 0 35
61684: PUSH
61685: LD_VAR 0 36
61689: PUSH
61690: LD_VAR 0 37
61694: PUSH
61695: LD_VAR 0 38
61699: PUSH
61700: LD_VAR 0 39
61704: PUSH
61705: LD_VAR 0 40
61709: PUSH
61710: EMPTY
61711: LIST
61712: LIST
61713: LIST
61714: LIST
61715: LIST
61716: LIST
61717: PUSH
61718: LD_VAR 0 4
61722: PUSH
61723: LD_INT 1
61725: PLUS
61726: ARRAY
61727: ST_TO_ADDR
61728: GO 62095
61730: LD_INT 6
61732: DOUBLE
61733: EQUAL
61734: IFTRUE 61786
61736: LD_INT 7
61738: DOUBLE
61739: EQUAL
61740: IFTRUE 61786
61742: LD_INT 8
61744: DOUBLE
61745: EQUAL
61746: IFTRUE 61786
61748: LD_INT 13
61750: DOUBLE
61751: EQUAL
61752: IFTRUE 61786
61754: LD_INT 12
61756: DOUBLE
61757: EQUAL
61758: IFTRUE 61786
61760: LD_INT 15
61762: DOUBLE
61763: EQUAL
61764: IFTRUE 61786
61766: LD_INT 11
61768: DOUBLE
61769: EQUAL
61770: IFTRUE 61786
61772: LD_INT 14
61774: DOUBLE
61775: EQUAL
61776: IFTRUE 61786
61778: LD_INT 10
61780: DOUBLE
61781: EQUAL
61782: IFTRUE 61786
61784: GO 61842
61786: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
61787: LD_ADDR_VAR 0 9
61791: PUSH
61792: LD_VAR 0 41
61796: PUSH
61797: LD_VAR 0 42
61801: PUSH
61802: LD_VAR 0 43
61806: PUSH
61807: LD_VAR 0 44
61811: PUSH
61812: LD_VAR 0 45
61816: PUSH
61817: LD_VAR 0 46
61821: PUSH
61822: EMPTY
61823: LIST
61824: LIST
61825: LIST
61826: LIST
61827: LIST
61828: LIST
61829: PUSH
61830: LD_VAR 0 4
61834: PUSH
61835: LD_INT 1
61837: PLUS
61838: ARRAY
61839: ST_TO_ADDR
61840: GO 62095
61842: LD_INT 36
61844: DOUBLE
61845: EQUAL
61846: IFTRUE 61850
61848: GO 61906
61850: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
61851: LD_ADDR_VAR 0 9
61855: PUSH
61856: LD_VAR 0 47
61860: PUSH
61861: LD_VAR 0 48
61865: PUSH
61866: LD_VAR 0 49
61870: PUSH
61871: LD_VAR 0 50
61875: PUSH
61876: LD_VAR 0 51
61880: PUSH
61881: LD_VAR 0 52
61885: PUSH
61886: EMPTY
61887: LIST
61888: LIST
61889: LIST
61890: LIST
61891: LIST
61892: LIST
61893: PUSH
61894: LD_VAR 0 4
61898: PUSH
61899: LD_INT 1
61901: PLUS
61902: ARRAY
61903: ST_TO_ADDR
61904: GO 62095
61906: LD_INT 4
61908: DOUBLE
61909: EQUAL
61910: IFTRUE 61932
61912: LD_INT 5
61914: DOUBLE
61915: EQUAL
61916: IFTRUE 61932
61918: LD_INT 34
61920: DOUBLE
61921: EQUAL
61922: IFTRUE 61932
61924: LD_INT 37
61926: DOUBLE
61927: EQUAL
61928: IFTRUE 61932
61930: GO 61988
61932: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
61933: LD_ADDR_VAR 0 9
61937: PUSH
61938: LD_VAR 0 53
61942: PUSH
61943: LD_VAR 0 54
61947: PUSH
61948: LD_VAR 0 55
61952: PUSH
61953: LD_VAR 0 56
61957: PUSH
61958: LD_VAR 0 57
61962: PUSH
61963: LD_VAR 0 58
61967: PUSH
61968: EMPTY
61969: LIST
61970: LIST
61971: LIST
61972: LIST
61973: LIST
61974: LIST
61975: PUSH
61976: LD_VAR 0 4
61980: PUSH
61981: LD_INT 1
61983: PLUS
61984: ARRAY
61985: ST_TO_ADDR
61986: GO 62095
61988: LD_INT 31
61990: DOUBLE
61991: EQUAL
61992: IFTRUE 62038
61994: LD_INT 32
61996: DOUBLE
61997: EQUAL
61998: IFTRUE 62038
62000: LD_INT 33
62002: DOUBLE
62003: EQUAL
62004: IFTRUE 62038
62006: LD_INT 27
62008: DOUBLE
62009: EQUAL
62010: IFTRUE 62038
62012: LD_INT 26
62014: DOUBLE
62015: EQUAL
62016: IFTRUE 62038
62018: LD_INT 28
62020: DOUBLE
62021: EQUAL
62022: IFTRUE 62038
62024: LD_INT 29
62026: DOUBLE
62027: EQUAL
62028: IFTRUE 62038
62030: LD_INT 30
62032: DOUBLE
62033: EQUAL
62034: IFTRUE 62038
62036: GO 62094
62038: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
62039: LD_ADDR_VAR 0 9
62043: PUSH
62044: LD_VAR 0 59
62048: PUSH
62049: LD_VAR 0 60
62053: PUSH
62054: LD_VAR 0 61
62058: PUSH
62059: LD_VAR 0 62
62063: PUSH
62064: LD_VAR 0 63
62068: PUSH
62069: LD_VAR 0 64
62073: PUSH
62074: EMPTY
62075: LIST
62076: LIST
62077: LIST
62078: LIST
62079: LIST
62080: LIST
62081: PUSH
62082: LD_VAR 0 4
62086: PUSH
62087: LD_INT 1
62089: PLUS
62090: ARRAY
62091: ST_TO_ADDR
62092: GO 62095
62094: POP
// temp_list2 = [ ] ;
62095: LD_ADDR_VAR 0 10
62099: PUSH
62100: EMPTY
62101: ST_TO_ADDR
// for i in temp_list do
62102: LD_ADDR_VAR 0 8
62106: PUSH
62107: LD_VAR 0 9
62111: PUSH
62112: FOR_IN
62113: IFFALSE 62165
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
62115: LD_ADDR_VAR 0 10
62119: PUSH
62120: LD_VAR 0 10
62124: PUSH
62125: LD_VAR 0 8
62129: PUSH
62130: LD_INT 1
62132: ARRAY
62133: PUSH
62134: LD_VAR 0 2
62138: PLUS
62139: PUSH
62140: LD_VAR 0 8
62144: PUSH
62145: LD_INT 2
62147: ARRAY
62148: PUSH
62149: LD_VAR 0 3
62153: PLUS
62154: PUSH
62155: EMPTY
62156: LIST
62157: LIST
62158: PUSH
62159: EMPTY
62160: LIST
62161: ADD
62162: ST_TO_ADDR
62163: GO 62112
62165: POP
62166: POP
// result = temp_list2 ;
62167: LD_ADDR_VAR 0 7
62171: PUSH
62172: LD_VAR 0 10
62176: ST_TO_ADDR
// end ;
62177: LD_VAR 0 7
62181: RET
// export function EnemyInRange ( unit , dist ) ; begin
62182: LD_INT 0
62184: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
62185: LD_ADDR_VAR 0 3
62189: PUSH
62190: LD_VAR 0 1
62194: PPUSH
62195: CALL_OW 255
62199: PPUSH
62200: LD_VAR 0 1
62204: PPUSH
62205: CALL_OW 250
62209: PPUSH
62210: LD_VAR 0 1
62214: PPUSH
62215: CALL_OW 251
62219: PPUSH
62220: LD_VAR 0 2
62224: PPUSH
62225: CALL 35555 0 4
62229: PUSH
62230: LD_INT 4
62232: ARRAY
62233: ST_TO_ADDR
// end ;
62234: LD_VAR 0 3
62238: RET
// export function PlayerSeeMe ( unit ) ; begin
62239: LD_INT 0
62241: PPUSH
// result := See ( your_side , unit ) ;
62242: LD_ADDR_VAR 0 2
62246: PUSH
62247: LD_OWVAR 2
62251: PPUSH
62252: LD_VAR 0 1
62256: PPUSH
62257: CALL_OW 292
62261: ST_TO_ADDR
// end ;
62262: LD_VAR 0 2
62266: RET
// export function ReverseDir ( unit ) ; begin
62267: LD_INT 0
62269: PPUSH
// if not unit then
62270: LD_VAR 0 1
62274: NOT
62275: IFFALSE 62279
// exit ;
62277: GO 62302
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
62279: LD_ADDR_VAR 0 2
62283: PUSH
62284: LD_VAR 0 1
62288: PPUSH
62289: CALL_OW 254
62293: PUSH
62294: LD_INT 3
62296: PLUS
62297: PUSH
62298: LD_INT 6
62300: MOD
62301: ST_TO_ADDR
// end ;
62302: LD_VAR 0 2
62306: RET
// export function ReverseArray ( array ) ; var i ; begin
62307: LD_INT 0
62309: PPUSH
62310: PPUSH
// if not array then
62311: LD_VAR 0 1
62315: NOT
62316: IFFALSE 62320
// exit ;
62318: GO 62375
// result := [ ] ;
62320: LD_ADDR_VAR 0 2
62324: PUSH
62325: EMPTY
62326: ST_TO_ADDR
// for i := array downto 1 do
62327: LD_ADDR_VAR 0 3
62331: PUSH
62332: DOUBLE
62333: LD_VAR 0 1
62337: INC
62338: ST_TO_ADDR
62339: LD_INT 1
62341: PUSH
62342: FOR_DOWNTO
62343: IFFALSE 62373
// result := Join ( result , array [ i ] ) ;
62345: LD_ADDR_VAR 0 2
62349: PUSH
62350: LD_VAR 0 2
62354: PPUSH
62355: LD_VAR 0 1
62359: PUSH
62360: LD_VAR 0 3
62364: ARRAY
62365: PPUSH
62366: CALL 67020 0 2
62370: ST_TO_ADDR
62371: GO 62342
62373: POP
62374: POP
// end ;
62375: LD_VAR 0 2
62379: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
62380: LD_INT 0
62382: PPUSH
62383: PPUSH
62384: PPUSH
62385: PPUSH
62386: PPUSH
62387: PPUSH
// if not unit or not hexes then
62388: LD_VAR 0 1
62392: NOT
62393: PUSH
62394: LD_VAR 0 2
62398: NOT
62399: OR
62400: IFFALSE 62404
// exit ;
62402: GO 62527
// dist := 9999 ;
62404: LD_ADDR_VAR 0 5
62408: PUSH
62409: LD_INT 9999
62411: ST_TO_ADDR
// for i = 1 to hexes do
62412: LD_ADDR_VAR 0 4
62416: PUSH
62417: DOUBLE
62418: LD_INT 1
62420: DEC
62421: ST_TO_ADDR
62422: LD_VAR 0 2
62426: PUSH
62427: FOR_TO
62428: IFFALSE 62515
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
62430: LD_ADDR_VAR 0 6
62434: PUSH
62435: LD_VAR 0 1
62439: PPUSH
62440: LD_VAR 0 2
62444: PUSH
62445: LD_VAR 0 4
62449: ARRAY
62450: PUSH
62451: LD_INT 1
62453: ARRAY
62454: PPUSH
62455: LD_VAR 0 2
62459: PUSH
62460: LD_VAR 0 4
62464: ARRAY
62465: PUSH
62466: LD_INT 2
62468: ARRAY
62469: PPUSH
62470: CALL_OW 297
62474: ST_TO_ADDR
// if tdist < dist then
62475: LD_VAR 0 6
62479: PUSH
62480: LD_VAR 0 5
62484: LESS
62485: IFFALSE 62513
// begin hex := hexes [ i ] ;
62487: LD_ADDR_VAR 0 8
62491: PUSH
62492: LD_VAR 0 2
62496: PUSH
62497: LD_VAR 0 4
62501: ARRAY
62502: ST_TO_ADDR
// dist := tdist ;
62503: LD_ADDR_VAR 0 5
62507: PUSH
62508: LD_VAR 0 6
62512: ST_TO_ADDR
// end ; end ;
62513: GO 62427
62515: POP
62516: POP
// result := hex ;
62517: LD_ADDR_VAR 0 3
62521: PUSH
62522: LD_VAR 0 8
62526: ST_TO_ADDR
// end ;
62527: LD_VAR 0 3
62531: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
62532: LD_INT 0
62534: PPUSH
62535: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
62536: LD_VAR 0 1
62540: NOT
62541: PUSH
62542: LD_VAR 0 1
62546: PUSH
62547: LD_INT 21
62549: PUSH
62550: LD_INT 2
62552: PUSH
62553: EMPTY
62554: LIST
62555: LIST
62556: PUSH
62557: LD_INT 23
62559: PUSH
62560: LD_INT 2
62562: PUSH
62563: EMPTY
62564: LIST
62565: LIST
62566: PUSH
62567: EMPTY
62568: LIST
62569: LIST
62570: PPUSH
62571: CALL_OW 69
62575: IN
62576: NOT
62577: OR
62578: IFFALSE 62582
// exit ;
62580: GO 62629
// for i = 1 to 3 do
62582: LD_ADDR_VAR 0 3
62586: PUSH
62587: DOUBLE
62588: LD_INT 1
62590: DEC
62591: ST_TO_ADDR
62592: LD_INT 3
62594: PUSH
62595: FOR_TO
62596: IFFALSE 62627
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
62598: LD_VAR 0 1
62602: PPUSH
62603: CALL_OW 250
62607: PPUSH
62608: LD_VAR 0 1
62612: PPUSH
62613: CALL_OW 251
62617: PPUSH
62618: LD_INT 1
62620: PPUSH
62621: CALL_OW 453
62625: GO 62595
62627: POP
62628: POP
// end ;
62629: LD_VAR 0 2
62633: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
62634: LD_INT 0
62636: PPUSH
62637: PPUSH
62638: PPUSH
62639: PPUSH
62640: PPUSH
62641: PPUSH
// if not unit or not enemy_unit then
62642: LD_VAR 0 1
62646: NOT
62647: PUSH
62648: LD_VAR 0 2
62652: NOT
62653: OR
62654: IFFALSE 62658
// exit ;
62656: GO 63125
// if GetLives ( i ) < 250 then
62658: LD_VAR 0 4
62662: PPUSH
62663: CALL_OW 256
62667: PUSH
62668: LD_INT 250
62670: LESS
62671: IFFALSE 62684
// begin ComAutodestruct ( i ) ;
62673: LD_VAR 0 4
62677: PPUSH
62678: CALL 62532 0 1
// exit ;
62682: GO 63125
// end ; x := GetX ( enemy_unit ) ;
62684: LD_ADDR_VAR 0 7
62688: PUSH
62689: LD_VAR 0 2
62693: PPUSH
62694: CALL_OW 250
62698: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
62699: LD_ADDR_VAR 0 8
62703: PUSH
62704: LD_VAR 0 2
62708: PPUSH
62709: CALL_OW 251
62713: ST_TO_ADDR
// if not x or not y then
62714: LD_VAR 0 7
62718: NOT
62719: PUSH
62720: LD_VAR 0 8
62724: NOT
62725: OR
62726: IFFALSE 62730
// exit ;
62728: GO 63125
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
62730: LD_ADDR_VAR 0 6
62734: PUSH
62735: LD_VAR 0 7
62739: PPUSH
62740: LD_INT 0
62742: PPUSH
62743: LD_INT 4
62745: PPUSH
62746: CALL_OW 272
62750: PUSH
62751: LD_VAR 0 8
62755: PPUSH
62756: LD_INT 0
62758: PPUSH
62759: LD_INT 4
62761: PPUSH
62762: CALL_OW 273
62766: PUSH
62767: EMPTY
62768: LIST
62769: LIST
62770: PUSH
62771: LD_VAR 0 7
62775: PPUSH
62776: LD_INT 1
62778: PPUSH
62779: LD_INT 4
62781: PPUSH
62782: CALL_OW 272
62786: PUSH
62787: LD_VAR 0 8
62791: PPUSH
62792: LD_INT 1
62794: PPUSH
62795: LD_INT 4
62797: PPUSH
62798: CALL_OW 273
62802: PUSH
62803: EMPTY
62804: LIST
62805: LIST
62806: PUSH
62807: LD_VAR 0 7
62811: PPUSH
62812: LD_INT 2
62814: PPUSH
62815: LD_INT 4
62817: PPUSH
62818: CALL_OW 272
62822: PUSH
62823: LD_VAR 0 8
62827: PPUSH
62828: LD_INT 2
62830: PPUSH
62831: LD_INT 4
62833: PPUSH
62834: CALL_OW 273
62838: PUSH
62839: EMPTY
62840: LIST
62841: LIST
62842: PUSH
62843: LD_VAR 0 7
62847: PPUSH
62848: LD_INT 3
62850: PPUSH
62851: LD_INT 4
62853: PPUSH
62854: CALL_OW 272
62858: PUSH
62859: LD_VAR 0 8
62863: PPUSH
62864: LD_INT 3
62866: PPUSH
62867: LD_INT 4
62869: PPUSH
62870: CALL_OW 273
62874: PUSH
62875: EMPTY
62876: LIST
62877: LIST
62878: PUSH
62879: LD_VAR 0 7
62883: PPUSH
62884: LD_INT 4
62886: PPUSH
62887: LD_INT 4
62889: PPUSH
62890: CALL_OW 272
62894: PUSH
62895: LD_VAR 0 8
62899: PPUSH
62900: LD_INT 4
62902: PPUSH
62903: LD_INT 4
62905: PPUSH
62906: CALL_OW 273
62910: PUSH
62911: EMPTY
62912: LIST
62913: LIST
62914: PUSH
62915: LD_VAR 0 7
62919: PPUSH
62920: LD_INT 5
62922: PPUSH
62923: LD_INT 4
62925: PPUSH
62926: CALL_OW 272
62930: PUSH
62931: LD_VAR 0 8
62935: PPUSH
62936: LD_INT 5
62938: PPUSH
62939: LD_INT 4
62941: PPUSH
62942: CALL_OW 273
62946: PUSH
62947: EMPTY
62948: LIST
62949: LIST
62950: PUSH
62951: EMPTY
62952: LIST
62953: LIST
62954: LIST
62955: LIST
62956: LIST
62957: LIST
62958: ST_TO_ADDR
// for i = tmp downto 1 do
62959: LD_ADDR_VAR 0 4
62963: PUSH
62964: DOUBLE
62965: LD_VAR 0 6
62969: INC
62970: ST_TO_ADDR
62971: LD_INT 1
62973: PUSH
62974: FOR_DOWNTO
62975: IFFALSE 63076
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
62977: LD_VAR 0 6
62981: PUSH
62982: LD_VAR 0 4
62986: ARRAY
62987: PUSH
62988: LD_INT 1
62990: ARRAY
62991: PPUSH
62992: LD_VAR 0 6
62996: PUSH
62997: LD_VAR 0 4
63001: ARRAY
63002: PUSH
63003: LD_INT 2
63005: ARRAY
63006: PPUSH
63007: CALL_OW 488
63011: NOT
63012: PUSH
63013: LD_VAR 0 6
63017: PUSH
63018: LD_VAR 0 4
63022: ARRAY
63023: PUSH
63024: LD_INT 1
63026: ARRAY
63027: PPUSH
63028: LD_VAR 0 6
63032: PUSH
63033: LD_VAR 0 4
63037: ARRAY
63038: PUSH
63039: LD_INT 2
63041: ARRAY
63042: PPUSH
63043: CALL_OW 428
63047: PUSH
63048: LD_INT 0
63050: NONEQUAL
63051: OR
63052: IFFALSE 63074
// tmp := Delete ( tmp , i ) ;
63054: LD_ADDR_VAR 0 6
63058: PUSH
63059: LD_VAR 0 6
63063: PPUSH
63064: LD_VAR 0 4
63068: PPUSH
63069: CALL_OW 3
63073: ST_TO_ADDR
63074: GO 62974
63076: POP
63077: POP
// j := GetClosestHex ( unit , tmp ) ;
63078: LD_ADDR_VAR 0 5
63082: PUSH
63083: LD_VAR 0 1
63087: PPUSH
63088: LD_VAR 0 6
63092: PPUSH
63093: CALL 62380 0 2
63097: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
63098: LD_VAR 0 1
63102: PPUSH
63103: LD_VAR 0 5
63107: PUSH
63108: LD_INT 1
63110: ARRAY
63111: PPUSH
63112: LD_VAR 0 5
63116: PUSH
63117: LD_INT 2
63119: ARRAY
63120: PPUSH
63121: CALL_OW 111
// end ;
63125: LD_VAR 0 3
63129: RET
// export function PrepareApemanSoldier ( ) ; begin
63130: LD_INT 0
63132: PPUSH
// uc_nation := 0 ;
63133: LD_ADDR_OWVAR 21
63137: PUSH
63138: LD_INT 0
63140: ST_TO_ADDR
// hc_sex := sex_male ;
63141: LD_ADDR_OWVAR 27
63145: PUSH
63146: LD_INT 1
63148: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
63149: LD_ADDR_OWVAR 28
63153: PUSH
63154: LD_INT 15
63156: ST_TO_ADDR
// hc_gallery :=  ;
63157: LD_ADDR_OWVAR 33
63161: PUSH
63162: LD_STRING 
63164: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
63165: LD_ADDR_OWVAR 31
63169: PUSH
63170: LD_INT 0
63172: PPUSH
63173: LD_INT 3
63175: PPUSH
63176: CALL_OW 12
63180: PUSH
63181: LD_INT 0
63183: PPUSH
63184: LD_INT 3
63186: PPUSH
63187: CALL_OW 12
63191: PUSH
63192: LD_INT 0
63194: PUSH
63195: LD_INT 0
63197: PUSH
63198: EMPTY
63199: LIST
63200: LIST
63201: LIST
63202: LIST
63203: ST_TO_ADDR
// end ;
63204: LD_VAR 0 1
63208: RET
// export function PrepareApemanEngineer ( ) ; begin
63209: LD_INT 0
63211: PPUSH
// uc_nation := 0 ;
63212: LD_ADDR_OWVAR 21
63216: PUSH
63217: LD_INT 0
63219: ST_TO_ADDR
// hc_sex := sex_male ;
63220: LD_ADDR_OWVAR 27
63224: PUSH
63225: LD_INT 1
63227: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
63228: LD_ADDR_OWVAR 28
63232: PUSH
63233: LD_INT 16
63235: ST_TO_ADDR
// hc_gallery :=  ;
63236: LD_ADDR_OWVAR 33
63240: PUSH
63241: LD_STRING 
63243: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
63244: LD_ADDR_OWVAR 31
63248: PUSH
63249: LD_INT 0
63251: PPUSH
63252: LD_INT 3
63254: PPUSH
63255: CALL_OW 12
63259: PUSH
63260: LD_INT 0
63262: PPUSH
63263: LD_INT 3
63265: PPUSH
63266: CALL_OW 12
63270: PUSH
63271: LD_INT 0
63273: PUSH
63274: LD_INT 0
63276: PUSH
63277: EMPTY
63278: LIST
63279: LIST
63280: LIST
63281: LIST
63282: ST_TO_ADDR
// end ;
63283: LD_VAR 0 1
63287: RET
// export function PrepareApeman ( agressivity ) ; begin
63288: LD_INT 0
63290: PPUSH
// uc_side := 0 ;
63291: LD_ADDR_OWVAR 20
63295: PUSH
63296: LD_INT 0
63298: ST_TO_ADDR
// uc_nation := 0 ;
63299: LD_ADDR_OWVAR 21
63303: PUSH
63304: LD_INT 0
63306: ST_TO_ADDR
// hc_sex := sex_male ;
63307: LD_ADDR_OWVAR 27
63311: PUSH
63312: LD_INT 1
63314: ST_TO_ADDR
// hc_class := class_apeman ;
63315: LD_ADDR_OWVAR 28
63319: PUSH
63320: LD_INT 12
63322: ST_TO_ADDR
// hc_gallery :=  ;
63323: LD_ADDR_OWVAR 33
63327: PUSH
63328: LD_STRING 
63330: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
63331: LD_ADDR_OWVAR 35
63335: PUSH
63336: LD_VAR 0 1
63340: NEG
63341: PPUSH
63342: LD_VAR 0 1
63346: PPUSH
63347: CALL_OW 12
63351: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
63352: LD_ADDR_OWVAR 31
63356: PUSH
63357: LD_INT 0
63359: PPUSH
63360: LD_INT 3
63362: PPUSH
63363: CALL_OW 12
63367: PUSH
63368: LD_INT 0
63370: PPUSH
63371: LD_INT 3
63373: PPUSH
63374: CALL_OW 12
63378: PUSH
63379: LD_INT 0
63381: PUSH
63382: LD_INT 0
63384: PUSH
63385: EMPTY
63386: LIST
63387: LIST
63388: LIST
63389: LIST
63390: ST_TO_ADDR
// end ;
63391: LD_VAR 0 2
63395: RET
// export function PrepareTiger ( agressivity ) ; begin
63396: LD_INT 0
63398: PPUSH
// uc_side := 0 ;
63399: LD_ADDR_OWVAR 20
63403: PUSH
63404: LD_INT 0
63406: ST_TO_ADDR
// uc_nation := 0 ;
63407: LD_ADDR_OWVAR 21
63411: PUSH
63412: LD_INT 0
63414: ST_TO_ADDR
// hc_class := class_tiger ;
63415: LD_ADDR_OWVAR 28
63419: PUSH
63420: LD_INT 14
63422: ST_TO_ADDR
// hc_gallery :=  ;
63423: LD_ADDR_OWVAR 33
63427: PUSH
63428: LD_STRING 
63430: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
63431: LD_ADDR_OWVAR 35
63435: PUSH
63436: LD_VAR 0 1
63440: NEG
63441: PPUSH
63442: LD_VAR 0 1
63446: PPUSH
63447: CALL_OW 12
63451: ST_TO_ADDR
// end ;
63452: LD_VAR 0 2
63456: RET
// export function PrepareEnchidna ( ) ; begin
63457: LD_INT 0
63459: PPUSH
// uc_side := 0 ;
63460: LD_ADDR_OWVAR 20
63464: PUSH
63465: LD_INT 0
63467: ST_TO_ADDR
// uc_nation := 0 ;
63468: LD_ADDR_OWVAR 21
63472: PUSH
63473: LD_INT 0
63475: ST_TO_ADDR
// hc_class := class_baggie ;
63476: LD_ADDR_OWVAR 28
63480: PUSH
63481: LD_INT 13
63483: ST_TO_ADDR
// hc_gallery :=  ;
63484: LD_ADDR_OWVAR 33
63488: PUSH
63489: LD_STRING 
63491: ST_TO_ADDR
// end ;
63492: LD_VAR 0 1
63496: RET
// export function PrepareFrog ( ) ; begin
63497: LD_INT 0
63499: PPUSH
// uc_side := 0 ;
63500: LD_ADDR_OWVAR 20
63504: PUSH
63505: LD_INT 0
63507: ST_TO_ADDR
// uc_nation := 0 ;
63508: LD_ADDR_OWVAR 21
63512: PUSH
63513: LD_INT 0
63515: ST_TO_ADDR
// hc_class := class_frog ;
63516: LD_ADDR_OWVAR 28
63520: PUSH
63521: LD_INT 19
63523: ST_TO_ADDR
// hc_gallery :=  ;
63524: LD_ADDR_OWVAR 33
63528: PUSH
63529: LD_STRING 
63531: ST_TO_ADDR
// end ;
63532: LD_VAR 0 1
63536: RET
// export function PrepareFish ( ) ; begin
63537: LD_INT 0
63539: PPUSH
// uc_side := 0 ;
63540: LD_ADDR_OWVAR 20
63544: PUSH
63545: LD_INT 0
63547: ST_TO_ADDR
// uc_nation := 0 ;
63548: LD_ADDR_OWVAR 21
63552: PUSH
63553: LD_INT 0
63555: ST_TO_ADDR
// hc_class := class_fish ;
63556: LD_ADDR_OWVAR 28
63560: PUSH
63561: LD_INT 20
63563: ST_TO_ADDR
// hc_gallery :=  ;
63564: LD_ADDR_OWVAR 33
63568: PUSH
63569: LD_STRING 
63571: ST_TO_ADDR
// end ;
63572: LD_VAR 0 1
63576: RET
// export function PrepareBird ( ) ; begin
63577: LD_INT 0
63579: PPUSH
// uc_side := 0 ;
63580: LD_ADDR_OWVAR 20
63584: PUSH
63585: LD_INT 0
63587: ST_TO_ADDR
// uc_nation := 0 ;
63588: LD_ADDR_OWVAR 21
63592: PUSH
63593: LD_INT 0
63595: ST_TO_ADDR
// hc_class := class_phororhacos ;
63596: LD_ADDR_OWVAR 28
63600: PUSH
63601: LD_INT 18
63603: ST_TO_ADDR
// hc_gallery :=  ;
63604: LD_ADDR_OWVAR 33
63608: PUSH
63609: LD_STRING 
63611: ST_TO_ADDR
// end ;
63612: LD_VAR 0 1
63616: RET
// export function PrepareHorse ( ) ; begin
63617: LD_INT 0
63619: PPUSH
// uc_side := 0 ;
63620: LD_ADDR_OWVAR 20
63624: PUSH
63625: LD_INT 0
63627: ST_TO_ADDR
// uc_nation := 0 ;
63628: LD_ADDR_OWVAR 21
63632: PUSH
63633: LD_INT 0
63635: ST_TO_ADDR
// hc_class := class_horse ;
63636: LD_ADDR_OWVAR 28
63640: PUSH
63641: LD_INT 21
63643: ST_TO_ADDR
// hc_gallery :=  ;
63644: LD_ADDR_OWVAR 33
63648: PUSH
63649: LD_STRING 
63651: ST_TO_ADDR
// end ;
63652: LD_VAR 0 1
63656: RET
// export function PrepareMastodont ( ) ; begin
63657: LD_INT 0
63659: PPUSH
// uc_side := 0 ;
63660: LD_ADDR_OWVAR 20
63664: PUSH
63665: LD_INT 0
63667: ST_TO_ADDR
// uc_nation := 0 ;
63668: LD_ADDR_OWVAR 21
63672: PUSH
63673: LD_INT 0
63675: ST_TO_ADDR
// vc_chassis := class_mastodont ;
63676: LD_ADDR_OWVAR 37
63680: PUSH
63681: LD_INT 31
63683: ST_TO_ADDR
// vc_control := control_rider ;
63684: LD_ADDR_OWVAR 38
63688: PUSH
63689: LD_INT 4
63691: ST_TO_ADDR
// end ;
63692: LD_VAR 0 1
63696: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
63697: LD_INT 0
63699: PPUSH
63700: PPUSH
63701: PPUSH
// uc_side = 0 ;
63702: LD_ADDR_OWVAR 20
63706: PUSH
63707: LD_INT 0
63709: ST_TO_ADDR
// uc_nation = 0 ;
63710: LD_ADDR_OWVAR 21
63714: PUSH
63715: LD_INT 0
63717: ST_TO_ADDR
// InitHc_All ( ) ;
63718: CALL_OW 584
// InitVc ;
63722: CALL_OW 20
// if mastodonts then
63726: LD_VAR 0 6
63730: IFFALSE 63797
// for i = 1 to mastodonts do
63732: LD_ADDR_VAR 0 11
63736: PUSH
63737: DOUBLE
63738: LD_INT 1
63740: DEC
63741: ST_TO_ADDR
63742: LD_VAR 0 6
63746: PUSH
63747: FOR_TO
63748: IFFALSE 63795
// begin vc_chassis := 31 ;
63750: LD_ADDR_OWVAR 37
63754: PUSH
63755: LD_INT 31
63757: ST_TO_ADDR
// vc_control := control_rider ;
63758: LD_ADDR_OWVAR 38
63762: PUSH
63763: LD_INT 4
63765: ST_TO_ADDR
// animal := CreateVehicle ;
63766: LD_ADDR_VAR 0 12
63770: PUSH
63771: CALL_OW 45
63775: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63776: LD_VAR 0 12
63780: PPUSH
63781: LD_VAR 0 8
63785: PPUSH
63786: LD_INT 0
63788: PPUSH
63789: CALL 65925 0 3
// end ;
63793: GO 63747
63795: POP
63796: POP
// if horses then
63797: LD_VAR 0 5
63801: IFFALSE 63868
// for i = 1 to horses do
63803: LD_ADDR_VAR 0 11
63807: PUSH
63808: DOUBLE
63809: LD_INT 1
63811: DEC
63812: ST_TO_ADDR
63813: LD_VAR 0 5
63817: PUSH
63818: FOR_TO
63819: IFFALSE 63866
// begin hc_class := 21 ;
63821: LD_ADDR_OWVAR 28
63825: PUSH
63826: LD_INT 21
63828: ST_TO_ADDR
// hc_gallery :=  ;
63829: LD_ADDR_OWVAR 33
63833: PUSH
63834: LD_STRING 
63836: ST_TO_ADDR
// animal := CreateHuman ;
63837: LD_ADDR_VAR 0 12
63841: PUSH
63842: CALL_OW 44
63846: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63847: LD_VAR 0 12
63851: PPUSH
63852: LD_VAR 0 8
63856: PPUSH
63857: LD_INT 0
63859: PPUSH
63860: CALL 65925 0 3
// end ;
63864: GO 63818
63866: POP
63867: POP
// if birds then
63868: LD_VAR 0 1
63872: IFFALSE 63939
// for i = 1 to birds do
63874: LD_ADDR_VAR 0 11
63878: PUSH
63879: DOUBLE
63880: LD_INT 1
63882: DEC
63883: ST_TO_ADDR
63884: LD_VAR 0 1
63888: PUSH
63889: FOR_TO
63890: IFFALSE 63937
// begin hc_class := 18 ;
63892: LD_ADDR_OWVAR 28
63896: PUSH
63897: LD_INT 18
63899: ST_TO_ADDR
// hc_gallery =  ;
63900: LD_ADDR_OWVAR 33
63904: PUSH
63905: LD_STRING 
63907: ST_TO_ADDR
// animal := CreateHuman ;
63908: LD_ADDR_VAR 0 12
63912: PUSH
63913: CALL_OW 44
63917: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63918: LD_VAR 0 12
63922: PPUSH
63923: LD_VAR 0 8
63927: PPUSH
63928: LD_INT 0
63930: PPUSH
63931: CALL 65925 0 3
// end ;
63935: GO 63889
63937: POP
63938: POP
// if tigers then
63939: LD_VAR 0 2
63943: IFFALSE 64027
// for i = 1 to tigers do
63945: LD_ADDR_VAR 0 11
63949: PUSH
63950: DOUBLE
63951: LD_INT 1
63953: DEC
63954: ST_TO_ADDR
63955: LD_VAR 0 2
63959: PUSH
63960: FOR_TO
63961: IFFALSE 64025
// begin hc_class = class_tiger ;
63963: LD_ADDR_OWVAR 28
63967: PUSH
63968: LD_INT 14
63970: ST_TO_ADDR
// hc_gallery =  ;
63971: LD_ADDR_OWVAR 33
63975: PUSH
63976: LD_STRING 
63978: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
63979: LD_ADDR_OWVAR 35
63983: PUSH
63984: LD_INT 7
63986: NEG
63987: PPUSH
63988: LD_INT 7
63990: PPUSH
63991: CALL_OW 12
63995: ST_TO_ADDR
// animal := CreateHuman ;
63996: LD_ADDR_VAR 0 12
64000: PUSH
64001: CALL_OW 44
64005: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64006: LD_VAR 0 12
64010: PPUSH
64011: LD_VAR 0 8
64015: PPUSH
64016: LD_INT 0
64018: PPUSH
64019: CALL 65925 0 3
// end ;
64023: GO 63960
64025: POP
64026: POP
// if apemans then
64027: LD_VAR 0 3
64031: IFFALSE 64154
// for i = 1 to apemans do
64033: LD_ADDR_VAR 0 11
64037: PUSH
64038: DOUBLE
64039: LD_INT 1
64041: DEC
64042: ST_TO_ADDR
64043: LD_VAR 0 3
64047: PUSH
64048: FOR_TO
64049: IFFALSE 64152
// begin hc_class = class_apeman ;
64051: LD_ADDR_OWVAR 28
64055: PUSH
64056: LD_INT 12
64058: ST_TO_ADDR
// hc_gallery =  ;
64059: LD_ADDR_OWVAR 33
64063: PUSH
64064: LD_STRING 
64066: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
64067: LD_ADDR_OWVAR 35
64071: PUSH
64072: LD_INT 2
64074: NEG
64075: PPUSH
64076: LD_INT 2
64078: PPUSH
64079: CALL_OW 12
64083: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
64084: LD_ADDR_OWVAR 31
64088: PUSH
64089: LD_INT 1
64091: PPUSH
64092: LD_INT 3
64094: PPUSH
64095: CALL_OW 12
64099: PUSH
64100: LD_INT 1
64102: PPUSH
64103: LD_INT 3
64105: PPUSH
64106: CALL_OW 12
64110: PUSH
64111: LD_INT 0
64113: PUSH
64114: LD_INT 0
64116: PUSH
64117: EMPTY
64118: LIST
64119: LIST
64120: LIST
64121: LIST
64122: ST_TO_ADDR
// animal := CreateHuman ;
64123: LD_ADDR_VAR 0 12
64127: PUSH
64128: CALL_OW 44
64132: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64133: LD_VAR 0 12
64137: PPUSH
64138: LD_VAR 0 8
64142: PPUSH
64143: LD_INT 0
64145: PPUSH
64146: CALL 65925 0 3
// end ;
64150: GO 64048
64152: POP
64153: POP
// if enchidnas then
64154: LD_VAR 0 4
64158: IFFALSE 64225
// for i = 1 to enchidnas do
64160: LD_ADDR_VAR 0 11
64164: PUSH
64165: DOUBLE
64166: LD_INT 1
64168: DEC
64169: ST_TO_ADDR
64170: LD_VAR 0 4
64174: PUSH
64175: FOR_TO
64176: IFFALSE 64223
// begin hc_class = 13 ;
64178: LD_ADDR_OWVAR 28
64182: PUSH
64183: LD_INT 13
64185: ST_TO_ADDR
// hc_gallery =  ;
64186: LD_ADDR_OWVAR 33
64190: PUSH
64191: LD_STRING 
64193: ST_TO_ADDR
// animal := CreateHuman ;
64194: LD_ADDR_VAR 0 12
64198: PUSH
64199: CALL_OW 44
64203: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64204: LD_VAR 0 12
64208: PPUSH
64209: LD_VAR 0 8
64213: PPUSH
64214: LD_INT 0
64216: PPUSH
64217: CALL 65925 0 3
// end ;
64221: GO 64175
64223: POP
64224: POP
// if fishes then
64225: LD_VAR 0 7
64229: IFFALSE 64296
// for i = 1 to fishes do
64231: LD_ADDR_VAR 0 11
64235: PUSH
64236: DOUBLE
64237: LD_INT 1
64239: DEC
64240: ST_TO_ADDR
64241: LD_VAR 0 7
64245: PUSH
64246: FOR_TO
64247: IFFALSE 64294
// begin hc_class = 20 ;
64249: LD_ADDR_OWVAR 28
64253: PUSH
64254: LD_INT 20
64256: ST_TO_ADDR
// hc_gallery =  ;
64257: LD_ADDR_OWVAR 33
64261: PUSH
64262: LD_STRING 
64264: ST_TO_ADDR
// animal := CreateHuman ;
64265: LD_ADDR_VAR 0 12
64269: PUSH
64270: CALL_OW 44
64274: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
64275: LD_VAR 0 12
64279: PPUSH
64280: LD_VAR 0 9
64284: PPUSH
64285: LD_INT 0
64287: PPUSH
64288: CALL 65925 0 3
// end ;
64292: GO 64246
64294: POP
64295: POP
// end ;
64296: LD_VAR 0 10
64300: RET
// export function WantHeal ( sci , unit ) ; begin
64301: LD_INT 0
64303: PPUSH
// if GetTaskList ( sci ) > 0 then
64304: LD_VAR 0 1
64308: PPUSH
64309: CALL_OW 437
64313: PUSH
64314: LD_INT 0
64316: GREATER
64317: IFFALSE 64387
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
64319: LD_VAR 0 1
64323: PPUSH
64324: CALL_OW 437
64328: PUSH
64329: LD_INT 1
64331: ARRAY
64332: PUSH
64333: LD_INT 1
64335: ARRAY
64336: PUSH
64337: LD_STRING l
64339: EQUAL
64340: PUSH
64341: LD_VAR 0 1
64345: PPUSH
64346: CALL_OW 437
64350: PUSH
64351: LD_INT 1
64353: ARRAY
64354: PUSH
64355: LD_INT 4
64357: ARRAY
64358: PUSH
64359: LD_VAR 0 2
64363: EQUAL
64364: AND
64365: IFFALSE 64377
// result := true else
64367: LD_ADDR_VAR 0 3
64371: PUSH
64372: LD_INT 1
64374: ST_TO_ADDR
64375: GO 64385
// result := false ;
64377: LD_ADDR_VAR 0 3
64381: PUSH
64382: LD_INT 0
64384: ST_TO_ADDR
// end else
64385: GO 64395
// result := false ;
64387: LD_ADDR_VAR 0 3
64391: PUSH
64392: LD_INT 0
64394: ST_TO_ADDR
// end ;
64395: LD_VAR 0 3
64399: RET
// export function HealTarget ( sci ) ; begin
64400: LD_INT 0
64402: PPUSH
// if not sci then
64403: LD_VAR 0 1
64407: NOT
64408: IFFALSE 64412
// exit ;
64410: GO 64477
// result := 0 ;
64412: LD_ADDR_VAR 0 2
64416: PUSH
64417: LD_INT 0
64419: ST_TO_ADDR
// if GetTaskList ( sci ) then
64420: LD_VAR 0 1
64424: PPUSH
64425: CALL_OW 437
64429: IFFALSE 64477
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
64431: LD_VAR 0 1
64435: PPUSH
64436: CALL_OW 437
64440: PUSH
64441: LD_INT 1
64443: ARRAY
64444: PUSH
64445: LD_INT 1
64447: ARRAY
64448: PUSH
64449: LD_STRING l
64451: EQUAL
64452: IFFALSE 64477
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
64454: LD_ADDR_VAR 0 2
64458: PUSH
64459: LD_VAR 0 1
64463: PPUSH
64464: CALL_OW 437
64468: PUSH
64469: LD_INT 1
64471: ARRAY
64472: PUSH
64473: LD_INT 4
64475: ARRAY
64476: ST_TO_ADDR
// end ;
64477: LD_VAR 0 2
64481: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
64482: LD_INT 0
64484: PPUSH
64485: PPUSH
64486: PPUSH
64487: PPUSH
// if not base_units then
64488: LD_VAR 0 1
64492: NOT
64493: IFFALSE 64497
// exit ;
64495: GO 64584
// result := false ;
64497: LD_ADDR_VAR 0 2
64501: PUSH
64502: LD_INT 0
64504: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
64505: LD_ADDR_VAR 0 5
64509: PUSH
64510: LD_VAR 0 1
64514: PPUSH
64515: LD_INT 21
64517: PUSH
64518: LD_INT 3
64520: PUSH
64521: EMPTY
64522: LIST
64523: LIST
64524: PPUSH
64525: CALL_OW 72
64529: ST_TO_ADDR
// if not tmp then
64530: LD_VAR 0 5
64534: NOT
64535: IFFALSE 64539
// exit ;
64537: GO 64584
// for i in tmp do
64539: LD_ADDR_VAR 0 3
64543: PUSH
64544: LD_VAR 0 5
64548: PUSH
64549: FOR_IN
64550: IFFALSE 64582
// begin result := EnemyInRange ( i , 22 ) ;
64552: LD_ADDR_VAR 0 2
64556: PUSH
64557: LD_VAR 0 3
64561: PPUSH
64562: LD_INT 22
64564: PPUSH
64565: CALL 62182 0 2
64569: ST_TO_ADDR
// if result then
64570: LD_VAR 0 2
64574: IFFALSE 64580
// exit ;
64576: POP
64577: POP
64578: GO 64584
// end ;
64580: GO 64549
64582: POP
64583: POP
// end ;
64584: LD_VAR 0 2
64588: RET
// export function FilterByTag ( units , tag ) ; begin
64589: LD_INT 0
64591: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
64592: LD_ADDR_VAR 0 3
64596: PUSH
64597: LD_VAR 0 1
64601: PPUSH
64602: LD_INT 120
64604: PUSH
64605: LD_VAR 0 2
64609: PUSH
64610: EMPTY
64611: LIST
64612: LIST
64613: PPUSH
64614: CALL_OW 72
64618: ST_TO_ADDR
// end ;
64619: LD_VAR 0 3
64623: RET
// export function IsDriver ( un ) ; begin
64624: LD_INT 0
64626: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
64627: LD_ADDR_VAR 0 2
64631: PUSH
64632: LD_VAR 0 1
64636: PUSH
64637: LD_INT 55
64639: PUSH
64640: EMPTY
64641: LIST
64642: PPUSH
64643: CALL_OW 69
64647: IN
64648: ST_TO_ADDR
// end ;
64649: LD_VAR 0 2
64653: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
64654: LD_INT 0
64656: PPUSH
64657: PPUSH
// list := [ ] ;
64658: LD_ADDR_VAR 0 5
64662: PUSH
64663: EMPTY
64664: ST_TO_ADDR
// case d of 0 :
64665: LD_VAR 0 3
64669: PUSH
64670: LD_INT 0
64672: DOUBLE
64673: EQUAL
64674: IFTRUE 64678
64676: GO 64811
64678: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
64679: LD_ADDR_VAR 0 5
64683: PUSH
64684: LD_VAR 0 1
64688: PUSH
64689: LD_INT 4
64691: MINUS
64692: PUSH
64693: LD_VAR 0 2
64697: PUSH
64698: LD_INT 4
64700: MINUS
64701: PUSH
64702: LD_INT 2
64704: PUSH
64705: EMPTY
64706: LIST
64707: LIST
64708: LIST
64709: PUSH
64710: LD_VAR 0 1
64714: PUSH
64715: LD_INT 3
64717: MINUS
64718: PUSH
64719: LD_VAR 0 2
64723: PUSH
64724: LD_INT 1
64726: PUSH
64727: EMPTY
64728: LIST
64729: LIST
64730: LIST
64731: PUSH
64732: LD_VAR 0 1
64736: PUSH
64737: LD_INT 4
64739: PLUS
64740: PUSH
64741: LD_VAR 0 2
64745: PUSH
64746: LD_INT 4
64748: PUSH
64749: EMPTY
64750: LIST
64751: LIST
64752: LIST
64753: PUSH
64754: LD_VAR 0 1
64758: PUSH
64759: LD_INT 3
64761: PLUS
64762: PUSH
64763: LD_VAR 0 2
64767: PUSH
64768: LD_INT 3
64770: PLUS
64771: PUSH
64772: LD_INT 5
64774: PUSH
64775: EMPTY
64776: LIST
64777: LIST
64778: LIST
64779: PUSH
64780: LD_VAR 0 1
64784: PUSH
64785: LD_VAR 0 2
64789: PUSH
64790: LD_INT 4
64792: PLUS
64793: PUSH
64794: LD_INT 0
64796: PUSH
64797: EMPTY
64798: LIST
64799: LIST
64800: LIST
64801: PUSH
64802: EMPTY
64803: LIST
64804: LIST
64805: LIST
64806: LIST
64807: LIST
64808: ST_TO_ADDR
// end ; 1 :
64809: GO 65509
64811: LD_INT 1
64813: DOUBLE
64814: EQUAL
64815: IFTRUE 64819
64817: GO 64952
64819: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
64820: LD_ADDR_VAR 0 5
64824: PUSH
64825: LD_VAR 0 1
64829: PUSH
64830: LD_VAR 0 2
64834: PUSH
64835: LD_INT 4
64837: MINUS
64838: PUSH
64839: LD_INT 3
64841: PUSH
64842: EMPTY
64843: LIST
64844: LIST
64845: LIST
64846: PUSH
64847: LD_VAR 0 1
64851: PUSH
64852: LD_INT 3
64854: MINUS
64855: PUSH
64856: LD_VAR 0 2
64860: PUSH
64861: LD_INT 3
64863: MINUS
64864: PUSH
64865: LD_INT 2
64867: PUSH
64868: EMPTY
64869: LIST
64870: LIST
64871: LIST
64872: PUSH
64873: LD_VAR 0 1
64877: PUSH
64878: LD_INT 4
64880: MINUS
64881: PUSH
64882: LD_VAR 0 2
64886: PUSH
64887: LD_INT 1
64889: PUSH
64890: EMPTY
64891: LIST
64892: LIST
64893: LIST
64894: PUSH
64895: LD_VAR 0 1
64899: PUSH
64900: LD_VAR 0 2
64904: PUSH
64905: LD_INT 3
64907: PLUS
64908: PUSH
64909: LD_INT 0
64911: PUSH
64912: EMPTY
64913: LIST
64914: LIST
64915: LIST
64916: PUSH
64917: LD_VAR 0 1
64921: PUSH
64922: LD_INT 4
64924: PLUS
64925: PUSH
64926: LD_VAR 0 2
64930: PUSH
64931: LD_INT 4
64933: PLUS
64934: PUSH
64935: LD_INT 5
64937: PUSH
64938: EMPTY
64939: LIST
64940: LIST
64941: LIST
64942: PUSH
64943: EMPTY
64944: LIST
64945: LIST
64946: LIST
64947: LIST
64948: LIST
64949: ST_TO_ADDR
// end ; 2 :
64950: GO 65509
64952: LD_INT 2
64954: DOUBLE
64955: EQUAL
64956: IFTRUE 64960
64958: GO 65089
64960: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
64961: LD_ADDR_VAR 0 5
64965: PUSH
64966: LD_VAR 0 1
64970: PUSH
64971: LD_VAR 0 2
64975: PUSH
64976: LD_INT 3
64978: MINUS
64979: PUSH
64980: LD_INT 3
64982: PUSH
64983: EMPTY
64984: LIST
64985: LIST
64986: LIST
64987: PUSH
64988: LD_VAR 0 1
64992: PUSH
64993: LD_INT 4
64995: PLUS
64996: PUSH
64997: LD_VAR 0 2
65001: PUSH
65002: LD_INT 4
65004: PUSH
65005: EMPTY
65006: LIST
65007: LIST
65008: LIST
65009: PUSH
65010: LD_VAR 0 1
65014: PUSH
65015: LD_VAR 0 2
65019: PUSH
65020: LD_INT 4
65022: PLUS
65023: PUSH
65024: LD_INT 0
65026: PUSH
65027: EMPTY
65028: LIST
65029: LIST
65030: LIST
65031: PUSH
65032: LD_VAR 0 1
65036: PUSH
65037: LD_INT 3
65039: MINUS
65040: PUSH
65041: LD_VAR 0 2
65045: PUSH
65046: LD_INT 1
65048: PUSH
65049: EMPTY
65050: LIST
65051: LIST
65052: LIST
65053: PUSH
65054: LD_VAR 0 1
65058: PUSH
65059: LD_INT 4
65061: MINUS
65062: PUSH
65063: LD_VAR 0 2
65067: PUSH
65068: LD_INT 4
65070: MINUS
65071: PUSH
65072: LD_INT 2
65074: PUSH
65075: EMPTY
65076: LIST
65077: LIST
65078: LIST
65079: PUSH
65080: EMPTY
65081: LIST
65082: LIST
65083: LIST
65084: LIST
65085: LIST
65086: ST_TO_ADDR
// end ; 3 :
65087: GO 65509
65089: LD_INT 3
65091: DOUBLE
65092: EQUAL
65093: IFTRUE 65097
65095: GO 65230
65097: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
65098: LD_ADDR_VAR 0 5
65102: PUSH
65103: LD_VAR 0 1
65107: PUSH
65108: LD_INT 3
65110: PLUS
65111: PUSH
65112: LD_VAR 0 2
65116: PUSH
65117: LD_INT 4
65119: PUSH
65120: EMPTY
65121: LIST
65122: LIST
65123: LIST
65124: PUSH
65125: LD_VAR 0 1
65129: PUSH
65130: LD_INT 4
65132: PLUS
65133: PUSH
65134: LD_VAR 0 2
65138: PUSH
65139: LD_INT 4
65141: PLUS
65142: PUSH
65143: LD_INT 5
65145: PUSH
65146: EMPTY
65147: LIST
65148: LIST
65149: LIST
65150: PUSH
65151: LD_VAR 0 1
65155: PUSH
65156: LD_INT 4
65158: MINUS
65159: PUSH
65160: LD_VAR 0 2
65164: PUSH
65165: LD_INT 1
65167: PUSH
65168: EMPTY
65169: LIST
65170: LIST
65171: LIST
65172: PUSH
65173: LD_VAR 0 1
65177: PUSH
65178: LD_VAR 0 2
65182: PUSH
65183: LD_INT 4
65185: MINUS
65186: PUSH
65187: LD_INT 3
65189: PUSH
65190: EMPTY
65191: LIST
65192: LIST
65193: LIST
65194: PUSH
65195: LD_VAR 0 1
65199: PUSH
65200: LD_INT 3
65202: MINUS
65203: PUSH
65204: LD_VAR 0 2
65208: PUSH
65209: LD_INT 3
65211: MINUS
65212: PUSH
65213: LD_INT 2
65215: PUSH
65216: EMPTY
65217: LIST
65218: LIST
65219: LIST
65220: PUSH
65221: EMPTY
65222: LIST
65223: LIST
65224: LIST
65225: LIST
65226: LIST
65227: ST_TO_ADDR
// end ; 4 :
65228: GO 65509
65230: LD_INT 4
65232: DOUBLE
65233: EQUAL
65234: IFTRUE 65238
65236: GO 65371
65238: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
65239: LD_ADDR_VAR 0 5
65243: PUSH
65244: LD_VAR 0 1
65248: PUSH
65249: LD_VAR 0 2
65253: PUSH
65254: LD_INT 4
65256: PLUS
65257: PUSH
65258: LD_INT 0
65260: PUSH
65261: EMPTY
65262: LIST
65263: LIST
65264: LIST
65265: PUSH
65266: LD_VAR 0 1
65270: PUSH
65271: LD_INT 3
65273: PLUS
65274: PUSH
65275: LD_VAR 0 2
65279: PUSH
65280: LD_INT 3
65282: PLUS
65283: PUSH
65284: LD_INT 5
65286: PUSH
65287: EMPTY
65288: LIST
65289: LIST
65290: LIST
65291: PUSH
65292: LD_VAR 0 1
65296: PUSH
65297: LD_INT 4
65299: PLUS
65300: PUSH
65301: LD_VAR 0 2
65305: PUSH
65306: LD_INT 4
65308: PUSH
65309: EMPTY
65310: LIST
65311: LIST
65312: LIST
65313: PUSH
65314: LD_VAR 0 1
65318: PUSH
65319: LD_VAR 0 2
65323: PUSH
65324: LD_INT 3
65326: MINUS
65327: PUSH
65328: LD_INT 3
65330: PUSH
65331: EMPTY
65332: LIST
65333: LIST
65334: LIST
65335: PUSH
65336: LD_VAR 0 1
65340: PUSH
65341: LD_INT 4
65343: MINUS
65344: PUSH
65345: LD_VAR 0 2
65349: PUSH
65350: LD_INT 4
65352: MINUS
65353: PUSH
65354: LD_INT 2
65356: PUSH
65357: EMPTY
65358: LIST
65359: LIST
65360: LIST
65361: PUSH
65362: EMPTY
65363: LIST
65364: LIST
65365: LIST
65366: LIST
65367: LIST
65368: ST_TO_ADDR
// end ; 5 :
65369: GO 65509
65371: LD_INT 5
65373: DOUBLE
65374: EQUAL
65375: IFTRUE 65379
65377: GO 65508
65379: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
65380: LD_ADDR_VAR 0 5
65384: PUSH
65385: LD_VAR 0 1
65389: PUSH
65390: LD_INT 4
65392: MINUS
65393: PUSH
65394: LD_VAR 0 2
65398: PUSH
65399: LD_INT 1
65401: PUSH
65402: EMPTY
65403: LIST
65404: LIST
65405: LIST
65406: PUSH
65407: LD_VAR 0 1
65411: PUSH
65412: LD_VAR 0 2
65416: PUSH
65417: LD_INT 4
65419: MINUS
65420: PUSH
65421: LD_INT 3
65423: PUSH
65424: EMPTY
65425: LIST
65426: LIST
65427: LIST
65428: PUSH
65429: LD_VAR 0 1
65433: PUSH
65434: LD_INT 4
65436: PLUS
65437: PUSH
65438: LD_VAR 0 2
65442: PUSH
65443: LD_INT 4
65445: PLUS
65446: PUSH
65447: LD_INT 5
65449: PUSH
65450: EMPTY
65451: LIST
65452: LIST
65453: LIST
65454: PUSH
65455: LD_VAR 0 1
65459: PUSH
65460: LD_INT 3
65462: PLUS
65463: PUSH
65464: LD_VAR 0 2
65468: PUSH
65469: LD_INT 4
65471: PUSH
65472: EMPTY
65473: LIST
65474: LIST
65475: LIST
65476: PUSH
65477: LD_VAR 0 1
65481: PUSH
65482: LD_VAR 0 2
65486: PUSH
65487: LD_INT 3
65489: PLUS
65490: PUSH
65491: LD_INT 0
65493: PUSH
65494: EMPTY
65495: LIST
65496: LIST
65497: LIST
65498: PUSH
65499: EMPTY
65500: LIST
65501: LIST
65502: LIST
65503: LIST
65504: LIST
65505: ST_TO_ADDR
// end ; end ;
65506: GO 65509
65508: POP
// result := list ;
65509: LD_ADDR_VAR 0 4
65513: PUSH
65514: LD_VAR 0 5
65518: ST_TO_ADDR
// end ;
65519: LD_VAR 0 4
65523: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
65524: LD_INT 0
65526: PPUSH
65527: PPUSH
65528: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
65529: LD_VAR 0 1
65533: NOT
65534: PUSH
65535: LD_VAR 0 2
65539: PUSH
65540: LD_INT 1
65542: PUSH
65543: LD_INT 2
65545: PUSH
65546: LD_INT 3
65548: PUSH
65549: LD_INT 4
65551: PUSH
65552: EMPTY
65553: LIST
65554: LIST
65555: LIST
65556: LIST
65557: IN
65558: NOT
65559: OR
65560: IFFALSE 65564
// exit ;
65562: GO 65647
// tmp := [ ] ;
65564: LD_ADDR_VAR 0 5
65568: PUSH
65569: EMPTY
65570: ST_TO_ADDR
// for i in units do
65571: LD_ADDR_VAR 0 4
65575: PUSH
65576: LD_VAR 0 1
65580: PUSH
65581: FOR_IN
65582: IFFALSE 65616
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
65584: LD_ADDR_VAR 0 5
65588: PUSH
65589: LD_VAR 0 5
65593: PPUSH
65594: LD_VAR 0 4
65598: PPUSH
65599: LD_VAR 0 2
65603: PPUSH
65604: CALL_OW 259
65608: PPUSH
65609: CALL 67020 0 2
65613: ST_TO_ADDR
65614: GO 65581
65616: POP
65617: POP
// if not tmp then
65618: LD_VAR 0 5
65622: NOT
65623: IFFALSE 65627
// exit ;
65625: GO 65647
// result := SortListByListDesc ( units , tmp ) ;
65627: LD_ADDR_VAR 0 3
65631: PUSH
65632: LD_VAR 0 1
65636: PPUSH
65637: LD_VAR 0 5
65641: PPUSH
65642: CALL_OW 77
65646: ST_TO_ADDR
// end ;
65647: LD_VAR 0 3
65651: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
65652: LD_INT 0
65654: PPUSH
65655: PPUSH
65656: PPUSH
// result := false ;
65657: LD_ADDR_VAR 0 3
65661: PUSH
65662: LD_INT 0
65664: ST_TO_ADDR
// if not building then
65665: LD_VAR 0 2
65669: NOT
65670: IFFALSE 65674
// exit ;
65672: GO 65812
// x := GetX ( building ) ;
65674: LD_ADDR_VAR 0 4
65678: PUSH
65679: LD_VAR 0 2
65683: PPUSH
65684: CALL_OW 250
65688: ST_TO_ADDR
// y := GetY ( building ) ;
65689: LD_ADDR_VAR 0 5
65693: PUSH
65694: LD_VAR 0 2
65698: PPUSH
65699: CALL_OW 251
65703: ST_TO_ADDR
// if not x or not y then
65704: LD_VAR 0 4
65708: NOT
65709: PUSH
65710: LD_VAR 0 5
65714: NOT
65715: OR
65716: IFFALSE 65720
// exit ;
65718: GO 65812
// if GetTaskList ( unit ) then
65720: LD_VAR 0 1
65724: PPUSH
65725: CALL_OW 437
65729: IFFALSE 65812
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
65731: LD_STRING e
65733: PUSH
65734: LD_VAR 0 1
65738: PPUSH
65739: CALL_OW 437
65743: PUSH
65744: LD_INT 1
65746: ARRAY
65747: PUSH
65748: LD_INT 1
65750: ARRAY
65751: EQUAL
65752: PUSH
65753: LD_VAR 0 4
65757: PUSH
65758: LD_VAR 0 1
65762: PPUSH
65763: CALL_OW 437
65767: PUSH
65768: LD_INT 1
65770: ARRAY
65771: PUSH
65772: LD_INT 2
65774: ARRAY
65775: EQUAL
65776: AND
65777: PUSH
65778: LD_VAR 0 5
65782: PUSH
65783: LD_VAR 0 1
65787: PPUSH
65788: CALL_OW 437
65792: PUSH
65793: LD_INT 1
65795: ARRAY
65796: PUSH
65797: LD_INT 3
65799: ARRAY
65800: EQUAL
65801: AND
65802: IFFALSE 65812
// result := true end ;
65804: LD_ADDR_VAR 0 3
65808: PUSH
65809: LD_INT 1
65811: ST_TO_ADDR
// end ;
65812: LD_VAR 0 3
65816: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
65817: LD_INT 0
65819: PPUSH
// result := false ;
65820: LD_ADDR_VAR 0 4
65824: PUSH
65825: LD_INT 0
65827: ST_TO_ADDR
// if GetTaskList ( unit ) then
65828: LD_VAR 0 1
65832: PPUSH
65833: CALL_OW 437
65837: IFFALSE 65920
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
65839: LD_STRING M
65841: PUSH
65842: LD_VAR 0 1
65846: PPUSH
65847: CALL_OW 437
65851: PUSH
65852: LD_INT 1
65854: ARRAY
65855: PUSH
65856: LD_INT 1
65858: ARRAY
65859: EQUAL
65860: PUSH
65861: LD_VAR 0 2
65865: PUSH
65866: LD_VAR 0 1
65870: PPUSH
65871: CALL_OW 437
65875: PUSH
65876: LD_INT 1
65878: ARRAY
65879: PUSH
65880: LD_INT 2
65882: ARRAY
65883: EQUAL
65884: AND
65885: PUSH
65886: LD_VAR 0 3
65890: PUSH
65891: LD_VAR 0 1
65895: PPUSH
65896: CALL_OW 437
65900: PUSH
65901: LD_INT 1
65903: ARRAY
65904: PUSH
65905: LD_INT 3
65907: ARRAY
65908: EQUAL
65909: AND
65910: IFFALSE 65920
// result := true ;
65912: LD_ADDR_VAR 0 4
65916: PUSH
65917: LD_INT 1
65919: ST_TO_ADDR
// end ; end ;
65920: LD_VAR 0 4
65924: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
65925: LD_INT 0
65927: PPUSH
65928: PPUSH
65929: PPUSH
65930: PPUSH
// if not unit or not area then
65931: LD_VAR 0 1
65935: NOT
65936: PUSH
65937: LD_VAR 0 2
65941: NOT
65942: OR
65943: IFFALSE 65947
// exit ;
65945: GO 66123
// tmp := AreaToList ( area , i ) ;
65947: LD_ADDR_VAR 0 6
65951: PUSH
65952: LD_VAR 0 2
65956: PPUSH
65957: LD_VAR 0 5
65961: PPUSH
65962: CALL_OW 517
65966: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
65967: LD_ADDR_VAR 0 5
65971: PUSH
65972: DOUBLE
65973: LD_INT 1
65975: DEC
65976: ST_TO_ADDR
65977: LD_VAR 0 6
65981: PUSH
65982: LD_INT 1
65984: ARRAY
65985: PUSH
65986: FOR_TO
65987: IFFALSE 66121
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
65989: LD_ADDR_VAR 0 7
65993: PUSH
65994: LD_VAR 0 6
65998: PUSH
65999: LD_INT 1
66001: ARRAY
66002: PUSH
66003: LD_VAR 0 5
66007: ARRAY
66008: PUSH
66009: LD_VAR 0 6
66013: PUSH
66014: LD_INT 2
66016: ARRAY
66017: PUSH
66018: LD_VAR 0 5
66022: ARRAY
66023: PUSH
66024: EMPTY
66025: LIST
66026: LIST
66027: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
66028: LD_INT 92
66030: PUSH
66031: LD_VAR 0 7
66035: PUSH
66036: LD_INT 1
66038: ARRAY
66039: PUSH
66040: LD_VAR 0 7
66044: PUSH
66045: LD_INT 2
66047: ARRAY
66048: PUSH
66049: LD_INT 2
66051: PUSH
66052: EMPTY
66053: LIST
66054: LIST
66055: LIST
66056: LIST
66057: PPUSH
66058: CALL_OW 69
66062: PUSH
66063: LD_INT 0
66065: EQUAL
66066: IFFALSE 66119
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
66068: LD_VAR 0 1
66072: PPUSH
66073: LD_VAR 0 7
66077: PUSH
66078: LD_INT 1
66080: ARRAY
66081: PPUSH
66082: LD_VAR 0 7
66086: PUSH
66087: LD_INT 2
66089: ARRAY
66090: PPUSH
66091: LD_VAR 0 3
66095: PPUSH
66096: CALL_OW 48
// result := IsPlaced ( unit ) ;
66100: LD_ADDR_VAR 0 4
66104: PUSH
66105: LD_VAR 0 1
66109: PPUSH
66110: CALL_OW 305
66114: ST_TO_ADDR
// exit ;
66115: POP
66116: POP
66117: GO 66123
// end ; end ;
66119: GO 65986
66121: POP
66122: POP
// end ;
66123: LD_VAR 0 4
66127: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
66128: LD_INT 0
66130: PPUSH
66131: PPUSH
66132: PPUSH
// if not side or side > 8 then
66133: LD_VAR 0 1
66137: NOT
66138: PUSH
66139: LD_VAR 0 1
66143: PUSH
66144: LD_INT 8
66146: GREATER
66147: OR
66148: IFFALSE 66152
// exit ;
66150: GO 66339
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
66152: LD_ADDR_VAR 0 4
66156: PUSH
66157: LD_INT 22
66159: PUSH
66160: LD_VAR 0 1
66164: PUSH
66165: EMPTY
66166: LIST
66167: LIST
66168: PUSH
66169: LD_INT 21
66171: PUSH
66172: LD_INT 3
66174: PUSH
66175: EMPTY
66176: LIST
66177: LIST
66178: PUSH
66179: EMPTY
66180: LIST
66181: LIST
66182: PPUSH
66183: CALL_OW 69
66187: ST_TO_ADDR
// if not tmp then
66188: LD_VAR 0 4
66192: NOT
66193: IFFALSE 66197
// exit ;
66195: GO 66339
// enable_addtolog := true ;
66197: LD_ADDR_OWVAR 81
66201: PUSH
66202: LD_INT 1
66204: ST_TO_ADDR
// AddToLog ( [ ) ;
66205: LD_STRING [
66207: PPUSH
66208: CALL_OW 561
// for i in tmp do
66212: LD_ADDR_VAR 0 3
66216: PUSH
66217: LD_VAR 0 4
66221: PUSH
66222: FOR_IN
66223: IFFALSE 66330
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
66225: LD_STRING [
66227: PUSH
66228: LD_VAR 0 3
66232: PPUSH
66233: CALL_OW 266
66237: STR
66238: PUSH
66239: LD_STRING , 
66241: STR
66242: PUSH
66243: LD_VAR 0 3
66247: PPUSH
66248: CALL_OW 250
66252: STR
66253: PUSH
66254: LD_STRING , 
66256: STR
66257: PUSH
66258: LD_VAR 0 3
66262: PPUSH
66263: CALL_OW 251
66267: STR
66268: PUSH
66269: LD_STRING , 
66271: STR
66272: PUSH
66273: LD_VAR 0 3
66277: PPUSH
66278: CALL_OW 254
66282: STR
66283: PUSH
66284: LD_STRING , 
66286: STR
66287: PUSH
66288: LD_VAR 0 3
66292: PPUSH
66293: LD_INT 1
66295: PPUSH
66296: CALL_OW 268
66300: STR
66301: PUSH
66302: LD_STRING , 
66304: STR
66305: PUSH
66306: LD_VAR 0 3
66310: PPUSH
66311: LD_INT 2
66313: PPUSH
66314: CALL_OW 268
66318: STR
66319: PUSH
66320: LD_STRING ],
66322: STR
66323: PPUSH
66324: CALL_OW 561
// end ;
66328: GO 66222
66330: POP
66331: POP
// AddToLog ( ]; ) ;
66332: LD_STRING ];
66334: PPUSH
66335: CALL_OW 561
// end ;
66339: LD_VAR 0 2
66343: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
66344: LD_INT 0
66346: PPUSH
66347: PPUSH
66348: PPUSH
66349: PPUSH
66350: PPUSH
// if not area or not rate or not max then
66351: LD_VAR 0 1
66355: NOT
66356: PUSH
66357: LD_VAR 0 2
66361: NOT
66362: OR
66363: PUSH
66364: LD_VAR 0 4
66368: NOT
66369: OR
66370: IFFALSE 66374
// exit ;
66372: GO 66563
// while 1 do
66374: LD_INT 1
66376: IFFALSE 66563
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
66378: LD_ADDR_VAR 0 9
66382: PUSH
66383: LD_VAR 0 1
66387: PPUSH
66388: LD_INT 1
66390: PPUSH
66391: CALL_OW 287
66395: PUSH
66396: LD_INT 10
66398: MUL
66399: ST_TO_ADDR
// r := rate / 10 ;
66400: LD_ADDR_VAR 0 7
66404: PUSH
66405: LD_VAR 0 2
66409: PUSH
66410: LD_INT 10
66412: DIVREAL
66413: ST_TO_ADDR
// time := 1 1$00 ;
66414: LD_ADDR_VAR 0 8
66418: PUSH
66419: LD_INT 2100
66421: ST_TO_ADDR
// if amount < min then
66422: LD_VAR 0 9
66426: PUSH
66427: LD_VAR 0 3
66431: LESS
66432: IFFALSE 66450
// r := r * 2 else
66434: LD_ADDR_VAR 0 7
66438: PUSH
66439: LD_VAR 0 7
66443: PUSH
66444: LD_INT 2
66446: MUL
66447: ST_TO_ADDR
66448: GO 66476
// if amount > max then
66450: LD_VAR 0 9
66454: PUSH
66455: LD_VAR 0 4
66459: GREATER
66460: IFFALSE 66476
// r := r / 2 ;
66462: LD_ADDR_VAR 0 7
66466: PUSH
66467: LD_VAR 0 7
66471: PUSH
66472: LD_INT 2
66474: DIVREAL
66475: ST_TO_ADDR
// time := time / r ;
66476: LD_ADDR_VAR 0 8
66480: PUSH
66481: LD_VAR 0 8
66485: PUSH
66486: LD_VAR 0 7
66490: DIVREAL
66491: ST_TO_ADDR
// if time < 0 then
66492: LD_VAR 0 8
66496: PUSH
66497: LD_INT 0
66499: LESS
66500: IFFALSE 66517
// time := time * - 1 ;
66502: LD_ADDR_VAR 0 8
66506: PUSH
66507: LD_VAR 0 8
66511: PUSH
66512: LD_INT 1
66514: NEG
66515: MUL
66516: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
66517: LD_VAR 0 8
66521: PUSH
66522: LD_INT 35
66524: PPUSH
66525: LD_INT 875
66527: PPUSH
66528: CALL_OW 12
66532: PLUS
66533: PPUSH
66534: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
66538: LD_INT 1
66540: PPUSH
66541: LD_INT 5
66543: PPUSH
66544: CALL_OW 12
66548: PPUSH
66549: LD_VAR 0 1
66553: PPUSH
66554: LD_INT 1
66556: PPUSH
66557: CALL_OW 55
// end ;
66561: GO 66374
// end ;
66563: LD_VAR 0 5
66567: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
66568: LD_INT 0
66570: PPUSH
66571: PPUSH
66572: PPUSH
66573: PPUSH
66574: PPUSH
66575: PPUSH
66576: PPUSH
66577: PPUSH
// if not turrets or not factories then
66578: LD_VAR 0 1
66582: NOT
66583: PUSH
66584: LD_VAR 0 2
66588: NOT
66589: OR
66590: IFFALSE 66594
// exit ;
66592: GO 66901
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
66594: LD_ADDR_VAR 0 10
66598: PUSH
66599: LD_INT 5
66601: PUSH
66602: LD_INT 6
66604: PUSH
66605: EMPTY
66606: LIST
66607: LIST
66608: PUSH
66609: LD_INT 2
66611: PUSH
66612: LD_INT 4
66614: PUSH
66615: EMPTY
66616: LIST
66617: LIST
66618: PUSH
66619: LD_INT 3
66621: PUSH
66622: LD_INT 5
66624: PUSH
66625: EMPTY
66626: LIST
66627: LIST
66628: PUSH
66629: EMPTY
66630: LIST
66631: LIST
66632: LIST
66633: PUSH
66634: LD_INT 24
66636: PUSH
66637: LD_INT 25
66639: PUSH
66640: EMPTY
66641: LIST
66642: LIST
66643: PUSH
66644: LD_INT 23
66646: PUSH
66647: LD_INT 27
66649: PUSH
66650: EMPTY
66651: LIST
66652: LIST
66653: PUSH
66654: EMPTY
66655: LIST
66656: LIST
66657: PUSH
66658: LD_INT 42
66660: PUSH
66661: LD_INT 43
66663: PUSH
66664: EMPTY
66665: LIST
66666: LIST
66667: PUSH
66668: LD_INT 44
66670: PUSH
66671: LD_INT 46
66673: PUSH
66674: EMPTY
66675: LIST
66676: LIST
66677: PUSH
66678: LD_INT 45
66680: PUSH
66681: LD_INT 47
66683: PUSH
66684: EMPTY
66685: LIST
66686: LIST
66687: PUSH
66688: EMPTY
66689: LIST
66690: LIST
66691: LIST
66692: PUSH
66693: EMPTY
66694: LIST
66695: LIST
66696: LIST
66697: ST_TO_ADDR
// result := [ ] ;
66698: LD_ADDR_VAR 0 3
66702: PUSH
66703: EMPTY
66704: ST_TO_ADDR
// for i in turrets do
66705: LD_ADDR_VAR 0 4
66709: PUSH
66710: LD_VAR 0 1
66714: PUSH
66715: FOR_IN
66716: IFFALSE 66899
// begin nat := GetNation ( i ) ;
66718: LD_ADDR_VAR 0 7
66722: PUSH
66723: LD_VAR 0 4
66727: PPUSH
66728: CALL_OW 248
66732: ST_TO_ADDR
// weapon := 0 ;
66733: LD_ADDR_VAR 0 8
66737: PUSH
66738: LD_INT 0
66740: ST_TO_ADDR
// if not nat then
66741: LD_VAR 0 7
66745: NOT
66746: IFFALSE 66750
// continue ;
66748: GO 66715
// for j in list [ nat ] do
66750: LD_ADDR_VAR 0 5
66754: PUSH
66755: LD_VAR 0 10
66759: PUSH
66760: LD_VAR 0 7
66764: ARRAY
66765: PUSH
66766: FOR_IN
66767: IFFALSE 66808
// if GetBWeapon ( i ) = j [ 1 ] then
66769: LD_VAR 0 4
66773: PPUSH
66774: CALL_OW 269
66778: PUSH
66779: LD_VAR 0 5
66783: PUSH
66784: LD_INT 1
66786: ARRAY
66787: EQUAL
66788: IFFALSE 66806
// begin weapon := j [ 2 ] ;
66790: LD_ADDR_VAR 0 8
66794: PUSH
66795: LD_VAR 0 5
66799: PUSH
66800: LD_INT 2
66802: ARRAY
66803: ST_TO_ADDR
// break ;
66804: GO 66808
// end ;
66806: GO 66766
66808: POP
66809: POP
// if not weapon then
66810: LD_VAR 0 8
66814: NOT
66815: IFFALSE 66819
// continue ;
66817: GO 66715
// for k in factories do
66819: LD_ADDR_VAR 0 6
66823: PUSH
66824: LD_VAR 0 2
66828: PUSH
66829: FOR_IN
66830: IFFALSE 66895
// begin weapons := AvailableWeaponList ( k ) ;
66832: LD_ADDR_VAR 0 9
66836: PUSH
66837: LD_VAR 0 6
66841: PPUSH
66842: CALL_OW 478
66846: ST_TO_ADDR
// if not weapons then
66847: LD_VAR 0 9
66851: NOT
66852: IFFALSE 66856
// continue ;
66854: GO 66829
// if weapon in weapons then
66856: LD_VAR 0 8
66860: PUSH
66861: LD_VAR 0 9
66865: IN
66866: IFFALSE 66893
// begin result := [ i , weapon ] ;
66868: LD_ADDR_VAR 0 3
66872: PUSH
66873: LD_VAR 0 4
66877: PUSH
66878: LD_VAR 0 8
66882: PUSH
66883: EMPTY
66884: LIST
66885: LIST
66886: ST_TO_ADDR
// exit ;
66887: POP
66888: POP
66889: POP
66890: POP
66891: GO 66901
// end ; end ;
66893: GO 66829
66895: POP
66896: POP
// end ;
66897: GO 66715
66899: POP
66900: POP
// end ;
66901: LD_VAR 0 3
66905: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
66906: LD_INT 0
66908: PPUSH
// if not side or side > 8 then
66909: LD_VAR 0 3
66913: NOT
66914: PUSH
66915: LD_VAR 0 3
66919: PUSH
66920: LD_INT 8
66922: GREATER
66923: OR
66924: IFFALSE 66928
// exit ;
66926: GO 66987
// if not range then
66928: LD_VAR 0 4
66932: NOT
66933: IFFALSE 66944
// range := - 12 ;
66935: LD_ADDR_VAR 0 4
66939: PUSH
66940: LD_INT 12
66942: NEG
66943: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
66944: LD_VAR 0 1
66948: PPUSH
66949: LD_VAR 0 2
66953: PPUSH
66954: LD_VAR 0 3
66958: PPUSH
66959: LD_VAR 0 4
66963: PPUSH
66964: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
66968: LD_VAR 0 1
66972: PPUSH
66973: LD_VAR 0 2
66977: PPUSH
66978: LD_VAR 0 3
66982: PPUSH
66983: CALL_OW 331
// end ;
66987: LD_VAR 0 5
66991: RET
// export function Video ( mode ) ; begin
66992: LD_INT 0
66994: PPUSH
// ingame_video = mode ;
66995: LD_ADDR_OWVAR 52
66999: PUSH
67000: LD_VAR 0 1
67004: ST_TO_ADDR
// interface_hidden = mode ;
67005: LD_ADDR_OWVAR 54
67009: PUSH
67010: LD_VAR 0 1
67014: ST_TO_ADDR
// end ;
67015: LD_VAR 0 2
67019: RET
// export function Join ( array , element ) ; begin
67020: LD_INT 0
67022: PPUSH
// result := Replace ( array , array + 1 , element ) ;
67023: LD_ADDR_VAR 0 3
67027: PUSH
67028: LD_VAR 0 1
67032: PPUSH
67033: LD_VAR 0 1
67037: PUSH
67038: LD_INT 1
67040: PLUS
67041: PPUSH
67042: LD_VAR 0 2
67046: PPUSH
67047: CALL_OW 1
67051: ST_TO_ADDR
// end ;
67052: LD_VAR 0 3
67056: RET
// export function JoinUnion ( array , element ) ; begin
67057: LD_INT 0
67059: PPUSH
// result := array union element ;
67060: LD_ADDR_VAR 0 3
67064: PUSH
67065: LD_VAR 0 1
67069: PUSH
67070: LD_VAR 0 2
67074: UNION
67075: ST_TO_ADDR
// end ;
67076: LD_VAR 0 3
67080: RET
// export function GetBehemoths ( side ) ; begin
67081: LD_INT 0
67083: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
67084: LD_ADDR_VAR 0 2
67088: PUSH
67089: LD_INT 22
67091: PUSH
67092: LD_VAR 0 1
67096: PUSH
67097: EMPTY
67098: LIST
67099: LIST
67100: PUSH
67101: LD_INT 31
67103: PUSH
67104: LD_INT 25
67106: PUSH
67107: EMPTY
67108: LIST
67109: LIST
67110: PUSH
67111: EMPTY
67112: LIST
67113: LIST
67114: PPUSH
67115: CALL_OW 69
67119: ST_TO_ADDR
// end ;
67120: LD_VAR 0 2
67124: RET
// export function Shuffle ( array ) ; var i , index ; begin
67125: LD_INT 0
67127: PPUSH
67128: PPUSH
67129: PPUSH
// result := [ ] ;
67130: LD_ADDR_VAR 0 2
67134: PUSH
67135: EMPTY
67136: ST_TO_ADDR
// if not array then
67137: LD_VAR 0 1
67141: NOT
67142: IFFALSE 67146
// exit ;
67144: GO 67245
// Randomize ;
67146: CALL_OW 10
// for i = array downto 1 do
67150: LD_ADDR_VAR 0 3
67154: PUSH
67155: DOUBLE
67156: LD_VAR 0 1
67160: INC
67161: ST_TO_ADDR
67162: LD_INT 1
67164: PUSH
67165: FOR_DOWNTO
67166: IFFALSE 67243
// begin index := rand ( 1 , array ) ;
67168: LD_ADDR_VAR 0 4
67172: PUSH
67173: LD_INT 1
67175: PPUSH
67176: LD_VAR 0 1
67180: PPUSH
67181: CALL_OW 12
67185: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
67186: LD_ADDR_VAR 0 2
67190: PUSH
67191: LD_VAR 0 2
67195: PPUSH
67196: LD_VAR 0 2
67200: PUSH
67201: LD_INT 1
67203: PLUS
67204: PPUSH
67205: LD_VAR 0 1
67209: PUSH
67210: LD_VAR 0 4
67214: ARRAY
67215: PPUSH
67216: CALL_OW 2
67220: ST_TO_ADDR
// array := Delete ( array , index ) ;
67221: LD_ADDR_VAR 0 1
67225: PUSH
67226: LD_VAR 0 1
67230: PPUSH
67231: LD_VAR 0 4
67235: PPUSH
67236: CALL_OW 3
67240: ST_TO_ADDR
// end ;
67241: GO 67165
67243: POP
67244: POP
// end ;
67245: LD_VAR 0 2
67249: RET
// export function GetBaseMaterials ( base ) ; begin
67250: LD_INT 0
67252: PPUSH
// result := [ 0 , 0 , 0 ] ;
67253: LD_ADDR_VAR 0 2
67257: PUSH
67258: LD_INT 0
67260: PUSH
67261: LD_INT 0
67263: PUSH
67264: LD_INT 0
67266: PUSH
67267: EMPTY
67268: LIST
67269: LIST
67270: LIST
67271: ST_TO_ADDR
// if not base then
67272: LD_VAR 0 1
67276: NOT
67277: IFFALSE 67281
// exit ;
67279: GO 67330
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
67281: LD_ADDR_VAR 0 2
67285: PUSH
67286: LD_VAR 0 1
67290: PPUSH
67291: LD_INT 1
67293: PPUSH
67294: CALL_OW 275
67298: PUSH
67299: LD_VAR 0 1
67303: PPUSH
67304: LD_INT 2
67306: PPUSH
67307: CALL_OW 275
67311: PUSH
67312: LD_VAR 0 1
67316: PPUSH
67317: LD_INT 3
67319: PPUSH
67320: CALL_OW 275
67324: PUSH
67325: EMPTY
67326: LIST
67327: LIST
67328: LIST
67329: ST_TO_ADDR
// end ;
67330: LD_VAR 0 2
67334: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
67335: LD_INT 0
67337: PPUSH
67338: PPUSH
// result := array ;
67339: LD_ADDR_VAR 0 3
67343: PUSH
67344: LD_VAR 0 1
67348: ST_TO_ADDR
// if size >= result then
67349: LD_VAR 0 2
67353: PUSH
67354: LD_VAR 0 3
67358: GREATEREQUAL
67359: IFFALSE 67363
// exit ;
67361: GO 67413
// if size then
67363: LD_VAR 0 2
67367: IFFALSE 67413
// for i := array downto size do
67369: LD_ADDR_VAR 0 4
67373: PUSH
67374: DOUBLE
67375: LD_VAR 0 1
67379: INC
67380: ST_TO_ADDR
67381: LD_VAR 0 2
67385: PUSH
67386: FOR_DOWNTO
67387: IFFALSE 67411
// result := Delete ( result , result ) ;
67389: LD_ADDR_VAR 0 3
67393: PUSH
67394: LD_VAR 0 3
67398: PPUSH
67399: LD_VAR 0 3
67403: PPUSH
67404: CALL_OW 3
67408: ST_TO_ADDR
67409: GO 67386
67411: POP
67412: POP
// end ;
67413: LD_VAR 0 3
67417: RET
// export function ComExit ( unit ) ; var tmp ; begin
67418: LD_INT 0
67420: PPUSH
67421: PPUSH
// if not IsInUnit ( unit ) then
67422: LD_VAR 0 1
67426: PPUSH
67427: CALL_OW 310
67431: NOT
67432: IFFALSE 67436
// exit ;
67434: GO 67496
// tmp := IsInUnit ( unit ) ;
67436: LD_ADDR_VAR 0 3
67440: PUSH
67441: LD_VAR 0 1
67445: PPUSH
67446: CALL_OW 310
67450: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
67451: LD_VAR 0 3
67455: PPUSH
67456: CALL_OW 247
67460: PUSH
67461: LD_INT 2
67463: EQUAL
67464: IFFALSE 67477
// ComExitVehicle ( unit ) else
67466: LD_VAR 0 1
67470: PPUSH
67471: CALL_OW 121
67475: GO 67486
// ComExitBuilding ( unit ) ;
67477: LD_VAR 0 1
67481: PPUSH
67482: CALL_OW 122
// result := tmp ;
67486: LD_ADDR_VAR 0 2
67490: PUSH
67491: LD_VAR 0 3
67495: ST_TO_ADDR
// end ;
67496: LD_VAR 0 2
67500: RET
// export function ComExitAll ( units ) ; var i ; begin
67501: LD_INT 0
67503: PPUSH
67504: PPUSH
// if not units then
67505: LD_VAR 0 1
67509: NOT
67510: IFFALSE 67514
// exit ;
67512: GO 67540
// for i in units do
67514: LD_ADDR_VAR 0 3
67518: PUSH
67519: LD_VAR 0 1
67523: PUSH
67524: FOR_IN
67525: IFFALSE 67538
// ComExit ( i ) ;
67527: LD_VAR 0 3
67531: PPUSH
67532: CALL 67418 0 1
67536: GO 67524
67538: POP
67539: POP
// end ;
67540: LD_VAR 0 2
67544: RET
// export function ResetHc ; begin
67545: LD_INT 0
67547: PPUSH
// InitHc ;
67548: CALL_OW 19
// hc_importance := 0 ;
67552: LD_ADDR_OWVAR 32
67556: PUSH
67557: LD_INT 0
67559: ST_TO_ADDR
// end ;
67560: LD_VAR 0 1
67564: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
67565: LD_INT 0
67567: PPUSH
67568: PPUSH
67569: PPUSH
// _x := ( x1 + x2 ) div 2 ;
67570: LD_ADDR_VAR 0 6
67574: PUSH
67575: LD_VAR 0 1
67579: PUSH
67580: LD_VAR 0 3
67584: PLUS
67585: PUSH
67586: LD_INT 2
67588: DIV
67589: ST_TO_ADDR
// if _x < 0 then
67590: LD_VAR 0 6
67594: PUSH
67595: LD_INT 0
67597: LESS
67598: IFFALSE 67615
// _x := _x * - 1 ;
67600: LD_ADDR_VAR 0 6
67604: PUSH
67605: LD_VAR 0 6
67609: PUSH
67610: LD_INT 1
67612: NEG
67613: MUL
67614: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
67615: LD_ADDR_VAR 0 7
67619: PUSH
67620: LD_VAR 0 2
67624: PUSH
67625: LD_VAR 0 4
67629: PLUS
67630: PUSH
67631: LD_INT 2
67633: DIV
67634: ST_TO_ADDR
// if _y < 0 then
67635: LD_VAR 0 7
67639: PUSH
67640: LD_INT 0
67642: LESS
67643: IFFALSE 67660
// _y := _y * - 1 ;
67645: LD_ADDR_VAR 0 7
67649: PUSH
67650: LD_VAR 0 7
67654: PUSH
67655: LD_INT 1
67657: NEG
67658: MUL
67659: ST_TO_ADDR
// result := [ _x , _y ] ;
67660: LD_ADDR_VAR 0 5
67664: PUSH
67665: LD_VAR 0 6
67669: PUSH
67670: LD_VAR 0 7
67674: PUSH
67675: EMPTY
67676: LIST
67677: LIST
67678: ST_TO_ADDR
// end ;
67679: LD_VAR 0 5
67683: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
67684: LD_INT 0
67686: PPUSH
67687: PPUSH
67688: PPUSH
67689: PPUSH
// task := GetTaskList ( unit ) ;
67690: LD_ADDR_VAR 0 7
67694: PUSH
67695: LD_VAR 0 1
67699: PPUSH
67700: CALL_OW 437
67704: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
67705: LD_VAR 0 7
67709: NOT
67710: PUSH
67711: LD_VAR 0 1
67715: PPUSH
67716: LD_VAR 0 2
67720: PPUSH
67721: CALL_OW 308
67725: NOT
67726: AND
67727: IFFALSE 67731
// exit ;
67729: GO 67849
// if IsInArea ( unit , area ) then
67731: LD_VAR 0 1
67735: PPUSH
67736: LD_VAR 0 2
67740: PPUSH
67741: CALL_OW 308
67745: IFFALSE 67763
// begin ComMoveToArea ( unit , goAway ) ;
67747: LD_VAR 0 1
67751: PPUSH
67752: LD_VAR 0 3
67756: PPUSH
67757: CALL_OW 113
// exit ;
67761: GO 67849
// end ; if task [ 1 ] [ 1 ] <> M then
67763: LD_VAR 0 7
67767: PUSH
67768: LD_INT 1
67770: ARRAY
67771: PUSH
67772: LD_INT 1
67774: ARRAY
67775: PUSH
67776: LD_STRING M
67778: NONEQUAL
67779: IFFALSE 67783
// exit ;
67781: GO 67849
// x := task [ 1 ] [ 2 ] ;
67783: LD_ADDR_VAR 0 5
67787: PUSH
67788: LD_VAR 0 7
67792: PUSH
67793: LD_INT 1
67795: ARRAY
67796: PUSH
67797: LD_INT 2
67799: ARRAY
67800: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
67801: LD_ADDR_VAR 0 6
67805: PUSH
67806: LD_VAR 0 7
67810: PUSH
67811: LD_INT 1
67813: ARRAY
67814: PUSH
67815: LD_INT 3
67817: ARRAY
67818: ST_TO_ADDR
// if InArea ( x , y , area ) then
67819: LD_VAR 0 5
67823: PPUSH
67824: LD_VAR 0 6
67828: PPUSH
67829: LD_VAR 0 2
67833: PPUSH
67834: CALL_OW 309
67838: IFFALSE 67849
// ComStop ( unit ) ;
67840: LD_VAR 0 1
67844: PPUSH
67845: CALL_OW 141
// end ;
67849: LD_VAR 0 4
67853: RET
// export function Abs ( value ) ; begin
67854: LD_INT 0
67856: PPUSH
// result := value ;
67857: LD_ADDR_VAR 0 2
67861: PUSH
67862: LD_VAR 0 1
67866: ST_TO_ADDR
// if value < 0 then
67867: LD_VAR 0 1
67871: PUSH
67872: LD_INT 0
67874: LESS
67875: IFFALSE 67892
// result := value * - 1 ;
67877: LD_ADDR_VAR 0 2
67881: PUSH
67882: LD_VAR 0 1
67886: PUSH
67887: LD_INT 1
67889: NEG
67890: MUL
67891: ST_TO_ADDR
// end ;
67892: LD_VAR 0 2
67896: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
67897: LD_INT 0
67899: PPUSH
67900: PPUSH
67901: PPUSH
67902: PPUSH
67903: PPUSH
67904: PPUSH
67905: PPUSH
67906: PPUSH
// if not unit or not building then
67907: LD_VAR 0 1
67911: NOT
67912: PUSH
67913: LD_VAR 0 2
67917: NOT
67918: OR
67919: IFFALSE 67923
// exit ;
67921: GO 68149
// x := GetX ( building ) ;
67923: LD_ADDR_VAR 0 4
67927: PUSH
67928: LD_VAR 0 2
67932: PPUSH
67933: CALL_OW 250
67937: ST_TO_ADDR
// y := GetY ( building ) ;
67938: LD_ADDR_VAR 0 6
67942: PUSH
67943: LD_VAR 0 2
67947: PPUSH
67948: CALL_OW 251
67952: ST_TO_ADDR
// d := GetDir ( building ) ;
67953: LD_ADDR_VAR 0 8
67957: PUSH
67958: LD_VAR 0 2
67962: PPUSH
67963: CALL_OW 254
67967: ST_TO_ADDR
// r := 4 ;
67968: LD_ADDR_VAR 0 9
67972: PUSH
67973: LD_INT 4
67975: ST_TO_ADDR
// for i := 1 to 5 do
67976: LD_ADDR_VAR 0 10
67980: PUSH
67981: DOUBLE
67982: LD_INT 1
67984: DEC
67985: ST_TO_ADDR
67986: LD_INT 5
67988: PUSH
67989: FOR_TO
67990: IFFALSE 68147
// begin _x := ShiftX ( x , d , r + i ) ;
67992: LD_ADDR_VAR 0 5
67996: PUSH
67997: LD_VAR 0 4
68001: PPUSH
68002: LD_VAR 0 8
68006: PPUSH
68007: LD_VAR 0 9
68011: PUSH
68012: LD_VAR 0 10
68016: PLUS
68017: PPUSH
68018: CALL_OW 272
68022: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
68023: LD_ADDR_VAR 0 7
68027: PUSH
68028: LD_VAR 0 6
68032: PPUSH
68033: LD_VAR 0 8
68037: PPUSH
68038: LD_VAR 0 9
68042: PUSH
68043: LD_VAR 0 10
68047: PLUS
68048: PPUSH
68049: CALL_OW 273
68053: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
68054: LD_VAR 0 5
68058: PPUSH
68059: LD_VAR 0 7
68063: PPUSH
68064: CALL_OW 488
68068: PUSH
68069: LD_VAR 0 5
68073: PPUSH
68074: LD_VAR 0 7
68078: PPUSH
68079: CALL_OW 428
68083: PPUSH
68084: CALL_OW 247
68088: PUSH
68089: LD_INT 3
68091: PUSH
68092: LD_INT 2
68094: PUSH
68095: EMPTY
68096: LIST
68097: LIST
68098: IN
68099: NOT
68100: AND
68101: IFFALSE 68145
// begin ComMoveXY ( unit , _x , _y ) ;
68103: LD_VAR 0 1
68107: PPUSH
68108: LD_VAR 0 5
68112: PPUSH
68113: LD_VAR 0 7
68117: PPUSH
68118: CALL_OW 111
// result := [ _x , _y ] ;
68122: LD_ADDR_VAR 0 3
68126: PUSH
68127: LD_VAR 0 5
68131: PUSH
68132: LD_VAR 0 7
68136: PUSH
68137: EMPTY
68138: LIST
68139: LIST
68140: ST_TO_ADDR
// exit ;
68141: POP
68142: POP
68143: GO 68149
// end ; end ;
68145: GO 67989
68147: POP
68148: POP
// end ;
68149: LD_VAR 0 3
68153: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
68154: LD_INT 0
68156: PPUSH
68157: PPUSH
68158: PPUSH
// result := 0 ;
68159: LD_ADDR_VAR 0 3
68163: PUSH
68164: LD_INT 0
68166: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
68167: LD_VAR 0 1
68171: PUSH
68172: LD_INT 0
68174: LESS
68175: PUSH
68176: LD_VAR 0 1
68180: PUSH
68181: LD_INT 8
68183: GREATER
68184: OR
68185: PUSH
68186: LD_VAR 0 2
68190: PUSH
68191: LD_INT 0
68193: LESS
68194: OR
68195: PUSH
68196: LD_VAR 0 2
68200: PUSH
68201: LD_INT 8
68203: GREATER
68204: OR
68205: IFFALSE 68209
// exit ;
68207: GO 68284
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
68209: LD_ADDR_VAR 0 4
68213: PUSH
68214: LD_INT 22
68216: PUSH
68217: LD_VAR 0 2
68221: PUSH
68222: EMPTY
68223: LIST
68224: LIST
68225: PPUSH
68226: CALL_OW 69
68230: PUSH
68231: FOR_IN
68232: IFFALSE 68282
// begin un := UnitShoot ( i ) ;
68234: LD_ADDR_VAR 0 5
68238: PUSH
68239: LD_VAR 0 4
68243: PPUSH
68244: CALL_OW 504
68248: ST_TO_ADDR
// if GetSide ( un ) = side1 then
68249: LD_VAR 0 5
68253: PPUSH
68254: CALL_OW 255
68258: PUSH
68259: LD_VAR 0 1
68263: EQUAL
68264: IFFALSE 68280
// begin result := un ;
68266: LD_ADDR_VAR 0 3
68270: PUSH
68271: LD_VAR 0 5
68275: ST_TO_ADDR
// exit ;
68276: POP
68277: POP
68278: GO 68284
// end ; end ;
68280: GO 68231
68282: POP
68283: POP
// end ;
68284: LD_VAR 0 3
68288: RET
// export function GetCargoBay ( units ) ; begin
68289: LD_INT 0
68291: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
68292: LD_ADDR_VAR 0 2
68296: PUSH
68297: LD_VAR 0 1
68301: PPUSH
68302: LD_INT 2
68304: PUSH
68305: LD_INT 34
68307: PUSH
68308: LD_INT 12
68310: PUSH
68311: EMPTY
68312: LIST
68313: LIST
68314: PUSH
68315: LD_INT 34
68317: PUSH
68318: LD_INT 51
68320: PUSH
68321: EMPTY
68322: LIST
68323: LIST
68324: PUSH
68325: LD_INT 34
68327: PUSH
68328: LD_INT 32
68330: PUSH
68331: EMPTY
68332: LIST
68333: LIST
68334: PUSH
68335: LD_INT 34
68337: PUSH
68338: LD_INT 89
68340: PUSH
68341: EMPTY
68342: LIST
68343: LIST
68344: PUSH
68345: EMPTY
68346: LIST
68347: LIST
68348: LIST
68349: LIST
68350: LIST
68351: PPUSH
68352: CALL_OW 72
68356: ST_TO_ADDR
// end ;
68357: LD_VAR 0 2
68361: RET
// export function Negate ( value ) ; begin
68362: LD_INT 0
68364: PPUSH
// result := not value ;
68365: LD_ADDR_VAR 0 2
68369: PUSH
68370: LD_VAR 0 1
68374: NOT
68375: ST_TO_ADDR
// end ;
68376: LD_VAR 0 2
68380: RET
// export function Inc ( value ) ; begin
68381: LD_INT 0
68383: PPUSH
// result := value + 1 ;
68384: LD_ADDR_VAR 0 2
68388: PUSH
68389: LD_VAR 0 1
68393: PUSH
68394: LD_INT 1
68396: PLUS
68397: ST_TO_ADDR
// end ;
68398: LD_VAR 0 2
68402: RET
// export function Dec ( value ) ; begin
68403: LD_INT 0
68405: PPUSH
// result := value - 1 ;
68406: LD_ADDR_VAR 0 2
68410: PUSH
68411: LD_VAR 0 1
68415: PUSH
68416: LD_INT 1
68418: MINUS
68419: ST_TO_ADDR
// end ;
68420: LD_VAR 0 2
68424: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
68425: LD_INT 0
68427: PPUSH
68428: PPUSH
68429: PPUSH
68430: PPUSH
68431: PPUSH
68432: PPUSH
68433: PPUSH
68434: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
68435: LD_VAR 0 1
68439: PPUSH
68440: LD_VAR 0 2
68444: PPUSH
68445: CALL_OW 488
68449: NOT
68450: PUSH
68451: LD_VAR 0 3
68455: PPUSH
68456: LD_VAR 0 4
68460: PPUSH
68461: CALL_OW 488
68465: NOT
68466: OR
68467: IFFALSE 68480
// begin result := - 1 ;
68469: LD_ADDR_VAR 0 5
68473: PUSH
68474: LD_INT 1
68476: NEG
68477: ST_TO_ADDR
// exit ;
68478: GO 68715
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
68480: LD_ADDR_VAR 0 12
68484: PUSH
68485: LD_VAR 0 1
68489: PPUSH
68490: LD_VAR 0 2
68494: PPUSH
68495: LD_VAR 0 3
68499: PPUSH
68500: LD_VAR 0 4
68504: PPUSH
68505: CALL 67565 0 4
68509: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
68510: LD_ADDR_VAR 0 11
68514: PUSH
68515: LD_VAR 0 1
68519: PPUSH
68520: LD_VAR 0 2
68524: PPUSH
68525: LD_VAR 0 12
68529: PUSH
68530: LD_INT 1
68532: ARRAY
68533: PPUSH
68534: LD_VAR 0 12
68538: PUSH
68539: LD_INT 2
68541: ARRAY
68542: PPUSH
68543: CALL_OW 298
68547: ST_TO_ADDR
// distance := 9999 ;
68548: LD_ADDR_VAR 0 10
68552: PUSH
68553: LD_INT 9999
68555: ST_TO_ADDR
// for i := 0 to 5 do
68556: LD_ADDR_VAR 0 6
68560: PUSH
68561: DOUBLE
68562: LD_INT 0
68564: DEC
68565: ST_TO_ADDR
68566: LD_INT 5
68568: PUSH
68569: FOR_TO
68570: IFFALSE 68713
// begin _x := ShiftX ( x1 , i , centerDist ) ;
68572: LD_ADDR_VAR 0 7
68576: PUSH
68577: LD_VAR 0 1
68581: PPUSH
68582: LD_VAR 0 6
68586: PPUSH
68587: LD_VAR 0 11
68591: PPUSH
68592: CALL_OW 272
68596: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
68597: LD_ADDR_VAR 0 8
68601: PUSH
68602: LD_VAR 0 2
68606: PPUSH
68607: LD_VAR 0 6
68611: PPUSH
68612: LD_VAR 0 11
68616: PPUSH
68617: CALL_OW 273
68621: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
68622: LD_VAR 0 7
68626: PPUSH
68627: LD_VAR 0 8
68631: PPUSH
68632: CALL_OW 488
68636: NOT
68637: IFFALSE 68641
// continue ;
68639: GO 68569
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
68641: LD_ADDR_VAR 0 9
68645: PUSH
68646: LD_VAR 0 12
68650: PUSH
68651: LD_INT 1
68653: ARRAY
68654: PPUSH
68655: LD_VAR 0 12
68659: PUSH
68660: LD_INT 2
68662: ARRAY
68663: PPUSH
68664: LD_VAR 0 7
68668: PPUSH
68669: LD_VAR 0 8
68673: PPUSH
68674: CALL_OW 298
68678: ST_TO_ADDR
// if tmp < distance then
68679: LD_VAR 0 9
68683: PUSH
68684: LD_VAR 0 10
68688: LESS
68689: IFFALSE 68711
// begin result := i ;
68691: LD_ADDR_VAR 0 5
68695: PUSH
68696: LD_VAR 0 6
68700: ST_TO_ADDR
// distance := tmp ;
68701: LD_ADDR_VAR 0 10
68705: PUSH
68706: LD_VAR 0 9
68710: ST_TO_ADDR
// end ; end ;
68711: GO 68569
68713: POP
68714: POP
// end ;
68715: LD_VAR 0 5
68719: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
68720: LD_INT 0
68722: PPUSH
68723: PPUSH
// if not driver or not IsInUnit ( driver ) then
68724: LD_VAR 0 1
68728: NOT
68729: PUSH
68730: LD_VAR 0 1
68734: PPUSH
68735: CALL_OW 310
68739: NOT
68740: OR
68741: IFFALSE 68745
// exit ;
68743: GO 68835
// vehicle := IsInUnit ( driver ) ;
68745: LD_ADDR_VAR 0 3
68749: PUSH
68750: LD_VAR 0 1
68754: PPUSH
68755: CALL_OW 310
68759: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
68760: LD_VAR 0 1
68764: PPUSH
68765: LD_STRING \
68767: PUSH
68768: LD_INT 0
68770: PUSH
68771: LD_INT 0
68773: PUSH
68774: LD_INT 0
68776: PUSH
68777: LD_INT 0
68779: PUSH
68780: LD_INT 0
68782: PUSH
68783: LD_INT 0
68785: PUSH
68786: EMPTY
68787: LIST
68788: LIST
68789: LIST
68790: LIST
68791: LIST
68792: LIST
68793: LIST
68794: PUSH
68795: LD_STRING E
68797: PUSH
68798: LD_INT 0
68800: PUSH
68801: LD_INT 0
68803: PUSH
68804: LD_VAR 0 3
68808: PUSH
68809: LD_INT 0
68811: PUSH
68812: LD_INT 0
68814: PUSH
68815: LD_INT 0
68817: PUSH
68818: EMPTY
68819: LIST
68820: LIST
68821: LIST
68822: LIST
68823: LIST
68824: LIST
68825: LIST
68826: PUSH
68827: EMPTY
68828: LIST
68829: LIST
68830: PPUSH
68831: CALL_OW 446
// end ;
68835: LD_VAR 0 2
68839: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
68840: LD_INT 0
68842: PPUSH
68843: PPUSH
// if not driver or not IsInUnit ( driver ) then
68844: LD_VAR 0 1
68848: NOT
68849: PUSH
68850: LD_VAR 0 1
68854: PPUSH
68855: CALL_OW 310
68859: NOT
68860: OR
68861: IFFALSE 68865
// exit ;
68863: GO 68955
// vehicle := IsInUnit ( driver ) ;
68865: LD_ADDR_VAR 0 3
68869: PUSH
68870: LD_VAR 0 1
68874: PPUSH
68875: CALL_OW 310
68879: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
68880: LD_VAR 0 1
68884: PPUSH
68885: LD_STRING \
68887: PUSH
68888: LD_INT 0
68890: PUSH
68891: LD_INT 0
68893: PUSH
68894: LD_INT 0
68896: PUSH
68897: LD_INT 0
68899: PUSH
68900: LD_INT 0
68902: PUSH
68903: LD_INT 0
68905: PUSH
68906: EMPTY
68907: LIST
68908: LIST
68909: LIST
68910: LIST
68911: LIST
68912: LIST
68913: LIST
68914: PUSH
68915: LD_STRING E
68917: PUSH
68918: LD_INT 0
68920: PUSH
68921: LD_INT 0
68923: PUSH
68924: LD_VAR 0 3
68928: PUSH
68929: LD_INT 0
68931: PUSH
68932: LD_INT 0
68934: PUSH
68935: LD_INT 0
68937: PUSH
68938: EMPTY
68939: LIST
68940: LIST
68941: LIST
68942: LIST
68943: LIST
68944: LIST
68945: LIST
68946: PUSH
68947: EMPTY
68948: LIST
68949: LIST
68950: PPUSH
68951: CALL_OW 447
// end ;
68955: LD_VAR 0 2
68959: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
68960: LD_INT 0
68962: PPUSH
68963: PPUSH
68964: PPUSH
// tmp := [ ] ;
68965: LD_ADDR_VAR 0 5
68969: PUSH
68970: EMPTY
68971: ST_TO_ADDR
// for i in units do
68972: LD_ADDR_VAR 0 4
68976: PUSH
68977: LD_VAR 0 1
68981: PUSH
68982: FOR_IN
68983: IFFALSE 69021
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
68985: LD_ADDR_VAR 0 5
68989: PUSH
68990: LD_VAR 0 5
68994: PPUSH
68995: LD_VAR 0 5
68999: PUSH
69000: LD_INT 1
69002: PLUS
69003: PPUSH
69004: LD_VAR 0 4
69008: PPUSH
69009: CALL_OW 256
69013: PPUSH
69014: CALL_OW 2
69018: ST_TO_ADDR
69019: GO 68982
69021: POP
69022: POP
// if not tmp then
69023: LD_VAR 0 5
69027: NOT
69028: IFFALSE 69032
// exit ;
69030: GO 69080
// if asc then
69032: LD_VAR 0 2
69036: IFFALSE 69060
// result := SortListByListAsc ( units , tmp ) else
69038: LD_ADDR_VAR 0 3
69042: PUSH
69043: LD_VAR 0 1
69047: PPUSH
69048: LD_VAR 0 5
69052: PPUSH
69053: CALL_OW 76
69057: ST_TO_ADDR
69058: GO 69080
// result := SortListByListDesc ( units , tmp ) ;
69060: LD_ADDR_VAR 0 3
69064: PUSH
69065: LD_VAR 0 1
69069: PPUSH
69070: LD_VAR 0 5
69074: PPUSH
69075: CALL_OW 77
69079: ST_TO_ADDR
// end ;
69080: LD_VAR 0 3
69084: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
69085: LD_INT 0
69087: PPUSH
69088: PPUSH
// task := GetTaskList ( mech ) ;
69089: LD_ADDR_VAR 0 4
69093: PUSH
69094: LD_VAR 0 1
69098: PPUSH
69099: CALL_OW 437
69103: ST_TO_ADDR
// if not task then
69104: LD_VAR 0 4
69108: NOT
69109: IFFALSE 69113
// exit ;
69111: GO 69155
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
69113: LD_ADDR_VAR 0 3
69117: PUSH
69118: LD_VAR 0 4
69122: PUSH
69123: LD_INT 1
69125: ARRAY
69126: PUSH
69127: LD_INT 1
69129: ARRAY
69130: PUSH
69131: LD_STRING r
69133: EQUAL
69134: PUSH
69135: LD_VAR 0 4
69139: PUSH
69140: LD_INT 1
69142: ARRAY
69143: PUSH
69144: LD_INT 4
69146: ARRAY
69147: PUSH
69148: LD_VAR 0 2
69152: EQUAL
69153: AND
69154: ST_TO_ADDR
// end ;
69155: LD_VAR 0 3
69159: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
69160: LD_INT 0
69162: PPUSH
// SetDir ( unit , d ) ;
69163: LD_VAR 0 1
69167: PPUSH
69168: LD_VAR 0 4
69172: PPUSH
69173: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
69177: LD_VAR 0 1
69181: PPUSH
69182: LD_VAR 0 2
69186: PPUSH
69187: LD_VAR 0 3
69191: PPUSH
69192: LD_VAR 0 5
69196: PPUSH
69197: CALL_OW 48
// end ;
69201: LD_VAR 0 6
69205: RET
// export function ToNaturalNumber ( number ) ; begin
69206: LD_INT 0
69208: PPUSH
// result := number div 1 ;
69209: LD_ADDR_VAR 0 2
69213: PUSH
69214: LD_VAR 0 1
69218: PUSH
69219: LD_INT 1
69221: DIV
69222: ST_TO_ADDR
// if number < 0 then
69223: LD_VAR 0 1
69227: PUSH
69228: LD_INT 0
69230: LESS
69231: IFFALSE 69241
// result := 0 ;
69233: LD_ADDR_VAR 0 2
69237: PUSH
69238: LD_INT 0
69240: ST_TO_ADDR
// end ;
69241: LD_VAR 0 2
69245: RET
// export function SortByClass ( units , class ) ; var un ; begin
69246: LD_INT 0
69248: PPUSH
69249: PPUSH
// if not units or not class then
69250: LD_VAR 0 1
69254: NOT
69255: PUSH
69256: LD_VAR 0 2
69260: NOT
69261: OR
69262: IFFALSE 69266
// exit ;
69264: GO 69361
// result := [ ] ;
69266: LD_ADDR_VAR 0 3
69270: PUSH
69271: EMPTY
69272: ST_TO_ADDR
// for un in units do
69273: LD_ADDR_VAR 0 4
69277: PUSH
69278: LD_VAR 0 1
69282: PUSH
69283: FOR_IN
69284: IFFALSE 69359
// if GetClass ( un ) = class then
69286: LD_VAR 0 4
69290: PPUSH
69291: CALL_OW 257
69295: PUSH
69296: LD_VAR 0 2
69300: EQUAL
69301: IFFALSE 69328
// result := Insert ( result , 1 , un ) else
69303: LD_ADDR_VAR 0 3
69307: PUSH
69308: LD_VAR 0 3
69312: PPUSH
69313: LD_INT 1
69315: PPUSH
69316: LD_VAR 0 4
69320: PPUSH
69321: CALL_OW 2
69325: ST_TO_ADDR
69326: GO 69357
// result := Replace ( result , result + 1 , un ) ;
69328: LD_ADDR_VAR 0 3
69332: PUSH
69333: LD_VAR 0 3
69337: PPUSH
69338: LD_VAR 0 3
69342: PUSH
69343: LD_INT 1
69345: PLUS
69346: PPUSH
69347: LD_VAR 0 4
69351: PPUSH
69352: CALL_OW 1
69356: ST_TO_ADDR
69357: GO 69283
69359: POP
69360: POP
// end ;
69361: LD_VAR 0 3
69365: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
69366: LD_INT 0
69368: PPUSH
69369: PPUSH
69370: PPUSH
69371: PPUSH
69372: PPUSH
69373: PPUSH
69374: PPUSH
// result := [ ] ;
69375: LD_ADDR_VAR 0 4
69379: PUSH
69380: EMPTY
69381: ST_TO_ADDR
// if x - r < 0 then
69382: LD_VAR 0 1
69386: PUSH
69387: LD_VAR 0 3
69391: MINUS
69392: PUSH
69393: LD_INT 0
69395: LESS
69396: IFFALSE 69408
// min_x := 0 else
69398: LD_ADDR_VAR 0 8
69402: PUSH
69403: LD_INT 0
69405: ST_TO_ADDR
69406: GO 69424
// min_x := x - r ;
69408: LD_ADDR_VAR 0 8
69412: PUSH
69413: LD_VAR 0 1
69417: PUSH
69418: LD_VAR 0 3
69422: MINUS
69423: ST_TO_ADDR
// if y - r < 0 then
69424: LD_VAR 0 2
69428: PUSH
69429: LD_VAR 0 3
69433: MINUS
69434: PUSH
69435: LD_INT 0
69437: LESS
69438: IFFALSE 69450
// min_y := 0 else
69440: LD_ADDR_VAR 0 7
69444: PUSH
69445: LD_INT 0
69447: ST_TO_ADDR
69448: GO 69466
// min_y := y - r ;
69450: LD_ADDR_VAR 0 7
69454: PUSH
69455: LD_VAR 0 2
69459: PUSH
69460: LD_VAR 0 3
69464: MINUS
69465: ST_TO_ADDR
// max_x := x + r ;
69466: LD_ADDR_VAR 0 9
69470: PUSH
69471: LD_VAR 0 1
69475: PUSH
69476: LD_VAR 0 3
69480: PLUS
69481: ST_TO_ADDR
// max_y := y + r ;
69482: LD_ADDR_VAR 0 10
69486: PUSH
69487: LD_VAR 0 2
69491: PUSH
69492: LD_VAR 0 3
69496: PLUS
69497: ST_TO_ADDR
// for _x = min_x to max_x do
69498: LD_ADDR_VAR 0 5
69502: PUSH
69503: DOUBLE
69504: LD_VAR 0 8
69508: DEC
69509: ST_TO_ADDR
69510: LD_VAR 0 9
69514: PUSH
69515: FOR_TO
69516: IFFALSE 69617
// for _y = min_y to max_y do
69518: LD_ADDR_VAR 0 6
69522: PUSH
69523: DOUBLE
69524: LD_VAR 0 7
69528: DEC
69529: ST_TO_ADDR
69530: LD_VAR 0 10
69534: PUSH
69535: FOR_TO
69536: IFFALSE 69613
// begin if not ValidHex ( _x , _y ) then
69538: LD_VAR 0 5
69542: PPUSH
69543: LD_VAR 0 6
69547: PPUSH
69548: CALL_OW 488
69552: NOT
69553: IFFALSE 69557
// continue ;
69555: GO 69535
// if GetResourceTypeXY ( _x , _y ) then
69557: LD_VAR 0 5
69561: PPUSH
69562: LD_VAR 0 6
69566: PPUSH
69567: CALL_OW 283
69571: IFFALSE 69611
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
69573: LD_ADDR_VAR 0 4
69577: PUSH
69578: LD_VAR 0 4
69582: PPUSH
69583: LD_VAR 0 4
69587: PUSH
69588: LD_INT 1
69590: PLUS
69591: PPUSH
69592: LD_VAR 0 5
69596: PUSH
69597: LD_VAR 0 6
69601: PUSH
69602: EMPTY
69603: LIST
69604: LIST
69605: PPUSH
69606: CALL_OW 1
69610: ST_TO_ADDR
// end ;
69611: GO 69535
69613: POP
69614: POP
69615: GO 69515
69617: POP
69618: POP
// end ;
69619: LD_VAR 0 4
69623: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
69624: LD_INT 0
69626: PPUSH
69627: PPUSH
69628: PPUSH
69629: PPUSH
69630: PPUSH
69631: PPUSH
69632: PPUSH
69633: PPUSH
// if not units then
69634: LD_VAR 0 1
69638: NOT
69639: IFFALSE 69643
// exit ;
69641: GO 70167
// result := UnitFilter ( units , [ f_ok ] ) ;
69643: LD_ADDR_VAR 0 3
69647: PUSH
69648: LD_VAR 0 1
69652: PPUSH
69653: LD_INT 50
69655: PUSH
69656: EMPTY
69657: LIST
69658: PPUSH
69659: CALL_OW 72
69663: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
69664: LD_ADDR_VAR 0 8
69668: PUSH
69669: LD_VAR 0 1
69673: PUSH
69674: LD_INT 1
69676: ARRAY
69677: PPUSH
69678: CALL_OW 255
69682: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
69683: LD_ADDR_VAR 0 10
69687: PUSH
69688: LD_INT 29
69690: PUSH
69691: LD_INT 91
69693: PUSH
69694: LD_INT 49
69696: PUSH
69697: EMPTY
69698: LIST
69699: LIST
69700: LIST
69701: ST_TO_ADDR
// if not result then
69702: LD_VAR 0 3
69706: NOT
69707: IFFALSE 69711
// exit ;
69709: GO 70167
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
69711: LD_ADDR_VAR 0 5
69715: PUSH
69716: LD_INT 81
69718: PUSH
69719: LD_VAR 0 8
69723: PUSH
69724: EMPTY
69725: LIST
69726: LIST
69727: PPUSH
69728: CALL_OW 69
69732: ST_TO_ADDR
// for i in result do
69733: LD_ADDR_VAR 0 4
69737: PUSH
69738: LD_VAR 0 3
69742: PUSH
69743: FOR_IN
69744: IFFALSE 70165
// begin tag := GetTag ( i ) + 1 ;
69746: LD_ADDR_VAR 0 9
69750: PUSH
69751: LD_VAR 0 4
69755: PPUSH
69756: CALL_OW 110
69760: PUSH
69761: LD_INT 1
69763: PLUS
69764: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
69765: LD_ADDR_VAR 0 7
69769: PUSH
69770: LD_VAR 0 4
69774: PPUSH
69775: CALL_OW 250
69779: PPUSH
69780: LD_VAR 0 4
69784: PPUSH
69785: CALL_OW 251
69789: PPUSH
69790: LD_INT 6
69792: PPUSH
69793: CALL 69366 0 3
69797: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
69798: LD_VAR 0 4
69802: PPUSH
69803: CALL_OW 247
69807: PUSH
69808: LD_INT 2
69810: EQUAL
69811: PUSH
69812: LD_VAR 0 7
69816: AND
69817: PUSH
69818: LD_VAR 0 4
69822: PPUSH
69823: CALL_OW 264
69827: PUSH
69828: LD_VAR 0 10
69832: IN
69833: NOT
69834: AND
69835: IFFALSE 69874
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
69837: LD_VAR 0 4
69841: PPUSH
69842: LD_VAR 0 7
69846: PUSH
69847: LD_INT 1
69849: ARRAY
69850: PUSH
69851: LD_INT 1
69853: ARRAY
69854: PPUSH
69855: LD_VAR 0 7
69859: PUSH
69860: LD_INT 1
69862: ARRAY
69863: PUSH
69864: LD_INT 2
69866: ARRAY
69867: PPUSH
69868: CALL_OW 116
69872: GO 70163
// if path > tag then
69874: LD_VAR 0 2
69878: PUSH
69879: LD_VAR 0 9
69883: GREATER
69884: IFFALSE 70092
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
69886: LD_ADDR_VAR 0 6
69890: PUSH
69891: LD_VAR 0 5
69895: PPUSH
69896: LD_INT 91
69898: PUSH
69899: LD_VAR 0 4
69903: PUSH
69904: LD_INT 8
69906: PUSH
69907: EMPTY
69908: LIST
69909: LIST
69910: LIST
69911: PPUSH
69912: CALL_OW 72
69916: ST_TO_ADDR
// if nearEnemy then
69917: LD_VAR 0 6
69921: IFFALSE 69990
// begin if GetWeapon ( i ) = ru_time_lapser then
69923: LD_VAR 0 4
69927: PPUSH
69928: CALL_OW 264
69932: PUSH
69933: LD_INT 49
69935: EQUAL
69936: IFFALSE 69964
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
69938: LD_VAR 0 4
69942: PPUSH
69943: LD_VAR 0 6
69947: PPUSH
69948: LD_VAR 0 4
69952: PPUSH
69953: CALL_OW 74
69957: PPUSH
69958: CALL_OW 112
69962: GO 69988
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
69964: LD_VAR 0 4
69968: PPUSH
69969: LD_VAR 0 6
69973: PPUSH
69974: LD_VAR 0 4
69978: PPUSH
69979: CALL_OW 74
69983: PPUSH
69984: CALL 71092 0 2
// end else
69988: GO 70090
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
69990: LD_VAR 0 4
69994: PPUSH
69995: LD_VAR 0 2
69999: PUSH
70000: LD_VAR 0 9
70004: ARRAY
70005: PUSH
70006: LD_INT 1
70008: ARRAY
70009: PPUSH
70010: LD_VAR 0 2
70014: PUSH
70015: LD_VAR 0 9
70019: ARRAY
70020: PUSH
70021: LD_INT 2
70023: ARRAY
70024: PPUSH
70025: CALL_OW 297
70029: PUSH
70030: LD_INT 6
70032: GREATER
70033: IFFALSE 70076
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
70035: LD_VAR 0 4
70039: PPUSH
70040: LD_VAR 0 2
70044: PUSH
70045: LD_VAR 0 9
70049: ARRAY
70050: PUSH
70051: LD_INT 1
70053: ARRAY
70054: PPUSH
70055: LD_VAR 0 2
70059: PUSH
70060: LD_VAR 0 9
70064: ARRAY
70065: PUSH
70066: LD_INT 2
70068: ARRAY
70069: PPUSH
70070: CALL_OW 114
70074: GO 70090
// SetTag ( i , tag ) ;
70076: LD_VAR 0 4
70080: PPUSH
70081: LD_VAR 0 9
70085: PPUSH
70086: CALL_OW 109
// end else
70090: GO 70163
// if enemy then
70092: LD_VAR 0 5
70096: IFFALSE 70163
// begin if GetWeapon ( i ) = ru_time_lapser then
70098: LD_VAR 0 4
70102: PPUSH
70103: CALL_OW 264
70107: PUSH
70108: LD_INT 49
70110: EQUAL
70111: IFFALSE 70139
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
70113: LD_VAR 0 4
70117: PPUSH
70118: LD_VAR 0 5
70122: PPUSH
70123: LD_VAR 0 4
70127: PPUSH
70128: CALL_OW 74
70132: PPUSH
70133: CALL_OW 112
70137: GO 70163
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
70139: LD_VAR 0 4
70143: PPUSH
70144: LD_VAR 0 5
70148: PPUSH
70149: LD_VAR 0 4
70153: PPUSH
70154: CALL_OW 74
70158: PPUSH
70159: CALL 71092 0 2
// end ; end ;
70163: GO 69743
70165: POP
70166: POP
// end ;
70167: LD_VAR 0 3
70171: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
70172: LD_INT 0
70174: PPUSH
70175: PPUSH
70176: PPUSH
// if not unit or IsInUnit ( unit ) then
70177: LD_VAR 0 1
70181: NOT
70182: PUSH
70183: LD_VAR 0 1
70187: PPUSH
70188: CALL_OW 310
70192: OR
70193: IFFALSE 70197
// exit ;
70195: GO 70288
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
70197: LD_ADDR_VAR 0 4
70201: PUSH
70202: LD_VAR 0 1
70206: PPUSH
70207: CALL_OW 250
70211: PPUSH
70212: LD_VAR 0 2
70216: PPUSH
70217: LD_INT 1
70219: PPUSH
70220: CALL_OW 272
70224: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
70225: LD_ADDR_VAR 0 5
70229: PUSH
70230: LD_VAR 0 1
70234: PPUSH
70235: CALL_OW 251
70239: PPUSH
70240: LD_VAR 0 2
70244: PPUSH
70245: LD_INT 1
70247: PPUSH
70248: CALL_OW 273
70252: ST_TO_ADDR
// if ValidHex ( x , y ) then
70253: LD_VAR 0 4
70257: PPUSH
70258: LD_VAR 0 5
70262: PPUSH
70263: CALL_OW 488
70267: IFFALSE 70288
// ComTurnXY ( unit , x , y ) ;
70269: LD_VAR 0 1
70273: PPUSH
70274: LD_VAR 0 4
70278: PPUSH
70279: LD_VAR 0 5
70283: PPUSH
70284: CALL_OW 118
// end ;
70288: LD_VAR 0 3
70292: RET
// export function SeeUnits ( side , units ) ; var i ; begin
70293: LD_INT 0
70295: PPUSH
70296: PPUSH
// result := false ;
70297: LD_ADDR_VAR 0 3
70301: PUSH
70302: LD_INT 0
70304: ST_TO_ADDR
// if not units then
70305: LD_VAR 0 2
70309: NOT
70310: IFFALSE 70314
// exit ;
70312: GO 70359
// for i in units do
70314: LD_ADDR_VAR 0 4
70318: PUSH
70319: LD_VAR 0 2
70323: PUSH
70324: FOR_IN
70325: IFFALSE 70357
// if See ( side , i ) then
70327: LD_VAR 0 1
70331: PPUSH
70332: LD_VAR 0 4
70336: PPUSH
70337: CALL_OW 292
70341: IFFALSE 70355
// begin result := true ;
70343: LD_ADDR_VAR 0 3
70347: PUSH
70348: LD_INT 1
70350: ST_TO_ADDR
// exit ;
70351: POP
70352: POP
70353: GO 70359
// end ;
70355: GO 70324
70357: POP
70358: POP
// end ;
70359: LD_VAR 0 3
70363: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
70364: LD_INT 0
70366: PPUSH
70367: PPUSH
70368: PPUSH
70369: PPUSH
// if not unit or not points then
70370: LD_VAR 0 1
70374: NOT
70375: PUSH
70376: LD_VAR 0 2
70380: NOT
70381: OR
70382: IFFALSE 70386
// exit ;
70384: GO 70476
// dist := 99999 ;
70386: LD_ADDR_VAR 0 5
70390: PUSH
70391: LD_INT 99999
70393: ST_TO_ADDR
// for i in points do
70394: LD_ADDR_VAR 0 4
70398: PUSH
70399: LD_VAR 0 2
70403: PUSH
70404: FOR_IN
70405: IFFALSE 70474
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
70407: LD_ADDR_VAR 0 6
70411: PUSH
70412: LD_VAR 0 1
70416: PPUSH
70417: LD_VAR 0 4
70421: PUSH
70422: LD_INT 1
70424: ARRAY
70425: PPUSH
70426: LD_VAR 0 4
70430: PUSH
70431: LD_INT 2
70433: ARRAY
70434: PPUSH
70435: CALL_OW 297
70439: ST_TO_ADDR
// if tmpDist < dist then
70440: LD_VAR 0 6
70444: PUSH
70445: LD_VAR 0 5
70449: LESS
70450: IFFALSE 70472
// begin result := i ;
70452: LD_ADDR_VAR 0 3
70456: PUSH
70457: LD_VAR 0 4
70461: ST_TO_ADDR
// dist := tmpDist ;
70462: LD_ADDR_VAR 0 5
70466: PUSH
70467: LD_VAR 0 6
70471: ST_TO_ADDR
// end ; end ;
70472: GO 70404
70474: POP
70475: POP
// end ;
70476: LD_VAR 0 3
70480: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
70481: LD_INT 0
70483: PPUSH
// uc_side := side ;
70484: LD_ADDR_OWVAR 20
70488: PUSH
70489: LD_VAR 0 1
70493: ST_TO_ADDR
// uc_nation := 3 ;
70494: LD_ADDR_OWVAR 21
70498: PUSH
70499: LD_INT 3
70501: ST_TO_ADDR
// vc_chassis := 25 ;
70502: LD_ADDR_OWVAR 37
70506: PUSH
70507: LD_INT 25
70509: ST_TO_ADDR
// vc_engine := engine_siberite ;
70510: LD_ADDR_OWVAR 39
70514: PUSH
70515: LD_INT 3
70517: ST_TO_ADDR
// vc_control := control_computer ;
70518: LD_ADDR_OWVAR 38
70522: PUSH
70523: LD_INT 3
70525: ST_TO_ADDR
// vc_weapon := 59 ;
70526: LD_ADDR_OWVAR 40
70530: PUSH
70531: LD_INT 59
70533: ST_TO_ADDR
// result := CreateVehicle ;
70534: LD_ADDR_VAR 0 5
70538: PUSH
70539: CALL_OW 45
70543: ST_TO_ADDR
// SetDir ( result , d ) ;
70544: LD_VAR 0 5
70548: PPUSH
70549: LD_VAR 0 4
70553: PPUSH
70554: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
70558: LD_VAR 0 5
70562: PPUSH
70563: LD_VAR 0 2
70567: PPUSH
70568: LD_VAR 0 3
70572: PPUSH
70573: LD_INT 0
70575: PPUSH
70576: CALL_OW 48
// end ;
70580: LD_VAR 0 5
70584: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
70585: LD_INT 0
70587: PPUSH
70588: PPUSH
70589: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
70590: LD_ADDR_VAR 0 2
70594: PUSH
70595: LD_INT 0
70597: PUSH
70598: LD_INT 0
70600: PUSH
70601: LD_INT 0
70603: PUSH
70604: LD_INT 0
70606: PUSH
70607: EMPTY
70608: LIST
70609: LIST
70610: LIST
70611: LIST
70612: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
70613: LD_VAR 0 1
70617: NOT
70618: PUSH
70619: LD_VAR 0 1
70623: PPUSH
70624: CALL_OW 264
70628: PUSH
70629: LD_INT 12
70631: PUSH
70632: LD_INT 51
70634: PUSH
70635: LD_INT 32
70637: PUSH
70638: LD_INT 89
70640: PUSH
70641: EMPTY
70642: LIST
70643: LIST
70644: LIST
70645: LIST
70646: IN
70647: NOT
70648: OR
70649: IFFALSE 70653
// exit ;
70651: GO 70751
// for i := 1 to 3 do
70653: LD_ADDR_VAR 0 3
70657: PUSH
70658: DOUBLE
70659: LD_INT 1
70661: DEC
70662: ST_TO_ADDR
70663: LD_INT 3
70665: PUSH
70666: FOR_TO
70667: IFFALSE 70749
// begin tmp := GetCargo ( cargo , i ) ;
70669: LD_ADDR_VAR 0 4
70673: PUSH
70674: LD_VAR 0 1
70678: PPUSH
70679: LD_VAR 0 3
70683: PPUSH
70684: CALL_OW 289
70688: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
70689: LD_ADDR_VAR 0 2
70693: PUSH
70694: LD_VAR 0 2
70698: PPUSH
70699: LD_VAR 0 3
70703: PPUSH
70704: LD_VAR 0 4
70708: PPUSH
70709: CALL_OW 1
70713: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
70714: LD_ADDR_VAR 0 2
70718: PUSH
70719: LD_VAR 0 2
70723: PPUSH
70724: LD_INT 4
70726: PPUSH
70727: LD_VAR 0 2
70731: PUSH
70732: LD_INT 4
70734: ARRAY
70735: PUSH
70736: LD_VAR 0 4
70740: PLUS
70741: PPUSH
70742: CALL_OW 1
70746: ST_TO_ADDR
// end ;
70747: GO 70666
70749: POP
70750: POP
// end ;
70751: LD_VAR 0 2
70755: RET
// export function Length ( array ) ; begin
70756: LD_INT 0
70758: PPUSH
// result := array + 0 ;
70759: LD_ADDR_VAR 0 2
70763: PUSH
70764: LD_VAR 0 1
70768: PUSH
70769: LD_INT 0
70771: PLUS
70772: ST_TO_ADDR
// end ;
70773: LD_VAR 0 2
70777: RET
// export function PrepareArray ( array ) ; begin
70778: LD_INT 0
70780: PPUSH
// result := array diff 0 ;
70781: LD_ADDR_VAR 0 2
70785: PUSH
70786: LD_VAR 0 1
70790: PUSH
70791: LD_INT 0
70793: DIFF
70794: ST_TO_ADDR
// if not result [ 1 ] then
70795: LD_VAR 0 2
70799: PUSH
70800: LD_INT 1
70802: ARRAY
70803: NOT
70804: IFFALSE 70824
// result := Delete ( result , 1 ) ;
70806: LD_ADDR_VAR 0 2
70810: PUSH
70811: LD_VAR 0 2
70815: PPUSH
70816: LD_INT 1
70818: PPUSH
70819: CALL_OW 3
70823: ST_TO_ADDR
// end ;
70824: LD_VAR 0 2
70828: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
70829: LD_INT 0
70831: PPUSH
70832: PPUSH
70833: PPUSH
70834: PPUSH
// sibRocketRange := 25 ;
70835: LD_ADDR_VAR 0 6
70839: PUSH
70840: LD_INT 25
70842: ST_TO_ADDR
// result := false ;
70843: LD_ADDR_VAR 0 4
70847: PUSH
70848: LD_INT 0
70850: ST_TO_ADDR
// for i := 0 to 5 do
70851: LD_ADDR_VAR 0 5
70855: PUSH
70856: DOUBLE
70857: LD_INT 0
70859: DEC
70860: ST_TO_ADDR
70861: LD_INT 5
70863: PUSH
70864: FOR_TO
70865: IFFALSE 70932
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
70867: LD_VAR 0 1
70871: PPUSH
70872: LD_VAR 0 5
70876: PPUSH
70877: LD_VAR 0 6
70881: PPUSH
70882: CALL_OW 272
70886: PPUSH
70887: LD_VAR 0 2
70891: PPUSH
70892: LD_VAR 0 5
70896: PPUSH
70897: LD_VAR 0 6
70901: PPUSH
70902: CALL_OW 273
70906: PPUSH
70907: LD_VAR 0 3
70911: PPUSH
70912: CALL_OW 309
70916: IFFALSE 70930
// begin result := true ;
70918: LD_ADDR_VAR 0 4
70922: PUSH
70923: LD_INT 1
70925: ST_TO_ADDR
// exit ;
70926: POP
70927: POP
70928: GO 70934
// end ;
70930: GO 70864
70932: POP
70933: POP
// end ;
70934: LD_VAR 0 4
70938: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
70939: LD_INT 0
70941: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
70942: LD_VAR 0 1
70946: PPUSH
70947: LD_VAR 0 2
70951: PPUSH
70952: LD_INT 0
70954: PPUSH
70955: LD_INT 0
70957: PPUSH
70958: LD_INT 1
70960: PPUSH
70961: LD_INT 0
70963: PPUSH
70964: CALL_OW 587
// end ;
70968: LD_VAR 0 3
70972: RET
// export function CenterOnNow ( unit ) ; begin
70973: LD_INT 0
70975: PPUSH
// result := IsInUnit ( unit ) ;
70976: LD_ADDR_VAR 0 2
70980: PUSH
70981: LD_VAR 0 1
70985: PPUSH
70986: CALL_OW 310
70990: ST_TO_ADDR
// if not result then
70991: LD_VAR 0 2
70995: NOT
70996: IFFALSE 71008
// result := unit ;
70998: LD_ADDR_VAR 0 2
71002: PUSH
71003: LD_VAR 0 1
71007: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
71008: LD_VAR 0 1
71012: PPUSH
71013: CALL_OW 87
// end ;
71017: LD_VAR 0 2
71021: RET
// export function ComMoveHex ( unit , hex ) ; begin
71022: LD_INT 0
71024: PPUSH
// if not hex then
71025: LD_VAR 0 2
71029: NOT
71030: IFFALSE 71034
// exit ;
71032: GO 71087
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
71034: LD_VAR 0 2
71038: PUSH
71039: LD_INT 1
71041: ARRAY
71042: PPUSH
71043: LD_VAR 0 2
71047: PUSH
71048: LD_INT 2
71050: ARRAY
71051: PPUSH
71052: CALL_OW 428
71056: IFFALSE 71060
// exit ;
71058: GO 71087
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
71060: LD_VAR 0 1
71064: PPUSH
71065: LD_VAR 0 2
71069: PUSH
71070: LD_INT 1
71072: ARRAY
71073: PPUSH
71074: LD_VAR 0 2
71078: PUSH
71079: LD_INT 2
71081: ARRAY
71082: PPUSH
71083: CALL_OW 111
// end ;
71087: LD_VAR 0 3
71091: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
71092: LD_INT 0
71094: PPUSH
71095: PPUSH
71096: PPUSH
// if not unit or not enemy then
71097: LD_VAR 0 1
71101: NOT
71102: PUSH
71103: LD_VAR 0 2
71107: NOT
71108: OR
71109: IFFALSE 71113
// exit ;
71111: GO 71237
// x := GetX ( enemy ) ;
71113: LD_ADDR_VAR 0 4
71117: PUSH
71118: LD_VAR 0 2
71122: PPUSH
71123: CALL_OW 250
71127: ST_TO_ADDR
// y := GetY ( enemy ) ;
71128: LD_ADDR_VAR 0 5
71132: PUSH
71133: LD_VAR 0 2
71137: PPUSH
71138: CALL_OW 251
71142: ST_TO_ADDR
// if ValidHex ( x , y ) then
71143: LD_VAR 0 4
71147: PPUSH
71148: LD_VAR 0 5
71152: PPUSH
71153: CALL_OW 488
71157: IFFALSE 71237
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
71159: LD_VAR 0 2
71163: PPUSH
71164: CALL_OW 247
71168: PUSH
71169: LD_INT 3
71171: PUSH
71172: LD_INT 2
71174: PUSH
71175: EMPTY
71176: LIST
71177: LIST
71178: IN
71179: PUSH
71180: LD_VAR 0 1
71184: PPUSH
71185: CALL_OW 255
71189: PPUSH
71190: LD_VAR 0 2
71194: PPUSH
71195: CALL_OW 292
71199: OR
71200: IFFALSE 71218
// ComAttackUnit ( unit , enemy ) else
71202: LD_VAR 0 1
71206: PPUSH
71207: LD_VAR 0 2
71211: PPUSH
71212: CALL_OW 115
71216: GO 71237
// ComAgressiveMove ( unit , x , y ) ;
71218: LD_VAR 0 1
71222: PPUSH
71223: LD_VAR 0 4
71227: PPUSH
71228: LD_VAR 0 5
71232: PPUSH
71233: CALL_OW 114
// end ;
71237: LD_VAR 0 3
71241: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
71242: LD_INT 0
71244: PPUSH
71245: PPUSH
71246: PPUSH
// list := AreaToList ( area , 0 ) ;
71247: LD_ADDR_VAR 0 5
71251: PUSH
71252: LD_VAR 0 1
71256: PPUSH
71257: LD_INT 0
71259: PPUSH
71260: CALL_OW 517
71264: ST_TO_ADDR
// if not list then
71265: LD_VAR 0 5
71269: NOT
71270: IFFALSE 71274
// exit ;
71272: GO 71404
// if all then
71274: LD_VAR 0 2
71278: IFFALSE 71366
// begin for i := 1 to list [ 1 ] do
71280: LD_ADDR_VAR 0 4
71284: PUSH
71285: DOUBLE
71286: LD_INT 1
71288: DEC
71289: ST_TO_ADDR
71290: LD_VAR 0 5
71294: PUSH
71295: LD_INT 1
71297: ARRAY
71298: PUSH
71299: FOR_TO
71300: IFFALSE 71362
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
71302: LD_ADDR_VAR 0 3
71306: PUSH
71307: LD_VAR 0 3
71311: PPUSH
71312: LD_VAR 0 3
71316: PUSH
71317: LD_INT 1
71319: PLUS
71320: PPUSH
71321: LD_VAR 0 5
71325: PUSH
71326: LD_INT 1
71328: ARRAY
71329: PUSH
71330: LD_VAR 0 4
71334: ARRAY
71335: PUSH
71336: LD_VAR 0 5
71340: PUSH
71341: LD_INT 2
71343: ARRAY
71344: PUSH
71345: LD_VAR 0 4
71349: ARRAY
71350: PUSH
71351: EMPTY
71352: LIST
71353: LIST
71354: PPUSH
71355: CALL_OW 1
71359: ST_TO_ADDR
71360: GO 71299
71362: POP
71363: POP
// exit ;
71364: GO 71404
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
71366: LD_ADDR_VAR 0 3
71370: PUSH
71371: LD_VAR 0 5
71375: PUSH
71376: LD_INT 1
71378: ARRAY
71379: PUSH
71380: LD_INT 1
71382: ARRAY
71383: PUSH
71384: LD_VAR 0 5
71388: PUSH
71389: LD_INT 2
71391: ARRAY
71392: PUSH
71393: LD_INT 1
71395: ARRAY
71396: PUSH
71397: EMPTY
71398: LIST
71399: LIST
71400: PUSH
71401: EMPTY
71402: LIST
71403: ST_TO_ADDR
// end ;
71404: LD_VAR 0 3
71408: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
71409: LD_INT 0
71411: PPUSH
71412: PPUSH
// list := AreaToList ( area , 0 ) ;
71413: LD_ADDR_VAR 0 4
71417: PUSH
71418: LD_VAR 0 1
71422: PPUSH
71423: LD_INT 0
71425: PPUSH
71426: CALL_OW 517
71430: ST_TO_ADDR
// if not list then
71431: LD_VAR 0 4
71435: NOT
71436: IFFALSE 71440
// exit ;
71438: GO 71481
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
71440: LD_ADDR_VAR 0 3
71444: PUSH
71445: LD_VAR 0 4
71449: PUSH
71450: LD_INT 1
71452: ARRAY
71453: PUSH
71454: LD_INT 1
71456: ARRAY
71457: PUSH
71458: LD_VAR 0 4
71462: PUSH
71463: LD_INT 2
71465: ARRAY
71466: PUSH
71467: LD_INT 1
71469: ARRAY
71470: PUSH
71471: LD_VAR 0 2
71475: PUSH
71476: EMPTY
71477: LIST
71478: LIST
71479: LIST
71480: ST_TO_ADDR
// end ;
71481: LD_VAR 0 3
71485: RET
// export function First ( array ) ; begin
71486: LD_INT 0
71488: PPUSH
// if not array then
71489: LD_VAR 0 1
71493: NOT
71494: IFFALSE 71498
// exit ;
71496: GO 71512
// result := array [ 1 ] ;
71498: LD_ADDR_VAR 0 2
71502: PUSH
71503: LD_VAR 0 1
71507: PUSH
71508: LD_INT 1
71510: ARRAY
71511: ST_TO_ADDR
// end ;
71512: LD_VAR 0 2
71516: RET
// export function Last ( array ) ; begin
71517: LD_INT 0
71519: PPUSH
// if not array then
71520: LD_VAR 0 1
71524: NOT
71525: IFFALSE 71529
// exit ;
71527: GO 71545
// result := array [ array ] ;
71529: LD_ADDR_VAR 0 2
71533: PUSH
71534: LD_VAR 0 1
71538: PUSH
71539: LD_VAR 0 1
71543: ARRAY
71544: ST_TO_ADDR
// end ;
71545: LD_VAR 0 2
71549: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
71550: LD_INT 0
71552: PPUSH
71553: PPUSH
// result := [ ] ;
71554: LD_ADDR_VAR 0 5
71558: PUSH
71559: EMPTY
71560: ST_TO_ADDR
// if not array then
71561: LD_VAR 0 1
71565: NOT
71566: IFFALSE 71570
// exit ;
71568: GO 71682
// for i := 1 to array do
71570: LD_ADDR_VAR 0 6
71574: PUSH
71575: DOUBLE
71576: LD_INT 1
71578: DEC
71579: ST_TO_ADDR
71580: LD_VAR 0 1
71584: PUSH
71585: FOR_TO
71586: IFFALSE 71680
// if array [ i ] [ index ] = value then
71588: LD_VAR 0 1
71592: PUSH
71593: LD_VAR 0 6
71597: ARRAY
71598: PUSH
71599: LD_VAR 0 2
71603: ARRAY
71604: PUSH
71605: LD_VAR 0 3
71609: EQUAL
71610: IFFALSE 71678
// begin if indexColumn then
71612: LD_VAR 0 4
71616: IFFALSE 71652
// result := Join ( result , array [ i ] [ indexColumn ] ) else
71618: LD_ADDR_VAR 0 5
71622: PUSH
71623: LD_VAR 0 5
71627: PPUSH
71628: LD_VAR 0 1
71632: PUSH
71633: LD_VAR 0 6
71637: ARRAY
71638: PUSH
71639: LD_VAR 0 4
71643: ARRAY
71644: PPUSH
71645: CALL 67020 0 2
71649: ST_TO_ADDR
71650: GO 71678
// result := Join ( result , array [ i ] ) ;
71652: LD_ADDR_VAR 0 5
71656: PUSH
71657: LD_VAR 0 5
71661: PPUSH
71662: LD_VAR 0 1
71666: PUSH
71667: LD_VAR 0 6
71671: ARRAY
71672: PPUSH
71673: CALL 67020 0 2
71677: ST_TO_ADDR
// end ;
71678: GO 71585
71680: POP
71681: POP
// end ;
71682: LD_VAR 0 5
71686: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
71687: LD_INT 0
71689: PPUSH
71690: PPUSH
71691: PPUSH
// if btype = b_depot then
71692: LD_VAR 0 2
71696: PUSH
71697: LD_INT 0
71699: EQUAL
71700: IFFALSE 71712
// begin result := true ;
71702: LD_ADDR_VAR 0 3
71706: PUSH
71707: LD_INT 1
71709: ST_TO_ADDR
// exit ;
71710: GO 71828
// end ; pom := GetBase ( depot ) ;
71712: LD_ADDR_VAR 0 4
71716: PUSH
71717: LD_VAR 0 1
71721: PPUSH
71722: CALL_OW 274
71726: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
71727: LD_ADDR_VAR 0 5
71731: PUSH
71732: LD_VAR 0 2
71736: PPUSH
71737: LD_VAR 0 1
71741: PPUSH
71742: CALL_OW 248
71746: PPUSH
71747: CALL_OW 450
71751: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
71752: LD_ADDR_VAR 0 3
71756: PUSH
71757: LD_VAR 0 4
71761: PPUSH
71762: LD_INT 1
71764: PPUSH
71765: CALL_OW 275
71769: PUSH
71770: LD_VAR 0 5
71774: PUSH
71775: LD_INT 1
71777: ARRAY
71778: GREATEREQUAL
71779: PUSH
71780: LD_VAR 0 4
71784: PPUSH
71785: LD_INT 2
71787: PPUSH
71788: CALL_OW 275
71792: PUSH
71793: LD_VAR 0 5
71797: PUSH
71798: LD_INT 2
71800: ARRAY
71801: GREATEREQUAL
71802: AND
71803: PUSH
71804: LD_VAR 0 4
71808: PPUSH
71809: LD_INT 3
71811: PPUSH
71812: CALL_OW 275
71816: PUSH
71817: LD_VAR 0 5
71821: PUSH
71822: LD_INT 3
71824: ARRAY
71825: GREATEREQUAL
71826: AND
71827: ST_TO_ADDR
// end ;
71828: LD_VAR 0 3
71832: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
71833: LD_INT 0
71835: PPUSH
// if not vehicles or not parkingPoint then
71836: LD_VAR 0 1
71840: NOT
71841: PUSH
71842: LD_VAR 0 2
71846: NOT
71847: OR
71848: IFFALSE 71852
// exit ;
71850: GO 71950
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
71852: LD_ADDR_VAR 0 1
71856: PUSH
71857: LD_VAR 0 1
71861: PPUSH
71862: LD_INT 50
71864: PUSH
71865: EMPTY
71866: LIST
71867: PUSH
71868: LD_INT 3
71870: PUSH
71871: LD_INT 92
71873: PUSH
71874: LD_VAR 0 2
71878: PUSH
71879: LD_INT 1
71881: ARRAY
71882: PUSH
71883: LD_VAR 0 2
71887: PUSH
71888: LD_INT 2
71890: ARRAY
71891: PUSH
71892: LD_INT 8
71894: PUSH
71895: EMPTY
71896: LIST
71897: LIST
71898: LIST
71899: LIST
71900: PUSH
71901: EMPTY
71902: LIST
71903: LIST
71904: PUSH
71905: EMPTY
71906: LIST
71907: LIST
71908: PPUSH
71909: CALL_OW 72
71913: ST_TO_ADDR
// if not vehicles then
71914: LD_VAR 0 1
71918: NOT
71919: IFFALSE 71923
// exit ;
71921: GO 71950
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
71923: LD_VAR 0 1
71927: PPUSH
71928: LD_VAR 0 2
71932: PUSH
71933: LD_INT 1
71935: ARRAY
71936: PPUSH
71937: LD_VAR 0 2
71941: PUSH
71942: LD_INT 2
71944: ARRAY
71945: PPUSH
71946: CALL_OW 111
// end ;
71950: LD_VAR 0 3
71954: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
71955: LD_INT 0
71957: PPUSH
71958: PPUSH
71959: PPUSH
// if not side or not area then
71960: LD_VAR 0 1
71964: NOT
71965: PUSH
71966: LD_VAR 0 2
71970: NOT
71971: OR
71972: IFFALSE 71976
// exit ;
71974: GO 72095
// tmp := AreaToList ( area , 0 ) ;
71976: LD_ADDR_VAR 0 5
71980: PUSH
71981: LD_VAR 0 2
71985: PPUSH
71986: LD_INT 0
71988: PPUSH
71989: CALL_OW 517
71993: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
71994: LD_ADDR_VAR 0 4
71998: PUSH
71999: DOUBLE
72000: LD_INT 1
72002: DEC
72003: ST_TO_ADDR
72004: LD_VAR 0 5
72008: PUSH
72009: LD_INT 1
72011: ARRAY
72012: PUSH
72013: FOR_TO
72014: IFFALSE 72093
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
72016: LD_VAR 0 5
72020: PUSH
72021: LD_INT 1
72023: ARRAY
72024: PUSH
72025: LD_VAR 0 4
72029: ARRAY
72030: PPUSH
72031: LD_VAR 0 5
72035: PUSH
72036: LD_INT 2
72038: ARRAY
72039: PUSH
72040: LD_VAR 0 4
72044: ARRAY
72045: PPUSH
72046: CALL_OW 351
72050: IFFALSE 72091
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
72052: LD_VAR 0 5
72056: PUSH
72057: LD_INT 1
72059: ARRAY
72060: PUSH
72061: LD_VAR 0 4
72065: ARRAY
72066: PPUSH
72067: LD_VAR 0 5
72071: PUSH
72072: LD_INT 2
72074: ARRAY
72075: PUSH
72076: LD_VAR 0 4
72080: ARRAY
72081: PPUSH
72082: LD_VAR 0 1
72086: PPUSH
72087: CALL_OW 244
// end ;
72091: GO 72013
72093: POP
72094: POP
// end ; end_of_file
72095: LD_VAR 0 3
72099: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
72100: LD_VAR 0 1
72104: PUSH
72105: LD_INT 200
72107: DOUBLE
72108: GREATEREQUAL
72109: IFFALSE 72117
72111: LD_INT 299
72113: DOUBLE
72114: LESSEQUAL
72115: IFTRUE 72119
72117: GO 72151
72119: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
72120: LD_VAR 0 1
72124: PPUSH
72125: LD_VAR 0 2
72129: PPUSH
72130: LD_VAR 0 3
72134: PPUSH
72135: LD_VAR 0 4
72139: PPUSH
72140: LD_VAR 0 5
72144: PPUSH
72145: CALL 24811 0 5
72149: GO 72228
72151: LD_INT 300
72153: DOUBLE
72154: GREATEREQUAL
72155: IFFALSE 72163
72157: LD_INT 399
72159: DOUBLE
72160: LESSEQUAL
72161: IFTRUE 72165
72163: GO 72227
72165: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
72166: LD_VAR 0 1
72170: PPUSH
72171: LD_VAR 0 2
72175: PPUSH
72176: LD_VAR 0 3
72180: PPUSH
72181: LD_VAR 0 4
72185: PPUSH
72186: LD_VAR 0 5
72190: PPUSH
72191: LD_VAR 0 6
72195: PPUSH
72196: LD_VAR 0 7
72200: PPUSH
72201: LD_VAR 0 8
72205: PPUSH
72206: LD_VAR 0 9
72210: PPUSH
72211: LD_VAR 0 10
72215: PPUSH
72216: LD_VAR 0 11
72220: PPUSH
72221: CALL 21136 0 11
72225: GO 72228
72227: POP
// end ;
72228: PPOPN 11
72230: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
72231: LD_VAR 0 1
72235: PPUSH
72236: LD_VAR 0 2
72240: PPUSH
72241: LD_VAR 0 3
72245: PPUSH
72246: LD_VAR 0 4
72250: PPUSH
72251: LD_VAR 0 5
72255: PPUSH
72256: CALL 24547 0 5
// end ; end_of_file
72260: PPOPN 5
72262: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
72263: LD_VAR 0 1
72267: PPUSH
72268: LD_VAR 0 2
72272: PPUSH
72273: LD_VAR 0 3
72277: PPUSH
72278: LD_VAR 0 4
72282: PPUSH
72283: LD_VAR 0 5
72287: PPUSH
72288: LD_VAR 0 6
72292: PPUSH
72293: CALL 8788 0 6
// end ;
72297: PPOPN 6
72299: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
72300: LD_INT 0
72302: PPUSH
// begin if not units then
72303: LD_VAR 0 1
72307: NOT
72308: IFFALSE 72312
// exit ;
72310: GO 72312
// end ;
72312: PPOPN 7
72314: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
72315: CALL 8675 0 0
// end ;
72319: PPOPN 1
72321: END
