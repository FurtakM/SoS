// starting begin PrepareMap ;
   0: CALL 13 0 0
// Main_Variables ;
   4: CALL 136 0 0
// Start_Mission ;
   8: CALL 3478 0 0
// end ;
  12: END
// function PrepareMap ; begin
  13: LD_INT 0
  15: PPUSH
// ResetFog ;
  16: CALL_OW 335
// RandomizeAll ;
  20: CALL_OW 11
// game_difficulty := GetMultiplayerSetting ( 0 ) ;
  24: LD_ADDR_EXP 2
  28: PUSH
  29: LD_INT 0
  31: PPUSH
  32: CALL_OW 426
  36: ST_TO_ADDR
// Difficulty := game_difficulty ;
  37: LD_ADDR_OWVAR 67
  41: PUSH
  42: LD_EXP 2
  46: ST_TO_ADDR
// ChangeSideFog ( 8 , 6 ) ;
  47: LD_INT 8
  49: PPUSH
  50: LD_INT 6
  52: PPUSH
  53: CALL_OW 343
// PlaceSeeing ( 1 , 1 , 8 , - 37963 ) ;
  57: LD_INT 1
  59: PPUSH
  60: LD_INT 1
  62: PPUSH
  63: LD_INT 8
  65: PPUSH
  66: LD_INT 37963
  68: NEG
  69: PPUSH
  70: CALL_OW 330
// RemoveSeeing ( 1 , 1 , 8 ) ;
  74: LD_INT 1
  76: PPUSH
  77: LD_INT 1
  79: PPUSH
  80: LD_INT 8
  82: PPUSH
  83: CALL_OW 331
// PlaceCamera ;
  87: CALL 3945 0 0
// CreateNature ( nature , 4 , 3 , 2 , 1 ) ;
  91: LD_INT 2
  93: PPUSH
  94: LD_INT 4
  96: PPUSH
  97: LD_INT 3
  99: PPUSH
 100: LD_INT 2
 102: PPUSH
 103: LD_INT 1
 105: PPUSH
 106: CALL 7895 0 5
// PrepareComm ;
 110: CALL 8378 0 0
// SetSide ( fort , 6 ) ;
 114: LD_INT 23
 116: PPUSH
 117: LD_INT 6
 119: PPUSH
 120: CALL_OW 235
// CenterNowOnUnits ( fort ) ;
 124: LD_INT 23
 126: PPUSH
 127: CALL_OW 87
// end ;
 131: LD_VAR 0 1
 135: RET
// export game_on , game_difficulty , game_time , game_option , game_end , game_strings ; export leopold , leopold_in_fort , samuel , samuel_in_fort , mortars_in_fort , scout ; export u_mine , u_fac ; export areas ; export skill ; export ar_weapons , ru_weapons , us_weapons ; export arabian_force , russian_force , american_force , arabian_timeing , russian_timeing , american_timeing ; export meeting_start , meeting_arive , meeting_break , meeting_end , meeting_time , russian_timer , fort_destroyed , hero_died , mission_time , cargo_ok , american_hchan , dezert , arabian_attack , russian_attack , american_attack , american_help , american_sib_bomb , russian_trade , heike_dialog1 , heike_dialog2 ; export am_comander , ru_comander , ar_comander ; function Main_Variables ; begin
 136: LD_INT 0
 138: PPUSH
// game_on := false ;
 139: LD_ADDR_EXP 1
 143: PUSH
 144: LD_INT 0
 146: ST_TO_ADDR
// game_time := 0 0$00 ;
 147: LD_ADDR_EXP 3
 151: PUSH
 152: LD_INT 0
 154: ST_TO_ADDR
// game_option := [ 1 ] ;
 155: LD_ADDR_EXP 4
 159: PUSH
 160: LD_INT 1
 162: PUSH
 163: EMPTY
 164: LIST
 165: ST_TO_ADDR
// game_end := false ;
 166: LD_ADDR_EXP 5
 170: PUSH
 171: LD_INT 0
 173: ST_TO_ADDR
// game_strings := [ ] ;
 174: LD_ADDR_EXP 6
 178: PUSH
 179: EMPTY
 180: ST_TO_ADDR
// game_time := 0 0$00 ;
 181: LD_ADDR_EXP 3
 185: PUSH
 186: LD_INT 0
 188: ST_TO_ADDR
// mission_time := 0 0$00 ;
 189: LD_ADDR_EXP 34
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// skill := [ 5 , 7 , 9 ] [ game_difficulty ] ;
 197: LD_ADDR_EXP 16
 201: PUSH
 202: LD_INT 5
 204: PUSH
 205: LD_INT 7
 207: PUSH
 208: LD_INT 9
 210: PUSH
 211: EMPTY
 212: LIST
 213: LIST
 214: LIST
 215: PUSH
 216: LD_EXP 2
 220: ARRAY
 221: ST_TO_ADDR
// areas := [ a_swest , a_nwest , a_neast , a_seast ] ;
 222: LD_ADDR_EXP 15
 226: PUSH
 227: LD_INT 5
 229: PUSH
 230: LD_INT 6
 232: PUSH
 233: LD_INT 7
 235: PUSH
 236: LD_INT 8
 238: PUSH
 239: EMPTY
 240: LIST
 241: LIST
 242: LIST
 243: LIST
 244: ST_TO_ADDR
// meeting_start := false ;
 245: LD_ADDR_EXP 26
 249: PUSH
 250: LD_INT 0
 252: ST_TO_ADDR
// meeting_arive := false ;
 253: LD_ADDR_EXP 27
 257: PUSH
 258: LD_INT 0
 260: ST_TO_ADDR
// meeting_break := false ;
 261: LD_ADDR_EXP 28
 265: PUSH
 266: LD_INT 0
 268: ST_TO_ADDR
// meeting_end := false ;
 269: LD_ADDR_EXP 29
 273: PUSH
 274: LD_INT 0
 276: ST_TO_ADDR
// meeting_time := [ 4 4$00 , 3 3$40 , 3 3$20 ] [ game_difficulty ] ;
 277: LD_ADDR_EXP 30
 281: PUSH
 282: LD_INT 8400
 284: PUSH
 285: LD_INT 7700
 287: PUSH
 288: LD_INT 7000
 290: PUSH
 291: EMPTY
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: LD_EXP 2
 300: ARRAY
 301: ST_TO_ADDR
// arabian_force := [ 4 , 5 , 6 ] [ game_difficulty ] ;
 302: LD_ADDR_EXP 20
 306: PUSH
 307: LD_INT 4
 309: PUSH
 310: LD_INT 5
 312: PUSH
 313: LD_INT 6
 315: PUSH
 316: EMPTY
 317: LIST
 318: LIST
 319: LIST
 320: PUSH
 321: LD_EXP 2
 325: ARRAY
 326: ST_TO_ADDR
// american_force := [ 5 , 6 , 7 ] [ game_difficulty ] ;
 327: LD_ADDR_EXP 22
 331: PUSH
 332: LD_INT 5
 334: PUSH
 335: LD_INT 6
 337: PUSH
 338: LD_INT 7
 340: PUSH
 341: EMPTY
 342: LIST
 343: LIST
 344: LIST
 345: PUSH
 346: LD_EXP 2
 350: ARRAY
 351: ST_TO_ADDR
// russian_force := [ 6 , 7 , 8 ] [ game_difficulty ] ;
 352: LD_ADDR_EXP 21
 356: PUSH
 357: LD_INT 6
 359: PUSH
 360: LD_INT 7
 362: PUSH
 363: LD_INT 8
 365: PUSH
 366: EMPTY
 367: LIST
 368: LIST
 369: LIST
 370: PUSH
 371: LD_EXP 2
 375: ARRAY
 376: ST_TO_ADDR
// u_mine := false ;
 377: LD_ADDR_EXP 13
 381: PUSH
 382: LD_INT 0
 384: ST_TO_ADDR
// u_fac := false ;
 385: LD_ADDR_EXP 14
 389: PUSH
 390: LD_INT 0
 392: ST_TO_ADDR
// leopold_in_fort := false ;
 393: LD_ADDR_EXP 8
 397: PUSH
 398: LD_INT 0
 400: ST_TO_ADDR
// samuel_in_fort := false ;
 401: LD_ADDR_EXP 10
 405: PUSH
 406: LD_INT 0
 408: ST_TO_ADDR
// mortars_in_fort := false ;
 409: LD_ADDR_EXP 11
 413: PUSH
 414: LD_INT 0
 416: ST_TO_ADDR
// fort_destroyed := false ;
 417: LD_ADDR_EXP 32
 421: PUSH
 422: LD_INT 0
 424: ST_TO_ADDR
// hero_died := false ;
 425: LD_ADDR_EXP 33
 429: PUSH
 430: LD_INT 0
 432: ST_TO_ADDR
// dezert := false ;
 433: LD_ADDR_EXP 37
 437: PUSH
 438: LD_INT 0
 440: ST_TO_ADDR
// arabian_attack := false ;
 441: LD_ADDR_EXP 38
 445: PUSH
 446: LD_INT 0
 448: ST_TO_ADDR
// russian_attack := false ;
 449: LD_ADDR_EXP 39
 453: PUSH
 454: LD_INT 0
 456: ST_TO_ADDR
// american_attack := false ;
 457: LD_ADDR_EXP 40
 461: PUSH
 462: LD_INT 0
 464: ST_TO_ADDR
// american_help := false ;
 465: LD_ADDR_EXP 41
 469: PUSH
 470: LD_INT 0
 472: ST_TO_ADDR
// american_hchan := [ 91 , 81 , 71 ] [ game_difficulty ] ;
 473: LD_ADDR_EXP 36
 477: PUSH
 478: LD_INT 91
 480: PUSH
 481: LD_INT 81
 483: PUSH
 484: LD_INT 71
 486: PUSH
 487: EMPTY
 488: LIST
 489: LIST
 490: LIST
 491: PUSH
 492: LD_EXP 2
 496: ARRAY
 497: ST_TO_ADDR
// american_sib_bomb := false ;
 498: LD_ADDR_EXP 42
 502: PUSH
 503: LD_INT 0
 505: ST_TO_ADDR
// russian_trade := false ;
 506: LD_ADDR_EXP 43
 510: PUSH
 511: LD_INT 0
 513: ST_TO_ADDR
// russian_timer := 5 5$00 ;
 514: LD_ADDR_EXP 31
 518: PUSH
 519: LD_INT 10500
 521: ST_TO_ADDR
// cargo_ok := false ;
 522: LD_ADDR_EXP 35
 526: PUSH
 527: LD_INT 0
 529: ST_TO_ADDR
// heike_dialog1 := false ;
 530: LD_ADDR_EXP 44
 534: PUSH
 535: LD_INT 0
 537: ST_TO_ADDR
// heike_dialog2 := false ;
 538: LD_ADDR_EXP 45
 542: PUSH
 543: LD_INT 0
 545: ST_TO_ADDR
// american_timeing := [ 10 10$00 , 9 9$50 , 9 9$30 ] [ game_difficulty ] ;
 546: LD_ADDR_EXP 25
 550: PUSH
 551: LD_INT 21000
 553: PUSH
 554: LD_INT 20650
 556: PUSH
 557: LD_INT 19950
 559: PUSH
 560: EMPTY
 561: LIST
 562: LIST
 563: LIST
 564: PUSH
 565: LD_EXP 2
 569: ARRAY
 570: ST_TO_ADDR
// arabian_timeing := [ 8 8$00 , 7 7$30 , 6 6$40 ] [ game_difficulty ] ;
 571: LD_ADDR_EXP 23
 575: PUSH
 576: LD_INT 16800
 578: PUSH
 579: LD_INT 15750
 581: PUSH
 582: LD_INT 14000
 584: PUSH
 585: EMPTY
 586: LIST
 587: LIST
 588: LIST
 589: PUSH
 590: LD_EXP 2
 594: ARRAY
 595: ST_TO_ADDR
// russian_timeing := [ 11 11$00 , 10 10$30 , 9 9$20 ] [ game_difficulty ] ;
 596: LD_ADDR_EXP 24
 600: PUSH
 601: LD_INT 23100
 603: PUSH
 604: LD_INT 22050
 606: PUSH
 607: LD_INT 19600
 609: PUSH
 610: EMPTY
 611: LIST
 612: LIST
 613: LIST
 614: PUSH
 615: LD_EXP 2
 619: ARRAY
 620: ST_TO_ADDR
// ar_weapons := [ ar_rocket_launcher , ar_gun , ar_flame_thrower , ar_selfpropelled_bomb , ar_bio_bomb ] ;
 621: LD_ADDR_EXP 17
 625: PUSH
 626: LD_INT 28
 628: PUSH
 629: LD_INT 27
 631: PUSH
 632: LD_INT 26
 634: PUSH
 635: LD_INT 29
 637: PUSH
 638: LD_EXP 56
 642: PUSH
 643: EMPTY
 644: LIST
 645: LIST
 646: LIST
 647: LIST
 648: LIST
 649: ST_TO_ADDR
// us_weapons := [ us_rocket_launcher , us_heavy_gun , us_double_laser , us_laser ] ;
 650: LD_ADDR_EXP 19
 654: PUSH
 655: LD_INT 7
 657: PUSH
 658: LD_INT 6
 660: PUSH
 661: LD_INT 10
 663: PUSH
 664: LD_INT 9
 666: PUSH
 667: EMPTY
 668: LIST
 669: LIST
 670: LIST
 671: LIST
 672: ST_TO_ADDR
// ru_weapons := [ ru_rocket_launcher , ru_rocket , ru_heavy_gun , ru_heavy_gun ] ;
 673: LD_ADDR_EXP 18
 677: PUSH
 678: LD_INT 45
 680: PUSH
 681: LD_INT 47
 683: PUSH
 684: LD_INT 46
 686: PUSH
 687: LD_INT 46
 689: PUSH
 690: EMPTY
 691: LIST
 692: LIST
 693: LIST
 694: LIST
 695: ST_TO_ADDR
// end ;
 696: LD_VAR 0 1
 700: RET
// every 0 0$01 trigger game_on do var i , p , x , filter ;
 701: LD_EXP 1
 705: IFFALSE 3475
 707: GO 709
 709: DISABLE
 710: LD_INT 0
 712: PPUSH
 713: PPUSH
 714: PPUSH
 715: PPUSH
// begin enable ;
 716: ENABLE
// Display_Strings := [ #tick , game_time ] ^ game_strings ;
 717: LD_ADDR_OWVAR 47
 721: PUSH
 722: LD_STRING #tick
 724: PUSH
 725: LD_EXP 3
 729: PUSH
 730: EMPTY
 731: LIST
 732: LIST
 733: PUSH
 734: LD_EXP 6
 738: ADD
 739: ST_TO_ADDR
// game_time := RefreshTime ( game_time , true ) ;
 740: LD_ADDR_EXP 3
 744: PUSH
 745: LD_EXP 3
 749: PPUSH
 750: LD_INT 1
 752: PPUSH
 753: CALL 6981 0 2
 757: ST_TO_ADDR
// if meeting_start and meeting_time > 0 0$00 then
 758: LD_EXP 26
 762: PUSH
 763: LD_EXP 30
 767: PUSH
 768: LD_INT 0
 770: GREATER
 771: AND
 772: IFFALSE 809
// begin game_strings := [ #mtime , meeting_time ] ;
 774: LD_ADDR_EXP 6
 778: PUSH
 779: LD_STRING #mtime
 781: PUSH
 782: LD_EXP 30
 786: PUSH
 787: EMPTY
 788: LIST
 789: LIST
 790: ST_TO_ADDR
// meeting_time := RefreshTime ( meeting_time , false ) ;
 791: LD_ADDR_EXP 30
 795: PUSH
 796: LD_EXP 30
 800: PPUSH
 801: LD_INT 0
 803: PPUSH
 804: CALL 6981 0 2
 808: ST_TO_ADDR
// end ; if meeting_arive then
 809: LD_EXP 27
 813: IFFALSE 833
// mission_time := RefreshTime ( mission_time , true ) ;
 815: LD_ADDR_EXP 34
 819: PUSH
 820: LD_EXP 34
 824: PPUSH
 825: LD_INT 1
 827: PPUSH
 828: CALL 6981 0 2
 832: ST_TO_ADDR
// if arabian_attack and arabian_timeing > 0 0$00 and meeting_arive then
 833: LD_EXP 38
 837: PUSH
 838: LD_EXP 23
 842: PUSH
 843: LD_INT 0
 845: GREATER
 846: AND
 847: PUSH
 848: LD_EXP 27
 852: AND
 853: IFFALSE 873
// begin arabian_timeing := RefreshTime ( arabian_timeing , false ) ;
 855: LD_ADDR_EXP 23
 859: PUSH
 860: LD_EXP 23
 864: PPUSH
 865: LD_INT 0
 867: PPUSH
 868: CALL 6981 0 2
 872: ST_TO_ADDR
// end ; if russian_attack and russian_timeing > 0 0$00 and meeting_arive then
 873: LD_EXP 39
 877: PUSH
 878: LD_EXP 24
 882: PUSH
 883: LD_INT 0
 885: GREATER
 886: AND
 887: PUSH
 888: LD_EXP 27
 892: AND
 893: IFFALSE 913
// begin russian_timeing := RefreshTime ( russian_timeing , false ) ;
 895: LD_ADDR_EXP 24
 899: PUSH
 900: LD_EXP 24
 904: PPUSH
 905: LD_INT 0
 907: PPUSH
 908: CALL 6981 0 2
 912: ST_TO_ADDR
// end ; if american_attack and american_timeing > 0 0$00 and meeting_arive then
 913: LD_EXP 40
 917: PUSH
 918: LD_EXP 25
 922: PUSH
 923: LD_INT 0
 925: GREATER
 926: AND
 927: PUSH
 928: LD_EXP 27
 932: AND
 933: IFFALSE 953
// begin american_timeing := RefreshTime ( american_timeing , false ) ;
 935: LD_ADDR_EXP 25
 939: PUSH
 940: LD_EXP 25
 944: PPUSH
 945: LD_INT 0
 947: PPUSH
 948: CALL 6981 0 2
 952: ST_TO_ADDR
// end ; if russian_trade and russian_timer > 0 0$00 then
 953: LD_EXP 43
 957: PUSH
 958: LD_EXP 31
 962: PUSH
 963: LD_INT 0
 965: GREATER
 966: AND
 967: IFFALSE 1004
// begin game_strings := [ #rtime , russian_timer ] ;
 969: LD_ADDR_EXP 6
 973: PUSH
 974: LD_STRING #rtime
 976: PUSH
 977: LD_EXP 31
 981: PUSH
 982: EMPTY
 983: LIST
 984: LIST
 985: ST_TO_ADDR
// russian_timer := RefreshTime ( russian_timer , false ) ;
 986: LD_ADDR_EXP 31
 990: PUSH
 991: LD_EXP 31
 995: PPUSH
 996: LD_INT 0
 998: PPUSH
 999: CALL 6981 0 2
1003: ST_TO_ADDR
// end ; if russian_trade and russian_timer = 0 0$00 or cargo_ok then
1004: LD_EXP 43
1008: PUSH
1009: LD_EXP 31
1013: PUSH
1014: LD_INT 0
1016: EQUAL
1017: AND
1018: PUSH
1019: LD_EXP 35
1023: OR
1024: IFFALSE 1033
// game_strings := [ ] ;
1026: LD_ADDR_EXP 6
1030: PUSH
1031: EMPTY
1032: ST_TO_ADDR
// if dezert = false and tick mod 33600 = 0 then
1033: LD_EXP 37
1037: PUSH
1038: LD_INT 0
1040: EQUAL
1041: PUSH
1042: LD_OWVAR 1
1046: PUSH
1047: LD_INT 33600
1049: MOD
1050: PUSH
1051: LD_INT 0
1053: EQUAL
1054: AND
1055: IFFALSE 1115
// begin p := Rand ( 1 , 5 ) ;
1057: LD_ADDR_VAR 0 2
1061: PUSH
1062: LD_INT 1
1064: PPUSH
1065: LD_INT 5
1067: PPUSH
1068: CALL_OW 12
1072: ST_TO_ADDR
// if p <= [ 4 , 3 , 3 ] [ game_difficulty ] then
1073: LD_VAR 0 2
1077: PUSH
1078: LD_INT 4
1080: PUSH
1081: LD_INT 3
1083: PUSH
1084: LD_INT 3
1086: PUSH
1087: EMPTY
1088: LIST
1089: LIST
1090: LIST
1091: PUSH
1092: LD_EXP 2
1096: ARRAY
1097: LESSEQUAL
1098: IFFALSE 1115
// begin RaiseSailEvent ( 92 ) ;
1100: LD_INT 92
1102: PPUSH
1103: CALL_OW 427
// dezert := true ;
1107: LD_ADDR_EXP 37
1111: PUSH
1112: LD_INT 1
1114: ST_TO_ADDR
// end ; end ; if tick mod 8400 = 0 then
1115: LD_OWVAR 1
1119: PUSH
1120: LD_INT 8400
1122: MOD
1123: PUSH
1124: LD_INT 0
1126: EQUAL
1127: IFFALSE 1136
// RaiseSailEvent ( 101 ) ;
1129: LD_INT 101
1131: PPUSH
1132: CALL_OW 427
// if MineExist ( 8 ) and u_mine = false then
1136: LD_INT 8
1138: PPUSH
1139: CALL 7035 0 1
1143: PUSH
1144: LD_EXP 13
1148: PUSH
1149: LD_INT 0
1151: EQUAL
1152: AND
1153: IFFALSE 1170
// begin u_mine := true ;
1155: LD_ADDR_EXP 13
1159: PUSH
1160: LD_INT 1
1162: ST_TO_ADDR
// ChangeMissionObjectives ( DS-T1m ) ;
1163: LD_STRING DS-T1m
1165: PPUSH
1166: CALL_OW 337
// end ; if FacExist ( 8 ) and u_fac = false then
1170: LD_INT 8
1172: PPUSH
1173: CALL 7097 0 1
1177: PUSH
1178: LD_EXP 14
1182: PUSH
1183: LD_INT 0
1185: EQUAL
1186: AND
1187: IFFALSE 1204
// begin u_fac := true ;
1189: LD_ADDR_EXP 14
1193: PUSH
1194: LD_INT 1
1196: ST_TO_ADDR
// ChangeMissionObjectives ( DS-T1f ) ;
1197: LD_STRING DS-T1f
1199: PPUSH
1200: CALL_OW 337
// end ; if hero_died then
1204: LD_EXP 33
1208: IFFALSE 1217
// YouLost ( DS-h1 ) ;
1210: LD_STRING DS-h1
1212: PPUSH
1213: CALL_OW 104
// if fort_destroyed then
1217: LD_EXP 32
1221: IFFALSE 1230
// YouLost ( DS-h2 ) ;
1223: LD_STRING DS-h2
1225: PPUSH
1226: CALL_OW 104
// if GetDistUnits ( leopold , l_cmndr ) > 6 and meeting_start = false then
1230: LD_EXP 7
1234: PPUSH
1235: LD_EXP 49
1239: PPUSH
1240: CALL_OW 296
1244: PUSH
1245: LD_INT 6
1247: GREATER
1248: PUSH
1249: LD_EXP 26
1253: PUSH
1254: LD_INT 0
1256: EQUAL
1257: AND
1258: IFFALSE 1281
// begin if not HasTask ( leopold ) then
1260: LD_EXP 7
1264: PPUSH
1265: CALL_OW 314
1269: NOT
1270: IFFALSE 1279
// RaiseSailEvent ( 1 ) ;
1272: LD_INT 1
1274: PPUSH
1275: CALL_OW 427
// end else
1279: GO 1298
// if meeting_start = false then
1281: LD_EXP 26
1285: PUSH
1286: LD_INT 0
1288: EQUAL
1289: IFFALSE 1298
// begin RaiseSailEvent ( 2 ) ;
1291: LD_INT 2
1293: PPUSH
1294: CALL_OW 427
// end ; if game_time >= [ 50 50$00 , 62 62$30 , 72 72$00 ] [ game_difficulty ] and meeting_end = false then
1298: LD_EXP 3
1302: PUSH
1303: LD_INT 105000
1305: PUSH
1306: LD_INT 131250
1308: PUSH
1309: LD_INT 151200
1311: PUSH
1312: EMPTY
1313: LIST
1314: LIST
1315: LIST
1316: PUSH
1317: LD_EXP 2
1321: ARRAY
1322: GREATEREQUAL
1323: PUSH
1324: LD_EXP 29
1328: PUSH
1329: LD_INT 0
1331: EQUAL
1332: AND
1333: IFFALSE 1350
// begin meeting_end := true ;
1335: LD_ADDR_EXP 29
1339: PUSH
1340: LD_INT 1
1342: ST_TO_ADDR
// RaiseSailEvent ( 200 ) ;
1343: LD_INT 200
1345: PPUSH
1346: CALL_OW 427
// end ; if meeting_time = 0 0$00 and meeting_arive = false then
1350: LD_EXP 30
1354: PUSH
1355: LD_INT 0
1357: EQUAL
1358: PUSH
1359: LD_EXP 27
1363: PUSH
1364: LD_INT 0
1366: EQUAL
1367: AND
1368: IFFALSE 1392
// begin meeting_arive := true ;
1370: LD_ADDR_EXP 27
1374: PUSH
1375: LD_INT 1
1377: ST_TO_ADDR
// game_strings := [ ] ;
1378: LD_ADDR_EXP 6
1382: PUSH
1383: EMPTY
1384: ST_TO_ADDR
// RaiseSailEvent ( 10 ) ;
1385: LD_INT 10
1387: PPUSH
1388: CALL_OW 427
// end ; if meeting_arive then
1392: LD_EXP 27
1396: IFFALSE 2195
// begin if arabian_attack = false and tick mod 4200 = 0 then
1398: LD_EXP 38
1402: PUSH
1403: LD_INT 0
1405: EQUAL
1406: PUSH
1407: LD_OWVAR 1
1411: PUSH
1412: LD_INT 4200
1414: MOD
1415: PUSH
1416: LD_INT 0
1418: EQUAL
1419: AND
1420: IFFALSE 1473
// begin p := Rand ( 1 , 100 ) ;
1422: LD_ADDR_VAR 0 2
1426: PUSH
1427: LD_INT 1
1429: PPUSH
1430: LD_INT 100
1432: PPUSH
1433: CALL_OW 12
1437: ST_TO_ADDR
// if p <= [ 85 , 90 , 95 ] [ game_difficulty ] then
1438: LD_VAR 0 2
1442: PUSH
1443: LD_INT 85
1445: PUSH
1446: LD_INT 90
1448: PUSH
1449: LD_INT 95
1451: PUSH
1452: EMPTY
1453: LIST
1454: LIST
1455: LIST
1456: PUSH
1457: LD_EXP 2
1461: ARRAY
1462: LESSEQUAL
1463: IFFALSE 1473
// arabian_attack := true ;
1465: LD_ADDR_EXP 38
1469: PUSH
1470: LD_INT 1
1472: ST_TO_ADDR
// end ; if russian_trade = false and russian_attack = false and tick > 52500 then
1473: LD_EXP 43
1477: PUSH
1478: LD_INT 0
1480: EQUAL
1481: PUSH
1482: LD_EXP 39
1486: PUSH
1487: LD_INT 0
1489: EQUAL
1490: AND
1491: PUSH
1492: LD_OWVAR 1
1496: PUSH
1497: LD_INT 52500
1499: GREATER
1500: AND
1501: IFFALSE 1572
// begin russian_trade = true ;
1503: LD_ADDR_EXP 43
1507: PUSH
1508: LD_INT 1
1510: ST_TO_ADDR
// DialogueOn ;
1511: CALL_OW 6
// SayRadio ( ru_comander , DS-DR-RTr ) ;
1515: LD_EXP 47
1519: PPUSH
1520: LD_STRING DS-DR-RTr
1522: PPUSH
1523: CALL_OW 94
// Say ( l_cmndr , DS-DC-RTr ) ;
1527: LD_EXP 49
1531: PPUSH
1532: LD_STRING DS-DC-RTr
1534: PPUSH
1535: CALL_OW 88
// SayRadio ( ru_comander , DS-DR-RTr2 ) ;
1539: LD_EXP 47
1543: PPUSH
1544: LD_STRING DS-DR-RTr2
1546: PPUSH
1547: CALL_OW 94
// DialogueOff ;
1551: CALL_OW 7
// ChangeMissionObjectives ( DS-T2 ) ;
1555: LD_STRING DS-T2
1557: PPUSH
1558: CALL_OW 337
// SetAreaMapShow ( tree , 1 ) ;
1562: LD_INT 10
1564: PPUSH
1565: LD_INT 1
1567: PPUSH
1568: CALL_OW 424
// end ; if russian_trade and cargo_ok = false and russian_timer > 0 0$00 then
1572: LD_EXP 43
1576: PUSH
1577: LD_EXP 35
1581: PUSH
1582: LD_INT 0
1584: EQUAL
1585: AND
1586: PUSH
1587: LD_EXP 31
1591: PUSH
1592: LD_INT 0
1594: GREATER
1595: AND
1596: IFFALSE 1845
// begin if FilterUnitsInArea ( tree , ( [ [ f_empty ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] , [ f_not , [ f_control , control_remote ] ] ] ) ) > 0 then
1598: LD_INT 10
1600: PPUSH
1601: LD_INT 58
1603: PUSH
1604: EMPTY
1605: LIST
1606: PUSH
1607: LD_INT 2
1609: PUSH
1610: LD_INT 34
1612: PUSH
1613: LD_INT 32
1615: PUSH
1616: EMPTY
1617: LIST
1618: LIST
1619: PUSH
1620: LD_INT 34
1622: PUSH
1623: LD_INT 12
1625: PUSH
1626: EMPTY
1627: LIST
1628: LIST
1629: PUSH
1630: EMPTY
1631: LIST
1632: LIST
1633: LIST
1634: PUSH
1635: LD_INT 3
1637: PUSH
1638: LD_INT 33
1640: PUSH
1641: LD_INT 2
1643: PUSH
1644: EMPTY
1645: LIST
1646: LIST
1647: PUSH
1648: EMPTY
1649: LIST
1650: LIST
1651: PUSH
1652: EMPTY
1653: LIST
1654: LIST
1655: LIST
1656: PPUSH
1657: CALL_OW 70
1661: PUSH
1662: LD_INT 0
1664: GREATER
1665: IFFALSE 1845
// if GetCargo ( FilterUnitsInArea ( tree , ( [ [ f_empty ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] , [ f_not , [ f_control , control_remote ] ] ] ) ) [ 1 ] , mat_siberit ) = 100 then
1667: LD_INT 10
1669: PPUSH
1670: LD_INT 58
1672: PUSH
1673: EMPTY
1674: LIST
1675: PUSH
1676: LD_INT 2
1678: PUSH
1679: LD_INT 34
1681: PUSH
1682: LD_INT 32
1684: PUSH
1685: EMPTY
1686: LIST
1687: LIST
1688: PUSH
1689: LD_INT 34
1691: PUSH
1692: LD_INT 12
1694: PUSH
1695: EMPTY
1696: LIST
1697: LIST
1698: PUSH
1699: EMPTY
1700: LIST
1701: LIST
1702: LIST
1703: PUSH
1704: LD_INT 3
1706: PUSH
1707: LD_INT 33
1709: PUSH
1710: LD_INT 2
1712: PUSH
1713: EMPTY
1714: LIST
1715: LIST
1716: PUSH
1717: EMPTY
1718: LIST
1719: LIST
1720: PUSH
1721: EMPTY
1722: LIST
1723: LIST
1724: LIST
1725: PPUSH
1726: CALL_OW 70
1730: PUSH
1731: LD_INT 1
1733: ARRAY
1734: PPUSH
1735: LD_INT 3
1737: PPUSH
1738: CALL_OW 289
1742: PUSH
1743: LD_INT 100
1745: EQUAL
1746: IFFALSE 1845
// begin cargo_ok := true ;
1748: LD_ADDR_EXP 35
1752: PUSH
1753: LD_INT 1
1755: ST_TO_ADDR
// RemoveUnit ( FilterUnitsInArea ( tree , ( [ [ f_empty ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] , [ f_not , [ f_control , control_remote ] ] ] ) ) [ 1 ] ) ;
1756: LD_INT 10
1758: PPUSH
1759: LD_INT 58
1761: PUSH
1762: EMPTY
1763: LIST
1764: PUSH
1765: LD_INT 2
1767: PUSH
1768: LD_INT 34
1770: PUSH
1771: LD_INT 32
1773: PUSH
1774: EMPTY
1775: LIST
1776: LIST
1777: PUSH
1778: LD_INT 34
1780: PUSH
1781: LD_INT 12
1783: PUSH
1784: EMPTY
1785: LIST
1786: LIST
1787: PUSH
1788: EMPTY
1789: LIST
1790: LIST
1791: LIST
1792: PUSH
1793: LD_INT 3
1795: PUSH
1796: LD_INT 33
1798: PUSH
1799: LD_INT 2
1801: PUSH
1802: EMPTY
1803: LIST
1804: LIST
1805: PUSH
1806: EMPTY
1807: LIST
1808: LIST
1809: PUSH
1810: EMPTY
1811: LIST
1812: LIST
1813: LIST
1814: PPUSH
1815: CALL_OW 70
1819: PUSH
1820: LD_INT 1
1822: ARRAY
1823: PPUSH
1824: CALL_OW 64
// ChangeMissionObjectives ( DS-T2-out ) ;
1828: LD_STRING DS-T2-out
1830: PPUSH
1831: CALL_OW 337
// SetAreaMapShow ( tree , 0 ) ;
1835: LD_INT 10
1837: PPUSH
1838: LD_INT 0
1840: PPUSH
1841: CALL_OW 424
// end ; end ; if russian_attack = false and russian_trade and cargo_ok = false and russian_timer = 0 0$00 then
1845: LD_EXP 39
1849: PUSH
1850: LD_INT 0
1852: EQUAL
1853: PUSH
1854: LD_EXP 43
1858: AND
1859: PUSH
1860: LD_EXP 35
1864: PUSH
1865: LD_INT 0
1867: EQUAL
1868: AND
1869: PUSH
1870: LD_EXP 31
1874: PUSH
1875: LD_INT 0
1877: EQUAL
1878: AND
1879: IFFALSE 1906
// begin russian_attack := true ;
1881: LD_ADDR_EXP 39
1885: PUSH
1886: LD_INT 1
1888: ST_TO_ADDR
// ChangeMissionObjectives ( DS-T2-out ) ;
1889: LD_STRING DS-T2-out
1891: PPUSH
1892: CALL_OW 337
// SetAreaMapShow ( tree , 0 ) ;
1896: LD_INT 10
1898: PPUSH
1899: LD_INT 0
1901: PPUSH
1902: CALL_OW 424
// end ; if russian_trade = false and russian_attack = false and american_attack = false and tick mod 21000 = 0 then
1906: LD_EXP 43
1910: PUSH
1911: LD_INT 0
1913: EQUAL
1914: PUSH
1915: LD_EXP 39
1919: PUSH
1920: LD_INT 0
1922: EQUAL
1923: AND
1924: PUSH
1925: LD_EXP 40
1929: PUSH
1930: LD_INT 0
1932: EQUAL
1933: AND
1934: PUSH
1935: LD_OWVAR 1
1939: PUSH
1940: LD_INT 21000
1942: MOD
1943: PUSH
1944: LD_INT 0
1946: EQUAL
1947: AND
1948: IFFALSE 2001
// begin p := Rand ( 1 , 100 ) ;
1950: LD_ADDR_VAR 0 2
1954: PUSH
1955: LD_INT 1
1957: PPUSH
1958: LD_INT 100
1960: PPUSH
1961: CALL_OW 12
1965: ST_TO_ADDR
// if p <= [ 35 , 45 , 55 ] [ game_difficulty ] then
1966: LD_VAR 0 2
1970: PUSH
1971: LD_INT 35
1973: PUSH
1974: LD_INT 45
1976: PUSH
1977: LD_INT 55
1979: PUSH
1980: EMPTY
1981: LIST
1982: LIST
1983: LIST
1984: PUSH
1985: LD_EXP 2
1989: ARRAY
1990: LESSEQUAL
1991: IFFALSE 2001
// russian_attack := true ;
1993: LD_ADDR_EXP 39
1997: PUSH
1998: LD_INT 1
2000: ST_TO_ADDR
// end ; if american_help = false and american_attack = false and russian_attack = false and tick mod 31500 = 0 then
2001: LD_EXP 41
2005: PUSH
2006: LD_INT 0
2008: EQUAL
2009: PUSH
2010: LD_EXP 40
2014: PUSH
2015: LD_INT 0
2017: EQUAL
2018: AND
2019: PUSH
2020: LD_EXP 39
2024: PUSH
2025: LD_INT 0
2027: EQUAL
2028: AND
2029: PUSH
2030: LD_OWVAR 1
2034: PUSH
2035: LD_INT 31500
2037: MOD
2038: PUSH
2039: LD_INT 0
2041: EQUAL
2042: AND
2043: IFFALSE 2096
// begin p := Rand ( 1 , 100 ) ;
2045: LD_ADDR_VAR 0 2
2049: PUSH
2050: LD_INT 1
2052: PPUSH
2053: LD_INT 100
2055: PPUSH
2056: CALL_OW 12
2060: ST_TO_ADDR
// if p <= [ 33 , 44 , 55 ] [ game_difficulty ] then
2061: LD_VAR 0 2
2065: PUSH
2066: LD_INT 33
2068: PUSH
2069: LD_INT 44
2071: PUSH
2072: LD_INT 55
2074: PUSH
2075: EMPTY
2076: LIST
2077: LIST
2078: LIST
2079: PUSH
2080: LD_EXP 2
2084: ARRAY
2085: LESSEQUAL
2086: IFFALSE 2096
// american_attack := true ;
2088: LD_ADDR_EXP 40
2092: PUSH
2093: LD_INT 1
2095: ST_TO_ADDR
// end ; if american_attack = false and russian_attack = false and american_help = false and tick mod 21200 = 0 then
2096: LD_EXP 40
2100: PUSH
2101: LD_INT 0
2103: EQUAL
2104: PUSH
2105: LD_EXP 39
2109: PUSH
2110: LD_INT 0
2112: EQUAL
2113: AND
2114: PUSH
2115: LD_EXP 41
2119: PUSH
2120: LD_INT 0
2122: EQUAL
2123: AND
2124: PUSH
2125: LD_OWVAR 1
2129: PUSH
2130: LD_INT 21200
2132: MOD
2133: PUSH
2134: LD_INT 0
2136: EQUAL
2137: AND
2138: IFFALSE 2195
// begin p := Rand ( 1 , 100 ) ;
2140: LD_ADDR_VAR 0 2
2144: PUSH
2145: LD_INT 1
2147: PPUSH
2148: LD_INT 100
2150: PPUSH
2151: CALL_OW 12
2155: ST_TO_ADDR
// if p <= american_hchan then
2156: LD_VAR 0 2
2160: PUSH
2161: LD_EXP 36
2165: LESSEQUAL
2166: IFFALSE 2195
// begin american_help := true ;
2168: LD_ADDR_EXP 41
2172: PUSH
2173: LD_INT 1
2175: ST_TO_ADDR
// SayRadio ( am_comander , DS-amhelp ) ;
2176: LD_EXP 46
2180: PPUSH
2181: LD_STRING DS-amhelp
2183: PPUSH
2184: CALL_OW 94
// RaiseSailEvent ( 91 ) ;
2188: LD_INT 91
2190: PPUSH
2191: CALL_OW 427
// end ; end ; end ; if american_attack and american_timeing = 0 0$00 and FilterAllUnits ( [ f_side , 1 ] ) = 0 then
2195: LD_EXP 40
2199: PUSH
2200: LD_EXP 25
2204: PUSH
2205: LD_INT 0
2207: EQUAL
2208: AND
2209: PUSH
2210: LD_INT 22
2212: PUSH
2213: LD_INT 1
2215: PUSH
2216: EMPTY
2217: LIST
2218: LIST
2219: PPUSH
2220: CALL_OW 69
2224: PUSH
2225: LD_INT 0
2227: EQUAL
2228: AND
2229: IFFALSE 2331
// begin american_timeing := Rand ( 17 17$00 , 20 20$00 ) ;
2231: LD_ADDR_EXP 25
2235: PUSH
2236: LD_INT 35700
2238: PPUSH
2239: LD_INT 42000
2241: PPUSH
2242: CALL_OW 12
2246: ST_TO_ADDR
// SayRadio ( scout , DS-DZ-U ) ;
2247: LD_EXP 12
2251: PPUSH
2252: LD_STRING DS-DZ-U
2254: PPUSH
2255: CALL_OW 94
// Wait ( 0 0$33 ) ;
2259: LD_INT 1155
2261: PPUSH
2262: CALL_OW 67
// x := Rand ( 1 , 2 ) ;
2266: LD_ADDR_VAR 0 3
2270: PUSH
2271: LD_INT 1
2273: PPUSH
2274: LD_INT 2
2276: PPUSH
2277: CALL_OW 12
2281: ST_TO_ADDR
// case x of 1 :
2282: LD_VAR 0 3
2286: PUSH
2287: LD_INT 1
2289: DOUBLE
2290: EQUAL
2291: IFTRUE 2295
2293: GO 2305
2295: POP
// RaiseSailEvent ( 41 ) ; 2 :
2296: LD_INT 41
2298: PPUSH
2299: CALL_OW 427
2303: GO 2324
2305: LD_INT 2
2307: DOUBLE
2308: EQUAL
2309: IFTRUE 2313
2311: GO 2323
2313: POP
// RaiseSailEvent ( 42 ) ; end ;
2314: LD_INT 42
2316: PPUSH
2317: CALL_OW 427
2321: GO 2324
2323: POP
// RaiseSailEvent ( 42 ) ;
2324: LD_INT 42
2326: PPUSH
2327: CALL_OW 427
// end ; if russian_attack and russian_timeing = 0 0$00 and FilterAllUnits ( [ f_side , 3 ] ) = 0 then
2331: LD_EXP 39
2335: PUSH
2336: LD_EXP 24
2340: PUSH
2341: LD_INT 0
2343: EQUAL
2344: AND
2345: PUSH
2346: LD_INT 22
2348: PUSH
2349: LD_INT 3
2351: PUSH
2352: EMPTY
2353: LIST
2354: LIST
2355: PPUSH
2356: CALL_OW 69
2360: PUSH
2361: LD_INT 0
2363: EQUAL
2364: AND
2365: IFFALSE 2421
// begin russian_timeing := Rand ( 17 17$00 , 20 20$00 ) ;
2367: LD_ADDR_EXP 24
2371: PUSH
2372: LD_INT 35700
2374: PPUSH
2375: LD_INT 42000
2377: PPUSH
2378: CALL_OW 12
2382: ST_TO_ADDR
// SayRadio ( scout , DS-DZ-R ) ;
2383: LD_EXP 12
2387: PPUSH
2388: LD_STRING DS-DZ-R
2390: PPUSH
2391: CALL_OW 94
// Wait ( 0 0$45 ) ;
2395: LD_INT 1575
2397: PPUSH
2398: CALL_OW 67
// SayRadio ( ru_comander , DS-DR-R1 ) ;
2402: LD_EXP 47
2406: PPUSH
2407: LD_STRING DS-DR-R1
2409: PPUSH
2410: CALL_OW 94
// RaiseSailEvent ( 51 ) ;
2414: LD_INT 51
2416: PPUSH
2417: CALL_OW 427
// end ; if mission_time >= 25 25$00 and arabian_force < 10 then
2421: LD_EXP 34
2425: PUSH
2426: LD_INT 52500
2428: GREATEREQUAL
2429: PUSH
2430: LD_EXP 20
2434: PUSH
2435: LD_INT 10
2437: LESS
2438: AND
2439: IFFALSE 2463
// begin mission_time := 0 0$00 ;
2441: LD_ADDR_EXP 34
2445: PUSH
2446: LD_INT 0
2448: ST_TO_ADDR
// arabian_force := arabian_force + 1 ;
2449: LD_ADDR_EXP 20
2453: PUSH
2454: LD_EXP 20
2458: PUSH
2459: LD_INT 1
2461: PLUS
2462: ST_TO_ADDR
// end ; if arabian_timeing = 0 0$00 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_weapon , ar_control_tower ] ] ] ) = 0 then
2463: LD_EXP 23
2467: PUSH
2468: LD_INT 0
2470: EQUAL
2471: PUSH
2472: LD_INT 22
2474: PUSH
2475: LD_INT 2
2477: PUSH
2478: EMPTY
2479: LIST
2480: LIST
2481: PUSH
2482: LD_INT 3
2484: PUSH
2485: LD_INT 34
2487: PUSH
2488: LD_INT 31
2490: PUSH
2491: EMPTY
2492: LIST
2493: LIST
2494: PUSH
2495: EMPTY
2496: LIST
2497: LIST
2498: PUSH
2499: EMPTY
2500: LIST
2501: LIST
2502: PPUSH
2503: CALL_OW 69
2507: PUSH
2508: LD_INT 0
2510: EQUAL
2511: AND
2512: IFFALSE 2710
// begin arabian_timeing := 7 7$30 ;
2514: LD_ADDR_EXP 23
2518: PUSH
2519: LD_INT 15750
2521: ST_TO_ADDR
// x := Rand ( 1 , 3 ) ;
2522: LD_ADDR_VAR 0 3
2526: PUSH
2527: LD_INT 1
2529: PPUSH
2530: LD_INT 3
2532: PPUSH
2533: CALL_OW 12
2537: ST_TO_ADDR
// SayRadio ( scout , DS-DZ-H ) ;
2538: LD_EXP 12
2542: PPUSH
2543: LD_STRING DS-DZ-H
2545: PPUSH
2546: CALL_OW 94
// case x of 1 :
2550: LD_VAR 0 3
2554: PUSH
2555: LD_INT 1
2557: DOUBLE
2558: EQUAL
2559: IFTRUE 2563
2561: GO 2573
2563: POP
// RaiseSailEvent ( 31 ) ; 2 :
2564: LD_INT 31
2566: PPUSH
2567: CALL_OW 427
2571: GO 2610
2573: LD_INT 2
2575: DOUBLE
2576: EQUAL
2577: IFTRUE 2581
2579: GO 2591
2581: POP
// RaiseSailEvent ( 32 ) ; 3 :
2582: LD_INT 32
2584: PPUSH
2585: CALL_OW 427
2589: GO 2610
2591: LD_INT 3
2593: DOUBLE
2594: EQUAL
2595: IFTRUE 2599
2597: GO 2609
2599: POP
// RaiseSailEvent ( 33 ) ; end ;
2600: LD_INT 33
2602: PPUSH
2603: CALL_OW 427
2607: GO 2610
2609: POP
// RaiseSailEvent ( 33 ) ;
2610: LD_INT 33
2612: PPUSH
2613: CALL_OW 427
// if game_difficulty > 1 then
2617: LD_EXP 2
2621: PUSH
2622: LD_INT 1
2624: GREATER
2625: IFFALSE 2634
// RaiseSailEvent ( 33 ) ;
2627: LD_INT 33
2629: PPUSH
2630: CALL_OW 427
// if heike_dialog1 = false then
2634: LD_EXP 44
2638: PUSH
2639: LD_INT 0
2641: EQUAL
2642: IFFALSE 2673
// begin heike_dialog1 := true ;
2644: LD_ADDR_EXP 44
2648: PUSH
2649: LD_INT 1
2651: ST_TO_ADDR
// Wait ( 0 0$03 ) ;
2652: LD_INT 105
2654: PPUSH
2655: CALL_OW 67
// SayRadio ( ar_comander , heike1 ) ;
2659: LD_EXP 48
2663: PPUSH
2664: LD_STRING heike1
2666: PPUSH
2667: CALL_OW 94
// end else
2671: GO 2710
// if heike_dialog2 = false then
2673: LD_EXP 45
2677: PUSH
2678: LD_INT 0
2680: EQUAL
2681: IFFALSE 2710
// begin heike_dialog2 := true ;
2683: LD_ADDR_EXP 45
2687: PUSH
2688: LD_INT 1
2690: ST_TO_ADDR
// Wait ( 0 0$03 ) ;
2691: LD_INT 105
2693: PPUSH
2694: CALL_OW 67
// SayRadio ( ar_comander , heike2 ) ;
2698: LD_EXP 48
2702: PPUSH
2703: LD_STRING heike2
2705: PPUSH
2706: CALL_OW 94
// end ; end ; if FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) > 0 then
2710: LD_INT 22
2712: PUSH
2713: LD_INT 2
2715: PUSH
2716: EMPTY
2717: LIST
2718: LIST
2719: PUSH
2720: LD_INT 33
2722: PUSH
2723: LD_INT 2
2725: PUSH
2726: EMPTY
2727: LIST
2728: LIST
2729: PUSH
2730: EMPTY
2731: LIST
2732: LIST
2733: PPUSH
2734: CALL_OW 69
2738: PUSH
2739: LD_INT 0
2741: GREATER
2742: IFFALSE 2751
// ConnectWithTower ( 2 ) ;
2744: LD_INT 2
2746: PPUSH
2747: CALL 7145 0 1
// if FilterAllUnits ( [ [ [ f_side , 2 ] , [ f_not , [ f_weapon , ar_control_tower ] ] , [ f_not , [ f_hastask ] ] ] ] ) > 0 then
2751: LD_INT 22
2753: PUSH
2754: LD_INT 2
2756: PUSH
2757: EMPTY
2758: LIST
2759: LIST
2760: PUSH
2761: LD_INT 3
2763: PUSH
2764: LD_INT 34
2766: PUSH
2767: LD_INT 31
2769: PUSH
2770: EMPTY
2771: LIST
2772: LIST
2773: PUSH
2774: EMPTY
2775: LIST
2776: LIST
2777: PUSH
2778: LD_INT 3
2780: PUSH
2781: LD_INT 60
2783: PUSH
2784: EMPTY
2785: LIST
2786: PUSH
2787: EMPTY
2788: LIST
2789: LIST
2790: PUSH
2791: EMPTY
2792: LIST
2793: LIST
2794: LIST
2795: PUSH
2796: EMPTY
2797: LIST
2798: PPUSH
2799: CALL_OW 69
2803: PUSH
2804: LD_INT 0
2806: GREATER
2807: IFFALSE 2953
// begin filter := FilterAllUnits ( [ [ [ f_side , 2 ] , [ f_not , [ f_weapon , ar_control_tower ] ] , [ f_not , [ f_hastask ] ] ] ] ) ;
2809: LD_ADDR_VAR 0 4
2813: PUSH
2814: LD_INT 22
2816: PUSH
2817: LD_INT 2
2819: PUSH
2820: EMPTY
2821: LIST
2822: LIST
2823: PUSH
2824: LD_INT 3
2826: PUSH
2827: LD_INT 34
2829: PUSH
2830: LD_INT 31
2832: PUSH
2833: EMPTY
2834: LIST
2835: LIST
2836: PUSH
2837: EMPTY
2838: LIST
2839: LIST
2840: PUSH
2841: LD_INT 3
2843: PUSH
2844: LD_INT 60
2846: PUSH
2847: EMPTY
2848: LIST
2849: PUSH
2850: EMPTY
2851: LIST
2852: LIST
2853: PUSH
2854: EMPTY
2855: LIST
2856: LIST
2857: LIST
2858: PUSH
2859: EMPTY
2860: LIST
2861: PPUSH
2862: CALL_OW 69
2866: ST_TO_ADDR
// x := SpeedFilter ( FilterAllUnits ( [ f_enemy , 2 ] ) , 20 ) ;
2867: LD_ADDR_VAR 0 3
2871: PUSH
2872: LD_INT 81
2874: PUSH
2875: LD_INT 2
2877: PUSH
2878: EMPTY
2879: LIST
2880: LIST
2881: PPUSH
2882: CALL_OW 69
2886: PPUSH
2887: LD_INT 20
2889: PPUSH
2890: CALL 8528 0 2
2894: ST_TO_ADDR
// for i = 1 to filter do
2895: LD_ADDR_VAR 0 1
2899: PUSH
2900: DOUBLE
2901: LD_INT 1
2903: DEC
2904: ST_TO_ADDR
2905: LD_VAR 0 4
2909: PUSH
2910: FOR_TO
2911: IFFALSE 2951
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( x , filter [ i ] ) ) ;
2913: LD_VAR 0 4
2917: PUSH
2918: LD_VAR 0 1
2922: ARRAY
2923: PPUSH
2924: LD_VAR 0 3
2928: PPUSH
2929: LD_VAR 0 4
2933: PUSH
2934: LD_VAR 0 1
2938: ARRAY
2939: PPUSH
2940: CALL_OW 74
2944: PPUSH
2945: CALL_OW 115
2949: GO 2910
2951: POP
2952: POP
// end ; if FilterAllUnits ( [ [ [ f_side , 3 ] , [ f_not , [ f_hastask ] ] ] ] ) > 0 then
2953: LD_INT 22
2955: PUSH
2956: LD_INT 3
2958: PUSH
2959: EMPTY
2960: LIST
2961: LIST
2962: PUSH
2963: LD_INT 3
2965: PUSH
2966: LD_INT 60
2968: PUSH
2969: EMPTY
2970: LIST
2971: PUSH
2972: EMPTY
2973: LIST
2974: LIST
2975: PUSH
2976: EMPTY
2977: LIST
2978: LIST
2979: PUSH
2980: EMPTY
2981: LIST
2982: PPUSH
2983: CALL_OW 69
2987: PUSH
2988: LD_INT 0
2990: GREATER
2991: IFFALSE 3137
// begin filter := FilterAllUnits ( [ [ [ f_side , 3 ] , [ f_not , [ f_weapon , ar_control_tower ] ] , [ f_not , [ f_hastask ] ] ] ] ) ;
2993: LD_ADDR_VAR 0 4
2997: PUSH
2998: LD_INT 22
3000: PUSH
3001: LD_INT 3
3003: PUSH
3004: EMPTY
3005: LIST
3006: LIST
3007: PUSH
3008: LD_INT 3
3010: PUSH
3011: LD_INT 34
3013: PUSH
3014: LD_INT 31
3016: PUSH
3017: EMPTY
3018: LIST
3019: LIST
3020: PUSH
3021: EMPTY
3022: LIST
3023: LIST
3024: PUSH
3025: LD_INT 3
3027: PUSH
3028: LD_INT 60
3030: PUSH
3031: EMPTY
3032: LIST
3033: PUSH
3034: EMPTY
3035: LIST
3036: LIST
3037: PUSH
3038: EMPTY
3039: LIST
3040: LIST
3041: LIST
3042: PUSH
3043: EMPTY
3044: LIST
3045: PPUSH
3046: CALL_OW 69
3050: ST_TO_ADDR
// x := SpeedFilter ( FilterAllUnits ( [ f_enemy , 3 ] ) , 20 ) ;
3051: LD_ADDR_VAR 0 3
3055: PUSH
3056: LD_INT 81
3058: PUSH
3059: LD_INT 3
3061: PUSH
3062: EMPTY
3063: LIST
3064: LIST
3065: PPUSH
3066: CALL_OW 69
3070: PPUSH
3071: LD_INT 20
3073: PPUSH
3074: CALL 8528 0 2
3078: ST_TO_ADDR
// for i = 1 to filter do
3079: LD_ADDR_VAR 0 1
3083: PUSH
3084: DOUBLE
3085: LD_INT 1
3087: DEC
3088: ST_TO_ADDR
3089: LD_VAR 0 4
3093: PUSH
3094: FOR_TO
3095: IFFALSE 3135
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( x , filter [ i ] ) ) ;
3097: LD_VAR 0 4
3101: PUSH
3102: LD_VAR 0 1
3106: ARRAY
3107: PPUSH
3108: LD_VAR 0 3
3112: PPUSH
3113: LD_VAR 0 4
3117: PUSH
3118: LD_VAR 0 1
3122: ARRAY
3123: PPUSH
3124: CALL_OW 74
3128: PPUSH
3129: CALL_OW 115
3133: GO 3094
3135: POP
3136: POP
// end ; if FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] ] ] ) > 0 then
3137: LD_INT 22
3139: PUSH
3140: LD_INT 1
3142: PUSH
3143: EMPTY
3144: LIST
3145: LIST
3146: PUSH
3147: LD_INT 3
3149: PUSH
3150: LD_INT 60
3152: PUSH
3153: EMPTY
3154: LIST
3155: PUSH
3156: EMPTY
3157: LIST
3158: LIST
3159: PUSH
3160: EMPTY
3161: LIST
3162: LIST
3163: PUSH
3164: EMPTY
3165: LIST
3166: PPUSH
3167: CALL_OW 69
3171: PUSH
3172: LD_INT 0
3174: GREATER
3175: IFFALSE 3321
// begin filter := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_not , [ f_weapon , ar_control_tower ] ] , [ f_not , [ f_hastask ] ] ] ] ) ;
3177: LD_ADDR_VAR 0 4
3181: PUSH
3182: LD_INT 22
3184: PUSH
3185: LD_INT 1
3187: PUSH
3188: EMPTY
3189: LIST
3190: LIST
3191: PUSH
3192: LD_INT 3
3194: PUSH
3195: LD_INT 34
3197: PUSH
3198: LD_INT 31
3200: PUSH
3201: EMPTY
3202: LIST
3203: LIST
3204: PUSH
3205: EMPTY
3206: LIST
3207: LIST
3208: PUSH
3209: LD_INT 3
3211: PUSH
3212: LD_INT 60
3214: PUSH
3215: EMPTY
3216: LIST
3217: PUSH
3218: EMPTY
3219: LIST
3220: LIST
3221: PUSH
3222: EMPTY
3223: LIST
3224: LIST
3225: LIST
3226: PUSH
3227: EMPTY
3228: LIST
3229: PPUSH
3230: CALL_OW 69
3234: ST_TO_ADDR
// x := SpeedFilter ( FilterAllUnits ( [ f_enemy , 1 ] ) , 20 ) ;
3235: LD_ADDR_VAR 0 3
3239: PUSH
3240: LD_INT 81
3242: PUSH
3243: LD_INT 1
3245: PUSH
3246: EMPTY
3247: LIST
3248: LIST
3249: PPUSH
3250: CALL_OW 69
3254: PPUSH
3255: LD_INT 20
3257: PPUSH
3258: CALL 8528 0 2
3262: ST_TO_ADDR
// for i = 1 to filter do
3263: LD_ADDR_VAR 0 1
3267: PUSH
3268: DOUBLE
3269: LD_INT 1
3271: DEC
3272: ST_TO_ADDR
3273: LD_VAR 0 4
3277: PUSH
3278: FOR_TO
3279: IFFALSE 3319
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( x , filter [ i ] ) ) ;
3281: LD_VAR 0 4
3285: PUSH
3286: LD_VAR 0 1
3290: ARRAY
3291: PPUSH
3292: LD_VAR 0 3
3296: PPUSH
3297: LD_VAR 0 4
3301: PUSH
3302: LD_VAR 0 1
3306: ARRAY
3307: PPUSH
3308: CALL_OW 74
3312: PPUSH
3313: CALL_OW 115
3317: GO 3278
3319: POP
3320: POP
// end ; if FilterAllUnits ( [ [ [ f_side , 2 ] , [ f_weapon , ar_bio_bomb ] , [ f_not , [ f_lives , 700 ] ] ] ] ) > 0 then
3321: LD_INT 22
3323: PUSH
3324: LD_INT 2
3326: PUSH
3327: EMPTY
3328: LIST
3329: LIST
3330: PUSH
3331: LD_INT 34
3333: PUSH
3334: LD_EXP 56
3338: PUSH
3339: EMPTY
3340: LIST
3341: LIST
3342: PUSH
3343: LD_INT 3
3345: PUSH
3346: LD_INT 24
3348: PUSH
3349: LD_INT 700
3351: PUSH
3352: EMPTY
3353: LIST
3354: LIST
3355: PUSH
3356: EMPTY
3357: LIST
3358: LIST
3359: PUSH
3360: EMPTY
3361: LIST
3362: LIST
3363: LIST
3364: PUSH
3365: EMPTY
3366: LIST
3367: PPUSH
3368: CALL_OW 69
3372: PUSH
3373: LD_INT 0
3375: GREATER
3376: IFFALSE 3475
// begin filter := FilterAllUnits ( [ [ [ f_side , 2 ] , [ f_weapon , ar_bio_bomb ] , [ f_not , [ f_lives , 700 ] ] ] ] ) ;
3378: LD_ADDR_VAR 0 4
3382: PUSH
3383: LD_INT 22
3385: PUSH
3386: LD_INT 2
3388: PUSH
3389: EMPTY
3390: LIST
3391: LIST
3392: PUSH
3393: LD_INT 34
3395: PUSH
3396: LD_EXP 56
3400: PUSH
3401: EMPTY
3402: LIST
3403: LIST
3404: PUSH
3405: LD_INT 3
3407: PUSH
3408: LD_INT 24
3410: PUSH
3411: LD_INT 700
3413: PUSH
3414: EMPTY
3415: LIST
3416: LIST
3417: PUSH
3418: EMPTY
3419: LIST
3420: LIST
3421: PUSH
3422: EMPTY
3423: LIST
3424: LIST
3425: LIST
3426: PUSH
3427: EMPTY
3428: LIST
3429: PPUSH
3430: CALL_OW 69
3434: ST_TO_ADDR
// for i = 1 to filter do
3435: LD_ADDR_VAR 0 1
3439: PUSH
3440: DOUBLE
3441: LD_INT 1
3443: DEC
3444: ST_TO_ADDR
3445: LD_VAR 0 4
3449: PUSH
3450: FOR_TO
3451: IFFALSE 3473
// SetLives ( filter [ i ] , 1 ) ;
3453: LD_VAR 0 4
3457: PUSH
3458: LD_VAR 0 1
3462: ARRAY
3463: PPUSH
3464: LD_INT 1
3466: PPUSH
3467: CALL_OW 234
3471: GO 3450
3473: POP
3474: POP
// end ; end ; end_of_file
3475: PPOPN 4
3477: END
// export function Start_Mission ; begin
3478: LD_INT 0
3480: PPUSH
// PrepareLegion ;
3481: CALL 3522 0 0
// PrepareMeeting ;
3485: CALL 4139 0 0
// case Query ( DS-text-beg ) of 1 :
3489: LD_STRING DS-text-beg
3491: PPUSH
3492: CALL_OW 97
3496: PUSH
3497: LD_INT 1
3499: DOUBLE
3500: EQUAL
3501: IFTRUE 3505
3503: GO 3508
3505: POP
// ; end ;
3506: GO 3509
3508: POP
// game_on := true ;
3509: LD_ADDR_EXP 1
3513: PUSH
3514: LD_INT 1
3516: ST_TO_ADDR
// end ;
3517: LD_VAR 0 1
3521: RET
// export l_cmndr , l_skill , l_units ; function PrepareLegion ; var i , p , filter , team ; begin
3522: LD_INT 0
3524: PPUSH
3525: PPUSH
3526: PPUSH
3527: PPUSH
3528: PPUSH
// uc_side := 8 ;
3529: LD_ADDR_OWVAR 20
3533: PUSH
3534: LD_INT 8
3536: ST_TO_ADDR
// uc_nation := 2 ;
3537: LD_ADDR_OWVAR 21
3541: PUSH
3542: LD_INT 2
3544: ST_TO_ADDR
// l_skill := [ 9 , 8 , 7 ] [ difficulty ] ;
3545: LD_ADDR_EXP 50
3549: PUSH
3550: LD_INT 9
3552: PUSH
3553: LD_INT 8
3555: PUSH
3556: LD_INT 7
3558: PUSH
3559: EMPTY
3560: LIST
3561: LIST
3562: LIST
3563: PUSH
3564: LD_OWVAR 67
3568: ARRAY
3569: ST_TO_ADDR
// l_units := [ 9 , 8 , 8 ] [ difficulty ] ;
3570: LD_ADDR_EXP 51
3574: PUSH
3575: LD_INT 9
3577: PUSH
3578: LD_INT 8
3580: PUSH
3581: LD_INT 8
3583: PUSH
3584: EMPTY
3585: LIST
3586: LIST
3587: LIST
3588: PUSH
3589: LD_OWVAR 67
3593: ARRAY
3594: ST_TO_ADDR
// filter := [ ] ;
3595: LD_ADDR_VAR 0 4
3599: PUSH
3600: EMPTY
3601: ST_TO_ADDR
// hc_gallery := desert ;
3602: LD_ADDR_OWVAR 33
3606: PUSH
3607: LD_STRING desert
3609: ST_TO_ADDR
// hc_face_number := 1 ;
3610: LD_ADDR_OWVAR 34
3614: PUSH
3615: LD_INT 1
3617: ST_TO_ADDR
// hc_skills := [ l_skill + 2 , l_skill - 1 , l_skill , l_skill + 1 ] ;
3618: LD_ADDR_OWVAR 31
3622: PUSH
3623: LD_EXP 50
3627: PUSH
3628: LD_INT 2
3630: PLUS
3631: PUSH
3632: LD_EXP 50
3636: PUSH
3637: LD_INT 1
3639: MINUS
3640: PUSH
3641: LD_EXP 50
3645: PUSH
3646: LD_EXP 50
3650: PUSH
3651: LD_INT 1
3653: PLUS
3654: PUSH
3655: EMPTY
3656: LIST
3657: LIST
3658: LIST
3659: LIST
3660: ST_TO_ADDR
// hc_sex := sex_male ;
3661: LD_ADDR_OWVAR 27
3665: PUSH
3666: LD_INT 1
3668: ST_TO_ADDR
// hc_name := Henri Ruotz ;
3669: LD_ADDR_OWVAR 26
3673: PUSH
3674: LD_STRING Henri Ruotz
3676: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
3677: LD_ADDR_OWVAR 29
3681: PUSH
3682: LD_INT 10
3684: PUSH
3685: LD_INT 10
3687: PUSH
3688: EMPTY
3689: LIST
3690: LIST
3691: ST_TO_ADDR
// hc_class := 1 ;
3692: LD_ADDR_OWVAR 28
3696: PUSH
3697: LD_INT 1
3699: ST_TO_ADDR
// hc_importance := 100 ;
3700: LD_ADDR_OWVAR 32
3704: PUSH
3705: LD_INT 100
3707: ST_TO_ADDR
// l_cmndr := CreateHuman ;
3708: LD_ADDR_EXP 49
3712: PUSH
3713: CALL_OW 44
3717: ST_TO_ADDR
// hc_importance := 0 ;
3718: LD_ADDR_OWVAR 32
3722: PUSH
3723: LD_INT 0
3725: ST_TO_ADDR
// scout := PrepareHuman ( sex_male , 1 , 0 ) ;
3726: LD_ADDR_EXP 12
3730: PUSH
3731: LD_INT 1
3733: PPUSH
3734: LD_INT 1
3736: PPUSH
3737: LD_INT 0
3739: PPUSH
3740: CALL_OW 380
3744: ST_TO_ADDR
// for i = 1 to 4 do
3745: LD_ADDR_VAR 0 2
3749: PUSH
3750: DOUBLE
3751: LD_INT 1
3753: DEC
3754: ST_TO_ADDR
3755: LD_INT 4
3757: PUSH
3758: FOR_TO
3759: IFFALSE 3809
// for p = 1 to 6 do
3761: LD_ADDR_VAR 0 3
3765: PUSH
3766: DOUBLE
3767: LD_INT 1
3769: DEC
3770: ST_TO_ADDR
3771: LD_INT 6
3773: PUSH
3774: FOR_TO
3775: IFFALSE 3805
// filter := filter ^ CreateHumanWithClass ( i , l_skill ) ;
3777: LD_ADDR_VAR 0 4
3781: PUSH
3782: LD_VAR 0 4
3786: PUSH
3787: LD_VAR 0 2
3791: PPUSH
3792: LD_EXP 50
3796: PPUSH
3797: CALL 7329 0 2
3801: ADD
3802: ST_TO_ADDR
3803: GO 3774
3805: POP
3806: POP
3807: GO 3758
3809: POP
3810: POP
// team := CharacterSelection ( text , l_units , l_units , [ sel_change_class , l_cmndr , sel_changeable , sel_not_hired ] ^ filter , [ class_soldier , class_mechanic , class_engineer , class_scientistic , class_mortar ] ) ;
3811: LD_ADDR_VAR 0 5
3815: PUSH
3816: LD_STRING text
3818: PPUSH
3819: LD_EXP 51
3823: PPUSH
3824: LD_EXP 51
3828: PPUSH
3829: LD_INT -5
3831: PUSH
3832: LD_EXP 49
3836: PUSH
3837: LD_INT -3
3839: PUSH
3840: LD_INT -2
3842: PUSH
3843: EMPTY
3844: LIST
3845: LIST
3846: LIST
3847: LIST
3848: PUSH
3849: LD_VAR 0 4
3853: ADD
3854: PPUSH
3855: LD_INT 1
3857: PUSH
3858: LD_INT 3
3860: PUSH
3861: LD_INT 2
3863: PUSH
3864: LD_INT 4
3866: PUSH
3867: LD_INT 8
3869: PUSH
3870: EMPTY
3871: LIST
3872: LIST
3873: LIST
3874: LIST
3875: LIST
3876: PPUSH
3877: CALL_OW 42
3881: ST_TO_ADDR
// for i = 1 to l_units do
3882: LD_ADDR_VAR 0 2
3886: PUSH
3887: DOUBLE
3888: LD_INT 1
3890: DEC
3891: ST_TO_ADDR
3892: LD_EXP 51
3896: PUSH
3897: FOR_TO
3898: IFFALSE 3923
// PlaceUnitArea ( team [ i ] , legion_spawn , false ) ;
3900: LD_VAR 0 5
3904: PUSH
3905: LD_VAR 0 2
3909: ARRAY
3910: PPUSH
3911: LD_INT 1
3913: PPUSH
3914: LD_INT 0
3916: PPUSH
3917: CALL_OW 49
3921: GO 3897
3923: POP
3924: POP
// PlaceUnitArea ( l_cmndr , legion_spawn , false ) ;
3925: LD_EXP 49
3929: PPUSH
3930: LD_INT 1
3932: PPUSH
3933: LD_INT 0
3935: PPUSH
3936: CALL_OW 49
// end ;
3940: LD_VAR 0 1
3944: RET
// export function PlaceCamera ; begin
3945: LD_INT 0
3947: PPUSH
// PlaceSeeing ( 46 , 48 , 8 , 10 ) ;
3948: LD_INT 46
3950: PPUSH
3951: LD_INT 48
3953: PPUSH
3954: LD_INT 8
3956: PPUSH
3957: LD_INT 10
3959: PPUSH
3960: CALL_OW 330
// PlaceSeeing ( 58 , 66 , 8 , 10 ) ;
3964: LD_INT 58
3966: PPUSH
3967: LD_INT 66
3969: PPUSH
3970: LD_INT 8
3972: PPUSH
3973: LD_INT 10
3975: PPUSH
3976: CALL_OW 330
// PlaceSeeing ( 82 , 82 , 8 , 10 ) ;
3980: LD_INT 82
3982: PPUSH
3983: LD_INT 82
3985: PPUSH
3986: LD_INT 8
3988: PPUSH
3989: LD_INT 10
3991: PPUSH
3992: CALL_OW 330
// PlaceSeeing ( 107 , 79 , 8 , 10 ) ;
3996: LD_INT 107
3998: PPUSH
3999: LD_INT 79
4001: PPUSH
4002: LD_INT 8
4004: PPUSH
4005: LD_INT 10
4007: PPUSH
4008: CALL_OW 330
// PlaceSeeing ( 101 , 57 , 8 , 10 ) ;
4012: LD_INT 101
4014: PPUSH
4015: LD_INT 57
4017: PPUSH
4018: LD_INT 8
4020: PPUSH
4021: LD_INT 10
4023: PPUSH
4024: CALL_OW 330
// PlaceSeeing ( 85 , 32 , 8 , 10 ) ;
4028: LD_INT 85
4030: PPUSH
4031: LD_INT 32
4033: PPUSH
4034: LD_INT 8
4036: PPUSH
4037: LD_INT 10
4039: PPUSH
4040: CALL_OW 330
// PlaceSeeing ( 108 , 72 , 8 , 10 ) ;
4044: LD_INT 108
4046: PPUSH
4047: LD_INT 72
4049: PPUSH
4050: LD_INT 8
4052: PPUSH
4053: LD_INT 10
4055: PPUSH
4056: CALL_OW 330
// PlaceSeeing ( 124 , 74 , 8 , 10 ) ;
4060: LD_INT 124
4062: PPUSH
4063: LD_INT 74
4065: PPUSH
4066: LD_INT 8
4068: PPUSH
4069: LD_INT 10
4071: PPUSH
4072: CALL_OW 330
// PlaceSeeing ( 67 , 33 , 8 , 20 ) ;
4076: LD_INT 67
4078: PPUSH
4079: LD_INT 33
4081: PPUSH
4082: LD_INT 8
4084: PPUSH
4085: LD_INT 20
4087: PPUSH
4088: CALL_OW 330
// RemoveSeeing ( 67 , 33 , 8 ) ;
4092: LD_INT 67
4094: PPUSH
4095: LD_INT 33
4097: PPUSH
4098: LD_INT 8
4100: PPUSH
4101: CALL_OW 331
// PlaceSeeing ( 94 , 84 , 8 , 20 ) ;
4105: LD_INT 94
4107: PPUSH
4108: LD_INT 84
4110: PPUSH
4111: LD_INT 8
4113: PPUSH
4114: LD_INT 20
4116: PPUSH
4117: CALL_OW 330
// RemoveSeeing ( 94 , 84 , 8 ) ;
4121: LD_INT 94
4123: PPUSH
4124: LD_INT 84
4126: PPUSH
4127: LD_INT 8
4129: PPUSH
4130: CALL_OW 331
// end ;
4134: LD_VAR 0 1
4138: RET
// export function PrepareMeeting ; begin
4139: LD_INT 0
4141: PPUSH
// uc_side := 6 ;
4142: LD_ADDR_OWVAR 20
4146: PUSH
4147: LD_INT 6
4149: ST_TO_ADDR
// hc_gallery := desert ;
4150: LD_ADDR_OWVAR 33
4154: PUSH
4155: LD_STRING desert
4157: ST_TO_ADDR
// hc_face_number := 2 ;
4158: LD_ADDR_OWVAR 34
4162: PUSH
4163: LD_INT 2
4165: ST_TO_ADDR
// hc_name := Leopold Drass ;
4166: LD_ADDR_OWVAR 26
4170: PUSH
4171: LD_STRING Leopold Drass
4173: ST_TO_ADDR
// hc_class := 1 ;
4174: LD_ADDR_OWVAR 28
4178: PUSH
4179: LD_INT 1
4181: ST_TO_ADDR
// hc_sex := sex_male ;
4182: LD_ADDR_OWVAR 27
4186: PUSH
4187: LD_INT 1
4189: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
4190: LD_ADDR_OWVAR 29
4194: PUSH
4195: LD_INT 12
4197: PUSH
4198: LD_INT 12
4200: PUSH
4201: EMPTY
4202: LIST
4203: LIST
4204: ST_TO_ADDR
// Leopold := CreateHuman ;
4205: LD_ADDR_EXP 7
4209: PUSH
4210: CALL_OW 44
4214: ST_TO_ADDR
// PlaceUnitArea ( Leopold , north_spawn , false ) ;
4215: LD_EXP 7
4219: PPUSH
4220: LD_INT 3
4222: PPUSH
4223: LD_INT 0
4225: PPUSH
4226: CALL_OW 49
// end ; end_of_file
4230: LD_VAR 0 1
4234: RET
// on SailEvent ( num ) do var i , filter , un , p , area ;
4235: LD_INT 0
4237: PPUSH
4238: PPUSH
4239: PPUSH
4240: PPUSH
4241: PPUSH
// begin case num of 1 :
4242: LD_VAR 0 1
4246: PUSH
4247: LD_INT 1
4249: DOUBLE
4250: EQUAL
4251: IFTRUE 4255
4253: GO 4287
4255: POP
// begin ComMoveXY ( leopold , GetX ( l_cmndr ) , GetY ( l_cmndr ) ) ;
4256: LD_EXP 7
4260: PPUSH
4261: LD_EXP 49
4265: PPUSH
4266: CALL_OW 250
4270: PPUSH
4271: LD_EXP 49
4275: PPUSH
4276: CALL_OW 251
4280: PPUSH
4281: CALL_OW 111
// end ; 2 :
4285: GO 6705
4287: LD_INT 2
4289: DOUBLE
4290: EQUAL
4291: IFTRUE 4295
4293: GO 4404
4295: POP
// begin InGameOn ;
4296: CALL_OW 8
// meeting_start := true ;
4300: LD_ADDR_EXP 26
4304: PUSH
4305: LD_INT 1
4307: ST_TO_ADDR
// ComTurnUnit ( leopold , l_cmndr ) ;
4308: LD_EXP 7
4312: PPUSH
4313: LD_EXP 49
4317: PPUSH
4318: CALL_OW 119
// ComTurnUnit ( l_cmndr , leopold ) ;
4322: LD_EXP 49
4326: PPUSH
4327: LD_EXP 7
4331: PPUSH
4332: CALL_OW 119
// Say ( leopold , DS-DL-1 ) ;
4336: LD_EXP 7
4340: PPUSH
4341: LD_STRING DS-DL-1
4343: PPUSH
4344: CALL_OW 88
// Say ( l_cmndr , DS-DC-1 ) ;
4348: LD_EXP 49
4352: PPUSH
4353: LD_STRING DS-DC-1
4355: PPUSH
4356: CALL_OW 88
// Say ( leopold , DS-DL-2 ) ;
4360: LD_EXP 7
4364: PPUSH
4365: LD_STRING DS-DL-2
4367: PPUSH
4368: CALL_OW 88
// ComEnterUnit ( leopold , fort ) ;
4372: LD_EXP 7
4376: PPUSH
4377: LD_INT 23
4379: PPUSH
4380: CALL_OW 120
// InGameOff ;
4384: CALL_OW 9
// Wait ( 0 0$01 ) ;
4388: LD_INT 35
4390: PPUSH
4391: CALL_OW 67
// ChangeMissionObjectives ( DS-T1 ) ;
4395: LD_STRING DS-T1
4397: PPUSH
4398: CALL_OW 337
// end ; 10 :
4402: GO 6705
4404: LD_INT 10
4406: DOUBLE
4407: EQUAL
4408: IFTRUE 4412
4410: GO 4624
4412: POP
// begin uc_side := 6 ;
4413: LD_ADDR_OWVAR 20
4417: PUSH
4418: LD_INT 6
4420: ST_TO_ADDR
// uc_nation := 2 ;
4421: LD_ADDR_OWVAR 21
4425: PUSH
4426: LD_INT 2
4428: ST_TO_ADDR
// hc_gallery :=  ;
4429: LD_ADDR_OWVAR 33
4433: PUSH
4434: LD_STRING 
4436: ST_TO_ADDR
// hc_skills := [ skill + 2 , skill - 1 , skill , skill + 1 ] ;
4437: LD_ADDR_OWVAR 31
4441: PUSH
4442: LD_EXP 16
4446: PUSH
4447: LD_INT 2
4449: PLUS
4450: PUSH
4451: LD_EXP 16
4455: PUSH
4456: LD_INT 1
4458: MINUS
4459: PUSH
4460: LD_EXP 16
4464: PUSH
4465: LD_EXP 16
4469: PUSH
4470: LD_INT 1
4472: PLUS
4473: PUSH
4474: EMPTY
4475: LIST
4476: LIST
4477: LIST
4478: LIST
4479: ST_TO_ADDR
// hc_sex := sex_male ;
4480: LD_ADDR_OWVAR 27
4484: PUSH
4485: LD_INT 1
4487: ST_TO_ADDR
// hc_name := Samuel van Horn ;
4488: LD_ADDR_OWVAR 26
4492: PUSH
4493: LD_STRING Samuel van Horn
4495: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
4496: LD_ADDR_OWVAR 29
4500: PUSH
4501: LD_INT 11
4503: PUSH
4504: LD_INT 10
4506: PUSH
4507: EMPTY
4508: LIST
4509: LIST
4510: ST_TO_ADDR
// hc_class := 1 ;
4511: LD_ADDR_OWVAR 28
4515: PUSH
4516: LD_INT 1
4518: ST_TO_ADDR
// samuel := CreateHuman ;
4519: LD_ADDR_EXP 9
4523: PUSH
4524: CALL_OW 44
4528: ST_TO_ADDR
// PlaceUnitArea ( samuel , south_spawn , false ) ;
4529: LD_EXP 9
4533: PPUSH
4534: LD_INT 4
4536: PPUSH
4537: LD_INT 0
4539: PPUSH
4540: CALL_OW 49
// for i = 1 to 3 do
4544: LD_ADDR_VAR 0 2
4548: PUSH
4549: DOUBLE
4550: LD_INT 1
4552: DEC
4553: ST_TO_ADDR
4554: LD_INT 3
4556: PUSH
4557: FOR_TO
4558: IFFALSE 4585
// PlaceUnitArea ( CreateHumanWithClass ( class_mortar , skill ) , south_spawn , false ) ;
4560: LD_INT 8
4562: PPUSH
4563: LD_EXP 16
4567: PPUSH
4568: CALL 7329 0 2
4572: PPUSH
4573: LD_INT 4
4575: PPUSH
4576: LD_INT 0
4578: PPUSH
4579: CALL_OW 49
4583: GO 4557
4585: POP
4586: POP
// ComEnterUnit ( FilterAllUnits ( [ f_side , 6 ] ) diff [ leopold , fort ] , fort ) ;
4587: LD_INT 22
4589: PUSH
4590: LD_INT 6
4592: PUSH
4593: EMPTY
4594: LIST
4595: LIST
4596: PPUSH
4597: CALL_OW 69
4601: PUSH
4602: LD_EXP 7
4606: PUSH
4607: LD_INT 23
4609: PUSH
4610: EMPTY
4611: LIST
4612: LIST
4613: DIFF
4614: PPUSH
4615: LD_INT 23
4617: PPUSH
4618: CALL_OW 120
// end ; 3 :
4622: GO 6705
4624: LD_INT 3
4626: DOUBLE
4627: EQUAL
4628: IFTRUE 4632
4630: GO 4643
4632: POP
// begin arabian_attack := true ;
4633: LD_ADDR_EXP 38
4637: PUSH
4638: LD_INT 1
4640: ST_TO_ADDR
// end ; 4 :
4641: GO 6705
4643: LD_INT 4
4645: DOUBLE
4646: EQUAL
4647: IFTRUE 4651
4649: GO 4662
4651: POP
// begin american_attack := true ;
4652: LD_ADDR_EXP 40
4656: PUSH
4657: LD_INT 1
4659: ST_TO_ADDR
// end ; 5 :
4660: GO 6705
4662: LD_INT 5
4664: DOUBLE
4665: EQUAL
4666: IFTRUE 4670
4668: GO 4681
4670: POP
// begin russian_attack := true ;
4671: LD_ADDR_EXP 39
4675: PUSH
4676: LD_INT 1
4678: ST_TO_ADDR
// end ; 31 :
4679: GO 6705
4681: LD_INT 31
4683: DOUBLE
4684: EQUAL
4685: IFTRUE 4689
4687: GO 4964
4689: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
4690: LD_ADDR_VAR 0 6
4694: PUSH
4695: LD_EXP 15
4699: PUSH
4700: LD_INT 1
4702: PPUSH
4703: LD_EXP 15
4707: PPUSH
4708: CALL_OW 12
4712: ARRAY
4713: ST_TO_ADDR
// uc_side := 2 ;
4714: LD_ADDR_OWVAR 20
4718: PUSH
4719: LD_INT 2
4721: ST_TO_ADDR
// uc_nation := 2 ;
4722: LD_ADDR_OWVAR 21
4726: PUSH
4727: LD_INT 2
4729: ST_TO_ADDR
// for i = 1 to arabian_force do
4730: LD_ADDR_VAR 0 2
4734: PUSH
4735: DOUBLE
4736: LD_INT 1
4738: DEC
4739: ST_TO_ADDR
4740: LD_EXP 20
4744: PUSH
4745: FOR_TO
4746: IFFALSE 4825
// begin vc_chassis := ar_half_tracked ;
4748: LD_ADDR_OWVAR 37
4752: PUSH
4753: LD_INT 14
4755: ST_TO_ADDR
// vc_engine := engine_siberite ;
4756: LD_ADDR_OWVAR 39
4760: PUSH
4761: LD_INT 3
4763: ST_TO_ADDR
// vc_control := control_remote ;
4764: LD_ADDR_OWVAR 38
4768: PUSH
4769: LD_INT 2
4771: ST_TO_ADDR
// vc_weapon := ar_weapons [ Rand ( 1 , ar_weapons ) ] ;
4772: LD_ADDR_OWVAR 40
4776: PUSH
4777: LD_EXP 17
4781: PUSH
4782: LD_INT 1
4784: PPUSH
4785: LD_EXP 17
4789: PPUSH
4790: CALL_OW 12
4794: ARRAY
4795: ST_TO_ADDR
// un := CreateVehicle ;
4796: LD_ADDR_VAR 0 4
4800: PUSH
4801: CALL_OW 45
4805: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
4806: LD_VAR 0 4
4810: PPUSH
4811: LD_VAR 0 6
4815: PPUSH
4816: LD_INT 0
4818: PPUSH
4819: CALL_OW 49
// end ;
4823: GO 4745
4825: POP
4826: POP
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_manual ] ] ) < 2 then
4827: LD_INT 22
4829: PUSH
4830: LD_INT 2
4832: PUSH
4833: EMPTY
4834: LIST
4835: LIST
4836: PUSH
4837: LD_INT 33
4839: PUSH
4840: LD_INT 1
4842: PUSH
4843: EMPTY
4844: LIST
4845: LIST
4846: PUSH
4847: EMPTY
4848: LIST
4849: LIST
4850: PPUSH
4851: CALL_OW 69
4855: PUSH
4856: LD_INT 2
4858: LESS
4859: IFFALSE 4962
// for i = 1 to 2 do
4861: LD_ADDR_VAR 0 2
4865: PUSH
4866: DOUBLE
4867: LD_INT 1
4869: DEC
4870: ST_TO_ADDR
4871: LD_INT 2
4873: PUSH
4874: FOR_TO
4875: IFFALSE 4960
// begin vc_chassis := ar_half_tracked ;
4877: LD_ADDR_OWVAR 37
4881: PUSH
4882: LD_INT 14
4884: ST_TO_ADDR
// vc_engine := engine_siberite ;
4885: LD_ADDR_OWVAR 39
4889: PUSH
4890: LD_INT 3
4892: ST_TO_ADDR
// vc_control := control_manual ;
4893: LD_ADDR_OWVAR 38
4897: PUSH
4898: LD_INT 1
4900: ST_TO_ADDR
// vc_weapon := ar_control_tower ;
4901: LD_ADDR_OWVAR 40
4905: PUSH
4906: LD_INT 31
4908: ST_TO_ADDR
// un := CreateVehicle ;
4909: LD_ADDR_VAR 0 4
4913: PUSH
4914: CALL_OW 45
4918: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
4919: LD_VAR 0 4
4923: PPUSH
4924: LD_VAR 0 6
4928: PPUSH
4929: LD_INT 0
4931: PPUSH
4932: CALL_OW 49
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , skill ) , un ) ;
4936: LD_INT 3
4938: PPUSH
4939: LD_EXP 16
4943: PPUSH
4944: CALL 7329 0 2
4948: PPUSH
4949: LD_VAR 0 4
4953: PPUSH
4954: CALL_OW 52
// end ;
4958: GO 4874
4960: POP
4961: POP
// end ; 32 :
4962: GO 6705
4964: LD_INT 32
4966: DOUBLE
4967: EQUAL
4968: IFTRUE 4972
4970: GO 5345
4972: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
4973: LD_ADDR_VAR 0 6
4977: PUSH
4978: LD_EXP 15
4982: PUSH
4983: LD_INT 1
4985: PPUSH
4986: LD_EXP 15
4990: PPUSH
4991: CALL_OW 12
4995: ARRAY
4996: ST_TO_ADDR
// uc_side := 2 ;
4997: LD_ADDR_OWVAR 20
5001: PUSH
5002: LD_INT 2
5004: ST_TO_ADDR
// uc_nation := 2 ;
5005: LD_ADDR_OWVAR 21
5009: PUSH
5010: LD_INT 2
5012: ST_TO_ADDR
// for i = 1 to ( arabian_force - 2 ) do
5013: LD_ADDR_VAR 0 2
5017: PUSH
5018: DOUBLE
5019: LD_INT 1
5021: DEC
5022: ST_TO_ADDR
5023: LD_EXP 20
5027: PUSH
5028: LD_INT 2
5030: MINUS
5031: PUSH
5032: FOR_TO
5033: IFFALSE 5116
// begin vc_chassis := ar_half_tracked ;
5035: LD_ADDR_OWVAR 37
5039: PUSH
5040: LD_INT 14
5042: ST_TO_ADDR
// vc_engine := engine_siberite ;
5043: LD_ADDR_OWVAR 39
5047: PUSH
5048: LD_INT 3
5050: ST_TO_ADDR
// vc_control := control_remote ;
5051: LD_ADDR_OWVAR 38
5055: PUSH
5056: LD_INT 2
5058: ST_TO_ADDR
// vc_weapon := ar_weapons [ Rand ( 1 , ar_weapons - 1 ) ] ;
5059: LD_ADDR_OWVAR 40
5063: PUSH
5064: LD_EXP 17
5068: PUSH
5069: LD_INT 1
5071: PPUSH
5072: LD_EXP 17
5076: PUSH
5077: LD_INT 1
5079: MINUS
5080: PPUSH
5081: CALL_OW 12
5085: ARRAY
5086: ST_TO_ADDR
// un := CreateVehicle ;
5087: LD_ADDR_VAR 0 4
5091: PUSH
5092: CALL_OW 45
5096: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5097: LD_VAR 0 4
5101: PPUSH
5102: LD_VAR 0 6
5106: PPUSH
5107: LD_INT 0
5109: PPUSH
5110: CALL_OW 49
// end ;
5114: GO 5032
5116: POP
5117: POP
// for i = 1 to Rand ( 0 , 1 ) + [ 2 , 3 , 3 ] [ game_difficulty ] do
5118: LD_ADDR_VAR 0 2
5122: PUSH
5123: DOUBLE
5124: LD_INT 1
5126: DEC
5127: ST_TO_ADDR
5128: LD_INT 0
5130: PPUSH
5131: LD_INT 1
5133: PPUSH
5134: CALL_OW 12
5138: PUSH
5139: LD_INT 2
5141: PUSH
5142: LD_INT 3
5144: PUSH
5145: LD_INT 3
5147: PUSH
5148: EMPTY
5149: LIST
5150: LIST
5151: LIST
5152: PUSH
5153: LD_EXP 2
5157: ARRAY
5158: PLUS
5159: PUSH
5160: FOR_TO
5161: IFFALSE 5198
// begin uc_nation := 0 ;
5163: LD_ADDR_OWVAR 21
5167: PUSH
5168: LD_INT 0
5170: ST_TO_ADDR
// PlaceUnitArea ( CreateHumanWithClass ( 17 , skill ) , area , false ) ;
5171: LD_INT 17
5173: PPUSH
5174: LD_EXP 16
5178: PPUSH
5179: CALL 7329 0 2
5183: PPUSH
5184: LD_VAR 0 6
5188: PPUSH
5189: LD_INT 0
5191: PPUSH
5192: CALL_OW 49
// end ;
5196: GO 5160
5198: POP
5199: POP
// uc_nation := 2 ;
5200: LD_ADDR_OWVAR 21
5204: PUSH
5205: LD_INT 2
5207: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_manual ] ] ) < 2 then
5208: LD_INT 22
5210: PUSH
5211: LD_INT 2
5213: PUSH
5214: EMPTY
5215: LIST
5216: LIST
5217: PUSH
5218: LD_INT 33
5220: PUSH
5221: LD_INT 1
5223: PUSH
5224: EMPTY
5225: LIST
5226: LIST
5227: PUSH
5228: EMPTY
5229: LIST
5230: LIST
5231: PPUSH
5232: CALL_OW 69
5236: PUSH
5237: LD_INT 2
5239: LESS
5240: IFFALSE 5343
// for i = 1 to 2 do
5242: LD_ADDR_VAR 0 2
5246: PUSH
5247: DOUBLE
5248: LD_INT 1
5250: DEC
5251: ST_TO_ADDR
5252: LD_INT 2
5254: PUSH
5255: FOR_TO
5256: IFFALSE 5341
// begin vc_chassis := ar_half_tracked ;
5258: LD_ADDR_OWVAR 37
5262: PUSH
5263: LD_INT 14
5265: ST_TO_ADDR
// vc_engine := engine_siberite ;
5266: LD_ADDR_OWVAR 39
5270: PUSH
5271: LD_INT 3
5273: ST_TO_ADDR
// vc_control := control_manual ;
5274: LD_ADDR_OWVAR 38
5278: PUSH
5279: LD_INT 1
5281: ST_TO_ADDR
// vc_weapon := ar_control_tower ;
5282: LD_ADDR_OWVAR 40
5286: PUSH
5287: LD_INT 31
5289: ST_TO_ADDR
// un := CreateVehicle ;
5290: LD_ADDR_VAR 0 4
5294: PUSH
5295: CALL_OW 45
5299: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5300: LD_VAR 0 4
5304: PPUSH
5305: LD_VAR 0 6
5309: PPUSH
5310: LD_INT 0
5312: PPUSH
5313: CALL_OW 49
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , skill ) , un ) ;
5317: LD_INT 3
5319: PPUSH
5320: LD_EXP 16
5324: PPUSH
5325: CALL 7329 0 2
5329: PPUSH
5330: LD_VAR 0 4
5334: PPUSH
5335: CALL_OW 52
// end ;
5339: GO 5255
5341: POP
5342: POP
// end ; 33 :
5343: GO 6705
5345: LD_INT 33
5347: DOUBLE
5348: EQUAL
5349: IFTRUE 5353
5351: GO 5624
5353: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
5354: LD_ADDR_VAR 0 6
5358: PUSH
5359: LD_EXP 15
5363: PUSH
5364: LD_INT 1
5366: PPUSH
5367: LD_EXP 15
5371: PPUSH
5372: CALL_OW 12
5376: ARRAY
5377: ST_TO_ADDR
// uc_side := 2 ;
5378: LD_ADDR_OWVAR 20
5382: PUSH
5383: LD_INT 2
5385: ST_TO_ADDR
// uc_nation := 2 ;
5386: LD_ADDR_OWVAR 21
5390: PUSH
5391: LD_INT 2
5393: ST_TO_ADDR
// for i = 1 to ( arabian_force / 2 ) do
5394: LD_ADDR_VAR 0 2
5398: PUSH
5399: DOUBLE
5400: LD_INT 1
5402: DEC
5403: ST_TO_ADDR
5404: LD_EXP 20
5408: PUSH
5409: LD_INT 2
5411: DIVREAL
5412: PUSH
5413: FOR_TO
5414: IFFALSE 5519
// begin vc_chassis := ar_half_tracked ;
5416: LD_ADDR_OWVAR 37
5420: PUSH
5421: LD_INT 14
5423: ST_TO_ADDR
// vc_engine := engine_siberite ;
5424: LD_ADDR_OWVAR 39
5428: PUSH
5429: LD_INT 3
5431: ST_TO_ADDR
// vc_control := control_manual ;
5432: LD_ADDR_OWVAR 38
5436: PUSH
5437: LD_INT 1
5439: ST_TO_ADDR
// vc_weapon := ar_weapons [ Rand ( 1 , ar_weapons - 2 ) ] ;
5440: LD_ADDR_OWVAR 40
5444: PUSH
5445: LD_EXP 17
5449: PUSH
5450: LD_INT 1
5452: PPUSH
5453: LD_EXP 17
5457: PUSH
5458: LD_INT 2
5460: MINUS
5461: PPUSH
5462: CALL_OW 12
5466: ARRAY
5467: ST_TO_ADDR
// un := CreateVehicle ;
5468: LD_ADDR_VAR 0 4
5472: PUSH
5473: CALL_OW 45
5477: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5478: LD_VAR 0 4
5482: PPUSH
5483: LD_VAR 0 6
5487: PPUSH
5488: LD_INT 0
5490: PPUSH
5491: CALL_OW 49
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , skill ) , un ) ;
5495: LD_INT 3
5497: PPUSH
5498: LD_EXP 16
5502: PPUSH
5503: CALL 7329 0 2
5507: PPUSH
5508: LD_VAR 0 4
5512: PPUSH
5513: CALL_OW 52
// end ;
5517: GO 5413
5519: POP
5520: POP
// for i = 1 to ( arabian_force / 2 ) do
5521: LD_ADDR_VAR 0 2
5525: PUSH
5526: DOUBLE
5527: LD_INT 1
5529: DEC
5530: ST_TO_ADDR
5531: LD_EXP 20
5535: PUSH
5536: LD_INT 2
5538: DIVREAL
5539: PUSH
5540: FOR_TO
5541: IFFALSE 5620
// begin vc_chassis := ar_half_tracked ;
5543: LD_ADDR_OWVAR 37
5547: PUSH
5548: LD_INT 14
5550: ST_TO_ADDR
// vc_engine := engine_siberite ;
5551: LD_ADDR_OWVAR 39
5555: PUSH
5556: LD_INT 3
5558: ST_TO_ADDR
// vc_control := control_apeman ;
5559: LD_ADDR_OWVAR 38
5563: PUSH
5564: LD_INT 5
5566: ST_TO_ADDR
// vc_weapon := ar_weapons [ Rand ( 2 , ar_weapons ) ] ;
5567: LD_ADDR_OWVAR 40
5571: PUSH
5572: LD_EXP 17
5576: PUSH
5577: LD_INT 2
5579: PPUSH
5580: LD_EXP 17
5584: PPUSH
5585: CALL_OW 12
5589: ARRAY
5590: ST_TO_ADDR
// un := CreateVehicle ;
5591: LD_ADDR_VAR 0 4
5595: PUSH
5596: CALL_OW 45
5600: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5601: LD_VAR 0 4
5605: PPUSH
5606: LD_VAR 0 6
5610: PPUSH
5611: LD_INT 0
5613: PPUSH
5614: CALL_OW 49
// end ;
5618: GO 5540
5620: POP
5621: POP
// end ; 41 :
5622: GO 6705
5624: LD_INT 41
5626: DOUBLE
5627: EQUAL
5628: IFTRUE 5632
5630: GO 5776
5632: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
5633: LD_ADDR_VAR 0 6
5637: PUSH
5638: LD_EXP 15
5642: PUSH
5643: LD_INT 1
5645: PPUSH
5646: LD_EXP 15
5650: PPUSH
5651: CALL_OW 12
5655: ARRAY
5656: ST_TO_ADDR
// uc_side := 1 ;
5657: LD_ADDR_OWVAR 20
5661: PUSH
5662: LD_INT 1
5664: ST_TO_ADDR
// uc_nation := 1 ;
5665: LD_ADDR_OWVAR 21
5669: PUSH
5670: LD_INT 1
5672: ST_TO_ADDR
// for i = 1 to american_force do
5673: LD_ADDR_VAR 0 2
5677: PUSH
5678: DOUBLE
5679: LD_INT 1
5681: DEC
5682: ST_TO_ADDR
5683: LD_EXP 22
5687: PUSH
5688: FOR_TO
5689: IFFALSE 5772
// begin vc_chassis := us_morphling ;
5691: LD_ADDR_OWVAR 37
5695: PUSH
5696: LD_INT 5
5698: ST_TO_ADDR
// vc_engine := engine_siberite ;
5699: LD_ADDR_OWVAR 39
5703: PUSH
5704: LD_INT 3
5706: ST_TO_ADDR
// vc_control := control_computer ;
5707: LD_ADDR_OWVAR 38
5711: PUSH
5712: LD_INT 3
5714: ST_TO_ADDR
// vc_weapon := us_weapons [ Rand ( 1 , us_weapons - 1 ) ] ;
5715: LD_ADDR_OWVAR 40
5719: PUSH
5720: LD_EXP 19
5724: PUSH
5725: LD_INT 1
5727: PPUSH
5728: LD_EXP 19
5732: PUSH
5733: LD_INT 1
5735: MINUS
5736: PPUSH
5737: CALL_OW 12
5741: ARRAY
5742: ST_TO_ADDR
// un := CreateVehicle ;
5743: LD_ADDR_VAR 0 4
5747: PUSH
5748: CALL_OW 45
5752: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5753: LD_VAR 0 4
5757: PPUSH
5758: LD_VAR 0 6
5762: PPUSH
5763: LD_INT 0
5765: PPUSH
5766: CALL_OW 49
// end ;
5770: GO 5688
5772: POP
5773: POP
// end ; 42 :
5774: GO 6705
5776: LD_INT 42
5778: DOUBLE
5779: EQUAL
5780: IFTRUE 5784
5782: GO 5924
5784: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
5785: LD_ADDR_VAR 0 6
5789: PUSH
5790: LD_EXP 15
5794: PUSH
5795: LD_INT 1
5797: PPUSH
5798: LD_EXP 15
5802: PPUSH
5803: CALL_OW 12
5807: ARRAY
5808: ST_TO_ADDR
// uc_side := 1 ;
5809: LD_ADDR_OWVAR 20
5813: PUSH
5814: LD_INT 1
5816: ST_TO_ADDR
// uc_nation := 1 ;
5817: LD_ADDR_OWVAR 21
5821: PUSH
5822: LD_INT 1
5824: ST_TO_ADDR
// for i = 1 to american_force do
5825: LD_ADDR_VAR 0 2
5829: PUSH
5830: DOUBLE
5831: LD_INT 1
5833: DEC
5834: ST_TO_ADDR
5835: LD_EXP 22
5839: PUSH
5840: FOR_TO
5841: IFFALSE 5920
// begin vc_chassis := us_morphling ;
5843: LD_ADDR_OWVAR 37
5847: PUSH
5848: LD_INT 5
5850: ST_TO_ADDR
// vc_engine := engine_siberite ;
5851: LD_ADDR_OWVAR 39
5855: PUSH
5856: LD_INT 3
5858: ST_TO_ADDR
// vc_control := control_computer ;
5859: LD_ADDR_OWVAR 38
5863: PUSH
5864: LD_INT 3
5866: ST_TO_ADDR
// vc_weapon := us_weapons [ Rand ( 1 , us_weapons ) ] ;
5867: LD_ADDR_OWVAR 40
5871: PUSH
5872: LD_EXP 19
5876: PUSH
5877: LD_INT 1
5879: PPUSH
5880: LD_EXP 19
5884: PPUSH
5885: CALL_OW 12
5889: ARRAY
5890: ST_TO_ADDR
// un := CreateVehicle ;
5891: LD_ADDR_VAR 0 4
5895: PUSH
5896: CALL_OW 45
5900: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5901: LD_VAR 0 4
5905: PPUSH
5906: LD_VAR 0 6
5910: PPUSH
5911: LD_INT 0
5913: PPUSH
5914: CALL_OW 49
// end ;
5918: GO 5840
5920: POP
5921: POP
// end ; 51 :
5922: GO 6705
5924: LD_INT 51
5926: DOUBLE
5927: EQUAL
5928: IFTRUE 5932
5930: GO 6072
5932: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
5933: LD_ADDR_VAR 0 6
5937: PUSH
5938: LD_EXP 15
5942: PUSH
5943: LD_INT 1
5945: PPUSH
5946: LD_EXP 15
5950: PPUSH
5951: CALL_OW 12
5955: ARRAY
5956: ST_TO_ADDR
// uc_side := 3 ;
5957: LD_ADDR_OWVAR 20
5961: PUSH
5962: LD_INT 3
5964: ST_TO_ADDR
// uc_nation := 3 ;
5965: LD_ADDR_OWVAR 21
5969: PUSH
5970: LD_INT 3
5972: ST_TO_ADDR
// for i = 1 to russian_force do
5973: LD_ADDR_VAR 0 2
5977: PUSH
5978: DOUBLE
5979: LD_INT 1
5981: DEC
5982: ST_TO_ADDR
5983: LD_EXP 21
5987: PUSH
5988: FOR_TO
5989: IFFALSE 6068
// begin vc_chassis := ru_heavy_tracked ;
5991: LD_ADDR_OWVAR 37
5995: PUSH
5996: LD_INT 24
5998: ST_TO_ADDR
// vc_engine := engine_siberite ;
5999: LD_ADDR_OWVAR 39
6003: PUSH
6004: LD_INT 3
6006: ST_TO_ADDR
// vc_control := control_computer ;
6007: LD_ADDR_OWVAR 38
6011: PUSH
6012: LD_INT 3
6014: ST_TO_ADDR
// vc_weapon := ru_weapons [ Rand ( 1 , ru_weapons ) ] ;
6015: LD_ADDR_OWVAR 40
6019: PUSH
6020: LD_EXP 18
6024: PUSH
6025: LD_INT 1
6027: PPUSH
6028: LD_EXP 18
6032: PPUSH
6033: CALL_OW 12
6037: ARRAY
6038: ST_TO_ADDR
// un := CreateVehicle ;
6039: LD_ADDR_VAR 0 4
6043: PUSH
6044: CALL_OW 45
6048: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
6049: LD_VAR 0 4
6053: PPUSH
6054: LD_VAR 0 6
6058: PPUSH
6059: LD_INT 0
6061: PPUSH
6062: CALL_OW 49
// end ;
6066: GO 5988
6068: POP
6069: POP
// end ; 91 :
6070: GO 6705
6072: LD_INT 91
6074: DOUBLE
6075: EQUAL
6076: IFTRUE 6080
6078: GO 6218
6080: POP
// begin uc_side := 8 ;
6081: LD_ADDR_OWVAR 20
6085: PUSH
6086: LD_INT 8
6088: ST_TO_ADDR
// uc_nation := 1 ;
6089: LD_ADDR_OWVAR 21
6093: PUSH
6094: LD_INT 1
6096: ST_TO_ADDR
// for i = 1 to [ 4 , 3 , 3 ] [ game_difficulty ] do
6097: LD_ADDR_VAR 0 2
6101: PUSH
6102: DOUBLE
6103: LD_INT 1
6105: DEC
6106: ST_TO_ADDR
6107: LD_INT 4
6109: PUSH
6110: LD_INT 3
6112: PUSH
6113: LD_INT 3
6115: PUSH
6116: EMPTY
6117: LIST
6118: LIST
6119: LIST
6120: PUSH
6121: LD_EXP 2
6125: ARRAY
6126: PUSH
6127: FOR_TO
6128: IFFALSE 6214
// begin vc_chassis := us_heavy_tracked ;
6130: LD_ADDR_OWVAR 37
6134: PUSH
6135: LD_INT 4
6137: ST_TO_ADDR
// vc_engine := engine_siberite ;
6138: LD_ADDR_OWVAR 39
6142: PUSH
6143: LD_INT 3
6145: ST_TO_ADDR
// vc_control := control_computer ;
6146: LD_ADDR_OWVAR 38
6150: PUSH
6151: LD_INT 3
6153: ST_TO_ADDR
// vc_weapon := [ us_double_gun , us_heavy_gun ] [ Rand ( 1 , 2 ) ] ;
6154: LD_ADDR_OWVAR 40
6158: PUSH
6159: LD_INT 5
6161: PUSH
6162: LD_INT 6
6164: PUSH
6165: EMPTY
6166: LIST
6167: LIST
6168: PUSH
6169: LD_INT 1
6171: PPUSH
6172: LD_INT 2
6174: PPUSH
6175: CALL_OW 12
6179: ARRAY
6180: ST_TO_ADDR
// un := CreateVehicle ;
6181: LD_ADDR_VAR 0 4
6185: PUSH
6186: CALL_OW 45
6190: ST_TO_ADDR
// PlaceUnitArea ( un , areas [ 1 ] , false ) ;
6191: LD_VAR 0 4
6195: PPUSH
6196: LD_EXP 15
6200: PUSH
6201: LD_INT 1
6203: ARRAY
6204: PPUSH
6205: LD_INT 0
6207: PPUSH
6208: CALL_OW 49
// end ;
6212: GO 6127
6214: POP
6215: POP
// end ; 92 :
6216: GO 6705
6218: LD_INT 92
6220: DOUBLE
6221: EQUAL
6222: IFTRUE 6226
6224: GO 6555
6226: POP
// begin uc_side := 5 ;
6227: LD_ADDR_OWVAR 20
6231: PUSH
6232: LD_INT 5
6234: ST_TO_ADDR
// uc_nation := 2 ;
6235: LD_ADDR_OWVAR 21
6239: PUSH
6240: LD_INT 2
6242: ST_TO_ADDR
// filter := [ ] ;
6243: LD_ADDR_VAR 0 3
6247: PUSH
6248: EMPTY
6249: ST_TO_ADDR
// InitHc ;
6250: CALL_OW 19
// PrepareHuman ( false , 1 , l_skill ) ;
6254: LD_INT 0
6256: PPUSH
6257: LD_INT 1
6259: PPUSH
6260: LD_EXP 50
6264: PPUSH
6265: CALL_OW 380
// un := CreateHuman ;
6269: LD_ADDR_VAR 0 4
6273: PUSH
6274: CALL_OW 44
6278: ST_TO_ADDR
// filter := filter ^ un ;
6279: LD_ADDR_VAR 0 3
6283: PUSH
6284: LD_VAR 0 3
6288: PUSH
6289: LD_VAR 0 4
6293: ADD
6294: ST_TO_ADDR
// for i = 1 to [ 4 , 3 , 2 ] [ game_difficulty ] do
6295: LD_ADDR_VAR 0 2
6299: PUSH
6300: DOUBLE
6301: LD_INT 1
6303: DEC
6304: ST_TO_ADDR
6305: LD_INT 4
6307: PUSH
6308: LD_INT 3
6310: PUSH
6311: LD_INT 2
6313: PUSH
6314: EMPTY
6315: LIST
6316: LIST
6317: LIST
6318: PUSH
6319: LD_EXP 2
6323: ARRAY
6324: PUSH
6325: FOR_TO
6326: IFFALSE 6364
// begin un := CreateHumanWithClass ( 1 , l_skill ) ;
6328: LD_ADDR_VAR 0 4
6332: PUSH
6333: LD_INT 1
6335: PPUSH
6336: LD_EXP 50
6340: PPUSH
6341: CALL 7329 0 2
6345: ST_TO_ADDR
// filter := filter ^ un ;
6346: LD_ADDR_VAR 0 3
6350: PUSH
6351: LD_VAR 0 3
6355: PUSH
6356: LD_VAR 0 4
6360: ADD
6361: ST_TO_ADDR
// end ;
6362: GO 6325
6364: POP
6365: POP
// DialogueOn ;
6366: CALL_OW 6
// if GetSex ( filter [ 1 ] ) = sex_male then
6370: LD_VAR 0 3
6374: PUSH
6375: LD_INT 1
6377: ARRAY
6378: PPUSH
6379: CALL_OW 258
6383: PUSH
6384: LD_INT 1
6386: EQUAL
6387: IFFALSE 6407
// SayRadio ( filter [ 1 ] , DS-DF-1 ) else
6389: LD_VAR 0 3
6393: PUSH
6394: LD_INT 1
6396: ARRAY
6397: PPUSH
6398: LD_STRING DS-DF-1
6400: PPUSH
6401: CALL_OW 94
6405: GO 6423
// SayRadio ( filter [ 1 ] , DS-DF-f1 ) ;
6407: LD_VAR 0 3
6411: PUSH
6412: LD_INT 1
6414: ARRAY
6415: PPUSH
6416: LD_STRING DS-DF-f1
6418: PPUSH
6419: CALL_OW 94
// case Query ( DS-dezert ) of 1 :
6423: LD_STRING DS-dezert
6425: PPUSH
6426: CALL_OW 97
6430: PUSH
6431: LD_INT 1
6433: DOUBLE
6434: EQUAL
6435: IFTRUE 6439
6437: GO 6454
6439: POP
// Say ( l_cmndr , DS-DC-dis ) ; 2 :
6440: LD_EXP 49
6444: PPUSH
6445: LD_STRING DS-DC-dis
6447: PPUSH
6448: CALL_OW 88
6452: GO 6549
6454: LD_INT 2
6456: DOUBLE
6457: EQUAL
6458: IFTRUE 6462
6460: GO 6548
6462: POP
// begin Say ( l_cmndr , DS-DC-acp ) ;
6463: LD_EXP 49
6467: PPUSH
6468: LD_STRING DS-DC-acp
6470: PPUSH
6471: CALL_OW 88
// for i = 1 to filter do
6475: LD_ADDR_VAR 0 2
6479: PUSH
6480: DOUBLE
6481: LD_INT 1
6483: DEC
6484: ST_TO_ADDR
6485: LD_VAR 0 3
6489: PUSH
6490: FOR_TO
6491: IFFALSE 6544
// begin SetSide ( filter [ i ] , 8 ) ;
6493: LD_VAR 0 3
6497: PUSH
6498: LD_VAR 0 2
6502: ARRAY
6503: PPUSH
6504: LD_INT 8
6506: PPUSH
6507: CALL_OW 235
// PlaceUnitArea ( filter [ i ] , south_spawn , false ) ;
6511: LD_VAR 0 3
6515: PUSH
6516: LD_VAR 0 2
6520: ARRAY
6521: PPUSH
6522: LD_INT 4
6524: PPUSH
6525: LD_INT 0
6527: PPUSH
6528: CALL_OW 49
// CenterNowOnXY ( 111 , 121 ) ;
6532: LD_INT 111
6534: PPUSH
6535: LD_INT 121
6537: PPUSH
6538: CALL_OW 86
// end ;
6542: GO 6490
6544: POP
6545: POP
// end ; end ;
6546: GO 6549
6548: POP
// DialogueOff ;
6549: CALL_OW 7
// end ; 101 :
6553: GO 6705
6555: LD_INT 101
6557: DOUBLE
6558: EQUAL
6559: IFTRUE 6563
6561: GO 6615
6563: POP
// begin CreateCratesArea ( Rand ( 3 , 5 ) , crates_area , true ) ;
6564: LD_INT 3
6566: PPUSH
6567: LD_INT 5
6569: PPUSH
6570: CALL_OW 12
6574: PPUSH
6575: LD_INT 9
6577: PPUSH
6578: LD_INT 1
6580: PPUSH
6581: CALL_OW 55
// Wait ( 0 0$11 ) ;
6585: LD_INT 385
6587: PPUSH
6588: CALL_OW 67
// CreateCratesArea ( Rand ( 3 , 5 ) , crates_area , true ) ;
6592: LD_INT 3
6594: PPUSH
6595: LD_INT 5
6597: PPUSH
6598: CALL_OW 12
6602: PPUSH
6603: LD_INT 9
6605: PPUSH
6606: LD_INT 1
6608: PPUSH
6609: CALL_OW 55
// end ; 200 :
6613: GO 6705
6615: LD_INT 200
6617: DOUBLE
6618: EQUAL
6619: IFTRUE 6623
6621: GO 6704
6623: POP
// begin Say ( Leopold , DS-end ) ;
6624: LD_EXP 7
6628: PPUSH
6629: LD_STRING DS-end
6631: PPUSH
6632: CALL_OW 88
// if Difficulty = 3 then
6636: LD_OWVAR 67
6640: PUSH
6641: LD_INT 3
6643: EQUAL
6644: IFFALSE 6653
// SetAchievement ( ACH_DESERT ) ;
6646: LD_STRING ACH_DESERT
6648: PPUSH
6649: CALL_OW 543
// music_nat := 5 ;
6653: LD_ADDR_OWVAR 71
6657: PUSH
6658: LD_INT 5
6660: ST_TO_ADDR
// AddMedal ( med , 1 ) ;
6661: LD_STRING med
6663: PPUSH
6664: LD_INT 1
6666: PPUSH
6667: CALL_OW 101
// AddMedal ( med , 1 ) ;
6671: LD_STRING med
6673: PPUSH
6674: LD_INT 1
6676: PPUSH
6677: CALL_OW 101
// AddMedal ( med , 1 ) ;
6681: LD_STRING med
6683: PPUSH
6684: LD_INT 1
6686: PPUSH
6687: CALL_OW 101
// GiveMedals ( MAIN ) ;
6691: LD_STRING MAIN
6693: PPUSH
6694: CALL_OW 102
// YouWin ;
6698: CALL_OW 103
// end ; end ;
6702: GO 6705
6704: POP
// end ;
6705: PPOPN 6
6707: END
// on UnitGoesToRed ( un ) do begin if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) then
6708: LD_VAR 0 1
6712: PUSH
6713: LD_INT 22
6715: PUSH
6716: LD_INT 2
6718: PUSH
6719: EMPTY
6720: LIST
6721: LIST
6722: PUSH
6723: LD_INT 21
6725: PUSH
6726: LD_INT 2
6728: PUSH
6729: EMPTY
6730: LIST
6731: LIST
6732: PUSH
6733: EMPTY
6734: LIST
6735: LIST
6736: PPUSH
6737: CALL_OW 69
6741: IN
6742: IFFALSE 6867
// begin Wait ( Rand ( 0 0$03 , 0 0$06 ) ) ;
6744: LD_INT 105
6746: PPUSH
6747: LD_INT 210
6749: PPUSH
6750: CALL_OW 12
6754: PPUSH
6755: CALL_OW 67
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
6759: LD_VAR 0 1
6763: PPUSH
6764: CALL_OW 250
6768: PPUSH
6769: LD_VAR 0 1
6773: PPUSH
6774: CALL_OW 251
6778: PPUSH
6779: LD_INT 3
6781: PPUSH
6782: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
6786: LD_VAR 0 1
6790: PPUSH
6791: CALL_OW 250
6795: PPUSH
6796: LD_VAR 0 1
6800: PPUSH
6801: CALL_OW 251
6805: PPUSH
6806: LD_INT 3
6808: PPUSH
6809: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
6813: LD_VAR 0 1
6817: PPUSH
6818: CALL_OW 250
6822: PPUSH
6823: LD_VAR 0 1
6827: PPUSH
6828: CALL_OW 251
6832: PPUSH
6833: LD_INT 3
6835: PPUSH
6836: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
6840: LD_VAR 0 1
6844: PPUSH
6845: CALL_OW 250
6849: PPUSH
6850: LD_VAR 0 1
6854: PPUSH
6855: CALL_OW 251
6859: PPUSH
6860: LD_INT 3
6862: PPUSH
6863: CALL_OW 453
// end ; end ;
6867: PPOPN 1
6869: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
6870: LD_VAR 0 1
6874: PPUSH
6875: CALL 24433 0 1
// if un = fort then
6879: LD_VAR 0 1
6883: PUSH
6884: LD_INT 23
6886: EQUAL
6887: IFFALSE 6897
// fort_destroyed := true ;
6889: LD_ADDR_EXP 32
6893: PUSH
6894: LD_INT 1
6896: ST_TO_ADDR
// if un = l_cmndr then
6897: LD_VAR 0 1
6901: PUSH
6902: LD_EXP 49
6906: EQUAL
6907: IFFALSE 6917
// hero_died := true ;
6909: LD_ADDR_EXP 33
6913: PUSH
6914: LD_INT 1
6916: ST_TO_ADDR
// end ;
6917: PPOPN 1
6919: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin debug_strings := un ;
6920: LD_ADDR_OWVAR 48
6924: PUSH
6925: LD_VAR 0 1
6929: ST_TO_ADDR
// SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
6930: LD_VAR 0 1
6934: PPUSH
6935: LD_VAR 0 2
6939: PPUSH
6940: LD_VAR 0 3
6944: PPUSH
6945: CALL 24531 0 3
// end ;
6949: PPOPN 3
6951: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
6952: LD_VAR 0 1
6956: PPUSH
6957: CALL 24539 0 1
// end ;
6961: PPOPN 1
6963: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
6964: LD_VAR 0 1
6968: PPUSH
6969: LD_VAR 0 2
6973: PPUSH
6974: CALL 24555 0 2
// end ; end_of_file
6978: PPOPN 2
6980: END
// export function RefreshTime ( time , bool ) ; begin
6981: LD_INT 0
6983: PPUSH
// if bool then
6984: LD_VAR 0 2
6988: IFFALSE 7006
// time := time + 0 0$01 else
6990: LD_ADDR_VAR 0 1
6994: PUSH
6995: LD_VAR 0 1
6999: PUSH
7000: LD_INT 35
7002: PLUS
7003: ST_TO_ADDR
7004: GO 7020
// time := time - 0 0$01 ;
7006: LD_ADDR_VAR 0 1
7010: PUSH
7011: LD_VAR 0 1
7015: PUSH
7016: LD_INT 35
7018: MINUS
7019: ST_TO_ADDR
// result := time ;
7020: LD_ADDR_VAR 0 3
7024: PUSH
7025: LD_VAR 0 1
7029: ST_TO_ADDR
// end ;
7030: LD_VAR 0 3
7034: RET
// export function MineExist ( side ) ; begin
7035: LD_INT 0
7037: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_siberite_mine ] ] ) > 0 then
7038: LD_INT 22
7040: PUSH
7041: LD_VAR 0 1
7045: PUSH
7046: EMPTY
7047: LIST
7048: LIST
7049: PUSH
7050: LD_INT 30
7052: PUSH
7053: LD_INT 30
7055: PUSH
7056: EMPTY
7057: LIST
7058: LIST
7059: PUSH
7060: EMPTY
7061: LIST
7062: LIST
7063: PPUSH
7064: CALL_OW 69
7068: PUSH
7069: LD_INT 0
7071: GREATER
7072: IFFALSE 7084
// result := true else
7074: LD_ADDR_VAR 0 2
7078: PUSH
7079: LD_INT 1
7081: ST_TO_ADDR
7082: GO 7092
// result := false ;
7084: LD_ADDR_VAR 0 2
7088: PUSH
7089: LD_INT 0
7091: ST_TO_ADDR
// end ;
7092: LD_VAR 0 2
7096: RET
// export function FacExist ( side ) ; begin
7097: LD_INT 0
7099: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_factory ] ] ) > 0 ;
7100: LD_ADDR_VAR 0 2
7104: PUSH
7105: LD_INT 22
7107: PUSH
7108: LD_VAR 0 1
7112: PUSH
7113: EMPTY
7114: LIST
7115: LIST
7116: PUSH
7117: LD_INT 30
7119: PUSH
7120: LD_INT 3
7122: PUSH
7123: EMPTY
7124: LIST
7125: LIST
7126: PUSH
7127: EMPTY
7128: LIST
7129: LIST
7130: PPUSH
7131: CALL_OW 69
7135: PUSH
7136: LD_INT 0
7138: GREATER
7139: ST_TO_ADDR
// end ;
7140: LD_VAR 0 2
7144: RET
// export function ConnectWithTower ( side ) ; var i , filter , tower ; begin
7145: LD_INT 0
7147: PPUSH
7148: PPUSH
7149: PPUSH
7150: PPUSH
// filter := FilterAllUnits ( [ [ f_side , side ] , [ f_control , control_remote ] , [ f_ok ] ] ) ;
7151: LD_ADDR_VAR 0 4
7155: PUSH
7156: LD_INT 22
7158: PUSH
7159: LD_VAR 0 1
7163: PUSH
7164: EMPTY
7165: LIST
7166: LIST
7167: PUSH
7168: LD_INT 33
7170: PUSH
7171: LD_INT 2
7173: PUSH
7174: EMPTY
7175: LIST
7176: LIST
7177: PUSH
7178: LD_INT 50
7180: PUSH
7181: EMPTY
7182: LIST
7183: PUSH
7184: EMPTY
7185: LIST
7186: LIST
7187: LIST
7188: PPUSH
7189: CALL_OW 69
7193: ST_TO_ADDR
// tower := FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , ar_control_tower ] ] ) ;
7194: LD_ADDR_VAR 0 5
7198: PUSH
7199: LD_INT 22
7201: PUSH
7202: LD_VAR 0 1
7206: PUSH
7207: EMPTY
7208: LIST
7209: LIST
7210: PUSH
7211: LD_INT 34
7213: PUSH
7214: LD_INT 31
7216: PUSH
7217: EMPTY
7218: LIST
7219: LIST
7220: PUSH
7221: EMPTY
7222: LIST
7223: LIST
7224: PPUSH
7225: CALL_OW 69
7229: ST_TO_ADDR
// if tower > 0 and filter > 0 then
7230: LD_VAR 0 5
7234: PUSH
7235: LD_INT 0
7237: GREATER
7238: PUSH
7239: LD_VAR 0 4
7243: PUSH
7244: LD_INT 0
7246: GREATER
7247: AND
7248: IFFALSE 7324
// for i = 1 to filter do
7250: LD_ADDR_VAR 0 3
7254: PUSH
7255: DOUBLE
7256: LD_INT 1
7258: DEC
7259: ST_TO_ADDR
7260: LD_VAR 0 4
7264: PUSH
7265: FOR_TO
7266: IFFALSE 7322
// if not IsControledBy ( filter [ i ] ) then
7268: LD_VAR 0 4
7272: PUSH
7273: LD_VAR 0 3
7277: ARRAY
7278: PPUSH
7279: CALL_OW 312
7283: NOT
7284: IFFALSE 7320
// ComLinkTo ( filter [ i ] , tower [ Rand ( 1 , tower ) ] ) ;
7286: LD_VAR 0 4
7290: PUSH
7291: LD_VAR 0 3
7295: ARRAY
7296: PPUSH
7297: LD_VAR 0 5
7301: PUSH
7302: LD_INT 1
7304: PPUSH
7305: LD_VAR 0 5
7309: PPUSH
7310: CALL_OW 12
7314: ARRAY
7315: PPUSH
7316: CALL_OW 135
7320: GO 7265
7322: POP
7323: POP
// end ;
7324: LD_VAR 0 2
7328: RET
// export function CreateHumanWithClass ( clas , lvl ) ; var skill_com , skill_eng , skill_mech , skill_sci , bonus ; begin
7329: LD_INT 0
7331: PPUSH
7332: PPUSH
7333: PPUSH
7334: PPUSH
7335: PPUSH
7336: PPUSH
// hc_class := clas ;
7337: LD_ADDR_OWVAR 28
7341: PUSH
7342: LD_VAR 0 1
7346: ST_TO_ADDR
// skill_com := ( lvl + Rand ( - 1 , 1 ) ) ;
7347: LD_ADDR_VAR 0 4
7351: PUSH
7352: LD_VAR 0 2
7356: PUSH
7357: LD_INT 1
7359: NEG
7360: PPUSH
7361: LD_INT 1
7363: PPUSH
7364: CALL_OW 12
7368: PLUS
7369: ST_TO_ADDR
// skill_eng := ( lvl + Rand ( - 1 , 1 ) ) ;
7370: LD_ADDR_VAR 0 5
7374: PUSH
7375: LD_VAR 0 2
7379: PUSH
7380: LD_INT 1
7382: NEG
7383: PPUSH
7384: LD_INT 1
7386: PPUSH
7387: CALL_OW 12
7391: PLUS
7392: ST_TO_ADDR
// skill_mech := ( lvl + Rand ( - 1 , 1 ) ) ;
7393: LD_ADDR_VAR 0 6
7397: PUSH
7398: LD_VAR 0 2
7402: PUSH
7403: LD_INT 1
7405: NEG
7406: PPUSH
7407: LD_INT 1
7409: PPUSH
7410: CALL_OW 12
7414: PLUS
7415: ST_TO_ADDR
// skill_sci := ( lvl + Rand ( - 1 , 1 ) ) ;
7416: LD_ADDR_VAR 0 7
7420: PUSH
7421: LD_VAR 0 2
7425: PUSH
7426: LD_INT 1
7428: NEG
7429: PPUSH
7430: LD_INT 1
7432: PPUSH
7433: CALL_OW 12
7437: PLUS
7438: ST_TO_ADDR
// if clas = 1 or clas = 9 or clas = class_sniper or clas = class_mortar then
7439: LD_VAR 0 1
7443: PUSH
7444: LD_INT 1
7446: EQUAL
7447: PUSH
7448: LD_VAR 0 1
7452: PUSH
7453: LD_INT 9
7455: EQUAL
7456: OR
7457: PUSH
7458: LD_VAR 0 1
7462: PUSH
7463: LD_INT 5
7465: EQUAL
7466: OR
7467: PUSH
7468: LD_VAR 0 1
7472: PUSH
7473: LD_INT 8
7475: EQUAL
7476: OR
7477: IFFALSE 7502
// bonus := [ 2 , 0 , 0 , 0 ] ;
7479: LD_ADDR_VAR 0 8
7483: PUSH
7484: LD_INT 2
7486: PUSH
7487: LD_INT 0
7489: PUSH
7490: LD_INT 0
7492: PUSH
7493: LD_INT 0
7495: PUSH
7496: EMPTY
7497: LIST
7498: LIST
7499: LIST
7500: LIST
7501: ST_TO_ADDR
// if clas = 2 then
7502: LD_VAR 0 1
7506: PUSH
7507: LD_INT 2
7509: EQUAL
7510: IFFALSE 7535
// bonus := [ 0 , 2 , 0 , 0 ] ;
7512: LD_ADDR_VAR 0 8
7516: PUSH
7517: LD_INT 0
7519: PUSH
7520: LD_INT 2
7522: PUSH
7523: LD_INT 0
7525: PUSH
7526: LD_INT 0
7528: PUSH
7529: EMPTY
7530: LIST
7531: LIST
7532: LIST
7533: LIST
7534: ST_TO_ADDR
// if clas = 3 then
7535: LD_VAR 0 1
7539: PUSH
7540: LD_INT 3
7542: EQUAL
7543: IFFALSE 7568
// bonus := [ 0 , 0 , 2 , 0 ] ;
7545: LD_ADDR_VAR 0 8
7549: PUSH
7550: LD_INT 0
7552: PUSH
7553: LD_INT 0
7555: PUSH
7556: LD_INT 2
7558: PUSH
7559: LD_INT 0
7561: PUSH
7562: EMPTY
7563: LIST
7564: LIST
7565: LIST
7566: LIST
7567: ST_TO_ADDR
// if clas = 4 then
7568: LD_VAR 0 1
7572: PUSH
7573: LD_INT 4
7575: EQUAL
7576: IFFALSE 7601
// bonus := [ 0 , 0 , 0 , 2 ] ;
7578: LD_ADDR_VAR 0 8
7582: PUSH
7583: LD_INT 0
7585: PUSH
7586: LD_INT 0
7588: PUSH
7589: LD_INT 0
7591: PUSH
7592: LD_INT 2
7594: PUSH
7595: EMPTY
7596: LIST
7597: LIST
7598: LIST
7599: LIST
7600: ST_TO_ADDR
// if clas > 4 and clas <> 9 and clas <> class_sniper and clas <> class_mortar then
7601: LD_VAR 0 1
7605: PUSH
7606: LD_INT 4
7608: GREATER
7609: PUSH
7610: LD_VAR 0 1
7614: PUSH
7615: LD_INT 9
7617: NONEQUAL
7618: AND
7619: PUSH
7620: LD_VAR 0 1
7624: PUSH
7625: LD_INT 5
7627: NONEQUAL
7628: AND
7629: PUSH
7630: LD_VAR 0 1
7634: PUSH
7635: LD_INT 8
7637: NONEQUAL
7638: AND
7639: IFFALSE 7664
// bonus := [ 0 , 0 , 0 , 0 ] ;
7641: LD_ADDR_VAR 0 8
7645: PUSH
7646: LD_INT 0
7648: PUSH
7649: LD_INT 0
7651: PUSH
7652: LD_INT 0
7654: PUSH
7655: LD_INT 0
7657: PUSH
7658: EMPTY
7659: LIST
7660: LIST
7661: LIST
7662: LIST
7663: ST_TO_ADDR
// hc_basic_skills := [ Rand ( 0 , 2 ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) ] ;
7664: LD_ADDR_OWVAR 30
7668: PUSH
7669: LD_INT 0
7671: PPUSH
7672: LD_INT 2
7674: PPUSH
7675: CALL_OW 12
7679: PUSH
7680: LD_INT 0
7682: PPUSH
7683: LD_INT 2
7685: PPUSH
7686: CALL_OW 12
7690: PUSH
7691: LD_INT 0
7693: PPUSH
7694: LD_INT 2
7696: PPUSH
7697: CALL_OW 12
7701: PUSH
7702: LD_INT 0
7704: PPUSH
7705: LD_INT 2
7707: PPUSH
7708: CALL_OW 12
7712: PUSH
7713: EMPTY
7714: LIST
7715: LIST
7716: LIST
7717: LIST
7718: ST_TO_ADDR
// hc_skills := [ skill_com + bonus [ 1 ] , skill_eng + bonus [ 2 ] , skill_mech + bonus [ 3 ] , skill_sci + bonus [ 4 ] ] ;
7719: LD_ADDR_OWVAR 31
7723: PUSH
7724: LD_VAR 0 4
7728: PUSH
7729: LD_VAR 0 8
7733: PUSH
7734: LD_INT 1
7736: ARRAY
7737: PLUS
7738: PUSH
7739: LD_VAR 0 5
7743: PUSH
7744: LD_VAR 0 8
7748: PUSH
7749: LD_INT 2
7751: ARRAY
7752: PLUS
7753: PUSH
7754: LD_VAR 0 6
7758: PUSH
7759: LD_VAR 0 8
7763: PUSH
7764: LD_INT 3
7766: ARRAY
7767: PLUS
7768: PUSH
7769: LD_VAR 0 7
7773: PUSH
7774: LD_VAR 0 8
7778: PUSH
7779: LD_INT 4
7781: ARRAY
7782: PLUS
7783: PUSH
7784: EMPTY
7785: LIST
7786: LIST
7787: LIST
7788: LIST
7789: ST_TO_ADDR
// hc_sex := Rand ( sex_male , sex_female ) ;
7790: LD_ADDR_OWVAR 27
7794: PUSH
7795: LD_INT 1
7797: PPUSH
7798: LD_INT 2
7800: PPUSH
7801: CALL_OW 12
7805: ST_TO_ADDR
// hc_gallery :=  ;
7806: LD_ADDR_OWVAR 33
7810: PUSH
7811: LD_STRING 
7813: ST_TO_ADDR
// hc_attr := [ Rand ( 8 , 12 ) , Rand ( 9 , 11 ) ] ;
7814: LD_ADDR_OWVAR 29
7818: PUSH
7819: LD_INT 8
7821: PPUSH
7822: LD_INT 12
7824: PPUSH
7825: CALL_OW 12
7829: PUSH
7830: LD_INT 9
7832: PPUSH
7833: LD_INT 11
7835: PPUSH
7836: CALL_OW 12
7840: PUSH
7841: EMPTY
7842: LIST
7843: LIST
7844: ST_TO_ADDR
// hc_name :=  ;
7845: LD_ADDR_OWVAR 26
7849: PUSH
7850: LD_STRING 
7852: ST_TO_ADDR
// result := CreateHuman ;
7853: LD_ADDR_VAR 0 3
7857: PUSH
7858: CALL_OW 44
7862: ST_TO_ADDR
// end ;
7863: LD_VAR 0 3
7867: RET
// export function GetSpeed ( unit ) ; begin
7868: LD_INT 0
7870: PPUSH
// result := GetProperties ( unit ) [ 1 ] ;
7871: LD_ADDR_VAR 0 2
7875: PUSH
7876: LD_VAR 0 1
7880: PPUSH
7881: CALL_OW 464
7885: PUSH
7886: LD_INT 1
7888: ARRAY
7889: ST_TO_ADDR
// end ;
7890: LD_VAR 0 2
7894: RET
// export function CreateNature ( area , num1 , num2 , num3 , num4 ) ; var l , apeman , tiger , bird , horse ; begin
7895: LD_INT 0
7897: PPUSH
7898: PPUSH
7899: PPUSH
7900: PPUSH
7901: PPUSH
7902: PPUSH
// uc_nation = nation_nature ;
7903: LD_ADDR_OWVAR 21
7907: PUSH
7908: LD_INT 0
7910: ST_TO_ADDR
// uc_side = 0 ;
7911: LD_ADDR_OWVAR 20
7915: PUSH
7916: LD_INT 0
7918: ST_TO_ADDR
// l = 0 ;
7919: LD_ADDR_VAR 0 7
7923: PUSH
7924: LD_INT 0
7926: ST_TO_ADDR
// repeat begin uc_direction = Rand ( 0 , 5 ) ;
7927: LD_ADDR_OWVAR 24
7931: PUSH
7932: LD_INT 0
7934: PPUSH
7935: LD_INT 5
7937: PPUSH
7938: CALL_OW 12
7942: ST_TO_ADDR
// hc_agressivity = Rand ( - 5 , 0 ) ;
7943: LD_ADDR_OWVAR 35
7947: PUSH
7948: LD_INT 5
7950: NEG
7951: PPUSH
7952: LD_INT 0
7954: PPUSH
7955: CALL_OW 12
7959: ST_TO_ADDR
// hc_gallery =  ;
7960: LD_ADDR_OWVAR 33
7964: PUSH
7965: LD_STRING 
7967: ST_TO_ADDR
// hc_class = class_apeman ;
7968: LD_ADDR_OWVAR 28
7972: PUSH
7973: LD_INT 12
7975: ST_TO_ADDR
// hc_attr = [ Rand ( 11 , 13 ) , Rand ( 10 , 11 ) ] ;
7976: LD_ADDR_OWVAR 29
7980: PUSH
7981: LD_INT 11
7983: PPUSH
7984: LD_INT 13
7986: PPUSH
7987: CALL_OW 12
7991: PUSH
7992: LD_INT 10
7994: PPUSH
7995: LD_INT 11
7997: PPUSH
7998: CALL_OW 12
8002: PUSH
8003: EMPTY
8004: LIST
8005: LIST
8006: ST_TO_ADDR
// hc_sex = sex_male ;
8007: LD_ADDR_OWVAR 27
8011: PUSH
8012: LD_INT 1
8014: ST_TO_ADDR
// hc_skills = [ Rand ( 0 , 2 ) , 0 , 0 , 0 ] ;
8015: LD_ADDR_OWVAR 31
8019: PUSH
8020: LD_INT 0
8022: PPUSH
8023: LD_INT 2
8025: PPUSH
8026: CALL_OW 12
8030: PUSH
8031: LD_INT 0
8033: PUSH
8034: LD_INT 0
8036: PUSH
8037: LD_INT 0
8039: PUSH
8040: EMPTY
8041: LIST
8042: LIST
8043: LIST
8044: LIST
8045: ST_TO_ADDR
// apeman = CreateHuman ;
8046: LD_ADDR_VAR 0 8
8050: PUSH
8051: CALL_OW 44
8055: ST_TO_ADDR
// PlaceUnitArea ( apeman , area , false ) ;
8056: LD_VAR 0 8
8060: PPUSH
8061: LD_VAR 0 1
8065: PPUSH
8066: LD_INT 0
8068: PPUSH
8069: CALL_OW 49
// l = l + 1 ;
8073: LD_ADDR_VAR 0 7
8077: PUSH
8078: LD_VAR 0 7
8082: PUSH
8083: LD_INT 1
8085: PLUS
8086: ST_TO_ADDR
// end until l = num1 ;
8087: LD_VAR 0 7
8091: PUSH
8092: LD_VAR 0 2
8096: EQUAL
8097: IFFALSE 7927
// l = 0 ;
8099: LD_ADDR_VAR 0 7
8103: PUSH
8104: LD_INT 0
8106: ST_TO_ADDR
// repeat begin hc_agressivity = Rand ( 0 , 25 ) ;
8107: LD_ADDR_OWVAR 35
8111: PUSH
8112: LD_INT 0
8114: PPUSH
8115: LD_INT 25
8117: PPUSH
8118: CALL_OW 12
8122: ST_TO_ADDR
// hc_class = class_tiger ;
8123: LD_ADDR_OWVAR 28
8127: PUSH
8128: LD_INT 14
8130: ST_TO_ADDR
// hc_sex = sex_male ;
8131: LD_ADDR_OWVAR 27
8135: PUSH
8136: LD_INT 1
8138: ST_TO_ADDR
// hc_gallery = sandnature ;
8139: LD_ADDR_OWVAR 33
8143: PUSH
8144: LD_STRING sandnature
8146: ST_TO_ADDR
// hc_face_number = 3 ;
8147: LD_ADDR_OWVAR 34
8151: PUSH
8152: LD_INT 3
8154: ST_TO_ADDR
// tiger = CreateHuman ;
8155: LD_ADDR_VAR 0 9
8159: PUSH
8160: CALL_OW 44
8164: ST_TO_ADDR
// PlaceUnitArea ( tiger , area , false ) ;
8165: LD_VAR 0 9
8169: PPUSH
8170: LD_VAR 0 1
8174: PPUSH
8175: LD_INT 0
8177: PPUSH
8178: CALL_OW 49
// l = l + 1 ;
8182: LD_ADDR_VAR 0 7
8186: PUSH
8187: LD_VAR 0 7
8191: PUSH
8192: LD_INT 1
8194: PLUS
8195: ST_TO_ADDR
// end until l = num2 ;
8196: LD_VAR 0 7
8200: PUSH
8201: LD_VAR 0 3
8205: EQUAL
8206: IFFALSE 8107
// l = 0 ;
8208: LD_ADDR_VAR 0 7
8212: PUSH
8213: LD_INT 0
8215: ST_TO_ADDR
// repeat begin hc_class = class_phororhacos ;
8216: LD_ADDR_OWVAR 28
8220: PUSH
8221: LD_INT 18
8223: ST_TO_ADDR
// hc_gallery = sandnature ;
8224: LD_ADDR_OWVAR 33
8228: PUSH
8229: LD_STRING sandnature
8231: ST_TO_ADDR
// hc_face_number = 1 ;
8232: LD_ADDR_OWVAR 34
8236: PUSH
8237: LD_INT 1
8239: ST_TO_ADDR
// bird = CreateHuman ;
8240: LD_ADDR_VAR 0 10
8244: PUSH
8245: CALL_OW 44
8249: ST_TO_ADDR
// PlaceUnitAnywhere ( bird , false ) ;
8250: LD_VAR 0 10
8254: PPUSH
8255: LD_INT 0
8257: PPUSH
8258: CALL_OW 51
// l = l + 1 ;
8262: LD_ADDR_VAR 0 7
8266: PUSH
8267: LD_VAR 0 7
8271: PUSH
8272: LD_INT 1
8274: PLUS
8275: ST_TO_ADDR
// end until l = num3 ;
8276: LD_VAR 0 7
8280: PUSH
8281: LD_VAR 0 4
8285: EQUAL
8286: IFFALSE 8216
// l = 0 ;
8288: LD_ADDR_VAR 0 7
8292: PUSH
8293: LD_INT 0
8295: ST_TO_ADDR
// repeat begin hc_class = 21 ;
8296: LD_ADDR_OWVAR 28
8300: PUSH
8301: LD_INT 21
8303: ST_TO_ADDR
// hc_gallery = sandnature ;
8304: LD_ADDR_OWVAR 33
8308: PUSH
8309: LD_STRING sandnature
8311: ST_TO_ADDR
// hc_face_number = 5 ;
8312: LD_ADDR_OWVAR 34
8316: PUSH
8317: LD_INT 5
8319: ST_TO_ADDR
// horse := CreateHuman ;
8320: LD_ADDR_VAR 0 11
8324: PUSH
8325: CALL_OW 44
8329: ST_TO_ADDR
// PlaceUnitArea ( horse , area , false ) ;
8330: LD_VAR 0 11
8334: PPUSH
8335: LD_VAR 0 1
8339: PPUSH
8340: LD_INT 0
8342: PPUSH
8343: CALL_OW 49
// l = l + 1 ;
8347: LD_ADDR_VAR 0 7
8351: PUSH
8352: LD_VAR 0 7
8356: PUSH
8357: LD_INT 1
8359: PLUS
8360: ST_TO_ADDR
// end until l = num4 ;
8361: LD_VAR 0 7
8365: PUSH
8366: LD_VAR 0 5
8370: EQUAL
8371: IFFALSE 8296
// end ;
8373: LD_VAR 0 6
8377: RET
// export function PrepareComm ; begin
8378: LD_INT 0
8380: PPUSH
// uc_side := 1 ;
8381: LD_ADDR_OWVAR 20
8385: PUSH
8386: LD_INT 1
8388: ST_TO_ADDR
// uc_nation := 1 ;
8389: LD_ADDR_OWVAR 21
8393: PUSH
8394: LD_INT 1
8396: ST_TO_ADDR
// hc_gallery :=  ;
8397: LD_ADDR_OWVAR 33
8401: PUSH
8402: LD_STRING 
8404: ST_TO_ADDR
// hc_name :=  ;
8405: LD_ADDR_OWVAR 26
8409: PUSH
8410: LD_STRING 
8412: ST_TO_ADDR
// hc_class := 1 ;
8413: LD_ADDR_OWVAR 28
8417: PUSH
8418: LD_INT 1
8420: ST_TO_ADDR
// hc_sex := sex_male ;
8421: LD_ADDR_OWVAR 27
8425: PUSH
8426: LD_INT 1
8428: ST_TO_ADDR
// am_comander := CreateHuman ;
8429: LD_ADDR_EXP 46
8433: PUSH
8434: CALL_OW 44
8438: ST_TO_ADDR
// uc_side := 3 ;
8439: LD_ADDR_OWVAR 20
8443: PUSH
8444: LD_INT 3
8446: ST_TO_ADDR
// uc_nation := 3 ;
8447: LD_ADDR_OWVAR 21
8451: PUSH
8452: LD_INT 3
8454: ST_TO_ADDR
// ru_comander := CreateHuman ;
8455: LD_ADDR_EXP 47
8459: PUSH
8460: CALL_OW 44
8464: ST_TO_ADDR
// uc_side := 2 ;
8465: LD_ADDR_OWVAR 20
8469: PUSH
8470: LD_INT 2
8472: ST_TO_ADDR
// uc_nation := 2 ;
8473: LD_ADDR_OWVAR 21
8477: PUSH
8478: LD_INT 2
8480: ST_TO_ADDR
// hc_name := Heike Steyer ;
8481: LD_ADDR_OWVAR 26
8485: PUSH
8486: LD_STRING Heike Steyer
8488: ST_TO_ADDR
// hc_sex := sex_female ;
8489: LD_ADDR_OWVAR 27
8493: PUSH
8494: LD_INT 2
8496: ST_TO_ADDR
// hc_gallery := sandar ;
8497: LD_ADDR_OWVAR 33
8501: PUSH
8502: LD_STRING sandar
8504: ST_TO_ADDR
// hc_face_number := 14 ;
8505: LD_ADDR_OWVAR 34
8509: PUSH
8510: LD_INT 14
8512: ST_TO_ADDR
// ar_comander := CreateHuman ;
8513: LD_ADDR_EXP 48
8517: PUSH
8518: CALL_OW 44
8522: ST_TO_ADDR
// end ;
8523: LD_VAR 0 1
8527: RET
// export function SpeedFilter ( filter , speed ) ; var list , i ; begin
8528: LD_INT 0
8530: PPUSH
8531: PPUSH
8532: PPUSH
// list := [ ] ;
8533: LD_ADDR_VAR 0 4
8537: PUSH
8538: EMPTY
8539: ST_TO_ADDR
// for i = 1 to filter do
8540: LD_ADDR_VAR 0 5
8544: PUSH
8545: DOUBLE
8546: LD_INT 1
8548: DEC
8549: ST_TO_ADDR
8550: LD_VAR 0 1
8554: PUSH
8555: FOR_TO
8556: IFFALSE 8605
// if GetSpeed ( filter [ i ] ) < speed then
8558: LD_VAR 0 1
8562: PUSH
8563: LD_VAR 0 5
8567: ARRAY
8568: PPUSH
8569: CALL 7868 0 1
8573: PUSH
8574: LD_VAR 0 2
8578: LESS
8579: IFFALSE 8603
// list := list ^ filter [ i ] ;
8581: LD_ADDR_VAR 0 4
8585: PUSH
8586: LD_VAR 0 4
8590: PUSH
8591: LD_VAR 0 1
8595: PUSH
8596: LD_VAR 0 5
8600: ARRAY
8601: ADD
8602: ST_TO_ADDR
8603: GO 8555
8605: POP
8606: POP
// result := list ;
8607: LD_ADDR_VAR 0 3
8611: PUSH
8612: LD_VAR 0 4
8616: ST_TO_ADDR
// end ; end_of_file
8617: LD_VAR 0 3
8621: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export function InitGlobalVariables ; begin
8622: LD_INT 0
8624: PPUSH
// ar_miner := 81 ;
8625: LD_ADDR_EXP 59
8629: PUSH
8630: LD_INT 81
8632: ST_TO_ADDR
// ar_crane := 88 ;
8633: LD_ADDR_EXP 58
8637: PUSH
8638: LD_INT 88
8640: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
8641: LD_ADDR_EXP 53
8645: PUSH
8646: LD_INT 89
8648: ST_TO_ADDR
// us_hack := 99 ;
8649: LD_ADDR_EXP 54
8653: PUSH
8654: LD_INT 99
8656: ST_TO_ADDR
// us_artillery := 97 ;
8657: LD_ADDR_EXP 55
8661: PUSH
8662: LD_INT 97
8664: ST_TO_ADDR
// ar_bio_bomb := 91 ;
8665: LD_ADDR_EXP 56
8669: PUSH
8670: LD_INT 91
8672: ST_TO_ADDR
// ar_mortar := 92 ;
8673: LD_ADDR_EXP 57
8677: PUSH
8678: LD_INT 92
8680: ST_TO_ADDR
// ru_flamethrower := 93 ;
8681: LD_ADDR_EXP 60
8685: PUSH
8686: LD_INT 93
8688: ST_TO_ADDR
// ru_radar := 98 ;
8689: LD_ADDR_EXP 52
8693: PUSH
8694: LD_INT 98
8696: ST_TO_ADDR
// tech_Artillery := 80 ;
8697: LD_ADDR_EXP 61
8701: PUSH
8702: LD_INT 80
8704: ST_TO_ADDR
// tech_RadMat := 81 ;
8705: LD_ADDR_EXP 62
8709: PUSH
8710: LD_INT 81
8712: ST_TO_ADDR
// tech_BasicTools := 82 ;
8713: LD_ADDR_EXP 63
8717: PUSH
8718: LD_INT 82
8720: ST_TO_ADDR
// tech_Cargo := 83 ;
8721: LD_ADDR_EXP 64
8725: PUSH
8726: LD_INT 83
8728: ST_TO_ADDR
// tech_Track := 84 ;
8729: LD_ADDR_EXP 65
8733: PUSH
8734: LD_INT 84
8736: ST_TO_ADDR
// tech_Crane := 85 ;
8737: LD_ADDR_EXP 66
8741: PUSH
8742: LD_INT 85
8744: ST_TO_ADDR
// tech_Bulldozer := 86 ;
8745: LD_ADDR_EXP 67
8749: PUSH
8750: LD_INT 86
8752: ST_TO_ADDR
// tech_Hovercraft := 87 ;
8753: LD_ADDR_EXP 68
8757: PUSH
8758: LD_INT 87
8760: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
8761: LD_ADDR_EXP 69
8765: PUSH
8766: LD_INT 88
8768: ST_TO_ADDR
// end ;
8769: LD_VAR 0 1
8773: RET
// every 1 do
8774: GO 8776
8776: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
8777: CALL 8622 0 0
8781: END
// every 0 0$1 do
8782: GO 8784
8784: DISABLE
// begin enable ;
8785: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
8786: LD_STRING updateTimer(
8788: PUSH
8789: LD_OWVAR 1
8793: STR
8794: PUSH
8795: LD_STRING );
8797: STR
8798: PPUSH
8799: CALL_OW 559
// end ;
8803: END
// export function SOS_MapStart ( ) ; begin
8804: LD_INT 0
8806: PPUSH
// if streamModeActive then
8807: LD_EXP 70
8811: IFFALSE 8820
// DefineStreamItems ( true ) ;
8813: LD_INT 1
8815: PPUSH
8816: CALL 10474 0 1
// UpdateFactoryWaypoints ( ) ;
8820: CALL 23335 0 0
// UpdateWarehouseGatheringPoints ( ) ;
8824: CALL 23592 0 0
// end ;
8828: LD_VAR 0 1
8832: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
8833: LD_INT 0
8835: PPUSH
// if p2 = 100 then
8836: LD_VAR 0 2
8840: PUSH
8841: LD_INT 100
8843: EQUAL
8844: IFFALSE 9847
// begin if not StreamModeActive then
8846: LD_EXP 70
8850: NOT
8851: IFFALSE 8861
// StreamModeActive := true ;
8853: LD_ADDR_EXP 70
8857: PUSH
8858: LD_INT 1
8860: ST_TO_ADDR
// if p3 = 0 then
8861: LD_VAR 0 3
8865: PUSH
8866: LD_INT 0
8868: EQUAL
8869: IFFALSE 8875
// InitStreamMode ;
8871: CALL 10010 0 0
// if p3 = 1 then
8875: LD_VAR 0 3
8879: PUSH
8880: LD_INT 1
8882: EQUAL
8883: IFFALSE 8893
// sRocket := true ;
8885: LD_ADDR_EXP 75
8889: PUSH
8890: LD_INT 1
8892: ST_TO_ADDR
// if p3 = 2 then
8893: LD_VAR 0 3
8897: PUSH
8898: LD_INT 2
8900: EQUAL
8901: IFFALSE 8911
// sSpeed := true ;
8903: LD_ADDR_EXP 74
8907: PUSH
8908: LD_INT 1
8910: ST_TO_ADDR
// if p3 = 3 then
8911: LD_VAR 0 3
8915: PUSH
8916: LD_INT 3
8918: EQUAL
8919: IFFALSE 8929
// sEngine := true ;
8921: LD_ADDR_EXP 76
8925: PUSH
8926: LD_INT 1
8928: ST_TO_ADDR
// if p3 = 4 then
8929: LD_VAR 0 3
8933: PUSH
8934: LD_INT 4
8936: EQUAL
8937: IFFALSE 8947
// sSpec := true ;
8939: LD_ADDR_EXP 73
8943: PUSH
8944: LD_INT 1
8946: ST_TO_ADDR
// if p3 = 5 then
8947: LD_VAR 0 3
8951: PUSH
8952: LD_INT 5
8954: EQUAL
8955: IFFALSE 8965
// sLevel := true ;
8957: LD_ADDR_EXP 77
8961: PUSH
8962: LD_INT 1
8964: ST_TO_ADDR
// if p3 = 6 then
8965: LD_VAR 0 3
8969: PUSH
8970: LD_INT 6
8972: EQUAL
8973: IFFALSE 8983
// sArmoury := true ;
8975: LD_ADDR_EXP 78
8979: PUSH
8980: LD_INT 1
8982: ST_TO_ADDR
// if p3 = 7 then
8983: LD_VAR 0 3
8987: PUSH
8988: LD_INT 7
8990: EQUAL
8991: IFFALSE 9001
// sRadar := true ;
8993: LD_ADDR_EXP 79
8997: PUSH
8998: LD_INT 1
9000: ST_TO_ADDR
// if p3 = 8 then
9001: LD_VAR 0 3
9005: PUSH
9006: LD_INT 8
9008: EQUAL
9009: IFFALSE 9019
// sBunker := true ;
9011: LD_ADDR_EXP 80
9015: PUSH
9016: LD_INT 1
9018: ST_TO_ADDR
// if p3 = 9 then
9019: LD_VAR 0 3
9023: PUSH
9024: LD_INT 9
9026: EQUAL
9027: IFFALSE 9037
// sHack := true ;
9029: LD_ADDR_EXP 81
9033: PUSH
9034: LD_INT 1
9036: ST_TO_ADDR
// if p3 = 10 then
9037: LD_VAR 0 3
9041: PUSH
9042: LD_INT 10
9044: EQUAL
9045: IFFALSE 9055
// sFire := true ;
9047: LD_ADDR_EXP 82
9051: PUSH
9052: LD_INT 1
9054: ST_TO_ADDR
// if p3 = 11 then
9055: LD_VAR 0 3
9059: PUSH
9060: LD_INT 11
9062: EQUAL
9063: IFFALSE 9073
// sRefresh := true ;
9065: LD_ADDR_EXP 83
9069: PUSH
9070: LD_INT 1
9072: ST_TO_ADDR
// if p3 = 12 then
9073: LD_VAR 0 3
9077: PUSH
9078: LD_INT 12
9080: EQUAL
9081: IFFALSE 9091
// sExp := true ;
9083: LD_ADDR_EXP 84
9087: PUSH
9088: LD_INT 1
9090: ST_TO_ADDR
// if p3 = 13 then
9091: LD_VAR 0 3
9095: PUSH
9096: LD_INT 13
9098: EQUAL
9099: IFFALSE 9109
// sDepot := true ;
9101: LD_ADDR_EXP 85
9105: PUSH
9106: LD_INT 1
9108: ST_TO_ADDR
// if p3 = 14 then
9109: LD_VAR 0 3
9113: PUSH
9114: LD_INT 14
9116: EQUAL
9117: IFFALSE 9127
// sFlag := true ;
9119: LD_ADDR_EXP 86
9123: PUSH
9124: LD_INT 1
9126: ST_TO_ADDR
// if p3 = 15 then
9127: LD_VAR 0 3
9131: PUSH
9132: LD_INT 15
9134: EQUAL
9135: IFFALSE 9145
// sKamikadze := true ;
9137: LD_ADDR_EXP 94
9141: PUSH
9142: LD_INT 1
9144: ST_TO_ADDR
// if p3 = 16 then
9145: LD_VAR 0 3
9149: PUSH
9150: LD_INT 16
9152: EQUAL
9153: IFFALSE 9163
// sTroll := true ;
9155: LD_ADDR_EXP 95
9159: PUSH
9160: LD_INT 1
9162: ST_TO_ADDR
// if p3 = 17 then
9163: LD_VAR 0 3
9167: PUSH
9168: LD_INT 17
9170: EQUAL
9171: IFFALSE 9181
// sSlow := true ;
9173: LD_ADDR_EXP 96
9177: PUSH
9178: LD_INT 1
9180: ST_TO_ADDR
// if p3 = 18 then
9181: LD_VAR 0 3
9185: PUSH
9186: LD_INT 18
9188: EQUAL
9189: IFFALSE 9199
// sLack := true ;
9191: LD_ADDR_EXP 97
9195: PUSH
9196: LD_INT 1
9198: ST_TO_ADDR
// if p3 = 19 then
9199: LD_VAR 0 3
9203: PUSH
9204: LD_INT 19
9206: EQUAL
9207: IFFALSE 9217
// sTank := true ;
9209: LD_ADDR_EXP 99
9213: PUSH
9214: LD_INT 1
9216: ST_TO_ADDR
// if p3 = 20 then
9217: LD_VAR 0 3
9221: PUSH
9222: LD_INT 20
9224: EQUAL
9225: IFFALSE 9235
// sRemote := true ;
9227: LD_ADDR_EXP 100
9231: PUSH
9232: LD_INT 1
9234: ST_TO_ADDR
// if p3 = 21 then
9235: LD_VAR 0 3
9239: PUSH
9240: LD_INT 21
9242: EQUAL
9243: IFFALSE 9253
// sPowell := true ;
9245: LD_ADDR_EXP 101
9249: PUSH
9250: LD_INT 1
9252: ST_TO_ADDR
// if p3 = 22 then
9253: LD_VAR 0 3
9257: PUSH
9258: LD_INT 22
9260: EQUAL
9261: IFFALSE 9271
// sTeleport := true ;
9263: LD_ADDR_EXP 104
9267: PUSH
9268: LD_INT 1
9270: ST_TO_ADDR
// if p3 = 23 then
9271: LD_VAR 0 3
9275: PUSH
9276: LD_INT 23
9278: EQUAL
9279: IFFALSE 9289
// sOilTower := true ;
9281: LD_ADDR_EXP 106
9285: PUSH
9286: LD_INT 1
9288: ST_TO_ADDR
// if p3 = 24 then
9289: LD_VAR 0 3
9293: PUSH
9294: LD_INT 24
9296: EQUAL
9297: IFFALSE 9307
// sShovel := true ;
9299: LD_ADDR_EXP 107
9303: PUSH
9304: LD_INT 1
9306: ST_TO_ADDR
// if p3 = 25 then
9307: LD_VAR 0 3
9311: PUSH
9312: LD_INT 25
9314: EQUAL
9315: IFFALSE 9325
// sSheik := true ;
9317: LD_ADDR_EXP 108
9321: PUSH
9322: LD_INT 1
9324: ST_TO_ADDR
// if p3 = 26 then
9325: LD_VAR 0 3
9329: PUSH
9330: LD_INT 26
9332: EQUAL
9333: IFFALSE 9343
// sEarthquake := true ;
9335: LD_ADDR_EXP 110
9339: PUSH
9340: LD_INT 1
9342: ST_TO_ADDR
// if p3 = 27 then
9343: LD_VAR 0 3
9347: PUSH
9348: LD_INT 27
9350: EQUAL
9351: IFFALSE 9361
// sAI := true ;
9353: LD_ADDR_EXP 111
9357: PUSH
9358: LD_INT 1
9360: ST_TO_ADDR
// if p3 = 28 then
9361: LD_VAR 0 3
9365: PUSH
9366: LD_INT 28
9368: EQUAL
9369: IFFALSE 9379
// sCargo := true ;
9371: LD_ADDR_EXP 114
9375: PUSH
9376: LD_INT 1
9378: ST_TO_ADDR
// if p3 = 29 then
9379: LD_VAR 0 3
9383: PUSH
9384: LD_INT 29
9386: EQUAL
9387: IFFALSE 9397
// sDLaser := true ;
9389: LD_ADDR_EXP 115
9393: PUSH
9394: LD_INT 1
9396: ST_TO_ADDR
// if p3 = 30 then
9397: LD_VAR 0 3
9401: PUSH
9402: LD_INT 30
9404: EQUAL
9405: IFFALSE 9415
// sExchange := true ;
9407: LD_ADDR_EXP 116
9411: PUSH
9412: LD_INT 1
9414: ST_TO_ADDR
// if p3 = 31 then
9415: LD_VAR 0 3
9419: PUSH
9420: LD_INT 31
9422: EQUAL
9423: IFFALSE 9433
// sFac := true ;
9425: LD_ADDR_EXP 117
9429: PUSH
9430: LD_INT 1
9432: ST_TO_ADDR
// if p3 = 32 then
9433: LD_VAR 0 3
9437: PUSH
9438: LD_INT 32
9440: EQUAL
9441: IFFALSE 9451
// sPower := true ;
9443: LD_ADDR_EXP 118
9447: PUSH
9448: LD_INT 1
9450: ST_TO_ADDR
// if p3 = 33 then
9451: LD_VAR 0 3
9455: PUSH
9456: LD_INT 33
9458: EQUAL
9459: IFFALSE 9469
// sRandom := true ;
9461: LD_ADDR_EXP 119
9465: PUSH
9466: LD_INT 1
9468: ST_TO_ADDR
// if p3 = 34 then
9469: LD_VAR 0 3
9473: PUSH
9474: LD_INT 34
9476: EQUAL
9477: IFFALSE 9487
// sShield := true ;
9479: LD_ADDR_EXP 120
9483: PUSH
9484: LD_INT 1
9486: ST_TO_ADDR
// if p3 = 35 then
9487: LD_VAR 0 3
9491: PUSH
9492: LD_INT 35
9494: EQUAL
9495: IFFALSE 9505
// sTime := true ;
9497: LD_ADDR_EXP 121
9501: PUSH
9502: LD_INT 1
9504: ST_TO_ADDR
// if p3 = 36 then
9505: LD_VAR 0 3
9509: PUSH
9510: LD_INT 36
9512: EQUAL
9513: IFFALSE 9523
// sTools := true ;
9515: LD_ADDR_EXP 122
9519: PUSH
9520: LD_INT 1
9522: ST_TO_ADDR
// if p3 = 101 then
9523: LD_VAR 0 3
9527: PUSH
9528: LD_INT 101
9530: EQUAL
9531: IFFALSE 9541
// sSold := true ;
9533: LD_ADDR_EXP 87
9537: PUSH
9538: LD_INT 1
9540: ST_TO_ADDR
// if p3 = 102 then
9541: LD_VAR 0 3
9545: PUSH
9546: LD_INT 102
9548: EQUAL
9549: IFFALSE 9559
// sDiff := true ;
9551: LD_ADDR_EXP 88
9555: PUSH
9556: LD_INT 1
9558: ST_TO_ADDR
// if p3 = 103 then
9559: LD_VAR 0 3
9563: PUSH
9564: LD_INT 103
9566: EQUAL
9567: IFFALSE 9577
// sFog := true ;
9569: LD_ADDR_EXP 91
9573: PUSH
9574: LD_INT 1
9576: ST_TO_ADDR
// if p3 = 104 then
9577: LD_VAR 0 3
9581: PUSH
9582: LD_INT 104
9584: EQUAL
9585: IFFALSE 9595
// sReset := true ;
9587: LD_ADDR_EXP 92
9591: PUSH
9592: LD_INT 1
9594: ST_TO_ADDR
// if p3 = 105 then
9595: LD_VAR 0 3
9599: PUSH
9600: LD_INT 105
9602: EQUAL
9603: IFFALSE 9613
// sSun := true ;
9605: LD_ADDR_EXP 93
9609: PUSH
9610: LD_INT 1
9612: ST_TO_ADDR
// if p3 = 106 then
9613: LD_VAR 0 3
9617: PUSH
9618: LD_INT 106
9620: EQUAL
9621: IFFALSE 9631
// sTiger := true ;
9623: LD_ADDR_EXP 89
9627: PUSH
9628: LD_INT 1
9630: ST_TO_ADDR
// if p3 = 107 then
9631: LD_VAR 0 3
9635: PUSH
9636: LD_INT 107
9638: EQUAL
9639: IFFALSE 9649
// sBomb := true ;
9641: LD_ADDR_EXP 90
9645: PUSH
9646: LD_INT 1
9648: ST_TO_ADDR
// if p3 = 108 then
9649: LD_VAR 0 3
9653: PUSH
9654: LD_INT 108
9656: EQUAL
9657: IFFALSE 9667
// sWound := true ;
9659: LD_ADDR_EXP 98
9663: PUSH
9664: LD_INT 1
9666: ST_TO_ADDR
// if p3 = 109 then
9667: LD_VAR 0 3
9671: PUSH
9672: LD_INT 109
9674: EQUAL
9675: IFFALSE 9685
// sBetray := true ;
9677: LD_ADDR_EXP 102
9681: PUSH
9682: LD_INT 1
9684: ST_TO_ADDR
// if p3 = 110 then
9685: LD_VAR 0 3
9689: PUSH
9690: LD_INT 110
9692: EQUAL
9693: IFFALSE 9703
// sContamin := true ;
9695: LD_ADDR_EXP 103
9699: PUSH
9700: LD_INT 1
9702: ST_TO_ADDR
// if p3 = 111 then
9703: LD_VAR 0 3
9707: PUSH
9708: LD_INT 111
9710: EQUAL
9711: IFFALSE 9721
// sOil := true ;
9713: LD_ADDR_EXP 105
9717: PUSH
9718: LD_INT 1
9720: ST_TO_ADDR
// if p3 = 112 then
9721: LD_VAR 0 3
9725: PUSH
9726: LD_INT 112
9728: EQUAL
9729: IFFALSE 9739
// sStu := true ;
9731: LD_ADDR_EXP 109
9735: PUSH
9736: LD_INT 1
9738: ST_TO_ADDR
// if p3 = 113 then
9739: LD_VAR 0 3
9743: PUSH
9744: LD_INT 113
9746: EQUAL
9747: IFFALSE 9757
// sBazooka := true ;
9749: LD_ADDR_EXP 112
9753: PUSH
9754: LD_INT 1
9756: ST_TO_ADDR
// if p3 = 114 then
9757: LD_VAR 0 3
9761: PUSH
9762: LD_INT 114
9764: EQUAL
9765: IFFALSE 9775
// sMortar := true ;
9767: LD_ADDR_EXP 113
9771: PUSH
9772: LD_INT 1
9774: ST_TO_ADDR
// if p3 = 115 then
9775: LD_VAR 0 3
9779: PUSH
9780: LD_INT 115
9782: EQUAL
9783: IFFALSE 9793
// sRanger := true ;
9785: LD_ADDR_EXP 123
9789: PUSH
9790: LD_INT 1
9792: ST_TO_ADDR
// if p3 = 116 then
9793: LD_VAR 0 3
9797: PUSH
9798: LD_INT 116
9800: EQUAL
9801: IFFALSE 9811
// sComputer := true ;
9803: LD_ADDR_EXP 124
9807: PUSH
9808: LD_INT 1
9810: ST_TO_ADDR
// if p3 = 117 then
9811: LD_VAR 0 3
9815: PUSH
9816: LD_INT 117
9818: EQUAL
9819: IFFALSE 9829
// s30 := true ;
9821: LD_ADDR_EXP 125
9825: PUSH
9826: LD_INT 1
9828: ST_TO_ADDR
// if p3 = 118 then
9829: LD_VAR 0 3
9833: PUSH
9834: LD_INT 118
9836: EQUAL
9837: IFFALSE 9847
// s60 := true ;
9839: LD_ADDR_EXP 126
9843: PUSH
9844: LD_INT 1
9846: ST_TO_ADDR
// end ; if p2 = 101 then
9847: LD_VAR 0 2
9851: PUSH
9852: LD_INT 101
9854: EQUAL
9855: IFFALSE 9983
// begin case p3 of 1 :
9857: LD_VAR 0 3
9861: PUSH
9862: LD_INT 1
9864: DOUBLE
9865: EQUAL
9866: IFTRUE 9870
9868: GO 9877
9870: POP
// hHackUnlimitedResources ; 2 :
9871: CALL 22081 0 0
9875: GO 9983
9877: LD_INT 2
9879: DOUBLE
9880: EQUAL
9881: IFTRUE 9885
9883: GO 9892
9885: POP
// hHackSetLevel10 ; 3 :
9886: CALL 22214 0 0
9890: GO 9983
9892: LD_INT 3
9894: DOUBLE
9895: EQUAL
9896: IFTRUE 9900
9898: GO 9907
9900: POP
// hHackSetLevel10YourUnits ; 4 :
9901: CALL 22299 0 0
9905: GO 9983
9907: LD_INT 4
9909: DOUBLE
9910: EQUAL
9911: IFTRUE 9915
9913: GO 9922
9915: POP
// hHackInvincible ; 5 :
9916: CALL 22747 0 0
9920: GO 9983
9922: LD_INT 5
9924: DOUBLE
9925: EQUAL
9926: IFTRUE 9930
9928: GO 9937
9930: POP
// hHackInvisible ; 6 :
9931: CALL 22858 0 0
9935: GO 9983
9937: LD_INT 6
9939: DOUBLE
9940: EQUAL
9941: IFTRUE 9945
9943: GO 9952
9945: POP
// hHackChangeYourSide ; 7 :
9946: CALL 22915 0 0
9950: GO 9983
9952: LD_INT 7
9954: DOUBLE
9955: EQUAL
9956: IFTRUE 9960
9958: GO 9967
9960: POP
// hHackChangeUnitSide ; 8 :
9961: CALL 22957 0 0
9965: GO 9983
9967: LD_INT 8
9969: DOUBLE
9970: EQUAL
9971: IFTRUE 9975
9973: GO 9982
9975: POP
// hHackFog ; end ;
9976: CALL 23058 0 0
9980: GO 9983
9982: POP
// end ; end ;
9983: LD_VAR 0 7
9987: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
9988: GO 9990
9990: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
9991: LD_STRING initStreamRollete();
9993: PPUSH
9994: CALL_OW 559
// InitStreamMode ;
9998: CALL 10010 0 0
// DefineStreamItems ( false ) ;
10002: LD_INT 0
10004: PPUSH
10005: CALL 10474 0 1
// end ;
10009: END
// function InitStreamMode ; begin
10010: LD_INT 0
10012: PPUSH
// streamModeActive := false ;
10013: LD_ADDR_EXP 70
10017: PUSH
10018: LD_INT 0
10020: ST_TO_ADDR
// normalCounter := 36 ;
10021: LD_ADDR_EXP 71
10025: PUSH
10026: LD_INT 36
10028: ST_TO_ADDR
// hardcoreCounter := 18 ;
10029: LD_ADDR_EXP 72
10033: PUSH
10034: LD_INT 18
10036: ST_TO_ADDR
// sRocket := false ;
10037: LD_ADDR_EXP 75
10041: PUSH
10042: LD_INT 0
10044: ST_TO_ADDR
// sSpeed := false ;
10045: LD_ADDR_EXP 74
10049: PUSH
10050: LD_INT 0
10052: ST_TO_ADDR
// sEngine := false ;
10053: LD_ADDR_EXP 76
10057: PUSH
10058: LD_INT 0
10060: ST_TO_ADDR
// sSpec := false ;
10061: LD_ADDR_EXP 73
10065: PUSH
10066: LD_INT 0
10068: ST_TO_ADDR
// sLevel := false ;
10069: LD_ADDR_EXP 77
10073: PUSH
10074: LD_INT 0
10076: ST_TO_ADDR
// sArmoury := false ;
10077: LD_ADDR_EXP 78
10081: PUSH
10082: LD_INT 0
10084: ST_TO_ADDR
// sRadar := false ;
10085: LD_ADDR_EXP 79
10089: PUSH
10090: LD_INT 0
10092: ST_TO_ADDR
// sBunker := false ;
10093: LD_ADDR_EXP 80
10097: PUSH
10098: LD_INT 0
10100: ST_TO_ADDR
// sHack := false ;
10101: LD_ADDR_EXP 81
10105: PUSH
10106: LD_INT 0
10108: ST_TO_ADDR
// sFire := false ;
10109: LD_ADDR_EXP 82
10113: PUSH
10114: LD_INT 0
10116: ST_TO_ADDR
// sRefresh := false ;
10117: LD_ADDR_EXP 83
10121: PUSH
10122: LD_INT 0
10124: ST_TO_ADDR
// sExp := false ;
10125: LD_ADDR_EXP 84
10129: PUSH
10130: LD_INT 0
10132: ST_TO_ADDR
// sDepot := false ;
10133: LD_ADDR_EXP 85
10137: PUSH
10138: LD_INT 0
10140: ST_TO_ADDR
// sFlag := false ;
10141: LD_ADDR_EXP 86
10145: PUSH
10146: LD_INT 0
10148: ST_TO_ADDR
// sKamikadze := false ;
10149: LD_ADDR_EXP 94
10153: PUSH
10154: LD_INT 0
10156: ST_TO_ADDR
// sTroll := false ;
10157: LD_ADDR_EXP 95
10161: PUSH
10162: LD_INT 0
10164: ST_TO_ADDR
// sSlow := false ;
10165: LD_ADDR_EXP 96
10169: PUSH
10170: LD_INT 0
10172: ST_TO_ADDR
// sLack := false ;
10173: LD_ADDR_EXP 97
10177: PUSH
10178: LD_INT 0
10180: ST_TO_ADDR
// sTank := false ;
10181: LD_ADDR_EXP 99
10185: PUSH
10186: LD_INT 0
10188: ST_TO_ADDR
// sRemote := false ;
10189: LD_ADDR_EXP 100
10193: PUSH
10194: LD_INT 0
10196: ST_TO_ADDR
// sPowell := false ;
10197: LD_ADDR_EXP 101
10201: PUSH
10202: LD_INT 0
10204: ST_TO_ADDR
// sTeleport := false ;
10205: LD_ADDR_EXP 104
10209: PUSH
10210: LD_INT 0
10212: ST_TO_ADDR
// sOilTower := false ;
10213: LD_ADDR_EXP 106
10217: PUSH
10218: LD_INT 0
10220: ST_TO_ADDR
// sShovel := false ;
10221: LD_ADDR_EXP 107
10225: PUSH
10226: LD_INT 0
10228: ST_TO_ADDR
// sSheik := false ;
10229: LD_ADDR_EXP 108
10233: PUSH
10234: LD_INT 0
10236: ST_TO_ADDR
// sEarthquake := false ;
10237: LD_ADDR_EXP 110
10241: PUSH
10242: LD_INT 0
10244: ST_TO_ADDR
// sAI := false ;
10245: LD_ADDR_EXP 111
10249: PUSH
10250: LD_INT 0
10252: ST_TO_ADDR
// sCargo := false ;
10253: LD_ADDR_EXP 114
10257: PUSH
10258: LD_INT 0
10260: ST_TO_ADDR
// sDLaser := false ;
10261: LD_ADDR_EXP 115
10265: PUSH
10266: LD_INT 0
10268: ST_TO_ADDR
// sExchange := false ;
10269: LD_ADDR_EXP 116
10273: PUSH
10274: LD_INT 0
10276: ST_TO_ADDR
// sFac := false ;
10277: LD_ADDR_EXP 117
10281: PUSH
10282: LD_INT 0
10284: ST_TO_ADDR
// sPower := false ;
10285: LD_ADDR_EXP 118
10289: PUSH
10290: LD_INT 0
10292: ST_TO_ADDR
// sRandom := false ;
10293: LD_ADDR_EXP 119
10297: PUSH
10298: LD_INT 0
10300: ST_TO_ADDR
// sShield := false ;
10301: LD_ADDR_EXP 120
10305: PUSH
10306: LD_INT 0
10308: ST_TO_ADDR
// sTime := false ;
10309: LD_ADDR_EXP 121
10313: PUSH
10314: LD_INT 0
10316: ST_TO_ADDR
// sTools := false ;
10317: LD_ADDR_EXP 122
10321: PUSH
10322: LD_INT 0
10324: ST_TO_ADDR
// sSold := false ;
10325: LD_ADDR_EXP 87
10329: PUSH
10330: LD_INT 0
10332: ST_TO_ADDR
// sDiff := false ;
10333: LD_ADDR_EXP 88
10337: PUSH
10338: LD_INT 0
10340: ST_TO_ADDR
// sFog := false ;
10341: LD_ADDR_EXP 91
10345: PUSH
10346: LD_INT 0
10348: ST_TO_ADDR
// sReset := false ;
10349: LD_ADDR_EXP 92
10353: PUSH
10354: LD_INT 0
10356: ST_TO_ADDR
// sSun := false ;
10357: LD_ADDR_EXP 93
10361: PUSH
10362: LD_INT 0
10364: ST_TO_ADDR
// sTiger := false ;
10365: LD_ADDR_EXP 89
10369: PUSH
10370: LD_INT 0
10372: ST_TO_ADDR
// sBomb := false ;
10373: LD_ADDR_EXP 90
10377: PUSH
10378: LD_INT 0
10380: ST_TO_ADDR
// sWound := false ;
10381: LD_ADDR_EXP 98
10385: PUSH
10386: LD_INT 0
10388: ST_TO_ADDR
// sBetray := false ;
10389: LD_ADDR_EXP 102
10393: PUSH
10394: LD_INT 0
10396: ST_TO_ADDR
// sContamin := false ;
10397: LD_ADDR_EXP 103
10401: PUSH
10402: LD_INT 0
10404: ST_TO_ADDR
// sOil := false ;
10405: LD_ADDR_EXP 105
10409: PUSH
10410: LD_INT 0
10412: ST_TO_ADDR
// sStu := false ;
10413: LD_ADDR_EXP 109
10417: PUSH
10418: LD_INT 0
10420: ST_TO_ADDR
// sBazooka := false ;
10421: LD_ADDR_EXP 112
10425: PUSH
10426: LD_INT 0
10428: ST_TO_ADDR
// sMortar := false ;
10429: LD_ADDR_EXP 113
10433: PUSH
10434: LD_INT 0
10436: ST_TO_ADDR
// sRanger := false ;
10437: LD_ADDR_EXP 123
10441: PUSH
10442: LD_INT 0
10444: ST_TO_ADDR
// sComputer := false ;
10445: LD_ADDR_EXP 124
10449: PUSH
10450: LD_INT 0
10452: ST_TO_ADDR
// s30 := false ;
10453: LD_ADDR_EXP 125
10457: PUSH
10458: LD_INT 0
10460: ST_TO_ADDR
// s60 := false ;
10461: LD_ADDR_EXP 126
10465: PUSH
10466: LD_INT 0
10468: ST_TO_ADDR
// end ;
10469: LD_VAR 0 1
10473: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
10474: LD_INT 0
10476: PPUSH
10477: PPUSH
10478: PPUSH
10479: PPUSH
10480: PPUSH
10481: PPUSH
10482: PPUSH
// result := [ ] ;
10483: LD_ADDR_VAR 0 2
10487: PUSH
10488: EMPTY
10489: ST_TO_ADDR
// if campaign_id = 1 then
10490: LD_OWVAR 69
10494: PUSH
10495: LD_INT 1
10497: EQUAL
10498: IFFALSE 13664
// begin case mission_number of 1 :
10500: LD_OWVAR 70
10504: PUSH
10505: LD_INT 1
10507: DOUBLE
10508: EQUAL
10509: IFTRUE 10513
10511: GO 10589
10513: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
10514: LD_ADDR_VAR 0 2
10518: PUSH
10519: LD_INT 2
10521: PUSH
10522: LD_INT 4
10524: PUSH
10525: LD_INT 11
10527: PUSH
10528: LD_INT 12
10530: PUSH
10531: LD_INT 15
10533: PUSH
10534: LD_INT 16
10536: PUSH
10537: LD_INT 22
10539: PUSH
10540: LD_INT 23
10542: PUSH
10543: LD_INT 26
10545: PUSH
10546: EMPTY
10547: LIST
10548: LIST
10549: LIST
10550: LIST
10551: LIST
10552: LIST
10553: LIST
10554: LIST
10555: LIST
10556: PUSH
10557: LD_INT 101
10559: PUSH
10560: LD_INT 102
10562: PUSH
10563: LD_INT 106
10565: PUSH
10566: LD_INT 116
10568: PUSH
10569: LD_INT 117
10571: PUSH
10572: LD_INT 118
10574: PUSH
10575: EMPTY
10576: LIST
10577: LIST
10578: LIST
10579: LIST
10580: LIST
10581: LIST
10582: PUSH
10583: EMPTY
10584: LIST
10585: LIST
10586: ST_TO_ADDR
10587: GO 13662
10589: LD_INT 2
10591: DOUBLE
10592: EQUAL
10593: IFTRUE 10597
10595: GO 10681
10597: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
10598: LD_ADDR_VAR 0 2
10602: PUSH
10603: LD_INT 2
10605: PUSH
10606: LD_INT 4
10608: PUSH
10609: LD_INT 11
10611: PUSH
10612: LD_INT 12
10614: PUSH
10615: LD_INT 15
10617: PUSH
10618: LD_INT 16
10620: PUSH
10621: LD_INT 22
10623: PUSH
10624: LD_INT 23
10626: PUSH
10627: LD_INT 26
10629: PUSH
10630: EMPTY
10631: LIST
10632: LIST
10633: LIST
10634: LIST
10635: LIST
10636: LIST
10637: LIST
10638: LIST
10639: LIST
10640: PUSH
10641: LD_INT 101
10643: PUSH
10644: LD_INT 102
10646: PUSH
10647: LD_INT 105
10649: PUSH
10650: LD_INT 106
10652: PUSH
10653: LD_INT 108
10655: PUSH
10656: LD_INT 116
10658: PUSH
10659: LD_INT 117
10661: PUSH
10662: LD_INT 118
10664: PUSH
10665: EMPTY
10666: LIST
10667: LIST
10668: LIST
10669: LIST
10670: LIST
10671: LIST
10672: LIST
10673: LIST
10674: PUSH
10675: EMPTY
10676: LIST
10677: LIST
10678: ST_TO_ADDR
10679: GO 13662
10681: LD_INT 3
10683: DOUBLE
10684: EQUAL
10685: IFTRUE 10689
10687: GO 10777
10689: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
10690: LD_ADDR_VAR 0 2
10694: PUSH
10695: LD_INT 2
10697: PUSH
10698: LD_INT 4
10700: PUSH
10701: LD_INT 5
10703: PUSH
10704: LD_INT 11
10706: PUSH
10707: LD_INT 12
10709: PUSH
10710: LD_INT 15
10712: PUSH
10713: LD_INT 16
10715: PUSH
10716: LD_INT 22
10718: PUSH
10719: LD_INT 26
10721: PUSH
10722: LD_INT 36
10724: PUSH
10725: EMPTY
10726: LIST
10727: LIST
10728: LIST
10729: LIST
10730: LIST
10731: LIST
10732: LIST
10733: LIST
10734: LIST
10735: LIST
10736: PUSH
10737: LD_INT 101
10739: PUSH
10740: LD_INT 102
10742: PUSH
10743: LD_INT 105
10745: PUSH
10746: LD_INT 106
10748: PUSH
10749: LD_INT 108
10751: PUSH
10752: LD_INT 116
10754: PUSH
10755: LD_INT 117
10757: PUSH
10758: LD_INT 118
10760: PUSH
10761: EMPTY
10762: LIST
10763: LIST
10764: LIST
10765: LIST
10766: LIST
10767: LIST
10768: LIST
10769: LIST
10770: PUSH
10771: EMPTY
10772: LIST
10773: LIST
10774: ST_TO_ADDR
10775: GO 13662
10777: LD_INT 4
10779: DOUBLE
10780: EQUAL
10781: IFTRUE 10785
10783: GO 10881
10785: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
10786: LD_ADDR_VAR 0 2
10790: PUSH
10791: LD_INT 2
10793: PUSH
10794: LD_INT 4
10796: PUSH
10797: LD_INT 5
10799: PUSH
10800: LD_INT 8
10802: PUSH
10803: LD_INT 11
10805: PUSH
10806: LD_INT 12
10808: PUSH
10809: LD_INT 15
10811: PUSH
10812: LD_INT 16
10814: PUSH
10815: LD_INT 22
10817: PUSH
10818: LD_INT 23
10820: PUSH
10821: LD_INT 26
10823: PUSH
10824: LD_INT 36
10826: PUSH
10827: EMPTY
10828: LIST
10829: LIST
10830: LIST
10831: LIST
10832: LIST
10833: LIST
10834: LIST
10835: LIST
10836: LIST
10837: LIST
10838: LIST
10839: LIST
10840: PUSH
10841: LD_INT 101
10843: PUSH
10844: LD_INT 102
10846: PUSH
10847: LD_INT 105
10849: PUSH
10850: LD_INT 106
10852: PUSH
10853: LD_INT 108
10855: PUSH
10856: LD_INT 116
10858: PUSH
10859: LD_INT 117
10861: PUSH
10862: LD_INT 118
10864: PUSH
10865: EMPTY
10866: LIST
10867: LIST
10868: LIST
10869: LIST
10870: LIST
10871: LIST
10872: LIST
10873: LIST
10874: PUSH
10875: EMPTY
10876: LIST
10877: LIST
10878: ST_TO_ADDR
10879: GO 13662
10881: LD_INT 5
10883: DOUBLE
10884: EQUAL
10885: IFTRUE 10889
10887: GO 11001
10889: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
10890: LD_ADDR_VAR 0 2
10894: PUSH
10895: LD_INT 2
10897: PUSH
10898: LD_INT 4
10900: PUSH
10901: LD_INT 5
10903: PUSH
10904: LD_INT 6
10906: PUSH
10907: LD_INT 8
10909: PUSH
10910: LD_INT 11
10912: PUSH
10913: LD_INT 12
10915: PUSH
10916: LD_INT 15
10918: PUSH
10919: LD_INT 16
10921: PUSH
10922: LD_INT 22
10924: PUSH
10925: LD_INT 23
10927: PUSH
10928: LD_INT 25
10930: PUSH
10931: LD_INT 26
10933: PUSH
10934: LD_INT 36
10936: PUSH
10937: EMPTY
10938: LIST
10939: LIST
10940: LIST
10941: LIST
10942: LIST
10943: LIST
10944: LIST
10945: LIST
10946: LIST
10947: LIST
10948: LIST
10949: LIST
10950: LIST
10951: LIST
10952: PUSH
10953: LD_INT 101
10955: PUSH
10956: LD_INT 102
10958: PUSH
10959: LD_INT 105
10961: PUSH
10962: LD_INT 106
10964: PUSH
10965: LD_INT 108
10967: PUSH
10968: LD_INT 109
10970: PUSH
10971: LD_INT 112
10973: PUSH
10974: LD_INT 116
10976: PUSH
10977: LD_INT 117
10979: PUSH
10980: LD_INT 118
10982: PUSH
10983: EMPTY
10984: LIST
10985: LIST
10986: LIST
10987: LIST
10988: LIST
10989: LIST
10990: LIST
10991: LIST
10992: LIST
10993: LIST
10994: PUSH
10995: EMPTY
10996: LIST
10997: LIST
10998: ST_TO_ADDR
10999: GO 13662
11001: LD_INT 6
11003: DOUBLE
11004: EQUAL
11005: IFTRUE 11009
11007: GO 11141
11009: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
11010: LD_ADDR_VAR 0 2
11014: PUSH
11015: LD_INT 2
11017: PUSH
11018: LD_INT 4
11020: PUSH
11021: LD_INT 5
11023: PUSH
11024: LD_INT 6
11026: PUSH
11027: LD_INT 8
11029: PUSH
11030: LD_INT 11
11032: PUSH
11033: LD_INT 12
11035: PUSH
11036: LD_INT 15
11038: PUSH
11039: LD_INT 16
11041: PUSH
11042: LD_INT 20
11044: PUSH
11045: LD_INT 21
11047: PUSH
11048: LD_INT 22
11050: PUSH
11051: LD_INT 23
11053: PUSH
11054: LD_INT 25
11056: PUSH
11057: LD_INT 26
11059: PUSH
11060: LD_INT 30
11062: PUSH
11063: LD_INT 31
11065: PUSH
11066: LD_INT 32
11068: PUSH
11069: LD_INT 36
11071: PUSH
11072: EMPTY
11073: LIST
11074: LIST
11075: LIST
11076: LIST
11077: LIST
11078: LIST
11079: LIST
11080: LIST
11081: LIST
11082: LIST
11083: LIST
11084: LIST
11085: LIST
11086: LIST
11087: LIST
11088: LIST
11089: LIST
11090: LIST
11091: LIST
11092: PUSH
11093: LD_INT 101
11095: PUSH
11096: LD_INT 102
11098: PUSH
11099: LD_INT 105
11101: PUSH
11102: LD_INT 106
11104: PUSH
11105: LD_INT 108
11107: PUSH
11108: LD_INT 109
11110: PUSH
11111: LD_INT 112
11113: PUSH
11114: LD_INT 116
11116: PUSH
11117: LD_INT 117
11119: PUSH
11120: LD_INT 118
11122: PUSH
11123: EMPTY
11124: LIST
11125: LIST
11126: LIST
11127: LIST
11128: LIST
11129: LIST
11130: LIST
11131: LIST
11132: LIST
11133: LIST
11134: PUSH
11135: EMPTY
11136: LIST
11137: LIST
11138: ST_TO_ADDR
11139: GO 13662
11141: LD_INT 7
11143: DOUBLE
11144: EQUAL
11145: IFTRUE 11149
11147: GO 11261
11149: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
11150: LD_ADDR_VAR 0 2
11154: PUSH
11155: LD_INT 2
11157: PUSH
11158: LD_INT 4
11160: PUSH
11161: LD_INT 5
11163: PUSH
11164: LD_INT 7
11166: PUSH
11167: LD_INT 11
11169: PUSH
11170: LD_INT 12
11172: PUSH
11173: LD_INT 15
11175: PUSH
11176: LD_INT 16
11178: PUSH
11179: LD_INT 20
11181: PUSH
11182: LD_INT 21
11184: PUSH
11185: LD_INT 22
11187: PUSH
11188: LD_INT 23
11190: PUSH
11191: LD_INT 25
11193: PUSH
11194: LD_INT 26
11196: PUSH
11197: EMPTY
11198: LIST
11199: LIST
11200: LIST
11201: LIST
11202: LIST
11203: LIST
11204: LIST
11205: LIST
11206: LIST
11207: LIST
11208: LIST
11209: LIST
11210: LIST
11211: LIST
11212: PUSH
11213: LD_INT 101
11215: PUSH
11216: LD_INT 102
11218: PUSH
11219: LD_INT 103
11221: PUSH
11222: LD_INT 105
11224: PUSH
11225: LD_INT 106
11227: PUSH
11228: LD_INT 108
11230: PUSH
11231: LD_INT 112
11233: PUSH
11234: LD_INT 116
11236: PUSH
11237: LD_INT 117
11239: PUSH
11240: LD_INT 118
11242: PUSH
11243: EMPTY
11244: LIST
11245: LIST
11246: LIST
11247: LIST
11248: LIST
11249: LIST
11250: LIST
11251: LIST
11252: LIST
11253: LIST
11254: PUSH
11255: EMPTY
11256: LIST
11257: LIST
11258: ST_TO_ADDR
11259: GO 13662
11261: LD_INT 8
11263: DOUBLE
11264: EQUAL
11265: IFTRUE 11269
11267: GO 11409
11269: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
11270: LD_ADDR_VAR 0 2
11274: PUSH
11275: LD_INT 2
11277: PUSH
11278: LD_INT 4
11280: PUSH
11281: LD_INT 5
11283: PUSH
11284: LD_INT 6
11286: PUSH
11287: LD_INT 7
11289: PUSH
11290: LD_INT 8
11292: PUSH
11293: LD_INT 11
11295: PUSH
11296: LD_INT 12
11298: PUSH
11299: LD_INT 15
11301: PUSH
11302: LD_INT 16
11304: PUSH
11305: LD_INT 20
11307: PUSH
11308: LD_INT 21
11310: PUSH
11311: LD_INT 22
11313: PUSH
11314: LD_INT 23
11316: PUSH
11317: LD_INT 25
11319: PUSH
11320: LD_INT 26
11322: PUSH
11323: LD_INT 30
11325: PUSH
11326: LD_INT 31
11328: PUSH
11329: LD_INT 32
11331: PUSH
11332: LD_INT 36
11334: PUSH
11335: EMPTY
11336: LIST
11337: LIST
11338: LIST
11339: LIST
11340: LIST
11341: LIST
11342: LIST
11343: LIST
11344: LIST
11345: LIST
11346: LIST
11347: LIST
11348: LIST
11349: LIST
11350: LIST
11351: LIST
11352: LIST
11353: LIST
11354: LIST
11355: LIST
11356: PUSH
11357: LD_INT 101
11359: PUSH
11360: LD_INT 102
11362: PUSH
11363: LD_INT 103
11365: PUSH
11366: LD_INT 105
11368: PUSH
11369: LD_INT 106
11371: PUSH
11372: LD_INT 108
11374: PUSH
11375: LD_INT 109
11377: PUSH
11378: LD_INT 112
11380: PUSH
11381: LD_INT 116
11383: PUSH
11384: LD_INT 117
11386: PUSH
11387: LD_INT 118
11389: PUSH
11390: EMPTY
11391: LIST
11392: LIST
11393: LIST
11394: LIST
11395: LIST
11396: LIST
11397: LIST
11398: LIST
11399: LIST
11400: LIST
11401: LIST
11402: PUSH
11403: EMPTY
11404: LIST
11405: LIST
11406: ST_TO_ADDR
11407: GO 13662
11409: LD_INT 9
11411: DOUBLE
11412: EQUAL
11413: IFTRUE 11417
11415: GO 11565
11417: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
11418: LD_ADDR_VAR 0 2
11422: PUSH
11423: LD_INT 2
11425: PUSH
11426: LD_INT 4
11428: PUSH
11429: LD_INT 5
11431: PUSH
11432: LD_INT 6
11434: PUSH
11435: LD_INT 7
11437: PUSH
11438: LD_INT 8
11440: PUSH
11441: LD_INT 11
11443: PUSH
11444: LD_INT 12
11446: PUSH
11447: LD_INT 15
11449: PUSH
11450: LD_INT 16
11452: PUSH
11453: LD_INT 20
11455: PUSH
11456: LD_INT 21
11458: PUSH
11459: LD_INT 22
11461: PUSH
11462: LD_INT 23
11464: PUSH
11465: LD_INT 25
11467: PUSH
11468: LD_INT 26
11470: PUSH
11471: LD_INT 28
11473: PUSH
11474: LD_INT 30
11476: PUSH
11477: LD_INT 31
11479: PUSH
11480: LD_INT 32
11482: PUSH
11483: LD_INT 36
11485: PUSH
11486: EMPTY
11487: LIST
11488: LIST
11489: LIST
11490: LIST
11491: LIST
11492: LIST
11493: LIST
11494: LIST
11495: LIST
11496: LIST
11497: LIST
11498: LIST
11499: LIST
11500: LIST
11501: LIST
11502: LIST
11503: LIST
11504: LIST
11505: LIST
11506: LIST
11507: LIST
11508: PUSH
11509: LD_INT 101
11511: PUSH
11512: LD_INT 102
11514: PUSH
11515: LD_INT 103
11517: PUSH
11518: LD_INT 105
11520: PUSH
11521: LD_INT 106
11523: PUSH
11524: LD_INT 108
11526: PUSH
11527: LD_INT 109
11529: PUSH
11530: LD_INT 112
11532: PUSH
11533: LD_INT 114
11535: PUSH
11536: LD_INT 116
11538: PUSH
11539: LD_INT 117
11541: PUSH
11542: LD_INT 118
11544: PUSH
11545: EMPTY
11546: LIST
11547: LIST
11548: LIST
11549: LIST
11550: LIST
11551: LIST
11552: LIST
11553: LIST
11554: LIST
11555: LIST
11556: LIST
11557: LIST
11558: PUSH
11559: EMPTY
11560: LIST
11561: LIST
11562: ST_TO_ADDR
11563: GO 13662
11565: LD_INT 10
11567: DOUBLE
11568: EQUAL
11569: IFTRUE 11573
11571: GO 11769
11573: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
11574: LD_ADDR_VAR 0 2
11578: PUSH
11579: LD_INT 2
11581: PUSH
11582: LD_INT 4
11584: PUSH
11585: LD_INT 5
11587: PUSH
11588: LD_INT 6
11590: PUSH
11591: LD_INT 7
11593: PUSH
11594: LD_INT 8
11596: PUSH
11597: LD_INT 9
11599: PUSH
11600: LD_INT 10
11602: PUSH
11603: LD_INT 11
11605: PUSH
11606: LD_INT 12
11608: PUSH
11609: LD_INT 13
11611: PUSH
11612: LD_INT 14
11614: PUSH
11615: LD_INT 15
11617: PUSH
11618: LD_INT 16
11620: PUSH
11621: LD_INT 17
11623: PUSH
11624: LD_INT 18
11626: PUSH
11627: LD_INT 19
11629: PUSH
11630: LD_INT 20
11632: PUSH
11633: LD_INT 21
11635: PUSH
11636: LD_INT 22
11638: PUSH
11639: LD_INT 23
11641: PUSH
11642: LD_INT 24
11644: PUSH
11645: LD_INT 25
11647: PUSH
11648: LD_INT 26
11650: PUSH
11651: LD_INT 28
11653: PUSH
11654: LD_INT 30
11656: PUSH
11657: LD_INT 31
11659: PUSH
11660: LD_INT 32
11662: PUSH
11663: LD_INT 36
11665: PUSH
11666: EMPTY
11667: LIST
11668: LIST
11669: LIST
11670: LIST
11671: LIST
11672: LIST
11673: LIST
11674: LIST
11675: LIST
11676: LIST
11677: LIST
11678: LIST
11679: LIST
11680: LIST
11681: LIST
11682: LIST
11683: LIST
11684: LIST
11685: LIST
11686: LIST
11687: LIST
11688: LIST
11689: LIST
11690: LIST
11691: LIST
11692: LIST
11693: LIST
11694: LIST
11695: LIST
11696: PUSH
11697: LD_INT 101
11699: PUSH
11700: LD_INT 102
11702: PUSH
11703: LD_INT 103
11705: PUSH
11706: LD_INT 104
11708: PUSH
11709: LD_INT 105
11711: PUSH
11712: LD_INT 106
11714: PUSH
11715: LD_INT 107
11717: PUSH
11718: LD_INT 108
11720: PUSH
11721: LD_INT 109
11723: PUSH
11724: LD_INT 110
11726: PUSH
11727: LD_INT 111
11729: PUSH
11730: LD_INT 112
11732: PUSH
11733: LD_INT 114
11735: PUSH
11736: LD_INT 116
11738: PUSH
11739: LD_INT 117
11741: PUSH
11742: LD_INT 118
11744: PUSH
11745: EMPTY
11746: LIST
11747: LIST
11748: LIST
11749: LIST
11750: LIST
11751: LIST
11752: LIST
11753: LIST
11754: LIST
11755: LIST
11756: LIST
11757: LIST
11758: LIST
11759: LIST
11760: LIST
11761: LIST
11762: PUSH
11763: EMPTY
11764: LIST
11765: LIST
11766: ST_TO_ADDR
11767: GO 13662
11769: LD_INT 11
11771: DOUBLE
11772: EQUAL
11773: IFTRUE 11777
11775: GO 11981
11777: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
11778: LD_ADDR_VAR 0 2
11782: PUSH
11783: LD_INT 2
11785: PUSH
11786: LD_INT 3
11788: PUSH
11789: LD_INT 4
11791: PUSH
11792: LD_INT 5
11794: PUSH
11795: LD_INT 6
11797: PUSH
11798: LD_INT 7
11800: PUSH
11801: LD_INT 8
11803: PUSH
11804: LD_INT 9
11806: PUSH
11807: LD_INT 10
11809: PUSH
11810: LD_INT 11
11812: PUSH
11813: LD_INT 12
11815: PUSH
11816: LD_INT 13
11818: PUSH
11819: LD_INT 14
11821: PUSH
11822: LD_INT 15
11824: PUSH
11825: LD_INT 16
11827: PUSH
11828: LD_INT 17
11830: PUSH
11831: LD_INT 18
11833: PUSH
11834: LD_INT 19
11836: PUSH
11837: LD_INT 20
11839: PUSH
11840: LD_INT 21
11842: PUSH
11843: LD_INT 22
11845: PUSH
11846: LD_INT 23
11848: PUSH
11849: LD_INT 24
11851: PUSH
11852: LD_INT 25
11854: PUSH
11855: LD_INT 26
11857: PUSH
11858: LD_INT 28
11860: PUSH
11861: LD_INT 30
11863: PUSH
11864: LD_INT 31
11866: PUSH
11867: LD_INT 32
11869: PUSH
11870: LD_INT 34
11872: PUSH
11873: LD_INT 36
11875: PUSH
11876: EMPTY
11877: LIST
11878: LIST
11879: LIST
11880: LIST
11881: LIST
11882: LIST
11883: LIST
11884: LIST
11885: LIST
11886: LIST
11887: LIST
11888: LIST
11889: LIST
11890: LIST
11891: LIST
11892: LIST
11893: LIST
11894: LIST
11895: LIST
11896: LIST
11897: LIST
11898: LIST
11899: LIST
11900: LIST
11901: LIST
11902: LIST
11903: LIST
11904: LIST
11905: LIST
11906: LIST
11907: LIST
11908: PUSH
11909: LD_INT 101
11911: PUSH
11912: LD_INT 102
11914: PUSH
11915: LD_INT 103
11917: PUSH
11918: LD_INT 104
11920: PUSH
11921: LD_INT 105
11923: PUSH
11924: LD_INT 106
11926: PUSH
11927: LD_INT 107
11929: PUSH
11930: LD_INT 108
11932: PUSH
11933: LD_INT 109
11935: PUSH
11936: LD_INT 110
11938: PUSH
11939: LD_INT 111
11941: PUSH
11942: LD_INT 112
11944: PUSH
11945: LD_INT 114
11947: PUSH
11948: LD_INT 116
11950: PUSH
11951: LD_INT 117
11953: PUSH
11954: LD_INT 118
11956: PUSH
11957: EMPTY
11958: LIST
11959: LIST
11960: LIST
11961: LIST
11962: LIST
11963: LIST
11964: LIST
11965: LIST
11966: LIST
11967: LIST
11968: LIST
11969: LIST
11970: LIST
11971: LIST
11972: LIST
11973: LIST
11974: PUSH
11975: EMPTY
11976: LIST
11977: LIST
11978: ST_TO_ADDR
11979: GO 13662
11981: LD_INT 12
11983: DOUBLE
11984: EQUAL
11985: IFTRUE 11989
11987: GO 12209
11989: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
11990: LD_ADDR_VAR 0 2
11994: PUSH
11995: LD_INT 1
11997: PUSH
11998: LD_INT 2
12000: PUSH
12001: LD_INT 3
12003: PUSH
12004: LD_INT 4
12006: PUSH
12007: LD_INT 5
12009: PUSH
12010: LD_INT 6
12012: PUSH
12013: LD_INT 7
12015: PUSH
12016: LD_INT 8
12018: PUSH
12019: LD_INT 9
12021: PUSH
12022: LD_INT 10
12024: PUSH
12025: LD_INT 11
12027: PUSH
12028: LD_INT 12
12030: PUSH
12031: LD_INT 13
12033: PUSH
12034: LD_INT 14
12036: PUSH
12037: LD_INT 15
12039: PUSH
12040: LD_INT 16
12042: PUSH
12043: LD_INT 17
12045: PUSH
12046: LD_INT 18
12048: PUSH
12049: LD_INT 19
12051: PUSH
12052: LD_INT 20
12054: PUSH
12055: LD_INT 21
12057: PUSH
12058: LD_INT 22
12060: PUSH
12061: LD_INT 23
12063: PUSH
12064: LD_INT 24
12066: PUSH
12067: LD_INT 25
12069: PUSH
12070: LD_INT 26
12072: PUSH
12073: LD_INT 27
12075: PUSH
12076: LD_INT 28
12078: PUSH
12079: LD_INT 30
12081: PUSH
12082: LD_INT 31
12084: PUSH
12085: LD_INT 32
12087: PUSH
12088: LD_INT 33
12090: PUSH
12091: LD_INT 34
12093: PUSH
12094: LD_INT 36
12096: PUSH
12097: EMPTY
12098: LIST
12099: LIST
12100: LIST
12101: LIST
12102: LIST
12103: LIST
12104: LIST
12105: LIST
12106: LIST
12107: LIST
12108: LIST
12109: LIST
12110: LIST
12111: LIST
12112: LIST
12113: LIST
12114: LIST
12115: LIST
12116: LIST
12117: LIST
12118: LIST
12119: LIST
12120: LIST
12121: LIST
12122: LIST
12123: LIST
12124: LIST
12125: LIST
12126: LIST
12127: LIST
12128: LIST
12129: LIST
12130: LIST
12131: LIST
12132: PUSH
12133: LD_INT 101
12135: PUSH
12136: LD_INT 102
12138: PUSH
12139: LD_INT 103
12141: PUSH
12142: LD_INT 104
12144: PUSH
12145: LD_INT 105
12147: PUSH
12148: LD_INT 106
12150: PUSH
12151: LD_INT 107
12153: PUSH
12154: LD_INT 108
12156: PUSH
12157: LD_INT 109
12159: PUSH
12160: LD_INT 110
12162: PUSH
12163: LD_INT 111
12165: PUSH
12166: LD_INT 112
12168: PUSH
12169: LD_INT 113
12171: PUSH
12172: LD_INT 114
12174: PUSH
12175: LD_INT 116
12177: PUSH
12178: LD_INT 117
12180: PUSH
12181: LD_INT 118
12183: PUSH
12184: EMPTY
12185: LIST
12186: LIST
12187: LIST
12188: LIST
12189: LIST
12190: LIST
12191: LIST
12192: LIST
12193: LIST
12194: LIST
12195: LIST
12196: LIST
12197: LIST
12198: LIST
12199: LIST
12200: LIST
12201: LIST
12202: PUSH
12203: EMPTY
12204: LIST
12205: LIST
12206: ST_TO_ADDR
12207: GO 13662
12209: LD_INT 13
12211: DOUBLE
12212: EQUAL
12213: IFTRUE 12217
12215: GO 12425
12217: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
12218: LD_ADDR_VAR 0 2
12222: PUSH
12223: LD_INT 1
12225: PUSH
12226: LD_INT 2
12228: PUSH
12229: LD_INT 3
12231: PUSH
12232: LD_INT 4
12234: PUSH
12235: LD_INT 5
12237: PUSH
12238: LD_INT 8
12240: PUSH
12241: LD_INT 9
12243: PUSH
12244: LD_INT 10
12246: PUSH
12247: LD_INT 11
12249: PUSH
12250: LD_INT 12
12252: PUSH
12253: LD_INT 14
12255: PUSH
12256: LD_INT 15
12258: PUSH
12259: LD_INT 16
12261: PUSH
12262: LD_INT 17
12264: PUSH
12265: LD_INT 18
12267: PUSH
12268: LD_INT 19
12270: PUSH
12271: LD_INT 20
12273: PUSH
12274: LD_INT 21
12276: PUSH
12277: LD_INT 22
12279: PUSH
12280: LD_INT 23
12282: PUSH
12283: LD_INT 24
12285: PUSH
12286: LD_INT 25
12288: PUSH
12289: LD_INT 26
12291: PUSH
12292: LD_INT 27
12294: PUSH
12295: LD_INT 28
12297: PUSH
12298: LD_INT 30
12300: PUSH
12301: LD_INT 31
12303: PUSH
12304: LD_INT 32
12306: PUSH
12307: LD_INT 33
12309: PUSH
12310: LD_INT 34
12312: PUSH
12313: LD_INT 36
12315: PUSH
12316: EMPTY
12317: LIST
12318: LIST
12319: LIST
12320: LIST
12321: LIST
12322: LIST
12323: LIST
12324: LIST
12325: LIST
12326: LIST
12327: LIST
12328: LIST
12329: LIST
12330: LIST
12331: LIST
12332: LIST
12333: LIST
12334: LIST
12335: LIST
12336: LIST
12337: LIST
12338: LIST
12339: LIST
12340: LIST
12341: LIST
12342: LIST
12343: LIST
12344: LIST
12345: LIST
12346: LIST
12347: LIST
12348: PUSH
12349: LD_INT 101
12351: PUSH
12352: LD_INT 102
12354: PUSH
12355: LD_INT 103
12357: PUSH
12358: LD_INT 104
12360: PUSH
12361: LD_INT 105
12363: PUSH
12364: LD_INT 106
12366: PUSH
12367: LD_INT 107
12369: PUSH
12370: LD_INT 108
12372: PUSH
12373: LD_INT 109
12375: PUSH
12376: LD_INT 110
12378: PUSH
12379: LD_INT 111
12381: PUSH
12382: LD_INT 112
12384: PUSH
12385: LD_INT 113
12387: PUSH
12388: LD_INT 114
12390: PUSH
12391: LD_INT 116
12393: PUSH
12394: LD_INT 117
12396: PUSH
12397: LD_INT 118
12399: PUSH
12400: EMPTY
12401: LIST
12402: LIST
12403: LIST
12404: LIST
12405: LIST
12406: LIST
12407: LIST
12408: LIST
12409: LIST
12410: LIST
12411: LIST
12412: LIST
12413: LIST
12414: LIST
12415: LIST
12416: LIST
12417: LIST
12418: PUSH
12419: EMPTY
12420: LIST
12421: LIST
12422: ST_TO_ADDR
12423: GO 13662
12425: LD_INT 14
12427: DOUBLE
12428: EQUAL
12429: IFTRUE 12433
12431: GO 12657
12433: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
12434: LD_ADDR_VAR 0 2
12438: PUSH
12439: LD_INT 1
12441: PUSH
12442: LD_INT 2
12444: PUSH
12445: LD_INT 3
12447: PUSH
12448: LD_INT 4
12450: PUSH
12451: LD_INT 5
12453: PUSH
12454: LD_INT 6
12456: PUSH
12457: LD_INT 7
12459: PUSH
12460: LD_INT 8
12462: PUSH
12463: LD_INT 9
12465: PUSH
12466: LD_INT 10
12468: PUSH
12469: LD_INT 11
12471: PUSH
12472: LD_INT 12
12474: PUSH
12475: LD_INT 13
12477: PUSH
12478: LD_INT 14
12480: PUSH
12481: LD_INT 15
12483: PUSH
12484: LD_INT 16
12486: PUSH
12487: LD_INT 17
12489: PUSH
12490: LD_INT 18
12492: PUSH
12493: LD_INT 19
12495: PUSH
12496: LD_INT 20
12498: PUSH
12499: LD_INT 21
12501: PUSH
12502: LD_INT 22
12504: PUSH
12505: LD_INT 23
12507: PUSH
12508: LD_INT 24
12510: PUSH
12511: LD_INT 25
12513: PUSH
12514: LD_INT 26
12516: PUSH
12517: LD_INT 27
12519: PUSH
12520: LD_INT 28
12522: PUSH
12523: LD_INT 29
12525: PUSH
12526: LD_INT 30
12528: PUSH
12529: LD_INT 31
12531: PUSH
12532: LD_INT 32
12534: PUSH
12535: LD_INT 33
12537: PUSH
12538: LD_INT 34
12540: PUSH
12541: LD_INT 36
12543: PUSH
12544: EMPTY
12545: LIST
12546: LIST
12547: LIST
12548: LIST
12549: LIST
12550: LIST
12551: LIST
12552: LIST
12553: LIST
12554: LIST
12555: LIST
12556: LIST
12557: LIST
12558: LIST
12559: LIST
12560: LIST
12561: LIST
12562: LIST
12563: LIST
12564: LIST
12565: LIST
12566: LIST
12567: LIST
12568: LIST
12569: LIST
12570: LIST
12571: LIST
12572: LIST
12573: LIST
12574: LIST
12575: LIST
12576: LIST
12577: LIST
12578: LIST
12579: LIST
12580: PUSH
12581: LD_INT 101
12583: PUSH
12584: LD_INT 102
12586: PUSH
12587: LD_INT 103
12589: PUSH
12590: LD_INT 104
12592: PUSH
12593: LD_INT 105
12595: PUSH
12596: LD_INT 106
12598: PUSH
12599: LD_INT 107
12601: PUSH
12602: LD_INT 108
12604: PUSH
12605: LD_INT 109
12607: PUSH
12608: LD_INT 110
12610: PUSH
12611: LD_INT 111
12613: PUSH
12614: LD_INT 112
12616: PUSH
12617: LD_INT 113
12619: PUSH
12620: LD_INT 114
12622: PUSH
12623: LD_INT 116
12625: PUSH
12626: LD_INT 117
12628: PUSH
12629: LD_INT 118
12631: PUSH
12632: EMPTY
12633: LIST
12634: LIST
12635: LIST
12636: LIST
12637: LIST
12638: LIST
12639: LIST
12640: LIST
12641: LIST
12642: LIST
12643: LIST
12644: LIST
12645: LIST
12646: LIST
12647: LIST
12648: LIST
12649: LIST
12650: PUSH
12651: EMPTY
12652: LIST
12653: LIST
12654: ST_TO_ADDR
12655: GO 13662
12657: LD_INT 15
12659: DOUBLE
12660: EQUAL
12661: IFTRUE 12665
12663: GO 12889
12665: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
12666: LD_ADDR_VAR 0 2
12670: PUSH
12671: LD_INT 1
12673: PUSH
12674: LD_INT 2
12676: PUSH
12677: LD_INT 3
12679: PUSH
12680: LD_INT 4
12682: PUSH
12683: LD_INT 5
12685: PUSH
12686: LD_INT 6
12688: PUSH
12689: LD_INT 7
12691: PUSH
12692: LD_INT 8
12694: PUSH
12695: LD_INT 9
12697: PUSH
12698: LD_INT 10
12700: PUSH
12701: LD_INT 11
12703: PUSH
12704: LD_INT 12
12706: PUSH
12707: LD_INT 13
12709: PUSH
12710: LD_INT 14
12712: PUSH
12713: LD_INT 15
12715: PUSH
12716: LD_INT 16
12718: PUSH
12719: LD_INT 17
12721: PUSH
12722: LD_INT 18
12724: PUSH
12725: LD_INT 19
12727: PUSH
12728: LD_INT 20
12730: PUSH
12731: LD_INT 21
12733: PUSH
12734: LD_INT 22
12736: PUSH
12737: LD_INT 23
12739: PUSH
12740: LD_INT 24
12742: PUSH
12743: LD_INT 25
12745: PUSH
12746: LD_INT 26
12748: PUSH
12749: LD_INT 27
12751: PUSH
12752: LD_INT 28
12754: PUSH
12755: LD_INT 29
12757: PUSH
12758: LD_INT 30
12760: PUSH
12761: LD_INT 31
12763: PUSH
12764: LD_INT 32
12766: PUSH
12767: LD_INT 33
12769: PUSH
12770: LD_INT 34
12772: PUSH
12773: LD_INT 36
12775: PUSH
12776: EMPTY
12777: LIST
12778: LIST
12779: LIST
12780: LIST
12781: LIST
12782: LIST
12783: LIST
12784: LIST
12785: LIST
12786: LIST
12787: LIST
12788: LIST
12789: LIST
12790: LIST
12791: LIST
12792: LIST
12793: LIST
12794: LIST
12795: LIST
12796: LIST
12797: LIST
12798: LIST
12799: LIST
12800: LIST
12801: LIST
12802: LIST
12803: LIST
12804: LIST
12805: LIST
12806: LIST
12807: LIST
12808: LIST
12809: LIST
12810: LIST
12811: LIST
12812: PUSH
12813: LD_INT 101
12815: PUSH
12816: LD_INT 102
12818: PUSH
12819: LD_INT 103
12821: PUSH
12822: LD_INT 104
12824: PUSH
12825: LD_INT 105
12827: PUSH
12828: LD_INT 106
12830: PUSH
12831: LD_INT 107
12833: PUSH
12834: LD_INT 108
12836: PUSH
12837: LD_INT 109
12839: PUSH
12840: LD_INT 110
12842: PUSH
12843: LD_INT 111
12845: PUSH
12846: LD_INT 112
12848: PUSH
12849: LD_INT 113
12851: PUSH
12852: LD_INT 114
12854: PUSH
12855: LD_INT 116
12857: PUSH
12858: LD_INT 117
12860: PUSH
12861: LD_INT 118
12863: PUSH
12864: EMPTY
12865: LIST
12866: LIST
12867: LIST
12868: LIST
12869: LIST
12870: LIST
12871: LIST
12872: LIST
12873: LIST
12874: LIST
12875: LIST
12876: LIST
12877: LIST
12878: LIST
12879: LIST
12880: LIST
12881: LIST
12882: PUSH
12883: EMPTY
12884: LIST
12885: LIST
12886: ST_TO_ADDR
12887: GO 13662
12889: LD_INT 16
12891: DOUBLE
12892: EQUAL
12893: IFTRUE 12897
12895: GO 13033
12897: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
12898: LD_ADDR_VAR 0 2
12902: PUSH
12903: LD_INT 2
12905: PUSH
12906: LD_INT 4
12908: PUSH
12909: LD_INT 5
12911: PUSH
12912: LD_INT 7
12914: PUSH
12915: LD_INT 11
12917: PUSH
12918: LD_INT 12
12920: PUSH
12921: LD_INT 15
12923: PUSH
12924: LD_INT 16
12926: PUSH
12927: LD_INT 20
12929: PUSH
12930: LD_INT 21
12932: PUSH
12933: LD_INT 22
12935: PUSH
12936: LD_INT 23
12938: PUSH
12939: LD_INT 25
12941: PUSH
12942: LD_INT 26
12944: PUSH
12945: LD_INT 30
12947: PUSH
12948: LD_INT 31
12950: PUSH
12951: LD_INT 32
12953: PUSH
12954: LD_INT 33
12956: PUSH
12957: LD_INT 34
12959: PUSH
12960: EMPTY
12961: LIST
12962: LIST
12963: LIST
12964: LIST
12965: LIST
12966: LIST
12967: LIST
12968: LIST
12969: LIST
12970: LIST
12971: LIST
12972: LIST
12973: LIST
12974: LIST
12975: LIST
12976: LIST
12977: LIST
12978: LIST
12979: LIST
12980: PUSH
12981: LD_INT 101
12983: PUSH
12984: LD_INT 102
12986: PUSH
12987: LD_INT 103
12989: PUSH
12990: LD_INT 106
12992: PUSH
12993: LD_INT 108
12995: PUSH
12996: LD_INT 112
12998: PUSH
12999: LD_INT 113
13001: PUSH
13002: LD_INT 114
13004: PUSH
13005: LD_INT 116
13007: PUSH
13008: LD_INT 117
13010: PUSH
13011: LD_INT 118
13013: PUSH
13014: EMPTY
13015: LIST
13016: LIST
13017: LIST
13018: LIST
13019: LIST
13020: LIST
13021: LIST
13022: LIST
13023: LIST
13024: LIST
13025: LIST
13026: PUSH
13027: EMPTY
13028: LIST
13029: LIST
13030: ST_TO_ADDR
13031: GO 13662
13033: LD_INT 17
13035: DOUBLE
13036: EQUAL
13037: IFTRUE 13041
13039: GO 13265
13041: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
13042: LD_ADDR_VAR 0 2
13046: PUSH
13047: LD_INT 1
13049: PUSH
13050: LD_INT 2
13052: PUSH
13053: LD_INT 3
13055: PUSH
13056: LD_INT 4
13058: PUSH
13059: LD_INT 5
13061: PUSH
13062: LD_INT 6
13064: PUSH
13065: LD_INT 7
13067: PUSH
13068: LD_INT 8
13070: PUSH
13071: LD_INT 9
13073: PUSH
13074: LD_INT 10
13076: PUSH
13077: LD_INT 11
13079: PUSH
13080: LD_INT 12
13082: PUSH
13083: LD_INT 13
13085: PUSH
13086: LD_INT 14
13088: PUSH
13089: LD_INT 15
13091: PUSH
13092: LD_INT 16
13094: PUSH
13095: LD_INT 17
13097: PUSH
13098: LD_INT 18
13100: PUSH
13101: LD_INT 19
13103: PUSH
13104: LD_INT 20
13106: PUSH
13107: LD_INT 21
13109: PUSH
13110: LD_INT 22
13112: PUSH
13113: LD_INT 23
13115: PUSH
13116: LD_INT 24
13118: PUSH
13119: LD_INT 25
13121: PUSH
13122: LD_INT 26
13124: PUSH
13125: LD_INT 27
13127: PUSH
13128: LD_INT 28
13130: PUSH
13131: LD_INT 29
13133: PUSH
13134: LD_INT 30
13136: PUSH
13137: LD_INT 31
13139: PUSH
13140: LD_INT 32
13142: PUSH
13143: LD_INT 33
13145: PUSH
13146: LD_INT 34
13148: PUSH
13149: LD_INT 36
13151: PUSH
13152: EMPTY
13153: LIST
13154: LIST
13155: LIST
13156: LIST
13157: LIST
13158: LIST
13159: LIST
13160: LIST
13161: LIST
13162: LIST
13163: LIST
13164: LIST
13165: LIST
13166: LIST
13167: LIST
13168: LIST
13169: LIST
13170: LIST
13171: LIST
13172: LIST
13173: LIST
13174: LIST
13175: LIST
13176: LIST
13177: LIST
13178: LIST
13179: LIST
13180: LIST
13181: LIST
13182: LIST
13183: LIST
13184: LIST
13185: LIST
13186: LIST
13187: LIST
13188: PUSH
13189: LD_INT 101
13191: PUSH
13192: LD_INT 102
13194: PUSH
13195: LD_INT 103
13197: PUSH
13198: LD_INT 104
13200: PUSH
13201: LD_INT 105
13203: PUSH
13204: LD_INT 106
13206: PUSH
13207: LD_INT 107
13209: PUSH
13210: LD_INT 108
13212: PUSH
13213: LD_INT 109
13215: PUSH
13216: LD_INT 110
13218: PUSH
13219: LD_INT 111
13221: PUSH
13222: LD_INT 112
13224: PUSH
13225: LD_INT 113
13227: PUSH
13228: LD_INT 114
13230: PUSH
13231: LD_INT 116
13233: PUSH
13234: LD_INT 117
13236: PUSH
13237: LD_INT 118
13239: PUSH
13240: EMPTY
13241: LIST
13242: LIST
13243: LIST
13244: LIST
13245: LIST
13246: LIST
13247: LIST
13248: LIST
13249: LIST
13250: LIST
13251: LIST
13252: LIST
13253: LIST
13254: LIST
13255: LIST
13256: LIST
13257: LIST
13258: PUSH
13259: EMPTY
13260: LIST
13261: LIST
13262: ST_TO_ADDR
13263: GO 13662
13265: LD_INT 18
13267: DOUBLE
13268: EQUAL
13269: IFTRUE 13273
13271: GO 13421
13273: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
13274: LD_ADDR_VAR 0 2
13278: PUSH
13279: LD_INT 2
13281: PUSH
13282: LD_INT 4
13284: PUSH
13285: LD_INT 5
13287: PUSH
13288: LD_INT 7
13290: PUSH
13291: LD_INT 11
13293: PUSH
13294: LD_INT 12
13296: PUSH
13297: LD_INT 15
13299: PUSH
13300: LD_INT 16
13302: PUSH
13303: LD_INT 20
13305: PUSH
13306: LD_INT 21
13308: PUSH
13309: LD_INT 22
13311: PUSH
13312: LD_INT 23
13314: PUSH
13315: LD_INT 25
13317: PUSH
13318: LD_INT 26
13320: PUSH
13321: LD_INT 30
13323: PUSH
13324: LD_INT 31
13326: PUSH
13327: LD_INT 32
13329: PUSH
13330: LD_INT 33
13332: PUSH
13333: LD_INT 34
13335: PUSH
13336: LD_INT 35
13338: PUSH
13339: LD_INT 36
13341: PUSH
13342: EMPTY
13343: LIST
13344: LIST
13345: LIST
13346: LIST
13347: LIST
13348: LIST
13349: LIST
13350: LIST
13351: LIST
13352: LIST
13353: LIST
13354: LIST
13355: LIST
13356: LIST
13357: LIST
13358: LIST
13359: LIST
13360: LIST
13361: LIST
13362: LIST
13363: LIST
13364: PUSH
13365: LD_INT 101
13367: PUSH
13368: LD_INT 102
13370: PUSH
13371: LD_INT 103
13373: PUSH
13374: LD_INT 106
13376: PUSH
13377: LD_INT 108
13379: PUSH
13380: LD_INT 112
13382: PUSH
13383: LD_INT 113
13385: PUSH
13386: LD_INT 114
13388: PUSH
13389: LD_INT 115
13391: PUSH
13392: LD_INT 116
13394: PUSH
13395: LD_INT 117
13397: PUSH
13398: LD_INT 118
13400: PUSH
13401: EMPTY
13402: LIST
13403: LIST
13404: LIST
13405: LIST
13406: LIST
13407: LIST
13408: LIST
13409: LIST
13410: LIST
13411: LIST
13412: LIST
13413: LIST
13414: PUSH
13415: EMPTY
13416: LIST
13417: LIST
13418: ST_TO_ADDR
13419: GO 13662
13421: LD_INT 19
13423: DOUBLE
13424: EQUAL
13425: IFTRUE 13429
13427: GO 13661
13429: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
13430: LD_ADDR_VAR 0 2
13434: PUSH
13435: LD_INT 1
13437: PUSH
13438: LD_INT 2
13440: PUSH
13441: LD_INT 3
13443: PUSH
13444: LD_INT 4
13446: PUSH
13447: LD_INT 5
13449: PUSH
13450: LD_INT 6
13452: PUSH
13453: LD_INT 7
13455: PUSH
13456: LD_INT 8
13458: PUSH
13459: LD_INT 9
13461: PUSH
13462: LD_INT 10
13464: PUSH
13465: LD_INT 11
13467: PUSH
13468: LD_INT 12
13470: PUSH
13471: LD_INT 13
13473: PUSH
13474: LD_INT 14
13476: PUSH
13477: LD_INT 15
13479: PUSH
13480: LD_INT 16
13482: PUSH
13483: LD_INT 17
13485: PUSH
13486: LD_INT 18
13488: PUSH
13489: LD_INT 19
13491: PUSH
13492: LD_INT 20
13494: PUSH
13495: LD_INT 21
13497: PUSH
13498: LD_INT 22
13500: PUSH
13501: LD_INT 23
13503: PUSH
13504: LD_INT 24
13506: PUSH
13507: LD_INT 25
13509: PUSH
13510: LD_INT 26
13512: PUSH
13513: LD_INT 27
13515: PUSH
13516: LD_INT 28
13518: PUSH
13519: LD_INT 29
13521: PUSH
13522: LD_INT 30
13524: PUSH
13525: LD_INT 31
13527: PUSH
13528: LD_INT 32
13530: PUSH
13531: LD_INT 33
13533: PUSH
13534: LD_INT 34
13536: PUSH
13537: LD_INT 35
13539: PUSH
13540: LD_INT 36
13542: PUSH
13543: EMPTY
13544: LIST
13545: LIST
13546: LIST
13547: LIST
13548: LIST
13549: LIST
13550: LIST
13551: LIST
13552: LIST
13553: LIST
13554: LIST
13555: LIST
13556: LIST
13557: LIST
13558: LIST
13559: LIST
13560: LIST
13561: LIST
13562: LIST
13563: LIST
13564: LIST
13565: LIST
13566: LIST
13567: LIST
13568: LIST
13569: LIST
13570: LIST
13571: LIST
13572: LIST
13573: LIST
13574: LIST
13575: LIST
13576: LIST
13577: LIST
13578: LIST
13579: LIST
13580: PUSH
13581: LD_INT 101
13583: PUSH
13584: LD_INT 102
13586: PUSH
13587: LD_INT 103
13589: PUSH
13590: LD_INT 104
13592: PUSH
13593: LD_INT 105
13595: PUSH
13596: LD_INT 106
13598: PUSH
13599: LD_INT 107
13601: PUSH
13602: LD_INT 108
13604: PUSH
13605: LD_INT 109
13607: PUSH
13608: LD_INT 110
13610: PUSH
13611: LD_INT 111
13613: PUSH
13614: LD_INT 112
13616: PUSH
13617: LD_INT 113
13619: PUSH
13620: LD_INT 114
13622: PUSH
13623: LD_INT 115
13625: PUSH
13626: LD_INT 116
13628: PUSH
13629: LD_INT 117
13631: PUSH
13632: LD_INT 118
13634: PUSH
13635: EMPTY
13636: LIST
13637: LIST
13638: LIST
13639: LIST
13640: LIST
13641: LIST
13642: LIST
13643: LIST
13644: LIST
13645: LIST
13646: LIST
13647: LIST
13648: LIST
13649: LIST
13650: LIST
13651: LIST
13652: LIST
13653: LIST
13654: PUSH
13655: EMPTY
13656: LIST
13657: LIST
13658: ST_TO_ADDR
13659: GO 13662
13661: POP
// end else
13662: GO 13893
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
13664: LD_ADDR_VAR 0 2
13668: PUSH
13669: LD_INT 1
13671: PUSH
13672: LD_INT 2
13674: PUSH
13675: LD_INT 3
13677: PUSH
13678: LD_INT 4
13680: PUSH
13681: LD_INT 5
13683: PUSH
13684: LD_INT 6
13686: PUSH
13687: LD_INT 7
13689: PUSH
13690: LD_INT 8
13692: PUSH
13693: LD_INT 9
13695: PUSH
13696: LD_INT 10
13698: PUSH
13699: LD_INT 11
13701: PUSH
13702: LD_INT 12
13704: PUSH
13705: LD_INT 13
13707: PUSH
13708: LD_INT 14
13710: PUSH
13711: LD_INT 15
13713: PUSH
13714: LD_INT 16
13716: PUSH
13717: LD_INT 17
13719: PUSH
13720: LD_INT 18
13722: PUSH
13723: LD_INT 19
13725: PUSH
13726: LD_INT 20
13728: PUSH
13729: LD_INT 21
13731: PUSH
13732: LD_INT 22
13734: PUSH
13735: LD_INT 23
13737: PUSH
13738: LD_INT 24
13740: PUSH
13741: LD_INT 25
13743: PUSH
13744: LD_INT 26
13746: PUSH
13747: LD_INT 27
13749: PUSH
13750: LD_INT 28
13752: PUSH
13753: LD_INT 29
13755: PUSH
13756: LD_INT 30
13758: PUSH
13759: LD_INT 31
13761: PUSH
13762: LD_INT 32
13764: PUSH
13765: LD_INT 33
13767: PUSH
13768: LD_INT 34
13770: PUSH
13771: LD_INT 35
13773: PUSH
13774: LD_INT 36
13776: PUSH
13777: EMPTY
13778: LIST
13779: LIST
13780: LIST
13781: LIST
13782: LIST
13783: LIST
13784: LIST
13785: LIST
13786: LIST
13787: LIST
13788: LIST
13789: LIST
13790: LIST
13791: LIST
13792: LIST
13793: LIST
13794: LIST
13795: LIST
13796: LIST
13797: LIST
13798: LIST
13799: LIST
13800: LIST
13801: LIST
13802: LIST
13803: LIST
13804: LIST
13805: LIST
13806: LIST
13807: LIST
13808: LIST
13809: LIST
13810: LIST
13811: LIST
13812: LIST
13813: LIST
13814: PUSH
13815: LD_INT 101
13817: PUSH
13818: LD_INT 102
13820: PUSH
13821: LD_INT 103
13823: PUSH
13824: LD_INT 104
13826: PUSH
13827: LD_INT 105
13829: PUSH
13830: LD_INT 106
13832: PUSH
13833: LD_INT 107
13835: PUSH
13836: LD_INT 108
13838: PUSH
13839: LD_INT 109
13841: PUSH
13842: LD_INT 110
13844: PUSH
13845: LD_INT 111
13847: PUSH
13848: LD_INT 112
13850: PUSH
13851: LD_INT 113
13853: PUSH
13854: LD_INT 114
13856: PUSH
13857: LD_INT 115
13859: PUSH
13860: LD_INT 116
13862: PUSH
13863: LD_INT 117
13865: PUSH
13866: LD_INT 118
13868: PUSH
13869: EMPTY
13870: LIST
13871: LIST
13872: LIST
13873: LIST
13874: LIST
13875: LIST
13876: LIST
13877: LIST
13878: LIST
13879: LIST
13880: LIST
13881: LIST
13882: LIST
13883: LIST
13884: LIST
13885: LIST
13886: LIST
13887: LIST
13888: PUSH
13889: EMPTY
13890: LIST
13891: LIST
13892: ST_TO_ADDR
// if result then
13893: LD_VAR 0 2
13897: IFFALSE 14683
// begin normal :=  ;
13899: LD_ADDR_VAR 0 5
13903: PUSH
13904: LD_STRING 
13906: ST_TO_ADDR
// hardcore :=  ;
13907: LD_ADDR_VAR 0 6
13911: PUSH
13912: LD_STRING 
13914: ST_TO_ADDR
// active :=  ;
13915: LD_ADDR_VAR 0 7
13919: PUSH
13920: LD_STRING 
13922: ST_TO_ADDR
// for i = 1 to normalCounter do
13923: LD_ADDR_VAR 0 8
13927: PUSH
13928: DOUBLE
13929: LD_INT 1
13931: DEC
13932: ST_TO_ADDR
13933: LD_EXP 71
13937: PUSH
13938: FOR_TO
13939: IFFALSE 14040
// begin tmp := 0 ;
13941: LD_ADDR_VAR 0 3
13945: PUSH
13946: LD_STRING 0
13948: ST_TO_ADDR
// if result [ 1 ] then
13949: LD_VAR 0 2
13953: PUSH
13954: LD_INT 1
13956: ARRAY
13957: IFFALSE 14022
// if result [ 1 ] [ 1 ] = i then
13959: LD_VAR 0 2
13963: PUSH
13964: LD_INT 1
13966: ARRAY
13967: PUSH
13968: LD_INT 1
13970: ARRAY
13971: PUSH
13972: LD_VAR 0 8
13976: EQUAL
13977: IFFALSE 14022
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
13979: LD_ADDR_VAR 0 2
13983: PUSH
13984: LD_VAR 0 2
13988: PPUSH
13989: LD_INT 1
13991: PPUSH
13992: LD_VAR 0 2
13996: PUSH
13997: LD_INT 1
13999: ARRAY
14000: PPUSH
14001: LD_INT 1
14003: PPUSH
14004: CALL_OW 3
14008: PPUSH
14009: CALL_OW 1
14013: ST_TO_ADDR
// tmp := 1 ;
14014: LD_ADDR_VAR 0 3
14018: PUSH
14019: LD_STRING 1
14021: ST_TO_ADDR
// end ; normal := normal & tmp ;
14022: LD_ADDR_VAR 0 5
14026: PUSH
14027: LD_VAR 0 5
14031: PUSH
14032: LD_VAR 0 3
14036: STR
14037: ST_TO_ADDR
// end ;
14038: GO 13938
14040: POP
14041: POP
// for i = 1 to hardcoreCounter do
14042: LD_ADDR_VAR 0 8
14046: PUSH
14047: DOUBLE
14048: LD_INT 1
14050: DEC
14051: ST_TO_ADDR
14052: LD_EXP 72
14056: PUSH
14057: FOR_TO
14058: IFFALSE 14163
// begin tmp := 0 ;
14060: LD_ADDR_VAR 0 3
14064: PUSH
14065: LD_STRING 0
14067: ST_TO_ADDR
// if result [ 2 ] then
14068: LD_VAR 0 2
14072: PUSH
14073: LD_INT 2
14075: ARRAY
14076: IFFALSE 14145
// if result [ 2 ] [ 1 ] = 100 + i then
14078: LD_VAR 0 2
14082: PUSH
14083: LD_INT 2
14085: ARRAY
14086: PUSH
14087: LD_INT 1
14089: ARRAY
14090: PUSH
14091: LD_INT 100
14093: PUSH
14094: LD_VAR 0 8
14098: PLUS
14099: EQUAL
14100: IFFALSE 14145
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
14102: LD_ADDR_VAR 0 2
14106: PUSH
14107: LD_VAR 0 2
14111: PPUSH
14112: LD_INT 2
14114: PPUSH
14115: LD_VAR 0 2
14119: PUSH
14120: LD_INT 2
14122: ARRAY
14123: PPUSH
14124: LD_INT 1
14126: PPUSH
14127: CALL_OW 3
14131: PPUSH
14132: CALL_OW 1
14136: ST_TO_ADDR
// tmp := 1 ;
14137: LD_ADDR_VAR 0 3
14141: PUSH
14142: LD_STRING 1
14144: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
14145: LD_ADDR_VAR 0 6
14149: PUSH
14150: LD_VAR 0 6
14154: PUSH
14155: LD_VAR 0 3
14159: STR
14160: ST_TO_ADDR
// end ;
14161: GO 14057
14163: POP
14164: POP
// if isGameLoad then
14165: LD_VAR 0 1
14169: IFFALSE 14644
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
14171: LD_ADDR_VAR 0 4
14175: PUSH
14176: LD_EXP 75
14180: PUSH
14181: LD_EXP 74
14185: PUSH
14186: LD_EXP 76
14190: PUSH
14191: LD_EXP 73
14195: PUSH
14196: LD_EXP 77
14200: PUSH
14201: LD_EXP 78
14205: PUSH
14206: LD_EXP 79
14210: PUSH
14211: LD_EXP 80
14215: PUSH
14216: LD_EXP 81
14220: PUSH
14221: LD_EXP 82
14225: PUSH
14226: LD_EXP 83
14230: PUSH
14231: LD_EXP 84
14235: PUSH
14236: LD_EXP 85
14240: PUSH
14241: LD_EXP 86
14245: PUSH
14246: LD_EXP 94
14250: PUSH
14251: LD_EXP 95
14255: PUSH
14256: LD_EXP 96
14260: PUSH
14261: LD_EXP 97
14265: PUSH
14266: LD_EXP 99
14270: PUSH
14271: LD_EXP 100
14275: PUSH
14276: LD_EXP 101
14280: PUSH
14281: LD_EXP 104
14285: PUSH
14286: LD_EXP 106
14290: PUSH
14291: LD_EXP 107
14295: PUSH
14296: LD_EXP 108
14300: PUSH
14301: LD_EXP 110
14305: PUSH
14306: LD_EXP 111
14310: PUSH
14311: LD_EXP 114
14315: PUSH
14316: LD_EXP 115
14320: PUSH
14321: LD_EXP 116
14325: PUSH
14326: LD_EXP 117
14330: PUSH
14331: LD_EXP 118
14335: PUSH
14336: LD_EXP 119
14340: PUSH
14341: LD_EXP 120
14345: PUSH
14346: LD_EXP 121
14350: PUSH
14351: LD_EXP 122
14355: PUSH
14356: LD_EXP 87
14360: PUSH
14361: LD_EXP 88
14365: PUSH
14366: LD_EXP 91
14370: PUSH
14371: LD_EXP 92
14375: PUSH
14376: LD_EXP 93
14380: PUSH
14381: LD_EXP 89
14385: PUSH
14386: LD_EXP 90
14390: PUSH
14391: LD_EXP 98
14395: PUSH
14396: LD_EXP 102
14400: PUSH
14401: LD_EXP 103
14405: PUSH
14406: LD_EXP 105
14410: PUSH
14411: LD_EXP 109
14415: PUSH
14416: LD_EXP 112
14420: PUSH
14421: LD_EXP 113
14425: PUSH
14426: LD_EXP 123
14430: PUSH
14431: LD_EXP 124
14435: PUSH
14436: LD_EXP 125
14440: PUSH
14441: LD_EXP 126
14445: PUSH
14446: EMPTY
14447: LIST
14448: LIST
14449: LIST
14450: LIST
14451: LIST
14452: LIST
14453: LIST
14454: LIST
14455: LIST
14456: LIST
14457: LIST
14458: LIST
14459: LIST
14460: LIST
14461: LIST
14462: LIST
14463: LIST
14464: LIST
14465: LIST
14466: LIST
14467: LIST
14468: LIST
14469: LIST
14470: LIST
14471: LIST
14472: LIST
14473: LIST
14474: LIST
14475: LIST
14476: LIST
14477: LIST
14478: LIST
14479: LIST
14480: LIST
14481: LIST
14482: LIST
14483: LIST
14484: LIST
14485: LIST
14486: LIST
14487: LIST
14488: LIST
14489: LIST
14490: LIST
14491: LIST
14492: LIST
14493: LIST
14494: LIST
14495: LIST
14496: LIST
14497: LIST
14498: LIST
14499: LIST
14500: LIST
14501: ST_TO_ADDR
// tmp :=  ;
14502: LD_ADDR_VAR 0 3
14506: PUSH
14507: LD_STRING 
14509: ST_TO_ADDR
// for i = 1 to normalCounter do
14510: LD_ADDR_VAR 0 8
14514: PUSH
14515: DOUBLE
14516: LD_INT 1
14518: DEC
14519: ST_TO_ADDR
14520: LD_EXP 71
14524: PUSH
14525: FOR_TO
14526: IFFALSE 14562
// begin if flags [ i ] then
14528: LD_VAR 0 4
14532: PUSH
14533: LD_VAR 0 8
14537: ARRAY
14538: IFFALSE 14560
// tmp := tmp & i & ; ;
14540: LD_ADDR_VAR 0 3
14544: PUSH
14545: LD_VAR 0 3
14549: PUSH
14550: LD_VAR 0 8
14554: STR
14555: PUSH
14556: LD_STRING ;
14558: STR
14559: ST_TO_ADDR
// end ;
14560: GO 14525
14562: POP
14563: POP
// for i = 1 to hardcoreCounter do
14564: LD_ADDR_VAR 0 8
14568: PUSH
14569: DOUBLE
14570: LD_INT 1
14572: DEC
14573: ST_TO_ADDR
14574: LD_EXP 72
14578: PUSH
14579: FOR_TO
14580: IFFALSE 14626
// begin if flags [ normalCounter + i ] then
14582: LD_VAR 0 4
14586: PUSH
14587: LD_EXP 71
14591: PUSH
14592: LD_VAR 0 8
14596: PLUS
14597: ARRAY
14598: IFFALSE 14624
// tmp := tmp & ( 100 + i ) & ; ;
14600: LD_ADDR_VAR 0 3
14604: PUSH
14605: LD_VAR 0 3
14609: PUSH
14610: LD_INT 100
14612: PUSH
14613: LD_VAR 0 8
14617: PLUS
14618: STR
14619: PUSH
14620: LD_STRING ;
14622: STR
14623: ST_TO_ADDR
// end ;
14624: GO 14579
14626: POP
14627: POP
// if tmp then
14628: LD_VAR 0 3
14632: IFFALSE 14644
// active := tmp ;
14634: LD_ADDR_VAR 0 7
14638: PUSH
14639: LD_VAR 0 3
14643: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
14644: LD_STRING getStreamItemsFromMission("
14646: PUSH
14647: LD_VAR 0 5
14651: STR
14652: PUSH
14653: LD_STRING ","
14655: STR
14656: PUSH
14657: LD_VAR 0 6
14661: STR
14662: PUSH
14663: LD_STRING ","
14665: STR
14666: PUSH
14667: LD_VAR 0 7
14671: STR
14672: PUSH
14673: LD_STRING ")
14675: STR
14676: PPUSH
14677: CALL_OW 559
// end else
14681: GO 14690
// ToLua ( getStreamItemsFromMission("","","") ) ;
14683: LD_STRING getStreamItemsFromMission("","","")
14685: PPUSH
14686: CALL_OW 559
// end ;
14690: LD_VAR 0 2
14694: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
14695: LD_EXP 70
14699: PUSH
14700: LD_EXP 75
14704: AND
14705: IFFALSE 14829
14707: GO 14709
14709: DISABLE
14710: LD_INT 0
14712: PPUSH
14713: PPUSH
// begin enable ;
14714: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
14715: LD_ADDR_VAR 0 2
14719: PUSH
14720: LD_INT 22
14722: PUSH
14723: LD_OWVAR 2
14727: PUSH
14728: EMPTY
14729: LIST
14730: LIST
14731: PUSH
14732: LD_INT 2
14734: PUSH
14735: LD_INT 34
14737: PUSH
14738: LD_INT 7
14740: PUSH
14741: EMPTY
14742: LIST
14743: LIST
14744: PUSH
14745: LD_INT 34
14747: PUSH
14748: LD_INT 45
14750: PUSH
14751: EMPTY
14752: LIST
14753: LIST
14754: PUSH
14755: LD_INT 34
14757: PUSH
14758: LD_INT 28
14760: PUSH
14761: EMPTY
14762: LIST
14763: LIST
14764: PUSH
14765: LD_INT 34
14767: PUSH
14768: LD_INT 47
14770: PUSH
14771: EMPTY
14772: LIST
14773: LIST
14774: PUSH
14775: EMPTY
14776: LIST
14777: LIST
14778: LIST
14779: LIST
14780: LIST
14781: PUSH
14782: EMPTY
14783: LIST
14784: LIST
14785: PPUSH
14786: CALL_OW 69
14790: ST_TO_ADDR
// if not tmp then
14791: LD_VAR 0 2
14795: NOT
14796: IFFALSE 14800
// exit ;
14798: GO 14829
// for i in tmp do
14800: LD_ADDR_VAR 0 1
14804: PUSH
14805: LD_VAR 0 2
14809: PUSH
14810: FOR_IN
14811: IFFALSE 14827
// begin SetLives ( i , 0 ) ;
14813: LD_VAR 0 1
14817: PPUSH
14818: LD_INT 0
14820: PPUSH
14821: CALL_OW 234
// end ;
14825: GO 14810
14827: POP
14828: POP
// end ;
14829: PPOPN 2
14831: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
14832: LD_EXP 70
14836: PUSH
14837: LD_EXP 76
14841: AND
14842: IFFALSE 14926
14844: GO 14846
14846: DISABLE
14847: LD_INT 0
14849: PPUSH
14850: PPUSH
// begin enable ;
14851: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
14852: LD_ADDR_VAR 0 2
14856: PUSH
14857: LD_INT 22
14859: PUSH
14860: LD_OWVAR 2
14864: PUSH
14865: EMPTY
14866: LIST
14867: LIST
14868: PUSH
14869: LD_INT 32
14871: PUSH
14872: LD_INT 3
14874: PUSH
14875: EMPTY
14876: LIST
14877: LIST
14878: PUSH
14879: EMPTY
14880: LIST
14881: LIST
14882: PPUSH
14883: CALL_OW 69
14887: ST_TO_ADDR
// if not tmp then
14888: LD_VAR 0 2
14892: NOT
14893: IFFALSE 14897
// exit ;
14895: GO 14926
// for i in tmp do
14897: LD_ADDR_VAR 0 1
14901: PUSH
14902: LD_VAR 0 2
14906: PUSH
14907: FOR_IN
14908: IFFALSE 14924
// begin SetLives ( i , 0 ) ;
14910: LD_VAR 0 1
14914: PPUSH
14915: LD_INT 0
14917: PPUSH
14918: CALL_OW 234
// end ;
14922: GO 14907
14924: POP
14925: POP
// end ;
14926: PPOPN 2
14928: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
14929: LD_EXP 70
14933: PUSH
14934: LD_EXP 73
14938: AND
14939: IFFALSE 15032
14941: GO 14943
14943: DISABLE
14944: LD_INT 0
14946: PPUSH
// begin enable ;
14947: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
14948: LD_ADDR_VAR 0 1
14952: PUSH
14953: LD_INT 22
14955: PUSH
14956: LD_OWVAR 2
14960: PUSH
14961: EMPTY
14962: LIST
14963: LIST
14964: PUSH
14965: LD_INT 2
14967: PUSH
14968: LD_INT 25
14970: PUSH
14971: LD_INT 5
14973: PUSH
14974: EMPTY
14975: LIST
14976: LIST
14977: PUSH
14978: LD_INT 25
14980: PUSH
14981: LD_INT 9
14983: PUSH
14984: EMPTY
14985: LIST
14986: LIST
14987: PUSH
14988: LD_INT 25
14990: PUSH
14991: LD_INT 8
14993: PUSH
14994: EMPTY
14995: LIST
14996: LIST
14997: PUSH
14998: EMPTY
14999: LIST
15000: LIST
15001: LIST
15002: LIST
15003: PUSH
15004: EMPTY
15005: LIST
15006: LIST
15007: PPUSH
15008: CALL_OW 69
15012: PUSH
15013: FOR_IN
15014: IFFALSE 15030
// begin SetClass ( i , 1 ) ;
15016: LD_VAR 0 1
15020: PPUSH
15021: LD_INT 1
15023: PPUSH
15024: CALL_OW 336
// end ;
15028: GO 15013
15030: POP
15031: POP
// end ;
15032: PPOPN 1
15034: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
15035: LD_EXP 70
15039: PUSH
15040: LD_EXP 74
15044: AND
15045: PUSH
15046: LD_OWVAR 65
15050: PUSH
15051: LD_INT 7
15053: LESS
15054: AND
15055: IFFALSE 15069
15057: GO 15059
15059: DISABLE
// begin enable ;
15060: ENABLE
// game_speed := 7 ;
15061: LD_ADDR_OWVAR 65
15065: PUSH
15066: LD_INT 7
15068: ST_TO_ADDR
// end ;
15069: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
15070: LD_EXP 70
15074: PUSH
15075: LD_EXP 77
15079: AND
15080: IFFALSE 15282
15082: GO 15084
15084: DISABLE
15085: LD_INT 0
15087: PPUSH
15088: PPUSH
15089: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
15090: LD_ADDR_VAR 0 3
15094: PUSH
15095: LD_INT 81
15097: PUSH
15098: LD_OWVAR 2
15102: PUSH
15103: EMPTY
15104: LIST
15105: LIST
15106: PUSH
15107: LD_INT 21
15109: PUSH
15110: LD_INT 1
15112: PUSH
15113: EMPTY
15114: LIST
15115: LIST
15116: PUSH
15117: EMPTY
15118: LIST
15119: LIST
15120: PPUSH
15121: CALL_OW 69
15125: ST_TO_ADDR
// if not tmp then
15126: LD_VAR 0 3
15130: NOT
15131: IFFALSE 15135
// exit ;
15133: GO 15282
// if tmp > 5 then
15135: LD_VAR 0 3
15139: PUSH
15140: LD_INT 5
15142: GREATER
15143: IFFALSE 15155
// k := 5 else
15145: LD_ADDR_VAR 0 2
15149: PUSH
15150: LD_INT 5
15152: ST_TO_ADDR
15153: GO 15165
// k := tmp ;
15155: LD_ADDR_VAR 0 2
15159: PUSH
15160: LD_VAR 0 3
15164: ST_TO_ADDR
// for i := 1 to k do
15165: LD_ADDR_VAR 0 1
15169: PUSH
15170: DOUBLE
15171: LD_INT 1
15173: DEC
15174: ST_TO_ADDR
15175: LD_VAR 0 2
15179: PUSH
15180: FOR_TO
15181: IFFALSE 15280
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
15183: LD_VAR 0 3
15187: PUSH
15188: LD_VAR 0 1
15192: ARRAY
15193: PPUSH
15194: LD_VAR 0 1
15198: PUSH
15199: LD_INT 4
15201: MOD
15202: PUSH
15203: LD_INT 1
15205: PLUS
15206: PPUSH
15207: CALL_OW 259
15211: PUSH
15212: LD_INT 10
15214: LESS
15215: IFFALSE 15278
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
15217: LD_VAR 0 3
15221: PUSH
15222: LD_VAR 0 1
15226: ARRAY
15227: PPUSH
15228: LD_VAR 0 1
15232: PUSH
15233: LD_INT 4
15235: MOD
15236: PUSH
15237: LD_INT 1
15239: PLUS
15240: PPUSH
15241: LD_VAR 0 3
15245: PUSH
15246: LD_VAR 0 1
15250: ARRAY
15251: PPUSH
15252: LD_VAR 0 1
15256: PUSH
15257: LD_INT 4
15259: MOD
15260: PUSH
15261: LD_INT 1
15263: PLUS
15264: PPUSH
15265: CALL_OW 259
15269: PUSH
15270: LD_INT 1
15272: PLUS
15273: PPUSH
15274: CALL_OW 237
15278: GO 15180
15280: POP
15281: POP
// end ;
15282: PPOPN 3
15284: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
15285: LD_EXP 70
15289: PUSH
15290: LD_EXP 78
15294: AND
15295: IFFALSE 15315
15297: GO 15299
15299: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
15300: LD_INT 4
15302: PPUSH
15303: LD_OWVAR 2
15307: PPUSH
15308: LD_INT 0
15310: PPUSH
15311: CALL_OW 324
15315: END
// every 0 0$1 trigger StreamModeActive and sShovel do
15316: LD_EXP 70
15320: PUSH
15321: LD_EXP 107
15325: AND
15326: IFFALSE 15346
15328: GO 15330
15330: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
15331: LD_INT 19
15333: PPUSH
15334: LD_OWVAR 2
15338: PPUSH
15339: LD_INT 0
15341: PPUSH
15342: CALL_OW 324
15346: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
15347: LD_EXP 70
15351: PUSH
15352: LD_EXP 79
15356: AND
15357: IFFALSE 15459
15359: GO 15361
15361: DISABLE
15362: LD_INT 0
15364: PPUSH
15365: PPUSH
// begin enable ;
15366: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
15367: LD_ADDR_VAR 0 2
15371: PUSH
15372: LD_INT 22
15374: PUSH
15375: LD_OWVAR 2
15379: PUSH
15380: EMPTY
15381: LIST
15382: LIST
15383: PUSH
15384: LD_INT 2
15386: PUSH
15387: LD_INT 34
15389: PUSH
15390: LD_INT 11
15392: PUSH
15393: EMPTY
15394: LIST
15395: LIST
15396: PUSH
15397: LD_INT 34
15399: PUSH
15400: LD_INT 30
15402: PUSH
15403: EMPTY
15404: LIST
15405: LIST
15406: PUSH
15407: EMPTY
15408: LIST
15409: LIST
15410: LIST
15411: PUSH
15412: EMPTY
15413: LIST
15414: LIST
15415: PPUSH
15416: CALL_OW 69
15420: ST_TO_ADDR
// if not tmp then
15421: LD_VAR 0 2
15425: NOT
15426: IFFALSE 15430
// exit ;
15428: GO 15459
// for i in tmp do
15430: LD_ADDR_VAR 0 1
15434: PUSH
15435: LD_VAR 0 2
15439: PUSH
15440: FOR_IN
15441: IFFALSE 15457
// begin SetLives ( i , 0 ) ;
15443: LD_VAR 0 1
15447: PPUSH
15448: LD_INT 0
15450: PPUSH
15451: CALL_OW 234
// end ;
15455: GO 15440
15457: POP
15458: POP
// end ;
15459: PPOPN 2
15461: END
// every 0 0$1 trigger StreamModeActive and sBunker do
15462: LD_EXP 70
15466: PUSH
15467: LD_EXP 80
15471: AND
15472: IFFALSE 15492
15474: GO 15476
15476: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
15477: LD_INT 32
15479: PPUSH
15480: LD_OWVAR 2
15484: PPUSH
15485: LD_INT 0
15487: PPUSH
15488: CALL_OW 324
15492: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
15493: LD_EXP 70
15497: PUSH
15498: LD_EXP 81
15502: AND
15503: IFFALSE 15684
15505: GO 15507
15507: DISABLE
15508: LD_INT 0
15510: PPUSH
15511: PPUSH
15512: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
15513: LD_ADDR_VAR 0 2
15517: PUSH
15518: LD_INT 22
15520: PUSH
15521: LD_OWVAR 2
15525: PUSH
15526: EMPTY
15527: LIST
15528: LIST
15529: PUSH
15530: LD_INT 33
15532: PUSH
15533: LD_INT 3
15535: PUSH
15536: EMPTY
15537: LIST
15538: LIST
15539: PUSH
15540: EMPTY
15541: LIST
15542: LIST
15543: PPUSH
15544: CALL_OW 69
15548: ST_TO_ADDR
// if not tmp then
15549: LD_VAR 0 2
15553: NOT
15554: IFFALSE 15558
// exit ;
15556: GO 15684
// side := 0 ;
15558: LD_ADDR_VAR 0 3
15562: PUSH
15563: LD_INT 0
15565: ST_TO_ADDR
// for i := 1 to 8 do
15566: LD_ADDR_VAR 0 1
15570: PUSH
15571: DOUBLE
15572: LD_INT 1
15574: DEC
15575: ST_TO_ADDR
15576: LD_INT 8
15578: PUSH
15579: FOR_TO
15580: IFFALSE 15628
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
15582: LD_OWVAR 2
15586: PUSH
15587: LD_VAR 0 1
15591: NONEQUAL
15592: PUSH
15593: LD_OWVAR 2
15597: PPUSH
15598: LD_VAR 0 1
15602: PPUSH
15603: CALL_OW 81
15607: PUSH
15608: LD_INT 2
15610: EQUAL
15611: AND
15612: IFFALSE 15626
// begin side := i ;
15614: LD_ADDR_VAR 0 3
15618: PUSH
15619: LD_VAR 0 1
15623: ST_TO_ADDR
// break ;
15624: GO 15628
// end ;
15626: GO 15579
15628: POP
15629: POP
// if not side then
15630: LD_VAR 0 3
15634: NOT
15635: IFFALSE 15639
// exit ;
15637: GO 15684
// for i := 1 to tmp do
15639: LD_ADDR_VAR 0 1
15643: PUSH
15644: DOUBLE
15645: LD_INT 1
15647: DEC
15648: ST_TO_ADDR
15649: LD_VAR 0 2
15653: PUSH
15654: FOR_TO
15655: IFFALSE 15682
// if Prob ( 60 ) then
15657: LD_INT 60
15659: PPUSH
15660: CALL_OW 13
15664: IFFALSE 15680
// SetSide ( i , side ) ;
15666: LD_VAR 0 1
15670: PPUSH
15671: LD_VAR 0 3
15675: PPUSH
15676: CALL_OW 235
15680: GO 15654
15682: POP
15683: POP
// end ;
15684: PPOPN 3
15686: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
15687: LD_EXP 70
15691: PUSH
15692: LD_EXP 83
15696: AND
15697: IFFALSE 15816
15699: GO 15701
15701: DISABLE
15702: LD_INT 0
15704: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
15705: LD_ADDR_VAR 0 1
15709: PUSH
15710: LD_INT 22
15712: PUSH
15713: LD_OWVAR 2
15717: PUSH
15718: EMPTY
15719: LIST
15720: LIST
15721: PUSH
15722: LD_INT 21
15724: PUSH
15725: LD_INT 1
15727: PUSH
15728: EMPTY
15729: LIST
15730: LIST
15731: PUSH
15732: LD_INT 3
15734: PUSH
15735: LD_INT 23
15737: PUSH
15738: LD_INT 0
15740: PUSH
15741: EMPTY
15742: LIST
15743: LIST
15744: PUSH
15745: EMPTY
15746: LIST
15747: LIST
15748: PUSH
15749: EMPTY
15750: LIST
15751: LIST
15752: LIST
15753: PPUSH
15754: CALL_OW 69
15758: PUSH
15759: FOR_IN
15760: IFFALSE 15814
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
15762: LD_VAR 0 1
15766: PPUSH
15767: CALL_OW 257
15771: PUSH
15772: LD_INT 1
15774: PUSH
15775: LD_INT 2
15777: PUSH
15778: LD_INT 3
15780: PUSH
15781: LD_INT 4
15783: PUSH
15784: EMPTY
15785: LIST
15786: LIST
15787: LIST
15788: LIST
15789: IN
15790: IFFALSE 15812
// SetClass ( un , rand ( 1 , 4 ) ) ;
15792: LD_VAR 0 1
15796: PPUSH
15797: LD_INT 1
15799: PPUSH
15800: LD_INT 4
15802: PPUSH
15803: CALL_OW 12
15807: PPUSH
15808: CALL_OW 336
15812: GO 15759
15814: POP
15815: POP
// end ;
15816: PPOPN 1
15818: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
15819: LD_EXP 70
15823: PUSH
15824: LD_EXP 82
15828: AND
15829: IFFALSE 15908
15831: GO 15833
15833: DISABLE
15834: LD_INT 0
15836: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
15837: LD_ADDR_VAR 0 1
15841: PUSH
15842: LD_INT 22
15844: PUSH
15845: LD_OWVAR 2
15849: PUSH
15850: EMPTY
15851: LIST
15852: LIST
15853: PUSH
15854: LD_INT 21
15856: PUSH
15857: LD_INT 3
15859: PUSH
15860: EMPTY
15861: LIST
15862: LIST
15863: PUSH
15864: EMPTY
15865: LIST
15866: LIST
15867: PPUSH
15868: CALL_OW 69
15872: ST_TO_ADDR
// if not tmp then
15873: LD_VAR 0 1
15877: NOT
15878: IFFALSE 15882
// exit ;
15880: GO 15908
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
15882: LD_VAR 0 1
15886: PUSH
15887: LD_INT 1
15889: PPUSH
15890: LD_VAR 0 1
15894: PPUSH
15895: CALL_OW 12
15899: ARRAY
15900: PPUSH
15901: LD_INT 100
15903: PPUSH
15904: CALL_OW 234
// end ;
15908: PPOPN 1
15910: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
15911: LD_EXP 70
15915: PUSH
15916: LD_EXP 84
15920: AND
15921: IFFALSE 16019
15923: GO 15925
15925: DISABLE
15926: LD_INT 0
15928: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15929: LD_ADDR_VAR 0 1
15933: PUSH
15934: LD_INT 22
15936: PUSH
15937: LD_OWVAR 2
15941: PUSH
15942: EMPTY
15943: LIST
15944: LIST
15945: PUSH
15946: LD_INT 21
15948: PUSH
15949: LD_INT 1
15951: PUSH
15952: EMPTY
15953: LIST
15954: LIST
15955: PUSH
15956: EMPTY
15957: LIST
15958: LIST
15959: PPUSH
15960: CALL_OW 69
15964: ST_TO_ADDR
// if not tmp then
15965: LD_VAR 0 1
15969: NOT
15970: IFFALSE 15974
// exit ;
15972: GO 16019
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
15974: LD_VAR 0 1
15978: PUSH
15979: LD_INT 1
15981: PPUSH
15982: LD_VAR 0 1
15986: PPUSH
15987: CALL_OW 12
15991: ARRAY
15992: PPUSH
15993: LD_INT 1
15995: PPUSH
15996: LD_INT 4
15998: PPUSH
15999: CALL_OW 12
16003: PPUSH
16004: LD_INT 3000
16006: PPUSH
16007: LD_INT 9000
16009: PPUSH
16010: CALL_OW 12
16014: PPUSH
16015: CALL_OW 492
// end ;
16019: PPOPN 1
16021: END
// every 0 0$1 trigger StreamModeActive and sDepot do
16022: LD_EXP 70
16026: PUSH
16027: LD_EXP 85
16031: AND
16032: IFFALSE 16052
16034: GO 16036
16036: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
16037: LD_INT 1
16039: PPUSH
16040: LD_OWVAR 2
16044: PPUSH
16045: LD_INT 0
16047: PPUSH
16048: CALL_OW 324
16052: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
16053: LD_EXP 70
16057: PUSH
16058: LD_EXP 86
16062: AND
16063: IFFALSE 16146
16065: GO 16067
16067: DISABLE
16068: LD_INT 0
16070: PPUSH
16071: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
16072: LD_ADDR_VAR 0 2
16076: PUSH
16077: LD_INT 22
16079: PUSH
16080: LD_OWVAR 2
16084: PUSH
16085: EMPTY
16086: LIST
16087: LIST
16088: PUSH
16089: LD_INT 21
16091: PUSH
16092: LD_INT 3
16094: PUSH
16095: EMPTY
16096: LIST
16097: LIST
16098: PUSH
16099: EMPTY
16100: LIST
16101: LIST
16102: PPUSH
16103: CALL_OW 69
16107: ST_TO_ADDR
// if not tmp then
16108: LD_VAR 0 2
16112: NOT
16113: IFFALSE 16117
// exit ;
16115: GO 16146
// for i in tmp do
16117: LD_ADDR_VAR 0 1
16121: PUSH
16122: LD_VAR 0 2
16126: PUSH
16127: FOR_IN
16128: IFFALSE 16144
// SetBLevel ( i , 10 ) ;
16130: LD_VAR 0 1
16134: PPUSH
16135: LD_INT 10
16137: PPUSH
16138: CALL_OW 241
16142: GO 16127
16144: POP
16145: POP
// end ;
16146: PPOPN 2
16148: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
16149: LD_EXP 70
16153: PUSH
16154: LD_EXP 87
16158: AND
16159: IFFALSE 16270
16161: GO 16163
16163: DISABLE
16164: LD_INT 0
16166: PPUSH
16167: PPUSH
16168: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16169: LD_ADDR_VAR 0 3
16173: PUSH
16174: LD_INT 22
16176: PUSH
16177: LD_OWVAR 2
16181: PUSH
16182: EMPTY
16183: LIST
16184: LIST
16185: PUSH
16186: LD_INT 25
16188: PUSH
16189: LD_INT 1
16191: PUSH
16192: EMPTY
16193: LIST
16194: LIST
16195: PUSH
16196: EMPTY
16197: LIST
16198: LIST
16199: PPUSH
16200: CALL_OW 69
16204: ST_TO_ADDR
// if not tmp then
16205: LD_VAR 0 3
16209: NOT
16210: IFFALSE 16214
// exit ;
16212: GO 16270
// un := tmp [ rand ( 1 , tmp ) ] ;
16214: LD_ADDR_VAR 0 2
16218: PUSH
16219: LD_VAR 0 3
16223: PUSH
16224: LD_INT 1
16226: PPUSH
16227: LD_VAR 0 3
16231: PPUSH
16232: CALL_OW 12
16236: ARRAY
16237: ST_TO_ADDR
// if Crawls ( un ) then
16238: LD_VAR 0 2
16242: PPUSH
16243: CALL_OW 318
16247: IFFALSE 16258
// ComWalk ( un ) ;
16249: LD_VAR 0 2
16253: PPUSH
16254: CALL_OW 138
// SetClass ( un , class_sniper ) ;
16258: LD_VAR 0 2
16262: PPUSH
16263: LD_INT 5
16265: PPUSH
16266: CALL_OW 336
// end ;
16270: PPOPN 3
16272: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
16273: LD_EXP 70
16277: PUSH
16278: LD_EXP 88
16282: AND
16283: PUSH
16284: LD_OWVAR 67
16288: PUSH
16289: LD_INT 4
16291: LESS
16292: AND
16293: IFFALSE 16312
16295: GO 16297
16297: DISABLE
// begin Difficulty := Difficulty + 1 ;
16298: LD_ADDR_OWVAR 67
16302: PUSH
16303: LD_OWVAR 67
16307: PUSH
16308: LD_INT 1
16310: PLUS
16311: ST_TO_ADDR
// end ;
16312: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
16313: LD_EXP 70
16317: PUSH
16318: LD_EXP 89
16322: AND
16323: IFFALSE 16426
16325: GO 16327
16327: DISABLE
16328: LD_INT 0
16330: PPUSH
// begin for i := 1 to 5 do
16331: LD_ADDR_VAR 0 1
16335: PUSH
16336: DOUBLE
16337: LD_INT 1
16339: DEC
16340: ST_TO_ADDR
16341: LD_INT 5
16343: PUSH
16344: FOR_TO
16345: IFFALSE 16424
// begin uc_nation := nation_nature ;
16347: LD_ADDR_OWVAR 21
16351: PUSH
16352: LD_INT 0
16354: ST_TO_ADDR
// uc_side := 0 ;
16355: LD_ADDR_OWVAR 20
16359: PUSH
16360: LD_INT 0
16362: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
16363: LD_ADDR_OWVAR 29
16367: PUSH
16368: LD_INT 12
16370: PUSH
16371: LD_INT 12
16373: PUSH
16374: EMPTY
16375: LIST
16376: LIST
16377: ST_TO_ADDR
// hc_agressivity := 20 ;
16378: LD_ADDR_OWVAR 35
16382: PUSH
16383: LD_INT 20
16385: ST_TO_ADDR
// hc_class := class_tiger ;
16386: LD_ADDR_OWVAR 28
16390: PUSH
16391: LD_INT 14
16393: ST_TO_ADDR
// hc_gallery :=  ;
16394: LD_ADDR_OWVAR 33
16398: PUSH
16399: LD_STRING 
16401: ST_TO_ADDR
// hc_name :=  ;
16402: LD_ADDR_OWVAR 26
16406: PUSH
16407: LD_STRING 
16409: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
16410: CALL_OW 44
16414: PPUSH
16415: LD_INT 0
16417: PPUSH
16418: CALL_OW 51
// end ;
16422: GO 16344
16424: POP
16425: POP
// end ;
16426: PPOPN 1
16428: END
// every 0 0$1 trigger StreamModeActive and sBomb do
16429: LD_EXP 70
16433: PUSH
16434: LD_EXP 90
16438: AND
16439: IFFALSE 16448
16441: GO 16443
16443: DISABLE
// StreamSibBomb ;
16444: CALL 16449 0 0
16448: END
// export function StreamSibBomb ; var i , x , y ; begin
16449: LD_INT 0
16451: PPUSH
16452: PPUSH
16453: PPUSH
16454: PPUSH
// result := false ;
16455: LD_ADDR_VAR 0 1
16459: PUSH
16460: LD_INT 0
16462: ST_TO_ADDR
// for i := 1 to 16 do
16463: LD_ADDR_VAR 0 2
16467: PUSH
16468: DOUBLE
16469: LD_INT 1
16471: DEC
16472: ST_TO_ADDR
16473: LD_INT 16
16475: PUSH
16476: FOR_TO
16477: IFFALSE 16676
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
16479: LD_ADDR_VAR 0 3
16483: PUSH
16484: LD_INT 10
16486: PUSH
16487: LD_INT 20
16489: PUSH
16490: LD_INT 30
16492: PUSH
16493: LD_INT 40
16495: PUSH
16496: LD_INT 50
16498: PUSH
16499: LD_INT 60
16501: PUSH
16502: LD_INT 70
16504: PUSH
16505: LD_INT 80
16507: PUSH
16508: LD_INT 90
16510: PUSH
16511: LD_INT 100
16513: PUSH
16514: LD_INT 110
16516: PUSH
16517: LD_INT 120
16519: PUSH
16520: LD_INT 130
16522: PUSH
16523: LD_INT 140
16525: PUSH
16526: LD_INT 150
16528: PUSH
16529: EMPTY
16530: LIST
16531: LIST
16532: LIST
16533: LIST
16534: LIST
16535: LIST
16536: LIST
16537: LIST
16538: LIST
16539: LIST
16540: LIST
16541: LIST
16542: LIST
16543: LIST
16544: LIST
16545: PUSH
16546: LD_INT 1
16548: PPUSH
16549: LD_INT 15
16551: PPUSH
16552: CALL_OW 12
16556: ARRAY
16557: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
16558: LD_ADDR_VAR 0 4
16562: PUSH
16563: LD_INT 10
16565: PUSH
16566: LD_INT 20
16568: PUSH
16569: LD_INT 30
16571: PUSH
16572: LD_INT 40
16574: PUSH
16575: LD_INT 50
16577: PUSH
16578: LD_INT 60
16580: PUSH
16581: LD_INT 70
16583: PUSH
16584: LD_INT 80
16586: PUSH
16587: LD_INT 90
16589: PUSH
16590: LD_INT 100
16592: PUSH
16593: LD_INT 110
16595: PUSH
16596: LD_INT 120
16598: PUSH
16599: LD_INT 130
16601: PUSH
16602: LD_INT 140
16604: PUSH
16605: LD_INT 150
16607: PUSH
16608: EMPTY
16609: LIST
16610: LIST
16611: LIST
16612: LIST
16613: LIST
16614: LIST
16615: LIST
16616: LIST
16617: LIST
16618: LIST
16619: LIST
16620: LIST
16621: LIST
16622: LIST
16623: LIST
16624: PUSH
16625: LD_INT 1
16627: PPUSH
16628: LD_INT 15
16630: PPUSH
16631: CALL_OW 12
16635: ARRAY
16636: ST_TO_ADDR
// if ValidHex ( x , y ) then
16637: LD_VAR 0 3
16641: PPUSH
16642: LD_VAR 0 4
16646: PPUSH
16647: CALL_OW 488
16651: IFFALSE 16674
// begin result := [ x , y ] ;
16653: LD_ADDR_VAR 0 1
16657: PUSH
16658: LD_VAR 0 3
16662: PUSH
16663: LD_VAR 0 4
16667: PUSH
16668: EMPTY
16669: LIST
16670: LIST
16671: ST_TO_ADDR
// break ;
16672: GO 16676
// end ; end ;
16674: GO 16476
16676: POP
16677: POP
// if result then
16678: LD_VAR 0 1
16682: IFFALSE 16742
// begin ToLua ( playSibBomb() ) ;
16684: LD_STRING playSibBomb()
16686: PPUSH
16687: CALL_OW 559
// wait ( 0 0$14 ) ;
16691: LD_INT 490
16693: PPUSH
16694: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
16698: LD_VAR 0 1
16702: PUSH
16703: LD_INT 1
16705: ARRAY
16706: PPUSH
16707: LD_VAR 0 1
16711: PUSH
16712: LD_INT 2
16714: ARRAY
16715: PPUSH
16716: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
16720: LD_VAR 0 1
16724: PUSH
16725: LD_INT 1
16727: ARRAY
16728: PPUSH
16729: LD_VAR 0 1
16733: PUSH
16734: LD_INT 2
16736: ARRAY
16737: PPUSH
16738: CALL_OW 429
// end ; end ;
16742: LD_VAR 0 1
16746: RET
// every 0 0$1 trigger StreamModeActive and sReset do
16747: LD_EXP 70
16751: PUSH
16752: LD_EXP 92
16756: AND
16757: IFFALSE 16769
16759: GO 16761
16761: DISABLE
// YouLost (  ) ;
16762: LD_STRING 
16764: PPUSH
16765: CALL_OW 104
16769: END
// every 0 0$1 trigger StreamModeActive and sFog do
16770: LD_EXP 70
16774: PUSH
16775: LD_EXP 91
16779: AND
16780: IFFALSE 16794
16782: GO 16784
16784: DISABLE
// FogOff ( your_side ) ;
16785: LD_OWVAR 2
16789: PPUSH
16790: CALL_OW 344
16794: END
// every 0 0$1 trigger StreamModeActive and sSun do
16795: LD_EXP 70
16799: PUSH
16800: LD_EXP 93
16804: AND
16805: IFFALSE 16833
16807: GO 16809
16809: DISABLE
// begin solar_recharge_percent := 0 ;
16810: LD_ADDR_OWVAR 79
16814: PUSH
16815: LD_INT 0
16817: ST_TO_ADDR
// wait ( 5 5$00 ) ;
16818: LD_INT 10500
16820: PPUSH
16821: CALL_OW 67
// solar_recharge_percent := 100 ;
16825: LD_ADDR_OWVAR 79
16829: PUSH
16830: LD_INT 100
16832: ST_TO_ADDR
// end ;
16833: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
16834: LD_EXP 70
16838: PUSH
16839: LD_EXP 94
16843: AND
16844: IFFALSE 17083
16846: GO 16848
16848: DISABLE
16849: LD_INT 0
16851: PPUSH
16852: PPUSH
16853: PPUSH
// begin tmp := [ ] ;
16854: LD_ADDR_VAR 0 3
16858: PUSH
16859: EMPTY
16860: ST_TO_ADDR
// for i := 1 to 6 do
16861: LD_ADDR_VAR 0 1
16865: PUSH
16866: DOUBLE
16867: LD_INT 1
16869: DEC
16870: ST_TO_ADDR
16871: LD_INT 6
16873: PUSH
16874: FOR_TO
16875: IFFALSE 16980
// begin uc_nation := nation_nature ;
16877: LD_ADDR_OWVAR 21
16881: PUSH
16882: LD_INT 0
16884: ST_TO_ADDR
// uc_side := 0 ;
16885: LD_ADDR_OWVAR 20
16889: PUSH
16890: LD_INT 0
16892: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
16893: LD_ADDR_OWVAR 29
16897: PUSH
16898: LD_INT 12
16900: PUSH
16901: LD_INT 12
16903: PUSH
16904: EMPTY
16905: LIST
16906: LIST
16907: ST_TO_ADDR
// hc_agressivity := 20 ;
16908: LD_ADDR_OWVAR 35
16912: PUSH
16913: LD_INT 20
16915: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
16916: LD_ADDR_OWVAR 28
16920: PUSH
16921: LD_INT 17
16923: ST_TO_ADDR
// hc_gallery :=  ;
16924: LD_ADDR_OWVAR 33
16928: PUSH
16929: LD_STRING 
16931: ST_TO_ADDR
// hc_name :=  ;
16932: LD_ADDR_OWVAR 26
16936: PUSH
16937: LD_STRING 
16939: ST_TO_ADDR
// un := CreateHuman ;
16940: LD_ADDR_VAR 0 2
16944: PUSH
16945: CALL_OW 44
16949: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
16950: LD_VAR 0 2
16954: PPUSH
16955: LD_INT 1
16957: PPUSH
16958: CALL_OW 51
// tmp := tmp ^ un ;
16962: LD_ADDR_VAR 0 3
16966: PUSH
16967: LD_VAR 0 3
16971: PUSH
16972: LD_VAR 0 2
16976: ADD
16977: ST_TO_ADDR
// end ;
16978: GO 16874
16980: POP
16981: POP
// repeat wait ( 0 0$1 ) ;
16982: LD_INT 35
16984: PPUSH
16985: CALL_OW 67
// for un in tmp do
16989: LD_ADDR_VAR 0 2
16993: PUSH
16994: LD_VAR 0 3
16998: PUSH
16999: FOR_IN
17000: IFFALSE 17074
// begin if IsDead ( un ) then
17002: LD_VAR 0 2
17006: PPUSH
17007: CALL_OW 301
17011: IFFALSE 17031
// begin tmp := tmp diff un ;
17013: LD_ADDR_VAR 0 3
17017: PUSH
17018: LD_VAR 0 3
17022: PUSH
17023: LD_VAR 0 2
17027: DIFF
17028: ST_TO_ADDR
// continue ;
17029: GO 16999
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
17031: LD_VAR 0 2
17035: PPUSH
17036: LD_INT 3
17038: PUSH
17039: LD_INT 22
17041: PUSH
17042: LD_INT 0
17044: PUSH
17045: EMPTY
17046: LIST
17047: LIST
17048: PUSH
17049: EMPTY
17050: LIST
17051: LIST
17052: PPUSH
17053: CALL_OW 69
17057: PPUSH
17058: LD_VAR 0 2
17062: PPUSH
17063: CALL_OW 74
17067: PPUSH
17068: CALL_OW 115
// end ;
17072: GO 16999
17074: POP
17075: POP
// until not tmp ;
17076: LD_VAR 0 3
17080: NOT
17081: IFFALSE 16982
// end ;
17083: PPOPN 3
17085: END
// every 0 0$1 trigger StreamModeActive and sTroll do
17086: LD_EXP 70
17090: PUSH
17091: LD_EXP 95
17095: AND
17096: IFFALSE 17150
17098: GO 17100
17100: DISABLE
// begin ToLua ( displayTroll(); ) ;
17101: LD_STRING displayTroll();
17103: PPUSH
17104: CALL_OW 559
// wait ( 3 3$00 ) ;
17108: LD_INT 6300
17110: PPUSH
17111: CALL_OW 67
// ToLua ( hideTroll(); ) ;
17115: LD_STRING hideTroll();
17117: PPUSH
17118: CALL_OW 559
// wait ( 1 1$00 ) ;
17122: LD_INT 2100
17124: PPUSH
17125: CALL_OW 67
// ToLua ( displayTroll(); ) ;
17129: LD_STRING displayTroll();
17131: PPUSH
17132: CALL_OW 559
// wait ( 1 1$00 ) ;
17136: LD_INT 2100
17138: PPUSH
17139: CALL_OW 67
// ToLua ( hideTroll(); ) ;
17143: LD_STRING hideTroll();
17145: PPUSH
17146: CALL_OW 559
// end ;
17150: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
17151: LD_EXP 70
17155: PUSH
17156: LD_EXP 96
17160: AND
17161: IFFALSE 17224
17163: GO 17165
17165: DISABLE
17166: LD_INT 0
17168: PPUSH
// begin p := 0 ;
17169: LD_ADDR_VAR 0 1
17173: PUSH
17174: LD_INT 0
17176: ST_TO_ADDR
// repeat game_speed := 1 ;
17177: LD_ADDR_OWVAR 65
17181: PUSH
17182: LD_INT 1
17184: ST_TO_ADDR
// wait ( 0 0$1 ) ;
17185: LD_INT 35
17187: PPUSH
17188: CALL_OW 67
// p := p + 1 ;
17192: LD_ADDR_VAR 0 1
17196: PUSH
17197: LD_VAR 0 1
17201: PUSH
17202: LD_INT 1
17204: PLUS
17205: ST_TO_ADDR
// until p >= 60 ;
17206: LD_VAR 0 1
17210: PUSH
17211: LD_INT 60
17213: GREATEREQUAL
17214: IFFALSE 17177
// game_speed := 4 ;
17216: LD_ADDR_OWVAR 65
17220: PUSH
17221: LD_INT 4
17223: ST_TO_ADDR
// end ;
17224: PPOPN 1
17226: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
17227: LD_EXP 70
17231: PUSH
17232: LD_EXP 97
17236: AND
17237: IFFALSE 17383
17239: GO 17241
17241: DISABLE
17242: LD_INT 0
17244: PPUSH
17245: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17246: LD_ADDR_VAR 0 1
17250: PUSH
17251: LD_INT 22
17253: PUSH
17254: LD_OWVAR 2
17258: PUSH
17259: EMPTY
17260: LIST
17261: LIST
17262: PUSH
17263: LD_INT 2
17265: PUSH
17266: LD_INT 30
17268: PUSH
17269: LD_INT 0
17271: PUSH
17272: EMPTY
17273: LIST
17274: LIST
17275: PUSH
17276: LD_INT 30
17278: PUSH
17279: LD_INT 1
17281: PUSH
17282: EMPTY
17283: LIST
17284: LIST
17285: PUSH
17286: EMPTY
17287: LIST
17288: LIST
17289: LIST
17290: PUSH
17291: EMPTY
17292: LIST
17293: LIST
17294: PPUSH
17295: CALL_OW 69
17299: ST_TO_ADDR
// if not depot then
17300: LD_VAR 0 1
17304: NOT
17305: IFFALSE 17309
// exit ;
17307: GO 17383
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
17309: LD_ADDR_VAR 0 2
17313: PUSH
17314: LD_VAR 0 1
17318: PUSH
17319: LD_INT 1
17321: PPUSH
17322: LD_VAR 0 1
17326: PPUSH
17327: CALL_OW 12
17331: ARRAY
17332: PPUSH
17333: CALL_OW 274
17337: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
17338: LD_VAR 0 2
17342: PPUSH
17343: LD_INT 1
17345: PPUSH
17346: LD_INT 0
17348: PPUSH
17349: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
17353: LD_VAR 0 2
17357: PPUSH
17358: LD_INT 2
17360: PPUSH
17361: LD_INT 0
17363: PPUSH
17364: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
17368: LD_VAR 0 2
17372: PPUSH
17373: LD_INT 3
17375: PPUSH
17376: LD_INT 0
17378: PPUSH
17379: CALL_OW 277
// end ;
17383: PPOPN 2
17385: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
17386: LD_EXP 70
17390: PUSH
17391: LD_EXP 98
17395: AND
17396: IFFALSE 17493
17398: GO 17400
17400: DISABLE
17401: LD_INT 0
17403: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17404: LD_ADDR_VAR 0 1
17408: PUSH
17409: LD_INT 22
17411: PUSH
17412: LD_OWVAR 2
17416: PUSH
17417: EMPTY
17418: LIST
17419: LIST
17420: PUSH
17421: LD_INT 21
17423: PUSH
17424: LD_INT 1
17426: PUSH
17427: EMPTY
17428: LIST
17429: LIST
17430: PUSH
17431: LD_INT 3
17433: PUSH
17434: LD_INT 23
17436: PUSH
17437: LD_INT 0
17439: PUSH
17440: EMPTY
17441: LIST
17442: LIST
17443: PUSH
17444: EMPTY
17445: LIST
17446: LIST
17447: PUSH
17448: EMPTY
17449: LIST
17450: LIST
17451: LIST
17452: PPUSH
17453: CALL_OW 69
17457: ST_TO_ADDR
// if not tmp then
17458: LD_VAR 0 1
17462: NOT
17463: IFFALSE 17467
// exit ;
17465: GO 17493
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
17467: LD_VAR 0 1
17471: PUSH
17472: LD_INT 1
17474: PPUSH
17475: LD_VAR 0 1
17479: PPUSH
17480: CALL_OW 12
17484: ARRAY
17485: PPUSH
17486: LD_INT 200
17488: PPUSH
17489: CALL_OW 234
// end ;
17493: PPOPN 1
17495: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
17496: LD_EXP 70
17500: PUSH
17501: LD_EXP 99
17505: AND
17506: IFFALSE 17585
17508: GO 17510
17510: DISABLE
17511: LD_INT 0
17513: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
17514: LD_ADDR_VAR 0 1
17518: PUSH
17519: LD_INT 22
17521: PUSH
17522: LD_OWVAR 2
17526: PUSH
17527: EMPTY
17528: LIST
17529: LIST
17530: PUSH
17531: LD_INT 21
17533: PUSH
17534: LD_INT 2
17536: PUSH
17537: EMPTY
17538: LIST
17539: LIST
17540: PUSH
17541: EMPTY
17542: LIST
17543: LIST
17544: PPUSH
17545: CALL_OW 69
17549: ST_TO_ADDR
// if not tmp then
17550: LD_VAR 0 1
17554: NOT
17555: IFFALSE 17559
// exit ;
17557: GO 17585
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
17559: LD_VAR 0 1
17563: PUSH
17564: LD_INT 1
17566: PPUSH
17567: LD_VAR 0 1
17571: PPUSH
17572: CALL_OW 12
17576: ARRAY
17577: PPUSH
17578: LD_INT 60
17580: PPUSH
17581: CALL_OW 234
// end ;
17585: PPOPN 1
17587: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
17588: LD_EXP 70
17592: PUSH
17593: LD_EXP 100
17597: AND
17598: IFFALSE 17697
17600: GO 17602
17602: DISABLE
17603: LD_INT 0
17605: PPUSH
17606: PPUSH
// begin enable ;
17607: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
17608: LD_ADDR_VAR 0 1
17612: PUSH
17613: LD_INT 22
17615: PUSH
17616: LD_OWVAR 2
17620: PUSH
17621: EMPTY
17622: LIST
17623: LIST
17624: PUSH
17625: LD_INT 61
17627: PUSH
17628: EMPTY
17629: LIST
17630: PUSH
17631: LD_INT 33
17633: PUSH
17634: LD_INT 2
17636: PUSH
17637: EMPTY
17638: LIST
17639: LIST
17640: PUSH
17641: EMPTY
17642: LIST
17643: LIST
17644: LIST
17645: PPUSH
17646: CALL_OW 69
17650: ST_TO_ADDR
// if not tmp then
17651: LD_VAR 0 1
17655: NOT
17656: IFFALSE 17660
// exit ;
17658: GO 17697
// for i in tmp do
17660: LD_ADDR_VAR 0 2
17664: PUSH
17665: LD_VAR 0 1
17669: PUSH
17670: FOR_IN
17671: IFFALSE 17695
// if IsControledBy ( i ) then
17673: LD_VAR 0 2
17677: PPUSH
17678: CALL_OW 312
17682: IFFALSE 17693
// ComUnlink ( i ) ;
17684: LD_VAR 0 2
17688: PPUSH
17689: CALL_OW 136
17693: GO 17670
17695: POP
17696: POP
// end ;
17697: PPOPN 2
17699: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
17700: LD_EXP 70
17704: PUSH
17705: LD_EXP 101
17709: AND
17710: IFFALSE 17850
17712: GO 17714
17714: DISABLE
17715: LD_INT 0
17717: PPUSH
17718: PPUSH
// begin ToLua ( displayPowell(); ) ;
17719: LD_STRING displayPowell();
17721: PPUSH
17722: CALL_OW 559
// uc_side := 0 ;
17726: LD_ADDR_OWVAR 20
17730: PUSH
17731: LD_INT 0
17733: ST_TO_ADDR
// uc_nation := 2 ;
17734: LD_ADDR_OWVAR 21
17738: PUSH
17739: LD_INT 2
17741: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
17742: LD_ADDR_OWVAR 37
17746: PUSH
17747: LD_INT 14
17749: ST_TO_ADDR
// vc_engine := engine_siberite ;
17750: LD_ADDR_OWVAR 39
17754: PUSH
17755: LD_INT 3
17757: ST_TO_ADDR
// vc_control := control_apeman ;
17758: LD_ADDR_OWVAR 38
17762: PUSH
17763: LD_INT 5
17765: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
17766: LD_ADDR_OWVAR 40
17770: PUSH
17771: LD_INT 29
17773: ST_TO_ADDR
// un := CreateVehicle ;
17774: LD_ADDR_VAR 0 2
17778: PUSH
17779: CALL_OW 45
17783: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17784: LD_VAR 0 2
17788: PPUSH
17789: LD_INT 1
17791: PPUSH
17792: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
17796: LD_INT 35
17798: PPUSH
17799: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
17803: LD_VAR 0 2
17807: PPUSH
17808: LD_INT 22
17810: PUSH
17811: LD_OWVAR 2
17815: PUSH
17816: EMPTY
17817: LIST
17818: LIST
17819: PPUSH
17820: CALL_OW 69
17824: PPUSH
17825: LD_VAR 0 2
17829: PPUSH
17830: CALL_OW 74
17834: PPUSH
17835: CALL_OW 115
// until IsDead ( un ) ;
17839: LD_VAR 0 2
17843: PPUSH
17844: CALL_OW 301
17848: IFFALSE 17796
// end ;
17850: PPOPN 2
17852: END
// every 0 0$1 trigger StreamModeActive and sStu do
17853: LD_EXP 70
17857: PUSH
17858: LD_EXP 109
17862: AND
17863: IFFALSE 17879
17865: GO 17867
17867: DISABLE
// begin ToLua ( displayStucuk(); ) ;
17868: LD_STRING displayStucuk();
17870: PPUSH
17871: CALL_OW 559
// ResetFog ;
17875: CALL_OW 335
// end ;
17879: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
17880: LD_EXP 70
17884: PUSH
17885: LD_EXP 102
17889: AND
17890: IFFALSE 18031
17892: GO 17894
17894: DISABLE
17895: LD_INT 0
17897: PPUSH
17898: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17899: LD_ADDR_VAR 0 2
17903: PUSH
17904: LD_INT 22
17906: PUSH
17907: LD_OWVAR 2
17911: PUSH
17912: EMPTY
17913: LIST
17914: LIST
17915: PUSH
17916: LD_INT 21
17918: PUSH
17919: LD_INT 1
17921: PUSH
17922: EMPTY
17923: LIST
17924: LIST
17925: PUSH
17926: EMPTY
17927: LIST
17928: LIST
17929: PPUSH
17930: CALL_OW 69
17934: ST_TO_ADDR
// if not tmp then
17935: LD_VAR 0 2
17939: NOT
17940: IFFALSE 17944
// exit ;
17942: GO 18031
// un := tmp [ rand ( 1 , tmp ) ] ;
17944: LD_ADDR_VAR 0 1
17948: PUSH
17949: LD_VAR 0 2
17953: PUSH
17954: LD_INT 1
17956: PPUSH
17957: LD_VAR 0 2
17961: PPUSH
17962: CALL_OW 12
17966: ARRAY
17967: ST_TO_ADDR
// SetSide ( un , 0 ) ;
17968: LD_VAR 0 1
17972: PPUSH
17973: LD_INT 0
17975: PPUSH
17976: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
17980: LD_VAR 0 1
17984: PPUSH
17985: LD_OWVAR 3
17989: PUSH
17990: LD_VAR 0 1
17994: DIFF
17995: PPUSH
17996: LD_VAR 0 1
18000: PPUSH
18001: CALL_OW 74
18005: PPUSH
18006: CALL_OW 115
// wait ( 0 0$20 ) ;
18010: LD_INT 700
18012: PPUSH
18013: CALL_OW 67
// SetSide ( un , your_side ) ;
18017: LD_VAR 0 1
18021: PPUSH
18022: LD_OWVAR 2
18026: PPUSH
18027: CALL_OW 235
// end ;
18031: PPOPN 2
18033: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
18034: LD_EXP 70
18038: PUSH
18039: LD_EXP 103
18043: AND
18044: IFFALSE 18150
18046: GO 18048
18048: DISABLE
18049: LD_INT 0
18051: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18052: LD_ADDR_VAR 0 1
18056: PUSH
18057: LD_INT 22
18059: PUSH
18060: LD_OWVAR 2
18064: PUSH
18065: EMPTY
18066: LIST
18067: LIST
18068: PUSH
18069: LD_INT 2
18071: PUSH
18072: LD_INT 30
18074: PUSH
18075: LD_INT 0
18077: PUSH
18078: EMPTY
18079: LIST
18080: LIST
18081: PUSH
18082: LD_INT 30
18084: PUSH
18085: LD_INT 1
18087: PUSH
18088: EMPTY
18089: LIST
18090: LIST
18091: PUSH
18092: EMPTY
18093: LIST
18094: LIST
18095: LIST
18096: PUSH
18097: EMPTY
18098: LIST
18099: LIST
18100: PPUSH
18101: CALL_OW 69
18105: ST_TO_ADDR
// if not depot then
18106: LD_VAR 0 1
18110: NOT
18111: IFFALSE 18115
// exit ;
18113: GO 18150
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
18115: LD_VAR 0 1
18119: PUSH
18120: LD_INT 1
18122: ARRAY
18123: PPUSH
18124: CALL_OW 250
18128: PPUSH
18129: LD_VAR 0 1
18133: PUSH
18134: LD_INT 1
18136: ARRAY
18137: PPUSH
18138: CALL_OW 251
18142: PPUSH
18143: LD_INT 70
18145: PPUSH
18146: CALL_OW 495
// end ;
18150: PPOPN 1
18152: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
18153: LD_EXP 70
18157: PUSH
18158: LD_EXP 104
18162: AND
18163: IFFALSE 18374
18165: GO 18167
18167: DISABLE
18168: LD_INT 0
18170: PPUSH
18171: PPUSH
18172: PPUSH
18173: PPUSH
18174: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18175: LD_ADDR_VAR 0 5
18179: PUSH
18180: LD_INT 22
18182: PUSH
18183: LD_OWVAR 2
18187: PUSH
18188: EMPTY
18189: LIST
18190: LIST
18191: PUSH
18192: LD_INT 21
18194: PUSH
18195: LD_INT 1
18197: PUSH
18198: EMPTY
18199: LIST
18200: LIST
18201: PUSH
18202: EMPTY
18203: LIST
18204: LIST
18205: PPUSH
18206: CALL_OW 69
18210: ST_TO_ADDR
// if not tmp then
18211: LD_VAR 0 5
18215: NOT
18216: IFFALSE 18220
// exit ;
18218: GO 18374
// for i in tmp do
18220: LD_ADDR_VAR 0 1
18224: PUSH
18225: LD_VAR 0 5
18229: PUSH
18230: FOR_IN
18231: IFFALSE 18372
// begin d := rand ( 0 , 5 ) ;
18233: LD_ADDR_VAR 0 4
18237: PUSH
18238: LD_INT 0
18240: PPUSH
18241: LD_INT 5
18243: PPUSH
18244: CALL_OW 12
18248: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
18249: LD_ADDR_VAR 0 2
18253: PUSH
18254: LD_VAR 0 1
18258: PPUSH
18259: CALL_OW 250
18263: PPUSH
18264: LD_VAR 0 4
18268: PPUSH
18269: LD_INT 3
18271: PPUSH
18272: LD_INT 12
18274: PPUSH
18275: CALL_OW 12
18279: PPUSH
18280: CALL_OW 272
18284: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
18285: LD_ADDR_VAR 0 3
18289: PUSH
18290: LD_VAR 0 1
18294: PPUSH
18295: CALL_OW 251
18299: PPUSH
18300: LD_VAR 0 4
18304: PPUSH
18305: LD_INT 3
18307: PPUSH
18308: LD_INT 12
18310: PPUSH
18311: CALL_OW 12
18315: PPUSH
18316: CALL_OW 273
18320: ST_TO_ADDR
// if ValidHex ( x , y ) then
18321: LD_VAR 0 2
18325: PPUSH
18326: LD_VAR 0 3
18330: PPUSH
18331: CALL_OW 488
18335: IFFALSE 18370
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
18337: LD_VAR 0 1
18341: PPUSH
18342: LD_VAR 0 2
18346: PPUSH
18347: LD_VAR 0 3
18351: PPUSH
18352: LD_INT 3
18354: PPUSH
18355: LD_INT 6
18357: PPUSH
18358: CALL_OW 12
18362: PPUSH
18363: LD_INT 1
18365: PPUSH
18366: CALL_OW 483
// end ;
18370: GO 18230
18372: POP
18373: POP
// end ;
18374: PPOPN 5
18376: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
18377: LD_EXP 70
18381: PUSH
18382: LD_EXP 105
18386: AND
18387: IFFALSE 18481
18389: GO 18391
18391: DISABLE
18392: LD_INT 0
18394: PPUSH
18395: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
18396: LD_ADDR_VAR 0 2
18400: PUSH
18401: LD_INT 22
18403: PUSH
18404: LD_OWVAR 2
18408: PUSH
18409: EMPTY
18410: LIST
18411: LIST
18412: PUSH
18413: LD_INT 32
18415: PUSH
18416: LD_INT 1
18418: PUSH
18419: EMPTY
18420: LIST
18421: LIST
18422: PUSH
18423: LD_INT 21
18425: PUSH
18426: LD_INT 2
18428: PUSH
18429: EMPTY
18430: LIST
18431: LIST
18432: PUSH
18433: EMPTY
18434: LIST
18435: LIST
18436: LIST
18437: PPUSH
18438: CALL_OW 69
18442: ST_TO_ADDR
// if not tmp then
18443: LD_VAR 0 2
18447: NOT
18448: IFFALSE 18452
// exit ;
18450: GO 18481
// for i in tmp do
18452: LD_ADDR_VAR 0 1
18456: PUSH
18457: LD_VAR 0 2
18461: PUSH
18462: FOR_IN
18463: IFFALSE 18479
// SetFuel ( i , 0 ) ;
18465: LD_VAR 0 1
18469: PPUSH
18470: LD_INT 0
18472: PPUSH
18473: CALL_OW 240
18477: GO 18462
18479: POP
18480: POP
// end ;
18481: PPOPN 2
18483: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
18484: LD_EXP 70
18488: PUSH
18489: LD_EXP 106
18493: AND
18494: IFFALSE 18560
18496: GO 18498
18498: DISABLE
18499: LD_INT 0
18501: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
18502: LD_ADDR_VAR 0 1
18506: PUSH
18507: LD_INT 22
18509: PUSH
18510: LD_OWVAR 2
18514: PUSH
18515: EMPTY
18516: LIST
18517: LIST
18518: PUSH
18519: LD_INT 30
18521: PUSH
18522: LD_INT 29
18524: PUSH
18525: EMPTY
18526: LIST
18527: LIST
18528: PUSH
18529: EMPTY
18530: LIST
18531: LIST
18532: PPUSH
18533: CALL_OW 69
18537: ST_TO_ADDR
// if not tmp then
18538: LD_VAR 0 1
18542: NOT
18543: IFFALSE 18547
// exit ;
18545: GO 18560
// DestroyUnit ( tmp [ 1 ] ) ;
18547: LD_VAR 0 1
18551: PUSH
18552: LD_INT 1
18554: ARRAY
18555: PPUSH
18556: CALL_OW 65
// end ;
18560: PPOPN 1
18562: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
18563: LD_EXP 70
18567: PUSH
18568: LD_EXP 108
18572: AND
18573: IFFALSE 18702
18575: GO 18577
18577: DISABLE
18578: LD_INT 0
18580: PPUSH
// begin uc_side := 0 ;
18581: LD_ADDR_OWVAR 20
18585: PUSH
18586: LD_INT 0
18588: ST_TO_ADDR
// uc_nation := nation_arabian ;
18589: LD_ADDR_OWVAR 21
18593: PUSH
18594: LD_INT 2
18596: ST_TO_ADDR
// hc_gallery :=  ;
18597: LD_ADDR_OWVAR 33
18601: PUSH
18602: LD_STRING 
18604: ST_TO_ADDR
// hc_name :=  ;
18605: LD_ADDR_OWVAR 26
18609: PUSH
18610: LD_STRING 
18612: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
18613: LD_INT 1
18615: PPUSH
18616: LD_INT 11
18618: PPUSH
18619: LD_INT 10
18621: PPUSH
18622: CALL_OW 380
// un := CreateHuman ;
18626: LD_ADDR_VAR 0 1
18630: PUSH
18631: CALL_OW 44
18635: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18636: LD_VAR 0 1
18640: PPUSH
18641: LD_INT 1
18643: PPUSH
18644: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
18648: LD_INT 35
18650: PPUSH
18651: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
18655: LD_VAR 0 1
18659: PPUSH
18660: LD_INT 22
18662: PUSH
18663: LD_OWVAR 2
18667: PUSH
18668: EMPTY
18669: LIST
18670: LIST
18671: PPUSH
18672: CALL_OW 69
18676: PPUSH
18677: LD_VAR 0 1
18681: PPUSH
18682: CALL_OW 74
18686: PPUSH
18687: CALL_OW 115
// until IsDead ( un ) ;
18691: LD_VAR 0 1
18695: PPUSH
18696: CALL_OW 301
18700: IFFALSE 18648
// end ;
18702: PPOPN 1
18704: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
18705: LD_EXP 70
18709: PUSH
18710: LD_EXP 110
18714: AND
18715: IFFALSE 18727
18717: GO 18719
18719: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
18720: LD_STRING earthquake(getX(game), 0, 32)
18722: PPUSH
18723: CALL_OW 559
18727: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
18728: LD_EXP 70
18732: PUSH
18733: LD_EXP 111
18737: AND
18738: IFFALSE 18829
18740: GO 18742
18742: DISABLE
18743: LD_INT 0
18745: PPUSH
// begin enable ;
18746: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
18747: LD_ADDR_VAR 0 1
18751: PUSH
18752: LD_INT 22
18754: PUSH
18755: LD_OWVAR 2
18759: PUSH
18760: EMPTY
18761: LIST
18762: LIST
18763: PUSH
18764: LD_INT 21
18766: PUSH
18767: LD_INT 2
18769: PUSH
18770: EMPTY
18771: LIST
18772: LIST
18773: PUSH
18774: LD_INT 33
18776: PUSH
18777: LD_INT 3
18779: PUSH
18780: EMPTY
18781: LIST
18782: LIST
18783: PUSH
18784: EMPTY
18785: LIST
18786: LIST
18787: LIST
18788: PPUSH
18789: CALL_OW 69
18793: ST_TO_ADDR
// if not tmp then
18794: LD_VAR 0 1
18798: NOT
18799: IFFALSE 18803
// exit ;
18801: GO 18829
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
18803: LD_VAR 0 1
18807: PUSH
18808: LD_INT 1
18810: PPUSH
18811: LD_VAR 0 1
18815: PPUSH
18816: CALL_OW 12
18820: ARRAY
18821: PPUSH
18822: LD_INT 1
18824: PPUSH
18825: CALL_OW 234
// end ;
18829: PPOPN 1
18831: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
18832: LD_EXP 70
18836: PUSH
18837: LD_EXP 112
18841: AND
18842: IFFALSE 18983
18844: GO 18846
18846: DISABLE
18847: LD_INT 0
18849: PPUSH
18850: PPUSH
18851: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18852: LD_ADDR_VAR 0 3
18856: PUSH
18857: LD_INT 22
18859: PUSH
18860: LD_OWVAR 2
18864: PUSH
18865: EMPTY
18866: LIST
18867: LIST
18868: PUSH
18869: LD_INT 25
18871: PUSH
18872: LD_INT 1
18874: PUSH
18875: EMPTY
18876: LIST
18877: LIST
18878: PUSH
18879: EMPTY
18880: LIST
18881: LIST
18882: PPUSH
18883: CALL_OW 69
18887: ST_TO_ADDR
// if not tmp then
18888: LD_VAR 0 3
18892: NOT
18893: IFFALSE 18897
// exit ;
18895: GO 18983
// un := tmp [ rand ( 1 , tmp ) ] ;
18897: LD_ADDR_VAR 0 2
18901: PUSH
18902: LD_VAR 0 3
18906: PUSH
18907: LD_INT 1
18909: PPUSH
18910: LD_VAR 0 3
18914: PPUSH
18915: CALL_OW 12
18919: ARRAY
18920: ST_TO_ADDR
// if Crawls ( un ) then
18921: LD_VAR 0 2
18925: PPUSH
18926: CALL_OW 318
18930: IFFALSE 18941
// ComWalk ( un ) ;
18932: LD_VAR 0 2
18936: PPUSH
18937: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
18941: LD_VAR 0 2
18945: PPUSH
18946: LD_INT 9
18948: PPUSH
18949: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
18953: LD_INT 28
18955: PPUSH
18956: LD_OWVAR 2
18960: PPUSH
18961: LD_INT 2
18963: PPUSH
18964: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
18968: LD_INT 29
18970: PPUSH
18971: LD_OWVAR 2
18975: PPUSH
18976: LD_INT 2
18978: PPUSH
18979: CALL_OW 322
// end ;
18983: PPOPN 3
18985: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
18986: LD_EXP 70
18990: PUSH
18991: LD_EXP 113
18995: AND
18996: IFFALSE 19107
18998: GO 19000
19000: DISABLE
19001: LD_INT 0
19003: PPUSH
19004: PPUSH
19005: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19006: LD_ADDR_VAR 0 3
19010: PUSH
19011: LD_INT 22
19013: PUSH
19014: LD_OWVAR 2
19018: PUSH
19019: EMPTY
19020: LIST
19021: LIST
19022: PUSH
19023: LD_INT 25
19025: PUSH
19026: LD_INT 1
19028: PUSH
19029: EMPTY
19030: LIST
19031: LIST
19032: PUSH
19033: EMPTY
19034: LIST
19035: LIST
19036: PPUSH
19037: CALL_OW 69
19041: ST_TO_ADDR
// if not tmp then
19042: LD_VAR 0 3
19046: NOT
19047: IFFALSE 19051
// exit ;
19049: GO 19107
// un := tmp [ rand ( 1 , tmp ) ] ;
19051: LD_ADDR_VAR 0 2
19055: PUSH
19056: LD_VAR 0 3
19060: PUSH
19061: LD_INT 1
19063: PPUSH
19064: LD_VAR 0 3
19068: PPUSH
19069: CALL_OW 12
19073: ARRAY
19074: ST_TO_ADDR
// if Crawls ( un ) then
19075: LD_VAR 0 2
19079: PPUSH
19080: CALL_OW 318
19084: IFFALSE 19095
// ComWalk ( un ) ;
19086: LD_VAR 0 2
19090: PPUSH
19091: CALL_OW 138
// SetClass ( un , class_mortar ) ;
19095: LD_VAR 0 2
19099: PPUSH
19100: LD_INT 8
19102: PPUSH
19103: CALL_OW 336
// end ;
19107: PPOPN 3
19109: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
19110: LD_EXP 70
19114: PUSH
19115: LD_EXP 114
19119: AND
19120: IFFALSE 19264
19122: GO 19124
19124: DISABLE
19125: LD_INT 0
19127: PPUSH
19128: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
19129: LD_ADDR_VAR 0 2
19133: PUSH
19134: LD_INT 22
19136: PUSH
19137: LD_OWVAR 2
19141: PUSH
19142: EMPTY
19143: LIST
19144: LIST
19145: PUSH
19146: LD_INT 21
19148: PUSH
19149: LD_INT 2
19151: PUSH
19152: EMPTY
19153: LIST
19154: LIST
19155: PUSH
19156: LD_INT 2
19158: PUSH
19159: LD_INT 34
19161: PUSH
19162: LD_INT 12
19164: PUSH
19165: EMPTY
19166: LIST
19167: LIST
19168: PUSH
19169: LD_INT 34
19171: PUSH
19172: LD_INT 51
19174: PUSH
19175: EMPTY
19176: LIST
19177: LIST
19178: PUSH
19179: LD_INT 34
19181: PUSH
19182: LD_INT 32
19184: PUSH
19185: EMPTY
19186: LIST
19187: LIST
19188: PUSH
19189: EMPTY
19190: LIST
19191: LIST
19192: LIST
19193: LIST
19194: PUSH
19195: EMPTY
19196: LIST
19197: LIST
19198: LIST
19199: PPUSH
19200: CALL_OW 69
19204: ST_TO_ADDR
// if not tmp then
19205: LD_VAR 0 2
19209: NOT
19210: IFFALSE 19214
// exit ;
19212: GO 19264
// for i in tmp do
19214: LD_ADDR_VAR 0 1
19218: PUSH
19219: LD_VAR 0 2
19223: PUSH
19224: FOR_IN
19225: IFFALSE 19262
// if GetCargo ( i , mat_artifact ) = 0 then
19227: LD_VAR 0 1
19231: PPUSH
19232: LD_INT 4
19234: PPUSH
19235: CALL_OW 289
19239: PUSH
19240: LD_INT 0
19242: EQUAL
19243: IFFALSE 19260
// SetCargo ( i , mat_siberit , 100 ) ;
19245: LD_VAR 0 1
19249: PPUSH
19250: LD_INT 3
19252: PPUSH
19253: LD_INT 100
19255: PPUSH
19256: CALL_OW 290
19260: GO 19224
19262: POP
19263: POP
// end ;
19264: PPOPN 2
19266: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
19267: LD_EXP 70
19271: PUSH
19272: LD_EXP 115
19276: AND
19277: IFFALSE 19460
19279: GO 19281
19281: DISABLE
19282: LD_INT 0
19284: PPUSH
19285: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19286: LD_ADDR_VAR 0 2
19290: PUSH
19291: LD_INT 22
19293: PUSH
19294: LD_OWVAR 2
19298: PUSH
19299: EMPTY
19300: LIST
19301: LIST
19302: PPUSH
19303: CALL_OW 69
19307: ST_TO_ADDR
// if not tmp then
19308: LD_VAR 0 2
19312: NOT
19313: IFFALSE 19317
// exit ;
19315: GO 19460
// for i := 1 to 2 do
19317: LD_ADDR_VAR 0 1
19321: PUSH
19322: DOUBLE
19323: LD_INT 1
19325: DEC
19326: ST_TO_ADDR
19327: LD_INT 2
19329: PUSH
19330: FOR_TO
19331: IFFALSE 19458
// begin uc_side := your_side ;
19333: LD_ADDR_OWVAR 20
19337: PUSH
19338: LD_OWVAR 2
19342: ST_TO_ADDR
// uc_nation := nation_american ;
19343: LD_ADDR_OWVAR 21
19347: PUSH
19348: LD_INT 1
19350: ST_TO_ADDR
// vc_chassis := us_morphling ;
19351: LD_ADDR_OWVAR 37
19355: PUSH
19356: LD_INT 5
19358: ST_TO_ADDR
// vc_engine := engine_siberite ;
19359: LD_ADDR_OWVAR 39
19363: PUSH
19364: LD_INT 3
19366: ST_TO_ADDR
// vc_control := control_computer ;
19367: LD_ADDR_OWVAR 38
19371: PUSH
19372: LD_INT 3
19374: ST_TO_ADDR
// vc_weapon := us_double_laser ;
19375: LD_ADDR_OWVAR 40
19379: PUSH
19380: LD_INT 10
19382: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
19383: LD_VAR 0 2
19387: PUSH
19388: LD_INT 1
19390: ARRAY
19391: PPUSH
19392: CALL_OW 310
19396: NOT
19397: IFFALSE 19444
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
19399: CALL_OW 45
19403: PPUSH
19404: LD_VAR 0 2
19408: PUSH
19409: LD_INT 1
19411: ARRAY
19412: PPUSH
19413: CALL_OW 250
19417: PPUSH
19418: LD_VAR 0 2
19422: PUSH
19423: LD_INT 1
19425: ARRAY
19426: PPUSH
19427: CALL_OW 251
19431: PPUSH
19432: LD_INT 12
19434: PPUSH
19435: LD_INT 1
19437: PPUSH
19438: CALL_OW 50
19442: GO 19456
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
19444: CALL_OW 45
19448: PPUSH
19449: LD_INT 1
19451: PPUSH
19452: CALL_OW 51
// end ;
19456: GO 19330
19458: POP
19459: POP
// end ;
19460: PPOPN 2
19462: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
19463: LD_EXP 70
19467: PUSH
19468: LD_EXP 116
19472: AND
19473: IFFALSE 19695
19475: GO 19477
19477: DISABLE
19478: LD_INT 0
19480: PPUSH
19481: PPUSH
19482: PPUSH
19483: PPUSH
19484: PPUSH
19485: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19486: LD_ADDR_VAR 0 6
19490: PUSH
19491: LD_INT 22
19493: PUSH
19494: LD_OWVAR 2
19498: PUSH
19499: EMPTY
19500: LIST
19501: LIST
19502: PUSH
19503: LD_INT 21
19505: PUSH
19506: LD_INT 1
19508: PUSH
19509: EMPTY
19510: LIST
19511: LIST
19512: PUSH
19513: LD_INT 3
19515: PUSH
19516: LD_INT 23
19518: PUSH
19519: LD_INT 0
19521: PUSH
19522: EMPTY
19523: LIST
19524: LIST
19525: PUSH
19526: EMPTY
19527: LIST
19528: LIST
19529: PUSH
19530: EMPTY
19531: LIST
19532: LIST
19533: LIST
19534: PPUSH
19535: CALL_OW 69
19539: ST_TO_ADDR
// if not tmp then
19540: LD_VAR 0 6
19544: NOT
19545: IFFALSE 19549
// exit ;
19547: GO 19695
// s1 := rand ( 1 , 4 ) ;
19549: LD_ADDR_VAR 0 2
19553: PUSH
19554: LD_INT 1
19556: PPUSH
19557: LD_INT 4
19559: PPUSH
19560: CALL_OW 12
19564: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
19565: LD_ADDR_VAR 0 4
19569: PUSH
19570: LD_VAR 0 6
19574: PUSH
19575: LD_INT 1
19577: ARRAY
19578: PPUSH
19579: LD_VAR 0 2
19583: PPUSH
19584: CALL_OW 259
19588: ST_TO_ADDR
// if s1 = 1 then
19589: LD_VAR 0 2
19593: PUSH
19594: LD_INT 1
19596: EQUAL
19597: IFFALSE 19617
// s2 := rand ( 2 , 4 ) else
19599: LD_ADDR_VAR 0 3
19603: PUSH
19604: LD_INT 2
19606: PPUSH
19607: LD_INT 4
19609: PPUSH
19610: CALL_OW 12
19614: ST_TO_ADDR
19615: GO 19625
// s2 := 1 ;
19617: LD_ADDR_VAR 0 3
19621: PUSH
19622: LD_INT 1
19624: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
19625: LD_ADDR_VAR 0 5
19629: PUSH
19630: LD_VAR 0 6
19634: PUSH
19635: LD_INT 1
19637: ARRAY
19638: PPUSH
19639: LD_VAR 0 3
19643: PPUSH
19644: CALL_OW 259
19648: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
19649: LD_VAR 0 6
19653: PUSH
19654: LD_INT 1
19656: ARRAY
19657: PPUSH
19658: LD_VAR 0 2
19662: PPUSH
19663: LD_VAR 0 5
19667: PPUSH
19668: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
19672: LD_VAR 0 6
19676: PUSH
19677: LD_INT 1
19679: ARRAY
19680: PPUSH
19681: LD_VAR 0 3
19685: PPUSH
19686: LD_VAR 0 4
19690: PPUSH
19691: CALL_OW 237
// end ;
19695: PPOPN 6
19697: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
19698: LD_EXP 70
19702: PUSH
19703: LD_EXP 117
19707: AND
19708: IFFALSE 19787
19710: GO 19712
19712: DISABLE
19713: LD_INT 0
19715: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
19716: LD_ADDR_VAR 0 1
19720: PUSH
19721: LD_INT 22
19723: PUSH
19724: LD_OWVAR 2
19728: PUSH
19729: EMPTY
19730: LIST
19731: LIST
19732: PUSH
19733: LD_INT 30
19735: PUSH
19736: LD_INT 3
19738: PUSH
19739: EMPTY
19740: LIST
19741: LIST
19742: PUSH
19743: EMPTY
19744: LIST
19745: LIST
19746: PPUSH
19747: CALL_OW 69
19751: ST_TO_ADDR
// if not tmp then
19752: LD_VAR 0 1
19756: NOT
19757: IFFALSE 19761
// exit ;
19759: GO 19787
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
19761: LD_VAR 0 1
19765: PUSH
19766: LD_INT 1
19768: PPUSH
19769: LD_VAR 0 1
19773: PPUSH
19774: CALL_OW 12
19778: ARRAY
19779: PPUSH
19780: LD_INT 1
19782: PPUSH
19783: CALL_OW 234
// end ;
19787: PPOPN 1
19789: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
19790: LD_EXP 70
19794: PUSH
19795: LD_EXP 118
19799: AND
19800: IFFALSE 19912
19802: GO 19804
19804: DISABLE
19805: LD_INT 0
19807: PPUSH
19808: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
19809: LD_ADDR_VAR 0 2
19813: PUSH
19814: LD_INT 22
19816: PUSH
19817: LD_OWVAR 2
19821: PUSH
19822: EMPTY
19823: LIST
19824: LIST
19825: PUSH
19826: LD_INT 2
19828: PUSH
19829: LD_INT 30
19831: PUSH
19832: LD_INT 27
19834: PUSH
19835: EMPTY
19836: LIST
19837: LIST
19838: PUSH
19839: LD_INT 30
19841: PUSH
19842: LD_INT 26
19844: PUSH
19845: EMPTY
19846: LIST
19847: LIST
19848: PUSH
19849: LD_INT 30
19851: PUSH
19852: LD_INT 28
19854: PUSH
19855: EMPTY
19856: LIST
19857: LIST
19858: PUSH
19859: EMPTY
19860: LIST
19861: LIST
19862: LIST
19863: LIST
19864: PUSH
19865: EMPTY
19866: LIST
19867: LIST
19868: PPUSH
19869: CALL_OW 69
19873: ST_TO_ADDR
// if not tmp then
19874: LD_VAR 0 2
19878: NOT
19879: IFFALSE 19883
// exit ;
19881: GO 19912
// for i in tmp do
19883: LD_ADDR_VAR 0 1
19887: PUSH
19888: LD_VAR 0 2
19892: PUSH
19893: FOR_IN
19894: IFFALSE 19910
// SetLives ( i , 1 ) ;
19896: LD_VAR 0 1
19900: PPUSH
19901: LD_INT 1
19903: PPUSH
19904: CALL_OW 234
19908: GO 19893
19910: POP
19911: POP
// end ;
19912: PPOPN 2
19914: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
19915: LD_EXP 70
19919: PUSH
19920: LD_EXP 119
19924: AND
19925: IFFALSE 20212
19927: GO 19929
19929: DISABLE
19930: LD_INT 0
19932: PPUSH
19933: PPUSH
19934: PPUSH
// begin i := rand ( 1 , 7 ) ;
19935: LD_ADDR_VAR 0 1
19939: PUSH
19940: LD_INT 1
19942: PPUSH
19943: LD_INT 7
19945: PPUSH
19946: CALL_OW 12
19950: ST_TO_ADDR
// case i of 1 :
19951: LD_VAR 0 1
19955: PUSH
19956: LD_INT 1
19958: DOUBLE
19959: EQUAL
19960: IFTRUE 19964
19962: GO 19974
19964: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
19965: LD_STRING earthquake(getX(game), 0, 32)
19967: PPUSH
19968: CALL_OW 559
19972: GO 20212
19974: LD_INT 2
19976: DOUBLE
19977: EQUAL
19978: IFTRUE 19982
19980: GO 19996
19982: POP
// begin ToLua ( displayStucuk(); ) ;
19983: LD_STRING displayStucuk();
19985: PPUSH
19986: CALL_OW 559
// ResetFog ;
19990: CALL_OW 335
// end ; 3 :
19994: GO 20212
19996: LD_INT 3
19998: DOUBLE
19999: EQUAL
20000: IFTRUE 20004
20002: GO 20108
20004: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20005: LD_ADDR_VAR 0 2
20009: PUSH
20010: LD_INT 22
20012: PUSH
20013: LD_OWVAR 2
20017: PUSH
20018: EMPTY
20019: LIST
20020: LIST
20021: PUSH
20022: LD_INT 25
20024: PUSH
20025: LD_INT 1
20027: PUSH
20028: EMPTY
20029: LIST
20030: LIST
20031: PUSH
20032: EMPTY
20033: LIST
20034: LIST
20035: PPUSH
20036: CALL_OW 69
20040: ST_TO_ADDR
// if not tmp then
20041: LD_VAR 0 2
20045: NOT
20046: IFFALSE 20050
// exit ;
20048: GO 20212
// un := tmp [ rand ( 1 , tmp ) ] ;
20050: LD_ADDR_VAR 0 3
20054: PUSH
20055: LD_VAR 0 2
20059: PUSH
20060: LD_INT 1
20062: PPUSH
20063: LD_VAR 0 2
20067: PPUSH
20068: CALL_OW 12
20072: ARRAY
20073: ST_TO_ADDR
// if Crawls ( un ) then
20074: LD_VAR 0 3
20078: PPUSH
20079: CALL_OW 318
20083: IFFALSE 20094
// ComWalk ( un ) ;
20085: LD_VAR 0 3
20089: PPUSH
20090: CALL_OW 138
// SetClass ( un , class_mortar ) ;
20094: LD_VAR 0 3
20098: PPUSH
20099: LD_INT 8
20101: PPUSH
20102: CALL_OW 336
// end ; 4 :
20106: GO 20212
20108: LD_INT 4
20110: DOUBLE
20111: EQUAL
20112: IFTRUE 20116
20114: GO 20190
20116: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
20117: LD_ADDR_VAR 0 2
20121: PUSH
20122: LD_INT 22
20124: PUSH
20125: LD_OWVAR 2
20129: PUSH
20130: EMPTY
20131: LIST
20132: LIST
20133: PUSH
20134: LD_INT 30
20136: PUSH
20137: LD_INT 29
20139: PUSH
20140: EMPTY
20141: LIST
20142: LIST
20143: PUSH
20144: EMPTY
20145: LIST
20146: LIST
20147: PPUSH
20148: CALL_OW 69
20152: ST_TO_ADDR
// if not tmp then
20153: LD_VAR 0 2
20157: NOT
20158: IFFALSE 20162
// exit ;
20160: GO 20212
// CenterNowOnUnits ( tmp [ 1 ] ) ;
20162: LD_VAR 0 2
20166: PUSH
20167: LD_INT 1
20169: ARRAY
20170: PPUSH
20171: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
20175: LD_VAR 0 2
20179: PUSH
20180: LD_INT 1
20182: ARRAY
20183: PPUSH
20184: CALL_OW 65
// end ; 5 .. 7 :
20188: GO 20212
20190: LD_INT 5
20192: DOUBLE
20193: GREATEREQUAL
20194: IFFALSE 20202
20196: LD_INT 7
20198: DOUBLE
20199: LESSEQUAL
20200: IFTRUE 20204
20202: GO 20211
20204: POP
// StreamSibBomb ; end ;
20205: CALL 16449 0 0
20209: GO 20212
20211: POP
// end ;
20212: PPOPN 3
20214: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
20215: LD_EXP 70
20219: PUSH
20220: LD_EXP 120
20224: AND
20225: IFFALSE 20381
20227: GO 20229
20229: DISABLE
20230: LD_INT 0
20232: PPUSH
20233: PPUSH
20234: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
20235: LD_ADDR_VAR 0 2
20239: PUSH
20240: LD_INT 81
20242: PUSH
20243: LD_OWVAR 2
20247: PUSH
20248: EMPTY
20249: LIST
20250: LIST
20251: PUSH
20252: LD_INT 2
20254: PUSH
20255: LD_INT 21
20257: PUSH
20258: LD_INT 1
20260: PUSH
20261: EMPTY
20262: LIST
20263: LIST
20264: PUSH
20265: LD_INT 21
20267: PUSH
20268: LD_INT 2
20270: PUSH
20271: EMPTY
20272: LIST
20273: LIST
20274: PUSH
20275: EMPTY
20276: LIST
20277: LIST
20278: LIST
20279: PUSH
20280: EMPTY
20281: LIST
20282: LIST
20283: PPUSH
20284: CALL_OW 69
20288: ST_TO_ADDR
// if not tmp then
20289: LD_VAR 0 2
20293: NOT
20294: IFFALSE 20298
// exit ;
20296: GO 20381
// p := 0 ;
20298: LD_ADDR_VAR 0 3
20302: PUSH
20303: LD_INT 0
20305: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
20306: LD_INT 35
20308: PPUSH
20309: CALL_OW 67
// p := p + 1 ;
20313: LD_ADDR_VAR 0 3
20317: PUSH
20318: LD_VAR 0 3
20322: PUSH
20323: LD_INT 1
20325: PLUS
20326: ST_TO_ADDR
// for i in tmp do
20327: LD_ADDR_VAR 0 1
20331: PUSH
20332: LD_VAR 0 2
20336: PUSH
20337: FOR_IN
20338: IFFALSE 20369
// if GetLives ( i ) < 1000 then
20340: LD_VAR 0 1
20344: PPUSH
20345: CALL_OW 256
20349: PUSH
20350: LD_INT 1000
20352: LESS
20353: IFFALSE 20367
// SetLives ( i , 1000 ) ;
20355: LD_VAR 0 1
20359: PPUSH
20360: LD_INT 1000
20362: PPUSH
20363: CALL_OW 234
20367: GO 20337
20369: POP
20370: POP
// until p > 20 ;
20371: LD_VAR 0 3
20375: PUSH
20376: LD_INT 20
20378: GREATER
20379: IFFALSE 20306
// end ;
20381: PPOPN 3
20383: END
// every 0 0$1 trigger StreamModeActive and sTime do
20384: LD_EXP 70
20388: PUSH
20389: LD_EXP 121
20393: AND
20394: IFFALSE 20429
20396: GO 20398
20398: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
20399: LD_INT 28
20401: PPUSH
20402: LD_OWVAR 2
20406: PPUSH
20407: LD_INT 2
20409: PPUSH
20410: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
20414: LD_INT 30
20416: PPUSH
20417: LD_OWVAR 2
20421: PPUSH
20422: LD_INT 2
20424: PPUSH
20425: CALL_OW 322
// end ;
20429: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
20430: LD_EXP 70
20434: PUSH
20435: LD_EXP 122
20439: AND
20440: IFFALSE 20561
20442: GO 20444
20444: DISABLE
20445: LD_INT 0
20447: PPUSH
20448: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20449: LD_ADDR_VAR 0 2
20453: PUSH
20454: LD_INT 22
20456: PUSH
20457: LD_OWVAR 2
20461: PUSH
20462: EMPTY
20463: LIST
20464: LIST
20465: PUSH
20466: LD_INT 21
20468: PUSH
20469: LD_INT 1
20471: PUSH
20472: EMPTY
20473: LIST
20474: LIST
20475: PUSH
20476: LD_INT 3
20478: PUSH
20479: LD_INT 23
20481: PUSH
20482: LD_INT 0
20484: PUSH
20485: EMPTY
20486: LIST
20487: LIST
20488: PUSH
20489: EMPTY
20490: LIST
20491: LIST
20492: PUSH
20493: EMPTY
20494: LIST
20495: LIST
20496: LIST
20497: PPUSH
20498: CALL_OW 69
20502: ST_TO_ADDR
// if not tmp then
20503: LD_VAR 0 2
20507: NOT
20508: IFFALSE 20512
// exit ;
20510: GO 20561
// for i in tmp do
20512: LD_ADDR_VAR 0 1
20516: PUSH
20517: LD_VAR 0 2
20521: PUSH
20522: FOR_IN
20523: IFFALSE 20559
// begin if Crawls ( i ) then
20525: LD_VAR 0 1
20529: PPUSH
20530: CALL_OW 318
20534: IFFALSE 20545
// ComWalk ( i ) ;
20536: LD_VAR 0 1
20540: PPUSH
20541: CALL_OW 138
// SetClass ( i , 2 ) ;
20545: LD_VAR 0 1
20549: PPUSH
20550: LD_INT 2
20552: PPUSH
20553: CALL_OW 336
// end ;
20557: GO 20522
20559: POP
20560: POP
// end ;
20561: PPOPN 2
20563: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
20564: LD_EXP 70
20568: PUSH
20569: LD_EXP 123
20573: AND
20574: IFFALSE 20862
20576: GO 20578
20578: DISABLE
20579: LD_INT 0
20581: PPUSH
20582: PPUSH
20583: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
20584: LD_OWVAR 2
20588: PPUSH
20589: LD_INT 9
20591: PPUSH
20592: LD_INT 1
20594: PPUSH
20595: LD_INT 1
20597: PPUSH
20598: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
20602: LD_INT 9
20604: PPUSH
20605: LD_OWVAR 2
20609: PPUSH
20610: CALL_OW 343
// uc_side := 9 ;
20614: LD_ADDR_OWVAR 20
20618: PUSH
20619: LD_INT 9
20621: ST_TO_ADDR
// uc_nation := 2 ;
20622: LD_ADDR_OWVAR 21
20626: PUSH
20627: LD_INT 2
20629: ST_TO_ADDR
// hc_name := Dark Warrior ;
20630: LD_ADDR_OWVAR 26
20634: PUSH
20635: LD_STRING Dark Warrior
20637: ST_TO_ADDR
// hc_gallery :=  ;
20638: LD_ADDR_OWVAR 33
20642: PUSH
20643: LD_STRING 
20645: ST_TO_ADDR
// hc_noskilllimit := true ;
20646: LD_ADDR_OWVAR 76
20650: PUSH
20651: LD_INT 1
20653: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
20654: LD_ADDR_OWVAR 31
20658: PUSH
20659: LD_INT 30
20661: PUSH
20662: LD_INT 30
20664: PUSH
20665: LD_INT 30
20667: PUSH
20668: LD_INT 30
20670: PUSH
20671: EMPTY
20672: LIST
20673: LIST
20674: LIST
20675: LIST
20676: ST_TO_ADDR
// un := CreateHuman ;
20677: LD_ADDR_VAR 0 3
20681: PUSH
20682: CALL_OW 44
20686: ST_TO_ADDR
// hc_noskilllimit := false ;
20687: LD_ADDR_OWVAR 76
20691: PUSH
20692: LD_INT 0
20694: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20695: LD_VAR 0 3
20699: PPUSH
20700: LD_INT 1
20702: PPUSH
20703: CALL_OW 51
// ToLua ( playRanger() ) ;
20707: LD_STRING playRanger()
20709: PPUSH
20710: CALL_OW 559
// p := 0 ;
20714: LD_ADDR_VAR 0 2
20718: PUSH
20719: LD_INT 0
20721: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
20722: LD_INT 35
20724: PPUSH
20725: CALL_OW 67
// p := p + 1 ;
20729: LD_ADDR_VAR 0 2
20733: PUSH
20734: LD_VAR 0 2
20738: PUSH
20739: LD_INT 1
20741: PLUS
20742: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
20743: LD_VAR 0 3
20747: PPUSH
20748: CALL_OW 256
20752: PUSH
20753: LD_INT 1000
20755: LESS
20756: IFFALSE 20770
// SetLives ( un , 1000 ) ;
20758: LD_VAR 0 3
20762: PPUSH
20763: LD_INT 1000
20765: PPUSH
20766: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
20770: LD_VAR 0 3
20774: PPUSH
20775: LD_INT 81
20777: PUSH
20778: LD_OWVAR 2
20782: PUSH
20783: EMPTY
20784: LIST
20785: LIST
20786: PUSH
20787: LD_INT 91
20789: PUSH
20790: LD_VAR 0 3
20794: PUSH
20795: LD_INT 30
20797: PUSH
20798: EMPTY
20799: LIST
20800: LIST
20801: LIST
20802: PUSH
20803: EMPTY
20804: LIST
20805: LIST
20806: PPUSH
20807: CALL_OW 69
20811: PPUSH
20812: LD_VAR 0 3
20816: PPUSH
20817: CALL_OW 74
20821: PPUSH
20822: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
20826: LD_VAR 0 2
20830: PUSH
20831: LD_INT 80
20833: GREATER
20834: PUSH
20835: LD_VAR 0 3
20839: PPUSH
20840: CALL_OW 301
20844: OR
20845: IFFALSE 20722
// if un then
20847: LD_VAR 0 3
20851: IFFALSE 20862
// RemoveUnit ( un ) ;
20853: LD_VAR 0 3
20857: PPUSH
20858: CALL_OW 64
// end ;
20862: PPOPN 3
20864: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
20865: LD_EXP 124
20869: IFFALSE 20985
20871: GO 20873
20873: DISABLE
20874: LD_INT 0
20876: PPUSH
20877: PPUSH
20878: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
20879: LD_ADDR_VAR 0 2
20883: PUSH
20884: LD_INT 81
20886: PUSH
20887: LD_OWVAR 2
20891: PUSH
20892: EMPTY
20893: LIST
20894: LIST
20895: PUSH
20896: LD_INT 21
20898: PUSH
20899: LD_INT 1
20901: PUSH
20902: EMPTY
20903: LIST
20904: LIST
20905: PUSH
20906: EMPTY
20907: LIST
20908: LIST
20909: PPUSH
20910: CALL_OW 69
20914: ST_TO_ADDR
// ToLua ( playComputer() ) ;
20915: LD_STRING playComputer()
20917: PPUSH
20918: CALL_OW 559
// if not tmp then
20922: LD_VAR 0 2
20926: NOT
20927: IFFALSE 20931
// exit ;
20929: GO 20985
// for i in tmp do
20931: LD_ADDR_VAR 0 1
20935: PUSH
20936: LD_VAR 0 2
20940: PUSH
20941: FOR_IN
20942: IFFALSE 20983
// for j := 1 to 4 do
20944: LD_ADDR_VAR 0 3
20948: PUSH
20949: DOUBLE
20950: LD_INT 1
20952: DEC
20953: ST_TO_ADDR
20954: LD_INT 4
20956: PUSH
20957: FOR_TO
20958: IFFALSE 20979
// SetSkill ( i , j , 10 ) ;
20960: LD_VAR 0 1
20964: PPUSH
20965: LD_VAR 0 3
20969: PPUSH
20970: LD_INT 10
20972: PPUSH
20973: CALL_OW 237
20977: GO 20957
20979: POP
20980: POP
20981: GO 20941
20983: POP
20984: POP
// end ;
20985: PPOPN 3
20987: END
// every 0 0$1 trigger s30 do var i , tmp ;
20988: LD_EXP 125
20992: IFFALSE 21061
20994: GO 20996
20996: DISABLE
20997: LD_INT 0
20999: PPUSH
21000: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21001: LD_ADDR_VAR 0 2
21005: PUSH
21006: LD_INT 22
21008: PUSH
21009: LD_OWVAR 2
21013: PUSH
21014: EMPTY
21015: LIST
21016: LIST
21017: PPUSH
21018: CALL_OW 69
21022: ST_TO_ADDR
// if not tmp then
21023: LD_VAR 0 2
21027: NOT
21028: IFFALSE 21032
// exit ;
21030: GO 21061
// for i in tmp do
21032: LD_ADDR_VAR 0 1
21036: PUSH
21037: LD_VAR 0 2
21041: PUSH
21042: FOR_IN
21043: IFFALSE 21059
// SetLives ( i , 300 ) ;
21045: LD_VAR 0 1
21049: PPUSH
21050: LD_INT 300
21052: PPUSH
21053: CALL_OW 234
21057: GO 21042
21059: POP
21060: POP
// end ;
21061: PPOPN 2
21063: END
// every 0 0$1 trigger s60 do var i , tmp ;
21064: LD_EXP 126
21068: IFFALSE 21137
21070: GO 21072
21072: DISABLE
21073: LD_INT 0
21075: PPUSH
21076: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21077: LD_ADDR_VAR 0 2
21081: PUSH
21082: LD_INT 22
21084: PUSH
21085: LD_OWVAR 2
21089: PUSH
21090: EMPTY
21091: LIST
21092: LIST
21093: PPUSH
21094: CALL_OW 69
21098: ST_TO_ADDR
// if not tmp then
21099: LD_VAR 0 2
21103: NOT
21104: IFFALSE 21108
// exit ;
21106: GO 21137
// for i in tmp do
21108: LD_ADDR_VAR 0 1
21112: PUSH
21113: LD_VAR 0 2
21117: PUSH
21118: FOR_IN
21119: IFFALSE 21135
// SetLives ( i , 600 ) ;
21121: LD_VAR 0 1
21125: PPUSH
21126: LD_INT 600
21128: PPUSH
21129: CALL_OW 234
21133: GO 21118
21135: POP
21136: POP
// end ;
21137: PPOPN 2
21139: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
21140: LD_INT 0
21142: PPUSH
// case cmd of 301 :
21143: LD_VAR 0 1
21147: PUSH
21148: LD_INT 301
21150: DOUBLE
21151: EQUAL
21152: IFTRUE 21156
21154: GO 21188
21156: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
21157: LD_VAR 0 6
21161: PPUSH
21162: LD_VAR 0 7
21166: PPUSH
21167: LD_VAR 0 8
21171: PPUSH
21172: LD_VAR 0 4
21176: PPUSH
21177: LD_VAR 0 5
21181: PPUSH
21182: CALL 22389 0 5
21186: GO 21309
21188: LD_INT 302
21190: DOUBLE
21191: EQUAL
21192: IFTRUE 21196
21194: GO 21233
21196: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
21197: LD_VAR 0 6
21201: PPUSH
21202: LD_VAR 0 7
21206: PPUSH
21207: LD_VAR 0 8
21211: PPUSH
21212: LD_VAR 0 9
21216: PPUSH
21217: LD_VAR 0 4
21221: PPUSH
21222: LD_VAR 0 5
21226: PPUSH
21227: CALL 22480 0 6
21231: GO 21309
21233: LD_INT 303
21235: DOUBLE
21236: EQUAL
21237: IFTRUE 21241
21239: GO 21278
21241: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
21242: LD_VAR 0 6
21246: PPUSH
21247: LD_VAR 0 7
21251: PPUSH
21252: LD_VAR 0 8
21256: PPUSH
21257: LD_VAR 0 9
21261: PPUSH
21262: LD_VAR 0 4
21266: PPUSH
21267: LD_VAR 0 5
21271: PPUSH
21272: CALL 21314 0 6
21276: GO 21309
21278: LD_INT 304
21280: DOUBLE
21281: EQUAL
21282: IFTRUE 21286
21284: GO 21308
21286: POP
// hHackTeleport ( unit , x , y ) ; end ;
21287: LD_VAR 0 2
21291: PPUSH
21292: LD_VAR 0 4
21296: PPUSH
21297: LD_VAR 0 5
21301: PPUSH
21302: CALL 23073 0 3
21306: GO 21309
21308: POP
// end ;
21309: LD_VAR 0 12
21313: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
21314: LD_INT 0
21316: PPUSH
21317: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
21318: LD_VAR 0 1
21322: PUSH
21323: LD_INT 1
21325: LESS
21326: PUSH
21327: LD_VAR 0 1
21331: PUSH
21332: LD_INT 3
21334: GREATER
21335: OR
21336: PUSH
21337: LD_VAR 0 5
21341: PPUSH
21342: LD_VAR 0 6
21346: PPUSH
21347: CALL_OW 428
21351: OR
21352: IFFALSE 21356
// exit ;
21354: GO 22076
// uc_side := your_side ;
21356: LD_ADDR_OWVAR 20
21360: PUSH
21361: LD_OWVAR 2
21365: ST_TO_ADDR
// uc_nation := nation ;
21366: LD_ADDR_OWVAR 21
21370: PUSH
21371: LD_VAR 0 1
21375: ST_TO_ADDR
// bc_level = 1 ;
21376: LD_ADDR_OWVAR 43
21380: PUSH
21381: LD_INT 1
21383: ST_TO_ADDR
// case btype of 1 :
21384: LD_VAR 0 2
21388: PUSH
21389: LD_INT 1
21391: DOUBLE
21392: EQUAL
21393: IFTRUE 21397
21395: GO 21408
21397: POP
// bc_type := b_depot ; 2 :
21398: LD_ADDR_OWVAR 42
21402: PUSH
21403: LD_INT 0
21405: ST_TO_ADDR
21406: GO 22020
21408: LD_INT 2
21410: DOUBLE
21411: EQUAL
21412: IFTRUE 21416
21414: GO 21427
21416: POP
// bc_type := b_warehouse ; 3 :
21417: LD_ADDR_OWVAR 42
21421: PUSH
21422: LD_INT 1
21424: ST_TO_ADDR
21425: GO 22020
21427: LD_INT 3
21429: DOUBLE
21430: EQUAL
21431: IFTRUE 21435
21433: GO 21446
21435: POP
// bc_type := b_lab ; 4 .. 9 :
21436: LD_ADDR_OWVAR 42
21440: PUSH
21441: LD_INT 6
21443: ST_TO_ADDR
21444: GO 22020
21446: LD_INT 4
21448: DOUBLE
21449: GREATEREQUAL
21450: IFFALSE 21458
21452: LD_INT 9
21454: DOUBLE
21455: LESSEQUAL
21456: IFTRUE 21460
21458: GO 21512
21460: POP
// begin bc_type := b_lab_half ;
21461: LD_ADDR_OWVAR 42
21465: PUSH
21466: LD_INT 7
21468: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
21469: LD_ADDR_OWVAR 44
21473: PUSH
21474: LD_INT 10
21476: PUSH
21477: LD_INT 11
21479: PUSH
21480: LD_INT 12
21482: PUSH
21483: LD_INT 15
21485: PUSH
21486: LD_INT 14
21488: PUSH
21489: LD_INT 13
21491: PUSH
21492: EMPTY
21493: LIST
21494: LIST
21495: LIST
21496: LIST
21497: LIST
21498: LIST
21499: PUSH
21500: LD_VAR 0 2
21504: PUSH
21505: LD_INT 3
21507: MINUS
21508: ARRAY
21509: ST_TO_ADDR
// end ; 10 .. 13 :
21510: GO 22020
21512: LD_INT 10
21514: DOUBLE
21515: GREATEREQUAL
21516: IFFALSE 21524
21518: LD_INT 13
21520: DOUBLE
21521: LESSEQUAL
21522: IFTRUE 21526
21524: GO 21603
21526: POP
// begin bc_type := b_lab_full ;
21527: LD_ADDR_OWVAR 42
21531: PUSH
21532: LD_INT 8
21534: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
21535: LD_ADDR_OWVAR 44
21539: PUSH
21540: LD_INT 10
21542: PUSH
21543: LD_INT 12
21545: PUSH
21546: LD_INT 14
21548: PUSH
21549: LD_INT 13
21551: PUSH
21552: EMPTY
21553: LIST
21554: LIST
21555: LIST
21556: LIST
21557: PUSH
21558: LD_VAR 0 2
21562: PUSH
21563: LD_INT 9
21565: MINUS
21566: ARRAY
21567: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
21568: LD_ADDR_OWVAR 45
21572: PUSH
21573: LD_INT 11
21575: PUSH
21576: LD_INT 15
21578: PUSH
21579: LD_INT 12
21581: PUSH
21582: LD_INT 15
21584: PUSH
21585: EMPTY
21586: LIST
21587: LIST
21588: LIST
21589: LIST
21590: PUSH
21591: LD_VAR 0 2
21595: PUSH
21596: LD_INT 9
21598: MINUS
21599: ARRAY
21600: ST_TO_ADDR
// end ; 14 :
21601: GO 22020
21603: LD_INT 14
21605: DOUBLE
21606: EQUAL
21607: IFTRUE 21611
21609: GO 21622
21611: POP
// bc_type := b_workshop ; 15 :
21612: LD_ADDR_OWVAR 42
21616: PUSH
21617: LD_INT 2
21619: ST_TO_ADDR
21620: GO 22020
21622: LD_INT 15
21624: DOUBLE
21625: EQUAL
21626: IFTRUE 21630
21628: GO 21641
21630: POP
// bc_type := b_factory ; 16 :
21631: LD_ADDR_OWVAR 42
21635: PUSH
21636: LD_INT 3
21638: ST_TO_ADDR
21639: GO 22020
21641: LD_INT 16
21643: DOUBLE
21644: EQUAL
21645: IFTRUE 21649
21647: GO 21660
21649: POP
// bc_type := b_ext_gun ; 17 :
21650: LD_ADDR_OWVAR 42
21654: PUSH
21655: LD_INT 17
21657: ST_TO_ADDR
21658: GO 22020
21660: LD_INT 17
21662: DOUBLE
21663: EQUAL
21664: IFTRUE 21668
21666: GO 21696
21668: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
21669: LD_ADDR_OWVAR 42
21673: PUSH
21674: LD_INT 19
21676: PUSH
21677: LD_INT 23
21679: PUSH
21680: LD_INT 19
21682: PUSH
21683: EMPTY
21684: LIST
21685: LIST
21686: LIST
21687: PUSH
21688: LD_VAR 0 1
21692: ARRAY
21693: ST_TO_ADDR
21694: GO 22020
21696: LD_INT 18
21698: DOUBLE
21699: EQUAL
21700: IFTRUE 21704
21702: GO 21715
21704: POP
// bc_type := b_ext_radar ; 19 :
21705: LD_ADDR_OWVAR 42
21709: PUSH
21710: LD_INT 20
21712: ST_TO_ADDR
21713: GO 22020
21715: LD_INT 19
21717: DOUBLE
21718: EQUAL
21719: IFTRUE 21723
21721: GO 21734
21723: POP
// bc_type := b_ext_radio ; 20 :
21724: LD_ADDR_OWVAR 42
21728: PUSH
21729: LD_INT 22
21731: ST_TO_ADDR
21732: GO 22020
21734: LD_INT 20
21736: DOUBLE
21737: EQUAL
21738: IFTRUE 21742
21740: GO 21753
21742: POP
// bc_type := b_ext_siberium ; 21 :
21743: LD_ADDR_OWVAR 42
21747: PUSH
21748: LD_INT 21
21750: ST_TO_ADDR
21751: GO 22020
21753: LD_INT 21
21755: DOUBLE
21756: EQUAL
21757: IFTRUE 21761
21759: GO 21772
21761: POP
// bc_type := b_ext_computer ; 22 :
21762: LD_ADDR_OWVAR 42
21766: PUSH
21767: LD_INT 24
21769: ST_TO_ADDR
21770: GO 22020
21772: LD_INT 22
21774: DOUBLE
21775: EQUAL
21776: IFTRUE 21780
21778: GO 21791
21780: POP
// bc_type := b_ext_track ; 23 :
21781: LD_ADDR_OWVAR 42
21785: PUSH
21786: LD_INT 16
21788: ST_TO_ADDR
21789: GO 22020
21791: LD_INT 23
21793: DOUBLE
21794: EQUAL
21795: IFTRUE 21799
21797: GO 21810
21799: POP
// bc_type := b_ext_laser ; 24 :
21800: LD_ADDR_OWVAR 42
21804: PUSH
21805: LD_INT 25
21807: ST_TO_ADDR
21808: GO 22020
21810: LD_INT 24
21812: DOUBLE
21813: EQUAL
21814: IFTRUE 21818
21816: GO 21829
21818: POP
// bc_type := b_control_tower ; 25 :
21819: LD_ADDR_OWVAR 42
21823: PUSH
21824: LD_INT 36
21826: ST_TO_ADDR
21827: GO 22020
21829: LD_INT 25
21831: DOUBLE
21832: EQUAL
21833: IFTRUE 21837
21835: GO 21848
21837: POP
// bc_type := b_breastwork ; 26 :
21838: LD_ADDR_OWVAR 42
21842: PUSH
21843: LD_INT 31
21845: ST_TO_ADDR
21846: GO 22020
21848: LD_INT 26
21850: DOUBLE
21851: EQUAL
21852: IFTRUE 21856
21854: GO 21867
21856: POP
// bc_type := b_bunker ; 27 :
21857: LD_ADDR_OWVAR 42
21861: PUSH
21862: LD_INT 32
21864: ST_TO_ADDR
21865: GO 22020
21867: LD_INT 27
21869: DOUBLE
21870: EQUAL
21871: IFTRUE 21875
21873: GO 21886
21875: POP
// bc_type := b_turret ; 28 :
21876: LD_ADDR_OWVAR 42
21880: PUSH
21881: LD_INT 33
21883: ST_TO_ADDR
21884: GO 22020
21886: LD_INT 28
21888: DOUBLE
21889: EQUAL
21890: IFTRUE 21894
21892: GO 21905
21894: POP
// bc_type := b_armoury ; 29 :
21895: LD_ADDR_OWVAR 42
21899: PUSH
21900: LD_INT 4
21902: ST_TO_ADDR
21903: GO 22020
21905: LD_INT 29
21907: DOUBLE
21908: EQUAL
21909: IFTRUE 21913
21911: GO 21924
21913: POP
// bc_type := b_barracks ; 30 :
21914: LD_ADDR_OWVAR 42
21918: PUSH
21919: LD_INT 5
21921: ST_TO_ADDR
21922: GO 22020
21924: LD_INT 30
21926: DOUBLE
21927: EQUAL
21928: IFTRUE 21932
21930: GO 21943
21932: POP
// bc_type := b_solar_power ; 31 :
21933: LD_ADDR_OWVAR 42
21937: PUSH
21938: LD_INT 27
21940: ST_TO_ADDR
21941: GO 22020
21943: LD_INT 31
21945: DOUBLE
21946: EQUAL
21947: IFTRUE 21951
21949: GO 21962
21951: POP
// bc_type := b_oil_power ; 32 :
21952: LD_ADDR_OWVAR 42
21956: PUSH
21957: LD_INT 26
21959: ST_TO_ADDR
21960: GO 22020
21962: LD_INT 32
21964: DOUBLE
21965: EQUAL
21966: IFTRUE 21970
21968: GO 21981
21970: POP
// bc_type := b_siberite_power ; 33 :
21971: LD_ADDR_OWVAR 42
21975: PUSH
21976: LD_INT 28
21978: ST_TO_ADDR
21979: GO 22020
21981: LD_INT 33
21983: DOUBLE
21984: EQUAL
21985: IFTRUE 21989
21987: GO 22000
21989: POP
// bc_type := b_oil_mine ; 34 :
21990: LD_ADDR_OWVAR 42
21994: PUSH
21995: LD_INT 29
21997: ST_TO_ADDR
21998: GO 22020
22000: LD_INT 34
22002: DOUBLE
22003: EQUAL
22004: IFTRUE 22008
22006: GO 22019
22008: POP
// bc_type := b_siberite_mine ; end ;
22009: LD_ADDR_OWVAR 42
22013: PUSH
22014: LD_INT 30
22016: ST_TO_ADDR
22017: GO 22020
22019: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
22020: LD_ADDR_VAR 0 8
22024: PUSH
22025: LD_VAR 0 5
22029: PPUSH
22030: LD_VAR 0 6
22034: PPUSH
22035: LD_VAR 0 3
22039: PPUSH
22040: CALL_OW 47
22044: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
22045: LD_OWVAR 42
22049: PUSH
22050: LD_INT 32
22052: PUSH
22053: LD_INT 33
22055: PUSH
22056: EMPTY
22057: LIST
22058: LIST
22059: IN
22060: IFFALSE 22076
// PlaceWeaponTurret ( b , weapon ) ;
22062: LD_VAR 0 8
22066: PPUSH
22067: LD_VAR 0 4
22071: PPUSH
22072: CALL_OW 431
// end ;
22076: LD_VAR 0 7
22080: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
22081: LD_INT 0
22083: PPUSH
22084: PPUSH
22085: PPUSH
22086: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22087: LD_ADDR_VAR 0 4
22091: PUSH
22092: LD_INT 22
22094: PUSH
22095: LD_OWVAR 2
22099: PUSH
22100: EMPTY
22101: LIST
22102: LIST
22103: PUSH
22104: LD_INT 2
22106: PUSH
22107: LD_INT 30
22109: PUSH
22110: LD_INT 0
22112: PUSH
22113: EMPTY
22114: LIST
22115: LIST
22116: PUSH
22117: LD_INT 30
22119: PUSH
22120: LD_INT 1
22122: PUSH
22123: EMPTY
22124: LIST
22125: LIST
22126: PUSH
22127: EMPTY
22128: LIST
22129: LIST
22130: LIST
22131: PUSH
22132: EMPTY
22133: LIST
22134: LIST
22135: PPUSH
22136: CALL_OW 69
22140: ST_TO_ADDR
// if not tmp then
22141: LD_VAR 0 4
22145: NOT
22146: IFFALSE 22150
// exit ;
22148: GO 22209
// for i in tmp do
22150: LD_ADDR_VAR 0 2
22154: PUSH
22155: LD_VAR 0 4
22159: PUSH
22160: FOR_IN
22161: IFFALSE 22207
// for j = 1 to 3 do
22163: LD_ADDR_VAR 0 3
22167: PUSH
22168: DOUBLE
22169: LD_INT 1
22171: DEC
22172: ST_TO_ADDR
22173: LD_INT 3
22175: PUSH
22176: FOR_TO
22177: IFFALSE 22203
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
22179: LD_VAR 0 2
22183: PPUSH
22184: CALL_OW 274
22188: PPUSH
22189: LD_VAR 0 3
22193: PPUSH
22194: LD_INT 99999
22196: PPUSH
22197: CALL_OW 277
22201: GO 22176
22203: POP
22204: POP
22205: GO 22160
22207: POP
22208: POP
// end ;
22209: LD_VAR 0 1
22213: RET
// export function hHackSetLevel10 ; var i , j ; begin
22214: LD_INT 0
22216: PPUSH
22217: PPUSH
22218: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
22219: LD_ADDR_VAR 0 2
22223: PUSH
22224: LD_INT 21
22226: PUSH
22227: LD_INT 1
22229: PUSH
22230: EMPTY
22231: LIST
22232: LIST
22233: PPUSH
22234: CALL_OW 69
22238: PUSH
22239: FOR_IN
22240: IFFALSE 22292
// if IsSelected ( i ) then
22242: LD_VAR 0 2
22246: PPUSH
22247: CALL_OW 306
22251: IFFALSE 22290
// begin for j := 1 to 4 do
22253: LD_ADDR_VAR 0 3
22257: PUSH
22258: DOUBLE
22259: LD_INT 1
22261: DEC
22262: ST_TO_ADDR
22263: LD_INT 4
22265: PUSH
22266: FOR_TO
22267: IFFALSE 22288
// SetSkill ( i , j , 10 ) ;
22269: LD_VAR 0 2
22273: PPUSH
22274: LD_VAR 0 3
22278: PPUSH
22279: LD_INT 10
22281: PPUSH
22282: CALL_OW 237
22286: GO 22266
22288: POP
22289: POP
// end ;
22290: GO 22239
22292: POP
22293: POP
// end ;
22294: LD_VAR 0 1
22298: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
22299: LD_INT 0
22301: PPUSH
22302: PPUSH
22303: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
22304: LD_ADDR_VAR 0 2
22308: PUSH
22309: LD_INT 22
22311: PUSH
22312: LD_OWVAR 2
22316: PUSH
22317: EMPTY
22318: LIST
22319: LIST
22320: PUSH
22321: LD_INT 21
22323: PUSH
22324: LD_INT 1
22326: PUSH
22327: EMPTY
22328: LIST
22329: LIST
22330: PUSH
22331: EMPTY
22332: LIST
22333: LIST
22334: PPUSH
22335: CALL_OW 69
22339: PUSH
22340: FOR_IN
22341: IFFALSE 22382
// begin for j := 1 to 4 do
22343: LD_ADDR_VAR 0 3
22347: PUSH
22348: DOUBLE
22349: LD_INT 1
22351: DEC
22352: ST_TO_ADDR
22353: LD_INT 4
22355: PUSH
22356: FOR_TO
22357: IFFALSE 22378
// SetSkill ( i , j , 10 ) ;
22359: LD_VAR 0 2
22363: PPUSH
22364: LD_VAR 0 3
22368: PPUSH
22369: LD_INT 10
22371: PPUSH
22372: CALL_OW 237
22376: GO 22356
22378: POP
22379: POP
// end ;
22380: GO 22340
22382: POP
22383: POP
// end ;
22384: LD_VAR 0 1
22388: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
22389: LD_INT 0
22391: PPUSH
// uc_side := your_side ;
22392: LD_ADDR_OWVAR 20
22396: PUSH
22397: LD_OWVAR 2
22401: ST_TO_ADDR
// uc_nation := nation ;
22402: LD_ADDR_OWVAR 21
22406: PUSH
22407: LD_VAR 0 1
22411: ST_TO_ADDR
// InitHc ;
22412: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
22416: LD_INT 0
22418: PPUSH
22419: LD_VAR 0 2
22423: PPUSH
22424: LD_VAR 0 3
22428: PPUSH
22429: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
22433: LD_VAR 0 4
22437: PPUSH
22438: LD_VAR 0 5
22442: PPUSH
22443: CALL_OW 428
22447: PUSH
22448: LD_INT 0
22450: EQUAL
22451: IFFALSE 22475
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
22453: CALL_OW 44
22457: PPUSH
22458: LD_VAR 0 4
22462: PPUSH
22463: LD_VAR 0 5
22467: PPUSH
22468: LD_INT 1
22470: PPUSH
22471: CALL_OW 48
// end ;
22475: LD_VAR 0 6
22479: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
22480: LD_INT 0
22482: PPUSH
22483: PPUSH
// uc_side := your_side ;
22484: LD_ADDR_OWVAR 20
22488: PUSH
22489: LD_OWVAR 2
22493: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
22494: LD_VAR 0 1
22498: PUSH
22499: LD_INT 1
22501: PUSH
22502: LD_INT 2
22504: PUSH
22505: LD_INT 3
22507: PUSH
22508: LD_INT 4
22510: PUSH
22511: LD_INT 5
22513: PUSH
22514: EMPTY
22515: LIST
22516: LIST
22517: LIST
22518: LIST
22519: LIST
22520: IN
22521: IFFALSE 22533
// uc_nation := nation_american else
22523: LD_ADDR_OWVAR 21
22527: PUSH
22528: LD_INT 1
22530: ST_TO_ADDR
22531: GO 22576
// if chassis in [ 11 , 12 , 13 , 14 ] then
22533: LD_VAR 0 1
22537: PUSH
22538: LD_INT 11
22540: PUSH
22541: LD_INT 12
22543: PUSH
22544: LD_INT 13
22546: PUSH
22547: LD_INT 14
22549: PUSH
22550: EMPTY
22551: LIST
22552: LIST
22553: LIST
22554: LIST
22555: IN
22556: IFFALSE 22568
// uc_nation := nation_arabian else
22558: LD_ADDR_OWVAR 21
22562: PUSH
22563: LD_INT 2
22565: ST_TO_ADDR
22566: GO 22576
// uc_nation := nation_russian ;
22568: LD_ADDR_OWVAR 21
22572: PUSH
22573: LD_INT 3
22575: ST_TO_ADDR
// vc_chassis := chassis ;
22576: LD_ADDR_OWVAR 37
22580: PUSH
22581: LD_VAR 0 1
22585: ST_TO_ADDR
// vc_engine := engine ;
22586: LD_ADDR_OWVAR 39
22590: PUSH
22591: LD_VAR 0 2
22595: ST_TO_ADDR
// vc_control := control ;
22596: LD_ADDR_OWVAR 38
22600: PUSH
22601: LD_VAR 0 3
22605: ST_TO_ADDR
// vc_weapon := weapon ;
22606: LD_ADDR_OWVAR 40
22610: PUSH
22611: LD_VAR 0 4
22615: ST_TO_ADDR
// un := CreateVehicle ;
22616: LD_ADDR_VAR 0 8
22620: PUSH
22621: CALL_OW 45
22625: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
22626: LD_VAR 0 8
22630: PPUSH
22631: LD_INT 0
22633: PPUSH
22634: LD_INT 5
22636: PPUSH
22637: CALL_OW 12
22641: PPUSH
22642: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
22646: LD_VAR 0 8
22650: PPUSH
22651: LD_VAR 0 5
22655: PPUSH
22656: LD_VAR 0 6
22660: PPUSH
22661: LD_INT 1
22663: PPUSH
22664: CALL_OW 48
// end ;
22668: LD_VAR 0 7
22672: RET
// export hInvincible ; every 1 do
22673: GO 22675
22675: DISABLE
// hInvincible := [ ] ;
22676: LD_ADDR_EXP 127
22680: PUSH
22681: EMPTY
22682: ST_TO_ADDR
22683: END
// every 10 do var i ;
22684: GO 22686
22686: DISABLE
22687: LD_INT 0
22689: PPUSH
// begin enable ;
22690: ENABLE
// if not hInvincible then
22691: LD_EXP 127
22695: NOT
22696: IFFALSE 22700
// exit ;
22698: GO 22744
// for i in hInvincible do
22700: LD_ADDR_VAR 0 1
22704: PUSH
22705: LD_EXP 127
22709: PUSH
22710: FOR_IN
22711: IFFALSE 22742
// if GetLives ( i ) < 1000 then
22713: LD_VAR 0 1
22717: PPUSH
22718: CALL_OW 256
22722: PUSH
22723: LD_INT 1000
22725: LESS
22726: IFFALSE 22740
// SetLives ( i , 1000 ) ;
22728: LD_VAR 0 1
22732: PPUSH
22733: LD_INT 1000
22735: PPUSH
22736: CALL_OW 234
22740: GO 22710
22742: POP
22743: POP
// end ;
22744: PPOPN 1
22746: END
// export function hHackInvincible ; var i ; begin
22747: LD_INT 0
22749: PPUSH
22750: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
22751: LD_ADDR_VAR 0 2
22755: PUSH
22756: LD_INT 2
22758: PUSH
22759: LD_INT 21
22761: PUSH
22762: LD_INT 1
22764: PUSH
22765: EMPTY
22766: LIST
22767: LIST
22768: PUSH
22769: LD_INT 21
22771: PUSH
22772: LD_INT 2
22774: PUSH
22775: EMPTY
22776: LIST
22777: LIST
22778: PUSH
22779: EMPTY
22780: LIST
22781: LIST
22782: LIST
22783: PPUSH
22784: CALL_OW 69
22788: PUSH
22789: FOR_IN
22790: IFFALSE 22851
// if IsSelected ( i ) then
22792: LD_VAR 0 2
22796: PPUSH
22797: CALL_OW 306
22801: IFFALSE 22849
// begin if i in hInvincible then
22803: LD_VAR 0 2
22807: PUSH
22808: LD_EXP 127
22812: IN
22813: IFFALSE 22833
// hInvincible := hInvincible diff i else
22815: LD_ADDR_EXP 127
22819: PUSH
22820: LD_EXP 127
22824: PUSH
22825: LD_VAR 0 2
22829: DIFF
22830: ST_TO_ADDR
22831: GO 22849
// hInvincible := hInvincible union i ;
22833: LD_ADDR_EXP 127
22837: PUSH
22838: LD_EXP 127
22842: PUSH
22843: LD_VAR 0 2
22847: UNION
22848: ST_TO_ADDR
// end ;
22849: GO 22789
22851: POP
22852: POP
// end ;
22853: LD_VAR 0 1
22857: RET
// export function hHackInvisible ; var i , j ; begin
22858: LD_INT 0
22860: PPUSH
22861: PPUSH
22862: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
22863: LD_ADDR_VAR 0 2
22867: PUSH
22868: LD_INT 21
22870: PUSH
22871: LD_INT 1
22873: PUSH
22874: EMPTY
22875: LIST
22876: LIST
22877: PPUSH
22878: CALL_OW 69
22882: PUSH
22883: FOR_IN
22884: IFFALSE 22908
// if IsSelected ( i ) then
22886: LD_VAR 0 2
22890: PPUSH
22891: CALL_OW 306
22895: IFFALSE 22906
// ComForceInvisible ( i ) ;
22897: LD_VAR 0 2
22901: PPUSH
22902: CALL_OW 496
22906: GO 22883
22908: POP
22909: POP
// end ;
22910: LD_VAR 0 1
22914: RET
// export function hHackChangeYourSide ; begin
22915: LD_INT 0
22917: PPUSH
// if your_side = 8 then
22918: LD_OWVAR 2
22922: PUSH
22923: LD_INT 8
22925: EQUAL
22926: IFFALSE 22938
// your_side := 0 else
22928: LD_ADDR_OWVAR 2
22932: PUSH
22933: LD_INT 0
22935: ST_TO_ADDR
22936: GO 22952
// your_side := your_side + 1 ;
22938: LD_ADDR_OWVAR 2
22942: PUSH
22943: LD_OWVAR 2
22947: PUSH
22948: LD_INT 1
22950: PLUS
22951: ST_TO_ADDR
// end ;
22952: LD_VAR 0 1
22956: RET
// export function hHackChangeUnitSide ; var i , j ; begin
22957: LD_INT 0
22959: PPUSH
22960: PPUSH
22961: PPUSH
// for i in all_units do
22962: LD_ADDR_VAR 0 2
22966: PUSH
22967: LD_OWVAR 3
22971: PUSH
22972: FOR_IN
22973: IFFALSE 23051
// if IsSelected ( i ) then
22975: LD_VAR 0 2
22979: PPUSH
22980: CALL_OW 306
22984: IFFALSE 23049
// begin j := GetSide ( i ) ;
22986: LD_ADDR_VAR 0 3
22990: PUSH
22991: LD_VAR 0 2
22995: PPUSH
22996: CALL_OW 255
23000: ST_TO_ADDR
// if j = 8 then
23001: LD_VAR 0 3
23005: PUSH
23006: LD_INT 8
23008: EQUAL
23009: IFFALSE 23021
// j := 0 else
23011: LD_ADDR_VAR 0 3
23015: PUSH
23016: LD_INT 0
23018: ST_TO_ADDR
23019: GO 23035
// j := j + 1 ;
23021: LD_ADDR_VAR 0 3
23025: PUSH
23026: LD_VAR 0 3
23030: PUSH
23031: LD_INT 1
23033: PLUS
23034: ST_TO_ADDR
// SetSide ( i , j ) ;
23035: LD_VAR 0 2
23039: PPUSH
23040: LD_VAR 0 3
23044: PPUSH
23045: CALL_OW 235
// end ;
23049: GO 22972
23051: POP
23052: POP
// end ;
23053: LD_VAR 0 1
23057: RET
// export function hHackFog ; begin
23058: LD_INT 0
23060: PPUSH
// FogOff ( true ) ;
23061: LD_INT 1
23063: PPUSH
23064: CALL_OW 344
// end ;
23068: LD_VAR 0 1
23072: RET
// export function hHackTeleport ( unit , x , y ) ; begin
23073: LD_INT 0
23075: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
23076: LD_VAR 0 1
23080: PPUSH
23081: LD_VAR 0 2
23085: PPUSH
23086: LD_VAR 0 3
23090: PPUSH
23091: LD_INT 1
23093: PPUSH
23094: LD_INT 1
23096: PPUSH
23097: CALL_OW 483
// CenterOnXY ( x , y ) ;
23101: LD_VAR 0 2
23105: PPUSH
23106: LD_VAR 0 3
23110: PPUSH
23111: CALL_OW 84
// end ;
23115: LD_VAR 0 4
23119: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
23120: LD_INT 0
23122: PPUSH
23123: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
23124: LD_VAR 0 1
23128: NOT
23129: PUSH
23130: LD_VAR 0 2
23134: PPUSH
23135: LD_VAR 0 3
23139: PPUSH
23140: CALL_OW 488
23144: NOT
23145: OR
23146: PUSH
23147: LD_VAR 0 1
23151: PPUSH
23152: CALL_OW 266
23156: PUSH
23157: LD_INT 3
23159: NONEQUAL
23160: PUSH
23161: LD_VAR 0 1
23165: PPUSH
23166: CALL_OW 247
23170: PUSH
23171: LD_INT 1
23173: EQUAL
23174: NOT
23175: AND
23176: OR
23177: IFFALSE 23181
// exit ;
23179: GO 23330
// if GetType ( factory ) = unit_human then
23181: LD_VAR 0 1
23185: PPUSH
23186: CALL_OW 247
23190: PUSH
23191: LD_INT 1
23193: EQUAL
23194: IFFALSE 23211
// factory := IsInUnit ( factory ) ;
23196: LD_ADDR_VAR 0 1
23200: PUSH
23201: LD_VAR 0 1
23205: PPUSH
23206: CALL_OW 310
23210: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
23211: LD_VAR 0 1
23215: PPUSH
23216: CALL_OW 266
23220: PUSH
23221: LD_INT 3
23223: NONEQUAL
23224: IFFALSE 23228
// exit ;
23226: GO 23330
// if HexInfo ( x , y ) = factory then
23228: LD_VAR 0 2
23232: PPUSH
23233: LD_VAR 0 3
23237: PPUSH
23238: CALL_OW 428
23242: PUSH
23243: LD_VAR 0 1
23247: EQUAL
23248: IFFALSE 23275
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
23250: LD_ADDR_EXP 128
23254: PUSH
23255: LD_EXP 128
23259: PPUSH
23260: LD_VAR 0 1
23264: PPUSH
23265: LD_INT 0
23267: PPUSH
23268: CALL_OW 1
23272: ST_TO_ADDR
23273: GO 23326
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
23275: LD_ADDR_EXP 128
23279: PUSH
23280: LD_EXP 128
23284: PPUSH
23285: LD_VAR 0 1
23289: PPUSH
23290: LD_VAR 0 1
23294: PPUSH
23295: CALL_OW 255
23299: PUSH
23300: LD_VAR 0 1
23304: PUSH
23305: LD_VAR 0 2
23309: PUSH
23310: LD_VAR 0 3
23314: PUSH
23315: EMPTY
23316: LIST
23317: LIST
23318: LIST
23319: LIST
23320: PPUSH
23321: CALL_OW 1
23325: ST_TO_ADDR
// UpdateFactoryWaypoints ;
23326: CALL 23335 0 0
// end ;
23330: LD_VAR 0 4
23334: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
23335: LD_INT 0
23337: PPUSH
23338: PPUSH
23339: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
23340: LD_STRING resetFactoryWaypoint();
23342: PPUSH
23343: CALL_OW 559
// if factoryWaypoints then
23347: LD_EXP 128
23351: IFFALSE 23477
// begin list := PrepareArray ( factoryWaypoints ) ;
23353: LD_ADDR_VAR 0 3
23357: PUSH
23358: LD_EXP 128
23362: PPUSH
23363: CALL 69909 0 1
23367: ST_TO_ADDR
// for i := 1 to list do
23368: LD_ADDR_VAR 0 2
23372: PUSH
23373: DOUBLE
23374: LD_INT 1
23376: DEC
23377: ST_TO_ADDR
23378: LD_VAR 0 3
23382: PUSH
23383: FOR_TO
23384: IFFALSE 23475
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
23386: LD_STRING setFactoryWaypointXY(
23388: PUSH
23389: LD_VAR 0 3
23393: PUSH
23394: LD_VAR 0 2
23398: ARRAY
23399: PUSH
23400: LD_INT 1
23402: ARRAY
23403: STR
23404: PUSH
23405: LD_STRING ,
23407: STR
23408: PUSH
23409: LD_VAR 0 3
23413: PUSH
23414: LD_VAR 0 2
23418: ARRAY
23419: PUSH
23420: LD_INT 2
23422: ARRAY
23423: STR
23424: PUSH
23425: LD_STRING ,
23427: STR
23428: PUSH
23429: LD_VAR 0 3
23433: PUSH
23434: LD_VAR 0 2
23438: ARRAY
23439: PUSH
23440: LD_INT 3
23442: ARRAY
23443: STR
23444: PUSH
23445: LD_STRING ,
23447: STR
23448: PUSH
23449: LD_VAR 0 3
23453: PUSH
23454: LD_VAR 0 2
23458: ARRAY
23459: PUSH
23460: LD_INT 4
23462: ARRAY
23463: STR
23464: PUSH
23465: LD_STRING )
23467: STR
23468: PPUSH
23469: CALL_OW 559
23473: GO 23383
23475: POP
23476: POP
// end ; end ;
23477: LD_VAR 0 1
23481: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
23482: LD_INT 0
23484: PPUSH
// if HexInfo ( x , y ) = warehouse then
23485: LD_VAR 0 2
23489: PPUSH
23490: LD_VAR 0 3
23494: PPUSH
23495: CALL_OW 428
23499: PUSH
23500: LD_VAR 0 1
23504: EQUAL
23505: IFFALSE 23532
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
23507: LD_ADDR_EXP 129
23511: PUSH
23512: LD_EXP 129
23516: PPUSH
23517: LD_VAR 0 1
23521: PPUSH
23522: LD_INT 0
23524: PPUSH
23525: CALL_OW 1
23529: ST_TO_ADDR
23530: GO 23583
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
23532: LD_ADDR_EXP 129
23536: PUSH
23537: LD_EXP 129
23541: PPUSH
23542: LD_VAR 0 1
23546: PPUSH
23547: LD_VAR 0 1
23551: PPUSH
23552: CALL_OW 255
23556: PUSH
23557: LD_VAR 0 1
23561: PUSH
23562: LD_VAR 0 2
23566: PUSH
23567: LD_VAR 0 3
23571: PUSH
23572: EMPTY
23573: LIST
23574: LIST
23575: LIST
23576: LIST
23577: PPUSH
23578: CALL_OW 1
23582: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
23583: CALL 23592 0 0
// end ;
23587: LD_VAR 0 4
23591: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
23592: LD_INT 0
23594: PPUSH
23595: PPUSH
23596: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
23597: LD_STRING resetWarehouseGatheringPoints();
23599: PPUSH
23600: CALL_OW 559
// if warehouseGatheringPoints then
23604: LD_EXP 129
23608: IFFALSE 23734
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
23610: LD_ADDR_VAR 0 3
23614: PUSH
23615: LD_EXP 129
23619: PPUSH
23620: CALL 69909 0 1
23624: ST_TO_ADDR
// for i := 1 to list do
23625: LD_ADDR_VAR 0 2
23629: PUSH
23630: DOUBLE
23631: LD_INT 1
23633: DEC
23634: ST_TO_ADDR
23635: LD_VAR 0 3
23639: PUSH
23640: FOR_TO
23641: IFFALSE 23732
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
23643: LD_STRING setWarehouseGatheringPointXY(
23645: PUSH
23646: LD_VAR 0 3
23650: PUSH
23651: LD_VAR 0 2
23655: ARRAY
23656: PUSH
23657: LD_INT 1
23659: ARRAY
23660: STR
23661: PUSH
23662: LD_STRING ,
23664: STR
23665: PUSH
23666: LD_VAR 0 3
23670: PUSH
23671: LD_VAR 0 2
23675: ARRAY
23676: PUSH
23677: LD_INT 2
23679: ARRAY
23680: STR
23681: PUSH
23682: LD_STRING ,
23684: STR
23685: PUSH
23686: LD_VAR 0 3
23690: PUSH
23691: LD_VAR 0 2
23695: ARRAY
23696: PUSH
23697: LD_INT 3
23699: ARRAY
23700: STR
23701: PUSH
23702: LD_STRING ,
23704: STR
23705: PUSH
23706: LD_VAR 0 3
23710: PUSH
23711: LD_VAR 0 2
23715: ARRAY
23716: PUSH
23717: LD_INT 4
23719: ARRAY
23720: STR
23721: PUSH
23722: LD_STRING )
23724: STR
23725: PPUSH
23726: CALL_OW 559
23730: GO 23640
23732: POP
23733: POP
// end ; end ;
23734: LD_VAR 0 1
23738: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
23739: LD_EXP 129
23743: IFFALSE 24430
23745: GO 23747
23747: DISABLE
23748: LD_INT 0
23750: PPUSH
23751: PPUSH
23752: PPUSH
23753: PPUSH
23754: PPUSH
23755: PPUSH
23756: PPUSH
23757: PPUSH
23758: PPUSH
// begin enable ;
23759: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
23760: LD_ADDR_VAR 0 3
23764: PUSH
23765: LD_EXP 129
23769: PPUSH
23770: CALL 69909 0 1
23774: ST_TO_ADDR
// if not list then
23775: LD_VAR 0 3
23779: NOT
23780: IFFALSE 23784
// exit ;
23782: GO 24430
// for i := 1 to list do
23784: LD_ADDR_VAR 0 1
23788: PUSH
23789: DOUBLE
23790: LD_INT 1
23792: DEC
23793: ST_TO_ADDR
23794: LD_VAR 0 3
23798: PUSH
23799: FOR_TO
23800: IFFALSE 24428
// begin depot := list [ i ] [ 2 ] ;
23802: LD_ADDR_VAR 0 8
23806: PUSH
23807: LD_VAR 0 3
23811: PUSH
23812: LD_VAR 0 1
23816: ARRAY
23817: PUSH
23818: LD_INT 2
23820: ARRAY
23821: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
23822: LD_ADDR_VAR 0 5
23826: PUSH
23827: LD_VAR 0 3
23831: PUSH
23832: LD_VAR 0 1
23836: ARRAY
23837: PUSH
23838: LD_INT 1
23840: ARRAY
23841: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
23842: LD_VAR 0 8
23846: PPUSH
23847: CALL_OW 301
23851: PUSH
23852: LD_VAR 0 5
23856: PUSH
23857: LD_VAR 0 8
23861: PPUSH
23862: CALL_OW 255
23866: NONEQUAL
23867: OR
23868: IFFALSE 23897
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
23870: LD_ADDR_EXP 129
23874: PUSH
23875: LD_EXP 129
23879: PPUSH
23880: LD_VAR 0 8
23884: PPUSH
23885: LD_INT 0
23887: PPUSH
23888: CALL_OW 1
23892: ST_TO_ADDR
// exit ;
23893: POP
23894: POP
23895: GO 24430
// end ; x := list [ i ] [ 3 ] ;
23897: LD_ADDR_VAR 0 6
23901: PUSH
23902: LD_VAR 0 3
23906: PUSH
23907: LD_VAR 0 1
23911: ARRAY
23912: PUSH
23913: LD_INT 3
23915: ARRAY
23916: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
23917: LD_ADDR_VAR 0 7
23921: PUSH
23922: LD_VAR 0 3
23926: PUSH
23927: LD_VAR 0 1
23931: ARRAY
23932: PUSH
23933: LD_INT 4
23935: ARRAY
23936: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
23937: LD_ADDR_VAR 0 9
23941: PUSH
23942: LD_VAR 0 6
23946: PPUSH
23947: LD_VAR 0 7
23951: PPUSH
23952: LD_INT 16
23954: PPUSH
23955: CALL 68493 0 3
23959: ST_TO_ADDR
// if not cratesNearbyPoint then
23960: LD_VAR 0 9
23964: NOT
23965: IFFALSE 23971
// exit ;
23967: POP
23968: POP
23969: GO 24430
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
23971: LD_ADDR_VAR 0 4
23975: PUSH
23976: LD_INT 22
23978: PUSH
23979: LD_VAR 0 5
23983: PUSH
23984: EMPTY
23985: LIST
23986: LIST
23987: PUSH
23988: LD_INT 3
23990: PUSH
23991: LD_INT 60
23993: PUSH
23994: EMPTY
23995: LIST
23996: PUSH
23997: EMPTY
23998: LIST
23999: LIST
24000: PUSH
24001: LD_INT 91
24003: PUSH
24004: LD_VAR 0 8
24008: PUSH
24009: LD_INT 6
24011: PUSH
24012: EMPTY
24013: LIST
24014: LIST
24015: LIST
24016: PUSH
24017: LD_INT 2
24019: PUSH
24020: LD_INT 25
24022: PUSH
24023: LD_INT 2
24025: PUSH
24026: EMPTY
24027: LIST
24028: LIST
24029: PUSH
24030: LD_INT 25
24032: PUSH
24033: LD_INT 16
24035: PUSH
24036: EMPTY
24037: LIST
24038: LIST
24039: PUSH
24040: EMPTY
24041: LIST
24042: LIST
24043: LIST
24044: PUSH
24045: EMPTY
24046: LIST
24047: LIST
24048: LIST
24049: LIST
24050: PPUSH
24051: CALL_OW 69
24055: PUSH
24056: LD_VAR 0 8
24060: PPUSH
24061: CALL_OW 313
24065: PPUSH
24066: LD_INT 3
24068: PUSH
24069: LD_INT 60
24071: PUSH
24072: EMPTY
24073: LIST
24074: PUSH
24075: EMPTY
24076: LIST
24077: LIST
24078: PUSH
24079: LD_INT 2
24081: PUSH
24082: LD_INT 25
24084: PUSH
24085: LD_INT 2
24087: PUSH
24088: EMPTY
24089: LIST
24090: LIST
24091: PUSH
24092: LD_INT 25
24094: PUSH
24095: LD_INT 16
24097: PUSH
24098: EMPTY
24099: LIST
24100: LIST
24101: PUSH
24102: EMPTY
24103: LIST
24104: LIST
24105: LIST
24106: PUSH
24107: EMPTY
24108: LIST
24109: LIST
24110: PPUSH
24111: CALL_OW 72
24115: UNION
24116: ST_TO_ADDR
// if tmp then
24117: LD_VAR 0 4
24121: IFFALSE 24201
// begin tmp := ShrinkArray ( tmp , 3 ) ;
24123: LD_ADDR_VAR 0 4
24127: PUSH
24128: LD_VAR 0 4
24132: PPUSH
24133: LD_INT 3
24135: PPUSH
24136: CALL 66460 0 2
24140: ST_TO_ADDR
// for j in tmp do
24141: LD_ADDR_VAR 0 2
24145: PUSH
24146: LD_VAR 0 4
24150: PUSH
24151: FOR_IN
24152: IFFALSE 24195
// begin if IsInUnit ( j ) then
24154: LD_VAR 0 2
24158: PPUSH
24159: CALL_OW 310
24163: IFFALSE 24174
// ComExit ( j ) ;
24165: LD_VAR 0 2
24169: PPUSH
24170: CALL 66543 0 1
// AddComCollect ( j , x , y ) ;
24174: LD_VAR 0 2
24178: PPUSH
24179: LD_VAR 0 6
24183: PPUSH
24184: LD_VAR 0 7
24188: PPUSH
24189: CALL_OW 177
// end ;
24193: GO 24151
24195: POP
24196: POP
// exit ;
24197: POP
24198: POP
24199: GO 24430
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
24201: LD_ADDR_VAR 0 4
24205: PUSH
24206: LD_INT 22
24208: PUSH
24209: LD_VAR 0 5
24213: PUSH
24214: EMPTY
24215: LIST
24216: LIST
24217: PUSH
24218: LD_INT 91
24220: PUSH
24221: LD_VAR 0 8
24225: PUSH
24226: LD_INT 8
24228: PUSH
24229: EMPTY
24230: LIST
24231: LIST
24232: LIST
24233: PUSH
24234: LD_INT 2
24236: PUSH
24237: LD_INT 34
24239: PUSH
24240: LD_INT 12
24242: PUSH
24243: EMPTY
24244: LIST
24245: LIST
24246: PUSH
24247: LD_INT 34
24249: PUSH
24250: LD_INT 51
24252: PUSH
24253: EMPTY
24254: LIST
24255: LIST
24256: PUSH
24257: LD_INT 34
24259: PUSH
24260: LD_INT 32
24262: PUSH
24263: EMPTY
24264: LIST
24265: LIST
24266: PUSH
24267: LD_INT 34
24269: PUSH
24270: LD_EXP 53
24274: PUSH
24275: EMPTY
24276: LIST
24277: LIST
24278: PUSH
24279: EMPTY
24280: LIST
24281: LIST
24282: LIST
24283: LIST
24284: LIST
24285: PUSH
24286: EMPTY
24287: LIST
24288: LIST
24289: LIST
24290: PPUSH
24291: CALL_OW 69
24295: ST_TO_ADDR
// if tmp then
24296: LD_VAR 0 4
24300: IFFALSE 24426
// begin for j in tmp do
24302: LD_ADDR_VAR 0 2
24306: PUSH
24307: LD_VAR 0 4
24311: PUSH
24312: FOR_IN
24313: IFFALSE 24424
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
24315: LD_VAR 0 2
24319: PPUSH
24320: CALL_OW 262
24324: PUSH
24325: LD_INT 3
24327: EQUAL
24328: PUSH
24329: LD_VAR 0 2
24333: PPUSH
24334: CALL_OW 261
24338: PUSH
24339: LD_INT 20
24341: GREATER
24342: OR
24343: PUSH
24344: LD_VAR 0 2
24348: PPUSH
24349: CALL_OW 314
24353: NOT
24354: AND
24355: PUSH
24356: LD_VAR 0 2
24360: PPUSH
24361: CALL_OW 263
24365: PUSH
24366: LD_INT 1
24368: NONEQUAL
24369: PUSH
24370: LD_VAR 0 2
24374: PPUSH
24375: CALL_OW 311
24379: OR
24380: AND
24381: IFFALSE 24422
// begin ComCollect ( j , x , y ) ;
24383: LD_VAR 0 2
24387: PPUSH
24388: LD_VAR 0 6
24392: PPUSH
24393: LD_VAR 0 7
24397: PPUSH
24398: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
24402: LD_VAR 0 2
24406: PPUSH
24407: LD_VAR 0 8
24411: PPUSH
24412: CALL_OW 172
// exit ;
24416: POP
24417: POP
24418: POP
24419: POP
24420: GO 24430
// end ;
24422: GO 24312
24424: POP
24425: POP
// end ; end ;
24426: GO 23799
24428: POP
24429: POP
// end ; end_of_file
24430: PPOPN 9
24432: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
24433: LD_INT 0
24435: PPUSH
24436: PPUSH
24437: PPUSH
24438: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
24439: LD_VAR 0 1
24443: PPUSH
24444: CALL_OW 264
24448: PUSH
24449: LD_EXP 56
24453: EQUAL
24454: IFFALSE 24526
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
24456: LD_INT 68
24458: PPUSH
24459: LD_VAR 0 1
24463: PPUSH
24464: CALL_OW 255
24468: PPUSH
24469: CALL_OW 321
24473: PUSH
24474: LD_INT 2
24476: EQUAL
24477: IFFALSE 24489
// eff := 70 else
24479: LD_ADDR_VAR 0 4
24483: PUSH
24484: LD_INT 70
24486: ST_TO_ADDR
24487: GO 24497
// eff := 30 ;
24489: LD_ADDR_VAR 0 4
24493: PUSH
24494: LD_INT 30
24496: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
24497: LD_VAR 0 1
24501: PPUSH
24502: CALL_OW 250
24506: PPUSH
24507: LD_VAR 0 1
24511: PPUSH
24512: CALL_OW 251
24516: PPUSH
24517: LD_VAR 0 4
24521: PPUSH
24522: CALL_OW 495
// end ; end ;
24526: LD_VAR 0 2
24530: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
24531: LD_INT 0
24533: PPUSH
// end ;
24534: LD_VAR 0 4
24538: RET
// export function SOS_Command ( cmd ) ; begin
24539: LD_INT 0
24541: PPUSH
// end ;
24542: LD_VAR 0 2
24546: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
24547: LD_INT 0
24549: PPUSH
// end ;
24550: LD_VAR 0 6
24554: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
24555: LD_INT 0
24557: PPUSH
24558: PPUSH
// if not vehicle or not factory then
24559: LD_VAR 0 1
24563: NOT
24564: PUSH
24565: LD_VAR 0 2
24569: NOT
24570: OR
24571: IFFALSE 24575
// exit ;
24573: GO 24806
// if factoryWaypoints >= factory then
24575: LD_EXP 128
24579: PUSH
24580: LD_VAR 0 2
24584: GREATEREQUAL
24585: IFFALSE 24806
// if factoryWaypoints [ factory ] then
24587: LD_EXP 128
24591: PUSH
24592: LD_VAR 0 2
24596: ARRAY
24597: IFFALSE 24806
// begin if GetControl ( vehicle ) = control_manual then
24599: LD_VAR 0 1
24603: PPUSH
24604: CALL_OW 263
24608: PUSH
24609: LD_INT 1
24611: EQUAL
24612: IFFALSE 24693
// begin driver := IsDrivenBy ( vehicle ) ;
24614: LD_ADDR_VAR 0 4
24618: PUSH
24619: LD_VAR 0 1
24623: PPUSH
24624: CALL_OW 311
24628: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
24629: LD_VAR 0 4
24633: PPUSH
24634: LD_EXP 128
24638: PUSH
24639: LD_VAR 0 2
24643: ARRAY
24644: PUSH
24645: LD_INT 3
24647: ARRAY
24648: PPUSH
24649: LD_EXP 128
24653: PUSH
24654: LD_VAR 0 2
24658: ARRAY
24659: PUSH
24660: LD_INT 4
24662: ARRAY
24663: PPUSH
24664: CALL_OW 171
// AddComExitVehicle ( driver ) ;
24668: LD_VAR 0 4
24672: PPUSH
24673: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
24677: LD_VAR 0 4
24681: PPUSH
24682: LD_VAR 0 2
24686: PPUSH
24687: CALL_OW 180
// end else
24691: GO 24806
// if GetControl ( vehicle ) = control_remote then
24693: LD_VAR 0 1
24697: PPUSH
24698: CALL_OW 263
24702: PUSH
24703: LD_INT 2
24705: EQUAL
24706: IFFALSE 24767
// begin wait ( 0 0$2 ) ;
24708: LD_INT 70
24710: PPUSH
24711: CALL_OW 67
// if Connect ( vehicle ) then
24715: LD_VAR 0 1
24719: PPUSH
24720: CALL 36854 0 1
24724: IFFALSE 24765
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
24726: LD_VAR 0 1
24730: PPUSH
24731: LD_EXP 128
24735: PUSH
24736: LD_VAR 0 2
24740: ARRAY
24741: PUSH
24742: LD_INT 3
24744: ARRAY
24745: PPUSH
24746: LD_EXP 128
24750: PUSH
24751: LD_VAR 0 2
24755: ARRAY
24756: PUSH
24757: LD_INT 4
24759: ARRAY
24760: PPUSH
24761: CALL_OW 171
// end else
24765: GO 24806
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
24767: LD_VAR 0 1
24771: PPUSH
24772: LD_EXP 128
24776: PUSH
24777: LD_VAR 0 2
24781: ARRAY
24782: PUSH
24783: LD_INT 3
24785: ARRAY
24786: PPUSH
24787: LD_EXP 128
24791: PUSH
24792: LD_VAR 0 2
24796: ARRAY
24797: PUSH
24798: LD_INT 4
24800: ARRAY
24801: PPUSH
24802: CALL_OW 171
// end ; end ;
24806: LD_VAR 0 3
24810: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
24811: LD_INT 0
24813: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
24814: LD_VAR 0 1
24818: PUSH
24819: LD_INT 250
24821: EQUAL
24822: PUSH
24823: LD_VAR 0 2
24827: PPUSH
24828: CALL_OW 264
24832: PUSH
24833: LD_EXP 59
24837: EQUAL
24838: AND
24839: IFFALSE 24860
// MinerPlaceMine ( unit , x , y ) ;
24841: LD_VAR 0 2
24845: PPUSH
24846: LD_VAR 0 4
24850: PPUSH
24851: LD_VAR 0 5
24855: PPUSH
24856: CALL 27259 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
24860: LD_VAR 0 1
24864: PUSH
24865: LD_INT 251
24867: EQUAL
24868: PUSH
24869: LD_VAR 0 2
24873: PPUSH
24874: CALL_OW 264
24878: PUSH
24879: LD_EXP 59
24883: EQUAL
24884: AND
24885: IFFALSE 24906
// MinerDetonateMine ( unit , x , y ) ;
24887: LD_VAR 0 2
24891: PPUSH
24892: LD_VAR 0 4
24896: PPUSH
24897: LD_VAR 0 5
24901: PPUSH
24902: CALL 27536 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
24906: LD_VAR 0 1
24910: PUSH
24911: LD_INT 252
24913: EQUAL
24914: PUSH
24915: LD_VAR 0 2
24919: PPUSH
24920: CALL_OW 264
24924: PUSH
24925: LD_EXP 59
24929: EQUAL
24930: AND
24931: IFFALSE 24952
// MinerCreateMinefield ( unit , x , y ) ;
24933: LD_VAR 0 2
24937: PPUSH
24938: LD_VAR 0 4
24942: PPUSH
24943: LD_VAR 0 5
24947: PPUSH
24948: CALL 27953 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
24952: LD_VAR 0 1
24956: PUSH
24957: LD_INT 253
24959: EQUAL
24960: PUSH
24961: LD_VAR 0 2
24965: PPUSH
24966: CALL_OW 257
24970: PUSH
24971: LD_INT 5
24973: EQUAL
24974: AND
24975: IFFALSE 24996
// ComBinocular ( unit , x , y ) ;
24977: LD_VAR 0 2
24981: PPUSH
24982: LD_VAR 0 4
24986: PPUSH
24987: LD_VAR 0 5
24991: PPUSH
24992: CALL 28324 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
24996: LD_VAR 0 1
25000: PUSH
25001: LD_INT 254
25003: EQUAL
25004: PUSH
25005: LD_VAR 0 2
25009: PPUSH
25010: CALL_OW 264
25014: PUSH
25015: LD_EXP 54
25019: EQUAL
25020: AND
25021: PUSH
25022: LD_VAR 0 3
25026: PPUSH
25027: CALL_OW 263
25031: PUSH
25032: LD_INT 3
25034: EQUAL
25035: AND
25036: IFFALSE 25052
// HackDestroyVehicle ( unit , selectedUnit ) ;
25038: LD_VAR 0 2
25042: PPUSH
25043: LD_VAR 0 3
25047: PPUSH
25048: CALL 26619 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
25052: LD_VAR 0 1
25056: PUSH
25057: LD_INT 255
25059: EQUAL
25060: PUSH
25061: LD_VAR 0 2
25065: PPUSH
25066: CALL_OW 264
25070: PUSH
25071: LD_INT 14
25073: PUSH
25074: LD_INT 53
25076: PUSH
25077: EMPTY
25078: LIST
25079: LIST
25080: IN
25081: AND
25082: PUSH
25083: LD_VAR 0 4
25087: PPUSH
25088: LD_VAR 0 5
25092: PPUSH
25093: CALL_OW 488
25097: AND
25098: IFFALSE 25122
// CutTreeXYR ( unit , x , y , 12 ) ;
25100: LD_VAR 0 2
25104: PPUSH
25105: LD_VAR 0 4
25109: PPUSH
25110: LD_VAR 0 5
25114: PPUSH
25115: LD_INT 12
25117: PPUSH
25118: CALL 25185 0 4
// if cmd = 256 then
25122: LD_VAR 0 1
25126: PUSH
25127: LD_INT 256
25129: EQUAL
25130: IFFALSE 25151
// SetFactoryWaypoint ( unit , x , y ) ;
25132: LD_VAR 0 2
25136: PPUSH
25137: LD_VAR 0 4
25141: PPUSH
25142: LD_VAR 0 5
25146: PPUSH
25147: CALL 23120 0 3
// if cmd = 257 then
25151: LD_VAR 0 1
25155: PUSH
25156: LD_INT 257
25158: EQUAL
25159: IFFALSE 25180
// SetWarehouseGatheringPoint ( unit , x , y ) ;
25161: LD_VAR 0 2
25165: PPUSH
25166: LD_VAR 0 4
25170: PPUSH
25171: LD_VAR 0 5
25175: PPUSH
25176: CALL 23482 0 3
// end ;
25180: LD_VAR 0 6
25184: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
25185: LD_INT 0
25187: PPUSH
25188: PPUSH
25189: PPUSH
25190: PPUSH
25191: PPUSH
25192: PPUSH
25193: PPUSH
25194: PPUSH
25195: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
25196: LD_VAR 0 1
25200: NOT
25201: PUSH
25202: LD_VAR 0 2
25206: PPUSH
25207: LD_VAR 0 3
25211: PPUSH
25212: CALL_OW 488
25216: NOT
25217: OR
25218: PUSH
25219: LD_VAR 0 4
25223: NOT
25224: OR
25225: IFFALSE 25229
// exit ;
25227: GO 25569
// list := [ ] ;
25229: LD_ADDR_VAR 0 13
25233: PUSH
25234: EMPTY
25235: ST_TO_ADDR
// if x - r < 0 then
25236: LD_VAR 0 2
25240: PUSH
25241: LD_VAR 0 4
25245: MINUS
25246: PUSH
25247: LD_INT 0
25249: LESS
25250: IFFALSE 25262
// min_x := 0 else
25252: LD_ADDR_VAR 0 7
25256: PUSH
25257: LD_INT 0
25259: ST_TO_ADDR
25260: GO 25278
// min_x := x - r ;
25262: LD_ADDR_VAR 0 7
25266: PUSH
25267: LD_VAR 0 2
25271: PUSH
25272: LD_VAR 0 4
25276: MINUS
25277: ST_TO_ADDR
// if y - r < 0 then
25278: LD_VAR 0 3
25282: PUSH
25283: LD_VAR 0 4
25287: MINUS
25288: PUSH
25289: LD_INT 0
25291: LESS
25292: IFFALSE 25304
// min_y := 0 else
25294: LD_ADDR_VAR 0 8
25298: PUSH
25299: LD_INT 0
25301: ST_TO_ADDR
25302: GO 25320
// min_y := y - r ;
25304: LD_ADDR_VAR 0 8
25308: PUSH
25309: LD_VAR 0 3
25313: PUSH
25314: LD_VAR 0 4
25318: MINUS
25319: ST_TO_ADDR
// max_x := x + r ;
25320: LD_ADDR_VAR 0 9
25324: PUSH
25325: LD_VAR 0 2
25329: PUSH
25330: LD_VAR 0 4
25334: PLUS
25335: ST_TO_ADDR
// max_y := y + r ;
25336: LD_ADDR_VAR 0 10
25340: PUSH
25341: LD_VAR 0 3
25345: PUSH
25346: LD_VAR 0 4
25350: PLUS
25351: ST_TO_ADDR
// for _x = min_x to max_x do
25352: LD_ADDR_VAR 0 11
25356: PUSH
25357: DOUBLE
25358: LD_VAR 0 7
25362: DEC
25363: ST_TO_ADDR
25364: LD_VAR 0 9
25368: PUSH
25369: FOR_TO
25370: IFFALSE 25487
// for _y = min_y to max_y do
25372: LD_ADDR_VAR 0 12
25376: PUSH
25377: DOUBLE
25378: LD_VAR 0 8
25382: DEC
25383: ST_TO_ADDR
25384: LD_VAR 0 10
25388: PUSH
25389: FOR_TO
25390: IFFALSE 25483
// begin if not ValidHex ( _x , _y ) then
25392: LD_VAR 0 11
25396: PPUSH
25397: LD_VAR 0 12
25401: PPUSH
25402: CALL_OW 488
25406: NOT
25407: IFFALSE 25411
// continue ;
25409: GO 25389
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
25411: LD_VAR 0 11
25415: PPUSH
25416: LD_VAR 0 12
25420: PPUSH
25421: CALL_OW 351
25425: PUSH
25426: LD_VAR 0 11
25430: PPUSH
25431: LD_VAR 0 12
25435: PPUSH
25436: CALL_OW 554
25440: AND
25441: IFFALSE 25481
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
25443: LD_ADDR_VAR 0 13
25447: PUSH
25448: LD_VAR 0 13
25452: PPUSH
25453: LD_VAR 0 13
25457: PUSH
25458: LD_INT 1
25460: PLUS
25461: PPUSH
25462: LD_VAR 0 11
25466: PUSH
25467: LD_VAR 0 12
25471: PUSH
25472: EMPTY
25473: LIST
25474: LIST
25475: PPUSH
25476: CALL_OW 2
25480: ST_TO_ADDR
// end ;
25481: GO 25389
25483: POP
25484: POP
25485: GO 25369
25487: POP
25488: POP
// if not list then
25489: LD_VAR 0 13
25493: NOT
25494: IFFALSE 25498
// exit ;
25496: GO 25569
// for i in list do
25498: LD_ADDR_VAR 0 6
25502: PUSH
25503: LD_VAR 0 13
25507: PUSH
25508: FOR_IN
25509: IFFALSE 25567
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
25511: LD_VAR 0 1
25515: PPUSH
25516: LD_STRING M
25518: PUSH
25519: LD_VAR 0 6
25523: PUSH
25524: LD_INT 1
25526: ARRAY
25527: PUSH
25528: LD_VAR 0 6
25532: PUSH
25533: LD_INT 2
25535: ARRAY
25536: PUSH
25537: LD_INT 0
25539: PUSH
25540: LD_INT 0
25542: PUSH
25543: LD_INT 0
25545: PUSH
25546: LD_INT 0
25548: PUSH
25549: EMPTY
25550: LIST
25551: LIST
25552: LIST
25553: LIST
25554: LIST
25555: LIST
25556: LIST
25557: PUSH
25558: EMPTY
25559: LIST
25560: PPUSH
25561: CALL_OW 447
25565: GO 25508
25567: POP
25568: POP
// end ;
25569: LD_VAR 0 5
25573: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
25574: LD_EXP 131
25578: NOT
25579: IFFALSE 25629
25581: GO 25583
25583: DISABLE
// begin initHack := true ;
25584: LD_ADDR_EXP 131
25588: PUSH
25589: LD_INT 1
25591: ST_TO_ADDR
// hackTanks := [ ] ;
25592: LD_ADDR_EXP 132
25596: PUSH
25597: EMPTY
25598: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
25599: LD_ADDR_EXP 133
25603: PUSH
25604: EMPTY
25605: ST_TO_ADDR
// hackLimit := 3 ;
25606: LD_ADDR_EXP 134
25610: PUSH
25611: LD_INT 3
25613: ST_TO_ADDR
// hackDist := 12 ;
25614: LD_ADDR_EXP 135
25618: PUSH
25619: LD_INT 12
25621: ST_TO_ADDR
// hackCounter := [ ] ;
25622: LD_ADDR_EXP 136
25626: PUSH
25627: EMPTY
25628: ST_TO_ADDR
// end ;
25629: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
25630: LD_EXP 131
25634: PUSH
25635: LD_INT 34
25637: PUSH
25638: LD_EXP 54
25642: PUSH
25643: EMPTY
25644: LIST
25645: LIST
25646: PPUSH
25647: CALL_OW 69
25651: AND
25652: IFFALSE 25907
25654: GO 25656
25656: DISABLE
25657: LD_INT 0
25659: PPUSH
25660: PPUSH
// begin enable ;
25661: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
25662: LD_ADDR_VAR 0 1
25666: PUSH
25667: LD_INT 34
25669: PUSH
25670: LD_EXP 54
25674: PUSH
25675: EMPTY
25676: LIST
25677: LIST
25678: PPUSH
25679: CALL_OW 69
25683: PUSH
25684: FOR_IN
25685: IFFALSE 25905
// begin if not i in hackTanks then
25687: LD_VAR 0 1
25691: PUSH
25692: LD_EXP 132
25696: IN
25697: NOT
25698: IFFALSE 25781
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
25700: LD_ADDR_EXP 132
25704: PUSH
25705: LD_EXP 132
25709: PPUSH
25710: LD_EXP 132
25714: PUSH
25715: LD_INT 1
25717: PLUS
25718: PPUSH
25719: LD_VAR 0 1
25723: PPUSH
25724: CALL_OW 1
25728: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
25729: LD_ADDR_EXP 133
25733: PUSH
25734: LD_EXP 133
25738: PPUSH
25739: LD_EXP 133
25743: PUSH
25744: LD_INT 1
25746: PLUS
25747: PPUSH
25748: EMPTY
25749: PPUSH
25750: CALL_OW 1
25754: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
25755: LD_ADDR_EXP 136
25759: PUSH
25760: LD_EXP 136
25764: PPUSH
25765: LD_EXP 136
25769: PUSH
25770: LD_INT 1
25772: PLUS
25773: PPUSH
25774: EMPTY
25775: PPUSH
25776: CALL_OW 1
25780: ST_TO_ADDR
// end ; if not IsOk ( i ) then
25781: LD_VAR 0 1
25785: PPUSH
25786: CALL_OW 302
25790: NOT
25791: IFFALSE 25804
// begin HackUnlinkAll ( i ) ;
25793: LD_VAR 0 1
25797: PPUSH
25798: CALL 25910 0 1
// continue ;
25802: GO 25684
// end ; HackCheckCapturedStatus ( i ) ;
25804: LD_VAR 0 1
25808: PPUSH
25809: CALL 26353 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
25813: LD_ADDR_VAR 0 2
25817: PUSH
25818: LD_INT 81
25820: PUSH
25821: LD_VAR 0 1
25825: PPUSH
25826: CALL_OW 255
25830: PUSH
25831: EMPTY
25832: LIST
25833: LIST
25834: PUSH
25835: LD_INT 33
25837: PUSH
25838: LD_INT 3
25840: PUSH
25841: EMPTY
25842: LIST
25843: LIST
25844: PUSH
25845: LD_INT 91
25847: PUSH
25848: LD_VAR 0 1
25852: PUSH
25853: LD_EXP 135
25857: PUSH
25858: EMPTY
25859: LIST
25860: LIST
25861: LIST
25862: PUSH
25863: LD_INT 50
25865: PUSH
25866: EMPTY
25867: LIST
25868: PUSH
25869: EMPTY
25870: LIST
25871: LIST
25872: LIST
25873: LIST
25874: PPUSH
25875: CALL_OW 69
25879: ST_TO_ADDR
// if not tmp then
25880: LD_VAR 0 2
25884: NOT
25885: IFFALSE 25889
// continue ;
25887: GO 25684
// HackLink ( i , tmp ) ;
25889: LD_VAR 0 1
25893: PPUSH
25894: LD_VAR 0 2
25898: PPUSH
25899: CALL 26046 0 2
// end ;
25903: GO 25684
25905: POP
25906: POP
// end ;
25907: PPOPN 2
25909: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
25910: LD_INT 0
25912: PPUSH
25913: PPUSH
25914: PPUSH
// if not hack in hackTanks then
25915: LD_VAR 0 1
25919: PUSH
25920: LD_EXP 132
25924: IN
25925: NOT
25926: IFFALSE 25930
// exit ;
25928: GO 26041
// index := GetElementIndex ( hackTanks , hack ) ;
25930: LD_ADDR_VAR 0 4
25934: PUSH
25935: LD_EXP 132
25939: PPUSH
25940: LD_VAR 0 1
25944: PPUSH
25945: CALL 33668 0 2
25949: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
25950: LD_EXP 133
25954: PUSH
25955: LD_VAR 0 4
25959: ARRAY
25960: IFFALSE 26041
// begin for i in hackTanksCaptured [ index ] do
25962: LD_ADDR_VAR 0 3
25966: PUSH
25967: LD_EXP 133
25971: PUSH
25972: LD_VAR 0 4
25976: ARRAY
25977: PUSH
25978: FOR_IN
25979: IFFALSE 26005
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
25981: LD_VAR 0 3
25985: PUSH
25986: LD_INT 1
25988: ARRAY
25989: PPUSH
25990: LD_VAR 0 3
25994: PUSH
25995: LD_INT 2
25997: ARRAY
25998: PPUSH
25999: CALL_OW 235
26003: GO 25978
26005: POP
26006: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
26007: LD_ADDR_EXP 133
26011: PUSH
26012: LD_EXP 133
26016: PPUSH
26017: LD_VAR 0 4
26021: PPUSH
26022: EMPTY
26023: PPUSH
26024: CALL_OW 1
26028: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
26029: LD_VAR 0 1
26033: PPUSH
26034: LD_INT 0
26036: PPUSH
26037: CALL_OW 505
// end ; end ;
26041: LD_VAR 0 2
26045: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
26046: LD_INT 0
26048: PPUSH
26049: PPUSH
26050: PPUSH
// if not hack in hackTanks or not vehicles then
26051: LD_VAR 0 1
26055: PUSH
26056: LD_EXP 132
26060: IN
26061: NOT
26062: PUSH
26063: LD_VAR 0 2
26067: NOT
26068: OR
26069: IFFALSE 26073
// exit ;
26071: GO 26348
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
26073: LD_ADDR_VAR 0 2
26077: PUSH
26078: LD_VAR 0 1
26082: PPUSH
26083: LD_VAR 0 2
26087: PPUSH
26088: LD_INT 1
26090: PPUSH
26091: LD_INT 1
26093: PPUSH
26094: CALL 34318 0 4
26098: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
26099: LD_ADDR_VAR 0 5
26103: PUSH
26104: LD_EXP 132
26108: PPUSH
26109: LD_VAR 0 1
26113: PPUSH
26114: CALL 33668 0 2
26118: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
26119: LD_EXP 133
26123: PUSH
26124: LD_VAR 0 5
26128: ARRAY
26129: PUSH
26130: LD_EXP 134
26134: LESS
26135: IFFALSE 26324
// begin for i := 1 to vehicles do
26137: LD_ADDR_VAR 0 4
26141: PUSH
26142: DOUBLE
26143: LD_INT 1
26145: DEC
26146: ST_TO_ADDR
26147: LD_VAR 0 2
26151: PUSH
26152: FOR_TO
26153: IFFALSE 26322
// begin if hackTanksCaptured [ index ] = hackLimit then
26155: LD_EXP 133
26159: PUSH
26160: LD_VAR 0 5
26164: ARRAY
26165: PUSH
26166: LD_EXP 134
26170: EQUAL
26171: IFFALSE 26175
// break ;
26173: GO 26322
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
26175: LD_ADDR_EXP 136
26179: PUSH
26180: LD_EXP 136
26184: PPUSH
26185: LD_VAR 0 5
26189: PPUSH
26190: LD_EXP 136
26194: PUSH
26195: LD_VAR 0 5
26199: ARRAY
26200: PUSH
26201: LD_INT 1
26203: PLUS
26204: PPUSH
26205: CALL_OW 1
26209: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
26210: LD_ADDR_EXP 133
26214: PUSH
26215: LD_EXP 133
26219: PPUSH
26220: LD_VAR 0 5
26224: PUSH
26225: LD_EXP 133
26229: PUSH
26230: LD_VAR 0 5
26234: ARRAY
26235: PUSH
26236: LD_INT 1
26238: PLUS
26239: PUSH
26240: EMPTY
26241: LIST
26242: LIST
26243: PPUSH
26244: LD_VAR 0 2
26248: PUSH
26249: LD_VAR 0 4
26253: ARRAY
26254: PUSH
26255: LD_VAR 0 2
26259: PUSH
26260: LD_VAR 0 4
26264: ARRAY
26265: PPUSH
26266: CALL_OW 255
26270: PUSH
26271: EMPTY
26272: LIST
26273: LIST
26274: PPUSH
26275: CALL 33883 0 3
26279: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
26280: LD_VAR 0 2
26284: PUSH
26285: LD_VAR 0 4
26289: ARRAY
26290: PPUSH
26291: LD_VAR 0 1
26295: PPUSH
26296: CALL_OW 255
26300: PPUSH
26301: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
26305: LD_VAR 0 2
26309: PUSH
26310: LD_VAR 0 4
26314: ARRAY
26315: PPUSH
26316: CALL_OW 141
// end ;
26320: GO 26152
26322: POP
26323: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
26324: LD_VAR 0 1
26328: PPUSH
26329: LD_EXP 133
26333: PUSH
26334: LD_VAR 0 5
26338: ARRAY
26339: PUSH
26340: LD_INT 0
26342: PLUS
26343: PPUSH
26344: CALL_OW 505
// end ;
26348: LD_VAR 0 3
26352: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
26353: LD_INT 0
26355: PPUSH
26356: PPUSH
26357: PPUSH
26358: PPUSH
// if not hack in hackTanks then
26359: LD_VAR 0 1
26363: PUSH
26364: LD_EXP 132
26368: IN
26369: NOT
26370: IFFALSE 26374
// exit ;
26372: GO 26614
// index := GetElementIndex ( hackTanks , hack ) ;
26374: LD_ADDR_VAR 0 4
26378: PUSH
26379: LD_EXP 132
26383: PPUSH
26384: LD_VAR 0 1
26388: PPUSH
26389: CALL 33668 0 2
26393: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
26394: LD_ADDR_VAR 0 3
26398: PUSH
26399: DOUBLE
26400: LD_EXP 133
26404: PUSH
26405: LD_VAR 0 4
26409: ARRAY
26410: INC
26411: ST_TO_ADDR
26412: LD_INT 1
26414: PUSH
26415: FOR_DOWNTO
26416: IFFALSE 26588
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
26418: LD_ADDR_VAR 0 5
26422: PUSH
26423: LD_EXP 133
26427: PUSH
26428: LD_VAR 0 4
26432: ARRAY
26433: PUSH
26434: LD_VAR 0 3
26438: ARRAY
26439: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
26440: LD_VAR 0 5
26444: PUSH
26445: LD_INT 1
26447: ARRAY
26448: PPUSH
26449: CALL_OW 302
26453: NOT
26454: PUSH
26455: LD_VAR 0 5
26459: PUSH
26460: LD_INT 1
26462: ARRAY
26463: PPUSH
26464: CALL_OW 255
26468: PUSH
26469: LD_VAR 0 1
26473: PPUSH
26474: CALL_OW 255
26478: NONEQUAL
26479: OR
26480: IFFALSE 26586
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
26482: LD_VAR 0 5
26486: PUSH
26487: LD_INT 1
26489: ARRAY
26490: PPUSH
26491: CALL_OW 305
26495: PUSH
26496: LD_VAR 0 5
26500: PUSH
26501: LD_INT 1
26503: ARRAY
26504: PPUSH
26505: CALL_OW 255
26509: PUSH
26510: LD_VAR 0 1
26514: PPUSH
26515: CALL_OW 255
26519: EQUAL
26520: AND
26521: IFFALSE 26545
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
26523: LD_VAR 0 5
26527: PUSH
26528: LD_INT 1
26530: ARRAY
26531: PPUSH
26532: LD_VAR 0 5
26536: PUSH
26537: LD_INT 2
26539: ARRAY
26540: PPUSH
26541: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
26545: LD_ADDR_EXP 133
26549: PUSH
26550: LD_EXP 133
26554: PPUSH
26555: LD_VAR 0 4
26559: PPUSH
26560: LD_EXP 133
26564: PUSH
26565: LD_VAR 0 4
26569: ARRAY
26570: PPUSH
26571: LD_VAR 0 3
26575: PPUSH
26576: CALL_OW 3
26580: PPUSH
26581: CALL_OW 1
26585: ST_TO_ADDR
// end ; end ;
26586: GO 26415
26588: POP
26589: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
26590: LD_VAR 0 1
26594: PPUSH
26595: LD_EXP 133
26599: PUSH
26600: LD_VAR 0 4
26604: ARRAY
26605: PUSH
26606: LD_INT 0
26608: PLUS
26609: PPUSH
26610: CALL_OW 505
// end ;
26614: LD_VAR 0 2
26618: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
26619: LD_INT 0
26621: PPUSH
26622: PPUSH
26623: PPUSH
26624: PPUSH
// if not hack in hackTanks then
26625: LD_VAR 0 1
26629: PUSH
26630: LD_EXP 132
26634: IN
26635: NOT
26636: IFFALSE 26640
// exit ;
26638: GO 26725
// index := GetElementIndex ( hackTanks , hack ) ;
26640: LD_ADDR_VAR 0 5
26644: PUSH
26645: LD_EXP 132
26649: PPUSH
26650: LD_VAR 0 1
26654: PPUSH
26655: CALL 33668 0 2
26659: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
26660: LD_ADDR_VAR 0 4
26664: PUSH
26665: DOUBLE
26666: LD_INT 1
26668: DEC
26669: ST_TO_ADDR
26670: LD_EXP 133
26674: PUSH
26675: LD_VAR 0 5
26679: ARRAY
26680: PUSH
26681: FOR_TO
26682: IFFALSE 26723
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
26684: LD_EXP 133
26688: PUSH
26689: LD_VAR 0 5
26693: ARRAY
26694: PUSH
26695: LD_VAR 0 4
26699: ARRAY
26700: PUSH
26701: LD_INT 1
26703: ARRAY
26704: PUSH
26705: LD_VAR 0 2
26709: EQUAL
26710: IFFALSE 26721
// KillUnit ( vehicle ) ;
26712: LD_VAR 0 2
26716: PPUSH
26717: CALL_OW 66
26721: GO 26681
26723: POP
26724: POP
// end ;
26725: LD_VAR 0 3
26729: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
26730: LD_EXP 137
26734: NOT
26735: IFFALSE 26770
26737: GO 26739
26739: DISABLE
// begin initMiner := true ;
26740: LD_ADDR_EXP 137
26744: PUSH
26745: LD_INT 1
26747: ST_TO_ADDR
// minersList := [ ] ;
26748: LD_ADDR_EXP 138
26752: PUSH
26753: EMPTY
26754: ST_TO_ADDR
// minerMinesList := [ ] ;
26755: LD_ADDR_EXP 139
26759: PUSH
26760: EMPTY
26761: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
26762: LD_ADDR_EXP 140
26766: PUSH
26767: LD_INT 5
26769: ST_TO_ADDR
// end ;
26770: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
26771: LD_EXP 137
26775: PUSH
26776: LD_INT 34
26778: PUSH
26779: LD_EXP 59
26783: PUSH
26784: EMPTY
26785: LIST
26786: LIST
26787: PPUSH
26788: CALL_OW 69
26792: AND
26793: IFFALSE 27256
26795: GO 26797
26797: DISABLE
26798: LD_INT 0
26800: PPUSH
26801: PPUSH
26802: PPUSH
26803: PPUSH
// begin enable ;
26804: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
26805: LD_ADDR_VAR 0 1
26809: PUSH
26810: LD_INT 34
26812: PUSH
26813: LD_EXP 59
26817: PUSH
26818: EMPTY
26819: LIST
26820: LIST
26821: PPUSH
26822: CALL_OW 69
26826: PUSH
26827: FOR_IN
26828: IFFALSE 26900
// begin if not i in minersList then
26830: LD_VAR 0 1
26834: PUSH
26835: LD_EXP 138
26839: IN
26840: NOT
26841: IFFALSE 26898
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
26843: LD_ADDR_EXP 138
26847: PUSH
26848: LD_EXP 138
26852: PPUSH
26853: LD_EXP 138
26857: PUSH
26858: LD_INT 1
26860: PLUS
26861: PPUSH
26862: LD_VAR 0 1
26866: PPUSH
26867: CALL_OW 1
26871: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
26872: LD_ADDR_EXP 139
26876: PUSH
26877: LD_EXP 139
26881: PPUSH
26882: LD_EXP 139
26886: PUSH
26887: LD_INT 1
26889: PLUS
26890: PPUSH
26891: EMPTY
26892: PPUSH
26893: CALL_OW 1
26897: ST_TO_ADDR
// end end ;
26898: GO 26827
26900: POP
26901: POP
// for i := minerMinesList downto 1 do
26902: LD_ADDR_VAR 0 1
26906: PUSH
26907: DOUBLE
26908: LD_EXP 139
26912: INC
26913: ST_TO_ADDR
26914: LD_INT 1
26916: PUSH
26917: FOR_DOWNTO
26918: IFFALSE 27254
// begin if IsLive ( minersList [ i ] ) then
26920: LD_EXP 138
26924: PUSH
26925: LD_VAR 0 1
26929: ARRAY
26930: PPUSH
26931: CALL_OW 300
26935: IFFALSE 26963
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
26937: LD_EXP 138
26941: PUSH
26942: LD_VAR 0 1
26946: ARRAY
26947: PPUSH
26948: LD_EXP 139
26952: PUSH
26953: LD_VAR 0 1
26957: ARRAY
26958: PPUSH
26959: CALL_OW 505
// if not minerMinesList [ i ] then
26963: LD_EXP 139
26967: PUSH
26968: LD_VAR 0 1
26972: ARRAY
26973: NOT
26974: IFFALSE 26978
// continue ;
26976: GO 26917
// for j := minerMinesList [ i ] downto 1 do
26978: LD_ADDR_VAR 0 2
26982: PUSH
26983: DOUBLE
26984: LD_EXP 139
26988: PUSH
26989: LD_VAR 0 1
26993: ARRAY
26994: INC
26995: ST_TO_ADDR
26996: LD_INT 1
26998: PUSH
26999: FOR_DOWNTO
27000: IFFALSE 27250
// begin side := GetSide ( minersList [ i ] ) ;
27002: LD_ADDR_VAR 0 3
27006: PUSH
27007: LD_EXP 138
27011: PUSH
27012: LD_VAR 0 1
27016: ARRAY
27017: PPUSH
27018: CALL_OW 255
27022: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
27023: LD_ADDR_VAR 0 4
27027: PUSH
27028: LD_EXP 139
27032: PUSH
27033: LD_VAR 0 1
27037: ARRAY
27038: PUSH
27039: LD_VAR 0 2
27043: ARRAY
27044: PUSH
27045: LD_INT 1
27047: ARRAY
27048: PPUSH
27049: LD_EXP 139
27053: PUSH
27054: LD_VAR 0 1
27058: ARRAY
27059: PUSH
27060: LD_VAR 0 2
27064: ARRAY
27065: PUSH
27066: LD_INT 2
27068: ARRAY
27069: PPUSH
27070: CALL_OW 428
27074: ST_TO_ADDR
// if not tmp then
27075: LD_VAR 0 4
27079: NOT
27080: IFFALSE 27084
// continue ;
27082: GO 26999
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
27084: LD_VAR 0 4
27088: PUSH
27089: LD_INT 81
27091: PUSH
27092: LD_VAR 0 3
27096: PUSH
27097: EMPTY
27098: LIST
27099: LIST
27100: PPUSH
27101: CALL_OW 69
27105: IN
27106: PUSH
27107: LD_EXP 139
27111: PUSH
27112: LD_VAR 0 1
27116: ARRAY
27117: PUSH
27118: LD_VAR 0 2
27122: ARRAY
27123: PUSH
27124: LD_INT 1
27126: ARRAY
27127: PPUSH
27128: LD_EXP 139
27132: PUSH
27133: LD_VAR 0 1
27137: ARRAY
27138: PUSH
27139: LD_VAR 0 2
27143: ARRAY
27144: PUSH
27145: LD_INT 2
27147: ARRAY
27148: PPUSH
27149: CALL_OW 458
27153: AND
27154: IFFALSE 27248
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
27156: LD_EXP 139
27160: PUSH
27161: LD_VAR 0 1
27165: ARRAY
27166: PUSH
27167: LD_VAR 0 2
27171: ARRAY
27172: PUSH
27173: LD_INT 1
27175: ARRAY
27176: PPUSH
27177: LD_EXP 139
27181: PUSH
27182: LD_VAR 0 1
27186: ARRAY
27187: PUSH
27188: LD_VAR 0 2
27192: ARRAY
27193: PUSH
27194: LD_INT 2
27196: ARRAY
27197: PPUSH
27198: LD_VAR 0 3
27202: PPUSH
27203: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
27207: LD_ADDR_EXP 139
27211: PUSH
27212: LD_EXP 139
27216: PPUSH
27217: LD_VAR 0 1
27221: PPUSH
27222: LD_EXP 139
27226: PUSH
27227: LD_VAR 0 1
27231: ARRAY
27232: PPUSH
27233: LD_VAR 0 2
27237: PPUSH
27238: CALL_OW 3
27242: PPUSH
27243: CALL_OW 1
27247: ST_TO_ADDR
// end ; end ;
27248: GO 26999
27250: POP
27251: POP
// end ;
27252: GO 26917
27254: POP
27255: POP
// end ;
27256: PPOPN 4
27258: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
27259: LD_INT 0
27261: PPUSH
27262: PPUSH
// result := false ;
27263: LD_ADDR_VAR 0 4
27267: PUSH
27268: LD_INT 0
27270: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
27271: LD_VAR 0 1
27275: PPUSH
27276: CALL_OW 264
27280: PUSH
27281: LD_EXP 59
27285: EQUAL
27286: NOT
27287: IFFALSE 27291
// exit ;
27289: GO 27531
// index := GetElementIndex ( minersList , unit ) ;
27291: LD_ADDR_VAR 0 5
27295: PUSH
27296: LD_EXP 138
27300: PPUSH
27301: LD_VAR 0 1
27305: PPUSH
27306: CALL 33668 0 2
27310: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
27311: LD_EXP 139
27315: PUSH
27316: LD_VAR 0 5
27320: ARRAY
27321: PUSH
27322: LD_EXP 140
27326: GREATEREQUAL
27327: IFFALSE 27331
// exit ;
27329: GO 27531
// ComMoveXY ( unit , x , y ) ;
27331: LD_VAR 0 1
27335: PPUSH
27336: LD_VAR 0 2
27340: PPUSH
27341: LD_VAR 0 3
27345: PPUSH
27346: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
27350: LD_INT 35
27352: PPUSH
27353: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
27357: LD_VAR 0 1
27361: PPUSH
27362: LD_VAR 0 2
27366: PPUSH
27367: LD_VAR 0 3
27371: PPUSH
27372: CALL 64954 0 3
27376: NOT
27377: PUSH
27378: LD_VAR 0 1
27382: PPUSH
27383: CALL_OW 314
27387: AND
27388: IFFALSE 27392
// exit ;
27390: GO 27531
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
27392: LD_VAR 0 2
27396: PPUSH
27397: LD_VAR 0 3
27401: PPUSH
27402: CALL_OW 428
27406: PUSH
27407: LD_VAR 0 1
27411: EQUAL
27412: PUSH
27413: LD_VAR 0 1
27417: PPUSH
27418: CALL_OW 314
27422: NOT
27423: AND
27424: IFFALSE 27350
// PlaySoundXY ( x , y , PlantMine ) ;
27426: LD_VAR 0 2
27430: PPUSH
27431: LD_VAR 0 3
27435: PPUSH
27436: LD_STRING PlantMine
27438: PPUSH
27439: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
27443: LD_VAR 0 2
27447: PPUSH
27448: LD_VAR 0 3
27452: PPUSH
27453: LD_VAR 0 1
27457: PPUSH
27458: CALL_OW 255
27462: PPUSH
27463: LD_INT 0
27465: PPUSH
27466: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
27470: LD_ADDR_EXP 139
27474: PUSH
27475: LD_EXP 139
27479: PPUSH
27480: LD_VAR 0 5
27484: PUSH
27485: LD_EXP 139
27489: PUSH
27490: LD_VAR 0 5
27494: ARRAY
27495: PUSH
27496: LD_INT 1
27498: PLUS
27499: PUSH
27500: EMPTY
27501: LIST
27502: LIST
27503: PPUSH
27504: LD_VAR 0 2
27508: PUSH
27509: LD_VAR 0 3
27513: PUSH
27514: EMPTY
27515: LIST
27516: LIST
27517: PPUSH
27518: CALL 33883 0 3
27522: ST_TO_ADDR
// result := true ;
27523: LD_ADDR_VAR 0 4
27527: PUSH
27528: LD_INT 1
27530: ST_TO_ADDR
// end ;
27531: LD_VAR 0 4
27535: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
27536: LD_INT 0
27538: PPUSH
27539: PPUSH
27540: PPUSH
// if not unit in minersList then
27541: LD_VAR 0 1
27545: PUSH
27546: LD_EXP 138
27550: IN
27551: NOT
27552: IFFALSE 27556
// exit ;
27554: GO 27948
// index := GetElementIndex ( minersList , unit ) ;
27556: LD_ADDR_VAR 0 6
27560: PUSH
27561: LD_EXP 138
27565: PPUSH
27566: LD_VAR 0 1
27570: PPUSH
27571: CALL 33668 0 2
27575: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
27576: LD_ADDR_VAR 0 5
27580: PUSH
27581: DOUBLE
27582: LD_EXP 139
27586: PUSH
27587: LD_VAR 0 6
27591: ARRAY
27592: INC
27593: ST_TO_ADDR
27594: LD_INT 1
27596: PUSH
27597: FOR_DOWNTO
27598: IFFALSE 27759
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
27600: LD_EXP 139
27604: PUSH
27605: LD_VAR 0 6
27609: ARRAY
27610: PUSH
27611: LD_VAR 0 5
27615: ARRAY
27616: PUSH
27617: LD_INT 1
27619: ARRAY
27620: PUSH
27621: LD_VAR 0 2
27625: EQUAL
27626: PUSH
27627: LD_EXP 139
27631: PUSH
27632: LD_VAR 0 6
27636: ARRAY
27637: PUSH
27638: LD_VAR 0 5
27642: ARRAY
27643: PUSH
27644: LD_INT 2
27646: ARRAY
27647: PUSH
27648: LD_VAR 0 3
27652: EQUAL
27653: AND
27654: IFFALSE 27757
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
27656: LD_EXP 139
27660: PUSH
27661: LD_VAR 0 6
27665: ARRAY
27666: PUSH
27667: LD_VAR 0 5
27671: ARRAY
27672: PUSH
27673: LD_INT 1
27675: ARRAY
27676: PPUSH
27677: LD_EXP 139
27681: PUSH
27682: LD_VAR 0 6
27686: ARRAY
27687: PUSH
27688: LD_VAR 0 5
27692: ARRAY
27693: PUSH
27694: LD_INT 2
27696: ARRAY
27697: PPUSH
27698: LD_VAR 0 1
27702: PPUSH
27703: CALL_OW 255
27707: PPUSH
27708: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
27712: LD_ADDR_EXP 139
27716: PUSH
27717: LD_EXP 139
27721: PPUSH
27722: LD_VAR 0 6
27726: PPUSH
27727: LD_EXP 139
27731: PUSH
27732: LD_VAR 0 6
27736: ARRAY
27737: PPUSH
27738: LD_VAR 0 5
27742: PPUSH
27743: CALL_OW 3
27747: PPUSH
27748: CALL_OW 1
27752: ST_TO_ADDR
// exit ;
27753: POP
27754: POP
27755: GO 27948
// end ; end ;
27757: GO 27597
27759: POP
27760: POP
// for i := minerMinesList [ index ] downto 1 do
27761: LD_ADDR_VAR 0 5
27765: PUSH
27766: DOUBLE
27767: LD_EXP 139
27771: PUSH
27772: LD_VAR 0 6
27776: ARRAY
27777: INC
27778: ST_TO_ADDR
27779: LD_INT 1
27781: PUSH
27782: FOR_DOWNTO
27783: IFFALSE 27946
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
27785: LD_EXP 139
27789: PUSH
27790: LD_VAR 0 6
27794: ARRAY
27795: PUSH
27796: LD_VAR 0 5
27800: ARRAY
27801: PUSH
27802: LD_INT 1
27804: ARRAY
27805: PPUSH
27806: LD_EXP 139
27810: PUSH
27811: LD_VAR 0 6
27815: ARRAY
27816: PUSH
27817: LD_VAR 0 5
27821: ARRAY
27822: PUSH
27823: LD_INT 2
27825: ARRAY
27826: PPUSH
27827: LD_VAR 0 2
27831: PPUSH
27832: LD_VAR 0 3
27836: PPUSH
27837: CALL_OW 298
27841: PUSH
27842: LD_INT 6
27844: LESS
27845: IFFALSE 27944
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
27847: LD_EXP 139
27851: PUSH
27852: LD_VAR 0 6
27856: ARRAY
27857: PUSH
27858: LD_VAR 0 5
27862: ARRAY
27863: PUSH
27864: LD_INT 1
27866: ARRAY
27867: PPUSH
27868: LD_EXP 139
27872: PUSH
27873: LD_VAR 0 6
27877: ARRAY
27878: PUSH
27879: LD_VAR 0 5
27883: ARRAY
27884: PUSH
27885: LD_INT 2
27887: ARRAY
27888: PPUSH
27889: LD_VAR 0 1
27893: PPUSH
27894: CALL_OW 255
27898: PPUSH
27899: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
27903: LD_ADDR_EXP 139
27907: PUSH
27908: LD_EXP 139
27912: PPUSH
27913: LD_VAR 0 6
27917: PPUSH
27918: LD_EXP 139
27922: PUSH
27923: LD_VAR 0 6
27927: ARRAY
27928: PPUSH
27929: LD_VAR 0 5
27933: PPUSH
27934: CALL_OW 3
27938: PPUSH
27939: CALL_OW 1
27943: ST_TO_ADDR
// end ; end ;
27944: GO 27782
27946: POP
27947: POP
// end ;
27948: LD_VAR 0 4
27952: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
27953: LD_INT 0
27955: PPUSH
27956: PPUSH
27957: PPUSH
27958: PPUSH
27959: PPUSH
27960: PPUSH
27961: PPUSH
27962: PPUSH
27963: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
27964: LD_VAR 0 1
27968: PPUSH
27969: CALL_OW 264
27973: PUSH
27974: LD_EXP 59
27978: EQUAL
27979: NOT
27980: PUSH
27981: LD_VAR 0 1
27985: PUSH
27986: LD_EXP 138
27990: IN
27991: NOT
27992: OR
27993: IFFALSE 27997
// exit ;
27995: GO 28319
// index := GetElementIndex ( minersList , unit ) ;
27997: LD_ADDR_VAR 0 6
28001: PUSH
28002: LD_EXP 138
28006: PPUSH
28007: LD_VAR 0 1
28011: PPUSH
28012: CALL 33668 0 2
28016: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
28017: LD_ADDR_VAR 0 8
28021: PUSH
28022: LD_EXP 140
28026: PUSH
28027: LD_EXP 139
28031: PUSH
28032: LD_VAR 0 6
28036: ARRAY
28037: MINUS
28038: ST_TO_ADDR
// if not minesFreeAmount then
28039: LD_VAR 0 8
28043: NOT
28044: IFFALSE 28048
// exit ;
28046: GO 28319
// tmp := [ ] ;
28048: LD_ADDR_VAR 0 7
28052: PUSH
28053: EMPTY
28054: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
28055: LD_ADDR_VAR 0 5
28059: PUSH
28060: DOUBLE
28061: LD_INT 1
28063: DEC
28064: ST_TO_ADDR
28065: LD_VAR 0 8
28069: PUSH
28070: FOR_TO
28071: IFFALSE 28266
// begin _d := rand ( 0 , 5 ) ;
28073: LD_ADDR_VAR 0 11
28077: PUSH
28078: LD_INT 0
28080: PPUSH
28081: LD_INT 5
28083: PPUSH
28084: CALL_OW 12
28088: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
28089: LD_ADDR_VAR 0 12
28093: PUSH
28094: LD_INT 2
28096: PPUSH
28097: LD_INT 6
28099: PPUSH
28100: CALL_OW 12
28104: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
28105: LD_ADDR_VAR 0 9
28109: PUSH
28110: LD_VAR 0 2
28114: PPUSH
28115: LD_VAR 0 11
28119: PPUSH
28120: LD_VAR 0 12
28124: PPUSH
28125: CALL_OW 272
28129: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
28130: LD_ADDR_VAR 0 10
28134: PUSH
28135: LD_VAR 0 3
28139: PPUSH
28140: LD_VAR 0 11
28144: PPUSH
28145: LD_VAR 0 12
28149: PPUSH
28150: CALL_OW 273
28154: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
28155: LD_VAR 0 9
28159: PPUSH
28160: LD_VAR 0 10
28164: PPUSH
28165: CALL_OW 488
28169: PUSH
28170: LD_VAR 0 9
28174: PUSH
28175: LD_VAR 0 10
28179: PUSH
28180: EMPTY
28181: LIST
28182: LIST
28183: PUSH
28184: LD_VAR 0 7
28188: IN
28189: NOT
28190: AND
28191: PUSH
28192: LD_VAR 0 9
28196: PPUSH
28197: LD_VAR 0 10
28201: PPUSH
28202: CALL_OW 458
28206: NOT
28207: AND
28208: IFFALSE 28250
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
28210: LD_ADDR_VAR 0 7
28214: PUSH
28215: LD_VAR 0 7
28219: PPUSH
28220: LD_VAR 0 7
28224: PUSH
28225: LD_INT 1
28227: PLUS
28228: PPUSH
28229: LD_VAR 0 9
28233: PUSH
28234: LD_VAR 0 10
28238: PUSH
28239: EMPTY
28240: LIST
28241: LIST
28242: PPUSH
28243: CALL_OW 1
28247: ST_TO_ADDR
28248: GO 28264
// i := i - 1 ;
28250: LD_ADDR_VAR 0 5
28254: PUSH
28255: LD_VAR 0 5
28259: PUSH
28260: LD_INT 1
28262: MINUS
28263: ST_TO_ADDR
// end ;
28264: GO 28070
28266: POP
28267: POP
// for i in tmp do
28268: LD_ADDR_VAR 0 5
28272: PUSH
28273: LD_VAR 0 7
28277: PUSH
28278: FOR_IN
28279: IFFALSE 28317
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
28281: LD_VAR 0 1
28285: PPUSH
28286: LD_VAR 0 5
28290: PUSH
28291: LD_INT 1
28293: ARRAY
28294: PPUSH
28295: LD_VAR 0 5
28299: PUSH
28300: LD_INT 2
28302: ARRAY
28303: PPUSH
28304: CALL 27259 0 3
28308: NOT
28309: IFFALSE 28315
// exit ;
28311: POP
28312: POP
28313: GO 28319
28315: GO 28278
28317: POP
28318: POP
// end ;
28319: LD_VAR 0 4
28323: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
28324: LD_INT 0
28326: PPUSH
28327: PPUSH
28328: PPUSH
28329: PPUSH
28330: PPUSH
28331: PPUSH
28332: PPUSH
// if not GetClass ( unit ) = class_sniper then
28333: LD_VAR 0 1
28337: PPUSH
28338: CALL_OW 257
28342: PUSH
28343: LD_INT 5
28345: EQUAL
28346: NOT
28347: IFFALSE 28351
// exit ;
28349: GO 28739
// dist := 8 ;
28351: LD_ADDR_VAR 0 5
28355: PUSH
28356: LD_INT 8
28358: ST_TO_ADDR
// viewRange := 12 ;
28359: LD_ADDR_VAR 0 7
28363: PUSH
28364: LD_INT 12
28366: ST_TO_ADDR
// side := GetSide ( unit ) ;
28367: LD_ADDR_VAR 0 6
28371: PUSH
28372: LD_VAR 0 1
28376: PPUSH
28377: CALL_OW 255
28381: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
28382: LD_INT 61
28384: PPUSH
28385: LD_VAR 0 6
28389: PPUSH
28390: CALL_OW 321
28394: PUSH
28395: LD_INT 2
28397: EQUAL
28398: IFFALSE 28408
// viewRange := 16 ;
28400: LD_ADDR_VAR 0 7
28404: PUSH
28405: LD_INT 16
28407: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
28408: LD_VAR 0 1
28412: PPUSH
28413: LD_VAR 0 2
28417: PPUSH
28418: LD_VAR 0 3
28422: PPUSH
28423: CALL_OW 297
28427: PUSH
28428: LD_VAR 0 5
28432: GREATER
28433: IFFALSE 28512
// begin ComMoveXY ( unit , x , y ) ;
28435: LD_VAR 0 1
28439: PPUSH
28440: LD_VAR 0 2
28444: PPUSH
28445: LD_VAR 0 3
28449: PPUSH
28450: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
28454: LD_INT 35
28456: PPUSH
28457: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
28461: LD_VAR 0 1
28465: PPUSH
28466: LD_VAR 0 2
28470: PPUSH
28471: LD_VAR 0 3
28475: PPUSH
28476: CALL 64954 0 3
28480: NOT
28481: IFFALSE 28485
// exit ;
28483: GO 28739
// until GetDistUnitXY ( unit , x , y ) < dist ;
28485: LD_VAR 0 1
28489: PPUSH
28490: LD_VAR 0 2
28494: PPUSH
28495: LD_VAR 0 3
28499: PPUSH
28500: CALL_OW 297
28504: PUSH
28505: LD_VAR 0 5
28509: LESS
28510: IFFALSE 28454
// end ; ComTurnXY ( unit , x , y ) ;
28512: LD_VAR 0 1
28516: PPUSH
28517: LD_VAR 0 2
28521: PPUSH
28522: LD_VAR 0 3
28526: PPUSH
28527: CALL_OW 118
// wait ( 5 ) ;
28531: LD_INT 5
28533: PPUSH
28534: CALL_OW 67
// _d := GetDir ( unit ) ;
28538: LD_ADDR_VAR 0 10
28542: PUSH
28543: LD_VAR 0 1
28547: PPUSH
28548: CALL_OW 254
28552: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
28553: LD_ADDR_VAR 0 8
28557: PUSH
28558: LD_VAR 0 1
28562: PPUSH
28563: CALL_OW 250
28567: PPUSH
28568: LD_VAR 0 10
28572: PPUSH
28573: LD_VAR 0 5
28577: PPUSH
28578: CALL_OW 272
28582: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
28583: LD_ADDR_VAR 0 9
28587: PUSH
28588: LD_VAR 0 1
28592: PPUSH
28593: CALL_OW 251
28597: PPUSH
28598: LD_VAR 0 10
28602: PPUSH
28603: LD_VAR 0 5
28607: PPUSH
28608: CALL_OW 273
28612: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28613: LD_VAR 0 8
28617: PPUSH
28618: LD_VAR 0 9
28622: PPUSH
28623: CALL_OW 488
28627: NOT
28628: IFFALSE 28632
// exit ;
28630: GO 28739
// ComAnimCustom ( unit , 1 ) ;
28632: LD_VAR 0 1
28636: PPUSH
28637: LD_INT 1
28639: PPUSH
28640: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
28644: LD_VAR 0 8
28648: PPUSH
28649: LD_VAR 0 9
28653: PPUSH
28654: LD_VAR 0 6
28658: PPUSH
28659: LD_VAR 0 7
28663: PPUSH
28664: CALL_OW 330
// repeat wait ( 1 ) ;
28668: LD_INT 1
28670: PPUSH
28671: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
28675: LD_VAR 0 1
28679: PPUSH
28680: CALL_OW 316
28684: PUSH
28685: LD_VAR 0 1
28689: PPUSH
28690: CALL_OW 314
28694: OR
28695: PUSH
28696: LD_VAR 0 1
28700: PPUSH
28701: CALL_OW 302
28705: NOT
28706: OR
28707: PUSH
28708: LD_VAR 0 1
28712: PPUSH
28713: CALL_OW 301
28717: OR
28718: IFFALSE 28668
// RemoveSeeing ( _x , _y , side ) ;
28720: LD_VAR 0 8
28724: PPUSH
28725: LD_VAR 0 9
28729: PPUSH
28730: LD_VAR 0 6
28734: PPUSH
28735: CALL_OW 331
// end ; end_of_file
28739: LD_VAR 0 4
28743: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
28744: LD_INT 0
28746: PPUSH
28747: PPUSH
// if exist_mode then
28748: LD_VAR 0 2
28752: IFFALSE 28777
// unit := CreateCharacter ( prefix & ident ) else
28754: LD_ADDR_VAR 0 5
28758: PUSH
28759: LD_VAR 0 3
28763: PUSH
28764: LD_VAR 0 1
28768: STR
28769: PPUSH
28770: CALL_OW 34
28774: ST_TO_ADDR
28775: GO 28792
// unit := NewCharacter ( ident ) ;
28777: LD_ADDR_VAR 0 5
28781: PUSH
28782: LD_VAR 0 1
28786: PPUSH
28787: CALL_OW 25
28791: ST_TO_ADDR
// result := unit ;
28792: LD_ADDR_VAR 0 4
28796: PUSH
28797: LD_VAR 0 5
28801: ST_TO_ADDR
// end ;
28802: LD_VAR 0 4
28806: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
28807: LD_INT 0
28809: PPUSH
28810: PPUSH
// if not side or not nation then
28811: LD_VAR 0 1
28815: NOT
28816: PUSH
28817: LD_VAR 0 2
28821: NOT
28822: OR
28823: IFFALSE 28827
// exit ;
28825: GO 29595
// case nation of nation_american :
28827: LD_VAR 0 2
28831: PUSH
28832: LD_INT 1
28834: DOUBLE
28835: EQUAL
28836: IFTRUE 28840
28838: GO 29054
28840: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
28841: LD_ADDR_VAR 0 4
28845: PUSH
28846: LD_INT 35
28848: PUSH
28849: LD_INT 45
28851: PUSH
28852: LD_INT 46
28854: PUSH
28855: LD_INT 47
28857: PUSH
28858: LD_INT 82
28860: PUSH
28861: LD_INT 83
28863: PUSH
28864: LD_INT 84
28866: PUSH
28867: LD_INT 85
28869: PUSH
28870: LD_INT 86
28872: PUSH
28873: LD_INT 1
28875: PUSH
28876: LD_INT 2
28878: PUSH
28879: LD_INT 6
28881: PUSH
28882: LD_INT 15
28884: PUSH
28885: LD_INT 16
28887: PUSH
28888: LD_INT 7
28890: PUSH
28891: LD_INT 12
28893: PUSH
28894: LD_INT 13
28896: PUSH
28897: LD_INT 10
28899: PUSH
28900: LD_INT 14
28902: PUSH
28903: LD_INT 20
28905: PUSH
28906: LD_INT 21
28908: PUSH
28909: LD_INT 22
28911: PUSH
28912: LD_INT 25
28914: PUSH
28915: LD_INT 32
28917: PUSH
28918: LD_INT 27
28920: PUSH
28921: LD_INT 36
28923: PUSH
28924: LD_INT 69
28926: PUSH
28927: LD_INT 39
28929: PUSH
28930: LD_INT 34
28932: PUSH
28933: LD_INT 40
28935: PUSH
28936: LD_INT 48
28938: PUSH
28939: LD_INT 49
28941: PUSH
28942: LD_INT 50
28944: PUSH
28945: LD_INT 51
28947: PUSH
28948: LD_INT 52
28950: PUSH
28951: LD_INT 53
28953: PUSH
28954: LD_INT 54
28956: PUSH
28957: LD_INT 55
28959: PUSH
28960: LD_INT 56
28962: PUSH
28963: LD_INT 57
28965: PUSH
28966: LD_INT 58
28968: PUSH
28969: LD_INT 59
28971: PUSH
28972: LD_INT 60
28974: PUSH
28975: LD_INT 61
28977: PUSH
28978: LD_INT 62
28980: PUSH
28981: LD_INT 80
28983: PUSH
28984: LD_INT 82
28986: PUSH
28987: LD_INT 83
28989: PUSH
28990: LD_INT 84
28992: PUSH
28993: LD_INT 85
28995: PUSH
28996: LD_INT 86
28998: PUSH
28999: EMPTY
29000: LIST
29001: LIST
29002: LIST
29003: LIST
29004: LIST
29005: LIST
29006: LIST
29007: LIST
29008: LIST
29009: LIST
29010: LIST
29011: LIST
29012: LIST
29013: LIST
29014: LIST
29015: LIST
29016: LIST
29017: LIST
29018: LIST
29019: LIST
29020: LIST
29021: LIST
29022: LIST
29023: LIST
29024: LIST
29025: LIST
29026: LIST
29027: LIST
29028: LIST
29029: LIST
29030: LIST
29031: LIST
29032: LIST
29033: LIST
29034: LIST
29035: LIST
29036: LIST
29037: LIST
29038: LIST
29039: LIST
29040: LIST
29041: LIST
29042: LIST
29043: LIST
29044: LIST
29045: LIST
29046: LIST
29047: LIST
29048: LIST
29049: LIST
29050: LIST
29051: ST_TO_ADDR
29052: GO 29519
29054: LD_INT 2
29056: DOUBLE
29057: EQUAL
29058: IFTRUE 29062
29060: GO 29288
29062: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
29063: LD_ADDR_VAR 0 4
29067: PUSH
29068: LD_INT 35
29070: PUSH
29071: LD_INT 45
29073: PUSH
29074: LD_INT 46
29076: PUSH
29077: LD_INT 47
29079: PUSH
29080: LD_INT 82
29082: PUSH
29083: LD_INT 83
29085: PUSH
29086: LD_INT 84
29088: PUSH
29089: LD_INT 85
29091: PUSH
29092: LD_INT 87
29094: PUSH
29095: LD_INT 70
29097: PUSH
29098: LD_INT 1
29100: PUSH
29101: LD_INT 11
29103: PUSH
29104: LD_INT 3
29106: PUSH
29107: LD_INT 4
29109: PUSH
29110: LD_INT 5
29112: PUSH
29113: LD_INT 6
29115: PUSH
29116: LD_INT 15
29118: PUSH
29119: LD_INT 18
29121: PUSH
29122: LD_INT 7
29124: PUSH
29125: LD_INT 17
29127: PUSH
29128: LD_INT 8
29130: PUSH
29131: LD_INT 20
29133: PUSH
29134: LD_INT 21
29136: PUSH
29137: LD_INT 22
29139: PUSH
29140: LD_INT 72
29142: PUSH
29143: LD_INT 26
29145: PUSH
29146: LD_INT 69
29148: PUSH
29149: LD_INT 39
29151: PUSH
29152: LD_INT 40
29154: PUSH
29155: LD_INT 41
29157: PUSH
29158: LD_INT 42
29160: PUSH
29161: LD_INT 43
29163: PUSH
29164: LD_INT 48
29166: PUSH
29167: LD_INT 49
29169: PUSH
29170: LD_INT 50
29172: PUSH
29173: LD_INT 51
29175: PUSH
29176: LD_INT 52
29178: PUSH
29179: LD_INT 53
29181: PUSH
29182: LD_INT 54
29184: PUSH
29185: LD_INT 55
29187: PUSH
29188: LD_INT 56
29190: PUSH
29191: LD_INT 60
29193: PUSH
29194: LD_INT 61
29196: PUSH
29197: LD_INT 62
29199: PUSH
29200: LD_INT 66
29202: PUSH
29203: LD_INT 67
29205: PUSH
29206: LD_INT 68
29208: PUSH
29209: LD_INT 81
29211: PUSH
29212: LD_INT 82
29214: PUSH
29215: LD_INT 83
29217: PUSH
29218: LD_INT 84
29220: PUSH
29221: LD_INT 85
29223: PUSH
29224: LD_INT 87
29226: PUSH
29227: LD_INT 88
29229: PUSH
29230: EMPTY
29231: LIST
29232: LIST
29233: LIST
29234: LIST
29235: LIST
29236: LIST
29237: LIST
29238: LIST
29239: LIST
29240: LIST
29241: LIST
29242: LIST
29243: LIST
29244: LIST
29245: LIST
29246: LIST
29247: LIST
29248: LIST
29249: LIST
29250: LIST
29251: LIST
29252: LIST
29253: LIST
29254: LIST
29255: LIST
29256: LIST
29257: LIST
29258: LIST
29259: LIST
29260: LIST
29261: LIST
29262: LIST
29263: LIST
29264: LIST
29265: LIST
29266: LIST
29267: LIST
29268: LIST
29269: LIST
29270: LIST
29271: LIST
29272: LIST
29273: LIST
29274: LIST
29275: LIST
29276: LIST
29277: LIST
29278: LIST
29279: LIST
29280: LIST
29281: LIST
29282: LIST
29283: LIST
29284: LIST
29285: ST_TO_ADDR
29286: GO 29519
29288: LD_INT 3
29290: DOUBLE
29291: EQUAL
29292: IFTRUE 29296
29294: GO 29518
29296: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
29297: LD_ADDR_VAR 0 4
29301: PUSH
29302: LD_INT 46
29304: PUSH
29305: LD_INT 47
29307: PUSH
29308: LD_INT 1
29310: PUSH
29311: LD_INT 2
29313: PUSH
29314: LD_INT 82
29316: PUSH
29317: LD_INT 83
29319: PUSH
29320: LD_INT 84
29322: PUSH
29323: LD_INT 85
29325: PUSH
29326: LD_INT 86
29328: PUSH
29329: LD_INT 11
29331: PUSH
29332: LD_INT 9
29334: PUSH
29335: LD_INT 20
29337: PUSH
29338: LD_INT 19
29340: PUSH
29341: LD_INT 21
29343: PUSH
29344: LD_INT 24
29346: PUSH
29347: LD_INT 22
29349: PUSH
29350: LD_INT 25
29352: PUSH
29353: LD_INT 28
29355: PUSH
29356: LD_INT 29
29358: PUSH
29359: LD_INT 30
29361: PUSH
29362: LD_INT 31
29364: PUSH
29365: LD_INT 37
29367: PUSH
29368: LD_INT 38
29370: PUSH
29371: LD_INT 32
29373: PUSH
29374: LD_INT 27
29376: PUSH
29377: LD_INT 33
29379: PUSH
29380: LD_INT 69
29382: PUSH
29383: LD_INT 39
29385: PUSH
29386: LD_INT 34
29388: PUSH
29389: LD_INT 40
29391: PUSH
29392: LD_INT 71
29394: PUSH
29395: LD_INT 23
29397: PUSH
29398: LD_INT 44
29400: PUSH
29401: LD_INT 48
29403: PUSH
29404: LD_INT 49
29406: PUSH
29407: LD_INT 50
29409: PUSH
29410: LD_INT 51
29412: PUSH
29413: LD_INT 52
29415: PUSH
29416: LD_INT 53
29418: PUSH
29419: LD_INT 54
29421: PUSH
29422: LD_INT 55
29424: PUSH
29425: LD_INT 56
29427: PUSH
29428: LD_INT 57
29430: PUSH
29431: LD_INT 58
29433: PUSH
29434: LD_INT 59
29436: PUSH
29437: LD_INT 63
29439: PUSH
29440: LD_INT 64
29442: PUSH
29443: LD_INT 65
29445: PUSH
29446: LD_INT 82
29448: PUSH
29449: LD_INT 83
29451: PUSH
29452: LD_INT 84
29454: PUSH
29455: LD_INT 85
29457: PUSH
29458: LD_INT 86
29460: PUSH
29461: EMPTY
29462: LIST
29463: LIST
29464: LIST
29465: LIST
29466: LIST
29467: LIST
29468: LIST
29469: LIST
29470: LIST
29471: LIST
29472: LIST
29473: LIST
29474: LIST
29475: LIST
29476: LIST
29477: LIST
29478: LIST
29479: LIST
29480: LIST
29481: LIST
29482: LIST
29483: LIST
29484: LIST
29485: LIST
29486: LIST
29487: LIST
29488: LIST
29489: LIST
29490: LIST
29491: LIST
29492: LIST
29493: LIST
29494: LIST
29495: LIST
29496: LIST
29497: LIST
29498: LIST
29499: LIST
29500: LIST
29501: LIST
29502: LIST
29503: LIST
29504: LIST
29505: LIST
29506: LIST
29507: LIST
29508: LIST
29509: LIST
29510: LIST
29511: LIST
29512: LIST
29513: LIST
29514: LIST
29515: ST_TO_ADDR
29516: GO 29519
29518: POP
// if state > - 1 and state < 3 then
29519: LD_VAR 0 3
29523: PUSH
29524: LD_INT 1
29526: NEG
29527: GREATER
29528: PUSH
29529: LD_VAR 0 3
29533: PUSH
29534: LD_INT 3
29536: LESS
29537: AND
29538: IFFALSE 29595
// for i in result do
29540: LD_ADDR_VAR 0 5
29544: PUSH
29545: LD_VAR 0 4
29549: PUSH
29550: FOR_IN
29551: IFFALSE 29593
// if GetTech ( i , side ) <> state then
29553: LD_VAR 0 5
29557: PPUSH
29558: LD_VAR 0 1
29562: PPUSH
29563: CALL_OW 321
29567: PUSH
29568: LD_VAR 0 3
29572: NONEQUAL
29573: IFFALSE 29591
// result := result diff i ;
29575: LD_ADDR_VAR 0 4
29579: PUSH
29580: LD_VAR 0 4
29584: PUSH
29585: LD_VAR 0 5
29589: DIFF
29590: ST_TO_ADDR
29591: GO 29550
29593: POP
29594: POP
// end ;
29595: LD_VAR 0 4
29599: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
29600: LD_INT 0
29602: PPUSH
29603: PPUSH
29604: PPUSH
// result := true ;
29605: LD_ADDR_VAR 0 3
29609: PUSH
29610: LD_INT 1
29612: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
29613: LD_ADDR_VAR 0 5
29617: PUSH
29618: LD_VAR 0 2
29622: PPUSH
29623: CALL_OW 480
29627: ST_TO_ADDR
// if not tmp then
29628: LD_VAR 0 5
29632: NOT
29633: IFFALSE 29637
// exit ;
29635: GO 29686
// for i in tmp do
29637: LD_ADDR_VAR 0 4
29641: PUSH
29642: LD_VAR 0 5
29646: PUSH
29647: FOR_IN
29648: IFFALSE 29684
// if GetTech ( i , side ) <> state_researched then
29650: LD_VAR 0 4
29654: PPUSH
29655: LD_VAR 0 1
29659: PPUSH
29660: CALL_OW 321
29664: PUSH
29665: LD_INT 2
29667: NONEQUAL
29668: IFFALSE 29682
// begin result := false ;
29670: LD_ADDR_VAR 0 3
29674: PUSH
29675: LD_INT 0
29677: ST_TO_ADDR
// exit ;
29678: POP
29679: POP
29680: GO 29686
// end ;
29682: GO 29647
29684: POP
29685: POP
// end ;
29686: LD_VAR 0 3
29690: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
29691: LD_INT 0
29693: PPUSH
29694: PPUSH
29695: PPUSH
29696: PPUSH
29697: PPUSH
29698: PPUSH
29699: PPUSH
29700: PPUSH
29701: PPUSH
29702: PPUSH
29703: PPUSH
29704: PPUSH
29705: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
29706: LD_VAR 0 1
29710: NOT
29711: PUSH
29712: LD_VAR 0 1
29716: PPUSH
29717: CALL_OW 257
29721: PUSH
29722: LD_INT 9
29724: NONEQUAL
29725: OR
29726: IFFALSE 29730
// exit ;
29728: GO 30303
// side := GetSide ( unit ) ;
29730: LD_ADDR_VAR 0 9
29734: PUSH
29735: LD_VAR 0 1
29739: PPUSH
29740: CALL_OW 255
29744: ST_TO_ADDR
// tech_space := tech_spacanom ;
29745: LD_ADDR_VAR 0 12
29749: PUSH
29750: LD_INT 29
29752: ST_TO_ADDR
// tech_time := tech_taurad ;
29753: LD_ADDR_VAR 0 13
29757: PUSH
29758: LD_INT 28
29760: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
29761: LD_ADDR_VAR 0 11
29765: PUSH
29766: LD_VAR 0 1
29770: PPUSH
29771: CALL_OW 310
29775: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
29776: LD_VAR 0 11
29780: PPUSH
29781: CALL_OW 247
29785: PUSH
29786: LD_INT 2
29788: EQUAL
29789: IFFALSE 29793
// exit ;
29791: GO 30303
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29793: LD_ADDR_VAR 0 8
29797: PUSH
29798: LD_INT 81
29800: PUSH
29801: LD_VAR 0 9
29805: PUSH
29806: EMPTY
29807: LIST
29808: LIST
29809: PUSH
29810: LD_INT 3
29812: PUSH
29813: LD_INT 21
29815: PUSH
29816: LD_INT 3
29818: PUSH
29819: EMPTY
29820: LIST
29821: LIST
29822: PUSH
29823: EMPTY
29824: LIST
29825: LIST
29826: PUSH
29827: EMPTY
29828: LIST
29829: LIST
29830: PPUSH
29831: CALL_OW 69
29835: ST_TO_ADDR
// if not tmp then
29836: LD_VAR 0 8
29840: NOT
29841: IFFALSE 29845
// exit ;
29843: GO 30303
// if in_unit then
29845: LD_VAR 0 11
29849: IFFALSE 29873
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
29851: LD_ADDR_VAR 0 10
29855: PUSH
29856: LD_VAR 0 8
29860: PPUSH
29861: LD_VAR 0 11
29865: PPUSH
29866: CALL_OW 74
29870: ST_TO_ADDR
29871: GO 29893
// enemy := NearestUnitToUnit ( tmp , unit ) ;
29873: LD_ADDR_VAR 0 10
29877: PUSH
29878: LD_VAR 0 8
29882: PPUSH
29883: LD_VAR 0 1
29887: PPUSH
29888: CALL_OW 74
29892: ST_TO_ADDR
// if not enemy then
29893: LD_VAR 0 10
29897: NOT
29898: IFFALSE 29902
// exit ;
29900: GO 30303
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
29902: LD_VAR 0 11
29906: PUSH
29907: LD_VAR 0 11
29911: PPUSH
29912: LD_VAR 0 10
29916: PPUSH
29917: CALL_OW 296
29921: PUSH
29922: LD_INT 13
29924: GREATER
29925: AND
29926: PUSH
29927: LD_VAR 0 1
29931: PPUSH
29932: LD_VAR 0 10
29936: PPUSH
29937: CALL_OW 296
29941: PUSH
29942: LD_INT 12
29944: GREATER
29945: OR
29946: IFFALSE 29950
// exit ;
29948: GO 30303
// missile := [ 1 ] ;
29950: LD_ADDR_VAR 0 14
29954: PUSH
29955: LD_INT 1
29957: PUSH
29958: EMPTY
29959: LIST
29960: ST_TO_ADDR
// if Researched ( side , tech_space ) then
29961: LD_VAR 0 9
29965: PPUSH
29966: LD_VAR 0 12
29970: PPUSH
29971: CALL_OW 325
29975: IFFALSE 30004
// missile := Replace ( missile , missile + 1 , 2 ) ;
29977: LD_ADDR_VAR 0 14
29981: PUSH
29982: LD_VAR 0 14
29986: PPUSH
29987: LD_VAR 0 14
29991: PUSH
29992: LD_INT 1
29994: PLUS
29995: PPUSH
29996: LD_INT 2
29998: PPUSH
29999: CALL_OW 1
30003: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
30004: LD_VAR 0 9
30008: PPUSH
30009: LD_VAR 0 13
30013: PPUSH
30014: CALL_OW 325
30018: PUSH
30019: LD_VAR 0 10
30023: PPUSH
30024: CALL_OW 255
30028: PPUSH
30029: LD_VAR 0 13
30033: PPUSH
30034: CALL_OW 325
30038: NOT
30039: AND
30040: IFFALSE 30069
// missile := Replace ( missile , missile + 1 , 3 ) ;
30042: LD_ADDR_VAR 0 14
30046: PUSH
30047: LD_VAR 0 14
30051: PPUSH
30052: LD_VAR 0 14
30056: PUSH
30057: LD_INT 1
30059: PLUS
30060: PPUSH
30061: LD_INT 3
30063: PPUSH
30064: CALL_OW 1
30068: ST_TO_ADDR
// if missile < 2 then
30069: LD_VAR 0 14
30073: PUSH
30074: LD_INT 2
30076: LESS
30077: IFFALSE 30081
// exit ;
30079: GO 30303
// x := GetX ( enemy ) ;
30081: LD_ADDR_VAR 0 4
30085: PUSH
30086: LD_VAR 0 10
30090: PPUSH
30091: CALL_OW 250
30095: ST_TO_ADDR
// y := GetY ( enemy ) ;
30096: LD_ADDR_VAR 0 5
30100: PUSH
30101: LD_VAR 0 10
30105: PPUSH
30106: CALL_OW 251
30110: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
30111: LD_ADDR_VAR 0 6
30115: PUSH
30116: LD_VAR 0 4
30120: PUSH
30121: LD_INT 1
30123: NEG
30124: PPUSH
30125: LD_INT 1
30127: PPUSH
30128: CALL_OW 12
30132: PLUS
30133: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
30134: LD_ADDR_VAR 0 7
30138: PUSH
30139: LD_VAR 0 5
30143: PUSH
30144: LD_INT 1
30146: NEG
30147: PPUSH
30148: LD_INT 1
30150: PPUSH
30151: CALL_OW 12
30155: PLUS
30156: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30157: LD_VAR 0 6
30161: PPUSH
30162: LD_VAR 0 7
30166: PPUSH
30167: CALL_OW 488
30171: NOT
30172: IFFALSE 30194
// begin _x := x ;
30174: LD_ADDR_VAR 0 6
30178: PUSH
30179: LD_VAR 0 4
30183: ST_TO_ADDR
// _y := y ;
30184: LD_ADDR_VAR 0 7
30188: PUSH
30189: LD_VAR 0 5
30193: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
30194: LD_ADDR_VAR 0 3
30198: PUSH
30199: LD_INT 1
30201: PPUSH
30202: LD_VAR 0 14
30206: PPUSH
30207: CALL_OW 12
30211: ST_TO_ADDR
// case i of 1 :
30212: LD_VAR 0 3
30216: PUSH
30217: LD_INT 1
30219: DOUBLE
30220: EQUAL
30221: IFTRUE 30225
30223: GO 30242
30225: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
30226: LD_VAR 0 1
30230: PPUSH
30231: LD_VAR 0 10
30235: PPUSH
30236: CALL_OW 115
30240: GO 30303
30242: LD_INT 2
30244: DOUBLE
30245: EQUAL
30246: IFTRUE 30250
30248: GO 30272
30250: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
30251: LD_VAR 0 1
30255: PPUSH
30256: LD_VAR 0 6
30260: PPUSH
30261: LD_VAR 0 7
30265: PPUSH
30266: CALL_OW 153
30270: GO 30303
30272: LD_INT 3
30274: DOUBLE
30275: EQUAL
30276: IFTRUE 30280
30278: GO 30302
30280: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
30281: LD_VAR 0 1
30285: PPUSH
30286: LD_VAR 0 6
30290: PPUSH
30291: LD_VAR 0 7
30295: PPUSH
30296: CALL_OW 154
30300: GO 30303
30302: POP
// end ;
30303: LD_VAR 0 2
30307: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
30308: LD_INT 0
30310: PPUSH
30311: PPUSH
30312: PPUSH
30313: PPUSH
30314: PPUSH
30315: PPUSH
// if not unit or not building then
30316: LD_VAR 0 1
30320: NOT
30321: PUSH
30322: LD_VAR 0 2
30326: NOT
30327: OR
30328: IFFALSE 30332
// exit ;
30330: GO 30490
// x := GetX ( building ) ;
30332: LD_ADDR_VAR 0 5
30336: PUSH
30337: LD_VAR 0 2
30341: PPUSH
30342: CALL_OW 250
30346: ST_TO_ADDR
// y := GetY ( building ) ;
30347: LD_ADDR_VAR 0 6
30351: PUSH
30352: LD_VAR 0 2
30356: PPUSH
30357: CALL_OW 251
30361: ST_TO_ADDR
// for i = 0 to 5 do
30362: LD_ADDR_VAR 0 4
30366: PUSH
30367: DOUBLE
30368: LD_INT 0
30370: DEC
30371: ST_TO_ADDR
30372: LD_INT 5
30374: PUSH
30375: FOR_TO
30376: IFFALSE 30488
// begin _x := ShiftX ( x , i , 3 ) ;
30378: LD_ADDR_VAR 0 7
30382: PUSH
30383: LD_VAR 0 5
30387: PPUSH
30388: LD_VAR 0 4
30392: PPUSH
30393: LD_INT 3
30395: PPUSH
30396: CALL_OW 272
30400: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
30401: LD_ADDR_VAR 0 8
30405: PUSH
30406: LD_VAR 0 6
30410: PPUSH
30411: LD_VAR 0 4
30415: PPUSH
30416: LD_INT 3
30418: PPUSH
30419: CALL_OW 273
30423: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30424: LD_VAR 0 7
30428: PPUSH
30429: LD_VAR 0 8
30433: PPUSH
30434: CALL_OW 488
30438: NOT
30439: IFFALSE 30443
// continue ;
30441: GO 30375
// if HexInfo ( _x , _y ) = 0 then
30443: LD_VAR 0 7
30447: PPUSH
30448: LD_VAR 0 8
30452: PPUSH
30453: CALL_OW 428
30457: PUSH
30458: LD_INT 0
30460: EQUAL
30461: IFFALSE 30486
// begin ComMoveXY ( unit , _x , _y ) ;
30463: LD_VAR 0 1
30467: PPUSH
30468: LD_VAR 0 7
30472: PPUSH
30473: LD_VAR 0 8
30477: PPUSH
30478: CALL_OW 111
// exit ;
30482: POP
30483: POP
30484: GO 30490
// end ; end ;
30486: GO 30375
30488: POP
30489: POP
// end ;
30490: LD_VAR 0 3
30494: RET
// export function ScanBase ( side , base_area ) ; begin
30495: LD_INT 0
30497: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
30498: LD_ADDR_VAR 0 3
30502: PUSH
30503: LD_VAR 0 2
30507: PPUSH
30508: LD_INT 81
30510: PUSH
30511: LD_VAR 0 1
30515: PUSH
30516: EMPTY
30517: LIST
30518: LIST
30519: PPUSH
30520: CALL_OW 70
30524: ST_TO_ADDR
// end ;
30525: LD_VAR 0 3
30529: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
30530: LD_INT 0
30532: PPUSH
30533: PPUSH
30534: PPUSH
30535: PPUSH
// result := false ;
30536: LD_ADDR_VAR 0 2
30540: PUSH
30541: LD_INT 0
30543: ST_TO_ADDR
// side := GetSide ( unit ) ;
30544: LD_ADDR_VAR 0 3
30548: PUSH
30549: LD_VAR 0 1
30553: PPUSH
30554: CALL_OW 255
30558: ST_TO_ADDR
// nat := GetNation ( unit ) ;
30559: LD_ADDR_VAR 0 4
30563: PUSH
30564: LD_VAR 0 1
30568: PPUSH
30569: CALL_OW 248
30573: ST_TO_ADDR
// case nat of 1 :
30574: LD_VAR 0 4
30578: PUSH
30579: LD_INT 1
30581: DOUBLE
30582: EQUAL
30583: IFTRUE 30587
30585: GO 30598
30587: POP
// tech := tech_lassight ; 2 :
30588: LD_ADDR_VAR 0 5
30592: PUSH
30593: LD_INT 12
30595: ST_TO_ADDR
30596: GO 30637
30598: LD_INT 2
30600: DOUBLE
30601: EQUAL
30602: IFTRUE 30606
30604: GO 30617
30606: POP
// tech := tech_mortar ; 3 :
30607: LD_ADDR_VAR 0 5
30611: PUSH
30612: LD_INT 41
30614: ST_TO_ADDR
30615: GO 30637
30617: LD_INT 3
30619: DOUBLE
30620: EQUAL
30621: IFTRUE 30625
30623: GO 30636
30625: POP
// tech := tech_bazooka ; end ;
30626: LD_ADDR_VAR 0 5
30630: PUSH
30631: LD_INT 44
30633: ST_TO_ADDR
30634: GO 30637
30636: POP
// if Researched ( side , tech ) then
30637: LD_VAR 0 3
30641: PPUSH
30642: LD_VAR 0 5
30646: PPUSH
30647: CALL_OW 325
30651: IFFALSE 30678
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
30653: LD_ADDR_VAR 0 2
30657: PUSH
30658: LD_INT 5
30660: PUSH
30661: LD_INT 8
30663: PUSH
30664: LD_INT 9
30666: PUSH
30667: EMPTY
30668: LIST
30669: LIST
30670: LIST
30671: PUSH
30672: LD_VAR 0 4
30676: ARRAY
30677: ST_TO_ADDR
// end ;
30678: LD_VAR 0 2
30682: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
30683: LD_INT 0
30685: PPUSH
30686: PPUSH
30687: PPUSH
// if not mines then
30688: LD_VAR 0 2
30692: NOT
30693: IFFALSE 30697
// exit ;
30695: GO 30841
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30697: LD_ADDR_VAR 0 5
30701: PUSH
30702: LD_INT 81
30704: PUSH
30705: LD_VAR 0 1
30709: PUSH
30710: EMPTY
30711: LIST
30712: LIST
30713: PUSH
30714: LD_INT 3
30716: PUSH
30717: LD_INT 21
30719: PUSH
30720: LD_INT 3
30722: PUSH
30723: EMPTY
30724: LIST
30725: LIST
30726: PUSH
30727: EMPTY
30728: LIST
30729: LIST
30730: PUSH
30731: EMPTY
30732: LIST
30733: LIST
30734: PPUSH
30735: CALL_OW 69
30739: ST_TO_ADDR
// for i in mines do
30740: LD_ADDR_VAR 0 4
30744: PUSH
30745: LD_VAR 0 2
30749: PUSH
30750: FOR_IN
30751: IFFALSE 30839
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
30753: LD_VAR 0 4
30757: PUSH
30758: LD_INT 1
30760: ARRAY
30761: PPUSH
30762: LD_VAR 0 4
30766: PUSH
30767: LD_INT 2
30769: ARRAY
30770: PPUSH
30771: CALL_OW 458
30775: NOT
30776: IFFALSE 30780
// continue ;
30778: GO 30750
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
30780: LD_VAR 0 4
30784: PUSH
30785: LD_INT 1
30787: ARRAY
30788: PPUSH
30789: LD_VAR 0 4
30793: PUSH
30794: LD_INT 2
30796: ARRAY
30797: PPUSH
30798: CALL_OW 428
30802: PUSH
30803: LD_VAR 0 5
30807: IN
30808: IFFALSE 30837
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
30810: LD_VAR 0 4
30814: PUSH
30815: LD_INT 1
30817: ARRAY
30818: PPUSH
30819: LD_VAR 0 4
30823: PUSH
30824: LD_INT 2
30826: ARRAY
30827: PPUSH
30828: LD_VAR 0 1
30832: PPUSH
30833: CALL_OW 456
// end ;
30837: GO 30750
30839: POP
30840: POP
// end ;
30841: LD_VAR 0 3
30845: RET
// export function Count ( array ) ; var i ; begin
30846: LD_INT 0
30848: PPUSH
30849: PPUSH
// result := 0 ;
30850: LD_ADDR_VAR 0 2
30854: PUSH
30855: LD_INT 0
30857: ST_TO_ADDR
// for i in array do
30858: LD_ADDR_VAR 0 3
30862: PUSH
30863: LD_VAR 0 1
30867: PUSH
30868: FOR_IN
30869: IFFALSE 30893
// if i then
30871: LD_VAR 0 3
30875: IFFALSE 30891
// result := result + 1 ;
30877: LD_ADDR_VAR 0 2
30881: PUSH
30882: LD_VAR 0 2
30886: PUSH
30887: LD_INT 1
30889: PLUS
30890: ST_TO_ADDR
30891: GO 30868
30893: POP
30894: POP
// end ;
30895: LD_VAR 0 2
30899: RET
// export function IsEmpty ( building ) ; begin
30900: LD_INT 0
30902: PPUSH
// if not building then
30903: LD_VAR 0 1
30907: NOT
30908: IFFALSE 30912
// exit ;
30910: GO 30955
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
30912: LD_ADDR_VAR 0 2
30916: PUSH
30917: LD_VAR 0 1
30921: PUSH
30922: LD_INT 22
30924: PUSH
30925: LD_VAR 0 1
30929: PPUSH
30930: CALL_OW 255
30934: PUSH
30935: EMPTY
30936: LIST
30937: LIST
30938: PUSH
30939: LD_INT 58
30941: PUSH
30942: EMPTY
30943: LIST
30944: PUSH
30945: EMPTY
30946: LIST
30947: LIST
30948: PPUSH
30949: CALL_OW 69
30953: IN
30954: ST_TO_ADDR
// end ;
30955: LD_VAR 0 2
30959: RET
// export function IsNotFull ( building ) ; var places ; begin
30960: LD_INT 0
30962: PPUSH
30963: PPUSH
// if not building then
30964: LD_VAR 0 1
30968: NOT
30969: IFFALSE 30973
// exit ;
30971: GO 31144
// result := false ;
30973: LD_ADDR_VAR 0 2
30977: PUSH
30978: LD_INT 0
30980: ST_TO_ADDR
// places := 0 ;
30981: LD_ADDR_VAR 0 3
30985: PUSH
30986: LD_INT 0
30988: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
30989: LD_VAR 0 1
30993: PPUSH
30994: CALL_OW 266
30998: PUSH
30999: LD_INT 0
31001: DOUBLE
31002: EQUAL
31003: IFTRUE 31061
31005: LD_INT 1
31007: DOUBLE
31008: EQUAL
31009: IFTRUE 31061
31011: LD_INT 6
31013: DOUBLE
31014: EQUAL
31015: IFTRUE 31061
31017: LD_INT 7
31019: DOUBLE
31020: EQUAL
31021: IFTRUE 31061
31023: LD_INT 8
31025: DOUBLE
31026: EQUAL
31027: IFTRUE 31061
31029: LD_INT 4
31031: DOUBLE
31032: EQUAL
31033: IFTRUE 31061
31035: LD_INT 5
31037: DOUBLE
31038: EQUAL
31039: IFTRUE 31061
31041: LD_INT 2
31043: DOUBLE
31044: EQUAL
31045: IFTRUE 31061
31047: LD_INT 3
31049: DOUBLE
31050: EQUAL
31051: IFTRUE 31061
31053: LD_INT 35
31055: DOUBLE
31056: EQUAL
31057: IFTRUE 31061
31059: GO 31072
31061: POP
// places := 6 ; b_bunker , b_breastwork :
31062: LD_ADDR_VAR 0 3
31066: PUSH
31067: LD_INT 6
31069: ST_TO_ADDR
31070: GO 31117
31072: LD_INT 32
31074: DOUBLE
31075: EQUAL
31076: IFTRUE 31086
31078: LD_INT 31
31080: DOUBLE
31081: EQUAL
31082: IFTRUE 31086
31084: GO 31097
31086: POP
// places := 1 ; b_control_tower :
31087: LD_ADDR_VAR 0 3
31091: PUSH
31092: LD_INT 1
31094: ST_TO_ADDR
31095: GO 31117
31097: LD_INT 36
31099: DOUBLE
31100: EQUAL
31101: IFTRUE 31105
31103: GO 31116
31105: POP
// places := 3 ; end ;
31106: LD_ADDR_VAR 0 3
31110: PUSH
31111: LD_INT 3
31113: ST_TO_ADDR
31114: GO 31117
31116: POP
// if places then
31117: LD_VAR 0 3
31121: IFFALSE 31144
// result := UnitsInside ( building ) < places ;
31123: LD_ADDR_VAR 0 2
31127: PUSH
31128: LD_VAR 0 1
31132: PPUSH
31133: CALL_OW 313
31137: PUSH
31138: LD_VAR 0 3
31142: LESS
31143: ST_TO_ADDR
// end ;
31144: LD_VAR 0 2
31148: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
31149: LD_INT 0
31151: PPUSH
31152: PPUSH
31153: PPUSH
31154: PPUSH
// tmp := [ ] ;
31155: LD_ADDR_VAR 0 3
31159: PUSH
31160: EMPTY
31161: ST_TO_ADDR
// list := [ ] ;
31162: LD_ADDR_VAR 0 5
31166: PUSH
31167: EMPTY
31168: ST_TO_ADDR
// for i = 16 to 25 do
31169: LD_ADDR_VAR 0 4
31173: PUSH
31174: DOUBLE
31175: LD_INT 16
31177: DEC
31178: ST_TO_ADDR
31179: LD_INT 25
31181: PUSH
31182: FOR_TO
31183: IFFALSE 31256
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
31185: LD_ADDR_VAR 0 3
31189: PUSH
31190: LD_VAR 0 3
31194: PUSH
31195: LD_INT 22
31197: PUSH
31198: LD_VAR 0 1
31202: PPUSH
31203: CALL_OW 255
31207: PUSH
31208: EMPTY
31209: LIST
31210: LIST
31211: PUSH
31212: LD_INT 91
31214: PUSH
31215: LD_VAR 0 1
31219: PUSH
31220: LD_INT 6
31222: PUSH
31223: EMPTY
31224: LIST
31225: LIST
31226: LIST
31227: PUSH
31228: LD_INT 30
31230: PUSH
31231: LD_VAR 0 4
31235: PUSH
31236: EMPTY
31237: LIST
31238: LIST
31239: PUSH
31240: EMPTY
31241: LIST
31242: LIST
31243: LIST
31244: PUSH
31245: EMPTY
31246: LIST
31247: PPUSH
31248: CALL_OW 69
31252: ADD
31253: ST_TO_ADDR
31254: GO 31182
31256: POP
31257: POP
// for i = 1 to tmp do
31258: LD_ADDR_VAR 0 4
31262: PUSH
31263: DOUBLE
31264: LD_INT 1
31266: DEC
31267: ST_TO_ADDR
31268: LD_VAR 0 3
31272: PUSH
31273: FOR_TO
31274: IFFALSE 31362
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
31276: LD_ADDR_VAR 0 5
31280: PUSH
31281: LD_VAR 0 5
31285: PUSH
31286: LD_VAR 0 3
31290: PUSH
31291: LD_VAR 0 4
31295: ARRAY
31296: PPUSH
31297: CALL_OW 266
31301: PUSH
31302: LD_VAR 0 3
31306: PUSH
31307: LD_VAR 0 4
31311: ARRAY
31312: PPUSH
31313: CALL_OW 250
31317: PUSH
31318: LD_VAR 0 3
31322: PUSH
31323: LD_VAR 0 4
31327: ARRAY
31328: PPUSH
31329: CALL_OW 251
31333: PUSH
31334: LD_VAR 0 3
31338: PUSH
31339: LD_VAR 0 4
31343: ARRAY
31344: PPUSH
31345: CALL_OW 254
31349: PUSH
31350: EMPTY
31351: LIST
31352: LIST
31353: LIST
31354: LIST
31355: PUSH
31356: EMPTY
31357: LIST
31358: ADD
31359: ST_TO_ADDR
31360: GO 31273
31362: POP
31363: POP
// result := list ;
31364: LD_ADDR_VAR 0 2
31368: PUSH
31369: LD_VAR 0 5
31373: ST_TO_ADDR
// end ;
31374: LD_VAR 0 2
31378: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
31379: LD_INT 0
31381: PPUSH
31382: PPUSH
31383: PPUSH
31384: PPUSH
31385: PPUSH
31386: PPUSH
31387: PPUSH
// if not factory then
31388: LD_VAR 0 1
31392: NOT
31393: IFFALSE 31397
// exit ;
31395: GO 31990
// if control = control_apeman then
31397: LD_VAR 0 4
31401: PUSH
31402: LD_INT 5
31404: EQUAL
31405: IFFALSE 31514
// begin tmp := UnitsInside ( factory ) ;
31407: LD_ADDR_VAR 0 8
31411: PUSH
31412: LD_VAR 0 1
31416: PPUSH
31417: CALL_OW 313
31421: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
31422: LD_VAR 0 8
31426: PPUSH
31427: LD_INT 25
31429: PUSH
31430: LD_INT 12
31432: PUSH
31433: EMPTY
31434: LIST
31435: LIST
31436: PPUSH
31437: CALL_OW 72
31441: NOT
31442: IFFALSE 31452
// control := control_manual ;
31444: LD_ADDR_VAR 0 4
31448: PUSH
31449: LD_INT 1
31451: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
31452: LD_ADDR_VAR 0 8
31456: PUSH
31457: LD_VAR 0 1
31461: PPUSH
31462: CALL 31149 0 1
31466: ST_TO_ADDR
// if tmp then
31467: LD_VAR 0 8
31471: IFFALSE 31514
// begin for i in tmp do
31473: LD_ADDR_VAR 0 7
31477: PUSH
31478: LD_VAR 0 8
31482: PUSH
31483: FOR_IN
31484: IFFALSE 31512
// if i [ 1 ] = b_ext_radio then
31486: LD_VAR 0 7
31490: PUSH
31491: LD_INT 1
31493: ARRAY
31494: PUSH
31495: LD_INT 22
31497: EQUAL
31498: IFFALSE 31510
// begin control := control_remote ;
31500: LD_ADDR_VAR 0 4
31504: PUSH
31505: LD_INT 2
31507: ST_TO_ADDR
// break ;
31508: GO 31512
// end ;
31510: GO 31483
31512: POP
31513: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
31514: LD_VAR 0 1
31518: PPUSH
31519: LD_VAR 0 2
31523: PPUSH
31524: LD_VAR 0 3
31528: PPUSH
31529: LD_VAR 0 4
31533: PPUSH
31534: LD_VAR 0 5
31538: PPUSH
31539: CALL_OW 448
31543: IFFALSE 31578
// begin result := [ chassis , engine , control , weapon ] ;
31545: LD_ADDR_VAR 0 6
31549: PUSH
31550: LD_VAR 0 2
31554: PUSH
31555: LD_VAR 0 3
31559: PUSH
31560: LD_VAR 0 4
31564: PUSH
31565: LD_VAR 0 5
31569: PUSH
31570: EMPTY
31571: LIST
31572: LIST
31573: LIST
31574: LIST
31575: ST_TO_ADDR
// exit ;
31576: GO 31990
// end ; _chassis := AvailableChassisList ( factory ) ;
31578: LD_ADDR_VAR 0 9
31582: PUSH
31583: LD_VAR 0 1
31587: PPUSH
31588: CALL_OW 475
31592: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
31593: LD_ADDR_VAR 0 11
31597: PUSH
31598: LD_VAR 0 1
31602: PPUSH
31603: CALL_OW 476
31607: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
31608: LD_ADDR_VAR 0 12
31612: PUSH
31613: LD_VAR 0 1
31617: PPUSH
31618: CALL_OW 477
31622: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
31623: LD_ADDR_VAR 0 10
31627: PUSH
31628: LD_VAR 0 1
31632: PPUSH
31633: CALL_OW 478
31637: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
31638: LD_VAR 0 9
31642: NOT
31643: PUSH
31644: LD_VAR 0 11
31648: NOT
31649: OR
31650: PUSH
31651: LD_VAR 0 12
31655: NOT
31656: OR
31657: PUSH
31658: LD_VAR 0 10
31662: NOT
31663: OR
31664: IFFALSE 31699
// begin result := [ chassis , engine , control , weapon ] ;
31666: LD_ADDR_VAR 0 6
31670: PUSH
31671: LD_VAR 0 2
31675: PUSH
31676: LD_VAR 0 3
31680: PUSH
31681: LD_VAR 0 4
31685: PUSH
31686: LD_VAR 0 5
31690: PUSH
31691: EMPTY
31692: LIST
31693: LIST
31694: LIST
31695: LIST
31696: ST_TO_ADDR
// exit ;
31697: GO 31990
// end ; if not chassis in _chassis then
31699: LD_VAR 0 2
31703: PUSH
31704: LD_VAR 0 9
31708: IN
31709: NOT
31710: IFFALSE 31736
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
31712: LD_ADDR_VAR 0 2
31716: PUSH
31717: LD_VAR 0 9
31721: PUSH
31722: LD_INT 1
31724: PPUSH
31725: LD_VAR 0 9
31729: PPUSH
31730: CALL_OW 12
31734: ARRAY
31735: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
31736: LD_VAR 0 2
31740: PPUSH
31741: LD_VAR 0 3
31745: PPUSH
31746: CALL 31995 0 2
31750: NOT
31751: IFFALSE 31810
// repeat engine := _engine [ 1 ] ;
31753: LD_ADDR_VAR 0 3
31757: PUSH
31758: LD_VAR 0 11
31762: PUSH
31763: LD_INT 1
31765: ARRAY
31766: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
31767: LD_ADDR_VAR 0 11
31771: PUSH
31772: LD_VAR 0 11
31776: PPUSH
31777: LD_INT 1
31779: PPUSH
31780: CALL_OW 3
31784: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
31785: LD_VAR 0 2
31789: PPUSH
31790: LD_VAR 0 3
31794: PPUSH
31795: CALL 31995 0 2
31799: PUSH
31800: LD_VAR 0 11
31804: PUSH
31805: EMPTY
31806: EQUAL
31807: OR
31808: IFFALSE 31753
// if not control in _control then
31810: LD_VAR 0 4
31814: PUSH
31815: LD_VAR 0 12
31819: IN
31820: NOT
31821: IFFALSE 31847
// control := _control [ rand ( 1 , _control ) ] ;
31823: LD_ADDR_VAR 0 4
31827: PUSH
31828: LD_VAR 0 12
31832: PUSH
31833: LD_INT 1
31835: PPUSH
31836: LD_VAR 0 12
31840: PPUSH
31841: CALL_OW 12
31845: ARRAY
31846: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
31847: LD_VAR 0 2
31851: PPUSH
31852: LD_VAR 0 5
31856: PPUSH
31857: CALL 32215 0 2
31861: NOT
31862: IFFALSE 31921
// repeat weapon := _weapon [ 1 ] ;
31864: LD_ADDR_VAR 0 5
31868: PUSH
31869: LD_VAR 0 10
31873: PUSH
31874: LD_INT 1
31876: ARRAY
31877: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
31878: LD_ADDR_VAR 0 10
31882: PUSH
31883: LD_VAR 0 10
31887: PPUSH
31888: LD_INT 1
31890: PPUSH
31891: CALL_OW 3
31895: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
31896: LD_VAR 0 2
31900: PPUSH
31901: LD_VAR 0 5
31905: PPUSH
31906: CALL 32215 0 2
31910: PUSH
31911: LD_VAR 0 10
31915: PUSH
31916: EMPTY
31917: EQUAL
31918: OR
31919: IFFALSE 31864
// result := [ ] ;
31921: LD_ADDR_VAR 0 6
31925: PUSH
31926: EMPTY
31927: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
31928: LD_VAR 0 1
31932: PPUSH
31933: LD_VAR 0 2
31937: PPUSH
31938: LD_VAR 0 3
31942: PPUSH
31943: LD_VAR 0 4
31947: PPUSH
31948: LD_VAR 0 5
31952: PPUSH
31953: CALL_OW 448
31957: IFFALSE 31990
// result := [ chassis , engine , control , weapon ] ;
31959: LD_ADDR_VAR 0 6
31963: PUSH
31964: LD_VAR 0 2
31968: PUSH
31969: LD_VAR 0 3
31973: PUSH
31974: LD_VAR 0 4
31978: PUSH
31979: LD_VAR 0 5
31983: PUSH
31984: EMPTY
31985: LIST
31986: LIST
31987: LIST
31988: LIST
31989: ST_TO_ADDR
// end ;
31990: LD_VAR 0 6
31994: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
31995: LD_INT 0
31997: PPUSH
// if not chassis or not engine then
31998: LD_VAR 0 1
32002: NOT
32003: PUSH
32004: LD_VAR 0 2
32008: NOT
32009: OR
32010: IFFALSE 32014
// exit ;
32012: GO 32210
// case engine of engine_solar :
32014: LD_VAR 0 2
32018: PUSH
32019: LD_INT 2
32021: DOUBLE
32022: EQUAL
32023: IFTRUE 32027
32025: GO 32065
32027: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
32028: LD_ADDR_VAR 0 3
32032: PUSH
32033: LD_INT 11
32035: PUSH
32036: LD_INT 12
32038: PUSH
32039: LD_INT 13
32041: PUSH
32042: LD_INT 14
32044: PUSH
32045: LD_INT 1
32047: PUSH
32048: LD_INT 2
32050: PUSH
32051: LD_INT 3
32053: PUSH
32054: EMPTY
32055: LIST
32056: LIST
32057: LIST
32058: LIST
32059: LIST
32060: LIST
32061: LIST
32062: ST_TO_ADDR
32063: GO 32194
32065: LD_INT 1
32067: DOUBLE
32068: EQUAL
32069: IFTRUE 32073
32071: GO 32135
32073: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
32074: LD_ADDR_VAR 0 3
32078: PUSH
32079: LD_INT 11
32081: PUSH
32082: LD_INT 12
32084: PUSH
32085: LD_INT 13
32087: PUSH
32088: LD_INT 14
32090: PUSH
32091: LD_INT 1
32093: PUSH
32094: LD_INT 2
32096: PUSH
32097: LD_INT 3
32099: PUSH
32100: LD_INT 4
32102: PUSH
32103: LD_INT 5
32105: PUSH
32106: LD_INT 21
32108: PUSH
32109: LD_INT 23
32111: PUSH
32112: LD_INT 22
32114: PUSH
32115: LD_INT 24
32117: PUSH
32118: EMPTY
32119: LIST
32120: LIST
32121: LIST
32122: LIST
32123: LIST
32124: LIST
32125: LIST
32126: LIST
32127: LIST
32128: LIST
32129: LIST
32130: LIST
32131: LIST
32132: ST_TO_ADDR
32133: GO 32194
32135: LD_INT 3
32137: DOUBLE
32138: EQUAL
32139: IFTRUE 32143
32141: GO 32193
32143: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
32144: LD_ADDR_VAR 0 3
32148: PUSH
32149: LD_INT 13
32151: PUSH
32152: LD_INT 14
32154: PUSH
32155: LD_INT 2
32157: PUSH
32158: LD_INT 3
32160: PUSH
32161: LD_INT 4
32163: PUSH
32164: LD_INT 5
32166: PUSH
32167: LD_INT 21
32169: PUSH
32170: LD_INT 22
32172: PUSH
32173: LD_INT 23
32175: PUSH
32176: LD_INT 24
32178: PUSH
32179: EMPTY
32180: LIST
32181: LIST
32182: LIST
32183: LIST
32184: LIST
32185: LIST
32186: LIST
32187: LIST
32188: LIST
32189: LIST
32190: ST_TO_ADDR
32191: GO 32194
32193: POP
// result := ( chassis in result ) ;
32194: LD_ADDR_VAR 0 3
32198: PUSH
32199: LD_VAR 0 1
32203: PUSH
32204: LD_VAR 0 3
32208: IN
32209: ST_TO_ADDR
// end ;
32210: LD_VAR 0 3
32214: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
32215: LD_INT 0
32217: PPUSH
// if not chassis or not weapon then
32218: LD_VAR 0 1
32222: NOT
32223: PUSH
32224: LD_VAR 0 2
32228: NOT
32229: OR
32230: IFFALSE 32234
// exit ;
32232: GO 33296
// case weapon of us_machine_gun :
32234: LD_VAR 0 2
32238: PUSH
32239: LD_INT 2
32241: DOUBLE
32242: EQUAL
32243: IFTRUE 32247
32245: GO 32277
32247: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
32248: LD_ADDR_VAR 0 3
32252: PUSH
32253: LD_INT 1
32255: PUSH
32256: LD_INT 2
32258: PUSH
32259: LD_INT 3
32261: PUSH
32262: LD_INT 4
32264: PUSH
32265: LD_INT 5
32267: PUSH
32268: EMPTY
32269: LIST
32270: LIST
32271: LIST
32272: LIST
32273: LIST
32274: ST_TO_ADDR
32275: GO 33280
32277: LD_INT 3
32279: DOUBLE
32280: EQUAL
32281: IFTRUE 32285
32283: GO 32315
32285: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
32286: LD_ADDR_VAR 0 3
32290: PUSH
32291: LD_INT 1
32293: PUSH
32294: LD_INT 2
32296: PUSH
32297: LD_INT 3
32299: PUSH
32300: LD_INT 4
32302: PUSH
32303: LD_INT 5
32305: PUSH
32306: EMPTY
32307: LIST
32308: LIST
32309: LIST
32310: LIST
32311: LIST
32312: ST_TO_ADDR
32313: GO 33280
32315: LD_INT 11
32317: DOUBLE
32318: EQUAL
32319: IFTRUE 32323
32321: GO 32353
32323: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
32324: LD_ADDR_VAR 0 3
32328: PUSH
32329: LD_INT 1
32331: PUSH
32332: LD_INT 2
32334: PUSH
32335: LD_INT 3
32337: PUSH
32338: LD_INT 4
32340: PUSH
32341: LD_INT 5
32343: PUSH
32344: EMPTY
32345: LIST
32346: LIST
32347: LIST
32348: LIST
32349: LIST
32350: ST_TO_ADDR
32351: GO 33280
32353: LD_INT 4
32355: DOUBLE
32356: EQUAL
32357: IFTRUE 32361
32359: GO 32387
32361: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
32362: LD_ADDR_VAR 0 3
32366: PUSH
32367: LD_INT 2
32369: PUSH
32370: LD_INT 3
32372: PUSH
32373: LD_INT 4
32375: PUSH
32376: LD_INT 5
32378: PUSH
32379: EMPTY
32380: LIST
32381: LIST
32382: LIST
32383: LIST
32384: ST_TO_ADDR
32385: GO 33280
32387: LD_INT 5
32389: DOUBLE
32390: EQUAL
32391: IFTRUE 32395
32393: GO 32421
32395: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
32396: LD_ADDR_VAR 0 3
32400: PUSH
32401: LD_INT 2
32403: PUSH
32404: LD_INT 3
32406: PUSH
32407: LD_INT 4
32409: PUSH
32410: LD_INT 5
32412: PUSH
32413: EMPTY
32414: LIST
32415: LIST
32416: LIST
32417: LIST
32418: ST_TO_ADDR
32419: GO 33280
32421: LD_INT 9
32423: DOUBLE
32424: EQUAL
32425: IFTRUE 32429
32427: GO 32455
32429: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
32430: LD_ADDR_VAR 0 3
32434: PUSH
32435: LD_INT 2
32437: PUSH
32438: LD_INT 3
32440: PUSH
32441: LD_INT 4
32443: PUSH
32444: LD_INT 5
32446: PUSH
32447: EMPTY
32448: LIST
32449: LIST
32450: LIST
32451: LIST
32452: ST_TO_ADDR
32453: GO 33280
32455: LD_INT 7
32457: DOUBLE
32458: EQUAL
32459: IFTRUE 32463
32461: GO 32489
32463: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
32464: LD_ADDR_VAR 0 3
32468: PUSH
32469: LD_INT 2
32471: PUSH
32472: LD_INT 3
32474: PUSH
32475: LD_INT 4
32477: PUSH
32478: LD_INT 5
32480: PUSH
32481: EMPTY
32482: LIST
32483: LIST
32484: LIST
32485: LIST
32486: ST_TO_ADDR
32487: GO 33280
32489: LD_INT 12
32491: DOUBLE
32492: EQUAL
32493: IFTRUE 32497
32495: GO 32523
32497: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
32498: LD_ADDR_VAR 0 3
32502: PUSH
32503: LD_INT 2
32505: PUSH
32506: LD_INT 3
32508: PUSH
32509: LD_INT 4
32511: PUSH
32512: LD_INT 5
32514: PUSH
32515: EMPTY
32516: LIST
32517: LIST
32518: LIST
32519: LIST
32520: ST_TO_ADDR
32521: GO 33280
32523: LD_INT 13
32525: DOUBLE
32526: EQUAL
32527: IFTRUE 32531
32529: GO 32557
32531: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
32532: LD_ADDR_VAR 0 3
32536: PUSH
32537: LD_INT 2
32539: PUSH
32540: LD_INT 3
32542: PUSH
32543: LD_INT 4
32545: PUSH
32546: LD_INT 5
32548: PUSH
32549: EMPTY
32550: LIST
32551: LIST
32552: LIST
32553: LIST
32554: ST_TO_ADDR
32555: GO 33280
32557: LD_INT 14
32559: DOUBLE
32560: EQUAL
32561: IFTRUE 32565
32563: GO 32583
32565: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
32566: LD_ADDR_VAR 0 3
32570: PUSH
32571: LD_INT 4
32573: PUSH
32574: LD_INT 5
32576: PUSH
32577: EMPTY
32578: LIST
32579: LIST
32580: ST_TO_ADDR
32581: GO 33280
32583: LD_INT 6
32585: DOUBLE
32586: EQUAL
32587: IFTRUE 32591
32589: GO 32609
32591: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
32592: LD_ADDR_VAR 0 3
32596: PUSH
32597: LD_INT 4
32599: PUSH
32600: LD_INT 5
32602: PUSH
32603: EMPTY
32604: LIST
32605: LIST
32606: ST_TO_ADDR
32607: GO 33280
32609: LD_INT 10
32611: DOUBLE
32612: EQUAL
32613: IFTRUE 32617
32615: GO 32635
32617: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
32618: LD_ADDR_VAR 0 3
32622: PUSH
32623: LD_INT 4
32625: PUSH
32626: LD_INT 5
32628: PUSH
32629: EMPTY
32630: LIST
32631: LIST
32632: ST_TO_ADDR
32633: GO 33280
32635: LD_INT 22
32637: DOUBLE
32638: EQUAL
32639: IFTRUE 32643
32641: GO 32669
32643: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
32644: LD_ADDR_VAR 0 3
32648: PUSH
32649: LD_INT 11
32651: PUSH
32652: LD_INT 12
32654: PUSH
32655: LD_INT 13
32657: PUSH
32658: LD_INT 14
32660: PUSH
32661: EMPTY
32662: LIST
32663: LIST
32664: LIST
32665: LIST
32666: ST_TO_ADDR
32667: GO 33280
32669: LD_INT 23
32671: DOUBLE
32672: EQUAL
32673: IFTRUE 32677
32675: GO 32703
32677: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
32678: LD_ADDR_VAR 0 3
32682: PUSH
32683: LD_INT 11
32685: PUSH
32686: LD_INT 12
32688: PUSH
32689: LD_INT 13
32691: PUSH
32692: LD_INT 14
32694: PUSH
32695: EMPTY
32696: LIST
32697: LIST
32698: LIST
32699: LIST
32700: ST_TO_ADDR
32701: GO 33280
32703: LD_INT 24
32705: DOUBLE
32706: EQUAL
32707: IFTRUE 32711
32709: GO 32737
32711: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
32712: LD_ADDR_VAR 0 3
32716: PUSH
32717: LD_INT 11
32719: PUSH
32720: LD_INT 12
32722: PUSH
32723: LD_INT 13
32725: PUSH
32726: LD_INT 14
32728: PUSH
32729: EMPTY
32730: LIST
32731: LIST
32732: LIST
32733: LIST
32734: ST_TO_ADDR
32735: GO 33280
32737: LD_INT 30
32739: DOUBLE
32740: EQUAL
32741: IFTRUE 32745
32743: GO 32771
32745: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
32746: LD_ADDR_VAR 0 3
32750: PUSH
32751: LD_INT 11
32753: PUSH
32754: LD_INT 12
32756: PUSH
32757: LD_INT 13
32759: PUSH
32760: LD_INT 14
32762: PUSH
32763: EMPTY
32764: LIST
32765: LIST
32766: LIST
32767: LIST
32768: ST_TO_ADDR
32769: GO 33280
32771: LD_INT 25
32773: DOUBLE
32774: EQUAL
32775: IFTRUE 32779
32777: GO 32797
32779: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
32780: LD_ADDR_VAR 0 3
32784: PUSH
32785: LD_INT 13
32787: PUSH
32788: LD_INT 14
32790: PUSH
32791: EMPTY
32792: LIST
32793: LIST
32794: ST_TO_ADDR
32795: GO 33280
32797: LD_INT 27
32799: DOUBLE
32800: EQUAL
32801: IFTRUE 32805
32803: GO 32823
32805: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
32806: LD_ADDR_VAR 0 3
32810: PUSH
32811: LD_INT 13
32813: PUSH
32814: LD_INT 14
32816: PUSH
32817: EMPTY
32818: LIST
32819: LIST
32820: ST_TO_ADDR
32821: GO 33280
32823: LD_EXP 57
32827: DOUBLE
32828: EQUAL
32829: IFTRUE 32833
32831: GO 32859
32833: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
32834: LD_ADDR_VAR 0 3
32838: PUSH
32839: LD_INT 11
32841: PUSH
32842: LD_INT 12
32844: PUSH
32845: LD_INT 13
32847: PUSH
32848: LD_INT 14
32850: PUSH
32851: EMPTY
32852: LIST
32853: LIST
32854: LIST
32855: LIST
32856: ST_TO_ADDR
32857: GO 33280
32859: LD_INT 28
32861: DOUBLE
32862: EQUAL
32863: IFTRUE 32867
32865: GO 32885
32867: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
32868: LD_ADDR_VAR 0 3
32872: PUSH
32873: LD_INT 13
32875: PUSH
32876: LD_INT 14
32878: PUSH
32879: EMPTY
32880: LIST
32881: LIST
32882: ST_TO_ADDR
32883: GO 33280
32885: LD_INT 29
32887: DOUBLE
32888: EQUAL
32889: IFTRUE 32893
32891: GO 32911
32893: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
32894: LD_ADDR_VAR 0 3
32898: PUSH
32899: LD_INT 13
32901: PUSH
32902: LD_INT 14
32904: PUSH
32905: EMPTY
32906: LIST
32907: LIST
32908: ST_TO_ADDR
32909: GO 33280
32911: LD_INT 31
32913: DOUBLE
32914: EQUAL
32915: IFTRUE 32919
32917: GO 32937
32919: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
32920: LD_ADDR_VAR 0 3
32924: PUSH
32925: LD_INT 13
32927: PUSH
32928: LD_INT 14
32930: PUSH
32931: EMPTY
32932: LIST
32933: LIST
32934: ST_TO_ADDR
32935: GO 33280
32937: LD_INT 26
32939: DOUBLE
32940: EQUAL
32941: IFTRUE 32945
32943: GO 32963
32945: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
32946: LD_ADDR_VAR 0 3
32950: PUSH
32951: LD_INT 13
32953: PUSH
32954: LD_INT 14
32956: PUSH
32957: EMPTY
32958: LIST
32959: LIST
32960: ST_TO_ADDR
32961: GO 33280
32963: LD_INT 42
32965: DOUBLE
32966: EQUAL
32967: IFTRUE 32971
32969: GO 32997
32971: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
32972: LD_ADDR_VAR 0 3
32976: PUSH
32977: LD_INT 21
32979: PUSH
32980: LD_INT 22
32982: PUSH
32983: LD_INT 23
32985: PUSH
32986: LD_INT 24
32988: PUSH
32989: EMPTY
32990: LIST
32991: LIST
32992: LIST
32993: LIST
32994: ST_TO_ADDR
32995: GO 33280
32997: LD_INT 43
32999: DOUBLE
33000: EQUAL
33001: IFTRUE 33005
33003: GO 33031
33005: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
33006: LD_ADDR_VAR 0 3
33010: PUSH
33011: LD_INT 21
33013: PUSH
33014: LD_INT 22
33016: PUSH
33017: LD_INT 23
33019: PUSH
33020: LD_INT 24
33022: PUSH
33023: EMPTY
33024: LIST
33025: LIST
33026: LIST
33027: LIST
33028: ST_TO_ADDR
33029: GO 33280
33031: LD_INT 44
33033: DOUBLE
33034: EQUAL
33035: IFTRUE 33039
33037: GO 33065
33039: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
33040: LD_ADDR_VAR 0 3
33044: PUSH
33045: LD_INT 21
33047: PUSH
33048: LD_INT 22
33050: PUSH
33051: LD_INT 23
33053: PUSH
33054: LD_INT 24
33056: PUSH
33057: EMPTY
33058: LIST
33059: LIST
33060: LIST
33061: LIST
33062: ST_TO_ADDR
33063: GO 33280
33065: LD_INT 45
33067: DOUBLE
33068: EQUAL
33069: IFTRUE 33073
33071: GO 33099
33073: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
33074: LD_ADDR_VAR 0 3
33078: PUSH
33079: LD_INT 21
33081: PUSH
33082: LD_INT 22
33084: PUSH
33085: LD_INT 23
33087: PUSH
33088: LD_INT 24
33090: PUSH
33091: EMPTY
33092: LIST
33093: LIST
33094: LIST
33095: LIST
33096: ST_TO_ADDR
33097: GO 33280
33099: LD_INT 49
33101: DOUBLE
33102: EQUAL
33103: IFTRUE 33107
33105: GO 33133
33107: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
33108: LD_ADDR_VAR 0 3
33112: PUSH
33113: LD_INT 21
33115: PUSH
33116: LD_INT 22
33118: PUSH
33119: LD_INT 23
33121: PUSH
33122: LD_INT 24
33124: PUSH
33125: EMPTY
33126: LIST
33127: LIST
33128: LIST
33129: LIST
33130: ST_TO_ADDR
33131: GO 33280
33133: LD_INT 51
33135: DOUBLE
33136: EQUAL
33137: IFTRUE 33141
33139: GO 33167
33141: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
33142: LD_ADDR_VAR 0 3
33146: PUSH
33147: LD_INT 21
33149: PUSH
33150: LD_INT 22
33152: PUSH
33153: LD_INT 23
33155: PUSH
33156: LD_INT 24
33158: PUSH
33159: EMPTY
33160: LIST
33161: LIST
33162: LIST
33163: LIST
33164: ST_TO_ADDR
33165: GO 33280
33167: LD_INT 52
33169: DOUBLE
33170: EQUAL
33171: IFTRUE 33175
33173: GO 33201
33175: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
33176: LD_ADDR_VAR 0 3
33180: PUSH
33181: LD_INT 21
33183: PUSH
33184: LD_INT 22
33186: PUSH
33187: LD_INT 23
33189: PUSH
33190: LD_INT 24
33192: PUSH
33193: EMPTY
33194: LIST
33195: LIST
33196: LIST
33197: LIST
33198: ST_TO_ADDR
33199: GO 33280
33201: LD_INT 53
33203: DOUBLE
33204: EQUAL
33205: IFTRUE 33209
33207: GO 33227
33209: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
33210: LD_ADDR_VAR 0 3
33214: PUSH
33215: LD_INT 23
33217: PUSH
33218: LD_INT 24
33220: PUSH
33221: EMPTY
33222: LIST
33223: LIST
33224: ST_TO_ADDR
33225: GO 33280
33227: LD_INT 46
33229: DOUBLE
33230: EQUAL
33231: IFTRUE 33235
33233: GO 33253
33235: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
33236: LD_ADDR_VAR 0 3
33240: PUSH
33241: LD_INT 23
33243: PUSH
33244: LD_INT 24
33246: PUSH
33247: EMPTY
33248: LIST
33249: LIST
33250: ST_TO_ADDR
33251: GO 33280
33253: LD_INT 47
33255: DOUBLE
33256: EQUAL
33257: IFTRUE 33261
33259: GO 33279
33261: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33262: LD_ADDR_VAR 0 3
33266: PUSH
33267: LD_INT 23
33269: PUSH
33270: LD_INT 24
33272: PUSH
33273: EMPTY
33274: LIST
33275: LIST
33276: ST_TO_ADDR
33277: GO 33280
33279: POP
// result := ( chassis in result ) ;
33280: LD_ADDR_VAR 0 3
33284: PUSH
33285: LD_VAR 0 1
33289: PUSH
33290: LD_VAR 0 3
33294: IN
33295: ST_TO_ADDR
// end ;
33296: LD_VAR 0 3
33300: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
33301: LD_INT 0
33303: PPUSH
33304: PPUSH
33305: PPUSH
33306: PPUSH
33307: PPUSH
33308: PPUSH
33309: PPUSH
// result := array ;
33310: LD_ADDR_VAR 0 5
33314: PUSH
33315: LD_VAR 0 1
33319: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
33320: LD_VAR 0 1
33324: NOT
33325: PUSH
33326: LD_VAR 0 2
33330: NOT
33331: OR
33332: PUSH
33333: LD_VAR 0 3
33337: NOT
33338: OR
33339: PUSH
33340: LD_VAR 0 2
33344: PUSH
33345: LD_VAR 0 1
33349: GREATER
33350: OR
33351: PUSH
33352: LD_VAR 0 3
33356: PUSH
33357: LD_VAR 0 1
33361: GREATER
33362: OR
33363: IFFALSE 33367
// exit ;
33365: GO 33663
// if direction then
33367: LD_VAR 0 4
33371: IFFALSE 33435
// begin d := 1 ;
33373: LD_ADDR_VAR 0 9
33377: PUSH
33378: LD_INT 1
33380: ST_TO_ADDR
// if i_from > i_to then
33381: LD_VAR 0 2
33385: PUSH
33386: LD_VAR 0 3
33390: GREATER
33391: IFFALSE 33417
// length := ( array - i_from ) + i_to else
33393: LD_ADDR_VAR 0 11
33397: PUSH
33398: LD_VAR 0 1
33402: PUSH
33403: LD_VAR 0 2
33407: MINUS
33408: PUSH
33409: LD_VAR 0 3
33413: PLUS
33414: ST_TO_ADDR
33415: GO 33433
// length := i_to - i_from ;
33417: LD_ADDR_VAR 0 11
33421: PUSH
33422: LD_VAR 0 3
33426: PUSH
33427: LD_VAR 0 2
33431: MINUS
33432: ST_TO_ADDR
// end else
33433: GO 33496
// begin d := - 1 ;
33435: LD_ADDR_VAR 0 9
33439: PUSH
33440: LD_INT 1
33442: NEG
33443: ST_TO_ADDR
// if i_from > i_to then
33444: LD_VAR 0 2
33448: PUSH
33449: LD_VAR 0 3
33453: GREATER
33454: IFFALSE 33474
// length := i_from - i_to else
33456: LD_ADDR_VAR 0 11
33460: PUSH
33461: LD_VAR 0 2
33465: PUSH
33466: LD_VAR 0 3
33470: MINUS
33471: ST_TO_ADDR
33472: GO 33496
// length := ( array - i_to ) + i_from ;
33474: LD_ADDR_VAR 0 11
33478: PUSH
33479: LD_VAR 0 1
33483: PUSH
33484: LD_VAR 0 3
33488: MINUS
33489: PUSH
33490: LD_VAR 0 2
33494: PLUS
33495: ST_TO_ADDR
// end ; if not length then
33496: LD_VAR 0 11
33500: NOT
33501: IFFALSE 33505
// exit ;
33503: GO 33663
// tmp := array ;
33505: LD_ADDR_VAR 0 10
33509: PUSH
33510: LD_VAR 0 1
33514: ST_TO_ADDR
// for i = 1 to length do
33515: LD_ADDR_VAR 0 6
33519: PUSH
33520: DOUBLE
33521: LD_INT 1
33523: DEC
33524: ST_TO_ADDR
33525: LD_VAR 0 11
33529: PUSH
33530: FOR_TO
33531: IFFALSE 33651
// begin for j = 1 to array do
33533: LD_ADDR_VAR 0 7
33537: PUSH
33538: DOUBLE
33539: LD_INT 1
33541: DEC
33542: ST_TO_ADDR
33543: LD_VAR 0 1
33547: PUSH
33548: FOR_TO
33549: IFFALSE 33637
// begin k := j + d ;
33551: LD_ADDR_VAR 0 8
33555: PUSH
33556: LD_VAR 0 7
33560: PUSH
33561: LD_VAR 0 9
33565: PLUS
33566: ST_TO_ADDR
// if k > array then
33567: LD_VAR 0 8
33571: PUSH
33572: LD_VAR 0 1
33576: GREATER
33577: IFFALSE 33587
// k := 1 ;
33579: LD_ADDR_VAR 0 8
33583: PUSH
33584: LD_INT 1
33586: ST_TO_ADDR
// if not k then
33587: LD_VAR 0 8
33591: NOT
33592: IFFALSE 33604
// k := array ;
33594: LD_ADDR_VAR 0 8
33598: PUSH
33599: LD_VAR 0 1
33603: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
33604: LD_ADDR_VAR 0 10
33608: PUSH
33609: LD_VAR 0 10
33613: PPUSH
33614: LD_VAR 0 8
33618: PPUSH
33619: LD_VAR 0 1
33623: PUSH
33624: LD_VAR 0 7
33628: ARRAY
33629: PPUSH
33630: CALL_OW 1
33634: ST_TO_ADDR
// end ;
33635: GO 33548
33637: POP
33638: POP
// array := tmp ;
33639: LD_ADDR_VAR 0 1
33643: PUSH
33644: LD_VAR 0 10
33648: ST_TO_ADDR
// end ;
33649: GO 33530
33651: POP
33652: POP
// result := array ;
33653: LD_ADDR_VAR 0 5
33657: PUSH
33658: LD_VAR 0 1
33662: ST_TO_ADDR
// end ;
33663: LD_VAR 0 5
33667: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
33668: LD_INT 0
33670: PPUSH
33671: PPUSH
// result := 0 ;
33672: LD_ADDR_VAR 0 3
33676: PUSH
33677: LD_INT 0
33679: ST_TO_ADDR
// if not array or not value in array then
33680: LD_VAR 0 1
33684: NOT
33685: PUSH
33686: LD_VAR 0 2
33690: PUSH
33691: LD_VAR 0 1
33695: IN
33696: NOT
33697: OR
33698: IFFALSE 33702
// exit ;
33700: GO 33756
// for i = 1 to array do
33702: LD_ADDR_VAR 0 4
33706: PUSH
33707: DOUBLE
33708: LD_INT 1
33710: DEC
33711: ST_TO_ADDR
33712: LD_VAR 0 1
33716: PUSH
33717: FOR_TO
33718: IFFALSE 33754
// if value = array [ i ] then
33720: LD_VAR 0 2
33724: PUSH
33725: LD_VAR 0 1
33729: PUSH
33730: LD_VAR 0 4
33734: ARRAY
33735: EQUAL
33736: IFFALSE 33752
// begin result := i ;
33738: LD_ADDR_VAR 0 3
33742: PUSH
33743: LD_VAR 0 4
33747: ST_TO_ADDR
// exit ;
33748: POP
33749: POP
33750: GO 33756
// end ;
33752: GO 33717
33754: POP
33755: POP
// end ;
33756: LD_VAR 0 3
33760: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
33761: LD_INT 0
33763: PPUSH
// vc_chassis := chassis ;
33764: LD_ADDR_OWVAR 37
33768: PUSH
33769: LD_VAR 0 1
33773: ST_TO_ADDR
// vc_engine := engine ;
33774: LD_ADDR_OWVAR 39
33778: PUSH
33779: LD_VAR 0 2
33783: ST_TO_ADDR
// vc_control := control ;
33784: LD_ADDR_OWVAR 38
33788: PUSH
33789: LD_VAR 0 3
33793: ST_TO_ADDR
// vc_weapon := weapon ;
33794: LD_ADDR_OWVAR 40
33798: PUSH
33799: LD_VAR 0 4
33803: ST_TO_ADDR
// vc_fuel_battery := fuel ;
33804: LD_ADDR_OWVAR 41
33808: PUSH
33809: LD_VAR 0 5
33813: ST_TO_ADDR
// end ;
33814: LD_VAR 0 6
33818: RET
// export function WantPlant ( unit ) ; var task ; begin
33819: LD_INT 0
33821: PPUSH
33822: PPUSH
// result := false ;
33823: LD_ADDR_VAR 0 2
33827: PUSH
33828: LD_INT 0
33830: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
33831: LD_ADDR_VAR 0 3
33835: PUSH
33836: LD_VAR 0 1
33840: PPUSH
33841: CALL_OW 437
33845: ST_TO_ADDR
// if task then
33846: LD_VAR 0 3
33850: IFFALSE 33878
// if task [ 1 ] [ 1 ] = p then
33852: LD_VAR 0 3
33856: PUSH
33857: LD_INT 1
33859: ARRAY
33860: PUSH
33861: LD_INT 1
33863: ARRAY
33864: PUSH
33865: LD_STRING p
33867: EQUAL
33868: IFFALSE 33878
// result := true ;
33870: LD_ADDR_VAR 0 2
33874: PUSH
33875: LD_INT 1
33877: ST_TO_ADDR
// end ;
33878: LD_VAR 0 2
33882: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
33883: LD_INT 0
33885: PPUSH
33886: PPUSH
33887: PPUSH
33888: PPUSH
// if pos < 1 then
33889: LD_VAR 0 2
33893: PUSH
33894: LD_INT 1
33896: LESS
33897: IFFALSE 33901
// exit ;
33899: GO 34204
// if pos = 1 then
33901: LD_VAR 0 2
33905: PUSH
33906: LD_INT 1
33908: EQUAL
33909: IFFALSE 33942
// result := Replace ( arr , pos [ 1 ] , value ) else
33911: LD_ADDR_VAR 0 4
33915: PUSH
33916: LD_VAR 0 1
33920: PPUSH
33921: LD_VAR 0 2
33925: PUSH
33926: LD_INT 1
33928: ARRAY
33929: PPUSH
33930: LD_VAR 0 3
33934: PPUSH
33935: CALL_OW 1
33939: ST_TO_ADDR
33940: GO 34204
// begin tmp := arr ;
33942: LD_ADDR_VAR 0 6
33946: PUSH
33947: LD_VAR 0 1
33951: ST_TO_ADDR
// s_arr := [ tmp ] ;
33952: LD_ADDR_VAR 0 7
33956: PUSH
33957: LD_VAR 0 6
33961: PUSH
33962: EMPTY
33963: LIST
33964: ST_TO_ADDR
// for i = 1 to pos - 1 do
33965: LD_ADDR_VAR 0 5
33969: PUSH
33970: DOUBLE
33971: LD_INT 1
33973: DEC
33974: ST_TO_ADDR
33975: LD_VAR 0 2
33979: PUSH
33980: LD_INT 1
33982: MINUS
33983: PUSH
33984: FOR_TO
33985: IFFALSE 34030
// begin tmp := tmp [ pos [ i ] ] ;
33987: LD_ADDR_VAR 0 6
33991: PUSH
33992: LD_VAR 0 6
33996: PUSH
33997: LD_VAR 0 2
34001: PUSH
34002: LD_VAR 0 5
34006: ARRAY
34007: ARRAY
34008: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
34009: LD_ADDR_VAR 0 7
34013: PUSH
34014: LD_VAR 0 7
34018: PUSH
34019: LD_VAR 0 6
34023: PUSH
34024: EMPTY
34025: LIST
34026: ADD
34027: ST_TO_ADDR
// end ;
34028: GO 33984
34030: POP
34031: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
34032: LD_ADDR_VAR 0 6
34036: PUSH
34037: LD_VAR 0 6
34041: PPUSH
34042: LD_VAR 0 2
34046: PUSH
34047: LD_VAR 0 2
34051: ARRAY
34052: PPUSH
34053: LD_VAR 0 3
34057: PPUSH
34058: CALL_OW 1
34062: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
34063: LD_ADDR_VAR 0 7
34067: PUSH
34068: LD_VAR 0 7
34072: PPUSH
34073: LD_VAR 0 7
34077: PPUSH
34078: LD_VAR 0 6
34082: PPUSH
34083: CALL_OW 1
34087: ST_TO_ADDR
// for i = s_arr downto 2 do
34088: LD_ADDR_VAR 0 5
34092: PUSH
34093: DOUBLE
34094: LD_VAR 0 7
34098: INC
34099: ST_TO_ADDR
34100: LD_INT 2
34102: PUSH
34103: FOR_DOWNTO
34104: IFFALSE 34188
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
34106: LD_ADDR_VAR 0 6
34110: PUSH
34111: LD_VAR 0 7
34115: PUSH
34116: LD_VAR 0 5
34120: PUSH
34121: LD_INT 1
34123: MINUS
34124: ARRAY
34125: PPUSH
34126: LD_VAR 0 2
34130: PUSH
34131: LD_VAR 0 5
34135: PUSH
34136: LD_INT 1
34138: MINUS
34139: ARRAY
34140: PPUSH
34141: LD_VAR 0 7
34145: PUSH
34146: LD_VAR 0 5
34150: ARRAY
34151: PPUSH
34152: CALL_OW 1
34156: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
34157: LD_ADDR_VAR 0 7
34161: PUSH
34162: LD_VAR 0 7
34166: PPUSH
34167: LD_VAR 0 5
34171: PUSH
34172: LD_INT 1
34174: MINUS
34175: PPUSH
34176: LD_VAR 0 6
34180: PPUSH
34181: CALL_OW 1
34185: ST_TO_ADDR
// end ;
34186: GO 34103
34188: POP
34189: POP
// result := s_arr [ 1 ] ;
34190: LD_ADDR_VAR 0 4
34194: PUSH
34195: LD_VAR 0 7
34199: PUSH
34200: LD_INT 1
34202: ARRAY
34203: ST_TO_ADDR
// end ; end ;
34204: LD_VAR 0 4
34208: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
34209: LD_INT 0
34211: PPUSH
34212: PPUSH
// if not list then
34213: LD_VAR 0 1
34217: NOT
34218: IFFALSE 34222
// exit ;
34220: GO 34313
// i := list [ pos1 ] ;
34222: LD_ADDR_VAR 0 5
34226: PUSH
34227: LD_VAR 0 1
34231: PUSH
34232: LD_VAR 0 2
34236: ARRAY
34237: ST_TO_ADDR
// if not i then
34238: LD_VAR 0 5
34242: NOT
34243: IFFALSE 34247
// exit ;
34245: GO 34313
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
34247: LD_ADDR_VAR 0 1
34251: PUSH
34252: LD_VAR 0 1
34256: PPUSH
34257: LD_VAR 0 2
34261: PPUSH
34262: LD_VAR 0 1
34266: PUSH
34267: LD_VAR 0 3
34271: ARRAY
34272: PPUSH
34273: CALL_OW 1
34277: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
34278: LD_ADDR_VAR 0 1
34282: PUSH
34283: LD_VAR 0 1
34287: PPUSH
34288: LD_VAR 0 3
34292: PPUSH
34293: LD_VAR 0 5
34297: PPUSH
34298: CALL_OW 1
34302: ST_TO_ADDR
// result := list ;
34303: LD_ADDR_VAR 0 4
34307: PUSH
34308: LD_VAR 0 1
34312: ST_TO_ADDR
// end ;
34313: LD_VAR 0 4
34317: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
34318: LD_INT 0
34320: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
34321: LD_ADDR_VAR 0 5
34325: PUSH
34326: LD_VAR 0 1
34330: PPUSH
34331: CALL_OW 250
34335: PPUSH
34336: LD_VAR 0 1
34340: PPUSH
34341: CALL_OW 251
34345: PPUSH
34346: LD_VAR 0 2
34350: PPUSH
34351: LD_VAR 0 3
34355: PPUSH
34356: LD_VAR 0 4
34360: PPUSH
34361: CALL 34371 0 5
34365: ST_TO_ADDR
// end ;
34366: LD_VAR 0 5
34370: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
34371: LD_INT 0
34373: PPUSH
34374: PPUSH
34375: PPUSH
34376: PPUSH
// if not list then
34377: LD_VAR 0 3
34381: NOT
34382: IFFALSE 34386
// exit ;
34384: GO 34774
// result := [ ] ;
34386: LD_ADDR_VAR 0 6
34390: PUSH
34391: EMPTY
34392: ST_TO_ADDR
// for i in list do
34393: LD_ADDR_VAR 0 7
34397: PUSH
34398: LD_VAR 0 3
34402: PUSH
34403: FOR_IN
34404: IFFALSE 34606
// begin tmp := GetDistUnitXY ( i , x , y ) ;
34406: LD_ADDR_VAR 0 9
34410: PUSH
34411: LD_VAR 0 7
34415: PPUSH
34416: LD_VAR 0 1
34420: PPUSH
34421: LD_VAR 0 2
34425: PPUSH
34426: CALL_OW 297
34430: ST_TO_ADDR
// if not result then
34431: LD_VAR 0 6
34435: NOT
34436: IFFALSE 34462
// result := [ [ i , tmp ] ] else
34438: LD_ADDR_VAR 0 6
34442: PUSH
34443: LD_VAR 0 7
34447: PUSH
34448: LD_VAR 0 9
34452: PUSH
34453: EMPTY
34454: LIST
34455: LIST
34456: PUSH
34457: EMPTY
34458: LIST
34459: ST_TO_ADDR
34460: GO 34604
// begin if result [ result ] [ 2 ] < tmp then
34462: LD_VAR 0 6
34466: PUSH
34467: LD_VAR 0 6
34471: ARRAY
34472: PUSH
34473: LD_INT 2
34475: ARRAY
34476: PUSH
34477: LD_VAR 0 9
34481: LESS
34482: IFFALSE 34524
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
34484: LD_ADDR_VAR 0 6
34488: PUSH
34489: LD_VAR 0 6
34493: PPUSH
34494: LD_VAR 0 6
34498: PUSH
34499: LD_INT 1
34501: PLUS
34502: PPUSH
34503: LD_VAR 0 7
34507: PUSH
34508: LD_VAR 0 9
34512: PUSH
34513: EMPTY
34514: LIST
34515: LIST
34516: PPUSH
34517: CALL_OW 2
34521: ST_TO_ADDR
34522: GO 34604
// for j = 1 to result do
34524: LD_ADDR_VAR 0 8
34528: PUSH
34529: DOUBLE
34530: LD_INT 1
34532: DEC
34533: ST_TO_ADDR
34534: LD_VAR 0 6
34538: PUSH
34539: FOR_TO
34540: IFFALSE 34602
// begin if tmp < result [ j ] [ 2 ] then
34542: LD_VAR 0 9
34546: PUSH
34547: LD_VAR 0 6
34551: PUSH
34552: LD_VAR 0 8
34556: ARRAY
34557: PUSH
34558: LD_INT 2
34560: ARRAY
34561: LESS
34562: IFFALSE 34600
// begin result := Insert ( result , j , [ i , tmp ] ) ;
34564: LD_ADDR_VAR 0 6
34568: PUSH
34569: LD_VAR 0 6
34573: PPUSH
34574: LD_VAR 0 8
34578: PPUSH
34579: LD_VAR 0 7
34583: PUSH
34584: LD_VAR 0 9
34588: PUSH
34589: EMPTY
34590: LIST
34591: LIST
34592: PPUSH
34593: CALL_OW 2
34597: ST_TO_ADDR
// break ;
34598: GO 34602
// end ; end ;
34600: GO 34539
34602: POP
34603: POP
// end ; end ;
34604: GO 34403
34606: POP
34607: POP
// if result and not asc then
34608: LD_VAR 0 6
34612: PUSH
34613: LD_VAR 0 4
34617: NOT
34618: AND
34619: IFFALSE 34694
// begin tmp := result ;
34621: LD_ADDR_VAR 0 9
34625: PUSH
34626: LD_VAR 0 6
34630: ST_TO_ADDR
// for i = tmp downto 1 do
34631: LD_ADDR_VAR 0 7
34635: PUSH
34636: DOUBLE
34637: LD_VAR 0 9
34641: INC
34642: ST_TO_ADDR
34643: LD_INT 1
34645: PUSH
34646: FOR_DOWNTO
34647: IFFALSE 34692
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
34649: LD_ADDR_VAR 0 6
34653: PUSH
34654: LD_VAR 0 6
34658: PPUSH
34659: LD_VAR 0 9
34663: PUSH
34664: LD_VAR 0 7
34668: MINUS
34669: PUSH
34670: LD_INT 1
34672: PLUS
34673: PPUSH
34674: LD_VAR 0 9
34678: PUSH
34679: LD_VAR 0 7
34683: ARRAY
34684: PPUSH
34685: CALL_OW 1
34689: ST_TO_ADDR
34690: GO 34646
34692: POP
34693: POP
// end ; tmp := [ ] ;
34694: LD_ADDR_VAR 0 9
34698: PUSH
34699: EMPTY
34700: ST_TO_ADDR
// if mode then
34701: LD_VAR 0 5
34705: IFFALSE 34774
// begin for i = 1 to result do
34707: LD_ADDR_VAR 0 7
34711: PUSH
34712: DOUBLE
34713: LD_INT 1
34715: DEC
34716: ST_TO_ADDR
34717: LD_VAR 0 6
34721: PUSH
34722: FOR_TO
34723: IFFALSE 34762
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
34725: LD_ADDR_VAR 0 9
34729: PUSH
34730: LD_VAR 0 9
34734: PPUSH
34735: LD_VAR 0 7
34739: PPUSH
34740: LD_VAR 0 6
34744: PUSH
34745: LD_VAR 0 7
34749: ARRAY
34750: PUSH
34751: LD_INT 1
34753: ARRAY
34754: PPUSH
34755: CALL_OW 1
34759: ST_TO_ADDR
34760: GO 34722
34762: POP
34763: POP
// result := tmp ;
34764: LD_ADDR_VAR 0 6
34768: PUSH
34769: LD_VAR 0 9
34773: ST_TO_ADDR
// end ; end ;
34774: LD_VAR 0 6
34778: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
34779: LD_INT 0
34781: PPUSH
34782: PPUSH
34783: PPUSH
34784: PPUSH
34785: PPUSH
34786: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
34787: LD_ADDR_VAR 0 5
34791: PUSH
34792: LD_INT 0
34794: PUSH
34795: LD_INT 0
34797: PUSH
34798: LD_INT 0
34800: PUSH
34801: EMPTY
34802: PUSH
34803: EMPTY
34804: LIST
34805: LIST
34806: LIST
34807: LIST
34808: ST_TO_ADDR
// if not x or not y then
34809: LD_VAR 0 2
34813: NOT
34814: PUSH
34815: LD_VAR 0 3
34819: NOT
34820: OR
34821: IFFALSE 34825
// exit ;
34823: GO 36477
// if not range then
34825: LD_VAR 0 4
34829: NOT
34830: IFFALSE 34840
// range := 10 ;
34832: LD_ADDR_VAR 0 4
34836: PUSH
34837: LD_INT 10
34839: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34840: LD_ADDR_VAR 0 8
34844: PUSH
34845: LD_INT 81
34847: PUSH
34848: LD_VAR 0 1
34852: PUSH
34853: EMPTY
34854: LIST
34855: LIST
34856: PUSH
34857: LD_INT 92
34859: PUSH
34860: LD_VAR 0 2
34864: PUSH
34865: LD_VAR 0 3
34869: PUSH
34870: LD_VAR 0 4
34874: PUSH
34875: EMPTY
34876: LIST
34877: LIST
34878: LIST
34879: LIST
34880: PUSH
34881: LD_INT 3
34883: PUSH
34884: LD_INT 21
34886: PUSH
34887: LD_INT 3
34889: PUSH
34890: EMPTY
34891: LIST
34892: LIST
34893: PUSH
34894: EMPTY
34895: LIST
34896: LIST
34897: PUSH
34898: EMPTY
34899: LIST
34900: LIST
34901: LIST
34902: PPUSH
34903: CALL_OW 69
34907: ST_TO_ADDR
// if not tmp then
34908: LD_VAR 0 8
34912: NOT
34913: IFFALSE 34917
// exit ;
34915: GO 36477
// for i in tmp do
34917: LD_ADDR_VAR 0 6
34921: PUSH
34922: LD_VAR 0 8
34926: PUSH
34927: FOR_IN
34928: IFFALSE 36452
// begin points := [ 0 , 0 , 0 ] ;
34930: LD_ADDR_VAR 0 9
34934: PUSH
34935: LD_INT 0
34937: PUSH
34938: LD_INT 0
34940: PUSH
34941: LD_INT 0
34943: PUSH
34944: EMPTY
34945: LIST
34946: LIST
34947: LIST
34948: ST_TO_ADDR
// bpoints := 1 ;
34949: LD_ADDR_VAR 0 10
34953: PUSH
34954: LD_INT 1
34956: ST_TO_ADDR
// case GetType ( i ) of unit_human :
34957: LD_VAR 0 6
34961: PPUSH
34962: CALL_OW 247
34966: PUSH
34967: LD_INT 1
34969: DOUBLE
34970: EQUAL
34971: IFTRUE 34975
34973: GO 35553
34975: POP
// begin if GetClass ( i ) = 1 then
34976: LD_VAR 0 6
34980: PPUSH
34981: CALL_OW 257
34985: PUSH
34986: LD_INT 1
34988: EQUAL
34989: IFFALSE 35010
// points := [ 10 , 5 , 3 ] ;
34991: LD_ADDR_VAR 0 9
34995: PUSH
34996: LD_INT 10
34998: PUSH
34999: LD_INT 5
35001: PUSH
35002: LD_INT 3
35004: PUSH
35005: EMPTY
35006: LIST
35007: LIST
35008: LIST
35009: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
35010: LD_VAR 0 6
35014: PPUSH
35015: CALL_OW 257
35019: PUSH
35020: LD_INT 2
35022: PUSH
35023: LD_INT 3
35025: PUSH
35026: LD_INT 4
35028: PUSH
35029: EMPTY
35030: LIST
35031: LIST
35032: LIST
35033: IN
35034: IFFALSE 35055
// points := [ 3 , 2 , 1 ] ;
35036: LD_ADDR_VAR 0 9
35040: PUSH
35041: LD_INT 3
35043: PUSH
35044: LD_INT 2
35046: PUSH
35047: LD_INT 1
35049: PUSH
35050: EMPTY
35051: LIST
35052: LIST
35053: LIST
35054: ST_TO_ADDR
// if GetClass ( i ) = 5 then
35055: LD_VAR 0 6
35059: PPUSH
35060: CALL_OW 257
35064: PUSH
35065: LD_INT 5
35067: EQUAL
35068: IFFALSE 35089
// points := [ 130 , 5 , 2 ] ;
35070: LD_ADDR_VAR 0 9
35074: PUSH
35075: LD_INT 130
35077: PUSH
35078: LD_INT 5
35080: PUSH
35081: LD_INT 2
35083: PUSH
35084: EMPTY
35085: LIST
35086: LIST
35087: LIST
35088: ST_TO_ADDR
// if GetClass ( i ) = 8 then
35089: LD_VAR 0 6
35093: PPUSH
35094: CALL_OW 257
35098: PUSH
35099: LD_INT 8
35101: EQUAL
35102: IFFALSE 35123
// points := [ 35 , 35 , 30 ] ;
35104: LD_ADDR_VAR 0 9
35108: PUSH
35109: LD_INT 35
35111: PUSH
35112: LD_INT 35
35114: PUSH
35115: LD_INT 30
35117: PUSH
35118: EMPTY
35119: LIST
35120: LIST
35121: LIST
35122: ST_TO_ADDR
// if GetClass ( i ) = 9 then
35123: LD_VAR 0 6
35127: PPUSH
35128: CALL_OW 257
35132: PUSH
35133: LD_INT 9
35135: EQUAL
35136: IFFALSE 35157
// points := [ 20 , 55 , 40 ] ;
35138: LD_ADDR_VAR 0 9
35142: PUSH
35143: LD_INT 20
35145: PUSH
35146: LD_INT 55
35148: PUSH
35149: LD_INT 40
35151: PUSH
35152: EMPTY
35153: LIST
35154: LIST
35155: LIST
35156: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
35157: LD_VAR 0 6
35161: PPUSH
35162: CALL_OW 257
35166: PUSH
35167: LD_INT 12
35169: PUSH
35170: LD_INT 16
35172: PUSH
35173: EMPTY
35174: LIST
35175: LIST
35176: IN
35177: IFFALSE 35198
// points := [ 5 , 3 , 2 ] ;
35179: LD_ADDR_VAR 0 9
35183: PUSH
35184: LD_INT 5
35186: PUSH
35187: LD_INT 3
35189: PUSH
35190: LD_INT 2
35192: PUSH
35193: EMPTY
35194: LIST
35195: LIST
35196: LIST
35197: ST_TO_ADDR
// if GetClass ( i ) = 17 then
35198: LD_VAR 0 6
35202: PPUSH
35203: CALL_OW 257
35207: PUSH
35208: LD_INT 17
35210: EQUAL
35211: IFFALSE 35232
// points := [ 100 , 50 , 75 ] ;
35213: LD_ADDR_VAR 0 9
35217: PUSH
35218: LD_INT 100
35220: PUSH
35221: LD_INT 50
35223: PUSH
35224: LD_INT 75
35226: PUSH
35227: EMPTY
35228: LIST
35229: LIST
35230: LIST
35231: ST_TO_ADDR
// if GetClass ( i ) = 15 then
35232: LD_VAR 0 6
35236: PPUSH
35237: CALL_OW 257
35241: PUSH
35242: LD_INT 15
35244: EQUAL
35245: IFFALSE 35266
// points := [ 10 , 5 , 3 ] ;
35247: LD_ADDR_VAR 0 9
35251: PUSH
35252: LD_INT 10
35254: PUSH
35255: LD_INT 5
35257: PUSH
35258: LD_INT 3
35260: PUSH
35261: EMPTY
35262: LIST
35263: LIST
35264: LIST
35265: ST_TO_ADDR
// if GetClass ( i ) = 14 then
35266: LD_VAR 0 6
35270: PPUSH
35271: CALL_OW 257
35275: PUSH
35276: LD_INT 14
35278: EQUAL
35279: IFFALSE 35300
// points := [ 10 , 0 , 0 ] ;
35281: LD_ADDR_VAR 0 9
35285: PUSH
35286: LD_INT 10
35288: PUSH
35289: LD_INT 0
35291: PUSH
35292: LD_INT 0
35294: PUSH
35295: EMPTY
35296: LIST
35297: LIST
35298: LIST
35299: ST_TO_ADDR
// if GetClass ( i ) = 11 then
35300: LD_VAR 0 6
35304: PPUSH
35305: CALL_OW 257
35309: PUSH
35310: LD_INT 11
35312: EQUAL
35313: IFFALSE 35334
// points := [ 30 , 10 , 5 ] ;
35315: LD_ADDR_VAR 0 9
35319: PUSH
35320: LD_INT 30
35322: PUSH
35323: LD_INT 10
35325: PUSH
35326: LD_INT 5
35328: PUSH
35329: EMPTY
35330: LIST
35331: LIST
35332: LIST
35333: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
35334: LD_VAR 0 1
35338: PPUSH
35339: LD_INT 5
35341: PPUSH
35342: CALL_OW 321
35346: PUSH
35347: LD_INT 2
35349: EQUAL
35350: IFFALSE 35367
// bpoints := bpoints * 1.8 ;
35352: LD_ADDR_VAR 0 10
35356: PUSH
35357: LD_VAR 0 10
35361: PUSH
35362: LD_REAL  1.80000000000000E+0000
35365: MUL
35366: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
35367: LD_VAR 0 6
35371: PPUSH
35372: CALL_OW 257
35376: PUSH
35377: LD_INT 1
35379: PUSH
35380: LD_INT 2
35382: PUSH
35383: LD_INT 3
35385: PUSH
35386: LD_INT 4
35388: PUSH
35389: EMPTY
35390: LIST
35391: LIST
35392: LIST
35393: LIST
35394: IN
35395: PUSH
35396: LD_VAR 0 1
35400: PPUSH
35401: LD_INT 51
35403: PPUSH
35404: CALL_OW 321
35408: PUSH
35409: LD_INT 2
35411: EQUAL
35412: AND
35413: IFFALSE 35430
// bpoints := bpoints * 1.2 ;
35415: LD_ADDR_VAR 0 10
35419: PUSH
35420: LD_VAR 0 10
35424: PUSH
35425: LD_REAL  1.20000000000000E+0000
35428: MUL
35429: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
35430: LD_VAR 0 6
35434: PPUSH
35435: CALL_OW 257
35439: PUSH
35440: LD_INT 5
35442: PUSH
35443: LD_INT 7
35445: PUSH
35446: LD_INT 9
35448: PUSH
35449: EMPTY
35450: LIST
35451: LIST
35452: LIST
35453: IN
35454: PUSH
35455: LD_VAR 0 1
35459: PPUSH
35460: LD_INT 52
35462: PPUSH
35463: CALL_OW 321
35467: PUSH
35468: LD_INT 2
35470: EQUAL
35471: AND
35472: IFFALSE 35489
// bpoints := bpoints * 1.5 ;
35474: LD_ADDR_VAR 0 10
35478: PUSH
35479: LD_VAR 0 10
35483: PUSH
35484: LD_REAL  1.50000000000000E+0000
35487: MUL
35488: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
35489: LD_VAR 0 1
35493: PPUSH
35494: LD_INT 66
35496: PPUSH
35497: CALL_OW 321
35501: PUSH
35502: LD_INT 2
35504: EQUAL
35505: IFFALSE 35522
// bpoints := bpoints * 1.1 ;
35507: LD_ADDR_VAR 0 10
35511: PUSH
35512: LD_VAR 0 10
35516: PUSH
35517: LD_REAL  1.10000000000000E+0000
35520: MUL
35521: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
35522: LD_ADDR_VAR 0 10
35526: PUSH
35527: LD_VAR 0 10
35531: PUSH
35532: LD_VAR 0 6
35536: PPUSH
35537: LD_INT 1
35539: PPUSH
35540: CALL_OW 259
35544: PUSH
35545: LD_REAL  1.15000000000000E+0000
35548: MUL
35549: MUL
35550: ST_TO_ADDR
// end ; unit_vehicle :
35551: GO 36381
35553: LD_INT 2
35555: DOUBLE
35556: EQUAL
35557: IFTRUE 35561
35559: GO 36369
35561: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
35562: LD_VAR 0 6
35566: PPUSH
35567: CALL_OW 264
35571: PUSH
35572: LD_INT 2
35574: PUSH
35575: LD_INT 42
35577: PUSH
35578: LD_INT 24
35580: PUSH
35581: EMPTY
35582: LIST
35583: LIST
35584: LIST
35585: IN
35586: IFFALSE 35607
// points := [ 25 , 5 , 3 ] ;
35588: LD_ADDR_VAR 0 9
35592: PUSH
35593: LD_INT 25
35595: PUSH
35596: LD_INT 5
35598: PUSH
35599: LD_INT 3
35601: PUSH
35602: EMPTY
35603: LIST
35604: LIST
35605: LIST
35606: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
35607: LD_VAR 0 6
35611: PPUSH
35612: CALL_OW 264
35616: PUSH
35617: LD_INT 4
35619: PUSH
35620: LD_INT 43
35622: PUSH
35623: LD_INT 25
35625: PUSH
35626: EMPTY
35627: LIST
35628: LIST
35629: LIST
35630: IN
35631: IFFALSE 35652
// points := [ 40 , 15 , 5 ] ;
35633: LD_ADDR_VAR 0 9
35637: PUSH
35638: LD_INT 40
35640: PUSH
35641: LD_INT 15
35643: PUSH
35644: LD_INT 5
35646: PUSH
35647: EMPTY
35648: LIST
35649: LIST
35650: LIST
35651: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
35652: LD_VAR 0 6
35656: PPUSH
35657: CALL_OW 264
35661: PUSH
35662: LD_INT 3
35664: PUSH
35665: LD_INT 23
35667: PUSH
35668: EMPTY
35669: LIST
35670: LIST
35671: IN
35672: IFFALSE 35693
// points := [ 7 , 25 , 8 ] ;
35674: LD_ADDR_VAR 0 9
35678: PUSH
35679: LD_INT 7
35681: PUSH
35682: LD_INT 25
35684: PUSH
35685: LD_INT 8
35687: PUSH
35688: EMPTY
35689: LIST
35690: LIST
35691: LIST
35692: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
35693: LD_VAR 0 6
35697: PPUSH
35698: CALL_OW 264
35702: PUSH
35703: LD_INT 5
35705: PUSH
35706: LD_INT 27
35708: PUSH
35709: LD_INT 44
35711: PUSH
35712: EMPTY
35713: LIST
35714: LIST
35715: LIST
35716: IN
35717: IFFALSE 35738
// points := [ 14 , 50 , 16 ] ;
35719: LD_ADDR_VAR 0 9
35723: PUSH
35724: LD_INT 14
35726: PUSH
35727: LD_INT 50
35729: PUSH
35730: LD_INT 16
35732: PUSH
35733: EMPTY
35734: LIST
35735: LIST
35736: LIST
35737: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
35738: LD_VAR 0 6
35742: PPUSH
35743: CALL_OW 264
35747: PUSH
35748: LD_INT 6
35750: PUSH
35751: LD_INT 46
35753: PUSH
35754: EMPTY
35755: LIST
35756: LIST
35757: IN
35758: IFFALSE 35779
// points := [ 32 , 120 , 70 ] ;
35760: LD_ADDR_VAR 0 9
35764: PUSH
35765: LD_INT 32
35767: PUSH
35768: LD_INT 120
35770: PUSH
35771: LD_INT 70
35773: PUSH
35774: EMPTY
35775: LIST
35776: LIST
35777: LIST
35778: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
35779: LD_VAR 0 6
35783: PPUSH
35784: CALL_OW 264
35788: PUSH
35789: LD_INT 7
35791: PUSH
35792: LD_INT 28
35794: PUSH
35795: LD_INT 45
35797: PUSH
35798: LD_EXP 57
35802: PUSH
35803: EMPTY
35804: LIST
35805: LIST
35806: LIST
35807: LIST
35808: IN
35809: IFFALSE 35830
// points := [ 35 , 20 , 45 ] ;
35811: LD_ADDR_VAR 0 9
35815: PUSH
35816: LD_INT 35
35818: PUSH
35819: LD_INT 20
35821: PUSH
35822: LD_INT 45
35824: PUSH
35825: EMPTY
35826: LIST
35827: LIST
35828: LIST
35829: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
35830: LD_VAR 0 6
35834: PPUSH
35835: CALL_OW 264
35839: PUSH
35840: LD_INT 47
35842: PUSH
35843: EMPTY
35844: LIST
35845: IN
35846: IFFALSE 35867
// points := [ 67 , 45 , 75 ] ;
35848: LD_ADDR_VAR 0 9
35852: PUSH
35853: LD_INT 67
35855: PUSH
35856: LD_INT 45
35858: PUSH
35859: LD_INT 75
35861: PUSH
35862: EMPTY
35863: LIST
35864: LIST
35865: LIST
35866: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
35867: LD_VAR 0 6
35871: PPUSH
35872: CALL_OW 264
35876: PUSH
35877: LD_INT 26
35879: PUSH
35880: EMPTY
35881: LIST
35882: IN
35883: IFFALSE 35904
// points := [ 120 , 30 , 80 ] ;
35885: LD_ADDR_VAR 0 9
35889: PUSH
35890: LD_INT 120
35892: PUSH
35893: LD_INT 30
35895: PUSH
35896: LD_INT 80
35898: PUSH
35899: EMPTY
35900: LIST
35901: LIST
35902: LIST
35903: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
35904: LD_VAR 0 6
35908: PPUSH
35909: CALL_OW 264
35913: PUSH
35914: LD_INT 22
35916: PUSH
35917: EMPTY
35918: LIST
35919: IN
35920: IFFALSE 35941
// points := [ 40 , 1 , 1 ] ;
35922: LD_ADDR_VAR 0 9
35926: PUSH
35927: LD_INT 40
35929: PUSH
35930: LD_INT 1
35932: PUSH
35933: LD_INT 1
35935: PUSH
35936: EMPTY
35937: LIST
35938: LIST
35939: LIST
35940: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
35941: LD_VAR 0 6
35945: PPUSH
35946: CALL_OW 264
35950: PUSH
35951: LD_INT 29
35953: PUSH
35954: EMPTY
35955: LIST
35956: IN
35957: IFFALSE 35978
// points := [ 70 , 200 , 400 ] ;
35959: LD_ADDR_VAR 0 9
35963: PUSH
35964: LD_INT 70
35966: PUSH
35967: LD_INT 200
35969: PUSH
35970: LD_INT 400
35972: PUSH
35973: EMPTY
35974: LIST
35975: LIST
35976: LIST
35977: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
35978: LD_VAR 0 6
35982: PPUSH
35983: CALL_OW 264
35987: PUSH
35988: LD_INT 14
35990: PUSH
35991: LD_INT 53
35993: PUSH
35994: EMPTY
35995: LIST
35996: LIST
35997: IN
35998: IFFALSE 36019
// points := [ 40 , 10 , 20 ] ;
36000: LD_ADDR_VAR 0 9
36004: PUSH
36005: LD_INT 40
36007: PUSH
36008: LD_INT 10
36010: PUSH
36011: LD_INT 20
36013: PUSH
36014: EMPTY
36015: LIST
36016: LIST
36017: LIST
36018: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
36019: LD_VAR 0 6
36023: PPUSH
36024: CALL_OW 264
36028: PUSH
36029: LD_INT 9
36031: PUSH
36032: EMPTY
36033: LIST
36034: IN
36035: IFFALSE 36056
// points := [ 5 , 70 , 20 ] ;
36037: LD_ADDR_VAR 0 9
36041: PUSH
36042: LD_INT 5
36044: PUSH
36045: LD_INT 70
36047: PUSH
36048: LD_INT 20
36050: PUSH
36051: EMPTY
36052: LIST
36053: LIST
36054: LIST
36055: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
36056: LD_VAR 0 6
36060: PPUSH
36061: CALL_OW 264
36065: PUSH
36066: LD_INT 10
36068: PUSH
36069: EMPTY
36070: LIST
36071: IN
36072: IFFALSE 36093
// points := [ 35 , 110 , 70 ] ;
36074: LD_ADDR_VAR 0 9
36078: PUSH
36079: LD_INT 35
36081: PUSH
36082: LD_INT 110
36084: PUSH
36085: LD_INT 70
36087: PUSH
36088: EMPTY
36089: LIST
36090: LIST
36091: LIST
36092: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
36093: LD_VAR 0 6
36097: PPUSH
36098: CALL_OW 265
36102: PUSH
36103: LD_INT 25
36105: EQUAL
36106: IFFALSE 36127
// points := [ 80 , 65 , 100 ] ;
36108: LD_ADDR_VAR 0 9
36112: PUSH
36113: LD_INT 80
36115: PUSH
36116: LD_INT 65
36118: PUSH
36119: LD_INT 100
36121: PUSH
36122: EMPTY
36123: LIST
36124: LIST
36125: LIST
36126: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
36127: LD_VAR 0 6
36131: PPUSH
36132: CALL_OW 263
36136: PUSH
36137: LD_INT 1
36139: EQUAL
36140: IFFALSE 36175
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
36142: LD_ADDR_VAR 0 10
36146: PUSH
36147: LD_VAR 0 10
36151: PUSH
36152: LD_VAR 0 6
36156: PPUSH
36157: CALL_OW 311
36161: PPUSH
36162: LD_INT 3
36164: PPUSH
36165: CALL_OW 259
36169: PUSH
36170: LD_INT 4
36172: MUL
36173: MUL
36174: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
36175: LD_VAR 0 6
36179: PPUSH
36180: CALL_OW 263
36184: PUSH
36185: LD_INT 2
36187: EQUAL
36188: IFFALSE 36239
// begin j := IsControledBy ( i ) ;
36190: LD_ADDR_VAR 0 7
36194: PUSH
36195: LD_VAR 0 6
36199: PPUSH
36200: CALL_OW 312
36204: ST_TO_ADDR
// if j then
36205: LD_VAR 0 7
36209: IFFALSE 36239
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
36211: LD_ADDR_VAR 0 10
36215: PUSH
36216: LD_VAR 0 10
36220: PUSH
36221: LD_VAR 0 7
36225: PPUSH
36226: LD_INT 3
36228: PPUSH
36229: CALL_OW 259
36233: PUSH
36234: LD_INT 3
36236: MUL
36237: MUL
36238: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
36239: LD_VAR 0 6
36243: PPUSH
36244: CALL_OW 264
36248: PUSH
36249: LD_INT 5
36251: PUSH
36252: LD_INT 6
36254: PUSH
36255: LD_INT 46
36257: PUSH
36258: LD_INT 44
36260: PUSH
36261: LD_INT 47
36263: PUSH
36264: LD_INT 45
36266: PUSH
36267: LD_INT 28
36269: PUSH
36270: LD_INT 7
36272: PUSH
36273: LD_INT 27
36275: PUSH
36276: LD_INT 29
36278: PUSH
36279: EMPTY
36280: LIST
36281: LIST
36282: LIST
36283: LIST
36284: LIST
36285: LIST
36286: LIST
36287: LIST
36288: LIST
36289: LIST
36290: IN
36291: PUSH
36292: LD_VAR 0 1
36296: PPUSH
36297: LD_INT 52
36299: PPUSH
36300: CALL_OW 321
36304: PUSH
36305: LD_INT 2
36307: EQUAL
36308: AND
36309: IFFALSE 36326
// bpoints := bpoints * 1.2 ;
36311: LD_ADDR_VAR 0 10
36315: PUSH
36316: LD_VAR 0 10
36320: PUSH
36321: LD_REAL  1.20000000000000E+0000
36324: MUL
36325: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
36326: LD_VAR 0 6
36330: PPUSH
36331: CALL_OW 264
36335: PUSH
36336: LD_INT 6
36338: PUSH
36339: LD_INT 46
36341: PUSH
36342: LD_INT 47
36344: PUSH
36345: EMPTY
36346: LIST
36347: LIST
36348: LIST
36349: IN
36350: IFFALSE 36367
// bpoints := bpoints * 1.2 ;
36352: LD_ADDR_VAR 0 10
36356: PUSH
36357: LD_VAR 0 10
36361: PUSH
36362: LD_REAL  1.20000000000000E+0000
36365: MUL
36366: ST_TO_ADDR
// end ; unit_building :
36367: GO 36381
36369: LD_INT 3
36371: DOUBLE
36372: EQUAL
36373: IFTRUE 36377
36375: GO 36380
36377: POP
// ; end ;
36378: GO 36381
36380: POP
// for j = 1 to 3 do
36381: LD_ADDR_VAR 0 7
36385: PUSH
36386: DOUBLE
36387: LD_INT 1
36389: DEC
36390: ST_TO_ADDR
36391: LD_INT 3
36393: PUSH
36394: FOR_TO
36395: IFFALSE 36448
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
36397: LD_ADDR_VAR 0 5
36401: PUSH
36402: LD_VAR 0 5
36406: PPUSH
36407: LD_VAR 0 7
36411: PPUSH
36412: LD_VAR 0 5
36416: PUSH
36417: LD_VAR 0 7
36421: ARRAY
36422: PUSH
36423: LD_VAR 0 9
36427: PUSH
36428: LD_VAR 0 7
36432: ARRAY
36433: PUSH
36434: LD_VAR 0 10
36438: MUL
36439: PLUS
36440: PPUSH
36441: CALL_OW 1
36445: ST_TO_ADDR
36446: GO 36394
36448: POP
36449: POP
// end ;
36450: GO 34927
36452: POP
36453: POP
// result := Replace ( result , 4 , tmp ) ;
36454: LD_ADDR_VAR 0 5
36458: PUSH
36459: LD_VAR 0 5
36463: PPUSH
36464: LD_INT 4
36466: PPUSH
36467: LD_VAR 0 8
36471: PPUSH
36472: CALL_OW 1
36476: ST_TO_ADDR
// end ;
36477: LD_VAR 0 5
36481: RET
// export function DangerAtRange ( unit , range ) ; begin
36482: LD_INT 0
36484: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
36485: LD_ADDR_VAR 0 3
36489: PUSH
36490: LD_VAR 0 1
36494: PPUSH
36495: CALL_OW 255
36499: PPUSH
36500: LD_VAR 0 1
36504: PPUSH
36505: CALL_OW 250
36509: PPUSH
36510: LD_VAR 0 1
36514: PPUSH
36515: CALL_OW 251
36519: PPUSH
36520: LD_VAR 0 2
36524: PPUSH
36525: CALL 34779 0 4
36529: ST_TO_ADDR
// end ;
36530: LD_VAR 0 3
36534: RET
// export function DangerInArea ( side , area ) ; begin
36535: LD_INT 0
36537: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
36538: LD_ADDR_VAR 0 3
36542: PUSH
36543: LD_VAR 0 2
36547: PPUSH
36548: LD_INT 81
36550: PUSH
36551: LD_VAR 0 1
36555: PUSH
36556: EMPTY
36557: LIST
36558: LIST
36559: PPUSH
36560: CALL_OW 70
36564: ST_TO_ADDR
// end ;
36565: LD_VAR 0 3
36569: RET
// export function IsExtension ( b ) ; begin
36570: LD_INT 0
36572: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
36573: LD_ADDR_VAR 0 2
36577: PUSH
36578: LD_VAR 0 1
36582: PUSH
36583: LD_INT 23
36585: PUSH
36586: LD_INT 20
36588: PUSH
36589: LD_INT 22
36591: PUSH
36592: LD_INT 17
36594: PUSH
36595: LD_INT 24
36597: PUSH
36598: LD_INT 21
36600: PUSH
36601: LD_INT 19
36603: PUSH
36604: LD_INT 16
36606: PUSH
36607: LD_INT 25
36609: PUSH
36610: LD_INT 18
36612: PUSH
36613: EMPTY
36614: LIST
36615: LIST
36616: LIST
36617: LIST
36618: LIST
36619: LIST
36620: LIST
36621: LIST
36622: LIST
36623: LIST
36624: IN
36625: ST_TO_ADDR
// end ;
36626: LD_VAR 0 2
36630: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
36631: LD_INT 0
36633: PPUSH
36634: PPUSH
36635: PPUSH
// result := [ ] ;
36636: LD_ADDR_VAR 0 4
36640: PUSH
36641: EMPTY
36642: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
36643: LD_ADDR_VAR 0 5
36647: PUSH
36648: LD_VAR 0 2
36652: PPUSH
36653: LD_INT 21
36655: PUSH
36656: LD_INT 3
36658: PUSH
36659: EMPTY
36660: LIST
36661: LIST
36662: PPUSH
36663: CALL_OW 70
36667: ST_TO_ADDR
// if not tmp then
36668: LD_VAR 0 5
36672: NOT
36673: IFFALSE 36677
// exit ;
36675: GO 36741
// if checkLink then
36677: LD_VAR 0 3
36681: IFFALSE 36731
// begin for i in tmp do
36683: LD_ADDR_VAR 0 6
36687: PUSH
36688: LD_VAR 0 5
36692: PUSH
36693: FOR_IN
36694: IFFALSE 36729
// if GetBase ( i ) <> base then
36696: LD_VAR 0 6
36700: PPUSH
36701: CALL_OW 274
36705: PUSH
36706: LD_VAR 0 1
36710: NONEQUAL
36711: IFFALSE 36727
// ComLinkToBase ( base , i ) ;
36713: LD_VAR 0 1
36717: PPUSH
36718: LD_VAR 0 6
36722: PPUSH
36723: CALL_OW 169
36727: GO 36693
36729: POP
36730: POP
// end ; result := tmp ;
36731: LD_ADDR_VAR 0 4
36735: PUSH
36736: LD_VAR 0 5
36740: ST_TO_ADDR
// end ;
36741: LD_VAR 0 4
36745: RET
// export function ComComplete ( units , b ) ; var i ; begin
36746: LD_INT 0
36748: PPUSH
36749: PPUSH
// if not units then
36750: LD_VAR 0 1
36754: NOT
36755: IFFALSE 36759
// exit ;
36757: GO 36849
// for i in units do
36759: LD_ADDR_VAR 0 4
36763: PUSH
36764: LD_VAR 0 1
36768: PUSH
36769: FOR_IN
36770: IFFALSE 36847
// if BuildingStatus ( b ) = bs_build then
36772: LD_VAR 0 2
36776: PPUSH
36777: CALL_OW 461
36781: PUSH
36782: LD_INT 1
36784: EQUAL
36785: IFFALSE 36845
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
36787: LD_VAR 0 4
36791: PPUSH
36792: LD_STRING h
36794: PUSH
36795: LD_VAR 0 2
36799: PPUSH
36800: CALL_OW 250
36804: PUSH
36805: LD_VAR 0 2
36809: PPUSH
36810: CALL_OW 251
36814: PUSH
36815: LD_VAR 0 2
36819: PUSH
36820: LD_INT 0
36822: PUSH
36823: LD_INT 0
36825: PUSH
36826: LD_INT 0
36828: PUSH
36829: EMPTY
36830: LIST
36831: LIST
36832: LIST
36833: LIST
36834: LIST
36835: LIST
36836: LIST
36837: PUSH
36838: EMPTY
36839: LIST
36840: PPUSH
36841: CALL_OW 446
36845: GO 36769
36847: POP
36848: POP
// end ;
36849: LD_VAR 0 3
36853: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
36854: LD_INT 0
36856: PPUSH
36857: PPUSH
36858: PPUSH
36859: PPUSH
36860: PPUSH
36861: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
36862: LD_VAR 0 1
36866: NOT
36867: PUSH
36868: LD_VAR 0 1
36872: PPUSH
36873: CALL_OW 263
36877: PUSH
36878: LD_INT 2
36880: NONEQUAL
36881: OR
36882: IFFALSE 36886
// exit ;
36884: GO 37202
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
36886: LD_ADDR_VAR 0 6
36890: PUSH
36891: LD_INT 22
36893: PUSH
36894: LD_VAR 0 1
36898: PPUSH
36899: CALL_OW 255
36903: PUSH
36904: EMPTY
36905: LIST
36906: LIST
36907: PUSH
36908: LD_INT 2
36910: PUSH
36911: LD_INT 30
36913: PUSH
36914: LD_INT 36
36916: PUSH
36917: EMPTY
36918: LIST
36919: LIST
36920: PUSH
36921: LD_INT 34
36923: PUSH
36924: LD_INT 31
36926: PUSH
36927: EMPTY
36928: LIST
36929: LIST
36930: PUSH
36931: EMPTY
36932: LIST
36933: LIST
36934: LIST
36935: PUSH
36936: EMPTY
36937: LIST
36938: LIST
36939: PPUSH
36940: CALL_OW 69
36944: ST_TO_ADDR
// if not tmp then
36945: LD_VAR 0 6
36949: NOT
36950: IFFALSE 36954
// exit ;
36952: GO 37202
// result := [ ] ;
36954: LD_ADDR_VAR 0 2
36958: PUSH
36959: EMPTY
36960: ST_TO_ADDR
// for i in tmp do
36961: LD_ADDR_VAR 0 3
36965: PUSH
36966: LD_VAR 0 6
36970: PUSH
36971: FOR_IN
36972: IFFALSE 37043
// begin t := UnitsInside ( i ) ;
36974: LD_ADDR_VAR 0 4
36978: PUSH
36979: LD_VAR 0 3
36983: PPUSH
36984: CALL_OW 313
36988: ST_TO_ADDR
// if t then
36989: LD_VAR 0 4
36993: IFFALSE 37041
// for j in t do
36995: LD_ADDR_VAR 0 7
36999: PUSH
37000: LD_VAR 0 4
37004: PUSH
37005: FOR_IN
37006: IFFALSE 37039
// result := Replace ( result , result + 1 , j ) ;
37008: LD_ADDR_VAR 0 2
37012: PUSH
37013: LD_VAR 0 2
37017: PPUSH
37018: LD_VAR 0 2
37022: PUSH
37023: LD_INT 1
37025: PLUS
37026: PPUSH
37027: LD_VAR 0 7
37031: PPUSH
37032: CALL_OW 1
37036: ST_TO_ADDR
37037: GO 37005
37039: POP
37040: POP
// end ;
37041: GO 36971
37043: POP
37044: POP
// if not result then
37045: LD_VAR 0 2
37049: NOT
37050: IFFALSE 37054
// exit ;
37052: GO 37202
// mech := result [ 1 ] ;
37054: LD_ADDR_VAR 0 5
37058: PUSH
37059: LD_VAR 0 2
37063: PUSH
37064: LD_INT 1
37066: ARRAY
37067: ST_TO_ADDR
// if result > 1 then
37068: LD_VAR 0 2
37072: PUSH
37073: LD_INT 1
37075: GREATER
37076: IFFALSE 37188
// begin for i = 2 to result do
37078: LD_ADDR_VAR 0 3
37082: PUSH
37083: DOUBLE
37084: LD_INT 2
37086: DEC
37087: ST_TO_ADDR
37088: LD_VAR 0 2
37092: PUSH
37093: FOR_TO
37094: IFFALSE 37186
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
37096: LD_ADDR_VAR 0 4
37100: PUSH
37101: LD_VAR 0 2
37105: PUSH
37106: LD_VAR 0 3
37110: ARRAY
37111: PPUSH
37112: LD_INT 3
37114: PPUSH
37115: CALL_OW 259
37119: PUSH
37120: LD_VAR 0 2
37124: PUSH
37125: LD_VAR 0 3
37129: ARRAY
37130: PPUSH
37131: CALL_OW 432
37135: MINUS
37136: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
37137: LD_VAR 0 4
37141: PUSH
37142: LD_VAR 0 5
37146: PPUSH
37147: LD_INT 3
37149: PPUSH
37150: CALL_OW 259
37154: PUSH
37155: LD_VAR 0 5
37159: PPUSH
37160: CALL_OW 432
37164: MINUS
37165: GREATEREQUAL
37166: IFFALSE 37184
// mech := result [ i ] ;
37168: LD_ADDR_VAR 0 5
37172: PUSH
37173: LD_VAR 0 2
37177: PUSH
37178: LD_VAR 0 3
37182: ARRAY
37183: ST_TO_ADDR
// end ;
37184: GO 37093
37186: POP
37187: POP
// end ; ComLinkTo ( vehicle , mech ) ;
37188: LD_VAR 0 1
37192: PPUSH
37193: LD_VAR 0 5
37197: PPUSH
37198: CALL_OW 135
// end ;
37202: LD_VAR 0 2
37206: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
37207: LD_INT 0
37209: PPUSH
37210: PPUSH
37211: PPUSH
37212: PPUSH
37213: PPUSH
37214: PPUSH
37215: PPUSH
37216: PPUSH
37217: PPUSH
37218: PPUSH
37219: PPUSH
37220: PPUSH
37221: PPUSH
// result := [ ] ;
37222: LD_ADDR_VAR 0 7
37226: PUSH
37227: EMPTY
37228: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
37229: LD_VAR 0 1
37233: PPUSH
37234: CALL_OW 266
37238: PUSH
37239: LD_INT 0
37241: PUSH
37242: LD_INT 1
37244: PUSH
37245: EMPTY
37246: LIST
37247: LIST
37248: IN
37249: NOT
37250: IFFALSE 37254
// exit ;
37252: GO 38888
// if name then
37254: LD_VAR 0 3
37258: IFFALSE 37274
// SetBName ( base_dep , name ) ;
37260: LD_VAR 0 1
37264: PPUSH
37265: LD_VAR 0 3
37269: PPUSH
37270: CALL_OW 500
// base := GetBase ( base_dep ) ;
37274: LD_ADDR_VAR 0 15
37278: PUSH
37279: LD_VAR 0 1
37283: PPUSH
37284: CALL_OW 274
37288: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
37289: LD_ADDR_VAR 0 16
37293: PUSH
37294: LD_VAR 0 1
37298: PPUSH
37299: CALL_OW 255
37303: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
37304: LD_ADDR_VAR 0 17
37308: PUSH
37309: LD_VAR 0 1
37313: PPUSH
37314: CALL_OW 248
37318: ST_TO_ADDR
// if sources then
37319: LD_VAR 0 5
37323: IFFALSE 37370
// for i = 1 to 3 do
37325: LD_ADDR_VAR 0 8
37329: PUSH
37330: DOUBLE
37331: LD_INT 1
37333: DEC
37334: ST_TO_ADDR
37335: LD_INT 3
37337: PUSH
37338: FOR_TO
37339: IFFALSE 37368
// AddResourceType ( base , i , sources [ i ] ) ;
37341: LD_VAR 0 15
37345: PPUSH
37346: LD_VAR 0 8
37350: PPUSH
37351: LD_VAR 0 5
37355: PUSH
37356: LD_VAR 0 8
37360: ARRAY
37361: PPUSH
37362: CALL_OW 276
37366: GO 37338
37368: POP
37369: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
37370: LD_ADDR_VAR 0 18
37374: PUSH
37375: LD_VAR 0 15
37379: PPUSH
37380: LD_VAR 0 2
37384: PPUSH
37385: LD_INT 1
37387: PPUSH
37388: CALL 36631 0 3
37392: ST_TO_ADDR
// InitHc ;
37393: CALL_OW 19
// InitUc ;
37397: CALL_OW 18
// uc_side := side ;
37401: LD_ADDR_OWVAR 20
37405: PUSH
37406: LD_VAR 0 16
37410: ST_TO_ADDR
// uc_nation := nation ;
37411: LD_ADDR_OWVAR 21
37415: PUSH
37416: LD_VAR 0 17
37420: ST_TO_ADDR
// if buildings then
37421: LD_VAR 0 18
37425: IFFALSE 38747
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
37427: LD_ADDR_VAR 0 19
37431: PUSH
37432: LD_VAR 0 18
37436: PPUSH
37437: LD_INT 2
37439: PUSH
37440: LD_INT 30
37442: PUSH
37443: LD_INT 29
37445: PUSH
37446: EMPTY
37447: LIST
37448: LIST
37449: PUSH
37450: LD_INT 30
37452: PUSH
37453: LD_INT 30
37455: PUSH
37456: EMPTY
37457: LIST
37458: LIST
37459: PUSH
37460: EMPTY
37461: LIST
37462: LIST
37463: LIST
37464: PPUSH
37465: CALL_OW 72
37469: ST_TO_ADDR
// if tmp then
37470: LD_VAR 0 19
37474: IFFALSE 37522
// for i in tmp do
37476: LD_ADDR_VAR 0 8
37480: PUSH
37481: LD_VAR 0 19
37485: PUSH
37486: FOR_IN
37487: IFFALSE 37520
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
37489: LD_VAR 0 8
37493: PPUSH
37494: CALL_OW 250
37498: PPUSH
37499: LD_VAR 0 8
37503: PPUSH
37504: CALL_OW 251
37508: PPUSH
37509: LD_VAR 0 16
37513: PPUSH
37514: CALL_OW 441
37518: GO 37486
37520: POP
37521: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
37522: LD_VAR 0 18
37526: PPUSH
37527: LD_INT 2
37529: PUSH
37530: LD_INT 30
37532: PUSH
37533: LD_INT 32
37535: PUSH
37536: EMPTY
37537: LIST
37538: LIST
37539: PUSH
37540: LD_INT 30
37542: PUSH
37543: LD_INT 33
37545: PUSH
37546: EMPTY
37547: LIST
37548: LIST
37549: PUSH
37550: EMPTY
37551: LIST
37552: LIST
37553: LIST
37554: PPUSH
37555: CALL_OW 72
37559: IFFALSE 37647
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
37561: LD_ADDR_VAR 0 8
37565: PUSH
37566: LD_VAR 0 18
37570: PPUSH
37571: LD_INT 2
37573: PUSH
37574: LD_INT 30
37576: PUSH
37577: LD_INT 32
37579: PUSH
37580: EMPTY
37581: LIST
37582: LIST
37583: PUSH
37584: LD_INT 30
37586: PUSH
37587: LD_INT 33
37589: PUSH
37590: EMPTY
37591: LIST
37592: LIST
37593: PUSH
37594: EMPTY
37595: LIST
37596: LIST
37597: LIST
37598: PPUSH
37599: CALL_OW 72
37603: PUSH
37604: FOR_IN
37605: IFFALSE 37645
// begin if not GetBWeapon ( i ) then
37607: LD_VAR 0 8
37611: PPUSH
37612: CALL_OW 269
37616: NOT
37617: IFFALSE 37643
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
37619: LD_VAR 0 8
37623: PPUSH
37624: LD_VAR 0 8
37628: PPUSH
37629: LD_VAR 0 2
37633: PPUSH
37634: CALL 38893 0 2
37638: PPUSH
37639: CALL_OW 431
// end ;
37643: GO 37604
37645: POP
37646: POP
// end ; for i = 1 to personel do
37647: LD_ADDR_VAR 0 8
37651: PUSH
37652: DOUBLE
37653: LD_INT 1
37655: DEC
37656: ST_TO_ADDR
37657: LD_VAR 0 6
37661: PUSH
37662: FOR_TO
37663: IFFALSE 38727
// begin if i > 4 then
37665: LD_VAR 0 8
37669: PUSH
37670: LD_INT 4
37672: GREATER
37673: IFFALSE 37677
// break ;
37675: GO 38727
// case i of 1 :
37677: LD_VAR 0 8
37681: PUSH
37682: LD_INT 1
37684: DOUBLE
37685: EQUAL
37686: IFTRUE 37690
37688: GO 37770
37690: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
37691: LD_ADDR_VAR 0 12
37695: PUSH
37696: LD_VAR 0 18
37700: PPUSH
37701: LD_INT 22
37703: PUSH
37704: LD_VAR 0 16
37708: PUSH
37709: EMPTY
37710: LIST
37711: LIST
37712: PUSH
37713: LD_INT 58
37715: PUSH
37716: EMPTY
37717: LIST
37718: PUSH
37719: LD_INT 2
37721: PUSH
37722: LD_INT 30
37724: PUSH
37725: LD_INT 32
37727: PUSH
37728: EMPTY
37729: LIST
37730: LIST
37731: PUSH
37732: LD_INT 30
37734: PUSH
37735: LD_INT 4
37737: PUSH
37738: EMPTY
37739: LIST
37740: LIST
37741: PUSH
37742: LD_INT 30
37744: PUSH
37745: LD_INT 5
37747: PUSH
37748: EMPTY
37749: LIST
37750: LIST
37751: PUSH
37752: EMPTY
37753: LIST
37754: LIST
37755: LIST
37756: LIST
37757: PUSH
37758: EMPTY
37759: LIST
37760: LIST
37761: LIST
37762: PPUSH
37763: CALL_OW 72
37767: ST_TO_ADDR
37768: GO 37992
37770: LD_INT 2
37772: DOUBLE
37773: EQUAL
37774: IFTRUE 37778
37776: GO 37840
37778: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
37779: LD_ADDR_VAR 0 12
37783: PUSH
37784: LD_VAR 0 18
37788: PPUSH
37789: LD_INT 22
37791: PUSH
37792: LD_VAR 0 16
37796: PUSH
37797: EMPTY
37798: LIST
37799: LIST
37800: PUSH
37801: LD_INT 2
37803: PUSH
37804: LD_INT 30
37806: PUSH
37807: LD_INT 0
37809: PUSH
37810: EMPTY
37811: LIST
37812: LIST
37813: PUSH
37814: LD_INT 30
37816: PUSH
37817: LD_INT 1
37819: PUSH
37820: EMPTY
37821: LIST
37822: LIST
37823: PUSH
37824: EMPTY
37825: LIST
37826: LIST
37827: LIST
37828: PUSH
37829: EMPTY
37830: LIST
37831: LIST
37832: PPUSH
37833: CALL_OW 72
37837: ST_TO_ADDR
37838: GO 37992
37840: LD_INT 3
37842: DOUBLE
37843: EQUAL
37844: IFTRUE 37848
37846: GO 37910
37848: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
37849: LD_ADDR_VAR 0 12
37853: PUSH
37854: LD_VAR 0 18
37858: PPUSH
37859: LD_INT 22
37861: PUSH
37862: LD_VAR 0 16
37866: PUSH
37867: EMPTY
37868: LIST
37869: LIST
37870: PUSH
37871: LD_INT 2
37873: PUSH
37874: LD_INT 30
37876: PUSH
37877: LD_INT 2
37879: PUSH
37880: EMPTY
37881: LIST
37882: LIST
37883: PUSH
37884: LD_INT 30
37886: PUSH
37887: LD_INT 3
37889: PUSH
37890: EMPTY
37891: LIST
37892: LIST
37893: PUSH
37894: EMPTY
37895: LIST
37896: LIST
37897: LIST
37898: PUSH
37899: EMPTY
37900: LIST
37901: LIST
37902: PPUSH
37903: CALL_OW 72
37907: ST_TO_ADDR
37908: GO 37992
37910: LD_INT 4
37912: DOUBLE
37913: EQUAL
37914: IFTRUE 37918
37916: GO 37991
37918: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
37919: LD_ADDR_VAR 0 12
37923: PUSH
37924: LD_VAR 0 18
37928: PPUSH
37929: LD_INT 22
37931: PUSH
37932: LD_VAR 0 16
37936: PUSH
37937: EMPTY
37938: LIST
37939: LIST
37940: PUSH
37941: LD_INT 2
37943: PUSH
37944: LD_INT 30
37946: PUSH
37947: LD_INT 6
37949: PUSH
37950: EMPTY
37951: LIST
37952: LIST
37953: PUSH
37954: LD_INT 30
37956: PUSH
37957: LD_INT 7
37959: PUSH
37960: EMPTY
37961: LIST
37962: LIST
37963: PUSH
37964: LD_INT 30
37966: PUSH
37967: LD_INT 8
37969: PUSH
37970: EMPTY
37971: LIST
37972: LIST
37973: PUSH
37974: EMPTY
37975: LIST
37976: LIST
37977: LIST
37978: LIST
37979: PUSH
37980: EMPTY
37981: LIST
37982: LIST
37983: PPUSH
37984: CALL_OW 72
37988: ST_TO_ADDR
37989: GO 37992
37991: POP
// if i = 1 then
37992: LD_VAR 0 8
37996: PUSH
37997: LD_INT 1
37999: EQUAL
38000: IFFALSE 38111
// begin tmp := [ ] ;
38002: LD_ADDR_VAR 0 19
38006: PUSH
38007: EMPTY
38008: ST_TO_ADDR
// for j in f do
38009: LD_ADDR_VAR 0 9
38013: PUSH
38014: LD_VAR 0 12
38018: PUSH
38019: FOR_IN
38020: IFFALSE 38093
// if GetBType ( j ) = b_bunker then
38022: LD_VAR 0 9
38026: PPUSH
38027: CALL_OW 266
38031: PUSH
38032: LD_INT 32
38034: EQUAL
38035: IFFALSE 38062
// tmp := Insert ( tmp , 1 , j ) else
38037: LD_ADDR_VAR 0 19
38041: PUSH
38042: LD_VAR 0 19
38046: PPUSH
38047: LD_INT 1
38049: PPUSH
38050: LD_VAR 0 9
38054: PPUSH
38055: CALL_OW 2
38059: ST_TO_ADDR
38060: GO 38091
// tmp := Insert ( tmp , tmp + 1 , j ) ;
38062: LD_ADDR_VAR 0 19
38066: PUSH
38067: LD_VAR 0 19
38071: PPUSH
38072: LD_VAR 0 19
38076: PUSH
38077: LD_INT 1
38079: PLUS
38080: PPUSH
38081: LD_VAR 0 9
38085: PPUSH
38086: CALL_OW 2
38090: ST_TO_ADDR
38091: GO 38019
38093: POP
38094: POP
// if tmp then
38095: LD_VAR 0 19
38099: IFFALSE 38111
// f := tmp ;
38101: LD_ADDR_VAR 0 12
38105: PUSH
38106: LD_VAR 0 19
38110: ST_TO_ADDR
// end ; x := personel [ i ] ;
38111: LD_ADDR_VAR 0 13
38115: PUSH
38116: LD_VAR 0 6
38120: PUSH
38121: LD_VAR 0 8
38125: ARRAY
38126: ST_TO_ADDR
// if x = - 1 then
38127: LD_VAR 0 13
38131: PUSH
38132: LD_INT 1
38134: NEG
38135: EQUAL
38136: IFFALSE 38345
// begin for j in f do
38138: LD_ADDR_VAR 0 9
38142: PUSH
38143: LD_VAR 0 12
38147: PUSH
38148: FOR_IN
38149: IFFALSE 38341
// repeat InitHc ;
38151: CALL_OW 19
// if GetBType ( j ) = b_barracks then
38155: LD_VAR 0 9
38159: PPUSH
38160: CALL_OW 266
38164: PUSH
38165: LD_INT 5
38167: EQUAL
38168: IFFALSE 38238
// begin if UnitsInside ( j ) < 3 then
38170: LD_VAR 0 9
38174: PPUSH
38175: CALL_OW 313
38179: PUSH
38180: LD_INT 3
38182: LESS
38183: IFFALSE 38219
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
38185: LD_INT 0
38187: PPUSH
38188: LD_INT 5
38190: PUSH
38191: LD_INT 8
38193: PUSH
38194: LD_INT 9
38196: PUSH
38197: EMPTY
38198: LIST
38199: LIST
38200: LIST
38201: PUSH
38202: LD_VAR 0 17
38206: ARRAY
38207: PPUSH
38208: LD_VAR 0 4
38212: PPUSH
38213: CALL_OW 380
38217: GO 38236
// PrepareHuman ( false , i , skill ) ;
38219: LD_INT 0
38221: PPUSH
38222: LD_VAR 0 8
38226: PPUSH
38227: LD_VAR 0 4
38231: PPUSH
38232: CALL_OW 380
// end else
38236: GO 38255
// PrepareHuman ( false , i , skill ) ;
38238: LD_INT 0
38240: PPUSH
38241: LD_VAR 0 8
38245: PPUSH
38246: LD_VAR 0 4
38250: PPUSH
38251: CALL_OW 380
// un := CreateHuman ;
38255: LD_ADDR_VAR 0 14
38259: PUSH
38260: CALL_OW 44
38264: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38265: LD_ADDR_VAR 0 7
38269: PUSH
38270: LD_VAR 0 7
38274: PPUSH
38275: LD_INT 1
38277: PPUSH
38278: LD_VAR 0 14
38282: PPUSH
38283: CALL_OW 2
38287: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
38288: LD_VAR 0 14
38292: PPUSH
38293: LD_VAR 0 9
38297: PPUSH
38298: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
38302: LD_VAR 0 9
38306: PPUSH
38307: CALL_OW 313
38311: PUSH
38312: LD_INT 6
38314: EQUAL
38315: PUSH
38316: LD_VAR 0 9
38320: PPUSH
38321: CALL_OW 266
38325: PUSH
38326: LD_INT 32
38328: PUSH
38329: LD_INT 31
38331: PUSH
38332: EMPTY
38333: LIST
38334: LIST
38335: IN
38336: OR
38337: IFFALSE 38151
38339: GO 38148
38341: POP
38342: POP
// end else
38343: GO 38725
// for j = 1 to x do
38345: LD_ADDR_VAR 0 9
38349: PUSH
38350: DOUBLE
38351: LD_INT 1
38353: DEC
38354: ST_TO_ADDR
38355: LD_VAR 0 13
38359: PUSH
38360: FOR_TO
38361: IFFALSE 38723
// begin InitHc ;
38363: CALL_OW 19
// if not f then
38367: LD_VAR 0 12
38371: NOT
38372: IFFALSE 38461
// begin PrepareHuman ( false , i , skill ) ;
38374: LD_INT 0
38376: PPUSH
38377: LD_VAR 0 8
38381: PPUSH
38382: LD_VAR 0 4
38386: PPUSH
38387: CALL_OW 380
// un := CreateHuman ;
38391: LD_ADDR_VAR 0 14
38395: PUSH
38396: CALL_OW 44
38400: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38401: LD_ADDR_VAR 0 7
38405: PUSH
38406: LD_VAR 0 7
38410: PPUSH
38411: LD_INT 1
38413: PPUSH
38414: LD_VAR 0 14
38418: PPUSH
38419: CALL_OW 2
38423: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
38424: LD_VAR 0 14
38428: PPUSH
38429: LD_VAR 0 1
38433: PPUSH
38434: CALL_OW 250
38438: PPUSH
38439: LD_VAR 0 1
38443: PPUSH
38444: CALL_OW 251
38448: PPUSH
38449: LD_INT 10
38451: PPUSH
38452: LD_INT 0
38454: PPUSH
38455: CALL_OW 50
// continue ;
38459: GO 38360
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
38461: LD_VAR 0 12
38465: PUSH
38466: LD_INT 1
38468: ARRAY
38469: PPUSH
38470: CALL_OW 313
38474: PUSH
38475: LD_VAR 0 12
38479: PUSH
38480: LD_INT 1
38482: ARRAY
38483: PPUSH
38484: CALL_OW 266
38488: PUSH
38489: LD_INT 32
38491: PUSH
38492: LD_INT 31
38494: PUSH
38495: EMPTY
38496: LIST
38497: LIST
38498: IN
38499: AND
38500: PUSH
38501: LD_VAR 0 12
38505: PUSH
38506: LD_INT 1
38508: ARRAY
38509: PPUSH
38510: CALL_OW 313
38514: PUSH
38515: LD_INT 6
38517: EQUAL
38518: OR
38519: IFFALSE 38539
// f := Delete ( f , 1 ) ;
38521: LD_ADDR_VAR 0 12
38525: PUSH
38526: LD_VAR 0 12
38530: PPUSH
38531: LD_INT 1
38533: PPUSH
38534: CALL_OW 3
38538: ST_TO_ADDR
// if not f then
38539: LD_VAR 0 12
38543: NOT
38544: IFFALSE 38562
// begin x := x + 2 ;
38546: LD_ADDR_VAR 0 13
38550: PUSH
38551: LD_VAR 0 13
38555: PUSH
38556: LD_INT 2
38558: PLUS
38559: ST_TO_ADDR
// continue ;
38560: GO 38360
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
38562: LD_VAR 0 12
38566: PUSH
38567: LD_INT 1
38569: ARRAY
38570: PPUSH
38571: CALL_OW 266
38575: PUSH
38576: LD_INT 5
38578: EQUAL
38579: IFFALSE 38653
// begin if UnitsInside ( f [ 1 ] ) < 3 then
38581: LD_VAR 0 12
38585: PUSH
38586: LD_INT 1
38588: ARRAY
38589: PPUSH
38590: CALL_OW 313
38594: PUSH
38595: LD_INT 3
38597: LESS
38598: IFFALSE 38634
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
38600: LD_INT 0
38602: PPUSH
38603: LD_INT 5
38605: PUSH
38606: LD_INT 8
38608: PUSH
38609: LD_INT 9
38611: PUSH
38612: EMPTY
38613: LIST
38614: LIST
38615: LIST
38616: PUSH
38617: LD_VAR 0 17
38621: ARRAY
38622: PPUSH
38623: LD_VAR 0 4
38627: PPUSH
38628: CALL_OW 380
38632: GO 38651
// PrepareHuman ( false , i , skill ) ;
38634: LD_INT 0
38636: PPUSH
38637: LD_VAR 0 8
38641: PPUSH
38642: LD_VAR 0 4
38646: PPUSH
38647: CALL_OW 380
// end else
38651: GO 38670
// PrepareHuman ( false , i , skill ) ;
38653: LD_INT 0
38655: PPUSH
38656: LD_VAR 0 8
38660: PPUSH
38661: LD_VAR 0 4
38665: PPUSH
38666: CALL_OW 380
// un := CreateHuman ;
38670: LD_ADDR_VAR 0 14
38674: PUSH
38675: CALL_OW 44
38679: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38680: LD_ADDR_VAR 0 7
38684: PUSH
38685: LD_VAR 0 7
38689: PPUSH
38690: LD_INT 1
38692: PPUSH
38693: LD_VAR 0 14
38697: PPUSH
38698: CALL_OW 2
38702: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
38703: LD_VAR 0 14
38707: PPUSH
38708: LD_VAR 0 12
38712: PUSH
38713: LD_INT 1
38715: ARRAY
38716: PPUSH
38717: CALL_OW 52
// end ;
38721: GO 38360
38723: POP
38724: POP
// end ;
38725: GO 37662
38727: POP
38728: POP
// result := result ^ buildings ;
38729: LD_ADDR_VAR 0 7
38733: PUSH
38734: LD_VAR 0 7
38738: PUSH
38739: LD_VAR 0 18
38743: ADD
38744: ST_TO_ADDR
// end else
38745: GO 38888
// begin for i = 1 to personel do
38747: LD_ADDR_VAR 0 8
38751: PUSH
38752: DOUBLE
38753: LD_INT 1
38755: DEC
38756: ST_TO_ADDR
38757: LD_VAR 0 6
38761: PUSH
38762: FOR_TO
38763: IFFALSE 38886
// begin if i > 4 then
38765: LD_VAR 0 8
38769: PUSH
38770: LD_INT 4
38772: GREATER
38773: IFFALSE 38777
// break ;
38775: GO 38886
// x := personel [ i ] ;
38777: LD_ADDR_VAR 0 13
38781: PUSH
38782: LD_VAR 0 6
38786: PUSH
38787: LD_VAR 0 8
38791: ARRAY
38792: ST_TO_ADDR
// if x = - 1 then
38793: LD_VAR 0 13
38797: PUSH
38798: LD_INT 1
38800: NEG
38801: EQUAL
38802: IFFALSE 38806
// continue ;
38804: GO 38762
// PrepareHuman ( false , i , skill ) ;
38806: LD_INT 0
38808: PPUSH
38809: LD_VAR 0 8
38813: PPUSH
38814: LD_VAR 0 4
38818: PPUSH
38819: CALL_OW 380
// un := CreateHuman ;
38823: LD_ADDR_VAR 0 14
38827: PUSH
38828: CALL_OW 44
38832: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
38833: LD_VAR 0 14
38837: PPUSH
38838: LD_VAR 0 1
38842: PPUSH
38843: CALL_OW 250
38847: PPUSH
38848: LD_VAR 0 1
38852: PPUSH
38853: CALL_OW 251
38857: PPUSH
38858: LD_INT 10
38860: PPUSH
38861: LD_INT 0
38863: PPUSH
38864: CALL_OW 50
// result := result ^ un ;
38868: LD_ADDR_VAR 0 7
38872: PUSH
38873: LD_VAR 0 7
38877: PUSH
38878: LD_VAR 0 14
38882: ADD
38883: ST_TO_ADDR
// end ;
38884: GO 38762
38886: POP
38887: POP
// end ; end ;
38888: LD_VAR 0 7
38892: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
38893: LD_INT 0
38895: PPUSH
38896: PPUSH
38897: PPUSH
38898: PPUSH
38899: PPUSH
38900: PPUSH
38901: PPUSH
38902: PPUSH
38903: PPUSH
38904: PPUSH
38905: PPUSH
38906: PPUSH
38907: PPUSH
38908: PPUSH
38909: PPUSH
38910: PPUSH
// result := false ;
38911: LD_ADDR_VAR 0 3
38915: PUSH
38916: LD_INT 0
38918: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
38919: LD_VAR 0 1
38923: NOT
38924: PUSH
38925: LD_VAR 0 1
38929: PPUSH
38930: CALL_OW 266
38934: PUSH
38935: LD_INT 32
38937: PUSH
38938: LD_INT 33
38940: PUSH
38941: EMPTY
38942: LIST
38943: LIST
38944: IN
38945: NOT
38946: OR
38947: IFFALSE 38951
// exit ;
38949: GO 40060
// nat := GetNation ( tower ) ;
38951: LD_ADDR_VAR 0 12
38955: PUSH
38956: LD_VAR 0 1
38960: PPUSH
38961: CALL_OW 248
38965: ST_TO_ADDR
// side := GetSide ( tower ) ;
38966: LD_ADDR_VAR 0 16
38970: PUSH
38971: LD_VAR 0 1
38975: PPUSH
38976: CALL_OW 255
38980: ST_TO_ADDR
// x := GetX ( tower ) ;
38981: LD_ADDR_VAR 0 10
38985: PUSH
38986: LD_VAR 0 1
38990: PPUSH
38991: CALL_OW 250
38995: ST_TO_ADDR
// y := GetY ( tower ) ;
38996: LD_ADDR_VAR 0 11
39000: PUSH
39001: LD_VAR 0 1
39005: PPUSH
39006: CALL_OW 251
39010: ST_TO_ADDR
// if not x or not y then
39011: LD_VAR 0 10
39015: NOT
39016: PUSH
39017: LD_VAR 0 11
39021: NOT
39022: OR
39023: IFFALSE 39027
// exit ;
39025: GO 40060
// weapon := 0 ;
39027: LD_ADDR_VAR 0 18
39031: PUSH
39032: LD_INT 0
39034: ST_TO_ADDR
// fac_list := [ ] ;
39035: LD_ADDR_VAR 0 17
39039: PUSH
39040: EMPTY
39041: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
39042: LD_ADDR_VAR 0 6
39046: PUSH
39047: LD_VAR 0 1
39051: PPUSH
39052: CALL_OW 274
39056: PPUSH
39057: LD_VAR 0 2
39061: PPUSH
39062: LD_INT 0
39064: PPUSH
39065: CALL 36631 0 3
39069: PPUSH
39070: LD_INT 30
39072: PUSH
39073: LD_INT 3
39075: PUSH
39076: EMPTY
39077: LIST
39078: LIST
39079: PPUSH
39080: CALL_OW 72
39084: ST_TO_ADDR
// if not factories then
39085: LD_VAR 0 6
39089: NOT
39090: IFFALSE 39094
// exit ;
39092: GO 40060
// for i in factories do
39094: LD_ADDR_VAR 0 8
39098: PUSH
39099: LD_VAR 0 6
39103: PUSH
39104: FOR_IN
39105: IFFALSE 39130
// fac_list := fac_list union AvailableWeaponList ( i ) ;
39107: LD_ADDR_VAR 0 17
39111: PUSH
39112: LD_VAR 0 17
39116: PUSH
39117: LD_VAR 0 8
39121: PPUSH
39122: CALL_OW 478
39126: UNION
39127: ST_TO_ADDR
39128: GO 39104
39130: POP
39131: POP
// if not fac_list then
39132: LD_VAR 0 17
39136: NOT
39137: IFFALSE 39141
// exit ;
39139: GO 40060
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
39141: LD_ADDR_VAR 0 5
39145: PUSH
39146: LD_INT 4
39148: PUSH
39149: LD_INT 5
39151: PUSH
39152: LD_INT 9
39154: PUSH
39155: LD_INT 10
39157: PUSH
39158: LD_INT 6
39160: PUSH
39161: LD_INT 7
39163: PUSH
39164: LD_INT 11
39166: PUSH
39167: EMPTY
39168: LIST
39169: LIST
39170: LIST
39171: LIST
39172: LIST
39173: LIST
39174: LIST
39175: PUSH
39176: LD_INT 27
39178: PUSH
39179: LD_INT 28
39181: PUSH
39182: LD_INT 26
39184: PUSH
39185: LD_INT 30
39187: PUSH
39188: EMPTY
39189: LIST
39190: LIST
39191: LIST
39192: LIST
39193: PUSH
39194: LD_INT 43
39196: PUSH
39197: LD_INT 44
39199: PUSH
39200: LD_INT 46
39202: PUSH
39203: LD_INT 45
39205: PUSH
39206: LD_INT 47
39208: PUSH
39209: LD_INT 49
39211: PUSH
39212: EMPTY
39213: LIST
39214: LIST
39215: LIST
39216: LIST
39217: LIST
39218: LIST
39219: PUSH
39220: EMPTY
39221: LIST
39222: LIST
39223: LIST
39224: PUSH
39225: LD_VAR 0 12
39229: ARRAY
39230: ST_TO_ADDR
// list := list isect fac_list ;
39231: LD_ADDR_VAR 0 5
39235: PUSH
39236: LD_VAR 0 5
39240: PUSH
39241: LD_VAR 0 17
39245: ISECT
39246: ST_TO_ADDR
// if not list then
39247: LD_VAR 0 5
39251: NOT
39252: IFFALSE 39256
// exit ;
39254: GO 40060
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
39256: LD_VAR 0 12
39260: PUSH
39261: LD_INT 3
39263: EQUAL
39264: PUSH
39265: LD_INT 49
39267: PUSH
39268: LD_VAR 0 5
39272: IN
39273: AND
39274: PUSH
39275: LD_INT 31
39277: PPUSH
39278: LD_VAR 0 16
39282: PPUSH
39283: CALL_OW 321
39287: PUSH
39288: LD_INT 2
39290: EQUAL
39291: AND
39292: IFFALSE 39352
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
39294: LD_INT 22
39296: PUSH
39297: LD_VAR 0 16
39301: PUSH
39302: EMPTY
39303: LIST
39304: LIST
39305: PUSH
39306: LD_INT 35
39308: PUSH
39309: LD_INT 49
39311: PUSH
39312: EMPTY
39313: LIST
39314: LIST
39315: PUSH
39316: LD_INT 91
39318: PUSH
39319: LD_VAR 0 1
39323: PUSH
39324: LD_INT 10
39326: PUSH
39327: EMPTY
39328: LIST
39329: LIST
39330: LIST
39331: PUSH
39332: EMPTY
39333: LIST
39334: LIST
39335: LIST
39336: PPUSH
39337: CALL_OW 69
39341: NOT
39342: IFFALSE 39352
// weapon := ru_time_lapser ;
39344: LD_ADDR_VAR 0 18
39348: PUSH
39349: LD_INT 49
39351: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
39352: LD_VAR 0 12
39356: PUSH
39357: LD_INT 1
39359: PUSH
39360: LD_INT 2
39362: PUSH
39363: EMPTY
39364: LIST
39365: LIST
39366: IN
39367: PUSH
39368: LD_INT 11
39370: PUSH
39371: LD_VAR 0 5
39375: IN
39376: PUSH
39377: LD_INT 30
39379: PUSH
39380: LD_VAR 0 5
39384: IN
39385: OR
39386: AND
39387: PUSH
39388: LD_INT 6
39390: PPUSH
39391: LD_VAR 0 16
39395: PPUSH
39396: CALL_OW 321
39400: PUSH
39401: LD_INT 2
39403: EQUAL
39404: AND
39405: IFFALSE 39570
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
39407: LD_INT 22
39409: PUSH
39410: LD_VAR 0 16
39414: PUSH
39415: EMPTY
39416: LIST
39417: LIST
39418: PUSH
39419: LD_INT 2
39421: PUSH
39422: LD_INT 35
39424: PUSH
39425: LD_INT 11
39427: PUSH
39428: EMPTY
39429: LIST
39430: LIST
39431: PUSH
39432: LD_INT 35
39434: PUSH
39435: LD_INT 30
39437: PUSH
39438: EMPTY
39439: LIST
39440: LIST
39441: PUSH
39442: EMPTY
39443: LIST
39444: LIST
39445: LIST
39446: PUSH
39447: LD_INT 91
39449: PUSH
39450: LD_VAR 0 1
39454: PUSH
39455: LD_INT 18
39457: PUSH
39458: EMPTY
39459: LIST
39460: LIST
39461: LIST
39462: PUSH
39463: EMPTY
39464: LIST
39465: LIST
39466: LIST
39467: PPUSH
39468: CALL_OW 69
39472: NOT
39473: PUSH
39474: LD_INT 22
39476: PUSH
39477: LD_VAR 0 16
39481: PUSH
39482: EMPTY
39483: LIST
39484: LIST
39485: PUSH
39486: LD_INT 2
39488: PUSH
39489: LD_INT 30
39491: PUSH
39492: LD_INT 32
39494: PUSH
39495: EMPTY
39496: LIST
39497: LIST
39498: PUSH
39499: LD_INT 30
39501: PUSH
39502: LD_INT 33
39504: PUSH
39505: EMPTY
39506: LIST
39507: LIST
39508: PUSH
39509: EMPTY
39510: LIST
39511: LIST
39512: LIST
39513: PUSH
39514: LD_INT 91
39516: PUSH
39517: LD_VAR 0 1
39521: PUSH
39522: LD_INT 12
39524: PUSH
39525: EMPTY
39526: LIST
39527: LIST
39528: LIST
39529: PUSH
39530: EMPTY
39531: LIST
39532: LIST
39533: LIST
39534: PUSH
39535: EMPTY
39536: LIST
39537: PPUSH
39538: CALL_OW 69
39542: PUSH
39543: LD_INT 2
39545: GREATER
39546: AND
39547: IFFALSE 39570
// weapon := [ us_radar , ar_radar ] [ nat ] ;
39549: LD_ADDR_VAR 0 18
39553: PUSH
39554: LD_INT 11
39556: PUSH
39557: LD_INT 30
39559: PUSH
39560: EMPTY
39561: LIST
39562: LIST
39563: PUSH
39564: LD_VAR 0 12
39568: ARRAY
39569: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
39570: LD_VAR 0 18
39574: NOT
39575: PUSH
39576: LD_INT 40
39578: PPUSH
39579: LD_VAR 0 16
39583: PPUSH
39584: CALL_OW 321
39588: PUSH
39589: LD_INT 2
39591: EQUAL
39592: AND
39593: PUSH
39594: LD_INT 7
39596: PUSH
39597: LD_VAR 0 5
39601: IN
39602: PUSH
39603: LD_INT 28
39605: PUSH
39606: LD_VAR 0 5
39610: IN
39611: OR
39612: PUSH
39613: LD_INT 45
39615: PUSH
39616: LD_VAR 0 5
39620: IN
39621: OR
39622: AND
39623: IFFALSE 39877
// begin hex := GetHexInfo ( x , y ) ;
39625: LD_ADDR_VAR 0 4
39629: PUSH
39630: LD_VAR 0 10
39634: PPUSH
39635: LD_VAR 0 11
39639: PPUSH
39640: CALL_OW 546
39644: ST_TO_ADDR
// if hex [ 1 ] then
39645: LD_VAR 0 4
39649: PUSH
39650: LD_INT 1
39652: ARRAY
39653: IFFALSE 39657
// exit ;
39655: GO 40060
// height := hex [ 2 ] ;
39657: LD_ADDR_VAR 0 15
39661: PUSH
39662: LD_VAR 0 4
39666: PUSH
39667: LD_INT 2
39669: ARRAY
39670: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
39671: LD_ADDR_VAR 0 14
39675: PUSH
39676: LD_INT 0
39678: PUSH
39679: LD_INT 2
39681: PUSH
39682: LD_INT 3
39684: PUSH
39685: LD_INT 5
39687: PUSH
39688: EMPTY
39689: LIST
39690: LIST
39691: LIST
39692: LIST
39693: ST_TO_ADDR
// for i in tmp do
39694: LD_ADDR_VAR 0 8
39698: PUSH
39699: LD_VAR 0 14
39703: PUSH
39704: FOR_IN
39705: IFFALSE 39875
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
39707: LD_ADDR_VAR 0 9
39711: PUSH
39712: LD_VAR 0 10
39716: PPUSH
39717: LD_VAR 0 8
39721: PPUSH
39722: LD_INT 5
39724: PPUSH
39725: CALL_OW 272
39729: PUSH
39730: LD_VAR 0 11
39734: PPUSH
39735: LD_VAR 0 8
39739: PPUSH
39740: LD_INT 5
39742: PPUSH
39743: CALL_OW 273
39747: PUSH
39748: EMPTY
39749: LIST
39750: LIST
39751: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
39752: LD_VAR 0 9
39756: PUSH
39757: LD_INT 1
39759: ARRAY
39760: PPUSH
39761: LD_VAR 0 9
39765: PUSH
39766: LD_INT 2
39768: ARRAY
39769: PPUSH
39770: CALL_OW 488
39774: IFFALSE 39873
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
39776: LD_ADDR_VAR 0 4
39780: PUSH
39781: LD_VAR 0 9
39785: PUSH
39786: LD_INT 1
39788: ARRAY
39789: PPUSH
39790: LD_VAR 0 9
39794: PUSH
39795: LD_INT 2
39797: ARRAY
39798: PPUSH
39799: CALL_OW 546
39803: ST_TO_ADDR
// if hex [ 1 ] then
39804: LD_VAR 0 4
39808: PUSH
39809: LD_INT 1
39811: ARRAY
39812: IFFALSE 39816
// continue ;
39814: GO 39704
// h := hex [ 2 ] ;
39816: LD_ADDR_VAR 0 13
39820: PUSH
39821: LD_VAR 0 4
39825: PUSH
39826: LD_INT 2
39828: ARRAY
39829: ST_TO_ADDR
// if h + 7 < height then
39830: LD_VAR 0 13
39834: PUSH
39835: LD_INT 7
39837: PLUS
39838: PUSH
39839: LD_VAR 0 15
39843: LESS
39844: IFFALSE 39873
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
39846: LD_ADDR_VAR 0 18
39850: PUSH
39851: LD_INT 7
39853: PUSH
39854: LD_INT 28
39856: PUSH
39857: LD_INT 45
39859: PUSH
39860: EMPTY
39861: LIST
39862: LIST
39863: LIST
39864: PUSH
39865: LD_VAR 0 12
39869: ARRAY
39870: ST_TO_ADDR
// break ;
39871: GO 39875
// end ; end ; end ;
39873: GO 39704
39875: POP
39876: POP
// end ; if not weapon then
39877: LD_VAR 0 18
39881: NOT
39882: IFFALSE 39942
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
39884: LD_ADDR_VAR 0 5
39888: PUSH
39889: LD_VAR 0 5
39893: PUSH
39894: LD_INT 11
39896: PUSH
39897: LD_INT 30
39899: PUSH
39900: LD_INT 49
39902: PUSH
39903: EMPTY
39904: LIST
39905: LIST
39906: LIST
39907: DIFF
39908: ST_TO_ADDR
// if not list then
39909: LD_VAR 0 5
39913: NOT
39914: IFFALSE 39918
// exit ;
39916: GO 40060
// weapon := list [ rand ( 1 , list ) ] ;
39918: LD_ADDR_VAR 0 18
39922: PUSH
39923: LD_VAR 0 5
39927: PUSH
39928: LD_INT 1
39930: PPUSH
39931: LD_VAR 0 5
39935: PPUSH
39936: CALL_OW 12
39940: ARRAY
39941: ST_TO_ADDR
// end ; if weapon then
39942: LD_VAR 0 18
39946: IFFALSE 40060
// begin tmp := CostOfWeapon ( weapon ) ;
39948: LD_ADDR_VAR 0 14
39952: PUSH
39953: LD_VAR 0 18
39957: PPUSH
39958: CALL_OW 451
39962: ST_TO_ADDR
// j := GetBase ( tower ) ;
39963: LD_ADDR_VAR 0 9
39967: PUSH
39968: LD_VAR 0 1
39972: PPUSH
39973: CALL_OW 274
39977: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
39978: LD_VAR 0 9
39982: PPUSH
39983: LD_INT 1
39985: PPUSH
39986: CALL_OW 275
39990: PUSH
39991: LD_VAR 0 14
39995: PUSH
39996: LD_INT 1
39998: ARRAY
39999: GREATEREQUAL
40000: PUSH
40001: LD_VAR 0 9
40005: PPUSH
40006: LD_INT 2
40008: PPUSH
40009: CALL_OW 275
40013: PUSH
40014: LD_VAR 0 14
40018: PUSH
40019: LD_INT 2
40021: ARRAY
40022: GREATEREQUAL
40023: AND
40024: PUSH
40025: LD_VAR 0 9
40029: PPUSH
40030: LD_INT 3
40032: PPUSH
40033: CALL_OW 275
40037: PUSH
40038: LD_VAR 0 14
40042: PUSH
40043: LD_INT 3
40045: ARRAY
40046: GREATEREQUAL
40047: AND
40048: IFFALSE 40060
// result := weapon ;
40050: LD_ADDR_VAR 0 3
40054: PUSH
40055: LD_VAR 0 18
40059: ST_TO_ADDR
// end ; end ;
40060: LD_VAR 0 3
40064: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
40065: LD_INT 0
40067: PPUSH
40068: PPUSH
// result := true ;
40069: LD_ADDR_VAR 0 3
40073: PUSH
40074: LD_INT 1
40076: ST_TO_ADDR
// if array1 = array2 then
40077: LD_VAR 0 1
40081: PUSH
40082: LD_VAR 0 2
40086: EQUAL
40087: IFFALSE 40147
// begin for i = 1 to array1 do
40089: LD_ADDR_VAR 0 4
40093: PUSH
40094: DOUBLE
40095: LD_INT 1
40097: DEC
40098: ST_TO_ADDR
40099: LD_VAR 0 1
40103: PUSH
40104: FOR_TO
40105: IFFALSE 40143
// if array1 [ i ] <> array2 [ i ] then
40107: LD_VAR 0 1
40111: PUSH
40112: LD_VAR 0 4
40116: ARRAY
40117: PUSH
40118: LD_VAR 0 2
40122: PUSH
40123: LD_VAR 0 4
40127: ARRAY
40128: NONEQUAL
40129: IFFALSE 40141
// begin result := false ;
40131: LD_ADDR_VAR 0 3
40135: PUSH
40136: LD_INT 0
40138: ST_TO_ADDR
// break ;
40139: GO 40143
// end ;
40141: GO 40104
40143: POP
40144: POP
// end else
40145: GO 40155
// result := false ;
40147: LD_ADDR_VAR 0 3
40151: PUSH
40152: LD_INT 0
40154: ST_TO_ADDR
// end ;
40155: LD_VAR 0 3
40159: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
40160: LD_INT 0
40162: PPUSH
40163: PPUSH
// if not array1 or not array2 then
40164: LD_VAR 0 1
40168: NOT
40169: PUSH
40170: LD_VAR 0 2
40174: NOT
40175: OR
40176: IFFALSE 40180
// exit ;
40178: GO 40244
// result := true ;
40180: LD_ADDR_VAR 0 3
40184: PUSH
40185: LD_INT 1
40187: ST_TO_ADDR
// for i = 1 to array1 do
40188: LD_ADDR_VAR 0 4
40192: PUSH
40193: DOUBLE
40194: LD_INT 1
40196: DEC
40197: ST_TO_ADDR
40198: LD_VAR 0 1
40202: PUSH
40203: FOR_TO
40204: IFFALSE 40242
// if array1 [ i ] <> array2 [ i ] then
40206: LD_VAR 0 1
40210: PUSH
40211: LD_VAR 0 4
40215: ARRAY
40216: PUSH
40217: LD_VAR 0 2
40221: PUSH
40222: LD_VAR 0 4
40226: ARRAY
40227: NONEQUAL
40228: IFFALSE 40240
// begin result := false ;
40230: LD_ADDR_VAR 0 3
40234: PUSH
40235: LD_INT 0
40237: ST_TO_ADDR
// break ;
40238: GO 40242
// end ;
40240: GO 40203
40242: POP
40243: POP
// end ;
40244: LD_VAR 0 3
40248: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
40249: LD_INT 0
40251: PPUSH
40252: PPUSH
40253: PPUSH
// pom := GetBase ( fac ) ;
40254: LD_ADDR_VAR 0 5
40258: PUSH
40259: LD_VAR 0 1
40263: PPUSH
40264: CALL_OW 274
40268: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
40269: LD_ADDR_VAR 0 4
40273: PUSH
40274: LD_VAR 0 2
40278: PUSH
40279: LD_INT 1
40281: ARRAY
40282: PPUSH
40283: LD_VAR 0 2
40287: PUSH
40288: LD_INT 2
40290: ARRAY
40291: PPUSH
40292: LD_VAR 0 2
40296: PUSH
40297: LD_INT 3
40299: ARRAY
40300: PPUSH
40301: LD_VAR 0 2
40305: PUSH
40306: LD_INT 4
40308: ARRAY
40309: PPUSH
40310: CALL_OW 449
40314: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40315: LD_ADDR_VAR 0 3
40319: PUSH
40320: LD_VAR 0 5
40324: PPUSH
40325: LD_INT 1
40327: PPUSH
40328: CALL_OW 275
40332: PUSH
40333: LD_VAR 0 4
40337: PUSH
40338: LD_INT 1
40340: ARRAY
40341: GREATEREQUAL
40342: PUSH
40343: LD_VAR 0 5
40347: PPUSH
40348: LD_INT 2
40350: PPUSH
40351: CALL_OW 275
40355: PUSH
40356: LD_VAR 0 4
40360: PUSH
40361: LD_INT 2
40363: ARRAY
40364: GREATEREQUAL
40365: AND
40366: PUSH
40367: LD_VAR 0 5
40371: PPUSH
40372: LD_INT 3
40374: PPUSH
40375: CALL_OW 275
40379: PUSH
40380: LD_VAR 0 4
40384: PUSH
40385: LD_INT 3
40387: ARRAY
40388: GREATEREQUAL
40389: AND
40390: ST_TO_ADDR
// end ;
40391: LD_VAR 0 3
40395: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
40396: LD_INT 0
40398: PPUSH
40399: PPUSH
40400: PPUSH
40401: PPUSH
// pom := GetBase ( building ) ;
40402: LD_ADDR_VAR 0 3
40406: PUSH
40407: LD_VAR 0 1
40411: PPUSH
40412: CALL_OW 274
40416: ST_TO_ADDR
// if not pom then
40417: LD_VAR 0 3
40421: NOT
40422: IFFALSE 40426
// exit ;
40424: GO 40596
// btype := GetBType ( building ) ;
40426: LD_ADDR_VAR 0 5
40430: PUSH
40431: LD_VAR 0 1
40435: PPUSH
40436: CALL_OW 266
40440: ST_TO_ADDR
// if btype = b_armoury then
40441: LD_VAR 0 5
40445: PUSH
40446: LD_INT 4
40448: EQUAL
40449: IFFALSE 40459
// btype := b_barracks ;
40451: LD_ADDR_VAR 0 5
40455: PUSH
40456: LD_INT 5
40458: ST_TO_ADDR
// if btype = b_depot then
40459: LD_VAR 0 5
40463: PUSH
40464: LD_INT 0
40466: EQUAL
40467: IFFALSE 40477
// btype := b_warehouse ;
40469: LD_ADDR_VAR 0 5
40473: PUSH
40474: LD_INT 1
40476: ST_TO_ADDR
// if btype = b_workshop then
40477: LD_VAR 0 5
40481: PUSH
40482: LD_INT 2
40484: EQUAL
40485: IFFALSE 40495
// btype := b_factory ;
40487: LD_ADDR_VAR 0 5
40491: PUSH
40492: LD_INT 3
40494: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
40495: LD_ADDR_VAR 0 4
40499: PUSH
40500: LD_VAR 0 5
40504: PPUSH
40505: LD_VAR 0 1
40509: PPUSH
40510: CALL_OW 248
40514: PPUSH
40515: CALL_OW 450
40519: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40520: LD_ADDR_VAR 0 2
40524: PUSH
40525: LD_VAR 0 3
40529: PPUSH
40530: LD_INT 1
40532: PPUSH
40533: CALL_OW 275
40537: PUSH
40538: LD_VAR 0 4
40542: PUSH
40543: LD_INT 1
40545: ARRAY
40546: GREATEREQUAL
40547: PUSH
40548: LD_VAR 0 3
40552: PPUSH
40553: LD_INT 2
40555: PPUSH
40556: CALL_OW 275
40560: PUSH
40561: LD_VAR 0 4
40565: PUSH
40566: LD_INT 2
40568: ARRAY
40569: GREATEREQUAL
40570: AND
40571: PUSH
40572: LD_VAR 0 3
40576: PPUSH
40577: LD_INT 3
40579: PPUSH
40580: CALL_OW 275
40584: PUSH
40585: LD_VAR 0 4
40589: PUSH
40590: LD_INT 3
40592: ARRAY
40593: GREATEREQUAL
40594: AND
40595: ST_TO_ADDR
// end ;
40596: LD_VAR 0 2
40600: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
40601: LD_INT 0
40603: PPUSH
40604: PPUSH
40605: PPUSH
// pom := GetBase ( building ) ;
40606: LD_ADDR_VAR 0 4
40610: PUSH
40611: LD_VAR 0 1
40615: PPUSH
40616: CALL_OW 274
40620: ST_TO_ADDR
// if not pom then
40621: LD_VAR 0 4
40625: NOT
40626: IFFALSE 40630
// exit ;
40628: GO 40731
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
40630: LD_ADDR_VAR 0 5
40634: PUSH
40635: LD_VAR 0 2
40639: PPUSH
40640: LD_VAR 0 1
40644: PPUSH
40645: CALL_OW 248
40649: PPUSH
40650: CALL_OW 450
40654: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40655: LD_ADDR_VAR 0 3
40659: PUSH
40660: LD_VAR 0 4
40664: PPUSH
40665: LD_INT 1
40667: PPUSH
40668: CALL_OW 275
40672: PUSH
40673: LD_VAR 0 5
40677: PUSH
40678: LD_INT 1
40680: ARRAY
40681: GREATEREQUAL
40682: PUSH
40683: LD_VAR 0 4
40687: PPUSH
40688: LD_INT 2
40690: PPUSH
40691: CALL_OW 275
40695: PUSH
40696: LD_VAR 0 5
40700: PUSH
40701: LD_INT 2
40703: ARRAY
40704: GREATEREQUAL
40705: AND
40706: PUSH
40707: LD_VAR 0 4
40711: PPUSH
40712: LD_INT 3
40714: PPUSH
40715: CALL_OW 275
40719: PUSH
40720: LD_VAR 0 5
40724: PUSH
40725: LD_INT 3
40727: ARRAY
40728: GREATEREQUAL
40729: AND
40730: ST_TO_ADDR
// end ;
40731: LD_VAR 0 3
40735: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
40736: LD_INT 0
40738: PPUSH
40739: PPUSH
40740: PPUSH
40741: PPUSH
40742: PPUSH
40743: PPUSH
40744: PPUSH
40745: PPUSH
40746: PPUSH
40747: PPUSH
40748: PPUSH
// result := false ;
40749: LD_ADDR_VAR 0 8
40753: PUSH
40754: LD_INT 0
40756: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
40757: LD_VAR 0 5
40761: NOT
40762: PUSH
40763: LD_VAR 0 1
40767: NOT
40768: OR
40769: PUSH
40770: LD_VAR 0 2
40774: NOT
40775: OR
40776: PUSH
40777: LD_VAR 0 3
40781: NOT
40782: OR
40783: IFFALSE 40787
// exit ;
40785: GO 41601
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
40787: LD_ADDR_VAR 0 14
40791: PUSH
40792: LD_VAR 0 1
40796: PPUSH
40797: LD_VAR 0 2
40801: PPUSH
40802: LD_VAR 0 3
40806: PPUSH
40807: LD_VAR 0 4
40811: PPUSH
40812: LD_VAR 0 5
40816: PUSH
40817: LD_INT 1
40819: ARRAY
40820: PPUSH
40821: CALL_OW 248
40825: PPUSH
40826: LD_INT 0
40828: PPUSH
40829: CALL 42838 0 6
40833: ST_TO_ADDR
// if not hexes then
40834: LD_VAR 0 14
40838: NOT
40839: IFFALSE 40843
// exit ;
40841: GO 41601
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
40843: LD_ADDR_VAR 0 17
40847: PUSH
40848: LD_VAR 0 5
40852: PPUSH
40853: LD_INT 22
40855: PUSH
40856: LD_VAR 0 13
40860: PPUSH
40861: CALL_OW 255
40865: PUSH
40866: EMPTY
40867: LIST
40868: LIST
40869: PUSH
40870: LD_INT 2
40872: PUSH
40873: LD_INT 30
40875: PUSH
40876: LD_INT 0
40878: PUSH
40879: EMPTY
40880: LIST
40881: LIST
40882: PUSH
40883: LD_INT 30
40885: PUSH
40886: LD_INT 1
40888: PUSH
40889: EMPTY
40890: LIST
40891: LIST
40892: PUSH
40893: EMPTY
40894: LIST
40895: LIST
40896: LIST
40897: PUSH
40898: EMPTY
40899: LIST
40900: LIST
40901: PPUSH
40902: CALL_OW 72
40906: ST_TO_ADDR
// for i = 1 to hexes do
40907: LD_ADDR_VAR 0 9
40911: PUSH
40912: DOUBLE
40913: LD_INT 1
40915: DEC
40916: ST_TO_ADDR
40917: LD_VAR 0 14
40921: PUSH
40922: FOR_TO
40923: IFFALSE 41599
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
40925: LD_ADDR_VAR 0 13
40929: PUSH
40930: LD_VAR 0 14
40934: PUSH
40935: LD_VAR 0 9
40939: ARRAY
40940: PUSH
40941: LD_INT 1
40943: ARRAY
40944: PPUSH
40945: LD_VAR 0 14
40949: PUSH
40950: LD_VAR 0 9
40954: ARRAY
40955: PUSH
40956: LD_INT 2
40958: ARRAY
40959: PPUSH
40960: CALL_OW 428
40964: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
40965: LD_VAR 0 14
40969: PUSH
40970: LD_VAR 0 9
40974: ARRAY
40975: PUSH
40976: LD_INT 1
40978: ARRAY
40979: PPUSH
40980: LD_VAR 0 14
40984: PUSH
40985: LD_VAR 0 9
40989: ARRAY
40990: PUSH
40991: LD_INT 2
40993: ARRAY
40994: PPUSH
40995: CALL_OW 351
40999: PUSH
41000: LD_VAR 0 14
41004: PUSH
41005: LD_VAR 0 9
41009: ARRAY
41010: PUSH
41011: LD_INT 1
41013: ARRAY
41014: PPUSH
41015: LD_VAR 0 14
41019: PUSH
41020: LD_VAR 0 9
41024: ARRAY
41025: PUSH
41026: LD_INT 2
41028: ARRAY
41029: PPUSH
41030: CALL_OW 488
41034: NOT
41035: OR
41036: PUSH
41037: LD_VAR 0 13
41041: PPUSH
41042: CALL_OW 247
41046: PUSH
41047: LD_INT 3
41049: EQUAL
41050: OR
41051: IFFALSE 41057
// exit ;
41053: POP
41054: POP
41055: GO 41601
// if not tmp then
41057: LD_VAR 0 13
41061: NOT
41062: IFFALSE 41066
// continue ;
41064: GO 40922
// result := true ;
41066: LD_ADDR_VAR 0 8
41070: PUSH
41071: LD_INT 1
41073: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
41074: LD_VAR 0 6
41078: PUSH
41079: LD_VAR 0 13
41083: PPUSH
41084: CALL_OW 247
41088: PUSH
41089: LD_INT 2
41091: EQUAL
41092: AND
41093: PUSH
41094: LD_VAR 0 13
41098: PPUSH
41099: CALL_OW 263
41103: PUSH
41104: LD_INT 1
41106: EQUAL
41107: AND
41108: IFFALSE 41272
// begin if IsDrivenBy ( tmp ) then
41110: LD_VAR 0 13
41114: PPUSH
41115: CALL_OW 311
41119: IFFALSE 41123
// continue ;
41121: GO 40922
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
41123: LD_VAR 0 6
41127: PPUSH
41128: LD_INT 3
41130: PUSH
41131: LD_INT 60
41133: PUSH
41134: EMPTY
41135: LIST
41136: PUSH
41137: EMPTY
41138: LIST
41139: LIST
41140: PUSH
41141: LD_INT 3
41143: PUSH
41144: LD_INT 55
41146: PUSH
41147: EMPTY
41148: LIST
41149: PUSH
41150: EMPTY
41151: LIST
41152: LIST
41153: PUSH
41154: EMPTY
41155: LIST
41156: LIST
41157: PPUSH
41158: CALL_OW 72
41162: IFFALSE 41270
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
41164: LD_ADDR_VAR 0 18
41168: PUSH
41169: LD_VAR 0 6
41173: PPUSH
41174: LD_INT 3
41176: PUSH
41177: LD_INT 60
41179: PUSH
41180: EMPTY
41181: LIST
41182: PUSH
41183: EMPTY
41184: LIST
41185: LIST
41186: PUSH
41187: LD_INT 3
41189: PUSH
41190: LD_INT 55
41192: PUSH
41193: EMPTY
41194: LIST
41195: PUSH
41196: EMPTY
41197: LIST
41198: LIST
41199: PUSH
41200: EMPTY
41201: LIST
41202: LIST
41203: PPUSH
41204: CALL_OW 72
41208: PUSH
41209: LD_INT 1
41211: ARRAY
41212: ST_TO_ADDR
// if IsInUnit ( driver ) then
41213: LD_VAR 0 18
41217: PPUSH
41218: CALL_OW 310
41222: IFFALSE 41233
// ComExit ( driver ) ;
41224: LD_VAR 0 18
41228: PPUSH
41229: CALL 66543 0 1
// AddComEnterUnit ( driver , tmp ) ;
41233: LD_VAR 0 18
41237: PPUSH
41238: LD_VAR 0 13
41242: PPUSH
41243: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
41247: LD_VAR 0 18
41251: PPUSH
41252: LD_VAR 0 7
41256: PPUSH
41257: CALL_OW 173
// AddComExitVehicle ( driver ) ;
41261: LD_VAR 0 18
41265: PPUSH
41266: CALL_OW 181
// end ; continue ;
41270: GO 40922
// end ; if not cleaners or not tmp in cleaners then
41272: LD_VAR 0 6
41276: NOT
41277: PUSH
41278: LD_VAR 0 13
41282: PUSH
41283: LD_VAR 0 6
41287: IN
41288: NOT
41289: OR
41290: IFFALSE 41597
// begin if dep then
41292: LD_VAR 0 17
41296: IFFALSE 41432
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
41298: LD_ADDR_VAR 0 16
41302: PUSH
41303: LD_VAR 0 17
41307: PUSH
41308: LD_INT 1
41310: ARRAY
41311: PPUSH
41312: CALL_OW 250
41316: PPUSH
41317: LD_VAR 0 17
41321: PUSH
41322: LD_INT 1
41324: ARRAY
41325: PPUSH
41326: CALL_OW 254
41330: PPUSH
41331: LD_INT 5
41333: PPUSH
41334: CALL_OW 272
41338: PUSH
41339: LD_VAR 0 17
41343: PUSH
41344: LD_INT 1
41346: ARRAY
41347: PPUSH
41348: CALL_OW 251
41352: PPUSH
41353: LD_VAR 0 17
41357: PUSH
41358: LD_INT 1
41360: ARRAY
41361: PPUSH
41362: CALL_OW 254
41366: PPUSH
41367: LD_INT 5
41369: PPUSH
41370: CALL_OW 273
41374: PUSH
41375: EMPTY
41376: LIST
41377: LIST
41378: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
41379: LD_VAR 0 16
41383: PUSH
41384: LD_INT 1
41386: ARRAY
41387: PPUSH
41388: LD_VAR 0 16
41392: PUSH
41393: LD_INT 2
41395: ARRAY
41396: PPUSH
41397: CALL_OW 488
41401: IFFALSE 41432
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
41403: LD_VAR 0 13
41407: PPUSH
41408: LD_VAR 0 16
41412: PUSH
41413: LD_INT 1
41415: ARRAY
41416: PPUSH
41417: LD_VAR 0 16
41421: PUSH
41422: LD_INT 2
41424: ARRAY
41425: PPUSH
41426: CALL_OW 111
// continue ;
41430: GO 40922
// end ; end ; r := GetDir ( tmp ) ;
41432: LD_ADDR_VAR 0 15
41436: PUSH
41437: LD_VAR 0 13
41441: PPUSH
41442: CALL_OW 254
41446: ST_TO_ADDR
// if r = 5 then
41447: LD_VAR 0 15
41451: PUSH
41452: LD_INT 5
41454: EQUAL
41455: IFFALSE 41465
// r := 0 ;
41457: LD_ADDR_VAR 0 15
41461: PUSH
41462: LD_INT 0
41464: ST_TO_ADDR
// for j = r to 5 do
41465: LD_ADDR_VAR 0 10
41469: PUSH
41470: DOUBLE
41471: LD_VAR 0 15
41475: DEC
41476: ST_TO_ADDR
41477: LD_INT 5
41479: PUSH
41480: FOR_TO
41481: IFFALSE 41595
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
41483: LD_ADDR_VAR 0 11
41487: PUSH
41488: LD_VAR 0 13
41492: PPUSH
41493: CALL_OW 250
41497: PPUSH
41498: LD_VAR 0 10
41502: PPUSH
41503: LD_INT 2
41505: PPUSH
41506: CALL_OW 272
41510: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
41511: LD_ADDR_VAR 0 12
41515: PUSH
41516: LD_VAR 0 13
41520: PPUSH
41521: CALL_OW 251
41525: PPUSH
41526: LD_VAR 0 10
41530: PPUSH
41531: LD_INT 2
41533: PPUSH
41534: CALL_OW 273
41538: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
41539: LD_VAR 0 11
41543: PPUSH
41544: LD_VAR 0 12
41548: PPUSH
41549: CALL_OW 488
41553: PUSH
41554: LD_VAR 0 11
41558: PPUSH
41559: LD_VAR 0 12
41563: PPUSH
41564: CALL_OW 428
41568: NOT
41569: AND
41570: IFFALSE 41593
// begin ComMoveXY ( tmp , _x , _y ) ;
41572: LD_VAR 0 13
41576: PPUSH
41577: LD_VAR 0 11
41581: PPUSH
41582: LD_VAR 0 12
41586: PPUSH
41587: CALL_OW 111
// break ;
41591: GO 41595
// end ; end ;
41593: GO 41480
41595: POP
41596: POP
// end ; end ;
41597: GO 40922
41599: POP
41600: POP
// end ;
41601: LD_VAR 0 8
41605: RET
// export function BuildingTechInvented ( side , btype ) ; begin
41606: LD_INT 0
41608: PPUSH
// result := true ;
41609: LD_ADDR_VAR 0 3
41613: PUSH
41614: LD_INT 1
41616: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
41617: LD_VAR 0 2
41621: PUSH
41622: LD_INT 24
41624: DOUBLE
41625: EQUAL
41626: IFTRUE 41636
41628: LD_INT 33
41630: DOUBLE
41631: EQUAL
41632: IFTRUE 41636
41634: GO 41661
41636: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
41637: LD_ADDR_VAR 0 3
41641: PUSH
41642: LD_INT 32
41644: PPUSH
41645: LD_VAR 0 1
41649: PPUSH
41650: CALL_OW 321
41654: PUSH
41655: LD_INT 2
41657: EQUAL
41658: ST_TO_ADDR
41659: GO 41981
41661: LD_INT 20
41663: DOUBLE
41664: EQUAL
41665: IFTRUE 41669
41667: GO 41694
41669: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
41670: LD_ADDR_VAR 0 3
41674: PUSH
41675: LD_INT 6
41677: PPUSH
41678: LD_VAR 0 1
41682: PPUSH
41683: CALL_OW 321
41687: PUSH
41688: LD_INT 2
41690: EQUAL
41691: ST_TO_ADDR
41692: GO 41981
41694: LD_INT 22
41696: DOUBLE
41697: EQUAL
41698: IFTRUE 41708
41700: LD_INT 36
41702: DOUBLE
41703: EQUAL
41704: IFTRUE 41708
41706: GO 41733
41708: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
41709: LD_ADDR_VAR 0 3
41713: PUSH
41714: LD_INT 15
41716: PPUSH
41717: LD_VAR 0 1
41721: PPUSH
41722: CALL_OW 321
41726: PUSH
41727: LD_INT 2
41729: EQUAL
41730: ST_TO_ADDR
41731: GO 41981
41733: LD_INT 30
41735: DOUBLE
41736: EQUAL
41737: IFTRUE 41741
41739: GO 41766
41741: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
41742: LD_ADDR_VAR 0 3
41746: PUSH
41747: LD_INT 20
41749: PPUSH
41750: LD_VAR 0 1
41754: PPUSH
41755: CALL_OW 321
41759: PUSH
41760: LD_INT 2
41762: EQUAL
41763: ST_TO_ADDR
41764: GO 41981
41766: LD_INT 28
41768: DOUBLE
41769: EQUAL
41770: IFTRUE 41780
41772: LD_INT 21
41774: DOUBLE
41775: EQUAL
41776: IFTRUE 41780
41778: GO 41805
41780: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
41781: LD_ADDR_VAR 0 3
41785: PUSH
41786: LD_INT 21
41788: PPUSH
41789: LD_VAR 0 1
41793: PPUSH
41794: CALL_OW 321
41798: PUSH
41799: LD_INT 2
41801: EQUAL
41802: ST_TO_ADDR
41803: GO 41981
41805: LD_INT 16
41807: DOUBLE
41808: EQUAL
41809: IFTRUE 41813
41811: GO 41840
41813: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
41814: LD_ADDR_VAR 0 3
41818: PUSH
41819: LD_EXP 65
41823: PPUSH
41824: LD_VAR 0 1
41828: PPUSH
41829: CALL_OW 321
41833: PUSH
41834: LD_INT 2
41836: EQUAL
41837: ST_TO_ADDR
41838: GO 41981
41840: LD_INT 19
41842: DOUBLE
41843: EQUAL
41844: IFTRUE 41854
41846: LD_INT 23
41848: DOUBLE
41849: EQUAL
41850: IFTRUE 41854
41852: GO 41881
41854: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
41855: LD_ADDR_VAR 0 3
41859: PUSH
41860: LD_EXP 64
41864: PPUSH
41865: LD_VAR 0 1
41869: PPUSH
41870: CALL_OW 321
41874: PUSH
41875: LD_INT 2
41877: EQUAL
41878: ST_TO_ADDR
41879: GO 41981
41881: LD_INT 17
41883: DOUBLE
41884: EQUAL
41885: IFTRUE 41889
41887: GO 41914
41889: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
41890: LD_ADDR_VAR 0 3
41894: PUSH
41895: LD_INT 39
41897: PPUSH
41898: LD_VAR 0 1
41902: PPUSH
41903: CALL_OW 321
41907: PUSH
41908: LD_INT 2
41910: EQUAL
41911: ST_TO_ADDR
41912: GO 41981
41914: LD_INT 18
41916: DOUBLE
41917: EQUAL
41918: IFTRUE 41922
41920: GO 41947
41922: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
41923: LD_ADDR_VAR 0 3
41927: PUSH
41928: LD_INT 40
41930: PPUSH
41931: LD_VAR 0 1
41935: PPUSH
41936: CALL_OW 321
41940: PUSH
41941: LD_INT 2
41943: EQUAL
41944: ST_TO_ADDR
41945: GO 41981
41947: LD_INT 27
41949: DOUBLE
41950: EQUAL
41951: IFTRUE 41955
41953: GO 41980
41955: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
41956: LD_ADDR_VAR 0 3
41960: PUSH
41961: LD_INT 35
41963: PPUSH
41964: LD_VAR 0 1
41968: PPUSH
41969: CALL_OW 321
41973: PUSH
41974: LD_INT 2
41976: EQUAL
41977: ST_TO_ADDR
41978: GO 41981
41980: POP
// end ;
41981: LD_VAR 0 3
41985: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
41986: LD_INT 0
41988: PPUSH
41989: PPUSH
41990: PPUSH
41991: PPUSH
41992: PPUSH
41993: PPUSH
41994: PPUSH
41995: PPUSH
41996: PPUSH
41997: PPUSH
41998: PPUSH
// result := false ;
41999: LD_ADDR_VAR 0 6
42003: PUSH
42004: LD_INT 0
42006: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
42007: LD_VAR 0 1
42011: NOT
42012: PUSH
42013: LD_VAR 0 1
42017: PPUSH
42018: CALL_OW 266
42022: PUSH
42023: LD_INT 0
42025: PUSH
42026: LD_INT 1
42028: PUSH
42029: EMPTY
42030: LIST
42031: LIST
42032: IN
42033: NOT
42034: OR
42035: PUSH
42036: LD_VAR 0 2
42040: NOT
42041: OR
42042: PUSH
42043: LD_VAR 0 5
42047: PUSH
42048: LD_INT 0
42050: PUSH
42051: LD_INT 1
42053: PUSH
42054: LD_INT 2
42056: PUSH
42057: LD_INT 3
42059: PUSH
42060: LD_INT 4
42062: PUSH
42063: LD_INT 5
42065: PUSH
42066: EMPTY
42067: LIST
42068: LIST
42069: LIST
42070: LIST
42071: LIST
42072: LIST
42073: IN
42074: NOT
42075: OR
42076: PUSH
42077: LD_VAR 0 3
42081: PPUSH
42082: LD_VAR 0 4
42086: PPUSH
42087: CALL_OW 488
42091: NOT
42092: OR
42093: IFFALSE 42097
// exit ;
42095: GO 42833
// side := GetSide ( depot ) ;
42097: LD_ADDR_VAR 0 9
42101: PUSH
42102: LD_VAR 0 1
42106: PPUSH
42107: CALL_OW 255
42111: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
42112: LD_VAR 0 9
42116: PPUSH
42117: LD_VAR 0 2
42121: PPUSH
42122: CALL 41606 0 2
42126: NOT
42127: IFFALSE 42131
// exit ;
42129: GO 42833
// pom := GetBase ( depot ) ;
42131: LD_ADDR_VAR 0 10
42135: PUSH
42136: LD_VAR 0 1
42140: PPUSH
42141: CALL_OW 274
42145: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
42146: LD_ADDR_VAR 0 11
42150: PUSH
42151: LD_VAR 0 2
42155: PPUSH
42156: LD_VAR 0 1
42160: PPUSH
42161: CALL_OW 248
42165: PPUSH
42166: CALL_OW 450
42170: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
42171: LD_VAR 0 10
42175: PPUSH
42176: LD_INT 1
42178: PPUSH
42179: CALL_OW 275
42183: PUSH
42184: LD_VAR 0 11
42188: PUSH
42189: LD_INT 1
42191: ARRAY
42192: GREATEREQUAL
42193: PUSH
42194: LD_VAR 0 10
42198: PPUSH
42199: LD_INT 2
42201: PPUSH
42202: CALL_OW 275
42206: PUSH
42207: LD_VAR 0 11
42211: PUSH
42212: LD_INT 2
42214: ARRAY
42215: GREATEREQUAL
42216: AND
42217: PUSH
42218: LD_VAR 0 10
42222: PPUSH
42223: LD_INT 3
42225: PPUSH
42226: CALL_OW 275
42230: PUSH
42231: LD_VAR 0 11
42235: PUSH
42236: LD_INT 3
42238: ARRAY
42239: GREATEREQUAL
42240: AND
42241: NOT
42242: IFFALSE 42246
// exit ;
42244: GO 42833
// if GetBType ( depot ) = b_depot then
42246: LD_VAR 0 1
42250: PPUSH
42251: CALL_OW 266
42255: PUSH
42256: LD_INT 0
42258: EQUAL
42259: IFFALSE 42271
// dist := 28 else
42261: LD_ADDR_VAR 0 14
42265: PUSH
42266: LD_INT 28
42268: ST_TO_ADDR
42269: GO 42279
// dist := 36 ;
42271: LD_ADDR_VAR 0 14
42275: PUSH
42276: LD_INT 36
42278: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
42279: LD_VAR 0 1
42283: PPUSH
42284: LD_VAR 0 3
42288: PPUSH
42289: LD_VAR 0 4
42293: PPUSH
42294: CALL_OW 297
42298: PUSH
42299: LD_VAR 0 14
42303: GREATER
42304: IFFALSE 42308
// exit ;
42306: GO 42833
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
42308: LD_ADDR_VAR 0 12
42312: PUSH
42313: LD_VAR 0 2
42317: PPUSH
42318: LD_VAR 0 3
42322: PPUSH
42323: LD_VAR 0 4
42327: PPUSH
42328: LD_VAR 0 5
42332: PPUSH
42333: LD_VAR 0 1
42337: PPUSH
42338: CALL_OW 248
42342: PPUSH
42343: LD_INT 0
42345: PPUSH
42346: CALL 42838 0 6
42350: ST_TO_ADDR
// if not hexes then
42351: LD_VAR 0 12
42355: NOT
42356: IFFALSE 42360
// exit ;
42358: GO 42833
// hex := GetHexInfo ( x , y ) ;
42360: LD_ADDR_VAR 0 15
42364: PUSH
42365: LD_VAR 0 3
42369: PPUSH
42370: LD_VAR 0 4
42374: PPUSH
42375: CALL_OW 546
42379: ST_TO_ADDR
// if hex [ 1 ] then
42380: LD_VAR 0 15
42384: PUSH
42385: LD_INT 1
42387: ARRAY
42388: IFFALSE 42392
// exit ;
42390: GO 42833
// height := hex [ 2 ] ;
42392: LD_ADDR_VAR 0 13
42396: PUSH
42397: LD_VAR 0 15
42401: PUSH
42402: LD_INT 2
42404: ARRAY
42405: ST_TO_ADDR
// for i = 1 to hexes do
42406: LD_ADDR_VAR 0 7
42410: PUSH
42411: DOUBLE
42412: LD_INT 1
42414: DEC
42415: ST_TO_ADDR
42416: LD_VAR 0 12
42420: PUSH
42421: FOR_TO
42422: IFFALSE 42752
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
42424: LD_VAR 0 12
42428: PUSH
42429: LD_VAR 0 7
42433: ARRAY
42434: PUSH
42435: LD_INT 1
42437: ARRAY
42438: PPUSH
42439: LD_VAR 0 12
42443: PUSH
42444: LD_VAR 0 7
42448: ARRAY
42449: PUSH
42450: LD_INT 2
42452: ARRAY
42453: PPUSH
42454: CALL_OW 488
42458: NOT
42459: PUSH
42460: LD_VAR 0 12
42464: PUSH
42465: LD_VAR 0 7
42469: ARRAY
42470: PUSH
42471: LD_INT 1
42473: ARRAY
42474: PPUSH
42475: LD_VAR 0 12
42479: PUSH
42480: LD_VAR 0 7
42484: ARRAY
42485: PUSH
42486: LD_INT 2
42488: ARRAY
42489: PPUSH
42490: CALL_OW 428
42494: PUSH
42495: LD_INT 0
42497: GREATER
42498: OR
42499: PUSH
42500: LD_VAR 0 12
42504: PUSH
42505: LD_VAR 0 7
42509: ARRAY
42510: PUSH
42511: LD_INT 1
42513: ARRAY
42514: PPUSH
42515: LD_VAR 0 12
42519: PUSH
42520: LD_VAR 0 7
42524: ARRAY
42525: PUSH
42526: LD_INT 2
42528: ARRAY
42529: PPUSH
42530: CALL_OW 351
42534: OR
42535: IFFALSE 42541
// exit ;
42537: POP
42538: POP
42539: GO 42833
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42541: LD_ADDR_VAR 0 8
42545: PUSH
42546: LD_VAR 0 12
42550: PUSH
42551: LD_VAR 0 7
42555: ARRAY
42556: PUSH
42557: LD_INT 1
42559: ARRAY
42560: PPUSH
42561: LD_VAR 0 12
42565: PUSH
42566: LD_VAR 0 7
42570: ARRAY
42571: PUSH
42572: LD_INT 2
42574: ARRAY
42575: PPUSH
42576: CALL_OW 546
42580: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
42581: LD_VAR 0 8
42585: PUSH
42586: LD_INT 1
42588: ARRAY
42589: PUSH
42590: LD_VAR 0 8
42594: PUSH
42595: LD_INT 2
42597: ARRAY
42598: PUSH
42599: LD_VAR 0 13
42603: PUSH
42604: LD_INT 2
42606: PLUS
42607: GREATER
42608: OR
42609: PUSH
42610: LD_VAR 0 8
42614: PUSH
42615: LD_INT 2
42617: ARRAY
42618: PUSH
42619: LD_VAR 0 13
42623: PUSH
42624: LD_INT 2
42626: MINUS
42627: LESS
42628: OR
42629: PUSH
42630: LD_VAR 0 8
42634: PUSH
42635: LD_INT 3
42637: ARRAY
42638: PUSH
42639: LD_INT 0
42641: PUSH
42642: LD_INT 8
42644: PUSH
42645: LD_INT 9
42647: PUSH
42648: LD_INT 10
42650: PUSH
42651: LD_INT 11
42653: PUSH
42654: LD_INT 12
42656: PUSH
42657: LD_INT 13
42659: PUSH
42660: LD_INT 16
42662: PUSH
42663: LD_INT 17
42665: PUSH
42666: LD_INT 18
42668: PUSH
42669: LD_INT 19
42671: PUSH
42672: LD_INT 20
42674: PUSH
42675: LD_INT 21
42677: PUSH
42678: EMPTY
42679: LIST
42680: LIST
42681: LIST
42682: LIST
42683: LIST
42684: LIST
42685: LIST
42686: LIST
42687: LIST
42688: LIST
42689: LIST
42690: LIST
42691: LIST
42692: IN
42693: NOT
42694: OR
42695: PUSH
42696: LD_VAR 0 8
42700: PUSH
42701: LD_INT 5
42703: ARRAY
42704: NOT
42705: OR
42706: PUSH
42707: LD_VAR 0 8
42711: PUSH
42712: LD_INT 6
42714: ARRAY
42715: PUSH
42716: LD_INT 1
42718: PUSH
42719: LD_INT 2
42721: PUSH
42722: LD_INT 7
42724: PUSH
42725: LD_INT 9
42727: PUSH
42728: LD_INT 10
42730: PUSH
42731: LD_INT 11
42733: PUSH
42734: EMPTY
42735: LIST
42736: LIST
42737: LIST
42738: LIST
42739: LIST
42740: LIST
42741: IN
42742: NOT
42743: OR
42744: IFFALSE 42750
// exit ;
42746: POP
42747: POP
42748: GO 42833
// end ;
42750: GO 42421
42752: POP
42753: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
42754: LD_VAR 0 9
42758: PPUSH
42759: LD_VAR 0 3
42763: PPUSH
42764: LD_VAR 0 4
42768: PPUSH
42769: LD_INT 20
42771: PPUSH
42772: CALL 34779 0 4
42776: PUSH
42777: LD_INT 4
42779: ARRAY
42780: IFFALSE 42784
// exit ;
42782: GO 42833
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
42784: LD_VAR 0 2
42788: PUSH
42789: LD_INT 29
42791: PUSH
42792: LD_INT 30
42794: PUSH
42795: EMPTY
42796: LIST
42797: LIST
42798: IN
42799: PUSH
42800: LD_VAR 0 3
42804: PPUSH
42805: LD_VAR 0 4
42809: PPUSH
42810: LD_VAR 0 9
42814: PPUSH
42815: CALL_OW 440
42819: NOT
42820: AND
42821: IFFALSE 42825
// exit ;
42823: GO 42833
// result := true ;
42825: LD_ADDR_VAR 0 6
42829: PUSH
42830: LD_INT 1
42832: ST_TO_ADDR
// end ;
42833: LD_VAR 0 6
42837: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
42838: LD_INT 0
42840: PPUSH
42841: PPUSH
42842: PPUSH
42843: PPUSH
42844: PPUSH
42845: PPUSH
42846: PPUSH
42847: PPUSH
42848: PPUSH
42849: PPUSH
42850: PPUSH
42851: PPUSH
42852: PPUSH
42853: PPUSH
42854: PPUSH
42855: PPUSH
42856: PPUSH
42857: PPUSH
42858: PPUSH
42859: PPUSH
42860: PPUSH
42861: PPUSH
42862: PPUSH
42863: PPUSH
42864: PPUSH
42865: PPUSH
42866: PPUSH
42867: PPUSH
42868: PPUSH
42869: PPUSH
42870: PPUSH
42871: PPUSH
42872: PPUSH
42873: PPUSH
42874: PPUSH
42875: PPUSH
42876: PPUSH
42877: PPUSH
42878: PPUSH
42879: PPUSH
42880: PPUSH
42881: PPUSH
42882: PPUSH
42883: PPUSH
42884: PPUSH
42885: PPUSH
42886: PPUSH
42887: PPUSH
42888: PPUSH
42889: PPUSH
42890: PPUSH
42891: PPUSH
42892: PPUSH
42893: PPUSH
42894: PPUSH
42895: PPUSH
42896: PPUSH
42897: PPUSH
// result = [ ] ;
42898: LD_ADDR_VAR 0 7
42902: PUSH
42903: EMPTY
42904: ST_TO_ADDR
// temp_list = [ ] ;
42905: LD_ADDR_VAR 0 9
42909: PUSH
42910: EMPTY
42911: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
42912: LD_VAR 0 4
42916: PUSH
42917: LD_INT 0
42919: PUSH
42920: LD_INT 1
42922: PUSH
42923: LD_INT 2
42925: PUSH
42926: LD_INT 3
42928: PUSH
42929: LD_INT 4
42931: PUSH
42932: LD_INT 5
42934: PUSH
42935: EMPTY
42936: LIST
42937: LIST
42938: LIST
42939: LIST
42940: LIST
42941: LIST
42942: IN
42943: NOT
42944: PUSH
42945: LD_VAR 0 1
42949: PUSH
42950: LD_INT 0
42952: PUSH
42953: LD_INT 1
42955: PUSH
42956: EMPTY
42957: LIST
42958: LIST
42959: IN
42960: PUSH
42961: LD_VAR 0 5
42965: PUSH
42966: LD_INT 1
42968: PUSH
42969: LD_INT 2
42971: PUSH
42972: LD_INT 3
42974: PUSH
42975: EMPTY
42976: LIST
42977: LIST
42978: LIST
42979: IN
42980: NOT
42981: AND
42982: OR
42983: IFFALSE 42987
// exit ;
42985: GO 61378
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
42987: LD_VAR 0 1
42991: PUSH
42992: LD_INT 6
42994: PUSH
42995: LD_INT 7
42997: PUSH
42998: LD_INT 8
43000: PUSH
43001: LD_INT 13
43003: PUSH
43004: LD_INT 12
43006: PUSH
43007: LD_INT 15
43009: PUSH
43010: LD_INT 11
43012: PUSH
43013: LD_INT 14
43015: PUSH
43016: LD_INT 10
43018: PUSH
43019: EMPTY
43020: LIST
43021: LIST
43022: LIST
43023: LIST
43024: LIST
43025: LIST
43026: LIST
43027: LIST
43028: LIST
43029: IN
43030: IFFALSE 43040
// btype = b_lab ;
43032: LD_ADDR_VAR 0 1
43036: PUSH
43037: LD_INT 6
43039: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
43040: LD_VAR 0 6
43044: PUSH
43045: LD_INT 0
43047: PUSH
43048: LD_INT 1
43050: PUSH
43051: LD_INT 2
43053: PUSH
43054: EMPTY
43055: LIST
43056: LIST
43057: LIST
43058: IN
43059: NOT
43060: PUSH
43061: LD_VAR 0 1
43065: PUSH
43066: LD_INT 0
43068: PUSH
43069: LD_INT 1
43071: PUSH
43072: LD_INT 2
43074: PUSH
43075: LD_INT 3
43077: PUSH
43078: LD_INT 6
43080: PUSH
43081: LD_INT 36
43083: PUSH
43084: LD_INT 4
43086: PUSH
43087: LD_INT 5
43089: PUSH
43090: LD_INT 31
43092: PUSH
43093: LD_INT 32
43095: PUSH
43096: LD_INT 33
43098: PUSH
43099: EMPTY
43100: LIST
43101: LIST
43102: LIST
43103: LIST
43104: LIST
43105: LIST
43106: LIST
43107: LIST
43108: LIST
43109: LIST
43110: LIST
43111: IN
43112: NOT
43113: PUSH
43114: LD_VAR 0 6
43118: PUSH
43119: LD_INT 1
43121: EQUAL
43122: AND
43123: OR
43124: PUSH
43125: LD_VAR 0 1
43129: PUSH
43130: LD_INT 2
43132: PUSH
43133: LD_INT 3
43135: PUSH
43136: EMPTY
43137: LIST
43138: LIST
43139: IN
43140: NOT
43141: PUSH
43142: LD_VAR 0 6
43146: PUSH
43147: LD_INT 2
43149: EQUAL
43150: AND
43151: OR
43152: IFFALSE 43162
// mode = 0 ;
43154: LD_ADDR_VAR 0 6
43158: PUSH
43159: LD_INT 0
43161: ST_TO_ADDR
// case mode of 0 :
43162: LD_VAR 0 6
43166: PUSH
43167: LD_INT 0
43169: DOUBLE
43170: EQUAL
43171: IFTRUE 43175
43173: GO 54628
43175: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43176: LD_ADDR_VAR 0 11
43180: PUSH
43181: LD_INT 0
43183: PUSH
43184: LD_INT 0
43186: PUSH
43187: EMPTY
43188: LIST
43189: LIST
43190: PUSH
43191: LD_INT 0
43193: PUSH
43194: LD_INT 1
43196: NEG
43197: PUSH
43198: EMPTY
43199: LIST
43200: LIST
43201: PUSH
43202: LD_INT 1
43204: PUSH
43205: LD_INT 0
43207: PUSH
43208: EMPTY
43209: LIST
43210: LIST
43211: PUSH
43212: LD_INT 1
43214: PUSH
43215: LD_INT 1
43217: PUSH
43218: EMPTY
43219: LIST
43220: LIST
43221: PUSH
43222: LD_INT 0
43224: PUSH
43225: LD_INT 1
43227: PUSH
43228: EMPTY
43229: LIST
43230: LIST
43231: PUSH
43232: LD_INT 1
43234: NEG
43235: PUSH
43236: LD_INT 0
43238: PUSH
43239: EMPTY
43240: LIST
43241: LIST
43242: PUSH
43243: LD_INT 1
43245: NEG
43246: PUSH
43247: LD_INT 1
43249: NEG
43250: PUSH
43251: EMPTY
43252: LIST
43253: LIST
43254: PUSH
43255: LD_INT 1
43257: NEG
43258: PUSH
43259: LD_INT 2
43261: NEG
43262: PUSH
43263: EMPTY
43264: LIST
43265: LIST
43266: PUSH
43267: LD_INT 0
43269: PUSH
43270: LD_INT 2
43272: NEG
43273: PUSH
43274: EMPTY
43275: LIST
43276: LIST
43277: PUSH
43278: LD_INT 1
43280: PUSH
43281: LD_INT 1
43283: NEG
43284: PUSH
43285: EMPTY
43286: LIST
43287: LIST
43288: PUSH
43289: LD_INT 1
43291: PUSH
43292: LD_INT 2
43294: PUSH
43295: EMPTY
43296: LIST
43297: LIST
43298: PUSH
43299: LD_INT 0
43301: PUSH
43302: LD_INT 2
43304: PUSH
43305: EMPTY
43306: LIST
43307: LIST
43308: PUSH
43309: LD_INT 1
43311: NEG
43312: PUSH
43313: LD_INT 1
43315: PUSH
43316: EMPTY
43317: LIST
43318: LIST
43319: PUSH
43320: LD_INT 1
43322: PUSH
43323: LD_INT 3
43325: PUSH
43326: EMPTY
43327: LIST
43328: LIST
43329: PUSH
43330: LD_INT 0
43332: PUSH
43333: LD_INT 3
43335: PUSH
43336: EMPTY
43337: LIST
43338: LIST
43339: PUSH
43340: LD_INT 1
43342: NEG
43343: PUSH
43344: LD_INT 2
43346: PUSH
43347: EMPTY
43348: LIST
43349: LIST
43350: PUSH
43351: EMPTY
43352: LIST
43353: LIST
43354: LIST
43355: LIST
43356: LIST
43357: LIST
43358: LIST
43359: LIST
43360: LIST
43361: LIST
43362: LIST
43363: LIST
43364: LIST
43365: LIST
43366: LIST
43367: LIST
43368: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43369: LD_ADDR_VAR 0 12
43373: PUSH
43374: LD_INT 0
43376: PUSH
43377: LD_INT 0
43379: PUSH
43380: EMPTY
43381: LIST
43382: LIST
43383: PUSH
43384: LD_INT 0
43386: PUSH
43387: LD_INT 1
43389: NEG
43390: PUSH
43391: EMPTY
43392: LIST
43393: LIST
43394: PUSH
43395: LD_INT 1
43397: PUSH
43398: LD_INT 0
43400: PUSH
43401: EMPTY
43402: LIST
43403: LIST
43404: PUSH
43405: LD_INT 1
43407: PUSH
43408: LD_INT 1
43410: PUSH
43411: EMPTY
43412: LIST
43413: LIST
43414: PUSH
43415: LD_INT 0
43417: PUSH
43418: LD_INT 1
43420: PUSH
43421: EMPTY
43422: LIST
43423: LIST
43424: PUSH
43425: LD_INT 1
43427: NEG
43428: PUSH
43429: LD_INT 0
43431: PUSH
43432: EMPTY
43433: LIST
43434: LIST
43435: PUSH
43436: LD_INT 1
43438: NEG
43439: PUSH
43440: LD_INT 1
43442: NEG
43443: PUSH
43444: EMPTY
43445: LIST
43446: LIST
43447: PUSH
43448: LD_INT 1
43450: PUSH
43451: LD_INT 1
43453: NEG
43454: PUSH
43455: EMPTY
43456: LIST
43457: LIST
43458: PUSH
43459: LD_INT 2
43461: PUSH
43462: LD_INT 0
43464: PUSH
43465: EMPTY
43466: LIST
43467: LIST
43468: PUSH
43469: LD_INT 2
43471: PUSH
43472: LD_INT 1
43474: PUSH
43475: EMPTY
43476: LIST
43477: LIST
43478: PUSH
43479: LD_INT 1
43481: NEG
43482: PUSH
43483: LD_INT 1
43485: PUSH
43486: EMPTY
43487: LIST
43488: LIST
43489: PUSH
43490: LD_INT 2
43492: NEG
43493: PUSH
43494: LD_INT 0
43496: PUSH
43497: EMPTY
43498: LIST
43499: LIST
43500: PUSH
43501: LD_INT 2
43503: NEG
43504: PUSH
43505: LD_INT 1
43507: NEG
43508: PUSH
43509: EMPTY
43510: LIST
43511: LIST
43512: PUSH
43513: LD_INT 2
43515: NEG
43516: PUSH
43517: LD_INT 1
43519: PUSH
43520: EMPTY
43521: LIST
43522: LIST
43523: PUSH
43524: LD_INT 3
43526: NEG
43527: PUSH
43528: LD_INT 0
43530: PUSH
43531: EMPTY
43532: LIST
43533: LIST
43534: PUSH
43535: LD_INT 3
43537: NEG
43538: PUSH
43539: LD_INT 1
43541: NEG
43542: PUSH
43543: EMPTY
43544: LIST
43545: LIST
43546: PUSH
43547: EMPTY
43548: LIST
43549: LIST
43550: LIST
43551: LIST
43552: LIST
43553: LIST
43554: LIST
43555: LIST
43556: LIST
43557: LIST
43558: LIST
43559: LIST
43560: LIST
43561: LIST
43562: LIST
43563: LIST
43564: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43565: LD_ADDR_VAR 0 13
43569: PUSH
43570: LD_INT 0
43572: PUSH
43573: LD_INT 0
43575: PUSH
43576: EMPTY
43577: LIST
43578: LIST
43579: PUSH
43580: LD_INT 0
43582: PUSH
43583: LD_INT 1
43585: NEG
43586: PUSH
43587: EMPTY
43588: LIST
43589: LIST
43590: PUSH
43591: LD_INT 1
43593: PUSH
43594: LD_INT 0
43596: PUSH
43597: EMPTY
43598: LIST
43599: LIST
43600: PUSH
43601: LD_INT 1
43603: PUSH
43604: LD_INT 1
43606: PUSH
43607: EMPTY
43608: LIST
43609: LIST
43610: PUSH
43611: LD_INT 0
43613: PUSH
43614: LD_INT 1
43616: PUSH
43617: EMPTY
43618: LIST
43619: LIST
43620: PUSH
43621: LD_INT 1
43623: NEG
43624: PUSH
43625: LD_INT 0
43627: PUSH
43628: EMPTY
43629: LIST
43630: LIST
43631: PUSH
43632: LD_INT 1
43634: NEG
43635: PUSH
43636: LD_INT 1
43638: NEG
43639: PUSH
43640: EMPTY
43641: LIST
43642: LIST
43643: PUSH
43644: LD_INT 1
43646: NEG
43647: PUSH
43648: LD_INT 2
43650: NEG
43651: PUSH
43652: EMPTY
43653: LIST
43654: LIST
43655: PUSH
43656: LD_INT 2
43658: PUSH
43659: LD_INT 1
43661: PUSH
43662: EMPTY
43663: LIST
43664: LIST
43665: PUSH
43666: LD_INT 2
43668: PUSH
43669: LD_INT 2
43671: PUSH
43672: EMPTY
43673: LIST
43674: LIST
43675: PUSH
43676: LD_INT 1
43678: PUSH
43679: LD_INT 2
43681: PUSH
43682: EMPTY
43683: LIST
43684: LIST
43685: PUSH
43686: LD_INT 2
43688: NEG
43689: PUSH
43690: LD_INT 1
43692: NEG
43693: PUSH
43694: EMPTY
43695: LIST
43696: LIST
43697: PUSH
43698: LD_INT 2
43700: NEG
43701: PUSH
43702: LD_INT 2
43704: NEG
43705: PUSH
43706: EMPTY
43707: LIST
43708: LIST
43709: PUSH
43710: LD_INT 2
43712: NEG
43713: PUSH
43714: LD_INT 3
43716: NEG
43717: PUSH
43718: EMPTY
43719: LIST
43720: LIST
43721: PUSH
43722: LD_INT 3
43724: NEG
43725: PUSH
43726: LD_INT 2
43728: NEG
43729: PUSH
43730: EMPTY
43731: LIST
43732: LIST
43733: PUSH
43734: LD_INT 3
43736: NEG
43737: PUSH
43738: LD_INT 3
43740: NEG
43741: PUSH
43742: EMPTY
43743: LIST
43744: LIST
43745: PUSH
43746: EMPTY
43747: LIST
43748: LIST
43749: LIST
43750: LIST
43751: LIST
43752: LIST
43753: LIST
43754: LIST
43755: LIST
43756: LIST
43757: LIST
43758: LIST
43759: LIST
43760: LIST
43761: LIST
43762: LIST
43763: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
43764: LD_ADDR_VAR 0 14
43768: PUSH
43769: LD_INT 0
43771: PUSH
43772: LD_INT 0
43774: PUSH
43775: EMPTY
43776: LIST
43777: LIST
43778: PUSH
43779: LD_INT 0
43781: PUSH
43782: LD_INT 1
43784: NEG
43785: PUSH
43786: EMPTY
43787: LIST
43788: LIST
43789: PUSH
43790: LD_INT 1
43792: PUSH
43793: LD_INT 0
43795: PUSH
43796: EMPTY
43797: LIST
43798: LIST
43799: PUSH
43800: LD_INT 1
43802: PUSH
43803: LD_INT 1
43805: PUSH
43806: EMPTY
43807: LIST
43808: LIST
43809: PUSH
43810: LD_INT 0
43812: PUSH
43813: LD_INT 1
43815: PUSH
43816: EMPTY
43817: LIST
43818: LIST
43819: PUSH
43820: LD_INT 1
43822: NEG
43823: PUSH
43824: LD_INT 0
43826: PUSH
43827: EMPTY
43828: LIST
43829: LIST
43830: PUSH
43831: LD_INT 1
43833: NEG
43834: PUSH
43835: LD_INT 1
43837: NEG
43838: PUSH
43839: EMPTY
43840: LIST
43841: LIST
43842: PUSH
43843: LD_INT 1
43845: NEG
43846: PUSH
43847: LD_INT 2
43849: NEG
43850: PUSH
43851: EMPTY
43852: LIST
43853: LIST
43854: PUSH
43855: LD_INT 0
43857: PUSH
43858: LD_INT 2
43860: NEG
43861: PUSH
43862: EMPTY
43863: LIST
43864: LIST
43865: PUSH
43866: LD_INT 1
43868: PUSH
43869: LD_INT 1
43871: NEG
43872: PUSH
43873: EMPTY
43874: LIST
43875: LIST
43876: PUSH
43877: LD_INT 1
43879: PUSH
43880: LD_INT 2
43882: PUSH
43883: EMPTY
43884: LIST
43885: LIST
43886: PUSH
43887: LD_INT 0
43889: PUSH
43890: LD_INT 2
43892: PUSH
43893: EMPTY
43894: LIST
43895: LIST
43896: PUSH
43897: LD_INT 1
43899: NEG
43900: PUSH
43901: LD_INT 1
43903: PUSH
43904: EMPTY
43905: LIST
43906: LIST
43907: PUSH
43908: LD_INT 1
43910: NEG
43911: PUSH
43912: LD_INT 3
43914: NEG
43915: PUSH
43916: EMPTY
43917: LIST
43918: LIST
43919: PUSH
43920: LD_INT 0
43922: PUSH
43923: LD_INT 3
43925: NEG
43926: PUSH
43927: EMPTY
43928: LIST
43929: LIST
43930: PUSH
43931: LD_INT 1
43933: PUSH
43934: LD_INT 2
43936: NEG
43937: PUSH
43938: EMPTY
43939: LIST
43940: LIST
43941: PUSH
43942: EMPTY
43943: LIST
43944: LIST
43945: LIST
43946: LIST
43947: LIST
43948: LIST
43949: LIST
43950: LIST
43951: LIST
43952: LIST
43953: LIST
43954: LIST
43955: LIST
43956: LIST
43957: LIST
43958: LIST
43959: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43960: LD_ADDR_VAR 0 15
43964: PUSH
43965: LD_INT 0
43967: PUSH
43968: LD_INT 0
43970: PUSH
43971: EMPTY
43972: LIST
43973: LIST
43974: PUSH
43975: LD_INT 0
43977: PUSH
43978: LD_INT 1
43980: NEG
43981: PUSH
43982: EMPTY
43983: LIST
43984: LIST
43985: PUSH
43986: LD_INT 1
43988: PUSH
43989: LD_INT 0
43991: PUSH
43992: EMPTY
43993: LIST
43994: LIST
43995: PUSH
43996: LD_INT 1
43998: PUSH
43999: LD_INT 1
44001: PUSH
44002: EMPTY
44003: LIST
44004: LIST
44005: PUSH
44006: LD_INT 0
44008: PUSH
44009: LD_INT 1
44011: PUSH
44012: EMPTY
44013: LIST
44014: LIST
44015: PUSH
44016: LD_INT 1
44018: NEG
44019: PUSH
44020: LD_INT 0
44022: PUSH
44023: EMPTY
44024: LIST
44025: LIST
44026: PUSH
44027: LD_INT 1
44029: NEG
44030: PUSH
44031: LD_INT 1
44033: NEG
44034: PUSH
44035: EMPTY
44036: LIST
44037: LIST
44038: PUSH
44039: LD_INT 1
44041: PUSH
44042: LD_INT 1
44044: NEG
44045: PUSH
44046: EMPTY
44047: LIST
44048: LIST
44049: PUSH
44050: LD_INT 2
44052: PUSH
44053: LD_INT 0
44055: PUSH
44056: EMPTY
44057: LIST
44058: LIST
44059: PUSH
44060: LD_INT 2
44062: PUSH
44063: LD_INT 1
44065: PUSH
44066: EMPTY
44067: LIST
44068: LIST
44069: PUSH
44070: LD_INT 1
44072: NEG
44073: PUSH
44074: LD_INT 1
44076: PUSH
44077: EMPTY
44078: LIST
44079: LIST
44080: PUSH
44081: LD_INT 2
44083: NEG
44084: PUSH
44085: LD_INT 0
44087: PUSH
44088: EMPTY
44089: LIST
44090: LIST
44091: PUSH
44092: LD_INT 2
44094: NEG
44095: PUSH
44096: LD_INT 1
44098: NEG
44099: PUSH
44100: EMPTY
44101: LIST
44102: LIST
44103: PUSH
44104: LD_INT 2
44106: PUSH
44107: LD_INT 1
44109: NEG
44110: PUSH
44111: EMPTY
44112: LIST
44113: LIST
44114: PUSH
44115: LD_INT 3
44117: PUSH
44118: LD_INT 0
44120: PUSH
44121: EMPTY
44122: LIST
44123: LIST
44124: PUSH
44125: LD_INT 3
44127: PUSH
44128: LD_INT 1
44130: PUSH
44131: EMPTY
44132: LIST
44133: LIST
44134: PUSH
44135: EMPTY
44136: LIST
44137: LIST
44138: LIST
44139: LIST
44140: LIST
44141: LIST
44142: LIST
44143: LIST
44144: LIST
44145: LIST
44146: LIST
44147: LIST
44148: LIST
44149: LIST
44150: LIST
44151: LIST
44152: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44153: LD_ADDR_VAR 0 16
44157: PUSH
44158: LD_INT 0
44160: PUSH
44161: LD_INT 0
44163: PUSH
44164: EMPTY
44165: LIST
44166: LIST
44167: PUSH
44168: LD_INT 0
44170: PUSH
44171: LD_INT 1
44173: NEG
44174: PUSH
44175: EMPTY
44176: LIST
44177: LIST
44178: PUSH
44179: LD_INT 1
44181: PUSH
44182: LD_INT 0
44184: PUSH
44185: EMPTY
44186: LIST
44187: LIST
44188: PUSH
44189: LD_INT 1
44191: PUSH
44192: LD_INT 1
44194: PUSH
44195: EMPTY
44196: LIST
44197: LIST
44198: PUSH
44199: LD_INT 0
44201: PUSH
44202: LD_INT 1
44204: PUSH
44205: EMPTY
44206: LIST
44207: LIST
44208: PUSH
44209: LD_INT 1
44211: NEG
44212: PUSH
44213: LD_INT 0
44215: PUSH
44216: EMPTY
44217: LIST
44218: LIST
44219: PUSH
44220: LD_INT 1
44222: NEG
44223: PUSH
44224: LD_INT 1
44226: NEG
44227: PUSH
44228: EMPTY
44229: LIST
44230: LIST
44231: PUSH
44232: LD_INT 1
44234: NEG
44235: PUSH
44236: LD_INT 2
44238: NEG
44239: PUSH
44240: EMPTY
44241: LIST
44242: LIST
44243: PUSH
44244: LD_INT 2
44246: PUSH
44247: LD_INT 1
44249: PUSH
44250: EMPTY
44251: LIST
44252: LIST
44253: PUSH
44254: LD_INT 2
44256: PUSH
44257: LD_INT 2
44259: PUSH
44260: EMPTY
44261: LIST
44262: LIST
44263: PUSH
44264: LD_INT 1
44266: PUSH
44267: LD_INT 2
44269: PUSH
44270: EMPTY
44271: LIST
44272: LIST
44273: PUSH
44274: LD_INT 2
44276: NEG
44277: PUSH
44278: LD_INT 1
44280: NEG
44281: PUSH
44282: EMPTY
44283: LIST
44284: LIST
44285: PUSH
44286: LD_INT 2
44288: NEG
44289: PUSH
44290: LD_INT 2
44292: NEG
44293: PUSH
44294: EMPTY
44295: LIST
44296: LIST
44297: PUSH
44298: LD_INT 3
44300: PUSH
44301: LD_INT 2
44303: PUSH
44304: EMPTY
44305: LIST
44306: LIST
44307: PUSH
44308: LD_INT 3
44310: PUSH
44311: LD_INT 3
44313: PUSH
44314: EMPTY
44315: LIST
44316: LIST
44317: PUSH
44318: LD_INT 2
44320: PUSH
44321: LD_INT 3
44323: PUSH
44324: EMPTY
44325: LIST
44326: LIST
44327: PUSH
44328: EMPTY
44329: LIST
44330: LIST
44331: LIST
44332: LIST
44333: LIST
44334: LIST
44335: LIST
44336: LIST
44337: LIST
44338: LIST
44339: LIST
44340: LIST
44341: LIST
44342: LIST
44343: LIST
44344: LIST
44345: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44346: LD_ADDR_VAR 0 17
44350: PUSH
44351: LD_INT 0
44353: PUSH
44354: LD_INT 0
44356: PUSH
44357: EMPTY
44358: LIST
44359: LIST
44360: PUSH
44361: LD_INT 0
44363: PUSH
44364: LD_INT 1
44366: NEG
44367: PUSH
44368: EMPTY
44369: LIST
44370: LIST
44371: PUSH
44372: LD_INT 1
44374: PUSH
44375: LD_INT 0
44377: PUSH
44378: EMPTY
44379: LIST
44380: LIST
44381: PUSH
44382: LD_INT 1
44384: PUSH
44385: LD_INT 1
44387: PUSH
44388: EMPTY
44389: LIST
44390: LIST
44391: PUSH
44392: LD_INT 0
44394: PUSH
44395: LD_INT 1
44397: PUSH
44398: EMPTY
44399: LIST
44400: LIST
44401: PUSH
44402: LD_INT 1
44404: NEG
44405: PUSH
44406: LD_INT 0
44408: PUSH
44409: EMPTY
44410: LIST
44411: LIST
44412: PUSH
44413: LD_INT 1
44415: NEG
44416: PUSH
44417: LD_INT 1
44419: NEG
44420: PUSH
44421: EMPTY
44422: LIST
44423: LIST
44424: PUSH
44425: LD_INT 1
44427: NEG
44428: PUSH
44429: LD_INT 2
44431: NEG
44432: PUSH
44433: EMPTY
44434: LIST
44435: LIST
44436: PUSH
44437: LD_INT 0
44439: PUSH
44440: LD_INT 2
44442: NEG
44443: PUSH
44444: EMPTY
44445: LIST
44446: LIST
44447: PUSH
44448: LD_INT 1
44450: PUSH
44451: LD_INT 1
44453: NEG
44454: PUSH
44455: EMPTY
44456: LIST
44457: LIST
44458: PUSH
44459: LD_INT 2
44461: PUSH
44462: LD_INT 0
44464: PUSH
44465: EMPTY
44466: LIST
44467: LIST
44468: PUSH
44469: LD_INT 2
44471: PUSH
44472: LD_INT 1
44474: PUSH
44475: EMPTY
44476: LIST
44477: LIST
44478: PUSH
44479: LD_INT 2
44481: PUSH
44482: LD_INT 2
44484: PUSH
44485: EMPTY
44486: LIST
44487: LIST
44488: PUSH
44489: LD_INT 1
44491: PUSH
44492: LD_INT 2
44494: PUSH
44495: EMPTY
44496: LIST
44497: LIST
44498: PUSH
44499: LD_INT 0
44501: PUSH
44502: LD_INT 2
44504: PUSH
44505: EMPTY
44506: LIST
44507: LIST
44508: PUSH
44509: LD_INT 1
44511: NEG
44512: PUSH
44513: LD_INT 1
44515: PUSH
44516: EMPTY
44517: LIST
44518: LIST
44519: PUSH
44520: LD_INT 2
44522: NEG
44523: PUSH
44524: LD_INT 0
44526: PUSH
44527: EMPTY
44528: LIST
44529: LIST
44530: PUSH
44531: LD_INT 2
44533: NEG
44534: PUSH
44535: LD_INT 1
44537: NEG
44538: PUSH
44539: EMPTY
44540: LIST
44541: LIST
44542: PUSH
44543: LD_INT 2
44545: NEG
44546: PUSH
44547: LD_INT 2
44549: NEG
44550: PUSH
44551: EMPTY
44552: LIST
44553: LIST
44554: PUSH
44555: EMPTY
44556: LIST
44557: LIST
44558: LIST
44559: LIST
44560: LIST
44561: LIST
44562: LIST
44563: LIST
44564: LIST
44565: LIST
44566: LIST
44567: LIST
44568: LIST
44569: LIST
44570: LIST
44571: LIST
44572: LIST
44573: LIST
44574: LIST
44575: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44576: LD_ADDR_VAR 0 18
44580: PUSH
44581: LD_INT 0
44583: PUSH
44584: LD_INT 0
44586: PUSH
44587: EMPTY
44588: LIST
44589: LIST
44590: PUSH
44591: LD_INT 0
44593: PUSH
44594: LD_INT 1
44596: NEG
44597: PUSH
44598: EMPTY
44599: LIST
44600: LIST
44601: PUSH
44602: LD_INT 1
44604: PUSH
44605: LD_INT 0
44607: PUSH
44608: EMPTY
44609: LIST
44610: LIST
44611: PUSH
44612: LD_INT 1
44614: PUSH
44615: LD_INT 1
44617: PUSH
44618: EMPTY
44619: LIST
44620: LIST
44621: PUSH
44622: LD_INT 0
44624: PUSH
44625: LD_INT 1
44627: PUSH
44628: EMPTY
44629: LIST
44630: LIST
44631: PUSH
44632: LD_INT 1
44634: NEG
44635: PUSH
44636: LD_INT 0
44638: PUSH
44639: EMPTY
44640: LIST
44641: LIST
44642: PUSH
44643: LD_INT 1
44645: NEG
44646: PUSH
44647: LD_INT 1
44649: NEG
44650: PUSH
44651: EMPTY
44652: LIST
44653: LIST
44654: PUSH
44655: LD_INT 1
44657: NEG
44658: PUSH
44659: LD_INT 2
44661: NEG
44662: PUSH
44663: EMPTY
44664: LIST
44665: LIST
44666: PUSH
44667: LD_INT 0
44669: PUSH
44670: LD_INT 2
44672: NEG
44673: PUSH
44674: EMPTY
44675: LIST
44676: LIST
44677: PUSH
44678: LD_INT 1
44680: PUSH
44681: LD_INT 1
44683: NEG
44684: PUSH
44685: EMPTY
44686: LIST
44687: LIST
44688: PUSH
44689: LD_INT 2
44691: PUSH
44692: LD_INT 0
44694: PUSH
44695: EMPTY
44696: LIST
44697: LIST
44698: PUSH
44699: LD_INT 2
44701: PUSH
44702: LD_INT 1
44704: PUSH
44705: EMPTY
44706: LIST
44707: LIST
44708: PUSH
44709: LD_INT 2
44711: PUSH
44712: LD_INT 2
44714: PUSH
44715: EMPTY
44716: LIST
44717: LIST
44718: PUSH
44719: LD_INT 1
44721: PUSH
44722: LD_INT 2
44724: PUSH
44725: EMPTY
44726: LIST
44727: LIST
44728: PUSH
44729: LD_INT 0
44731: PUSH
44732: LD_INT 2
44734: PUSH
44735: EMPTY
44736: LIST
44737: LIST
44738: PUSH
44739: LD_INT 1
44741: NEG
44742: PUSH
44743: LD_INT 1
44745: PUSH
44746: EMPTY
44747: LIST
44748: LIST
44749: PUSH
44750: LD_INT 2
44752: NEG
44753: PUSH
44754: LD_INT 0
44756: PUSH
44757: EMPTY
44758: LIST
44759: LIST
44760: PUSH
44761: LD_INT 2
44763: NEG
44764: PUSH
44765: LD_INT 1
44767: NEG
44768: PUSH
44769: EMPTY
44770: LIST
44771: LIST
44772: PUSH
44773: LD_INT 2
44775: NEG
44776: PUSH
44777: LD_INT 2
44779: NEG
44780: PUSH
44781: EMPTY
44782: LIST
44783: LIST
44784: PUSH
44785: EMPTY
44786: LIST
44787: LIST
44788: LIST
44789: LIST
44790: LIST
44791: LIST
44792: LIST
44793: LIST
44794: LIST
44795: LIST
44796: LIST
44797: LIST
44798: LIST
44799: LIST
44800: LIST
44801: LIST
44802: LIST
44803: LIST
44804: LIST
44805: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44806: LD_ADDR_VAR 0 19
44810: PUSH
44811: LD_INT 0
44813: PUSH
44814: LD_INT 0
44816: PUSH
44817: EMPTY
44818: LIST
44819: LIST
44820: PUSH
44821: LD_INT 0
44823: PUSH
44824: LD_INT 1
44826: NEG
44827: PUSH
44828: EMPTY
44829: LIST
44830: LIST
44831: PUSH
44832: LD_INT 1
44834: PUSH
44835: LD_INT 0
44837: PUSH
44838: EMPTY
44839: LIST
44840: LIST
44841: PUSH
44842: LD_INT 1
44844: PUSH
44845: LD_INT 1
44847: PUSH
44848: EMPTY
44849: LIST
44850: LIST
44851: PUSH
44852: LD_INT 0
44854: PUSH
44855: LD_INT 1
44857: PUSH
44858: EMPTY
44859: LIST
44860: LIST
44861: PUSH
44862: LD_INT 1
44864: NEG
44865: PUSH
44866: LD_INT 0
44868: PUSH
44869: EMPTY
44870: LIST
44871: LIST
44872: PUSH
44873: LD_INT 1
44875: NEG
44876: PUSH
44877: LD_INT 1
44879: NEG
44880: PUSH
44881: EMPTY
44882: LIST
44883: LIST
44884: PUSH
44885: LD_INT 1
44887: NEG
44888: PUSH
44889: LD_INT 2
44891: NEG
44892: PUSH
44893: EMPTY
44894: LIST
44895: LIST
44896: PUSH
44897: LD_INT 0
44899: PUSH
44900: LD_INT 2
44902: NEG
44903: PUSH
44904: EMPTY
44905: LIST
44906: LIST
44907: PUSH
44908: LD_INT 1
44910: PUSH
44911: LD_INT 1
44913: NEG
44914: PUSH
44915: EMPTY
44916: LIST
44917: LIST
44918: PUSH
44919: LD_INT 2
44921: PUSH
44922: LD_INT 0
44924: PUSH
44925: EMPTY
44926: LIST
44927: LIST
44928: PUSH
44929: LD_INT 2
44931: PUSH
44932: LD_INT 1
44934: PUSH
44935: EMPTY
44936: LIST
44937: LIST
44938: PUSH
44939: LD_INT 2
44941: PUSH
44942: LD_INT 2
44944: PUSH
44945: EMPTY
44946: LIST
44947: LIST
44948: PUSH
44949: LD_INT 1
44951: PUSH
44952: LD_INT 2
44954: PUSH
44955: EMPTY
44956: LIST
44957: LIST
44958: PUSH
44959: LD_INT 0
44961: PUSH
44962: LD_INT 2
44964: PUSH
44965: EMPTY
44966: LIST
44967: LIST
44968: PUSH
44969: LD_INT 1
44971: NEG
44972: PUSH
44973: LD_INT 1
44975: PUSH
44976: EMPTY
44977: LIST
44978: LIST
44979: PUSH
44980: LD_INT 2
44982: NEG
44983: PUSH
44984: LD_INT 0
44986: PUSH
44987: EMPTY
44988: LIST
44989: LIST
44990: PUSH
44991: LD_INT 2
44993: NEG
44994: PUSH
44995: LD_INT 1
44997: NEG
44998: PUSH
44999: EMPTY
45000: LIST
45001: LIST
45002: PUSH
45003: LD_INT 2
45005: NEG
45006: PUSH
45007: LD_INT 2
45009: NEG
45010: PUSH
45011: EMPTY
45012: LIST
45013: LIST
45014: PUSH
45015: EMPTY
45016: LIST
45017: LIST
45018: LIST
45019: LIST
45020: LIST
45021: LIST
45022: LIST
45023: LIST
45024: LIST
45025: LIST
45026: LIST
45027: LIST
45028: LIST
45029: LIST
45030: LIST
45031: LIST
45032: LIST
45033: LIST
45034: LIST
45035: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45036: LD_ADDR_VAR 0 20
45040: PUSH
45041: LD_INT 0
45043: PUSH
45044: LD_INT 0
45046: PUSH
45047: EMPTY
45048: LIST
45049: LIST
45050: PUSH
45051: LD_INT 0
45053: PUSH
45054: LD_INT 1
45056: NEG
45057: PUSH
45058: EMPTY
45059: LIST
45060: LIST
45061: PUSH
45062: LD_INT 1
45064: PUSH
45065: LD_INT 0
45067: PUSH
45068: EMPTY
45069: LIST
45070: LIST
45071: PUSH
45072: LD_INT 1
45074: PUSH
45075: LD_INT 1
45077: PUSH
45078: EMPTY
45079: LIST
45080: LIST
45081: PUSH
45082: LD_INT 0
45084: PUSH
45085: LD_INT 1
45087: PUSH
45088: EMPTY
45089: LIST
45090: LIST
45091: PUSH
45092: LD_INT 1
45094: NEG
45095: PUSH
45096: LD_INT 0
45098: PUSH
45099: EMPTY
45100: LIST
45101: LIST
45102: PUSH
45103: LD_INT 1
45105: NEG
45106: PUSH
45107: LD_INT 1
45109: NEG
45110: PUSH
45111: EMPTY
45112: LIST
45113: LIST
45114: PUSH
45115: LD_INT 1
45117: NEG
45118: PUSH
45119: LD_INT 2
45121: NEG
45122: PUSH
45123: EMPTY
45124: LIST
45125: LIST
45126: PUSH
45127: LD_INT 0
45129: PUSH
45130: LD_INT 2
45132: NEG
45133: PUSH
45134: EMPTY
45135: LIST
45136: LIST
45137: PUSH
45138: LD_INT 1
45140: PUSH
45141: LD_INT 1
45143: NEG
45144: PUSH
45145: EMPTY
45146: LIST
45147: LIST
45148: PUSH
45149: LD_INT 2
45151: PUSH
45152: LD_INT 0
45154: PUSH
45155: EMPTY
45156: LIST
45157: LIST
45158: PUSH
45159: LD_INT 2
45161: PUSH
45162: LD_INT 1
45164: PUSH
45165: EMPTY
45166: LIST
45167: LIST
45168: PUSH
45169: LD_INT 2
45171: PUSH
45172: LD_INT 2
45174: PUSH
45175: EMPTY
45176: LIST
45177: LIST
45178: PUSH
45179: LD_INT 1
45181: PUSH
45182: LD_INT 2
45184: PUSH
45185: EMPTY
45186: LIST
45187: LIST
45188: PUSH
45189: LD_INT 0
45191: PUSH
45192: LD_INT 2
45194: PUSH
45195: EMPTY
45196: LIST
45197: LIST
45198: PUSH
45199: LD_INT 1
45201: NEG
45202: PUSH
45203: LD_INT 1
45205: PUSH
45206: EMPTY
45207: LIST
45208: LIST
45209: PUSH
45210: LD_INT 2
45212: NEG
45213: PUSH
45214: LD_INT 0
45216: PUSH
45217: EMPTY
45218: LIST
45219: LIST
45220: PUSH
45221: LD_INT 2
45223: NEG
45224: PUSH
45225: LD_INT 1
45227: NEG
45228: PUSH
45229: EMPTY
45230: LIST
45231: LIST
45232: PUSH
45233: LD_INT 2
45235: NEG
45236: PUSH
45237: LD_INT 2
45239: NEG
45240: PUSH
45241: EMPTY
45242: LIST
45243: LIST
45244: PUSH
45245: EMPTY
45246: LIST
45247: LIST
45248: LIST
45249: LIST
45250: LIST
45251: LIST
45252: LIST
45253: LIST
45254: LIST
45255: LIST
45256: LIST
45257: LIST
45258: LIST
45259: LIST
45260: LIST
45261: LIST
45262: LIST
45263: LIST
45264: LIST
45265: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45266: LD_ADDR_VAR 0 21
45270: PUSH
45271: LD_INT 0
45273: PUSH
45274: LD_INT 0
45276: PUSH
45277: EMPTY
45278: LIST
45279: LIST
45280: PUSH
45281: LD_INT 0
45283: PUSH
45284: LD_INT 1
45286: NEG
45287: PUSH
45288: EMPTY
45289: LIST
45290: LIST
45291: PUSH
45292: LD_INT 1
45294: PUSH
45295: LD_INT 0
45297: PUSH
45298: EMPTY
45299: LIST
45300: LIST
45301: PUSH
45302: LD_INT 1
45304: PUSH
45305: LD_INT 1
45307: PUSH
45308: EMPTY
45309: LIST
45310: LIST
45311: PUSH
45312: LD_INT 0
45314: PUSH
45315: LD_INT 1
45317: PUSH
45318: EMPTY
45319: LIST
45320: LIST
45321: PUSH
45322: LD_INT 1
45324: NEG
45325: PUSH
45326: LD_INT 0
45328: PUSH
45329: EMPTY
45330: LIST
45331: LIST
45332: PUSH
45333: LD_INT 1
45335: NEG
45336: PUSH
45337: LD_INT 1
45339: NEG
45340: PUSH
45341: EMPTY
45342: LIST
45343: LIST
45344: PUSH
45345: LD_INT 1
45347: NEG
45348: PUSH
45349: LD_INT 2
45351: NEG
45352: PUSH
45353: EMPTY
45354: LIST
45355: LIST
45356: PUSH
45357: LD_INT 0
45359: PUSH
45360: LD_INT 2
45362: NEG
45363: PUSH
45364: EMPTY
45365: LIST
45366: LIST
45367: PUSH
45368: LD_INT 1
45370: PUSH
45371: LD_INT 1
45373: NEG
45374: PUSH
45375: EMPTY
45376: LIST
45377: LIST
45378: PUSH
45379: LD_INT 2
45381: PUSH
45382: LD_INT 0
45384: PUSH
45385: EMPTY
45386: LIST
45387: LIST
45388: PUSH
45389: LD_INT 2
45391: PUSH
45392: LD_INT 1
45394: PUSH
45395: EMPTY
45396: LIST
45397: LIST
45398: PUSH
45399: LD_INT 2
45401: PUSH
45402: LD_INT 2
45404: PUSH
45405: EMPTY
45406: LIST
45407: LIST
45408: PUSH
45409: LD_INT 1
45411: PUSH
45412: LD_INT 2
45414: PUSH
45415: EMPTY
45416: LIST
45417: LIST
45418: PUSH
45419: LD_INT 0
45421: PUSH
45422: LD_INT 2
45424: PUSH
45425: EMPTY
45426: LIST
45427: LIST
45428: PUSH
45429: LD_INT 1
45431: NEG
45432: PUSH
45433: LD_INT 1
45435: PUSH
45436: EMPTY
45437: LIST
45438: LIST
45439: PUSH
45440: LD_INT 2
45442: NEG
45443: PUSH
45444: LD_INT 0
45446: PUSH
45447: EMPTY
45448: LIST
45449: LIST
45450: PUSH
45451: LD_INT 2
45453: NEG
45454: PUSH
45455: LD_INT 1
45457: NEG
45458: PUSH
45459: EMPTY
45460: LIST
45461: LIST
45462: PUSH
45463: LD_INT 2
45465: NEG
45466: PUSH
45467: LD_INT 2
45469: NEG
45470: PUSH
45471: EMPTY
45472: LIST
45473: LIST
45474: PUSH
45475: EMPTY
45476: LIST
45477: LIST
45478: LIST
45479: LIST
45480: LIST
45481: LIST
45482: LIST
45483: LIST
45484: LIST
45485: LIST
45486: LIST
45487: LIST
45488: LIST
45489: LIST
45490: LIST
45491: LIST
45492: LIST
45493: LIST
45494: LIST
45495: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45496: LD_ADDR_VAR 0 22
45500: PUSH
45501: LD_INT 0
45503: PUSH
45504: LD_INT 0
45506: PUSH
45507: EMPTY
45508: LIST
45509: LIST
45510: PUSH
45511: LD_INT 0
45513: PUSH
45514: LD_INT 1
45516: NEG
45517: PUSH
45518: EMPTY
45519: LIST
45520: LIST
45521: PUSH
45522: LD_INT 1
45524: PUSH
45525: LD_INT 0
45527: PUSH
45528: EMPTY
45529: LIST
45530: LIST
45531: PUSH
45532: LD_INT 1
45534: PUSH
45535: LD_INT 1
45537: PUSH
45538: EMPTY
45539: LIST
45540: LIST
45541: PUSH
45542: LD_INT 0
45544: PUSH
45545: LD_INT 1
45547: PUSH
45548: EMPTY
45549: LIST
45550: LIST
45551: PUSH
45552: LD_INT 1
45554: NEG
45555: PUSH
45556: LD_INT 0
45558: PUSH
45559: EMPTY
45560: LIST
45561: LIST
45562: PUSH
45563: LD_INT 1
45565: NEG
45566: PUSH
45567: LD_INT 1
45569: NEG
45570: PUSH
45571: EMPTY
45572: LIST
45573: LIST
45574: PUSH
45575: LD_INT 1
45577: NEG
45578: PUSH
45579: LD_INT 2
45581: NEG
45582: PUSH
45583: EMPTY
45584: LIST
45585: LIST
45586: PUSH
45587: LD_INT 0
45589: PUSH
45590: LD_INT 2
45592: NEG
45593: PUSH
45594: EMPTY
45595: LIST
45596: LIST
45597: PUSH
45598: LD_INT 1
45600: PUSH
45601: LD_INT 1
45603: NEG
45604: PUSH
45605: EMPTY
45606: LIST
45607: LIST
45608: PUSH
45609: LD_INT 2
45611: PUSH
45612: LD_INT 0
45614: PUSH
45615: EMPTY
45616: LIST
45617: LIST
45618: PUSH
45619: LD_INT 2
45621: PUSH
45622: LD_INT 1
45624: PUSH
45625: EMPTY
45626: LIST
45627: LIST
45628: PUSH
45629: LD_INT 2
45631: PUSH
45632: LD_INT 2
45634: PUSH
45635: EMPTY
45636: LIST
45637: LIST
45638: PUSH
45639: LD_INT 1
45641: PUSH
45642: LD_INT 2
45644: PUSH
45645: EMPTY
45646: LIST
45647: LIST
45648: PUSH
45649: LD_INT 0
45651: PUSH
45652: LD_INT 2
45654: PUSH
45655: EMPTY
45656: LIST
45657: LIST
45658: PUSH
45659: LD_INT 1
45661: NEG
45662: PUSH
45663: LD_INT 1
45665: PUSH
45666: EMPTY
45667: LIST
45668: LIST
45669: PUSH
45670: LD_INT 2
45672: NEG
45673: PUSH
45674: LD_INT 0
45676: PUSH
45677: EMPTY
45678: LIST
45679: LIST
45680: PUSH
45681: LD_INT 2
45683: NEG
45684: PUSH
45685: LD_INT 1
45687: NEG
45688: PUSH
45689: EMPTY
45690: LIST
45691: LIST
45692: PUSH
45693: LD_INT 2
45695: NEG
45696: PUSH
45697: LD_INT 2
45699: NEG
45700: PUSH
45701: EMPTY
45702: LIST
45703: LIST
45704: PUSH
45705: EMPTY
45706: LIST
45707: LIST
45708: LIST
45709: LIST
45710: LIST
45711: LIST
45712: LIST
45713: LIST
45714: LIST
45715: LIST
45716: LIST
45717: LIST
45718: LIST
45719: LIST
45720: LIST
45721: LIST
45722: LIST
45723: LIST
45724: LIST
45725: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
45726: LD_ADDR_VAR 0 23
45730: PUSH
45731: LD_INT 0
45733: PUSH
45734: LD_INT 0
45736: PUSH
45737: EMPTY
45738: LIST
45739: LIST
45740: PUSH
45741: LD_INT 0
45743: PUSH
45744: LD_INT 1
45746: NEG
45747: PUSH
45748: EMPTY
45749: LIST
45750: LIST
45751: PUSH
45752: LD_INT 1
45754: PUSH
45755: LD_INT 0
45757: PUSH
45758: EMPTY
45759: LIST
45760: LIST
45761: PUSH
45762: LD_INT 1
45764: PUSH
45765: LD_INT 1
45767: PUSH
45768: EMPTY
45769: LIST
45770: LIST
45771: PUSH
45772: LD_INT 0
45774: PUSH
45775: LD_INT 1
45777: PUSH
45778: EMPTY
45779: LIST
45780: LIST
45781: PUSH
45782: LD_INT 1
45784: NEG
45785: PUSH
45786: LD_INT 0
45788: PUSH
45789: EMPTY
45790: LIST
45791: LIST
45792: PUSH
45793: LD_INT 1
45795: NEG
45796: PUSH
45797: LD_INT 1
45799: NEG
45800: PUSH
45801: EMPTY
45802: LIST
45803: LIST
45804: PUSH
45805: LD_INT 1
45807: NEG
45808: PUSH
45809: LD_INT 2
45811: NEG
45812: PUSH
45813: EMPTY
45814: LIST
45815: LIST
45816: PUSH
45817: LD_INT 0
45819: PUSH
45820: LD_INT 2
45822: NEG
45823: PUSH
45824: EMPTY
45825: LIST
45826: LIST
45827: PUSH
45828: LD_INT 1
45830: PUSH
45831: LD_INT 1
45833: NEG
45834: PUSH
45835: EMPTY
45836: LIST
45837: LIST
45838: PUSH
45839: LD_INT 2
45841: PUSH
45842: LD_INT 0
45844: PUSH
45845: EMPTY
45846: LIST
45847: LIST
45848: PUSH
45849: LD_INT 2
45851: PUSH
45852: LD_INT 1
45854: PUSH
45855: EMPTY
45856: LIST
45857: LIST
45858: PUSH
45859: LD_INT 2
45861: PUSH
45862: LD_INT 2
45864: PUSH
45865: EMPTY
45866: LIST
45867: LIST
45868: PUSH
45869: LD_INT 1
45871: PUSH
45872: LD_INT 2
45874: PUSH
45875: EMPTY
45876: LIST
45877: LIST
45878: PUSH
45879: LD_INT 0
45881: PUSH
45882: LD_INT 2
45884: PUSH
45885: EMPTY
45886: LIST
45887: LIST
45888: PUSH
45889: LD_INT 1
45891: NEG
45892: PUSH
45893: LD_INT 1
45895: PUSH
45896: EMPTY
45897: LIST
45898: LIST
45899: PUSH
45900: LD_INT 2
45902: NEG
45903: PUSH
45904: LD_INT 0
45906: PUSH
45907: EMPTY
45908: LIST
45909: LIST
45910: PUSH
45911: LD_INT 2
45913: NEG
45914: PUSH
45915: LD_INT 1
45917: NEG
45918: PUSH
45919: EMPTY
45920: LIST
45921: LIST
45922: PUSH
45923: LD_INT 2
45925: NEG
45926: PUSH
45927: LD_INT 2
45929: NEG
45930: PUSH
45931: EMPTY
45932: LIST
45933: LIST
45934: PUSH
45935: LD_INT 2
45937: NEG
45938: PUSH
45939: LD_INT 3
45941: NEG
45942: PUSH
45943: EMPTY
45944: LIST
45945: LIST
45946: PUSH
45947: LD_INT 1
45949: NEG
45950: PUSH
45951: LD_INT 3
45953: NEG
45954: PUSH
45955: EMPTY
45956: LIST
45957: LIST
45958: PUSH
45959: LD_INT 1
45961: PUSH
45962: LD_INT 2
45964: NEG
45965: PUSH
45966: EMPTY
45967: LIST
45968: LIST
45969: PUSH
45970: LD_INT 2
45972: PUSH
45973: LD_INT 1
45975: NEG
45976: PUSH
45977: EMPTY
45978: LIST
45979: LIST
45980: PUSH
45981: EMPTY
45982: LIST
45983: LIST
45984: LIST
45985: LIST
45986: LIST
45987: LIST
45988: LIST
45989: LIST
45990: LIST
45991: LIST
45992: LIST
45993: LIST
45994: LIST
45995: LIST
45996: LIST
45997: LIST
45998: LIST
45999: LIST
46000: LIST
46001: LIST
46002: LIST
46003: LIST
46004: LIST
46005: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
46006: LD_ADDR_VAR 0 24
46010: PUSH
46011: LD_INT 0
46013: PUSH
46014: LD_INT 0
46016: PUSH
46017: EMPTY
46018: LIST
46019: LIST
46020: PUSH
46021: LD_INT 0
46023: PUSH
46024: LD_INT 1
46026: NEG
46027: PUSH
46028: EMPTY
46029: LIST
46030: LIST
46031: PUSH
46032: LD_INT 1
46034: PUSH
46035: LD_INT 0
46037: PUSH
46038: EMPTY
46039: LIST
46040: LIST
46041: PUSH
46042: LD_INT 1
46044: PUSH
46045: LD_INT 1
46047: PUSH
46048: EMPTY
46049: LIST
46050: LIST
46051: PUSH
46052: LD_INT 0
46054: PUSH
46055: LD_INT 1
46057: PUSH
46058: EMPTY
46059: LIST
46060: LIST
46061: PUSH
46062: LD_INT 1
46064: NEG
46065: PUSH
46066: LD_INT 0
46068: PUSH
46069: EMPTY
46070: LIST
46071: LIST
46072: PUSH
46073: LD_INT 1
46075: NEG
46076: PUSH
46077: LD_INT 1
46079: NEG
46080: PUSH
46081: EMPTY
46082: LIST
46083: LIST
46084: PUSH
46085: LD_INT 1
46087: NEG
46088: PUSH
46089: LD_INT 2
46091: NEG
46092: PUSH
46093: EMPTY
46094: LIST
46095: LIST
46096: PUSH
46097: LD_INT 0
46099: PUSH
46100: LD_INT 2
46102: NEG
46103: PUSH
46104: EMPTY
46105: LIST
46106: LIST
46107: PUSH
46108: LD_INT 1
46110: PUSH
46111: LD_INT 1
46113: NEG
46114: PUSH
46115: EMPTY
46116: LIST
46117: LIST
46118: PUSH
46119: LD_INT 2
46121: PUSH
46122: LD_INT 0
46124: PUSH
46125: EMPTY
46126: LIST
46127: LIST
46128: PUSH
46129: LD_INT 2
46131: PUSH
46132: LD_INT 1
46134: PUSH
46135: EMPTY
46136: LIST
46137: LIST
46138: PUSH
46139: LD_INT 2
46141: PUSH
46142: LD_INT 2
46144: PUSH
46145: EMPTY
46146: LIST
46147: LIST
46148: PUSH
46149: LD_INT 1
46151: PUSH
46152: LD_INT 2
46154: PUSH
46155: EMPTY
46156: LIST
46157: LIST
46158: PUSH
46159: LD_INT 0
46161: PUSH
46162: LD_INT 2
46164: PUSH
46165: EMPTY
46166: LIST
46167: LIST
46168: PUSH
46169: LD_INT 1
46171: NEG
46172: PUSH
46173: LD_INT 1
46175: PUSH
46176: EMPTY
46177: LIST
46178: LIST
46179: PUSH
46180: LD_INT 2
46182: NEG
46183: PUSH
46184: LD_INT 0
46186: PUSH
46187: EMPTY
46188: LIST
46189: LIST
46190: PUSH
46191: LD_INT 2
46193: NEG
46194: PUSH
46195: LD_INT 1
46197: NEG
46198: PUSH
46199: EMPTY
46200: LIST
46201: LIST
46202: PUSH
46203: LD_INT 2
46205: NEG
46206: PUSH
46207: LD_INT 2
46209: NEG
46210: PUSH
46211: EMPTY
46212: LIST
46213: LIST
46214: PUSH
46215: LD_INT 1
46217: PUSH
46218: LD_INT 2
46220: NEG
46221: PUSH
46222: EMPTY
46223: LIST
46224: LIST
46225: PUSH
46226: LD_INT 2
46228: PUSH
46229: LD_INT 1
46231: NEG
46232: PUSH
46233: EMPTY
46234: LIST
46235: LIST
46236: PUSH
46237: LD_INT 3
46239: PUSH
46240: LD_INT 1
46242: PUSH
46243: EMPTY
46244: LIST
46245: LIST
46246: PUSH
46247: LD_INT 3
46249: PUSH
46250: LD_INT 2
46252: PUSH
46253: EMPTY
46254: LIST
46255: LIST
46256: PUSH
46257: EMPTY
46258: LIST
46259: LIST
46260: LIST
46261: LIST
46262: LIST
46263: LIST
46264: LIST
46265: LIST
46266: LIST
46267: LIST
46268: LIST
46269: LIST
46270: LIST
46271: LIST
46272: LIST
46273: LIST
46274: LIST
46275: LIST
46276: LIST
46277: LIST
46278: LIST
46279: LIST
46280: LIST
46281: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
46282: LD_ADDR_VAR 0 25
46286: PUSH
46287: LD_INT 0
46289: PUSH
46290: LD_INT 0
46292: PUSH
46293: EMPTY
46294: LIST
46295: LIST
46296: PUSH
46297: LD_INT 0
46299: PUSH
46300: LD_INT 1
46302: NEG
46303: PUSH
46304: EMPTY
46305: LIST
46306: LIST
46307: PUSH
46308: LD_INT 1
46310: PUSH
46311: LD_INT 0
46313: PUSH
46314: EMPTY
46315: LIST
46316: LIST
46317: PUSH
46318: LD_INT 1
46320: PUSH
46321: LD_INT 1
46323: PUSH
46324: EMPTY
46325: LIST
46326: LIST
46327: PUSH
46328: LD_INT 0
46330: PUSH
46331: LD_INT 1
46333: PUSH
46334: EMPTY
46335: LIST
46336: LIST
46337: PUSH
46338: LD_INT 1
46340: NEG
46341: PUSH
46342: LD_INT 0
46344: PUSH
46345: EMPTY
46346: LIST
46347: LIST
46348: PUSH
46349: LD_INT 1
46351: NEG
46352: PUSH
46353: LD_INT 1
46355: NEG
46356: PUSH
46357: EMPTY
46358: LIST
46359: LIST
46360: PUSH
46361: LD_INT 1
46363: NEG
46364: PUSH
46365: LD_INT 2
46367: NEG
46368: PUSH
46369: EMPTY
46370: LIST
46371: LIST
46372: PUSH
46373: LD_INT 0
46375: PUSH
46376: LD_INT 2
46378: NEG
46379: PUSH
46380: EMPTY
46381: LIST
46382: LIST
46383: PUSH
46384: LD_INT 1
46386: PUSH
46387: LD_INT 1
46389: NEG
46390: PUSH
46391: EMPTY
46392: LIST
46393: LIST
46394: PUSH
46395: LD_INT 2
46397: PUSH
46398: LD_INT 0
46400: PUSH
46401: EMPTY
46402: LIST
46403: LIST
46404: PUSH
46405: LD_INT 2
46407: PUSH
46408: LD_INT 1
46410: PUSH
46411: EMPTY
46412: LIST
46413: LIST
46414: PUSH
46415: LD_INT 2
46417: PUSH
46418: LD_INT 2
46420: PUSH
46421: EMPTY
46422: LIST
46423: LIST
46424: PUSH
46425: LD_INT 1
46427: PUSH
46428: LD_INT 2
46430: PUSH
46431: EMPTY
46432: LIST
46433: LIST
46434: PUSH
46435: LD_INT 0
46437: PUSH
46438: LD_INT 2
46440: PUSH
46441: EMPTY
46442: LIST
46443: LIST
46444: PUSH
46445: LD_INT 1
46447: NEG
46448: PUSH
46449: LD_INT 1
46451: PUSH
46452: EMPTY
46453: LIST
46454: LIST
46455: PUSH
46456: LD_INT 2
46458: NEG
46459: PUSH
46460: LD_INT 0
46462: PUSH
46463: EMPTY
46464: LIST
46465: LIST
46466: PUSH
46467: LD_INT 2
46469: NEG
46470: PUSH
46471: LD_INT 1
46473: NEG
46474: PUSH
46475: EMPTY
46476: LIST
46477: LIST
46478: PUSH
46479: LD_INT 2
46481: NEG
46482: PUSH
46483: LD_INT 2
46485: NEG
46486: PUSH
46487: EMPTY
46488: LIST
46489: LIST
46490: PUSH
46491: LD_INT 3
46493: PUSH
46494: LD_INT 1
46496: PUSH
46497: EMPTY
46498: LIST
46499: LIST
46500: PUSH
46501: LD_INT 3
46503: PUSH
46504: LD_INT 2
46506: PUSH
46507: EMPTY
46508: LIST
46509: LIST
46510: PUSH
46511: LD_INT 2
46513: PUSH
46514: LD_INT 3
46516: PUSH
46517: EMPTY
46518: LIST
46519: LIST
46520: PUSH
46521: LD_INT 1
46523: PUSH
46524: LD_INT 3
46526: PUSH
46527: EMPTY
46528: LIST
46529: LIST
46530: PUSH
46531: EMPTY
46532: LIST
46533: LIST
46534: LIST
46535: LIST
46536: LIST
46537: LIST
46538: LIST
46539: LIST
46540: LIST
46541: LIST
46542: LIST
46543: LIST
46544: LIST
46545: LIST
46546: LIST
46547: LIST
46548: LIST
46549: LIST
46550: LIST
46551: LIST
46552: LIST
46553: LIST
46554: LIST
46555: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
46556: LD_ADDR_VAR 0 26
46560: PUSH
46561: LD_INT 0
46563: PUSH
46564: LD_INT 0
46566: PUSH
46567: EMPTY
46568: LIST
46569: LIST
46570: PUSH
46571: LD_INT 0
46573: PUSH
46574: LD_INT 1
46576: NEG
46577: PUSH
46578: EMPTY
46579: LIST
46580: LIST
46581: PUSH
46582: LD_INT 1
46584: PUSH
46585: LD_INT 0
46587: PUSH
46588: EMPTY
46589: LIST
46590: LIST
46591: PUSH
46592: LD_INT 1
46594: PUSH
46595: LD_INT 1
46597: PUSH
46598: EMPTY
46599: LIST
46600: LIST
46601: PUSH
46602: LD_INT 0
46604: PUSH
46605: LD_INT 1
46607: PUSH
46608: EMPTY
46609: LIST
46610: LIST
46611: PUSH
46612: LD_INT 1
46614: NEG
46615: PUSH
46616: LD_INT 0
46618: PUSH
46619: EMPTY
46620: LIST
46621: LIST
46622: PUSH
46623: LD_INT 1
46625: NEG
46626: PUSH
46627: LD_INT 1
46629: NEG
46630: PUSH
46631: EMPTY
46632: LIST
46633: LIST
46634: PUSH
46635: LD_INT 1
46637: NEG
46638: PUSH
46639: LD_INT 2
46641: NEG
46642: PUSH
46643: EMPTY
46644: LIST
46645: LIST
46646: PUSH
46647: LD_INT 0
46649: PUSH
46650: LD_INT 2
46652: NEG
46653: PUSH
46654: EMPTY
46655: LIST
46656: LIST
46657: PUSH
46658: LD_INT 1
46660: PUSH
46661: LD_INT 1
46663: NEG
46664: PUSH
46665: EMPTY
46666: LIST
46667: LIST
46668: PUSH
46669: LD_INT 2
46671: PUSH
46672: LD_INT 0
46674: PUSH
46675: EMPTY
46676: LIST
46677: LIST
46678: PUSH
46679: LD_INT 2
46681: PUSH
46682: LD_INT 1
46684: PUSH
46685: EMPTY
46686: LIST
46687: LIST
46688: PUSH
46689: LD_INT 2
46691: PUSH
46692: LD_INT 2
46694: PUSH
46695: EMPTY
46696: LIST
46697: LIST
46698: PUSH
46699: LD_INT 1
46701: PUSH
46702: LD_INT 2
46704: PUSH
46705: EMPTY
46706: LIST
46707: LIST
46708: PUSH
46709: LD_INT 0
46711: PUSH
46712: LD_INT 2
46714: PUSH
46715: EMPTY
46716: LIST
46717: LIST
46718: PUSH
46719: LD_INT 1
46721: NEG
46722: PUSH
46723: LD_INT 1
46725: PUSH
46726: EMPTY
46727: LIST
46728: LIST
46729: PUSH
46730: LD_INT 2
46732: NEG
46733: PUSH
46734: LD_INT 0
46736: PUSH
46737: EMPTY
46738: LIST
46739: LIST
46740: PUSH
46741: LD_INT 2
46743: NEG
46744: PUSH
46745: LD_INT 1
46747: NEG
46748: PUSH
46749: EMPTY
46750: LIST
46751: LIST
46752: PUSH
46753: LD_INT 2
46755: NEG
46756: PUSH
46757: LD_INT 2
46759: NEG
46760: PUSH
46761: EMPTY
46762: LIST
46763: LIST
46764: PUSH
46765: LD_INT 2
46767: PUSH
46768: LD_INT 3
46770: PUSH
46771: EMPTY
46772: LIST
46773: LIST
46774: PUSH
46775: LD_INT 1
46777: PUSH
46778: LD_INT 3
46780: PUSH
46781: EMPTY
46782: LIST
46783: LIST
46784: PUSH
46785: LD_INT 1
46787: NEG
46788: PUSH
46789: LD_INT 2
46791: PUSH
46792: EMPTY
46793: LIST
46794: LIST
46795: PUSH
46796: LD_INT 2
46798: NEG
46799: PUSH
46800: LD_INT 1
46802: PUSH
46803: EMPTY
46804: LIST
46805: LIST
46806: PUSH
46807: EMPTY
46808: LIST
46809: LIST
46810: LIST
46811: LIST
46812: LIST
46813: LIST
46814: LIST
46815: LIST
46816: LIST
46817: LIST
46818: LIST
46819: LIST
46820: LIST
46821: LIST
46822: LIST
46823: LIST
46824: LIST
46825: LIST
46826: LIST
46827: LIST
46828: LIST
46829: LIST
46830: LIST
46831: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
46832: LD_ADDR_VAR 0 27
46836: PUSH
46837: LD_INT 0
46839: PUSH
46840: LD_INT 0
46842: PUSH
46843: EMPTY
46844: LIST
46845: LIST
46846: PUSH
46847: LD_INT 0
46849: PUSH
46850: LD_INT 1
46852: NEG
46853: PUSH
46854: EMPTY
46855: LIST
46856: LIST
46857: PUSH
46858: LD_INT 1
46860: PUSH
46861: LD_INT 0
46863: PUSH
46864: EMPTY
46865: LIST
46866: LIST
46867: PUSH
46868: LD_INT 1
46870: PUSH
46871: LD_INT 1
46873: PUSH
46874: EMPTY
46875: LIST
46876: LIST
46877: PUSH
46878: LD_INT 0
46880: PUSH
46881: LD_INT 1
46883: PUSH
46884: EMPTY
46885: LIST
46886: LIST
46887: PUSH
46888: LD_INT 1
46890: NEG
46891: PUSH
46892: LD_INT 0
46894: PUSH
46895: EMPTY
46896: LIST
46897: LIST
46898: PUSH
46899: LD_INT 1
46901: NEG
46902: PUSH
46903: LD_INT 1
46905: NEG
46906: PUSH
46907: EMPTY
46908: LIST
46909: LIST
46910: PUSH
46911: LD_INT 1
46913: NEG
46914: PUSH
46915: LD_INT 2
46917: NEG
46918: PUSH
46919: EMPTY
46920: LIST
46921: LIST
46922: PUSH
46923: LD_INT 0
46925: PUSH
46926: LD_INT 2
46928: NEG
46929: PUSH
46930: EMPTY
46931: LIST
46932: LIST
46933: PUSH
46934: LD_INT 1
46936: PUSH
46937: LD_INT 1
46939: NEG
46940: PUSH
46941: EMPTY
46942: LIST
46943: LIST
46944: PUSH
46945: LD_INT 2
46947: PUSH
46948: LD_INT 0
46950: PUSH
46951: EMPTY
46952: LIST
46953: LIST
46954: PUSH
46955: LD_INT 2
46957: PUSH
46958: LD_INT 1
46960: PUSH
46961: EMPTY
46962: LIST
46963: LIST
46964: PUSH
46965: LD_INT 2
46967: PUSH
46968: LD_INT 2
46970: PUSH
46971: EMPTY
46972: LIST
46973: LIST
46974: PUSH
46975: LD_INT 1
46977: PUSH
46978: LD_INT 2
46980: PUSH
46981: EMPTY
46982: LIST
46983: LIST
46984: PUSH
46985: LD_INT 0
46987: PUSH
46988: LD_INT 2
46990: PUSH
46991: EMPTY
46992: LIST
46993: LIST
46994: PUSH
46995: LD_INT 1
46997: NEG
46998: PUSH
46999: LD_INT 1
47001: PUSH
47002: EMPTY
47003: LIST
47004: LIST
47005: PUSH
47006: LD_INT 2
47008: NEG
47009: PUSH
47010: LD_INT 0
47012: PUSH
47013: EMPTY
47014: LIST
47015: LIST
47016: PUSH
47017: LD_INT 2
47019: NEG
47020: PUSH
47021: LD_INT 1
47023: NEG
47024: PUSH
47025: EMPTY
47026: LIST
47027: LIST
47028: PUSH
47029: LD_INT 2
47031: NEG
47032: PUSH
47033: LD_INT 2
47035: NEG
47036: PUSH
47037: EMPTY
47038: LIST
47039: LIST
47040: PUSH
47041: LD_INT 1
47043: NEG
47044: PUSH
47045: LD_INT 2
47047: PUSH
47048: EMPTY
47049: LIST
47050: LIST
47051: PUSH
47052: LD_INT 2
47054: NEG
47055: PUSH
47056: LD_INT 1
47058: PUSH
47059: EMPTY
47060: LIST
47061: LIST
47062: PUSH
47063: LD_INT 3
47065: NEG
47066: PUSH
47067: LD_INT 1
47069: NEG
47070: PUSH
47071: EMPTY
47072: LIST
47073: LIST
47074: PUSH
47075: LD_INT 3
47077: NEG
47078: PUSH
47079: LD_INT 2
47081: NEG
47082: PUSH
47083: EMPTY
47084: LIST
47085: LIST
47086: PUSH
47087: EMPTY
47088: LIST
47089: LIST
47090: LIST
47091: LIST
47092: LIST
47093: LIST
47094: LIST
47095: LIST
47096: LIST
47097: LIST
47098: LIST
47099: LIST
47100: LIST
47101: LIST
47102: LIST
47103: LIST
47104: LIST
47105: LIST
47106: LIST
47107: LIST
47108: LIST
47109: LIST
47110: LIST
47111: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47112: LD_ADDR_VAR 0 28
47116: PUSH
47117: LD_INT 0
47119: PUSH
47120: LD_INT 0
47122: PUSH
47123: EMPTY
47124: LIST
47125: LIST
47126: PUSH
47127: LD_INT 0
47129: PUSH
47130: LD_INT 1
47132: NEG
47133: PUSH
47134: EMPTY
47135: LIST
47136: LIST
47137: PUSH
47138: LD_INT 1
47140: PUSH
47141: LD_INT 0
47143: PUSH
47144: EMPTY
47145: LIST
47146: LIST
47147: PUSH
47148: LD_INT 1
47150: PUSH
47151: LD_INT 1
47153: PUSH
47154: EMPTY
47155: LIST
47156: LIST
47157: PUSH
47158: LD_INT 0
47160: PUSH
47161: LD_INT 1
47163: PUSH
47164: EMPTY
47165: LIST
47166: LIST
47167: PUSH
47168: LD_INT 1
47170: NEG
47171: PUSH
47172: LD_INT 0
47174: PUSH
47175: EMPTY
47176: LIST
47177: LIST
47178: PUSH
47179: LD_INT 1
47181: NEG
47182: PUSH
47183: LD_INT 1
47185: NEG
47186: PUSH
47187: EMPTY
47188: LIST
47189: LIST
47190: PUSH
47191: LD_INT 1
47193: NEG
47194: PUSH
47195: LD_INT 2
47197: NEG
47198: PUSH
47199: EMPTY
47200: LIST
47201: LIST
47202: PUSH
47203: LD_INT 0
47205: PUSH
47206: LD_INT 2
47208: NEG
47209: PUSH
47210: EMPTY
47211: LIST
47212: LIST
47213: PUSH
47214: LD_INT 1
47216: PUSH
47217: LD_INT 1
47219: NEG
47220: PUSH
47221: EMPTY
47222: LIST
47223: LIST
47224: PUSH
47225: LD_INT 2
47227: PUSH
47228: LD_INT 0
47230: PUSH
47231: EMPTY
47232: LIST
47233: LIST
47234: PUSH
47235: LD_INT 2
47237: PUSH
47238: LD_INT 1
47240: PUSH
47241: EMPTY
47242: LIST
47243: LIST
47244: PUSH
47245: LD_INT 2
47247: PUSH
47248: LD_INT 2
47250: PUSH
47251: EMPTY
47252: LIST
47253: LIST
47254: PUSH
47255: LD_INT 1
47257: PUSH
47258: LD_INT 2
47260: PUSH
47261: EMPTY
47262: LIST
47263: LIST
47264: PUSH
47265: LD_INT 0
47267: PUSH
47268: LD_INT 2
47270: PUSH
47271: EMPTY
47272: LIST
47273: LIST
47274: PUSH
47275: LD_INT 1
47277: NEG
47278: PUSH
47279: LD_INT 1
47281: PUSH
47282: EMPTY
47283: LIST
47284: LIST
47285: PUSH
47286: LD_INT 2
47288: NEG
47289: PUSH
47290: LD_INT 0
47292: PUSH
47293: EMPTY
47294: LIST
47295: LIST
47296: PUSH
47297: LD_INT 2
47299: NEG
47300: PUSH
47301: LD_INT 1
47303: NEG
47304: PUSH
47305: EMPTY
47306: LIST
47307: LIST
47308: PUSH
47309: LD_INT 2
47311: NEG
47312: PUSH
47313: LD_INT 2
47315: NEG
47316: PUSH
47317: EMPTY
47318: LIST
47319: LIST
47320: PUSH
47321: LD_INT 2
47323: NEG
47324: PUSH
47325: LD_INT 3
47327: NEG
47328: PUSH
47329: EMPTY
47330: LIST
47331: LIST
47332: PUSH
47333: LD_INT 1
47335: NEG
47336: PUSH
47337: LD_INT 3
47339: NEG
47340: PUSH
47341: EMPTY
47342: LIST
47343: LIST
47344: PUSH
47345: LD_INT 3
47347: NEG
47348: PUSH
47349: LD_INT 1
47351: NEG
47352: PUSH
47353: EMPTY
47354: LIST
47355: LIST
47356: PUSH
47357: LD_INT 3
47359: NEG
47360: PUSH
47361: LD_INT 2
47363: NEG
47364: PUSH
47365: EMPTY
47366: LIST
47367: LIST
47368: PUSH
47369: EMPTY
47370: LIST
47371: LIST
47372: LIST
47373: LIST
47374: LIST
47375: LIST
47376: LIST
47377: LIST
47378: LIST
47379: LIST
47380: LIST
47381: LIST
47382: LIST
47383: LIST
47384: LIST
47385: LIST
47386: LIST
47387: LIST
47388: LIST
47389: LIST
47390: LIST
47391: LIST
47392: LIST
47393: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47394: LD_ADDR_VAR 0 29
47398: PUSH
47399: LD_INT 0
47401: PUSH
47402: LD_INT 0
47404: PUSH
47405: EMPTY
47406: LIST
47407: LIST
47408: PUSH
47409: LD_INT 0
47411: PUSH
47412: LD_INT 1
47414: NEG
47415: PUSH
47416: EMPTY
47417: LIST
47418: LIST
47419: PUSH
47420: LD_INT 1
47422: PUSH
47423: LD_INT 0
47425: PUSH
47426: EMPTY
47427: LIST
47428: LIST
47429: PUSH
47430: LD_INT 1
47432: PUSH
47433: LD_INT 1
47435: PUSH
47436: EMPTY
47437: LIST
47438: LIST
47439: PUSH
47440: LD_INT 0
47442: PUSH
47443: LD_INT 1
47445: PUSH
47446: EMPTY
47447: LIST
47448: LIST
47449: PUSH
47450: LD_INT 1
47452: NEG
47453: PUSH
47454: LD_INT 0
47456: PUSH
47457: EMPTY
47458: LIST
47459: LIST
47460: PUSH
47461: LD_INT 1
47463: NEG
47464: PUSH
47465: LD_INT 1
47467: NEG
47468: PUSH
47469: EMPTY
47470: LIST
47471: LIST
47472: PUSH
47473: LD_INT 1
47475: NEG
47476: PUSH
47477: LD_INT 2
47479: NEG
47480: PUSH
47481: EMPTY
47482: LIST
47483: LIST
47484: PUSH
47485: LD_INT 0
47487: PUSH
47488: LD_INT 2
47490: NEG
47491: PUSH
47492: EMPTY
47493: LIST
47494: LIST
47495: PUSH
47496: LD_INT 1
47498: PUSH
47499: LD_INT 1
47501: NEG
47502: PUSH
47503: EMPTY
47504: LIST
47505: LIST
47506: PUSH
47507: LD_INT 2
47509: PUSH
47510: LD_INT 0
47512: PUSH
47513: EMPTY
47514: LIST
47515: LIST
47516: PUSH
47517: LD_INT 2
47519: PUSH
47520: LD_INT 1
47522: PUSH
47523: EMPTY
47524: LIST
47525: LIST
47526: PUSH
47527: LD_INT 1
47529: PUSH
47530: LD_INT 2
47532: PUSH
47533: EMPTY
47534: LIST
47535: LIST
47536: PUSH
47537: LD_INT 0
47539: PUSH
47540: LD_INT 2
47542: PUSH
47543: EMPTY
47544: LIST
47545: LIST
47546: PUSH
47547: LD_INT 1
47549: NEG
47550: PUSH
47551: LD_INT 1
47553: PUSH
47554: EMPTY
47555: LIST
47556: LIST
47557: PUSH
47558: LD_INT 2
47560: NEG
47561: PUSH
47562: LD_INT 1
47564: NEG
47565: PUSH
47566: EMPTY
47567: LIST
47568: LIST
47569: PUSH
47570: LD_INT 2
47572: NEG
47573: PUSH
47574: LD_INT 2
47576: NEG
47577: PUSH
47578: EMPTY
47579: LIST
47580: LIST
47581: PUSH
47582: LD_INT 2
47584: NEG
47585: PUSH
47586: LD_INT 3
47588: NEG
47589: PUSH
47590: EMPTY
47591: LIST
47592: LIST
47593: PUSH
47594: LD_INT 2
47596: PUSH
47597: LD_INT 1
47599: NEG
47600: PUSH
47601: EMPTY
47602: LIST
47603: LIST
47604: PUSH
47605: LD_INT 3
47607: PUSH
47608: LD_INT 1
47610: PUSH
47611: EMPTY
47612: LIST
47613: LIST
47614: PUSH
47615: LD_INT 1
47617: PUSH
47618: LD_INT 3
47620: PUSH
47621: EMPTY
47622: LIST
47623: LIST
47624: PUSH
47625: LD_INT 1
47627: NEG
47628: PUSH
47629: LD_INT 2
47631: PUSH
47632: EMPTY
47633: LIST
47634: LIST
47635: PUSH
47636: LD_INT 3
47638: NEG
47639: PUSH
47640: LD_INT 2
47642: NEG
47643: PUSH
47644: EMPTY
47645: LIST
47646: LIST
47647: PUSH
47648: EMPTY
47649: LIST
47650: LIST
47651: LIST
47652: LIST
47653: LIST
47654: LIST
47655: LIST
47656: LIST
47657: LIST
47658: LIST
47659: LIST
47660: LIST
47661: LIST
47662: LIST
47663: LIST
47664: LIST
47665: LIST
47666: LIST
47667: LIST
47668: LIST
47669: LIST
47670: LIST
47671: LIST
47672: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47673: LD_ADDR_VAR 0 30
47677: PUSH
47678: LD_INT 0
47680: PUSH
47681: LD_INT 0
47683: PUSH
47684: EMPTY
47685: LIST
47686: LIST
47687: PUSH
47688: LD_INT 0
47690: PUSH
47691: LD_INT 1
47693: NEG
47694: PUSH
47695: EMPTY
47696: LIST
47697: LIST
47698: PUSH
47699: LD_INT 1
47701: PUSH
47702: LD_INT 0
47704: PUSH
47705: EMPTY
47706: LIST
47707: LIST
47708: PUSH
47709: LD_INT 1
47711: PUSH
47712: LD_INT 1
47714: PUSH
47715: EMPTY
47716: LIST
47717: LIST
47718: PUSH
47719: LD_INT 0
47721: PUSH
47722: LD_INT 1
47724: PUSH
47725: EMPTY
47726: LIST
47727: LIST
47728: PUSH
47729: LD_INT 1
47731: NEG
47732: PUSH
47733: LD_INT 0
47735: PUSH
47736: EMPTY
47737: LIST
47738: LIST
47739: PUSH
47740: LD_INT 1
47742: NEG
47743: PUSH
47744: LD_INT 1
47746: NEG
47747: PUSH
47748: EMPTY
47749: LIST
47750: LIST
47751: PUSH
47752: LD_INT 1
47754: NEG
47755: PUSH
47756: LD_INT 2
47758: NEG
47759: PUSH
47760: EMPTY
47761: LIST
47762: LIST
47763: PUSH
47764: LD_INT 0
47766: PUSH
47767: LD_INT 2
47769: NEG
47770: PUSH
47771: EMPTY
47772: LIST
47773: LIST
47774: PUSH
47775: LD_INT 1
47777: PUSH
47778: LD_INT 1
47780: NEG
47781: PUSH
47782: EMPTY
47783: LIST
47784: LIST
47785: PUSH
47786: LD_INT 2
47788: PUSH
47789: LD_INT 0
47791: PUSH
47792: EMPTY
47793: LIST
47794: LIST
47795: PUSH
47796: LD_INT 2
47798: PUSH
47799: LD_INT 1
47801: PUSH
47802: EMPTY
47803: LIST
47804: LIST
47805: PUSH
47806: LD_INT 2
47808: PUSH
47809: LD_INT 2
47811: PUSH
47812: EMPTY
47813: LIST
47814: LIST
47815: PUSH
47816: LD_INT 1
47818: PUSH
47819: LD_INT 2
47821: PUSH
47822: EMPTY
47823: LIST
47824: LIST
47825: PUSH
47826: LD_INT 1
47828: NEG
47829: PUSH
47830: LD_INT 1
47832: PUSH
47833: EMPTY
47834: LIST
47835: LIST
47836: PUSH
47837: LD_INT 2
47839: NEG
47840: PUSH
47841: LD_INT 0
47843: PUSH
47844: EMPTY
47845: LIST
47846: LIST
47847: PUSH
47848: LD_INT 2
47850: NEG
47851: PUSH
47852: LD_INT 1
47854: NEG
47855: PUSH
47856: EMPTY
47857: LIST
47858: LIST
47859: PUSH
47860: LD_INT 1
47862: NEG
47863: PUSH
47864: LD_INT 3
47866: NEG
47867: PUSH
47868: EMPTY
47869: LIST
47870: LIST
47871: PUSH
47872: LD_INT 1
47874: PUSH
47875: LD_INT 2
47877: NEG
47878: PUSH
47879: EMPTY
47880: LIST
47881: LIST
47882: PUSH
47883: LD_INT 3
47885: PUSH
47886: LD_INT 2
47888: PUSH
47889: EMPTY
47890: LIST
47891: LIST
47892: PUSH
47893: LD_INT 2
47895: PUSH
47896: LD_INT 3
47898: PUSH
47899: EMPTY
47900: LIST
47901: LIST
47902: PUSH
47903: LD_INT 2
47905: NEG
47906: PUSH
47907: LD_INT 1
47909: PUSH
47910: EMPTY
47911: LIST
47912: LIST
47913: PUSH
47914: LD_INT 3
47916: NEG
47917: PUSH
47918: LD_INT 1
47920: NEG
47921: PUSH
47922: EMPTY
47923: LIST
47924: LIST
47925: PUSH
47926: EMPTY
47927: LIST
47928: LIST
47929: LIST
47930: LIST
47931: LIST
47932: LIST
47933: LIST
47934: LIST
47935: LIST
47936: LIST
47937: LIST
47938: LIST
47939: LIST
47940: LIST
47941: LIST
47942: LIST
47943: LIST
47944: LIST
47945: LIST
47946: LIST
47947: LIST
47948: LIST
47949: LIST
47950: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47951: LD_ADDR_VAR 0 31
47955: PUSH
47956: LD_INT 0
47958: PUSH
47959: LD_INT 0
47961: PUSH
47962: EMPTY
47963: LIST
47964: LIST
47965: PUSH
47966: LD_INT 0
47968: PUSH
47969: LD_INT 1
47971: NEG
47972: PUSH
47973: EMPTY
47974: LIST
47975: LIST
47976: PUSH
47977: LD_INT 1
47979: PUSH
47980: LD_INT 0
47982: PUSH
47983: EMPTY
47984: LIST
47985: LIST
47986: PUSH
47987: LD_INT 1
47989: PUSH
47990: LD_INT 1
47992: PUSH
47993: EMPTY
47994: LIST
47995: LIST
47996: PUSH
47997: LD_INT 0
47999: PUSH
48000: LD_INT 1
48002: PUSH
48003: EMPTY
48004: LIST
48005: LIST
48006: PUSH
48007: LD_INT 1
48009: NEG
48010: PUSH
48011: LD_INT 0
48013: PUSH
48014: EMPTY
48015: LIST
48016: LIST
48017: PUSH
48018: LD_INT 1
48020: NEG
48021: PUSH
48022: LD_INT 1
48024: NEG
48025: PUSH
48026: EMPTY
48027: LIST
48028: LIST
48029: PUSH
48030: LD_INT 1
48032: NEG
48033: PUSH
48034: LD_INT 2
48036: NEG
48037: PUSH
48038: EMPTY
48039: LIST
48040: LIST
48041: PUSH
48042: LD_INT 1
48044: PUSH
48045: LD_INT 1
48047: NEG
48048: PUSH
48049: EMPTY
48050: LIST
48051: LIST
48052: PUSH
48053: LD_INT 2
48055: PUSH
48056: LD_INT 0
48058: PUSH
48059: EMPTY
48060: LIST
48061: LIST
48062: PUSH
48063: LD_INT 2
48065: PUSH
48066: LD_INT 1
48068: PUSH
48069: EMPTY
48070: LIST
48071: LIST
48072: PUSH
48073: LD_INT 2
48075: PUSH
48076: LD_INT 2
48078: PUSH
48079: EMPTY
48080: LIST
48081: LIST
48082: PUSH
48083: LD_INT 1
48085: PUSH
48086: LD_INT 2
48088: PUSH
48089: EMPTY
48090: LIST
48091: LIST
48092: PUSH
48093: LD_INT 0
48095: PUSH
48096: LD_INT 2
48098: PUSH
48099: EMPTY
48100: LIST
48101: LIST
48102: PUSH
48103: LD_INT 1
48105: NEG
48106: PUSH
48107: LD_INT 1
48109: PUSH
48110: EMPTY
48111: LIST
48112: LIST
48113: PUSH
48114: LD_INT 2
48116: NEG
48117: PUSH
48118: LD_INT 1
48120: NEG
48121: PUSH
48122: EMPTY
48123: LIST
48124: LIST
48125: PUSH
48126: LD_INT 2
48128: NEG
48129: PUSH
48130: LD_INT 2
48132: NEG
48133: PUSH
48134: EMPTY
48135: LIST
48136: LIST
48137: PUSH
48138: LD_INT 2
48140: NEG
48141: PUSH
48142: LD_INT 3
48144: NEG
48145: PUSH
48146: EMPTY
48147: LIST
48148: LIST
48149: PUSH
48150: LD_INT 2
48152: PUSH
48153: LD_INT 1
48155: NEG
48156: PUSH
48157: EMPTY
48158: LIST
48159: LIST
48160: PUSH
48161: LD_INT 3
48163: PUSH
48164: LD_INT 1
48166: PUSH
48167: EMPTY
48168: LIST
48169: LIST
48170: PUSH
48171: LD_INT 1
48173: PUSH
48174: LD_INT 3
48176: PUSH
48177: EMPTY
48178: LIST
48179: LIST
48180: PUSH
48181: LD_INT 1
48183: NEG
48184: PUSH
48185: LD_INT 2
48187: PUSH
48188: EMPTY
48189: LIST
48190: LIST
48191: PUSH
48192: LD_INT 3
48194: NEG
48195: PUSH
48196: LD_INT 2
48198: NEG
48199: PUSH
48200: EMPTY
48201: LIST
48202: LIST
48203: PUSH
48204: EMPTY
48205: LIST
48206: LIST
48207: LIST
48208: LIST
48209: LIST
48210: LIST
48211: LIST
48212: LIST
48213: LIST
48214: LIST
48215: LIST
48216: LIST
48217: LIST
48218: LIST
48219: LIST
48220: LIST
48221: LIST
48222: LIST
48223: LIST
48224: LIST
48225: LIST
48226: LIST
48227: LIST
48228: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48229: LD_ADDR_VAR 0 32
48233: PUSH
48234: LD_INT 0
48236: PUSH
48237: LD_INT 0
48239: PUSH
48240: EMPTY
48241: LIST
48242: LIST
48243: PUSH
48244: LD_INT 0
48246: PUSH
48247: LD_INT 1
48249: NEG
48250: PUSH
48251: EMPTY
48252: LIST
48253: LIST
48254: PUSH
48255: LD_INT 1
48257: PUSH
48258: LD_INT 0
48260: PUSH
48261: EMPTY
48262: LIST
48263: LIST
48264: PUSH
48265: LD_INT 1
48267: PUSH
48268: LD_INT 1
48270: PUSH
48271: EMPTY
48272: LIST
48273: LIST
48274: PUSH
48275: LD_INT 0
48277: PUSH
48278: LD_INT 1
48280: PUSH
48281: EMPTY
48282: LIST
48283: LIST
48284: PUSH
48285: LD_INT 1
48287: NEG
48288: PUSH
48289: LD_INT 0
48291: PUSH
48292: EMPTY
48293: LIST
48294: LIST
48295: PUSH
48296: LD_INT 1
48298: NEG
48299: PUSH
48300: LD_INT 1
48302: NEG
48303: PUSH
48304: EMPTY
48305: LIST
48306: LIST
48307: PUSH
48308: LD_INT 1
48310: NEG
48311: PUSH
48312: LD_INT 2
48314: NEG
48315: PUSH
48316: EMPTY
48317: LIST
48318: LIST
48319: PUSH
48320: LD_INT 0
48322: PUSH
48323: LD_INT 2
48325: NEG
48326: PUSH
48327: EMPTY
48328: LIST
48329: LIST
48330: PUSH
48331: LD_INT 1
48333: PUSH
48334: LD_INT 1
48336: NEG
48337: PUSH
48338: EMPTY
48339: LIST
48340: LIST
48341: PUSH
48342: LD_INT 2
48344: PUSH
48345: LD_INT 1
48347: PUSH
48348: EMPTY
48349: LIST
48350: LIST
48351: PUSH
48352: LD_INT 2
48354: PUSH
48355: LD_INT 2
48357: PUSH
48358: EMPTY
48359: LIST
48360: LIST
48361: PUSH
48362: LD_INT 1
48364: PUSH
48365: LD_INT 2
48367: PUSH
48368: EMPTY
48369: LIST
48370: LIST
48371: PUSH
48372: LD_INT 0
48374: PUSH
48375: LD_INT 2
48377: PUSH
48378: EMPTY
48379: LIST
48380: LIST
48381: PUSH
48382: LD_INT 1
48384: NEG
48385: PUSH
48386: LD_INT 1
48388: PUSH
48389: EMPTY
48390: LIST
48391: LIST
48392: PUSH
48393: LD_INT 2
48395: NEG
48396: PUSH
48397: LD_INT 0
48399: PUSH
48400: EMPTY
48401: LIST
48402: LIST
48403: PUSH
48404: LD_INT 2
48406: NEG
48407: PUSH
48408: LD_INT 1
48410: NEG
48411: PUSH
48412: EMPTY
48413: LIST
48414: LIST
48415: PUSH
48416: LD_INT 1
48418: NEG
48419: PUSH
48420: LD_INT 3
48422: NEG
48423: PUSH
48424: EMPTY
48425: LIST
48426: LIST
48427: PUSH
48428: LD_INT 1
48430: PUSH
48431: LD_INT 2
48433: NEG
48434: PUSH
48435: EMPTY
48436: LIST
48437: LIST
48438: PUSH
48439: LD_INT 3
48441: PUSH
48442: LD_INT 2
48444: PUSH
48445: EMPTY
48446: LIST
48447: LIST
48448: PUSH
48449: LD_INT 2
48451: PUSH
48452: LD_INT 3
48454: PUSH
48455: EMPTY
48456: LIST
48457: LIST
48458: PUSH
48459: LD_INT 2
48461: NEG
48462: PUSH
48463: LD_INT 1
48465: PUSH
48466: EMPTY
48467: LIST
48468: LIST
48469: PUSH
48470: LD_INT 3
48472: NEG
48473: PUSH
48474: LD_INT 1
48476: NEG
48477: PUSH
48478: EMPTY
48479: LIST
48480: LIST
48481: PUSH
48482: EMPTY
48483: LIST
48484: LIST
48485: LIST
48486: LIST
48487: LIST
48488: LIST
48489: LIST
48490: LIST
48491: LIST
48492: LIST
48493: LIST
48494: LIST
48495: LIST
48496: LIST
48497: LIST
48498: LIST
48499: LIST
48500: LIST
48501: LIST
48502: LIST
48503: LIST
48504: LIST
48505: LIST
48506: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48507: LD_ADDR_VAR 0 33
48511: PUSH
48512: LD_INT 0
48514: PUSH
48515: LD_INT 0
48517: PUSH
48518: EMPTY
48519: LIST
48520: LIST
48521: PUSH
48522: LD_INT 0
48524: PUSH
48525: LD_INT 1
48527: NEG
48528: PUSH
48529: EMPTY
48530: LIST
48531: LIST
48532: PUSH
48533: LD_INT 1
48535: PUSH
48536: LD_INT 0
48538: PUSH
48539: EMPTY
48540: LIST
48541: LIST
48542: PUSH
48543: LD_INT 1
48545: PUSH
48546: LD_INT 1
48548: PUSH
48549: EMPTY
48550: LIST
48551: LIST
48552: PUSH
48553: LD_INT 0
48555: PUSH
48556: LD_INT 1
48558: PUSH
48559: EMPTY
48560: LIST
48561: LIST
48562: PUSH
48563: LD_INT 1
48565: NEG
48566: PUSH
48567: LD_INT 0
48569: PUSH
48570: EMPTY
48571: LIST
48572: LIST
48573: PUSH
48574: LD_INT 1
48576: NEG
48577: PUSH
48578: LD_INT 1
48580: NEG
48581: PUSH
48582: EMPTY
48583: LIST
48584: LIST
48585: PUSH
48586: LD_INT 1
48588: NEG
48589: PUSH
48590: LD_INT 2
48592: NEG
48593: PUSH
48594: EMPTY
48595: LIST
48596: LIST
48597: PUSH
48598: LD_INT 1
48600: PUSH
48601: LD_INT 1
48603: NEG
48604: PUSH
48605: EMPTY
48606: LIST
48607: LIST
48608: PUSH
48609: LD_INT 2
48611: PUSH
48612: LD_INT 0
48614: PUSH
48615: EMPTY
48616: LIST
48617: LIST
48618: PUSH
48619: LD_INT 2
48621: PUSH
48622: LD_INT 1
48624: PUSH
48625: EMPTY
48626: LIST
48627: LIST
48628: PUSH
48629: LD_INT 1
48631: PUSH
48632: LD_INT 2
48634: PUSH
48635: EMPTY
48636: LIST
48637: LIST
48638: PUSH
48639: LD_INT 0
48641: PUSH
48642: LD_INT 2
48644: PUSH
48645: EMPTY
48646: LIST
48647: LIST
48648: PUSH
48649: LD_INT 1
48651: NEG
48652: PUSH
48653: LD_INT 1
48655: PUSH
48656: EMPTY
48657: LIST
48658: LIST
48659: PUSH
48660: LD_INT 2
48662: NEG
48663: PUSH
48664: LD_INT 0
48666: PUSH
48667: EMPTY
48668: LIST
48669: LIST
48670: PUSH
48671: LD_INT 2
48673: NEG
48674: PUSH
48675: LD_INT 1
48677: NEG
48678: PUSH
48679: EMPTY
48680: LIST
48681: LIST
48682: PUSH
48683: LD_INT 2
48685: NEG
48686: PUSH
48687: LD_INT 2
48689: NEG
48690: PUSH
48691: EMPTY
48692: LIST
48693: LIST
48694: PUSH
48695: LD_INT 2
48697: NEG
48698: PUSH
48699: LD_INT 3
48701: NEG
48702: PUSH
48703: EMPTY
48704: LIST
48705: LIST
48706: PUSH
48707: LD_INT 2
48709: PUSH
48710: LD_INT 1
48712: NEG
48713: PUSH
48714: EMPTY
48715: LIST
48716: LIST
48717: PUSH
48718: LD_INT 3
48720: PUSH
48721: LD_INT 1
48723: PUSH
48724: EMPTY
48725: LIST
48726: LIST
48727: PUSH
48728: LD_INT 1
48730: PUSH
48731: LD_INT 3
48733: PUSH
48734: EMPTY
48735: LIST
48736: LIST
48737: PUSH
48738: LD_INT 1
48740: NEG
48741: PUSH
48742: LD_INT 2
48744: PUSH
48745: EMPTY
48746: LIST
48747: LIST
48748: PUSH
48749: LD_INT 3
48751: NEG
48752: PUSH
48753: LD_INT 2
48755: NEG
48756: PUSH
48757: EMPTY
48758: LIST
48759: LIST
48760: PUSH
48761: EMPTY
48762: LIST
48763: LIST
48764: LIST
48765: LIST
48766: LIST
48767: LIST
48768: LIST
48769: LIST
48770: LIST
48771: LIST
48772: LIST
48773: LIST
48774: LIST
48775: LIST
48776: LIST
48777: LIST
48778: LIST
48779: LIST
48780: LIST
48781: LIST
48782: LIST
48783: LIST
48784: LIST
48785: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48786: LD_ADDR_VAR 0 34
48790: PUSH
48791: LD_INT 0
48793: PUSH
48794: LD_INT 0
48796: PUSH
48797: EMPTY
48798: LIST
48799: LIST
48800: PUSH
48801: LD_INT 0
48803: PUSH
48804: LD_INT 1
48806: NEG
48807: PUSH
48808: EMPTY
48809: LIST
48810: LIST
48811: PUSH
48812: LD_INT 1
48814: PUSH
48815: LD_INT 0
48817: PUSH
48818: EMPTY
48819: LIST
48820: LIST
48821: PUSH
48822: LD_INT 1
48824: PUSH
48825: LD_INT 1
48827: PUSH
48828: EMPTY
48829: LIST
48830: LIST
48831: PUSH
48832: LD_INT 0
48834: PUSH
48835: LD_INT 1
48837: PUSH
48838: EMPTY
48839: LIST
48840: LIST
48841: PUSH
48842: LD_INT 1
48844: NEG
48845: PUSH
48846: LD_INT 0
48848: PUSH
48849: EMPTY
48850: LIST
48851: LIST
48852: PUSH
48853: LD_INT 1
48855: NEG
48856: PUSH
48857: LD_INT 1
48859: NEG
48860: PUSH
48861: EMPTY
48862: LIST
48863: LIST
48864: PUSH
48865: LD_INT 1
48867: NEG
48868: PUSH
48869: LD_INT 2
48871: NEG
48872: PUSH
48873: EMPTY
48874: LIST
48875: LIST
48876: PUSH
48877: LD_INT 0
48879: PUSH
48880: LD_INT 2
48882: NEG
48883: PUSH
48884: EMPTY
48885: LIST
48886: LIST
48887: PUSH
48888: LD_INT 1
48890: PUSH
48891: LD_INT 1
48893: NEG
48894: PUSH
48895: EMPTY
48896: LIST
48897: LIST
48898: PUSH
48899: LD_INT 2
48901: PUSH
48902: LD_INT 1
48904: PUSH
48905: EMPTY
48906: LIST
48907: LIST
48908: PUSH
48909: LD_INT 2
48911: PUSH
48912: LD_INT 2
48914: PUSH
48915: EMPTY
48916: LIST
48917: LIST
48918: PUSH
48919: LD_INT 1
48921: PUSH
48922: LD_INT 2
48924: PUSH
48925: EMPTY
48926: LIST
48927: LIST
48928: PUSH
48929: LD_INT 1
48931: NEG
48932: PUSH
48933: LD_INT 1
48935: PUSH
48936: EMPTY
48937: LIST
48938: LIST
48939: PUSH
48940: LD_INT 2
48942: NEG
48943: PUSH
48944: LD_INT 0
48946: PUSH
48947: EMPTY
48948: LIST
48949: LIST
48950: PUSH
48951: LD_INT 2
48953: NEG
48954: PUSH
48955: LD_INT 1
48957: NEG
48958: PUSH
48959: EMPTY
48960: LIST
48961: LIST
48962: PUSH
48963: LD_INT 2
48965: NEG
48966: PUSH
48967: LD_INT 2
48969: NEG
48970: PUSH
48971: EMPTY
48972: LIST
48973: LIST
48974: PUSH
48975: LD_INT 1
48977: NEG
48978: PUSH
48979: LD_INT 3
48981: NEG
48982: PUSH
48983: EMPTY
48984: LIST
48985: LIST
48986: PUSH
48987: LD_INT 1
48989: PUSH
48990: LD_INT 2
48992: NEG
48993: PUSH
48994: EMPTY
48995: LIST
48996: LIST
48997: PUSH
48998: LD_INT 3
49000: PUSH
49001: LD_INT 2
49003: PUSH
49004: EMPTY
49005: LIST
49006: LIST
49007: PUSH
49008: LD_INT 2
49010: PUSH
49011: LD_INT 3
49013: PUSH
49014: EMPTY
49015: LIST
49016: LIST
49017: PUSH
49018: LD_INT 2
49020: NEG
49021: PUSH
49022: LD_INT 1
49024: PUSH
49025: EMPTY
49026: LIST
49027: LIST
49028: PUSH
49029: LD_INT 3
49031: NEG
49032: PUSH
49033: LD_INT 1
49035: NEG
49036: PUSH
49037: EMPTY
49038: LIST
49039: LIST
49040: PUSH
49041: EMPTY
49042: LIST
49043: LIST
49044: LIST
49045: LIST
49046: LIST
49047: LIST
49048: LIST
49049: LIST
49050: LIST
49051: LIST
49052: LIST
49053: LIST
49054: LIST
49055: LIST
49056: LIST
49057: LIST
49058: LIST
49059: LIST
49060: LIST
49061: LIST
49062: LIST
49063: LIST
49064: LIST
49065: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
49066: LD_ADDR_VAR 0 35
49070: PUSH
49071: LD_INT 0
49073: PUSH
49074: LD_INT 0
49076: PUSH
49077: EMPTY
49078: LIST
49079: LIST
49080: PUSH
49081: LD_INT 0
49083: PUSH
49084: LD_INT 1
49086: NEG
49087: PUSH
49088: EMPTY
49089: LIST
49090: LIST
49091: PUSH
49092: LD_INT 1
49094: PUSH
49095: LD_INT 0
49097: PUSH
49098: EMPTY
49099: LIST
49100: LIST
49101: PUSH
49102: LD_INT 1
49104: PUSH
49105: LD_INT 1
49107: PUSH
49108: EMPTY
49109: LIST
49110: LIST
49111: PUSH
49112: LD_INT 0
49114: PUSH
49115: LD_INT 1
49117: PUSH
49118: EMPTY
49119: LIST
49120: LIST
49121: PUSH
49122: LD_INT 1
49124: NEG
49125: PUSH
49126: LD_INT 0
49128: PUSH
49129: EMPTY
49130: LIST
49131: LIST
49132: PUSH
49133: LD_INT 1
49135: NEG
49136: PUSH
49137: LD_INT 1
49139: NEG
49140: PUSH
49141: EMPTY
49142: LIST
49143: LIST
49144: PUSH
49145: LD_INT 2
49147: PUSH
49148: LD_INT 1
49150: PUSH
49151: EMPTY
49152: LIST
49153: LIST
49154: PUSH
49155: LD_INT 2
49157: NEG
49158: PUSH
49159: LD_INT 1
49161: NEG
49162: PUSH
49163: EMPTY
49164: LIST
49165: LIST
49166: PUSH
49167: EMPTY
49168: LIST
49169: LIST
49170: LIST
49171: LIST
49172: LIST
49173: LIST
49174: LIST
49175: LIST
49176: LIST
49177: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
49178: LD_ADDR_VAR 0 36
49182: PUSH
49183: LD_INT 0
49185: PUSH
49186: LD_INT 0
49188: PUSH
49189: EMPTY
49190: LIST
49191: LIST
49192: PUSH
49193: LD_INT 0
49195: PUSH
49196: LD_INT 1
49198: NEG
49199: PUSH
49200: EMPTY
49201: LIST
49202: LIST
49203: PUSH
49204: LD_INT 1
49206: PUSH
49207: LD_INT 0
49209: PUSH
49210: EMPTY
49211: LIST
49212: LIST
49213: PUSH
49214: LD_INT 1
49216: PUSH
49217: LD_INT 1
49219: PUSH
49220: EMPTY
49221: LIST
49222: LIST
49223: PUSH
49224: LD_INT 0
49226: PUSH
49227: LD_INT 1
49229: PUSH
49230: EMPTY
49231: LIST
49232: LIST
49233: PUSH
49234: LD_INT 1
49236: NEG
49237: PUSH
49238: LD_INT 0
49240: PUSH
49241: EMPTY
49242: LIST
49243: LIST
49244: PUSH
49245: LD_INT 1
49247: NEG
49248: PUSH
49249: LD_INT 1
49251: NEG
49252: PUSH
49253: EMPTY
49254: LIST
49255: LIST
49256: PUSH
49257: LD_INT 1
49259: NEG
49260: PUSH
49261: LD_INT 2
49263: NEG
49264: PUSH
49265: EMPTY
49266: LIST
49267: LIST
49268: PUSH
49269: LD_INT 1
49271: PUSH
49272: LD_INT 2
49274: PUSH
49275: EMPTY
49276: LIST
49277: LIST
49278: PUSH
49279: EMPTY
49280: LIST
49281: LIST
49282: LIST
49283: LIST
49284: LIST
49285: LIST
49286: LIST
49287: LIST
49288: LIST
49289: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
49290: LD_ADDR_VAR 0 37
49294: PUSH
49295: LD_INT 0
49297: PUSH
49298: LD_INT 0
49300: PUSH
49301: EMPTY
49302: LIST
49303: LIST
49304: PUSH
49305: LD_INT 0
49307: PUSH
49308: LD_INT 1
49310: NEG
49311: PUSH
49312: EMPTY
49313: LIST
49314: LIST
49315: PUSH
49316: LD_INT 1
49318: PUSH
49319: LD_INT 0
49321: PUSH
49322: EMPTY
49323: LIST
49324: LIST
49325: PUSH
49326: LD_INT 1
49328: PUSH
49329: LD_INT 1
49331: PUSH
49332: EMPTY
49333: LIST
49334: LIST
49335: PUSH
49336: LD_INT 0
49338: PUSH
49339: LD_INT 1
49341: PUSH
49342: EMPTY
49343: LIST
49344: LIST
49345: PUSH
49346: LD_INT 1
49348: NEG
49349: PUSH
49350: LD_INT 0
49352: PUSH
49353: EMPTY
49354: LIST
49355: LIST
49356: PUSH
49357: LD_INT 1
49359: NEG
49360: PUSH
49361: LD_INT 1
49363: NEG
49364: PUSH
49365: EMPTY
49366: LIST
49367: LIST
49368: PUSH
49369: LD_INT 1
49371: PUSH
49372: LD_INT 1
49374: NEG
49375: PUSH
49376: EMPTY
49377: LIST
49378: LIST
49379: PUSH
49380: LD_INT 1
49382: NEG
49383: PUSH
49384: LD_INT 1
49386: PUSH
49387: EMPTY
49388: LIST
49389: LIST
49390: PUSH
49391: EMPTY
49392: LIST
49393: LIST
49394: LIST
49395: LIST
49396: LIST
49397: LIST
49398: LIST
49399: LIST
49400: LIST
49401: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
49402: LD_ADDR_VAR 0 38
49406: PUSH
49407: LD_INT 0
49409: PUSH
49410: LD_INT 0
49412: PUSH
49413: EMPTY
49414: LIST
49415: LIST
49416: PUSH
49417: LD_INT 0
49419: PUSH
49420: LD_INT 1
49422: NEG
49423: PUSH
49424: EMPTY
49425: LIST
49426: LIST
49427: PUSH
49428: LD_INT 1
49430: PUSH
49431: LD_INT 0
49433: PUSH
49434: EMPTY
49435: LIST
49436: LIST
49437: PUSH
49438: LD_INT 1
49440: PUSH
49441: LD_INT 1
49443: PUSH
49444: EMPTY
49445: LIST
49446: LIST
49447: PUSH
49448: LD_INT 0
49450: PUSH
49451: LD_INT 1
49453: PUSH
49454: EMPTY
49455: LIST
49456: LIST
49457: PUSH
49458: LD_INT 1
49460: NEG
49461: PUSH
49462: LD_INT 0
49464: PUSH
49465: EMPTY
49466: LIST
49467: LIST
49468: PUSH
49469: LD_INT 1
49471: NEG
49472: PUSH
49473: LD_INT 1
49475: NEG
49476: PUSH
49477: EMPTY
49478: LIST
49479: LIST
49480: PUSH
49481: LD_INT 2
49483: PUSH
49484: LD_INT 1
49486: PUSH
49487: EMPTY
49488: LIST
49489: LIST
49490: PUSH
49491: LD_INT 2
49493: NEG
49494: PUSH
49495: LD_INT 1
49497: NEG
49498: PUSH
49499: EMPTY
49500: LIST
49501: LIST
49502: PUSH
49503: EMPTY
49504: LIST
49505: LIST
49506: LIST
49507: LIST
49508: LIST
49509: LIST
49510: LIST
49511: LIST
49512: LIST
49513: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
49514: LD_ADDR_VAR 0 39
49518: PUSH
49519: LD_INT 0
49521: PUSH
49522: LD_INT 0
49524: PUSH
49525: EMPTY
49526: LIST
49527: LIST
49528: PUSH
49529: LD_INT 0
49531: PUSH
49532: LD_INT 1
49534: NEG
49535: PUSH
49536: EMPTY
49537: LIST
49538: LIST
49539: PUSH
49540: LD_INT 1
49542: PUSH
49543: LD_INT 0
49545: PUSH
49546: EMPTY
49547: LIST
49548: LIST
49549: PUSH
49550: LD_INT 1
49552: PUSH
49553: LD_INT 1
49555: PUSH
49556: EMPTY
49557: LIST
49558: LIST
49559: PUSH
49560: LD_INT 0
49562: PUSH
49563: LD_INT 1
49565: PUSH
49566: EMPTY
49567: LIST
49568: LIST
49569: PUSH
49570: LD_INT 1
49572: NEG
49573: PUSH
49574: LD_INT 0
49576: PUSH
49577: EMPTY
49578: LIST
49579: LIST
49580: PUSH
49581: LD_INT 1
49583: NEG
49584: PUSH
49585: LD_INT 1
49587: NEG
49588: PUSH
49589: EMPTY
49590: LIST
49591: LIST
49592: PUSH
49593: LD_INT 1
49595: NEG
49596: PUSH
49597: LD_INT 2
49599: NEG
49600: PUSH
49601: EMPTY
49602: LIST
49603: LIST
49604: PUSH
49605: LD_INT 1
49607: PUSH
49608: LD_INT 2
49610: PUSH
49611: EMPTY
49612: LIST
49613: LIST
49614: PUSH
49615: EMPTY
49616: LIST
49617: LIST
49618: LIST
49619: LIST
49620: LIST
49621: LIST
49622: LIST
49623: LIST
49624: LIST
49625: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
49626: LD_ADDR_VAR 0 40
49630: PUSH
49631: LD_INT 0
49633: PUSH
49634: LD_INT 0
49636: PUSH
49637: EMPTY
49638: LIST
49639: LIST
49640: PUSH
49641: LD_INT 0
49643: PUSH
49644: LD_INT 1
49646: NEG
49647: PUSH
49648: EMPTY
49649: LIST
49650: LIST
49651: PUSH
49652: LD_INT 1
49654: PUSH
49655: LD_INT 0
49657: PUSH
49658: EMPTY
49659: LIST
49660: LIST
49661: PUSH
49662: LD_INT 1
49664: PUSH
49665: LD_INT 1
49667: PUSH
49668: EMPTY
49669: LIST
49670: LIST
49671: PUSH
49672: LD_INT 0
49674: PUSH
49675: LD_INT 1
49677: PUSH
49678: EMPTY
49679: LIST
49680: LIST
49681: PUSH
49682: LD_INT 1
49684: NEG
49685: PUSH
49686: LD_INT 0
49688: PUSH
49689: EMPTY
49690: LIST
49691: LIST
49692: PUSH
49693: LD_INT 1
49695: NEG
49696: PUSH
49697: LD_INT 1
49699: NEG
49700: PUSH
49701: EMPTY
49702: LIST
49703: LIST
49704: PUSH
49705: LD_INT 1
49707: PUSH
49708: LD_INT 1
49710: NEG
49711: PUSH
49712: EMPTY
49713: LIST
49714: LIST
49715: PUSH
49716: LD_INT 1
49718: NEG
49719: PUSH
49720: LD_INT 1
49722: PUSH
49723: EMPTY
49724: LIST
49725: LIST
49726: PUSH
49727: EMPTY
49728: LIST
49729: LIST
49730: LIST
49731: LIST
49732: LIST
49733: LIST
49734: LIST
49735: LIST
49736: LIST
49737: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49738: LD_ADDR_VAR 0 41
49742: PUSH
49743: LD_INT 0
49745: PUSH
49746: LD_INT 0
49748: PUSH
49749: EMPTY
49750: LIST
49751: LIST
49752: PUSH
49753: LD_INT 0
49755: PUSH
49756: LD_INT 1
49758: NEG
49759: PUSH
49760: EMPTY
49761: LIST
49762: LIST
49763: PUSH
49764: LD_INT 1
49766: PUSH
49767: LD_INT 0
49769: PUSH
49770: EMPTY
49771: LIST
49772: LIST
49773: PUSH
49774: LD_INT 1
49776: PUSH
49777: LD_INT 1
49779: PUSH
49780: EMPTY
49781: LIST
49782: LIST
49783: PUSH
49784: LD_INT 0
49786: PUSH
49787: LD_INT 1
49789: PUSH
49790: EMPTY
49791: LIST
49792: LIST
49793: PUSH
49794: LD_INT 1
49796: NEG
49797: PUSH
49798: LD_INT 0
49800: PUSH
49801: EMPTY
49802: LIST
49803: LIST
49804: PUSH
49805: LD_INT 1
49807: NEG
49808: PUSH
49809: LD_INT 1
49811: NEG
49812: PUSH
49813: EMPTY
49814: LIST
49815: LIST
49816: PUSH
49817: LD_INT 1
49819: NEG
49820: PUSH
49821: LD_INT 2
49823: NEG
49824: PUSH
49825: EMPTY
49826: LIST
49827: LIST
49828: PUSH
49829: LD_INT 1
49831: PUSH
49832: LD_INT 1
49834: NEG
49835: PUSH
49836: EMPTY
49837: LIST
49838: LIST
49839: PUSH
49840: LD_INT 2
49842: PUSH
49843: LD_INT 0
49845: PUSH
49846: EMPTY
49847: LIST
49848: LIST
49849: PUSH
49850: LD_INT 2
49852: PUSH
49853: LD_INT 1
49855: PUSH
49856: EMPTY
49857: LIST
49858: LIST
49859: PUSH
49860: LD_INT 2
49862: PUSH
49863: LD_INT 2
49865: PUSH
49866: EMPTY
49867: LIST
49868: LIST
49869: PUSH
49870: LD_INT 1
49872: PUSH
49873: LD_INT 2
49875: PUSH
49876: EMPTY
49877: LIST
49878: LIST
49879: PUSH
49880: LD_INT 1
49882: NEG
49883: PUSH
49884: LD_INT 1
49886: PUSH
49887: EMPTY
49888: LIST
49889: LIST
49890: PUSH
49891: LD_INT 2
49893: NEG
49894: PUSH
49895: LD_INT 0
49897: PUSH
49898: EMPTY
49899: LIST
49900: LIST
49901: PUSH
49902: LD_INT 2
49904: NEG
49905: PUSH
49906: LD_INT 1
49908: NEG
49909: PUSH
49910: EMPTY
49911: LIST
49912: LIST
49913: PUSH
49914: LD_INT 2
49916: NEG
49917: PUSH
49918: LD_INT 2
49920: NEG
49921: PUSH
49922: EMPTY
49923: LIST
49924: LIST
49925: PUSH
49926: LD_INT 2
49928: NEG
49929: PUSH
49930: LD_INT 3
49932: NEG
49933: PUSH
49934: EMPTY
49935: LIST
49936: LIST
49937: PUSH
49938: LD_INT 2
49940: PUSH
49941: LD_INT 1
49943: NEG
49944: PUSH
49945: EMPTY
49946: LIST
49947: LIST
49948: PUSH
49949: LD_INT 3
49951: PUSH
49952: LD_INT 0
49954: PUSH
49955: EMPTY
49956: LIST
49957: LIST
49958: PUSH
49959: LD_INT 3
49961: PUSH
49962: LD_INT 1
49964: PUSH
49965: EMPTY
49966: LIST
49967: LIST
49968: PUSH
49969: LD_INT 3
49971: PUSH
49972: LD_INT 2
49974: PUSH
49975: EMPTY
49976: LIST
49977: LIST
49978: PUSH
49979: LD_INT 3
49981: PUSH
49982: LD_INT 3
49984: PUSH
49985: EMPTY
49986: LIST
49987: LIST
49988: PUSH
49989: LD_INT 2
49991: PUSH
49992: LD_INT 3
49994: PUSH
49995: EMPTY
49996: LIST
49997: LIST
49998: PUSH
49999: LD_INT 2
50001: NEG
50002: PUSH
50003: LD_INT 1
50005: PUSH
50006: EMPTY
50007: LIST
50008: LIST
50009: PUSH
50010: LD_INT 3
50012: NEG
50013: PUSH
50014: LD_INT 0
50016: PUSH
50017: EMPTY
50018: LIST
50019: LIST
50020: PUSH
50021: LD_INT 3
50023: NEG
50024: PUSH
50025: LD_INT 1
50027: NEG
50028: PUSH
50029: EMPTY
50030: LIST
50031: LIST
50032: PUSH
50033: LD_INT 3
50035: NEG
50036: PUSH
50037: LD_INT 2
50039: NEG
50040: PUSH
50041: EMPTY
50042: LIST
50043: LIST
50044: PUSH
50045: LD_INT 3
50047: NEG
50048: PUSH
50049: LD_INT 3
50051: NEG
50052: PUSH
50053: EMPTY
50054: LIST
50055: LIST
50056: PUSH
50057: EMPTY
50058: LIST
50059: LIST
50060: LIST
50061: LIST
50062: LIST
50063: LIST
50064: LIST
50065: LIST
50066: LIST
50067: LIST
50068: LIST
50069: LIST
50070: LIST
50071: LIST
50072: LIST
50073: LIST
50074: LIST
50075: LIST
50076: LIST
50077: LIST
50078: LIST
50079: LIST
50080: LIST
50081: LIST
50082: LIST
50083: LIST
50084: LIST
50085: LIST
50086: LIST
50087: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50088: LD_ADDR_VAR 0 42
50092: PUSH
50093: LD_INT 0
50095: PUSH
50096: LD_INT 0
50098: PUSH
50099: EMPTY
50100: LIST
50101: LIST
50102: PUSH
50103: LD_INT 0
50105: PUSH
50106: LD_INT 1
50108: NEG
50109: PUSH
50110: EMPTY
50111: LIST
50112: LIST
50113: PUSH
50114: LD_INT 1
50116: PUSH
50117: LD_INT 0
50119: PUSH
50120: EMPTY
50121: LIST
50122: LIST
50123: PUSH
50124: LD_INT 1
50126: PUSH
50127: LD_INT 1
50129: PUSH
50130: EMPTY
50131: LIST
50132: LIST
50133: PUSH
50134: LD_INT 0
50136: PUSH
50137: LD_INT 1
50139: PUSH
50140: EMPTY
50141: LIST
50142: LIST
50143: PUSH
50144: LD_INT 1
50146: NEG
50147: PUSH
50148: LD_INT 0
50150: PUSH
50151: EMPTY
50152: LIST
50153: LIST
50154: PUSH
50155: LD_INT 1
50157: NEG
50158: PUSH
50159: LD_INT 1
50161: NEG
50162: PUSH
50163: EMPTY
50164: LIST
50165: LIST
50166: PUSH
50167: LD_INT 1
50169: NEG
50170: PUSH
50171: LD_INT 2
50173: NEG
50174: PUSH
50175: EMPTY
50176: LIST
50177: LIST
50178: PUSH
50179: LD_INT 0
50181: PUSH
50182: LD_INT 2
50184: NEG
50185: PUSH
50186: EMPTY
50187: LIST
50188: LIST
50189: PUSH
50190: LD_INT 1
50192: PUSH
50193: LD_INT 1
50195: NEG
50196: PUSH
50197: EMPTY
50198: LIST
50199: LIST
50200: PUSH
50201: LD_INT 2
50203: PUSH
50204: LD_INT 1
50206: PUSH
50207: EMPTY
50208: LIST
50209: LIST
50210: PUSH
50211: LD_INT 2
50213: PUSH
50214: LD_INT 2
50216: PUSH
50217: EMPTY
50218: LIST
50219: LIST
50220: PUSH
50221: LD_INT 1
50223: PUSH
50224: LD_INT 2
50226: PUSH
50227: EMPTY
50228: LIST
50229: LIST
50230: PUSH
50231: LD_INT 0
50233: PUSH
50234: LD_INT 2
50236: PUSH
50237: EMPTY
50238: LIST
50239: LIST
50240: PUSH
50241: LD_INT 1
50243: NEG
50244: PUSH
50245: LD_INT 1
50247: PUSH
50248: EMPTY
50249: LIST
50250: LIST
50251: PUSH
50252: LD_INT 2
50254: NEG
50255: PUSH
50256: LD_INT 1
50258: NEG
50259: PUSH
50260: EMPTY
50261: LIST
50262: LIST
50263: PUSH
50264: LD_INT 2
50266: NEG
50267: PUSH
50268: LD_INT 2
50270: NEG
50271: PUSH
50272: EMPTY
50273: LIST
50274: LIST
50275: PUSH
50276: LD_INT 2
50278: NEG
50279: PUSH
50280: LD_INT 3
50282: NEG
50283: PUSH
50284: EMPTY
50285: LIST
50286: LIST
50287: PUSH
50288: LD_INT 1
50290: NEG
50291: PUSH
50292: LD_INT 3
50294: NEG
50295: PUSH
50296: EMPTY
50297: LIST
50298: LIST
50299: PUSH
50300: LD_INT 0
50302: PUSH
50303: LD_INT 3
50305: NEG
50306: PUSH
50307: EMPTY
50308: LIST
50309: LIST
50310: PUSH
50311: LD_INT 1
50313: PUSH
50314: LD_INT 2
50316: NEG
50317: PUSH
50318: EMPTY
50319: LIST
50320: LIST
50321: PUSH
50322: LD_INT 3
50324: PUSH
50325: LD_INT 2
50327: PUSH
50328: EMPTY
50329: LIST
50330: LIST
50331: PUSH
50332: LD_INT 3
50334: PUSH
50335: LD_INT 3
50337: PUSH
50338: EMPTY
50339: LIST
50340: LIST
50341: PUSH
50342: LD_INT 2
50344: PUSH
50345: LD_INT 3
50347: PUSH
50348: EMPTY
50349: LIST
50350: LIST
50351: PUSH
50352: LD_INT 1
50354: PUSH
50355: LD_INT 3
50357: PUSH
50358: EMPTY
50359: LIST
50360: LIST
50361: PUSH
50362: LD_INT 0
50364: PUSH
50365: LD_INT 3
50367: PUSH
50368: EMPTY
50369: LIST
50370: LIST
50371: PUSH
50372: LD_INT 1
50374: NEG
50375: PUSH
50376: LD_INT 2
50378: PUSH
50379: EMPTY
50380: LIST
50381: LIST
50382: PUSH
50383: LD_INT 3
50385: NEG
50386: PUSH
50387: LD_INT 2
50389: NEG
50390: PUSH
50391: EMPTY
50392: LIST
50393: LIST
50394: PUSH
50395: LD_INT 3
50397: NEG
50398: PUSH
50399: LD_INT 3
50401: NEG
50402: PUSH
50403: EMPTY
50404: LIST
50405: LIST
50406: PUSH
50407: EMPTY
50408: LIST
50409: LIST
50410: LIST
50411: LIST
50412: LIST
50413: LIST
50414: LIST
50415: LIST
50416: LIST
50417: LIST
50418: LIST
50419: LIST
50420: LIST
50421: LIST
50422: LIST
50423: LIST
50424: LIST
50425: LIST
50426: LIST
50427: LIST
50428: LIST
50429: LIST
50430: LIST
50431: LIST
50432: LIST
50433: LIST
50434: LIST
50435: LIST
50436: LIST
50437: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50438: LD_ADDR_VAR 0 43
50442: PUSH
50443: LD_INT 0
50445: PUSH
50446: LD_INT 0
50448: PUSH
50449: EMPTY
50450: LIST
50451: LIST
50452: PUSH
50453: LD_INT 0
50455: PUSH
50456: LD_INT 1
50458: NEG
50459: PUSH
50460: EMPTY
50461: LIST
50462: LIST
50463: PUSH
50464: LD_INT 1
50466: PUSH
50467: LD_INT 0
50469: PUSH
50470: EMPTY
50471: LIST
50472: LIST
50473: PUSH
50474: LD_INT 1
50476: PUSH
50477: LD_INT 1
50479: PUSH
50480: EMPTY
50481: LIST
50482: LIST
50483: PUSH
50484: LD_INT 0
50486: PUSH
50487: LD_INT 1
50489: PUSH
50490: EMPTY
50491: LIST
50492: LIST
50493: PUSH
50494: LD_INT 1
50496: NEG
50497: PUSH
50498: LD_INT 0
50500: PUSH
50501: EMPTY
50502: LIST
50503: LIST
50504: PUSH
50505: LD_INT 1
50507: NEG
50508: PUSH
50509: LD_INT 1
50511: NEG
50512: PUSH
50513: EMPTY
50514: LIST
50515: LIST
50516: PUSH
50517: LD_INT 1
50519: NEG
50520: PUSH
50521: LD_INT 2
50523: NEG
50524: PUSH
50525: EMPTY
50526: LIST
50527: LIST
50528: PUSH
50529: LD_INT 0
50531: PUSH
50532: LD_INT 2
50534: NEG
50535: PUSH
50536: EMPTY
50537: LIST
50538: LIST
50539: PUSH
50540: LD_INT 1
50542: PUSH
50543: LD_INT 1
50545: NEG
50546: PUSH
50547: EMPTY
50548: LIST
50549: LIST
50550: PUSH
50551: LD_INT 2
50553: PUSH
50554: LD_INT 0
50556: PUSH
50557: EMPTY
50558: LIST
50559: LIST
50560: PUSH
50561: LD_INT 2
50563: PUSH
50564: LD_INT 1
50566: PUSH
50567: EMPTY
50568: LIST
50569: LIST
50570: PUSH
50571: LD_INT 1
50573: PUSH
50574: LD_INT 2
50576: PUSH
50577: EMPTY
50578: LIST
50579: LIST
50580: PUSH
50581: LD_INT 0
50583: PUSH
50584: LD_INT 2
50586: PUSH
50587: EMPTY
50588: LIST
50589: LIST
50590: PUSH
50591: LD_INT 1
50593: NEG
50594: PUSH
50595: LD_INT 1
50597: PUSH
50598: EMPTY
50599: LIST
50600: LIST
50601: PUSH
50602: LD_INT 2
50604: NEG
50605: PUSH
50606: LD_INT 0
50608: PUSH
50609: EMPTY
50610: LIST
50611: LIST
50612: PUSH
50613: LD_INT 2
50615: NEG
50616: PUSH
50617: LD_INT 1
50619: NEG
50620: PUSH
50621: EMPTY
50622: LIST
50623: LIST
50624: PUSH
50625: LD_INT 1
50627: NEG
50628: PUSH
50629: LD_INT 3
50631: NEG
50632: PUSH
50633: EMPTY
50634: LIST
50635: LIST
50636: PUSH
50637: LD_INT 0
50639: PUSH
50640: LD_INT 3
50642: NEG
50643: PUSH
50644: EMPTY
50645: LIST
50646: LIST
50647: PUSH
50648: LD_INT 1
50650: PUSH
50651: LD_INT 2
50653: NEG
50654: PUSH
50655: EMPTY
50656: LIST
50657: LIST
50658: PUSH
50659: LD_INT 2
50661: PUSH
50662: LD_INT 1
50664: NEG
50665: PUSH
50666: EMPTY
50667: LIST
50668: LIST
50669: PUSH
50670: LD_INT 3
50672: PUSH
50673: LD_INT 0
50675: PUSH
50676: EMPTY
50677: LIST
50678: LIST
50679: PUSH
50680: LD_INT 3
50682: PUSH
50683: LD_INT 1
50685: PUSH
50686: EMPTY
50687: LIST
50688: LIST
50689: PUSH
50690: LD_INT 1
50692: PUSH
50693: LD_INT 3
50695: PUSH
50696: EMPTY
50697: LIST
50698: LIST
50699: PUSH
50700: LD_INT 0
50702: PUSH
50703: LD_INT 3
50705: PUSH
50706: EMPTY
50707: LIST
50708: LIST
50709: PUSH
50710: LD_INT 1
50712: NEG
50713: PUSH
50714: LD_INT 2
50716: PUSH
50717: EMPTY
50718: LIST
50719: LIST
50720: PUSH
50721: LD_INT 2
50723: NEG
50724: PUSH
50725: LD_INT 1
50727: PUSH
50728: EMPTY
50729: LIST
50730: LIST
50731: PUSH
50732: LD_INT 3
50734: NEG
50735: PUSH
50736: LD_INT 0
50738: PUSH
50739: EMPTY
50740: LIST
50741: LIST
50742: PUSH
50743: LD_INT 3
50745: NEG
50746: PUSH
50747: LD_INT 1
50749: NEG
50750: PUSH
50751: EMPTY
50752: LIST
50753: LIST
50754: PUSH
50755: EMPTY
50756: LIST
50757: LIST
50758: LIST
50759: LIST
50760: LIST
50761: LIST
50762: LIST
50763: LIST
50764: LIST
50765: LIST
50766: LIST
50767: LIST
50768: LIST
50769: LIST
50770: LIST
50771: LIST
50772: LIST
50773: LIST
50774: LIST
50775: LIST
50776: LIST
50777: LIST
50778: LIST
50779: LIST
50780: LIST
50781: LIST
50782: LIST
50783: LIST
50784: LIST
50785: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50786: LD_ADDR_VAR 0 44
50790: PUSH
50791: LD_INT 0
50793: PUSH
50794: LD_INT 0
50796: PUSH
50797: EMPTY
50798: LIST
50799: LIST
50800: PUSH
50801: LD_INT 0
50803: PUSH
50804: LD_INT 1
50806: NEG
50807: PUSH
50808: EMPTY
50809: LIST
50810: LIST
50811: PUSH
50812: LD_INT 1
50814: PUSH
50815: LD_INT 0
50817: PUSH
50818: EMPTY
50819: LIST
50820: LIST
50821: PUSH
50822: LD_INT 1
50824: PUSH
50825: LD_INT 1
50827: PUSH
50828: EMPTY
50829: LIST
50830: LIST
50831: PUSH
50832: LD_INT 0
50834: PUSH
50835: LD_INT 1
50837: PUSH
50838: EMPTY
50839: LIST
50840: LIST
50841: PUSH
50842: LD_INT 1
50844: NEG
50845: PUSH
50846: LD_INT 0
50848: PUSH
50849: EMPTY
50850: LIST
50851: LIST
50852: PUSH
50853: LD_INT 1
50855: NEG
50856: PUSH
50857: LD_INT 1
50859: NEG
50860: PUSH
50861: EMPTY
50862: LIST
50863: LIST
50864: PUSH
50865: LD_INT 1
50867: NEG
50868: PUSH
50869: LD_INT 2
50871: NEG
50872: PUSH
50873: EMPTY
50874: LIST
50875: LIST
50876: PUSH
50877: LD_INT 1
50879: PUSH
50880: LD_INT 1
50882: NEG
50883: PUSH
50884: EMPTY
50885: LIST
50886: LIST
50887: PUSH
50888: LD_INT 2
50890: PUSH
50891: LD_INT 0
50893: PUSH
50894: EMPTY
50895: LIST
50896: LIST
50897: PUSH
50898: LD_INT 2
50900: PUSH
50901: LD_INT 1
50903: PUSH
50904: EMPTY
50905: LIST
50906: LIST
50907: PUSH
50908: LD_INT 2
50910: PUSH
50911: LD_INT 2
50913: PUSH
50914: EMPTY
50915: LIST
50916: LIST
50917: PUSH
50918: LD_INT 1
50920: PUSH
50921: LD_INT 2
50923: PUSH
50924: EMPTY
50925: LIST
50926: LIST
50927: PUSH
50928: LD_INT 1
50930: NEG
50931: PUSH
50932: LD_INT 1
50934: PUSH
50935: EMPTY
50936: LIST
50937: LIST
50938: PUSH
50939: LD_INT 2
50941: NEG
50942: PUSH
50943: LD_INT 0
50945: PUSH
50946: EMPTY
50947: LIST
50948: LIST
50949: PUSH
50950: LD_INT 2
50952: NEG
50953: PUSH
50954: LD_INT 1
50956: NEG
50957: PUSH
50958: EMPTY
50959: LIST
50960: LIST
50961: PUSH
50962: LD_INT 2
50964: NEG
50965: PUSH
50966: LD_INT 2
50968: NEG
50969: PUSH
50970: EMPTY
50971: LIST
50972: LIST
50973: PUSH
50974: LD_INT 2
50976: NEG
50977: PUSH
50978: LD_INT 3
50980: NEG
50981: PUSH
50982: EMPTY
50983: LIST
50984: LIST
50985: PUSH
50986: LD_INT 2
50988: PUSH
50989: LD_INT 1
50991: NEG
50992: PUSH
50993: EMPTY
50994: LIST
50995: LIST
50996: PUSH
50997: LD_INT 3
50999: PUSH
51000: LD_INT 0
51002: PUSH
51003: EMPTY
51004: LIST
51005: LIST
51006: PUSH
51007: LD_INT 3
51009: PUSH
51010: LD_INT 1
51012: PUSH
51013: EMPTY
51014: LIST
51015: LIST
51016: PUSH
51017: LD_INT 3
51019: PUSH
51020: LD_INT 2
51022: PUSH
51023: EMPTY
51024: LIST
51025: LIST
51026: PUSH
51027: LD_INT 3
51029: PUSH
51030: LD_INT 3
51032: PUSH
51033: EMPTY
51034: LIST
51035: LIST
51036: PUSH
51037: LD_INT 2
51039: PUSH
51040: LD_INT 3
51042: PUSH
51043: EMPTY
51044: LIST
51045: LIST
51046: PUSH
51047: LD_INT 2
51049: NEG
51050: PUSH
51051: LD_INT 1
51053: PUSH
51054: EMPTY
51055: LIST
51056: LIST
51057: PUSH
51058: LD_INT 3
51060: NEG
51061: PUSH
51062: LD_INT 0
51064: PUSH
51065: EMPTY
51066: LIST
51067: LIST
51068: PUSH
51069: LD_INT 3
51071: NEG
51072: PUSH
51073: LD_INT 1
51075: NEG
51076: PUSH
51077: EMPTY
51078: LIST
51079: LIST
51080: PUSH
51081: LD_INT 3
51083: NEG
51084: PUSH
51085: LD_INT 2
51087: NEG
51088: PUSH
51089: EMPTY
51090: LIST
51091: LIST
51092: PUSH
51093: LD_INT 3
51095: NEG
51096: PUSH
51097: LD_INT 3
51099: NEG
51100: PUSH
51101: EMPTY
51102: LIST
51103: LIST
51104: PUSH
51105: EMPTY
51106: LIST
51107: LIST
51108: LIST
51109: LIST
51110: LIST
51111: LIST
51112: LIST
51113: LIST
51114: LIST
51115: LIST
51116: LIST
51117: LIST
51118: LIST
51119: LIST
51120: LIST
51121: LIST
51122: LIST
51123: LIST
51124: LIST
51125: LIST
51126: LIST
51127: LIST
51128: LIST
51129: LIST
51130: LIST
51131: LIST
51132: LIST
51133: LIST
51134: LIST
51135: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51136: LD_ADDR_VAR 0 45
51140: PUSH
51141: LD_INT 0
51143: PUSH
51144: LD_INT 0
51146: PUSH
51147: EMPTY
51148: LIST
51149: LIST
51150: PUSH
51151: LD_INT 0
51153: PUSH
51154: LD_INT 1
51156: NEG
51157: PUSH
51158: EMPTY
51159: LIST
51160: LIST
51161: PUSH
51162: LD_INT 1
51164: PUSH
51165: LD_INT 0
51167: PUSH
51168: EMPTY
51169: LIST
51170: LIST
51171: PUSH
51172: LD_INT 1
51174: PUSH
51175: LD_INT 1
51177: PUSH
51178: EMPTY
51179: LIST
51180: LIST
51181: PUSH
51182: LD_INT 0
51184: PUSH
51185: LD_INT 1
51187: PUSH
51188: EMPTY
51189: LIST
51190: LIST
51191: PUSH
51192: LD_INT 1
51194: NEG
51195: PUSH
51196: LD_INT 0
51198: PUSH
51199: EMPTY
51200: LIST
51201: LIST
51202: PUSH
51203: LD_INT 1
51205: NEG
51206: PUSH
51207: LD_INT 1
51209: NEG
51210: PUSH
51211: EMPTY
51212: LIST
51213: LIST
51214: PUSH
51215: LD_INT 1
51217: NEG
51218: PUSH
51219: LD_INT 2
51221: NEG
51222: PUSH
51223: EMPTY
51224: LIST
51225: LIST
51226: PUSH
51227: LD_INT 0
51229: PUSH
51230: LD_INT 2
51232: NEG
51233: PUSH
51234: EMPTY
51235: LIST
51236: LIST
51237: PUSH
51238: LD_INT 1
51240: PUSH
51241: LD_INT 1
51243: NEG
51244: PUSH
51245: EMPTY
51246: LIST
51247: LIST
51248: PUSH
51249: LD_INT 2
51251: PUSH
51252: LD_INT 1
51254: PUSH
51255: EMPTY
51256: LIST
51257: LIST
51258: PUSH
51259: LD_INT 2
51261: PUSH
51262: LD_INT 2
51264: PUSH
51265: EMPTY
51266: LIST
51267: LIST
51268: PUSH
51269: LD_INT 1
51271: PUSH
51272: LD_INT 2
51274: PUSH
51275: EMPTY
51276: LIST
51277: LIST
51278: PUSH
51279: LD_INT 0
51281: PUSH
51282: LD_INT 2
51284: PUSH
51285: EMPTY
51286: LIST
51287: LIST
51288: PUSH
51289: LD_INT 1
51291: NEG
51292: PUSH
51293: LD_INT 1
51295: PUSH
51296: EMPTY
51297: LIST
51298: LIST
51299: PUSH
51300: LD_INT 2
51302: NEG
51303: PUSH
51304: LD_INT 1
51306: NEG
51307: PUSH
51308: EMPTY
51309: LIST
51310: LIST
51311: PUSH
51312: LD_INT 2
51314: NEG
51315: PUSH
51316: LD_INT 2
51318: NEG
51319: PUSH
51320: EMPTY
51321: LIST
51322: LIST
51323: PUSH
51324: LD_INT 2
51326: NEG
51327: PUSH
51328: LD_INT 3
51330: NEG
51331: PUSH
51332: EMPTY
51333: LIST
51334: LIST
51335: PUSH
51336: LD_INT 1
51338: NEG
51339: PUSH
51340: LD_INT 3
51342: NEG
51343: PUSH
51344: EMPTY
51345: LIST
51346: LIST
51347: PUSH
51348: LD_INT 0
51350: PUSH
51351: LD_INT 3
51353: NEG
51354: PUSH
51355: EMPTY
51356: LIST
51357: LIST
51358: PUSH
51359: LD_INT 1
51361: PUSH
51362: LD_INT 2
51364: NEG
51365: PUSH
51366: EMPTY
51367: LIST
51368: LIST
51369: PUSH
51370: LD_INT 3
51372: PUSH
51373: LD_INT 2
51375: PUSH
51376: EMPTY
51377: LIST
51378: LIST
51379: PUSH
51380: LD_INT 3
51382: PUSH
51383: LD_INT 3
51385: PUSH
51386: EMPTY
51387: LIST
51388: LIST
51389: PUSH
51390: LD_INT 2
51392: PUSH
51393: LD_INT 3
51395: PUSH
51396: EMPTY
51397: LIST
51398: LIST
51399: PUSH
51400: LD_INT 1
51402: PUSH
51403: LD_INT 3
51405: PUSH
51406: EMPTY
51407: LIST
51408: LIST
51409: PUSH
51410: LD_INT 0
51412: PUSH
51413: LD_INT 3
51415: PUSH
51416: EMPTY
51417: LIST
51418: LIST
51419: PUSH
51420: LD_INT 1
51422: NEG
51423: PUSH
51424: LD_INT 2
51426: PUSH
51427: EMPTY
51428: LIST
51429: LIST
51430: PUSH
51431: LD_INT 3
51433: NEG
51434: PUSH
51435: LD_INT 2
51437: NEG
51438: PUSH
51439: EMPTY
51440: LIST
51441: LIST
51442: PUSH
51443: LD_INT 3
51445: NEG
51446: PUSH
51447: LD_INT 3
51449: NEG
51450: PUSH
51451: EMPTY
51452: LIST
51453: LIST
51454: PUSH
51455: EMPTY
51456: LIST
51457: LIST
51458: LIST
51459: LIST
51460: LIST
51461: LIST
51462: LIST
51463: LIST
51464: LIST
51465: LIST
51466: LIST
51467: LIST
51468: LIST
51469: LIST
51470: LIST
51471: LIST
51472: LIST
51473: LIST
51474: LIST
51475: LIST
51476: LIST
51477: LIST
51478: LIST
51479: LIST
51480: LIST
51481: LIST
51482: LIST
51483: LIST
51484: LIST
51485: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51486: LD_ADDR_VAR 0 46
51490: PUSH
51491: LD_INT 0
51493: PUSH
51494: LD_INT 0
51496: PUSH
51497: EMPTY
51498: LIST
51499: LIST
51500: PUSH
51501: LD_INT 0
51503: PUSH
51504: LD_INT 1
51506: NEG
51507: PUSH
51508: EMPTY
51509: LIST
51510: LIST
51511: PUSH
51512: LD_INT 1
51514: PUSH
51515: LD_INT 0
51517: PUSH
51518: EMPTY
51519: LIST
51520: LIST
51521: PUSH
51522: LD_INT 1
51524: PUSH
51525: LD_INT 1
51527: PUSH
51528: EMPTY
51529: LIST
51530: LIST
51531: PUSH
51532: LD_INT 0
51534: PUSH
51535: LD_INT 1
51537: PUSH
51538: EMPTY
51539: LIST
51540: LIST
51541: PUSH
51542: LD_INT 1
51544: NEG
51545: PUSH
51546: LD_INT 0
51548: PUSH
51549: EMPTY
51550: LIST
51551: LIST
51552: PUSH
51553: LD_INT 1
51555: NEG
51556: PUSH
51557: LD_INT 1
51559: NEG
51560: PUSH
51561: EMPTY
51562: LIST
51563: LIST
51564: PUSH
51565: LD_INT 1
51567: NEG
51568: PUSH
51569: LD_INT 2
51571: NEG
51572: PUSH
51573: EMPTY
51574: LIST
51575: LIST
51576: PUSH
51577: LD_INT 0
51579: PUSH
51580: LD_INT 2
51582: NEG
51583: PUSH
51584: EMPTY
51585: LIST
51586: LIST
51587: PUSH
51588: LD_INT 1
51590: PUSH
51591: LD_INT 1
51593: NEG
51594: PUSH
51595: EMPTY
51596: LIST
51597: LIST
51598: PUSH
51599: LD_INT 2
51601: PUSH
51602: LD_INT 0
51604: PUSH
51605: EMPTY
51606: LIST
51607: LIST
51608: PUSH
51609: LD_INT 2
51611: PUSH
51612: LD_INT 1
51614: PUSH
51615: EMPTY
51616: LIST
51617: LIST
51618: PUSH
51619: LD_INT 1
51621: PUSH
51622: LD_INT 2
51624: PUSH
51625: EMPTY
51626: LIST
51627: LIST
51628: PUSH
51629: LD_INT 0
51631: PUSH
51632: LD_INT 2
51634: PUSH
51635: EMPTY
51636: LIST
51637: LIST
51638: PUSH
51639: LD_INT 1
51641: NEG
51642: PUSH
51643: LD_INT 1
51645: PUSH
51646: EMPTY
51647: LIST
51648: LIST
51649: PUSH
51650: LD_INT 2
51652: NEG
51653: PUSH
51654: LD_INT 0
51656: PUSH
51657: EMPTY
51658: LIST
51659: LIST
51660: PUSH
51661: LD_INT 2
51663: NEG
51664: PUSH
51665: LD_INT 1
51667: NEG
51668: PUSH
51669: EMPTY
51670: LIST
51671: LIST
51672: PUSH
51673: LD_INT 1
51675: NEG
51676: PUSH
51677: LD_INT 3
51679: NEG
51680: PUSH
51681: EMPTY
51682: LIST
51683: LIST
51684: PUSH
51685: LD_INT 0
51687: PUSH
51688: LD_INT 3
51690: NEG
51691: PUSH
51692: EMPTY
51693: LIST
51694: LIST
51695: PUSH
51696: LD_INT 1
51698: PUSH
51699: LD_INT 2
51701: NEG
51702: PUSH
51703: EMPTY
51704: LIST
51705: LIST
51706: PUSH
51707: LD_INT 2
51709: PUSH
51710: LD_INT 1
51712: NEG
51713: PUSH
51714: EMPTY
51715: LIST
51716: LIST
51717: PUSH
51718: LD_INT 3
51720: PUSH
51721: LD_INT 0
51723: PUSH
51724: EMPTY
51725: LIST
51726: LIST
51727: PUSH
51728: LD_INT 3
51730: PUSH
51731: LD_INT 1
51733: PUSH
51734: EMPTY
51735: LIST
51736: LIST
51737: PUSH
51738: LD_INT 1
51740: PUSH
51741: LD_INT 3
51743: PUSH
51744: EMPTY
51745: LIST
51746: LIST
51747: PUSH
51748: LD_INT 0
51750: PUSH
51751: LD_INT 3
51753: PUSH
51754: EMPTY
51755: LIST
51756: LIST
51757: PUSH
51758: LD_INT 1
51760: NEG
51761: PUSH
51762: LD_INT 2
51764: PUSH
51765: EMPTY
51766: LIST
51767: LIST
51768: PUSH
51769: LD_INT 2
51771: NEG
51772: PUSH
51773: LD_INT 1
51775: PUSH
51776: EMPTY
51777: LIST
51778: LIST
51779: PUSH
51780: LD_INT 3
51782: NEG
51783: PUSH
51784: LD_INT 0
51786: PUSH
51787: EMPTY
51788: LIST
51789: LIST
51790: PUSH
51791: LD_INT 3
51793: NEG
51794: PUSH
51795: LD_INT 1
51797: NEG
51798: PUSH
51799: EMPTY
51800: LIST
51801: LIST
51802: PUSH
51803: EMPTY
51804: LIST
51805: LIST
51806: LIST
51807: LIST
51808: LIST
51809: LIST
51810: LIST
51811: LIST
51812: LIST
51813: LIST
51814: LIST
51815: LIST
51816: LIST
51817: LIST
51818: LIST
51819: LIST
51820: LIST
51821: LIST
51822: LIST
51823: LIST
51824: LIST
51825: LIST
51826: LIST
51827: LIST
51828: LIST
51829: LIST
51830: LIST
51831: LIST
51832: LIST
51833: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51834: LD_ADDR_VAR 0 47
51838: PUSH
51839: LD_INT 0
51841: PUSH
51842: LD_INT 0
51844: PUSH
51845: EMPTY
51846: LIST
51847: LIST
51848: PUSH
51849: LD_INT 0
51851: PUSH
51852: LD_INT 1
51854: NEG
51855: PUSH
51856: EMPTY
51857: LIST
51858: LIST
51859: PUSH
51860: LD_INT 1
51862: PUSH
51863: LD_INT 0
51865: PUSH
51866: EMPTY
51867: LIST
51868: LIST
51869: PUSH
51870: LD_INT 1
51872: PUSH
51873: LD_INT 1
51875: PUSH
51876: EMPTY
51877: LIST
51878: LIST
51879: PUSH
51880: LD_INT 0
51882: PUSH
51883: LD_INT 1
51885: PUSH
51886: EMPTY
51887: LIST
51888: LIST
51889: PUSH
51890: LD_INT 1
51892: NEG
51893: PUSH
51894: LD_INT 0
51896: PUSH
51897: EMPTY
51898: LIST
51899: LIST
51900: PUSH
51901: LD_INT 1
51903: NEG
51904: PUSH
51905: LD_INT 1
51907: NEG
51908: PUSH
51909: EMPTY
51910: LIST
51911: LIST
51912: PUSH
51913: LD_INT 1
51915: NEG
51916: PUSH
51917: LD_INT 2
51919: NEG
51920: PUSH
51921: EMPTY
51922: LIST
51923: LIST
51924: PUSH
51925: LD_INT 0
51927: PUSH
51928: LD_INT 2
51930: NEG
51931: PUSH
51932: EMPTY
51933: LIST
51934: LIST
51935: PUSH
51936: LD_INT 1
51938: PUSH
51939: LD_INT 1
51941: NEG
51942: PUSH
51943: EMPTY
51944: LIST
51945: LIST
51946: PUSH
51947: LD_INT 2
51949: NEG
51950: PUSH
51951: LD_INT 1
51953: NEG
51954: PUSH
51955: EMPTY
51956: LIST
51957: LIST
51958: PUSH
51959: LD_INT 2
51961: NEG
51962: PUSH
51963: LD_INT 2
51965: NEG
51966: PUSH
51967: EMPTY
51968: LIST
51969: LIST
51970: PUSH
51971: EMPTY
51972: LIST
51973: LIST
51974: LIST
51975: LIST
51976: LIST
51977: LIST
51978: LIST
51979: LIST
51980: LIST
51981: LIST
51982: LIST
51983: LIST
51984: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
51985: LD_ADDR_VAR 0 48
51989: PUSH
51990: LD_INT 0
51992: PUSH
51993: LD_INT 0
51995: PUSH
51996: EMPTY
51997: LIST
51998: LIST
51999: PUSH
52000: LD_INT 0
52002: PUSH
52003: LD_INT 1
52005: NEG
52006: PUSH
52007: EMPTY
52008: LIST
52009: LIST
52010: PUSH
52011: LD_INT 1
52013: PUSH
52014: LD_INT 0
52016: PUSH
52017: EMPTY
52018: LIST
52019: LIST
52020: PUSH
52021: LD_INT 1
52023: PUSH
52024: LD_INT 1
52026: PUSH
52027: EMPTY
52028: LIST
52029: LIST
52030: PUSH
52031: LD_INT 0
52033: PUSH
52034: LD_INT 1
52036: PUSH
52037: EMPTY
52038: LIST
52039: LIST
52040: PUSH
52041: LD_INT 1
52043: NEG
52044: PUSH
52045: LD_INT 0
52047: PUSH
52048: EMPTY
52049: LIST
52050: LIST
52051: PUSH
52052: LD_INT 1
52054: NEG
52055: PUSH
52056: LD_INT 1
52058: NEG
52059: PUSH
52060: EMPTY
52061: LIST
52062: LIST
52063: PUSH
52064: LD_INT 1
52066: NEG
52067: PUSH
52068: LD_INT 2
52070: NEG
52071: PUSH
52072: EMPTY
52073: LIST
52074: LIST
52075: PUSH
52076: LD_INT 0
52078: PUSH
52079: LD_INT 2
52081: NEG
52082: PUSH
52083: EMPTY
52084: LIST
52085: LIST
52086: PUSH
52087: LD_INT 1
52089: PUSH
52090: LD_INT 1
52092: NEG
52093: PUSH
52094: EMPTY
52095: LIST
52096: LIST
52097: PUSH
52098: LD_INT 2
52100: PUSH
52101: LD_INT 0
52103: PUSH
52104: EMPTY
52105: LIST
52106: LIST
52107: PUSH
52108: LD_INT 2
52110: PUSH
52111: LD_INT 1
52113: PUSH
52114: EMPTY
52115: LIST
52116: LIST
52117: PUSH
52118: EMPTY
52119: LIST
52120: LIST
52121: LIST
52122: LIST
52123: LIST
52124: LIST
52125: LIST
52126: LIST
52127: LIST
52128: LIST
52129: LIST
52130: LIST
52131: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
52132: LD_ADDR_VAR 0 49
52136: PUSH
52137: LD_INT 0
52139: PUSH
52140: LD_INT 0
52142: PUSH
52143: EMPTY
52144: LIST
52145: LIST
52146: PUSH
52147: LD_INT 0
52149: PUSH
52150: LD_INT 1
52152: NEG
52153: PUSH
52154: EMPTY
52155: LIST
52156: LIST
52157: PUSH
52158: LD_INT 1
52160: PUSH
52161: LD_INT 0
52163: PUSH
52164: EMPTY
52165: LIST
52166: LIST
52167: PUSH
52168: LD_INT 1
52170: PUSH
52171: LD_INT 1
52173: PUSH
52174: EMPTY
52175: LIST
52176: LIST
52177: PUSH
52178: LD_INT 0
52180: PUSH
52181: LD_INT 1
52183: PUSH
52184: EMPTY
52185: LIST
52186: LIST
52187: PUSH
52188: LD_INT 1
52190: NEG
52191: PUSH
52192: LD_INT 0
52194: PUSH
52195: EMPTY
52196: LIST
52197: LIST
52198: PUSH
52199: LD_INT 1
52201: NEG
52202: PUSH
52203: LD_INT 1
52205: NEG
52206: PUSH
52207: EMPTY
52208: LIST
52209: LIST
52210: PUSH
52211: LD_INT 1
52213: PUSH
52214: LD_INT 1
52216: NEG
52217: PUSH
52218: EMPTY
52219: LIST
52220: LIST
52221: PUSH
52222: LD_INT 2
52224: PUSH
52225: LD_INT 0
52227: PUSH
52228: EMPTY
52229: LIST
52230: LIST
52231: PUSH
52232: LD_INT 2
52234: PUSH
52235: LD_INT 1
52237: PUSH
52238: EMPTY
52239: LIST
52240: LIST
52241: PUSH
52242: LD_INT 2
52244: PUSH
52245: LD_INT 2
52247: PUSH
52248: EMPTY
52249: LIST
52250: LIST
52251: PUSH
52252: LD_INT 1
52254: PUSH
52255: LD_INT 2
52257: PUSH
52258: EMPTY
52259: LIST
52260: LIST
52261: PUSH
52262: EMPTY
52263: LIST
52264: LIST
52265: LIST
52266: LIST
52267: LIST
52268: LIST
52269: LIST
52270: LIST
52271: LIST
52272: LIST
52273: LIST
52274: LIST
52275: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
52276: LD_ADDR_VAR 0 50
52280: PUSH
52281: LD_INT 0
52283: PUSH
52284: LD_INT 0
52286: PUSH
52287: EMPTY
52288: LIST
52289: LIST
52290: PUSH
52291: LD_INT 0
52293: PUSH
52294: LD_INT 1
52296: NEG
52297: PUSH
52298: EMPTY
52299: LIST
52300: LIST
52301: PUSH
52302: LD_INT 1
52304: PUSH
52305: LD_INT 0
52307: PUSH
52308: EMPTY
52309: LIST
52310: LIST
52311: PUSH
52312: LD_INT 1
52314: PUSH
52315: LD_INT 1
52317: PUSH
52318: EMPTY
52319: LIST
52320: LIST
52321: PUSH
52322: LD_INT 0
52324: PUSH
52325: LD_INT 1
52327: PUSH
52328: EMPTY
52329: LIST
52330: LIST
52331: PUSH
52332: LD_INT 1
52334: NEG
52335: PUSH
52336: LD_INT 0
52338: PUSH
52339: EMPTY
52340: LIST
52341: LIST
52342: PUSH
52343: LD_INT 1
52345: NEG
52346: PUSH
52347: LD_INT 1
52349: NEG
52350: PUSH
52351: EMPTY
52352: LIST
52353: LIST
52354: PUSH
52355: LD_INT 2
52357: PUSH
52358: LD_INT 1
52360: PUSH
52361: EMPTY
52362: LIST
52363: LIST
52364: PUSH
52365: LD_INT 2
52367: PUSH
52368: LD_INT 2
52370: PUSH
52371: EMPTY
52372: LIST
52373: LIST
52374: PUSH
52375: LD_INT 1
52377: PUSH
52378: LD_INT 2
52380: PUSH
52381: EMPTY
52382: LIST
52383: LIST
52384: PUSH
52385: LD_INT 0
52387: PUSH
52388: LD_INT 2
52390: PUSH
52391: EMPTY
52392: LIST
52393: LIST
52394: PUSH
52395: LD_INT 1
52397: NEG
52398: PUSH
52399: LD_INT 1
52401: PUSH
52402: EMPTY
52403: LIST
52404: LIST
52405: PUSH
52406: EMPTY
52407: LIST
52408: LIST
52409: LIST
52410: LIST
52411: LIST
52412: LIST
52413: LIST
52414: LIST
52415: LIST
52416: LIST
52417: LIST
52418: LIST
52419: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
52420: LD_ADDR_VAR 0 51
52424: PUSH
52425: LD_INT 0
52427: PUSH
52428: LD_INT 0
52430: PUSH
52431: EMPTY
52432: LIST
52433: LIST
52434: PUSH
52435: LD_INT 0
52437: PUSH
52438: LD_INT 1
52440: NEG
52441: PUSH
52442: EMPTY
52443: LIST
52444: LIST
52445: PUSH
52446: LD_INT 1
52448: PUSH
52449: LD_INT 0
52451: PUSH
52452: EMPTY
52453: LIST
52454: LIST
52455: PUSH
52456: LD_INT 1
52458: PUSH
52459: LD_INT 1
52461: PUSH
52462: EMPTY
52463: LIST
52464: LIST
52465: PUSH
52466: LD_INT 0
52468: PUSH
52469: LD_INT 1
52471: PUSH
52472: EMPTY
52473: LIST
52474: LIST
52475: PUSH
52476: LD_INT 1
52478: NEG
52479: PUSH
52480: LD_INT 0
52482: PUSH
52483: EMPTY
52484: LIST
52485: LIST
52486: PUSH
52487: LD_INT 1
52489: NEG
52490: PUSH
52491: LD_INT 1
52493: NEG
52494: PUSH
52495: EMPTY
52496: LIST
52497: LIST
52498: PUSH
52499: LD_INT 1
52501: PUSH
52502: LD_INT 2
52504: PUSH
52505: EMPTY
52506: LIST
52507: LIST
52508: PUSH
52509: LD_INT 0
52511: PUSH
52512: LD_INT 2
52514: PUSH
52515: EMPTY
52516: LIST
52517: LIST
52518: PUSH
52519: LD_INT 1
52521: NEG
52522: PUSH
52523: LD_INT 1
52525: PUSH
52526: EMPTY
52527: LIST
52528: LIST
52529: PUSH
52530: LD_INT 2
52532: NEG
52533: PUSH
52534: LD_INT 0
52536: PUSH
52537: EMPTY
52538: LIST
52539: LIST
52540: PUSH
52541: LD_INT 2
52543: NEG
52544: PUSH
52545: LD_INT 1
52547: NEG
52548: PUSH
52549: EMPTY
52550: LIST
52551: LIST
52552: PUSH
52553: EMPTY
52554: LIST
52555: LIST
52556: LIST
52557: LIST
52558: LIST
52559: LIST
52560: LIST
52561: LIST
52562: LIST
52563: LIST
52564: LIST
52565: LIST
52566: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52567: LD_ADDR_VAR 0 52
52571: PUSH
52572: LD_INT 0
52574: PUSH
52575: LD_INT 0
52577: PUSH
52578: EMPTY
52579: LIST
52580: LIST
52581: PUSH
52582: LD_INT 0
52584: PUSH
52585: LD_INT 1
52587: NEG
52588: PUSH
52589: EMPTY
52590: LIST
52591: LIST
52592: PUSH
52593: LD_INT 1
52595: PUSH
52596: LD_INT 0
52598: PUSH
52599: EMPTY
52600: LIST
52601: LIST
52602: PUSH
52603: LD_INT 1
52605: PUSH
52606: LD_INT 1
52608: PUSH
52609: EMPTY
52610: LIST
52611: LIST
52612: PUSH
52613: LD_INT 0
52615: PUSH
52616: LD_INT 1
52618: PUSH
52619: EMPTY
52620: LIST
52621: LIST
52622: PUSH
52623: LD_INT 1
52625: NEG
52626: PUSH
52627: LD_INT 0
52629: PUSH
52630: EMPTY
52631: LIST
52632: LIST
52633: PUSH
52634: LD_INT 1
52636: NEG
52637: PUSH
52638: LD_INT 1
52640: NEG
52641: PUSH
52642: EMPTY
52643: LIST
52644: LIST
52645: PUSH
52646: LD_INT 1
52648: NEG
52649: PUSH
52650: LD_INT 2
52652: NEG
52653: PUSH
52654: EMPTY
52655: LIST
52656: LIST
52657: PUSH
52658: LD_INT 1
52660: NEG
52661: PUSH
52662: LD_INT 1
52664: PUSH
52665: EMPTY
52666: LIST
52667: LIST
52668: PUSH
52669: LD_INT 2
52671: NEG
52672: PUSH
52673: LD_INT 0
52675: PUSH
52676: EMPTY
52677: LIST
52678: LIST
52679: PUSH
52680: LD_INT 2
52682: NEG
52683: PUSH
52684: LD_INT 1
52686: NEG
52687: PUSH
52688: EMPTY
52689: LIST
52690: LIST
52691: PUSH
52692: LD_INT 2
52694: NEG
52695: PUSH
52696: LD_INT 2
52698: NEG
52699: PUSH
52700: EMPTY
52701: LIST
52702: LIST
52703: PUSH
52704: EMPTY
52705: LIST
52706: LIST
52707: LIST
52708: LIST
52709: LIST
52710: LIST
52711: LIST
52712: LIST
52713: LIST
52714: LIST
52715: LIST
52716: LIST
52717: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52718: LD_ADDR_VAR 0 53
52722: PUSH
52723: LD_INT 0
52725: PUSH
52726: LD_INT 0
52728: PUSH
52729: EMPTY
52730: LIST
52731: LIST
52732: PUSH
52733: LD_INT 0
52735: PUSH
52736: LD_INT 1
52738: NEG
52739: PUSH
52740: EMPTY
52741: LIST
52742: LIST
52743: PUSH
52744: LD_INT 1
52746: PUSH
52747: LD_INT 0
52749: PUSH
52750: EMPTY
52751: LIST
52752: LIST
52753: PUSH
52754: LD_INT 1
52756: PUSH
52757: LD_INT 1
52759: PUSH
52760: EMPTY
52761: LIST
52762: LIST
52763: PUSH
52764: LD_INT 0
52766: PUSH
52767: LD_INT 1
52769: PUSH
52770: EMPTY
52771: LIST
52772: LIST
52773: PUSH
52774: LD_INT 1
52776: NEG
52777: PUSH
52778: LD_INT 0
52780: PUSH
52781: EMPTY
52782: LIST
52783: LIST
52784: PUSH
52785: LD_INT 1
52787: NEG
52788: PUSH
52789: LD_INT 1
52791: NEG
52792: PUSH
52793: EMPTY
52794: LIST
52795: LIST
52796: PUSH
52797: LD_INT 1
52799: NEG
52800: PUSH
52801: LD_INT 2
52803: NEG
52804: PUSH
52805: EMPTY
52806: LIST
52807: LIST
52808: PUSH
52809: LD_INT 0
52811: PUSH
52812: LD_INT 2
52814: NEG
52815: PUSH
52816: EMPTY
52817: LIST
52818: LIST
52819: PUSH
52820: LD_INT 1
52822: PUSH
52823: LD_INT 1
52825: NEG
52826: PUSH
52827: EMPTY
52828: LIST
52829: LIST
52830: PUSH
52831: LD_INT 2
52833: PUSH
52834: LD_INT 0
52836: PUSH
52837: EMPTY
52838: LIST
52839: LIST
52840: PUSH
52841: LD_INT 2
52843: PUSH
52844: LD_INT 1
52846: PUSH
52847: EMPTY
52848: LIST
52849: LIST
52850: PUSH
52851: LD_INT 2
52853: PUSH
52854: LD_INT 2
52856: PUSH
52857: EMPTY
52858: LIST
52859: LIST
52860: PUSH
52861: LD_INT 1
52863: PUSH
52864: LD_INT 2
52866: PUSH
52867: EMPTY
52868: LIST
52869: LIST
52870: PUSH
52871: LD_INT 0
52873: PUSH
52874: LD_INT 2
52876: PUSH
52877: EMPTY
52878: LIST
52879: LIST
52880: PUSH
52881: LD_INT 1
52883: NEG
52884: PUSH
52885: LD_INT 1
52887: PUSH
52888: EMPTY
52889: LIST
52890: LIST
52891: PUSH
52892: LD_INT 2
52894: NEG
52895: PUSH
52896: LD_INT 0
52898: PUSH
52899: EMPTY
52900: LIST
52901: LIST
52902: PUSH
52903: LD_INT 2
52905: NEG
52906: PUSH
52907: LD_INT 1
52909: NEG
52910: PUSH
52911: EMPTY
52912: LIST
52913: LIST
52914: PUSH
52915: LD_INT 2
52917: NEG
52918: PUSH
52919: LD_INT 2
52921: NEG
52922: PUSH
52923: EMPTY
52924: LIST
52925: LIST
52926: PUSH
52927: EMPTY
52928: LIST
52929: LIST
52930: LIST
52931: LIST
52932: LIST
52933: LIST
52934: LIST
52935: LIST
52936: LIST
52937: LIST
52938: LIST
52939: LIST
52940: LIST
52941: LIST
52942: LIST
52943: LIST
52944: LIST
52945: LIST
52946: LIST
52947: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52948: LD_ADDR_VAR 0 54
52952: PUSH
52953: LD_INT 0
52955: PUSH
52956: LD_INT 0
52958: PUSH
52959: EMPTY
52960: LIST
52961: LIST
52962: PUSH
52963: LD_INT 0
52965: PUSH
52966: LD_INT 1
52968: NEG
52969: PUSH
52970: EMPTY
52971: LIST
52972: LIST
52973: PUSH
52974: LD_INT 1
52976: PUSH
52977: LD_INT 0
52979: PUSH
52980: EMPTY
52981: LIST
52982: LIST
52983: PUSH
52984: LD_INT 1
52986: PUSH
52987: LD_INT 1
52989: PUSH
52990: EMPTY
52991: LIST
52992: LIST
52993: PUSH
52994: LD_INT 0
52996: PUSH
52997: LD_INT 1
52999: PUSH
53000: EMPTY
53001: LIST
53002: LIST
53003: PUSH
53004: LD_INT 1
53006: NEG
53007: PUSH
53008: LD_INT 0
53010: PUSH
53011: EMPTY
53012: LIST
53013: LIST
53014: PUSH
53015: LD_INT 1
53017: NEG
53018: PUSH
53019: LD_INT 1
53021: NEG
53022: PUSH
53023: EMPTY
53024: LIST
53025: LIST
53026: PUSH
53027: LD_INT 1
53029: NEG
53030: PUSH
53031: LD_INT 2
53033: NEG
53034: PUSH
53035: EMPTY
53036: LIST
53037: LIST
53038: PUSH
53039: LD_INT 0
53041: PUSH
53042: LD_INT 2
53044: NEG
53045: PUSH
53046: EMPTY
53047: LIST
53048: LIST
53049: PUSH
53050: LD_INT 1
53052: PUSH
53053: LD_INT 1
53055: NEG
53056: PUSH
53057: EMPTY
53058: LIST
53059: LIST
53060: PUSH
53061: LD_INT 2
53063: PUSH
53064: LD_INT 0
53066: PUSH
53067: EMPTY
53068: LIST
53069: LIST
53070: PUSH
53071: LD_INT 2
53073: PUSH
53074: LD_INT 1
53076: PUSH
53077: EMPTY
53078: LIST
53079: LIST
53080: PUSH
53081: LD_INT 2
53083: PUSH
53084: LD_INT 2
53086: PUSH
53087: EMPTY
53088: LIST
53089: LIST
53090: PUSH
53091: LD_INT 1
53093: PUSH
53094: LD_INT 2
53096: PUSH
53097: EMPTY
53098: LIST
53099: LIST
53100: PUSH
53101: LD_INT 0
53103: PUSH
53104: LD_INT 2
53106: PUSH
53107: EMPTY
53108: LIST
53109: LIST
53110: PUSH
53111: LD_INT 1
53113: NEG
53114: PUSH
53115: LD_INT 1
53117: PUSH
53118: EMPTY
53119: LIST
53120: LIST
53121: PUSH
53122: LD_INT 2
53124: NEG
53125: PUSH
53126: LD_INT 0
53128: PUSH
53129: EMPTY
53130: LIST
53131: LIST
53132: PUSH
53133: LD_INT 2
53135: NEG
53136: PUSH
53137: LD_INT 1
53139: NEG
53140: PUSH
53141: EMPTY
53142: LIST
53143: LIST
53144: PUSH
53145: LD_INT 2
53147: NEG
53148: PUSH
53149: LD_INT 2
53151: NEG
53152: PUSH
53153: EMPTY
53154: LIST
53155: LIST
53156: PUSH
53157: EMPTY
53158: LIST
53159: LIST
53160: LIST
53161: LIST
53162: LIST
53163: LIST
53164: LIST
53165: LIST
53166: LIST
53167: LIST
53168: LIST
53169: LIST
53170: LIST
53171: LIST
53172: LIST
53173: LIST
53174: LIST
53175: LIST
53176: LIST
53177: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53178: LD_ADDR_VAR 0 55
53182: PUSH
53183: LD_INT 0
53185: PUSH
53186: LD_INT 0
53188: PUSH
53189: EMPTY
53190: LIST
53191: LIST
53192: PUSH
53193: LD_INT 0
53195: PUSH
53196: LD_INT 1
53198: NEG
53199: PUSH
53200: EMPTY
53201: LIST
53202: LIST
53203: PUSH
53204: LD_INT 1
53206: PUSH
53207: LD_INT 0
53209: PUSH
53210: EMPTY
53211: LIST
53212: LIST
53213: PUSH
53214: LD_INT 1
53216: PUSH
53217: LD_INT 1
53219: PUSH
53220: EMPTY
53221: LIST
53222: LIST
53223: PUSH
53224: LD_INT 0
53226: PUSH
53227: LD_INT 1
53229: PUSH
53230: EMPTY
53231: LIST
53232: LIST
53233: PUSH
53234: LD_INT 1
53236: NEG
53237: PUSH
53238: LD_INT 0
53240: PUSH
53241: EMPTY
53242: LIST
53243: LIST
53244: PUSH
53245: LD_INT 1
53247: NEG
53248: PUSH
53249: LD_INT 1
53251: NEG
53252: PUSH
53253: EMPTY
53254: LIST
53255: LIST
53256: PUSH
53257: LD_INT 1
53259: NEG
53260: PUSH
53261: LD_INT 2
53263: NEG
53264: PUSH
53265: EMPTY
53266: LIST
53267: LIST
53268: PUSH
53269: LD_INT 0
53271: PUSH
53272: LD_INT 2
53274: NEG
53275: PUSH
53276: EMPTY
53277: LIST
53278: LIST
53279: PUSH
53280: LD_INT 1
53282: PUSH
53283: LD_INT 1
53285: NEG
53286: PUSH
53287: EMPTY
53288: LIST
53289: LIST
53290: PUSH
53291: LD_INT 2
53293: PUSH
53294: LD_INT 0
53296: PUSH
53297: EMPTY
53298: LIST
53299: LIST
53300: PUSH
53301: LD_INT 2
53303: PUSH
53304: LD_INT 1
53306: PUSH
53307: EMPTY
53308: LIST
53309: LIST
53310: PUSH
53311: LD_INT 2
53313: PUSH
53314: LD_INT 2
53316: PUSH
53317: EMPTY
53318: LIST
53319: LIST
53320: PUSH
53321: LD_INT 1
53323: PUSH
53324: LD_INT 2
53326: PUSH
53327: EMPTY
53328: LIST
53329: LIST
53330: PUSH
53331: LD_INT 0
53333: PUSH
53334: LD_INT 2
53336: PUSH
53337: EMPTY
53338: LIST
53339: LIST
53340: PUSH
53341: LD_INT 1
53343: NEG
53344: PUSH
53345: LD_INT 1
53347: PUSH
53348: EMPTY
53349: LIST
53350: LIST
53351: PUSH
53352: LD_INT 2
53354: NEG
53355: PUSH
53356: LD_INT 0
53358: PUSH
53359: EMPTY
53360: LIST
53361: LIST
53362: PUSH
53363: LD_INT 2
53365: NEG
53366: PUSH
53367: LD_INT 1
53369: NEG
53370: PUSH
53371: EMPTY
53372: LIST
53373: LIST
53374: PUSH
53375: LD_INT 2
53377: NEG
53378: PUSH
53379: LD_INT 2
53381: NEG
53382: PUSH
53383: EMPTY
53384: LIST
53385: LIST
53386: PUSH
53387: EMPTY
53388: LIST
53389: LIST
53390: LIST
53391: LIST
53392: LIST
53393: LIST
53394: LIST
53395: LIST
53396: LIST
53397: LIST
53398: LIST
53399: LIST
53400: LIST
53401: LIST
53402: LIST
53403: LIST
53404: LIST
53405: LIST
53406: LIST
53407: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53408: LD_ADDR_VAR 0 56
53412: PUSH
53413: LD_INT 0
53415: PUSH
53416: LD_INT 0
53418: PUSH
53419: EMPTY
53420: LIST
53421: LIST
53422: PUSH
53423: LD_INT 0
53425: PUSH
53426: LD_INT 1
53428: NEG
53429: PUSH
53430: EMPTY
53431: LIST
53432: LIST
53433: PUSH
53434: LD_INT 1
53436: PUSH
53437: LD_INT 0
53439: PUSH
53440: EMPTY
53441: LIST
53442: LIST
53443: PUSH
53444: LD_INT 1
53446: PUSH
53447: LD_INT 1
53449: PUSH
53450: EMPTY
53451: LIST
53452: LIST
53453: PUSH
53454: LD_INT 0
53456: PUSH
53457: LD_INT 1
53459: PUSH
53460: EMPTY
53461: LIST
53462: LIST
53463: PUSH
53464: LD_INT 1
53466: NEG
53467: PUSH
53468: LD_INT 0
53470: PUSH
53471: EMPTY
53472: LIST
53473: LIST
53474: PUSH
53475: LD_INT 1
53477: NEG
53478: PUSH
53479: LD_INT 1
53481: NEG
53482: PUSH
53483: EMPTY
53484: LIST
53485: LIST
53486: PUSH
53487: LD_INT 1
53489: NEG
53490: PUSH
53491: LD_INT 2
53493: NEG
53494: PUSH
53495: EMPTY
53496: LIST
53497: LIST
53498: PUSH
53499: LD_INT 0
53501: PUSH
53502: LD_INT 2
53504: NEG
53505: PUSH
53506: EMPTY
53507: LIST
53508: LIST
53509: PUSH
53510: LD_INT 1
53512: PUSH
53513: LD_INT 1
53515: NEG
53516: PUSH
53517: EMPTY
53518: LIST
53519: LIST
53520: PUSH
53521: LD_INT 2
53523: PUSH
53524: LD_INT 0
53526: PUSH
53527: EMPTY
53528: LIST
53529: LIST
53530: PUSH
53531: LD_INT 2
53533: PUSH
53534: LD_INT 1
53536: PUSH
53537: EMPTY
53538: LIST
53539: LIST
53540: PUSH
53541: LD_INT 2
53543: PUSH
53544: LD_INT 2
53546: PUSH
53547: EMPTY
53548: LIST
53549: LIST
53550: PUSH
53551: LD_INT 1
53553: PUSH
53554: LD_INT 2
53556: PUSH
53557: EMPTY
53558: LIST
53559: LIST
53560: PUSH
53561: LD_INT 0
53563: PUSH
53564: LD_INT 2
53566: PUSH
53567: EMPTY
53568: LIST
53569: LIST
53570: PUSH
53571: LD_INT 1
53573: NEG
53574: PUSH
53575: LD_INT 1
53577: PUSH
53578: EMPTY
53579: LIST
53580: LIST
53581: PUSH
53582: LD_INT 2
53584: NEG
53585: PUSH
53586: LD_INT 0
53588: PUSH
53589: EMPTY
53590: LIST
53591: LIST
53592: PUSH
53593: LD_INT 2
53595: NEG
53596: PUSH
53597: LD_INT 1
53599: NEG
53600: PUSH
53601: EMPTY
53602: LIST
53603: LIST
53604: PUSH
53605: LD_INT 2
53607: NEG
53608: PUSH
53609: LD_INT 2
53611: NEG
53612: PUSH
53613: EMPTY
53614: LIST
53615: LIST
53616: PUSH
53617: EMPTY
53618: LIST
53619: LIST
53620: LIST
53621: LIST
53622: LIST
53623: LIST
53624: LIST
53625: LIST
53626: LIST
53627: LIST
53628: LIST
53629: LIST
53630: LIST
53631: LIST
53632: LIST
53633: LIST
53634: LIST
53635: LIST
53636: LIST
53637: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53638: LD_ADDR_VAR 0 57
53642: PUSH
53643: LD_INT 0
53645: PUSH
53646: LD_INT 0
53648: PUSH
53649: EMPTY
53650: LIST
53651: LIST
53652: PUSH
53653: LD_INT 0
53655: PUSH
53656: LD_INT 1
53658: NEG
53659: PUSH
53660: EMPTY
53661: LIST
53662: LIST
53663: PUSH
53664: LD_INT 1
53666: PUSH
53667: LD_INT 0
53669: PUSH
53670: EMPTY
53671: LIST
53672: LIST
53673: PUSH
53674: LD_INT 1
53676: PUSH
53677: LD_INT 1
53679: PUSH
53680: EMPTY
53681: LIST
53682: LIST
53683: PUSH
53684: LD_INT 0
53686: PUSH
53687: LD_INT 1
53689: PUSH
53690: EMPTY
53691: LIST
53692: LIST
53693: PUSH
53694: LD_INT 1
53696: NEG
53697: PUSH
53698: LD_INT 0
53700: PUSH
53701: EMPTY
53702: LIST
53703: LIST
53704: PUSH
53705: LD_INT 1
53707: NEG
53708: PUSH
53709: LD_INT 1
53711: NEG
53712: PUSH
53713: EMPTY
53714: LIST
53715: LIST
53716: PUSH
53717: LD_INT 1
53719: NEG
53720: PUSH
53721: LD_INT 2
53723: NEG
53724: PUSH
53725: EMPTY
53726: LIST
53727: LIST
53728: PUSH
53729: LD_INT 0
53731: PUSH
53732: LD_INT 2
53734: NEG
53735: PUSH
53736: EMPTY
53737: LIST
53738: LIST
53739: PUSH
53740: LD_INT 1
53742: PUSH
53743: LD_INT 1
53745: NEG
53746: PUSH
53747: EMPTY
53748: LIST
53749: LIST
53750: PUSH
53751: LD_INT 2
53753: PUSH
53754: LD_INT 0
53756: PUSH
53757: EMPTY
53758: LIST
53759: LIST
53760: PUSH
53761: LD_INT 2
53763: PUSH
53764: LD_INT 1
53766: PUSH
53767: EMPTY
53768: LIST
53769: LIST
53770: PUSH
53771: LD_INT 2
53773: PUSH
53774: LD_INT 2
53776: PUSH
53777: EMPTY
53778: LIST
53779: LIST
53780: PUSH
53781: LD_INT 1
53783: PUSH
53784: LD_INT 2
53786: PUSH
53787: EMPTY
53788: LIST
53789: LIST
53790: PUSH
53791: LD_INT 0
53793: PUSH
53794: LD_INT 2
53796: PUSH
53797: EMPTY
53798: LIST
53799: LIST
53800: PUSH
53801: LD_INT 1
53803: NEG
53804: PUSH
53805: LD_INT 1
53807: PUSH
53808: EMPTY
53809: LIST
53810: LIST
53811: PUSH
53812: LD_INT 2
53814: NEG
53815: PUSH
53816: LD_INT 0
53818: PUSH
53819: EMPTY
53820: LIST
53821: LIST
53822: PUSH
53823: LD_INT 2
53825: NEG
53826: PUSH
53827: LD_INT 1
53829: NEG
53830: PUSH
53831: EMPTY
53832: LIST
53833: LIST
53834: PUSH
53835: LD_INT 2
53837: NEG
53838: PUSH
53839: LD_INT 2
53841: NEG
53842: PUSH
53843: EMPTY
53844: LIST
53845: LIST
53846: PUSH
53847: EMPTY
53848: LIST
53849: LIST
53850: LIST
53851: LIST
53852: LIST
53853: LIST
53854: LIST
53855: LIST
53856: LIST
53857: LIST
53858: LIST
53859: LIST
53860: LIST
53861: LIST
53862: LIST
53863: LIST
53864: LIST
53865: LIST
53866: LIST
53867: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53868: LD_ADDR_VAR 0 58
53872: PUSH
53873: LD_INT 0
53875: PUSH
53876: LD_INT 0
53878: PUSH
53879: EMPTY
53880: LIST
53881: LIST
53882: PUSH
53883: LD_INT 0
53885: PUSH
53886: LD_INT 1
53888: NEG
53889: PUSH
53890: EMPTY
53891: LIST
53892: LIST
53893: PUSH
53894: LD_INT 1
53896: PUSH
53897: LD_INT 0
53899: PUSH
53900: EMPTY
53901: LIST
53902: LIST
53903: PUSH
53904: LD_INT 1
53906: PUSH
53907: LD_INT 1
53909: PUSH
53910: EMPTY
53911: LIST
53912: LIST
53913: PUSH
53914: LD_INT 0
53916: PUSH
53917: LD_INT 1
53919: PUSH
53920: EMPTY
53921: LIST
53922: LIST
53923: PUSH
53924: LD_INT 1
53926: NEG
53927: PUSH
53928: LD_INT 0
53930: PUSH
53931: EMPTY
53932: LIST
53933: LIST
53934: PUSH
53935: LD_INT 1
53937: NEG
53938: PUSH
53939: LD_INT 1
53941: NEG
53942: PUSH
53943: EMPTY
53944: LIST
53945: LIST
53946: PUSH
53947: LD_INT 1
53949: NEG
53950: PUSH
53951: LD_INT 2
53953: NEG
53954: PUSH
53955: EMPTY
53956: LIST
53957: LIST
53958: PUSH
53959: LD_INT 0
53961: PUSH
53962: LD_INT 2
53964: NEG
53965: PUSH
53966: EMPTY
53967: LIST
53968: LIST
53969: PUSH
53970: LD_INT 1
53972: PUSH
53973: LD_INT 1
53975: NEG
53976: PUSH
53977: EMPTY
53978: LIST
53979: LIST
53980: PUSH
53981: LD_INT 2
53983: PUSH
53984: LD_INT 0
53986: PUSH
53987: EMPTY
53988: LIST
53989: LIST
53990: PUSH
53991: LD_INT 2
53993: PUSH
53994: LD_INT 1
53996: PUSH
53997: EMPTY
53998: LIST
53999: LIST
54000: PUSH
54001: LD_INT 2
54003: PUSH
54004: LD_INT 2
54006: PUSH
54007: EMPTY
54008: LIST
54009: LIST
54010: PUSH
54011: LD_INT 1
54013: PUSH
54014: LD_INT 2
54016: PUSH
54017: EMPTY
54018: LIST
54019: LIST
54020: PUSH
54021: LD_INT 0
54023: PUSH
54024: LD_INT 2
54026: PUSH
54027: EMPTY
54028: LIST
54029: LIST
54030: PUSH
54031: LD_INT 1
54033: NEG
54034: PUSH
54035: LD_INT 1
54037: PUSH
54038: EMPTY
54039: LIST
54040: LIST
54041: PUSH
54042: LD_INT 2
54044: NEG
54045: PUSH
54046: LD_INT 0
54048: PUSH
54049: EMPTY
54050: LIST
54051: LIST
54052: PUSH
54053: LD_INT 2
54055: NEG
54056: PUSH
54057: LD_INT 1
54059: NEG
54060: PUSH
54061: EMPTY
54062: LIST
54063: LIST
54064: PUSH
54065: LD_INT 2
54067: NEG
54068: PUSH
54069: LD_INT 2
54071: NEG
54072: PUSH
54073: EMPTY
54074: LIST
54075: LIST
54076: PUSH
54077: EMPTY
54078: LIST
54079: LIST
54080: LIST
54081: LIST
54082: LIST
54083: LIST
54084: LIST
54085: LIST
54086: LIST
54087: LIST
54088: LIST
54089: LIST
54090: LIST
54091: LIST
54092: LIST
54093: LIST
54094: LIST
54095: LIST
54096: LIST
54097: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54098: LD_ADDR_VAR 0 59
54102: PUSH
54103: LD_INT 0
54105: PUSH
54106: LD_INT 0
54108: PUSH
54109: EMPTY
54110: LIST
54111: LIST
54112: PUSH
54113: LD_INT 0
54115: PUSH
54116: LD_INT 1
54118: NEG
54119: PUSH
54120: EMPTY
54121: LIST
54122: LIST
54123: PUSH
54124: LD_INT 1
54126: PUSH
54127: LD_INT 0
54129: PUSH
54130: EMPTY
54131: LIST
54132: LIST
54133: PUSH
54134: LD_INT 1
54136: PUSH
54137: LD_INT 1
54139: PUSH
54140: EMPTY
54141: LIST
54142: LIST
54143: PUSH
54144: LD_INT 0
54146: PUSH
54147: LD_INT 1
54149: PUSH
54150: EMPTY
54151: LIST
54152: LIST
54153: PUSH
54154: LD_INT 1
54156: NEG
54157: PUSH
54158: LD_INT 0
54160: PUSH
54161: EMPTY
54162: LIST
54163: LIST
54164: PUSH
54165: LD_INT 1
54167: NEG
54168: PUSH
54169: LD_INT 1
54171: NEG
54172: PUSH
54173: EMPTY
54174: LIST
54175: LIST
54176: PUSH
54177: EMPTY
54178: LIST
54179: LIST
54180: LIST
54181: LIST
54182: LIST
54183: LIST
54184: LIST
54185: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54186: LD_ADDR_VAR 0 60
54190: PUSH
54191: LD_INT 0
54193: PUSH
54194: LD_INT 0
54196: PUSH
54197: EMPTY
54198: LIST
54199: LIST
54200: PUSH
54201: LD_INT 0
54203: PUSH
54204: LD_INT 1
54206: NEG
54207: PUSH
54208: EMPTY
54209: LIST
54210: LIST
54211: PUSH
54212: LD_INT 1
54214: PUSH
54215: LD_INT 0
54217: PUSH
54218: EMPTY
54219: LIST
54220: LIST
54221: PUSH
54222: LD_INT 1
54224: PUSH
54225: LD_INT 1
54227: PUSH
54228: EMPTY
54229: LIST
54230: LIST
54231: PUSH
54232: LD_INT 0
54234: PUSH
54235: LD_INT 1
54237: PUSH
54238: EMPTY
54239: LIST
54240: LIST
54241: PUSH
54242: LD_INT 1
54244: NEG
54245: PUSH
54246: LD_INT 0
54248: PUSH
54249: EMPTY
54250: LIST
54251: LIST
54252: PUSH
54253: LD_INT 1
54255: NEG
54256: PUSH
54257: LD_INT 1
54259: NEG
54260: PUSH
54261: EMPTY
54262: LIST
54263: LIST
54264: PUSH
54265: EMPTY
54266: LIST
54267: LIST
54268: LIST
54269: LIST
54270: LIST
54271: LIST
54272: LIST
54273: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54274: LD_ADDR_VAR 0 61
54278: PUSH
54279: LD_INT 0
54281: PUSH
54282: LD_INT 0
54284: PUSH
54285: EMPTY
54286: LIST
54287: LIST
54288: PUSH
54289: LD_INT 0
54291: PUSH
54292: LD_INT 1
54294: NEG
54295: PUSH
54296: EMPTY
54297: LIST
54298: LIST
54299: PUSH
54300: LD_INT 1
54302: PUSH
54303: LD_INT 0
54305: PUSH
54306: EMPTY
54307: LIST
54308: LIST
54309: PUSH
54310: LD_INT 1
54312: PUSH
54313: LD_INT 1
54315: PUSH
54316: EMPTY
54317: LIST
54318: LIST
54319: PUSH
54320: LD_INT 0
54322: PUSH
54323: LD_INT 1
54325: PUSH
54326: EMPTY
54327: LIST
54328: LIST
54329: PUSH
54330: LD_INT 1
54332: NEG
54333: PUSH
54334: LD_INT 0
54336: PUSH
54337: EMPTY
54338: LIST
54339: LIST
54340: PUSH
54341: LD_INT 1
54343: NEG
54344: PUSH
54345: LD_INT 1
54347: NEG
54348: PUSH
54349: EMPTY
54350: LIST
54351: LIST
54352: PUSH
54353: EMPTY
54354: LIST
54355: LIST
54356: LIST
54357: LIST
54358: LIST
54359: LIST
54360: LIST
54361: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54362: LD_ADDR_VAR 0 62
54366: PUSH
54367: LD_INT 0
54369: PUSH
54370: LD_INT 0
54372: PUSH
54373: EMPTY
54374: LIST
54375: LIST
54376: PUSH
54377: LD_INT 0
54379: PUSH
54380: LD_INT 1
54382: NEG
54383: PUSH
54384: EMPTY
54385: LIST
54386: LIST
54387: PUSH
54388: LD_INT 1
54390: PUSH
54391: LD_INT 0
54393: PUSH
54394: EMPTY
54395: LIST
54396: LIST
54397: PUSH
54398: LD_INT 1
54400: PUSH
54401: LD_INT 1
54403: PUSH
54404: EMPTY
54405: LIST
54406: LIST
54407: PUSH
54408: LD_INT 0
54410: PUSH
54411: LD_INT 1
54413: PUSH
54414: EMPTY
54415: LIST
54416: LIST
54417: PUSH
54418: LD_INT 1
54420: NEG
54421: PUSH
54422: LD_INT 0
54424: PUSH
54425: EMPTY
54426: LIST
54427: LIST
54428: PUSH
54429: LD_INT 1
54431: NEG
54432: PUSH
54433: LD_INT 1
54435: NEG
54436: PUSH
54437: EMPTY
54438: LIST
54439: LIST
54440: PUSH
54441: EMPTY
54442: LIST
54443: LIST
54444: LIST
54445: LIST
54446: LIST
54447: LIST
54448: LIST
54449: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54450: LD_ADDR_VAR 0 63
54454: PUSH
54455: LD_INT 0
54457: PUSH
54458: LD_INT 0
54460: PUSH
54461: EMPTY
54462: LIST
54463: LIST
54464: PUSH
54465: LD_INT 0
54467: PUSH
54468: LD_INT 1
54470: NEG
54471: PUSH
54472: EMPTY
54473: LIST
54474: LIST
54475: PUSH
54476: LD_INT 1
54478: PUSH
54479: LD_INT 0
54481: PUSH
54482: EMPTY
54483: LIST
54484: LIST
54485: PUSH
54486: LD_INT 1
54488: PUSH
54489: LD_INT 1
54491: PUSH
54492: EMPTY
54493: LIST
54494: LIST
54495: PUSH
54496: LD_INT 0
54498: PUSH
54499: LD_INT 1
54501: PUSH
54502: EMPTY
54503: LIST
54504: LIST
54505: PUSH
54506: LD_INT 1
54508: NEG
54509: PUSH
54510: LD_INT 0
54512: PUSH
54513: EMPTY
54514: LIST
54515: LIST
54516: PUSH
54517: LD_INT 1
54519: NEG
54520: PUSH
54521: LD_INT 1
54523: NEG
54524: PUSH
54525: EMPTY
54526: LIST
54527: LIST
54528: PUSH
54529: EMPTY
54530: LIST
54531: LIST
54532: LIST
54533: LIST
54534: LIST
54535: LIST
54536: LIST
54537: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54538: LD_ADDR_VAR 0 64
54542: PUSH
54543: LD_INT 0
54545: PUSH
54546: LD_INT 0
54548: PUSH
54549: EMPTY
54550: LIST
54551: LIST
54552: PUSH
54553: LD_INT 0
54555: PUSH
54556: LD_INT 1
54558: NEG
54559: PUSH
54560: EMPTY
54561: LIST
54562: LIST
54563: PUSH
54564: LD_INT 1
54566: PUSH
54567: LD_INT 0
54569: PUSH
54570: EMPTY
54571: LIST
54572: LIST
54573: PUSH
54574: LD_INT 1
54576: PUSH
54577: LD_INT 1
54579: PUSH
54580: EMPTY
54581: LIST
54582: LIST
54583: PUSH
54584: LD_INT 0
54586: PUSH
54587: LD_INT 1
54589: PUSH
54590: EMPTY
54591: LIST
54592: LIST
54593: PUSH
54594: LD_INT 1
54596: NEG
54597: PUSH
54598: LD_INT 0
54600: PUSH
54601: EMPTY
54602: LIST
54603: LIST
54604: PUSH
54605: LD_INT 1
54607: NEG
54608: PUSH
54609: LD_INT 1
54611: NEG
54612: PUSH
54613: EMPTY
54614: LIST
54615: LIST
54616: PUSH
54617: EMPTY
54618: LIST
54619: LIST
54620: LIST
54621: LIST
54622: LIST
54623: LIST
54624: LIST
54625: ST_TO_ADDR
// end ; 1 :
54626: GO 60523
54628: LD_INT 1
54630: DOUBLE
54631: EQUAL
54632: IFTRUE 54636
54634: GO 57259
54636: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54637: LD_ADDR_VAR 0 11
54641: PUSH
54642: LD_INT 1
54644: NEG
54645: PUSH
54646: LD_INT 3
54648: NEG
54649: PUSH
54650: EMPTY
54651: LIST
54652: LIST
54653: PUSH
54654: LD_INT 0
54656: PUSH
54657: LD_INT 3
54659: NEG
54660: PUSH
54661: EMPTY
54662: LIST
54663: LIST
54664: PUSH
54665: LD_INT 1
54667: PUSH
54668: LD_INT 2
54670: NEG
54671: PUSH
54672: EMPTY
54673: LIST
54674: LIST
54675: PUSH
54676: EMPTY
54677: LIST
54678: LIST
54679: LIST
54680: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54681: LD_ADDR_VAR 0 12
54685: PUSH
54686: LD_INT 2
54688: PUSH
54689: LD_INT 1
54691: NEG
54692: PUSH
54693: EMPTY
54694: LIST
54695: LIST
54696: PUSH
54697: LD_INT 3
54699: PUSH
54700: LD_INT 0
54702: PUSH
54703: EMPTY
54704: LIST
54705: LIST
54706: PUSH
54707: LD_INT 3
54709: PUSH
54710: LD_INT 1
54712: PUSH
54713: EMPTY
54714: LIST
54715: LIST
54716: PUSH
54717: EMPTY
54718: LIST
54719: LIST
54720: LIST
54721: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54722: LD_ADDR_VAR 0 13
54726: PUSH
54727: LD_INT 3
54729: PUSH
54730: LD_INT 2
54732: PUSH
54733: EMPTY
54734: LIST
54735: LIST
54736: PUSH
54737: LD_INT 3
54739: PUSH
54740: LD_INT 3
54742: PUSH
54743: EMPTY
54744: LIST
54745: LIST
54746: PUSH
54747: LD_INT 2
54749: PUSH
54750: LD_INT 3
54752: PUSH
54753: EMPTY
54754: LIST
54755: LIST
54756: PUSH
54757: EMPTY
54758: LIST
54759: LIST
54760: LIST
54761: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54762: LD_ADDR_VAR 0 14
54766: PUSH
54767: LD_INT 1
54769: PUSH
54770: LD_INT 3
54772: PUSH
54773: EMPTY
54774: LIST
54775: LIST
54776: PUSH
54777: LD_INT 0
54779: PUSH
54780: LD_INT 3
54782: PUSH
54783: EMPTY
54784: LIST
54785: LIST
54786: PUSH
54787: LD_INT 1
54789: NEG
54790: PUSH
54791: LD_INT 2
54793: PUSH
54794: EMPTY
54795: LIST
54796: LIST
54797: PUSH
54798: EMPTY
54799: LIST
54800: LIST
54801: LIST
54802: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54803: LD_ADDR_VAR 0 15
54807: PUSH
54808: LD_INT 2
54810: NEG
54811: PUSH
54812: LD_INT 1
54814: PUSH
54815: EMPTY
54816: LIST
54817: LIST
54818: PUSH
54819: LD_INT 3
54821: NEG
54822: PUSH
54823: LD_INT 0
54825: PUSH
54826: EMPTY
54827: LIST
54828: LIST
54829: PUSH
54830: LD_INT 3
54832: NEG
54833: PUSH
54834: LD_INT 1
54836: NEG
54837: PUSH
54838: EMPTY
54839: LIST
54840: LIST
54841: PUSH
54842: EMPTY
54843: LIST
54844: LIST
54845: LIST
54846: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54847: LD_ADDR_VAR 0 16
54851: PUSH
54852: LD_INT 2
54854: NEG
54855: PUSH
54856: LD_INT 3
54858: NEG
54859: PUSH
54860: EMPTY
54861: LIST
54862: LIST
54863: PUSH
54864: LD_INT 3
54866: NEG
54867: PUSH
54868: LD_INT 2
54870: NEG
54871: PUSH
54872: EMPTY
54873: LIST
54874: LIST
54875: PUSH
54876: LD_INT 3
54878: NEG
54879: PUSH
54880: LD_INT 3
54882: NEG
54883: PUSH
54884: EMPTY
54885: LIST
54886: LIST
54887: PUSH
54888: EMPTY
54889: LIST
54890: LIST
54891: LIST
54892: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54893: LD_ADDR_VAR 0 17
54897: PUSH
54898: LD_INT 1
54900: NEG
54901: PUSH
54902: LD_INT 3
54904: NEG
54905: PUSH
54906: EMPTY
54907: LIST
54908: LIST
54909: PUSH
54910: LD_INT 0
54912: PUSH
54913: LD_INT 3
54915: NEG
54916: PUSH
54917: EMPTY
54918: LIST
54919: LIST
54920: PUSH
54921: LD_INT 1
54923: PUSH
54924: LD_INT 2
54926: NEG
54927: PUSH
54928: EMPTY
54929: LIST
54930: LIST
54931: PUSH
54932: EMPTY
54933: LIST
54934: LIST
54935: LIST
54936: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54937: LD_ADDR_VAR 0 18
54941: PUSH
54942: LD_INT 2
54944: PUSH
54945: LD_INT 1
54947: NEG
54948: PUSH
54949: EMPTY
54950: LIST
54951: LIST
54952: PUSH
54953: LD_INT 3
54955: PUSH
54956: LD_INT 0
54958: PUSH
54959: EMPTY
54960: LIST
54961: LIST
54962: PUSH
54963: LD_INT 3
54965: PUSH
54966: LD_INT 1
54968: PUSH
54969: EMPTY
54970: LIST
54971: LIST
54972: PUSH
54973: EMPTY
54974: LIST
54975: LIST
54976: LIST
54977: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54978: LD_ADDR_VAR 0 19
54982: PUSH
54983: LD_INT 3
54985: PUSH
54986: LD_INT 2
54988: PUSH
54989: EMPTY
54990: LIST
54991: LIST
54992: PUSH
54993: LD_INT 3
54995: PUSH
54996: LD_INT 3
54998: PUSH
54999: EMPTY
55000: LIST
55001: LIST
55002: PUSH
55003: LD_INT 2
55005: PUSH
55006: LD_INT 3
55008: PUSH
55009: EMPTY
55010: LIST
55011: LIST
55012: PUSH
55013: EMPTY
55014: LIST
55015: LIST
55016: LIST
55017: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55018: LD_ADDR_VAR 0 20
55022: PUSH
55023: LD_INT 1
55025: PUSH
55026: LD_INT 3
55028: PUSH
55029: EMPTY
55030: LIST
55031: LIST
55032: PUSH
55033: LD_INT 0
55035: PUSH
55036: LD_INT 3
55038: PUSH
55039: EMPTY
55040: LIST
55041: LIST
55042: PUSH
55043: LD_INT 1
55045: NEG
55046: PUSH
55047: LD_INT 2
55049: PUSH
55050: EMPTY
55051: LIST
55052: LIST
55053: PUSH
55054: EMPTY
55055: LIST
55056: LIST
55057: LIST
55058: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55059: LD_ADDR_VAR 0 21
55063: PUSH
55064: LD_INT 2
55066: NEG
55067: PUSH
55068: LD_INT 1
55070: PUSH
55071: EMPTY
55072: LIST
55073: LIST
55074: PUSH
55075: LD_INT 3
55077: NEG
55078: PUSH
55079: LD_INT 0
55081: PUSH
55082: EMPTY
55083: LIST
55084: LIST
55085: PUSH
55086: LD_INT 3
55088: NEG
55089: PUSH
55090: LD_INT 1
55092: NEG
55093: PUSH
55094: EMPTY
55095: LIST
55096: LIST
55097: PUSH
55098: EMPTY
55099: LIST
55100: LIST
55101: LIST
55102: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55103: LD_ADDR_VAR 0 22
55107: PUSH
55108: LD_INT 2
55110: NEG
55111: PUSH
55112: LD_INT 3
55114: NEG
55115: PUSH
55116: EMPTY
55117: LIST
55118: LIST
55119: PUSH
55120: LD_INT 3
55122: NEG
55123: PUSH
55124: LD_INT 2
55126: NEG
55127: PUSH
55128: EMPTY
55129: LIST
55130: LIST
55131: PUSH
55132: LD_INT 3
55134: NEG
55135: PUSH
55136: LD_INT 3
55138: NEG
55139: PUSH
55140: EMPTY
55141: LIST
55142: LIST
55143: PUSH
55144: EMPTY
55145: LIST
55146: LIST
55147: LIST
55148: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
55149: LD_ADDR_VAR 0 23
55153: PUSH
55154: LD_INT 0
55156: PUSH
55157: LD_INT 3
55159: NEG
55160: PUSH
55161: EMPTY
55162: LIST
55163: LIST
55164: PUSH
55165: LD_INT 1
55167: NEG
55168: PUSH
55169: LD_INT 4
55171: NEG
55172: PUSH
55173: EMPTY
55174: LIST
55175: LIST
55176: PUSH
55177: LD_INT 1
55179: PUSH
55180: LD_INT 3
55182: NEG
55183: PUSH
55184: EMPTY
55185: LIST
55186: LIST
55187: PUSH
55188: EMPTY
55189: LIST
55190: LIST
55191: LIST
55192: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
55193: LD_ADDR_VAR 0 24
55197: PUSH
55198: LD_INT 3
55200: PUSH
55201: LD_INT 0
55203: PUSH
55204: EMPTY
55205: LIST
55206: LIST
55207: PUSH
55208: LD_INT 3
55210: PUSH
55211: LD_INT 1
55213: NEG
55214: PUSH
55215: EMPTY
55216: LIST
55217: LIST
55218: PUSH
55219: LD_INT 4
55221: PUSH
55222: LD_INT 1
55224: PUSH
55225: EMPTY
55226: LIST
55227: LIST
55228: PUSH
55229: EMPTY
55230: LIST
55231: LIST
55232: LIST
55233: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
55234: LD_ADDR_VAR 0 25
55238: PUSH
55239: LD_INT 3
55241: PUSH
55242: LD_INT 3
55244: PUSH
55245: EMPTY
55246: LIST
55247: LIST
55248: PUSH
55249: LD_INT 4
55251: PUSH
55252: LD_INT 3
55254: PUSH
55255: EMPTY
55256: LIST
55257: LIST
55258: PUSH
55259: LD_INT 3
55261: PUSH
55262: LD_INT 4
55264: PUSH
55265: EMPTY
55266: LIST
55267: LIST
55268: PUSH
55269: EMPTY
55270: LIST
55271: LIST
55272: LIST
55273: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
55274: LD_ADDR_VAR 0 26
55278: PUSH
55279: LD_INT 0
55281: PUSH
55282: LD_INT 3
55284: PUSH
55285: EMPTY
55286: LIST
55287: LIST
55288: PUSH
55289: LD_INT 1
55291: PUSH
55292: LD_INT 4
55294: PUSH
55295: EMPTY
55296: LIST
55297: LIST
55298: PUSH
55299: LD_INT 1
55301: NEG
55302: PUSH
55303: LD_INT 3
55305: PUSH
55306: EMPTY
55307: LIST
55308: LIST
55309: PUSH
55310: EMPTY
55311: LIST
55312: LIST
55313: LIST
55314: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
55315: LD_ADDR_VAR 0 27
55319: PUSH
55320: LD_INT 3
55322: NEG
55323: PUSH
55324: LD_INT 0
55326: PUSH
55327: EMPTY
55328: LIST
55329: LIST
55330: PUSH
55331: LD_INT 3
55333: NEG
55334: PUSH
55335: LD_INT 1
55337: PUSH
55338: EMPTY
55339: LIST
55340: LIST
55341: PUSH
55342: LD_INT 4
55344: NEG
55345: PUSH
55346: LD_INT 1
55348: NEG
55349: PUSH
55350: EMPTY
55351: LIST
55352: LIST
55353: PUSH
55354: EMPTY
55355: LIST
55356: LIST
55357: LIST
55358: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
55359: LD_ADDR_VAR 0 28
55363: PUSH
55364: LD_INT 3
55366: NEG
55367: PUSH
55368: LD_INT 3
55370: NEG
55371: PUSH
55372: EMPTY
55373: LIST
55374: LIST
55375: PUSH
55376: LD_INT 3
55378: NEG
55379: PUSH
55380: LD_INT 4
55382: NEG
55383: PUSH
55384: EMPTY
55385: LIST
55386: LIST
55387: PUSH
55388: LD_INT 4
55390: NEG
55391: PUSH
55392: LD_INT 3
55394: NEG
55395: PUSH
55396: EMPTY
55397: LIST
55398: LIST
55399: PUSH
55400: EMPTY
55401: LIST
55402: LIST
55403: LIST
55404: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
55405: LD_ADDR_VAR 0 29
55409: PUSH
55410: LD_INT 1
55412: NEG
55413: PUSH
55414: LD_INT 3
55416: NEG
55417: PUSH
55418: EMPTY
55419: LIST
55420: LIST
55421: PUSH
55422: LD_INT 0
55424: PUSH
55425: LD_INT 3
55427: NEG
55428: PUSH
55429: EMPTY
55430: LIST
55431: LIST
55432: PUSH
55433: LD_INT 1
55435: PUSH
55436: LD_INT 2
55438: NEG
55439: PUSH
55440: EMPTY
55441: LIST
55442: LIST
55443: PUSH
55444: LD_INT 1
55446: NEG
55447: PUSH
55448: LD_INT 4
55450: NEG
55451: PUSH
55452: EMPTY
55453: LIST
55454: LIST
55455: PUSH
55456: LD_INT 0
55458: PUSH
55459: LD_INT 4
55461: NEG
55462: PUSH
55463: EMPTY
55464: LIST
55465: LIST
55466: PUSH
55467: LD_INT 1
55469: PUSH
55470: LD_INT 3
55472: NEG
55473: PUSH
55474: EMPTY
55475: LIST
55476: LIST
55477: PUSH
55478: LD_INT 1
55480: NEG
55481: PUSH
55482: LD_INT 5
55484: NEG
55485: PUSH
55486: EMPTY
55487: LIST
55488: LIST
55489: PUSH
55490: LD_INT 0
55492: PUSH
55493: LD_INT 5
55495: NEG
55496: PUSH
55497: EMPTY
55498: LIST
55499: LIST
55500: PUSH
55501: LD_INT 1
55503: PUSH
55504: LD_INT 4
55506: NEG
55507: PUSH
55508: EMPTY
55509: LIST
55510: LIST
55511: PUSH
55512: LD_INT 1
55514: NEG
55515: PUSH
55516: LD_INT 6
55518: NEG
55519: PUSH
55520: EMPTY
55521: LIST
55522: LIST
55523: PUSH
55524: LD_INT 0
55526: PUSH
55527: LD_INT 6
55529: NEG
55530: PUSH
55531: EMPTY
55532: LIST
55533: LIST
55534: PUSH
55535: LD_INT 1
55537: PUSH
55538: LD_INT 5
55540: NEG
55541: PUSH
55542: EMPTY
55543: LIST
55544: LIST
55545: PUSH
55546: EMPTY
55547: LIST
55548: LIST
55549: LIST
55550: LIST
55551: LIST
55552: LIST
55553: LIST
55554: LIST
55555: LIST
55556: LIST
55557: LIST
55558: LIST
55559: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
55560: LD_ADDR_VAR 0 30
55564: PUSH
55565: LD_INT 2
55567: PUSH
55568: LD_INT 1
55570: NEG
55571: PUSH
55572: EMPTY
55573: LIST
55574: LIST
55575: PUSH
55576: LD_INT 3
55578: PUSH
55579: LD_INT 0
55581: PUSH
55582: EMPTY
55583: LIST
55584: LIST
55585: PUSH
55586: LD_INT 3
55588: PUSH
55589: LD_INT 1
55591: PUSH
55592: EMPTY
55593: LIST
55594: LIST
55595: PUSH
55596: LD_INT 3
55598: PUSH
55599: LD_INT 1
55601: NEG
55602: PUSH
55603: EMPTY
55604: LIST
55605: LIST
55606: PUSH
55607: LD_INT 4
55609: PUSH
55610: LD_INT 0
55612: PUSH
55613: EMPTY
55614: LIST
55615: LIST
55616: PUSH
55617: LD_INT 4
55619: PUSH
55620: LD_INT 1
55622: PUSH
55623: EMPTY
55624: LIST
55625: LIST
55626: PUSH
55627: LD_INT 4
55629: PUSH
55630: LD_INT 1
55632: NEG
55633: PUSH
55634: EMPTY
55635: LIST
55636: LIST
55637: PUSH
55638: LD_INT 5
55640: PUSH
55641: LD_INT 0
55643: PUSH
55644: EMPTY
55645: LIST
55646: LIST
55647: PUSH
55648: LD_INT 5
55650: PUSH
55651: LD_INT 1
55653: PUSH
55654: EMPTY
55655: LIST
55656: LIST
55657: PUSH
55658: LD_INT 5
55660: PUSH
55661: LD_INT 1
55663: NEG
55664: PUSH
55665: EMPTY
55666: LIST
55667: LIST
55668: PUSH
55669: LD_INT 6
55671: PUSH
55672: LD_INT 0
55674: PUSH
55675: EMPTY
55676: LIST
55677: LIST
55678: PUSH
55679: LD_INT 6
55681: PUSH
55682: LD_INT 1
55684: PUSH
55685: EMPTY
55686: LIST
55687: LIST
55688: PUSH
55689: EMPTY
55690: LIST
55691: LIST
55692: LIST
55693: LIST
55694: LIST
55695: LIST
55696: LIST
55697: LIST
55698: LIST
55699: LIST
55700: LIST
55701: LIST
55702: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
55703: LD_ADDR_VAR 0 31
55707: PUSH
55708: LD_INT 3
55710: PUSH
55711: LD_INT 2
55713: PUSH
55714: EMPTY
55715: LIST
55716: LIST
55717: PUSH
55718: LD_INT 3
55720: PUSH
55721: LD_INT 3
55723: PUSH
55724: EMPTY
55725: LIST
55726: LIST
55727: PUSH
55728: LD_INT 2
55730: PUSH
55731: LD_INT 3
55733: PUSH
55734: EMPTY
55735: LIST
55736: LIST
55737: PUSH
55738: LD_INT 4
55740: PUSH
55741: LD_INT 3
55743: PUSH
55744: EMPTY
55745: LIST
55746: LIST
55747: PUSH
55748: LD_INT 4
55750: PUSH
55751: LD_INT 4
55753: PUSH
55754: EMPTY
55755: LIST
55756: LIST
55757: PUSH
55758: LD_INT 3
55760: PUSH
55761: LD_INT 4
55763: PUSH
55764: EMPTY
55765: LIST
55766: LIST
55767: PUSH
55768: LD_INT 5
55770: PUSH
55771: LD_INT 4
55773: PUSH
55774: EMPTY
55775: LIST
55776: LIST
55777: PUSH
55778: LD_INT 5
55780: PUSH
55781: LD_INT 5
55783: PUSH
55784: EMPTY
55785: LIST
55786: LIST
55787: PUSH
55788: LD_INT 4
55790: PUSH
55791: LD_INT 5
55793: PUSH
55794: EMPTY
55795: LIST
55796: LIST
55797: PUSH
55798: LD_INT 6
55800: PUSH
55801: LD_INT 5
55803: PUSH
55804: EMPTY
55805: LIST
55806: LIST
55807: PUSH
55808: LD_INT 6
55810: PUSH
55811: LD_INT 6
55813: PUSH
55814: EMPTY
55815: LIST
55816: LIST
55817: PUSH
55818: LD_INT 5
55820: PUSH
55821: LD_INT 6
55823: PUSH
55824: EMPTY
55825: LIST
55826: LIST
55827: PUSH
55828: EMPTY
55829: LIST
55830: LIST
55831: LIST
55832: LIST
55833: LIST
55834: LIST
55835: LIST
55836: LIST
55837: LIST
55838: LIST
55839: LIST
55840: LIST
55841: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
55842: LD_ADDR_VAR 0 32
55846: PUSH
55847: LD_INT 1
55849: PUSH
55850: LD_INT 3
55852: PUSH
55853: EMPTY
55854: LIST
55855: LIST
55856: PUSH
55857: LD_INT 0
55859: PUSH
55860: LD_INT 3
55862: PUSH
55863: EMPTY
55864: LIST
55865: LIST
55866: PUSH
55867: LD_INT 1
55869: NEG
55870: PUSH
55871: LD_INT 2
55873: PUSH
55874: EMPTY
55875: LIST
55876: LIST
55877: PUSH
55878: LD_INT 1
55880: PUSH
55881: LD_INT 4
55883: PUSH
55884: EMPTY
55885: LIST
55886: LIST
55887: PUSH
55888: LD_INT 0
55890: PUSH
55891: LD_INT 4
55893: PUSH
55894: EMPTY
55895: LIST
55896: LIST
55897: PUSH
55898: LD_INT 1
55900: NEG
55901: PUSH
55902: LD_INT 3
55904: PUSH
55905: EMPTY
55906: LIST
55907: LIST
55908: PUSH
55909: LD_INT 1
55911: PUSH
55912: LD_INT 5
55914: PUSH
55915: EMPTY
55916: LIST
55917: LIST
55918: PUSH
55919: LD_INT 0
55921: PUSH
55922: LD_INT 5
55924: PUSH
55925: EMPTY
55926: LIST
55927: LIST
55928: PUSH
55929: LD_INT 1
55931: NEG
55932: PUSH
55933: LD_INT 4
55935: PUSH
55936: EMPTY
55937: LIST
55938: LIST
55939: PUSH
55940: LD_INT 1
55942: PUSH
55943: LD_INT 6
55945: PUSH
55946: EMPTY
55947: LIST
55948: LIST
55949: PUSH
55950: LD_INT 0
55952: PUSH
55953: LD_INT 6
55955: PUSH
55956: EMPTY
55957: LIST
55958: LIST
55959: PUSH
55960: LD_INT 1
55962: NEG
55963: PUSH
55964: LD_INT 5
55966: PUSH
55967: EMPTY
55968: LIST
55969: LIST
55970: PUSH
55971: EMPTY
55972: LIST
55973: LIST
55974: LIST
55975: LIST
55976: LIST
55977: LIST
55978: LIST
55979: LIST
55980: LIST
55981: LIST
55982: LIST
55983: LIST
55984: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
55985: LD_ADDR_VAR 0 33
55989: PUSH
55990: LD_INT 2
55992: NEG
55993: PUSH
55994: LD_INT 1
55996: PUSH
55997: EMPTY
55998: LIST
55999: LIST
56000: PUSH
56001: LD_INT 3
56003: NEG
56004: PUSH
56005: LD_INT 0
56007: PUSH
56008: EMPTY
56009: LIST
56010: LIST
56011: PUSH
56012: LD_INT 3
56014: NEG
56015: PUSH
56016: LD_INT 1
56018: NEG
56019: PUSH
56020: EMPTY
56021: LIST
56022: LIST
56023: PUSH
56024: LD_INT 3
56026: NEG
56027: PUSH
56028: LD_INT 1
56030: PUSH
56031: EMPTY
56032: LIST
56033: LIST
56034: PUSH
56035: LD_INT 4
56037: NEG
56038: PUSH
56039: LD_INT 0
56041: PUSH
56042: EMPTY
56043: LIST
56044: LIST
56045: PUSH
56046: LD_INT 4
56048: NEG
56049: PUSH
56050: LD_INT 1
56052: NEG
56053: PUSH
56054: EMPTY
56055: LIST
56056: LIST
56057: PUSH
56058: LD_INT 4
56060: NEG
56061: PUSH
56062: LD_INT 1
56064: PUSH
56065: EMPTY
56066: LIST
56067: LIST
56068: PUSH
56069: LD_INT 5
56071: NEG
56072: PUSH
56073: LD_INT 0
56075: PUSH
56076: EMPTY
56077: LIST
56078: LIST
56079: PUSH
56080: LD_INT 5
56082: NEG
56083: PUSH
56084: LD_INT 1
56086: NEG
56087: PUSH
56088: EMPTY
56089: LIST
56090: LIST
56091: PUSH
56092: LD_INT 5
56094: NEG
56095: PUSH
56096: LD_INT 1
56098: PUSH
56099: EMPTY
56100: LIST
56101: LIST
56102: PUSH
56103: LD_INT 6
56105: NEG
56106: PUSH
56107: LD_INT 0
56109: PUSH
56110: EMPTY
56111: LIST
56112: LIST
56113: PUSH
56114: LD_INT 6
56116: NEG
56117: PUSH
56118: LD_INT 1
56120: NEG
56121: PUSH
56122: EMPTY
56123: LIST
56124: LIST
56125: PUSH
56126: EMPTY
56127: LIST
56128: LIST
56129: LIST
56130: LIST
56131: LIST
56132: LIST
56133: LIST
56134: LIST
56135: LIST
56136: LIST
56137: LIST
56138: LIST
56139: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
56140: LD_ADDR_VAR 0 34
56144: PUSH
56145: LD_INT 2
56147: NEG
56148: PUSH
56149: LD_INT 3
56151: NEG
56152: PUSH
56153: EMPTY
56154: LIST
56155: LIST
56156: PUSH
56157: LD_INT 3
56159: NEG
56160: PUSH
56161: LD_INT 2
56163: NEG
56164: PUSH
56165: EMPTY
56166: LIST
56167: LIST
56168: PUSH
56169: LD_INT 3
56171: NEG
56172: PUSH
56173: LD_INT 3
56175: NEG
56176: PUSH
56177: EMPTY
56178: LIST
56179: LIST
56180: PUSH
56181: LD_INT 3
56183: NEG
56184: PUSH
56185: LD_INT 4
56187: NEG
56188: PUSH
56189: EMPTY
56190: LIST
56191: LIST
56192: PUSH
56193: LD_INT 4
56195: NEG
56196: PUSH
56197: LD_INT 3
56199: NEG
56200: PUSH
56201: EMPTY
56202: LIST
56203: LIST
56204: PUSH
56205: LD_INT 4
56207: NEG
56208: PUSH
56209: LD_INT 4
56211: NEG
56212: PUSH
56213: EMPTY
56214: LIST
56215: LIST
56216: PUSH
56217: LD_INT 4
56219: NEG
56220: PUSH
56221: LD_INT 5
56223: NEG
56224: PUSH
56225: EMPTY
56226: LIST
56227: LIST
56228: PUSH
56229: LD_INT 5
56231: NEG
56232: PUSH
56233: LD_INT 4
56235: NEG
56236: PUSH
56237: EMPTY
56238: LIST
56239: LIST
56240: PUSH
56241: LD_INT 5
56243: NEG
56244: PUSH
56245: LD_INT 5
56247: NEG
56248: PUSH
56249: EMPTY
56250: LIST
56251: LIST
56252: PUSH
56253: LD_INT 5
56255: NEG
56256: PUSH
56257: LD_INT 6
56259: NEG
56260: PUSH
56261: EMPTY
56262: LIST
56263: LIST
56264: PUSH
56265: LD_INT 6
56267: NEG
56268: PUSH
56269: LD_INT 5
56271: NEG
56272: PUSH
56273: EMPTY
56274: LIST
56275: LIST
56276: PUSH
56277: LD_INT 6
56279: NEG
56280: PUSH
56281: LD_INT 6
56283: NEG
56284: PUSH
56285: EMPTY
56286: LIST
56287: LIST
56288: PUSH
56289: EMPTY
56290: LIST
56291: LIST
56292: LIST
56293: LIST
56294: LIST
56295: LIST
56296: LIST
56297: LIST
56298: LIST
56299: LIST
56300: LIST
56301: LIST
56302: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
56303: LD_ADDR_VAR 0 41
56307: PUSH
56308: LD_INT 0
56310: PUSH
56311: LD_INT 2
56313: NEG
56314: PUSH
56315: EMPTY
56316: LIST
56317: LIST
56318: PUSH
56319: LD_INT 1
56321: NEG
56322: PUSH
56323: LD_INT 3
56325: NEG
56326: PUSH
56327: EMPTY
56328: LIST
56329: LIST
56330: PUSH
56331: LD_INT 1
56333: PUSH
56334: LD_INT 2
56336: NEG
56337: PUSH
56338: EMPTY
56339: LIST
56340: LIST
56341: PUSH
56342: EMPTY
56343: LIST
56344: LIST
56345: LIST
56346: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
56347: LD_ADDR_VAR 0 42
56351: PUSH
56352: LD_INT 2
56354: PUSH
56355: LD_INT 0
56357: PUSH
56358: EMPTY
56359: LIST
56360: LIST
56361: PUSH
56362: LD_INT 2
56364: PUSH
56365: LD_INT 1
56367: NEG
56368: PUSH
56369: EMPTY
56370: LIST
56371: LIST
56372: PUSH
56373: LD_INT 3
56375: PUSH
56376: LD_INT 1
56378: PUSH
56379: EMPTY
56380: LIST
56381: LIST
56382: PUSH
56383: EMPTY
56384: LIST
56385: LIST
56386: LIST
56387: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
56388: LD_ADDR_VAR 0 43
56392: PUSH
56393: LD_INT 2
56395: PUSH
56396: LD_INT 2
56398: PUSH
56399: EMPTY
56400: LIST
56401: LIST
56402: PUSH
56403: LD_INT 3
56405: PUSH
56406: LD_INT 2
56408: PUSH
56409: EMPTY
56410: LIST
56411: LIST
56412: PUSH
56413: LD_INT 2
56415: PUSH
56416: LD_INT 3
56418: PUSH
56419: EMPTY
56420: LIST
56421: LIST
56422: PUSH
56423: EMPTY
56424: LIST
56425: LIST
56426: LIST
56427: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
56428: LD_ADDR_VAR 0 44
56432: PUSH
56433: LD_INT 0
56435: PUSH
56436: LD_INT 2
56438: PUSH
56439: EMPTY
56440: LIST
56441: LIST
56442: PUSH
56443: LD_INT 1
56445: PUSH
56446: LD_INT 3
56448: PUSH
56449: EMPTY
56450: LIST
56451: LIST
56452: PUSH
56453: LD_INT 1
56455: NEG
56456: PUSH
56457: LD_INT 2
56459: PUSH
56460: EMPTY
56461: LIST
56462: LIST
56463: PUSH
56464: EMPTY
56465: LIST
56466: LIST
56467: LIST
56468: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56469: LD_ADDR_VAR 0 45
56473: PUSH
56474: LD_INT 2
56476: NEG
56477: PUSH
56478: LD_INT 0
56480: PUSH
56481: EMPTY
56482: LIST
56483: LIST
56484: PUSH
56485: LD_INT 2
56487: NEG
56488: PUSH
56489: LD_INT 1
56491: PUSH
56492: EMPTY
56493: LIST
56494: LIST
56495: PUSH
56496: LD_INT 3
56498: NEG
56499: PUSH
56500: LD_INT 1
56502: NEG
56503: PUSH
56504: EMPTY
56505: LIST
56506: LIST
56507: PUSH
56508: EMPTY
56509: LIST
56510: LIST
56511: LIST
56512: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
56513: LD_ADDR_VAR 0 46
56517: PUSH
56518: LD_INT 2
56520: NEG
56521: PUSH
56522: LD_INT 2
56524: NEG
56525: PUSH
56526: EMPTY
56527: LIST
56528: LIST
56529: PUSH
56530: LD_INT 2
56532: NEG
56533: PUSH
56534: LD_INT 3
56536: NEG
56537: PUSH
56538: EMPTY
56539: LIST
56540: LIST
56541: PUSH
56542: LD_INT 3
56544: NEG
56545: PUSH
56546: LD_INT 2
56548: NEG
56549: PUSH
56550: EMPTY
56551: LIST
56552: LIST
56553: PUSH
56554: EMPTY
56555: LIST
56556: LIST
56557: LIST
56558: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
56559: LD_ADDR_VAR 0 47
56563: PUSH
56564: LD_INT 2
56566: NEG
56567: PUSH
56568: LD_INT 3
56570: NEG
56571: PUSH
56572: EMPTY
56573: LIST
56574: LIST
56575: PUSH
56576: LD_INT 1
56578: NEG
56579: PUSH
56580: LD_INT 3
56582: NEG
56583: PUSH
56584: EMPTY
56585: LIST
56586: LIST
56587: PUSH
56588: EMPTY
56589: LIST
56590: LIST
56591: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
56592: LD_ADDR_VAR 0 48
56596: PUSH
56597: LD_INT 1
56599: PUSH
56600: LD_INT 2
56602: NEG
56603: PUSH
56604: EMPTY
56605: LIST
56606: LIST
56607: PUSH
56608: LD_INT 2
56610: PUSH
56611: LD_INT 1
56613: NEG
56614: PUSH
56615: EMPTY
56616: LIST
56617: LIST
56618: PUSH
56619: EMPTY
56620: LIST
56621: LIST
56622: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
56623: LD_ADDR_VAR 0 49
56627: PUSH
56628: LD_INT 3
56630: PUSH
56631: LD_INT 1
56633: PUSH
56634: EMPTY
56635: LIST
56636: LIST
56637: PUSH
56638: LD_INT 3
56640: PUSH
56641: LD_INT 2
56643: PUSH
56644: EMPTY
56645: LIST
56646: LIST
56647: PUSH
56648: EMPTY
56649: LIST
56650: LIST
56651: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
56652: LD_ADDR_VAR 0 50
56656: PUSH
56657: LD_INT 2
56659: PUSH
56660: LD_INT 3
56662: PUSH
56663: EMPTY
56664: LIST
56665: LIST
56666: PUSH
56667: LD_INT 1
56669: PUSH
56670: LD_INT 3
56672: PUSH
56673: EMPTY
56674: LIST
56675: LIST
56676: PUSH
56677: EMPTY
56678: LIST
56679: LIST
56680: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
56681: LD_ADDR_VAR 0 51
56685: PUSH
56686: LD_INT 1
56688: NEG
56689: PUSH
56690: LD_INT 2
56692: PUSH
56693: EMPTY
56694: LIST
56695: LIST
56696: PUSH
56697: LD_INT 2
56699: NEG
56700: PUSH
56701: LD_INT 1
56703: PUSH
56704: EMPTY
56705: LIST
56706: LIST
56707: PUSH
56708: EMPTY
56709: LIST
56710: LIST
56711: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56712: LD_ADDR_VAR 0 52
56716: PUSH
56717: LD_INT 3
56719: NEG
56720: PUSH
56721: LD_INT 1
56723: NEG
56724: PUSH
56725: EMPTY
56726: LIST
56727: LIST
56728: PUSH
56729: LD_INT 3
56731: NEG
56732: PUSH
56733: LD_INT 2
56735: NEG
56736: PUSH
56737: EMPTY
56738: LIST
56739: LIST
56740: PUSH
56741: EMPTY
56742: LIST
56743: LIST
56744: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56745: LD_ADDR_VAR 0 53
56749: PUSH
56750: LD_INT 1
56752: NEG
56753: PUSH
56754: LD_INT 3
56756: NEG
56757: PUSH
56758: EMPTY
56759: LIST
56760: LIST
56761: PUSH
56762: LD_INT 0
56764: PUSH
56765: LD_INT 3
56767: NEG
56768: PUSH
56769: EMPTY
56770: LIST
56771: LIST
56772: PUSH
56773: LD_INT 1
56775: PUSH
56776: LD_INT 2
56778: NEG
56779: PUSH
56780: EMPTY
56781: LIST
56782: LIST
56783: PUSH
56784: EMPTY
56785: LIST
56786: LIST
56787: LIST
56788: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56789: LD_ADDR_VAR 0 54
56793: PUSH
56794: LD_INT 2
56796: PUSH
56797: LD_INT 1
56799: NEG
56800: PUSH
56801: EMPTY
56802: LIST
56803: LIST
56804: PUSH
56805: LD_INT 3
56807: PUSH
56808: LD_INT 0
56810: PUSH
56811: EMPTY
56812: LIST
56813: LIST
56814: PUSH
56815: LD_INT 3
56817: PUSH
56818: LD_INT 1
56820: PUSH
56821: EMPTY
56822: LIST
56823: LIST
56824: PUSH
56825: EMPTY
56826: LIST
56827: LIST
56828: LIST
56829: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56830: LD_ADDR_VAR 0 55
56834: PUSH
56835: LD_INT 3
56837: PUSH
56838: LD_INT 2
56840: PUSH
56841: EMPTY
56842: LIST
56843: LIST
56844: PUSH
56845: LD_INT 3
56847: PUSH
56848: LD_INT 3
56850: PUSH
56851: EMPTY
56852: LIST
56853: LIST
56854: PUSH
56855: LD_INT 2
56857: PUSH
56858: LD_INT 3
56860: PUSH
56861: EMPTY
56862: LIST
56863: LIST
56864: PUSH
56865: EMPTY
56866: LIST
56867: LIST
56868: LIST
56869: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56870: LD_ADDR_VAR 0 56
56874: PUSH
56875: LD_INT 1
56877: PUSH
56878: LD_INT 3
56880: PUSH
56881: EMPTY
56882: LIST
56883: LIST
56884: PUSH
56885: LD_INT 0
56887: PUSH
56888: LD_INT 3
56890: PUSH
56891: EMPTY
56892: LIST
56893: LIST
56894: PUSH
56895: LD_INT 1
56897: NEG
56898: PUSH
56899: LD_INT 2
56901: PUSH
56902: EMPTY
56903: LIST
56904: LIST
56905: PUSH
56906: EMPTY
56907: LIST
56908: LIST
56909: LIST
56910: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56911: LD_ADDR_VAR 0 57
56915: PUSH
56916: LD_INT 2
56918: NEG
56919: PUSH
56920: LD_INT 1
56922: PUSH
56923: EMPTY
56924: LIST
56925: LIST
56926: PUSH
56927: LD_INT 3
56929: NEG
56930: PUSH
56931: LD_INT 0
56933: PUSH
56934: EMPTY
56935: LIST
56936: LIST
56937: PUSH
56938: LD_INT 3
56940: NEG
56941: PUSH
56942: LD_INT 1
56944: NEG
56945: PUSH
56946: EMPTY
56947: LIST
56948: LIST
56949: PUSH
56950: EMPTY
56951: LIST
56952: LIST
56953: LIST
56954: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56955: LD_ADDR_VAR 0 58
56959: PUSH
56960: LD_INT 2
56962: NEG
56963: PUSH
56964: LD_INT 3
56966: NEG
56967: PUSH
56968: EMPTY
56969: LIST
56970: LIST
56971: PUSH
56972: LD_INT 3
56974: NEG
56975: PUSH
56976: LD_INT 2
56978: NEG
56979: PUSH
56980: EMPTY
56981: LIST
56982: LIST
56983: PUSH
56984: LD_INT 3
56986: NEG
56987: PUSH
56988: LD_INT 3
56990: NEG
56991: PUSH
56992: EMPTY
56993: LIST
56994: LIST
56995: PUSH
56996: EMPTY
56997: LIST
56998: LIST
56999: LIST
57000: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
57001: LD_ADDR_VAR 0 59
57005: PUSH
57006: LD_INT 1
57008: NEG
57009: PUSH
57010: LD_INT 2
57012: NEG
57013: PUSH
57014: EMPTY
57015: LIST
57016: LIST
57017: PUSH
57018: LD_INT 0
57020: PUSH
57021: LD_INT 2
57023: NEG
57024: PUSH
57025: EMPTY
57026: LIST
57027: LIST
57028: PUSH
57029: LD_INT 1
57031: PUSH
57032: LD_INT 1
57034: NEG
57035: PUSH
57036: EMPTY
57037: LIST
57038: LIST
57039: PUSH
57040: EMPTY
57041: LIST
57042: LIST
57043: LIST
57044: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
57045: LD_ADDR_VAR 0 60
57049: PUSH
57050: LD_INT 1
57052: PUSH
57053: LD_INT 1
57055: NEG
57056: PUSH
57057: EMPTY
57058: LIST
57059: LIST
57060: PUSH
57061: LD_INT 2
57063: PUSH
57064: LD_INT 0
57066: PUSH
57067: EMPTY
57068: LIST
57069: LIST
57070: PUSH
57071: LD_INT 2
57073: PUSH
57074: LD_INT 1
57076: PUSH
57077: EMPTY
57078: LIST
57079: LIST
57080: PUSH
57081: EMPTY
57082: LIST
57083: LIST
57084: LIST
57085: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
57086: LD_ADDR_VAR 0 61
57090: PUSH
57091: LD_INT 2
57093: PUSH
57094: LD_INT 1
57096: PUSH
57097: EMPTY
57098: LIST
57099: LIST
57100: PUSH
57101: LD_INT 2
57103: PUSH
57104: LD_INT 2
57106: PUSH
57107: EMPTY
57108: LIST
57109: LIST
57110: PUSH
57111: LD_INT 1
57113: PUSH
57114: LD_INT 2
57116: PUSH
57117: EMPTY
57118: LIST
57119: LIST
57120: PUSH
57121: EMPTY
57122: LIST
57123: LIST
57124: LIST
57125: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
57126: LD_ADDR_VAR 0 62
57130: PUSH
57131: LD_INT 1
57133: PUSH
57134: LD_INT 2
57136: PUSH
57137: EMPTY
57138: LIST
57139: LIST
57140: PUSH
57141: LD_INT 0
57143: PUSH
57144: LD_INT 2
57146: PUSH
57147: EMPTY
57148: LIST
57149: LIST
57150: PUSH
57151: LD_INT 1
57153: NEG
57154: PUSH
57155: LD_INT 1
57157: PUSH
57158: EMPTY
57159: LIST
57160: LIST
57161: PUSH
57162: EMPTY
57163: LIST
57164: LIST
57165: LIST
57166: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
57167: LD_ADDR_VAR 0 63
57171: PUSH
57172: LD_INT 1
57174: NEG
57175: PUSH
57176: LD_INT 1
57178: PUSH
57179: EMPTY
57180: LIST
57181: LIST
57182: PUSH
57183: LD_INT 2
57185: NEG
57186: PUSH
57187: LD_INT 0
57189: PUSH
57190: EMPTY
57191: LIST
57192: LIST
57193: PUSH
57194: LD_INT 2
57196: NEG
57197: PUSH
57198: LD_INT 1
57200: NEG
57201: PUSH
57202: EMPTY
57203: LIST
57204: LIST
57205: PUSH
57206: EMPTY
57207: LIST
57208: LIST
57209: LIST
57210: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57211: LD_ADDR_VAR 0 64
57215: PUSH
57216: LD_INT 1
57218: NEG
57219: PUSH
57220: LD_INT 2
57222: NEG
57223: PUSH
57224: EMPTY
57225: LIST
57226: LIST
57227: PUSH
57228: LD_INT 2
57230: NEG
57231: PUSH
57232: LD_INT 1
57234: NEG
57235: PUSH
57236: EMPTY
57237: LIST
57238: LIST
57239: PUSH
57240: LD_INT 2
57242: NEG
57243: PUSH
57244: LD_INT 2
57246: NEG
57247: PUSH
57248: EMPTY
57249: LIST
57250: LIST
57251: PUSH
57252: EMPTY
57253: LIST
57254: LIST
57255: LIST
57256: ST_TO_ADDR
// end ; 2 :
57257: GO 60523
57259: LD_INT 2
57261: DOUBLE
57262: EQUAL
57263: IFTRUE 57267
57265: GO 60522
57267: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
57268: LD_ADDR_VAR 0 29
57272: PUSH
57273: LD_INT 4
57275: PUSH
57276: LD_INT 0
57278: PUSH
57279: EMPTY
57280: LIST
57281: LIST
57282: PUSH
57283: LD_INT 4
57285: PUSH
57286: LD_INT 1
57288: NEG
57289: PUSH
57290: EMPTY
57291: LIST
57292: LIST
57293: PUSH
57294: LD_INT 5
57296: PUSH
57297: LD_INT 0
57299: PUSH
57300: EMPTY
57301: LIST
57302: LIST
57303: PUSH
57304: LD_INT 5
57306: PUSH
57307: LD_INT 1
57309: PUSH
57310: EMPTY
57311: LIST
57312: LIST
57313: PUSH
57314: LD_INT 4
57316: PUSH
57317: LD_INT 1
57319: PUSH
57320: EMPTY
57321: LIST
57322: LIST
57323: PUSH
57324: LD_INT 3
57326: PUSH
57327: LD_INT 0
57329: PUSH
57330: EMPTY
57331: LIST
57332: LIST
57333: PUSH
57334: LD_INT 3
57336: PUSH
57337: LD_INT 1
57339: NEG
57340: PUSH
57341: EMPTY
57342: LIST
57343: LIST
57344: PUSH
57345: LD_INT 3
57347: PUSH
57348: LD_INT 2
57350: NEG
57351: PUSH
57352: EMPTY
57353: LIST
57354: LIST
57355: PUSH
57356: LD_INT 5
57358: PUSH
57359: LD_INT 2
57361: PUSH
57362: EMPTY
57363: LIST
57364: LIST
57365: PUSH
57366: LD_INT 3
57368: PUSH
57369: LD_INT 3
57371: PUSH
57372: EMPTY
57373: LIST
57374: LIST
57375: PUSH
57376: LD_INT 3
57378: PUSH
57379: LD_INT 2
57381: PUSH
57382: EMPTY
57383: LIST
57384: LIST
57385: PUSH
57386: LD_INT 4
57388: PUSH
57389: LD_INT 3
57391: PUSH
57392: EMPTY
57393: LIST
57394: LIST
57395: PUSH
57396: LD_INT 4
57398: PUSH
57399: LD_INT 4
57401: PUSH
57402: EMPTY
57403: LIST
57404: LIST
57405: PUSH
57406: LD_INT 3
57408: PUSH
57409: LD_INT 4
57411: PUSH
57412: EMPTY
57413: LIST
57414: LIST
57415: PUSH
57416: LD_INT 2
57418: PUSH
57419: LD_INT 3
57421: PUSH
57422: EMPTY
57423: LIST
57424: LIST
57425: PUSH
57426: LD_INT 2
57428: PUSH
57429: LD_INT 2
57431: PUSH
57432: EMPTY
57433: LIST
57434: LIST
57435: PUSH
57436: LD_INT 4
57438: PUSH
57439: LD_INT 2
57441: PUSH
57442: EMPTY
57443: LIST
57444: LIST
57445: PUSH
57446: LD_INT 2
57448: PUSH
57449: LD_INT 4
57451: PUSH
57452: EMPTY
57453: LIST
57454: LIST
57455: PUSH
57456: LD_INT 0
57458: PUSH
57459: LD_INT 4
57461: PUSH
57462: EMPTY
57463: LIST
57464: LIST
57465: PUSH
57466: LD_INT 0
57468: PUSH
57469: LD_INT 3
57471: PUSH
57472: EMPTY
57473: LIST
57474: LIST
57475: PUSH
57476: LD_INT 1
57478: PUSH
57479: LD_INT 4
57481: PUSH
57482: EMPTY
57483: LIST
57484: LIST
57485: PUSH
57486: LD_INT 1
57488: PUSH
57489: LD_INT 5
57491: PUSH
57492: EMPTY
57493: LIST
57494: LIST
57495: PUSH
57496: LD_INT 0
57498: PUSH
57499: LD_INT 5
57501: PUSH
57502: EMPTY
57503: LIST
57504: LIST
57505: PUSH
57506: LD_INT 1
57508: NEG
57509: PUSH
57510: LD_INT 4
57512: PUSH
57513: EMPTY
57514: LIST
57515: LIST
57516: PUSH
57517: LD_INT 1
57519: NEG
57520: PUSH
57521: LD_INT 3
57523: PUSH
57524: EMPTY
57525: LIST
57526: LIST
57527: PUSH
57528: LD_INT 2
57530: PUSH
57531: LD_INT 5
57533: PUSH
57534: EMPTY
57535: LIST
57536: LIST
57537: PUSH
57538: LD_INT 2
57540: NEG
57541: PUSH
57542: LD_INT 3
57544: PUSH
57545: EMPTY
57546: LIST
57547: LIST
57548: PUSH
57549: LD_INT 3
57551: NEG
57552: PUSH
57553: LD_INT 0
57555: PUSH
57556: EMPTY
57557: LIST
57558: LIST
57559: PUSH
57560: LD_INT 3
57562: NEG
57563: PUSH
57564: LD_INT 1
57566: NEG
57567: PUSH
57568: EMPTY
57569: LIST
57570: LIST
57571: PUSH
57572: LD_INT 2
57574: NEG
57575: PUSH
57576: LD_INT 0
57578: PUSH
57579: EMPTY
57580: LIST
57581: LIST
57582: PUSH
57583: LD_INT 2
57585: NEG
57586: PUSH
57587: LD_INT 1
57589: PUSH
57590: EMPTY
57591: LIST
57592: LIST
57593: PUSH
57594: LD_INT 3
57596: NEG
57597: PUSH
57598: LD_INT 1
57600: PUSH
57601: EMPTY
57602: LIST
57603: LIST
57604: PUSH
57605: LD_INT 4
57607: NEG
57608: PUSH
57609: LD_INT 0
57611: PUSH
57612: EMPTY
57613: LIST
57614: LIST
57615: PUSH
57616: LD_INT 4
57618: NEG
57619: PUSH
57620: LD_INT 1
57622: NEG
57623: PUSH
57624: EMPTY
57625: LIST
57626: LIST
57627: PUSH
57628: LD_INT 4
57630: NEG
57631: PUSH
57632: LD_INT 2
57634: NEG
57635: PUSH
57636: EMPTY
57637: LIST
57638: LIST
57639: PUSH
57640: LD_INT 2
57642: NEG
57643: PUSH
57644: LD_INT 2
57646: PUSH
57647: EMPTY
57648: LIST
57649: LIST
57650: PUSH
57651: LD_INT 4
57653: NEG
57654: PUSH
57655: LD_INT 4
57657: NEG
57658: PUSH
57659: EMPTY
57660: LIST
57661: LIST
57662: PUSH
57663: LD_INT 4
57665: NEG
57666: PUSH
57667: LD_INT 5
57669: NEG
57670: PUSH
57671: EMPTY
57672: LIST
57673: LIST
57674: PUSH
57675: LD_INT 3
57677: NEG
57678: PUSH
57679: LD_INT 4
57681: NEG
57682: PUSH
57683: EMPTY
57684: LIST
57685: LIST
57686: PUSH
57687: LD_INT 3
57689: NEG
57690: PUSH
57691: LD_INT 3
57693: NEG
57694: PUSH
57695: EMPTY
57696: LIST
57697: LIST
57698: PUSH
57699: LD_INT 4
57701: NEG
57702: PUSH
57703: LD_INT 3
57705: NEG
57706: PUSH
57707: EMPTY
57708: LIST
57709: LIST
57710: PUSH
57711: LD_INT 5
57713: NEG
57714: PUSH
57715: LD_INT 4
57717: NEG
57718: PUSH
57719: EMPTY
57720: LIST
57721: LIST
57722: PUSH
57723: LD_INT 5
57725: NEG
57726: PUSH
57727: LD_INT 5
57729: NEG
57730: PUSH
57731: EMPTY
57732: LIST
57733: LIST
57734: PUSH
57735: LD_INT 3
57737: NEG
57738: PUSH
57739: LD_INT 5
57741: NEG
57742: PUSH
57743: EMPTY
57744: LIST
57745: LIST
57746: PUSH
57747: LD_INT 5
57749: NEG
57750: PUSH
57751: LD_INT 3
57753: NEG
57754: PUSH
57755: EMPTY
57756: LIST
57757: LIST
57758: PUSH
57759: EMPTY
57760: LIST
57761: LIST
57762: LIST
57763: LIST
57764: LIST
57765: LIST
57766: LIST
57767: LIST
57768: LIST
57769: LIST
57770: LIST
57771: LIST
57772: LIST
57773: LIST
57774: LIST
57775: LIST
57776: LIST
57777: LIST
57778: LIST
57779: LIST
57780: LIST
57781: LIST
57782: LIST
57783: LIST
57784: LIST
57785: LIST
57786: LIST
57787: LIST
57788: LIST
57789: LIST
57790: LIST
57791: LIST
57792: LIST
57793: LIST
57794: LIST
57795: LIST
57796: LIST
57797: LIST
57798: LIST
57799: LIST
57800: LIST
57801: LIST
57802: LIST
57803: LIST
57804: LIST
57805: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
57806: LD_ADDR_VAR 0 30
57810: PUSH
57811: LD_INT 4
57813: PUSH
57814: LD_INT 4
57816: PUSH
57817: EMPTY
57818: LIST
57819: LIST
57820: PUSH
57821: LD_INT 4
57823: PUSH
57824: LD_INT 3
57826: PUSH
57827: EMPTY
57828: LIST
57829: LIST
57830: PUSH
57831: LD_INT 5
57833: PUSH
57834: LD_INT 4
57836: PUSH
57837: EMPTY
57838: LIST
57839: LIST
57840: PUSH
57841: LD_INT 5
57843: PUSH
57844: LD_INT 5
57846: PUSH
57847: EMPTY
57848: LIST
57849: LIST
57850: PUSH
57851: LD_INT 4
57853: PUSH
57854: LD_INT 5
57856: PUSH
57857: EMPTY
57858: LIST
57859: LIST
57860: PUSH
57861: LD_INT 3
57863: PUSH
57864: LD_INT 4
57866: PUSH
57867: EMPTY
57868: LIST
57869: LIST
57870: PUSH
57871: LD_INT 3
57873: PUSH
57874: LD_INT 3
57876: PUSH
57877: EMPTY
57878: LIST
57879: LIST
57880: PUSH
57881: LD_INT 5
57883: PUSH
57884: LD_INT 3
57886: PUSH
57887: EMPTY
57888: LIST
57889: LIST
57890: PUSH
57891: LD_INT 3
57893: PUSH
57894: LD_INT 5
57896: PUSH
57897: EMPTY
57898: LIST
57899: LIST
57900: PUSH
57901: LD_INT 0
57903: PUSH
57904: LD_INT 3
57906: PUSH
57907: EMPTY
57908: LIST
57909: LIST
57910: PUSH
57911: LD_INT 0
57913: PUSH
57914: LD_INT 2
57916: PUSH
57917: EMPTY
57918: LIST
57919: LIST
57920: PUSH
57921: LD_INT 1
57923: PUSH
57924: LD_INT 3
57926: PUSH
57927: EMPTY
57928: LIST
57929: LIST
57930: PUSH
57931: LD_INT 1
57933: PUSH
57934: LD_INT 4
57936: PUSH
57937: EMPTY
57938: LIST
57939: LIST
57940: PUSH
57941: LD_INT 0
57943: PUSH
57944: LD_INT 4
57946: PUSH
57947: EMPTY
57948: LIST
57949: LIST
57950: PUSH
57951: LD_INT 1
57953: NEG
57954: PUSH
57955: LD_INT 3
57957: PUSH
57958: EMPTY
57959: LIST
57960: LIST
57961: PUSH
57962: LD_INT 1
57964: NEG
57965: PUSH
57966: LD_INT 2
57968: PUSH
57969: EMPTY
57970: LIST
57971: LIST
57972: PUSH
57973: LD_INT 2
57975: PUSH
57976: LD_INT 4
57978: PUSH
57979: EMPTY
57980: LIST
57981: LIST
57982: PUSH
57983: LD_INT 2
57985: NEG
57986: PUSH
57987: LD_INT 2
57989: PUSH
57990: EMPTY
57991: LIST
57992: LIST
57993: PUSH
57994: LD_INT 4
57996: NEG
57997: PUSH
57998: LD_INT 0
58000: PUSH
58001: EMPTY
58002: LIST
58003: LIST
58004: PUSH
58005: LD_INT 4
58007: NEG
58008: PUSH
58009: LD_INT 1
58011: NEG
58012: PUSH
58013: EMPTY
58014: LIST
58015: LIST
58016: PUSH
58017: LD_INT 3
58019: NEG
58020: PUSH
58021: LD_INT 0
58023: PUSH
58024: EMPTY
58025: LIST
58026: LIST
58027: PUSH
58028: LD_INT 3
58030: NEG
58031: PUSH
58032: LD_INT 1
58034: PUSH
58035: EMPTY
58036: LIST
58037: LIST
58038: PUSH
58039: LD_INT 4
58041: NEG
58042: PUSH
58043: LD_INT 1
58045: PUSH
58046: EMPTY
58047: LIST
58048: LIST
58049: PUSH
58050: LD_INT 5
58052: NEG
58053: PUSH
58054: LD_INT 0
58056: PUSH
58057: EMPTY
58058: LIST
58059: LIST
58060: PUSH
58061: LD_INT 5
58063: NEG
58064: PUSH
58065: LD_INT 1
58067: NEG
58068: PUSH
58069: EMPTY
58070: LIST
58071: LIST
58072: PUSH
58073: LD_INT 5
58075: NEG
58076: PUSH
58077: LD_INT 2
58079: NEG
58080: PUSH
58081: EMPTY
58082: LIST
58083: LIST
58084: PUSH
58085: LD_INT 3
58087: NEG
58088: PUSH
58089: LD_INT 2
58091: PUSH
58092: EMPTY
58093: LIST
58094: LIST
58095: PUSH
58096: LD_INT 3
58098: NEG
58099: PUSH
58100: LD_INT 3
58102: NEG
58103: PUSH
58104: EMPTY
58105: LIST
58106: LIST
58107: PUSH
58108: LD_INT 3
58110: NEG
58111: PUSH
58112: LD_INT 4
58114: NEG
58115: PUSH
58116: EMPTY
58117: LIST
58118: LIST
58119: PUSH
58120: LD_INT 2
58122: NEG
58123: PUSH
58124: LD_INT 3
58126: NEG
58127: PUSH
58128: EMPTY
58129: LIST
58130: LIST
58131: PUSH
58132: LD_INT 2
58134: NEG
58135: PUSH
58136: LD_INT 2
58138: NEG
58139: PUSH
58140: EMPTY
58141: LIST
58142: LIST
58143: PUSH
58144: LD_INT 3
58146: NEG
58147: PUSH
58148: LD_INT 2
58150: NEG
58151: PUSH
58152: EMPTY
58153: LIST
58154: LIST
58155: PUSH
58156: LD_INT 4
58158: NEG
58159: PUSH
58160: LD_INT 3
58162: NEG
58163: PUSH
58164: EMPTY
58165: LIST
58166: LIST
58167: PUSH
58168: LD_INT 4
58170: NEG
58171: PUSH
58172: LD_INT 4
58174: NEG
58175: PUSH
58176: EMPTY
58177: LIST
58178: LIST
58179: PUSH
58180: LD_INT 2
58182: NEG
58183: PUSH
58184: LD_INT 4
58186: NEG
58187: PUSH
58188: EMPTY
58189: LIST
58190: LIST
58191: PUSH
58192: LD_INT 4
58194: NEG
58195: PUSH
58196: LD_INT 2
58198: NEG
58199: PUSH
58200: EMPTY
58201: LIST
58202: LIST
58203: PUSH
58204: LD_INT 0
58206: PUSH
58207: LD_INT 4
58209: NEG
58210: PUSH
58211: EMPTY
58212: LIST
58213: LIST
58214: PUSH
58215: LD_INT 0
58217: PUSH
58218: LD_INT 5
58220: NEG
58221: PUSH
58222: EMPTY
58223: LIST
58224: LIST
58225: PUSH
58226: LD_INT 1
58228: PUSH
58229: LD_INT 4
58231: NEG
58232: PUSH
58233: EMPTY
58234: LIST
58235: LIST
58236: PUSH
58237: LD_INT 1
58239: PUSH
58240: LD_INT 3
58242: NEG
58243: PUSH
58244: EMPTY
58245: LIST
58246: LIST
58247: PUSH
58248: LD_INT 0
58250: PUSH
58251: LD_INT 3
58253: NEG
58254: PUSH
58255: EMPTY
58256: LIST
58257: LIST
58258: PUSH
58259: LD_INT 1
58261: NEG
58262: PUSH
58263: LD_INT 4
58265: NEG
58266: PUSH
58267: EMPTY
58268: LIST
58269: LIST
58270: PUSH
58271: LD_INT 1
58273: NEG
58274: PUSH
58275: LD_INT 5
58277: NEG
58278: PUSH
58279: EMPTY
58280: LIST
58281: LIST
58282: PUSH
58283: LD_INT 2
58285: PUSH
58286: LD_INT 3
58288: NEG
58289: PUSH
58290: EMPTY
58291: LIST
58292: LIST
58293: PUSH
58294: LD_INT 2
58296: NEG
58297: PUSH
58298: LD_INT 5
58300: NEG
58301: PUSH
58302: EMPTY
58303: LIST
58304: LIST
58305: PUSH
58306: EMPTY
58307: LIST
58308: LIST
58309: LIST
58310: LIST
58311: LIST
58312: LIST
58313: LIST
58314: LIST
58315: LIST
58316: LIST
58317: LIST
58318: LIST
58319: LIST
58320: LIST
58321: LIST
58322: LIST
58323: LIST
58324: LIST
58325: LIST
58326: LIST
58327: LIST
58328: LIST
58329: LIST
58330: LIST
58331: LIST
58332: LIST
58333: LIST
58334: LIST
58335: LIST
58336: LIST
58337: LIST
58338: LIST
58339: LIST
58340: LIST
58341: LIST
58342: LIST
58343: LIST
58344: LIST
58345: LIST
58346: LIST
58347: LIST
58348: LIST
58349: LIST
58350: LIST
58351: LIST
58352: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
58353: LD_ADDR_VAR 0 31
58357: PUSH
58358: LD_INT 0
58360: PUSH
58361: LD_INT 4
58363: PUSH
58364: EMPTY
58365: LIST
58366: LIST
58367: PUSH
58368: LD_INT 0
58370: PUSH
58371: LD_INT 3
58373: PUSH
58374: EMPTY
58375: LIST
58376: LIST
58377: PUSH
58378: LD_INT 1
58380: PUSH
58381: LD_INT 4
58383: PUSH
58384: EMPTY
58385: LIST
58386: LIST
58387: PUSH
58388: LD_INT 1
58390: PUSH
58391: LD_INT 5
58393: PUSH
58394: EMPTY
58395: LIST
58396: LIST
58397: PUSH
58398: LD_INT 0
58400: PUSH
58401: LD_INT 5
58403: PUSH
58404: EMPTY
58405: LIST
58406: LIST
58407: PUSH
58408: LD_INT 1
58410: NEG
58411: PUSH
58412: LD_INT 4
58414: PUSH
58415: EMPTY
58416: LIST
58417: LIST
58418: PUSH
58419: LD_INT 1
58421: NEG
58422: PUSH
58423: LD_INT 3
58425: PUSH
58426: EMPTY
58427: LIST
58428: LIST
58429: PUSH
58430: LD_INT 2
58432: PUSH
58433: LD_INT 5
58435: PUSH
58436: EMPTY
58437: LIST
58438: LIST
58439: PUSH
58440: LD_INT 2
58442: NEG
58443: PUSH
58444: LD_INT 3
58446: PUSH
58447: EMPTY
58448: LIST
58449: LIST
58450: PUSH
58451: LD_INT 3
58453: NEG
58454: PUSH
58455: LD_INT 0
58457: PUSH
58458: EMPTY
58459: LIST
58460: LIST
58461: PUSH
58462: LD_INT 3
58464: NEG
58465: PUSH
58466: LD_INT 1
58468: NEG
58469: PUSH
58470: EMPTY
58471: LIST
58472: LIST
58473: PUSH
58474: LD_INT 2
58476: NEG
58477: PUSH
58478: LD_INT 0
58480: PUSH
58481: EMPTY
58482: LIST
58483: LIST
58484: PUSH
58485: LD_INT 2
58487: NEG
58488: PUSH
58489: LD_INT 1
58491: PUSH
58492: EMPTY
58493: LIST
58494: LIST
58495: PUSH
58496: LD_INT 3
58498: NEG
58499: PUSH
58500: LD_INT 1
58502: PUSH
58503: EMPTY
58504: LIST
58505: LIST
58506: PUSH
58507: LD_INT 4
58509: NEG
58510: PUSH
58511: LD_INT 0
58513: PUSH
58514: EMPTY
58515: LIST
58516: LIST
58517: PUSH
58518: LD_INT 4
58520: NEG
58521: PUSH
58522: LD_INT 1
58524: NEG
58525: PUSH
58526: EMPTY
58527: LIST
58528: LIST
58529: PUSH
58530: LD_INT 4
58532: NEG
58533: PUSH
58534: LD_INT 2
58536: NEG
58537: PUSH
58538: EMPTY
58539: LIST
58540: LIST
58541: PUSH
58542: LD_INT 2
58544: NEG
58545: PUSH
58546: LD_INT 2
58548: PUSH
58549: EMPTY
58550: LIST
58551: LIST
58552: PUSH
58553: LD_INT 4
58555: NEG
58556: PUSH
58557: LD_INT 4
58559: NEG
58560: PUSH
58561: EMPTY
58562: LIST
58563: LIST
58564: PUSH
58565: LD_INT 4
58567: NEG
58568: PUSH
58569: LD_INT 5
58571: NEG
58572: PUSH
58573: EMPTY
58574: LIST
58575: LIST
58576: PUSH
58577: LD_INT 3
58579: NEG
58580: PUSH
58581: LD_INT 4
58583: NEG
58584: PUSH
58585: EMPTY
58586: LIST
58587: LIST
58588: PUSH
58589: LD_INT 3
58591: NEG
58592: PUSH
58593: LD_INT 3
58595: NEG
58596: PUSH
58597: EMPTY
58598: LIST
58599: LIST
58600: PUSH
58601: LD_INT 4
58603: NEG
58604: PUSH
58605: LD_INT 3
58607: NEG
58608: PUSH
58609: EMPTY
58610: LIST
58611: LIST
58612: PUSH
58613: LD_INT 5
58615: NEG
58616: PUSH
58617: LD_INT 4
58619: NEG
58620: PUSH
58621: EMPTY
58622: LIST
58623: LIST
58624: PUSH
58625: LD_INT 5
58627: NEG
58628: PUSH
58629: LD_INT 5
58631: NEG
58632: PUSH
58633: EMPTY
58634: LIST
58635: LIST
58636: PUSH
58637: LD_INT 3
58639: NEG
58640: PUSH
58641: LD_INT 5
58643: NEG
58644: PUSH
58645: EMPTY
58646: LIST
58647: LIST
58648: PUSH
58649: LD_INT 5
58651: NEG
58652: PUSH
58653: LD_INT 3
58655: NEG
58656: PUSH
58657: EMPTY
58658: LIST
58659: LIST
58660: PUSH
58661: LD_INT 0
58663: PUSH
58664: LD_INT 3
58666: NEG
58667: PUSH
58668: EMPTY
58669: LIST
58670: LIST
58671: PUSH
58672: LD_INT 0
58674: PUSH
58675: LD_INT 4
58677: NEG
58678: PUSH
58679: EMPTY
58680: LIST
58681: LIST
58682: PUSH
58683: LD_INT 1
58685: PUSH
58686: LD_INT 3
58688: NEG
58689: PUSH
58690: EMPTY
58691: LIST
58692: LIST
58693: PUSH
58694: LD_INT 1
58696: PUSH
58697: LD_INT 2
58699: NEG
58700: PUSH
58701: EMPTY
58702: LIST
58703: LIST
58704: PUSH
58705: LD_INT 0
58707: PUSH
58708: LD_INT 2
58710: NEG
58711: PUSH
58712: EMPTY
58713: LIST
58714: LIST
58715: PUSH
58716: LD_INT 1
58718: NEG
58719: PUSH
58720: LD_INT 3
58722: NEG
58723: PUSH
58724: EMPTY
58725: LIST
58726: LIST
58727: PUSH
58728: LD_INT 1
58730: NEG
58731: PUSH
58732: LD_INT 4
58734: NEG
58735: PUSH
58736: EMPTY
58737: LIST
58738: LIST
58739: PUSH
58740: LD_INT 2
58742: PUSH
58743: LD_INT 2
58745: NEG
58746: PUSH
58747: EMPTY
58748: LIST
58749: LIST
58750: PUSH
58751: LD_INT 2
58753: NEG
58754: PUSH
58755: LD_INT 4
58757: NEG
58758: PUSH
58759: EMPTY
58760: LIST
58761: LIST
58762: PUSH
58763: LD_INT 4
58765: PUSH
58766: LD_INT 0
58768: PUSH
58769: EMPTY
58770: LIST
58771: LIST
58772: PUSH
58773: LD_INT 4
58775: PUSH
58776: LD_INT 1
58778: NEG
58779: PUSH
58780: EMPTY
58781: LIST
58782: LIST
58783: PUSH
58784: LD_INT 5
58786: PUSH
58787: LD_INT 0
58789: PUSH
58790: EMPTY
58791: LIST
58792: LIST
58793: PUSH
58794: LD_INT 5
58796: PUSH
58797: LD_INT 1
58799: PUSH
58800: EMPTY
58801: LIST
58802: LIST
58803: PUSH
58804: LD_INT 4
58806: PUSH
58807: LD_INT 1
58809: PUSH
58810: EMPTY
58811: LIST
58812: LIST
58813: PUSH
58814: LD_INT 3
58816: PUSH
58817: LD_INT 0
58819: PUSH
58820: EMPTY
58821: LIST
58822: LIST
58823: PUSH
58824: LD_INT 3
58826: PUSH
58827: LD_INT 1
58829: NEG
58830: PUSH
58831: EMPTY
58832: LIST
58833: LIST
58834: PUSH
58835: LD_INT 3
58837: PUSH
58838: LD_INT 2
58840: NEG
58841: PUSH
58842: EMPTY
58843: LIST
58844: LIST
58845: PUSH
58846: LD_INT 5
58848: PUSH
58849: LD_INT 2
58851: PUSH
58852: EMPTY
58853: LIST
58854: LIST
58855: PUSH
58856: EMPTY
58857: LIST
58858: LIST
58859: LIST
58860: LIST
58861: LIST
58862: LIST
58863: LIST
58864: LIST
58865: LIST
58866: LIST
58867: LIST
58868: LIST
58869: LIST
58870: LIST
58871: LIST
58872: LIST
58873: LIST
58874: LIST
58875: LIST
58876: LIST
58877: LIST
58878: LIST
58879: LIST
58880: LIST
58881: LIST
58882: LIST
58883: LIST
58884: LIST
58885: LIST
58886: LIST
58887: LIST
58888: LIST
58889: LIST
58890: LIST
58891: LIST
58892: LIST
58893: LIST
58894: LIST
58895: LIST
58896: LIST
58897: LIST
58898: LIST
58899: LIST
58900: LIST
58901: LIST
58902: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
58903: LD_ADDR_VAR 0 32
58907: PUSH
58908: LD_INT 4
58910: NEG
58911: PUSH
58912: LD_INT 0
58914: PUSH
58915: EMPTY
58916: LIST
58917: LIST
58918: PUSH
58919: LD_INT 4
58921: NEG
58922: PUSH
58923: LD_INT 1
58925: NEG
58926: PUSH
58927: EMPTY
58928: LIST
58929: LIST
58930: PUSH
58931: LD_INT 3
58933: NEG
58934: PUSH
58935: LD_INT 0
58937: PUSH
58938: EMPTY
58939: LIST
58940: LIST
58941: PUSH
58942: LD_INT 3
58944: NEG
58945: PUSH
58946: LD_INT 1
58948: PUSH
58949: EMPTY
58950: LIST
58951: LIST
58952: PUSH
58953: LD_INT 4
58955: NEG
58956: PUSH
58957: LD_INT 1
58959: PUSH
58960: EMPTY
58961: LIST
58962: LIST
58963: PUSH
58964: LD_INT 5
58966: NEG
58967: PUSH
58968: LD_INT 0
58970: PUSH
58971: EMPTY
58972: LIST
58973: LIST
58974: PUSH
58975: LD_INT 5
58977: NEG
58978: PUSH
58979: LD_INT 1
58981: NEG
58982: PUSH
58983: EMPTY
58984: LIST
58985: LIST
58986: PUSH
58987: LD_INT 5
58989: NEG
58990: PUSH
58991: LD_INT 2
58993: NEG
58994: PUSH
58995: EMPTY
58996: LIST
58997: LIST
58998: PUSH
58999: LD_INT 3
59001: NEG
59002: PUSH
59003: LD_INT 2
59005: PUSH
59006: EMPTY
59007: LIST
59008: LIST
59009: PUSH
59010: LD_INT 3
59012: NEG
59013: PUSH
59014: LD_INT 3
59016: NEG
59017: PUSH
59018: EMPTY
59019: LIST
59020: LIST
59021: PUSH
59022: LD_INT 3
59024: NEG
59025: PUSH
59026: LD_INT 4
59028: NEG
59029: PUSH
59030: EMPTY
59031: LIST
59032: LIST
59033: PUSH
59034: LD_INT 2
59036: NEG
59037: PUSH
59038: LD_INT 3
59040: NEG
59041: PUSH
59042: EMPTY
59043: LIST
59044: LIST
59045: PUSH
59046: LD_INT 2
59048: NEG
59049: PUSH
59050: LD_INT 2
59052: NEG
59053: PUSH
59054: EMPTY
59055: LIST
59056: LIST
59057: PUSH
59058: LD_INT 3
59060: NEG
59061: PUSH
59062: LD_INT 2
59064: NEG
59065: PUSH
59066: EMPTY
59067: LIST
59068: LIST
59069: PUSH
59070: LD_INT 4
59072: NEG
59073: PUSH
59074: LD_INT 3
59076: NEG
59077: PUSH
59078: EMPTY
59079: LIST
59080: LIST
59081: PUSH
59082: LD_INT 4
59084: NEG
59085: PUSH
59086: LD_INT 4
59088: NEG
59089: PUSH
59090: EMPTY
59091: LIST
59092: LIST
59093: PUSH
59094: LD_INT 2
59096: NEG
59097: PUSH
59098: LD_INT 4
59100: NEG
59101: PUSH
59102: EMPTY
59103: LIST
59104: LIST
59105: PUSH
59106: LD_INT 4
59108: NEG
59109: PUSH
59110: LD_INT 2
59112: NEG
59113: PUSH
59114: EMPTY
59115: LIST
59116: LIST
59117: PUSH
59118: LD_INT 0
59120: PUSH
59121: LD_INT 4
59123: NEG
59124: PUSH
59125: EMPTY
59126: LIST
59127: LIST
59128: PUSH
59129: LD_INT 0
59131: PUSH
59132: LD_INT 5
59134: NEG
59135: PUSH
59136: EMPTY
59137: LIST
59138: LIST
59139: PUSH
59140: LD_INT 1
59142: PUSH
59143: LD_INT 4
59145: NEG
59146: PUSH
59147: EMPTY
59148: LIST
59149: LIST
59150: PUSH
59151: LD_INT 1
59153: PUSH
59154: LD_INT 3
59156: NEG
59157: PUSH
59158: EMPTY
59159: LIST
59160: LIST
59161: PUSH
59162: LD_INT 0
59164: PUSH
59165: LD_INT 3
59167: NEG
59168: PUSH
59169: EMPTY
59170: LIST
59171: LIST
59172: PUSH
59173: LD_INT 1
59175: NEG
59176: PUSH
59177: LD_INT 4
59179: NEG
59180: PUSH
59181: EMPTY
59182: LIST
59183: LIST
59184: PUSH
59185: LD_INT 1
59187: NEG
59188: PUSH
59189: LD_INT 5
59191: NEG
59192: PUSH
59193: EMPTY
59194: LIST
59195: LIST
59196: PUSH
59197: LD_INT 2
59199: PUSH
59200: LD_INT 3
59202: NEG
59203: PUSH
59204: EMPTY
59205: LIST
59206: LIST
59207: PUSH
59208: LD_INT 2
59210: NEG
59211: PUSH
59212: LD_INT 5
59214: NEG
59215: PUSH
59216: EMPTY
59217: LIST
59218: LIST
59219: PUSH
59220: LD_INT 3
59222: PUSH
59223: LD_INT 0
59225: PUSH
59226: EMPTY
59227: LIST
59228: LIST
59229: PUSH
59230: LD_INT 3
59232: PUSH
59233: LD_INT 1
59235: NEG
59236: PUSH
59237: EMPTY
59238: LIST
59239: LIST
59240: PUSH
59241: LD_INT 4
59243: PUSH
59244: LD_INT 0
59246: PUSH
59247: EMPTY
59248: LIST
59249: LIST
59250: PUSH
59251: LD_INT 4
59253: PUSH
59254: LD_INT 1
59256: PUSH
59257: EMPTY
59258: LIST
59259: LIST
59260: PUSH
59261: LD_INT 3
59263: PUSH
59264: LD_INT 1
59266: PUSH
59267: EMPTY
59268: LIST
59269: LIST
59270: PUSH
59271: LD_INT 2
59273: PUSH
59274: LD_INT 0
59276: PUSH
59277: EMPTY
59278: LIST
59279: LIST
59280: PUSH
59281: LD_INT 2
59283: PUSH
59284: LD_INT 1
59286: NEG
59287: PUSH
59288: EMPTY
59289: LIST
59290: LIST
59291: PUSH
59292: LD_INT 2
59294: PUSH
59295: LD_INT 2
59297: NEG
59298: PUSH
59299: EMPTY
59300: LIST
59301: LIST
59302: PUSH
59303: LD_INT 4
59305: PUSH
59306: LD_INT 2
59308: PUSH
59309: EMPTY
59310: LIST
59311: LIST
59312: PUSH
59313: LD_INT 4
59315: PUSH
59316: LD_INT 4
59318: PUSH
59319: EMPTY
59320: LIST
59321: LIST
59322: PUSH
59323: LD_INT 4
59325: PUSH
59326: LD_INT 3
59328: PUSH
59329: EMPTY
59330: LIST
59331: LIST
59332: PUSH
59333: LD_INT 5
59335: PUSH
59336: LD_INT 4
59338: PUSH
59339: EMPTY
59340: LIST
59341: LIST
59342: PUSH
59343: LD_INT 5
59345: PUSH
59346: LD_INT 5
59348: PUSH
59349: EMPTY
59350: LIST
59351: LIST
59352: PUSH
59353: LD_INT 4
59355: PUSH
59356: LD_INT 5
59358: PUSH
59359: EMPTY
59360: LIST
59361: LIST
59362: PUSH
59363: LD_INT 3
59365: PUSH
59366: LD_INT 4
59368: PUSH
59369: EMPTY
59370: LIST
59371: LIST
59372: PUSH
59373: LD_INT 3
59375: PUSH
59376: LD_INT 3
59378: PUSH
59379: EMPTY
59380: LIST
59381: LIST
59382: PUSH
59383: LD_INT 5
59385: PUSH
59386: LD_INT 3
59388: PUSH
59389: EMPTY
59390: LIST
59391: LIST
59392: PUSH
59393: LD_INT 3
59395: PUSH
59396: LD_INT 5
59398: PUSH
59399: EMPTY
59400: LIST
59401: LIST
59402: PUSH
59403: EMPTY
59404: LIST
59405: LIST
59406: LIST
59407: LIST
59408: LIST
59409: LIST
59410: LIST
59411: LIST
59412: LIST
59413: LIST
59414: LIST
59415: LIST
59416: LIST
59417: LIST
59418: LIST
59419: LIST
59420: LIST
59421: LIST
59422: LIST
59423: LIST
59424: LIST
59425: LIST
59426: LIST
59427: LIST
59428: LIST
59429: LIST
59430: LIST
59431: LIST
59432: LIST
59433: LIST
59434: LIST
59435: LIST
59436: LIST
59437: LIST
59438: LIST
59439: LIST
59440: LIST
59441: LIST
59442: LIST
59443: LIST
59444: LIST
59445: LIST
59446: LIST
59447: LIST
59448: LIST
59449: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
59450: LD_ADDR_VAR 0 33
59454: PUSH
59455: LD_INT 4
59457: NEG
59458: PUSH
59459: LD_INT 4
59461: NEG
59462: PUSH
59463: EMPTY
59464: LIST
59465: LIST
59466: PUSH
59467: LD_INT 4
59469: NEG
59470: PUSH
59471: LD_INT 5
59473: NEG
59474: PUSH
59475: EMPTY
59476: LIST
59477: LIST
59478: PUSH
59479: LD_INT 3
59481: NEG
59482: PUSH
59483: LD_INT 4
59485: NEG
59486: PUSH
59487: EMPTY
59488: LIST
59489: LIST
59490: PUSH
59491: LD_INT 3
59493: NEG
59494: PUSH
59495: LD_INT 3
59497: NEG
59498: PUSH
59499: EMPTY
59500: LIST
59501: LIST
59502: PUSH
59503: LD_INT 4
59505: NEG
59506: PUSH
59507: LD_INT 3
59509: NEG
59510: PUSH
59511: EMPTY
59512: LIST
59513: LIST
59514: PUSH
59515: LD_INT 5
59517: NEG
59518: PUSH
59519: LD_INT 4
59521: NEG
59522: PUSH
59523: EMPTY
59524: LIST
59525: LIST
59526: PUSH
59527: LD_INT 5
59529: NEG
59530: PUSH
59531: LD_INT 5
59533: NEG
59534: PUSH
59535: EMPTY
59536: LIST
59537: LIST
59538: PUSH
59539: LD_INT 3
59541: NEG
59542: PUSH
59543: LD_INT 5
59545: NEG
59546: PUSH
59547: EMPTY
59548: LIST
59549: LIST
59550: PUSH
59551: LD_INT 5
59553: NEG
59554: PUSH
59555: LD_INT 3
59557: NEG
59558: PUSH
59559: EMPTY
59560: LIST
59561: LIST
59562: PUSH
59563: LD_INT 0
59565: PUSH
59566: LD_INT 3
59568: NEG
59569: PUSH
59570: EMPTY
59571: LIST
59572: LIST
59573: PUSH
59574: LD_INT 0
59576: PUSH
59577: LD_INT 4
59579: NEG
59580: PUSH
59581: EMPTY
59582: LIST
59583: LIST
59584: PUSH
59585: LD_INT 1
59587: PUSH
59588: LD_INT 3
59590: NEG
59591: PUSH
59592: EMPTY
59593: LIST
59594: LIST
59595: PUSH
59596: LD_INT 1
59598: PUSH
59599: LD_INT 2
59601: NEG
59602: PUSH
59603: EMPTY
59604: LIST
59605: LIST
59606: PUSH
59607: LD_INT 0
59609: PUSH
59610: LD_INT 2
59612: NEG
59613: PUSH
59614: EMPTY
59615: LIST
59616: LIST
59617: PUSH
59618: LD_INT 1
59620: NEG
59621: PUSH
59622: LD_INT 3
59624: NEG
59625: PUSH
59626: EMPTY
59627: LIST
59628: LIST
59629: PUSH
59630: LD_INT 1
59632: NEG
59633: PUSH
59634: LD_INT 4
59636: NEG
59637: PUSH
59638: EMPTY
59639: LIST
59640: LIST
59641: PUSH
59642: LD_INT 2
59644: PUSH
59645: LD_INT 2
59647: NEG
59648: PUSH
59649: EMPTY
59650: LIST
59651: LIST
59652: PUSH
59653: LD_INT 2
59655: NEG
59656: PUSH
59657: LD_INT 4
59659: NEG
59660: PUSH
59661: EMPTY
59662: LIST
59663: LIST
59664: PUSH
59665: LD_INT 4
59667: PUSH
59668: LD_INT 0
59670: PUSH
59671: EMPTY
59672: LIST
59673: LIST
59674: PUSH
59675: LD_INT 4
59677: PUSH
59678: LD_INT 1
59680: NEG
59681: PUSH
59682: EMPTY
59683: LIST
59684: LIST
59685: PUSH
59686: LD_INT 5
59688: PUSH
59689: LD_INT 0
59691: PUSH
59692: EMPTY
59693: LIST
59694: LIST
59695: PUSH
59696: LD_INT 5
59698: PUSH
59699: LD_INT 1
59701: PUSH
59702: EMPTY
59703: LIST
59704: LIST
59705: PUSH
59706: LD_INT 4
59708: PUSH
59709: LD_INT 1
59711: PUSH
59712: EMPTY
59713: LIST
59714: LIST
59715: PUSH
59716: LD_INT 3
59718: PUSH
59719: LD_INT 0
59721: PUSH
59722: EMPTY
59723: LIST
59724: LIST
59725: PUSH
59726: LD_INT 3
59728: PUSH
59729: LD_INT 1
59731: NEG
59732: PUSH
59733: EMPTY
59734: LIST
59735: LIST
59736: PUSH
59737: LD_INT 3
59739: PUSH
59740: LD_INT 2
59742: NEG
59743: PUSH
59744: EMPTY
59745: LIST
59746: LIST
59747: PUSH
59748: LD_INT 5
59750: PUSH
59751: LD_INT 2
59753: PUSH
59754: EMPTY
59755: LIST
59756: LIST
59757: PUSH
59758: LD_INT 3
59760: PUSH
59761: LD_INT 3
59763: PUSH
59764: EMPTY
59765: LIST
59766: LIST
59767: PUSH
59768: LD_INT 3
59770: PUSH
59771: LD_INT 2
59773: PUSH
59774: EMPTY
59775: LIST
59776: LIST
59777: PUSH
59778: LD_INT 4
59780: PUSH
59781: LD_INT 3
59783: PUSH
59784: EMPTY
59785: LIST
59786: LIST
59787: PUSH
59788: LD_INT 4
59790: PUSH
59791: LD_INT 4
59793: PUSH
59794: EMPTY
59795: LIST
59796: LIST
59797: PUSH
59798: LD_INT 3
59800: PUSH
59801: LD_INT 4
59803: PUSH
59804: EMPTY
59805: LIST
59806: LIST
59807: PUSH
59808: LD_INT 2
59810: PUSH
59811: LD_INT 3
59813: PUSH
59814: EMPTY
59815: LIST
59816: LIST
59817: PUSH
59818: LD_INT 2
59820: PUSH
59821: LD_INT 2
59823: PUSH
59824: EMPTY
59825: LIST
59826: LIST
59827: PUSH
59828: LD_INT 4
59830: PUSH
59831: LD_INT 2
59833: PUSH
59834: EMPTY
59835: LIST
59836: LIST
59837: PUSH
59838: LD_INT 2
59840: PUSH
59841: LD_INT 4
59843: PUSH
59844: EMPTY
59845: LIST
59846: LIST
59847: PUSH
59848: LD_INT 0
59850: PUSH
59851: LD_INT 4
59853: PUSH
59854: EMPTY
59855: LIST
59856: LIST
59857: PUSH
59858: LD_INT 0
59860: PUSH
59861: LD_INT 3
59863: PUSH
59864: EMPTY
59865: LIST
59866: LIST
59867: PUSH
59868: LD_INT 1
59870: PUSH
59871: LD_INT 4
59873: PUSH
59874: EMPTY
59875: LIST
59876: LIST
59877: PUSH
59878: LD_INT 1
59880: PUSH
59881: LD_INT 5
59883: PUSH
59884: EMPTY
59885: LIST
59886: LIST
59887: PUSH
59888: LD_INT 0
59890: PUSH
59891: LD_INT 5
59893: PUSH
59894: EMPTY
59895: LIST
59896: LIST
59897: PUSH
59898: LD_INT 1
59900: NEG
59901: PUSH
59902: LD_INT 4
59904: PUSH
59905: EMPTY
59906: LIST
59907: LIST
59908: PUSH
59909: LD_INT 1
59911: NEG
59912: PUSH
59913: LD_INT 3
59915: PUSH
59916: EMPTY
59917: LIST
59918: LIST
59919: PUSH
59920: LD_INT 2
59922: PUSH
59923: LD_INT 5
59925: PUSH
59926: EMPTY
59927: LIST
59928: LIST
59929: PUSH
59930: LD_INT 2
59932: NEG
59933: PUSH
59934: LD_INT 3
59936: PUSH
59937: EMPTY
59938: LIST
59939: LIST
59940: PUSH
59941: EMPTY
59942: LIST
59943: LIST
59944: LIST
59945: LIST
59946: LIST
59947: LIST
59948: LIST
59949: LIST
59950: LIST
59951: LIST
59952: LIST
59953: LIST
59954: LIST
59955: LIST
59956: LIST
59957: LIST
59958: LIST
59959: LIST
59960: LIST
59961: LIST
59962: LIST
59963: LIST
59964: LIST
59965: LIST
59966: LIST
59967: LIST
59968: LIST
59969: LIST
59970: LIST
59971: LIST
59972: LIST
59973: LIST
59974: LIST
59975: LIST
59976: LIST
59977: LIST
59978: LIST
59979: LIST
59980: LIST
59981: LIST
59982: LIST
59983: LIST
59984: LIST
59985: LIST
59986: LIST
59987: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
59988: LD_ADDR_VAR 0 34
59992: PUSH
59993: LD_INT 0
59995: PUSH
59996: LD_INT 4
59998: NEG
59999: PUSH
60000: EMPTY
60001: LIST
60002: LIST
60003: PUSH
60004: LD_INT 0
60006: PUSH
60007: LD_INT 5
60009: NEG
60010: PUSH
60011: EMPTY
60012: LIST
60013: LIST
60014: PUSH
60015: LD_INT 1
60017: PUSH
60018: LD_INT 4
60020: NEG
60021: PUSH
60022: EMPTY
60023: LIST
60024: LIST
60025: PUSH
60026: LD_INT 1
60028: PUSH
60029: LD_INT 3
60031: NEG
60032: PUSH
60033: EMPTY
60034: LIST
60035: LIST
60036: PUSH
60037: LD_INT 0
60039: PUSH
60040: LD_INT 3
60042: NEG
60043: PUSH
60044: EMPTY
60045: LIST
60046: LIST
60047: PUSH
60048: LD_INT 1
60050: NEG
60051: PUSH
60052: LD_INT 4
60054: NEG
60055: PUSH
60056: EMPTY
60057: LIST
60058: LIST
60059: PUSH
60060: LD_INT 1
60062: NEG
60063: PUSH
60064: LD_INT 5
60066: NEG
60067: PUSH
60068: EMPTY
60069: LIST
60070: LIST
60071: PUSH
60072: LD_INT 2
60074: PUSH
60075: LD_INT 3
60077: NEG
60078: PUSH
60079: EMPTY
60080: LIST
60081: LIST
60082: PUSH
60083: LD_INT 2
60085: NEG
60086: PUSH
60087: LD_INT 5
60089: NEG
60090: PUSH
60091: EMPTY
60092: LIST
60093: LIST
60094: PUSH
60095: LD_INT 3
60097: PUSH
60098: LD_INT 0
60100: PUSH
60101: EMPTY
60102: LIST
60103: LIST
60104: PUSH
60105: LD_INT 3
60107: PUSH
60108: LD_INT 1
60110: NEG
60111: PUSH
60112: EMPTY
60113: LIST
60114: LIST
60115: PUSH
60116: LD_INT 4
60118: PUSH
60119: LD_INT 0
60121: PUSH
60122: EMPTY
60123: LIST
60124: LIST
60125: PUSH
60126: LD_INT 4
60128: PUSH
60129: LD_INT 1
60131: PUSH
60132: EMPTY
60133: LIST
60134: LIST
60135: PUSH
60136: LD_INT 3
60138: PUSH
60139: LD_INT 1
60141: PUSH
60142: EMPTY
60143: LIST
60144: LIST
60145: PUSH
60146: LD_INT 2
60148: PUSH
60149: LD_INT 0
60151: PUSH
60152: EMPTY
60153: LIST
60154: LIST
60155: PUSH
60156: LD_INT 2
60158: PUSH
60159: LD_INT 1
60161: NEG
60162: PUSH
60163: EMPTY
60164: LIST
60165: LIST
60166: PUSH
60167: LD_INT 2
60169: PUSH
60170: LD_INT 2
60172: NEG
60173: PUSH
60174: EMPTY
60175: LIST
60176: LIST
60177: PUSH
60178: LD_INT 4
60180: PUSH
60181: LD_INT 2
60183: PUSH
60184: EMPTY
60185: LIST
60186: LIST
60187: PUSH
60188: LD_INT 4
60190: PUSH
60191: LD_INT 4
60193: PUSH
60194: EMPTY
60195: LIST
60196: LIST
60197: PUSH
60198: LD_INT 4
60200: PUSH
60201: LD_INT 3
60203: PUSH
60204: EMPTY
60205: LIST
60206: LIST
60207: PUSH
60208: LD_INT 5
60210: PUSH
60211: LD_INT 4
60213: PUSH
60214: EMPTY
60215: LIST
60216: LIST
60217: PUSH
60218: LD_INT 5
60220: PUSH
60221: LD_INT 5
60223: PUSH
60224: EMPTY
60225: LIST
60226: LIST
60227: PUSH
60228: LD_INT 4
60230: PUSH
60231: LD_INT 5
60233: PUSH
60234: EMPTY
60235: LIST
60236: LIST
60237: PUSH
60238: LD_INT 3
60240: PUSH
60241: LD_INT 4
60243: PUSH
60244: EMPTY
60245: LIST
60246: LIST
60247: PUSH
60248: LD_INT 3
60250: PUSH
60251: LD_INT 3
60253: PUSH
60254: EMPTY
60255: LIST
60256: LIST
60257: PUSH
60258: LD_INT 5
60260: PUSH
60261: LD_INT 3
60263: PUSH
60264: EMPTY
60265: LIST
60266: LIST
60267: PUSH
60268: LD_INT 3
60270: PUSH
60271: LD_INT 5
60273: PUSH
60274: EMPTY
60275: LIST
60276: LIST
60277: PUSH
60278: LD_INT 0
60280: PUSH
60281: LD_INT 3
60283: PUSH
60284: EMPTY
60285: LIST
60286: LIST
60287: PUSH
60288: LD_INT 0
60290: PUSH
60291: LD_INT 2
60293: PUSH
60294: EMPTY
60295: LIST
60296: LIST
60297: PUSH
60298: LD_INT 1
60300: PUSH
60301: LD_INT 3
60303: PUSH
60304: EMPTY
60305: LIST
60306: LIST
60307: PUSH
60308: LD_INT 1
60310: PUSH
60311: LD_INT 4
60313: PUSH
60314: EMPTY
60315: LIST
60316: LIST
60317: PUSH
60318: LD_INT 0
60320: PUSH
60321: LD_INT 4
60323: PUSH
60324: EMPTY
60325: LIST
60326: LIST
60327: PUSH
60328: LD_INT 1
60330: NEG
60331: PUSH
60332: LD_INT 3
60334: PUSH
60335: EMPTY
60336: LIST
60337: LIST
60338: PUSH
60339: LD_INT 1
60341: NEG
60342: PUSH
60343: LD_INT 2
60345: PUSH
60346: EMPTY
60347: LIST
60348: LIST
60349: PUSH
60350: LD_INT 2
60352: PUSH
60353: LD_INT 4
60355: PUSH
60356: EMPTY
60357: LIST
60358: LIST
60359: PUSH
60360: LD_INT 2
60362: NEG
60363: PUSH
60364: LD_INT 2
60366: PUSH
60367: EMPTY
60368: LIST
60369: LIST
60370: PUSH
60371: LD_INT 4
60373: NEG
60374: PUSH
60375: LD_INT 0
60377: PUSH
60378: EMPTY
60379: LIST
60380: LIST
60381: PUSH
60382: LD_INT 4
60384: NEG
60385: PUSH
60386: LD_INT 1
60388: NEG
60389: PUSH
60390: EMPTY
60391: LIST
60392: LIST
60393: PUSH
60394: LD_INT 3
60396: NEG
60397: PUSH
60398: LD_INT 0
60400: PUSH
60401: EMPTY
60402: LIST
60403: LIST
60404: PUSH
60405: LD_INT 3
60407: NEG
60408: PUSH
60409: LD_INT 1
60411: PUSH
60412: EMPTY
60413: LIST
60414: LIST
60415: PUSH
60416: LD_INT 4
60418: NEG
60419: PUSH
60420: LD_INT 1
60422: PUSH
60423: EMPTY
60424: LIST
60425: LIST
60426: PUSH
60427: LD_INT 5
60429: NEG
60430: PUSH
60431: LD_INT 0
60433: PUSH
60434: EMPTY
60435: LIST
60436: LIST
60437: PUSH
60438: LD_INT 5
60440: NEG
60441: PUSH
60442: LD_INT 1
60444: NEG
60445: PUSH
60446: EMPTY
60447: LIST
60448: LIST
60449: PUSH
60450: LD_INT 5
60452: NEG
60453: PUSH
60454: LD_INT 2
60456: NEG
60457: PUSH
60458: EMPTY
60459: LIST
60460: LIST
60461: PUSH
60462: LD_INT 3
60464: NEG
60465: PUSH
60466: LD_INT 2
60468: PUSH
60469: EMPTY
60470: LIST
60471: LIST
60472: PUSH
60473: EMPTY
60474: LIST
60475: LIST
60476: LIST
60477: LIST
60478: LIST
60479: LIST
60480: LIST
60481: LIST
60482: LIST
60483: LIST
60484: LIST
60485: LIST
60486: LIST
60487: LIST
60488: LIST
60489: LIST
60490: LIST
60491: LIST
60492: LIST
60493: LIST
60494: LIST
60495: LIST
60496: LIST
60497: LIST
60498: LIST
60499: LIST
60500: LIST
60501: LIST
60502: LIST
60503: LIST
60504: LIST
60505: LIST
60506: LIST
60507: LIST
60508: LIST
60509: LIST
60510: LIST
60511: LIST
60512: LIST
60513: LIST
60514: LIST
60515: LIST
60516: LIST
60517: LIST
60518: LIST
60519: ST_TO_ADDR
// end ; end ;
60520: GO 60523
60522: POP
// case btype of b_depot , b_warehouse :
60523: LD_VAR 0 1
60527: PUSH
60528: LD_INT 0
60530: DOUBLE
60531: EQUAL
60532: IFTRUE 60542
60534: LD_INT 1
60536: DOUBLE
60537: EQUAL
60538: IFTRUE 60542
60540: GO 60743
60542: POP
// case nation of nation_american :
60543: LD_VAR 0 5
60547: PUSH
60548: LD_INT 1
60550: DOUBLE
60551: EQUAL
60552: IFTRUE 60556
60554: GO 60612
60556: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
60557: LD_ADDR_VAR 0 9
60561: PUSH
60562: LD_VAR 0 11
60566: PUSH
60567: LD_VAR 0 12
60571: PUSH
60572: LD_VAR 0 13
60576: PUSH
60577: LD_VAR 0 14
60581: PUSH
60582: LD_VAR 0 15
60586: PUSH
60587: LD_VAR 0 16
60591: PUSH
60592: EMPTY
60593: LIST
60594: LIST
60595: LIST
60596: LIST
60597: LIST
60598: LIST
60599: PUSH
60600: LD_VAR 0 4
60604: PUSH
60605: LD_INT 1
60607: PLUS
60608: ARRAY
60609: ST_TO_ADDR
60610: GO 60741
60612: LD_INT 2
60614: DOUBLE
60615: EQUAL
60616: IFTRUE 60620
60618: GO 60676
60620: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
60621: LD_ADDR_VAR 0 9
60625: PUSH
60626: LD_VAR 0 17
60630: PUSH
60631: LD_VAR 0 18
60635: PUSH
60636: LD_VAR 0 19
60640: PUSH
60641: LD_VAR 0 20
60645: PUSH
60646: LD_VAR 0 21
60650: PUSH
60651: LD_VAR 0 22
60655: PUSH
60656: EMPTY
60657: LIST
60658: LIST
60659: LIST
60660: LIST
60661: LIST
60662: LIST
60663: PUSH
60664: LD_VAR 0 4
60668: PUSH
60669: LD_INT 1
60671: PLUS
60672: ARRAY
60673: ST_TO_ADDR
60674: GO 60741
60676: LD_INT 3
60678: DOUBLE
60679: EQUAL
60680: IFTRUE 60684
60682: GO 60740
60684: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
60685: LD_ADDR_VAR 0 9
60689: PUSH
60690: LD_VAR 0 23
60694: PUSH
60695: LD_VAR 0 24
60699: PUSH
60700: LD_VAR 0 25
60704: PUSH
60705: LD_VAR 0 26
60709: PUSH
60710: LD_VAR 0 27
60714: PUSH
60715: LD_VAR 0 28
60719: PUSH
60720: EMPTY
60721: LIST
60722: LIST
60723: LIST
60724: LIST
60725: LIST
60726: LIST
60727: PUSH
60728: LD_VAR 0 4
60732: PUSH
60733: LD_INT 1
60735: PLUS
60736: ARRAY
60737: ST_TO_ADDR
60738: GO 60741
60740: POP
60741: GO 61296
60743: LD_INT 2
60745: DOUBLE
60746: EQUAL
60747: IFTRUE 60757
60749: LD_INT 3
60751: DOUBLE
60752: EQUAL
60753: IFTRUE 60757
60755: GO 60813
60757: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
60758: LD_ADDR_VAR 0 9
60762: PUSH
60763: LD_VAR 0 29
60767: PUSH
60768: LD_VAR 0 30
60772: PUSH
60773: LD_VAR 0 31
60777: PUSH
60778: LD_VAR 0 32
60782: PUSH
60783: LD_VAR 0 33
60787: PUSH
60788: LD_VAR 0 34
60792: PUSH
60793: EMPTY
60794: LIST
60795: LIST
60796: LIST
60797: LIST
60798: LIST
60799: LIST
60800: PUSH
60801: LD_VAR 0 4
60805: PUSH
60806: LD_INT 1
60808: PLUS
60809: ARRAY
60810: ST_TO_ADDR
60811: GO 61296
60813: LD_INT 16
60815: DOUBLE
60816: EQUAL
60817: IFTRUE 60875
60819: LD_INT 17
60821: DOUBLE
60822: EQUAL
60823: IFTRUE 60875
60825: LD_INT 18
60827: DOUBLE
60828: EQUAL
60829: IFTRUE 60875
60831: LD_INT 19
60833: DOUBLE
60834: EQUAL
60835: IFTRUE 60875
60837: LD_INT 22
60839: DOUBLE
60840: EQUAL
60841: IFTRUE 60875
60843: LD_INT 20
60845: DOUBLE
60846: EQUAL
60847: IFTRUE 60875
60849: LD_INT 21
60851: DOUBLE
60852: EQUAL
60853: IFTRUE 60875
60855: LD_INT 23
60857: DOUBLE
60858: EQUAL
60859: IFTRUE 60875
60861: LD_INT 24
60863: DOUBLE
60864: EQUAL
60865: IFTRUE 60875
60867: LD_INT 25
60869: DOUBLE
60870: EQUAL
60871: IFTRUE 60875
60873: GO 60931
60875: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
60876: LD_ADDR_VAR 0 9
60880: PUSH
60881: LD_VAR 0 35
60885: PUSH
60886: LD_VAR 0 36
60890: PUSH
60891: LD_VAR 0 37
60895: PUSH
60896: LD_VAR 0 38
60900: PUSH
60901: LD_VAR 0 39
60905: PUSH
60906: LD_VAR 0 40
60910: PUSH
60911: EMPTY
60912: LIST
60913: LIST
60914: LIST
60915: LIST
60916: LIST
60917: LIST
60918: PUSH
60919: LD_VAR 0 4
60923: PUSH
60924: LD_INT 1
60926: PLUS
60927: ARRAY
60928: ST_TO_ADDR
60929: GO 61296
60931: LD_INT 6
60933: DOUBLE
60934: EQUAL
60935: IFTRUE 60987
60937: LD_INT 7
60939: DOUBLE
60940: EQUAL
60941: IFTRUE 60987
60943: LD_INT 8
60945: DOUBLE
60946: EQUAL
60947: IFTRUE 60987
60949: LD_INT 13
60951: DOUBLE
60952: EQUAL
60953: IFTRUE 60987
60955: LD_INT 12
60957: DOUBLE
60958: EQUAL
60959: IFTRUE 60987
60961: LD_INT 15
60963: DOUBLE
60964: EQUAL
60965: IFTRUE 60987
60967: LD_INT 11
60969: DOUBLE
60970: EQUAL
60971: IFTRUE 60987
60973: LD_INT 14
60975: DOUBLE
60976: EQUAL
60977: IFTRUE 60987
60979: LD_INT 10
60981: DOUBLE
60982: EQUAL
60983: IFTRUE 60987
60985: GO 61043
60987: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
60988: LD_ADDR_VAR 0 9
60992: PUSH
60993: LD_VAR 0 41
60997: PUSH
60998: LD_VAR 0 42
61002: PUSH
61003: LD_VAR 0 43
61007: PUSH
61008: LD_VAR 0 44
61012: PUSH
61013: LD_VAR 0 45
61017: PUSH
61018: LD_VAR 0 46
61022: PUSH
61023: EMPTY
61024: LIST
61025: LIST
61026: LIST
61027: LIST
61028: LIST
61029: LIST
61030: PUSH
61031: LD_VAR 0 4
61035: PUSH
61036: LD_INT 1
61038: PLUS
61039: ARRAY
61040: ST_TO_ADDR
61041: GO 61296
61043: LD_INT 36
61045: DOUBLE
61046: EQUAL
61047: IFTRUE 61051
61049: GO 61107
61051: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
61052: LD_ADDR_VAR 0 9
61056: PUSH
61057: LD_VAR 0 47
61061: PUSH
61062: LD_VAR 0 48
61066: PUSH
61067: LD_VAR 0 49
61071: PUSH
61072: LD_VAR 0 50
61076: PUSH
61077: LD_VAR 0 51
61081: PUSH
61082: LD_VAR 0 52
61086: PUSH
61087: EMPTY
61088: LIST
61089: LIST
61090: LIST
61091: LIST
61092: LIST
61093: LIST
61094: PUSH
61095: LD_VAR 0 4
61099: PUSH
61100: LD_INT 1
61102: PLUS
61103: ARRAY
61104: ST_TO_ADDR
61105: GO 61296
61107: LD_INT 4
61109: DOUBLE
61110: EQUAL
61111: IFTRUE 61133
61113: LD_INT 5
61115: DOUBLE
61116: EQUAL
61117: IFTRUE 61133
61119: LD_INT 34
61121: DOUBLE
61122: EQUAL
61123: IFTRUE 61133
61125: LD_INT 37
61127: DOUBLE
61128: EQUAL
61129: IFTRUE 61133
61131: GO 61189
61133: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
61134: LD_ADDR_VAR 0 9
61138: PUSH
61139: LD_VAR 0 53
61143: PUSH
61144: LD_VAR 0 54
61148: PUSH
61149: LD_VAR 0 55
61153: PUSH
61154: LD_VAR 0 56
61158: PUSH
61159: LD_VAR 0 57
61163: PUSH
61164: LD_VAR 0 58
61168: PUSH
61169: EMPTY
61170: LIST
61171: LIST
61172: LIST
61173: LIST
61174: LIST
61175: LIST
61176: PUSH
61177: LD_VAR 0 4
61181: PUSH
61182: LD_INT 1
61184: PLUS
61185: ARRAY
61186: ST_TO_ADDR
61187: GO 61296
61189: LD_INT 31
61191: DOUBLE
61192: EQUAL
61193: IFTRUE 61239
61195: LD_INT 32
61197: DOUBLE
61198: EQUAL
61199: IFTRUE 61239
61201: LD_INT 33
61203: DOUBLE
61204: EQUAL
61205: IFTRUE 61239
61207: LD_INT 27
61209: DOUBLE
61210: EQUAL
61211: IFTRUE 61239
61213: LD_INT 26
61215: DOUBLE
61216: EQUAL
61217: IFTRUE 61239
61219: LD_INT 28
61221: DOUBLE
61222: EQUAL
61223: IFTRUE 61239
61225: LD_INT 29
61227: DOUBLE
61228: EQUAL
61229: IFTRUE 61239
61231: LD_INT 30
61233: DOUBLE
61234: EQUAL
61235: IFTRUE 61239
61237: GO 61295
61239: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
61240: LD_ADDR_VAR 0 9
61244: PUSH
61245: LD_VAR 0 59
61249: PUSH
61250: LD_VAR 0 60
61254: PUSH
61255: LD_VAR 0 61
61259: PUSH
61260: LD_VAR 0 62
61264: PUSH
61265: LD_VAR 0 63
61269: PUSH
61270: LD_VAR 0 64
61274: PUSH
61275: EMPTY
61276: LIST
61277: LIST
61278: LIST
61279: LIST
61280: LIST
61281: LIST
61282: PUSH
61283: LD_VAR 0 4
61287: PUSH
61288: LD_INT 1
61290: PLUS
61291: ARRAY
61292: ST_TO_ADDR
61293: GO 61296
61295: POP
// temp_list2 = [ ] ;
61296: LD_ADDR_VAR 0 10
61300: PUSH
61301: EMPTY
61302: ST_TO_ADDR
// for i in temp_list do
61303: LD_ADDR_VAR 0 8
61307: PUSH
61308: LD_VAR 0 9
61312: PUSH
61313: FOR_IN
61314: IFFALSE 61366
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
61316: LD_ADDR_VAR 0 10
61320: PUSH
61321: LD_VAR 0 10
61325: PUSH
61326: LD_VAR 0 8
61330: PUSH
61331: LD_INT 1
61333: ARRAY
61334: PUSH
61335: LD_VAR 0 2
61339: PLUS
61340: PUSH
61341: LD_VAR 0 8
61345: PUSH
61346: LD_INT 2
61348: ARRAY
61349: PUSH
61350: LD_VAR 0 3
61354: PLUS
61355: PUSH
61356: EMPTY
61357: LIST
61358: LIST
61359: PUSH
61360: EMPTY
61361: LIST
61362: ADD
61363: ST_TO_ADDR
61364: GO 61313
61366: POP
61367: POP
// result = temp_list2 ;
61368: LD_ADDR_VAR 0 7
61372: PUSH
61373: LD_VAR 0 10
61377: ST_TO_ADDR
// end ;
61378: LD_VAR 0 7
61382: RET
// export function EnemyInRange ( unit , dist ) ; begin
61383: LD_INT 0
61385: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
61386: LD_ADDR_VAR 0 3
61390: PUSH
61391: LD_VAR 0 1
61395: PPUSH
61396: CALL_OW 255
61400: PPUSH
61401: LD_VAR 0 1
61405: PPUSH
61406: CALL_OW 250
61410: PPUSH
61411: LD_VAR 0 1
61415: PPUSH
61416: CALL_OW 251
61420: PPUSH
61421: LD_VAR 0 2
61425: PPUSH
61426: CALL 34779 0 4
61430: PUSH
61431: LD_INT 4
61433: ARRAY
61434: ST_TO_ADDR
// end ;
61435: LD_VAR 0 3
61439: RET
// export function PlayerSeeMe ( unit ) ; begin
61440: LD_INT 0
61442: PPUSH
// result := See ( your_side , unit ) ;
61443: LD_ADDR_VAR 0 2
61447: PUSH
61448: LD_OWVAR 2
61452: PPUSH
61453: LD_VAR 0 1
61457: PPUSH
61458: CALL_OW 292
61462: ST_TO_ADDR
// end ;
61463: LD_VAR 0 2
61467: RET
// export function ReverseDir ( unit ) ; begin
61468: LD_INT 0
61470: PPUSH
// if not unit then
61471: LD_VAR 0 1
61475: NOT
61476: IFFALSE 61480
// exit ;
61478: GO 61503
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
61480: LD_ADDR_VAR 0 2
61484: PUSH
61485: LD_VAR 0 1
61489: PPUSH
61490: CALL_OW 254
61494: PUSH
61495: LD_INT 3
61497: PLUS
61498: PUSH
61499: LD_INT 6
61501: MOD
61502: ST_TO_ADDR
// end ;
61503: LD_VAR 0 2
61507: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
61508: LD_INT 0
61510: PPUSH
61511: PPUSH
61512: PPUSH
61513: PPUSH
61514: PPUSH
// if not hexes then
61515: LD_VAR 0 2
61519: NOT
61520: IFFALSE 61524
// exit ;
61522: GO 61672
// dist := 9999 ;
61524: LD_ADDR_VAR 0 5
61528: PUSH
61529: LD_INT 9999
61531: ST_TO_ADDR
// for i = 1 to hexes do
61532: LD_ADDR_VAR 0 4
61536: PUSH
61537: DOUBLE
61538: LD_INT 1
61540: DEC
61541: ST_TO_ADDR
61542: LD_VAR 0 2
61546: PUSH
61547: FOR_TO
61548: IFFALSE 61660
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
61550: LD_VAR 0 1
61554: PPUSH
61555: LD_VAR 0 2
61559: PUSH
61560: LD_VAR 0 4
61564: ARRAY
61565: PUSH
61566: LD_INT 1
61568: ARRAY
61569: PPUSH
61570: LD_VAR 0 2
61574: PUSH
61575: LD_VAR 0 4
61579: ARRAY
61580: PUSH
61581: LD_INT 2
61583: ARRAY
61584: PPUSH
61585: CALL_OW 297
61589: PUSH
61590: LD_VAR 0 5
61594: LESS
61595: IFFALSE 61658
// begin hex := hexes [ i ] ;
61597: LD_ADDR_VAR 0 7
61601: PUSH
61602: LD_VAR 0 2
61606: PUSH
61607: LD_VAR 0 4
61611: ARRAY
61612: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
61613: LD_ADDR_VAR 0 5
61617: PUSH
61618: LD_VAR 0 1
61622: PPUSH
61623: LD_VAR 0 2
61627: PUSH
61628: LD_VAR 0 4
61632: ARRAY
61633: PUSH
61634: LD_INT 1
61636: ARRAY
61637: PPUSH
61638: LD_VAR 0 2
61642: PUSH
61643: LD_VAR 0 4
61647: ARRAY
61648: PUSH
61649: LD_INT 2
61651: ARRAY
61652: PPUSH
61653: CALL_OW 297
61657: ST_TO_ADDR
// end ; end ;
61658: GO 61547
61660: POP
61661: POP
// result := hex ;
61662: LD_ADDR_VAR 0 3
61666: PUSH
61667: LD_VAR 0 7
61671: ST_TO_ADDR
// end ;
61672: LD_VAR 0 3
61676: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
61677: LD_INT 0
61679: PPUSH
61680: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
61681: LD_VAR 0 1
61685: NOT
61686: PUSH
61687: LD_VAR 0 1
61691: PUSH
61692: LD_INT 21
61694: PUSH
61695: LD_INT 2
61697: PUSH
61698: EMPTY
61699: LIST
61700: LIST
61701: PUSH
61702: LD_INT 23
61704: PUSH
61705: LD_INT 2
61707: PUSH
61708: EMPTY
61709: LIST
61710: LIST
61711: PUSH
61712: EMPTY
61713: LIST
61714: LIST
61715: PPUSH
61716: CALL_OW 69
61720: IN
61721: NOT
61722: OR
61723: IFFALSE 61727
// exit ;
61725: GO 61774
// for i = 1 to 3 do
61727: LD_ADDR_VAR 0 3
61731: PUSH
61732: DOUBLE
61733: LD_INT 1
61735: DEC
61736: ST_TO_ADDR
61737: LD_INT 3
61739: PUSH
61740: FOR_TO
61741: IFFALSE 61772
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
61743: LD_VAR 0 1
61747: PPUSH
61748: CALL_OW 250
61752: PPUSH
61753: LD_VAR 0 1
61757: PPUSH
61758: CALL_OW 251
61762: PPUSH
61763: LD_INT 1
61765: PPUSH
61766: CALL_OW 453
61770: GO 61740
61772: POP
61773: POP
// end ;
61774: LD_VAR 0 2
61778: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
61779: LD_INT 0
61781: PPUSH
61782: PPUSH
61783: PPUSH
61784: PPUSH
61785: PPUSH
61786: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
61787: LD_VAR 0 1
61791: NOT
61792: PUSH
61793: LD_VAR 0 2
61797: NOT
61798: OR
61799: PUSH
61800: LD_VAR 0 1
61804: PPUSH
61805: CALL_OW 314
61809: OR
61810: IFFALSE 61814
// exit ;
61812: GO 62255
// x := GetX ( enemy_unit ) ;
61814: LD_ADDR_VAR 0 7
61818: PUSH
61819: LD_VAR 0 2
61823: PPUSH
61824: CALL_OW 250
61828: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
61829: LD_ADDR_VAR 0 8
61833: PUSH
61834: LD_VAR 0 2
61838: PPUSH
61839: CALL_OW 251
61843: ST_TO_ADDR
// if not x or not y then
61844: LD_VAR 0 7
61848: NOT
61849: PUSH
61850: LD_VAR 0 8
61854: NOT
61855: OR
61856: IFFALSE 61860
// exit ;
61858: GO 62255
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
61860: LD_ADDR_VAR 0 6
61864: PUSH
61865: LD_VAR 0 7
61869: PPUSH
61870: LD_INT 0
61872: PPUSH
61873: LD_INT 4
61875: PPUSH
61876: CALL_OW 272
61880: PUSH
61881: LD_VAR 0 8
61885: PPUSH
61886: LD_INT 0
61888: PPUSH
61889: LD_INT 4
61891: PPUSH
61892: CALL_OW 273
61896: PUSH
61897: EMPTY
61898: LIST
61899: LIST
61900: PUSH
61901: LD_VAR 0 7
61905: PPUSH
61906: LD_INT 1
61908: PPUSH
61909: LD_INT 4
61911: PPUSH
61912: CALL_OW 272
61916: PUSH
61917: LD_VAR 0 8
61921: PPUSH
61922: LD_INT 1
61924: PPUSH
61925: LD_INT 4
61927: PPUSH
61928: CALL_OW 273
61932: PUSH
61933: EMPTY
61934: LIST
61935: LIST
61936: PUSH
61937: LD_VAR 0 7
61941: PPUSH
61942: LD_INT 2
61944: PPUSH
61945: LD_INT 4
61947: PPUSH
61948: CALL_OW 272
61952: PUSH
61953: LD_VAR 0 8
61957: PPUSH
61958: LD_INT 2
61960: PPUSH
61961: LD_INT 4
61963: PPUSH
61964: CALL_OW 273
61968: PUSH
61969: EMPTY
61970: LIST
61971: LIST
61972: PUSH
61973: LD_VAR 0 7
61977: PPUSH
61978: LD_INT 3
61980: PPUSH
61981: LD_INT 4
61983: PPUSH
61984: CALL_OW 272
61988: PUSH
61989: LD_VAR 0 8
61993: PPUSH
61994: LD_INT 3
61996: PPUSH
61997: LD_INT 4
61999: PPUSH
62000: CALL_OW 273
62004: PUSH
62005: EMPTY
62006: LIST
62007: LIST
62008: PUSH
62009: LD_VAR 0 7
62013: PPUSH
62014: LD_INT 4
62016: PPUSH
62017: LD_INT 4
62019: PPUSH
62020: CALL_OW 272
62024: PUSH
62025: LD_VAR 0 8
62029: PPUSH
62030: LD_INT 4
62032: PPUSH
62033: LD_INT 4
62035: PPUSH
62036: CALL_OW 273
62040: PUSH
62041: EMPTY
62042: LIST
62043: LIST
62044: PUSH
62045: LD_VAR 0 7
62049: PPUSH
62050: LD_INT 5
62052: PPUSH
62053: LD_INT 4
62055: PPUSH
62056: CALL_OW 272
62060: PUSH
62061: LD_VAR 0 8
62065: PPUSH
62066: LD_INT 5
62068: PPUSH
62069: LD_INT 4
62071: PPUSH
62072: CALL_OW 273
62076: PUSH
62077: EMPTY
62078: LIST
62079: LIST
62080: PUSH
62081: EMPTY
62082: LIST
62083: LIST
62084: LIST
62085: LIST
62086: LIST
62087: LIST
62088: ST_TO_ADDR
// for i = tmp downto 1 do
62089: LD_ADDR_VAR 0 4
62093: PUSH
62094: DOUBLE
62095: LD_VAR 0 6
62099: INC
62100: ST_TO_ADDR
62101: LD_INT 1
62103: PUSH
62104: FOR_DOWNTO
62105: IFFALSE 62206
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
62107: LD_VAR 0 6
62111: PUSH
62112: LD_VAR 0 4
62116: ARRAY
62117: PUSH
62118: LD_INT 1
62120: ARRAY
62121: PPUSH
62122: LD_VAR 0 6
62126: PUSH
62127: LD_VAR 0 4
62131: ARRAY
62132: PUSH
62133: LD_INT 2
62135: ARRAY
62136: PPUSH
62137: CALL_OW 488
62141: NOT
62142: PUSH
62143: LD_VAR 0 6
62147: PUSH
62148: LD_VAR 0 4
62152: ARRAY
62153: PUSH
62154: LD_INT 1
62156: ARRAY
62157: PPUSH
62158: LD_VAR 0 6
62162: PUSH
62163: LD_VAR 0 4
62167: ARRAY
62168: PUSH
62169: LD_INT 2
62171: ARRAY
62172: PPUSH
62173: CALL_OW 428
62177: PUSH
62178: LD_INT 0
62180: NONEQUAL
62181: OR
62182: IFFALSE 62204
// tmp := Delete ( tmp , i ) ;
62184: LD_ADDR_VAR 0 6
62188: PUSH
62189: LD_VAR 0 6
62193: PPUSH
62194: LD_VAR 0 4
62198: PPUSH
62199: CALL_OW 3
62203: ST_TO_ADDR
62204: GO 62104
62206: POP
62207: POP
// j := GetClosestHex ( unit , tmp ) ;
62208: LD_ADDR_VAR 0 5
62212: PUSH
62213: LD_VAR 0 1
62217: PPUSH
62218: LD_VAR 0 6
62222: PPUSH
62223: CALL 61508 0 2
62227: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
62228: LD_VAR 0 1
62232: PPUSH
62233: LD_VAR 0 5
62237: PUSH
62238: LD_INT 1
62240: ARRAY
62241: PPUSH
62242: LD_VAR 0 5
62246: PUSH
62247: LD_INT 2
62249: ARRAY
62250: PPUSH
62251: CALL_OW 111
// end ;
62255: LD_VAR 0 3
62259: RET
// export function PrepareApemanSoldier ( ) ; begin
62260: LD_INT 0
62262: PPUSH
// uc_nation := 0 ;
62263: LD_ADDR_OWVAR 21
62267: PUSH
62268: LD_INT 0
62270: ST_TO_ADDR
// hc_sex := sex_male ;
62271: LD_ADDR_OWVAR 27
62275: PUSH
62276: LD_INT 1
62278: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
62279: LD_ADDR_OWVAR 28
62283: PUSH
62284: LD_INT 15
62286: ST_TO_ADDR
// hc_gallery :=  ;
62287: LD_ADDR_OWVAR 33
62291: PUSH
62292: LD_STRING 
62294: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
62295: LD_ADDR_OWVAR 31
62299: PUSH
62300: LD_INT 0
62302: PPUSH
62303: LD_INT 3
62305: PPUSH
62306: CALL_OW 12
62310: PUSH
62311: LD_INT 0
62313: PPUSH
62314: LD_INT 3
62316: PPUSH
62317: CALL_OW 12
62321: PUSH
62322: LD_INT 0
62324: PUSH
62325: LD_INT 0
62327: PUSH
62328: EMPTY
62329: LIST
62330: LIST
62331: LIST
62332: LIST
62333: ST_TO_ADDR
// end ;
62334: LD_VAR 0 1
62338: RET
// export function PrepareApemanEngineer ( ) ; begin
62339: LD_INT 0
62341: PPUSH
// uc_nation := 0 ;
62342: LD_ADDR_OWVAR 21
62346: PUSH
62347: LD_INT 0
62349: ST_TO_ADDR
// hc_sex := sex_male ;
62350: LD_ADDR_OWVAR 27
62354: PUSH
62355: LD_INT 1
62357: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
62358: LD_ADDR_OWVAR 28
62362: PUSH
62363: LD_INT 16
62365: ST_TO_ADDR
// hc_gallery :=  ;
62366: LD_ADDR_OWVAR 33
62370: PUSH
62371: LD_STRING 
62373: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
62374: LD_ADDR_OWVAR 31
62378: PUSH
62379: LD_INT 0
62381: PPUSH
62382: LD_INT 3
62384: PPUSH
62385: CALL_OW 12
62389: PUSH
62390: LD_INT 0
62392: PPUSH
62393: LD_INT 3
62395: PPUSH
62396: CALL_OW 12
62400: PUSH
62401: LD_INT 0
62403: PUSH
62404: LD_INT 0
62406: PUSH
62407: EMPTY
62408: LIST
62409: LIST
62410: LIST
62411: LIST
62412: ST_TO_ADDR
// end ;
62413: LD_VAR 0 1
62417: RET
// export function PrepareApeman ( agressivity ) ; begin
62418: LD_INT 0
62420: PPUSH
// uc_side := 0 ;
62421: LD_ADDR_OWVAR 20
62425: PUSH
62426: LD_INT 0
62428: ST_TO_ADDR
// uc_nation := 0 ;
62429: LD_ADDR_OWVAR 21
62433: PUSH
62434: LD_INT 0
62436: ST_TO_ADDR
// hc_sex := sex_male ;
62437: LD_ADDR_OWVAR 27
62441: PUSH
62442: LD_INT 1
62444: ST_TO_ADDR
// hc_class := class_apeman ;
62445: LD_ADDR_OWVAR 28
62449: PUSH
62450: LD_INT 12
62452: ST_TO_ADDR
// hc_gallery :=  ;
62453: LD_ADDR_OWVAR 33
62457: PUSH
62458: LD_STRING 
62460: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
62461: LD_ADDR_OWVAR 35
62465: PUSH
62466: LD_VAR 0 1
62470: NEG
62471: PPUSH
62472: LD_VAR 0 1
62476: PPUSH
62477: CALL_OW 12
62481: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
62482: LD_ADDR_OWVAR 31
62486: PUSH
62487: LD_INT 0
62489: PPUSH
62490: LD_INT 3
62492: PPUSH
62493: CALL_OW 12
62497: PUSH
62498: LD_INT 0
62500: PPUSH
62501: LD_INT 3
62503: PPUSH
62504: CALL_OW 12
62508: PUSH
62509: LD_INT 0
62511: PUSH
62512: LD_INT 0
62514: PUSH
62515: EMPTY
62516: LIST
62517: LIST
62518: LIST
62519: LIST
62520: ST_TO_ADDR
// end ;
62521: LD_VAR 0 2
62525: RET
// export function PrepareTiger ( agressivity ) ; begin
62526: LD_INT 0
62528: PPUSH
// uc_side := 0 ;
62529: LD_ADDR_OWVAR 20
62533: PUSH
62534: LD_INT 0
62536: ST_TO_ADDR
// uc_nation := 0 ;
62537: LD_ADDR_OWVAR 21
62541: PUSH
62542: LD_INT 0
62544: ST_TO_ADDR
// hc_class := class_tiger ;
62545: LD_ADDR_OWVAR 28
62549: PUSH
62550: LD_INT 14
62552: ST_TO_ADDR
// hc_gallery :=  ;
62553: LD_ADDR_OWVAR 33
62557: PUSH
62558: LD_STRING 
62560: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
62561: LD_ADDR_OWVAR 35
62565: PUSH
62566: LD_VAR 0 1
62570: NEG
62571: PPUSH
62572: LD_VAR 0 1
62576: PPUSH
62577: CALL_OW 12
62581: ST_TO_ADDR
// end ;
62582: LD_VAR 0 2
62586: RET
// export function PrepareEnchidna ( ) ; begin
62587: LD_INT 0
62589: PPUSH
// uc_side := 0 ;
62590: LD_ADDR_OWVAR 20
62594: PUSH
62595: LD_INT 0
62597: ST_TO_ADDR
// uc_nation := 0 ;
62598: LD_ADDR_OWVAR 21
62602: PUSH
62603: LD_INT 0
62605: ST_TO_ADDR
// hc_class := class_baggie ;
62606: LD_ADDR_OWVAR 28
62610: PUSH
62611: LD_INT 13
62613: ST_TO_ADDR
// hc_gallery :=  ;
62614: LD_ADDR_OWVAR 33
62618: PUSH
62619: LD_STRING 
62621: ST_TO_ADDR
// end ;
62622: LD_VAR 0 1
62626: RET
// export function PrepareFrog ( ) ; begin
62627: LD_INT 0
62629: PPUSH
// uc_side := 0 ;
62630: LD_ADDR_OWVAR 20
62634: PUSH
62635: LD_INT 0
62637: ST_TO_ADDR
// uc_nation := 0 ;
62638: LD_ADDR_OWVAR 21
62642: PUSH
62643: LD_INT 0
62645: ST_TO_ADDR
// hc_class := class_frog ;
62646: LD_ADDR_OWVAR 28
62650: PUSH
62651: LD_INT 19
62653: ST_TO_ADDR
// hc_gallery :=  ;
62654: LD_ADDR_OWVAR 33
62658: PUSH
62659: LD_STRING 
62661: ST_TO_ADDR
// end ;
62662: LD_VAR 0 1
62666: RET
// export function PrepareFish ( ) ; begin
62667: LD_INT 0
62669: PPUSH
// uc_side := 0 ;
62670: LD_ADDR_OWVAR 20
62674: PUSH
62675: LD_INT 0
62677: ST_TO_ADDR
// uc_nation := 0 ;
62678: LD_ADDR_OWVAR 21
62682: PUSH
62683: LD_INT 0
62685: ST_TO_ADDR
// hc_class := class_fish ;
62686: LD_ADDR_OWVAR 28
62690: PUSH
62691: LD_INT 20
62693: ST_TO_ADDR
// hc_gallery :=  ;
62694: LD_ADDR_OWVAR 33
62698: PUSH
62699: LD_STRING 
62701: ST_TO_ADDR
// end ;
62702: LD_VAR 0 1
62706: RET
// export function PrepareBird ( ) ; begin
62707: LD_INT 0
62709: PPUSH
// uc_side := 0 ;
62710: LD_ADDR_OWVAR 20
62714: PUSH
62715: LD_INT 0
62717: ST_TO_ADDR
// uc_nation := 0 ;
62718: LD_ADDR_OWVAR 21
62722: PUSH
62723: LD_INT 0
62725: ST_TO_ADDR
// hc_class := class_phororhacos ;
62726: LD_ADDR_OWVAR 28
62730: PUSH
62731: LD_INT 18
62733: ST_TO_ADDR
// hc_gallery :=  ;
62734: LD_ADDR_OWVAR 33
62738: PUSH
62739: LD_STRING 
62741: ST_TO_ADDR
// end ;
62742: LD_VAR 0 1
62746: RET
// export function PrepareHorse ( ) ; begin
62747: LD_INT 0
62749: PPUSH
// uc_side := 0 ;
62750: LD_ADDR_OWVAR 20
62754: PUSH
62755: LD_INT 0
62757: ST_TO_ADDR
// uc_nation := 0 ;
62758: LD_ADDR_OWVAR 21
62762: PUSH
62763: LD_INT 0
62765: ST_TO_ADDR
// hc_class := class_horse ;
62766: LD_ADDR_OWVAR 28
62770: PUSH
62771: LD_INT 21
62773: ST_TO_ADDR
// hc_gallery :=  ;
62774: LD_ADDR_OWVAR 33
62778: PUSH
62779: LD_STRING 
62781: ST_TO_ADDR
// end ;
62782: LD_VAR 0 1
62786: RET
// export function PrepareMastodont ( ) ; begin
62787: LD_INT 0
62789: PPUSH
// uc_side := 0 ;
62790: LD_ADDR_OWVAR 20
62794: PUSH
62795: LD_INT 0
62797: ST_TO_ADDR
// uc_nation := 0 ;
62798: LD_ADDR_OWVAR 21
62802: PUSH
62803: LD_INT 0
62805: ST_TO_ADDR
// vc_chassis := class_mastodont ;
62806: LD_ADDR_OWVAR 37
62810: PUSH
62811: LD_INT 31
62813: ST_TO_ADDR
// vc_control := control_rider ;
62814: LD_ADDR_OWVAR 38
62818: PUSH
62819: LD_INT 4
62821: ST_TO_ADDR
// end ;
62822: LD_VAR 0 1
62826: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
62827: LD_INT 0
62829: PPUSH
62830: PPUSH
62831: PPUSH
// uc_side = 0 ;
62832: LD_ADDR_OWVAR 20
62836: PUSH
62837: LD_INT 0
62839: ST_TO_ADDR
// uc_nation = 0 ;
62840: LD_ADDR_OWVAR 21
62844: PUSH
62845: LD_INT 0
62847: ST_TO_ADDR
// InitHc_All ( ) ;
62848: CALL_OW 584
// InitVc ;
62852: CALL_OW 20
// if mastodonts then
62856: LD_VAR 0 6
62860: IFFALSE 62927
// for i = 1 to mastodonts do
62862: LD_ADDR_VAR 0 11
62866: PUSH
62867: DOUBLE
62868: LD_INT 1
62870: DEC
62871: ST_TO_ADDR
62872: LD_VAR 0 6
62876: PUSH
62877: FOR_TO
62878: IFFALSE 62925
// begin vc_chassis := 31 ;
62880: LD_ADDR_OWVAR 37
62884: PUSH
62885: LD_INT 31
62887: ST_TO_ADDR
// vc_control := control_rider ;
62888: LD_ADDR_OWVAR 38
62892: PUSH
62893: LD_INT 4
62895: ST_TO_ADDR
// animal := CreateVehicle ;
62896: LD_ADDR_VAR 0 12
62900: PUSH
62901: CALL_OW 45
62905: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62906: LD_VAR 0 12
62910: PPUSH
62911: LD_VAR 0 8
62915: PPUSH
62916: LD_INT 0
62918: PPUSH
62919: CALL 65062 0 3
// end ;
62923: GO 62877
62925: POP
62926: POP
// if horses then
62927: LD_VAR 0 5
62931: IFFALSE 62998
// for i = 1 to horses do
62933: LD_ADDR_VAR 0 11
62937: PUSH
62938: DOUBLE
62939: LD_INT 1
62941: DEC
62942: ST_TO_ADDR
62943: LD_VAR 0 5
62947: PUSH
62948: FOR_TO
62949: IFFALSE 62996
// begin hc_class := 21 ;
62951: LD_ADDR_OWVAR 28
62955: PUSH
62956: LD_INT 21
62958: ST_TO_ADDR
// hc_gallery :=  ;
62959: LD_ADDR_OWVAR 33
62963: PUSH
62964: LD_STRING 
62966: ST_TO_ADDR
// animal := CreateHuman ;
62967: LD_ADDR_VAR 0 12
62971: PUSH
62972: CALL_OW 44
62976: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62977: LD_VAR 0 12
62981: PPUSH
62982: LD_VAR 0 8
62986: PPUSH
62987: LD_INT 0
62989: PPUSH
62990: CALL 65062 0 3
// end ;
62994: GO 62948
62996: POP
62997: POP
// if birds then
62998: LD_VAR 0 1
63002: IFFALSE 63069
// for i = 1 to birds do
63004: LD_ADDR_VAR 0 11
63008: PUSH
63009: DOUBLE
63010: LD_INT 1
63012: DEC
63013: ST_TO_ADDR
63014: LD_VAR 0 1
63018: PUSH
63019: FOR_TO
63020: IFFALSE 63067
// begin hc_class = 18 ;
63022: LD_ADDR_OWVAR 28
63026: PUSH
63027: LD_INT 18
63029: ST_TO_ADDR
// hc_gallery =  ;
63030: LD_ADDR_OWVAR 33
63034: PUSH
63035: LD_STRING 
63037: ST_TO_ADDR
// animal := CreateHuman ;
63038: LD_ADDR_VAR 0 12
63042: PUSH
63043: CALL_OW 44
63047: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63048: LD_VAR 0 12
63052: PPUSH
63053: LD_VAR 0 8
63057: PPUSH
63058: LD_INT 0
63060: PPUSH
63061: CALL 65062 0 3
// end ;
63065: GO 63019
63067: POP
63068: POP
// if tigers then
63069: LD_VAR 0 2
63073: IFFALSE 63157
// for i = 1 to tigers do
63075: LD_ADDR_VAR 0 11
63079: PUSH
63080: DOUBLE
63081: LD_INT 1
63083: DEC
63084: ST_TO_ADDR
63085: LD_VAR 0 2
63089: PUSH
63090: FOR_TO
63091: IFFALSE 63155
// begin hc_class = class_tiger ;
63093: LD_ADDR_OWVAR 28
63097: PUSH
63098: LD_INT 14
63100: ST_TO_ADDR
// hc_gallery =  ;
63101: LD_ADDR_OWVAR 33
63105: PUSH
63106: LD_STRING 
63108: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
63109: LD_ADDR_OWVAR 35
63113: PUSH
63114: LD_INT 7
63116: NEG
63117: PPUSH
63118: LD_INT 7
63120: PPUSH
63121: CALL_OW 12
63125: ST_TO_ADDR
// animal := CreateHuman ;
63126: LD_ADDR_VAR 0 12
63130: PUSH
63131: CALL_OW 44
63135: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63136: LD_VAR 0 12
63140: PPUSH
63141: LD_VAR 0 8
63145: PPUSH
63146: LD_INT 0
63148: PPUSH
63149: CALL 65062 0 3
// end ;
63153: GO 63090
63155: POP
63156: POP
// if apemans then
63157: LD_VAR 0 3
63161: IFFALSE 63284
// for i = 1 to apemans do
63163: LD_ADDR_VAR 0 11
63167: PUSH
63168: DOUBLE
63169: LD_INT 1
63171: DEC
63172: ST_TO_ADDR
63173: LD_VAR 0 3
63177: PUSH
63178: FOR_TO
63179: IFFALSE 63282
// begin hc_class = class_apeman ;
63181: LD_ADDR_OWVAR 28
63185: PUSH
63186: LD_INT 12
63188: ST_TO_ADDR
// hc_gallery =  ;
63189: LD_ADDR_OWVAR 33
63193: PUSH
63194: LD_STRING 
63196: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
63197: LD_ADDR_OWVAR 35
63201: PUSH
63202: LD_INT 2
63204: NEG
63205: PPUSH
63206: LD_INT 2
63208: PPUSH
63209: CALL_OW 12
63213: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
63214: LD_ADDR_OWVAR 31
63218: PUSH
63219: LD_INT 1
63221: PPUSH
63222: LD_INT 3
63224: PPUSH
63225: CALL_OW 12
63229: PUSH
63230: LD_INT 1
63232: PPUSH
63233: LD_INT 3
63235: PPUSH
63236: CALL_OW 12
63240: PUSH
63241: LD_INT 0
63243: PUSH
63244: LD_INT 0
63246: PUSH
63247: EMPTY
63248: LIST
63249: LIST
63250: LIST
63251: LIST
63252: ST_TO_ADDR
// animal := CreateHuman ;
63253: LD_ADDR_VAR 0 12
63257: PUSH
63258: CALL_OW 44
63262: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63263: LD_VAR 0 12
63267: PPUSH
63268: LD_VAR 0 8
63272: PPUSH
63273: LD_INT 0
63275: PPUSH
63276: CALL 65062 0 3
// end ;
63280: GO 63178
63282: POP
63283: POP
// if enchidnas then
63284: LD_VAR 0 4
63288: IFFALSE 63355
// for i = 1 to enchidnas do
63290: LD_ADDR_VAR 0 11
63294: PUSH
63295: DOUBLE
63296: LD_INT 1
63298: DEC
63299: ST_TO_ADDR
63300: LD_VAR 0 4
63304: PUSH
63305: FOR_TO
63306: IFFALSE 63353
// begin hc_class = 13 ;
63308: LD_ADDR_OWVAR 28
63312: PUSH
63313: LD_INT 13
63315: ST_TO_ADDR
// hc_gallery =  ;
63316: LD_ADDR_OWVAR 33
63320: PUSH
63321: LD_STRING 
63323: ST_TO_ADDR
// animal := CreateHuman ;
63324: LD_ADDR_VAR 0 12
63328: PUSH
63329: CALL_OW 44
63333: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63334: LD_VAR 0 12
63338: PPUSH
63339: LD_VAR 0 8
63343: PPUSH
63344: LD_INT 0
63346: PPUSH
63347: CALL 65062 0 3
// end ;
63351: GO 63305
63353: POP
63354: POP
// if fishes then
63355: LD_VAR 0 7
63359: IFFALSE 63426
// for i = 1 to fishes do
63361: LD_ADDR_VAR 0 11
63365: PUSH
63366: DOUBLE
63367: LD_INT 1
63369: DEC
63370: ST_TO_ADDR
63371: LD_VAR 0 7
63375: PUSH
63376: FOR_TO
63377: IFFALSE 63424
// begin hc_class = 20 ;
63379: LD_ADDR_OWVAR 28
63383: PUSH
63384: LD_INT 20
63386: ST_TO_ADDR
// hc_gallery =  ;
63387: LD_ADDR_OWVAR 33
63391: PUSH
63392: LD_STRING 
63394: ST_TO_ADDR
// animal := CreateHuman ;
63395: LD_ADDR_VAR 0 12
63399: PUSH
63400: CALL_OW 44
63404: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
63405: LD_VAR 0 12
63409: PPUSH
63410: LD_VAR 0 9
63414: PPUSH
63415: LD_INT 0
63417: PPUSH
63418: CALL 65062 0 3
// end ;
63422: GO 63376
63424: POP
63425: POP
// end ;
63426: LD_VAR 0 10
63430: RET
// export function WantHeal ( sci , unit ) ; begin
63431: LD_INT 0
63433: PPUSH
// if GetTaskList ( sci ) > 0 then
63434: LD_VAR 0 1
63438: PPUSH
63439: CALL_OW 437
63443: PUSH
63444: LD_INT 0
63446: GREATER
63447: IFFALSE 63517
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
63449: LD_VAR 0 1
63453: PPUSH
63454: CALL_OW 437
63458: PUSH
63459: LD_INT 1
63461: ARRAY
63462: PUSH
63463: LD_INT 1
63465: ARRAY
63466: PUSH
63467: LD_STRING l
63469: EQUAL
63470: PUSH
63471: LD_VAR 0 1
63475: PPUSH
63476: CALL_OW 437
63480: PUSH
63481: LD_INT 1
63483: ARRAY
63484: PUSH
63485: LD_INT 4
63487: ARRAY
63488: PUSH
63489: LD_VAR 0 2
63493: EQUAL
63494: AND
63495: IFFALSE 63507
// result := true else
63497: LD_ADDR_VAR 0 3
63501: PUSH
63502: LD_INT 1
63504: ST_TO_ADDR
63505: GO 63515
// result := false ;
63507: LD_ADDR_VAR 0 3
63511: PUSH
63512: LD_INT 0
63514: ST_TO_ADDR
// end else
63515: GO 63525
// result := false ;
63517: LD_ADDR_VAR 0 3
63521: PUSH
63522: LD_INT 0
63524: ST_TO_ADDR
// end ;
63525: LD_VAR 0 3
63529: RET
// export function HealTarget ( sci ) ; begin
63530: LD_INT 0
63532: PPUSH
// if not sci then
63533: LD_VAR 0 1
63537: NOT
63538: IFFALSE 63542
// exit ;
63540: GO 63607
// result := 0 ;
63542: LD_ADDR_VAR 0 2
63546: PUSH
63547: LD_INT 0
63549: ST_TO_ADDR
// if GetTaskList ( sci ) then
63550: LD_VAR 0 1
63554: PPUSH
63555: CALL_OW 437
63559: IFFALSE 63607
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
63561: LD_VAR 0 1
63565: PPUSH
63566: CALL_OW 437
63570: PUSH
63571: LD_INT 1
63573: ARRAY
63574: PUSH
63575: LD_INT 1
63577: ARRAY
63578: PUSH
63579: LD_STRING l
63581: EQUAL
63582: IFFALSE 63607
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
63584: LD_ADDR_VAR 0 2
63588: PUSH
63589: LD_VAR 0 1
63593: PPUSH
63594: CALL_OW 437
63598: PUSH
63599: LD_INT 1
63601: ARRAY
63602: PUSH
63603: LD_INT 4
63605: ARRAY
63606: ST_TO_ADDR
// end ;
63607: LD_VAR 0 2
63611: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
63612: LD_INT 0
63614: PPUSH
63615: PPUSH
63616: PPUSH
63617: PPUSH
// if not base_units then
63618: LD_VAR 0 1
63622: NOT
63623: IFFALSE 63627
// exit ;
63625: GO 63714
// result := false ;
63627: LD_ADDR_VAR 0 2
63631: PUSH
63632: LD_INT 0
63634: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
63635: LD_ADDR_VAR 0 5
63639: PUSH
63640: LD_VAR 0 1
63644: PPUSH
63645: LD_INT 21
63647: PUSH
63648: LD_INT 3
63650: PUSH
63651: EMPTY
63652: LIST
63653: LIST
63654: PPUSH
63655: CALL_OW 72
63659: ST_TO_ADDR
// if not tmp then
63660: LD_VAR 0 5
63664: NOT
63665: IFFALSE 63669
// exit ;
63667: GO 63714
// for i in tmp do
63669: LD_ADDR_VAR 0 3
63673: PUSH
63674: LD_VAR 0 5
63678: PUSH
63679: FOR_IN
63680: IFFALSE 63712
// begin result := EnemyInRange ( i , 22 ) ;
63682: LD_ADDR_VAR 0 2
63686: PUSH
63687: LD_VAR 0 3
63691: PPUSH
63692: LD_INT 22
63694: PPUSH
63695: CALL 61383 0 2
63699: ST_TO_ADDR
// if result then
63700: LD_VAR 0 2
63704: IFFALSE 63710
// exit ;
63706: POP
63707: POP
63708: GO 63714
// end ;
63710: GO 63679
63712: POP
63713: POP
// end ;
63714: LD_VAR 0 2
63718: RET
// export function FilterByTag ( units , tag ) ; begin
63719: LD_INT 0
63721: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
63722: LD_ADDR_VAR 0 3
63726: PUSH
63727: LD_VAR 0 1
63731: PPUSH
63732: LD_INT 120
63734: PUSH
63735: LD_VAR 0 2
63739: PUSH
63740: EMPTY
63741: LIST
63742: LIST
63743: PPUSH
63744: CALL_OW 72
63748: ST_TO_ADDR
// end ;
63749: LD_VAR 0 3
63753: RET
// export function IsDriver ( un ) ; begin
63754: LD_INT 0
63756: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
63757: LD_ADDR_VAR 0 2
63761: PUSH
63762: LD_VAR 0 1
63766: PUSH
63767: LD_INT 55
63769: PUSH
63770: EMPTY
63771: LIST
63772: PPUSH
63773: CALL_OW 69
63777: IN
63778: ST_TO_ADDR
// end ;
63779: LD_VAR 0 2
63783: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
63784: LD_INT 0
63786: PPUSH
63787: PPUSH
// list := [ ] ;
63788: LD_ADDR_VAR 0 5
63792: PUSH
63793: EMPTY
63794: ST_TO_ADDR
// case d of 0 :
63795: LD_VAR 0 3
63799: PUSH
63800: LD_INT 0
63802: DOUBLE
63803: EQUAL
63804: IFTRUE 63808
63806: GO 63941
63808: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
63809: LD_ADDR_VAR 0 5
63813: PUSH
63814: LD_VAR 0 1
63818: PUSH
63819: LD_INT 4
63821: MINUS
63822: PUSH
63823: LD_VAR 0 2
63827: PUSH
63828: LD_INT 4
63830: MINUS
63831: PUSH
63832: LD_INT 2
63834: PUSH
63835: EMPTY
63836: LIST
63837: LIST
63838: LIST
63839: PUSH
63840: LD_VAR 0 1
63844: PUSH
63845: LD_INT 3
63847: MINUS
63848: PUSH
63849: LD_VAR 0 2
63853: PUSH
63854: LD_INT 1
63856: PUSH
63857: EMPTY
63858: LIST
63859: LIST
63860: LIST
63861: PUSH
63862: LD_VAR 0 1
63866: PUSH
63867: LD_INT 4
63869: PLUS
63870: PUSH
63871: LD_VAR 0 2
63875: PUSH
63876: LD_INT 4
63878: PUSH
63879: EMPTY
63880: LIST
63881: LIST
63882: LIST
63883: PUSH
63884: LD_VAR 0 1
63888: PUSH
63889: LD_INT 3
63891: PLUS
63892: PUSH
63893: LD_VAR 0 2
63897: PUSH
63898: LD_INT 3
63900: PLUS
63901: PUSH
63902: LD_INT 5
63904: PUSH
63905: EMPTY
63906: LIST
63907: LIST
63908: LIST
63909: PUSH
63910: LD_VAR 0 1
63914: PUSH
63915: LD_VAR 0 2
63919: PUSH
63920: LD_INT 4
63922: PLUS
63923: PUSH
63924: LD_INT 0
63926: PUSH
63927: EMPTY
63928: LIST
63929: LIST
63930: LIST
63931: PUSH
63932: EMPTY
63933: LIST
63934: LIST
63935: LIST
63936: LIST
63937: LIST
63938: ST_TO_ADDR
// end ; 1 :
63939: GO 64639
63941: LD_INT 1
63943: DOUBLE
63944: EQUAL
63945: IFTRUE 63949
63947: GO 64082
63949: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
63950: LD_ADDR_VAR 0 5
63954: PUSH
63955: LD_VAR 0 1
63959: PUSH
63960: LD_VAR 0 2
63964: PUSH
63965: LD_INT 4
63967: MINUS
63968: PUSH
63969: LD_INT 3
63971: PUSH
63972: EMPTY
63973: LIST
63974: LIST
63975: LIST
63976: PUSH
63977: LD_VAR 0 1
63981: PUSH
63982: LD_INT 3
63984: MINUS
63985: PUSH
63986: LD_VAR 0 2
63990: PUSH
63991: LD_INT 3
63993: MINUS
63994: PUSH
63995: LD_INT 2
63997: PUSH
63998: EMPTY
63999: LIST
64000: LIST
64001: LIST
64002: PUSH
64003: LD_VAR 0 1
64007: PUSH
64008: LD_INT 4
64010: MINUS
64011: PUSH
64012: LD_VAR 0 2
64016: PUSH
64017: LD_INT 1
64019: PUSH
64020: EMPTY
64021: LIST
64022: LIST
64023: LIST
64024: PUSH
64025: LD_VAR 0 1
64029: PUSH
64030: LD_VAR 0 2
64034: PUSH
64035: LD_INT 3
64037: PLUS
64038: PUSH
64039: LD_INT 0
64041: PUSH
64042: EMPTY
64043: LIST
64044: LIST
64045: LIST
64046: PUSH
64047: LD_VAR 0 1
64051: PUSH
64052: LD_INT 4
64054: PLUS
64055: PUSH
64056: LD_VAR 0 2
64060: PUSH
64061: LD_INT 4
64063: PLUS
64064: PUSH
64065: LD_INT 5
64067: PUSH
64068: EMPTY
64069: LIST
64070: LIST
64071: LIST
64072: PUSH
64073: EMPTY
64074: LIST
64075: LIST
64076: LIST
64077: LIST
64078: LIST
64079: ST_TO_ADDR
// end ; 2 :
64080: GO 64639
64082: LD_INT 2
64084: DOUBLE
64085: EQUAL
64086: IFTRUE 64090
64088: GO 64219
64090: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
64091: LD_ADDR_VAR 0 5
64095: PUSH
64096: LD_VAR 0 1
64100: PUSH
64101: LD_VAR 0 2
64105: PUSH
64106: LD_INT 3
64108: MINUS
64109: PUSH
64110: LD_INT 3
64112: PUSH
64113: EMPTY
64114: LIST
64115: LIST
64116: LIST
64117: PUSH
64118: LD_VAR 0 1
64122: PUSH
64123: LD_INT 4
64125: PLUS
64126: PUSH
64127: LD_VAR 0 2
64131: PUSH
64132: LD_INT 4
64134: PUSH
64135: EMPTY
64136: LIST
64137: LIST
64138: LIST
64139: PUSH
64140: LD_VAR 0 1
64144: PUSH
64145: LD_VAR 0 2
64149: PUSH
64150: LD_INT 4
64152: PLUS
64153: PUSH
64154: LD_INT 0
64156: PUSH
64157: EMPTY
64158: LIST
64159: LIST
64160: LIST
64161: PUSH
64162: LD_VAR 0 1
64166: PUSH
64167: LD_INT 3
64169: MINUS
64170: PUSH
64171: LD_VAR 0 2
64175: PUSH
64176: LD_INT 1
64178: PUSH
64179: EMPTY
64180: LIST
64181: LIST
64182: LIST
64183: PUSH
64184: LD_VAR 0 1
64188: PUSH
64189: LD_INT 4
64191: MINUS
64192: PUSH
64193: LD_VAR 0 2
64197: PUSH
64198: LD_INT 4
64200: MINUS
64201: PUSH
64202: LD_INT 2
64204: PUSH
64205: EMPTY
64206: LIST
64207: LIST
64208: LIST
64209: PUSH
64210: EMPTY
64211: LIST
64212: LIST
64213: LIST
64214: LIST
64215: LIST
64216: ST_TO_ADDR
// end ; 3 :
64217: GO 64639
64219: LD_INT 3
64221: DOUBLE
64222: EQUAL
64223: IFTRUE 64227
64225: GO 64360
64227: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
64228: LD_ADDR_VAR 0 5
64232: PUSH
64233: LD_VAR 0 1
64237: PUSH
64238: LD_INT 3
64240: PLUS
64241: PUSH
64242: LD_VAR 0 2
64246: PUSH
64247: LD_INT 4
64249: PUSH
64250: EMPTY
64251: LIST
64252: LIST
64253: LIST
64254: PUSH
64255: LD_VAR 0 1
64259: PUSH
64260: LD_INT 4
64262: PLUS
64263: PUSH
64264: LD_VAR 0 2
64268: PUSH
64269: LD_INT 4
64271: PLUS
64272: PUSH
64273: LD_INT 5
64275: PUSH
64276: EMPTY
64277: LIST
64278: LIST
64279: LIST
64280: PUSH
64281: LD_VAR 0 1
64285: PUSH
64286: LD_INT 4
64288: MINUS
64289: PUSH
64290: LD_VAR 0 2
64294: PUSH
64295: LD_INT 1
64297: PUSH
64298: EMPTY
64299: LIST
64300: LIST
64301: LIST
64302: PUSH
64303: LD_VAR 0 1
64307: PUSH
64308: LD_VAR 0 2
64312: PUSH
64313: LD_INT 4
64315: MINUS
64316: PUSH
64317: LD_INT 3
64319: PUSH
64320: EMPTY
64321: LIST
64322: LIST
64323: LIST
64324: PUSH
64325: LD_VAR 0 1
64329: PUSH
64330: LD_INT 3
64332: MINUS
64333: PUSH
64334: LD_VAR 0 2
64338: PUSH
64339: LD_INT 3
64341: MINUS
64342: PUSH
64343: LD_INT 2
64345: PUSH
64346: EMPTY
64347: LIST
64348: LIST
64349: LIST
64350: PUSH
64351: EMPTY
64352: LIST
64353: LIST
64354: LIST
64355: LIST
64356: LIST
64357: ST_TO_ADDR
// end ; 4 :
64358: GO 64639
64360: LD_INT 4
64362: DOUBLE
64363: EQUAL
64364: IFTRUE 64368
64366: GO 64501
64368: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
64369: LD_ADDR_VAR 0 5
64373: PUSH
64374: LD_VAR 0 1
64378: PUSH
64379: LD_VAR 0 2
64383: PUSH
64384: LD_INT 4
64386: PLUS
64387: PUSH
64388: LD_INT 0
64390: PUSH
64391: EMPTY
64392: LIST
64393: LIST
64394: LIST
64395: PUSH
64396: LD_VAR 0 1
64400: PUSH
64401: LD_INT 3
64403: PLUS
64404: PUSH
64405: LD_VAR 0 2
64409: PUSH
64410: LD_INT 3
64412: PLUS
64413: PUSH
64414: LD_INT 5
64416: PUSH
64417: EMPTY
64418: LIST
64419: LIST
64420: LIST
64421: PUSH
64422: LD_VAR 0 1
64426: PUSH
64427: LD_INT 4
64429: PLUS
64430: PUSH
64431: LD_VAR 0 2
64435: PUSH
64436: LD_INT 4
64438: PUSH
64439: EMPTY
64440: LIST
64441: LIST
64442: LIST
64443: PUSH
64444: LD_VAR 0 1
64448: PUSH
64449: LD_VAR 0 2
64453: PUSH
64454: LD_INT 3
64456: MINUS
64457: PUSH
64458: LD_INT 3
64460: PUSH
64461: EMPTY
64462: LIST
64463: LIST
64464: LIST
64465: PUSH
64466: LD_VAR 0 1
64470: PUSH
64471: LD_INT 4
64473: MINUS
64474: PUSH
64475: LD_VAR 0 2
64479: PUSH
64480: LD_INT 4
64482: MINUS
64483: PUSH
64484: LD_INT 2
64486: PUSH
64487: EMPTY
64488: LIST
64489: LIST
64490: LIST
64491: PUSH
64492: EMPTY
64493: LIST
64494: LIST
64495: LIST
64496: LIST
64497: LIST
64498: ST_TO_ADDR
// end ; 5 :
64499: GO 64639
64501: LD_INT 5
64503: DOUBLE
64504: EQUAL
64505: IFTRUE 64509
64507: GO 64638
64509: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
64510: LD_ADDR_VAR 0 5
64514: PUSH
64515: LD_VAR 0 1
64519: PUSH
64520: LD_INT 4
64522: MINUS
64523: PUSH
64524: LD_VAR 0 2
64528: PUSH
64529: LD_INT 1
64531: PUSH
64532: EMPTY
64533: LIST
64534: LIST
64535: LIST
64536: PUSH
64537: LD_VAR 0 1
64541: PUSH
64542: LD_VAR 0 2
64546: PUSH
64547: LD_INT 4
64549: MINUS
64550: PUSH
64551: LD_INT 3
64553: PUSH
64554: EMPTY
64555: LIST
64556: LIST
64557: LIST
64558: PUSH
64559: LD_VAR 0 1
64563: PUSH
64564: LD_INT 4
64566: PLUS
64567: PUSH
64568: LD_VAR 0 2
64572: PUSH
64573: LD_INT 4
64575: PLUS
64576: PUSH
64577: LD_INT 5
64579: PUSH
64580: EMPTY
64581: LIST
64582: LIST
64583: LIST
64584: PUSH
64585: LD_VAR 0 1
64589: PUSH
64590: LD_INT 3
64592: PLUS
64593: PUSH
64594: LD_VAR 0 2
64598: PUSH
64599: LD_INT 4
64601: PUSH
64602: EMPTY
64603: LIST
64604: LIST
64605: LIST
64606: PUSH
64607: LD_VAR 0 1
64611: PUSH
64612: LD_VAR 0 2
64616: PUSH
64617: LD_INT 3
64619: PLUS
64620: PUSH
64621: LD_INT 0
64623: PUSH
64624: EMPTY
64625: LIST
64626: LIST
64627: LIST
64628: PUSH
64629: EMPTY
64630: LIST
64631: LIST
64632: LIST
64633: LIST
64634: LIST
64635: ST_TO_ADDR
// end ; end ;
64636: GO 64639
64638: POP
// result := list ;
64639: LD_ADDR_VAR 0 4
64643: PUSH
64644: LD_VAR 0 5
64648: ST_TO_ADDR
// end ;
64649: LD_VAR 0 4
64653: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
64654: LD_INT 0
64656: PPUSH
64657: PPUSH
64658: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
64659: LD_VAR 0 1
64663: NOT
64664: PUSH
64665: LD_VAR 0 2
64669: PUSH
64670: LD_INT 1
64672: PUSH
64673: LD_INT 2
64675: PUSH
64676: LD_INT 3
64678: PUSH
64679: LD_INT 4
64681: PUSH
64682: EMPTY
64683: LIST
64684: LIST
64685: LIST
64686: LIST
64687: IN
64688: NOT
64689: OR
64690: IFFALSE 64694
// exit ;
64692: GO 64786
// tmp := [ ] ;
64694: LD_ADDR_VAR 0 5
64698: PUSH
64699: EMPTY
64700: ST_TO_ADDR
// for i in units do
64701: LD_ADDR_VAR 0 4
64705: PUSH
64706: LD_VAR 0 1
64710: PUSH
64711: FOR_IN
64712: IFFALSE 64755
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
64714: LD_ADDR_VAR 0 5
64718: PUSH
64719: LD_VAR 0 5
64723: PPUSH
64724: LD_VAR 0 5
64728: PUSH
64729: LD_INT 1
64731: PLUS
64732: PPUSH
64733: LD_VAR 0 4
64737: PPUSH
64738: LD_VAR 0 2
64742: PPUSH
64743: CALL_OW 259
64747: PPUSH
64748: CALL_OW 2
64752: ST_TO_ADDR
64753: GO 64711
64755: POP
64756: POP
// if not tmp then
64757: LD_VAR 0 5
64761: NOT
64762: IFFALSE 64766
// exit ;
64764: GO 64786
// result := SortListByListDesc ( units , tmp ) ;
64766: LD_ADDR_VAR 0 3
64770: PUSH
64771: LD_VAR 0 1
64775: PPUSH
64776: LD_VAR 0 5
64780: PPUSH
64781: CALL_OW 77
64785: ST_TO_ADDR
// end ;
64786: LD_VAR 0 3
64790: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
64791: LD_INT 0
64793: PPUSH
64794: PPUSH
64795: PPUSH
// result := false ;
64796: LD_ADDR_VAR 0 3
64800: PUSH
64801: LD_INT 0
64803: ST_TO_ADDR
// x := GetX ( building ) ;
64804: LD_ADDR_VAR 0 4
64808: PUSH
64809: LD_VAR 0 2
64813: PPUSH
64814: CALL_OW 250
64818: ST_TO_ADDR
// y := GetY ( building ) ;
64819: LD_ADDR_VAR 0 5
64823: PUSH
64824: LD_VAR 0 2
64828: PPUSH
64829: CALL_OW 251
64833: ST_TO_ADDR
// if not building or not x or not y then
64834: LD_VAR 0 2
64838: NOT
64839: PUSH
64840: LD_VAR 0 4
64844: NOT
64845: OR
64846: PUSH
64847: LD_VAR 0 5
64851: NOT
64852: OR
64853: IFFALSE 64857
// exit ;
64855: GO 64949
// if GetTaskList ( unit ) then
64857: LD_VAR 0 1
64861: PPUSH
64862: CALL_OW 437
64866: IFFALSE 64949
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
64868: LD_STRING e
64870: PUSH
64871: LD_VAR 0 1
64875: PPUSH
64876: CALL_OW 437
64880: PUSH
64881: LD_INT 1
64883: ARRAY
64884: PUSH
64885: LD_INT 1
64887: ARRAY
64888: EQUAL
64889: PUSH
64890: LD_VAR 0 4
64894: PUSH
64895: LD_VAR 0 1
64899: PPUSH
64900: CALL_OW 437
64904: PUSH
64905: LD_INT 1
64907: ARRAY
64908: PUSH
64909: LD_INT 2
64911: ARRAY
64912: EQUAL
64913: AND
64914: PUSH
64915: LD_VAR 0 5
64919: PUSH
64920: LD_VAR 0 1
64924: PPUSH
64925: CALL_OW 437
64929: PUSH
64930: LD_INT 1
64932: ARRAY
64933: PUSH
64934: LD_INT 3
64936: ARRAY
64937: EQUAL
64938: AND
64939: IFFALSE 64949
// result := true end ;
64941: LD_ADDR_VAR 0 3
64945: PUSH
64946: LD_INT 1
64948: ST_TO_ADDR
// end ;
64949: LD_VAR 0 3
64953: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
64954: LD_INT 0
64956: PPUSH
// result := false ;
64957: LD_ADDR_VAR 0 4
64961: PUSH
64962: LD_INT 0
64964: ST_TO_ADDR
// if GetTaskList ( unit ) then
64965: LD_VAR 0 1
64969: PPUSH
64970: CALL_OW 437
64974: IFFALSE 65057
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
64976: LD_STRING M
64978: PUSH
64979: LD_VAR 0 1
64983: PPUSH
64984: CALL_OW 437
64988: PUSH
64989: LD_INT 1
64991: ARRAY
64992: PUSH
64993: LD_INT 1
64995: ARRAY
64996: EQUAL
64997: PUSH
64998: LD_VAR 0 2
65002: PUSH
65003: LD_VAR 0 1
65007: PPUSH
65008: CALL_OW 437
65012: PUSH
65013: LD_INT 1
65015: ARRAY
65016: PUSH
65017: LD_INT 2
65019: ARRAY
65020: EQUAL
65021: AND
65022: PUSH
65023: LD_VAR 0 3
65027: PUSH
65028: LD_VAR 0 1
65032: PPUSH
65033: CALL_OW 437
65037: PUSH
65038: LD_INT 1
65040: ARRAY
65041: PUSH
65042: LD_INT 3
65044: ARRAY
65045: EQUAL
65046: AND
65047: IFFALSE 65057
// result := true ;
65049: LD_ADDR_VAR 0 4
65053: PUSH
65054: LD_INT 1
65056: ST_TO_ADDR
// end ; end ;
65057: LD_VAR 0 4
65061: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
65062: LD_INT 0
65064: PPUSH
65065: PPUSH
65066: PPUSH
65067: PPUSH
// if not unit or not area then
65068: LD_VAR 0 1
65072: NOT
65073: PUSH
65074: LD_VAR 0 2
65078: NOT
65079: OR
65080: IFFALSE 65084
// exit ;
65082: GO 65248
// tmp := AreaToList ( area , i ) ;
65084: LD_ADDR_VAR 0 6
65088: PUSH
65089: LD_VAR 0 2
65093: PPUSH
65094: LD_VAR 0 5
65098: PPUSH
65099: CALL_OW 517
65103: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
65104: LD_ADDR_VAR 0 5
65108: PUSH
65109: DOUBLE
65110: LD_INT 1
65112: DEC
65113: ST_TO_ADDR
65114: LD_VAR 0 6
65118: PUSH
65119: LD_INT 1
65121: ARRAY
65122: PUSH
65123: FOR_TO
65124: IFFALSE 65246
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
65126: LD_ADDR_VAR 0 7
65130: PUSH
65131: LD_VAR 0 6
65135: PUSH
65136: LD_INT 1
65138: ARRAY
65139: PUSH
65140: LD_VAR 0 5
65144: ARRAY
65145: PUSH
65146: LD_VAR 0 6
65150: PUSH
65151: LD_INT 2
65153: ARRAY
65154: PUSH
65155: LD_VAR 0 5
65159: ARRAY
65160: PUSH
65161: EMPTY
65162: LIST
65163: LIST
65164: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
65165: LD_VAR 0 7
65169: PUSH
65170: LD_INT 1
65172: ARRAY
65173: PPUSH
65174: LD_VAR 0 7
65178: PUSH
65179: LD_INT 2
65181: ARRAY
65182: PPUSH
65183: CALL_OW 428
65187: PUSH
65188: LD_INT 0
65190: EQUAL
65191: IFFALSE 65244
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
65193: LD_VAR 0 1
65197: PPUSH
65198: LD_VAR 0 7
65202: PUSH
65203: LD_INT 1
65205: ARRAY
65206: PPUSH
65207: LD_VAR 0 7
65211: PUSH
65212: LD_INT 2
65214: ARRAY
65215: PPUSH
65216: LD_VAR 0 3
65220: PPUSH
65221: CALL_OW 48
// result := IsPlaced ( unit ) ;
65225: LD_ADDR_VAR 0 4
65229: PUSH
65230: LD_VAR 0 1
65234: PPUSH
65235: CALL_OW 305
65239: ST_TO_ADDR
// exit ;
65240: POP
65241: POP
65242: GO 65248
// end ; end ;
65244: GO 65123
65246: POP
65247: POP
// end ;
65248: LD_VAR 0 4
65252: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
65253: LD_INT 0
65255: PPUSH
65256: PPUSH
65257: PPUSH
// if not side or side > 8 then
65258: LD_VAR 0 1
65262: NOT
65263: PUSH
65264: LD_VAR 0 1
65268: PUSH
65269: LD_INT 8
65271: GREATER
65272: OR
65273: IFFALSE 65277
// exit ;
65275: GO 65464
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
65277: LD_ADDR_VAR 0 4
65281: PUSH
65282: LD_INT 22
65284: PUSH
65285: LD_VAR 0 1
65289: PUSH
65290: EMPTY
65291: LIST
65292: LIST
65293: PUSH
65294: LD_INT 21
65296: PUSH
65297: LD_INT 3
65299: PUSH
65300: EMPTY
65301: LIST
65302: LIST
65303: PUSH
65304: EMPTY
65305: LIST
65306: LIST
65307: PPUSH
65308: CALL_OW 69
65312: ST_TO_ADDR
// if not tmp then
65313: LD_VAR 0 4
65317: NOT
65318: IFFALSE 65322
// exit ;
65320: GO 65464
// enable_addtolog := true ;
65322: LD_ADDR_OWVAR 81
65326: PUSH
65327: LD_INT 1
65329: ST_TO_ADDR
// AddToLog ( [ ) ;
65330: LD_STRING [
65332: PPUSH
65333: CALL_OW 561
// for i in tmp do
65337: LD_ADDR_VAR 0 3
65341: PUSH
65342: LD_VAR 0 4
65346: PUSH
65347: FOR_IN
65348: IFFALSE 65455
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
65350: LD_STRING [
65352: PUSH
65353: LD_VAR 0 3
65357: PPUSH
65358: CALL_OW 266
65362: STR
65363: PUSH
65364: LD_STRING , 
65366: STR
65367: PUSH
65368: LD_VAR 0 3
65372: PPUSH
65373: CALL_OW 250
65377: STR
65378: PUSH
65379: LD_STRING , 
65381: STR
65382: PUSH
65383: LD_VAR 0 3
65387: PPUSH
65388: CALL_OW 251
65392: STR
65393: PUSH
65394: LD_STRING , 
65396: STR
65397: PUSH
65398: LD_VAR 0 3
65402: PPUSH
65403: CALL_OW 254
65407: STR
65408: PUSH
65409: LD_STRING , 
65411: STR
65412: PUSH
65413: LD_VAR 0 3
65417: PPUSH
65418: LD_INT 1
65420: PPUSH
65421: CALL_OW 268
65425: STR
65426: PUSH
65427: LD_STRING , 
65429: STR
65430: PUSH
65431: LD_VAR 0 3
65435: PPUSH
65436: LD_INT 2
65438: PPUSH
65439: CALL_OW 268
65443: STR
65444: PUSH
65445: LD_STRING ],
65447: STR
65448: PPUSH
65449: CALL_OW 561
// end ;
65453: GO 65347
65455: POP
65456: POP
// AddToLog ( ]; ) ;
65457: LD_STRING ];
65459: PPUSH
65460: CALL_OW 561
// end ;
65464: LD_VAR 0 2
65468: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
65469: LD_INT 0
65471: PPUSH
65472: PPUSH
65473: PPUSH
65474: PPUSH
65475: PPUSH
// if not area or not rate or not max then
65476: LD_VAR 0 1
65480: NOT
65481: PUSH
65482: LD_VAR 0 2
65486: NOT
65487: OR
65488: PUSH
65489: LD_VAR 0 4
65493: NOT
65494: OR
65495: IFFALSE 65499
// exit ;
65497: GO 65688
// while 1 do
65499: LD_INT 1
65501: IFFALSE 65688
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
65503: LD_ADDR_VAR 0 9
65507: PUSH
65508: LD_VAR 0 1
65512: PPUSH
65513: LD_INT 1
65515: PPUSH
65516: CALL_OW 287
65520: PUSH
65521: LD_INT 10
65523: MUL
65524: ST_TO_ADDR
// r := rate / 10 ;
65525: LD_ADDR_VAR 0 7
65529: PUSH
65530: LD_VAR 0 2
65534: PUSH
65535: LD_INT 10
65537: DIVREAL
65538: ST_TO_ADDR
// time := 1 1$00 ;
65539: LD_ADDR_VAR 0 8
65543: PUSH
65544: LD_INT 2100
65546: ST_TO_ADDR
// if amount < min then
65547: LD_VAR 0 9
65551: PUSH
65552: LD_VAR 0 3
65556: LESS
65557: IFFALSE 65575
// r := r * 2 else
65559: LD_ADDR_VAR 0 7
65563: PUSH
65564: LD_VAR 0 7
65568: PUSH
65569: LD_INT 2
65571: MUL
65572: ST_TO_ADDR
65573: GO 65601
// if amount > max then
65575: LD_VAR 0 9
65579: PUSH
65580: LD_VAR 0 4
65584: GREATER
65585: IFFALSE 65601
// r := r / 2 ;
65587: LD_ADDR_VAR 0 7
65591: PUSH
65592: LD_VAR 0 7
65596: PUSH
65597: LD_INT 2
65599: DIVREAL
65600: ST_TO_ADDR
// time := time / r ;
65601: LD_ADDR_VAR 0 8
65605: PUSH
65606: LD_VAR 0 8
65610: PUSH
65611: LD_VAR 0 7
65615: DIVREAL
65616: ST_TO_ADDR
// if time < 0 then
65617: LD_VAR 0 8
65621: PUSH
65622: LD_INT 0
65624: LESS
65625: IFFALSE 65642
// time := time * - 1 ;
65627: LD_ADDR_VAR 0 8
65631: PUSH
65632: LD_VAR 0 8
65636: PUSH
65637: LD_INT 1
65639: NEG
65640: MUL
65641: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
65642: LD_VAR 0 8
65646: PUSH
65647: LD_INT 35
65649: PPUSH
65650: LD_INT 875
65652: PPUSH
65653: CALL_OW 12
65657: PLUS
65658: PPUSH
65659: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
65663: LD_INT 1
65665: PPUSH
65666: LD_INT 5
65668: PPUSH
65669: CALL_OW 12
65673: PPUSH
65674: LD_VAR 0 1
65678: PPUSH
65679: LD_INT 1
65681: PPUSH
65682: CALL_OW 55
// end ;
65686: GO 65499
// end ;
65688: LD_VAR 0 5
65692: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
65693: LD_INT 0
65695: PPUSH
65696: PPUSH
65697: PPUSH
65698: PPUSH
65699: PPUSH
65700: PPUSH
65701: PPUSH
65702: PPUSH
// if not turrets or not factories then
65703: LD_VAR 0 1
65707: NOT
65708: PUSH
65709: LD_VAR 0 2
65713: NOT
65714: OR
65715: IFFALSE 65719
// exit ;
65717: GO 66026
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
65719: LD_ADDR_VAR 0 10
65723: PUSH
65724: LD_INT 5
65726: PUSH
65727: LD_INT 6
65729: PUSH
65730: EMPTY
65731: LIST
65732: LIST
65733: PUSH
65734: LD_INT 2
65736: PUSH
65737: LD_INT 4
65739: PUSH
65740: EMPTY
65741: LIST
65742: LIST
65743: PUSH
65744: LD_INT 3
65746: PUSH
65747: LD_INT 5
65749: PUSH
65750: EMPTY
65751: LIST
65752: LIST
65753: PUSH
65754: EMPTY
65755: LIST
65756: LIST
65757: LIST
65758: PUSH
65759: LD_INT 24
65761: PUSH
65762: LD_INT 25
65764: PUSH
65765: EMPTY
65766: LIST
65767: LIST
65768: PUSH
65769: LD_INT 23
65771: PUSH
65772: LD_INT 27
65774: PUSH
65775: EMPTY
65776: LIST
65777: LIST
65778: PUSH
65779: EMPTY
65780: LIST
65781: LIST
65782: PUSH
65783: LD_INT 42
65785: PUSH
65786: LD_INT 43
65788: PUSH
65789: EMPTY
65790: LIST
65791: LIST
65792: PUSH
65793: LD_INT 44
65795: PUSH
65796: LD_INT 46
65798: PUSH
65799: EMPTY
65800: LIST
65801: LIST
65802: PUSH
65803: LD_INT 45
65805: PUSH
65806: LD_INT 47
65808: PUSH
65809: EMPTY
65810: LIST
65811: LIST
65812: PUSH
65813: EMPTY
65814: LIST
65815: LIST
65816: LIST
65817: PUSH
65818: EMPTY
65819: LIST
65820: LIST
65821: LIST
65822: ST_TO_ADDR
// result := [ ] ;
65823: LD_ADDR_VAR 0 3
65827: PUSH
65828: EMPTY
65829: ST_TO_ADDR
// for i in turrets do
65830: LD_ADDR_VAR 0 4
65834: PUSH
65835: LD_VAR 0 1
65839: PUSH
65840: FOR_IN
65841: IFFALSE 66024
// begin nat := GetNation ( i ) ;
65843: LD_ADDR_VAR 0 7
65847: PUSH
65848: LD_VAR 0 4
65852: PPUSH
65853: CALL_OW 248
65857: ST_TO_ADDR
// weapon := 0 ;
65858: LD_ADDR_VAR 0 8
65862: PUSH
65863: LD_INT 0
65865: ST_TO_ADDR
// if not nat then
65866: LD_VAR 0 7
65870: NOT
65871: IFFALSE 65875
// continue ;
65873: GO 65840
// for j in list [ nat ] do
65875: LD_ADDR_VAR 0 5
65879: PUSH
65880: LD_VAR 0 10
65884: PUSH
65885: LD_VAR 0 7
65889: ARRAY
65890: PUSH
65891: FOR_IN
65892: IFFALSE 65933
// if GetBWeapon ( i ) = j [ 1 ] then
65894: LD_VAR 0 4
65898: PPUSH
65899: CALL_OW 269
65903: PUSH
65904: LD_VAR 0 5
65908: PUSH
65909: LD_INT 1
65911: ARRAY
65912: EQUAL
65913: IFFALSE 65931
// begin weapon := j [ 2 ] ;
65915: LD_ADDR_VAR 0 8
65919: PUSH
65920: LD_VAR 0 5
65924: PUSH
65925: LD_INT 2
65927: ARRAY
65928: ST_TO_ADDR
// break ;
65929: GO 65933
// end ;
65931: GO 65891
65933: POP
65934: POP
// if not weapon then
65935: LD_VAR 0 8
65939: NOT
65940: IFFALSE 65944
// continue ;
65942: GO 65840
// for k in factories do
65944: LD_ADDR_VAR 0 6
65948: PUSH
65949: LD_VAR 0 2
65953: PUSH
65954: FOR_IN
65955: IFFALSE 66020
// begin weapons := AvailableWeaponList ( k ) ;
65957: LD_ADDR_VAR 0 9
65961: PUSH
65962: LD_VAR 0 6
65966: PPUSH
65967: CALL_OW 478
65971: ST_TO_ADDR
// if not weapons then
65972: LD_VAR 0 9
65976: NOT
65977: IFFALSE 65981
// continue ;
65979: GO 65954
// if weapon in weapons then
65981: LD_VAR 0 8
65985: PUSH
65986: LD_VAR 0 9
65990: IN
65991: IFFALSE 66018
// begin result := [ i , weapon ] ;
65993: LD_ADDR_VAR 0 3
65997: PUSH
65998: LD_VAR 0 4
66002: PUSH
66003: LD_VAR 0 8
66007: PUSH
66008: EMPTY
66009: LIST
66010: LIST
66011: ST_TO_ADDR
// exit ;
66012: POP
66013: POP
66014: POP
66015: POP
66016: GO 66026
// end ; end ;
66018: GO 65954
66020: POP
66021: POP
// end ;
66022: GO 65840
66024: POP
66025: POP
// end ;
66026: LD_VAR 0 3
66030: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
66031: LD_INT 0
66033: PPUSH
// if not side or side > 8 then
66034: LD_VAR 0 3
66038: NOT
66039: PUSH
66040: LD_VAR 0 3
66044: PUSH
66045: LD_INT 8
66047: GREATER
66048: OR
66049: IFFALSE 66053
// exit ;
66051: GO 66112
// if not range then
66053: LD_VAR 0 4
66057: NOT
66058: IFFALSE 66069
// range := - 12 ;
66060: LD_ADDR_VAR 0 4
66064: PUSH
66065: LD_INT 12
66067: NEG
66068: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
66069: LD_VAR 0 1
66073: PPUSH
66074: LD_VAR 0 2
66078: PPUSH
66079: LD_VAR 0 3
66083: PPUSH
66084: LD_VAR 0 4
66088: PPUSH
66089: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
66093: LD_VAR 0 1
66097: PPUSH
66098: LD_VAR 0 2
66102: PPUSH
66103: LD_VAR 0 3
66107: PPUSH
66108: CALL_OW 331
// end ;
66112: LD_VAR 0 5
66116: RET
// export function Video ( mode ) ; begin
66117: LD_INT 0
66119: PPUSH
// ingame_video = mode ;
66120: LD_ADDR_OWVAR 52
66124: PUSH
66125: LD_VAR 0 1
66129: ST_TO_ADDR
// interface_hidden = mode ;
66130: LD_ADDR_OWVAR 54
66134: PUSH
66135: LD_VAR 0 1
66139: ST_TO_ADDR
// end ;
66140: LD_VAR 0 2
66144: RET
// export function Join ( array , element ) ; begin
66145: LD_INT 0
66147: PPUSH
// result := Replace ( array , array + 1 , element ) ;
66148: LD_ADDR_VAR 0 3
66152: PUSH
66153: LD_VAR 0 1
66157: PPUSH
66158: LD_VAR 0 1
66162: PUSH
66163: LD_INT 1
66165: PLUS
66166: PPUSH
66167: LD_VAR 0 2
66171: PPUSH
66172: CALL_OW 1
66176: ST_TO_ADDR
// end ;
66177: LD_VAR 0 3
66181: RET
// export function JoinUnion ( array , element ) ; begin
66182: LD_INT 0
66184: PPUSH
// result := array union element ;
66185: LD_ADDR_VAR 0 3
66189: PUSH
66190: LD_VAR 0 1
66194: PUSH
66195: LD_VAR 0 2
66199: UNION
66200: ST_TO_ADDR
// end ;
66201: LD_VAR 0 3
66205: RET
// export function GetBehemoths ( side ) ; begin
66206: LD_INT 0
66208: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
66209: LD_ADDR_VAR 0 2
66213: PUSH
66214: LD_INT 22
66216: PUSH
66217: LD_VAR 0 1
66221: PUSH
66222: EMPTY
66223: LIST
66224: LIST
66225: PUSH
66226: LD_INT 31
66228: PUSH
66229: LD_INT 25
66231: PUSH
66232: EMPTY
66233: LIST
66234: LIST
66235: PUSH
66236: EMPTY
66237: LIST
66238: LIST
66239: PPUSH
66240: CALL_OW 69
66244: ST_TO_ADDR
// end ;
66245: LD_VAR 0 2
66249: RET
// export function Shuffle ( array ) ; var i , index ; begin
66250: LD_INT 0
66252: PPUSH
66253: PPUSH
66254: PPUSH
// result := [ ] ;
66255: LD_ADDR_VAR 0 2
66259: PUSH
66260: EMPTY
66261: ST_TO_ADDR
// if not array then
66262: LD_VAR 0 1
66266: NOT
66267: IFFALSE 66271
// exit ;
66269: GO 66370
// Randomize ;
66271: CALL_OW 10
// for i = array downto 1 do
66275: LD_ADDR_VAR 0 3
66279: PUSH
66280: DOUBLE
66281: LD_VAR 0 1
66285: INC
66286: ST_TO_ADDR
66287: LD_INT 1
66289: PUSH
66290: FOR_DOWNTO
66291: IFFALSE 66368
// begin index := rand ( 1 , array ) ;
66293: LD_ADDR_VAR 0 4
66297: PUSH
66298: LD_INT 1
66300: PPUSH
66301: LD_VAR 0 1
66305: PPUSH
66306: CALL_OW 12
66310: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
66311: LD_ADDR_VAR 0 2
66315: PUSH
66316: LD_VAR 0 2
66320: PPUSH
66321: LD_VAR 0 2
66325: PUSH
66326: LD_INT 1
66328: PLUS
66329: PPUSH
66330: LD_VAR 0 1
66334: PUSH
66335: LD_VAR 0 4
66339: ARRAY
66340: PPUSH
66341: CALL_OW 2
66345: ST_TO_ADDR
// array := Delete ( array , index ) ;
66346: LD_ADDR_VAR 0 1
66350: PUSH
66351: LD_VAR 0 1
66355: PPUSH
66356: LD_VAR 0 4
66360: PPUSH
66361: CALL_OW 3
66365: ST_TO_ADDR
// end ;
66366: GO 66290
66368: POP
66369: POP
// end ;
66370: LD_VAR 0 2
66374: RET
// export function GetBaseMaterials ( base ) ; begin
66375: LD_INT 0
66377: PPUSH
// result := [ 0 , 0 , 0 ] ;
66378: LD_ADDR_VAR 0 2
66382: PUSH
66383: LD_INT 0
66385: PUSH
66386: LD_INT 0
66388: PUSH
66389: LD_INT 0
66391: PUSH
66392: EMPTY
66393: LIST
66394: LIST
66395: LIST
66396: ST_TO_ADDR
// if not base then
66397: LD_VAR 0 1
66401: NOT
66402: IFFALSE 66406
// exit ;
66404: GO 66455
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
66406: LD_ADDR_VAR 0 2
66410: PUSH
66411: LD_VAR 0 1
66415: PPUSH
66416: LD_INT 1
66418: PPUSH
66419: CALL_OW 275
66423: PUSH
66424: LD_VAR 0 1
66428: PPUSH
66429: LD_INT 2
66431: PPUSH
66432: CALL_OW 275
66436: PUSH
66437: LD_VAR 0 1
66441: PPUSH
66442: LD_INT 3
66444: PPUSH
66445: CALL_OW 275
66449: PUSH
66450: EMPTY
66451: LIST
66452: LIST
66453: LIST
66454: ST_TO_ADDR
// end ;
66455: LD_VAR 0 2
66459: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
66460: LD_INT 0
66462: PPUSH
66463: PPUSH
// result := array ;
66464: LD_ADDR_VAR 0 3
66468: PUSH
66469: LD_VAR 0 1
66473: ST_TO_ADDR
// if size >= result then
66474: LD_VAR 0 2
66478: PUSH
66479: LD_VAR 0 3
66483: GREATEREQUAL
66484: IFFALSE 66488
// exit ;
66486: GO 66538
// if size then
66488: LD_VAR 0 2
66492: IFFALSE 66538
// for i := array downto size do
66494: LD_ADDR_VAR 0 4
66498: PUSH
66499: DOUBLE
66500: LD_VAR 0 1
66504: INC
66505: ST_TO_ADDR
66506: LD_VAR 0 2
66510: PUSH
66511: FOR_DOWNTO
66512: IFFALSE 66536
// result := Delete ( result , result ) ;
66514: LD_ADDR_VAR 0 3
66518: PUSH
66519: LD_VAR 0 3
66523: PPUSH
66524: LD_VAR 0 3
66528: PPUSH
66529: CALL_OW 3
66533: ST_TO_ADDR
66534: GO 66511
66536: POP
66537: POP
// end ;
66538: LD_VAR 0 3
66542: RET
// export function ComExit ( unit ) ; var tmp ; begin
66543: LD_INT 0
66545: PPUSH
66546: PPUSH
// if not IsInUnit ( unit ) then
66547: LD_VAR 0 1
66551: PPUSH
66552: CALL_OW 310
66556: NOT
66557: IFFALSE 66561
// exit ;
66559: GO 66621
// tmp := IsInUnit ( unit ) ;
66561: LD_ADDR_VAR 0 3
66565: PUSH
66566: LD_VAR 0 1
66570: PPUSH
66571: CALL_OW 310
66575: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
66576: LD_VAR 0 3
66580: PPUSH
66581: CALL_OW 247
66585: PUSH
66586: LD_INT 2
66588: EQUAL
66589: IFFALSE 66602
// ComExitVehicle ( unit ) else
66591: LD_VAR 0 1
66595: PPUSH
66596: CALL_OW 121
66600: GO 66611
// ComExitBuilding ( unit ) ;
66602: LD_VAR 0 1
66606: PPUSH
66607: CALL_OW 122
// result := tmp ;
66611: LD_ADDR_VAR 0 2
66615: PUSH
66616: LD_VAR 0 3
66620: ST_TO_ADDR
// end ;
66621: LD_VAR 0 2
66625: RET
// export function ComExitAll ( units ) ; var i ; begin
66626: LD_INT 0
66628: PPUSH
66629: PPUSH
// if not units then
66630: LD_VAR 0 1
66634: NOT
66635: IFFALSE 66639
// exit ;
66637: GO 66665
// for i in units do
66639: LD_ADDR_VAR 0 3
66643: PUSH
66644: LD_VAR 0 1
66648: PUSH
66649: FOR_IN
66650: IFFALSE 66663
// ComExit ( i ) ;
66652: LD_VAR 0 3
66656: PPUSH
66657: CALL 66543 0 1
66661: GO 66649
66663: POP
66664: POP
// end ;
66665: LD_VAR 0 2
66669: RET
// export function ResetHc ; begin
66670: LD_INT 0
66672: PPUSH
// InitHc ;
66673: CALL_OW 19
// hc_importance := 0 ;
66677: LD_ADDR_OWVAR 32
66681: PUSH
66682: LD_INT 0
66684: ST_TO_ADDR
// end ;
66685: LD_VAR 0 1
66689: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
66690: LD_INT 0
66692: PPUSH
66693: PPUSH
66694: PPUSH
// _x := ( x1 + x2 ) div 2 ;
66695: LD_ADDR_VAR 0 6
66699: PUSH
66700: LD_VAR 0 1
66704: PUSH
66705: LD_VAR 0 3
66709: PLUS
66710: PUSH
66711: LD_INT 2
66713: DIV
66714: ST_TO_ADDR
// if _x < 0 then
66715: LD_VAR 0 6
66719: PUSH
66720: LD_INT 0
66722: LESS
66723: IFFALSE 66740
// _x := _x * - 1 ;
66725: LD_ADDR_VAR 0 6
66729: PUSH
66730: LD_VAR 0 6
66734: PUSH
66735: LD_INT 1
66737: NEG
66738: MUL
66739: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
66740: LD_ADDR_VAR 0 7
66744: PUSH
66745: LD_VAR 0 2
66749: PUSH
66750: LD_VAR 0 4
66754: PLUS
66755: PUSH
66756: LD_INT 2
66758: DIV
66759: ST_TO_ADDR
// if _y < 0 then
66760: LD_VAR 0 7
66764: PUSH
66765: LD_INT 0
66767: LESS
66768: IFFALSE 66785
// _y := _y * - 1 ;
66770: LD_ADDR_VAR 0 7
66774: PUSH
66775: LD_VAR 0 7
66779: PUSH
66780: LD_INT 1
66782: NEG
66783: MUL
66784: ST_TO_ADDR
// result := [ _x , _y ] ;
66785: LD_ADDR_VAR 0 5
66789: PUSH
66790: LD_VAR 0 6
66794: PUSH
66795: LD_VAR 0 7
66799: PUSH
66800: EMPTY
66801: LIST
66802: LIST
66803: ST_TO_ADDR
// end ;
66804: LD_VAR 0 5
66808: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
66809: LD_INT 0
66811: PPUSH
66812: PPUSH
66813: PPUSH
66814: PPUSH
// task := GetTaskList ( unit ) ;
66815: LD_ADDR_VAR 0 7
66819: PUSH
66820: LD_VAR 0 1
66824: PPUSH
66825: CALL_OW 437
66829: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
66830: LD_VAR 0 7
66834: NOT
66835: PUSH
66836: LD_VAR 0 1
66840: PPUSH
66841: LD_VAR 0 2
66845: PPUSH
66846: CALL_OW 308
66850: NOT
66851: AND
66852: IFFALSE 66856
// exit ;
66854: GO 66974
// if IsInArea ( unit , area ) then
66856: LD_VAR 0 1
66860: PPUSH
66861: LD_VAR 0 2
66865: PPUSH
66866: CALL_OW 308
66870: IFFALSE 66888
// begin ComMoveToArea ( unit , goAway ) ;
66872: LD_VAR 0 1
66876: PPUSH
66877: LD_VAR 0 3
66881: PPUSH
66882: CALL_OW 113
// exit ;
66886: GO 66974
// end ; if task [ 1 ] [ 1 ] <> M then
66888: LD_VAR 0 7
66892: PUSH
66893: LD_INT 1
66895: ARRAY
66896: PUSH
66897: LD_INT 1
66899: ARRAY
66900: PUSH
66901: LD_STRING M
66903: NONEQUAL
66904: IFFALSE 66908
// exit ;
66906: GO 66974
// x := task [ 1 ] [ 2 ] ;
66908: LD_ADDR_VAR 0 5
66912: PUSH
66913: LD_VAR 0 7
66917: PUSH
66918: LD_INT 1
66920: ARRAY
66921: PUSH
66922: LD_INT 2
66924: ARRAY
66925: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
66926: LD_ADDR_VAR 0 6
66930: PUSH
66931: LD_VAR 0 7
66935: PUSH
66936: LD_INT 1
66938: ARRAY
66939: PUSH
66940: LD_INT 3
66942: ARRAY
66943: ST_TO_ADDR
// if InArea ( x , y , area ) then
66944: LD_VAR 0 5
66948: PPUSH
66949: LD_VAR 0 6
66953: PPUSH
66954: LD_VAR 0 2
66958: PPUSH
66959: CALL_OW 309
66963: IFFALSE 66974
// ComStop ( unit ) ;
66965: LD_VAR 0 1
66969: PPUSH
66970: CALL_OW 141
// end ;
66974: LD_VAR 0 4
66978: RET
// export function Abs ( value ) ; begin
66979: LD_INT 0
66981: PPUSH
// result := value ;
66982: LD_ADDR_VAR 0 2
66986: PUSH
66987: LD_VAR 0 1
66991: ST_TO_ADDR
// if value < 0 then
66992: LD_VAR 0 1
66996: PUSH
66997: LD_INT 0
66999: LESS
67000: IFFALSE 67017
// result := value * - 1 ;
67002: LD_ADDR_VAR 0 2
67006: PUSH
67007: LD_VAR 0 1
67011: PUSH
67012: LD_INT 1
67014: NEG
67015: MUL
67016: ST_TO_ADDR
// end ;
67017: LD_VAR 0 2
67021: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
67022: LD_INT 0
67024: PPUSH
67025: PPUSH
67026: PPUSH
67027: PPUSH
67028: PPUSH
67029: PPUSH
67030: PPUSH
67031: PPUSH
// if not unit or not building then
67032: LD_VAR 0 1
67036: NOT
67037: PUSH
67038: LD_VAR 0 2
67042: NOT
67043: OR
67044: IFFALSE 67048
// exit ;
67046: GO 67274
// x := GetX ( building ) ;
67048: LD_ADDR_VAR 0 4
67052: PUSH
67053: LD_VAR 0 2
67057: PPUSH
67058: CALL_OW 250
67062: ST_TO_ADDR
// y := GetY ( building ) ;
67063: LD_ADDR_VAR 0 6
67067: PUSH
67068: LD_VAR 0 2
67072: PPUSH
67073: CALL_OW 251
67077: ST_TO_ADDR
// d := GetDir ( building ) ;
67078: LD_ADDR_VAR 0 8
67082: PUSH
67083: LD_VAR 0 2
67087: PPUSH
67088: CALL_OW 254
67092: ST_TO_ADDR
// r := 4 ;
67093: LD_ADDR_VAR 0 9
67097: PUSH
67098: LD_INT 4
67100: ST_TO_ADDR
// for i := 1 to 5 do
67101: LD_ADDR_VAR 0 10
67105: PUSH
67106: DOUBLE
67107: LD_INT 1
67109: DEC
67110: ST_TO_ADDR
67111: LD_INT 5
67113: PUSH
67114: FOR_TO
67115: IFFALSE 67272
// begin _x := ShiftX ( x , d , r + i ) ;
67117: LD_ADDR_VAR 0 5
67121: PUSH
67122: LD_VAR 0 4
67126: PPUSH
67127: LD_VAR 0 8
67131: PPUSH
67132: LD_VAR 0 9
67136: PUSH
67137: LD_VAR 0 10
67141: PLUS
67142: PPUSH
67143: CALL_OW 272
67147: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
67148: LD_ADDR_VAR 0 7
67152: PUSH
67153: LD_VAR 0 6
67157: PPUSH
67158: LD_VAR 0 8
67162: PPUSH
67163: LD_VAR 0 9
67167: PUSH
67168: LD_VAR 0 10
67172: PLUS
67173: PPUSH
67174: CALL_OW 273
67178: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
67179: LD_VAR 0 5
67183: PPUSH
67184: LD_VAR 0 7
67188: PPUSH
67189: CALL_OW 488
67193: PUSH
67194: LD_VAR 0 5
67198: PPUSH
67199: LD_VAR 0 7
67203: PPUSH
67204: CALL_OW 428
67208: PPUSH
67209: CALL_OW 247
67213: PUSH
67214: LD_INT 3
67216: PUSH
67217: LD_INT 2
67219: PUSH
67220: EMPTY
67221: LIST
67222: LIST
67223: IN
67224: NOT
67225: AND
67226: IFFALSE 67270
// begin ComMoveXY ( unit , _x , _y ) ;
67228: LD_VAR 0 1
67232: PPUSH
67233: LD_VAR 0 5
67237: PPUSH
67238: LD_VAR 0 7
67242: PPUSH
67243: CALL_OW 111
// result := [ _x , _y ] ;
67247: LD_ADDR_VAR 0 3
67251: PUSH
67252: LD_VAR 0 5
67256: PUSH
67257: LD_VAR 0 7
67261: PUSH
67262: EMPTY
67263: LIST
67264: LIST
67265: ST_TO_ADDR
// exit ;
67266: POP
67267: POP
67268: GO 67274
// end ; end ;
67270: GO 67114
67272: POP
67273: POP
// end ;
67274: LD_VAR 0 3
67278: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
67279: LD_INT 0
67281: PPUSH
67282: PPUSH
67283: PPUSH
// result := 0 ;
67284: LD_ADDR_VAR 0 3
67288: PUSH
67289: LD_INT 0
67291: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
67292: LD_VAR 0 1
67296: PUSH
67297: LD_INT 0
67299: LESS
67300: PUSH
67301: LD_VAR 0 1
67305: PUSH
67306: LD_INT 8
67308: GREATER
67309: OR
67310: PUSH
67311: LD_VAR 0 2
67315: PUSH
67316: LD_INT 0
67318: LESS
67319: OR
67320: PUSH
67321: LD_VAR 0 2
67325: PUSH
67326: LD_INT 8
67328: GREATER
67329: OR
67330: IFFALSE 67334
// exit ;
67332: GO 67409
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
67334: LD_ADDR_VAR 0 4
67338: PUSH
67339: LD_INT 22
67341: PUSH
67342: LD_VAR 0 2
67346: PUSH
67347: EMPTY
67348: LIST
67349: LIST
67350: PPUSH
67351: CALL_OW 69
67355: PUSH
67356: FOR_IN
67357: IFFALSE 67407
// begin un := UnitShoot ( i ) ;
67359: LD_ADDR_VAR 0 5
67363: PUSH
67364: LD_VAR 0 4
67368: PPUSH
67369: CALL_OW 504
67373: ST_TO_ADDR
// if GetSide ( un ) = side1 then
67374: LD_VAR 0 5
67378: PPUSH
67379: CALL_OW 255
67383: PUSH
67384: LD_VAR 0 1
67388: EQUAL
67389: IFFALSE 67405
// begin result := un ;
67391: LD_ADDR_VAR 0 3
67395: PUSH
67396: LD_VAR 0 5
67400: ST_TO_ADDR
// exit ;
67401: POP
67402: POP
67403: GO 67409
// end ; end ;
67405: GO 67356
67407: POP
67408: POP
// end ;
67409: LD_VAR 0 3
67413: RET
// export function GetCargoBay ( units ) ; begin
67414: LD_INT 0
67416: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
67417: LD_ADDR_VAR 0 2
67421: PUSH
67422: LD_VAR 0 1
67426: PPUSH
67427: LD_INT 2
67429: PUSH
67430: LD_INT 34
67432: PUSH
67433: LD_INT 12
67435: PUSH
67436: EMPTY
67437: LIST
67438: LIST
67439: PUSH
67440: LD_INT 34
67442: PUSH
67443: LD_INT 51
67445: PUSH
67446: EMPTY
67447: LIST
67448: LIST
67449: PUSH
67450: LD_INT 34
67452: PUSH
67453: LD_INT 32
67455: PUSH
67456: EMPTY
67457: LIST
67458: LIST
67459: PUSH
67460: LD_INT 34
67462: PUSH
67463: LD_EXP 53
67467: PUSH
67468: EMPTY
67469: LIST
67470: LIST
67471: PUSH
67472: EMPTY
67473: LIST
67474: LIST
67475: LIST
67476: LIST
67477: LIST
67478: PPUSH
67479: CALL_OW 72
67483: ST_TO_ADDR
// end ;
67484: LD_VAR 0 2
67488: RET
// export function Negate ( value ) ; begin
67489: LD_INT 0
67491: PPUSH
// result := not value ;
67492: LD_ADDR_VAR 0 2
67496: PUSH
67497: LD_VAR 0 1
67501: NOT
67502: ST_TO_ADDR
// end ;
67503: LD_VAR 0 2
67507: RET
// export function Inc ( value ) ; begin
67508: LD_INT 0
67510: PPUSH
// result := value + 1 ;
67511: LD_ADDR_VAR 0 2
67515: PUSH
67516: LD_VAR 0 1
67520: PUSH
67521: LD_INT 1
67523: PLUS
67524: ST_TO_ADDR
// end ;
67525: LD_VAR 0 2
67529: RET
// export function Dec ( value ) ; begin
67530: LD_INT 0
67532: PPUSH
// result := value - 1 ;
67533: LD_ADDR_VAR 0 2
67537: PUSH
67538: LD_VAR 0 1
67542: PUSH
67543: LD_INT 1
67545: MINUS
67546: ST_TO_ADDR
// end ;
67547: LD_VAR 0 2
67551: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
67552: LD_INT 0
67554: PPUSH
67555: PPUSH
67556: PPUSH
67557: PPUSH
67558: PPUSH
67559: PPUSH
67560: PPUSH
67561: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
67562: LD_VAR 0 1
67566: PPUSH
67567: LD_VAR 0 2
67571: PPUSH
67572: CALL_OW 488
67576: NOT
67577: PUSH
67578: LD_VAR 0 3
67582: PPUSH
67583: LD_VAR 0 4
67587: PPUSH
67588: CALL_OW 488
67592: NOT
67593: OR
67594: IFFALSE 67607
// begin result := - 1 ;
67596: LD_ADDR_VAR 0 5
67600: PUSH
67601: LD_INT 1
67603: NEG
67604: ST_TO_ADDR
// exit ;
67605: GO 67842
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
67607: LD_ADDR_VAR 0 12
67611: PUSH
67612: LD_VAR 0 1
67616: PPUSH
67617: LD_VAR 0 2
67621: PPUSH
67622: LD_VAR 0 3
67626: PPUSH
67627: LD_VAR 0 4
67631: PPUSH
67632: CALL 66690 0 4
67636: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
67637: LD_ADDR_VAR 0 11
67641: PUSH
67642: LD_VAR 0 1
67646: PPUSH
67647: LD_VAR 0 2
67651: PPUSH
67652: LD_VAR 0 12
67656: PUSH
67657: LD_INT 1
67659: ARRAY
67660: PPUSH
67661: LD_VAR 0 12
67665: PUSH
67666: LD_INT 2
67668: ARRAY
67669: PPUSH
67670: CALL_OW 298
67674: ST_TO_ADDR
// distance := 9999 ;
67675: LD_ADDR_VAR 0 10
67679: PUSH
67680: LD_INT 9999
67682: ST_TO_ADDR
// for i := 0 to 5 do
67683: LD_ADDR_VAR 0 6
67687: PUSH
67688: DOUBLE
67689: LD_INT 0
67691: DEC
67692: ST_TO_ADDR
67693: LD_INT 5
67695: PUSH
67696: FOR_TO
67697: IFFALSE 67840
// begin _x := ShiftX ( x1 , i , centerDist ) ;
67699: LD_ADDR_VAR 0 7
67703: PUSH
67704: LD_VAR 0 1
67708: PPUSH
67709: LD_VAR 0 6
67713: PPUSH
67714: LD_VAR 0 11
67718: PPUSH
67719: CALL_OW 272
67723: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
67724: LD_ADDR_VAR 0 8
67728: PUSH
67729: LD_VAR 0 2
67733: PPUSH
67734: LD_VAR 0 6
67738: PPUSH
67739: LD_VAR 0 11
67743: PPUSH
67744: CALL_OW 273
67748: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
67749: LD_VAR 0 7
67753: PPUSH
67754: LD_VAR 0 8
67758: PPUSH
67759: CALL_OW 488
67763: NOT
67764: IFFALSE 67768
// continue ;
67766: GO 67696
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
67768: LD_ADDR_VAR 0 9
67772: PUSH
67773: LD_VAR 0 12
67777: PUSH
67778: LD_INT 1
67780: ARRAY
67781: PPUSH
67782: LD_VAR 0 12
67786: PUSH
67787: LD_INT 2
67789: ARRAY
67790: PPUSH
67791: LD_VAR 0 7
67795: PPUSH
67796: LD_VAR 0 8
67800: PPUSH
67801: CALL_OW 298
67805: ST_TO_ADDR
// if tmp < distance then
67806: LD_VAR 0 9
67810: PUSH
67811: LD_VAR 0 10
67815: LESS
67816: IFFALSE 67838
// begin result := i ;
67818: LD_ADDR_VAR 0 5
67822: PUSH
67823: LD_VAR 0 6
67827: ST_TO_ADDR
// distance := tmp ;
67828: LD_ADDR_VAR 0 10
67832: PUSH
67833: LD_VAR 0 9
67837: ST_TO_ADDR
// end ; end ;
67838: GO 67696
67840: POP
67841: POP
// end ;
67842: LD_VAR 0 5
67846: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
67847: LD_INT 0
67849: PPUSH
67850: PPUSH
// if not driver or not IsInUnit ( driver ) then
67851: LD_VAR 0 1
67855: NOT
67856: PUSH
67857: LD_VAR 0 1
67861: PPUSH
67862: CALL_OW 310
67866: NOT
67867: OR
67868: IFFALSE 67872
// exit ;
67870: GO 67962
// vehicle := IsInUnit ( driver ) ;
67872: LD_ADDR_VAR 0 3
67876: PUSH
67877: LD_VAR 0 1
67881: PPUSH
67882: CALL_OW 310
67886: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
67887: LD_VAR 0 1
67891: PPUSH
67892: LD_STRING \
67894: PUSH
67895: LD_INT 0
67897: PUSH
67898: LD_INT 0
67900: PUSH
67901: LD_INT 0
67903: PUSH
67904: LD_INT 0
67906: PUSH
67907: LD_INT 0
67909: PUSH
67910: LD_INT 0
67912: PUSH
67913: EMPTY
67914: LIST
67915: LIST
67916: LIST
67917: LIST
67918: LIST
67919: LIST
67920: LIST
67921: PUSH
67922: LD_STRING E
67924: PUSH
67925: LD_INT 0
67927: PUSH
67928: LD_INT 0
67930: PUSH
67931: LD_VAR 0 3
67935: PUSH
67936: LD_INT 0
67938: PUSH
67939: LD_INT 0
67941: PUSH
67942: LD_INT 0
67944: PUSH
67945: EMPTY
67946: LIST
67947: LIST
67948: LIST
67949: LIST
67950: LIST
67951: LIST
67952: LIST
67953: PUSH
67954: EMPTY
67955: LIST
67956: LIST
67957: PPUSH
67958: CALL_OW 446
// end ;
67962: LD_VAR 0 2
67966: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
67967: LD_INT 0
67969: PPUSH
67970: PPUSH
// if not driver or not IsInUnit ( driver ) then
67971: LD_VAR 0 1
67975: NOT
67976: PUSH
67977: LD_VAR 0 1
67981: PPUSH
67982: CALL_OW 310
67986: NOT
67987: OR
67988: IFFALSE 67992
// exit ;
67990: GO 68082
// vehicle := IsInUnit ( driver ) ;
67992: LD_ADDR_VAR 0 3
67996: PUSH
67997: LD_VAR 0 1
68001: PPUSH
68002: CALL_OW 310
68006: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
68007: LD_VAR 0 1
68011: PPUSH
68012: LD_STRING \
68014: PUSH
68015: LD_INT 0
68017: PUSH
68018: LD_INT 0
68020: PUSH
68021: LD_INT 0
68023: PUSH
68024: LD_INT 0
68026: PUSH
68027: LD_INT 0
68029: PUSH
68030: LD_INT 0
68032: PUSH
68033: EMPTY
68034: LIST
68035: LIST
68036: LIST
68037: LIST
68038: LIST
68039: LIST
68040: LIST
68041: PUSH
68042: LD_STRING E
68044: PUSH
68045: LD_INT 0
68047: PUSH
68048: LD_INT 0
68050: PUSH
68051: LD_VAR 0 3
68055: PUSH
68056: LD_INT 0
68058: PUSH
68059: LD_INT 0
68061: PUSH
68062: LD_INT 0
68064: PUSH
68065: EMPTY
68066: LIST
68067: LIST
68068: LIST
68069: LIST
68070: LIST
68071: LIST
68072: LIST
68073: PUSH
68074: EMPTY
68075: LIST
68076: LIST
68077: PPUSH
68078: CALL_OW 447
// end ;
68082: LD_VAR 0 2
68086: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
68087: LD_INT 0
68089: PPUSH
68090: PPUSH
68091: PPUSH
// tmp := [ ] ;
68092: LD_ADDR_VAR 0 5
68096: PUSH
68097: EMPTY
68098: ST_TO_ADDR
// for i in units do
68099: LD_ADDR_VAR 0 4
68103: PUSH
68104: LD_VAR 0 1
68108: PUSH
68109: FOR_IN
68110: IFFALSE 68148
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
68112: LD_ADDR_VAR 0 5
68116: PUSH
68117: LD_VAR 0 5
68121: PPUSH
68122: LD_VAR 0 5
68126: PUSH
68127: LD_INT 1
68129: PLUS
68130: PPUSH
68131: LD_VAR 0 4
68135: PPUSH
68136: CALL_OW 256
68140: PPUSH
68141: CALL_OW 2
68145: ST_TO_ADDR
68146: GO 68109
68148: POP
68149: POP
// if not tmp then
68150: LD_VAR 0 5
68154: NOT
68155: IFFALSE 68159
// exit ;
68157: GO 68207
// if asc then
68159: LD_VAR 0 2
68163: IFFALSE 68187
// result := SortListByListAsc ( units , tmp ) else
68165: LD_ADDR_VAR 0 3
68169: PUSH
68170: LD_VAR 0 1
68174: PPUSH
68175: LD_VAR 0 5
68179: PPUSH
68180: CALL_OW 76
68184: ST_TO_ADDR
68185: GO 68207
// result := SortListByListDesc ( units , tmp ) ;
68187: LD_ADDR_VAR 0 3
68191: PUSH
68192: LD_VAR 0 1
68196: PPUSH
68197: LD_VAR 0 5
68201: PPUSH
68202: CALL_OW 77
68206: ST_TO_ADDR
// end ;
68207: LD_VAR 0 3
68211: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
68212: LD_INT 0
68214: PPUSH
68215: PPUSH
// task := GetTaskList ( mech ) ;
68216: LD_ADDR_VAR 0 4
68220: PUSH
68221: LD_VAR 0 1
68225: PPUSH
68226: CALL_OW 437
68230: ST_TO_ADDR
// if not task then
68231: LD_VAR 0 4
68235: NOT
68236: IFFALSE 68240
// exit ;
68238: GO 68282
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
68240: LD_ADDR_VAR 0 3
68244: PUSH
68245: LD_VAR 0 4
68249: PUSH
68250: LD_INT 1
68252: ARRAY
68253: PUSH
68254: LD_INT 1
68256: ARRAY
68257: PUSH
68258: LD_STRING r
68260: EQUAL
68261: PUSH
68262: LD_VAR 0 4
68266: PUSH
68267: LD_INT 1
68269: ARRAY
68270: PUSH
68271: LD_INT 4
68273: ARRAY
68274: PUSH
68275: LD_VAR 0 2
68279: EQUAL
68280: AND
68281: ST_TO_ADDR
// end ;
68282: LD_VAR 0 3
68286: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
68287: LD_INT 0
68289: PPUSH
// SetDir ( unit , d ) ;
68290: LD_VAR 0 1
68294: PPUSH
68295: LD_VAR 0 4
68299: PPUSH
68300: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
68304: LD_VAR 0 1
68308: PPUSH
68309: LD_VAR 0 2
68313: PPUSH
68314: LD_VAR 0 3
68318: PPUSH
68319: LD_VAR 0 5
68323: PPUSH
68324: CALL_OW 48
// end ;
68328: LD_VAR 0 6
68332: RET
// export function ToNaturalNumber ( number ) ; begin
68333: LD_INT 0
68335: PPUSH
// result := number div 1 ;
68336: LD_ADDR_VAR 0 2
68340: PUSH
68341: LD_VAR 0 1
68345: PUSH
68346: LD_INT 1
68348: DIV
68349: ST_TO_ADDR
// if number < 0 then
68350: LD_VAR 0 1
68354: PUSH
68355: LD_INT 0
68357: LESS
68358: IFFALSE 68368
// result := 0 ;
68360: LD_ADDR_VAR 0 2
68364: PUSH
68365: LD_INT 0
68367: ST_TO_ADDR
// end ;
68368: LD_VAR 0 2
68372: RET
// export function SortByClass ( units , class ) ; var un ; begin
68373: LD_INT 0
68375: PPUSH
68376: PPUSH
// if not units or not class then
68377: LD_VAR 0 1
68381: NOT
68382: PUSH
68383: LD_VAR 0 2
68387: NOT
68388: OR
68389: IFFALSE 68393
// exit ;
68391: GO 68488
// result := [ ] ;
68393: LD_ADDR_VAR 0 3
68397: PUSH
68398: EMPTY
68399: ST_TO_ADDR
// for un in units do
68400: LD_ADDR_VAR 0 4
68404: PUSH
68405: LD_VAR 0 1
68409: PUSH
68410: FOR_IN
68411: IFFALSE 68486
// if GetClass ( un ) = class then
68413: LD_VAR 0 4
68417: PPUSH
68418: CALL_OW 257
68422: PUSH
68423: LD_VAR 0 2
68427: EQUAL
68428: IFFALSE 68455
// result := Insert ( result , 1 , un ) else
68430: LD_ADDR_VAR 0 3
68434: PUSH
68435: LD_VAR 0 3
68439: PPUSH
68440: LD_INT 1
68442: PPUSH
68443: LD_VAR 0 4
68447: PPUSH
68448: CALL_OW 2
68452: ST_TO_ADDR
68453: GO 68484
// result := Replace ( result , result + 1 , un ) ;
68455: LD_ADDR_VAR 0 3
68459: PUSH
68460: LD_VAR 0 3
68464: PPUSH
68465: LD_VAR 0 3
68469: PUSH
68470: LD_INT 1
68472: PLUS
68473: PPUSH
68474: LD_VAR 0 4
68478: PPUSH
68479: CALL_OW 1
68483: ST_TO_ADDR
68484: GO 68410
68486: POP
68487: POP
// end ;
68488: LD_VAR 0 3
68492: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
68493: LD_INT 0
68495: PPUSH
68496: PPUSH
68497: PPUSH
68498: PPUSH
68499: PPUSH
68500: PPUSH
68501: PPUSH
// result := [ ] ;
68502: LD_ADDR_VAR 0 4
68506: PUSH
68507: EMPTY
68508: ST_TO_ADDR
// if x - r < 0 then
68509: LD_VAR 0 1
68513: PUSH
68514: LD_VAR 0 3
68518: MINUS
68519: PUSH
68520: LD_INT 0
68522: LESS
68523: IFFALSE 68535
// min_x := 0 else
68525: LD_ADDR_VAR 0 8
68529: PUSH
68530: LD_INT 0
68532: ST_TO_ADDR
68533: GO 68551
// min_x := x - r ;
68535: LD_ADDR_VAR 0 8
68539: PUSH
68540: LD_VAR 0 1
68544: PUSH
68545: LD_VAR 0 3
68549: MINUS
68550: ST_TO_ADDR
// if y - r < 0 then
68551: LD_VAR 0 2
68555: PUSH
68556: LD_VAR 0 3
68560: MINUS
68561: PUSH
68562: LD_INT 0
68564: LESS
68565: IFFALSE 68577
// min_y := 0 else
68567: LD_ADDR_VAR 0 7
68571: PUSH
68572: LD_INT 0
68574: ST_TO_ADDR
68575: GO 68593
// min_y := y - r ;
68577: LD_ADDR_VAR 0 7
68581: PUSH
68582: LD_VAR 0 2
68586: PUSH
68587: LD_VAR 0 3
68591: MINUS
68592: ST_TO_ADDR
// max_x := x + r ;
68593: LD_ADDR_VAR 0 9
68597: PUSH
68598: LD_VAR 0 1
68602: PUSH
68603: LD_VAR 0 3
68607: PLUS
68608: ST_TO_ADDR
// max_y := y + r ;
68609: LD_ADDR_VAR 0 10
68613: PUSH
68614: LD_VAR 0 2
68618: PUSH
68619: LD_VAR 0 3
68623: PLUS
68624: ST_TO_ADDR
// for _x = min_x to max_x do
68625: LD_ADDR_VAR 0 5
68629: PUSH
68630: DOUBLE
68631: LD_VAR 0 8
68635: DEC
68636: ST_TO_ADDR
68637: LD_VAR 0 9
68641: PUSH
68642: FOR_TO
68643: IFFALSE 68744
// for _y = min_y to max_y do
68645: LD_ADDR_VAR 0 6
68649: PUSH
68650: DOUBLE
68651: LD_VAR 0 7
68655: DEC
68656: ST_TO_ADDR
68657: LD_VAR 0 10
68661: PUSH
68662: FOR_TO
68663: IFFALSE 68740
// begin if not ValidHex ( _x , _y ) then
68665: LD_VAR 0 5
68669: PPUSH
68670: LD_VAR 0 6
68674: PPUSH
68675: CALL_OW 488
68679: NOT
68680: IFFALSE 68684
// continue ;
68682: GO 68662
// if GetResourceTypeXY ( _x , _y ) then
68684: LD_VAR 0 5
68688: PPUSH
68689: LD_VAR 0 6
68693: PPUSH
68694: CALL_OW 283
68698: IFFALSE 68738
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
68700: LD_ADDR_VAR 0 4
68704: PUSH
68705: LD_VAR 0 4
68709: PPUSH
68710: LD_VAR 0 4
68714: PUSH
68715: LD_INT 1
68717: PLUS
68718: PPUSH
68719: LD_VAR 0 5
68723: PUSH
68724: LD_VAR 0 6
68728: PUSH
68729: EMPTY
68730: LIST
68731: LIST
68732: PPUSH
68733: CALL_OW 1
68737: ST_TO_ADDR
// end ;
68738: GO 68662
68740: POP
68741: POP
68742: GO 68642
68744: POP
68745: POP
// end ;
68746: LD_VAR 0 4
68750: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
68751: LD_INT 0
68753: PPUSH
68754: PPUSH
68755: PPUSH
68756: PPUSH
68757: PPUSH
68758: PPUSH
68759: PPUSH
68760: PPUSH
// if not units then
68761: LD_VAR 0 1
68765: NOT
68766: IFFALSE 68770
// exit ;
68768: GO 69296
// result := UnitFilter ( units , [ f_ok ] ) ;
68770: LD_ADDR_VAR 0 3
68774: PUSH
68775: LD_VAR 0 1
68779: PPUSH
68780: LD_INT 50
68782: PUSH
68783: EMPTY
68784: LIST
68785: PPUSH
68786: CALL_OW 72
68790: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
68791: LD_ADDR_VAR 0 8
68795: PUSH
68796: LD_VAR 0 1
68800: PUSH
68801: LD_INT 1
68803: ARRAY
68804: PPUSH
68805: CALL_OW 255
68809: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
68810: LD_ADDR_VAR 0 10
68814: PUSH
68815: LD_INT 29
68817: PUSH
68818: LD_EXP 56
68822: PUSH
68823: LD_INT 49
68825: PUSH
68826: EMPTY
68827: LIST
68828: LIST
68829: LIST
68830: ST_TO_ADDR
// if not result then
68831: LD_VAR 0 3
68835: NOT
68836: IFFALSE 68840
// exit ;
68838: GO 69296
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
68840: LD_ADDR_VAR 0 5
68844: PUSH
68845: LD_INT 81
68847: PUSH
68848: LD_VAR 0 8
68852: PUSH
68853: EMPTY
68854: LIST
68855: LIST
68856: PPUSH
68857: CALL_OW 69
68861: ST_TO_ADDR
// for i in result do
68862: LD_ADDR_VAR 0 4
68866: PUSH
68867: LD_VAR 0 3
68871: PUSH
68872: FOR_IN
68873: IFFALSE 69294
// begin tag := GetTag ( i ) + 1 ;
68875: LD_ADDR_VAR 0 9
68879: PUSH
68880: LD_VAR 0 4
68884: PPUSH
68885: CALL_OW 110
68889: PUSH
68890: LD_INT 1
68892: PLUS
68893: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
68894: LD_ADDR_VAR 0 7
68898: PUSH
68899: LD_VAR 0 4
68903: PPUSH
68904: CALL_OW 250
68908: PPUSH
68909: LD_VAR 0 4
68913: PPUSH
68914: CALL_OW 251
68918: PPUSH
68919: LD_INT 6
68921: PPUSH
68922: CALL 68493 0 3
68926: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
68927: LD_VAR 0 4
68931: PPUSH
68932: CALL_OW 247
68936: PUSH
68937: LD_INT 2
68939: EQUAL
68940: PUSH
68941: LD_VAR 0 7
68945: AND
68946: PUSH
68947: LD_VAR 0 4
68951: PPUSH
68952: CALL_OW 264
68956: PUSH
68957: LD_VAR 0 10
68961: IN
68962: NOT
68963: AND
68964: IFFALSE 69003
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
68966: LD_VAR 0 4
68970: PPUSH
68971: LD_VAR 0 7
68975: PUSH
68976: LD_INT 1
68978: ARRAY
68979: PUSH
68980: LD_INT 1
68982: ARRAY
68983: PPUSH
68984: LD_VAR 0 7
68988: PUSH
68989: LD_INT 1
68991: ARRAY
68992: PUSH
68993: LD_INT 2
68995: ARRAY
68996: PPUSH
68997: CALL_OW 116
69001: GO 69292
// if path > tag then
69003: LD_VAR 0 2
69007: PUSH
69008: LD_VAR 0 9
69012: GREATER
69013: IFFALSE 69221
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
69015: LD_ADDR_VAR 0 6
69019: PUSH
69020: LD_VAR 0 5
69024: PPUSH
69025: LD_INT 91
69027: PUSH
69028: LD_VAR 0 4
69032: PUSH
69033: LD_INT 8
69035: PUSH
69036: EMPTY
69037: LIST
69038: LIST
69039: LIST
69040: PPUSH
69041: CALL_OW 72
69045: ST_TO_ADDR
// if nearEnemy then
69046: LD_VAR 0 6
69050: IFFALSE 69119
// begin if GetWeapon ( i ) = ru_time_lapser then
69052: LD_VAR 0 4
69056: PPUSH
69057: CALL_OW 264
69061: PUSH
69062: LD_INT 49
69064: EQUAL
69065: IFFALSE 69093
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
69067: LD_VAR 0 4
69071: PPUSH
69072: LD_VAR 0 6
69076: PPUSH
69077: LD_VAR 0 4
69081: PPUSH
69082: CALL_OW 74
69086: PPUSH
69087: CALL_OW 112
69091: GO 69117
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
69093: LD_VAR 0 4
69097: PPUSH
69098: LD_VAR 0 6
69102: PPUSH
69103: LD_VAR 0 4
69107: PPUSH
69108: CALL_OW 74
69112: PPUSH
69113: CALL_OW 115
// end else
69117: GO 69219
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
69119: LD_VAR 0 4
69123: PPUSH
69124: LD_VAR 0 2
69128: PUSH
69129: LD_VAR 0 9
69133: ARRAY
69134: PUSH
69135: LD_INT 1
69137: ARRAY
69138: PPUSH
69139: LD_VAR 0 2
69143: PUSH
69144: LD_VAR 0 9
69148: ARRAY
69149: PUSH
69150: LD_INT 2
69152: ARRAY
69153: PPUSH
69154: CALL_OW 297
69158: PUSH
69159: LD_INT 6
69161: GREATER
69162: IFFALSE 69205
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
69164: LD_VAR 0 4
69168: PPUSH
69169: LD_VAR 0 2
69173: PUSH
69174: LD_VAR 0 9
69178: ARRAY
69179: PUSH
69180: LD_INT 1
69182: ARRAY
69183: PPUSH
69184: LD_VAR 0 2
69188: PUSH
69189: LD_VAR 0 9
69193: ARRAY
69194: PUSH
69195: LD_INT 2
69197: ARRAY
69198: PPUSH
69199: CALL_OW 114
69203: GO 69219
// SetTag ( i , tag ) ;
69205: LD_VAR 0 4
69209: PPUSH
69210: LD_VAR 0 9
69214: PPUSH
69215: CALL_OW 109
// end else
69219: GO 69292
// if enemy then
69221: LD_VAR 0 5
69225: IFFALSE 69292
// begin if GetWeapon ( i ) = ru_time_lapser then
69227: LD_VAR 0 4
69231: PPUSH
69232: CALL_OW 264
69236: PUSH
69237: LD_INT 49
69239: EQUAL
69240: IFFALSE 69268
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
69242: LD_VAR 0 4
69246: PPUSH
69247: LD_VAR 0 5
69251: PPUSH
69252: LD_VAR 0 4
69256: PPUSH
69257: CALL_OW 74
69261: PPUSH
69262: CALL_OW 112
69266: GO 69292
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
69268: LD_VAR 0 4
69272: PPUSH
69273: LD_VAR 0 5
69277: PPUSH
69278: LD_VAR 0 4
69282: PPUSH
69283: CALL_OW 74
69287: PPUSH
69288: CALL_OW 115
// end ; end ;
69292: GO 68872
69294: POP
69295: POP
// end ;
69296: LD_VAR 0 3
69300: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
69301: LD_INT 0
69303: PPUSH
69304: PPUSH
69305: PPUSH
// if not unit or IsInUnit ( unit ) then
69306: LD_VAR 0 1
69310: NOT
69311: PUSH
69312: LD_VAR 0 1
69316: PPUSH
69317: CALL_OW 310
69321: OR
69322: IFFALSE 69326
// exit ;
69324: GO 69417
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
69326: LD_ADDR_VAR 0 4
69330: PUSH
69331: LD_VAR 0 1
69335: PPUSH
69336: CALL_OW 250
69340: PPUSH
69341: LD_VAR 0 2
69345: PPUSH
69346: LD_INT 1
69348: PPUSH
69349: CALL_OW 272
69353: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
69354: LD_ADDR_VAR 0 5
69358: PUSH
69359: LD_VAR 0 1
69363: PPUSH
69364: CALL_OW 251
69368: PPUSH
69369: LD_VAR 0 2
69373: PPUSH
69374: LD_INT 1
69376: PPUSH
69377: CALL_OW 273
69381: ST_TO_ADDR
// if ValidHex ( x , y ) then
69382: LD_VAR 0 4
69386: PPUSH
69387: LD_VAR 0 5
69391: PPUSH
69392: CALL_OW 488
69396: IFFALSE 69417
// ComTurnXY ( unit , x , y ) ;
69398: LD_VAR 0 1
69402: PPUSH
69403: LD_VAR 0 4
69407: PPUSH
69408: LD_VAR 0 5
69412: PPUSH
69413: CALL_OW 118
// end ;
69417: LD_VAR 0 3
69421: RET
// export function SeeUnits ( side , units ) ; var i ; begin
69422: LD_INT 0
69424: PPUSH
69425: PPUSH
// result := false ;
69426: LD_ADDR_VAR 0 3
69430: PUSH
69431: LD_INT 0
69433: ST_TO_ADDR
// if not units then
69434: LD_VAR 0 2
69438: NOT
69439: IFFALSE 69443
// exit ;
69441: GO 69488
// for i in units do
69443: LD_ADDR_VAR 0 4
69447: PUSH
69448: LD_VAR 0 2
69452: PUSH
69453: FOR_IN
69454: IFFALSE 69486
// if See ( side , i ) then
69456: LD_VAR 0 1
69460: PPUSH
69461: LD_VAR 0 4
69465: PPUSH
69466: CALL_OW 292
69470: IFFALSE 69484
// begin result := true ;
69472: LD_ADDR_VAR 0 3
69476: PUSH
69477: LD_INT 1
69479: ST_TO_ADDR
// exit ;
69480: POP
69481: POP
69482: GO 69488
// end ;
69484: GO 69453
69486: POP
69487: POP
// end ;
69488: LD_VAR 0 3
69492: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
69493: LD_INT 0
69495: PPUSH
69496: PPUSH
69497: PPUSH
69498: PPUSH
// if not unit or not points then
69499: LD_VAR 0 1
69503: NOT
69504: PUSH
69505: LD_VAR 0 2
69509: NOT
69510: OR
69511: IFFALSE 69515
// exit ;
69513: GO 69605
// dist := 99999 ;
69515: LD_ADDR_VAR 0 5
69519: PUSH
69520: LD_INT 99999
69522: ST_TO_ADDR
// for i in points do
69523: LD_ADDR_VAR 0 4
69527: PUSH
69528: LD_VAR 0 2
69532: PUSH
69533: FOR_IN
69534: IFFALSE 69603
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
69536: LD_ADDR_VAR 0 6
69540: PUSH
69541: LD_VAR 0 1
69545: PPUSH
69546: LD_VAR 0 4
69550: PUSH
69551: LD_INT 1
69553: ARRAY
69554: PPUSH
69555: LD_VAR 0 4
69559: PUSH
69560: LD_INT 2
69562: ARRAY
69563: PPUSH
69564: CALL_OW 297
69568: ST_TO_ADDR
// if tmpDist < dist then
69569: LD_VAR 0 6
69573: PUSH
69574: LD_VAR 0 5
69578: LESS
69579: IFFALSE 69601
// begin result := i ;
69581: LD_ADDR_VAR 0 3
69585: PUSH
69586: LD_VAR 0 4
69590: ST_TO_ADDR
// dist := tmpDist ;
69591: LD_ADDR_VAR 0 5
69595: PUSH
69596: LD_VAR 0 6
69600: ST_TO_ADDR
// end ; end ;
69601: GO 69533
69603: POP
69604: POP
// end ;
69605: LD_VAR 0 3
69609: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
69610: LD_INT 0
69612: PPUSH
// uc_side := side ;
69613: LD_ADDR_OWVAR 20
69617: PUSH
69618: LD_VAR 0 1
69622: ST_TO_ADDR
// uc_nation := 3 ;
69623: LD_ADDR_OWVAR 21
69627: PUSH
69628: LD_INT 3
69630: ST_TO_ADDR
// vc_chassis := 25 ;
69631: LD_ADDR_OWVAR 37
69635: PUSH
69636: LD_INT 25
69638: ST_TO_ADDR
// vc_engine := engine_siberite ;
69639: LD_ADDR_OWVAR 39
69643: PUSH
69644: LD_INT 3
69646: ST_TO_ADDR
// vc_control := control_computer ;
69647: LD_ADDR_OWVAR 38
69651: PUSH
69652: LD_INT 3
69654: ST_TO_ADDR
// vc_weapon := 59 ;
69655: LD_ADDR_OWVAR 40
69659: PUSH
69660: LD_INT 59
69662: ST_TO_ADDR
// result := CreateVehicle ;
69663: LD_ADDR_VAR 0 5
69667: PUSH
69668: CALL_OW 45
69672: ST_TO_ADDR
// SetDir ( result , d ) ;
69673: LD_VAR 0 5
69677: PPUSH
69678: LD_VAR 0 4
69682: PPUSH
69683: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
69687: LD_VAR 0 5
69691: PPUSH
69692: LD_VAR 0 2
69696: PPUSH
69697: LD_VAR 0 3
69701: PPUSH
69702: LD_INT 0
69704: PPUSH
69705: CALL_OW 48
// end ;
69709: LD_VAR 0 5
69713: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
69714: LD_INT 0
69716: PPUSH
69717: PPUSH
69718: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
69719: LD_ADDR_VAR 0 2
69723: PUSH
69724: LD_INT 0
69726: PUSH
69727: LD_INT 0
69729: PUSH
69730: LD_INT 0
69732: PUSH
69733: LD_INT 0
69735: PUSH
69736: EMPTY
69737: LIST
69738: LIST
69739: LIST
69740: LIST
69741: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
69742: LD_VAR 0 1
69746: NOT
69747: PUSH
69748: LD_VAR 0 1
69752: PPUSH
69753: CALL_OW 264
69757: PUSH
69758: LD_INT 12
69760: PUSH
69761: LD_INT 51
69763: PUSH
69764: LD_INT 32
69766: PUSH
69767: LD_EXP 53
69771: PUSH
69772: EMPTY
69773: LIST
69774: LIST
69775: LIST
69776: LIST
69777: IN
69778: NOT
69779: OR
69780: IFFALSE 69784
// exit ;
69782: GO 69882
// for i := 1 to 3 do
69784: LD_ADDR_VAR 0 3
69788: PUSH
69789: DOUBLE
69790: LD_INT 1
69792: DEC
69793: ST_TO_ADDR
69794: LD_INT 3
69796: PUSH
69797: FOR_TO
69798: IFFALSE 69880
// begin tmp := GetCargo ( cargo , i ) ;
69800: LD_ADDR_VAR 0 4
69804: PUSH
69805: LD_VAR 0 1
69809: PPUSH
69810: LD_VAR 0 3
69814: PPUSH
69815: CALL_OW 289
69819: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
69820: LD_ADDR_VAR 0 2
69824: PUSH
69825: LD_VAR 0 2
69829: PPUSH
69830: LD_VAR 0 3
69834: PPUSH
69835: LD_VAR 0 4
69839: PPUSH
69840: CALL_OW 1
69844: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
69845: LD_ADDR_VAR 0 2
69849: PUSH
69850: LD_VAR 0 2
69854: PPUSH
69855: LD_INT 4
69857: PPUSH
69858: LD_VAR 0 2
69862: PUSH
69863: LD_INT 4
69865: ARRAY
69866: PUSH
69867: LD_VAR 0 4
69871: PLUS
69872: PPUSH
69873: CALL_OW 1
69877: ST_TO_ADDR
// end ;
69878: GO 69797
69880: POP
69881: POP
// end ;
69882: LD_VAR 0 2
69886: RET
// export function Length ( array ) ; begin
69887: LD_INT 0
69889: PPUSH
// result := array + 0 ;
69890: LD_ADDR_VAR 0 2
69894: PUSH
69895: LD_VAR 0 1
69899: PUSH
69900: LD_INT 0
69902: PLUS
69903: ST_TO_ADDR
// end ;
69904: LD_VAR 0 2
69908: RET
// export function PrepareArray ( array ) ; begin
69909: LD_INT 0
69911: PPUSH
// result := array diff 0 ;
69912: LD_ADDR_VAR 0 2
69916: PUSH
69917: LD_VAR 0 1
69921: PUSH
69922: LD_INT 0
69924: DIFF
69925: ST_TO_ADDR
// if not result [ 1 ] then
69926: LD_VAR 0 2
69930: PUSH
69931: LD_INT 1
69933: ARRAY
69934: NOT
69935: IFFALSE 69955
// result := Delete ( result , 1 ) ;
69937: LD_ADDR_VAR 0 2
69941: PUSH
69942: LD_VAR 0 2
69946: PPUSH
69947: LD_INT 1
69949: PPUSH
69950: CALL_OW 3
69954: ST_TO_ADDR
// end ; end_of_file
69955: LD_VAR 0 2
69959: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
69960: LD_VAR 0 1
69964: PUSH
69965: LD_INT 200
69967: DOUBLE
69968: GREATEREQUAL
69969: IFFALSE 69977
69971: LD_INT 299
69973: DOUBLE
69974: LESSEQUAL
69975: IFTRUE 69979
69977: GO 70011
69979: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
69980: LD_VAR 0 1
69984: PPUSH
69985: LD_VAR 0 2
69989: PPUSH
69990: LD_VAR 0 3
69994: PPUSH
69995: LD_VAR 0 4
69999: PPUSH
70000: LD_VAR 0 5
70004: PPUSH
70005: CALL 24811 0 5
70009: GO 70088
70011: LD_INT 300
70013: DOUBLE
70014: GREATEREQUAL
70015: IFFALSE 70023
70017: LD_INT 399
70019: DOUBLE
70020: LESSEQUAL
70021: IFTRUE 70025
70023: GO 70087
70025: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
70026: LD_VAR 0 1
70030: PPUSH
70031: LD_VAR 0 2
70035: PPUSH
70036: LD_VAR 0 3
70040: PPUSH
70041: LD_VAR 0 4
70045: PPUSH
70046: LD_VAR 0 5
70050: PPUSH
70051: LD_VAR 0 6
70055: PPUSH
70056: LD_VAR 0 7
70060: PPUSH
70061: LD_VAR 0 8
70065: PPUSH
70066: LD_VAR 0 9
70070: PPUSH
70071: LD_VAR 0 10
70075: PPUSH
70076: LD_VAR 0 11
70080: PPUSH
70081: CALL 21140 0 11
70085: GO 70088
70087: POP
// end ;
70088: PPOPN 11
70090: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
70091: LD_VAR 0 1
70095: PPUSH
70096: LD_VAR 0 2
70100: PPUSH
70101: LD_VAR 0 3
70105: PPUSH
70106: LD_VAR 0 4
70110: PPUSH
70111: LD_VAR 0 5
70115: PPUSH
70116: CALL 24547 0 5
// end ; end_of_file
70120: PPOPN 5
70122: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
70123: LD_VAR 0 1
70127: PPUSH
70128: LD_VAR 0 2
70132: PPUSH
70133: LD_VAR 0 3
70137: PPUSH
70138: LD_VAR 0 4
70142: PPUSH
70143: LD_VAR 0 5
70147: PPUSH
70148: LD_VAR 0 6
70152: PPUSH
70153: CALL 8833 0 6
// end ;
70157: PPOPN 6
70159: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
70160: LD_INT 0
70162: PPUSH
// begin if not units then
70163: LD_VAR 0 1
70167: NOT
70168: IFFALSE 70172
// exit ;
70170: GO 70172
// end ;
70172: PPOPN 7
70174: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
70175: CALL 8804 0 0
// end ;
70179: PPOPN 1
70181: END
