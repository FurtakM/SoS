// starting begin PrepareMap ;
   0: CALL 13 0 0
// Main_Variables ;
   4: CALL 136 0 0
// Start_Mission ;
   8: CALL 3478 0 0
// end ;
  12: END
// function PrepareMap ; begin
  13: LD_INT 0
  15: PPUSH
// ResetFog ;
  16: CALL_OW 335
// RandomizeAll ;
  20: CALL_OW 11
// game_difficulty := GetMultiplayerSetting ( 0 ) ;
  24: LD_ADDR_EXP 2
  28: PUSH
  29: LD_INT 0
  31: PPUSH
  32: CALL_OW 426
  36: ST_TO_ADDR
// Difficulty := game_difficulty ;
  37: LD_ADDR_OWVAR 67
  41: PUSH
  42: LD_EXP 2
  46: ST_TO_ADDR
// ChangeSideFog ( 8 , 6 ) ;
  47: LD_INT 8
  49: PPUSH
  50: LD_INT 6
  52: PPUSH
  53: CALL_OW 343
// PlaceSeeing ( 1 , 1 , 8 , - 37963 ) ;
  57: LD_INT 1
  59: PPUSH
  60: LD_INT 1
  62: PPUSH
  63: LD_INT 8
  65: PPUSH
  66: LD_INT 37963
  68: NEG
  69: PPUSH
  70: CALL_OW 330
// RemoveSeeing ( 1 , 1 , 8 ) ;
  74: LD_INT 1
  76: PPUSH
  77: LD_INT 1
  79: PPUSH
  80: LD_INT 8
  82: PPUSH
  83: CALL_OW 331
// PlaceCamera ;
  87: CALL 3945 0 0
// PrepareNature ( nature , 4 , 3 , 2 , 1 ) ;
  91: LD_INT 2
  93: PPUSH
  94: LD_INT 4
  96: PPUSH
  97: LD_INT 3
  99: PPUSH
 100: LD_INT 2
 102: PPUSH
 103: LD_INT 1
 105: PPUSH
 106: CALL 7878 0 5
// PrepareComm ;
 110: CALL 8361 0 0
// SetSide ( fort , 6 ) ;
 114: LD_INT 23
 116: PPUSH
 117: LD_INT 6
 119: PPUSH
 120: CALL_OW 235
// CenterNowOnUnits ( fort ) ;
 124: LD_INT 23
 126: PPUSH
 127: CALL_OW 87
// end ;
 131: LD_VAR 0 1
 135: RET
// export game_on , game_difficulty , game_time , game_option , game_end , game_strings ; export leopold , leopold_in_fort , samuel , samuel_in_fort , mortars_in_fort , scout ; export u_mine , u_fac ; export areas ; export skill ; export ar_weapons , ru_weapons , us_weapons ; export arabian_force , russian_force , american_force , arabian_timeing , russian_timeing , american_timeing ; export meeting_start , meeting_arive , meeting_break , meeting_end , meeting_time , russian_timer , fort_destroyed , hero_died , mission_time , cargo_ok , american_hchan , dezert , arabian_attack , russian_attack , american_attack , american_help , american_sib_bomb , russian_trade , heike_dialog1 , heike_dialog2 ; export am_comander , ru_comander , ar_comander ; function Main_Variables ; begin
 136: LD_INT 0
 138: PPUSH
// game_on := false ;
 139: LD_ADDR_EXP 1
 143: PUSH
 144: LD_INT 0
 146: ST_TO_ADDR
// game_time := 0 0$00 ;
 147: LD_ADDR_EXP 3
 151: PUSH
 152: LD_INT 0
 154: ST_TO_ADDR
// game_option := [ 1 ] ;
 155: LD_ADDR_EXP 4
 159: PUSH
 160: LD_INT 1
 162: PUSH
 163: EMPTY
 164: LIST
 165: ST_TO_ADDR
// game_end := false ;
 166: LD_ADDR_EXP 5
 170: PUSH
 171: LD_INT 0
 173: ST_TO_ADDR
// game_strings := [ ] ;
 174: LD_ADDR_EXP 6
 178: PUSH
 179: EMPTY
 180: ST_TO_ADDR
// game_time := 0 0$00 ;
 181: LD_ADDR_EXP 3
 185: PUSH
 186: LD_INT 0
 188: ST_TO_ADDR
// mission_time := 0 0$00 ;
 189: LD_ADDR_EXP 34
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// skill := [ 5 , 7 , 9 ] [ game_difficulty ] ;
 197: LD_ADDR_EXP 16
 201: PUSH
 202: LD_INT 5
 204: PUSH
 205: LD_INT 7
 207: PUSH
 208: LD_INT 9
 210: PUSH
 211: EMPTY
 212: LIST
 213: LIST
 214: LIST
 215: PUSH
 216: LD_EXP 2
 220: ARRAY
 221: ST_TO_ADDR
// areas := [ a_swest , a_nwest , a_neast , a_seast ] ;
 222: LD_ADDR_EXP 15
 226: PUSH
 227: LD_INT 5
 229: PUSH
 230: LD_INT 6
 232: PUSH
 233: LD_INT 7
 235: PUSH
 236: LD_INT 8
 238: PUSH
 239: EMPTY
 240: LIST
 241: LIST
 242: LIST
 243: LIST
 244: ST_TO_ADDR
// meeting_start := false ;
 245: LD_ADDR_EXP 26
 249: PUSH
 250: LD_INT 0
 252: ST_TO_ADDR
// meeting_arive := false ;
 253: LD_ADDR_EXP 27
 257: PUSH
 258: LD_INT 0
 260: ST_TO_ADDR
// meeting_break := false ;
 261: LD_ADDR_EXP 28
 265: PUSH
 266: LD_INT 0
 268: ST_TO_ADDR
// meeting_end := false ;
 269: LD_ADDR_EXP 29
 273: PUSH
 274: LD_INT 0
 276: ST_TO_ADDR
// meeting_time := [ 4 4$00 , 3 3$40 , 3 3$20 ] [ game_difficulty ] ;
 277: LD_ADDR_EXP 30
 281: PUSH
 282: LD_INT 8400
 284: PUSH
 285: LD_INT 7700
 287: PUSH
 288: LD_INT 7000
 290: PUSH
 291: EMPTY
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: LD_EXP 2
 300: ARRAY
 301: ST_TO_ADDR
// arabian_force := [ 4 , 5 , 6 ] [ game_difficulty ] ;
 302: LD_ADDR_EXP 20
 306: PUSH
 307: LD_INT 4
 309: PUSH
 310: LD_INT 5
 312: PUSH
 313: LD_INT 6
 315: PUSH
 316: EMPTY
 317: LIST
 318: LIST
 319: LIST
 320: PUSH
 321: LD_EXP 2
 325: ARRAY
 326: ST_TO_ADDR
// american_force := [ 5 , 6 , 7 ] [ game_difficulty ] ;
 327: LD_ADDR_EXP 22
 331: PUSH
 332: LD_INT 5
 334: PUSH
 335: LD_INT 6
 337: PUSH
 338: LD_INT 7
 340: PUSH
 341: EMPTY
 342: LIST
 343: LIST
 344: LIST
 345: PUSH
 346: LD_EXP 2
 350: ARRAY
 351: ST_TO_ADDR
// russian_force := [ 6 , 7 , 8 ] [ game_difficulty ] ;
 352: LD_ADDR_EXP 21
 356: PUSH
 357: LD_INT 6
 359: PUSH
 360: LD_INT 7
 362: PUSH
 363: LD_INT 8
 365: PUSH
 366: EMPTY
 367: LIST
 368: LIST
 369: LIST
 370: PUSH
 371: LD_EXP 2
 375: ARRAY
 376: ST_TO_ADDR
// u_mine := false ;
 377: LD_ADDR_EXP 13
 381: PUSH
 382: LD_INT 0
 384: ST_TO_ADDR
// u_fac := false ;
 385: LD_ADDR_EXP 14
 389: PUSH
 390: LD_INT 0
 392: ST_TO_ADDR
// leopold_in_fort := false ;
 393: LD_ADDR_EXP 8
 397: PUSH
 398: LD_INT 0
 400: ST_TO_ADDR
// samuel_in_fort := false ;
 401: LD_ADDR_EXP 10
 405: PUSH
 406: LD_INT 0
 408: ST_TO_ADDR
// mortars_in_fort := false ;
 409: LD_ADDR_EXP 11
 413: PUSH
 414: LD_INT 0
 416: ST_TO_ADDR
// fort_destroyed := false ;
 417: LD_ADDR_EXP 32
 421: PUSH
 422: LD_INT 0
 424: ST_TO_ADDR
// hero_died := false ;
 425: LD_ADDR_EXP 33
 429: PUSH
 430: LD_INT 0
 432: ST_TO_ADDR
// dezert := false ;
 433: LD_ADDR_EXP 37
 437: PUSH
 438: LD_INT 0
 440: ST_TO_ADDR
// arabian_attack := false ;
 441: LD_ADDR_EXP 38
 445: PUSH
 446: LD_INT 0
 448: ST_TO_ADDR
// russian_attack := false ;
 449: LD_ADDR_EXP 39
 453: PUSH
 454: LD_INT 0
 456: ST_TO_ADDR
// american_attack := false ;
 457: LD_ADDR_EXP 40
 461: PUSH
 462: LD_INT 0
 464: ST_TO_ADDR
// american_help := false ;
 465: LD_ADDR_EXP 41
 469: PUSH
 470: LD_INT 0
 472: ST_TO_ADDR
// american_hchan := [ 91 , 81 , 71 ] [ game_difficulty ] ;
 473: LD_ADDR_EXP 36
 477: PUSH
 478: LD_INT 91
 480: PUSH
 481: LD_INT 81
 483: PUSH
 484: LD_INT 71
 486: PUSH
 487: EMPTY
 488: LIST
 489: LIST
 490: LIST
 491: PUSH
 492: LD_EXP 2
 496: ARRAY
 497: ST_TO_ADDR
// american_sib_bomb := false ;
 498: LD_ADDR_EXP 42
 502: PUSH
 503: LD_INT 0
 505: ST_TO_ADDR
// russian_trade := false ;
 506: LD_ADDR_EXP 43
 510: PUSH
 511: LD_INT 0
 513: ST_TO_ADDR
// russian_timer := 5 5$00 ;
 514: LD_ADDR_EXP 31
 518: PUSH
 519: LD_INT 10500
 521: ST_TO_ADDR
// cargo_ok := false ;
 522: LD_ADDR_EXP 35
 526: PUSH
 527: LD_INT 0
 529: ST_TO_ADDR
// heike_dialog1 := false ;
 530: LD_ADDR_EXP 44
 534: PUSH
 535: LD_INT 0
 537: ST_TO_ADDR
// heike_dialog2 := false ;
 538: LD_ADDR_EXP 45
 542: PUSH
 543: LD_INT 0
 545: ST_TO_ADDR
// american_timeing := [ 10 10$00 , 9 9$50 , 9 9$30 ] [ game_difficulty ] ;
 546: LD_ADDR_EXP 25
 550: PUSH
 551: LD_INT 21000
 553: PUSH
 554: LD_INT 20650
 556: PUSH
 557: LD_INT 19950
 559: PUSH
 560: EMPTY
 561: LIST
 562: LIST
 563: LIST
 564: PUSH
 565: LD_EXP 2
 569: ARRAY
 570: ST_TO_ADDR
// arabian_timeing := [ 8 8$00 , 7 7$30 , 6 6$40 ] [ game_difficulty ] ;
 571: LD_ADDR_EXP 23
 575: PUSH
 576: LD_INT 16800
 578: PUSH
 579: LD_INT 15750
 581: PUSH
 582: LD_INT 14000
 584: PUSH
 585: EMPTY
 586: LIST
 587: LIST
 588: LIST
 589: PUSH
 590: LD_EXP 2
 594: ARRAY
 595: ST_TO_ADDR
// russian_timeing := [ 11 11$00 , 10 10$30 , 9 9$20 ] [ game_difficulty ] ;
 596: LD_ADDR_EXP 24
 600: PUSH
 601: LD_INT 23100
 603: PUSH
 604: LD_INT 22050
 606: PUSH
 607: LD_INT 19600
 609: PUSH
 610: EMPTY
 611: LIST
 612: LIST
 613: LIST
 614: PUSH
 615: LD_EXP 2
 619: ARRAY
 620: ST_TO_ADDR
// ar_weapons := [ ar_rocket_launcher , ar_gun , ar_flame_thrower , ar_selfpropelled_bomb , ar_bio_bomb ] ;
 621: LD_ADDR_EXP 17
 625: PUSH
 626: LD_INT 28
 628: PUSH
 629: LD_INT 27
 631: PUSH
 632: LD_INT 26
 634: PUSH
 635: LD_INT 29
 637: PUSH
 638: LD_EXP 56
 642: PUSH
 643: EMPTY
 644: LIST
 645: LIST
 646: LIST
 647: LIST
 648: LIST
 649: ST_TO_ADDR
// us_weapons := [ us_rocket_launcher , us_heavy_gun , us_double_laser , us_laser ] ;
 650: LD_ADDR_EXP 19
 654: PUSH
 655: LD_INT 7
 657: PUSH
 658: LD_INT 6
 660: PUSH
 661: LD_INT 10
 663: PUSH
 664: LD_INT 9
 666: PUSH
 667: EMPTY
 668: LIST
 669: LIST
 670: LIST
 671: LIST
 672: ST_TO_ADDR
// ru_weapons := [ ru_rocket_launcher , ru_rocket , ru_heavy_gun , ru_heavy_gun ] ;
 673: LD_ADDR_EXP 18
 677: PUSH
 678: LD_INT 45
 680: PUSH
 681: LD_INT 47
 683: PUSH
 684: LD_INT 46
 686: PUSH
 687: LD_INT 46
 689: PUSH
 690: EMPTY
 691: LIST
 692: LIST
 693: LIST
 694: LIST
 695: ST_TO_ADDR
// end ;
 696: LD_VAR 0 1
 700: RET
// every 0 0$01 trigger game_on do var i , p , x , filter ;
 701: LD_EXP 1
 705: IFFALSE 3475
 707: GO 709
 709: DISABLE
 710: LD_INT 0
 712: PPUSH
 713: PPUSH
 714: PPUSH
 715: PPUSH
// begin enable ;
 716: ENABLE
// Display_Strings := [ #tick , game_time ] ^ game_strings ;
 717: LD_ADDR_OWVAR 47
 721: PUSH
 722: LD_STRING #tick
 724: PUSH
 725: LD_EXP 3
 729: PUSH
 730: EMPTY
 731: LIST
 732: LIST
 733: PUSH
 734: LD_EXP 6
 738: ADD
 739: ST_TO_ADDR
// game_time := RefreshTime ( game_time , true ) ;
 740: LD_ADDR_EXP 3
 744: PUSH
 745: LD_EXP 3
 749: PPUSH
 750: LD_INT 1
 752: PPUSH
 753: CALL 6964 0 2
 757: ST_TO_ADDR
// if meeting_start and meeting_time > 0 0$00 then
 758: LD_EXP 26
 762: PUSH
 763: LD_EXP 30
 767: PUSH
 768: LD_INT 0
 770: GREATER
 771: AND
 772: IFFALSE 809
// begin game_strings := [ #mtime , meeting_time ] ;
 774: LD_ADDR_EXP 6
 778: PUSH
 779: LD_STRING #mtime
 781: PUSH
 782: LD_EXP 30
 786: PUSH
 787: EMPTY
 788: LIST
 789: LIST
 790: ST_TO_ADDR
// meeting_time := RefreshTime ( meeting_time , false ) ;
 791: LD_ADDR_EXP 30
 795: PUSH
 796: LD_EXP 30
 800: PPUSH
 801: LD_INT 0
 803: PPUSH
 804: CALL 6964 0 2
 808: ST_TO_ADDR
// end ; if meeting_arive then
 809: LD_EXP 27
 813: IFFALSE 833
// mission_time := RefreshTime ( mission_time , true ) ;
 815: LD_ADDR_EXP 34
 819: PUSH
 820: LD_EXP 34
 824: PPUSH
 825: LD_INT 1
 827: PPUSH
 828: CALL 6964 0 2
 832: ST_TO_ADDR
// if arabian_attack and arabian_timeing > 0 0$00 and meeting_arive then
 833: LD_EXP 38
 837: PUSH
 838: LD_EXP 23
 842: PUSH
 843: LD_INT 0
 845: GREATER
 846: AND
 847: PUSH
 848: LD_EXP 27
 852: AND
 853: IFFALSE 873
// begin arabian_timeing := RefreshTime ( arabian_timeing , false ) ;
 855: LD_ADDR_EXP 23
 859: PUSH
 860: LD_EXP 23
 864: PPUSH
 865: LD_INT 0
 867: PPUSH
 868: CALL 6964 0 2
 872: ST_TO_ADDR
// end ; if russian_attack and russian_timeing > 0 0$00 and meeting_arive then
 873: LD_EXP 39
 877: PUSH
 878: LD_EXP 24
 882: PUSH
 883: LD_INT 0
 885: GREATER
 886: AND
 887: PUSH
 888: LD_EXP 27
 892: AND
 893: IFFALSE 913
// begin russian_timeing := RefreshTime ( russian_timeing , false ) ;
 895: LD_ADDR_EXP 24
 899: PUSH
 900: LD_EXP 24
 904: PPUSH
 905: LD_INT 0
 907: PPUSH
 908: CALL 6964 0 2
 912: ST_TO_ADDR
// end ; if american_attack and american_timeing > 0 0$00 and meeting_arive then
 913: LD_EXP 40
 917: PUSH
 918: LD_EXP 25
 922: PUSH
 923: LD_INT 0
 925: GREATER
 926: AND
 927: PUSH
 928: LD_EXP 27
 932: AND
 933: IFFALSE 953
// begin american_timeing := RefreshTime ( american_timeing , false ) ;
 935: LD_ADDR_EXP 25
 939: PUSH
 940: LD_EXP 25
 944: PPUSH
 945: LD_INT 0
 947: PPUSH
 948: CALL 6964 0 2
 952: ST_TO_ADDR
// end ; if russian_trade and russian_timer > 0 0$00 then
 953: LD_EXP 43
 957: PUSH
 958: LD_EXP 31
 962: PUSH
 963: LD_INT 0
 965: GREATER
 966: AND
 967: IFFALSE 1004
// begin game_strings := [ #rtime , russian_timer ] ;
 969: LD_ADDR_EXP 6
 973: PUSH
 974: LD_STRING #rtime
 976: PUSH
 977: LD_EXP 31
 981: PUSH
 982: EMPTY
 983: LIST
 984: LIST
 985: ST_TO_ADDR
// russian_timer := RefreshTime ( russian_timer , false ) ;
 986: LD_ADDR_EXP 31
 990: PUSH
 991: LD_EXP 31
 995: PPUSH
 996: LD_INT 0
 998: PPUSH
 999: CALL 6964 0 2
1003: ST_TO_ADDR
// end ; if russian_trade and russian_timer = 0 0$00 or cargo_ok then
1004: LD_EXP 43
1008: PUSH
1009: LD_EXP 31
1013: PUSH
1014: LD_INT 0
1016: EQUAL
1017: AND
1018: PUSH
1019: LD_EXP 35
1023: OR
1024: IFFALSE 1033
// game_strings := [ ] ;
1026: LD_ADDR_EXP 6
1030: PUSH
1031: EMPTY
1032: ST_TO_ADDR
// if dezert = false and tick mod 33600 = 0 then
1033: LD_EXP 37
1037: PUSH
1038: LD_INT 0
1040: EQUAL
1041: PUSH
1042: LD_OWVAR 1
1046: PUSH
1047: LD_INT 33600
1049: MOD
1050: PUSH
1051: LD_INT 0
1053: EQUAL
1054: AND
1055: IFFALSE 1115
// begin p := Rand ( 1 , 5 ) ;
1057: LD_ADDR_VAR 0 2
1061: PUSH
1062: LD_INT 1
1064: PPUSH
1065: LD_INT 5
1067: PPUSH
1068: CALL_OW 12
1072: ST_TO_ADDR
// if p <= [ 4 , 3 , 3 ] [ game_difficulty ] then
1073: LD_VAR 0 2
1077: PUSH
1078: LD_INT 4
1080: PUSH
1081: LD_INT 3
1083: PUSH
1084: LD_INT 3
1086: PUSH
1087: EMPTY
1088: LIST
1089: LIST
1090: LIST
1091: PUSH
1092: LD_EXP 2
1096: ARRAY
1097: LESSEQUAL
1098: IFFALSE 1115
// begin RaiseSailEvent ( 92 ) ;
1100: LD_INT 92
1102: PPUSH
1103: CALL_OW 427
// dezert := true ;
1107: LD_ADDR_EXP 37
1111: PUSH
1112: LD_INT 1
1114: ST_TO_ADDR
// end ; end ; if tick mod 8400 = 0 then
1115: LD_OWVAR 1
1119: PUSH
1120: LD_INT 8400
1122: MOD
1123: PUSH
1124: LD_INT 0
1126: EQUAL
1127: IFFALSE 1136
// RaiseSailEvent ( 101 ) ;
1129: LD_INT 101
1131: PPUSH
1132: CALL_OW 427
// if MineExist ( 8 ) and u_mine = false then
1136: LD_INT 8
1138: PPUSH
1139: CALL 7018 0 1
1143: PUSH
1144: LD_EXP 13
1148: PUSH
1149: LD_INT 0
1151: EQUAL
1152: AND
1153: IFFALSE 1170
// begin u_mine := true ;
1155: LD_ADDR_EXP 13
1159: PUSH
1160: LD_INT 1
1162: ST_TO_ADDR
// ChangeMissionObjectives ( DS-T1m ) ;
1163: LD_STRING DS-T1m
1165: PPUSH
1166: CALL_OW 337
// end ; if FacExist ( 8 ) and u_fac = false then
1170: LD_INT 8
1172: PPUSH
1173: CALL 7080 0 1
1177: PUSH
1178: LD_EXP 14
1182: PUSH
1183: LD_INT 0
1185: EQUAL
1186: AND
1187: IFFALSE 1204
// begin u_fac := true ;
1189: LD_ADDR_EXP 14
1193: PUSH
1194: LD_INT 1
1196: ST_TO_ADDR
// ChangeMissionObjectives ( DS-T1f ) ;
1197: LD_STRING DS-T1f
1199: PPUSH
1200: CALL_OW 337
// end ; if hero_died then
1204: LD_EXP 33
1208: IFFALSE 1217
// YouLost ( DS-h1 ) ;
1210: LD_STRING DS-h1
1212: PPUSH
1213: CALL_OW 104
// if fort_destroyed then
1217: LD_EXP 32
1221: IFFALSE 1230
// YouLost ( DS-h2 ) ;
1223: LD_STRING DS-h2
1225: PPUSH
1226: CALL_OW 104
// if GetDistUnits ( leopold , l_cmndr ) > 6 and meeting_start = false then
1230: LD_EXP 7
1234: PPUSH
1235: LD_EXP 49
1239: PPUSH
1240: CALL_OW 296
1244: PUSH
1245: LD_INT 6
1247: GREATER
1248: PUSH
1249: LD_EXP 26
1253: PUSH
1254: LD_INT 0
1256: EQUAL
1257: AND
1258: IFFALSE 1281
// begin if not HasTask ( leopold ) then
1260: LD_EXP 7
1264: PPUSH
1265: CALL_OW 314
1269: NOT
1270: IFFALSE 1279
// RaiseSailEvent ( 1 ) ;
1272: LD_INT 1
1274: PPUSH
1275: CALL_OW 427
// end else
1279: GO 1298
// if meeting_start = false then
1281: LD_EXP 26
1285: PUSH
1286: LD_INT 0
1288: EQUAL
1289: IFFALSE 1298
// begin RaiseSailEvent ( 2 ) ;
1291: LD_INT 2
1293: PPUSH
1294: CALL_OW 427
// end ; if game_time >= [ 50 50$00 , 62 62$30 , 72 72$00 ] [ game_difficulty ] and meeting_end = false then
1298: LD_EXP 3
1302: PUSH
1303: LD_INT 105000
1305: PUSH
1306: LD_INT 131250
1308: PUSH
1309: LD_INT 151200
1311: PUSH
1312: EMPTY
1313: LIST
1314: LIST
1315: LIST
1316: PUSH
1317: LD_EXP 2
1321: ARRAY
1322: GREATEREQUAL
1323: PUSH
1324: LD_EXP 29
1328: PUSH
1329: LD_INT 0
1331: EQUAL
1332: AND
1333: IFFALSE 1350
// begin meeting_end := true ;
1335: LD_ADDR_EXP 29
1339: PUSH
1340: LD_INT 1
1342: ST_TO_ADDR
// RaiseSailEvent ( 200 ) ;
1343: LD_INT 200
1345: PPUSH
1346: CALL_OW 427
// end ; if meeting_time = 0 0$00 and meeting_arive = false then
1350: LD_EXP 30
1354: PUSH
1355: LD_INT 0
1357: EQUAL
1358: PUSH
1359: LD_EXP 27
1363: PUSH
1364: LD_INT 0
1366: EQUAL
1367: AND
1368: IFFALSE 1392
// begin meeting_arive := true ;
1370: LD_ADDR_EXP 27
1374: PUSH
1375: LD_INT 1
1377: ST_TO_ADDR
// game_strings := [ ] ;
1378: LD_ADDR_EXP 6
1382: PUSH
1383: EMPTY
1384: ST_TO_ADDR
// RaiseSailEvent ( 10 ) ;
1385: LD_INT 10
1387: PPUSH
1388: CALL_OW 427
// end ; if meeting_arive then
1392: LD_EXP 27
1396: IFFALSE 2195
// begin if arabian_attack = false and tick mod 4200 = 0 then
1398: LD_EXP 38
1402: PUSH
1403: LD_INT 0
1405: EQUAL
1406: PUSH
1407: LD_OWVAR 1
1411: PUSH
1412: LD_INT 4200
1414: MOD
1415: PUSH
1416: LD_INT 0
1418: EQUAL
1419: AND
1420: IFFALSE 1473
// begin p := Rand ( 1 , 100 ) ;
1422: LD_ADDR_VAR 0 2
1426: PUSH
1427: LD_INT 1
1429: PPUSH
1430: LD_INT 100
1432: PPUSH
1433: CALL_OW 12
1437: ST_TO_ADDR
// if p <= [ 85 , 90 , 95 ] [ game_difficulty ] then
1438: LD_VAR 0 2
1442: PUSH
1443: LD_INT 85
1445: PUSH
1446: LD_INT 90
1448: PUSH
1449: LD_INT 95
1451: PUSH
1452: EMPTY
1453: LIST
1454: LIST
1455: LIST
1456: PUSH
1457: LD_EXP 2
1461: ARRAY
1462: LESSEQUAL
1463: IFFALSE 1473
// arabian_attack := true ;
1465: LD_ADDR_EXP 38
1469: PUSH
1470: LD_INT 1
1472: ST_TO_ADDR
// end ; if russian_trade = false and russian_attack = false and tick > 52500 then
1473: LD_EXP 43
1477: PUSH
1478: LD_INT 0
1480: EQUAL
1481: PUSH
1482: LD_EXP 39
1486: PUSH
1487: LD_INT 0
1489: EQUAL
1490: AND
1491: PUSH
1492: LD_OWVAR 1
1496: PUSH
1497: LD_INT 52500
1499: GREATER
1500: AND
1501: IFFALSE 1572
// begin russian_trade = true ;
1503: LD_ADDR_EXP 43
1507: PUSH
1508: LD_INT 1
1510: ST_TO_ADDR
// DialogueOn ;
1511: CALL_OW 6
// SayRadio ( ru_comander , DS-DR-RTr ) ;
1515: LD_EXP 47
1519: PPUSH
1520: LD_STRING DS-DR-RTr
1522: PPUSH
1523: CALL_OW 94
// Say ( l_cmndr , DS-DC-RTr ) ;
1527: LD_EXP 49
1531: PPUSH
1532: LD_STRING DS-DC-RTr
1534: PPUSH
1535: CALL_OW 88
// SayRadio ( ru_comander , DS-DR-RTr2 ) ;
1539: LD_EXP 47
1543: PPUSH
1544: LD_STRING DS-DR-RTr2
1546: PPUSH
1547: CALL_OW 94
// DialogueOff ;
1551: CALL_OW 7
// ChangeMissionObjectives ( DS-T2 ) ;
1555: LD_STRING DS-T2
1557: PPUSH
1558: CALL_OW 337
// SetAreaMapShow ( tree , 1 ) ;
1562: LD_INT 10
1564: PPUSH
1565: LD_INT 1
1567: PPUSH
1568: CALL_OW 424
// end ; if russian_trade and cargo_ok = false and russian_timer > 0 0$00 then
1572: LD_EXP 43
1576: PUSH
1577: LD_EXP 35
1581: PUSH
1582: LD_INT 0
1584: EQUAL
1585: AND
1586: PUSH
1587: LD_EXP 31
1591: PUSH
1592: LD_INT 0
1594: GREATER
1595: AND
1596: IFFALSE 1845
// begin if FilterUnitsInArea ( tree , ( [ [ f_empty ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] , [ f_not , [ f_control , control_remote ] ] ] ) ) > 0 then
1598: LD_INT 10
1600: PPUSH
1601: LD_INT 58
1603: PUSH
1604: EMPTY
1605: LIST
1606: PUSH
1607: LD_INT 2
1609: PUSH
1610: LD_INT 34
1612: PUSH
1613: LD_INT 32
1615: PUSH
1616: EMPTY
1617: LIST
1618: LIST
1619: PUSH
1620: LD_INT 34
1622: PUSH
1623: LD_INT 12
1625: PUSH
1626: EMPTY
1627: LIST
1628: LIST
1629: PUSH
1630: EMPTY
1631: LIST
1632: LIST
1633: LIST
1634: PUSH
1635: LD_INT 3
1637: PUSH
1638: LD_INT 33
1640: PUSH
1641: LD_INT 2
1643: PUSH
1644: EMPTY
1645: LIST
1646: LIST
1647: PUSH
1648: EMPTY
1649: LIST
1650: LIST
1651: PUSH
1652: EMPTY
1653: LIST
1654: LIST
1655: LIST
1656: PPUSH
1657: CALL_OW 70
1661: PUSH
1662: LD_INT 0
1664: GREATER
1665: IFFALSE 1845
// if GetCargo ( FilterUnitsInArea ( tree , ( [ [ f_empty ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] , [ f_not , [ f_control , control_remote ] ] ] ) ) [ 1 ] , mat_siberit ) = 100 then
1667: LD_INT 10
1669: PPUSH
1670: LD_INT 58
1672: PUSH
1673: EMPTY
1674: LIST
1675: PUSH
1676: LD_INT 2
1678: PUSH
1679: LD_INT 34
1681: PUSH
1682: LD_INT 32
1684: PUSH
1685: EMPTY
1686: LIST
1687: LIST
1688: PUSH
1689: LD_INT 34
1691: PUSH
1692: LD_INT 12
1694: PUSH
1695: EMPTY
1696: LIST
1697: LIST
1698: PUSH
1699: EMPTY
1700: LIST
1701: LIST
1702: LIST
1703: PUSH
1704: LD_INT 3
1706: PUSH
1707: LD_INT 33
1709: PUSH
1710: LD_INT 2
1712: PUSH
1713: EMPTY
1714: LIST
1715: LIST
1716: PUSH
1717: EMPTY
1718: LIST
1719: LIST
1720: PUSH
1721: EMPTY
1722: LIST
1723: LIST
1724: LIST
1725: PPUSH
1726: CALL_OW 70
1730: PUSH
1731: LD_INT 1
1733: ARRAY
1734: PPUSH
1735: LD_INT 3
1737: PPUSH
1738: CALL_OW 289
1742: PUSH
1743: LD_INT 100
1745: EQUAL
1746: IFFALSE 1845
// begin cargo_ok := true ;
1748: LD_ADDR_EXP 35
1752: PUSH
1753: LD_INT 1
1755: ST_TO_ADDR
// RemoveUnit ( FilterUnitsInArea ( tree , ( [ [ f_empty ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] , [ f_not , [ f_control , control_remote ] ] ] ) ) [ 1 ] ) ;
1756: LD_INT 10
1758: PPUSH
1759: LD_INT 58
1761: PUSH
1762: EMPTY
1763: LIST
1764: PUSH
1765: LD_INT 2
1767: PUSH
1768: LD_INT 34
1770: PUSH
1771: LD_INT 32
1773: PUSH
1774: EMPTY
1775: LIST
1776: LIST
1777: PUSH
1778: LD_INT 34
1780: PUSH
1781: LD_INT 12
1783: PUSH
1784: EMPTY
1785: LIST
1786: LIST
1787: PUSH
1788: EMPTY
1789: LIST
1790: LIST
1791: LIST
1792: PUSH
1793: LD_INT 3
1795: PUSH
1796: LD_INT 33
1798: PUSH
1799: LD_INT 2
1801: PUSH
1802: EMPTY
1803: LIST
1804: LIST
1805: PUSH
1806: EMPTY
1807: LIST
1808: LIST
1809: PUSH
1810: EMPTY
1811: LIST
1812: LIST
1813: LIST
1814: PPUSH
1815: CALL_OW 70
1819: PUSH
1820: LD_INT 1
1822: ARRAY
1823: PPUSH
1824: CALL_OW 64
// ChangeMissionObjectives ( DS-T2-out ) ;
1828: LD_STRING DS-T2-out
1830: PPUSH
1831: CALL_OW 337
// SetAreaMapShow ( tree , 0 ) ;
1835: LD_INT 10
1837: PPUSH
1838: LD_INT 0
1840: PPUSH
1841: CALL_OW 424
// end ; end ; if russian_attack = false and russian_trade and cargo_ok = false and russian_timer = 0 0$00 then
1845: LD_EXP 39
1849: PUSH
1850: LD_INT 0
1852: EQUAL
1853: PUSH
1854: LD_EXP 43
1858: AND
1859: PUSH
1860: LD_EXP 35
1864: PUSH
1865: LD_INT 0
1867: EQUAL
1868: AND
1869: PUSH
1870: LD_EXP 31
1874: PUSH
1875: LD_INT 0
1877: EQUAL
1878: AND
1879: IFFALSE 1906
// begin russian_attack := true ;
1881: LD_ADDR_EXP 39
1885: PUSH
1886: LD_INT 1
1888: ST_TO_ADDR
// ChangeMissionObjectives ( DS-T2-out ) ;
1889: LD_STRING DS-T2-out
1891: PPUSH
1892: CALL_OW 337
// SetAreaMapShow ( tree , 0 ) ;
1896: LD_INT 10
1898: PPUSH
1899: LD_INT 0
1901: PPUSH
1902: CALL_OW 424
// end ; if russian_trade = false and russian_attack = false and american_attack = false and tick mod 21000 = 0 then
1906: LD_EXP 43
1910: PUSH
1911: LD_INT 0
1913: EQUAL
1914: PUSH
1915: LD_EXP 39
1919: PUSH
1920: LD_INT 0
1922: EQUAL
1923: AND
1924: PUSH
1925: LD_EXP 40
1929: PUSH
1930: LD_INT 0
1932: EQUAL
1933: AND
1934: PUSH
1935: LD_OWVAR 1
1939: PUSH
1940: LD_INT 21000
1942: MOD
1943: PUSH
1944: LD_INT 0
1946: EQUAL
1947: AND
1948: IFFALSE 2001
// begin p := Rand ( 1 , 100 ) ;
1950: LD_ADDR_VAR 0 2
1954: PUSH
1955: LD_INT 1
1957: PPUSH
1958: LD_INT 100
1960: PPUSH
1961: CALL_OW 12
1965: ST_TO_ADDR
// if p <= [ 35 , 45 , 55 ] [ game_difficulty ] then
1966: LD_VAR 0 2
1970: PUSH
1971: LD_INT 35
1973: PUSH
1974: LD_INT 45
1976: PUSH
1977: LD_INT 55
1979: PUSH
1980: EMPTY
1981: LIST
1982: LIST
1983: LIST
1984: PUSH
1985: LD_EXP 2
1989: ARRAY
1990: LESSEQUAL
1991: IFFALSE 2001
// russian_attack := true ;
1993: LD_ADDR_EXP 39
1997: PUSH
1998: LD_INT 1
2000: ST_TO_ADDR
// end ; if american_help = false and american_attack = false and russian_attack = false and tick mod 31500 = 0 then
2001: LD_EXP 41
2005: PUSH
2006: LD_INT 0
2008: EQUAL
2009: PUSH
2010: LD_EXP 40
2014: PUSH
2015: LD_INT 0
2017: EQUAL
2018: AND
2019: PUSH
2020: LD_EXP 39
2024: PUSH
2025: LD_INT 0
2027: EQUAL
2028: AND
2029: PUSH
2030: LD_OWVAR 1
2034: PUSH
2035: LD_INT 31500
2037: MOD
2038: PUSH
2039: LD_INT 0
2041: EQUAL
2042: AND
2043: IFFALSE 2096
// begin p := Rand ( 1 , 100 ) ;
2045: LD_ADDR_VAR 0 2
2049: PUSH
2050: LD_INT 1
2052: PPUSH
2053: LD_INT 100
2055: PPUSH
2056: CALL_OW 12
2060: ST_TO_ADDR
// if p <= [ 33 , 44 , 55 ] [ game_difficulty ] then
2061: LD_VAR 0 2
2065: PUSH
2066: LD_INT 33
2068: PUSH
2069: LD_INT 44
2071: PUSH
2072: LD_INT 55
2074: PUSH
2075: EMPTY
2076: LIST
2077: LIST
2078: LIST
2079: PUSH
2080: LD_EXP 2
2084: ARRAY
2085: LESSEQUAL
2086: IFFALSE 2096
// american_attack := true ;
2088: LD_ADDR_EXP 40
2092: PUSH
2093: LD_INT 1
2095: ST_TO_ADDR
// end ; if american_attack = false and russian_attack = false and american_help = false and tick mod 21200 = 0 then
2096: LD_EXP 40
2100: PUSH
2101: LD_INT 0
2103: EQUAL
2104: PUSH
2105: LD_EXP 39
2109: PUSH
2110: LD_INT 0
2112: EQUAL
2113: AND
2114: PUSH
2115: LD_EXP 41
2119: PUSH
2120: LD_INT 0
2122: EQUAL
2123: AND
2124: PUSH
2125: LD_OWVAR 1
2129: PUSH
2130: LD_INT 21200
2132: MOD
2133: PUSH
2134: LD_INT 0
2136: EQUAL
2137: AND
2138: IFFALSE 2195
// begin p := Rand ( 1 , 100 ) ;
2140: LD_ADDR_VAR 0 2
2144: PUSH
2145: LD_INT 1
2147: PPUSH
2148: LD_INT 100
2150: PPUSH
2151: CALL_OW 12
2155: ST_TO_ADDR
// if p <= american_hchan then
2156: LD_VAR 0 2
2160: PUSH
2161: LD_EXP 36
2165: LESSEQUAL
2166: IFFALSE 2195
// begin american_help := true ;
2168: LD_ADDR_EXP 41
2172: PUSH
2173: LD_INT 1
2175: ST_TO_ADDR
// SayRadio ( am_comander , DS-amhelp ) ;
2176: LD_EXP 46
2180: PPUSH
2181: LD_STRING DS-amhelp
2183: PPUSH
2184: CALL_OW 94
// RaiseSailEvent ( 91 ) ;
2188: LD_INT 91
2190: PPUSH
2191: CALL_OW 427
// end ; end ; end ; if american_attack and american_timeing = 0 0$00 and FilterAllUnits ( [ f_side , 1 ] ) = 0 then
2195: LD_EXP 40
2199: PUSH
2200: LD_EXP 25
2204: PUSH
2205: LD_INT 0
2207: EQUAL
2208: AND
2209: PUSH
2210: LD_INT 22
2212: PUSH
2213: LD_INT 1
2215: PUSH
2216: EMPTY
2217: LIST
2218: LIST
2219: PPUSH
2220: CALL_OW 69
2224: PUSH
2225: LD_INT 0
2227: EQUAL
2228: AND
2229: IFFALSE 2331
// begin american_timeing := Rand ( 17 17$00 , 20 20$00 ) ;
2231: LD_ADDR_EXP 25
2235: PUSH
2236: LD_INT 35700
2238: PPUSH
2239: LD_INT 42000
2241: PPUSH
2242: CALL_OW 12
2246: ST_TO_ADDR
// SayRadio ( scout , DS-DZ-U ) ;
2247: LD_EXP 12
2251: PPUSH
2252: LD_STRING DS-DZ-U
2254: PPUSH
2255: CALL_OW 94
// Wait ( 0 0$33 ) ;
2259: LD_INT 1155
2261: PPUSH
2262: CALL_OW 67
// x := Rand ( 1 , 2 ) ;
2266: LD_ADDR_VAR 0 3
2270: PUSH
2271: LD_INT 1
2273: PPUSH
2274: LD_INT 2
2276: PPUSH
2277: CALL_OW 12
2281: ST_TO_ADDR
// case x of 1 :
2282: LD_VAR 0 3
2286: PUSH
2287: LD_INT 1
2289: DOUBLE
2290: EQUAL
2291: IFTRUE 2295
2293: GO 2305
2295: POP
// RaiseSailEvent ( 41 ) ; 2 :
2296: LD_INT 41
2298: PPUSH
2299: CALL_OW 427
2303: GO 2324
2305: LD_INT 2
2307: DOUBLE
2308: EQUAL
2309: IFTRUE 2313
2311: GO 2323
2313: POP
// RaiseSailEvent ( 42 ) ; end ;
2314: LD_INT 42
2316: PPUSH
2317: CALL_OW 427
2321: GO 2324
2323: POP
// RaiseSailEvent ( 42 ) ;
2324: LD_INT 42
2326: PPUSH
2327: CALL_OW 427
// end ; if russian_attack and russian_timeing = 0 0$00 and FilterAllUnits ( [ f_side , 3 ] ) = 0 then
2331: LD_EXP 39
2335: PUSH
2336: LD_EXP 24
2340: PUSH
2341: LD_INT 0
2343: EQUAL
2344: AND
2345: PUSH
2346: LD_INT 22
2348: PUSH
2349: LD_INT 3
2351: PUSH
2352: EMPTY
2353: LIST
2354: LIST
2355: PPUSH
2356: CALL_OW 69
2360: PUSH
2361: LD_INT 0
2363: EQUAL
2364: AND
2365: IFFALSE 2421
// begin russian_timeing := Rand ( 17 17$00 , 20 20$00 ) ;
2367: LD_ADDR_EXP 24
2371: PUSH
2372: LD_INT 35700
2374: PPUSH
2375: LD_INT 42000
2377: PPUSH
2378: CALL_OW 12
2382: ST_TO_ADDR
// SayRadio ( scout , DS-DZ-R ) ;
2383: LD_EXP 12
2387: PPUSH
2388: LD_STRING DS-DZ-R
2390: PPUSH
2391: CALL_OW 94
// Wait ( 0 0$45 ) ;
2395: LD_INT 1575
2397: PPUSH
2398: CALL_OW 67
// SayRadio ( ru_comander , DS-DR-R1 ) ;
2402: LD_EXP 47
2406: PPUSH
2407: LD_STRING DS-DR-R1
2409: PPUSH
2410: CALL_OW 94
// RaiseSailEvent ( 51 ) ;
2414: LD_INT 51
2416: PPUSH
2417: CALL_OW 427
// end ; if mission_time >= 25 25$00 and arabian_force < 10 then
2421: LD_EXP 34
2425: PUSH
2426: LD_INT 52500
2428: GREATEREQUAL
2429: PUSH
2430: LD_EXP 20
2434: PUSH
2435: LD_INT 10
2437: LESS
2438: AND
2439: IFFALSE 2463
// begin mission_time := 0 0$00 ;
2441: LD_ADDR_EXP 34
2445: PUSH
2446: LD_INT 0
2448: ST_TO_ADDR
// arabian_force := arabian_force + 1 ;
2449: LD_ADDR_EXP 20
2453: PUSH
2454: LD_EXP 20
2458: PUSH
2459: LD_INT 1
2461: PLUS
2462: ST_TO_ADDR
// end ; if arabian_timeing = 0 0$00 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_weapon , ar_control_tower ] ] ] ) = 0 then
2463: LD_EXP 23
2467: PUSH
2468: LD_INT 0
2470: EQUAL
2471: PUSH
2472: LD_INT 22
2474: PUSH
2475: LD_INT 2
2477: PUSH
2478: EMPTY
2479: LIST
2480: LIST
2481: PUSH
2482: LD_INT 3
2484: PUSH
2485: LD_INT 34
2487: PUSH
2488: LD_INT 31
2490: PUSH
2491: EMPTY
2492: LIST
2493: LIST
2494: PUSH
2495: EMPTY
2496: LIST
2497: LIST
2498: PUSH
2499: EMPTY
2500: LIST
2501: LIST
2502: PPUSH
2503: CALL_OW 69
2507: PUSH
2508: LD_INT 0
2510: EQUAL
2511: AND
2512: IFFALSE 2710
// begin arabian_timeing := 7 7$30 ;
2514: LD_ADDR_EXP 23
2518: PUSH
2519: LD_INT 15750
2521: ST_TO_ADDR
// x := Rand ( 1 , 3 ) ;
2522: LD_ADDR_VAR 0 3
2526: PUSH
2527: LD_INT 1
2529: PPUSH
2530: LD_INT 3
2532: PPUSH
2533: CALL_OW 12
2537: ST_TO_ADDR
// SayRadio ( scout , DS-DZ-H ) ;
2538: LD_EXP 12
2542: PPUSH
2543: LD_STRING DS-DZ-H
2545: PPUSH
2546: CALL_OW 94
// case x of 1 :
2550: LD_VAR 0 3
2554: PUSH
2555: LD_INT 1
2557: DOUBLE
2558: EQUAL
2559: IFTRUE 2563
2561: GO 2573
2563: POP
// RaiseSailEvent ( 31 ) ; 2 :
2564: LD_INT 31
2566: PPUSH
2567: CALL_OW 427
2571: GO 2610
2573: LD_INT 2
2575: DOUBLE
2576: EQUAL
2577: IFTRUE 2581
2579: GO 2591
2581: POP
// RaiseSailEvent ( 32 ) ; 3 :
2582: LD_INT 32
2584: PPUSH
2585: CALL_OW 427
2589: GO 2610
2591: LD_INT 3
2593: DOUBLE
2594: EQUAL
2595: IFTRUE 2599
2597: GO 2609
2599: POP
// RaiseSailEvent ( 33 ) ; end ;
2600: LD_INT 33
2602: PPUSH
2603: CALL_OW 427
2607: GO 2610
2609: POP
// RaiseSailEvent ( 33 ) ;
2610: LD_INT 33
2612: PPUSH
2613: CALL_OW 427
// if game_difficulty > 1 then
2617: LD_EXP 2
2621: PUSH
2622: LD_INT 1
2624: GREATER
2625: IFFALSE 2634
// RaiseSailEvent ( 33 ) ;
2627: LD_INT 33
2629: PPUSH
2630: CALL_OW 427
// if heike_dialog1 = false then
2634: LD_EXP 44
2638: PUSH
2639: LD_INT 0
2641: EQUAL
2642: IFFALSE 2673
// begin heike_dialog1 := true ;
2644: LD_ADDR_EXP 44
2648: PUSH
2649: LD_INT 1
2651: ST_TO_ADDR
// Wait ( 0 0$03 ) ;
2652: LD_INT 105
2654: PPUSH
2655: CALL_OW 67
// SayRadio ( ar_comander , heike1 ) ;
2659: LD_EXP 48
2663: PPUSH
2664: LD_STRING heike1
2666: PPUSH
2667: CALL_OW 94
// end else
2671: GO 2710
// if heike_dialog2 = false then
2673: LD_EXP 45
2677: PUSH
2678: LD_INT 0
2680: EQUAL
2681: IFFALSE 2710
// begin heike_dialog2 := true ;
2683: LD_ADDR_EXP 45
2687: PUSH
2688: LD_INT 1
2690: ST_TO_ADDR
// Wait ( 0 0$03 ) ;
2691: LD_INT 105
2693: PPUSH
2694: CALL_OW 67
// SayRadio ( ar_comander , heike2 ) ;
2698: LD_EXP 48
2702: PPUSH
2703: LD_STRING heike2
2705: PPUSH
2706: CALL_OW 94
// end ; end ; if FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) > 0 then
2710: LD_INT 22
2712: PUSH
2713: LD_INT 2
2715: PUSH
2716: EMPTY
2717: LIST
2718: LIST
2719: PUSH
2720: LD_INT 33
2722: PUSH
2723: LD_INT 2
2725: PUSH
2726: EMPTY
2727: LIST
2728: LIST
2729: PUSH
2730: EMPTY
2731: LIST
2732: LIST
2733: PPUSH
2734: CALL_OW 69
2738: PUSH
2739: LD_INT 0
2741: GREATER
2742: IFFALSE 2751
// ConnectWithTower ( 2 ) ;
2744: LD_INT 2
2746: PPUSH
2747: CALL 7128 0 1
// if FilterAllUnits ( [ [ [ f_side , 2 ] , [ f_not , [ f_weapon , ar_control_tower ] ] , [ f_not , [ f_hastask ] ] ] ] ) > 0 then
2751: LD_INT 22
2753: PUSH
2754: LD_INT 2
2756: PUSH
2757: EMPTY
2758: LIST
2759: LIST
2760: PUSH
2761: LD_INT 3
2763: PUSH
2764: LD_INT 34
2766: PUSH
2767: LD_INT 31
2769: PUSH
2770: EMPTY
2771: LIST
2772: LIST
2773: PUSH
2774: EMPTY
2775: LIST
2776: LIST
2777: PUSH
2778: LD_INT 3
2780: PUSH
2781: LD_INT 60
2783: PUSH
2784: EMPTY
2785: LIST
2786: PUSH
2787: EMPTY
2788: LIST
2789: LIST
2790: PUSH
2791: EMPTY
2792: LIST
2793: LIST
2794: LIST
2795: PUSH
2796: EMPTY
2797: LIST
2798: PPUSH
2799: CALL_OW 69
2803: PUSH
2804: LD_INT 0
2806: GREATER
2807: IFFALSE 2953
// begin filter := FilterAllUnits ( [ [ [ f_side , 2 ] , [ f_not , [ f_weapon , ar_control_tower ] ] , [ f_not , [ f_hastask ] ] ] ] ) ;
2809: LD_ADDR_VAR 0 4
2813: PUSH
2814: LD_INT 22
2816: PUSH
2817: LD_INT 2
2819: PUSH
2820: EMPTY
2821: LIST
2822: LIST
2823: PUSH
2824: LD_INT 3
2826: PUSH
2827: LD_INT 34
2829: PUSH
2830: LD_INT 31
2832: PUSH
2833: EMPTY
2834: LIST
2835: LIST
2836: PUSH
2837: EMPTY
2838: LIST
2839: LIST
2840: PUSH
2841: LD_INT 3
2843: PUSH
2844: LD_INT 60
2846: PUSH
2847: EMPTY
2848: LIST
2849: PUSH
2850: EMPTY
2851: LIST
2852: LIST
2853: PUSH
2854: EMPTY
2855: LIST
2856: LIST
2857: LIST
2858: PUSH
2859: EMPTY
2860: LIST
2861: PPUSH
2862: CALL_OW 69
2866: ST_TO_ADDR
// x := SpeedFilter ( FilterAllUnits ( [ f_enemy , 2 ] ) , 20 ) ;
2867: LD_ADDR_VAR 0 3
2871: PUSH
2872: LD_INT 81
2874: PUSH
2875: LD_INT 2
2877: PUSH
2878: EMPTY
2879: LIST
2880: LIST
2881: PPUSH
2882: CALL_OW 69
2886: PPUSH
2887: LD_INT 20
2889: PPUSH
2890: CALL 8511 0 2
2894: ST_TO_ADDR
// for i = 1 to filter do
2895: LD_ADDR_VAR 0 1
2899: PUSH
2900: DOUBLE
2901: LD_INT 1
2903: DEC
2904: ST_TO_ADDR
2905: LD_VAR 0 4
2909: PUSH
2910: FOR_TO
2911: IFFALSE 2951
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( x , filter [ i ] ) ) ;
2913: LD_VAR 0 4
2917: PUSH
2918: LD_VAR 0 1
2922: ARRAY
2923: PPUSH
2924: LD_VAR 0 3
2928: PPUSH
2929: LD_VAR 0 4
2933: PUSH
2934: LD_VAR 0 1
2938: ARRAY
2939: PPUSH
2940: CALL_OW 74
2944: PPUSH
2945: CALL_OW 115
2949: GO 2910
2951: POP
2952: POP
// end ; if FilterAllUnits ( [ [ [ f_side , 3 ] , [ f_not , [ f_hastask ] ] ] ] ) > 0 then
2953: LD_INT 22
2955: PUSH
2956: LD_INT 3
2958: PUSH
2959: EMPTY
2960: LIST
2961: LIST
2962: PUSH
2963: LD_INT 3
2965: PUSH
2966: LD_INT 60
2968: PUSH
2969: EMPTY
2970: LIST
2971: PUSH
2972: EMPTY
2973: LIST
2974: LIST
2975: PUSH
2976: EMPTY
2977: LIST
2978: LIST
2979: PUSH
2980: EMPTY
2981: LIST
2982: PPUSH
2983: CALL_OW 69
2987: PUSH
2988: LD_INT 0
2990: GREATER
2991: IFFALSE 3137
// begin filter := FilterAllUnits ( [ [ [ f_side , 3 ] , [ f_not , [ f_weapon , ar_control_tower ] ] , [ f_not , [ f_hastask ] ] ] ] ) ;
2993: LD_ADDR_VAR 0 4
2997: PUSH
2998: LD_INT 22
3000: PUSH
3001: LD_INT 3
3003: PUSH
3004: EMPTY
3005: LIST
3006: LIST
3007: PUSH
3008: LD_INT 3
3010: PUSH
3011: LD_INT 34
3013: PUSH
3014: LD_INT 31
3016: PUSH
3017: EMPTY
3018: LIST
3019: LIST
3020: PUSH
3021: EMPTY
3022: LIST
3023: LIST
3024: PUSH
3025: LD_INT 3
3027: PUSH
3028: LD_INT 60
3030: PUSH
3031: EMPTY
3032: LIST
3033: PUSH
3034: EMPTY
3035: LIST
3036: LIST
3037: PUSH
3038: EMPTY
3039: LIST
3040: LIST
3041: LIST
3042: PUSH
3043: EMPTY
3044: LIST
3045: PPUSH
3046: CALL_OW 69
3050: ST_TO_ADDR
// x := SpeedFilter ( FilterAllUnits ( [ f_enemy , 3 ] ) , 20 ) ;
3051: LD_ADDR_VAR 0 3
3055: PUSH
3056: LD_INT 81
3058: PUSH
3059: LD_INT 3
3061: PUSH
3062: EMPTY
3063: LIST
3064: LIST
3065: PPUSH
3066: CALL_OW 69
3070: PPUSH
3071: LD_INT 20
3073: PPUSH
3074: CALL 8511 0 2
3078: ST_TO_ADDR
// for i = 1 to filter do
3079: LD_ADDR_VAR 0 1
3083: PUSH
3084: DOUBLE
3085: LD_INT 1
3087: DEC
3088: ST_TO_ADDR
3089: LD_VAR 0 4
3093: PUSH
3094: FOR_TO
3095: IFFALSE 3135
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( x , filter [ i ] ) ) ;
3097: LD_VAR 0 4
3101: PUSH
3102: LD_VAR 0 1
3106: ARRAY
3107: PPUSH
3108: LD_VAR 0 3
3112: PPUSH
3113: LD_VAR 0 4
3117: PUSH
3118: LD_VAR 0 1
3122: ARRAY
3123: PPUSH
3124: CALL_OW 74
3128: PPUSH
3129: CALL_OW 115
3133: GO 3094
3135: POP
3136: POP
// end ; if FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] ] ] ) > 0 then
3137: LD_INT 22
3139: PUSH
3140: LD_INT 1
3142: PUSH
3143: EMPTY
3144: LIST
3145: LIST
3146: PUSH
3147: LD_INT 3
3149: PUSH
3150: LD_INT 60
3152: PUSH
3153: EMPTY
3154: LIST
3155: PUSH
3156: EMPTY
3157: LIST
3158: LIST
3159: PUSH
3160: EMPTY
3161: LIST
3162: LIST
3163: PUSH
3164: EMPTY
3165: LIST
3166: PPUSH
3167: CALL_OW 69
3171: PUSH
3172: LD_INT 0
3174: GREATER
3175: IFFALSE 3321
// begin filter := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_not , [ f_weapon , ar_control_tower ] ] , [ f_not , [ f_hastask ] ] ] ] ) ;
3177: LD_ADDR_VAR 0 4
3181: PUSH
3182: LD_INT 22
3184: PUSH
3185: LD_INT 1
3187: PUSH
3188: EMPTY
3189: LIST
3190: LIST
3191: PUSH
3192: LD_INT 3
3194: PUSH
3195: LD_INT 34
3197: PUSH
3198: LD_INT 31
3200: PUSH
3201: EMPTY
3202: LIST
3203: LIST
3204: PUSH
3205: EMPTY
3206: LIST
3207: LIST
3208: PUSH
3209: LD_INT 3
3211: PUSH
3212: LD_INT 60
3214: PUSH
3215: EMPTY
3216: LIST
3217: PUSH
3218: EMPTY
3219: LIST
3220: LIST
3221: PUSH
3222: EMPTY
3223: LIST
3224: LIST
3225: LIST
3226: PUSH
3227: EMPTY
3228: LIST
3229: PPUSH
3230: CALL_OW 69
3234: ST_TO_ADDR
// x := SpeedFilter ( FilterAllUnits ( [ f_enemy , 1 ] ) , 20 ) ;
3235: LD_ADDR_VAR 0 3
3239: PUSH
3240: LD_INT 81
3242: PUSH
3243: LD_INT 1
3245: PUSH
3246: EMPTY
3247: LIST
3248: LIST
3249: PPUSH
3250: CALL_OW 69
3254: PPUSH
3255: LD_INT 20
3257: PPUSH
3258: CALL 8511 0 2
3262: ST_TO_ADDR
// for i = 1 to filter do
3263: LD_ADDR_VAR 0 1
3267: PUSH
3268: DOUBLE
3269: LD_INT 1
3271: DEC
3272: ST_TO_ADDR
3273: LD_VAR 0 4
3277: PUSH
3278: FOR_TO
3279: IFFALSE 3319
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( x , filter [ i ] ) ) ;
3281: LD_VAR 0 4
3285: PUSH
3286: LD_VAR 0 1
3290: ARRAY
3291: PPUSH
3292: LD_VAR 0 3
3296: PPUSH
3297: LD_VAR 0 4
3301: PUSH
3302: LD_VAR 0 1
3306: ARRAY
3307: PPUSH
3308: CALL_OW 74
3312: PPUSH
3313: CALL_OW 115
3317: GO 3278
3319: POP
3320: POP
// end ; if FilterAllUnits ( [ [ [ f_side , 2 ] , [ f_weapon , ar_bio_bomb ] , [ f_not , [ f_lives , 700 ] ] ] ] ) > 0 then
3321: LD_INT 22
3323: PUSH
3324: LD_INT 2
3326: PUSH
3327: EMPTY
3328: LIST
3329: LIST
3330: PUSH
3331: LD_INT 34
3333: PUSH
3334: LD_EXP 56
3338: PUSH
3339: EMPTY
3340: LIST
3341: LIST
3342: PUSH
3343: LD_INT 3
3345: PUSH
3346: LD_INT 24
3348: PUSH
3349: LD_INT 700
3351: PUSH
3352: EMPTY
3353: LIST
3354: LIST
3355: PUSH
3356: EMPTY
3357: LIST
3358: LIST
3359: PUSH
3360: EMPTY
3361: LIST
3362: LIST
3363: LIST
3364: PUSH
3365: EMPTY
3366: LIST
3367: PPUSH
3368: CALL_OW 69
3372: PUSH
3373: LD_INT 0
3375: GREATER
3376: IFFALSE 3475
// begin filter := FilterAllUnits ( [ [ [ f_side , 2 ] , [ f_weapon , ar_bio_bomb ] , [ f_not , [ f_lives , 700 ] ] ] ] ) ;
3378: LD_ADDR_VAR 0 4
3382: PUSH
3383: LD_INT 22
3385: PUSH
3386: LD_INT 2
3388: PUSH
3389: EMPTY
3390: LIST
3391: LIST
3392: PUSH
3393: LD_INT 34
3395: PUSH
3396: LD_EXP 56
3400: PUSH
3401: EMPTY
3402: LIST
3403: LIST
3404: PUSH
3405: LD_INT 3
3407: PUSH
3408: LD_INT 24
3410: PUSH
3411: LD_INT 700
3413: PUSH
3414: EMPTY
3415: LIST
3416: LIST
3417: PUSH
3418: EMPTY
3419: LIST
3420: LIST
3421: PUSH
3422: EMPTY
3423: LIST
3424: LIST
3425: LIST
3426: PUSH
3427: EMPTY
3428: LIST
3429: PPUSH
3430: CALL_OW 69
3434: ST_TO_ADDR
// for i = 1 to filter do
3435: LD_ADDR_VAR 0 1
3439: PUSH
3440: DOUBLE
3441: LD_INT 1
3443: DEC
3444: ST_TO_ADDR
3445: LD_VAR 0 4
3449: PUSH
3450: FOR_TO
3451: IFFALSE 3473
// SetLives ( filter [ i ] , 1 ) ;
3453: LD_VAR 0 4
3457: PUSH
3458: LD_VAR 0 1
3462: ARRAY
3463: PPUSH
3464: LD_INT 1
3466: PPUSH
3467: CALL_OW 234
3471: GO 3450
3473: POP
3474: POP
// end ; end ; end_of_file
3475: PPOPN 4
3477: END
// export function Start_Mission ; begin
3478: LD_INT 0
3480: PPUSH
// PrepareLegion ;
3481: CALL 3522 0 0
// PrepareMeeting ;
3485: CALL 4139 0 0
// case Query ( DS-text-beg ) of 1 :
3489: LD_STRING DS-text-beg
3491: PPUSH
3492: CALL_OW 97
3496: PUSH
3497: LD_INT 1
3499: DOUBLE
3500: EQUAL
3501: IFTRUE 3505
3503: GO 3508
3505: POP
// ; end ;
3506: GO 3509
3508: POP
// game_on := true ;
3509: LD_ADDR_EXP 1
3513: PUSH
3514: LD_INT 1
3516: ST_TO_ADDR
// end ;
3517: LD_VAR 0 1
3521: RET
// export l_cmndr , l_skill , l_units ; function PrepareLegion ; var i , p , filter , team ; begin
3522: LD_INT 0
3524: PPUSH
3525: PPUSH
3526: PPUSH
3527: PPUSH
3528: PPUSH
// uc_side := 8 ;
3529: LD_ADDR_OWVAR 20
3533: PUSH
3534: LD_INT 8
3536: ST_TO_ADDR
// uc_nation := 2 ;
3537: LD_ADDR_OWVAR 21
3541: PUSH
3542: LD_INT 2
3544: ST_TO_ADDR
// l_skill := [ 9 , 8 , 7 ] [ difficulty ] ;
3545: LD_ADDR_EXP 50
3549: PUSH
3550: LD_INT 9
3552: PUSH
3553: LD_INT 8
3555: PUSH
3556: LD_INT 7
3558: PUSH
3559: EMPTY
3560: LIST
3561: LIST
3562: LIST
3563: PUSH
3564: LD_OWVAR 67
3568: ARRAY
3569: ST_TO_ADDR
// l_units := [ 9 , 8 , 8 ] [ difficulty ] ;
3570: LD_ADDR_EXP 51
3574: PUSH
3575: LD_INT 9
3577: PUSH
3578: LD_INT 8
3580: PUSH
3581: LD_INT 8
3583: PUSH
3584: EMPTY
3585: LIST
3586: LIST
3587: LIST
3588: PUSH
3589: LD_OWVAR 67
3593: ARRAY
3594: ST_TO_ADDR
// filter := [ ] ;
3595: LD_ADDR_VAR 0 4
3599: PUSH
3600: EMPTY
3601: ST_TO_ADDR
// hc_gallery := desert ;
3602: LD_ADDR_OWVAR 33
3606: PUSH
3607: LD_STRING desert
3609: ST_TO_ADDR
// hc_face_number := 1 ;
3610: LD_ADDR_OWVAR 34
3614: PUSH
3615: LD_INT 1
3617: ST_TO_ADDR
// hc_skills := [ l_skill + 2 , l_skill - 1 , l_skill , l_skill + 1 ] ;
3618: LD_ADDR_OWVAR 31
3622: PUSH
3623: LD_EXP 50
3627: PUSH
3628: LD_INT 2
3630: PLUS
3631: PUSH
3632: LD_EXP 50
3636: PUSH
3637: LD_INT 1
3639: MINUS
3640: PUSH
3641: LD_EXP 50
3645: PUSH
3646: LD_EXP 50
3650: PUSH
3651: LD_INT 1
3653: PLUS
3654: PUSH
3655: EMPTY
3656: LIST
3657: LIST
3658: LIST
3659: LIST
3660: ST_TO_ADDR
// hc_sex := sex_male ;
3661: LD_ADDR_OWVAR 27
3665: PUSH
3666: LD_INT 1
3668: ST_TO_ADDR
// hc_name := Henri Ruotz ;
3669: LD_ADDR_OWVAR 26
3673: PUSH
3674: LD_STRING Henri Ruotz
3676: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
3677: LD_ADDR_OWVAR 29
3681: PUSH
3682: LD_INT 10
3684: PUSH
3685: LD_INT 10
3687: PUSH
3688: EMPTY
3689: LIST
3690: LIST
3691: ST_TO_ADDR
// hc_class := 1 ;
3692: LD_ADDR_OWVAR 28
3696: PUSH
3697: LD_INT 1
3699: ST_TO_ADDR
// hc_importance := 100 ;
3700: LD_ADDR_OWVAR 32
3704: PUSH
3705: LD_INT 100
3707: ST_TO_ADDR
// l_cmndr := CreateHuman ;
3708: LD_ADDR_EXP 49
3712: PUSH
3713: CALL_OW 44
3717: ST_TO_ADDR
// hc_importance := 0 ;
3718: LD_ADDR_OWVAR 32
3722: PUSH
3723: LD_INT 0
3725: ST_TO_ADDR
// scout := PrepareHuman ( sex_male , 1 , 0 ) ;
3726: LD_ADDR_EXP 12
3730: PUSH
3731: LD_INT 1
3733: PPUSH
3734: LD_INT 1
3736: PPUSH
3737: LD_INT 0
3739: PPUSH
3740: CALL_OW 380
3744: ST_TO_ADDR
// for i = 1 to 4 do
3745: LD_ADDR_VAR 0 2
3749: PUSH
3750: DOUBLE
3751: LD_INT 1
3753: DEC
3754: ST_TO_ADDR
3755: LD_INT 4
3757: PUSH
3758: FOR_TO
3759: IFFALSE 3809
// for p = 1 to 6 do
3761: LD_ADDR_VAR 0 3
3765: PUSH
3766: DOUBLE
3767: LD_INT 1
3769: DEC
3770: ST_TO_ADDR
3771: LD_INT 6
3773: PUSH
3774: FOR_TO
3775: IFFALSE 3805
// filter := filter ^ CreateHumanWithClass ( i , l_skill ) ;
3777: LD_ADDR_VAR 0 4
3781: PUSH
3782: LD_VAR 0 4
3786: PUSH
3787: LD_VAR 0 2
3791: PPUSH
3792: LD_EXP 50
3796: PPUSH
3797: CALL 7312 0 2
3801: ADD
3802: ST_TO_ADDR
3803: GO 3774
3805: POP
3806: POP
3807: GO 3758
3809: POP
3810: POP
// team := CharacterSelection ( text , l_units , l_units , [ sel_change_class , l_cmndr , sel_changeable , sel_not_hired ] ^ filter , [ class_soldier , class_mechanic , class_engineer , class_scientistic , class_mortar ] ) ;
3811: LD_ADDR_VAR 0 5
3815: PUSH
3816: LD_STRING text
3818: PPUSH
3819: LD_EXP 51
3823: PPUSH
3824: LD_EXP 51
3828: PPUSH
3829: LD_INT -5
3831: PUSH
3832: LD_EXP 49
3836: PUSH
3837: LD_INT -3
3839: PUSH
3840: LD_INT -2
3842: PUSH
3843: EMPTY
3844: LIST
3845: LIST
3846: LIST
3847: LIST
3848: PUSH
3849: LD_VAR 0 4
3853: ADD
3854: PPUSH
3855: LD_INT 1
3857: PUSH
3858: LD_INT 3
3860: PUSH
3861: LD_INT 2
3863: PUSH
3864: LD_INT 4
3866: PUSH
3867: LD_INT 8
3869: PUSH
3870: EMPTY
3871: LIST
3872: LIST
3873: LIST
3874: LIST
3875: LIST
3876: PPUSH
3877: CALL_OW 42
3881: ST_TO_ADDR
// for i = 1 to l_units do
3882: LD_ADDR_VAR 0 2
3886: PUSH
3887: DOUBLE
3888: LD_INT 1
3890: DEC
3891: ST_TO_ADDR
3892: LD_EXP 51
3896: PUSH
3897: FOR_TO
3898: IFFALSE 3923
// PlaceUnitArea ( team [ i ] , legion_spawn , false ) ;
3900: LD_VAR 0 5
3904: PUSH
3905: LD_VAR 0 2
3909: ARRAY
3910: PPUSH
3911: LD_INT 1
3913: PPUSH
3914: LD_INT 0
3916: PPUSH
3917: CALL_OW 49
3921: GO 3897
3923: POP
3924: POP
// PlaceUnitArea ( l_cmndr , legion_spawn , false ) ;
3925: LD_EXP 49
3929: PPUSH
3930: LD_INT 1
3932: PPUSH
3933: LD_INT 0
3935: PPUSH
3936: CALL_OW 49
// end ;
3940: LD_VAR 0 1
3944: RET
// export function PlaceCamera ; begin
3945: LD_INT 0
3947: PPUSH
// PlaceSeeing ( 46 , 48 , 8 , 10 ) ;
3948: LD_INT 46
3950: PPUSH
3951: LD_INT 48
3953: PPUSH
3954: LD_INT 8
3956: PPUSH
3957: LD_INT 10
3959: PPUSH
3960: CALL_OW 330
// PlaceSeeing ( 58 , 66 , 8 , 10 ) ;
3964: LD_INT 58
3966: PPUSH
3967: LD_INT 66
3969: PPUSH
3970: LD_INT 8
3972: PPUSH
3973: LD_INT 10
3975: PPUSH
3976: CALL_OW 330
// PlaceSeeing ( 82 , 82 , 8 , 10 ) ;
3980: LD_INT 82
3982: PPUSH
3983: LD_INT 82
3985: PPUSH
3986: LD_INT 8
3988: PPUSH
3989: LD_INT 10
3991: PPUSH
3992: CALL_OW 330
// PlaceSeeing ( 107 , 79 , 8 , 10 ) ;
3996: LD_INT 107
3998: PPUSH
3999: LD_INT 79
4001: PPUSH
4002: LD_INT 8
4004: PPUSH
4005: LD_INT 10
4007: PPUSH
4008: CALL_OW 330
// PlaceSeeing ( 101 , 57 , 8 , 10 ) ;
4012: LD_INT 101
4014: PPUSH
4015: LD_INT 57
4017: PPUSH
4018: LD_INT 8
4020: PPUSH
4021: LD_INT 10
4023: PPUSH
4024: CALL_OW 330
// PlaceSeeing ( 85 , 32 , 8 , 10 ) ;
4028: LD_INT 85
4030: PPUSH
4031: LD_INT 32
4033: PPUSH
4034: LD_INT 8
4036: PPUSH
4037: LD_INT 10
4039: PPUSH
4040: CALL_OW 330
// PlaceSeeing ( 108 , 72 , 8 , 10 ) ;
4044: LD_INT 108
4046: PPUSH
4047: LD_INT 72
4049: PPUSH
4050: LD_INT 8
4052: PPUSH
4053: LD_INT 10
4055: PPUSH
4056: CALL_OW 330
// PlaceSeeing ( 124 , 74 , 8 , 10 ) ;
4060: LD_INT 124
4062: PPUSH
4063: LD_INT 74
4065: PPUSH
4066: LD_INT 8
4068: PPUSH
4069: LD_INT 10
4071: PPUSH
4072: CALL_OW 330
// PlaceSeeing ( 67 , 33 , 8 , 20 ) ;
4076: LD_INT 67
4078: PPUSH
4079: LD_INT 33
4081: PPUSH
4082: LD_INT 8
4084: PPUSH
4085: LD_INT 20
4087: PPUSH
4088: CALL_OW 330
// RemoveSeeing ( 67 , 33 , 8 ) ;
4092: LD_INT 67
4094: PPUSH
4095: LD_INT 33
4097: PPUSH
4098: LD_INT 8
4100: PPUSH
4101: CALL_OW 331
// PlaceSeeing ( 94 , 84 , 8 , 20 ) ;
4105: LD_INT 94
4107: PPUSH
4108: LD_INT 84
4110: PPUSH
4111: LD_INT 8
4113: PPUSH
4114: LD_INT 20
4116: PPUSH
4117: CALL_OW 330
// RemoveSeeing ( 94 , 84 , 8 ) ;
4121: LD_INT 94
4123: PPUSH
4124: LD_INT 84
4126: PPUSH
4127: LD_INT 8
4129: PPUSH
4130: CALL_OW 331
// end ;
4134: LD_VAR 0 1
4138: RET
// export function PrepareMeeting ; begin
4139: LD_INT 0
4141: PPUSH
// uc_side := 6 ;
4142: LD_ADDR_OWVAR 20
4146: PUSH
4147: LD_INT 6
4149: ST_TO_ADDR
// hc_gallery := desert ;
4150: LD_ADDR_OWVAR 33
4154: PUSH
4155: LD_STRING desert
4157: ST_TO_ADDR
// hc_face_number := 2 ;
4158: LD_ADDR_OWVAR 34
4162: PUSH
4163: LD_INT 2
4165: ST_TO_ADDR
// hc_name := Leopold Drass ;
4166: LD_ADDR_OWVAR 26
4170: PUSH
4171: LD_STRING Leopold Drass
4173: ST_TO_ADDR
// hc_class := 1 ;
4174: LD_ADDR_OWVAR 28
4178: PUSH
4179: LD_INT 1
4181: ST_TO_ADDR
// hc_sex := sex_male ;
4182: LD_ADDR_OWVAR 27
4186: PUSH
4187: LD_INT 1
4189: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
4190: LD_ADDR_OWVAR 29
4194: PUSH
4195: LD_INT 12
4197: PUSH
4198: LD_INT 12
4200: PUSH
4201: EMPTY
4202: LIST
4203: LIST
4204: ST_TO_ADDR
// Leopold := CreateHuman ;
4205: LD_ADDR_EXP 7
4209: PUSH
4210: CALL_OW 44
4214: ST_TO_ADDR
// PlaceUnitArea ( Leopold , north_spawn , false ) ;
4215: LD_EXP 7
4219: PPUSH
4220: LD_INT 3
4222: PPUSH
4223: LD_INT 0
4225: PPUSH
4226: CALL_OW 49
// end ; end_of_file
4230: LD_VAR 0 1
4234: RET
// on SailEvent ( num ) do var i , filter , un , p , area ;
4235: LD_INT 0
4237: PPUSH
4238: PPUSH
4239: PPUSH
4240: PPUSH
4241: PPUSH
// begin case num of 1 :
4242: LD_VAR 0 1
4246: PUSH
4247: LD_INT 1
4249: DOUBLE
4250: EQUAL
4251: IFTRUE 4255
4253: GO 4287
4255: POP
// begin ComMoveXY ( leopold , GetX ( l_cmndr ) , GetY ( l_cmndr ) ) ;
4256: LD_EXP 7
4260: PPUSH
4261: LD_EXP 49
4265: PPUSH
4266: CALL_OW 250
4270: PPUSH
4271: LD_EXP 49
4275: PPUSH
4276: CALL_OW 251
4280: PPUSH
4281: CALL_OW 111
// end ; 2 :
4285: GO 6705
4287: LD_INT 2
4289: DOUBLE
4290: EQUAL
4291: IFTRUE 4295
4293: GO 4404
4295: POP
// begin InGameOn ;
4296: CALL_OW 8
// meeting_start := true ;
4300: LD_ADDR_EXP 26
4304: PUSH
4305: LD_INT 1
4307: ST_TO_ADDR
// ComTurnUnit ( leopold , l_cmndr ) ;
4308: LD_EXP 7
4312: PPUSH
4313: LD_EXP 49
4317: PPUSH
4318: CALL_OW 119
// ComTurnUnit ( l_cmndr , leopold ) ;
4322: LD_EXP 49
4326: PPUSH
4327: LD_EXP 7
4331: PPUSH
4332: CALL_OW 119
// Say ( leopold , DS-DL-1 ) ;
4336: LD_EXP 7
4340: PPUSH
4341: LD_STRING DS-DL-1
4343: PPUSH
4344: CALL_OW 88
// Say ( l_cmndr , DS-DC-1 ) ;
4348: LD_EXP 49
4352: PPUSH
4353: LD_STRING DS-DC-1
4355: PPUSH
4356: CALL_OW 88
// Say ( leopold , DS-DL-2 ) ;
4360: LD_EXP 7
4364: PPUSH
4365: LD_STRING DS-DL-2
4367: PPUSH
4368: CALL_OW 88
// ComEnterUnit ( leopold , fort ) ;
4372: LD_EXP 7
4376: PPUSH
4377: LD_INT 23
4379: PPUSH
4380: CALL_OW 120
// InGameOff ;
4384: CALL_OW 9
// Wait ( 0 0$01 ) ;
4388: LD_INT 35
4390: PPUSH
4391: CALL_OW 67
// ChangeMissionObjectives ( DS-T1 ) ;
4395: LD_STRING DS-T1
4397: PPUSH
4398: CALL_OW 337
// end ; 10 :
4402: GO 6705
4404: LD_INT 10
4406: DOUBLE
4407: EQUAL
4408: IFTRUE 4412
4410: GO 4624
4412: POP
// begin uc_side := 6 ;
4413: LD_ADDR_OWVAR 20
4417: PUSH
4418: LD_INT 6
4420: ST_TO_ADDR
// uc_nation := 2 ;
4421: LD_ADDR_OWVAR 21
4425: PUSH
4426: LD_INT 2
4428: ST_TO_ADDR
// hc_gallery :=  ;
4429: LD_ADDR_OWVAR 33
4433: PUSH
4434: LD_STRING 
4436: ST_TO_ADDR
// hc_skills := [ skill + 2 , skill - 1 , skill , skill + 1 ] ;
4437: LD_ADDR_OWVAR 31
4441: PUSH
4442: LD_EXP 16
4446: PUSH
4447: LD_INT 2
4449: PLUS
4450: PUSH
4451: LD_EXP 16
4455: PUSH
4456: LD_INT 1
4458: MINUS
4459: PUSH
4460: LD_EXP 16
4464: PUSH
4465: LD_EXP 16
4469: PUSH
4470: LD_INT 1
4472: PLUS
4473: PUSH
4474: EMPTY
4475: LIST
4476: LIST
4477: LIST
4478: LIST
4479: ST_TO_ADDR
// hc_sex := sex_male ;
4480: LD_ADDR_OWVAR 27
4484: PUSH
4485: LD_INT 1
4487: ST_TO_ADDR
// hc_name := Samuel van Horn ;
4488: LD_ADDR_OWVAR 26
4492: PUSH
4493: LD_STRING Samuel van Horn
4495: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
4496: LD_ADDR_OWVAR 29
4500: PUSH
4501: LD_INT 11
4503: PUSH
4504: LD_INT 10
4506: PUSH
4507: EMPTY
4508: LIST
4509: LIST
4510: ST_TO_ADDR
// hc_class := 1 ;
4511: LD_ADDR_OWVAR 28
4515: PUSH
4516: LD_INT 1
4518: ST_TO_ADDR
// samuel := CreateHuman ;
4519: LD_ADDR_EXP 9
4523: PUSH
4524: CALL_OW 44
4528: ST_TO_ADDR
// PlaceUnitArea ( samuel , south_spawn , false ) ;
4529: LD_EXP 9
4533: PPUSH
4534: LD_INT 4
4536: PPUSH
4537: LD_INT 0
4539: PPUSH
4540: CALL_OW 49
// for i = 1 to 3 do
4544: LD_ADDR_VAR 0 2
4548: PUSH
4549: DOUBLE
4550: LD_INT 1
4552: DEC
4553: ST_TO_ADDR
4554: LD_INT 3
4556: PUSH
4557: FOR_TO
4558: IFFALSE 4585
// PlaceUnitArea ( CreateHumanWithClass ( class_mortar , skill ) , south_spawn , false ) ;
4560: LD_INT 8
4562: PPUSH
4563: LD_EXP 16
4567: PPUSH
4568: CALL 7312 0 2
4572: PPUSH
4573: LD_INT 4
4575: PPUSH
4576: LD_INT 0
4578: PPUSH
4579: CALL_OW 49
4583: GO 4557
4585: POP
4586: POP
// ComEnterUnit ( FilterAllUnits ( [ f_side , 6 ] ) diff [ leopold , fort ] , fort ) ;
4587: LD_INT 22
4589: PUSH
4590: LD_INT 6
4592: PUSH
4593: EMPTY
4594: LIST
4595: LIST
4596: PPUSH
4597: CALL_OW 69
4601: PUSH
4602: LD_EXP 7
4606: PUSH
4607: LD_INT 23
4609: PUSH
4610: EMPTY
4611: LIST
4612: LIST
4613: DIFF
4614: PPUSH
4615: LD_INT 23
4617: PPUSH
4618: CALL_OW 120
// end ; 3 :
4622: GO 6705
4624: LD_INT 3
4626: DOUBLE
4627: EQUAL
4628: IFTRUE 4632
4630: GO 4643
4632: POP
// begin arabian_attack := true ;
4633: LD_ADDR_EXP 38
4637: PUSH
4638: LD_INT 1
4640: ST_TO_ADDR
// end ; 4 :
4641: GO 6705
4643: LD_INT 4
4645: DOUBLE
4646: EQUAL
4647: IFTRUE 4651
4649: GO 4662
4651: POP
// begin american_attack := true ;
4652: LD_ADDR_EXP 40
4656: PUSH
4657: LD_INT 1
4659: ST_TO_ADDR
// end ; 5 :
4660: GO 6705
4662: LD_INT 5
4664: DOUBLE
4665: EQUAL
4666: IFTRUE 4670
4668: GO 4681
4670: POP
// begin russian_attack := true ;
4671: LD_ADDR_EXP 39
4675: PUSH
4676: LD_INT 1
4678: ST_TO_ADDR
// end ; 31 :
4679: GO 6705
4681: LD_INT 31
4683: DOUBLE
4684: EQUAL
4685: IFTRUE 4689
4687: GO 4964
4689: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
4690: LD_ADDR_VAR 0 6
4694: PUSH
4695: LD_EXP 15
4699: PUSH
4700: LD_INT 1
4702: PPUSH
4703: LD_EXP 15
4707: PPUSH
4708: CALL_OW 12
4712: ARRAY
4713: ST_TO_ADDR
// uc_side := 2 ;
4714: LD_ADDR_OWVAR 20
4718: PUSH
4719: LD_INT 2
4721: ST_TO_ADDR
// uc_nation := 2 ;
4722: LD_ADDR_OWVAR 21
4726: PUSH
4727: LD_INT 2
4729: ST_TO_ADDR
// for i = 1 to arabian_force do
4730: LD_ADDR_VAR 0 2
4734: PUSH
4735: DOUBLE
4736: LD_INT 1
4738: DEC
4739: ST_TO_ADDR
4740: LD_EXP 20
4744: PUSH
4745: FOR_TO
4746: IFFALSE 4825
// begin vc_chassis := ar_half_tracked ;
4748: LD_ADDR_OWVAR 37
4752: PUSH
4753: LD_INT 14
4755: ST_TO_ADDR
// vc_engine := engine_siberite ;
4756: LD_ADDR_OWVAR 39
4760: PUSH
4761: LD_INT 3
4763: ST_TO_ADDR
// vc_control := control_remote ;
4764: LD_ADDR_OWVAR 38
4768: PUSH
4769: LD_INT 2
4771: ST_TO_ADDR
// vc_weapon := ar_weapons [ Rand ( 1 , ar_weapons ) ] ;
4772: LD_ADDR_OWVAR 40
4776: PUSH
4777: LD_EXP 17
4781: PUSH
4782: LD_INT 1
4784: PPUSH
4785: LD_EXP 17
4789: PPUSH
4790: CALL_OW 12
4794: ARRAY
4795: ST_TO_ADDR
// un := CreateVehicle ;
4796: LD_ADDR_VAR 0 4
4800: PUSH
4801: CALL_OW 45
4805: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
4806: LD_VAR 0 4
4810: PPUSH
4811: LD_VAR 0 6
4815: PPUSH
4816: LD_INT 0
4818: PPUSH
4819: CALL_OW 49
// end ;
4823: GO 4745
4825: POP
4826: POP
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_manual ] ] ) < 2 then
4827: LD_INT 22
4829: PUSH
4830: LD_INT 2
4832: PUSH
4833: EMPTY
4834: LIST
4835: LIST
4836: PUSH
4837: LD_INT 33
4839: PUSH
4840: LD_INT 1
4842: PUSH
4843: EMPTY
4844: LIST
4845: LIST
4846: PUSH
4847: EMPTY
4848: LIST
4849: LIST
4850: PPUSH
4851: CALL_OW 69
4855: PUSH
4856: LD_INT 2
4858: LESS
4859: IFFALSE 4962
// for i = 1 to 2 do
4861: LD_ADDR_VAR 0 2
4865: PUSH
4866: DOUBLE
4867: LD_INT 1
4869: DEC
4870: ST_TO_ADDR
4871: LD_INT 2
4873: PUSH
4874: FOR_TO
4875: IFFALSE 4960
// begin vc_chassis := ar_half_tracked ;
4877: LD_ADDR_OWVAR 37
4881: PUSH
4882: LD_INT 14
4884: ST_TO_ADDR
// vc_engine := engine_siberite ;
4885: LD_ADDR_OWVAR 39
4889: PUSH
4890: LD_INT 3
4892: ST_TO_ADDR
// vc_control := control_manual ;
4893: LD_ADDR_OWVAR 38
4897: PUSH
4898: LD_INT 1
4900: ST_TO_ADDR
// vc_weapon := ar_control_tower ;
4901: LD_ADDR_OWVAR 40
4905: PUSH
4906: LD_INT 31
4908: ST_TO_ADDR
// un := CreateVehicle ;
4909: LD_ADDR_VAR 0 4
4913: PUSH
4914: CALL_OW 45
4918: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
4919: LD_VAR 0 4
4923: PPUSH
4924: LD_VAR 0 6
4928: PPUSH
4929: LD_INT 0
4931: PPUSH
4932: CALL_OW 49
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , skill ) , un ) ;
4936: LD_INT 3
4938: PPUSH
4939: LD_EXP 16
4943: PPUSH
4944: CALL 7312 0 2
4948: PPUSH
4949: LD_VAR 0 4
4953: PPUSH
4954: CALL_OW 52
// end ;
4958: GO 4874
4960: POP
4961: POP
// end ; 32 :
4962: GO 6705
4964: LD_INT 32
4966: DOUBLE
4967: EQUAL
4968: IFTRUE 4972
4970: GO 5345
4972: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
4973: LD_ADDR_VAR 0 6
4977: PUSH
4978: LD_EXP 15
4982: PUSH
4983: LD_INT 1
4985: PPUSH
4986: LD_EXP 15
4990: PPUSH
4991: CALL_OW 12
4995: ARRAY
4996: ST_TO_ADDR
// uc_side := 2 ;
4997: LD_ADDR_OWVAR 20
5001: PUSH
5002: LD_INT 2
5004: ST_TO_ADDR
// uc_nation := 2 ;
5005: LD_ADDR_OWVAR 21
5009: PUSH
5010: LD_INT 2
5012: ST_TO_ADDR
// for i = 1 to ( arabian_force - 2 ) do
5013: LD_ADDR_VAR 0 2
5017: PUSH
5018: DOUBLE
5019: LD_INT 1
5021: DEC
5022: ST_TO_ADDR
5023: LD_EXP 20
5027: PUSH
5028: LD_INT 2
5030: MINUS
5031: PUSH
5032: FOR_TO
5033: IFFALSE 5116
// begin vc_chassis := ar_half_tracked ;
5035: LD_ADDR_OWVAR 37
5039: PUSH
5040: LD_INT 14
5042: ST_TO_ADDR
// vc_engine := engine_siberite ;
5043: LD_ADDR_OWVAR 39
5047: PUSH
5048: LD_INT 3
5050: ST_TO_ADDR
// vc_control := control_remote ;
5051: LD_ADDR_OWVAR 38
5055: PUSH
5056: LD_INT 2
5058: ST_TO_ADDR
// vc_weapon := ar_weapons [ Rand ( 1 , ar_weapons - 1 ) ] ;
5059: LD_ADDR_OWVAR 40
5063: PUSH
5064: LD_EXP 17
5068: PUSH
5069: LD_INT 1
5071: PPUSH
5072: LD_EXP 17
5076: PUSH
5077: LD_INT 1
5079: MINUS
5080: PPUSH
5081: CALL_OW 12
5085: ARRAY
5086: ST_TO_ADDR
// un := CreateVehicle ;
5087: LD_ADDR_VAR 0 4
5091: PUSH
5092: CALL_OW 45
5096: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5097: LD_VAR 0 4
5101: PPUSH
5102: LD_VAR 0 6
5106: PPUSH
5107: LD_INT 0
5109: PPUSH
5110: CALL_OW 49
// end ;
5114: GO 5032
5116: POP
5117: POP
// for i = 1 to Rand ( 0 , 1 ) + [ 2 , 3 , 3 ] [ game_difficulty ] do
5118: LD_ADDR_VAR 0 2
5122: PUSH
5123: DOUBLE
5124: LD_INT 1
5126: DEC
5127: ST_TO_ADDR
5128: LD_INT 0
5130: PPUSH
5131: LD_INT 1
5133: PPUSH
5134: CALL_OW 12
5138: PUSH
5139: LD_INT 2
5141: PUSH
5142: LD_INT 3
5144: PUSH
5145: LD_INT 3
5147: PUSH
5148: EMPTY
5149: LIST
5150: LIST
5151: LIST
5152: PUSH
5153: LD_EXP 2
5157: ARRAY
5158: PLUS
5159: PUSH
5160: FOR_TO
5161: IFFALSE 5198
// begin uc_nation := 0 ;
5163: LD_ADDR_OWVAR 21
5167: PUSH
5168: LD_INT 0
5170: ST_TO_ADDR
// PlaceUnitArea ( CreateHumanWithClass ( 17 , skill ) , area , false ) ;
5171: LD_INT 17
5173: PPUSH
5174: LD_EXP 16
5178: PPUSH
5179: CALL 7312 0 2
5183: PPUSH
5184: LD_VAR 0 6
5188: PPUSH
5189: LD_INT 0
5191: PPUSH
5192: CALL_OW 49
// end ;
5196: GO 5160
5198: POP
5199: POP
// uc_nation := 2 ;
5200: LD_ADDR_OWVAR 21
5204: PUSH
5205: LD_INT 2
5207: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_manual ] ] ) < 2 then
5208: LD_INT 22
5210: PUSH
5211: LD_INT 2
5213: PUSH
5214: EMPTY
5215: LIST
5216: LIST
5217: PUSH
5218: LD_INT 33
5220: PUSH
5221: LD_INT 1
5223: PUSH
5224: EMPTY
5225: LIST
5226: LIST
5227: PUSH
5228: EMPTY
5229: LIST
5230: LIST
5231: PPUSH
5232: CALL_OW 69
5236: PUSH
5237: LD_INT 2
5239: LESS
5240: IFFALSE 5343
// for i = 1 to 2 do
5242: LD_ADDR_VAR 0 2
5246: PUSH
5247: DOUBLE
5248: LD_INT 1
5250: DEC
5251: ST_TO_ADDR
5252: LD_INT 2
5254: PUSH
5255: FOR_TO
5256: IFFALSE 5341
// begin vc_chassis := ar_half_tracked ;
5258: LD_ADDR_OWVAR 37
5262: PUSH
5263: LD_INT 14
5265: ST_TO_ADDR
// vc_engine := engine_siberite ;
5266: LD_ADDR_OWVAR 39
5270: PUSH
5271: LD_INT 3
5273: ST_TO_ADDR
// vc_control := control_manual ;
5274: LD_ADDR_OWVAR 38
5278: PUSH
5279: LD_INT 1
5281: ST_TO_ADDR
// vc_weapon := ar_control_tower ;
5282: LD_ADDR_OWVAR 40
5286: PUSH
5287: LD_INT 31
5289: ST_TO_ADDR
// un := CreateVehicle ;
5290: LD_ADDR_VAR 0 4
5294: PUSH
5295: CALL_OW 45
5299: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5300: LD_VAR 0 4
5304: PPUSH
5305: LD_VAR 0 6
5309: PPUSH
5310: LD_INT 0
5312: PPUSH
5313: CALL_OW 49
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , skill ) , un ) ;
5317: LD_INT 3
5319: PPUSH
5320: LD_EXP 16
5324: PPUSH
5325: CALL 7312 0 2
5329: PPUSH
5330: LD_VAR 0 4
5334: PPUSH
5335: CALL_OW 52
// end ;
5339: GO 5255
5341: POP
5342: POP
// end ; 33 :
5343: GO 6705
5345: LD_INT 33
5347: DOUBLE
5348: EQUAL
5349: IFTRUE 5353
5351: GO 5624
5353: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
5354: LD_ADDR_VAR 0 6
5358: PUSH
5359: LD_EXP 15
5363: PUSH
5364: LD_INT 1
5366: PPUSH
5367: LD_EXP 15
5371: PPUSH
5372: CALL_OW 12
5376: ARRAY
5377: ST_TO_ADDR
// uc_side := 2 ;
5378: LD_ADDR_OWVAR 20
5382: PUSH
5383: LD_INT 2
5385: ST_TO_ADDR
// uc_nation := 2 ;
5386: LD_ADDR_OWVAR 21
5390: PUSH
5391: LD_INT 2
5393: ST_TO_ADDR
// for i = 1 to ( arabian_force / 2 ) do
5394: LD_ADDR_VAR 0 2
5398: PUSH
5399: DOUBLE
5400: LD_INT 1
5402: DEC
5403: ST_TO_ADDR
5404: LD_EXP 20
5408: PUSH
5409: LD_INT 2
5411: DIVREAL
5412: PUSH
5413: FOR_TO
5414: IFFALSE 5519
// begin vc_chassis := ar_half_tracked ;
5416: LD_ADDR_OWVAR 37
5420: PUSH
5421: LD_INT 14
5423: ST_TO_ADDR
// vc_engine := engine_siberite ;
5424: LD_ADDR_OWVAR 39
5428: PUSH
5429: LD_INT 3
5431: ST_TO_ADDR
// vc_control := control_manual ;
5432: LD_ADDR_OWVAR 38
5436: PUSH
5437: LD_INT 1
5439: ST_TO_ADDR
// vc_weapon := ar_weapons [ Rand ( 1 , ar_weapons - 2 ) ] ;
5440: LD_ADDR_OWVAR 40
5444: PUSH
5445: LD_EXP 17
5449: PUSH
5450: LD_INT 1
5452: PPUSH
5453: LD_EXP 17
5457: PUSH
5458: LD_INT 2
5460: MINUS
5461: PPUSH
5462: CALL_OW 12
5466: ARRAY
5467: ST_TO_ADDR
// un := CreateVehicle ;
5468: LD_ADDR_VAR 0 4
5472: PUSH
5473: CALL_OW 45
5477: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5478: LD_VAR 0 4
5482: PPUSH
5483: LD_VAR 0 6
5487: PPUSH
5488: LD_INT 0
5490: PPUSH
5491: CALL_OW 49
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , skill ) , un ) ;
5495: LD_INT 3
5497: PPUSH
5498: LD_EXP 16
5502: PPUSH
5503: CALL 7312 0 2
5507: PPUSH
5508: LD_VAR 0 4
5512: PPUSH
5513: CALL_OW 52
// end ;
5517: GO 5413
5519: POP
5520: POP
// for i = 1 to ( arabian_force / 2 ) do
5521: LD_ADDR_VAR 0 2
5525: PUSH
5526: DOUBLE
5527: LD_INT 1
5529: DEC
5530: ST_TO_ADDR
5531: LD_EXP 20
5535: PUSH
5536: LD_INT 2
5538: DIVREAL
5539: PUSH
5540: FOR_TO
5541: IFFALSE 5620
// begin vc_chassis := ar_half_tracked ;
5543: LD_ADDR_OWVAR 37
5547: PUSH
5548: LD_INT 14
5550: ST_TO_ADDR
// vc_engine := engine_siberite ;
5551: LD_ADDR_OWVAR 39
5555: PUSH
5556: LD_INT 3
5558: ST_TO_ADDR
// vc_control := control_apeman ;
5559: LD_ADDR_OWVAR 38
5563: PUSH
5564: LD_INT 5
5566: ST_TO_ADDR
// vc_weapon := ar_weapons [ Rand ( 2 , ar_weapons ) ] ;
5567: LD_ADDR_OWVAR 40
5571: PUSH
5572: LD_EXP 17
5576: PUSH
5577: LD_INT 2
5579: PPUSH
5580: LD_EXP 17
5584: PPUSH
5585: CALL_OW 12
5589: ARRAY
5590: ST_TO_ADDR
// un := CreateVehicle ;
5591: LD_ADDR_VAR 0 4
5595: PUSH
5596: CALL_OW 45
5600: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5601: LD_VAR 0 4
5605: PPUSH
5606: LD_VAR 0 6
5610: PPUSH
5611: LD_INT 0
5613: PPUSH
5614: CALL_OW 49
// end ;
5618: GO 5540
5620: POP
5621: POP
// end ; 41 :
5622: GO 6705
5624: LD_INT 41
5626: DOUBLE
5627: EQUAL
5628: IFTRUE 5632
5630: GO 5776
5632: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
5633: LD_ADDR_VAR 0 6
5637: PUSH
5638: LD_EXP 15
5642: PUSH
5643: LD_INT 1
5645: PPUSH
5646: LD_EXP 15
5650: PPUSH
5651: CALL_OW 12
5655: ARRAY
5656: ST_TO_ADDR
// uc_side := 1 ;
5657: LD_ADDR_OWVAR 20
5661: PUSH
5662: LD_INT 1
5664: ST_TO_ADDR
// uc_nation := 1 ;
5665: LD_ADDR_OWVAR 21
5669: PUSH
5670: LD_INT 1
5672: ST_TO_ADDR
// for i = 1 to american_force do
5673: LD_ADDR_VAR 0 2
5677: PUSH
5678: DOUBLE
5679: LD_INT 1
5681: DEC
5682: ST_TO_ADDR
5683: LD_EXP 22
5687: PUSH
5688: FOR_TO
5689: IFFALSE 5772
// begin vc_chassis := us_morphling ;
5691: LD_ADDR_OWVAR 37
5695: PUSH
5696: LD_INT 5
5698: ST_TO_ADDR
// vc_engine := engine_siberite ;
5699: LD_ADDR_OWVAR 39
5703: PUSH
5704: LD_INT 3
5706: ST_TO_ADDR
// vc_control := control_computer ;
5707: LD_ADDR_OWVAR 38
5711: PUSH
5712: LD_INT 3
5714: ST_TO_ADDR
// vc_weapon := us_weapons [ Rand ( 1 , us_weapons - 1 ) ] ;
5715: LD_ADDR_OWVAR 40
5719: PUSH
5720: LD_EXP 19
5724: PUSH
5725: LD_INT 1
5727: PPUSH
5728: LD_EXP 19
5732: PUSH
5733: LD_INT 1
5735: MINUS
5736: PPUSH
5737: CALL_OW 12
5741: ARRAY
5742: ST_TO_ADDR
// un := CreateVehicle ;
5743: LD_ADDR_VAR 0 4
5747: PUSH
5748: CALL_OW 45
5752: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5753: LD_VAR 0 4
5757: PPUSH
5758: LD_VAR 0 6
5762: PPUSH
5763: LD_INT 0
5765: PPUSH
5766: CALL_OW 49
// end ;
5770: GO 5688
5772: POP
5773: POP
// end ; 42 :
5774: GO 6705
5776: LD_INT 42
5778: DOUBLE
5779: EQUAL
5780: IFTRUE 5784
5782: GO 5924
5784: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
5785: LD_ADDR_VAR 0 6
5789: PUSH
5790: LD_EXP 15
5794: PUSH
5795: LD_INT 1
5797: PPUSH
5798: LD_EXP 15
5802: PPUSH
5803: CALL_OW 12
5807: ARRAY
5808: ST_TO_ADDR
// uc_side := 1 ;
5809: LD_ADDR_OWVAR 20
5813: PUSH
5814: LD_INT 1
5816: ST_TO_ADDR
// uc_nation := 1 ;
5817: LD_ADDR_OWVAR 21
5821: PUSH
5822: LD_INT 1
5824: ST_TO_ADDR
// for i = 1 to american_force do
5825: LD_ADDR_VAR 0 2
5829: PUSH
5830: DOUBLE
5831: LD_INT 1
5833: DEC
5834: ST_TO_ADDR
5835: LD_EXP 22
5839: PUSH
5840: FOR_TO
5841: IFFALSE 5920
// begin vc_chassis := us_morphling ;
5843: LD_ADDR_OWVAR 37
5847: PUSH
5848: LD_INT 5
5850: ST_TO_ADDR
// vc_engine := engine_siberite ;
5851: LD_ADDR_OWVAR 39
5855: PUSH
5856: LD_INT 3
5858: ST_TO_ADDR
// vc_control := control_computer ;
5859: LD_ADDR_OWVAR 38
5863: PUSH
5864: LD_INT 3
5866: ST_TO_ADDR
// vc_weapon := us_weapons [ Rand ( 1 , us_weapons ) ] ;
5867: LD_ADDR_OWVAR 40
5871: PUSH
5872: LD_EXP 19
5876: PUSH
5877: LD_INT 1
5879: PPUSH
5880: LD_EXP 19
5884: PPUSH
5885: CALL_OW 12
5889: ARRAY
5890: ST_TO_ADDR
// un := CreateVehicle ;
5891: LD_ADDR_VAR 0 4
5895: PUSH
5896: CALL_OW 45
5900: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5901: LD_VAR 0 4
5905: PPUSH
5906: LD_VAR 0 6
5910: PPUSH
5911: LD_INT 0
5913: PPUSH
5914: CALL_OW 49
// end ;
5918: GO 5840
5920: POP
5921: POP
// end ; 51 :
5922: GO 6705
5924: LD_INT 51
5926: DOUBLE
5927: EQUAL
5928: IFTRUE 5932
5930: GO 6072
5932: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
5933: LD_ADDR_VAR 0 6
5937: PUSH
5938: LD_EXP 15
5942: PUSH
5943: LD_INT 1
5945: PPUSH
5946: LD_EXP 15
5950: PPUSH
5951: CALL_OW 12
5955: ARRAY
5956: ST_TO_ADDR
// uc_side := 3 ;
5957: LD_ADDR_OWVAR 20
5961: PUSH
5962: LD_INT 3
5964: ST_TO_ADDR
// uc_nation := 3 ;
5965: LD_ADDR_OWVAR 21
5969: PUSH
5970: LD_INT 3
5972: ST_TO_ADDR
// for i = 1 to russian_force do
5973: LD_ADDR_VAR 0 2
5977: PUSH
5978: DOUBLE
5979: LD_INT 1
5981: DEC
5982: ST_TO_ADDR
5983: LD_EXP 21
5987: PUSH
5988: FOR_TO
5989: IFFALSE 6068
// begin vc_chassis := ru_heavy_tracked ;
5991: LD_ADDR_OWVAR 37
5995: PUSH
5996: LD_INT 24
5998: ST_TO_ADDR
// vc_engine := engine_siberite ;
5999: LD_ADDR_OWVAR 39
6003: PUSH
6004: LD_INT 3
6006: ST_TO_ADDR
// vc_control := control_computer ;
6007: LD_ADDR_OWVAR 38
6011: PUSH
6012: LD_INT 3
6014: ST_TO_ADDR
// vc_weapon := ru_weapons [ Rand ( 1 , ru_weapons ) ] ;
6015: LD_ADDR_OWVAR 40
6019: PUSH
6020: LD_EXP 18
6024: PUSH
6025: LD_INT 1
6027: PPUSH
6028: LD_EXP 18
6032: PPUSH
6033: CALL_OW 12
6037: ARRAY
6038: ST_TO_ADDR
// un := CreateVehicle ;
6039: LD_ADDR_VAR 0 4
6043: PUSH
6044: CALL_OW 45
6048: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
6049: LD_VAR 0 4
6053: PPUSH
6054: LD_VAR 0 6
6058: PPUSH
6059: LD_INT 0
6061: PPUSH
6062: CALL_OW 49
// end ;
6066: GO 5988
6068: POP
6069: POP
// end ; 91 :
6070: GO 6705
6072: LD_INT 91
6074: DOUBLE
6075: EQUAL
6076: IFTRUE 6080
6078: GO 6218
6080: POP
// begin uc_side := 8 ;
6081: LD_ADDR_OWVAR 20
6085: PUSH
6086: LD_INT 8
6088: ST_TO_ADDR
// uc_nation := 1 ;
6089: LD_ADDR_OWVAR 21
6093: PUSH
6094: LD_INT 1
6096: ST_TO_ADDR
// for i = 1 to [ 4 , 3 , 3 ] [ game_difficulty ] do
6097: LD_ADDR_VAR 0 2
6101: PUSH
6102: DOUBLE
6103: LD_INT 1
6105: DEC
6106: ST_TO_ADDR
6107: LD_INT 4
6109: PUSH
6110: LD_INT 3
6112: PUSH
6113: LD_INT 3
6115: PUSH
6116: EMPTY
6117: LIST
6118: LIST
6119: LIST
6120: PUSH
6121: LD_EXP 2
6125: ARRAY
6126: PUSH
6127: FOR_TO
6128: IFFALSE 6214
// begin vc_chassis := us_heavy_tracked ;
6130: LD_ADDR_OWVAR 37
6134: PUSH
6135: LD_INT 4
6137: ST_TO_ADDR
// vc_engine := engine_siberite ;
6138: LD_ADDR_OWVAR 39
6142: PUSH
6143: LD_INT 3
6145: ST_TO_ADDR
// vc_control := control_computer ;
6146: LD_ADDR_OWVAR 38
6150: PUSH
6151: LD_INT 3
6153: ST_TO_ADDR
// vc_weapon := [ us_double_gun , us_heavy_gun ] [ Rand ( 1 , 2 ) ] ;
6154: LD_ADDR_OWVAR 40
6158: PUSH
6159: LD_INT 5
6161: PUSH
6162: LD_INT 6
6164: PUSH
6165: EMPTY
6166: LIST
6167: LIST
6168: PUSH
6169: LD_INT 1
6171: PPUSH
6172: LD_INT 2
6174: PPUSH
6175: CALL_OW 12
6179: ARRAY
6180: ST_TO_ADDR
// un := CreateVehicle ;
6181: LD_ADDR_VAR 0 4
6185: PUSH
6186: CALL_OW 45
6190: ST_TO_ADDR
// PlaceUnitArea ( un , areas [ 1 ] , false ) ;
6191: LD_VAR 0 4
6195: PPUSH
6196: LD_EXP 15
6200: PUSH
6201: LD_INT 1
6203: ARRAY
6204: PPUSH
6205: LD_INT 0
6207: PPUSH
6208: CALL_OW 49
// end ;
6212: GO 6127
6214: POP
6215: POP
// end ; 92 :
6216: GO 6705
6218: LD_INT 92
6220: DOUBLE
6221: EQUAL
6222: IFTRUE 6226
6224: GO 6555
6226: POP
// begin uc_side := 5 ;
6227: LD_ADDR_OWVAR 20
6231: PUSH
6232: LD_INT 5
6234: ST_TO_ADDR
// uc_nation := 2 ;
6235: LD_ADDR_OWVAR 21
6239: PUSH
6240: LD_INT 2
6242: ST_TO_ADDR
// filter := [ ] ;
6243: LD_ADDR_VAR 0 3
6247: PUSH
6248: EMPTY
6249: ST_TO_ADDR
// InitHc ;
6250: CALL_OW 19
// PrepareHuman ( false , 1 , l_skill ) ;
6254: LD_INT 0
6256: PPUSH
6257: LD_INT 1
6259: PPUSH
6260: LD_EXP 50
6264: PPUSH
6265: CALL_OW 380
// un := CreateHuman ;
6269: LD_ADDR_VAR 0 4
6273: PUSH
6274: CALL_OW 44
6278: ST_TO_ADDR
// filter := filter ^ un ;
6279: LD_ADDR_VAR 0 3
6283: PUSH
6284: LD_VAR 0 3
6288: PUSH
6289: LD_VAR 0 4
6293: ADD
6294: ST_TO_ADDR
// for i = 1 to [ 4 , 3 , 2 ] [ game_difficulty ] do
6295: LD_ADDR_VAR 0 2
6299: PUSH
6300: DOUBLE
6301: LD_INT 1
6303: DEC
6304: ST_TO_ADDR
6305: LD_INT 4
6307: PUSH
6308: LD_INT 3
6310: PUSH
6311: LD_INT 2
6313: PUSH
6314: EMPTY
6315: LIST
6316: LIST
6317: LIST
6318: PUSH
6319: LD_EXP 2
6323: ARRAY
6324: PUSH
6325: FOR_TO
6326: IFFALSE 6364
// begin un := CreateHumanWithClass ( 1 , l_skill ) ;
6328: LD_ADDR_VAR 0 4
6332: PUSH
6333: LD_INT 1
6335: PPUSH
6336: LD_EXP 50
6340: PPUSH
6341: CALL 7312 0 2
6345: ST_TO_ADDR
// filter := filter ^ un ;
6346: LD_ADDR_VAR 0 3
6350: PUSH
6351: LD_VAR 0 3
6355: PUSH
6356: LD_VAR 0 4
6360: ADD
6361: ST_TO_ADDR
// end ;
6362: GO 6325
6364: POP
6365: POP
// DialogueOn ;
6366: CALL_OW 6
// if GetSex ( filter [ 1 ] ) = sex_male then
6370: LD_VAR 0 3
6374: PUSH
6375: LD_INT 1
6377: ARRAY
6378: PPUSH
6379: CALL_OW 258
6383: PUSH
6384: LD_INT 1
6386: EQUAL
6387: IFFALSE 6407
// SayRadio ( filter [ 1 ] , DS-DF-1 ) else
6389: LD_VAR 0 3
6393: PUSH
6394: LD_INT 1
6396: ARRAY
6397: PPUSH
6398: LD_STRING DS-DF-1
6400: PPUSH
6401: CALL_OW 94
6405: GO 6423
// SayRadio ( filter [ 1 ] , DS-DF-f1 ) ;
6407: LD_VAR 0 3
6411: PUSH
6412: LD_INT 1
6414: ARRAY
6415: PPUSH
6416: LD_STRING DS-DF-f1
6418: PPUSH
6419: CALL_OW 94
// case Query ( DS-dezert ) of 1 :
6423: LD_STRING DS-dezert
6425: PPUSH
6426: CALL_OW 97
6430: PUSH
6431: LD_INT 1
6433: DOUBLE
6434: EQUAL
6435: IFTRUE 6439
6437: GO 6454
6439: POP
// Say ( l_cmndr , DS-DC-dis ) ; 2 :
6440: LD_EXP 49
6444: PPUSH
6445: LD_STRING DS-DC-dis
6447: PPUSH
6448: CALL_OW 88
6452: GO 6549
6454: LD_INT 2
6456: DOUBLE
6457: EQUAL
6458: IFTRUE 6462
6460: GO 6548
6462: POP
// begin Say ( l_cmndr , DS-DC-acp ) ;
6463: LD_EXP 49
6467: PPUSH
6468: LD_STRING DS-DC-acp
6470: PPUSH
6471: CALL_OW 88
// for i = 1 to filter do
6475: LD_ADDR_VAR 0 2
6479: PUSH
6480: DOUBLE
6481: LD_INT 1
6483: DEC
6484: ST_TO_ADDR
6485: LD_VAR 0 3
6489: PUSH
6490: FOR_TO
6491: IFFALSE 6544
// begin SetSide ( filter [ i ] , 8 ) ;
6493: LD_VAR 0 3
6497: PUSH
6498: LD_VAR 0 2
6502: ARRAY
6503: PPUSH
6504: LD_INT 8
6506: PPUSH
6507: CALL_OW 235
// PlaceUnitArea ( filter [ i ] , south_spawn , false ) ;
6511: LD_VAR 0 3
6515: PUSH
6516: LD_VAR 0 2
6520: ARRAY
6521: PPUSH
6522: LD_INT 4
6524: PPUSH
6525: LD_INT 0
6527: PPUSH
6528: CALL_OW 49
// CenterNowOnXY ( 111 , 121 ) ;
6532: LD_INT 111
6534: PPUSH
6535: LD_INT 121
6537: PPUSH
6538: CALL_OW 86
// end ;
6542: GO 6490
6544: POP
6545: POP
// end ; end ;
6546: GO 6549
6548: POP
// DialogueOff ;
6549: CALL_OW 7
// end ; 101 :
6553: GO 6705
6555: LD_INT 101
6557: DOUBLE
6558: EQUAL
6559: IFTRUE 6563
6561: GO 6615
6563: POP
// begin CreateCratesArea ( Rand ( 3 , 5 ) , crates_area , true ) ;
6564: LD_INT 3
6566: PPUSH
6567: LD_INT 5
6569: PPUSH
6570: CALL_OW 12
6574: PPUSH
6575: LD_INT 9
6577: PPUSH
6578: LD_INT 1
6580: PPUSH
6581: CALL_OW 55
// Wait ( 0 0$11 ) ;
6585: LD_INT 385
6587: PPUSH
6588: CALL_OW 67
// CreateCratesArea ( Rand ( 3 , 5 ) , crates_area , true ) ;
6592: LD_INT 3
6594: PPUSH
6595: LD_INT 5
6597: PPUSH
6598: CALL_OW 12
6602: PPUSH
6603: LD_INT 9
6605: PPUSH
6606: LD_INT 1
6608: PPUSH
6609: CALL_OW 55
// end ; 200 :
6613: GO 6705
6615: LD_INT 200
6617: DOUBLE
6618: EQUAL
6619: IFTRUE 6623
6621: GO 6704
6623: POP
// begin Say ( Leopold , DS-end ) ;
6624: LD_EXP 7
6628: PPUSH
6629: LD_STRING DS-end
6631: PPUSH
6632: CALL_OW 88
// if Difficulty = 3 then
6636: LD_OWVAR 67
6640: PUSH
6641: LD_INT 3
6643: EQUAL
6644: IFFALSE 6653
// SetAchievement ( ACH_DESERT ) ;
6646: LD_STRING ACH_DESERT
6648: PPUSH
6649: CALL_OW 543
// music_nat := 5 ;
6653: LD_ADDR_OWVAR 71
6657: PUSH
6658: LD_INT 5
6660: ST_TO_ADDR
// AddMedal ( med , 1 ) ;
6661: LD_STRING med
6663: PPUSH
6664: LD_INT 1
6666: PPUSH
6667: CALL_OW 101
// AddMedal ( med , 1 ) ;
6671: LD_STRING med
6673: PPUSH
6674: LD_INT 1
6676: PPUSH
6677: CALL_OW 101
// AddMedal ( med , 1 ) ;
6681: LD_STRING med
6683: PPUSH
6684: LD_INT 1
6686: PPUSH
6687: CALL_OW 101
// GiveMedals ( MAIN ) ;
6691: LD_STRING MAIN
6693: PPUSH
6694: CALL_OW 102
// YouWin ;
6698: CALL_OW 103
// end ; end ;
6702: GO 6705
6704: POP
// end ;
6705: PPOPN 6
6707: END
// on UnitGoesToRed ( un ) do begin if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) then
6708: LD_VAR 0 1
6712: PUSH
6713: LD_INT 22
6715: PUSH
6716: LD_INT 2
6718: PUSH
6719: EMPTY
6720: LIST
6721: LIST
6722: PUSH
6723: LD_INT 21
6725: PUSH
6726: LD_INT 2
6728: PUSH
6729: EMPTY
6730: LIST
6731: LIST
6732: PUSH
6733: EMPTY
6734: LIST
6735: LIST
6736: PPUSH
6737: CALL_OW 69
6741: IN
6742: IFFALSE 6867
// begin Wait ( Rand ( 0 0$03 , 0 0$06 ) ) ;
6744: LD_INT 105
6746: PPUSH
6747: LD_INT 210
6749: PPUSH
6750: CALL_OW 12
6754: PPUSH
6755: CALL_OW 67
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
6759: LD_VAR 0 1
6763: PPUSH
6764: CALL_OW 250
6768: PPUSH
6769: LD_VAR 0 1
6773: PPUSH
6774: CALL_OW 251
6778: PPUSH
6779: LD_INT 3
6781: PPUSH
6782: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
6786: LD_VAR 0 1
6790: PPUSH
6791: CALL_OW 250
6795: PPUSH
6796: LD_VAR 0 1
6800: PPUSH
6801: CALL_OW 251
6805: PPUSH
6806: LD_INT 3
6808: PPUSH
6809: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
6813: LD_VAR 0 1
6817: PPUSH
6818: CALL_OW 250
6822: PPUSH
6823: LD_VAR 0 1
6827: PPUSH
6828: CALL_OW 251
6832: PPUSH
6833: LD_INT 3
6835: PPUSH
6836: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
6840: LD_VAR 0 1
6844: PPUSH
6845: CALL_OW 250
6849: PPUSH
6850: LD_VAR 0 1
6854: PPUSH
6855: CALL_OW 251
6859: PPUSH
6860: LD_INT 3
6862: PPUSH
6863: CALL_OW 453
// end ; end ;
6867: PPOPN 1
6869: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
6870: LD_VAR 0 1
6874: PPUSH
6875: CALL 19772 0 1
// if un = fort then
6879: LD_VAR 0 1
6883: PUSH
6884: LD_INT 23
6886: EQUAL
6887: IFFALSE 6897
// fort_destroyed := true ;
6889: LD_ADDR_EXP 32
6893: PUSH
6894: LD_INT 1
6896: ST_TO_ADDR
// if un = l_cmndr then
6897: LD_VAR 0 1
6901: PUSH
6902: LD_EXP 49
6906: EQUAL
6907: IFFALSE 6917
// hero_died := true ;
6909: LD_ADDR_EXP 33
6913: PUSH
6914: LD_INT 1
6916: ST_TO_ADDR
// end ;
6917: PPOPN 1
6919: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin debug_strings := un ;
6920: LD_ADDR_OWVAR 48
6924: PUSH
6925: LD_VAR 0 1
6929: ST_TO_ADDR
// SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
6930: LD_VAR 0 1
6934: PPUSH
6935: LD_VAR 0 2
6939: PPUSH
6940: LD_VAR 0 3
6944: PPUSH
6945: CALL 19870 0 3
// end ;
6949: PPOPN 3
6951: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
6952: LD_VAR 0 1
6956: PPUSH
6957: CALL 19878 0 1
// end ; end_of_file
6961: PPOPN 1
6963: END
// export function RefreshTime ( time , bool ) ; begin
6964: LD_INT 0
6966: PPUSH
// if bool then
6967: LD_VAR 0 2
6971: IFFALSE 6989
// time := time + 0 0$01 else
6973: LD_ADDR_VAR 0 1
6977: PUSH
6978: LD_VAR 0 1
6982: PUSH
6983: LD_INT 35
6985: PLUS
6986: ST_TO_ADDR
6987: GO 7003
// time := time - 0 0$01 ;
6989: LD_ADDR_VAR 0 1
6993: PUSH
6994: LD_VAR 0 1
6998: PUSH
6999: LD_INT 35
7001: MINUS
7002: ST_TO_ADDR
// result := time ;
7003: LD_ADDR_VAR 0 3
7007: PUSH
7008: LD_VAR 0 1
7012: ST_TO_ADDR
// end ;
7013: LD_VAR 0 3
7017: RET
// export function MineExist ( side ) ; begin
7018: LD_INT 0
7020: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_siberite_mine ] ] ) > 0 then
7021: LD_INT 22
7023: PUSH
7024: LD_VAR 0 1
7028: PUSH
7029: EMPTY
7030: LIST
7031: LIST
7032: PUSH
7033: LD_INT 30
7035: PUSH
7036: LD_INT 30
7038: PUSH
7039: EMPTY
7040: LIST
7041: LIST
7042: PUSH
7043: EMPTY
7044: LIST
7045: LIST
7046: PPUSH
7047: CALL_OW 69
7051: PUSH
7052: LD_INT 0
7054: GREATER
7055: IFFALSE 7067
// result := true else
7057: LD_ADDR_VAR 0 2
7061: PUSH
7062: LD_INT 1
7064: ST_TO_ADDR
7065: GO 7075
// result := false ;
7067: LD_ADDR_VAR 0 2
7071: PUSH
7072: LD_INT 0
7074: ST_TO_ADDR
// end ;
7075: LD_VAR 0 2
7079: RET
// export function FacExist ( side ) ; begin
7080: LD_INT 0
7082: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_factory ] ] ) > 0 ;
7083: LD_ADDR_VAR 0 2
7087: PUSH
7088: LD_INT 22
7090: PUSH
7091: LD_VAR 0 1
7095: PUSH
7096: EMPTY
7097: LIST
7098: LIST
7099: PUSH
7100: LD_INT 30
7102: PUSH
7103: LD_INT 3
7105: PUSH
7106: EMPTY
7107: LIST
7108: LIST
7109: PUSH
7110: EMPTY
7111: LIST
7112: LIST
7113: PPUSH
7114: CALL_OW 69
7118: PUSH
7119: LD_INT 0
7121: GREATER
7122: ST_TO_ADDR
// end ;
7123: LD_VAR 0 2
7127: RET
// export function ConnectWithTower ( side ) ; var i , filter , tower ; begin
7128: LD_INT 0
7130: PPUSH
7131: PPUSH
7132: PPUSH
7133: PPUSH
// filter := FilterAllUnits ( [ [ f_side , side ] , [ f_control , control_remote ] , [ f_ok ] ] ) ;
7134: LD_ADDR_VAR 0 4
7138: PUSH
7139: LD_INT 22
7141: PUSH
7142: LD_VAR 0 1
7146: PUSH
7147: EMPTY
7148: LIST
7149: LIST
7150: PUSH
7151: LD_INT 33
7153: PUSH
7154: LD_INT 2
7156: PUSH
7157: EMPTY
7158: LIST
7159: LIST
7160: PUSH
7161: LD_INT 50
7163: PUSH
7164: EMPTY
7165: LIST
7166: PUSH
7167: EMPTY
7168: LIST
7169: LIST
7170: LIST
7171: PPUSH
7172: CALL_OW 69
7176: ST_TO_ADDR
// tower := FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , ar_control_tower ] ] ) ;
7177: LD_ADDR_VAR 0 5
7181: PUSH
7182: LD_INT 22
7184: PUSH
7185: LD_VAR 0 1
7189: PUSH
7190: EMPTY
7191: LIST
7192: LIST
7193: PUSH
7194: LD_INT 34
7196: PUSH
7197: LD_INT 31
7199: PUSH
7200: EMPTY
7201: LIST
7202: LIST
7203: PUSH
7204: EMPTY
7205: LIST
7206: LIST
7207: PPUSH
7208: CALL_OW 69
7212: ST_TO_ADDR
// if tower > 0 and filter > 0 then
7213: LD_VAR 0 5
7217: PUSH
7218: LD_INT 0
7220: GREATER
7221: PUSH
7222: LD_VAR 0 4
7226: PUSH
7227: LD_INT 0
7229: GREATER
7230: AND
7231: IFFALSE 7307
// for i = 1 to filter do
7233: LD_ADDR_VAR 0 3
7237: PUSH
7238: DOUBLE
7239: LD_INT 1
7241: DEC
7242: ST_TO_ADDR
7243: LD_VAR 0 4
7247: PUSH
7248: FOR_TO
7249: IFFALSE 7305
// if not IsControledBy ( filter [ i ] ) then
7251: LD_VAR 0 4
7255: PUSH
7256: LD_VAR 0 3
7260: ARRAY
7261: PPUSH
7262: CALL_OW 312
7266: NOT
7267: IFFALSE 7303
// ComLinkTo ( filter [ i ] , tower [ Rand ( 1 , tower ) ] ) ;
7269: LD_VAR 0 4
7273: PUSH
7274: LD_VAR 0 3
7278: ARRAY
7279: PPUSH
7280: LD_VAR 0 5
7284: PUSH
7285: LD_INT 1
7287: PPUSH
7288: LD_VAR 0 5
7292: PPUSH
7293: CALL_OW 12
7297: ARRAY
7298: PPUSH
7299: CALL_OW 135
7303: GO 7248
7305: POP
7306: POP
// end ;
7307: LD_VAR 0 2
7311: RET
// export function CreateHumanWithClass ( clas , lvl ) ; var skill_com , skill_eng , skill_mech , skill_sci , bonus ; begin
7312: LD_INT 0
7314: PPUSH
7315: PPUSH
7316: PPUSH
7317: PPUSH
7318: PPUSH
7319: PPUSH
// hc_class := clas ;
7320: LD_ADDR_OWVAR 28
7324: PUSH
7325: LD_VAR 0 1
7329: ST_TO_ADDR
// skill_com := ( lvl + Rand ( - 1 , 1 ) ) ;
7330: LD_ADDR_VAR 0 4
7334: PUSH
7335: LD_VAR 0 2
7339: PUSH
7340: LD_INT 1
7342: NEG
7343: PPUSH
7344: LD_INT 1
7346: PPUSH
7347: CALL_OW 12
7351: PLUS
7352: ST_TO_ADDR
// skill_eng := ( lvl + Rand ( - 1 , 1 ) ) ;
7353: LD_ADDR_VAR 0 5
7357: PUSH
7358: LD_VAR 0 2
7362: PUSH
7363: LD_INT 1
7365: NEG
7366: PPUSH
7367: LD_INT 1
7369: PPUSH
7370: CALL_OW 12
7374: PLUS
7375: ST_TO_ADDR
// skill_mech := ( lvl + Rand ( - 1 , 1 ) ) ;
7376: LD_ADDR_VAR 0 6
7380: PUSH
7381: LD_VAR 0 2
7385: PUSH
7386: LD_INT 1
7388: NEG
7389: PPUSH
7390: LD_INT 1
7392: PPUSH
7393: CALL_OW 12
7397: PLUS
7398: ST_TO_ADDR
// skill_sci := ( lvl + Rand ( - 1 , 1 ) ) ;
7399: LD_ADDR_VAR 0 7
7403: PUSH
7404: LD_VAR 0 2
7408: PUSH
7409: LD_INT 1
7411: NEG
7412: PPUSH
7413: LD_INT 1
7415: PPUSH
7416: CALL_OW 12
7420: PLUS
7421: ST_TO_ADDR
// if clas = 1 or clas = 9 or clas = class_sniper or clas = class_mortar then
7422: LD_VAR 0 1
7426: PUSH
7427: LD_INT 1
7429: EQUAL
7430: PUSH
7431: LD_VAR 0 1
7435: PUSH
7436: LD_INT 9
7438: EQUAL
7439: OR
7440: PUSH
7441: LD_VAR 0 1
7445: PUSH
7446: LD_INT 5
7448: EQUAL
7449: OR
7450: PUSH
7451: LD_VAR 0 1
7455: PUSH
7456: LD_INT 8
7458: EQUAL
7459: OR
7460: IFFALSE 7485
// bonus := [ 2 , 0 , 0 , 0 ] ;
7462: LD_ADDR_VAR 0 8
7466: PUSH
7467: LD_INT 2
7469: PUSH
7470: LD_INT 0
7472: PUSH
7473: LD_INT 0
7475: PUSH
7476: LD_INT 0
7478: PUSH
7479: EMPTY
7480: LIST
7481: LIST
7482: LIST
7483: LIST
7484: ST_TO_ADDR
// if clas = 2 then
7485: LD_VAR 0 1
7489: PUSH
7490: LD_INT 2
7492: EQUAL
7493: IFFALSE 7518
// bonus := [ 0 , 2 , 0 , 0 ] ;
7495: LD_ADDR_VAR 0 8
7499: PUSH
7500: LD_INT 0
7502: PUSH
7503: LD_INT 2
7505: PUSH
7506: LD_INT 0
7508: PUSH
7509: LD_INT 0
7511: PUSH
7512: EMPTY
7513: LIST
7514: LIST
7515: LIST
7516: LIST
7517: ST_TO_ADDR
// if clas = 3 then
7518: LD_VAR 0 1
7522: PUSH
7523: LD_INT 3
7525: EQUAL
7526: IFFALSE 7551
// bonus := [ 0 , 0 , 2 , 0 ] ;
7528: LD_ADDR_VAR 0 8
7532: PUSH
7533: LD_INT 0
7535: PUSH
7536: LD_INT 0
7538: PUSH
7539: LD_INT 2
7541: PUSH
7542: LD_INT 0
7544: PUSH
7545: EMPTY
7546: LIST
7547: LIST
7548: LIST
7549: LIST
7550: ST_TO_ADDR
// if clas = 4 then
7551: LD_VAR 0 1
7555: PUSH
7556: LD_INT 4
7558: EQUAL
7559: IFFALSE 7584
// bonus := [ 0 , 0 , 0 , 2 ] ;
7561: LD_ADDR_VAR 0 8
7565: PUSH
7566: LD_INT 0
7568: PUSH
7569: LD_INT 0
7571: PUSH
7572: LD_INT 0
7574: PUSH
7575: LD_INT 2
7577: PUSH
7578: EMPTY
7579: LIST
7580: LIST
7581: LIST
7582: LIST
7583: ST_TO_ADDR
// if clas > 4 and clas <> 9 and clas <> class_sniper and clas <> class_mortar then
7584: LD_VAR 0 1
7588: PUSH
7589: LD_INT 4
7591: GREATER
7592: PUSH
7593: LD_VAR 0 1
7597: PUSH
7598: LD_INT 9
7600: NONEQUAL
7601: AND
7602: PUSH
7603: LD_VAR 0 1
7607: PUSH
7608: LD_INT 5
7610: NONEQUAL
7611: AND
7612: PUSH
7613: LD_VAR 0 1
7617: PUSH
7618: LD_INT 8
7620: NONEQUAL
7621: AND
7622: IFFALSE 7647
// bonus := [ 0 , 0 , 0 , 0 ] ;
7624: LD_ADDR_VAR 0 8
7628: PUSH
7629: LD_INT 0
7631: PUSH
7632: LD_INT 0
7634: PUSH
7635: LD_INT 0
7637: PUSH
7638: LD_INT 0
7640: PUSH
7641: EMPTY
7642: LIST
7643: LIST
7644: LIST
7645: LIST
7646: ST_TO_ADDR
// hc_basic_skills := [ Rand ( 0 , 2 ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) ] ;
7647: LD_ADDR_OWVAR 30
7651: PUSH
7652: LD_INT 0
7654: PPUSH
7655: LD_INT 2
7657: PPUSH
7658: CALL_OW 12
7662: PUSH
7663: LD_INT 0
7665: PPUSH
7666: LD_INT 2
7668: PPUSH
7669: CALL_OW 12
7673: PUSH
7674: LD_INT 0
7676: PPUSH
7677: LD_INT 2
7679: PPUSH
7680: CALL_OW 12
7684: PUSH
7685: LD_INT 0
7687: PPUSH
7688: LD_INT 2
7690: PPUSH
7691: CALL_OW 12
7695: PUSH
7696: EMPTY
7697: LIST
7698: LIST
7699: LIST
7700: LIST
7701: ST_TO_ADDR
// hc_skills := [ skill_com + bonus [ 1 ] , skill_eng + bonus [ 2 ] , skill_mech + bonus [ 3 ] , skill_sci + bonus [ 4 ] ] ;
7702: LD_ADDR_OWVAR 31
7706: PUSH
7707: LD_VAR 0 4
7711: PUSH
7712: LD_VAR 0 8
7716: PUSH
7717: LD_INT 1
7719: ARRAY
7720: PLUS
7721: PUSH
7722: LD_VAR 0 5
7726: PUSH
7727: LD_VAR 0 8
7731: PUSH
7732: LD_INT 2
7734: ARRAY
7735: PLUS
7736: PUSH
7737: LD_VAR 0 6
7741: PUSH
7742: LD_VAR 0 8
7746: PUSH
7747: LD_INT 3
7749: ARRAY
7750: PLUS
7751: PUSH
7752: LD_VAR 0 7
7756: PUSH
7757: LD_VAR 0 8
7761: PUSH
7762: LD_INT 4
7764: ARRAY
7765: PLUS
7766: PUSH
7767: EMPTY
7768: LIST
7769: LIST
7770: LIST
7771: LIST
7772: ST_TO_ADDR
// hc_sex := Rand ( sex_male , sex_female ) ;
7773: LD_ADDR_OWVAR 27
7777: PUSH
7778: LD_INT 1
7780: PPUSH
7781: LD_INT 2
7783: PPUSH
7784: CALL_OW 12
7788: ST_TO_ADDR
// hc_gallery :=  ;
7789: LD_ADDR_OWVAR 33
7793: PUSH
7794: LD_STRING 
7796: ST_TO_ADDR
// hc_attr := [ Rand ( 8 , 12 ) , Rand ( 9 , 11 ) ] ;
7797: LD_ADDR_OWVAR 29
7801: PUSH
7802: LD_INT 8
7804: PPUSH
7805: LD_INT 12
7807: PPUSH
7808: CALL_OW 12
7812: PUSH
7813: LD_INT 9
7815: PPUSH
7816: LD_INT 11
7818: PPUSH
7819: CALL_OW 12
7823: PUSH
7824: EMPTY
7825: LIST
7826: LIST
7827: ST_TO_ADDR
// hc_name :=  ;
7828: LD_ADDR_OWVAR 26
7832: PUSH
7833: LD_STRING 
7835: ST_TO_ADDR
// result := CreateHuman ;
7836: LD_ADDR_VAR 0 3
7840: PUSH
7841: CALL_OW 44
7845: ST_TO_ADDR
// end ;
7846: LD_VAR 0 3
7850: RET
// export function GetSpeed ( unit ) ; begin
7851: LD_INT 0
7853: PPUSH
// result := GetProperties ( unit ) [ 1 ] ;
7854: LD_ADDR_VAR 0 2
7858: PUSH
7859: LD_VAR 0 1
7863: PPUSH
7864: CALL_OW 464
7868: PUSH
7869: LD_INT 1
7871: ARRAY
7872: ST_TO_ADDR
// end ;
7873: LD_VAR 0 2
7877: RET
// export function PrepareNature ( area , num1 , num2 , num3 , num4 ) ; var l , apeman , tiger , bird , horse ; begin
7878: LD_INT 0
7880: PPUSH
7881: PPUSH
7882: PPUSH
7883: PPUSH
7884: PPUSH
7885: PPUSH
// uc_nation = nation_nature ;
7886: LD_ADDR_OWVAR 21
7890: PUSH
7891: LD_INT 0
7893: ST_TO_ADDR
// uc_side = 0 ;
7894: LD_ADDR_OWVAR 20
7898: PUSH
7899: LD_INT 0
7901: ST_TO_ADDR
// l = 0 ;
7902: LD_ADDR_VAR 0 7
7906: PUSH
7907: LD_INT 0
7909: ST_TO_ADDR
// repeat begin uc_direction = Rand ( 0 , 5 ) ;
7910: LD_ADDR_OWVAR 24
7914: PUSH
7915: LD_INT 0
7917: PPUSH
7918: LD_INT 5
7920: PPUSH
7921: CALL_OW 12
7925: ST_TO_ADDR
// hc_agressivity = Rand ( - 5 , 0 ) ;
7926: LD_ADDR_OWVAR 35
7930: PUSH
7931: LD_INT 5
7933: NEG
7934: PPUSH
7935: LD_INT 0
7937: PPUSH
7938: CALL_OW 12
7942: ST_TO_ADDR
// hc_gallery =  ;
7943: LD_ADDR_OWVAR 33
7947: PUSH
7948: LD_STRING 
7950: ST_TO_ADDR
// hc_class = class_apeman ;
7951: LD_ADDR_OWVAR 28
7955: PUSH
7956: LD_INT 12
7958: ST_TO_ADDR
// hc_attr = [ Rand ( 11 , 13 ) , Rand ( 10 , 11 ) ] ;
7959: LD_ADDR_OWVAR 29
7963: PUSH
7964: LD_INT 11
7966: PPUSH
7967: LD_INT 13
7969: PPUSH
7970: CALL_OW 12
7974: PUSH
7975: LD_INT 10
7977: PPUSH
7978: LD_INT 11
7980: PPUSH
7981: CALL_OW 12
7985: PUSH
7986: EMPTY
7987: LIST
7988: LIST
7989: ST_TO_ADDR
// hc_sex = sex_male ;
7990: LD_ADDR_OWVAR 27
7994: PUSH
7995: LD_INT 1
7997: ST_TO_ADDR
// hc_skills = [ Rand ( 0 , 2 ) , 0 , 0 , 0 ] ;
7998: LD_ADDR_OWVAR 31
8002: PUSH
8003: LD_INT 0
8005: PPUSH
8006: LD_INT 2
8008: PPUSH
8009: CALL_OW 12
8013: PUSH
8014: LD_INT 0
8016: PUSH
8017: LD_INT 0
8019: PUSH
8020: LD_INT 0
8022: PUSH
8023: EMPTY
8024: LIST
8025: LIST
8026: LIST
8027: LIST
8028: ST_TO_ADDR
// apeman = CreateHuman ;
8029: LD_ADDR_VAR 0 8
8033: PUSH
8034: CALL_OW 44
8038: ST_TO_ADDR
// PlaceUnitArea ( apeman , area , false ) ;
8039: LD_VAR 0 8
8043: PPUSH
8044: LD_VAR 0 1
8048: PPUSH
8049: LD_INT 0
8051: PPUSH
8052: CALL_OW 49
// l = l + 1 ;
8056: LD_ADDR_VAR 0 7
8060: PUSH
8061: LD_VAR 0 7
8065: PUSH
8066: LD_INT 1
8068: PLUS
8069: ST_TO_ADDR
// end until l = num1 ;
8070: LD_VAR 0 7
8074: PUSH
8075: LD_VAR 0 2
8079: EQUAL
8080: IFFALSE 7910
// l = 0 ;
8082: LD_ADDR_VAR 0 7
8086: PUSH
8087: LD_INT 0
8089: ST_TO_ADDR
// repeat begin hc_agressivity = Rand ( 0 , 25 ) ;
8090: LD_ADDR_OWVAR 35
8094: PUSH
8095: LD_INT 0
8097: PPUSH
8098: LD_INT 25
8100: PPUSH
8101: CALL_OW 12
8105: ST_TO_ADDR
// hc_class = class_tiger ;
8106: LD_ADDR_OWVAR 28
8110: PUSH
8111: LD_INT 14
8113: ST_TO_ADDR
// hc_sex = sex_male ;
8114: LD_ADDR_OWVAR 27
8118: PUSH
8119: LD_INT 1
8121: ST_TO_ADDR
// hc_gallery = sandnature ;
8122: LD_ADDR_OWVAR 33
8126: PUSH
8127: LD_STRING sandnature
8129: ST_TO_ADDR
// hc_face_number = 3 ;
8130: LD_ADDR_OWVAR 34
8134: PUSH
8135: LD_INT 3
8137: ST_TO_ADDR
// tiger = CreateHuman ;
8138: LD_ADDR_VAR 0 9
8142: PUSH
8143: CALL_OW 44
8147: ST_TO_ADDR
// PlaceUnitArea ( tiger , area , false ) ;
8148: LD_VAR 0 9
8152: PPUSH
8153: LD_VAR 0 1
8157: PPUSH
8158: LD_INT 0
8160: PPUSH
8161: CALL_OW 49
// l = l + 1 ;
8165: LD_ADDR_VAR 0 7
8169: PUSH
8170: LD_VAR 0 7
8174: PUSH
8175: LD_INT 1
8177: PLUS
8178: ST_TO_ADDR
// end until l = num2 ;
8179: LD_VAR 0 7
8183: PUSH
8184: LD_VAR 0 3
8188: EQUAL
8189: IFFALSE 8090
// l = 0 ;
8191: LD_ADDR_VAR 0 7
8195: PUSH
8196: LD_INT 0
8198: ST_TO_ADDR
// repeat begin hc_class = class_phororhacos ;
8199: LD_ADDR_OWVAR 28
8203: PUSH
8204: LD_INT 18
8206: ST_TO_ADDR
// hc_gallery = sandnature ;
8207: LD_ADDR_OWVAR 33
8211: PUSH
8212: LD_STRING sandnature
8214: ST_TO_ADDR
// hc_face_number = 1 ;
8215: LD_ADDR_OWVAR 34
8219: PUSH
8220: LD_INT 1
8222: ST_TO_ADDR
// bird = CreateHuman ;
8223: LD_ADDR_VAR 0 10
8227: PUSH
8228: CALL_OW 44
8232: ST_TO_ADDR
// PlaceUnitAnywhere ( bird , false ) ;
8233: LD_VAR 0 10
8237: PPUSH
8238: LD_INT 0
8240: PPUSH
8241: CALL_OW 51
// l = l + 1 ;
8245: LD_ADDR_VAR 0 7
8249: PUSH
8250: LD_VAR 0 7
8254: PUSH
8255: LD_INT 1
8257: PLUS
8258: ST_TO_ADDR
// end until l = num3 ;
8259: LD_VAR 0 7
8263: PUSH
8264: LD_VAR 0 4
8268: EQUAL
8269: IFFALSE 8199
// l = 0 ;
8271: LD_ADDR_VAR 0 7
8275: PUSH
8276: LD_INT 0
8278: ST_TO_ADDR
// repeat begin hc_class = 21 ;
8279: LD_ADDR_OWVAR 28
8283: PUSH
8284: LD_INT 21
8286: ST_TO_ADDR
// hc_gallery = sandnature ;
8287: LD_ADDR_OWVAR 33
8291: PUSH
8292: LD_STRING sandnature
8294: ST_TO_ADDR
// hc_face_number = 5 ;
8295: LD_ADDR_OWVAR 34
8299: PUSH
8300: LD_INT 5
8302: ST_TO_ADDR
// horse := CreateHuman ;
8303: LD_ADDR_VAR 0 11
8307: PUSH
8308: CALL_OW 44
8312: ST_TO_ADDR
// PlaceUnitArea ( horse , area , false ) ;
8313: LD_VAR 0 11
8317: PPUSH
8318: LD_VAR 0 1
8322: PPUSH
8323: LD_INT 0
8325: PPUSH
8326: CALL_OW 49
// l = l + 1 ;
8330: LD_ADDR_VAR 0 7
8334: PUSH
8335: LD_VAR 0 7
8339: PUSH
8340: LD_INT 1
8342: PLUS
8343: ST_TO_ADDR
// end until l = num4 ;
8344: LD_VAR 0 7
8348: PUSH
8349: LD_VAR 0 5
8353: EQUAL
8354: IFFALSE 8279
// end ;
8356: LD_VAR 0 6
8360: RET
// export function PrepareComm ; begin
8361: LD_INT 0
8363: PPUSH
// uc_side := 1 ;
8364: LD_ADDR_OWVAR 20
8368: PUSH
8369: LD_INT 1
8371: ST_TO_ADDR
// uc_nation := 1 ;
8372: LD_ADDR_OWVAR 21
8376: PUSH
8377: LD_INT 1
8379: ST_TO_ADDR
// hc_gallery :=  ;
8380: LD_ADDR_OWVAR 33
8384: PUSH
8385: LD_STRING 
8387: ST_TO_ADDR
// hc_name :=  ;
8388: LD_ADDR_OWVAR 26
8392: PUSH
8393: LD_STRING 
8395: ST_TO_ADDR
// hc_class := 1 ;
8396: LD_ADDR_OWVAR 28
8400: PUSH
8401: LD_INT 1
8403: ST_TO_ADDR
// hc_sex := sex_male ;
8404: LD_ADDR_OWVAR 27
8408: PUSH
8409: LD_INT 1
8411: ST_TO_ADDR
// am_comander := CreateHuman ;
8412: LD_ADDR_EXP 46
8416: PUSH
8417: CALL_OW 44
8421: ST_TO_ADDR
// uc_side := 3 ;
8422: LD_ADDR_OWVAR 20
8426: PUSH
8427: LD_INT 3
8429: ST_TO_ADDR
// uc_nation := 3 ;
8430: LD_ADDR_OWVAR 21
8434: PUSH
8435: LD_INT 3
8437: ST_TO_ADDR
// ru_comander := CreateHuman ;
8438: LD_ADDR_EXP 47
8442: PUSH
8443: CALL_OW 44
8447: ST_TO_ADDR
// uc_side := 2 ;
8448: LD_ADDR_OWVAR 20
8452: PUSH
8453: LD_INT 2
8455: ST_TO_ADDR
// uc_nation := 2 ;
8456: LD_ADDR_OWVAR 21
8460: PUSH
8461: LD_INT 2
8463: ST_TO_ADDR
// hc_name := Heike Steyer ;
8464: LD_ADDR_OWVAR 26
8468: PUSH
8469: LD_STRING Heike Steyer
8471: ST_TO_ADDR
// hc_sex := sex_female ;
8472: LD_ADDR_OWVAR 27
8476: PUSH
8477: LD_INT 2
8479: ST_TO_ADDR
// hc_gallery := sandar ;
8480: LD_ADDR_OWVAR 33
8484: PUSH
8485: LD_STRING sandar
8487: ST_TO_ADDR
// hc_face_number := 14 ;
8488: LD_ADDR_OWVAR 34
8492: PUSH
8493: LD_INT 14
8495: ST_TO_ADDR
// ar_comander := CreateHuman ;
8496: LD_ADDR_EXP 48
8500: PUSH
8501: CALL_OW 44
8505: ST_TO_ADDR
// end ;
8506: LD_VAR 0 1
8510: RET
// export function SpeedFilter ( filter , speed ) ; var list , i ; begin
8511: LD_INT 0
8513: PPUSH
8514: PPUSH
8515: PPUSH
// list := [ ] ;
8516: LD_ADDR_VAR 0 4
8520: PUSH
8521: EMPTY
8522: ST_TO_ADDR
// for i = 1 to filter do
8523: LD_ADDR_VAR 0 5
8527: PUSH
8528: DOUBLE
8529: LD_INT 1
8531: DEC
8532: ST_TO_ADDR
8533: LD_VAR 0 1
8537: PUSH
8538: FOR_TO
8539: IFFALSE 8588
// if GetSpeed ( filter [ i ] ) < speed then
8541: LD_VAR 0 1
8545: PUSH
8546: LD_VAR 0 5
8550: ARRAY
8551: PPUSH
8552: CALL 7851 0 1
8556: PUSH
8557: LD_VAR 0 2
8561: LESS
8562: IFFALSE 8586
// list := list ^ filter [ i ] ;
8564: LD_ADDR_VAR 0 4
8568: PUSH
8569: LD_VAR 0 4
8573: PUSH
8574: LD_VAR 0 1
8578: PUSH
8579: LD_VAR 0 5
8583: ARRAY
8584: ADD
8585: ST_TO_ADDR
8586: GO 8538
8588: POP
8589: POP
// result := list ;
8590: LD_ADDR_VAR 0 3
8594: PUSH
8595: LD_VAR 0 4
8599: ST_TO_ADDR
// end ; end_of_file
8600: LD_VAR 0 3
8604: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; every 1 do
8605: GO 8607
8607: DISABLE
// begin ru_radar := 98 ;
8608: LD_ADDR_EXP 52
8612: PUSH
8613: LD_INT 98
8615: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
8616: LD_ADDR_EXP 53
8620: PUSH
8621: LD_INT 89
8623: ST_TO_ADDR
// us_hack := 99 ;
8624: LD_ADDR_EXP 54
8628: PUSH
8629: LD_INT 99
8631: ST_TO_ADDR
// us_artillery := 97 ;
8632: LD_ADDR_EXP 55
8636: PUSH
8637: LD_INT 97
8639: ST_TO_ADDR
// ar_bio_bomb := 91 ;
8640: LD_ADDR_EXP 56
8644: PUSH
8645: LD_INT 91
8647: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
8648: LD_ADDR_EXP 57
8652: PUSH
8653: LD_INT 92
8655: ST_TO_ADDR
// tech_Artillery := 80 ;
8656: LD_ADDR_EXP 58
8660: PUSH
8661: LD_INT 80
8663: ST_TO_ADDR
// tech_RadMat := 81 ;
8664: LD_ADDR_EXP 59
8668: PUSH
8669: LD_INT 81
8671: ST_TO_ADDR
// tech_BasicTools := 82 ;
8672: LD_ADDR_EXP 60
8676: PUSH
8677: LD_INT 82
8679: ST_TO_ADDR
// tech_Cargo := 83 ;
8680: LD_ADDR_EXP 61
8684: PUSH
8685: LD_INT 83
8687: ST_TO_ADDR
// tech_Track := 84 ;
8688: LD_ADDR_EXP 62
8692: PUSH
8693: LD_INT 84
8695: ST_TO_ADDR
// tech_Crane := 85 ;
8696: LD_ADDR_EXP 63
8700: PUSH
8701: LD_INT 85
8703: ST_TO_ADDR
// tech_Bulldozer := 86 ;
8704: LD_ADDR_EXP 64
8708: PUSH
8709: LD_INT 86
8711: ST_TO_ADDR
// tech_Hovercraft := 87 ;
8712: LD_ADDR_EXP 65
8716: PUSH
8717: LD_INT 87
8719: ST_TO_ADDR
// end ; end_of_file end_of_file
8720: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
8721: GO 8723
8723: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
8724: LD_STRING initStreamRollete();
8726: PPUSH
8727: CALL_OW 559
// InitStreamMode ;
8731: CALL 8740 0 0
// DefineStreamItems ( ) ;
8735: CALL 9180 0 0
// end ;
8739: END
// function InitStreamMode ; begin
8740: LD_INT 0
8742: PPUSH
// streamModeActive := false ;
8743: LD_ADDR_EXP 66
8747: PUSH
8748: LD_INT 0
8750: ST_TO_ADDR
// normalCounter := 36 ;
8751: LD_ADDR_EXP 67
8755: PUSH
8756: LD_INT 36
8758: ST_TO_ADDR
// hardcoreCounter := 16 ;
8759: LD_ADDR_EXP 68
8763: PUSH
8764: LD_INT 16
8766: ST_TO_ADDR
// sRocket := false ;
8767: LD_ADDR_EXP 71
8771: PUSH
8772: LD_INT 0
8774: ST_TO_ADDR
// sSpeed := false ;
8775: LD_ADDR_EXP 70
8779: PUSH
8780: LD_INT 0
8782: ST_TO_ADDR
// sEngine := false ;
8783: LD_ADDR_EXP 72
8787: PUSH
8788: LD_INT 0
8790: ST_TO_ADDR
// sSpec := false ;
8791: LD_ADDR_EXP 69
8795: PUSH
8796: LD_INT 0
8798: ST_TO_ADDR
// sLevel := false ;
8799: LD_ADDR_EXP 73
8803: PUSH
8804: LD_INT 0
8806: ST_TO_ADDR
// sArmoury := false ;
8807: LD_ADDR_EXP 74
8811: PUSH
8812: LD_INT 0
8814: ST_TO_ADDR
// sRadar := false ;
8815: LD_ADDR_EXP 75
8819: PUSH
8820: LD_INT 0
8822: ST_TO_ADDR
// sBunker := false ;
8823: LD_ADDR_EXP 76
8827: PUSH
8828: LD_INT 0
8830: ST_TO_ADDR
// sHack := false ;
8831: LD_ADDR_EXP 77
8835: PUSH
8836: LD_INT 0
8838: ST_TO_ADDR
// sFire := false ;
8839: LD_ADDR_EXP 78
8843: PUSH
8844: LD_INT 0
8846: ST_TO_ADDR
// sRefresh := false ;
8847: LD_ADDR_EXP 79
8851: PUSH
8852: LD_INT 0
8854: ST_TO_ADDR
// sExp := false ;
8855: LD_ADDR_EXP 80
8859: PUSH
8860: LD_INT 0
8862: ST_TO_ADDR
// sDepot := false ;
8863: LD_ADDR_EXP 81
8867: PUSH
8868: LD_INT 0
8870: ST_TO_ADDR
// sFlag := false ;
8871: LD_ADDR_EXP 82
8875: PUSH
8876: LD_INT 0
8878: ST_TO_ADDR
// sKamikadze := false ;
8879: LD_ADDR_EXP 90
8883: PUSH
8884: LD_INT 0
8886: ST_TO_ADDR
// sTroll := false ;
8887: LD_ADDR_EXP 91
8891: PUSH
8892: LD_INT 0
8894: ST_TO_ADDR
// sSlow := false ;
8895: LD_ADDR_EXP 92
8899: PUSH
8900: LD_INT 0
8902: ST_TO_ADDR
// sLack := false ;
8903: LD_ADDR_EXP 93
8907: PUSH
8908: LD_INT 0
8910: ST_TO_ADDR
// sTank := false ;
8911: LD_ADDR_EXP 95
8915: PUSH
8916: LD_INT 0
8918: ST_TO_ADDR
// sRemote := false ;
8919: LD_ADDR_EXP 96
8923: PUSH
8924: LD_INT 0
8926: ST_TO_ADDR
// sPowell := false ;
8927: LD_ADDR_EXP 97
8931: PUSH
8932: LD_INT 0
8934: ST_TO_ADDR
// sTeleport := false ;
8935: LD_ADDR_EXP 100
8939: PUSH
8940: LD_INT 0
8942: ST_TO_ADDR
// sOilTower := false ;
8943: LD_ADDR_EXP 102
8947: PUSH
8948: LD_INT 0
8950: ST_TO_ADDR
// sShovel := false ;
8951: LD_ADDR_EXP 103
8955: PUSH
8956: LD_INT 0
8958: ST_TO_ADDR
// sSheik := false ;
8959: LD_ADDR_EXP 104
8963: PUSH
8964: LD_INT 0
8966: ST_TO_ADDR
// sEarthquake := false ;
8967: LD_ADDR_EXP 106
8971: PUSH
8972: LD_INT 0
8974: ST_TO_ADDR
// sAI := false ;
8975: LD_ADDR_EXP 107
8979: PUSH
8980: LD_INT 0
8982: ST_TO_ADDR
// sCargo := false ;
8983: LD_ADDR_EXP 110
8987: PUSH
8988: LD_INT 0
8990: ST_TO_ADDR
// sDLaser := false ;
8991: LD_ADDR_EXP 111
8995: PUSH
8996: LD_INT 0
8998: ST_TO_ADDR
// sExchange := false ;
8999: LD_ADDR_EXP 112
9003: PUSH
9004: LD_INT 0
9006: ST_TO_ADDR
// sFac := false ;
9007: LD_ADDR_EXP 113
9011: PUSH
9012: LD_INT 0
9014: ST_TO_ADDR
// sPower := false ;
9015: LD_ADDR_EXP 114
9019: PUSH
9020: LD_INT 0
9022: ST_TO_ADDR
// sRandom := false ;
9023: LD_ADDR_EXP 115
9027: PUSH
9028: LD_INT 0
9030: ST_TO_ADDR
// sShield := false ;
9031: LD_ADDR_EXP 116
9035: PUSH
9036: LD_INT 0
9038: ST_TO_ADDR
// sTime := false ;
9039: LD_ADDR_EXP 117
9043: PUSH
9044: LD_INT 0
9046: ST_TO_ADDR
// sTools := false ;
9047: LD_ADDR_EXP 118
9051: PUSH
9052: LD_INT 0
9054: ST_TO_ADDR
// sSold := false ;
9055: LD_ADDR_EXP 83
9059: PUSH
9060: LD_INT 0
9062: ST_TO_ADDR
// sDiff := false ;
9063: LD_ADDR_EXP 84
9067: PUSH
9068: LD_INT 0
9070: ST_TO_ADDR
// sFog := false ;
9071: LD_ADDR_EXP 87
9075: PUSH
9076: LD_INT 0
9078: ST_TO_ADDR
// sReset := false ;
9079: LD_ADDR_EXP 88
9083: PUSH
9084: LD_INT 0
9086: ST_TO_ADDR
// sSun := false ;
9087: LD_ADDR_EXP 89
9091: PUSH
9092: LD_INT 0
9094: ST_TO_ADDR
// sTiger := false ;
9095: LD_ADDR_EXP 85
9099: PUSH
9100: LD_INT 0
9102: ST_TO_ADDR
// sBomb := false ;
9103: LD_ADDR_EXP 86
9107: PUSH
9108: LD_INT 0
9110: ST_TO_ADDR
// sWound := false ;
9111: LD_ADDR_EXP 94
9115: PUSH
9116: LD_INT 0
9118: ST_TO_ADDR
// sBetray := false ;
9119: LD_ADDR_EXP 98
9123: PUSH
9124: LD_INT 0
9126: ST_TO_ADDR
// sContamin := false ;
9127: LD_ADDR_EXP 99
9131: PUSH
9132: LD_INT 0
9134: ST_TO_ADDR
// sOil := false ;
9135: LD_ADDR_EXP 101
9139: PUSH
9140: LD_INT 0
9142: ST_TO_ADDR
// sStu := false ;
9143: LD_ADDR_EXP 105
9147: PUSH
9148: LD_INT 0
9150: ST_TO_ADDR
// sBazooka := false ;
9151: LD_ADDR_EXP 108
9155: PUSH
9156: LD_INT 0
9158: ST_TO_ADDR
// sMortar := false ;
9159: LD_ADDR_EXP 109
9163: PUSH
9164: LD_INT 0
9166: ST_TO_ADDR
// sRanger := false ;
9167: LD_ADDR_EXP 119
9171: PUSH
9172: LD_INT 0
9174: ST_TO_ADDR
// end ;
9175: LD_VAR 0 1
9179: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
9180: LD_INT 0
9182: PPUSH
9183: PPUSH
9184: PPUSH
9185: PPUSH
9186: PPUSH
// result := [ ] ;
9187: LD_ADDR_VAR 0 1
9191: PUSH
9192: EMPTY
9193: ST_TO_ADDR
// if campaign_id = 1 then
9194: LD_OWVAR 69
9198: PUSH
9199: LD_INT 1
9201: EQUAL
9202: IFFALSE 12140
// begin case mission_number of 1 :
9204: LD_OWVAR 70
9208: PUSH
9209: LD_INT 1
9211: DOUBLE
9212: EQUAL
9213: IFTRUE 9217
9215: GO 9281
9217: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
9218: LD_ADDR_VAR 0 1
9222: PUSH
9223: LD_INT 2
9225: PUSH
9226: LD_INT 4
9228: PUSH
9229: LD_INT 11
9231: PUSH
9232: LD_INT 12
9234: PUSH
9235: LD_INT 15
9237: PUSH
9238: LD_INT 16
9240: PUSH
9241: LD_INT 22
9243: PUSH
9244: LD_INT 23
9246: PUSH
9247: LD_INT 26
9249: PUSH
9250: EMPTY
9251: LIST
9252: LIST
9253: LIST
9254: LIST
9255: LIST
9256: LIST
9257: LIST
9258: LIST
9259: LIST
9260: PUSH
9261: LD_INT 101
9263: PUSH
9264: LD_INT 102
9266: PUSH
9267: LD_INT 106
9269: PUSH
9270: EMPTY
9271: LIST
9272: LIST
9273: LIST
9274: PUSH
9275: EMPTY
9276: LIST
9277: LIST
9278: ST_TO_ADDR
9279: GO 12138
9281: LD_INT 2
9283: DOUBLE
9284: EQUAL
9285: IFTRUE 9289
9287: GO 9361
9289: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
9290: LD_ADDR_VAR 0 1
9294: PUSH
9295: LD_INT 2
9297: PUSH
9298: LD_INT 4
9300: PUSH
9301: LD_INT 11
9303: PUSH
9304: LD_INT 12
9306: PUSH
9307: LD_INT 15
9309: PUSH
9310: LD_INT 16
9312: PUSH
9313: LD_INT 22
9315: PUSH
9316: LD_INT 23
9318: PUSH
9319: LD_INT 26
9321: PUSH
9322: EMPTY
9323: LIST
9324: LIST
9325: LIST
9326: LIST
9327: LIST
9328: LIST
9329: LIST
9330: LIST
9331: LIST
9332: PUSH
9333: LD_INT 101
9335: PUSH
9336: LD_INT 102
9338: PUSH
9339: LD_INT 105
9341: PUSH
9342: LD_INT 106
9344: PUSH
9345: LD_INT 108
9347: PUSH
9348: EMPTY
9349: LIST
9350: LIST
9351: LIST
9352: LIST
9353: LIST
9354: PUSH
9355: EMPTY
9356: LIST
9357: LIST
9358: ST_TO_ADDR
9359: GO 12138
9361: LD_INT 3
9363: DOUBLE
9364: EQUAL
9365: IFTRUE 9369
9367: GO 9445
9369: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
9370: LD_ADDR_VAR 0 1
9374: PUSH
9375: LD_INT 2
9377: PUSH
9378: LD_INT 4
9380: PUSH
9381: LD_INT 5
9383: PUSH
9384: LD_INT 11
9386: PUSH
9387: LD_INT 12
9389: PUSH
9390: LD_INT 15
9392: PUSH
9393: LD_INT 16
9395: PUSH
9396: LD_INT 22
9398: PUSH
9399: LD_INT 26
9401: PUSH
9402: LD_INT 36
9404: PUSH
9405: EMPTY
9406: LIST
9407: LIST
9408: LIST
9409: LIST
9410: LIST
9411: LIST
9412: LIST
9413: LIST
9414: LIST
9415: LIST
9416: PUSH
9417: LD_INT 101
9419: PUSH
9420: LD_INT 102
9422: PUSH
9423: LD_INT 105
9425: PUSH
9426: LD_INT 106
9428: PUSH
9429: LD_INT 108
9431: PUSH
9432: EMPTY
9433: LIST
9434: LIST
9435: LIST
9436: LIST
9437: LIST
9438: PUSH
9439: EMPTY
9440: LIST
9441: LIST
9442: ST_TO_ADDR
9443: GO 12138
9445: LD_INT 4
9447: DOUBLE
9448: EQUAL
9449: IFTRUE 9453
9451: GO 9537
9453: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
9454: LD_ADDR_VAR 0 1
9458: PUSH
9459: LD_INT 2
9461: PUSH
9462: LD_INT 4
9464: PUSH
9465: LD_INT 5
9467: PUSH
9468: LD_INT 8
9470: PUSH
9471: LD_INT 11
9473: PUSH
9474: LD_INT 12
9476: PUSH
9477: LD_INT 15
9479: PUSH
9480: LD_INT 16
9482: PUSH
9483: LD_INT 22
9485: PUSH
9486: LD_INT 23
9488: PUSH
9489: LD_INT 26
9491: PUSH
9492: LD_INT 36
9494: PUSH
9495: EMPTY
9496: LIST
9497: LIST
9498: LIST
9499: LIST
9500: LIST
9501: LIST
9502: LIST
9503: LIST
9504: LIST
9505: LIST
9506: LIST
9507: LIST
9508: PUSH
9509: LD_INT 101
9511: PUSH
9512: LD_INT 102
9514: PUSH
9515: LD_INT 105
9517: PUSH
9518: LD_INT 106
9520: PUSH
9521: LD_INT 108
9523: PUSH
9524: EMPTY
9525: LIST
9526: LIST
9527: LIST
9528: LIST
9529: LIST
9530: PUSH
9531: EMPTY
9532: LIST
9533: LIST
9534: ST_TO_ADDR
9535: GO 12138
9537: LD_INT 5
9539: DOUBLE
9540: EQUAL
9541: IFTRUE 9545
9543: GO 9645
9545: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
9546: LD_ADDR_VAR 0 1
9550: PUSH
9551: LD_INT 2
9553: PUSH
9554: LD_INT 4
9556: PUSH
9557: LD_INT 5
9559: PUSH
9560: LD_INT 6
9562: PUSH
9563: LD_INT 8
9565: PUSH
9566: LD_INT 11
9568: PUSH
9569: LD_INT 12
9571: PUSH
9572: LD_INT 15
9574: PUSH
9575: LD_INT 16
9577: PUSH
9578: LD_INT 22
9580: PUSH
9581: LD_INT 23
9583: PUSH
9584: LD_INT 25
9586: PUSH
9587: LD_INT 26
9589: PUSH
9590: LD_INT 36
9592: PUSH
9593: EMPTY
9594: LIST
9595: LIST
9596: LIST
9597: LIST
9598: LIST
9599: LIST
9600: LIST
9601: LIST
9602: LIST
9603: LIST
9604: LIST
9605: LIST
9606: LIST
9607: LIST
9608: PUSH
9609: LD_INT 101
9611: PUSH
9612: LD_INT 102
9614: PUSH
9615: LD_INT 105
9617: PUSH
9618: LD_INT 106
9620: PUSH
9621: LD_INT 108
9623: PUSH
9624: LD_INT 109
9626: PUSH
9627: LD_INT 112
9629: PUSH
9630: EMPTY
9631: LIST
9632: LIST
9633: LIST
9634: LIST
9635: LIST
9636: LIST
9637: LIST
9638: PUSH
9639: EMPTY
9640: LIST
9641: LIST
9642: ST_TO_ADDR
9643: GO 12138
9645: LD_INT 6
9647: DOUBLE
9648: EQUAL
9649: IFTRUE 9653
9651: GO 9773
9653: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
9654: LD_ADDR_VAR 0 1
9658: PUSH
9659: LD_INT 2
9661: PUSH
9662: LD_INT 4
9664: PUSH
9665: LD_INT 5
9667: PUSH
9668: LD_INT 6
9670: PUSH
9671: LD_INT 8
9673: PUSH
9674: LD_INT 11
9676: PUSH
9677: LD_INT 12
9679: PUSH
9680: LD_INT 15
9682: PUSH
9683: LD_INT 16
9685: PUSH
9686: LD_INT 20
9688: PUSH
9689: LD_INT 21
9691: PUSH
9692: LD_INT 22
9694: PUSH
9695: LD_INT 23
9697: PUSH
9698: LD_INT 25
9700: PUSH
9701: LD_INT 26
9703: PUSH
9704: LD_INT 30
9706: PUSH
9707: LD_INT 31
9709: PUSH
9710: LD_INT 32
9712: PUSH
9713: LD_INT 36
9715: PUSH
9716: EMPTY
9717: LIST
9718: LIST
9719: LIST
9720: LIST
9721: LIST
9722: LIST
9723: LIST
9724: LIST
9725: LIST
9726: LIST
9727: LIST
9728: LIST
9729: LIST
9730: LIST
9731: LIST
9732: LIST
9733: LIST
9734: LIST
9735: LIST
9736: PUSH
9737: LD_INT 101
9739: PUSH
9740: LD_INT 102
9742: PUSH
9743: LD_INT 105
9745: PUSH
9746: LD_INT 106
9748: PUSH
9749: LD_INT 108
9751: PUSH
9752: LD_INT 109
9754: PUSH
9755: LD_INT 112
9757: PUSH
9758: EMPTY
9759: LIST
9760: LIST
9761: LIST
9762: LIST
9763: LIST
9764: LIST
9765: LIST
9766: PUSH
9767: EMPTY
9768: LIST
9769: LIST
9770: ST_TO_ADDR
9771: GO 12138
9773: LD_INT 7
9775: DOUBLE
9776: EQUAL
9777: IFTRUE 9781
9779: GO 9881
9781: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
9782: LD_ADDR_VAR 0 1
9786: PUSH
9787: LD_INT 2
9789: PUSH
9790: LD_INT 4
9792: PUSH
9793: LD_INT 5
9795: PUSH
9796: LD_INT 7
9798: PUSH
9799: LD_INT 11
9801: PUSH
9802: LD_INT 12
9804: PUSH
9805: LD_INT 15
9807: PUSH
9808: LD_INT 16
9810: PUSH
9811: LD_INT 20
9813: PUSH
9814: LD_INT 21
9816: PUSH
9817: LD_INT 22
9819: PUSH
9820: LD_INT 23
9822: PUSH
9823: LD_INT 25
9825: PUSH
9826: LD_INT 26
9828: PUSH
9829: EMPTY
9830: LIST
9831: LIST
9832: LIST
9833: LIST
9834: LIST
9835: LIST
9836: LIST
9837: LIST
9838: LIST
9839: LIST
9840: LIST
9841: LIST
9842: LIST
9843: LIST
9844: PUSH
9845: LD_INT 101
9847: PUSH
9848: LD_INT 102
9850: PUSH
9851: LD_INT 103
9853: PUSH
9854: LD_INT 105
9856: PUSH
9857: LD_INT 106
9859: PUSH
9860: LD_INT 108
9862: PUSH
9863: LD_INT 112
9865: PUSH
9866: EMPTY
9867: LIST
9868: LIST
9869: LIST
9870: LIST
9871: LIST
9872: LIST
9873: LIST
9874: PUSH
9875: EMPTY
9876: LIST
9877: LIST
9878: ST_TO_ADDR
9879: GO 12138
9881: LD_INT 8
9883: DOUBLE
9884: EQUAL
9885: IFTRUE 9889
9887: GO 10017
9889: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
9890: LD_ADDR_VAR 0 1
9894: PUSH
9895: LD_INT 2
9897: PUSH
9898: LD_INT 4
9900: PUSH
9901: LD_INT 5
9903: PUSH
9904: LD_INT 6
9906: PUSH
9907: LD_INT 7
9909: PUSH
9910: LD_INT 8
9912: PUSH
9913: LD_INT 11
9915: PUSH
9916: LD_INT 12
9918: PUSH
9919: LD_INT 15
9921: PUSH
9922: LD_INT 16
9924: PUSH
9925: LD_INT 20
9927: PUSH
9928: LD_INT 21
9930: PUSH
9931: LD_INT 22
9933: PUSH
9934: LD_INT 23
9936: PUSH
9937: LD_INT 25
9939: PUSH
9940: LD_INT 26
9942: PUSH
9943: LD_INT 30
9945: PUSH
9946: LD_INT 31
9948: PUSH
9949: LD_INT 32
9951: PUSH
9952: LD_INT 36
9954: PUSH
9955: EMPTY
9956: LIST
9957: LIST
9958: LIST
9959: LIST
9960: LIST
9961: LIST
9962: LIST
9963: LIST
9964: LIST
9965: LIST
9966: LIST
9967: LIST
9968: LIST
9969: LIST
9970: LIST
9971: LIST
9972: LIST
9973: LIST
9974: LIST
9975: LIST
9976: PUSH
9977: LD_INT 101
9979: PUSH
9980: LD_INT 102
9982: PUSH
9983: LD_INT 103
9985: PUSH
9986: LD_INT 105
9988: PUSH
9989: LD_INT 106
9991: PUSH
9992: LD_INT 108
9994: PUSH
9995: LD_INT 109
9997: PUSH
9998: LD_INT 112
10000: PUSH
10001: EMPTY
10002: LIST
10003: LIST
10004: LIST
10005: LIST
10006: LIST
10007: LIST
10008: LIST
10009: LIST
10010: PUSH
10011: EMPTY
10012: LIST
10013: LIST
10014: ST_TO_ADDR
10015: GO 12138
10017: LD_INT 9
10019: DOUBLE
10020: EQUAL
10021: IFTRUE 10025
10023: GO 10161
10025: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
10026: LD_ADDR_VAR 0 1
10030: PUSH
10031: LD_INT 2
10033: PUSH
10034: LD_INT 4
10036: PUSH
10037: LD_INT 5
10039: PUSH
10040: LD_INT 6
10042: PUSH
10043: LD_INT 7
10045: PUSH
10046: LD_INT 8
10048: PUSH
10049: LD_INT 11
10051: PUSH
10052: LD_INT 12
10054: PUSH
10055: LD_INT 15
10057: PUSH
10058: LD_INT 16
10060: PUSH
10061: LD_INT 20
10063: PUSH
10064: LD_INT 21
10066: PUSH
10067: LD_INT 22
10069: PUSH
10070: LD_INT 23
10072: PUSH
10073: LD_INT 25
10075: PUSH
10076: LD_INT 26
10078: PUSH
10079: LD_INT 28
10081: PUSH
10082: LD_INT 30
10084: PUSH
10085: LD_INT 31
10087: PUSH
10088: LD_INT 32
10090: PUSH
10091: LD_INT 36
10093: PUSH
10094: EMPTY
10095: LIST
10096: LIST
10097: LIST
10098: LIST
10099: LIST
10100: LIST
10101: LIST
10102: LIST
10103: LIST
10104: LIST
10105: LIST
10106: LIST
10107: LIST
10108: LIST
10109: LIST
10110: LIST
10111: LIST
10112: LIST
10113: LIST
10114: LIST
10115: LIST
10116: PUSH
10117: LD_INT 101
10119: PUSH
10120: LD_INT 102
10122: PUSH
10123: LD_INT 103
10125: PUSH
10126: LD_INT 105
10128: PUSH
10129: LD_INT 106
10131: PUSH
10132: LD_INT 108
10134: PUSH
10135: LD_INT 109
10137: PUSH
10138: LD_INT 112
10140: PUSH
10141: LD_INT 114
10143: PUSH
10144: EMPTY
10145: LIST
10146: LIST
10147: LIST
10148: LIST
10149: LIST
10150: LIST
10151: LIST
10152: LIST
10153: LIST
10154: PUSH
10155: EMPTY
10156: LIST
10157: LIST
10158: ST_TO_ADDR
10159: GO 12138
10161: LD_INT 10
10163: DOUBLE
10164: EQUAL
10165: IFTRUE 10169
10167: GO 10353
10169: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
10170: LD_ADDR_VAR 0 1
10174: PUSH
10175: LD_INT 2
10177: PUSH
10178: LD_INT 4
10180: PUSH
10181: LD_INT 5
10183: PUSH
10184: LD_INT 6
10186: PUSH
10187: LD_INT 7
10189: PUSH
10190: LD_INT 8
10192: PUSH
10193: LD_INT 9
10195: PUSH
10196: LD_INT 10
10198: PUSH
10199: LD_INT 11
10201: PUSH
10202: LD_INT 12
10204: PUSH
10205: LD_INT 13
10207: PUSH
10208: LD_INT 14
10210: PUSH
10211: LD_INT 15
10213: PUSH
10214: LD_INT 16
10216: PUSH
10217: LD_INT 17
10219: PUSH
10220: LD_INT 18
10222: PUSH
10223: LD_INT 19
10225: PUSH
10226: LD_INT 20
10228: PUSH
10229: LD_INT 21
10231: PUSH
10232: LD_INT 22
10234: PUSH
10235: LD_INT 23
10237: PUSH
10238: LD_INT 24
10240: PUSH
10241: LD_INT 25
10243: PUSH
10244: LD_INT 26
10246: PUSH
10247: LD_INT 28
10249: PUSH
10250: LD_INT 30
10252: PUSH
10253: LD_INT 31
10255: PUSH
10256: LD_INT 32
10258: PUSH
10259: LD_INT 36
10261: PUSH
10262: EMPTY
10263: LIST
10264: LIST
10265: LIST
10266: LIST
10267: LIST
10268: LIST
10269: LIST
10270: LIST
10271: LIST
10272: LIST
10273: LIST
10274: LIST
10275: LIST
10276: LIST
10277: LIST
10278: LIST
10279: LIST
10280: LIST
10281: LIST
10282: LIST
10283: LIST
10284: LIST
10285: LIST
10286: LIST
10287: LIST
10288: LIST
10289: LIST
10290: LIST
10291: LIST
10292: PUSH
10293: LD_INT 101
10295: PUSH
10296: LD_INT 102
10298: PUSH
10299: LD_INT 103
10301: PUSH
10302: LD_INT 104
10304: PUSH
10305: LD_INT 105
10307: PUSH
10308: LD_INT 106
10310: PUSH
10311: LD_INT 107
10313: PUSH
10314: LD_INT 108
10316: PUSH
10317: LD_INT 109
10319: PUSH
10320: LD_INT 110
10322: PUSH
10323: LD_INT 111
10325: PUSH
10326: LD_INT 112
10328: PUSH
10329: LD_INT 114
10331: PUSH
10332: EMPTY
10333: LIST
10334: LIST
10335: LIST
10336: LIST
10337: LIST
10338: LIST
10339: LIST
10340: LIST
10341: LIST
10342: LIST
10343: LIST
10344: LIST
10345: LIST
10346: PUSH
10347: EMPTY
10348: LIST
10349: LIST
10350: ST_TO_ADDR
10351: GO 12138
10353: LD_INT 11
10355: DOUBLE
10356: EQUAL
10357: IFTRUE 10361
10359: GO 10553
10361: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
10362: LD_ADDR_VAR 0 1
10366: PUSH
10367: LD_INT 2
10369: PUSH
10370: LD_INT 3
10372: PUSH
10373: LD_INT 4
10375: PUSH
10376: LD_INT 5
10378: PUSH
10379: LD_INT 6
10381: PUSH
10382: LD_INT 7
10384: PUSH
10385: LD_INT 8
10387: PUSH
10388: LD_INT 9
10390: PUSH
10391: LD_INT 10
10393: PUSH
10394: LD_INT 11
10396: PUSH
10397: LD_INT 12
10399: PUSH
10400: LD_INT 13
10402: PUSH
10403: LD_INT 14
10405: PUSH
10406: LD_INT 15
10408: PUSH
10409: LD_INT 16
10411: PUSH
10412: LD_INT 17
10414: PUSH
10415: LD_INT 18
10417: PUSH
10418: LD_INT 19
10420: PUSH
10421: LD_INT 20
10423: PUSH
10424: LD_INT 21
10426: PUSH
10427: LD_INT 22
10429: PUSH
10430: LD_INT 23
10432: PUSH
10433: LD_INT 24
10435: PUSH
10436: LD_INT 25
10438: PUSH
10439: LD_INT 26
10441: PUSH
10442: LD_INT 28
10444: PUSH
10445: LD_INT 30
10447: PUSH
10448: LD_INT 31
10450: PUSH
10451: LD_INT 32
10453: PUSH
10454: LD_INT 34
10456: PUSH
10457: LD_INT 36
10459: PUSH
10460: EMPTY
10461: LIST
10462: LIST
10463: LIST
10464: LIST
10465: LIST
10466: LIST
10467: LIST
10468: LIST
10469: LIST
10470: LIST
10471: LIST
10472: LIST
10473: LIST
10474: LIST
10475: LIST
10476: LIST
10477: LIST
10478: LIST
10479: LIST
10480: LIST
10481: LIST
10482: LIST
10483: LIST
10484: LIST
10485: LIST
10486: LIST
10487: LIST
10488: LIST
10489: LIST
10490: LIST
10491: LIST
10492: PUSH
10493: LD_INT 101
10495: PUSH
10496: LD_INT 102
10498: PUSH
10499: LD_INT 103
10501: PUSH
10502: LD_INT 104
10504: PUSH
10505: LD_INT 105
10507: PUSH
10508: LD_INT 106
10510: PUSH
10511: LD_INT 107
10513: PUSH
10514: LD_INT 108
10516: PUSH
10517: LD_INT 109
10519: PUSH
10520: LD_INT 110
10522: PUSH
10523: LD_INT 111
10525: PUSH
10526: LD_INT 112
10528: PUSH
10529: LD_INT 114
10531: PUSH
10532: EMPTY
10533: LIST
10534: LIST
10535: LIST
10536: LIST
10537: LIST
10538: LIST
10539: LIST
10540: LIST
10541: LIST
10542: LIST
10543: LIST
10544: LIST
10545: LIST
10546: PUSH
10547: EMPTY
10548: LIST
10549: LIST
10550: ST_TO_ADDR
10551: GO 12138
10553: LD_INT 12
10555: DOUBLE
10556: EQUAL
10557: IFTRUE 10561
10559: GO 10769
10561: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
10562: LD_ADDR_VAR 0 1
10566: PUSH
10567: LD_INT 1
10569: PUSH
10570: LD_INT 2
10572: PUSH
10573: LD_INT 3
10575: PUSH
10576: LD_INT 4
10578: PUSH
10579: LD_INT 5
10581: PUSH
10582: LD_INT 6
10584: PUSH
10585: LD_INT 7
10587: PUSH
10588: LD_INT 8
10590: PUSH
10591: LD_INT 9
10593: PUSH
10594: LD_INT 10
10596: PUSH
10597: LD_INT 11
10599: PUSH
10600: LD_INT 12
10602: PUSH
10603: LD_INT 13
10605: PUSH
10606: LD_INT 14
10608: PUSH
10609: LD_INT 15
10611: PUSH
10612: LD_INT 16
10614: PUSH
10615: LD_INT 17
10617: PUSH
10618: LD_INT 18
10620: PUSH
10621: LD_INT 19
10623: PUSH
10624: LD_INT 20
10626: PUSH
10627: LD_INT 21
10629: PUSH
10630: LD_INT 22
10632: PUSH
10633: LD_INT 23
10635: PUSH
10636: LD_INT 24
10638: PUSH
10639: LD_INT 25
10641: PUSH
10642: LD_INT 26
10644: PUSH
10645: LD_INT 27
10647: PUSH
10648: LD_INT 28
10650: PUSH
10651: LD_INT 30
10653: PUSH
10654: LD_INT 31
10656: PUSH
10657: LD_INT 32
10659: PUSH
10660: LD_INT 33
10662: PUSH
10663: LD_INT 34
10665: PUSH
10666: LD_INT 36
10668: PUSH
10669: EMPTY
10670: LIST
10671: LIST
10672: LIST
10673: LIST
10674: LIST
10675: LIST
10676: LIST
10677: LIST
10678: LIST
10679: LIST
10680: LIST
10681: LIST
10682: LIST
10683: LIST
10684: LIST
10685: LIST
10686: LIST
10687: LIST
10688: LIST
10689: LIST
10690: LIST
10691: LIST
10692: LIST
10693: LIST
10694: LIST
10695: LIST
10696: LIST
10697: LIST
10698: LIST
10699: LIST
10700: LIST
10701: LIST
10702: LIST
10703: LIST
10704: PUSH
10705: LD_INT 101
10707: PUSH
10708: LD_INT 102
10710: PUSH
10711: LD_INT 103
10713: PUSH
10714: LD_INT 104
10716: PUSH
10717: LD_INT 105
10719: PUSH
10720: LD_INT 106
10722: PUSH
10723: LD_INT 107
10725: PUSH
10726: LD_INT 108
10728: PUSH
10729: LD_INT 109
10731: PUSH
10732: LD_INT 110
10734: PUSH
10735: LD_INT 111
10737: PUSH
10738: LD_INT 112
10740: PUSH
10741: LD_INT 113
10743: PUSH
10744: LD_INT 114
10746: PUSH
10747: EMPTY
10748: LIST
10749: LIST
10750: LIST
10751: LIST
10752: LIST
10753: LIST
10754: LIST
10755: LIST
10756: LIST
10757: LIST
10758: LIST
10759: LIST
10760: LIST
10761: LIST
10762: PUSH
10763: EMPTY
10764: LIST
10765: LIST
10766: ST_TO_ADDR
10767: GO 12138
10769: LD_INT 13
10771: DOUBLE
10772: EQUAL
10773: IFTRUE 10777
10775: GO 10973
10777: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
10778: LD_ADDR_VAR 0 1
10782: PUSH
10783: LD_INT 1
10785: PUSH
10786: LD_INT 2
10788: PUSH
10789: LD_INT 3
10791: PUSH
10792: LD_INT 4
10794: PUSH
10795: LD_INT 5
10797: PUSH
10798: LD_INT 8
10800: PUSH
10801: LD_INT 9
10803: PUSH
10804: LD_INT 10
10806: PUSH
10807: LD_INT 11
10809: PUSH
10810: LD_INT 12
10812: PUSH
10813: LD_INT 14
10815: PUSH
10816: LD_INT 15
10818: PUSH
10819: LD_INT 16
10821: PUSH
10822: LD_INT 17
10824: PUSH
10825: LD_INT 18
10827: PUSH
10828: LD_INT 19
10830: PUSH
10831: LD_INT 20
10833: PUSH
10834: LD_INT 21
10836: PUSH
10837: LD_INT 22
10839: PUSH
10840: LD_INT 23
10842: PUSH
10843: LD_INT 24
10845: PUSH
10846: LD_INT 25
10848: PUSH
10849: LD_INT 26
10851: PUSH
10852: LD_INT 27
10854: PUSH
10855: LD_INT 28
10857: PUSH
10858: LD_INT 30
10860: PUSH
10861: LD_INT 31
10863: PUSH
10864: LD_INT 32
10866: PUSH
10867: LD_INT 33
10869: PUSH
10870: LD_INT 34
10872: PUSH
10873: LD_INT 36
10875: PUSH
10876: EMPTY
10877: LIST
10878: LIST
10879: LIST
10880: LIST
10881: LIST
10882: LIST
10883: LIST
10884: LIST
10885: LIST
10886: LIST
10887: LIST
10888: LIST
10889: LIST
10890: LIST
10891: LIST
10892: LIST
10893: LIST
10894: LIST
10895: LIST
10896: LIST
10897: LIST
10898: LIST
10899: LIST
10900: LIST
10901: LIST
10902: LIST
10903: LIST
10904: LIST
10905: LIST
10906: LIST
10907: LIST
10908: PUSH
10909: LD_INT 101
10911: PUSH
10912: LD_INT 102
10914: PUSH
10915: LD_INT 103
10917: PUSH
10918: LD_INT 104
10920: PUSH
10921: LD_INT 105
10923: PUSH
10924: LD_INT 106
10926: PUSH
10927: LD_INT 107
10929: PUSH
10930: LD_INT 108
10932: PUSH
10933: LD_INT 109
10935: PUSH
10936: LD_INT 110
10938: PUSH
10939: LD_INT 111
10941: PUSH
10942: LD_INT 112
10944: PUSH
10945: LD_INT 113
10947: PUSH
10948: LD_INT 114
10950: PUSH
10951: EMPTY
10952: LIST
10953: LIST
10954: LIST
10955: LIST
10956: LIST
10957: LIST
10958: LIST
10959: LIST
10960: LIST
10961: LIST
10962: LIST
10963: LIST
10964: LIST
10965: LIST
10966: PUSH
10967: EMPTY
10968: LIST
10969: LIST
10970: ST_TO_ADDR
10971: GO 12138
10973: LD_INT 14
10975: DOUBLE
10976: EQUAL
10977: IFTRUE 10981
10979: GO 11193
10981: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
10982: LD_ADDR_VAR 0 1
10986: PUSH
10987: LD_INT 1
10989: PUSH
10990: LD_INT 2
10992: PUSH
10993: LD_INT 3
10995: PUSH
10996: LD_INT 4
10998: PUSH
10999: LD_INT 5
11001: PUSH
11002: LD_INT 6
11004: PUSH
11005: LD_INT 7
11007: PUSH
11008: LD_INT 8
11010: PUSH
11011: LD_INT 9
11013: PUSH
11014: LD_INT 10
11016: PUSH
11017: LD_INT 11
11019: PUSH
11020: LD_INT 12
11022: PUSH
11023: LD_INT 13
11025: PUSH
11026: LD_INT 14
11028: PUSH
11029: LD_INT 15
11031: PUSH
11032: LD_INT 16
11034: PUSH
11035: LD_INT 17
11037: PUSH
11038: LD_INT 18
11040: PUSH
11041: LD_INT 19
11043: PUSH
11044: LD_INT 20
11046: PUSH
11047: LD_INT 21
11049: PUSH
11050: LD_INT 22
11052: PUSH
11053: LD_INT 23
11055: PUSH
11056: LD_INT 24
11058: PUSH
11059: LD_INT 25
11061: PUSH
11062: LD_INT 26
11064: PUSH
11065: LD_INT 27
11067: PUSH
11068: LD_INT 28
11070: PUSH
11071: LD_INT 29
11073: PUSH
11074: LD_INT 30
11076: PUSH
11077: LD_INT 31
11079: PUSH
11080: LD_INT 32
11082: PUSH
11083: LD_INT 33
11085: PUSH
11086: LD_INT 34
11088: PUSH
11089: LD_INT 36
11091: PUSH
11092: EMPTY
11093: LIST
11094: LIST
11095: LIST
11096: LIST
11097: LIST
11098: LIST
11099: LIST
11100: LIST
11101: LIST
11102: LIST
11103: LIST
11104: LIST
11105: LIST
11106: LIST
11107: LIST
11108: LIST
11109: LIST
11110: LIST
11111: LIST
11112: LIST
11113: LIST
11114: LIST
11115: LIST
11116: LIST
11117: LIST
11118: LIST
11119: LIST
11120: LIST
11121: LIST
11122: LIST
11123: LIST
11124: LIST
11125: LIST
11126: LIST
11127: LIST
11128: PUSH
11129: LD_INT 101
11131: PUSH
11132: LD_INT 102
11134: PUSH
11135: LD_INT 103
11137: PUSH
11138: LD_INT 104
11140: PUSH
11141: LD_INT 105
11143: PUSH
11144: LD_INT 106
11146: PUSH
11147: LD_INT 107
11149: PUSH
11150: LD_INT 108
11152: PUSH
11153: LD_INT 109
11155: PUSH
11156: LD_INT 110
11158: PUSH
11159: LD_INT 111
11161: PUSH
11162: LD_INT 112
11164: PUSH
11165: LD_INT 113
11167: PUSH
11168: LD_INT 114
11170: PUSH
11171: EMPTY
11172: LIST
11173: LIST
11174: LIST
11175: LIST
11176: LIST
11177: LIST
11178: LIST
11179: LIST
11180: LIST
11181: LIST
11182: LIST
11183: LIST
11184: LIST
11185: LIST
11186: PUSH
11187: EMPTY
11188: LIST
11189: LIST
11190: ST_TO_ADDR
11191: GO 12138
11193: LD_INT 15
11195: DOUBLE
11196: EQUAL
11197: IFTRUE 11201
11199: GO 11413
11201: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
11202: LD_ADDR_VAR 0 1
11206: PUSH
11207: LD_INT 1
11209: PUSH
11210: LD_INT 2
11212: PUSH
11213: LD_INT 3
11215: PUSH
11216: LD_INT 4
11218: PUSH
11219: LD_INT 5
11221: PUSH
11222: LD_INT 6
11224: PUSH
11225: LD_INT 7
11227: PUSH
11228: LD_INT 8
11230: PUSH
11231: LD_INT 9
11233: PUSH
11234: LD_INT 10
11236: PUSH
11237: LD_INT 11
11239: PUSH
11240: LD_INT 12
11242: PUSH
11243: LD_INT 13
11245: PUSH
11246: LD_INT 14
11248: PUSH
11249: LD_INT 15
11251: PUSH
11252: LD_INT 16
11254: PUSH
11255: LD_INT 17
11257: PUSH
11258: LD_INT 18
11260: PUSH
11261: LD_INT 19
11263: PUSH
11264: LD_INT 20
11266: PUSH
11267: LD_INT 21
11269: PUSH
11270: LD_INT 22
11272: PUSH
11273: LD_INT 23
11275: PUSH
11276: LD_INT 24
11278: PUSH
11279: LD_INT 25
11281: PUSH
11282: LD_INT 26
11284: PUSH
11285: LD_INT 27
11287: PUSH
11288: LD_INT 28
11290: PUSH
11291: LD_INT 29
11293: PUSH
11294: LD_INT 30
11296: PUSH
11297: LD_INT 31
11299: PUSH
11300: LD_INT 32
11302: PUSH
11303: LD_INT 33
11305: PUSH
11306: LD_INT 34
11308: PUSH
11309: LD_INT 36
11311: PUSH
11312: EMPTY
11313: LIST
11314: LIST
11315: LIST
11316: LIST
11317: LIST
11318: LIST
11319: LIST
11320: LIST
11321: LIST
11322: LIST
11323: LIST
11324: LIST
11325: LIST
11326: LIST
11327: LIST
11328: LIST
11329: LIST
11330: LIST
11331: LIST
11332: LIST
11333: LIST
11334: LIST
11335: LIST
11336: LIST
11337: LIST
11338: LIST
11339: LIST
11340: LIST
11341: LIST
11342: LIST
11343: LIST
11344: LIST
11345: LIST
11346: LIST
11347: LIST
11348: PUSH
11349: LD_INT 101
11351: PUSH
11352: LD_INT 102
11354: PUSH
11355: LD_INT 103
11357: PUSH
11358: LD_INT 104
11360: PUSH
11361: LD_INT 105
11363: PUSH
11364: LD_INT 106
11366: PUSH
11367: LD_INT 107
11369: PUSH
11370: LD_INT 108
11372: PUSH
11373: LD_INT 109
11375: PUSH
11376: LD_INT 110
11378: PUSH
11379: LD_INT 111
11381: PUSH
11382: LD_INT 112
11384: PUSH
11385: LD_INT 113
11387: PUSH
11388: LD_INT 114
11390: PUSH
11391: EMPTY
11392: LIST
11393: LIST
11394: LIST
11395: LIST
11396: LIST
11397: LIST
11398: LIST
11399: LIST
11400: LIST
11401: LIST
11402: LIST
11403: LIST
11404: LIST
11405: LIST
11406: PUSH
11407: EMPTY
11408: LIST
11409: LIST
11410: ST_TO_ADDR
11411: GO 12138
11413: LD_INT 16
11415: DOUBLE
11416: EQUAL
11417: IFTRUE 11421
11419: GO 11545
11421: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
11422: LD_ADDR_VAR 0 1
11426: PUSH
11427: LD_INT 2
11429: PUSH
11430: LD_INT 4
11432: PUSH
11433: LD_INT 5
11435: PUSH
11436: LD_INT 7
11438: PUSH
11439: LD_INT 11
11441: PUSH
11442: LD_INT 12
11444: PUSH
11445: LD_INT 15
11447: PUSH
11448: LD_INT 16
11450: PUSH
11451: LD_INT 20
11453: PUSH
11454: LD_INT 21
11456: PUSH
11457: LD_INT 22
11459: PUSH
11460: LD_INT 23
11462: PUSH
11463: LD_INT 25
11465: PUSH
11466: LD_INT 26
11468: PUSH
11469: LD_INT 30
11471: PUSH
11472: LD_INT 31
11474: PUSH
11475: LD_INT 32
11477: PUSH
11478: LD_INT 33
11480: PUSH
11481: LD_INT 34
11483: PUSH
11484: EMPTY
11485: LIST
11486: LIST
11487: LIST
11488: LIST
11489: LIST
11490: LIST
11491: LIST
11492: LIST
11493: LIST
11494: LIST
11495: LIST
11496: LIST
11497: LIST
11498: LIST
11499: LIST
11500: LIST
11501: LIST
11502: LIST
11503: LIST
11504: PUSH
11505: LD_INT 101
11507: PUSH
11508: LD_INT 102
11510: PUSH
11511: LD_INT 103
11513: PUSH
11514: LD_INT 106
11516: PUSH
11517: LD_INT 108
11519: PUSH
11520: LD_INT 112
11522: PUSH
11523: LD_INT 113
11525: PUSH
11526: LD_INT 114
11528: PUSH
11529: EMPTY
11530: LIST
11531: LIST
11532: LIST
11533: LIST
11534: LIST
11535: LIST
11536: LIST
11537: LIST
11538: PUSH
11539: EMPTY
11540: LIST
11541: LIST
11542: ST_TO_ADDR
11543: GO 12138
11545: LD_INT 17
11547: DOUBLE
11548: EQUAL
11549: IFTRUE 11553
11551: GO 11765
11553: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
11554: LD_ADDR_VAR 0 1
11558: PUSH
11559: LD_INT 1
11561: PUSH
11562: LD_INT 2
11564: PUSH
11565: LD_INT 3
11567: PUSH
11568: LD_INT 4
11570: PUSH
11571: LD_INT 5
11573: PUSH
11574: LD_INT 6
11576: PUSH
11577: LD_INT 7
11579: PUSH
11580: LD_INT 8
11582: PUSH
11583: LD_INT 9
11585: PUSH
11586: LD_INT 10
11588: PUSH
11589: LD_INT 11
11591: PUSH
11592: LD_INT 12
11594: PUSH
11595: LD_INT 13
11597: PUSH
11598: LD_INT 14
11600: PUSH
11601: LD_INT 15
11603: PUSH
11604: LD_INT 16
11606: PUSH
11607: LD_INT 17
11609: PUSH
11610: LD_INT 18
11612: PUSH
11613: LD_INT 19
11615: PUSH
11616: LD_INT 20
11618: PUSH
11619: LD_INT 21
11621: PUSH
11622: LD_INT 22
11624: PUSH
11625: LD_INT 23
11627: PUSH
11628: LD_INT 24
11630: PUSH
11631: LD_INT 25
11633: PUSH
11634: LD_INT 26
11636: PUSH
11637: LD_INT 27
11639: PUSH
11640: LD_INT 28
11642: PUSH
11643: LD_INT 29
11645: PUSH
11646: LD_INT 30
11648: PUSH
11649: LD_INT 31
11651: PUSH
11652: LD_INT 32
11654: PUSH
11655: LD_INT 33
11657: PUSH
11658: LD_INT 34
11660: PUSH
11661: LD_INT 36
11663: PUSH
11664: EMPTY
11665: LIST
11666: LIST
11667: LIST
11668: LIST
11669: LIST
11670: LIST
11671: LIST
11672: LIST
11673: LIST
11674: LIST
11675: LIST
11676: LIST
11677: LIST
11678: LIST
11679: LIST
11680: LIST
11681: LIST
11682: LIST
11683: LIST
11684: LIST
11685: LIST
11686: LIST
11687: LIST
11688: LIST
11689: LIST
11690: LIST
11691: LIST
11692: LIST
11693: LIST
11694: LIST
11695: LIST
11696: LIST
11697: LIST
11698: LIST
11699: LIST
11700: PUSH
11701: LD_INT 101
11703: PUSH
11704: LD_INT 102
11706: PUSH
11707: LD_INT 103
11709: PUSH
11710: LD_INT 104
11712: PUSH
11713: LD_INT 105
11715: PUSH
11716: LD_INT 106
11718: PUSH
11719: LD_INT 107
11721: PUSH
11722: LD_INT 108
11724: PUSH
11725: LD_INT 109
11727: PUSH
11728: LD_INT 110
11730: PUSH
11731: LD_INT 111
11733: PUSH
11734: LD_INT 112
11736: PUSH
11737: LD_INT 113
11739: PUSH
11740: LD_INT 114
11742: PUSH
11743: EMPTY
11744: LIST
11745: LIST
11746: LIST
11747: LIST
11748: LIST
11749: LIST
11750: LIST
11751: LIST
11752: LIST
11753: LIST
11754: LIST
11755: LIST
11756: LIST
11757: LIST
11758: PUSH
11759: EMPTY
11760: LIST
11761: LIST
11762: ST_TO_ADDR
11763: GO 12138
11765: LD_INT 18
11767: DOUBLE
11768: EQUAL
11769: IFTRUE 11773
11771: GO 11909
11773: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
11774: LD_ADDR_VAR 0 1
11778: PUSH
11779: LD_INT 2
11781: PUSH
11782: LD_INT 4
11784: PUSH
11785: LD_INT 5
11787: PUSH
11788: LD_INT 7
11790: PUSH
11791: LD_INT 11
11793: PUSH
11794: LD_INT 12
11796: PUSH
11797: LD_INT 15
11799: PUSH
11800: LD_INT 16
11802: PUSH
11803: LD_INT 20
11805: PUSH
11806: LD_INT 21
11808: PUSH
11809: LD_INT 22
11811: PUSH
11812: LD_INT 23
11814: PUSH
11815: LD_INT 25
11817: PUSH
11818: LD_INT 26
11820: PUSH
11821: LD_INT 30
11823: PUSH
11824: LD_INT 31
11826: PUSH
11827: LD_INT 32
11829: PUSH
11830: LD_INT 33
11832: PUSH
11833: LD_INT 34
11835: PUSH
11836: LD_INT 35
11838: PUSH
11839: LD_INT 36
11841: PUSH
11842: EMPTY
11843: LIST
11844: LIST
11845: LIST
11846: LIST
11847: LIST
11848: LIST
11849: LIST
11850: LIST
11851: LIST
11852: LIST
11853: LIST
11854: LIST
11855: LIST
11856: LIST
11857: LIST
11858: LIST
11859: LIST
11860: LIST
11861: LIST
11862: LIST
11863: LIST
11864: PUSH
11865: LD_INT 101
11867: PUSH
11868: LD_INT 102
11870: PUSH
11871: LD_INT 103
11873: PUSH
11874: LD_INT 106
11876: PUSH
11877: LD_INT 108
11879: PUSH
11880: LD_INT 112
11882: PUSH
11883: LD_INT 113
11885: PUSH
11886: LD_INT 114
11888: PUSH
11889: LD_INT 115
11891: PUSH
11892: EMPTY
11893: LIST
11894: LIST
11895: LIST
11896: LIST
11897: LIST
11898: LIST
11899: LIST
11900: LIST
11901: LIST
11902: PUSH
11903: EMPTY
11904: LIST
11905: LIST
11906: ST_TO_ADDR
11907: GO 12138
11909: LD_INT 19
11911: DOUBLE
11912: EQUAL
11913: IFTRUE 11917
11915: GO 12137
11917: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
11918: LD_ADDR_VAR 0 1
11922: PUSH
11923: LD_INT 1
11925: PUSH
11926: LD_INT 2
11928: PUSH
11929: LD_INT 3
11931: PUSH
11932: LD_INT 4
11934: PUSH
11935: LD_INT 5
11937: PUSH
11938: LD_INT 6
11940: PUSH
11941: LD_INT 7
11943: PUSH
11944: LD_INT 8
11946: PUSH
11947: LD_INT 9
11949: PUSH
11950: LD_INT 10
11952: PUSH
11953: LD_INT 11
11955: PUSH
11956: LD_INT 12
11958: PUSH
11959: LD_INT 13
11961: PUSH
11962: LD_INT 14
11964: PUSH
11965: LD_INT 15
11967: PUSH
11968: LD_INT 16
11970: PUSH
11971: LD_INT 17
11973: PUSH
11974: LD_INT 18
11976: PUSH
11977: LD_INT 19
11979: PUSH
11980: LD_INT 20
11982: PUSH
11983: LD_INT 21
11985: PUSH
11986: LD_INT 22
11988: PUSH
11989: LD_INT 23
11991: PUSH
11992: LD_INT 24
11994: PUSH
11995: LD_INT 25
11997: PUSH
11998: LD_INT 26
12000: PUSH
12001: LD_INT 27
12003: PUSH
12004: LD_INT 28
12006: PUSH
12007: LD_INT 29
12009: PUSH
12010: LD_INT 30
12012: PUSH
12013: LD_INT 31
12015: PUSH
12016: LD_INT 32
12018: PUSH
12019: LD_INT 33
12021: PUSH
12022: LD_INT 34
12024: PUSH
12025: LD_INT 35
12027: PUSH
12028: LD_INT 36
12030: PUSH
12031: EMPTY
12032: LIST
12033: LIST
12034: LIST
12035: LIST
12036: LIST
12037: LIST
12038: LIST
12039: LIST
12040: LIST
12041: LIST
12042: LIST
12043: LIST
12044: LIST
12045: LIST
12046: LIST
12047: LIST
12048: LIST
12049: LIST
12050: LIST
12051: LIST
12052: LIST
12053: LIST
12054: LIST
12055: LIST
12056: LIST
12057: LIST
12058: LIST
12059: LIST
12060: LIST
12061: LIST
12062: LIST
12063: LIST
12064: LIST
12065: LIST
12066: LIST
12067: LIST
12068: PUSH
12069: LD_INT 101
12071: PUSH
12072: LD_INT 102
12074: PUSH
12075: LD_INT 103
12077: PUSH
12078: LD_INT 104
12080: PUSH
12081: LD_INT 105
12083: PUSH
12084: LD_INT 106
12086: PUSH
12087: LD_INT 107
12089: PUSH
12090: LD_INT 108
12092: PUSH
12093: LD_INT 109
12095: PUSH
12096: LD_INT 110
12098: PUSH
12099: LD_INT 111
12101: PUSH
12102: LD_INT 112
12104: PUSH
12105: LD_INT 113
12107: PUSH
12108: LD_INT 114
12110: PUSH
12111: LD_INT 115
12113: PUSH
12114: EMPTY
12115: LIST
12116: LIST
12117: LIST
12118: LIST
12119: LIST
12120: LIST
12121: LIST
12122: LIST
12123: LIST
12124: LIST
12125: LIST
12126: LIST
12127: LIST
12128: LIST
12129: LIST
12130: PUSH
12131: EMPTY
12132: LIST
12133: LIST
12134: ST_TO_ADDR
12135: GO 12138
12137: POP
// end else
12138: GO 12357
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
12140: LD_ADDR_VAR 0 1
12144: PUSH
12145: LD_INT 1
12147: PUSH
12148: LD_INT 2
12150: PUSH
12151: LD_INT 3
12153: PUSH
12154: LD_INT 4
12156: PUSH
12157: LD_INT 5
12159: PUSH
12160: LD_INT 6
12162: PUSH
12163: LD_INT 7
12165: PUSH
12166: LD_INT 8
12168: PUSH
12169: LD_INT 9
12171: PUSH
12172: LD_INT 10
12174: PUSH
12175: LD_INT 11
12177: PUSH
12178: LD_INT 12
12180: PUSH
12181: LD_INT 13
12183: PUSH
12184: LD_INT 14
12186: PUSH
12187: LD_INT 15
12189: PUSH
12190: LD_INT 16
12192: PUSH
12193: LD_INT 17
12195: PUSH
12196: LD_INT 18
12198: PUSH
12199: LD_INT 19
12201: PUSH
12202: LD_INT 20
12204: PUSH
12205: LD_INT 21
12207: PUSH
12208: LD_INT 22
12210: PUSH
12211: LD_INT 23
12213: PUSH
12214: LD_INT 24
12216: PUSH
12217: LD_INT 25
12219: PUSH
12220: LD_INT 26
12222: PUSH
12223: LD_INT 27
12225: PUSH
12226: LD_INT 28
12228: PUSH
12229: LD_INT 29
12231: PUSH
12232: LD_INT 30
12234: PUSH
12235: LD_INT 31
12237: PUSH
12238: LD_INT 32
12240: PUSH
12241: LD_INT 33
12243: PUSH
12244: LD_INT 34
12246: PUSH
12247: LD_INT 35
12249: PUSH
12250: LD_INT 36
12252: PUSH
12253: EMPTY
12254: LIST
12255: LIST
12256: LIST
12257: LIST
12258: LIST
12259: LIST
12260: LIST
12261: LIST
12262: LIST
12263: LIST
12264: LIST
12265: LIST
12266: LIST
12267: LIST
12268: LIST
12269: LIST
12270: LIST
12271: LIST
12272: LIST
12273: LIST
12274: LIST
12275: LIST
12276: LIST
12277: LIST
12278: LIST
12279: LIST
12280: LIST
12281: LIST
12282: LIST
12283: LIST
12284: LIST
12285: LIST
12286: LIST
12287: LIST
12288: LIST
12289: LIST
12290: PUSH
12291: LD_INT 101
12293: PUSH
12294: LD_INT 102
12296: PUSH
12297: LD_INT 103
12299: PUSH
12300: LD_INT 104
12302: PUSH
12303: LD_INT 105
12305: PUSH
12306: LD_INT 106
12308: PUSH
12309: LD_INT 107
12311: PUSH
12312: LD_INT 108
12314: PUSH
12315: LD_INT 109
12317: PUSH
12318: LD_INT 110
12320: PUSH
12321: LD_INT 111
12323: PUSH
12324: LD_INT 112
12326: PUSH
12327: LD_INT 113
12329: PUSH
12330: LD_INT 114
12332: PUSH
12333: LD_INT 115
12335: PUSH
12336: EMPTY
12337: LIST
12338: LIST
12339: LIST
12340: LIST
12341: LIST
12342: LIST
12343: LIST
12344: LIST
12345: LIST
12346: LIST
12347: LIST
12348: LIST
12349: LIST
12350: LIST
12351: LIST
12352: PUSH
12353: EMPTY
12354: LIST
12355: LIST
12356: ST_TO_ADDR
// if result then
12357: LD_VAR 0 1
12361: IFFALSE 12650
// begin normal :=  ;
12363: LD_ADDR_VAR 0 3
12367: PUSH
12368: LD_STRING 
12370: ST_TO_ADDR
// hardcore :=  ;
12371: LD_ADDR_VAR 0 4
12375: PUSH
12376: LD_STRING 
12378: ST_TO_ADDR
// for i = 1 to normalCounter do
12379: LD_ADDR_VAR 0 5
12383: PUSH
12384: DOUBLE
12385: LD_INT 1
12387: DEC
12388: ST_TO_ADDR
12389: LD_EXP 67
12393: PUSH
12394: FOR_TO
12395: IFFALSE 12496
// begin tmp := 0 ;
12397: LD_ADDR_VAR 0 2
12401: PUSH
12402: LD_STRING 0
12404: ST_TO_ADDR
// if result [ 1 ] then
12405: LD_VAR 0 1
12409: PUSH
12410: LD_INT 1
12412: ARRAY
12413: IFFALSE 12478
// if result [ 1 ] [ 1 ] = i then
12415: LD_VAR 0 1
12419: PUSH
12420: LD_INT 1
12422: ARRAY
12423: PUSH
12424: LD_INT 1
12426: ARRAY
12427: PUSH
12428: LD_VAR 0 5
12432: EQUAL
12433: IFFALSE 12478
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
12435: LD_ADDR_VAR 0 1
12439: PUSH
12440: LD_VAR 0 1
12444: PPUSH
12445: LD_INT 1
12447: PPUSH
12448: LD_VAR 0 1
12452: PUSH
12453: LD_INT 1
12455: ARRAY
12456: PPUSH
12457: LD_INT 1
12459: PPUSH
12460: CALL_OW 3
12464: PPUSH
12465: CALL_OW 1
12469: ST_TO_ADDR
// tmp := 1 ;
12470: LD_ADDR_VAR 0 2
12474: PUSH
12475: LD_STRING 1
12477: ST_TO_ADDR
// end ; normal := normal & tmp ;
12478: LD_ADDR_VAR 0 3
12482: PUSH
12483: LD_VAR 0 3
12487: PUSH
12488: LD_VAR 0 2
12492: STR
12493: ST_TO_ADDR
// end ;
12494: GO 12394
12496: POP
12497: POP
// for i = 1 to hardcoreCounter do
12498: LD_ADDR_VAR 0 5
12502: PUSH
12503: DOUBLE
12504: LD_INT 1
12506: DEC
12507: ST_TO_ADDR
12508: LD_EXP 68
12512: PUSH
12513: FOR_TO
12514: IFFALSE 12619
// begin tmp := 0 ;
12516: LD_ADDR_VAR 0 2
12520: PUSH
12521: LD_STRING 0
12523: ST_TO_ADDR
// if result [ 2 ] then
12524: LD_VAR 0 1
12528: PUSH
12529: LD_INT 2
12531: ARRAY
12532: IFFALSE 12601
// if result [ 2 ] [ 1 ] = 100 + i then
12534: LD_VAR 0 1
12538: PUSH
12539: LD_INT 2
12541: ARRAY
12542: PUSH
12543: LD_INT 1
12545: ARRAY
12546: PUSH
12547: LD_INT 100
12549: PUSH
12550: LD_VAR 0 5
12554: PLUS
12555: EQUAL
12556: IFFALSE 12601
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
12558: LD_ADDR_VAR 0 1
12562: PUSH
12563: LD_VAR 0 1
12567: PPUSH
12568: LD_INT 2
12570: PPUSH
12571: LD_VAR 0 1
12575: PUSH
12576: LD_INT 2
12578: ARRAY
12579: PPUSH
12580: LD_INT 1
12582: PPUSH
12583: CALL_OW 3
12587: PPUSH
12588: CALL_OW 1
12592: ST_TO_ADDR
// tmp := 1 ;
12593: LD_ADDR_VAR 0 2
12597: PUSH
12598: LD_STRING 1
12600: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
12601: LD_ADDR_VAR 0 4
12605: PUSH
12606: LD_VAR 0 4
12610: PUSH
12611: LD_VAR 0 2
12615: STR
12616: ST_TO_ADDR
// end ;
12617: GO 12513
12619: POP
12620: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
12621: LD_STRING getStreamItemsFromMission("
12623: PUSH
12624: LD_VAR 0 3
12628: STR
12629: PUSH
12630: LD_STRING ","
12632: STR
12633: PUSH
12634: LD_VAR 0 4
12638: STR
12639: PUSH
12640: LD_STRING ")
12642: STR
12643: PPUSH
12644: CALL_OW 559
// end else
12648: GO 12657
// ToLua ( getStreamItemsFromMission("","") ) ;
12650: LD_STRING getStreamItemsFromMission("","")
12652: PPUSH
12653: CALL_OW 559
// end ;
12657: LD_VAR 0 1
12661: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
12662: LD_VAR 0 2
12666: PUSH
12667: LD_INT 100
12669: EQUAL
12670: IFFALSE 13619
// begin if not StreamModeActive then
12672: LD_EXP 66
12676: NOT
12677: IFFALSE 12687
// StreamModeActive := true ;
12679: LD_ADDR_EXP 66
12683: PUSH
12684: LD_INT 1
12686: ST_TO_ADDR
// if p3 = 0 then
12687: LD_VAR 0 3
12691: PUSH
12692: LD_INT 0
12694: EQUAL
12695: IFFALSE 12701
// InitStreamMode ;
12697: CALL 8740 0 0
// if p3 = 1 then
12701: LD_VAR 0 3
12705: PUSH
12706: LD_INT 1
12708: EQUAL
12709: IFFALSE 12719
// sRocket := true ;
12711: LD_ADDR_EXP 71
12715: PUSH
12716: LD_INT 1
12718: ST_TO_ADDR
// if p3 = 2 then
12719: LD_VAR 0 3
12723: PUSH
12724: LD_INT 2
12726: EQUAL
12727: IFFALSE 12737
// sSpeed := true ;
12729: LD_ADDR_EXP 70
12733: PUSH
12734: LD_INT 1
12736: ST_TO_ADDR
// if p3 = 3 then
12737: LD_VAR 0 3
12741: PUSH
12742: LD_INT 3
12744: EQUAL
12745: IFFALSE 12755
// sEngine := true ;
12747: LD_ADDR_EXP 72
12751: PUSH
12752: LD_INT 1
12754: ST_TO_ADDR
// if p3 = 4 then
12755: LD_VAR 0 3
12759: PUSH
12760: LD_INT 4
12762: EQUAL
12763: IFFALSE 12773
// sSpec := true ;
12765: LD_ADDR_EXP 69
12769: PUSH
12770: LD_INT 1
12772: ST_TO_ADDR
// if p3 = 5 then
12773: LD_VAR 0 3
12777: PUSH
12778: LD_INT 5
12780: EQUAL
12781: IFFALSE 12791
// sLevel := true ;
12783: LD_ADDR_EXP 73
12787: PUSH
12788: LD_INT 1
12790: ST_TO_ADDR
// if p3 = 6 then
12791: LD_VAR 0 3
12795: PUSH
12796: LD_INT 6
12798: EQUAL
12799: IFFALSE 12809
// sArmoury := true ;
12801: LD_ADDR_EXP 74
12805: PUSH
12806: LD_INT 1
12808: ST_TO_ADDR
// if p3 = 7 then
12809: LD_VAR 0 3
12813: PUSH
12814: LD_INT 7
12816: EQUAL
12817: IFFALSE 12827
// sRadar := true ;
12819: LD_ADDR_EXP 75
12823: PUSH
12824: LD_INT 1
12826: ST_TO_ADDR
// if p3 = 8 then
12827: LD_VAR 0 3
12831: PUSH
12832: LD_INT 8
12834: EQUAL
12835: IFFALSE 12845
// sBunker := true ;
12837: LD_ADDR_EXP 76
12841: PUSH
12842: LD_INT 1
12844: ST_TO_ADDR
// if p3 = 9 then
12845: LD_VAR 0 3
12849: PUSH
12850: LD_INT 9
12852: EQUAL
12853: IFFALSE 12863
// sHack := true ;
12855: LD_ADDR_EXP 77
12859: PUSH
12860: LD_INT 1
12862: ST_TO_ADDR
// if p3 = 10 then
12863: LD_VAR 0 3
12867: PUSH
12868: LD_INT 10
12870: EQUAL
12871: IFFALSE 12881
// sFire := true ;
12873: LD_ADDR_EXP 78
12877: PUSH
12878: LD_INT 1
12880: ST_TO_ADDR
// if p3 = 11 then
12881: LD_VAR 0 3
12885: PUSH
12886: LD_INT 11
12888: EQUAL
12889: IFFALSE 12899
// sRefresh := true ;
12891: LD_ADDR_EXP 79
12895: PUSH
12896: LD_INT 1
12898: ST_TO_ADDR
// if p3 = 12 then
12899: LD_VAR 0 3
12903: PUSH
12904: LD_INT 12
12906: EQUAL
12907: IFFALSE 12917
// sExp := true ;
12909: LD_ADDR_EXP 80
12913: PUSH
12914: LD_INT 1
12916: ST_TO_ADDR
// if p3 = 13 then
12917: LD_VAR 0 3
12921: PUSH
12922: LD_INT 13
12924: EQUAL
12925: IFFALSE 12935
// sDepot := true ;
12927: LD_ADDR_EXP 81
12931: PUSH
12932: LD_INT 1
12934: ST_TO_ADDR
// if p3 = 14 then
12935: LD_VAR 0 3
12939: PUSH
12940: LD_INT 14
12942: EQUAL
12943: IFFALSE 12953
// sFlag := true ;
12945: LD_ADDR_EXP 82
12949: PUSH
12950: LD_INT 1
12952: ST_TO_ADDR
// if p3 = 15 then
12953: LD_VAR 0 3
12957: PUSH
12958: LD_INT 15
12960: EQUAL
12961: IFFALSE 12971
// sKamikadze := true ;
12963: LD_ADDR_EXP 90
12967: PUSH
12968: LD_INT 1
12970: ST_TO_ADDR
// if p3 = 16 then
12971: LD_VAR 0 3
12975: PUSH
12976: LD_INT 16
12978: EQUAL
12979: IFFALSE 12989
// sTroll := true ;
12981: LD_ADDR_EXP 91
12985: PUSH
12986: LD_INT 1
12988: ST_TO_ADDR
// if p3 = 17 then
12989: LD_VAR 0 3
12993: PUSH
12994: LD_INT 17
12996: EQUAL
12997: IFFALSE 13007
// sSlow := true ;
12999: LD_ADDR_EXP 92
13003: PUSH
13004: LD_INT 1
13006: ST_TO_ADDR
// if p3 = 18 then
13007: LD_VAR 0 3
13011: PUSH
13012: LD_INT 18
13014: EQUAL
13015: IFFALSE 13025
// sLack := true ;
13017: LD_ADDR_EXP 93
13021: PUSH
13022: LD_INT 1
13024: ST_TO_ADDR
// if p3 = 19 then
13025: LD_VAR 0 3
13029: PUSH
13030: LD_INT 19
13032: EQUAL
13033: IFFALSE 13043
// sTank := true ;
13035: LD_ADDR_EXP 95
13039: PUSH
13040: LD_INT 1
13042: ST_TO_ADDR
// if p3 = 20 then
13043: LD_VAR 0 3
13047: PUSH
13048: LD_INT 20
13050: EQUAL
13051: IFFALSE 13061
// sRemote := true ;
13053: LD_ADDR_EXP 96
13057: PUSH
13058: LD_INT 1
13060: ST_TO_ADDR
// if p3 = 21 then
13061: LD_VAR 0 3
13065: PUSH
13066: LD_INT 21
13068: EQUAL
13069: IFFALSE 13079
// sPowell := true ;
13071: LD_ADDR_EXP 97
13075: PUSH
13076: LD_INT 1
13078: ST_TO_ADDR
// if p3 = 22 then
13079: LD_VAR 0 3
13083: PUSH
13084: LD_INT 22
13086: EQUAL
13087: IFFALSE 13097
// sTeleport := true ;
13089: LD_ADDR_EXP 100
13093: PUSH
13094: LD_INT 1
13096: ST_TO_ADDR
// if p3 = 23 then
13097: LD_VAR 0 3
13101: PUSH
13102: LD_INT 23
13104: EQUAL
13105: IFFALSE 13115
// sOilTower := true ;
13107: LD_ADDR_EXP 102
13111: PUSH
13112: LD_INT 1
13114: ST_TO_ADDR
// if p3 = 24 then
13115: LD_VAR 0 3
13119: PUSH
13120: LD_INT 24
13122: EQUAL
13123: IFFALSE 13133
// sShovel := true ;
13125: LD_ADDR_EXP 103
13129: PUSH
13130: LD_INT 1
13132: ST_TO_ADDR
// if p3 = 25 then
13133: LD_VAR 0 3
13137: PUSH
13138: LD_INT 25
13140: EQUAL
13141: IFFALSE 13151
// sSheik := true ;
13143: LD_ADDR_EXP 104
13147: PUSH
13148: LD_INT 1
13150: ST_TO_ADDR
// if p3 = 26 then
13151: LD_VAR 0 3
13155: PUSH
13156: LD_INT 26
13158: EQUAL
13159: IFFALSE 13169
// sEarthquake := true ;
13161: LD_ADDR_EXP 106
13165: PUSH
13166: LD_INT 1
13168: ST_TO_ADDR
// if p3 = 27 then
13169: LD_VAR 0 3
13173: PUSH
13174: LD_INT 27
13176: EQUAL
13177: IFFALSE 13187
// sAI := true ;
13179: LD_ADDR_EXP 107
13183: PUSH
13184: LD_INT 1
13186: ST_TO_ADDR
// if p3 = 28 then
13187: LD_VAR 0 3
13191: PUSH
13192: LD_INT 28
13194: EQUAL
13195: IFFALSE 13205
// sCargo := true ;
13197: LD_ADDR_EXP 110
13201: PUSH
13202: LD_INT 1
13204: ST_TO_ADDR
// if p3 = 29 then
13205: LD_VAR 0 3
13209: PUSH
13210: LD_INT 29
13212: EQUAL
13213: IFFALSE 13223
// sDLaser := true ;
13215: LD_ADDR_EXP 111
13219: PUSH
13220: LD_INT 1
13222: ST_TO_ADDR
// if p3 = 30 then
13223: LD_VAR 0 3
13227: PUSH
13228: LD_INT 30
13230: EQUAL
13231: IFFALSE 13241
// sExchange := true ;
13233: LD_ADDR_EXP 112
13237: PUSH
13238: LD_INT 1
13240: ST_TO_ADDR
// if p3 = 31 then
13241: LD_VAR 0 3
13245: PUSH
13246: LD_INT 31
13248: EQUAL
13249: IFFALSE 13259
// sFac := true ;
13251: LD_ADDR_EXP 113
13255: PUSH
13256: LD_INT 1
13258: ST_TO_ADDR
// if p3 = 32 then
13259: LD_VAR 0 3
13263: PUSH
13264: LD_INT 32
13266: EQUAL
13267: IFFALSE 13277
// sPower := true ;
13269: LD_ADDR_EXP 114
13273: PUSH
13274: LD_INT 1
13276: ST_TO_ADDR
// if p3 = 33 then
13277: LD_VAR 0 3
13281: PUSH
13282: LD_INT 33
13284: EQUAL
13285: IFFALSE 13295
// sRandom := true ;
13287: LD_ADDR_EXP 115
13291: PUSH
13292: LD_INT 1
13294: ST_TO_ADDR
// if p3 = 34 then
13295: LD_VAR 0 3
13299: PUSH
13300: LD_INT 34
13302: EQUAL
13303: IFFALSE 13313
// sShield := true ;
13305: LD_ADDR_EXP 116
13309: PUSH
13310: LD_INT 1
13312: ST_TO_ADDR
// if p3 = 35 then
13313: LD_VAR 0 3
13317: PUSH
13318: LD_INT 35
13320: EQUAL
13321: IFFALSE 13331
// sTime := true ;
13323: LD_ADDR_EXP 117
13327: PUSH
13328: LD_INT 1
13330: ST_TO_ADDR
// if p3 = 36 then
13331: LD_VAR 0 3
13335: PUSH
13336: LD_INT 36
13338: EQUAL
13339: IFFALSE 13349
// sTools := true ;
13341: LD_ADDR_EXP 118
13345: PUSH
13346: LD_INT 1
13348: ST_TO_ADDR
// if p3 = 101 then
13349: LD_VAR 0 3
13353: PUSH
13354: LD_INT 101
13356: EQUAL
13357: IFFALSE 13367
// sSold := true ;
13359: LD_ADDR_EXP 83
13363: PUSH
13364: LD_INT 1
13366: ST_TO_ADDR
// if p3 = 102 then
13367: LD_VAR 0 3
13371: PUSH
13372: LD_INT 102
13374: EQUAL
13375: IFFALSE 13385
// sDiff := true ;
13377: LD_ADDR_EXP 84
13381: PUSH
13382: LD_INT 1
13384: ST_TO_ADDR
// if p3 = 103 then
13385: LD_VAR 0 3
13389: PUSH
13390: LD_INT 103
13392: EQUAL
13393: IFFALSE 13403
// sFog := true ;
13395: LD_ADDR_EXP 87
13399: PUSH
13400: LD_INT 1
13402: ST_TO_ADDR
// if p3 = 104 then
13403: LD_VAR 0 3
13407: PUSH
13408: LD_INT 104
13410: EQUAL
13411: IFFALSE 13421
// sReset := true ;
13413: LD_ADDR_EXP 88
13417: PUSH
13418: LD_INT 1
13420: ST_TO_ADDR
// if p3 = 105 then
13421: LD_VAR 0 3
13425: PUSH
13426: LD_INT 105
13428: EQUAL
13429: IFFALSE 13439
// sSun := true ;
13431: LD_ADDR_EXP 89
13435: PUSH
13436: LD_INT 1
13438: ST_TO_ADDR
// if p3 = 106 then
13439: LD_VAR 0 3
13443: PUSH
13444: LD_INT 106
13446: EQUAL
13447: IFFALSE 13457
// sTiger := true ;
13449: LD_ADDR_EXP 85
13453: PUSH
13454: LD_INT 1
13456: ST_TO_ADDR
// if p3 = 107 then
13457: LD_VAR 0 3
13461: PUSH
13462: LD_INT 107
13464: EQUAL
13465: IFFALSE 13475
// sBomb := true ;
13467: LD_ADDR_EXP 86
13471: PUSH
13472: LD_INT 1
13474: ST_TO_ADDR
// if p3 = 108 then
13475: LD_VAR 0 3
13479: PUSH
13480: LD_INT 108
13482: EQUAL
13483: IFFALSE 13493
// sWound := true ;
13485: LD_ADDR_EXP 94
13489: PUSH
13490: LD_INT 1
13492: ST_TO_ADDR
// if p3 = 109 then
13493: LD_VAR 0 3
13497: PUSH
13498: LD_INT 109
13500: EQUAL
13501: IFFALSE 13511
// sBetray := true ;
13503: LD_ADDR_EXP 98
13507: PUSH
13508: LD_INT 1
13510: ST_TO_ADDR
// if p3 = 110 then
13511: LD_VAR 0 3
13515: PUSH
13516: LD_INT 110
13518: EQUAL
13519: IFFALSE 13529
// sContamin := true ;
13521: LD_ADDR_EXP 99
13525: PUSH
13526: LD_INT 1
13528: ST_TO_ADDR
// if p3 = 111 then
13529: LD_VAR 0 3
13533: PUSH
13534: LD_INT 111
13536: EQUAL
13537: IFFALSE 13547
// sOil := true ;
13539: LD_ADDR_EXP 101
13543: PUSH
13544: LD_INT 1
13546: ST_TO_ADDR
// if p3 = 112 then
13547: LD_VAR 0 3
13551: PUSH
13552: LD_INT 112
13554: EQUAL
13555: IFFALSE 13565
// sStu := true ;
13557: LD_ADDR_EXP 105
13561: PUSH
13562: LD_INT 1
13564: ST_TO_ADDR
// if p3 = 113 then
13565: LD_VAR 0 3
13569: PUSH
13570: LD_INT 113
13572: EQUAL
13573: IFFALSE 13583
// sBazooka := true ;
13575: LD_ADDR_EXP 108
13579: PUSH
13580: LD_INT 1
13582: ST_TO_ADDR
// if p3 = 114 then
13583: LD_VAR 0 3
13587: PUSH
13588: LD_INT 114
13590: EQUAL
13591: IFFALSE 13601
// sMortar := true ;
13593: LD_ADDR_EXP 109
13597: PUSH
13598: LD_INT 1
13600: ST_TO_ADDR
// if p3 = 115 then
13601: LD_VAR 0 3
13605: PUSH
13606: LD_INT 115
13608: EQUAL
13609: IFFALSE 13619
// sRanger := true ;
13611: LD_ADDR_EXP 119
13615: PUSH
13616: LD_INT 1
13618: ST_TO_ADDR
// end ; end ;
13619: PPOPN 6
13621: END
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
13622: LD_EXP 66
13626: PUSH
13627: LD_EXP 71
13631: AND
13632: IFFALSE 13756
13634: GO 13636
13636: DISABLE
13637: LD_INT 0
13639: PPUSH
13640: PPUSH
// begin enable ;
13641: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
13642: LD_ADDR_VAR 0 2
13646: PUSH
13647: LD_INT 22
13649: PUSH
13650: LD_OWVAR 2
13654: PUSH
13655: EMPTY
13656: LIST
13657: LIST
13658: PUSH
13659: LD_INT 2
13661: PUSH
13662: LD_INT 34
13664: PUSH
13665: LD_INT 7
13667: PUSH
13668: EMPTY
13669: LIST
13670: LIST
13671: PUSH
13672: LD_INT 34
13674: PUSH
13675: LD_INT 45
13677: PUSH
13678: EMPTY
13679: LIST
13680: LIST
13681: PUSH
13682: LD_INT 34
13684: PUSH
13685: LD_INT 28
13687: PUSH
13688: EMPTY
13689: LIST
13690: LIST
13691: PUSH
13692: LD_INT 34
13694: PUSH
13695: LD_INT 47
13697: PUSH
13698: EMPTY
13699: LIST
13700: LIST
13701: PUSH
13702: EMPTY
13703: LIST
13704: LIST
13705: LIST
13706: LIST
13707: LIST
13708: PUSH
13709: EMPTY
13710: LIST
13711: LIST
13712: PPUSH
13713: CALL_OW 69
13717: ST_TO_ADDR
// if not tmp then
13718: LD_VAR 0 2
13722: NOT
13723: IFFALSE 13727
// exit ;
13725: GO 13756
// for i in tmp do
13727: LD_ADDR_VAR 0 1
13731: PUSH
13732: LD_VAR 0 2
13736: PUSH
13737: FOR_IN
13738: IFFALSE 13754
// begin SetLives ( i , 0 ) ;
13740: LD_VAR 0 1
13744: PPUSH
13745: LD_INT 0
13747: PPUSH
13748: CALL_OW 234
// end ;
13752: GO 13737
13754: POP
13755: POP
// end ;
13756: PPOPN 2
13758: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
13759: LD_EXP 66
13763: PUSH
13764: LD_EXP 72
13768: AND
13769: IFFALSE 13853
13771: GO 13773
13773: DISABLE
13774: LD_INT 0
13776: PPUSH
13777: PPUSH
// begin enable ;
13778: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
13779: LD_ADDR_VAR 0 2
13783: PUSH
13784: LD_INT 22
13786: PUSH
13787: LD_OWVAR 2
13791: PUSH
13792: EMPTY
13793: LIST
13794: LIST
13795: PUSH
13796: LD_INT 32
13798: PUSH
13799: LD_INT 3
13801: PUSH
13802: EMPTY
13803: LIST
13804: LIST
13805: PUSH
13806: EMPTY
13807: LIST
13808: LIST
13809: PPUSH
13810: CALL_OW 69
13814: ST_TO_ADDR
// if not tmp then
13815: LD_VAR 0 2
13819: NOT
13820: IFFALSE 13824
// exit ;
13822: GO 13853
// for i in tmp do
13824: LD_ADDR_VAR 0 1
13828: PUSH
13829: LD_VAR 0 2
13833: PUSH
13834: FOR_IN
13835: IFFALSE 13851
// begin SetLives ( i , 0 ) ;
13837: LD_VAR 0 1
13841: PPUSH
13842: LD_INT 0
13844: PPUSH
13845: CALL_OW 234
// end ;
13849: GO 13834
13851: POP
13852: POP
// end ;
13853: PPOPN 2
13855: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
13856: LD_EXP 66
13860: PUSH
13861: LD_EXP 69
13865: AND
13866: IFFALSE 13959
13868: GO 13870
13870: DISABLE
13871: LD_INT 0
13873: PPUSH
// begin enable ;
13874: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
13875: LD_ADDR_VAR 0 1
13879: PUSH
13880: LD_INT 22
13882: PUSH
13883: LD_OWVAR 2
13887: PUSH
13888: EMPTY
13889: LIST
13890: LIST
13891: PUSH
13892: LD_INT 2
13894: PUSH
13895: LD_INT 25
13897: PUSH
13898: LD_INT 5
13900: PUSH
13901: EMPTY
13902: LIST
13903: LIST
13904: PUSH
13905: LD_INT 25
13907: PUSH
13908: LD_INT 9
13910: PUSH
13911: EMPTY
13912: LIST
13913: LIST
13914: PUSH
13915: LD_INT 25
13917: PUSH
13918: LD_INT 8
13920: PUSH
13921: EMPTY
13922: LIST
13923: LIST
13924: PUSH
13925: EMPTY
13926: LIST
13927: LIST
13928: LIST
13929: LIST
13930: PUSH
13931: EMPTY
13932: LIST
13933: LIST
13934: PPUSH
13935: CALL_OW 69
13939: PUSH
13940: FOR_IN
13941: IFFALSE 13957
// begin SetClass ( i , 1 ) ;
13943: LD_VAR 0 1
13947: PPUSH
13948: LD_INT 1
13950: PPUSH
13951: CALL_OW 336
// end ;
13955: GO 13940
13957: POP
13958: POP
// end ;
13959: PPOPN 1
13961: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
13962: LD_EXP 66
13966: PUSH
13967: LD_EXP 70
13971: AND
13972: PUSH
13973: LD_OWVAR 65
13977: PUSH
13978: LD_INT 7
13980: LESS
13981: AND
13982: IFFALSE 13996
13984: GO 13986
13986: DISABLE
// begin enable ;
13987: ENABLE
// game_speed := 7 ;
13988: LD_ADDR_OWVAR 65
13992: PUSH
13993: LD_INT 7
13995: ST_TO_ADDR
// end ;
13996: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
13997: LD_EXP 66
14001: PUSH
14002: LD_EXP 73
14006: AND
14007: IFFALSE 14209
14009: GO 14011
14011: DISABLE
14012: LD_INT 0
14014: PPUSH
14015: PPUSH
14016: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
14017: LD_ADDR_VAR 0 3
14021: PUSH
14022: LD_INT 81
14024: PUSH
14025: LD_OWVAR 2
14029: PUSH
14030: EMPTY
14031: LIST
14032: LIST
14033: PUSH
14034: LD_INT 21
14036: PUSH
14037: LD_INT 1
14039: PUSH
14040: EMPTY
14041: LIST
14042: LIST
14043: PUSH
14044: EMPTY
14045: LIST
14046: LIST
14047: PPUSH
14048: CALL_OW 69
14052: ST_TO_ADDR
// if not tmp then
14053: LD_VAR 0 3
14057: NOT
14058: IFFALSE 14062
// exit ;
14060: GO 14209
// if tmp > 5 then
14062: LD_VAR 0 3
14066: PUSH
14067: LD_INT 5
14069: GREATER
14070: IFFALSE 14082
// k := 5 else
14072: LD_ADDR_VAR 0 2
14076: PUSH
14077: LD_INT 5
14079: ST_TO_ADDR
14080: GO 14092
// k := tmp ;
14082: LD_ADDR_VAR 0 2
14086: PUSH
14087: LD_VAR 0 3
14091: ST_TO_ADDR
// for i := 1 to k do
14092: LD_ADDR_VAR 0 1
14096: PUSH
14097: DOUBLE
14098: LD_INT 1
14100: DEC
14101: ST_TO_ADDR
14102: LD_VAR 0 2
14106: PUSH
14107: FOR_TO
14108: IFFALSE 14207
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
14110: LD_VAR 0 3
14114: PUSH
14115: LD_VAR 0 1
14119: ARRAY
14120: PPUSH
14121: LD_VAR 0 1
14125: PUSH
14126: LD_INT 4
14128: MOD
14129: PUSH
14130: LD_INT 1
14132: PLUS
14133: PPUSH
14134: CALL_OW 259
14138: PUSH
14139: LD_INT 10
14141: LESS
14142: IFFALSE 14205
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
14144: LD_VAR 0 3
14148: PUSH
14149: LD_VAR 0 1
14153: ARRAY
14154: PPUSH
14155: LD_VAR 0 1
14159: PUSH
14160: LD_INT 4
14162: MOD
14163: PUSH
14164: LD_INT 1
14166: PLUS
14167: PPUSH
14168: LD_VAR 0 3
14172: PUSH
14173: LD_VAR 0 1
14177: ARRAY
14178: PPUSH
14179: LD_VAR 0 1
14183: PUSH
14184: LD_INT 4
14186: MOD
14187: PUSH
14188: LD_INT 1
14190: PLUS
14191: PPUSH
14192: CALL_OW 259
14196: PUSH
14197: LD_INT 1
14199: PLUS
14200: PPUSH
14201: CALL_OW 237
14205: GO 14107
14207: POP
14208: POP
// end ;
14209: PPOPN 3
14211: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
14212: LD_EXP 66
14216: PUSH
14217: LD_EXP 74
14221: AND
14222: IFFALSE 14242
14224: GO 14226
14226: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
14227: LD_INT 4
14229: PPUSH
14230: LD_OWVAR 2
14234: PPUSH
14235: LD_INT 0
14237: PPUSH
14238: CALL_OW 324
14242: END
// every 0 0$1 trigger StreamModeActive and sShovel do
14243: LD_EXP 66
14247: PUSH
14248: LD_EXP 103
14252: AND
14253: IFFALSE 14273
14255: GO 14257
14257: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
14258: LD_INT 19
14260: PPUSH
14261: LD_OWVAR 2
14265: PPUSH
14266: LD_INT 0
14268: PPUSH
14269: CALL_OW 324
14273: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
14274: LD_EXP 66
14278: PUSH
14279: LD_EXP 75
14283: AND
14284: IFFALSE 14386
14286: GO 14288
14288: DISABLE
14289: LD_INT 0
14291: PPUSH
14292: PPUSH
// begin enable ;
14293: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
14294: LD_ADDR_VAR 0 2
14298: PUSH
14299: LD_INT 22
14301: PUSH
14302: LD_OWVAR 2
14306: PUSH
14307: EMPTY
14308: LIST
14309: LIST
14310: PUSH
14311: LD_INT 2
14313: PUSH
14314: LD_INT 34
14316: PUSH
14317: LD_INT 11
14319: PUSH
14320: EMPTY
14321: LIST
14322: LIST
14323: PUSH
14324: LD_INT 34
14326: PUSH
14327: LD_INT 30
14329: PUSH
14330: EMPTY
14331: LIST
14332: LIST
14333: PUSH
14334: EMPTY
14335: LIST
14336: LIST
14337: LIST
14338: PUSH
14339: EMPTY
14340: LIST
14341: LIST
14342: PPUSH
14343: CALL_OW 69
14347: ST_TO_ADDR
// if not tmp then
14348: LD_VAR 0 2
14352: NOT
14353: IFFALSE 14357
// exit ;
14355: GO 14386
// for i in tmp do
14357: LD_ADDR_VAR 0 1
14361: PUSH
14362: LD_VAR 0 2
14366: PUSH
14367: FOR_IN
14368: IFFALSE 14384
// begin SetLives ( i , 0 ) ;
14370: LD_VAR 0 1
14374: PPUSH
14375: LD_INT 0
14377: PPUSH
14378: CALL_OW 234
// end ;
14382: GO 14367
14384: POP
14385: POP
// end ;
14386: PPOPN 2
14388: END
// every 0 0$1 trigger StreamModeActive and sBunker do
14389: LD_EXP 66
14393: PUSH
14394: LD_EXP 76
14398: AND
14399: IFFALSE 14419
14401: GO 14403
14403: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
14404: LD_INT 32
14406: PPUSH
14407: LD_OWVAR 2
14411: PPUSH
14412: LD_INT 0
14414: PPUSH
14415: CALL_OW 324
14419: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
14420: LD_EXP 66
14424: PUSH
14425: LD_EXP 77
14429: AND
14430: IFFALSE 14611
14432: GO 14434
14434: DISABLE
14435: LD_INT 0
14437: PPUSH
14438: PPUSH
14439: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
14440: LD_ADDR_VAR 0 2
14444: PUSH
14445: LD_INT 22
14447: PUSH
14448: LD_OWVAR 2
14452: PUSH
14453: EMPTY
14454: LIST
14455: LIST
14456: PUSH
14457: LD_INT 33
14459: PUSH
14460: LD_INT 3
14462: PUSH
14463: EMPTY
14464: LIST
14465: LIST
14466: PUSH
14467: EMPTY
14468: LIST
14469: LIST
14470: PPUSH
14471: CALL_OW 69
14475: ST_TO_ADDR
// if not tmp then
14476: LD_VAR 0 2
14480: NOT
14481: IFFALSE 14485
// exit ;
14483: GO 14611
// side := 0 ;
14485: LD_ADDR_VAR 0 3
14489: PUSH
14490: LD_INT 0
14492: ST_TO_ADDR
// for i := 1 to 8 do
14493: LD_ADDR_VAR 0 1
14497: PUSH
14498: DOUBLE
14499: LD_INT 1
14501: DEC
14502: ST_TO_ADDR
14503: LD_INT 8
14505: PUSH
14506: FOR_TO
14507: IFFALSE 14555
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
14509: LD_OWVAR 2
14513: PUSH
14514: LD_VAR 0 1
14518: NONEQUAL
14519: PUSH
14520: LD_OWVAR 2
14524: PPUSH
14525: LD_VAR 0 1
14529: PPUSH
14530: CALL_OW 81
14534: PUSH
14535: LD_INT 2
14537: EQUAL
14538: AND
14539: IFFALSE 14553
// begin side := i ;
14541: LD_ADDR_VAR 0 3
14545: PUSH
14546: LD_VAR 0 1
14550: ST_TO_ADDR
// break ;
14551: GO 14555
// end ;
14553: GO 14506
14555: POP
14556: POP
// if not side then
14557: LD_VAR 0 3
14561: NOT
14562: IFFALSE 14566
// exit ;
14564: GO 14611
// for i := 1 to tmp do
14566: LD_ADDR_VAR 0 1
14570: PUSH
14571: DOUBLE
14572: LD_INT 1
14574: DEC
14575: ST_TO_ADDR
14576: LD_VAR 0 2
14580: PUSH
14581: FOR_TO
14582: IFFALSE 14609
// if Prob ( 60 ) then
14584: LD_INT 60
14586: PPUSH
14587: CALL_OW 13
14591: IFFALSE 14607
// SetSide ( i , side ) ;
14593: LD_VAR 0 1
14597: PPUSH
14598: LD_VAR 0 3
14602: PPUSH
14603: CALL_OW 235
14607: GO 14581
14609: POP
14610: POP
// end ;
14611: PPOPN 3
14613: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
14614: LD_EXP 66
14618: PUSH
14619: LD_EXP 79
14623: AND
14624: IFFALSE 14743
14626: GO 14628
14628: DISABLE
14629: LD_INT 0
14631: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
14632: LD_ADDR_VAR 0 1
14636: PUSH
14637: LD_INT 22
14639: PUSH
14640: LD_OWVAR 2
14644: PUSH
14645: EMPTY
14646: LIST
14647: LIST
14648: PUSH
14649: LD_INT 21
14651: PUSH
14652: LD_INT 1
14654: PUSH
14655: EMPTY
14656: LIST
14657: LIST
14658: PUSH
14659: LD_INT 3
14661: PUSH
14662: LD_INT 23
14664: PUSH
14665: LD_INT 0
14667: PUSH
14668: EMPTY
14669: LIST
14670: LIST
14671: PUSH
14672: EMPTY
14673: LIST
14674: LIST
14675: PUSH
14676: EMPTY
14677: LIST
14678: LIST
14679: LIST
14680: PPUSH
14681: CALL_OW 69
14685: PUSH
14686: FOR_IN
14687: IFFALSE 14741
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
14689: LD_VAR 0 1
14693: PPUSH
14694: CALL_OW 257
14698: PUSH
14699: LD_INT 1
14701: PUSH
14702: LD_INT 2
14704: PUSH
14705: LD_INT 3
14707: PUSH
14708: LD_INT 4
14710: PUSH
14711: EMPTY
14712: LIST
14713: LIST
14714: LIST
14715: LIST
14716: IN
14717: IFFALSE 14739
// SetClass ( un , rand ( 1 , 4 ) ) ;
14719: LD_VAR 0 1
14723: PPUSH
14724: LD_INT 1
14726: PPUSH
14727: LD_INT 4
14729: PPUSH
14730: CALL_OW 12
14734: PPUSH
14735: CALL_OW 336
14739: GO 14686
14741: POP
14742: POP
// end ;
14743: PPOPN 1
14745: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
14746: LD_EXP 66
14750: PUSH
14751: LD_EXP 78
14755: AND
14756: IFFALSE 14835
14758: GO 14760
14760: DISABLE
14761: LD_INT 0
14763: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
14764: LD_ADDR_VAR 0 1
14768: PUSH
14769: LD_INT 22
14771: PUSH
14772: LD_OWVAR 2
14776: PUSH
14777: EMPTY
14778: LIST
14779: LIST
14780: PUSH
14781: LD_INT 21
14783: PUSH
14784: LD_INT 3
14786: PUSH
14787: EMPTY
14788: LIST
14789: LIST
14790: PUSH
14791: EMPTY
14792: LIST
14793: LIST
14794: PPUSH
14795: CALL_OW 69
14799: ST_TO_ADDR
// if not tmp then
14800: LD_VAR 0 1
14804: NOT
14805: IFFALSE 14809
// exit ;
14807: GO 14835
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
14809: LD_VAR 0 1
14813: PUSH
14814: LD_INT 1
14816: PPUSH
14817: LD_VAR 0 1
14821: PPUSH
14822: CALL_OW 12
14826: ARRAY
14827: PPUSH
14828: LD_INT 100
14830: PPUSH
14831: CALL_OW 234
// end ;
14835: PPOPN 1
14837: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
14838: LD_EXP 66
14842: PUSH
14843: LD_EXP 80
14847: AND
14848: IFFALSE 14946
14850: GO 14852
14852: DISABLE
14853: LD_INT 0
14855: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14856: LD_ADDR_VAR 0 1
14860: PUSH
14861: LD_INT 22
14863: PUSH
14864: LD_OWVAR 2
14868: PUSH
14869: EMPTY
14870: LIST
14871: LIST
14872: PUSH
14873: LD_INT 21
14875: PUSH
14876: LD_INT 1
14878: PUSH
14879: EMPTY
14880: LIST
14881: LIST
14882: PUSH
14883: EMPTY
14884: LIST
14885: LIST
14886: PPUSH
14887: CALL_OW 69
14891: ST_TO_ADDR
// if not tmp then
14892: LD_VAR 0 1
14896: NOT
14897: IFFALSE 14901
// exit ;
14899: GO 14946
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
14901: LD_VAR 0 1
14905: PUSH
14906: LD_INT 1
14908: PPUSH
14909: LD_VAR 0 1
14913: PPUSH
14914: CALL_OW 12
14918: ARRAY
14919: PPUSH
14920: LD_INT 1
14922: PPUSH
14923: LD_INT 4
14925: PPUSH
14926: CALL_OW 12
14930: PPUSH
14931: LD_INT 3000
14933: PPUSH
14934: LD_INT 9000
14936: PPUSH
14937: CALL_OW 12
14941: PPUSH
14942: CALL_OW 492
// end ;
14946: PPOPN 1
14948: END
// every 0 0$1 trigger StreamModeActive and sDepot do
14949: LD_EXP 66
14953: PUSH
14954: LD_EXP 81
14958: AND
14959: IFFALSE 14979
14961: GO 14963
14963: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
14964: LD_INT 1
14966: PPUSH
14967: LD_OWVAR 2
14971: PPUSH
14972: LD_INT 0
14974: PPUSH
14975: CALL_OW 324
14979: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
14980: LD_EXP 66
14984: PUSH
14985: LD_EXP 82
14989: AND
14990: IFFALSE 15073
14992: GO 14994
14994: DISABLE
14995: LD_INT 0
14997: PPUSH
14998: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
14999: LD_ADDR_VAR 0 2
15003: PUSH
15004: LD_INT 22
15006: PUSH
15007: LD_OWVAR 2
15011: PUSH
15012: EMPTY
15013: LIST
15014: LIST
15015: PUSH
15016: LD_INT 21
15018: PUSH
15019: LD_INT 3
15021: PUSH
15022: EMPTY
15023: LIST
15024: LIST
15025: PUSH
15026: EMPTY
15027: LIST
15028: LIST
15029: PPUSH
15030: CALL_OW 69
15034: ST_TO_ADDR
// if not tmp then
15035: LD_VAR 0 2
15039: NOT
15040: IFFALSE 15044
// exit ;
15042: GO 15073
// for i in tmp do
15044: LD_ADDR_VAR 0 1
15048: PUSH
15049: LD_VAR 0 2
15053: PUSH
15054: FOR_IN
15055: IFFALSE 15071
// SetBLevel ( i , 10 ) ;
15057: LD_VAR 0 1
15061: PPUSH
15062: LD_INT 10
15064: PPUSH
15065: CALL_OW 241
15069: GO 15054
15071: POP
15072: POP
// end ;
15073: PPOPN 2
15075: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
15076: LD_EXP 66
15080: PUSH
15081: LD_EXP 83
15085: AND
15086: IFFALSE 15197
15088: GO 15090
15090: DISABLE
15091: LD_INT 0
15093: PPUSH
15094: PPUSH
15095: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15096: LD_ADDR_VAR 0 3
15100: PUSH
15101: LD_INT 22
15103: PUSH
15104: LD_OWVAR 2
15108: PUSH
15109: EMPTY
15110: LIST
15111: LIST
15112: PUSH
15113: LD_INT 25
15115: PUSH
15116: LD_INT 1
15118: PUSH
15119: EMPTY
15120: LIST
15121: LIST
15122: PUSH
15123: EMPTY
15124: LIST
15125: LIST
15126: PPUSH
15127: CALL_OW 69
15131: ST_TO_ADDR
// if not tmp then
15132: LD_VAR 0 3
15136: NOT
15137: IFFALSE 15141
// exit ;
15139: GO 15197
// un := tmp [ rand ( 1 , tmp ) ] ;
15141: LD_ADDR_VAR 0 2
15145: PUSH
15146: LD_VAR 0 3
15150: PUSH
15151: LD_INT 1
15153: PPUSH
15154: LD_VAR 0 3
15158: PPUSH
15159: CALL_OW 12
15163: ARRAY
15164: ST_TO_ADDR
// if Crawls ( un ) then
15165: LD_VAR 0 2
15169: PPUSH
15170: CALL_OW 318
15174: IFFALSE 15185
// ComWalk ( un ) ;
15176: LD_VAR 0 2
15180: PPUSH
15181: CALL_OW 138
// SetClass ( un , class_sniper ) ;
15185: LD_VAR 0 2
15189: PPUSH
15190: LD_INT 5
15192: PPUSH
15193: CALL_OW 336
// end ;
15197: PPOPN 3
15199: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
15200: LD_EXP 66
15204: PUSH
15205: LD_EXP 84
15209: AND
15210: PUSH
15211: LD_OWVAR 67
15215: PUSH
15216: LD_INT 3
15218: LESS
15219: AND
15220: IFFALSE 15239
15222: GO 15224
15224: DISABLE
// Difficulty := Difficulty + 1 ;
15225: LD_ADDR_OWVAR 67
15229: PUSH
15230: LD_OWVAR 67
15234: PUSH
15235: LD_INT 1
15237: PLUS
15238: ST_TO_ADDR
15239: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
15240: LD_EXP 66
15244: PUSH
15245: LD_EXP 85
15249: AND
15250: IFFALSE 15353
15252: GO 15254
15254: DISABLE
15255: LD_INT 0
15257: PPUSH
// begin for i := 1 to 5 do
15258: LD_ADDR_VAR 0 1
15262: PUSH
15263: DOUBLE
15264: LD_INT 1
15266: DEC
15267: ST_TO_ADDR
15268: LD_INT 5
15270: PUSH
15271: FOR_TO
15272: IFFALSE 15351
// begin uc_nation := nation_nature ;
15274: LD_ADDR_OWVAR 21
15278: PUSH
15279: LD_INT 0
15281: ST_TO_ADDR
// uc_side := 0 ;
15282: LD_ADDR_OWVAR 20
15286: PUSH
15287: LD_INT 0
15289: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
15290: LD_ADDR_OWVAR 29
15294: PUSH
15295: LD_INT 12
15297: PUSH
15298: LD_INT 12
15300: PUSH
15301: EMPTY
15302: LIST
15303: LIST
15304: ST_TO_ADDR
// hc_agressivity := 20 ;
15305: LD_ADDR_OWVAR 35
15309: PUSH
15310: LD_INT 20
15312: ST_TO_ADDR
// hc_class := class_tiger ;
15313: LD_ADDR_OWVAR 28
15317: PUSH
15318: LD_INT 14
15320: ST_TO_ADDR
// hc_gallery :=  ;
15321: LD_ADDR_OWVAR 33
15325: PUSH
15326: LD_STRING 
15328: ST_TO_ADDR
// hc_name :=  ;
15329: LD_ADDR_OWVAR 26
15333: PUSH
15334: LD_STRING 
15336: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
15337: CALL_OW 44
15341: PPUSH
15342: LD_INT 0
15344: PPUSH
15345: CALL_OW 51
// end ;
15349: GO 15271
15351: POP
15352: POP
// end ;
15353: PPOPN 1
15355: END
// every 0 0$1 trigger StreamModeActive and sBomb do
15356: LD_EXP 66
15360: PUSH
15361: LD_EXP 86
15365: AND
15366: IFFALSE 15375
15368: GO 15370
15370: DISABLE
// StreamSibBomb ;
15371: CALL 15376 0 0
15375: END
// export function StreamSibBomb ; var i , x , y ; begin
15376: LD_INT 0
15378: PPUSH
15379: PPUSH
15380: PPUSH
15381: PPUSH
// result := false ;
15382: LD_ADDR_VAR 0 1
15386: PUSH
15387: LD_INT 0
15389: ST_TO_ADDR
// for i := 1 to 16 do
15390: LD_ADDR_VAR 0 2
15394: PUSH
15395: DOUBLE
15396: LD_INT 1
15398: DEC
15399: ST_TO_ADDR
15400: LD_INT 16
15402: PUSH
15403: FOR_TO
15404: IFFALSE 15603
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
15406: LD_ADDR_VAR 0 3
15410: PUSH
15411: LD_INT 10
15413: PUSH
15414: LD_INT 20
15416: PUSH
15417: LD_INT 30
15419: PUSH
15420: LD_INT 40
15422: PUSH
15423: LD_INT 50
15425: PUSH
15426: LD_INT 60
15428: PUSH
15429: LD_INT 70
15431: PUSH
15432: LD_INT 80
15434: PUSH
15435: LD_INT 90
15437: PUSH
15438: LD_INT 100
15440: PUSH
15441: LD_INT 110
15443: PUSH
15444: LD_INT 120
15446: PUSH
15447: LD_INT 130
15449: PUSH
15450: LD_INT 140
15452: PUSH
15453: LD_INT 150
15455: PUSH
15456: EMPTY
15457: LIST
15458: LIST
15459: LIST
15460: LIST
15461: LIST
15462: LIST
15463: LIST
15464: LIST
15465: LIST
15466: LIST
15467: LIST
15468: LIST
15469: LIST
15470: LIST
15471: LIST
15472: PUSH
15473: LD_INT 1
15475: PPUSH
15476: LD_INT 15
15478: PPUSH
15479: CALL_OW 12
15483: ARRAY
15484: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
15485: LD_ADDR_VAR 0 4
15489: PUSH
15490: LD_INT 10
15492: PUSH
15493: LD_INT 20
15495: PUSH
15496: LD_INT 30
15498: PUSH
15499: LD_INT 40
15501: PUSH
15502: LD_INT 50
15504: PUSH
15505: LD_INT 60
15507: PUSH
15508: LD_INT 70
15510: PUSH
15511: LD_INT 80
15513: PUSH
15514: LD_INT 90
15516: PUSH
15517: LD_INT 100
15519: PUSH
15520: LD_INT 110
15522: PUSH
15523: LD_INT 120
15525: PUSH
15526: LD_INT 130
15528: PUSH
15529: LD_INT 140
15531: PUSH
15532: LD_INT 150
15534: PUSH
15535: EMPTY
15536: LIST
15537: LIST
15538: LIST
15539: LIST
15540: LIST
15541: LIST
15542: LIST
15543: LIST
15544: LIST
15545: LIST
15546: LIST
15547: LIST
15548: LIST
15549: LIST
15550: LIST
15551: PUSH
15552: LD_INT 1
15554: PPUSH
15555: LD_INT 15
15557: PPUSH
15558: CALL_OW 12
15562: ARRAY
15563: ST_TO_ADDR
// if ValidHex ( x , y ) then
15564: LD_VAR 0 3
15568: PPUSH
15569: LD_VAR 0 4
15573: PPUSH
15574: CALL_OW 488
15578: IFFALSE 15601
// begin result := [ x , y ] ;
15580: LD_ADDR_VAR 0 1
15584: PUSH
15585: LD_VAR 0 3
15589: PUSH
15590: LD_VAR 0 4
15594: PUSH
15595: EMPTY
15596: LIST
15597: LIST
15598: ST_TO_ADDR
// break ;
15599: GO 15603
// end ; end ;
15601: GO 15403
15603: POP
15604: POP
// if result then
15605: LD_VAR 0 1
15609: IFFALSE 15669
// begin ToLua ( playSibBomb() ) ;
15611: LD_STRING playSibBomb()
15613: PPUSH
15614: CALL_OW 559
// wait ( 0 0$14 ) ;
15618: LD_INT 490
15620: PPUSH
15621: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
15625: LD_VAR 0 1
15629: PUSH
15630: LD_INT 1
15632: ARRAY
15633: PPUSH
15634: LD_VAR 0 1
15638: PUSH
15639: LD_INT 2
15641: ARRAY
15642: PPUSH
15643: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
15647: LD_VAR 0 1
15651: PUSH
15652: LD_INT 1
15654: ARRAY
15655: PPUSH
15656: LD_VAR 0 1
15660: PUSH
15661: LD_INT 2
15663: ARRAY
15664: PPUSH
15665: CALL_OW 429
// end ; end ;
15669: LD_VAR 0 1
15673: RET
// every 0 0$1 trigger StreamModeActive and sReset do
15674: LD_EXP 66
15678: PUSH
15679: LD_EXP 88
15683: AND
15684: IFFALSE 15696
15686: GO 15688
15688: DISABLE
// YouLost (  ) ;
15689: LD_STRING 
15691: PPUSH
15692: CALL_OW 104
15696: END
// every 0 0$1 trigger StreamModeActive and sFog do
15697: LD_EXP 66
15701: PUSH
15702: LD_EXP 87
15706: AND
15707: IFFALSE 15721
15709: GO 15711
15711: DISABLE
// FogOff ( your_side ) ;
15712: LD_OWVAR 2
15716: PPUSH
15717: CALL_OW 344
15721: END
// every 0 0$1 trigger StreamModeActive and sSun do
15722: LD_EXP 66
15726: PUSH
15727: LD_EXP 89
15731: AND
15732: IFFALSE 15760
15734: GO 15736
15736: DISABLE
// begin solar_recharge_percent := 0 ;
15737: LD_ADDR_OWVAR 79
15741: PUSH
15742: LD_INT 0
15744: ST_TO_ADDR
// wait ( 5 5$00 ) ;
15745: LD_INT 10500
15747: PPUSH
15748: CALL_OW 67
// solar_recharge_percent := 100 ;
15752: LD_ADDR_OWVAR 79
15756: PUSH
15757: LD_INT 100
15759: ST_TO_ADDR
// end ;
15760: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
15761: LD_EXP 66
15765: PUSH
15766: LD_EXP 90
15770: AND
15771: IFFALSE 16010
15773: GO 15775
15775: DISABLE
15776: LD_INT 0
15778: PPUSH
15779: PPUSH
15780: PPUSH
// begin tmp := [ ] ;
15781: LD_ADDR_VAR 0 3
15785: PUSH
15786: EMPTY
15787: ST_TO_ADDR
// for i := 1 to 6 do
15788: LD_ADDR_VAR 0 1
15792: PUSH
15793: DOUBLE
15794: LD_INT 1
15796: DEC
15797: ST_TO_ADDR
15798: LD_INT 6
15800: PUSH
15801: FOR_TO
15802: IFFALSE 15907
// begin uc_nation := nation_nature ;
15804: LD_ADDR_OWVAR 21
15808: PUSH
15809: LD_INT 0
15811: ST_TO_ADDR
// uc_side := 0 ;
15812: LD_ADDR_OWVAR 20
15816: PUSH
15817: LD_INT 0
15819: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
15820: LD_ADDR_OWVAR 29
15824: PUSH
15825: LD_INT 12
15827: PUSH
15828: LD_INT 12
15830: PUSH
15831: EMPTY
15832: LIST
15833: LIST
15834: ST_TO_ADDR
// hc_agressivity := 20 ;
15835: LD_ADDR_OWVAR 35
15839: PUSH
15840: LD_INT 20
15842: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
15843: LD_ADDR_OWVAR 28
15847: PUSH
15848: LD_INT 17
15850: ST_TO_ADDR
// hc_gallery :=  ;
15851: LD_ADDR_OWVAR 33
15855: PUSH
15856: LD_STRING 
15858: ST_TO_ADDR
// hc_name :=  ;
15859: LD_ADDR_OWVAR 26
15863: PUSH
15864: LD_STRING 
15866: ST_TO_ADDR
// un := CreateHuman ;
15867: LD_ADDR_VAR 0 2
15871: PUSH
15872: CALL_OW 44
15876: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
15877: LD_VAR 0 2
15881: PPUSH
15882: LD_INT 1
15884: PPUSH
15885: CALL_OW 51
// tmp := tmp ^ un ;
15889: LD_ADDR_VAR 0 3
15893: PUSH
15894: LD_VAR 0 3
15898: PUSH
15899: LD_VAR 0 2
15903: ADD
15904: ST_TO_ADDR
// end ;
15905: GO 15801
15907: POP
15908: POP
// repeat wait ( 0 0$1 ) ;
15909: LD_INT 35
15911: PPUSH
15912: CALL_OW 67
// for un in tmp do
15916: LD_ADDR_VAR 0 2
15920: PUSH
15921: LD_VAR 0 3
15925: PUSH
15926: FOR_IN
15927: IFFALSE 16001
// begin if IsDead ( un ) then
15929: LD_VAR 0 2
15933: PPUSH
15934: CALL_OW 301
15938: IFFALSE 15958
// begin tmp := tmp diff un ;
15940: LD_ADDR_VAR 0 3
15944: PUSH
15945: LD_VAR 0 3
15949: PUSH
15950: LD_VAR 0 2
15954: DIFF
15955: ST_TO_ADDR
// continue ;
15956: GO 15926
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
15958: LD_VAR 0 2
15962: PPUSH
15963: LD_INT 3
15965: PUSH
15966: LD_INT 22
15968: PUSH
15969: LD_INT 0
15971: PUSH
15972: EMPTY
15973: LIST
15974: LIST
15975: PUSH
15976: EMPTY
15977: LIST
15978: LIST
15979: PPUSH
15980: CALL_OW 69
15984: PPUSH
15985: LD_VAR 0 2
15989: PPUSH
15990: CALL_OW 74
15994: PPUSH
15995: CALL_OW 115
// end ;
15999: GO 15926
16001: POP
16002: POP
// until not tmp ;
16003: LD_VAR 0 3
16007: NOT
16008: IFFALSE 15909
// end ;
16010: PPOPN 3
16012: END
// every 0 0$1 trigger StreamModeActive and sTroll do
16013: LD_EXP 66
16017: PUSH
16018: LD_EXP 91
16022: AND
16023: IFFALSE 16077
16025: GO 16027
16027: DISABLE
// begin ToLua ( displayTroll(); ) ;
16028: LD_STRING displayTroll();
16030: PPUSH
16031: CALL_OW 559
// wait ( 3 3$00 ) ;
16035: LD_INT 6300
16037: PPUSH
16038: CALL_OW 67
// ToLua ( hideTroll(); ) ;
16042: LD_STRING hideTroll();
16044: PPUSH
16045: CALL_OW 559
// wait ( 1 1$00 ) ;
16049: LD_INT 2100
16051: PPUSH
16052: CALL_OW 67
// ToLua ( displayTroll(); ) ;
16056: LD_STRING displayTroll();
16058: PPUSH
16059: CALL_OW 559
// wait ( 1 1$00 ) ;
16063: LD_INT 2100
16065: PPUSH
16066: CALL_OW 67
// ToLua ( hideTroll(); ) ;
16070: LD_STRING hideTroll();
16072: PPUSH
16073: CALL_OW 559
// end ;
16077: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
16078: LD_EXP 66
16082: PUSH
16083: LD_EXP 92
16087: AND
16088: IFFALSE 16151
16090: GO 16092
16092: DISABLE
16093: LD_INT 0
16095: PPUSH
// begin p := 0 ;
16096: LD_ADDR_VAR 0 1
16100: PUSH
16101: LD_INT 0
16103: ST_TO_ADDR
// repeat game_speed := 1 ;
16104: LD_ADDR_OWVAR 65
16108: PUSH
16109: LD_INT 1
16111: ST_TO_ADDR
// wait ( 0 0$1 ) ;
16112: LD_INT 35
16114: PPUSH
16115: CALL_OW 67
// p := p + 1 ;
16119: LD_ADDR_VAR 0 1
16123: PUSH
16124: LD_VAR 0 1
16128: PUSH
16129: LD_INT 1
16131: PLUS
16132: ST_TO_ADDR
// until p >= 60 ;
16133: LD_VAR 0 1
16137: PUSH
16138: LD_INT 60
16140: GREATEREQUAL
16141: IFFALSE 16104
// game_speed := 4 ;
16143: LD_ADDR_OWVAR 65
16147: PUSH
16148: LD_INT 4
16150: ST_TO_ADDR
// end ;
16151: PPOPN 1
16153: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
16154: LD_EXP 66
16158: PUSH
16159: LD_EXP 93
16163: AND
16164: IFFALSE 16310
16166: GO 16168
16168: DISABLE
16169: LD_INT 0
16171: PPUSH
16172: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16173: LD_ADDR_VAR 0 1
16177: PUSH
16178: LD_INT 22
16180: PUSH
16181: LD_OWVAR 2
16185: PUSH
16186: EMPTY
16187: LIST
16188: LIST
16189: PUSH
16190: LD_INT 2
16192: PUSH
16193: LD_INT 30
16195: PUSH
16196: LD_INT 0
16198: PUSH
16199: EMPTY
16200: LIST
16201: LIST
16202: PUSH
16203: LD_INT 30
16205: PUSH
16206: LD_INT 1
16208: PUSH
16209: EMPTY
16210: LIST
16211: LIST
16212: PUSH
16213: EMPTY
16214: LIST
16215: LIST
16216: LIST
16217: PUSH
16218: EMPTY
16219: LIST
16220: LIST
16221: PPUSH
16222: CALL_OW 69
16226: ST_TO_ADDR
// if not depot then
16227: LD_VAR 0 1
16231: NOT
16232: IFFALSE 16236
// exit ;
16234: GO 16310
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
16236: LD_ADDR_VAR 0 2
16240: PUSH
16241: LD_VAR 0 1
16245: PUSH
16246: LD_INT 1
16248: PPUSH
16249: LD_VAR 0 1
16253: PPUSH
16254: CALL_OW 12
16258: ARRAY
16259: PPUSH
16260: CALL_OW 274
16264: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
16265: LD_VAR 0 2
16269: PPUSH
16270: LD_INT 1
16272: PPUSH
16273: LD_INT 0
16275: PPUSH
16276: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
16280: LD_VAR 0 2
16284: PPUSH
16285: LD_INT 2
16287: PPUSH
16288: LD_INT 0
16290: PPUSH
16291: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
16295: LD_VAR 0 2
16299: PPUSH
16300: LD_INT 3
16302: PPUSH
16303: LD_INT 0
16305: PPUSH
16306: CALL_OW 277
// end ;
16310: PPOPN 2
16312: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
16313: LD_EXP 66
16317: PUSH
16318: LD_EXP 94
16322: AND
16323: IFFALSE 16420
16325: GO 16327
16327: DISABLE
16328: LD_INT 0
16330: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16331: LD_ADDR_VAR 0 1
16335: PUSH
16336: LD_INT 22
16338: PUSH
16339: LD_OWVAR 2
16343: PUSH
16344: EMPTY
16345: LIST
16346: LIST
16347: PUSH
16348: LD_INT 21
16350: PUSH
16351: LD_INT 1
16353: PUSH
16354: EMPTY
16355: LIST
16356: LIST
16357: PUSH
16358: LD_INT 3
16360: PUSH
16361: LD_INT 23
16363: PUSH
16364: LD_INT 0
16366: PUSH
16367: EMPTY
16368: LIST
16369: LIST
16370: PUSH
16371: EMPTY
16372: LIST
16373: LIST
16374: PUSH
16375: EMPTY
16376: LIST
16377: LIST
16378: LIST
16379: PPUSH
16380: CALL_OW 69
16384: ST_TO_ADDR
// if not tmp then
16385: LD_VAR 0 1
16389: NOT
16390: IFFALSE 16394
// exit ;
16392: GO 16420
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
16394: LD_VAR 0 1
16398: PUSH
16399: LD_INT 1
16401: PPUSH
16402: LD_VAR 0 1
16406: PPUSH
16407: CALL_OW 12
16411: ARRAY
16412: PPUSH
16413: LD_INT 200
16415: PPUSH
16416: CALL_OW 234
// end ;
16420: PPOPN 1
16422: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
16423: LD_EXP 66
16427: PUSH
16428: LD_EXP 95
16432: AND
16433: IFFALSE 16512
16435: GO 16437
16437: DISABLE
16438: LD_INT 0
16440: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
16441: LD_ADDR_VAR 0 1
16445: PUSH
16446: LD_INT 22
16448: PUSH
16449: LD_OWVAR 2
16453: PUSH
16454: EMPTY
16455: LIST
16456: LIST
16457: PUSH
16458: LD_INT 21
16460: PUSH
16461: LD_INT 2
16463: PUSH
16464: EMPTY
16465: LIST
16466: LIST
16467: PUSH
16468: EMPTY
16469: LIST
16470: LIST
16471: PPUSH
16472: CALL_OW 69
16476: ST_TO_ADDR
// if not tmp then
16477: LD_VAR 0 1
16481: NOT
16482: IFFALSE 16486
// exit ;
16484: GO 16512
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
16486: LD_VAR 0 1
16490: PUSH
16491: LD_INT 1
16493: PPUSH
16494: LD_VAR 0 1
16498: PPUSH
16499: CALL_OW 12
16503: ARRAY
16504: PPUSH
16505: LD_INT 60
16507: PPUSH
16508: CALL_OW 234
// end ;
16512: PPOPN 1
16514: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
16515: LD_EXP 66
16519: PUSH
16520: LD_EXP 96
16524: AND
16525: IFFALSE 16624
16527: GO 16529
16529: DISABLE
16530: LD_INT 0
16532: PPUSH
16533: PPUSH
// begin enable ;
16534: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
16535: LD_ADDR_VAR 0 1
16539: PUSH
16540: LD_INT 22
16542: PUSH
16543: LD_OWVAR 2
16547: PUSH
16548: EMPTY
16549: LIST
16550: LIST
16551: PUSH
16552: LD_INT 61
16554: PUSH
16555: EMPTY
16556: LIST
16557: PUSH
16558: LD_INT 33
16560: PUSH
16561: LD_INT 2
16563: PUSH
16564: EMPTY
16565: LIST
16566: LIST
16567: PUSH
16568: EMPTY
16569: LIST
16570: LIST
16571: LIST
16572: PPUSH
16573: CALL_OW 69
16577: ST_TO_ADDR
// if not tmp then
16578: LD_VAR 0 1
16582: NOT
16583: IFFALSE 16587
// exit ;
16585: GO 16624
// for i in tmp do
16587: LD_ADDR_VAR 0 2
16591: PUSH
16592: LD_VAR 0 1
16596: PUSH
16597: FOR_IN
16598: IFFALSE 16622
// if IsControledBy ( i ) then
16600: LD_VAR 0 2
16604: PPUSH
16605: CALL_OW 312
16609: IFFALSE 16620
// ComUnlink ( i ) ;
16611: LD_VAR 0 2
16615: PPUSH
16616: CALL_OW 136
16620: GO 16597
16622: POP
16623: POP
// end ;
16624: PPOPN 2
16626: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
16627: LD_EXP 66
16631: PUSH
16632: LD_EXP 97
16636: AND
16637: IFFALSE 16777
16639: GO 16641
16641: DISABLE
16642: LD_INT 0
16644: PPUSH
16645: PPUSH
// begin ToLua ( displayPowell(); ) ;
16646: LD_STRING displayPowell();
16648: PPUSH
16649: CALL_OW 559
// uc_side := 0 ;
16653: LD_ADDR_OWVAR 20
16657: PUSH
16658: LD_INT 0
16660: ST_TO_ADDR
// uc_nation := 2 ;
16661: LD_ADDR_OWVAR 21
16665: PUSH
16666: LD_INT 2
16668: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
16669: LD_ADDR_OWVAR 37
16673: PUSH
16674: LD_INT 14
16676: ST_TO_ADDR
// vc_engine := engine_siberite ;
16677: LD_ADDR_OWVAR 39
16681: PUSH
16682: LD_INT 3
16684: ST_TO_ADDR
// vc_control := control_apeman ;
16685: LD_ADDR_OWVAR 38
16689: PUSH
16690: LD_INT 5
16692: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
16693: LD_ADDR_OWVAR 40
16697: PUSH
16698: LD_INT 29
16700: ST_TO_ADDR
// un := CreateVehicle ;
16701: LD_ADDR_VAR 0 2
16705: PUSH
16706: CALL_OW 45
16710: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16711: LD_VAR 0 2
16715: PPUSH
16716: LD_INT 1
16718: PPUSH
16719: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
16723: LD_INT 35
16725: PPUSH
16726: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
16730: LD_VAR 0 2
16734: PPUSH
16735: LD_INT 22
16737: PUSH
16738: LD_OWVAR 2
16742: PUSH
16743: EMPTY
16744: LIST
16745: LIST
16746: PPUSH
16747: CALL_OW 69
16751: PPUSH
16752: LD_VAR 0 2
16756: PPUSH
16757: CALL_OW 74
16761: PPUSH
16762: CALL_OW 115
// until IsDead ( un ) ;
16766: LD_VAR 0 2
16770: PPUSH
16771: CALL_OW 301
16775: IFFALSE 16723
// end ;
16777: PPOPN 2
16779: END
// every 0 0$1 trigger StreamModeActive and sStu do
16780: LD_EXP 66
16784: PUSH
16785: LD_EXP 105
16789: AND
16790: IFFALSE 16806
16792: GO 16794
16794: DISABLE
// begin ToLua ( displayStucuk(); ) ;
16795: LD_STRING displayStucuk();
16797: PPUSH
16798: CALL_OW 559
// ResetFog ;
16802: CALL_OW 335
// end ;
16806: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
16807: LD_EXP 66
16811: PUSH
16812: LD_EXP 98
16816: AND
16817: IFFALSE 16958
16819: GO 16821
16821: DISABLE
16822: LD_INT 0
16824: PPUSH
16825: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16826: LD_ADDR_VAR 0 2
16830: PUSH
16831: LD_INT 22
16833: PUSH
16834: LD_OWVAR 2
16838: PUSH
16839: EMPTY
16840: LIST
16841: LIST
16842: PUSH
16843: LD_INT 21
16845: PUSH
16846: LD_INT 1
16848: PUSH
16849: EMPTY
16850: LIST
16851: LIST
16852: PUSH
16853: EMPTY
16854: LIST
16855: LIST
16856: PPUSH
16857: CALL_OW 69
16861: ST_TO_ADDR
// if not tmp then
16862: LD_VAR 0 2
16866: NOT
16867: IFFALSE 16871
// exit ;
16869: GO 16958
// un := tmp [ rand ( 1 , tmp ) ] ;
16871: LD_ADDR_VAR 0 1
16875: PUSH
16876: LD_VAR 0 2
16880: PUSH
16881: LD_INT 1
16883: PPUSH
16884: LD_VAR 0 2
16888: PPUSH
16889: CALL_OW 12
16893: ARRAY
16894: ST_TO_ADDR
// SetSide ( un , 0 ) ;
16895: LD_VAR 0 1
16899: PPUSH
16900: LD_INT 0
16902: PPUSH
16903: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
16907: LD_VAR 0 1
16911: PPUSH
16912: LD_OWVAR 3
16916: PUSH
16917: LD_VAR 0 1
16921: DIFF
16922: PPUSH
16923: LD_VAR 0 1
16927: PPUSH
16928: CALL_OW 74
16932: PPUSH
16933: CALL_OW 115
// wait ( 0 0$20 ) ;
16937: LD_INT 700
16939: PPUSH
16940: CALL_OW 67
// SetSide ( un , your_side ) ;
16944: LD_VAR 0 1
16948: PPUSH
16949: LD_OWVAR 2
16953: PPUSH
16954: CALL_OW 235
// end ;
16958: PPOPN 2
16960: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
16961: LD_EXP 66
16965: PUSH
16966: LD_EXP 99
16970: AND
16971: IFFALSE 17077
16973: GO 16975
16975: DISABLE
16976: LD_INT 0
16978: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16979: LD_ADDR_VAR 0 1
16983: PUSH
16984: LD_INT 22
16986: PUSH
16987: LD_OWVAR 2
16991: PUSH
16992: EMPTY
16993: LIST
16994: LIST
16995: PUSH
16996: LD_INT 2
16998: PUSH
16999: LD_INT 30
17001: PUSH
17002: LD_INT 0
17004: PUSH
17005: EMPTY
17006: LIST
17007: LIST
17008: PUSH
17009: LD_INT 30
17011: PUSH
17012: LD_INT 1
17014: PUSH
17015: EMPTY
17016: LIST
17017: LIST
17018: PUSH
17019: EMPTY
17020: LIST
17021: LIST
17022: LIST
17023: PUSH
17024: EMPTY
17025: LIST
17026: LIST
17027: PPUSH
17028: CALL_OW 69
17032: ST_TO_ADDR
// if not depot then
17033: LD_VAR 0 1
17037: NOT
17038: IFFALSE 17042
// exit ;
17040: GO 17077
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
17042: LD_VAR 0 1
17046: PUSH
17047: LD_INT 1
17049: ARRAY
17050: PPUSH
17051: CALL_OW 250
17055: PPUSH
17056: LD_VAR 0 1
17060: PUSH
17061: LD_INT 1
17063: ARRAY
17064: PPUSH
17065: CALL_OW 251
17069: PPUSH
17070: LD_INT 70
17072: PPUSH
17073: CALL_OW 495
// end ;
17077: PPOPN 1
17079: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
17080: LD_EXP 66
17084: PUSH
17085: LD_EXP 100
17089: AND
17090: IFFALSE 17301
17092: GO 17094
17094: DISABLE
17095: LD_INT 0
17097: PPUSH
17098: PPUSH
17099: PPUSH
17100: PPUSH
17101: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17102: LD_ADDR_VAR 0 5
17106: PUSH
17107: LD_INT 22
17109: PUSH
17110: LD_OWVAR 2
17114: PUSH
17115: EMPTY
17116: LIST
17117: LIST
17118: PUSH
17119: LD_INT 21
17121: PUSH
17122: LD_INT 1
17124: PUSH
17125: EMPTY
17126: LIST
17127: LIST
17128: PUSH
17129: EMPTY
17130: LIST
17131: LIST
17132: PPUSH
17133: CALL_OW 69
17137: ST_TO_ADDR
// if not tmp then
17138: LD_VAR 0 5
17142: NOT
17143: IFFALSE 17147
// exit ;
17145: GO 17301
// for i in tmp do
17147: LD_ADDR_VAR 0 1
17151: PUSH
17152: LD_VAR 0 5
17156: PUSH
17157: FOR_IN
17158: IFFALSE 17299
// begin d := rand ( 0 , 5 ) ;
17160: LD_ADDR_VAR 0 4
17164: PUSH
17165: LD_INT 0
17167: PPUSH
17168: LD_INT 5
17170: PPUSH
17171: CALL_OW 12
17175: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
17176: LD_ADDR_VAR 0 2
17180: PUSH
17181: LD_VAR 0 1
17185: PPUSH
17186: CALL_OW 250
17190: PPUSH
17191: LD_VAR 0 4
17195: PPUSH
17196: LD_INT 3
17198: PPUSH
17199: LD_INT 12
17201: PPUSH
17202: CALL_OW 12
17206: PPUSH
17207: CALL_OW 272
17211: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
17212: LD_ADDR_VAR 0 3
17216: PUSH
17217: LD_VAR 0 1
17221: PPUSH
17222: CALL_OW 251
17226: PPUSH
17227: LD_VAR 0 4
17231: PPUSH
17232: LD_INT 3
17234: PPUSH
17235: LD_INT 12
17237: PPUSH
17238: CALL_OW 12
17242: PPUSH
17243: CALL_OW 273
17247: ST_TO_ADDR
// if ValidHex ( x , y ) then
17248: LD_VAR 0 2
17252: PPUSH
17253: LD_VAR 0 3
17257: PPUSH
17258: CALL_OW 488
17262: IFFALSE 17297
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
17264: LD_VAR 0 1
17268: PPUSH
17269: LD_VAR 0 2
17273: PPUSH
17274: LD_VAR 0 3
17278: PPUSH
17279: LD_INT 3
17281: PPUSH
17282: LD_INT 6
17284: PPUSH
17285: CALL_OW 12
17289: PPUSH
17290: LD_INT 1
17292: PPUSH
17293: CALL_OW 483
// end ;
17297: GO 17157
17299: POP
17300: POP
// end ;
17301: PPOPN 5
17303: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
17304: LD_EXP 66
17308: PUSH
17309: LD_EXP 101
17313: AND
17314: IFFALSE 17408
17316: GO 17318
17318: DISABLE
17319: LD_INT 0
17321: PPUSH
17322: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
17323: LD_ADDR_VAR 0 2
17327: PUSH
17328: LD_INT 22
17330: PUSH
17331: LD_OWVAR 2
17335: PUSH
17336: EMPTY
17337: LIST
17338: LIST
17339: PUSH
17340: LD_INT 32
17342: PUSH
17343: LD_INT 1
17345: PUSH
17346: EMPTY
17347: LIST
17348: LIST
17349: PUSH
17350: LD_INT 21
17352: PUSH
17353: LD_INT 2
17355: PUSH
17356: EMPTY
17357: LIST
17358: LIST
17359: PUSH
17360: EMPTY
17361: LIST
17362: LIST
17363: LIST
17364: PPUSH
17365: CALL_OW 69
17369: ST_TO_ADDR
// if not tmp then
17370: LD_VAR 0 2
17374: NOT
17375: IFFALSE 17379
// exit ;
17377: GO 17408
// for i in tmp do
17379: LD_ADDR_VAR 0 1
17383: PUSH
17384: LD_VAR 0 2
17388: PUSH
17389: FOR_IN
17390: IFFALSE 17406
// SetFuel ( i , 0 ) ;
17392: LD_VAR 0 1
17396: PPUSH
17397: LD_INT 0
17399: PPUSH
17400: CALL_OW 240
17404: GO 17389
17406: POP
17407: POP
// end ;
17408: PPOPN 2
17410: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
17411: LD_EXP 66
17415: PUSH
17416: LD_EXP 102
17420: AND
17421: IFFALSE 17487
17423: GO 17425
17425: DISABLE
17426: LD_INT 0
17428: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
17429: LD_ADDR_VAR 0 1
17433: PUSH
17434: LD_INT 22
17436: PUSH
17437: LD_OWVAR 2
17441: PUSH
17442: EMPTY
17443: LIST
17444: LIST
17445: PUSH
17446: LD_INT 30
17448: PUSH
17449: LD_INT 29
17451: PUSH
17452: EMPTY
17453: LIST
17454: LIST
17455: PUSH
17456: EMPTY
17457: LIST
17458: LIST
17459: PPUSH
17460: CALL_OW 69
17464: ST_TO_ADDR
// if not tmp then
17465: LD_VAR 0 1
17469: NOT
17470: IFFALSE 17474
// exit ;
17472: GO 17487
// DestroyUnit ( tmp [ 1 ] ) ;
17474: LD_VAR 0 1
17478: PUSH
17479: LD_INT 1
17481: ARRAY
17482: PPUSH
17483: CALL_OW 65
// end ;
17487: PPOPN 1
17489: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
17490: LD_EXP 66
17494: PUSH
17495: LD_EXP 104
17499: AND
17500: IFFALSE 17629
17502: GO 17504
17504: DISABLE
17505: LD_INT 0
17507: PPUSH
// begin uc_side := 0 ;
17508: LD_ADDR_OWVAR 20
17512: PUSH
17513: LD_INT 0
17515: ST_TO_ADDR
// uc_nation := nation_arabian ;
17516: LD_ADDR_OWVAR 21
17520: PUSH
17521: LD_INT 2
17523: ST_TO_ADDR
// hc_gallery :=  ;
17524: LD_ADDR_OWVAR 33
17528: PUSH
17529: LD_STRING 
17531: ST_TO_ADDR
// hc_name :=  ;
17532: LD_ADDR_OWVAR 26
17536: PUSH
17537: LD_STRING 
17539: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
17540: LD_INT 1
17542: PPUSH
17543: LD_INT 11
17545: PPUSH
17546: LD_INT 10
17548: PPUSH
17549: CALL_OW 380
// un := CreateHuman ;
17553: LD_ADDR_VAR 0 1
17557: PUSH
17558: CALL_OW 44
17562: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17563: LD_VAR 0 1
17567: PPUSH
17568: LD_INT 1
17570: PPUSH
17571: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
17575: LD_INT 35
17577: PPUSH
17578: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
17582: LD_VAR 0 1
17586: PPUSH
17587: LD_INT 22
17589: PUSH
17590: LD_OWVAR 2
17594: PUSH
17595: EMPTY
17596: LIST
17597: LIST
17598: PPUSH
17599: CALL_OW 69
17603: PPUSH
17604: LD_VAR 0 1
17608: PPUSH
17609: CALL_OW 74
17613: PPUSH
17614: CALL_OW 115
// until IsDead ( un ) ;
17618: LD_VAR 0 1
17622: PPUSH
17623: CALL_OW 301
17627: IFFALSE 17575
// end ;
17629: PPOPN 1
17631: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
17632: LD_EXP 66
17636: PUSH
17637: LD_EXP 106
17641: AND
17642: IFFALSE 17654
17644: GO 17646
17646: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
17647: LD_STRING earthquake(getX(game), 0, 32)
17649: PPUSH
17650: CALL_OW 559
17654: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
17655: LD_EXP 66
17659: PUSH
17660: LD_EXP 107
17664: AND
17665: IFFALSE 17756
17667: GO 17669
17669: DISABLE
17670: LD_INT 0
17672: PPUSH
// begin enable ;
17673: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
17674: LD_ADDR_VAR 0 1
17678: PUSH
17679: LD_INT 22
17681: PUSH
17682: LD_OWVAR 2
17686: PUSH
17687: EMPTY
17688: LIST
17689: LIST
17690: PUSH
17691: LD_INT 21
17693: PUSH
17694: LD_INT 2
17696: PUSH
17697: EMPTY
17698: LIST
17699: LIST
17700: PUSH
17701: LD_INT 33
17703: PUSH
17704: LD_INT 3
17706: PUSH
17707: EMPTY
17708: LIST
17709: LIST
17710: PUSH
17711: EMPTY
17712: LIST
17713: LIST
17714: LIST
17715: PPUSH
17716: CALL_OW 69
17720: ST_TO_ADDR
// if not tmp then
17721: LD_VAR 0 1
17725: NOT
17726: IFFALSE 17730
// exit ;
17728: GO 17756
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
17730: LD_VAR 0 1
17734: PUSH
17735: LD_INT 1
17737: PPUSH
17738: LD_VAR 0 1
17742: PPUSH
17743: CALL_OW 12
17747: ARRAY
17748: PPUSH
17749: LD_INT 1
17751: PPUSH
17752: CALL_OW 234
// end ;
17756: PPOPN 1
17758: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
17759: LD_EXP 66
17763: PUSH
17764: LD_EXP 108
17768: AND
17769: IFFALSE 17910
17771: GO 17773
17773: DISABLE
17774: LD_INT 0
17776: PPUSH
17777: PPUSH
17778: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17779: LD_ADDR_VAR 0 3
17783: PUSH
17784: LD_INT 22
17786: PUSH
17787: LD_OWVAR 2
17791: PUSH
17792: EMPTY
17793: LIST
17794: LIST
17795: PUSH
17796: LD_INT 25
17798: PUSH
17799: LD_INT 1
17801: PUSH
17802: EMPTY
17803: LIST
17804: LIST
17805: PUSH
17806: EMPTY
17807: LIST
17808: LIST
17809: PPUSH
17810: CALL_OW 69
17814: ST_TO_ADDR
// if not tmp then
17815: LD_VAR 0 3
17819: NOT
17820: IFFALSE 17824
// exit ;
17822: GO 17910
// un := tmp [ rand ( 1 , tmp ) ] ;
17824: LD_ADDR_VAR 0 2
17828: PUSH
17829: LD_VAR 0 3
17833: PUSH
17834: LD_INT 1
17836: PPUSH
17837: LD_VAR 0 3
17841: PPUSH
17842: CALL_OW 12
17846: ARRAY
17847: ST_TO_ADDR
// if Crawls ( un ) then
17848: LD_VAR 0 2
17852: PPUSH
17853: CALL_OW 318
17857: IFFALSE 17868
// ComWalk ( un ) ;
17859: LD_VAR 0 2
17863: PPUSH
17864: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
17868: LD_VAR 0 2
17872: PPUSH
17873: LD_INT 9
17875: PPUSH
17876: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
17880: LD_INT 28
17882: PPUSH
17883: LD_OWVAR 2
17887: PPUSH
17888: LD_INT 2
17890: PPUSH
17891: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
17895: LD_INT 29
17897: PPUSH
17898: LD_OWVAR 2
17902: PPUSH
17903: LD_INT 2
17905: PPUSH
17906: CALL_OW 322
// end ;
17910: PPOPN 3
17912: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
17913: LD_EXP 66
17917: PUSH
17918: LD_EXP 109
17922: AND
17923: IFFALSE 18034
17925: GO 17927
17927: DISABLE
17928: LD_INT 0
17930: PPUSH
17931: PPUSH
17932: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17933: LD_ADDR_VAR 0 3
17937: PUSH
17938: LD_INT 22
17940: PUSH
17941: LD_OWVAR 2
17945: PUSH
17946: EMPTY
17947: LIST
17948: LIST
17949: PUSH
17950: LD_INT 25
17952: PUSH
17953: LD_INT 1
17955: PUSH
17956: EMPTY
17957: LIST
17958: LIST
17959: PUSH
17960: EMPTY
17961: LIST
17962: LIST
17963: PPUSH
17964: CALL_OW 69
17968: ST_TO_ADDR
// if not tmp then
17969: LD_VAR 0 3
17973: NOT
17974: IFFALSE 17978
// exit ;
17976: GO 18034
// un := tmp [ rand ( 1 , tmp ) ] ;
17978: LD_ADDR_VAR 0 2
17982: PUSH
17983: LD_VAR 0 3
17987: PUSH
17988: LD_INT 1
17990: PPUSH
17991: LD_VAR 0 3
17995: PPUSH
17996: CALL_OW 12
18000: ARRAY
18001: ST_TO_ADDR
// if Crawls ( un ) then
18002: LD_VAR 0 2
18006: PPUSH
18007: CALL_OW 318
18011: IFFALSE 18022
// ComWalk ( un ) ;
18013: LD_VAR 0 2
18017: PPUSH
18018: CALL_OW 138
// SetClass ( un , class_mortar ) ;
18022: LD_VAR 0 2
18026: PPUSH
18027: LD_INT 8
18029: PPUSH
18030: CALL_OW 336
// end ;
18034: PPOPN 3
18036: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
18037: LD_EXP 66
18041: PUSH
18042: LD_EXP 110
18046: AND
18047: IFFALSE 18191
18049: GO 18051
18051: DISABLE
18052: LD_INT 0
18054: PPUSH
18055: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
18056: LD_ADDR_VAR 0 2
18060: PUSH
18061: LD_INT 22
18063: PUSH
18064: LD_OWVAR 2
18068: PUSH
18069: EMPTY
18070: LIST
18071: LIST
18072: PUSH
18073: LD_INT 21
18075: PUSH
18076: LD_INT 2
18078: PUSH
18079: EMPTY
18080: LIST
18081: LIST
18082: PUSH
18083: LD_INT 2
18085: PUSH
18086: LD_INT 34
18088: PUSH
18089: LD_INT 12
18091: PUSH
18092: EMPTY
18093: LIST
18094: LIST
18095: PUSH
18096: LD_INT 34
18098: PUSH
18099: LD_INT 51
18101: PUSH
18102: EMPTY
18103: LIST
18104: LIST
18105: PUSH
18106: LD_INT 34
18108: PUSH
18109: LD_INT 32
18111: PUSH
18112: EMPTY
18113: LIST
18114: LIST
18115: PUSH
18116: EMPTY
18117: LIST
18118: LIST
18119: LIST
18120: LIST
18121: PUSH
18122: EMPTY
18123: LIST
18124: LIST
18125: LIST
18126: PPUSH
18127: CALL_OW 69
18131: ST_TO_ADDR
// if not tmp then
18132: LD_VAR 0 2
18136: NOT
18137: IFFALSE 18141
// exit ;
18139: GO 18191
// for i in tmp do
18141: LD_ADDR_VAR 0 1
18145: PUSH
18146: LD_VAR 0 2
18150: PUSH
18151: FOR_IN
18152: IFFALSE 18189
// if GetCargo ( i , mat_artifact ) = 0 then
18154: LD_VAR 0 1
18158: PPUSH
18159: LD_INT 4
18161: PPUSH
18162: CALL_OW 289
18166: PUSH
18167: LD_INT 0
18169: EQUAL
18170: IFFALSE 18187
// SetCargo ( i , mat_siberit , 100 ) ;
18172: LD_VAR 0 1
18176: PPUSH
18177: LD_INT 3
18179: PPUSH
18180: LD_INT 100
18182: PPUSH
18183: CALL_OW 290
18187: GO 18151
18189: POP
18190: POP
// end ;
18191: PPOPN 2
18193: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
18194: LD_EXP 66
18198: PUSH
18199: LD_EXP 111
18203: AND
18204: IFFALSE 18387
18206: GO 18208
18208: DISABLE
18209: LD_INT 0
18211: PPUSH
18212: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
18213: LD_ADDR_VAR 0 2
18217: PUSH
18218: LD_INT 22
18220: PUSH
18221: LD_OWVAR 2
18225: PUSH
18226: EMPTY
18227: LIST
18228: LIST
18229: PPUSH
18230: CALL_OW 69
18234: ST_TO_ADDR
// if not tmp then
18235: LD_VAR 0 2
18239: NOT
18240: IFFALSE 18244
// exit ;
18242: GO 18387
// for i := 1 to 2 do
18244: LD_ADDR_VAR 0 1
18248: PUSH
18249: DOUBLE
18250: LD_INT 1
18252: DEC
18253: ST_TO_ADDR
18254: LD_INT 2
18256: PUSH
18257: FOR_TO
18258: IFFALSE 18385
// begin uc_side := your_side ;
18260: LD_ADDR_OWVAR 20
18264: PUSH
18265: LD_OWVAR 2
18269: ST_TO_ADDR
// uc_nation := nation_american ;
18270: LD_ADDR_OWVAR 21
18274: PUSH
18275: LD_INT 1
18277: ST_TO_ADDR
// vc_chassis := us_morphling ;
18278: LD_ADDR_OWVAR 37
18282: PUSH
18283: LD_INT 5
18285: ST_TO_ADDR
// vc_engine := engine_siberite ;
18286: LD_ADDR_OWVAR 39
18290: PUSH
18291: LD_INT 3
18293: ST_TO_ADDR
// vc_control := control_computer ;
18294: LD_ADDR_OWVAR 38
18298: PUSH
18299: LD_INT 3
18301: ST_TO_ADDR
// vc_weapon := us_double_laser ;
18302: LD_ADDR_OWVAR 40
18306: PUSH
18307: LD_INT 10
18309: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
18310: LD_VAR 0 2
18314: PUSH
18315: LD_INT 1
18317: ARRAY
18318: PPUSH
18319: CALL_OW 310
18323: NOT
18324: IFFALSE 18371
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
18326: CALL_OW 45
18330: PPUSH
18331: LD_VAR 0 2
18335: PUSH
18336: LD_INT 1
18338: ARRAY
18339: PPUSH
18340: CALL_OW 250
18344: PPUSH
18345: LD_VAR 0 2
18349: PUSH
18350: LD_INT 1
18352: ARRAY
18353: PPUSH
18354: CALL_OW 251
18358: PPUSH
18359: LD_INT 12
18361: PPUSH
18362: LD_INT 1
18364: PPUSH
18365: CALL_OW 50
18369: GO 18383
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
18371: CALL_OW 45
18375: PPUSH
18376: LD_INT 1
18378: PPUSH
18379: CALL_OW 51
// end ;
18383: GO 18257
18385: POP
18386: POP
// end ;
18387: PPOPN 2
18389: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
18390: LD_EXP 66
18394: PUSH
18395: LD_EXP 112
18399: AND
18400: IFFALSE 18622
18402: GO 18404
18404: DISABLE
18405: LD_INT 0
18407: PPUSH
18408: PPUSH
18409: PPUSH
18410: PPUSH
18411: PPUSH
18412: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18413: LD_ADDR_VAR 0 6
18417: PUSH
18418: LD_INT 22
18420: PUSH
18421: LD_OWVAR 2
18425: PUSH
18426: EMPTY
18427: LIST
18428: LIST
18429: PUSH
18430: LD_INT 21
18432: PUSH
18433: LD_INT 1
18435: PUSH
18436: EMPTY
18437: LIST
18438: LIST
18439: PUSH
18440: LD_INT 3
18442: PUSH
18443: LD_INT 23
18445: PUSH
18446: LD_INT 0
18448: PUSH
18449: EMPTY
18450: LIST
18451: LIST
18452: PUSH
18453: EMPTY
18454: LIST
18455: LIST
18456: PUSH
18457: EMPTY
18458: LIST
18459: LIST
18460: LIST
18461: PPUSH
18462: CALL_OW 69
18466: ST_TO_ADDR
// if not tmp then
18467: LD_VAR 0 6
18471: NOT
18472: IFFALSE 18476
// exit ;
18474: GO 18622
// s1 := rand ( 1 , 4 ) ;
18476: LD_ADDR_VAR 0 2
18480: PUSH
18481: LD_INT 1
18483: PPUSH
18484: LD_INT 4
18486: PPUSH
18487: CALL_OW 12
18491: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
18492: LD_ADDR_VAR 0 4
18496: PUSH
18497: LD_VAR 0 6
18501: PUSH
18502: LD_INT 1
18504: ARRAY
18505: PPUSH
18506: LD_VAR 0 2
18510: PPUSH
18511: CALL_OW 259
18515: ST_TO_ADDR
// if s1 = 1 then
18516: LD_VAR 0 2
18520: PUSH
18521: LD_INT 1
18523: EQUAL
18524: IFFALSE 18544
// s2 := rand ( 2 , 4 ) else
18526: LD_ADDR_VAR 0 3
18530: PUSH
18531: LD_INT 2
18533: PPUSH
18534: LD_INT 4
18536: PPUSH
18537: CALL_OW 12
18541: ST_TO_ADDR
18542: GO 18552
// s2 := 1 ;
18544: LD_ADDR_VAR 0 3
18548: PUSH
18549: LD_INT 1
18551: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
18552: LD_ADDR_VAR 0 5
18556: PUSH
18557: LD_VAR 0 6
18561: PUSH
18562: LD_INT 1
18564: ARRAY
18565: PPUSH
18566: LD_VAR 0 3
18570: PPUSH
18571: CALL_OW 259
18575: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
18576: LD_VAR 0 6
18580: PUSH
18581: LD_INT 1
18583: ARRAY
18584: PPUSH
18585: LD_VAR 0 2
18589: PPUSH
18590: LD_VAR 0 5
18594: PPUSH
18595: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
18599: LD_VAR 0 6
18603: PUSH
18604: LD_INT 1
18606: ARRAY
18607: PPUSH
18608: LD_VAR 0 3
18612: PPUSH
18613: LD_VAR 0 4
18617: PPUSH
18618: CALL_OW 237
// end ;
18622: PPOPN 6
18624: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
18625: LD_EXP 66
18629: PUSH
18630: LD_EXP 113
18634: AND
18635: IFFALSE 18714
18637: GO 18639
18639: DISABLE
18640: LD_INT 0
18642: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
18643: LD_ADDR_VAR 0 1
18647: PUSH
18648: LD_INT 22
18650: PUSH
18651: LD_OWVAR 2
18655: PUSH
18656: EMPTY
18657: LIST
18658: LIST
18659: PUSH
18660: LD_INT 30
18662: PUSH
18663: LD_INT 3
18665: PUSH
18666: EMPTY
18667: LIST
18668: LIST
18669: PUSH
18670: EMPTY
18671: LIST
18672: LIST
18673: PPUSH
18674: CALL_OW 69
18678: ST_TO_ADDR
// if not tmp then
18679: LD_VAR 0 1
18683: NOT
18684: IFFALSE 18688
// exit ;
18686: GO 18714
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
18688: LD_VAR 0 1
18692: PUSH
18693: LD_INT 1
18695: PPUSH
18696: LD_VAR 0 1
18700: PPUSH
18701: CALL_OW 12
18705: ARRAY
18706: PPUSH
18707: LD_INT 1
18709: PPUSH
18710: CALL_OW 234
// end ;
18714: PPOPN 1
18716: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
18717: LD_EXP 66
18721: PUSH
18722: LD_EXP 114
18726: AND
18727: IFFALSE 18839
18729: GO 18731
18731: DISABLE
18732: LD_INT 0
18734: PPUSH
18735: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
18736: LD_ADDR_VAR 0 2
18740: PUSH
18741: LD_INT 22
18743: PUSH
18744: LD_OWVAR 2
18748: PUSH
18749: EMPTY
18750: LIST
18751: LIST
18752: PUSH
18753: LD_INT 2
18755: PUSH
18756: LD_INT 30
18758: PUSH
18759: LD_INT 27
18761: PUSH
18762: EMPTY
18763: LIST
18764: LIST
18765: PUSH
18766: LD_INT 30
18768: PUSH
18769: LD_INT 26
18771: PUSH
18772: EMPTY
18773: LIST
18774: LIST
18775: PUSH
18776: LD_INT 30
18778: PUSH
18779: LD_INT 28
18781: PUSH
18782: EMPTY
18783: LIST
18784: LIST
18785: PUSH
18786: EMPTY
18787: LIST
18788: LIST
18789: LIST
18790: LIST
18791: PUSH
18792: EMPTY
18793: LIST
18794: LIST
18795: PPUSH
18796: CALL_OW 69
18800: ST_TO_ADDR
// if not tmp then
18801: LD_VAR 0 2
18805: NOT
18806: IFFALSE 18810
// exit ;
18808: GO 18839
// for i in tmp do
18810: LD_ADDR_VAR 0 1
18814: PUSH
18815: LD_VAR 0 2
18819: PUSH
18820: FOR_IN
18821: IFFALSE 18837
// SetLives ( i , 1 ) ;
18823: LD_VAR 0 1
18827: PPUSH
18828: LD_INT 1
18830: PPUSH
18831: CALL_OW 234
18835: GO 18820
18837: POP
18838: POP
// end ;
18839: PPOPN 2
18841: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
18842: LD_EXP 66
18846: PUSH
18847: LD_EXP 115
18851: AND
18852: IFFALSE 19126
18854: GO 18856
18856: DISABLE
18857: LD_INT 0
18859: PPUSH
18860: PPUSH
18861: PPUSH
// begin i := rand ( 1 , 7 ) ;
18862: LD_ADDR_VAR 0 1
18866: PUSH
18867: LD_INT 1
18869: PPUSH
18870: LD_INT 7
18872: PPUSH
18873: CALL_OW 12
18877: ST_TO_ADDR
// case i of 1 :
18878: LD_VAR 0 1
18882: PUSH
18883: LD_INT 1
18885: DOUBLE
18886: EQUAL
18887: IFTRUE 18891
18889: GO 18901
18891: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
18892: LD_STRING earthquake(getX(game), 0, 32)
18894: PPUSH
18895: CALL_OW 559
18899: GO 19126
18901: LD_INT 2
18903: DOUBLE
18904: EQUAL
18905: IFTRUE 18909
18907: GO 18923
18909: POP
// begin ToLua ( displayStucuk(); ) ;
18910: LD_STRING displayStucuk();
18912: PPUSH
18913: CALL_OW 559
// ResetFog ;
18917: CALL_OW 335
// end ; 3 :
18921: GO 19126
18923: LD_INT 3
18925: DOUBLE
18926: EQUAL
18927: IFTRUE 18931
18929: GO 19035
18931: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18932: LD_ADDR_VAR 0 2
18936: PUSH
18937: LD_INT 22
18939: PUSH
18940: LD_OWVAR 2
18944: PUSH
18945: EMPTY
18946: LIST
18947: LIST
18948: PUSH
18949: LD_INT 25
18951: PUSH
18952: LD_INT 1
18954: PUSH
18955: EMPTY
18956: LIST
18957: LIST
18958: PUSH
18959: EMPTY
18960: LIST
18961: LIST
18962: PPUSH
18963: CALL_OW 69
18967: ST_TO_ADDR
// if not tmp then
18968: LD_VAR 0 2
18972: NOT
18973: IFFALSE 18977
// exit ;
18975: GO 19126
// un := tmp [ rand ( 1 , tmp ) ] ;
18977: LD_ADDR_VAR 0 3
18981: PUSH
18982: LD_VAR 0 2
18986: PUSH
18987: LD_INT 1
18989: PPUSH
18990: LD_VAR 0 2
18994: PPUSH
18995: CALL_OW 12
18999: ARRAY
19000: ST_TO_ADDR
// if Crawls ( un ) then
19001: LD_VAR 0 3
19005: PPUSH
19006: CALL_OW 318
19010: IFFALSE 19021
// ComWalk ( un ) ;
19012: LD_VAR 0 3
19016: PPUSH
19017: CALL_OW 138
// SetClass ( un , class_mortar ) ;
19021: LD_VAR 0 3
19025: PPUSH
19026: LD_INT 8
19028: PPUSH
19029: CALL_OW 336
// end ; 4 :
19033: GO 19126
19035: LD_INT 4
19037: DOUBLE
19038: EQUAL
19039: IFTRUE 19043
19041: GO 19104
19043: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
19044: LD_ADDR_VAR 0 2
19048: PUSH
19049: LD_INT 22
19051: PUSH
19052: LD_OWVAR 2
19056: PUSH
19057: EMPTY
19058: LIST
19059: LIST
19060: PUSH
19061: LD_INT 30
19063: PUSH
19064: LD_INT 29
19066: PUSH
19067: EMPTY
19068: LIST
19069: LIST
19070: PUSH
19071: EMPTY
19072: LIST
19073: LIST
19074: PPUSH
19075: CALL_OW 69
19079: ST_TO_ADDR
// if not tmp then
19080: LD_VAR 0 2
19084: NOT
19085: IFFALSE 19089
// exit ;
19087: GO 19126
// DestroyUnit ( tmp [ 1 ] ) ;
19089: LD_VAR 0 2
19093: PUSH
19094: LD_INT 1
19096: ARRAY
19097: PPUSH
19098: CALL_OW 65
// end ; 5 .. 7 :
19102: GO 19126
19104: LD_INT 5
19106: DOUBLE
19107: GREATEREQUAL
19108: IFFALSE 19116
19110: LD_INT 7
19112: DOUBLE
19113: LESSEQUAL
19114: IFTRUE 19118
19116: GO 19125
19118: POP
// StreamSibBomb ; end ;
19119: CALL 15376 0 0
19123: GO 19126
19125: POP
// end ;
19126: PPOPN 3
19128: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
19129: LD_EXP 66
19133: PUSH
19134: LD_EXP 116
19138: AND
19139: IFFALSE 19295
19141: GO 19143
19143: DISABLE
19144: LD_INT 0
19146: PPUSH
19147: PPUSH
19148: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
19149: LD_ADDR_VAR 0 2
19153: PUSH
19154: LD_INT 81
19156: PUSH
19157: LD_OWVAR 2
19161: PUSH
19162: EMPTY
19163: LIST
19164: LIST
19165: PUSH
19166: LD_INT 2
19168: PUSH
19169: LD_INT 21
19171: PUSH
19172: LD_INT 1
19174: PUSH
19175: EMPTY
19176: LIST
19177: LIST
19178: PUSH
19179: LD_INT 21
19181: PUSH
19182: LD_INT 2
19184: PUSH
19185: EMPTY
19186: LIST
19187: LIST
19188: PUSH
19189: EMPTY
19190: LIST
19191: LIST
19192: LIST
19193: PUSH
19194: EMPTY
19195: LIST
19196: LIST
19197: PPUSH
19198: CALL_OW 69
19202: ST_TO_ADDR
// if not tmp then
19203: LD_VAR 0 2
19207: NOT
19208: IFFALSE 19212
// exit ;
19210: GO 19295
// p := 0 ;
19212: LD_ADDR_VAR 0 3
19216: PUSH
19217: LD_INT 0
19219: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19220: LD_INT 35
19222: PPUSH
19223: CALL_OW 67
// p := p + 1 ;
19227: LD_ADDR_VAR 0 3
19231: PUSH
19232: LD_VAR 0 3
19236: PUSH
19237: LD_INT 1
19239: PLUS
19240: ST_TO_ADDR
// for i in tmp do
19241: LD_ADDR_VAR 0 1
19245: PUSH
19246: LD_VAR 0 2
19250: PUSH
19251: FOR_IN
19252: IFFALSE 19283
// if GetLives ( i ) < 1000 then
19254: LD_VAR 0 1
19258: PPUSH
19259: CALL_OW 256
19263: PUSH
19264: LD_INT 1000
19266: LESS
19267: IFFALSE 19281
// SetLives ( i , 1000 ) ;
19269: LD_VAR 0 1
19273: PPUSH
19274: LD_INT 1000
19276: PPUSH
19277: CALL_OW 234
19281: GO 19251
19283: POP
19284: POP
// until p > 20 ;
19285: LD_VAR 0 3
19289: PUSH
19290: LD_INT 20
19292: GREATER
19293: IFFALSE 19220
// end ;
19295: PPOPN 3
19297: END
// every 0 0$1 trigger StreamModeActive and sTime do
19298: LD_EXP 66
19302: PUSH
19303: LD_EXP 117
19307: AND
19308: IFFALSE 19343
19310: GO 19312
19312: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
19313: LD_INT 28
19315: PPUSH
19316: LD_OWVAR 2
19320: PPUSH
19321: LD_INT 2
19323: PPUSH
19324: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
19328: LD_INT 30
19330: PPUSH
19331: LD_OWVAR 2
19335: PPUSH
19336: LD_INT 2
19338: PPUSH
19339: CALL_OW 322
// end ;
19343: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
19344: LD_EXP 66
19348: PUSH
19349: LD_EXP 118
19353: AND
19354: IFFALSE 19475
19356: GO 19358
19358: DISABLE
19359: LD_INT 0
19361: PPUSH
19362: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19363: LD_ADDR_VAR 0 2
19367: PUSH
19368: LD_INT 22
19370: PUSH
19371: LD_OWVAR 2
19375: PUSH
19376: EMPTY
19377: LIST
19378: LIST
19379: PUSH
19380: LD_INT 21
19382: PUSH
19383: LD_INT 1
19385: PUSH
19386: EMPTY
19387: LIST
19388: LIST
19389: PUSH
19390: LD_INT 3
19392: PUSH
19393: LD_INT 23
19395: PUSH
19396: LD_INT 0
19398: PUSH
19399: EMPTY
19400: LIST
19401: LIST
19402: PUSH
19403: EMPTY
19404: LIST
19405: LIST
19406: PUSH
19407: EMPTY
19408: LIST
19409: LIST
19410: LIST
19411: PPUSH
19412: CALL_OW 69
19416: ST_TO_ADDR
// if not tmp then
19417: LD_VAR 0 2
19421: NOT
19422: IFFALSE 19426
// exit ;
19424: GO 19475
// for i in tmp do
19426: LD_ADDR_VAR 0 1
19430: PUSH
19431: LD_VAR 0 2
19435: PUSH
19436: FOR_IN
19437: IFFALSE 19473
// begin if Crawls ( i ) then
19439: LD_VAR 0 1
19443: PPUSH
19444: CALL_OW 318
19448: IFFALSE 19459
// ComWalk ( i ) ;
19450: LD_VAR 0 1
19454: PPUSH
19455: CALL_OW 138
// SetClass ( i , 2 ) ;
19459: LD_VAR 0 1
19463: PPUSH
19464: LD_INT 2
19466: PPUSH
19467: CALL_OW 336
// end ;
19471: GO 19436
19473: POP
19474: POP
// end ;
19475: PPOPN 2
19477: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
19478: LD_EXP 66
19482: PUSH
19483: LD_EXP 119
19487: AND
19488: IFFALSE 19769
19490: GO 19492
19492: DISABLE
19493: LD_INT 0
19495: PPUSH
19496: PPUSH
19497: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
19498: LD_OWVAR 2
19502: PPUSH
19503: LD_INT 9
19505: PPUSH
19506: LD_INT 1
19508: PPUSH
19509: LD_INT 1
19511: PPUSH
19512: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
19516: LD_INT 9
19518: PPUSH
19519: LD_OWVAR 2
19523: PPUSH
19524: CALL_OW 343
// uc_side := 9 ;
19528: LD_ADDR_OWVAR 20
19532: PUSH
19533: LD_INT 9
19535: ST_TO_ADDR
// uc_nation := 2 ;
19536: LD_ADDR_OWVAR 21
19540: PUSH
19541: LD_INT 2
19543: ST_TO_ADDR
// hc_name := Dark Warrior ;
19544: LD_ADDR_OWVAR 26
19548: PUSH
19549: LD_STRING Dark Warrior
19551: ST_TO_ADDR
// hc_gallery :=  ;
19552: LD_ADDR_OWVAR 33
19556: PUSH
19557: LD_STRING 
19559: ST_TO_ADDR
// hc_noskilllimit := true ;
19560: LD_ADDR_OWVAR 76
19564: PUSH
19565: LD_INT 1
19567: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
19568: LD_ADDR_OWVAR 31
19572: PUSH
19573: LD_INT 30
19575: PUSH
19576: LD_INT 30
19578: PUSH
19579: LD_INT 30
19581: PUSH
19582: LD_INT 30
19584: PUSH
19585: EMPTY
19586: LIST
19587: LIST
19588: LIST
19589: LIST
19590: ST_TO_ADDR
// un := CreateHuman ;
19591: LD_ADDR_VAR 0 3
19595: PUSH
19596: CALL_OW 44
19600: ST_TO_ADDR
// hc_noskilllimit := false ;
19601: LD_ADDR_OWVAR 76
19605: PUSH
19606: LD_INT 0
19608: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19609: LD_VAR 0 3
19613: PPUSH
19614: LD_INT 1
19616: PPUSH
19617: CALL_OW 51
// p := 0 ;
19621: LD_ADDR_VAR 0 2
19625: PUSH
19626: LD_INT 0
19628: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19629: LD_INT 35
19631: PPUSH
19632: CALL_OW 67
// p := p + 1 ;
19636: LD_ADDR_VAR 0 2
19640: PUSH
19641: LD_VAR 0 2
19645: PUSH
19646: LD_INT 1
19648: PLUS
19649: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
19650: LD_VAR 0 3
19654: PPUSH
19655: CALL_OW 256
19659: PUSH
19660: LD_INT 1000
19662: LESS
19663: IFFALSE 19677
// SetLives ( un , 1000 ) ;
19665: LD_VAR 0 3
19669: PPUSH
19670: LD_INT 1000
19672: PPUSH
19673: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
19677: LD_VAR 0 3
19681: PPUSH
19682: LD_INT 81
19684: PUSH
19685: LD_OWVAR 2
19689: PUSH
19690: EMPTY
19691: LIST
19692: LIST
19693: PUSH
19694: LD_INT 91
19696: PUSH
19697: LD_VAR 0 3
19701: PUSH
19702: LD_INT 30
19704: PUSH
19705: EMPTY
19706: LIST
19707: LIST
19708: LIST
19709: PUSH
19710: EMPTY
19711: LIST
19712: LIST
19713: PPUSH
19714: CALL_OW 69
19718: PPUSH
19719: LD_VAR 0 3
19723: PPUSH
19724: CALL_OW 74
19728: PPUSH
19729: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
19733: LD_VAR 0 2
19737: PUSH
19738: LD_INT 60
19740: GREATER
19741: PUSH
19742: LD_VAR 0 3
19746: PPUSH
19747: CALL_OW 301
19751: OR
19752: IFFALSE 19629
// if un then
19754: LD_VAR 0 3
19758: IFFALSE 19769
// RemoveUnit ( un ) ;
19760: LD_VAR 0 3
19764: PPUSH
19765: CALL_OW 64
// end ; end_of_file
19769: PPOPN 3
19771: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
19772: LD_INT 0
19774: PPUSH
19775: PPUSH
19776: PPUSH
19777: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
19778: LD_VAR 0 1
19782: PPUSH
19783: CALL_OW 264
19787: PUSH
19788: LD_EXP 56
19792: EQUAL
19793: IFFALSE 19865
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
19795: LD_INT 68
19797: PPUSH
19798: LD_VAR 0 1
19802: PPUSH
19803: CALL_OW 255
19807: PPUSH
19808: CALL_OW 321
19812: PUSH
19813: LD_INT 2
19815: EQUAL
19816: IFFALSE 19828
// eff := 70 else
19818: LD_ADDR_VAR 0 4
19822: PUSH
19823: LD_INT 70
19825: ST_TO_ADDR
19826: GO 19836
// eff := 30 ;
19828: LD_ADDR_VAR 0 4
19832: PUSH
19833: LD_INT 30
19835: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
19836: LD_VAR 0 1
19840: PPUSH
19841: CALL_OW 250
19845: PPUSH
19846: LD_VAR 0 1
19850: PPUSH
19851: CALL_OW 251
19855: PPUSH
19856: LD_VAR 0 4
19860: PPUSH
19861: CALL_OW 495
// end ; end ;
19865: LD_VAR 0 2
19869: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
19870: LD_INT 0
19872: PPUSH
// end ;
19873: LD_VAR 0 4
19877: RET
// export function SOS_Command ( cmd ) ; begin
19878: LD_INT 0
19880: PPUSH
// end ;
19881: LD_VAR 0 2
19885: RET
// on TargetableSAIL ( cmd , unit , selectedunit , x , y ) do begin if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
19886: LD_VAR 0 1
19890: PUSH
19891: LD_INT 255
19893: EQUAL
19894: PUSH
19895: LD_VAR 0 2
19899: PPUSH
19900: CALL_OW 264
19904: PUSH
19905: LD_INT 14
19907: PUSH
19908: LD_INT 53
19910: PUSH
19911: EMPTY
19912: LIST
19913: LIST
19914: IN
19915: AND
19916: PUSH
19917: LD_VAR 0 4
19921: PPUSH
19922: LD_VAR 0 5
19926: PPUSH
19927: CALL_OW 488
19931: AND
19932: IFFALSE 19956
// CutTreeXYR ( unit , x , y , 12 ) ;
19934: LD_VAR 0 2
19938: PPUSH
19939: LD_VAR 0 4
19943: PPUSH
19944: LD_VAR 0 5
19948: PPUSH
19949: LD_INT 12
19951: PPUSH
19952: CALL 19959 0 4
// end ;
19956: PPOPN 5
19958: END
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
19959: LD_INT 0
19961: PPUSH
19962: PPUSH
19963: PPUSH
19964: PPUSH
19965: PPUSH
19966: PPUSH
19967: PPUSH
19968: PPUSH
19969: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
19970: LD_VAR 0 1
19974: NOT
19975: PUSH
19976: LD_VAR 0 2
19980: PPUSH
19981: LD_VAR 0 3
19985: PPUSH
19986: CALL_OW 488
19990: NOT
19991: OR
19992: PUSH
19993: LD_VAR 0 4
19997: NOT
19998: OR
19999: IFFALSE 20003
// exit ;
20001: GO 20343
// list := [ ] ;
20003: LD_ADDR_VAR 0 13
20007: PUSH
20008: EMPTY
20009: ST_TO_ADDR
// if x - r < 0 then
20010: LD_VAR 0 2
20014: PUSH
20015: LD_VAR 0 4
20019: MINUS
20020: PUSH
20021: LD_INT 0
20023: LESS
20024: IFFALSE 20036
// min_x := 0 else
20026: LD_ADDR_VAR 0 7
20030: PUSH
20031: LD_INT 0
20033: ST_TO_ADDR
20034: GO 20052
// min_x := x - r ;
20036: LD_ADDR_VAR 0 7
20040: PUSH
20041: LD_VAR 0 2
20045: PUSH
20046: LD_VAR 0 4
20050: MINUS
20051: ST_TO_ADDR
// if y - r < 0 then
20052: LD_VAR 0 3
20056: PUSH
20057: LD_VAR 0 4
20061: MINUS
20062: PUSH
20063: LD_INT 0
20065: LESS
20066: IFFALSE 20078
// min_y := 0 else
20068: LD_ADDR_VAR 0 8
20072: PUSH
20073: LD_INT 0
20075: ST_TO_ADDR
20076: GO 20094
// min_y := y - r ;
20078: LD_ADDR_VAR 0 8
20082: PUSH
20083: LD_VAR 0 3
20087: PUSH
20088: LD_VAR 0 4
20092: MINUS
20093: ST_TO_ADDR
// max_x := x + r ;
20094: LD_ADDR_VAR 0 9
20098: PUSH
20099: LD_VAR 0 2
20103: PUSH
20104: LD_VAR 0 4
20108: PLUS
20109: ST_TO_ADDR
// max_y := y + r ;
20110: LD_ADDR_VAR 0 10
20114: PUSH
20115: LD_VAR 0 3
20119: PUSH
20120: LD_VAR 0 4
20124: PLUS
20125: ST_TO_ADDR
// for _x = min_x to max_x do
20126: LD_ADDR_VAR 0 11
20130: PUSH
20131: DOUBLE
20132: LD_VAR 0 7
20136: DEC
20137: ST_TO_ADDR
20138: LD_VAR 0 9
20142: PUSH
20143: FOR_TO
20144: IFFALSE 20261
// for _y = min_y to max_y do
20146: LD_ADDR_VAR 0 12
20150: PUSH
20151: DOUBLE
20152: LD_VAR 0 8
20156: DEC
20157: ST_TO_ADDR
20158: LD_VAR 0 10
20162: PUSH
20163: FOR_TO
20164: IFFALSE 20257
// begin if not ValidHex ( _x , _y ) then
20166: LD_VAR 0 11
20170: PPUSH
20171: LD_VAR 0 12
20175: PPUSH
20176: CALL_OW 488
20180: NOT
20181: IFFALSE 20185
// continue ;
20183: GO 20163
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
20185: LD_VAR 0 11
20189: PPUSH
20190: LD_VAR 0 12
20194: PPUSH
20195: CALL_OW 351
20199: PUSH
20200: LD_VAR 0 11
20204: PPUSH
20205: LD_VAR 0 12
20209: PPUSH
20210: CALL_OW 554
20214: AND
20215: IFFALSE 20255
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
20217: LD_ADDR_VAR 0 13
20221: PUSH
20222: LD_VAR 0 13
20226: PPUSH
20227: LD_VAR 0 13
20231: PUSH
20232: LD_INT 1
20234: PLUS
20235: PPUSH
20236: LD_VAR 0 11
20240: PUSH
20241: LD_VAR 0 12
20245: PUSH
20246: EMPTY
20247: LIST
20248: LIST
20249: PPUSH
20250: CALL_OW 2
20254: ST_TO_ADDR
// end ;
20255: GO 20163
20257: POP
20258: POP
20259: GO 20143
20261: POP
20262: POP
// if not list then
20263: LD_VAR 0 13
20267: NOT
20268: IFFALSE 20272
// exit ;
20270: GO 20343
// for i in list do
20272: LD_ADDR_VAR 0 6
20276: PUSH
20277: LD_VAR 0 13
20281: PUSH
20282: FOR_IN
20283: IFFALSE 20341
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
20285: LD_VAR 0 1
20289: PPUSH
20290: LD_STRING M
20292: PUSH
20293: LD_VAR 0 6
20297: PUSH
20298: LD_INT 1
20300: ARRAY
20301: PUSH
20302: LD_VAR 0 6
20306: PUSH
20307: LD_INT 2
20309: ARRAY
20310: PUSH
20311: LD_INT 0
20313: PUSH
20314: LD_INT 0
20316: PUSH
20317: LD_INT 0
20319: PUSH
20320: LD_INT 0
20322: PUSH
20323: EMPTY
20324: LIST
20325: LIST
20326: LIST
20327: LIST
20328: LIST
20329: LIST
20330: LIST
20331: PUSH
20332: EMPTY
20333: LIST
20334: PPUSH
20335: CALL_OW 447
20339: GO 20282
20341: POP
20342: POP
// end ;
20343: LD_VAR 0 5
20347: RET
