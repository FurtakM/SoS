// starting begin PrepareMap ;
   0: CALL 13 0 0
// Main_Variables ;
   4: CALL 136 0 0
// Start_Mission ;
   8: CALL 3478 0 0
// end ;
  12: END
// function PrepareMap ; begin
  13: LD_INT 0
  15: PPUSH
// ResetFog ;
  16: CALL_OW 335
// RandomizeAll ;
  20: CALL_OW 11
// game_difficulty := GetMultiplayerSetting ( 0 ) ;
  24: LD_ADDR_EXP 2
  28: PUSH
  29: LD_INT 0
  31: PPUSH
  32: CALL_OW 426
  36: ST_TO_ADDR
// Difficulty := game_difficulty ;
  37: LD_ADDR_OWVAR 67
  41: PUSH
  42: LD_EXP 2
  46: ST_TO_ADDR
// ChangeSideFog ( 8 , 6 ) ;
  47: LD_INT 8
  49: PPUSH
  50: LD_INT 6
  52: PPUSH
  53: CALL_OW 343
// PlaceSeeing ( 1 , 1 , 8 , - 37963 ) ;
  57: LD_INT 1
  59: PPUSH
  60: LD_INT 1
  62: PPUSH
  63: LD_INT 8
  65: PPUSH
  66: LD_INT 37963
  68: NEG
  69: PPUSH
  70: CALL_OW 330
// RemoveSeeing ( 1 , 1 , 8 ) ;
  74: LD_INT 1
  76: PPUSH
  77: LD_INT 1
  79: PPUSH
  80: LD_INT 8
  82: PPUSH
  83: CALL_OW 331
// PlaceCamera ;
  87: CALL 3945 0 0
// PrepareNature ( nature , 4 , 3 , 2 , 1 ) ;
  91: LD_INT 2
  93: PPUSH
  94: LD_INT 4
  96: PPUSH
  97: LD_INT 3
  99: PPUSH
 100: LD_INT 2
 102: PPUSH
 103: LD_INT 1
 105: PPUSH
 106: CALL 7869 0 5
// PrepareComm ;
 110: CALL 8352 0 0
// SetSide ( fort , 6 ) ;
 114: LD_INT 23
 116: PPUSH
 117: LD_INT 6
 119: PPUSH
 120: CALL_OW 235
// CenterNowOnUnits ( fort ) ;
 124: LD_INT 23
 126: PPUSH
 127: CALL_OW 87
// end ;
 131: LD_VAR 0 1
 135: RET
// export game_on , game_difficulty , game_time , game_option , game_end , game_strings ; export leopold , leopold_in_fort , samuel , samuel_in_fort , mortars_in_fort , scout ; export u_mine , u_fac ; export areas ; export skill ; export ar_weapons , ru_weapons , us_weapons ; export arabian_force , russian_force , american_force , arabian_timeing , russian_timeing , american_timeing ; export meeting_start , meeting_arive , meeting_break , meeting_end , meeting_time , russian_timer , fort_destroyed , hero_died , mission_time , cargo_ok , american_hchan , dezert , arabian_attack , russian_attack , american_attack , american_help , american_sib_bomb , russian_trade , heike_dialog1 , heike_dialog2 ; export am_comander , ru_comander , ar_comander ; function Main_Variables ; begin
 136: LD_INT 0
 138: PPUSH
// game_on := false ;
 139: LD_ADDR_EXP 1
 143: PUSH
 144: LD_INT 0
 146: ST_TO_ADDR
// game_time := 0 0$00 ;
 147: LD_ADDR_EXP 3
 151: PUSH
 152: LD_INT 0
 154: ST_TO_ADDR
// game_option := [ 1 ] ;
 155: LD_ADDR_EXP 4
 159: PUSH
 160: LD_INT 1
 162: PUSH
 163: EMPTY
 164: LIST
 165: ST_TO_ADDR
// game_end := false ;
 166: LD_ADDR_EXP 5
 170: PUSH
 171: LD_INT 0
 173: ST_TO_ADDR
// game_strings := [ ] ;
 174: LD_ADDR_EXP 6
 178: PUSH
 179: EMPTY
 180: ST_TO_ADDR
// game_time := 0 0$00 ;
 181: LD_ADDR_EXP 3
 185: PUSH
 186: LD_INT 0
 188: ST_TO_ADDR
// mission_time := 0 0$00 ;
 189: LD_ADDR_EXP 34
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// skill := [ 5 , 7 , 9 ] [ game_difficulty ] ;
 197: LD_ADDR_EXP 16
 201: PUSH
 202: LD_INT 5
 204: PUSH
 205: LD_INT 7
 207: PUSH
 208: LD_INT 9
 210: PUSH
 211: EMPTY
 212: LIST
 213: LIST
 214: LIST
 215: PUSH
 216: LD_EXP 2
 220: ARRAY
 221: ST_TO_ADDR
// areas := [ a_swest , a_nwest , a_neast , a_seast ] ;
 222: LD_ADDR_EXP 15
 226: PUSH
 227: LD_INT 5
 229: PUSH
 230: LD_INT 6
 232: PUSH
 233: LD_INT 7
 235: PUSH
 236: LD_INT 8
 238: PUSH
 239: EMPTY
 240: LIST
 241: LIST
 242: LIST
 243: LIST
 244: ST_TO_ADDR
// meeting_start := false ;
 245: LD_ADDR_EXP 26
 249: PUSH
 250: LD_INT 0
 252: ST_TO_ADDR
// meeting_arive := false ;
 253: LD_ADDR_EXP 27
 257: PUSH
 258: LD_INT 0
 260: ST_TO_ADDR
// meeting_break := false ;
 261: LD_ADDR_EXP 28
 265: PUSH
 266: LD_INT 0
 268: ST_TO_ADDR
// meeting_end := false ;
 269: LD_ADDR_EXP 29
 273: PUSH
 274: LD_INT 0
 276: ST_TO_ADDR
// meeting_time := [ 4 4$00 , 3 3$40 , 3 3$20 ] [ game_difficulty ] ;
 277: LD_ADDR_EXP 30
 281: PUSH
 282: LD_INT 8400
 284: PUSH
 285: LD_INT 7700
 287: PUSH
 288: LD_INT 7000
 290: PUSH
 291: EMPTY
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: LD_EXP 2
 300: ARRAY
 301: ST_TO_ADDR
// arabian_force := [ 5 , 6 , 7 ] [ game_difficulty ] ;
 302: LD_ADDR_EXP 20
 306: PUSH
 307: LD_INT 5
 309: PUSH
 310: LD_INT 6
 312: PUSH
 313: LD_INT 7
 315: PUSH
 316: EMPTY
 317: LIST
 318: LIST
 319: LIST
 320: PUSH
 321: LD_EXP 2
 325: ARRAY
 326: ST_TO_ADDR
// american_force := [ 6 , 8 , 9 ] [ game_difficulty ] ;
 327: LD_ADDR_EXP 22
 331: PUSH
 332: LD_INT 6
 334: PUSH
 335: LD_INT 8
 337: PUSH
 338: LD_INT 9
 340: PUSH
 341: EMPTY
 342: LIST
 343: LIST
 344: LIST
 345: PUSH
 346: LD_EXP 2
 350: ARRAY
 351: ST_TO_ADDR
// russian_force := [ 7 , 9 , 10 ] [ game_difficulty ] ;
 352: LD_ADDR_EXP 21
 356: PUSH
 357: LD_INT 7
 359: PUSH
 360: LD_INT 9
 362: PUSH
 363: LD_INT 10
 365: PUSH
 366: EMPTY
 367: LIST
 368: LIST
 369: LIST
 370: PUSH
 371: LD_EXP 2
 375: ARRAY
 376: ST_TO_ADDR
// u_mine := false ;
 377: LD_ADDR_EXP 13
 381: PUSH
 382: LD_INT 0
 384: ST_TO_ADDR
// u_fac := false ;
 385: LD_ADDR_EXP 14
 389: PUSH
 390: LD_INT 0
 392: ST_TO_ADDR
// leopold_in_fort := false ;
 393: LD_ADDR_EXP 8
 397: PUSH
 398: LD_INT 0
 400: ST_TO_ADDR
// samuel_in_fort := false ;
 401: LD_ADDR_EXP 10
 405: PUSH
 406: LD_INT 0
 408: ST_TO_ADDR
// mortars_in_fort := false ;
 409: LD_ADDR_EXP 11
 413: PUSH
 414: LD_INT 0
 416: ST_TO_ADDR
// fort_destroyed := false ;
 417: LD_ADDR_EXP 32
 421: PUSH
 422: LD_INT 0
 424: ST_TO_ADDR
// hero_died := false ;
 425: LD_ADDR_EXP 33
 429: PUSH
 430: LD_INT 0
 432: ST_TO_ADDR
// dezert := false ;
 433: LD_ADDR_EXP 37
 437: PUSH
 438: LD_INT 0
 440: ST_TO_ADDR
// arabian_attack := false ;
 441: LD_ADDR_EXP 38
 445: PUSH
 446: LD_INT 0
 448: ST_TO_ADDR
// russian_attack := false ;
 449: LD_ADDR_EXP 39
 453: PUSH
 454: LD_INT 0
 456: ST_TO_ADDR
// american_attack := false ;
 457: LD_ADDR_EXP 40
 461: PUSH
 462: LD_INT 0
 464: ST_TO_ADDR
// american_help := false ;
 465: LD_ADDR_EXP 41
 469: PUSH
 470: LD_INT 0
 472: ST_TO_ADDR
// american_hchan := [ 91 , 81 , 71 ] [ game_difficulty ] ;
 473: LD_ADDR_EXP 36
 477: PUSH
 478: LD_INT 91
 480: PUSH
 481: LD_INT 81
 483: PUSH
 484: LD_INT 71
 486: PUSH
 487: EMPTY
 488: LIST
 489: LIST
 490: LIST
 491: PUSH
 492: LD_EXP 2
 496: ARRAY
 497: ST_TO_ADDR
// american_sib_bomb := false ;
 498: LD_ADDR_EXP 42
 502: PUSH
 503: LD_INT 0
 505: ST_TO_ADDR
// russian_trade := false ;
 506: LD_ADDR_EXP 43
 510: PUSH
 511: LD_INT 0
 513: ST_TO_ADDR
// russian_timer := 5 5$00 ;
 514: LD_ADDR_EXP 31
 518: PUSH
 519: LD_INT 10500
 521: ST_TO_ADDR
// cargo_ok := false ;
 522: LD_ADDR_EXP 35
 526: PUSH
 527: LD_INT 0
 529: ST_TO_ADDR
// heike_dialog1 := false ;
 530: LD_ADDR_EXP 44
 534: PUSH
 535: LD_INT 0
 537: ST_TO_ADDR
// heike_dialog2 := false ;
 538: LD_ADDR_EXP 45
 542: PUSH
 543: LD_INT 0
 545: ST_TO_ADDR
// american_timeing := [ 10 10$00 , 9 9$40 , 9 9$10 ] [ game_difficulty ] ;
 546: LD_ADDR_EXP 25
 550: PUSH
 551: LD_INT 21000
 553: PUSH
 554: LD_INT 20300
 556: PUSH
 557: LD_INT 19250
 559: PUSH
 560: EMPTY
 561: LIST
 562: LIST
 563: LIST
 564: PUSH
 565: LD_EXP 2
 569: ARRAY
 570: ST_TO_ADDR
// arabian_timeing := [ 8 8$00 , 7 7$10 , 6 6$20 ] [ game_difficulty ] ;
 571: LD_ADDR_EXP 23
 575: PUSH
 576: LD_INT 16800
 578: PUSH
 579: LD_INT 15050
 581: PUSH
 582: LD_INT 13300
 584: PUSH
 585: EMPTY
 586: LIST
 587: LIST
 588: LIST
 589: PUSH
 590: LD_EXP 2
 594: ARRAY
 595: ST_TO_ADDR
// russian_timeing := [ 11 11$00 , 10 10$30 , 9 9$20 ] [ game_difficulty ] ;
 596: LD_ADDR_EXP 24
 600: PUSH
 601: LD_INT 23100
 603: PUSH
 604: LD_INT 22050
 606: PUSH
 607: LD_INT 19600
 609: PUSH
 610: EMPTY
 611: LIST
 612: LIST
 613: LIST
 614: PUSH
 615: LD_EXP 2
 619: ARRAY
 620: ST_TO_ADDR
// ar_weapons := [ ar_rocket_launcher , ar_gun , ar_flame_thrower , ar_selfpropelled_bomb , ar_bio_bomb ] ;
 621: LD_ADDR_EXP 17
 625: PUSH
 626: LD_INT 28
 628: PUSH
 629: LD_INT 27
 631: PUSH
 632: LD_INT 26
 634: PUSH
 635: LD_INT 29
 637: PUSH
 638: LD_EXP 56
 642: PUSH
 643: EMPTY
 644: LIST
 645: LIST
 646: LIST
 647: LIST
 648: LIST
 649: ST_TO_ADDR
// us_weapons := [ us_rocket_launcher , us_heavy_gun , us_double_laser , us_laser ] ;
 650: LD_ADDR_EXP 19
 654: PUSH
 655: LD_INT 7
 657: PUSH
 658: LD_INT 6
 660: PUSH
 661: LD_INT 10
 663: PUSH
 664: LD_INT 9
 666: PUSH
 667: EMPTY
 668: LIST
 669: LIST
 670: LIST
 671: LIST
 672: ST_TO_ADDR
// ru_weapons := [ ru_rocket_launcher , ru_rocket , ru_heavy_gun , ru_heavy_gun ] ;
 673: LD_ADDR_EXP 18
 677: PUSH
 678: LD_INT 45
 680: PUSH
 681: LD_INT 47
 683: PUSH
 684: LD_INT 46
 686: PUSH
 687: LD_INT 46
 689: PUSH
 690: EMPTY
 691: LIST
 692: LIST
 693: LIST
 694: LIST
 695: ST_TO_ADDR
// end ;
 696: LD_VAR 0 1
 700: RET
// every 0 0$01 trigger game_on do var i , p , x , filter ;
 701: LD_EXP 1
 705: IFFALSE 3475
 707: GO 709
 709: DISABLE
 710: LD_INT 0
 712: PPUSH
 713: PPUSH
 714: PPUSH
 715: PPUSH
// begin enable ;
 716: ENABLE
// Display_Strings := [ #tick , game_time ] ^ game_strings ;
 717: LD_ADDR_OWVAR 47
 721: PUSH
 722: LD_STRING #tick
 724: PUSH
 725: LD_EXP 3
 729: PUSH
 730: EMPTY
 731: LIST
 732: LIST
 733: PUSH
 734: LD_EXP 6
 738: ADD
 739: ST_TO_ADDR
// game_time := RefreshTime ( game_time , true ) ;
 740: LD_ADDR_EXP 3
 744: PUSH
 745: LD_EXP 3
 749: PPUSH
 750: LD_INT 1
 752: PPUSH
 753: CALL 6955 0 2
 757: ST_TO_ADDR
// if meeting_start and meeting_time > 0 0$00 then
 758: LD_EXP 26
 762: PUSH
 763: LD_EXP 30
 767: PUSH
 768: LD_INT 0
 770: GREATER
 771: AND
 772: IFFALSE 809
// begin game_strings := [ #mtime , meeting_time ] ;
 774: LD_ADDR_EXP 6
 778: PUSH
 779: LD_STRING #mtime
 781: PUSH
 782: LD_EXP 30
 786: PUSH
 787: EMPTY
 788: LIST
 789: LIST
 790: ST_TO_ADDR
// meeting_time := RefreshTime ( meeting_time , false ) ;
 791: LD_ADDR_EXP 30
 795: PUSH
 796: LD_EXP 30
 800: PPUSH
 801: LD_INT 0
 803: PPUSH
 804: CALL 6955 0 2
 808: ST_TO_ADDR
// end ; if meeting_arive then
 809: LD_EXP 27
 813: IFFALSE 833
// mission_time := RefreshTime ( mission_time , true ) ;
 815: LD_ADDR_EXP 34
 819: PUSH
 820: LD_EXP 34
 824: PPUSH
 825: LD_INT 1
 827: PPUSH
 828: CALL 6955 0 2
 832: ST_TO_ADDR
// if arabian_attack and arabian_timeing > 0 0$00 and meeting_arive then
 833: LD_EXP 38
 837: PUSH
 838: LD_EXP 23
 842: PUSH
 843: LD_INT 0
 845: GREATER
 846: AND
 847: PUSH
 848: LD_EXP 27
 852: AND
 853: IFFALSE 873
// begin arabian_timeing := RefreshTime ( arabian_timeing , false ) ;
 855: LD_ADDR_EXP 23
 859: PUSH
 860: LD_EXP 23
 864: PPUSH
 865: LD_INT 0
 867: PPUSH
 868: CALL 6955 0 2
 872: ST_TO_ADDR
// end ; if russian_attack and russian_timeing > 0 0$00 and meeting_arive then
 873: LD_EXP 39
 877: PUSH
 878: LD_EXP 24
 882: PUSH
 883: LD_INT 0
 885: GREATER
 886: AND
 887: PUSH
 888: LD_EXP 27
 892: AND
 893: IFFALSE 913
// begin russian_timeing := RefreshTime ( russian_timeing , false ) ;
 895: LD_ADDR_EXP 24
 899: PUSH
 900: LD_EXP 24
 904: PPUSH
 905: LD_INT 0
 907: PPUSH
 908: CALL 6955 0 2
 912: ST_TO_ADDR
// end ; if american_attack and american_timeing > 0 0$00 and meeting_arive then
 913: LD_EXP 40
 917: PUSH
 918: LD_EXP 25
 922: PUSH
 923: LD_INT 0
 925: GREATER
 926: AND
 927: PUSH
 928: LD_EXP 27
 932: AND
 933: IFFALSE 953
// begin american_timeing := RefreshTime ( american_timeing , false ) ;
 935: LD_ADDR_EXP 25
 939: PUSH
 940: LD_EXP 25
 944: PPUSH
 945: LD_INT 0
 947: PPUSH
 948: CALL 6955 0 2
 952: ST_TO_ADDR
// end ; if russian_trade and russian_timer > 0 0$00 then
 953: LD_EXP 43
 957: PUSH
 958: LD_EXP 31
 962: PUSH
 963: LD_INT 0
 965: GREATER
 966: AND
 967: IFFALSE 1004
// begin game_strings := [ #rtime , russian_timer ] ;
 969: LD_ADDR_EXP 6
 973: PUSH
 974: LD_STRING #rtime
 976: PUSH
 977: LD_EXP 31
 981: PUSH
 982: EMPTY
 983: LIST
 984: LIST
 985: ST_TO_ADDR
// russian_timer := RefreshTime ( russian_timer , false ) ;
 986: LD_ADDR_EXP 31
 990: PUSH
 991: LD_EXP 31
 995: PPUSH
 996: LD_INT 0
 998: PPUSH
 999: CALL 6955 0 2
1003: ST_TO_ADDR
// end ; if russian_trade and russian_timer = 0 0$00 or cargo_ok then
1004: LD_EXP 43
1008: PUSH
1009: LD_EXP 31
1013: PUSH
1014: LD_INT 0
1016: EQUAL
1017: AND
1018: PUSH
1019: LD_EXP 35
1023: OR
1024: IFFALSE 1033
// game_strings := [ ] ;
1026: LD_ADDR_EXP 6
1030: PUSH
1031: EMPTY
1032: ST_TO_ADDR
// if dezert = false and tick mod 33600 = 0 then
1033: LD_EXP 37
1037: PUSH
1038: LD_INT 0
1040: EQUAL
1041: PUSH
1042: LD_OWVAR 1
1046: PUSH
1047: LD_INT 33600
1049: MOD
1050: PUSH
1051: LD_INT 0
1053: EQUAL
1054: AND
1055: IFFALSE 1115
// begin p := Rand ( 1 , 5 ) ;
1057: LD_ADDR_VAR 0 2
1061: PUSH
1062: LD_INT 1
1064: PPUSH
1065: LD_INT 5
1067: PPUSH
1068: CALL_OW 12
1072: ST_TO_ADDR
// if p <= [ 4 , 3 , 3 ] [ game_difficulty ] then
1073: LD_VAR 0 2
1077: PUSH
1078: LD_INT 4
1080: PUSH
1081: LD_INT 3
1083: PUSH
1084: LD_INT 3
1086: PUSH
1087: EMPTY
1088: LIST
1089: LIST
1090: LIST
1091: PUSH
1092: LD_EXP 2
1096: ARRAY
1097: LESSEQUAL
1098: IFFALSE 1115
// begin RaiseSailEvent ( 92 ) ;
1100: LD_INT 92
1102: PPUSH
1103: CALL_OW 427
// dezert := true ;
1107: LD_ADDR_EXP 37
1111: PUSH
1112: LD_INT 1
1114: ST_TO_ADDR
// end ; end ; if tick mod 8400 = 0 then
1115: LD_OWVAR 1
1119: PUSH
1120: LD_INT 8400
1122: MOD
1123: PUSH
1124: LD_INT 0
1126: EQUAL
1127: IFFALSE 1136
// RaiseSailEvent ( 101 ) ;
1129: LD_INT 101
1131: PPUSH
1132: CALL_OW 427
// if MineExist ( 8 ) and u_mine = false then
1136: LD_INT 8
1138: PPUSH
1139: CALL 7009 0 1
1143: PUSH
1144: LD_EXP 13
1148: PUSH
1149: LD_INT 0
1151: EQUAL
1152: AND
1153: IFFALSE 1170
// begin u_mine := true ;
1155: LD_ADDR_EXP 13
1159: PUSH
1160: LD_INT 1
1162: ST_TO_ADDR
// ChangeMissionObjectives ( DS-T1m ) ;
1163: LD_STRING DS-T1m
1165: PPUSH
1166: CALL_OW 337
// end ; if FacExist ( 8 ) and u_fac = false then
1170: LD_INT 8
1172: PPUSH
1173: CALL 7071 0 1
1177: PUSH
1178: LD_EXP 14
1182: PUSH
1183: LD_INT 0
1185: EQUAL
1186: AND
1187: IFFALSE 1204
// begin u_fac := true ;
1189: LD_ADDR_EXP 14
1193: PUSH
1194: LD_INT 1
1196: ST_TO_ADDR
// ChangeMissionObjectives ( DS-T1f ) ;
1197: LD_STRING DS-T1f
1199: PPUSH
1200: CALL_OW 337
// end ; if hero_died then
1204: LD_EXP 33
1208: IFFALSE 1217
// YouLost ( DS-h1 ) ;
1210: LD_STRING DS-h1
1212: PPUSH
1213: CALL_OW 104
// if fort_destroyed then
1217: LD_EXP 32
1221: IFFALSE 1230
// YouLost ( DS-h2 ) ;
1223: LD_STRING DS-h2
1225: PPUSH
1226: CALL_OW 104
// if GetDistUnits ( leopold , l_cmndr ) > 6 and meeting_start = false then
1230: LD_EXP 7
1234: PPUSH
1235: LD_EXP 49
1239: PPUSH
1240: CALL_OW 296
1244: PUSH
1245: LD_INT 6
1247: GREATER
1248: PUSH
1249: LD_EXP 26
1253: PUSH
1254: LD_INT 0
1256: EQUAL
1257: AND
1258: IFFALSE 1281
// begin if not HasTask ( leopold ) then
1260: LD_EXP 7
1264: PPUSH
1265: CALL_OW 314
1269: NOT
1270: IFFALSE 1279
// RaiseSailEvent ( 1 ) ;
1272: LD_INT 1
1274: PPUSH
1275: CALL_OW 427
// end else
1279: GO 1298
// if meeting_start = false then
1281: LD_EXP 26
1285: PUSH
1286: LD_INT 0
1288: EQUAL
1289: IFFALSE 1298
// begin RaiseSailEvent ( 2 ) ;
1291: LD_INT 2
1293: PPUSH
1294: CALL_OW 427
// end ; if game_time >= [ 50 50$00 , 62 62$30 , 75 75$00 ] [ game_difficulty ] and meeting_end = false then
1298: LD_EXP 3
1302: PUSH
1303: LD_INT 105000
1305: PUSH
1306: LD_INT 131250
1308: PUSH
1309: LD_INT 157500
1311: PUSH
1312: EMPTY
1313: LIST
1314: LIST
1315: LIST
1316: PUSH
1317: LD_EXP 2
1321: ARRAY
1322: GREATEREQUAL
1323: PUSH
1324: LD_EXP 29
1328: PUSH
1329: LD_INT 0
1331: EQUAL
1332: AND
1333: IFFALSE 1350
// begin meeting_end := true ;
1335: LD_ADDR_EXP 29
1339: PUSH
1340: LD_INT 1
1342: ST_TO_ADDR
// RaiseSailEvent ( 200 ) ;
1343: LD_INT 200
1345: PPUSH
1346: CALL_OW 427
// end ; if meeting_time = 0 0$00 and meeting_arive = false then
1350: LD_EXP 30
1354: PUSH
1355: LD_INT 0
1357: EQUAL
1358: PUSH
1359: LD_EXP 27
1363: PUSH
1364: LD_INT 0
1366: EQUAL
1367: AND
1368: IFFALSE 1392
// begin meeting_arive := true ;
1370: LD_ADDR_EXP 27
1374: PUSH
1375: LD_INT 1
1377: ST_TO_ADDR
// game_strings := [ ] ;
1378: LD_ADDR_EXP 6
1382: PUSH
1383: EMPTY
1384: ST_TO_ADDR
// RaiseSailEvent ( 10 ) ;
1385: LD_INT 10
1387: PPUSH
1388: CALL_OW 427
// end ; if meeting_arive then
1392: LD_EXP 27
1396: IFFALSE 2195
// begin if arabian_attack = false and tick mod 4200 = 0 then
1398: LD_EXP 38
1402: PUSH
1403: LD_INT 0
1405: EQUAL
1406: PUSH
1407: LD_OWVAR 1
1411: PUSH
1412: LD_INT 4200
1414: MOD
1415: PUSH
1416: LD_INT 0
1418: EQUAL
1419: AND
1420: IFFALSE 1473
// begin p := Rand ( 1 , 100 ) ;
1422: LD_ADDR_VAR 0 2
1426: PUSH
1427: LD_INT 1
1429: PPUSH
1430: LD_INT 100
1432: PPUSH
1433: CALL_OW 12
1437: ST_TO_ADDR
// if p <= [ 80 , 85 , 90 ] [ game_difficulty ] then
1438: LD_VAR 0 2
1442: PUSH
1443: LD_INT 80
1445: PUSH
1446: LD_INT 85
1448: PUSH
1449: LD_INT 90
1451: PUSH
1452: EMPTY
1453: LIST
1454: LIST
1455: LIST
1456: PUSH
1457: LD_EXP 2
1461: ARRAY
1462: LESSEQUAL
1463: IFFALSE 1473
// arabian_attack := true ;
1465: LD_ADDR_EXP 38
1469: PUSH
1470: LD_INT 1
1472: ST_TO_ADDR
// end ; if russian_trade = false and russian_attack = false and tick > 52500 then
1473: LD_EXP 43
1477: PUSH
1478: LD_INT 0
1480: EQUAL
1481: PUSH
1482: LD_EXP 39
1486: PUSH
1487: LD_INT 0
1489: EQUAL
1490: AND
1491: PUSH
1492: LD_OWVAR 1
1496: PUSH
1497: LD_INT 52500
1499: GREATER
1500: AND
1501: IFFALSE 1572
// begin russian_trade = true ;
1503: LD_ADDR_EXP 43
1507: PUSH
1508: LD_INT 1
1510: ST_TO_ADDR
// DialogueOn ;
1511: CALL_OW 6
// SayRadio ( ru_comander , DS-DR-RTr ) ;
1515: LD_EXP 47
1519: PPUSH
1520: LD_STRING DS-DR-RTr
1522: PPUSH
1523: CALL_OW 94
// Say ( l_cmndr , DS-DC-RTr ) ;
1527: LD_EXP 49
1531: PPUSH
1532: LD_STRING DS-DC-RTr
1534: PPUSH
1535: CALL_OW 88
// SayRadio ( ru_comander , DS-DR-RTr2 ) ;
1539: LD_EXP 47
1543: PPUSH
1544: LD_STRING DS-DR-RTr2
1546: PPUSH
1547: CALL_OW 94
// DialogueOff ;
1551: CALL_OW 7
// ChangeMissionObjectives ( DS-T2 ) ;
1555: LD_STRING DS-T2
1557: PPUSH
1558: CALL_OW 337
// SetAreaMapShow ( tree , 1 ) ;
1562: LD_INT 10
1564: PPUSH
1565: LD_INT 1
1567: PPUSH
1568: CALL_OW 424
// end ; if russian_trade and cargo_ok = false and russian_timer > 0 0$00 then
1572: LD_EXP 43
1576: PUSH
1577: LD_EXP 35
1581: PUSH
1582: LD_INT 0
1584: EQUAL
1585: AND
1586: PUSH
1587: LD_EXP 31
1591: PUSH
1592: LD_INT 0
1594: GREATER
1595: AND
1596: IFFALSE 1845
// begin if FilterUnitsInArea ( tree , ( [ [ f_empty ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] , [ f_not , [ f_control , control_remote ] ] ] ) ) > 0 then
1598: LD_INT 10
1600: PPUSH
1601: LD_INT 58
1603: PUSH
1604: EMPTY
1605: LIST
1606: PUSH
1607: LD_INT 2
1609: PUSH
1610: LD_INT 34
1612: PUSH
1613: LD_INT 32
1615: PUSH
1616: EMPTY
1617: LIST
1618: LIST
1619: PUSH
1620: LD_INT 34
1622: PUSH
1623: LD_INT 12
1625: PUSH
1626: EMPTY
1627: LIST
1628: LIST
1629: PUSH
1630: EMPTY
1631: LIST
1632: LIST
1633: LIST
1634: PUSH
1635: LD_INT 3
1637: PUSH
1638: LD_INT 33
1640: PUSH
1641: LD_INT 2
1643: PUSH
1644: EMPTY
1645: LIST
1646: LIST
1647: PUSH
1648: EMPTY
1649: LIST
1650: LIST
1651: PUSH
1652: EMPTY
1653: LIST
1654: LIST
1655: LIST
1656: PPUSH
1657: CALL_OW 70
1661: PUSH
1662: LD_INT 0
1664: GREATER
1665: IFFALSE 1845
// if GetCargo ( FilterUnitsInArea ( tree , ( [ [ f_empty ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] , [ f_not , [ f_control , control_remote ] ] ] ) ) [ 1 ] , mat_siberit ) = 100 then
1667: LD_INT 10
1669: PPUSH
1670: LD_INT 58
1672: PUSH
1673: EMPTY
1674: LIST
1675: PUSH
1676: LD_INT 2
1678: PUSH
1679: LD_INT 34
1681: PUSH
1682: LD_INT 32
1684: PUSH
1685: EMPTY
1686: LIST
1687: LIST
1688: PUSH
1689: LD_INT 34
1691: PUSH
1692: LD_INT 12
1694: PUSH
1695: EMPTY
1696: LIST
1697: LIST
1698: PUSH
1699: EMPTY
1700: LIST
1701: LIST
1702: LIST
1703: PUSH
1704: LD_INT 3
1706: PUSH
1707: LD_INT 33
1709: PUSH
1710: LD_INT 2
1712: PUSH
1713: EMPTY
1714: LIST
1715: LIST
1716: PUSH
1717: EMPTY
1718: LIST
1719: LIST
1720: PUSH
1721: EMPTY
1722: LIST
1723: LIST
1724: LIST
1725: PPUSH
1726: CALL_OW 70
1730: PUSH
1731: LD_INT 1
1733: ARRAY
1734: PPUSH
1735: LD_INT 3
1737: PPUSH
1738: CALL_OW 289
1742: PUSH
1743: LD_INT 100
1745: EQUAL
1746: IFFALSE 1845
// begin cargo_ok := true ;
1748: LD_ADDR_EXP 35
1752: PUSH
1753: LD_INT 1
1755: ST_TO_ADDR
// RemoveUnit ( FilterUnitsInArea ( tree , ( [ [ f_empty ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] , [ f_not , [ f_control , control_remote ] ] ] ) ) [ 1 ] ) ;
1756: LD_INT 10
1758: PPUSH
1759: LD_INT 58
1761: PUSH
1762: EMPTY
1763: LIST
1764: PUSH
1765: LD_INT 2
1767: PUSH
1768: LD_INT 34
1770: PUSH
1771: LD_INT 32
1773: PUSH
1774: EMPTY
1775: LIST
1776: LIST
1777: PUSH
1778: LD_INT 34
1780: PUSH
1781: LD_INT 12
1783: PUSH
1784: EMPTY
1785: LIST
1786: LIST
1787: PUSH
1788: EMPTY
1789: LIST
1790: LIST
1791: LIST
1792: PUSH
1793: LD_INT 3
1795: PUSH
1796: LD_INT 33
1798: PUSH
1799: LD_INT 2
1801: PUSH
1802: EMPTY
1803: LIST
1804: LIST
1805: PUSH
1806: EMPTY
1807: LIST
1808: LIST
1809: PUSH
1810: EMPTY
1811: LIST
1812: LIST
1813: LIST
1814: PPUSH
1815: CALL_OW 70
1819: PUSH
1820: LD_INT 1
1822: ARRAY
1823: PPUSH
1824: CALL_OW 64
// ChangeMissionObjectives ( DS-T2-out ) ;
1828: LD_STRING DS-T2-out
1830: PPUSH
1831: CALL_OW 337
// SetAreaMapShow ( tree , 0 ) ;
1835: LD_INT 10
1837: PPUSH
1838: LD_INT 0
1840: PPUSH
1841: CALL_OW 424
// end ; end ; if russian_attack = false and russian_trade and cargo_ok = false and russian_timer = 0 0$00 then
1845: LD_EXP 39
1849: PUSH
1850: LD_INT 0
1852: EQUAL
1853: PUSH
1854: LD_EXP 43
1858: AND
1859: PUSH
1860: LD_EXP 35
1864: PUSH
1865: LD_INT 0
1867: EQUAL
1868: AND
1869: PUSH
1870: LD_EXP 31
1874: PUSH
1875: LD_INT 0
1877: EQUAL
1878: AND
1879: IFFALSE 1906
// begin russian_attack := true ;
1881: LD_ADDR_EXP 39
1885: PUSH
1886: LD_INT 1
1888: ST_TO_ADDR
// ChangeMissionObjectives ( DS-T2-out ) ;
1889: LD_STRING DS-T2-out
1891: PPUSH
1892: CALL_OW 337
// SetAreaMapShow ( tree , 0 ) ;
1896: LD_INT 10
1898: PPUSH
1899: LD_INT 0
1901: PPUSH
1902: CALL_OW 424
// end ; if russian_trade = false and russian_attack = false and american_attack = false and tick mod 21000 = 0 then
1906: LD_EXP 43
1910: PUSH
1911: LD_INT 0
1913: EQUAL
1914: PUSH
1915: LD_EXP 39
1919: PUSH
1920: LD_INT 0
1922: EQUAL
1923: AND
1924: PUSH
1925: LD_EXP 40
1929: PUSH
1930: LD_INT 0
1932: EQUAL
1933: AND
1934: PUSH
1935: LD_OWVAR 1
1939: PUSH
1940: LD_INT 21000
1942: MOD
1943: PUSH
1944: LD_INT 0
1946: EQUAL
1947: AND
1948: IFFALSE 2001
// begin p := Rand ( 1 , 100 ) ;
1950: LD_ADDR_VAR 0 2
1954: PUSH
1955: LD_INT 1
1957: PPUSH
1958: LD_INT 100
1960: PPUSH
1961: CALL_OW 12
1965: ST_TO_ADDR
// if p <= [ 25 , 35 , 45 ] [ game_difficulty ] then
1966: LD_VAR 0 2
1970: PUSH
1971: LD_INT 25
1973: PUSH
1974: LD_INT 35
1976: PUSH
1977: LD_INT 45
1979: PUSH
1980: EMPTY
1981: LIST
1982: LIST
1983: LIST
1984: PUSH
1985: LD_EXP 2
1989: ARRAY
1990: LESSEQUAL
1991: IFFALSE 2001
// russian_attack := true ;
1993: LD_ADDR_EXP 39
1997: PUSH
1998: LD_INT 1
2000: ST_TO_ADDR
// end ; if american_help = false and american_attack = false and russian_attack = false and tick mod 31500 = 0 then
2001: LD_EXP 41
2005: PUSH
2006: LD_INT 0
2008: EQUAL
2009: PUSH
2010: LD_EXP 40
2014: PUSH
2015: LD_INT 0
2017: EQUAL
2018: AND
2019: PUSH
2020: LD_EXP 39
2024: PUSH
2025: LD_INT 0
2027: EQUAL
2028: AND
2029: PUSH
2030: LD_OWVAR 1
2034: PUSH
2035: LD_INT 31500
2037: MOD
2038: PUSH
2039: LD_INT 0
2041: EQUAL
2042: AND
2043: IFFALSE 2096
// begin p := Rand ( 1 , 100 ) ;
2045: LD_ADDR_VAR 0 2
2049: PUSH
2050: LD_INT 1
2052: PPUSH
2053: LD_INT 100
2055: PPUSH
2056: CALL_OW 12
2060: ST_TO_ADDR
// if p <= [ 22 , 33 , 44 ] [ game_difficulty ] then
2061: LD_VAR 0 2
2065: PUSH
2066: LD_INT 22
2068: PUSH
2069: LD_INT 33
2071: PUSH
2072: LD_INT 44
2074: PUSH
2075: EMPTY
2076: LIST
2077: LIST
2078: LIST
2079: PUSH
2080: LD_EXP 2
2084: ARRAY
2085: LESSEQUAL
2086: IFFALSE 2096
// american_attack := true ;
2088: LD_ADDR_EXP 40
2092: PUSH
2093: LD_INT 1
2095: ST_TO_ADDR
// end ; if american_attack = false and russian_attack = false and american_help = false and tick mod 21200 = 0 then
2096: LD_EXP 40
2100: PUSH
2101: LD_INT 0
2103: EQUAL
2104: PUSH
2105: LD_EXP 39
2109: PUSH
2110: LD_INT 0
2112: EQUAL
2113: AND
2114: PUSH
2115: LD_EXP 41
2119: PUSH
2120: LD_INT 0
2122: EQUAL
2123: AND
2124: PUSH
2125: LD_OWVAR 1
2129: PUSH
2130: LD_INT 21200
2132: MOD
2133: PUSH
2134: LD_INT 0
2136: EQUAL
2137: AND
2138: IFFALSE 2195
// begin p := Rand ( 1 , 100 ) ;
2140: LD_ADDR_VAR 0 2
2144: PUSH
2145: LD_INT 1
2147: PPUSH
2148: LD_INT 100
2150: PPUSH
2151: CALL_OW 12
2155: ST_TO_ADDR
// if p <= american_hchan then
2156: LD_VAR 0 2
2160: PUSH
2161: LD_EXP 36
2165: LESSEQUAL
2166: IFFALSE 2195
// begin american_help := true ;
2168: LD_ADDR_EXP 41
2172: PUSH
2173: LD_INT 1
2175: ST_TO_ADDR
// SayRadio ( am_comander , DS-amhelp ) ;
2176: LD_EXP 46
2180: PPUSH
2181: LD_STRING DS-amhelp
2183: PPUSH
2184: CALL_OW 94
// RaiseSailEvent ( 91 ) ;
2188: LD_INT 91
2190: PPUSH
2191: CALL_OW 427
// end ; end ; end ; if american_attack and american_timeing = 0 0$00 and FilterAllUnits ( [ f_side , 1 ] ) = 0 then
2195: LD_EXP 40
2199: PUSH
2200: LD_EXP 25
2204: PUSH
2205: LD_INT 0
2207: EQUAL
2208: AND
2209: PUSH
2210: LD_INT 22
2212: PUSH
2213: LD_INT 1
2215: PUSH
2216: EMPTY
2217: LIST
2218: LIST
2219: PPUSH
2220: CALL_OW 69
2224: PUSH
2225: LD_INT 0
2227: EQUAL
2228: AND
2229: IFFALSE 2331
// begin american_timeing := Rand ( 17 17$00 , 20 20$00 ) ;
2231: LD_ADDR_EXP 25
2235: PUSH
2236: LD_INT 35700
2238: PPUSH
2239: LD_INT 42000
2241: PPUSH
2242: CALL_OW 12
2246: ST_TO_ADDR
// SayRadio ( scout , DS-DZ-U ) ;
2247: LD_EXP 12
2251: PPUSH
2252: LD_STRING DS-DZ-U
2254: PPUSH
2255: CALL_OW 94
// Wait ( 0 0$33 ) ;
2259: LD_INT 1155
2261: PPUSH
2262: CALL_OW 67
// x := Rand ( 1 , 2 ) ;
2266: LD_ADDR_VAR 0 3
2270: PUSH
2271: LD_INT 1
2273: PPUSH
2274: LD_INT 2
2276: PPUSH
2277: CALL_OW 12
2281: ST_TO_ADDR
// case x of 1 :
2282: LD_VAR 0 3
2286: PUSH
2287: LD_INT 1
2289: DOUBLE
2290: EQUAL
2291: IFTRUE 2295
2293: GO 2305
2295: POP
// RaiseSailEvent ( 41 ) ; 2 :
2296: LD_INT 41
2298: PPUSH
2299: CALL_OW 427
2303: GO 2324
2305: LD_INT 2
2307: DOUBLE
2308: EQUAL
2309: IFTRUE 2313
2311: GO 2323
2313: POP
// RaiseSailEvent ( 42 ) ; end ;
2314: LD_INT 42
2316: PPUSH
2317: CALL_OW 427
2321: GO 2324
2323: POP
// RaiseSailEvent ( 42 ) ;
2324: LD_INT 42
2326: PPUSH
2327: CALL_OW 427
// end ; if russian_attack and russian_timeing = 0 0$00 and FilterAllUnits ( [ f_side , 3 ] ) = 0 then
2331: LD_EXP 39
2335: PUSH
2336: LD_EXP 24
2340: PUSH
2341: LD_INT 0
2343: EQUAL
2344: AND
2345: PUSH
2346: LD_INT 22
2348: PUSH
2349: LD_INT 3
2351: PUSH
2352: EMPTY
2353: LIST
2354: LIST
2355: PPUSH
2356: CALL_OW 69
2360: PUSH
2361: LD_INT 0
2363: EQUAL
2364: AND
2365: IFFALSE 2421
// begin russian_timeing := Rand ( 17 17$00 , 20 20$00 ) ;
2367: LD_ADDR_EXP 24
2371: PUSH
2372: LD_INT 35700
2374: PPUSH
2375: LD_INT 42000
2377: PPUSH
2378: CALL_OW 12
2382: ST_TO_ADDR
// SayRadio ( scout , DS-DZ-R ) ;
2383: LD_EXP 12
2387: PPUSH
2388: LD_STRING DS-DZ-R
2390: PPUSH
2391: CALL_OW 94
// Wait ( 0 0$45 ) ;
2395: LD_INT 1575
2397: PPUSH
2398: CALL_OW 67
// SayRadio ( ru_comander , DS-DR-R1 ) ;
2402: LD_EXP 47
2406: PPUSH
2407: LD_STRING DS-DR-R1
2409: PPUSH
2410: CALL_OW 94
// RaiseSailEvent ( 51 ) ;
2414: LD_INT 51
2416: PPUSH
2417: CALL_OW 427
// end ; if mission_time >= 10 10$00 and arabian_force < 10 then
2421: LD_EXP 34
2425: PUSH
2426: LD_INT 21000
2428: GREATEREQUAL
2429: PUSH
2430: LD_EXP 20
2434: PUSH
2435: LD_INT 10
2437: LESS
2438: AND
2439: IFFALSE 2463
// begin mission_time := 0 0$00 ;
2441: LD_ADDR_EXP 34
2445: PUSH
2446: LD_INT 0
2448: ST_TO_ADDR
// arabian_force := arabian_force + 1 ;
2449: LD_ADDR_EXP 20
2453: PUSH
2454: LD_EXP 20
2458: PUSH
2459: LD_INT 1
2461: PLUS
2462: ST_TO_ADDR
// end ; if arabian_timeing = 0 0$00 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_weapon , ar_control_tower ] ] ] ) = 0 then
2463: LD_EXP 23
2467: PUSH
2468: LD_INT 0
2470: EQUAL
2471: PUSH
2472: LD_INT 22
2474: PUSH
2475: LD_INT 2
2477: PUSH
2478: EMPTY
2479: LIST
2480: LIST
2481: PUSH
2482: LD_INT 3
2484: PUSH
2485: LD_INT 34
2487: PUSH
2488: LD_INT 31
2490: PUSH
2491: EMPTY
2492: LIST
2493: LIST
2494: PUSH
2495: EMPTY
2496: LIST
2497: LIST
2498: PUSH
2499: EMPTY
2500: LIST
2501: LIST
2502: PPUSH
2503: CALL_OW 69
2507: PUSH
2508: LD_INT 0
2510: EQUAL
2511: AND
2512: IFFALSE 2710
// begin arabian_timeing := 7 7$30 ;
2514: LD_ADDR_EXP 23
2518: PUSH
2519: LD_INT 15750
2521: ST_TO_ADDR
// x := Rand ( 1 , 3 ) ;
2522: LD_ADDR_VAR 0 3
2526: PUSH
2527: LD_INT 1
2529: PPUSH
2530: LD_INT 3
2532: PPUSH
2533: CALL_OW 12
2537: ST_TO_ADDR
// SayRadio ( scout , DS-DZ-H ) ;
2538: LD_EXP 12
2542: PPUSH
2543: LD_STRING DS-DZ-H
2545: PPUSH
2546: CALL_OW 94
// case x of 1 :
2550: LD_VAR 0 3
2554: PUSH
2555: LD_INT 1
2557: DOUBLE
2558: EQUAL
2559: IFTRUE 2563
2561: GO 2573
2563: POP
// RaiseSailEvent ( 31 ) ; 2 :
2564: LD_INT 31
2566: PPUSH
2567: CALL_OW 427
2571: GO 2610
2573: LD_INT 2
2575: DOUBLE
2576: EQUAL
2577: IFTRUE 2581
2579: GO 2591
2581: POP
// RaiseSailEvent ( 32 ) ; 3 :
2582: LD_INT 32
2584: PPUSH
2585: CALL_OW 427
2589: GO 2610
2591: LD_INT 3
2593: DOUBLE
2594: EQUAL
2595: IFTRUE 2599
2597: GO 2609
2599: POP
// RaiseSailEvent ( 33 ) ; end ;
2600: LD_INT 33
2602: PPUSH
2603: CALL_OW 427
2607: GO 2610
2609: POP
// RaiseSailEvent ( 33 ) ;
2610: LD_INT 33
2612: PPUSH
2613: CALL_OW 427
// if game_difficulty > 1 then
2617: LD_EXP 2
2621: PUSH
2622: LD_INT 1
2624: GREATER
2625: IFFALSE 2634
// RaiseSailEvent ( 33 ) ;
2627: LD_INT 33
2629: PPUSH
2630: CALL_OW 427
// if heike_dialog1 = false then
2634: LD_EXP 44
2638: PUSH
2639: LD_INT 0
2641: EQUAL
2642: IFFALSE 2673
// begin heike_dialog1 := true ;
2644: LD_ADDR_EXP 44
2648: PUSH
2649: LD_INT 1
2651: ST_TO_ADDR
// Wait ( 0 0$03 ) ;
2652: LD_INT 105
2654: PPUSH
2655: CALL_OW 67
// SayRadio ( ar_comander , heike1 ) ;
2659: LD_EXP 48
2663: PPUSH
2664: LD_STRING heike1
2666: PPUSH
2667: CALL_OW 94
// end else
2671: GO 2710
// if heike_dialog2 = false then
2673: LD_EXP 45
2677: PUSH
2678: LD_INT 0
2680: EQUAL
2681: IFFALSE 2710
// begin heike_dialog2 := true ;
2683: LD_ADDR_EXP 45
2687: PUSH
2688: LD_INT 1
2690: ST_TO_ADDR
// Wait ( 0 0$03 ) ;
2691: LD_INT 105
2693: PPUSH
2694: CALL_OW 67
// SayRadio ( ar_comander , heike2 ) ;
2698: LD_EXP 48
2702: PPUSH
2703: LD_STRING heike2
2705: PPUSH
2706: CALL_OW 94
// end ; end ; if FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) > 0 then
2710: LD_INT 22
2712: PUSH
2713: LD_INT 2
2715: PUSH
2716: EMPTY
2717: LIST
2718: LIST
2719: PUSH
2720: LD_INT 33
2722: PUSH
2723: LD_INT 2
2725: PUSH
2726: EMPTY
2727: LIST
2728: LIST
2729: PUSH
2730: EMPTY
2731: LIST
2732: LIST
2733: PPUSH
2734: CALL_OW 69
2738: PUSH
2739: LD_INT 0
2741: GREATER
2742: IFFALSE 2751
// ConnectWithTower ( 2 ) ;
2744: LD_INT 2
2746: PPUSH
2747: CALL 7119 0 1
// if FilterAllUnits ( [ [ [ f_side , 2 ] , [ f_not , [ f_weapon , ar_control_tower ] ] , [ f_not , [ f_hastask ] ] ] ] ) > 0 then
2751: LD_INT 22
2753: PUSH
2754: LD_INT 2
2756: PUSH
2757: EMPTY
2758: LIST
2759: LIST
2760: PUSH
2761: LD_INT 3
2763: PUSH
2764: LD_INT 34
2766: PUSH
2767: LD_INT 31
2769: PUSH
2770: EMPTY
2771: LIST
2772: LIST
2773: PUSH
2774: EMPTY
2775: LIST
2776: LIST
2777: PUSH
2778: LD_INT 3
2780: PUSH
2781: LD_INT 60
2783: PUSH
2784: EMPTY
2785: LIST
2786: PUSH
2787: EMPTY
2788: LIST
2789: LIST
2790: PUSH
2791: EMPTY
2792: LIST
2793: LIST
2794: LIST
2795: PUSH
2796: EMPTY
2797: LIST
2798: PPUSH
2799: CALL_OW 69
2803: PUSH
2804: LD_INT 0
2806: GREATER
2807: IFFALSE 2953
// begin filter := FilterAllUnits ( [ [ [ f_side , 2 ] , [ f_not , [ f_weapon , ar_control_tower ] ] , [ f_not , [ f_hastask ] ] ] ] ) ;
2809: LD_ADDR_VAR 0 4
2813: PUSH
2814: LD_INT 22
2816: PUSH
2817: LD_INT 2
2819: PUSH
2820: EMPTY
2821: LIST
2822: LIST
2823: PUSH
2824: LD_INT 3
2826: PUSH
2827: LD_INT 34
2829: PUSH
2830: LD_INT 31
2832: PUSH
2833: EMPTY
2834: LIST
2835: LIST
2836: PUSH
2837: EMPTY
2838: LIST
2839: LIST
2840: PUSH
2841: LD_INT 3
2843: PUSH
2844: LD_INT 60
2846: PUSH
2847: EMPTY
2848: LIST
2849: PUSH
2850: EMPTY
2851: LIST
2852: LIST
2853: PUSH
2854: EMPTY
2855: LIST
2856: LIST
2857: LIST
2858: PUSH
2859: EMPTY
2860: LIST
2861: PPUSH
2862: CALL_OW 69
2866: ST_TO_ADDR
// x := SpeedFilter ( FilterAllUnits ( [ f_enemy , 2 ] ) , 20 ) ;
2867: LD_ADDR_VAR 0 3
2871: PUSH
2872: LD_INT 81
2874: PUSH
2875: LD_INT 2
2877: PUSH
2878: EMPTY
2879: LIST
2880: LIST
2881: PPUSH
2882: CALL_OW 69
2886: PPUSH
2887: LD_INT 20
2889: PPUSH
2890: CALL 8502 0 2
2894: ST_TO_ADDR
// for i = 1 to filter do
2895: LD_ADDR_VAR 0 1
2899: PUSH
2900: DOUBLE
2901: LD_INT 1
2903: DEC
2904: ST_TO_ADDR
2905: LD_VAR 0 4
2909: PUSH
2910: FOR_TO
2911: IFFALSE 2951
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( x , filter [ i ] ) ) ;
2913: LD_VAR 0 4
2917: PUSH
2918: LD_VAR 0 1
2922: ARRAY
2923: PPUSH
2924: LD_VAR 0 3
2928: PPUSH
2929: LD_VAR 0 4
2933: PUSH
2934: LD_VAR 0 1
2938: ARRAY
2939: PPUSH
2940: CALL_OW 74
2944: PPUSH
2945: CALL_OW 115
2949: GO 2910
2951: POP
2952: POP
// end ; if FilterAllUnits ( [ [ [ f_side , 3 ] , [ f_not , [ f_hastask ] ] ] ] ) > 0 then
2953: LD_INT 22
2955: PUSH
2956: LD_INT 3
2958: PUSH
2959: EMPTY
2960: LIST
2961: LIST
2962: PUSH
2963: LD_INT 3
2965: PUSH
2966: LD_INT 60
2968: PUSH
2969: EMPTY
2970: LIST
2971: PUSH
2972: EMPTY
2973: LIST
2974: LIST
2975: PUSH
2976: EMPTY
2977: LIST
2978: LIST
2979: PUSH
2980: EMPTY
2981: LIST
2982: PPUSH
2983: CALL_OW 69
2987: PUSH
2988: LD_INT 0
2990: GREATER
2991: IFFALSE 3137
// begin filter := FilterAllUnits ( [ [ [ f_side , 3 ] , [ f_not , [ f_weapon , ar_control_tower ] ] , [ f_not , [ f_hastask ] ] ] ] ) ;
2993: LD_ADDR_VAR 0 4
2997: PUSH
2998: LD_INT 22
3000: PUSH
3001: LD_INT 3
3003: PUSH
3004: EMPTY
3005: LIST
3006: LIST
3007: PUSH
3008: LD_INT 3
3010: PUSH
3011: LD_INT 34
3013: PUSH
3014: LD_INT 31
3016: PUSH
3017: EMPTY
3018: LIST
3019: LIST
3020: PUSH
3021: EMPTY
3022: LIST
3023: LIST
3024: PUSH
3025: LD_INT 3
3027: PUSH
3028: LD_INT 60
3030: PUSH
3031: EMPTY
3032: LIST
3033: PUSH
3034: EMPTY
3035: LIST
3036: LIST
3037: PUSH
3038: EMPTY
3039: LIST
3040: LIST
3041: LIST
3042: PUSH
3043: EMPTY
3044: LIST
3045: PPUSH
3046: CALL_OW 69
3050: ST_TO_ADDR
// x := SpeedFilter ( FilterAllUnits ( [ f_enemy , 3 ] ) , 20 ) ;
3051: LD_ADDR_VAR 0 3
3055: PUSH
3056: LD_INT 81
3058: PUSH
3059: LD_INT 3
3061: PUSH
3062: EMPTY
3063: LIST
3064: LIST
3065: PPUSH
3066: CALL_OW 69
3070: PPUSH
3071: LD_INT 20
3073: PPUSH
3074: CALL 8502 0 2
3078: ST_TO_ADDR
// for i = 1 to filter do
3079: LD_ADDR_VAR 0 1
3083: PUSH
3084: DOUBLE
3085: LD_INT 1
3087: DEC
3088: ST_TO_ADDR
3089: LD_VAR 0 4
3093: PUSH
3094: FOR_TO
3095: IFFALSE 3135
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( x , filter [ i ] ) ) ;
3097: LD_VAR 0 4
3101: PUSH
3102: LD_VAR 0 1
3106: ARRAY
3107: PPUSH
3108: LD_VAR 0 3
3112: PPUSH
3113: LD_VAR 0 4
3117: PUSH
3118: LD_VAR 0 1
3122: ARRAY
3123: PPUSH
3124: CALL_OW 74
3128: PPUSH
3129: CALL_OW 115
3133: GO 3094
3135: POP
3136: POP
// end ; if FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] ] ] ) > 0 then
3137: LD_INT 22
3139: PUSH
3140: LD_INT 1
3142: PUSH
3143: EMPTY
3144: LIST
3145: LIST
3146: PUSH
3147: LD_INT 3
3149: PUSH
3150: LD_INT 60
3152: PUSH
3153: EMPTY
3154: LIST
3155: PUSH
3156: EMPTY
3157: LIST
3158: LIST
3159: PUSH
3160: EMPTY
3161: LIST
3162: LIST
3163: PUSH
3164: EMPTY
3165: LIST
3166: PPUSH
3167: CALL_OW 69
3171: PUSH
3172: LD_INT 0
3174: GREATER
3175: IFFALSE 3321
// begin filter := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_not , [ f_weapon , ar_control_tower ] ] , [ f_not , [ f_hastask ] ] ] ] ) ;
3177: LD_ADDR_VAR 0 4
3181: PUSH
3182: LD_INT 22
3184: PUSH
3185: LD_INT 1
3187: PUSH
3188: EMPTY
3189: LIST
3190: LIST
3191: PUSH
3192: LD_INT 3
3194: PUSH
3195: LD_INT 34
3197: PUSH
3198: LD_INT 31
3200: PUSH
3201: EMPTY
3202: LIST
3203: LIST
3204: PUSH
3205: EMPTY
3206: LIST
3207: LIST
3208: PUSH
3209: LD_INT 3
3211: PUSH
3212: LD_INT 60
3214: PUSH
3215: EMPTY
3216: LIST
3217: PUSH
3218: EMPTY
3219: LIST
3220: LIST
3221: PUSH
3222: EMPTY
3223: LIST
3224: LIST
3225: LIST
3226: PUSH
3227: EMPTY
3228: LIST
3229: PPUSH
3230: CALL_OW 69
3234: ST_TO_ADDR
// x := SpeedFilter ( FilterAllUnits ( [ f_enemy , 1 ] ) , 20 ) ;
3235: LD_ADDR_VAR 0 3
3239: PUSH
3240: LD_INT 81
3242: PUSH
3243: LD_INT 1
3245: PUSH
3246: EMPTY
3247: LIST
3248: LIST
3249: PPUSH
3250: CALL_OW 69
3254: PPUSH
3255: LD_INT 20
3257: PPUSH
3258: CALL 8502 0 2
3262: ST_TO_ADDR
// for i = 1 to filter do
3263: LD_ADDR_VAR 0 1
3267: PUSH
3268: DOUBLE
3269: LD_INT 1
3271: DEC
3272: ST_TO_ADDR
3273: LD_VAR 0 4
3277: PUSH
3278: FOR_TO
3279: IFFALSE 3319
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( x , filter [ i ] ) ) ;
3281: LD_VAR 0 4
3285: PUSH
3286: LD_VAR 0 1
3290: ARRAY
3291: PPUSH
3292: LD_VAR 0 3
3296: PPUSH
3297: LD_VAR 0 4
3301: PUSH
3302: LD_VAR 0 1
3306: ARRAY
3307: PPUSH
3308: CALL_OW 74
3312: PPUSH
3313: CALL_OW 115
3317: GO 3278
3319: POP
3320: POP
// end ; if FilterAllUnits ( [ [ [ f_side , 2 ] , [ f_weapon , ar_bio_bomb ] , [ f_not , [ f_lives , 700 ] ] ] ] ) > 0 then
3321: LD_INT 22
3323: PUSH
3324: LD_INT 2
3326: PUSH
3327: EMPTY
3328: LIST
3329: LIST
3330: PUSH
3331: LD_INT 34
3333: PUSH
3334: LD_EXP 56
3338: PUSH
3339: EMPTY
3340: LIST
3341: LIST
3342: PUSH
3343: LD_INT 3
3345: PUSH
3346: LD_INT 24
3348: PUSH
3349: LD_INT 700
3351: PUSH
3352: EMPTY
3353: LIST
3354: LIST
3355: PUSH
3356: EMPTY
3357: LIST
3358: LIST
3359: PUSH
3360: EMPTY
3361: LIST
3362: LIST
3363: LIST
3364: PUSH
3365: EMPTY
3366: LIST
3367: PPUSH
3368: CALL_OW 69
3372: PUSH
3373: LD_INT 0
3375: GREATER
3376: IFFALSE 3475
// begin filter := FilterAllUnits ( [ [ [ f_side , 2 ] , [ f_weapon , ar_bio_bomb ] , [ f_not , [ f_lives , 700 ] ] ] ] ) ;
3378: LD_ADDR_VAR 0 4
3382: PUSH
3383: LD_INT 22
3385: PUSH
3386: LD_INT 2
3388: PUSH
3389: EMPTY
3390: LIST
3391: LIST
3392: PUSH
3393: LD_INT 34
3395: PUSH
3396: LD_EXP 56
3400: PUSH
3401: EMPTY
3402: LIST
3403: LIST
3404: PUSH
3405: LD_INT 3
3407: PUSH
3408: LD_INT 24
3410: PUSH
3411: LD_INT 700
3413: PUSH
3414: EMPTY
3415: LIST
3416: LIST
3417: PUSH
3418: EMPTY
3419: LIST
3420: LIST
3421: PUSH
3422: EMPTY
3423: LIST
3424: LIST
3425: LIST
3426: PUSH
3427: EMPTY
3428: LIST
3429: PPUSH
3430: CALL_OW 69
3434: ST_TO_ADDR
// for i = 1 to filter do
3435: LD_ADDR_VAR 0 1
3439: PUSH
3440: DOUBLE
3441: LD_INT 1
3443: DEC
3444: ST_TO_ADDR
3445: LD_VAR 0 4
3449: PUSH
3450: FOR_TO
3451: IFFALSE 3473
// SetLives ( filter [ i ] , 1 ) ;
3453: LD_VAR 0 4
3457: PUSH
3458: LD_VAR 0 1
3462: ARRAY
3463: PPUSH
3464: LD_INT 1
3466: PPUSH
3467: CALL_OW 234
3471: GO 3450
3473: POP
3474: POP
// end ; end ; end_of_file
3475: PPOPN 4
3477: END
// export function Start_Mission ; begin
3478: LD_INT 0
3480: PPUSH
// PrepareLegion ;
3481: CALL 3522 0 0
// PrepareMeeting ;
3485: CALL 4139 0 0
// case Query ( DS-text-beg ) of 1 :
3489: LD_STRING DS-text-beg
3491: PPUSH
3492: CALL_OW 97
3496: PUSH
3497: LD_INT 1
3499: DOUBLE
3500: EQUAL
3501: IFTRUE 3505
3503: GO 3508
3505: POP
// ; end ;
3506: GO 3509
3508: POP
// game_on := true ;
3509: LD_ADDR_EXP 1
3513: PUSH
3514: LD_INT 1
3516: ST_TO_ADDR
// end ;
3517: LD_VAR 0 1
3521: RET
// export l_cmndr , l_skill , l_units ; function PrepareLegion ; var i , p , filter , team ; begin
3522: LD_INT 0
3524: PPUSH
3525: PPUSH
3526: PPUSH
3527: PPUSH
3528: PPUSH
// uc_side := 8 ;
3529: LD_ADDR_OWVAR 20
3533: PUSH
3534: LD_INT 8
3536: ST_TO_ADDR
// uc_nation := 2 ;
3537: LD_ADDR_OWVAR 21
3541: PUSH
3542: LD_INT 2
3544: ST_TO_ADDR
// l_skill := [ 7 , 6 , 5 ] [ difficulty ] ;
3545: LD_ADDR_EXP 50
3549: PUSH
3550: LD_INT 7
3552: PUSH
3553: LD_INT 6
3555: PUSH
3556: LD_INT 5
3558: PUSH
3559: EMPTY
3560: LIST
3561: LIST
3562: LIST
3563: PUSH
3564: LD_OWVAR 67
3568: ARRAY
3569: ST_TO_ADDR
// l_units := [ 8 , 7 , 6 ] [ difficulty ] ;
3570: LD_ADDR_EXP 51
3574: PUSH
3575: LD_INT 8
3577: PUSH
3578: LD_INT 7
3580: PUSH
3581: LD_INT 6
3583: PUSH
3584: EMPTY
3585: LIST
3586: LIST
3587: LIST
3588: PUSH
3589: LD_OWVAR 67
3593: ARRAY
3594: ST_TO_ADDR
// filter := [ ] ;
3595: LD_ADDR_VAR 0 4
3599: PUSH
3600: EMPTY
3601: ST_TO_ADDR
// hc_gallery := desert ;
3602: LD_ADDR_OWVAR 33
3606: PUSH
3607: LD_STRING desert
3609: ST_TO_ADDR
// hc_face_number := 1 ;
3610: LD_ADDR_OWVAR 34
3614: PUSH
3615: LD_INT 1
3617: ST_TO_ADDR
// hc_skills := [ l_skill + 2 , l_skill - 1 , l_skill , l_skill + 1 ] ;
3618: LD_ADDR_OWVAR 31
3622: PUSH
3623: LD_EXP 50
3627: PUSH
3628: LD_INT 2
3630: PLUS
3631: PUSH
3632: LD_EXP 50
3636: PUSH
3637: LD_INT 1
3639: MINUS
3640: PUSH
3641: LD_EXP 50
3645: PUSH
3646: LD_EXP 50
3650: PUSH
3651: LD_INT 1
3653: PLUS
3654: PUSH
3655: EMPTY
3656: LIST
3657: LIST
3658: LIST
3659: LIST
3660: ST_TO_ADDR
// hc_sex := sex_male ;
3661: LD_ADDR_OWVAR 27
3665: PUSH
3666: LD_INT 1
3668: ST_TO_ADDR
// hc_name := Henri Ruotz ;
3669: LD_ADDR_OWVAR 26
3673: PUSH
3674: LD_STRING Henri Ruotz
3676: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
3677: LD_ADDR_OWVAR 29
3681: PUSH
3682: LD_INT 10
3684: PUSH
3685: LD_INT 10
3687: PUSH
3688: EMPTY
3689: LIST
3690: LIST
3691: ST_TO_ADDR
// hc_class := 1 ;
3692: LD_ADDR_OWVAR 28
3696: PUSH
3697: LD_INT 1
3699: ST_TO_ADDR
// hc_importance := 100 ;
3700: LD_ADDR_OWVAR 32
3704: PUSH
3705: LD_INT 100
3707: ST_TO_ADDR
// l_cmndr := CreateHuman ;
3708: LD_ADDR_EXP 49
3712: PUSH
3713: CALL_OW 44
3717: ST_TO_ADDR
// hc_importance := 0 ;
3718: LD_ADDR_OWVAR 32
3722: PUSH
3723: LD_INT 0
3725: ST_TO_ADDR
// scout := PrepareHuman ( sex_male , 1 , 0 ) ;
3726: LD_ADDR_EXP 12
3730: PUSH
3731: LD_INT 1
3733: PPUSH
3734: LD_INT 1
3736: PPUSH
3737: LD_INT 0
3739: PPUSH
3740: CALL_OW 380
3744: ST_TO_ADDR
// for i = 1 to 4 do
3745: LD_ADDR_VAR 0 2
3749: PUSH
3750: DOUBLE
3751: LD_INT 1
3753: DEC
3754: ST_TO_ADDR
3755: LD_INT 4
3757: PUSH
3758: FOR_TO
3759: IFFALSE 3809
// for p = 1 to 6 do
3761: LD_ADDR_VAR 0 3
3765: PUSH
3766: DOUBLE
3767: LD_INT 1
3769: DEC
3770: ST_TO_ADDR
3771: LD_INT 6
3773: PUSH
3774: FOR_TO
3775: IFFALSE 3805
// filter := filter ^ CreateHumanWithClass ( i , l_skill ) ;
3777: LD_ADDR_VAR 0 4
3781: PUSH
3782: LD_VAR 0 4
3786: PUSH
3787: LD_VAR 0 2
3791: PPUSH
3792: LD_EXP 50
3796: PPUSH
3797: CALL 7303 0 2
3801: ADD
3802: ST_TO_ADDR
3803: GO 3774
3805: POP
3806: POP
3807: GO 3758
3809: POP
3810: POP
// team := CharacterSelection ( text , l_units , l_units , [ sel_change_class , l_cmndr , sel_changeable , sel_not_hired ] ^ filter , [ class_soldier , class_mechanic , class_engineer , class_scientistic , class_mortar ] ) ;
3811: LD_ADDR_VAR 0 5
3815: PUSH
3816: LD_STRING text
3818: PPUSH
3819: LD_EXP 51
3823: PPUSH
3824: LD_EXP 51
3828: PPUSH
3829: LD_INT -5
3831: PUSH
3832: LD_EXP 49
3836: PUSH
3837: LD_INT -3
3839: PUSH
3840: LD_INT -2
3842: PUSH
3843: EMPTY
3844: LIST
3845: LIST
3846: LIST
3847: LIST
3848: PUSH
3849: LD_VAR 0 4
3853: ADD
3854: PPUSH
3855: LD_INT 1
3857: PUSH
3858: LD_INT 3
3860: PUSH
3861: LD_INT 2
3863: PUSH
3864: LD_INT 4
3866: PUSH
3867: LD_INT 8
3869: PUSH
3870: EMPTY
3871: LIST
3872: LIST
3873: LIST
3874: LIST
3875: LIST
3876: PPUSH
3877: CALL_OW 42
3881: ST_TO_ADDR
// for i = 1 to l_units do
3882: LD_ADDR_VAR 0 2
3886: PUSH
3887: DOUBLE
3888: LD_INT 1
3890: DEC
3891: ST_TO_ADDR
3892: LD_EXP 51
3896: PUSH
3897: FOR_TO
3898: IFFALSE 3923
// PlaceUnitArea ( team [ i ] , legion_spawn , false ) ;
3900: LD_VAR 0 5
3904: PUSH
3905: LD_VAR 0 2
3909: ARRAY
3910: PPUSH
3911: LD_INT 1
3913: PPUSH
3914: LD_INT 0
3916: PPUSH
3917: CALL_OW 49
3921: GO 3897
3923: POP
3924: POP
// PlaceUnitArea ( l_cmndr , legion_spawn , false ) ;
3925: LD_EXP 49
3929: PPUSH
3930: LD_INT 1
3932: PPUSH
3933: LD_INT 0
3935: PPUSH
3936: CALL_OW 49
// end ;
3940: LD_VAR 0 1
3944: RET
// export function PlaceCamera ; begin
3945: LD_INT 0
3947: PPUSH
// PlaceSeeing ( 46 , 48 , 8 , 10 ) ;
3948: LD_INT 46
3950: PPUSH
3951: LD_INT 48
3953: PPUSH
3954: LD_INT 8
3956: PPUSH
3957: LD_INT 10
3959: PPUSH
3960: CALL_OW 330
// PlaceSeeing ( 58 , 66 , 8 , 10 ) ;
3964: LD_INT 58
3966: PPUSH
3967: LD_INT 66
3969: PPUSH
3970: LD_INT 8
3972: PPUSH
3973: LD_INT 10
3975: PPUSH
3976: CALL_OW 330
// PlaceSeeing ( 82 , 82 , 8 , 10 ) ;
3980: LD_INT 82
3982: PPUSH
3983: LD_INT 82
3985: PPUSH
3986: LD_INT 8
3988: PPUSH
3989: LD_INT 10
3991: PPUSH
3992: CALL_OW 330
// PlaceSeeing ( 107 , 79 , 8 , 10 ) ;
3996: LD_INT 107
3998: PPUSH
3999: LD_INT 79
4001: PPUSH
4002: LD_INT 8
4004: PPUSH
4005: LD_INT 10
4007: PPUSH
4008: CALL_OW 330
// PlaceSeeing ( 101 , 57 , 8 , 10 ) ;
4012: LD_INT 101
4014: PPUSH
4015: LD_INT 57
4017: PPUSH
4018: LD_INT 8
4020: PPUSH
4021: LD_INT 10
4023: PPUSH
4024: CALL_OW 330
// PlaceSeeing ( 85 , 32 , 8 , 10 ) ;
4028: LD_INT 85
4030: PPUSH
4031: LD_INT 32
4033: PPUSH
4034: LD_INT 8
4036: PPUSH
4037: LD_INT 10
4039: PPUSH
4040: CALL_OW 330
// PlaceSeeing ( 108 , 72 , 8 , 10 ) ;
4044: LD_INT 108
4046: PPUSH
4047: LD_INT 72
4049: PPUSH
4050: LD_INT 8
4052: PPUSH
4053: LD_INT 10
4055: PPUSH
4056: CALL_OW 330
// PlaceSeeing ( 124 , 74 , 8 , 10 ) ;
4060: LD_INT 124
4062: PPUSH
4063: LD_INT 74
4065: PPUSH
4066: LD_INT 8
4068: PPUSH
4069: LD_INT 10
4071: PPUSH
4072: CALL_OW 330
// PlaceSeeing ( 67 , 33 , 8 , 20 ) ;
4076: LD_INT 67
4078: PPUSH
4079: LD_INT 33
4081: PPUSH
4082: LD_INT 8
4084: PPUSH
4085: LD_INT 20
4087: PPUSH
4088: CALL_OW 330
// RemoveSeeing ( 67 , 33 , 8 ) ;
4092: LD_INT 67
4094: PPUSH
4095: LD_INT 33
4097: PPUSH
4098: LD_INT 8
4100: PPUSH
4101: CALL_OW 331
// PlaceSeeing ( 94 , 84 , 8 , 20 ) ;
4105: LD_INT 94
4107: PPUSH
4108: LD_INT 84
4110: PPUSH
4111: LD_INT 8
4113: PPUSH
4114: LD_INT 20
4116: PPUSH
4117: CALL_OW 330
// RemoveSeeing ( 94 , 84 , 8 ) ;
4121: LD_INT 94
4123: PPUSH
4124: LD_INT 84
4126: PPUSH
4127: LD_INT 8
4129: PPUSH
4130: CALL_OW 331
// end ;
4134: LD_VAR 0 1
4138: RET
// export function PrepareMeeting ; begin
4139: LD_INT 0
4141: PPUSH
// uc_side := 6 ;
4142: LD_ADDR_OWVAR 20
4146: PUSH
4147: LD_INT 6
4149: ST_TO_ADDR
// hc_gallery := desert ;
4150: LD_ADDR_OWVAR 33
4154: PUSH
4155: LD_STRING desert
4157: ST_TO_ADDR
// hc_face_number := 2 ;
4158: LD_ADDR_OWVAR 34
4162: PUSH
4163: LD_INT 2
4165: ST_TO_ADDR
// hc_name := Leopold Drass ;
4166: LD_ADDR_OWVAR 26
4170: PUSH
4171: LD_STRING Leopold Drass
4173: ST_TO_ADDR
// hc_class := 1 ;
4174: LD_ADDR_OWVAR 28
4178: PUSH
4179: LD_INT 1
4181: ST_TO_ADDR
// hc_sex := sex_male ;
4182: LD_ADDR_OWVAR 27
4186: PUSH
4187: LD_INT 1
4189: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
4190: LD_ADDR_OWVAR 29
4194: PUSH
4195: LD_INT 12
4197: PUSH
4198: LD_INT 12
4200: PUSH
4201: EMPTY
4202: LIST
4203: LIST
4204: ST_TO_ADDR
// Leopold := CreateHuman ;
4205: LD_ADDR_EXP 7
4209: PUSH
4210: CALL_OW 44
4214: ST_TO_ADDR
// PlaceUnitArea ( Leopold , north_spawn , false ) ;
4215: LD_EXP 7
4219: PPUSH
4220: LD_INT 3
4222: PPUSH
4223: LD_INT 0
4225: PPUSH
4226: CALL_OW 49
// end ; end_of_file
4230: LD_VAR 0 1
4234: RET
// on SailEvent ( num ) do var i , filter , un , p , area ;
4235: LD_INT 0
4237: PPUSH
4238: PPUSH
4239: PPUSH
4240: PPUSH
4241: PPUSH
// begin case num of 1 :
4242: LD_VAR 0 1
4246: PUSH
4247: LD_INT 1
4249: DOUBLE
4250: EQUAL
4251: IFTRUE 4255
4253: GO 4287
4255: POP
// begin ComMoveXY ( leopold , GetX ( l_cmndr ) , GetY ( l_cmndr ) ) ;
4256: LD_EXP 7
4260: PPUSH
4261: LD_EXP 49
4265: PPUSH
4266: CALL_OW 250
4270: PPUSH
4271: LD_EXP 49
4275: PPUSH
4276: CALL_OW 251
4280: PPUSH
4281: CALL_OW 111
// end ; 2 :
4285: GO 6705
4287: LD_INT 2
4289: DOUBLE
4290: EQUAL
4291: IFTRUE 4295
4293: GO 4404
4295: POP
// begin InGameOn ;
4296: CALL_OW 8
// meeting_start := true ;
4300: LD_ADDR_EXP 26
4304: PUSH
4305: LD_INT 1
4307: ST_TO_ADDR
// ComTurnUnit ( leopold , l_cmndr ) ;
4308: LD_EXP 7
4312: PPUSH
4313: LD_EXP 49
4317: PPUSH
4318: CALL_OW 119
// ComTurnUnit ( l_cmndr , leopold ) ;
4322: LD_EXP 49
4326: PPUSH
4327: LD_EXP 7
4331: PPUSH
4332: CALL_OW 119
// Say ( leopold , DS-DL-1 ) ;
4336: LD_EXP 7
4340: PPUSH
4341: LD_STRING DS-DL-1
4343: PPUSH
4344: CALL_OW 88
// Say ( l_cmndr , DS-DC-1 ) ;
4348: LD_EXP 49
4352: PPUSH
4353: LD_STRING DS-DC-1
4355: PPUSH
4356: CALL_OW 88
// Say ( leopold , DS-DL-2 ) ;
4360: LD_EXP 7
4364: PPUSH
4365: LD_STRING DS-DL-2
4367: PPUSH
4368: CALL_OW 88
// ComEnterUnit ( leopold , fort ) ;
4372: LD_EXP 7
4376: PPUSH
4377: LD_INT 23
4379: PPUSH
4380: CALL_OW 120
// InGameOff ;
4384: CALL_OW 9
// Wait ( 0 0$01 ) ;
4388: LD_INT 35
4390: PPUSH
4391: CALL_OW 67
// ChangeMissionObjectives ( DS-T1 ) ;
4395: LD_STRING DS-T1
4397: PPUSH
4398: CALL_OW 337
// end ; 10 :
4402: GO 6705
4404: LD_INT 10
4406: DOUBLE
4407: EQUAL
4408: IFTRUE 4412
4410: GO 4624
4412: POP
// begin uc_side := 6 ;
4413: LD_ADDR_OWVAR 20
4417: PUSH
4418: LD_INT 6
4420: ST_TO_ADDR
// uc_nation := 2 ;
4421: LD_ADDR_OWVAR 21
4425: PUSH
4426: LD_INT 2
4428: ST_TO_ADDR
// hc_gallery :=  ;
4429: LD_ADDR_OWVAR 33
4433: PUSH
4434: LD_STRING 
4436: ST_TO_ADDR
// hc_skills := [ skill + 2 , skill - 1 , skill , skill + 1 ] ;
4437: LD_ADDR_OWVAR 31
4441: PUSH
4442: LD_EXP 16
4446: PUSH
4447: LD_INT 2
4449: PLUS
4450: PUSH
4451: LD_EXP 16
4455: PUSH
4456: LD_INT 1
4458: MINUS
4459: PUSH
4460: LD_EXP 16
4464: PUSH
4465: LD_EXP 16
4469: PUSH
4470: LD_INT 1
4472: PLUS
4473: PUSH
4474: EMPTY
4475: LIST
4476: LIST
4477: LIST
4478: LIST
4479: ST_TO_ADDR
// hc_sex := sex_male ;
4480: LD_ADDR_OWVAR 27
4484: PUSH
4485: LD_INT 1
4487: ST_TO_ADDR
// hc_name := Samuel van Horn ;
4488: LD_ADDR_OWVAR 26
4492: PUSH
4493: LD_STRING Samuel van Horn
4495: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
4496: LD_ADDR_OWVAR 29
4500: PUSH
4501: LD_INT 11
4503: PUSH
4504: LD_INT 10
4506: PUSH
4507: EMPTY
4508: LIST
4509: LIST
4510: ST_TO_ADDR
// hc_class := 1 ;
4511: LD_ADDR_OWVAR 28
4515: PUSH
4516: LD_INT 1
4518: ST_TO_ADDR
// samuel := CreateHuman ;
4519: LD_ADDR_EXP 9
4523: PUSH
4524: CALL_OW 44
4528: ST_TO_ADDR
// PlaceUnitArea ( samuel , south_spawn , false ) ;
4529: LD_EXP 9
4533: PPUSH
4534: LD_INT 4
4536: PPUSH
4537: LD_INT 0
4539: PPUSH
4540: CALL_OW 49
// for i = 1 to 3 do
4544: LD_ADDR_VAR 0 2
4548: PUSH
4549: DOUBLE
4550: LD_INT 1
4552: DEC
4553: ST_TO_ADDR
4554: LD_INT 3
4556: PUSH
4557: FOR_TO
4558: IFFALSE 4585
// PlaceUnitArea ( CreateHumanWithClass ( class_mortar , skill ) , south_spawn , false ) ;
4560: LD_INT 8
4562: PPUSH
4563: LD_EXP 16
4567: PPUSH
4568: CALL 7303 0 2
4572: PPUSH
4573: LD_INT 4
4575: PPUSH
4576: LD_INT 0
4578: PPUSH
4579: CALL_OW 49
4583: GO 4557
4585: POP
4586: POP
// ComEnterUnit ( FilterAllUnits ( [ f_side , 6 ] ) diff [ leopold , fort ] , fort ) ;
4587: LD_INT 22
4589: PUSH
4590: LD_INT 6
4592: PUSH
4593: EMPTY
4594: LIST
4595: LIST
4596: PPUSH
4597: CALL_OW 69
4601: PUSH
4602: LD_EXP 7
4606: PUSH
4607: LD_INT 23
4609: PUSH
4610: EMPTY
4611: LIST
4612: LIST
4613: DIFF
4614: PPUSH
4615: LD_INT 23
4617: PPUSH
4618: CALL_OW 120
// end ; 3 :
4622: GO 6705
4624: LD_INT 3
4626: DOUBLE
4627: EQUAL
4628: IFTRUE 4632
4630: GO 4643
4632: POP
// begin arabian_attack := true ;
4633: LD_ADDR_EXP 38
4637: PUSH
4638: LD_INT 1
4640: ST_TO_ADDR
// end ; 4 :
4641: GO 6705
4643: LD_INT 4
4645: DOUBLE
4646: EQUAL
4647: IFTRUE 4651
4649: GO 4662
4651: POP
// begin american_attack := true ;
4652: LD_ADDR_EXP 40
4656: PUSH
4657: LD_INT 1
4659: ST_TO_ADDR
// end ; 5 :
4660: GO 6705
4662: LD_INT 5
4664: DOUBLE
4665: EQUAL
4666: IFTRUE 4670
4668: GO 4681
4670: POP
// begin russian_attack := true ;
4671: LD_ADDR_EXP 39
4675: PUSH
4676: LD_INT 1
4678: ST_TO_ADDR
// end ; 31 :
4679: GO 6705
4681: LD_INT 31
4683: DOUBLE
4684: EQUAL
4685: IFTRUE 4689
4687: GO 4964
4689: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
4690: LD_ADDR_VAR 0 6
4694: PUSH
4695: LD_EXP 15
4699: PUSH
4700: LD_INT 1
4702: PPUSH
4703: LD_EXP 15
4707: PPUSH
4708: CALL_OW 12
4712: ARRAY
4713: ST_TO_ADDR
// uc_side := 2 ;
4714: LD_ADDR_OWVAR 20
4718: PUSH
4719: LD_INT 2
4721: ST_TO_ADDR
// uc_nation := 2 ;
4722: LD_ADDR_OWVAR 21
4726: PUSH
4727: LD_INT 2
4729: ST_TO_ADDR
// for i = 1 to arabian_force do
4730: LD_ADDR_VAR 0 2
4734: PUSH
4735: DOUBLE
4736: LD_INT 1
4738: DEC
4739: ST_TO_ADDR
4740: LD_EXP 20
4744: PUSH
4745: FOR_TO
4746: IFFALSE 4825
// begin vc_chassis := ar_half_tracked ;
4748: LD_ADDR_OWVAR 37
4752: PUSH
4753: LD_INT 14
4755: ST_TO_ADDR
// vc_engine := engine_siberite ;
4756: LD_ADDR_OWVAR 39
4760: PUSH
4761: LD_INT 3
4763: ST_TO_ADDR
// vc_control := control_remote ;
4764: LD_ADDR_OWVAR 38
4768: PUSH
4769: LD_INT 2
4771: ST_TO_ADDR
// vc_weapon := ar_weapons [ Rand ( 1 , ar_weapons ) ] ;
4772: LD_ADDR_OWVAR 40
4776: PUSH
4777: LD_EXP 17
4781: PUSH
4782: LD_INT 1
4784: PPUSH
4785: LD_EXP 17
4789: PPUSH
4790: CALL_OW 12
4794: ARRAY
4795: ST_TO_ADDR
// un := CreateVehicle ;
4796: LD_ADDR_VAR 0 4
4800: PUSH
4801: CALL_OW 45
4805: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
4806: LD_VAR 0 4
4810: PPUSH
4811: LD_VAR 0 6
4815: PPUSH
4816: LD_INT 0
4818: PPUSH
4819: CALL_OW 49
// end ;
4823: GO 4745
4825: POP
4826: POP
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_manual ] ] ) < 2 then
4827: LD_INT 22
4829: PUSH
4830: LD_INT 2
4832: PUSH
4833: EMPTY
4834: LIST
4835: LIST
4836: PUSH
4837: LD_INT 33
4839: PUSH
4840: LD_INT 1
4842: PUSH
4843: EMPTY
4844: LIST
4845: LIST
4846: PUSH
4847: EMPTY
4848: LIST
4849: LIST
4850: PPUSH
4851: CALL_OW 69
4855: PUSH
4856: LD_INT 2
4858: LESS
4859: IFFALSE 4962
// for i = 1 to 2 do
4861: LD_ADDR_VAR 0 2
4865: PUSH
4866: DOUBLE
4867: LD_INT 1
4869: DEC
4870: ST_TO_ADDR
4871: LD_INT 2
4873: PUSH
4874: FOR_TO
4875: IFFALSE 4960
// begin vc_chassis := ar_half_tracked ;
4877: LD_ADDR_OWVAR 37
4881: PUSH
4882: LD_INT 14
4884: ST_TO_ADDR
// vc_engine := engine_siberite ;
4885: LD_ADDR_OWVAR 39
4889: PUSH
4890: LD_INT 3
4892: ST_TO_ADDR
// vc_control := control_manual ;
4893: LD_ADDR_OWVAR 38
4897: PUSH
4898: LD_INT 1
4900: ST_TO_ADDR
// vc_weapon := ar_control_tower ;
4901: LD_ADDR_OWVAR 40
4905: PUSH
4906: LD_INT 31
4908: ST_TO_ADDR
// un := CreateVehicle ;
4909: LD_ADDR_VAR 0 4
4913: PUSH
4914: CALL_OW 45
4918: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
4919: LD_VAR 0 4
4923: PPUSH
4924: LD_VAR 0 6
4928: PPUSH
4929: LD_INT 0
4931: PPUSH
4932: CALL_OW 49
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , skill ) , un ) ;
4936: LD_INT 3
4938: PPUSH
4939: LD_EXP 16
4943: PPUSH
4944: CALL 7303 0 2
4948: PPUSH
4949: LD_VAR 0 4
4953: PPUSH
4954: CALL_OW 52
// end ;
4958: GO 4874
4960: POP
4961: POP
// end ; 32 :
4962: GO 6705
4964: LD_INT 32
4966: DOUBLE
4967: EQUAL
4968: IFTRUE 4972
4970: GO 5345
4972: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
4973: LD_ADDR_VAR 0 6
4977: PUSH
4978: LD_EXP 15
4982: PUSH
4983: LD_INT 1
4985: PPUSH
4986: LD_EXP 15
4990: PPUSH
4991: CALL_OW 12
4995: ARRAY
4996: ST_TO_ADDR
// uc_side := 2 ;
4997: LD_ADDR_OWVAR 20
5001: PUSH
5002: LD_INT 2
5004: ST_TO_ADDR
// uc_nation := 2 ;
5005: LD_ADDR_OWVAR 21
5009: PUSH
5010: LD_INT 2
5012: ST_TO_ADDR
// for i = 1 to ( arabian_force - 2 ) do
5013: LD_ADDR_VAR 0 2
5017: PUSH
5018: DOUBLE
5019: LD_INT 1
5021: DEC
5022: ST_TO_ADDR
5023: LD_EXP 20
5027: PUSH
5028: LD_INT 2
5030: MINUS
5031: PUSH
5032: FOR_TO
5033: IFFALSE 5116
// begin vc_chassis := ar_half_tracked ;
5035: LD_ADDR_OWVAR 37
5039: PUSH
5040: LD_INT 14
5042: ST_TO_ADDR
// vc_engine := engine_siberite ;
5043: LD_ADDR_OWVAR 39
5047: PUSH
5048: LD_INT 3
5050: ST_TO_ADDR
// vc_control := control_remote ;
5051: LD_ADDR_OWVAR 38
5055: PUSH
5056: LD_INT 2
5058: ST_TO_ADDR
// vc_weapon := ar_weapons [ Rand ( 1 , ar_weapons - 1 ) ] ;
5059: LD_ADDR_OWVAR 40
5063: PUSH
5064: LD_EXP 17
5068: PUSH
5069: LD_INT 1
5071: PPUSH
5072: LD_EXP 17
5076: PUSH
5077: LD_INT 1
5079: MINUS
5080: PPUSH
5081: CALL_OW 12
5085: ARRAY
5086: ST_TO_ADDR
// un := CreateVehicle ;
5087: LD_ADDR_VAR 0 4
5091: PUSH
5092: CALL_OW 45
5096: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5097: LD_VAR 0 4
5101: PPUSH
5102: LD_VAR 0 6
5106: PPUSH
5107: LD_INT 0
5109: PPUSH
5110: CALL_OW 49
// end ;
5114: GO 5032
5116: POP
5117: POP
// for i = 1 to Rand ( 0 , 1 ) + [ 3 , 4 , 5 ] [ game_difficulty ] do
5118: LD_ADDR_VAR 0 2
5122: PUSH
5123: DOUBLE
5124: LD_INT 1
5126: DEC
5127: ST_TO_ADDR
5128: LD_INT 0
5130: PPUSH
5131: LD_INT 1
5133: PPUSH
5134: CALL_OW 12
5138: PUSH
5139: LD_INT 3
5141: PUSH
5142: LD_INT 4
5144: PUSH
5145: LD_INT 5
5147: PUSH
5148: EMPTY
5149: LIST
5150: LIST
5151: LIST
5152: PUSH
5153: LD_EXP 2
5157: ARRAY
5158: PLUS
5159: PUSH
5160: FOR_TO
5161: IFFALSE 5198
// begin uc_nation := 0 ;
5163: LD_ADDR_OWVAR 21
5167: PUSH
5168: LD_INT 0
5170: ST_TO_ADDR
// PlaceUnitArea ( CreateHumanWithClass ( 17 , skill ) , area , false ) ;
5171: LD_INT 17
5173: PPUSH
5174: LD_EXP 16
5178: PPUSH
5179: CALL 7303 0 2
5183: PPUSH
5184: LD_VAR 0 6
5188: PPUSH
5189: LD_INT 0
5191: PPUSH
5192: CALL_OW 49
// end ;
5196: GO 5160
5198: POP
5199: POP
// uc_nation := 2 ;
5200: LD_ADDR_OWVAR 21
5204: PUSH
5205: LD_INT 2
5207: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_manual ] ] ) < 2 then
5208: LD_INT 22
5210: PUSH
5211: LD_INT 2
5213: PUSH
5214: EMPTY
5215: LIST
5216: LIST
5217: PUSH
5218: LD_INT 33
5220: PUSH
5221: LD_INT 1
5223: PUSH
5224: EMPTY
5225: LIST
5226: LIST
5227: PUSH
5228: EMPTY
5229: LIST
5230: LIST
5231: PPUSH
5232: CALL_OW 69
5236: PUSH
5237: LD_INT 2
5239: LESS
5240: IFFALSE 5343
// for i = 1 to 2 do
5242: LD_ADDR_VAR 0 2
5246: PUSH
5247: DOUBLE
5248: LD_INT 1
5250: DEC
5251: ST_TO_ADDR
5252: LD_INT 2
5254: PUSH
5255: FOR_TO
5256: IFFALSE 5341
// begin vc_chassis := ar_half_tracked ;
5258: LD_ADDR_OWVAR 37
5262: PUSH
5263: LD_INT 14
5265: ST_TO_ADDR
// vc_engine := engine_siberite ;
5266: LD_ADDR_OWVAR 39
5270: PUSH
5271: LD_INT 3
5273: ST_TO_ADDR
// vc_control := control_manual ;
5274: LD_ADDR_OWVAR 38
5278: PUSH
5279: LD_INT 1
5281: ST_TO_ADDR
// vc_weapon := ar_control_tower ;
5282: LD_ADDR_OWVAR 40
5286: PUSH
5287: LD_INT 31
5289: ST_TO_ADDR
// un := CreateVehicle ;
5290: LD_ADDR_VAR 0 4
5294: PUSH
5295: CALL_OW 45
5299: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5300: LD_VAR 0 4
5304: PPUSH
5305: LD_VAR 0 6
5309: PPUSH
5310: LD_INT 0
5312: PPUSH
5313: CALL_OW 49
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , skill ) , un ) ;
5317: LD_INT 3
5319: PPUSH
5320: LD_EXP 16
5324: PPUSH
5325: CALL 7303 0 2
5329: PPUSH
5330: LD_VAR 0 4
5334: PPUSH
5335: CALL_OW 52
// end ;
5339: GO 5255
5341: POP
5342: POP
// end ; 33 :
5343: GO 6705
5345: LD_INT 33
5347: DOUBLE
5348: EQUAL
5349: IFTRUE 5353
5351: GO 5624
5353: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
5354: LD_ADDR_VAR 0 6
5358: PUSH
5359: LD_EXP 15
5363: PUSH
5364: LD_INT 1
5366: PPUSH
5367: LD_EXP 15
5371: PPUSH
5372: CALL_OW 12
5376: ARRAY
5377: ST_TO_ADDR
// uc_side := 2 ;
5378: LD_ADDR_OWVAR 20
5382: PUSH
5383: LD_INT 2
5385: ST_TO_ADDR
// uc_nation := 2 ;
5386: LD_ADDR_OWVAR 21
5390: PUSH
5391: LD_INT 2
5393: ST_TO_ADDR
// for i = 1 to ( arabian_force / 2 ) do
5394: LD_ADDR_VAR 0 2
5398: PUSH
5399: DOUBLE
5400: LD_INT 1
5402: DEC
5403: ST_TO_ADDR
5404: LD_EXP 20
5408: PUSH
5409: LD_INT 2
5411: DIVREAL
5412: PUSH
5413: FOR_TO
5414: IFFALSE 5519
// begin vc_chassis := ar_half_tracked ;
5416: LD_ADDR_OWVAR 37
5420: PUSH
5421: LD_INT 14
5423: ST_TO_ADDR
// vc_engine := engine_siberite ;
5424: LD_ADDR_OWVAR 39
5428: PUSH
5429: LD_INT 3
5431: ST_TO_ADDR
// vc_control := control_manual ;
5432: LD_ADDR_OWVAR 38
5436: PUSH
5437: LD_INT 1
5439: ST_TO_ADDR
// vc_weapon := ar_weapons [ Rand ( 1 , ar_weapons - 2 ) ] ;
5440: LD_ADDR_OWVAR 40
5444: PUSH
5445: LD_EXP 17
5449: PUSH
5450: LD_INT 1
5452: PPUSH
5453: LD_EXP 17
5457: PUSH
5458: LD_INT 2
5460: MINUS
5461: PPUSH
5462: CALL_OW 12
5466: ARRAY
5467: ST_TO_ADDR
// un := CreateVehicle ;
5468: LD_ADDR_VAR 0 4
5472: PUSH
5473: CALL_OW 45
5477: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5478: LD_VAR 0 4
5482: PPUSH
5483: LD_VAR 0 6
5487: PPUSH
5488: LD_INT 0
5490: PPUSH
5491: CALL_OW 49
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , skill ) , un ) ;
5495: LD_INT 3
5497: PPUSH
5498: LD_EXP 16
5502: PPUSH
5503: CALL 7303 0 2
5507: PPUSH
5508: LD_VAR 0 4
5512: PPUSH
5513: CALL_OW 52
// end ;
5517: GO 5413
5519: POP
5520: POP
// for i = 1 to ( arabian_force / 2 ) do
5521: LD_ADDR_VAR 0 2
5525: PUSH
5526: DOUBLE
5527: LD_INT 1
5529: DEC
5530: ST_TO_ADDR
5531: LD_EXP 20
5535: PUSH
5536: LD_INT 2
5538: DIVREAL
5539: PUSH
5540: FOR_TO
5541: IFFALSE 5620
// begin vc_chassis := ar_half_tracked ;
5543: LD_ADDR_OWVAR 37
5547: PUSH
5548: LD_INT 14
5550: ST_TO_ADDR
// vc_engine := engine_siberite ;
5551: LD_ADDR_OWVAR 39
5555: PUSH
5556: LD_INT 3
5558: ST_TO_ADDR
// vc_control := control_apeman ;
5559: LD_ADDR_OWVAR 38
5563: PUSH
5564: LD_INT 5
5566: ST_TO_ADDR
// vc_weapon := ar_weapons [ Rand ( 2 , ar_weapons ) ] ;
5567: LD_ADDR_OWVAR 40
5571: PUSH
5572: LD_EXP 17
5576: PUSH
5577: LD_INT 2
5579: PPUSH
5580: LD_EXP 17
5584: PPUSH
5585: CALL_OW 12
5589: ARRAY
5590: ST_TO_ADDR
// un := CreateVehicle ;
5591: LD_ADDR_VAR 0 4
5595: PUSH
5596: CALL_OW 45
5600: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5601: LD_VAR 0 4
5605: PPUSH
5606: LD_VAR 0 6
5610: PPUSH
5611: LD_INT 0
5613: PPUSH
5614: CALL_OW 49
// end ;
5618: GO 5540
5620: POP
5621: POP
// end ; 41 :
5622: GO 6705
5624: LD_INT 41
5626: DOUBLE
5627: EQUAL
5628: IFTRUE 5632
5630: GO 5776
5632: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
5633: LD_ADDR_VAR 0 6
5637: PUSH
5638: LD_EXP 15
5642: PUSH
5643: LD_INT 1
5645: PPUSH
5646: LD_EXP 15
5650: PPUSH
5651: CALL_OW 12
5655: ARRAY
5656: ST_TO_ADDR
// uc_side := 1 ;
5657: LD_ADDR_OWVAR 20
5661: PUSH
5662: LD_INT 1
5664: ST_TO_ADDR
// uc_nation := 1 ;
5665: LD_ADDR_OWVAR 21
5669: PUSH
5670: LD_INT 1
5672: ST_TO_ADDR
// for i = 1 to american_force do
5673: LD_ADDR_VAR 0 2
5677: PUSH
5678: DOUBLE
5679: LD_INT 1
5681: DEC
5682: ST_TO_ADDR
5683: LD_EXP 22
5687: PUSH
5688: FOR_TO
5689: IFFALSE 5772
// begin vc_chassis := us_morphling ;
5691: LD_ADDR_OWVAR 37
5695: PUSH
5696: LD_INT 5
5698: ST_TO_ADDR
// vc_engine := engine_siberite ;
5699: LD_ADDR_OWVAR 39
5703: PUSH
5704: LD_INT 3
5706: ST_TO_ADDR
// vc_control := control_computer ;
5707: LD_ADDR_OWVAR 38
5711: PUSH
5712: LD_INT 3
5714: ST_TO_ADDR
// vc_weapon := us_weapons [ Rand ( 1 , us_weapons - 1 ) ] ;
5715: LD_ADDR_OWVAR 40
5719: PUSH
5720: LD_EXP 19
5724: PUSH
5725: LD_INT 1
5727: PPUSH
5728: LD_EXP 19
5732: PUSH
5733: LD_INT 1
5735: MINUS
5736: PPUSH
5737: CALL_OW 12
5741: ARRAY
5742: ST_TO_ADDR
// un := CreateVehicle ;
5743: LD_ADDR_VAR 0 4
5747: PUSH
5748: CALL_OW 45
5752: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5753: LD_VAR 0 4
5757: PPUSH
5758: LD_VAR 0 6
5762: PPUSH
5763: LD_INT 0
5765: PPUSH
5766: CALL_OW 49
// end ;
5770: GO 5688
5772: POP
5773: POP
// end ; 42 :
5774: GO 6705
5776: LD_INT 42
5778: DOUBLE
5779: EQUAL
5780: IFTRUE 5784
5782: GO 5924
5784: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
5785: LD_ADDR_VAR 0 6
5789: PUSH
5790: LD_EXP 15
5794: PUSH
5795: LD_INT 1
5797: PPUSH
5798: LD_EXP 15
5802: PPUSH
5803: CALL_OW 12
5807: ARRAY
5808: ST_TO_ADDR
// uc_side := 1 ;
5809: LD_ADDR_OWVAR 20
5813: PUSH
5814: LD_INT 1
5816: ST_TO_ADDR
// uc_nation := 1 ;
5817: LD_ADDR_OWVAR 21
5821: PUSH
5822: LD_INT 1
5824: ST_TO_ADDR
// for i = 1 to american_force do
5825: LD_ADDR_VAR 0 2
5829: PUSH
5830: DOUBLE
5831: LD_INT 1
5833: DEC
5834: ST_TO_ADDR
5835: LD_EXP 22
5839: PUSH
5840: FOR_TO
5841: IFFALSE 5920
// begin vc_chassis := us_morphling ;
5843: LD_ADDR_OWVAR 37
5847: PUSH
5848: LD_INT 5
5850: ST_TO_ADDR
// vc_engine := engine_siberite ;
5851: LD_ADDR_OWVAR 39
5855: PUSH
5856: LD_INT 3
5858: ST_TO_ADDR
// vc_control := control_computer ;
5859: LD_ADDR_OWVAR 38
5863: PUSH
5864: LD_INT 3
5866: ST_TO_ADDR
// vc_weapon := us_weapons [ Rand ( 1 , us_weapons ) ] ;
5867: LD_ADDR_OWVAR 40
5871: PUSH
5872: LD_EXP 19
5876: PUSH
5877: LD_INT 1
5879: PPUSH
5880: LD_EXP 19
5884: PPUSH
5885: CALL_OW 12
5889: ARRAY
5890: ST_TO_ADDR
// un := CreateVehicle ;
5891: LD_ADDR_VAR 0 4
5895: PUSH
5896: CALL_OW 45
5900: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5901: LD_VAR 0 4
5905: PPUSH
5906: LD_VAR 0 6
5910: PPUSH
5911: LD_INT 0
5913: PPUSH
5914: CALL_OW 49
// end ;
5918: GO 5840
5920: POP
5921: POP
// end ; 51 :
5922: GO 6705
5924: LD_INT 51
5926: DOUBLE
5927: EQUAL
5928: IFTRUE 5932
5930: GO 6072
5932: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
5933: LD_ADDR_VAR 0 6
5937: PUSH
5938: LD_EXP 15
5942: PUSH
5943: LD_INT 1
5945: PPUSH
5946: LD_EXP 15
5950: PPUSH
5951: CALL_OW 12
5955: ARRAY
5956: ST_TO_ADDR
// uc_side := 3 ;
5957: LD_ADDR_OWVAR 20
5961: PUSH
5962: LD_INT 3
5964: ST_TO_ADDR
// uc_nation := 3 ;
5965: LD_ADDR_OWVAR 21
5969: PUSH
5970: LD_INT 3
5972: ST_TO_ADDR
// for i = 1 to russian_force do
5973: LD_ADDR_VAR 0 2
5977: PUSH
5978: DOUBLE
5979: LD_INT 1
5981: DEC
5982: ST_TO_ADDR
5983: LD_EXP 21
5987: PUSH
5988: FOR_TO
5989: IFFALSE 6068
// begin vc_chassis := ru_heavy_tracked ;
5991: LD_ADDR_OWVAR 37
5995: PUSH
5996: LD_INT 24
5998: ST_TO_ADDR
// vc_engine := engine_siberite ;
5999: LD_ADDR_OWVAR 39
6003: PUSH
6004: LD_INT 3
6006: ST_TO_ADDR
// vc_control := control_computer ;
6007: LD_ADDR_OWVAR 38
6011: PUSH
6012: LD_INT 3
6014: ST_TO_ADDR
// vc_weapon := ru_weapons [ Rand ( 1 , ru_weapons ) ] ;
6015: LD_ADDR_OWVAR 40
6019: PUSH
6020: LD_EXP 18
6024: PUSH
6025: LD_INT 1
6027: PPUSH
6028: LD_EXP 18
6032: PPUSH
6033: CALL_OW 12
6037: ARRAY
6038: ST_TO_ADDR
// un := CreateVehicle ;
6039: LD_ADDR_VAR 0 4
6043: PUSH
6044: CALL_OW 45
6048: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
6049: LD_VAR 0 4
6053: PPUSH
6054: LD_VAR 0 6
6058: PPUSH
6059: LD_INT 0
6061: PPUSH
6062: CALL_OW 49
// end ;
6066: GO 5988
6068: POP
6069: POP
// end ; 91 :
6070: GO 6705
6072: LD_INT 91
6074: DOUBLE
6075: EQUAL
6076: IFTRUE 6080
6078: GO 6218
6080: POP
// begin uc_side := 8 ;
6081: LD_ADDR_OWVAR 20
6085: PUSH
6086: LD_INT 8
6088: ST_TO_ADDR
// uc_nation := 1 ;
6089: LD_ADDR_OWVAR 21
6093: PUSH
6094: LD_INT 1
6096: ST_TO_ADDR
// for i = 1 to [ 5 , 4 , 3 ] [ game_difficulty ] do
6097: LD_ADDR_VAR 0 2
6101: PUSH
6102: DOUBLE
6103: LD_INT 1
6105: DEC
6106: ST_TO_ADDR
6107: LD_INT 5
6109: PUSH
6110: LD_INT 4
6112: PUSH
6113: LD_INT 3
6115: PUSH
6116: EMPTY
6117: LIST
6118: LIST
6119: LIST
6120: PUSH
6121: LD_EXP 2
6125: ARRAY
6126: PUSH
6127: FOR_TO
6128: IFFALSE 6214
// begin vc_chassis := us_heavy_tracked ;
6130: LD_ADDR_OWVAR 37
6134: PUSH
6135: LD_INT 4
6137: ST_TO_ADDR
// vc_engine := engine_siberite ;
6138: LD_ADDR_OWVAR 39
6142: PUSH
6143: LD_INT 3
6145: ST_TO_ADDR
// vc_control := control_computer ;
6146: LD_ADDR_OWVAR 38
6150: PUSH
6151: LD_INT 3
6153: ST_TO_ADDR
// vc_weapon := [ us_double_gun , us_heavy_gun ] [ Rand ( 1 , 2 ) ] ;
6154: LD_ADDR_OWVAR 40
6158: PUSH
6159: LD_INT 5
6161: PUSH
6162: LD_INT 6
6164: PUSH
6165: EMPTY
6166: LIST
6167: LIST
6168: PUSH
6169: LD_INT 1
6171: PPUSH
6172: LD_INT 2
6174: PPUSH
6175: CALL_OW 12
6179: ARRAY
6180: ST_TO_ADDR
// un := CreateVehicle ;
6181: LD_ADDR_VAR 0 4
6185: PUSH
6186: CALL_OW 45
6190: ST_TO_ADDR
// PlaceUnitArea ( un , areas [ 1 ] , false ) ;
6191: LD_VAR 0 4
6195: PPUSH
6196: LD_EXP 15
6200: PUSH
6201: LD_INT 1
6203: ARRAY
6204: PPUSH
6205: LD_INT 0
6207: PPUSH
6208: CALL_OW 49
// end ;
6212: GO 6127
6214: POP
6215: POP
// end ; 92 :
6216: GO 6705
6218: LD_INT 92
6220: DOUBLE
6221: EQUAL
6222: IFTRUE 6226
6224: GO 6555
6226: POP
// begin uc_side := 5 ;
6227: LD_ADDR_OWVAR 20
6231: PUSH
6232: LD_INT 5
6234: ST_TO_ADDR
// uc_nation := 2 ;
6235: LD_ADDR_OWVAR 21
6239: PUSH
6240: LD_INT 2
6242: ST_TO_ADDR
// filter := [ ] ;
6243: LD_ADDR_VAR 0 3
6247: PUSH
6248: EMPTY
6249: ST_TO_ADDR
// InitHc ;
6250: CALL_OW 19
// PrepareHuman ( false , 1 , l_skill ) ;
6254: LD_INT 0
6256: PPUSH
6257: LD_INT 1
6259: PPUSH
6260: LD_EXP 50
6264: PPUSH
6265: CALL_OW 380
// un := CreateHuman ;
6269: LD_ADDR_VAR 0 4
6273: PUSH
6274: CALL_OW 44
6278: ST_TO_ADDR
// filter := filter ^ un ;
6279: LD_ADDR_VAR 0 3
6283: PUSH
6284: LD_VAR 0 3
6288: PUSH
6289: LD_VAR 0 4
6293: ADD
6294: ST_TO_ADDR
// for i = 1 to [ 4 , 3 , 2 ] [ game_difficulty ] do
6295: LD_ADDR_VAR 0 2
6299: PUSH
6300: DOUBLE
6301: LD_INT 1
6303: DEC
6304: ST_TO_ADDR
6305: LD_INT 4
6307: PUSH
6308: LD_INT 3
6310: PUSH
6311: LD_INT 2
6313: PUSH
6314: EMPTY
6315: LIST
6316: LIST
6317: LIST
6318: PUSH
6319: LD_EXP 2
6323: ARRAY
6324: PUSH
6325: FOR_TO
6326: IFFALSE 6364
// begin un := CreateHumanWithClass ( 1 , l_skill ) ;
6328: LD_ADDR_VAR 0 4
6332: PUSH
6333: LD_INT 1
6335: PPUSH
6336: LD_EXP 50
6340: PPUSH
6341: CALL 7303 0 2
6345: ST_TO_ADDR
// filter := filter ^ un ;
6346: LD_ADDR_VAR 0 3
6350: PUSH
6351: LD_VAR 0 3
6355: PUSH
6356: LD_VAR 0 4
6360: ADD
6361: ST_TO_ADDR
// end ;
6362: GO 6325
6364: POP
6365: POP
// DialogueOn ;
6366: CALL_OW 6
// if GetSex ( filter [ 1 ] ) = sex_male then
6370: LD_VAR 0 3
6374: PUSH
6375: LD_INT 1
6377: ARRAY
6378: PPUSH
6379: CALL_OW 258
6383: PUSH
6384: LD_INT 1
6386: EQUAL
6387: IFFALSE 6407
// SayRadio ( filter [ 1 ] , DS-DF-1 ) else
6389: LD_VAR 0 3
6393: PUSH
6394: LD_INT 1
6396: ARRAY
6397: PPUSH
6398: LD_STRING DS-DF-1
6400: PPUSH
6401: CALL_OW 94
6405: GO 6423
// SayRadio ( filter [ 1 ] , DS-DF-f1 ) ;
6407: LD_VAR 0 3
6411: PUSH
6412: LD_INT 1
6414: ARRAY
6415: PPUSH
6416: LD_STRING DS-DF-f1
6418: PPUSH
6419: CALL_OW 94
// case Query ( DS-dezert ) of 1 :
6423: LD_STRING DS-dezert
6425: PPUSH
6426: CALL_OW 97
6430: PUSH
6431: LD_INT 1
6433: DOUBLE
6434: EQUAL
6435: IFTRUE 6439
6437: GO 6454
6439: POP
// Say ( l_cmndr , DS-DC-dis ) ; 2 :
6440: LD_EXP 49
6444: PPUSH
6445: LD_STRING DS-DC-dis
6447: PPUSH
6448: CALL_OW 88
6452: GO 6549
6454: LD_INT 2
6456: DOUBLE
6457: EQUAL
6458: IFTRUE 6462
6460: GO 6548
6462: POP
// begin Say ( l_cmndr , DS-DC-acp ) ;
6463: LD_EXP 49
6467: PPUSH
6468: LD_STRING DS-DC-acp
6470: PPUSH
6471: CALL_OW 88
// for i = 1 to filter do
6475: LD_ADDR_VAR 0 2
6479: PUSH
6480: DOUBLE
6481: LD_INT 1
6483: DEC
6484: ST_TO_ADDR
6485: LD_VAR 0 3
6489: PUSH
6490: FOR_TO
6491: IFFALSE 6544
// begin SetSide ( filter [ i ] , 8 ) ;
6493: LD_VAR 0 3
6497: PUSH
6498: LD_VAR 0 2
6502: ARRAY
6503: PPUSH
6504: LD_INT 8
6506: PPUSH
6507: CALL_OW 235
// PlaceUnitArea ( filter [ i ] , south_spawn , false ) ;
6511: LD_VAR 0 3
6515: PUSH
6516: LD_VAR 0 2
6520: ARRAY
6521: PPUSH
6522: LD_INT 4
6524: PPUSH
6525: LD_INT 0
6527: PPUSH
6528: CALL_OW 49
// CenterNowOnXY ( 111 , 121 ) ;
6532: LD_INT 111
6534: PPUSH
6535: LD_INT 121
6537: PPUSH
6538: CALL_OW 86
// end ;
6542: GO 6490
6544: POP
6545: POP
// end ; end ;
6546: GO 6549
6548: POP
// DialogueOff ;
6549: CALL_OW 7
// end ; 101 :
6553: GO 6705
6555: LD_INT 101
6557: DOUBLE
6558: EQUAL
6559: IFTRUE 6563
6561: GO 6615
6563: POP
// begin CreateCratesArea ( Rand ( 3 , 5 ) , crates_area , true ) ;
6564: LD_INT 3
6566: PPUSH
6567: LD_INT 5
6569: PPUSH
6570: CALL_OW 12
6574: PPUSH
6575: LD_INT 9
6577: PPUSH
6578: LD_INT 1
6580: PPUSH
6581: CALL_OW 55
// Wait ( 0 0$11 ) ;
6585: LD_INT 385
6587: PPUSH
6588: CALL_OW 67
// CreateCratesArea ( Rand ( 3 , 5 ) , crates_area , true ) ;
6592: LD_INT 3
6594: PPUSH
6595: LD_INT 5
6597: PPUSH
6598: CALL_OW 12
6602: PPUSH
6603: LD_INT 9
6605: PPUSH
6606: LD_INT 1
6608: PPUSH
6609: CALL_OW 55
// end ; 200 :
6613: GO 6705
6615: LD_INT 200
6617: DOUBLE
6618: EQUAL
6619: IFTRUE 6623
6621: GO 6704
6623: POP
// begin Say ( Leopold , DS-end ) ;
6624: LD_EXP 7
6628: PPUSH
6629: LD_STRING DS-end
6631: PPUSH
6632: CALL_OW 88
// if Difficulty = 3 then
6636: LD_OWVAR 67
6640: PUSH
6641: LD_INT 3
6643: EQUAL
6644: IFFALSE 6653
// SetAchievement ( ACH_DESERT ) ;
6646: LD_STRING ACH_DESERT
6648: PPUSH
6649: CALL_OW 543
// music_nat := 5 ;
6653: LD_ADDR_OWVAR 71
6657: PUSH
6658: LD_INT 5
6660: ST_TO_ADDR
// AddMedal ( dsmed1 , 1 ) ;
6661: LD_STRING dsmed1
6663: PPUSH
6664: LD_INT 1
6666: PPUSH
6667: CALL_OW 101
// AddMedal ( dsmed1 , 1 ) ;
6671: LD_STRING dsmed1
6673: PPUSH
6674: LD_INT 1
6676: PPUSH
6677: CALL_OW 101
// AddMedal ( dsmed1 , 1 ) ;
6681: LD_STRING dsmed1
6683: PPUSH
6684: LD_INT 1
6686: PPUSH
6687: CALL_OW 101
// GiveMedals ( MAIN ) ;
6691: LD_STRING MAIN
6693: PPUSH
6694: CALL_OW 102
// YouWin ;
6698: CALL_OW 103
// end ; end ;
6702: GO 6705
6704: POP
// end ;
6705: PPOPN 6
6707: END
// on UnitGoesToRed ( un ) do begin if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) then
6708: LD_VAR 0 1
6712: PUSH
6713: LD_INT 22
6715: PUSH
6716: LD_INT 2
6718: PUSH
6719: EMPTY
6720: LIST
6721: LIST
6722: PUSH
6723: LD_INT 21
6725: PUSH
6726: LD_INT 2
6728: PUSH
6729: EMPTY
6730: LIST
6731: LIST
6732: PUSH
6733: EMPTY
6734: LIST
6735: LIST
6736: PPUSH
6737: CALL_OW 69
6741: IN
6742: IFFALSE 6867
// begin Wait ( Rand ( 0 0$03 , 0 0$06 ) ) ;
6744: LD_INT 105
6746: PPUSH
6747: LD_INT 210
6749: PPUSH
6750: CALL_OW 12
6754: PPUSH
6755: CALL_OW 67
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
6759: LD_VAR 0 1
6763: PPUSH
6764: CALL_OW 250
6768: PPUSH
6769: LD_VAR 0 1
6773: PPUSH
6774: CALL_OW 251
6778: PPUSH
6779: LD_INT 3
6781: PPUSH
6782: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
6786: LD_VAR 0 1
6790: PPUSH
6791: CALL_OW 250
6795: PPUSH
6796: LD_VAR 0 1
6800: PPUSH
6801: CALL_OW 251
6805: PPUSH
6806: LD_INT 3
6808: PPUSH
6809: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
6813: LD_VAR 0 1
6817: PPUSH
6818: CALL_OW 250
6822: PPUSH
6823: LD_VAR 0 1
6827: PPUSH
6828: CALL_OW 251
6832: PPUSH
6833: LD_INT 3
6835: PPUSH
6836: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
6840: LD_VAR 0 1
6844: PPUSH
6845: CALL_OW 250
6849: PPUSH
6850: LD_VAR 0 1
6854: PPUSH
6855: CALL_OW 251
6859: PPUSH
6860: LD_INT 3
6862: PPUSH
6863: CALL_OW 453
// end ; end ;
6867: PPOPN 1
6869: END
// on UnitDestroyed ( un ) do begin if un = fort then
6870: LD_VAR 0 1
6874: PUSH
6875: LD_INT 23
6877: EQUAL
6878: IFFALSE 6888
// fort_destroyed := true ;
6880: LD_ADDR_EXP 32
6884: PUSH
6885: LD_INT 1
6887: ST_TO_ADDR
// if un = l_cmndr then
6888: LD_VAR 0 1
6892: PUSH
6893: LD_EXP 49
6897: EQUAL
6898: IFFALSE 6908
// hero_died := true ;
6900: LD_ADDR_EXP 33
6904: PUSH
6905: LD_INT 1
6907: ST_TO_ADDR
// end ;
6908: PPOPN 1
6910: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin debug_strings := un ;
6911: LD_ADDR_OWVAR 48
6915: PUSH
6916: LD_VAR 0 1
6920: ST_TO_ADDR
// SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
6921: LD_VAR 0 1
6925: PPUSH
6926: LD_VAR 0 2
6930: PPUSH
6931: LD_VAR 0 3
6935: PPUSH
6936: CALL 10904 0 3
// end ;
6940: PPOPN 3
6942: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
6943: LD_VAR 0 1
6947: PPUSH
6948: CALL 11002 0 1
// end ; end_of_file
6952: PPOPN 1
6954: END
// export function RefreshTime ( time , bool ) ; begin
6955: LD_INT 0
6957: PPUSH
// if bool then
6958: LD_VAR 0 2
6962: IFFALSE 6980
// time := time + 0 0$01 else
6964: LD_ADDR_VAR 0 1
6968: PUSH
6969: LD_VAR 0 1
6973: PUSH
6974: LD_INT 35
6976: PLUS
6977: ST_TO_ADDR
6978: GO 6994
// time := time - 0 0$01 ;
6980: LD_ADDR_VAR 0 1
6984: PUSH
6985: LD_VAR 0 1
6989: PUSH
6990: LD_INT 35
6992: MINUS
6993: ST_TO_ADDR
// result := time ;
6994: LD_ADDR_VAR 0 3
6998: PUSH
6999: LD_VAR 0 1
7003: ST_TO_ADDR
// end ;
7004: LD_VAR 0 3
7008: RET
// export function MineExist ( side ) ; begin
7009: LD_INT 0
7011: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_siberite_mine ] ] ) > 0 then
7012: LD_INT 22
7014: PUSH
7015: LD_VAR 0 1
7019: PUSH
7020: EMPTY
7021: LIST
7022: LIST
7023: PUSH
7024: LD_INT 30
7026: PUSH
7027: LD_INT 30
7029: PUSH
7030: EMPTY
7031: LIST
7032: LIST
7033: PUSH
7034: EMPTY
7035: LIST
7036: LIST
7037: PPUSH
7038: CALL_OW 69
7042: PUSH
7043: LD_INT 0
7045: GREATER
7046: IFFALSE 7058
// result := true else
7048: LD_ADDR_VAR 0 2
7052: PUSH
7053: LD_INT 1
7055: ST_TO_ADDR
7056: GO 7066
// result := false ;
7058: LD_ADDR_VAR 0 2
7062: PUSH
7063: LD_INT 0
7065: ST_TO_ADDR
// end ;
7066: LD_VAR 0 2
7070: RET
// export function FacExist ( side ) ; begin
7071: LD_INT 0
7073: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_factory ] ] ) > 0 ;
7074: LD_ADDR_VAR 0 2
7078: PUSH
7079: LD_INT 22
7081: PUSH
7082: LD_VAR 0 1
7086: PUSH
7087: EMPTY
7088: LIST
7089: LIST
7090: PUSH
7091: LD_INT 30
7093: PUSH
7094: LD_INT 3
7096: PUSH
7097: EMPTY
7098: LIST
7099: LIST
7100: PUSH
7101: EMPTY
7102: LIST
7103: LIST
7104: PPUSH
7105: CALL_OW 69
7109: PUSH
7110: LD_INT 0
7112: GREATER
7113: ST_TO_ADDR
// end ;
7114: LD_VAR 0 2
7118: RET
// export function ConnectWithTower ( side ) ; var i , filter , tower ; begin
7119: LD_INT 0
7121: PPUSH
7122: PPUSH
7123: PPUSH
7124: PPUSH
// filter := FilterAllUnits ( [ [ f_side , side ] , [ f_control , control_remote ] , [ f_ok ] ] ) ;
7125: LD_ADDR_VAR 0 4
7129: PUSH
7130: LD_INT 22
7132: PUSH
7133: LD_VAR 0 1
7137: PUSH
7138: EMPTY
7139: LIST
7140: LIST
7141: PUSH
7142: LD_INT 33
7144: PUSH
7145: LD_INT 2
7147: PUSH
7148: EMPTY
7149: LIST
7150: LIST
7151: PUSH
7152: LD_INT 50
7154: PUSH
7155: EMPTY
7156: LIST
7157: PUSH
7158: EMPTY
7159: LIST
7160: LIST
7161: LIST
7162: PPUSH
7163: CALL_OW 69
7167: ST_TO_ADDR
// tower := FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , ar_control_tower ] ] ) ;
7168: LD_ADDR_VAR 0 5
7172: PUSH
7173: LD_INT 22
7175: PUSH
7176: LD_VAR 0 1
7180: PUSH
7181: EMPTY
7182: LIST
7183: LIST
7184: PUSH
7185: LD_INT 34
7187: PUSH
7188: LD_INT 31
7190: PUSH
7191: EMPTY
7192: LIST
7193: LIST
7194: PUSH
7195: EMPTY
7196: LIST
7197: LIST
7198: PPUSH
7199: CALL_OW 69
7203: ST_TO_ADDR
// if tower > 0 and filter > 0 then
7204: LD_VAR 0 5
7208: PUSH
7209: LD_INT 0
7211: GREATER
7212: PUSH
7213: LD_VAR 0 4
7217: PUSH
7218: LD_INT 0
7220: GREATER
7221: AND
7222: IFFALSE 7298
// for i = 1 to filter do
7224: LD_ADDR_VAR 0 3
7228: PUSH
7229: DOUBLE
7230: LD_INT 1
7232: DEC
7233: ST_TO_ADDR
7234: LD_VAR 0 4
7238: PUSH
7239: FOR_TO
7240: IFFALSE 7296
// if not IsControledBy ( filter [ i ] ) then
7242: LD_VAR 0 4
7246: PUSH
7247: LD_VAR 0 3
7251: ARRAY
7252: PPUSH
7253: CALL_OW 312
7257: NOT
7258: IFFALSE 7294
// ComLinkTo ( filter [ i ] , tower [ Rand ( 1 , tower ) ] ) ;
7260: LD_VAR 0 4
7264: PUSH
7265: LD_VAR 0 3
7269: ARRAY
7270: PPUSH
7271: LD_VAR 0 5
7275: PUSH
7276: LD_INT 1
7278: PPUSH
7279: LD_VAR 0 5
7283: PPUSH
7284: CALL_OW 12
7288: ARRAY
7289: PPUSH
7290: CALL_OW 135
7294: GO 7239
7296: POP
7297: POP
// end ;
7298: LD_VAR 0 2
7302: RET
// export function CreateHumanWithClass ( clas , lvl ) ; var skill_com , skill_eng , skill_mech , skill_sci , bonus ; begin
7303: LD_INT 0
7305: PPUSH
7306: PPUSH
7307: PPUSH
7308: PPUSH
7309: PPUSH
7310: PPUSH
// hc_class := clas ;
7311: LD_ADDR_OWVAR 28
7315: PUSH
7316: LD_VAR 0 1
7320: ST_TO_ADDR
// skill_com := ( lvl + Rand ( - 1 , 1 ) ) ;
7321: LD_ADDR_VAR 0 4
7325: PUSH
7326: LD_VAR 0 2
7330: PUSH
7331: LD_INT 1
7333: NEG
7334: PPUSH
7335: LD_INT 1
7337: PPUSH
7338: CALL_OW 12
7342: PLUS
7343: ST_TO_ADDR
// skill_eng := ( lvl + Rand ( - 1 , 1 ) ) ;
7344: LD_ADDR_VAR 0 5
7348: PUSH
7349: LD_VAR 0 2
7353: PUSH
7354: LD_INT 1
7356: NEG
7357: PPUSH
7358: LD_INT 1
7360: PPUSH
7361: CALL_OW 12
7365: PLUS
7366: ST_TO_ADDR
// skill_mech := ( lvl + Rand ( - 1 , 1 ) ) ;
7367: LD_ADDR_VAR 0 6
7371: PUSH
7372: LD_VAR 0 2
7376: PUSH
7377: LD_INT 1
7379: NEG
7380: PPUSH
7381: LD_INT 1
7383: PPUSH
7384: CALL_OW 12
7388: PLUS
7389: ST_TO_ADDR
// skill_sci := ( lvl + Rand ( - 1 , 1 ) ) ;
7390: LD_ADDR_VAR 0 7
7394: PUSH
7395: LD_VAR 0 2
7399: PUSH
7400: LD_INT 1
7402: NEG
7403: PPUSH
7404: LD_INT 1
7406: PPUSH
7407: CALL_OW 12
7411: PLUS
7412: ST_TO_ADDR
// if clas = 1 or clas = 9 or clas = class_sniper or clas = class_mortar then
7413: LD_VAR 0 1
7417: PUSH
7418: LD_INT 1
7420: EQUAL
7421: PUSH
7422: LD_VAR 0 1
7426: PUSH
7427: LD_INT 9
7429: EQUAL
7430: OR
7431: PUSH
7432: LD_VAR 0 1
7436: PUSH
7437: LD_INT 5
7439: EQUAL
7440: OR
7441: PUSH
7442: LD_VAR 0 1
7446: PUSH
7447: LD_INT 8
7449: EQUAL
7450: OR
7451: IFFALSE 7476
// bonus := [ 2 , 0 , 0 , 0 ] ;
7453: LD_ADDR_VAR 0 8
7457: PUSH
7458: LD_INT 2
7460: PUSH
7461: LD_INT 0
7463: PUSH
7464: LD_INT 0
7466: PUSH
7467: LD_INT 0
7469: PUSH
7470: EMPTY
7471: LIST
7472: LIST
7473: LIST
7474: LIST
7475: ST_TO_ADDR
// if clas = 2 then
7476: LD_VAR 0 1
7480: PUSH
7481: LD_INT 2
7483: EQUAL
7484: IFFALSE 7509
// bonus := [ 0 , 2 , 0 , 0 ] ;
7486: LD_ADDR_VAR 0 8
7490: PUSH
7491: LD_INT 0
7493: PUSH
7494: LD_INT 2
7496: PUSH
7497: LD_INT 0
7499: PUSH
7500: LD_INT 0
7502: PUSH
7503: EMPTY
7504: LIST
7505: LIST
7506: LIST
7507: LIST
7508: ST_TO_ADDR
// if clas = 3 then
7509: LD_VAR 0 1
7513: PUSH
7514: LD_INT 3
7516: EQUAL
7517: IFFALSE 7542
// bonus := [ 0 , 0 , 2 , 0 ] ;
7519: LD_ADDR_VAR 0 8
7523: PUSH
7524: LD_INT 0
7526: PUSH
7527: LD_INT 0
7529: PUSH
7530: LD_INT 2
7532: PUSH
7533: LD_INT 0
7535: PUSH
7536: EMPTY
7537: LIST
7538: LIST
7539: LIST
7540: LIST
7541: ST_TO_ADDR
// if clas = 4 then
7542: LD_VAR 0 1
7546: PUSH
7547: LD_INT 4
7549: EQUAL
7550: IFFALSE 7575
// bonus := [ 0 , 0 , 0 , 2 ] ;
7552: LD_ADDR_VAR 0 8
7556: PUSH
7557: LD_INT 0
7559: PUSH
7560: LD_INT 0
7562: PUSH
7563: LD_INT 0
7565: PUSH
7566: LD_INT 2
7568: PUSH
7569: EMPTY
7570: LIST
7571: LIST
7572: LIST
7573: LIST
7574: ST_TO_ADDR
// if clas > 4 and clas <> 9 and clas <> class_sniper and clas <> class_mortar then
7575: LD_VAR 0 1
7579: PUSH
7580: LD_INT 4
7582: GREATER
7583: PUSH
7584: LD_VAR 0 1
7588: PUSH
7589: LD_INT 9
7591: NONEQUAL
7592: AND
7593: PUSH
7594: LD_VAR 0 1
7598: PUSH
7599: LD_INT 5
7601: NONEQUAL
7602: AND
7603: PUSH
7604: LD_VAR 0 1
7608: PUSH
7609: LD_INT 8
7611: NONEQUAL
7612: AND
7613: IFFALSE 7638
// bonus := [ 0 , 0 , 0 , 0 ] ;
7615: LD_ADDR_VAR 0 8
7619: PUSH
7620: LD_INT 0
7622: PUSH
7623: LD_INT 0
7625: PUSH
7626: LD_INT 0
7628: PUSH
7629: LD_INT 0
7631: PUSH
7632: EMPTY
7633: LIST
7634: LIST
7635: LIST
7636: LIST
7637: ST_TO_ADDR
// hc_basic_skills := [ Rand ( 0 , 2 ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) ] ;
7638: LD_ADDR_OWVAR 30
7642: PUSH
7643: LD_INT 0
7645: PPUSH
7646: LD_INT 2
7648: PPUSH
7649: CALL_OW 12
7653: PUSH
7654: LD_INT 0
7656: PPUSH
7657: LD_INT 2
7659: PPUSH
7660: CALL_OW 12
7664: PUSH
7665: LD_INT 0
7667: PPUSH
7668: LD_INT 2
7670: PPUSH
7671: CALL_OW 12
7675: PUSH
7676: LD_INT 0
7678: PPUSH
7679: LD_INT 2
7681: PPUSH
7682: CALL_OW 12
7686: PUSH
7687: EMPTY
7688: LIST
7689: LIST
7690: LIST
7691: LIST
7692: ST_TO_ADDR
// hc_skills := [ skill_com + bonus [ 1 ] , skill_eng + bonus [ 2 ] , skill_mech + bonus [ 3 ] , skill_sci + bonus [ 4 ] ] ;
7693: LD_ADDR_OWVAR 31
7697: PUSH
7698: LD_VAR 0 4
7702: PUSH
7703: LD_VAR 0 8
7707: PUSH
7708: LD_INT 1
7710: ARRAY
7711: PLUS
7712: PUSH
7713: LD_VAR 0 5
7717: PUSH
7718: LD_VAR 0 8
7722: PUSH
7723: LD_INT 2
7725: ARRAY
7726: PLUS
7727: PUSH
7728: LD_VAR 0 6
7732: PUSH
7733: LD_VAR 0 8
7737: PUSH
7738: LD_INT 3
7740: ARRAY
7741: PLUS
7742: PUSH
7743: LD_VAR 0 7
7747: PUSH
7748: LD_VAR 0 8
7752: PUSH
7753: LD_INT 4
7755: ARRAY
7756: PLUS
7757: PUSH
7758: EMPTY
7759: LIST
7760: LIST
7761: LIST
7762: LIST
7763: ST_TO_ADDR
// hc_sex := Rand ( sex_male , sex_female ) ;
7764: LD_ADDR_OWVAR 27
7768: PUSH
7769: LD_INT 1
7771: PPUSH
7772: LD_INT 2
7774: PPUSH
7775: CALL_OW 12
7779: ST_TO_ADDR
// hc_gallery :=  ;
7780: LD_ADDR_OWVAR 33
7784: PUSH
7785: LD_STRING 
7787: ST_TO_ADDR
// hc_attr := [ Rand ( 8 , 12 ) , Rand ( 9 , 11 ) ] ;
7788: LD_ADDR_OWVAR 29
7792: PUSH
7793: LD_INT 8
7795: PPUSH
7796: LD_INT 12
7798: PPUSH
7799: CALL_OW 12
7803: PUSH
7804: LD_INT 9
7806: PPUSH
7807: LD_INT 11
7809: PPUSH
7810: CALL_OW 12
7814: PUSH
7815: EMPTY
7816: LIST
7817: LIST
7818: ST_TO_ADDR
// hc_name :=  ;
7819: LD_ADDR_OWVAR 26
7823: PUSH
7824: LD_STRING 
7826: ST_TO_ADDR
// result := CreateHuman ;
7827: LD_ADDR_VAR 0 3
7831: PUSH
7832: CALL_OW 44
7836: ST_TO_ADDR
// end ;
7837: LD_VAR 0 3
7841: RET
// export function GetSpeed ( unit ) ; begin
7842: LD_INT 0
7844: PPUSH
// result := GetProperties ( unit ) [ 1 ] ;
7845: LD_ADDR_VAR 0 2
7849: PUSH
7850: LD_VAR 0 1
7854: PPUSH
7855: CALL_OW 464
7859: PUSH
7860: LD_INT 1
7862: ARRAY
7863: ST_TO_ADDR
// end ;
7864: LD_VAR 0 2
7868: RET
// export function PrepareNature ( area , num1 , num2 , num3 , num4 ) ; var l , apeman , tiger , bird , horse ; begin
7869: LD_INT 0
7871: PPUSH
7872: PPUSH
7873: PPUSH
7874: PPUSH
7875: PPUSH
7876: PPUSH
// uc_nation = nation_nature ;
7877: LD_ADDR_OWVAR 21
7881: PUSH
7882: LD_INT 0
7884: ST_TO_ADDR
// uc_side = 0 ;
7885: LD_ADDR_OWVAR 20
7889: PUSH
7890: LD_INT 0
7892: ST_TO_ADDR
// l = 0 ;
7893: LD_ADDR_VAR 0 7
7897: PUSH
7898: LD_INT 0
7900: ST_TO_ADDR
// repeat begin uc_direction = Rand ( 0 , 5 ) ;
7901: LD_ADDR_OWVAR 24
7905: PUSH
7906: LD_INT 0
7908: PPUSH
7909: LD_INT 5
7911: PPUSH
7912: CALL_OW 12
7916: ST_TO_ADDR
// hc_agressivity = Rand ( - 5 , 0 ) ;
7917: LD_ADDR_OWVAR 35
7921: PUSH
7922: LD_INT 5
7924: NEG
7925: PPUSH
7926: LD_INT 0
7928: PPUSH
7929: CALL_OW 12
7933: ST_TO_ADDR
// hc_gallery =  ;
7934: LD_ADDR_OWVAR 33
7938: PUSH
7939: LD_STRING 
7941: ST_TO_ADDR
// hc_class = class_apeman ;
7942: LD_ADDR_OWVAR 28
7946: PUSH
7947: LD_INT 12
7949: ST_TO_ADDR
// hc_attr = [ Rand ( 11 , 13 ) , Rand ( 10 , 11 ) ] ;
7950: LD_ADDR_OWVAR 29
7954: PUSH
7955: LD_INT 11
7957: PPUSH
7958: LD_INT 13
7960: PPUSH
7961: CALL_OW 12
7965: PUSH
7966: LD_INT 10
7968: PPUSH
7969: LD_INT 11
7971: PPUSH
7972: CALL_OW 12
7976: PUSH
7977: EMPTY
7978: LIST
7979: LIST
7980: ST_TO_ADDR
// hc_sex = sex_male ;
7981: LD_ADDR_OWVAR 27
7985: PUSH
7986: LD_INT 1
7988: ST_TO_ADDR
// hc_skills = [ Rand ( 0 , 2 ) , 0 , 0 , 0 ] ;
7989: LD_ADDR_OWVAR 31
7993: PUSH
7994: LD_INT 0
7996: PPUSH
7997: LD_INT 2
7999: PPUSH
8000: CALL_OW 12
8004: PUSH
8005: LD_INT 0
8007: PUSH
8008: LD_INT 0
8010: PUSH
8011: LD_INT 0
8013: PUSH
8014: EMPTY
8015: LIST
8016: LIST
8017: LIST
8018: LIST
8019: ST_TO_ADDR
// apeman = CreateHuman ;
8020: LD_ADDR_VAR 0 8
8024: PUSH
8025: CALL_OW 44
8029: ST_TO_ADDR
// PlaceUnitArea ( apeman , area , false ) ;
8030: LD_VAR 0 8
8034: PPUSH
8035: LD_VAR 0 1
8039: PPUSH
8040: LD_INT 0
8042: PPUSH
8043: CALL_OW 49
// l = l + 1 ;
8047: LD_ADDR_VAR 0 7
8051: PUSH
8052: LD_VAR 0 7
8056: PUSH
8057: LD_INT 1
8059: PLUS
8060: ST_TO_ADDR
// end until l = num1 ;
8061: LD_VAR 0 7
8065: PUSH
8066: LD_VAR 0 2
8070: EQUAL
8071: IFFALSE 7901
// l = 0 ;
8073: LD_ADDR_VAR 0 7
8077: PUSH
8078: LD_INT 0
8080: ST_TO_ADDR
// repeat begin hc_agressivity = Rand ( 0 , 25 ) ;
8081: LD_ADDR_OWVAR 35
8085: PUSH
8086: LD_INT 0
8088: PPUSH
8089: LD_INT 25
8091: PPUSH
8092: CALL_OW 12
8096: ST_TO_ADDR
// hc_class = class_tiger ;
8097: LD_ADDR_OWVAR 28
8101: PUSH
8102: LD_INT 14
8104: ST_TO_ADDR
// hc_sex = sex_male ;
8105: LD_ADDR_OWVAR 27
8109: PUSH
8110: LD_INT 1
8112: ST_TO_ADDR
// hc_gallery = sandnature ;
8113: LD_ADDR_OWVAR 33
8117: PUSH
8118: LD_STRING sandnature
8120: ST_TO_ADDR
// hc_face_number = 3 ;
8121: LD_ADDR_OWVAR 34
8125: PUSH
8126: LD_INT 3
8128: ST_TO_ADDR
// tiger = CreateHuman ;
8129: LD_ADDR_VAR 0 9
8133: PUSH
8134: CALL_OW 44
8138: ST_TO_ADDR
// PlaceUnitArea ( tiger , area , false ) ;
8139: LD_VAR 0 9
8143: PPUSH
8144: LD_VAR 0 1
8148: PPUSH
8149: LD_INT 0
8151: PPUSH
8152: CALL_OW 49
// l = l + 1 ;
8156: LD_ADDR_VAR 0 7
8160: PUSH
8161: LD_VAR 0 7
8165: PUSH
8166: LD_INT 1
8168: PLUS
8169: ST_TO_ADDR
// end until l = num2 ;
8170: LD_VAR 0 7
8174: PUSH
8175: LD_VAR 0 3
8179: EQUAL
8180: IFFALSE 8081
// l = 0 ;
8182: LD_ADDR_VAR 0 7
8186: PUSH
8187: LD_INT 0
8189: ST_TO_ADDR
// repeat begin hc_class = class_phororhacos ;
8190: LD_ADDR_OWVAR 28
8194: PUSH
8195: LD_INT 18
8197: ST_TO_ADDR
// hc_gallery = sandnature ;
8198: LD_ADDR_OWVAR 33
8202: PUSH
8203: LD_STRING sandnature
8205: ST_TO_ADDR
// hc_face_number = 1 ;
8206: LD_ADDR_OWVAR 34
8210: PUSH
8211: LD_INT 1
8213: ST_TO_ADDR
// bird = CreateHuman ;
8214: LD_ADDR_VAR 0 10
8218: PUSH
8219: CALL_OW 44
8223: ST_TO_ADDR
// PlaceUnitAnywhere ( bird , false ) ;
8224: LD_VAR 0 10
8228: PPUSH
8229: LD_INT 0
8231: PPUSH
8232: CALL_OW 51
// l = l + 1 ;
8236: LD_ADDR_VAR 0 7
8240: PUSH
8241: LD_VAR 0 7
8245: PUSH
8246: LD_INT 1
8248: PLUS
8249: ST_TO_ADDR
// end until l = num3 ;
8250: LD_VAR 0 7
8254: PUSH
8255: LD_VAR 0 4
8259: EQUAL
8260: IFFALSE 8190
// l = 0 ;
8262: LD_ADDR_VAR 0 7
8266: PUSH
8267: LD_INT 0
8269: ST_TO_ADDR
// repeat begin hc_class = 21 ;
8270: LD_ADDR_OWVAR 28
8274: PUSH
8275: LD_INT 21
8277: ST_TO_ADDR
// hc_gallery = sandnature ;
8278: LD_ADDR_OWVAR 33
8282: PUSH
8283: LD_STRING sandnature
8285: ST_TO_ADDR
// hc_face_number = 5 ;
8286: LD_ADDR_OWVAR 34
8290: PUSH
8291: LD_INT 5
8293: ST_TO_ADDR
// horse := CreateHuman ;
8294: LD_ADDR_VAR 0 11
8298: PUSH
8299: CALL_OW 44
8303: ST_TO_ADDR
// PlaceUnitArea ( horse , area , false ) ;
8304: LD_VAR 0 11
8308: PPUSH
8309: LD_VAR 0 1
8313: PPUSH
8314: LD_INT 0
8316: PPUSH
8317: CALL_OW 49
// l = l + 1 ;
8321: LD_ADDR_VAR 0 7
8325: PUSH
8326: LD_VAR 0 7
8330: PUSH
8331: LD_INT 1
8333: PLUS
8334: ST_TO_ADDR
// end until l = num4 ;
8335: LD_VAR 0 7
8339: PUSH
8340: LD_VAR 0 5
8344: EQUAL
8345: IFFALSE 8270
// end ;
8347: LD_VAR 0 6
8351: RET
// export function PrepareComm ; begin
8352: LD_INT 0
8354: PPUSH
// uc_side := 1 ;
8355: LD_ADDR_OWVAR 20
8359: PUSH
8360: LD_INT 1
8362: ST_TO_ADDR
// uc_nation := 1 ;
8363: LD_ADDR_OWVAR 21
8367: PUSH
8368: LD_INT 1
8370: ST_TO_ADDR
// hc_gallery :=  ;
8371: LD_ADDR_OWVAR 33
8375: PUSH
8376: LD_STRING 
8378: ST_TO_ADDR
// hc_name :=  ;
8379: LD_ADDR_OWVAR 26
8383: PUSH
8384: LD_STRING 
8386: ST_TO_ADDR
// hc_class := 1 ;
8387: LD_ADDR_OWVAR 28
8391: PUSH
8392: LD_INT 1
8394: ST_TO_ADDR
// hc_sex := sex_male ;
8395: LD_ADDR_OWVAR 27
8399: PUSH
8400: LD_INT 1
8402: ST_TO_ADDR
// am_comander := CreateHuman ;
8403: LD_ADDR_EXP 46
8407: PUSH
8408: CALL_OW 44
8412: ST_TO_ADDR
// uc_side := 3 ;
8413: LD_ADDR_OWVAR 20
8417: PUSH
8418: LD_INT 3
8420: ST_TO_ADDR
// uc_nation := 3 ;
8421: LD_ADDR_OWVAR 21
8425: PUSH
8426: LD_INT 3
8428: ST_TO_ADDR
// ru_comander := CreateHuman ;
8429: LD_ADDR_EXP 47
8433: PUSH
8434: CALL_OW 44
8438: ST_TO_ADDR
// uc_side := 2 ;
8439: LD_ADDR_OWVAR 20
8443: PUSH
8444: LD_INT 2
8446: ST_TO_ADDR
// uc_nation := 2 ;
8447: LD_ADDR_OWVAR 21
8451: PUSH
8452: LD_INT 2
8454: ST_TO_ADDR
// hc_name := Heike Steyer ;
8455: LD_ADDR_OWVAR 26
8459: PUSH
8460: LD_STRING Heike Steyer
8462: ST_TO_ADDR
// hc_sex := sex_female ;
8463: LD_ADDR_OWVAR 27
8467: PUSH
8468: LD_INT 2
8470: ST_TO_ADDR
// hc_gallery := sandar ;
8471: LD_ADDR_OWVAR 33
8475: PUSH
8476: LD_STRING sandar
8478: ST_TO_ADDR
// hc_face_number := 14 ;
8479: LD_ADDR_OWVAR 34
8483: PUSH
8484: LD_INT 14
8486: ST_TO_ADDR
// ar_comander := CreateHuman ;
8487: LD_ADDR_EXP 48
8491: PUSH
8492: CALL_OW 44
8496: ST_TO_ADDR
// end ;
8497: LD_VAR 0 1
8501: RET
// export function SpeedFilter ( filter , speed ) ; var list , i ; begin
8502: LD_INT 0
8504: PPUSH
8505: PPUSH
8506: PPUSH
// list := [ ] ;
8507: LD_ADDR_VAR 0 4
8511: PUSH
8512: EMPTY
8513: ST_TO_ADDR
// for i = 1 to filter do
8514: LD_ADDR_VAR 0 5
8518: PUSH
8519: DOUBLE
8520: LD_INT 1
8522: DEC
8523: ST_TO_ADDR
8524: LD_VAR 0 1
8528: PUSH
8529: FOR_TO
8530: IFFALSE 8579
// if GetSpeed ( filter [ i ] ) < speed then
8532: LD_VAR 0 1
8536: PUSH
8537: LD_VAR 0 5
8541: ARRAY
8542: PPUSH
8543: CALL 7842 0 1
8547: PUSH
8548: LD_VAR 0 2
8552: LESS
8553: IFFALSE 8577
// list := list ^ filter [ i ] ;
8555: LD_ADDR_VAR 0 4
8559: PUSH
8560: LD_VAR 0 4
8564: PUSH
8565: LD_VAR 0 1
8569: PUSH
8570: LD_VAR 0 5
8574: ARRAY
8575: ADD
8576: ST_TO_ADDR
8577: GO 8529
8579: POP
8580: POP
// result := list ;
8581: LD_ADDR_VAR 0 3
8585: PUSH
8586: LD_VAR 0 4
8590: ST_TO_ADDR
// end ; end_of_file
8591: LD_VAR 0 3
8595: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; every 1 do
8596: GO 8598
8598: DISABLE
// begin ru_radar := 98 ;
8599: LD_ADDR_EXP 52
8603: PUSH
8604: LD_INT 98
8606: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
8607: LD_ADDR_EXP 53
8611: PUSH
8612: LD_INT 89
8614: ST_TO_ADDR
// us_hack := 99 ;
8615: LD_ADDR_EXP 54
8619: PUSH
8620: LD_INT 99
8622: ST_TO_ADDR
// us_artillery := 97 ;
8623: LD_ADDR_EXP 55
8627: PUSH
8628: LD_INT 97
8630: ST_TO_ADDR
// ar_bio_bomb := 91 ;
8631: LD_ADDR_EXP 56
8635: PUSH
8636: LD_INT 91
8638: ST_TO_ADDR
// end ; end_of_file end_of_file
8639: END
// export StreamModeActive , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun ; every 0 0$1 do
8640: GO 8642
8642: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
8643: LD_STRING initStreamRollete();
8645: PPUSH
8646: CALL_OW 559
// InitStreamMode ;
8650: CALL 8655 0 0
// end ;
8654: END
// function InitStreamMode ; begin
8655: LD_INT 0
8657: PPUSH
// streamModeActive := false ;
8658: LD_ADDR_EXP 57
8662: PUSH
8663: LD_INT 0
8665: ST_TO_ADDR
// sRocket := false ;
8666: LD_ADDR_EXP 60
8670: PUSH
8671: LD_INT 0
8673: ST_TO_ADDR
// sSpeed := false ;
8674: LD_ADDR_EXP 59
8678: PUSH
8679: LD_INT 0
8681: ST_TO_ADDR
// sEngine := false ;
8682: LD_ADDR_EXP 61
8686: PUSH
8687: LD_INT 0
8689: ST_TO_ADDR
// sSpec := false ;
8690: LD_ADDR_EXP 58
8694: PUSH
8695: LD_INT 0
8697: ST_TO_ADDR
// sLevel := false ;
8698: LD_ADDR_EXP 62
8702: PUSH
8703: LD_INT 0
8705: ST_TO_ADDR
// sArmoury := false ;
8706: LD_ADDR_EXP 63
8710: PUSH
8711: LD_INT 0
8713: ST_TO_ADDR
// sRadar := false ;
8714: LD_ADDR_EXP 64
8718: PUSH
8719: LD_INT 0
8721: ST_TO_ADDR
// sBunker := false ;
8722: LD_ADDR_EXP 65
8726: PUSH
8727: LD_INT 0
8729: ST_TO_ADDR
// sHack := false ;
8730: LD_ADDR_EXP 66
8734: PUSH
8735: LD_INT 0
8737: ST_TO_ADDR
// sFire := false ;
8738: LD_ADDR_EXP 67
8742: PUSH
8743: LD_INT 0
8745: ST_TO_ADDR
// sRefresh := false ;
8746: LD_ADDR_EXP 68
8750: PUSH
8751: LD_INT 0
8753: ST_TO_ADDR
// sExp := false ;
8754: LD_ADDR_EXP 69
8758: PUSH
8759: LD_INT 0
8761: ST_TO_ADDR
// sDepot := false ;
8762: LD_ADDR_EXP 70
8766: PUSH
8767: LD_INT 0
8769: ST_TO_ADDR
// sFlag := false ;
8770: LD_ADDR_EXP 71
8774: PUSH
8775: LD_INT 0
8777: ST_TO_ADDR
// sSold := false ;
8778: LD_ADDR_EXP 72
8782: PUSH
8783: LD_INT 0
8785: ST_TO_ADDR
// sDiff := false ;
8786: LD_ADDR_EXP 73
8790: PUSH
8791: LD_INT 0
8793: ST_TO_ADDR
// sTiger := false ;
8794: LD_ADDR_EXP 74
8798: PUSH
8799: LD_INT 0
8801: ST_TO_ADDR
// sBomb := false ;
8802: LD_ADDR_EXP 75
8806: PUSH
8807: LD_INT 0
8809: ST_TO_ADDR
// sFog := false ;
8810: LD_ADDR_EXP 76
8814: PUSH
8815: LD_INT 0
8817: ST_TO_ADDR
// sReset := false ;
8818: LD_ADDR_EXP 77
8822: PUSH
8823: LD_INT 0
8825: ST_TO_ADDR
// sSun := false ;
8826: LD_ADDR_EXP 78
8830: PUSH
8831: LD_INT 0
8833: ST_TO_ADDR
// end ;
8834: LD_VAR 0 1
8838: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
8839: LD_VAR 0 2
8843: PUSH
8844: LD_INT 100
8846: EQUAL
8847: IFFALSE 9256
// begin if not StreamModeActive then
8849: LD_EXP 57
8853: NOT
8854: IFFALSE 8864
// StreamModeActive := true ;
8856: LD_ADDR_EXP 57
8860: PUSH
8861: LD_INT 1
8863: ST_TO_ADDR
// if p3 = 0 then
8864: LD_VAR 0 3
8868: PUSH
8869: LD_INT 0
8871: EQUAL
8872: IFFALSE 8878
// InitStreamMode ;
8874: CALL 8655 0 0
// if p3 = 1 then
8878: LD_VAR 0 3
8882: PUSH
8883: LD_INT 1
8885: EQUAL
8886: IFFALSE 8896
// sRocket := true ;
8888: LD_ADDR_EXP 60
8892: PUSH
8893: LD_INT 1
8895: ST_TO_ADDR
// if p3 = 2 then
8896: LD_VAR 0 3
8900: PUSH
8901: LD_INT 2
8903: EQUAL
8904: IFFALSE 8914
// sSpeed := true ;
8906: LD_ADDR_EXP 59
8910: PUSH
8911: LD_INT 1
8913: ST_TO_ADDR
// if p3 = 3 then
8914: LD_VAR 0 3
8918: PUSH
8919: LD_INT 3
8921: EQUAL
8922: IFFALSE 8932
// sEngine := true ;
8924: LD_ADDR_EXP 61
8928: PUSH
8929: LD_INT 1
8931: ST_TO_ADDR
// if p3 = 4 then
8932: LD_VAR 0 3
8936: PUSH
8937: LD_INT 4
8939: EQUAL
8940: IFFALSE 8950
// sSpec := true ;
8942: LD_ADDR_EXP 58
8946: PUSH
8947: LD_INT 1
8949: ST_TO_ADDR
// if p3 = 5 then
8950: LD_VAR 0 3
8954: PUSH
8955: LD_INT 5
8957: EQUAL
8958: IFFALSE 8968
// sLevel := true ;
8960: LD_ADDR_EXP 62
8964: PUSH
8965: LD_INT 1
8967: ST_TO_ADDR
// if p3 = 6 then
8968: LD_VAR 0 3
8972: PUSH
8973: LD_INT 6
8975: EQUAL
8976: IFFALSE 8986
// sArmoury := true ;
8978: LD_ADDR_EXP 63
8982: PUSH
8983: LD_INT 1
8985: ST_TO_ADDR
// if p3 = 7 then
8986: LD_VAR 0 3
8990: PUSH
8991: LD_INT 7
8993: EQUAL
8994: IFFALSE 9004
// sRadar := true ;
8996: LD_ADDR_EXP 64
9000: PUSH
9001: LD_INT 1
9003: ST_TO_ADDR
// if p3 = 8 then
9004: LD_VAR 0 3
9008: PUSH
9009: LD_INT 8
9011: EQUAL
9012: IFFALSE 9022
// sBunker := true ;
9014: LD_ADDR_EXP 65
9018: PUSH
9019: LD_INT 1
9021: ST_TO_ADDR
// if p3 = 9 then
9022: LD_VAR 0 3
9026: PUSH
9027: LD_INT 9
9029: EQUAL
9030: IFFALSE 9040
// sHack := true ;
9032: LD_ADDR_EXP 66
9036: PUSH
9037: LD_INT 1
9039: ST_TO_ADDR
// if p3 = 10 then
9040: LD_VAR 0 3
9044: PUSH
9045: LD_INT 10
9047: EQUAL
9048: IFFALSE 9058
// sFire := true ;
9050: LD_ADDR_EXP 67
9054: PUSH
9055: LD_INT 1
9057: ST_TO_ADDR
// if p3 = 11 then
9058: LD_VAR 0 3
9062: PUSH
9063: LD_INT 11
9065: EQUAL
9066: IFFALSE 9076
// sRefresh := true ;
9068: LD_ADDR_EXP 68
9072: PUSH
9073: LD_INT 1
9075: ST_TO_ADDR
// if p3 = 12 then
9076: LD_VAR 0 3
9080: PUSH
9081: LD_INT 12
9083: EQUAL
9084: IFFALSE 9094
// sExp := true ;
9086: LD_ADDR_EXP 69
9090: PUSH
9091: LD_INT 1
9093: ST_TO_ADDR
// if p3 = 13 then
9094: LD_VAR 0 3
9098: PUSH
9099: LD_INT 13
9101: EQUAL
9102: IFFALSE 9112
// sDepot := true ;
9104: LD_ADDR_EXP 70
9108: PUSH
9109: LD_INT 1
9111: ST_TO_ADDR
// if p3 = 14 then
9112: LD_VAR 0 3
9116: PUSH
9117: LD_INT 14
9119: EQUAL
9120: IFFALSE 9130
// sFlag := true ;
9122: LD_ADDR_EXP 71
9126: PUSH
9127: LD_INT 1
9129: ST_TO_ADDR
// if p3 = 101 then
9130: LD_VAR 0 3
9134: PUSH
9135: LD_INT 101
9137: EQUAL
9138: IFFALSE 9148
// sSold := true ;
9140: LD_ADDR_EXP 72
9144: PUSH
9145: LD_INT 1
9147: ST_TO_ADDR
// if p3 = 102 then
9148: LD_VAR 0 3
9152: PUSH
9153: LD_INT 102
9155: EQUAL
9156: IFFALSE 9166
// sDiff := true ;
9158: LD_ADDR_EXP 73
9162: PUSH
9163: LD_INT 1
9165: ST_TO_ADDR
// if p3 = 103 then
9166: LD_VAR 0 3
9170: PUSH
9171: LD_INT 103
9173: EQUAL
9174: IFFALSE 9184
// sFog := true ;
9176: LD_ADDR_EXP 76
9180: PUSH
9181: LD_INT 1
9183: ST_TO_ADDR
// if p3 = 104 then
9184: LD_VAR 0 3
9188: PUSH
9189: LD_INT 104
9191: EQUAL
9192: IFFALSE 9202
// sReset := true ;
9194: LD_ADDR_EXP 77
9198: PUSH
9199: LD_INT 1
9201: ST_TO_ADDR
// if p3 = 105 then
9202: LD_VAR 0 3
9206: PUSH
9207: LD_INT 105
9209: EQUAL
9210: IFFALSE 9220
// sSun := true ;
9212: LD_ADDR_EXP 78
9216: PUSH
9217: LD_INT 1
9219: ST_TO_ADDR
// if p3 = 106 then
9220: LD_VAR 0 3
9224: PUSH
9225: LD_INT 106
9227: EQUAL
9228: IFFALSE 9238
// sTiger := true ;
9230: LD_ADDR_EXP 74
9234: PUSH
9235: LD_INT 1
9237: ST_TO_ADDR
// if p3 = 107 then
9238: LD_VAR 0 3
9242: PUSH
9243: LD_INT 107
9245: EQUAL
9246: IFFALSE 9256
// sBomb := true ;
9248: LD_ADDR_EXP 75
9252: PUSH
9253: LD_INT 1
9255: ST_TO_ADDR
// end ; end ;
9256: PPOPN 6
9258: END
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
9259: LD_EXP 57
9263: PUSH
9264: LD_EXP 60
9268: AND
9269: IFFALSE 9390
9271: GO 9273
9273: DISABLE
9274: LD_INT 0
9276: PPUSH
9277: PPUSH
// begin enable ;
9278: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
9279: LD_ADDR_VAR 0 2
9283: PUSH
9284: LD_INT 22
9286: PUSH
9287: LD_OWVAR 2
9291: PUSH
9292: EMPTY
9293: LIST
9294: LIST
9295: PUSH
9296: LD_INT 2
9298: PUSH
9299: LD_INT 34
9301: PUSH
9302: LD_INT 7
9304: PUSH
9305: EMPTY
9306: LIST
9307: LIST
9308: PUSH
9309: LD_INT 34
9311: PUSH
9312: LD_INT 45
9314: PUSH
9315: EMPTY
9316: LIST
9317: LIST
9318: PUSH
9319: LD_INT 34
9321: PUSH
9322: LD_INT 28
9324: PUSH
9325: EMPTY
9326: LIST
9327: LIST
9328: PUSH
9329: LD_INT 34
9331: PUSH
9332: LD_INT 47
9334: PUSH
9335: EMPTY
9336: LIST
9337: LIST
9338: PUSH
9339: EMPTY
9340: LIST
9341: LIST
9342: LIST
9343: LIST
9344: LIST
9345: PUSH
9346: EMPTY
9347: LIST
9348: LIST
9349: PPUSH
9350: CALL_OW 69
9354: ST_TO_ADDR
// if not tmp then
9355: LD_VAR 0 2
9359: NOT
9360: IFFALSE 9364
// exit ;
9362: GO 9390
// for i in tmp do
9364: LD_ADDR_VAR 0 1
9368: PUSH
9369: LD_VAR 0 2
9373: PUSH
9374: FOR_IN
9375: IFFALSE 9388
// begin DestroyUnit ( i ) ;
9377: LD_VAR 0 1
9381: PPUSH
9382: CALL_OW 65
// end ;
9386: GO 9374
9388: POP
9389: POP
// end ;
9390: PPOPN 2
9392: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
9393: LD_EXP 57
9397: PUSH
9398: LD_EXP 61
9402: AND
9403: IFFALSE 9484
9405: GO 9407
9407: DISABLE
9408: LD_INT 0
9410: PPUSH
9411: PPUSH
// begin enable ;
9412: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
9413: LD_ADDR_VAR 0 2
9417: PUSH
9418: LD_INT 22
9420: PUSH
9421: LD_OWVAR 2
9425: PUSH
9426: EMPTY
9427: LIST
9428: LIST
9429: PUSH
9430: LD_INT 32
9432: PUSH
9433: LD_INT 3
9435: PUSH
9436: EMPTY
9437: LIST
9438: LIST
9439: PUSH
9440: EMPTY
9441: LIST
9442: LIST
9443: PPUSH
9444: CALL_OW 69
9448: ST_TO_ADDR
// if not tmp then
9449: LD_VAR 0 2
9453: NOT
9454: IFFALSE 9458
// exit ;
9456: GO 9484
// for i in tmp do
9458: LD_ADDR_VAR 0 1
9462: PUSH
9463: LD_VAR 0 2
9467: PUSH
9468: FOR_IN
9469: IFFALSE 9482
// begin DestroyUnit ( i ) ;
9471: LD_VAR 0 1
9475: PPUSH
9476: CALL_OW 65
// end ;
9480: GO 9468
9482: POP
9483: POP
// end ;
9484: PPOPN 2
9486: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
9487: LD_EXP 57
9491: PUSH
9492: LD_EXP 58
9496: AND
9497: IFFALSE 9590
9499: GO 9501
9501: DISABLE
9502: LD_INT 0
9504: PPUSH
// begin enable ;
9505: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
9506: LD_ADDR_VAR 0 1
9510: PUSH
9511: LD_INT 22
9513: PUSH
9514: LD_OWVAR 2
9518: PUSH
9519: EMPTY
9520: LIST
9521: LIST
9522: PUSH
9523: LD_INT 2
9525: PUSH
9526: LD_INT 25
9528: PUSH
9529: LD_INT 5
9531: PUSH
9532: EMPTY
9533: LIST
9534: LIST
9535: PUSH
9536: LD_INT 25
9538: PUSH
9539: LD_INT 9
9541: PUSH
9542: EMPTY
9543: LIST
9544: LIST
9545: PUSH
9546: LD_INT 25
9548: PUSH
9549: LD_INT 8
9551: PUSH
9552: EMPTY
9553: LIST
9554: LIST
9555: PUSH
9556: EMPTY
9557: LIST
9558: LIST
9559: LIST
9560: LIST
9561: PUSH
9562: EMPTY
9563: LIST
9564: LIST
9565: PPUSH
9566: CALL_OW 69
9570: PUSH
9571: FOR_IN
9572: IFFALSE 9588
// begin SetClass ( i , 1 ) ;
9574: LD_VAR 0 1
9578: PPUSH
9579: LD_INT 1
9581: PPUSH
9582: CALL_OW 336
// end ;
9586: GO 9571
9588: POP
9589: POP
// end ;
9590: PPOPN 1
9592: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
9593: LD_EXP 57
9597: PUSH
9598: LD_EXP 59
9602: AND
9603: PUSH
9604: LD_OWVAR 65
9608: PUSH
9609: LD_INT 7
9611: LESS
9612: AND
9613: IFFALSE 9627
9615: GO 9617
9617: DISABLE
// begin enable ;
9618: ENABLE
// game_speed := 7 ;
9619: LD_ADDR_OWVAR 65
9623: PUSH
9624: LD_INT 7
9626: ST_TO_ADDR
// end ;
9627: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
9628: LD_EXP 57
9632: PUSH
9633: LD_EXP 62
9637: AND
9638: IFFALSE 9840
9640: GO 9642
9642: DISABLE
9643: LD_INT 0
9645: PPUSH
9646: PPUSH
9647: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
9648: LD_ADDR_VAR 0 3
9652: PUSH
9653: LD_INT 81
9655: PUSH
9656: LD_OWVAR 2
9660: PUSH
9661: EMPTY
9662: LIST
9663: LIST
9664: PUSH
9665: LD_INT 21
9667: PUSH
9668: LD_INT 1
9670: PUSH
9671: EMPTY
9672: LIST
9673: LIST
9674: PUSH
9675: EMPTY
9676: LIST
9677: LIST
9678: PPUSH
9679: CALL_OW 69
9683: ST_TO_ADDR
// if not tmp then
9684: LD_VAR 0 3
9688: NOT
9689: IFFALSE 9693
// exit ;
9691: GO 9840
// if tmp > 5 then
9693: LD_VAR 0 3
9697: PUSH
9698: LD_INT 5
9700: GREATER
9701: IFFALSE 9713
// k := 5 else
9703: LD_ADDR_VAR 0 2
9707: PUSH
9708: LD_INT 5
9710: ST_TO_ADDR
9711: GO 9723
// k := tmp ;
9713: LD_ADDR_VAR 0 2
9717: PUSH
9718: LD_VAR 0 3
9722: ST_TO_ADDR
// for i := 1 to k do
9723: LD_ADDR_VAR 0 1
9727: PUSH
9728: DOUBLE
9729: LD_INT 1
9731: DEC
9732: ST_TO_ADDR
9733: LD_VAR 0 2
9737: PUSH
9738: FOR_TO
9739: IFFALSE 9838
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
9741: LD_VAR 0 3
9745: PUSH
9746: LD_VAR 0 1
9750: ARRAY
9751: PPUSH
9752: LD_VAR 0 1
9756: PUSH
9757: LD_INT 4
9759: MOD
9760: PUSH
9761: LD_INT 1
9763: PLUS
9764: PPUSH
9765: CALL_OW 259
9769: PUSH
9770: LD_INT 10
9772: LESS
9773: IFFALSE 9836
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
9775: LD_VAR 0 3
9779: PUSH
9780: LD_VAR 0 1
9784: ARRAY
9785: PPUSH
9786: LD_VAR 0 1
9790: PUSH
9791: LD_INT 4
9793: MOD
9794: PUSH
9795: LD_INT 1
9797: PLUS
9798: PPUSH
9799: LD_VAR 0 3
9803: PUSH
9804: LD_VAR 0 1
9808: ARRAY
9809: PPUSH
9810: LD_VAR 0 1
9814: PUSH
9815: LD_INT 4
9817: MOD
9818: PUSH
9819: LD_INT 1
9821: PLUS
9822: PPUSH
9823: CALL_OW 259
9827: PUSH
9828: LD_INT 1
9830: PLUS
9831: PPUSH
9832: CALL_OW 237
9836: GO 9738
9838: POP
9839: POP
// end ;
9840: PPOPN 3
9842: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
9843: LD_EXP 57
9847: PUSH
9848: LD_EXP 63
9852: AND
9853: IFFALSE 9873
9855: GO 9857
9857: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
9858: LD_INT 4
9860: PPUSH
9861: LD_OWVAR 2
9865: PPUSH
9866: LD_INT 0
9868: PPUSH
9869: CALL_OW 324
9873: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
9874: LD_EXP 57
9878: PUSH
9879: LD_EXP 64
9883: AND
9884: IFFALSE 9983
9886: GO 9888
9888: DISABLE
9889: LD_INT 0
9891: PPUSH
9892: PPUSH
// begin enable ;
9893: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
9894: LD_ADDR_VAR 0 2
9898: PUSH
9899: LD_INT 22
9901: PUSH
9902: LD_OWVAR 2
9906: PUSH
9907: EMPTY
9908: LIST
9909: LIST
9910: PUSH
9911: LD_INT 2
9913: PUSH
9914: LD_INT 34
9916: PUSH
9917: LD_INT 11
9919: PUSH
9920: EMPTY
9921: LIST
9922: LIST
9923: PUSH
9924: LD_INT 34
9926: PUSH
9927: LD_INT 30
9929: PUSH
9930: EMPTY
9931: LIST
9932: LIST
9933: PUSH
9934: EMPTY
9935: LIST
9936: LIST
9937: LIST
9938: PUSH
9939: EMPTY
9940: LIST
9941: LIST
9942: PPUSH
9943: CALL_OW 69
9947: ST_TO_ADDR
// if not tmp then
9948: LD_VAR 0 2
9952: NOT
9953: IFFALSE 9957
// exit ;
9955: GO 9983
// for i in tmp do
9957: LD_ADDR_VAR 0 1
9961: PUSH
9962: LD_VAR 0 2
9966: PUSH
9967: FOR_IN
9968: IFFALSE 9981
// begin DestroyUnit ( i ) ;
9970: LD_VAR 0 1
9974: PPUSH
9975: CALL_OW 65
// end ;
9979: GO 9967
9981: POP
9982: POP
// end ;
9983: PPOPN 2
9985: END
// every 0 0$1 trigger StreamModeActive and sBunker do
9986: LD_EXP 57
9990: PUSH
9991: LD_EXP 65
9995: AND
9996: IFFALSE 10016
9998: GO 10000
10000: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
10001: LD_INT 32
10003: PPUSH
10004: LD_OWVAR 2
10008: PPUSH
10009: LD_INT 0
10011: PPUSH
10012: CALL_OW 324
10016: END
// every 0 0$1 trigger StreamModeActive and sHack do
10017: LD_EXP 57
10021: PUSH
10022: LD_EXP 66
10026: AND
10027: IFFALSE 10047
10029: GO 10031
10031: DISABLE
// SetTech ( tech_Virus , your_side , state_disabled ) ;
10032: LD_INT 33
10034: PPUSH
10035: LD_OWVAR 2
10039: PPUSH
10040: LD_INT 0
10042: PPUSH
10043: CALL_OW 322
10047: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
10048: LD_EXP 57
10052: PUSH
10053: LD_EXP 67
10057: AND
10058: IFFALSE 10137
10060: GO 10062
10062: DISABLE
10063: LD_INT 0
10065: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
10066: LD_ADDR_VAR 0 1
10070: PUSH
10071: LD_INT 22
10073: PUSH
10074: LD_OWVAR 2
10078: PUSH
10079: EMPTY
10080: LIST
10081: LIST
10082: PUSH
10083: LD_INT 21
10085: PUSH
10086: LD_INT 3
10088: PUSH
10089: EMPTY
10090: LIST
10091: LIST
10092: PUSH
10093: EMPTY
10094: LIST
10095: LIST
10096: PPUSH
10097: CALL_OW 69
10101: ST_TO_ADDR
// if not tmp then
10102: LD_VAR 0 1
10106: NOT
10107: IFFALSE 10111
// exit ;
10109: GO 10137
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
10111: LD_VAR 0 1
10115: PUSH
10116: LD_INT 1
10118: PPUSH
10119: LD_VAR 0 1
10123: PPUSH
10124: CALL_OW 12
10128: ARRAY
10129: PPUSH
10130: LD_INT 100
10132: PPUSH
10133: CALL_OW 234
// end ;
10137: PPOPN 1
10139: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
10140: LD_EXP 57
10144: PUSH
10145: LD_EXP 69
10149: AND
10150: IFFALSE 10248
10152: GO 10154
10154: DISABLE
10155: LD_INT 0
10157: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
10158: LD_ADDR_VAR 0 1
10162: PUSH
10163: LD_INT 22
10165: PUSH
10166: LD_OWVAR 2
10170: PUSH
10171: EMPTY
10172: LIST
10173: LIST
10174: PUSH
10175: LD_INT 21
10177: PUSH
10178: LD_INT 1
10180: PUSH
10181: EMPTY
10182: LIST
10183: LIST
10184: PUSH
10185: EMPTY
10186: LIST
10187: LIST
10188: PPUSH
10189: CALL_OW 69
10193: ST_TO_ADDR
// if not tmp then
10194: LD_VAR 0 1
10198: NOT
10199: IFFALSE 10203
// exit ;
10201: GO 10248
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
10203: LD_VAR 0 1
10207: PUSH
10208: LD_INT 1
10210: PPUSH
10211: LD_VAR 0 1
10215: PPUSH
10216: CALL_OW 12
10220: ARRAY
10221: PPUSH
10222: LD_INT 1
10224: PPUSH
10225: LD_INT 4
10227: PPUSH
10228: CALL_OW 12
10232: PPUSH
10233: LD_INT 3000
10235: PPUSH
10236: LD_INT 9000
10238: PPUSH
10239: CALL_OW 12
10243: PPUSH
10244: CALL_OW 492
// end ;
10248: PPOPN 1
10250: END
// every 0 0$1 trigger StreamModeActive and sDepot do
10251: LD_EXP 57
10255: PUSH
10256: LD_EXP 70
10260: AND
10261: IFFALSE 10281
10263: GO 10265
10265: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
10266: LD_INT 1
10268: PPUSH
10269: LD_OWVAR 2
10273: PPUSH
10274: LD_INT 0
10276: PPUSH
10277: CALL_OW 324
10281: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
10282: LD_EXP 57
10286: PUSH
10287: LD_EXP 71
10291: AND
10292: IFFALSE 10375
10294: GO 10296
10296: DISABLE
10297: LD_INT 0
10299: PPUSH
10300: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
10301: LD_ADDR_VAR 0 2
10305: PUSH
10306: LD_INT 22
10308: PUSH
10309: LD_OWVAR 2
10313: PUSH
10314: EMPTY
10315: LIST
10316: LIST
10317: PUSH
10318: LD_INT 21
10320: PUSH
10321: LD_INT 3
10323: PUSH
10324: EMPTY
10325: LIST
10326: LIST
10327: PUSH
10328: EMPTY
10329: LIST
10330: LIST
10331: PPUSH
10332: CALL_OW 69
10336: ST_TO_ADDR
// if not tmp then
10337: LD_VAR 0 2
10341: NOT
10342: IFFALSE 10346
// exit ;
10344: GO 10375
// for i in tmp do
10346: LD_ADDR_VAR 0 1
10350: PUSH
10351: LD_VAR 0 2
10355: PUSH
10356: FOR_IN
10357: IFFALSE 10373
// SetBLevel ( i , 10 ) ;
10359: LD_VAR 0 1
10363: PPUSH
10364: LD_INT 10
10366: PPUSH
10367: CALL_OW 241
10371: GO 10356
10373: POP
10374: POP
// end ;
10375: PPOPN 2
10377: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , tmp ;
10378: LD_EXP 57
10382: PUSH
10383: LD_EXP 72
10387: AND
10388: IFFALSE 10471
10390: GO 10392
10392: DISABLE
10393: LD_INT 0
10395: PPUSH
10396: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
10397: LD_ADDR_VAR 0 2
10401: PUSH
10402: LD_INT 22
10404: PUSH
10405: LD_OWVAR 2
10409: PUSH
10410: EMPTY
10411: LIST
10412: LIST
10413: PUSH
10414: LD_INT 25
10416: PUSH
10417: LD_INT 1
10419: PUSH
10420: EMPTY
10421: LIST
10422: LIST
10423: PUSH
10424: EMPTY
10425: LIST
10426: LIST
10427: PPUSH
10428: CALL_OW 69
10432: ST_TO_ADDR
// if not tmp then
10433: LD_VAR 0 2
10437: NOT
10438: IFFALSE 10442
// exit ;
10440: GO 10471
// for i in tmp do
10442: LD_ADDR_VAR 0 1
10446: PUSH
10447: LD_VAR 0 2
10451: PUSH
10452: FOR_IN
10453: IFFALSE 10469
// SetClass ( i , 4 ) ;
10455: LD_VAR 0 1
10459: PPUSH
10460: LD_INT 4
10462: PPUSH
10463: CALL_OW 336
10467: GO 10452
10469: POP
10470: POP
// end ;
10471: PPOPN 2
10473: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
10474: LD_EXP 57
10478: PUSH
10479: LD_EXP 73
10483: AND
10484: PUSH
10485: LD_OWVAR 67
10489: PUSH
10490: LD_INT 3
10492: LESS
10493: AND
10494: IFFALSE 10513
10496: GO 10498
10498: DISABLE
// Difficulty := Difficulty + 1 ;
10499: LD_ADDR_OWVAR 67
10503: PUSH
10504: LD_OWVAR 67
10508: PUSH
10509: LD_INT 1
10511: PLUS
10512: ST_TO_ADDR
10513: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
10514: LD_EXP 57
10518: PUSH
10519: LD_EXP 74
10523: AND
10524: IFFALSE 10627
10526: GO 10528
10528: DISABLE
10529: LD_INT 0
10531: PPUSH
// begin for i := 1 to 5 do
10532: LD_ADDR_VAR 0 1
10536: PUSH
10537: DOUBLE
10538: LD_INT 1
10540: DEC
10541: ST_TO_ADDR
10542: LD_INT 5
10544: PUSH
10545: FOR_TO
10546: IFFALSE 10625
// begin uc_nation := nation_nature ;
10548: LD_ADDR_OWVAR 21
10552: PUSH
10553: LD_INT 0
10555: ST_TO_ADDR
// uc_side := 0 ;
10556: LD_ADDR_OWVAR 20
10560: PUSH
10561: LD_INT 0
10563: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
10564: LD_ADDR_OWVAR 29
10568: PUSH
10569: LD_INT 12
10571: PUSH
10572: LD_INT 12
10574: PUSH
10575: EMPTY
10576: LIST
10577: LIST
10578: ST_TO_ADDR
// hc_agressivity := 20 ;
10579: LD_ADDR_OWVAR 35
10583: PUSH
10584: LD_INT 20
10586: ST_TO_ADDR
// hc_class := class_tiger ;
10587: LD_ADDR_OWVAR 28
10591: PUSH
10592: LD_INT 14
10594: ST_TO_ADDR
// hc_gallery :=  ;
10595: LD_ADDR_OWVAR 33
10599: PUSH
10600: LD_STRING 
10602: ST_TO_ADDR
// hc_name :=  ;
10603: LD_ADDR_OWVAR 26
10607: PUSH
10608: LD_STRING 
10610: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
10611: CALL_OW 44
10615: PPUSH
10616: LD_INT 0
10618: PPUSH
10619: CALL_OW 51
// end ;
10623: GO 10545
10625: POP
10626: POP
// end ;
10627: PPOPN 1
10629: END
// every 0 0$1 trigger StreamModeActive and sBomb do var i , x , y , result ;
10630: LD_EXP 57
10634: PUSH
10635: LD_EXP 75
10639: AND
10640: IFFALSE 10814
10642: GO 10644
10644: DISABLE
10645: LD_INT 0
10647: PPUSH
10648: PPUSH
10649: PPUSH
10650: PPUSH
// begin result := false ;
10651: LD_ADDR_VAR 0 4
10655: PUSH
10656: LD_INT 0
10658: ST_TO_ADDR
// for i := 1 to 8 do
10659: LD_ADDR_VAR 0 1
10663: PUSH
10664: DOUBLE
10665: LD_INT 1
10667: DEC
10668: ST_TO_ADDR
10669: LD_INT 8
10671: PUSH
10672: FOR_TO
10673: IFFALSE 10784
// begin x := [ 10 , 50 , 90 , 140 ] [ rand ( 1 , 4 ) ] ;
10675: LD_ADDR_VAR 0 2
10679: PUSH
10680: LD_INT 10
10682: PUSH
10683: LD_INT 50
10685: PUSH
10686: LD_INT 90
10688: PUSH
10689: LD_INT 140
10691: PUSH
10692: EMPTY
10693: LIST
10694: LIST
10695: LIST
10696: LIST
10697: PUSH
10698: LD_INT 1
10700: PPUSH
10701: LD_INT 4
10703: PPUSH
10704: CALL_OW 12
10708: ARRAY
10709: ST_TO_ADDR
// y := [ 10 , 50 , 90 , 140 ] [ rand ( 1 , 4 ) ] ;
10710: LD_ADDR_VAR 0 3
10714: PUSH
10715: LD_INT 10
10717: PUSH
10718: LD_INT 50
10720: PUSH
10721: LD_INT 90
10723: PUSH
10724: LD_INT 140
10726: PUSH
10727: EMPTY
10728: LIST
10729: LIST
10730: LIST
10731: LIST
10732: PUSH
10733: LD_INT 1
10735: PPUSH
10736: LD_INT 4
10738: PPUSH
10739: CALL_OW 12
10743: ARRAY
10744: ST_TO_ADDR
// if ValidHex ( x , y ) then
10745: LD_VAR 0 2
10749: PPUSH
10750: LD_VAR 0 3
10754: PPUSH
10755: CALL_OW 488
10759: IFFALSE 10782
// begin result := [ x , y ] ;
10761: LD_ADDR_VAR 0 4
10765: PUSH
10766: LD_VAR 0 2
10770: PUSH
10771: LD_VAR 0 3
10775: PUSH
10776: EMPTY
10777: LIST
10778: LIST
10779: ST_TO_ADDR
// break ;
10780: GO 10784
// end ; end ;
10782: GO 10672
10784: POP
10785: POP
// if result then
10786: LD_VAR 0 4
10790: IFFALSE 10814
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
10792: LD_VAR 0 4
10796: PUSH
10797: LD_INT 1
10799: ARRAY
10800: PPUSH
10801: LD_VAR 0 4
10805: PUSH
10806: LD_INT 2
10808: ARRAY
10809: PPUSH
10810: CALL_OW 429
// end ;
10814: PPOPN 4
10816: END
// every 0 0$1 trigger StreamModeActive and sReset do
10817: LD_EXP 57
10821: PUSH
10822: LD_EXP 77
10826: AND
10827: IFFALSE 10839
10829: GO 10831
10831: DISABLE
// YouLost (  ) ;
10832: LD_STRING 
10834: PPUSH
10835: CALL_OW 104
10839: END
// every 0 0$1 trigger StreamModeActive and sFog do
10840: LD_EXP 57
10844: PUSH
10845: LD_EXP 76
10849: AND
10850: IFFALSE 10864
10852: GO 10854
10854: DISABLE
// FogOff ( your_side ) ;
10855: LD_OWVAR 2
10859: PPUSH
10860: CALL_OW 344
10864: END
// every 0 0$1 trigger StreamModeActive and sSun do
10865: LD_EXP 57
10869: PUSH
10870: LD_EXP 78
10874: AND
10875: IFFALSE 10903
10877: GO 10879
10879: DISABLE
// begin solar_recharge_percent := 0 ;
10880: LD_ADDR_OWVAR 79
10884: PUSH
10885: LD_INT 0
10887: ST_TO_ADDR
// wait ( 5 5$00 ) ;
10888: LD_INT 10500
10890: PPUSH
10891: CALL_OW 67
// solar_recharge_percent := 100 ;
10895: LD_ADDR_OWVAR 79
10899: PUSH
10900: LD_INT 100
10902: ST_TO_ADDR
// end ; end_of_file
10903: END
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; var i , eff , side ; begin
10904: LD_INT 0
10906: PPUSH
10907: PPUSH
10908: PPUSH
10909: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
10910: LD_VAR 0 1
10914: PPUSH
10915: CALL_OW 264
10919: PUSH
10920: LD_EXP 56
10924: EQUAL
10925: IFFALSE 10997
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
10927: LD_INT 68
10929: PPUSH
10930: LD_VAR 0 1
10934: PPUSH
10935: CALL_OW 255
10939: PPUSH
10940: CALL_OW 321
10944: PUSH
10945: LD_INT 2
10947: EQUAL
10948: IFFALSE 10960
// eff := 70 else
10950: LD_ADDR_VAR 0 6
10954: PUSH
10955: LD_INT 70
10957: ST_TO_ADDR
10958: GO 10968
// eff := 30 ;
10960: LD_ADDR_VAR 0 6
10964: PUSH
10965: LD_INT 30
10967: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
10968: LD_VAR 0 1
10972: PPUSH
10973: CALL_OW 250
10977: PPUSH
10978: LD_VAR 0 1
10982: PPUSH
10983: CALL_OW 251
10987: PPUSH
10988: LD_VAR 0 6
10992: PPUSH
10993: CALL_OW 495
// end ; end ;
10997: LD_VAR 0 4
11001: RET
// export function SOS_Command ( cmd ) ; var i , j , tmp , taskList , _taskList ; begin
11002: LD_INT 0
11004: PPUSH
11005: PPUSH
11006: PPUSH
11007: PPUSH
11008: PPUSH
11009: PPUSH
// if cmd = 124 then
11010: LD_VAR 0 1
11014: PUSH
11015: LD_INT 124
11017: EQUAL
11018: IFFALSE 11224
// begin tmp := FilterAllUnits ( [ f_or , [ f_weapon , ru_bulldozer ] , [ f_weapon , us_bulldozer ] ] ) ;
11020: LD_ADDR_VAR 0 5
11024: PUSH
11025: LD_INT 2
11027: PUSH
11028: LD_INT 34
11030: PUSH
11031: LD_INT 53
11033: PUSH
11034: EMPTY
11035: LIST
11036: LIST
11037: PUSH
11038: LD_INT 34
11040: PUSH
11041: LD_INT 14
11043: PUSH
11044: EMPTY
11045: LIST
11046: LIST
11047: PUSH
11048: EMPTY
11049: LIST
11050: LIST
11051: LIST
11052: PPUSH
11053: CALL_OW 69
11057: ST_TO_ADDR
// if not tmp then
11058: LD_VAR 0 5
11062: NOT
11063: IFFALSE 11067
// exit ;
11065: GO 11224
// for i in tmp do
11067: LD_ADDR_VAR 0 3
11071: PUSH
11072: LD_VAR 0 5
11076: PUSH
11077: FOR_IN
11078: IFFALSE 11222
// begin taskList := GetTaskList ( i ) ;
11080: LD_ADDR_VAR 0 6
11084: PUSH
11085: LD_VAR 0 3
11089: PPUSH
11090: CALL_OW 437
11094: ST_TO_ADDR
// if not taskList then
11095: LD_VAR 0 6
11099: NOT
11100: IFFALSE 11104
// continue ;
11102: GO 11077
// for j = 1 to taskList do
11104: LD_ADDR_VAR 0 4
11108: PUSH
11109: DOUBLE
11110: LD_INT 1
11112: DEC
11113: ST_TO_ADDR
11114: LD_VAR 0 6
11118: PUSH
11119: FOR_TO
11120: IFFALSE 11218
// if taskList [ j ] [ 1 ] = | then
11122: LD_VAR 0 6
11126: PUSH
11127: LD_VAR 0 4
11131: ARRAY
11132: PUSH
11133: LD_INT 1
11135: ARRAY
11136: PUSH
11137: LD_STRING |
11139: EQUAL
11140: IFFALSE 11216
// begin _taskList := Delete ( taskList , 1 ) ;
11142: LD_ADDR_VAR 0 7
11146: PUSH
11147: LD_VAR 0 6
11151: PPUSH
11152: LD_INT 1
11154: PPUSH
11155: CALL_OW 3
11159: ST_TO_ADDR
// SetTaskList ( i , _taskList ) ;
11160: LD_VAR 0 3
11164: PPUSH
11165: LD_VAR 0 7
11169: PPUSH
11170: CALL_OW 446
// CutTreeXYR ( i , taskList [ j ] [ 2 ] , taskList [ j ] [ 3 ] , 8 ) ;
11174: LD_VAR 0 3
11178: PPUSH
11179: LD_VAR 0 6
11183: PUSH
11184: LD_VAR 0 4
11188: ARRAY
11189: PUSH
11190: LD_INT 2
11192: ARRAY
11193: PPUSH
11194: LD_VAR 0 6
11198: PUSH
11199: LD_VAR 0 4
11203: ARRAY
11204: PUSH
11205: LD_INT 3
11207: ARRAY
11208: PPUSH
11209: LD_INT 8
11211: PPUSH
11212: CALL 11229 0 4
// end ;
11216: GO 11119
11218: POP
11219: POP
// end ;
11220: GO 11077
11222: POP
11223: POP
// end ; end ;
11224: LD_VAR 0 2
11228: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
11229: LD_INT 0
11231: PPUSH
11232: PPUSH
11233: PPUSH
11234: PPUSH
11235: PPUSH
11236: PPUSH
11237: PPUSH
11238: PPUSH
11239: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
11240: LD_VAR 0 1
11244: NOT
11245: PUSH
11246: LD_VAR 0 2
11250: PPUSH
11251: LD_VAR 0 3
11255: PPUSH
11256: CALL_OW 488
11260: NOT
11261: OR
11262: PUSH
11263: LD_VAR 0 4
11267: NOT
11268: OR
11269: IFFALSE 11273
// exit ;
11271: GO 11613
// list := [ ] ;
11273: LD_ADDR_VAR 0 13
11277: PUSH
11278: EMPTY
11279: ST_TO_ADDR
// if x - r < 0 then
11280: LD_VAR 0 2
11284: PUSH
11285: LD_VAR 0 4
11289: MINUS
11290: PUSH
11291: LD_INT 0
11293: LESS
11294: IFFALSE 11306
// min_x := 0 else
11296: LD_ADDR_VAR 0 7
11300: PUSH
11301: LD_INT 0
11303: ST_TO_ADDR
11304: GO 11322
// min_x := x - r ;
11306: LD_ADDR_VAR 0 7
11310: PUSH
11311: LD_VAR 0 2
11315: PUSH
11316: LD_VAR 0 4
11320: MINUS
11321: ST_TO_ADDR
// if y - r < 0 then
11322: LD_VAR 0 3
11326: PUSH
11327: LD_VAR 0 4
11331: MINUS
11332: PUSH
11333: LD_INT 0
11335: LESS
11336: IFFALSE 11348
// min_y := 0 else
11338: LD_ADDR_VAR 0 8
11342: PUSH
11343: LD_INT 0
11345: ST_TO_ADDR
11346: GO 11364
// min_y := y - r ;
11348: LD_ADDR_VAR 0 8
11352: PUSH
11353: LD_VAR 0 3
11357: PUSH
11358: LD_VAR 0 4
11362: MINUS
11363: ST_TO_ADDR
// max_x := x + r ;
11364: LD_ADDR_VAR 0 9
11368: PUSH
11369: LD_VAR 0 2
11373: PUSH
11374: LD_VAR 0 4
11378: PLUS
11379: ST_TO_ADDR
// max_y := y + r ;
11380: LD_ADDR_VAR 0 10
11384: PUSH
11385: LD_VAR 0 3
11389: PUSH
11390: LD_VAR 0 4
11394: PLUS
11395: ST_TO_ADDR
// for _x = min_x to max_x do
11396: LD_ADDR_VAR 0 11
11400: PUSH
11401: DOUBLE
11402: LD_VAR 0 7
11406: DEC
11407: ST_TO_ADDR
11408: LD_VAR 0 9
11412: PUSH
11413: FOR_TO
11414: IFFALSE 11531
// for _y = min_y to max_y do
11416: LD_ADDR_VAR 0 12
11420: PUSH
11421: DOUBLE
11422: LD_VAR 0 8
11426: DEC
11427: ST_TO_ADDR
11428: LD_VAR 0 10
11432: PUSH
11433: FOR_TO
11434: IFFALSE 11527
// begin if not ValidHex ( _x , _y ) then
11436: LD_VAR 0 11
11440: PPUSH
11441: LD_VAR 0 12
11445: PPUSH
11446: CALL_OW 488
11450: NOT
11451: IFFALSE 11455
// continue ;
11453: GO 11433
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
11455: LD_VAR 0 11
11459: PPUSH
11460: LD_VAR 0 12
11464: PPUSH
11465: CALL_OW 351
11469: PUSH
11470: LD_VAR 0 11
11474: PPUSH
11475: LD_VAR 0 12
11479: PPUSH
11480: CALL_OW 554
11484: AND
11485: IFFALSE 11525
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
11487: LD_ADDR_VAR 0 13
11491: PUSH
11492: LD_VAR 0 13
11496: PPUSH
11497: LD_VAR 0 13
11501: PUSH
11502: LD_INT 1
11504: PLUS
11505: PPUSH
11506: LD_VAR 0 11
11510: PUSH
11511: LD_VAR 0 12
11515: PUSH
11516: EMPTY
11517: LIST
11518: LIST
11519: PPUSH
11520: CALL_OW 2
11524: ST_TO_ADDR
// end ;
11525: GO 11433
11527: POP
11528: POP
11529: GO 11413
11531: POP
11532: POP
// if not list then
11533: LD_VAR 0 13
11537: NOT
11538: IFFALSE 11542
// exit ;
11540: GO 11613
// for i in list do
11542: LD_ADDR_VAR 0 6
11546: PUSH
11547: LD_VAR 0 13
11551: PUSH
11552: FOR_IN
11553: IFFALSE 11611
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
11555: LD_VAR 0 1
11559: PPUSH
11560: LD_STRING M
11562: PUSH
11563: LD_VAR 0 6
11567: PUSH
11568: LD_INT 1
11570: ARRAY
11571: PUSH
11572: LD_VAR 0 6
11576: PUSH
11577: LD_INT 2
11579: ARRAY
11580: PUSH
11581: LD_INT 0
11583: PUSH
11584: LD_INT 0
11586: PUSH
11587: LD_INT 0
11589: PUSH
11590: LD_INT 0
11592: PUSH
11593: EMPTY
11594: LIST
11595: LIST
11596: LIST
11597: LIST
11598: LIST
11599: LIST
11600: LIST
11601: PUSH
11602: EMPTY
11603: LIST
11604: PPUSH
11605: CALL_OW 447
11609: GO 11552
11611: POP
11612: POP
// end ;
11613: LD_VAR 0 5
11617: RET
