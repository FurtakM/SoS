// starting begin PrepareMap ;
   0: CALL 13 0 0
// Main_Variables ;
   4: CALL 136 0 0
// Start_Mission ;
   8: CALL 3478 0 0
// end ;
  12: END
// function PrepareMap ; begin
  13: LD_INT 0
  15: PPUSH
// ResetFog ;
  16: CALL_OW 335
// RandomizeAll ;
  20: CALL_OW 11
// game_difficulty := GetMultiplayerSetting ( 0 ) ;
  24: LD_ADDR_EXP 2
  28: PUSH
  29: LD_INT 0
  31: PPUSH
  32: CALL_OW 426
  36: ST_TO_ADDR
// Difficulty := game_difficulty ;
  37: LD_ADDR_OWVAR 67
  41: PUSH
  42: LD_EXP 2
  46: ST_TO_ADDR
// ChangeSideFog ( 8 , 6 ) ;
  47: LD_INT 8
  49: PPUSH
  50: LD_INT 6
  52: PPUSH
  53: CALL_OW 343
// PlaceSeeing ( 1 , 1 , 8 , - 37963 ) ;
  57: LD_INT 1
  59: PPUSH
  60: LD_INT 1
  62: PPUSH
  63: LD_INT 8
  65: PPUSH
  66: LD_INT 37963
  68: NEG
  69: PPUSH
  70: CALL_OW 330
// RemoveSeeing ( 1 , 1 , 8 ) ;
  74: LD_INT 1
  76: PPUSH
  77: LD_INT 1
  79: PPUSH
  80: LD_INT 8
  82: PPUSH
  83: CALL_OW 331
// PlaceCamera ;
  87: CALL 3945 0 0
// CreateNature ( nature , 4 , 3 , 2 , 1 ) ;
  91: LD_INT 2
  93: PPUSH
  94: LD_INT 4
  96: PPUSH
  97: LD_INT 3
  99: PPUSH
 100: LD_INT 2
 102: PPUSH
 103: LD_INT 1
 105: PPUSH
 106: CALL 7878 0 5
// PrepareComm ;
 110: CALL 8361 0 0
// SetSide ( fort , 6 ) ;
 114: LD_INT 23
 116: PPUSH
 117: LD_INT 6
 119: PPUSH
 120: CALL_OW 235
// CenterNowOnUnits ( fort ) ;
 124: LD_INT 23
 126: PPUSH
 127: CALL_OW 87
// end ;
 131: LD_VAR 0 1
 135: RET
// export game_on , game_difficulty , game_time , game_option , game_end , game_strings ; export leopold , leopold_in_fort , samuel , samuel_in_fort , mortars_in_fort , scout ; export u_mine , u_fac ; export areas ; export skill ; export ar_weapons , ru_weapons , us_weapons ; export arabian_force , russian_force , american_force , arabian_timeing , russian_timeing , american_timeing ; export meeting_start , meeting_arive , meeting_break , meeting_end , meeting_time , russian_timer , fort_destroyed , hero_died , mission_time , cargo_ok , american_hchan , dezert , arabian_attack , russian_attack , american_attack , american_help , american_sib_bomb , russian_trade , heike_dialog1 , heike_dialog2 ; export am_comander , ru_comander , ar_comander ; function Main_Variables ; begin
 136: LD_INT 0
 138: PPUSH
// game_on := false ;
 139: LD_ADDR_EXP 1
 143: PUSH
 144: LD_INT 0
 146: ST_TO_ADDR
// game_time := 0 0$00 ;
 147: LD_ADDR_EXP 3
 151: PUSH
 152: LD_INT 0
 154: ST_TO_ADDR
// game_option := [ 1 ] ;
 155: LD_ADDR_EXP 4
 159: PUSH
 160: LD_INT 1
 162: PUSH
 163: EMPTY
 164: LIST
 165: ST_TO_ADDR
// game_end := false ;
 166: LD_ADDR_EXP 5
 170: PUSH
 171: LD_INT 0
 173: ST_TO_ADDR
// game_strings := [ ] ;
 174: LD_ADDR_EXP 6
 178: PUSH
 179: EMPTY
 180: ST_TO_ADDR
// game_time := 0 0$00 ;
 181: LD_ADDR_EXP 3
 185: PUSH
 186: LD_INT 0
 188: ST_TO_ADDR
// mission_time := 0 0$00 ;
 189: LD_ADDR_EXP 34
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// skill := [ 5 , 7 , 9 ] [ game_difficulty ] ;
 197: LD_ADDR_EXP 16
 201: PUSH
 202: LD_INT 5
 204: PUSH
 205: LD_INT 7
 207: PUSH
 208: LD_INT 9
 210: PUSH
 211: EMPTY
 212: LIST
 213: LIST
 214: LIST
 215: PUSH
 216: LD_EXP 2
 220: ARRAY
 221: ST_TO_ADDR
// areas := [ a_swest , a_nwest , a_neast , a_seast ] ;
 222: LD_ADDR_EXP 15
 226: PUSH
 227: LD_INT 5
 229: PUSH
 230: LD_INT 6
 232: PUSH
 233: LD_INT 7
 235: PUSH
 236: LD_INT 8
 238: PUSH
 239: EMPTY
 240: LIST
 241: LIST
 242: LIST
 243: LIST
 244: ST_TO_ADDR
// meeting_start := false ;
 245: LD_ADDR_EXP 26
 249: PUSH
 250: LD_INT 0
 252: ST_TO_ADDR
// meeting_arive := false ;
 253: LD_ADDR_EXP 27
 257: PUSH
 258: LD_INT 0
 260: ST_TO_ADDR
// meeting_break := false ;
 261: LD_ADDR_EXP 28
 265: PUSH
 266: LD_INT 0
 268: ST_TO_ADDR
// meeting_end := false ;
 269: LD_ADDR_EXP 29
 273: PUSH
 274: LD_INT 0
 276: ST_TO_ADDR
// meeting_time := [ 4 4$00 , 3 3$40 , 3 3$20 ] [ game_difficulty ] ;
 277: LD_ADDR_EXP 30
 281: PUSH
 282: LD_INT 8400
 284: PUSH
 285: LD_INT 7700
 287: PUSH
 288: LD_INT 7000
 290: PUSH
 291: EMPTY
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: LD_EXP 2
 300: ARRAY
 301: ST_TO_ADDR
// arabian_force := [ 4 , 5 , 6 ] [ game_difficulty ] ;
 302: LD_ADDR_EXP 20
 306: PUSH
 307: LD_INT 4
 309: PUSH
 310: LD_INT 5
 312: PUSH
 313: LD_INT 6
 315: PUSH
 316: EMPTY
 317: LIST
 318: LIST
 319: LIST
 320: PUSH
 321: LD_EXP 2
 325: ARRAY
 326: ST_TO_ADDR
// american_force := [ 5 , 6 , 7 ] [ game_difficulty ] ;
 327: LD_ADDR_EXP 22
 331: PUSH
 332: LD_INT 5
 334: PUSH
 335: LD_INT 6
 337: PUSH
 338: LD_INT 7
 340: PUSH
 341: EMPTY
 342: LIST
 343: LIST
 344: LIST
 345: PUSH
 346: LD_EXP 2
 350: ARRAY
 351: ST_TO_ADDR
// russian_force := [ 6 , 7 , 8 ] [ game_difficulty ] ;
 352: LD_ADDR_EXP 21
 356: PUSH
 357: LD_INT 6
 359: PUSH
 360: LD_INT 7
 362: PUSH
 363: LD_INT 8
 365: PUSH
 366: EMPTY
 367: LIST
 368: LIST
 369: LIST
 370: PUSH
 371: LD_EXP 2
 375: ARRAY
 376: ST_TO_ADDR
// u_mine := false ;
 377: LD_ADDR_EXP 13
 381: PUSH
 382: LD_INT 0
 384: ST_TO_ADDR
// u_fac := false ;
 385: LD_ADDR_EXP 14
 389: PUSH
 390: LD_INT 0
 392: ST_TO_ADDR
// leopold_in_fort := false ;
 393: LD_ADDR_EXP 8
 397: PUSH
 398: LD_INT 0
 400: ST_TO_ADDR
// samuel_in_fort := false ;
 401: LD_ADDR_EXP 10
 405: PUSH
 406: LD_INT 0
 408: ST_TO_ADDR
// mortars_in_fort := false ;
 409: LD_ADDR_EXP 11
 413: PUSH
 414: LD_INT 0
 416: ST_TO_ADDR
// fort_destroyed := false ;
 417: LD_ADDR_EXP 32
 421: PUSH
 422: LD_INT 0
 424: ST_TO_ADDR
// hero_died := false ;
 425: LD_ADDR_EXP 33
 429: PUSH
 430: LD_INT 0
 432: ST_TO_ADDR
// dezert := false ;
 433: LD_ADDR_EXP 37
 437: PUSH
 438: LD_INT 0
 440: ST_TO_ADDR
// arabian_attack := false ;
 441: LD_ADDR_EXP 38
 445: PUSH
 446: LD_INT 0
 448: ST_TO_ADDR
// russian_attack := false ;
 449: LD_ADDR_EXP 39
 453: PUSH
 454: LD_INT 0
 456: ST_TO_ADDR
// american_attack := false ;
 457: LD_ADDR_EXP 40
 461: PUSH
 462: LD_INT 0
 464: ST_TO_ADDR
// american_help := false ;
 465: LD_ADDR_EXP 41
 469: PUSH
 470: LD_INT 0
 472: ST_TO_ADDR
// american_hchan := [ 91 , 81 , 71 ] [ game_difficulty ] ;
 473: LD_ADDR_EXP 36
 477: PUSH
 478: LD_INT 91
 480: PUSH
 481: LD_INT 81
 483: PUSH
 484: LD_INT 71
 486: PUSH
 487: EMPTY
 488: LIST
 489: LIST
 490: LIST
 491: PUSH
 492: LD_EXP 2
 496: ARRAY
 497: ST_TO_ADDR
// american_sib_bomb := false ;
 498: LD_ADDR_EXP 42
 502: PUSH
 503: LD_INT 0
 505: ST_TO_ADDR
// russian_trade := false ;
 506: LD_ADDR_EXP 43
 510: PUSH
 511: LD_INT 0
 513: ST_TO_ADDR
// russian_timer := 5 5$00 ;
 514: LD_ADDR_EXP 31
 518: PUSH
 519: LD_INT 10500
 521: ST_TO_ADDR
// cargo_ok := false ;
 522: LD_ADDR_EXP 35
 526: PUSH
 527: LD_INT 0
 529: ST_TO_ADDR
// heike_dialog1 := false ;
 530: LD_ADDR_EXP 44
 534: PUSH
 535: LD_INT 0
 537: ST_TO_ADDR
// heike_dialog2 := false ;
 538: LD_ADDR_EXP 45
 542: PUSH
 543: LD_INT 0
 545: ST_TO_ADDR
// american_timeing := [ 10 10$00 , 9 9$50 , 9 9$30 ] [ game_difficulty ] ;
 546: LD_ADDR_EXP 25
 550: PUSH
 551: LD_INT 21000
 553: PUSH
 554: LD_INT 20650
 556: PUSH
 557: LD_INT 19950
 559: PUSH
 560: EMPTY
 561: LIST
 562: LIST
 563: LIST
 564: PUSH
 565: LD_EXP 2
 569: ARRAY
 570: ST_TO_ADDR
// arabian_timeing := [ 8 8$00 , 7 7$30 , 6 6$40 ] [ game_difficulty ] ;
 571: LD_ADDR_EXP 23
 575: PUSH
 576: LD_INT 16800
 578: PUSH
 579: LD_INT 15750
 581: PUSH
 582: LD_INT 14000
 584: PUSH
 585: EMPTY
 586: LIST
 587: LIST
 588: LIST
 589: PUSH
 590: LD_EXP 2
 594: ARRAY
 595: ST_TO_ADDR
// russian_timeing := [ 11 11$00 , 10 10$30 , 9 9$20 ] [ game_difficulty ] ;
 596: LD_ADDR_EXP 24
 600: PUSH
 601: LD_INT 23100
 603: PUSH
 604: LD_INT 22050
 606: PUSH
 607: LD_INT 19600
 609: PUSH
 610: EMPTY
 611: LIST
 612: LIST
 613: LIST
 614: PUSH
 615: LD_EXP 2
 619: ARRAY
 620: ST_TO_ADDR
// ar_weapons := [ ar_rocket_launcher , ar_gun , ar_flame_thrower , ar_selfpropelled_bomb , ar_bio_bomb ] ;
 621: LD_ADDR_EXP 17
 625: PUSH
 626: LD_INT 28
 628: PUSH
 629: LD_INT 27
 631: PUSH
 632: LD_INT 26
 634: PUSH
 635: LD_INT 29
 637: PUSH
 638: LD_EXP 56
 642: PUSH
 643: EMPTY
 644: LIST
 645: LIST
 646: LIST
 647: LIST
 648: LIST
 649: ST_TO_ADDR
// us_weapons := [ us_rocket_launcher , us_heavy_gun , us_double_laser , us_laser ] ;
 650: LD_ADDR_EXP 19
 654: PUSH
 655: LD_INT 7
 657: PUSH
 658: LD_INT 6
 660: PUSH
 661: LD_INT 10
 663: PUSH
 664: LD_INT 9
 666: PUSH
 667: EMPTY
 668: LIST
 669: LIST
 670: LIST
 671: LIST
 672: ST_TO_ADDR
// ru_weapons := [ ru_rocket_launcher , ru_rocket , ru_heavy_gun , ru_heavy_gun ] ;
 673: LD_ADDR_EXP 18
 677: PUSH
 678: LD_INT 45
 680: PUSH
 681: LD_INT 47
 683: PUSH
 684: LD_INT 46
 686: PUSH
 687: LD_INT 46
 689: PUSH
 690: EMPTY
 691: LIST
 692: LIST
 693: LIST
 694: LIST
 695: ST_TO_ADDR
// end ;
 696: LD_VAR 0 1
 700: RET
// every 0 0$01 trigger game_on do var i , p , x , filter ;
 701: LD_EXP 1
 705: IFFALSE 3475
 707: GO 709
 709: DISABLE
 710: LD_INT 0
 712: PPUSH
 713: PPUSH
 714: PPUSH
 715: PPUSH
// begin enable ;
 716: ENABLE
// Display_Strings := [ #tick , game_time ] ^ game_strings ;
 717: LD_ADDR_OWVAR 47
 721: PUSH
 722: LD_STRING #tick
 724: PUSH
 725: LD_EXP 3
 729: PUSH
 730: EMPTY
 731: LIST
 732: LIST
 733: PUSH
 734: LD_EXP 6
 738: ADD
 739: ST_TO_ADDR
// game_time := RefreshTime ( game_time , true ) ;
 740: LD_ADDR_EXP 3
 744: PUSH
 745: LD_EXP 3
 749: PPUSH
 750: LD_INT 1
 752: PPUSH
 753: CALL 6964 0 2
 757: ST_TO_ADDR
// if meeting_start and meeting_time > 0 0$00 then
 758: LD_EXP 26
 762: PUSH
 763: LD_EXP 30
 767: PUSH
 768: LD_INT 0
 770: GREATER
 771: AND
 772: IFFALSE 809
// begin game_strings := [ #mtime , meeting_time ] ;
 774: LD_ADDR_EXP 6
 778: PUSH
 779: LD_STRING #mtime
 781: PUSH
 782: LD_EXP 30
 786: PUSH
 787: EMPTY
 788: LIST
 789: LIST
 790: ST_TO_ADDR
// meeting_time := RefreshTime ( meeting_time , false ) ;
 791: LD_ADDR_EXP 30
 795: PUSH
 796: LD_EXP 30
 800: PPUSH
 801: LD_INT 0
 803: PPUSH
 804: CALL 6964 0 2
 808: ST_TO_ADDR
// end ; if meeting_arive then
 809: LD_EXP 27
 813: IFFALSE 833
// mission_time := RefreshTime ( mission_time , true ) ;
 815: LD_ADDR_EXP 34
 819: PUSH
 820: LD_EXP 34
 824: PPUSH
 825: LD_INT 1
 827: PPUSH
 828: CALL 6964 0 2
 832: ST_TO_ADDR
// if arabian_attack and arabian_timeing > 0 0$00 and meeting_arive then
 833: LD_EXP 38
 837: PUSH
 838: LD_EXP 23
 842: PUSH
 843: LD_INT 0
 845: GREATER
 846: AND
 847: PUSH
 848: LD_EXP 27
 852: AND
 853: IFFALSE 873
// begin arabian_timeing := RefreshTime ( arabian_timeing , false ) ;
 855: LD_ADDR_EXP 23
 859: PUSH
 860: LD_EXP 23
 864: PPUSH
 865: LD_INT 0
 867: PPUSH
 868: CALL 6964 0 2
 872: ST_TO_ADDR
// end ; if russian_attack and russian_timeing > 0 0$00 and meeting_arive then
 873: LD_EXP 39
 877: PUSH
 878: LD_EXP 24
 882: PUSH
 883: LD_INT 0
 885: GREATER
 886: AND
 887: PUSH
 888: LD_EXP 27
 892: AND
 893: IFFALSE 913
// begin russian_timeing := RefreshTime ( russian_timeing , false ) ;
 895: LD_ADDR_EXP 24
 899: PUSH
 900: LD_EXP 24
 904: PPUSH
 905: LD_INT 0
 907: PPUSH
 908: CALL 6964 0 2
 912: ST_TO_ADDR
// end ; if american_attack and american_timeing > 0 0$00 and meeting_arive then
 913: LD_EXP 40
 917: PUSH
 918: LD_EXP 25
 922: PUSH
 923: LD_INT 0
 925: GREATER
 926: AND
 927: PUSH
 928: LD_EXP 27
 932: AND
 933: IFFALSE 953
// begin american_timeing := RefreshTime ( american_timeing , false ) ;
 935: LD_ADDR_EXP 25
 939: PUSH
 940: LD_EXP 25
 944: PPUSH
 945: LD_INT 0
 947: PPUSH
 948: CALL 6964 0 2
 952: ST_TO_ADDR
// end ; if russian_trade and russian_timer > 0 0$00 then
 953: LD_EXP 43
 957: PUSH
 958: LD_EXP 31
 962: PUSH
 963: LD_INT 0
 965: GREATER
 966: AND
 967: IFFALSE 1004
// begin game_strings := [ #rtime , russian_timer ] ;
 969: LD_ADDR_EXP 6
 973: PUSH
 974: LD_STRING #rtime
 976: PUSH
 977: LD_EXP 31
 981: PUSH
 982: EMPTY
 983: LIST
 984: LIST
 985: ST_TO_ADDR
// russian_timer := RefreshTime ( russian_timer , false ) ;
 986: LD_ADDR_EXP 31
 990: PUSH
 991: LD_EXP 31
 995: PPUSH
 996: LD_INT 0
 998: PPUSH
 999: CALL 6964 0 2
1003: ST_TO_ADDR
// end ; if russian_trade and russian_timer = 0 0$00 or cargo_ok then
1004: LD_EXP 43
1008: PUSH
1009: LD_EXP 31
1013: PUSH
1014: LD_INT 0
1016: EQUAL
1017: AND
1018: PUSH
1019: LD_EXP 35
1023: OR
1024: IFFALSE 1033
// game_strings := [ ] ;
1026: LD_ADDR_EXP 6
1030: PUSH
1031: EMPTY
1032: ST_TO_ADDR
// if dezert = false and tick mod 33600 = 0 then
1033: LD_EXP 37
1037: PUSH
1038: LD_INT 0
1040: EQUAL
1041: PUSH
1042: LD_OWVAR 1
1046: PUSH
1047: LD_INT 33600
1049: MOD
1050: PUSH
1051: LD_INT 0
1053: EQUAL
1054: AND
1055: IFFALSE 1115
// begin p := Rand ( 1 , 5 ) ;
1057: LD_ADDR_VAR 0 2
1061: PUSH
1062: LD_INT 1
1064: PPUSH
1065: LD_INT 5
1067: PPUSH
1068: CALL_OW 12
1072: ST_TO_ADDR
// if p <= [ 4 , 3 , 3 ] [ game_difficulty ] then
1073: LD_VAR 0 2
1077: PUSH
1078: LD_INT 4
1080: PUSH
1081: LD_INT 3
1083: PUSH
1084: LD_INT 3
1086: PUSH
1087: EMPTY
1088: LIST
1089: LIST
1090: LIST
1091: PUSH
1092: LD_EXP 2
1096: ARRAY
1097: LESSEQUAL
1098: IFFALSE 1115
// begin RaiseSailEvent ( 92 ) ;
1100: LD_INT 92
1102: PPUSH
1103: CALL_OW 427
// dezert := true ;
1107: LD_ADDR_EXP 37
1111: PUSH
1112: LD_INT 1
1114: ST_TO_ADDR
// end ; end ; if tick mod 8400 = 0 then
1115: LD_OWVAR 1
1119: PUSH
1120: LD_INT 8400
1122: MOD
1123: PUSH
1124: LD_INT 0
1126: EQUAL
1127: IFFALSE 1136
// RaiseSailEvent ( 101 ) ;
1129: LD_INT 101
1131: PPUSH
1132: CALL_OW 427
// if MineExist ( 8 ) and u_mine = false then
1136: LD_INT 8
1138: PPUSH
1139: CALL 7018 0 1
1143: PUSH
1144: LD_EXP 13
1148: PUSH
1149: LD_INT 0
1151: EQUAL
1152: AND
1153: IFFALSE 1170
// begin u_mine := true ;
1155: LD_ADDR_EXP 13
1159: PUSH
1160: LD_INT 1
1162: ST_TO_ADDR
// ChangeMissionObjectives ( DS-T1m ) ;
1163: LD_STRING DS-T1m
1165: PPUSH
1166: CALL_OW 337
// end ; if FacExist ( 8 ) and u_fac = false then
1170: LD_INT 8
1172: PPUSH
1173: CALL 7080 0 1
1177: PUSH
1178: LD_EXP 14
1182: PUSH
1183: LD_INT 0
1185: EQUAL
1186: AND
1187: IFFALSE 1204
// begin u_fac := true ;
1189: LD_ADDR_EXP 14
1193: PUSH
1194: LD_INT 1
1196: ST_TO_ADDR
// ChangeMissionObjectives ( DS-T1f ) ;
1197: LD_STRING DS-T1f
1199: PPUSH
1200: CALL_OW 337
// end ; if hero_died then
1204: LD_EXP 33
1208: IFFALSE 1217
// YouLost ( DS-h1 ) ;
1210: LD_STRING DS-h1
1212: PPUSH
1213: CALL_OW 104
// if fort_destroyed then
1217: LD_EXP 32
1221: IFFALSE 1230
// YouLost ( DS-h2 ) ;
1223: LD_STRING DS-h2
1225: PPUSH
1226: CALL_OW 104
// if GetDistUnits ( leopold , l_cmndr ) > 6 and meeting_start = false then
1230: LD_EXP 7
1234: PPUSH
1235: LD_EXP 49
1239: PPUSH
1240: CALL_OW 296
1244: PUSH
1245: LD_INT 6
1247: GREATER
1248: PUSH
1249: LD_EXP 26
1253: PUSH
1254: LD_INT 0
1256: EQUAL
1257: AND
1258: IFFALSE 1281
// begin if not HasTask ( leopold ) then
1260: LD_EXP 7
1264: PPUSH
1265: CALL_OW 314
1269: NOT
1270: IFFALSE 1279
// RaiseSailEvent ( 1 ) ;
1272: LD_INT 1
1274: PPUSH
1275: CALL_OW 427
// end else
1279: GO 1298
// if meeting_start = false then
1281: LD_EXP 26
1285: PUSH
1286: LD_INT 0
1288: EQUAL
1289: IFFALSE 1298
// begin RaiseSailEvent ( 2 ) ;
1291: LD_INT 2
1293: PPUSH
1294: CALL_OW 427
// end ; if game_time >= [ 50 50$00 , 62 62$30 , 72 72$00 ] [ game_difficulty ] and meeting_end = false then
1298: LD_EXP 3
1302: PUSH
1303: LD_INT 105000
1305: PUSH
1306: LD_INT 131250
1308: PUSH
1309: LD_INT 151200
1311: PUSH
1312: EMPTY
1313: LIST
1314: LIST
1315: LIST
1316: PUSH
1317: LD_EXP 2
1321: ARRAY
1322: GREATEREQUAL
1323: PUSH
1324: LD_EXP 29
1328: PUSH
1329: LD_INT 0
1331: EQUAL
1332: AND
1333: IFFALSE 1350
// begin meeting_end := true ;
1335: LD_ADDR_EXP 29
1339: PUSH
1340: LD_INT 1
1342: ST_TO_ADDR
// RaiseSailEvent ( 200 ) ;
1343: LD_INT 200
1345: PPUSH
1346: CALL_OW 427
// end ; if meeting_time = 0 0$00 and meeting_arive = false then
1350: LD_EXP 30
1354: PUSH
1355: LD_INT 0
1357: EQUAL
1358: PUSH
1359: LD_EXP 27
1363: PUSH
1364: LD_INT 0
1366: EQUAL
1367: AND
1368: IFFALSE 1392
// begin meeting_arive := true ;
1370: LD_ADDR_EXP 27
1374: PUSH
1375: LD_INT 1
1377: ST_TO_ADDR
// game_strings := [ ] ;
1378: LD_ADDR_EXP 6
1382: PUSH
1383: EMPTY
1384: ST_TO_ADDR
// RaiseSailEvent ( 10 ) ;
1385: LD_INT 10
1387: PPUSH
1388: CALL_OW 427
// end ; if meeting_arive then
1392: LD_EXP 27
1396: IFFALSE 2195
// begin if arabian_attack = false and tick mod 4200 = 0 then
1398: LD_EXP 38
1402: PUSH
1403: LD_INT 0
1405: EQUAL
1406: PUSH
1407: LD_OWVAR 1
1411: PUSH
1412: LD_INT 4200
1414: MOD
1415: PUSH
1416: LD_INT 0
1418: EQUAL
1419: AND
1420: IFFALSE 1473
// begin p := Rand ( 1 , 100 ) ;
1422: LD_ADDR_VAR 0 2
1426: PUSH
1427: LD_INT 1
1429: PPUSH
1430: LD_INT 100
1432: PPUSH
1433: CALL_OW 12
1437: ST_TO_ADDR
// if p <= [ 85 , 90 , 95 ] [ game_difficulty ] then
1438: LD_VAR 0 2
1442: PUSH
1443: LD_INT 85
1445: PUSH
1446: LD_INT 90
1448: PUSH
1449: LD_INT 95
1451: PUSH
1452: EMPTY
1453: LIST
1454: LIST
1455: LIST
1456: PUSH
1457: LD_EXP 2
1461: ARRAY
1462: LESSEQUAL
1463: IFFALSE 1473
// arabian_attack := true ;
1465: LD_ADDR_EXP 38
1469: PUSH
1470: LD_INT 1
1472: ST_TO_ADDR
// end ; if russian_trade = false and russian_attack = false and tick > 52500 then
1473: LD_EXP 43
1477: PUSH
1478: LD_INT 0
1480: EQUAL
1481: PUSH
1482: LD_EXP 39
1486: PUSH
1487: LD_INT 0
1489: EQUAL
1490: AND
1491: PUSH
1492: LD_OWVAR 1
1496: PUSH
1497: LD_INT 52500
1499: GREATER
1500: AND
1501: IFFALSE 1572
// begin russian_trade = true ;
1503: LD_ADDR_EXP 43
1507: PUSH
1508: LD_INT 1
1510: ST_TO_ADDR
// DialogueOn ;
1511: CALL_OW 6
// SayRadio ( ru_comander , DS-DR-RTr ) ;
1515: LD_EXP 47
1519: PPUSH
1520: LD_STRING DS-DR-RTr
1522: PPUSH
1523: CALL_OW 94
// Say ( l_cmndr , DS-DC-RTr ) ;
1527: LD_EXP 49
1531: PPUSH
1532: LD_STRING DS-DC-RTr
1534: PPUSH
1535: CALL_OW 88
// SayRadio ( ru_comander , DS-DR-RTr2 ) ;
1539: LD_EXP 47
1543: PPUSH
1544: LD_STRING DS-DR-RTr2
1546: PPUSH
1547: CALL_OW 94
// DialogueOff ;
1551: CALL_OW 7
// ChangeMissionObjectives ( DS-T2 ) ;
1555: LD_STRING DS-T2
1557: PPUSH
1558: CALL_OW 337
// SetAreaMapShow ( tree , 1 ) ;
1562: LD_INT 10
1564: PPUSH
1565: LD_INT 1
1567: PPUSH
1568: CALL_OW 424
// end ; if russian_trade and cargo_ok = false and russian_timer > 0 0$00 then
1572: LD_EXP 43
1576: PUSH
1577: LD_EXP 35
1581: PUSH
1582: LD_INT 0
1584: EQUAL
1585: AND
1586: PUSH
1587: LD_EXP 31
1591: PUSH
1592: LD_INT 0
1594: GREATER
1595: AND
1596: IFFALSE 1845
// begin if FilterUnitsInArea ( tree , ( [ [ f_empty ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] , [ f_not , [ f_control , control_remote ] ] ] ) ) > 0 then
1598: LD_INT 10
1600: PPUSH
1601: LD_INT 58
1603: PUSH
1604: EMPTY
1605: LIST
1606: PUSH
1607: LD_INT 2
1609: PUSH
1610: LD_INT 34
1612: PUSH
1613: LD_INT 32
1615: PUSH
1616: EMPTY
1617: LIST
1618: LIST
1619: PUSH
1620: LD_INT 34
1622: PUSH
1623: LD_INT 12
1625: PUSH
1626: EMPTY
1627: LIST
1628: LIST
1629: PUSH
1630: EMPTY
1631: LIST
1632: LIST
1633: LIST
1634: PUSH
1635: LD_INT 3
1637: PUSH
1638: LD_INT 33
1640: PUSH
1641: LD_INT 2
1643: PUSH
1644: EMPTY
1645: LIST
1646: LIST
1647: PUSH
1648: EMPTY
1649: LIST
1650: LIST
1651: PUSH
1652: EMPTY
1653: LIST
1654: LIST
1655: LIST
1656: PPUSH
1657: CALL_OW 70
1661: PUSH
1662: LD_INT 0
1664: GREATER
1665: IFFALSE 1845
// if GetCargo ( FilterUnitsInArea ( tree , ( [ [ f_empty ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] , [ f_not , [ f_control , control_remote ] ] ] ) ) [ 1 ] , mat_siberit ) = 100 then
1667: LD_INT 10
1669: PPUSH
1670: LD_INT 58
1672: PUSH
1673: EMPTY
1674: LIST
1675: PUSH
1676: LD_INT 2
1678: PUSH
1679: LD_INT 34
1681: PUSH
1682: LD_INT 32
1684: PUSH
1685: EMPTY
1686: LIST
1687: LIST
1688: PUSH
1689: LD_INT 34
1691: PUSH
1692: LD_INT 12
1694: PUSH
1695: EMPTY
1696: LIST
1697: LIST
1698: PUSH
1699: EMPTY
1700: LIST
1701: LIST
1702: LIST
1703: PUSH
1704: LD_INT 3
1706: PUSH
1707: LD_INT 33
1709: PUSH
1710: LD_INT 2
1712: PUSH
1713: EMPTY
1714: LIST
1715: LIST
1716: PUSH
1717: EMPTY
1718: LIST
1719: LIST
1720: PUSH
1721: EMPTY
1722: LIST
1723: LIST
1724: LIST
1725: PPUSH
1726: CALL_OW 70
1730: PUSH
1731: LD_INT 1
1733: ARRAY
1734: PPUSH
1735: LD_INT 3
1737: PPUSH
1738: CALL_OW 289
1742: PUSH
1743: LD_INT 100
1745: EQUAL
1746: IFFALSE 1845
// begin cargo_ok := true ;
1748: LD_ADDR_EXP 35
1752: PUSH
1753: LD_INT 1
1755: ST_TO_ADDR
// RemoveUnit ( FilterUnitsInArea ( tree , ( [ [ f_empty ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] , [ f_not , [ f_control , control_remote ] ] ] ) ) [ 1 ] ) ;
1756: LD_INT 10
1758: PPUSH
1759: LD_INT 58
1761: PUSH
1762: EMPTY
1763: LIST
1764: PUSH
1765: LD_INT 2
1767: PUSH
1768: LD_INT 34
1770: PUSH
1771: LD_INT 32
1773: PUSH
1774: EMPTY
1775: LIST
1776: LIST
1777: PUSH
1778: LD_INT 34
1780: PUSH
1781: LD_INT 12
1783: PUSH
1784: EMPTY
1785: LIST
1786: LIST
1787: PUSH
1788: EMPTY
1789: LIST
1790: LIST
1791: LIST
1792: PUSH
1793: LD_INT 3
1795: PUSH
1796: LD_INT 33
1798: PUSH
1799: LD_INT 2
1801: PUSH
1802: EMPTY
1803: LIST
1804: LIST
1805: PUSH
1806: EMPTY
1807: LIST
1808: LIST
1809: PUSH
1810: EMPTY
1811: LIST
1812: LIST
1813: LIST
1814: PPUSH
1815: CALL_OW 70
1819: PUSH
1820: LD_INT 1
1822: ARRAY
1823: PPUSH
1824: CALL_OW 64
// ChangeMissionObjectives ( DS-T2-out ) ;
1828: LD_STRING DS-T2-out
1830: PPUSH
1831: CALL_OW 337
// SetAreaMapShow ( tree , 0 ) ;
1835: LD_INT 10
1837: PPUSH
1838: LD_INT 0
1840: PPUSH
1841: CALL_OW 424
// end ; end ; if russian_attack = false and russian_trade and cargo_ok = false and russian_timer = 0 0$00 then
1845: LD_EXP 39
1849: PUSH
1850: LD_INT 0
1852: EQUAL
1853: PUSH
1854: LD_EXP 43
1858: AND
1859: PUSH
1860: LD_EXP 35
1864: PUSH
1865: LD_INT 0
1867: EQUAL
1868: AND
1869: PUSH
1870: LD_EXP 31
1874: PUSH
1875: LD_INT 0
1877: EQUAL
1878: AND
1879: IFFALSE 1906
// begin russian_attack := true ;
1881: LD_ADDR_EXP 39
1885: PUSH
1886: LD_INT 1
1888: ST_TO_ADDR
// ChangeMissionObjectives ( DS-T2-out ) ;
1889: LD_STRING DS-T2-out
1891: PPUSH
1892: CALL_OW 337
// SetAreaMapShow ( tree , 0 ) ;
1896: LD_INT 10
1898: PPUSH
1899: LD_INT 0
1901: PPUSH
1902: CALL_OW 424
// end ; if russian_trade = false and russian_attack = false and american_attack = false and tick mod 21000 = 0 then
1906: LD_EXP 43
1910: PUSH
1911: LD_INT 0
1913: EQUAL
1914: PUSH
1915: LD_EXP 39
1919: PUSH
1920: LD_INT 0
1922: EQUAL
1923: AND
1924: PUSH
1925: LD_EXP 40
1929: PUSH
1930: LD_INT 0
1932: EQUAL
1933: AND
1934: PUSH
1935: LD_OWVAR 1
1939: PUSH
1940: LD_INT 21000
1942: MOD
1943: PUSH
1944: LD_INT 0
1946: EQUAL
1947: AND
1948: IFFALSE 2001
// begin p := Rand ( 1 , 100 ) ;
1950: LD_ADDR_VAR 0 2
1954: PUSH
1955: LD_INT 1
1957: PPUSH
1958: LD_INT 100
1960: PPUSH
1961: CALL_OW 12
1965: ST_TO_ADDR
// if p <= [ 35 , 45 , 55 ] [ game_difficulty ] then
1966: LD_VAR 0 2
1970: PUSH
1971: LD_INT 35
1973: PUSH
1974: LD_INT 45
1976: PUSH
1977: LD_INT 55
1979: PUSH
1980: EMPTY
1981: LIST
1982: LIST
1983: LIST
1984: PUSH
1985: LD_EXP 2
1989: ARRAY
1990: LESSEQUAL
1991: IFFALSE 2001
// russian_attack := true ;
1993: LD_ADDR_EXP 39
1997: PUSH
1998: LD_INT 1
2000: ST_TO_ADDR
// end ; if american_help = false and american_attack = false and russian_attack = false and tick mod 31500 = 0 then
2001: LD_EXP 41
2005: PUSH
2006: LD_INT 0
2008: EQUAL
2009: PUSH
2010: LD_EXP 40
2014: PUSH
2015: LD_INT 0
2017: EQUAL
2018: AND
2019: PUSH
2020: LD_EXP 39
2024: PUSH
2025: LD_INT 0
2027: EQUAL
2028: AND
2029: PUSH
2030: LD_OWVAR 1
2034: PUSH
2035: LD_INT 31500
2037: MOD
2038: PUSH
2039: LD_INT 0
2041: EQUAL
2042: AND
2043: IFFALSE 2096
// begin p := Rand ( 1 , 100 ) ;
2045: LD_ADDR_VAR 0 2
2049: PUSH
2050: LD_INT 1
2052: PPUSH
2053: LD_INT 100
2055: PPUSH
2056: CALL_OW 12
2060: ST_TO_ADDR
// if p <= [ 33 , 44 , 55 ] [ game_difficulty ] then
2061: LD_VAR 0 2
2065: PUSH
2066: LD_INT 33
2068: PUSH
2069: LD_INT 44
2071: PUSH
2072: LD_INT 55
2074: PUSH
2075: EMPTY
2076: LIST
2077: LIST
2078: LIST
2079: PUSH
2080: LD_EXP 2
2084: ARRAY
2085: LESSEQUAL
2086: IFFALSE 2096
// american_attack := true ;
2088: LD_ADDR_EXP 40
2092: PUSH
2093: LD_INT 1
2095: ST_TO_ADDR
// end ; if american_attack = false and russian_attack = false and american_help = false and tick mod 21200 = 0 then
2096: LD_EXP 40
2100: PUSH
2101: LD_INT 0
2103: EQUAL
2104: PUSH
2105: LD_EXP 39
2109: PUSH
2110: LD_INT 0
2112: EQUAL
2113: AND
2114: PUSH
2115: LD_EXP 41
2119: PUSH
2120: LD_INT 0
2122: EQUAL
2123: AND
2124: PUSH
2125: LD_OWVAR 1
2129: PUSH
2130: LD_INT 21200
2132: MOD
2133: PUSH
2134: LD_INT 0
2136: EQUAL
2137: AND
2138: IFFALSE 2195
// begin p := Rand ( 1 , 100 ) ;
2140: LD_ADDR_VAR 0 2
2144: PUSH
2145: LD_INT 1
2147: PPUSH
2148: LD_INT 100
2150: PPUSH
2151: CALL_OW 12
2155: ST_TO_ADDR
// if p <= american_hchan then
2156: LD_VAR 0 2
2160: PUSH
2161: LD_EXP 36
2165: LESSEQUAL
2166: IFFALSE 2195
// begin american_help := true ;
2168: LD_ADDR_EXP 41
2172: PUSH
2173: LD_INT 1
2175: ST_TO_ADDR
// SayRadio ( am_comander , DS-amhelp ) ;
2176: LD_EXP 46
2180: PPUSH
2181: LD_STRING DS-amhelp
2183: PPUSH
2184: CALL_OW 94
// RaiseSailEvent ( 91 ) ;
2188: LD_INT 91
2190: PPUSH
2191: CALL_OW 427
// end ; end ; end ; if american_attack and american_timeing = 0 0$00 and FilterAllUnits ( [ f_side , 1 ] ) = 0 then
2195: LD_EXP 40
2199: PUSH
2200: LD_EXP 25
2204: PUSH
2205: LD_INT 0
2207: EQUAL
2208: AND
2209: PUSH
2210: LD_INT 22
2212: PUSH
2213: LD_INT 1
2215: PUSH
2216: EMPTY
2217: LIST
2218: LIST
2219: PPUSH
2220: CALL_OW 69
2224: PUSH
2225: LD_INT 0
2227: EQUAL
2228: AND
2229: IFFALSE 2331
// begin american_timeing := Rand ( 17 17$00 , 20 20$00 ) ;
2231: LD_ADDR_EXP 25
2235: PUSH
2236: LD_INT 35700
2238: PPUSH
2239: LD_INT 42000
2241: PPUSH
2242: CALL_OW 12
2246: ST_TO_ADDR
// SayRadio ( scout , DS-DZ-U ) ;
2247: LD_EXP 12
2251: PPUSH
2252: LD_STRING DS-DZ-U
2254: PPUSH
2255: CALL_OW 94
// Wait ( 0 0$33 ) ;
2259: LD_INT 1155
2261: PPUSH
2262: CALL_OW 67
// x := Rand ( 1 , 2 ) ;
2266: LD_ADDR_VAR 0 3
2270: PUSH
2271: LD_INT 1
2273: PPUSH
2274: LD_INT 2
2276: PPUSH
2277: CALL_OW 12
2281: ST_TO_ADDR
// case x of 1 :
2282: LD_VAR 0 3
2286: PUSH
2287: LD_INT 1
2289: DOUBLE
2290: EQUAL
2291: IFTRUE 2295
2293: GO 2305
2295: POP
// RaiseSailEvent ( 41 ) ; 2 :
2296: LD_INT 41
2298: PPUSH
2299: CALL_OW 427
2303: GO 2324
2305: LD_INT 2
2307: DOUBLE
2308: EQUAL
2309: IFTRUE 2313
2311: GO 2323
2313: POP
// RaiseSailEvent ( 42 ) ; end ;
2314: LD_INT 42
2316: PPUSH
2317: CALL_OW 427
2321: GO 2324
2323: POP
// RaiseSailEvent ( 42 ) ;
2324: LD_INT 42
2326: PPUSH
2327: CALL_OW 427
// end ; if russian_attack and russian_timeing = 0 0$00 and FilterAllUnits ( [ f_side , 3 ] ) = 0 then
2331: LD_EXP 39
2335: PUSH
2336: LD_EXP 24
2340: PUSH
2341: LD_INT 0
2343: EQUAL
2344: AND
2345: PUSH
2346: LD_INT 22
2348: PUSH
2349: LD_INT 3
2351: PUSH
2352: EMPTY
2353: LIST
2354: LIST
2355: PPUSH
2356: CALL_OW 69
2360: PUSH
2361: LD_INT 0
2363: EQUAL
2364: AND
2365: IFFALSE 2421
// begin russian_timeing := Rand ( 17 17$00 , 20 20$00 ) ;
2367: LD_ADDR_EXP 24
2371: PUSH
2372: LD_INT 35700
2374: PPUSH
2375: LD_INT 42000
2377: PPUSH
2378: CALL_OW 12
2382: ST_TO_ADDR
// SayRadio ( scout , DS-DZ-R ) ;
2383: LD_EXP 12
2387: PPUSH
2388: LD_STRING DS-DZ-R
2390: PPUSH
2391: CALL_OW 94
// Wait ( 0 0$45 ) ;
2395: LD_INT 1575
2397: PPUSH
2398: CALL_OW 67
// SayRadio ( ru_comander , DS-DR-R1 ) ;
2402: LD_EXP 47
2406: PPUSH
2407: LD_STRING DS-DR-R1
2409: PPUSH
2410: CALL_OW 94
// RaiseSailEvent ( 51 ) ;
2414: LD_INT 51
2416: PPUSH
2417: CALL_OW 427
// end ; if mission_time >= 25 25$00 and arabian_force < 10 then
2421: LD_EXP 34
2425: PUSH
2426: LD_INT 52500
2428: GREATEREQUAL
2429: PUSH
2430: LD_EXP 20
2434: PUSH
2435: LD_INT 10
2437: LESS
2438: AND
2439: IFFALSE 2463
// begin mission_time := 0 0$00 ;
2441: LD_ADDR_EXP 34
2445: PUSH
2446: LD_INT 0
2448: ST_TO_ADDR
// arabian_force := arabian_force + 1 ;
2449: LD_ADDR_EXP 20
2453: PUSH
2454: LD_EXP 20
2458: PUSH
2459: LD_INT 1
2461: PLUS
2462: ST_TO_ADDR
// end ; if arabian_timeing = 0 0$00 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_weapon , ar_control_tower ] ] ] ) = 0 then
2463: LD_EXP 23
2467: PUSH
2468: LD_INT 0
2470: EQUAL
2471: PUSH
2472: LD_INT 22
2474: PUSH
2475: LD_INT 2
2477: PUSH
2478: EMPTY
2479: LIST
2480: LIST
2481: PUSH
2482: LD_INT 3
2484: PUSH
2485: LD_INT 34
2487: PUSH
2488: LD_INT 31
2490: PUSH
2491: EMPTY
2492: LIST
2493: LIST
2494: PUSH
2495: EMPTY
2496: LIST
2497: LIST
2498: PUSH
2499: EMPTY
2500: LIST
2501: LIST
2502: PPUSH
2503: CALL_OW 69
2507: PUSH
2508: LD_INT 0
2510: EQUAL
2511: AND
2512: IFFALSE 2710
// begin arabian_timeing := 7 7$30 ;
2514: LD_ADDR_EXP 23
2518: PUSH
2519: LD_INT 15750
2521: ST_TO_ADDR
// x := Rand ( 1 , 3 ) ;
2522: LD_ADDR_VAR 0 3
2526: PUSH
2527: LD_INT 1
2529: PPUSH
2530: LD_INT 3
2532: PPUSH
2533: CALL_OW 12
2537: ST_TO_ADDR
// SayRadio ( scout , DS-DZ-H ) ;
2538: LD_EXP 12
2542: PPUSH
2543: LD_STRING DS-DZ-H
2545: PPUSH
2546: CALL_OW 94
// case x of 1 :
2550: LD_VAR 0 3
2554: PUSH
2555: LD_INT 1
2557: DOUBLE
2558: EQUAL
2559: IFTRUE 2563
2561: GO 2573
2563: POP
// RaiseSailEvent ( 31 ) ; 2 :
2564: LD_INT 31
2566: PPUSH
2567: CALL_OW 427
2571: GO 2610
2573: LD_INT 2
2575: DOUBLE
2576: EQUAL
2577: IFTRUE 2581
2579: GO 2591
2581: POP
// RaiseSailEvent ( 32 ) ; 3 :
2582: LD_INT 32
2584: PPUSH
2585: CALL_OW 427
2589: GO 2610
2591: LD_INT 3
2593: DOUBLE
2594: EQUAL
2595: IFTRUE 2599
2597: GO 2609
2599: POP
// RaiseSailEvent ( 33 ) ; end ;
2600: LD_INT 33
2602: PPUSH
2603: CALL_OW 427
2607: GO 2610
2609: POP
// RaiseSailEvent ( 33 ) ;
2610: LD_INT 33
2612: PPUSH
2613: CALL_OW 427
// if game_difficulty > 1 then
2617: LD_EXP 2
2621: PUSH
2622: LD_INT 1
2624: GREATER
2625: IFFALSE 2634
// RaiseSailEvent ( 33 ) ;
2627: LD_INT 33
2629: PPUSH
2630: CALL_OW 427
// if heike_dialog1 = false then
2634: LD_EXP 44
2638: PUSH
2639: LD_INT 0
2641: EQUAL
2642: IFFALSE 2673
// begin heike_dialog1 := true ;
2644: LD_ADDR_EXP 44
2648: PUSH
2649: LD_INT 1
2651: ST_TO_ADDR
// Wait ( 0 0$03 ) ;
2652: LD_INT 105
2654: PPUSH
2655: CALL_OW 67
// SayRadio ( ar_comander , heike1 ) ;
2659: LD_EXP 48
2663: PPUSH
2664: LD_STRING heike1
2666: PPUSH
2667: CALL_OW 94
// end else
2671: GO 2710
// if heike_dialog2 = false then
2673: LD_EXP 45
2677: PUSH
2678: LD_INT 0
2680: EQUAL
2681: IFFALSE 2710
// begin heike_dialog2 := true ;
2683: LD_ADDR_EXP 45
2687: PUSH
2688: LD_INT 1
2690: ST_TO_ADDR
// Wait ( 0 0$03 ) ;
2691: LD_INT 105
2693: PPUSH
2694: CALL_OW 67
// SayRadio ( ar_comander , heike2 ) ;
2698: LD_EXP 48
2702: PPUSH
2703: LD_STRING heike2
2705: PPUSH
2706: CALL_OW 94
// end ; end ; if FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) > 0 then
2710: LD_INT 22
2712: PUSH
2713: LD_INT 2
2715: PUSH
2716: EMPTY
2717: LIST
2718: LIST
2719: PUSH
2720: LD_INT 33
2722: PUSH
2723: LD_INT 2
2725: PUSH
2726: EMPTY
2727: LIST
2728: LIST
2729: PUSH
2730: EMPTY
2731: LIST
2732: LIST
2733: PPUSH
2734: CALL_OW 69
2738: PUSH
2739: LD_INT 0
2741: GREATER
2742: IFFALSE 2751
// ConnectWithTower ( 2 ) ;
2744: LD_INT 2
2746: PPUSH
2747: CALL 7128 0 1
// if FilterAllUnits ( [ [ [ f_side , 2 ] , [ f_not , [ f_weapon , ar_control_tower ] ] , [ f_not , [ f_hastask ] ] ] ] ) > 0 then
2751: LD_INT 22
2753: PUSH
2754: LD_INT 2
2756: PUSH
2757: EMPTY
2758: LIST
2759: LIST
2760: PUSH
2761: LD_INT 3
2763: PUSH
2764: LD_INT 34
2766: PUSH
2767: LD_INT 31
2769: PUSH
2770: EMPTY
2771: LIST
2772: LIST
2773: PUSH
2774: EMPTY
2775: LIST
2776: LIST
2777: PUSH
2778: LD_INT 3
2780: PUSH
2781: LD_INT 60
2783: PUSH
2784: EMPTY
2785: LIST
2786: PUSH
2787: EMPTY
2788: LIST
2789: LIST
2790: PUSH
2791: EMPTY
2792: LIST
2793: LIST
2794: LIST
2795: PUSH
2796: EMPTY
2797: LIST
2798: PPUSH
2799: CALL_OW 69
2803: PUSH
2804: LD_INT 0
2806: GREATER
2807: IFFALSE 2953
// begin filter := FilterAllUnits ( [ [ [ f_side , 2 ] , [ f_not , [ f_weapon , ar_control_tower ] ] , [ f_not , [ f_hastask ] ] ] ] ) ;
2809: LD_ADDR_VAR 0 4
2813: PUSH
2814: LD_INT 22
2816: PUSH
2817: LD_INT 2
2819: PUSH
2820: EMPTY
2821: LIST
2822: LIST
2823: PUSH
2824: LD_INT 3
2826: PUSH
2827: LD_INT 34
2829: PUSH
2830: LD_INT 31
2832: PUSH
2833: EMPTY
2834: LIST
2835: LIST
2836: PUSH
2837: EMPTY
2838: LIST
2839: LIST
2840: PUSH
2841: LD_INT 3
2843: PUSH
2844: LD_INT 60
2846: PUSH
2847: EMPTY
2848: LIST
2849: PUSH
2850: EMPTY
2851: LIST
2852: LIST
2853: PUSH
2854: EMPTY
2855: LIST
2856: LIST
2857: LIST
2858: PUSH
2859: EMPTY
2860: LIST
2861: PPUSH
2862: CALL_OW 69
2866: ST_TO_ADDR
// x := SpeedFilter ( FilterAllUnits ( [ f_enemy , 2 ] ) , 20 ) ;
2867: LD_ADDR_VAR 0 3
2871: PUSH
2872: LD_INT 81
2874: PUSH
2875: LD_INT 2
2877: PUSH
2878: EMPTY
2879: LIST
2880: LIST
2881: PPUSH
2882: CALL_OW 69
2886: PPUSH
2887: LD_INT 20
2889: PPUSH
2890: CALL 8511 0 2
2894: ST_TO_ADDR
// for i = 1 to filter do
2895: LD_ADDR_VAR 0 1
2899: PUSH
2900: DOUBLE
2901: LD_INT 1
2903: DEC
2904: ST_TO_ADDR
2905: LD_VAR 0 4
2909: PUSH
2910: FOR_TO
2911: IFFALSE 2951
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( x , filter [ i ] ) ) ;
2913: LD_VAR 0 4
2917: PUSH
2918: LD_VAR 0 1
2922: ARRAY
2923: PPUSH
2924: LD_VAR 0 3
2928: PPUSH
2929: LD_VAR 0 4
2933: PUSH
2934: LD_VAR 0 1
2938: ARRAY
2939: PPUSH
2940: CALL_OW 74
2944: PPUSH
2945: CALL_OW 115
2949: GO 2910
2951: POP
2952: POP
// end ; if FilterAllUnits ( [ [ [ f_side , 3 ] , [ f_not , [ f_hastask ] ] ] ] ) > 0 then
2953: LD_INT 22
2955: PUSH
2956: LD_INT 3
2958: PUSH
2959: EMPTY
2960: LIST
2961: LIST
2962: PUSH
2963: LD_INT 3
2965: PUSH
2966: LD_INT 60
2968: PUSH
2969: EMPTY
2970: LIST
2971: PUSH
2972: EMPTY
2973: LIST
2974: LIST
2975: PUSH
2976: EMPTY
2977: LIST
2978: LIST
2979: PUSH
2980: EMPTY
2981: LIST
2982: PPUSH
2983: CALL_OW 69
2987: PUSH
2988: LD_INT 0
2990: GREATER
2991: IFFALSE 3137
// begin filter := FilterAllUnits ( [ [ [ f_side , 3 ] , [ f_not , [ f_weapon , ar_control_tower ] ] , [ f_not , [ f_hastask ] ] ] ] ) ;
2993: LD_ADDR_VAR 0 4
2997: PUSH
2998: LD_INT 22
3000: PUSH
3001: LD_INT 3
3003: PUSH
3004: EMPTY
3005: LIST
3006: LIST
3007: PUSH
3008: LD_INT 3
3010: PUSH
3011: LD_INT 34
3013: PUSH
3014: LD_INT 31
3016: PUSH
3017: EMPTY
3018: LIST
3019: LIST
3020: PUSH
3021: EMPTY
3022: LIST
3023: LIST
3024: PUSH
3025: LD_INT 3
3027: PUSH
3028: LD_INT 60
3030: PUSH
3031: EMPTY
3032: LIST
3033: PUSH
3034: EMPTY
3035: LIST
3036: LIST
3037: PUSH
3038: EMPTY
3039: LIST
3040: LIST
3041: LIST
3042: PUSH
3043: EMPTY
3044: LIST
3045: PPUSH
3046: CALL_OW 69
3050: ST_TO_ADDR
// x := SpeedFilter ( FilterAllUnits ( [ f_enemy , 3 ] ) , 20 ) ;
3051: LD_ADDR_VAR 0 3
3055: PUSH
3056: LD_INT 81
3058: PUSH
3059: LD_INT 3
3061: PUSH
3062: EMPTY
3063: LIST
3064: LIST
3065: PPUSH
3066: CALL_OW 69
3070: PPUSH
3071: LD_INT 20
3073: PPUSH
3074: CALL 8511 0 2
3078: ST_TO_ADDR
// for i = 1 to filter do
3079: LD_ADDR_VAR 0 1
3083: PUSH
3084: DOUBLE
3085: LD_INT 1
3087: DEC
3088: ST_TO_ADDR
3089: LD_VAR 0 4
3093: PUSH
3094: FOR_TO
3095: IFFALSE 3135
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( x , filter [ i ] ) ) ;
3097: LD_VAR 0 4
3101: PUSH
3102: LD_VAR 0 1
3106: ARRAY
3107: PPUSH
3108: LD_VAR 0 3
3112: PPUSH
3113: LD_VAR 0 4
3117: PUSH
3118: LD_VAR 0 1
3122: ARRAY
3123: PPUSH
3124: CALL_OW 74
3128: PPUSH
3129: CALL_OW 115
3133: GO 3094
3135: POP
3136: POP
// end ; if FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] ] ] ) > 0 then
3137: LD_INT 22
3139: PUSH
3140: LD_INT 1
3142: PUSH
3143: EMPTY
3144: LIST
3145: LIST
3146: PUSH
3147: LD_INT 3
3149: PUSH
3150: LD_INT 60
3152: PUSH
3153: EMPTY
3154: LIST
3155: PUSH
3156: EMPTY
3157: LIST
3158: LIST
3159: PUSH
3160: EMPTY
3161: LIST
3162: LIST
3163: PUSH
3164: EMPTY
3165: LIST
3166: PPUSH
3167: CALL_OW 69
3171: PUSH
3172: LD_INT 0
3174: GREATER
3175: IFFALSE 3321
// begin filter := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_not , [ f_weapon , ar_control_tower ] ] , [ f_not , [ f_hastask ] ] ] ] ) ;
3177: LD_ADDR_VAR 0 4
3181: PUSH
3182: LD_INT 22
3184: PUSH
3185: LD_INT 1
3187: PUSH
3188: EMPTY
3189: LIST
3190: LIST
3191: PUSH
3192: LD_INT 3
3194: PUSH
3195: LD_INT 34
3197: PUSH
3198: LD_INT 31
3200: PUSH
3201: EMPTY
3202: LIST
3203: LIST
3204: PUSH
3205: EMPTY
3206: LIST
3207: LIST
3208: PUSH
3209: LD_INT 3
3211: PUSH
3212: LD_INT 60
3214: PUSH
3215: EMPTY
3216: LIST
3217: PUSH
3218: EMPTY
3219: LIST
3220: LIST
3221: PUSH
3222: EMPTY
3223: LIST
3224: LIST
3225: LIST
3226: PUSH
3227: EMPTY
3228: LIST
3229: PPUSH
3230: CALL_OW 69
3234: ST_TO_ADDR
// x := SpeedFilter ( FilterAllUnits ( [ f_enemy , 1 ] ) , 20 ) ;
3235: LD_ADDR_VAR 0 3
3239: PUSH
3240: LD_INT 81
3242: PUSH
3243: LD_INT 1
3245: PUSH
3246: EMPTY
3247: LIST
3248: LIST
3249: PPUSH
3250: CALL_OW 69
3254: PPUSH
3255: LD_INT 20
3257: PPUSH
3258: CALL 8511 0 2
3262: ST_TO_ADDR
// for i = 1 to filter do
3263: LD_ADDR_VAR 0 1
3267: PUSH
3268: DOUBLE
3269: LD_INT 1
3271: DEC
3272: ST_TO_ADDR
3273: LD_VAR 0 4
3277: PUSH
3278: FOR_TO
3279: IFFALSE 3319
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( x , filter [ i ] ) ) ;
3281: LD_VAR 0 4
3285: PUSH
3286: LD_VAR 0 1
3290: ARRAY
3291: PPUSH
3292: LD_VAR 0 3
3296: PPUSH
3297: LD_VAR 0 4
3301: PUSH
3302: LD_VAR 0 1
3306: ARRAY
3307: PPUSH
3308: CALL_OW 74
3312: PPUSH
3313: CALL_OW 115
3317: GO 3278
3319: POP
3320: POP
// end ; if FilterAllUnits ( [ [ [ f_side , 2 ] , [ f_weapon , ar_bio_bomb ] , [ f_not , [ f_lives , 700 ] ] ] ] ) > 0 then
3321: LD_INT 22
3323: PUSH
3324: LD_INT 2
3326: PUSH
3327: EMPTY
3328: LIST
3329: LIST
3330: PUSH
3331: LD_INT 34
3333: PUSH
3334: LD_EXP 56
3338: PUSH
3339: EMPTY
3340: LIST
3341: LIST
3342: PUSH
3343: LD_INT 3
3345: PUSH
3346: LD_INT 24
3348: PUSH
3349: LD_INT 700
3351: PUSH
3352: EMPTY
3353: LIST
3354: LIST
3355: PUSH
3356: EMPTY
3357: LIST
3358: LIST
3359: PUSH
3360: EMPTY
3361: LIST
3362: LIST
3363: LIST
3364: PUSH
3365: EMPTY
3366: LIST
3367: PPUSH
3368: CALL_OW 69
3372: PUSH
3373: LD_INT 0
3375: GREATER
3376: IFFALSE 3475
// begin filter := FilterAllUnits ( [ [ [ f_side , 2 ] , [ f_weapon , ar_bio_bomb ] , [ f_not , [ f_lives , 700 ] ] ] ] ) ;
3378: LD_ADDR_VAR 0 4
3382: PUSH
3383: LD_INT 22
3385: PUSH
3386: LD_INT 2
3388: PUSH
3389: EMPTY
3390: LIST
3391: LIST
3392: PUSH
3393: LD_INT 34
3395: PUSH
3396: LD_EXP 56
3400: PUSH
3401: EMPTY
3402: LIST
3403: LIST
3404: PUSH
3405: LD_INT 3
3407: PUSH
3408: LD_INT 24
3410: PUSH
3411: LD_INT 700
3413: PUSH
3414: EMPTY
3415: LIST
3416: LIST
3417: PUSH
3418: EMPTY
3419: LIST
3420: LIST
3421: PUSH
3422: EMPTY
3423: LIST
3424: LIST
3425: LIST
3426: PUSH
3427: EMPTY
3428: LIST
3429: PPUSH
3430: CALL_OW 69
3434: ST_TO_ADDR
// for i = 1 to filter do
3435: LD_ADDR_VAR 0 1
3439: PUSH
3440: DOUBLE
3441: LD_INT 1
3443: DEC
3444: ST_TO_ADDR
3445: LD_VAR 0 4
3449: PUSH
3450: FOR_TO
3451: IFFALSE 3473
// SetLives ( filter [ i ] , 1 ) ;
3453: LD_VAR 0 4
3457: PUSH
3458: LD_VAR 0 1
3462: ARRAY
3463: PPUSH
3464: LD_INT 1
3466: PPUSH
3467: CALL_OW 234
3471: GO 3450
3473: POP
3474: POP
// end ; end ; end_of_file
3475: PPOPN 4
3477: END
// export function Start_Mission ; begin
3478: LD_INT 0
3480: PPUSH
// PrepareLegion ;
3481: CALL 3522 0 0
// PrepareMeeting ;
3485: CALL 4139 0 0
// case Query ( DS-text-beg ) of 1 :
3489: LD_STRING DS-text-beg
3491: PPUSH
3492: CALL_OW 97
3496: PUSH
3497: LD_INT 1
3499: DOUBLE
3500: EQUAL
3501: IFTRUE 3505
3503: GO 3508
3505: POP
// ; end ;
3506: GO 3509
3508: POP
// game_on := true ;
3509: LD_ADDR_EXP 1
3513: PUSH
3514: LD_INT 1
3516: ST_TO_ADDR
// end ;
3517: LD_VAR 0 1
3521: RET
// export l_cmndr , l_skill , l_units ; function PrepareLegion ; var i , p , filter , team ; begin
3522: LD_INT 0
3524: PPUSH
3525: PPUSH
3526: PPUSH
3527: PPUSH
3528: PPUSH
// uc_side := 8 ;
3529: LD_ADDR_OWVAR 20
3533: PUSH
3534: LD_INT 8
3536: ST_TO_ADDR
// uc_nation := 2 ;
3537: LD_ADDR_OWVAR 21
3541: PUSH
3542: LD_INT 2
3544: ST_TO_ADDR
// l_skill := [ 9 , 8 , 7 ] [ difficulty ] ;
3545: LD_ADDR_EXP 50
3549: PUSH
3550: LD_INT 9
3552: PUSH
3553: LD_INT 8
3555: PUSH
3556: LD_INT 7
3558: PUSH
3559: EMPTY
3560: LIST
3561: LIST
3562: LIST
3563: PUSH
3564: LD_OWVAR 67
3568: ARRAY
3569: ST_TO_ADDR
// l_units := [ 9 , 8 , 8 ] [ difficulty ] ;
3570: LD_ADDR_EXP 51
3574: PUSH
3575: LD_INT 9
3577: PUSH
3578: LD_INT 8
3580: PUSH
3581: LD_INT 8
3583: PUSH
3584: EMPTY
3585: LIST
3586: LIST
3587: LIST
3588: PUSH
3589: LD_OWVAR 67
3593: ARRAY
3594: ST_TO_ADDR
// filter := [ ] ;
3595: LD_ADDR_VAR 0 4
3599: PUSH
3600: EMPTY
3601: ST_TO_ADDR
// hc_gallery := desert ;
3602: LD_ADDR_OWVAR 33
3606: PUSH
3607: LD_STRING desert
3609: ST_TO_ADDR
// hc_face_number := 1 ;
3610: LD_ADDR_OWVAR 34
3614: PUSH
3615: LD_INT 1
3617: ST_TO_ADDR
// hc_skills := [ l_skill + 2 , l_skill - 1 , l_skill , l_skill + 1 ] ;
3618: LD_ADDR_OWVAR 31
3622: PUSH
3623: LD_EXP 50
3627: PUSH
3628: LD_INT 2
3630: PLUS
3631: PUSH
3632: LD_EXP 50
3636: PUSH
3637: LD_INT 1
3639: MINUS
3640: PUSH
3641: LD_EXP 50
3645: PUSH
3646: LD_EXP 50
3650: PUSH
3651: LD_INT 1
3653: PLUS
3654: PUSH
3655: EMPTY
3656: LIST
3657: LIST
3658: LIST
3659: LIST
3660: ST_TO_ADDR
// hc_sex := sex_male ;
3661: LD_ADDR_OWVAR 27
3665: PUSH
3666: LD_INT 1
3668: ST_TO_ADDR
// hc_name := Henri Ruotz ;
3669: LD_ADDR_OWVAR 26
3673: PUSH
3674: LD_STRING Henri Ruotz
3676: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
3677: LD_ADDR_OWVAR 29
3681: PUSH
3682: LD_INT 10
3684: PUSH
3685: LD_INT 10
3687: PUSH
3688: EMPTY
3689: LIST
3690: LIST
3691: ST_TO_ADDR
// hc_class := 1 ;
3692: LD_ADDR_OWVAR 28
3696: PUSH
3697: LD_INT 1
3699: ST_TO_ADDR
// hc_importance := 100 ;
3700: LD_ADDR_OWVAR 32
3704: PUSH
3705: LD_INT 100
3707: ST_TO_ADDR
// l_cmndr := CreateHuman ;
3708: LD_ADDR_EXP 49
3712: PUSH
3713: CALL_OW 44
3717: ST_TO_ADDR
// hc_importance := 0 ;
3718: LD_ADDR_OWVAR 32
3722: PUSH
3723: LD_INT 0
3725: ST_TO_ADDR
// scout := PrepareHuman ( sex_male , 1 , 0 ) ;
3726: LD_ADDR_EXP 12
3730: PUSH
3731: LD_INT 1
3733: PPUSH
3734: LD_INT 1
3736: PPUSH
3737: LD_INT 0
3739: PPUSH
3740: CALL_OW 380
3744: ST_TO_ADDR
// for i = 1 to 4 do
3745: LD_ADDR_VAR 0 2
3749: PUSH
3750: DOUBLE
3751: LD_INT 1
3753: DEC
3754: ST_TO_ADDR
3755: LD_INT 4
3757: PUSH
3758: FOR_TO
3759: IFFALSE 3809
// for p = 1 to 6 do
3761: LD_ADDR_VAR 0 3
3765: PUSH
3766: DOUBLE
3767: LD_INT 1
3769: DEC
3770: ST_TO_ADDR
3771: LD_INT 6
3773: PUSH
3774: FOR_TO
3775: IFFALSE 3805
// filter := filter ^ CreateHumanWithClass ( i , l_skill ) ;
3777: LD_ADDR_VAR 0 4
3781: PUSH
3782: LD_VAR 0 4
3786: PUSH
3787: LD_VAR 0 2
3791: PPUSH
3792: LD_EXP 50
3796: PPUSH
3797: CALL 7312 0 2
3801: ADD
3802: ST_TO_ADDR
3803: GO 3774
3805: POP
3806: POP
3807: GO 3758
3809: POP
3810: POP
// team := CharacterSelection ( text , l_units , l_units , [ sel_change_class , l_cmndr , sel_changeable , sel_not_hired ] ^ filter , [ class_soldier , class_mechanic , class_engineer , class_scientistic , class_mortar ] ) ;
3811: LD_ADDR_VAR 0 5
3815: PUSH
3816: LD_STRING text
3818: PPUSH
3819: LD_EXP 51
3823: PPUSH
3824: LD_EXP 51
3828: PPUSH
3829: LD_INT -5
3831: PUSH
3832: LD_EXP 49
3836: PUSH
3837: LD_INT -3
3839: PUSH
3840: LD_INT -2
3842: PUSH
3843: EMPTY
3844: LIST
3845: LIST
3846: LIST
3847: LIST
3848: PUSH
3849: LD_VAR 0 4
3853: ADD
3854: PPUSH
3855: LD_INT 1
3857: PUSH
3858: LD_INT 3
3860: PUSH
3861: LD_INT 2
3863: PUSH
3864: LD_INT 4
3866: PUSH
3867: LD_INT 8
3869: PUSH
3870: EMPTY
3871: LIST
3872: LIST
3873: LIST
3874: LIST
3875: LIST
3876: PPUSH
3877: CALL_OW 42
3881: ST_TO_ADDR
// for i = 1 to l_units do
3882: LD_ADDR_VAR 0 2
3886: PUSH
3887: DOUBLE
3888: LD_INT 1
3890: DEC
3891: ST_TO_ADDR
3892: LD_EXP 51
3896: PUSH
3897: FOR_TO
3898: IFFALSE 3923
// PlaceUnitArea ( team [ i ] , legion_spawn , false ) ;
3900: LD_VAR 0 5
3904: PUSH
3905: LD_VAR 0 2
3909: ARRAY
3910: PPUSH
3911: LD_INT 1
3913: PPUSH
3914: LD_INT 0
3916: PPUSH
3917: CALL_OW 49
3921: GO 3897
3923: POP
3924: POP
// PlaceUnitArea ( l_cmndr , legion_spawn , false ) ;
3925: LD_EXP 49
3929: PPUSH
3930: LD_INT 1
3932: PPUSH
3933: LD_INT 0
3935: PPUSH
3936: CALL_OW 49
// end ;
3940: LD_VAR 0 1
3944: RET
// export function PlaceCamera ; begin
3945: LD_INT 0
3947: PPUSH
// PlaceSeeing ( 46 , 48 , 8 , 10 ) ;
3948: LD_INT 46
3950: PPUSH
3951: LD_INT 48
3953: PPUSH
3954: LD_INT 8
3956: PPUSH
3957: LD_INT 10
3959: PPUSH
3960: CALL_OW 330
// PlaceSeeing ( 58 , 66 , 8 , 10 ) ;
3964: LD_INT 58
3966: PPUSH
3967: LD_INT 66
3969: PPUSH
3970: LD_INT 8
3972: PPUSH
3973: LD_INT 10
3975: PPUSH
3976: CALL_OW 330
// PlaceSeeing ( 82 , 82 , 8 , 10 ) ;
3980: LD_INT 82
3982: PPUSH
3983: LD_INT 82
3985: PPUSH
3986: LD_INT 8
3988: PPUSH
3989: LD_INT 10
3991: PPUSH
3992: CALL_OW 330
// PlaceSeeing ( 107 , 79 , 8 , 10 ) ;
3996: LD_INT 107
3998: PPUSH
3999: LD_INT 79
4001: PPUSH
4002: LD_INT 8
4004: PPUSH
4005: LD_INT 10
4007: PPUSH
4008: CALL_OW 330
// PlaceSeeing ( 101 , 57 , 8 , 10 ) ;
4012: LD_INT 101
4014: PPUSH
4015: LD_INT 57
4017: PPUSH
4018: LD_INT 8
4020: PPUSH
4021: LD_INT 10
4023: PPUSH
4024: CALL_OW 330
// PlaceSeeing ( 85 , 32 , 8 , 10 ) ;
4028: LD_INT 85
4030: PPUSH
4031: LD_INT 32
4033: PPUSH
4034: LD_INT 8
4036: PPUSH
4037: LD_INT 10
4039: PPUSH
4040: CALL_OW 330
// PlaceSeeing ( 108 , 72 , 8 , 10 ) ;
4044: LD_INT 108
4046: PPUSH
4047: LD_INT 72
4049: PPUSH
4050: LD_INT 8
4052: PPUSH
4053: LD_INT 10
4055: PPUSH
4056: CALL_OW 330
// PlaceSeeing ( 124 , 74 , 8 , 10 ) ;
4060: LD_INT 124
4062: PPUSH
4063: LD_INT 74
4065: PPUSH
4066: LD_INT 8
4068: PPUSH
4069: LD_INT 10
4071: PPUSH
4072: CALL_OW 330
// PlaceSeeing ( 67 , 33 , 8 , 20 ) ;
4076: LD_INT 67
4078: PPUSH
4079: LD_INT 33
4081: PPUSH
4082: LD_INT 8
4084: PPUSH
4085: LD_INT 20
4087: PPUSH
4088: CALL_OW 330
// RemoveSeeing ( 67 , 33 , 8 ) ;
4092: LD_INT 67
4094: PPUSH
4095: LD_INT 33
4097: PPUSH
4098: LD_INT 8
4100: PPUSH
4101: CALL_OW 331
// PlaceSeeing ( 94 , 84 , 8 , 20 ) ;
4105: LD_INT 94
4107: PPUSH
4108: LD_INT 84
4110: PPUSH
4111: LD_INT 8
4113: PPUSH
4114: LD_INT 20
4116: PPUSH
4117: CALL_OW 330
// RemoveSeeing ( 94 , 84 , 8 ) ;
4121: LD_INT 94
4123: PPUSH
4124: LD_INT 84
4126: PPUSH
4127: LD_INT 8
4129: PPUSH
4130: CALL_OW 331
// end ;
4134: LD_VAR 0 1
4138: RET
// export function PrepareMeeting ; begin
4139: LD_INT 0
4141: PPUSH
// uc_side := 6 ;
4142: LD_ADDR_OWVAR 20
4146: PUSH
4147: LD_INT 6
4149: ST_TO_ADDR
// hc_gallery := desert ;
4150: LD_ADDR_OWVAR 33
4154: PUSH
4155: LD_STRING desert
4157: ST_TO_ADDR
// hc_face_number := 2 ;
4158: LD_ADDR_OWVAR 34
4162: PUSH
4163: LD_INT 2
4165: ST_TO_ADDR
// hc_name := Leopold Drass ;
4166: LD_ADDR_OWVAR 26
4170: PUSH
4171: LD_STRING Leopold Drass
4173: ST_TO_ADDR
// hc_class := 1 ;
4174: LD_ADDR_OWVAR 28
4178: PUSH
4179: LD_INT 1
4181: ST_TO_ADDR
// hc_sex := sex_male ;
4182: LD_ADDR_OWVAR 27
4186: PUSH
4187: LD_INT 1
4189: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
4190: LD_ADDR_OWVAR 29
4194: PUSH
4195: LD_INT 12
4197: PUSH
4198: LD_INT 12
4200: PUSH
4201: EMPTY
4202: LIST
4203: LIST
4204: ST_TO_ADDR
// Leopold := CreateHuman ;
4205: LD_ADDR_EXP 7
4209: PUSH
4210: CALL_OW 44
4214: ST_TO_ADDR
// PlaceUnitArea ( Leopold , north_spawn , false ) ;
4215: LD_EXP 7
4219: PPUSH
4220: LD_INT 3
4222: PPUSH
4223: LD_INT 0
4225: PPUSH
4226: CALL_OW 49
// end ; end_of_file
4230: LD_VAR 0 1
4234: RET
// on SailEvent ( num ) do var i , filter , un , p , area ;
4235: LD_INT 0
4237: PPUSH
4238: PPUSH
4239: PPUSH
4240: PPUSH
4241: PPUSH
// begin case num of 1 :
4242: LD_VAR 0 1
4246: PUSH
4247: LD_INT 1
4249: DOUBLE
4250: EQUAL
4251: IFTRUE 4255
4253: GO 4287
4255: POP
// begin ComMoveXY ( leopold , GetX ( l_cmndr ) , GetY ( l_cmndr ) ) ;
4256: LD_EXP 7
4260: PPUSH
4261: LD_EXP 49
4265: PPUSH
4266: CALL_OW 250
4270: PPUSH
4271: LD_EXP 49
4275: PPUSH
4276: CALL_OW 251
4280: PPUSH
4281: CALL_OW 111
// end ; 2 :
4285: GO 6705
4287: LD_INT 2
4289: DOUBLE
4290: EQUAL
4291: IFTRUE 4295
4293: GO 4404
4295: POP
// begin InGameOn ;
4296: CALL_OW 8
// meeting_start := true ;
4300: LD_ADDR_EXP 26
4304: PUSH
4305: LD_INT 1
4307: ST_TO_ADDR
// ComTurnUnit ( leopold , l_cmndr ) ;
4308: LD_EXP 7
4312: PPUSH
4313: LD_EXP 49
4317: PPUSH
4318: CALL_OW 119
// ComTurnUnit ( l_cmndr , leopold ) ;
4322: LD_EXP 49
4326: PPUSH
4327: LD_EXP 7
4331: PPUSH
4332: CALL_OW 119
// Say ( leopold , DS-DL-1 ) ;
4336: LD_EXP 7
4340: PPUSH
4341: LD_STRING DS-DL-1
4343: PPUSH
4344: CALL_OW 88
// Say ( l_cmndr , DS-DC-1 ) ;
4348: LD_EXP 49
4352: PPUSH
4353: LD_STRING DS-DC-1
4355: PPUSH
4356: CALL_OW 88
// Say ( leopold , DS-DL-2 ) ;
4360: LD_EXP 7
4364: PPUSH
4365: LD_STRING DS-DL-2
4367: PPUSH
4368: CALL_OW 88
// ComEnterUnit ( leopold , fort ) ;
4372: LD_EXP 7
4376: PPUSH
4377: LD_INT 23
4379: PPUSH
4380: CALL_OW 120
// InGameOff ;
4384: CALL_OW 9
// Wait ( 0 0$01 ) ;
4388: LD_INT 35
4390: PPUSH
4391: CALL_OW 67
// ChangeMissionObjectives ( DS-T1 ) ;
4395: LD_STRING DS-T1
4397: PPUSH
4398: CALL_OW 337
// end ; 10 :
4402: GO 6705
4404: LD_INT 10
4406: DOUBLE
4407: EQUAL
4408: IFTRUE 4412
4410: GO 4624
4412: POP
// begin uc_side := 6 ;
4413: LD_ADDR_OWVAR 20
4417: PUSH
4418: LD_INT 6
4420: ST_TO_ADDR
// uc_nation := 2 ;
4421: LD_ADDR_OWVAR 21
4425: PUSH
4426: LD_INT 2
4428: ST_TO_ADDR
// hc_gallery :=  ;
4429: LD_ADDR_OWVAR 33
4433: PUSH
4434: LD_STRING 
4436: ST_TO_ADDR
// hc_skills := [ skill + 2 , skill - 1 , skill , skill + 1 ] ;
4437: LD_ADDR_OWVAR 31
4441: PUSH
4442: LD_EXP 16
4446: PUSH
4447: LD_INT 2
4449: PLUS
4450: PUSH
4451: LD_EXP 16
4455: PUSH
4456: LD_INT 1
4458: MINUS
4459: PUSH
4460: LD_EXP 16
4464: PUSH
4465: LD_EXP 16
4469: PUSH
4470: LD_INT 1
4472: PLUS
4473: PUSH
4474: EMPTY
4475: LIST
4476: LIST
4477: LIST
4478: LIST
4479: ST_TO_ADDR
// hc_sex := sex_male ;
4480: LD_ADDR_OWVAR 27
4484: PUSH
4485: LD_INT 1
4487: ST_TO_ADDR
// hc_name := Samuel van Horn ;
4488: LD_ADDR_OWVAR 26
4492: PUSH
4493: LD_STRING Samuel van Horn
4495: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
4496: LD_ADDR_OWVAR 29
4500: PUSH
4501: LD_INT 11
4503: PUSH
4504: LD_INT 10
4506: PUSH
4507: EMPTY
4508: LIST
4509: LIST
4510: ST_TO_ADDR
// hc_class := 1 ;
4511: LD_ADDR_OWVAR 28
4515: PUSH
4516: LD_INT 1
4518: ST_TO_ADDR
// samuel := CreateHuman ;
4519: LD_ADDR_EXP 9
4523: PUSH
4524: CALL_OW 44
4528: ST_TO_ADDR
// PlaceUnitArea ( samuel , south_spawn , false ) ;
4529: LD_EXP 9
4533: PPUSH
4534: LD_INT 4
4536: PPUSH
4537: LD_INT 0
4539: PPUSH
4540: CALL_OW 49
// for i = 1 to 3 do
4544: LD_ADDR_VAR 0 2
4548: PUSH
4549: DOUBLE
4550: LD_INT 1
4552: DEC
4553: ST_TO_ADDR
4554: LD_INT 3
4556: PUSH
4557: FOR_TO
4558: IFFALSE 4585
// PlaceUnitArea ( CreateHumanWithClass ( class_mortar , skill ) , south_spawn , false ) ;
4560: LD_INT 8
4562: PPUSH
4563: LD_EXP 16
4567: PPUSH
4568: CALL 7312 0 2
4572: PPUSH
4573: LD_INT 4
4575: PPUSH
4576: LD_INT 0
4578: PPUSH
4579: CALL_OW 49
4583: GO 4557
4585: POP
4586: POP
// ComEnterUnit ( FilterAllUnits ( [ f_side , 6 ] ) diff [ leopold , fort ] , fort ) ;
4587: LD_INT 22
4589: PUSH
4590: LD_INT 6
4592: PUSH
4593: EMPTY
4594: LIST
4595: LIST
4596: PPUSH
4597: CALL_OW 69
4601: PUSH
4602: LD_EXP 7
4606: PUSH
4607: LD_INT 23
4609: PUSH
4610: EMPTY
4611: LIST
4612: LIST
4613: DIFF
4614: PPUSH
4615: LD_INT 23
4617: PPUSH
4618: CALL_OW 120
// end ; 3 :
4622: GO 6705
4624: LD_INT 3
4626: DOUBLE
4627: EQUAL
4628: IFTRUE 4632
4630: GO 4643
4632: POP
// begin arabian_attack := true ;
4633: LD_ADDR_EXP 38
4637: PUSH
4638: LD_INT 1
4640: ST_TO_ADDR
// end ; 4 :
4641: GO 6705
4643: LD_INT 4
4645: DOUBLE
4646: EQUAL
4647: IFTRUE 4651
4649: GO 4662
4651: POP
// begin american_attack := true ;
4652: LD_ADDR_EXP 40
4656: PUSH
4657: LD_INT 1
4659: ST_TO_ADDR
// end ; 5 :
4660: GO 6705
4662: LD_INT 5
4664: DOUBLE
4665: EQUAL
4666: IFTRUE 4670
4668: GO 4681
4670: POP
// begin russian_attack := true ;
4671: LD_ADDR_EXP 39
4675: PUSH
4676: LD_INT 1
4678: ST_TO_ADDR
// end ; 31 :
4679: GO 6705
4681: LD_INT 31
4683: DOUBLE
4684: EQUAL
4685: IFTRUE 4689
4687: GO 4964
4689: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
4690: LD_ADDR_VAR 0 6
4694: PUSH
4695: LD_EXP 15
4699: PUSH
4700: LD_INT 1
4702: PPUSH
4703: LD_EXP 15
4707: PPUSH
4708: CALL_OW 12
4712: ARRAY
4713: ST_TO_ADDR
// uc_side := 2 ;
4714: LD_ADDR_OWVAR 20
4718: PUSH
4719: LD_INT 2
4721: ST_TO_ADDR
// uc_nation := 2 ;
4722: LD_ADDR_OWVAR 21
4726: PUSH
4727: LD_INT 2
4729: ST_TO_ADDR
// for i = 1 to arabian_force do
4730: LD_ADDR_VAR 0 2
4734: PUSH
4735: DOUBLE
4736: LD_INT 1
4738: DEC
4739: ST_TO_ADDR
4740: LD_EXP 20
4744: PUSH
4745: FOR_TO
4746: IFFALSE 4825
// begin vc_chassis := ar_half_tracked ;
4748: LD_ADDR_OWVAR 37
4752: PUSH
4753: LD_INT 14
4755: ST_TO_ADDR
// vc_engine := engine_siberite ;
4756: LD_ADDR_OWVAR 39
4760: PUSH
4761: LD_INT 3
4763: ST_TO_ADDR
// vc_control := control_remote ;
4764: LD_ADDR_OWVAR 38
4768: PUSH
4769: LD_INT 2
4771: ST_TO_ADDR
// vc_weapon := ar_weapons [ Rand ( 1 , ar_weapons ) ] ;
4772: LD_ADDR_OWVAR 40
4776: PUSH
4777: LD_EXP 17
4781: PUSH
4782: LD_INT 1
4784: PPUSH
4785: LD_EXP 17
4789: PPUSH
4790: CALL_OW 12
4794: ARRAY
4795: ST_TO_ADDR
// un := CreateVehicle ;
4796: LD_ADDR_VAR 0 4
4800: PUSH
4801: CALL_OW 45
4805: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
4806: LD_VAR 0 4
4810: PPUSH
4811: LD_VAR 0 6
4815: PPUSH
4816: LD_INT 0
4818: PPUSH
4819: CALL_OW 49
// end ;
4823: GO 4745
4825: POP
4826: POP
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_manual ] ] ) < 2 then
4827: LD_INT 22
4829: PUSH
4830: LD_INT 2
4832: PUSH
4833: EMPTY
4834: LIST
4835: LIST
4836: PUSH
4837: LD_INT 33
4839: PUSH
4840: LD_INT 1
4842: PUSH
4843: EMPTY
4844: LIST
4845: LIST
4846: PUSH
4847: EMPTY
4848: LIST
4849: LIST
4850: PPUSH
4851: CALL_OW 69
4855: PUSH
4856: LD_INT 2
4858: LESS
4859: IFFALSE 4962
// for i = 1 to 2 do
4861: LD_ADDR_VAR 0 2
4865: PUSH
4866: DOUBLE
4867: LD_INT 1
4869: DEC
4870: ST_TO_ADDR
4871: LD_INT 2
4873: PUSH
4874: FOR_TO
4875: IFFALSE 4960
// begin vc_chassis := ar_half_tracked ;
4877: LD_ADDR_OWVAR 37
4881: PUSH
4882: LD_INT 14
4884: ST_TO_ADDR
// vc_engine := engine_siberite ;
4885: LD_ADDR_OWVAR 39
4889: PUSH
4890: LD_INT 3
4892: ST_TO_ADDR
// vc_control := control_manual ;
4893: LD_ADDR_OWVAR 38
4897: PUSH
4898: LD_INT 1
4900: ST_TO_ADDR
// vc_weapon := ar_control_tower ;
4901: LD_ADDR_OWVAR 40
4905: PUSH
4906: LD_INT 31
4908: ST_TO_ADDR
// un := CreateVehicle ;
4909: LD_ADDR_VAR 0 4
4913: PUSH
4914: CALL_OW 45
4918: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
4919: LD_VAR 0 4
4923: PPUSH
4924: LD_VAR 0 6
4928: PPUSH
4929: LD_INT 0
4931: PPUSH
4932: CALL_OW 49
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , skill ) , un ) ;
4936: LD_INT 3
4938: PPUSH
4939: LD_EXP 16
4943: PPUSH
4944: CALL 7312 0 2
4948: PPUSH
4949: LD_VAR 0 4
4953: PPUSH
4954: CALL_OW 52
// end ;
4958: GO 4874
4960: POP
4961: POP
// end ; 32 :
4962: GO 6705
4964: LD_INT 32
4966: DOUBLE
4967: EQUAL
4968: IFTRUE 4972
4970: GO 5345
4972: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
4973: LD_ADDR_VAR 0 6
4977: PUSH
4978: LD_EXP 15
4982: PUSH
4983: LD_INT 1
4985: PPUSH
4986: LD_EXP 15
4990: PPUSH
4991: CALL_OW 12
4995: ARRAY
4996: ST_TO_ADDR
// uc_side := 2 ;
4997: LD_ADDR_OWVAR 20
5001: PUSH
5002: LD_INT 2
5004: ST_TO_ADDR
// uc_nation := 2 ;
5005: LD_ADDR_OWVAR 21
5009: PUSH
5010: LD_INT 2
5012: ST_TO_ADDR
// for i = 1 to ( arabian_force - 2 ) do
5013: LD_ADDR_VAR 0 2
5017: PUSH
5018: DOUBLE
5019: LD_INT 1
5021: DEC
5022: ST_TO_ADDR
5023: LD_EXP 20
5027: PUSH
5028: LD_INT 2
5030: MINUS
5031: PUSH
5032: FOR_TO
5033: IFFALSE 5116
// begin vc_chassis := ar_half_tracked ;
5035: LD_ADDR_OWVAR 37
5039: PUSH
5040: LD_INT 14
5042: ST_TO_ADDR
// vc_engine := engine_siberite ;
5043: LD_ADDR_OWVAR 39
5047: PUSH
5048: LD_INT 3
5050: ST_TO_ADDR
// vc_control := control_remote ;
5051: LD_ADDR_OWVAR 38
5055: PUSH
5056: LD_INT 2
5058: ST_TO_ADDR
// vc_weapon := ar_weapons [ Rand ( 1 , ar_weapons - 1 ) ] ;
5059: LD_ADDR_OWVAR 40
5063: PUSH
5064: LD_EXP 17
5068: PUSH
5069: LD_INT 1
5071: PPUSH
5072: LD_EXP 17
5076: PUSH
5077: LD_INT 1
5079: MINUS
5080: PPUSH
5081: CALL_OW 12
5085: ARRAY
5086: ST_TO_ADDR
// un := CreateVehicle ;
5087: LD_ADDR_VAR 0 4
5091: PUSH
5092: CALL_OW 45
5096: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5097: LD_VAR 0 4
5101: PPUSH
5102: LD_VAR 0 6
5106: PPUSH
5107: LD_INT 0
5109: PPUSH
5110: CALL_OW 49
// end ;
5114: GO 5032
5116: POP
5117: POP
// for i = 1 to Rand ( 0 , 1 ) + [ 2 , 3 , 3 ] [ game_difficulty ] do
5118: LD_ADDR_VAR 0 2
5122: PUSH
5123: DOUBLE
5124: LD_INT 1
5126: DEC
5127: ST_TO_ADDR
5128: LD_INT 0
5130: PPUSH
5131: LD_INT 1
5133: PPUSH
5134: CALL_OW 12
5138: PUSH
5139: LD_INT 2
5141: PUSH
5142: LD_INT 3
5144: PUSH
5145: LD_INT 3
5147: PUSH
5148: EMPTY
5149: LIST
5150: LIST
5151: LIST
5152: PUSH
5153: LD_EXP 2
5157: ARRAY
5158: PLUS
5159: PUSH
5160: FOR_TO
5161: IFFALSE 5198
// begin uc_nation := 0 ;
5163: LD_ADDR_OWVAR 21
5167: PUSH
5168: LD_INT 0
5170: ST_TO_ADDR
// PlaceUnitArea ( CreateHumanWithClass ( 17 , skill ) , area , false ) ;
5171: LD_INT 17
5173: PPUSH
5174: LD_EXP 16
5178: PPUSH
5179: CALL 7312 0 2
5183: PPUSH
5184: LD_VAR 0 6
5188: PPUSH
5189: LD_INT 0
5191: PPUSH
5192: CALL_OW 49
// end ;
5196: GO 5160
5198: POP
5199: POP
// uc_nation := 2 ;
5200: LD_ADDR_OWVAR 21
5204: PUSH
5205: LD_INT 2
5207: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_manual ] ] ) < 2 then
5208: LD_INT 22
5210: PUSH
5211: LD_INT 2
5213: PUSH
5214: EMPTY
5215: LIST
5216: LIST
5217: PUSH
5218: LD_INT 33
5220: PUSH
5221: LD_INT 1
5223: PUSH
5224: EMPTY
5225: LIST
5226: LIST
5227: PUSH
5228: EMPTY
5229: LIST
5230: LIST
5231: PPUSH
5232: CALL_OW 69
5236: PUSH
5237: LD_INT 2
5239: LESS
5240: IFFALSE 5343
// for i = 1 to 2 do
5242: LD_ADDR_VAR 0 2
5246: PUSH
5247: DOUBLE
5248: LD_INT 1
5250: DEC
5251: ST_TO_ADDR
5252: LD_INT 2
5254: PUSH
5255: FOR_TO
5256: IFFALSE 5341
// begin vc_chassis := ar_half_tracked ;
5258: LD_ADDR_OWVAR 37
5262: PUSH
5263: LD_INT 14
5265: ST_TO_ADDR
// vc_engine := engine_siberite ;
5266: LD_ADDR_OWVAR 39
5270: PUSH
5271: LD_INT 3
5273: ST_TO_ADDR
// vc_control := control_manual ;
5274: LD_ADDR_OWVAR 38
5278: PUSH
5279: LD_INT 1
5281: ST_TO_ADDR
// vc_weapon := ar_control_tower ;
5282: LD_ADDR_OWVAR 40
5286: PUSH
5287: LD_INT 31
5289: ST_TO_ADDR
// un := CreateVehicle ;
5290: LD_ADDR_VAR 0 4
5294: PUSH
5295: CALL_OW 45
5299: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5300: LD_VAR 0 4
5304: PPUSH
5305: LD_VAR 0 6
5309: PPUSH
5310: LD_INT 0
5312: PPUSH
5313: CALL_OW 49
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , skill ) , un ) ;
5317: LD_INT 3
5319: PPUSH
5320: LD_EXP 16
5324: PPUSH
5325: CALL 7312 0 2
5329: PPUSH
5330: LD_VAR 0 4
5334: PPUSH
5335: CALL_OW 52
// end ;
5339: GO 5255
5341: POP
5342: POP
// end ; 33 :
5343: GO 6705
5345: LD_INT 33
5347: DOUBLE
5348: EQUAL
5349: IFTRUE 5353
5351: GO 5624
5353: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
5354: LD_ADDR_VAR 0 6
5358: PUSH
5359: LD_EXP 15
5363: PUSH
5364: LD_INT 1
5366: PPUSH
5367: LD_EXP 15
5371: PPUSH
5372: CALL_OW 12
5376: ARRAY
5377: ST_TO_ADDR
// uc_side := 2 ;
5378: LD_ADDR_OWVAR 20
5382: PUSH
5383: LD_INT 2
5385: ST_TO_ADDR
// uc_nation := 2 ;
5386: LD_ADDR_OWVAR 21
5390: PUSH
5391: LD_INT 2
5393: ST_TO_ADDR
// for i = 1 to ( arabian_force / 2 ) do
5394: LD_ADDR_VAR 0 2
5398: PUSH
5399: DOUBLE
5400: LD_INT 1
5402: DEC
5403: ST_TO_ADDR
5404: LD_EXP 20
5408: PUSH
5409: LD_INT 2
5411: DIVREAL
5412: PUSH
5413: FOR_TO
5414: IFFALSE 5519
// begin vc_chassis := ar_half_tracked ;
5416: LD_ADDR_OWVAR 37
5420: PUSH
5421: LD_INT 14
5423: ST_TO_ADDR
// vc_engine := engine_siberite ;
5424: LD_ADDR_OWVAR 39
5428: PUSH
5429: LD_INT 3
5431: ST_TO_ADDR
// vc_control := control_manual ;
5432: LD_ADDR_OWVAR 38
5436: PUSH
5437: LD_INT 1
5439: ST_TO_ADDR
// vc_weapon := ar_weapons [ Rand ( 1 , ar_weapons - 2 ) ] ;
5440: LD_ADDR_OWVAR 40
5444: PUSH
5445: LD_EXP 17
5449: PUSH
5450: LD_INT 1
5452: PPUSH
5453: LD_EXP 17
5457: PUSH
5458: LD_INT 2
5460: MINUS
5461: PPUSH
5462: CALL_OW 12
5466: ARRAY
5467: ST_TO_ADDR
// un := CreateVehicle ;
5468: LD_ADDR_VAR 0 4
5472: PUSH
5473: CALL_OW 45
5477: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5478: LD_VAR 0 4
5482: PPUSH
5483: LD_VAR 0 6
5487: PPUSH
5488: LD_INT 0
5490: PPUSH
5491: CALL_OW 49
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , skill ) , un ) ;
5495: LD_INT 3
5497: PPUSH
5498: LD_EXP 16
5502: PPUSH
5503: CALL 7312 0 2
5507: PPUSH
5508: LD_VAR 0 4
5512: PPUSH
5513: CALL_OW 52
// end ;
5517: GO 5413
5519: POP
5520: POP
// for i = 1 to ( arabian_force / 2 ) do
5521: LD_ADDR_VAR 0 2
5525: PUSH
5526: DOUBLE
5527: LD_INT 1
5529: DEC
5530: ST_TO_ADDR
5531: LD_EXP 20
5535: PUSH
5536: LD_INT 2
5538: DIVREAL
5539: PUSH
5540: FOR_TO
5541: IFFALSE 5620
// begin vc_chassis := ar_half_tracked ;
5543: LD_ADDR_OWVAR 37
5547: PUSH
5548: LD_INT 14
5550: ST_TO_ADDR
// vc_engine := engine_siberite ;
5551: LD_ADDR_OWVAR 39
5555: PUSH
5556: LD_INT 3
5558: ST_TO_ADDR
// vc_control := control_apeman ;
5559: LD_ADDR_OWVAR 38
5563: PUSH
5564: LD_INT 5
5566: ST_TO_ADDR
// vc_weapon := ar_weapons [ Rand ( 2 , ar_weapons ) ] ;
5567: LD_ADDR_OWVAR 40
5571: PUSH
5572: LD_EXP 17
5576: PUSH
5577: LD_INT 2
5579: PPUSH
5580: LD_EXP 17
5584: PPUSH
5585: CALL_OW 12
5589: ARRAY
5590: ST_TO_ADDR
// un := CreateVehicle ;
5591: LD_ADDR_VAR 0 4
5595: PUSH
5596: CALL_OW 45
5600: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5601: LD_VAR 0 4
5605: PPUSH
5606: LD_VAR 0 6
5610: PPUSH
5611: LD_INT 0
5613: PPUSH
5614: CALL_OW 49
// end ;
5618: GO 5540
5620: POP
5621: POP
// end ; 41 :
5622: GO 6705
5624: LD_INT 41
5626: DOUBLE
5627: EQUAL
5628: IFTRUE 5632
5630: GO 5776
5632: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
5633: LD_ADDR_VAR 0 6
5637: PUSH
5638: LD_EXP 15
5642: PUSH
5643: LD_INT 1
5645: PPUSH
5646: LD_EXP 15
5650: PPUSH
5651: CALL_OW 12
5655: ARRAY
5656: ST_TO_ADDR
// uc_side := 1 ;
5657: LD_ADDR_OWVAR 20
5661: PUSH
5662: LD_INT 1
5664: ST_TO_ADDR
// uc_nation := 1 ;
5665: LD_ADDR_OWVAR 21
5669: PUSH
5670: LD_INT 1
5672: ST_TO_ADDR
// for i = 1 to american_force do
5673: LD_ADDR_VAR 0 2
5677: PUSH
5678: DOUBLE
5679: LD_INT 1
5681: DEC
5682: ST_TO_ADDR
5683: LD_EXP 22
5687: PUSH
5688: FOR_TO
5689: IFFALSE 5772
// begin vc_chassis := us_morphling ;
5691: LD_ADDR_OWVAR 37
5695: PUSH
5696: LD_INT 5
5698: ST_TO_ADDR
// vc_engine := engine_siberite ;
5699: LD_ADDR_OWVAR 39
5703: PUSH
5704: LD_INT 3
5706: ST_TO_ADDR
// vc_control := control_computer ;
5707: LD_ADDR_OWVAR 38
5711: PUSH
5712: LD_INT 3
5714: ST_TO_ADDR
// vc_weapon := us_weapons [ Rand ( 1 , us_weapons - 1 ) ] ;
5715: LD_ADDR_OWVAR 40
5719: PUSH
5720: LD_EXP 19
5724: PUSH
5725: LD_INT 1
5727: PPUSH
5728: LD_EXP 19
5732: PUSH
5733: LD_INT 1
5735: MINUS
5736: PPUSH
5737: CALL_OW 12
5741: ARRAY
5742: ST_TO_ADDR
// un := CreateVehicle ;
5743: LD_ADDR_VAR 0 4
5747: PUSH
5748: CALL_OW 45
5752: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5753: LD_VAR 0 4
5757: PPUSH
5758: LD_VAR 0 6
5762: PPUSH
5763: LD_INT 0
5765: PPUSH
5766: CALL_OW 49
// end ;
5770: GO 5688
5772: POP
5773: POP
// end ; 42 :
5774: GO 6705
5776: LD_INT 42
5778: DOUBLE
5779: EQUAL
5780: IFTRUE 5784
5782: GO 5924
5784: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
5785: LD_ADDR_VAR 0 6
5789: PUSH
5790: LD_EXP 15
5794: PUSH
5795: LD_INT 1
5797: PPUSH
5798: LD_EXP 15
5802: PPUSH
5803: CALL_OW 12
5807: ARRAY
5808: ST_TO_ADDR
// uc_side := 1 ;
5809: LD_ADDR_OWVAR 20
5813: PUSH
5814: LD_INT 1
5816: ST_TO_ADDR
// uc_nation := 1 ;
5817: LD_ADDR_OWVAR 21
5821: PUSH
5822: LD_INT 1
5824: ST_TO_ADDR
// for i = 1 to american_force do
5825: LD_ADDR_VAR 0 2
5829: PUSH
5830: DOUBLE
5831: LD_INT 1
5833: DEC
5834: ST_TO_ADDR
5835: LD_EXP 22
5839: PUSH
5840: FOR_TO
5841: IFFALSE 5920
// begin vc_chassis := us_morphling ;
5843: LD_ADDR_OWVAR 37
5847: PUSH
5848: LD_INT 5
5850: ST_TO_ADDR
// vc_engine := engine_siberite ;
5851: LD_ADDR_OWVAR 39
5855: PUSH
5856: LD_INT 3
5858: ST_TO_ADDR
// vc_control := control_computer ;
5859: LD_ADDR_OWVAR 38
5863: PUSH
5864: LD_INT 3
5866: ST_TO_ADDR
// vc_weapon := us_weapons [ Rand ( 1 , us_weapons ) ] ;
5867: LD_ADDR_OWVAR 40
5871: PUSH
5872: LD_EXP 19
5876: PUSH
5877: LD_INT 1
5879: PPUSH
5880: LD_EXP 19
5884: PPUSH
5885: CALL_OW 12
5889: ARRAY
5890: ST_TO_ADDR
// un := CreateVehicle ;
5891: LD_ADDR_VAR 0 4
5895: PUSH
5896: CALL_OW 45
5900: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5901: LD_VAR 0 4
5905: PPUSH
5906: LD_VAR 0 6
5910: PPUSH
5911: LD_INT 0
5913: PPUSH
5914: CALL_OW 49
// end ;
5918: GO 5840
5920: POP
5921: POP
// end ; 51 :
5922: GO 6705
5924: LD_INT 51
5926: DOUBLE
5927: EQUAL
5928: IFTRUE 5932
5930: GO 6072
5932: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
5933: LD_ADDR_VAR 0 6
5937: PUSH
5938: LD_EXP 15
5942: PUSH
5943: LD_INT 1
5945: PPUSH
5946: LD_EXP 15
5950: PPUSH
5951: CALL_OW 12
5955: ARRAY
5956: ST_TO_ADDR
// uc_side := 3 ;
5957: LD_ADDR_OWVAR 20
5961: PUSH
5962: LD_INT 3
5964: ST_TO_ADDR
// uc_nation := 3 ;
5965: LD_ADDR_OWVAR 21
5969: PUSH
5970: LD_INT 3
5972: ST_TO_ADDR
// for i = 1 to russian_force do
5973: LD_ADDR_VAR 0 2
5977: PUSH
5978: DOUBLE
5979: LD_INT 1
5981: DEC
5982: ST_TO_ADDR
5983: LD_EXP 21
5987: PUSH
5988: FOR_TO
5989: IFFALSE 6068
// begin vc_chassis := ru_heavy_tracked ;
5991: LD_ADDR_OWVAR 37
5995: PUSH
5996: LD_INT 24
5998: ST_TO_ADDR
// vc_engine := engine_siberite ;
5999: LD_ADDR_OWVAR 39
6003: PUSH
6004: LD_INT 3
6006: ST_TO_ADDR
// vc_control := control_computer ;
6007: LD_ADDR_OWVAR 38
6011: PUSH
6012: LD_INT 3
6014: ST_TO_ADDR
// vc_weapon := ru_weapons [ Rand ( 1 , ru_weapons ) ] ;
6015: LD_ADDR_OWVAR 40
6019: PUSH
6020: LD_EXP 18
6024: PUSH
6025: LD_INT 1
6027: PPUSH
6028: LD_EXP 18
6032: PPUSH
6033: CALL_OW 12
6037: ARRAY
6038: ST_TO_ADDR
// un := CreateVehicle ;
6039: LD_ADDR_VAR 0 4
6043: PUSH
6044: CALL_OW 45
6048: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
6049: LD_VAR 0 4
6053: PPUSH
6054: LD_VAR 0 6
6058: PPUSH
6059: LD_INT 0
6061: PPUSH
6062: CALL_OW 49
// end ;
6066: GO 5988
6068: POP
6069: POP
// end ; 91 :
6070: GO 6705
6072: LD_INT 91
6074: DOUBLE
6075: EQUAL
6076: IFTRUE 6080
6078: GO 6218
6080: POP
// begin uc_side := 8 ;
6081: LD_ADDR_OWVAR 20
6085: PUSH
6086: LD_INT 8
6088: ST_TO_ADDR
// uc_nation := 1 ;
6089: LD_ADDR_OWVAR 21
6093: PUSH
6094: LD_INT 1
6096: ST_TO_ADDR
// for i = 1 to [ 4 , 3 , 3 ] [ game_difficulty ] do
6097: LD_ADDR_VAR 0 2
6101: PUSH
6102: DOUBLE
6103: LD_INT 1
6105: DEC
6106: ST_TO_ADDR
6107: LD_INT 4
6109: PUSH
6110: LD_INT 3
6112: PUSH
6113: LD_INT 3
6115: PUSH
6116: EMPTY
6117: LIST
6118: LIST
6119: LIST
6120: PUSH
6121: LD_EXP 2
6125: ARRAY
6126: PUSH
6127: FOR_TO
6128: IFFALSE 6214
// begin vc_chassis := us_heavy_tracked ;
6130: LD_ADDR_OWVAR 37
6134: PUSH
6135: LD_INT 4
6137: ST_TO_ADDR
// vc_engine := engine_siberite ;
6138: LD_ADDR_OWVAR 39
6142: PUSH
6143: LD_INT 3
6145: ST_TO_ADDR
// vc_control := control_computer ;
6146: LD_ADDR_OWVAR 38
6150: PUSH
6151: LD_INT 3
6153: ST_TO_ADDR
// vc_weapon := [ us_double_gun , us_heavy_gun ] [ Rand ( 1 , 2 ) ] ;
6154: LD_ADDR_OWVAR 40
6158: PUSH
6159: LD_INT 5
6161: PUSH
6162: LD_INT 6
6164: PUSH
6165: EMPTY
6166: LIST
6167: LIST
6168: PUSH
6169: LD_INT 1
6171: PPUSH
6172: LD_INT 2
6174: PPUSH
6175: CALL_OW 12
6179: ARRAY
6180: ST_TO_ADDR
// un := CreateVehicle ;
6181: LD_ADDR_VAR 0 4
6185: PUSH
6186: CALL_OW 45
6190: ST_TO_ADDR
// PlaceUnitArea ( un , areas [ 1 ] , false ) ;
6191: LD_VAR 0 4
6195: PPUSH
6196: LD_EXP 15
6200: PUSH
6201: LD_INT 1
6203: ARRAY
6204: PPUSH
6205: LD_INT 0
6207: PPUSH
6208: CALL_OW 49
// end ;
6212: GO 6127
6214: POP
6215: POP
// end ; 92 :
6216: GO 6705
6218: LD_INT 92
6220: DOUBLE
6221: EQUAL
6222: IFTRUE 6226
6224: GO 6555
6226: POP
// begin uc_side := 5 ;
6227: LD_ADDR_OWVAR 20
6231: PUSH
6232: LD_INT 5
6234: ST_TO_ADDR
// uc_nation := 2 ;
6235: LD_ADDR_OWVAR 21
6239: PUSH
6240: LD_INT 2
6242: ST_TO_ADDR
// filter := [ ] ;
6243: LD_ADDR_VAR 0 3
6247: PUSH
6248: EMPTY
6249: ST_TO_ADDR
// InitHc ;
6250: CALL_OW 19
// PrepareHuman ( false , 1 , l_skill ) ;
6254: LD_INT 0
6256: PPUSH
6257: LD_INT 1
6259: PPUSH
6260: LD_EXP 50
6264: PPUSH
6265: CALL_OW 380
// un := CreateHuman ;
6269: LD_ADDR_VAR 0 4
6273: PUSH
6274: CALL_OW 44
6278: ST_TO_ADDR
// filter := filter ^ un ;
6279: LD_ADDR_VAR 0 3
6283: PUSH
6284: LD_VAR 0 3
6288: PUSH
6289: LD_VAR 0 4
6293: ADD
6294: ST_TO_ADDR
// for i = 1 to [ 4 , 3 , 2 ] [ game_difficulty ] do
6295: LD_ADDR_VAR 0 2
6299: PUSH
6300: DOUBLE
6301: LD_INT 1
6303: DEC
6304: ST_TO_ADDR
6305: LD_INT 4
6307: PUSH
6308: LD_INT 3
6310: PUSH
6311: LD_INT 2
6313: PUSH
6314: EMPTY
6315: LIST
6316: LIST
6317: LIST
6318: PUSH
6319: LD_EXP 2
6323: ARRAY
6324: PUSH
6325: FOR_TO
6326: IFFALSE 6364
// begin un := CreateHumanWithClass ( 1 , l_skill ) ;
6328: LD_ADDR_VAR 0 4
6332: PUSH
6333: LD_INT 1
6335: PPUSH
6336: LD_EXP 50
6340: PPUSH
6341: CALL 7312 0 2
6345: ST_TO_ADDR
// filter := filter ^ un ;
6346: LD_ADDR_VAR 0 3
6350: PUSH
6351: LD_VAR 0 3
6355: PUSH
6356: LD_VAR 0 4
6360: ADD
6361: ST_TO_ADDR
// end ;
6362: GO 6325
6364: POP
6365: POP
// DialogueOn ;
6366: CALL_OW 6
// if GetSex ( filter [ 1 ] ) = sex_male then
6370: LD_VAR 0 3
6374: PUSH
6375: LD_INT 1
6377: ARRAY
6378: PPUSH
6379: CALL_OW 258
6383: PUSH
6384: LD_INT 1
6386: EQUAL
6387: IFFALSE 6407
// SayRadio ( filter [ 1 ] , DS-DF-1 ) else
6389: LD_VAR 0 3
6393: PUSH
6394: LD_INT 1
6396: ARRAY
6397: PPUSH
6398: LD_STRING DS-DF-1
6400: PPUSH
6401: CALL_OW 94
6405: GO 6423
// SayRadio ( filter [ 1 ] , DS-DF-f1 ) ;
6407: LD_VAR 0 3
6411: PUSH
6412: LD_INT 1
6414: ARRAY
6415: PPUSH
6416: LD_STRING DS-DF-f1
6418: PPUSH
6419: CALL_OW 94
// case Query ( DS-dezert ) of 1 :
6423: LD_STRING DS-dezert
6425: PPUSH
6426: CALL_OW 97
6430: PUSH
6431: LD_INT 1
6433: DOUBLE
6434: EQUAL
6435: IFTRUE 6439
6437: GO 6454
6439: POP
// Say ( l_cmndr , DS-DC-dis ) ; 2 :
6440: LD_EXP 49
6444: PPUSH
6445: LD_STRING DS-DC-dis
6447: PPUSH
6448: CALL_OW 88
6452: GO 6549
6454: LD_INT 2
6456: DOUBLE
6457: EQUAL
6458: IFTRUE 6462
6460: GO 6548
6462: POP
// begin Say ( l_cmndr , DS-DC-acp ) ;
6463: LD_EXP 49
6467: PPUSH
6468: LD_STRING DS-DC-acp
6470: PPUSH
6471: CALL_OW 88
// for i = 1 to filter do
6475: LD_ADDR_VAR 0 2
6479: PUSH
6480: DOUBLE
6481: LD_INT 1
6483: DEC
6484: ST_TO_ADDR
6485: LD_VAR 0 3
6489: PUSH
6490: FOR_TO
6491: IFFALSE 6544
// begin SetSide ( filter [ i ] , 8 ) ;
6493: LD_VAR 0 3
6497: PUSH
6498: LD_VAR 0 2
6502: ARRAY
6503: PPUSH
6504: LD_INT 8
6506: PPUSH
6507: CALL_OW 235
// PlaceUnitArea ( filter [ i ] , south_spawn , false ) ;
6511: LD_VAR 0 3
6515: PUSH
6516: LD_VAR 0 2
6520: ARRAY
6521: PPUSH
6522: LD_INT 4
6524: PPUSH
6525: LD_INT 0
6527: PPUSH
6528: CALL_OW 49
// CenterNowOnXY ( 111 , 121 ) ;
6532: LD_INT 111
6534: PPUSH
6535: LD_INT 121
6537: PPUSH
6538: CALL_OW 86
// end ;
6542: GO 6490
6544: POP
6545: POP
// end ; end ;
6546: GO 6549
6548: POP
// DialogueOff ;
6549: CALL_OW 7
// end ; 101 :
6553: GO 6705
6555: LD_INT 101
6557: DOUBLE
6558: EQUAL
6559: IFTRUE 6563
6561: GO 6615
6563: POP
// begin CreateCratesArea ( Rand ( 3 , 5 ) , crates_area , true ) ;
6564: LD_INT 3
6566: PPUSH
6567: LD_INT 5
6569: PPUSH
6570: CALL_OW 12
6574: PPUSH
6575: LD_INT 9
6577: PPUSH
6578: LD_INT 1
6580: PPUSH
6581: CALL_OW 55
// Wait ( 0 0$11 ) ;
6585: LD_INT 385
6587: PPUSH
6588: CALL_OW 67
// CreateCratesArea ( Rand ( 3 , 5 ) , crates_area , true ) ;
6592: LD_INT 3
6594: PPUSH
6595: LD_INT 5
6597: PPUSH
6598: CALL_OW 12
6602: PPUSH
6603: LD_INT 9
6605: PPUSH
6606: LD_INT 1
6608: PPUSH
6609: CALL_OW 55
// end ; 200 :
6613: GO 6705
6615: LD_INT 200
6617: DOUBLE
6618: EQUAL
6619: IFTRUE 6623
6621: GO 6704
6623: POP
// begin Say ( Leopold , DS-end ) ;
6624: LD_EXP 7
6628: PPUSH
6629: LD_STRING DS-end
6631: PPUSH
6632: CALL_OW 88
// if Difficulty = 3 then
6636: LD_OWVAR 67
6640: PUSH
6641: LD_INT 3
6643: EQUAL
6644: IFFALSE 6653
// SetAchievement ( ACH_DESERT ) ;
6646: LD_STRING ACH_DESERT
6648: PPUSH
6649: CALL_OW 543
// music_nat := 5 ;
6653: LD_ADDR_OWVAR 71
6657: PUSH
6658: LD_INT 5
6660: ST_TO_ADDR
// AddMedal ( med , 1 ) ;
6661: LD_STRING med
6663: PPUSH
6664: LD_INT 1
6666: PPUSH
6667: CALL_OW 101
// AddMedal ( med , 1 ) ;
6671: LD_STRING med
6673: PPUSH
6674: LD_INT 1
6676: PPUSH
6677: CALL_OW 101
// AddMedal ( med , 1 ) ;
6681: LD_STRING med
6683: PPUSH
6684: LD_INT 1
6686: PPUSH
6687: CALL_OW 101
// GiveMedals ( MAIN ) ;
6691: LD_STRING MAIN
6693: PPUSH
6694: CALL_OW 102
// YouWin ;
6698: CALL_OW 103
// end ; end ;
6702: GO 6705
6704: POP
// end ;
6705: PPOPN 6
6707: END
// on UnitGoesToRed ( un ) do begin if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) then
6708: LD_VAR 0 1
6712: PUSH
6713: LD_INT 22
6715: PUSH
6716: LD_INT 2
6718: PUSH
6719: EMPTY
6720: LIST
6721: LIST
6722: PUSH
6723: LD_INT 21
6725: PUSH
6726: LD_INT 2
6728: PUSH
6729: EMPTY
6730: LIST
6731: LIST
6732: PUSH
6733: EMPTY
6734: LIST
6735: LIST
6736: PPUSH
6737: CALL_OW 69
6741: IN
6742: IFFALSE 6867
// begin Wait ( Rand ( 0 0$03 , 0 0$06 ) ) ;
6744: LD_INT 105
6746: PPUSH
6747: LD_INT 210
6749: PPUSH
6750: CALL_OW 12
6754: PPUSH
6755: CALL_OW 67
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
6759: LD_VAR 0 1
6763: PPUSH
6764: CALL_OW 250
6768: PPUSH
6769: LD_VAR 0 1
6773: PPUSH
6774: CALL_OW 251
6778: PPUSH
6779: LD_INT 3
6781: PPUSH
6782: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
6786: LD_VAR 0 1
6790: PPUSH
6791: CALL_OW 250
6795: PPUSH
6796: LD_VAR 0 1
6800: PPUSH
6801: CALL_OW 251
6805: PPUSH
6806: LD_INT 3
6808: PPUSH
6809: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
6813: LD_VAR 0 1
6817: PPUSH
6818: CALL_OW 250
6822: PPUSH
6823: LD_VAR 0 1
6827: PPUSH
6828: CALL_OW 251
6832: PPUSH
6833: LD_INT 3
6835: PPUSH
6836: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
6840: LD_VAR 0 1
6844: PPUSH
6845: CALL_OW 250
6849: PPUSH
6850: LD_VAR 0 1
6854: PPUSH
6855: CALL_OW 251
6859: PPUSH
6860: LD_INT 3
6862: PPUSH
6863: CALL_OW 453
// end ; end ;
6867: PPOPN 1
6869: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
6870: LD_VAR 0 1
6874: PPUSH
6875: CALL 21916 0 1
// if un = fort then
6879: LD_VAR 0 1
6883: PUSH
6884: LD_INT 23
6886: EQUAL
6887: IFFALSE 6897
// fort_destroyed := true ;
6889: LD_ADDR_EXP 32
6893: PUSH
6894: LD_INT 1
6896: ST_TO_ADDR
// if un = l_cmndr then
6897: LD_VAR 0 1
6901: PUSH
6902: LD_EXP 49
6906: EQUAL
6907: IFFALSE 6917
// hero_died := true ;
6909: LD_ADDR_EXP 33
6913: PUSH
6914: LD_INT 1
6916: ST_TO_ADDR
// end ;
6917: PPOPN 1
6919: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin debug_strings := un ;
6920: LD_ADDR_OWVAR 48
6924: PUSH
6925: LD_VAR 0 1
6929: ST_TO_ADDR
// SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
6930: LD_VAR 0 1
6934: PPUSH
6935: LD_VAR 0 2
6939: PPUSH
6940: LD_VAR 0 3
6944: PPUSH
6945: CALL 22014 0 3
// end ;
6949: PPOPN 3
6951: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
6952: LD_VAR 0 1
6956: PPUSH
6957: CALL 22022 0 1
// end ; end_of_file
6961: PPOPN 1
6963: END
// export function RefreshTime ( time , bool ) ; begin
6964: LD_INT 0
6966: PPUSH
// if bool then
6967: LD_VAR 0 2
6971: IFFALSE 6989
// time := time + 0 0$01 else
6973: LD_ADDR_VAR 0 1
6977: PUSH
6978: LD_VAR 0 1
6982: PUSH
6983: LD_INT 35
6985: PLUS
6986: ST_TO_ADDR
6987: GO 7003
// time := time - 0 0$01 ;
6989: LD_ADDR_VAR 0 1
6993: PUSH
6994: LD_VAR 0 1
6998: PUSH
6999: LD_INT 35
7001: MINUS
7002: ST_TO_ADDR
// result := time ;
7003: LD_ADDR_VAR 0 3
7007: PUSH
7008: LD_VAR 0 1
7012: ST_TO_ADDR
// end ;
7013: LD_VAR 0 3
7017: RET
// export function MineExist ( side ) ; begin
7018: LD_INT 0
7020: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_siberite_mine ] ] ) > 0 then
7021: LD_INT 22
7023: PUSH
7024: LD_VAR 0 1
7028: PUSH
7029: EMPTY
7030: LIST
7031: LIST
7032: PUSH
7033: LD_INT 30
7035: PUSH
7036: LD_INT 30
7038: PUSH
7039: EMPTY
7040: LIST
7041: LIST
7042: PUSH
7043: EMPTY
7044: LIST
7045: LIST
7046: PPUSH
7047: CALL_OW 69
7051: PUSH
7052: LD_INT 0
7054: GREATER
7055: IFFALSE 7067
// result := true else
7057: LD_ADDR_VAR 0 2
7061: PUSH
7062: LD_INT 1
7064: ST_TO_ADDR
7065: GO 7075
// result := false ;
7067: LD_ADDR_VAR 0 2
7071: PUSH
7072: LD_INT 0
7074: ST_TO_ADDR
// end ;
7075: LD_VAR 0 2
7079: RET
// export function FacExist ( side ) ; begin
7080: LD_INT 0
7082: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_factory ] ] ) > 0 ;
7083: LD_ADDR_VAR 0 2
7087: PUSH
7088: LD_INT 22
7090: PUSH
7091: LD_VAR 0 1
7095: PUSH
7096: EMPTY
7097: LIST
7098: LIST
7099: PUSH
7100: LD_INT 30
7102: PUSH
7103: LD_INT 3
7105: PUSH
7106: EMPTY
7107: LIST
7108: LIST
7109: PUSH
7110: EMPTY
7111: LIST
7112: LIST
7113: PPUSH
7114: CALL_OW 69
7118: PUSH
7119: LD_INT 0
7121: GREATER
7122: ST_TO_ADDR
// end ;
7123: LD_VAR 0 2
7127: RET
// export function ConnectWithTower ( side ) ; var i , filter , tower ; begin
7128: LD_INT 0
7130: PPUSH
7131: PPUSH
7132: PPUSH
7133: PPUSH
// filter := FilterAllUnits ( [ [ f_side , side ] , [ f_control , control_remote ] , [ f_ok ] ] ) ;
7134: LD_ADDR_VAR 0 4
7138: PUSH
7139: LD_INT 22
7141: PUSH
7142: LD_VAR 0 1
7146: PUSH
7147: EMPTY
7148: LIST
7149: LIST
7150: PUSH
7151: LD_INT 33
7153: PUSH
7154: LD_INT 2
7156: PUSH
7157: EMPTY
7158: LIST
7159: LIST
7160: PUSH
7161: LD_INT 50
7163: PUSH
7164: EMPTY
7165: LIST
7166: PUSH
7167: EMPTY
7168: LIST
7169: LIST
7170: LIST
7171: PPUSH
7172: CALL_OW 69
7176: ST_TO_ADDR
// tower := FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , ar_control_tower ] ] ) ;
7177: LD_ADDR_VAR 0 5
7181: PUSH
7182: LD_INT 22
7184: PUSH
7185: LD_VAR 0 1
7189: PUSH
7190: EMPTY
7191: LIST
7192: LIST
7193: PUSH
7194: LD_INT 34
7196: PUSH
7197: LD_INT 31
7199: PUSH
7200: EMPTY
7201: LIST
7202: LIST
7203: PUSH
7204: EMPTY
7205: LIST
7206: LIST
7207: PPUSH
7208: CALL_OW 69
7212: ST_TO_ADDR
// if tower > 0 and filter > 0 then
7213: LD_VAR 0 5
7217: PUSH
7218: LD_INT 0
7220: GREATER
7221: PUSH
7222: LD_VAR 0 4
7226: PUSH
7227: LD_INT 0
7229: GREATER
7230: AND
7231: IFFALSE 7307
// for i = 1 to filter do
7233: LD_ADDR_VAR 0 3
7237: PUSH
7238: DOUBLE
7239: LD_INT 1
7241: DEC
7242: ST_TO_ADDR
7243: LD_VAR 0 4
7247: PUSH
7248: FOR_TO
7249: IFFALSE 7305
// if not IsControledBy ( filter [ i ] ) then
7251: LD_VAR 0 4
7255: PUSH
7256: LD_VAR 0 3
7260: ARRAY
7261: PPUSH
7262: CALL_OW 312
7266: NOT
7267: IFFALSE 7303
// ComLinkTo ( filter [ i ] , tower [ Rand ( 1 , tower ) ] ) ;
7269: LD_VAR 0 4
7273: PUSH
7274: LD_VAR 0 3
7278: ARRAY
7279: PPUSH
7280: LD_VAR 0 5
7284: PUSH
7285: LD_INT 1
7287: PPUSH
7288: LD_VAR 0 5
7292: PPUSH
7293: CALL_OW 12
7297: ARRAY
7298: PPUSH
7299: CALL_OW 135
7303: GO 7248
7305: POP
7306: POP
// end ;
7307: LD_VAR 0 2
7311: RET
// export function CreateHumanWithClass ( clas , lvl ) ; var skill_com , skill_eng , skill_mech , skill_sci , bonus ; begin
7312: LD_INT 0
7314: PPUSH
7315: PPUSH
7316: PPUSH
7317: PPUSH
7318: PPUSH
7319: PPUSH
// hc_class := clas ;
7320: LD_ADDR_OWVAR 28
7324: PUSH
7325: LD_VAR 0 1
7329: ST_TO_ADDR
// skill_com := ( lvl + Rand ( - 1 , 1 ) ) ;
7330: LD_ADDR_VAR 0 4
7334: PUSH
7335: LD_VAR 0 2
7339: PUSH
7340: LD_INT 1
7342: NEG
7343: PPUSH
7344: LD_INT 1
7346: PPUSH
7347: CALL_OW 12
7351: PLUS
7352: ST_TO_ADDR
// skill_eng := ( lvl + Rand ( - 1 , 1 ) ) ;
7353: LD_ADDR_VAR 0 5
7357: PUSH
7358: LD_VAR 0 2
7362: PUSH
7363: LD_INT 1
7365: NEG
7366: PPUSH
7367: LD_INT 1
7369: PPUSH
7370: CALL_OW 12
7374: PLUS
7375: ST_TO_ADDR
// skill_mech := ( lvl + Rand ( - 1 , 1 ) ) ;
7376: LD_ADDR_VAR 0 6
7380: PUSH
7381: LD_VAR 0 2
7385: PUSH
7386: LD_INT 1
7388: NEG
7389: PPUSH
7390: LD_INT 1
7392: PPUSH
7393: CALL_OW 12
7397: PLUS
7398: ST_TO_ADDR
// skill_sci := ( lvl + Rand ( - 1 , 1 ) ) ;
7399: LD_ADDR_VAR 0 7
7403: PUSH
7404: LD_VAR 0 2
7408: PUSH
7409: LD_INT 1
7411: NEG
7412: PPUSH
7413: LD_INT 1
7415: PPUSH
7416: CALL_OW 12
7420: PLUS
7421: ST_TO_ADDR
// if clas = 1 or clas = 9 or clas = class_sniper or clas = class_mortar then
7422: LD_VAR 0 1
7426: PUSH
7427: LD_INT 1
7429: EQUAL
7430: PUSH
7431: LD_VAR 0 1
7435: PUSH
7436: LD_INT 9
7438: EQUAL
7439: OR
7440: PUSH
7441: LD_VAR 0 1
7445: PUSH
7446: LD_INT 5
7448: EQUAL
7449: OR
7450: PUSH
7451: LD_VAR 0 1
7455: PUSH
7456: LD_INT 8
7458: EQUAL
7459: OR
7460: IFFALSE 7485
// bonus := [ 2 , 0 , 0 , 0 ] ;
7462: LD_ADDR_VAR 0 8
7466: PUSH
7467: LD_INT 2
7469: PUSH
7470: LD_INT 0
7472: PUSH
7473: LD_INT 0
7475: PUSH
7476: LD_INT 0
7478: PUSH
7479: EMPTY
7480: LIST
7481: LIST
7482: LIST
7483: LIST
7484: ST_TO_ADDR
// if clas = 2 then
7485: LD_VAR 0 1
7489: PUSH
7490: LD_INT 2
7492: EQUAL
7493: IFFALSE 7518
// bonus := [ 0 , 2 , 0 , 0 ] ;
7495: LD_ADDR_VAR 0 8
7499: PUSH
7500: LD_INT 0
7502: PUSH
7503: LD_INT 2
7505: PUSH
7506: LD_INT 0
7508: PUSH
7509: LD_INT 0
7511: PUSH
7512: EMPTY
7513: LIST
7514: LIST
7515: LIST
7516: LIST
7517: ST_TO_ADDR
// if clas = 3 then
7518: LD_VAR 0 1
7522: PUSH
7523: LD_INT 3
7525: EQUAL
7526: IFFALSE 7551
// bonus := [ 0 , 0 , 2 , 0 ] ;
7528: LD_ADDR_VAR 0 8
7532: PUSH
7533: LD_INT 0
7535: PUSH
7536: LD_INT 0
7538: PUSH
7539: LD_INT 2
7541: PUSH
7542: LD_INT 0
7544: PUSH
7545: EMPTY
7546: LIST
7547: LIST
7548: LIST
7549: LIST
7550: ST_TO_ADDR
// if clas = 4 then
7551: LD_VAR 0 1
7555: PUSH
7556: LD_INT 4
7558: EQUAL
7559: IFFALSE 7584
// bonus := [ 0 , 0 , 0 , 2 ] ;
7561: LD_ADDR_VAR 0 8
7565: PUSH
7566: LD_INT 0
7568: PUSH
7569: LD_INT 0
7571: PUSH
7572: LD_INT 0
7574: PUSH
7575: LD_INT 2
7577: PUSH
7578: EMPTY
7579: LIST
7580: LIST
7581: LIST
7582: LIST
7583: ST_TO_ADDR
// if clas > 4 and clas <> 9 and clas <> class_sniper and clas <> class_mortar then
7584: LD_VAR 0 1
7588: PUSH
7589: LD_INT 4
7591: GREATER
7592: PUSH
7593: LD_VAR 0 1
7597: PUSH
7598: LD_INT 9
7600: NONEQUAL
7601: AND
7602: PUSH
7603: LD_VAR 0 1
7607: PUSH
7608: LD_INT 5
7610: NONEQUAL
7611: AND
7612: PUSH
7613: LD_VAR 0 1
7617: PUSH
7618: LD_INT 8
7620: NONEQUAL
7621: AND
7622: IFFALSE 7647
// bonus := [ 0 , 0 , 0 , 0 ] ;
7624: LD_ADDR_VAR 0 8
7628: PUSH
7629: LD_INT 0
7631: PUSH
7632: LD_INT 0
7634: PUSH
7635: LD_INT 0
7637: PUSH
7638: LD_INT 0
7640: PUSH
7641: EMPTY
7642: LIST
7643: LIST
7644: LIST
7645: LIST
7646: ST_TO_ADDR
// hc_basic_skills := [ Rand ( 0 , 2 ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) ] ;
7647: LD_ADDR_OWVAR 30
7651: PUSH
7652: LD_INT 0
7654: PPUSH
7655: LD_INT 2
7657: PPUSH
7658: CALL_OW 12
7662: PUSH
7663: LD_INT 0
7665: PPUSH
7666: LD_INT 2
7668: PPUSH
7669: CALL_OW 12
7673: PUSH
7674: LD_INT 0
7676: PPUSH
7677: LD_INT 2
7679: PPUSH
7680: CALL_OW 12
7684: PUSH
7685: LD_INT 0
7687: PPUSH
7688: LD_INT 2
7690: PPUSH
7691: CALL_OW 12
7695: PUSH
7696: EMPTY
7697: LIST
7698: LIST
7699: LIST
7700: LIST
7701: ST_TO_ADDR
// hc_skills := [ skill_com + bonus [ 1 ] , skill_eng + bonus [ 2 ] , skill_mech + bonus [ 3 ] , skill_sci + bonus [ 4 ] ] ;
7702: LD_ADDR_OWVAR 31
7706: PUSH
7707: LD_VAR 0 4
7711: PUSH
7712: LD_VAR 0 8
7716: PUSH
7717: LD_INT 1
7719: ARRAY
7720: PLUS
7721: PUSH
7722: LD_VAR 0 5
7726: PUSH
7727: LD_VAR 0 8
7731: PUSH
7732: LD_INT 2
7734: ARRAY
7735: PLUS
7736: PUSH
7737: LD_VAR 0 6
7741: PUSH
7742: LD_VAR 0 8
7746: PUSH
7747: LD_INT 3
7749: ARRAY
7750: PLUS
7751: PUSH
7752: LD_VAR 0 7
7756: PUSH
7757: LD_VAR 0 8
7761: PUSH
7762: LD_INT 4
7764: ARRAY
7765: PLUS
7766: PUSH
7767: EMPTY
7768: LIST
7769: LIST
7770: LIST
7771: LIST
7772: ST_TO_ADDR
// hc_sex := Rand ( sex_male , sex_female ) ;
7773: LD_ADDR_OWVAR 27
7777: PUSH
7778: LD_INT 1
7780: PPUSH
7781: LD_INT 2
7783: PPUSH
7784: CALL_OW 12
7788: ST_TO_ADDR
// hc_gallery :=  ;
7789: LD_ADDR_OWVAR 33
7793: PUSH
7794: LD_STRING 
7796: ST_TO_ADDR
// hc_attr := [ Rand ( 8 , 12 ) , Rand ( 9 , 11 ) ] ;
7797: LD_ADDR_OWVAR 29
7801: PUSH
7802: LD_INT 8
7804: PPUSH
7805: LD_INT 12
7807: PPUSH
7808: CALL_OW 12
7812: PUSH
7813: LD_INT 9
7815: PPUSH
7816: LD_INT 11
7818: PPUSH
7819: CALL_OW 12
7823: PUSH
7824: EMPTY
7825: LIST
7826: LIST
7827: ST_TO_ADDR
// hc_name :=  ;
7828: LD_ADDR_OWVAR 26
7832: PUSH
7833: LD_STRING 
7835: ST_TO_ADDR
// result := CreateHuman ;
7836: LD_ADDR_VAR 0 3
7840: PUSH
7841: CALL_OW 44
7845: ST_TO_ADDR
// end ;
7846: LD_VAR 0 3
7850: RET
// export function GetSpeed ( unit ) ; begin
7851: LD_INT 0
7853: PPUSH
// result := GetProperties ( unit ) [ 1 ] ;
7854: LD_ADDR_VAR 0 2
7858: PUSH
7859: LD_VAR 0 1
7863: PPUSH
7864: CALL_OW 464
7868: PUSH
7869: LD_INT 1
7871: ARRAY
7872: ST_TO_ADDR
// end ;
7873: LD_VAR 0 2
7877: RET
// export function CreateNature ( area , num1 , num2 , num3 , num4 ) ; var l , apeman , tiger , bird , horse ; begin
7878: LD_INT 0
7880: PPUSH
7881: PPUSH
7882: PPUSH
7883: PPUSH
7884: PPUSH
7885: PPUSH
// uc_nation = nation_nature ;
7886: LD_ADDR_OWVAR 21
7890: PUSH
7891: LD_INT 0
7893: ST_TO_ADDR
// uc_side = 0 ;
7894: LD_ADDR_OWVAR 20
7898: PUSH
7899: LD_INT 0
7901: ST_TO_ADDR
// l = 0 ;
7902: LD_ADDR_VAR 0 7
7906: PUSH
7907: LD_INT 0
7909: ST_TO_ADDR
// repeat begin uc_direction = Rand ( 0 , 5 ) ;
7910: LD_ADDR_OWVAR 24
7914: PUSH
7915: LD_INT 0
7917: PPUSH
7918: LD_INT 5
7920: PPUSH
7921: CALL_OW 12
7925: ST_TO_ADDR
// hc_agressivity = Rand ( - 5 , 0 ) ;
7926: LD_ADDR_OWVAR 35
7930: PUSH
7931: LD_INT 5
7933: NEG
7934: PPUSH
7935: LD_INT 0
7937: PPUSH
7938: CALL_OW 12
7942: ST_TO_ADDR
// hc_gallery =  ;
7943: LD_ADDR_OWVAR 33
7947: PUSH
7948: LD_STRING 
7950: ST_TO_ADDR
// hc_class = class_apeman ;
7951: LD_ADDR_OWVAR 28
7955: PUSH
7956: LD_INT 12
7958: ST_TO_ADDR
// hc_attr = [ Rand ( 11 , 13 ) , Rand ( 10 , 11 ) ] ;
7959: LD_ADDR_OWVAR 29
7963: PUSH
7964: LD_INT 11
7966: PPUSH
7967: LD_INT 13
7969: PPUSH
7970: CALL_OW 12
7974: PUSH
7975: LD_INT 10
7977: PPUSH
7978: LD_INT 11
7980: PPUSH
7981: CALL_OW 12
7985: PUSH
7986: EMPTY
7987: LIST
7988: LIST
7989: ST_TO_ADDR
// hc_sex = sex_male ;
7990: LD_ADDR_OWVAR 27
7994: PUSH
7995: LD_INT 1
7997: ST_TO_ADDR
// hc_skills = [ Rand ( 0 , 2 ) , 0 , 0 , 0 ] ;
7998: LD_ADDR_OWVAR 31
8002: PUSH
8003: LD_INT 0
8005: PPUSH
8006: LD_INT 2
8008: PPUSH
8009: CALL_OW 12
8013: PUSH
8014: LD_INT 0
8016: PUSH
8017: LD_INT 0
8019: PUSH
8020: LD_INT 0
8022: PUSH
8023: EMPTY
8024: LIST
8025: LIST
8026: LIST
8027: LIST
8028: ST_TO_ADDR
// apeman = CreateHuman ;
8029: LD_ADDR_VAR 0 8
8033: PUSH
8034: CALL_OW 44
8038: ST_TO_ADDR
// PlaceUnitArea ( apeman , area , false ) ;
8039: LD_VAR 0 8
8043: PPUSH
8044: LD_VAR 0 1
8048: PPUSH
8049: LD_INT 0
8051: PPUSH
8052: CALL_OW 49
// l = l + 1 ;
8056: LD_ADDR_VAR 0 7
8060: PUSH
8061: LD_VAR 0 7
8065: PUSH
8066: LD_INT 1
8068: PLUS
8069: ST_TO_ADDR
// end until l = num1 ;
8070: LD_VAR 0 7
8074: PUSH
8075: LD_VAR 0 2
8079: EQUAL
8080: IFFALSE 7910
// l = 0 ;
8082: LD_ADDR_VAR 0 7
8086: PUSH
8087: LD_INT 0
8089: ST_TO_ADDR
// repeat begin hc_agressivity = Rand ( 0 , 25 ) ;
8090: LD_ADDR_OWVAR 35
8094: PUSH
8095: LD_INT 0
8097: PPUSH
8098: LD_INT 25
8100: PPUSH
8101: CALL_OW 12
8105: ST_TO_ADDR
// hc_class = class_tiger ;
8106: LD_ADDR_OWVAR 28
8110: PUSH
8111: LD_INT 14
8113: ST_TO_ADDR
// hc_sex = sex_male ;
8114: LD_ADDR_OWVAR 27
8118: PUSH
8119: LD_INT 1
8121: ST_TO_ADDR
// hc_gallery = sandnature ;
8122: LD_ADDR_OWVAR 33
8126: PUSH
8127: LD_STRING sandnature
8129: ST_TO_ADDR
// hc_face_number = 3 ;
8130: LD_ADDR_OWVAR 34
8134: PUSH
8135: LD_INT 3
8137: ST_TO_ADDR
// tiger = CreateHuman ;
8138: LD_ADDR_VAR 0 9
8142: PUSH
8143: CALL_OW 44
8147: ST_TO_ADDR
// PlaceUnitArea ( tiger , area , false ) ;
8148: LD_VAR 0 9
8152: PPUSH
8153: LD_VAR 0 1
8157: PPUSH
8158: LD_INT 0
8160: PPUSH
8161: CALL_OW 49
// l = l + 1 ;
8165: LD_ADDR_VAR 0 7
8169: PUSH
8170: LD_VAR 0 7
8174: PUSH
8175: LD_INT 1
8177: PLUS
8178: ST_TO_ADDR
// end until l = num2 ;
8179: LD_VAR 0 7
8183: PUSH
8184: LD_VAR 0 3
8188: EQUAL
8189: IFFALSE 8090
// l = 0 ;
8191: LD_ADDR_VAR 0 7
8195: PUSH
8196: LD_INT 0
8198: ST_TO_ADDR
// repeat begin hc_class = class_phororhacos ;
8199: LD_ADDR_OWVAR 28
8203: PUSH
8204: LD_INT 18
8206: ST_TO_ADDR
// hc_gallery = sandnature ;
8207: LD_ADDR_OWVAR 33
8211: PUSH
8212: LD_STRING sandnature
8214: ST_TO_ADDR
// hc_face_number = 1 ;
8215: LD_ADDR_OWVAR 34
8219: PUSH
8220: LD_INT 1
8222: ST_TO_ADDR
// bird = CreateHuman ;
8223: LD_ADDR_VAR 0 10
8227: PUSH
8228: CALL_OW 44
8232: ST_TO_ADDR
// PlaceUnitAnywhere ( bird , false ) ;
8233: LD_VAR 0 10
8237: PPUSH
8238: LD_INT 0
8240: PPUSH
8241: CALL_OW 51
// l = l + 1 ;
8245: LD_ADDR_VAR 0 7
8249: PUSH
8250: LD_VAR 0 7
8254: PUSH
8255: LD_INT 1
8257: PLUS
8258: ST_TO_ADDR
// end until l = num3 ;
8259: LD_VAR 0 7
8263: PUSH
8264: LD_VAR 0 4
8268: EQUAL
8269: IFFALSE 8199
// l = 0 ;
8271: LD_ADDR_VAR 0 7
8275: PUSH
8276: LD_INT 0
8278: ST_TO_ADDR
// repeat begin hc_class = 21 ;
8279: LD_ADDR_OWVAR 28
8283: PUSH
8284: LD_INT 21
8286: ST_TO_ADDR
// hc_gallery = sandnature ;
8287: LD_ADDR_OWVAR 33
8291: PUSH
8292: LD_STRING sandnature
8294: ST_TO_ADDR
// hc_face_number = 5 ;
8295: LD_ADDR_OWVAR 34
8299: PUSH
8300: LD_INT 5
8302: ST_TO_ADDR
// horse := CreateHuman ;
8303: LD_ADDR_VAR 0 11
8307: PUSH
8308: CALL_OW 44
8312: ST_TO_ADDR
// PlaceUnitArea ( horse , area , false ) ;
8313: LD_VAR 0 11
8317: PPUSH
8318: LD_VAR 0 1
8322: PPUSH
8323: LD_INT 0
8325: PPUSH
8326: CALL_OW 49
// l = l + 1 ;
8330: LD_ADDR_VAR 0 7
8334: PUSH
8335: LD_VAR 0 7
8339: PUSH
8340: LD_INT 1
8342: PLUS
8343: ST_TO_ADDR
// end until l = num4 ;
8344: LD_VAR 0 7
8348: PUSH
8349: LD_VAR 0 5
8353: EQUAL
8354: IFFALSE 8279
// end ;
8356: LD_VAR 0 6
8360: RET
// export function PrepareComm ; begin
8361: LD_INT 0
8363: PPUSH
// uc_side := 1 ;
8364: LD_ADDR_OWVAR 20
8368: PUSH
8369: LD_INT 1
8371: ST_TO_ADDR
// uc_nation := 1 ;
8372: LD_ADDR_OWVAR 21
8376: PUSH
8377: LD_INT 1
8379: ST_TO_ADDR
// hc_gallery :=  ;
8380: LD_ADDR_OWVAR 33
8384: PUSH
8385: LD_STRING 
8387: ST_TO_ADDR
// hc_name :=  ;
8388: LD_ADDR_OWVAR 26
8392: PUSH
8393: LD_STRING 
8395: ST_TO_ADDR
// hc_class := 1 ;
8396: LD_ADDR_OWVAR 28
8400: PUSH
8401: LD_INT 1
8403: ST_TO_ADDR
// hc_sex := sex_male ;
8404: LD_ADDR_OWVAR 27
8408: PUSH
8409: LD_INT 1
8411: ST_TO_ADDR
// am_comander := CreateHuman ;
8412: LD_ADDR_EXP 46
8416: PUSH
8417: CALL_OW 44
8421: ST_TO_ADDR
// uc_side := 3 ;
8422: LD_ADDR_OWVAR 20
8426: PUSH
8427: LD_INT 3
8429: ST_TO_ADDR
// uc_nation := 3 ;
8430: LD_ADDR_OWVAR 21
8434: PUSH
8435: LD_INT 3
8437: ST_TO_ADDR
// ru_comander := CreateHuman ;
8438: LD_ADDR_EXP 47
8442: PUSH
8443: CALL_OW 44
8447: ST_TO_ADDR
// uc_side := 2 ;
8448: LD_ADDR_OWVAR 20
8452: PUSH
8453: LD_INT 2
8455: ST_TO_ADDR
// uc_nation := 2 ;
8456: LD_ADDR_OWVAR 21
8460: PUSH
8461: LD_INT 2
8463: ST_TO_ADDR
// hc_name := Heike Steyer ;
8464: LD_ADDR_OWVAR 26
8468: PUSH
8469: LD_STRING Heike Steyer
8471: ST_TO_ADDR
// hc_sex := sex_female ;
8472: LD_ADDR_OWVAR 27
8476: PUSH
8477: LD_INT 2
8479: ST_TO_ADDR
// hc_gallery := sandar ;
8480: LD_ADDR_OWVAR 33
8484: PUSH
8485: LD_STRING sandar
8487: ST_TO_ADDR
// hc_face_number := 14 ;
8488: LD_ADDR_OWVAR 34
8492: PUSH
8493: LD_INT 14
8495: ST_TO_ADDR
// ar_comander := CreateHuman ;
8496: LD_ADDR_EXP 48
8500: PUSH
8501: CALL_OW 44
8505: ST_TO_ADDR
// end ;
8506: LD_VAR 0 1
8510: RET
// export function SpeedFilter ( filter , speed ) ; var list , i ; begin
8511: LD_INT 0
8513: PPUSH
8514: PPUSH
8515: PPUSH
// list := [ ] ;
8516: LD_ADDR_VAR 0 4
8520: PUSH
8521: EMPTY
8522: ST_TO_ADDR
// for i = 1 to filter do
8523: LD_ADDR_VAR 0 5
8527: PUSH
8528: DOUBLE
8529: LD_INT 1
8531: DEC
8532: ST_TO_ADDR
8533: LD_VAR 0 1
8537: PUSH
8538: FOR_TO
8539: IFFALSE 8588
// if GetSpeed ( filter [ i ] ) < speed then
8541: LD_VAR 0 1
8545: PUSH
8546: LD_VAR 0 5
8550: ARRAY
8551: PPUSH
8552: CALL 7851 0 1
8556: PUSH
8557: LD_VAR 0 2
8561: LESS
8562: IFFALSE 8586
// list := list ^ filter [ i ] ;
8564: LD_ADDR_VAR 0 4
8568: PUSH
8569: LD_VAR 0 4
8573: PUSH
8574: LD_VAR 0 1
8578: PUSH
8579: LD_VAR 0 5
8583: ARRAY
8584: ADD
8585: ST_TO_ADDR
8586: GO 8538
8588: POP
8589: POP
// result := list ;
8590: LD_ADDR_VAR 0 3
8594: PUSH
8595: LD_VAR 0 4
8599: ST_TO_ADDR
// end ; end_of_file
8600: LD_VAR 0 3
8604: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
8605: LD_INT 0
8607: PPUSH
// ar_miner := 81 ;
8608: LD_ADDR_EXP 59
8612: PUSH
8613: LD_INT 81
8615: ST_TO_ADDR
// ar_crane := 88 ;
8616: LD_ADDR_EXP 58
8620: PUSH
8621: LD_INT 88
8623: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
8624: LD_ADDR_EXP 53
8628: PUSH
8629: LD_INT 89
8631: ST_TO_ADDR
// us_hack := 99 ;
8632: LD_ADDR_EXP 54
8636: PUSH
8637: LD_INT 99
8639: ST_TO_ADDR
// us_artillery := 97 ;
8640: LD_ADDR_EXP 55
8644: PUSH
8645: LD_INT 97
8647: ST_TO_ADDR
// ar_bio_bomb := 91 ;
8648: LD_ADDR_EXP 56
8652: PUSH
8653: LD_INT 91
8655: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
8656: LD_ADDR_EXP 57
8660: PUSH
8661: LD_INT 92
8663: ST_TO_ADDR
// ru_radar := 98 ;
8664: LD_ADDR_EXP 52
8668: PUSH
8669: LD_INT 98
8671: ST_TO_ADDR
// tech_Artillery := 80 ;
8672: LD_ADDR_EXP 60
8676: PUSH
8677: LD_INT 80
8679: ST_TO_ADDR
// tech_RadMat := 81 ;
8680: LD_ADDR_EXP 61
8684: PUSH
8685: LD_INT 81
8687: ST_TO_ADDR
// tech_BasicTools := 82 ;
8688: LD_ADDR_EXP 62
8692: PUSH
8693: LD_INT 82
8695: ST_TO_ADDR
// tech_Cargo := 83 ;
8696: LD_ADDR_EXP 63
8700: PUSH
8701: LD_INT 83
8703: ST_TO_ADDR
// tech_Track := 84 ;
8704: LD_ADDR_EXP 64
8708: PUSH
8709: LD_INT 84
8711: ST_TO_ADDR
// tech_Crane := 85 ;
8712: LD_ADDR_EXP 65
8716: PUSH
8717: LD_INT 85
8719: ST_TO_ADDR
// tech_Bulldozer := 86 ;
8720: LD_ADDR_EXP 66
8724: PUSH
8725: LD_INT 86
8727: ST_TO_ADDR
// tech_Hovercraft := 87 ;
8728: LD_ADDR_EXP 67
8732: PUSH
8733: LD_INT 87
8735: ST_TO_ADDR
// end ;
8736: LD_VAR 0 1
8740: RET
// every 1 do
8741: GO 8743
8743: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
8744: CALL 8605 0 0
8748: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
8749: LD_VAR 0 2
8753: PUSH
8754: LD_INT 100
8756: EQUAL
8757: IFFALSE 9706
// begin if not StreamModeActive then
8759: LD_EXP 68
8763: NOT
8764: IFFALSE 8774
// StreamModeActive := true ;
8766: LD_ADDR_EXP 68
8770: PUSH
8771: LD_INT 1
8773: ST_TO_ADDR
// if p3 = 0 then
8774: LD_VAR 0 3
8778: PUSH
8779: LD_INT 0
8781: EQUAL
8782: IFFALSE 8788
// InitStreamMode ;
8784: CALL 9864 0 0
// if p3 = 1 then
8788: LD_VAR 0 3
8792: PUSH
8793: LD_INT 1
8795: EQUAL
8796: IFFALSE 8806
// sRocket := true ;
8798: LD_ADDR_EXP 73
8802: PUSH
8803: LD_INT 1
8805: ST_TO_ADDR
// if p3 = 2 then
8806: LD_VAR 0 3
8810: PUSH
8811: LD_INT 2
8813: EQUAL
8814: IFFALSE 8824
// sSpeed := true ;
8816: LD_ADDR_EXP 72
8820: PUSH
8821: LD_INT 1
8823: ST_TO_ADDR
// if p3 = 3 then
8824: LD_VAR 0 3
8828: PUSH
8829: LD_INT 3
8831: EQUAL
8832: IFFALSE 8842
// sEngine := true ;
8834: LD_ADDR_EXP 74
8838: PUSH
8839: LD_INT 1
8841: ST_TO_ADDR
// if p3 = 4 then
8842: LD_VAR 0 3
8846: PUSH
8847: LD_INT 4
8849: EQUAL
8850: IFFALSE 8860
// sSpec := true ;
8852: LD_ADDR_EXP 71
8856: PUSH
8857: LD_INT 1
8859: ST_TO_ADDR
// if p3 = 5 then
8860: LD_VAR 0 3
8864: PUSH
8865: LD_INT 5
8867: EQUAL
8868: IFFALSE 8878
// sLevel := true ;
8870: LD_ADDR_EXP 75
8874: PUSH
8875: LD_INT 1
8877: ST_TO_ADDR
// if p3 = 6 then
8878: LD_VAR 0 3
8882: PUSH
8883: LD_INT 6
8885: EQUAL
8886: IFFALSE 8896
// sArmoury := true ;
8888: LD_ADDR_EXP 76
8892: PUSH
8893: LD_INT 1
8895: ST_TO_ADDR
// if p3 = 7 then
8896: LD_VAR 0 3
8900: PUSH
8901: LD_INT 7
8903: EQUAL
8904: IFFALSE 8914
// sRadar := true ;
8906: LD_ADDR_EXP 77
8910: PUSH
8911: LD_INT 1
8913: ST_TO_ADDR
// if p3 = 8 then
8914: LD_VAR 0 3
8918: PUSH
8919: LD_INT 8
8921: EQUAL
8922: IFFALSE 8932
// sBunker := true ;
8924: LD_ADDR_EXP 78
8928: PUSH
8929: LD_INT 1
8931: ST_TO_ADDR
// if p3 = 9 then
8932: LD_VAR 0 3
8936: PUSH
8937: LD_INT 9
8939: EQUAL
8940: IFFALSE 8950
// sHack := true ;
8942: LD_ADDR_EXP 79
8946: PUSH
8947: LD_INT 1
8949: ST_TO_ADDR
// if p3 = 10 then
8950: LD_VAR 0 3
8954: PUSH
8955: LD_INT 10
8957: EQUAL
8958: IFFALSE 8968
// sFire := true ;
8960: LD_ADDR_EXP 80
8964: PUSH
8965: LD_INT 1
8967: ST_TO_ADDR
// if p3 = 11 then
8968: LD_VAR 0 3
8972: PUSH
8973: LD_INT 11
8975: EQUAL
8976: IFFALSE 8986
// sRefresh := true ;
8978: LD_ADDR_EXP 81
8982: PUSH
8983: LD_INT 1
8985: ST_TO_ADDR
// if p3 = 12 then
8986: LD_VAR 0 3
8990: PUSH
8991: LD_INT 12
8993: EQUAL
8994: IFFALSE 9004
// sExp := true ;
8996: LD_ADDR_EXP 82
9000: PUSH
9001: LD_INT 1
9003: ST_TO_ADDR
// if p3 = 13 then
9004: LD_VAR 0 3
9008: PUSH
9009: LD_INT 13
9011: EQUAL
9012: IFFALSE 9022
// sDepot := true ;
9014: LD_ADDR_EXP 83
9018: PUSH
9019: LD_INT 1
9021: ST_TO_ADDR
// if p3 = 14 then
9022: LD_VAR 0 3
9026: PUSH
9027: LD_INT 14
9029: EQUAL
9030: IFFALSE 9040
// sFlag := true ;
9032: LD_ADDR_EXP 84
9036: PUSH
9037: LD_INT 1
9039: ST_TO_ADDR
// if p3 = 15 then
9040: LD_VAR 0 3
9044: PUSH
9045: LD_INT 15
9047: EQUAL
9048: IFFALSE 9058
// sKamikadze := true ;
9050: LD_ADDR_EXP 92
9054: PUSH
9055: LD_INT 1
9057: ST_TO_ADDR
// if p3 = 16 then
9058: LD_VAR 0 3
9062: PUSH
9063: LD_INT 16
9065: EQUAL
9066: IFFALSE 9076
// sTroll := true ;
9068: LD_ADDR_EXP 93
9072: PUSH
9073: LD_INT 1
9075: ST_TO_ADDR
// if p3 = 17 then
9076: LD_VAR 0 3
9080: PUSH
9081: LD_INT 17
9083: EQUAL
9084: IFFALSE 9094
// sSlow := true ;
9086: LD_ADDR_EXP 94
9090: PUSH
9091: LD_INT 1
9093: ST_TO_ADDR
// if p3 = 18 then
9094: LD_VAR 0 3
9098: PUSH
9099: LD_INT 18
9101: EQUAL
9102: IFFALSE 9112
// sLack := true ;
9104: LD_ADDR_EXP 95
9108: PUSH
9109: LD_INT 1
9111: ST_TO_ADDR
// if p3 = 19 then
9112: LD_VAR 0 3
9116: PUSH
9117: LD_INT 19
9119: EQUAL
9120: IFFALSE 9130
// sTank := true ;
9122: LD_ADDR_EXP 97
9126: PUSH
9127: LD_INT 1
9129: ST_TO_ADDR
// if p3 = 20 then
9130: LD_VAR 0 3
9134: PUSH
9135: LD_INT 20
9137: EQUAL
9138: IFFALSE 9148
// sRemote := true ;
9140: LD_ADDR_EXP 98
9144: PUSH
9145: LD_INT 1
9147: ST_TO_ADDR
// if p3 = 21 then
9148: LD_VAR 0 3
9152: PUSH
9153: LD_INT 21
9155: EQUAL
9156: IFFALSE 9166
// sPowell := true ;
9158: LD_ADDR_EXP 99
9162: PUSH
9163: LD_INT 1
9165: ST_TO_ADDR
// if p3 = 22 then
9166: LD_VAR 0 3
9170: PUSH
9171: LD_INT 22
9173: EQUAL
9174: IFFALSE 9184
// sTeleport := true ;
9176: LD_ADDR_EXP 102
9180: PUSH
9181: LD_INT 1
9183: ST_TO_ADDR
// if p3 = 23 then
9184: LD_VAR 0 3
9188: PUSH
9189: LD_INT 23
9191: EQUAL
9192: IFFALSE 9202
// sOilTower := true ;
9194: LD_ADDR_EXP 104
9198: PUSH
9199: LD_INT 1
9201: ST_TO_ADDR
// if p3 = 24 then
9202: LD_VAR 0 3
9206: PUSH
9207: LD_INT 24
9209: EQUAL
9210: IFFALSE 9220
// sShovel := true ;
9212: LD_ADDR_EXP 105
9216: PUSH
9217: LD_INT 1
9219: ST_TO_ADDR
// if p3 = 25 then
9220: LD_VAR 0 3
9224: PUSH
9225: LD_INT 25
9227: EQUAL
9228: IFFALSE 9238
// sSheik := true ;
9230: LD_ADDR_EXP 106
9234: PUSH
9235: LD_INT 1
9237: ST_TO_ADDR
// if p3 = 26 then
9238: LD_VAR 0 3
9242: PUSH
9243: LD_INT 26
9245: EQUAL
9246: IFFALSE 9256
// sEarthquake := true ;
9248: LD_ADDR_EXP 108
9252: PUSH
9253: LD_INT 1
9255: ST_TO_ADDR
// if p3 = 27 then
9256: LD_VAR 0 3
9260: PUSH
9261: LD_INT 27
9263: EQUAL
9264: IFFALSE 9274
// sAI := true ;
9266: LD_ADDR_EXP 109
9270: PUSH
9271: LD_INT 1
9273: ST_TO_ADDR
// if p3 = 28 then
9274: LD_VAR 0 3
9278: PUSH
9279: LD_INT 28
9281: EQUAL
9282: IFFALSE 9292
// sCargo := true ;
9284: LD_ADDR_EXP 112
9288: PUSH
9289: LD_INT 1
9291: ST_TO_ADDR
// if p3 = 29 then
9292: LD_VAR 0 3
9296: PUSH
9297: LD_INT 29
9299: EQUAL
9300: IFFALSE 9310
// sDLaser := true ;
9302: LD_ADDR_EXP 113
9306: PUSH
9307: LD_INT 1
9309: ST_TO_ADDR
// if p3 = 30 then
9310: LD_VAR 0 3
9314: PUSH
9315: LD_INT 30
9317: EQUAL
9318: IFFALSE 9328
// sExchange := true ;
9320: LD_ADDR_EXP 114
9324: PUSH
9325: LD_INT 1
9327: ST_TO_ADDR
// if p3 = 31 then
9328: LD_VAR 0 3
9332: PUSH
9333: LD_INT 31
9335: EQUAL
9336: IFFALSE 9346
// sFac := true ;
9338: LD_ADDR_EXP 115
9342: PUSH
9343: LD_INT 1
9345: ST_TO_ADDR
// if p3 = 32 then
9346: LD_VAR 0 3
9350: PUSH
9351: LD_INT 32
9353: EQUAL
9354: IFFALSE 9364
// sPower := true ;
9356: LD_ADDR_EXP 116
9360: PUSH
9361: LD_INT 1
9363: ST_TO_ADDR
// if p3 = 33 then
9364: LD_VAR 0 3
9368: PUSH
9369: LD_INT 33
9371: EQUAL
9372: IFFALSE 9382
// sRandom := true ;
9374: LD_ADDR_EXP 117
9378: PUSH
9379: LD_INT 1
9381: ST_TO_ADDR
// if p3 = 34 then
9382: LD_VAR 0 3
9386: PUSH
9387: LD_INT 34
9389: EQUAL
9390: IFFALSE 9400
// sShield := true ;
9392: LD_ADDR_EXP 118
9396: PUSH
9397: LD_INT 1
9399: ST_TO_ADDR
// if p3 = 35 then
9400: LD_VAR 0 3
9404: PUSH
9405: LD_INT 35
9407: EQUAL
9408: IFFALSE 9418
// sTime := true ;
9410: LD_ADDR_EXP 119
9414: PUSH
9415: LD_INT 1
9417: ST_TO_ADDR
// if p3 = 36 then
9418: LD_VAR 0 3
9422: PUSH
9423: LD_INT 36
9425: EQUAL
9426: IFFALSE 9436
// sTools := true ;
9428: LD_ADDR_EXP 120
9432: PUSH
9433: LD_INT 1
9435: ST_TO_ADDR
// if p3 = 101 then
9436: LD_VAR 0 3
9440: PUSH
9441: LD_INT 101
9443: EQUAL
9444: IFFALSE 9454
// sSold := true ;
9446: LD_ADDR_EXP 85
9450: PUSH
9451: LD_INT 1
9453: ST_TO_ADDR
// if p3 = 102 then
9454: LD_VAR 0 3
9458: PUSH
9459: LD_INT 102
9461: EQUAL
9462: IFFALSE 9472
// sDiff := true ;
9464: LD_ADDR_EXP 86
9468: PUSH
9469: LD_INT 1
9471: ST_TO_ADDR
// if p3 = 103 then
9472: LD_VAR 0 3
9476: PUSH
9477: LD_INT 103
9479: EQUAL
9480: IFFALSE 9490
// sFog := true ;
9482: LD_ADDR_EXP 89
9486: PUSH
9487: LD_INT 1
9489: ST_TO_ADDR
// if p3 = 104 then
9490: LD_VAR 0 3
9494: PUSH
9495: LD_INT 104
9497: EQUAL
9498: IFFALSE 9508
// sReset := true ;
9500: LD_ADDR_EXP 90
9504: PUSH
9505: LD_INT 1
9507: ST_TO_ADDR
// if p3 = 105 then
9508: LD_VAR 0 3
9512: PUSH
9513: LD_INT 105
9515: EQUAL
9516: IFFALSE 9526
// sSun := true ;
9518: LD_ADDR_EXP 91
9522: PUSH
9523: LD_INT 1
9525: ST_TO_ADDR
// if p3 = 106 then
9526: LD_VAR 0 3
9530: PUSH
9531: LD_INT 106
9533: EQUAL
9534: IFFALSE 9544
// sTiger := true ;
9536: LD_ADDR_EXP 87
9540: PUSH
9541: LD_INT 1
9543: ST_TO_ADDR
// if p3 = 107 then
9544: LD_VAR 0 3
9548: PUSH
9549: LD_INT 107
9551: EQUAL
9552: IFFALSE 9562
// sBomb := true ;
9554: LD_ADDR_EXP 88
9558: PUSH
9559: LD_INT 1
9561: ST_TO_ADDR
// if p3 = 108 then
9562: LD_VAR 0 3
9566: PUSH
9567: LD_INT 108
9569: EQUAL
9570: IFFALSE 9580
// sWound := true ;
9572: LD_ADDR_EXP 96
9576: PUSH
9577: LD_INT 1
9579: ST_TO_ADDR
// if p3 = 109 then
9580: LD_VAR 0 3
9584: PUSH
9585: LD_INT 109
9587: EQUAL
9588: IFFALSE 9598
// sBetray := true ;
9590: LD_ADDR_EXP 100
9594: PUSH
9595: LD_INT 1
9597: ST_TO_ADDR
// if p3 = 110 then
9598: LD_VAR 0 3
9602: PUSH
9603: LD_INT 110
9605: EQUAL
9606: IFFALSE 9616
// sContamin := true ;
9608: LD_ADDR_EXP 101
9612: PUSH
9613: LD_INT 1
9615: ST_TO_ADDR
// if p3 = 111 then
9616: LD_VAR 0 3
9620: PUSH
9621: LD_INT 111
9623: EQUAL
9624: IFFALSE 9634
// sOil := true ;
9626: LD_ADDR_EXP 103
9630: PUSH
9631: LD_INT 1
9633: ST_TO_ADDR
// if p3 = 112 then
9634: LD_VAR 0 3
9638: PUSH
9639: LD_INT 112
9641: EQUAL
9642: IFFALSE 9652
// sStu := true ;
9644: LD_ADDR_EXP 107
9648: PUSH
9649: LD_INT 1
9651: ST_TO_ADDR
// if p3 = 113 then
9652: LD_VAR 0 3
9656: PUSH
9657: LD_INT 113
9659: EQUAL
9660: IFFALSE 9670
// sBazooka := true ;
9662: LD_ADDR_EXP 110
9666: PUSH
9667: LD_INT 1
9669: ST_TO_ADDR
// if p3 = 114 then
9670: LD_VAR 0 3
9674: PUSH
9675: LD_INT 114
9677: EQUAL
9678: IFFALSE 9688
// sMortar := true ;
9680: LD_ADDR_EXP 111
9684: PUSH
9685: LD_INT 1
9687: ST_TO_ADDR
// if p3 = 115 then
9688: LD_VAR 0 3
9692: PUSH
9693: LD_INT 115
9695: EQUAL
9696: IFFALSE 9706
// sRanger := true ;
9698: LD_ADDR_EXP 121
9702: PUSH
9703: LD_INT 1
9705: ST_TO_ADDR
// end ; if p2 = 101 then
9706: LD_VAR 0 2
9710: PUSH
9711: LD_INT 101
9713: EQUAL
9714: IFFALSE 9842
// begin case p3 of 1 :
9716: LD_VAR 0 3
9720: PUSH
9721: LD_INT 1
9723: DOUBLE
9724: EQUAL
9725: IFTRUE 9729
9727: GO 9736
9729: POP
// hHackUnlimitedResources ; 2 :
9730: CALL 20877 0 0
9734: GO 9842
9736: LD_INT 2
9738: DOUBLE
9739: EQUAL
9740: IFTRUE 9744
9742: GO 9751
9744: POP
// hHackSetLevel10 ; 3 :
9745: CALL 21010 0 0
9749: GO 9842
9751: LD_INT 3
9753: DOUBLE
9754: EQUAL
9755: IFTRUE 9759
9757: GO 9766
9759: POP
// hHackSetLevel10YourUnits ; 4 :
9760: CALL 21095 0 0
9764: GO 9842
9766: LD_INT 4
9768: DOUBLE
9769: EQUAL
9770: IFTRUE 9774
9772: GO 9781
9774: POP
// hHackInvincible ; 5 :
9775: CALL 21543 0 0
9779: GO 9842
9781: LD_INT 5
9783: DOUBLE
9784: EQUAL
9785: IFTRUE 9789
9787: GO 9796
9789: POP
// hHackInvisible ; 6 :
9790: CALL 21654 0 0
9794: GO 9842
9796: LD_INT 6
9798: DOUBLE
9799: EQUAL
9800: IFTRUE 9804
9802: GO 9811
9804: POP
// hHackChangeYourSide ; 7 :
9805: CALL 21711 0 0
9809: GO 9842
9811: LD_INT 7
9813: DOUBLE
9814: EQUAL
9815: IFTRUE 9819
9817: GO 9826
9819: POP
// hHackChangeUnitSide ; 8 :
9820: CALL 21753 0 0
9824: GO 9842
9826: LD_INT 8
9828: DOUBLE
9829: EQUAL
9830: IFTRUE 9834
9832: GO 9841
9834: POP
// hHackFog ; end ;
9835: CALL 21854 0 0
9839: GO 9842
9841: POP
// end ; end ;
9842: PPOPN 6
9844: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
9845: GO 9847
9847: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
9848: LD_STRING initStreamRollete();
9850: PPUSH
9851: CALL_OW 559
// InitStreamMode ;
9855: CALL 9864 0 0
// DefineStreamItems ( ) ;
9859: CALL 10304 0 0
// end ;
9863: END
// function InitStreamMode ; begin
9864: LD_INT 0
9866: PPUSH
// streamModeActive := false ;
9867: LD_ADDR_EXP 68
9871: PUSH
9872: LD_INT 0
9874: ST_TO_ADDR
// normalCounter := 36 ;
9875: LD_ADDR_EXP 69
9879: PUSH
9880: LD_INT 36
9882: ST_TO_ADDR
// hardcoreCounter := 16 ;
9883: LD_ADDR_EXP 70
9887: PUSH
9888: LD_INT 16
9890: ST_TO_ADDR
// sRocket := false ;
9891: LD_ADDR_EXP 73
9895: PUSH
9896: LD_INT 0
9898: ST_TO_ADDR
// sSpeed := false ;
9899: LD_ADDR_EXP 72
9903: PUSH
9904: LD_INT 0
9906: ST_TO_ADDR
// sEngine := false ;
9907: LD_ADDR_EXP 74
9911: PUSH
9912: LD_INT 0
9914: ST_TO_ADDR
// sSpec := false ;
9915: LD_ADDR_EXP 71
9919: PUSH
9920: LD_INT 0
9922: ST_TO_ADDR
// sLevel := false ;
9923: LD_ADDR_EXP 75
9927: PUSH
9928: LD_INT 0
9930: ST_TO_ADDR
// sArmoury := false ;
9931: LD_ADDR_EXP 76
9935: PUSH
9936: LD_INT 0
9938: ST_TO_ADDR
// sRadar := false ;
9939: LD_ADDR_EXP 77
9943: PUSH
9944: LD_INT 0
9946: ST_TO_ADDR
// sBunker := false ;
9947: LD_ADDR_EXP 78
9951: PUSH
9952: LD_INT 0
9954: ST_TO_ADDR
// sHack := false ;
9955: LD_ADDR_EXP 79
9959: PUSH
9960: LD_INT 0
9962: ST_TO_ADDR
// sFire := false ;
9963: LD_ADDR_EXP 80
9967: PUSH
9968: LD_INT 0
9970: ST_TO_ADDR
// sRefresh := false ;
9971: LD_ADDR_EXP 81
9975: PUSH
9976: LD_INT 0
9978: ST_TO_ADDR
// sExp := false ;
9979: LD_ADDR_EXP 82
9983: PUSH
9984: LD_INT 0
9986: ST_TO_ADDR
// sDepot := false ;
9987: LD_ADDR_EXP 83
9991: PUSH
9992: LD_INT 0
9994: ST_TO_ADDR
// sFlag := false ;
9995: LD_ADDR_EXP 84
9999: PUSH
10000: LD_INT 0
10002: ST_TO_ADDR
// sKamikadze := false ;
10003: LD_ADDR_EXP 92
10007: PUSH
10008: LD_INT 0
10010: ST_TO_ADDR
// sTroll := false ;
10011: LD_ADDR_EXP 93
10015: PUSH
10016: LD_INT 0
10018: ST_TO_ADDR
// sSlow := false ;
10019: LD_ADDR_EXP 94
10023: PUSH
10024: LD_INT 0
10026: ST_TO_ADDR
// sLack := false ;
10027: LD_ADDR_EXP 95
10031: PUSH
10032: LD_INT 0
10034: ST_TO_ADDR
// sTank := false ;
10035: LD_ADDR_EXP 97
10039: PUSH
10040: LD_INT 0
10042: ST_TO_ADDR
// sRemote := false ;
10043: LD_ADDR_EXP 98
10047: PUSH
10048: LD_INT 0
10050: ST_TO_ADDR
// sPowell := false ;
10051: LD_ADDR_EXP 99
10055: PUSH
10056: LD_INT 0
10058: ST_TO_ADDR
// sTeleport := false ;
10059: LD_ADDR_EXP 102
10063: PUSH
10064: LD_INT 0
10066: ST_TO_ADDR
// sOilTower := false ;
10067: LD_ADDR_EXP 104
10071: PUSH
10072: LD_INT 0
10074: ST_TO_ADDR
// sShovel := false ;
10075: LD_ADDR_EXP 105
10079: PUSH
10080: LD_INT 0
10082: ST_TO_ADDR
// sSheik := false ;
10083: LD_ADDR_EXP 106
10087: PUSH
10088: LD_INT 0
10090: ST_TO_ADDR
// sEarthquake := false ;
10091: LD_ADDR_EXP 108
10095: PUSH
10096: LD_INT 0
10098: ST_TO_ADDR
// sAI := false ;
10099: LD_ADDR_EXP 109
10103: PUSH
10104: LD_INT 0
10106: ST_TO_ADDR
// sCargo := false ;
10107: LD_ADDR_EXP 112
10111: PUSH
10112: LD_INT 0
10114: ST_TO_ADDR
// sDLaser := false ;
10115: LD_ADDR_EXP 113
10119: PUSH
10120: LD_INT 0
10122: ST_TO_ADDR
// sExchange := false ;
10123: LD_ADDR_EXP 114
10127: PUSH
10128: LD_INT 0
10130: ST_TO_ADDR
// sFac := false ;
10131: LD_ADDR_EXP 115
10135: PUSH
10136: LD_INT 0
10138: ST_TO_ADDR
// sPower := false ;
10139: LD_ADDR_EXP 116
10143: PUSH
10144: LD_INT 0
10146: ST_TO_ADDR
// sRandom := false ;
10147: LD_ADDR_EXP 117
10151: PUSH
10152: LD_INT 0
10154: ST_TO_ADDR
// sShield := false ;
10155: LD_ADDR_EXP 118
10159: PUSH
10160: LD_INT 0
10162: ST_TO_ADDR
// sTime := false ;
10163: LD_ADDR_EXP 119
10167: PUSH
10168: LD_INT 0
10170: ST_TO_ADDR
// sTools := false ;
10171: LD_ADDR_EXP 120
10175: PUSH
10176: LD_INT 0
10178: ST_TO_ADDR
// sSold := false ;
10179: LD_ADDR_EXP 85
10183: PUSH
10184: LD_INT 0
10186: ST_TO_ADDR
// sDiff := false ;
10187: LD_ADDR_EXP 86
10191: PUSH
10192: LD_INT 0
10194: ST_TO_ADDR
// sFog := false ;
10195: LD_ADDR_EXP 89
10199: PUSH
10200: LD_INT 0
10202: ST_TO_ADDR
// sReset := false ;
10203: LD_ADDR_EXP 90
10207: PUSH
10208: LD_INT 0
10210: ST_TO_ADDR
// sSun := false ;
10211: LD_ADDR_EXP 91
10215: PUSH
10216: LD_INT 0
10218: ST_TO_ADDR
// sTiger := false ;
10219: LD_ADDR_EXP 87
10223: PUSH
10224: LD_INT 0
10226: ST_TO_ADDR
// sBomb := false ;
10227: LD_ADDR_EXP 88
10231: PUSH
10232: LD_INT 0
10234: ST_TO_ADDR
// sWound := false ;
10235: LD_ADDR_EXP 96
10239: PUSH
10240: LD_INT 0
10242: ST_TO_ADDR
// sBetray := false ;
10243: LD_ADDR_EXP 100
10247: PUSH
10248: LD_INT 0
10250: ST_TO_ADDR
// sContamin := false ;
10251: LD_ADDR_EXP 101
10255: PUSH
10256: LD_INT 0
10258: ST_TO_ADDR
// sOil := false ;
10259: LD_ADDR_EXP 103
10263: PUSH
10264: LD_INT 0
10266: ST_TO_ADDR
// sStu := false ;
10267: LD_ADDR_EXP 107
10271: PUSH
10272: LD_INT 0
10274: ST_TO_ADDR
// sBazooka := false ;
10275: LD_ADDR_EXP 110
10279: PUSH
10280: LD_INT 0
10282: ST_TO_ADDR
// sMortar := false ;
10283: LD_ADDR_EXP 111
10287: PUSH
10288: LD_INT 0
10290: ST_TO_ADDR
// sRanger := false ;
10291: LD_ADDR_EXP 121
10295: PUSH
10296: LD_INT 0
10298: ST_TO_ADDR
// end ;
10299: LD_VAR 0 1
10303: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
10304: LD_INT 0
10306: PPUSH
10307: PPUSH
10308: PPUSH
10309: PPUSH
10310: PPUSH
// result := [ ] ;
10311: LD_ADDR_VAR 0 1
10315: PUSH
10316: EMPTY
10317: ST_TO_ADDR
// if campaign_id = 1 then
10318: LD_OWVAR 69
10322: PUSH
10323: LD_INT 1
10325: EQUAL
10326: IFFALSE 13264
// begin case mission_number of 1 :
10328: LD_OWVAR 70
10332: PUSH
10333: LD_INT 1
10335: DOUBLE
10336: EQUAL
10337: IFTRUE 10341
10339: GO 10405
10341: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
10342: LD_ADDR_VAR 0 1
10346: PUSH
10347: LD_INT 2
10349: PUSH
10350: LD_INT 4
10352: PUSH
10353: LD_INT 11
10355: PUSH
10356: LD_INT 12
10358: PUSH
10359: LD_INT 15
10361: PUSH
10362: LD_INT 16
10364: PUSH
10365: LD_INT 22
10367: PUSH
10368: LD_INT 23
10370: PUSH
10371: LD_INT 26
10373: PUSH
10374: EMPTY
10375: LIST
10376: LIST
10377: LIST
10378: LIST
10379: LIST
10380: LIST
10381: LIST
10382: LIST
10383: LIST
10384: PUSH
10385: LD_INT 101
10387: PUSH
10388: LD_INT 102
10390: PUSH
10391: LD_INT 106
10393: PUSH
10394: EMPTY
10395: LIST
10396: LIST
10397: LIST
10398: PUSH
10399: EMPTY
10400: LIST
10401: LIST
10402: ST_TO_ADDR
10403: GO 13262
10405: LD_INT 2
10407: DOUBLE
10408: EQUAL
10409: IFTRUE 10413
10411: GO 10485
10413: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
10414: LD_ADDR_VAR 0 1
10418: PUSH
10419: LD_INT 2
10421: PUSH
10422: LD_INT 4
10424: PUSH
10425: LD_INT 11
10427: PUSH
10428: LD_INT 12
10430: PUSH
10431: LD_INT 15
10433: PUSH
10434: LD_INT 16
10436: PUSH
10437: LD_INT 22
10439: PUSH
10440: LD_INT 23
10442: PUSH
10443: LD_INT 26
10445: PUSH
10446: EMPTY
10447: LIST
10448: LIST
10449: LIST
10450: LIST
10451: LIST
10452: LIST
10453: LIST
10454: LIST
10455: LIST
10456: PUSH
10457: LD_INT 101
10459: PUSH
10460: LD_INT 102
10462: PUSH
10463: LD_INT 105
10465: PUSH
10466: LD_INT 106
10468: PUSH
10469: LD_INT 108
10471: PUSH
10472: EMPTY
10473: LIST
10474: LIST
10475: LIST
10476: LIST
10477: LIST
10478: PUSH
10479: EMPTY
10480: LIST
10481: LIST
10482: ST_TO_ADDR
10483: GO 13262
10485: LD_INT 3
10487: DOUBLE
10488: EQUAL
10489: IFTRUE 10493
10491: GO 10569
10493: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
10494: LD_ADDR_VAR 0 1
10498: PUSH
10499: LD_INT 2
10501: PUSH
10502: LD_INT 4
10504: PUSH
10505: LD_INT 5
10507: PUSH
10508: LD_INT 11
10510: PUSH
10511: LD_INT 12
10513: PUSH
10514: LD_INT 15
10516: PUSH
10517: LD_INT 16
10519: PUSH
10520: LD_INT 22
10522: PUSH
10523: LD_INT 26
10525: PUSH
10526: LD_INT 36
10528: PUSH
10529: EMPTY
10530: LIST
10531: LIST
10532: LIST
10533: LIST
10534: LIST
10535: LIST
10536: LIST
10537: LIST
10538: LIST
10539: LIST
10540: PUSH
10541: LD_INT 101
10543: PUSH
10544: LD_INT 102
10546: PUSH
10547: LD_INT 105
10549: PUSH
10550: LD_INT 106
10552: PUSH
10553: LD_INT 108
10555: PUSH
10556: EMPTY
10557: LIST
10558: LIST
10559: LIST
10560: LIST
10561: LIST
10562: PUSH
10563: EMPTY
10564: LIST
10565: LIST
10566: ST_TO_ADDR
10567: GO 13262
10569: LD_INT 4
10571: DOUBLE
10572: EQUAL
10573: IFTRUE 10577
10575: GO 10661
10577: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
10578: LD_ADDR_VAR 0 1
10582: PUSH
10583: LD_INT 2
10585: PUSH
10586: LD_INT 4
10588: PUSH
10589: LD_INT 5
10591: PUSH
10592: LD_INT 8
10594: PUSH
10595: LD_INT 11
10597: PUSH
10598: LD_INT 12
10600: PUSH
10601: LD_INT 15
10603: PUSH
10604: LD_INT 16
10606: PUSH
10607: LD_INT 22
10609: PUSH
10610: LD_INT 23
10612: PUSH
10613: LD_INT 26
10615: PUSH
10616: LD_INT 36
10618: PUSH
10619: EMPTY
10620: LIST
10621: LIST
10622: LIST
10623: LIST
10624: LIST
10625: LIST
10626: LIST
10627: LIST
10628: LIST
10629: LIST
10630: LIST
10631: LIST
10632: PUSH
10633: LD_INT 101
10635: PUSH
10636: LD_INT 102
10638: PUSH
10639: LD_INT 105
10641: PUSH
10642: LD_INT 106
10644: PUSH
10645: LD_INT 108
10647: PUSH
10648: EMPTY
10649: LIST
10650: LIST
10651: LIST
10652: LIST
10653: LIST
10654: PUSH
10655: EMPTY
10656: LIST
10657: LIST
10658: ST_TO_ADDR
10659: GO 13262
10661: LD_INT 5
10663: DOUBLE
10664: EQUAL
10665: IFTRUE 10669
10667: GO 10769
10669: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
10670: LD_ADDR_VAR 0 1
10674: PUSH
10675: LD_INT 2
10677: PUSH
10678: LD_INT 4
10680: PUSH
10681: LD_INT 5
10683: PUSH
10684: LD_INT 6
10686: PUSH
10687: LD_INT 8
10689: PUSH
10690: LD_INT 11
10692: PUSH
10693: LD_INT 12
10695: PUSH
10696: LD_INT 15
10698: PUSH
10699: LD_INT 16
10701: PUSH
10702: LD_INT 22
10704: PUSH
10705: LD_INT 23
10707: PUSH
10708: LD_INT 25
10710: PUSH
10711: LD_INT 26
10713: PUSH
10714: LD_INT 36
10716: PUSH
10717: EMPTY
10718: LIST
10719: LIST
10720: LIST
10721: LIST
10722: LIST
10723: LIST
10724: LIST
10725: LIST
10726: LIST
10727: LIST
10728: LIST
10729: LIST
10730: LIST
10731: LIST
10732: PUSH
10733: LD_INT 101
10735: PUSH
10736: LD_INT 102
10738: PUSH
10739: LD_INT 105
10741: PUSH
10742: LD_INT 106
10744: PUSH
10745: LD_INT 108
10747: PUSH
10748: LD_INT 109
10750: PUSH
10751: LD_INT 112
10753: PUSH
10754: EMPTY
10755: LIST
10756: LIST
10757: LIST
10758: LIST
10759: LIST
10760: LIST
10761: LIST
10762: PUSH
10763: EMPTY
10764: LIST
10765: LIST
10766: ST_TO_ADDR
10767: GO 13262
10769: LD_INT 6
10771: DOUBLE
10772: EQUAL
10773: IFTRUE 10777
10775: GO 10897
10777: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
10778: LD_ADDR_VAR 0 1
10782: PUSH
10783: LD_INT 2
10785: PUSH
10786: LD_INT 4
10788: PUSH
10789: LD_INT 5
10791: PUSH
10792: LD_INT 6
10794: PUSH
10795: LD_INT 8
10797: PUSH
10798: LD_INT 11
10800: PUSH
10801: LD_INT 12
10803: PUSH
10804: LD_INT 15
10806: PUSH
10807: LD_INT 16
10809: PUSH
10810: LD_INT 20
10812: PUSH
10813: LD_INT 21
10815: PUSH
10816: LD_INT 22
10818: PUSH
10819: LD_INT 23
10821: PUSH
10822: LD_INT 25
10824: PUSH
10825: LD_INT 26
10827: PUSH
10828: LD_INT 30
10830: PUSH
10831: LD_INT 31
10833: PUSH
10834: LD_INT 32
10836: PUSH
10837: LD_INT 36
10839: PUSH
10840: EMPTY
10841: LIST
10842: LIST
10843: LIST
10844: LIST
10845: LIST
10846: LIST
10847: LIST
10848: LIST
10849: LIST
10850: LIST
10851: LIST
10852: LIST
10853: LIST
10854: LIST
10855: LIST
10856: LIST
10857: LIST
10858: LIST
10859: LIST
10860: PUSH
10861: LD_INT 101
10863: PUSH
10864: LD_INT 102
10866: PUSH
10867: LD_INT 105
10869: PUSH
10870: LD_INT 106
10872: PUSH
10873: LD_INT 108
10875: PUSH
10876: LD_INT 109
10878: PUSH
10879: LD_INT 112
10881: PUSH
10882: EMPTY
10883: LIST
10884: LIST
10885: LIST
10886: LIST
10887: LIST
10888: LIST
10889: LIST
10890: PUSH
10891: EMPTY
10892: LIST
10893: LIST
10894: ST_TO_ADDR
10895: GO 13262
10897: LD_INT 7
10899: DOUBLE
10900: EQUAL
10901: IFTRUE 10905
10903: GO 11005
10905: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
10906: LD_ADDR_VAR 0 1
10910: PUSH
10911: LD_INT 2
10913: PUSH
10914: LD_INT 4
10916: PUSH
10917: LD_INT 5
10919: PUSH
10920: LD_INT 7
10922: PUSH
10923: LD_INT 11
10925: PUSH
10926: LD_INT 12
10928: PUSH
10929: LD_INT 15
10931: PUSH
10932: LD_INT 16
10934: PUSH
10935: LD_INT 20
10937: PUSH
10938: LD_INT 21
10940: PUSH
10941: LD_INT 22
10943: PUSH
10944: LD_INT 23
10946: PUSH
10947: LD_INT 25
10949: PUSH
10950: LD_INT 26
10952: PUSH
10953: EMPTY
10954: LIST
10955: LIST
10956: LIST
10957: LIST
10958: LIST
10959: LIST
10960: LIST
10961: LIST
10962: LIST
10963: LIST
10964: LIST
10965: LIST
10966: LIST
10967: LIST
10968: PUSH
10969: LD_INT 101
10971: PUSH
10972: LD_INT 102
10974: PUSH
10975: LD_INT 103
10977: PUSH
10978: LD_INT 105
10980: PUSH
10981: LD_INT 106
10983: PUSH
10984: LD_INT 108
10986: PUSH
10987: LD_INT 112
10989: PUSH
10990: EMPTY
10991: LIST
10992: LIST
10993: LIST
10994: LIST
10995: LIST
10996: LIST
10997: LIST
10998: PUSH
10999: EMPTY
11000: LIST
11001: LIST
11002: ST_TO_ADDR
11003: GO 13262
11005: LD_INT 8
11007: DOUBLE
11008: EQUAL
11009: IFTRUE 11013
11011: GO 11141
11013: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
11014: LD_ADDR_VAR 0 1
11018: PUSH
11019: LD_INT 2
11021: PUSH
11022: LD_INT 4
11024: PUSH
11025: LD_INT 5
11027: PUSH
11028: LD_INT 6
11030: PUSH
11031: LD_INT 7
11033: PUSH
11034: LD_INT 8
11036: PUSH
11037: LD_INT 11
11039: PUSH
11040: LD_INT 12
11042: PUSH
11043: LD_INT 15
11045: PUSH
11046: LD_INT 16
11048: PUSH
11049: LD_INT 20
11051: PUSH
11052: LD_INT 21
11054: PUSH
11055: LD_INT 22
11057: PUSH
11058: LD_INT 23
11060: PUSH
11061: LD_INT 25
11063: PUSH
11064: LD_INT 26
11066: PUSH
11067: LD_INT 30
11069: PUSH
11070: LD_INT 31
11072: PUSH
11073: LD_INT 32
11075: PUSH
11076: LD_INT 36
11078: PUSH
11079: EMPTY
11080: LIST
11081: LIST
11082: LIST
11083: LIST
11084: LIST
11085: LIST
11086: LIST
11087: LIST
11088: LIST
11089: LIST
11090: LIST
11091: LIST
11092: LIST
11093: LIST
11094: LIST
11095: LIST
11096: LIST
11097: LIST
11098: LIST
11099: LIST
11100: PUSH
11101: LD_INT 101
11103: PUSH
11104: LD_INT 102
11106: PUSH
11107: LD_INT 103
11109: PUSH
11110: LD_INT 105
11112: PUSH
11113: LD_INT 106
11115: PUSH
11116: LD_INT 108
11118: PUSH
11119: LD_INT 109
11121: PUSH
11122: LD_INT 112
11124: PUSH
11125: EMPTY
11126: LIST
11127: LIST
11128: LIST
11129: LIST
11130: LIST
11131: LIST
11132: LIST
11133: LIST
11134: PUSH
11135: EMPTY
11136: LIST
11137: LIST
11138: ST_TO_ADDR
11139: GO 13262
11141: LD_INT 9
11143: DOUBLE
11144: EQUAL
11145: IFTRUE 11149
11147: GO 11285
11149: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
11150: LD_ADDR_VAR 0 1
11154: PUSH
11155: LD_INT 2
11157: PUSH
11158: LD_INT 4
11160: PUSH
11161: LD_INT 5
11163: PUSH
11164: LD_INT 6
11166: PUSH
11167: LD_INT 7
11169: PUSH
11170: LD_INT 8
11172: PUSH
11173: LD_INT 11
11175: PUSH
11176: LD_INT 12
11178: PUSH
11179: LD_INT 15
11181: PUSH
11182: LD_INT 16
11184: PUSH
11185: LD_INT 20
11187: PUSH
11188: LD_INT 21
11190: PUSH
11191: LD_INT 22
11193: PUSH
11194: LD_INT 23
11196: PUSH
11197: LD_INT 25
11199: PUSH
11200: LD_INT 26
11202: PUSH
11203: LD_INT 28
11205: PUSH
11206: LD_INT 30
11208: PUSH
11209: LD_INT 31
11211: PUSH
11212: LD_INT 32
11214: PUSH
11215: LD_INT 36
11217: PUSH
11218: EMPTY
11219: LIST
11220: LIST
11221: LIST
11222: LIST
11223: LIST
11224: LIST
11225: LIST
11226: LIST
11227: LIST
11228: LIST
11229: LIST
11230: LIST
11231: LIST
11232: LIST
11233: LIST
11234: LIST
11235: LIST
11236: LIST
11237: LIST
11238: LIST
11239: LIST
11240: PUSH
11241: LD_INT 101
11243: PUSH
11244: LD_INT 102
11246: PUSH
11247: LD_INT 103
11249: PUSH
11250: LD_INT 105
11252: PUSH
11253: LD_INT 106
11255: PUSH
11256: LD_INT 108
11258: PUSH
11259: LD_INT 109
11261: PUSH
11262: LD_INT 112
11264: PUSH
11265: LD_INT 114
11267: PUSH
11268: EMPTY
11269: LIST
11270: LIST
11271: LIST
11272: LIST
11273: LIST
11274: LIST
11275: LIST
11276: LIST
11277: LIST
11278: PUSH
11279: EMPTY
11280: LIST
11281: LIST
11282: ST_TO_ADDR
11283: GO 13262
11285: LD_INT 10
11287: DOUBLE
11288: EQUAL
11289: IFTRUE 11293
11291: GO 11477
11293: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
11294: LD_ADDR_VAR 0 1
11298: PUSH
11299: LD_INT 2
11301: PUSH
11302: LD_INT 4
11304: PUSH
11305: LD_INT 5
11307: PUSH
11308: LD_INT 6
11310: PUSH
11311: LD_INT 7
11313: PUSH
11314: LD_INT 8
11316: PUSH
11317: LD_INT 9
11319: PUSH
11320: LD_INT 10
11322: PUSH
11323: LD_INT 11
11325: PUSH
11326: LD_INT 12
11328: PUSH
11329: LD_INT 13
11331: PUSH
11332: LD_INT 14
11334: PUSH
11335: LD_INT 15
11337: PUSH
11338: LD_INT 16
11340: PUSH
11341: LD_INT 17
11343: PUSH
11344: LD_INT 18
11346: PUSH
11347: LD_INT 19
11349: PUSH
11350: LD_INT 20
11352: PUSH
11353: LD_INT 21
11355: PUSH
11356: LD_INT 22
11358: PUSH
11359: LD_INT 23
11361: PUSH
11362: LD_INT 24
11364: PUSH
11365: LD_INT 25
11367: PUSH
11368: LD_INT 26
11370: PUSH
11371: LD_INT 28
11373: PUSH
11374: LD_INT 30
11376: PUSH
11377: LD_INT 31
11379: PUSH
11380: LD_INT 32
11382: PUSH
11383: LD_INT 36
11385: PUSH
11386: EMPTY
11387: LIST
11388: LIST
11389: LIST
11390: LIST
11391: LIST
11392: LIST
11393: LIST
11394: LIST
11395: LIST
11396: LIST
11397: LIST
11398: LIST
11399: LIST
11400: LIST
11401: LIST
11402: LIST
11403: LIST
11404: LIST
11405: LIST
11406: LIST
11407: LIST
11408: LIST
11409: LIST
11410: LIST
11411: LIST
11412: LIST
11413: LIST
11414: LIST
11415: LIST
11416: PUSH
11417: LD_INT 101
11419: PUSH
11420: LD_INT 102
11422: PUSH
11423: LD_INT 103
11425: PUSH
11426: LD_INT 104
11428: PUSH
11429: LD_INT 105
11431: PUSH
11432: LD_INT 106
11434: PUSH
11435: LD_INT 107
11437: PUSH
11438: LD_INT 108
11440: PUSH
11441: LD_INT 109
11443: PUSH
11444: LD_INT 110
11446: PUSH
11447: LD_INT 111
11449: PUSH
11450: LD_INT 112
11452: PUSH
11453: LD_INT 114
11455: PUSH
11456: EMPTY
11457: LIST
11458: LIST
11459: LIST
11460: LIST
11461: LIST
11462: LIST
11463: LIST
11464: LIST
11465: LIST
11466: LIST
11467: LIST
11468: LIST
11469: LIST
11470: PUSH
11471: EMPTY
11472: LIST
11473: LIST
11474: ST_TO_ADDR
11475: GO 13262
11477: LD_INT 11
11479: DOUBLE
11480: EQUAL
11481: IFTRUE 11485
11483: GO 11677
11485: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
11486: LD_ADDR_VAR 0 1
11490: PUSH
11491: LD_INT 2
11493: PUSH
11494: LD_INT 3
11496: PUSH
11497: LD_INT 4
11499: PUSH
11500: LD_INT 5
11502: PUSH
11503: LD_INT 6
11505: PUSH
11506: LD_INT 7
11508: PUSH
11509: LD_INT 8
11511: PUSH
11512: LD_INT 9
11514: PUSH
11515: LD_INT 10
11517: PUSH
11518: LD_INT 11
11520: PUSH
11521: LD_INT 12
11523: PUSH
11524: LD_INT 13
11526: PUSH
11527: LD_INT 14
11529: PUSH
11530: LD_INT 15
11532: PUSH
11533: LD_INT 16
11535: PUSH
11536: LD_INT 17
11538: PUSH
11539: LD_INT 18
11541: PUSH
11542: LD_INT 19
11544: PUSH
11545: LD_INT 20
11547: PUSH
11548: LD_INT 21
11550: PUSH
11551: LD_INT 22
11553: PUSH
11554: LD_INT 23
11556: PUSH
11557: LD_INT 24
11559: PUSH
11560: LD_INT 25
11562: PUSH
11563: LD_INT 26
11565: PUSH
11566: LD_INT 28
11568: PUSH
11569: LD_INT 30
11571: PUSH
11572: LD_INT 31
11574: PUSH
11575: LD_INT 32
11577: PUSH
11578: LD_INT 34
11580: PUSH
11581: LD_INT 36
11583: PUSH
11584: EMPTY
11585: LIST
11586: LIST
11587: LIST
11588: LIST
11589: LIST
11590: LIST
11591: LIST
11592: LIST
11593: LIST
11594: LIST
11595: LIST
11596: LIST
11597: LIST
11598: LIST
11599: LIST
11600: LIST
11601: LIST
11602: LIST
11603: LIST
11604: LIST
11605: LIST
11606: LIST
11607: LIST
11608: LIST
11609: LIST
11610: LIST
11611: LIST
11612: LIST
11613: LIST
11614: LIST
11615: LIST
11616: PUSH
11617: LD_INT 101
11619: PUSH
11620: LD_INT 102
11622: PUSH
11623: LD_INT 103
11625: PUSH
11626: LD_INT 104
11628: PUSH
11629: LD_INT 105
11631: PUSH
11632: LD_INT 106
11634: PUSH
11635: LD_INT 107
11637: PUSH
11638: LD_INT 108
11640: PUSH
11641: LD_INT 109
11643: PUSH
11644: LD_INT 110
11646: PUSH
11647: LD_INT 111
11649: PUSH
11650: LD_INT 112
11652: PUSH
11653: LD_INT 114
11655: PUSH
11656: EMPTY
11657: LIST
11658: LIST
11659: LIST
11660: LIST
11661: LIST
11662: LIST
11663: LIST
11664: LIST
11665: LIST
11666: LIST
11667: LIST
11668: LIST
11669: LIST
11670: PUSH
11671: EMPTY
11672: LIST
11673: LIST
11674: ST_TO_ADDR
11675: GO 13262
11677: LD_INT 12
11679: DOUBLE
11680: EQUAL
11681: IFTRUE 11685
11683: GO 11893
11685: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
11686: LD_ADDR_VAR 0 1
11690: PUSH
11691: LD_INT 1
11693: PUSH
11694: LD_INT 2
11696: PUSH
11697: LD_INT 3
11699: PUSH
11700: LD_INT 4
11702: PUSH
11703: LD_INT 5
11705: PUSH
11706: LD_INT 6
11708: PUSH
11709: LD_INT 7
11711: PUSH
11712: LD_INT 8
11714: PUSH
11715: LD_INT 9
11717: PUSH
11718: LD_INT 10
11720: PUSH
11721: LD_INT 11
11723: PUSH
11724: LD_INT 12
11726: PUSH
11727: LD_INT 13
11729: PUSH
11730: LD_INT 14
11732: PUSH
11733: LD_INT 15
11735: PUSH
11736: LD_INT 16
11738: PUSH
11739: LD_INT 17
11741: PUSH
11742: LD_INT 18
11744: PUSH
11745: LD_INT 19
11747: PUSH
11748: LD_INT 20
11750: PUSH
11751: LD_INT 21
11753: PUSH
11754: LD_INT 22
11756: PUSH
11757: LD_INT 23
11759: PUSH
11760: LD_INT 24
11762: PUSH
11763: LD_INT 25
11765: PUSH
11766: LD_INT 26
11768: PUSH
11769: LD_INT 27
11771: PUSH
11772: LD_INT 28
11774: PUSH
11775: LD_INT 30
11777: PUSH
11778: LD_INT 31
11780: PUSH
11781: LD_INT 32
11783: PUSH
11784: LD_INT 33
11786: PUSH
11787: LD_INT 34
11789: PUSH
11790: LD_INT 36
11792: PUSH
11793: EMPTY
11794: LIST
11795: LIST
11796: LIST
11797: LIST
11798: LIST
11799: LIST
11800: LIST
11801: LIST
11802: LIST
11803: LIST
11804: LIST
11805: LIST
11806: LIST
11807: LIST
11808: LIST
11809: LIST
11810: LIST
11811: LIST
11812: LIST
11813: LIST
11814: LIST
11815: LIST
11816: LIST
11817: LIST
11818: LIST
11819: LIST
11820: LIST
11821: LIST
11822: LIST
11823: LIST
11824: LIST
11825: LIST
11826: LIST
11827: LIST
11828: PUSH
11829: LD_INT 101
11831: PUSH
11832: LD_INT 102
11834: PUSH
11835: LD_INT 103
11837: PUSH
11838: LD_INT 104
11840: PUSH
11841: LD_INT 105
11843: PUSH
11844: LD_INT 106
11846: PUSH
11847: LD_INT 107
11849: PUSH
11850: LD_INT 108
11852: PUSH
11853: LD_INT 109
11855: PUSH
11856: LD_INT 110
11858: PUSH
11859: LD_INT 111
11861: PUSH
11862: LD_INT 112
11864: PUSH
11865: LD_INT 113
11867: PUSH
11868: LD_INT 114
11870: PUSH
11871: EMPTY
11872: LIST
11873: LIST
11874: LIST
11875: LIST
11876: LIST
11877: LIST
11878: LIST
11879: LIST
11880: LIST
11881: LIST
11882: LIST
11883: LIST
11884: LIST
11885: LIST
11886: PUSH
11887: EMPTY
11888: LIST
11889: LIST
11890: ST_TO_ADDR
11891: GO 13262
11893: LD_INT 13
11895: DOUBLE
11896: EQUAL
11897: IFTRUE 11901
11899: GO 12097
11901: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
11902: LD_ADDR_VAR 0 1
11906: PUSH
11907: LD_INT 1
11909: PUSH
11910: LD_INT 2
11912: PUSH
11913: LD_INT 3
11915: PUSH
11916: LD_INT 4
11918: PUSH
11919: LD_INT 5
11921: PUSH
11922: LD_INT 8
11924: PUSH
11925: LD_INT 9
11927: PUSH
11928: LD_INT 10
11930: PUSH
11931: LD_INT 11
11933: PUSH
11934: LD_INT 12
11936: PUSH
11937: LD_INT 14
11939: PUSH
11940: LD_INT 15
11942: PUSH
11943: LD_INT 16
11945: PUSH
11946: LD_INT 17
11948: PUSH
11949: LD_INT 18
11951: PUSH
11952: LD_INT 19
11954: PUSH
11955: LD_INT 20
11957: PUSH
11958: LD_INT 21
11960: PUSH
11961: LD_INT 22
11963: PUSH
11964: LD_INT 23
11966: PUSH
11967: LD_INT 24
11969: PUSH
11970: LD_INT 25
11972: PUSH
11973: LD_INT 26
11975: PUSH
11976: LD_INT 27
11978: PUSH
11979: LD_INT 28
11981: PUSH
11982: LD_INT 30
11984: PUSH
11985: LD_INT 31
11987: PUSH
11988: LD_INT 32
11990: PUSH
11991: LD_INT 33
11993: PUSH
11994: LD_INT 34
11996: PUSH
11997: LD_INT 36
11999: PUSH
12000: EMPTY
12001: LIST
12002: LIST
12003: LIST
12004: LIST
12005: LIST
12006: LIST
12007: LIST
12008: LIST
12009: LIST
12010: LIST
12011: LIST
12012: LIST
12013: LIST
12014: LIST
12015: LIST
12016: LIST
12017: LIST
12018: LIST
12019: LIST
12020: LIST
12021: LIST
12022: LIST
12023: LIST
12024: LIST
12025: LIST
12026: LIST
12027: LIST
12028: LIST
12029: LIST
12030: LIST
12031: LIST
12032: PUSH
12033: LD_INT 101
12035: PUSH
12036: LD_INT 102
12038: PUSH
12039: LD_INT 103
12041: PUSH
12042: LD_INT 104
12044: PUSH
12045: LD_INT 105
12047: PUSH
12048: LD_INT 106
12050: PUSH
12051: LD_INT 107
12053: PUSH
12054: LD_INT 108
12056: PUSH
12057: LD_INT 109
12059: PUSH
12060: LD_INT 110
12062: PUSH
12063: LD_INT 111
12065: PUSH
12066: LD_INT 112
12068: PUSH
12069: LD_INT 113
12071: PUSH
12072: LD_INT 114
12074: PUSH
12075: EMPTY
12076: LIST
12077: LIST
12078: LIST
12079: LIST
12080: LIST
12081: LIST
12082: LIST
12083: LIST
12084: LIST
12085: LIST
12086: LIST
12087: LIST
12088: LIST
12089: LIST
12090: PUSH
12091: EMPTY
12092: LIST
12093: LIST
12094: ST_TO_ADDR
12095: GO 13262
12097: LD_INT 14
12099: DOUBLE
12100: EQUAL
12101: IFTRUE 12105
12103: GO 12317
12105: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
12106: LD_ADDR_VAR 0 1
12110: PUSH
12111: LD_INT 1
12113: PUSH
12114: LD_INT 2
12116: PUSH
12117: LD_INT 3
12119: PUSH
12120: LD_INT 4
12122: PUSH
12123: LD_INT 5
12125: PUSH
12126: LD_INT 6
12128: PUSH
12129: LD_INT 7
12131: PUSH
12132: LD_INT 8
12134: PUSH
12135: LD_INT 9
12137: PUSH
12138: LD_INT 10
12140: PUSH
12141: LD_INT 11
12143: PUSH
12144: LD_INT 12
12146: PUSH
12147: LD_INT 13
12149: PUSH
12150: LD_INT 14
12152: PUSH
12153: LD_INT 15
12155: PUSH
12156: LD_INT 16
12158: PUSH
12159: LD_INT 17
12161: PUSH
12162: LD_INT 18
12164: PUSH
12165: LD_INT 19
12167: PUSH
12168: LD_INT 20
12170: PUSH
12171: LD_INT 21
12173: PUSH
12174: LD_INT 22
12176: PUSH
12177: LD_INT 23
12179: PUSH
12180: LD_INT 24
12182: PUSH
12183: LD_INT 25
12185: PUSH
12186: LD_INT 26
12188: PUSH
12189: LD_INT 27
12191: PUSH
12192: LD_INT 28
12194: PUSH
12195: LD_INT 29
12197: PUSH
12198: LD_INT 30
12200: PUSH
12201: LD_INT 31
12203: PUSH
12204: LD_INT 32
12206: PUSH
12207: LD_INT 33
12209: PUSH
12210: LD_INT 34
12212: PUSH
12213: LD_INT 36
12215: PUSH
12216: EMPTY
12217: LIST
12218: LIST
12219: LIST
12220: LIST
12221: LIST
12222: LIST
12223: LIST
12224: LIST
12225: LIST
12226: LIST
12227: LIST
12228: LIST
12229: LIST
12230: LIST
12231: LIST
12232: LIST
12233: LIST
12234: LIST
12235: LIST
12236: LIST
12237: LIST
12238: LIST
12239: LIST
12240: LIST
12241: LIST
12242: LIST
12243: LIST
12244: LIST
12245: LIST
12246: LIST
12247: LIST
12248: LIST
12249: LIST
12250: LIST
12251: LIST
12252: PUSH
12253: LD_INT 101
12255: PUSH
12256: LD_INT 102
12258: PUSH
12259: LD_INT 103
12261: PUSH
12262: LD_INT 104
12264: PUSH
12265: LD_INT 105
12267: PUSH
12268: LD_INT 106
12270: PUSH
12271: LD_INT 107
12273: PUSH
12274: LD_INT 108
12276: PUSH
12277: LD_INT 109
12279: PUSH
12280: LD_INT 110
12282: PUSH
12283: LD_INT 111
12285: PUSH
12286: LD_INT 112
12288: PUSH
12289: LD_INT 113
12291: PUSH
12292: LD_INT 114
12294: PUSH
12295: EMPTY
12296: LIST
12297: LIST
12298: LIST
12299: LIST
12300: LIST
12301: LIST
12302: LIST
12303: LIST
12304: LIST
12305: LIST
12306: LIST
12307: LIST
12308: LIST
12309: LIST
12310: PUSH
12311: EMPTY
12312: LIST
12313: LIST
12314: ST_TO_ADDR
12315: GO 13262
12317: LD_INT 15
12319: DOUBLE
12320: EQUAL
12321: IFTRUE 12325
12323: GO 12537
12325: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
12326: LD_ADDR_VAR 0 1
12330: PUSH
12331: LD_INT 1
12333: PUSH
12334: LD_INT 2
12336: PUSH
12337: LD_INT 3
12339: PUSH
12340: LD_INT 4
12342: PUSH
12343: LD_INT 5
12345: PUSH
12346: LD_INT 6
12348: PUSH
12349: LD_INT 7
12351: PUSH
12352: LD_INT 8
12354: PUSH
12355: LD_INT 9
12357: PUSH
12358: LD_INT 10
12360: PUSH
12361: LD_INT 11
12363: PUSH
12364: LD_INT 12
12366: PUSH
12367: LD_INT 13
12369: PUSH
12370: LD_INT 14
12372: PUSH
12373: LD_INT 15
12375: PUSH
12376: LD_INT 16
12378: PUSH
12379: LD_INT 17
12381: PUSH
12382: LD_INT 18
12384: PUSH
12385: LD_INT 19
12387: PUSH
12388: LD_INT 20
12390: PUSH
12391: LD_INT 21
12393: PUSH
12394: LD_INT 22
12396: PUSH
12397: LD_INT 23
12399: PUSH
12400: LD_INT 24
12402: PUSH
12403: LD_INT 25
12405: PUSH
12406: LD_INT 26
12408: PUSH
12409: LD_INT 27
12411: PUSH
12412: LD_INT 28
12414: PUSH
12415: LD_INT 29
12417: PUSH
12418: LD_INT 30
12420: PUSH
12421: LD_INT 31
12423: PUSH
12424: LD_INT 32
12426: PUSH
12427: LD_INT 33
12429: PUSH
12430: LD_INT 34
12432: PUSH
12433: LD_INT 36
12435: PUSH
12436: EMPTY
12437: LIST
12438: LIST
12439: LIST
12440: LIST
12441: LIST
12442: LIST
12443: LIST
12444: LIST
12445: LIST
12446: LIST
12447: LIST
12448: LIST
12449: LIST
12450: LIST
12451: LIST
12452: LIST
12453: LIST
12454: LIST
12455: LIST
12456: LIST
12457: LIST
12458: LIST
12459: LIST
12460: LIST
12461: LIST
12462: LIST
12463: LIST
12464: LIST
12465: LIST
12466: LIST
12467: LIST
12468: LIST
12469: LIST
12470: LIST
12471: LIST
12472: PUSH
12473: LD_INT 101
12475: PUSH
12476: LD_INT 102
12478: PUSH
12479: LD_INT 103
12481: PUSH
12482: LD_INT 104
12484: PUSH
12485: LD_INT 105
12487: PUSH
12488: LD_INT 106
12490: PUSH
12491: LD_INT 107
12493: PUSH
12494: LD_INT 108
12496: PUSH
12497: LD_INT 109
12499: PUSH
12500: LD_INT 110
12502: PUSH
12503: LD_INT 111
12505: PUSH
12506: LD_INT 112
12508: PUSH
12509: LD_INT 113
12511: PUSH
12512: LD_INT 114
12514: PUSH
12515: EMPTY
12516: LIST
12517: LIST
12518: LIST
12519: LIST
12520: LIST
12521: LIST
12522: LIST
12523: LIST
12524: LIST
12525: LIST
12526: LIST
12527: LIST
12528: LIST
12529: LIST
12530: PUSH
12531: EMPTY
12532: LIST
12533: LIST
12534: ST_TO_ADDR
12535: GO 13262
12537: LD_INT 16
12539: DOUBLE
12540: EQUAL
12541: IFTRUE 12545
12543: GO 12669
12545: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
12546: LD_ADDR_VAR 0 1
12550: PUSH
12551: LD_INT 2
12553: PUSH
12554: LD_INT 4
12556: PUSH
12557: LD_INT 5
12559: PUSH
12560: LD_INT 7
12562: PUSH
12563: LD_INT 11
12565: PUSH
12566: LD_INT 12
12568: PUSH
12569: LD_INT 15
12571: PUSH
12572: LD_INT 16
12574: PUSH
12575: LD_INT 20
12577: PUSH
12578: LD_INT 21
12580: PUSH
12581: LD_INT 22
12583: PUSH
12584: LD_INT 23
12586: PUSH
12587: LD_INT 25
12589: PUSH
12590: LD_INT 26
12592: PUSH
12593: LD_INT 30
12595: PUSH
12596: LD_INT 31
12598: PUSH
12599: LD_INT 32
12601: PUSH
12602: LD_INT 33
12604: PUSH
12605: LD_INT 34
12607: PUSH
12608: EMPTY
12609: LIST
12610: LIST
12611: LIST
12612: LIST
12613: LIST
12614: LIST
12615: LIST
12616: LIST
12617: LIST
12618: LIST
12619: LIST
12620: LIST
12621: LIST
12622: LIST
12623: LIST
12624: LIST
12625: LIST
12626: LIST
12627: LIST
12628: PUSH
12629: LD_INT 101
12631: PUSH
12632: LD_INT 102
12634: PUSH
12635: LD_INT 103
12637: PUSH
12638: LD_INT 106
12640: PUSH
12641: LD_INT 108
12643: PUSH
12644: LD_INT 112
12646: PUSH
12647: LD_INT 113
12649: PUSH
12650: LD_INT 114
12652: PUSH
12653: EMPTY
12654: LIST
12655: LIST
12656: LIST
12657: LIST
12658: LIST
12659: LIST
12660: LIST
12661: LIST
12662: PUSH
12663: EMPTY
12664: LIST
12665: LIST
12666: ST_TO_ADDR
12667: GO 13262
12669: LD_INT 17
12671: DOUBLE
12672: EQUAL
12673: IFTRUE 12677
12675: GO 12889
12677: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
12678: LD_ADDR_VAR 0 1
12682: PUSH
12683: LD_INT 1
12685: PUSH
12686: LD_INT 2
12688: PUSH
12689: LD_INT 3
12691: PUSH
12692: LD_INT 4
12694: PUSH
12695: LD_INT 5
12697: PUSH
12698: LD_INT 6
12700: PUSH
12701: LD_INT 7
12703: PUSH
12704: LD_INT 8
12706: PUSH
12707: LD_INT 9
12709: PUSH
12710: LD_INT 10
12712: PUSH
12713: LD_INT 11
12715: PUSH
12716: LD_INT 12
12718: PUSH
12719: LD_INT 13
12721: PUSH
12722: LD_INT 14
12724: PUSH
12725: LD_INT 15
12727: PUSH
12728: LD_INT 16
12730: PUSH
12731: LD_INT 17
12733: PUSH
12734: LD_INT 18
12736: PUSH
12737: LD_INT 19
12739: PUSH
12740: LD_INT 20
12742: PUSH
12743: LD_INT 21
12745: PUSH
12746: LD_INT 22
12748: PUSH
12749: LD_INT 23
12751: PUSH
12752: LD_INT 24
12754: PUSH
12755: LD_INT 25
12757: PUSH
12758: LD_INT 26
12760: PUSH
12761: LD_INT 27
12763: PUSH
12764: LD_INT 28
12766: PUSH
12767: LD_INT 29
12769: PUSH
12770: LD_INT 30
12772: PUSH
12773: LD_INT 31
12775: PUSH
12776: LD_INT 32
12778: PUSH
12779: LD_INT 33
12781: PUSH
12782: LD_INT 34
12784: PUSH
12785: LD_INT 36
12787: PUSH
12788: EMPTY
12789: LIST
12790: LIST
12791: LIST
12792: LIST
12793: LIST
12794: LIST
12795: LIST
12796: LIST
12797: LIST
12798: LIST
12799: LIST
12800: LIST
12801: LIST
12802: LIST
12803: LIST
12804: LIST
12805: LIST
12806: LIST
12807: LIST
12808: LIST
12809: LIST
12810: LIST
12811: LIST
12812: LIST
12813: LIST
12814: LIST
12815: LIST
12816: LIST
12817: LIST
12818: LIST
12819: LIST
12820: LIST
12821: LIST
12822: LIST
12823: LIST
12824: PUSH
12825: LD_INT 101
12827: PUSH
12828: LD_INT 102
12830: PUSH
12831: LD_INT 103
12833: PUSH
12834: LD_INT 104
12836: PUSH
12837: LD_INT 105
12839: PUSH
12840: LD_INT 106
12842: PUSH
12843: LD_INT 107
12845: PUSH
12846: LD_INT 108
12848: PUSH
12849: LD_INT 109
12851: PUSH
12852: LD_INT 110
12854: PUSH
12855: LD_INT 111
12857: PUSH
12858: LD_INT 112
12860: PUSH
12861: LD_INT 113
12863: PUSH
12864: LD_INT 114
12866: PUSH
12867: EMPTY
12868: LIST
12869: LIST
12870: LIST
12871: LIST
12872: LIST
12873: LIST
12874: LIST
12875: LIST
12876: LIST
12877: LIST
12878: LIST
12879: LIST
12880: LIST
12881: LIST
12882: PUSH
12883: EMPTY
12884: LIST
12885: LIST
12886: ST_TO_ADDR
12887: GO 13262
12889: LD_INT 18
12891: DOUBLE
12892: EQUAL
12893: IFTRUE 12897
12895: GO 13033
12897: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
12898: LD_ADDR_VAR 0 1
12902: PUSH
12903: LD_INT 2
12905: PUSH
12906: LD_INT 4
12908: PUSH
12909: LD_INT 5
12911: PUSH
12912: LD_INT 7
12914: PUSH
12915: LD_INT 11
12917: PUSH
12918: LD_INT 12
12920: PUSH
12921: LD_INT 15
12923: PUSH
12924: LD_INT 16
12926: PUSH
12927: LD_INT 20
12929: PUSH
12930: LD_INT 21
12932: PUSH
12933: LD_INT 22
12935: PUSH
12936: LD_INT 23
12938: PUSH
12939: LD_INT 25
12941: PUSH
12942: LD_INT 26
12944: PUSH
12945: LD_INT 30
12947: PUSH
12948: LD_INT 31
12950: PUSH
12951: LD_INT 32
12953: PUSH
12954: LD_INT 33
12956: PUSH
12957: LD_INT 34
12959: PUSH
12960: LD_INT 35
12962: PUSH
12963: LD_INT 36
12965: PUSH
12966: EMPTY
12967: LIST
12968: LIST
12969: LIST
12970: LIST
12971: LIST
12972: LIST
12973: LIST
12974: LIST
12975: LIST
12976: LIST
12977: LIST
12978: LIST
12979: LIST
12980: LIST
12981: LIST
12982: LIST
12983: LIST
12984: LIST
12985: LIST
12986: LIST
12987: LIST
12988: PUSH
12989: LD_INT 101
12991: PUSH
12992: LD_INT 102
12994: PUSH
12995: LD_INT 103
12997: PUSH
12998: LD_INT 106
13000: PUSH
13001: LD_INT 108
13003: PUSH
13004: LD_INT 112
13006: PUSH
13007: LD_INT 113
13009: PUSH
13010: LD_INT 114
13012: PUSH
13013: LD_INT 115
13015: PUSH
13016: EMPTY
13017: LIST
13018: LIST
13019: LIST
13020: LIST
13021: LIST
13022: LIST
13023: LIST
13024: LIST
13025: LIST
13026: PUSH
13027: EMPTY
13028: LIST
13029: LIST
13030: ST_TO_ADDR
13031: GO 13262
13033: LD_INT 19
13035: DOUBLE
13036: EQUAL
13037: IFTRUE 13041
13039: GO 13261
13041: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
13042: LD_ADDR_VAR 0 1
13046: PUSH
13047: LD_INT 1
13049: PUSH
13050: LD_INT 2
13052: PUSH
13053: LD_INT 3
13055: PUSH
13056: LD_INT 4
13058: PUSH
13059: LD_INT 5
13061: PUSH
13062: LD_INT 6
13064: PUSH
13065: LD_INT 7
13067: PUSH
13068: LD_INT 8
13070: PUSH
13071: LD_INT 9
13073: PUSH
13074: LD_INT 10
13076: PUSH
13077: LD_INT 11
13079: PUSH
13080: LD_INT 12
13082: PUSH
13083: LD_INT 13
13085: PUSH
13086: LD_INT 14
13088: PUSH
13089: LD_INT 15
13091: PUSH
13092: LD_INT 16
13094: PUSH
13095: LD_INT 17
13097: PUSH
13098: LD_INT 18
13100: PUSH
13101: LD_INT 19
13103: PUSH
13104: LD_INT 20
13106: PUSH
13107: LD_INT 21
13109: PUSH
13110: LD_INT 22
13112: PUSH
13113: LD_INT 23
13115: PUSH
13116: LD_INT 24
13118: PUSH
13119: LD_INT 25
13121: PUSH
13122: LD_INT 26
13124: PUSH
13125: LD_INT 27
13127: PUSH
13128: LD_INT 28
13130: PUSH
13131: LD_INT 29
13133: PUSH
13134: LD_INT 30
13136: PUSH
13137: LD_INT 31
13139: PUSH
13140: LD_INT 32
13142: PUSH
13143: LD_INT 33
13145: PUSH
13146: LD_INT 34
13148: PUSH
13149: LD_INT 35
13151: PUSH
13152: LD_INT 36
13154: PUSH
13155: EMPTY
13156: LIST
13157: LIST
13158: LIST
13159: LIST
13160: LIST
13161: LIST
13162: LIST
13163: LIST
13164: LIST
13165: LIST
13166: LIST
13167: LIST
13168: LIST
13169: LIST
13170: LIST
13171: LIST
13172: LIST
13173: LIST
13174: LIST
13175: LIST
13176: LIST
13177: LIST
13178: LIST
13179: LIST
13180: LIST
13181: LIST
13182: LIST
13183: LIST
13184: LIST
13185: LIST
13186: LIST
13187: LIST
13188: LIST
13189: LIST
13190: LIST
13191: LIST
13192: PUSH
13193: LD_INT 101
13195: PUSH
13196: LD_INT 102
13198: PUSH
13199: LD_INT 103
13201: PUSH
13202: LD_INT 104
13204: PUSH
13205: LD_INT 105
13207: PUSH
13208: LD_INT 106
13210: PUSH
13211: LD_INT 107
13213: PUSH
13214: LD_INT 108
13216: PUSH
13217: LD_INT 109
13219: PUSH
13220: LD_INT 110
13222: PUSH
13223: LD_INT 111
13225: PUSH
13226: LD_INT 112
13228: PUSH
13229: LD_INT 113
13231: PUSH
13232: LD_INT 114
13234: PUSH
13235: LD_INT 115
13237: PUSH
13238: EMPTY
13239: LIST
13240: LIST
13241: LIST
13242: LIST
13243: LIST
13244: LIST
13245: LIST
13246: LIST
13247: LIST
13248: LIST
13249: LIST
13250: LIST
13251: LIST
13252: LIST
13253: LIST
13254: PUSH
13255: EMPTY
13256: LIST
13257: LIST
13258: ST_TO_ADDR
13259: GO 13262
13261: POP
// end else
13262: GO 13481
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
13264: LD_ADDR_VAR 0 1
13268: PUSH
13269: LD_INT 1
13271: PUSH
13272: LD_INT 2
13274: PUSH
13275: LD_INT 3
13277: PUSH
13278: LD_INT 4
13280: PUSH
13281: LD_INT 5
13283: PUSH
13284: LD_INT 6
13286: PUSH
13287: LD_INT 7
13289: PUSH
13290: LD_INT 8
13292: PUSH
13293: LD_INT 9
13295: PUSH
13296: LD_INT 10
13298: PUSH
13299: LD_INT 11
13301: PUSH
13302: LD_INT 12
13304: PUSH
13305: LD_INT 13
13307: PUSH
13308: LD_INT 14
13310: PUSH
13311: LD_INT 15
13313: PUSH
13314: LD_INT 16
13316: PUSH
13317: LD_INT 17
13319: PUSH
13320: LD_INT 18
13322: PUSH
13323: LD_INT 19
13325: PUSH
13326: LD_INT 20
13328: PUSH
13329: LD_INT 21
13331: PUSH
13332: LD_INT 22
13334: PUSH
13335: LD_INT 23
13337: PUSH
13338: LD_INT 24
13340: PUSH
13341: LD_INT 25
13343: PUSH
13344: LD_INT 26
13346: PUSH
13347: LD_INT 27
13349: PUSH
13350: LD_INT 28
13352: PUSH
13353: LD_INT 29
13355: PUSH
13356: LD_INT 30
13358: PUSH
13359: LD_INT 31
13361: PUSH
13362: LD_INT 32
13364: PUSH
13365: LD_INT 33
13367: PUSH
13368: LD_INT 34
13370: PUSH
13371: LD_INT 35
13373: PUSH
13374: LD_INT 36
13376: PUSH
13377: EMPTY
13378: LIST
13379: LIST
13380: LIST
13381: LIST
13382: LIST
13383: LIST
13384: LIST
13385: LIST
13386: LIST
13387: LIST
13388: LIST
13389: LIST
13390: LIST
13391: LIST
13392: LIST
13393: LIST
13394: LIST
13395: LIST
13396: LIST
13397: LIST
13398: LIST
13399: LIST
13400: LIST
13401: LIST
13402: LIST
13403: LIST
13404: LIST
13405: LIST
13406: LIST
13407: LIST
13408: LIST
13409: LIST
13410: LIST
13411: LIST
13412: LIST
13413: LIST
13414: PUSH
13415: LD_INT 101
13417: PUSH
13418: LD_INT 102
13420: PUSH
13421: LD_INT 103
13423: PUSH
13424: LD_INT 104
13426: PUSH
13427: LD_INT 105
13429: PUSH
13430: LD_INT 106
13432: PUSH
13433: LD_INT 107
13435: PUSH
13436: LD_INT 108
13438: PUSH
13439: LD_INT 109
13441: PUSH
13442: LD_INT 110
13444: PUSH
13445: LD_INT 111
13447: PUSH
13448: LD_INT 112
13450: PUSH
13451: LD_INT 113
13453: PUSH
13454: LD_INT 114
13456: PUSH
13457: LD_INT 115
13459: PUSH
13460: EMPTY
13461: LIST
13462: LIST
13463: LIST
13464: LIST
13465: LIST
13466: LIST
13467: LIST
13468: LIST
13469: LIST
13470: LIST
13471: LIST
13472: LIST
13473: LIST
13474: LIST
13475: LIST
13476: PUSH
13477: EMPTY
13478: LIST
13479: LIST
13480: ST_TO_ADDR
// if result then
13481: LD_VAR 0 1
13485: IFFALSE 13774
// begin normal :=  ;
13487: LD_ADDR_VAR 0 3
13491: PUSH
13492: LD_STRING 
13494: ST_TO_ADDR
// hardcore :=  ;
13495: LD_ADDR_VAR 0 4
13499: PUSH
13500: LD_STRING 
13502: ST_TO_ADDR
// for i = 1 to normalCounter do
13503: LD_ADDR_VAR 0 5
13507: PUSH
13508: DOUBLE
13509: LD_INT 1
13511: DEC
13512: ST_TO_ADDR
13513: LD_EXP 69
13517: PUSH
13518: FOR_TO
13519: IFFALSE 13620
// begin tmp := 0 ;
13521: LD_ADDR_VAR 0 2
13525: PUSH
13526: LD_STRING 0
13528: ST_TO_ADDR
// if result [ 1 ] then
13529: LD_VAR 0 1
13533: PUSH
13534: LD_INT 1
13536: ARRAY
13537: IFFALSE 13602
// if result [ 1 ] [ 1 ] = i then
13539: LD_VAR 0 1
13543: PUSH
13544: LD_INT 1
13546: ARRAY
13547: PUSH
13548: LD_INT 1
13550: ARRAY
13551: PUSH
13552: LD_VAR 0 5
13556: EQUAL
13557: IFFALSE 13602
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
13559: LD_ADDR_VAR 0 1
13563: PUSH
13564: LD_VAR 0 1
13568: PPUSH
13569: LD_INT 1
13571: PPUSH
13572: LD_VAR 0 1
13576: PUSH
13577: LD_INT 1
13579: ARRAY
13580: PPUSH
13581: LD_INT 1
13583: PPUSH
13584: CALL_OW 3
13588: PPUSH
13589: CALL_OW 1
13593: ST_TO_ADDR
// tmp := 1 ;
13594: LD_ADDR_VAR 0 2
13598: PUSH
13599: LD_STRING 1
13601: ST_TO_ADDR
// end ; normal := normal & tmp ;
13602: LD_ADDR_VAR 0 3
13606: PUSH
13607: LD_VAR 0 3
13611: PUSH
13612: LD_VAR 0 2
13616: STR
13617: ST_TO_ADDR
// end ;
13618: GO 13518
13620: POP
13621: POP
// for i = 1 to hardcoreCounter do
13622: LD_ADDR_VAR 0 5
13626: PUSH
13627: DOUBLE
13628: LD_INT 1
13630: DEC
13631: ST_TO_ADDR
13632: LD_EXP 70
13636: PUSH
13637: FOR_TO
13638: IFFALSE 13743
// begin tmp := 0 ;
13640: LD_ADDR_VAR 0 2
13644: PUSH
13645: LD_STRING 0
13647: ST_TO_ADDR
// if result [ 2 ] then
13648: LD_VAR 0 1
13652: PUSH
13653: LD_INT 2
13655: ARRAY
13656: IFFALSE 13725
// if result [ 2 ] [ 1 ] = 100 + i then
13658: LD_VAR 0 1
13662: PUSH
13663: LD_INT 2
13665: ARRAY
13666: PUSH
13667: LD_INT 1
13669: ARRAY
13670: PUSH
13671: LD_INT 100
13673: PUSH
13674: LD_VAR 0 5
13678: PLUS
13679: EQUAL
13680: IFFALSE 13725
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
13682: LD_ADDR_VAR 0 1
13686: PUSH
13687: LD_VAR 0 1
13691: PPUSH
13692: LD_INT 2
13694: PPUSH
13695: LD_VAR 0 1
13699: PUSH
13700: LD_INT 2
13702: ARRAY
13703: PPUSH
13704: LD_INT 1
13706: PPUSH
13707: CALL_OW 3
13711: PPUSH
13712: CALL_OW 1
13716: ST_TO_ADDR
// tmp := 1 ;
13717: LD_ADDR_VAR 0 2
13721: PUSH
13722: LD_STRING 1
13724: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
13725: LD_ADDR_VAR 0 4
13729: PUSH
13730: LD_VAR 0 4
13734: PUSH
13735: LD_VAR 0 2
13739: STR
13740: ST_TO_ADDR
// end ;
13741: GO 13637
13743: POP
13744: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
13745: LD_STRING getStreamItemsFromMission("
13747: PUSH
13748: LD_VAR 0 3
13752: STR
13753: PUSH
13754: LD_STRING ","
13756: STR
13757: PUSH
13758: LD_VAR 0 4
13762: STR
13763: PUSH
13764: LD_STRING ")
13766: STR
13767: PPUSH
13768: CALL_OW 559
// end else
13772: GO 13781
// ToLua ( getStreamItemsFromMission("","") ) ;
13774: LD_STRING getStreamItemsFromMission("","")
13776: PPUSH
13777: CALL_OW 559
// end ;
13781: LD_VAR 0 1
13785: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
13786: LD_EXP 68
13790: PUSH
13791: LD_EXP 73
13795: AND
13796: IFFALSE 13920
13798: GO 13800
13800: DISABLE
13801: LD_INT 0
13803: PPUSH
13804: PPUSH
// begin enable ;
13805: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
13806: LD_ADDR_VAR 0 2
13810: PUSH
13811: LD_INT 22
13813: PUSH
13814: LD_OWVAR 2
13818: PUSH
13819: EMPTY
13820: LIST
13821: LIST
13822: PUSH
13823: LD_INT 2
13825: PUSH
13826: LD_INT 34
13828: PUSH
13829: LD_INT 7
13831: PUSH
13832: EMPTY
13833: LIST
13834: LIST
13835: PUSH
13836: LD_INT 34
13838: PUSH
13839: LD_INT 45
13841: PUSH
13842: EMPTY
13843: LIST
13844: LIST
13845: PUSH
13846: LD_INT 34
13848: PUSH
13849: LD_INT 28
13851: PUSH
13852: EMPTY
13853: LIST
13854: LIST
13855: PUSH
13856: LD_INT 34
13858: PUSH
13859: LD_INT 47
13861: PUSH
13862: EMPTY
13863: LIST
13864: LIST
13865: PUSH
13866: EMPTY
13867: LIST
13868: LIST
13869: LIST
13870: LIST
13871: LIST
13872: PUSH
13873: EMPTY
13874: LIST
13875: LIST
13876: PPUSH
13877: CALL_OW 69
13881: ST_TO_ADDR
// if not tmp then
13882: LD_VAR 0 2
13886: NOT
13887: IFFALSE 13891
// exit ;
13889: GO 13920
// for i in tmp do
13891: LD_ADDR_VAR 0 1
13895: PUSH
13896: LD_VAR 0 2
13900: PUSH
13901: FOR_IN
13902: IFFALSE 13918
// begin SetLives ( i , 0 ) ;
13904: LD_VAR 0 1
13908: PPUSH
13909: LD_INT 0
13911: PPUSH
13912: CALL_OW 234
// end ;
13916: GO 13901
13918: POP
13919: POP
// end ;
13920: PPOPN 2
13922: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
13923: LD_EXP 68
13927: PUSH
13928: LD_EXP 74
13932: AND
13933: IFFALSE 14017
13935: GO 13937
13937: DISABLE
13938: LD_INT 0
13940: PPUSH
13941: PPUSH
// begin enable ;
13942: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
13943: LD_ADDR_VAR 0 2
13947: PUSH
13948: LD_INT 22
13950: PUSH
13951: LD_OWVAR 2
13955: PUSH
13956: EMPTY
13957: LIST
13958: LIST
13959: PUSH
13960: LD_INT 32
13962: PUSH
13963: LD_INT 3
13965: PUSH
13966: EMPTY
13967: LIST
13968: LIST
13969: PUSH
13970: EMPTY
13971: LIST
13972: LIST
13973: PPUSH
13974: CALL_OW 69
13978: ST_TO_ADDR
// if not tmp then
13979: LD_VAR 0 2
13983: NOT
13984: IFFALSE 13988
// exit ;
13986: GO 14017
// for i in tmp do
13988: LD_ADDR_VAR 0 1
13992: PUSH
13993: LD_VAR 0 2
13997: PUSH
13998: FOR_IN
13999: IFFALSE 14015
// begin SetLives ( i , 0 ) ;
14001: LD_VAR 0 1
14005: PPUSH
14006: LD_INT 0
14008: PPUSH
14009: CALL_OW 234
// end ;
14013: GO 13998
14015: POP
14016: POP
// end ;
14017: PPOPN 2
14019: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
14020: LD_EXP 68
14024: PUSH
14025: LD_EXP 71
14029: AND
14030: IFFALSE 14123
14032: GO 14034
14034: DISABLE
14035: LD_INT 0
14037: PPUSH
// begin enable ;
14038: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
14039: LD_ADDR_VAR 0 1
14043: PUSH
14044: LD_INT 22
14046: PUSH
14047: LD_OWVAR 2
14051: PUSH
14052: EMPTY
14053: LIST
14054: LIST
14055: PUSH
14056: LD_INT 2
14058: PUSH
14059: LD_INT 25
14061: PUSH
14062: LD_INT 5
14064: PUSH
14065: EMPTY
14066: LIST
14067: LIST
14068: PUSH
14069: LD_INT 25
14071: PUSH
14072: LD_INT 9
14074: PUSH
14075: EMPTY
14076: LIST
14077: LIST
14078: PUSH
14079: LD_INT 25
14081: PUSH
14082: LD_INT 8
14084: PUSH
14085: EMPTY
14086: LIST
14087: LIST
14088: PUSH
14089: EMPTY
14090: LIST
14091: LIST
14092: LIST
14093: LIST
14094: PUSH
14095: EMPTY
14096: LIST
14097: LIST
14098: PPUSH
14099: CALL_OW 69
14103: PUSH
14104: FOR_IN
14105: IFFALSE 14121
// begin SetClass ( i , 1 ) ;
14107: LD_VAR 0 1
14111: PPUSH
14112: LD_INT 1
14114: PPUSH
14115: CALL_OW 336
// end ;
14119: GO 14104
14121: POP
14122: POP
// end ;
14123: PPOPN 1
14125: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
14126: LD_EXP 68
14130: PUSH
14131: LD_EXP 72
14135: AND
14136: PUSH
14137: LD_OWVAR 65
14141: PUSH
14142: LD_INT 7
14144: LESS
14145: AND
14146: IFFALSE 14160
14148: GO 14150
14150: DISABLE
// begin enable ;
14151: ENABLE
// game_speed := 7 ;
14152: LD_ADDR_OWVAR 65
14156: PUSH
14157: LD_INT 7
14159: ST_TO_ADDR
// end ;
14160: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
14161: LD_EXP 68
14165: PUSH
14166: LD_EXP 75
14170: AND
14171: IFFALSE 14373
14173: GO 14175
14175: DISABLE
14176: LD_INT 0
14178: PPUSH
14179: PPUSH
14180: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
14181: LD_ADDR_VAR 0 3
14185: PUSH
14186: LD_INT 81
14188: PUSH
14189: LD_OWVAR 2
14193: PUSH
14194: EMPTY
14195: LIST
14196: LIST
14197: PUSH
14198: LD_INT 21
14200: PUSH
14201: LD_INT 1
14203: PUSH
14204: EMPTY
14205: LIST
14206: LIST
14207: PUSH
14208: EMPTY
14209: LIST
14210: LIST
14211: PPUSH
14212: CALL_OW 69
14216: ST_TO_ADDR
// if not tmp then
14217: LD_VAR 0 3
14221: NOT
14222: IFFALSE 14226
// exit ;
14224: GO 14373
// if tmp > 5 then
14226: LD_VAR 0 3
14230: PUSH
14231: LD_INT 5
14233: GREATER
14234: IFFALSE 14246
// k := 5 else
14236: LD_ADDR_VAR 0 2
14240: PUSH
14241: LD_INT 5
14243: ST_TO_ADDR
14244: GO 14256
// k := tmp ;
14246: LD_ADDR_VAR 0 2
14250: PUSH
14251: LD_VAR 0 3
14255: ST_TO_ADDR
// for i := 1 to k do
14256: LD_ADDR_VAR 0 1
14260: PUSH
14261: DOUBLE
14262: LD_INT 1
14264: DEC
14265: ST_TO_ADDR
14266: LD_VAR 0 2
14270: PUSH
14271: FOR_TO
14272: IFFALSE 14371
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
14274: LD_VAR 0 3
14278: PUSH
14279: LD_VAR 0 1
14283: ARRAY
14284: PPUSH
14285: LD_VAR 0 1
14289: PUSH
14290: LD_INT 4
14292: MOD
14293: PUSH
14294: LD_INT 1
14296: PLUS
14297: PPUSH
14298: CALL_OW 259
14302: PUSH
14303: LD_INT 10
14305: LESS
14306: IFFALSE 14369
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
14308: LD_VAR 0 3
14312: PUSH
14313: LD_VAR 0 1
14317: ARRAY
14318: PPUSH
14319: LD_VAR 0 1
14323: PUSH
14324: LD_INT 4
14326: MOD
14327: PUSH
14328: LD_INT 1
14330: PLUS
14331: PPUSH
14332: LD_VAR 0 3
14336: PUSH
14337: LD_VAR 0 1
14341: ARRAY
14342: PPUSH
14343: LD_VAR 0 1
14347: PUSH
14348: LD_INT 4
14350: MOD
14351: PUSH
14352: LD_INT 1
14354: PLUS
14355: PPUSH
14356: CALL_OW 259
14360: PUSH
14361: LD_INT 1
14363: PLUS
14364: PPUSH
14365: CALL_OW 237
14369: GO 14271
14371: POP
14372: POP
// end ;
14373: PPOPN 3
14375: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
14376: LD_EXP 68
14380: PUSH
14381: LD_EXP 76
14385: AND
14386: IFFALSE 14406
14388: GO 14390
14390: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
14391: LD_INT 4
14393: PPUSH
14394: LD_OWVAR 2
14398: PPUSH
14399: LD_INT 0
14401: PPUSH
14402: CALL_OW 324
14406: END
// every 0 0$1 trigger StreamModeActive and sShovel do
14407: LD_EXP 68
14411: PUSH
14412: LD_EXP 105
14416: AND
14417: IFFALSE 14437
14419: GO 14421
14421: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
14422: LD_INT 19
14424: PPUSH
14425: LD_OWVAR 2
14429: PPUSH
14430: LD_INT 0
14432: PPUSH
14433: CALL_OW 324
14437: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
14438: LD_EXP 68
14442: PUSH
14443: LD_EXP 77
14447: AND
14448: IFFALSE 14550
14450: GO 14452
14452: DISABLE
14453: LD_INT 0
14455: PPUSH
14456: PPUSH
// begin enable ;
14457: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
14458: LD_ADDR_VAR 0 2
14462: PUSH
14463: LD_INT 22
14465: PUSH
14466: LD_OWVAR 2
14470: PUSH
14471: EMPTY
14472: LIST
14473: LIST
14474: PUSH
14475: LD_INT 2
14477: PUSH
14478: LD_INT 34
14480: PUSH
14481: LD_INT 11
14483: PUSH
14484: EMPTY
14485: LIST
14486: LIST
14487: PUSH
14488: LD_INT 34
14490: PUSH
14491: LD_INT 30
14493: PUSH
14494: EMPTY
14495: LIST
14496: LIST
14497: PUSH
14498: EMPTY
14499: LIST
14500: LIST
14501: LIST
14502: PUSH
14503: EMPTY
14504: LIST
14505: LIST
14506: PPUSH
14507: CALL_OW 69
14511: ST_TO_ADDR
// if not tmp then
14512: LD_VAR 0 2
14516: NOT
14517: IFFALSE 14521
// exit ;
14519: GO 14550
// for i in tmp do
14521: LD_ADDR_VAR 0 1
14525: PUSH
14526: LD_VAR 0 2
14530: PUSH
14531: FOR_IN
14532: IFFALSE 14548
// begin SetLives ( i , 0 ) ;
14534: LD_VAR 0 1
14538: PPUSH
14539: LD_INT 0
14541: PPUSH
14542: CALL_OW 234
// end ;
14546: GO 14531
14548: POP
14549: POP
// end ;
14550: PPOPN 2
14552: END
// every 0 0$1 trigger StreamModeActive and sBunker do
14553: LD_EXP 68
14557: PUSH
14558: LD_EXP 78
14562: AND
14563: IFFALSE 14583
14565: GO 14567
14567: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
14568: LD_INT 32
14570: PPUSH
14571: LD_OWVAR 2
14575: PPUSH
14576: LD_INT 0
14578: PPUSH
14579: CALL_OW 324
14583: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
14584: LD_EXP 68
14588: PUSH
14589: LD_EXP 79
14593: AND
14594: IFFALSE 14775
14596: GO 14598
14598: DISABLE
14599: LD_INT 0
14601: PPUSH
14602: PPUSH
14603: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
14604: LD_ADDR_VAR 0 2
14608: PUSH
14609: LD_INT 22
14611: PUSH
14612: LD_OWVAR 2
14616: PUSH
14617: EMPTY
14618: LIST
14619: LIST
14620: PUSH
14621: LD_INT 33
14623: PUSH
14624: LD_INT 3
14626: PUSH
14627: EMPTY
14628: LIST
14629: LIST
14630: PUSH
14631: EMPTY
14632: LIST
14633: LIST
14634: PPUSH
14635: CALL_OW 69
14639: ST_TO_ADDR
// if not tmp then
14640: LD_VAR 0 2
14644: NOT
14645: IFFALSE 14649
// exit ;
14647: GO 14775
// side := 0 ;
14649: LD_ADDR_VAR 0 3
14653: PUSH
14654: LD_INT 0
14656: ST_TO_ADDR
// for i := 1 to 8 do
14657: LD_ADDR_VAR 0 1
14661: PUSH
14662: DOUBLE
14663: LD_INT 1
14665: DEC
14666: ST_TO_ADDR
14667: LD_INT 8
14669: PUSH
14670: FOR_TO
14671: IFFALSE 14719
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
14673: LD_OWVAR 2
14677: PUSH
14678: LD_VAR 0 1
14682: NONEQUAL
14683: PUSH
14684: LD_OWVAR 2
14688: PPUSH
14689: LD_VAR 0 1
14693: PPUSH
14694: CALL_OW 81
14698: PUSH
14699: LD_INT 2
14701: EQUAL
14702: AND
14703: IFFALSE 14717
// begin side := i ;
14705: LD_ADDR_VAR 0 3
14709: PUSH
14710: LD_VAR 0 1
14714: ST_TO_ADDR
// break ;
14715: GO 14719
// end ;
14717: GO 14670
14719: POP
14720: POP
// if not side then
14721: LD_VAR 0 3
14725: NOT
14726: IFFALSE 14730
// exit ;
14728: GO 14775
// for i := 1 to tmp do
14730: LD_ADDR_VAR 0 1
14734: PUSH
14735: DOUBLE
14736: LD_INT 1
14738: DEC
14739: ST_TO_ADDR
14740: LD_VAR 0 2
14744: PUSH
14745: FOR_TO
14746: IFFALSE 14773
// if Prob ( 60 ) then
14748: LD_INT 60
14750: PPUSH
14751: CALL_OW 13
14755: IFFALSE 14771
// SetSide ( i , side ) ;
14757: LD_VAR 0 1
14761: PPUSH
14762: LD_VAR 0 3
14766: PPUSH
14767: CALL_OW 235
14771: GO 14745
14773: POP
14774: POP
// end ;
14775: PPOPN 3
14777: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
14778: LD_EXP 68
14782: PUSH
14783: LD_EXP 81
14787: AND
14788: IFFALSE 14907
14790: GO 14792
14792: DISABLE
14793: LD_INT 0
14795: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
14796: LD_ADDR_VAR 0 1
14800: PUSH
14801: LD_INT 22
14803: PUSH
14804: LD_OWVAR 2
14808: PUSH
14809: EMPTY
14810: LIST
14811: LIST
14812: PUSH
14813: LD_INT 21
14815: PUSH
14816: LD_INT 1
14818: PUSH
14819: EMPTY
14820: LIST
14821: LIST
14822: PUSH
14823: LD_INT 3
14825: PUSH
14826: LD_INT 23
14828: PUSH
14829: LD_INT 0
14831: PUSH
14832: EMPTY
14833: LIST
14834: LIST
14835: PUSH
14836: EMPTY
14837: LIST
14838: LIST
14839: PUSH
14840: EMPTY
14841: LIST
14842: LIST
14843: LIST
14844: PPUSH
14845: CALL_OW 69
14849: PUSH
14850: FOR_IN
14851: IFFALSE 14905
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
14853: LD_VAR 0 1
14857: PPUSH
14858: CALL_OW 257
14862: PUSH
14863: LD_INT 1
14865: PUSH
14866: LD_INT 2
14868: PUSH
14869: LD_INT 3
14871: PUSH
14872: LD_INT 4
14874: PUSH
14875: EMPTY
14876: LIST
14877: LIST
14878: LIST
14879: LIST
14880: IN
14881: IFFALSE 14903
// SetClass ( un , rand ( 1 , 4 ) ) ;
14883: LD_VAR 0 1
14887: PPUSH
14888: LD_INT 1
14890: PPUSH
14891: LD_INT 4
14893: PPUSH
14894: CALL_OW 12
14898: PPUSH
14899: CALL_OW 336
14903: GO 14850
14905: POP
14906: POP
// end ;
14907: PPOPN 1
14909: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
14910: LD_EXP 68
14914: PUSH
14915: LD_EXP 80
14919: AND
14920: IFFALSE 14999
14922: GO 14924
14924: DISABLE
14925: LD_INT 0
14927: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
14928: LD_ADDR_VAR 0 1
14932: PUSH
14933: LD_INT 22
14935: PUSH
14936: LD_OWVAR 2
14940: PUSH
14941: EMPTY
14942: LIST
14943: LIST
14944: PUSH
14945: LD_INT 21
14947: PUSH
14948: LD_INT 3
14950: PUSH
14951: EMPTY
14952: LIST
14953: LIST
14954: PUSH
14955: EMPTY
14956: LIST
14957: LIST
14958: PPUSH
14959: CALL_OW 69
14963: ST_TO_ADDR
// if not tmp then
14964: LD_VAR 0 1
14968: NOT
14969: IFFALSE 14973
// exit ;
14971: GO 14999
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
14973: LD_VAR 0 1
14977: PUSH
14978: LD_INT 1
14980: PPUSH
14981: LD_VAR 0 1
14985: PPUSH
14986: CALL_OW 12
14990: ARRAY
14991: PPUSH
14992: LD_INT 100
14994: PPUSH
14995: CALL_OW 234
// end ;
14999: PPOPN 1
15001: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
15002: LD_EXP 68
15006: PUSH
15007: LD_EXP 82
15011: AND
15012: IFFALSE 15110
15014: GO 15016
15016: DISABLE
15017: LD_INT 0
15019: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15020: LD_ADDR_VAR 0 1
15024: PUSH
15025: LD_INT 22
15027: PUSH
15028: LD_OWVAR 2
15032: PUSH
15033: EMPTY
15034: LIST
15035: LIST
15036: PUSH
15037: LD_INT 21
15039: PUSH
15040: LD_INT 1
15042: PUSH
15043: EMPTY
15044: LIST
15045: LIST
15046: PUSH
15047: EMPTY
15048: LIST
15049: LIST
15050: PPUSH
15051: CALL_OW 69
15055: ST_TO_ADDR
// if not tmp then
15056: LD_VAR 0 1
15060: NOT
15061: IFFALSE 15065
// exit ;
15063: GO 15110
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
15065: LD_VAR 0 1
15069: PUSH
15070: LD_INT 1
15072: PPUSH
15073: LD_VAR 0 1
15077: PPUSH
15078: CALL_OW 12
15082: ARRAY
15083: PPUSH
15084: LD_INT 1
15086: PPUSH
15087: LD_INT 4
15089: PPUSH
15090: CALL_OW 12
15094: PPUSH
15095: LD_INT 3000
15097: PPUSH
15098: LD_INT 9000
15100: PPUSH
15101: CALL_OW 12
15105: PPUSH
15106: CALL_OW 492
// end ;
15110: PPOPN 1
15112: END
// every 0 0$1 trigger StreamModeActive and sDepot do
15113: LD_EXP 68
15117: PUSH
15118: LD_EXP 83
15122: AND
15123: IFFALSE 15143
15125: GO 15127
15127: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
15128: LD_INT 1
15130: PPUSH
15131: LD_OWVAR 2
15135: PPUSH
15136: LD_INT 0
15138: PPUSH
15139: CALL_OW 324
15143: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
15144: LD_EXP 68
15148: PUSH
15149: LD_EXP 84
15153: AND
15154: IFFALSE 15237
15156: GO 15158
15158: DISABLE
15159: LD_INT 0
15161: PPUSH
15162: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
15163: LD_ADDR_VAR 0 2
15167: PUSH
15168: LD_INT 22
15170: PUSH
15171: LD_OWVAR 2
15175: PUSH
15176: EMPTY
15177: LIST
15178: LIST
15179: PUSH
15180: LD_INT 21
15182: PUSH
15183: LD_INT 3
15185: PUSH
15186: EMPTY
15187: LIST
15188: LIST
15189: PUSH
15190: EMPTY
15191: LIST
15192: LIST
15193: PPUSH
15194: CALL_OW 69
15198: ST_TO_ADDR
// if not tmp then
15199: LD_VAR 0 2
15203: NOT
15204: IFFALSE 15208
// exit ;
15206: GO 15237
// for i in tmp do
15208: LD_ADDR_VAR 0 1
15212: PUSH
15213: LD_VAR 0 2
15217: PUSH
15218: FOR_IN
15219: IFFALSE 15235
// SetBLevel ( i , 10 ) ;
15221: LD_VAR 0 1
15225: PPUSH
15226: LD_INT 10
15228: PPUSH
15229: CALL_OW 241
15233: GO 15218
15235: POP
15236: POP
// end ;
15237: PPOPN 2
15239: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
15240: LD_EXP 68
15244: PUSH
15245: LD_EXP 85
15249: AND
15250: IFFALSE 15361
15252: GO 15254
15254: DISABLE
15255: LD_INT 0
15257: PPUSH
15258: PPUSH
15259: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15260: LD_ADDR_VAR 0 3
15264: PUSH
15265: LD_INT 22
15267: PUSH
15268: LD_OWVAR 2
15272: PUSH
15273: EMPTY
15274: LIST
15275: LIST
15276: PUSH
15277: LD_INT 25
15279: PUSH
15280: LD_INT 1
15282: PUSH
15283: EMPTY
15284: LIST
15285: LIST
15286: PUSH
15287: EMPTY
15288: LIST
15289: LIST
15290: PPUSH
15291: CALL_OW 69
15295: ST_TO_ADDR
// if not tmp then
15296: LD_VAR 0 3
15300: NOT
15301: IFFALSE 15305
// exit ;
15303: GO 15361
// un := tmp [ rand ( 1 , tmp ) ] ;
15305: LD_ADDR_VAR 0 2
15309: PUSH
15310: LD_VAR 0 3
15314: PUSH
15315: LD_INT 1
15317: PPUSH
15318: LD_VAR 0 3
15322: PPUSH
15323: CALL_OW 12
15327: ARRAY
15328: ST_TO_ADDR
// if Crawls ( un ) then
15329: LD_VAR 0 2
15333: PPUSH
15334: CALL_OW 318
15338: IFFALSE 15349
// ComWalk ( un ) ;
15340: LD_VAR 0 2
15344: PPUSH
15345: CALL_OW 138
// SetClass ( un , class_sniper ) ;
15349: LD_VAR 0 2
15353: PPUSH
15354: LD_INT 5
15356: PPUSH
15357: CALL_OW 336
// end ;
15361: PPOPN 3
15363: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
15364: LD_EXP 68
15368: PUSH
15369: LD_EXP 86
15373: AND
15374: PUSH
15375: LD_OWVAR 67
15379: PUSH
15380: LD_INT 3
15382: LESS
15383: AND
15384: IFFALSE 15403
15386: GO 15388
15388: DISABLE
// Difficulty := Difficulty + 1 ;
15389: LD_ADDR_OWVAR 67
15393: PUSH
15394: LD_OWVAR 67
15398: PUSH
15399: LD_INT 1
15401: PLUS
15402: ST_TO_ADDR
15403: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
15404: LD_EXP 68
15408: PUSH
15409: LD_EXP 87
15413: AND
15414: IFFALSE 15517
15416: GO 15418
15418: DISABLE
15419: LD_INT 0
15421: PPUSH
// begin for i := 1 to 5 do
15422: LD_ADDR_VAR 0 1
15426: PUSH
15427: DOUBLE
15428: LD_INT 1
15430: DEC
15431: ST_TO_ADDR
15432: LD_INT 5
15434: PUSH
15435: FOR_TO
15436: IFFALSE 15515
// begin uc_nation := nation_nature ;
15438: LD_ADDR_OWVAR 21
15442: PUSH
15443: LD_INT 0
15445: ST_TO_ADDR
// uc_side := 0 ;
15446: LD_ADDR_OWVAR 20
15450: PUSH
15451: LD_INT 0
15453: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
15454: LD_ADDR_OWVAR 29
15458: PUSH
15459: LD_INT 12
15461: PUSH
15462: LD_INT 12
15464: PUSH
15465: EMPTY
15466: LIST
15467: LIST
15468: ST_TO_ADDR
// hc_agressivity := 20 ;
15469: LD_ADDR_OWVAR 35
15473: PUSH
15474: LD_INT 20
15476: ST_TO_ADDR
// hc_class := class_tiger ;
15477: LD_ADDR_OWVAR 28
15481: PUSH
15482: LD_INT 14
15484: ST_TO_ADDR
// hc_gallery :=  ;
15485: LD_ADDR_OWVAR 33
15489: PUSH
15490: LD_STRING 
15492: ST_TO_ADDR
// hc_name :=  ;
15493: LD_ADDR_OWVAR 26
15497: PUSH
15498: LD_STRING 
15500: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
15501: CALL_OW 44
15505: PPUSH
15506: LD_INT 0
15508: PPUSH
15509: CALL_OW 51
// end ;
15513: GO 15435
15515: POP
15516: POP
// end ;
15517: PPOPN 1
15519: END
// every 0 0$1 trigger StreamModeActive and sBomb do
15520: LD_EXP 68
15524: PUSH
15525: LD_EXP 88
15529: AND
15530: IFFALSE 15539
15532: GO 15534
15534: DISABLE
// StreamSibBomb ;
15535: CALL 15540 0 0
15539: END
// export function StreamSibBomb ; var i , x , y ; begin
15540: LD_INT 0
15542: PPUSH
15543: PPUSH
15544: PPUSH
15545: PPUSH
// result := false ;
15546: LD_ADDR_VAR 0 1
15550: PUSH
15551: LD_INT 0
15553: ST_TO_ADDR
// for i := 1 to 16 do
15554: LD_ADDR_VAR 0 2
15558: PUSH
15559: DOUBLE
15560: LD_INT 1
15562: DEC
15563: ST_TO_ADDR
15564: LD_INT 16
15566: PUSH
15567: FOR_TO
15568: IFFALSE 15767
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
15570: LD_ADDR_VAR 0 3
15574: PUSH
15575: LD_INT 10
15577: PUSH
15578: LD_INT 20
15580: PUSH
15581: LD_INT 30
15583: PUSH
15584: LD_INT 40
15586: PUSH
15587: LD_INT 50
15589: PUSH
15590: LD_INT 60
15592: PUSH
15593: LD_INT 70
15595: PUSH
15596: LD_INT 80
15598: PUSH
15599: LD_INT 90
15601: PUSH
15602: LD_INT 100
15604: PUSH
15605: LD_INT 110
15607: PUSH
15608: LD_INT 120
15610: PUSH
15611: LD_INT 130
15613: PUSH
15614: LD_INT 140
15616: PUSH
15617: LD_INT 150
15619: PUSH
15620: EMPTY
15621: LIST
15622: LIST
15623: LIST
15624: LIST
15625: LIST
15626: LIST
15627: LIST
15628: LIST
15629: LIST
15630: LIST
15631: LIST
15632: LIST
15633: LIST
15634: LIST
15635: LIST
15636: PUSH
15637: LD_INT 1
15639: PPUSH
15640: LD_INT 15
15642: PPUSH
15643: CALL_OW 12
15647: ARRAY
15648: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
15649: LD_ADDR_VAR 0 4
15653: PUSH
15654: LD_INT 10
15656: PUSH
15657: LD_INT 20
15659: PUSH
15660: LD_INT 30
15662: PUSH
15663: LD_INT 40
15665: PUSH
15666: LD_INT 50
15668: PUSH
15669: LD_INT 60
15671: PUSH
15672: LD_INT 70
15674: PUSH
15675: LD_INT 80
15677: PUSH
15678: LD_INT 90
15680: PUSH
15681: LD_INT 100
15683: PUSH
15684: LD_INT 110
15686: PUSH
15687: LD_INT 120
15689: PUSH
15690: LD_INT 130
15692: PUSH
15693: LD_INT 140
15695: PUSH
15696: LD_INT 150
15698: PUSH
15699: EMPTY
15700: LIST
15701: LIST
15702: LIST
15703: LIST
15704: LIST
15705: LIST
15706: LIST
15707: LIST
15708: LIST
15709: LIST
15710: LIST
15711: LIST
15712: LIST
15713: LIST
15714: LIST
15715: PUSH
15716: LD_INT 1
15718: PPUSH
15719: LD_INT 15
15721: PPUSH
15722: CALL_OW 12
15726: ARRAY
15727: ST_TO_ADDR
// if ValidHex ( x , y ) then
15728: LD_VAR 0 3
15732: PPUSH
15733: LD_VAR 0 4
15737: PPUSH
15738: CALL_OW 488
15742: IFFALSE 15765
// begin result := [ x , y ] ;
15744: LD_ADDR_VAR 0 1
15748: PUSH
15749: LD_VAR 0 3
15753: PUSH
15754: LD_VAR 0 4
15758: PUSH
15759: EMPTY
15760: LIST
15761: LIST
15762: ST_TO_ADDR
// break ;
15763: GO 15767
// end ; end ;
15765: GO 15567
15767: POP
15768: POP
// if result then
15769: LD_VAR 0 1
15773: IFFALSE 15833
// begin ToLua ( playSibBomb() ) ;
15775: LD_STRING playSibBomb()
15777: PPUSH
15778: CALL_OW 559
// wait ( 0 0$14 ) ;
15782: LD_INT 490
15784: PPUSH
15785: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
15789: LD_VAR 0 1
15793: PUSH
15794: LD_INT 1
15796: ARRAY
15797: PPUSH
15798: LD_VAR 0 1
15802: PUSH
15803: LD_INT 2
15805: ARRAY
15806: PPUSH
15807: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
15811: LD_VAR 0 1
15815: PUSH
15816: LD_INT 1
15818: ARRAY
15819: PPUSH
15820: LD_VAR 0 1
15824: PUSH
15825: LD_INT 2
15827: ARRAY
15828: PPUSH
15829: CALL_OW 429
// end ; end ;
15833: LD_VAR 0 1
15837: RET
// every 0 0$1 trigger StreamModeActive and sReset do
15838: LD_EXP 68
15842: PUSH
15843: LD_EXP 90
15847: AND
15848: IFFALSE 15860
15850: GO 15852
15852: DISABLE
// YouLost (  ) ;
15853: LD_STRING 
15855: PPUSH
15856: CALL_OW 104
15860: END
// every 0 0$1 trigger StreamModeActive and sFog do
15861: LD_EXP 68
15865: PUSH
15866: LD_EXP 89
15870: AND
15871: IFFALSE 15885
15873: GO 15875
15875: DISABLE
// FogOff ( your_side ) ;
15876: LD_OWVAR 2
15880: PPUSH
15881: CALL_OW 344
15885: END
// every 0 0$1 trigger StreamModeActive and sSun do
15886: LD_EXP 68
15890: PUSH
15891: LD_EXP 91
15895: AND
15896: IFFALSE 15924
15898: GO 15900
15900: DISABLE
// begin solar_recharge_percent := 0 ;
15901: LD_ADDR_OWVAR 79
15905: PUSH
15906: LD_INT 0
15908: ST_TO_ADDR
// wait ( 5 5$00 ) ;
15909: LD_INT 10500
15911: PPUSH
15912: CALL_OW 67
// solar_recharge_percent := 100 ;
15916: LD_ADDR_OWVAR 79
15920: PUSH
15921: LD_INT 100
15923: ST_TO_ADDR
// end ;
15924: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
15925: LD_EXP 68
15929: PUSH
15930: LD_EXP 92
15934: AND
15935: IFFALSE 16174
15937: GO 15939
15939: DISABLE
15940: LD_INT 0
15942: PPUSH
15943: PPUSH
15944: PPUSH
// begin tmp := [ ] ;
15945: LD_ADDR_VAR 0 3
15949: PUSH
15950: EMPTY
15951: ST_TO_ADDR
// for i := 1 to 6 do
15952: LD_ADDR_VAR 0 1
15956: PUSH
15957: DOUBLE
15958: LD_INT 1
15960: DEC
15961: ST_TO_ADDR
15962: LD_INT 6
15964: PUSH
15965: FOR_TO
15966: IFFALSE 16071
// begin uc_nation := nation_nature ;
15968: LD_ADDR_OWVAR 21
15972: PUSH
15973: LD_INT 0
15975: ST_TO_ADDR
// uc_side := 0 ;
15976: LD_ADDR_OWVAR 20
15980: PUSH
15981: LD_INT 0
15983: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
15984: LD_ADDR_OWVAR 29
15988: PUSH
15989: LD_INT 12
15991: PUSH
15992: LD_INT 12
15994: PUSH
15995: EMPTY
15996: LIST
15997: LIST
15998: ST_TO_ADDR
// hc_agressivity := 20 ;
15999: LD_ADDR_OWVAR 35
16003: PUSH
16004: LD_INT 20
16006: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
16007: LD_ADDR_OWVAR 28
16011: PUSH
16012: LD_INT 17
16014: ST_TO_ADDR
// hc_gallery :=  ;
16015: LD_ADDR_OWVAR 33
16019: PUSH
16020: LD_STRING 
16022: ST_TO_ADDR
// hc_name :=  ;
16023: LD_ADDR_OWVAR 26
16027: PUSH
16028: LD_STRING 
16030: ST_TO_ADDR
// un := CreateHuman ;
16031: LD_ADDR_VAR 0 2
16035: PUSH
16036: CALL_OW 44
16040: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
16041: LD_VAR 0 2
16045: PPUSH
16046: LD_INT 1
16048: PPUSH
16049: CALL_OW 51
// tmp := tmp ^ un ;
16053: LD_ADDR_VAR 0 3
16057: PUSH
16058: LD_VAR 0 3
16062: PUSH
16063: LD_VAR 0 2
16067: ADD
16068: ST_TO_ADDR
// end ;
16069: GO 15965
16071: POP
16072: POP
// repeat wait ( 0 0$1 ) ;
16073: LD_INT 35
16075: PPUSH
16076: CALL_OW 67
// for un in tmp do
16080: LD_ADDR_VAR 0 2
16084: PUSH
16085: LD_VAR 0 3
16089: PUSH
16090: FOR_IN
16091: IFFALSE 16165
// begin if IsDead ( un ) then
16093: LD_VAR 0 2
16097: PPUSH
16098: CALL_OW 301
16102: IFFALSE 16122
// begin tmp := tmp diff un ;
16104: LD_ADDR_VAR 0 3
16108: PUSH
16109: LD_VAR 0 3
16113: PUSH
16114: LD_VAR 0 2
16118: DIFF
16119: ST_TO_ADDR
// continue ;
16120: GO 16090
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
16122: LD_VAR 0 2
16126: PPUSH
16127: LD_INT 3
16129: PUSH
16130: LD_INT 22
16132: PUSH
16133: LD_INT 0
16135: PUSH
16136: EMPTY
16137: LIST
16138: LIST
16139: PUSH
16140: EMPTY
16141: LIST
16142: LIST
16143: PPUSH
16144: CALL_OW 69
16148: PPUSH
16149: LD_VAR 0 2
16153: PPUSH
16154: CALL_OW 74
16158: PPUSH
16159: CALL_OW 115
// end ;
16163: GO 16090
16165: POP
16166: POP
// until not tmp ;
16167: LD_VAR 0 3
16171: NOT
16172: IFFALSE 16073
// end ;
16174: PPOPN 3
16176: END
// every 0 0$1 trigger StreamModeActive and sTroll do
16177: LD_EXP 68
16181: PUSH
16182: LD_EXP 93
16186: AND
16187: IFFALSE 16241
16189: GO 16191
16191: DISABLE
// begin ToLua ( displayTroll(); ) ;
16192: LD_STRING displayTroll();
16194: PPUSH
16195: CALL_OW 559
// wait ( 3 3$00 ) ;
16199: LD_INT 6300
16201: PPUSH
16202: CALL_OW 67
// ToLua ( hideTroll(); ) ;
16206: LD_STRING hideTroll();
16208: PPUSH
16209: CALL_OW 559
// wait ( 1 1$00 ) ;
16213: LD_INT 2100
16215: PPUSH
16216: CALL_OW 67
// ToLua ( displayTroll(); ) ;
16220: LD_STRING displayTroll();
16222: PPUSH
16223: CALL_OW 559
// wait ( 1 1$00 ) ;
16227: LD_INT 2100
16229: PPUSH
16230: CALL_OW 67
// ToLua ( hideTroll(); ) ;
16234: LD_STRING hideTroll();
16236: PPUSH
16237: CALL_OW 559
// end ;
16241: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
16242: LD_EXP 68
16246: PUSH
16247: LD_EXP 94
16251: AND
16252: IFFALSE 16315
16254: GO 16256
16256: DISABLE
16257: LD_INT 0
16259: PPUSH
// begin p := 0 ;
16260: LD_ADDR_VAR 0 1
16264: PUSH
16265: LD_INT 0
16267: ST_TO_ADDR
// repeat game_speed := 1 ;
16268: LD_ADDR_OWVAR 65
16272: PUSH
16273: LD_INT 1
16275: ST_TO_ADDR
// wait ( 0 0$1 ) ;
16276: LD_INT 35
16278: PPUSH
16279: CALL_OW 67
// p := p + 1 ;
16283: LD_ADDR_VAR 0 1
16287: PUSH
16288: LD_VAR 0 1
16292: PUSH
16293: LD_INT 1
16295: PLUS
16296: ST_TO_ADDR
// until p >= 60 ;
16297: LD_VAR 0 1
16301: PUSH
16302: LD_INT 60
16304: GREATEREQUAL
16305: IFFALSE 16268
// game_speed := 4 ;
16307: LD_ADDR_OWVAR 65
16311: PUSH
16312: LD_INT 4
16314: ST_TO_ADDR
// end ;
16315: PPOPN 1
16317: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
16318: LD_EXP 68
16322: PUSH
16323: LD_EXP 95
16327: AND
16328: IFFALSE 16474
16330: GO 16332
16332: DISABLE
16333: LD_INT 0
16335: PPUSH
16336: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16337: LD_ADDR_VAR 0 1
16341: PUSH
16342: LD_INT 22
16344: PUSH
16345: LD_OWVAR 2
16349: PUSH
16350: EMPTY
16351: LIST
16352: LIST
16353: PUSH
16354: LD_INT 2
16356: PUSH
16357: LD_INT 30
16359: PUSH
16360: LD_INT 0
16362: PUSH
16363: EMPTY
16364: LIST
16365: LIST
16366: PUSH
16367: LD_INT 30
16369: PUSH
16370: LD_INT 1
16372: PUSH
16373: EMPTY
16374: LIST
16375: LIST
16376: PUSH
16377: EMPTY
16378: LIST
16379: LIST
16380: LIST
16381: PUSH
16382: EMPTY
16383: LIST
16384: LIST
16385: PPUSH
16386: CALL_OW 69
16390: ST_TO_ADDR
// if not depot then
16391: LD_VAR 0 1
16395: NOT
16396: IFFALSE 16400
// exit ;
16398: GO 16474
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
16400: LD_ADDR_VAR 0 2
16404: PUSH
16405: LD_VAR 0 1
16409: PUSH
16410: LD_INT 1
16412: PPUSH
16413: LD_VAR 0 1
16417: PPUSH
16418: CALL_OW 12
16422: ARRAY
16423: PPUSH
16424: CALL_OW 274
16428: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
16429: LD_VAR 0 2
16433: PPUSH
16434: LD_INT 1
16436: PPUSH
16437: LD_INT 0
16439: PPUSH
16440: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
16444: LD_VAR 0 2
16448: PPUSH
16449: LD_INT 2
16451: PPUSH
16452: LD_INT 0
16454: PPUSH
16455: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
16459: LD_VAR 0 2
16463: PPUSH
16464: LD_INT 3
16466: PPUSH
16467: LD_INT 0
16469: PPUSH
16470: CALL_OW 277
// end ;
16474: PPOPN 2
16476: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
16477: LD_EXP 68
16481: PUSH
16482: LD_EXP 96
16486: AND
16487: IFFALSE 16584
16489: GO 16491
16491: DISABLE
16492: LD_INT 0
16494: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16495: LD_ADDR_VAR 0 1
16499: PUSH
16500: LD_INT 22
16502: PUSH
16503: LD_OWVAR 2
16507: PUSH
16508: EMPTY
16509: LIST
16510: LIST
16511: PUSH
16512: LD_INT 21
16514: PUSH
16515: LD_INT 1
16517: PUSH
16518: EMPTY
16519: LIST
16520: LIST
16521: PUSH
16522: LD_INT 3
16524: PUSH
16525: LD_INT 23
16527: PUSH
16528: LD_INT 0
16530: PUSH
16531: EMPTY
16532: LIST
16533: LIST
16534: PUSH
16535: EMPTY
16536: LIST
16537: LIST
16538: PUSH
16539: EMPTY
16540: LIST
16541: LIST
16542: LIST
16543: PPUSH
16544: CALL_OW 69
16548: ST_TO_ADDR
// if not tmp then
16549: LD_VAR 0 1
16553: NOT
16554: IFFALSE 16558
// exit ;
16556: GO 16584
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
16558: LD_VAR 0 1
16562: PUSH
16563: LD_INT 1
16565: PPUSH
16566: LD_VAR 0 1
16570: PPUSH
16571: CALL_OW 12
16575: ARRAY
16576: PPUSH
16577: LD_INT 200
16579: PPUSH
16580: CALL_OW 234
// end ;
16584: PPOPN 1
16586: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
16587: LD_EXP 68
16591: PUSH
16592: LD_EXP 97
16596: AND
16597: IFFALSE 16676
16599: GO 16601
16601: DISABLE
16602: LD_INT 0
16604: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
16605: LD_ADDR_VAR 0 1
16609: PUSH
16610: LD_INT 22
16612: PUSH
16613: LD_OWVAR 2
16617: PUSH
16618: EMPTY
16619: LIST
16620: LIST
16621: PUSH
16622: LD_INT 21
16624: PUSH
16625: LD_INT 2
16627: PUSH
16628: EMPTY
16629: LIST
16630: LIST
16631: PUSH
16632: EMPTY
16633: LIST
16634: LIST
16635: PPUSH
16636: CALL_OW 69
16640: ST_TO_ADDR
// if not tmp then
16641: LD_VAR 0 1
16645: NOT
16646: IFFALSE 16650
// exit ;
16648: GO 16676
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
16650: LD_VAR 0 1
16654: PUSH
16655: LD_INT 1
16657: PPUSH
16658: LD_VAR 0 1
16662: PPUSH
16663: CALL_OW 12
16667: ARRAY
16668: PPUSH
16669: LD_INT 60
16671: PPUSH
16672: CALL_OW 234
// end ;
16676: PPOPN 1
16678: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
16679: LD_EXP 68
16683: PUSH
16684: LD_EXP 98
16688: AND
16689: IFFALSE 16788
16691: GO 16693
16693: DISABLE
16694: LD_INT 0
16696: PPUSH
16697: PPUSH
// begin enable ;
16698: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
16699: LD_ADDR_VAR 0 1
16703: PUSH
16704: LD_INT 22
16706: PUSH
16707: LD_OWVAR 2
16711: PUSH
16712: EMPTY
16713: LIST
16714: LIST
16715: PUSH
16716: LD_INT 61
16718: PUSH
16719: EMPTY
16720: LIST
16721: PUSH
16722: LD_INT 33
16724: PUSH
16725: LD_INT 2
16727: PUSH
16728: EMPTY
16729: LIST
16730: LIST
16731: PUSH
16732: EMPTY
16733: LIST
16734: LIST
16735: LIST
16736: PPUSH
16737: CALL_OW 69
16741: ST_TO_ADDR
// if not tmp then
16742: LD_VAR 0 1
16746: NOT
16747: IFFALSE 16751
// exit ;
16749: GO 16788
// for i in tmp do
16751: LD_ADDR_VAR 0 2
16755: PUSH
16756: LD_VAR 0 1
16760: PUSH
16761: FOR_IN
16762: IFFALSE 16786
// if IsControledBy ( i ) then
16764: LD_VAR 0 2
16768: PPUSH
16769: CALL_OW 312
16773: IFFALSE 16784
// ComUnlink ( i ) ;
16775: LD_VAR 0 2
16779: PPUSH
16780: CALL_OW 136
16784: GO 16761
16786: POP
16787: POP
// end ;
16788: PPOPN 2
16790: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
16791: LD_EXP 68
16795: PUSH
16796: LD_EXP 99
16800: AND
16801: IFFALSE 16941
16803: GO 16805
16805: DISABLE
16806: LD_INT 0
16808: PPUSH
16809: PPUSH
// begin ToLua ( displayPowell(); ) ;
16810: LD_STRING displayPowell();
16812: PPUSH
16813: CALL_OW 559
// uc_side := 0 ;
16817: LD_ADDR_OWVAR 20
16821: PUSH
16822: LD_INT 0
16824: ST_TO_ADDR
// uc_nation := 2 ;
16825: LD_ADDR_OWVAR 21
16829: PUSH
16830: LD_INT 2
16832: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
16833: LD_ADDR_OWVAR 37
16837: PUSH
16838: LD_INT 14
16840: ST_TO_ADDR
// vc_engine := engine_siberite ;
16841: LD_ADDR_OWVAR 39
16845: PUSH
16846: LD_INT 3
16848: ST_TO_ADDR
// vc_control := control_apeman ;
16849: LD_ADDR_OWVAR 38
16853: PUSH
16854: LD_INT 5
16856: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
16857: LD_ADDR_OWVAR 40
16861: PUSH
16862: LD_INT 29
16864: ST_TO_ADDR
// un := CreateVehicle ;
16865: LD_ADDR_VAR 0 2
16869: PUSH
16870: CALL_OW 45
16874: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16875: LD_VAR 0 2
16879: PPUSH
16880: LD_INT 1
16882: PPUSH
16883: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
16887: LD_INT 35
16889: PPUSH
16890: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
16894: LD_VAR 0 2
16898: PPUSH
16899: LD_INT 22
16901: PUSH
16902: LD_OWVAR 2
16906: PUSH
16907: EMPTY
16908: LIST
16909: LIST
16910: PPUSH
16911: CALL_OW 69
16915: PPUSH
16916: LD_VAR 0 2
16920: PPUSH
16921: CALL_OW 74
16925: PPUSH
16926: CALL_OW 115
// until IsDead ( un ) ;
16930: LD_VAR 0 2
16934: PPUSH
16935: CALL_OW 301
16939: IFFALSE 16887
// end ;
16941: PPOPN 2
16943: END
// every 0 0$1 trigger StreamModeActive and sStu do
16944: LD_EXP 68
16948: PUSH
16949: LD_EXP 107
16953: AND
16954: IFFALSE 16970
16956: GO 16958
16958: DISABLE
// begin ToLua ( displayStucuk(); ) ;
16959: LD_STRING displayStucuk();
16961: PPUSH
16962: CALL_OW 559
// ResetFog ;
16966: CALL_OW 335
// end ;
16970: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
16971: LD_EXP 68
16975: PUSH
16976: LD_EXP 100
16980: AND
16981: IFFALSE 17122
16983: GO 16985
16985: DISABLE
16986: LD_INT 0
16988: PPUSH
16989: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16990: LD_ADDR_VAR 0 2
16994: PUSH
16995: LD_INT 22
16997: PUSH
16998: LD_OWVAR 2
17002: PUSH
17003: EMPTY
17004: LIST
17005: LIST
17006: PUSH
17007: LD_INT 21
17009: PUSH
17010: LD_INT 1
17012: PUSH
17013: EMPTY
17014: LIST
17015: LIST
17016: PUSH
17017: EMPTY
17018: LIST
17019: LIST
17020: PPUSH
17021: CALL_OW 69
17025: ST_TO_ADDR
// if not tmp then
17026: LD_VAR 0 2
17030: NOT
17031: IFFALSE 17035
// exit ;
17033: GO 17122
// un := tmp [ rand ( 1 , tmp ) ] ;
17035: LD_ADDR_VAR 0 1
17039: PUSH
17040: LD_VAR 0 2
17044: PUSH
17045: LD_INT 1
17047: PPUSH
17048: LD_VAR 0 2
17052: PPUSH
17053: CALL_OW 12
17057: ARRAY
17058: ST_TO_ADDR
// SetSide ( un , 0 ) ;
17059: LD_VAR 0 1
17063: PPUSH
17064: LD_INT 0
17066: PPUSH
17067: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
17071: LD_VAR 0 1
17075: PPUSH
17076: LD_OWVAR 3
17080: PUSH
17081: LD_VAR 0 1
17085: DIFF
17086: PPUSH
17087: LD_VAR 0 1
17091: PPUSH
17092: CALL_OW 74
17096: PPUSH
17097: CALL_OW 115
// wait ( 0 0$20 ) ;
17101: LD_INT 700
17103: PPUSH
17104: CALL_OW 67
// SetSide ( un , your_side ) ;
17108: LD_VAR 0 1
17112: PPUSH
17113: LD_OWVAR 2
17117: PPUSH
17118: CALL_OW 235
// end ;
17122: PPOPN 2
17124: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
17125: LD_EXP 68
17129: PUSH
17130: LD_EXP 101
17134: AND
17135: IFFALSE 17241
17137: GO 17139
17139: DISABLE
17140: LD_INT 0
17142: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17143: LD_ADDR_VAR 0 1
17147: PUSH
17148: LD_INT 22
17150: PUSH
17151: LD_OWVAR 2
17155: PUSH
17156: EMPTY
17157: LIST
17158: LIST
17159: PUSH
17160: LD_INT 2
17162: PUSH
17163: LD_INT 30
17165: PUSH
17166: LD_INT 0
17168: PUSH
17169: EMPTY
17170: LIST
17171: LIST
17172: PUSH
17173: LD_INT 30
17175: PUSH
17176: LD_INT 1
17178: PUSH
17179: EMPTY
17180: LIST
17181: LIST
17182: PUSH
17183: EMPTY
17184: LIST
17185: LIST
17186: LIST
17187: PUSH
17188: EMPTY
17189: LIST
17190: LIST
17191: PPUSH
17192: CALL_OW 69
17196: ST_TO_ADDR
// if not depot then
17197: LD_VAR 0 1
17201: NOT
17202: IFFALSE 17206
// exit ;
17204: GO 17241
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
17206: LD_VAR 0 1
17210: PUSH
17211: LD_INT 1
17213: ARRAY
17214: PPUSH
17215: CALL_OW 250
17219: PPUSH
17220: LD_VAR 0 1
17224: PUSH
17225: LD_INT 1
17227: ARRAY
17228: PPUSH
17229: CALL_OW 251
17233: PPUSH
17234: LD_INT 70
17236: PPUSH
17237: CALL_OW 495
// end ;
17241: PPOPN 1
17243: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
17244: LD_EXP 68
17248: PUSH
17249: LD_EXP 102
17253: AND
17254: IFFALSE 17465
17256: GO 17258
17258: DISABLE
17259: LD_INT 0
17261: PPUSH
17262: PPUSH
17263: PPUSH
17264: PPUSH
17265: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17266: LD_ADDR_VAR 0 5
17270: PUSH
17271: LD_INT 22
17273: PUSH
17274: LD_OWVAR 2
17278: PUSH
17279: EMPTY
17280: LIST
17281: LIST
17282: PUSH
17283: LD_INT 21
17285: PUSH
17286: LD_INT 1
17288: PUSH
17289: EMPTY
17290: LIST
17291: LIST
17292: PUSH
17293: EMPTY
17294: LIST
17295: LIST
17296: PPUSH
17297: CALL_OW 69
17301: ST_TO_ADDR
// if not tmp then
17302: LD_VAR 0 5
17306: NOT
17307: IFFALSE 17311
// exit ;
17309: GO 17465
// for i in tmp do
17311: LD_ADDR_VAR 0 1
17315: PUSH
17316: LD_VAR 0 5
17320: PUSH
17321: FOR_IN
17322: IFFALSE 17463
// begin d := rand ( 0 , 5 ) ;
17324: LD_ADDR_VAR 0 4
17328: PUSH
17329: LD_INT 0
17331: PPUSH
17332: LD_INT 5
17334: PPUSH
17335: CALL_OW 12
17339: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
17340: LD_ADDR_VAR 0 2
17344: PUSH
17345: LD_VAR 0 1
17349: PPUSH
17350: CALL_OW 250
17354: PPUSH
17355: LD_VAR 0 4
17359: PPUSH
17360: LD_INT 3
17362: PPUSH
17363: LD_INT 12
17365: PPUSH
17366: CALL_OW 12
17370: PPUSH
17371: CALL_OW 272
17375: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
17376: LD_ADDR_VAR 0 3
17380: PUSH
17381: LD_VAR 0 1
17385: PPUSH
17386: CALL_OW 251
17390: PPUSH
17391: LD_VAR 0 4
17395: PPUSH
17396: LD_INT 3
17398: PPUSH
17399: LD_INT 12
17401: PPUSH
17402: CALL_OW 12
17406: PPUSH
17407: CALL_OW 273
17411: ST_TO_ADDR
// if ValidHex ( x , y ) then
17412: LD_VAR 0 2
17416: PPUSH
17417: LD_VAR 0 3
17421: PPUSH
17422: CALL_OW 488
17426: IFFALSE 17461
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
17428: LD_VAR 0 1
17432: PPUSH
17433: LD_VAR 0 2
17437: PPUSH
17438: LD_VAR 0 3
17442: PPUSH
17443: LD_INT 3
17445: PPUSH
17446: LD_INT 6
17448: PPUSH
17449: CALL_OW 12
17453: PPUSH
17454: LD_INT 1
17456: PPUSH
17457: CALL_OW 483
// end ;
17461: GO 17321
17463: POP
17464: POP
// end ;
17465: PPOPN 5
17467: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
17468: LD_EXP 68
17472: PUSH
17473: LD_EXP 103
17477: AND
17478: IFFALSE 17572
17480: GO 17482
17482: DISABLE
17483: LD_INT 0
17485: PPUSH
17486: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
17487: LD_ADDR_VAR 0 2
17491: PUSH
17492: LD_INT 22
17494: PUSH
17495: LD_OWVAR 2
17499: PUSH
17500: EMPTY
17501: LIST
17502: LIST
17503: PUSH
17504: LD_INT 32
17506: PUSH
17507: LD_INT 1
17509: PUSH
17510: EMPTY
17511: LIST
17512: LIST
17513: PUSH
17514: LD_INT 21
17516: PUSH
17517: LD_INT 2
17519: PUSH
17520: EMPTY
17521: LIST
17522: LIST
17523: PUSH
17524: EMPTY
17525: LIST
17526: LIST
17527: LIST
17528: PPUSH
17529: CALL_OW 69
17533: ST_TO_ADDR
// if not tmp then
17534: LD_VAR 0 2
17538: NOT
17539: IFFALSE 17543
// exit ;
17541: GO 17572
// for i in tmp do
17543: LD_ADDR_VAR 0 1
17547: PUSH
17548: LD_VAR 0 2
17552: PUSH
17553: FOR_IN
17554: IFFALSE 17570
// SetFuel ( i , 0 ) ;
17556: LD_VAR 0 1
17560: PPUSH
17561: LD_INT 0
17563: PPUSH
17564: CALL_OW 240
17568: GO 17553
17570: POP
17571: POP
// end ;
17572: PPOPN 2
17574: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
17575: LD_EXP 68
17579: PUSH
17580: LD_EXP 104
17584: AND
17585: IFFALSE 17651
17587: GO 17589
17589: DISABLE
17590: LD_INT 0
17592: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
17593: LD_ADDR_VAR 0 1
17597: PUSH
17598: LD_INT 22
17600: PUSH
17601: LD_OWVAR 2
17605: PUSH
17606: EMPTY
17607: LIST
17608: LIST
17609: PUSH
17610: LD_INT 30
17612: PUSH
17613: LD_INT 29
17615: PUSH
17616: EMPTY
17617: LIST
17618: LIST
17619: PUSH
17620: EMPTY
17621: LIST
17622: LIST
17623: PPUSH
17624: CALL_OW 69
17628: ST_TO_ADDR
// if not tmp then
17629: LD_VAR 0 1
17633: NOT
17634: IFFALSE 17638
// exit ;
17636: GO 17651
// DestroyUnit ( tmp [ 1 ] ) ;
17638: LD_VAR 0 1
17642: PUSH
17643: LD_INT 1
17645: ARRAY
17646: PPUSH
17647: CALL_OW 65
// end ;
17651: PPOPN 1
17653: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
17654: LD_EXP 68
17658: PUSH
17659: LD_EXP 106
17663: AND
17664: IFFALSE 17793
17666: GO 17668
17668: DISABLE
17669: LD_INT 0
17671: PPUSH
// begin uc_side := 0 ;
17672: LD_ADDR_OWVAR 20
17676: PUSH
17677: LD_INT 0
17679: ST_TO_ADDR
// uc_nation := nation_arabian ;
17680: LD_ADDR_OWVAR 21
17684: PUSH
17685: LD_INT 2
17687: ST_TO_ADDR
// hc_gallery :=  ;
17688: LD_ADDR_OWVAR 33
17692: PUSH
17693: LD_STRING 
17695: ST_TO_ADDR
// hc_name :=  ;
17696: LD_ADDR_OWVAR 26
17700: PUSH
17701: LD_STRING 
17703: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
17704: LD_INT 1
17706: PPUSH
17707: LD_INT 11
17709: PPUSH
17710: LD_INT 10
17712: PPUSH
17713: CALL_OW 380
// un := CreateHuman ;
17717: LD_ADDR_VAR 0 1
17721: PUSH
17722: CALL_OW 44
17726: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17727: LD_VAR 0 1
17731: PPUSH
17732: LD_INT 1
17734: PPUSH
17735: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
17739: LD_INT 35
17741: PPUSH
17742: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
17746: LD_VAR 0 1
17750: PPUSH
17751: LD_INT 22
17753: PUSH
17754: LD_OWVAR 2
17758: PUSH
17759: EMPTY
17760: LIST
17761: LIST
17762: PPUSH
17763: CALL_OW 69
17767: PPUSH
17768: LD_VAR 0 1
17772: PPUSH
17773: CALL_OW 74
17777: PPUSH
17778: CALL_OW 115
// until IsDead ( un ) ;
17782: LD_VAR 0 1
17786: PPUSH
17787: CALL_OW 301
17791: IFFALSE 17739
// end ;
17793: PPOPN 1
17795: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
17796: LD_EXP 68
17800: PUSH
17801: LD_EXP 108
17805: AND
17806: IFFALSE 17818
17808: GO 17810
17810: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
17811: LD_STRING earthquake(getX(game), 0, 32)
17813: PPUSH
17814: CALL_OW 559
17818: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
17819: LD_EXP 68
17823: PUSH
17824: LD_EXP 109
17828: AND
17829: IFFALSE 17920
17831: GO 17833
17833: DISABLE
17834: LD_INT 0
17836: PPUSH
// begin enable ;
17837: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
17838: LD_ADDR_VAR 0 1
17842: PUSH
17843: LD_INT 22
17845: PUSH
17846: LD_OWVAR 2
17850: PUSH
17851: EMPTY
17852: LIST
17853: LIST
17854: PUSH
17855: LD_INT 21
17857: PUSH
17858: LD_INT 2
17860: PUSH
17861: EMPTY
17862: LIST
17863: LIST
17864: PUSH
17865: LD_INT 33
17867: PUSH
17868: LD_INT 3
17870: PUSH
17871: EMPTY
17872: LIST
17873: LIST
17874: PUSH
17875: EMPTY
17876: LIST
17877: LIST
17878: LIST
17879: PPUSH
17880: CALL_OW 69
17884: ST_TO_ADDR
// if not tmp then
17885: LD_VAR 0 1
17889: NOT
17890: IFFALSE 17894
// exit ;
17892: GO 17920
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
17894: LD_VAR 0 1
17898: PUSH
17899: LD_INT 1
17901: PPUSH
17902: LD_VAR 0 1
17906: PPUSH
17907: CALL_OW 12
17911: ARRAY
17912: PPUSH
17913: LD_INT 1
17915: PPUSH
17916: CALL_OW 234
// end ;
17920: PPOPN 1
17922: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
17923: LD_EXP 68
17927: PUSH
17928: LD_EXP 110
17932: AND
17933: IFFALSE 18074
17935: GO 17937
17937: DISABLE
17938: LD_INT 0
17940: PPUSH
17941: PPUSH
17942: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17943: LD_ADDR_VAR 0 3
17947: PUSH
17948: LD_INT 22
17950: PUSH
17951: LD_OWVAR 2
17955: PUSH
17956: EMPTY
17957: LIST
17958: LIST
17959: PUSH
17960: LD_INT 25
17962: PUSH
17963: LD_INT 1
17965: PUSH
17966: EMPTY
17967: LIST
17968: LIST
17969: PUSH
17970: EMPTY
17971: LIST
17972: LIST
17973: PPUSH
17974: CALL_OW 69
17978: ST_TO_ADDR
// if not tmp then
17979: LD_VAR 0 3
17983: NOT
17984: IFFALSE 17988
// exit ;
17986: GO 18074
// un := tmp [ rand ( 1 , tmp ) ] ;
17988: LD_ADDR_VAR 0 2
17992: PUSH
17993: LD_VAR 0 3
17997: PUSH
17998: LD_INT 1
18000: PPUSH
18001: LD_VAR 0 3
18005: PPUSH
18006: CALL_OW 12
18010: ARRAY
18011: ST_TO_ADDR
// if Crawls ( un ) then
18012: LD_VAR 0 2
18016: PPUSH
18017: CALL_OW 318
18021: IFFALSE 18032
// ComWalk ( un ) ;
18023: LD_VAR 0 2
18027: PPUSH
18028: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
18032: LD_VAR 0 2
18036: PPUSH
18037: LD_INT 9
18039: PPUSH
18040: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
18044: LD_INT 28
18046: PPUSH
18047: LD_OWVAR 2
18051: PPUSH
18052: LD_INT 2
18054: PPUSH
18055: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
18059: LD_INT 29
18061: PPUSH
18062: LD_OWVAR 2
18066: PPUSH
18067: LD_INT 2
18069: PPUSH
18070: CALL_OW 322
// end ;
18074: PPOPN 3
18076: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
18077: LD_EXP 68
18081: PUSH
18082: LD_EXP 111
18086: AND
18087: IFFALSE 18198
18089: GO 18091
18091: DISABLE
18092: LD_INT 0
18094: PPUSH
18095: PPUSH
18096: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18097: LD_ADDR_VAR 0 3
18101: PUSH
18102: LD_INT 22
18104: PUSH
18105: LD_OWVAR 2
18109: PUSH
18110: EMPTY
18111: LIST
18112: LIST
18113: PUSH
18114: LD_INT 25
18116: PUSH
18117: LD_INT 1
18119: PUSH
18120: EMPTY
18121: LIST
18122: LIST
18123: PUSH
18124: EMPTY
18125: LIST
18126: LIST
18127: PPUSH
18128: CALL_OW 69
18132: ST_TO_ADDR
// if not tmp then
18133: LD_VAR 0 3
18137: NOT
18138: IFFALSE 18142
// exit ;
18140: GO 18198
// un := tmp [ rand ( 1 , tmp ) ] ;
18142: LD_ADDR_VAR 0 2
18146: PUSH
18147: LD_VAR 0 3
18151: PUSH
18152: LD_INT 1
18154: PPUSH
18155: LD_VAR 0 3
18159: PPUSH
18160: CALL_OW 12
18164: ARRAY
18165: ST_TO_ADDR
// if Crawls ( un ) then
18166: LD_VAR 0 2
18170: PPUSH
18171: CALL_OW 318
18175: IFFALSE 18186
// ComWalk ( un ) ;
18177: LD_VAR 0 2
18181: PPUSH
18182: CALL_OW 138
// SetClass ( un , class_mortar ) ;
18186: LD_VAR 0 2
18190: PPUSH
18191: LD_INT 8
18193: PPUSH
18194: CALL_OW 336
// end ;
18198: PPOPN 3
18200: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
18201: LD_EXP 68
18205: PUSH
18206: LD_EXP 112
18210: AND
18211: IFFALSE 18355
18213: GO 18215
18215: DISABLE
18216: LD_INT 0
18218: PPUSH
18219: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
18220: LD_ADDR_VAR 0 2
18224: PUSH
18225: LD_INT 22
18227: PUSH
18228: LD_OWVAR 2
18232: PUSH
18233: EMPTY
18234: LIST
18235: LIST
18236: PUSH
18237: LD_INT 21
18239: PUSH
18240: LD_INT 2
18242: PUSH
18243: EMPTY
18244: LIST
18245: LIST
18246: PUSH
18247: LD_INT 2
18249: PUSH
18250: LD_INT 34
18252: PUSH
18253: LD_INT 12
18255: PUSH
18256: EMPTY
18257: LIST
18258: LIST
18259: PUSH
18260: LD_INT 34
18262: PUSH
18263: LD_INT 51
18265: PUSH
18266: EMPTY
18267: LIST
18268: LIST
18269: PUSH
18270: LD_INT 34
18272: PUSH
18273: LD_INT 32
18275: PUSH
18276: EMPTY
18277: LIST
18278: LIST
18279: PUSH
18280: EMPTY
18281: LIST
18282: LIST
18283: LIST
18284: LIST
18285: PUSH
18286: EMPTY
18287: LIST
18288: LIST
18289: LIST
18290: PPUSH
18291: CALL_OW 69
18295: ST_TO_ADDR
// if not tmp then
18296: LD_VAR 0 2
18300: NOT
18301: IFFALSE 18305
// exit ;
18303: GO 18355
// for i in tmp do
18305: LD_ADDR_VAR 0 1
18309: PUSH
18310: LD_VAR 0 2
18314: PUSH
18315: FOR_IN
18316: IFFALSE 18353
// if GetCargo ( i , mat_artifact ) = 0 then
18318: LD_VAR 0 1
18322: PPUSH
18323: LD_INT 4
18325: PPUSH
18326: CALL_OW 289
18330: PUSH
18331: LD_INT 0
18333: EQUAL
18334: IFFALSE 18351
// SetCargo ( i , mat_siberit , 100 ) ;
18336: LD_VAR 0 1
18340: PPUSH
18341: LD_INT 3
18343: PPUSH
18344: LD_INT 100
18346: PPUSH
18347: CALL_OW 290
18351: GO 18315
18353: POP
18354: POP
// end ;
18355: PPOPN 2
18357: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
18358: LD_EXP 68
18362: PUSH
18363: LD_EXP 113
18367: AND
18368: IFFALSE 18551
18370: GO 18372
18372: DISABLE
18373: LD_INT 0
18375: PPUSH
18376: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
18377: LD_ADDR_VAR 0 2
18381: PUSH
18382: LD_INT 22
18384: PUSH
18385: LD_OWVAR 2
18389: PUSH
18390: EMPTY
18391: LIST
18392: LIST
18393: PPUSH
18394: CALL_OW 69
18398: ST_TO_ADDR
// if not tmp then
18399: LD_VAR 0 2
18403: NOT
18404: IFFALSE 18408
// exit ;
18406: GO 18551
// for i := 1 to 2 do
18408: LD_ADDR_VAR 0 1
18412: PUSH
18413: DOUBLE
18414: LD_INT 1
18416: DEC
18417: ST_TO_ADDR
18418: LD_INT 2
18420: PUSH
18421: FOR_TO
18422: IFFALSE 18549
// begin uc_side := your_side ;
18424: LD_ADDR_OWVAR 20
18428: PUSH
18429: LD_OWVAR 2
18433: ST_TO_ADDR
// uc_nation := nation_american ;
18434: LD_ADDR_OWVAR 21
18438: PUSH
18439: LD_INT 1
18441: ST_TO_ADDR
// vc_chassis := us_morphling ;
18442: LD_ADDR_OWVAR 37
18446: PUSH
18447: LD_INT 5
18449: ST_TO_ADDR
// vc_engine := engine_siberite ;
18450: LD_ADDR_OWVAR 39
18454: PUSH
18455: LD_INT 3
18457: ST_TO_ADDR
// vc_control := control_computer ;
18458: LD_ADDR_OWVAR 38
18462: PUSH
18463: LD_INT 3
18465: ST_TO_ADDR
// vc_weapon := us_double_laser ;
18466: LD_ADDR_OWVAR 40
18470: PUSH
18471: LD_INT 10
18473: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
18474: LD_VAR 0 2
18478: PUSH
18479: LD_INT 1
18481: ARRAY
18482: PPUSH
18483: CALL_OW 310
18487: NOT
18488: IFFALSE 18535
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
18490: CALL_OW 45
18494: PPUSH
18495: LD_VAR 0 2
18499: PUSH
18500: LD_INT 1
18502: ARRAY
18503: PPUSH
18504: CALL_OW 250
18508: PPUSH
18509: LD_VAR 0 2
18513: PUSH
18514: LD_INT 1
18516: ARRAY
18517: PPUSH
18518: CALL_OW 251
18522: PPUSH
18523: LD_INT 12
18525: PPUSH
18526: LD_INT 1
18528: PPUSH
18529: CALL_OW 50
18533: GO 18547
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
18535: CALL_OW 45
18539: PPUSH
18540: LD_INT 1
18542: PPUSH
18543: CALL_OW 51
// end ;
18547: GO 18421
18549: POP
18550: POP
// end ;
18551: PPOPN 2
18553: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
18554: LD_EXP 68
18558: PUSH
18559: LD_EXP 114
18563: AND
18564: IFFALSE 18786
18566: GO 18568
18568: DISABLE
18569: LD_INT 0
18571: PPUSH
18572: PPUSH
18573: PPUSH
18574: PPUSH
18575: PPUSH
18576: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18577: LD_ADDR_VAR 0 6
18581: PUSH
18582: LD_INT 22
18584: PUSH
18585: LD_OWVAR 2
18589: PUSH
18590: EMPTY
18591: LIST
18592: LIST
18593: PUSH
18594: LD_INT 21
18596: PUSH
18597: LD_INT 1
18599: PUSH
18600: EMPTY
18601: LIST
18602: LIST
18603: PUSH
18604: LD_INT 3
18606: PUSH
18607: LD_INT 23
18609: PUSH
18610: LD_INT 0
18612: PUSH
18613: EMPTY
18614: LIST
18615: LIST
18616: PUSH
18617: EMPTY
18618: LIST
18619: LIST
18620: PUSH
18621: EMPTY
18622: LIST
18623: LIST
18624: LIST
18625: PPUSH
18626: CALL_OW 69
18630: ST_TO_ADDR
// if not tmp then
18631: LD_VAR 0 6
18635: NOT
18636: IFFALSE 18640
// exit ;
18638: GO 18786
// s1 := rand ( 1 , 4 ) ;
18640: LD_ADDR_VAR 0 2
18644: PUSH
18645: LD_INT 1
18647: PPUSH
18648: LD_INT 4
18650: PPUSH
18651: CALL_OW 12
18655: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
18656: LD_ADDR_VAR 0 4
18660: PUSH
18661: LD_VAR 0 6
18665: PUSH
18666: LD_INT 1
18668: ARRAY
18669: PPUSH
18670: LD_VAR 0 2
18674: PPUSH
18675: CALL_OW 259
18679: ST_TO_ADDR
// if s1 = 1 then
18680: LD_VAR 0 2
18684: PUSH
18685: LD_INT 1
18687: EQUAL
18688: IFFALSE 18708
// s2 := rand ( 2 , 4 ) else
18690: LD_ADDR_VAR 0 3
18694: PUSH
18695: LD_INT 2
18697: PPUSH
18698: LD_INT 4
18700: PPUSH
18701: CALL_OW 12
18705: ST_TO_ADDR
18706: GO 18716
// s2 := 1 ;
18708: LD_ADDR_VAR 0 3
18712: PUSH
18713: LD_INT 1
18715: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
18716: LD_ADDR_VAR 0 5
18720: PUSH
18721: LD_VAR 0 6
18725: PUSH
18726: LD_INT 1
18728: ARRAY
18729: PPUSH
18730: LD_VAR 0 3
18734: PPUSH
18735: CALL_OW 259
18739: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
18740: LD_VAR 0 6
18744: PUSH
18745: LD_INT 1
18747: ARRAY
18748: PPUSH
18749: LD_VAR 0 2
18753: PPUSH
18754: LD_VAR 0 5
18758: PPUSH
18759: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
18763: LD_VAR 0 6
18767: PUSH
18768: LD_INT 1
18770: ARRAY
18771: PPUSH
18772: LD_VAR 0 3
18776: PPUSH
18777: LD_VAR 0 4
18781: PPUSH
18782: CALL_OW 237
// end ;
18786: PPOPN 6
18788: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
18789: LD_EXP 68
18793: PUSH
18794: LD_EXP 115
18798: AND
18799: IFFALSE 18878
18801: GO 18803
18803: DISABLE
18804: LD_INT 0
18806: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
18807: LD_ADDR_VAR 0 1
18811: PUSH
18812: LD_INT 22
18814: PUSH
18815: LD_OWVAR 2
18819: PUSH
18820: EMPTY
18821: LIST
18822: LIST
18823: PUSH
18824: LD_INT 30
18826: PUSH
18827: LD_INT 3
18829: PUSH
18830: EMPTY
18831: LIST
18832: LIST
18833: PUSH
18834: EMPTY
18835: LIST
18836: LIST
18837: PPUSH
18838: CALL_OW 69
18842: ST_TO_ADDR
// if not tmp then
18843: LD_VAR 0 1
18847: NOT
18848: IFFALSE 18852
// exit ;
18850: GO 18878
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
18852: LD_VAR 0 1
18856: PUSH
18857: LD_INT 1
18859: PPUSH
18860: LD_VAR 0 1
18864: PPUSH
18865: CALL_OW 12
18869: ARRAY
18870: PPUSH
18871: LD_INT 1
18873: PPUSH
18874: CALL_OW 234
// end ;
18878: PPOPN 1
18880: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
18881: LD_EXP 68
18885: PUSH
18886: LD_EXP 116
18890: AND
18891: IFFALSE 19003
18893: GO 18895
18895: DISABLE
18896: LD_INT 0
18898: PPUSH
18899: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
18900: LD_ADDR_VAR 0 2
18904: PUSH
18905: LD_INT 22
18907: PUSH
18908: LD_OWVAR 2
18912: PUSH
18913: EMPTY
18914: LIST
18915: LIST
18916: PUSH
18917: LD_INT 2
18919: PUSH
18920: LD_INT 30
18922: PUSH
18923: LD_INT 27
18925: PUSH
18926: EMPTY
18927: LIST
18928: LIST
18929: PUSH
18930: LD_INT 30
18932: PUSH
18933: LD_INT 26
18935: PUSH
18936: EMPTY
18937: LIST
18938: LIST
18939: PUSH
18940: LD_INT 30
18942: PUSH
18943: LD_INT 28
18945: PUSH
18946: EMPTY
18947: LIST
18948: LIST
18949: PUSH
18950: EMPTY
18951: LIST
18952: LIST
18953: LIST
18954: LIST
18955: PUSH
18956: EMPTY
18957: LIST
18958: LIST
18959: PPUSH
18960: CALL_OW 69
18964: ST_TO_ADDR
// if not tmp then
18965: LD_VAR 0 2
18969: NOT
18970: IFFALSE 18974
// exit ;
18972: GO 19003
// for i in tmp do
18974: LD_ADDR_VAR 0 1
18978: PUSH
18979: LD_VAR 0 2
18983: PUSH
18984: FOR_IN
18985: IFFALSE 19001
// SetLives ( i , 1 ) ;
18987: LD_VAR 0 1
18991: PPUSH
18992: LD_INT 1
18994: PPUSH
18995: CALL_OW 234
18999: GO 18984
19001: POP
19002: POP
// end ;
19003: PPOPN 2
19005: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
19006: LD_EXP 68
19010: PUSH
19011: LD_EXP 117
19015: AND
19016: IFFALSE 19290
19018: GO 19020
19020: DISABLE
19021: LD_INT 0
19023: PPUSH
19024: PPUSH
19025: PPUSH
// begin i := rand ( 1 , 7 ) ;
19026: LD_ADDR_VAR 0 1
19030: PUSH
19031: LD_INT 1
19033: PPUSH
19034: LD_INT 7
19036: PPUSH
19037: CALL_OW 12
19041: ST_TO_ADDR
// case i of 1 :
19042: LD_VAR 0 1
19046: PUSH
19047: LD_INT 1
19049: DOUBLE
19050: EQUAL
19051: IFTRUE 19055
19053: GO 19065
19055: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
19056: LD_STRING earthquake(getX(game), 0, 32)
19058: PPUSH
19059: CALL_OW 559
19063: GO 19290
19065: LD_INT 2
19067: DOUBLE
19068: EQUAL
19069: IFTRUE 19073
19071: GO 19087
19073: POP
// begin ToLua ( displayStucuk(); ) ;
19074: LD_STRING displayStucuk();
19076: PPUSH
19077: CALL_OW 559
// ResetFog ;
19081: CALL_OW 335
// end ; 3 :
19085: GO 19290
19087: LD_INT 3
19089: DOUBLE
19090: EQUAL
19091: IFTRUE 19095
19093: GO 19199
19095: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19096: LD_ADDR_VAR 0 2
19100: PUSH
19101: LD_INT 22
19103: PUSH
19104: LD_OWVAR 2
19108: PUSH
19109: EMPTY
19110: LIST
19111: LIST
19112: PUSH
19113: LD_INT 25
19115: PUSH
19116: LD_INT 1
19118: PUSH
19119: EMPTY
19120: LIST
19121: LIST
19122: PUSH
19123: EMPTY
19124: LIST
19125: LIST
19126: PPUSH
19127: CALL_OW 69
19131: ST_TO_ADDR
// if not tmp then
19132: LD_VAR 0 2
19136: NOT
19137: IFFALSE 19141
// exit ;
19139: GO 19290
// un := tmp [ rand ( 1 , tmp ) ] ;
19141: LD_ADDR_VAR 0 3
19145: PUSH
19146: LD_VAR 0 2
19150: PUSH
19151: LD_INT 1
19153: PPUSH
19154: LD_VAR 0 2
19158: PPUSH
19159: CALL_OW 12
19163: ARRAY
19164: ST_TO_ADDR
// if Crawls ( un ) then
19165: LD_VAR 0 3
19169: PPUSH
19170: CALL_OW 318
19174: IFFALSE 19185
// ComWalk ( un ) ;
19176: LD_VAR 0 3
19180: PPUSH
19181: CALL_OW 138
// SetClass ( un , class_mortar ) ;
19185: LD_VAR 0 3
19189: PPUSH
19190: LD_INT 8
19192: PPUSH
19193: CALL_OW 336
// end ; 4 :
19197: GO 19290
19199: LD_INT 4
19201: DOUBLE
19202: EQUAL
19203: IFTRUE 19207
19205: GO 19268
19207: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
19208: LD_ADDR_VAR 0 2
19212: PUSH
19213: LD_INT 22
19215: PUSH
19216: LD_OWVAR 2
19220: PUSH
19221: EMPTY
19222: LIST
19223: LIST
19224: PUSH
19225: LD_INT 30
19227: PUSH
19228: LD_INT 29
19230: PUSH
19231: EMPTY
19232: LIST
19233: LIST
19234: PUSH
19235: EMPTY
19236: LIST
19237: LIST
19238: PPUSH
19239: CALL_OW 69
19243: ST_TO_ADDR
// if not tmp then
19244: LD_VAR 0 2
19248: NOT
19249: IFFALSE 19253
// exit ;
19251: GO 19290
// DestroyUnit ( tmp [ 1 ] ) ;
19253: LD_VAR 0 2
19257: PUSH
19258: LD_INT 1
19260: ARRAY
19261: PPUSH
19262: CALL_OW 65
// end ; 5 .. 7 :
19266: GO 19290
19268: LD_INT 5
19270: DOUBLE
19271: GREATEREQUAL
19272: IFFALSE 19280
19274: LD_INT 7
19276: DOUBLE
19277: LESSEQUAL
19278: IFTRUE 19282
19280: GO 19289
19282: POP
// StreamSibBomb ; end ;
19283: CALL 15540 0 0
19287: GO 19290
19289: POP
// end ;
19290: PPOPN 3
19292: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
19293: LD_EXP 68
19297: PUSH
19298: LD_EXP 118
19302: AND
19303: IFFALSE 19459
19305: GO 19307
19307: DISABLE
19308: LD_INT 0
19310: PPUSH
19311: PPUSH
19312: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
19313: LD_ADDR_VAR 0 2
19317: PUSH
19318: LD_INT 81
19320: PUSH
19321: LD_OWVAR 2
19325: PUSH
19326: EMPTY
19327: LIST
19328: LIST
19329: PUSH
19330: LD_INT 2
19332: PUSH
19333: LD_INT 21
19335: PUSH
19336: LD_INT 1
19338: PUSH
19339: EMPTY
19340: LIST
19341: LIST
19342: PUSH
19343: LD_INT 21
19345: PUSH
19346: LD_INT 2
19348: PUSH
19349: EMPTY
19350: LIST
19351: LIST
19352: PUSH
19353: EMPTY
19354: LIST
19355: LIST
19356: LIST
19357: PUSH
19358: EMPTY
19359: LIST
19360: LIST
19361: PPUSH
19362: CALL_OW 69
19366: ST_TO_ADDR
// if not tmp then
19367: LD_VAR 0 2
19371: NOT
19372: IFFALSE 19376
// exit ;
19374: GO 19459
// p := 0 ;
19376: LD_ADDR_VAR 0 3
19380: PUSH
19381: LD_INT 0
19383: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19384: LD_INT 35
19386: PPUSH
19387: CALL_OW 67
// p := p + 1 ;
19391: LD_ADDR_VAR 0 3
19395: PUSH
19396: LD_VAR 0 3
19400: PUSH
19401: LD_INT 1
19403: PLUS
19404: ST_TO_ADDR
// for i in tmp do
19405: LD_ADDR_VAR 0 1
19409: PUSH
19410: LD_VAR 0 2
19414: PUSH
19415: FOR_IN
19416: IFFALSE 19447
// if GetLives ( i ) < 1000 then
19418: LD_VAR 0 1
19422: PPUSH
19423: CALL_OW 256
19427: PUSH
19428: LD_INT 1000
19430: LESS
19431: IFFALSE 19445
// SetLives ( i , 1000 ) ;
19433: LD_VAR 0 1
19437: PPUSH
19438: LD_INT 1000
19440: PPUSH
19441: CALL_OW 234
19445: GO 19415
19447: POP
19448: POP
// until p > 20 ;
19449: LD_VAR 0 3
19453: PUSH
19454: LD_INT 20
19456: GREATER
19457: IFFALSE 19384
// end ;
19459: PPOPN 3
19461: END
// every 0 0$1 trigger StreamModeActive and sTime do
19462: LD_EXP 68
19466: PUSH
19467: LD_EXP 119
19471: AND
19472: IFFALSE 19507
19474: GO 19476
19476: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
19477: LD_INT 28
19479: PPUSH
19480: LD_OWVAR 2
19484: PPUSH
19485: LD_INT 2
19487: PPUSH
19488: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
19492: LD_INT 30
19494: PPUSH
19495: LD_OWVAR 2
19499: PPUSH
19500: LD_INT 2
19502: PPUSH
19503: CALL_OW 322
// end ;
19507: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
19508: LD_EXP 68
19512: PUSH
19513: LD_EXP 120
19517: AND
19518: IFFALSE 19639
19520: GO 19522
19522: DISABLE
19523: LD_INT 0
19525: PPUSH
19526: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19527: LD_ADDR_VAR 0 2
19531: PUSH
19532: LD_INT 22
19534: PUSH
19535: LD_OWVAR 2
19539: PUSH
19540: EMPTY
19541: LIST
19542: LIST
19543: PUSH
19544: LD_INT 21
19546: PUSH
19547: LD_INT 1
19549: PUSH
19550: EMPTY
19551: LIST
19552: LIST
19553: PUSH
19554: LD_INT 3
19556: PUSH
19557: LD_INT 23
19559: PUSH
19560: LD_INT 0
19562: PUSH
19563: EMPTY
19564: LIST
19565: LIST
19566: PUSH
19567: EMPTY
19568: LIST
19569: LIST
19570: PUSH
19571: EMPTY
19572: LIST
19573: LIST
19574: LIST
19575: PPUSH
19576: CALL_OW 69
19580: ST_TO_ADDR
// if not tmp then
19581: LD_VAR 0 2
19585: NOT
19586: IFFALSE 19590
// exit ;
19588: GO 19639
// for i in tmp do
19590: LD_ADDR_VAR 0 1
19594: PUSH
19595: LD_VAR 0 2
19599: PUSH
19600: FOR_IN
19601: IFFALSE 19637
// begin if Crawls ( i ) then
19603: LD_VAR 0 1
19607: PPUSH
19608: CALL_OW 318
19612: IFFALSE 19623
// ComWalk ( i ) ;
19614: LD_VAR 0 1
19618: PPUSH
19619: CALL_OW 138
// SetClass ( i , 2 ) ;
19623: LD_VAR 0 1
19627: PPUSH
19628: LD_INT 2
19630: PPUSH
19631: CALL_OW 336
// end ;
19635: GO 19600
19637: POP
19638: POP
// end ;
19639: PPOPN 2
19641: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
19642: LD_EXP 68
19646: PUSH
19647: LD_EXP 121
19651: AND
19652: IFFALSE 19933
19654: GO 19656
19656: DISABLE
19657: LD_INT 0
19659: PPUSH
19660: PPUSH
19661: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
19662: LD_OWVAR 2
19666: PPUSH
19667: LD_INT 9
19669: PPUSH
19670: LD_INT 1
19672: PPUSH
19673: LD_INT 1
19675: PPUSH
19676: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
19680: LD_INT 9
19682: PPUSH
19683: LD_OWVAR 2
19687: PPUSH
19688: CALL_OW 343
// uc_side := 9 ;
19692: LD_ADDR_OWVAR 20
19696: PUSH
19697: LD_INT 9
19699: ST_TO_ADDR
// uc_nation := 2 ;
19700: LD_ADDR_OWVAR 21
19704: PUSH
19705: LD_INT 2
19707: ST_TO_ADDR
// hc_name := Dark Warrior ;
19708: LD_ADDR_OWVAR 26
19712: PUSH
19713: LD_STRING Dark Warrior
19715: ST_TO_ADDR
// hc_gallery :=  ;
19716: LD_ADDR_OWVAR 33
19720: PUSH
19721: LD_STRING 
19723: ST_TO_ADDR
// hc_noskilllimit := true ;
19724: LD_ADDR_OWVAR 76
19728: PUSH
19729: LD_INT 1
19731: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
19732: LD_ADDR_OWVAR 31
19736: PUSH
19737: LD_INT 30
19739: PUSH
19740: LD_INT 30
19742: PUSH
19743: LD_INT 30
19745: PUSH
19746: LD_INT 30
19748: PUSH
19749: EMPTY
19750: LIST
19751: LIST
19752: LIST
19753: LIST
19754: ST_TO_ADDR
// un := CreateHuman ;
19755: LD_ADDR_VAR 0 3
19759: PUSH
19760: CALL_OW 44
19764: ST_TO_ADDR
// hc_noskilllimit := false ;
19765: LD_ADDR_OWVAR 76
19769: PUSH
19770: LD_INT 0
19772: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19773: LD_VAR 0 3
19777: PPUSH
19778: LD_INT 1
19780: PPUSH
19781: CALL_OW 51
// p := 0 ;
19785: LD_ADDR_VAR 0 2
19789: PUSH
19790: LD_INT 0
19792: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19793: LD_INT 35
19795: PPUSH
19796: CALL_OW 67
// p := p + 1 ;
19800: LD_ADDR_VAR 0 2
19804: PUSH
19805: LD_VAR 0 2
19809: PUSH
19810: LD_INT 1
19812: PLUS
19813: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
19814: LD_VAR 0 3
19818: PPUSH
19819: CALL_OW 256
19823: PUSH
19824: LD_INT 1000
19826: LESS
19827: IFFALSE 19841
// SetLives ( un , 1000 ) ;
19829: LD_VAR 0 3
19833: PPUSH
19834: LD_INT 1000
19836: PPUSH
19837: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
19841: LD_VAR 0 3
19845: PPUSH
19846: LD_INT 81
19848: PUSH
19849: LD_OWVAR 2
19853: PUSH
19854: EMPTY
19855: LIST
19856: LIST
19857: PUSH
19858: LD_INT 91
19860: PUSH
19861: LD_VAR 0 3
19865: PUSH
19866: LD_INT 30
19868: PUSH
19869: EMPTY
19870: LIST
19871: LIST
19872: LIST
19873: PUSH
19874: EMPTY
19875: LIST
19876: LIST
19877: PPUSH
19878: CALL_OW 69
19882: PPUSH
19883: LD_VAR 0 3
19887: PPUSH
19888: CALL_OW 74
19892: PPUSH
19893: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
19897: LD_VAR 0 2
19901: PUSH
19902: LD_INT 60
19904: GREATER
19905: PUSH
19906: LD_VAR 0 3
19910: PPUSH
19911: CALL_OW 301
19915: OR
19916: IFFALSE 19793
// if un then
19918: LD_VAR 0 3
19922: IFFALSE 19933
// RemoveUnit ( un ) ;
19924: LD_VAR 0 3
19928: PPUSH
19929: CALL_OW 64
// end ;
19933: PPOPN 3
19935: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19936: LD_INT 0
19938: PPUSH
// case cmd of 301 :
19939: LD_VAR 0 1
19943: PUSH
19944: LD_INT 301
19946: DOUBLE
19947: EQUAL
19948: IFTRUE 19952
19950: GO 19984
19952: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
19953: LD_VAR 0 6
19957: PPUSH
19958: LD_VAR 0 7
19962: PPUSH
19963: LD_VAR 0 8
19967: PPUSH
19968: LD_VAR 0 4
19972: PPUSH
19973: LD_VAR 0 5
19977: PPUSH
19978: CALL 21185 0 5
19982: GO 20105
19984: LD_INT 302
19986: DOUBLE
19987: EQUAL
19988: IFTRUE 19992
19990: GO 20029
19992: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
19993: LD_VAR 0 6
19997: PPUSH
19998: LD_VAR 0 7
20002: PPUSH
20003: LD_VAR 0 8
20007: PPUSH
20008: LD_VAR 0 9
20012: PPUSH
20013: LD_VAR 0 4
20017: PPUSH
20018: LD_VAR 0 5
20022: PPUSH
20023: CALL 21276 0 6
20027: GO 20105
20029: LD_INT 303
20031: DOUBLE
20032: EQUAL
20033: IFTRUE 20037
20035: GO 20074
20037: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
20038: LD_VAR 0 6
20042: PPUSH
20043: LD_VAR 0 7
20047: PPUSH
20048: LD_VAR 0 8
20052: PPUSH
20053: LD_VAR 0 9
20057: PPUSH
20058: LD_VAR 0 4
20062: PPUSH
20063: LD_VAR 0 5
20067: PPUSH
20068: CALL 20110 0 6
20072: GO 20105
20074: LD_INT 304
20076: DOUBLE
20077: EQUAL
20078: IFTRUE 20082
20080: GO 20104
20082: POP
// hHackTeleport ( unit , x , y ) ; end ;
20083: LD_VAR 0 2
20087: PPUSH
20088: LD_VAR 0 4
20092: PPUSH
20093: LD_VAR 0 5
20097: PPUSH
20098: CALL 21869 0 3
20102: GO 20105
20104: POP
// end ;
20105: LD_VAR 0 12
20109: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
20110: LD_INT 0
20112: PPUSH
20113: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
20114: LD_VAR 0 1
20118: PUSH
20119: LD_INT 1
20121: LESS
20122: PUSH
20123: LD_VAR 0 1
20127: PUSH
20128: LD_INT 3
20130: GREATER
20131: OR
20132: PUSH
20133: LD_VAR 0 5
20137: PPUSH
20138: LD_VAR 0 6
20142: PPUSH
20143: CALL_OW 428
20147: OR
20148: IFFALSE 20152
// exit ;
20150: GO 20872
// uc_side := your_side ;
20152: LD_ADDR_OWVAR 20
20156: PUSH
20157: LD_OWVAR 2
20161: ST_TO_ADDR
// uc_nation := nation ;
20162: LD_ADDR_OWVAR 21
20166: PUSH
20167: LD_VAR 0 1
20171: ST_TO_ADDR
// bc_level = 1 ;
20172: LD_ADDR_OWVAR 43
20176: PUSH
20177: LD_INT 1
20179: ST_TO_ADDR
// case btype of 1 :
20180: LD_VAR 0 2
20184: PUSH
20185: LD_INT 1
20187: DOUBLE
20188: EQUAL
20189: IFTRUE 20193
20191: GO 20204
20193: POP
// bc_type := b_depot ; 2 :
20194: LD_ADDR_OWVAR 42
20198: PUSH
20199: LD_INT 0
20201: ST_TO_ADDR
20202: GO 20816
20204: LD_INT 2
20206: DOUBLE
20207: EQUAL
20208: IFTRUE 20212
20210: GO 20223
20212: POP
// bc_type := b_warehouse ; 3 :
20213: LD_ADDR_OWVAR 42
20217: PUSH
20218: LD_INT 1
20220: ST_TO_ADDR
20221: GO 20816
20223: LD_INT 3
20225: DOUBLE
20226: EQUAL
20227: IFTRUE 20231
20229: GO 20242
20231: POP
// bc_type := b_lab ; 4 .. 9 :
20232: LD_ADDR_OWVAR 42
20236: PUSH
20237: LD_INT 6
20239: ST_TO_ADDR
20240: GO 20816
20242: LD_INT 4
20244: DOUBLE
20245: GREATEREQUAL
20246: IFFALSE 20254
20248: LD_INT 9
20250: DOUBLE
20251: LESSEQUAL
20252: IFTRUE 20256
20254: GO 20308
20256: POP
// begin bc_type := b_lab_half ;
20257: LD_ADDR_OWVAR 42
20261: PUSH
20262: LD_INT 7
20264: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
20265: LD_ADDR_OWVAR 44
20269: PUSH
20270: LD_INT 10
20272: PUSH
20273: LD_INT 11
20275: PUSH
20276: LD_INT 12
20278: PUSH
20279: LD_INT 15
20281: PUSH
20282: LD_INT 14
20284: PUSH
20285: LD_INT 13
20287: PUSH
20288: EMPTY
20289: LIST
20290: LIST
20291: LIST
20292: LIST
20293: LIST
20294: LIST
20295: PUSH
20296: LD_VAR 0 2
20300: PUSH
20301: LD_INT 3
20303: MINUS
20304: ARRAY
20305: ST_TO_ADDR
// end ; 10 .. 13 :
20306: GO 20816
20308: LD_INT 10
20310: DOUBLE
20311: GREATEREQUAL
20312: IFFALSE 20320
20314: LD_INT 13
20316: DOUBLE
20317: LESSEQUAL
20318: IFTRUE 20322
20320: GO 20399
20322: POP
// begin bc_type := b_lab_full ;
20323: LD_ADDR_OWVAR 42
20327: PUSH
20328: LD_INT 8
20330: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
20331: LD_ADDR_OWVAR 44
20335: PUSH
20336: LD_INT 10
20338: PUSH
20339: LD_INT 12
20341: PUSH
20342: LD_INT 14
20344: PUSH
20345: LD_INT 13
20347: PUSH
20348: EMPTY
20349: LIST
20350: LIST
20351: LIST
20352: LIST
20353: PUSH
20354: LD_VAR 0 2
20358: PUSH
20359: LD_INT 9
20361: MINUS
20362: ARRAY
20363: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
20364: LD_ADDR_OWVAR 45
20368: PUSH
20369: LD_INT 11
20371: PUSH
20372: LD_INT 15
20374: PUSH
20375: LD_INT 12
20377: PUSH
20378: LD_INT 15
20380: PUSH
20381: EMPTY
20382: LIST
20383: LIST
20384: LIST
20385: LIST
20386: PUSH
20387: LD_VAR 0 2
20391: PUSH
20392: LD_INT 9
20394: MINUS
20395: ARRAY
20396: ST_TO_ADDR
// end ; 14 :
20397: GO 20816
20399: LD_INT 14
20401: DOUBLE
20402: EQUAL
20403: IFTRUE 20407
20405: GO 20418
20407: POP
// bc_type := b_workshop ; 15 :
20408: LD_ADDR_OWVAR 42
20412: PUSH
20413: LD_INT 2
20415: ST_TO_ADDR
20416: GO 20816
20418: LD_INT 15
20420: DOUBLE
20421: EQUAL
20422: IFTRUE 20426
20424: GO 20437
20426: POP
// bc_type := b_factory ; 16 :
20427: LD_ADDR_OWVAR 42
20431: PUSH
20432: LD_INT 3
20434: ST_TO_ADDR
20435: GO 20816
20437: LD_INT 16
20439: DOUBLE
20440: EQUAL
20441: IFTRUE 20445
20443: GO 20456
20445: POP
// bc_type := b_ext_gun ; 17 :
20446: LD_ADDR_OWVAR 42
20450: PUSH
20451: LD_INT 17
20453: ST_TO_ADDR
20454: GO 20816
20456: LD_INT 17
20458: DOUBLE
20459: EQUAL
20460: IFTRUE 20464
20462: GO 20492
20464: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
20465: LD_ADDR_OWVAR 42
20469: PUSH
20470: LD_INT 19
20472: PUSH
20473: LD_INT 23
20475: PUSH
20476: LD_INT 19
20478: PUSH
20479: EMPTY
20480: LIST
20481: LIST
20482: LIST
20483: PUSH
20484: LD_VAR 0 1
20488: ARRAY
20489: ST_TO_ADDR
20490: GO 20816
20492: LD_INT 18
20494: DOUBLE
20495: EQUAL
20496: IFTRUE 20500
20498: GO 20511
20500: POP
// bc_type := b_ext_radar ; 19 :
20501: LD_ADDR_OWVAR 42
20505: PUSH
20506: LD_INT 20
20508: ST_TO_ADDR
20509: GO 20816
20511: LD_INT 19
20513: DOUBLE
20514: EQUAL
20515: IFTRUE 20519
20517: GO 20530
20519: POP
// bc_type := b_ext_radio ; 20 :
20520: LD_ADDR_OWVAR 42
20524: PUSH
20525: LD_INT 22
20527: ST_TO_ADDR
20528: GO 20816
20530: LD_INT 20
20532: DOUBLE
20533: EQUAL
20534: IFTRUE 20538
20536: GO 20549
20538: POP
// bc_type := b_ext_siberium ; 21 :
20539: LD_ADDR_OWVAR 42
20543: PUSH
20544: LD_INT 21
20546: ST_TO_ADDR
20547: GO 20816
20549: LD_INT 21
20551: DOUBLE
20552: EQUAL
20553: IFTRUE 20557
20555: GO 20568
20557: POP
// bc_type := b_ext_computer ; 22 :
20558: LD_ADDR_OWVAR 42
20562: PUSH
20563: LD_INT 24
20565: ST_TO_ADDR
20566: GO 20816
20568: LD_INT 22
20570: DOUBLE
20571: EQUAL
20572: IFTRUE 20576
20574: GO 20587
20576: POP
// bc_type := b_ext_track ; 23 :
20577: LD_ADDR_OWVAR 42
20581: PUSH
20582: LD_INT 16
20584: ST_TO_ADDR
20585: GO 20816
20587: LD_INT 23
20589: DOUBLE
20590: EQUAL
20591: IFTRUE 20595
20593: GO 20606
20595: POP
// bc_type := b_ext_laser ; 24 :
20596: LD_ADDR_OWVAR 42
20600: PUSH
20601: LD_INT 25
20603: ST_TO_ADDR
20604: GO 20816
20606: LD_INT 24
20608: DOUBLE
20609: EQUAL
20610: IFTRUE 20614
20612: GO 20625
20614: POP
// bc_type := b_control_tower ; 25 :
20615: LD_ADDR_OWVAR 42
20619: PUSH
20620: LD_INT 36
20622: ST_TO_ADDR
20623: GO 20816
20625: LD_INT 25
20627: DOUBLE
20628: EQUAL
20629: IFTRUE 20633
20631: GO 20644
20633: POP
// bc_type := b_breastwork ; 26 :
20634: LD_ADDR_OWVAR 42
20638: PUSH
20639: LD_INT 31
20641: ST_TO_ADDR
20642: GO 20816
20644: LD_INT 26
20646: DOUBLE
20647: EQUAL
20648: IFTRUE 20652
20650: GO 20663
20652: POP
// bc_type := b_bunker ; 27 :
20653: LD_ADDR_OWVAR 42
20657: PUSH
20658: LD_INT 32
20660: ST_TO_ADDR
20661: GO 20816
20663: LD_INT 27
20665: DOUBLE
20666: EQUAL
20667: IFTRUE 20671
20669: GO 20682
20671: POP
// bc_type := b_turret ; 28 :
20672: LD_ADDR_OWVAR 42
20676: PUSH
20677: LD_INT 33
20679: ST_TO_ADDR
20680: GO 20816
20682: LD_INT 28
20684: DOUBLE
20685: EQUAL
20686: IFTRUE 20690
20688: GO 20701
20690: POP
// bc_type := b_armoury ; 29 :
20691: LD_ADDR_OWVAR 42
20695: PUSH
20696: LD_INT 4
20698: ST_TO_ADDR
20699: GO 20816
20701: LD_INT 29
20703: DOUBLE
20704: EQUAL
20705: IFTRUE 20709
20707: GO 20720
20709: POP
// bc_type := b_barracks ; 30 :
20710: LD_ADDR_OWVAR 42
20714: PUSH
20715: LD_INT 5
20717: ST_TO_ADDR
20718: GO 20816
20720: LD_INT 30
20722: DOUBLE
20723: EQUAL
20724: IFTRUE 20728
20726: GO 20739
20728: POP
// bc_type := b_solar_power ; 31 :
20729: LD_ADDR_OWVAR 42
20733: PUSH
20734: LD_INT 27
20736: ST_TO_ADDR
20737: GO 20816
20739: LD_INT 31
20741: DOUBLE
20742: EQUAL
20743: IFTRUE 20747
20745: GO 20758
20747: POP
// bc_type := b_oil_power ; 32 :
20748: LD_ADDR_OWVAR 42
20752: PUSH
20753: LD_INT 26
20755: ST_TO_ADDR
20756: GO 20816
20758: LD_INT 32
20760: DOUBLE
20761: EQUAL
20762: IFTRUE 20766
20764: GO 20777
20766: POP
// bc_type := b_siberite_power ; 33 :
20767: LD_ADDR_OWVAR 42
20771: PUSH
20772: LD_INT 28
20774: ST_TO_ADDR
20775: GO 20816
20777: LD_INT 33
20779: DOUBLE
20780: EQUAL
20781: IFTRUE 20785
20783: GO 20796
20785: POP
// bc_type := b_oil_mine ; 34 :
20786: LD_ADDR_OWVAR 42
20790: PUSH
20791: LD_INT 29
20793: ST_TO_ADDR
20794: GO 20816
20796: LD_INT 34
20798: DOUBLE
20799: EQUAL
20800: IFTRUE 20804
20802: GO 20815
20804: POP
// bc_type := b_siberite_mine ; end ;
20805: LD_ADDR_OWVAR 42
20809: PUSH
20810: LD_INT 30
20812: ST_TO_ADDR
20813: GO 20816
20815: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
20816: LD_ADDR_VAR 0 8
20820: PUSH
20821: LD_VAR 0 5
20825: PPUSH
20826: LD_VAR 0 6
20830: PPUSH
20831: LD_VAR 0 3
20835: PPUSH
20836: CALL_OW 47
20840: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
20841: LD_OWVAR 42
20845: PUSH
20846: LD_INT 32
20848: PUSH
20849: LD_INT 33
20851: PUSH
20852: EMPTY
20853: LIST
20854: LIST
20855: IN
20856: IFFALSE 20872
// PlaceWeaponTurret ( b , weapon ) ;
20858: LD_VAR 0 8
20862: PPUSH
20863: LD_VAR 0 4
20867: PPUSH
20868: CALL_OW 431
// end ;
20872: LD_VAR 0 7
20876: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
20877: LD_INT 0
20879: PPUSH
20880: PPUSH
20881: PPUSH
20882: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20883: LD_ADDR_VAR 0 4
20887: PUSH
20888: LD_INT 22
20890: PUSH
20891: LD_OWVAR 2
20895: PUSH
20896: EMPTY
20897: LIST
20898: LIST
20899: PUSH
20900: LD_INT 2
20902: PUSH
20903: LD_INT 30
20905: PUSH
20906: LD_INT 0
20908: PUSH
20909: EMPTY
20910: LIST
20911: LIST
20912: PUSH
20913: LD_INT 30
20915: PUSH
20916: LD_INT 1
20918: PUSH
20919: EMPTY
20920: LIST
20921: LIST
20922: PUSH
20923: EMPTY
20924: LIST
20925: LIST
20926: LIST
20927: PUSH
20928: EMPTY
20929: LIST
20930: LIST
20931: PPUSH
20932: CALL_OW 69
20936: ST_TO_ADDR
// if not tmp then
20937: LD_VAR 0 4
20941: NOT
20942: IFFALSE 20946
// exit ;
20944: GO 21005
// for i in tmp do
20946: LD_ADDR_VAR 0 2
20950: PUSH
20951: LD_VAR 0 4
20955: PUSH
20956: FOR_IN
20957: IFFALSE 21003
// for j = 1 to 3 do
20959: LD_ADDR_VAR 0 3
20963: PUSH
20964: DOUBLE
20965: LD_INT 1
20967: DEC
20968: ST_TO_ADDR
20969: LD_INT 3
20971: PUSH
20972: FOR_TO
20973: IFFALSE 20999
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
20975: LD_VAR 0 2
20979: PPUSH
20980: CALL_OW 274
20984: PPUSH
20985: LD_VAR 0 3
20989: PPUSH
20990: LD_INT 99999
20992: PPUSH
20993: CALL_OW 277
20997: GO 20972
20999: POP
21000: POP
21001: GO 20956
21003: POP
21004: POP
// end ;
21005: LD_VAR 0 1
21009: RET
// export function hHackSetLevel10 ; var i , j ; begin
21010: LD_INT 0
21012: PPUSH
21013: PPUSH
21014: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
21015: LD_ADDR_VAR 0 2
21019: PUSH
21020: LD_INT 21
21022: PUSH
21023: LD_INT 1
21025: PUSH
21026: EMPTY
21027: LIST
21028: LIST
21029: PPUSH
21030: CALL_OW 69
21034: PUSH
21035: FOR_IN
21036: IFFALSE 21088
// if IsSelected ( i ) then
21038: LD_VAR 0 2
21042: PPUSH
21043: CALL_OW 306
21047: IFFALSE 21086
// begin for j := 1 to 4 do
21049: LD_ADDR_VAR 0 3
21053: PUSH
21054: DOUBLE
21055: LD_INT 1
21057: DEC
21058: ST_TO_ADDR
21059: LD_INT 4
21061: PUSH
21062: FOR_TO
21063: IFFALSE 21084
// SetSkill ( i , j , 10 ) ;
21065: LD_VAR 0 2
21069: PPUSH
21070: LD_VAR 0 3
21074: PPUSH
21075: LD_INT 10
21077: PPUSH
21078: CALL_OW 237
21082: GO 21062
21084: POP
21085: POP
// end ;
21086: GO 21035
21088: POP
21089: POP
// end ;
21090: LD_VAR 0 1
21094: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
21095: LD_INT 0
21097: PPUSH
21098: PPUSH
21099: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
21100: LD_ADDR_VAR 0 2
21104: PUSH
21105: LD_INT 22
21107: PUSH
21108: LD_OWVAR 2
21112: PUSH
21113: EMPTY
21114: LIST
21115: LIST
21116: PUSH
21117: LD_INT 21
21119: PUSH
21120: LD_INT 1
21122: PUSH
21123: EMPTY
21124: LIST
21125: LIST
21126: PUSH
21127: EMPTY
21128: LIST
21129: LIST
21130: PPUSH
21131: CALL_OW 69
21135: PUSH
21136: FOR_IN
21137: IFFALSE 21178
// begin for j := 1 to 4 do
21139: LD_ADDR_VAR 0 3
21143: PUSH
21144: DOUBLE
21145: LD_INT 1
21147: DEC
21148: ST_TO_ADDR
21149: LD_INT 4
21151: PUSH
21152: FOR_TO
21153: IFFALSE 21174
// SetSkill ( i , j , 10 ) ;
21155: LD_VAR 0 2
21159: PPUSH
21160: LD_VAR 0 3
21164: PPUSH
21165: LD_INT 10
21167: PPUSH
21168: CALL_OW 237
21172: GO 21152
21174: POP
21175: POP
// end ;
21176: GO 21136
21178: POP
21179: POP
// end ;
21180: LD_VAR 0 1
21184: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
21185: LD_INT 0
21187: PPUSH
// uc_side := your_side ;
21188: LD_ADDR_OWVAR 20
21192: PUSH
21193: LD_OWVAR 2
21197: ST_TO_ADDR
// uc_nation := nation ;
21198: LD_ADDR_OWVAR 21
21202: PUSH
21203: LD_VAR 0 1
21207: ST_TO_ADDR
// InitHc ;
21208: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
21212: LD_INT 0
21214: PPUSH
21215: LD_VAR 0 2
21219: PPUSH
21220: LD_VAR 0 3
21224: PPUSH
21225: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
21229: LD_VAR 0 4
21233: PPUSH
21234: LD_VAR 0 5
21238: PPUSH
21239: CALL_OW 428
21243: PUSH
21244: LD_INT 0
21246: EQUAL
21247: IFFALSE 21271
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
21249: CALL_OW 44
21253: PPUSH
21254: LD_VAR 0 4
21258: PPUSH
21259: LD_VAR 0 5
21263: PPUSH
21264: LD_INT 1
21266: PPUSH
21267: CALL_OW 48
// end ;
21271: LD_VAR 0 6
21275: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
21276: LD_INT 0
21278: PPUSH
21279: PPUSH
// uc_side := your_side ;
21280: LD_ADDR_OWVAR 20
21284: PUSH
21285: LD_OWVAR 2
21289: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
21290: LD_VAR 0 1
21294: PUSH
21295: LD_INT 1
21297: PUSH
21298: LD_INT 2
21300: PUSH
21301: LD_INT 3
21303: PUSH
21304: LD_INT 4
21306: PUSH
21307: LD_INT 5
21309: PUSH
21310: EMPTY
21311: LIST
21312: LIST
21313: LIST
21314: LIST
21315: LIST
21316: IN
21317: IFFALSE 21329
// uc_nation := nation_american else
21319: LD_ADDR_OWVAR 21
21323: PUSH
21324: LD_INT 1
21326: ST_TO_ADDR
21327: GO 21372
// if chassis in [ 11 , 12 , 13 , 14 ] then
21329: LD_VAR 0 1
21333: PUSH
21334: LD_INT 11
21336: PUSH
21337: LD_INT 12
21339: PUSH
21340: LD_INT 13
21342: PUSH
21343: LD_INT 14
21345: PUSH
21346: EMPTY
21347: LIST
21348: LIST
21349: LIST
21350: LIST
21351: IN
21352: IFFALSE 21364
// uc_nation := nation_arabian else
21354: LD_ADDR_OWVAR 21
21358: PUSH
21359: LD_INT 2
21361: ST_TO_ADDR
21362: GO 21372
// uc_nation := nation_russian ;
21364: LD_ADDR_OWVAR 21
21368: PUSH
21369: LD_INT 3
21371: ST_TO_ADDR
// vc_chassis := chassis ;
21372: LD_ADDR_OWVAR 37
21376: PUSH
21377: LD_VAR 0 1
21381: ST_TO_ADDR
// vc_engine := engine ;
21382: LD_ADDR_OWVAR 39
21386: PUSH
21387: LD_VAR 0 2
21391: ST_TO_ADDR
// vc_control := control ;
21392: LD_ADDR_OWVAR 38
21396: PUSH
21397: LD_VAR 0 3
21401: ST_TO_ADDR
// vc_weapon := weapon ;
21402: LD_ADDR_OWVAR 40
21406: PUSH
21407: LD_VAR 0 4
21411: ST_TO_ADDR
// un := CreateVehicle ;
21412: LD_ADDR_VAR 0 8
21416: PUSH
21417: CALL_OW 45
21421: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
21422: LD_VAR 0 8
21426: PPUSH
21427: LD_INT 0
21429: PPUSH
21430: LD_INT 5
21432: PPUSH
21433: CALL_OW 12
21437: PPUSH
21438: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
21442: LD_VAR 0 8
21446: PPUSH
21447: LD_VAR 0 5
21451: PPUSH
21452: LD_VAR 0 6
21456: PPUSH
21457: LD_INT 1
21459: PPUSH
21460: CALL_OW 48
// end ;
21464: LD_VAR 0 7
21468: RET
// export hInvincible ; every 1 do
21469: GO 21471
21471: DISABLE
// hInvincible := [ ] ;
21472: LD_ADDR_EXP 122
21476: PUSH
21477: EMPTY
21478: ST_TO_ADDR
21479: END
// every 10 do var i ;
21480: GO 21482
21482: DISABLE
21483: LD_INT 0
21485: PPUSH
// begin enable ;
21486: ENABLE
// if not hInvincible then
21487: LD_EXP 122
21491: NOT
21492: IFFALSE 21496
// exit ;
21494: GO 21540
// for i in hInvincible do
21496: LD_ADDR_VAR 0 1
21500: PUSH
21501: LD_EXP 122
21505: PUSH
21506: FOR_IN
21507: IFFALSE 21538
// if GetLives ( i ) < 1000 then
21509: LD_VAR 0 1
21513: PPUSH
21514: CALL_OW 256
21518: PUSH
21519: LD_INT 1000
21521: LESS
21522: IFFALSE 21536
// SetLives ( i , 1000 ) ;
21524: LD_VAR 0 1
21528: PPUSH
21529: LD_INT 1000
21531: PPUSH
21532: CALL_OW 234
21536: GO 21506
21538: POP
21539: POP
// end ;
21540: PPOPN 1
21542: END
// export function hHackInvincible ; var i ; begin
21543: LD_INT 0
21545: PPUSH
21546: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
21547: LD_ADDR_VAR 0 2
21551: PUSH
21552: LD_INT 2
21554: PUSH
21555: LD_INT 21
21557: PUSH
21558: LD_INT 1
21560: PUSH
21561: EMPTY
21562: LIST
21563: LIST
21564: PUSH
21565: LD_INT 21
21567: PUSH
21568: LD_INT 2
21570: PUSH
21571: EMPTY
21572: LIST
21573: LIST
21574: PUSH
21575: EMPTY
21576: LIST
21577: LIST
21578: LIST
21579: PPUSH
21580: CALL_OW 69
21584: PUSH
21585: FOR_IN
21586: IFFALSE 21647
// if IsSelected ( i ) then
21588: LD_VAR 0 2
21592: PPUSH
21593: CALL_OW 306
21597: IFFALSE 21645
// begin if i in hInvincible then
21599: LD_VAR 0 2
21603: PUSH
21604: LD_EXP 122
21608: IN
21609: IFFALSE 21629
// hInvincible := hInvincible diff i else
21611: LD_ADDR_EXP 122
21615: PUSH
21616: LD_EXP 122
21620: PUSH
21621: LD_VAR 0 2
21625: DIFF
21626: ST_TO_ADDR
21627: GO 21645
// hInvincible := hInvincible union i ;
21629: LD_ADDR_EXP 122
21633: PUSH
21634: LD_EXP 122
21638: PUSH
21639: LD_VAR 0 2
21643: UNION
21644: ST_TO_ADDR
// end ;
21645: GO 21585
21647: POP
21648: POP
// end ;
21649: LD_VAR 0 1
21653: RET
// export function hHackInvisible ; var i , j ; begin
21654: LD_INT 0
21656: PPUSH
21657: PPUSH
21658: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
21659: LD_ADDR_VAR 0 2
21663: PUSH
21664: LD_INT 21
21666: PUSH
21667: LD_INT 1
21669: PUSH
21670: EMPTY
21671: LIST
21672: LIST
21673: PPUSH
21674: CALL_OW 69
21678: PUSH
21679: FOR_IN
21680: IFFALSE 21704
// if IsSelected ( i ) then
21682: LD_VAR 0 2
21686: PPUSH
21687: CALL_OW 306
21691: IFFALSE 21702
// ComForceInvisible ( i ) ;
21693: LD_VAR 0 2
21697: PPUSH
21698: CALL_OW 496
21702: GO 21679
21704: POP
21705: POP
// end ;
21706: LD_VAR 0 1
21710: RET
// export function hHackChangeYourSide ; begin
21711: LD_INT 0
21713: PPUSH
// if your_side = 8 then
21714: LD_OWVAR 2
21718: PUSH
21719: LD_INT 8
21721: EQUAL
21722: IFFALSE 21734
// your_side := 0 else
21724: LD_ADDR_OWVAR 2
21728: PUSH
21729: LD_INT 0
21731: ST_TO_ADDR
21732: GO 21748
// your_side := your_side + 1 ;
21734: LD_ADDR_OWVAR 2
21738: PUSH
21739: LD_OWVAR 2
21743: PUSH
21744: LD_INT 1
21746: PLUS
21747: ST_TO_ADDR
// end ;
21748: LD_VAR 0 1
21752: RET
// export function hHackChangeUnitSide ; var i , j ; begin
21753: LD_INT 0
21755: PPUSH
21756: PPUSH
21757: PPUSH
// for i in all_units do
21758: LD_ADDR_VAR 0 2
21762: PUSH
21763: LD_OWVAR 3
21767: PUSH
21768: FOR_IN
21769: IFFALSE 21847
// if IsSelected ( i ) then
21771: LD_VAR 0 2
21775: PPUSH
21776: CALL_OW 306
21780: IFFALSE 21845
// begin j := GetSide ( i ) ;
21782: LD_ADDR_VAR 0 3
21786: PUSH
21787: LD_VAR 0 2
21791: PPUSH
21792: CALL_OW 255
21796: ST_TO_ADDR
// if j = 8 then
21797: LD_VAR 0 3
21801: PUSH
21802: LD_INT 8
21804: EQUAL
21805: IFFALSE 21817
// j := 0 else
21807: LD_ADDR_VAR 0 3
21811: PUSH
21812: LD_INT 0
21814: ST_TO_ADDR
21815: GO 21831
// j := j + 1 ;
21817: LD_ADDR_VAR 0 3
21821: PUSH
21822: LD_VAR 0 3
21826: PUSH
21827: LD_INT 1
21829: PLUS
21830: ST_TO_ADDR
// SetSide ( i , j ) ;
21831: LD_VAR 0 2
21835: PPUSH
21836: LD_VAR 0 3
21840: PPUSH
21841: CALL_OW 235
// end ;
21845: GO 21768
21847: POP
21848: POP
// end ;
21849: LD_VAR 0 1
21853: RET
// export function hHackFog ; begin
21854: LD_INT 0
21856: PPUSH
// FogOff ( true ) ;
21857: LD_INT 1
21859: PPUSH
21860: CALL_OW 344
// end ;
21864: LD_VAR 0 1
21868: RET
// export function hHackTeleport ( unit , x , y ) ; begin
21869: LD_INT 0
21871: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
21872: LD_VAR 0 1
21876: PPUSH
21877: LD_VAR 0 2
21881: PPUSH
21882: LD_VAR 0 3
21886: PPUSH
21887: LD_INT 1
21889: PPUSH
21890: LD_INT 1
21892: PPUSH
21893: CALL_OW 483
// CenterOnXY ( x , y ) ;
21897: LD_VAR 0 2
21901: PPUSH
21902: LD_VAR 0 3
21906: PPUSH
21907: CALL_OW 84
// end ; end_of_file
21911: LD_VAR 0 4
21915: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
21916: LD_INT 0
21918: PPUSH
21919: PPUSH
21920: PPUSH
21921: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
21922: LD_VAR 0 1
21926: PPUSH
21927: CALL_OW 264
21931: PUSH
21932: LD_EXP 56
21936: EQUAL
21937: IFFALSE 22009
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
21939: LD_INT 68
21941: PPUSH
21942: LD_VAR 0 1
21946: PPUSH
21947: CALL_OW 255
21951: PPUSH
21952: CALL_OW 321
21956: PUSH
21957: LD_INT 2
21959: EQUAL
21960: IFFALSE 21972
// eff := 70 else
21962: LD_ADDR_VAR 0 4
21966: PUSH
21967: LD_INT 70
21969: ST_TO_ADDR
21970: GO 21980
// eff := 30 ;
21972: LD_ADDR_VAR 0 4
21976: PUSH
21977: LD_INT 30
21979: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
21980: LD_VAR 0 1
21984: PPUSH
21985: CALL_OW 250
21989: PPUSH
21990: LD_VAR 0 1
21994: PPUSH
21995: CALL_OW 251
21999: PPUSH
22000: LD_VAR 0 4
22004: PPUSH
22005: CALL_OW 495
// end ; end ;
22009: LD_VAR 0 2
22013: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
22014: LD_INT 0
22016: PPUSH
// end ;
22017: LD_VAR 0 4
22021: RET
// export function SOS_Command ( cmd ) ; begin
22022: LD_INT 0
22024: PPUSH
// end ;
22025: LD_VAR 0 2
22029: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
22030: LD_INT 0
22032: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
22033: LD_VAR 0 1
22037: PUSH
22038: LD_INT 250
22040: EQUAL
22041: PUSH
22042: LD_VAR 0 2
22046: PPUSH
22047: CALL_OW 264
22051: PUSH
22052: LD_EXP 59
22056: EQUAL
22057: AND
22058: IFFALSE 22079
// MinerPlaceMine ( unit , x , y ) ;
22060: LD_VAR 0 2
22064: PPUSH
22065: LD_VAR 0 4
22069: PPUSH
22070: LD_VAR 0 5
22074: PPUSH
22075: CALL 24420 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
22079: LD_VAR 0 1
22083: PUSH
22084: LD_INT 251
22086: EQUAL
22087: PUSH
22088: LD_VAR 0 2
22092: PPUSH
22093: CALL_OW 264
22097: PUSH
22098: LD_EXP 59
22102: EQUAL
22103: AND
22104: IFFALSE 22125
// MinerDetonateMine ( unit , x , y ) ;
22106: LD_VAR 0 2
22110: PPUSH
22111: LD_VAR 0 4
22115: PPUSH
22116: LD_VAR 0 5
22120: PPUSH
22121: CALL 24697 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
22125: LD_VAR 0 1
22129: PUSH
22130: LD_INT 252
22132: EQUAL
22133: PUSH
22134: LD_VAR 0 2
22138: PPUSH
22139: CALL_OW 264
22143: PUSH
22144: LD_EXP 59
22148: EQUAL
22149: AND
22150: IFFALSE 22171
// MinerCreateMinefield ( unit , x , y ) ;
22152: LD_VAR 0 2
22156: PPUSH
22157: LD_VAR 0 4
22161: PPUSH
22162: LD_VAR 0 5
22166: PPUSH
22167: CALL 25114 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
22171: LD_VAR 0 1
22175: PUSH
22176: LD_INT 253
22178: EQUAL
22179: PUSH
22180: LD_VAR 0 2
22184: PPUSH
22185: CALL_OW 257
22189: PUSH
22190: LD_INT 5
22192: EQUAL
22193: AND
22194: IFFALSE 22215
// ComBinocular ( unit , x , y ) ;
22196: LD_VAR 0 2
22200: PPUSH
22201: LD_VAR 0 4
22205: PPUSH
22206: LD_VAR 0 5
22210: PPUSH
22211: CALL 25485 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
22215: LD_VAR 0 1
22219: PUSH
22220: LD_INT 254
22222: EQUAL
22223: PUSH
22224: LD_VAR 0 2
22228: PPUSH
22229: CALL_OW 264
22233: PUSH
22234: LD_EXP 54
22238: EQUAL
22239: AND
22240: PUSH
22241: LD_VAR 0 3
22245: PPUSH
22246: CALL_OW 263
22250: PUSH
22251: LD_INT 3
22253: EQUAL
22254: AND
22255: IFFALSE 22271
// HackDestroyVehicle ( unit , selectedUnit ) ;
22257: LD_VAR 0 2
22261: PPUSH
22262: LD_VAR 0 3
22266: PPUSH
22267: CALL 23780 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
22271: LD_VAR 0 1
22275: PUSH
22276: LD_INT 255
22278: EQUAL
22279: PUSH
22280: LD_VAR 0 2
22284: PPUSH
22285: CALL_OW 264
22289: PUSH
22290: LD_INT 14
22292: PUSH
22293: LD_INT 53
22295: PUSH
22296: EMPTY
22297: LIST
22298: LIST
22299: IN
22300: AND
22301: PUSH
22302: LD_VAR 0 4
22306: PPUSH
22307: LD_VAR 0 5
22311: PPUSH
22312: CALL_OW 488
22316: AND
22317: IFFALSE 22341
// CutTreeXYR ( unit , x , y , 12 ) ;
22319: LD_VAR 0 2
22323: PPUSH
22324: LD_VAR 0 4
22328: PPUSH
22329: LD_VAR 0 5
22333: PPUSH
22334: LD_INT 12
22336: PPUSH
22337: CALL 22346 0 4
// end ;
22341: LD_VAR 0 6
22345: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
22346: LD_INT 0
22348: PPUSH
22349: PPUSH
22350: PPUSH
22351: PPUSH
22352: PPUSH
22353: PPUSH
22354: PPUSH
22355: PPUSH
22356: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
22357: LD_VAR 0 1
22361: NOT
22362: PUSH
22363: LD_VAR 0 2
22367: PPUSH
22368: LD_VAR 0 3
22372: PPUSH
22373: CALL_OW 488
22377: NOT
22378: OR
22379: PUSH
22380: LD_VAR 0 4
22384: NOT
22385: OR
22386: IFFALSE 22390
// exit ;
22388: GO 22730
// list := [ ] ;
22390: LD_ADDR_VAR 0 13
22394: PUSH
22395: EMPTY
22396: ST_TO_ADDR
// if x - r < 0 then
22397: LD_VAR 0 2
22401: PUSH
22402: LD_VAR 0 4
22406: MINUS
22407: PUSH
22408: LD_INT 0
22410: LESS
22411: IFFALSE 22423
// min_x := 0 else
22413: LD_ADDR_VAR 0 7
22417: PUSH
22418: LD_INT 0
22420: ST_TO_ADDR
22421: GO 22439
// min_x := x - r ;
22423: LD_ADDR_VAR 0 7
22427: PUSH
22428: LD_VAR 0 2
22432: PUSH
22433: LD_VAR 0 4
22437: MINUS
22438: ST_TO_ADDR
// if y - r < 0 then
22439: LD_VAR 0 3
22443: PUSH
22444: LD_VAR 0 4
22448: MINUS
22449: PUSH
22450: LD_INT 0
22452: LESS
22453: IFFALSE 22465
// min_y := 0 else
22455: LD_ADDR_VAR 0 8
22459: PUSH
22460: LD_INT 0
22462: ST_TO_ADDR
22463: GO 22481
// min_y := y - r ;
22465: LD_ADDR_VAR 0 8
22469: PUSH
22470: LD_VAR 0 3
22474: PUSH
22475: LD_VAR 0 4
22479: MINUS
22480: ST_TO_ADDR
// max_x := x + r ;
22481: LD_ADDR_VAR 0 9
22485: PUSH
22486: LD_VAR 0 2
22490: PUSH
22491: LD_VAR 0 4
22495: PLUS
22496: ST_TO_ADDR
// max_y := y + r ;
22497: LD_ADDR_VAR 0 10
22501: PUSH
22502: LD_VAR 0 3
22506: PUSH
22507: LD_VAR 0 4
22511: PLUS
22512: ST_TO_ADDR
// for _x = min_x to max_x do
22513: LD_ADDR_VAR 0 11
22517: PUSH
22518: DOUBLE
22519: LD_VAR 0 7
22523: DEC
22524: ST_TO_ADDR
22525: LD_VAR 0 9
22529: PUSH
22530: FOR_TO
22531: IFFALSE 22648
// for _y = min_y to max_y do
22533: LD_ADDR_VAR 0 12
22537: PUSH
22538: DOUBLE
22539: LD_VAR 0 8
22543: DEC
22544: ST_TO_ADDR
22545: LD_VAR 0 10
22549: PUSH
22550: FOR_TO
22551: IFFALSE 22644
// begin if not ValidHex ( _x , _y ) then
22553: LD_VAR 0 11
22557: PPUSH
22558: LD_VAR 0 12
22562: PPUSH
22563: CALL_OW 488
22567: NOT
22568: IFFALSE 22572
// continue ;
22570: GO 22550
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
22572: LD_VAR 0 11
22576: PPUSH
22577: LD_VAR 0 12
22581: PPUSH
22582: CALL_OW 351
22586: PUSH
22587: LD_VAR 0 11
22591: PPUSH
22592: LD_VAR 0 12
22596: PPUSH
22597: CALL_OW 554
22601: AND
22602: IFFALSE 22642
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
22604: LD_ADDR_VAR 0 13
22608: PUSH
22609: LD_VAR 0 13
22613: PPUSH
22614: LD_VAR 0 13
22618: PUSH
22619: LD_INT 1
22621: PLUS
22622: PPUSH
22623: LD_VAR 0 11
22627: PUSH
22628: LD_VAR 0 12
22632: PUSH
22633: EMPTY
22634: LIST
22635: LIST
22636: PPUSH
22637: CALL_OW 2
22641: ST_TO_ADDR
// end ;
22642: GO 22550
22644: POP
22645: POP
22646: GO 22530
22648: POP
22649: POP
// if not list then
22650: LD_VAR 0 13
22654: NOT
22655: IFFALSE 22659
// exit ;
22657: GO 22730
// for i in list do
22659: LD_ADDR_VAR 0 6
22663: PUSH
22664: LD_VAR 0 13
22668: PUSH
22669: FOR_IN
22670: IFFALSE 22728
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
22672: LD_VAR 0 1
22676: PPUSH
22677: LD_STRING M
22679: PUSH
22680: LD_VAR 0 6
22684: PUSH
22685: LD_INT 1
22687: ARRAY
22688: PUSH
22689: LD_VAR 0 6
22693: PUSH
22694: LD_INT 2
22696: ARRAY
22697: PUSH
22698: LD_INT 0
22700: PUSH
22701: LD_INT 0
22703: PUSH
22704: LD_INT 0
22706: PUSH
22707: LD_INT 0
22709: PUSH
22710: EMPTY
22711: LIST
22712: LIST
22713: LIST
22714: LIST
22715: LIST
22716: LIST
22717: LIST
22718: PUSH
22719: EMPTY
22720: LIST
22721: PPUSH
22722: CALL_OW 447
22726: GO 22669
22728: POP
22729: POP
// end ;
22730: LD_VAR 0 5
22734: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
22735: LD_EXP 123
22739: NOT
22740: IFFALSE 22790
22742: GO 22744
22744: DISABLE
// begin initHack := true ;
22745: LD_ADDR_EXP 123
22749: PUSH
22750: LD_INT 1
22752: ST_TO_ADDR
// hackTanks := [ ] ;
22753: LD_ADDR_EXP 124
22757: PUSH
22758: EMPTY
22759: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
22760: LD_ADDR_EXP 125
22764: PUSH
22765: EMPTY
22766: ST_TO_ADDR
// hackLimit := 3 ;
22767: LD_ADDR_EXP 126
22771: PUSH
22772: LD_INT 3
22774: ST_TO_ADDR
// hackDist := 12 ;
22775: LD_ADDR_EXP 127
22779: PUSH
22780: LD_INT 12
22782: ST_TO_ADDR
// hackCounter := [ ] ;
22783: LD_ADDR_EXP 128
22787: PUSH
22788: EMPTY
22789: ST_TO_ADDR
// end ;
22790: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
22791: LD_EXP 123
22795: PUSH
22796: LD_INT 34
22798: PUSH
22799: LD_EXP 54
22803: PUSH
22804: EMPTY
22805: LIST
22806: LIST
22807: PPUSH
22808: CALL_OW 69
22812: AND
22813: IFFALSE 23068
22815: GO 22817
22817: DISABLE
22818: LD_INT 0
22820: PPUSH
22821: PPUSH
// begin enable ;
22822: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
22823: LD_ADDR_VAR 0 1
22827: PUSH
22828: LD_INT 34
22830: PUSH
22831: LD_EXP 54
22835: PUSH
22836: EMPTY
22837: LIST
22838: LIST
22839: PPUSH
22840: CALL_OW 69
22844: PUSH
22845: FOR_IN
22846: IFFALSE 23066
// begin if not i in hackTanks then
22848: LD_VAR 0 1
22852: PUSH
22853: LD_EXP 124
22857: IN
22858: NOT
22859: IFFALSE 22942
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
22861: LD_ADDR_EXP 124
22865: PUSH
22866: LD_EXP 124
22870: PPUSH
22871: LD_EXP 124
22875: PUSH
22876: LD_INT 1
22878: PLUS
22879: PPUSH
22880: LD_VAR 0 1
22884: PPUSH
22885: CALL_OW 1
22889: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
22890: LD_ADDR_EXP 125
22894: PUSH
22895: LD_EXP 125
22899: PPUSH
22900: LD_EXP 125
22904: PUSH
22905: LD_INT 1
22907: PLUS
22908: PPUSH
22909: EMPTY
22910: PPUSH
22911: CALL_OW 1
22915: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
22916: LD_ADDR_EXP 128
22920: PUSH
22921: LD_EXP 128
22925: PPUSH
22926: LD_EXP 128
22930: PUSH
22931: LD_INT 1
22933: PLUS
22934: PPUSH
22935: EMPTY
22936: PPUSH
22937: CALL_OW 1
22941: ST_TO_ADDR
// end ; if not IsOk ( i ) then
22942: LD_VAR 0 1
22946: PPUSH
22947: CALL_OW 302
22951: NOT
22952: IFFALSE 22965
// begin HackUnlinkAll ( i ) ;
22954: LD_VAR 0 1
22958: PPUSH
22959: CALL 23071 0 1
// continue ;
22963: GO 22845
// end ; HackCheckCapturedStatus ( i ) ;
22965: LD_VAR 0 1
22969: PPUSH
22970: CALL 23514 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
22974: LD_ADDR_VAR 0 2
22978: PUSH
22979: LD_INT 81
22981: PUSH
22982: LD_VAR 0 1
22986: PPUSH
22987: CALL_OW 255
22991: PUSH
22992: EMPTY
22993: LIST
22994: LIST
22995: PUSH
22996: LD_INT 33
22998: PUSH
22999: LD_INT 3
23001: PUSH
23002: EMPTY
23003: LIST
23004: LIST
23005: PUSH
23006: LD_INT 91
23008: PUSH
23009: LD_VAR 0 1
23013: PUSH
23014: LD_EXP 127
23018: PUSH
23019: EMPTY
23020: LIST
23021: LIST
23022: LIST
23023: PUSH
23024: LD_INT 50
23026: PUSH
23027: EMPTY
23028: LIST
23029: PUSH
23030: EMPTY
23031: LIST
23032: LIST
23033: LIST
23034: LIST
23035: PPUSH
23036: CALL_OW 69
23040: ST_TO_ADDR
// if not tmp then
23041: LD_VAR 0 2
23045: NOT
23046: IFFALSE 23050
// continue ;
23048: GO 22845
// HackLink ( i , tmp ) ;
23050: LD_VAR 0 1
23054: PPUSH
23055: LD_VAR 0 2
23059: PPUSH
23060: CALL 23207 0 2
// end ;
23064: GO 22845
23066: POP
23067: POP
// end ;
23068: PPOPN 2
23070: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
23071: LD_INT 0
23073: PPUSH
23074: PPUSH
23075: PPUSH
// if not hack in hackTanks then
23076: LD_VAR 0 1
23080: PUSH
23081: LD_EXP 124
23085: IN
23086: NOT
23087: IFFALSE 23091
// exit ;
23089: GO 23202
// index := GetElementIndex ( hackTanks , hack ) ;
23091: LD_ADDR_VAR 0 4
23095: PUSH
23096: LD_EXP 124
23100: PPUSH
23101: LD_VAR 0 1
23105: PPUSH
23106: CALL 30636 0 2
23110: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
23111: LD_EXP 125
23115: PUSH
23116: LD_VAR 0 4
23120: ARRAY
23121: IFFALSE 23202
// begin for i in hackTanksCaptured [ index ] do
23123: LD_ADDR_VAR 0 3
23127: PUSH
23128: LD_EXP 125
23132: PUSH
23133: LD_VAR 0 4
23137: ARRAY
23138: PUSH
23139: FOR_IN
23140: IFFALSE 23166
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
23142: LD_VAR 0 3
23146: PUSH
23147: LD_INT 1
23149: ARRAY
23150: PPUSH
23151: LD_VAR 0 3
23155: PUSH
23156: LD_INT 2
23158: ARRAY
23159: PPUSH
23160: CALL_OW 235
23164: GO 23139
23166: POP
23167: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
23168: LD_ADDR_EXP 125
23172: PUSH
23173: LD_EXP 125
23177: PPUSH
23178: LD_VAR 0 4
23182: PPUSH
23183: EMPTY
23184: PPUSH
23185: CALL_OW 1
23189: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
23190: LD_VAR 0 1
23194: PPUSH
23195: LD_INT 0
23197: PPUSH
23198: CALL_OW 505
// end ; end ;
23202: LD_VAR 0 2
23206: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
23207: LD_INT 0
23209: PPUSH
23210: PPUSH
23211: PPUSH
// if not hack in hackTanks or not vehicles then
23212: LD_VAR 0 1
23216: PUSH
23217: LD_EXP 124
23221: IN
23222: NOT
23223: PUSH
23224: LD_VAR 0 2
23228: NOT
23229: OR
23230: IFFALSE 23234
// exit ;
23232: GO 23509
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
23234: LD_ADDR_VAR 0 2
23238: PUSH
23239: LD_VAR 0 1
23243: PPUSH
23244: LD_VAR 0 2
23248: PPUSH
23249: LD_INT 1
23251: PPUSH
23252: LD_INT 1
23254: PPUSH
23255: CALL 31286 0 4
23259: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
23260: LD_ADDR_VAR 0 5
23264: PUSH
23265: LD_EXP 124
23269: PPUSH
23270: LD_VAR 0 1
23274: PPUSH
23275: CALL 30636 0 2
23279: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
23280: LD_EXP 125
23284: PUSH
23285: LD_VAR 0 5
23289: ARRAY
23290: PUSH
23291: LD_EXP 126
23295: LESS
23296: IFFALSE 23485
// begin for i := 1 to vehicles do
23298: LD_ADDR_VAR 0 4
23302: PUSH
23303: DOUBLE
23304: LD_INT 1
23306: DEC
23307: ST_TO_ADDR
23308: LD_VAR 0 2
23312: PUSH
23313: FOR_TO
23314: IFFALSE 23483
// begin if hackTanksCaptured [ index ] = hackLimit then
23316: LD_EXP 125
23320: PUSH
23321: LD_VAR 0 5
23325: ARRAY
23326: PUSH
23327: LD_EXP 126
23331: EQUAL
23332: IFFALSE 23336
// break ;
23334: GO 23483
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
23336: LD_ADDR_EXP 128
23340: PUSH
23341: LD_EXP 128
23345: PPUSH
23346: LD_VAR 0 5
23350: PPUSH
23351: LD_EXP 128
23355: PUSH
23356: LD_VAR 0 5
23360: ARRAY
23361: PUSH
23362: LD_INT 1
23364: PLUS
23365: PPUSH
23366: CALL_OW 1
23370: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
23371: LD_ADDR_EXP 125
23375: PUSH
23376: LD_EXP 125
23380: PPUSH
23381: LD_VAR 0 5
23385: PUSH
23386: LD_EXP 125
23390: PUSH
23391: LD_VAR 0 5
23395: ARRAY
23396: PUSH
23397: LD_INT 1
23399: PLUS
23400: PUSH
23401: EMPTY
23402: LIST
23403: LIST
23404: PPUSH
23405: LD_VAR 0 2
23409: PUSH
23410: LD_VAR 0 4
23414: ARRAY
23415: PUSH
23416: LD_VAR 0 2
23420: PUSH
23421: LD_VAR 0 4
23425: ARRAY
23426: PPUSH
23427: CALL_OW 255
23431: PUSH
23432: EMPTY
23433: LIST
23434: LIST
23435: PPUSH
23436: CALL 30851 0 3
23440: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
23441: LD_VAR 0 2
23445: PUSH
23446: LD_VAR 0 4
23450: ARRAY
23451: PPUSH
23452: LD_VAR 0 1
23456: PPUSH
23457: CALL_OW 255
23461: PPUSH
23462: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
23466: LD_VAR 0 2
23470: PUSH
23471: LD_VAR 0 4
23475: ARRAY
23476: PPUSH
23477: CALL_OW 141
// end ;
23481: GO 23313
23483: POP
23484: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
23485: LD_VAR 0 1
23489: PPUSH
23490: LD_EXP 125
23494: PUSH
23495: LD_VAR 0 5
23499: ARRAY
23500: PUSH
23501: LD_INT 0
23503: PLUS
23504: PPUSH
23505: CALL_OW 505
// end ;
23509: LD_VAR 0 3
23513: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
23514: LD_INT 0
23516: PPUSH
23517: PPUSH
23518: PPUSH
23519: PPUSH
// if not hack in hackTanks then
23520: LD_VAR 0 1
23524: PUSH
23525: LD_EXP 124
23529: IN
23530: NOT
23531: IFFALSE 23535
// exit ;
23533: GO 23775
// index := GetElementIndex ( hackTanks , hack ) ;
23535: LD_ADDR_VAR 0 4
23539: PUSH
23540: LD_EXP 124
23544: PPUSH
23545: LD_VAR 0 1
23549: PPUSH
23550: CALL 30636 0 2
23554: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
23555: LD_ADDR_VAR 0 3
23559: PUSH
23560: DOUBLE
23561: LD_EXP 125
23565: PUSH
23566: LD_VAR 0 4
23570: ARRAY
23571: INC
23572: ST_TO_ADDR
23573: LD_INT 1
23575: PUSH
23576: FOR_DOWNTO
23577: IFFALSE 23749
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
23579: LD_ADDR_VAR 0 5
23583: PUSH
23584: LD_EXP 125
23588: PUSH
23589: LD_VAR 0 4
23593: ARRAY
23594: PUSH
23595: LD_VAR 0 3
23599: ARRAY
23600: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
23601: LD_VAR 0 5
23605: PUSH
23606: LD_INT 1
23608: ARRAY
23609: PPUSH
23610: CALL_OW 302
23614: NOT
23615: PUSH
23616: LD_VAR 0 5
23620: PUSH
23621: LD_INT 1
23623: ARRAY
23624: PPUSH
23625: CALL_OW 255
23629: PUSH
23630: LD_VAR 0 1
23634: PPUSH
23635: CALL_OW 255
23639: NONEQUAL
23640: OR
23641: IFFALSE 23747
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
23643: LD_VAR 0 5
23647: PUSH
23648: LD_INT 1
23650: ARRAY
23651: PPUSH
23652: CALL_OW 305
23656: PUSH
23657: LD_VAR 0 5
23661: PUSH
23662: LD_INT 1
23664: ARRAY
23665: PPUSH
23666: CALL_OW 255
23670: PUSH
23671: LD_VAR 0 1
23675: PPUSH
23676: CALL_OW 255
23680: EQUAL
23681: AND
23682: IFFALSE 23706
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
23684: LD_VAR 0 5
23688: PUSH
23689: LD_INT 1
23691: ARRAY
23692: PPUSH
23693: LD_VAR 0 5
23697: PUSH
23698: LD_INT 2
23700: ARRAY
23701: PPUSH
23702: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
23706: LD_ADDR_EXP 125
23710: PUSH
23711: LD_EXP 125
23715: PPUSH
23716: LD_VAR 0 4
23720: PPUSH
23721: LD_EXP 125
23725: PUSH
23726: LD_VAR 0 4
23730: ARRAY
23731: PPUSH
23732: LD_VAR 0 3
23736: PPUSH
23737: CALL_OW 3
23741: PPUSH
23742: CALL_OW 1
23746: ST_TO_ADDR
// end ; end ;
23747: GO 23576
23749: POP
23750: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
23751: LD_VAR 0 1
23755: PPUSH
23756: LD_EXP 125
23760: PUSH
23761: LD_VAR 0 4
23765: ARRAY
23766: PUSH
23767: LD_INT 0
23769: PLUS
23770: PPUSH
23771: CALL_OW 505
// end ;
23775: LD_VAR 0 2
23779: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
23780: LD_INT 0
23782: PPUSH
23783: PPUSH
23784: PPUSH
23785: PPUSH
// if not hack in hackTanks then
23786: LD_VAR 0 1
23790: PUSH
23791: LD_EXP 124
23795: IN
23796: NOT
23797: IFFALSE 23801
// exit ;
23799: GO 23886
// index := GetElementIndex ( hackTanks , hack ) ;
23801: LD_ADDR_VAR 0 5
23805: PUSH
23806: LD_EXP 124
23810: PPUSH
23811: LD_VAR 0 1
23815: PPUSH
23816: CALL 30636 0 2
23820: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
23821: LD_ADDR_VAR 0 4
23825: PUSH
23826: DOUBLE
23827: LD_INT 1
23829: DEC
23830: ST_TO_ADDR
23831: LD_EXP 125
23835: PUSH
23836: LD_VAR 0 5
23840: ARRAY
23841: PUSH
23842: FOR_TO
23843: IFFALSE 23884
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
23845: LD_EXP 125
23849: PUSH
23850: LD_VAR 0 5
23854: ARRAY
23855: PUSH
23856: LD_VAR 0 4
23860: ARRAY
23861: PUSH
23862: LD_INT 1
23864: ARRAY
23865: PUSH
23866: LD_VAR 0 2
23870: EQUAL
23871: IFFALSE 23882
// KillUnit ( vehicle ) ;
23873: LD_VAR 0 2
23877: PPUSH
23878: CALL_OW 66
23882: GO 23842
23884: POP
23885: POP
// end ;
23886: LD_VAR 0 3
23890: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
23891: LD_EXP 129
23895: NOT
23896: IFFALSE 23931
23898: GO 23900
23900: DISABLE
// begin initMiner := true ;
23901: LD_ADDR_EXP 129
23905: PUSH
23906: LD_INT 1
23908: ST_TO_ADDR
// minersList := [ ] ;
23909: LD_ADDR_EXP 130
23913: PUSH
23914: EMPTY
23915: ST_TO_ADDR
// minerMinesList := [ ] ;
23916: LD_ADDR_EXP 131
23920: PUSH
23921: EMPTY
23922: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
23923: LD_ADDR_EXP 132
23927: PUSH
23928: LD_INT 5
23930: ST_TO_ADDR
// end ;
23931: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
23932: LD_EXP 129
23936: PUSH
23937: LD_INT 34
23939: PUSH
23940: LD_EXP 59
23944: PUSH
23945: EMPTY
23946: LIST
23947: LIST
23948: PPUSH
23949: CALL_OW 69
23953: AND
23954: IFFALSE 24417
23956: GO 23958
23958: DISABLE
23959: LD_INT 0
23961: PPUSH
23962: PPUSH
23963: PPUSH
23964: PPUSH
// begin enable ;
23965: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
23966: LD_ADDR_VAR 0 1
23970: PUSH
23971: LD_INT 34
23973: PUSH
23974: LD_EXP 59
23978: PUSH
23979: EMPTY
23980: LIST
23981: LIST
23982: PPUSH
23983: CALL_OW 69
23987: PUSH
23988: FOR_IN
23989: IFFALSE 24061
// begin if not i in minersList then
23991: LD_VAR 0 1
23995: PUSH
23996: LD_EXP 130
24000: IN
24001: NOT
24002: IFFALSE 24059
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
24004: LD_ADDR_EXP 130
24008: PUSH
24009: LD_EXP 130
24013: PPUSH
24014: LD_EXP 130
24018: PUSH
24019: LD_INT 1
24021: PLUS
24022: PPUSH
24023: LD_VAR 0 1
24027: PPUSH
24028: CALL_OW 1
24032: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
24033: LD_ADDR_EXP 131
24037: PUSH
24038: LD_EXP 131
24042: PPUSH
24043: LD_EXP 131
24047: PUSH
24048: LD_INT 1
24050: PLUS
24051: PPUSH
24052: EMPTY
24053: PPUSH
24054: CALL_OW 1
24058: ST_TO_ADDR
// end end ;
24059: GO 23988
24061: POP
24062: POP
// for i := minerMinesList downto 1 do
24063: LD_ADDR_VAR 0 1
24067: PUSH
24068: DOUBLE
24069: LD_EXP 131
24073: INC
24074: ST_TO_ADDR
24075: LD_INT 1
24077: PUSH
24078: FOR_DOWNTO
24079: IFFALSE 24415
// begin if IsLive ( minersList [ i ] ) then
24081: LD_EXP 130
24085: PUSH
24086: LD_VAR 0 1
24090: ARRAY
24091: PPUSH
24092: CALL_OW 300
24096: IFFALSE 24124
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
24098: LD_EXP 130
24102: PUSH
24103: LD_VAR 0 1
24107: ARRAY
24108: PPUSH
24109: LD_EXP 131
24113: PUSH
24114: LD_VAR 0 1
24118: ARRAY
24119: PPUSH
24120: CALL_OW 505
// if not minerMinesList [ i ] then
24124: LD_EXP 131
24128: PUSH
24129: LD_VAR 0 1
24133: ARRAY
24134: NOT
24135: IFFALSE 24139
// continue ;
24137: GO 24078
// for j := minerMinesList [ i ] downto 1 do
24139: LD_ADDR_VAR 0 2
24143: PUSH
24144: DOUBLE
24145: LD_EXP 131
24149: PUSH
24150: LD_VAR 0 1
24154: ARRAY
24155: INC
24156: ST_TO_ADDR
24157: LD_INT 1
24159: PUSH
24160: FOR_DOWNTO
24161: IFFALSE 24411
// begin side := GetSide ( minersList [ i ] ) ;
24163: LD_ADDR_VAR 0 3
24167: PUSH
24168: LD_EXP 130
24172: PUSH
24173: LD_VAR 0 1
24177: ARRAY
24178: PPUSH
24179: CALL_OW 255
24183: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
24184: LD_ADDR_VAR 0 4
24188: PUSH
24189: LD_EXP 131
24193: PUSH
24194: LD_VAR 0 1
24198: ARRAY
24199: PUSH
24200: LD_VAR 0 2
24204: ARRAY
24205: PUSH
24206: LD_INT 1
24208: ARRAY
24209: PPUSH
24210: LD_EXP 131
24214: PUSH
24215: LD_VAR 0 1
24219: ARRAY
24220: PUSH
24221: LD_VAR 0 2
24225: ARRAY
24226: PUSH
24227: LD_INT 2
24229: ARRAY
24230: PPUSH
24231: CALL_OW 428
24235: ST_TO_ADDR
// if not tmp then
24236: LD_VAR 0 4
24240: NOT
24241: IFFALSE 24245
// continue ;
24243: GO 24160
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
24245: LD_VAR 0 4
24249: PUSH
24250: LD_INT 81
24252: PUSH
24253: LD_VAR 0 3
24257: PUSH
24258: EMPTY
24259: LIST
24260: LIST
24261: PPUSH
24262: CALL_OW 69
24266: IN
24267: PUSH
24268: LD_EXP 131
24272: PUSH
24273: LD_VAR 0 1
24277: ARRAY
24278: PUSH
24279: LD_VAR 0 2
24283: ARRAY
24284: PUSH
24285: LD_INT 1
24287: ARRAY
24288: PPUSH
24289: LD_EXP 131
24293: PUSH
24294: LD_VAR 0 1
24298: ARRAY
24299: PUSH
24300: LD_VAR 0 2
24304: ARRAY
24305: PUSH
24306: LD_INT 2
24308: ARRAY
24309: PPUSH
24310: CALL_OW 458
24314: AND
24315: IFFALSE 24409
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
24317: LD_EXP 131
24321: PUSH
24322: LD_VAR 0 1
24326: ARRAY
24327: PUSH
24328: LD_VAR 0 2
24332: ARRAY
24333: PUSH
24334: LD_INT 1
24336: ARRAY
24337: PPUSH
24338: LD_EXP 131
24342: PUSH
24343: LD_VAR 0 1
24347: ARRAY
24348: PUSH
24349: LD_VAR 0 2
24353: ARRAY
24354: PUSH
24355: LD_INT 2
24357: ARRAY
24358: PPUSH
24359: LD_VAR 0 3
24363: PPUSH
24364: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
24368: LD_ADDR_EXP 131
24372: PUSH
24373: LD_EXP 131
24377: PPUSH
24378: LD_VAR 0 1
24382: PPUSH
24383: LD_EXP 131
24387: PUSH
24388: LD_VAR 0 1
24392: ARRAY
24393: PPUSH
24394: LD_VAR 0 2
24398: PPUSH
24399: CALL_OW 3
24403: PPUSH
24404: CALL_OW 1
24408: ST_TO_ADDR
// end ; end ;
24409: GO 24160
24411: POP
24412: POP
// end ;
24413: GO 24078
24415: POP
24416: POP
// end ;
24417: PPOPN 4
24419: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
24420: LD_INT 0
24422: PPUSH
24423: PPUSH
// result := false ;
24424: LD_ADDR_VAR 0 4
24428: PUSH
24429: LD_INT 0
24431: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
24432: LD_VAR 0 1
24436: PPUSH
24437: CALL_OW 264
24441: PUSH
24442: LD_EXP 59
24446: EQUAL
24447: NOT
24448: IFFALSE 24452
// exit ;
24450: GO 24692
// index := GetElementIndex ( minersList , unit ) ;
24452: LD_ADDR_VAR 0 5
24456: PUSH
24457: LD_EXP 130
24461: PPUSH
24462: LD_VAR 0 1
24466: PPUSH
24467: CALL 30636 0 2
24471: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
24472: LD_EXP 131
24476: PUSH
24477: LD_VAR 0 5
24481: ARRAY
24482: PUSH
24483: LD_EXP 132
24487: GREATEREQUAL
24488: IFFALSE 24492
// exit ;
24490: GO 24692
// ComMoveXY ( unit , x , y ) ;
24492: LD_VAR 0 1
24496: PPUSH
24497: LD_VAR 0 2
24501: PPUSH
24502: LD_VAR 0 3
24506: PPUSH
24507: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
24511: LD_INT 35
24513: PPUSH
24514: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
24518: LD_VAR 0 1
24522: PPUSH
24523: LD_VAR 0 2
24527: PPUSH
24528: LD_VAR 0 3
24532: PPUSH
24533: CALL 60700 0 3
24537: NOT
24538: PUSH
24539: LD_VAR 0 1
24543: PPUSH
24544: CALL_OW 314
24548: AND
24549: IFFALSE 24553
// exit ;
24551: GO 24692
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
24553: LD_VAR 0 2
24557: PPUSH
24558: LD_VAR 0 3
24562: PPUSH
24563: CALL_OW 428
24567: PUSH
24568: LD_VAR 0 1
24572: EQUAL
24573: PUSH
24574: LD_VAR 0 1
24578: PPUSH
24579: CALL_OW 314
24583: NOT
24584: AND
24585: IFFALSE 24511
// PlaySoundXY ( x , y , PlantMine ) ;
24587: LD_VAR 0 2
24591: PPUSH
24592: LD_VAR 0 3
24596: PPUSH
24597: LD_STRING PlantMine
24599: PPUSH
24600: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
24604: LD_VAR 0 2
24608: PPUSH
24609: LD_VAR 0 3
24613: PPUSH
24614: LD_VAR 0 1
24618: PPUSH
24619: CALL_OW 255
24623: PPUSH
24624: LD_INT 0
24626: PPUSH
24627: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
24631: LD_ADDR_EXP 131
24635: PUSH
24636: LD_EXP 131
24640: PPUSH
24641: LD_VAR 0 5
24645: PUSH
24646: LD_EXP 131
24650: PUSH
24651: LD_VAR 0 5
24655: ARRAY
24656: PUSH
24657: LD_INT 1
24659: PLUS
24660: PUSH
24661: EMPTY
24662: LIST
24663: LIST
24664: PPUSH
24665: LD_VAR 0 2
24669: PUSH
24670: LD_VAR 0 3
24674: PUSH
24675: EMPTY
24676: LIST
24677: LIST
24678: PPUSH
24679: CALL 30851 0 3
24683: ST_TO_ADDR
// result := true ;
24684: LD_ADDR_VAR 0 4
24688: PUSH
24689: LD_INT 1
24691: ST_TO_ADDR
// end ;
24692: LD_VAR 0 4
24696: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
24697: LD_INT 0
24699: PPUSH
24700: PPUSH
24701: PPUSH
// if not unit in minersList then
24702: LD_VAR 0 1
24706: PUSH
24707: LD_EXP 130
24711: IN
24712: NOT
24713: IFFALSE 24717
// exit ;
24715: GO 25109
// index := GetElementIndex ( minersList , unit ) ;
24717: LD_ADDR_VAR 0 6
24721: PUSH
24722: LD_EXP 130
24726: PPUSH
24727: LD_VAR 0 1
24731: PPUSH
24732: CALL 30636 0 2
24736: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
24737: LD_ADDR_VAR 0 5
24741: PUSH
24742: DOUBLE
24743: LD_EXP 131
24747: PUSH
24748: LD_VAR 0 6
24752: ARRAY
24753: INC
24754: ST_TO_ADDR
24755: LD_INT 1
24757: PUSH
24758: FOR_DOWNTO
24759: IFFALSE 24920
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
24761: LD_EXP 131
24765: PUSH
24766: LD_VAR 0 6
24770: ARRAY
24771: PUSH
24772: LD_VAR 0 5
24776: ARRAY
24777: PUSH
24778: LD_INT 1
24780: ARRAY
24781: PUSH
24782: LD_VAR 0 2
24786: EQUAL
24787: PUSH
24788: LD_EXP 131
24792: PUSH
24793: LD_VAR 0 6
24797: ARRAY
24798: PUSH
24799: LD_VAR 0 5
24803: ARRAY
24804: PUSH
24805: LD_INT 2
24807: ARRAY
24808: PUSH
24809: LD_VAR 0 3
24813: EQUAL
24814: AND
24815: IFFALSE 24918
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
24817: LD_EXP 131
24821: PUSH
24822: LD_VAR 0 6
24826: ARRAY
24827: PUSH
24828: LD_VAR 0 5
24832: ARRAY
24833: PUSH
24834: LD_INT 1
24836: ARRAY
24837: PPUSH
24838: LD_EXP 131
24842: PUSH
24843: LD_VAR 0 6
24847: ARRAY
24848: PUSH
24849: LD_VAR 0 5
24853: ARRAY
24854: PUSH
24855: LD_INT 2
24857: ARRAY
24858: PPUSH
24859: LD_VAR 0 1
24863: PPUSH
24864: CALL_OW 255
24868: PPUSH
24869: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
24873: LD_ADDR_EXP 131
24877: PUSH
24878: LD_EXP 131
24882: PPUSH
24883: LD_VAR 0 6
24887: PPUSH
24888: LD_EXP 131
24892: PUSH
24893: LD_VAR 0 6
24897: ARRAY
24898: PPUSH
24899: LD_VAR 0 5
24903: PPUSH
24904: CALL_OW 3
24908: PPUSH
24909: CALL_OW 1
24913: ST_TO_ADDR
// exit ;
24914: POP
24915: POP
24916: GO 25109
// end ; end ;
24918: GO 24758
24920: POP
24921: POP
// for i := minerMinesList [ index ] downto 1 do
24922: LD_ADDR_VAR 0 5
24926: PUSH
24927: DOUBLE
24928: LD_EXP 131
24932: PUSH
24933: LD_VAR 0 6
24937: ARRAY
24938: INC
24939: ST_TO_ADDR
24940: LD_INT 1
24942: PUSH
24943: FOR_DOWNTO
24944: IFFALSE 25107
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
24946: LD_EXP 131
24950: PUSH
24951: LD_VAR 0 6
24955: ARRAY
24956: PUSH
24957: LD_VAR 0 5
24961: ARRAY
24962: PUSH
24963: LD_INT 1
24965: ARRAY
24966: PPUSH
24967: LD_EXP 131
24971: PUSH
24972: LD_VAR 0 6
24976: ARRAY
24977: PUSH
24978: LD_VAR 0 5
24982: ARRAY
24983: PUSH
24984: LD_INT 2
24986: ARRAY
24987: PPUSH
24988: LD_VAR 0 2
24992: PPUSH
24993: LD_VAR 0 3
24997: PPUSH
24998: CALL_OW 298
25002: PUSH
25003: LD_INT 6
25005: LESS
25006: IFFALSE 25105
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
25008: LD_EXP 131
25012: PUSH
25013: LD_VAR 0 6
25017: ARRAY
25018: PUSH
25019: LD_VAR 0 5
25023: ARRAY
25024: PUSH
25025: LD_INT 1
25027: ARRAY
25028: PPUSH
25029: LD_EXP 131
25033: PUSH
25034: LD_VAR 0 6
25038: ARRAY
25039: PUSH
25040: LD_VAR 0 5
25044: ARRAY
25045: PUSH
25046: LD_INT 2
25048: ARRAY
25049: PPUSH
25050: LD_VAR 0 1
25054: PPUSH
25055: CALL_OW 255
25059: PPUSH
25060: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
25064: LD_ADDR_EXP 131
25068: PUSH
25069: LD_EXP 131
25073: PPUSH
25074: LD_VAR 0 6
25078: PPUSH
25079: LD_EXP 131
25083: PUSH
25084: LD_VAR 0 6
25088: ARRAY
25089: PPUSH
25090: LD_VAR 0 5
25094: PPUSH
25095: CALL_OW 3
25099: PPUSH
25100: CALL_OW 1
25104: ST_TO_ADDR
// end ; end ;
25105: GO 24943
25107: POP
25108: POP
// end ;
25109: LD_VAR 0 4
25113: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
25114: LD_INT 0
25116: PPUSH
25117: PPUSH
25118: PPUSH
25119: PPUSH
25120: PPUSH
25121: PPUSH
25122: PPUSH
25123: PPUSH
25124: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
25125: LD_VAR 0 1
25129: PPUSH
25130: CALL_OW 264
25134: PUSH
25135: LD_EXP 59
25139: EQUAL
25140: NOT
25141: PUSH
25142: LD_VAR 0 1
25146: PUSH
25147: LD_EXP 130
25151: IN
25152: NOT
25153: OR
25154: IFFALSE 25158
// exit ;
25156: GO 25480
// index := GetElementIndex ( minersList , unit ) ;
25158: LD_ADDR_VAR 0 6
25162: PUSH
25163: LD_EXP 130
25167: PPUSH
25168: LD_VAR 0 1
25172: PPUSH
25173: CALL 30636 0 2
25177: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
25178: LD_ADDR_VAR 0 8
25182: PUSH
25183: LD_EXP 132
25187: PUSH
25188: LD_EXP 131
25192: PUSH
25193: LD_VAR 0 6
25197: ARRAY
25198: MINUS
25199: ST_TO_ADDR
// if not minesFreeAmount then
25200: LD_VAR 0 8
25204: NOT
25205: IFFALSE 25209
// exit ;
25207: GO 25480
// tmp := [ ] ;
25209: LD_ADDR_VAR 0 7
25213: PUSH
25214: EMPTY
25215: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
25216: LD_ADDR_VAR 0 5
25220: PUSH
25221: DOUBLE
25222: LD_INT 1
25224: DEC
25225: ST_TO_ADDR
25226: LD_VAR 0 8
25230: PUSH
25231: FOR_TO
25232: IFFALSE 25427
// begin _d := rand ( 0 , 5 ) ;
25234: LD_ADDR_VAR 0 11
25238: PUSH
25239: LD_INT 0
25241: PPUSH
25242: LD_INT 5
25244: PPUSH
25245: CALL_OW 12
25249: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
25250: LD_ADDR_VAR 0 12
25254: PUSH
25255: LD_INT 2
25257: PPUSH
25258: LD_INT 6
25260: PPUSH
25261: CALL_OW 12
25265: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
25266: LD_ADDR_VAR 0 9
25270: PUSH
25271: LD_VAR 0 2
25275: PPUSH
25276: LD_VAR 0 11
25280: PPUSH
25281: LD_VAR 0 12
25285: PPUSH
25286: CALL_OW 272
25290: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
25291: LD_ADDR_VAR 0 10
25295: PUSH
25296: LD_VAR 0 3
25300: PPUSH
25301: LD_VAR 0 11
25305: PPUSH
25306: LD_VAR 0 12
25310: PPUSH
25311: CALL_OW 273
25315: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
25316: LD_VAR 0 9
25320: PPUSH
25321: LD_VAR 0 10
25325: PPUSH
25326: CALL_OW 488
25330: PUSH
25331: LD_VAR 0 9
25335: PUSH
25336: LD_VAR 0 10
25340: PUSH
25341: EMPTY
25342: LIST
25343: LIST
25344: PUSH
25345: LD_VAR 0 7
25349: IN
25350: NOT
25351: AND
25352: PUSH
25353: LD_VAR 0 9
25357: PPUSH
25358: LD_VAR 0 10
25362: PPUSH
25363: CALL_OW 458
25367: NOT
25368: AND
25369: IFFALSE 25411
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
25371: LD_ADDR_VAR 0 7
25375: PUSH
25376: LD_VAR 0 7
25380: PPUSH
25381: LD_VAR 0 7
25385: PUSH
25386: LD_INT 1
25388: PLUS
25389: PPUSH
25390: LD_VAR 0 9
25394: PUSH
25395: LD_VAR 0 10
25399: PUSH
25400: EMPTY
25401: LIST
25402: LIST
25403: PPUSH
25404: CALL_OW 1
25408: ST_TO_ADDR
25409: GO 25425
// i := i - 1 ;
25411: LD_ADDR_VAR 0 5
25415: PUSH
25416: LD_VAR 0 5
25420: PUSH
25421: LD_INT 1
25423: MINUS
25424: ST_TO_ADDR
// end ;
25425: GO 25231
25427: POP
25428: POP
// for i in tmp do
25429: LD_ADDR_VAR 0 5
25433: PUSH
25434: LD_VAR 0 7
25438: PUSH
25439: FOR_IN
25440: IFFALSE 25478
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
25442: LD_VAR 0 1
25446: PPUSH
25447: LD_VAR 0 5
25451: PUSH
25452: LD_INT 1
25454: ARRAY
25455: PPUSH
25456: LD_VAR 0 5
25460: PUSH
25461: LD_INT 2
25463: ARRAY
25464: PPUSH
25465: CALL 24420 0 3
25469: NOT
25470: IFFALSE 25476
// exit ;
25472: POP
25473: POP
25474: GO 25480
25476: GO 25439
25478: POP
25479: POP
// end ;
25480: LD_VAR 0 4
25484: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
25485: LD_INT 0
25487: PPUSH
25488: PPUSH
25489: PPUSH
25490: PPUSH
25491: PPUSH
25492: PPUSH
25493: PPUSH
// if not GetClass ( unit ) = class_sniper then
25494: LD_VAR 0 1
25498: PPUSH
25499: CALL_OW 257
25503: PUSH
25504: LD_INT 5
25506: EQUAL
25507: NOT
25508: IFFALSE 25512
// exit ;
25510: GO 25900
// dist := 8 ;
25512: LD_ADDR_VAR 0 5
25516: PUSH
25517: LD_INT 8
25519: ST_TO_ADDR
// viewRange := 12 ;
25520: LD_ADDR_VAR 0 7
25524: PUSH
25525: LD_INT 12
25527: ST_TO_ADDR
// side := GetSide ( unit ) ;
25528: LD_ADDR_VAR 0 6
25532: PUSH
25533: LD_VAR 0 1
25537: PPUSH
25538: CALL_OW 255
25542: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
25543: LD_INT 61
25545: PPUSH
25546: LD_VAR 0 6
25550: PPUSH
25551: CALL_OW 321
25555: PUSH
25556: LD_INT 2
25558: EQUAL
25559: IFFALSE 25569
// viewRange := 16 ;
25561: LD_ADDR_VAR 0 7
25565: PUSH
25566: LD_INT 16
25568: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
25569: LD_VAR 0 1
25573: PPUSH
25574: LD_VAR 0 2
25578: PPUSH
25579: LD_VAR 0 3
25583: PPUSH
25584: CALL_OW 297
25588: PUSH
25589: LD_VAR 0 5
25593: GREATER
25594: IFFALSE 25673
// begin ComMoveXY ( unit , x , y ) ;
25596: LD_VAR 0 1
25600: PPUSH
25601: LD_VAR 0 2
25605: PPUSH
25606: LD_VAR 0 3
25610: PPUSH
25611: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
25615: LD_INT 35
25617: PPUSH
25618: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
25622: LD_VAR 0 1
25626: PPUSH
25627: LD_VAR 0 2
25631: PPUSH
25632: LD_VAR 0 3
25636: PPUSH
25637: CALL 60700 0 3
25641: NOT
25642: IFFALSE 25646
// exit ;
25644: GO 25900
// until GetDistUnitXY ( unit , x , y ) < dist ;
25646: LD_VAR 0 1
25650: PPUSH
25651: LD_VAR 0 2
25655: PPUSH
25656: LD_VAR 0 3
25660: PPUSH
25661: CALL_OW 297
25665: PUSH
25666: LD_VAR 0 5
25670: LESS
25671: IFFALSE 25615
// end ; ComTurnXY ( unit , x , y ) ;
25673: LD_VAR 0 1
25677: PPUSH
25678: LD_VAR 0 2
25682: PPUSH
25683: LD_VAR 0 3
25687: PPUSH
25688: CALL_OW 118
// wait ( 5 ) ;
25692: LD_INT 5
25694: PPUSH
25695: CALL_OW 67
// _d := GetDir ( unit ) ;
25699: LD_ADDR_VAR 0 10
25703: PUSH
25704: LD_VAR 0 1
25708: PPUSH
25709: CALL_OW 254
25713: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
25714: LD_ADDR_VAR 0 8
25718: PUSH
25719: LD_VAR 0 1
25723: PPUSH
25724: CALL_OW 250
25728: PPUSH
25729: LD_VAR 0 10
25733: PPUSH
25734: LD_VAR 0 5
25738: PPUSH
25739: CALL_OW 272
25743: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
25744: LD_ADDR_VAR 0 9
25748: PUSH
25749: LD_VAR 0 1
25753: PPUSH
25754: CALL_OW 251
25758: PPUSH
25759: LD_VAR 0 10
25763: PPUSH
25764: LD_VAR 0 5
25768: PPUSH
25769: CALL_OW 273
25773: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
25774: LD_VAR 0 8
25778: PPUSH
25779: LD_VAR 0 9
25783: PPUSH
25784: CALL_OW 488
25788: NOT
25789: IFFALSE 25793
// exit ;
25791: GO 25900
// ComAnimCustom ( unit , 1 ) ;
25793: LD_VAR 0 1
25797: PPUSH
25798: LD_INT 1
25800: PPUSH
25801: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
25805: LD_VAR 0 8
25809: PPUSH
25810: LD_VAR 0 9
25814: PPUSH
25815: LD_VAR 0 6
25819: PPUSH
25820: LD_VAR 0 7
25824: PPUSH
25825: CALL_OW 330
// repeat wait ( 1 ) ;
25829: LD_INT 1
25831: PPUSH
25832: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
25836: LD_VAR 0 1
25840: PPUSH
25841: CALL_OW 316
25845: PUSH
25846: LD_VAR 0 1
25850: PPUSH
25851: CALL_OW 314
25855: OR
25856: PUSH
25857: LD_VAR 0 1
25861: PPUSH
25862: CALL_OW 302
25866: NOT
25867: OR
25868: PUSH
25869: LD_VAR 0 1
25873: PPUSH
25874: CALL_OW 301
25878: OR
25879: IFFALSE 25829
// RemoveSeeing ( _x , _y , side ) ;
25881: LD_VAR 0 8
25885: PPUSH
25886: LD_VAR 0 9
25890: PPUSH
25891: LD_VAR 0 6
25895: PPUSH
25896: CALL_OW 331
// end ; end_of_file
25900: LD_VAR 0 4
25904: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
25905: LD_INT 0
25907: PPUSH
25908: PPUSH
// if exist_mode then
25909: LD_VAR 0 2
25913: IFFALSE 25938
// unit := CreateCharacter ( prefix & ident ) else
25915: LD_ADDR_VAR 0 5
25919: PUSH
25920: LD_VAR 0 3
25924: PUSH
25925: LD_VAR 0 1
25929: STR
25930: PPUSH
25931: CALL_OW 34
25935: ST_TO_ADDR
25936: GO 25953
// unit := NewCharacter ( ident ) ;
25938: LD_ADDR_VAR 0 5
25942: PUSH
25943: LD_VAR 0 1
25947: PPUSH
25948: CALL_OW 25
25952: ST_TO_ADDR
// result := unit ;
25953: LD_ADDR_VAR 0 4
25957: PUSH
25958: LD_VAR 0 5
25962: ST_TO_ADDR
// end ;
25963: LD_VAR 0 4
25967: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
25968: LD_INT 0
25970: PPUSH
25971: PPUSH
// if not side or not nation then
25972: LD_VAR 0 1
25976: NOT
25977: PUSH
25978: LD_VAR 0 2
25982: NOT
25983: OR
25984: IFFALSE 25988
// exit ;
25986: GO 26752
// case nation of nation_american :
25988: LD_VAR 0 2
25992: PUSH
25993: LD_INT 1
25995: DOUBLE
25996: EQUAL
25997: IFTRUE 26001
25999: GO 26215
26001: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
26002: LD_ADDR_VAR 0 4
26006: PUSH
26007: LD_INT 35
26009: PUSH
26010: LD_INT 45
26012: PUSH
26013: LD_INT 46
26015: PUSH
26016: LD_INT 47
26018: PUSH
26019: LD_INT 82
26021: PUSH
26022: LD_INT 83
26024: PUSH
26025: LD_INT 84
26027: PUSH
26028: LD_INT 85
26030: PUSH
26031: LD_INT 86
26033: PUSH
26034: LD_INT 1
26036: PUSH
26037: LD_INT 2
26039: PUSH
26040: LD_INT 6
26042: PUSH
26043: LD_INT 15
26045: PUSH
26046: LD_INT 16
26048: PUSH
26049: LD_INT 7
26051: PUSH
26052: LD_INT 12
26054: PUSH
26055: LD_INT 13
26057: PUSH
26058: LD_INT 10
26060: PUSH
26061: LD_INT 14
26063: PUSH
26064: LD_INT 20
26066: PUSH
26067: LD_INT 21
26069: PUSH
26070: LD_INT 22
26072: PUSH
26073: LD_INT 25
26075: PUSH
26076: LD_INT 32
26078: PUSH
26079: LD_INT 27
26081: PUSH
26082: LD_INT 36
26084: PUSH
26085: LD_INT 69
26087: PUSH
26088: LD_INT 39
26090: PUSH
26091: LD_INT 34
26093: PUSH
26094: LD_INT 40
26096: PUSH
26097: LD_INT 48
26099: PUSH
26100: LD_INT 49
26102: PUSH
26103: LD_INT 50
26105: PUSH
26106: LD_INT 51
26108: PUSH
26109: LD_INT 52
26111: PUSH
26112: LD_INT 53
26114: PUSH
26115: LD_INT 54
26117: PUSH
26118: LD_INT 55
26120: PUSH
26121: LD_INT 56
26123: PUSH
26124: LD_INT 57
26126: PUSH
26127: LD_INT 58
26129: PUSH
26130: LD_INT 59
26132: PUSH
26133: LD_INT 60
26135: PUSH
26136: LD_INT 61
26138: PUSH
26139: LD_INT 62
26141: PUSH
26142: LD_INT 80
26144: PUSH
26145: LD_INT 82
26147: PUSH
26148: LD_INT 83
26150: PUSH
26151: LD_INT 84
26153: PUSH
26154: LD_INT 85
26156: PUSH
26157: LD_INT 86
26159: PUSH
26160: EMPTY
26161: LIST
26162: LIST
26163: LIST
26164: LIST
26165: LIST
26166: LIST
26167: LIST
26168: LIST
26169: LIST
26170: LIST
26171: LIST
26172: LIST
26173: LIST
26174: LIST
26175: LIST
26176: LIST
26177: LIST
26178: LIST
26179: LIST
26180: LIST
26181: LIST
26182: LIST
26183: LIST
26184: LIST
26185: LIST
26186: LIST
26187: LIST
26188: LIST
26189: LIST
26190: LIST
26191: LIST
26192: LIST
26193: LIST
26194: LIST
26195: LIST
26196: LIST
26197: LIST
26198: LIST
26199: LIST
26200: LIST
26201: LIST
26202: LIST
26203: LIST
26204: LIST
26205: LIST
26206: LIST
26207: LIST
26208: LIST
26209: LIST
26210: LIST
26211: LIST
26212: ST_TO_ADDR
26213: GO 26676
26215: LD_INT 2
26217: DOUBLE
26218: EQUAL
26219: IFTRUE 26223
26221: GO 26445
26223: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
26224: LD_ADDR_VAR 0 4
26228: PUSH
26229: LD_INT 35
26231: PUSH
26232: LD_INT 45
26234: PUSH
26235: LD_INT 46
26237: PUSH
26238: LD_INT 47
26240: PUSH
26241: LD_INT 82
26243: PUSH
26244: LD_INT 83
26246: PUSH
26247: LD_INT 84
26249: PUSH
26250: LD_INT 85
26252: PUSH
26253: LD_INT 87
26255: PUSH
26256: LD_INT 70
26258: PUSH
26259: LD_INT 1
26261: PUSH
26262: LD_INT 11
26264: PUSH
26265: LD_INT 3
26267: PUSH
26268: LD_INT 4
26270: PUSH
26271: LD_INT 5
26273: PUSH
26274: LD_INT 6
26276: PUSH
26277: LD_INT 15
26279: PUSH
26280: LD_INT 18
26282: PUSH
26283: LD_INT 7
26285: PUSH
26286: LD_INT 17
26288: PUSH
26289: LD_INT 8
26291: PUSH
26292: LD_INT 20
26294: PUSH
26295: LD_INT 21
26297: PUSH
26298: LD_INT 22
26300: PUSH
26301: LD_INT 72
26303: PUSH
26304: LD_INT 26
26306: PUSH
26307: LD_INT 69
26309: PUSH
26310: LD_INT 39
26312: PUSH
26313: LD_INT 40
26315: PUSH
26316: LD_INT 41
26318: PUSH
26319: LD_INT 42
26321: PUSH
26322: LD_INT 43
26324: PUSH
26325: LD_INT 48
26327: PUSH
26328: LD_INT 49
26330: PUSH
26331: LD_INT 50
26333: PUSH
26334: LD_INT 51
26336: PUSH
26337: LD_INT 52
26339: PUSH
26340: LD_INT 53
26342: PUSH
26343: LD_INT 54
26345: PUSH
26346: LD_INT 55
26348: PUSH
26349: LD_INT 56
26351: PUSH
26352: LD_INT 60
26354: PUSH
26355: LD_INT 61
26357: PUSH
26358: LD_INT 62
26360: PUSH
26361: LD_INT 66
26363: PUSH
26364: LD_INT 67
26366: PUSH
26367: LD_INT 68
26369: PUSH
26370: LD_INT 81
26372: PUSH
26373: LD_INT 82
26375: PUSH
26376: LD_INT 83
26378: PUSH
26379: LD_INT 84
26381: PUSH
26382: LD_INT 85
26384: PUSH
26385: LD_INT 87
26387: PUSH
26388: EMPTY
26389: LIST
26390: LIST
26391: LIST
26392: LIST
26393: LIST
26394: LIST
26395: LIST
26396: LIST
26397: LIST
26398: LIST
26399: LIST
26400: LIST
26401: LIST
26402: LIST
26403: LIST
26404: LIST
26405: LIST
26406: LIST
26407: LIST
26408: LIST
26409: LIST
26410: LIST
26411: LIST
26412: LIST
26413: LIST
26414: LIST
26415: LIST
26416: LIST
26417: LIST
26418: LIST
26419: LIST
26420: LIST
26421: LIST
26422: LIST
26423: LIST
26424: LIST
26425: LIST
26426: LIST
26427: LIST
26428: LIST
26429: LIST
26430: LIST
26431: LIST
26432: LIST
26433: LIST
26434: LIST
26435: LIST
26436: LIST
26437: LIST
26438: LIST
26439: LIST
26440: LIST
26441: LIST
26442: ST_TO_ADDR
26443: GO 26676
26445: LD_INT 3
26447: DOUBLE
26448: EQUAL
26449: IFTRUE 26453
26451: GO 26675
26453: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
26454: LD_ADDR_VAR 0 4
26458: PUSH
26459: LD_INT 46
26461: PUSH
26462: LD_INT 47
26464: PUSH
26465: LD_INT 1
26467: PUSH
26468: LD_INT 2
26470: PUSH
26471: LD_INT 82
26473: PUSH
26474: LD_INT 83
26476: PUSH
26477: LD_INT 84
26479: PUSH
26480: LD_INT 85
26482: PUSH
26483: LD_INT 86
26485: PUSH
26486: LD_INT 11
26488: PUSH
26489: LD_INT 9
26491: PUSH
26492: LD_INT 20
26494: PUSH
26495: LD_INT 19
26497: PUSH
26498: LD_INT 21
26500: PUSH
26501: LD_INT 24
26503: PUSH
26504: LD_INT 22
26506: PUSH
26507: LD_INT 25
26509: PUSH
26510: LD_INT 28
26512: PUSH
26513: LD_INT 29
26515: PUSH
26516: LD_INT 30
26518: PUSH
26519: LD_INT 31
26521: PUSH
26522: LD_INT 37
26524: PUSH
26525: LD_INT 38
26527: PUSH
26528: LD_INT 32
26530: PUSH
26531: LD_INT 27
26533: PUSH
26534: LD_INT 33
26536: PUSH
26537: LD_INT 69
26539: PUSH
26540: LD_INT 39
26542: PUSH
26543: LD_INT 34
26545: PUSH
26546: LD_INT 40
26548: PUSH
26549: LD_INT 71
26551: PUSH
26552: LD_INT 23
26554: PUSH
26555: LD_INT 44
26557: PUSH
26558: LD_INT 48
26560: PUSH
26561: LD_INT 49
26563: PUSH
26564: LD_INT 50
26566: PUSH
26567: LD_INT 51
26569: PUSH
26570: LD_INT 52
26572: PUSH
26573: LD_INT 53
26575: PUSH
26576: LD_INT 54
26578: PUSH
26579: LD_INT 55
26581: PUSH
26582: LD_INT 56
26584: PUSH
26585: LD_INT 57
26587: PUSH
26588: LD_INT 58
26590: PUSH
26591: LD_INT 59
26593: PUSH
26594: LD_INT 63
26596: PUSH
26597: LD_INT 64
26599: PUSH
26600: LD_INT 65
26602: PUSH
26603: LD_INT 82
26605: PUSH
26606: LD_INT 83
26608: PUSH
26609: LD_INT 84
26611: PUSH
26612: LD_INT 85
26614: PUSH
26615: LD_INT 86
26617: PUSH
26618: EMPTY
26619: LIST
26620: LIST
26621: LIST
26622: LIST
26623: LIST
26624: LIST
26625: LIST
26626: LIST
26627: LIST
26628: LIST
26629: LIST
26630: LIST
26631: LIST
26632: LIST
26633: LIST
26634: LIST
26635: LIST
26636: LIST
26637: LIST
26638: LIST
26639: LIST
26640: LIST
26641: LIST
26642: LIST
26643: LIST
26644: LIST
26645: LIST
26646: LIST
26647: LIST
26648: LIST
26649: LIST
26650: LIST
26651: LIST
26652: LIST
26653: LIST
26654: LIST
26655: LIST
26656: LIST
26657: LIST
26658: LIST
26659: LIST
26660: LIST
26661: LIST
26662: LIST
26663: LIST
26664: LIST
26665: LIST
26666: LIST
26667: LIST
26668: LIST
26669: LIST
26670: LIST
26671: LIST
26672: ST_TO_ADDR
26673: GO 26676
26675: POP
// if state > - 1 and state < 3 then
26676: LD_VAR 0 3
26680: PUSH
26681: LD_INT 1
26683: NEG
26684: GREATER
26685: PUSH
26686: LD_VAR 0 3
26690: PUSH
26691: LD_INT 3
26693: LESS
26694: AND
26695: IFFALSE 26752
// for i in result do
26697: LD_ADDR_VAR 0 5
26701: PUSH
26702: LD_VAR 0 4
26706: PUSH
26707: FOR_IN
26708: IFFALSE 26750
// if GetTech ( i , side ) <> state then
26710: LD_VAR 0 5
26714: PPUSH
26715: LD_VAR 0 1
26719: PPUSH
26720: CALL_OW 321
26724: PUSH
26725: LD_VAR 0 3
26729: NONEQUAL
26730: IFFALSE 26748
// result := result diff i ;
26732: LD_ADDR_VAR 0 4
26736: PUSH
26737: LD_VAR 0 4
26741: PUSH
26742: LD_VAR 0 5
26746: DIFF
26747: ST_TO_ADDR
26748: GO 26707
26750: POP
26751: POP
// end ;
26752: LD_VAR 0 4
26756: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
26757: LD_INT 0
26759: PPUSH
26760: PPUSH
26761: PPUSH
// result := true ;
26762: LD_ADDR_VAR 0 3
26766: PUSH
26767: LD_INT 1
26769: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
26770: LD_ADDR_VAR 0 5
26774: PUSH
26775: LD_VAR 0 2
26779: PPUSH
26780: CALL_OW 480
26784: ST_TO_ADDR
// if not tmp then
26785: LD_VAR 0 5
26789: NOT
26790: IFFALSE 26794
// exit ;
26792: GO 26843
// for i in tmp do
26794: LD_ADDR_VAR 0 4
26798: PUSH
26799: LD_VAR 0 5
26803: PUSH
26804: FOR_IN
26805: IFFALSE 26841
// if GetTech ( i , side ) <> state_researched then
26807: LD_VAR 0 4
26811: PPUSH
26812: LD_VAR 0 1
26816: PPUSH
26817: CALL_OW 321
26821: PUSH
26822: LD_INT 2
26824: NONEQUAL
26825: IFFALSE 26839
// begin result := false ;
26827: LD_ADDR_VAR 0 3
26831: PUSH
26832: LD_INT 0
26834: ST_TO_ADDR
// exit ;
26835: POP
26836: POP
26837: GO 26843
// end ;
26839: GO 26804
26841: POP
26842: POP
// end ;
26843: LD_VAR 0 3
26847: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
26848: LD_INT 0
26850: PPUSH
26851: PPUSH
26852: PPUSH
26853: PPUSH
26854: PPUSH
26855: PPUSH
26856: PPUSH
26857: PPUSH
26858: PPUSH
26859: PPUSH
26860: PPUSH
26861: PPUSH
26862: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
26863: LD_VAR 0 1
26867: NOT
26868: PUSH
26869: LD_VAR 0 1
26873: PPUSH
26874: CALL_OW 257
26878: PUSH
26879: LD_INT 9
26881: NONEQUAL
26882: OR
26883: IFFALSE 26887
// exit ;
26885: GO 27460
// side := GetSide ( unit ) ;
26887: LD_ADDR_VAR 0 9
26891: PUSH
26892: LD_VAR 0 1
26896: PPUSH
26897: CALL_OW 255
26901: ST_TO_ADDR
// tech_space := tech_spacanom ;
26902: LD_ADDR_VAR 0 12
26906: PUSH
26907: LD_INT 29
26909: ST_TO_ADDR
// tech_time := tech_taurad ;
26910: LD_ADDR_VAR 0 13
26914: PUSH
26915: LD_INT 28
26917: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
26918: LD_ADDR_VAR 0 11
26922: PUSH
26923: LD_VAR 0 1
26927: PPUSH
26928: CALL_OW 310
26932: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
26933: LD_VAR 0 11
26937: PPUSH
26938: CALL_OW 247
26942: PUSH
26943: LD_INT 2
26945: EQUAL
26946: IFFALSE 26950
// exit ;
26948: GO 27460
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26950: LD_ADDR_VAR 0 8
26954: PUSH
26955: LD_INT 81
26957: PUSH
26958: LD_VAR 0 9
26962: PUSH
26963: EMPTY
26964: LIST
26965: LIST
26966: PUSH
26967: LD_INT 3
26969: PUSH
26970: LD_INT 21
26972: PUSH
26973: LD_INT 3
26975: PUSH
26976: EMPTY
26977: LIST
26978: LIST
26979: PUSH
26980: EMPTY
26981: LIST
26982: LIST
26983: PUSH
26984: EMPTY
26985: LIST
26986: LIST
26987: PPUSH
26988: CALL_OW 69
26992: ST_TO_ADDR
// if not tmp then
26993: LD_VAR 0 8
26997: NOT
26998: IFFALSE 27002
// exit ;
27000: GO 27460
// if in_unit then
27002: LD_VAR 0 11
27006: IFFALSE 27030
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
27008: LD_ADDR_VAR 0 10
27012: PUSH
27013: LD_VAR 0 8
27017: PPUSH
27018: LD_VAR 0 11
27022: PPUSH
27023: CALL_OW 74
27027: ST_TO_ADDR
27028: GO 27050
// enemy := NearestUnitToUnit ( tmp , unit ) ;
27030: LD_ADDR_VAR 0 10
27034: PUSH
27035: LD_VAR 0 8
27039: PPUSH
27040: LD_VAR 0 1
27044: PPUSH
27045: CALL_OW 74
27049: ST_TO_ADDR
// if not enemy then
27050: LD_VAR 0 10
27054: NOT
27055: IFFALSE 27059
// exit ;
27057: GO 27460
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
27059: LD_VAR 0 11
27063: PUSH
27064: LD_VAR 0 11
27068: PPUSH
27069: LD_VAR 0 10
27073: PPUSH
27074: CALL_OW 296
27078: PUSH
27079: LD_INT 13
27081: GREATER
27082: AND
27083: PUSH
27084: LD_VAR 0 1
27088: PPUSH
27089: LD_VAR 0 10
27093: PPUSH
27094: CALL_OW 296
27098: PUSH
27099: LD_INT 12
27101: GREATER
27102: OR
27103: IFFALSE 27107
// exit ;
27105: GO 27460
// missile := [ 1 ] ;
27107: LD_ADDR_VAR 0 14
27111: PUSH
27112: LD_INT 1
27114: PUSH
27115: EMPTY
27116: LIST
27117: ST_TO_ADDR
// if Researched ( side , tech_space ) then
27118: LD_VAR 0 9
27122: PPUSH
27123: LD_VAR 0 12
27127: PPUSH
27128: CALL_OW 325
27132: IFFALSE 27161
// missile := Insert ( missile , missile + 1 , 2 ) ;
27134: LD_ADDR_VAR 0 14
27138: PUSH
27139: LD_VAR 0 14
27143: PPUSH
27144: LD_VAR 0 14
27148: PUSH
27149: LD_INT 1
27151: PLUS
27152: PPUSH
27153: LD_INT 2
27155: PPUSH
27156: CALL_OW 2
27160: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
27161: LD_VAR 0 9
27165: PPUSH
27166: LD_VAR 0 13
27170: PPUSH
27171: CALL_OW 325
27175: PUSH
27176: LD_VAR 0 10
27180: PPUSH
27181: CALL_OW 255
27185: PPUSH
27186: LD_VAR 0 13
27190: PPUSH
27191: CALL_OW 325
27195: NOT
27196: AND
27197: IFFALSE 27226
// missile := Insert ( missile , missile + 1 , 3 ) ;
27199: LD_ADDR_VAR 0 14
27203: PUSH
27204: LD_VAR 0 14
27208: PPUSH
27209: LD_VAR 0 14
27213: PUSH
27214: LD_INT 1
27216: PLUS
27217: PPUSH
27218: LD_INT 3
27220: PPUSH
27221: CALL_OW 2
27225: ST_TO_ADDR
// if missile < 2 then
27226: LD_VAR 0 14
27230: PUSH
27231: LD_INT 2
27233: LESS
27234: IFFALSE 27238
// exit ;
27236: GO 27460
// x := GetX ( enemy ) ;
27238: LD_ADDR_VAR 0 4
27242: PUSH
27243: LD_VAR 0 10
27247: PPUSH
27248: CALL_OW 250
27252: ST_TO_ADDR
// y := GetY ( enemy ) ;
27253: LD_ADDR_VAR 0 5
27257: PUSH
27258: LD_VAR 0 10
27262: PPUSH
27263: CALL_OW 251
27267: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
27268: LD_ADDR_VAR 0 6
27272: PUSH
27273: LD_VAR 0 4
27277: PUSH
27278: LD_INT 1
27280: NEG
27281: PPUSH
27282: LD_INT 1
27284: PPUSH
27285: CALL_OW 12
27289: PLUS
27290: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
27291: LD_ADDR_VAR 0 7
27295: PUSH
27296: LD_VAR 0 5
27300: PUSH
27301: LD_INT 1
27303: NEG
27304: PPUSH
27305: LD_INT 1
27307: PPUSH
27308: CALL_OW 12
27312: PLUS
27313: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
27314: LD_VAR 0 6
27318: PPUSH
27319: LD_VAR 0 7
27323: PPUSH
27324: CALL_OW 488
27328: NOT
27329: IFFALSE 27351
// begin _x := x ;
27331: LD_ADDR_VAR 0 6
27335: PUSH
27336: LD_VAR 0 4
27340: ST_TO_ADDR
// _y := y ;
27341: LD_ADDR_VAR 0 7
27345: PUSH
27346: LD_VAR 0 5
27350: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
27351: LD_ADDR_VAR 0 3
27355: PUSH
27356: LD_INT 1
27358: PPUSH
27359: LD_VAR 0 14
27363: PPUSH
27364: CALL_OW 12
27368: ST_TO_ADDR
// case i of 1 :
27369: LD_VAR 0 3
27373: PUSH
27374: LD_INT 1
27376: DOUBLE
27377: EQUAL
27378: IFTRUE 27382
27380: GO 27399
27382: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
27383: LD_VAR 0 1
27387: PPUSH
27388: LD_VAR 0 10
27392: PPUSH
27393: CALL_OW 115
27397: GO 27460
27399: LD_INT 2
27401: DOUBLE
27402: EQUAL
27403: IFTRUE 27407
27405: GO 27429
27407: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
27408: LD_VAR 0 1
27412: PPUSH
27413: LD_VAR 0 6
27417: PPUSH
27418: LD_VAR 0 7
27422: PPUSH
27423: CALL_OW 153
27427: GO 27460
27429: LD_INT 3
27431: DOUBLE
27432: EQUAL
27433: IFTRUE 27437
27435: GO 27459
27437: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
27438: LD_VAR 0 1
27442: PPUSH
27443: LD_VAR 0 6
27447: PPUSH
27448: LD_VAR 0 7
27452: PPUSH
27453: CALL_OW 154
27457: GO 27460
27459: POP
// end ;
27460: LD_VAR 0 2
27464: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
27465: LD_INT 0
27467: PPUSH
27468: PPUSH
27469: PPUSH
27470: PPUSH
27471: PPUSH
27472: PPUSH
// if not unit or not building then
27473: LD_VAR 0 1
27477: NOT
27478: PUSH
27479: LD_VAR 0 2
27483: NOT
27484: OR
27485: IFFALSE 27489
// exit ;
27487: GO 27647
// x := GetX ( building ) ;
27489: LD_ADDR_VAR 0 5
27493: PUSH
27494: LD_VAR 0 2
27498: PPUSH
27499: CALL_OW 250
27503: ST_TO_ADDR
// y := GetY ( building ) ;
27504: LD_ADDR_VAR 0 6
27508: PUSH
27509: LD_VAR 0 2
27513: PPUSH
27514: CALL_OW 251
27518: ST_TO_ADDR
// for i = 0 to 5 do
27519: LD_ADDR_VAR 0 4
27523: PUSH
27524: DOUBLE
27525: LD_INT 0
27527: DEC
27528: ST_TO_ADDR
27529: LD_INT 5
27531: PUSH
27532: FOR_TO
27533: IFFALSE 27645
// begin _x := ShiftX ( x , i , 3 ) ;
27535: LD_ADDR_VAR 0 7
27539: PUSH
27540: LD_VAR 0 5
27544: PPUSH
27545: LD_VAR 0 4
27549: PPUSH
27550: LD_INT 3
27552: PPUSH
27553: CALL_OW 272
27557: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
27558: LD_ADDR_VAR 0 8
27562: PUSH
27563: LD_VAR 0 6
27567: PPUSH
27568: LD_VAR 0 4
27572: PPUSH
27573: LD_INT 3
27575: PPUSH
27576: CALL_OW 273
27580: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
27581: LD_VAR 0 7
27585: PPUSH
27586: LD_VAR 0 8
27590: PPUSH
27591: CALL_OW 488
27595: NOT
27596: IFFALSE 27600
// continue ;
27598: GO 27532
// if HexInfo ( _x , _y ) = 0 then
27600: LD_VAR 0 7
27604: PPUSH
27605: LD_VAR 0 8
27609: PPUSH
27610: CALL_OW 428
27614: PUSH
27615: LD_INT 0
27617: EQUAL
27618: IFFALSE 27643
// begin ComMoveXY ( unit , _x , _y ) ;
27620: LD_VAR 0 1
27624: PPUSH
27625: LD_VAR 0 7
27629: PPUSH
27630: LD_VAR 0 8
27634: PPUSH
27635: CALL_OW 111
// exit ;
27639: POP
27640: POP
27641: GO 27647
// end ; end ;
27643: GO 27532
27645: POP
27646: POP
// end ;
27647: LD_VAR 0 3
27651: RET
// export function ScanBase ( side , base_area ) ; begin
27652: LD_INT 0
27654: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
27655: LD_ADDR_VAR 0 3
27659: PUSH
27660: LD_VAR 0 2
27664: PPUSH
27665: LD_INT 81
27667: PUSH
27668: LD_VAR 0 1
27672: PUSH
27673: EMPTY
27674: LIST
27675: LIST
27676: PPUSH
27677: CALL_OW 70
27681: ST_TO_ADDR
// end ;
27682: LD_VAR 0 3
27686: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
27687: LD_INT 0
27689: PPUSH
27690: PPUSH
27691: PPUSH
27692: PPUSH
// result := false ;
27693: LD_ADDR_VAR 0 2
27697: PUSH
27698: LD_INT 0
27700: ST_TO_ADDR
// side := GetSide ( unit ) ;
27701: LD_ADDR_VAR 0 3
27705: PUSH
27706: LD_VAR 0 1
27710: PPUSH
27711: CALL_OW 255
27715: ST_TO_ADDR
// nat := GetNation ( unit ) ;
27716: LD_ADDR_VAR 0 4
27720: PUSH
27721: LD_VAR 0 1
27725: PPUSH
27726: CALL_OW 248
27730: ST_TO_ADDR
// case nat of 1 :
27731: LD_VAR 0 4
27735: PUSH
27736: LD_INT 1
27738: DOUBLE
27739: EQUAL
27740: IFTRUE 27744
27742: GO 27755
27744: POP
// tech := tech_lassight ; 2 :
27745: LD_ADDR_VAR 0 5
27749: PUSH
27750: LD_INT 12
27752: ST_TO_ADDR
27753: GO 27794
27755: LD_INT 2
27757: DOUBLE
27758: EQUAL
27759: IFTRUE 27763
27761: GO 27774
27763: POP
// tech := tech_mortar ; 3 :
27764: LD_ADDR_VAR 0 5
27768: PUSH
27769: LD_INT 41
27771: ST_TO_ADDR
27772: GO 27794
27774: LD_INT 3
27776: DOUBLE
27777: EQUAL
27778: IFTRUE 27782
27780: GO 27793
27782: POP
// tech := tech_bazooka ; end ;
27783: LD_ADDR_VAR 0 5
27787: PUSH
27788: LD_INT 44
27790: ST_TO_ADDR
27791: GO 27794
27793: POP
// if Researched ( side , tech ) then
27794: LD_VAR 0 3
27798: PPUSH
27799: LD_VAR 0 5
27803: PPUSH
27804: CALL_OW 325
27808: IFFALSE 27835
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
27810: LD_ADDR_VAR 0 2
27814: PUSH
27815: LD_INT 5
27817: PUSH
27818: LD_INT 8
27820: PUSH
27821: LD_INT 9
27823: PUSH
27824: EMPTY
27825: LIST
27826: LIST
27827: LIST
27828: PUSH
27829: LD_VAR 0 4
27833: ARRAY
27834: ST_TO_ADDR
// end ;
27835: LD_VAR 0 2
27839: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
27840: LD_INT 0
27842: PPUSH
27843: PPUSH
27844: PPUSH
// if not mines then
27845: LD_VAR 0 2
27849: NOT
27850: IFFALSE 27854
// exit ;
27852: GO 27998
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27854: LD_ADDR_VAR 0 5
27858: PUSH
27859: LD_INT 81
27861: PUSH
27862: LD_VAR 0 1
27866: PUSH
27867: EMPTY
27868: LIST
27869: LIST
27870: PUSH
27871: LD_INT 3
27873: PUSH
27874: LD_INT 21
27876: PUSH
27877: LD_INT 3
27879: PUSH
27880: EMPTY
27881: LIST
27882: LIST
27883: PUSH
27884: EMPTY
27885: LIST
27886: LIST
27887: PUSH
27888: EMPTY
27889: LIST
27890: LIST
27891: PPUSH
27892: CALL_OW 69
27896: ST_TO_ADDR
// for i in mines do
27897: LD_ADDR_VAR 0 4
27901: PUSH
27902: LD_VAR 0 2
27906: PUSH
27907: FOR_IN
27908: IFFALSE 27996
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
27910: LD_VAR 0 4
27914: PUSH
27915: LD_INT 1
27917: ARRAY
27918: PPUSH
27919: LD_VAR 0 4
27923: PUSH
27924: LD_INT 2
27926: ARRAY
27927: PPUSH
27928: CALL_OW 458
27932: NOT
27933: IFFALSE 27937
// continue ;
27935: GO 27907
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
27937: LD_VAR 0 4
27941: PUSH
27942: LD_INT 1
27944: ARRAY
27945: PPUSH
27946: LD_VAR 0 4
27950: PUSH
27951: LD_INT 2
27953: ARRAY
27954: PPUSH
27955: CALL_OW 428
27959: PUSH
27960: LD_VAR 0 5
27964: IN
27965: IFFALSE 27994
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
27967: LD_VAR 0 4
27971: PUSH
27972: LD_INT 1
27974: ARRAY
27975: PPUSH
27976: LD_VAR 0 4
27980: PUSH
27981: LD_INT 2
27983: ARRAY
27984: PPUSH
27985: LD_VAR 0 1
27989: PPUSH
27990: CALL_OW 456
// end ;
27994: GO 27907
27996: POP
27997: POP
// end ;
27998: LD_VAR 0 3
28002: RET
// export function Count ( array ) ; var i ; begin
28003: LD_INT 0
28005: PPUSH
28006: PPUSH
// result := 0 ;
28007: LD_ADDR_VAR 0 2
28011: PUSH
28012: LD_INT 0
28014: ST_TO_ADDR
// for i in array do
28015: LD_ADDR_VAR 0 3
28019: PUSH
28020: LD_VAR 0 1
28024: PUSH
28025: FOR_IN
28026: IFFALSE 28050
// if i then
28028: LD_VAR 0 3
28032: IFFALSE 28048
// result := result + 1 ;
28034: LD_ADDR_VAR 0 2
28038: PUSH
28039: LD_VAR 0 2
28043: PUSH
28044: LD_INT 1
28046: PLUS
28047: ST_TO_ADDR
28048: GO 28025
28050: POP
28051: POP
// end ;
28052: LD_VAR 0 2
28056: RET
// export function IsEmpty ( building ) ; begin
28057: LD_INT 0
28059: PPUSH
// if not building then
28060: LD_VAR 0 1
28064: NOT
28065: IFFALSE 28069
// exit ;
28067: GO 28112
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
28069: LD_ADDR_VAR 0 2
28073: PUSH
28074: LD_VAR 0 1
28078: PUSH
28079: LD_INT 22
28081: PUSH
28082: LD_VAR 0 1
28086: PPUSH
28087: CALL_OW 255
28091: PUSH
28092: EMPTY
28093: LIST
28094: LIST
28095: PUSH
28096: LD_INT 58
28098: PUSH
28099: EMPTY
28100: LIST
28101: PUSH
28102: EMPTY
28103: LIST
28104: LIST
28105: PPUSH
28106: CALL_OW 69
28110: IN
28111: ST_TO_ADDR
// end ;
28112: LD_VAR 0 2
28116: RET
// export function IsNotFull ( building ) ; begin
28117: LD_INT 0
28119: PPUSH
// if not building then
28120: LD_VAR 0 1
28124: NOT
28125: IFFALSE 28129
// exit ;
28127: GO 28148
// result := UnitsInside ( building ) < 6 ;
28129: LD_ADDR_VAR 0 2
28133: PUSH
28134: LD_VAR 0 1
28138: PPUSH
28139: CALL_OW 313
28143: PUSH
28144: LD_INT 6
28146: LESS
28147: ST_TO_ADDR
// end ;
28148: LD_VAR 0 2
28152: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
28153: LD_INT 0
28155: PPUSH
28156: PPUSH
28157: PPUSH
28158: PPUSH
// tmp := [ ] ;
28159: LD_ADDR_VAR 0 3
28163: PUSH
28164: EMPTY
28165: ST_TO_ADDR
// list := [ ] ;
28166: LD_ADDR_VAR 0 5
28170: PUSH
28171: EMPTY
28172: ST_TO_ADDR
// for i = 16 to 25 do
28173: LD_ADDR_VAR 0 4
28177: PUSH
28178: DOUBLE
28179: LD_INT 16
28181: DEC
28182: ST_TO_ADDR
28183: LD_INT 25
28185: PUSH
28186: FOR_TO
28187: IFFALSE 28260
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
28189: LD_ADDR_VAR 0 3
28193: PUSH
28194: LD_VAR 0 3
28198: PUSH
28199: LD_INT 22
28201: PUSH
28202: LD_VAR 0 1
28206: PPUSH
28207: CALL_OW 255
28211: PUSH
28212: EMPTY
28213: LIST
28214: LIST
28215: PUSH
28216: LD_INT 91
28218: PUSH
28219: LD_VAR 0 1
28223: PUSH
28224: LD_INT 6
28226: PUSH
28227: EMPTY
28228: LIST
28229: LIST
28230: LIST
28231: PUSH
28232: LD_INT 30
28234: PUSH
28235: LD_VAR 0 4
28239: PUSH
28240: EMPTY
28241: LIST
28242: LIST
28243: PUSH
28244: EMPTY
28245: LIST
28246: LIST
28247: LIST
28248: PUSH
28249: EMPTY
28250: LIST
28251: PPUSH
28252: CALL_OW 69
28256: ADD
28257: ST_TO_ADDR
28258: GO 28186
28260: POP
28261: POP
// for i = 1 to tmp do
28262: LD_ADDR_VAR 0 4
28266: PUSH
28267: DOUBLE
28268: LD_INT 1
28270: DEC
28271: ST_TO_ADDR
28272: LD_VAR 0 3
28276: PUSH
28277: FOR_TO
28278: IFFALSE 28366
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
28280: LD_ADDR_VAR 0 5
28284: PUSH
28285: LD_VAR 0 5
28289: PUSH
28290: LD_VAR 0 3
28294: PUSH
28295: LD_VAR 0 4
28299: ARRAY
28300: PPUSH
28301: CALL_OW 266
28305: PUSH
28306: LD_VAR 0 3
28310: PUSH
28311: LD_VAR 0 4
28315: ARRAY
28316: PPUSH
28317: CALL_OW 250
28321: PUSH
28322: LD_VAR 0 3
28326: PUSH
28327: LD_VAR 0 4
28331: ARRAY
28332: PPUSH
28333: CALL_OW 251
28337: PUSH
28338: LD_VAR 0 3
28342: PUSH
28343: LD_VAR 0 4
28347: ARRAY
28348: PPUSH
28349: CALL_OW 254
28353: PUSH
28354: EMPTY
28355: LIST
28356: LIST
28357: LIST
28358: LIST
28359: PUSH
28360: EMPTY
28361: LIST
28362: ADD
28363: ST_TO_ADDR
28364: GO 28277
28366: POP
28367: POP
// result := list ;
28368: LD_ADDR_VAR 0 2
28372: PUSH
28373: LD_VAR 0 5
28377: ST_TO_ADDR
// end ;
28378: LD_VAR 0 2
28382: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
28383: LD_INT 0
28385: PPUSH
28386: PPUSH
28387: PPUSH
28388: PPUSH
28389: PPUSH
28390: PPUSH
28391: PPUSH
// if not factory then
28392: LD_VAR 0 1
28396: NOT
28397: IFFALSE 28401
// exit ;
28399: GO 28994
// if control = control_apeman then
28401: LD_VAR 0 4
28405: PUSH
28406: LD_INT 5
28408: EQUAL
28409: IFFALSE 28518
// begin tmp := UnitsInside ( factory ) ;
28411: LD_ADDR_VAR 0 8
28415: PUSH
28416: LD_VAR 0 1
28420: PPUSH
28421: CALL_OW 313
28425: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
28426: LD_VAR 0 8
28430: PPUSH
28431: LD_INT 25
28433: PUSH
28434: LD_INT 12
28436: PUSH
28437: EMPTY
28438: LIST
28439: LIST
28440: PPUSH
28441: CALL_OW 72
28445: NOT
28446: IFFALSE 28456
// control := control_manual ;
28448: LD_ADDR_VAR 0 4
28452: PUSH
28453: LD_INT 1
28455: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
28456: LD_ADDR_VAR 0 8
28460: PUSH
28461: LD_VAR 0 1
28465: PPUSH
28466: CALL 28153 0 1
28470: ST_TO_ADDR
// if tmp then
28471: LD_VAR 0 8
28475: IFFALSE 28518
// begin for i in tmp do
28477: LD_ADDR_VAR 0 7
28481: PUSH
28482: LD_VAR 0 8
28486: PUSH
28487: FOR_IN
28488: IFFALSE 28516
// if i [ 1 ] = b_ext_radio then
28490: LD_VAR 0 7
28494: PUSH
28495: LD_INT 1
28497: ARRAY
28498: PUSH
28499: LD_INT 22
28501: EQUAL
28502: IFFALSE 28514
// begin control := control_remote ;
28504: LD_ADDR_VAR 0 4
28508: PUSH
28509: LD_INT 2
28511: ST_TO_ADDR
// break ;
28512: GO 28516
// end ;
28514: GO 28487
28516: POP
28517: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
28518: LD_VAR 0 1
28522: PPUSH
28523: LD_VAR 0 2
28527: PPUSH
28528: LD_VAR 0 3
28532: PPUSH
28533: LD_VAR 0 4
28537: PPUSH
28538: LD_VAR 0 5
28542: PPUSH
28543: CALL_OW 448
28547: IFFALSE 28582
// begin result := [ chassis , engine , control , weapon ] ;
28549: LD_ADDR_VAR 0 6
28553: PUSH
28554: LD_VAR 0 2
28558: PUSH
28559: LD_VAR 0 3
28563: PUSH
28564: LD_VAR 0 4
28568: PUSH
28569: LD_VAR 0 5
28573: PUSH
28574: EMPTY
28575: LIST
28576: LIST
28577: LIST
28578: LIST
28579: ST_TO_ADDR
// exit ;
28580: GO 28994
// end ; _chassis := AvailableChassisList ( factory ) ;
28582: LD_ADDR_VAR 0 9
28586: PUSH
28587: LD_VAR 0 1
28591: PPUSH
28592: CALL_OW 475
28596: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
28597: LD_ADDR_VAR 0 11
28601: PUSH
28602: LD_VAR 0 1
28606: PPUSH
28607: CALL_OW 476
28611: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
28612: LD_ADDR_VAR 0 12
28616: PUSH
28617: LD_VAR 0 1
28621: PPUSH
28622: CALL_OW 477
28626: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
28627: LD_ADDR_VAR 0 10
28631: PUSH
28632: LD_VAR 0 1
28636: PPUSH
28637: CALL_OW 478
28641: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
28642: LD_VAR 0 9
28646: NOT
28647: PUSH
28648: LD_VAR 0 11
28652: NOT
28653: OR
28654: PUSH
28655: LD_VAR 0 12
28659: NOT
28660: OR
28661: PUSH
28662: LD_VAR 0 10
28666: NOT
28667: OR
28668: IFFALSE 28703
// begin result := [ chassis , engine , control , weapon ] ;
28670: LD_ADDR_VAR 0 6
28674: PUSH
28675: LD_VAR 0 2
28679: PUSH
28680: LD_VAR 0 3
28684: PUSH
28685: LD_VAR 0 4
28689: PUSH
28690: LD_VAR 0 5
28694: PUSH
28695: EMPTY
28696: LIST
28697: LIST
28698: LIST
28699: LIST
28700: ST_TO_ADDR
// exit ;
28701: GO 28994
// end ; if not chassis in _chassis then
28703: LD_VAR 0 2
28707: PUSH
28708: LD_VAR 0 9
28712: IN
28713: NOT
28714: IFFALSE 28740
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
28716: LD_ADDR_VAR 0 2
28720: PUSH
28721: LD_VAR 0 9
28725: PUSH
28726: LD_INT 1
28728: PPUSH
28729: LD_VAR 0 9
28733: PPUSH
28734: CALL_OW 12
28738: ARRAY
28739: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
28740: LD_VAR 0 2
28744: PPUSH
28745: LD_VAR 0 3
28749: PPUSH
28750: CALL 28999 0 2
28754: NOT
28755: IFFALSE 28814
// repeat engine := _engine [ 1 ] ;
28757: LD_ADDR_VAR 0 3
28761: PUSH
28762: LD_VAR 0 11
28766: PUSH
28767: LD_INT 1
28769: ARRAY
28770: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
28771: LD_ADDR_VAR 0 11
28775: PUSH
28776: LD_VAR 0 11
28780: PPUSH
28781: LD_INT 1
28783: PPUSH
28784: CALL_OW 3
28788: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
28789: LD_VAR 0 2
28793: PPUSH
28794: LD_VAR 0 3
28798: PPUSH
28799: CALL 28999 0 2
28803: PUSH
28804: LD_VAR 0 11
28808: PUSH
28809: EMPTY
28810: EQUAL
28811: OR
28812: IFFALSE 28757
// if not control in _control then
28814: LD_VAR 0 4
28818: PUSH
28819: LD_VAR 0 12
28823: IN
28824: NOT
28825: IFFALSE 28851
// control := _control [ rand ( 1 , _control ) ] ;
28827: LD_ADDR_VAR 0 4
28831: PUSH
28832: LD_VAR 0 12
28836: PUSH
28837: LD_INT 1
28839: PPUSH
28840: LD_VAR 0 12
28844: PPUSH
28845: CALL_OW 12
28849: ARRAY
28850: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
28851: LD_VAR 0 2
28855: PPUSH
28856: LD_VAR 0 5
28860: PPUSH
28861: CALL 29219 0 2
28865: NOT
28866: IFFALSE 28925
// repeat weapon := _weapon [ 1 ] ;
28868: LD_ADDR_VAR 0 5
28872: PUSH
28873: LD_VAR 0 10
28877: PUSH
28878: LD_INT 1
28880: ARRAY
28881: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
28882: LD_ADDR_VAR 0 10
28886: PUSH
28887: LD_VAR 0 10
28891: PPUSH
28892: LD_INT 1
28894: PPUSH
28895: CALL_OW 3
28899: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
28900: LD_VAR 0 2
28904: PPUSH
28905: LD_VAR 0 5
28909: PPUSH
28910: CALL 29219 0 2
28914: PUSH
28915: LD_VAR 0 10
28919: PUSH
28920: EMPTY
28921: EQUAL
28922: OR
28923: IFFALSE 28868
// result := [ ] ;
28925: LD_ADDR_VAR 0 6
28929: PUSH
28930: EMPTY
28931: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
28932: LD_VAR 0 1
28936: PPUSH
28937: LD_VAR 0 2
28941: PPUSH
28942: LD_VAR 0 3
28946: PPUSH
28947: LD_VAR 0 4
28951: PPUSH
28952: LD_VAR 0 5
28956: PPUSH
28957: CALL_OW 448
28961: IFFALSE 28994
// result := [ chassis , engine , control , weapon ] ;
28963: LD_ADDR_VAR 0 6
28967: PUSH
28968: LD_VAR 0 2
28972: PUSH
28973: LD_VAR 0 3
28977: PUSH
28978: LD_VAR 0 4
28982: PUSH
28983: LD_VAR 0 5
28987: PUSH
28988: EMPTY
28989: LIST
28990: LIST
28991: LIST
28992: LIST
28993: ST_TO_ADDR
// end ;
28994: LD_VAR 0 6
28998: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
28999: LD_INT 0
29001: PPUSH
// if not chassis or not engine then
29002: LD_VAR 0 1
29006: NOT
29007: PUSH
29008: LD_VAR 0 2
29012: NOT
29013: OR
29014: IFFALSE 29018
// exit ;
29016: GO 29214
// case engine of engine_solar :
29018: LD_VAR 0 2
29022: PUSH
29023: LD_INT 2
29025: DOUBLE
29026: EQUAL
29027: IFTRUE 29031
29029: GO 29069
29031: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
29032: LD_ADDR_VAR 0 3
29036: PUSH
29037: LD_INT 11
29039: PUSH
29040: LD_INT 12
29042: PUSH
29043: LD_INT 13
29045: PUSH
29046: LD_INT 14
29048: PUSH
29049: LD_INT 1
29051: PUSH
29052: LD_INT 2
29054: PUSH
29055: LD_INT 3
29057: PUSH
29058: EMPTY
29059: LIST
29060: LIST
29061: LIST
29062: LIST
29063: LIST
29064: LIST
29065: LIST
29066: ST_TO_ADDR
29067: GO 29198
29069: LD_INT 1
29071: DOUBLE
29072: EQUAL
29073: IFTRUE 29077
29075: GO 29139
29077: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
29078: LD_ADDR_VAR 0 3
29082: PUSH
29083: LD_INT 11
29085: PUSH
29086: LD_INT 12
29088: PUSH
29089: LD_INT 13
29091: PUSH
29092: LD_INT 14
29094: PUSH
29095: LD_INT 1
29097: PUSH
29098: LD_INT 2
29100: PUSH
29101: LD_INT 3
29103: PUSH
29104: LD_INT 4
29106: PUSH
29107: LD_INT 5
29109: PUSH
29110: LD_INT 21
29112: PUSH
29113: LD_INT 23
29115: PUSH
29116: LD_INT 22
29118: PUSH
29119: LD_INT 24
29121: PUSH
29122: EMPTY
29123: LIST
29124: LIST
29125: LIST
29126: LIST
29127: LIST
29128: LIST
29129: LIST
29130: LIST
29131: LIST
29132: LIST
29133: LIST
29134: LIST
29135: LIST
29136: ST_TO_ADDR
29137: GO 29198
29139: LD_INT 3
29141: DOUBLE
29142: EQUAL
29143: IFTRUE 29147
29145: GO 29197
29147: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
29148: LD_ADDR_VAR 0 3
29152: PUSH
29153: LD_INT 13
29155: PUSH
29156: LD_INT 14
29158: PUSH
29159: LD_INT 2
29161: PUSH
29162: LD_INT 3
29164: PUSH
29165: LD_INT 4
29167: PUSH
29168: LD_INT 5
29170: PUSH
29171: LD_INT 21
29173: PUSH
29174: LD_INT 22
29176: PUSH
29177: LD_INT 23
29179: PUSH
29180: LD_INT 24
29182: PUSH
29183: EMPTY
29184: LIST
29185: LIST
29186: LIST
29187: LIST
29188: LIST
29189: LIST
29190: LIST
29191: LIST
29192: LIST
29193: LIST
29194: ST_TO_ADDR
29195: GO 29198
29197: POP
// result := ( chassis in result ) ;
29198: LD_ADDR_VAR 0 3
29202: PUSH
29203: LD_VAR 0 1
29207: PUSH
29208: LD_VAR 0 3
29212: IN
29213: ST_TO_ADDR
// end ;
29214: LD_VAR 0 3
29218: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
29219: LD_INT 0
29221: PPUSH
// if not chassis or not weapon then
29222: LD_VAR 0 1
29226: NOT
29227: PUSH
29228: LD_VAR 0 2
29232: NOT
29233: OR
29234: IFFALSE 29238
// exit ;
29236: GO 30264
// case weapon of us_machine_gun :
29238: LD_VAR 0 2
29242: PUSH
29243: LD_INT 2
29245: DOUBLE
29246: EQUAL
29247: IFTRUE 29251
29249: GO 29281
29251: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
29252: LD_ADDR_VAR 0 3
29256: PUSH
29257: LD_INT 1
29259: PUSH
29260: LD_INT 2
29262: PUSH
29263: LD_INT 3
29265: PUSH
29266: LD_INT 4
29268: PUSH
29269: LD_INT 5
29271: PUSH
29272: EMPTY
29273: LIST
29274: LIST
29275: LIST
29276: LIST
29277: LIST
29278: ST_TO_ADDR
29279: GO 30248
29281: LD_INT 3
29283: DOUBLE
29284: EQUAL
29285: IFTRUE 29289
29287: GO 29319
29289: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
29290: LD_ADDR_VAR 0 3
29294: PUSH
29295: LD_INT 1
29297: PUSH
29298: LD_INT 2
29300: PUSH
29301: LD_INT 3
29303: PUSH
29304: LD_INT 4
29306: PUSH
29307: LD_INT 5
29309: PUSH
29310: EMPTY
29311: LIST
29312: LIST
29313: LIST
29314: LIST
29315: LIST
29316: ST_TO_ADDR
29317: GO 30248
29319: LD_INT 11
29321: DOUBLE
29322: EQUAL
29323: IFTRUE 29327
29325: GO 29357
29327: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
29328: LD_ADDR_VAR 0 3
29332: PUSH
29333: LD_INT 1
29335: PUSH
29336: LD_INT 2
29338: PUSH
29339: LD_INT 3
29341: PUSH
29342: LD_INT 4
29344: PUSH
29345: LD_INT 5
29347: PUSH
29348: EMPTY
29349: LIST
29350: LIST
29351: LIST
29352: LIST
29353: LIST
29354: ST_TO_ADDR
29355: GO 30248
29357: LD_INT 4
29359: DOUBLE
29360: EQUAL
29361: IFTRUE 29365
29363: GO 29391
29365: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
29366: LD_ADDR_VAR 0 3
29370: PUSH
29371: LD_INT 2
29373: PUSH
29374: LD_INT 3
29376: PUSH
29377: LD_INT 4
29379: PUSH
29380: LD_INT 5
29382: PUSH
29383: EMPTY
29384: LIST
29385: LIST
29386: LIST
29387: LIST
29388: ST_TO_ADDR
29389: GO 30248
29391: LD_INT 5
29393: DOUBLE
29394: EQUAL
29395: IFTRUE 29399
29397: GO 29425
29399: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
29400: LD_ADDR_VAR 0 3
29404: PUSH
29405: LD_INT 2
29407: PUSH
29408: LD_INT 3
29410: PUSH
29411: LD_INT 4
29413: PUSH
29414: LD_INT 5
29416: PUSH
29417: EMPTY
29418: LIST
29419: LIST
29420: LIST
29421: LIST
29422: ST_TO_ADDR
29423: GO 30248
29425: LD_INT 9
29427: DOUBLE
29428: EQUAL
29429: IFTRUE 29433
29431: GO 29459
29433: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
29434: LD_ADDR_VAR 0 3
29438: PUSH
29439: LD_INT 2
29441: PUSH
29442: LD_INT 3
29444: PUSH
29445: LD_INT 4
29447: PUSH
29448: LD_INT 5
29450: PUSH
29451: EMPTY
29452: LIST
29453: LIST
29454: LIST
29455: LIST
29456: ST_TO_ADDR
29457: GO 30248
29459: LD_INT 7
29461: DOUBLE
29462: EQUAL
29463: IFTRUE 29467
29465: GO 29493
29467: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
29468: LD_ADDR_VAR 0 3
29472: PUSH
29473: LD_INT 2
29475: PUSH
29476: LD_INT 3
29478: PUSH
29479: LD_INT 4
29481: PUSH
29482: LD_INT 5
29484: PUSH
29485: EMPTY
29486: LIST
29487: LIST
29488: LIST
29489: LIST
29490: ST_TO_ADDR
29491: GO 30248
29493: LD_INT 12
29495: DOUBLE
29496: EQUAL
29497: IFTRUE 29501
29499: GO 29527
29501: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
29502: LD_ADDR_VAR 0 3
29506: PUSH
29507: LD_INT 2
29509: PUSH
29510: LD_INT 3
29512: PUSH
29513: LD_INT 4
29515: PUSH
29516: LD_INT 5
29518: PUSH
29519: EMPTY
29520: LIST
29521: LIST
29522: LIST
29523: LIST
29524: ST_TO_ADDR
29525: GO 30248
29527: LD_INT 13
29529: DOUBLE
29530: EQUAL
29531: IFTRUE 29535
29533: GO 29561
29535: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
29536: LD_ADDR_VAR 0 3
29540: PUSH
29541: LD_INT 2
29543: PUSH
29544: LD_INT 3
29546: PUSH
29547: LD_INT 4
29549: PUSH
29550: LD_INT 5
29552: PUSH
29553: EMPTY
29554: LIST
29555: LIST
29556: LIST
29557: LIST
29558: ST_TO_ADDR
29559: GO 30248
29561: LD_INT 14
29563: DOUBLE
29564: EQUAL
29565: IFTRUE 29569
29567: GO 29587
29569: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
29570: LD_ADDR_VAR 0 3
29574: PUSH
29575: LD_INT 4
29577: PUSH
29578: LD_INT 5
29580: PUSH
29581: EMPTY
29582: LIST
29583: LIST
29584: ST_TO_ADDR
29585: GO 30248
29587: LD_INT 6
29589: DOUBLE
29590: EQUAL
29591: IFTRUE 29595
29593: GO 29613
29595: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
29596: LD_ADDR_VAR 0 3
29600: PUSH
29601: LD_INT 4
29603: PUSH
29604: LD_INT 5
29606: PUSH
29607: EMPTY
29608: LIST
29609: LIST
29610: ST_TO_ADDR
29611: GO 30248
29613: LD_INT 10
29615: DOUBLE
29616: EQUAL
29617: IFTRUE 29621
29619: GO 29639
29621: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
29622: LD_ADDR_VAR 0 3
29626: PUSH
29627: LD_INT 4
29629: PUSH
29630: LD_INT 5
29632: PUSH
29633: EMPTY
29634: LIST
29635: LIST
29636: ST_TO_ADDR
29637: GO 30248
29639: LD_INT 22
29641: DOUBLE
29642: EQUAL
29643: IFTRUE 29647
29645: GO 29673
29647: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
29648: LD_ADDR_VAR 0 3
29652: PUSH
29653: LD_INT 11
29655: PUSH
29656: LD_INT 12
29658: PUSH
29659: LD_INT 13
29661: PUSH
29662: LD_INT 14
29664: PUSH
29665: EMPTY
29666: LIST
29667: LIST
29668: LIST
29669: LIST
29670: ST_TO_ADDR
29671: GO 30248
29673: LD_INT 23
29675: DOUBLE
29676: EQUAL
29677: IFTRUE 29681
29679: GO 29707
29681: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
29682: LD_ADDR_VAR 0 3
29686: PUSH
29687: LD_INT 11
29689: PUSH
29690: LD_INT 12
29692: PUSH
29693: LD_INT 13
29695: PUSH
29696: LD_INT 14
29698: PUSH
29699: EMPTY
29700: LIST
29701: LIST
29702: LIST
29703: LIST
29704: ST_TO_ADDR
29705: GO 30248
29707: LD_INT 24
29709: DOUBLE
29710: EQUAL
29711: IFTRUE 29715
29713: GO 29741
29715: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
29716: LD_ADDR_VAR 0 3
29720: PUSH
29721: LD_INT 11
29723: PUSH
29724: LD_INT 12
29726: PUSH
29727: LD_INT 13
29729: PUSH
29730: LD_INT 14
29732: PUSH
29733: EMPTY
29734: LIST
29735: LIST
29736: LIST
29737: LIST
29738: ST_TO_ADDR
29739: GO 30248
29741: LD_INT 30
29743: DOUBLE
29744: EQUAL
29745: IFTRUE 29749
29747: GO 29775
29749: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
29750: LD_ADDR_VAR 0 3
29754: PUSH
29755: LD_INT 11
29757: PUSH
29758: LD_INT 12
29760: PUSH
29761: LD_INT 13
29763: PUSH
29764: LD_INT 14
29766: PUSH
29767: EMPTY
29768: LIST
29769: LIST
29770: LIST
29771: LIST
29772: ST_TO_ADDR
29773: GO 30248
29775: LD_INT 25
29777: DOUBLE
29778: EQUAL
29779: IFTRUE 29783
29781: GO 29801
29783: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
29784: LD_ADDR_VAR 0 3
29788: PUSH
29789: LD_INT 13
29791: PUSH
29792: LD_INT 14
29794: PUSH
29795: EMPTY
29796: LIST
29797: LIST
29798: ST_TO_ADDR
29799: GO 30248
29801: LD_INT 27
29803: DOUBLE
29804: EQUAL
29805: IFTRUE 29809
29807: GO 29827
29809: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
29810: LD_ADDR_VAR 0 3
29814: PUSH
29815: LD_INT 13
29817: PUSH
29818: LD_INT 14
29820: PUSH
29821: EMPTY
29822: LIST
29823: LIST
29824: ST_TO_ADDR
29825: GO 30248
29827: LD_INT 28
29829: DOUBLE
29830: EQUAL
29831: IFTRUE 29835
29833: GO 29853
29835: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
29836: LD_ADDR_VAR 0 3
29840: PUSH
29841: LD_INT 13
29843: PUSH
29844: LD_INT 14
29846: PUSH
29847: EMPTY
29848: LIST
29849: LIST
29850: ST_TO_ADDR
29851: GO 30248
29853: LD_INT 29
29855: DOUBLE
29856: EQUAL
29857: IFTRUE 29861
29859: GO 29879
29861: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
29862: LD_ADDR_VAR 0 3
29866: PUSH
29867: LD_INT 13
29869: PUSH
29870: LD_INT 14
29872: PUSH
29873: EMPTY
29874: LIST
29875: LIST
29876: ST_TO_ADDR
29877: GO 30248
29879: LD_INT 31
29881: DOUBLE
29882: EQUAL
29883: IFTRUE 29887
29885: GO 29905
29887: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
29888: LD_ADDR_VAR 0 3
29892: PUSH
29893: LD_INT 13
29895: PUSH
29896: LD_INT 14
29898: PUSH
29899: EMPTY
29900: LIST
29901: LIST
29902: ST_TO_ADDR
29903: GO 30248
29905: LD_INT 26
29907: DOUBLE
29908: EQUAL
29909: IFTRUE 29913
29911: GO 29931
29913: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
29914: LD_ADDR_VAR 0 3
29918: PUSH
29919: LD_INT 13
29921: PUSH
29922: LD_INT 14
29924: PUSH
29925: EMPTY
29926: LIST
29927: LIST
29928: ST_TO_ADDR
29929: GO 30248
29931: LD_INT 42
29933: DOUBLE
29934: EQUAL
29935: IFTRUE 29939
29937: GO 29965
29939: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
29940: LD_ADDR_VAR 0 3
29944: PUSH
29945: LD_INT 21
29947: PUSH
29948: LD_INT 22
29950: PUSH
29951: LD_INT 23
29953: PUSH
29954: LD_INT 24
29956: PUSH
29957: EMPTY
29958: LIST
29959: LIST
29960: LIST
29961: LIST
29962: ST_TO_ADDR
29963: GO 30248
29965: LD_INT 43
29967: DOUBLE
29968: EQUAL
29969: IFTRUE 29973
29971: GO 29999
29973: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
29974: LD_ADDR_VAR 0 3
29978: PUSH
29979: LD_INT 21
29981: PUSH
29982: LD_INT 22
29984: PUSH
29985: LD_INT 23
29987: PUSH
29988: LD_INT 24
29990: PUSH
29991: EMPTY
29992: LIST
29993: LIST
29994: LIST
29995: LIST
29996: ST_TO_ADDR
29997: GO 30248
29999: LD_INT 44
30001: DOUBLE
30002: EQUAL
30003: IFTRUE 30007
30005: GO 30033
30007: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
30008: LD_ADDR_VAR 0 3
30012: PUSH
30013: LD_INT 21
30015: PUSH
30016: LD_INT 22
30018: PUSH
30019: LD_INT 23
30021: PUSH
30022: LD_INT 24
30024: PUSH
30025: EMPTY
30026: LIST
30027: LIST
30028: LIST
30029: LIST
30030: ST_TO_ADDR
30031: GO 30248
30033: LD_INT 45
30035: DOUBLE
30036: EQUAL
30037: IFTRUE 30041
30039: GO 30067
30041: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
30042: LD_ADDR_VAR 0 3
30046: PUSH
30047: LD_INT 21
30049: PUSH
30050: LD_INT 22
30052: PUSH
30053: LD_INT 23
30055: PUSH
30056: LD_INT 24
30058: PUSH
30059: EMPTY
30060: LIST
30061: LIST
30062: LIST
30063: LIST
30064: ST_TO_ADDR
30065: GO 30248
30067: LD_INT 49
30069: DOUBLE
30070: EQUAL
30071: IFTRUE 30075
30073: GO 30101
30075: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
30076: LD_ADDR_VAR 0 3
30080: PUSH
30081: LD_INT 21
30083: PUSH
30084: LD_INT 22
30086: PUSH
30087: LD_INT 23
30089: PUSH
30090: LD_INT 24
30092: PUSH
30093: EMPTY
30094: LIST
30095: LIST
30096: LIST
30097: LIST
30098: ST_TO_ADDR
30099: GO 30248
30101: LD_INT 51
30103: DOUBLE
30104: EQUAL
30105: IFTRUE 30109
30107: GO 30135
30109: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
30110: LD_ADDR_VAR 0 3
30114: PUSH
30115: LD_INT 21
30117: PUSH
30118: LD_INT 22
30120: PUSH
30121: LD_INT 23
30123: PUSH
30124: LD_INT 24
30126: PUSH
30127: EMPTY
30128: LIST
30129: LIST
30130: LIST
30131: LIST
30132: ST_TO_ADDR
30133: GO 30248
30135: LD_INT 52
30137: DOUBLE
30138: EQUAL
30139: IFTRUE 30143
30141: GO 30169
30143: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
30144: LD_ADDR_VAR 0 3
30148: PUSH
30149: LD_INT 21
30151: PUSH
30152: LD_INT 22
30154: PUSH
30155: LD_INT 23
30157: PUSH
30158: LD_INT 24
30160: PUSH
30161: EMPTY
30162: LIST
30163: LIST
30164: LIST
30165: LIST
30166: ST_TO_ADDR
30167: GO 30248
30169: LD_INT 53
30171: DOUBLE
30172: EQUAL
30173: IFTRUE 30177
30175: GO 30195
30177: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
30178: LD_ADDR_VAR 0 3
30182: PUSH
30183: LD_INT 23
30185: PUSH
30186: LD_INT 24
30188: PUSH
30189: EMPTY
30190: LIST
30191: LIST
30192: ST_TO_ADDR
30193: GO 30248
30195: LD_INT 46
30197: DOUBLE
30198: EQUAL
30199: IFTRUE 30203
30201: GO 30221
30203: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
30204: LD_ADDR_VAR 0 3
30208: PUSH
30209: LD_INT 23
30211: PUSH
30212: LD_INT 24
30214: PUSH
30215: EMPTY
30216: LIST
30217: LIST
30218: ST_TO_ADDR
30219: GO 30248
30221: LD_INT 47
30223: DOUBLE
30224: EQUAL
30225: IFTRUE 30229
30227: GO 30247
30229: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
30230: LD_ADDR_VAR 0 3
30234: PUSH
30235: LD_INT 23
30237: PUSH
30238: LD_INT 24
30240: PUSH
30241: EMPTY
30242: LIST
30243: LIST
30244: ST_TO_ADDR
30245: GO 30248
30247: POP
// result := ( chassis in result ) ;
30248: LD_ADDR_VAR 0 3
30252: PUSH
30253: LD_VAR 0 1
30257: PUSH
30258: LD_VAR 0 3
30262: IN
30263: ST_TO_ADDR
// end ;
30264: LD_VAR 0 3
30268: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
30269: LD_INT 0
30271: PPUSH
30272: PPUSH
30273: PPUSH
30274: PPUSH
30275: PPUSH
30276: PPUSH
30277: PPUSH
// result := array ;
30278: LD_ADDR_VAR 0 5
30282: PUSH
30283: LD_VAR 0 1
30287: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
30288: LD_VAR 0 1
30292: NOT
30293: PUSH
30294: LD_VAR 0 2
30298: NOT
30299: OR
30300: PUSH
30301: LD_VAR 0 3
30305: NOT
30306: OR
30307: PUSH
30308: LD_VAR 0 2
30312: PUSH
30313: LD_VAR 0 1
30317: GREATER
30318: OR
30319: PUSH
30320: LD_VAR 0 3
30324: PUSH
30325: LD_VAR 0 1
30329: GREATER
30330: OR
30331: IFFALSE 30335
// exit ;
30333: GO 30631
// if direction then
30335: LD_VAR 0 4
30339: IFFALSE 30403
// begin d := 1 ;
30341: LD_ADDR_VAR 0 9
30345: PUSH
30346: LD_INT 1
30348: ST_TO_ADDR
// if i_from > i_to then
30349: LD_VAR 0 2
30353: PUSH
30354: LD_VAR 0 3
30358: GREATER
30359: IFFALSE 30385
// length := ( array - i_from ) + i_to else
30361: LD_ADDR_VAR 0 11
30365: PUSH
30366: LD_VAR 0 1
30370: PUSH
30371: LD_VAR 0 2
30375: MINUS
30376: PUSH
30377: LD_VAR 0 3
30381: PLUS
30382: ST_TO_ADDR
30383: GO 30401
// length := i_to - i_from ;
30385: LD_ADDR_VAR 0 11
30389: PUSH
30390: LD_VAR 0 3
30394: PUSH
30395: LD_VAR 0 2
30399: MINUS
30400: ST_TO_ADDR
// end else
30401: GO 30464
// begin d := - 1 ;
30403: LD_ADDR_VAR 0 9
30407: PUSH
30408: LD_INT 1
30410: NEG
30411: ST_TO_ADDR
// if i_from > i_to then
30412: LD_VAR 0 2
30416: PUSH
30417: LD_VAR 0 3
30421: GREATER
30422: IFFALSE 30442
// length := i_from - i_to else
30424: LD_ADDR_VAR 0 11
30428: PUSH
30429: LD_VAR 0 2
30433: PUSH
30434: LD_VAR 0 3
30438: MINUS
30439: ST_TO_ADDR
30440: GO 30464
// length := ( array - i_to ) + i_from ;
30442: LD_ADDR_VAR 0 11
30446: PUSH
30447: LD_VAR 0 1
30451: PUSH
30452: LD_VAR 0 3
30456: MINUS
30457: PUSH
30458: LD_VAR 0 2
30462: PLUS
30463: ST_TO_ADDR
// end ; if not length then
30464: LD_VAR 0 11
30468: NOT
30469: IFFALSE 30473
// exit ;
30471: GO 30631
// tmp := array ;
30473: LD_ADDR_VAR 0 10
30477: PUSH
30478: LD_VAR 0 1
30482: ST_TO_ADDR
// for i = 1 to length do
30483: LD_ADDR_VAR 0 6
30487: PUSH
30488: DOUBLE
30489: LD_INT 1
30491: DEC
30492: ST_TO_ADDR
30493: LD_VAR 0 11
30497: PUSH
30498: FOR_TO
30499: IFFALSE 30619
// begin for j = 1 to array do
30501: LD_ADDR_VAR 0 7
30505: PUSH
30506: DOUBLE
30507: LD_INT 1
30509: DEC
30510: ST_TO_ADDR
30511: LD_VAR 0 1
30515: PUSH
30516: FOR_TO
30517: IFFALSE 30605
// begin k := j + d ;
30519: LD_ADDR_VAR 0 8
30523: PUSH
30524: LD_VAR 0 7
30528: PUSH
30529: LD_VAR 0 9
30533: PLUS
30534: ST_TO_ADDR
// if k > array then
30535: LD_VAR 0 8
30539: PUSH
30540: LD_VAR 0 1
30544: GREATER
30545: IFFALSE 30555
// k := 1 ;
30547: LD_ADDR_VAR 0 8
30551: PUSH
30552: LD_INT 1
30554: ST_TO_ADDR
// if not k then
30555: LD_VAR 0 8
30559: NOT
30560: IFFALSE 30572
// k := array ;
30562: LD_ADDR_VAR 0 8
30566: PUSH
30567: LD_VAR 0 1
30571: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
30572: LD_ADDR_VAR 0 10
30576: PUSH
30577: LD_VAR 0 10
30581: PPUSH
30582: LD_VAR 0 8
30586: PPUSH
30587: LD_VAR 0 1
30591: PUSH
30592: LD_VAR 0 7
30596: ARRAY
30597: PPUSH
30598: CALL_OW 1
30602: ST_TO_ADDR
// end ;
30603: GO 30516
30605: POP
30606: POP
// array := tmp ;
30607: LD_ADDR_VAR 0 1
30611: PUSH
30612: LD_VAR 0 10
30616: ST_TO_ADDR
// end ;
30617: GO 30498
30619: POP
30620: POP
// result := array ;
30621: LD_ADDR_VAR 0 5
30625: PUSH
30626: LD_VAR 0 1
30630: ST_TO_ADDR
// end ;
30631: LD_VAR 0 5
30635: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
30636: LD_INT 0
30638: PPUSH
30639: PPUSH
// result := 0 ;
30640: LD_ADDR_VAR 0 3
30644: PUSH
30645: LD_INT 0
30647: ST_TO_ADDR
// if not array or not value in array then
30648: LD_VAR 0 1
30652: NOT
30653: PUSH
30654: LD_VAR 0 2
30658: PUSH
30659: LD_VAR 0 1
30663: IN
30664: NOT
30665: OR
30666: IFFALSE 30670
// exit ;
30668: GO 30724
// for i = 1 to array do
30670: LD_ADDR_VAR 0 4
30674: PUSH
30675: DOUBLE
30676: LD_INT 1
30678: DEC
30679: ST_TO_ADDR
30680: LD_VAR 0 1
30684: PUSH
30685: FOR_TO
30686: IFFALSE 30722
// if value = array [ i ] then
30688: LD_VAR 0 2
30692: PUSH
30693: LD_VAR 0 1
30697: PUSH
30698: LD_VAR 0 4
30702: ARRAY
30703: EQUAL
30704: IFFALSE 30720
// begin result := i ;
30706: LD_ADDR_VAR 0 3
30710: PUSH
30711: LD_VAR 0 4
30715: ST_TO_ADDR
// exit ;
30716: POP
30717: POP
30718: GO 30724
// end ;
30720: GO 30685
30722: POP
30723: POP
// end ;
30724: LD_VAR 0 3
30728: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
30729: LD_INT 0
30731: PPUSH
// vc_chassis := chassis ;
30732: LD_ADDR_OWVAR 37
30736: PUSH
30737: LD_VAR 0 1
30741: ST_TO_ADDR
// vc_engine := engine ;
30742: LD_ADDR_OWVAR 39
30746: PUSH
30747: LD_VAR 0 2
30751: ST_TO_ADDR
// vc_control := control ;
30752: LD_ADDR_OWVAR 38
30756: PUSH
30757: LD_VAR 0 3
30761: ST_TO_ADDR
// vc_weapon := weapon ;
30762: LD_ADDR_OWVAR 40
30766: PUSH
30767: LD_VAR 0 4
30771: ST_TO_ADDR
// vc_fuel_battery := fuel ;
30772: LD_ADDR_OWVAR 41
30776: PUSH
30777: LD_VAR 0 5
30781: ST_TO_ADDR
// end ;
30782: LD_VAR 0 6
30786: RET
// export function WantPlant ( unit ) ; var task ; begin
30787: LD_INT 0
30789: PPUSH
30790: PPUSH
// result := false ;
30791: LD_ADDR_VAR 0 2
30795: PUSH
30796: LD_INT 0
30798: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
30799: LD_ADDR_VAR 0 3
30803: PUSH
30804: LD_VAR 0 1
30808: PPUSH
30809: CALL_OW 437
30813: ST_TO_ADDR
// if task then
30814: LD_VAR 0 3
30818: IFFALSE 30846
// if task [ 1 ] [ 1 ] = p then
30820: LD_VAR 0 3
30824: PUSH
30825: LD_INT 1
30827: ARRAY
30828: PUSH
30829: LD_INT 1
30831: ARRAY
30832: PUSH
30833: LD_STRING p
30835: EQUAL
30836: IFFALSE 30846
// result := true ;
30838: LD_ADDR_VAR 0 2
30842: PUSH
30843: LD_INT 1
30845: ST_TO_ADDR
// end ;
30846: LD_VAR 0 2
30850: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
30851: LD_INT 0
30853: PPUSH
30854: PPUSH
30855: PPUSH
30856: PPUSH
// if pos < 1 then
30857: LD_VAR 0 2
30861: PUSH
30862: LD_INT 1
30864: LESS
30865: IFFALSE 30869
// exit ;
30867: GO 31172
// if pos = 1 then
30869: LD_VAR 0 2
30873: PUSH
30874: LD_INT 1
30876: EQUAL
30877: IFFALSE 30910
// result := Replace ( arr , pos [ 1 ] , value ) else
30879: LD_ADDR_VAR 0 4
30883: PUSH
30884: LD_VAR 0 1
30888: PPUSH
30889: LD_VAR 0 2
30893: PUSH
30894: LD_INT 1
30896: ARRAY
30897: PPUSH
30898: LD_VAR 0 3
30902: PPUSH
30903: CALL_OW 1
30907: ST_TO_ADDR
30908: GO 31172
// begin tmp := arr ;
30910: LD_ADDR_VAR 0 6
30914: PUSH
30915: LD_VAR 0 1
30919: ST_TO_ADDR
// s_arr := [ tmp ] ;
30920: LD_ADDR_VAR 0 7
30924: PUSH
30925: LD_VAR 0 6
30929: PUSH
30930: EMPTY
30931: LIST
30932: ST_TO_ADDR
// for i = 1 to pos - 1 do
30933: LD_ADDR_VAR 0 5
30937: PUSH
30938: DOUBLE
30939: LD_INT 1
30941: DEC
30942: ST_TO_ADDR
30943: LD_VAR 0 2
30947: PUSH
30948: LD_INT 1
30950: MINUS
30951: PUSH
30952: FOR_TO
30953: IFFALSE 30998
// begin tmp := tmp [ pos [ i ] ] ;
30955: LD_ADDR_VAR 0 6
30959: PUSH
30960: LD_VAR 0 6
30964: PUSH
30965: LD_VAR 0 2
30969: PUSH
30970: LD_VAR 0 5
30974: ARRAY
30975: ARRAY
30976: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
30977: LD_ADDR_VAR 0 7
30981: PUSH
30982: LD_VAR 0 7
30986: PUSH
30987: LD_VAR 0 6
30991: PUSH
30992: EMPTY
30993: LIST
30994: ADD
30995: ST_TO_ADDR
// end ;
30996: GO 30952
30998: POP
30999: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
31000: LD_ADDR_VAR 0 6
31004: PUSH
31005: LD_VAR 0 6
31009: PPUSH
31010: LD_VAR 0 2
31014: PUSH
31015: LD_VAR 0 2
31019: ARRAY
31020: PPUSH
31021: LD_VAR 0 3
31025: PPUSH
31026: CALL_OW 1
31030: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
31031: LD_ADDR_VAR 0 7
31035: PUSH
31036: LD_VAR 0 7
31040: PPUSH
31041: LD_VAR 0 7
31045: PPUSH
31046: LD_VAR 0 6
31050: PPUSH
31051: CALL_OW 1
31055: ST_TO_ADDR
// for i = s_arr downto 2 do
31056: LD_ADDR_VAR 0 5
31060: PUSH
31061: DOUBLE
31062: LD_VAR 0 7
31066: INC
31067: ST_TO_ADDR
31068: LD_INT 2
31070: PUSH
31071: FOR_DOWNTO
31072: IFFALSE 31156
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
31074: LD_ADDR_VAR 0 6
31078: PUSH
31079: LD_VAR 0 7
31083: PUSH
31084: LD_VAR 0 5
31088: PUSH
31089: LD_INT 1
31091: MINUS
31092: ARRAY
31093: PPUSH
31094: LD_VAR 0 2
31098: PUSH
31099: LD_VAR 0 5
31103: PUSH
31104: LD_INT 1
31106: MINUS
31107: ARRAY
31108: PPUSH
31109: LD_VAR 0 7
31113: PUSH
31114: LD_VAR 0 5
31118: ARRAY
31119: PPUSH
31120: CALL_OW 1
31124: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
31125: LD_ADDR_VAR 0 7
31129: PUSH
31130: LD_VAR 0 7
31134: PPUSH
31135: LD_VAR 0 5
31139: PUSH
31140: LD_INT 1
31142: MINUS
31143: PPUSH
31144: LD_VAR 0 6
31148: PPUSH
31149: CALL_OW 1
31153: ST_TO_ADDR
// end ;
31154: GO 31071
31156: POP
31157: POP
// result := s_arr [ 1 ] ;
31158: LD_ADDR_VAR 0 4
31162: PUSH
31163: LD_VAR 0 7
31167: PUSH
31168: LD_INT 1
31170: ARRAY
31171: ST_TO_ADDR
// end ; end ;
31172: LD_VAR 0 4
31176: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
31177: LD_INT 0
31179: PPUSH
31180: PPUSH
// if not list then
31181: LD_VAR 0 1
31185: NOT
31186: IFFALSE 31190
// exit ;
31188: GO 31281
// i := list [ pos1 ] ;
31190: LD_ADDR_VAR 0 5
31194: PUSH
31195: LD_VAR 0 1
31199: PUSH
31200: LD_VAR 0 2
31204: ARRAY
31205: ST_TO_ADDR
// if not i then
31206: LD_VAR 0 5
31210: NOT
31211: IFFALSE 31215
// exit ;
31213: GO 31281
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
31215: LD_ADDR_VAR 0 1
31219: PUSH
31220: LD_VAR 0 1
31224: PPUSH
31225: LD_VAR 0 2
31229: PPUSH
31230: LD_VAR 0 1
31234: PUSH
31235: LD_VAR 0 3
31239: ARRAY
31240: PPUSH
31241: CALL_OW 1
31245: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
31246: LD_ADDR_VAR 0 1
31250: PUSH
31251: LD_VAR 0 1
31255: PPUSH
31256: LD_VAR 0 3
31260: PPUSH
31261: LD_VAR 0 5
31265: PPUSH
31266: CALL_OW 1
31270: ST_TO_ADDR
// result := list ;
31271: LD_ADDR_VAR 0 4
31275: PUSH
31276: LD_VAR 0 1
31280: ST_TO_ADDR
// end ;
31281: LD_VAR 0 4
31285: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
31286: LD_INT 0
31288: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
31289: LD_ADDR_VAR 0 5
31293: PUSH
31294: LD_VAR 0 1
31298: PPUSH
31299: CALL_OW 250
31303: PPUSH
31304: LD_VAR 0 1
31308: PPUSH
31309: CALL_OW 251
31313: PPUSH
31314: LD_VAR 0 2
31318: PPUSH
31319: LD_VAR 0 3
31323: PPUSH
31324: LD_VAR 0 4
31328: PPUSH
31329: CALL 31339 0 5
31333: ST_TO_ADDR
// end ;
31334: LD_VAR 0 5
31338: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
31339: LD_INT 0
31341: PPUSH
31342: PPUSH
31343: PPUSH
31344: PPUSH
// if not list then
31345: LD_VAR 0 3
31349: NOT
31350: IFFALSE 31354
// exit ;
31352: GO 31742
// result := [ ] ;
31354: LD_ADDR_VAR 0 6
31358: PUSH
31359: EMPTY
31360: ST_TO_ADDR
// for i in list do
31361: LD_ADDR_VAR 0 7
31365: PUSH
31366: LD_VAR 0 3
31370: PUSH
31371: FOR_IN
31372: IFFALSE 31574
// begin tmp := GetDistUnitXY ( i , x , y ) ;
31374: LD_ADDR_VAR 0 9
31378: PUSH
31379: LD_VAR 0 7
31383: PPUSH
31384: LD_VAR 0 1
31388: PPUSH
31389: LD_VAR 0 2
31393: PPUSH
31394: CALL_OW 297
31398: ST_TO_ADDR
// if not result then
31399: LD_VAR 0 6
31403: NOT
31404: IFFALSE 31430
// result := [ [ i , tmp ] ] else
31406: LD_ADDR_VAR 0 6
31410: PUSH
31411: LD_VAR 0 7
31415: PUSH
31416: LD_VAR 0 9
31420: PUSH
31421: EMPTY
31422: LIST
31423: LIST
31424: PUSH
31425: EMPTY
31426: LIST
31427: ST_TO_ADDR
31428: GO 31572
// begin if result [ result ] [ 2 ] < tmp then
31430: LD_VAR 0 6
31434: PUSH
31435: LD_VAR 0 6
31439: ARRAY
31440: PUSH
31441: LD_INT 2
31443: ARRAY
31444: PUSH
31445: LD_VAR 0 9
31449: LESS
31450: IFFALSE 31492
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
31452: LD_ADDR_VAR 0 6
31456: PUSH
31457: LD_VAR 0 6
31461: PPUSH
31462: LD_VAR 0 6
31466: PUSH
31467: LD_INT 1
31469: PLUS
31470: PPUSH
31471: LD_VAR 0 7
31475: PUSH
31476: LD_VAR 0 9
31480: PUSH
31481: EMPTY
31482: LIST
31483: LIST
31484: PPUSH
31485: CALL_OW 2
31489: ST_TO_ADDR
31490: GO 31572
// for j = 1 to result do
31492: LD_ADDR_VAR 0 8
31496: PUSH
31497: DOUBLE
31498: LD_INT 1
31500: DEC
31501: ST_TO_ADDR
31502: LD_VAR 0 6
31506: PUSH
31507: FOR_TO
31508: IFFALSE 31570
// begin if tmp < result [ j ] [ 2 ] then
31510: LD_VAR 0 9
31514: PUSH
31515: LD_VAR 0 6
31519: PUSH
31520: LD_VAR 0 8
31524: ARRAY
31525: PUSH
31526: LD_INT 2
31528: ARRAY
31529: LESS
31530: IFFALSE 31568
// begin result := Insert ( result , j , [ i , tmp ] ) ;
31532: LD_ADDR_VAR 0 6
31536: PUSH
31537: LD_VAR 0 6
31541: PPUSH
31542: LD_VAR 0 8
31546: PPUSH
31547: LD_VAR 0 7
31551: PUSH
31552: LD_VAR 0 9
31556: PUSH
31557: EMPTY
31558: LIST
31559: LIST
31560: PPUSH
31561: CALL_OW 2
31565: ST_TO_ADDR
// break ;
31566: GO 31570
// end ; end ;
31568: GO 31507
31570: POP
31571: POP
// end ; end ;
31572: GO 31371
31574: POP
31575: POP
// if result and not asc then
31576: LD_VAR 0 6
31580: PUSH
31581: LD_VAR 0 4
31585: NOT
31586: AND
31587: IFFALSE 31662
// begin tmp := result ;
31589: LD_ADDR_VAR 0 9
31593: PUSH
31594: LD_VAR 0 6
31598: ST_TO_ADDR
// for i = tmp downto 1 do
31599: LD_ADDR_VAR 0 7
31603: PUSH
31604: DOUBLE
31605: LD_VAR 0 9
31609: INC
31610: ST_TO_ADDR
31611: LD_INT 1
31613: PUSH
31614: FOR_DOWNTO
31615: IFFALSE 31660
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
31617: LD_ADDR_VAR 0 6
31621: PUSH
31622: LD_VAR 0 6
31626: PPUSH
31627: LD_VAR 0 9
31631: PUSH
31632: LD_VAR 0 7
31636: MINUS
31637: PUSH
31638: LD_INT 1
31640: PLUS
31641: PPUSH
31642: LD_VAR 0 9
31646: PUSH
31647: LD_VAR 0 7
31651: ARRAY
31652: PPUSH
31653: CALL_OW 1
31657: ST_TO_ADDR
31658: GO 31614
31660: POP
31661: POP
// end ; tmp := [ ] ;
31662: LD_ADDR_VAR 0 9
31666: PUSH
31667: EMPTY
31668: ST_TO_ADDR
// if mode then
31669: LD_VAR 0 5
31673: IFFALSE 31742
// begin for i = 1 to result do
31675: LD_ADDR_VAR 0 7
31679: PUSH
31680: DOUBLE
31681: LD_INT 1
31683: DEC
31684: ST_TO_ADDR
31685: LD_VAR 0 6
31689: PUSH
31690: FOR_TO
31691: IFFALSE 31730
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
31693: LD_ADDR_VAR 0 9
31697: PUSH
31698: LD_VAR 0 9
31702: PPUSH
31703: LD_VAR 0 7
31707: PPUSH
31708: LD_VAR 0 6
31712: PUSH
31713: LD_VAR 0 7
31717: ARRAY
31718: PUSH
31719: LD_INT 1
31721: ARRAY
31722: PPUSH
31723: CALL_OW 1
31727: ST_TO_ADDR
31728: GO 31690
31730: POP
31731: POP
// result := tmp ;
31732: LD_ADDR_VAR 0 6
31736: PUSH
31737: LD_VAR 0 9
31741: ST_TO_ADDR
// end ; end ;
31742: LD_VAR 0 6
31746: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
31747: LD_INT 0
31749: PPUSH
31750: PPUSH
31751: PPUSH
31752: PPUSH
31753: PPUSH
31754: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
31755: LD_ADDR_VAR 0 5
31759: PUSH
31760: LD_INT 0
31762: PUSH
31763: LD_INT 0
31765: PUSH
31766: LD_INT 0
31768: PUSH
31769: EMPTY
31770: PUSH
31771: EMPTY
31772: LIST
31773: LIST
31774: LIST
31775: LIST
31776: ST_TO_ADDR
// if not x or not y then
31777: LD_VAR 0 2
31781: NOT
31782: PUSH
31783: LD_VAR 0 3
31787: NOT
31788: OR
31789: IFFALSE 31793
// exit ;
31791: GO 33439
// if not range then
31793: LD_VAR 0 4
31797: NOT
31798: IFFALSE 31808
// range := 10 ;
31800: LD_ADDR_VAR 0 4
31804: PUSH
31805: LD_INT 10
31807: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31808: LD_ADDR_VAR 0 8
31812: PUSH
31813: LD_INT 81
31815: PUSH
31816: LD_VAR 0 1
31820: PUSH
31821: EMPTY
31822: LIST
31823: LIST
31824: PUSH
31825: LD_INT 92
31827: PUSH
31828: LD_VAR 0 2
31832: PUSH
31833: LD_VAR 0 3
31837: PUSH
31838: LD_VAR 0 4
31842: PUSH
31843: EMPTY
31844: LIST
31845: LIST
31846: LIST
31847: LIST
31848: PUSH
31849: LD_INT 3
31851: PUSH
31852: LD_INT 21
31854: PUSH
31855: LD_INT 3
31857: PUSH
31858: EMPTY
31859: LIST
31860: LIST
31861: PUSH
31862: EMPTY
31863: LIST
31864: LIST
31865: PUSH
31866: EMPTY
31867: LIST
31868: LIST
31869: LIST
31870: PPUSH
31871: CALL_OW 69
31875: ST_TO_ADDR
// if not tmp then
31876: LD_VAR 0 8
31880: NOT
31881: IFFALSE 31885
// exit ;
31883: GO 33439
// for i in tmp do
31885: LD_ADDR_VAR 0 6
31889: PUSH
31890: LD_VAR 0 8
31894: PUSH
31895: FOR_IN
31896: IFFALSE 33414
// begin points := [ 0 , 0 , 0 ] ;
31898: LD_ADDR_VAR 0 9
31902: PUSH
31903: LD_INT 0
31905: PUSH
31906: LD_INT 0
31908: PUSH
31909: LD_INT 0
31911: PUSH
31912: EMPTY
31913: LIST
31914: LIST
31915: LIST
31916: ST_TO_ADDR
// bpoints := 1 ;
31917: LD_ADDR_VAR 0 10
31921: PUSH
31922: LD_INT 1
31924: ST_TO_ADDR
// case GetType ( i ) of unit_human :
31925: LD_VAR 0 6
31929: PPUSH
31930: CALL_OW 247
31934: PUSH
31935: LD_INT 1
31937: DOUBLE
31938: EQUAL
31939: IFTRUE 31943
31941: GO 32521
31943: POP
// begin if GetClass ( i ) = 1 then
31944: LD_VAR 0 6
31948: PPUSH
31949: CALL_OW 257
31953: PUSH
31954: LD_INT 1
31956: EQUAL
31957: IFFALSE 31978
// points := [ 10 , 5 , 3 ] ;
31959: LD_ADDR_VAR 0 9
31963: PUSH
31964: LD_INT 10
31966: PUSH
31967: LD_INT 5
31969: PUSH
31970: LD_INT 3
31972: PUSH
31973: EMPTY
31974: LIST
31975: LIST
31976: LIST
31977: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
31978: LD_VAR 0 6
31982: PPUSH
31983: CALL_OW 257
31987: PUSH
31988: LD_INT 2
31990: PUSH
31991: LD_INT 3
31993: PUSH
31994: LD_INT 4
31996: PUSH
31997: EMPTY
31998: LIST
31999: LIST
32000: LIST
32001: IN
32002: IFFALSE 32023
// points := [ 3 , 2 , 1 ] ;
32004: LD_ADDR_VAR 0 9
32008: PUSH
32009: LD_INT 3
32011: PUSH
32012: LD_INT 2
32014: PUSH
32015: LD_INT 1
32017: PUSH
32018: EMPTY
32019: LIST
32020: LIST
32021: LIST
32022: ST_TO_ADDR
// if GetClass ( i ) = 5 then
32023: LD_VAR 0 6
32027: PPUSH
32028: CALL_OW 257
32032: PUSH
32033: LD_INT 5
32035: EQUAL
32036: IFFALSE 32057
// points := [ 130 , 5 , 2 ] ;
32038: LD_ADDR_VAR 0 9
32042: PUSH
32043: LD_INT 130
32045: PUSH
32046: LD_INT 5
32048: PUSH
32049: LD_INT 2
32051: PUSH
32052: EMPTY
32053: LIST
32054: LIST
32055: LIST
32056: ST_TO_ADDR
// if GetClass ( i ) = 8 then
32057: LD_VAR 0 6
32061: PPUSH
32062: CALL_OW 257
32066: PUSH
32067: LD_INT 8
32069: EQUAL
32070: IFFALSE 32091
// points := [ 35 , 35 , 30 ] ;
32072: LD_ADDR_VAR 0 9
32076: PUSH
32077: LD_INT 35
32079: PUSH
32080: LD_INT 35
32082: PUSH
32083: LD_INT 30
32085: PUSH
32086: EMPTY
32087: LIST
32088: LIST
32089: LIST
32090: ST_TO_ADDR
// if GetClass ( i ) = 9 then
32091: LD_VAR 0 6
32095: PPUSH
32096: CALL_OW 257
32100: PUSH
32101: LD_INT 9
32103: EQUAL
32104: IFFALSE 32125
// points := [ 20 , 55 , 40 ] ;
32106: LD_ADDR_VAR 0 9
32110: PUSH
32111: LD_INT 20
32113: PUSH
32114: LD_INT 55
32116: PUSH
32117: LD_INT 40
32119: PUSH
32120: EMPTY
32121: LIST
32122: LIST
32123: LIST
32124: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
32125: LD_VAR 0 6
32129: PPUSH
32130: CALL_OW 257
32134: PUSH
32135: LD_INT 12
32137: PUSH
32138: LD_INT 16
32140: PUSH
32141: EMPTY
32142: LIST
32143: LIST
32144: IN
32145: IFFALSE 32166
// points := [ 5 , 3 , 2 ] ;
32147: LD_ADDR_VAR 0 9
32151: PUSH
32152: LD_INT 5
32154: PUSH
32155: LD_INT 3
32157: PUSH
32158: LD_INT 2
32160: PUSH
32161: EMPTY
32162: LIST
32163: LIST
32164: LIST
32165: ST_TO_ADDR
// if GetClass ( i ) = 17 then
32166: LD_VAR 0 6
32170: PPUSH
32171: CALL_OW 257
32175: PUSH
32176: LD_INT 17
32178: EQUAL
32179: IFFALSE 32200
// points := [ 100 , 50 , 75 ] ;
32181: LD_ADDR_VAR 0 9
32185: PUSH
32186: LD_INT 100
32188: PUSH
32189: LD_INT 50
32191: PUSH
32192: LD_INT 75
32194: PUSH
32195: EMPTY
32196: LIST
32197: LIST
32198: LIST
32199: ST_TO_ADDR
// if GetClass ( i ) = 15 then
32200: LD_VAR 0 6
32204: PPUSH
32205: CALL_OW 257
32209: PUSH
32210: LD_INT 15
32212: EQUAL
32213: IFFALSE 32234
// points := [ 10 , 5 , 3 ] ;
32215: LD_ADDR_VAR 0 9
32219: PUSH
32220: LD_INT 10
32222: PUSH
32223: LD_INT 5
32225: PUSH
32226: LD_INT 3
32228: PUSH
32229: EMPTY
32230: LIST
32231: LIST
32232: LIST
32233: ST_TO_ADDR
// if GetClass ( i ) = 14 then
32234: LD_VAR 0 6
32238: PPUSH
32239: CALL_OW 257
32243: PUSH
32244: LD_INT 14
32246: EQUAL
32247: IFFALSE 32268
// points := [ 10 , 0 , 0 ] ;
32249: LD_ADDR_VAR 0 9
32253: PUSH
32254: LD_INT 10
32256: PUSH
32257: LD_INT 0
32259: PUSH
32260: LD_INT 0
32262: PUSH
32263: EMPTY
32264: LIST
32265: LIST
32266: LIST
32267: ST_TO_ADDR
// if GetClass ( i ) = 11 then
32268: LD_VAR 0 6
32272: PPUSH
32273: CALL_OW 257
32277: PUSH
32278: LD_INT 11
32280: EQUAL
32281: IFFALSE 32302
// points := [ 30 , 10 , 5 ] ;
32283: LD_ADDR_VAR 0 9
32287: PUSH
32288: LD_INT 30
32290: PUSH
32291: LD_INT 10
32293: PUSH
32294: LD_INT 5
32296: PUSH
32297: EMPTY
32298: LIST
32299: LIST
32300: LIST
32301: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
32302: LD_VAR 0 1
32306: PPUSH
32307: LD_INT 5
32309: PPUSH
32310: CALL_OW 321
32314: PUSH
32315: LD_INT 2
32317: EQUAL
32318: IFFALSE 32335
// bpoints := bpoints * 1.8 ;
32320: LD_ADDR_VAR 0 10
32324: PUSH
32325: LD_VAR 0 10
32329: PUSH
32330: LD_REAL  1.80000000000000E+0000
32333: MUL
32334: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
32335: LD_VAR 0 6
32339: PPUSH
32340: CALL_OW 257
32344: PUSH
32345: LD_INT 1
32347: PUSH
32348: LD_INT 2
32350: PUSH
32351: LD_INT 3
32353: PUSH
32354: LD_INT 4
32356: PUSH
32357: EMPTY
32358: LIST
32359: LIST
32360: LIST
32361: LIST
32362: IN
32363: PUSH
32364: LD_VAR 0 1
32368: PPUSH
32369: LD_INT 51
32371: PPUSH
32372: CALL_OW 321
32376: PUSH
32377: LD_INT 2
32379: EQUAL
32380: AND
32381: IFFALSE 32398
// bpoints := bpoints * 1.2 ;
32383: LD_ADDR_VAR 0 10
32387: PUSH
32388: LD_VAR 0 10
32392: PUSH
32393: LD_REAL  1.20000000000000E+0000
32396: MUL
32397: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
32398: LD_VAR 0 6
32402: PPUSH
32403: CALL_OW 257
32407: PUSH
32408: LD_INT 5
32410: PUSH
32411: LD_INT 7
32413: PUSH
32414: LD_INT 9
32416: PUSH
32417: EMPTY
32418: LIST
32419: LIST
32420: LIST
32421: IN
32422: PUSH
32423: LD_VAR 0 1
32427: PPUSH
32428: LD_INT 52
32430: PPUSH
32431: CALL_OW 321
32435: PUSH
32436: LD_INT 2
32438: EQUAL
32439: AND
32440: IFFALSE 32457
// bpoints := bpoints * 1.5 ;
32442: LD_ADDR_VAR 0 10
32446: PUSH
32447: LD_VAR 0 10
32451: PUSH
32452: LD_REAL  1.50000000000000E+0000
32455: MUL
32456: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
32457: LD_VAR 0 1
32461: PPUSH
32462: LD_INT 66
32464: PPUSH
32465: CALL_OW 321
32469: PUSH
32470: LD_INT 2
32472: EQUAL
32473: IFFALSE 32490
// bpoints := bpoints * 1.1 ;
32475: LD_ADDR_VAR 0 10
32479: PUSH
32480: LD_VAR 0 10
32484: PUSH
32485: LD_REAL  1.10000000000000E+0000
32488: MUL
32489: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
32490: LD_ADDR_VAR 0 10
32494: PUSH
32495: LD_VAR 0 10
32499: PUSH
32500: LD_VAR 0 6
32504: PPUSH
32505: LD_INT 1
32507: PPUSH
32508: CALL_OW 259
32512: PUSH
32513: LD_REAL  1.15000000000000E+0000
32516: MUL
32517: MUL
32518: ST_TO_ADDR
// end ; unit_vehicle :
32519: GO 33343
32521: LD_INT 2
32523: DOUBLE
32524: EQUAL
32525: IFTRUE 32529
32527: GO 33331
32529: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
32530: LD_VAR 0 6
32534: PPUSH
32535: CALL_OW 264
32539: PUSH
32540: LD_INT 2
32542: PUSH
32543: LD_INT 42
32545: PUSH
32546: LD_INT 24
32548: PUSH
32549: EMPTY
32550: LIST
32551: LIST
32552: LIST
32553: IN
32554: IFFALSE 32575
// points := [ 25 , 5 , 3 ] ;
32556: LD_ADDR_VAR 0 9
32560: PUSH
32561: LD_INT 25
32563: PUSH
32564: LD_INT 5
32566: PUSH
32567: LD_INT 3
32569: PUSH
32570: EMPTY
32571: LIST
32572: LIST
32573: LIST
32574: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
32575: LD_VAR 0 6
32579: PPUSH
32580: CALL_OW 264
32584: PUSH
32585: LD_INT 4
32587: PUSH
32588: LD_INT 43
32590: PUSH
32591: LD_INT 25
32593: PUSH
32594: EMPTY
32595: LIST
32596: LIST
32597: LIST
32598: IN
32599: IFFALSE 32620
// points := [ 40 , 15 , 5 ] ;
32601: LD_ADDR_VAR 0 9
32605: PUSH
32606: LD_INT 40
32608: PUSH
32609: LD_INT 15
32611: PUSH
32612: LD_INT 5
32614: PUSH
32615: EMPTY
32616: LIST
32617: LIST
32618: LIST
32619: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
32620: LD_VAR 0 6
32624: PPUSH
32625: CALL_OW 264
32629: PUSH
32630: LD_INT 3
32632: PUSH
32633: LD_INT 23
32635: PUSH
32636: EMPTY
32637: LIST
32638: LIST
32639: IN
32640: IFFALSE 32661
// points := [ 7 , 25 , 8 ] ;
32642: LD_ADDR_VAR 0 9
32646: PUSH
32647: LD_INT 7
32649: PUSH
32650: LD_INT 25
32652: PUSH
32653: LD_INT 8
32655: PUSH
32656: EMPTY
32657: LIST
32658: LIST
32659: LIST
32660: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
32661: LD_VAR 0 6
32665: PPUSH
32666: CALL_OW 264
32670: PUSH
32671: LD_INT 5
32673: PUSH
32674: LD_INT 27
32676: PUSH
32677: LD_INT 44
32679: PUSH
32680: EMPTY
32681: LIST
32682: LIST
32683: LIST
32684: IN
32685: IFFALSE 32706
// points := [ 14 , 50 , 16 ] ;
32687: LD_ADDR_VAR 0 9
32691: PUSH
32692: LD_INT 14
32694: PUSH
32695: LD_INT 50
32697: PUSH
32698: LD_INT 16
32700: PUSH
32701: EMPTY
32702: LIST
32703: LIST
32704: LIST
32705: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
32706: LD_VAR 0 6
32710: PPUSH
32711: CALL_OW 264
32715: PUSH
32716: LD_INT 6
32718: PUSH
32719: LD_INT 46
32721: PUSH
32722: EMPTY
32723: LIST
32724: LIST
32725: IN
32726: IFFALSE 32747
// points := [ 32 , 120 , 70 ] ;
32728: LD_ADDR_VAR 0 9
32732: PUSH
32733: LD_INT 32
32735: PUSH
32736: LD_INT 120
32738: PUSH
32739: LD_INT 70
32741: PUSH
32742: EMPTY
32743: LIST
32744: LIST
32745: LIST
32746: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
32747: LD_VAR 0 6
32751: PPUSH
32752: CALL_OW 264
32756: PUSH
32757: LD_INT 7
32759: PUSH
32760: LD_INT 28
32762: PUSH
32763: LD_INT 45
32765: PUSH
32766: EMPTY
32767: LIST
32768: LIST
32769: LIST
32770: IN
32771: IFFALSE 32792
// points := [ 35 , 20 , 45 ] ;
32773: LD_ADDR_VAR 0 9
32777: PUSH
32778: LD_INT 35
32780: PUSH
32781: LD_INT 20
32783: PUSH
32784: LD_INT 45
32786: PUSH
32787: EMPTY
32788: LIST
32789: LIST
32790: LIST
32791: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
32792: LD_VAR 0 6
32796: PPUSH
32797: CALL_OW 264
32801: PUSH
32802: LD_INT 47
32804: PUSH
32805: EMPTY
32806: LIST
32807: IN
32808: IFFALSE 32829
// points := [ 67 , 45 , 75 ] ;
32810: LD_ADDR_VAR 0 9
32814: PUSH
32815: LD_INT 67
32817: PUSH
32818: LD_INT 45
32820: PUSH
32821: LD_INT 75
32823: PUSH
32824: EMPTY
32825: LIST
32826: LIST
32827: LIST
32828: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
32829: LD_VAR 0 6
32833: PPUSH
32834: CALL_OW 264
32838: PUSH
32839: LD_INT 26
32841: PUSH
32842: EMPTY
32843: LIST
32844: IN
32845: IFFALSE 32866
// points := [ 120 , 30 , 80 ] ;
32847: LD_ADDR_VAR 0 9
32851: PUSH
32852: LD_INT 120
32854: PUSH
32855: LD_INT 30
32857: PUSH
32858: LD_INT 80
32860: PUSH
32861: EMPTY
32862: LIST
32863: LIST
32864: LIST
32865: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
32866: LD_VAR 0 6
32870: PPUSH
32871: CALL_OW 264
32875: PUSH
32876: LD_INT 22
32878: PUSH
32879: EMPTY
32880: LIST
32881: IN
32882: IFFALSE 32903
// points := [ 40 , 1 , 1 ] ;
32884: LD_ADDR_VAR 0 9
32888: PUSH
32889: LD_INT 40
32891: PUSH
32892: LD_INT 1
32894: PUSH
32895: LD_INT 1
32897: PUSH
32898: EMPTY
32899: LIST
32900: LIST
32901: LIST
32902: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
32903: LD_VAR 0 6
32907: PPUSH
32908: CALL_OW 264
32912: PUSH
32913: LD_INT 29
32915: PUSH
32916: EMPTY
32917: LIST
32918: IN
32919: IFFALSE 32940
// points := [ 70 , 200 , 400 ] ;
32921: LD_ADDR_VAR 0 9
32925: PUSH
32926: LD_INT 70
32928: PUSH
32929: LD_INT 200
32931: PUSH
32932: LD_INT 400
32934: PUSH
32935: EMPTY
32936: LIST
32937: LIST
32938: LIST
32939: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
32940: LD_VAR 0 6
32944: PPUSH
32945: CALL_OW 264
32949: PUSH
32950: LD_INT 14
32952: PUSH
32953: LD_INT 53
32955: PUSH
32956: EMPTY
32957: LIST
32958: LIST
32959: IN
32960: IFFALSE 32981
// points := [ 40 , 10 , 20 ] ;
32962: LD_ADDR_VAR 0 9
32966: PUSH
32967: LD_INT 40
32969: PUSH
32970: LD_INT 10
32972: PUSH
32973: LD_INT 20
32975: PUSH
32976: EMPTY
32977: LIST
32978: LIST
32979: LIST
32980: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
32981: LD_VAR 0 6
32985: PPUSH
32986: CALL_OW 264
32990: PUSH
32991: LD_INT 9
32993: PUSH
32994: EMPTY
32995: LIST
32996: IN
32997: IFFALSE 33018
// points := [ 5 , 70 , 20 ] ;
32999: LD_ADDR_VAR 0 9
33003: PUSH
33004: LD_INT 5
33006: PUSH
33007: LD_INT 70
33009: PUSH
33010: LD_INT 20
33012: PUSH
33013: EMPTY
33014: LIST
33015: LIST
33016: LIST
33017: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
33018: LD_VAR 0 6
33022: PPUSH
33023: CALL_OW 264
33027: PUSH
33028: LD_INT 10
33030: PUSH
33031: EMPTY
33032: LIST
33033: IN
33034: IFFALSE 33055
// points := [ 35 , 110 , 70 ] ;
33036: LD_ADDR_VAR 0 9
33040: PUSH
33041: LD_INT 35
33043: PUSH
33044: LD_INT 110
33046: PUSH
33047: LD_INT 70
33049: PUSH
33050: EMPTY
33051: LIST
33052: LIST
33053: LIST
33054: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
33055: LD_VAR 0 6
33059: PPUSH
33060: CALL_OW 265
33064: PUSH
33065: LD_INT 25
33067: EQUAL
33068: IFFALSE 33089
// points := [ 80 , 65 , 100 ] ;
33070: LD_ADDR_VAR 0 9
33074: PUSH
33075: LD_INT 80
33077: PUSH
33078: LD_INT 65
33080: PUSH
33081: LD_INT 100
33083: PUSH
33084: EMPTY
33085: LIST
33086: LIST
33087: LIST
33088: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
33089: LD_VAR 0 6
33093: PPUSH
33094: CALL_OW 263
33098: PUSH
33099: LD_INT 1
33101: EQUAL
33102: IFFALSE 33137
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
33104: LD_ADDR_VAR 0 10
33108: PUSH
33109: LD_VAR 0 10
33113: PUSH
33114: LD_VAR 0 6
33118: PPUSH
33119: CALL_OW 311
33123: PPUSH
33124: LD_INT 3
33126: PPUSH
33127: CALL_OW 259
33131: PUSH
33132: LD_INT 4
33134: MUL
33135: MUL
33136: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
33137: LD_VAR 0 6
33141: PPUSH
33142: CALL_OW 263
33146: PUSH
33147: LD_INT 2
33149: EQUAL
33150: IFFALSE 33201
// begin j := IsControledBy ( i ) ;
33152: LD_ADDR_VAR 0 7
33156: PUSH
33157: LD_VAR 0 6
33161: PPUSH
33162: CALL_OW 312
33166: ST_TO_ADDR
// if j then
33167: LD_VAR 0 7
33171: IFFALSE 33201
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
33173: LD_ADDR_VAR 0 10
33177: PUSH
33178: LD_VAR 0 10
33182: PUSH
33183: LD_VAR 0 7
33187: PPUSH
33188: LD_INT 3
33190: PPUSH
33191: CALL_OW 259
33195: PUSH
33196: LD_INT 3
33198: MUL
33199: MUL
33200: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
33201: LD_VAR 0 6
33205: PPUSH
33206: CALL_OW 264
33210: PUSH
33211: LD_INT 5
33213: PUSH
33214: LD_INT 6
33216: PUSH
33217: LD_INT 46
33219: PUSH
33220: LD_INT 44
33222: PUSH
33223: LD_INT 47
33225: PUSH
33226: LD_INT 45
33228: PUSH
33229: LD_INT 28
33231: PUSH
33232: LD_INT 7
33234: PUSH
33235: LD_INT 27
33237: PUSH
33238: LD_INT 29
33240: PUSH
33241: EMPTY
33242: LIST
33243: LIST
33244: LIST
33245: LIST
33246: LIST
33247: LIST
33248: LIST
33249: LIST
33250: LIST
33251: LIST
33252: IN
33253: PUSH
33254: LD_VAR 0 1
33258: PPUSH
33259: LD_INT 52
33261: PPUSH
33262: CALL_OW 321
33266: PUSH
33267: LD_INT 2
33269: EQUAL
33270: AND
33271: IFFALSE 33288
// bpoints := bpoints * 1.2 ;
33273: LD_ADDR_VAR 0 10
33277: PUSH
33278: LD_VAR 0 10
33282: PUSH
33283: LD_REAL  1.20000000000000E+0000
33286: MUL
33287: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
33288: LD_VAR 0 6
33292: PPUSH
33293: CALL_OW 264
33297: PUSH
33298: LD_INT 6
33300: PUSH
33301: LD_INT 46
33303: PUSH
33304: LD_INT 47
33306: PUSH
33307: EMPTY
33308: LIST
33309: LIST
33310: LIST
33311: IN
33312: IFFALSE 33329
// bpoints := bpoints * 1.2 ;
33314: LD_ADDR_VAR 0 10
33318: PUSH
33319: LD_VAR 0 10
33323: PUSH
33324: LD_REAL  1.20000000000000E+0000
33327: MUL
33328: ST_TO_ADDR
// end ; unit_building :
33329: GO 33343
33331: LD_INT 3
33333: DOUBLE
33334: EQUAL
33335: IFTRUE 33339
33337: GO 33342
33339: POP
// ; end ;
33340: GO 33343
33342: POP
// for j = 1 to 3 do
33343: LD_ADDR_VAR 0 7
33347: PUSH
33348: DOUBLE
33349: LD_INT 1
33351: DEC
33352: ST_TO_ADDR
33353: LD_INT 3
33355: PUSH
33356: FOR_TO
33357: IFFALSE 33410
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
33359: LD_ADDR_VAR 0 5
33363: PUSH
33364: LD_VAR 0 5
33368: PPUSH
33369: LD_VAR 0 7
33373: PPUSH
33374: LD_VAR 0 5
33378: PUSH
33379: LD_VAR 0 7
33383: ARRAY
33384: PUSH
33385: LD_VAR 0 9
33389: PUSH
33390: LD_VAR 0 7
33394: ARRAY
33395: PUSH
33396: LD_VAR 0 10
33400: MUL
33401: PLUS
33402: PPUSH
33403: CALL_OW 1
33407: ST_TO_ADDR
33408: GO 33356
33410: POP
33411: POP
// end ;
33412: GO 31895
33414: POP
33415: POP
// result := Replace ( result , 4 , tmp ) ;
33416: LD_ADDR_VAR 0 5
33420: PUSH
33421: LD_VAR 0 5
33425: PPUSH
33426: LD_INT 4
33428: PPUSH
33429: LD_VAR 0 8
33433: PPUSH
33434: CALL_OW 1
33438: ST_TO_ADDR
// end ;
33439: LD_VAR 0 5
33443: RET
// export function DangerAtRange ( unit , range ) ; begin
33444: LD_INT 0
33446: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
33447: LD_ADDR_VAR 0 3
33451: PUSH
33452: LD_VAR 0 1
33456: PPUSH
33457: CALL_OW 255
33461: PPUSH
33462: LD_VAR 0 1
33466: PPUSH
33467: CALL_OW 250
33471: PPUSH
33472: LD_VAR 0 1
33476: PPUSH
33477: CALL_OW 251
33481: PPUSH
33482: LD_VAR 0 2
33486: PPUSH
33487: CALL 31747 0 4
33491: ST_TO_ADDR
// end ;
33492: LD_VAR 0 3
33496: RET
// export function DangerInArea ( side , area ) ; begin
33497: LD_INT 0
33499: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
33500: LD_ADDR_VAR 0 3
33504: PUSH
33505: LD_VAR 0 2
33509: PPUSH
33510: LD_INT 81
33512: PUSH
33513: LD_VAR 0 1
33517: PUSH
33518: EMPTY
33519: LIST
33520: LIST
33521: PPUSH
33522: CALL_OW 70
33526: ST_TO_ADDR
// end ;
33527: LD_VAR 0 3
33531: RET
// export function IsExtension ( b ) ; begin
33532: LD_INT 0
33534: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
33535: LD_ADDR_VAR 0 2
33539: PUSH
33540: LD_VAR 0 1
33544: PUSH
33545: LD_INT 23
33547: PUSH
33548: LD_INT 20
33550: PUSH
33551: LD_INT 22
33553: PUSH
33554: LD_INT 17
33556: PUSH
33557: LD_INT 24
33559: PUSH
33560: LD_INT 21
33562: PUSH
33563: LD_INT 19
33565: PUSH
33566: LD_INT 16
33568: PUSH
33569: LD_INT 25
33571: PUSH
33572: LD_INT 18
33574: PUSH
33575: EMPTY
33576: LIST
33577: LIST
33578: LIST
33579: LIST
33580: LIST
33581: LIST
33582: LIST
33583: LIST
33584: LIST
33585: LIST
33586: IN
33587: ST_TO_ADDR
// end ;
33588: LD_VAR 0 2
33592: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
33593: LD_INT 0
33595: PPUSH
33596: PPUSH
33597: PPUSH
// result := [ ] ;
33598: LD_ADDR_VAR 0 3
33602: PUSH
33603: EMPTY
33604: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
33605: LD_ADDR_VAR 0 4
33609: PUSH
33610: LD_VAR 0 2
33614: PPUSH
33615: LD_INT 21
33617: PUSH
33618: LD_INT 3
33620: PUSH
33621: EMPTY
33622: LIST
33623: LIST
33624: PPUSH
33625: CALL_OW 70
33629: ST_TO_ADDR
// if not tmp then
33630: LD_VAR 0 4
33634: NOT
33635: IFFALSE 33639
// exit ;
33637: GO 33697
// for i in tmp do
33639: LD_ADDR_VAR 0 5
33643: PUSH
33644: LD_VAR 0 4
33648: PUSH
33649: FOR_IN
33650: IFFALSE 33685
// if GetBase ( i ) <> base then
33652: LD_VAR 0 5
33656: PPUSH
33657: CALL_OW 274
33661: PUSH
33662: LD_VAR 0 1
33666: NONEQUAL
33667: IFFALSE 33683
// ComLinkToBase ( base , i ) ;
33669: LD_VAR 0 1
33673: PPUSH
33674: LD_VAR 0 5
33678: PPUSH
33679: CALL_OW 169
33683: GO 33649
33685: POP
33686: POP
// result := tmp ;
33687: LD_ADDR_VAR 0 3
33691: PUSH
33692: LD_VAR 0 4
33696: ST_TO_ADDR
// end ;
33697: LD_VAR 0 3
33701: RET
// export function ComComplete ( unit , b ) ; var i ; begin
33702: LD_INT 0
33704: PPUSH
33705: PPUSH
// if BuildingStatus ( b ) = bs_build then
33706: LD_VAR 0 2
33710: PPUSH
33711: CALL_OW 461
33715: PUSH
33716: LD_INT 1
33718: EQUAL
33719: IFFALSE 33779
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
33721: LD_VAR 0 1
33725: PPUSH
33726: LD_STRING h
33728: PUSH
33729: LD_VAR 0 2
33733: PPUSH
33734: CALL_OW 250
33738: PUSH
33739: LD_VAR 0 2
33743: PPUSH
33744: CALL_OW 251
33748: PUSH
33749: LD_VAR 0 2
33753: PUSH
33754: LD_INT 0
33756: PUSH
33757: LD_INT 0
33759: PUSH
33760: LD_INT 0
33762: PUSH
33763: EMPTY
33764: LIST
33765: LIST
33766: LIST
33767: LIST
33768: LIST
33769: LIST
33770: LIST
33771: PUSH
33772: EMPTY
33773: LIST
33774: PPUSH
33775: CALL_OW 446
// end ;
33779: LD_VAR 0 3
33783: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
33784: LD_INT 0
33786: PPUSH
33787: PPUSH
33788: PPUSH
33789: PPUSH
33790: PPUSH
33791: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
33792: LD_VAR 0 1
33796: NOT
33797: PUSH
33798: LD_VAR 0 1
33802: PPUSH
33803: CALL_OW 263
33807: PUSH
33808: LD_INT 2
33810: EQUAL
33811: NOT
33812: OR
33813: IFFALSE 33817
// exit ;
33815: GO 34133
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
33817: LD_ADDR_VAR 0 6
33821: PUSH
33822: LD_INT 22
33824: PUSH
33825: LD_VAR 0 1
33829: PPUSH
33830: CALL_OW 255
33834: PUSH
33835: EMPTY
33836: LIST
33837: LIST
33838: PUSH
33839: LD_INT 2
33841: PUSH
33842: LD_INT 30
33844: PUSH
33845: LD_INT 36
33847: PUSH
33848: EMPTY
33849: LIST
33850: LIST
33851: PUSH
33852: LD_INT 34
33854: PUSH
33855: LD_INT 31
33857: PUSH
33858: EMPTY
33859: LIST
33860: LIST
33861: PUSH
33862: EMPTY
33863: LIST
33864: LIST
33865: LIST
33866: PUSH
33867: EMPTY
33868: LIST
33869: LIST
33870: PPUSH
33871: CALL_OW 69
33875: ST_TO_ADDR
// if not tmp then
33876: LD_VAR 0 6
33880: NOT
33881: IFFALSE 33885
// exit ;
33883: GO 34133
// result := [ ] ;
33885: LD_ADDR_VAR 0 2
33889: PUSH
33890: EMPTY
33891: ST_TO_ADDR
// for i in tmp do
33892: LD_ADDR_VAR 0 3
33896: PUSH
33897: LD_VAR 0 6
33901: PUSH
33902: FOR_IN
33903: IFFALSE 33974
// begin t := UnitsInside ( i ) ;
33905: LD_ADDR_VAR 0 4
33909: PUSH
33910: LD_VAR 0 3
33914: PPUSH
33915: CALL_OW 313
33919: ST_TO_ADDR
// if t then
33920: LD_VAR 0 4
33924: IFFALSE 33972
// for j in t do
33926: LD_ADDR_VAR 0 7
33930: PUSH
33931: LD_VAR 0 4
33935: PUSH
33936: FOR_IN
33937: IFFALSE 33970
// result := Insert ( result , result + 1 , j ) ;
33939: LD_ADDR_VAR 0 2
33943: PUSH
33944: LD_VAR 0 2
33948: PPUSH
33949: LD_VAR 0 2
33953: PUSH
33954: LD_INT 1
33956: PLUS
33957: PPUSH
33958: LD_VAR 0 7
33962: PPUSH
33963: CALL_OW 2
33967: ST_TO_ADDR
33968: GO 33936
33970: POP
33971: POP
// end ;
33972: GO 33902
33974: POP
33975: POP
// if not result then
33976: LD_VAR 0 2
33980: NOT
33981: IFFALSE 33985
// exit ;
33983: GO 34133
// mech := result [ 1 ] ;
33985: LD_ADDR_VAR 0 5
33989: PUSH
33990: LD_VAR 0 2
33994: PUSH
33995: LD_INT 1
33997: ARRAY
33998: ST_TO_ADDR
// if result > 1 then
33999: LD_VAR 0 2
34003: PUSH
34004: LD_INT 1
34006: GREATER
34007: IFFALSE 34119
// for i = 2 to result do
34009: LD_ADDR_VAR 0 3
34013: PUSH
34014: DOUBLE
34015: LD_INT 2
34017: DEC
34018: ST_TO_ADDR
34019: LD_VAR 0 2
34023: PUSH
34024: FOR_TO
34025: IFFALSE 34117
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
34027: LD_ADDR_VAR 0 4
34031: PUSH
34032: LD_VAR 0 2
34036: PUSH
34037: LD_VAR 0 3
34041: ARRAY
34042: PPUSH
34043: LD_INT 3
34045: PPUSH
34046: CALL_OW 259
34050: PUSH
34051: LD_VAR 0 2
34055: PUSH
34056: LD_VAR 0 3
34060: ARRAY
34061: PPUSH
34062: CALL_OW 432
34066: MINUS
34067: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
34068: LD_VAR 0 4
34072: PUSH
34073: LD_VAR 0 5
34077: PPUSH
34078: LD_INT 3
34080: PPUSH
34081: CALL_OW 259
34085: PUSH
34086: LD_VAR 0 5
34090: PPUSH
34091: CALL_OW 432
34095: MINUS
34096: GREATEREQUAL
34097: IFFALSE 34115
// mech := result [ i ] ;
34099: LD_ADDR_VAR 0 5
34103: PUSH
34104: LD_VAR 0 2
34108: PUSH
34109: LD_VAR 0 3
34113: ARRAY
34114: ST_TO_ADDR
// end ;
34115: GO 34024
34117: POP
34118: POP
// ComLinkTo ( vehicle , mech ) ;
34119: LD_VAR 0 1
34123: PPUSH
34124: LD_VAR 0 5
34128: PPUSH
34129: CALL_OW 135
// end ;
34133: LD_VAR 0 2
34137: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
34138: LD_INT 0
34140: PPUSH
34141: PPUSH
34142: PPUSH
34143: PPUSH
34144: PPUSH
34145: PPUSH
34146: PPUSH
34147: PPUSH
34148: PPUSH
34149: PPUSH
34150: PPUSH
34151: PPUSH
34152: PPUSH
// result := [ ] ;
34153: LD_ADDR_VAR 0 7
34157: PUSH
34158: EMPTY
34159: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
34160: LD_VAR 0 1
34164: PPUSH
34165: CALL_OW 266
34169: PUSH
34170: LD_INT 0
34172: PUSH
34173: LD_INT 1
34175: PUSH
34176: EMPTY
34177: LIST
34178: LIST
34179: IN
34180: NOT
34181: IFFALSE 34185
// exit ;
34183: GO 35816
// if name then
34185: LD_VAR 0 3
34189: IFFALSE 34205
// SetBName ( base_dep , name ) ;
34191: LD_VAR 0 1
34195: PPUSH
34196: LD_VAR 0 3
34200: PPUSH
34201: CALL_OW 500
// base := GetBase ( base_dep ) ;
34205: LD_ADDR_VAR 0 15
34209: PUSH
34210: LD_VAR 0 1
34214: PPUSH
34215: CALL_OW 274
34219: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
34220: LD_ADDR_VAR 0 16
34224: PUSH
34225: LD_VAR 0 1
34229: PPUSH
34230: CALL_OW 255
34234: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
34235: LD_ADDR_VAR 0 17
34239: PUSH
34240: LD_VAR 0 1
34244: PPUSH
34245: CALL_OW 248
34249: ST_TO_ADDR
// if sources then
34250: LD_VAR 0 5
34254: IFFALSE 34301
// for i = 1 to 3 do
34256: LD_ADDR_VAR 0 8
34260: PUSH
34261: DOUBLE
34262: LD_INT 1
34264: DEC
34265: ST_TO_ADDR
34266: LD_INT 3
34268: PUSH
34269: FOR_TO
34270: IFFALSE 34299
// AddResourceType ( base , i , sources [ i ] ) ;
34272: LD_VAR 0 15
34276: PPUSH
34277: LD_VAR 0 8
34281: PPUSH
34282: LD_VAR 0 5
34286: PUSH
34287: LD_VAR 0 8
34291: ARRAY
34292: PPUSH
34293: CALL_OW 276
34297: GO 34269
34299: POP
34300: POP
// buildings := GetBaseBuildings ( base , area ) ;
34301: LD_ADDR_VAR 0 18
34305: PUSH
34306: LD_VAR 0 15
34310: PPUSH
34311: LD_VAR 0 2
34315: PPUSH
34316: CALL 33593 0 2
34320: ST_TO_ADDR
// InitHc ;
34321: CALL_OW 19
// InitUc ;
34325: CALL_OW 18
// uc_side := side ;
34329: LD_ADDR_OWVAR 20
34333: PUSH
34334: LD_VAR 0 16
34338: ST_TO_ADDR
// uc_nation := nation ;
34339: LD_ADDR_OWVAR 21
34343: PUSH
34344: LD_VAR 0 17
34348: ST_TO_ADDR
// if buildings then
34349: LD_VAR 0 18
34353: IFFALSE 35675
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
34355: LD_ADDR_VAR 0 19
34359: PUSH
34360: LD_VAR 0 18
34364: PPUSH
34365: LD_INT 2
34367: PUSH
34368: LD_INT 30
34370: PUSH
34371: LD_INT 29
34373: PUSH
34374: EMPTY
34375: LIST
34376: LIST
34377: PUSH
34378: LD_INT 30
34380: PUSH
34381: LD_INT 30
34383: PUSH
34384: EMPTY
34385: LIST
34386: LIST
34387: PUSH
34388: EMPTY
34389: LIST
34390: LIST
34391: LIST
34392: PPUSH
34393: CALL_OW 72
34397: ST_TO_ADDR
// if tmp then
34398: LD_VAR 0 19
34402: IFFALSE 34450
// for i in tmp do
34404: LD_ADDR_VAR 0 8
34408: PUSH
34409: LD_VAR 0 19
34413: PUSH
34414: FOR_IN
34415: IFFALSE 34448
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
34417: LD_VAR 0 8
34421: PPUSH
34422: CALL_OW 250
34426: PPUSH
34427: LD_VAR 0 8
34431: PPUSH
34432: CALL_OW 251
34436: PPUSH
34437: LD_VAR 0 16
34441: PPUSH
34442: CALL_OW 441
34446: GO 34414
34448: POP
34449: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
34450: LD_VAR 0 18
34454: PPUSH
34455: LD_INT 2
34457: PUSH
34458: LD_INT 30
34460: PUSH
34461: LD_INT 32
34463: PUSH
34464: EMPTY
34465: LIST
34466: LIST
34467: PUSH
34468: LD_INT 30
34470: PUSH
34471: LD_INT 33
34473: PUSH
34474: EMPTY
34475: LIST
34476: LIST
34477: PUSH
34478: EMPTY
34479: LIST
34480: LIST
34481: LIST
34482: PPUSH
34483: CALL_OW 72
34487: IFFALSE 34575
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
34489: LD_ADDR_VAR 0 8
34493: PUSH
34494: LD_VAR 0 18
34498: PPUSH
34499: LD_INT 2
34501: PUSH
34502: LD_INT 30
34504: PUSH
34505: LD_INT 32
34507: PUSH
34508: EMPTY
34509: LIST
34510: LIST
34511: PUSH
34512: LD_INT 30
34514: PUSH
34515: LD_INT 33
34517: PUSH
34518: EMPTY
34519: LIST
34520: LIST
34521: PUSH
34522: EMPTY
34523: LIST
34524: LIST
34525: LIST
34526: PPUSH
34527: CALL_OW 72
34531: PUSH
34532: FOR_IN
34533: IFFALSE 34573
// begin if not GetBWeapon ( i ) then
34535: LD_VAR 0 8
34539: PPUSH
34540: CALL_OW 269
34544: NOT
34545: IFFALSE 34571
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
34547: LD_VAR 0 8
34551: PPUSH
34552: LD_VAR 0 8
34556: PPUSH
34557: LD_VAR 0 2
34561: PPUSH
34562: CALL 35821 0 2
34566: PPUSH
34567: CALL_OW 431
// end ;
34571: GO 34532
34573: POP
34574: POP
// end ; for i = 1 to personel do
34575: LD_ADDR_VAR 0 8
34579: PUSH
34580: DOUBLE
34581: LD_INT 1
34583: DEC
34584: ST_TO_ADDR
34585: LD_VAR 0 6
34589: PUSH
34590: FOR_TO
34591: IFFALSE 35655
// begin if i > 4 then
34593: LD_VAR 0 8
34597: PUSH
34598: LD_INT 4
34600: GREATER
34601: IFFALSE 34605
// break ;
34603: GO 35655
// case i of 1 :
34605: LD_VAR 0 8
34609: PUSH
34610: LD_INT 1
34612: DOUBLE
34613: EQUAL
34614: IFTRUE 34618
34616: GO 34698
34618: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
34619: LD_ADDR_VAR 0 12
34623: PUSH
34624: LD_VAR 0 18
34628: PPUSH
34629: LD_INT 22
34631: PUSH
34632: LD_VAR 0 16
34636: PUSH
34637: EMPTY
34638: LIST
34639: LIST
34640: PUSH
34641: LD_INT 58
34643: PUSH
34644: EMPTY
34645: LIST
34646: PUSH
34647: LD_INT 2
34649: PUSH
34650: LD_INT 30
34652: PUSH
34653: LD_INT 32
34655: PUSH
34656: EMPTY
34657: LIST
34658: LIST
34659: PUSH
34660: LD_INT 30
34662: PUSH
34663: LD_INT 4
34665: PUSH
34666: EMPTY
34667: LIST
34668: LIST
34669: PUSH
34670: LD_INT 30
34672: PUSH
34673: LD_INT 5
34675: PUSH
34676: EMPTY
34677: LIST
34678: LIST
34679: PUSH
34680: EMPTY
34681: LIST
34682: LIST
34683: LIST
34684: LIST
34685: PUSH
34686: EMPTY
34687: LIST
34688: LIST
34689: LIST
34690: PPUSH
34691: CALL_OW 72
34695: ST_TO_ADDR
34696: GO 34920
34698: LD_INT 2
34700: DOUBLE
34701: EQUAL
34702: IFTRUE 34706
34704: GO 34768
34706: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
34707: LD_ADDR_VAR 0 12
34711: PUSH
34712: LD_VAR 0 18
34716: PPUSH
34717: LD_INT 22
34719: PUSH
34720: LD_VAR 0 16
34724: PUSH
34725: EMPTY
34726: LIST
34727: LIST
34728: PUSH
34729: LD_INT 2
34731: PUSH
34732: LD_INT 30
34734: PUSH
34735: LD_INT 0
34737: PUSH
34738: EMPTY
34739: LIST
34740: LIST
34741: PUSH
34742: LD_INT 30
34744: PUSH
34745: LD_INT 1
34747: PUSH
34748: EMPTY
34749: LIST
34750: LIST
34751: PUSH
34752: EMPTY
34753: LIST
34754: LIST
34755: LIST
34756: PUSH
34757: EMPTY
34758: LIST
34759: LIST
34760: PPUSH
34761: CALL_OW 72
34765: ST_TO_ADDR
34766: GO 34920
34768: LD_INT 3
34770: DOUBLE
34771: EQUAL
34772: IFTRUE 34776
34774: GO 34838
34776: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
34777: LD_ADDR_VAR 0 12
34781: PUSH
34782: LD_VAR 0 18
34786: PPUSH
34787: LD_INT 22
34789: PUSH
34790: LD_VAR 0 16
34794: PUSH
34795: EMPTY
34796: LIST
34797: LIST
34798: PUSH
34799: LD_INT 2
34801: PUSH
34802: LD_INT 30
34804: PUSH
34805: LD_INT 2
34807: PUSH
34808: EMPTY
34809: LIST
34810: LIST
34811: PUSH
34812: LD_INT 30
34814: PUSH
34815: LD_INT 3
34817: PUSH
34818: EMPTY
34819: LIST
34820: LIST
34821: PUSH
34822: EMPTY
34823: LIST
34824: LIST
34825: LIST
34826: PUSH
34827: EMPTY
34828: LIST
34829: LIST
34830: PPUSH
34831: CALL_OW 72
34835: ST_TO_ADDR
34836: GO 34920
34838: LD_INT 4
34840: DOUBLE
34841: EQUAL
34842: IFTRUE 34846
34844: GO 34919
34846: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
34847: LD_ADDR_VAR 0 12
34851: PUSH
34852: LD_VAR 0 18
34856: PPUSH
34857: LD_INT 22
34859: PUSH
34860: LD_VAR 0 16
34864: PUSH
34865: EMPTY
34866: LIST
34867: LIST
34868: PUSH
34869: LD_INT 2
34871: PUSH
34872: LD_INT 30
34874: PUSH
34875: LD_INT 6
34877: PUSH
34878: EMPTY
34879: LIST
34880: LIST
34881: PUSH
34882: LD_INT 30
34884: PUSH
34885: LD_INT 7
34887: PUSH
34888: EMPTY
34889: LIST
34890: LIST
34891: PUSH
34892: LD_INT 30
34894: PUSH
34895: LD_INT 8
34897: PUSH
34898: EMPTY
34899: LIST
34900: LIST
34901: PUSH
34902: EMPTY
34903: LIST
34904: LIST
34905: LIST
34906: LIST
34907: PUSH
34908: EMPTY
34909: LIST
34910: LIST
34911: PPUSH
34912: CALL_OW 72
34916: ST_TO_ADDR
34917: GO 34920
34919: POP
// if i = 1 then
34920: LD_VAR 0 8
34924: PUSH
34925: LD_INT 1
34927: EQUAL
34928: IFFALSE 35039
// begin tmp := [ ] ;
34930: LD_ADDR_VAR 0 19
34934: PUSH
34935: EMPTY
34936: ST_TO_ADDR
// for j in f do
34937: LD_ADDR_VAR 0 9
34941: PUSH
34942: LD_VAR 0 12
34946: PUSH
34947: FOR_IN
34948: IFFALSE 35021
// if GetBType ( j ) = b_bunker then
34950: LD_VAR 0 9
34954: PPUSH
34955: CALL_OW 266
34959: PUSH
34960: LD_INT 32
34962: EQUAL
34963: IFFALSE 34990
// tmp := Insert ( tmp , 1 , j ) else
34965: LD_ADDR_VAR 0 19
34969: PUSH
34970: LD_VAR 0 19
34974: PPUSH
34975: LD_INT 1
34977: PPUSH
34978: LD_VAR 0 9
34982: PPUSH
34983: CALL_OW 2
34987: ST_TO_ADDR
34988: GO 35019
// tmp := Insert ( tmp , tmp + 1 , j ) ;
34990: LD_ADDR_VAR 0 19
34994: PUSH
34995: LD_VAR 0 19
34999: PPUSH
35000: LD_VAR 0 19
35004: PUSH
35005: LD_INT 1
35007: PLUS
35008: PPUSH
35009: LD_VAR 0 9
35013: PPUSH
35014: CALL_OW 2
35018: ST_TO_ADDR
35019: GO 34947
35021: POP
35022: POP
// if tmp then
35023: LD_VAR 0 19
35027: IFFALSE 35039
// f := tmp ;
35029: LD_ADDR_VAR 0 12
35033: PUSH
35034: LD_VAR 0 19
35038: ST_TO_ADDR
// end ; x := personel [ i ] ;
35039: LD_ADDR_VAR 0 13
35043: PUSH
35044: LD_VAR 0 6
35048: PUSH
35049: LD_VAR 0 8
35053: ARRAY
35054: ST_TO_ADDR
// if x = - 1 then
35055: LD_VAR 0 13
35059: PUSH
35060: LD_INT 1
35062: NEG
35063: EQUAL
35064: IFFALSE 35273
// begin for j in f do
35066: LD_ADDR_VAR 0 9
35070: PUSH
35071: LD_VAR 0 12
35075: PUSH
35076: FOR_IN
35077: IFFALSE 35269
// repeat InitHc ;
35079: CALL_OW 19
// if GetBType ( j ) = b_barracks then
35083: LD_VAR 0 9
35087: PPUSH
35088: CALL_OW 266
35092: PUSH
35093: LD_INT 5
35095: EQUAL
35096: IFFALSE 35166
// begin if UnitsInside ( j ) < 3 then
35098: LD_VAR 0 9
35102: PPUSH
35103: CALL_OW 313
35107: PUSH
35108: LD_INT 3
35110: LESS
35111: IFFALSE 35147
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
35113: LD_INT 0
35115: PPUSH
35116: LD_INT 5
35118: PUSH
35119: LD_INT 8
35121: PUSH
35122: LD_INT 9
35124: PUSH
35125: EMPTY
35126: LIST
35127: LIST
35128: LIST
35129: PUSH
35130: LD_VAR 0 17
35134: ARRAY
35135: PPUSH
35136: LD_VAR 0 4
35140: PPUSH
35141: CALL_OW 380
35145: GO 35164
// PrepareHuman ( false , i , skill ) ;
35147: LD_INT 0
35149: PPUSH
35150: LD_VAR 0 8
35154: PPUSH
35155: LD_VAR 0 4
35159: PPUSH
35160: CALL_OW 380
// end else
35164: GO 35183
// PrepareHuman ( false , i , skill ) ;
35166: LD_INT 0
35168: PPUSH
35169: LD_VAR 0 8
35173: PPUSH
35174: LD_VAR 0 4
35178: PPUSH
35179: CALL_OW 380
// un := CreateHuman ;
35183: LD_ADDR_VAR 0 14
35187: PUSH
35188: CALL_OW 44
35192: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
35193: LD_ADDR_VAR 0 7
35197: PUSH
35198: LD_VAR 0 7
35202: PPUSH
35203: LD_INT 1
35205: PPUSH
35206: LD_VAR 0 14
35210: PPUSH
35211: CALL_OW 2
35215: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
35216: LD_VAR 0 14
35220: PPUSH
35221: LD_VAR 0 9
35225: PPUSH
35226: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
35230: LD_VAR 0 9
35234: PPUSH
35235: CALL_OW 313
35239: PUSH
35240: LD_INT 6
35242: EQUAL
35243: PUSH
35244: LD_VAR 0 9
35248: PPUSH
35249: CALL_OW 266
35253: PUSH
35254: LD_INT 32
35256: PUSH
35257: LD_INT 31
35259: PUSH
35260: EMPTY
35261: LIST
35262: LIST
35263: IN
35264: OR
35265: IFFALSE 35079
35267: GO 35076
35269: POP
35270: POP
// end else
35271: GO 35653
// for j = 1 to x do
35273: LD_ADDR_VAR 0 9
35277: PUSH
35278: DOUBLE
35279: LD_INT 1
35281: DEC
35282: ST_TO_ADDR
35283: LD_VAR 0 13
35287: PUSH
35288: FOR_TO
35289: IFFALSE 35651
// begin InitHc ;
35291: CALL_OW 19
// if not f then
35295: LD_VAR 0 12
35299: NOT
35300: IFFALSE 35389
// begin PrepareHuman ( false , i , skill ) ;
35302: LD_INT 0
35304: PPUSH
35305: LD_VAR 0 8
35309: PPUSH
35310: LD_VAR 0 4
35314: PPUSH
35315: CALL_OW 380
// un := CreateHuman ;
35319: LD_ADDR_VAR 0 14
35323: PUSH
35324: CALL_OW 44
35328: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
35329: LD_ADDR_VAR 0 7
35333: PUSH
35334: LD_VAR 0 7
35338: PPUSH
35339: LD_INT 1
35341: PPUSH
35342: LD_VAR 0 14
35346: PPUSH
35347: CALL_OW 2
35351: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
35352: LD_VAR 0 14
35356: PPUSH
35357: LD_VAR 0 1
35361: PPUSH
35362: CALL_OW 250
35366: PPUSH
35367: LD_VAR 0 1
35371: PPUSH
35372: CALL_OW 251
35376: PPUSH
35377: LD_INT 10
35379: PPUSH
35380: LD_INT 0
35382: PPUSH
35383: CALL_OW 50
// continue ;
35387: GO 35288
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
35389: LD_VAR 0 12
35393: PUSH
35394: LD_INT 1
35396: ARRAY
35397: PPUSH
35398: CALL_OW 313
35402: PUSH
35403: LD_VAR 0 12
35407: PUSH
35408: LD_INT 1
35410: ARRAY
35411: PPUSH
35412: CALL_OW 266
35416: PUSH
35417: LD_INT 32
35419: PUSH
35420: LD_INT 31
35422: PUSH
35423: EMPTY
35424: LIST
35425: LIST
35426: IN
35427: AND
35428: PUSH
35429: LD_VAR 0 12
35433: PUSH
35434: LD_INT 1
35436: ARRAY
35437: PPUSH
35438: CALL_OW 313
35442: PUSH
35443: LD_INT 6
35445: EQUAL
35446: OR
35447: IFFALSE 35467
// f := Delete ( f , 1 ) ;
35449: LD_ADDR_VAR 0 12
35453: PUSH
35454: LD_VAR 0 12
35458: PPUSH
35459: LD_INT 1
35461: PPUSH
35462: CALL_OW 3
35466: ST_TO_ADDR
// if not f then
35467: LD_VAR 0 12
35471: NOT
35472: IFFALSE 35490
// begin x := x + 2 ;
35474: LD_ADDR_VAR 0 13
35478: PUSH
35479: LD_VAR 0 13
35483: PUSH
35484: LD_INT 2
35486: PLUS
35487: ST_TO_ADDR
// continue ;
35488: GO 35288
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
35490: LD_VAR 0 12
35494: PUSH
35495: LD_INT 1
35497: ARRAY
35498: PPUSH
35499: CALL_OW 266
35503: PUSH
35504: LD_INT 5
35506: EQUAL
35507: IFFALSE 35581
// begin if UnitsInside ( f [ 1 ] ) < 3 then
35509: LD_VAR 0 12
35513: PUSH
35514: LD_INT 1
35516: ARRAY
35517: PPUSH
35518: CALL_OW 313
35522: PUSH
35523: LD_INT 3
35525: LESS
35526: IFFALSE 35562
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
35528: LD_INT 0
35530: PPUSH
35531: LD_INT 5
35533: PUSH
35534: LD_INT 8
35536: PUSH
35537: LD_INT 9
35539: PUSH
35540: EMPTY
35541: LIST
35542: LIST
35543: LIST
35544: PUSH
35545: LD_VAR 0 17
35549: ARRAY
35550: PPUSH
35551: LD_VAR 0 4
35555: PPUSH
35556: CALL_OW 380
35560: GO 35579
// PrepareHuman ( false , i , skill ) ;
35562: LD_INT 0
35564: PPUSH
35565: LD_VAR 0 8
35569: PPUSH
35570: LD_VAR 0 4
35574: PPUSH
35575: CALL_OW 380
// end else
35579: GO 35598
// PrepareHuman ( false , i , skill ) ;
35581: LD_INT 0
35583: PPUSH
35584: LD_VAR 0 8
35588: PPUSH
35589: LD_VAR 0 4
35593: PPUSH
35594: CALL_OW 380
// un := CreateHuman ;
35598: LD_ADDR_VAR 0 14
35602: PUSH
35603: CALL_OW 44
35607: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
35608: LD_ADDR_VAR 0 7
35612: PUSH
35613: LD_VAR 0 7
35617: PPUSH
35618: LD_INT 1
35620: PPUSH
35621: LD_VAR 0 14
35625: PPUSH
35626: CALL_OW 2
35630: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
35631: LD_VAR 0 14
35635: PPUSH
35636: LD_VAR 0 12
35640: PUSH
35641: LD_INT 1
35643: ARRAY
35644: PPUSH
35645: CALL_OW 52
// end ;
35649: GO 35288
35651: POP
35652: POP
// end ;
35653: GO 34590
35655: POP
35656: POP
// result := result ^ buildings ;
35657: LD_ADDR_VAR 0 7
35661: PUSH
35662: LD_VAR 0 7
35666: PUSH
35667: LD_VAR 0 18
35671: ADD
35672: ST_TO_ADDR
// end else
35673: GO 35816
// begin for i = 1 to personel do
35675: LD_ADDR_VAR 0 8
35679: PUSH
35680: DOUBLE
35681: LD_INT 1
35683: DEC
35684: ST_TO_ADDR
35685: LD_VAR 0 6
35689: PUSH
35690: FOR_TO
35691: IFFALSE 35814
// begin if i > 4 then
35693: LD_VAR 0 8
35697: PUSH
35698: LD_INT 4
35700: GREATER
35701: IFFALSE 35705
// break ;
35703: GO 35814
// x := personel [ i ] ;
35705: LD_ADDR_VAR 0 13
35709: PUSH
35710: LD_VAR 0 6
35714: PUSH
35715: LD_VAR 0 8
35719: ARRAY
35720: ST_TO_ADDR
// if x = - 1 then
35721: LD_VAR 0 13
35725: PUSH
35726: LD_INT 1
35728: NEG
35729: EQUAL
35730: IFFALSE 35734
// continue ;
35732: GO 35690
// PrepareHuman ( false , i , skill ) ;
35734: LD_INT 0
35736: PPUSH
35737: LD_VAR 0 8
35741: PPUSH
35742: LD_VAR 0 4
35746: PPUSH
35747: CALL_OW 380
// un := CreateHuman ;
35751: LD_ADDR_VAR 0 14
35755: PUSH
35756: CALL_OW 44
35760: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
35761: LD_VAR 0 14
35765: PPUSH
35766: LD_VAR 0 1
35770: PPUSH
35771: CALL_OW 250
35775: PPUSH
35776: LD_VAR 0 1
35780: PPUSH
35781: CALL_OW 251
35785: PPUSH
35786: LD_INT 10
35788: PPUSH
35789: LD_INT 0
35791: PPUSH
35792: CALL_OW 50
// result := result ^ un ;
35796: LD_ADDR_VAR 0 7
35800: PUSH
35801: LD_VAR 0 7
35805: PUSH
35806: LD_VAR 0 14
35810: ADD
35811: ST_TO_ADDR
// end ;
35812: GO 35690
35814: POP
35815: POP
// end ; end ;
35816: LD_VAR 0 7
35820: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
35821: LD_INT 0
35823: PPUSH
35824: PPUSH
35825: PPUSH
35826: PPUSH
35827: PPUSH
35828: PPUSH
35829: PPUSH
35830: PPUSH
35831: PPUSH
35832: PPUSH
35833: PPUSH
35834: PPUSH
35835: PPUSH
35836: PPUSH
35837: PPUSH
35838: PPUSH
// result := false ;
35839: LD_ADDR_VAR 0 3
35843: PUSH
35844: LD_INT 0
35846: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
35847: LD_VAR 0 1
35851: NOT
35852: PUSH
35853: LD_VAR 0 1
35857: PPUSH
35858: CALL_OW 266
35862: PUSH
35863: LD_INT 32
35865: PUSH
35866: LD_INT 33
35868: PUSH
35869: EMPTY
35870: LIST
35871: LIST
35872: IN
35873: NOT
35874: OR
35875: IFFALSE 35879
// exit ;
35877: GO 37015
// nat := GetNation ( tower ) ;
35879: LD_ADDR_VAR 0 12
35883: PUSH
35884: LD_VAR 0 1
35888: PPUSH
35889: CALL_OW 248
35893: ST_TO_ADDR
// side := GetSide ( tower ) ;
35894: LD_ADDR_VAR 0 16
35898: PUSH
35899: LD_VAR 0 1
35903: PPUSH
35904: CALL_OW 255
35908: ST_TO_ADDR
// x := GetX ( tower ) ;
35909: LD_ADDR_VAR 0 10
35913: PUSH
35914: LD_VAR 0 1
35918: PPUSH
35919: CALL_OW 250
35923: ST_TO_ADDR
// y := GetY ( tower ) ;
35924: LD_ADDR_VAR 0 11
35928: PUSH
35929: LD_VAR 0 1
35933: PPUSH
35934: CALL_OW 251
35938: ST_TO_ADDR
// if not x or not y then
35939: LD_VAR 0 10
35943: NOT
35944: PUSH
35945: LD_VAR 0 11
35949: NOT
35950: OR
35951: IFFALSE 35955
// exit ;
35953: GO 37015
// weapon := 0 ;
35955: LD_ADDR_VAR 0 18
35959: PUSH
35960: LD_INT 0
35962: ST_TO_ADDR
// fac_list := [ ] ;
35963: LD_ADDR_VAR 0 17
35967: PUSH
35968: EMPTY
35969: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
35970: LD_ADDR_VAR 0 6
35974: PUSH
35975: LD_VAR 0 1
35979: PPUSH
35980: CALL_OW 274
35984: PPUSH
35985: LD_VAR 0 2
35989: PPUSH
35990: CALL 33593 0 2
35994: PPUSH
35995: LD_INT 30
35997: PUSH
35998: LD_INT 3
36000: PUSH
36001: EMPTY
36002: LIST
36003: LIST
36004: PPUSH
36005: CALL_OW 72
36009: ST_TO_ADDR
// if not factories then
36010: LD_VAR 0 6
36014: NOT
36015: IFFALSE 36019
// exit ;
36017: GO 37015
// for i in factories do
36019: LD_ADDR_VAR 0 8
36023: PUSH
36024: LD_VAR 0 6
36028: PUSH
36029: FOR_IN
36030: IFFALSE 36055
// fac_list := fac_list union AvailableWeaponList ( i ) ;
36032: LD_ADDR_VAR 0 17
36036: PUSH
36037: LD_VAR 0 17
36041: PUSH
36042: LD_VAR 0 8
36046: PPUSH
36047: CALL_OW 478
36051: UNION
36052: ST_TO_ADDR
36053: GO 36029
36055: POP
36056: POP
// if not fac_list then
36057: LD_VAR 0 17
36061: NOT
36062: IFFALSE 36066
// exit ;
36064: GO 37015
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
36066: LD_ADDR_VAR 0 5
36070: PUSH
36071: LD_INT 4
36073: PUSH
36074: LD_INT 5
36076: PUSH
36077: LD_INT 9
36079: PUSH
36080: LD_INT 10
36082: PUSH
36083: LD_INT 6
36085: PUSH
36086: LD_INT 7
36088: PUSH
36089: LD_INT 11
36091: PUSH
36092: EMPTY
36093: LIST
36094: LIST
36095: LIST
36096: LIST
36097: LIST
36098: LIST
36099: LIST
36100: PUSH
36101: LD_INT 27
36103: PUSH
36104: LD_INT 28
36106: PUSH
36107: LD_INT 26
36109: PUSH
36110: LD_INT 30
36112: PUSH
36113: EMPTY
36114: LIST
36115: LIST
36116: LIST
36117: LIST
36118: PUSH
36119: LD_INT 43
36121: PUSH
36122: LD_INT 44
36124: PUSH
36125: LD_INT 46
36127: PUSH
36128: LD_INT 45
36130: PUSH
36131: LD_INT 47
36133: PUSH
36134: LD_INT 49
36136: PUSH
36137: EMPTY
36138: LIST
36139: LIST
36140: LIST
36141: LIST
36142: LIST
36143: LIST
36144: PUSH
36145: EMPTY
36146: LIST
36147: LIST
36148: LIST
36149: PUSH
36150: LD_VAR 0 12
36154: ARRAY
36155: ST_TO_ADDR
// for i in list do
36156: LD_ADDR_VAR 0 8
36160: PUSH
36161: LD_VAR 0 5
36165: PUSH
36166: FOR_IN
36167: IFFALSE 36200
// if not i in fac_list then
36169: LD_VAR 0 8
36173: PUSH
36174: LD_VAR 0 17
36178: IN
36179: NOT
36180: IFFALSE 36198
// list := list diff i ;
36182: LD_ADDR_VAR 0 5
36186: PUSH
36187: LD_VAR 0 5
36191: PUSH
36192: LD_VAR 0 8
36196: DIFF
36197: ST_TO_ADDR
36198: GO 36166
36200: POP
36201: POP
// if not list then
36202: LD_VAR 0 5
36206: NOT
36207: IFFALSE 36211
// exit ;
36209: GO 37015
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
36211: LD_VAR 0 12
36215: PUSH
36216: LD_INT 3
36218: EQUAL
36219: PUSH
36220: LD_INT 49
36222: PUSH
36223: LD_VAR 0 5
36227: IN
36228: AND
36229: PUSH
36230: LD_INT 31
36232: PPUSH
36233: LD_VAR 0 16
36237: PPUSH
36238: CALL_OW 321
36242: PUSH
36243: LD_INT 2
36245: EQUAL
36246: AND
36247: IFFALSE 36307
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
36249: LD_INT 22
36251: PUSH
36252: LD_VAR 0 16
36256: PUSH
36257: EMPTY
36258: LIST
36259: LIST
36260: PUSH
36261: LD_INT 35
36263: PUSH
36264: LD_INT 49
36266: PUSH
36267: EMPTY
36268: LIST
36269: LIST
36270: PUSH
36271: LD_INT 91
36273: PUSH
36274: LD_VAR 0 1
36278: PUSH
36279: LD_INT 10
36281: PUSH
36282: EMPTY
36283: LIST
36284: LIST
36285: LIST
36286: PUSH
36287: EMPTY
36288: LIST
36289: LIST
36290: LIST
36291: PPUSH
36292: CALL_OW 69
36296: NOT
36297: IFFALSE 36307
// weapon := ru_time_lapser ;
36299: LD_ADDR_VAR 0 18
36303: PUSH
36304: LD_INT 49
36306: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
36307: LD_VAR 0 12
36311: PUSH
36312: LD_INT 1
36314: PUSH
36315: LD_INT 2
36317: PUSH
36318: EMPTY
36319: LIST
36320: LIST
36321: IN
36322: PUSH
36323: LD_INT 11
36325: PUSH
36326: LD_VAR 0 5
36330: IN
36331: PUSH
36332: LD_INT 30
36334: PUSH
36335: LD_VAR 0 5
36339: IN
36340: OR
36341: AND
36342: PUSH
36343: LD_INT 6
36345: PPUSH
36346: LD_VAR 0 16
36350: PPUSH
36351: CALL_OW 321
36355: PUSH
36356: LD_INT 2
36358: EQUAL
36359: AND
36360: IFFALSE 36525
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
36362: LD_INT 22
36364: PUSH
36365: LD_VAR 0 16
36369: PUSH
36370: EMPTY
36371: LIST
36372: LIST
36373: PUSH
36374: LD_INT 2
36376: PUSH
36377: LD_INT 35
36379: PUSH
36380: LD_INT 11
36382: PUSH
36383: EMPTY
36384: LIST
36385: LIST
36386: PUSH
36387: LD_INT 35
36389: PUSH
36390: LD_INT 30
36392: PUSH
36393: EMPTY
36394: LIST
36395: LIST
36396: PUSH
36397: EMPTY
36398: LIST
36399: LIST
36400: LIST
36401: PUSH
36402: LD_INT 91
36404: PUSH
36405: LD_VAR 0 1
36409: PUSH
36410: LD_INT 18
36412: PUSH
36413: EMPTY
36414: LIST
36415: LIST
36416: LIST
36417: PUSH
36418: EMPTY
36419: LIST
36420: LIST
36421: LIST
36422: PPUSH
36423: CALL_OW 69
36427: NOT
36428: PUSH
36429: LD_INT 22
36431: PUSH
36432: LD_VAR 0 16
36436: PUSH
36437: EMPTY
36438: LIST
36439: LIST
36440: PUSH
36441: LD_INT 2
36443: PUSH
36444: LD_INT 30
36446: PUSH
36447: LD_INT 32
36449: PUSH
36450: EMPTY
36451: LIST
36452: LIST
36453: PUSH
36454: LD_INT 30
36456: PUSH
36457: LD_INT 33
36459: PUSH
36460: EMPTY
36461: LIST
36462: LIST
36463: PUSH
36464: EMPTY
36465: LIST
36466: LIST
36467: LIST
36468: PUSH
36469: LD_INT 91
36471: PUSH
36472: LD_VAR 0 1
36476: PUSH
36477: LD_INT 12
36479: PUSH
36480: EMPTY
36481: LIST
36482: LIST
36483: LIST
36484: PUSH
36485: EMPTY
36486: LIST
36487: LIST
36488: LIST
36489: PUSH
36490: EMPTY
36491: LIST
36492: PPUSH
36493: CALL_OW 69
36497: PUSH
36498: LD_INT 2
36500: GREATER
36501: AND
36502: IFFALSE 36525
// weapon := [ us_radar , ar_radar ] [ nat ] ;
36504: LD_ADDR_VAR 0 18
36508: PUSH
36509: LD_INT 11
36511: PUSH
36512: LD_INT 30
36514: PUSH
36515: EMPTY
36516: LIST
36517: LIST
36518: PUSH
36519: LD_VAR 0 12
36523: ARRAY
36524: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
36525: LD_VAR 0 18
36529: NOT
36530: PUSH
36531: LD_INT 40
36533: PPUSH
36534: LD_VAR 0 16
36538: PPUSH
36539: CALL_OW 321
36543: PUSH
36544: LD_INT 2
36546: EQUAL
36547: AND
36548: PUSH
36549: LD_INT 7
36551: PUSH
36552: LD_VAR 0 5
36556: IN
36557: PUSH
36558: LD_INT 28
36560: PUSH
36561: LD_VAR 0 5
36565: IN
36566: OR
36567: PUSH
36568: LD_INT 45
36570: PUSH
36571: LD_VAR 0 5
36575: IN
36576: OR
36577: AND
36578: IFFALSE 36832
// begin hex := GetHexInfo ( x , y ) ;
36580: LD_ADDR_VAR 0 4
36584: PUSH
36585: LD_VAR 0 10
36589: PPUSH
36590: LD_VAR 0 11
36594: PPUSH
36595: CALL_OW 546
36599: ST_TO_ADDR
// if hex [ 1 ] then
36600: LD_VAR 0 4
36604: PUSH
36605: LD_INT 1
36607: ARRAY
36608: IFFALSE 36612
// exit ;
36610: GO 37015
// height := hex [ 2 ] ;
36612: LD_ADDR_VAR 0 15
36616: PUSH
36617: LD_VAR 0 4
36621: PUSH
36622: LD_INT 2
36624: ARRAY
36625: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
36626: LD_ADDR_VAR 0 14
36630: PUSH
36631: LD_INT 0
36633: PUSH
36634: LD_INT 2
36636: PUSH
36637: LD_INT 3
36639: PUSH
36640: LD_INT 5
36642: PUSH
36643: EMPTY
36644: LIST
36645: LIST
36646: LIST
36647: LIST
36648: ST_TO_ADDR
// for i in tmp do
36649: LD_ADDR_VAR 0 8
36653: PUSH
36654: LD_VAR 0 14
36658: PUSH
36659: FOR_IN
36660: IFFALSE 36830
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
36662: LD_ADDR_VAR 0 9
36666: PUSH
36667: LD_VAR 0 10
36671: PPUSH
36672: LD_VAR 0 8
36676: PPUSH
36677: LD_INT 5
36679: PPUSH
36680: CALL_OW 272
36684: PUSH
36685: LD_VAR 0 11
36689: PPUSH
36690: LD_VAR 0 8
36694: PPUSH
36695: LD_INT 5
36697: PPUSH
36698: CALL_OW 273
36702: PUSH
36703: EMPTY
36704: LIST
36705: LIST
36706: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
36707: LD_VAR 0 9
36711: PUSH
36712: LD_INT 1
36714: ARRAY
36715: PPUSH
36716: LD_VAR 0 9
36720: PUSH
36721: LD_INT 2
36723: ARRAY
36724: PPUSH
36725: CALL_OW 488
36729: IFFALSE 36828
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
36731: LD_ADDR_VAR 0 4
36735: PUSH
36736: LD_VAR 0 9
36740: PUSH
36741: LD_INT 1
36743: ARRAY
36744: PPUSH
36745: LD_VAR 0 9
36749: PUSH
36750: LD_INT 2
36752: ARRAY
36753: PPUSH
36754: CALL_OW 546
36758: ST_TO_ADDR
// if hex [ 1 ] then
36759: LD_VAR 0 4
36763: PUSH
36764: LD_INT 1
36766: ARRAY
36767: IFFALSE 36771
// continue ;
36769: GO 36659
// h := hex [ 2 ] ;
36771: LD_ADDR_VAR 0 13
36775: PUSH
36776: LD_VAR 0 4
36780: PUSH
36781: LD_INT 2
36783: ARRAY
36784: ST_TO_ADDR
// if h + 7 < height then
36785: LD_VAR 0 13
36789: PUSH
36790: LD_INT 7
36792: PLUS
36793: PUSH
36794: LD_VAR 0 15
36798: LESS
36799: IFFALSE 36828
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
36801: LD_ADDR_VAR 0 18
36805: PUSH
36806: LD_INT 7
36808: PUSH
36809: LD_INT 28
36811: PUSH
36812: LD_INT 45
36814: PUSH
36815: EMPTY
36816: LIST
36817: LIST
36818: LIST
36819: PUSH
36820: LD_VAR 0 12
36824: ARRAY
36825: ST_TO_ADDR
// break ;
36826: GO 36830
// end ; end ; end ;
36828: GO 36659
36830: POP
36831: POP
// end ; if not weapon then
36832: LD_VAR 0 18
36836: NOT
36837: IFFALSE 36897
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
36839: LD_ADDR_VAR 0 5
36843: PUSH
36844: LD_VAR 0 5
36848: PUSH
36849: LD_INT 11
36851: PUSH
36852: LD_INT 30
36854: PUSH
36855: LD_INT 49
36857: PUSH
36858: EMPTY
36859: LIST
36860: LIST
36861: LIST
36862: DIFF
36863: ST_TO_ADDR
// if not list then
36864: LD_VAR 0 5
36868: NOT
36869: IFFALSE 36873
// exit ;
36871: GO 37015
// weapon := list [ rand ( 1 , list ) ] ;
36873: LD_ADDR_VAR 0 18
36877: PUSH
36878: LD_VAR 0 5
36882: PUSH
36883: LD_INT 1
36885: PPUSH
36886: LD_VAR 0 5
36890: PPUSH
36891: CALL_OW 12
36895: ARRAY
36896: ST_TO_ADDR
// end ; if weapon then
36897: LD_VAR 0 18
36901: IFFALSE 37015
// begin tmp := CostOfWeapon ( weapon ) ;
36903: LD_ADDR_VAR 0 14
36907: PUSH
36908: LD_VAR 0 18
36912: PPUSH
36913: CALL_OW 451
36917: ST_TO_ADDR
// j := GetBase ( tower ) ;
36918: LD_ADDR_VAR 0 9
36922: PUSH
36923: LD_VAR 0 1
36927: PPUSH
36928: CALL_OW 274
36932: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
36933: LD_VAR 0 9
36937: PPUSH
36938: LD_INT 1
36940: PPUSH
36941: CALL_OW 275
36945: PUSH
36946: LD_VAR 0 14
36950: PUSH
36951: LD_INT 1
36953: ARRAY
36954: GREATEREQUAL
36955: PUSH
36956: LD_VAR 0 9
36960: PPUSH
36961: LD_INT 2
36963: PPUSH
36964: CALL_OW 275
36968: PUSH
36969: LD_VAR 0 14
36973: PUSH
36974: LD_INT 2
36976: ARRAY
36977: GREATEREQUAL
36978: AND
36979: PUSH
36980: LD_VAR 0 9
36984: PPUSH
36985: LD_INT 3
36987: PPUSH
36988: CALL_OW 275
36992: PUSH
36993: LD_VAR 0 14
36997: PUSH
36998: LD_INT 3
37000: ARRAY
37001: GREATEREQUAL
37002: AND
37003: IFFALSE 37015
// result := weapon ;
37005: LD_ADDR_VAR 0 3
37009: PUSH
37010: LD_VAR 0 18
37014: ST_TO_ADDR
// end ; end ;
37015: LD_VAR 0 3
37019: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
37020: LD_INT 0
37022: PPUSH
37023: PPUSH
// result := true ;
37024: LD_ADDR_VAR 0 3
37028: PUSH
37029: LD_INT 1
37031: ST_TO_ADDR
// if array1 = array2 then
37032: LD_VAR 0 1
37036: PUSH
37037: LD_VAR 0 2
37041: EQUAL
37042: IFFALSE 37102
// begin for i = 1 to array1 do
37044: LD_ADDR_VAR 0 4
37048: PUSH
37049: DOUBLE
37050: LD_INT 1
37052: DEC
37053: ST_TO_ADDR
37054: LD_VAR 0 1
37058: PUSH
37059: FOR_TO
37060: IFFALSE 37098
// if array1 [ i ] <> array2 [ i ] then
37062: LD_VAR 0 1
37066: PUSH
37067: LD_VAR 0 4
37071: ARRAY
37072: PUSH
37073: LD_VAR 0 2
37077: PUSH
37078: LD_VAR 0 4
37082: ARRAY
37083: NONEQUAL
37084: IFFALSE 37096
// begin result := false ;
37086: LD_ADDR_VAR 0 3
37090: PUSH
37091: LD_INT 0
37093: ST_TO_ADDR
// break ;
37094: GO 37098
// end ;
37096: GO 37059
37098: POP
37099: POP
// end else
37100: GO 37110
// result := false ;
37102: LD_ADDR_VAR 0 3
37106: PUSH
37107: LD_INT 0
37109: ST_TO_ADDR
// end ;
37110: LD_VAR 0 3
37114: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
37115: LD_INT 0
37117: PPUSH
37118: PPUSH
37119: PPUSH
// pom := GetBase ( fac ) ;
37120: LD_ADDR_VAR 0 5
37124: PUSH
37125: LD_VAR 0 1
37129: PPUSH
37130: CALL_OW 274
37134: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
37135: LD_ADDR_VAR 0 4
37139: PUSH
37140: LD_VAR 0 2
37144: PUSH
37145: LD_INT 1
37147: ARRAY
37148: PPUSH
37149: LD_VAR 0 2
37153: PUSH
37154: LD_INT 2
37156: ARRAY
37157: PPUSH
37158: LD_VAR 0 2
37162: PUSH
37163: LD_INT 3
37165: ARRAY
37166: PPUSH
37167: LD_VAR 0 2
37171: PUSH
37172: LD_INT 4
37174: ARRAY
37175: PPUSH
37176: CALL_OW 449
37180: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
37181: LD_ADDR_VAR 0 3
37185: PUSH
37186: LD_VAR 0 5
37190: PPUSH
37191: LD_INT 1
37193: PPUSH
37194: CALL_OW 275
37198: PUSH
37199: LD_VAR 0 4
37203: PUSH
37204: LD_INT 1
37206: ARRAY
37207: GREATEREQUAL
37208: PUSH
37209: LD_VAR 0 5
37213: PPUSH
37214: LD_INT 2
37216: PPUSH
37217: CALL_OW 275
37221: PUSH
37222: LD_VAR 0 4
37226: PUSH
37227: LD_INT 2
37229: ARRAY
37230: GREATEREQUAL
37231: AND
37232: PUSH
37233: LD_VAR 0 5
37237: PPUSH
37238: LD_INT 3
37240: PPUSH
37241: CALL_OW 275
37245: PUSH
37246: LD_VAR 0 4
37250: PUSH
37251: LD_INT 3
37253: ARRAY
37254: GREATEREQUAL
37255: AND
37256: ST_TO_ADDR
// end ;
37257: LD_VAR 0 3
37261: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
37262: LD_INT 0
37264: PPUSH
37265: PPUSH
37266: PPUSH
37267: PPUSH
// pom := GetBase ( building ) ;
37268: LD_ADDR_VAR 0 3
37272: PUSH
37273: LD_VAR 0 1
37277: PPUSH
37278: CALL_OW 274
37282: ST_TO_ADDR
// if not pom then
37283: LD_VAR 0 3
37287: NOT
37288: IFFALSE 37292
// exit ;
37290: GO 37462
// btype := GetBType ( building ) ;
37292: LD_ADDR_VAR 0 5
37296: PUSH
37297: LD_VAR 0 1
37301: PPUSH
37302: CALL_OW 266
37306: ST_TO_ADDR
// if btype = b_armoury then
37307: LD_VAR 0 5
37311: PUSH
37312: LD_INT 4
37314: EQUAL
37315: IFFALSE 37325
// btype := b_barracks ;
37317: LD_ADDR_VAR 0 5
37321: PUSH
37322: LD_INT 5
37324: ST_TO_ADDR
// if btype = b_depot then
37325: LD_VAR 0 5
37329: PUSH
37330: LD_INT 0
37332: EQUAL
37333: IFFALSE 37343
// btype := b_warehouse ;
37335: LD_ADDR_VAR 0 5
37339: PUSH
37340: LD_INT 1
37342: ST_TO_ADDR
// if btype = b_workshop then
37343: LD_VAR 0 5
37347: PUSH
37348: LD_INT 2
37350: EQUAL
37351: IFFALSE 37361
// btype := b_factory ;
37353: LD_ADDR_VAR 0 5
37357: PUSH
37358: LD_INT 3
37360: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
37361: LD_ADDR_VAR 0 4
37365: PUSH
37366: LD_VAR 0 5
37370: PPUSH
37371: LD_VAR 0 1
37375: PPUSH
37376: CALL_OW 248
37380: PPUSH
37381: CALL_OW 450
37385: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
37386: LD_ADDR_VAR 0 2
37390: PUSH
37391: LD_VAR 0 3
37395: PPUSH
37396: LD_INT 1
37398: PPUSH
37399: CALL_OW 275
37403: PUSH
37404: LD_VAR 0 4
37408: PUSH
37409: LD_INT 1
37411: ARRAY
37412: GREATEREQUAL
37413: PUSH
37414: LD_VAR 0 3
37418: PPUSH
37419: LD_INT 2
37421: PPUSH
37422: CALL_OW 275
37426: PUSH
37427: LD_VAR 0 4
37431: PUSH
37432: LD_INT 2
37434: ARRAY
37435: GREATEREQUAL
37436: AND
37437: PUSH
37438: LD_VAR 0 3
37442: PPUSH
37443: LD_INT 3
37445: PPUSH
37446: CALL_OW 275
37450: PUSH
37451: LD_VAR 0 4
37455: PUSH
37456: LD_INT 3
37458: ARRAY
37459: GREATEREQUAL
37460: AND
37461: ST_TO_ADDR
// end ;
37462: LD_VAR 0 2
37466: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
37467: LD_INT 0
37469: PPUSH
37470: PPUSH
37471: PPUSH
// pom := GetBase ( building ) ;
37472: LD_ADDR_VAR 0 4
37476: PUSH
37477: LD_VAR 0 1
37481: PPUSH
37482: CALL_OW 274
37486: ST_TO_ADDR
// if not pom then
37487: LD_VAR 0 4
37491: NOT
37492: IFFALSE 37496
// exit ;
37494: GO 37597
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
37496: LD_ADDR_VAR 0 5
37500: PUSH
37501: LD_VAR 0 2
37505: PPUSH
37506: LD_VAR 0 1
37510: PPUSH
37511: CALL_OW 248
37515: PPUSH
37516: CALL_OW 450
37520: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
37521: LD_ADDR_VAR 0 3
37525: PUSH
37526: LD_VAR 0 4
37530: PPUSH
37531: LD_INT 1
37533: PPUSH
37534: CALL_OW 275
37538: PUSH
37539: LD_VAR 0 5
37543: PUSH
37544: LD_INT 1
37546: ARRAY
37547: GREATEREQUAL
37548: PUSH
37549: LD_VAR 0 4
37553: PPUSH
37554: LD_INT 2
37556: PPUSH
37557: CALL_OW 275
37561: PUSH
37562: LD_VAR 0 5
37566: PUSH
37567: LD_INT 2
37569: ARRAY
37570: GREATEREQUAL
37571: AND
37572: PUSH
37573: LD_VAR 0 4
37577: PPUSH
37578: LD_INT 3
37580: PPUSH
37581: CALL_OW 275
37585: PUSH
37586: LD_VAR 0 5
37590: PUSH
37591: LD_INT 3
37593: ARRAY
37594: GREATEREQUAL
37595: AND
37596: ST_TO_ADDR
// end ;
37597: LD_VAR 0 3
37601: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
37602: LD_INT 0
37604: PPUSH
37605: PPUSH
37606: PPUSH
37607: PPUSH
37608: PPUSH
37609: PPUSH
37610: PPUSH
37611: PPUSH
37612: PPUSH
37613: PPUSH
// result := false ;
37614: LD_ADDR_VAR 0 6
37618: PUSH
37619: LD_INT 0
37621: ST_TO_ADDR
// if not base or not btype or not x or not y then
37622: LD_VAR 0 1
37626: NOT
37627: PUSH
37628: LD_VAR 0 2
37632: NOT
37633: OR
37634: PUSH
37635: LD_VAR 0 3
37639: NOT
37640: OR
37641: PUSH
37642: LD_VAR 0 4
37646: NOT
37647: OR
37648: IFFALSE 37652
// exit ;
37650: GO 38261
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
37652: LD_ADDR_VAR 0 12
37656: PUSH
37657: LD_VAR 0 2
37661: PPUSH
37662: LD_VAR 0 3
37666: PPUSH
37667: LD_VAR 0 4
37671: PPUSH
37672: LD_VAR 0 5
37676: PPUSH
37677: LD_VAR 0 1
37681: PUSH
37682: LD_INT 1
37684: ARRAY
37685: PPUSH
37686: CALL_OW 248
37690: PPUSH
37691: LD_INT 0
37693: PPUSH
37694: CALL 39098 0 6
37698: ST_TO_ADDR
// if not hexes then
37699: LD_VAR 0 12
37703: NOT
37704: IFFALSE 37708
// exit ;
37706: GO 38261
// for i = 1 to hexes do
37708: LD_ADDR_VAR 0 7
37712: PUSH
37713: DOUBLE
37714: LD_INT 1
37716: DEC
37717: ST_TO_ADDR
37718: LD_VAR 0 12
37722: PUSH
37723: FOR_TO
37724: IFFALSE 38259
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
37726: LD_ADDR_VAR 0 11
37730: PUSH
37731: LD_VAR 0 12
37735: PUSH
37736: LD_VAR 0 7
37740: ARRAY
37741: PUSH
37742: LD_INT 1
37744: ARRAY
37745: PPUSH
37746: LD_VAR 0 12
37750: PUSH
37751: LD_VAR 0 7
37755: ARRAY
37756: PUSH
37757: LD_INT 2
37759: ARRAY
37760: PPUSH
37761: CALL_OW 428
37765: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
37766: LD_VAR 0 12
37770: PUSH
37771: LD_VAR 0 7
37775: ARRAY
37776: PUSH
37777: LD_INT 1
37779: ARRAY
37780: PPUSH
37781: LD_VAR 0 12
37785: PUSH
37786: LD_VAR 0 7
37790: ARRAY
37791: PUSH
37792: LD_INT 2
37794: ARRAY
37795: PPUSH
37796: CALL_OW 351
37800: PUSH
37801: LD_VAR 0 12
37805: PUSH
37806: LD_VAR 0 7
37810: ARRAY
37811: PUSH
37812: LD_INT 1
37814: ARRAY
37815: PPUSH
37816: LD_VAR 0 12
37820: PUSH
37821: LD_VAR 0 7
37825: ARRAY
37826: PUSH
37827: LD_INT 2
37829: ARRAY
37830: PPUSH
37831: CALL_OW 488
37835: NOT
37836: OR
37837: PUSH
37838: LD_VAR 0 11
37842: PPUSH
37843: CALL_OW 247
37847: PUSH
37848: LD_INT 3
37850: EQUAL
37851: OR
37852: IFFALSE 37858
// exit ;
37854: POP
37855: POP
37856: GO 38261
// if not tmp or not tmp in base then
37858: LD_VAR 0 11
37862: NOT
37863: PUSH
37864: LD_VAR 0 11
37868: PUSH
37869: LD_VAR 0 1
37873: IN
37874: NOT
37875: OR
37876: IFFALSE 37880
// continue ;
37878: GO 37723
// result := true ;
37880: LD_ADDR_VAR 0 6
37884: PUSH
37885: LD_INT 1
37887: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
37888: LD_ADDR_VAR 0 15
37892: PUSH
37893: LD_VAR 0 1
37897: PPUSH
37898: LD_INT 22
37900: PUSH
37901: LD_VAR 0 11
37905: PPUSH
37906: CALL_OW 255
37910: PUSH
37911: EMPTY
37912: LIST
37913: LIST
37914: PUSH
37915: LD_INT 2
37917: PUSH
37918: LD_INT 30
37920: PUSH
37921: LD_INT 0
37923: PUSH
37924: EMPTY
37925: LIST
37926: LIST
37927: PUSH
37928: LD_INT 30
37930: PUSH
37931: LD_INT 1
37933: PUSH
37934: EMPTY
37935: LIST
37936: LIST
37937: PUSH
37938: EMPTY
37939: LIST
37940: LIST
37941: LIST
37942: PUSH
37943: EMPTY
37944: LIST
37945: LIST
37946: PPUSH
37947: CALL_OW 72
37951: ST_TO_ADDR
// if dep then
37952: LD_VAR 0 15
37956: IFFALSE 38092
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
37958: LD_ADDR_VAR 0 14
37962: PUSH
37963: LD_VAR 0 15
37967: PUSH
37968: LD_INT 1
37970: ARRAY
37971: PPUSH
37972: CALL_OW 250
37976: PPUSH
37977: LD_VAR 0 15
37981: PUSH
37982: LD_INT 1
37984: ARRAY
37985: PPUSH
37986: CALL_OW 254
37990: PPUSH
37991: LD_INT 5
37993: PPUSH
37994: CALL_OW 272
37998: PUSH
37999: LD_VAR 0 15
38003: PUSH
38004: LD_INT 1
38006: ARRAY
38007: PPUSH
38008: CALL_OW 251
38012: PPUSH
38013: LD_VAR 0 15
38017: PUSH
38018: LD_INT 1
38020: ARRAY
38021: PPUSH
38022: CALL_OW 254
38026: PPUSH
38027: LD_INT 5
38029: PPUSH
38030: CALL_OW 273
38034: PUSH
38035: EMPTY
38036: LIST
38037: LIST
38038: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
38039: LD_VAR 0 14
38043: PUSH
38044: LD_INT 1
38046: ARRAY
38047: PPUSH
38048: LD_VAR 0 14
38052: PUSH
38053: LD_INT 2
38055: ARRAY
38056: PPUSH
38057: CALL_OW 488
38061: IFFALSE 38092
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
38063: LD_VAR 0 11
38067: PPUSH
38068: LD_VAR 0 14
38072: PUSH
38073: LD_INT 1
38075: ARRAY
38076: PPUSH
38077: LD_VAR 0 14
38081: PUSH
38082: LD_INT 2
38084: ARRAY
38085: PPUSH
38086: CALL_OW 111
// continue ;
38090: GO 37723
// end ; end ; r := GetDir ( tmp ) ;
38092: LD_ADDR_VAR 0 13
38096: PUSH
38097: LD_VAR 0 11
38101: PPUSH
38102: CALL_OW 254
38106: ST_TO_ADDR
// if r = 5 then
38107: LD_VAR 0 13
38111: PUSH
38112: LD_INT 5
38114: EQUAL
38115: IFFALSE 38125
// r := 0 ;
38117: LD_ADDR_VAR 0 13
38121: PUSH
38122: LD_INT 0
38124: ST_TO_ADDR
// for j = r to 5 do
38125: LD_ADDR_VAR 0 8
38129: PUSH
38130: DOUBLE
38131: LD_VAR 0 13
38135: DEC
38136: ST_TO_ADDR
38137: LD_INT 5
38139: PUSH
38140: FOR_TO
38141: IFFALSE 38255
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
38143: LD_ADDR_VAR 0 9
38147: PUSH
38148: LD_VAR 0 11
38152: PPUSH
38153: CALL_OW 250
38157: PPUSH
38158: LD_VAR 0 8
38162: PPUSH
38163: LD_INT 2
38165: PPUSH
38166: CALL_OW 272
38170: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
38171: LD_ADDR_VAR 0 10
38175: PUSH
38176: LD_VAR 0 11
38180: PPUSH
38181: CALL_OW 251
38185: PPUSH
38186: LD_VAR 0 8
38190: PPUSH
38191: LD_INT 2
38193: PPUSH
38194: CALL_OW 273
38198: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
38199: LD_VAR 0 9
38203: PPUSH
38204: LD_VAR 0 10
38208: PPUSH
38209: CALL_OW 488
38213: PUSH
38214: LD_VAR 0 9
38218: PPUSH
38219: LD_VAR 0 10
38223: PPUSH
38224: CALL_OW 428
38228: NOT
38229: AND
38230: IFFALSE 38253
// begin ComMoveXY ( tmp , _x , _y ) ;
38232: LD_VAR 0 11
38236: PPUSH
38237: LD_VAR 0 9
38241: PPUSH
38242: LD_VAR 0 10
38246: PPUSH
38247: CALL_OW 111
// break ;
38251: GO 38255
// end ; end ;
38253: GO 38140
38255: POP
38256: POP
// end ;
38257: GO 37723
38259: POP
38260: POP
// end ;
38261: LD_VAR 0 6
38265: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
38266: LD_INT 0
38268: PPUSH
38269: PPUSH
38270: PPUSH
38271: PPUSH
38272: PPUSH
38273: PPUSH
38274: PPUSH
38275: PPUSH
38276: PPUSH
38277: PPUSH
// result := false ;
38278: LD_ADDR_VAR 0 6
38282: PUSH
38283: LD_INT 0
38285: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
38286: LD_VAR 0 1
38290: NOT
38291: PUSH
38292: LD_VAR 0 1
38296: PPUSH
38297: CALL_OW 266
38301: PUSH
38302: LD_INT 0
38304: PUSH
38305: LD_INT 1
38307: PUSH
38308: EMPTY
38309: LIST
38310: LIST
38311: IN
38312: NOT
38313: OR
38314: PUSH
38315: LD_VAR 0 2
38319: NOT
38320: OR
38321: PUSH
38322: LD_VAR 0 5
38326: PUSH
38327: LD_INT 0
38329: PUSH
38330: LD_INT 1
38332: PUSH
38333: LD_INT 2
38335: PUSH
38336: LD_INT 3
38338: PUSH
38339: LD_INT 4
38341: PUSH
38342: LD_INT 5
38344: PUSH
38345: EMPTY
38346: LIST
38347: LIST
38348: LIST
38349: LIST
38350: LIST
38351: LIST
38352: IN
38353: NOT
38354: OR
38355: PUSH
38356: LD_VAR 0 3
38360: PPUSH
38361: LD_VAR 0 4
38365: PPUSH
38366: CALL_OW 488
38370: NOT
38371: OR
38372: IFFALSE 38376
// exit ;
38374: GO 39093
// pom := GetBase ( depot ) ;
38376: LD_ADDR_VAR 0 10
38380: PUSH
38381: LD_VAR 0 1
38385: PPUSH
38386: CALL_OW 274
38390: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
38391: LD_ADDR_VAR 0 11
38395: PUSH
38396: LD_VAR 0 2
38400: PPUSH
38401: LD_VAR 0 1
38405: PPUSH
38406: CALL_OW 248
38410: PPUSH
38411: CALL_OW 450
38415: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
38416: LD_VAR 0 10
38420: PPUSH
38421: LD_INT 1
38423: PPUSH
38424: CALL_OW 275
38428: PUSH
38429: LD_VAR 0 11
38433: PUSH
38434: LD_INT 1
38436: ARRAY
38437: GREATEREQUAL
38438: PUSH
38439: LD_VAR 0 10
38443: PPUSH
38444: LD_INT 2
38446: PPUSH
38447: CALL_OW 275
38451: PUSH
38452: LD_VAR 0 11
38456: PUSH
38457: LD_INT 2
38459: ARRAY
38460: GREATEREQUAL
38461: AND
38462: PUSH
38463: LD_VAR 0 10
38467: PPUSH
38468: LD_INT 3
38470: PPUSH
38471: CALL_OW 275
38475: PUSH
38476: LD_VAR 0 11
38480: PUSH
38481: LD_INT 3
38483: ARRAY
38484: GREATEREQUAL
38485: AND
38486: NOT
38487: IFFALSE 38491
// exit ;
38489: GO 39093
// if GetBType ( depot ) = b_depot then
38491: LD_VAR 0 1
38495: PPUSH
38496: CALL_OW 266
38500: PUSH
38501: LD_INT 0
38503: EQUAL
38504: IFFALSE 38516
// dist := 28 else
38506: LD_ADDR_VAR 0 14
38510: PUSH
38511: LD_INT 28
38513: ST_TO_ADDR
38514: GO 38524
// dist := 36 ;
38516: LD_ADDR_VAR 0 14
38520: PUSH
38521: LD_INT 36
38523: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
38524: LD_VAR 0 1
38528: PPUSH
38529: LD_VAR 0 3
38533: PPUSH
38534: LD_VAR 0 4
38538: PPUSH
38539: CALL_OW 297
38543: PUSH
38544: LD_VAR 0 14
38548: GREATER
38549: IFFALSE 38553
// exit ;
38551: GO 39093
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
38553: LD_ADDR_VAR 0 12
38557: PUSH
38558: LD_VAR 0 2
38562: PPUSH
38563: LD_VAR 0 3
38567: PPUSH
38568: LD_VAR 0 4
38572: PPUSH
38573: LD_VAR 0 5
38577: PPUSH
38578: LD_VAR 0 1
38582: PPUSH
38583: CALL_OW 248
38587: PPUSH
38588: LD_INT 0
38590: PPUSH
38591: CALL 39098 0 6
38595: ST_TO_ADDR
// if not hexes then
38596: LD_VAR 0 12
38600: NOT
38601: IFFALSE 38605
// exit ;
38603: GO 39093
// hex := GetHexInfo ( x , y ) ;
38605: LD_ADDR_VAR 0 15
38609: PUSH
38610: LD_VAR 0 3
38614: PPUSH
38615: LD_VAR 0 4
38619: PPUSH
38620: CALL_OW 546
38624: ST_TO_ADDR
// if hex [ 1 ] then
38625: LD_VAR 0 15
38629: PUSH
38630: LD_INT 1
38632: ARRAY
38633: IFFALSE 38637
// exit ;
38635: GO 39093
// height := hex [ 2 ] ;
38637: LD_ADDR_VAR 0 13
38641: PUSH
38642: LD_VAR 0 15
38646: PUSH
38647: LD_INT 2
38649: ARRAY
38650: ST_TO_ADDR
// for i = 1 to hexes do
38651: LD_ADDR_VAR 0 7
38655: PUSH
38656: DOUBLE
38657: LD_INT 1
38659: DEC
38660: ST_TO_ADDR
38661: LD_VAR 0 12
38665: PUSH
38666: FOR_TO
38667: IFFALSE 38997
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
38669: LD_VAR 0 12
38673: PUSH
38674: LD_VAR 0 7
38678: ARRAY
38679: PUSH
38680: LD_INT 1
38682: ARRAY
38683: PPUSH
38684: LD_VAR 0 12
38688: PUSH
38689: LD_VAR 0 7
38693: ARRAY
38694: PUSH
38695: LD_INT 2
38697: ARRAY
38698: PPUSH
38699: CALL_OW 488
38703: NOT
38704: PUSH
38705: LD_VAR 0 12
38709: PUSH
38710: LD_VAR 0 7
38714: ARRAY
38715: PUSH
38716: LD_INT 1
38718: ARRAY
38719: PPUSH
38720: LD_VAR 0 12
38724: PUSH
38725: LD_VAR 0 7
38729: ARRAY
38730: PUSH
38731: LD_INT 2
38733: ARRAY
38734: PPUSH
38735: CALL_OW 428
38739: PUSH
38740: LD_INT 0
38742: GREATER
38743: OR
38744: PUSH
38745: LD_VAR 0 12
38749: PUSH
38750: LD_VAR 0 7
38754: ARRAY
38755: PUSH
38756: LD_INT 1
38758: ARRAY
38759: PPUSH
38760: LD_VAR 0 12
38764: PUSH
38765: LD_VAR 0 7
38769: ARRAY
38770: PUSH
38771: LD_INT 2
38773: ARRAY
38774: PPUSH
38775: CALL_OW 351
38779: OR
38780: IFFALSE 38786
// exit ;
38782: POP
38783: POP
38784: GO 39093
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
38786: LD_ADDR_VAR 0 8
38790: PUSH
38791: LD_VAR 0 12
38795: PUSH
38796: LD_VAR 0 7
38800: ARRAY
38801: PUSH
38802: LD_INT 1
38804: ARRAY
38805: PPUSH
38806: LD_VAR 0 12
38810: PUSH
38811: LD_VAR 0 7
38815: ARRAY
38816: PUSH
38817: LD_INT 2
38819: ARRAY
38820: PPUSH
38821: CALL_OW 546
38825: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
38826: LD_VAR 0 8
38830: PUSH
38831: LD_INT 1
38833: ARRAY
38834: PUSH
38835: LD_VAR 0 8
38839: PUSH
38840: LD_INT 2
38842: ARRAY
38843: PUSH
38844: LD_VAR 0 13
38848: PUSH
38849: LD_INT 2
38851: PLUS
38852: GREATER
38853: OR
38854: PUSH
38855: LD_VAR 0 8
38859: PUSH
38860: LD_INT 2
38862: ARRAY
38863: PUSH
38864: LD_VAR 0 13
38868: PUSH
38869: LD_INT 2
38871: MINUS
38872: LESS
38873: OR
38874: PUSH
38875: LD_VAR 0 8
38879: PUSH
38880: LD_INT 3
38882: ARRAY
38883: PUSH
38884: LD_INT 0
38886: PUSH
38887: LD_INT 8
38889: PUSH
38890: LD_INT 9
38892: PUSH
38893: LD_INT 10
38895: PUSH
38896: LD_INT 11
38898: PUSH
38899: LD_INT 12
38901: PUSH
38902: LD_INT 13
38904: PUSH
38905: LD_INT 16
38907: PUSH
38908: LD_INT 17
38910: PUSH
38911: LD_INT 18
38913: PUSH
38914: LD_INT 19
38916: PUSH
38917: LD_INT 20
38919: PUSH
38920: LD_INT 21
38922: PUSH
38923: EMPTY
38924: LIST
38925: LIST
38926: LIST
38927: LIST
38928: LIST
38929: LIST
38930: LIST
38931: LIST
38932: LIST
38933: LIST
38934: LIST
38935: LIST
38936: LIST
38937: IN
38938: NOT
38939: OR
38940: PUSH
38941: LD_VAR 0 8
38945: PUSH
38946: LD_INT 5
38948: ARRAY
38949: NOT
38950: OR
38951: PUSH
38952: LD_VAR 0 8
38956: PUSH
38957: LD_INT 6
38959: ARRAY
38960: PUSH
38961: LD_INT 1
38963: PUSH
38964: LD_INT 2
38966: PUSH
38967: LD_INT 7
38969: PUSH
38970: LD_INT 9
38972: PUSH
38973: LD_INT 10
38975: PUSH
38976: LD_INT 11
38978: PUSH
38979: EMPTY
38980: LIST
38981: LIST
38982: LIST
38983: LIST
38984: LIST
38985: LIST
38986: IN
38987: NOT
38988: OR
38989: IFFALSE 38995
// exit ;
38991: POP
38992: POP
38993: GO 39093
// end ;
38995: GO 38666
38997: POP
38998: POP
// side := GetSide ( depot ) ;
38999: LD_ADDR_VAR 0 9
39003: PUSH
39004: LD_VAR 0 1
39008: PPUSH
39009: CALL_OW 255
39013: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
39014: LD_VAR 0 9
39018: PPUSH
39019: LD_VAR 0 3
39023: PPUSH
39024: LD_VAR 0 4
39028: PPUSH
39029: LD_INT 20
39031: PPUSH
39032: CALL 31747 0 4
39036: PUSH
39037: LD_INT 4
39039: ARRAY
39040: IFFALSE 39044
// exit ;
39042: GO 39093
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
39044: LD_VAR 0 2
39048: PUSH
39049: LD_INT 29
39051: PUSH
39052: LD_INT 30
39054: PUSH
39055: EMPTY
39056: LIST
39057: LIST
39058: IN
39059: PUSH
39060: LD_VAR 0 3
39064: PPUSH
39065: LD_VAR 0 4
39069: PPUSH
39070: LD_VAR 0 9
39074: PPUSH
39075: CALL_OW 440
39079: NOT
39080: AND
39081: IFFALSE 39085
// exit ;
39083: GO 39093
// result := true ;
39085: LD_ADDR_VAR 0 6
39089: PUSH
39090: LD_INT 1
39092: ST_TO_ADDR
// end ;
39093: LD_VAR 0 6
39097: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
39098: LD_INT 0
39100: PPUSH
39101: PPUSH
39102: PPUSH
39103: PPUSH
39104: PPUSH
39105: PPUSH
39106: PPUSH
39107: PPUSH
39108: PPUSH
39109: PPUSH
39110: PPUSH
39111: PPUSH
39112: PPUSH
39113: PPUSH
39114: PPUSH
39115: PPUSH
39116: PPUSH
39117: PPUSH
39118: PPUSH
39119: PPUSH
39120: PPUSH
39121: PPUSH
39122: PPUSH
39123: PPUSH
39124: PPUSH
39125: PPUSH
39126: PPUSH
39127: PPUSH
39128: PPUSH
39129: PPUSH
39130: PPUSH
39131: PPUSH
39132: PPUSH
39133: PPUSH
39134: PPUSH
39135: PPUSH
39136: PPUSH
39137: PPUSH
39138: PPUSH
39139: PPUSH
39140: PPUSH
39141: PPUSH
39142: PPUSH
39143: PPUSH
39144: PPUSH
39145: PPUSH
39146: PPUSH
39147: PPUSH
39148: PPUSH
39149: PPUSH
39150: PPUSH
39151: PPUSH
39152: PPUSH
39153: PPUSH
39154: PPUSH
39155: PPUSH
39156: PPUSH
39157: PPUSH
// result = [ ] ;
39158: LD_ADDR_VAR 0 7
39162: PUSH
39163: EMPTY
39164: ST_TO_ADDR
// temp_list = [ ] ;
39165: LD_ADDR_VAR 0 9
39169: PUSH
39170: EMPTY
39171: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
39172: LD_VAR 0 4
39176: PUSH
39177: LD_INT 0
39179: PUSH
39180: LD_INT 1
39182: PUSH
39183: LD_INT 2
39185: PUSH
39186: LD_INT 3
39188: PUSH
39189: LD_INT 4
39191: PUSH
39192: LD_INT 5
39194: PUSH
39195: EMPTY
39196: LIST
39197: LIST
39198: LIST
39199: LIST
39200: LIST
39201: LIST
39202: IN
39203: NOT
39204: PUSH
39205: LD_VAR 0 1
39209: PUSH
39210: LD_INT 0
39212: PUSH
39213: LD_INT 1
39215: PUSH
39216: EMPTY
39217: LIST
39218: LIST
39219: IN
39220: PUSH
39221: LD_VAR 0 5
39225: PUSH
39226: LD_INT 1
39228: PUSH
39229: LD_INT 2
39231: PUSH
39232: LD_INT 3
39234: PUSH
39235: EMPTY
39236: LIST
39237: LIST
39238: LIST
39239: IN
39240: NOT
39241: AND
39242: OR
39243: IFFALSE 39247
// exit ;
39245: GO 57638
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
39247: LD_VAR 0 1
39251: PUSH
39252: LD_INT 6
39254: PUSH
39255: LD_INT 7
39257: PUSH
39258: LD_INT 8
39260: PUSH
39261: LD_INT 13
39263: PUSH
39264: LD_INT 12
39266: PUSH
39267: LD_INT 15
39269: PUSH
39270: LD_INT 11
39272: PUSH
39273: LD_INT 14
39275: PUSH
39276: LD_INT 10
39278: PUSH
39279: EMPTY
39280: LIST
39281: LIST
39282: LIST
39283: LIST
39284: LIST
39285: LIST
39286: LIST
39287: LIST
39288: LIST
39289: IN
39290: IFFALSE 39300
// btype = b_lab ;
39292: LD_ADDR_VAR 0 1
39296: PUSH
39297: LD_INT 6
39299: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
39300: LD_VAR 0 6
39304: PUSH
39305: LD_INT 0
39307: PUSH
39308: LD_INT 1
39310: PUSH
39311: LD_INT 2
39313: PUSH
39314: EMPTY
39315: LIST
39316: LIST
39317: LIST
39318: IN
39319: NOT
39320: PUSH
39321: LD_VAR 0 1
39325: PUSH
39326: LD_INT 0
39328: PUSH
39329: LD_INT 1
39331: PUSH
39332: LD_INT 2
39334: PUSH
39335: LD_INT 3
39337: PUSH
39338: LD_INT 6
39340: PUSH
39341: LD_INT 36
39343: PUSH
39344: LD_INT 4
39346: PUSH
39347: LD_INT 5
39349: PUSH
39350: LD_INT 31
39352: PUSH
39353: LD_INT 32
39355: PUSH
39356: LD_INT 33
39358: PUSH
39359: EMPTY
39360: LIST
39361: LIST
39362: LIST
39363: LIST
39364: LIST
39365: LIST
39366: LIST
39367: LIST
39368: LIST
39369: LIST
39370: LIST
39371: IN
39372: NOT
39373: PUSH
39374: LD_VAR 0 6
39378: PUSH
39379: LD_INT 1
39381: EQUAL
39382: AND
39383: OR
39384: PUSH
39385: LD_VAR 0 1
39389: PUSH
39390: LD_INT 2
39392: PUSH
39393: LD_INT 3
39395: PUSH
39396: EMPTY
39397: LIST
39398: LIST
39399: IN
39400: NOT
39401: PUSH
39402: LD_VAR 0 6
39406: PUSH
39407: LD_INT 2
39409: EQUAL
39410: AND
39411: OR
39412: IFFALSE 39422
// mode = 0 ;
39414: LD_ADDR_VAR 0 6
39418: PUSH
39419: LD_INT 0
39421: ST_TO_ADDR
// case mode of 0 :
39422: LD_VAR 0 6
39426: PUSH
39427: LD_INT 0
39429: DOUBLE
39430: EQUAL
39431: IFTRUE 39435
39433: GO 50888
39435: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
39436: LD_ADDR_VAR 0 11
39440: PUSH
39441: LD_INT 0
39443: PUSH
39444: LD_INT 0
39446: PUSH
39447: EMPTY
39448: LIST
39449: LIST
39450: PUSH
39451: LD_INT 0
39453: PUSH
39454: LD_INT 1
39456: NEG
39457: PUSH
39458: EMPTY
39459: LIST
39460: LIST
39461: PUSH
39462: LD_INT 1
39464: PUSH
39465: LD_INT 0
39467: PUSH
39468: EMPTY
39469: LIST
39470: LIST
39471: PUSH
39472: LD_INT 1
39474: PUSH
39475: LD_INT 1
39477: PUSH
39478: EMPTY
39479: LIST
39480: LIST
39481: PUSH
39482: LD_INT 0
39484: PUSH
39485: LD_INT 1
39487: PUSH
39488: EMPTY
39489: LIST
39490: LIST
39491: PUSH
39492: LD_INT 1
39494: NEG
39495: PUSH
39496: LD_INT 0
39498: PUSH
39499: EMPTY
39500: LIST
39501: LIST
39502: PUSH
39503: LD_INT 1
39505: NEG
39506: PUSH
39507: LD_INT 1
39509: NEG
39510: PUSH
39511: EMPTY
39512: LIST
39513: LIST
39514: PUSH
39515: LD_INT 1
39517: NEG
39518: PUSH
39519: LD_INT 2
39521: NEG
39522: PUSH
39523: EMPTY
39524: LIST
39525: LIST
39526: PUSH
39527: LD_INT 0
39529: PUSH
39530: LD_INT 2
39532: NEG
39533: PUSH
39534: EMPTY
39535: LIST
39536: LIST
39537: PUSH
39538: LD_INT 1
39540: PUSH
39541: LD_INT 1
39543: NEG
39544: PUSH
39545: EMPTY
39546: LIST
39547: LIST
39548: PUSH
39549: LD_INT 1
39551: PUSH
39552: LD_INT 2
39554: PUSH
39555: EMPTY
39556: LIST
39557: LIST
39558: PUSH
39559: LD_INT 0
39561: PUSH
39562: LD_INT 2
39564: PUSH
39565: EMPTY
39566: LIST
39567: LIST
39568: PUSH
39569: LD_INT 1
39571: NEG
39572: PUSH
39573: LD_INT 1
39575: PUSH
39576: EMPTY
39577: LIST
39578: LIST
39579: PUSH
39580: LD_INT 1
39582: PUSH
39583: LD_INT 3
39585: PUSH
39586: EMPTY
39587: LIST
39588: LIST
39589: PUSH
39590: LD_INT 0
39592: PUSH
39593: LD_INT 3
39595: PUSH
39596: EMPTY
39597: LIST
39598: LIST
39599: PUSH
39600: LD_INT 1
39602: NEG
39603: PUSH
39604: LD_INT 2
39606: PUSH
39607: EMPTY
39608: LIST
39609: LIST
39610: PUSH
39611: EMPTY
39612: LIST
39613: LIST
39614: LIST
39615: LIST
39616: LIST
39617: LIST
39618: LIST
39619: LIST
39620: LIST
39621: LIST
39622: LIST
39623: LIST
39624: LIST
39625: LIST
39626: LIST
39627: LIST
39628: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39629: LD_ADDR_VAR 0 12
39633: PUSH
39634: LD_INT 0
39636: PUSH
39637: LD_INT 0
39639: PUSH
39640: EMPTY
39641: LIST
39642: LIST
39643: PUSH
39644: LD_INT 0
39646: PUSH
39647: LD_INT 1
39649: NEG
39650: PUSH
39651: EMPTY
39652: LIST
39653: LIST
39654: PUSH
39655: LD_INT 1
39657: PUSH
39658: LD_INT 0
39660: PUSH
39661: EMPTY
39662: LIST
39663: LIST
39664: PUSH
39665: LD_INT 1
39667: PUSH
39668: LD_INT 1
39670: PUSH
39671: EMPTY
39672: LIST
39673: LIST
39674: PUSH
39675: LD_INT 0
39677: PUSH
39678: LD_INT 1
39680: PUSH
39681: EMPTY
39682: LIST
39683: LIST
39684: PUSH
39685: LD_INT 1
39687: NEG
39688: PUSH
39689: LD_INT 0
39691: PUSH
39692: EMPTY
39693: LIST
39694: LIST
39695: PUSH
39696: LD_INT 1
39698: NEG
39699: PUSH
39700: LD_INT 1
39702: NEG
39703: PUSH
39704: EMPTY
39705: LIST
39706: LIST
39707: PUSH
39708: LD_INT 1
39710: PUSH
39711: LD_INT 1
39713: NEG
39714: PUSH
39715: EMPTY
39716: LIST
39717: LIST
39718: PUSH
39719: LD_INT 2
39721: PUSH
39722: LD_INT 0
39724: PUSH
39725: EMPTY
39726: LIST
39727: LIST
39728: PUSH
39729: LD_INT 2
39731: PUSH
39732: LD_INT 1
39734: PUSH
39735: EMPTY
39736: LIST
39737: LIST
39738: PUSH
39739: LD_INT 1
39741: NEG
39742: PUSH
39743: LD_INT 1
39745: PUSH
39746: EMPTY
39747: LIST
39748: LIST
39749: PUSH
39750: LD_INT 2
39752: NEG
39753: PUSH
39754: LD_INT 0
39756: PUSH
39757: EMPTY
39758: LIST
39759: LIST
39760: PUSH
39761: LD_INT 2
39763: NEG
39764: PUSH
39765: LD_INT 1
39767: NEG
39768: PUSH
39769: EMPTY
39770: LIST
39771: LIST
39772: PUSH
39773: LD_INT 2
39775: NEG
39776: PUSH
39777: LD_INT 1
39779: PUSH
39780: EMPTY
39781: LIST
39782: LIST
39783: PUSH
39784: LD_INT 3
39786: NEG
39787: PUSH
39788: LD_INT 0
39790: PUSH
39791: EMPTY
39792: LIST
39793: LIST
39794: PUSH
39795: LD_INT 3
39797: NEG
39798: PUSH
39799: LD_INT 1
39801: NEG
39802: PUSH
39803: EMPTY
39804: LIST
39805: LIST
39806: PUSH
39807: EMPTY
39808: LIST
39809: LIST
39810: LIST
39811: LIST
39812: LIST
39813: LIST
39814: LIST
39815: LIST
39816: LIST
39817: LIST
39818: LIST
39819: LIST
39820: LIST
39821: LIST
39822: LIST
39823: LIST
39824: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39825: LD_ADDR_VAR 0 13
39829: PUSH
39830: LD_INT 0
39832: PUSH
39833: LD_INT 0
39835: PUSH
39836: EMPTY
39837: LIST
39838: LIST
39839: PUSH
39840: LD_INT 0
39842: PUSH
39843: LD_INT 1
39845: NEG
39846: PUSH
39847: EMPTY
39848: LIST
39849: LIST
39850: PUSH
39851: LD_INT 1
39853: PUSH
39854: LD_INT 0
39856: PUSH
39857: EMPTY
39858: LIST
39859: LIST
39860: PUSH
39861: LD_INT 1
39863: PUSH
39864: LD_INT 1
39866: PUSH
39867: EMPTY
39868: LIST
39869: LIST
39870: PUSH
39871: LD_INT 0
39873: PUSH
39874: LD_INT 1
39876: PUSH
39877: EMPTY
39878: LIST
39879: LIST
39880: PUSH
39881: LD_INT 1
39883: NEG
39884: PUSH
39885: LD_INT 0
39887: PUSH
39888: EMPTY
39889: LIST
39890: LIST
39891: PUSH
39892: LD_INT 1
39894: NEG
39895: PUSH
39896: LD_INT 1
39898: NEG
39899: PUSH
39900: EMPTY
39901: LIST
39902: LIST
39903: PUSH
39904: LD_INT 1
39906: NEG
39907: PUSH
39908: LD_INT 2
39910: NEG
39911: PUSH
39912: EMPTY
39913: LIST
39914: LIST
39915: PUSH
39916: LD_INT 2
39918: PUSH
39919: LD_INT 1
39921: PUSH
39922: EMPTY
39923: LIST
39924: LIST
39925: PUSH
39926: LD_INT 2
39928: PUSH
39929: LD_INT 2
39931: PUSH
39932: EMPTY
39933: LIST
39934: LIST
39935: PUSH
39936: LD_INT 1
39938: PUSH
39939: LD_INT 2
39941: PUSH
39942: EMPTY
39943: LIST
39944: LIST
39945: PUSH
39946: LD_INT 2
39948: NEG
39949: PUSH
39950: LD_INT 1
39952: NEG
39953: PUSH
39954: EMPTY
39955: LIST
39956: LIST
39957: PUSH
39958: LD_INT 2
39960: NEG
39961: PUSH
39962: LD_INT 2
39964: NEG
39965: PUSH
39966: EMPTY
39967: LIST
39968: LIST
39969: PUSH
39970: LD_INT 2
39972: NEG
39973: PUSH
39974: LD_INT 3
39976: NEG
39977: PUSH
39978: EMPTY
39979: LIST
39980: LIST
39981: PUSH
39982: LD_INT 3
39984: NEG
39985: PUSH
39986: LD_INT 2
39988: NEG
39989: PUSH
39990: EMPTY
39991: LIST
39992: LIST
39993: PUSH
39994: LD_INT 3
39996: NEG
39997: PUSH
39998: LD_INT 3
40000: NEG
40001: PUSH
40002: EMPTY
40003: LIST
40004: LIST
40005: PUSH
40006: EMPTY
40007: LIST
40008: LIST
40009: LIST
40010: LIST
40011: LIST
40012: LIST
40013: LIST
40014: LIST
40015: LIST
40016: LIST
40017: LIST
40018: LIST
40019: LIST
40020: LIST
40021: LIST
40022: LIST
40023: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
40024: LD_ADDR_VAR 0 14
40028: PUSH
40029: LD_INT 0
40031: PUSH
40032: LD_INT 0
40034: PUSH
40035: EMPTY
40036: LIST
40037: LIST
40038: PUSH
40039: LD_INT 0
40041: PUSH
40042: LD_INT 1
40044: NEG
40045: PUSH
40046: EMPTY
40047: LIST
40048: LIST
40049: PUSH
40050: LD_INT 1
40052: PUSH
40053: LD_INT 0
40055: PUSH
40056: EMPTY
40057: LIST
40058: LIST
40059: PUSH
40060: LD_INT 1
40062: PUSH
40063: LD_INT 1
40065: PUSH
40066: EMPTY
40067: LIST
40068: LIST
40069: PUSH
40070: LD_INT 0
40072: PUSH
40073: LD_INT 1
40075: PUSH
40076: EMPTY
40077: LIST
40078: LIST
40079: PUSH
40080: LD_INT 1
40082: NEG
40083: PUSH
40084: LD_INT 0
40086: PUSH
40087: EMPTY
40088: LIST
40089: LIST
40090: PUSH
40091: LD_INT 1
40093: NEG
40094: PUSH
40095: LD_INT 1
40097: NEG
40098: PUSH
40099: EMPTY
40100: LIST
40101: LIST
40102: PUSH
40103: LD_INT 1
40105: NEG
40106: PUSH
40107: LD_INT 2
40109: NEG
40110: PUSH
40111: EMPTY
40112: LIST
40113: LIST
40114: PUSH
40115: LD_INT 0
40117: PUSH
40118: LD_INT 2
40120: NEG
40121: PUSH
40122: EMPTY
40123: LIST
40124: LIST
40125: PUSH
40126: LD_INT 1
40128: PUSH
40129: LD_INT 1
40131: NEG
40132: PUSH
40133: EMPTY
40134: LIST
40135: LIST
40136: PUSH
40137: LD_INT 1
40139: PUSH
40140: LD_INT 2
40142: PUSH
40143: EMPTY
40144: LIST
40145: LIST
40146: PUSH
40147: LD_INT 0
40149: PUSH
40150: LD_INT 2
40152: PUSH
40153: EMPTY
40154: LIST
40155: LIST
40156: PUSH
40157: LD_INT 1
40159: NEG
40160: PUSH
40161: LD_INT 1
40163: PUSH
40164: EMPTY
40165: LIST
40166: LIST
40167: PUSH
40168: LD_INT 1
40170: NEG
40171: PUSH
40172: LD_INT 3
40174: NEG
40175: PUSH
40176: EMPTY
40177: LIST
40178: LIST
40179: PUSH
40180: LD_INT 0
40182: PUSH
40183: LD_INT 3
40185: NEG
40186: PUSH
40187: EMPTY
40188: LIST
40189: LIST
40190: PUSH
40191: LD_INT 1
40193: PUSH
40194: LD_INT 2
40196: NEG
40197: PUSH
40198: EMPTY
40199: LIST
40200: LIST
40201: PUSH
40202: EMPTY
40203: LIST
40204: LIST
40205: LIST
40206: LIST
40207: LIST
40208: LIST
40209: LIST
40210: LIST
40211: LIST
40212: LIST
40213: LIST
40214: LIST
40215: LIST
40216: LIST
40217: LIST
40218: LIST
40219: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
40220: LD_ADDR_VAR 0 15
40224: PUSH
40225: LD_INT 0
40227: PUSH
40228: LD_INT 0
40230: PUSH
40231: EMPTY
40232: LIST
40233: LIST
40234: PUSH
40235: LD_INT 0
40237: PUSH
40238: LD_INT 1
40240: NEG
40241: PUSH
40242: EMPTY
40243: LIST
40244: LIST
40245: PUSH
40246: LD_INT 1
40248: PUSH
40249: LD_INT 0
40251: PUSH
40252: EMPTY
40253: LIST
40254: LIST
40255: PUSH
40256: LD_INT 1
40258: PUSH
40259: LD_INT 1
40261: PUSH
40262: EMPTY
40263: LIST
40264: LIST
40265: PUSH
40266: LD_INT 0
40268: PUSH
40269: LD_INT 1
40271: PUSH
40272: EMPTY
40273: LIST
40274: LIST
40275: PUSH
40276: LD_INT 1
40278: NEG
40279: PUSH
40280: LD_INT 0
40282: PUSH
40283: EMPTY
40284: LIST
40285: LIST
40286: PUSH
40287: LD_INT 1
40289: NEG
40290: PUSH
40291: LD_INT 1
40293: NEG
40294: PUSH
40295: EMPTY
40296: LIST
40297: LIST
40298: PUSH
40299: LD_INT 1
40301: PUSH
40302: LD_INT 1
40304: NEG
40305: PUSH
40306: EMPTY
40307: LIST
40308: LIST
40309: PUSH
40310: LD_INT 2
40312: PUSH
40313: LD_INT 0
40315: PUSH
40316: EMPTY
40317: LIST
40318: LIST
40319: PUSH
40320: LD_INT 2
40322: PUSH
40323: LD_INT 1
40325: PUSH
40326: EMPTY
40327: LIST
40328: LIST
40329: PUSH
40330: LD_INT 1
40332: NEG
40333: PUSH
40334: LD_INT 1
40336: PUSH
40337: EMPTY
40338: LIST
40339: LIST
40340: PUSH
40341: LD_INT 2
40343: NEG
40344: PUSH
40345: LD_INT 0
40347: PUSH
40348: EMPTY
40349: LIST
40350: LIST
40351: PUSH
40352: LD_INT 2
40354: NEG
40355: PUSH
40356: LD_INT 1
40358: NEG
40359: PUSH
40360: EMPTY
40361: LIST
40362: LIST
40363: PUSH
40364: LD_INT 2
40366: PUSH
40367: LD_INT 1
40369: NEG
40370: PUSH
40371: EMPTY
40372: LIST
40373: LIST
40374: PUSH
40375: LD_INT 3
40377: PUSH
40378: LD_INT 0
40380: PUSH
40381: EMPTY
40382: LIST
40383: LIST
40384: PUSH
40385: LD_INT 3
40387: PUSH
40388: LD_INT 1
40390: PUSH
40391: EMPTY
40392: LIST
40393: LIST
40394: PUSH
40395: EMPTY
40396: LIST
40397: LIST
40398: LIST
40399: LIST
40400: LIST
40401: LIST
40402: LIST
40403: LIST
40404: LIST
40405: LIST
40406: LIST
40407: LIST
40408: LIST
40409: LIST
40410: LIST
40411: LIST
40412: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
40413: LD_ADDR_VAR 0 16
40417: PUSH
40418: LD_INT 0
40420: PUSH
40421: LD_INT 0
40423: PUSH
40424: EMPTY
40425: LIST
40426: LIST
40427: PUSH
40428: LD_INT 0
40430: PUSH
40431: LD_INT 1
40433: NEG
40434: PUSH
40435: EMPTY
40436: LIST
40437: LIST
40438: PUSH
40439: LD_INT 1
40441: PUSH
40442: LD_INT 0
40444: PUSH
40445: EMPTY
40446: LIST
40447: LIST
40448: PUSH
40449: LD_INT 1
40451: PUSH
40452: LD_INT 1
40454: PUSH
40455: EMPTY
40456: LIST
40457: LIST
40458: PUSH
40459: LD_INT 0
40461: PUSH
40462: LD_INT 1
40464: PUSH
40465: EMPTY
40466: LIST
40467: LIST
40468: PUSH
40469: LD_INT 1
40471: NEG
40472: PUSH
40473: LD_INT 0
40475: PUSH
40476: EMPTY
40477: LIST
40478: LIST
40479: PUSH
40480: LD_INT 1
40482: NEG
40483: PUSH
40484: LD_INT 1
40486: NEG
40487: PUSH
40488: EMPTY
40489: LIST
40490: LIST
40491: PUSH
40492: LD_INT 1
40494: NEG
40495: PUSH
40496: LD_INT 2
40498: NEG
40499: PUSH
40500: EMPTY
40501: LIST
40502: LIST
40503: PUSH
40504: LD_INT 2
40506: PUSH
40507: LD_INT 1
40509: PUSH
40510: EMPTY
40511: LIST
40512: LIST
40513: PUSH
40514: LD_INT 2
40516: PUSH
40517: LD_INT 2
40519: PUSH
40520: EMPTY
40521: LIST
40522: LIST
40523: PUSH
40524: LD_INT 1
40526: PUSH
40527: LD_INT 2
40529: PUSH
40530: EMPTY
40531: LIST
40532: LIST
40533: PUSH
40534: LD_INT 2
40536: NEG
40537: PUSH
40538: LD_INT 1
40540: NEG
40541: PUSH
40542: EMPTY
40543: LIST
40544: LIST
40545: PUSH
40546: LD_INT 2
40548: NEG
40549: PUSH
40550: LD_INT 2
40552: NEG
40553: PUSH
40554: EMPTY
40555: LIST
40556: LIST
40557: PUSH
40558: LD_INT 3
40560: PUSH
40561: LD_INT 2
40563: PUSH
40564: EMPTY
40565: LIST
40566: LIST
40567: PUSH
40568: LD_INT 3
40570: PUSH
40571: LD_INT 3
40573: PUSH
40574: EMPTY
40575: LIST
40576: LIST
40577: PUSH
40578: LD_INT 2
40580: PUSH
40581: LD_INT 3
40583: PUSH
40584: EMPTY
40585: LIST
40586: LIST
40587: PUSH
40588: EMPTY
40589: LIST
40590: LIST
40591: LIST
40592: LIST
40593: LIST
40594: LIST
40595: LIST
40596: LIST
40597: LIST
40598: LIST
40599: LIST
40600: LIST
40601: LIST
40602: LIST
40603: LIST
40604: LIST
40605: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40606: LD_ADDR_VAR 0 17
40610: PUSH
40611: LD_INT 0
40613: PUSH
40614: LD_INT 0
40616: PUSH
40617: EMPTY
40618: LIST
40619: LIST
40620: PUSH
40621: LD_INT 0
40623: PUSH
40624: LD_INT 1
40626: NEG
40627: PUSH
40628: EMPTY
40629: LIST
40630: LIST
40631: PUSH
40632: LD_INT 1
40634: PUSH
40635: LD_INT 0
40637: PUSH
40638: EMPTY
40639: LIST
40640: LIST
40641: PUSH
40642: LD_INT 1
40644: PUSH
40645: LD_INT 1
40647: PUSH
40648: EMPTY
40649: LIST
40650: LIST
40651: PUSH
40652: LD_INT 0
40654: PUSH
40655: LD_INT 1
40657: PUSH
40658: EMPTY
40659: LIST
40660: LIST
40661: PUSH
40662: LD_INT 1
40664: NEG
40665: PUSH
40666: LD_INT 0
40668: PUSH
40669: EMPTY
40670: LIST
40671: LIST
40672: PUSH
40673: LD_INT 1
40675: NEG
40676: PUSH
40677: LD_INT 1
40679: NEG
40680: PUSH
40681: EMPTY
40682: LIST
40683: LIST
40684: PUSH
40685: LD_INT 1
40687: NEG
40688: PUSH
40689: LD_INT 2
40691: NEG
40692: PUSH
40693: EMPTY
40694: LIST
40695: LIST
40696: PUSH
40697: LD_INT 0
40699: PUSH
40700: LD_INT 2
40702: NEG
40703: PUSH
40704: EMPTY
40705: LIST
40706: LIST
40707: PUSH
40708: LD_INT 1
40710: PUSH
40711: LD_INT 1
40713: NEG
40714: PUSH
40715: EMPTY
40716: LIST
40717: LIST
40718: PUSH
40719: LD_INT 2
40721: PUSH
40722: LD_INT 0
40724: PUSH
40725: EMPTY
40726: LIST
40727: LIST
40728: PUSH
40729: LD_INT 2
40731: PUSH
40732: LD_INT 1
40734: PUSH
40735: EMPTY
40736: LIST
40737: LIST
40738: PUSH
40739: LD_INT 2
40741: PUSH
40742: LD_INT 2
40744: PUSH
40745: EMPTY
40746: LIST
40747: LIST
40748: PUSH
40749: LD_INT 1
40751: PUSH
40752: LD_INT 2
40754: PUSH
40755: EMPTY
40756: LIST
40757: LIST
40758: PUSH
40759: LD_INT 0
40761: PUSH
40762: LD_INT 2
40764: PUSH
40765: EMPTY
40766: LIST
40767: LIST
40768: PUSH
40769: LD_INT 1
40771: NEG
40772: PUSH
40773: LD_INT 1
40775: PUSH
40776: EMPTY
40777: LIST
40778: LIST
40779: PUSH
40780: LD_INT 2
40782: NEG
40783: PUSH
40784: LD_INT 0
40786: PUSH
40787: EMPTY
40788: LIST
40789: LIST
40790: PUSH
40791: LD_INT 2
40793: NEG
40794: PUSH
40795: LD_INT 1
40797: NEG
40798: PUSH
40799: EMPTY
40800: LIST
40801: LIST
40802: PUSH
40803: LD_INT 2
40805: NEG
40806: PUSH
40807: LD_INT 2
40809: NEG
40810: PUSH
40811: EMPTY
40812: LIST
40813: LIST
40814: PUSH
40815: EMPTY
40816: LIST
40817: LIST
40818: LIST
40819: LIST
40820: LIST
40821: LIST
40822: LIST
40823: LIST
40824: LIST
40825: LIST
40826: LIST
40827: LIST
40828: LIST
40829: LIST
40830: LIST
40831: LIST
40832: LIST
40833: LIST
40834: LIST
40835: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40836: LD_ADDR_VAR 0 18
40840: PUSH
40841: LD_INT 0
40843: PUSH
40844: LD_INT 0
40846: PUSH
40847: EMPTY
40848: LIST
40849: LIST
40850: PUSH
40851: LD_INT 0
40853: PUSH
40854: LD_INT 1
40856: NEG
40857: PUSH
40858: EMPTY
40859: LIST
40860: LIST
40861: PUSH
40862: LD_INT 1
40864: PUSH
40865: LD_INT 0
40867: PUSH
40868: EMPTY
40869: LIST
40870: LIST
40871: PUSH
40872: LD_INT 1
40874: PUSH
40875: LD_INT 1
40877: PUSH
40878: EMPTY
40879: LIST
40880: LIST
40881: PUSH
40882: LD_INT 0
40884: PUSH
40885: LD_INT 1
40887: PUSH
40888: EMPTY
40889: LIST
40890: LIST
40891: PUSH
40892: LD_INT 1
40894: NEG
40895: PUSH
40896: LD_INT 0
40898: PUSH
40899: EMPTY
40900: LIST
40901: LIST
40902: PUSH
40903: LD_INT 1
40905: NEG
40906: PUSH
40907: LD_INT 1
40909: NEG
40910: PUSH
40911: EMPTY
40912: LIST
40913: LIST
40914: PUSH
40915: LD_INT 1
40917: NEG
40918: PUSH
40919: LD_INT 2
40921: NEG
40922: PUSH
40923: EMPTY
40924: LIST
40925: LIST
40926: PUSH
40927: LD_INT 0
40929: PUSH
40930: LD_INT 2
40932: NEG
40933: PUSH
40934: EMPTY
40935: LIST
40936: LIST
40937: PUSH
40938: LD_INT 1
40940: PUSH
40941: LD_INT 1
40943: NEG
40944: PUSH
40945: EMPTY
40946: LIST
40947: LIST
40948: PUSH
40949: LD_INT 2
40951: PUSH
40952: LD_INT 0
40954: PUSH
40955: EMPTY
40956: LIST
40957: LIST
40958: PUSH
40959: LD_INT 2
40961: PUSH
40962: LD_INT 1
40964: PUSH
40965: EMPTY
40966: LIST
40967: LIST
40968: PUSH
40969: LD_INT 2
40971: PUSH
40972: LD_INT 2
40974: PUSH
40975: EMPTY
40976: LIST
40977: LIST
40978: PUSH
40979: LD_INT 1
40981: PUSH
40982: LD_INT 2
40984: PUSH
40985: EMPTY
40986: LIST
40987: LIST
40988: PUSH
40989: LD_INT 0
40991: PUSH
40992: LD_INT 2
40994: PUSH
40995: EMPTY
40996: LIST
40997: LIST
40998: PUSH
40999: LD_INT 1
41001: NEG
41002: PUSH
41003: LD_INT 1
41005: PUSH
41006: EMPTY
41007: LIST
41008: LIST
41009: PUSH
41010: LD_INT 2
41012: NEG
41013: PUSH
41014: LD_INT 0
41016: PUSH
41017: EMPTY
41018: LIST
41019: LIST
41020: PUSH
41021: LD_INT 2
41023: NEG
41024: PUSH
41025: LD_INT 1
41027: NEG
41028: PUSH
41029: EMPTY
41030: LIST
41031: LIST
41032: PUSH
41033: LD_INT 2
41035: NEG
41036: PUSH
41037: LD_INT 2
41039: NEG
41040: PUSH
41041: EMPTY
41042: LIST
41043: LIST
41044: PUSH
41045: EMPTY
41046: LIST
41047: LIST
41048: LIST
41049: LIST
41050: LIST
41051: LIST
41052: LIST
41053: LIST
41054: LIST
41055: LIST
41056: LIST
41057: LIST
41058: LIST
41059: LIST
41060: LIST
41061: LIST
41062: LIST
41063: LIST
41064: LIST
41065: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41066: LD_ADDR_VAR 0 19
41070: PUSH
41071: LD_INT 0
41073: PUSH
41074: LD_INT 0
41076: PUSH
41077: EMPTY
41078: LIST
41079: LIST
41080: PUSH
41081: LD_INT 0
41083: PUSH
41084: LD_INT 1
41086: NEG
41087: PUSH
41088: EMPTY
41089: LIST
41090: LIST
41091: PUSH
41092: LD_INT 1
41094: PUSH
41095: LD_INT 0
41097: PUSH
41098: EMPTY
41099: LIST
41100: LIST
41101: PUSH
41102: LD_INT 1
41104: PUSH
41105: LD_INT 1
41107: PUSH
41108: EMPTY
41109: LIST
41110: LIST
41111: PUSH
41112: LD_INT 0
41114: PUSH
41115: LD_INT 1
41117: PUSH
41118: EMPTY
41119: LIST
41120: LIST
41121: PUSH
41122: LD_INT 1
41124: NEG
41125: PUSH
41126: LD_INT 0
41128: PUSH
41129: EMPTY
41130: LIST
41131: LIST
41132: PUSH
41133: LD_INT 1
41135: NEG
41136: PUSH
41137: LD_INT 1
41139: NEG
41140: PUSH
41141: EMPTY
41142: LIST
41143: LIST
41144: PUSH
41145: LD_INT 1
41147: NEG
41148: PUSH
41149: LD_INT 2
41151: NEG
41152: PUSH
41153: EMPTY
41154: LIST
41155: LIST
41156: PUSH
41157: LD_INT 0
41159: PUSH
41160: LD_INT 2
41162: NEG
41163: PUSH
41164: EMPTY
41165: LIST
41166: LIST
41167: PUSH
41168: LD_INT 1
41170: PUSH
41171: LD_INT 1
41173: NEG
41174: PUSH
41175: EMPTY
41176: LIST
41177: LIST
41178: PUSH
41179: LD_INT 2
41181: PUSH
41182: LD_INT 0
41184: PUSH
41185: EMPTY
41186: LIST
41187: LIST
41188: PUSH
41189: LD_INT 2
41191: PUSH
41192: LD_INT 1
41194: PUSH
41195: EMPTY
41196: LIST
41197: LIST
41198: PUSH
41199: LD_INT 2
41201: PUSH
41202: LD_INT 2
41204: PUSH
41205: EMPTY
41206: LIST
41207: LIST
41208: PUSH
41209: LD_INT 1
41211: PUSH
41212: LD_INT 2
41214: PUSH
41215: EMPTY
41216: LIST
41217: LIST
41218: PUSH
41219: LD_INT 0
41221: PUSH
41222: LD_INT 2
41224: PUSH
41225: EMPTY
41226: LIST
41227: LIST
41228: PUSH
41229: LD_INT 1
41231: NEG
41232: PUSH
41233: LD_INT 1
41235: PUSH
41236: EMPTY
41237: LIST
41238: LIST
41239: PUSH
41240: LD_INT 2
41242: NEG
41243: PUSH
41244: LD_INT 0
41246: PUSH
41247: EMPTY
41248: LIST
41249: LIST
41250: PUSH
41251: LD_INT 2
41253: NEG
41254: PUSH
41255: LD_INT 1
41257: NEG
41258: PUSH
41259: EMPTY
41260: LIST
41261: LIST
41262: PUSH
41263: LD_INT 2
41265: NEG
41266: PUSH
41267: LD_INT 2
41269: NEG
41270: PUSH
41271: EMPTY
41272: LIST
41273: LIST
41274: PUSH
41275: EMPTY
41276: LIST
41277: LIST
41278: LIST
41279: LIST
41280: LIST
41281: LIST
41282: LIST
41283: LIST
41284: LIST
41285: LIST
41286: LIST
41287: LIST
41288: LIST
41289: LIST
41290: LIST
41291: LIST
41292: LIST
41293: LIST
41294: LIST
41295: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41296: LD_ADDR_VAR 0 20
41300: PUSH
41301: LD_INT 0
41303: PUSH
41304: LD_INT 0
41306: PUSH
41307: EMPTY
41308: LIST
41309: LIST
41310: PUSH
41311: LD_INT 0
41313: PUSH
41314: LD_INT 1
41316: NEG
41317: PUSH
41318: EMPTY
41319: LIST
41320: LIST
41321: PUSH
41322: LD_INT 1
41324: PUSH
41325: LD_INT 0
41327: PUSH
41328: EMPTY
41329: LIST
41330: LIST
41331: PUSH
41332: LD_INT 1
41334: PUSH
41335: LD_INT 1
41337: PUSH
41338: EMPTY
41339: LIST
41340: LIST
41341: PUSH
41342: LD_INT 0
41344: PUSH
41345: LD_INT 1
41347: PUSH
41348: EMPTY
41349: LIST
41350: LIST
41351: PUSH
41352: LD_INT 1
41354: NEG
41355: PUSH
41356: LD_INT 0
41358: PUSH
41359: EMPTY
41360: LIST
41361: LIST
41362: PUSH
41363: LD_INT 1
41365: NEG
41366: PUSH
41367: LD_INT 1
41369: NEG
41370: PUSH
41371: EMPTY
41372: LIST
41373: LIST
41374: PUSH
41375: LD_INT 1
41377: NEG
41378: PUSH
41379: LD_INT 2
41381: NEG
41382: PUSH
41383: EMPTY
41384: LIST
41385: LIST
41386: PUSH
41387: LD_INT 0
41389: PUSH
41390: LD_INT 2
41392: NEG
41393: PUSH
41394: EMPTY
41395: LIST
41396: LIST
41397: PUSH
41398: LD_INT 1
41400: PUSH
41401: LD_INT 1
41403: NEG
41404: PUSH
41405: EMPTY
41406: LIST
41407: LIST
41408: PUSH
41409: LD_INT 2
41411: PUSH
41412: LD_INT 0
41414: PUSH
41415: EMPTY
41416: LIST
41417: LIST
41418: PUSH
41419: LD_INT 2
41421: PUSH
41422: LD_INT 1
41424: PUSH
41425: EMPTY
41426: LIST
41427: LIST
41428: PUSH
41429: LD_INT 2
41431: PUSH
41432: LD_INT 2
41434: PUSH
41435: EMPTY
41436: LIST
41437: LIST
41438: PUSH
41439: LD_INT 1
41441: PUSH
41442: LD_INT 2
41444: PUSH
41445: EMPTY
41446: LIST
41447: LIST
41448: PUSH
41449: LD_INT 0
41451: PUSH
41452: LD_INT 2
41454: PUSH
41455: EMPTY
41456: LIST
41457: LIST
41458: PUSH
41459: LD_INT 1
41461: NEG
41462: PUSH
41463: LD_INT 1
41465: PUSH
41466: EMPTY
41467: LIST
41468: LIST
41469: PUSH
41470: LD_INT 2
41472: NEG
41473: PUSH
41474: LD_INT 0
41476: PUSH
41477: EMPTY
41478: LIST
41479: LIST
41480: PUSH
41481: LD_INT 2
41483: NEG
41484: PUSH
41485: LD_INT 1
41487: NEG
41488: PUSH
41489: EMPTY
41490: LIST
41491: LIST
41492: PUSH
41493: LD_INT 2
41495: NEG
41496: PUSH
41497: LD_INT 2
41499: NEG
41500: PUSH
41501: EMPTY
41502: LIST
41503: LIST
41504: PUSH
41505: EMPTY
41506: LIST
41507: LIST
41508: LIST
41509: LIST
41510: LIST
41511: LIST
41512: LIST
41513: LIST
41514: LIST
41515: LIST
41516: LIST
41517: LIST
41518: LIST
41519: LIST
41520: LIST
41521: LIST
41522: LIST
41523: LIST
41524: LIST
41525: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41526: LD_ADDR_VAR 0 21
41530: PUSH
41531: LD_INT 0
41533: PUSH
41534: LD_INT 0
41536: PUSH
41537: EMPTY
41538: LIST
41539: LIST
41540: PUSH
41541: LD_INT 0
41543: PUSH
41544: LD_INT 1
41546: NEG
41547: PUSH
41548: EMPTY
41549: LIST
41550: LIST
41551: PUSH
41552: LD_INT 1
41554: PUSH
41555: LD_INT 0
41557: PUSH
41558: EMPTY
41559: LIST
41560: LIST
41561: PUSH
41562: LD_INT 1
41564: PUSH
41565: LD_INT 1
41567: PUSH
41568: EMPTY
41569: LIST
41570: LIST
41571: PUSH
41572: LD_INT 0
41574: PUSH
41575: LD_INT 1
41577: PUSH
41578: EMPTY
41579: LIST
41580: LIST
41581: PUSH
41582: LD_INT 1
41584: NEG
41585: PUSH
41586: LD_INT 0
41588: PUSH
41589: EMPTY
41590: LIST
41591: LIST
41592: PUSH
41593: LD_INT 1
41595: NEG
41596: PUSH
41597: LD_INT 1
41599: NEG
41600: PUSH
41601: EMPTY
41602: LIST
41603: LIST
41604: PUSH
41605: LD_INT 1
41607: NEG
41608: PUSH
41609: LD_INT 2
41611: NEG
41612: PUSH
41613: EMPTY
41614: LIST
41615: LIST
41616: PUSH
41617: LD_INT 0
41619: PUSH
41620: LD_INT 2
41622: NEG
41623: PUSH
41624: EMPTY
41625: LIST
41626: LIST
41627: PUSH
41628: LD_INT 1
41630: PUSH
41631: LD_INT 1
41633: NEG
41634: PUSH
41635: EMPTY
41636: LIST
41637: LIST
41638: PUSH
41639: LD_INT 2
41641: PUSH
41642: LD_INT 0
41644: PUSH
41645: EMPTY
41646: LIST
41647: LIST
41648: PUSH
41649: LD_INT 2
41651: PUSH
41652: LD_INT 1
41654: PUSH
41655: EMPTY
41656: LIST
41657: LIST
41658: PUSH
41659: LD_INT 2
41661: PUSH
41662: LD_INT 2
41664: PUSH
41665: EMPTY
41666: LIST
41667: LIST
41668: PUSH
41669: LD_INT 1
41671: PUSH
41672: LD_INT 2
41674: PUSH
41675: EMPTY
41676: LIST
41677: LIST
41678: PUSH
41679: LD_INT 0
41681: PUSH
41682: LD_INT 2
41684: PUSH
41685: EMPTY
41686: LIST
41687: LIST
41688: PUSH
41689: LD_INT 1
41691: NEG
41692: PUSH
41693: LD_INT 1
41695: PUSH
41696: EMPTY
41697: LIST
41698: LIST
41699: PUSH
41700: LD_INT 2
41702: NEG
41703: PUSH
41704: LD_INT 0
41706: PUSH
41707: EMPTY
41708: LIST
41709: LIST
41710: PUSH
41711: LD_INT 2
41713: NEG
41714: PUSH
41715: LD_INT 1
41717: NEG
41718: PUSH
41719: EMPTY
41720: LIST
41721: LIST
41722: PUSH
41723: LD_INT 2
41725: NEG
41726: PUSH
41727: LD_INT 2
41729: NEG
41730: PUSH
41731: EMPTY
41732: LIST
41733: LIST
41734: PUSH
41735: EMPTY
41736: LIST
41737: LIST
41738: LIST
41739: LIST
41740: LIST
41741: LIST
41742: LIST
41743: LIST
41744: LIST
41745: LIST
41746: LIST
41747: LIST
41748: LIST
41749: LIST
41750: LIST
41751: LIST
41752: LIST
41753: LIST
41754: LIST
41755: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41756: LD_ADDR_VAR 0 22
41760: PUSH
41761: LD_INT 0
41763: PUSH
41764: LD_INT 0
41766: PUSH
41767: EMPTY
41768: LIST
41769: LIST
41770: PUSH
41771: LD_INT 0
41773: PUSH
41774: LD_INT 1
41776: NEG
41777: PUSH
41778: EMPTY
41779: LIST
41780: LIST
41781: PUSH
41782: LD_INT 1
41784: PUSH
41785: LD_INT 0
41787: PUSH
41788: EMPTY
41789: LIST
41790: LIST
41791: PUSH
41792: LD_INT 1
41794: PUSH
41795: LD_INT 1
41797: PUSH
41798: EMPTY
41799: LIST
41800: LIST
41801: PUSH
41802: LD_INT 0
41804: PUSH
41805: LD_INT 1
41807: PUSH
41808: EMPTY
41809: LIST
41810: LIST
41811: PUSH
41812: LD_INT 1
41814: NEG
41815: PUSH
41816: LD_INT 0
41818: PUSH
41819: EMPTY
41820: LIST
41821: LIST
41822: PUSH
41823: LD_INT 1
41825: NEG
41826: PUSH
41827: LD_INT 1
41829: NEG
41830: PUSH
41831: EMPTY
41832: LIST
41833: LIST
41834: PUSH
41835: LD_INT 1
41837: NEG
41838: PUSH
41839: LD_INT 2
41841: NEG
41842: PUSH
41843: EMPTY
41844: LIST
41845: LIST
41846: PUSH
41847: LD_INT 0
41849: PUSH
41850: LD_INT 2
41852: NEG
41853: PUSH
41854: EMPTY
41855: LIST
41856: LIST
41857: PUSH
41858: LD_INT 1
41860: PUSH
41861: LD_INT 1
41863: NEG
41864: PUSH
41865: EMPTY
41866: LIST
41867: LIST
41868: PUSH
41869: LD_INT 2
41871: PUSH
41872: LD_INT 0
41874: PUSH
41875: EMPTY
41876: LIST
41877: LIST
41878: PUSH
41879: LD_INT 2
41881: PUSH
41882: LD_INT 1
41884: PUSH
41885: EMPTY
41886: LIST
41887: LIST
41888: PUSH
41889: LD_INT 2
41891: PUSH
41892: LD_INT 2
41894: PUSH
41895: EMPTY
41896: LIST
41897: LIST
41898: PUSH
41899: LD_INT 1
41901: PUSH
41902: LD_INT 2
41904: PUSH
41905: EMPTY
41906: LIST
41907: LIST
41908: PUSH
41909: LD_INT 0
41911: PUSH
41912: LD_INT 2
41914: PUSH
41915: EMPTY
41916: LIST
41917: LIST
41918: PUSH
41919: LD_INT 1
41921: NEG
41922: PUSH
41923: LD_INT 1
41925: PUSH
41926: EMPTY
41927: LIST
41928: LIST
41929: PUSH
41930: LD_INT 2
41932: NEG
41933: PUSH
41934: LD_INT 0
41936: PUSH
41937: EMPTY
41938: LIST
41939: LIST
41940: PUSH
41941: LD_INT 2
41943: NEG
41944: PUSH
41945: LD_INT 1
41947: NEG
41948: PUSH
41949: EMPTY
41950: LIST
41951: LIST
41952: PUSH
41953: LD_INT 2
41955: NEG
41956: PUSH
41957: LD_INT 2
41959: NEG
41960: PUSH
41961: EMPTY
41962: LIST
41963: LIST
41964: PUSH
41965: EMPTY
41966: LIST
41967: LIST
41968: LIST
41969: LIST
41970: LIST
41971: LIST
41972: LIST
41973: LIST
41974: LIST
41975: LIST
41976: LIST
41977: LIST
41978: LIST
41979: LIST
41980: LIST
41981: LIST
41982: LIST
41983: LIST
41984: LIST
41985: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
41986: LD_ADDR_VAR 0 23
41990: PUSH
41991: LD_INT 0
41993: PUSH
41994: LD_INT 0
41996: PUSH
41997: EMPTY
41998: LIST
41999: LIST
42000: PUSH
42001: LD_INT 0
42003: PUSH
42004: LD_INT 1
42006: NEG
42007: PUSH
42008: EMPTY
42009: LIST
42010: LIST
42011: PUSH
42012: LD_INT 1
42014: PUSH
42015: LD_INT 0
42017: PUSH
42018: EMPTY
42019: LIST
42020: LIST
42021: PUSH
42022: LD_INT 1
42024: PUSH
42025: LD_INT 1
42027: PUSH
42028: EMPTY
42029: LIST
42030: LIST
42031: PUSH
42032: LD_INT 0
42034: PUSH
42035: LD_INT 1
42037: PUSH
42038: EMPTY
42039: LIST
42040: LIST
42041: PUSH
42042: LD_INT 1
42044: NEG
42045: PUSH
42046: LD_INT 0
42048: PUSH
42049: EMPTY
42050: LIST
42051: LIST
42052: PUSH
42053: LD_INT 1
42055: NEG
42056: PUSH
42057: LD_INT 1
42059: NEG
42060: PUSH
42061: EMPTY
42062: LIST
42063: LIST
42064: PUSH
42065: LD_INT 1
42067: NEG
42068: PUSH
42069: LD_INT 2
42071: NEG
42072: PUSH
42073: EMPTY
42074: LIST
42075: LIST
42076: PUSH
42077: LD_INT 0
42079: PUSH
42080: LD_INT 2
42082: NEG
42083: PUSH
42084: EMPTY
42085: LIST
42086: LIST
42087: PUSH
42088: LD_INT 1
42090: PUSH
42091: LD_INT 1
42093: NEG
42094: PUSH
42095: EMPTY
42096: LIST
42097: LIST
42098: PUSH
42099: LD_INT 2
42101: PUSH
42102: LD_INT 0
42104: PUSH
42105: EMPTY
42106: LIST
42107: LIST
42108: PUSH
42109: LD_INT 2
42111: PUSH
42112: LD_INT 1
42114: PUSH
42115: EMPTY
42116: LIST
42117: LIST
42118: PUSH
42119: LD_INT 2
42121: PUSH
42122: LD_INT 2
42124: PUSH
42125: EMPTY
42126: LIST
42127: LIST
42128: PUSH
42129: LD_INT 1
42131: PUSH
42132: LD_INT 2
42134: PUSH
42135: EMPTY
42136: LIST
42137: LIST
42138: PUSH
42139: LD_INT 0
42141: PUSH
42142: LD_INT 2
42144: PUSH
42145: EMPTY
42146: LIST
42147: LIST
42148: PUSH
42149: LD_INT 1
42151: NEG
42152: PUSH
42153: LD_INT 1
42155: PUSH
42156: EMPTY
42157: LIST
42158: LIST
42159: PUSH
42160: LD_INT 2
42162: NEG
42163: PUSH
42164: LD_INT 0
42166: PUSH
42167: EMPTY
42168: LIST
42169: LIST
42170: PUSH
42171: LD_INT 2
42173: NEG
42174: PUSH
42175: LD_INT 1
42177: NEG
42178: PUSH
42179: EMPTY
42180: LIST
42181: LIST
42182: PUSH
42183: LD_INT 2
42185: NEG
42186: PUSH
42187: LD_INT 2
42189: NEG
42190: PUSH
42191: EMPTY
42192: LIST
42193: LIST
42194: PUSH
42195: LD_INT 2
42197: NEG
42198: PUSH
42199: LD_INT 3
42201: NEG
42202: PUSH
42203: EMPTY
42204: LIST
42205: LIST
42206: PUSH
42207: LD_INT 1
42209: NEG
42210: PUSH
42211: LD_INT 3
42213: NEG
42214: PUSH
42215: EMPTY
42216: LIST
42217: LIST
42218: PUSH
42219: LD_INT 1
42221: PUSH
42222: LD_INT 2
42224: NEG
42225: PUSH
42226: EMPTY
42227: LIST
42228: LIST
42229: PUSH
42230: LD_INT 2
42232: PUSH
42233: LD_INT 1
42235: NEG
42236: PUSH
42237: EMPTY
42238: LIST
42239: LIST
42240: PUSH
42241: EMPTY
42242: LIST
42243: LIST
42244: LIST
42245: LIST
42246: LIST
42247: LIST
42248: LIST
42249: LIST
42250: LIST
42251: LIST
42252: LIST
42253: LIST
42254: LIST
42255: LIST
42256: LIST
42257: LIST
42258: LIST
42259: LIST
42260: LIST
42261: LIST
42262: LIST
42263: LIST
42264: LIST
42265: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
42266: LD_ADDR_VAR 0 24
42270: PUSH
42271: LD_INT 0
42273: PUSH
42274: LD_INT 0
42276: PUSH
42277: EMPTY
42278: LIST
42279: LIST
42280: PUSH
42281: LD_INT 0
42283: PUSH
42284: LD_INT 1
42286: NEG
42287: PUSH
42288: EMPTY
42289: LIST
42290: LIST
42291: PUSH
42292: LD_INT 1
42294: PUSH
42295: LD_INT 0
42297: PUSH
42298: EMPTY
42299: LIST
42300: LIST
42301: PUSH
42302: LD_INT 1
42304: PUSH
42305: LD_INT 1
42307: PUSH
42308: EMPTY
42309: LIST
42310: LIST
42311: PUSH
42312: LD_INT 0
42314: PUSH
42315: LD_INT 1
42317: PUSH
42318: EMPTY
42319: LIST
42320: LIST
42321: PUSH
42322: LD_INT 1
42324: NEG
42325: PUSH
42326: LD_INT 0
42328: PUSH
42329: EMPTY
42330: LIST
42331: LIST
42332: PUSH
42333: LD_INT 1
42335: NEG
42336: PUSH
42337: LD_INT 1
42339: NEG
42340: PUSH
42341: EMPTY
42342: LIST
42343: LIST
42344: PUSH
42345: LD_INT 1
42347: NEG
42348: PUSH
42349: LD_INT 2
42351: NEG
42352: PUSH
42353: EMPTY
42354: LIST
42355: LIST
42356: PUSH
42357: LD_INT 0
42359: PUSH
42360: LD_INT 2
42362: NEG
42363: PUSH
42364: EMPTY
42365: LIST
42366: LIST
42367: PUSH
42368: LD_INT 1
42370: PUSH
42371: LD_INT 1
42373: NEG
42374: PUSH
42375: EMPTY
42376: LIST
42377: LIST
42378: PUSH
42379: LD_INT 2
42381: PUSH
42382: LD_INT 0
42384: PUSH
42385: EMPTY
42386: LIST
42387: LIST
42388: PUSH
42389: LD_INT 2
42391: PUSH
42392: LD_INT 1
42394: PUSH
42395: EMPTY
42396: LIST
42397: LIST
42398: PUSH
42399: LD_INT 2
42401: PUSH
42402: LD_INT 2
42404: PUSH
42405: EMPTY
42406: LIST
42407: LIST
42408: PUSH
42409: LD_INT 1
42411: PUSH
42412: LD_INT 2
42414: PUSH
42415: EMPTY
42416: LIST
42417: LIST
42418: PUSH
42419: LD_INT 0
42421: PUSH
42422: LD_INT 2
42424: PUSH
42425: EMPTY
42426: LIST
42427: LIST
42428: PUSH
42429: LD_INT 1
42431: NEG
42432: PUSH
42433: LD_INT 1
42435: PUSH
42436: EMPTY
42437: LIST
42438: LIST
42439: PUSH
42440: LD_INT 2
42442: NEG
42443: PUSH
42444: LD_INT 0
42446: PUSH
42447: EMPTY
42448: LIST
42449: LIST
42450: PUSH
42451: LD_INT 2
42453: NEG
42454: PUSH
42455: LD_INT 1
42457: NEG
42458: PUSH
42459: EMPTY
42460: LIST
42461: LIST
42462: PUSH
42463: LD_INT 2
42465: NEG
42466: PUSH
42467: LD_INT 2
42469: NEG
42470: PUSH
42471: EMPTY
42472: LIST
42473: LIST
42474: PUSH
42475: LD_INT 1
42477: PUSH
42478: LD_INT 2
42480: NEG
42481: PUSH
42482: EMPTY
42483: LIST
42484: LIST
42485: PUSH
42486: LD_INT 2
42488: PUSH
42489: LD_INT 1
42491: NEG
42492: PUSH
42493: EMPTY
42494: LIST
42495: LIST
42496: PUSH
42497: LD_INT 3
42499: PUSH
42500: LD_INT 1
42502: PUSH
42503: EMPTY
42504: LIST
42505: LIST
42506: PUSH
42507: LD_INT 3
42509: PUSH
42510: LD_INT 2
42512: PUSH
42513: EMPTY
42514: LIST
42515: LIST
42516: PUSH
42517: EMPTY
42518: LIST
42519: LIST
42520: LIST
42521: LIST
42522: LIST
42523: LIST
42524: LIST
42525: LIST
42526: LIST
42527: LIST
42528: LIST
42529: LIST
42530: LIST
42531: LIST
42532: LIST
42533: LIST
42534: LIST
42535: LIST
42536: LIST
42537: LIST
42538: LIST
42539: LIST
42540: LIST
42541: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
42542: LD_ADDR_VAR 0 25
42546: PUSH
42547: LD_INT 0
42549: PUSH
42550: LD_INT 0
42552: PUSH
42553: EMPTY
42554: LIST
42555: LIST
42556: PUSH
42557: LD_INT 0
42559: PUSH
42560: LD_INT 1
42562: NEG
42563: PUSH
42564: EMPTY
42565: LIST
42566: LIST
42567: PUSH
42568: LD_INT 1
42570: PUSH
42571: LD_INT 0
42573: PUSH
42574: EMPTY
42575: LIST
42576: LIST
42577: PUSH
42578: LD_INT 1
42580: PUSH
42581: LD_INT 1
42583: PUSH
42584: EMPTY
42585: LIST
42586: LIST
42587: PUSH
42588: LD_INT 0
42590: PUSH
42591: LD_INT 1
42593: PUSH
42594: EMPTY
42595: LIST
42596: LIST
42597: PUSH
42598: LD_INT 1
42600: NEG
42601: PUSH
42602: LD_INT 0
42604: PUSH
42605: EMPTY
42606: LIST
42607: LIST
42608: PUSH
42609: LD_INT 1
42611: NEG
42612: PUSH
42613: LD_INT 1
42615: NEG
42616: PUSH
42617: EMPTY
42618: LIST
42619: LIST
42620: PUSH
42621: LD_INT 1
42623: NEG
42624: PUSH
42625: LD_INT 2
42627: NEG
42628: PUSH
42629: EMPTY
42630: LIST
42631: LIST
42632: PUSH
42633: LD_INT 0
42635: PUSH
42636: LD_INT 2
42638: NEG
42639: PUSH
42640: EMPTY
42641: LIST
42642: LIST
42643: PUSH
42644: LD_INT 1
42646: PUSH
42647: LD_INT 1
42649: NEG
42650: PUSH
42651: EMPTY
42652: LIST
42653: LIST
42654: PUSH
42655: LD_INT 2
42657: PUSH
42658: LD_INT 0
42660: PUSH
42661: EMPTY
42662: LIST
42663: LIST
42664: PUSH
42665: LD_INT 2
42667: PUSH
42668: LD_INT 1
42670: PUSH
42671: EMPTY
42672: LIST
42673: LIST
42674: PUSH
42675: LD_INT 2
42677: PUSH
42678: LD_INT 2
42680: PUSH
42681: EMPTY
42682: LIST
42683: LIST
42684: PUSH
42685: LD_INT 1
42687: PUSH
42688: LD_INT 2
42690: PUSH
42691: EMPTY
42692: LIST
42693: LIST
42694: PUSH
42695: LD_INT 0
42697: PUSH
42698: LD_INT 2
42700: PUSH
42701: EMPTY
42702: LIST
42703: LIST
42704: PUSH
42705: LD_INT 1
42707: NEG
42708: PUSH
42709: LD_INT 1
42711: PUSH
42712: EMPTY
42713: LIST
42714: LIST
42715: PUSH
42716: LD_INT 2
42718: NEG
42719: PUSH
42720: LD_INT 0
42722: PUSH
42723: EMPTY
42724: LIST
42725: LIST
42726: PUSH
42727: LD_INT 2
42729: NEG
42730: PUSH
42731: LD_INT 1
42733: NEG
42734: PUSH
42735: EMPTY
42736: LIST
42737: LIST
42738: PUSH
42739: LD_INT 2
42741: NEG
42742: PUSH
42743: LD_INT 2
42745: NEG
42746: PUSH
42747: EMPTY
42748: LIST
42749: LIST
42750: PUSH
42751: LD_INT 3
42753: PUSH
42754: LD_INT 1
42756: PUSH
42757: EMPTY
42758: LIST
42759: LIST
42760: PUSH
42761: LD_INT 3
42763: PUSH
42764: LD_INT 2
42766: PUSH
42767: EMPTY
42768: LIST
42769: LIST
42770: PUSH
42771: LD_INT 2
42773: PUSH
42774: LD_INT 3
42776: PUSH
42777: EMPTY
42778: LIST
42779: LIST
42780: PUSH
42781: LD_INT 1
42783: PUSH
42784: LD_INT 3
42786: PUSH
42787: EMPTY
42788: LIST
42789: LIST
42790: PUSH
42791: EMPTY
42792: LIST
42793: LIST
42794: LIST
42795: LIST
42796: LIST
42797: LIST
42798: LIST
42799: LIST
42800: LIST
42801: LIST
42802: LIST
42803: LIST
42804: LIST
42805: LIST
42806: LIST
42807: LIST
42808: LIST
42809: LIST
42810: LIST
42811: LIST
42812: LIST
42813: LIST
42814: LIST
42815: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
42816: LD_ADDR_VAR 0 26
42820: PUSH
42821: LD_INT 0
42823: PUSH
42824: LD_INT 0
42826: PUSH
42827: EMPTY
42828: LIST
42829: LIST
42830: PUSH
42831: LD_INT 0
42833: PUSH
42834: LD_INT 1
42836: NEG
42837: PUSH
42838: EMPTY
42839: LIST
42840: LIST
42841: PUSH
42842: LD_INT 1
42844: PUSH
42845: LD_INT 0
42847: PUSH
42848: EMPTY
42849: LIST
42850: LIST
42851: PUSH
42852: LD_INT 1
42854: PUSH
42855: LD_INT 1
42857: PUSH
42858: EMPTY
42859: LIST
42860: LIST
42861: PUSH
42862: LD_INT 0
42864: PUSH
42865: LD_INT 1
42867: PUSH
42868: EMPTY
42869: LIST
42870: LIST
42871: PUSH
42872: LD_INT 1
42874: NEG
42875: PUSH
42876: LD_INT 0
42878: PUSH
42879: EMPTY
42880: LIST
42881: LIST
42882: PUSH
42883: LD_INT 1
42885: NEG
42886: PUSH
42887: LD_INT 1
42889: NEG
42890: PUSH
42891: EMPTY
42892: LIST
42893: LIST
42894: PUSH
42895: LD_INT 1
42897: NEG
42898: PUSH
42899: LD_INT 2
42901: NEG
42902: PUSH
42903: EMPTY
42904: LIST
42905: LIST
42906: PUSH
42907: LD_INT 0
42909: PUSH
42910: LD_INT 2
42912: NEG
42913: PUSH
42914: EMPTY
42915: LIST
42916: LIST
42917: PUSH
42918: LD_INT 1
42920: PUSH
42921: LD_INT 1
42923: NEG
42924: PUSH
42925: EMPTY
42926: LIST
42927: LIST
42928: PUSH
42929: LD_INT 2
42931: PUSH
42932: LD_INT 0
42934: PUSH
42935: EMPTY
42936: LIST
42937: LIST
42938: PUSH
42939: LD_INT 2
42941: PUSH
42942: LD_INT 1
42944: PUSH
42945: EMPTY
42946: LIST
42947: LIST
42948: PUSH
42949: LD_INT 2
42951: PUSH
42952: LD_INT 2
42954: PUSH
42955: EMPTY
42956: LIST
42957: LIST
42958: PUSH
42959: LD_INT 1
42961: PUSH
42962: LD_INT 2
42964: PUSH
42965: EMPTY
42966: LIST
42967: LIST
42968: PUSH
42969: LD_INT 0
42971: PUSH
42972: LD_INT 2
42974: PUSH
42975: EMPTY
42976: LIST
42977: LIST
42978: PUSH
42979: LD_INT 1
42981: NEG
42982: PUSH
42983: LD_INT 1
42985: PUSH
42986: EMPTY
42987: LIST
42988: LIST
42989: PUSH
42990: LD_INT 2
42992: NEG
42993: PUSH
42994: LD_INT 0
42996: PUSH
42997: EMPTY
42998: LIST
42999: LIST
43000: PUSH
43001: LD_INT 2
43003: NEG
43004: PUSH
43005: LD_INT 1
43007: NEG
43008: PUSH
43009: EMPTY
43010: LIST
43011: LIST
43012: PUSH
43013: LD_INT 2
43015: NEG
43016: PUSH
43017: LD_INT 2
43019: NEG
43020: PUSH
43021: EMPTY
43022: LIST
43023: LIST
43024: PUSH
43025: LD_INT 2
43027: PUSH
43028: LD_INT 3
43030: PUSH
43031: EMPTY
43032: LIST
43033: LIST
43034: PUSH
43035: LD_INT 1
43037: PUSH
43038: LD_INT 3
43040: PUSH
43041: EMPTY
43042: LIST
43043: LIST
43044: PUSH
43045: LD_INT 1
43047: NEG
43048: PUSH
43049: LD_INT 2
43051: PUSH
43052: EMPTY
43053: LIST
43054: LIST
43055: PUSH
43056: LD_INT 2
43058: NEG
43059: PUSH
43060: LD_INT 1
43062: PUSH
43063: EMPTY
43064: LIST
43065: LIST
43066: PUSH
43067: EMPTY
43068: LIST
43069: LIST
43070: LIST
43071: LIST
43072: LIST
43073: LIST
43074: LIST
43075: LIST
43076: LIST
43077: LIST
43078: LIST
43079: LIST
43080: LIST
43081: LIST
43082: LIST
43083: LIST
43084: LIST
43085: LIST
43086: LIST
43087: LIST
43088: LIST
43089: LIST
43090: LIST
43091: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
43092: LD_ADDR_VAR 0 27
43096: PUSH
43097: LD_INT 0
43099: PUSH
43100: LD_INT 0
43102: PUSH
43103: EMPTY
43104: LIST
43105: LIST
43106: PUSH
43107: LD_INT 0
43109: PUSH
43110: LD_INT 1
43112: NEG
43113: PUSH
43114: EMPTY
43115: LIST
43116: LIST
43117: PUSH
43118: LD_INT 1
43120: PUSH
43121: LD_INT 0
43123: PUSH
43124: EMPTY
43125: LIST
43126: LIST
43127: PUSH
43128: LD_INT 1
43130: PUSH
43131: LD_INT 1
43133: PUSH
43134: EMPTY
43135: LIST
43136: LIST
43137: PUSH
43138: LD_INT 0
43140: PUSH
43141: LD_INT 1
43143: PUSH
43144: EMPTY
43145: LIST
43146: LIST
43147: PUSH
43148: LD_INT 1
43150: NEG
43151: PUSH
43152: LD_INT 0
43154: PUSH
43155: EMPTY
43156: LIST
43157: LIST
43158: PUSH
43159: LD_INT 1
43161: NEG
43162: PUSH
43163: LD_INT 1
43165: NEG
43166: PUSH
43167: EMPTY
43168: LIST
43169: LIST
43170: PUSH
43171: LD_INT 1
43173: NEG
43174: PUSH
43175: LD_INT 2
43177: NEG
43178: PUSH
43179: EMPTY
43180: LIST
43181: LIST
43182: PUSH
43183: LD_INT 0
43185: PUSH
43186: LD_INT 2
43188: NEG
43189: PUSH
43190: EMPTY
43191: LIST
43192: LIST
43193: PUSH
43194: LD_INT 1
43196: PUSH
43197: LD_INT 1
43199: NEG
43200: PUSH
43201: EMPTY
43202: LIST
43203: LIST
43204: PUSH
43205: LD_INT 2
43207: PUSH
43208: LD_INT 0
43210: PUSH
43211: EMPTY
43212: LIST
43213: LIST
43214: PUSH
43215: LD_INT 2
43217: PUSH
43218: LD_INT 1
43220: PUSH
43221: EMPTY
43222: LIST
43223: LIST
43224: PUSH
43225: LD_INT 2
43227: PUSH
43228: LD_INT 2
43230: PUSH
43231: EMPTY
43232: LIST
43233: LIST
43234: PUSH
43235: LD_INT 1
43237: PUSH
43238: LD_INT 2
43240: PUSH
43241: EMPTY
43242: LIST
43243: LIST
43244: PUSH
43245: LD_INT 0
43247: PUSH
43248: LD_INT 2
43250: PUSH
43251: EMPTY
43252: LIST
43253: LIST
43254: PUSH
43255: LD_INT 1
43257: NEG
43258: PUSH
43259: LD_INT 1
43261: PUSH
43262: EMPTY
43263: LIST
43264: LIST
43265: PUSH
43266: LD_INT 2
43268: NEG
43269: PUSH
43270: LD_INT 0
43272: PUSH
43273: EMPTY
43274: LIST
43275: LIST
43276: PUSH
43277: LD_INT 2
43279: NEG
43280: PUSH
43281: LD_INT 1
43283: NEG
43284: PUSH
43285: EMPTY
43286: LIST
43287: LIST
43288: PUSH
43289: LD_INT 2
43291: NEG
43292: PUSH
43293: LD_INT 2
43295: NEG
43296: PUSH
43297: EMPTY
43298: LIST
43299: LIST
43300: PUSH
43301: LD_INT 1
43303: NEG
43304: PUSH
43305: LD_INT 2
43307: PUSH
43308: EMPTY
43309: LIST
43310: LIST
43311: PUSH
43312: LD_INT 2
43314: NEG
43315: PUSH
43316: LD_INT 1
43318: PUSH
43319: EMPTY
43320: LIST
43321: LIST
43322: PUSH
43323: LD_INT 3
43325: NEG
43326: PUSH
43327: LD_INT 1
43329: NEG
43330: PUSH
43331: EMPTY
43332: LIST
43333: LIST
43334: PUSH
43335: LD_INT 3
43337: NEG
43338: PUSH
43339: LD_INT 2
43341: NEG
43342: PUSH
43343: EMPTY
43344: LIST
43345: LIST
43346: PUSH
43347: EMPTY
43348: LIST
43349: LIST
43350: LIST
43351: LIST
43352: LIST
43353: LIST
43354: LIST
43355: LIST
43356: LIST
43357: LIST
43358: LIST
43359: LIST
43360: LIST
43361: LIST
43362: LIST
43363: LIST
43364: LIST
43365: LIST
43366: LIST
43367: LIST
43368: LIST
43369: LIST
43370: LIST
43371: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
43372: LD_ADDR_VAR 0 28
43376: PUSH
43377: LD_INT 0
43379: PUSH
43380: LD_INT 0
43382: PUSH
43383: EMPTY
43384: LIST
43385: LIST
43386: PUSH
43387: LD_INT 0
43389: PUSH
43390: LD_INT 1
43392: NEG
43393: PUSH
43394: EMPTY
43395: LIST
43396: LIST
43397: PUSH
43398: LD_INT 1
43400: PUSH
43401: LD_INT 0
43403: PUSH
43404: EMPTY
43405: LIST
43406: LIST
43407: PUSH
43408: LD_INT 1
43410: PUSH
43411: LD_INT 1
43413: PUSH
43414: EMPTY
43415: LIST
43416: LIST
43417: PUSH
43418: LD_INT 0
43420: PUSH
43421: LD_INT 1
43423: PUSH
43424: EMPTY
43425: LIST
43426: LIST
43427: PUSH
43428: LD_INT 1
43430: NEG
43431: PUSH
43432: LD_INT 0
43434: PUSH
43435: EMPTY
43436: LIST
43437: LIST
43438: PUSH
43439: LD_INT 1
43441: NEG
43442: PUSH
43443: LD_INT 1
43445: NEG
43446: PUSH
43447: EMPTY
43448: LIST
43449: LIST
43450: PUSH
43451: LD_INT 1
43453: NEG
43454: PUSH
43455: LD_INT 2
43457: NEG
43458: PUSH
43459: EMPTY
43460: LIST
43461: LIST
43462: PUSH
43463: LD_INT 0
43465: PUSH
43466: LD_INT 2
43468: NEG
43469: PUSH
43470: EMPTY
43471: LIST
43472: LIST
43473: PUSH
43474: LD_INT 1
43476: PUSH
43477: LD_INT 1
43479: NEG
43480: PUSH
43481: EMPTY
43482: LIST
43483: LIST
43484: PUSH
43485: LD_INT 2
43487: PUSH
43488: LD_INT 0
43490: PUSH
43491: EMPTY
43492: LIST
43493: LIST
43494: PUSH
43495: LD_INT 2
43497: PUSH
43498: LD_INT 1
43500: PUSH
43501: EMPTY
43502: LIST
43503: LIST
43504: PUSH
43505: LD_INT 2
43507: PUSH
43508: LD_INT 2
43510: PUSH
43511: EMPTY
43512: LIST
43513: LIST
43514: PUSH
43515: LD_INT 1
43517: PUSH
43518: LD_INT 2
43520: PUSH
43521: EMPTY
43522: LIST
43523: LIST
43524: PUSH
43525: LD_INT 0
43527: PUSH
43528: LD_INT 2
43530: PUSH
43531: EMPTY
43532: LIST
43533: LIST
43534: PUSH
43535: LD_INT 1
43537: NEG
43538: PUSH
43539: LD_INT 1
43541: PUSH
43542: EMPTY
43543: LIST
43544: LIST
43545: PUSH
43546: LD_INT 2
43548: NEG
43549: PUSH
43550: LD_INT 0
43552: PUSH
43553: EMPTY
43554: LIST
43555: LIST
43556: PUSH
43557: LD_INT 2
43559: NEG
43560: PUSH
43561: LD_INT 1
43563: NEG
43564: PUSH
43565: EMPTY
43566: LIST
43567: LIST
43568: PUSH
43569: LD_INT 2
43571: NEG
43572: PUSH
43573: LD_INT 2
43575: NEG
43576: PUSH
43577: EMPTY
43578: LIST
43579: LIST
43580: PUSH
43581: LD_INT 2
43583: NEG
43584: PUSH
43585: LD_INT 3
43587: NEG
43588: PUSH
43589: EMPTY
43590: LIST
43591: LIST
43592: PUSH
43593: LD_INT 1
43595: NEG
43596: PUSH
43597: LD_INT 3
43599: NEG
43600: PUSH
43601: EMPTY
43602: LIST
43603: LIST
43604: PUSH
43605: LD_INT 3
43607: NEG
43608: PUSH
43609: LD_INT 1
43611: NEG
43612: PUSH
43613: EMPTY
43614: LIST
43615: LIST
43616: PUSH
43617: LD_INT 3
43619: NEG
43620: PUSH
43621: LD_INT 2
43623: NEG
43624: PUSH
43625: EMPTY
43626: LIST
43627: LIST
43628: PUSH
43629: EMPTY
43630: LIST
43631: LIST
43632: LIST
43633: LIST
43634: LIST
43635: LIST
43636: LIST
43637: LIST
43638: LIST
43639: LIST
43640: LIST
43641: LIST
43642: LIST
43643: LIST
43644: LIST
43645: LIST
43646: LIST
43647: LIST
43648: LIST
43649: LIST
43650: LIST
43651: LIST
43652: LIST
43653: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
43654: LD_ADDR_VAR 0 29
43658: PUSH
43659: LD_INT 0
43661: PUSH
43662: LD_INT 0
43664: PUSH
43665: EMPTY
43666: LIST
43667: LIST
43668: PUSH
43669: LD_INT 0
43671: PUSH
43672: LD_INT 1
43674: NEG
43675: PUSH
43676: EMPTY
43677: LIST
43678: LIST
43679: PUSH
43680: LD_INT 1
43682: PUSH
43683: LD_INT 0
43685: PUSH
43686: EMPTY
43687: LIST
43688: LIST
43689: PUSH
43690: LD_INT 1
43692: PUSH
43693: LD_INT 1
43695: PUSH
43696: EMPTY
43697: LIST
43698: LIST
43699: PUSH
43700: LD_INT 0
43702: PUSH
43703: LD_INT 1
43705: PUSH
43706: EMPTY
43707: LIST
43708: LIST
43709: PUSH
43710: LD_INT 1
43712: NEG
43713: PUSH
43714: LD_INT 0
43716: PUSH
43717: EMPTY
43718: LIST
43719: LIST
43720: PUSH
43721: LD_INT 1
43723: NEG
43724: PUSH
43725: LD_INT 1
43727: NEG
43728: PUSH
43729: EMPTY
43730: LIST
43731: LIST
43732: PUSH
43733: LD_INT 1
43735: NEG
43736: PUSH
43737: LD_INT 2
43739: NEG
43740: PUSH
43741: EMPTY
43742: LIST
43743: LIST
43744: PUSH
43745: LD_INT 0
43747: PUSH
43748: LD_INT 2
43750: NEG
43751: PUSH
43752: EMPTY
43753: LIST
43754: LIST
43755: PUSH
43756: LD_INT 1
43758: PUSH
43759: LD_INT 1
43761: NEG
43762: PUSH
43763: EMPTY
43764: LIST
43765: LIST
43766: PUSH
43767: LD_INT 2
43769: PUSH
43770: LD_INT 0
43772: PUSH
43773: EMPTY
43774: LIST
43775: LIST
43776: PUSH
43777: LD_INT 2
43779: PUSH
43780: LD_INT 1
43782: PUSH
43783: EMPTY
43784: LIST
43785: LIST
43786: PUSH
43787: LD_INT 1
43789: PUSH
43790: LD_INT 2
43792: PUSH
43793: EMPTY
43794: LIST
43795: LIST
43796: PUSH
43797: LD_INT 0
43799: PUSH
43800: LD_INT 2
43802: PUSH
43803: EMPTY
43804: LIST
43805: LIST
43806: PUSH
43807: LD_INT 1
43809: NEG
43810: PUSH
43811: LD_INT 1
43813: PUSH
43814: EMPTY
43815: LIST
43816: LIST
43817: PUSH
43818: LD_INT 2
43820: NEG
43821: PUSH
43822: LD_INT 1
43824: NEG
43825: PUSH
43826: EMPTY
43827: LIST
43828: LIST
43829: PUSH
43830: LD_INT 2
43832: NEG
43833: PUSH
43834: LD_INT 2
43836: NEG
43837: PUSH
43838: EMPTY
43839: LIST
43840: LIST
43841: PUSH
43842: LD_INT 2
43844: NEG
43845: PUSH
43846: LD_INT 3
43848: NEG
43849: PUSH
43850: EMPTY
43851: LIST
43852: LIST
43853: PUSH
43854: LD_INT 2
43856: PUSH
43857: LD_INT 1
43859: NEG
43860: PUSH
43861: EMPTY
43862: LIST
43863: LIST
43864: PUSH
43865: LD_INT 3
43867: PUSH
43868: LD_INT 1
43870: PUSH
43871: EMPTY
43872: LIST
43873: LIST
43874: PUSH
43875: LD_INT 1
43877: PUSH
43878: LD_INT 3
43880: PUSH
43881: EMPTY
43882: LIST
43883: LIST
43884: PUSH
43885: LD_INT 1
43887: NEG
43888: PUSH
43889: LD_INT 2
43891: PUSH
43892: EMPTY
43893: LIST
43894: LIST
43895: PUSH
43896: LD_INT 3
43898: NEG
43899: PUSH
43900: LD_INT 2
43902: NEG
43903: PUSH
43904: EMPTY
43905: LIST
43906: LIST
43907: PUSH
43908: EMPTY
43909: LIST
43910: LIST
43911: LIST
43912: LIST
43913: LIST
43914: LIST
43915: LIST
43916: LIST
43917: LIST
43918: LIST
43919: LIST
43920: LIST
43921: LIST
43922: LIST
43923: LIST
43924: LIST
43925: LIST
43926: LIST
43927: LIST
43928: LIST
43929: LIST
43930: LIST
43931: LIST
43932: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43933: LD_ADDR_VAR 0 30
43937: PUSH
43938: LD_INT 0
43940: PUSH
43941: LD_INT 0
43943: PUSH
43944: EMPTY
43945: LIST
43946: LIST
43947: PUSH
43948: LD_INT 0
43950: PUSH
43951: LD_INT 1
43953: NEG
43954: PUSH
43955: EMPTY
43956: LIST
43957: LIST
43958: PUSH
43959: LD_INT 1
43961: PUSH
43962: LD_INT 0
43964: PUSH
43965: EMPTY
43966: LIST
43967: LIST
43968: PUSH
43969: LD_INT 1
43971: PUSH
43972: LD_INT 1
43974: PUSH
43975: EMPTY
43976: LIST
43977: LIST
43978: PUSH
43979: LD_INT 0
43981: PUSH
43982: LD_INT 1
43984: PUSH
43985: EMPTY
43986: LIST
43987: LIST
43988: PUSH
43989: LD_INT 1
43991: NEG
43992: PUSH
43993: LD_INT 0
43995: PUSH
43996: EMPTY
43997: LIST
43998: LIST
43999: PUSH
44000: LD_INT 1
44002: NEG
44003: PUSH
44004: LD_INT 1
44006: NEG
44007: PUSH
44008: EMPTY
44009: LIST
44010: LIST
44011: PUSH
44012: LD_INT 1
44014: NEG
44015: PUSH
44016: LD_INT 2
44018: NEG
44019: PUSH
44020: EMPTY
44021: LIST
44022: LIST
44023: PUSH
44024: LD_INT 0
44026: PUSH
44027: LD_INT 2
44029: NEG
44030: PUSH
44031: EMPTY
44032: LIST
44033: LIST
44034: PUSH
44035: LD_INT 1
44037: PUSH
44038: LD_INT 1
44040: NEG
44041: PUSH
44042: EMPTY
44043: LIST
44044: LIST
44045: PUSH
44046: LD_INT 2
44048: PUSH
44049: LD_INT 0
44051: PUSH
44052: EMPTY
44053: LIST
44054: LIST
44055: PUSH
44056: LD_INT 2
44058: PUSH
44059: LD_INT 1
44061: PUSH
44062: EMPTY
44063: LIST
44064: LIST
44065: PUSH
44066: LD_INT 2
44068: PUSH
44069: LD_INT 2
44071: PUSH
44072: EMPTY
44073: LIST
44074: LIST
44075: PUSH
44076: LD_INT 1
44078: PUSH
44079: LD_INT 2
44081: PUSH
44082: EMPTY
44083: LIST
44084: LIST
44085: PUSH
44086: LD_INT 1
44088: NEG
44089: PUSH
44090: LD_INT 1
44092: PUSH
44093: EMPTY
44094: LIST
44095: LIST
44096: PUSH
44097: LD_INT 2
44099: NEG
44100: PUSH
44101: LD_INT 0
44103: PUSH
44104: EMPTY
44105: LIST
44106: LIST
44107: PUSH
44108: LD_INT 2
44110: NEG
44111: PUSH
44112: LD_INT 1
44114: NEG
44115: PUSH
44116: EMPTY
44117: LIST
44118: LIST
44119: PUSH
44120: LD_INT 1
44122: NEG
44123: PUSH
44124: LD_INT 3
44126: NEG
44127: PUSH
44128: EMPTY
44129: LIST
44130: LIST
44131: PUSH
44132: LD_INT 1
44134: PUSH
44135: LD_INT 2
44137: NEG
44138: PUSH
44139: EMPTY
44140: LIST
44141: LIST
44142: PUSH
44143: LD_INT 3
44145: PUSH
44146: LD_INT 2
44148: PUSH
44149: EMPTY
44150: LIST
44151: LIST
44152: PUSH
44153: LD_INT 2
44155: PUSH
44156: LD_INT 3
44158: PUSH
44159: EMPTY
44160: LIST
44161: LIST
44162: PUSH
44163: LD_INT 2
44165: NEG
44166: PUSH
44167: LD_INT 1
44169: PUSH
44170: EMPTY
44171: LIST
44172: LIST
44173: PUSH
44174: LD_INT 3
44176: NEG
44177: PUSH
44178: LD_INT 1
44180: NEG
44181: PUSH
44182: EMPTY
44183: LIST
44184: LIST
44185: PUSH
44186: EMPTY
44187: LIST
44188: LIST
44189: LIST
44190: LIST
44191: LIST
44192: LIST
44193: LIST
44194: LIST
44195: LIST
44196: LIST
44197: LIST
44198: LIST
44199: LIST
44200: LIST
44201: LIST
44202: LIST
44203: LIST
44204: LIST
44205: LIST
44206: LIST
44207: LIST
44208: LIST
44209: LIST
44210: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44211: LD_ADDR_VAR 0 31
44215: PUSH
44216: LD_INT 0
44218: PUSH
44219: LD_INT 0
44221: PUSH
44222: EMPTY
44223: LIST
44224: LIST
44225: PUSH
44226: LD_INT 0
44228: PUSH
44229: LD_INT 1
44231: NEG
44232: PUSH
44233: EMPTY
44234: LIST
44235: LIST
44236: PUSH
44237: LD_INT 1
44239: PUSH
44240: LD_INT 0
44242: PUSH
44243: EMPTY
44244: LIST
44245: LIST
44246: PUSH
44247: LD_INT 1
44249: PUSH
44250: LD_INT 1
44252: PUSH
44253: EMPTY
44254: LIST
44255: LIST
44256: PUSH
44257: LD_INT 0
44259: PUSH
44260: LD_INT 1
44262: PUSH
44263: EMPTY
44264: LIST
44265: LIST
44266: PUSH
44267: LD_INT 1
44269: NEG
44270: PUSH
44271: LD_INT 0
44273: PUSH
44274: EMPTY
44275: LIST
44276: LIST
44277: PUSH
44278: LD_INT 1
44280: NEG
44281: PUSH
44282: LD_INT 1
44284: NEG
44285: PUSH
44286: EMPTY
44287: LIST
44288: LIST
44289: PUSH
44290: LD_INT 1
44292: NEG
44293: PUSH
44294: LD_INT 2
44296: NEG
44297: PUSH
44298: EMPTY
44299: LIST
44300: LIST
44301: PUSH
44302: LD_INT 1
44304: PUSH
44305: LD_INT 1
44307: NEG
44308: PUSH
44309: EMPTY
44310: LIST
44311: LIST
44312: PUSH
44313: LD_INT 2
44315: PUSH
44316: LD_INT 0
44318: PUSH
44319: EMPTY
44320: LIST
44321: LIST
44322: PUSH
44323: LD_INT 2
44325: PUSH
44326: LD_INT 1
44328: PUSH
44329: EMPTY
44330: LIST
44331: LIST
44332: PUSH
44333: LD_INT 2
44335: PUSH
44336: LD_INT 2
44338: PUSH
44339: EMPTY
44340: LIST
44341: LIST
44342: PUSH
44343: LD_INT 1
44345: PUSH
44346: LD_INT 2
44348: PUSH
44349: EMPTY
44350: LIST
44351: LIST
44352: PUSH
44353: LD_INT 0
44355: PUSH
44356: LD_INT 2
44358: PUSH
44359: EMPTY
44360: LIST
44361: LIST
44362: PUSH
44363: LD_INT 1
44365: NEG
44366: PUSH
44367: LD_INT 1
44369: PUSH
44370: EMPTY
44371: LIST
44372: LIST
44373: PUSH
44374: LD_INT 2
44376: NEG
44377: PUSH
44378: LD_INT 1
44380: NEG
44381: PUSH
44382: EMPTY
44383: LIST
44384: LIST
44385: PUSH
44386: LD_INT 2
44388: NEG
44389: PUSH
44390: LD_INT 2
44392: NEG
44393: PUSH
44394: EMPTY
44395: LIST
44396: LIST
44397: PUSH
44398: LD_INT 2
44400: NEG
44401: PUSH
44402: LD_INT 3
44404: NEG
44405: PUSH
44406: EMPTY
44407: LIST
44408: LIST
44409: PUSH
44410: LD_INT 2
44412: PUSH
44413: LD_INT 1
44415: NEG
44416: PUSH
44417: EMPTY
44418: LIST
44419: LIST
44420: PUSH
44421: LD_INT 3
44423: PUSH
44424: LD_INT 1
44426: PUSH
44427: EMPTY
44428: LIST
44429: LIST
44430: PUSH
44431: LD_INT 1
44433: PUSH
44434: LD_INT 3
44436: PUSH
44437: EMPTY
44438: LIST
44439: LIST
44440: PUSH
44441: LD_INT 1
44443: NEG
44444: PUSH
44445: LD_INT 2
44447: PUSH
44448: EMPTY
44449: LIST
44450: LIST
44451: PUSH
44452: LD_INT 3
44454: NEG
44455: PUSH
44456: LD_INT 2
44458: NEG
44459: PUSH
44460: EMPTY
44461: LIST
44462: LIST
44463: PUSH
44464: EMPTY
44465: LIST
44466: LIST
44467: LIST
44468: LIST
44469: LIST
44470: LIST
44471: LIST
44472: LIST
44473: LIST
44474: LIST
44475: LIST
44476: LIST
44477: LIST
44478: LIST
44479: LIST
44480: LIST
44481: LIST
44482: LIST
44483: LIST
44484: LIST
44485: LIST
44486: LIST
44487: LIST
44488: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44489: LD_ADDR_VAR 0 32
44493: PUSH
44494: LD_INT 0
44496: PUSH
44497: LD_INT 0
44499: PUSH
44500: EMPTY
44501: LIST
44502: LIST
44503: PUSH
44504: LD_INT 0
44506: PUSH
44507: LD_INT 1
44509: NEG
44510: PUSH
44511: EMPTY
44512: LIST
44513: LIST
44514: PUSH
44515: LD_INT 1
44517: PUSH
44518: LD_INT 0
44520: PUSH
44521: EMPTY
44522: LIST
44523: LIST
44524: PUSH
44525: LD_INT 1
44527: PUSH
44528: LD_INT 1
44530: PUSH
44531: EMPTY
44532: LIST
44533: LIST
44534: PUSH
44535: LD_INT 0
44537: PUSH
44538: LD_INT 1
44540: PUSH
44541: EMPTY
44542: LIST
44543: LIST
44544: PUSH
44545: LD_INT 1
44547: NEG
44548: PUSH
44549: LD_INT 0
44551: PUSH
44552: EMPTY
44553: LIST
44554: LIST
44555: PUSH
44556: LD_INT 1
44558: NEG
44559: PUSH
44560: LD_INT 1
44562: NEG
44563: PUSH
44564: EMPTY
44565: LIST
44566: LIST
44567: PUSH
44568: LD_INT 1
44570: NEG
44571: PUSH
44572: LD_INT 2
44574: NEG
44575: PUSH
44576: EMPTY
44577: LIST
44578: LIST
44579: PUSH
44580: LD_INT 0
44582: PUSH
44583: LD_INT 2
44585: NEG
44586: PUSH
44587: EMPTY
44588: LIST
44589: LIST
44590: PUSH
44591: LD_INT 1
44593: PUSH
44594: LD_INT 1
44596: NEG
44597: PUSH
44598: EMPTY
44599: LIST
44600: LIST
44601: PUSH
44602: LD_INT 2
44604: PUSH
44605: LD_INT 1
44607: PUSH
44608: EMPTY
44609: LIST
44610: LIST
44611: PUSH
44612: LD_INT 2
44614: PUSH
44615: LD_INT 2
44617: PUSH
44618: EMPTY
44619: LIST
44620: LIST
44621: PUSH
44622: LD_INT 1
44624: PUSH
44625: LD_INT 2
44627: PUSH
44628: EMPTY
44629: LIST
44630: LIST
44631: PUSH
44632: LD_INT 0
44634: PUSH
44635: LD_INT 2
44637: PUSH
44638: EMPTY
44639: LIST
44640: LIST
44641: PUSH
44642: LD_INT 1
44644: NEG
44645: PUSH
44646: LD_INT 1
44648: PUSH
44649: EMPTY
44650: LIST
44651: LIST
44652: PUSH
44653: LD_INT 2
44655: NEG
44656: PUSH
44657: LD_INT 0
44659: PUSH
44660: EMPTY
44661: LIST
44662: LIST
44663: PUSH
44664: LD_INT 2
44666: NEG
44667: PUSH
44668: LD_INT 1
44670: NEG
44671: PUSH
44672: EMPTY
44673: LIST
44674: LIST
44675: PUSH
44676: LD_INT 1
44678: NEG
44679: PUSH
44680: LD_INT 3
44682: NEG
44683: PUSH
44684: EMPTY
44685: LIST
44686: LIST
44687: PUSH
44688: LD_INT 1
44690: PUSH
44691: LD_INT 2
44693: NEG
44694: PUSH
44695: EMPTY
44696: LIST
44697: LIST
44698: PUSH
44699: LD_INT 3
44701: PUSH
44702: LD_INT 2
44704: PUSH
44705: EMPTY
44706: LIST
44707: LIST
44708: PUSH
44709: LD_INT 2
44711: PUSH
44712: LD_INT 3
44714: PUSH
44715: EMPTY
44716: LIST
44717: LIST
44718: PUSH
44719: LD_INT 2
44721: NEG
44722: PUSH
44723: LD_INT 1
44725: PUSH
44726: EMPTY
44727: LIST
44728: LIST
44729: PUSH
44730: LD_INT 3
44732: NEG
44733: PUSH
44734: LD_INT 1
44736: NEG
44737: PUSH
44738: EMPTY
44739: LIST
44740: LIST
44741: PUSH
44742: EMPTY
44743: LIST
44744: LIST
44745: LIST
44746: LIST
44747: LIST
44748: LIST
44749: LIST
44750: LIST
44751: LIST
44752: LIST
44753: LIST
44754: LIST
44755: LIST
44756: LIST
44757: LIST
44758: LIST
44759: LIST
44760: LIST
44761: LIST
44762: LIST
44763: LIST
44764: LIST
44765: LIST
44766: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44767: LD_ADDR_VAR 0 33
44771: PUSH
44772: LD_INT 0
44774: PUSH
44775: LD_INT 0
44777: PUSH
44778: EMPTY
44779: LIST
44780: LIST
44781: PUSH
44782: LD_INT 0
44784: PUSH
44785: LD_INT 1
44787: NEG
44788: PUSH
44789: EMPTY
44790: LIST
44791: LIST
44792: PUSH
44793: LD_INT 1
44795: PUSH
44796: LD_INT 0
44798: PUSH
44799: EMPTY
44800: LIST
44801: LIST
44802: PUSH
44803: LD_INT 1
44805: PUSH
44806: LD_INT 1
44808: PUSH
44809: EMPTY
44810: LIST
44811: LIST
44812: PUSH
44813: LD_INT 0
44815: PUSH
44816: LD_INT 1
44818: PUSH
44819: EMPTY
44820: LIST
44821: LIST
44822: PUSH
44823: LD_INT 1
44825: NEG
44826: PUSH
44827: LD_INT 0
44829: PUSH
44830: EMPTY
44831: LIST
44832: LIST
44833: PUSH
44834: LD_INT 1
44836: NEG
44837: PUSH
44838: LD_INT 1
44840: NEG
44841: PUSH
44842: EMPTY
44843: LIST
44844: LIST
44845: PUSH
44846: LD_INT 1
44848: NEG
44849: PUSH
44850: LD_INT 2
44852: NEG
44853: PUSH
44854: EMPTY
44855: LIST
44856: LIST
44857: PUSH
44858: LD_INT 1
44860: PUSH
44861: LD_INT 1
44863: NEG
44864: PUSH
44865: EMPTY
44866: LIST
44867: LIST
44868: PUSH
44869: LD_INT 2
44871: PUSH
44872: LD_INT 0
44874: PUSH
44875: EMPTY
44876: LIST
44877: LIST
44878: PUSH
44879: LD_INT 2
44881: PUSH
44882: LD_INT 1
44884: PUSH
44885: EMPTY
44886: LIST
44887: LIST
44888: PUSH
44889: LD_INT 1
44891: PUSH
44892: LD_INT 2
44894: PUSH
44895: EMPTY
44896: LIST
44897: LIST
44898: PUSH
44899: LD_INT 0
44901: PUSH
44902: LD_INT 2
44904: PUSH
44905: EMPTY
44906: LIST
44907: LIST
44908: PUSH
44909: LD_INT 1
44911: NEG
44912: PUSH
44913: LD_INT 1
44915: PUSH
44916: EMPTY
44917: LIST
44918: LIST
44919: PUSH
44920: LD_INT 2
44922: NEG
44923: PUSH
44924: LD_INT 0
44926: PUSH
44927: EMPTY
44928: LIST
44929: LIST
44930: PUSH
44931: LD_INT 2
44933: NEG
44934: PUSH
44935: LD_INT 1
44937: NEG
44938: PUSH
44939: EMPTY
44940: LIST
44941: LIST
44942: PUSH
44943: LD_INT 2
44945: NEG
44946: PUSH
44947: LD_INT 2
44949: NEG
44950: PUSH
44951: EMPTY
44952: LIST
44953: LIST
44954: PUSH
44955: LD_INT 2
44957: NEG
44958: PUSH
44959: LD_INT 3
44961: NEG
44962: PUSH
44963: EMPTY
44964: LIST
44965: LIST
44966: PUSH
44967: LD_INT 2
44969: PUSH
44970: LD_INT 1
44972: NEG
44973: PUSH
44974: EMPTY
44975: LIST
44976: LIST
44977: PUSH
44978: LD_INT 3
44980: PUSH
44981: LD_INT 1
44983: PUSH
44984: EMPTY
44985: LIST
44986: LIST
44987: PUSH
44988: LD_INT 1
44990: PUSH
44991: LD_INT 3
44993: PUSH
44994: EMPTY
44995: LIST
44996: LIST
44997: PUSH
44998: LD_INT 1
45000: NEG
45001: PUSH
45002: LD_INT 2
45004: PUSH
45005: EMPTY
45006: LIST
45007: LIST
45008: PUSH
45009: LD_INT 3
45011: NEG
45012: PUSH
45013: LD_INT 2
45015: NEG
45016: PUSH
45017: EMPTY
45018: LIST
45019: LIST
45020: PUSH
45021: EMPTY
45022: LIST
45023: LIST
45024: LIST
45025: LIST
45026: LIST
45027: LIST
45028: LIST
45029: LIST
45030: LIST
45031: LIST
45032: LIST
45033: LIST
45034: LIST
45035: LIST
45036: LIST
45037: LIST
45038: LIST
45039: LIST
45040: LIST
45041: LIST
45042: LIST
45043: LIST
45044: LIST
45045: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45046: LD_ADDR_VAR 0 34
45050: PUSH
45051: LD_INT 0
45053: PUSH
45054: LD_INT 0
45056: PUSH
45057: EMPTY
45058: LIST
45059: LIST
45060: PUSH
45061: LD_INT 0
45063: PUSH
45064: LD_INT 1
45066: NEG
45067: PUSH
45068: EMPTY
45069: LIST
45070: LIST
45071: PUSH
45072: LD_INT 1
45074: PUSH
45075: LD_INT 0
45077: PUSH
45078: EMPTY
45079: LIST
45080: LIST
45081: PUSH
45082: LD_INT 1
45084: PUSH
45085: LD_INT 1
45087: PUSH
45088: EMPTY
45089: LIST
45090: LIST
45091: PUSH
45092: LD_INT 0
45094: PUSH
45095: LD_INT 1
45097: PUSH
45098: EMPTY
45099: LIST
45100: LIST
45101: PUSH
45102: LD_INT 1
45104: NEG
45105: PUSH
45106: LD_INT 0
45108: PUSH
45109: EMPTY
45110: LIST
45111: LIST
45112: PUSH
45113: LD_INT 1
45115: NEG
45116: PUSH
45117: LD_INT 1
45119: NEG
45120: PUSH
45121: EMPTY
45122: LIST
45123: LIST
45124: PUSH
45125: LD_INT 1
45127: NEG
45128: PUSH
45129: LD_INT 2
45131: NEG
45132: PUSH
45133: EMPTY
45134: LIST
45135: LIST
45136: PUSH
45137: LD_INT 0
45139: PUSH
45140: LD_INT 2
45142: NEG
45143: PUSH
45144: EMPTY
45145: LIST
45146: LIST
45147: PUSH
45148: LD_INT 1
45150: PUSH
45151: LD_INT 1
45153: NEG
45154: PUSH
45155: EMPTY
45156: LIST
45157: LIST
45158: PUSH
45159: LD_INT 2
45161: PUSH
45162: LD_INT 1
45164: PUSH
45165: EMPTY
45166: LIST
45167: LIST
45168: PUSH
45169: LD_INT 2
45171: PUSH
45172: LD_INT 2
45174: PUSH
45175: EMPTY
45176: LIST
45177: LIST
45178: PUSH
45179: LD_INT 1
45181: PUSH
45182: LD_INT 2
45184: PUSH
45185: EMPTY
45186: LIST
45187: LIST
45188: PUSH
45189: LD_INT 1
45191: NEG
45192: PUSH
45193: LD_INT 1
45195: PUSH
45196: EMPTY
45197: LIST
45198: LIST
45199: PUSH
45200: LD_INT 2
45202: NEG
45203: PUSH
45204: LD_INT 0
45206: PUSH
45207: EMPTY
45208: LIST
45209: LIST
45210: PUSH
45211: LD_INT 2
45213: NEG
45214: PUSH
45215: LD_INT 1
45217: NEG
45218: PUSH
45219: EMPTY
45220: LIST
45221: LIST
45222: PUSH
45223: LD_INT 2
45225: NEG
45226: PUSH
45227: LD_INT 2
45229: NEG
45230: PUSH
45231: EMPTY
45232: LIST
45233: LIST
45234: PUSH
45235: LD_INT 1
45237: NEG
45238: PUSH
45239: LD_INT 3
45241: NEG
45242: PUSH
45243: EMPTY
45244: LIST
45245: LIST
45246: PUSH
45247: LD_INT 1
45249: PUSH
45250: LD_INT 2
45252: NEG
45253: PUSH
45254: EMPTY
45255: LIST
45256: LIST
45257: PUSH
45258: LD_INT 3
45260: PUSH
45261: LD_INT 2
45263: PUSH
45264: EMPTY
45265: LIST
45266: LIST
45267: PUSH
45268: LD_INT 2
45270: PUSH
45271: LD_INT 3
45273: PUSH
45274: EMPTY
45275: LIST
45276: LIST
45277: PUSH
45278: LD_INT 2
45280: NEG
45281: PUSH
45282: LD_INT 1
45284: PUSH
45285: EMPTY
45286: LIST
45287: LIST
45288: PUSH
45289: LD_INT 3
45291: NEG
45292: PUSH
45293: LD_INT 1
45295: NEG
45296: PUSH
45297: EMPTY
45298: LIST
45299: LIST
45300: PUSH
45301: EMPTY
45302: LIST
45303: LIST
45304: LIST
45305: LIST
45306: LIST
45307: LIST
45308: LIST
45309: LIST
45310: LIST
45311: LIST
45312: LIST
45313: LIST
45314: LIST
45315: LIST
45316: LIST
45317: LIST
45318: LIST
45319: LIST
45320: LIST
45321: LIST
45322: LIST
45323: LIST
45324: LIST
45325: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
45326: LD_ADDR_VAR 0 35
45330: PUSH
45331: LD_INT 0
45333: PUSH
45334: LD_INT 0
45336: PUSH
45337: EMPTY
45338: LIST
45339: LIST
45340: PUSH
45341: LD_INT 0
45343: PUSH
45344: LD_INT 1
45346: NEG
45347: PUSH
45348: EMPTY
45349: LIST
45350: LIST
45351: PUSH
45352: LD_INT 1
45354: PUSH
45355: LD_INT 0
45357: PUSH
45358: EMPTY
45359: LIST
45360: LIST
45361: PUSH
45362: LD_INT 1
45364: PUSH
45365: LD_INT 1
45367: PUSH
45368: EMPTY
45369: LIST
45370: LIST
45371: PUSH
45372: LD_INT 0
45374: PUSH
45375: LD_INT 1
45377: PUSH
45378: EMPTY
45379: LIST
45380: LIST
45381: PUSH
45382: LD_INT 1
45384: NEG
45385: PUSH
45386: LD_INT 0
45388: PUSH
45389: EMPTY
45390: LIST
45391: LIST
45392: PUSH
45393: LD_INT 1
45395: NEG
45396: PUSH
45397: LD_INT 1
45399: NEG
45400: PUSH
45401: EMPTY
45402: LIST
45403: LIST
45404: PUSH
45405: LD_INT 2
45407: PUSH
45408: LD_INT 1
45410: PUSH
45411: EMPTY
45412: LIST
45413: LIST
45414: PUSH
45415: LD_INT 2
45417: NEG
45418: PUSH
45419: LD_INT 1
45421: NEG
45422: PUSH
45423: EMPTY
45424: LIST
45425: LIST
45426: PUSH
45427: EMPTY
45428: LIST
45429: LIST
45430: LIST
45431: LIST
45432: LIST
45433: LIST
45434: LIST
45435: LIST
45436: LIST
45437: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
45438: LD_ADDR_VAR 0 36
45442: PUSH
45443: LD_INT 0
45445: PUSH
45446: LD_INT 0
45448: PUSH
45449: EMPTY
45450: LIST
45451: LIST
45452: PUSH
45453: LD_INT 0
45455: PUSH
45456: LD_INT 1
45458: NEG
45459: PUSH
45460: EMPTY
45461: LIST
45462: LIST
45463: PUSH
45464: LD_INT 1
45466: PUSH
45467: LD_INT 0
45469: PUSH
45470: EMPTY
45471: LIST
45472: LIST
45473: PUSH
45474: LD_INT 1
45476: PUSH
45477: LD_INT 1
45479: PUSH
45480: EMPTY
45481: LIST
45482: LIST
45483: PUSH
45484: LD_INT 0
45486: PUSH
45487: LD_INT 1
45489: PUSH
45490: EMPTY
45491: LIST
45492: LIST
45493: PUSH
45494: LD_INT 1
45496: NEG
45497: PUSH
45498: LD_INT 0
45500: PUSH
45501: EMPTY
45502: LIST
45503: LIST
45504: PUSH
45505: LD_INT 1
45507: NEG
45508: PUSH
45509: LD_INT 1
45511: NEG
45512: PUSH
45513: EMPTY
45514: LIST
45515: LIST
45516: PUSH
45517: LD_INT 1
45519: NEG
45520: PUSH
45521: LD_INT 2
45523: NEG
45524: PUSH
45525: EMPTY
45526: LIST
45527: LIST
45528: PUSH
45529: LD_INT 1
45531: PUSH
45532: LD_INT 2
45534: PUSH
45535: EMPTY
45536: LIST
45537: LIST
45538: PUSH
45539: EMPTY
45540: LIST
45541: LIST
45542: LIST
45543: LIST
45544: LIST
45545: LIST
45546: LIST
45547: LIST
45548: LIST
45549: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
45550: LD_ADDR_VAR 0 37
45554: PUSH
45555: LD_INT 0
45557: PUSH
45558: LD_INT 0
45560: PUSH
45561: EMPTY
45562: LIST
45563: LIST
45564: PUSH
45565: LD_INT 0
45567: PUSH
45568: LD_INT 1
45570: NEG
45571: PUSH
45572: EMPTY
45573: LIST
45574: LIST
45575: PUSH
45576: LD_INT 1
45578: PUSH
45579: LD_INT 0
45581: PUSH
45582: EMPTY
45583: LIST
45584: LIST
45585: PUSH
45586: LD_INT 1
45588: PUSH
45589: LD_INT 1
45591: PUSH
45592: EMPTY
45593: LIST
45594: LIST
45595: PUSH
45596: LD_INT 0
45598: PUSH
45599: LD_INT 1
45601: PUSH
45602: EMPTY
45603: LIST
45604: LIST
45605: PUSH
45606: LD_INT 1
45608: NEG
45609: PUSH
45610: LD_INT 0
45612: PUSH
45613: EMPTY
45614: LIST
45615: LIST
45616: PUSH
45617: LD_INT 1
45619: NEG
45620: PUSH
45621: LD_INT 1
45623: NEG
45624: PUSH
45625: EMPTY
45626: LIST
45627: LIST
45628: PUSH
45629: LD_INT 1
45631: PUSH
45632: LD_INT 1
45634: NEG
45635: PUSH
45636: EMPTY
45637: LIST
45638: LIST
45639: PUSH
45640: LD_INT 1
45642: NEG
45643: PUSH
45644: LD_INT 1
45646: PUSH
45647: EMPTY
45648: LIST
45649: LIST
45650: PUSH
45651: EMPTY
45652: LIST
45653: LIST
45654: LIST
45655: LIST
45656: LIST
45657: LIST
45658: LIST
45659: LIST
45660: LIST
45661: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
45662: LD_ADDR_VAR 0 38
45666: PUSH
45667: LD_INT 0
45669: PUSH
45670: LD_INT 0
45672: PUSH
45673: EMPTY
45674: LIST
45675: LIST
45676: PUSH
45677: LD_INT 0
45679: PUSH
45680: LD_INT 1
45682: NEG
45683: PUSH
45684: EMPTY
45685: LIST
45686: LIST
45687: PUSH
45688: LD_INT 1
45690: PUSH
45691: LD_INT 0
45693: PUSH
45694: EMPTY
45695: LIST
45696: LIST
45697: PUSH
45698: LD_INT 1
45700: PUSH
45701: LD_INT 1
45703: PUSH
45704: EMPTY
45705: LIST
45706: LIST
45707: PUSH
45708: LD_INT 0
45710: PUSH
45711: LD_INT 1
45713: PUSH
45714: EMPTY
45715: LIST
45716: LIST
45717: PUSH
45718: LD_INT 1
45720: NEG
45721: PUSH
45722: LD_INT 0
45724: PUSH
45725: EMPTY
45726: LIST
45727: LIST
45728: PUSH
45729: LD_INT 1
45731: NEG
45732: PUSH
45733: LD_INT 1
45735: NEG
45736: PUSH
45737: EMPTY
45738: LIST
45739: LIST
45740: PUSH
45741: LD_INT 2
45743: PUSH
45744: LD_INT 1
45746: PUSH
45747: EMPTY
45748: LIST
45749: LIST
45750: PUSH
45751: LD_INT 2
45753: NEG
45754: PUSH
45755: LD_INT 1
45757: NEG
45758: PUSH
45759: EMPTY
45760: LIST
45761: LIST
45762: PUSH
45763: EMPTY
45764: LIST
45765: LIST
45766: LIST
45767: LIST
45768: LIST
45769: LIST
45770: LIST
45771: LIST
45772: LIST
45773: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
45774: LD_ADDR_VAR 0 39
45778: PUSH
45779: LD_INT 0
45781: PUSH
45782: LD_INT 0
45784: PUSH
45785: EMPTY
45786: LIST
45787: LIST
45788: PUSH
45789: LD_INT 0
45791: PUSH
45792: LD_INT 1
45794: NEG
45795: PUSH
45796: EMPTY
45797: LIST
45798: LIST
45799: PUSH
45800: LD_INT 1
45802: PUSH
45803: LD_INT 0
45805: PUSH
45806: EMPTY
45807: LIST
45808: LIST
45809: PUSH
45810: LD_INT 1
45812: PUSH
45813: LD_INT 1
45815: PUSH
45816: EMPTY
45817: LIST
45818: LIST
45819: PUSH
45820: LD_INT 0
45822: PUSH
45823: LD_INT 1
45825: PUSH
45826: EMPTY
45827: LIST
45828: LIST
45829: PUSH
45830: LD_INT 1
45832: NEG
45833: PUSH
45834: LD_INT 0
45836: PUSH
45837: EMPTY
45838: LIST
45839: LIST
45840: PUSH
45841: LD_INT 1
45843: NEG
45844: PUSH
45845: LD_INT 1
45847: NEG
45848: PUSH
45849: EMPTY
45850: LIST
45851: LIST
45852: PUSH
45853: LD_INT 1
45855: NEG
45856: PUSH
45857: LD_INT 2
45859: NEG
45860: PUSH
45861: EMPTY
45862: LIST
45863: LIST
45864: PUSH
45865: LD_INT 1
45867: PUSH
45868: LD_INT 2
45870: PUSH
45871: EMPTY
45872: LIST
45873: LIST
45874: PUSH
45875: EMPTY
45876: LIST
45877: LIST
45878: LIST
45879: LIST
45880: LIST
45881: LIST
45882: LIST
45883: LIST
45884: LIST
45885: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
45886: LD_ADDR_VAR 0 40
45890: PUSH
45891: LD_INT 0
45893: PUSH
45894: LD_INT 0
45896: PUSH
45897: EMPTY
45898: LIST
45899: LIST
45900: PUSH
45901: LD_INT 0
45903: PUSH
45904: LD_INT 1
45906: NEG
45907: PUSH
45908: EMPTY
45909: LIST
45910: LIST
45911: PUSH
45912: LD_INT 1
45914: PUSH
45915: LD_INT 0
45917: PUSH
45918: EMPTY
45919: LIST
45920: LIST
45921: PUSH
45922: LD_INT 1
45924: PUSH
45925: LD_INT 1
45927: PUSH
45928: EMPTY
45929: LIST
45930: LIST
45931: PUSH
45932: LD_INT 0
45934: PUSH
45935: LD_INT 1
45937: PUSH
45938: EMPTY
45939: LIST
45940: LIST
45941: PUSH
45942: LD_INT 1
45944: NEG
45945: PUSH
45946: LD_INT 0
45948: PUSH
45949: EMPTY
45950: LIST
45951: LIST
45952: PUSH
45953: LD_INT 1
45955: NEG
45956: PUSH
45957: LD_INT 1
45959: NEG
45960: PUSH
45961: EMPTY
45962: LIST
45963: LIST
45964: PUSH
45965: LD_INT 1
45967: PUSH
45968: LD_INT 1
45970: NEG
45971: PUSH
45972: EMPTY
45973: LIST
45974: LIST
45975: PUSH
45976: LD_INT 1
45978: NEG
45979: PUSH
45980: LD_INT 1
45982: PUSH
45983: EMPTY
45984: LIST
45985: LIST
45986: PUSH
45987: EMPTY
45988: LIST
45989: LIST
45990: LIST
45991: LIST
45992: LIST
45993: LIST
45994: LIST
45995: LIST
45996: LIST
45997: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45998: LD_ADDR_VAR 0 41
46002: PUSH
46003: LD_INT 0
46005: PUSH
46006: LD_INT 0
46008: PUSH
46009: EMPTY
46010: LIST
46011: LIST
46012: PUSH
46013: LD_INT 0
46015: PUSH
46016: LD_INT 1
46018: NEG
46019: PUSH
46020: EMPTY
46021: LIST
46022: LIST
46023: PUSH
46024: LD_INT 1
46026: PUSH
46027: LD_INT 0
46029: PUSH
46030: EMPTY
46031: LIST
46032: LIST
46033: PUSH
46034: LD_INT 1
46036: PUSH
46037: LD_INT 1
46039: PUSH
46040: EMPTY
46041: LIST
46042: LIST
46043: PUSH
46044: LD_INT 0
46046: PUSH
46047: LD_INT 1
46049: PUSH
46050: EMPTY
46051: LIST
46052: LIST
46053: PUSH
46054: LD_INT 1
46056: NEG
46057: PUSH
46058: LD_INT 0
46060: PUSH
46061: EMPTY
46062: LIST
46063: LIST
46064: PUSH
46065: LD_INT 1
46067: NEG
46068: PUSH
46069: LD_INT 1
46071: NEG
46072: PUSH
46073: EMPTY
46074: LIST
46075: LIST
46076: PUSH
46077: LD_INT 1
46079: NEG
46080: PUSH
46081: LD_INT 2
46083: NEG
46084: PUSH
46085: EMPTY
46086: LIST
46087: LIST
46088: PUSH
46089: LD_INT 1
46091: PUSH
46092: LD_INT 1
46094: NEG
46095: PUSH
46096: EMPTY
46097: LIST
46098: LIST
46099: PUSH
46100: LD_INT 2
46102: PUSH
46103: LD_INT 0
46105: PUSH
46106: EMPTY
46107: LIST
46108: LIST
46109: PUSH
46110: LD_INT 2
46112: PUSH
46113: LD_INT 1
46115: PUSH
46116: EMPTY
46117: LIST
46118: LIST
46119: PUSH
46120: LD_INT 2
46122: PUSH
46123: LD_INT 2
46125: PUSH
46126: EMPTY
46127: LIST
46128: LIST
46129: PUSH
46130: LD_INT 1
46132: PUSH
46133: LD_INT 2
46135: PUSH
46136: EMPTY
46137: LIST
46138: LIST
46139: PUSH
46140: LD_INT 1
46142: NEG
46143: PUSH
46144: LD_INT 1
46146: PUSH
46147: EMPTY
46148: LIST
46149: LIST
46150: PUSH
46151: LD_INT 2
46153: NEG
46154: PUSH
46155: LD_INT 0
46157: PUSH
46158: EMPTY
46159: LIST
46160: LIST
46161: PUSH
46162: LD_INT 2
46164: NEG
46165: PUSH
46166: LD_INT 1
46168: NEG
46169: PUSH
46170: EMPTY
46171: LIST
46172: LIST
46173: PUSH
46174: LD_INT 2
46176: NEG
46177: PUSH
46178: LD_INT 2
46180: NEG
46181: PUSH
46182: EMPTY
46183: LIST
46184: LIST
46185: PUSH
46186: LD_INT 2
46188: NEG
46189: PUSH
46190: LD_INT 3
46192: NEG
46193: PUSH
46194: EMPTY
46195: LIST
46196: LIST
46197: PUSH
46198: LD_INT 2
46200: PUSH
46201: LD_INT 1
46203: NEG
46204: PUSH
46205: EMPTY
46206: LIST
46207: LIST
46208: PUSH
46209: LD_INT 3
46211: PUSH
46212: LD_INT 0
46214: PUSH
46215: EMPTY
46216: LIST
46217: LIST
46218: PUSH
46219: LD_INT 3
46221: PUSH
46222: LD_INT 1
46224: PUSH
46225: EMPTY
46226: LIST
46227: LIST
46228: PUSH
46229: LD_INT 3
46231: PUSH
46232: LD_INT 2
46234: PUSH
46235: EMPTY
46236: LIST
46237: LIST
46238: PUSH
46239: LD_INT 3
46241: PUSH
46242: LD_INT 3
46244: PUSH
46245: EMPTY
46246: LIST
46247: LIST
46248: PUSH
46249: LD_INT 2
46251: PUSH
46252: LD_INT 3
46254: PUSH
46255: EMPTY
46256: LIST
46257: LIST
46258: PUSH
46259: LD_INT 2
46261: NEG
46262: PUSH
46263: LD_INT 1
46265: PUSH
46266: EMPTY
46267: LIST
46268: LIST
46269: PUSH
46270: LD_INT 3
46272: NEG
46273: PUSH
46274: LD_INT 0
46276: PUSH
46277: EMPTY
46278: LIST
46279: LIST
46280: PUSH
46281: LD_INT 3
46283: NEG
46284: PUSH
46285: LD_INT 1
46287: NEG
46288: PUSH
46289: EMPTY
46290: LIST
46291: LIST
46292: PUSH
46293: LD_INT 3
46295: NEG
46296: PUSH
46297: LD_INT 2
46299: NEG
46300: PUSH
46301: EMPTY
46302: LIST
46303: LIST
46304: PUSH
46305: LD_INT 3
46307: NEG
46308: PUSH
46309: LD_INT 3
46311: NEG
46312: PUSH
46313: EMPTY
46314: LIST
46315: LIST
46316: PUSH
46317: EMPTY
46318: LIST
46319: LIST
46320: LIST
46321: LIST
46322: LIST
46323: LIST
46324: LIST
46325: LIST
46326: LIST
46327: LIST
46328: LIST
46329: LIST
46330: LIST
46331: LIST
46332: LIST
46333: LIST
46334: LIST
46335: LIST
46336: LIST
46337: LIST
46338: LIST
46339: LIST
46340: LIST
46341: LIST
46342: LIST
46343: LIST
46344: LIST
46345: LIST
46346: LIST
46347: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46348: LD_ADDR_VAR 0 42
46352: PUSH
46353: LD_INT 0
46355: PUSH
46356: LD_INT 0
46358: PUSH
46359: EMPTY
46360: LIST
46361: LIST
46362: PUSH
46363: LD_INT 0
46365: PUSH
46366: LD_INT 1
46368: NEG
46369: PUSH
46370: EMPTY
46371: LIST
46372: LIST
46373: PUSH
46374: LD_INT 1
46376: PUSH
46377: LD_INT 0
46379: PUSH
46380: EMPTY
46381: LIST
46382: LIST
46383: PUSH
46384: LD_INT 1
46386: PUSH
46387: LD_INT 1
46389: PUSH
46390: EMPTY
46391: LIST
46392: LIST
46393: PUSH
46394: LD_INT 0
46396: PUSH
46397: LD_INT 1
46399: PUSH
46400: EMPTY
46401: LIST
46402: LIST
46403: PUSH
46404: LD_INT 1
46406: NEG
46407: PUSH
46408: LD_INT 0
46410: PUSH
46411: EMPTY
46412: LIST
46413: LIST
46414: PUSH
46415: LD_INT 1
46417: NEG
46418: PUSH
46419: LD_INT 1
46421: NEG
46422: PUSH
46423: EMPTY
46424: LIST
46425: LIST
46426: PUSH
46427: LD_INT 1
46429: NEG
46430: PUSH
46431: LD_INT 2
46433: NEG
46434: PUSH
46435: EMPTY
46436: LIST
46437: LIST
46438: PUSH
46439: LD_INT 0
46441: PUSH
46442: LD_INT 2
46444: NEG
46445: PUSH
46446: EMPTY
46447: LIST
46448: LIST
46449: PUSH
46450: LD_INT 1
46452: PUSH
46453: LD_INT 1
46455: NEG
46456: PUSH
46457: EMPTY
46458: LIST
46459: LIST
46460: PUSH
46461: LD_INT 2
46463: PUSH
46464: LD_INT 1
46466: PUSH
46467: EMPTY
46468: LIST
46469: LIST
46470: PUSH
46471: LD_INT 2
46473: PUSH
46474: LD_INT 2
46476: PUSH
46477: EMPTY
46478: LIST
46479: LIST
46480: PUSH
46481: LD_INT 1
46483: PUSH
46484: LD_INT 2
46486: PUSH
46487: EMPTY
46488: LIST
46489: LIST
46490: PUSH
46491: LD_INT 0
46493: PUSH
46494: LD_INT 2
46496: PUSH
46497: EMPTY
46498: LIST
46499: LIST
46500: PUSH
46501: LD_INT 1
46503: NEG
46504: PUSH
46505: LD_INT 1
46507: PUSH
46508: EMPTY
46509: LIST
46510: LIST
46511: PUSH
46512: LD_INT 2
46514: NEG
46515: PUSH
46516: LD_INT 1
46518: NEG
46519: PUSH
46520: EMPTY
46521: LIST
46522: LIST
46523: PUSH
46524: LD_INT 2
46526: NEG
46527: PUSH
46528: LD_INT 2
46530: NEG
46531: PUSH
46532: EMPTY
46533: LIST
46534: LIST
46535: PUSH
46536: LD_INT 2
46538: NEG
46539: PUSH
46540: LD_INT 3
46542: NEG
46543: PUSH
46544: EMPTY
46545: LIST
46546: LIST
46547: PUSH
46548: LD_INT 1
46550: NEG
46551: PUSH
46552: LD_INT 3
46554: NEG
46555: PUSH
46556: EMPTY
46557: LIST
46558: LIST
46559: PUSH
46560: LD_INT 0
46562: PUSH
46563: LD_INT 3
46565: NEG
46566: PUSH
46567: EMPTY
46568: LIST
46569: LIST
46570: PUSH
46571: LD_INT 1
46573: PUSH
46574: LD_INT 2
46576: NEG
46577: PUSH
46578: EMPTY
46579: LIST
46580: LIST
46581: PUSH
46582: LD_INT 3
46584: PUSH
46585: LD_INT 2
46587: PUSH
46588: EMPTY
46589: LIST
46590: LIST
46591: PUSH
46592: LD_INT 3
46594: PUSH
46595: LD_INT 3
46597: PUSH
46598: EMPTY
46599: LIST
46600: LIST
46601: PUSH
46602: LD_INT 2
46604: PUSH
46605: LD_INT 3
46607: PUSH
46608: EMPTY
46609: LIST
46610: LIST
46611: PUSH
46612: LD_INT 1
46614: PUSH
46615: LD_INT 3
46617: PUSH
46618: EMPTY
46619: LIST
46620: LIST
46621: PUSH
46622: LD_INT 0
46624: PUSH
46625: LD_INT 3
46627: PUSH
46628: EMPTY
46629: LIST
46630: LIST
46631: PUSH
46632: LD_INT 1
46634: NEG
46635: PUSH
46636: LD_INT 2
46638: PUSH
46639: EMPTY
46640: LIST
46641: LIST
46642: PUSH
46643: LD_INT 3
46645: NEG
46646: PUSH
46647: LD_INT 2
46649: NEG
46650: PUSH
46651: EMPTY
46652: LIST
46653: LIST
46654: PUSH
46655: LD_INT 3
46657: NEG
46658: PUSH
46659: LD_INT 3
46661: NEG
46662: PUSH
46663: EMPTY
46664: LIST
46665: LIST
46666: PUSH
46667: EMPTY
46668: LIST
46669: LIST
46670: LIST
46671: LIST
46672: LIST
46673: LIST
46674: LIST
46675: LIST
46676: LIST
46677: LIST
46678: LIST
46679: LIST
46680: LIST
46681: LIST
46682: LIST
46683: LIST
46684: LIST
46685: LIST
46686: LIST
46687: LIST
46688: LIST
46689: LIST
46690: LIST
46691: LIST
46692: LIST
46693: LIST
46694: LIST
46695: LIST
46696: LIST
46697: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46698: LD_ADDR_VAR 0 43
46702: PUSH
46703: LD_INT 0
46705: PUSH
46706: LD_INT 0
46708: PUSH
46709: EMPTY
46710: LIST
46711: LIST
46712: PUSH
46713: LD_INT 0
46715: PUSH
46716: LD_INT 1
46718: NEG
46719: PUSH
46720: EMPTY
46721: LIST
46722: LIST
46723: PUSH
46724: LD_INT 1
46726: PUSH
46727: LD_INT 0
46729: PUSH
46730: EMPTY
46731: LIST
46732: LIST
46733: PUSH
46734: LD_INT 1
46736: PUSH
46737: LD_INT 1
46739: PUSH
46740: EMPTY
46741: LIST
46742: LIST
46743: PUSH
46744: LD_INT 0
46746: PUSH
46747: LD_INT 1
46749: PUSH
46750: EMPTY
46751: LIST
46752: LIST
46753: PUSH
46754: LD_INT 1
46756: NEG
46757: PUSH
46758: LD_INT 0
46760: PUSH
46761: EMPTY
46762: LIST
46763: LIST
46764: PUSH
46765: LD_INT 1
46767: NEG
46768: PUSH
46769: LD_INT 1
46771: NEG
46772: PUSH
46773: EMPTY
46774: LIST
46775: LIST
46776: PUSH
46777: LD_INT 1
46779: NEG
46780: PUSH
46781: LD_INT 2
46783: NEG
46784: PUSH
46785: EMPTY
46786: LIST
46787: LIST
46788: PUSH
46789: LD_INT 0
46791: PUSH
46792: LD_INT 2
46794: NEG
46795: PUSH
46796: EMPTY
46797: LIST
46798: LIST
46799: PUSH
46800: LD_INT 1
46802: PUSH
46803: LD_INT 1
46805: NEG
46806: PUSH
46807: EMPTY
46808: LIST
46809: LIST
46810: PUSH
46811: LD_INT 2
46813: PUSH
46814: LD_INT 0
46816: PUSH
46817: EMPTY
46818: LIST
46819: LIST
46820: PUSH
46821: LD_INT 2
46823: PUSH
46824: LD_INT 1
46826: PUSH
46827: EMPTY
46828: LIST
46829: LIST
46830: PUSH
46831: LD_INT 1
46833: PUSH
46834: LD_INT 2
46836: PUSH
46837: EMPTY
46838: LIST
46839: LIST
46840: PUSH
46841: LD_INT 0
46843: PUSH
46844: LD_INT 2
46846: PUSH
46847: EMPTY
46848: LIST
46849: LIST
46850: PUSH
46851: LD_INT 1
46853: NEG
46854: PUSH
46855: LD_INT 1
46857: PUSH
46858: EMPTY
46859: LIST
46860: LIST
46861: PUSH
46862: LD_INT 2
46864: NEG
46865: PUSH
46866: LD_INT 0
46868: PUSH
46869: EMPTY
46870: LIST
46871: LIST
46872: PUSH
46873: LD_INT 2
46875: NEG
46876: PUSH
46877: LD_INT 1
46879: NEG
46880: PUSH
46881: EMPTY
46882: LIST
46883: LIST
46884: PUSH
46885: LD_INT 1
46887: NEG
46888: PUSH
46889: LD_INT 3
46891: NEG
46892: PUSH
46893: EMPTY
46894: LIST
46895: LIST
46896: PUSH
46897: LD_INT 0
46899: PUSH
46900: LD_INT 3
46902: NEG
46903: PUSH
46904: EMPTY
46905: LIST
46906: LIST
46907: PUSH
46908: LD_INT 1
46910: PUSH
46911: LD_INT 2
46913: NEG
46914: PUSH
46915: EMPTY
46916: LIST
46917: LIST
46918: PUSH
46919: LD_INT 2
46921: PUSH
46922: LD_INT 1
46924: NEG
46925: PUSH
46926: EMPTY
46927: LIST
46928: LIST
46929: PUSH
46930: LD_INT 3
46932: PUSH
46933: LD_INT 0
46935: PUSH
46936: EMPTY
46937: LIST
46938: LIST
46939: PUSH
46940: LD_INT 3
46942: PUSH
46943: LD_INT 1
46945: PUSH
46946: EMPTY
46947: LIST
46948: LIST
46949: PUSH
46950: LD_INT 1
46952: PUSH
46953: LD_INT 3
46955: PUSH
46956: EMPTY
46957: LIST
46958: LIST
46959: PUSH
46960: LD_INT 0
46962: PUSH
46963: LD_INT 3
46965: PUSH
46966: EMPTY
46967: LIST
46968: LIST
46969: PUSH
46970: LD_INT 1
46972: NEG
46973: PUSH
46974: LD_INT 2
46976: PUSH
46977: EMPTY
46978: LIST
46979: LIST
46980: PUSH
46981: LD_INT 2
46983: NEG
46984: PUSH
46985: LD_INT 1
46987: PUSH
46988: EMPTY
46989: LIST
46990: LIST
46991: PUSH
46992: LD_INT 3
46994: NEG
46995: PUSH
46996: LD_INT 0
46998: PUSH
46999: EMPTY
47000: LIST
47001: LIST
47002: PUSH
47003: LD_INT 3
47005: NEG
47006: PUSH
47007: LD_INT 1
47009: NEG
47010: PUSH
47011: EMPTY
47012: LIST
47013: LIST
47014: PUSH
47015: EMPTY
47016: LIST
47017: LIST
47018: LIST
47019: LIST
47020: LIST
47021: LIST
47022: LIST
47023: LIST
47024: LIST
47025: LIST
47026: LIST
47027: LIST
47028: LIST
47029: LIST
47030: LIST
47031: LIST
47032: LIST
47033: LIST
47034: LIST
47035: LIST
47036: LIST
47037: LIST
47038: LIST
47039: LIST
47040: LIST
47041: LIST
47042: LIST
47043: LIST
47044: LIST
47045: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47046: LD_ADDR_VAR 0 44
47050: PUSH
47051: LD_INT 0
47053: PUSH
47054: LD_INT 0
47056: PUSH
47057: EMPTY
47058: LIST
47059: LIST
47060: PUSH
47061: LD_INT 0
47063: PUSH
47064: LD_INT 1
47066: NEG
47067: PUSH
47068: EMPTY
47069: LIST
47070: LIST
47071: PUSH
47072: LD_INT 1
47074: PUSH
47075: LD_INT 0
47077: PUSH
47078: EMPTY
47079: LIST
47080: LIST
47081: PUSH
47082: LD_INT 1
47084: PUSH
47085: LD_INT 1
47087: PUSH
47088: EMPTY
47089: LIST
47090: LIST
47091: PUSH
47092: LD_INT 0
47094: PUSH
47095: LD_INT 1
47097: PUSH
47098: EMPTY
47099: LIST
47100: LIST
47101: PUSH
47102: LD_INT 1
47104: NEG
47105: PUSH
47106: LD_INT 0
47108: PUSH
47109: EMPTY
47110: LIST
47111: LIST
47112: PUSH
47113: LD_INT 1
47115: NEG
47116: PUSH
47117: LD_INT 1
47119: NEG
47120: PUSH
47121: EMPTY
47122: LIST
47123: LIST
47124: PUSH
47125: LD_INT 1
47127: NEG
47128: PUSH
47129: LD_INT 2
47131: NEG
47132: PUSH
47133: EMPTY
47134: LIST
47135: LIST
47136: PUSH
47137: LD_INT 1
47139: PUSH
47140: LD_INT 1
47142: NEG
47143: PUSH
47144: EMPTY
47145: LIST
47146: LIST
47147: PUSH
47148: LD_INT 2
47150: PUSH
47151: LD_INT 0
47153: PUSH
47154: EMPTY
47155: LIST
47156: LIST
47157: PUSH
47158: LD_INT 2
47160: PUSH
47161: LD_INT 1
47163: PUSH
47164: EMPTY
47165: LIST
47166: LIST
47167: PUSH
47168: LD_INT 2
47170: PUSH
47171: LD_INT 2
47173: PUSH
47174: EMPTY
47175: LIST
47176: LIST
47177: PUSH
47178: LD_INT 1
47180: PUSH
47181: LD_INT 2
47183: PUSH
47184: EMPTY
47185: LIST
47186: LIST
47187: PUSH
47188: LD_INT 1
47190: NEG
47191: PUSH
47192: LD_INT 1
47194: PUSH
47195: EMPTY
47196: LIST
47197: LIST
47198: PUSH
47199: LD_INT 2
47201: NEG
47202: PUSH
47203: LD_INT 0
47205: PUSH
47206: EMPTY
47207: LIST
47208: LIST
47209: PUSH
47210: LD_INT 2
47212: NEG
47213: PUSH
47214: LD_INT 1
47216: NEG
47217: PUSH
47218: EMPTY
47219: LIST
47220: LIST
47221: PUSH
47222: LD_INT 2
47224: NEG
47225: PUSH
47226: LD_INT 2
47228: NEG
47229: PUSH
47230: EMPTY
47231: LIST
47232: LIST
47233: PUSH
47234: LD_INT 2
47236: NEG
47237: PUSH
47238: LD_INT 3
47240: NEG
47241: PUSH
47242: EMPTY
47243: LIST
47244: LIST
47245: PUSH
47246: LD_INT 2
47248: PUSH
47249: LD_INT 1
47251: NEG
47252: PUSH
47253: EMPTY
47254: LIST
47255: LIST
47256: PUSH
47257: LD_INT 3
47259: PUSH
47260: LD_INT 0
47262: PUSH
47263: EMPTY
47264: LIST
47265: LIST
47266: PUSH
47267: LD_INT 3
47269: PUSH
47270: LD_INT 1
47272: PUSH
47273: EMPTY
47274: LIST
47275: LIST
47276: PUSH
47277: LD_INT 3
47279: PUSH
47280: LD_INT 2
47282: PUSH
47283: EMPTY
47284: LIST
47285: LIST
47286: PUSH
47287: LD_INT 3
47289: PUSH
47290: LD_INT 3
47292: PUSH
47293: EMPTY
47294: LIST
47295: LIST
47296: PUSH
47297: LD_INT 2
47299: PUSH
47300: LD_INT 3
47302: PUSH
47303: EMPTY
47304: LIST
47305: LIST
47306: PUSH
47307: LD_INT 2
47309: NEG
47310: PUSH
47311: LD_INT 1
47313: PUSH
47314: EMPTY
47315: LIST
47316: LIST
47317: PUSH
47318: LD_INT 3
47320: NEG
47321: PUSH
47322: LD_INT 0
47324: PUSH
47325: EMPTY
47326: LIST
47327: LIST
47328: PUSH
47329: LD_INT 3
47331: NEG
47332: PUSH
47333: LD_INT 1
47335: NEG
47336: PUSH
47337: EMPTY
47338: LIST
47339: LIST
47340: PUSH
47341: LD_INT 3
47343: NEG
47344: PUSH
47345: LD_INT 2
47347: NEG
47348: PUSH
47349: EMPTY
47350: LIST
47351: LIST
47352: PUSH
47353: LD_INT 3
47355: NEG
47356: PUSH
47357: LD_INT 3
47359: NEG
47360: PUSH
47361: EMPTY
47362: LIST
47363: LIST
47364: PUSH
47365: EMPTY
47366: LIST
47367: LIST
47368: LIST
47369: LIST
47370: LIST
47371: LIST
47372: LIST
47373: LIST
47374: LIST
47375: LIST
47376: LIST
47377: LIST
47378: LIST
47379: LIST
47380: LIST
47381: LIST
47382: LIST
47383: LIST
47384: LIST
47385: LIST
47386: LIST
47387: LIST
47388: LIST
47389: LIST
47390: LIST
47391: LIST
47392: LIST
47393: LIST
47394: LIST
47395: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47396: LD_ADDR_VAR 0 45
47400: PUSH
47401: LD_INT 0
47403: PUSH
47404: LD_INT 0
47406: PUSH
47407: EMPTY
47408: LIST
47409: LIST
47410: PUSH
47411: LD_INT 0
47413: PUSH
47414: LD_INT 1
47416: NEG
47417: PUSH
47418: EMPTY
47419: LIST
47420: LIST
47421: PUSH
47422: LD_INT 1
47424: PUSH
47425: LD_INT 0
47427: PUSH
47428: EMPTY
47429: LIST
47430: LIST
47431: PUSH
47432: LD_INT 1
47434: PUSH
47435: LD_INT 1
47437: PUSH
47438: EMPTY
47439: LIST
47440: LIST
47441: PUSH
47442: LD_INT 0
47444: PUSH
47445: LD_INT 1
47447: PUSH
47448: EMPTY
47449: LIST
47450: LIST
47451: PUSH
47452: LD_INT 1
47454: NEG
47455: PUSH
47456: LD_INT 0
47458: PUSH
47459: EMPTY
47460: LIST
47461: LIST
47462: PUSH
47463: LD_INT 1
47465: NEG
47466: PUSH
47467: LD_INT 1
47469: NEG
47470: PUSH
47471: EMPTY
47472: LIST
47473: LIST
47474: PUSH
47475: LD_INT 1
47477: NEG
47478: PUSH
47479: LD_INT 2
47481: NEG
47482: PUSH
47483: EMPTY
47484: LIST
47485: LIST
47486: PUSH
47487: LD_INT 0
47489: PUSH
47490: LD_INT 2
47492: NEG
47493: PUSH
47494: EMPTY
47495: LIST
47496: LIST
47497: PUSH
47498: LD_INT 1
47500: PUSH
47501: LD_INT 1
47503: NEG
47504: PUSH
47505: EMPTY
47506: LIST
47507: LIST
47508: PUSH
47509: LD_INT 2
47511: PUSH
47512: LD_INT 1
47514: PUSH
47515: EMPTY
47516: LIST
47517: LIST
47518: PUSH
47519: LD_INT 2
47521: PUSH
47522: LD_INT 2
47524: PUSH
47525: EMPTY
47526: LIST
47527: LIST
47528: PUSH
47529: LD_INT 1
47531: PUSH
47532: LD_INT 2
47534: PUSH
47535: EMPTY
47536: LIST
47537: LIST
47538: PUSH
47539: LD_INT 0
47541: PUSH
47542: LD_INT 2
47544: PUSH
47545: EMPTY
47546: LIST
47547: LIST
47548: PUSH
47549: LD_INT 1
47551: NEG
47552: PUSH
47553: LD_INT 1
47555: PUSH
47556: EMPTY
47557: LIST
47558: LIST
47559: PUSH
47560: LD_INT 2
47562: NEG
47563: PUSH
47564: LD_INT 1
47566: NEG
47567: PUSH
47568: EMPTY
47569: LIST
47570: LIST
47571: PUSH
47572: LD_INT 2
47574: NEG
47575: PUSH
47576: LD_INT 2
47578: NEG
47579: PUSH
47580: EMPTY
47581: LIST
47582: LIST
47583: PUSH
47584: LD_INT 2
47586: NEG
47587: PUSH
47588: LD_INT 3
47590: NEG
47591: PUSH
47592: EMPTY
47593: LIST
47594: LIST
47595: PUSH
47596: LD_INT 1
47598: NEG
47599: PUSH
47600: LD_INT 3
47602: NEG
47603: PUSH
47604: EMPTY
47605: LIST
47606: LIST
47607: PUSH
47608: LD_INT 0
47610: PUSH
47611: LD_INT 3
47613: NEG
47614: PUSH
47615: EMPTY
47616: LIST
47617: LIST
47618: PUSH
47619: LD_INT 1
47621: PUSH
47622: LD_INT 2
47624: NEG
47625: PUSH
47626: EMPTY
47627: LIST
47628: LIST
47629: PUSH
47630: LD_INT 3
47632: PUSH
47633: LD_INT 2
47635: PUSH
47636: EMPTY
47637: LIST
47638: LIST
47639: PUSH
47640: LD_INT 3
47642: PUSH
47643: LD_INT 3
47645: PUSH
47646: EMPTY
47647: LIST
47648: LIST
47649: PUSH
47650: LD_INT 2
47652: PUSH
47653: LD_INT 3
47655: PUSH
47656: EMPTY
47657: LIST
47658: LIST
47659: PUSH
47660: LD_INT 1
47662: PUSH
47663: LD_INT 3
47665: PUSH
47666: EMPTY
47667: LIST
47668: LIST
47669: PUSH
47670: LD_INT 0
47672: PUSH
47673: LD_INT 3
47675: PUSH
47676: EMPTY
47677: LIST
47678: LIST
47679: PUSH
47680: LD_INT 1
47682: NEG
47683: PUSH
47684: LD_INT 2
47686: PUSH
47687: EMPTY
47688: LIST
47689: LIST
47690: PUSH
47691: LD_INT 3
47693: NEG
47694: PUSH
47695: LD_INT 2
47697: NEG
47698: PUSH
47699: EMPTY
47700: LIST
47701: LIST
47702: PUSH
47703: LD_INT 3
47705: NEG
47706: PUSH
47707: LD_INT 3
47709: NEG
47710: PUSH
47711: EMPTY
47712: LIST
47713: LIST
47714: PUSH
47715: EMPTY
47716: LIST
47717: LIST
47718: LIST
47719: LIST
47720: LIST
47721: LIST
47722: LIST
47723: LIST
47724: LIST
47725: LIST
47726: LIST
47727: LIST
47728: LIST
47729: LIST
47730: LIST
47731: LIST
47732: LIST
47733: LIST
47734: LIST
47735: LIST
47736: LIST
47737: LIST
47738: LIST
47739: LIST
47740: LIST
47741: LIST
47742: LIST
47743: LIST
47744: LIST
47745: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47746: LD_ADDR_VAR 0 46
47750: PUSH
47751: LD_INT 0
47753: PUSH
47754: LD_INT 0
47756: PUSH
47757: EMPTY
47758: LIST
47759: LIST
47760: PUSH
47761: LD_INT 0
47763: PUSH
47764: LD_INT 1
47766: NEG
47767: PUSH
47768: EMPTY
47769: LIST
47770: LIST
47771: PUSH
47772: LD_INT 1
47774: PUSH
47775: LD_INT 0
47777: PUSH
47778: EMPTY
47779: LIST
47780: LIST
47781: PUSH
47782: LD_INT 1
47784: PUSH
47785: LD_INT 1
47787: PUSH
47788: EMPTY
47789: LIST
47790: LIST
47791: PUSH
47792: LD_INT 0
47794: PUSH
47795: LD_INT 1
47797: PUSH
47798: EMPTY
47799: LIST
47800: LIST
47801: PUSH
47802: LD_INT 1
47804: NEG
47805: PUSH
47806: LD_INT 0
47808: PUSH
47809: EMPTY
47810: LIST
47811: LIST
47812: PUSH
47813: LD_INT 1
47815: NEG
47816: PUSH
47817: LD_INT 1
47819: NEG
47820: PUSH
47821: EMPTY
47822: LIST
47823: LIST
47824: PUSH
47825: LD_INT 1
47827: NEG
47828: PUSH
47829: LD_INT 2
47831: NEG
47832: PUSH
47833: EMPTY
47834: LIST
47835: LIST
47836: PUSH
47837: LD_INT 0
47839: PUSH
47840: LD_INT 2
47842: NEG
47843: PUSH
47844: EMPTY
47845: LIST
47846: LIST
47847: PUSH
47848: LD_INT 1
47850: PUSH
47851: LD_INT 1
47853: NEG
47854: PUSH
47855: EMPTY
47856: LIST
47857: LIST
47858: PUSH
47859: LD_INT 2
47861: PUSH
47862: LD_INT 0
47864: PUSH
47865: EMPTY
47866: LIST
47867: LIST
47868: PUSH
47869: LD_INT 2
47871: PUSH
47872: LD_INT 1
47874: PUSH
47875: EMPTY
47876: LIST
47877: LIST
47878: PUSH
47879: LD_INT 1
47881: PUSH
47882: LD_INT 2
47884: PUSH
47885: EMPTY
47886: LIST
47887: LIST
47888: PUSH
47889: LD_INT 0
47891: PUSH
47892: LD_INT 2
47894: PUSH
47895: EMPTY
47896: LIST
47897: LIST
47898: PUSH
47899: LD_INT 1
47901: NEG
47902: PUSH
47903: LD_INT 1
47905: PUSH
47906: EMPTY
47907: LIST
47908: LIST
47909: PUSH
47910: LD_INT 2
47912: NEG
47913: PUSH
47914: LD_INT 0
47916: PUSH
47917: EMPTY
47918: LIST
47919: LIST
47920: PUSH
47921: LD_INT 2
47923: NEG
47924: PUSH
47925: LD_INT 1
47927: NEG
47928: PUSH
47929: EMPTY
47930: LIST
47931: LIST
47932: PUSH
47933: LD_INT 1
47935: NEG
47936: PUSH
47937: LD_INT 3
47939: NEG
47940: PUSH
47941: EMPTY
47942: LIST
47943: LIST
47944: PUSH
47945: LD_INT 0
47947: PUSH
47948: LD_INT 3
47950: NEG
47951: PUSH
47952: EMPTY
47953: LIST
47954: LIST
47955: PUSH
47956: LD_INT 1
47958: PUSH
47959: LD_INT 2
47961: NEG
47962: PUSH
47963: EMPTY
47964: LIST
47965: LIST
47966: PUSH
47967: LD_INT 2
47969: PUSH
47970: LD_INT 1
47972: NEG
47973: PUSH
47974: EMPTY
47975: LIST
47976: LIST
47977: PUSH
47978: LD_INT 3
47980: PUSH
47981: LD_INT 0
47983: PUSH
47984: EMPTY
47985: LIST
47986: LIST
47987: PUSH
47988: LD_INT 3
47990: PUSH
47991: LD_INT 1
47993: PUSH
47994: EMPTY
47995: LIST
47996: LIST
47997: PUSH
47998: LD_INT 1
48000: PUSH
48001: LD_INT 3
48003: PUSH
48004: EMPTY
48005: LIST
48006: LIST
48007: PUSH
48008: LD_INT 0
48010: PUSH
48011: LD_INT 3
48013: PUSH
48014: EMPTY
48015: LIST
48016: LIST
48017: PUSH
48018: LD_INT 1
48020: NEG
48021: PUSH
48022: LD_INT 2
48024: PUSH
48025: EMPTY
48026: LIST
48027: LIST
48028: PUSH
48029: LD_INT 2
48031: NEG
48032: PUSH
48033: LD_INT 1
48035: PUSH
48036: EMPTY
48037: LIST
48038: LIST
48039: PUSH
48040: LD_INT 3
48042: NEG
48043: PUSH
48044: LD_INT 0
48046: PUSH
48047: EMPTY
48048: LIST
48049: LIST
48050: PUSH
48051: LD_INT 3
48053: NEG
48054: PUSH
48055: LD_INT 1
48057: NEG
48058: PUSH
48059: EMPTY
48060: LIST
48061: LIST
48062: PUSH
48063: EMPTY
48064: LIST
48065: LIST
48066: LIST
48067: LIST
48068: LIST
48069: LIST
48070: LIST
48071: LIST
48072: LIST
48073: LIST
48074: LIST
48075: LIST
48076: LIST
48077: LIST
48078: LIST
48079: LIST
48080: LIST
48081: LIST
48082: LIST
48083: LIST
48084: LIST
48085: LIST
48086: LIST
48087: LIST
48088: LIST
48089: LIST
48090: LIST
48091: LIST
48092: LIST
48093: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48094: LD_ADDR_VAR 0 47
48098: PUSH
48099: LD_INT 0
48101: PUSH
48102: LD_INT 0
48104: PUSH
48105: EMPTY
48106: LIST
48107: LIST
48108: PUSH
48109: LD_INT 0
48111: PUSH
48112: LD_INT 1
48114: NEG
48115: PUSH
48116: EMPTY
48117: LIST
48118: LIST
48119: PUSH
48120: LD_INT 1
48122: PUSH
48123: LD_INT 0
48125: PUSH
48126: EMPTY
48127: LIST
48128: LIST
48129: PUSH
48130: LD_INT 1
48132: PUSH
48133: LD_INT 1
48135: PUSH
48136: EMPTY
48137: LIST
48138: LIST
48139: PUSH
48140: LD_INT 0
48142: PUSH
48143: LD_INT 1
48145: PUSH
48146: EMPTY
48147: LIST
48148: LIST
48149: PUSH
48150: LD_INT 1
48152: NEG
48153: PUSH
48154: LD_INT 0
48156: PUSH
48157: EMPTY
48158: LIST
48159: LIST
48160: PUSH
48161: LD_INT 1
48163: NEG
48164: PUSH
48165: LD_INT 1
48167: NEG
48168: PUSH
48169: EMPTY
48170: LIST
48171: LIST
48172: PUSH
48173: LD_INT 1
48175: NEG
48176: PUSH
48177: LD_INT 2
48179: NEG
48180: PUSH
48181: EMPTY
48182: LIST
48183: LIST
48184: PUSH
48185: LD_INT 0
48187: PUSH
48188: LD_INT 2
48190: NEG
48191: PUSH
48192: EMPTY
48193: LIST
48194: LIST
48195: PUSH
48196: LD_INT 1
48198: PUSH
48199: LD_INT 1
48201: NEG
48202: PUSH
48203: EMPTY
48204: LIST
48205: LIST
48206: PUSH
48207: LD_INT 2
48209: NEG
48210: PUSH
48211: LD_INT 1
48213: NEG
48214: PUSH
48215: EMPTY
48216: LIST
48217: LIST
48218: PUSH
48219: LD_INT 2
48221: NEG
48222: PUSH
48223: LD_INT 2
48225: NEG
48226: PUSH
48227: EMPTY
48228: LIST
48229: LIST
48230: PUSH
48231: EMPTY
48232: LIST
48233: LIST
48234: LIST
48235: LIST
48236: LIST
48237: LIST
48238: LIST
48239: LIST
48240: LIST
48241: LIST
48242: LIST
48243: LIST
48244: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
48245: LD_ADDR_VAR 0 48
48249: PUSH
48250: LD_INT 0
48252: PUSH
48253: LD_INT 0
48255: PUSH
48256: EMPTY
48257: LIST
48258: LIST
48259: PUSH
48260: LD_INT 0
48262: PUSH
48263: LD_INT 1
48265: NEG
48266: PUSH
48267: EMPTY
48268: LIST
48269: LIST
48270: PUSH
48271: LD_INT 1
48273: PUSH
48274: LD_INT 0
48276: PUSH
48277: EMPTY
48278: LIST
48279: LIST
48280: PUSH
48281: LD_INT 1
48283: PUSH
48284: LD_INT 1
48286: PUSH
48287: EMPTY
48288: LIST
48289: LIST
48290: PUSH
48291: LD_INT 0
48293: PUSH
48294: LD_INT 1
48296: PUSH
48297: EMPTY
48298: LIST
48299: LIST
48300: PUSH
48301: LD_INT 1
48303: NEG
48304: PUSH
48305: LD_INT 0
48307: PUSH
48308: EMPTY
48309: LIST
48310: LIST
48311: PUSH
48312: LD_INT 1
48314: NEG
48315: PUSH
48316: LD_INT 1
48318: NEG
48319: PUSH
48320: EMPTY
48321: LIST
48322: LIST
48323: PUSH
48324: LD_INT 1
48326: NEG
48327: PUSH
48328: LD_INT 2
48330: NEG
48331: PUSH
48332: EMPTY
48333: LIST
48334: LIST
48335: PUSH
48336: LD_INT 0
48338: PUSH
48339: LD_INT 2
48341: NEG
48342: PUSH
48343: EMPTY
48344: LIST
48345: LIST
48346: PUSH
48347: LD_INT 1
48349: PUSH
48350: LD_INT 1
48352: NEG
48353: PUSH
48354: EMPTY
48355: LIST
48356: LIST
48357: PUSH
48358: LD_INT 2
48360: PUSH
48361: LD_INT 0
48363: PUSH
48364: EMPTY
48365: LIST
48366: LIST
48367: PUSH
48368: LD_INT 2
48370: PUSH
48371: LD_INT 1
48373: PUSH
48374: EMPTY
48375: LIST
48376: LIST
48377: PUSH
48378: EMPTY
48379: LIST
48380: LIST
48381: LIST
48382: LIST
48383: LIST
48384: LIST
48385: LIST
48386: LIST
48387: LIST
48388: LIST
48389: LIST
48390: LIST
48391: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
48392: LD_ADDR_VAR 0 49
48396: PUSH
48397: LD_INT 0
48399: PUSH
48400: LD_INT 0
48402: PUSH
48403: EMPTY
48404: LIST
48405: LIST
48406: PUSH
48407: LD_INT 0
48409: PUSH
48410: LD_INT 1
48412: NEG
48413: PUSH
48414: EMPTY
48415: LIST
48416: LIST
48417: PUSH
48418: LD_INT 1
48420: PUSH
48421: LD_INT 0
48423: PUSH
48424: EMPTY
48425: LIST
48426: LIST
48427: PUSH
48428: LD_INT 1
48430: PUSH
48431: LD_INT 1
48433: PUSH
48434: EMPTY
48435: LIST
48436: LIST
48437: PUSH
48438: LD_INT 0
48440: PUSH
48441: LD_INT 1
48443: PUSH
48444: EMPTY
48445: LIST
48446: LIST
48447: PUSH
48448: LD_INT 1
48450: NEG
48451: PUSH
48452: LD_INT 0
48454: PUSH
48455: EMPTY
48456: LIST
48457: LIST
48458: PUSH
48459: LD_INT 1
48461: NEG
48462: PUSH
48463: LD_INT 1
48465: NEG
48466: PUSH
48467: EMPTY
48468: LIST
48469: LIST
48470: PUSH
48471: LD_INT 1
48473: PUSH
48474: LD_INT 1
48476: NEG
48477: PUSH
48478: EMPTY
48479: LIST
48480: LIST
48481: PUSH
48482: LD_INT 2
48484: PUSH
48485: LD_INT 0
48487: PUSH
48488: EMPTY
48489: LIST
48490: LIST
48491: PUSH
48492: LD_INT 2
48494: PUSH
48495: LD_INT 1
48497: PUSH
48498: EMPTY
48499: LIST
48500: LIST
48501: PUSH
48502: LD_INT 2
48504: PUSH
48505: LD_INT 2
48507: PUSH
48508: EMPTY
48509: LIST
48510: LIST
48511: PUSH
48512: LD_INT 1
48514: PUSH
48515: LD_INT 2
48517: PUSH
48518: EMPTY
48519: LIST
48520: LIST
48521: PUSH
48522: EMPTY
48523: LIST
48524: LIST
48525: LIST
48526: LIST
48527: LIST
48528: LIST
48529: LIST
48530: LIST
48531: LIST
48532: LIST
48533: LIST
48534: LIST
48535: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
48536: LD_ADDR_VAR 0 50
48540: PUSH
48541: LD_INT 0
48543: PUSH
48544: LD_INT 0
48546: PUSH
48547: EMPTY
48548: LIST
48549: LIST
48550: PUSH
48551: LD_INT 0
48553: PUSH
48554: LD_INT 1
48556: NEG
48557: PUSH
48558: EMPTY
48559: LIST
48560: LIST
48561: PUSH
48562: LD_INT 1
48564: PUSH
48565: LD_INT 0
48567: PUSH
48568: EMPTY
48569: LIST
48570: LIST
48571: PUSH
48572: LD_INT 1
48574: PUSH
48575: LD_INT 1
48577: PUSH
48578: EMPTY
48579: LIST
48580: LIST
48581: PUSH
48582: LD_INT 0
48584: PUSH
48585: LD_INT 1
48587: PUSH
48588: EMPTY
48589: LIST
48590: LIST
48591: PUSH
48592: LD_INT 1
48594: NEG
48595: PUSH
48596: LD_INT 0
48598: PUSH
48599: EMPTY
48600: LIST
48601: LIST
48602: PUSH
48603: LD_INT 1
48605: NEG
48606: PUSH
48607: LD_INT 1
48609: NEG
48610: PUSH
48611: EMPTY
48612: LIST
48613: LIST
48614: PUSH
48615: LD_INT 2
48617: PUSH
48618: LD_INT 1
48620: PUSH
48621: EMPTY
48622: LIST
48623: LIST
48624: PUSH
48625: LD_INT 2
48627: PUSH
48628: LD_INT 2
48630: PUSH
48631: EMPTY
48632: LIST
48633: LIST
48634: PUSH
48635: LD_INT 1
48637: PUSH
48638: LD_INT 2
48640: PUSH
48641: EMPTY
48642: LIST
48643: LIST
48644: PUSH
48645: LD_INT 0
48647: PUSH
48648: LD_INT 2
48650: PUSH
48651: EMPTY
48652: LIST
48653: LIST
48654: PUSH
48655: LD_INT 1
48657: NEG
48658: PUSH
48659: LD_INT 1
48661: PUSH
48662: EMPTY
48663: LIST
48664: LIST
48665: PUSH
48666: EMPTY
48667: LIST
48668: LIST
48669: LIST
48670: LIST
48671: LIST
48672: LIST
48673: LIST
48674: LIST
48675: LIST
48676: LIST
48677: LIST
48678: LIST
48679: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
48680: LD_ADDR_VAR 0 51
48684: PUSH
48685: LD_INT 0
48687: PUSH
48688: LD_INT 0
48690: PUSH
48691: EMPTY
48692: LIST
48693: LIST
48694: PUSH
48695: LD_INT 0
48697: PUSH
48698: LD_INT 1
48700: NEG
48701: PUSH
48702: EMPTY
48703: LIST
48704: LIST
48705: PUSH
48706: LD_INT 1
48708: PUSH
48709: LD_INT 0
48711: PUSH
48712: EMPTY
48713: LIST
48714: LIST
48715: PUSH
48716: LD_INT 1
48718: PUSH
48719: LD_INT 1
48721: PUSH
48722: EMPTY
48723: LIST
48724: LIST
48725: PUSH
48726: LD_INT 0
48728: PUSH
48729: LD_INT 1
48731: PUSH
48732: EMPTY
48733: LIST
48734: LIST
48735: PUSH
48736: LD_INT 1
48738: NEG
48739: PUSH
48740: LD_INT 0
48742: PUSH
48743: EMPTY
48744: LIST
48745: LIST
48746: PUSH
48747: LD_INT 1
48749: NEG
48750: PUSH
48751: LD_INT 1
48753: NEG
48754: PUSH
48755: EMPTY
48756: LIST
48757: LIST
48758: PUSH
48759: LD_INT 1
48761: PUSH
48762: LD_INT 2
48764: PUSH
48765: EMPTY
48766: LIST
48767: LIST
48768: PUSH
48769: LD_INT 0
48771: PUSH
48772: LD_INT 2
48774: PUSH
48775: EMPTY
48776: LIST
48777: LIST
48778: PUSH
48779: LD_INT 1
48781: NEG
48782: PUSH
48783: LD_INT 1
48785: PUSH
48786: EMPTY
48787: LIST
48788: LIST
48789: PUSH
48790: LD_INT 2
48792: NEG
48793: PUSH
48794: LD_INT 0
48796: PUSH
48797: EMPTY
48798: LIST
48799: LIST
48800: PUSH
48801: LD_INT 2
48803: NEG
48804: PUSH
48805: LD_INT 1
48807: NEG
48808: PUSH
48809: EMPTY
48810: LIST
48811: LIST
48812: PUSH
48813: EMPTY
48814: LIST
48815: LIST
48816: LIST
48817: LIST
48818: LIST
48819: LIST
48820: LIST
48821: LIST
48822: LIST
48823: LIST
48824: LIST
48825: LIST
48826: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48827: LD_ADDR_VAR 0 52
48831: PUSH
48832: LD_INT 0
48834: PUSH
48835: LD_INT 0
48837: PUSH
48838: EMPTY
48839: LIST
48840: LIST
48841: PUSH
48842: LD_INT 0
48844: PUSH
48845: LD_INT 1
48847: NEG
48848: PUSH
48849: EMPTY
48850: LIST
48851: LIST
48852: PUSH
48853: LD_INT 1
48855: PUSH
48856: LD_INT 0
48858: PUSH
48859: EMPTY
48860: LIST
48861: LIST
48862: PUSH
48863: LD_INT 1
48865: PUSH
48866: LD_INT 1
48868: PUSH
48869: EMPTY
48870: LIST
48871: LIST
48872: PUSH
48873: LD_INT 0
48875: PUSH
48876: LD_INT 1
48878: PUSH
48879: EMPTY
48880: LIST
48881: LIST
48882: PUSH
48883: LD_INT 1
48885: NEG
48886: PUSH
48887: LD_INT 0
48889: PUSH
48890: EMPTY
48891: LIST
48892: LIST
48893: PUSH
48894: LD_INT 1
48896: NEG
48897: PUSH
48898: LD_INT 1
48900: NEG
48901: PUSH
48902: EMPTY
48903: LIST
48904: LIST
48905: PUSH
48906: LD_INT 1
48908: NEG
48909: PUSH
48910: LD_INT 2
48912: NEG
48913: PUSH
48914: EMPTY
48915: LIST
48916: LIST
48917: PUSH
48918: LD_INT 1
48920: NEG
48921: PUSH
48922: LD_INT 1
48924: PUSH
48925: EMPTY
48926: LIST
48927: LIST
48928: PUSH
48929: LD_INT 2
48931: NEG
48932: PUSH
48933: LD_INT 0
48935: PUSH
48936: EMPTY
48937: LIST
48938: LIST
48939: PUSH
48940: LD_INT 2
48942: NEG
48943: PUSH
48944: LD_INT 1
48946: NEG
48947: PUSH
48948: EMPTY
48949: LIST
48950: LIST
48951: PUSH
48952: LD_INT 2
48954: NEG
48955: PUSH
48956: LD_INT 2
48958: NEG
48959: PUSH
48960: EMPTY
48961: LIST
48962: LIST
48963: PUSH
48964: EMPTY
48965: LIST
48966: LIST
48967: LIST
48968: LIST
48969: LIST
48970: LIST
48971: LIST
48972: LIST
48973: LIST
48974: LIST
48975: LIST
48976: LIST
48977: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48978: LD_ADDR_VAR 0 53
48982: PUSH
48983: LD_INT 0
48985: PUSH
48986: LD_INT 0
48988: PUSH
48989: EMPTY
48990: LIST
48991: LIST
48992: PUSH
48993: LD_INT 0
48995: PUSH
48996: LD_INT 1
48998: NEG
48999: PUSH
49000: EMPTY
49001: LIST
49002: LIST
49003: PUSH
49004: LD_INT 1
49006: PUSH
49007: LD_INT 0
49009: PUSH
49010: EMPTY
49011: LIST
49012: LIST
49013: PUSH
49014: LD_INT 1
49016: PUSH
49017: LD_INT 1
49019: PUSH
49020: EMPTY
49021: LIST
49022: LIST
49023: PUSH
49024: LD_INT 0
49026: PUSH
49027: LD_INT 1
49029: PUSH
49030: EMPTY
49031: LIST
49032: LIST
49033: PUSH
49034: LD_INT 1
49036: NEG
49037: PUSH
49038: LD_INT 0
49040: PUSH
49041: EMPTY
49042: LIST
49043: LIST
49044: PUSH
49045: LD_INT 1
49047: NEG
49048: PUSH
49049: LD_INT 1
49051: NEG
49052: PUSH
49053: EMPTY
49054: LIST
49055: LIST
49056: PUSH
49057: LD_INT 1
49059: NEG
49060: PUSH
49061: LD_INT 2
49063: NEG
49064: PUSH
49065: EMPTY
49066: LIST
49067: LIST
49068: PUSH
49069: LD_INT 0
49071: PUSH
49072: LD_INT 2
49074: NEG
49075: PUSH
49076: EMPTY
49077: LIST
49078: LIST
49079: PUSH
49080: LD_INT 1
49082: PUSH
49083: LD_INT 1
49085: NEG
49086: PUSH
49087: EMPTY
49088: LIST
49089: LIST
49090: PUSH
49091: LD_INT 2
49093: PUSH
49094: LD_INT 0
49096: PUSH
49097: EMPTY
49098: LIST
49099: LIST
49100: PUSH
49101: LD_INT 2
49103: PUSH
49104: LD_INT 1
49106: PUSH
49107: EMPTY
49108: LIST
49109: LIST
49110: PUSH
49111: LD_INT 2
49113: PUSH
49114: LD_INT 2
49116: PUSH
49117: EMPTY
49118: LIST
49119: LIST
49120: PUSH
49121: LD_INT 1
49123: PUSH
49124: LD_INT 2
49126: PUSH
49127: EMPTY
49128: LIST
49129: LIST
49130: PUSH
49131: LD_INT 0
49133: PUSH
49134: LD_INT 2
49136: PUSH
49137: EMPTY
49138: LIST
49139: LIST
49140: PUSH
49141: LD_INT 1
49143: NEG
49144: PUSH
49145: LD_INT 1
49147: PUSH
49148: EMPTY
49149: LIST
49150: LIST
49151: PUSH
49152: LD_INT 2
49154: NEG
49155: PUSH
49156: LD_INT 0
49158: PUSH
49159: EMPTY
49160: LIST
49161: LIST
49162: PUSH
49163: LD_INT 2
49165: NEG
49166: PUSH
49167: LD_INT 1
49169: NEG
49170: PUSH
49171: EMPTY
49172: LIST
49173: LIST
49174: PUSH
49175: LD_INT 2
49177: NEG
49178: PUSH
49179: LD_INT 2
49181: NEG
49182: PUSH
49183: EMPTY
49184: LIST
49185: LIST
49186: PUSH
49187: EMPTY
49188: LIST
49189: LIST
49190: LIST
49191: LIST
49192: LIST
49193: LIST
49194: LIST
49195: LIST
49196: LIST
49197: LIST
49198: LIST
49199: LIST
49200: LIST
49201: LIST
49202: LIST
49203: LIST
49204: LIST
49205: LIST
49206: LIST
49207: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49208: LD_ADDR_VAR 0 54
49212: PUSH
49213: LD_INT 0
49215: PUSH
49216: LD_INT 0
49218: PUSH
49219: EMPTY
49220: LIST
49221: LIST
49222: PUSH
49223: LD_INT 0
49225: PUSH
49226: LD_INT 1
49228: NEG
49229: PUSH
49230: EMPTY
49231: LIST
49232: LIST
49233: PUSH
49234: LD_INT 1
49236: PUSH
49237: LD_INT 0
49239: PUSH
49240: EMPTY
49241: LIST
49242: LIST
49243: PUSH
49244: LD_INT 1
49246: PUSH
49247: LD_INT 1
49249: PUSH
49250: EMPTY
49251: LIST
49252: LIST
49253: PUSH
49254: LD_INT 0
49256: PUSH
49257: LD_INT 1
49259: PUSH
49260: EMPTY
49261: LIST
49262: LIST
49263: PUSH
49264: LD_INT 1
49266: NEG
49267: PUSH
49268: LD_INT 0
49270: PUSH
49271: EMPTY
49272: LIST
49273: LIST
49274: PUSH
49275: LD_INT 1
49277: NEG
49278: PUSH
49279: LD_INT 1
49281: NEG
49282: PUSH
49283: EMPTY
49284: LIST
49285: LIST
49286: PUSH
49287: LD_INT 1
49289: NEG
49290: PUSH
49291: LD_INT 2
49293: NEG
49294: PUSH
49295: EMPTY
49296: LIST
49297: LIST
49298: PUSH
49299: LD_INT 0
49301: PUSH
49302: LD_INT 2
49304: NEG
49305: PUSH
49306: EMPTY
49307: LIST
49308: LIST
49309: PUSH
49310: LD_INT 1
49312: PUSH
49313: LD_INT 1
49315: NEG
49316: PUSH
49317: EMPTY
49318: LIST
49319: LIST
49320: PUSH
49321: LD_INT 2
49323: PUSH
49324: LD_INT 0
49326: PUSH
49327: EMPTY
49328: LIST
49329: LIST
49330: PUSH
49331: LD_INT 2
49333: PUSH
49334: LD_INT 1
49336: PUSH
49337: EMPTY
49338: LIST
49339: LIST
49340: PUSH
49341: LD_INT 2
49343: PUSH
49344: LD_INT 2
49346: PUSH
49347: EMPTY
49348: LIST
49349: LIST
49350: PUSH
49351: LD_INT 1
49353: PUSH
49354: LD_INT 2
49356: PUSH
49357: EMPTY
49358: LIST
49359: LIST
49360: PUSH
49361: LD_INT 0
49363: PUSH
49364: LD_INT 2
49366: PUSH
49367: EMPTY
49368: LIST
49369: LIST
49370: PUSH
49371: LD_INT 1
49373: NEG
49374: PUSH
49375: LD_INT 1
49377: PUSH
49378: EMPTY
49379: LIST
49380: LIST
49381: PUSH
49382: LD_INT 2
49384: NEG
49385: PUSH
49386: LD_INT 0
49388: PUSH
49389: EMPTY
49390: LIST
49391: LIST
49392: PUSH
49393: LD_INT 2
49395: NEG
49396: PUSH
49397: LD_INT 1
49399: NEG
49400: PUSH
49401: EMPTY
49402: LIST
49403: LIST
49404: PUSH
49405: LD_INT 2
49407: NEG
49408: PUSH
49409: LD_INT 2
49411: NEG
49412: PUSH
49413: EMPTY
49414: LIST
49415: LIST
49416: PUSH
49417: EMPTY
49418: LIST
49419: LIST
49420: LIST
49421: LIST
49422: LIST
49423: LIST
49424: LIST
49425: LIST
49426: LIST
49427: LIST
49428: LIST
49429: LIST
49430: LIST
49431: LIST
49432: LIST
49433: LIST
49434: LIST
49435: LIST
49436: LIST
49437: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49438: LD_ADDR_VAR 0 55
49442: PUSH
49443: LD_INT 0
49445: PUSH
49446: LD_INT 0
49448: PUSH
49449: EMPTY
49450: LIST
49451: LIST
49452: PUSH
49453: LD_INT 0
49455: PUSH
49456: LD_INT 1
49458: NEG
49459: PUSH
49460: EMPTY
49461: LIST
49462: LIST
49463: PUSH
49464: LD_INT 1
49466: PUSH
49467: LD_INT 0
49469: PUSH
49470: EMPTY
49471: LIST
49472: LIST
49473: PUSH
49474: LD_INT 1
49476: PUSH
49477: LD_INT 1
49479: PUSH
49480: EMPTY
49481: LIST
49482: LIST
49483: PUSH
49484: LD_INT 0
49486: PUSH
49487: LD_INT 1
49489: PUSH
49490: EMPTY
49491: LIST
49492: LIST
49493: PUSH
49494: LD_INT 1
49496: NEG
49497: PUSH
49498: LD_INT 0
49500: PUSH
49501: EMPTY
49502: LIST
49503: LIST
49504: PUSH
49505: LD_INT 1
49507: NEG
49508: PUSH
49509: LD_INT 1
49511: NEG
49512: PUSH
49513: EMPTY
49514: LIST
49515: LIST
49516: PUSH
49517: LD_INT 1
49519: NEG
49520: PUSH
49521: LD_INT 2
49523: NEG
49524: PUSH
49525: EMPTY
49526: LIST
49527: LIST
49528: PUSH
49529: LD_INT 0
49531: PUSH
49532: LD_INT 2
49534: NEG
49535: PUSH
49536: EMPTY
49537: LIST
49538: LIST
49539: PUSH
49540: LD_INT 1
49542: PUSH
49543: LD_INT 1
49545: NEG
49546: PUSH
49547: EMPTY
49548: LIST
49549: LIST
49550: PUSH
49551: LD_INT 2
49553: PUSH
49554: LD_INT 0
49556: PUSH
49557: EMPTY
49558: LIST
49559: LIST
49560: PUSH
49561: LD_INT 2
49563: PUSH
49564: LD_INT 1
49566: PUSH
49567: EMPTY
49568: LIST
49569: LIST
49570: PUSH
49571: LD_INT 2
49573: PUSH
49574: LD_INT 2
49576: PUSH
49577: EMPTY
49578: LIST
49579: LIST
49580: PUSH
49581: LD_INT 1
49583: PUSH
49584: LD_INT 2
49586: PUSH
49587: EMPTY
49588: LIST
49589: LIST
49590: PUSH
49591: LD_INT 0
49593: PUSH
49594: LD_INT 2
49596: PUSH
49597: EMPTY
49598: LIST
49599: LIST
49600: PUSH
49601: LD_INT 1
49603: NEG
49604: PUSH
49605: LD_INT 1
49607: PUSH
49608: EMPTY
49609: LIST
49610: LIST
49611: PUSH
49612: LD_INT 2
49614: NEG
49615: PUSH
49616: LD_INT 0
49618: PUSH
49619: EMPTY
49620: LIST
49621: LIST
49622: PUSH
49623: LD_INT 2
49625: NEG
49626: PUSH
49627: LD_INT 1
49629: NEG
49630: PUSH
49631: EMPTY
49632: LIST
49633: LIST
49634: PUSH
49635: LD_INT 2
49637: NEG
49638: PUSH
49639: LD_INT 2
49641: NEG
49642: PUSH
49643: EMPTY
49644: LIST
49645: LIST
49646: PUSH
49647: EMPTY
49648: LIST
49649: LIST
49650: LIST
49651: LIST
49652: LIST
49653: LIST
49654: LIST
49655: LIST
49656: LIST
49657: LIST
49658: LIST
49659: LIST
49660: LIST
49661: LIST
49662: LIST
49663: LIST
49664: LIST
49665: LIST
49666: LIST
49667: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49668: LD_ADDR_VAR 0 56
49672: PUSH
49673: LD_INT 0
49675: PUSH
49676: LD_INT 0
49678: PUSH
49679: EMPTY
49680: LIST
49681: LIST
49682: PUSH
49683: LD_INT 0
49685: PUSH
49686: LD_INT 1
49688: NEG
49689: PUSH
49690: EMPTY
49691: LIST
49692: LIST
49693: PUSH
49694: LD_INT 1
49696: PUSH
49697: LD_INT 0
49699: PUSH
49700: EMPTY
49701: LIST
49702: LIST
49703: PUSH
49704: LD_INT 1
49706: PUSH
49707: LD_INT 1
49709: PUSH
49710: EMPTY
49711: LIST
49712: LIST
49713: PUSH
49714: LD_INT 0
49716: PUSH
49717: LD_INT 1
49719: PUSH
49720: EMPTY
49721: LIST
49722: LIST
49723: PUSH
49724: LD_INT 1
49726: NEG
49727: PUSH
49728: LD_INT 0
49730: PUSH
49731: EMPTY
49732: LIST
49733: LIST
49734: PUSH
49735: LD_INT 1
49737: NEG
49738: PUSH
49739: LD_INT 1
49741: NEG
49742: PUSH
49743: EMPTY
49744: LIST
49745: LIST
49746: PUSH
49747: LD_INT 1
49749: NEG
49750: PUSH
49751: LD_INT 2
49753: NEG
49754: PUSH
49755: EMPTY
49756: LIST
49757: LIST
49758: PUSH
49759: LD_INT 0
49761: PUSH
49762: LD_INT 2
49764: NEG
49765: PUSH
49766: EMPTY
49767: LIST
49768: LIST
49769: PUSH
49770: LD_INT 1
49772: PUSH
49773: LD_INT 1
49775: NEG
49776: PUSH
49777: EMPTY
49778: LIST
49779: LIST
49780: PUSH
49781: LD_INT 2
49783: PUSH
49784: LD_INT 0
49786: PUSH
49787: EMPTY
49788: LIST
49789: LIST
49790: PUSH
49791: LD_INT 2
49793: PUSH
49794: LD_INT 1
49796: PUSH
49797: EMPTY
49798: LIST
49799: LIST
49800: PUSH
49801: LD_INT 2
49803: PUSH
49804: LD_INT 2
49806: PUSH
49807: EMPTY
49808: LIST
49809: LIST
49810: PUSH
49811: LD_INT 1
49813: PUSH
49814: LD_INT 2
49816: PUSH
49817: EMPTY
49818: LIST
49819: LIST
49820: PUSH
49821: LD_INT 0
49823: PUSH
49824: LD_INT 2
49826: PUSH
49827: EMPTY
49828: LIST
49829: LIST
49830: PUSH
49831: LD_INT 1
49833: NEG
49834: PUSH
49835: LD_INT 1
49837: PUSH
49838: EMPTY
49839: LIST
49840: LIST
49841: PUSH
49842: LD_INT 2
49844: NEG
49845: PUSH
49846: LD_INT 0
49848: PUSH
49849: EMPTY
49850: LIST
49851: LIST
49852: PUSH
49853: LD_INT 2
49855: NEG
49856: PUSH
49857: LD_INT 1
49859: NEG
49860: PUSH
49861: EMPTY
49862: LIST
49863: LIST
49864: PUSH
49865: LD_INT 2
49867: NEG
49868: PUSH
49869: LD_INT 2
49871: NEG
49872: PUSH
49873: EMPTY
49874: LIST
49875: LIST
49876: PUSH
49877: EMPTY
49878: LIST
49879: LIST
49880: LIST
49881: LIST
49882: LIST
49883: LIST
49884: LIST
49885: LIST
49886: LIST
49887: LIST
49888: LIST
49889: LIST
49890: LIST
49891: LIST
49892: LIST
49893: LIST
49894: LIST
49895: LIST
49896: LIST
49897: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49898: LD_ADDR_VAR 0 57
49902: PUSH
49903: LD_INT 0
49905: PUSH
49906: LD_INT 0
49908: PUSH
49909: EMPTY
49910: LIST
49911: LIST
49912: PUSH
49913: LD_INT 0
49915: PUSH
49916: LD_INT 1
49918: NEG
49919: PUSH
49920: EMPTY
49921: LIST
49922: LIST
49923: PUSH
49924: LD_INT 1
49926: PUSH
49927: LD_INT 0
49929: PUSH
49930: EMPTY
49931: LIST
49932: LIST
49933: PUSH
49934: LD_INT 1
49936: PUSH
49937: LD_INT 1
49939: PUSH
49940: EMPTY
49941: LIST
49942: LIST
49943: PUSH
49944: LD_INT 0
49946: PUSH
49947: LD_INT 1
49949: PUSH
49950: EMPTY
49951: LIST
49952: LIST
49953: PUSH
49954: LD_INT 1
49956: NEG
49957: PUSH
49958: LD_INT 0
49960: PUSH
49961: EMPTY
49962: LIST
49963: LIST
49964: PUSH
49965: LD_INT 1
49967: NEG
49968: PUSH
49969: LD_INT 1
49971: NEG
49972: PUSH
49973: EMPTY
49974: LIST
49975: LIST
49976: PUSH
49977: LD_INT 1
49979: NEG
49980: PUSH
49981: LD_INT 2
49983: NEG
49984: PUSH
49985: EMPTY
49986: LIST
49987: LIST
49988: PUSH
49989: LD_INT 0
49991: PUSH
49992: LD_INT 2
49994: NEG
49995: PUSH
49996: EMPTY
49997: LIST
49998: LIST
49999: PUSH
50000: LD_INT 1
50002: PUSH
50003: LD_INT 1
50005: NEG
50006: PUSH
50007: EMPTY
50008: LIST
50009: LIST
50010: PUSH
50011: LD_INT 2
50013: PUSH
50014: LD_INT 0
50016: PUSH
50017: EMPTY
50018: LIST
50019: LIST
50020: PUSH
50021: LD_INT 2
50023: PUSH
50024: LD_INT 1
50026: PUSH
50027: EMPTY
50028: LIST
50029: LIST
50030: PUSH
50031: LD_INT 2
50033: PUSH
50034: LD_INT 2
50036: PUSH
50037: EMPTY
50038: LIST
50039: LIST
50040: PUSH
50041: LD_INT 1
50043: PUSH
50044: LD_INT 2
50046: PUSH
50047: EMPTY
50048: LIST
50049: LIST
50050: PUSH
50051: LD_INT 0
50053: PUSH
50054: LD_INT 2
50056: PUSH
50057: EMPTY
50058: LIST
50059: LIST
50060: PUSH
50061: LD_INT 1
50063: NEG
50064: PUSH
50065: LD_INT 1
50067: PUSH
50068: EMPTY
50069: LIST
50070: LIST
50071: PUSH
50072: LD_INT 2
50074: NEG
50075: PUSH
50076: LD_INT 0
50078: PUSH
50079: EMPTY
50080: LIST
50081: LIST
50082: PUSH
50083: LD_INT 2
50085: NEG
50086: PUSH
50087: LD_INT 1
50089: NEG
50090: PUSH
50091: EMPTY
50092: LIST
50093: LIST
50094: PUSH
50095: LD_INT 2
50097: NEG
50098: PUSH
50099: LD_INT 2
50101: NEG
50102: PUSH
50103: EMPTY
50104: LIST
50105: LIST
50106: PUSH
50107: EMPTY
50108: LIST
50109: LIST
50110: LIST
50111: LIST
50112: LIST
50113: LIST
50114: LIST
50115: LIST
50116: LIST
50117: LIST
50118: LIST
50119: LIST
50120: LIST
50121: LIST
50122: LIST
50123: LIST
50124: LIST
50125: LIST
50126: LIST
50127: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50128: LD_ADDR_VAR 0 58
50132: PUSH
50133: LD_INT 0
50135: PUSH
50136: LD_INT 0
50138: PUSH
50139: EMPTY
50140: LIST
50141: LIST
50142: PUSH
50143: LD_INT 0
50145: PUSH
50146: LD_INT 1
50148: NEG
50149: PUSH
50150: EMPTY
50151: LIST
50152: LIST
50153: PUSH
50154: LD_INT 1
50156: PUSH
50157: LD_INT 0
50159: PUSH
50160: EMPTY
50161: LIST
50162: LIST
50163: PUSH
50164: LD_INT 1
50166: PUSH
50167: LD_INT 1
50169: PUSH
50170: EMPTY
50171: LIST
50172: LIST
50173: PUSH
50174: LD_INT 0
50176: PUSH
50177: LD_INT 1
50179: PUSH
50180: EMPTY
50181: LIST
50182: LIST
50183: PUSH
50184: LD_INT 1
50186: NEG
50187: PUSH
50188: LD_INT 0
50190: PUSH
50191: EMPTY
50192: LIST
50193: LIST
50194: PUSH
50195: LD_INT 1
50197: NEG
50198: PUSH
50199: LD_INT 1
50201: NEG
50202: PUSH
50203: EMPTY
50204: LIST
50205: LIST
50206: PUSH
50207: LD_INT 1
50209: NEG
50210: PUSH
50211: LD_INT 2
50213: NEG
50214: PUSH
50215: EMPTY
50216: LIST
50217: LIST
50218: PUSH
50219: LD_INT 0
50221: PUSH
50222: LD_INT 2
50224: NEG
50225: PUSH
50226: EMPTY
50227: LIST
50228: LIST
50229: PUSH
50230: LD_INT 1
50232: PUSH
50233: LD_INT 1
50235: NEG
50236: PUSH
50237: EMPTY
50238: LIST
50239: LIST
50240: PUSH
50241: LD_INT 2
50243: PUSH
50244: LD_INT 0
50246: PUSH
50247: EMPTY
50248: LIST
50249: LIST
50250: PUSH
50251: LD_INT 2
50253: PUSH
50254: LD_INT 1
50256: PUSH
50257: EMPTY
50258: LIST
50259: LIST
50260: PUSH
50261: LD_INT 2
50263: PUSH
50264: LD_INT 2
50266: PUSH
50267: EMPTY
50268: LIST
50269: LIST
50270: PUSH
50271: LD_INT 1
50273: PUSH
50274: LD_INT 2
50276: PUSH
50277: EMPTY
50278: LIST
50279: LIST
50280: PUSH
50281: LD_INT 0
50283: PUSH
50284: LD_INT 2
50286: PUSH
50287: EMPTY
50288: LIST
50289: LIST
50290: PUSH
50291: LD_INT 1
50293: NEG
50294: PUSH
50295: LD_INT 1
50297: PUSH
50298: EMPTY
50299: LIST
50300: LIST
50301: PUSH
50302: LD_INT 2
50304: NEG
50305: PUSH
50306: LD_INT 0
50308: PUSH
50309: EMPTY
50310: LIST
50311: LIST
50312: PUSH
50313: LD_INT 2
50315: NEG
50316: PUSH
50317: LD_INT 1
50319: NEG
50320: PUSH
50321: EMPTY
50322: LIST
50323: LIST
50324: PUSH
50325: LD_INT 2
50327: NEG
50328: PUSH
50329: LD_INT 2
50331: NEG
50332: PUSH
50333: EMPTY
50334: LIST
50335: LIST
50336: PUSH
50337: EMPTY
50338: LIST
50339: LIST
50340: LIST
50341: LIST
50342: LIST
50343: LIST
50344: LIST
50345: LIST
50346: LIST
50347: LIST
50348: LIST
50349: LIST
50350: LIST
50351: LIST
50352: LIST
50353: LIST
50354: LIST
50355: LIST
50356: LIST
50357: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50358: LD_ADDR_VAR 0 59
50362: PUSH
50363: LD_INT 0
50365: PUSH
50366: LD_INT 0
50368: PUSH
50369: EMPTY
50370: LIST
50371: LIST
50372: PUSH
50373: LD_INT 0
50375: PUSH
50376: LD_INT 1
50378: NEG
50379: PUSH
50380: EMPTY
50381: LIST
50382: LIST
50383: PUSH
50384: LD_INT 1
50386: PUSH
50387: LD_INT 0
50389: PUSH
50390: EMPTY
50391: LIST
50392: LIST
50393: PUSH
50394: LD_INT 1
50396: PUSH
50397: LD_INT 1
50399: PUSH
50400: EMPTY
50401: LIST
50402: LIST
50403: PUSH
50404: LD_INT 0
50406: PUSH
50407: LD_INT 1
50409: PUSH
50410: EMPTY
50411: LIST
50412: LIST
50413: PUSH
50414: LD_INT 1
50416: NEG
50417: PUSH
50418: LD_INT 0
50420: PUSH
50421: EMPTY
50422: LIST
50423: LIST
50424: PUSH
50425: LD_INT 1
50427: NEG
50428: PUSH
50429: LD_INT 1
50431: NEG
50432: PUSH
50433: EMPTY
50434: LIST
50435: LIST
50436: PUSH
50437: EMPTY
50438: LIST
50439: LIST
50440: LIST
50441: LIST
50442: LIST
50443: LIST
50444: LIST
50445: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50446: LD_ADDR_VAR 0 60
50450: PUSH
50451: LD_INT 0
50453: PUSH
50454: LD_INT 0
50456: PUSH
50457: EMPTY
50458: LIST
50459: LIST
50460: PUSH
50461: LD_INT 0
50463: PUSH
50464: LD_INT 1
50466: NEG
50467: PUSH
50468: EMPTY
50469: LIST
50470: LIST
50471: PUSH
50472: LD_INT 1
50474: PUSH
50475: LD_INT 0
50477: PUSH
50478: EMPTY
50479: LIST
50480: LIST
50481: PUSH
50482: LD_INT 1
50484: PUSH
50485: LD_INT 1
50487: PUSH
50488: EMPTY
50489: LIST
50490: LIST
50491: PUSH
50492: LD_INT 0
50494: PUSH
50495: LD_INT 1
50497: PUSH
50498: EMPTY
50499: LIST
50500: LIST
50501: PUSH
50502: LD_INT 1
50504: NEG
50505: PUSH
50506: LD_INT 0
50508: PUSH
50509: EMPTY
50510: LIST
50511: LIST
50512: PUSH
50513: LD_INT 1
50515: NEG
50516: PUSH
50517: LD_INT 1
50519: NEG
50520: PUSH
50521: EMPTY
50522: LIST
50523: LIST
50524: PUSH
50525: EMPTY
50526: LIST
50527: LIST
50528: LIST
50529: LIST
50530: LIST
50531: LIST
50532: LIST
50533: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50534: LD_ADDR_VAR 0 61
50538: PUSH
50539: LD_INT 0
50541: PUSH
50542: LD_INT 0
50544: PUSH
50545: EMPTY
50546: LIST
50547: LIST
50548: PUSH
50549: LD_INT 0
50551: PUSH
50552: LD_INT 1
50554: NEG
50555: PUSH
50556: EMPTY
50557: LIST
50558: LIST
50559: PUSH
50560: LD_INT 1
50562: PUSH
50563: LD_INT 0
50565: PUSH
50566: EMPTY
50567: LIST
50568: LIST
50569: PUSH
50570: LD_INT 1
50572: PUSH
50573: LD_INT 1
50575: PUSH
50576: EMPTY
50577: LIST
50578: LIST
50579: PUSH
50580: LD_INT 0
50582: PUSH
50583: LD_INT 1
50585: PUSH
50586: EMPTY
50587: LIST
50588: LIST
50589: PUSH
50590: LD_INT 1
50592: NEG
50593: PUSH
50594: LD_INT 0
50596: PUSH
50597: EMPTY
50598: LIST
50599: LIST
50600: PUSH
50601: LD_INT 1
50603: NEG
50604: PUSH
50605: LD_INT 1
50607: NEG
50608: PUSH
50609: EMPTY
50610: LIST
50611: LIST
50612: PUSH
50613: EMPTY
50614: LIST
50615: LIST
50616: LIST
50617: LIST
50618: LIST
50619: LIST
50620: LIST
50621: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50622: LD_ADDR_VAR 0 62
50626: PUSH
50627: LD_INT 0
50629: PUSH
50630: LD_INT 0
50632: PUSH
50633: EMPTY
50634: LIST
50635: LIST
50636: PUSH
50637: LD_INT 0
50639: PUSH
50640: LD_INT 1
50642: NEG
50643: PUSH
50644: EMPTY
50645: LIST
50646: LIST
50647: PUSH
50648: LD_INT 1
50650: PUSH
50651: LD_INT 0
50653: PUSH
50654: EMPTY
50655: LIST
50656: LIST
50657: PUSH
50658: LD_INT 1
50660: PUSH
50661: LD_INT 1
50663: PUSH
50664: EMPTY
50665: LIST
50666: LIST
50667: PUSH
50668: LD_INT 0
50670: PUSH
50671: LD_INT 1
50673: PUSH
50674: EMPTY
50675: LIST
50676: LIST
50677: PUSH
50678: LD_INT 1
50680: NEG
50681: PUSH
50682: LD_INT 0
50684: PUSH
50685: EMPTY
50686: LIST
50687: LIST
50688: PUSH
50689: LD_INT 1
50691: NEG
50692: PUSH
50693: LD_INT 1
50695: NEG
50696: PUSH
50697: EMPTY
50698: LIST
50699: LIST
50700: PUSH
50701: EMPTY
50702: LIST
50703: LIST
50704: LIST
50705: LIST
50706: LIST
50707: LIST
50708: LIST
50709: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50710: LD_ADDR_VAR 0 63
50714: PUSH
50715: LD_INT 0
50717: PUSH
50718: LD_INT 0
50720: PUSH
50721: EMPTY
50722: LIST
50723: LIST
50724: PUSH
50725: LD_INT 0
50727: PUSH
50728: LD_INT 1
50730: NEG
50731: PUSH
50732: EMPTY
50733: LIST
50734: LIST
50735: PUSH
50736: LD_INT 1
50738: PUSH
50739: LD_INT 0
50741: PUSH
50742: EMPTY
50743: LIST
50744: LIST
50745: PUSH
50746: LD_INT 1
50748: PUSH
50749: LD_INT 1
50751: PUSH
50752: EMPTY
50753: LIST
50754: LIST
50755: PUSH
50756: LD_INT 0
50758: PUSH
50759: LD_INT 1
50761: PUSH
50762: EMPTY
50763: LIST
50764: LIST
50765: PUSH
50766: LD_INT 1
50768: NEG
50769: PUSH
50770: LD_INT 0
50772: PUSH
50773: EMPTY
50774: LIST
50775: LIST
50776: PUSH
50777: LD_INT 1
50779: NEG
50780: PUSH
50781: LD_INT 1
50783: NEG
50784: PUSH
50785: EMPTY
50786: LIST
50787: LIST
50788: PUSH
50789: EMPTY
50790: LIST
50791: LIST
50792: LIST
50793: LIST
50794: LIST
50795: LIST
50796: LIST
50797: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50798: LD_ADDR_VAR 0 64
50802: PUSH
50803: LD_INT 0
50805: PUSH
50806: LD_INT 0
50808: PUSH
50809: EMPTY
50810: LIST
50811: LIST
50812: PUSH
50813: LD_INT 0
50815: PUSH
50816: LD_INT 1
50818: NEG
50819: PUSH
50820: EMPTY
50821: LIST
50822: LIST
50823: PUSH
50824: LD_INT 1
50826: PUSH
50827: LD_INT 0
50829: PUSH
50830: EMPTY
50831: LIST
50832: LIST
50833: PUSH
50834: LD_INT 1
50836: PUSH
50837: LD_INT 1
50839: PUSH
50840: EMPTY
50841: LIST
50842: LIST
50843: PUSH
50844: LD_INT 0
50846: PUSH
50847: LD_INT 1
50849: PUSH
50850: EMPTY
50851: LIST
50852: LIST
50853: PUSH
50854: LD_INT 1
50856: NEG
50857: PUSH
50858: LD_INT 0
50860: PUSH
50861: EMPTY
50862: LIST
50863: LIST
50864: PUSH
50865: LD_INT 1
50867: NEG
50868: PUSH
50869: LD_INT 1
50871: NEG
50872: PUSH
50873: EMPTY
50874: LIST
50875: LIST
50876: PUSH
50877: EMPTY
50878: LIST
50879: LIST
50880: LIST
50881: LIST
50882: LIST
50883: LIST
50884: LIST
50885: ST_TO_ADDR
// end ; 1 :
50886: GO 56783
50888: LD_INT 1
50890: DOUBLE
50891: EQUAL
50892: IFTRUE 50896
50894: GO 53519
50896: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50897: LD_ADDR_VAR 0 11
50901: PUSH
50902: LD_INT 1
50904: NEG
50905: PUSH
50906: LD_INT 3
50908: NEG
50909: PUSH
50910: EMPTY
50911: LIST
50912: LIST
50913: PUSH
50914: LD_INT 0
50916: PUSH
50917: LD_INT 3
50919: NEG
50920: PUSH
50921: EMPTY
50922: LIST
50923: LIST
50924: PUSH
50925: LD_INT 1
50927: PUSH
50928: LD_INT 2
50930: NEG
50931: PUSH
50932: EMPTY
50933: LIST
50934: LIST
50935: PUSH
50936: EMPTY
50937: LIST
50938: LIST
50939: LIST
50940: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50941: LD_ADDR_VAR 0 12
50945: PUSH
50946: LD_INT 2
50948: PUSH
50949: LD_INT 1
50951: NEG
50952: PUSH
50953: EMPTY
50954: LIST
50955: LIST
50956: PUSH
50957: LD_INT 3
50959: PUSH
50960: LD_INT 0
50962: PUSH
50963: EMPTY
50964: LIST
50965: LIST
50966: PUSH
50967: LD_INT 3
50969: PUSH
50970: LD_INT 1
50972: PUSH
50973: EMPTY
50974: LIST
50975: LIST
50976: PUSH
50977: EMPTY
50978: LIST
50979: LIST
50980: LIST
50981: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50982: LD_ADDR_VAR 0 13
50986: PUSH
50987: LD_INT 3
50989: PUSH
50990: LD_INT 2
50992: PUSH
50993: EMPTY
50994: LIST
50995: LIST
50996: PUSH
50997: LD_INT 3
50999: PUSH
51000: LD_INT 3
51002: PUSH
51003: EMPTY
51004: LIST
51005: LIST
51006: PUSH
51007: LD_INT 2
51009: PUSH
51010: LD_INT 3
51012: PUSH
51013: EMPTY
51014: LIST
51015: LIST
51016: PUSH
51017: EMPTY
51018: LIST
51019: LIST
51020: LIST
51021: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51022: LD_ADDR_VAR 0 14
51026: PUSH
51027: LD_INT 1
51029: PUSH
51030: LD_INT 3
51032: PUSH
51033: EMPTY
51034: LIST
51035: LIST
51036: PUSH
51037: LD_INT 0
51039: PUSH
51040: LD_INT 3
51042: PUSH
51043: EMPTY
51044: LIST
51045: LIST
51046: PUSH
51047: LD_INT 1
51049: NEG
51050: PUSH
51051: LD_INT 2
51053: PUSH
51054: EMPTY
51055: LIST
51056: LIST
51057: PUSH
51058: EMPTY
51059: LIST
51060: LIST
51061: LIST
51062: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51063: LD_ADDR_VAR 0 15
51067: PUSH
51068: LD_INT 2
51070: NEG
51071: PUSH
51072: LD_INT 1
51074: PUSH
51075: EMPTY
51076: LIST
51077: LIST
51078: PUSH
51079: LD_INT 3
51081: NEG
51082: PUSH
51083: LD_INT 0
51085: PUSH
51086: EMPTY
51087: LIST
51088: LIST
51089: PUSH
51090: LD_INT 3
51092: NEG
51093: PUSH
51094: LD_INT 1
51096: NEG
51097: PUSH
51098: EMPTY
51099: LIST
51100: LIST
51101: PUSH
51102: EMPTY
51103: LIST
51104: LIST
51105: LIST
51106: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51107: LD_ADDR_VAR 0 16
51111: PUSH
51112: LD_INT 2
51114: NEG
51115: PUSH
51116: LD_INT 3
51118: NEG
51119: PUSH
51120: EMPTY
51121: LIST
51122: LIST
51123: PUSH
51124: LD_INT 3
51126: NEG
51127: PUSH
51128: LD_INT 2
51130: NEG
51131: PUSH
51132: EMPTY
51133: LIST
51134: LIST
51135: PUSH
51136: LD_INT 3
51138: NEG
51139: PUSH
51140: LD_INT 3
51142: NEG
51143: PUSH
51144: EMPTY
51145: LIST
51146: LIST
51147: PUSH
51148: EMPTY
51149: LIST
51150: LIST
51151: LIST
51152: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51153: LD_ADDR_VAR 0 17
51157: PUSH
51158: LD_INT 1
51160: NEG
51161: PUSH
51162: LD_INT 3
51164: NEG
51165: PUSH
51166: EMPTY
51167: LIST
51168: LIST
51169: PUSH
51170: LD_INT 0
51172: PUSH
51173: LD_INT 3
51175: NEG
51176: PUSH
51177: EMPTY
51178: LIST
51179: LIST
51180: PUSH
51181: LD_INT 1
51183: PUSH
51184: LD_INT 2
51186: NEG
51187: PUSH
51188: EMPTY
51189: LIST
51190: LIST
51191: PUSH
51192: EMPTY
51193: LIST
51194: LIST
51195: LIST
51196: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51197: LD_ADDR_VAR 0 18
51201: PUSH
51202: LD_INT 2
51204: PUSH
51205: LD_INT 1
51207: NEG
51208: PUSH
51209: EMPTY
51210: LIST
51211: LIST
51212: PUSH
51213: LD_INT 3
51215: PUSH
51216: LD_INT 0
51218: PUSH
51219: EMPTY
51220: LIST
51221: LIST
51222: PUSH
51223: LD_INT 3
51225: PUSH
51226: LD_INT 1
51228: PUSH
51229: EMPTY
51230: LIST
51231: LIST
51232: PUSH
51233: EMPTY
51234: LIST
51235: LIST
51236: LIST
51237: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51238: LD_ADDR_VAR 0 19
51242: PUSH
51243: LD_INT 3
51245: PUSH
51246: LD_INT 2
51248: PUSH
51249: EMPTY
51250: LIST
51251: LIST
51252: PUSH
51253: LD_INT 3
51255: PUSH
51256: LD_INT 3
51258: PUSH
51259: EMPTY
51260: LIST
51261: LIST
51262: PUSH
51263: LD_INT 2
51265: PUSH
51266: LD_INT 3
51268: PUSH
51269: EMPTY
51270: LIST
51271: LIST
51272: PUSH
51273: EMPTY
51274: LIST
51275: LIST
51276: LIST
51277: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51278: LD_ADDR_VAR 0 20
51282: PUSH
51283: LD_INT 1
51285: PUSH
51286: LD_INT 3
51288: PUSH
51289: EMPTY
51290: LIST
51291: LIST
51292: PUSH
51293: LD_INT 0
51295: PUSH
51296: LD_INT 3
51298: PUSH
51299: EMPTY
51300: LIST
51301: LIST
51302: PUSH
51303: LD_INT 1
51305: NEG
51306: PUSH
51307: LD_INT 2
51309: PUSH
51310: EMPTY
51311: LIST
51312: LIST
51313: PUSH
51314: EMPTY
51315: LIST
51316: LIST
51317: LIST
51318: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51319: LD_ADDR_VAR 0 21
51323: PUSH
51324: LD_INT 2
51326: NEG
51327: PUSH
51328: LD_INT 1
51330: PUSH
51331: EMPTY
51332: LIST
51333: LIST
51334: PUSH
51335: LD_INT 3
51337: NEG
51338: PUSH
51339: LD_INT 0
51341: PUSH
51342: EMPTY
51343: LIST
51344: LIST
51345: PUSH
51346: LD_INT 3
51348: NEG
51349: PUSH
51350: LD_INT 1
51352: NEG
51353: PUSH
51354: EMPTY
51355: LIST
51356: LIST
51357: PUSH
51358: EMPTY
51359: LIST
51360: LIST
51361: LIST
51362: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51363: LD_ADDR_VAR 0 22
51367: PUSH
51368: LD_INT 2
51370: NEG
51371: PUSH
51372: LD_INT 3
51374: NEG
51375: PUSH
51376: EMPTY
51377: LIST
51378: LIST
51379: PUSH
51380: LD_INT 3
51382: NEG
51383: PUSH
51384: LD_INT 2
51386: NEG
51387: PUSH
51388: EMPTY
51389: LIST
51390: LIST
51391: PUSH
51392: LD_INT 3
51394: NEG
51395: PUSH
51396: LD_INT 3
51398: NEG
51399: PUSH
51400: EMPTY
51401: LIST
51402: LIST
51403: PUSH
51404: EMPTY
51405: LIST
51406: LIST
51407: LIST
51408: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
51409: LD_ADDR_VAR 0 23
51413: PUSH
51414: LD_INT 0
51416: PUSH
51417: LD_INT 3
51419: NEG
51420: PUSH
51421: EMPTY
51422: LIST
51423: LIST
51424: PUSH
51425: LD_INT 1
51427: NEG
51428: PUSH
51429: LD_INT 4
51431: NEG
51432: PUSH
51433: EMPTY
51434: LIST
51435: LIST
51436: PUSH
51437: LD_INT 1
51439: PUSH
51440: LD_INT 3
51442: NEG
51443: PUSH
51444: EMPTY
51445: LIST
51446: LIST
51447: PUSH
51448: EMPTY
51449: LIST
51450: LIST
51451: LIST
51452: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
51453: LD_ADDR_VAR 0 24
51457: PUSH
51458: LD_INT 3
51460: PUSH
51461: LD_INT 0
51463: PUSH
51464: EMPTY
51465: LIST
51466: LIST
51467: PUSH
51468: LD_INT 3
51470: PUSH
51471: LD_INT 1
51473: NEG
51474: PUSH
51475: EMPTY
51476: LIST
51477: LIST
51478: PUSH
51479: LD_INT 4
51481: PUSH
51482: LD_INT 1
51484: PUSH
51485: EMPTY
51486: LIST
51487: LIST
51488: PUSH
51489: EMPTY
51490: LIST
51491: LIST
51492: LIST
51493: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
51494: LD_ADDR_VAR 0 25
51498: PUSH
51499: LD_INT 3
51501: PUSH
51502: LD_INT 3
51504: PUSH
51505: EMPTY
51506: LIST
51507: LIST
51508: PUSH
51509: LD_INT 4
51511: PUSH
51512: LD_INT 3
51514: PUSH
51515: EMPTY
51516: LIST
51517: LIST
51518: PUSH
51519: LD_INT 3
51521: PUSH
51522: LD_INT 4
51524: PUSH
51525: EMPTY
51526: LIST
51527: LIST
51528: PUSH
51529: EMPTY
51530: LIST
51531: LIST
51532: LIST
51533: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
51534: LD_ADDR_VAR 0 26
51538: PUSH
51539: LD_INT 0
51541: PUSH
51542: LD_INT 3
51544: PUSH
51545: EMPTY
51546: LIST
51547: LIST
51548: PUSH
51549: LD_INT 1
51551: PUSH
51552: LD_INT 4
51554: PUSH
51555: EMPTY
51556: LIST
51557: LIST
51558: PUSH
51559: LD_INT 1
51561: NEG
51562: PUSH
51563: LD_INT 3
51565: PUSH
51566: EMPTY
51567: LIST
51568: LIST
51569: PUSH
51570: EMPTY
51571: LIST
51572: LIST
51573: LIST
51574: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
51575: LD_ADDR_VAR 0 27
51579: PUSH
51580: LD_INT 3
51582: NEG
51583: PUSH
51584: LD_INT 0
51586: PUSH
51587: EMPTY
51588: LIST
51589: LIST
51590: PUSH
51591: LD_INT 3
51593: NEG
51594: PUSH
51595: LD_INT 1
51597: PUSH
51598: EMPTY
51599: LIST
51600: LIST
51601: PUSH
51602: LD_INT 4
51604: NEG
51605: PUSH
51606: LD_INT 1
51608: NEG
51609: PUSH
51610: EMPTY
51611: LIST
51612: LIST
51613: PUSH
51614: EMPTY
51615: LIST
51616: LIST
51617: LIST
51618: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
51619: LD_ADDR_VAR 0 28
51623: PUSH
51624: LD_INT 3
51626: NEG
51627: PUSH
51628: LD_INT 3
51630: NEG
51631: PUSH
51632: EMPTY
51633: LIST
51634: LIST
51635: PUSH
51636: LD_INT 3
51638: NEG
51639: PUSH
51640: LD_INT 4
51642: NEG
51643: PUSH
51644: EMPTY
51645: LIST
51646: LIST
51647: PUSH
51648: LD_INT 4
51650: NEG
51651: PUSH
51652: LD_INT 3
51654: NEG
51655: PUSH
51656: EMPTY
51657: LIST
51658: LIST
51659: PUSH
51660: EMPTY
51661: LIST
51662: LIST
51663: LIST
51664: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
51665: LD_ADDR_VAR 0 29
51669: PUSH
51670: LD_INT 1
51672: NEG
51673: PUSH
51674: LD_INT 3
51676: NEG
51677: PUSH
51678: EMPTY
51679: LIST
51680: LIST
51681: PUSH
51682: LD_INT 0
51684: PUSH
51685: LD_INT 3
51687: NEG
51688: PUSH
51689: EMPTY
51690: LIST
51691: LIST
51692: PUSH
51693: LD_INT 1
51695: PUSH
51696: LD_INT 2
51698: NEG
51699: PUSH
51700: EMPTY
51701: LIST
51702: LIST
51703: PUSH
51704: LD_INT 1
51706: NEG
51707: PUSH
51708: LD_INT 4
51710: NEG
51711: PUSH
51712: EMPTY
51713: LIST
51714: LIST
51715: PUSH
51716: LD_INT 0
51718: PUSH
51719: LD_INT 4
51721: NEG
51722: PUSH
51723: EMPTY
51724: LIST
51725: LIST
51726: PUSH
51727: LD_INT 1
51729: PUSH
51730: LD_INT 3
51732: NEG
51733: PUSH
51734: EMPTY
51735: LIST
51736: LIST
51737: PUSH
51738: LD_INT 1
51740: NEG
51741: PUSH
51742: LD_INT 5
51744: NEG
51745: PUSH
51746: EMPTY
51747: LIST
51748: LIST
51749: PUSH
51750: LD_INT 0
51752: PUSH
51753: LD_INT 5
51755: NEG
51756: PUSH
51757: EMPTY
51758: LIST
51759: LIST
51760: PUSH
51761: LD_INT 1
51763: PUSH
51764: LD_INT 4
51766: NEG
51767: PUSH
51768: EMPTY
51769: LIST
51770: LIST
51771: PUSH
51772: LD_INT 1
51774: NEG
51775: PUSH
51776: LD_INT 6
51778: NEG
51779: PUSH
51780: EMPTY
51781: LIST
51782: LIST
51783: PUSH
51784: LD_INT 0
51786: PUSH
51787: LD_INT 6
51789: NEG
51790: PUSH
51791: EMPTY
51792: LIST
51793: LIST
51794: PUSH
51795: LD_INT 1
51797: PUSH
51798: LD_INT 5
51800: NEG
51801: PUSH
51802: EMPTY
51803: LIST
51804: LIST
51805: PUSH
51806: EMPTY
51807: LIST
51808: LIST
51809: LIST
51810: LIST
51811: LIST
51812: LIST
51813: LIST
51814: LIST
51815: LIST
51816: LIST
51817: LIST
51818: LIST
51819: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
51820: LD_ADDR_VAR 0 30
51824: PUSH
51825: LD_INT 2
51827: PUSH
51828: LD_INT 1
51830: NEG
51831: PUSH
51832: EMPTY
51833: LIST
51834: LIST
51835: PUSH
51836: LD_INT 3
51838: PUSH
51839: LD_INT 0
51841: PUSH
51842: EMPTY
51843: LIST
51844: LIST
51845: PUSH
51846: LD_INT 3
51848: PUSH
51849: LD_INT 1
51851: PUSH
51852: EMPTY
51853: LIST
51854: LIST
51855: PUSH
51856: LD_INT 3
51858: PUSH
51859: LD_INT 1
51861: NEG
51862: PUSH
51863: EMPTY
51864: LIST
51865: LIST
51866: PUSH
51867: LD_INT 4
51869: PUSH
51870: LD_INT 0
51872: PUSH
51873: EMPTY
51874: LIST
51875: LIST
51876: PUSH
51877: LD_INT 4
51879: PUSH
51880: LD_INT 1
51882: PUSH
51883: EMPTY
51884: LIST
51885: LIST
51886: PUSH
51887: LD_INT 4
51889: PUSH
51890: LD_INT 1
51892: NEG
51893: PUSH
51894: EMPTY
51895: LIST
51896: LIST
51897: PUSH
51898: LD_INT 5
51900: PUSH
51901: LD_INT 0
51903: PUSH
51904: EMPTY
51905: LIST
51906: LIST
51907: PUSH
51908: LD_INT 5
51910: PUSH
51911: LD_INT 1
51913: PUSH
51914: EMPTY
51915: LIST
51916: LIST
51917: PUSH
51918: LD_INT 5
51920: PUSH
51921: LD_INT 1
51923: NEG
51924: PUSH
51925: EMPTY
51926: LIST
51927: LIST
51928: PUSH
51929: LD_INT 6
51931: PUSH
51932: LD_INT 0
51934: PUSH
51935: EMPTY
51936: LIST
51937: LIST
51938: PUSH
51939: LD_INT 6
51941: PUSH
51942: LD_INT 1
51944: PUSH
51945: EMPTY
51946: LIST
51947: LIST
51948: PUSH
51949: EMPTY
51950: LIST
51951: LIST
51952: LIST
51953: LIST
51954: LIST
51955: LIST
51956: LIST
51957: LIST
51958: LIST
51959: LIST
51960: LIST
51961: LIST
51962: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
51963: LD_ADDR_VAR 0 31
51967: PUSH
51968: LD_INT 3
51970: PUSH
51971: LD_INT 2
51973: PUSH
51974: EMPTY
51975: LIST
51976: LIST
51977: PUSH
51978: LD_INT 3
51980: PUSH
51981: LD_INT 3
51983: PUSH
51984: EMPTY
51985: LIST
51986: LIST
51987: PUSH
51988: LD_INT 2
51990: PUSH
51991: LD_INT 3
51993: PUSH
51994: EMPTY
51995: LIST
51996: LIST
51997: PUSH
51998: LD_INT 4
52000: PUSH
52001: LD_INT 3
52003: PUSH
52004: EMPTY
52005: LIST
52006: LIST
52007: PUSH
52008: LD_INT 4
52010: PUSH
52011: LD_INT 4
52013: PUSH
52014: EMPTY
52015: LIST
52016: LIST
52017: PUSH
52018: LD_INT 3
52020: PUSH
52021: LD_INT 4
52023: PUSH
52024: EMPTY
52025: LIST
52026: LIST
52027: PUSH
52028: LD_INT 5
52030: PUSH
52031: LD_INT 4
52033: PUSH
52034: EMPTY
52035: LIST
52036: LIST
52037: PUSH
52038: LD_INT 5
52040: PUSH
52041: LD_INT 5
52043: PUSH
52044: EMPTY
52045: LIST
52046: LIST
52047: PUSH
52048: LD_INT 4
52050: PUSH
52051: LD_INT 5
52053: PUSH
52054: EMPTY
52055: LIST
52056: LIST
52057: PUSH
52058: LD_INT 6
52060: PUSH
52061: LD_INT 5
52063: PUSH
52064: EMPTY
52065: LIST
52066: LIST
52067: PUSH
52068: LD_INT 6
52070: PUSH
52071: LD_INT 6
52073: PUSH
52074: EMPTY
52075: LIST
52076: LIST
52077: PUSH
52078: LD_INT 5
52080: PUSH
52081: LD_INT 6
52083: PUSH
52084: EMPTY
52085: LIST
52086: LIST
52087: PUSH
52088: EMPTY
52089: LIST
52090: LIST
52091: LIST
52092: LIST
52093: LIST
52094: LIST
52095: LIST
52096: LIST
52097: LIST
52098: LIST
52099: LIST
52100: LIST
52101: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
52102: LD_ADDR_VAR 0 32
52106: PUSH
52107: LD_INT 1
52109: PUSH
52110: LD_INT 3
52112: PUSH
52113: EMPTY
52114: LIST
52115: LIST
52116: PUSH
52117: LD_INT 0
52119: PUSH
52120: LD_INT 3
52122: PUSH
52123: EMPTY
52124: LIST
52125: LIST
52126: PUSH
52127: LD_INT 1
52129: NEG
52130: PUSH
52131: LD_INT 2
52133: PUSH
52134: EMPTY
52135: LIST
52136: LIST
52137: PUSH
52138: LD_INT 1
52140: PUSH
52141: LD_INT 4
52143: PUSH
52144: EMPTY
52145: LIST
52146: LIST
52147: PUSH
52148: LD_INT 0
52150: PUSH
52151: LD_INT 4
52153: PUSH
52154: EMPTY
52155: LIST
52156: LIST
52157: PUSH
52158: LD_INT 1
52160: NEG
52161: PUSH
52162: LD_INT 3
52164: PUSH
52165: EMPTY
52166: LIST
52167: LIST
52168: PUSH
52169: LD_INT 1
52171: PUSH
52172: LD_INT 5
52174: PUSH
52175: EMPTY
52176: LIST
52177: LIST
52178: PUSH
52179: LD_INT 0
52181: PUSH
52182: LD_INT 5
52184: PUSH
52185: EMPTY
52186: LIST
52187: LIST
52188: PUSH
52189: LD_INT 1
52191: NEG
52192: PUSH
52193: LD_INT 4
52195: PUSH
52196: EMPTY
52197: LIST
52198: LIST
52199: PUSH
52200: LD_INT 1
52202: PUSH
52203: LD_INT 6
52205: PUSH
52206: EMPTY
52207: LIST
52208: LIST
52209: PUSH
52210: LD_INT 0
52212: PUSH
52213: LD_INT 6
52215: PUSH
52216: EMPTY
52217: LIST
52218: LIST
52219: PUSH
52220: LD_INT 1
52222: NEG
52223: PUSH
52224: LD_INT 5
52226: PUSH
52227: EMPTY
52228: LIST
52229: LIST
52230: PUSH
52231: EMPTY
52232: LIST
52233: LIST
52234: LIST
52235: LIST
52236: LIST
52237: LIST
52238: LIST
52239: LIST
52240: LIST
52241: LIST
52242: LIST
52243: LIST
52244: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
52245: LD_ADDR_VAR 0 33
52249: PUSH
52250: LD_INT 2
52252: NEG
52253: PUSH
52254: LD_INT 1
52256: PUSH
52257: EMPTY
52258: LIST
52259: LIST
52260: PUSH
52261: LD_INT 3
52263: NEG
52264: PUSH
52265: LD_INT 0
52267: PUSH
52268: EMPTY
52269: LIST
52270: LIST
52271: PUSH
52272: LD_INT 3
52274: NEG
52275: PUSH
52276: LD_INT 1
52278: NEG
52279: PUSH
52280: EMPTY
52281: LIST
52282: LIST
52283: PUSH
52284: LD_INT 3
52286: NEG
52287: PUSH
52288: LD_INT 1
52290: PUSH
52291: EMPTY
52292: LIST
52293: LIST
52294: PUSH
52295: LD_INT 4
52297: NEG
52298: PUSH
52299: LD_INT 0
52301: PUSH
52302: EMPTY
52303: LIST
52304: LIST
52305: PUSH
52306: LD_INT 4
52308: NEG
52309: PUSH
52310: LD_INT 1
52312: NEG
52313: PUSH
52314: EMPTY
52315: LIST
52316: LIST
52317: PUSH
52318: LD_INT 4
52320: NEG
52321: PUSH
52322: LD_INT 1
52324: PUSH
52325: EMPTY
52326: LIST
52327: LIST
52328: PUSH
52329: LD_INT 5
52331: NEG
52332: PUSH
52333: LD_INT 0
52335: PUSH
52336: EMPTY
52337: LIST
52338: LIST
52339: PUSH
52340: LD_INT 5
52342: NEG
52343: PUSH
52344: LD_INT 1
52346: NEG
52347: PUSH
52348: EMPTY
52349: LIST
52350: LIST
52351: PUSH
52352: LD_INT 5
52354: NEG
52355: PUSH
52356: LD_INT 1
52358: PUSH
52359: EMPTY
52360: LIST
52361: LIST
52362: PUSH
52363: LD_INT 6
52365: NEG
52366: PUSH
52367: LD_INT 0
52369: PUSH
52370: EMPTY
52371: LIST
52372: LIST
52373: PUSH
52374: LD_INT 6
52376: NEG
52377: PUSH
52378: LD_INT 1
52380: NEG
52381: PUSH
52382: EMPTY
52383: LIST
52384: LIST
52385: PUSH
52386: EMPTY
52387: LIST
52388: LIST
52389: LIST
52390: LIST
52391: LIST
52392: LIST
52393: LIST
52394: LIST
52395: LIST
52396: LIST
52397: LIST
52398: LIST
52399: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
52400: LD_ADDR_VAR 0 34
52404: PUSH
52405: LD_INT 2
52407: NEG
52408: PUSH
52409: LD_INT 3
52411: NEG
52412: PUSH
52413: EMPTY
52414: LIST
52415: LIST
52416: PUSH
52417: LD_INT 3
52419: NEG
52420: PUSH
52421: LD_INT 2
52423: NEG
52424: PUSH
52425: EMPTY
52426: LIST
52427: LIST
52428: PUSH
52429: LD_INT 3
52431: NEG
52432: PUSH
52433: LD_INT 3
52435: NEG
52436: PUSH
52437: EMPTY
52438: LIST
52439: LIST
52440: PUSH
52441: LD_INT 3
52443: NEG
52444: PUSH
52445: LD_INT 4
52447: NEG
52448: PUSH
52449: EMPTY
52450: LIST
52451: LIST
52452: PUSH
52453: LD_INT 4
52455: NEG
52456: PUSH
52457: LD_INT 3
52459: NEG
52460: PUSH
52461: EMPTY
52462: LIST
52463: LIST
52464: PUSH
52465: LD_INT 4
52467: NEG
52468: PUSH
52469: LD_INT 4
52471: NEG
52472: PUSH
52473: EMPTY
52474: LIST
52475: LIST
52476: PUSH
52477: LD_INT 4
52479: NEG
52480: PUSH
52481: LD_INT 5
52483: NEG
52484: PUSH
52485: EMPTY
52486: LIST
52487: LIST
52488: PUSH
52489: LD_INT 5
52491: NEG
52492: PUSH
52493: LD_INT 4
52495: NEG
52496: PUSH
52497: EMPTY
52498: LIST
52499: LIST
52500: PUSH
52501: LD_INT 5
52503: NEG
52504: PUSH
52505: LD_INT 5
52507: NEG
52508: PUSH
52509: EMPTY
52510: LIST
52511: LIST
52512: PUSH
52513: LD_INT 5
52515: NEG
52516: PUSH
52517: LD_INT 6
52519: NEG
52520: PUSH
52521: EMPTY
52522: LIST
52523: LIST
52524: PUSH
52525: LD_INT 6
52527: NEG
52528: PUSH
52529: LD_INT 5
52531: NEG
52532: PUSH
52533: EMPTY
52534: LIST
52535: LIST
52536: PUSH
52537: LD_INT 6
52539: NEG
52540: PUSH
52541: LD_INT 6
52543: NEG
52544: PUSH
52545: EMPTY
52546: LIST
52547: LIST
52548: PUSH
52549: EMPTY
52550: LIST
52551: LIST
52552: LIST
52553: LIST
52554: LIST
52555: LIST
52556: LIST
52557: LIST
52558: LIST
52559: LIST
52560: LIST
52561: LIST
52562: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
52563: LD_ADDR_VAR 0 41
52567: PUSH
52568: LD_INT 0
52570: PUSH
52571: LD_INT 2
52573: NEG
52574: PUSH
52575: EMPTY
52576: LIST
52577: LIST
52578: PUSH
52579: LD_INT 1
52581: NEG
52582: PUSH
52583: LD_INT 3
52585: NEG
52586: PUSH
52587: EMPTY
52588: LIST
52589: LIST
52590: PUSH
52591: LD_INT 1
52593: PUSH
52594: LD_INT 2
52596: NEG
52597: PUSH
52598: EMPTY
52599: LIST
52600: LIST
52601: PUSH
52602: EMPTY
52603: LIST
52604: LIST
52605: LIST
52606: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
52607: LD_ADDR_VAR 0 42
52611: PUSH
52612: LD_INT 2
52614: PUSH
52615: LD_INT 0
52617: PUSH
52618: EMPTY
52619: LIST
52620: LIST
52621: PUSH
52622: LD_INT 2
52624: PUSH
52625: LD_INT 1
52627: NEG
52628: PUSH
52629: EMPTY
52630: LIST
52631: LIST
52632: PUSH
52633: LD_INT 3
52635: PUSH
52636: LD_INT 1
52638: PUSH
52639: EMPTY
52640: LIST
52641: LIST
52642: PUSH
52643: EMPTY
52644: LIST
52645: LIST
52646: LIST
52647: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
52648: LD_ADDR_VAR 0 43
52652: PUSH
52653: LD_INT 2
52655: PUSH
52656: LD_INT 2
52658: PUSH
52659: EMPTY
52660: LIST
52661: LIST
52662: PUSH
52663: LD_INT 3
52665: PUSH
52666: LD_INT 2
52668: PUSH
52669: EMPTY
52670: LIST
52671: LIST
52672: PUSH
52673: LD_INT 2
52675: PUSH
52676: LD_INT 3
52678: PUSH
52679: EMPTY
52680: LIST
52681: LIST
52682: PUSH
52683: EMPTY
52684: LIST
52685: LIST
52686: LIST
52687: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
52688: LD_ADDR_VAR 0 44
52692: PUSH
52693: LD_INT 0
52695: PUSH
52696: LD_INT 2
52698: PUSH
52699: EMPTY
52700: LIST
52701: LIST
52702: PUSH
52703: LD_INT 1
52705: PUSH
52706: LD_INT 3
52708: PUSH
52709: EMPTY
52710: LIST
52711: LIST
52712: PUSH
52713: LD_INT 1
52715: NEG
52716: PUSH
52717: LD_INT 2
52719: PUSH
52720: EMPTY
52721: LIST
52722: LIST
52723: PUSH
52724: EMPTY
52725: LIST
52726: LIST
52727: LIST
52728: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52729: LD_ADDR_VAR 0 45
52733: PUSH
52734: LD_INT 2
52736: NEG
52737: PUSH
52738: LD_INT 0
52740: PUSH
52741: EMPTY
52742: LIST
52743: LIST
52744: PUSH
52745: LD_INT 2
52747: NEG
52748: PUSH
52749: LD_INT 1
52751: PUSH
52752: EMPTY
52753: LIST
52754: LIST
52755: PUSH
52756: LD_INT 3
52758: NEG
52759: PUSH
52760: LD_INT 1
52762: NEG
52763: PUSH
52764: EMPTY
52765: LIST
52766: LIST
52767: PUSH
52768: EMPTY
52769: LIST
52770: LIST
52771: LIST
52772: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
52773: LD_ADDR_VAR 0 46
52777: PUSH
52778: LD_INT 2
52780: NEG
52781: PUSH
52782: LD_INT 2
52784: NEG
52785: PUSH
52786: EMPTY
52787: LIST
52788: LIST
52789: PUSH
52790: LD_INT 2
52792: NEG
52793: PUSH
52794: LD_INT 3
52796: NEG
52797: PUSH
52798: EMPTY
52799: LIST
52800: LIST
52801: PUSH
52802: LD_INT 3
52804: NEG
52805: PUSH
52806: LD_INT 2
52808: NEG
52809: PUSH
52810: EMPTY
52811: LIST
52812: LIST
52813: PUSH
52814: EMPTY
52815: LIST
52816: LIST
52817: LIST
52818: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
52819: LD_ADDR_VAR 0 47
52823: PUSH
52824: LD_INT 2
52826: NEG
52827: PUSH
52828: LD_INT 3
52830: NEG
52831: PUSH
52832: EMPTY
52833: LIST
52834: LIST
52835: PUSH
52836: LD_INT 1
52838: NEG
52839: PUSH
52840: LD_INT 3
52842: NEG
52843: PUSH
52844: EMPTY
52845: LIST
52846: LIST
52847: PUSH
52848: EMPTY
52849: LIST
52850: LIST
52851: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
52852: LD_ADDR_VAR 0 48
52856: PUSH
52857: LD_INT 1
52859: PUSH
52860: LD_INT 2
52862: NEG
52863: PUSH
52864: EMPTY
52865: LIST
52866: LIST
52867: PUSH
52868: LD_INT 2
52870: PUSH
52871: LD_INT 1
52873: NEG
52874: PUSH
52875: EMPTY
52876: LIST
52877: LIST
52878: PUSH
52879: EMPTY
52880: LIST
52881: LIST
52882: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
52883: LD_ADDR_VAR 0 49
52887: PUSH
52888: LD_INT 3
52890: PUSH
52891: LD_INT 1
52893: PUSH
52894: EMPTY
52895: LIST
52896: LIST
52897: PUSH
52898: LD_INT 3
52900: PUSH
52901: LD_INT 2
52903: PUSH
52904: EMPTY
52905: LIST
52906: LIST
52907: PUSH
52908: EMPTY
52909: LIST
52910: LIST
52911: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
52912: LD_ADDR_VAR 0 50
52916: PUSH
52917: LD_INT 2
52919: PUSH
52920: LD_INT 3
52922: PUSH
52923: EMPTY
52924: LIST
52925: LIST
52926: PUSH
52927: LD_INT 1
52929: PUSH
52930: LD_INT 3
52932: PUSH
52933: EMPTY
52934: LIST
52935: LIST
52936: PUSH
52937: EMPTY
52938: LIST
52939: LIST
52940: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
52941: LD_ADDR_VAR 0 51
52945: PUSH
52946: LD_INT 1
52948: NEG
52949: PUSH
52950: LD_INT 2
52952: PUSH
52953: EMPTY
52954: LIST
52955: LIST
52956: PUSH
52957: LD_INT 2
52959: NEG
52960: PUSH
52961: LD_INT 1
52963: PUSH
52964: EMPTY
52965: LIST
52966: LIST
52967: PUSH
52968: EMPTY
52969: LIST
52970: LIST
52971: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
52972: LD_ADDR_VAR 0 52
52976: PUSH
52977: LD_INT 3
52979: NEG
52980: PUSH
52981: LD_INT 1
52983: NEG
52984: PUSH
52985: EMPTY
52986: LIST
52987: LIST
52988: PUSH
52989: LD_INT 3
52991: NEG
52992: PUSH
52993: LD_INT 2
52995: NEG
52996: PUSH
52997: EMPTY
52998: LIST
52999: LIST
53000: PUSH
53001: EMPTY
53002: LIST
53003: LIST
53004: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53005: LD_ADDR_VAR 0 53
53009: PUSH
53010: LD_INT 1
53012: NEG
53013: PUSH
53014: LD_INT 3
53016: NEG
53017: PUSH
53018: EMPTY
53019: LIST
53020: LIST
53021: PUSH
53022: LD_INT 0
53024: PUSH
53025: LD_INT 3
53027: NEG
53028: PUSH
53029: EMPTY
53030: LIST
53031: LIST
53032: PUSH
53033: LD_INT 1
53035: PUSH
53036: LD_INT 2
53038: NEG
53039: PUSH
53040: EMPTY
53041: LIST
53042: LIST
53043: PUSH
53044: EMPTY
53045: LIST
53046: LIST
53047: LIST
53048: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53049: LD_ADDR_VAR 0 54
53053: PUSH
53054: LD_INT 2
53056: PUSH
53057: LD_INT 1
53059: NEG
53060: PUSH
53061: EMPTY
53062: LIST
53063: LIST
53064: PUSH
53065: LD_INT 3
53067: PUSH
53068: LD_INT 0
53070: PUSH
53071: EMPTY
53072: LIST
53073: LIST
53074: PUSH
53075: LD_INT 3
53077: PUSH
53078: LD_INT 1
53080: PUSH
53081: EMPTY
53082: LIST
53083: LIST
53084: PUSH
53085: EMPTY
53086: LIST
53087: LIST
53088: LIST
53089: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53090: LD_ADDR_VAR 0 55
53094: PUSH
53095: LD_INT 3
53097: PUSH
53098: LD_INT 2
53100: PUSH
53101: EMPTY
53102: LIST
53103: LIST
53104: PUSH
53105: LD_INT 3
53107: PUSH
53108: LD_INT 3
53110: PUSH
53111: EMPTY
53112: LIST
53113: LIST
53114: PUSH
53115: LD_INT 2
53117: PUSH
53118: LD_INT 3
53120: PUSH
53121: EMPTY
53122: LIST
53123: LIST
53124: PUSH
53125: EMPTY
53126: LIST
53127: LIST
53128: LIST
53129: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53130: LD_ADDR_VAR 0 56
53134: PUSH
53135: LD_INT 1
53137: PUSH
53138: LD_INT 3
53140: PUSH
53141: EMPTY
53142: LIST
53143: LIST
53144: PUSH
53145: LD_INT 0
53147: PUSH
53148: LD_INT 3
53150: PUSH
53151: EMPTY
53152: LIST
53153: LIST
53154: PUSH
53155: LD_INT 1
53157: NEG
53158: PUSH
53159: LD_INT 2
53161: PUSH
53162: EMPTY
53163: LIST
53164: LIST
53165: PUSH
53166: EMPTY
53167: LIST
53168: LIST
53169: LIST
53170: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53171: LD_ADDR_VAR 0 57
53175: PUSH
53176: LD_INT 2
53178: NEG
53179: PUSH
53180: LD_INT 1
53182: PUSH
53183: EMPTY
53184: LIST
53185: LIST
53186: PUSH
53187: LD_INT 3
53189: NEG
53190: PUSH
53191: LD_INT 0
53193: PUSH
53194: EMPTY
53195: LIST
53196: LIST
53197: PUSH
53198: LD_INT 3
53200: NEG
53201: PUSH
53202: LD_INT 1
53204: NEG
53205: PUSH
53206: EMPTY
53207: LIST
53208: LIST
53209: PUSH
53210: EMPTY
53211: LIST
53212: LIST
53213: LIST
53214: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53215: LD_ADDR_VAR 0 58
53219: PUSH
53220: LD_INT 2
53222: NEG
53223: PUSH
53224: LD_INT 3
53226: NEG
53227: PUSH
53228: EMPTY
53229: LIST
53230: LIST
53231: PUSH
53232: LD_INT 3
53234: NEG
53235: PUSH
53236: LD_INT 2
53238: NEG
53239: PUSH
53240: EMPTY
53241: LIST
53242: LIST
53243: PUSH
53244: LD_INT 3
53246: NEG
53247: PUSH
53248: LD_INT 3
53250: NEG
53251: PUSH
53252: EMPTY
53253: LIST
53254: LIST
53255: PUSH
53256: EMPTY
53257: LIST
53258: LIST
53259: LIST
53260: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
53261: LD_ADDR_VAR 0 59
53265: PUSH
53266: LD_INT 1
53268: NEG
53269: PUSH
53270: LD_INT 2
53272: NEG
53273: PUSH
53274: EMPTY
53275: LIST
53276: LIST
53277: PUSH
53278: LD_INT 0
53280: PUSH
53281: LD_INT 2
53283: NEG
53284: PUSH
53285: EMPTY
53286: LIST
53287: LIST
53288: PUSH
53289: LD_INT 1
53291: PUSH
53292: LD_INT 1
53294: NEG
53295: PUSH
53296: EMPTY
53297: LIST
53298: LIST
53299: PUSH
53300: EMPTY
53301: LIST
53302: LIST
53303: LIST
53304: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
53305: LD_ADDR_VAR 0 60
53309: PUSH
53310: LD_INT 1
53312: PUSH
53313: LD_INT 1
53315: NEG
53316: PUSH
53317: EMPTY
53318: LIST
53319: LIST
53320: PUSH
53321: LD_INT 2
53323: PUSH
53324: LD_INT 0
53326: PUSH
53327: EMPTY
53328: LIST
53329: LIST
53330: PUSH
53331: LD_INT 2
53333: PUSH
53334: LD_INT 1
53336: PUSH
53337: EMPTY
53338: LIST
53339: LIST
53340: PUSH
53341: EMPTY
53342: LIST
53343: LIST
53344: LIST
53345: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
53346: LD_ADDR_VAR 0 61
53350: PUSH
53351: LD_INT 2
53353: PUSH
53354: LD_INT 1
53356: PUSH
53357: EMPTY
53358: LIST
53359: LIST
53360: PUSH
53361: LD_INT 2
53363: PUSH
53364: LD_INT 2
53366: PUSH
53367: EMPTY
53368: LIST
53369: LIST
53370: PUSH
53371: LD_INT 1
53373: PUSH
53374: LD_INT 2
53376: PUSH
53377: EMPTY
53378: LIST
53379: LIST
53380: PUSH
53381: EMPTY
53382: LIST
53383: LIST
53384: LIST
53385: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
53386: LD_ADDR_VAR 0 62
53390: PUSH
53391: LD_INT 1
53393: PUSH
53394: LD_INT 2
53396: PUSH
53397: EMPTY
53398: LIST
53399: LIST
53400: PUSH
53401: LD_INT 0
53403: PUSH
53404: LD_INT 2
53406: PUSH
53407: EMPTY
53408: LIST
53409: LIST
53410: PUSH
53411: LD_INT 1
53413: NEG
53414: PUSH
53415: LD_INT 1
53417: PUSH
53418: EMPTY
53419: LIST
53420: LIST
53421: PUSH
53422: EMPTY
53423: LIST
53424: LIST
53425: LIST
53426: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
53427: LD_ADDR_VAR 0 63
53431: PUSH
53432: LD_INT 1
53434: NEG
53435: PUSH
53436: LD_INT 1
53438: PUSH
53439: EMPTY
53440: LIST
53441: LIST
53442: PUSH
53443: LD_INT 2
53445: NEG
53446: PUSH
53447: LD_INT 0
53449: PUSH
53450: EMPTY
53451: LIST
53452: LIST
53453: PUSH
53454: LD_INT 2
53456: NEG
53457: PUSH
53458: LD_INT 1
53460: NEG
53461: PUSH
53462: EMPTY
53463: LIST
53464: LIST
53465: PUSH
53466: EMPTY
53467: LIST
53468: LIST
53469: LIST
53470: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53471: LD_ADDR_VAR 0 64
53475: PUSH
53476: LD_INT 1
53478: NEG
53479: PUSH
53480: LD_INT 2
53482: NEG
53483: PUSH
53484: EMPTY
53485: LIST
53486: LIST
53487: PUSH
53488: LD_INT 2
53490: NEG
53491: PUSH
53492: LD_INT 1
53494: NEG
53495: PUSH
53496: EMPTY
53497: LIST
53498: LIST
53499: PUSH
53500: LD_INT 2
53502: NEG
53503: PUSH
53504: LD_INT 2
53506: NEG
53507: PUSH
53508: EMPTY
53509: LIST
53510: LIST
53511: PUSH
53512: EMPTY
53513: LIST
53514: LIST
53515: LIST
53516: ST_TO_ADDR
// end ; 2 :
53517: GO 56783
53519: LD_INT 2
53521: DOUBLE
53522: EQUAL
53523: IFTRUE 53527
53525: GO 56782
53527: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
53528: LD_ADDR_VAR 0 29
53532: PUSH
53533: LD_INT 4
53535: PUSH
53536: LD_INT 0
53538: PUSH
53539: EMPTY
53540: LIST
53541: LIST
53542: PUSH
53543: LD_INT 4
53545: PUSH
53546: LD_INT 1
53548: NEG
53549: PUSH
53550: EMPTY
53551: LIST
53552: LIST
53553: PUSH
53554: LD_INT 5
53556: PUSH
53557: LD_INT 0
53559: PUSH
53560: EMPTY
53561: LIST
53562: LIST
53563: PUSH
53564: LD_INT 5
53566: PUSH
53567: LD_INT 1
53569: PUSH
53570: EMPTY
53571: LIST
53572: LIST
53573: PUSH
53574: LD_INT 4
53576: PUSH
53577: LD_INT 1
53579: PUSH
53580: EMPTY
53581: LIST
53582: LIST
53583: PUSH
53584: LD_INT 3
53586: PUSH
53587: LD_INT 0
53589: PUSH
53590: EMPTY
53591: LIST
53592: LIST
53593: PUSH
53594: LD_INT 3
53596: PUSH
53597: LD_INT 1
53599: NEG
53600: PUSH
53601: EMPTY
53602: LIST
53603: LIST
53604: PUSH
53605: LD_INT 3
53607: PUSH
53608: LD_INT 2
53610: NEG
53611: PUSH
53612: EMPTY
53613: LIST
53614: LIST
53615: PUSH
53616: LD_INT 5
53618: PUSH
53619: LD_INT 2
53621: PUSH
53622: EMPTY
53623: LIST
53624: LIST
53625: PUSH
53626: LD_INT 3
53628: PUSH
53629: LD_INT 3
53631: PUSH
53632: EMPTY
53633: LIST
53634: LIST
53635: PUSH
53636: LD_INT 3
53638: PUSH
53639: LD_INT 2
53641: PUSH
53642: EMPTY
53643: LIST
53644: LIST
53645: PUSH
53646: LD_INT 4
53648: PUSH
53649: LD_INT 3
53651: PUSH
53652: EMPTY
53653: LIST
53654: LIST
53655: PUSH
53656: LD_INT 4
53658: PUSH
53659: LD_INT 4
53661: PUSH
53662: EMPTY
53663: LIST
53664: LIST
53665: PUSH
53666: LD_INT 3
53668: PUSH
53669: LD_INT 4
53671: PUSH
53672: EMPTY
53673: LIST
53674: LIST
53675: PUSH
53676: LD_INT 2
53678: PUSH
53679: LD_INT 3
53681: PUSH
53682: EMPTY
53683: LIST
53684: LIST
53685: PUSH
53686: LD_INT 2
53688: PUSH
53689: LD_INT 2
53691: PUSH
53692: EMPTY
53693: LIST
53694: LIST
53695: PUSH
53696: LD_INT 4
53698: PUSH
53699: LD_INT 2
53701: PUSH
53702: EMPTY
53703: LIST
53704: LIST
53705: PUSH
53706: LD_INT 2
53708: PUSH
53709: LD_INT 4
53711: PUSH
53712: EMPTY
53713: LIST
53714: LIST
53715: PUSH
53716: LD_INT 0
53718: PUSH
53719: LD_INT 4
53721: PUSH
53722: EMPTY
53723: LIST
53724: LIST
53725: PUSH
53726: LD_INT 0
53728: PUSH
53729: LD_INT 3
53731: PUSH
53732: EMPTY
53733: LIST
53734: LIST
53735: PUSH
53736: LD_INT 1
53738: PUSH
53739: LD_INT 4
53741: PUSH
53742: EMPTY
53743: LIST
53744: LIST
53745: PUSH
53746: LD_INT 1
53748: PUSH
53749: LD_INT 5
53751: PUSH
53752: EMPTY
53753: LIST
53754: LIST
53755: PUSH
53756: LD_INT 0
53758: PUSH
53759: LD_INT 5
53761: PUSH
53762: EMPTY
53763: LIST
53764: LIST
53765: PUSH
53766: LD_INT 1
53768: NEG
53769: PUSH
53770: LD_INT 4
53772: PUSH
53773: EMPTY
53774: LIST
53775: LIST
53776: PUSH
53777: LD_INT 1
53779: NEG
53780: PUSH
53781: LD_INT 3
53783: PUSH
53784: EMPTY
53785: LIST
53786: LIST
53787: PUSH
53788: LD_INT 2
53790: PUSH
53791: LD_INT 5
53793: PUSH
53794: EMPTY
53795: LIST
53796: LIST
53797: PUSH
53798: LD_INT 2
53800: NEG
53801: PUSH
53802: LD_INT 3
53804: PUSH
53805: EMPTY
53806: LIST
53807: LIST
53808: PUSH
53809: LD_INT 3
53811: NEG
53812: PUSH
53813: LD_INT 0
53815: PUSH
53816: EMPTY
53817: LIST
53818: LIST
53819: PUSH
53820: LD_INT 3
53822: NEG
53823: PUSH
53824: LD_INT 1
53826: NEG
53827: PUSH
53828: EMPTY
53829: LIST
53830: LIST
53831: PUSH
53832: LD_INT 2
53834: NEG
53835: PUSH
53836: LD_INT 0
53838: PUSH
53839: EMPTY
53840: LIST
53841: LIST
53842: PUSH
53843: LD_INT 2
53845: NEG
53846: PUSH
53847: LD_INT 1
53849: PUSH
53850: EMPTY
53851: LIST
53852: LIST
53853: PUSH
53854: LD_INT 3
53856: NEG
53857: PUSH
53858: LD_INT 1
53860: PUSH
53861: EMPTY
53862: LIST
53863: LIST
53864: PUSH
53865: LD_INT 4
53867: NEG
53868: PUSH
53869: LD_INT 0
53871: PUSH
53872: EMPTY
53873: LIST
53874: LIST
53875: PUSH
53876: LD_INT 4
53878: NEG
53879: PUSH
53880: LD_INT 1
53882: NEG
53883: PUSH
53884: EMPTY
53885: LIST
53886: LIST
53887: PUSH
53888: LD_INT 4
53890: NEG
53891: PUSH
53892: LD_INT 2
53894: NEG
53895: PUSH
53896: EMPTY
53897: LIST
53898: LIST
53899: PUSH
53900: LD_INT 2
53902: NEG
53903: PUSH
53904: LD_INT 2
53906: PUSH
53907: EMPTY
53908: LIST
53909: LIST
53910: PUSH
53911: LD_INT 4
53913: NEG
53914: PUSH
53915: LD_INT 4
53917: NEG
53918: PUSH
53919: EMPTY
53920: LIST
53921: LIST
53922: PUSH
53923: LD_INT 4
53925: NEG
53926: PUSH
53927: LD_INT 5
53929: NEG
53930: PUSH
53931: EMPTY
53932: LIST
53933: LIST
53934: PUSH
53935: LD_INT 3
53937: NEG
53938: PUSH
53939: LD_INT 4
53941: NEG
53942: PUSH
53943: EMPTY
53944: LIST
53945: LIST
53946: PUSH
53947: LD_INT 3
53949: NEG
53950: PUSH
53951: LD_INT 3
53953: NEG
53954: PUSH
53955: EMPTY
53956: LIST
53957: LIST
53958: PUSH
53959: LD_INT 4
53961: NEG
53962: PUSH
53963: LD_INT 3
53965: NEG
53966: PUSH
53967: EMPTY
53968: LIST
53969: LIST
53970: PUSH
53971: LD_INT 5
53973: NEG
53974: PUSH
53975: LD_INT 4
53977: NEG
53978: PUSH
53979: EMPTY
53980: LIST
53981: LIST
53982: PUSH
53983: LD_INT 5
53985: NEG
53986: PUSH
53987: LD_INT 5
53989: NEG
53990: PUSH
53991: EMPTY
53992: LIST
53993: LIST
53994: PUSH
53995: LD_INT 3
53997: NEG
53998: PUSH
53999: LD_INT 5
54001: NEG
54002: PUSH
54003: EMPTY
54004: LIST
54005: LIST
54006: PUSH
54007: LD_INT 5
54009: NEG
54010: PUSH
54011: LD_INT 3
54013: NEG
54014: PUSH
54015: EMPTY
54016: LIST
54017: LIST
54018: PUSH
54019: EMPTY
54020: LIST
54021: LIST
54022: LIST
54023: LIST
54024: LIST
54025: LIST
54026: LIST
54027: LIST
54028: LIST
54029: LIST
54030: LIST
54031: LIST
54032: LIST
54033: LIST
54034: LIST
54035: LIST
54036: LIST
54037: LIST
54038: LIST
54039: LIST
54040: LIST
54041: LIST
54042: LIST
54043: LIST
54044: LIST
54045: LIST
54046: LIST
54047: LIST
54048: LIST
54049: LIST
54050: LIST
54051: LIST
54052: LIST
54053: LIST
54054: LIST
54055: LIST
54056: LIST
54057: LIST
54058: LIST
54059: LIST
54060: LIST
54061: LIST
54062: LIST
54063: LIST
54064: LIST
54065: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
54066: LD_ADDR_VAR 0 30
54070: PUSH
54071: LD_INT 4
54073: PUSH
54074: LD_INT 4
54076: PUSH
54077: EMPTY
54078: LIST
54079: LIST
54080: PUSH
54081: LD_INT 4
54083: PUSH
54084: LD_INT 3
54086: PUSH
54087: EMPTY
54088: LIST
54089: LIST
54090: PUSH
54091: LD_INT 5
54093: PUSH
54094: LD_INT 4
54096: PUSH
54097: EMPTY
54098: LIST
54099: LIST
54100: PUSH
54101: LD_INT 5
54103: PUSH
54104: LD_INT 5
54106: PUSH
54107: EMPTY
54108: LIST
54109: LIST
54110: PUSH
54111: LD_INT 4
54113: PUSH
54114: LD_INT 5
54116: PUSH
54117: EMPTY
54118: LIST
54119: LIST
54120: PUSH
54121: LD_INT 3
54123: PUSH
54124: LD_INT 4
54126: PUSH
54127: EMPTY
54128: LIST
54129: LIST
54130: PUSH
54131: LD_INT 3
54133: PUSH
54134: LD_INT 3
54136: PUSH
54137: EMPTY
54138: LIST
54139: LIST
54140: PUSH
54141: LD_INT 5
54143: PUSH
54144: LD_INT 3
54146: PUSH
54147: EMPTY
54148: LIST
54149: LIST
54150: PUSH
54151: LD_INT 3
54153: PUSH
54154: LD_INT 5
54156: PUSH
54157: EMPTY
54158: LIST
54159: LIST
54160: PUSH
54161: LD_INT 0
54163: PUSH
54164: LD_INT 3
54166: PUSH
54167: EMPTY
54168: LIST
54169: LIST
54170: PUSH
54171: LD_INT 0
54173: PUSH
54174: LD_INT 2
54176: PUSH
54177: EMPTY
54178: LIST
54179: LIST
54180: PUSH
54181: LD_INT 1
54183: PUSH
54184: LD_INT 3
54186: PUSH
54187: EMPTY
54188: LIST
54189: LIST
54190: PUSH
54191: LD_INT 1
54193: PUSH
54194: LD_INT 4
54196: PUSH
54197: EMPTY
54198: LIST
54199: LIST
54200: PUSH
54201: LD_INT 0
54203: PUSH
54204: LD_INT 4
54206: PUSH
54207: EMPTY
54208: LIST
54209: LIST
54210: PUSH
54211: LD_INT 1
54213: NEG
54214: PUSH
54215: LD_INT 3
54217: PUSH
54218: EMPTY
54219: LIST
54220: LIST
54221: PUSH
54222: LD_INT 1
54224: NEG
54225: PUSH
54226: LD_INT 2
54228: PUSH
54229: EMPTY
54230: LIST
54231: LIST
54232: PUSH
54233: LD_INT 2
54235: PUSH
54236: LD_INT 4
54238: PUSH
54239: EMPTY
54240: LIST
54241: LIST
54242: PUSH
54243: LD_INT 2
54245: NEG
54246: PUSH
54247: LD_INT 2
54249: PUSH
54250: EMPTY
54251: LIST
54252: LIST
54253: PUSH
54254: LD_INT 4
54256: NEG
54257: PUSH
54258: LD_INT 0
54260: PUSH
54261: EMPTY
54262: LIST
54263: LIST
54264: PUSH
54265: LD_INT 4
54267: NEG
54268: PUSH
54269: LD_INT 1
54271: NEG
54272: PUSH
54273: EMPTY
54274: LIST
54275: LIST
54276: PUSH
54277: LD_INT 3
54279: NEG
54280: PUSH
54281: LD_INT 0
54283: PUSH
54284: EMPTY
54285: LIST
54286: LIST
54287: PUSH
54288: LD_INT 3
54290: NEG
54291: PUSH
54292: LD_INT 1
54294: PUSH
54295: EMPTY
54296: LIST
54297: LIST
54298: PUSH
54299: LD_INT 4
54301: NEG
54302: PUSH
54303: LD_INT 1
54305: PUSH
54306: EMPTY
54307: LIST
54308: LIST
54309: PUSH
54310: LD_INT 5
54312: NEG
54313: PUSH
54314: LD_INT 0
54316: PUSH
54317: EMPTY
54318: LIST
54319: LIST
54320: PUSH
54321: LD_INT 5
54323: NEG
54324: PUSH
54325: LD_INT 1
54327: NEG
54328: PUSH
54329: EMPTY
54330: LIST
54331: LIST
54332: PUSH
54333: LD_INT 5
54335: NEG
54336: PUSH
54337: LD_INT 2
54339: NEG
54340: PUSH
54341: EMPTY
54342: LIST
54343: LIST
54344: PUSH
54345: LD_INT 3
54347: NEG
54348: PUSH
54349: LD_INT 2
54351: PUSH
54352: EMPTY
54353: LIST
54354: LIST
54355: PUSH
54356: LD_INT 3
54358: NEG
54359: PUSH
54360: LD_INT 3
54362: NEG
54363: PUSH
54364: EMPTY
54365: LIST
54366: LIST
54367: PUSH
54368: LD_INT 3
54370: NEG
54371: PUSH
54372: LD_INT 4
54374: NEG
54375: PUSH
54376: EMPTY
54377: LIST
54378: LIST
54379: PUSH
54380: LD_INT 2
54382: NEG
54383: PUSH
54384: LD_INT 3
54386: NEG
54387: PUSH
54388: EMPTY
54389: LIST
54390: LIST
54391: PUSH
54392: LD_INT 2
54394: NEG
54395: PUSH
54396: LD_INT 2
54398: NEG
54399: PUSH
54400: EMPTY
54401: LIST
54402: LIST
54403: PUSH
54404: LD_INT 3
54406: NEG
54407: PUSH
54408: LD_INT 2
54410: NEG
54411: PUSH
54412: EMPTY
54413: LIST
54414: LIST
54415: PUSH
54416: LD_INT 4
54418: NEG
54419: PUSH
54420: LD_INT 3
54422: NEG
54423: PUSH
54424: EMPTY
54425: LIST
54426: LIST
54427: PUSH
54428: LD_INT 4
54430: NEG
54431: PUSH
54432: LD_INT 4
54434: NEG
54435: PUSH
54436: EMPTY
54437: LIST
54438: LIST
54439: PUSH
54440: LD_INT 2
54442: NEG
54443: PUSH
54444: LD_INT 4
54446: NEG
54447: PUSH
54448: EMPTY
54449: LIST
54450: LIST
54451: PUSH
54452: LD_INT 4
54454: NEG
54455: PUSH
54456: LD_INT 2
54458: NEG
54459: PUSH
54460: EMPTY
54461: LIST
54462: LIST
54463: PUSH
54464: LD_INT 0
54466: PUSH
54467: LD_INT 4
54469: NEG
54470: PUSH
54471: EMPTY
54472: LIST
54473: LIST
54474: PUSH
54475: LD_INT 0
54477: PUSH
54478: LD_INT 5
54480: NEG
54481: PUSH
54482: EMPTY
54483: LIST
54484: LIST
54485: PUSH
54486: LD_INT 1
54488: PUSH
54489: LD_INT 4
54491: NEG
54492: PUSH
54493: EMPTY
54494: LIST
54495: LIST
54496: PUSH
54497: LD_INT 1
54499: PUSH
54500: LD_INT 3
54502: NEG
54503: PUSH
54504: EMPTY
54505: LIST
54506: LIST
54507: PUSH
54508: LD_INT 0
54510: PUSH
54511: LD_INT 3
54513: NEG
54514: PUSH
54515: EMPTY
54516: LIST
54517: LIST
54518: PUSH
54519: LD_INT 1
54521: NEG
54522: PUSH
54523: LD_INT 4
54525: NEG
54526: PUSH
54527: EMPTY
54528: LIST
54529: LIST
54530: PUSH
54531: LD_INT 1
54533: NEG
54534: PUSH
54535: LD_INT 5
54537: NEG
54538: PUSH
54539: EMPTY
54540: LIST
54541: LIST
54542: PUSH
54543: LD_INT 2
54545: PUSH
54546: LD_INT 3
54548: NEG
54549: PUSH
54550: EMPTY
54551: LIST
54552: LIST
54553: PUSH
54554: LD_INT 2
54556: NEG
54557: PUSH
54558: LD_INT 5
54560: NEG
54561: PUSH
54562: EMPTY
54563: LIST
54564: LIST
54565: PUSH
54566: EMPTY
54567: LIST
54568: LIST
54569: LIST
54570: LIST
54571: LIST
54572: LIST
54573: LIST
54574: LIST
54575: LIST
54576: LIST
54577: LIST
54578: LIST
54579: LIST
54580: LIST
54581: LIST
54582: LIST
54583: LIST
54584: LIST
54585: LIST
54586: LIST
54587: LIST
54588: LIST
54589: LIST
54590: LIST
54591: LIST
54592: LIST
54593: LIST
54594: LIST
54595: LIST
54596: LIST
54597: LIST
54598: LIST
54599: LIST
54600: LIST
54601: LIST
54602: LIST
54603: LIST
54604: LIST
54605: LIST
54606: LIST
54607: LIST
54608: LIST
54609: LIST
54610: LIST
54611: LIST
54612: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
54613: LD_ADDR_VAR 0 31
54617: PUSH
54618: LD_INT 0
54620: PUSH
54621: LD_INT 4
54623: PUSH
54624: EMPTY
54625: LIST
54626: LIST
54627: PUSH
54628: LD_INT 0
54630: PUSH
54631: LD_INT 3
54633: PUSH
54634: EMPTY
54635: LIST
54636: LIST
54637: PUSH
54638: LD_INT 1
54640: PUSH
54641: LD_INT 4
54643: PUSH
54644: EMPTY
54645: LIST
54646: LIST
54647: PUSH
54648: LD_INT 1
54650: PUSH
54651: LD_INT 5
54653: PUSH
54654: EMPTY
54655: LIST
54656: LIST
54657: PUSH
54658: LD_INT 0
54660: PUSH
54661: LD_INT 5
54663: PUSH
54664: EMPTY
54665: LIST
54666: LIST
54667: PUSH
54668: LD_INT 1
54670: NEG
54671: PUSH
54672: LD_INT 4
54674: PUSH
54675: EMPTY
54676: LIST
54677: LIST
54678: PUSH
54679: LD_INT 1
54681: NEG
54682: PUSH
54683: LD_INT 3
54685: PUSH
54686: EMPTY
54687: LIST
54688: LIST
54689: PUSH
54690: LD_INT 2
54692: PUSH
54693: LD_INT 5
54695: PUSH
54696: EMPTY
54697: LIST
54698: LIST
54699: PUSH
54700: LD_INT 2
54702: NEG
54703: PUSH
54704: LD_INT 3
54706: PUSH
54707: EMPTY
54708: LIST
54709: LIST
54710: PUSH
54711: LD_INT 3
54713: NEG
54714: PUSH
54715: LD_INT 0
54717: PUSH
54718: EMPTY
54719: LIST
54720: LIST
54721: PUSH
54722: LD_INT 3
54724: NEG
54725: PUSH
54726: LD_INT 1
54728: NEG
54729: PUSH
54730: EMPTY
54731: LIST
54732: LIST
54733: PUSH
54734: LD_INT 2
54736: NEG
54737: PUSH
54738: LD_INT 0
54740: PUSH
54741: EMPTY
54742: LIST
54743: LIST
54744: PUSH
54745: LD_INT 2
54747: NEG
54748: PUSH
54749: LD_INT 1
54751: PUSH
54752: EMPTY
54753: LIST
54754: LIST
54755: PUSH
54756: LD_INT 3
54758: NEG
54759: PUSH
54760: LD_INT 1
54762: PUSH
54763: EMPTY
54764: LIST
54765: LIST
54766: PUSH
54767: LD_INT 4
54769: NEG
54770: PUSH
54771: LD_INT 0
54773: PUSH
54774: EMPTY
54775: LIST
54776: LIST
54777: PUSH
54778: LD_INT 4
54780: NEG
54781: PUSH
54782: LD_INT 1
54784: NEG
54785: PUSH
54786: EMPTY
54787: LIST
54788: LIST
54789: PUSH
54790: LD_INT 4
54792: NEG
54793: PUSH
54794: LD_INT 2
54796: NEG
54797: PUSH
54798: EMPTY
54799: LIST
54800: LIST
54801: PUSH
54802: LD_INT 2
54804: NEG
54805: PUSH
54806: LD_INT 2
54808: PUSH
54809: EMPTY
54810: LIST
54811: LIST
54812: PUSH
54813: LD_INT 4
54815: NEG
54816: PUSH
54817: LD_INT 4
54819: NEG
54820: PUSH
54821: EMPTY
54822: LIST
54823: LIST
54824: PUSH
54825: LD_INT 4
54827: NEG
54828: PUSH
54829: LD_INT 5
54831: NEG
54832: PUSH
54833: EMPTY
54834: LIST
54835: LIST
54836: PUSH
54837: LD_INT 3
54839: NEG
54840: PUSH
54841: LD_INT 4
54843: NEG
54844: PUSH
54845: EMPTY
54846: LIST
54847: LIST
54848: PUSH
54849: LD_INT 3
54851: NEG
54852: PUSH
54853: LD_INT 3
54855: NEG
54856: PUSH
54857: EMPTY
54858: LIST
54859: LIST
54860: PUSH
54861: LD_INT 4
54863: NEG
54864: PUSH
54865: LD_INT 3
54867: NEG
54868: PUSH
54869: EMPTY
54870: LIST
54871: LIST
54872: PUSH
54873: LD_INT 5
54875: NEG
54876: PUSH
54877: LD_INT 4
54879: NEG
54880: PUSH
54881: EMPTY
54882: LIST
54883: LIST
54884: PUSH
54885: LD_INT 5
54887: NEG
54888: PUSH
54889: LD_INT 5
54891: NEG
54892: PUSH
54893: EMPTY
54894: LIST
54895: LIST
54896: PUSH
54897: LD_INT 3
54899: NEG
54900: PUSH
54901: LD_INT 5
54903: NEG
54904: PUSH
54905: EMPTY
54906: LIST
54907: LIST
54908: PUSH
54909: LD_INT 5
54911: NEG
54912: PUSH
54913: LD_INT 3
54915: NEG
54916: PUSH
54917: EMPTY
54918: LIST
54919: LIST
54920: PUSH
54921: LD_INT 0
54923: PUSH
54924: LD_INT 3
54926: NEG
54927: PUSH
54928: EMPTY
54929: LIST
54930: LIST
54931: PUSH
54932: LD_INT 0
54934: PUSH
54935: LD_INT 4
54937: NEG
54938: PUSH
54939: EMPTY
54940: LIST
54941: LIST
54942: PUSH
54943: LD_INT 1
54945: PUSH
54946: LD_INT 3
54948: NEG
54949: PUSH
54950: EMPTY
54951: LIST
54952: LIST
54953: PUSH
54954: LD_INT 1
54956: PUSH
54957: LD_INT 2
54959: NEG
54960: PUSH
54961: EMPTY
54962: LIST
54963: LIST
54964: PUSH
54965: LD_INT 0
54967: PUSH
54968: LD_INT 2
54970: NEG
54971: PUSH
54972: EMPTY
54973: LIST
54974: LIST
54975: PUSH
54976: LD_INT 1
54978: NEG
54979: PUSH
54980: LD_INT 3
54982: NEG
54983: PUSH
54984: EMPTY
54985: LIST
54986: LIST
54987: PUSH
54988: LD_INT 1
54990: NEG
54991: PUSH
54992: LD_INT 4
54994: NEG
54995: PUSH
54996: EMPTY
54997: LIST
54998: LIST
54999: PUSH
55000: LD_INT 2
55002: PUSH
55003: LD_INT 2
55005: NEG
55006: PUSH
55007: EMPTY
55008: LIST
55009: LIST
55010: PUSH
55011: LD_INT 2
55013: NEG
55014: PUSH
55015: LD_INT 4
55017: NEG
55018: PUSH
55019: EMPTY
55020: LIST
55021: LIST
55022: PUSH
55023: LD_INT 4
55025: PUSH
55026: LD_INT 0
55028: PUSH
55029: EMPTY
55030: LIST
55031: LIST
55032: PUSH
55033: LD_INT 4
55035: PUSH
55036: LD_INT 1
55038: NEG
55039: PUSH
55040: EMPTY
55041: LIST
55042: LIST
55043: PUSH
55044: LD_INT 5
55046: PUSH
55047: LD_INT 0
55049: PUSH
55050: EMPTY
55051: LIST
55052: LIST
55053: PUSH
55054: LD_INT 5
55056: PUSH
55057: LD_INT 1
55059: PUSH
55060: EMPTY
55061: LIST
55062: LIST
55063: PUSH
55064: LD_INT 4
55066: PUSH
55067: LD_INT 1
55069: PUSH
55070: EMPTY
55071: LIST
55072: LIST
55073: PUSH
55074: LD_INT 3
55076: PUSH
55077: LD_INT 0
55079: PUSH
55080: EMPTY
55081: LIST
55082: LIST
55083: PUSH
55084: LD_INT 3
55086: PUSH
55087: LD_INT 1
55089: NEG
55090: PUSH
55091: EMPTY
55092: LIST
55093: LIST
55094: PUSH
55095: LD_INT 3
55097: PUSH
55098: LD_INT 2
55100: NEG
55101: PUSH
55102: EMPTY
55103: LIST
55104: LIST
55105: PUSH
55106: LD_INT 5
55108: PUSH
55109: LD_INT 2
55111: PUSH
55112: EMPTY
55113: LIST
55114: LIST
55115: PUSH
55116: EMPTY
55117: LIST
55118: LIST
55119: LIST
55120: LIST
55121: LIST
55122: LIST
55123: LIST
55124: LIST
55125: LIST
55126: LIST
55127: LIST
55128: LIST
55129: LIST
55130: LIST
55131: LIST
55132: LIST
55133: LIST
55134: LIST
55135: LIST
55136: LIST
55137: LIST
55138: LIST
55139: LIST
55140: LIST
55141: LIST
55142: LIST
55143: LIST
55144: LIST
55145: LIST
55146: LIST
55147: LIST
55148: LIST
55149: LIST
55150: LIST
55151: LIST
55152: LIST
55153: LIST
55154: LIST
55155: LIST
55156: LIST
55157: LIST
55158: LIST
55159: LIST
55160: LIST
55161: LIST
55162: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
55163: LD_ADDR_VAR 0 32
55167: PUSH
55168: LD_INT 4
55170: NEG
55171: PUSH
55172: LD_INT 0
55174: PUSH
55175: EMPTY
55176: LIST
55177: LIST
55178: PUSH
55179: LD_INT 4
55181: NEG
55182: PUSH
55183: LD_INT 1
55185: NEG
55186: PUSH
55187: EMPTY
55188: LIST
55189: LIST
55190: PUSH
55191: LD_INT 3
55193: NEG
55194: PUSH
55195: LD_INT 0
55197: PUSH
55198: EMPTY
55199: LIST
55200: LIST
55201: PUSH
55202: LD_INT 3
55204: NEG
55205: PUSH
55206: LD_INT 1
55208: PUSH
55209: EMPTY
55210: LIST
55211: LIST
55212: PUSH
55213: LD_INT 4
55215: NEG
55216: PUSH
55217: LD_INT 1
55219: PUSH
55220: EMPTY
55221: LIST
55222: LIST
55223: PUSH
55224: LD_INT 5
55226: NEG
55227: PUSH
55228: LD_INT 0
55230: PUSH
55231: EMPTY
55232: LIST
55233: LIST
55234: PUSH
55235: LD_INT 5
55237: NEG
55238: PUSH
55239: LD_INT 1
55241: NEG
55242: PUSH
55243: EMPTY
55244: LIST
55245: LIST
55246: PUSH
55247: LD_INT 5
55249: NEG
55250: PUSH
55251: LD_INT 2
55253: NEG
55254: PUSH
55255: EMPTY
55256: LIST
55257: LIST
55258: PUSH
55259: LD_INT 3
55261: NEG
55262: PUSH
55263: LD_INT 2
55265: PUSH
55266: EMPTY
55267: LIST
55268: LIST
55269: PUSH
55270: LD_INT 3
55272: NEG
55273: PUSH
55274: LD_INT 3
55276: NEG
55277: PUSH
55278: EMPTY
55279: LIST
55280: LIST
55281: PUSH
55282: LD_INT 3
55284: NEG
55285: PUSH
55286: LD_INT 4
55288: NEG
55289: PUSH
55290: EMPTY
55291: LIST
55292: LIST
55293: PUSH
55294: LD_INT 2
55296: NEG
55297: PUSH
55298: LD_INT 3
55300: NEG
55301: PUSH
55302: EMPTY
55303: LIST
55304: LIST
55305: PUSH
55306: LD_INT 2
55308: NEG
55309: PUSH
55310: LD_INT 2
55312: NEG
55313: PUSH
55314: EMPTY
55315: LIST
55316: LIST
55317: PUSH
55318: LD_INT 3
55320: NEG
55321: PUSH
55322: LD_INT 2
55324: NEG
55325: PUSH
55326: EMPTY
55327: LIST
55328: LIST
55329: PUSH
55330: LD_INT 4
55332: NEG
55333: PUSH
55334: LD_INT 3
55336: NEG
55337: PUSH
55338: EMPTY
55339: LIST
55340: LIST
55341: PUSH
55342: LD_INT 4
55344: NEG
55345: PUSH
55346: LD_INT 4
55348: NEG
55349: PUSH
55350: EMPTY
55351: LIST
55352: LIST
55353: PUSH
55354: LD_INT 2
55356: NEG
55357: PUSH
55358: LD_INT 4
55360: NEG
55361: PUSH
55362: EMPTY
55363: LIST
55364: LIST
55365: PUSH
55366: LD_INT 4
55368: NEG
55369: PUSH
55370: LD_INT 2
55372: NEG
55373: PUSH
55374: EMPTY
55375: LIST
55376: LIST
55377: PUSH
55378: LD_INT 0
55380: PUSH
55381: LD_INT 4
55383: NEG
55384: PUSH
55385: EMPTY
55386: LIST
55387: LIST
55388: PUSH
55389: LD_INT 0
55391: PUSH
55392: LD_INT 5
55394: NEG
55395: PUSH
55396: EMPTY
55397: LIST
55398: LIST
55399: PUSH
55400: LD_INT 1
55402: PUSH
55403: LD_INT 4
55405: NEG
55406: PUSH
55407: EMPTY
55408: LIST
55409: LIST
55410: PUSH
55411: LD_INT 1
55413: PUSH
55414: LD_INT 3
55416: NEG
55417: PUSH
55418: EMPTY
55419: LIST
55420: LIST
55421: PUSH
55422: LD_INT 0
55424: PUSH
55425: LD_INT 3
55427: NEG
55428: PUSH
55429: EMPTY
55430: LIST
55431: LIST
55432: PUSH
55433: LD_INT 1
55435: NEG
55436: PUSH
55437: LD_INT 4
55439: NEG
55440: PUSH
55441: EMPTY
55442: LIST
55443: LIST
55444: PUSH
55445: LD_INT 1
55447: NEG
55448: PUSH
55449: LD_INT 5
55451: NEG
55452: PUSH
55453: EMPTY
55454: LIST
55455: LIST
55456: PUSH
55457: LD_INT 2
55459: PUSH
55460: LD_INT 3
55462: NEG
55463: PUSH
55464: EMPTY
55465: LIST
55466: LIST
55467: PUSH
55468: LD_INT 2
55470: NEG
55471: PUSH
55472: LD_INT 5
55474: NEG
55475: PUSH
55476: EMPTY
55477: LIST
55478: LIST
55479: PUSH
55480: LD_INT 3
55482: PUSH
55483: LD_INT 0
55485: PUSH
55486: EMPTY
55487: LIST
55488: LIST
55489: PUSH
55490: LD_INT 3
55492: PUSH
55493: LD_INT 1
55495: NEG
55496: PUSH
55497: EMPTY
55498: LIST
55499: LIST
55500: PUSH
55501: LD_INT 4
55503: PUSH
55504: LD_INT 0
55506: PUSH
55507: EMPTY
55508: LIST
55509: LIST
55510: PUSH
55511: LD_INT 4
55513: PUSH
55514: LD_INT 1
55516: PUSH
55517: EMPTY
55518: LIST
55519: LIST
55520: PUSH
55521: LD_INT 3
55523: PUSH
55524: LD_INT 1
55526: PUSH
55527: EMPTY
55528: LIST
55529: LIST
55530: PUSH
55531: LD_INT 2
55533: PUSH
55534: LD_INT 0
55536: PUSH
55537: EMPTY
55538: LIST
55539: LIST
55540: PUSH
55541: LD_INT 2
55543: PUSH
55544: LD_INT 1
55546: NEG
55547: PUSH
55548: EMPTY
55549: LIST
55550: LIST
55551: PUSH
55552: LD_INT 2
55554: PUSH
55555: LD_INT 2
55557: NEG
55558: PUSH
55559: EMPTY
55560: LIST
55561: LIST
55562: PUSH
55563: LD_INT 4
55565: PUSH
55566: LD_INT 2
55568: PUSH
55569: EMPTY
55570: LIST
55571: LIST
55572: PUSH
55573: LD_INT 4
55575: PUSH
55576: LD_INT 4
55578: PUSH
55579: EMPTY
55580: LIST
55581: LIST
55582: PUSH
55583: LD_INT 4
55585: PUSH
55586: LD_INT 3
55588: PUSH
55589: EMPTY
55590: LIST
55591: LIST
55592: PUSH
55593: LD_INT 5
55595: PUSH
55596: LD_INT 4
55598: PUSH
55599: EMPTY
55600: LIST
55601: LIST
55602: PUSH
55603: LD_INT 5
55605: PUSH
55606: LD_INT 5
55608: PUSH
55609: EMPTY
55610: LIST
55611: LIST
55612: PUSH
55613: LD_INT 4
55615: PUSH
55616: LD_INT 5
55618: PUSH
55619: EMPTY
55620: LIST
55621: LIST
55622: PUSH
55623: LD_INT 3
55625: PUSH
55626: LD_INT 4
55628: PUSH
55629: EMPTY
55630: LIST
55631: LIST
55632: PUSH
55633: LD_INT 3
55635: PUSH
55636: LD_INT 3
55638: PUSH
55639: EMPTY
55640: LIST
55641: LIST
55642: PUSH
55643: LD_INT 5
55645: PUSH
55646: LD_INT 3
55648: PUSH
55649: EMPTY
55650: LIST
55651: LIST
55652: PUSH
55653: LD_INT 3
55655: PUSH
55656: LD_INT 5
55658: PUSH
55659: EMPTY
55660: LIST
55661: LIST
55662: PUSH
55663: EMPTY
55664: LIST
55665: LIST
55666: LIST
55667: LIST
55668: LIST
55669: LIST
55670: LIST
55671: LIST
55672: LIST
55673: LIST
55674: LIST
55675: LIST
55676: LIST
55677: LIST
55678: LIST
55679: LIST
55680: LIST
55681: LIST
55682: LIST
55683: LIST
55684: LIST
55685: LIST
55686: LIST
55687: LIST
55688: LIST
55689: LIST
55690: LIST
55691: LIST
55692: LIST
55693: LIST
55694: LIST
55695: LIST
55696: LIST
55697: LIST
55698: LIST
55699: LIST
55700: LIST
55701: LIST
55702: LIST
55703: LIST
55704: LIST
55705: LIST
55706: LIST
55707: LIST
55708: LIST
55709: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
55710: LD_ADDR_VAR 0 33
55714: PUSH
55715: LD_INT 4
55717: NEG
55718: PUSH
55719: LD_INT 4
55721: NEG
55722: PUSH
55723: EMPTY
55724: LIST
55725: LIST
55726: PUSH
55727: LD_INT 4
55729: NEG
55730: PUSH
55731: LD_INT 5
55733: NEG
55734: PUSH
55735: EMPTY
55736: LIST
55737: LIST
55738: PUSH
55739: LD_INT 3
55741: NEG
55742: PUSH
55743: LD_INT 4
55745: NEG
55746: PUSH
55747: EMPTY
55748: LIST
55749: LIST
55750: PUSH
55751: LD_INT 3
55753: NEG
55754: PUSH
55755: LD_INT 3
55757: NEG
55758: PUSH
55759: EMPTY
55760: LIST
55761: LIST
55762: PUSH
55763: LD_INT 4
55765: NEG
55766: PUSH
55767: LD_INT 3
55769: NEG
55770: PUSH
55771: EMPTY
55772: LIST
55773: LIST
55774: PUSH
55775: LD_INT 5
55777: NEG
55778: PUSH
55779: LD_INT 4
55781: NEG
55782: PUSH
55783: EMPTY
55784: LIST
55785: LIST
55786: PUSH
55787: LD_INT 5
55789: NEG
55790: PUSH
55791: LD_INT 5
55793: NEG
55794: PUSH
55795: EMPTY
55796: LIST
55797: LIST
55798: PUSH
55799: LD_INT 3
55801: NEG
55802: PUSH
55803: LD_INT 5
55805: NEG
55806: PUSH
55807: EMPTY
55808: LIST
55809: LIST
55810: PUSH
55811: LD_INT 5
55813: NEG
55814: PUSH
55815: LD_INT 3
55817: NEG
55818: PUSH
55819: EMPTY
55820: LIST
55821: LIST
55822: PUSH
55823: LD_INT 0
55825: PUSH
55826: LD_INT 3
55828: NEG
55829: PUSH
55830: EMPTY
55831: LIST
55832: LIST
55833: PUSH
55834: LD_INT 0
55836: PUSH
55837: LD_INT 4
55839: NEG
55840: PUSH
55841: EMPTY
55842: LIST
55843: LIST
55844: PUSH
55845: LD_INT 1
55847: PUSH
55848: LD_INT 3
55850: NEG
55851: PUSH
55852: EMPTY
55853: LIST
55854: LIST
55855: PUSH
55856: LD_INT 1
55858: PUSH
55859: LD_INT 2
55861: NEG
55862: PUSH
55863: EMPTY
55864: LIST
55865: LIST
55866: PUSH
55867: LD_INT 0
55869: PUSH
55870: LD_INT 2
55872: NEG
55873: PUSH
55874: EMPTY
55875: LIST
55876: LIST
55877: PUSH
55878: LD_INT 1
55880: NEG
55881: PUSH
55882: LD_INT 3
55884: NEG
55885: PUSH
55886: EMPTY
55887: LIST
55888: LIST
55889: PUSH
55890: LD_INT 1
55892: NEG
55893: PUSH
55894: LD_INT 4
55896: NEG
55897: PUSH
55898: EMPTY
55899: LIST
55900: LIST
55901: PUSH
55902: LD_INT 2
55904: PUSH
55905: LD_INT 2
55907: NEG
55908: PUSH
55909: EMPTY
55910: LIST
55911: LIST
55912: PUSH
55913: LD_INT 2
55915: NEG
55916: PUSH
55917: LD_INT 4
55919: NEG
55920: PUSH
55921: EMPTY
55922: LIST
55923: LIST
55924: PUSH
55925: LD_INT 4
55927: PUSH
55928: LD_INT 0
55930: PUSH
55931: EMPTY
55932: LIST
55933: LIST
55934: PUSH
55935: LD_INT 4
55937: PUSH
55938: LD_INT 1
55940: NEG
55941: PUSH
55942: EMPTY
55943: LIST
55944: LIST
55945: PUSH
55946: LD_INT 5
55948: PUSH
55949: LD_INT 0
55951: PUSH
55952: EMPTY
55953: LIST
55954: LIST
55955: PUSH
55956: LD_INT 5
55958: PUSH
55959: LD_INT 1
55961: PUSH
55962: EMPTY
55963: LIST
55964: LIST
55965: PUSH
55966: LD_INT 4
55968: PUSH
55969: LD_INT 1
55971: PUSH
55972: EMPTY
55973: LIST
55974: LIST
55975: PUSH
55976: LD_INT 3
55978: PUSH
55979: LD_INT 0
55981: PUSH
55982: EMPTY
55983: LIST
55984: LIST
55985: PUSH
55986: LD_INT 3
55988: PUSH
55989: LD_INT 1
55991: NEG
55992: PUSH
55993: EMPTY
55994: LIST
55995: LIST
55996: PUSH
55997: LD_INT 3
55999: PUSH
56000: LD_INT 2
56002: NEG
56003: PUSH
56004: EMPTY
56005: LIST
56006: LIST
56007: PUSH
56008: LD_INT 5
56010: PUSH
56011: LD_INT 2
56013: PUSH
56014: EMPTY
56015: LIST
56016: LIST
56017: PUSH
56018: LD_INT 3
56020: PUSH
56021: LD_INT 3
56023: PUSH
56024: EMPTY
56025: LIST
56026: LIST
56027: PUSH
56028: LD_INT 3
56030: PUSH
56031: LD_INT 2
56033: PUSH
56034: EMPTY
56035: LIST
56036: LIST
56037: PUSH
56038: LD_INT 4
56040: PUSH
56041: LD_INT 3
56043: PUSH
56044: EMPTY
56045: LIST
56046: LIST
56047: PUSH
56048: LD_INT 4
56050: PUSH
56051: LD_INT 4
56053: PUSH
56054: EMPTY
56055: LIST
56056: LIST
56057: PUSH
56058: LD_INT 3
56060: PUSH
56061: LD_INT 4
56063: PUSH
56064: EMPTY
56065: LIST
56066: LIST
56067: PUSH
56068: LD_INT 2
56070: PUSH
56071: LD_INT 3
56073: PUSH
56074: EMPTY
56075: LIST
56076: LIST
56077: PUSH
56078: LD_INT 2
56080: PUSH
56081: LD_INT 2
56083: PUSH
56084: EMPTY
56085: LIST
56086: LIST
56087: PUSH
56088: LD_INT 4
56090: PUSH
56091: LD_INT 2
56093: PUSH
56094: EMPTY
56095: LIST
56096: LIST
56097: PUSH
56098: LD_INT 2
56100: PUSH
56101: LD_INT 4
56103: PUSH
56104: EMPTY
56105: LIST
56106: LIST
56107: PUSH
56108: LD_INT 0
56110: PUSH
56111: LD_INT 4
56113: PUSH
56114: EMPTY
56115: LIST
56116: LIST
56117: PUSH
56118: LD_INT 0
56120: PUSH
56121: LD_INT 3
56123: PUSH
56124: EMPTY
56125: LIST
56126: LIST
56127: PUSH
56128: LD_INT 1
56130: PUSH
56131: LD_INT 4
56133: PUSH
56134: EMPTY
56135: LIST
56136: LIST
56137: PUSH
56138: LD_INT 1
56140: PUSH
56141: LD_INT 5
56143: PUSH
56144: EMPTY
56145: LIST
56146: LIST
56147: PUSH
56148: LD_INT 0
56150: PUSH
56151: LD_INT 5
56153: PUSH
56154: EMPTY
56155: LIST
56156: LIST
56157: PUSH
56158: LD_INT 1
56160: NEG
56161: PUSH
56162: LD_INT 4
56164: PUSH
56165: EMPTY
56166: LIST
56167: LIST
56168: PUSH
56169: LD_INT 1
56171: NEG
56172: PUSH
56173: LD_INT 3
56175: PUSH
56176: EMPTY
56177: LIST
56178: LIST
56179: PUSH
56180: LD_INT 2
56182: PUSH
56183: LD_INT 5
56185: PUSH
56186: EMPTY
56187: LIST
56188: LIST
56189: PUSH
56190: LD_INT 2
56192: NEG
56193: PUSH
56194: LD_INT 3
56196: PUSH
56197: EMPTY
56198: LIST
56199: LIST
56200: PUSH
56201: EMPTY
56202: LIST
56203: LIST
56204: LIST
56205: LIST
56206: LIST
56207: LIST
56208: LIST
56209: LIST
56210: LIST
56211: LIST
56212: LIST
56213: LIST
56214: LIST
56215: LIST
56216: LIST
56217: LIST
56218: LIST
56219: LIST
56220: LIST
56221: LIST
56222: LIST
56223: LIST
56224: LIST
56225: LIST
56226: LIST
56227: LIST
56228: LIST
56229: LIST
56230: LIST
56231: LIST
56232: LIST
56233: LIST
56234: LIST
56235: LIST
56236: LIST
56237: LIST
56238: LIST
56239: LIST
56240: LIST
56241: LIST
56242: LIST
56243: LIST
56244: LIST
56245: LIST
56246: LIST
56247: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
56248: LD_ADDR_VAR 0 34
56252: PUSH
56253: LD_INT 0
56255: PUSH
56256: LD_INT 4
56258: NEG
56259: PUSH
56260: EMPTY
56261: LIST
56262: LIST
56263: PUSH
56264: LD_INT 0
56266: PUSH
56267: LD_INT 5
56269: NEG
56270: PUSH
56271: EMPTY
56272: LIST
56273: LIST
56274: PUSH
56275: LD_INT 1
56277: PUSH
56278: LD_INT 4
56280: NEG
56281: PUSH
56282: EMPTY
56283: LIST
56284: LIST
56285: PUSH
56286: LD_INT 1
56288: PUSH
56289: LD_INT 3
56291: NEG
56292: PUSH
56293: EMPTY
56294: LIST
56295: LIST
56296: PUSH
56297: LD_INT 0
56299: PUSH
56300: LD_INT 3
56302: NEG
56303: PUSH
56304: EMPTY
56305: LIST
56306: LIST
56307: PUSH
56308: LD_INT 1
56310: NEG
56311: PUSH
56312: LD_INT 4
56314: NEG
56315: PUSH
56316: EMPTY
56317: LIST
56318: LIST
56319: PUSH
56320: LD_INT 1
56322: NEG
56323: PUSH
56324: LD_INT 5
56326: NEG
56327: PUSH
56328: EMPTY
56329: LIST
56330: LIST
56331: PUSH
56332: LD_INT 2
56334: PUSH
56335: LD_INT 3
56337: NEG
56338: PUSH
56339: EMPTY
56340: LIST
56341: LIST
56342: PUSH
56343: LD_INT 2
56345: NEG
56346: PUSH
56347: LD_INT 5
56349: NEG
56350: PUSH
56351: EMPTY
56352: LIST
56353: LIST
56354: PUSH
56355: LD_INT 3
56357: PUSH
56358: LD_INT 0
56360: PUSH
56361: EMPTY
56362: LIST
56363: LIST
56364: PUSH
56365: LD_INT 3
56367: PUSH
56368: LD_INT 1
56370: NEG
56371: PUSH
56372: EMPTY
56373: LIST
56374: LIST
56375: PUSH
56376: LD_INT 4
56378: PUSH
56379: LD_INT 0
56381: PUSH
56382: EMPTY
56383: LIST
56384: LIST
56385: PUSH
56386: LD_INT 4
56388: PUSH
56389: LD_INT 1
56391: PUSH
56392: EMPTY
56393: LIST
56394: LIST
56395: PUSH
56396: LD_INT 3
56398: PUSH
56399: LD_INT 1
56401: PUSH
56402: EMPTY
56403: LIST
56404: LIST
56405: PUSH
56406: LD_INT 2
56408: PUSH
56409: LD_INT 0
56411: PUSH
56412: EMPTY
56413: LIST
56414: LIST
56415: PUSH
56416: LD_INT 2
56418: PUSH
56419: LD_INT 1
56421: NEG
56422: PUSH
56423: EMPTY
56424: LIST
56425: LIST
56426: PUSH
56427: LD_INT 2
56429: PUSH
56430: LD_INT 2
56432: NEG
56433: PUSH
56434: EMPTY
56435: LIST
56436: LIST
56437: PUSH
56438: LD_INT 4
56440: PUSH
56441: LD_INT 2
56443: PUSH
56444: EMPTY
56445: LIST
56446: LIST
56447: PUSH
56448: LD_INT 4
56450: PUSH
56451: LD_INT 4
56453: PUSH
56454: EMPTY
56455: LIST
56456: LIST
56457: PUSH
56458: LD_INT 4
56460: PUSH
56461: LD_INT 3
56463: PUSH
56464: EMPTY
56465: LIST
56466: LIST
56467: PUSH
56468: LD_INT 5
56470: PUSH
56471: LD_INT 4
56473: PUSH
56474: EMPTY
56475: LIST
56476: LIST
56477: PUSH
56478: LD_INT 5
56480: PUSH
56481: LD_INT 5
56483: PUSH
56484: EMPTY
56485: LIST
56486: LIST
56487: PUSH
56488: LD_INT 4
56490: PUSH
56491: LD_INT 5
56493: PUSH
56494: EMPTY
56495: LIST
56496: LIST
56497: PUSH
56498: LD_INT 3
56500: PUSH
56501: LD_INT 4
56503: PUSH
56504: EMPTY
56505: LIST
56506: LIST
56507: PUSH
56508: LD_INT 3
56510: PUSH
56511: LD_INT 3
56513: PUSH
56514: EMPTY
56515: LIST
56516: LIST
56517: PUSH
56518: LD_INT 5
56520: PUSH
56521: LD_INT 3
56523: PUSH
56524: EMPTY
56525: LIST
56526: LIST
56527: PUSH
56528: LD_INT 3
56530: PUSH
56531: LD_INT 5
56533: PUSH
56534: EMPTY
56535: LIST
56536: LIST
56537: PUSH
56538: LD_INT 0
56540: PUSH
56541: LD_INT 3
56543: PUSH
56544: EMPTY
56545: LIST
56546: LIST
56547: PUSH
56548: LD_INT 0
56550: PUSH
56551: LD_INT 2
56553: PUSH
56554: EMPTY
56555: LIST
56556: LIST
56557: PUSH
56558: LD_INT 1
56560: PUSH
56561: LD_INT 3
56563: PUSH
56564: EMPTY
56565: LIST
56566: LIST
56567: PUSH
56568: LD_INT 1
56570: PUSH
56571: LD_INT 4
56573: PUSH
56574: EMPTY
56575: LIST
56576: LIST
56577: PUSH
56578: LD_INT 0
56580: PUSH
56581: LD_INT 4
56583: PUSH
56584: EMPTY
56585: LIST
56586: LIST
56587: PUSH
56588: LD_INT 1
56590: NEG
56591: PUSH
56592: LD_INT 3
56594: PUSH
56595: EMPTY
56596: LIST
56597: LIST
56598: PUSH
56599: LD_INT 1
56601: NEG
56602: PUSH
56603: LD_INT 2
56605: PUSH
56606: EMPTY
56607: LIST
56608: LIST
56609: PUSH
56610: LD_INT 2
56612: PUSH
56613: LD_INT 4
56615: PUSH
56616: EMPTY
56617: LIST
56618: LIST
56619: PUSH
56620: LD_INT 2
56622: NEG
56623: PUSH
56624: LD_INT 2
56626: PUSH
56627: EMPTY
56628: LIST
56629: LIST
56630: PUSH
56631: LD_INT 4
56633: NEG
56634: PUSH
56635: LD_INT 0
56637: PUSH
56638: EMPTY
56639: LIST
56640: LIST
56641: PUSH
56642: LD_INT 4
56644: NEG
56645: PUSH
56646: LD_INT 1
56648: NEG
56649: PUSH
56650: EMPTY
56651: LIST
56652: LIST
56653: PUSH
56654: LD_INT 3
56656: NEG
56657: PUSH
56658: LD_INT 0
56660: PUSH
56661: EMPTY
56662: LIST
56663: LIST
56664: PUSH
56665: LD_INT 3
56667: NEG
56668: PUSH
56669: LD_INT 1
56671: PUSH
56672: EMPTY
56673: LIST
56674: LIST
56675: PUSH
56676: LD_INT 4
56678: NEG
56679: PUSH
56680: LD_INT 1
56682: PUSH
56683: EMPTY
56684: LIST
56685: LIST
56686: PUSH
56687: LD_INT 5
56689: NEG
56690: PUSH
56691: LD_INT 0
56693: PUSH
56694: EMPTY
56695: LIST
56696: LIST
56697: PUSH
56698: LD_INT 5
56700: NEG
56701: PUSH
56702: LD_INT 1
56704: NEG
56705: PUSH
56706: EMPTY
56707: LIST
56708: LIST
56709: PUSH
56710: LD_INT 5
56712: NEG
56713: PUSH
56714: LD_INT 2
56716: NEG
56717: PUSH
56718: EMPTY
56719: LIST
56720: LIST
56721: PUSH
56722: LD_INT 3
56724: NEG
56725: PUSH
56726: LD_INT 2
56728: PUSH
56729: EMPTY
56730: LIST
56731: LIST
56732: PUSH
56733: EMPTY
56734: LIST
56735: LIST
56736: LIST
56737: LIST
56738: LIST
56739: LIST
56740: LIST
56741: LIST
56742: LIST
56743: LIST
56744: LIST
56745: LIST
56746: LIST
56747: LIST
56748: LIST
56749: LIST
56750: LIST
56751: LIST
56752: LIST
56753: LIST
56754: LIST
56755: LIST
56756: LIST
56757: LIST
56758: LIST
56759: LIST
56760: LIST
56761: LIST
56762: LIST
56763: LIST
56764: LIST
56765: LIST
56766: LIST
56767: LIST
56768: LIST
56769: LIST
56770: LIST
56771: LIST
56772: LIST
56773: LIST
56774: LIST
56775: LIST
56776: LIST
56777: LIST
56778: LIST
56779: ST_TO_ADDR
// end ; end ;
56780: GO 56783
56782: POP
// case btype of b_depot , b_warehouse :
56783: LD_VAR 0 1
56787: PUSH
56788: LD_INT 0
56790: DOUBLE
56791: EQUAL
56792: IFTRUE 56802
56794: LD_INT 1
56796: DOUBLE
56797: EQUAL
56798: IFTRUE 56802
56800: GO 57003
56802: POP
// case nation of nation_american :
56803: LD_VAR 0 5
56807: PUSH
56808: LD_INT 1
56810: DOUBLE
56811: EQUAL
56812: IFTRUE 56816
56814: GO 56872
56816: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
56817: LD_ADDR_VAR 0 9
56821: PUSH
56822: LD_VAR 0 11
56826: PUSH
56827: LD_VAR 0 12
56831: PUSH
56832: LD_VAR 0 13
56836: PUSH
56837: LD_VAR 0 14
56841: PUSH
56842: LD_VAR 0 15
56846: PUSH
56847: LD_VAR 0 16
56851: PUSH
56852: EMPTY
56853: LIST
56854: LIST
56855: LIST
56856: LIST
56857: LIST
56858: LIST
56859: PUSH
56860: LD_VAR 0 4
56864: PUSH
56865: LD_INT 1
56867: PLUS
56868: ARRAY
56869: ST_TO_ADDR
56870: GO 57001
56872: LD_INT 2
56874: DOUBLE
56875: EQUAL
56876: IFTRUE 56880
56878: GO 56936
56880: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
56881: LD_ADDR_VAR 0 9
56885: PUSH
56886: LD_VAR 0 17
56890: PUSH
56891: LD_VAR 0 18
56895: PUSH
56896: LD_VAR 0 19
56900: PUSH
56901: LD_VAR 0 20
56905: PUSH
56906: LD_VAR 0 21
56910: PUSH
56911: LD_VAR 0 22
56915: PUSH
56916: EMPTY
56917: LIST
56918: LIST
56919: LIST
56920: LIST
56921: LIST
56922: LIST
56923: PUSH
56924: LD_VAR 0 4
56928: PUSH
56929: LD_INT 1
56931: PLUS
56932: ARRAY
56933: ST_TO_ADDR
56934: GO 57001
56936: LD_INT 3
56938: DOUBLE
56939: EQUAL
56940: IFTRUE 56944
56942: GO 57000
56944: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
56945: LD_ADDR_VAR 0 9
56949: PUSH
56950: LD_VAR 0 23
56954: PUSH
56955: LD_VAR 0 24
56959: PUSH
56960: LD_VAR 0 25
56964: PUSH
56965: LD_VAR 0 26
56969: PUSH
56970: LD_VAR 0 27
56974: PUSH
56975: LD_VAR 0 28
56979: PUSH
56980: EMPTY
56981: LIST
56982: LIST
56983: LIST
56984: LIST
56985: LIST
56986: LIST
56987: PUSH
56988: LD_VAR 0 4
56992: PUSH
56993: LD_INT 1
56995: PLUS
56996: ARRAY
56997: ST_TO_ADDR
56998: GO 57001
57000: POP
57001: GO 57556
57003: LD_INT 2
57005: DOUBLE
57006: EQUAL
57007: IFTRUE 57017
57009: LD_INT 3
57011: DOUBLE
57012: EQUAL
57013: IFTRUE 57017
57015: GO 57073
57017: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
57018: LD_ADDR_VAR 0 9
57022: PUSH
57023: LD_VAR 0 29
57027: PUSH
57028: LD_VAR 0 30
57032: PUSH
57033: LD_VAR 0 31
57037: PUSH
57038: LD_VAR 0 32
57042: PUSH
57043: LD_VAR 0 33
57047: PUSH
57048: LD_VAR 0 34
57052: PUSH
57053: EMPTY
57054: LIST
57055: LIST
57056: LIST
57057: LIST
57058: LIST
57059: LIST
57060: PUSH
57061: LD_VAR 0 4
57065: PUSH
57066: LD_INT 1
57068: PLUS
57069: ARRAY
57070: ST_TO_ADDR
57071: GO 57556
57073: LD_INT 16
57075: DOUBLE
57076: EQUAL
57077: IFTRUE 57135
57079: LD_INT 17
57081: DOUBLE
57082: EQUAL
57083: IFTRUE 57135
57085: LD_INT 18
57087: DOUBLE
57088: EQUAL
57089: IFTRUE 57135
57091: LD_INT 19
57093: DOUBLE
57094: EQUAL
57095: IFTRUE 57135
57097: LD_INT 22
57099: DOUBLE
57100: EQUAL
57101: IFTRUE 57135
57103: LD_INT 20
57105: DOUBLE
57106: EQUAL
57107: IFTRUE 57135
57109: LD_INT 21
57111: DOUBLE
57112: EQUAL
57113: IFTRUE 57135
57115: LD_INT 23
57117: DOUBLE
57118: EQUAL
57119: IFTRUE 57135
57121: LD_INT 24
57123: DOUBLE
57124: EQUAL
57125: IFTRUE 57135
57127: LD_INT 25
57129: DOUBLE
57130: EQUAL
57131: IFTRUE 57135
57133: GO 57191
57135: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
57136: LD_ADDR_VAR 0 9
57140: PUSH
57141: LD_VAR 0 35
57145: PUSH
57146: LD_VAR 0 36
57150: PUSH
57151: LD_VAR 0 37
57155: PUSH
57156: LD_VAR 0 38
57160: PUSH
57161: LD_VAR 0 39
57165: PUSH
57166: LD_VAR 0 40
57170: PUSH
57171: EMPTY
57172: LIST
57173: LIST
57174: LIST
57175: LIST
57176: LIST
57177: LIST
57178: PUSH
57179: LD_VAR 0 4
57183: PUSH
57184: LD_INT 1
57186: PLUS
57187: ARRAY
57188: ST_TO_ADDR
57189: GO 57556
57191: LD_INT 6
57193: DOUBLE
57194: EQUAL
57195: IFTRUE 57247
57197: LD_INT 7
57199: DOUBLE
57200: EQUAL
57201: IFTRUE 57247
57203: LD_INT 8
57205: DOUBLE
57206: EQUAL
57207: IFTRUE 57247
57209: LD_INT 13
57211: DOUBLE
57212: EQUAL
57213: IFTRUE 57247
57215: LD_INT 12
57217: DOUBLE
57218: EQUAL
57219: IFTRUE 57247
57221: LD_INT 15
57223: DOUBLE
57224: EQUAL
57225: IFTRUE 57247
57227: LD_INT 11
57229: DOUBLE
57230: EQUAL
57231: IFTRUE 57247
57233: LD_INT 14
57235: DOUBLE
57236: EQUAL
57237: IFTRUE 57247
57239: LD_INT 10
57241: DOUBLE
57242: EQUAL
57243: IFTRUE 57247
57245: GO 57303
57247: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
57248: LD_ADDR_VAR 0 9
57252: PUSH
57253: LD_VAR 0 41
57257: PUSH
57258: LD_VAR 0 42
57262: PUSH
57263: LD_VAR 0 43
57267: PUSH
57268: LD_VAR 0 44
57272: PUSH
57273: LD_VAR 0 45
57277: PUSH
57278: LD_VAR 0 46
57282: PUSH
57283: EMPTY
57284: LIST
57285: LIST
57286: LIST
57287: LIST
57288: LIST
57289: LIST
57290: PUSH
57291: LD_VAR 0 4
57295: PUSH
57296: LD_INT 1
57298: PLUS
57299: ARRAY
57300: ST_TO_ADDR
57301: GO 57556
57303: LD_INT 36
57305: DOUBLE
57306: EQUAL
57307: IFTRUE 57311
57309: GO 57367
57311: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
57312: LD_ADDR_VAR 0 9
57316: PUSH
57317: LD_VAR 0 47
57321: PUSH
57322: LD_VAR 0 48
57326: PUSH
57327: LD_VAR 0 49
57331: PUSH
57332: LD_VAR 0 50
57336: PUSH
57337: LD_VAR 0 51
57341: PUSH
57342: LD_VAR 0 52
57346: PUSH
57347: EMPTY
57348: LIST
57349: LIST
57350: LIST
57351: LIST
57352: LIST
57353: LIST
57354: PUSH
57355: LD_VAR 0 4
57359: PUSH
57360: LD_INT 1
57362: PLUS
57363: ARRAY
57364: ST_TO_ADDR
57365: GO 57556
57367: LD_INT 4
57369: DOUBLE
57370: EQUAL
57371: IFTRUE 57393
57373: LD_INT 5
57375: DOUBLE
57376: EQUAL
57377: IFTRUE 57393
57379: LD_INT 34
57381: DOUBLE
57382: EQUAL
57383: IFTRUE 57393
57385: LD_INT 37
57387: DOUBLE
57388: EQUAL
57389: IFTRUE 57393
57391: GO 57449
57393: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
57394: LD_ADDR_VAR 0 9
57398: PUSH
57399: LD_VAR 0 53
57403: PUSH
57404: LD_VAR 0 54
57408: PUSH
57409: LD_VAR 0 55
57413: PUSH
57414: LD_VAR 0 56
57418: PUSH
57419: LD_VAR 0 57
57423: PUSH
57424: LD_VAR 0 58
57428: PUSH
57429: EMPTY
57430: LIST
57431: LIST
57432: LIST
57433: LIST
57434: LIST
57435: LIST
57436: PUSH
57437: LD_VAR 0 4
57441: PUSH
57442: LD_INT 1
57444: PLUS
57445: ARRAY
57446: ST_TO_ADDR
57447: GO 57556
57449: LD_INT 31
57451: DOUBLE
57452: EQUAL
57453: IFTRUE 57499
57455: LD_INT 32
57457: DOUBLE
57458: EQUAL
57459: IFTRUE 57499
57461: LD_INT 33
57463: DOUBLE
57464: EQUAL
57465: IFTRUE 57499
57467: LD_INT 27
57469: DOUBLE
57470: EQUAL
57471: IFTRUE 57499
57473: LD_INT 26
57475: DOUBLE
57476: EQUAL
57477: IFTRUE 57499
57479: LD_INT 28
57481: DOUBLE
57482: EQUAL
57483: IFTRUE 57499
57485: LD_INT 29
57487: DOUBLE
57488: EQUAL
57489: IFTRUE 57499
57491: LD_INT 30
57493: DOUBLE
57494: EQUAL
57495: IFTRUE 57499
57497: GO 57555
57499: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
57500: LD_ADDR_VAR 0 9
57504: PUSH
57505: LD_VAR 0 59
57509: PUSH
57510: LD_VAR 0 60
57514: PUSH
57515: LD_VAR 0 61
57519: PUSH
57520: LD_VAR 0 62
57524: PUSH
57525: LD_VAR 0 63
57529: PUSH
57530: LD_VAR 0 64
57534: PUSH
57535: EMPTY
57536: LIST
57537: LIST
57538: LIST
57539: LIST
57540: LIST
57541: LIST
57542: PUSH
57543: LD_VAR 0 4
57547: PUSH
57548: LD_INT 1
57550: PLUS
57551: ARRAY
57552: ST_TO_ADDR
57553: GO 57556
57555: POP
// temp_list2 = [ ] ;
57556: LD_ADDR_VAR 0 10
57560: PUSH
57561: EMPTY
57562: ST_TO_ADDR
// for i in temp_list do
57563: LD_ADDR_VAR 0 8
57567: PUSH
57568: LD_VAR 0 9
57572: PUSH
57573: FOR_IN
57574: IFFALSE 57626
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
57576: LD_ADDR_VAR 0 10
57580: PUSH
57581: LD_VAR 0 10
57585: PUSH
57586: LD_VAR 0 8
57590: PUSH
57591: LD_INT 1
57593: ARRAY
57594: PUSH
57595: LD_VAR 0 2
57599: PLUS
57600: PUSH
57601: LD_VAR 0 8
57605: PUSH
57606: LD_INT 2
57608: ARRAY
57609: PUSH
57610: LD_VAR 0 3
57614: PLUS
57615: PUSH
57616: EMPTY
57617: LIST
57618: LIST
57619: PUSH
57620: EMPTY
57621: LIST
57622: ADD
57623: ST_TO_ADDR
57624: GO 57573
57626: POP
57627: POP
// result = temp_list2 ;
57628: LD_ADDR_VAR 0 7
57632: PUSH
57633: LD_VAR 0 10
57637: ST_TO_ADDR
// end ;
57638: LD_VAR 0 7
57642: RET
// export function EnemyInRange ( unit , dist ) ; begin
57643: LD_INT 0
57645: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
57646: LD_ADDR_VAR 0 3
57650: PUSH
57651: LD_VAR 0 1
57655: PPUSH
57656: CALL_OW 255
57660: PPUSH
57661: LD_VAR 0 1
57665: PPUSH
57666: CALL_OW 250
57670: PPUSH
57671: LD_VAR 0 1
57675: PPUSH
57676: CALL_OW 251
57680: PPUSH
57681: LD_VAR 0 2
57685: PPUSH
57686: CALL 31747 0 4
57690: PUSH
57691: LD_INT 4
57693: ARRAY
57694: ST_TO_ADDR
// end ;
57695: LD_VAR 0 3
57699: RET
// export function PlayerSeeMe ( unit ) ; begin
57700: LD_INT 0
57702: PPUSH
// result := See ( your_side , unit ) ;
57703: LD_ADDR_VAR 0 2
57707: PUSH
57708: LD_OWVAR 2
57712: PPUSH
57713: LD_VAR 0 1
57717: PPUSH
57718: CALL_OW 292
57722: ST_TO_ADDR
// end ;
57723: LD_VAR 0 2
57727: RET
// export function ReverseDir ( unit ) ; begin
57728: LD_INT 0
57730: PPUSH
// if not unit then
57731: LD_VAR 0 1
57735: NOT
57736: IFFALSE 57740
// exit ;
57738: GO 57763
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
57740: LD_ADDR_VAR 0 2
57744: PUSH
57745: LD_VAR 0 1
57749: PPUSH
57750: CALL_OW 254
57754: PUSH
57755: LD_INT 3
57757: PLUS
57758: PUSH
57759: LD_INT 6
57761: MOD
57762: ST_TO_ADDR
// end ;
57763: LD_VAR 0 2
57767: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
57768: LD_INT 0
57770: PPUSH
57771: PPUSH
57772: PPUSH
57773: PPUSH
57774: PPUSH
// if not hexes then
57775: LD_VAR 0 2
57779: NOT
57780: IFFALSE 57784
// exit ;
57782: GO 57932
// dist := 9999 ;
57784: LD_ADDR_VAR 0 5
57788: PUSH
57789: LD_INT 9999
57791: ST_TO_ADDR
// for i = 1 to hexes do
57792: LD_ADDR_VAR 0 4
57796: PUSH
57797: DOUBLE
57798: LD_INT 1
57800: DEC
57801: ST_TO_ADDR
57802: LD_VAR 0 2
57806: PUSH
57807: FOR_TO
57808: IFFALSE 57920
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
57810: LD_VAR 0 1
57814: PPUSH
57815: LD_VAR 0 2
57819: PUSH
57820: LD_VAR 0 4
57824: ARRAY
57825: PUSH
57826: LD_INT 1
57828: ARRAY
57829: PPUSH
57830: LD_VAR 0 2
57834: PUSH
57835: LD_VAR 0 4
57839: ARRAY
57840: PUSH
57841: LD_INT 2
57843: ARRAY
57844: PPUSH
57845: CALL_OW 297
57849: PUSH
57850: LD_VAR 0 5
57854: LESS
57855: IFFALSE 57918
// begin hex := hexes [ i ] ;
57857: LD_ADDR_VAR 0 7
57861: PUSH
57862: LD_VAR 0 2
57866: PUSH
57867: LD_VAR 0 4
57871: ARRAY
57872: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
57873: LD_ADDR_VAR 0 5
57877: PUSH
57878: LD_VAR 0 1
57882: PPUSH
57883: LD_VAR 0 2
57887: PUSH
57888: LD_VAR 0 4
57892: ARRAY
57893: PUSH
57894: LD_INT 1
57896: ARRAY
57897: PPUSH
57898: LD_VAR 0 2
57902: PUSH
57903: LD_VAR 0 4
57907: ARRAY
57908: PUSH
57909: LD_INT 2
57911: ARRAY
57912: PPUSH
57913: CALL_OW 297
57917: ST_TO_ADDR
// end ; end ;
57918: GO 57807
57920: POP
57921: POP
// result := hex ;
57922: LD_ADDR_VAR 0 3
57926: PUSH
57927: LD_VAR 0 7
57931: ST_TO_ADDR
// end ;
57932: LD_VAR 0 3
57936: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
57937: LD_INT 0
57939: PPUSH
57940: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
57941: LD_VAR 0 1
57945: NOT
57946: PUSH
57947: LD_VAR 0 1
57951: PUSH
57952: LD_INT 21
57954: PUSH
57955: LD_INT 2
57957: PUSH
57958: EMPTY
57959: LIST
57960: LIST
57961: PUSH
57962: LD_INT 23
57964: PUSH
57965: LD_INT 2
57967: PUSH
57968: EMPTY
57969: LIST
57970: LIST
57971: PUSH
57972: EMPTY
57973: LIST
57974: LIST
57975: PPUSH
57976: CALL_OW 69
57980: IN
57981: NOT
57982: OR
57983: IFFALSE 57987
// exit ;
57985: GO 58034
// for i = 1 to 3 do
57987: LD_ADDR_VAR 0 3
57991: PUSH
57992: DOUBLE
57993: LD_INT 1
57995: DEC
57996: ST_TO_ADDR
57997: LD_INT 3
57999: PUSH
58000: FOR_TO
58001: IFFALSE 58032
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
58003: LD_VAR 0 1
58007: PPUSH
58008: CALL_OW 250
58012: PPUSH
58013: LD_VAR 0 1
58017: PPUSH
58018: CALL_OW 251
58022: PPUSH
58023: LD_INT 1
58025: PPUSH
58026: CALL_OW 453
58030: GO 58000
58032: POP
58033: POP
// end ;
58034: LD_VAR 0 2
58038: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
58039: LD_INT 0
58041: PPUSH
58042: PPUSH
58043: PPUSH
58044: PPUSH
58045: PPUSH
58046: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
58047: LD_VAR 0 1
58051: NOT
58052: PUSH
58053: LD_VAR 0 2
58057: NOT
58058: OR
58059: PUSH
58060: LD_VAR 0 1
58064: PPUSH
58065: CALL_OW 314
58069: OR
58070: IFFALSE 58074
// exit ;
58072: GO 58515
// x := GetX ( enemy_unit ) ;
58074: LD_ADDR_VAR 0 7
58078: PUSH
58079: LD_VAR 0 2
58083: PPUSH
58084: CALL_OW 250
58088: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
58089: LD_ADDR_VAR 0 8
58093: PUSH
58094: LD_VAR 0 2
58098: PPUSH
58099: CALL_OW 251
58103: ST_TO_ADDR
// if not x or not y then
58104: LD_VAR 0 7
58108: NOT
58109: PUSH
58110: LD_VAR 0 8
58114: NOT
58115: OR
58116: IFFALSE 58120
// exit ;
58118: GO 58515
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
58120: LD_ADDR_VAR 0 6
58124: PUSH
58125: LD_VAR 0 7
58129: PPUSH
58130: LD_INT 0
58132: PPUSH
58133: LD_INT 4
58135: PPUSH
58136: CALL_OW 272
58140: PUSH
58141: LD_VAR 0 8
58145: PPUSH
58146: LD_INT 0
58148: PPUSH
58149: LD_INT 4
58151: PPUSH
58152: CALL_OW 273
58156: PUSH
58157: EMPTY
58158: LIST
58159: LIST
58160: PUSH
58161: LD_VAR 0 7
58165: PPUSH
58166: LD_INT 1
58168: PPUSH
58169: LD_INT 4
58171: PPUSH
58172: CALL_OW 272
58176: PUSH
58177: LD_VAR 0 8
58181: PPUSH
58182: LD_INT 1
58184: PPUSH
58185: LD_INT 4
58187: PPUSH
58188: CALL_OW 273
58192: PUSH
58193: EMPTY
58194: LIST
58195: LIST
58196: PUSH
58197: LD_VAR 0 7
58201: PPUSH
58202: LD_INT 2
58204: PPUSH
58205: LD_INT 4
58207: PPUSH
58208: CALL_OW 272
58212: PUSH
58213: LD_VAR 0 8
58217: PPUSH
58218: LD_INT 2
58220: PPUSH
58221: LD_INT 4
58223: PPUSH
58224: CALL_OW 273
58228: PUSH
58229: EMPTY
58230: LIST
58231: LIST
58232: PUSH
58233: LD_VAR 0 7
58237: PPUSH
58238: LD_INT 3
58240: PPUSH
58241: LD_INT 4
58243: PPUSH
58244: CALL_OW 272
58248: PUSH
58249: LD_VAR 0 8
58253: PPUSH
58254: LD_INT 3
58256: PPUSH
58257: LD_INT 4
58259: PPUSH
58260: CALL_OW 273
58264: PUSH
58265: EMPTY
58266: LIST
58267: LIST
58268: PUSH
58269: LD_VAR 0 7
58273: PPUSH
58274: LD_INT 4
58276: PPUSH
58277: LD_INT 4
58279: PPUSH
58280: CALL_OW 272
58284: PUSH
58285: LD_VAR 0 8
58289: PPUSH
58290: LD_INT 4
58292: PPUSH
58293: LD_INT 4
58295: PPUSH
58296: CALL_OW 273
58300: PUSH
58301: EMPTY
58302: LIST
58303: LIST
58304: PUSH
58305: LD_VAR 0 7
58309: PPUSH
58310: LD_INT 5
58312: PPUSH
58313: LD_INT 4
58315: PPUSH
58316: CALL_OW 272
58320: PUSH
58321: LD_VAR 0 8
58325: PPUSH
58326: LD_INT 5
58328: PPUSH
58329: LD_INT 4
58331: PPUSH
58332: CALL_OW 273
58336: PUSH
58337: EMPTY
58338: LIST
58339: LIST
58340: PUSH
58341: EMPTY
58342: LIST
58343: LIST
58344: LIST
58345: LIST
58346: LIST
58347: LIST
58348: ST_TO_ADDR
// for i = tmp downto 1 do
58349: LD_ADDR_VAR 0 4
58353: PUSH
58354: DOUBLE
58355: LD_VAR 0 6
58359: INC
58360: ST_TO_ADDR
58361: LD_INT 1
58363: PUSH
58364: FOR_DOWNTO
58365: IFFALSE 58466
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
58367: LD_VAR 0 6
58371: PUSH
58372: LD_VAR 0 4
58376: ARRAY
58377: PUSH
58378: LD_INT 1
58380: ARRAY
58381: PPUSH
58382: LD_VAR 0 6
58386: PUSH
58387: LD_VAR 0 4
58391: ARRAY
58392: PUSH
58393: LD_INT 2
58395: ARRAY
58396: PPUSH
58397: CALL_OW 488
58401: NOT
58402: PUSH
58403: LD_VAR 0 6
58407: PUSH
58408: LD_VAR 0 4
58412: ARRAY
58413: PUSH
58414: LD_INT 1
58416: ARRAY
58417: PPUSH
58418: LD_VAR 0 6
58422: PUSH
58423: LD_VAR 0 4
58427: ARRAY
58428: PUSH
58429: LD_INT 2
58431: ARRAY
58432: PPUSH
58433: CALL_OW 428
58437: PUSH
58438: LD_INT 0
58440: NONEQUAL
58441: OR
58442: IFFALSE 58464
// tmp := Delete ( tmp , i ) ;
58444: LD_ADDR_VAR 0 6
58448: PUSH
58449: LD_VAR 0 6
58453: PPUSH
58454: LD_VAR 0 4
58458: PPUSH
58459: CALL_OW 3
58463: ST_TO_ADDR
58464: GO 58364
58466: POP
58467: POP
// j := GetClosestHex ( unit , tmp ) ;
58468: LD_ADDR_VAR 0 5
58472: PUSH
58473: LD_VAR 0 1
58477: PPUSH
58478: LD_VAR 0 6
58482: PPUSH
58483: CALL 57768 0 2
58487: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
58488: LD_VAR 0 1
58492: PPUSH
58493: LD_VAR 0 5
58497: PUSH
58498: LD_INT 1
58500: ARRAY
58501: PPUSH
58502: LD_VAR 0 5
58506: PUSH
58507: LD_INT 2
58509: ARRAY
58510: PPUSH
58511: CALL_OW 111
// end ;
58515: LD_VAR 0 3
58519: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
58520: LD_INT 0
58522: PPUSH
58523: PPUSH
58524: PPUSH
// uc_side = 0 ;
58525: LD_ADDR_OWVAR 20
58529: PUSH
58530: LD_INT 0
58532: ST_TO_ADDR
// uc_nation = 0 ;
58533: LD_ADDR_OWVAR 21
58537: PUSH
58538: LD_INT 0
58540: ST_TO_ADDR
// InitHc_All ( ) ;
58541: CALL_OW 584
// InitVc ;
58545: CALL_OW 20
// if mastodonts then
58549: LD_VAR 0 6
58553: IFFALSE 58620
// for i = 1 to mastodonts do
58555: LD_ADDR_VAR 0 11
58559: PUSH
58560: DOUBLE
58561: LD_INT 1
58563: DEC
58564: ST_TO_ADDR
58565: LD_VAR 0 6
58569: PUSH
58570: FOR_TO
58571: IFFALSE 58618
// begin vc_chassis := 31 ;
58573: LD_ADDR_OWVAR 37
58577: PUSH
58578: LD_INT 31
58580: ST_TO_ADDR
// vc_control := control_rider ;
58581: LD_ADDR_OWVAR 38
58585: PUSH
58586: LD_INT 4
58588: ST_TO_ADDR
// animal := CreateVehicle ;
58589: LD_ADDR_VAR 0 12
58593: PUSH
58594: CALL_OW 45
58598: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58599: LD_VAR 0 12
58603: PPUSH
58604: LD_VAR 0 8
58608: PPUSH
58609: LD_INT 0
58611: PPUSH
58612: CALL 60808 0 3
// end ;
58616: GO 58570
58618: POP
58619: POP
// if horses then
58620: LD_VAR 0 5
58624: IFFALSE 58691
// for i = 1 to horses do
58626: LD_ADDR_VAR 0 11
58630: PUSH
58631: DOUBLE
58632: LD_INT 1
58634: DEC
58635: ST_TO_ADDR
58636: LD_VAR 0 5
58640: PUSH
58641: FOR_TO
58642: IFFALSE 58689
// begin hc_class := 21 ;
58644: LD_ADDR_OWVAR 28
58648: PUSH
58649: LD_INT 21
58651: ST_TO_ADDR
// hc_gallery :=  ;
58652: LD_ADDR_OWVAR 33
58656: PUSH
58657: LD_STRING 
58659: ST_TO_ADDR
// animal := CreateHuman ;
58660: LD_ADDR_VAR 0 12
58664: PUSH
58665: CALL_OW 44
58669: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58670: LD_VAR 0 12
58674: PPUSH
58675: LD_VAR 0 8
58679: PPUSH
58680: LD_INT 0
58682: PPUSH
58683: CALL 60808 0 3
// end ;
58687: GO 58641
58689: POP
58690: POP
// if birds then
58691: LD_VAR 0 1
58695: IFFALSE 58762
// for i = 1 to birds do
58697: LD_ADDR_VAR 0 11
58701: PUSH
58702: DOUBLE
58703: LD_INT 1
58705: DEC
58706: ST_TO_ADDR
58707: LD_VAR 0 1
58711: PUSH
58712: FOR_TO
58713: IFFALSE 58760
// begin hc_class = 18 ;
58715: LD_ADDR_OWVAR 28
58719: PUSH
58720: LD_INT 18
58722: ST_TO_ADDR
// hc_gallery =  ;
58723: LD_ADDR_OWVAR 33
58727: PUSH
58728: LD_STRING 
58730: ST_TO_ADDR
// animal := CreateHuman ;
58731: LD_ADDR_VAR 0 12
58735: PUSH
58736: CALL_OW 44
58740: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58741: LD_VAR 0 12
58745: PPUSH
58746: LD_VAR 0 8
58750: PPUSH
58751: LD_INT 0
58753: PPUSH
58754: CALL 60808 0 3
// end ;
58758: GO 58712
58760: POP
58761: POP
// if tigers then
58762: LD_VAR 0 2
58766: IFFALSE 58850
// for i = 1 to tigers do
58768: LD_ADDR_VAR 0 11
58772: PUSH
58773: DOUBLE
58774: LD_INT 1
58776: DEC
58777: ST_TO_ADDR
58778: LD_VAR 0 2
58782: PUSH
58783: FOR_TO
58784: IFFALSE 58848
// begin hc_class = class_tiger ;
58786: LD_ADDR_OWVAR 28
58790: PUSH
58791: LD_INT 14
58793: ST_TO_ADDR
// hc_gallery =  ;
58794: LD_ADDR_OWVAR 33
58798: PUSH
58799: LD_STRING 
58801: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
58802: LD_ADDR_OWVAR 35
58806: PUSH
58807: LD_INT 7
58809: NEG
58810: PPUSH
58811: LD_INT 7
58813: PPUSH
58814: CALL_OW 12
58818: ST_TO_ADDR
// animal := CreateHuman ;
58819: LD_ADDR_VAR 0 12
58823: PUSH
58824: CALL_OW 44
58828: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58829: LD_VAR 0 12
58833: PPUSH
58834: LD_VAR 0 8
58838: PPUSH
58839: LD_INT 0
58841: PPUSH
58842: CALL 60808 0 3
// end ;
58846: GO 58783
58848: POP
58849: POP
// if apemans then
58850: LD_VAR 0 3
58854: IFFALSE 58977
// for i = 1 to apemans do
58856: LD_ADDR_VAR 0 11
58860: PUSH
58861: DOUBLE
58862: LD_INT 1
58864: DEC
58865: ST_TO_ADDR
58866: LD_VAR 0 3
58870: PUSH
58871: FOR_TO
58872: IFFALSE 58975
// begin hc_class = class_apeman ;
58874: LD_ADDR_OWVAR 28
58878: PUSH
58879: LD_INT 12
58881: ST_TO_ADDR
// hc_gallery =  ;
58882: LD_ADDR_OWVAR 33
58886: PUSH
58887: LD_STRING 
58889: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
58890: LD_ADDR_OWVAR 35
58894: PUSH
58895: LD_INT 5
58897: NEG
58898: PPUSH
58899: LD_INT 5
58901: PPUSH
58902: CALL_OW 12
58906: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
58907: LD_ADDR_OWVAR 31
58911: PUSH
58912: LD_INT 1
58914: PPUSH
58915: LD_INT 3
58917: PPUSH
58918: CALL_OW 12
58922: PUSH
58923: LD_INT 1
58925: PPUSH
58926: LD_INT 3
58928: PPUSH
58929: CALL_OW 12
58933: PUSH
58934: LD_INT 0
58936: PUSH
58937: LD_INT 0
58939: PUSH
58940: EMPTY
58941: LIST
58942: LIST
58943: LIST
58944: LIST
58945: ST_TO_ADDR
// animal := CreateHuman ;
58946: LD_ADDR_VAR 0 12
58950: PUSH
58951: CALL_OW 44
58955: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58956: LD_VAR 0 12
58960: PPUSH
58961: LD_VAR 0 8
58965: PPUSH
58966: LD_INT 0
58968: PPUSH
58969: CALL 60808 0 3
// end ;
58973: GO 58871
58975: POP
58976: POP
// if enchidnas then
58977: LD_VAR 0 4
58981: IFFALSE 59048
// for i = 1 to enchidnas do
58983: LD_ADDR_VAR 0 11
58987: PUSH
58988: DOUBLE
58989: LD_INT 1
58991: DEC
58992: ST_TO_ADDR
58993: LD_VAR 0 4
58997: PUSH
58998: FOR_TO
58999: IFFALSE 59046
// begin hc_class = 13 ;
59001: LD_ADDR_OWVAR 28
59005: PUSH
59006: LD_INT 13
59008: ST_TO_ADDR
// hc_gallery =  ;
59009: LD_ADDR_OWVAR 33
59013: PUSH
59014: LD_STRING 
59016: ST_TO_ADDR
// animal := CreateHuman ;
59017: LD_ADDR_VAR 0 12
59021: PUSH
59022: CALL_OW 44
59026: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59027: LD_VAR 0 12
59031: PPUSH
59032: LD_VAR 0 8
59036: PPUSH
59037: LD_INT 0
59039: PPUSH
59040: CALL 60808 0 3
// end ;
59044: GO 58998
59046: POP
59047: POP
// if fishes then
59048: LD_VAR 0 7
59052: IFFALSE 59119
// for i = 1 to fishes do
59054: LD_ADDR_VAR 0 11
59058: PUSH
59059: DOUBLE
59060: LD_INT 1
59062: DEC
59063: ST_TO_ADDR
59064: LD_VAR 0 7
59068: PUSH
59069: FOR_TO
59070: IFFALSE 59117
// begin hc_class = 20 ;
59072: LD_ADDR_OWVAR 28
59076: PUSH
59077: LD_INT 20
59079: ST_TO_ADDR
// hc_gallery =  ;
59080: LD_ADDR_OWVAR 33
59084: PUSH
59085: LD_STRING 
59087: ST_TO_ADDR
// animal := CreateHuman ;
59088: LD_ADDR_VAR 0 12
59092: PUSH
59093: CALL_OW 44
59097: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
59098: LD_VAR 0 12
59102: PPUSH
59103: LD_VAR 0 9
59107: PPUSH
59108: LD_INT 0
59110: PPUSH
59111: CALL 60808 0 3
// end ;
59115: GO 59069
59117: POP
59118: POP
// end ;
59119: LD_VAR 0 10
59123: RET
// export function WantHeal ( sci , unit ) ; begin
59124: LD_INT 0
59126: PPUSH
// if GetTaskList ( sci ) > 0 then
59127: LD_VAR 0 1
59131: PPUSH
59132: CALL_OW 437
59136: PUSH
59137: LD_INT 0
59139: GREATER
59140: IFFALSE 59210
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
59142: LD_VAR 0 1
59146: PPUSH
59147: CALL_OW 437
59151: PUSH
59152: LD_INT 1
59154: ARRAY
59155: PUSH
59156: LD_INT 1
59158: ARRAY
59159: PUSH
59160: LD_STRING l
59162: EQUAL
59163: PUSH
59164: LD_VAR 0 1
59168: PPUSH
59169: CALL_OW 437
59173: PUSH
59174: LD_INT 1
59176: ARRAY
59177: PUSH
59178: LD_INT 4
59180: ARRAY
59181: PUSH
59182: LD_VAR 0 2
59186: EQUAL
59187: AND
59188: IFFALSE 59200
// result := true else
59190: LD_ADDR_VAR 0 3
59194: PUSH
59195: LD_INT 1
59197: ST_TO_ADDR
59198: GO 59208
// result := false ;
59200: LD_ADDR_VAR 0 3
59204: PUSH
59205: LD_INT 0
59207: ST_TO_ADDR
// end else
59208: GO 59218
// result := false ;
59210: LD_ADDR_VAR 0 3
59214: PUSH
59215: LD_INT 0
59217: ST_TO_ADDR
// end ;
59218: LD_VAR 0 3
59222: RET
// export function HealTarget ( sci ) ; begin
59223: LD_INT 0
59225: PPUSH
// if not sci then
59226: LD_VAR 0 1
59230: NOT
59231: IFFALSE 59235
// exit ;
59233: GO 59300
// result := 0 ;
59235: LD_ADDR_VAR 0 2
59239: PUSH
59240: LD_INT 0
59242: ST_TO_ADDR
// if GetTaskList ( sci ) then
59243: LD_VAR 0 1
59247: PPUSH
59248: CALL_OW 437
59252: IFFALSE 59300
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
59254: LD_VAR 0 1
59258: PPUSH
59259: CALL_OW 437
59263: PUSH
59264: LD_INT 1
59266: ARRAY
59267: PUSH
59268: LD_INT 1
59270: ARRAY
59271: PUSH
59272: LD_STRING l
59274: EQUAL
59275: IFFALSE 59300
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
59277: LD_ADDR_VAR 0 2
59281: PUSH
59282: LD_VAR 0 1
59286: PPUSH
59287: CALL_OW 437
59291: PUSH
59292: LD_INT 1
59294: ARRAY
59295: PUSH
59296: LD_INT 4
59298: ARRAY
59299: ST_TO_ADDR
// end ;
59300: LD_VAR 0 2
59304: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
59305: LD_INT 0
59307: PPUSH
59308: PPUSH
59309: PPUSH
59310: PPUSH
// if not base_units then
59311: LD_VAR 0 1
59315: NOT
59316: IFFALSE 59320
// exit ;
59318: GO 59407
// result := false ;
59320: LD_ADDR_VAR 0 2
59324: PUSH
59325: LD_INT 0
59327: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
59328: LD_ADDR_VAR 0 5
59332: PUSH
59333: LD_VAR 0 1
59337: PPUSH
59338: LD_INT 21
59340: PUSH
59341: LD_INT 3
59343: PUSH
59344: EMPTY
59345: LIST
59346: LIST
59347: PPUSH
59348: CALL_OW 72
59352: ST_TO_ADDR
// if not tmp then
59353: LD_VAR 0 5
59357: NOT
59358: IFFALSE 59362
// exit ;
59360: GO 59407
// for i in tmp do
59362: LD_ADDR_VAR 0 3
59366: PUSH
59367: LD_VAR 0 5
59371: PUSH
59372: FOR_IN
59373: IFFALSE 59405
// begin result := EnemyInRange ( i , 22 ) ;
59375: LD_ADDR_VAR 0 2
59379: PUSH
59380: LD_VAR 0 3
59384: PPUSH
59385: LD_INT 22
59387: PPUSH
59388: CALL 57643 0 2
59392: ST_TO_ADDR
// if result then
59393: LD_VAR 0 2
59397: IFFALSE 59403
// exit ;
59399: POP
59400: POP
59401: GO 59407
// end ;
59403: GO 59372
59405: POP
59406: POP
// end ;
59407: LD_VAR 0 2
59411: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
59412: LD_INT 0
59414: PPUSH
59415: PPUSH
// if not units then
59416: LD_VAR 0 1
59420: NOT
59421: IFFALSE 59425
// exit ;
59423: GO 59495
// result := [ ] ;
59425: LD_ADDR_VAR 0 3
59429: PUSH
59430: EMPTY
59431: ST_TO_ADDR
// for i in units do
59432: LD_ADDR_VAR 0 4
59436: PUSH
59437: LD_VAR 0 1
59441: PUSH
59442: FOR_IN
59443: IFFALSE 59493
// if GetTag ( i ) = tag then
59445: LD_VAR 0 4
59449: PPUSH
59450: CALL_OW 110
59454: PUSH
59455: LD_VAR 0 2
59459: EQUAL
59460: IFFALSE 59491
// result := Insert ( result , result + 1 , i ) ;
59462: LD_ADDR_VAR 0 3
59466: PUSH
59467: LD_VAR 0 3
59471: PPUSH
59472: LD_VAR 0 3
59476: PUSH
59477: LD_INT 1
59479: PLUS
59480: PPUSH
59481: LD_VAR 0 4
59485: PPUSH
59486: CALL_OW 2
59490: ST_TO_ADDR
59491: GO 59442
59493: POP
59494: POP
// end ;
59495: LD_VAR 0 3
59499: RET
// export function IsDriver ( un ) ; begin
59500: LD_INT 0
59502: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
59503: LD_ADDR_VAR 0 2
59507: PUSH
59508: LD_VAR 0 1
59512: PUSH
59513: LD_INT 55
59515: PUSH
59516: EMPTY
59517: LIST
59518: PPUSH
59519: CALL_OW 69
59523: IN
59524: ST_TO_ADDR
// end ;
59525: LD_VAR 0 2
59529: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
59530: LD_INT 0
59532: PPUSH
59533: PPUSH
// list := [ ] ;
59534: LD_ADDR_VAR 0 5
59538: PUSH
59539: EMPTY
59540: ST_TO_ADDR
// case d of 0 :
59541: LD_VAR 0 3
59545: PUSH
59546: LD_INT 0
59548: DOUBLE
59549: EQUAL
59550: IFTRUE 59554
59552: GO 59687
59554: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
59555: LD_ADDR_VAR 0 5
59559: PUSH
59560: LD_VAR 0 1
59564: PUSH
59565: LD_INT 4
59567: MINUS
59568: PUSH
59569: LD_VAR 0 2
59573: PUSH
59574: LD_INT 4
59576: MINUS
59577: PUSH
59578: LD_INT 2
59580: PUSH
59581: EMPTY
59582: LIST
59583: LIST
59584: LIST
59585: PUSH
59586: LD_VAR 0 1
59590: PUSH
59591: LD_INT 3
59593: MINUS
59594: PUSH
59595: LD_VAR 0 2
59599: PUSH
59600: LD_INT 1
59602: PUSH
59603: EMPTY
59604: LIST
59605: LIST
59606: LIST
59607: PUSH
59608: LD_VAR 0 1
59612: PUSH
59613: LD_INT 4
59615: PLUS
59616: PUSH
59617: LD_VAR 0 2
59621: PUSH
59622: LD_INT 4
59624: PUSH
59625: EMPTY
59626: LIST
59627: LIST
59628: LIST
59629: PUSH
59630: LD_VAR 0 1
59634: PUSH
59635: LD_INT 3
59637: PLUS
59638: PUSH
59639: LD_VAR 0 2
59643: PUSH
59644: LD_INT 3
59646: PLUS
59647: PUSH
59648: LD_INT 5
59650: PUSH
59651: EMPTY
59652: LIST
59653: LIST
59654: LIST
59655: PUSH
59656: LD_VAR 0 1
59660: PUSH
59661: LD_VAR 0 2
59665: PUSH
59666: LD_INT 4
59668: PLUS
59669: PUSH
59670: LD_INT 0
59672: PUSH
59673: EMPTY
59674: LIST
59675: LIST
59676: LIST
59677: PUSH
59678: EMPTY
59679: LIST
59680: LIST
59681: LIST
59682: LIST
59683: LIST
59684: ST_TO_ADDR
// end ; 1 :
59685: GO 60385
59687: LD_INT 1
59689: DOUBLE
59690: EQUAL
59691: IFTRUE 59695
59693: GO 59828
59695: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
59696: LD_ADDR_VAR 0 5
59700: PUSH
59701: LD_VAR 0 1
59705: PUSH
59706: LD_VAR 0 2
59710: PUSH
59711: LD_INT 4
59713: MINUS
59714: PUSH
59715: LD_INT 3
59717: PUSH
59718: EMPTY
59719: LIST
59720: LIST
59721: LIST
59722: PUSH
59723: LD_VAR 0 1
59727: PUSH
59728: LD_INT 3
59730: MINUS
59731: PUSH
59732: LD_VAR 0 2
59736: PUSH
59737: LD_INT 3
59739: MINUS
59740: PUSH
59741: LD_INT 2
59743: PUSH
59744: EMPTY
59745: LIST
59746: LIST
59747: LIST
59748: PUSH
59749: LD_VAR 0 1
59753: PUSH
59754: LD_INT 4
59756: MINUS
59757: PUSH
59758: LD_VAR 0 2
59762: PUSH
59763: LD_INT 1
59765: PUSH
59766: EMPTY
59767: LIST
59768: LIST
59769: LIST
59770: PUSH
59771: LD_VAR 0 1
59775: PUSH
59776: LD_VAR 0 2
59780: PUSH
59781: LD_INT 3
59783: PLUS
59784: PUSH
59785: LD_INT 0
59787: PUSH
59788: EMPTY
59789: LIST
59790: LIST
59791: LIST
59792: PUSH
59793: LD_VAR 0 1
59797: PUSH
59798: LD_INT 4
59800: PLUS
59801: PUSH
59802: LD_VAR 0 2
59806: PUSH
59807: LD_INT 4
59809: PLUS
59810: PUSH
59811: LD_INT 5
59813: PUSH
59814: EMPTY
59815: LIST
59816: LIST
59817: LIST
59818: PUSH
59819: EMPTY
59820: LIST
59821: LIST
59822: LIST
59823: LIST
59824: LIST
59825: ST_TO_ADDR
// end ; 2 :
59826: GO 60385
59828: LD_INT 2
59830: DOUBLE
59831: EQUAL
59832: IFTRUE 59836
59834: GO 59965
59836: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
59837: LD_ADDR_VAR 0 5
59841: PUSH
59842: LD_VAR 0 1
59846: PUSH
59847: LD_VAR 0 2
59851: PUSH
59852: LD_INT 3
59854: MINUS
59855: PUSH
59856: LD_INT 3
59858: PUSH
59859: EMPTY
59860: LIST
59861: LIST
59862: LIST
59863: PUSH
59864: LD_VAR 0 1
59868: PUSH
59869: LD_INT 4
59871: PLUS
59872: PUSH
59873: LD_VAR 0 2
59877: PUSH
59878: LD_INT 4
59880: PUSH
59881: EMPTY
59882: LIST
59883: LIST
59884: LIST
59885: PUSH
59886: LD_VAR 0 1
59890: PUSH
59891: LD_VAR 0 2
59895: PUSH
59896: LD_INT 4
59898: PLUS
59899: PUSH
59900: LD_INT 0
59902: PUSH
59903: EMPTY
59904: LIST
59905: LIST
59906: LIST
59907: PUSH
59908: LD_VAR 0 1
59912: PUSH
59913: LD_INT 3
59915: MINUS
59916: PUSH
59917: LD_VAR 0 2
59921: PUSH
59922: LD_INT 1
59924: PUSH
59925: EMPTY
59926: LIST
59927: LIST
59928: LIST
59929: PUSH
59930: LD_VAR 0 1
59934: PUSH
59935: LD_INT 4
59937: MINUS
59938: PUSH
59939: LD_VAR 0 2
59943: PUSH
59944: LD_INT 4
59946: MINUS
59947: PUSH
59948: LD_INT 2
59950: PUSH
59951: EMPTY
59952: LIST
59953: LIST
59954: LIST
59955: PUSH
59956: EMPTY
59957: LIST
59958: LIST
59959: LIST
59960: LIST
59961: LIST
59962: ST_TO_ADDR
// end ; 3 :
59963: GO 60385
59965: LD_INT 3
59967: DOUBLE
59968: EQUAL
59969: IFTRUE 59973
59971: GO 60106
59973: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
59974: LD_ADDR_VAR 0 5
59978: PUSH
59979: LD_VAR 0 1
59983: PUSH
59984: LD_INT 3
59986: PLUS
59987: PUSH
59988: LD_VAR 0 2
59992: PUSH
59993: LD_INT 4
59995: PUSH
59996: EMPTY
59997: LIST
59998: LIST
59999: LIST
60000: PUSH
60001: LD_VAR 0 1
60005: PUSH
60006: LD_INT 4
60008: PLUS
60009: PUSH
60010: LD_VAR 0 2
60014: PUSH
60015: LD_INT 4
60017: PLUS
60018: PUSH
60019: LD_INT 5
60021: PUSH
60022: EMPTY
60023: LIST
60024: LIST
60025: LIST
60026: PUSH
60027: LD_VAR 0 1
60031: PUSH
60032: LD_INT 4
60034: MINUS
60035: PUSH
60036: LD_VAR 0 2
60040: PUSH
60041: LD_INT 1
60043: PUSH
60044: EMPTY
60045: LIST
60046: LIST
60047: LIST
60048: PUSH
60049: LD_VAR 0 1
60053: PUSH
60054: LD_VAR 0 2
60058: PUSH
60059: LD_INT 4
60061: MINUS
60062: PUSH
60063: LD_INT 3
60065: PUSH
60066: EMPTY
60067: LIST
60068: LIST
60069: LIST
60070: PUSH
60071: LD_VAR 0 1
60075: PUSH
60076: LD_INT 3
60078: MINUS
60079: PUSH
60080: LD_VAR 0 2
60084: PUSH
60085: LD_INT 3
60087: MINUS
60088: PUSH
60089: LD_INT 2
60091: PUSH
60092: EMPTY
60093: LIST
60094: LIST
60095: LIST
60096: PUSH
60097: EMPTY
60098: LIST
60099: LIST
60100: LIST
60101: LIST
60102: LIST
60103: ST_TO_ADDR
// end ; 4 :
60104: GO 60385
60106: LD_INT 4
60108: DOUBLE
60109: EQUAL
60110: IFTRUE 60114
60112: GO 60247
60114: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
60115: LD_ADDR_VAR 0 5
60119: PUSH
60120: LD_VAR 0 1
60124: PUSH
60125: LD_VAR 0 2
60129: PUSH
60130: LD_INT 4
60132: PLUS
60133: PUSH
60134: LD_INT 0
60136: PUSH
60137: EMPTY
60138: LIST
60139: LIST
60140: LIST
60141: PUSH
60142: LD_VAR 0 1
60146: PUSH
60147: LD_INT 3
60149: PLUS
60150: PUSH
60151: LD_VAR 0 2
60155: PUSH
60156: LD_INT 3
60158: PLUS
60159: PUSH
60160: LD_INT 5
60162: PUSH
60163: EMPTY
60164: LIST
60165: LIST
60166: LIST
60167: PUSH
60168: LD_VAR 0 1
60172: PUSH
60173: LD_INT 4
60175: PLUS
60176: PUSH
60177: LD_VAR 0 2
60181: PUSH
60182: LD_INT 4
60184: PUSH
60185: EMPTY
60186: LIST
60187: LIST
60188: LIST
60189: PUSH
60190: LD_VAR 0 1
60194: PUSH
60195: LD_VAR 0 2
60199: PUSH
60200: LD_INT 3
60202: MINUS
60203: PUSH
60204: LD_INT 3
60206: PUSH
60207: EMPTY
60208: LIST
60209: LIST
60210: LIST
60211: PUSH
60212: LD_VAR 0 1
60216: PUSH
60217: LD_INT 4
60219: MINUS
60220: PUSH
60221: LD_VAR 0 2
60225: PUSH
60226: LD_INT 4
60228: MINUS
60229: PUSH
60230: LD_INT 2
60232: PUSH
60233: EMPTY
60234: LIST
60235: LIST
60236: LIST
60237: PUSH
60238: EMPTY
60239: LIST
60240: LIST
60241: LIST
60242: LIST
60243: LIST
60244: ST_TO_ADDR
// end ; 5 :
60245: GO 60385
60247: LD_INT 5
60249: DOUBLE
60250: EQUAL
60251: IFTRUE 60255
60253: GO 60384
60255: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
60256: LD_ADDR_VAR 0 5
60260: PUSH
60261: LD_VAR 0 1
60265: PUSH
60266: LD_INT 4
60268: MINUS
60269: PUSH
60270: LD_VAR 0 2
60274: PUSH
60275: LD_INT 1
60277: PUSH
60278: EMPTY
60279: LIST
60280: LIST
60281: LIST
60282: PUSH
60283: LD_VAR 0 1
60287: PUSH
60288: LD_VAR 0 2
60292: PUSH
60293: LD_INT 4
60295: MINUS
60296: PUSH
60297: LD_INT 3
60299: PUSH
60300: EMPTY
60301: LIST
60302: LIST
60303: LIST
60304: PUSH
60305: LD_VAR 0 1
60309: PUSH
60310: LD_INT 4
60312: PLUS
60313: PUSH
60314: LD_VAR 0 2
60318: PUSH
60319: LD_INT 4
60321: PLUS
60322: PUSH
60323: LD_INT 5
60325: PUSH
60326: EMPTY
60327: LIST
60328: LIST
60329: LIST
60330: PUSH
60331: LD_VAR 0 1
60335: PUSH
60336: LD_INT 3
60338: PLUS
60339: PUSH
60340: LD_VAR 0 2
60344: PUSH
60345: LD_INT 4
60347: PUSH
60348: EMPTY
60349: LIST
60350: LIST
60351: LIST
60352: PUSH
60353: LD_VAR 0 1
60357: PUSH
60358: LD_VAR 0 2
60362: PUSH
60363: LD_INT 3
60365: PLUS
60366: PUSH
60367: LD_INT 0
60369: PUSH
60370: EMPTY
60371: LIST
60372: LIST
60373: LIST
60374: PUSH
60375: EMPTY
60376: LIST
60377: LIST
60378: LIST
60379: LIST
60380: LIST
60381: ST_TO_ADDR
// end ; end ;
60382: GO 60385
60384: POP
// result := list ;
60385: LD_ADDR_VAR 0 4
60389: PUSH
60390: LD_VAR 0 5
60394: ST_TO_ADDR
// end ;
60395: LD_VAR 0 4
60399: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
60400: LD_INT 0
60402: PPUSH
60403: PPUSH
60404: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
60405: LD_VAR 0 1
60409: NOT
60410: PUSH
60411: LD_VAR 0 2
60415: PUSH
60416: LD_INT 1
60418: PUSH
60419: LD_INT 2
60421: PUSH
60422: LD_INT 3
60424: PUSH
60425: LD_INT 4
60427: PUSH
60428: EMPTY
60429: LIST
60430: LIST
60431: LIST
60432: LIST
60433: IN
60434: NOT
60435: OR
60436: IFFALSE 60440
// exit ;
60438: GO 60532
// tmp := [ ] ;
60440: LD_ADDR_VAR 0 5
60444: PUSH
60445: EMPTY
60446: ST_TO_ADDR
// for i in units do
60447: LD_ADDR_VAR 0 4
60451: PUSH
60452: LD_VAR 0 1
60456: PUSH
60457: FOR_IN
60458: IFFALSE 60501
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
60460: LD_ADDR_VAR 0 5
60464: PUSH
60465: LD_VAR 0 5
60469: PPUSH
60470: LD_VAR 0 5
60474: PUSH
60475: LD_INT 1
60477: PLUS
60478: PPUSH
60479: LD_VAR 0 4
60483: PPUSH
60484: LD_VAR 0 2
60488: PPUSH
60489: CALL_OW 259
60493: PPUSH
60494: CALL_OW 2
60498: ST_TO_ADDR
60499: GO 60457
60501: POP
60502: POP
// if not tmp then
60503: LD_VAR 0 5
60507: NOT
60508: IFFALSE 60512
// exit ;
60510: GO 60532
// result := SortListByListDesc ( units , tmp ) ;
60512: LD_ADDR_VAR 0 3
60516: PUSH
60517: LD_VAR 0 1
60521: PPUSH
60522: LD_VAR 0 5
60526: PPUSH
60527: CALL_OW 77
60531: ST_TO_ADDR
// end ;
60532: LD_VAR 0 3
60536: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
60537: LD_INT 0
60539: PPUSH
60540: PPUSH
60541: PPUSH
// result := false ;
60542: LD_ADDR_VAR 0 3
60546: PUSH
60547: LD_INT 0
60549: ST_TO_ADDR
// x := GetX ( building ) ;
60550: LD_ADDR_VAR 0 4
60554: PUSH
60555: LD_VAR 0 2
60559: PPUSH
60560: CALL_OW 250
60564: ST_TO_ADDR
// y := GetY ( building ) ;
60565: LD_ADDR_VAR 0 5
60569: PUSH
60570: LD_VAR 0 2
60574: PPUSH
60575: CALL_OW 251
60579: ST_TO_ADDR
// if not building or not x or not y then
60580: LD_VAR 0 2
60584: NOT
60585: PUSH
60586: LD_VAR 0 4
60590: NOT
60591: OR
60592: PUSH
60593: LD_VAR 0 5
60597: NOT
60598: OR
60599: IFFALSE 60603
// exit ;
60601: GO 60695
// if GetTaskList ( unit ) then
60603: LD_VAR 0 1
60607: PPUSH
60608: CALL_OW 437
60612: IFFALSE 60695
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
60614: LD_STRING e
60616: PUSH
60617: LD_VAR 0 1
60621: PPUSH
60622: CALL_OW 437
60626: PUSH
60627: LD_INT 1
60629: ARRAY
60630: PUSH
60631: LD_INT 1
60633: ARRAY
60634: EQUAL
60635: PUSH
60636: LD_VAR 0 4
60640: PUSH
60641: LD_VAR 0 1
60645: PPUSH
60646: CALL_OW 437
60650: PUSH
60651: LD_INT 1
60653: ARRAY
60654: PUSH
60655: LD_INT 2
60657: ARRAY
60658: EQUAL
60659: AND
60660: PUSH
60661: LD_VAR 0 5
60665: PUSH
60666: LD_VAR 0 1
60670: PPUSH
60671: CALL_OW 437
60675: PUSH
60676: LD_INT 1
60678: ARRAY
60679: PUSH
60680: LD_INT 3
60682: ARRAY
60683: EQUAL
60684: AND
60685: IFFALSE 60695
// result := true end ;
60687: LD_ADDR_VAR 0 3
60691: PUSH
60692: LD_INT 1
60694: ST_TO_ADDR
// end ;
60695: LD_VAR 0 3
60699: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
60700: LD_INT 0
60702: PPUSH
// result := false ;
60703: LD_ADDR_VAR 0 4
60707: PUSH
60708: LD_INT 0
60710: ST_TO_ADDR
// if GetTaskList ( unit ) then
60711: LD_VAR 0 1
60715: PPUSH
60716: CALL_OW 437
60720: IFFALSE 60803
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
60722: LD_STRING M
60724: PUSH
60725: LD_VAR 0 1
60729: PPUSH
60730: CALL_OW 437
60734: PUSH
60735: LD_INT 1
60737: ARRAY
60738: PUSH
60739: LD_INT 1
60741: ARRAY
60742: EQUAL
60743: PUSH
60744: LD_VAR 0 2
60748: PUSH
60749: LD_VAR 0 1
60753: PPUSH
60754: CALL_OW 437
60758: PUSH
60759: LD_INT 1
60761: ARRAY
60762: PUSH
60763: LD_INT 2
60765: ARRAY
60766: EQUAL
60767: AND
60768: PUSH
60769: LD_VAR 0 3
60773: PUSH
60774: LD_VAR 0 1
60778: PPUSH
60779: CALL_OW 437
60783: PUSH
60784: LD_INT 1
60786: ARRAY
60787: PUSH
60788: LD_INT 3
60790: ARRAY
60791: EQUAL
60792: AND
60793: IFFALSE 60803
// result := true ;
60795: LD_ADDR_VAR 0 4
60799: PUSH
60800: LD_INT 1
60802: ST_TO_ADDR
// end ; end ;
60803: LD_VAR 0 4
60807: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
60808: LD_INT 0
60810: PPUSH
60811: PPUSH
60812: PPUSH
60813: PPUSH
// if not unit or not area then
60814: LD_VAR 0 1
60818: NOT
60819: PUSH
60820: LD_VAR 0 2
60824: NOT
60825: OR
60826: IFFALSE 60830
// exit ;
60828: GO 60994
// tmp := AreaToList ( area , i ) ;
60830: LD_ADDR_VAR 0 6
60834: PUSH
60835: LD_VAR 0 2
60839: PPUSH
60840: LD_VAR 0 5
60844: PPUSH
60845: CALL_OW 517
60849: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
60850: LD_ADDR_VAR 0 5
60854: PUSH
60855: DOUBLE
60856: LD_INT 1
60858: DEC
60859: ST_TO_ADDR
60860: LD_VAR 0 6
60864: PUSH
60865: LD_INT 1
60867: ARRAY
60868: PUSH
60869: FOR_TO
60870: IFFALSE 60992
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
60872: LD_ADDR_VAR 0 7
60876: PUSH
60877: LD_VAR 0 6
60881: PUSH
60882: LD_INT 1
60884: ARRAY
60885: PUSH
60886: LD_VAR 0 5
60890: ARRAY
60891: PUSH
60892: LD_VAR 0 6
60896: PUSH
60897: LD_INT 2
60899: ARRAY
60900: PUSH
60901: LD_VAR 0 5
60905: ARRAY
60906: PUSH
60907: EMPTY
60908: LIST
60909: LIST
60910: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
60911: LD_VAR 0 7
60915: PUSH
60916: LD_INT 1
60918: ARRAY
60919: PPUSH
60920: LD_VAR 0 7
60924: PUSH
60925: LD_INT 2
60927: ARRAY
60928: PPUSH
60929: CALL_OW 428
60933: PUSH
60934: LD_INT 0
60936: EQUAL
60937: IFFALSE 60990
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
60939: LD_VAR 0 1
60943: PPUSH
60944: LD_VAR 0 7
60948: PUSH
60949: LD_INT 1
60951: ARRAY
60952: PPUSH
60953: LD_VAR 0 7
60957: PUSH
60958: LD_INT 2
60960: ARRAY
60961: PPUSH
60962: LD_VAR 0 3
60966: PPUSH
60967: CALL_OW 48
// result := IsPlaced ( unit ) ;
60971: LD_ADDR_VAR 0 4
60975: PUSH
60976: LD_VAR 0 1
60980: PPUSH
60981: CALL_OW 305
60985: ST_TO_ADDR
// exit ;
60986: POP
60987: POP
60988: GO 60994
// end ; end ;
60990: GO 60869
60992: POP
60993: POP
// end ;
60994: LD_VAR 0 4
60998: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
60999: LD_INT 0
61001: PPUSH
61002: PPUSH
61003: PPUSH
// if not side or side > 8 then
61004: LD_VAR 0 1
61008: NOT
61009: PUSH
61010: LD_VAR 0 1
61014: PUSH
61015: LD_INT 8
61017: GREATER
61018: OR
61019: IFFALSE 61023
// exit ;
61021: GO 61210
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
61023: LD_ADDR_VAR 0 4
61027: PUSH
61028: LD_INT 22
61030: PUSH
61031: LD_VAR 0 1
61035: PUSH
61036: EMPTY
61037: LIST
61038: LIST
61039: PUSH
61040: LD_INT 21
61042: PUSH
61043: LD_INT 3
61045: PUSH
61046: EMPTY
61047: LIST
61048: LIST
61049: PUSH
61050: EMPTY
61051: LIST
61052: LIST
61053: PPUSH
61054: CALL_OW 69
61058: ST_TO_ADDR
// if not tmp then
61059: LD_VAR 0 4
61063: NOT
61064: IFFALSE 61068
// exit ;
61066: GO 61210
// enable_addtolog := true ;
61068: LD_ADDR_OWVAR 81
61072: PUSH
61073: LD_INT 1
61075: ST_TO_ADDR
// AddToLog ( [ ) ;
61076: LD_STRING [
61078: PPUSH
61079: CALL_OW 561
// for i in tmp do
61083: LD_ADDR_VAR 0 3
61087: PUSH
61088: LD_VAR 0 4
61092: PUSH
61093: FOR_IN
61094: IFFALSE 61201
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
61096: LD_STRING [
61098: PUSH
61099: LD_VAR 0 3
61103: PPUSH
61104: CALL_OW 266
61108: STR
61109: PUSH
61110: LD_STRING , 
61112: STR
61113: PUSH
61114: LD_VAR 0 3
61118: PPUSH
61119: CALL_OW 250
61123: STR
61124: PUSH
61125: LD_STRING , 
61127: STR
61128: PUSH
61129: LD_VAR 0 3
61133: PPUSH
61134: CALL_OW 251
61138: STR
61139: PUSH
61140: LD_STRING , 
61142: STR
61143: PUSH
61144: LD_VAR 0 3
61148: PPUSH
61149: CALL_OW 254
61153: STR
61154: PUSH
61155: LD_STRING , 
61157: STR
61158: PUSH
61159: LD_VAR 0 3
61163: PPUSH
61164: LD_INT 1
61166: PPUSH
61167: CALL_OW 268
61171: STR
61172: PUSH
61173: LD_STRING , 
61175: STR
61176: PUSH
61177: LD_VAR 0 3
61181: PPUSH
61182: LD_INT 2
61184: PPUSH
61185: CALL_OW 268
61189: STR
61190: PUSH
61191: LD_STRING ],
61193: STR
61194: PPUSH
61195: CALL_OW 561
// end ;
61199: GO 61093
61201: POP
61202: POP
// AddToLog ( ]; ) ;
61203: LD_STRING ];
61205: PPUSH
61206: CALL_OW 561
// end ;
61210: LD_VAR 0 2
61214: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
61215: LD_INT 0
61217: PPUSH
61218: PPUSH
61219: PPUSH
61220: PPUSH
61221: PPUSH
// if not area or not rate or not max then
61222: LD_VAR 0 1
61226: NOT
61227: PUSH
61228: LD_VAR 0 2
61232: NOT
61233: OR
61234: PUSH
61235: LD_VAR 0 4
61239: NOT
61240: OR
61241: IFFALSE 61245
// exit ;
61243: GO 61437
// while 1 do
61245: LD_INT 1
61247: IFFALSE 61437
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
61249: LD_ADDR_VAR 0 9
61253: PUSH
61254: LD_VAR 0 1
61258: PPUSH
61259: LD_INT 1
61261: PPUSH
61262: CALL_OW 287
61266: PUSH
61267: LD_INT 10
61269: MUL
61270: ST_TO_ADDR
// r := rate / 10 ;
61271: LD_ADDR_VAR 0 7
61275: PUSH
61276: LD_VAR 0 2
61280: PUSH
61281: LD_INT 10
61283: DIVREAL
61284: ST_TO_ADDR
// time := 1 1$00 ;
61285: LD_ADDR_VAR 0 8
61289: PUSH
61290: LD_INT 2100
61292: ST_TO_ADDR
// if amount < min then
61293: LD_VAR 0 9
61297: PUSH
61298: LD_VAR 0 3
61302: LESS
61303: IFFALSE 61321
// r := r * 2 else
61305: LD_ADDR_VAR 0 7
61309: PUSH
61310: LD_VAR 0 7
61314: PUSH
61315: LD_INT 2
61317: MUL
61318: ST_TO_ADDR
61319: GO 61347
// if amount > max then
61321: LD_VAR 0 9
61325: PUSH
61326: LD_VAR 0 4
61330: GREATER
61331: IFFALSE 61347
// r := r / 2 ;
61333: LD_ADDR_VAR 0 7
61337: PUSH
61338: LD_VAR 0 7
61342: PUSH
61343: LD_INT 2
61345: DIVREAL
61346: ST_TO_ADDR
// time := time / r ;
61347: LD_ADDR_VAR 0 8
61351: PUSH
61352: LD_VAR 0 8
61356: PUSH
61357: LD_VAR 0 7
61361: DIVREAL
61362: ST_TO_ADDR
// if time < 0 then
61363: LD_VAR 0 8
61367: PUSH
61368: LD_INT 0
61370: LESS
61371: IFFALSE 61388
// time := time * - 1 ;
61373: LD_ADDR_VAR 0 8
61377: PUSH
61378: LD_VAR 0 8
61382: PUSH
61383: LD_INT 1
61385: NEG
61386: MUL
61387: ST_TO_ADDR
// wait ( time ) ;
61388: LD_VAR 0 8
61392: PPUSH
61393: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
61397: LD_INT 35
61399: PPUSH
61400: LD_INT 875
61402: PPUSH
61403: CALL_OW 12
61407: PPUSH
61408: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
61412: LD_INT 1
61414: PPUSH
61415: LD_INT 5
61417: PPUSH
61418: CALL_OW 12
61422: PPUSH
61423: LD_VAR 0 1
61427: PPUSH
61428: LD_INT 1
61430: PPUSH
61431: CALL_OW 55
// end ;
61435: GO 61245
// end ;
61437: LD_VAR 0 5
61441: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
61442: LD_INT 0
61444: PPUSH
61445: PPUSH
61446: PPUSH
61447: PPUSH
61448: PPUSH
61449: PPUSH
61450: PPUSH
61451: PPUSH
// if not turrets or not factories then
61452: LD_VAR 0 1
61456: NOT
61457: PUSH
61458: LD_VAR 0 2
61462: NOT
61463: OR
61464: IFFALSE 61468
// exit ;
61466: GO 61775
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
61468: LD_ADDR_VAR 0 10
61472: PUSH
61473: LD_INT 5
61475: PUSH
61476: LD_INT 6
61478: PUSH
61479: EMPTY
61480: LIST
61481: LIST
61482: PUSH
61483: LD_INT 2
61485: PUSH
61486: LD_INT 4
61488: PUSH
61489: EMPTY
61490: LIST
61491: LIST
61492: PUSH
61493: LD_INT 3
61495: PUSH
61496: LD_INT 5
61498: PUSH
61499: EMPTY
61500: LIST
61501: LIST
61502: PUSH
61503: EMPTY
61504: LIST
61505: LIST
61506: LIST
61507: PUSH
61508: LD_INT 24
61510: PUSH
61511: LD_INT 25
61513: PUSH
61514: EMPTY
61515: LIST
61516: LIST
61517: PUSH
61518: LD_INT 23
61520: PUSH
61521: LD_INT 27
61523: PUSH
61524: EMPTY
61525: LIST
61526: LIST
61527: PUSH
61528: EMPTY
61529: LIST
61530: LIST
61531: PUSH
61532: LD_INT 42
61534: PUSH
61535: LD_INT 43
61537: PUSH
61538: EMPTY
61539: LIST
61540: LIST
61541: PUSH
61542: LD_INT 44
61544: PUSH
61545: LD_INT 46
61547: PUSH
61548: EMPTY
61549: LIST
61550: LIST
61551: PUSH
61552: LD_INT 45
61554: PUSH
61555: LD_INT 47
61557: PUSH
61558: EMPTY
61559: LIST
61560: LIST
61561: PUSH
61562: EMPTY
61563: LIST
61564: LIST
61565: LIST
61566: PUSH
61567: EMPTY
61568: LIST
61569: LIST
61570: LIST
61571: ST_TO_ADDR
// result := [ ] ;
61572: LD_ADDR_VAR 0 3
61576: PUSH
61577: EMPTY
61578: ST_TO_ADDR
// for i in turrets do
61579: LD_ADDR_VAR 0 4
61583: PUSH
61584: LD_VAR 0 1
61588: PUSH
61589: FOR_IN
61590: IFFALSE 61773
// begin nat := GetNation ( i ) ;
61592: LD_ADDR_VAR 0 7
61596: PUSH
61597: LD_VAR 0 4
61601: PPUSH
61602: CALL_OW 248
61606: ST_TO_ADDR
// weapon := 0 ;
61607: LD_ADDR_VAR 0 8
61611: PUSH
61612: LD_INT 0
61614: ST_TO_ADDR
// if not nat then
61615: LD_VAR 0 7
61619: NOT
61620: IFFALSE 61624
// continue ;
61622: GO 61589
// for j in list [ nat ] do
61624: LD_ADDR_VAR 0 5
61628: PUSH
61629: LD_VAR 0 10
61633: PUSH
61634: LD_VAR 0 7
61638: ARRAY
61639: PUSH
61640: FOR_IN
61641: IFFALSE 61682
// if GetBWeapon ( i ) = j [ 1 ] then
61643: LD_VAR 0 4
61647: PPUSH
61648: CALL_OW 269
61652: PUSH
61653: LD_VAR 0 5
61657: PUSH
61658: LD_INT 1
61660: ARRAY
61661: EQUAL
61662: IFFALSE 61680
// begin weapon := j [ 2 ] ;
61664: LD_ADDR_VAR 0 8
61668: PUSH
61669: LD_VAR 0 5
61673: PUSH
61674: LD_INT 2
61676: ARRAY
61677: ST_TO_ADDR
// break ;
61678: GO 61682
// end ;
61680: GO 61640
61682: POP
61683: POP
// if not weapon then
61684: LD_VAR 0 8
61688: NOT
61689: IFFALSE 61693
// continue ;
61691: GO 61589
// for k in factories do
61693: LD_ADDR_VAR 0 6
61697: PUSH
61698: LD_VAR 0 2
61702: PUSH
61703: FOR_IN
61704: IFFALSE 61769
// begin weapons := AvailableWeaponList ( k ) ;
61706: LD_ADDR_VAR 0 9
61710: PUSH
61711: LD_VAR 0 6
61715: PPUSH
61716: CALL_OW 478
61720: ST_TO_ADDR
// if not weapons then
61721: LD_VAR 0 9
61725: NOT
61726: IFFALSE 61730
// continue ;
61728: GO 61703
// if weapon in weapons then
61730: LD_VAR 0 8
61734: PUSH
61735: LD_VAR 0 9
61739: IN
61740: IFFALSE 61767
// begin result := [ i , weapon ] ;
61742: LD_ADDR_VAR 0 3
61746: PUSH
61747: LD_VAR 0 4
61751: PUSH
61752: LD_VAR 0 8
61756: PUSH
61757: EMPTY
61758: LIST
61759: LIST
61760: ST_TO_ADDR
// exit ;
61761: POP
61762: POP
61763: POP
61764: POP
61765: GO 61775
// end ; end ;
61767: GO 61703
61769: POP
61770: POP
// end ;
61771: GO 61589
61773: POP
61774: POP
// end ;
61775: LD_VAR 0 3
61779: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
61780: LD_INT 0
61782: PPUSH
// if not side or side > 8 then
61783: LD_VAR 0 3
61787: NOT
61788: PUSH
61789: LD_VAR 0 3
61793: PUSH
61794: LD_INT 8
61796: GREATER
61797: OR
61798: IFFALSE 61802
// exit ;
61800: GO 61861
// if not range then
61802: LD_VAR 0 4
61806: NOT
61807: IFFALSE 61818
// range := - 12 ;
61809: LD_ADDR_VAR 0 4
61813: PUSH
61814: LD_INT 12
61816: NEG
61817: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
61818: LD_VAR 0 1
61822: PPUSH
61823: LD_VAR 0 2
61827: PPUSH
61828: LD_VAR 0 3
61832: PPUSH
61833: LD_VAR 0 4
61837: PPUSH
61838: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
61842: LD_VAR 0 1
61846: PPUSH
61847: LD_VAR 0 2
61851: PPUSH
61852: LD_VAR 0 3
61856: PPUSH
61857: CALL_OW 331
// end ;
61861: LD_VAR 0 5
61865: RET
// export function Video ( mode ) ; begin
61866: LD_INT 0
61868: PPUSH
// ingame_video = mode ;
61869: LD_ADDR_OWVAR 52
61873: PUSH
61874: LD_VAR 0 1
61878: ST_TO_ADDR
// interface_hidden = mode ;
61879: LD_ADDR_OWVAR 54
61883: PUSH
61884: LD_VAR 0 1
61888: ST_TO_ADDR
// end ;
61889: LD_VAR 0 2
61893: RET
// export function Join ( array , element ) ; begin
61894: LD_INT 0
61896: PPUSH
// result := Replace ( array , array + 1 , element ) ;
61897: LD_ADDR_VAR 0 3
61901: PUSH
61902: LD_VAR 0 1
61906: PPUSH
61907: LD_VAR 0 1
61911: PUSH
61912: LD_INT 1
61914: PLUS
61915: PPUSH
61916: LD_VAR 0 2
61920: PPUSH
61921: CALL_OW 1
61925: ST_TO_ADDR
// end ;
61926: LD_VAR 0 3
61930: RET
// export function JoinUnion ( array , element ) ; begin
61931: LD_INT 0
61933: PPUSH
// result := array union element ;
61934: LD_ADDR_VAR 0 3
61938: PUSH
61939: LD_VAR 0 1
61943: PUSH
61944: LD_VAR 0 2
61948: UNION
61949: ST_TO_ADDR
// end ;
61950: LD_VAR 0 3
61954: RET
// export function GetBehemoths ( side ) ; begin
61955: LD_INT 0
61957: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
61958: LD_ADDR_VAR 0 2
61962: PUSH
61963: LD_INT 22
61965: PUSH
61966: LD_VAR 0 1
61970: PUSH
61971: EMPTY
61972: LIST
61973: LIST
61974: PUSH
61975: LD_INT 31
61977: PUSH
61978: LD_INT 25
61980: PUSH
61981: EMPTY
61982: LIST
61983: LIST
61984: PUSH
61985: EMPTY
61986: LIST
61987: LIST
61988: PPUSH
61989: CALL_OW 69
61993: ST_TO_ADDR
// end ;
61994: LD_VAR 0 2
61998: RET
// export function Shuffle ( array ) ; var i , index ; begin
61999: LD_INT 0
62001: PPUSH
62002: PPUSH
62003: PPUSH
// result := [ ] ;
62004: LD_ADDR_VAR 0 2
62008: PUSH
62009: EMPTY
62010: ST_TO_ADDR
// if not array then
62011: LD_VAR 0 1
62015: NOT
62016: IFFALSE 62020
// exit ;
62018: GO 62119
// Randomize ;
62020: CALL_OW 10
// for i = array downto 1 do
62024: LD_ADDR_VAR 0 3
62028: PUSH
62029: DOUBLE
62030: LD_VAR 0 1
62034: INC
62035: ST_TO_ADDR
62036: LD_INT 1
62038: PUSH
62039: FOR_DOWNTO
62040: IFFALSE 62117
// begin index := rand ( 1 , array ) ;
62042: LD_ADDR_VAR 0 4
62046: PUSH
62047: LD_INT 1
62049: PPUSH
62050: LD_VAR 0 1
62054: PPUSH
62055: CALL_OW 12
62059: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
62060: LD_ADDR_VAR 0 2
62064: PUSH
62065: LD_VAR 0 2
62069: PPUSH
62070: LD_VAR 0 2
62074: PUSH
62075: LD_INT 1
62077: PLUS
62078: PPUSH
62079: LD_VAR 0 1
62083: PUSH
62084: LD_VAR 0 4
62088: ARRAY
62089: PPUSH
62090: CALL_OW 2
62094: ST_TO_ADDR
// array := Delete ( array , index ) ;
62095: LD_ADDR_VAR 0 1
62099: PUSH
62100: LD_VAR 0 1
62104: PPUSH
62105: LD_VAR 0 4
62109: PPUSH
62110: CALL_OW 3
62114: ST_TO_ADDR
// end ;
62115: GO 62039
62117: POP
62118: POP
// end ;
62119: LD_VAR 0 2
62123: RET
// export function GetBaseMaterials ( base ) ; begin
62124: LD_INT 0
62126: PPUSH
// result := [ 0 , 0 , 0 ] ;
62127: LD_ADDR_VAR 0 2
62131: PUSH
62132: LD_INT 0
62134: PUSH
62135: LD_INT 0
62137: PUSH
62138: LD_INT 0
62140: PUSH
62141: EMPTY
62142: LIST
62143: LIST
62144: LIST
62145: ST_TO_ADDR
// if not base then
62146: LD_VAR 0 1
62150: NOT
62151: IFFALSE 62155
// exit ;
62153: GO 62204
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
62155: LD_ADDR_VAR 0 2
62159: PUSH
62160: LD_VAR 0 1
62164: PPUSH
62165: LD_INT 1
62167: PPUSH
62168: CALL_OW 275
62172: PUSH
62173: LD_VAR 0 1
62177: PPUSH
62178: LD_INT 2
62180: PPUSH
62181: CALL_OW 275
62185: PUSH
62186: LD_VAR 0 1
62190: PPUSH
62191: LD_INT 3
62193: PPUSH
62194: CALL_OW 275
62198: PUSH
62199: EMPTY
62200: LIST
62201: LIST
62202: LIST
62203: ST_TO_ADDR
// end ;
62204: LD_VAR 0 2
62208: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
62209: LD_INT 0
62211: PPUSH
62212: PPUSH
// result := array ;
62213: LD_ADDR_VAR 0 3
62217: PUSH
62218: LD_VAR 0 1
62222: ST_TO_ADDR
// if size > 0 then
62223: LD_VAR 0 2
62227: PUSH
62228: LD_INT 0
62230: GREATER
62231: IFFALSE 62277
// for i := array downto size do
62233: LD_ADDR_VAR 0 4
62237: PUSH
62238: DOUBLE
62239: LD_VAR 0 1
62243: INC
62244: ST_TO_ADDR
62245: LD_VAR 0 2
62249: PUSH
62250: FOR_DOWNTO
62251: IFFALSE 62275
// result := Delete ( result , result ) ;
62253: LD_ADDR_VAR 0 3
62257: PUSH
62258: LD_VAR 0 3
62262: PPUSH
62263: LD_VAR 0 3
62267: PPUSH
62268: CALL_OW 3
62272: ST_TO_ADDR
62273: GO 62250
62275: POP
62276: POP
// end ;
62277: LD_VAR 0 3
62281: RET
// export function ComExit ( unit ) ; var tmp ; begin
62282: LD_INT 0
62284: PPUSH
62285: PPUSH
// if not IsInUnit ( unit ) then
62286: LD_VAR 0 1
62290: PPUSH
62291: CALL_OW 310
62295: NOT
62296: IFFALSE 62300
// exit ;
62298: GO 62360
// tmp := IsInUnit ( unit ) ;
62300: LD_ADDR_VAR 0 3
62304: PUSH
62305: LD_VAR 0 1
62309: PPUSH
62310: CALL_OW 310
62314: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
62315: LD_VAR 0 3
62319: PPUSH
62320: CALL_OW 247
62324: PUSH
62325: LD_INT 2
62327: EQUAL
62328: IFFALSE 62341
// ComExitVehicle ( unit ) else
62330: LD_VAR 0 1
62334: PPUSH
62335: CALL_OW 121
62339: GO 62350
// ComExitBuilding ( unit ) ;
62341: LD_VAR 0 1
62345: PPUSH
62346: CALL_OW 122
// result := tmp ;
62350: LD_ADDR_VAR 0 2
62354: PUSH
62355: LD_VAR 0 3
62359: ST_TO_ADDR
// end ;
62360: LD_VAR 0 2
62364: RET
// export function ResetHc ; begin
62365: LD_INT 0
62367: PPUSH
// InitHc ;
62368: CALL_OW 19
// hc_importance := 0 ;
62372: LD_ADDR_OWVAR 32
62376: PUSH
62377: LD_INT 0
62379: ST_TO_ADDR
// end ;
62380: LD_VAR 0 1
62384: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
62385: LD_INT 0
62387: PPUSH
62388: PPUSH
62389: PPUSH
// _x := ( x1 + x2 ) div 2 ;
62390: LD_ADDR_VAR 0 6
62394: PUSH
62395: LD_VAR 0 1
62399: PUSH
62400: LD_VAR 0 3
62404: PLUS
62405: PUSH
62406: LD_INT 2
62408: DIV
62409: ST_TO_ADDR
// if _x < 0 then
62410: LD_VAR 0 6
62414: PUSH
62415: LD_INT 0
62417: LESS
62418: IFFALSE 62435
// _x := _x * - 1 ;
62420: LD_ADDR_VAR 0 6
62424: PUSH
62425: LD_VAR 0 6
62429: PUSH
62430: LD_INT 1
62432: NEG
62433: MUL
62434: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
62435: LD_ADDR_VAR 0 7
62439: PUSH
62440: LD_VAR 0 2
62444: PUSH
62445: LD_VAR 0 4
62449: PLUS
62450: PUSH
62451: LD_INT 2
62453: DIV
62454: ST_TO_ADDR
// if _y < 0 then
62455: LD_VAR 0 7
62459: PUSH
62460: LD_INT 0
62462: LESS
62463: IFFALSE 62480
// _y := _y * - 1 ;
62465: LD_ADDR_VAR 0 7
62469: PUSH
62470: LD_VAR 0 7
62474: PUSH
62475: LD_INT 1
62477: NEG
62478: MUL
62479: ST_TO_ADDR
// result := [ _x , _y ] ;
62480: LD_ADDR_VAR 0 5
62484: PUSH
62485: LD_VAR 0 6
62489: PUSH
62490: LD_VAR 0 7
62494: PUSH
62495: EMPTY
62496: LIST
62497: LIST
62498: ST_TO_ADDR
// end ;
62499: LD_VAR 0 5
62503: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
62504: LD_INT 0
62506: PPUSH
62507: PPUSH
62508: PPUSH
62509: PPUSH
// task := GetTaskList ( unit ) ;
62510: LD_ADDR_VAR 0 7
62514: PUSH
62515: LD_VAR 0 1
62519: PPUSH
62520: CALL_OW 437
62524: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
62525: LD_VAR 0 7
62529: NOT
62530: PUSH
62531: LD_VAR 0 1
62535: PPUSH
62536: LD_VAR 0 2
62540: PPUSH
62541: CALL_OW 308
62545: NOT
62546: AND
62547: IFFALSE 62551
// exit ;
62549: GO 62669
// if IsInArea ( unit , area ) then
62551: LD_VAR 0 1
62555: PPUSH
62556: LD_VAR 0 2
62560: PPUSH
62561: CALL_OW 308
62565: IFFALSE 62583
// begin ComMoveToArea ( unit , goAway ) ;
62567: LD_VAR 0 1
62571: PPUSH
62572: LD_VAR 0 3
62576: PPUSH
62577: CALL_OW 113
// exit ;
62581: GO 62669
// end ; if task [ 1 ] [ 1 ] <> M then
62583: LD_VAR 0 7
62587: PUSH
62588: LD_INT 1
62590: ARRAY
62591: PUSH
62592: LD_INT 1
62594: ARRAY
62595: PUSH
62596: LD_STRING M
62598: NONEQUAL
62599: IFFALSE 62603
// exit ;
62601: GO 62669
// x := task [ 1 ] [ 2 ] ;
62603: LD_ADDR_VAR 0 5
62607: PUSH
62608: LD_VAR 0 7
62612: PUSH
62613: LD_INT 1
62615: ARRAY
62616: PUSH
62617: LD_INT 2
62619: ARRAY
62620: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
62621: LD_ADDR_VAR 0 6
62625: PUSH
62626: LD_VAR 0 7
62630: PUSH
62631: LD_INT 1
62633: ARRAY
62634: PUSH
62635: LD_INT 3
62637: ARRAY
62638: ST_TO_ADDR
// if InArea ( x , y , area ) then
62639: LD_VAR 0 5
62643: PPUSH
62644: LD_VAR 0 6
62648: PPUSH
62649: LD_VAR 0 2
62653: PPUSH
62654: CALL_OW 309
62658: IFFALSE 62669
// ComStop ( unit ) ;
62660: LD_VAR 0 1
62664: PPUSH
62665: CALL_OW 141
// end ;
62669: LD_VAR 0 4
62673: RET
// export function Abs ( value ) ; begin
62674: LD_INT 0
62676: PPUSH
// result := value ;
62677: LD_ADDR_VAR 0 2
62681: PUSH
62682: LD_VAR 0 1
62686: ST_TO_ADDR
// if value < 0 then
62687: LD_VAR 0 1
62691: PUSH
62692: LD_INT 0
62694: LESS
62695: IFFALSE 62712
// result := value * - 1 ;
62697: LD_ADDR_VAR 0 2
62701: PUSH
62702: LD_VAR 0 1
62706: PUSH
62707: LD_INT 1
62709: NEG
62710: MUL
62711: ST_TO_ADDR
// end ;
62712: LD_VAR 0 2
62716: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
62717: LD_INT 0
62719: PPUSH
62720: PPUSH
62721: PPUSH
62722: PPUSH
62723: PPUSH
62724: PPUSH
62725: PPUSH
62726: PPUSH
// if not unit or not building then
62727: LD_VAR 0 1
62731: NOT
62732: PUSH
62733: LD_VAR 0 2
62737: NOT
62738: OR
62739: IFFALSE 62743
// exit ;
62741: GO 62969
// x := GetX ( building ) ;
62743: LD_ADDR_VAR 0 4
62747: PUSH
62748: LD_VAR 0 2
62752: PPUSH
62753: CALL_OW 250
62757: ST_TO_ADDR
// y := GetY ( building ) ;
62758: LD_ADDR_VAR 0 6
62762: PUSH
62763: LD_VAR 0 2
62767: PPUSH
62768: CALL_OW 251
62772: ST_TO_ADDR
// d := GetDir ( building ) ;
62773: LD_ADDR_VAR 0 8
62777: PUSH
62778: LD_VAR 0 2
62782: PPUSH
62783: CALL_OW 254
62787: ST_TO_ADDR
// r := 4 ;
62788: LD_ADDR_VAR 0 9
62792: PUSH
62793: LD_INT 4
62795: ST_TO_ADDR
// for i := 1 to 5 do
62796: LD_ADDR_VAR 0 10
62800: PUSH
62801: DOUBLE
62802: LD_INT 1
62804: DEC
62805: ST_TO_ADDR
62806: LD_INT 5
62808: PUSH
62809: FOR_TO
62810: IFFALSE 62967
// begin _x := ShiftX ( x , d , r + i ) ;
62812: LD_ADDR_VAR 0 5
62816: PUSH
62817: LD_VAR 0 4
62821: PPUSH
62822: LD_VAR 0 8
62826: PPUSH
62827: LD_VAR 0 9
62831: PUSH
62832: LD_VAR 0 10
62836: PLUS
62837: PPUSH
62838: CALL_OW 272
62842: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
62843: LD_ADDR_VAR 0 7
62847: PUSH
62848: LD_VAR 0 6
62852: PPUSH
62853: LD_VAR 0 8
62857: PPUSH
62858: LD_VAR 0 9
62862: PUSH
62863: LD_VAR 0 10
62867: PLUS
62868: PPUSH
62869: CALL_OW 273
62873: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
62874: LD_VAR 0 5
62878: PPUSH
62879: LD_VAR 0 7
62883: PPUSH
62884: CALL_OW 488
62888: PUSH
62889: LD_VAR 0 5
62893: PPUSH
62894: LD_VAR 0 7
62898: PPUSH
62899: CALL_OW 428
62903: PPUSH
62904: CALL_OW 247
62908: PUSH
62909: LD_INT 3
62911: PUSH
62912: LD_INT 2
62914: PUSH
62915: EMPTY
62916: LIST
62917: LIST
62918: IN
62919: NOT
62920: AND
62921: IFFALSE 62965
// begin ComMoveXY ( unit , _x , _y ) ;
62923: LD_VAR 0 1
62927: PPUSH
62928: LD_VAR 0 5
62932: PPUSH
62933: LD_VAR 0 7
62937: PPUSH
62938: CALL_OW 111
// result := [ _x , _y ] ;
62942: LD_ADDR_VAR 0 3
62946: PUSH
62947: LD_VAR 0 5
62951: PUSH
62952: LD_VAR 0 7
62956: PUSH
62957: EMPTY
62958: LIST
62959: LIST
62960: ST_TO_ADDR
// exit ;
62961: POP
62962: POP
62963: GO 62969
// end ; end ;
62965: GO 62809
62967: POP
62968: POP
// end ;
62969: LD_VAR 0 3
62973: RET
