// starting begin PrepareMap ;
   0: CALL 13 0 0
// Main_Variables ;
   4: CALL 136 0 0
// Start_Mission ;
   8: CALL 3472 0 0
// end ;
  12: END
// function PrepareMap ; begin
  13: LD_INT 0
  15: PPUSH
// ResetFog ;
  16: CALL_OW 335
// RandomizeAll ;
  20: CALL_OW 11
// game_difficulty := GetMultiplayerSetting ( 0 ) ;
  24: LD_ADDR_EXP 2
  28: PUSH
  29: LD_INT 0
  31: PPUSH
  32: CALL_OW 426
  36: ST_TO_ADDR
// Difficulty := game_difficulty ;
  37: LD_ADDR_OWVAR 67
  41: PUSH
  42: LD_EXP 2
  46: ST_TO_ADDR
// ChangeSideFog ( 8 , 6 ) ;
  47: LD_INT 8
  49: PPUSH
  50: LD_INT 6
  52: PPUSH
  53: CALL_OW 343
// PlaceSeeing ( 1 , 1 , 8 , - 37963 ) ;
  57: LD_INT 1
  59: PPUSH
  60: LD_INT 1
  62: PPUSH
  63: LD_INT 8
  65: PPUSH
  66: LD_INT 37963
  68: NEG
  69: PPUSH
  70: CALL_OW 330
// RemoveSeeing ( 1 , 1 , 8 ) ;
  74: LD_INT 1
  76: PPUSH
  77: LD_INT 1
  79: PPUSH
  80: LD_INT 8
  82: PPUSH
  83: CALL_OW 331
// PlaceCamera ;
  87: CALL 3939 0 0
// CreateNature ( nature , 4 , 3 , 2 , 1 ) ;
  91: LD_INT 2
  93: PPUSH
  94: LD_INT 4
  96: PPUSH
  97: LD_INT 3
  99: PPUSH
 100: LD_INT 2
 102: PPUSH
 103: LD_INT 1
 105: PPUSH
 106: CALL 7889 0 5
// PrepareComm ;
 110: CALL 8372 0 0
// SetSide ( fort , 6 ) ;
 114: LD_INT 23
 116: PPUSH
 117: LD_INT 6
 119: PPUSH
 120: CALL_OW 235
// CenterNowOnUnits ( fort ) ;
 124: LD_INT 23
 126: PPUSH
 127: CALL_OW 87
// end ;
 131: LD_VAR 0 1
 135: RET
// export game_on , game_difficulty , game_time , game_option , game_end , game_strings ; export leopold , leopold_in_fort , samuel , samuel_in_fort , mortars_in_fort , scout ; export u_mine , u_fac ; export areas ; export skill ; export ar_weapons , ru_weapons , us_weapons ; export arabian_force , russian_force , american_force , arabian_timeing , russian_timeing , american_timeing ; export meeting_start , meeting_arive , meeting_break , meeting_end , meeting_time , russian_timer , fort_destroyed , hero_died , mission_time , cargo_ok , american_hchan , dezert , arabian_attack , russian_attack , american_attack , american_help , american_sib_bomb , russian_trade , heike_dialog1 , heike_dialog2 ; export am_comander , ru_comander , ar_comander ; function Main_Variables ; begin
 136: LD_INT 0
 138: PPUSH
// game_on := false ;
 139: LD_ADDR_EXP 1
 143: PUSH
 144: LD_INT 0
 146: ST_TO_ADDR
// game_time := 0 0$00 ;
 147: LD_ADDR_EXP 3
 151: PUSH
 152: LD_INT 0
 154: ST_TO_ADDR
// game_option := [ 1 ] ;
 155: LD_ADDR_EXP 4
 159: PUSH
 160: LD_INT 1
 162: PUSH
 163: EMPTY
 164: LIST
 165: ST_TO_ADDR
// game_end := false ;
 166: LD_ADDR_EXP 5
 170: PUSH
 171: LD_INT 0
 173: ST_TO_ADDR
// game_strings := [ ] ;
 174: LD_ADDR_EXP 6
 178: PUSH
 179: EMPTY
 180: ST_TO_ADDR
// game_time := 0 0$00 ;
 181: LD_ADDR_EXP 3
 185: PUSH
 186: LD_INT 0
 188: ST_TO_ADDR
// mission_time := 0 0$00 ;
 189: LD_ADDR_EXP 34
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// skill := [ 5 , 7 , 9 ] [ game_difficulty ] ;
 197: LD_ADDR_EXP 16
 201: PUSH
 202: LD_INT 5
 204: PUSH
 205: LD_INT 7
 207: PUSH
 208: LD_INT 9
 210: PUSH
 211: EMPTY
 212: LIST
 213: LIST
 214: LIST
 215: PUSH
 216: LD_EXP 2
 220: ARRAY
 221: ST_TO_ADDR
// areas := [ a_swest , a_nwest , a_neast , a_seast ] ;
 222: LD_ADDR_EXP 15
 226: PUSH
 227: LD_INT 5
 229: PUSH
 230: LD_INT 6
 232: PUSH
 233: LD_INT 7
 235: PUSH
 236: LD_INT 8
 238: PUSH
 239: EMPTY
 240: LIST
 241: LIST
 242: LIST
 243: LIST
 244: ST_TO_ADDR
// meeting_start := false ;
 245: LD_ADDR_EXP 26
 249: PUSH
 250: LD_INT 0
 252: ST_TO_ADDR
// meeting_arive := false ;
 253: LD_ADDR_EXP 27
 257: PUSH
 258: LD_INT 0
 260: ST_TO_ADDR
// meeting_break := false ;
 261: LD_ADDR_EXP 28
 265: PUSH
 266: LD_INT 0
 268: ST_TO_ADDR
// meeting_end := false ;
 269: LD_ADDR_EXP 29
 273: PUSH
 274: LD_INT 0
 276: ST_TO_ADDR
// meeting_time := [ 4 4$00 , 3 3$40 , 3 3$20 ] [ game_difficulty ] ;
 277: LD_ADDR_EXP 30
 281: PUSH
 282: LD_INT 8400
 284: PUSH
 285: LD_INT 7700
 287: PUSH
 288: LD_INT 7000
 290: PUSH
 291: EMPTY
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: LD_EXP 2
 300: ARRAY
 301: ST_TO_ADDR
// arabian_force := [ 4 , 5 , 6 ] [ game_difficulty ] ;
 302: LD_ADDR_EXP 20
 306: PUSH
 307: LD_INT 4
 309: PUSH
 310: LD_INT 5
 312: PUSH
 313: LD_INT 6
 315: PUSH
 316: EMPTY
 317: LIST
 318: LIST
 319: LIST
 320: PUSH
 321: LD_EXP 2
 325: ARRAY
 326: ST_TO_ADDR
// american_force := [ 5 , 6 , 7 ] [ game_difficulty ] ;
 327: LD_ADDR_EXP 22
 331: PUSH
 332: LD_INT 5
 334: PUSH
 335: LD_INT 6
 337: PUSH
 338: LD_INT 7
 340: PUSH
 341: EMPTY
 342: LIST
 343: LIST
 344: LIST
 345: PUSH
 346: LD_EXP 2
 350: ARRAY
 351: ST_TO_ADDR
// russian_force := [ 6 , 7 , 8 ] [ game_difficulty ] ;
 352: LD_ADDR_EXP 21
 356: PUSH
 357: LD_INT 6
 359: PUSH
 360: LD_INT 7
 362: PUSH
 363: LD_INT 8
 365: PUSH
 366: EMPTY
 367: LIST
 368: LIST
 369: LIST
 370: PUSH
 371: LD_EXP 2
 375: ARRAY
 376: ST_TO_ADDR
// u_mine := false ;
 377: LD_ADDR_EXP 13
 381: PUSH
 382: LD_INT 0
 384: ST_TO_ADDR
// u_fac := false ;
 385: LD_ADDR_EXP 14
 389: PUSH
 390: LD_INT 0
 392: ST_TO_ADDR
// leopold_in_fort := false ;
 393: LD_ADDR_EXP 8
 397: PUSH
 398: LD_INT 0
 400: ST_TO_ADDR
// samuel_in_fort := false ;
 401: LD_ADDR_EXP 10
 405: PUSH
 406: LD_INT 0
 408: ST_TO_ADDR
// mortars_in_fort := false ;
 409: LD_ADDR_EXP 11
 413: PUSH
 414: LD_INT 0
 416: ST_TO_ADDR
// fort_destroyed := false ;
 417: LD_ADDR_EXP 32
 421: PUSH
 422: LD_INT 0
 424: ST_TO_ADDR
// hero_died := false ;
 425: LD_ADDR_EXP 33
 429: PUSH
 430: LD_INT 0
 432: ST_TO_ADDR
// dezert := false ;
 433: LD_ADDR_EXP 37
 437: PUSH
 438: LD_INT 0
 440: ST_TO_ADDR
// arabian_attack := false ;
 441: LD_ADDR_EXP 38
 445: PUSH
 446: LD_INT 0
 448: ST_TO_ADDR
// russian_attack := false ;
 449: LD_ADDR_EXP 39
 453: PUSH
 454: LD_INT 0
 456: ST_TO_ADDR
// american_attack := false ;
 457: LD_ADDR_EXP 40
 461: PUSH
 462: LD_INT 0
 464: ST_TO_ADDR
// american_help := false ;
 465: LD_ADDR_EXP 41
 469: PUSH
 470: LD_INT 0
 472: ST_TO_ADDR
// american_hchan := [ 91 , 81 , 71 ] [ game_difficulty ] ;
 473: LD_ADDR_EXP 36
 477: PUSH
 478: LD_INT 91
 480: PUSH
 481: LD_INT 81
 483: PUSH
 484: LD_INT 71
 486: PUSH
 487: EMPTY
 488: LIST
 489: LIST
 490: LIST
 491: PUSH
 492: LD_EXP 2
 496: ARRAY
 497: ST_TO_ADDR
// american_sib_bomb := false ;
 498: LD_ADDR_EXP 42
 502: PUSH
 503: LD_INT 0
 505: ST_TO_ADDR
// russian_trade := false ;
 506: LD_ADDR_EXP 43
 510: PUSH
 511: LD_INT 0
 513: ST_TO_ADDR
// russian_timer := 5 5$00 ;
 514: LD_ADDR_EXP 31
 518: PUSH
 519: LD_INT 10500
 521: ST_TO_ADDR
// cargo_ok := false ;
 522: LD_ADDR_EXP 35
 526: PUSH
 527: LD_INT 0
 529: ST_TO_ADDR
// heike_dialog1 := false ;
 530: LD_ADDR_EXP 44
 534: PUSH
 535: LD_INT 0
 537: ST_TO_ADDR
// heike_dialog2 := false ;
 538: LD_ADDR_EXP 45
 542: PUSH
 543: LD_INT 0
 545: ST_TO_ADDR
// american_timeing := [ 10 10$00 , 9 9$50 , 9 9$30 ] [ game_difficulty ] ;
 546: LD_ADDR_EXP 25
 550: PUSH
 551: LD_INT 21000
 553: PUSH
 554: LD_INT 20650
 556: PUSH
 557: LD_INT 19950
 559: PUSH
 560: EMPTY
 561: LIST
 562: LIST
 563: LIST
 564: PUSH
 565: LD_EXP 2
 569: ARRAY
 570: ST_TO_ADDR
// arabian_timeing := [ 8 8$00 , 7 7$30 , 6 6$40 ] [ game_difficulty ] ;
 571: LD_ADDR_EXP 23
 575: PUSH
 576: LD_INT 16800
 578: PUSH
 579: LD_INT 15750
 581: PUSH
 582: LD_INT 14000
 584: PUSH
 585: EMPTY
 586: LIST
 587: LIST
 588: LIST
 589: PUSH
 590: LD_EXP 2
 594: ARRAY
 595: ST_TO_ADDR
// russian_timeing := [ 11 11$00 , 10 10$30 , 9 9$20 ] [ game_difficulty ] ;
 596: LD_ADDR_EXP 24
 600: PUSH
 601: LD_INT 23100
 603: PUSH
 604: LD_INT 22050
 606: PUSH
 607: LD_INT 19600
 609: PUSH
 610: EMPTY
 611: LIST
 612: LIST
 613: LIST
 614: PUSH
 615: LD_EXP 2
 619: ARRAY
 620: ST_TO_ADDR
// ar_weapons := [ ar_rocket_launcher , ar_gun , ar_flame_thrower , ar_selfpropelled_bomb , ar_bio_bomb ] ;
 621: LD_ADDR_EXP 17
 625: PUSH
 626: LD_INT 28
 628: PUSH
 629: LD_INT 27
 631: PUSH
 632: LD_INT 26
 634: PUSH
 635: LD_INT 29
 637: PUSH
 638: LD_INT 91
 640: PUSH
 641: EMPTY
 642: LIST
 643: LIST
 644: LIST
 645: LIST
 646: LIST
 647: ST_TO_ADDR
// us_weapons := [ us_rocket_launcher , us_heavy_gun , us_double_laser , us_laser ] ;
 648: LD_ADDR_EXP 19
 652: PUSH
 653: LD_INT 7
 655: PUSH
 656: LD_INT 6
 658: PUSH
 659: LD_INT 10
 661: PUSH
 662: LD_INT 9
 664: PUSH
 665: EMPTY
 666: LIST
 667: LIST
 668: LIST
 669: LIST
 670: ST_TO_ADDR
// ru_weapons := [ ru_rocket_launcher , ru_rocket , ru_heavy_gun , ru_heavy_gun ] ;
 671: LD_ADDR_EXP 18
 675: PUSH
 676: LD_INT 45
 678: PUSH
 679: LD_INT 47
 681: PUSH
 682: LD_INT 46
 684: PUSH
 685: LD_INT 46
 687: PUSH
 688: EMPTY
 689: LIST
 690: LIST
 691: LIST
 692: LIST
 693: ST_TO_ADDR
// end ;
 694: LD_VAR 0 1
 698: RET
// every 0 0$01 trigger game_on do var i , p , x , filter ;
 699: LD_EXP 1
 703: IFFALSE 3469
 705: GO 707
 707: DISABLE
 708: LD_INT 0
 710: PPUSH
 711: PPUSH
 712: PPUSH
 713: PPUSH
// begin enable ;
 714: ENABLE
// Display_Strings := [ #tick , game_time ] ^ game_strings ;
 715: LD_ADDR_OWVAR 47
 719: PUSH
 720: LD_STRING #tick
 722: PUSH
 723: LD_EXP 3
 727: PUSH
 728: EMPTY
 729: LIST
 730: LIST
 731: PUSH
 732: LD_EXP 6
 736: ADD
 737: ST_TO_ADDR
// game_time := RefreshTime ( game_time , true ) ;
 738: LD_ADDR_EXP 3
 742: PUSH
 743: LD_EXP 3
 747: PPUSH
 748: LD_INT 1
 750: PPUSH
 751: CALL 6975 0 2
 755: ST_TO_ADDR
// if meeting_start and meeting_time > 0 0$00 then
 756: LD_EXP 26
 760: PUSH
 761: LD_EXP 30
 765: PUSH
 766: LD_INT 0
 768: GREATER
 769: AND
 770: IFFALSE 807
// begin game_strings := [ #mtime , meeting_time ] ;
 772: LD_ADDR_EXP 6
 776: PUSH
 777: LD_STRING #mtime
 779: PUSH
 780: LD_EXP 30
 784: PUSH
 785: EMPTY
 786: LIST
 787: LIST
 788: ST_TO_ADDR
// meeting_time := RefreshTime ( meeting_time , false ) ;
 789: LD_ADDR_EXP 30
 793: PUSH
 794: LD_EXP 30
 798: PPUSH
 799: LD_INT 0
 801: PPUSH
 802: CALL 6975 0 2
 806: ST_TO_ADDR
// end ; if meeting_arive then
 807: LD_EXP 27
 811: IFFALSE 831
// mission_time := RefreshTime ( mission_time , true ) ;
 813: LD_ADDR_EXP 34
 817: PUSH
 818: LD_EXP 34
 822: PPUSH
 823: LD_INT 1
 825: PPUSH
 826: CALL 6975 0 2
 830: ST_TO_ADDR
// if arabian_attack and arabian_timeing > 0 0$00 and meeting_arive then
 831: LD_EXP 38
 835: PUSH
 836: LD_EXP 23
 840: PUSH
 841: LD_INT 0
 843: GREATER
 844: AND
 845: PUSH
 846: LD_EXP 27
 850: AND
 851: IFFALSE 871
// begin arabian_timeing := RefreshTime ( arabian_timeing , false ) ;
 853: LD_ADDR_EXP 23
 857: PUSH
 858: LD_EXP 23
 862: PPUSH
 863: LD_INT 0
 865: PPUSH
 866: CALL 6975 0 2
 870: ST_TO_ADDR
// end ; if russian_attack and russian_timeing > 0 0$00 and meeting_arive then
 871: LD_EXP 39
 875: PUSH
 876: LD_EXP 24
 880: PUSH
 881: LD_INT 0
 883: GREATER
 884: AND
 885: PUSH
 886: LD_EXP 27
 890: AND
 891: IFFALSE 911
// begin russian_timeing := RefreshTime ( russian_timeing , false ) ;
 893: LD_ADDR_EXP 24
 897: PUSH
 898: LD_EXP 24
 902: PPUSH
 903: LD_INT 0
 905: PPUSH
 906: CALL 6975 0 2
 910: ST_TO_ADDR
// end ; if american_attack and american_timeing > 0 0$00 and meeting_arive then
 911: LD_EXP 40
 915: PUSH
 916: LD_EXP 25
 920: PUSH
 921: LD_INT 0
 923: GREATER
 924: AND
 925: PUSH
 926: LD_EXP 27
 930: AND
 931: IFFALSE 951
// begin american_timeing := RefreshTime ( american_timeing , false ) ;
 933: LD_ADDR_EXP 25
 937: PUSH
 938: LD_EXP 25
 942: PPUSH
 943: LD_INT 0
 945: PPUSH
 946: CALL 6975 0 2
 950: ST_TO_ADDR
// end ; if russian_trade and russian_timer > 0 0$00 then
 951: LD_EXP 43
 955: PUSH
 956: LD_EXP 31
 960: PUSH
 961: LD_INT 0
 963: GREATER
 964: AND
 965: IFFALSE 1002
// begin game_strings := [ #rtime , russian_timer ] ;
 967: LD_ADDR_EXP 6
 971: PUSH
 972: LD_STRING #rtime
 974: PUSH
 975: LD_EXP 31
 979: PUSH
 980: EMPTY
 981: LIST
 982: LIST
 983: ST_TO_ADDR
// russian_timer := RefreshTime ( russian_timer , false ) ;
 984: LD_ADDR_EXP 31
 988: PUSH
 989: LD_EXP 31
 993: PPUSH
 994: LD_INT 0
 996: PPUSH
 997: CALL 6975 0 2
1001: ST_TO_ADDR
// end ; if russian_trade and russian_timer = 0 0$00 or cargo_ok then
1002: LD_EXP 43
1006: PUSH
1007: LD_EXP 31
1011: PUSH
1012: LD_INT 0
1014: EQUAL
1015: AND
1016: PUSH
1017: LD_EXP 35
1021: OR
1022: IFFALSE 1031
// game_strings := [ ] ;
1024: LD_ADDR_EXP 6
1028: PUSH
1029: EMPTY
1030: ST_TO_ADDR
// if dezert = false and tick mod 33600 = 0 then
1031: LD_EXP 37
1035: PUSH
1036: LD_INT 0
1038: EQUAL
1039: PUSH
1040: LD_OWVAR 1
1044: PUSH
1045: LD_INT 33600
1047: MOD
1048: PUSH
1049: LD_INT 0
1051: EQUAL
1052: AND
1053: IFFALSE 1113
// begin p := Rand ( 1 , 5 ) ;
1055: LD_ADDR_VAR 0 2
1059: PUSH
1060: LD_INT 1
1062: PPUSH
1063: LD_INT 5
1065: PPUSH
1066: CALL_OW 12
1070: ST_TO_ADDR
// if p <= [ 4 , 3 , 3 ] [ game_difficulty ] then
1071: LD_VAR 0 2
1075: PUSH
1076: LD_INT 4
1078: PUSH
1079: LD_INT 3
1081: PUSH
1082: LD_INT 3
1084: PUSH
1085: EMPTY
1086: LIST
1087: LIST
1088: LIST
1089: PUSH
1090: LD_EXP 2
1094: ARRAY
1095: LESSEQUAL
1096: IFFALSE 1113
// begin RaiseSailEvent ( 92 ) ;
1098: LD_INT 92
1100: PPUSH
1101: CALL_OW 427
// dezert := true ;
1105: LD_ADDR_EXP 37
1109: PUSH
1110: LD_INT 1
1112: ST_TO_ADDR
// end ; end ; if tick mod 8400 = 0 then
1113: LD_OWVAR 1
1117: PUSH
1118: LD_INT 8400
1120: MOD
1121: PUSH
1122: LD_INT 0
1124: EQUAL
1125: IFFALSE 1134
// RaiseSailEvent ( 101 ) ;
1127: LD_INT 101
1129: PPUSH
1130: CALL_OW 427
// if MineExist ( 8 ) and u_mine = false then
1134: LD_INT 8
1136: PPUSH
1137: CALL 7029 0 1
1141: PUSH
1142: LD_EXP 13
1146: PUSH
1147: LD_INT 0
1149: EQUAL
1150: AND
1151: IFFALSE 1168
// begin u_mine := true ;
1153: LD_ADDR_EXP 13
1157: PUSH
1158: LD_INT 1
1160: ST_TO_ADDR
// ChangeMissionObjectives ( DS-T1m ) ;
1161: LD_STRING DS-T1m
1163: PPUSH
1164: CALL_OW 337
// end ; if FacExist ( 8 ) and u_fac = false then
1168: LD_INT 8
1170: PPUSH
1171: CALL 7091 0 1
1175: PUSH
1176: LD_EXP 14
1180: PUSH
1181: LD_INT 0
1183: EQUAL
1184: AND
1185: IFFALSE 1202
// begin u_fac := true ;
1187: LD_ADDR_EXP 14
1191: PUSH
1192: LD_INT 1
1194: ST_TO_ADDR
// ChangeMissionObjectives ( DS-T1f ) ;
1195: LD_STRING DS-T1f
1197: PPUSH
1198: CALL_OW 337
// end ; if hero_died then
1202: LD_EXP 33
1206: IFFALSE 1215
// YouLost ( DS-h1 ) ;
1208: LD_STRING DS-h1
1210: PPUSH
1211: CALL_OW 104
// if fort_destroyed then
1215: LD_EXP 32
1219: IFFALSE 1228
// YouLost ( DS-h2 ) ;
1221: LD_STRING DS-h2
1223: PPUSH
1224: CALL_OW 104
// if GetDistUnits ( leopold , l_cmndr ) > 6 and meeting_start = false then
1228: LD_EXP 7
1232: PPUSH
1233: LD_EXP 49
1237: PPUSH
1238: CALL_OW 296
1242: PUSH
1243: LD_INT 6
1245: GREATER
1246: PUSH
1247: LD_EXP 26
1251: PUSH
1252: LD_INT 0
1254: EQUAL
1255: AND
1256: IFFALSE 1279
// begin if not HasTask ( leopold ) then
1258: LD_EXP 7
1262: PPUSH
1263: CALL_OW 314
1267: NOT
1268: IFFALSE 1277
// RaiseSailEvent ( 1 ) ;
1270: LD_INT 1
1272: PPUSH
1273: CALL_OW 427
// end else
1277: GO 1296
// if meeting_start = false then
1279: LD_EXP 26
1283: PUSH
1284: LD_INT 0
1286: EQUAL
1287: IFFALSE 1296
// begin RaiseSailEvent ( 2 ) ;
1289: LD_INT 2
1291: PPUSH
1292: CALL_OW 427
// end ; if game_time >= [ 50 50$00 , 62 62$30 , 72 72$00 ] [ game_difficulty ] and meeting_end = false then
1296: LD_EXP 3
1300: PUSH
1301: LD_INT 105000
1303: PUSH
1304: LD_INT 131250
1306: PUSH
1307: LD_INT 151200
1309: PUSH
1310: EMPTY
1311: LIST
1312: LIST
1313: LIST
1314: PUSH
1315: LD_EXP 2
1319: ARRAY
1320: GREATEREQUAL
1321: PUSH
1322: LD_EXP 29
1326: PUSH
1327: LD_INT 0
1329: EQUAL
1330: AND
1331: IFFALSE 1348
// begin meeting_end := true ;
1333: LD_ADDR_EXP 29
1337: PUSH
1338: LD_INT 1
1340: ST_TO_ADDR
// RaiseSailEvent ( 200 ) ;
1341: LD_INT 200
1343: PPUSH
1344: CALL_OW 427
// end ; if meeting_time = 0 0$00 and meeting_arive = false then
1348: LD_EXP 30
1352: PUSH
1353: LD_INT 0
1355: EQUAL
1356: PUSH
1357: LD_EXP 27
1361: PUSH
1362: LD_INT 0
1364: EQUAL
1365: AND
1366: IFFALSE 1390
// begin meeting_arive := true ;
1368: LD_ADDR_EXP 27
1372: PUSH
1373: LD_INT 1
1375: ST_TO_ADDR
// game_strings := [ ] ;
1376: LD_ADDR_EXP 6
1380: PUSH
1381: EMPTY
1382: ST_TO_ADDR
// RaiseSailEvent ( 10 ) ;
1383: LD_INT 10
1385: PPUSH
1386: CALL_OW 427
// end ; if meeting_arive then
1390: LD_EXP 27
1394: IFFALSE 2193
// begin if arabian_attack = false and tick mod 4200 = 0 then
1396: LD_EXP 38
1400: PUSH
1401: LD_INT 0
1403: EQUAL
1404: PUSH
1405: LD_OWVAR 1
1409: PUSH
1410: LD_INT 4200
1412: MOD
1413: PUSH
1414: LD_INT 0
1416: EQUAL
1417: AND
1418: IFFALSE 1471
// begin p := Rand ( 1 , 100 ) ;
1420: LD_ADDR_VAR 0 2
1424: PUSH
1425: LD_INT 1
1427: PPUSH
1428: LD_INT 100
1430: PPUSH
1431: CALL_OW 12
1435: ST_TO_ADDR
// if p <= [ 85 , 90 , 95 ] [ game_difficulty ] then
1436: LD_VAR 0 2
1440: PUSH
1441: LD_INT 85
1443: PUSH
1444: LD_INT 90
1446: PUSH
1447: LD_INT 95
1449: PUSH
1450: EMPTY
1451: LIST
1452: LIST
1453: LIST
1454: PUSH
1455: LD_EXP 2
1459: ARRAY
1460: LESSEQUAL
1461: IFFALSE 1471
// arabian_attack := true ;
1463: LD_ADDR_EXP 38
1467: PUSH
1468: LD_INT 1
1470: ST_TO_ADDR
// end ; if russian_trade = false and russian_attack = false and tick > 52500 then
1471: LD_EXP 43
1475: PUSH
1476: LD_INT 0
1478: EQUAL
1479: PUSH
1480: LD_EXP 39
1484: PUSH
1485: LD_INT 0
1487: EQUAL
1488: AND
1489: PUSH
1490: LD_OWVAR 1
1494: PUSH
1495: LD_INT 52500
1497: GREATER
1498: AND
1499: IFFALSE 1570
// begin russian_trade = true ;
1501: LD_ADDR_EXP 43
1505: PUSH
1506: LD_INT 1
1508: ST_TO_ADDR
// DialogueOn ;
1509: CALL_OW 6
// SayRadio ( ru_comander , DS-DR-RTr ) ;
1513: LD_EXP 47
1517: PPUSH
1518: LD_STRING DS-DR-RTr
1520: PPUSH
1521: CALL_OW 94
// Say ( l_cmndr , DS-DC-RTr ) ;
1525: LD_EXP 49
1529: PPUSH
1530: LD_STRING DS-DC-RTr
1532: PPUSH
1533: CALL_OW 88
// SayRadio ( ru_comander , DS-DR-RTr2 ) ;
1537: LD_EXP 47
1541: PPUSH
1542: LD_STRING DS-DR-RTr2
1544: PPUSH
1545: CALL_OW 94
// DialogueOff ;
1549: CALL_OW 7
// ChangeMissionObjectives ( DS-T2 ) ;
1553: LD_STRING DS-T2
1555: PPUSH
1556: CALL_OW 337
// SetAreaMapShow ( tree , 1 ) ;
1560: LD_INT 10
1562: PPUSH
1563: LD_INT 1
1565: PPUSH
1566: CALL_OW 424
// end ; if russian_trade and cargo_ok = false and russian_timer > 0 0$00 then
1570: LD_EXP 43
1574: PUSH
1575: LD_EXP 35
1579: PUSH
1580: LD_INT 0
1582: EQUAL
1583: AND
1584: PUSH
1585: LD_EXP 31
1589: PUSH
1590: LD_INT 0
1592: GREATER
1593: AND
1594: IFFALSE 1843
// begin if FilterUnitsInArea ( tree , ( [ [ f_empty ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] , [ f_not , [ f_control , control_remote ] ] ] ) ) > 0 then
1596: LD_INT 10
1598: PPUSH
1599: LD_INT 58
1601: PUSH
1602: EMPTY
1603: LIST
1604: PUSH
1605: LD_INT 2
1607: PUSH
1608: LD_INT 34
1610: PUSH
1611: LD_INT 32
1613: PUSH
1614: EMPTY
1615: LIST
1616: LIST
1617: PUSH
1618: LD_INT 34
1620: PUSH
1621: LD_INT 12
1623: PUSH
1624: EMPTY
1625: LIST
1626: LIST
1627: PUSH
1628: EMPTY
1629: LIST
1630: LIST
1631: LIST
1632: PUSH
1633: LD_INT 3
1635: PUSH
1636: LD_INT 33
1638: PUSH
1639: LD_INT 2
1641: PUSH
1642: EMPTY
1643: LIST
1644: LIST
1645: PUSH
1646: EMPTY
1647: LIST
1648: LIST
1649: PUSH
1650: EMPTY
1651: LIST
1652: LIST
1653: LIST
1654: PPUSH
1655: CALL_OW 70
1659: PUSH
1660: LD_INT 0
1662: GREATER
1663: IFFALSE 1843
// if GetCargo ( FilterUnitsInArea ( tree , ( [ [ f_empty ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] , [ f_not , [ f_control , control_remote ] ] ] ) ) [ 1 ] , mat_siberit ) = 100 then
1665: LD_INT 10
1667: PPUSH
1668: LD_INT 58
1670: PUSH
1671: EMPTY
1672: LIST
1673: PUSH
1674: LD_INT 2
1676: PUSH
1677: LD_INT 34
1679: PUSH
1680: LD_INT 32
1682: PUSH
1683: EMPTY
1684: LIST
1685: LIST
1686: PUSH
1687: LD_INT 34
1689: PUSH
1690: LD_INT 12
1692: PUSH
1693: EMPTY
1694: LIST
1695: LIST
1696: PUSH
1697: EMPTY
1698: LIST
1699: LIST
1700: LIST
1701: PUSH
1702: LD_INT 3
1704: PUSH
1705: LD_INT 33
1707: PUSH
1708: LD_INT 2
1710: PUSH
1711: EMPTY
1712: LIST
1713: LIST
1714: PUSH
1715: EMPTY
1716: LIST
1717: LIST
1718: PUSH
1719: EMPTY
1720: LIST
1721: LIST
1722: LIST
1723: PPUSH
1724: CALL_OW 70
1728: PUSH
1729: LD_INT 1
1731: ARRAY
1732: PPUSH
1733: LD_INT 3
1735: PPUSH
1736: CALL_OW 289
1740: PUSH
1741: LD_INT 100
1743: EQUAL
1744: IFFALSE 1843
// begin cargo_ok := true ;
1746: LD_ADDR_EXP 35
1750: PUSH
1751: LD_INT 1
1753: ST_TO_ADDR
// RemoveUnit ( FilterUnitsInArea ( tree , ( [ [ f_empty ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] , [ f_not , [ f_control , control_remote ] ] ] ) ) [ 1 ] ) ;
1754: LD_INT 10
1756: PPUSH
1757: LD_INT 58
1759: PUSH
1760: EMPTY
1761: LIST
1762: PUSH
1763: LD_INT 2
1765: PUSH
1766: LD_INT 34
1768: PUSH
1769: LD_INT 32
1771: PUSH
1772: EMPTY
1773: LIST
1774: LIST
1775: PUSH
1776: LD_INT 34
1778: PUSH
1779: LD_INT 12
1781: PUSH
1782: EMPTY
1783: LIST
1784: LIST
1785: PUSH
1786: EMPTY
1787: LIST
1788: LIST
1789: LIST
1790: PUSH
1791: LD_INT 3
1793: PUSH
1794: LD_INT 33
1796: PUSH
1797: LD_INT 2
1799: PUSH
1800: EMPTY
1801: LIST
1802: LIST
1803: PUSH
1804: EMPTY
1805: LIST
1806: LIST
1807: PUSH
1808: EMPTY
1809: LIST
1810: LIST
1811: LIST
1812: PPUSH
1813: CALL_OW 70
1817: PUSH
1818: LD_INT 1
1820: ARRAY
1821: PPUSH
1822: CALL_OW 64
// ChangeMissionObjectives ( DS-T2-out ) ;
1826: LD_STRING DS-T2-out
1828: PPUSH
1829: CALL_OW 337
// SetAreaMapShow ( tree , 0 ) ;
1833: LD_INT 10
1835: PPUSH
1836: LD_INT 0
1838: PPUSH
1839: CALL_OW 424
// end ; end ; if russian_attack = false and russian_trade and cargo_ok = false and russian_timer = 0 0$00 then
1843: LD_EXP 39
1847: PUSH
1848: LD_INT 0
1850: EQUAL
1851: PUSH
1852: LD_EXP 43
1856: AND
1857: PUSH
1858: LD_EXP 35
1862: PUSH
1863: LD_INT 0
1865: EQUAL
1866: AND
1867: PUSH
1868: LD_EXP 31
1872: PUSH
1873: LD_INT 0
1875: EQUAL
1876: AND
1877: IFFALSE 1904
// begin russian_attack := true ;
1879: LD_ADDR_EXP 39
1883: PUSH
1884: LD_INT 1
1886: ST_TO_ADDR
// ChangeMissionObjectives ( DS-T2-out ) ;
1887: LD_STRING DS-T2-out
1889: PPUSH
1890: CALL_OW 337
// SetAreaMapShow ( tree , 0 ) ;
1894: LD_INT 10
1896: PPUSH
1897: LD_INT 0
1899: PPUSH
1900: CALL_OW 424
// end ; if russian_trade = false and russian_attack = false and american_attack = false and tick mod 21000 = 0 then
1904: LD_EXP 43
1908: PUSH
1909: LD_INT 0
1911: EQUAL
1912: PUSH
1913: LD_EXP 39
1917: PUSH
1918: LD_INT 0
1920: EQUAL
1921: AND
1922: PUSH
1923: LD_EXP 40
1927: PUSH
1928: LD_INT 0
1930: EQUAL
1931: AND
1932: PUSH
1933: LD_OWVAR 1
1937: PUSH
1938: LD_INT 21000
1940: MOD
1941: PUSH
1942: LD_INT 0
1944: EQUAL
1945: AND
1946: IFFALSE 1999
// begin p := Rand ( 1 , 100 ) ;
1948: LD_ADDR_VAR 0 2
1952: PUSH
1953: LD_INT 1
1955: PPUSH
1956: LD_INT 100
1958: PPUSH
1959: CALL_OW 12
1963: ST_TO_ADDR
// if p <= [ 35 , 45 , 55 ] [ game_difficulty ] then
1964: LD_VAR 0 2
1968: PUSH
1969: LD_INT 35
1971: PUSH
1972: LD_INT 45
1974: PUSH
1975: LD_INT 55
1977: PUSH
1978: EMPTY
1979: LIST
1980: LIST
1981: LIST
1982: PUSH
1983: LD_EXP 2
1987: ARRAY
1988: LESSEQUAL
1989: IFFALSE 1999
// russian_attack := true ;
1991: LD_ADDR_EXP 39
1995: PUSH
1996: LD_INT 1
1998: ST_TO_ADDR
// end ; if american_help = false and american_attack = false and russian_attack = false and tick mod 31500 = 0 then
1999: LD_EXP 41
2003: PUSH
2004: LD_INT 0
2006: EQUAL
2007: PUSH
2008: LD_EXP 40
2012: PUSH
2013: LD_INT 0
2015: EQUAL
2016: AND
2017: PUSH
2018: LD_EXP 39
2022: PUSH
2023: LD_INT 0
2025: EQUAL
2026: AND
2027: PUSH
2028: LD_OWVAR 1
2032: PUSH
2033: LD_INT 31500
2035: MOD
2036: PUSH
2037: LD_INT 0
2039: EQUAL
2040: AND
2041: IFFALSE 2094
// begin p := Rand ( 1 , 100 ) ;
2043: LD_ADDR_VAR 0 2
2047: PUSH
2048: LD_INT 1
2050: PPUSH
2051: LD_INT 100
2053: PPUSH
2054: CALL_OW 12
2058: ST_TO_ADDR
// if p <= [ 33 , 44 , 55 ] [ game_difficulty ] then
2059: LD_VAR 0 2
2063: PUSH
2064: LD_INT 33
2066: PUSH
2067: LD_INT 44
2069: PUSH
2070: LD_INT 55
2072: PUSH
2073: EMPTY
2074: LIST
2075: LIST
2076: LIST
2077: PUSH
2078: LD_EXP 2
2082: ARRAY
2083: LESSEQUAL
2084: IFFALSE 2094
// american_attack := true ;
2086: LD_ADDR_EXP 40
2090: PUSH
2091: LD_INT 1
2093: ST_TO_ADDR
// end ; if american_attack = false and russian_attack = false and american_help = false and tick mod 21200 = 0 then
2094: LD_EXP 40
2098: PUSH
2099: LD_INT 0
2101: EQUAL
2102: PUSH
2103: LD_EXP 39
2107: PUSH
2108: LD_INT 0
2110: EQUAL
2111: AND
2112: PUSH
2113: LD_EXP 41
2117: PUSH
2118: LD_INT 0
2120: EQUAL
2121: AND
2122: PUSH
2123: LD_OWVAR 1
2127: PUSH
2128: LD_INT 21200
2130: MOD
2131: PUSH
2132: LD_INT 0
2134: EQUAL
2135: AND
2136: IFFALSE 2193
// begin p := Rand ( 1 , 100 ) ;
2138: LD_ADDR_VAR 0 2
2142: PUSH
2143: LD_INT 1
2145: PPUSH
2146: LD_INT 100
2148: PPUSH
2149: CALL_OW 12
2153: ST_TO_ADDR
// if p <= american_hchan then
2154: LD_VAR 0 2
2158: PUSH
2159: LD_EXP 36
2163: LESSEQUAL
2164: IFFALSE 2193
// begin american_help := true ;
2166: LD_ADDR_EXP 41
2170: PUSH
2171: LD_INT 1
2173: ST_TO_ADDR
// SayRadio ( am_comander , DS-amhelp ) ;
2174: LD_EXP 46
2178: PPUSH
2179: LD_STRING DS-amhelp
2181: PPUSH
2182: CALL_OW 94
// RaiseSailEvent ( 91 ) ;
2186: LD_INT 91
2188: PPUSH
2189: CALL_OW 427
// end ; end ; end ; if american_attack and american_timeing = 0 0$00 and FilterAllUnits ( [ f_side , 1 ] ) = 0 then
2193: LD_EXP 40
2197: PUSH
2198: LD_EXP 25
2202: PUSH
2203: LD_INT 0
2205: EQUAL
2206: AND
2207: PUSH
2208: LD_INT 22
2210: PUSH
2211: LD_INT 1
2213: PUSH
2214: EMPTY
2215: LIST
2216: LIST
2217: PPUSH
2218: CALL_OW 69
2222: PUSH
2223: LD_INT 0
2225: EQUAL
2226: AND
2227: IFFALSE 2329
// begin american_timeing := Rand ( 17 17$00 , 20 20$00 ) ;
2229: LD_ADDR_EXP 25
2233: PUSH
2234: LD_INT 35700
2236: PPUSH
2237: LD_INT 42000
2239: PPUSH
2240: CALL_OW 12
2244: ST_TO_ADDR
// SayRadio ( scout , DS-DZ-U ) ;
2245: LD_EXP 12
2249: PPUSH
2250: LD_STRING DS-DZ-U
2252: PPUSH
2253: CALL_OW 94
// Wait ( 0 0$33 ) ;
2257: LD_INT 1155
2259: PPUSH
2260: CALL_OW 67
// x := Rand ( 1 , 2 ) ;
2264: LD_ADDR_VAR 0 3
2268: PUSH
2269: LD_INT 1
2271: PPUSH
2272: LD_INT 2
2274: PPUSH
2275: CALL_OW 12
2279: ST_TO_ADDR
// case x of 1 :
2280: LD_VAR 0 3
2284: PUSH
2285: LD_INT 1
2287: DOUBLE
2288: EQUAL
2289: IFTRUE 2293
2291: GO 2303
2293: POP
// RaiseSailEvent ( 41 ) ; 2 :
2294: LD_INT 41
2296: PPUSH
2297: CALL_OW 427
2301: GO 2322
2303: LD_INT 2
2305: DOUBLE
2306: EQUAL
2307: IFTRUE 2311
2309: GO 2321
2311: POP
// RaiseSailEvent ( 42 ) ; end ;
2312: LD_INT 42
2314: PPUSH
2315: CALL_OW 427
2319: GO 2322
2321: POP
// RaiseSailEvent ( 42 ) ;
2322: LD_INT 42
2324: PPUSH
2325: CALL_OW 427
// end ; if russian_attack and russian_timeing = 0 0$00 and FilterAllUnits ( [ f_side , 3 ] ) = 0 then
2329: LD_EXP 39
2333: PUSH
2334: LD_EXP 24
2338: PUSH
2339: LD_INT 0
2341: EQUAL
2342: AND
2343: PUSH
2344: LD_INT 22
2346: PUSH
2347: LD_INT 3
2349: PUSH
2350: EMPTY
2351: LIST
2352: LIST
2353: PPUSH
2354: CALL_OW 69
2358: PUSH
2359: LD_INT 0
2361: EQUAL
2362: AND
2363: IFFALSE 2419
// begin russian_timeing := Rand ( 17 17$00 , 20 20$00 ) ;
2365: LD_ADDR_EXP 24
2369: PUSH
2370: LD_INT 35700
2372: PPUSH
2373: LD_INT 42000
2375: PPUSH
2376: CALL_OW 12
2380: ST_TO_ADDR
// SayRadio ( scout , DS-DZ-R ) ;
2381: LD_EXP 12
2385: PPUSH
2386: LD_STRING DS-DZ-R
2388: PPUSH
2389: CALL_OW 94
// Wait ( 0 0$45 ) ;
2393: LD_INT 1575
2395: PPUSH
2396: CALL_OW 67
// SayRadio ( ru_comander , DS-DR-R1 ) ;
2400: LD_EXP 47
2404: PPUSH
2405: LD_STRING DS-DR-R1
2407: PPUSH
2408: CALL_OW 94
// RaiseSailEvent ( 51 ) ;
2412: LD_INT 51
2414: PPUSH
2415: CALL_OW 427
// end ; if mission_time >= 25 25$00 and arabian_force < 10 then
2419: LD_EXP 34
2423: PUSH
2424: LD_INT 52500
2426: GREATEREQUAL
2427: PUSH
2428: LD_EXP 20
2432: PUSH
2433: LD_INT 10
2435: LESS
2436: AND
2437: IFFALSE 2461
// begin mission_time := 0 0$00 ;
2439: LD_ADDR_EXP 34
2443: PUSH
2444: LD_INT 0
2446: ST_TO_ADDR
// arabian_force := arabian_force + 1 ;
2447: LD_ADDR_EXP 20
2451: PUSH
2452: LD_EXP 20
2456: PUSH
2457: LD_INT 1
2459: PLUS
2460: ST_TO_ADDR
// end ; if arabian_timeing = 0 0$00 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_weapon , ar_control_tower ] ] ] ) = 0 then
2461: LD_EXP 23
2465: PUSH
2466: LD_INT 0
2468: EQUAL
2469: PUSH
2470: LD_INT 22
2472: PUSH
2473: LD_INT 2
2475: PUSH
2476: EMPTY
2477: LIST
2478: LIST
2479: PUSH
2480: LD_INT 3
2482: PUSH
2483: LD_INT 34
2485: PUSH
2486: LD_INT 31
2488: PUSH
2489: EMPTY
2490: LIST
2491: LIST
2492: PUSH
2493: EMPTY
2494: LIST
2495: LIST
2496: PUSH
2497: EMPTY
2498: LIST
2499: LIST
2500: PPUSH
2501: CALL_OW 69
2505: PUSH
2506: LD_INT 0
2508: EQUAL
2509: AND
2510: IFFALSE 2708
// begin arabian_timeing := 7 7$30 ;
2512: LD_ADDR_EXP 23
2516: PUSH
2517: LD_INT 15750
2519: ST_TO_ADDR
// x := Rand ( 1 , 3 ) ;
2520: LD_ADDR_VAR 0 3
2524: PUSH
2525: LD_INT 1
2527: PPUSH
2528: LD_INT 3
2530: PPUSH
2531: CALL_OW 12
2535: ST_TO_ADDR
// SayRadio ( scout , DS-DZ-H ) ;
2536: LD_EXP 12
2540: PPUSH
2541: LD_STRING DS-DZ-H
2543: PPUSH
2544: CALL_OW 94
// case x of 1 :
2548: LD_VAR 0 3
2552: PUSH
2553: LD_INT 1
2555: DOUBLE
2556: EQUAL
2557: IFTRUE 2561
2559: GO 2571
2561: POP
// RaiseSailEvent ( 31 ) ; 2 :
2562: LD_INT 31
2564: PPUSH
2565: CALL_OW 427
2569: GO 2608
2571: LD_INT 2
2573: DOUBLE
2574: EQUAL
2575: IFTRUE 2579
2577: GO 2589
2579: POP
// RaiseSailEvent ( 32 ) ; 3 :
2580: LD_INT 32
2582: PPUSH
2583: CALL_OW 427
2587: GO 2608
2589: LD_INT 3
2591: DOUBLE
2592: EQUAL
2593: IFTRUE 2597
2595: GO 2607
2597: POP
// RaiseSailEvent ( 33 ) ; end ;
2598: LD_INT 33
2600: PPUSH
2601: CALL_OW 427
2605: GO 2608
2607: POP
// RaiseSailEvent ( 33 ) ;
2608: LD_INT 33
2610: PPUSH
2611: CALL_OW 427
// if game_difficulty > 1 then
2615: LD_EXP 2
2619: PUSH
2620: LD_INT 1
2622: GREATER
2623: IFFALSE 2632
// RaiseSailEvent ( 33 ) ;
2625: LD_INT 33
2627: PPUSH
2628: CALL_OW 427
// if heike_dialog1 = false then
2632: LD_EXP 44
2636: PUSH
2637: LD_INT 0
2639: EQUAL
2640: IFFALSE 2671
// begin heike_dialog1 := true ;
2642: LD_ADDR_EXP 44
2646: PUSH
2647: LD_INT 1
2649: ST_TO_ADDR
// Wait ( 0 0$03 ) ;
2650: LD_INT 105
2652: PPUSH
2653: CALL_OW 67
// SayRadio ( ar_comander , heike1 ) ;
2657: LD_EXP 48
2661: PPUSH
2662: LD_STRING heike1
2664: PPUSH
2665: CALL_OW 94
// end else
2669: GO 2708
// if heike_dialog2 = false then
2671: LD_EXP 45
2675: PUSH
2676: LD_INT 0
2678: EQUAL
2679: IFFALSE 2708
// begin heike_dialog2 := true ;
2681: LD_ADDR_EXP 45
2685: PUSH
2686: LD_INT 1
2688: ST_TO_ADDR
// Wait ( 0 0$03 ) ;
2689: LD_INT 105
2691: PPUSH
2692: CALL_OW 67
// SayRadio ( ar_comander , heike2 ) ;
2696: LD_EXP 48
2700: PPUSH
2701: LD_STRING heike2
2703: PPUSH
2704: CALL_OW 94
// end ; end ; if FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) > 0 then
2708: LD_INT 22
2710: PUSH
2711: LD_INT 2
2713: PUSH
2714: EMPTY
2715: LIST
2716: LIST
2717: PUSH
2718: LD_INT 33
2720: PUSH
2721: LD_INT 2
2723: PUSH
2724: EMPTY
2725: LIST
2726: LIST
2727: PUSH
2728: EMPTY
2729: LIST
2730: LIST
2731: PPUSH
2732: CALL_OW 69
2736: PUSH
2737: LD_INT 0
2739: GREATER
2740: IFFALSE 2749
// ConnectWithTower ( 2 ) ;
2742: LD_INT 2
2744: PPUSH
2745: CALL 7139 0 1
// if FilterAllUnits ( [ [ [ f_side , 2 ] , [ f_not , [ f_weapon , ar_control_tower ] ] , [ f_not , [ f_hastask ] ] ] ] ) > 0 then
2749: LD_INT 22
2751: PUSH
2752: LD_INT 2
2754: PUSH
2755: EMPTY
2756: LIST
2757: LIST
2758: PUSH
2759: LD_INT 3
2761: PUSH
2762: LD_INT 34
2764: PUSH
2765: LD_INT 31
2767: PUSH
2768: EMPTY
2769: LIST
2770: LIST
2771: PUSH
2772: EMPTY
2773: LIST
2774: LIST
2775: PUSH
2776: LD_INT 3
2778: PUSH
2779: LD_INT 60
2781: PUSH
2782: EMPTY
2783: LIST
2784: PUSH
2785: EMPTY
2786: LIST
2787: LIST
2788: PUSH
2789: EMPTY
2790: LIST
2791: LIST
2792: LIST
2793: PUSH
2794: EMPTY
2795: LIST
2796: PPUSH
2797: CALL_OW 69
2801: PUSH
2802: LD_INT 0
2804: GREATER
2805: IFFALSE 2951
// begin filter := FilterAllUnits ( [ [ [ f_side , 2 ] , [ f_not , [ f_weapon , ar_control_tower ] ] , [ f_not , [ f_hastask ] ] ] ] ) ;
2807: LD_ADDR_VAR 0 4
2811: PUSH
2812: LD_INT 22
2814: PUSH
2815: LD_INT 2
2817: PUSH
2818: EMPTY
2819: LIST
2820: LIST
2821: PUSH
2822: LD_INT 3
2824: PUSH
2825: LD_INT 34
2827: PUSH
2828: LD_INT 31
2830: PUSH
2831: EMPTY
2832: LIST
2833: LIST
2834: PUSH
2835: EMPTY
2836: LIST
2837: LIST
2838: PUSH
2839: LD_INT 3
2841: PUSH
2842: LD_INT 60
2844: PUSH
2845: EMPTY
2846: LIST
2847: PUSH
2848: EMPTY
2849: LIST
2850: LIST
2851: PUSH
2852: EMPTY
2853: LIST
2854: LIST
2855: LIST
2856: PUSH
2857: EMPTY
2858: LIST
2859: PPUSH
2860: CALL_OW 69
2864: ST_TO_ADDR
// x := SpeedFilter ( FilterAllUnits ( [ f_enemy , 2 ] ) , 20 ) ;
2865: LD_ADDR_VAR 0 3
2869: PUSH
2870: LD_INT 81
2872: PUSH
2873: LD_INT 2
2875: PUSH
2876: EMPTY
2877: LIST
2878: LIST
2879: PPUSH
2880: CALL_OW 69
2884: PPUSH
2885: LD_INT 20
2887: PPUSH
2888: CALL 8522 0 2
2892: ST_TO_ADDR
// for i = 1 to filter do
2893: LD_ADDR_VAR 0 1
2897: PUSH
2898: DOUBLE
2899: LD_INT 1
2901: DEC
2902: ST_TO_ADDR
2903: LD_VAR 0 4
2907: PUSH
2908: FOR_TO
2909: IFFALSE 2949
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( x , filter [ i ] ) ) ;
2911: LD_VAR 0 4
2915: PUSH
2916: LD_VAR 0 1
2920: ARRAY
2921: PPUSH
2922: LD_VAR 0 3
2926: PPUSH
2927: LD_VAR 0 4
2931: PUSH
2932: LD_VAR 0 1
2936: ARRAY
2937: PPUSH
2938: CALL_OW 74
2942: PPUSH
2943: CALL_OW 115
2947: GO 2908
2949: POP
2950: POP
// end ; if FilterAllUnits ( [ [ [ f_side , 3 ] , [ f_not , [ f_hastask ] ] ] ] ) > 0 then
2951: LD_INT 22
2953: PUSH
2954: LD_INT 3
2956: PUSH
2957: EMPTY
2958: LIST
2959: LIST
2960: PUSH
2961: LD_INT 3
2963: PUSH
2964: LD_INT 60
2966: PUSH
2967: EMPTY
2968: LIST
2969: PUSH
2970: EMPTY
2971: LIST
2972: LIST
2973: PUSH
2974: EMPTY
2975: LIST
2976: LIST
2977: PUSH
2978: EMPTY
2979: LIST
2980: PPUSH
2981: CALL_OW 69
2985: PUSH
2986: LD_INT 0
2988: GREATER
2989: IFFALSE 3135
// begin filter := FilterAllUnits ( [ [ [ f_side , 3 ] , [ f_not , [ f_weapon , ar_control_tower ] ] , [ f_not , [ f_hastask ] ] ] ] ) ;
2991: LD_ADDR_VAR 0 4
2995: PUSH
2996: LD_INT 22
2998: PUSH
2999: LD_INT 3
3001: PUSH
3002: EMPTY
3003: LIST
3004: LIST
3005: PUSH
3006: LD_INT 3
3008: PUSH
3009: LD_INT 34
3011: PUSH
3012: LD_INT 31
3014: PUSH
3015: EMPTY
3016: LIST
3017: LIST
3018: PUSH
3019: EMPTY
3020: LIST
3021: LIST
3022: PUSH
3023: LD_INT 3
3025: PUSH
3026: LD_INT 60
3028: PUSH
3029: EMPTY
3030: LIST
3031: PUSH
3032: EMPTY
3033: LIST
3034: LIST
3035: PUSH
3036: EMPTY
3037: LIST
3038: LIST
3039: LIST
3040: PUSH
3041: EMPTY
3042: LIST
3043: PPUSH
3044: CALL_OW 69
3048: ST_TO_ADDR
// x := SpeedFilter ( FilterAllUnits ( [ f_enemy , 3 ] ) , 20 ) ;
3049: LD_ADDR_VAR 0 3
3053: PUSH
3054: LD_INT 81
3056: PUSH
3057: LD_INT 3
3059: PUSH
3060: EMPTY
3061: LIST
3062: LIST
3063: PPUSH
3064: CALL_OW 69
3068: PPUSH
3069: LD_INT 20
3071: PPUSH
3072: CALL 8522 0 2
3076: ST_TO_ADDR
// for i = 1 to filter do
3077: LD_ADDR_VAR 0 1
3081: PUSH
3082: DOUBLE
3083: LD_INT 1
3085: DEC
3086: ST_TO_ADDR
3087: LD_VAR 0 4
3091: PUSH
3092: FOR_TO
3093: IFFALSE 3133
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( x , filter [ i ] ) ) ;
3095: LD_VAR 0 4
3099: PUSH
3100: LD_VAR 0 1
3104: ARRAY
3105: PPUSH
3106: LD_VAR 0 3
3110: PPUSH
3111: LD_VAR 0 4
3115: PUSH
3116: LD_VAR 0 1
3120: ARRAY
3121: PPUSH
3122: CALL_OW 74
3126: PPUSH
3127: CALL_OW 115
3131: GO 3092
3133: POP
3134: POP
// end ; if FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] ] ] ) > 0 then
3135: LD_INT 22
3137: PUSH
3138: LD_INT 1
3140: PUSH
3141: EMPTY
3142: LIST
3143: LIST
3144: PUSH
3145: LD_INT 3
3147: PUSH
3148: LD_INT 60
3150: PUSH
3151: EMPTY
3152: LIST
3153: PUSH
3154: EMPTY
3155: LIST
3156: LIST
3157: PUSH
3158: EMPTY
3159: LIST
3160: LIST
3161: PUSH
3162: EMPTY
3163: LIST
3164: PPUSH
3165: CALL_OW 69
3169: PUSH
3170: LD_INT 0
3172: GREATER
3173: IFFALSE 3319
// begin filter := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_not , [ f_weapon , ar_control_tower ] ] , [ f_not , [ f_hastask ] ] ] ] ) ;
3175: LD_ADDR_VAR 0 4
3179: PUSH
3180: LD_INT 22
3182: PUSH
3183: LD_INT 1
3185: PUSH
3186: EMPTY
3187: LIST
3188: LIST
3189: PUSH
3190: LD_INT 3
3192: PUSH
3193: LD_INT 34
3195: PUSH
3196: LD_INT 31
3198: PUSH
3199: EMPTY
3200: LIST
3201: LIST
3202: PUSH
3203: EMPTY
3204: LIST
3205: LIST
3206: PUSH
3207: LD_INT 3
3209: PUSH
3210: LD_INT 60
3212: PUSH
3213: EMPTY
3214: LIST
3215: PUSH
3216: EMPTY
3217: LIST
3218: LIST
3219: PUSH
3220: EMPTY
3221: LIST
3222: LIST
3223: LIST
3224: PUSH
3225: EMPTY
3226: LIST
3227: PPUSH
3228: CALL_OW 69
3232: ST_TO_ADDR
// x := SpeedFilter ( FilterAllUnits ( [ f_enemy , 1 ] ) , 20 ) ;
3233: LD_ADDR_VAR 0 3
3237: PUSH
3238: LD_INT 81
3240: PUSH
3241: LD_INT 1
3243: PUSH
3244: EMPTY
3245: LIST
3246: LIST
3247: PPUSH
3248: CALL_OW 69
3252: PPUSH
3253: LD_INT 20
3255: PPUSH
3256: CALL 8522 0 2
3260: ST_TO_ADDR
// for i = 1 to filter do
3261: LD_ADDR_VAR 0 1
3265: PUSH
3266: DOUBLE
3267: LD_INT 1
3269: DEC
3270: ST_TO_ADDR
3271: LD_VAR 0 4
3275: PUSH
3276: FOR_TO
3277: IFFALSE 3317
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( x , filter [ i ] ) ) ;
3279: LD_VAR 0 4
3283: PUSH
3284: LD_VAR 0 1
3288: ARRAY
3289: PPUSH
3290: LD_VAR 0 3
3294: PPUSH
3295: LD_VAR 0 4
3299: PUSH
3300: LD_VAR 0 1
3304: ARRAY
3305: PPUSH
3306: CALL_OW 74
3310: PPUSH
3311: CALL_OW 115
3315: GO 3276
3317: POP
3318: POP
// end ; if FilterAllUnits ( [ [ [ f_side , 2 ] , [ f_weapon , ar_bio_bomb ] , [ f_not , [ f_lives , 700 ] ] ] ] ) > 0 then
3319: LD_INT 22
3321: PUSH
3322: LD_INT 2
3324: PUSH
3325: EMPTY
3326: LIST
3327: LIST
3328: PUSH
3329: LD_INT 34
3331: PUSH
3332: LD_INT 91
3334: PUSH
3335: EMPTY
3336: LIST
3337: LIST
3338: PUSH
3339: LD_INT 3
3341: PUSH
3342: LD_INT 24
3344: PUSH
3345: LD_INT 700
3347: PUSH
3348: EMPTY
3349: LIST
3350: LIST
3351: PUSH
3352: EMPTY
3353: LIST
3354: LIST
3355: PUSH
3356: EMPTY
3357: LIST
3358: LIST
3359: LIST
3360: PUSH
3361: EMPTY
3362: LIST
3363: PPUSH
3364: CALL_OW 69
3368: PUSH
3369: LD_INT 0
3371: GREATER
3372: IFFALSE 3469
// begin filter := FilterAllUnits ( [ [ [ f_side , 2 ] , [ f_weapon , ar_bio_bomb ] , [ f_not , [ f_lives , 700 ] ] ] ] ) ;
3374: LD_ADDR_VAR 0 4
3378: PUSH
3379: LD_INT 22
3381: PUSH
3382: LD_INT 2
3384: PUSH
3385: EMPTY
3386: LIST
3387: LIST
3388: PUSH
3389: LD_INT 34
3391: PUSH
3392: LD_INT 91
3394: PUSH
3395: EMPTY
3396: LIST
3397: LIST
3398: PUSH
3399: LD_INT 3
3401: PUSH
3402: LD_INT 24
3404: PUSH
3405: LD_INT 700
3407: PUSH
3408: EMPTY
3409: LIST
3410: LIST
3411: PUSH
3412: EMPTY
3413: LIST
3414: LIST
3415: PUSH
3416: EMPTY
3417: LIST
3418: LIST
3419: LIST
3420: PUSH
3421: EMPTY
3422: LIST
3423: PPUSH
3424: CALL_OW 69
3428: ST_TO_ADDR
// for i = 1 to filter do
3429: LD_ADDR_VAR 0 1
3433: PUSH
3434: DOUBLE
3435: LD_INT 1
3437: DEC
3438: ST_TO_ADDR
3439: LD_VAR 0 4
3443: PUSH
3444: FOR_TO
3445: IFFALSE 3467
// SetLives ( filter [ i ] , 1 ) ;
3447: LD_VAR 0 4
3451: PUSH
3452: LD_VAR 0 1
3456: ARRAY
3457: PPUSH
3458: LD_INT 1
3460: PPUSH
3461: CALL_OW 234
3465: GO 3444
3467: POP
3468: POP
// end ; end ; end_of_file
3469: PPOPN 4
3471: END
// export function Start_Mission ; begin
3472: LD_INT 0
3474: PPUSH
// PrepareLegion ;
3475: CALL 3516 0 0
// PrepareMeeting ;
3479: CALL 4133 0 0
// case Query ( DS-text-beg ) of 1 :
3483: LD_STRING DS-text-beg
3485: PPUSH
3486: CALL_OW 97
3490: PUSH
3491: LD_INT 1
3493: DOUBLE
3494: EQUAL
3495: IFTRUE 3499
3497: GO 3502
3499: POP
// ; end ;
3500: GO 3503
3502: POP
// game_on := true ;
3503: LD_ADDR_EXP 1
3507: PUSH
3508: LD_INT 1
3510: ST_TO_ADDR
// end ;
3511: LD_VAR 0 1
3515: RET
// export l_cmndr , l_skill , l_units ; function PrepareLegion ; var i , p , filter , team ; begin
3516: LD_INT 0
3518: PPUSH
3519: PPUSH
3520: PPUSH
3521: PPUSH
3522: PPUSH
// uc_side := 8 ;
3523: LD_ADDR_OWVAR 20
3527: PUSH
3528: LD_INT 8
3530: ST_TO_ADDR
// uc_nation := 2 ;
3531: LD_ADDR_OWVAR 21
3535: PUSH
3536: LD_INT 2
3538: ST_TO_ADDR
// l_skill := [ 9 , 8 , 7 ] [ difficulty ] ;
3539: LD_ADDR_EXP 50
3543: PUSH
3544: LD_INT 9
3546: PUSH
3547: LD_INT 8
3549: PUSH
3550: LD_INT 7
3552: PUSH
3553: EMPTY
3554: LIST
3555: LIST
3556: LIST
3557: PUSH
3558: LD_OWVAR 67
3562: ARRAY
3563: ST_TO_ADDR
// l_units := [ 9 , 8 , 8 ] [ difficulty ] ;
3564: LD_ADDR_EXP 51
3568: PUSH
3569: LD_INT 9
3571: PUSH
3572: LD_INT 8
3574: PUSH
3575: LD_INT 8
3577: PUSH
3578: EMPTY
3579: LIST
3580: LIST
3581: LIST
3582: PUSH
3583: LD_OWVAR 67
3587: ARRAY
3588: ST_TO_ADDR
// filter := [ ] ;
3589: LD_ADDR_VAR 0 4
3593: PUSH
3594: EMPTY
3595: ST_TO_ADDR
// hc_gallery := desert ;
3596: LD_ADDR_OWVAR 33
3600: PUSH
3601: LD_STRING desert
3603: ST_TO_ADDR
// hc_face_number := 1 ;
3604: LD_ADDR_OWVAR 34
3608: PUSH
3609: LD_INT 1
3611: ST_TO_ADDR
// hc_skills := [ l_skill + 2 , l_skill - 1 , l_skill , l_skill + 1 ] ;
3612: LD_ADDR_OWVAR 31
3616: PUSH
3617: LD_EXP 50
3621: PUSH
3622: LD_INT 2
3624: PLUS
3625: PUSH
3626: LD_EXP 50
3630: PUSH
3631: LD_INT 1
3633: MINUS
3634: PUSH
3635: LD_EXP 50
3639: PUSH
3640: LD_EXP 50
3644: PUSH
3645: LD_INT 1
3647: PLUS
3648: PUSH
3649: EMPTY
3650: LIST
3651: LIST
3652: LIST
3653: LIST
3654: ST_TO_ADDR
// hc_sex := sex_male ;
3655: LD_ADDR_OWVAR 27
3659: PUSH
3660: LD_INT 1
3662: ST_TO_ADDR
// hc_name := Henri Ruotz ;
3663: LD_ADDR_OWVAR 26
3667: PUSH
3668: LD_STRING Henri Ruotz
3670: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
3671: LD_ADDR_OWVAR 29
3675: PUSH
3676: LD_INT 10
3678: PUSH
3679: LD_INT 10
3681: PUSH
3682: EMPTY
3683: LIST
3684: LIST
3685: ST_TO_ADDR
// hc_class := 1 ;
3686: LD_ADDR_OWVAR 28
3690: PUSH
3691: LD_INT 1
3693: ST_TO_ADDR
// hc_importance := 100 ;
3694: LD_ADDR_OWVAR 32
3698: PUSH
3699: LD_INT 100
3701: ST_TO_ADDR
// l_cmndr := CreateHuman ;
3702: LD_ADDR_EXP 49
3706: PUSH
3707: CALL_OW 44
3711: ST_TO_ADDR
// hc_importance := 0 ;
3712: LD_ADDR_OWVAR 32
3716: PUSH
3717: LD_INT 0
3719: ST_TO_ADDR
// scout := PrepareHuman ( sex_male , 1 , 0 ) ;
3720: LD_ADDR_EXP 12
3724: PUSH
3725: LD_INT 1
3727: PPUSH
3728: LD_INT 1
3730: PPUSH
3731: LD_INT 0
3733: PPUSH
3734: CALL_OW 380
3738: ST_TO_ADDR
// for i = 1 to 4 do
3739: LD_ADDR_VAR 0 2
3743: PUSH
3744: DOUBLE
3745: LD_INT 1
3747: DEC
3748: ST_TO_ADDR
3749: LD_INT 4
3751: PUSH
3752: FOR_TO
3753: IFFALSE 3803
// for p = 1 to 6 do
3755: LD_ADDR_VAR 0 3
3759: PUSH
3760: DOUBLE
3761: LD_INT 1
3763: DEC
3764: ST_TO_ADDR
3765: LD_INT 6
3767: PUSH
3768: FOR_TO
3769: IFFALSE 3799
// filter := filter ^ CreateHumanWithClass ( i , l_skill ) ;
3771: LD_ADDR_VAR 0 4
3775: PUSH
3776: LD_VAR 0 4
3780: PUSH
3781: LD_VAR 0 2
3785: PPUSH
3786: LD_EXP 50
3790: PPUSH
3791: CALL 7323 0 2
3795: ADD
3796: ST_TO_ADDR
3797: GO 3768
3799: POP
3800: POP
3801: GO 3752
3803: POP
3804: POP
// team := CharacterSelection ( text , l_units , l_units , [ sel_change_class , l_cmndr , sel_changeable , sel_not_hired ] ^ filter , [ class_soldier , class_mechanic , class_engineer , class_scientistic , class_mortar ] ) ;
3805: LD_ADDR_VAR 0 5
3809: PUSH
3810: LD_STRING text
3812: PPUSH
3813: LD_EXP 51
3817: PPUSH
3818: LD_EXP 51
3822: PPUSH
3823: LD_INT -5
3825: PUSH
3826: LD_EXP 49
3830: PUSH
3831: LD_INT -3
3833: PUSH
3834: LD_INT -2
3836: PUSH
3837: EMPTY
3838: LIST
3839: LIST
3840: LIST
3841: LIST
3842: PUSH
3843: LD_VAR 0 4
3847: ADD
3848: PPUSH
3849: LD_INT 1
3851: PUSH
3852: LD_INT 3
3854: PUSH
3855: LD_INT 2
3857: PUSH
3858: LD_INT 4
3860: PUSH
3861: LD_INT 8
3863: PUSH
3864: EMPTY
3865: LIST
3866: LIST
3867: LIST
3868: LIST
3869: LIST
3870: PPUSH
3871: CALL_OW 42
3875: ST_TO_ADDR
// for i = 1 to l_units do
3876: LD_ADDR_VAR 0 2
3880: PUSH
3881: DOUBLE
3882: LD_INT 1
3884: DEC
3885: ST_TO_ADDR
3886: LD_EXP 51
3890: PUSH
3891: FOR_TO
3892: IFFALSE 3917
// PlaceUnitArea ( team [ i ] , legion_spawn , false ) ;
3894: LD_VAR 0 5
3898: PUSH
3899: LD_VAR 0 2
3903: ARRAY
3904: PPUSH
3905: LD_INT 1
3907: PPUSH
3908: LD_INT 0
3910: PPUSH
3911: CALL_OW 49
3915: GO 3891
3917: POP
3918: POP
// PlaceUnitArea ( l_cmndr , legion_spawn , false ) ;
3919: LD_EXP 49
3923: PPUSH
3924: LD_INT 1
3926: PPUSH
3927: LD_INT 0
3929: PPUSH
3930: CALL_OW 49
// end ;
3934: LD_VAR 0 1
3938: RET
// export function PlaceCamera ; begin
3939: LD_INT 0
3941: PPUSH
// PlaceSeeing ( 46 , 48 , 8 , 10 ) ;
3942: LD_INT 46
3944: PPUSH
3945: LD_INT 48
3947: PPUSH
3948: LD_INT 8
3950: PPUSH
3951: LD_INT 10
3953: PPUSH
3954: CALL_OW 330
// PlaceSeeing ( 58 , 66 , 8 , 10 ) ;
3958: LD_INT 58
3960: PPUSH
3961: LD_INT 66
3963: PPUSH
3964: LD_INT 8
3966: PPUSH
3967: LD_INT 10
3969: PPUSH
3970: CALL_OW 330
// PlaceSeeing ( 82 , 82 , 8 , 10 ) ;
3974: LD_INT 82
3976: PPUSH
3977: LD_INT 82
3979: PPUSH
3980: LD_INT 8
3982: PPUSH
3983: LD_INT 10
3985: PPUSH
3986: CALL_OW 330
// PlaceSeeing ( 107 , 79 , 8 , 10 ) ;
3990: LD_INT 107
3992: PPUSH
3993: LD_INT 79
3995: PPUSH
3996: LD_INT 8
3998: PPUSH
3999: LD_INT 10
4001: PPUSH
4002: CALL_OW 330
// PlaceSeeing ( 101 , 57 , 8 , 10 ) ;
4006: LD_INT 101
4008: PPUSH
4009: LD_INT 57
4011: PPUSH
4012: LD_INT 8
4014: PPUSH
4015: LD_INT 10
4017: PPUSH
4018: CALL_OW 330
// PlaceSeeing ( 85 , 32 , 8 , 10 ) ;
4022: LD_INT 85
4024: PPUSH
4025: LD_INT 32
4027: PPUSH
4028: LD_INT 8
4030: PPUSH
4031: LD_INT 10
4033: PPUSH
4034: CALL_OW 330
// PlaceSeeing ( 108 , 72 , 8 , 10 ) ;
4038: LD_INT 108
4040: PPUSH
4041: LD_INT 72
4043: PPUSH
4044: LD_INT 8
4046: PPUSH
4047: LD_INT 10
4049: PPUSH
4050: CALL_OW 330
// PlaceSeeing ( 124 , 74 , 8 , 10 ) ;
4054: LD_INT 124
4056: PPUSH
4057: LD_INT 74
4059: PPUSH
4060: LD_INT 8
4062: PPUSH
4063: LD_INT 10
4065: PPUSH
4066: CALL_OW 330
// PlaceSeeing ( 67 , 33 , 8 , 20 ) ;
4070: LD_INT 67
4072: PPUSH
4073: LD_INT 33
4075: PPUSH
4076: LD_INT 8
4078: PPUSH
4079: LD_INT 20
4081: PPUSH
4082: CALL_OW 330
// RemoveSeeing ( 67 , 33 , 8 ) ;
4086: LD_INT 67
4088: PPUSH
4089: LD_INT 33
4091: PPUSH
4092: LD_INT 8
4094: PPUSH
4095: CALL_OW 331
// PlaceSeeing ( 94 , 84 , 8 , 20 ) ;
4099: LD_INT 94
4101: PPUSH
4102: LD_INT 84
4104: PPUSH
4105: LD_INT 8
4107: PPUSH
4108: LD_INT 20
4110: PPUSH
4111: CALL_OW 330
// RemoveSeeing ( 94 , 84 , 8 ) ;
4115: LD_INT 94
4117: PPUSH
4118: LD_INT 84
4120: PPUSH
4121: LD_INT 8
4123: PPUSH
4124: CALL_OW 331
// end ;
4128: LD_VAR 0 1
4132: RET
// export function PrepareMeeting ; begin
4133: LD_INT 0
4135: PPUSH
// uc_side := 6 ;
4136: LD_ADDR_OWVAR 20
4140: PUSH
4141: LD_INT 6
4143: ST_TO_ADDR
// hc_gallery := desert ;
4144: LD_ADDR_OWVAR 33
4148: PUSH
4149: LD_STRING desert
4151: ST_TO_ADDR
// hc_face_number := 2 ;
4152: LD_ADDR_OWVAR 34
4156: PUSH
4157: LD_INT 2
4159: ST_TO_ADDR
// hc_name := Leopold Drass ;
4160: LD_ADDR_OWVAR 26
4164: PUSH
4165: LD_STRING Leopold Drass
4167: ST_TO_ADDR
// hc_class := 1 ;
4168: LD_ADDR_OWVAR 28
4172: PUSH
4173: LD_INT 1
4175: ST_TO_ADDR
// hc_sex := sex_male ;
4176: LD_ADDR_OWVAR 27
4180: PUSH
4181: LD_INT 1
4183: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
4184: LD_ADDR_OWVAR 29
4188: PUSH
4189: LD_INT 12
4191: PUSH
4192: LD_INT 12
4194: PUSH
4195: EMPTY
4196: LIST
4197: LIST
4198: ST_TO_ADDR
// Leopold := CreateHuman ;
4199: LD_ADDR_EXP 7
4203: PUSH
4204: CALL_OW 44
4208: ST_TO_ADDR
// PlaceUnitArea ( Leopold , north_spawn , false ) ;
4209: LD_EXP 7
4213: PPUSH
4214: LD_INT 3
4216: PPUSH
4217: LD_INT 0
4219: PPUSH
4220: CALL_OW 49
// end ; end_of_file
4224: LD_VAR 0 1
4228: RET
// on SailEvent ( num ) do var i , filter , un , p , area ;
4229: LD_INT 0
4231: PPUSH
4232: PPUSH
4233: PPUSH
4234: PPUSH
4235: PPUSH
// begin case num of 1 :
4236: LD_VAR 0 1
4240: PUSH
4241: LD_INT 1
4243: DOUBLE
4244: EQUAL
4245: IFTRUE 4249
4247: GO 4281
4249: POP
// begin ComMoveXY ( leopold , GetX ( l_cmndr ) , GetY ( l_cmndr ) ) ;
4250: LD_EXP 7
4254: PPUSH
4255: LD_EXP 49
4259: PPUSH
4260: CALL_OW 250
4264: PPUSH
4265: LD_EXP 49
4269: PPUSH
4270: CALL_OW 251
4274: PPUSH
4275: CALL_OW 111
// end ; 2 :
4279: GO 6699
4281: LD_INT 2
4283: DOUBLE
4284: EQUAL
4285: IFTRUE 4289
4287: GO 4398
4289: POP
// begin InGameOn ;
4290: CALL_OW 8
// meeting_start := true ;
4294: LD_ADDR_EXP 26
4298: PUSH
4299: LD_INT 1
4301: ST_TO_ADDR
// ComTurnUnit ( leopold , l_cmndr ) ;
4302: LD_EXP 7
4306: PPUSH
4307: LD_EXP 49
4311: PPUSH
4312: CALL_OW 119
// ComTurnUnit ( l_cmndr , leopold ) ;
4316: LD_EXP 49
4320: PPUSH
4321: LD_EXP 7
4325: PPUSH
4326: CALL_OW 119
// Say ( leopold , DS-DL-1 ) ;
4330: LD_EXP 7
4334: PPUSH
4335: LD_STRING DS-DL-1
4337: PPUSH
4338: CALL_OW 88
// Say ( l_cmndr , DS-DC-1 ) ;
4342: LD_EXP 49
4346: PPUSH
4347: LD_STRING DS-DC-1
4349: PPUSH
4350: CALL_OW 88
// Say ( leopold , DS-DL-2 ) ;
4354: LD_EXP 7
4358: PPUSH
4359: LD_STRING DS-DL-2
4361: PPUSH
4362: CALL_OW 88
// ComEnterUnit ( leopold , fort ) ;
4366: LD_EXP 7
4370: PPUSH
4371: LD_INT 23
4373: PPUSH
4374: CALL_OW 120
// InGameOff ;
4378: CALL_OW 9
// Wait ( 0 0$01 ) ;
4382: LD_INT 35
4384: PPUSH
4385: CALL_OW 67
// ChangeMissionObjectives ( DS-T1 ) ;
4389: LD_STRING DS-T1
4391: PPUSH
4392: CALL_OW 337
// end ; 10 :
4396: GO 6699
4398: LD_INT 10
4400: DOUBLE
4401: EQUAL
4402: IFTRUE 4406
4404: GO 4618
4406: POP
// begin uc_side := 6 ;
4407: LD_ADDR_OWVAR 20
4411: PUSH
4412: LD_INT 6
4414: ST_TO_ADDR
// uc_nation := 2 ;
4415: LD_ADDR_OWVAR 21
4419: PUSH
4420: LD_INT 2
4422: ST_TO_ADDR
// hc_gallery :=  ;
4423: LD_ADDR_OWVAR 33
4427: PUSH
4428: LD_STRING 
4430: ST_TO_ADDR
// hc_skills := [ skill + 2 , skill - 1 , skill , skill + 1 ] ;
4431: LD_ADDR_OWVAR 31
4435: PUSH
4436: LD_EXP 16
4440: PUSH
4441: LD_INT 2
4443: PLUS
4444: PUSH
4445: LD_EXP 16
4449: PUSH
4450: LD_INT 1
4452: MINUS
4453: PUSH
4454: LD_EXP 16
4458: PUSH
4459: LD_EXP 16
4463: PUSH
4464: LD_INT 1
4466: PLUS
4467: PUSH
4468: EMPTY
4469: LIST
4470: LIST
4471: LIST
4472: LIST
4473: ST_TO_ADDR
// hc_sex := sex_male ;
4474: LD_ADDR_OWVAR 27
4478: PUSH
4479: LD_INT 1
4481: ST_TO_ADDR
// hc_name := Samuel van Horn ;
4482: LD_ADDR_OWVAR 26
4486: PUSH
4487: LD_STRING Samuel van Horn
4489: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
4490: LD_ADDR_OWVAR 29
4494: PUSH
4495: LD_INT 11
4497: PUSH
4498: LD_INT 10
4500: PUSH
4501: EMPTY
4502: LIST
4503: LIST
4504: ST_TO_ADDR
// hc_class := 1 ;
4505: LD_ADDR_OWVAR 28
4509: PUSH
4510: LD_INT 1
4512: ST_TO_ADDR
// samuel := CreateHuman ;
4513: LD_ADDR_EXP 9
4517: PUSH
4518: CALL_OW 44
4522: ST_TO_ADDR
// PlaceUnitArea ( samuel , south_spawn , false ) ;
4523: LD_EXP 9
4527: PPUSH
4528: LD_INT 4
4530: PPUSH
4531: LD_INT 0
4533: PPUSH
4534: CALL_OW 49
// for i = 1 to 3 do
4538: LD_ADDR_VAR 0 2
4542: PUSH
4543: DOUBLE
4544: LD_INT 1
4546: DEC
4547: ST_TO_ADDR
4548: LD_INT 3
4550: PUSH
4551: FOR_TO
4552: IFFALSE 4579
// PlaceUnitArea ( CreateHumanWithClass ( class_mortar , skill ) , south_spawn , false ) ;
4554: LD_INT 8
4556: PPUSH
4557: LD_EXP 16
4561: PPUSH
4562: CALL 7323 0 2
4566: PPUSH
4567: LD_INT 4
4569: PPUSH
4570: LD_INT 0
4572: PPUSH
4573: CALL_OW 49
4577: GO 4551
4579: POP
4580: POP
// ComEnterUnit ( FilterAllUnits ( [ f_side , 6 ] ) diff [ leopold , fort ] , fort ) ;
4581: LD_INT 22
4583: PUSH
4584: LD_INT 6
4586: PUSH
4587: EMPTY
4588: LIST
4589: LIST
4590: PPUSH
4591: CALL_OW 69
4595: PUSH
4596: LD_EXP 7
4600: PUSH
4601: LD_INT 23
4603: PUSH
4604: EMPTY
4605: LIST
4606: LIST
4607: DIFF
4608: PPUSH
4609: LD_INT 23
4611: PPUSH
4612: CALL_OW 120
// end ; 3 :
4616: GO 6699
4618: LD_INT 3
4620: DOUBLE
4621: EQUAL
4622: IFTRUE 4626
4624: GO 4637
4626: POP
// begin arabian_attack := true ;
4627: LD_ADDR_EXP 38
4631: PUSH
4632: LD_INT 1
4634: ST_TO_ADDR
// end ; 4 :
4635: GO 6699
4637: LD_INT 4
4639: DOUBLE
4640: EQUAL
4641: IFTRUE 4645
4643: GO 4656
4645: POP
// begin american_attack := true ;
4646: LD_ADDR_EXP 40
4650: PUSH
4651: LD_INT 1
4653: ST_TO_ADDR
// end ; 5 :
4654: GO 6699
4656: LD_INT 5
4658: DOUBLE
4659: EQUAL
4660: IFTRUE 4664
4662: GO 4675
4664: POP
// begin russian_attack := true ;
4665: LD_ADDR_EXP 39
4669: PUSH
4670: LD_INT 1
4672: ST_TO_ADDR
// end ; 31 :
4673: GO 6699
4675: LD_INT 31
4677: DOUBLE
4678: EQUAL
4679: IFTRUE 4683
4681: GO 4958
4683: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
4684: LD_ADDR_VAR 0 6
4688: PUSH
4689: LD_EXP 15
4693: PUSH
4694: LD_INT 1
4696: PPUSH
4697: LD_EXP 15
4701: PPUSH
4702: CALL_OW 12
4706: ARRAY
4707: ST_TO_ADDR
// uc_side := 2 ;
4708: LD_ADDR_OWVAR 20
4712: PUSH
4713: LD_INT 2
4715: ST_TO_ADDR
// uc_nation := 2 ;
4716: LD_ADDR_OWVAR 21
4720: PUSH
4721: LD_INT 2
4723: ST_TO_ADDR
// for i = 1 to arabian_force do
4724: LD_ADDR_VAR 0 2
4728: PUSH
4729: DOUBLE
4730: LD_INT 1
4732: DEC
4733: ST_TO_ADDR
4734: LD_EXP 20
4738: PUSH
4739: FOR_TO
4740: IFFALSE 4819
// begin vc_chassis := ar_half_tracked ;
4742: LD_ADDR_OWVAR 37
4746: PUSH
4747: LD_INT 14
4749: ST_TO_ADDR
// vc_engine := engine_siberite ;
4750: LD_ADDR_OWVAR 39
4754: PUSH
4755: LD_INT 3
4757: ST_TO_ADDR
// vc_control := control_remote ;
4758: LD_ADDR_OWVAR 38
4762: PUSH
4763: LD_INT 2
4765: ST_TO_ADDR
// vc_weapon := ar_weapons [ Rand ( 1 , ar_weapons ) ] ;
4766: LD_ADDR_OWVAR 40
4770: PUSH
4771: LD_EXP 17
4775: PUSH
4776: LD_INT 1
4778: PPUSH
4779: LD_EXP 17
4783: PPUSH
4784: CALL_OW 12
4788: ARRAY
4789: ST_TO_ADDR
// un := CreateVehicle ;
4790: LD_ADDR_VAR 0 4
4794: PUSH
4795: CALL_OW 45
4799: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
4800: LD_VAR 0 4
4804: PPUSH
4805: LD_VAR 0 6
4809: PPUSH
4810: LD_INT 0
4812: PPUSH
4813: CALL_OW 49
// end ;
4817: GO 4739
4819: POP
4820: POP
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_manual ] ] ) < 2 then
4821: LD_INT 22
4823: PUSH
4824: LD_INT 2
4826: PUSH
4827: EMPTY
4828: LIST
4829: LIST
4830: PUSH
4831: LD_INT 33
4833: PUSH
4834: LD_INT 1
4836: PUSH
4837: EMPTY
4838: LIST
4839: LIST
4840: PUSH
4841: EMPTY
4842: LIST
4843: LIST
4844: PPUSH
4845: CALL_OW 69
4849: PUSH
4850: LD_INT 2
4852: LESS
4853: IFFALSE 4956
// for i = 1 to 2 do
4855: LD_ADDR_VAR 0 2
4859: PUSH
4860: DOUBLE
4861: LD_INT 1
4863: DEC
4864: ST_TO_ADDR
4865: LD_INT 2
4867: PUSH
4868: FOR_TO
4869: IFFALSE 4954
// begin vc_chassis := ar_half_tracked ;
4871: LD_ADDR_OWVAR 37
4875: PUSH
4876: LD_INT 14
4878: ST_TO_ADDR
// vc_engine := engine_siberite ;
4879: LD_ADDR_OWVAR 39
4883: PUSH
4884: LD_INT 3
4886: ST_TO_ADDR
// vc_control := control_manual ;
4887: LD_ADDR_OWVAR 38
4891: PUSH
4892: LD_INT 1
4894: ST_TO_ADDR
// vc_weapon := ar_control_tower ;
4895: LD_ADDR_OWVAR 40
4899: PUSH
4900: LD_INT 31
4902: ST_TO_ADDR
// un := CreateVehicle ;
4903: LD_ADDR_VAR 0 4
4907: PUSH
4908: CALL_OW 45
4912: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
4913: LD_VAR 0 4
4917: PPUSH
4918: LD_VAR 0 6
4922: PPUSH
4923: LD_INT 0
4925: PPUSH
4926: CALL_OW 49
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , skill ) , un ) ;
4930: LD_INT 3
4932: PPUSH
4933: LD_EXP 16
4937: PPUSH
4938: CALL 7323 0 2
4942: PPUSH
4943: LD_VAR 0 4
4947: PPUSH
4948: CALL_OW 52
// end ;
4952: GO 4868
4954: POP
4955: POP
// end ; 32 :
4956: GO 6699
4958: LD_INT 32
4960: DOUBLE
4961: EQUAL
4962: IFTRUE 4966
4964: GO 5339
4966: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
4967: LD_ADDR_VAR 0 6
4971: PUSH
4972: LD_EXP 15
4976: PUSH
4977: LD_INT 1
4979: PPUSH
4980: LD_EXP 15
4984: PPUSH
4985: CALL_OW 12
4989: ARRAY
4990: ST_TO_ADDR
// uc_side := 2 ;
4991: LD_ADDR_OWVAR 20
4995: PUSH
4996: LD_INT 2
4998: ST_TO_ADDR
// uc_nation := 2 ;
4999: LD_ADDR_OWVAR 21
5003: PUSH
5004: LD_INT 2
5006: ST_TO_ADDR
// for i = 1 to ( arabian_force - 2 ) do
5007: LD_ADDR_VAR 0 2
5011: PUSH
5012: DOUBLE
5013: LD_INT 1
5015: DEC
5016: ST_TO_ADDR
5017: LD_EXP 20
5021: PUSH
5022: LD_INT 2
5024: MINUS
5025: PUSH
5026: FOR_TO
5027: IFFALSE 5110
// begin vc_chassis := ar_half_tracked ;
5029: LD_ADDR_OWVAR 37
5033: PUSH
5034: LD_INT 14
5036: ST_TO_ADDR
// vc_engine := engine_siberite ;
5037: LD_ADDR_OWVAR 39
5041: PUSH
5042: LD_INT 3
5044: ST_TO_ADDR
// vc_control := control_remote ;
5045: LD_ADDR_OWVAR 38
5049: PUSH
5050: LD_INT 2
5052: ST_TO_ADDR
// vc_weapon := ar_weapons [ Rand ( 1 , ar_weapons - 1 ) ] ;
5053: LD_ADDR_OWVAR 40
5057: PUSH
5058: LD_EXP 17
5062: PUSH
5063: LD_INT 1
5065: PPUSH
5066: LD_EXP 17
5070: PUSH
5071: LD_INT 1
5073: MINUS
5074: PPUSH
5075: CALL_OW 12
5079: ARRAY
5080: ST_TO_ADDR
// un := CreateVehicle ;
5081: LD_ADDR_VAR 0 4
5085: PUSH
5086: CALL_OW 45
5090: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5091: LD_VAR 0 4
5095: PPUSH
5096: LD_VAR 0 6
5100: PPUSH
5101: LD_INT 0
5103: PPUSH
5104: CALL_OW 49
// end ;
5108: GO 5026
5110: POP
5111: POP
// for i = 1 to Rand ( 0 , 1 ) + [ 2 , 3 , 3 ] [ game_difficulty ] do
5112: LD_ADDR_VAR 0 2
5116: PUSH
5117: DOUBLE
5118: LD_INT 1
5120: DEC
5121: ST_TO_ADDR
5122: LD_INT 0
5124: PPUSH
5125: LD_INT 1
5127: PPUSH
5128: CALL_OW 12
5132: PUSH
5133: LD_INT 2
5135: PUSH
5136: LD_INT 3
5138: PUSH
5139: LD_INT 3
5141: PUSH
5142: EMPTY
5143: LIST
5144: LIST
5145: LIST
5146: PUSH
5147: LD_EXP 2
5151: ARRAY
5152: PLUS
5153: PUSH
5154: FOR_TO
5155: IFFALSE 5192
// begin uc_nation := 0 ;
5157: LD_ADDR_OWVAR 21
5161: PUSH
5162: LD_INT 0
5164: ST_TO_ADDR
// PlaceUnitArea ( CreateHumanWithClass ( 17 , skill ) , area , false ) ;
5165: LD_INT 17
5167: PPUSH
5168: LD_EXP 16
5172: PPUSH
5173: CALL 7323 0 2
5177: PPUSH
5178: LD_VAR 0 6
5182: PPUSH
5183: LD_INT 0
5185: PPUSH
5186: CALL_OW 49
// end ;
5190: GO 5154
5192: POP
5193: POP
// uc_nation := 2 ;
5194: LD_ADDR_OWVAR 21
5198: PUSH
5199: LD_INT 2
5201: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_manual ] ] ) < 2 then
5202: LD_INT 22
5204: PUSH
5205: LD_INT 2
5207: PUSH
5208: EMPTY
5209: LIST
5210: LIST
5211: PUSH
5212: LD_INT 33
5214: PUSH
5215: LD_INT 1
5217: PUSH
5218: EMPTY
5219: LIST
5220: LIST
5221: PUSH
5222: EMPTY
5223: LIST
5224: LIST
5225: PPUSH
5226: CALL_OW 69
5230: PUSH
5231: LD_INT 2
5233: LESS
5234: IFFALSE 5337
// for i = 1 to 2 do
5236: LD_ADDR_VAR 0 2
5240: PUSH
5241: DOUBLE
5242: LD_INT 1
5244: DEC
5245: ST_TO_ADDR
5246: LD_INT 2
5248: PUSH
5249: FOR_TO
5250: IFFALSE 5335
// begin vc_chassis := ar_half_tracked ;
5252: LD_ADDR_OWVAR 37
5256: PUSH
5257: LD_INT 14
5259: ST_TO_ADDR
// vc_engine := engine_siberite ;
5260: LD_ADDR_OWVAR 39
5264: PUSH
5265: LD_INT 3
5267: ST_TO_ADDR
// vc_control := control_manual ;
5268: LD_ADDR_OWVAR 38
5272: PUSH
5273: LD_INT 1
5275: ST_TO_ADDR
// vc_weapon := ar_control_tower ;
5276: LD_ADDR_OWVAR 40
5280: PUSH
5281: LD_INT 31
5283: ST_TO_ADDR
// un := CreateVehicle ;
5284: LD_ADDR_VAR 0 4
5288: PUSH
5289: CALL_OW 45
5293: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5294: LD_VAR 0 4
5298: PPUSH
5299: LD_VAR 0 6
5303: PPUSH
5304: LD_INT 0
5306: PPUSH
5307: CALL_OW 49
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , skill ) , un ) ;
5311: LD_INT 3
5313: PPUSH
5314: LD_EXP 16
5318: PPUSH
5319: CALL 7323 0 2
5323: PPUSH
5324: LD_VAR 0 4
5328: PPUSH
5329: CALL_OW 52
// end ;
5333: GO 5249
5335: POP
5336: POP
// end ; 33 :
5337: GO 6699
5339: LD_INT 33
5341: DOUBLE
5342: EQUAL
5343: IFTRUE 5347
5345: GO 5618
5347: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
5348: LD_ADDR_VAR 0 6
5352: PUSH
5353: LD_EXP 15
5357: PUSH
5358: LD_INT 1
5360: PPUSH
5361: LD_EXP 15
5365: PPUSH
5366: CALL_OW 12
5370: ARRAY
5371: ST_TO_ADDR
// uc_side := 2 ;
5372: LD_ADDR_OWVAR 20
5376: PUSH
5377: LD_INT 2
5379: ST_TO_ADDR
// uc_nation := 2 ;
5380: LD_ADDR_OWVAR 21
5384: PUSH
5385: LD_INT 2
5387: ST_TO_ADDR
// for i = 1 to ( arabian_force / 2 ) do
5388: LD_ADDR_VAR 0 2
5392: PUSH
5393: DOUBLE
5394: LD_INT 1
5396: DEC
5397: ST_TO_ADDR
5398: LD_EXP 20
5402: PUSH
5403: LD_INT 2
5405: DIVREAL
5406: PUSH
5407: FOR_TO
5408: IFFALSE 5513
// begin vc_chassis := ar_half_tracked ;
5410: LD_ADDR_OWVAR 37
5414: PUSH
5415: LD_INT 14
5417: ST_TO_ADDR
// vc_engine := engine_siberite ;
5418: LD_ADDR_OWVAR 39
5422: PUSH
5423: LD_INT 3
5425: ST_TO_ADDR
// vc_control := control_manual ;
5426: LD_ADDR_OWVAR 38
5430: PUSH
5431: LD_INT 1
5433: ST_TO_ADDR
// vc_weapon := ar_weapons [ Rand ( 1 , ar_weapons - 2 ) ] ;
5434: LD_ADDR_OWVAR 40
5438: PUSH
5439: LD_EXP 17
5443: PUSH
5444: LD_INT 1
5446: PPUSH
5447: LD_EXP 17
5451: PUSH
5452: LD_INT 2
5454: MINUS
5455: PPUSH
5456: CALL_OW 12
5460: ARRAY
5461: ST_TO_ADDR
// un := CreateVehicle ;
5462: LD_ADDR_VAR 0 4
5466: PUSH
5467: CALL_OW 45
5471: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5472: LD_VAR 0 4
5476: PPUSH
5477: LD_VAR 0 6
5481: PPUSH
5482: LD_INT 0
5484: PPUSH
5485: CALL_OW 49
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , skill ) , un ) ;
5489: LD_INT 3
5491: PPUSH
5492: LD_EXP 16
5496: PPUSH
5497: CALL 7323 0 2
5501: PPUSH
5502: LD_VAR 0 4
5506: PPUSH
5507: CALL_OW 52
// end ;
5511: GO 5407
5513: POP
5514: POP
// for i = 1 to ( arabian_force / 2 ) do
5515: LD_ADDR_VAR 0 2
5519: PUSH
5520: DOUBLE
5521: LD_INT 1
5523: DEC
5524: ST_TO_ADDR
5525: LD_EXP 20
5529: PUSH
5530: LD_INT 2
5532: DIVREAL
5533: PUSH
5534: FOR_TO
5535: IFFALSE 5614
// begin vc_chassis := ar_half_tracked ;
5537: LD_ADDR_OWVAR 37
5541: PUSH
5542: LD_INT 14
5544: ST_TO_ADDR
// vc_engine := engine_siberite ;
5545: LD_ADDR_OWVAR 39
5549: PUSH
5550: LD_INT 3
5552: ST_TO_ADDR
// vc_control := control_apeman ;
5553: LD_ADDR_OWVAR 38
5557: PUSH
5558: LD_INT 5
5560: ST_TO_ADDR
// vc_weapon := ar_weapons [ Rand ( 2 , ar_weapons ) ] ;
5561: LD_ADDR_OWVAR 40
5565: PUSH
5566: LD_EXP 17
5570: PUSH
5571: LD_INT 2
5573: PPUSH
5574: LD_EXP 17
5578: PPUSH
5579: CALL_OW 12
5583: ARRAY
5584: ST_TO_ADDR
// un := CreateVehicle ;
5585: LD_ADDR_VAR 0 4
5589: PUSH
5590: CALL_OW 45
5594: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5595: LD_VAR 0 4
5599: PPUSH
5600: LD_VAR 0 6
5604: PPUSH
5605: LD_INT 0
5607: PPUSH
5608: CALL_OW 49
// end ;
5612: GO 5534
5614: POP
5615: POP
// end ; 41 :
5616: GO 6699
5618: LD_INT 41
5620: DOUBLE
5621: EQUAL
5622: IFTRUE 5626
5624: GO 5770
5626: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
5627: LD_ADDR_VAR 0 6
5631: PUSH
5632: LD_EXP 15
5636: PUSH
5637: LD_INT 1
5639: PPUSH
5640: LD_EXP 15
5644: PPUSH
5645: CALL_OW 12
5649: ARRAY
5650: ST_TO_ADDR
// uc_side := 1 ;
5651: LD_ADDR_OWVAR 20
5655: PUSH
5656: LD_INT 1
5658: ST_TO_ADDR
// uc_nation := 1 ;
5659: LD_ADDR_OWVAR 21
5663: PUSH
5664: LD_INT 1
5666: ST_TO_ADDR
// for i = 1 to american_force do
5667: LD_ADDR_VAR 0 2
5671: PUSH
5672: DOUBLE
5673: LD_INT 1
5675: DEC
5676: ST_TO_ADDR
5677: LD_EXP 22
5681: PUSH
5682: FOR_TO
5683: IFFALSE 5766
// begin vc_chassis := us_morphling ;
5685: LD_ADDR_OWVAR 37
5689: PUSH
5690: LD_INT 5
5692: ST_TO_ADDR
// vc_engine := engine_siberite ;
5693: LD_ADDR_OWVAR 39
5697: PUSH
5698: LD_INT 3
5700: ST_TO_ADDR
// vc_control := control_computer ;
5701: LD_ADDR_OWVAR 38
5705: PUSH
5706: LD_INT 3
5708: ST_TO_ADDR
// vc_weapon := us_weapons [ Rand ( 1 , us_weapons - 1 ) ] ;
5709: LD_ADDR_OWVAR 40
5713: PUSH
5714: LD_EXP 19
5718: PUSH
5719: LD_INT 1
5721: PPUSH
5722: LD_EXP 19
5726: PUSH
5727: LD_INT 1
5729: MINUS
5730: PPUSH
5731: CALL_OW 12
5735: ARRAY
5736: ST_TO_ADDR
// un := CreateVehicle ;
5737: LD_ADDR_VAR 0 4
5741: PUSH
5742: CALL_OW 45
5746: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5747: LD_VAR 0 4
5751: PPUSH
5752: LD_VAR 0 6
5756: PPUSH
5757: LD_INT 0
5759: PPUSH
5760: CALL_OW 49
// end ;
5764: GO 5682
5766: POP
5767: POP
// end ; 42 :
5768: GO 6699
5770: LD_INT 42
5772: DOUBLE
5773: EQUAL
5774: IFTRUE 5778
5776: GO 5918
5778: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
5779: LD_ADDR_VAR 0 6
5783: PUSH
5784: LD_EXP 15
5788: PUSH
5789: LD_INT 1
5791: PPUSH
5792: LD_EXP 15
5796: PPUSH
5797: CALL_OW 12
5801: ARRAY
5802: ST_TO_ADDR
// uc_side := 1 ;
5803: LD_ADDR_OWVAR 20
5807: PUSH
5808: LD_INT 1
5810: ST_TO_ADDR
// uc_nation := 1 ;
5811: LD_ADDR_OWVAR 21
5815: PUSH
5816: LD_INT 1
5818: ST_TO_ADDR
// for i = 1 to american_force do
5819: LD_ADDR_VAR 0 2
5823: PUSH
5824: DOUBLE
5825: LD_INT 1
5827: DEC
5828: ST_TO_ADDR
5829: LD_EXP 22
5833: PUSH
5834: FOR_TO
5835: IFFALSE 5914
// begin vc_chassis := us_morphling ;
5837: LD_ADDR_OWVAR 37
5841: PUSH
5842: LD_INT 5
5844: ST_TO_ADDR
// vc_engine := engine_siberite ;
5845: LD_ADDR_OWVAR 39
5849: PUSH
5850: LD_INT 3
5852: ST_TO_ADDR
// vc_control := control_computer ;
5853: LD_ADDR_OWVAR 38
5857: PUSH
5858: LD_INT 3
5860: ST_TO_ADDR
// vc_weapon := us_weapons [ Rand ( 1 , us_weapons ) ] ;
5861: LD_ADDR_OWVAR 40
5865: PUSH
5866: LD_EXP 19
5870: PUSH
5871: LD_INT 1
5873: PPUSH
5874: LD_EXP 19
5878: PPUSH
5879: CALL_OW 12
5883: ARRAY
5884: ST_TO_ADDR
// un := CreateVehicle ;
5885: LD_ADDR_VAR 0 4
5889: PUSH
5890: CALL_OW 45
5894: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5895: LD_VAR 0 4
5899: PPUSH
5900: LD_VAR 0 6
5904: PPUSH
5905: LD_INT 0
5907: PPUSH
5908: CALL_OW 49
// end ;
5912: GO 5834
5914: POP
5915: POP
// end ; 51 :
5916: GO 6699
5918: LD_INT 51
5920: DOUBLE
5921: EQUAL
5922: IFTRUE 5926
5924: GO 6066
5926: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
5927: LD_ADDR_VAR 0 6
5931: PUSH
5932: LD_EXP 15
5936: PUSH
5937: LD_INT 1
5939: PPUSH
5940: LD_EXP 15
5944: PPUSH
5945: CALL_OW 12
5949: ARRAY
5950: ST_TO_ADDR
// uc_side := 3 ;
5951: LD_ADDR_OWVAR 20
5955: PUSH
5956: LD_INT 3
5958: ST_TO_ADDR
// uc_nation := 3 ;
5959: LD_ADDR_OWVAR 21
5963: PUSH
5964: LD_INT 3
5966: ST_TO_ADDR
// for i = 1 to russian_force do
5967: LD_ADDR_VAR 0 2
5971: PUSH
5972: DOUBLE
5973: LD_INT 1
5975: DEC
5976: ST_TO_ADDR
5977: LD_EXP 21
5981: PUSH
5982: FOR_TO
5983: IFFALSE 6062
// begin vc_chassis := ru_heavy_tracked ;
5985: LD_ADDR_OWVAR 37
5989: PUSH
5990: LD_INT 24
5992: ST_TO_ADDR
// vc_engine := engine_siberite ;
5993: LD_ADDR_OWVAR 39
5997: PUSH
5998: LD_INT 3
6000: ST_TO_ADDR
// vc_control := control_computer ;
6001: LD_ADDR_OWVAR 38
6005: PUSH
6006: LD_INT 3
6008: ST_TO_ADDR
// vc_weapon := ru_weapons [ Rand ( 1 , ru_weapons ) ] ;
6009: LD_ADDR_OWVAR 40
6013: PUSH
6014: LD_EXP 18
6018: PUSH
6019: LD_INT 1
6021: PPUSH
6022: LD_EXP 18
6026: PPUSH
6027: CALL_OW 12
6031: ARRAY
6032: ST_TO_ADDR
// un := CreateVehicle ;
6033: LD_ADDR_VAR 0 4
6037: PUSH
6038: CALL_OW 45
6042: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
6043: LD_VAR 0 4
6047: PPUSH
6048: LD_VAR 0 6
6052: PPUSH
6053: LD_INT 0
6055: PPUSH
6056: CALL_OW 49
// end ;
6060: GO 5982
6062: POP
6063: POP
// end ; 91 :
6064: GO 6699
6066: LD_INT 91
6068: DOUBLE
6069: EQUAL
6070: IFTRUE 6074
6072: GO 6212
6074: POP
// begin uc_side := 8 ;
6075: LD_ADDR_OWVAR 20
6079: PUSH
6080: LD_INT 8
6082: ST_TO_ADDR
// uc_nation := 1 ;
6083: LD_ADDR_OWVAR 21
6087: PUSH
6088: LD_INT 1
6090: ST_TO_ADDR
// for i = 1 to [ 4 , 3 , 3 ] [ game_difficulty ] do
6091: LD_ADDR_VAR 0 2
6095: PUSH
6096: DOUBLE
6097: LD_INT 1
6099: DEC
6100: ST_TO_ADDR
6101: LD_INT 4
6103: PUSH
6104: LD_INT 3
6106: PUSH
6107: LD_INT 3
6109: PUSH
6110: EMPTY
6111: LIST
6112: LIST
6113: LIST
6114: PUSH
6115: LD_EXP 2
6119: ARRAY
6120: PUSH
6121: FOR_TO
6122: IFFALSE 6208
// begin vc_chassis := us_heavy_tracked ;
6124: LD_ADDR_OWVAR 37
6128: PUSH
6129: LD_INT 4
6131: ST_TO_ADDR
// vc_engine := engine_siberite ;
6132: LD_ADDR_OWVAR 39
6136: PUSH
6137: LD_INT 3
6139: ST_TO_ADDR
// vc_control := control_computer ;
6140: LD_ADDR_OWVAR 38
6144: PUSH
6145: LD_INT 3
6147: ST_TO_ADDR
// vc_weapon := [ us_double_gun , us_heavy_gun ] [ Rand ( 1 , 2 ) ] ;
6148: LD_ADDR_OWVAR 40
6152: PUSH
6153: LD_INT 5
6155: PUSH
6156: LD_INT 6
6158: PUSH
6159: EMPTY
6160: LIST
6161: LIST
6162: PUSH
6163: LD_INT 1
6165: PPUSH
6166: LD_INT 2
6168: PPUSH
6169: CALL_OW 12
6173: ARRAY
6174: ST_TO_ADDR
// un := CreateVehicle ;
6175: LD_ADDR_VAR 0 4
6179: PUSH
6180: CALL_OW 45
6184: ST_TO_ADDR
// PlaceUnitArea ( un , areas [ 1 ] , false ) ;
6185: LD_VAR 0 4
6189: PPUSH
6190: LD_EXP 15
6194: PUSH
6195: LD_INT 1
6197: ARRAY
6198: PPUSH
6199: LD_INT 0
6201: PPUSH
6202: CALL_OW 49
// end ;
6206: GO 6121
6208: POP
6209: POP
// end ; 92 :
6210: GO 6699
6212: LD_INT 92
6214: DOUBLE
6215: EQUAL
6216: IFTRUE 6220
6218: GO 6549
6220: POP
// begin uc_side := 5 ;
6221: LD_ADDR_OWVAR 20
6225: PUSH
6226: LD_INT 5
6228: ST_TO_ADDR
// uc_nation := 2 ;
6229: LD_ADDR_OWVAR 21
6233: PUSH
6234: LD_INT 2
6236: ST_TO_ADDR
// filter := [ ] ;
6237: LD_ADDR_VAR 0 3
6241: PUSH
6242: EMPTY
6243: ST_TO_ADDR
// InitHc ;
6244: CALL_OW 19
// PrepareHuman ( false , 1 , l_skill ) ;
6248: LD_INT 0
6250: PPUSH
6251: LD_INT 1
6253: PPUSH
6254: LD_EXP 50
6258: PPUSH
6259: CALL_OW 380
// un := CreateHuman ;
6263: LD_ADDR_VAR 0 4
6267: PUSH
6268: CALL_OW 44
6272: ST_TO_ADDR
// filter := filter ^ un ;
6273: LD_ADDR_VAR 0 3
6277: PUSH
6278: LD_VAR 0 3
6282: PUSH
6283: LD_VAR 0 4
6287: ADD
6288: ST_TO_ADDR
// for i = 1 to [ 4 , 3 , 2 ] [ game_difficulty ] do
6289: LD_ADDR_VAR 0 2
6293: PUSH
6294: DOUBLE
6295: LD_INT 1
6297: DEC
6298: ST_TO_ADDR
6299: LD_INT 4
6301: PUSH
6302: LD_INT 3
6304: PUSH
6305: LD_INT 2
6307: PUSH
6308: EMPTY
6309: LIST
6310: LIST
6311: LIST
6312: PUSH
6313: LD_EXP 2
6317: ARRAY
6318: PUSH
6319: FOR_TO
6320: IFFALSE 6358
// begin un := CreateHumanWithClass ( 1 , l_skill ) ;
6322: LD_ADDR_VAR 0 4
6326: PUSH
6327: LD_INT 1
6329: PPUSH
6330: LD_EXP 50
6334: PPUSH
6335: CALL 7323 0 2
6339: ST_TO_ADDR
// filter := filter ^ un ;
6340: LD_ADDR_VAR 0 3
6344: PUSH
6345: LD_VAR 0 3
6349: PUSH
6350: LD_VAR 0 4
6354: ADD
6355: ST_TO_ADDR
// end ;
6356: GO 6319
6358: POP
6359: POP
// DialogueOn ;
6360: CALL_OW 6
// if GetSex ( filter [ 1 ] ) = sex_male then
6364: LD_VAR 0 3
6368: PUSH
6369: LD_INT 1
6371: ARRAY
6372: PPUSH
6373: CALL_OW 258
6377: PUSH
6378: LD_INT 1
6380: EQUAL
6381: IFFALSE 6401
// SayRadio ( filter [ 1 ] , DS-DF-1 ) else
6383: LD_VAR 0 3
6387: PUSH
6388: LD_INT 1
6390: ARRAY
6391: PPUSH
6392: LD_STRING DS-DF-1
6394: PPUSH
6395: CALL_OW 94
6399: GO 6417
// SayRadio ( filter [ 1 ] , DS-DF-f1 ) ;
6401: LD_VAR 0 3
6405: PUSH
6406: LD_INT 1
6408: ARRAY
6409: PPUSH
6410: LD_STRING DS-DF-f1
6412: PPUSH
6413: CALL_OW 94
// case Query ( DS-dezert ) of 1 :
6417: LD_STRING DS-dezert
6419: PPUSH
6420: CALL_OW 97
6424: PUSH
6425: LD_INT 1
6427: DOUBLE
6428: EQUAL
6429: IFTRUE 6433
6431: GO 6448
6433: POP
// Say ( l_cmndr , DS-DC-dis ) ; 2 :
6434: LD_EXP 49
6438: PPUSH
6439: LD_STRING DS-DC-dis
6441: PPUSH
6442: CALL_OW 88
6446: GO 6543
6448: LD_INT 2
6450: DOUBLE
6451: EQUAL
6452: IFTRUE 6456
6454: GO 6542
6456: POP
// begin Say ( l_cmndr , DS-DC-acp ) ;
6457: LD_EXP 49
6461: PPUSH
6462: LD_STRING DS-DC-acp
6464: PPUSH
6465: CALL_OW 88
// for i = 1 to filter do
6469: LD_ADDR_VAR 0 2
6473: PUSH
6474: DOUBLE
6475: LD_INT 1
6477: DEC
6478: ST_TO_ADDR
6479: LD_VAR 0 3
6483: PUSH
6484: FOR_TO
6485: IFFALSE 6538
// begin SetSide ( filter [ i ] , 8 ) ;
6487: LD_VAR 0 3
6491: PUSH
6492: LD_VAR 0 2
6496: ARRAY
6497: PPUSH
6498: LD_INT 8
6500: PPUSH
6501: CALL_OW 235
// PlaceUnitArea ( filter [ i ] , south_spawn , false ) ;
6505: LD_VAR 0 3
6509: PUSH
6510: LD_VAR 0 2
6514: ARRAY
6515: PPUSH
6516: LD_INT 4
6518: PPUSH
6519: LD_INT 0
6521: PPUSH
6522: CALL_OW 49
// CenterNowOnXY ( 111 , 121 ) ;
6526: LD_INT 111
6528: PPUSH
6529: LD_INT 121
6531: PPUSH
6532: CALL_OW 86
// end ;
6536: GO 6484
6538: POP
6539: POP
// end ; end ;
6540: GO 6543
6542: POP
// DialogueOff ;
6543: CALL_OW 7
// end ; 101 :
6547: GO 6699
6549: LD_INT 101
6551: DOUBLE
6552: EQUAL
6553: IFTRUE 6557
6555: GO 6609
6557: POP
// begin CreateCratesArea ( Rand ( 3 , 5 ) , crates_area , true ) ;
6558: LD_INT 3
6560: PPUSH
6561: LD_INT 5
6563: PPUSH
6564: CALL_OW 12
6568: PPUSH
6569: LD_INT 9
6571: PPUSH
6572: LD_INT 1
6574: PPUSH
6575: CALL_OW 55
// Wait ( 0 0$11 ) ;
6579: LD_INT 385
6581: PPUSH
6582: CALL_OW 67
// CreateCratesArea ( Rand ( 3 , 5 ) , crates_area , true ) ;
6586: LD_INT 3
6588: PPUSH
6589: LD_INT 5
6591: PPUSH
6592: CALL_OW 12
6596: PPUSH
6597: LD_INT 9
6599: PPUSH
6600: LD_INT 1
6602: PPUSH
6603: CALL_OW 55
// end ; 200 :
6607: GO 6699
6609: LD_INT 200
6611: DOUBLE
6612: EQUAL
6613: IFTRUE 6617
6615: GO 6698
6617: POP
// begin Say ( Leopold , DS-end ) ;
6618: LD_EXP 7
6622: PPUSH
6623: LD_STRING DS-end
6625: PPUSH
6626: CALL_OW 88
// if Difficulty = 3 then
6630: LD_OWVAR 67
6634: PUSH
6635: LD_INT 3
6637: EQUAL
6638: IFFALSE 6647
// SetAchievement ( ACH_DESERT ) ;
6640: LD_STRING ACH_DESERT
6642: PPUSH
6643: CALL_OW 543
// music_nat := 5 ;
6647: LD_ADDR_OWVAR 71
6651: PUSH
6652: LD_INT 5
6654: ST_TO_ADDR
// AddMedal ( med , 1 ) ;
6655: LD_STRING med
6657: PPUSH
6658: LD_INT 1
6660: PPUSH
6661: CALL_OW 101
// AddMedal ( med , 1 ) ;
6665: LD_STRING med
6667: PPUSH
6668: LD_INT 1
6670: PPUSH
6671: CALL_OW 101
// AddMedal ( med , 1 ) ;
6675: LD_STRING med
6677: PPUSH
6678: LD_INT 1
6680: PPUSH
6681: CALL_OW 101
// GiveMedals ( MAIN ) ;
6685: LD_STRING MAIN
6687: PPUSH
6688: CALL_OW 102
// YouWin ;
6692: CALL_OW 103
// end ; end ;
6696: GO 6699
6698: POP
// end ;
6699: PPOPN 6
6701: END
// on UnitGoesToRed ( un ) do begin if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) then
6702: LD_VAR 0 1
6706: PUSH
6707: LD_INT 22
6709: PUSH
6710: LD_INT 2
6712: PUSH
6713: EMPTY
6714: LIST
6715: LIST
6716: PUSH
6717: LD_INT 21
6719: PUSH
6720: LD_INT 2
6722: PUSH
6723: EMPTY
6724: LIST
6725: LIST
6726: PUSH
6727: EMPTY
6728: LIST
6729: LIST
6730: PPUSH
6731: CALL_OW 69
6735: IN
6736: IFFALSE 6861
// begin Wait ( Rand ( 0 0$03 , 0 0$06 ) ) ;
6738: LD_INT 105
6740: PPUSH
6741: LD_INT 210
6743: PPUSH
6744: CALL_OW 12
6748: PPUSH
6749: CALL_OW 67
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
6753: LD_VAR 0 1
6757: PPUSH
6758: CALL_OW 250
6762: PPUSH
6763: LD_VAR 0 1
6767: PPUSH
6768: CALL_OW 251
6772: PPUSH
6773: LD_INT 3
6775: PPUSH
6776: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
6780: LD_VAR 0 1
6784: PPUSH
6785: CALL_OW 250
6789: PPUSH
6790: LD_VAR 0 1
6794: PPUSH
6795: CALL_OW 251
6799: PPUSH
6800: LD_INT 3
6802: PPUSH
6803: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
6807: LD_VAR 0 1
6811: PPUSH
6812: CALL_OW 250
6816: PPUSH
6817: LD_VAR 0 1
6821: PPUSH
6822: CALL_OW 251
6826: PPUSH
6827: LD_INT 3
6829: PPUSH
6830: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
6834: LD_VAR 0 1
6838: PPUSH
6839: CALL_OW 250
6843: PPUSH
6844: LD_VAR 0 1
6848: PPUSH
6849: CALL_OW 251
6853: PPUSH
6854: LD_INT 3
6856: PPUSH
6857: CALL_OW 453
// end ; end ;
6861: PPOPN 1
6863: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
6864: LD_VAR 0 1
6868: PPUSH
6869: CALL 24410 0 1
// if un = fort then
6873: LD_VAR 0 1
6877: PUSH
6878: LD_INT 23
6880: EQUAL
6881: IFFALSE 6891
// fort_destroyed := true ;
6883: LD_ADDR_EXP 32
6887: PUSH
6888: LD_INT 1
6890: ST_TO_ADDR
// if un = l_cmndr then
6891: LD_VAR 0 1
6895: PUSH
6896: LD_EXP 49
6900: EQUAL
6901: IFFALSE 6911
// hero_died := true ;
6903: LD_ADDR_EXP 33
6907: PUSH
6908: LD_INT 1
6910: ST_TO_ADDR
// end ;
6911: PPOPN 1
6913: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin debug_strings := un ;
6914: LD_ADDR_OWVAR 48
6918: PUSH
6919: LD_VAR 0 1
6923: ST_TO_ADDR
// SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
6924: LD_VAR 0 1
6928: PPUSH
6929: LD_VAR 0 2
6933: PPUSH
6934: LD_VAR 0 3
6938: PPUSH
6939: CALL 24506 0 3
// end ;
6943: PPOPN 3
6945: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
6946: LD_VAR 0 1
6950: PPUSH
6951: CALL 24514 0 1
// end ;
6955: PPOPN 1
6957: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
6958: LD_VAR 0 1
6962: PPUSH
6963: LD_VAR 0 2
6967: PPUSH
6968: CALL 24530 0 2
// end ; end_of_file
6972: PPOPN 2
6974: END
// export function RefreshTime ( time , bool ) ; begin
6975: LD_INT 0
6977: PPUSH
// if bool then
6978: LD_VAR 0 2
6982: IFFALSE 7000
// time := time + 0 0$01 else
6984: LD_ADDR_VAR 0 1
6988: PUSH
6989: LD_VAR 0 1
6993: PUSH
6994: LD_INT 35
6996: PLUS
6997: ST_TO_ADDR
6998: GO 7014
// time := time - 0 0$01 ;
7000: LD_ADDR_VAR 0 1
7004: PUSH
7005: LD_VAR 0 1
7009: PUSH
7010: LD_INT 35
7012: MINUS
7013: ST_TO_ADDR
// result := time ;
7014: LD_ADDR_VAR 0 3
7018: PUSH
7019: LD_VAR 0 1
7023: ST_TO_ADDR
// end ;
7024: LD_VAR 0 3
7028: RET
// export function MineExist ( side ) ; begin
7029: LD_INT 0
7031: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_siberite_mine ] ] ) > 0 then
7032: LD_INT 22
7034: PUSH
7035: LD_VAR 0 1
7039: PUSH
7040: EMPTY
7041: LIST
7042: LIST
7043: PUSH
7044: LD_INT 30
7046: PUSH
7047: LD_INT 30
7049: PUSH
7050: EMPTY
7051: LIST
7052: LIST
7053: PUSH
7054: EMPTY
7055: LIST
7056: LIST
7057: PPUSH
7058: CALL_OW 69
7062: PUSH
7063: LD_INT 0
7065: GREATER
7066: IFFALSE 7078
// result := true else
7068: LD_ADDR_VAR 0 2
7072: PUSH
7073: LD_INT 1
7075: ST_TO_ADDR
7076: GO 7086
// result := false ;
7078: LD_ADDR_VAR 0 2
7082: PUSH
7083: LD_INT 0
7085: ST_TO_ADDR
// end ;
7086: LD_VAR 0 2
7090: RET
// export function FacExist ( side ) ; begin
7091: LD_INT 0
7093: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_factory ] ] ) > 0 ;
7094: LD_ADDR_VAR 0 2
7098: PUSH
7099: LD_INT 22
7101: PUSH
7102: LD_VAR 0 1
7106: PUSH
7107: EMPTY
7108: LIST
7109: LIST
7110: PUSH
7111: LD_INT 30
7113: PUSH
7114: LD_INT 3
7116: PUSH
7117: EMPTY
7118: LIST
7119: LIST
7120: PUSH
7121: EMPTY
7122: LIST
7123: LIST
7124: PPUSH
7125: CALL_OW 69
7129: PUSH
7130: LD_INT 0
7132: GREATER
7133: ST_TO_ADDR
// end ;
7134: LD_VAR 0 2
7138: RET
// export function ConnectWithTower ( side ) ; var i , filter , tower ; begin
7139: LD_INT 0
7141: PPUSH
7142: PPUSH
7143: PPUSH
7144: PPUSH
// filter := FilterAllUnits ( [ [ f_side , side ] , [ f_control , control_remote ] , [ f_ok ] ] ) ;
7145: LD_ADDR_VAR 0 4
7149: PUSH
7150: LD_INT 22
7152: PUSH
7153: LD_VAR 0 1
7157: PUSH
7158: EMPTY
7159: LIST
7160: LIST
7161: PUSH
7162: LD_INT 33
7164: PUSH
7165: LD_INT 2
7167: PUSH
7168: EMPTY
7169: LIST
7170: LIST
7171: PUSH
7172: LD_INT 50
7174: PUSH
7175: EMPTY
7176: LIST
7177: PUSH
7178: EMPTY
7179: LIST
7180: LIST
7181: LIST
7182: PPUSH
7183: CALL_OW 69
7187: ST_TO_ADDR
// tower := FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , ar_control_tower ] ] ) ;
7188: LD_ADDR_VAR 0 5
7192: PUSH
7193: LD_INT 22
7195: PUSH
7196: LD_VAR 0 1
7200: PUSH
7201: EMPTY
7202: LIST
7203: LIST
7204: PUSH
7205: LD_INT 34
7207: PUSH
7208: LD_INT 31
7210: PUSH
7211: EMPTY
7212: LIST
7213: LIST
7214: PUSH
7215: EMPTY
7216: LIST
7217: LIST
7218: PPUSH
7219: CALL_OW 69
7223: ST_TO_ADDR
// if tower > 0 and filter > 0 then
7224: LD_VAR 0 5
7228: PUSH
7229: LD_INT 0
7231: GREATER
7232: PUSH
7233: LD_VAR 0 4
7237: PUSH
7238: LD_INT 0
7240: GREATER
7241: AND
7242: IFFALSE 7318
// for i = 1 to filter do
7244: LD_ADDR_VAR 0 3
7248: PUSH
7249: DOUBLE
7250: LD_INT 1
7252: DEC
7253: ST_TO_ADDR
7254: LD_VAR 0 4
7258: PUSH
7259: FOR_TO
7260: IFFALSE 7316
// if not IsControledBy ( filter [ i ] ) then
7262: LD_VAR 0 4
7266: PUSH
7267: LD_VAR 0 3
7271: ARRAY
7272: PPUSH
7273: CALL_OW 312
7277: NOT
7278: IFFALSE 7314
// ComLinkTo ( filter [ i ] , tower [ Rand ( 1 , tower ) ] ) ;
7280: LD_VAR 0 4
7284: PUSH
7285: LD_VAR 0 3
7289: ARRAY
7290: PPUSH
7291: LD_VAR 0 5
7295: PUSH
7296: LD_INT 1
7298: PPUSH
7299: LD_VAR 0 5
7303: PPUSH
7304: CALL_OW 12
7308: ARRAY
7309: PPUSH
7310: CALL_OW 135
7314: GO 7259
7316: POP
7317: POP
// end ;
7318: LD_VAR 0 2
7322: RET
// export function CreateHumanWithClass ( clas , lvl ) ; var skill_com , skill_eng , skill_mech , skill_sci , bonus ; begin
7323: LD_INT 0
7325: PPUSH
7326: PPUSH
7327: PPUSH
7328: PPUSH
7329: PPUSH
7330: PPUSH
// hc_class := clas ;
7331: LD_ADDR_OWVAR 28
7335: PUSH
7336: LD_VAR 0 1
7340: ST_TO_ADDR
// skill_com := ( lvl + Rand ( - 1 , 1 ) ) ;
7341: LD_ADDR_VAR 0 4
7345: PUSH
7346: LD_VAR 0 2
7350: PUSH
7351: LD_INT 1
7353: NEG
7354: PPUSH
7355: LD_INT 1
7357: PPUSH
7358: CALL_OW 12
7362: PLUS
7363: ST_TO_ADDR
// skill_eng := ( lvl + Rand ( - 1 , 1 ) ) ;
7364: LD_ADDR_VAR 0 5
7368: PUSH
7369: LD_VAR 0 2
7373: PUSH
7374: LD_INT 1
7376: NEG
7377: PPUSH
7378: LD_INT 1
7380: PPUSH
7381: CALL_OW 12
7385: PLUS
7386: ST_TO_ADDR
// skill_mech := ( lvl + Rand ( - 1 , 1 ) ) ;
7387: LD_ADDR_VAR 0 6
7391: PUSH
7392: LD_VAR 0 2
7396: PUSH
7397: LD_INT 1
7399: NEG
7400: PPUSH
7401: LD_INT 1
7403: PPUSH
7404: CALL_OW 12
7408: PLUS
7409: ST_TO_ADDR
// skill_sci := ( lvl + Rand ( - 1 , 1 ) ) ;
7410: LD_ADDR_VAR 0 7
7414: PUSH
7415: LD_VAR 0 2
7419: PUSH
7420: LD_INT 1
7422: NEG
7423: PPUSH
7424: LD_INT 1
7426: PPUSH
7427: CALL_OW 12
7431: PLUS
7432: ST_TO_ADDR
// if clas = 1 or clas = 9 or clas = class_sniper or clas = class_mortar then
7433: LD_VAR 0 1
7437: PUSH
7438: LD_INT 1
7440: EQUAL
7441: PUSH
7442: LD_VAR 0 1
7446: PUSH
7447: LD_INT 9
7449: EQUAL
7450: OR
7451: PUSH
7452: LD_VAR 0 1
7456: PUSH
7457: LD_INT 5
7459: EQUAL
7460: OR
7461: PUSH
7462: LD_VAR 0 1
7466: PUSH
7467: LD_INT 8
7469: EQUAL
7470: OR
7471: IFFALSE 7496
// bonus := [ 2 , 0 , 0 , 0 ] ;
7473: LD_ADDR_VAR 0 8
7477: PUSH
7478: LD_INT 2
7480: PUSH
7481: LD_INT 0
7483: PUSH
7484: LD_INT 0
7486: PUSH
7487: LD_INT 0
7489: PUSH
7490: EMPTY
7491: LIST
7492: LIST
7493: LIST
7494: LIST
7495: ST_TO_ADDR
// if clas = 2 then
7496: LD_VAR 0 1
7500: PUSH
7501: LD_INT 2
7503: EQUAL
7504: IFFALSE 7529
// bonus := [ 0 , 2 , 0 , 0 ] ;
7506: LD_ADDR_VAR 0 8
7510: PUSH
7511: LD_INT 0
7513: PUSH
7514: LD_INT 2
7516: PUSH
7517: LD_INT 0
7519: PUSH
7520: LD_INT 0
7522: PUSH
7523: EMPTY
7524: LIST
7525: LIST
7526: LIST
7527: LIST
7528: ST_TO_ADDR
// if clas = 3 then
7529: LD_VAR 0 1
7533: PUSH
7534: LD_INT 3
7536: EQUAL
7537: IFFALSE 7562
// bonus := [ 0 , 0 , 2 , 0 ] ;
7539: LD_ADDR_VAR 0 8
7543: PUSH
7544: LD_INT 0
7546: PUSH
7547: LD_INT 0
7549: PUSH
7550: LD_INT 2
7552: PUSH
7553: LD_INT 0
7555: PUSH
7556: EMPTY
7557: LIST
7558: LIST
7559: LIST
7560: LIST
7561: ST_TO_ADDR
// if clas = 4 then
7562: LD_VAR 0 1
7566: PUSH
7567: LD_INT 4
7569: EQUAL
7570: IFFALSE 7595
// bonus := [ 0 , 0 , 0 , 2 ] ;
7572: LD_ADDR_VAR 0 8
7576: PUSH
7577: LD_INT 0
7579: PUSH
7580: LD_INT 0
7582: PUSH
7583: LD_INT 0
7585: PUSH
7586: LD_INT 2
7588: PUSH
7589: EMPTY
7590: LIST
7591: LIST
7592: LIST
7593: LIST
7594: ST_TO_ADDR
// if clas > 4 and clas <> 9 and clas <> class_sniper and clas <> class_mortar then
7595: LD_VAR 0 1
7599: PUSH
7600: LD_INT 4
7602: GREATER
7603: PUSH
7604: LD_VAR 0 1
7608: PUSH
7609: LD_INT 9
7611: NONEQUAL
7612: AND
7613: PUSH
7614: LD_VAR 0 1
7618: PUSH
7619: LD_INT 5
7621: NONEQUAL
7622: AND
7623: PUSH
7624: LD_VAR 0 1
7628: PUSH
7629: LD_INT 8
7631: NONEQUAL
7632: AND
7633: IFFALSE 7658
// bonus := [ 0 , 0 , 0 , 0 ] ;
7635: LD_ADDR_VAR 0 8
7639: PUSH
7640: LD_INT 0
7642: PUSH
7643: LD_INT 0
7645: PUSH
7646: LD_INT 0
7648: PUSH
7649: LD_INT 0
7651: PUSH
7652: EMPTY
7653: LIST
7654: LIST
7655: LIST
7656: LIST
7657: ST_TO_ADDR
// hc_basic_skills := [ Rand ( 0 , 2 ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) ] ;
7658: LD_ADDR_OWVAR 30
7662: PUSH
7663: LD_INT 0
7665: PPUSH
7666: LD_INT 2
7668: PPUSH
7669: CALL_OW 12
7673: PUSH
7674: LD_INT 0
7676: PPUSH
7677: LD_INT 2
7679: PPUSH
7680: CALL_OW 12
7684: PUSH
7685: LD_INT 0
7687: PPUSH
7688: LD_INT 2
7690: PPUSH
7691: CALL_OW 12
7695: PUSH
7696: LD_INT 0
7698: PPUSH
7699: LD_INT 2
7701: PPUSH
7702: CALL_OW 12
7706: PUSH
7707: EMPTY
7708: LIST
7709: LIST
7710: LIST
7711: LIST
7712: ST_TO_ADDR
// hc_skills := [ skill_com + bonus [ 1 ] , skill_eng + bonus [ 2 ] , skill_mech + bonus [ 3 ] , skill_sci + bonus [ 4 ] ] ;
7713: LD_ADDR_OWVAR 31
7717: PUSH
7718: LD_VAR 0 4
7722: PUSH
7723: LD_VAR 0 8
7727: PUSH
7728: LD_INT 1
7730: ARRAY
7731: PLUS
7732: PUSH
7733: LD_VAR 0 5
7737: PUSH
7738: LD_VAR 0 8
7742: PUSH
7743: LD_INT 2
7745: ARRAY
7746: PLUS
7747: PUSH
7748: LD_VAR 0 6
7752: PUSH
7753: LD_VAR 0 8
7757: PUSH
7758: LD_INT 3
7760: ARRAY
7761: PLUS
7762: PUSH
7763: LD_VAR 0 7
7767: PUSH
7768: LD_VAR 0 8
7772: PUSH
7773: LD_INT 4
7775: ARRAY
7776: PLUS
7777: PUSH
7778: EMPTY
7779: LIST
7780: LIST
7781: LIST
7782: LIST
7783: ST_TO_ADDR
// hc_sex := Rand ( sex_male , sex_female ) ;
7784: LD_ADDR_OWVAR 27
7788: PUSH
7789: LD_INT 1
7791: PPUSH
7792: LD_INT 2
7794: PPUSH
7795: CALL_OW 12
7799: ST_TO_ADDR
// hc_gallery :=  ;
7800: LD_ADDR_OWVAR 33
7804: PUSH
7805: LD_STRING 
7807: ST_TO_ADDR
// hc_attr := [ Rand ( 8 , 12 ) , Rand ( 9 , 11 ) ] ;
7808: LD_ADDR_OWVAR 29
7812: PUSH
7813: LD_INT 8
7815: PPUSH
7816: LD_INT 12
7818: PPUSH
7819: CALL_OW 12
7823: PUSH
7824: LD_INT 9
7826: PPUSH
7827: LD_INT 11
7829: PPUSH
7830: CALL_OW 12
7834: PUSH
7835: EMPTY
7836: LIST
7837: LIST
7838: ST_TO_ADDR
// hc_name :=  ;
7839: LD_ADDR_OWVAR 26
7843: PUSH
7844: LD_STRING 
7846: ST_TO_ADDR
// result := CreateHuman ;
7847: LD_ADDR_VAR 0 3
7851: PUSH
7852: CALL_OW 44
7856: ST_TO_ADDR
// end ;
7857: LD_VAR 0 3
7861: RET
// export function GetSpeed ( unit ) ; begin
7862: LD_INT 0
7864: PPUSH
// result := GetProperties ( unit ) [ 1 ] ;
7865: LD_ADDR_VAR 0 2
7869: PUSH
7870: LD_VAR 0 1
7874: PPUSH
7875: CALL_OW 464
7879: PUSH
7880: LD_INT 1
7882: ARRAY
7883: ST_TO_ADDR
// end ;
7884: LD_VAR 0 2
7888: RET
// export function CreateNature ( area , num1 , num2 , num3 , num4 ) ; var l , apeman , tiger , bird , horse ; begin
7889: LD_INT 0
7891: PPUSH
7892: PPUSH
7893: PPUSH
7894: PPUSH
7895: PPUSH
7896: PPUSH
// uc_nation = nation_nature ;
7897: LD_ADDR_OWVAR 21
7901: PUSH
7902: LD_INT 0
7904: ST_TO_ADDR
// uc_side = 0 ;
7905: LD_ADDR_OWVAR 20
7909: PUSH
7910: LD_INT 0
7912: ST_TO_ADDR
// l = 0 ;
7913: LD_ADDR_VAR 0 7
7917: PUSH
7918: LD_INT 0
7920: ST_TO_ADDR
// repeat begin uc_direction = Rand ( 0 , 5 ) ;
7921: LD_ADDR_OWVAR 24
7925: PUSH
7926: LD_INT 0
7928: PPUSH
7929: LD_INT 5
7931: PPUSH
7932: CALL_OW 12
7936: ST_TO_ADDR
// hc_agressivity = Rand ( - 5 , 0 ) ;
7937: LD_ADDR_OWVAR 35
7941: PUSH
7942: LD_INT 5
7944: NEG
7945: PPUSH
7946: LD_INT 0
7948: PPUSH
7949: CALL_OW 12
7953: ST_TO_ADDR
// hc_gallery =  ;
7954: LD_ADDR_OWVAR 33
7958: PUSH
7959: LD_STRING 
7961: ST_TO_ADDR
// hc_class = class_apeman ;
7962: LD_ADDR_OWVAR 28
7966: PUSH
7967: LD_INT 12
7969: ST_TO_ADDR
// hc_attr = [ Rand ( 11 , 13 ) , Rand ( 10 , 11 ) ] ;
7970: LD_ADDR_OWVAR 29
7974: PUSH
7975: LD_INT 11
7977: PPUSH
7978: LD_INT 13
7980: PPUSH
7981: CALL_OW 12
7985: PUSH
7986: LD_INT 10
7988: PPUSH
7989: LD_INT 11
7991: PPUSH
7992: CALL_OW 12
7996: PUSH
7997: EMPTY
7998: LIST
7999: LIST
8000: ST_TO_ADDR
// hc_sex = sex_male ;
8001: LD_ADDR_OWVAR 27
8005: PUSH
8006: LD_INT 1
8008: ST_TO_ADDR
// hc_skills = [ Rand ( 0 , 2 ) , 0 , 0 , 0 ] ;
8009: LD_ADDR_OWVAR 31
8013: PUSH
8014: LD_INT 0
8016: PPUSH
8017: LD_INT 2
8019: PPUSH
8020: CALL_OW 12
8024: PUSH
8025: LD_INT 0
8027: PUSH
8028: LD_INT 0
8030: PUSH
8031: LD_INT 0
8033: PUSH
8034: EMPTY
8035: LIST
8036: LIST
8037: LIST
8038: LIST
8039: ST_TO_ADDR
// apeman = CreateHuman ;
8040: LD_ADDR_VAR 0 8
8044: PUSH
8045: CALL_OW 44
8049: ST_TO_ADDR
// PlaceUnitArea ( apeman , area , false ) ;
8050: LD_VAR 0 8
8054: PPUSH
8055: LD_VAR 0 1
8059: PPUSH
8060: LD_INT 0
8062: PPUSH
8063: CALL_OW 49
// l = l + 1 ;
8067: LD_ADDR_VAR 0 7
8071: PUSH
8072: LD_VAR 0 7
8076: PUSH
8077: LD_INT 1
8079: PLUS
8080: ST_TO_ADDR
// end until l = num1 ;
8081: LD_VAR 0 7
8085: PUSH
8086: LD_VAR 0 2
8090: EQUAL
8091: IFFALSE 7921
// l = 0 ;
8093: LD_ADDR_VAR 0 7
8097: PUSH
8098: LD_INT 0
8100: ST_TO_ADDR
// repeat begin hc_agressivity = Rand ( 0 , 25 ) ;
8101: LD_ADDR_OWVAR 35
8105: PUSH
8106: LD_INT 0
8108: PPUSH
8109: LD_INT 25
8111: PPUSH
8112: CALL_OW 12
8116: ST_TO_ADDR
// hc_class = class_tiger ;
8117: LD_ADDR_OWVAR 28
8121: PUSH
8122: LD_INT 14
8124: ST_TO_ADDR
// hc_sex = sex_male ;
8125: LD_ADDR_OWVAR 27
8129: PUSH
8130: LD_INT 1
8132: ST_TO_ADDR
// hc_gallery = sandnature ;
8133: LD_ADDR_OWVAR 33
8137: PUSH
8138: LD_STRING sandnature
8140: ST_TO_ADDR
// hc_face_number = 3 ;
8141: LD_ADDR_OWVAR 34
8145: PUSH
8146: LD_INT 3
8148: ST_TO_ADDR
// tiger = CreateHuman ;
8149: LD_ADDR_VAR 0 9
8153: PUSH
8154: CALL_OW 44
8158: ST_TO_ADDR
// PlaceUnitArea ( tiger , area , false ) ;
8159: LD_VAR 0 9
8163: PPUSH
8164: LD_VAR 0 1
8168: PPUSH
8169: LD_INT 0
8171: PPUSH
8172: CALL_OW 49
// l = l + 1 ;
8176: LD_ADDR_VAR 0 7
8180: PUSH
8181: LD_VAR 0 7
8185: PUSH
8186: LD_INT 1
8188: PLUS
8189: ST_TO_ADDR
// end until l = num2 ;
8190: LD_VAR 0 7
8194: PUSH
8195: LD_VAR 0 3
8199: EQUAL
8200: IFFALSE 8101
// l = 0 ;
8202: LD_ADDR_VAR 0 7
8206: PUSH
8207: LD_INT 0
8209: ST_TO_ADDR
// repeat begin hc_class = class_phororhacos ;
8210: LD_ADDR_OWVAR 28
8214: PUSH
8215: LD_INT 18
8217: ST_TO_ADDR
// hc_gallery = sandnature ;
8218: LD_ADDR_OWVAR 33
8222: PUSH
8223: LD_STRING sandnature
8225: ST_TO_ADDR
// hc_face_number = 1 ;
8226: LD_ADDR_OWVAR 34
8230: PUSH
8231: LD_INT 1
8233: ST_TO_ADDR
// bird = CreateHuman ;
8234: LD_ADDR_VAR 0 10
8238: PUSH
8239: CALL_OW 44
8243: ST_TO_ADDR
// PlaceUnitAnywhere ( bird , false ) ;
8244: LD_VAR 0 10
8248: PPUSH
8249: LD_INT 0
8251: PPUSH
8252: CALL_OW 51
// l = l + 1 ;
8256: LD_ADDR_VAR 0 7
8260: PUSH
8261: LD_VAR 0 7
8265: PUSH
8266: LD_INT 1
8268: PLUS
8269: ST_TO_ADDR
// end until l = num3 ;
8270: LD_VAR 0 7
8274: PUSH
8275: LD_VAR 0 4
8279: EQUAL
8280: IFFALSE 8210
// l = 0 ;
8282: LD_ADDR_VAR 0 7
8286: PUSH
8287: LD_INT 0
8289: ST_TO_ADDR
// repeat begin hc_class = 21 ;
8290: LD_ADDR_OWVAR 28
8294: PUSH
8295: LD_INT 21
8297: ST_TO_ADDR
// hc_gallery = sandnature ;
8298: LD_ADDR_OWVAR 33
8302: PUSH
8303: LD_STRING sandnature
8305: ST_TO_ADDR
// hc_face_number = 5 ;
8306: LD_ADDR_OWVAR 34
8310: PUSH
8311: LD_INT 5
8313: ST_TO_ADDR
// horse := CreateHuman ;
8314: LD_ADDR_VAR 0 11
8318: PUSH
8319: CALL_OW 44
8323: ST_TO_ADDR
// PlaceUnitArea ( horse , area , false ) ;
8324: LD_VAR 0 11
8328: PPUSH
8329: LD_VAR 0 1
8333: PPUSH
8334: LD_INT 0
8336: PPUSH
8337: CALL_OW 49
// l = l + 1 ;
8341: LD_ADDR_VAR 0 7
8345: PUSH
8346: LD_VAR 0 7
8350: PUSH
8351: LD_INT 1
8353: PLUS
8354: ST_TO_ADDR
// end until l = num4 ;
8355: LD_VAR 0 7
8359: PUSH
8360: LD_VAR 0 5
8364: EQUAL
8365: IFFALSE 8290
// end ;
8367: LD_VAR 0 6
8371: RET
// export function PrepareComm ; begin
8372: LD_INT 0
8374: PPUSH
// uc_side := 1 ;
8375: LD_ADDR_OWVAR 20
8379: PUSH
8380: LD_INT 1
8382: ST_TO_ADDR
// uc_nation := 1 ;
8383: LD_ADDR_OWVAR 21
8387: PUSH
8388: LD_INT 1
8390: ST_TO_ADDR
// hc_gallery :=  ;
8391: LD_ADDR_OWVAR 33
8395: PUSH
8396: LD_STRING 
8398: ST_TO_ADDR
// hc_name :=  ;
8399: LD_ADDR_OWVAR 26
8403: PUSH
8404: LD_STRING 
8406: ST_TO_ADDR
// hc_class := 1 ;
8407: LD_ADDR_OWVAR 28
8411: PUSH
8412: LD_INT 1
8414: ST_TO_ADDR
// hc_sex := sex_male ;
8415: LD_ADDR_OWVAR 27
8419: PUSH
8420: LD_INT 1
8422: ST_TO_ADDR
// am_comander := CreateHuman ;
8423: LD_ADDR_EXP 46
8427: PUSH
8428: CALL_OW 44
8432: ST_TO_ADDR
// uc_side := 3 ;
8433: LD_ADDR_OWVAR 20
8437: PUSH
8438: LD_INT 3
8440: ST_TO_ADDR
// uc_nation := 3 ;
8441: LD_ADDR_OWVAR 21
8445: PUSH
8446: LD_INT 3
8448: ST_TO_ADDR
// ru_comander := CreateHuman ;
8449: LD_ADDR_EXP 47
8453: PUSH
8454: CALL_OW 44
8458: ST_TO_ADDR
// uc_side := 2 ;
8459: LD_ADDR_OWVAR 20
8463: PUSH
8464: LD_INT 2
8466: ST_TO_ADDR
// uc_nation := 2 ;
8467: LD_ADDR_OWVAR 21
8471: PUSH
8472: LD_INT 2
8474: ST_TO_ADDR
// hc_name := Heike Steyer ;
8475: LD_ADDR_OWVAR 26
8479: PUSH
8480: LD_STRING Heike Steyer
8482: ST_TO_ADDR
// hc_sex := sex_female ;
8483: LD_ADDR_OWVAR 27
8487: PUSH
8488: LD_INT 2
8490: ST_TO_ADDR
// hc_gallery := sandar ;
8491: LD_ADDR_OWVAR 33
8495: PUSH
8496: LD_STRING sandar
8498: ST_TO_ADDR
// hc_face_number := 14 ;
8499: LD_ADDR_OWVAR 34
8503: PUSH
8504: LD_INT 14
8506: ST_TO_ADDR
// ar_comander := CreateHuman ;
8507: LD_ADDR_EXP 48
8511: PUSH
8512: CALL_OW 44
8516: ST_TO_ADDR
// end ;
8517: LD_VAR 0 1
8521: RET
// export function SpeedFilter ( filter , speed ) ; var list , i ; begin
8522: LD_INT 0
8524: PPUSH
8525: PPUSH
8526: PPUSH
// list := [ ] ;
8527: LD_ADDR_VAR 0 4
8531: PUSH
8532: EMPTY
8533: ST_TO_ADDR
// for i = 1 to filter do
8534: LD_ADDR_VAR 0 5
8538: PUSH
8539: DOUBLE
8540: LD_INT 1
8542: DEC
8543: ST_TO_ADDR
8544: LD_VAR 0 1
8548: PUSH
8549: FOR_TO
8550: IFFALSE 8599
// if GetSpeed ( filter [ i ] ) < speed then
8552: LD_VAR 0 1
8556: PUSH
8557: LD_VAR 0 5
8561: ARRAY
8562: PPUSH
8563: CALL 7862 0 1
8567: PUSH
8568: LD_VAR 0 2
8572: LESS
8573: IFFALSE 8597
// list := list ^ filter [ i ] ;
8575: LD_ADDR_VAR 0 4
8579: PUSH
8580: LD_VAR 0 4
8584: PUSH
8585: LD_VAR 0 1
8589: PUSH
8590: LD_VAR 0 5
8594: ARRAY
8595: ADD
8596: ST_TO_ADDR
8597: GO 8549
8599: POP
8600: POP
// result := list ;
8601: LD_ADDR_VAR 0 3
8605: PUSH
8606: LD_VAR 0 4
8610: ST_TO_ADDR
// end ; end_of_file end_of_file
8611: LD_VAR 0 3
8615: RET
// export globalGameSaveCounter ; every 0 0$1 do
8616: GO 8618
8618: DISABLE
// begin enable ;
8619: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
8620: LD_STRING updateTimer(
8622: PUSH
8623: LD_OWVAR 1
8627: STR
8628: PUSH
8629: LD_STRING );
8631: STR
8632: PPUSH
8633: CALL_OW 559
// end ;
8637: END
// every 0 0$1 do
8638: GO 8640
8640: DISABLE
// begin globalGameSaveCounter := 0 ;
8641: LD_ADDR_EXP 52
8645: PUSH
8646: LD_INT 0
8648: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
8649: LD_STRING setGameSaveCounter(0)
8651: PPUSH
8652: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
8656: LD_STRING initStreamRollete();
8658: PPUSH
8659: CALL_OW 559
// InitStreamMode ;
8663: CALL 9989 0 0
// DefineStreamItems ( false ) ;
8667: LD_INT 0
8669: PPUSH
8670: CALL 10453 0 1
// end ;
8674: END
// export function SOS_MapStart ( ) ; begin
8675: LD_INT 0
8677: PPUSH
// if streamModeActive then
8678: LD_EXP 53
8682: IFFALSE 8691
// DefineStreamItems ( true ) ;
8684: LD_INT 1
8686: PPUSH
8687: CALL 10453 0 1
// UpdateLuaVariables ( ) ;
8691: CALL 8708 0 0
// UpdateFactoryWaypoints ( ) ;
8695: CALL 23314 0 0
// UpdateWarehouseGatheringPoints ( ) ;
8699: CALL 23571 0 0
// end ;
8703: LD_VAR 0 1
8707: RET
// function UpdateLuaVariables ( ) ; begin
8708: LD_INT 0
8710: PPUSH
// if globalGameSaveCounter then
8711: LD_EXP 52
8715: IFFALSE 8749
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
8717: LD_ADDR_EXP 52
8721: PUSH
8722: LD_EXP 52
8726: PPUSH
8727: CALL 67528 0 1
8731: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
8732: LD_STRING setGameSaveCounter(
8734: PUSH
8735: LD_EXP 52
8739: STR
8740: PUSH
8741: LD_STRING )
8743: STR
8744: PPUSH
8745: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
8749: LD_STRING setGameDifficulty(
8751: PUSH
8752: LD_OWVAR 67
8756: STR
8757: PUSH
8758: LD_STRING )
8760: STR
8761: PPUSH
8762: CALL_OW 559
// end ;
8766: LD_VAR 0 1
8770: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
8771: LD_INT 0
8773: PPUSH
// if p2 = stream_mode then
8774: LD_VAR 0 2
8778: PUSH
8779: LD_INT 100
8781: EQUAL
8782: IFFALSE 9785
// begin if not StreamModeActive then
8784: LD_EXP 53
8788: NOT
8789: IFFALSE 8799
// StreamModeActive := true ;
8791: LD_ADDR_EXP 53
8795: PUSH
8796: LD_INT 1
8798: ST_TO_ADDR
// if p3 = 0 then
8799: LD_VAR 0 3
8803: PUSH
8804: LD_INT 0
8806: EQUAL
8807: IFFALSE 8813
// InitStreamMode ;
8809: CALL 9989 0 0
// if p3 = 1 then
8813: LD_VAR 0 3
8817: PUSH
8818: LD_INT 1
8820: EQUAL
8821: IFFALSE 8831
// sRocket := true ;
8823: LD_ADDR_EXP 58
8827: PUSH
8828: LD_INT 1
8830: ST_TO_ADDR
// if p3 = 2 then
8831: LD_VAR 0 3
8835: PUSH
8836: LD_INT 2
8838: EQUAL
8839: IFFALSE 8849
// sSpeed := true ;
8841: LD_ADDR_EXP 57
8845: PUSH
8846: LD_INT 1
8848: ST_TO_ADDR
// if p3 = 3 then
8849: LD_VAR 0 3
8853: PUSH
8854: LD_INT 3
8856: EQUAL
8857: IFFALSE 8867
// sEngine := true ;
8859: LD_ADDR_EXP 59
8863: PUSH
8864: LD_INT 1
8866: ST_TO_ADDR
// if p3 = 4 then
8867: LD_VAR 0 3
8871: PUSH
8872: LD_INT 4
8874: EQUAL
8875: IFFALSE 8885
// sSpec := true ;
8877: LD_ADDR_EXP 56
8881: PUSH
8882: LD_INT 1
8884: ST_TO_ADDR
// if p3 = 5 then
8885: LD_VAR 0 3
8889: PUSH
8890: LD_INT 5
8892: EQUAL
8893: IFFALSE 8903
// sLevel := true ;
8895: LD_ADDR_EXP 60
8899: PUSH
8900: LD_INT 1
8902: ST_TO_ADDR
// if p3 = 6 then
8903: LD_VAR 0 3
8907: PUSH
8908: LD_INT 6
8910: EQUAL
8911: IFFALSE 8921
// sArmoury := true ;
8913: LD_ADDR_EXP 61
8917: PUSH
8918: LD_INT 1
8920: ST_TO_ADDR
// if p3 = 7 then
8921: LD_VAR 0 3
8925: PUSH
8926: LD_INT 7
8928: EQUAL
8929: IFFALSE 8939
// sRadar := true ;
8931: LD_ADDR_EXP 62
8935: PUSH
8936: LD_INT 1
8938: ST_TO_ADDR
// if p3 = 8 then
8939: LD_VAR 0 3
8943: PUSH
8944: LD_INT 8
8946: EQUAL
8947: IFFALSE 8957
// sBunker := true ;
8949: LD_ADDR_EXP 63
8953: PUSH
8954: LD_INT 1
8956: ST_TO_ADDR
// if p3 = 9 then
8957: LD_VAR 0 3
8961: PUSH
8962: LD_INT 9
8964: EQUAL
8965: IFFALSE 8975
// sHack := true ;
8967: LD_ADDR_EXP 64
8971: PUSH
8972: LD_INT 1
8974: ST_TO_ADDR
// if p3 = 10 then
8975: LD_VAR 0 3
8979: PUSH
8980: LD_INT 10
8982: EQUAL
8983: IFFALSE 8993
// sFire := true ;
8985: LD_ADDR_EXP 65
8989: PUSH
8990: LD_INT 1
8992: ST_TO_ADDR
// if p3 = 11 then
8993: LD_VAR 0 3
8997: PUSH
8998: LD_INT 11
9000: EQUAL
9001: IFFALSE 9011
// sRefresh := true ;
9003: LD_ADDR_EXP 66
9007: PUSH
9008: LD_INT 1
9010: ST_TO_ADDR
// if p3 = 12 then
9011: LD_VAR 0 3
9015: PUSH
9016: LD_INT 12
9018: EQUAL
9019: IFFALSE 9029
// sExp := true ;
9021: LD_ADDR_EXP 67
9025: PUSH
9026: LD_INT 1
9028: ST_TO_ADDR
// if p3 = 13 then
9029: LD_VAR 0 3
9033: PUSH
9034: LD_INT 13
9036: EQUAL
9037: IFFALSE 9047
// sDepot := true ;
9039: LD_ADDR_EXP 68
9043: PUSH
9044: LD_INT 1
9046: ST_TO_ADDR
// if p3 = 14 then
9047: LD_VAR 0 3
9051: PUSH
9052: LD_INT 14
9054: EQUAL
9055: IFFALSE 9065
// sFlag := true ;
9057: LD_ADDR_EXP 69
9061: PUSH
9062: LD_INT 1
9064: ST_TO_ADDR
// if p3 = 15 then
9065: LD_VAR 0 3
9069: PUSH
9070: LD_INT 15
9072: EQUAL
9073: IFFALSE 9083
// sKamikadze := true ;
9075: LD_ADDR_EXP 77
9079: PUSH
9080: LD_INT 1
9082: ST_TO_ADDR
// if p3 = 16 then
9083: LD_VAR 0 3
9087: PUSH
9088: LD_INT 16
9090: EQUAL
9091: IFFALSE 9101
// sTroll := true ;
9093: LD_ADDR_EXP 78
9097: PUSH
9098: LD_INT 1
9100: ST_TO_ADDR
// if p3 = 17 then
9101: LD_VAR 0 3
9105: PUSH
9106: LD_INT 17
9108: EQUAL
9109: IFFALSE 9119
// sSlow := true ;
9111: LD_ADDR_EXP 79
9115: PUSH
9116: LD_INT 1
9118: ST_TO_ADDR
// if p3 = 18 then
9119: LD_VAR 0 3
9123: PUSH
9124: LD_INT 18
9126: EQUAL
9127: IFFALSE 9137
// sLack := true ;
9129: LD_ADDR_EXP 80
9133: PUSH
9134: LD_INT 1
9136: ST_TO_ADDR
// if p3 = 19 then
9137: LD_VAR 0 3
9141: PUSH
9142: LD_INT 19
9144: EQUAL
9145: IFFALSE 9155
// sTank := true ;
9147: LD_ADDR_EXP 82
9151: PUSH
9152: LD_INT 1
9154: ST_TO_ADDR
// if p3 = 20 then
9155: LD_VAR 0 3
9159: PUSH
9160: LD_INT 20
9162: EQUAL
9163: IFFALSE 9173
// sRemote := true ;
9165: LD_ADDR_EXP 83
9169: PUSH
9170: LD_INT 1
9172: ST_TO_ADDR
// if p3 = 21 then
9173: LD_VAR 0 3
9177: PUSH
9178: LD_INT 21
9180: EQUAL
9181: IFFALSE 9191
// sPowell := true ;
9183: LD_ADDR_EXP 84
9187: PUSH
9188: LD_INT 1
9190: ST_TO_ADDR
// if p3 = 22 then
9191: LD_VAR 0 3
9195: PUSH
9196: LD_INT 22
9198: EQUAL
9199: IFFALSE 9209
// sTeleport := true ;
9201: LD_ADDR_EXP 87
9205: PUSH
9206: LD_INT 1
9208: ST_TO_ADDR
// if p3 = 23 then
9209: LD_VAR 0 3
9213: PUSH
9214: LD_INT 23
9216: EQUAL
9217: IFFALSE 9227
// sOilTower := true ;
9219: LD_ADDR_EXP 89
9223: PUSH
9224: LD_INT 1
9226: ST_TO_ADDR
// if p3 = 24 then
9227: LD_VAR 0 3
9231: PUSH
9232: LD_INT 24
9234: EQUAL
9235: IFFALSE 9245
// sShovel := true ;
9237: LD_ADDR_EXP 90
9241: PUSH
9242: LD_INT 1
9244: ST_TO_ADDR
// if p3 = 25 then
9245: LD_VAR 0 3
9249: PUSH
9250: LD_INT 25
9252: EQUAL
9253: IFFALSE 9263
// sSheik := true ;
9255: LD_ADDR_EXP 91
9259: PUSH
9260: LD_INT 1
9262: ST_TO_ADDR
// if p3 = 26 then
9263: LD_VAR 0 3
9267: PUSH
9268: LD_INT 26
9270: EQUAL
9271: IFFALSE 9281
// sEarthquake := true ;
9273: LD_ADDR_EXP 93
9277: PUSH
9278: LD_INT 1
9280: ST_TO_ADDR
// if p3 = 27 then
9281: LD_VAR 0 3
9285: PUSH
9286: LD_INT 27
9288: EQUAL
9289: IFFALSE 9299
// sAI := true ;
9291: LD_ADDR_EXP 94
9295: PUSH
9296: LD_INT 1
9298: ST_TO_ADDR
// if p3 = 28 then
9299: LD_VAR 0 3
9303: PUSH
9304: LD_INT 28
9306: EQUAL
9307: IFFALSE 9317
// sCargo := true ;
9309: LD_ADDR_EXP 97
9313: PUSH
9314: LD_INT 1
9316: ST_TO_ADDR
// if p3 = 29 then
9317: LD_VAR 0 3
9321: PUSH
9322: LD_INT 29
9324: EQUAL
9325: IFFALSE 9335
// sDLaser := true ;
9327: LD_ADDR_EXP 98
9331: PUSH
9332: LD_INT 1
9334: ST_TO_ADDR
// if p3 = 30 then
9335: LD_VAR 0 3
9339: PUSH
9340: LD_INT 30
9342: EQUAL
9343: IFFALSE 9353
// sExchange := true ;
9345: LD_ADDR_EXP 99
9349: PUSH
9350: LD_INT 1
9352: ST_TO_ADDR
// if p3 = 31 then
9353: LD_VAR 0 3
9357: PUSH
9358: LD_INT 31
9360: EQUAL
9361: IFFALSE 9371
// sFac := true ;
9363: LD_ADDR_EXP 100
9367: PUSH
9368: LD_INT 1
9370: ST_TO_ADDR
// if p3 = 32 then
9371: LD_VAR 0 3
9375: PUSH
9376: LD_INT 32
9378: EQUAL
9379: IFFALSE 9389
// sPower := true ;
9381: LD_ADDR_EXP 101
9385: PUSH
9386: LD_INT 1
9388: ST_TO_ADDR
// if p3 = 33 then
9389: LD_VAR 0 3
9393: PUSH
9394: LD_INT 33
9396: EQUAL
9397: IFFALSE 9407
// sRandom := true ;
9399: LD_ADDR_EXP 102
9403: PUSH
9404: LD_INT 1
9406: ST_TO_ADDR
// if p3 = 34 then
9407: LD_VAR 0 3
9411: PUSH
9412: LD_INT 34
9414: EQUAL
9415: IFFALSE 9425
// sShield := true ;
9417: LD_ADDR_EXP 103
9421: PUSH
9422: LD_INT 1
9424: ST_TO_ADDR
// if p3 = 35 then
9425: LD_VAR 0 3
9429: PUSH
9430: LD_INT 35
9432: EQUAL
9433: IFFALSE 9443
// sTime := true ;
9435: LD_ADDR_EXP 104
9439: PUSH
9440: LD_INT 1
9442: ST_TO_ADDR
// if p3 = 36 then
9443: LD_VAR 0 3
9447: PUSH
9448: LD_INT 36
9450: EQUAL
9451: IFFALSE 9461
// sTools := true ;
9453: LD_ADDR_EXP 105
9457: PUSH
9458: LD_INT 1
9460: ST_TO_ADDR
// if p3 = 101 then
9461: LD_VAR 0 3
9465: PUSH
9466: LD_INT 101
9468: EQUAL
9469: IFFALSE 9479
// sSold := true ;
9471: LD_ADDR_EXP 70
9475: PUSH
9476: LD_INT 1
9478: ST_TO_ADDR
// if p3 = 102 then
9479: LD_VAR 0 3
9483: PUSH
9484: LD_INT 102
9486: EQUAL
9487: IFFALSE 9497
// sDiff := true ;
9489: LD_ADDR_EXP 71
9493: PUSH
9494: LD_INT 1
9496: ST_TO_ADDR
// if p3 = 103 then
9497: LD_VAR 0 3
9501: PUSH
9502: LD_INT 103
9504: EQUAL
9505: IFFALSE 9515
// sFog := true ;
9507: LD_ADDR_EXP 74
9511: PUSH
9512: LD_INT 1
9514: ST_TO_ADDR
// if p3 = 104 then
9515: LD_VAR 0 3
9519: PUSH
9520: LD_INT 104
9522: EQUAL
9523: IFFALSE 9533
// sReset := true ;
9525: LD_ADDR_EXP 75
9529: PUSH
9530: LD_INT 1
9532: ST_TO_ADDR
// if p3 = 105 then
9533: LD_VAR 0 3
9537: PUSH
9538: LD_INT 105
9540: EQUAL
9541: IFFALSE 9551
// sSun := true ;
9543: LD_ADDR_EXP 76
9547: PUSH
9548: LD_INT 1
9550: ST_TO_ADDR
// if p3 = 106 then
9551: LD_VAR 0 3
9555: PUSH
9556: LD_INT 106
9558: EQUAL
9559: IFFALSE 9569
// sTiger := true ;
9561: LD_ADDR_EXP 72
9565: PUSH
9566: LD_INT 1
9568: ST_TO_ADDR
// if p3 = 107 then
9569: LD_VAR 0 3
9573: PUSH
9574: LD_INT 107
9576: EQUAL
9577: IFFALSE 9587
// sBomb := true ;
9579: LD_ADDR_EXP 73
9583: PUSH
9584: LD_INT 1
9586: ST_TO_ADDR
// if p3 = 108 then
9587: LD_VAR 0 3
9591: PUSH
9592: LD_INT 108
9594: EQUAL
9595: IFFALSE 9605
// sWound := true ;
9597: LD_ADDR_EXP 81
9601: PUSH
9602: LD_INT 1
9604: ST_TO_ADDR
// if p3 = 109 then
9605: LD_VAR 0 3
9609: PUSH
9610: LD_INT 109
9612: EQUAL
9613: IFFALSE 9623
// sBetray := true ;
9615: LD_ADDR_EXP 85
9619: PUSH
9620: LD_INT 1
9622: ST_TO_ADDR
// if p3 = 110 then
9623: LD_VAR 0 3
9627: PUSH
9628: LD_INT 110
9630: EQUAL
9631: IFFALSE 9641
// sContamin := true ;
9633: LD_ADDR_EXP 86
9637: PUSH
9638: LD_INT 1
9640: ST_TO_ADDR
// if p3 = 111 then
9641: LD_VAR 0 3
9645: PUSH
9646: LD_INT 111
9648: EQUAL
9649: IFFALSE 9659
// sOil := true ;
9651: LD_ADDR_EXP 88
9655: PUSH
9656: LD_INT 1
9658: ST_TO_ADDR
// if p3 = 112 then
9659: LD_VAR 0 3
9663: PUSH
9664: LD_INT 112
9666: EQUAL
9667: IFFALSE 9677
// sStu := true ;
9669: LD_ADDR_EXP 92
9673: PUSH
9674: LD_INT 1
9676: ST_TO_ADDR
// if p3 = 113 then
9677: LD_VAR 0 3
9681: PUSH
9682: LD_INT 113
9684: EQUAL
9685: IFFALSE 9695
// sBazooka := true ;
9687: LD_ADDR_EXP 95
9691: PUSH
9692: LD_INT 1
9694: ST_TO_ADDR
// if p3 = 114 then
9695: LD_VAR 0 3
9699: PUSH
9700: LD_INT 114
9702: EQUAL
9703: IFFALSE 9713
// sMortar := true ;
9705: LD_ADDR_EXP 96
9709: PUSH
9710: LD_INT 1
9712: ST_TO_ADDR
// if p3 = 115 then
9713: LD_VAR 0 3
9717: PUSH
9718: LD_INT 115
9720: EQUAL
9721: IFFALSE 9731
// sRanger := true ;
9723: LD_ADDR_EXP 106
9727: PUSH
9728: LD_INT 1
9730: ST_TO_ADDR
// if p3 = 116 then
9731: LD_VAR 0 3
9735: PUSH
9736: LD_INT 116
9738: EQUAL
9739: IFFALSE 9749
// sComputer := true ;
9741: LD_ADDR_EXP 107
9745: PUSH
9746: LD_INT 1
9748: ST_TO_ADDR
// if p3 = 117 then
9749: LD_VAR 0 3
9753: PUSH
9754: LD_INT 117
9756: EQUAL
9757: IFFALSE 9767
// s30 := true ;
9759: LD_ADDR_EXP 108
9763: PUSH
9764: LD_INT 1
9766: ST_TO_ADDR
// if p3 = 118 then
9767: LD_VAR 0 3
9771: PUSH
9772: LD_INT 118
9774: EQUAL
9775: IFFALSE 9785
// s60 := true ;
9777: LD_ADDR_EXP 109
9781: PUSH
9782: LD_INT 1
9784: ST_TO_ADDR
// end ; if p2 = hack_mode then
9785: LD_VAR 0 2
9789: PUSH
9790: LD_INT 101
9792: EQUAL
9793: IFFALSE 9921
// begin case p3 of 1 :
9795: LD_VAR 0 3
9799: PUSH
9800: LD_INT 1
9802: DOUBLE
9803: EQUAL
9804: IFTRUE 9808
9806: GO 9815
9808: POP
// hHackUnlimitedResources ; 2 :
9809: CALL 22060 0 0
9813: GO 9921
9815: LD_INT 2
9817: DOUBLE
9818: EQUAL
9819: IFTRUE 9823
9821: GO 9830
9823: POP
// hHackSetLevel10 ; 3 :
9824: CALL 22193 0 0
9828: GO 9921
9830: LD_INT 3
9832: DOUBLE
9833: EQUAL
9834: IFTRUE 9838
9836: GO 9845
9838: POP
// hHackSetLevel10YourUnits ; 4 :
9839: CALL 22278 0 0
9843: GO 9921
9845: LD_INT 4
9847: DOUBLE
9848: EQUAL
9849: IFTRUE 9853
9851: GO 9860
9853: POP
// hHackInvincible ; 5 :
9854: CALL 22726 0 0
9858: GO 9921
9860: LD_INT 5
9862: DOUBLE
9863: EQUAL
9864: IFTRUE 9868
9866: GO 9875
9868: POP
// hHackInvisible ; 6 :
9869: CALL 22837 0 0
9873: GO 9921
9875: LD_INT 6
9877: DOUBLE
9878: EQUAL
9879: IFTRUE 9883
9881: GO 9890
9883: POP
// hHackChangeYourSide ; 7 :
9884: CALL 22894 0 0
9888: GO 9921
9890: LD_INT 7
9892: DOUBLE
9893: EQUAL
9894: IFTRUE 9898
9896: GO 9905
9898: POP
// hHackChangeUnitSide ; 8 :
9899: CALL 22936 0 0
9903: GO 9921
9905: LD_INT 8
9907: DOUBLE
9908: EQUAL
9909: IFTRUE 9913
9911: GO 9920
9913: POP
// hHackFog ; end ;
9914: CALL 23037 0 0
9918: GO 9921
9920: POP
// end ; if p2 = game_save_mode then
9921: LD_VAR 0 2
9925: PUSH
9926: LD_INT 102
9928: EQUAL
9929: IFFALSE 9984
// begin if p3 = 1 then
9931: LD_VAR 0 3
9935: PUSH
9936: LD_INT 1
9938: EQUAL
9939: IFFALSE 9951
// globalGameSaveCounter := p4 ;
9941: LD_ADDR_EXP 52
9945: PUSH
9946: LD_VAR 0 4
9950: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
9951: LD_VAR 0 3
9955: PUSH
9956: LD_INT 2
9958: EQUAL
9959: PUSH
9960: LD_EXP 52
9964: AND
9965: IFFALSE 9984
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
9967: LD_STRING setGameSaveCounter(
9969: PUSH
9970: LD_EXP 52
9974: STR
9975: PUSH
9976: LD_STRING )
9978: STR
9979: PPUSH
9980: CALL_OW 559
// end ; end ;
9984: LD_VAR 0 7
9988: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
9989: LD_INT 0
9991: PPUSH
// streamModeActive := false ;
9992: LD_ADDR_EXP 53
9996: PUSH
9997: LD_INT 0
9999: ST_TO_ADDR
// normalCounter := 36 ;
10000: LD_ADDR_EXP 54
10004: PUSH
10005: LD_INT 36
10007: ST_TO_ADDR
// hardcoreCounter := 18 ;
10008: LD_ADDR_EXP 55
10012: PUSH
10013: LD_INT 18
10015: ST_TO_ADDR
// sRocket := false ;
10016: LD_ADDR_EXP 58
10020: PUSH
10021: LD_INT 0
10023: ST_TO_ADDR
// sSpeed := false ;
10024: LD_ADDR_EXP 57
10028: PUSH
10029: LD_INT 0
10031: ST_TO_ADDR
// sEngine := false ;
10032: LD_ADDR_EXP 59
10036: PUSH
10037: LD_INT 0
10039: ST_TO_ADDR
// sSpec := false ;
10040: LD_ADDR_EXP 56
10044: PUSH
10045: LD_INT 0
10047: ST_TO_ADDR
// sLevel := false ;
10048: LD_ADDR_EXP 60
10052: PUSH
10053: LD_INT 0
10055: ST_TO_ADDR
// sArmoury := false ;
10056: LD_ADDR_EXP 61
10060: PUSH
10061: LD_INT 0
10063: ST_TO_ADDR
// sRadar := false ;
10064: LD_ADDR_EXP 62
10068: PUSH
10069: LD_INT 0
10071: ST_TO_ADDR
// sBunker := false ;
10072: LD_ADDR_EXP 63
10076: PUSH
10077: LD_INT 0
10079: ST_TO_ADDR
// sHack := false ;
10080: LD_ADDR_EXP 64
10084: PUSH
10085: LD_INT 0
10087: ST_TO_ADDR
// sFire := false ;
10088: LD_ADDR_EXP 65
10092: PUSH
10093: LD_INT 0
10095: ST_TO_ADDR
// sRefresh := false ;
10096: LD_ADDR_EXP 66
10100: PUSH
10101: LD_INT 0
10103: ST_TO_ADDR
// sExp := false ;
10104: LD_ADDR_EXP 67
10108: PUSH
10109: LD_INT 0
10111: ST_TO_ADDR
// sDepot := false ;
10112: LD_ADDR_EXP 68
10116: PUSH
10117: LD_INT 0
10119: ST_TO_ADDR
// sFlag := false ;
10120: LD_ADDR_EXP 69
10124: PUSH
10125: LD_INT 0
10127: ST_TO_ADDR
// sKamikadze := false ;
10128: LD_ADDR_EXP 77
10132: PUSH
10133: LD_INT 0
10135: ST_TO_ADDR
// sTroll := false ;
10136: LD_ADDR_EXP 78
10140: PUSH
10141: LD_INT 0
10143: ST_TO_ADDR
// sSlow := false ;
10144: LD_ADDR_EXP 79
10148: PUSH
10149: LD_INT 0
10151: ST_TO_ADDR
// sLack := false ;
10152: LD_ADDR_EXP 80
10156: PUSH
10157: LD_INT 0
10159: ST_TO_ADDR
// sTank := false ;
10160: LD_ADDR_EXP 82
10164: PUSH
10165: LD_INT 0
10167: ST_TO_ADDR
// sRemote := false ;
10168: LD_ADDR_EXP 83
10172: PUSH
10173: LD_INT 0
10175: ST_TO_ADDR
// sPowell := false ;
10176: LD_ADDR_EXP 84
10180: PUSH
10181: LD_INT 0
10183: ST_TO_ADDR
// sTeleport := false ;
10184: LD_ADDR_EXP 87
10188: PUSH
10189: LD_INT 0
10191: ST_TO_ADDR
// sOilTower := false ;
10192: LD_ADDR_EXP 89
10196: PUSH
10197: LD_INT 0
10199: ST_TO_ADDR
// sShovel := false ;
10200: LD_ADDR_EXP 90
10204: PUSH
10205: LD_INT 0
10207: ST_TO_ADDR
// sSheik := false ;
10208: LD_ADDR_EXP 91
10212: PUSH
10213: LD_INT 0
10215: ST_TO_ADDR
// sEarthquake := false ;
10216: LD_ADDR_EXP 93
10220: PUSH
10221: LD_INT 0
10223: ST_TO_ADDR
// sAI := false ;
10224: LD_ADDR_EXP 94
10228: PUSH
10229: LD_INT 0
10231: ST_TO_ADDR
// sCargo := false ;
10232: LD_ADDR_EXP 97
10236: PUSH
10237: LD_INT 0
10239: ST_TO_ADDR
// sDLaser := false ;
10240: LD_ADDR_EXP 98
10244: PUSH
10245: LD_INT 0
10247: ST_TO_ADDR
// sExchange := false ;
10248: LD_ADDR_EXP 99
10252: PUSH
10253: LD_INT 0
10255: ST_TO_ADDR
// sFac := false ;
10256: LD_ADDR_EXP 100
10260: PUSH
10261: LD_INT 0
10263: ST_TO_ADDR
// sPower := false ;
10264: LD_ADDR_EXP 101
10268: PUSH
10269: LD_INT 0
10271: ST_TO_ADDR
// sRandom := false ;
10272: LD_ADDR_EXP 102
10276: PUSH
10277: LD_INT 0
10279: ST_TO_ADDR
// sShield := false ;
10280: LD_ADDR_EXP 103
10284: PUSH
10285: LD_INT 0
10287: ST_TO_ADDR
// sTime := false ;
10288: LD_ADDR_EXP 104
10292: PUSH
10293: LD_INT 0
10295: ST_TO_ADDR
// sTools := false ;
10296: LD_ADDR_EXP 105
10300: PUSH
10301: LD_INT 0
10303: ST_TO_ADDR
// sSold := false ;
10304: LD_ADDR_EXP 70
10308: PUSH
10309: LD_INT 0
10311: ST_TO_ADDR
// sDiff := false ;
10312: LD_ADDR_EXP 71
10316: PUSH
10317: LD_INT 0
10319: ST_TO_ADDR
// sFog := false ;
10320: LD_ADDR_EXP 74
10324: PUSH
10325: LD_INT 0
10327: ST_TO_ADDR
// sReset := false ;
10328: LD_ADDR_EXP 75
10332: PUSH
10333: LD_INT 0
10335: ST_TO_ADDR
// sSun := false ;
10336: LD_ADDR_EXP 76
10340: PUSH
10341: LD_INT 0
10343: ST_TO_ADDR
// sTiger := false ;
10344: LD_ADDR_EXP 72
10348: PUSH
10349: LD_INT 0
10351: ST_TO_ADDR
// sBomb := false ;
10352: LD_ADDR_EXP 73
10356: PUSH
10357: LD_INT 0
10359: ST_TO_ADDR
// sWound := false ;
10360: LD_ADDR_EXP 81
10364: PUSH
10365: LD_INT 0
10367: ST_TO_ADDR
// sBetray := false ;
10368: LD_ADDR_EXP 85
10372: PUSH
10373: LD_INT 0
10375: ST_TO_ADDR
// sContamin := false ;
10376: LD_ADDR_EXP 86
10380: PUSH
10381: LD_INT 0
10383: ST_TO_ADDR
// sOil := false ;
10384: LD_ADDR_EXP 88
10388: PUSH
10389: LD_INT 0
10391: ST_TO_ADDR
// sStu := false ;
10392: LD_ADDR_EXP 92
10396: PUSH
10397: LD_INT 0
10399: ST_TO_ADDR
// sBazooka := false ;
10400: LD_ADDR_EXP 95
10404: PUSH
10405: LD_INT 0
10407: ST_TO_ADDR
// sMortar := false ;
10408: LD_ADDR_EXP 96
10412: PUSH
10413: LD_INT 0
10415: ST_TO_ADDR
// sRanger := false ;
10416: LD_ADDR_EXP 106
10420: PUSH
10421: LD_INT 0
10423: ST_TO_ADDR
// sComputer := false ;
10424: LD_ADDR_EXP 107
10428: PUSH
10429: LD_INT 0
10431: ST_TO_ADDR
// s30 := false ;
10432: LD_ADDR_EXP 108
10436: PUSH
10437: LD_INT 0
10439: ST_TO_ADDR
// s60 := false ;
10440: LD_ADDR_EXP 109
10444: PUSH
10445: LD_INT 0
10447: ST_TO_ADDR
// end ;
10448: LD_VAR 0 1
10452: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
10453: LD_INT 0
10455: PPUSH
10456: PPUSH
10457: PPUSH
10458: PPUSH
10459: PPUSH
10460: PPUSH
10461: PPUSH
// result := [ ] ;
10462: LD_ADDR_VAR 0 2
10466: PUSH
10467: EMPTY
10468: ST_TO_ADDR
// if campaign_id = 1 then
10469: LD_OWVAR 69
10473: PUSH
10474: LD_INT 1
10476: EQUAL
10477: IFFALSE 13643
// begin case mission_number of 1 :
10479: LD_OWVAR 70
10483: PUSH
10484: LD_INT 1
10486: DOUBLE
10487: EQUAL
10488: IFTRUE 10492
10490: GO 10568
10492: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
10493: LD_ADDR_VAR 0 2
10497: PUSH
10498: LD_INT 2
10500: PUSH
10501: LD_INT 4
10503: PUSH
10504: LD_INT 11
10506: PUSH
10507: LD_INT 12
10509: PUSH
10510: LD_INT 15
10512: PUSH
10513: LD_INT 16
10515: PUSH
10516: LD_INT 22
10518: PUSH
10519: LD_INT 23
10521: PUSH
10522: LD_INT 26
10524: PUSH
10525: EMPTY
10526: LIST
10527: LIST
10528: LIST
10529: LIST
10530: LIST
10531: LIST
10532: LIST
10533: LIST
10534: LIST
10535: PUSH
10536: LD_INT 101
10538: PUSH
10539: LD_INT 102
10541: PUSH
10542: LD_INT 106
10544: PUSH
10545: LD_INT 116
10547: PUSH
10548: LD_INT 117
10550: PUSH
10551: LD_INT 118
10553: PUSH
10554: EMPTY
10555: LIST
10556: LIST
10557: LIST
10558: LIST
10559: LIST
10560: LIST
10561: PUSH
10562: EMPTY
10563: LIST
10564: LIST
10565: ST_TO_ADDR
10566: GO 13641
10568: LD_INT 2
10570: DOUBLE
10571: EQUAL
10572: IFTRUE 10576
10574: GO 10660
10576: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
10577: LD_ADDR_VAR 0 2
10581: PUSH
10582: LD_INT 2
10584: PUSH
10585: LD_INT 4
10587: PUSH
10588: LD_INT 11
10590: PUSH
10591: LD_INT 12
10593: PUSH
10594: LD_INT 15
10596: PUSH
10597: LD_INT 16
10599: PUSH
10600: LD_INT 22
10602: PUSH
10603: LD_INT 23
10605: PUSH
10606: LD_INT 26
10608: PUSH
10609: EMPTY
10610: LIST
10611: LIST
10612: LIST
10613: LIST
10614: LIST
10615: LIST
10616: LIST
10617: LIST
10618: LIST
10619: PUSH
10620: LD_INT 101
10622: PUSH
10623: LD_INT 102
10625: PUSH
10626: LD_INT 105
10628: PUSH
10629: LD_INT 106
10631: PUSH
10632: LD_INT 108
10634: PUSH
10635: LD_INT 116
10637: PUSH
10638: LD_INT 117
10640: PUSH
10641: LD_INT 118
10643: PUSH
10644: EMPTY
10645: LIST
10646: LIST
10647: LIST
10648: LIST
10649: LIST
10650: LIST
10651: LIST
10652: LIST
10653: PUSH
10654: EMPTY
10655: LIST
10656: LIST
10657: ST_TO_ADDR
10658: GO 13641
10660: LD_INT 3
10662: DOUBLE
10663: EQUAL
10664: IFTRUE 10668
10666: GO 10756
10668: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
10669: LD_ADDR_VAR 0 2
10673: PUSH
10674: LD_INT 2
10676: PUSH
10677: LD_INT 4
10679: PUSH
10680: LD_INT 5
10682: PUSH
10683: LD_INT 11
10685: PUSH
10686: LD_INT 12
10688: PUSH
10689: LD_INT 15
10691: PUSH
10692: LD_INT 16
10694: PUSH
10695: LD_INT 22
10697: PUSH
10698: LD_INT 26
10700: PUSH
10701: LD_INT 36
10703: PUSH
10704: EMPTY
10705: LIST
10706: LIST
10707: LIST
10708: LIST
10709: LIST
10710: LIST
10711: LIST
10712: LIST
10713: LIST
10714: LIST
10715: PUSH
10716: LD_INT 101
10718: PUSH
10719: LD_INT 102
10721: PUSH
10722: LD_INT 105
10724: PUSH
10725: LD_INT 106
10727: PUSH
10728: LD_INT 108
10730: PUSH
10731: LD_INT 116
10733: PUSH
10734: LD_INT 117
10736: PUSH
10737: LD_INT 118
10739: PUSH
10740: EMPTY
10741: LIST
10742: LIST
10743: LIST
10744: LIST
10745: LIST
10746: LIST
10747: LIST
10748: LIST
10749: PUSH
10750: EMPTY
10751: LIST
10752: LIST
10753: ST_TO_ADDR
10754: GO 13641
10756: LD_INT 4
10758: DOUBLE
10759: EQUAL
10760: IFTRUE 10764
10762: GO 10860
10764: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
10765: LD_ADDR_VAR 0 2
10769: PUSH
10770: LD_INT 2
10772: PUSH
10773: LD_INT 4
10775: PUSH
10776: LD_INT 5
10778: PUSH
10779: LD_INT 8
10781: PUSH
10782: LD_INT 11
10784: PUSH
10785: LD_INT 12
10787: PUSH
10788: LD_INT 15
10790: PUSH
10791: LD_INT 16
10793: PUSH
10794: LD_INT 22
10796: PUSH
10797: LD_INT 23
10799: PUSH
10800: LD_INT 26
10802: PUSH
10803: LD_INT 36
10805: PUSH
10806: EMPTY
10807: LIST
10808: LIST
10809: LIST
10810: LIST
10811: LIST
10812: LIST
10813: LIST
10814: LIST
10815: LIST
10816: LIST
10817: LIST
10818: LIST
10819: PUSH
10820: LD_INT 101
10822: PUSH
10823: LD_INT 102
10825: PUSH
10826: LD_INT 105
10828: PUSH
10829: LD_INT 106
10831: PUSH
10832: LD_INT 108
10834: PUSH
10835: LD_INT 116
10837: PUSH
10838: LD_INT 117
10840: PUSH
10841: LD_INT 118
10843: PUSH
10844: EMPTY
10845: LIST
10846: LIST
10847: LIST
10848: LIST
10849: LIST
10850: LIST
10851: LIST
10852: LIST
10853: PUSH
10854: EMPTY
10855: LIST
10856: LIST
10857: ST_TO_ADDR
10858: GO 13641
10860: LD_INT 5
10862: DOUBLE
10863: EQUAL
10864: IFTRUE 10868
10866: GO 10980
10868: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
10869: LD_ADDR_VAR 0 2
10873: PUSH
10874: LD_INT 2
10876: PUSH
10877: LD_INT 4
10879: PUSH
10880: LD_INT 5
10882: PUSH
10883: LD_INT 6
10885: PUSH
10886: LD_INT 8
10888: PUSH
10889: LD_INT 11
10891: PUSH
10892: LD_INT 12
10894: PUSH
10895: LD_INT 15
10897: PUSH
10898: LD_INT 16
10900: PUSH
10901: LD_INT 22
10903: PUSH
10904: LD_INT 23
10906: PUSH
10907: LD_INT 25
10909: PUSH
10910: LD_INT 26
10912: PUSH
10913: LD_INT 36
10915: PUSH
10916: EMPTY
10917: LIST
10918: LIST
10919: LIST
10920: LIST
10921: LIST
10922: LIST
10923: LIST
10924: LIST
10925: LIST
10926: LIST
10927: LIST
10928: LIST
10929: LIST
10930: LIST
10931: PUSH
10932: LD_INT 101
10934: PUSH
10935: LD_INT 102
10937: PUSH
10938: LD_INT 105
10940: PUSH
10941: LD_INT 106
10943: PUSH
10944: LD_INT 108
10946: PUSH
10947: LD_INT 109
10949: PUSH
10950: LD_INT 112
10952: PUSH
10953: LD_INT 116
10955: PUSH
10956: LD_INT 117
10958: PUSH
10959: LD_INT 118
10961: PUSH
10962: EMPTY
10963: LIST
10964: LIST
10965: LIST
10966: LIST
10967: LIST
10968: LIST
10969: LIST
10970: LIST
10971: LIST
10972: LIST
10973: PUSH
10974: EMPTY
10975: LIST
10976: LIST
10977: ST_TO_ADDR
10978: GO 13641
10980: LD_INT 6
10982: DOUBLE
10983: EQUAL
10984: IFTRUE 10988
10986: GO 11120
10988: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
10989: LD_ADDR_VAR 0 2
10993: PUSH
10994: LD_INT 2
10996: PUSH
10997: LD_INT 4
10999: PUSH
11000: LD_INT 5
11002: PUSH
11003: LD_INT 6
11005: PUSH
11006: LD_INT 8
11008: PUSH
11009: LD_INT 11
11011: PUSH
11012: LD_INT 12
11014: PUSH
11015: LD_INT 15
11017: PUSH
11018: LD_INT 16
11020: PUSH
11021: LD_INT 20
11023: PUSH
11024: LD_INT 21
11026: PUSH
11027: LD_INT 22
11029: PUSH
11030: LD_INT 23
11032: PUSH
11033: LD_INT 25
11035: PUSH
11036: LD_INT 26
11038: PUSH
11039: LD_INT 30
11041: PUSH
11042: LD_INT 31
11044: PUSH
11045: LD_INT 32
11047: PUSH
11048: LD_INT 36
11050: PUSH
11051: EMPTY
11052: LIST
11053: LIST
11054: LIST
11055: LIST
11056: LIST
11057: LIST
11058: LIST
11059: LIST
11060: LIST
11061: LIST
11062: LIST
11063: LIST
11064: LIST
11065: LIST
11066: LIST
11067: LIST
11068: LIST
11069: LIST
11070: LIST
11071: PUSH
11072: LD_INT 101
11074: PUSH
11075: LD_INT 102
11077: PUSH
11078: LD_INT 105
11080: PUSH
11081: LD_INT 106
11083: PUSH
11084: LD_INT 108
11086: PUSH
11087: LD_INT 109
11089: PUSH
11090: LD_INT 112
11092: PUSH
11093: LD_INT 116
11095: PUSH
11096: LD_INT 117
11098: PUSH
11099: LD_INT 118
11101: PUSH
11102: EMPTY
11103: LIST
11104: LIST
11105: LIST
11106: LIST
11107: LIST
11108: LIST
11109: LIST
11110: LIST
11111: LIST
11112: LIST
11113: PUSH
11114: EMPTY
11115: LIST
11116: LIST
11117: ST_TO_ADDR
11118: GO 13641
11120: LD_INT 7
11122: DOUBLE
11123: EQUAL
11124: IFTRUE 11128
11126: GO 11240
11128: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
11129: LD_ADDR_VAR 0 2
11133: PUSH
11134: LD_INT 2
11136: PUSH
11137: LD_INT 4
11139: PUSH
11140: LD_INT 5
11142: PUSH
11143: LD_INT 7
11145: PUSH
11146: LD_INT 11
11148: PUSH
11149: LD_INT 12
11151: PUSH
11152: LD_INT 15
11154: PUSH
11155: LD_INT 16
11157: PUSH
11158: LD_INT 20
11160: PUSH
11161: LD_INT 21
11163: PUSH
11164: LD_INT 22
11166: PUSH
11167: LD_INT 23
11169: PUSH
11170: LD_INT 25
11172: PUSH
11173: LD_INT 26
11175: PUSH
11176: EMPTY
11177: LIST
11178: LIST
11179: LIST
11180: LIST
11181: LIST
11182: LIST
11183: LIST
11184: LIST
11185: LIST
11186: LIST
11187: LIST
11188: LIST
11189: LIST
11190: LIST
11191: PUSH
11192: LD_INT 101
11194: PUSH
11195: LD_INT 102
11197: PUSH
11198: LD_INT 103
11200: PUSH
11201: LD_INT 105
11203: PUSH
11204: LD_INT 106
11206: PUSH
11207: LD_INT 108
11209: PUSH
11210: LD_INT 112
11212: PUSH
11213: LD_INT 116
11215: PUSH
11216: LD_INT 117
11218: PUSH
11219: LD_INT 118
11221: PUSH
11222: EMPTY
11223: LIST
11224: LIST
11225: LIST
11226: LIST
11227: LIST
11228: LIST
11229: LIST
11230: LIST
11231: LIST
11232: LIST
11233: PUSH
11234: EMPTY
11235: LIST
11236: LIST
11237: ST_TO_ADDR
11238: GO 13641
11240: LD_INT 8
11242: DOUBLE
11243: EQUAL
11244: IFTRUE 11248
11246: GO 11388
11248: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
11249: LD_ADDR_VAR 0 2
11253: PUSH
11254: LD_INT 2
11256: PUSH
11257: LD_INT 4
11259: PUSH
11260: LD_INT 5
11262: PUSH
11263: LD_INT 6
11265: PUSH
11266: LD_INT 7
11268: PUSH
11269: LD_INT 8
11271: PUSH
11272: LD_INT 11
11274: PUSH
11275: LD_INT 12
11277: PUSH
11278: LD_INT 15
11280: PUSH
11281: LD_INT 16
11283: PUSH
11284: LD_INT 20
11286: PUSH
11287: LD_INT 21
11289: PUSH
11290: LD_INT 22
11292: PUSH
11293: LD_INT 23
11295: PUSH
11296: LD_INT 25
11298: PUSH
11299: LD_INT 26
11301: PUSH
11302: LD_INT 30
11304: PUSH
11305: LD_INT 31
11307: PUSH
11308: LD_INT 32
11310: PUSH
11311: LD_INT 36
11313: PUSH
11314: EMPTY
11315: LIST
11316: LIST
11317: LIST
11318: LIST
11319: LIST
11320: LIST
11321: LIST
11322: LIST
11323: LIST
11324: LIST
11325: LIST
11326: LIST
11327: LIST
11328: LIST
11329: LIST
11330: LIST
11331: LIST
11332: LIST
11333: LIST
11334: LIST
11335: PUSH
11336: LD_INT 101
11338: PUSH
11339: LD_INT 102
11341: PUSH
11342: LD_INT 103
11344: PUSH
11345: LD_INT 105
11347: PUSH
11348: LD_INT 106
11350: PUSH
11351: LD_INT 108
11353: PUSH
11354: LD_INT 109
11356: PUSH
11357: LD_INT 112
11359: PUSH
11360: LD_INT 116
11362: PUSH
11363: LD_INT 117
11365: PUSH
11366: LD_INT 118
11368: PUSH
11369: EMPTY
11370: LIST
11371: LIST
11372: LIST
11373: LIST
11374: LIST
11375: LIST
11376: LIST
11377: LIST
11378: LIST
11379: LIST
11380: LIST
11381: PUSH
11382: EMPTY
11383: LIST
11384: LIST
11385: ST_TO_ADDR
11386: GO 13641
11388: LD_INT 9
11390: DOUBLE
11391: EQUAL
11392: IFTRUE 11396
11394: GO 11544
11396: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
11397: LD_ADDR_VAR 0 2
11401: PUSH
11402: LD_INT 2
11404: PUSH
11405: LD_INT 4
11407: PUSH
11408: LD_INT 5
11410: PUSH
11411: LD_INT 6
11413: PUSH
11414: LD_INT 7
11416: PUSH
11417: LD_INT 8
11419: PUSH
11420: LD_INT 11
11422: PUSH
11423: LD_INT 12
11425: PUSH
11426: LD_INT 15
11428: PUSH
11429: LD_INT 16
11431: PUSH
11432: LD_INT 20
11434: PUSH
11435: LD_INT 21
11437: PUSH
11438: LD_INT 22
11440: PUSH
11441: LD_INT 23
11443: PUSH
11444: LD_INT 25
11446: PUSH
11447: LD_INT 26
11449: PUSH
11450: LD_INT 28
11452: PUSH
11453: LD_INT 30
11455: PUSH
11456: LD_INT 31
11458: PUSH
11459: LD_INT 32
11461: PUSH
11462: LD_INT 36
11464: PUSH
11465: EMPTY
11466: LIST
11467: LIST
11468: LIST
11469: LIST
11470: LIST
11471: LIST
11472: LIST
11473: LIST
11474: LIST
11475: LIST
11476: LIST
11477: LIST
11478: LIST
11479: LIST
11480: LIST
11481: LIST
11482: LIST
11483: LIST
11484: LIST
11485: LIST
11486: LIST
11487: PUSH
11488: LD_INT 101
11490: PUSH
11491: LD_INT 102
11493: PUSH
11494: LD_INT 103
11496: PUSH
11497: LD_INT 105
11499: PUSH
11500: LD_INT 106
11502: PUSH
11503: LD_INT 108
11505: PUSH
11506: LD_INT 109
11508: PUSH
11509: LD_INT 112
11511: PUSH
11512: LD_INT 114
11514: PUSH
11515: LD_INT 116
11517: PUSH
11518: LD_INT 117
11520: PUSH
11521: LD_INT 118
11523: PUSH
11524: EMPTY
11525: LIST
11526: LIST
11527: LIST
11528: LIST
11529: LIST
11530: LIST
11531: LIST
11532: LIST
11533: LIST
11534: LIST
11535: LIST
11536: LIST
11537: PUSH
11538: EMPTY
11539: LIST
11540: LIST
11541: ST_TO_ADDR
11542: GO 13641
11544: LD_INT 10
11546: DOUBLE
11547: EQUAL
11548: IFTRUE 11552
11550: GO 11748
11552: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
11553: LD_ADDR_VAR 0 2
11557: PUSH
11558: LD_INT 2
11560: PUSH
11561: LD_INT 4
11563: PUSH
11564: LD_INT 5
11566: PUSH
11567: LD_INT 6
11569: PUSH
11570: LD_INT 7
11572: PUSH
11573: LD_INT 8
11575: PUSH
11576: LD_INT 9
11578: PUSH
11579: LD_INT 10
11581: PUSH
11582: LD_INT 11
11584: PUSH
11585: LD_INT 12
11587: PUSH
11588: LD_INT 13
11590: PUSH
11591: LD_INT 14
11593: PUSH
11594: LD_INT 15
11596: PUSH
11597: LD_INT 16
11599: PUSH
11600: LD_INT 17
11602: PUSH
11603: LD_INT 18
11605: PUSH
11606: LD_INT 19
11608: PUSH
11609: LD_INT 20
11611: PUSH
11612: LD_INT 21
11614: PUSH
11615: LD_INT 22
11617: PUSH
11618: LD_INT 23
11620: PUSH
11621: LD_INT 24
11623: PUSH
11624: LD_INT 25
11626: PUSH
11627: LD_INT 26
11629: PUSH
11630: LD_INT 28
11632: PUSH
11633: LD_INT 30
11635: PUSH
11636: LD_INT 31
11638: PUSH
11639: LD_INT 32
11641: PUSH
11642: LD_INT 36
11644: PUSH
11645: EMPTY
11646: LIST
11647: LIST
11648: LIST
11649: LIST
11650: LIST
11651: LIST
11652: LIST
11653: LIST
11654: LIST
11655: LIST
11656: LIST
11657: LIST
11658: LIST
11659: LIST
11660: LIST
11661: LIST
11662: LIST
11663: LIST
11664: LIST
11665: LIST
11666: LIST
11667: LIST
11668: LIST
11669: LIST
11670: LIST
11671: LIST
11672: LIST
11673: LIST
11674: LIST
11675: PUSH
11676: LD_INT 101
11678: PUSH
11679: LD_INT 102
11681: PUSH
11682: LD_INT 103
11684: PUSH
11685: LD_INT 104
11687: PUSH
11688: LD_INT 105
11690: PUSH
11691: LD_INT 106
11693: PUSH
11694: LD_INT 107
11696: PUSH
11697: LD_INT 108
11699: PUSH
11700: LD_INT 109
11702: PUSH
11703: LD_INT 110
11705: PUSH
11706: LD_INT 111
11708: PUSH
11709: LD_INT 112
11711: PUSH
11712: LD_INT 114
11714: PUSH
11715: LD_INT 116
11717: PUSH
11718: LD_INT 117
11720: PUSH
11721: LD_INT 118
11723: PUSH
11724: EMPTY
11725: LIST
11726: LIST
11727: LIST
11728: LIST
11729: LIST
11730: LIST
11731: LIST
11732: LIST
11733: LIST
11734: LIST
11735: LIST
11736: LIST
11737: LIST
11738: LIST
11739: LIST
11740: LIST
11741: PUSH
11742: EMPTY
11743: LIST
11744: LIST
11745: ST_TO_ADDR
11746: GO 13641
11748: LD_INT 11
11750: DOUBLE
11751: EQUAL
11752: IFTRUE 11756
11754: GO 11960
11756: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
11757: LD_ADDR_VAR 0 2
11761: PUSH
11762: LD_INT 2
11764: PUSH
11765: LD_INT 3
11767: PUSH
11768: LD_INT 4
11770: PUSH
11771: LD_INT 5
11773: PUSH
11774: LD_INT 6
11776: PUSH
11777: LD_INT 7
11779: PUSH
11780: LD_INT 8
11782: PUSH
11783: LD_INT 9
11785: PUSH
11786: LD_INT 10
11788: PUSH
11789: LD_INT 11
11791: PUSH
11792: LD_INT 12
11794: PUSH
11795: LD_INT 13
11797: PUSH
11798: LD_INT 14
11800: PUSH
11801: LD_INT 15
11803: PUSH
11804: LD_INT 16
11806: PUSH
11807: LD_INT 17
11809: PUSH
11810: LD_INT 18
11812: PUSH
11813: LD_INT 19
11815: PUSH
11816: LD_INT 20
11818: PUSH
11819: LD_INT 21
11821: PUSH
11822: LD_INT 22
11824: PUSH
11825: LD_INT 23
11827: PUSH
11828: LD_INT 24
11830: PUSH
11831: LD_INT 25
11833: PUSH
11834: LD_INT 26
11836: PUSH
11837: LD_INT 28
11839: PUSH
11840: LD_INT 30
11842: PUSH
11843: LD_INT 31
11845: PUSH
11846: LD_INT 32
11848: PUSH
11849: LD_INT 34
11851: PUSH
11852: LD_INT 36
11854: PUSH
11855: EMPTY
11856: LIST
11857: LIST
11858: LIST
11859: LIST
11860: LIST
11861: LIST
11862: LIST
11863: LIST
11864: LIST
11865: LIST
11866: LIST
11867: LIST
11868: LIST
11869: LIST
11870: LIST
11871: LIST
11872: LIST
11873: LIST
11874: LIST
11875: LIST
11876: LIST
11877: LIST
11878: LIST
11879: LIST
11880: LIST
11881: LIST
11882: LIST
11883: LIST
11884: LIST
11885: LIST
11886: LIST
11887: PUSH
11888: LD_INT 101
11890: PUSH
11891: LD_INT 102
11893: PUSH
11894: LD_INT 103
11896: PUSH
11897: LD_INT 104
11899: PUSH
11900: LD_INT 105
11902: PUSH
11903: LD_INT 106
11905: PUSH
11906: LD_INT 107
11908: PUSH
11909: LD_INT 108
11911: PUSH
11912: LD_INT 109
11914: PUSH
11915: LD_INT 110
11917: PUSH
11918: LD_INT 111
11920: PUSH
11921: LD_INT 112
11923: PUSH
11924: LD_INT 114
11926: PUSH
11927: LD_INT 116
11929: PUSH
11930: LD_INT 117
11932: PUSH
11933: LD_INT 118
11935: PUSH
11936: EMPTY
11937: LIST
11938: LIST
11939: LIST
11940: LIST
11941: LIST
11942: LIST
11943: LIST
11944: LIST
11945: LIST
11946: LIST
11947: LIST
11948: LIST
11949: LIST
11950: LIST
11951: LIST
11952: LIST
11953: PUSH
11954: EMPTY
11955: LIST
11956: LIST
11957: ST_TO_ADDR
11958: GO 13641
11960: LD_INT 12
11962: DOUBLE
11963: EQUAL
11964: IFTRUE 11968
11966: GO 12188
11968: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
11969: LD_ADDR_VAR 0 2
11973: PUSH
11974: LD_INT 1
11976: PUSH
11977: LD_INT 2
11979: PUSH
11980: LD_INT 3
11982: PUSH
11983: LD_INT 4
11985: PUSH
11986: LD_INT 5
11988: PUSH
11989: LD_INT 6
11991: PUSH
11992: LD_INT 7
11994: PUSH
11995: LD_INT 8
11997: PUSH
11998: LD_INT 9
12000: PUSH
12001: LD_INT 10
12003: PUSH
12004: LD_INT 11
12006: PUSH
12007: LD_INT 12
12009: PUSH
12010: LD_INT 13
12012: PUSH
12013: LD_INT 14
12015: PUSH
12016: LD_INT 15
12018: PUSH
12019: LD_INT 16
12021: PUSH
12022: LD_INT 17
12024: PUSH
12025: LD_INT 18
12027: PUSH
12028: LD_INT 19
12030: PUSH
12031: LD_INT 20
12033: PUSH
12034: LD_INT 21
12036: PUSH
12037: LD_INT 22
12039: PUSH
12040: LD_INT 23
12042: PUSH
12043: LD_INT 24
12045: PUSH
12046: LD_INT 25
12048: PUSH
12049: LD_INT 26
12051: PUSH
12052: LD_INT 27
12054: PUSH
12055: LD_INT 28
12057: PUSH
12058: LD_INT 30
12060: PUSH
12061: LD_INT 31
12063: PUSH
12064: LD_INT 32
12066: PUSH
12067: LD_INT 33
12069: PUSH
12070: LD_INT 34
12072: PUSH
12073: LD_INT 36
12075: PUSH
12076: EMPTY
12077: LIST
12078: LIST
12079: LIST
12080: LIST
12081: LIST
12082: LIST
12083: LIST
12084: LIST
12085: LIST
12086: LIST
12087: LIST
12088: LIST
12089: LIST
12090: LIST
12091: LIST
12092: LIST
12093: LIST
12094: LIST
12095: LIST
12096: LIST
12097: LIST
12098: LIST
12099: LIST
12100: LIST
12101: LIST
12102: LIST
12103: LIST
12104: LIST
12105: LIST
12106: LIST
12107: LIST
12108: LIST
12109: LIST
12110: LIST
12111: PUSH
12112: LD_INT 101
12114: PUSH
12115: LD_INT 102
12117: PUSH
12118: LD_INT 103
12120: PUSH
12121: LD_INT 104
12123: PUSH
12124: LD_INT 105
12126: PUSH
12127: LD_INT 106
12129: PUSH
12130: LD_INT 107
12132: PUSH
12133: LD_INT 108
12135: PUSH
12136: LD_INT 109
12138: PUSH
12139: LD_INT 110
12141: PUSH
12142: LD_INT 111
12144: PUSH
12145: LD_INT 112
12147: PUSH
12148: LD_INT 113
12150: PUSH
12151: LD_INT 114
12153: PUSH
12154: LD_INT 116
12156: PUSH
12157: LD_INT 117
12159: PUSH
12160: LD_INT 118
12162: PUSH
12163: EMPTY
12164: LIST
12165: LIST
12166: LIST
12167: LIST
12168: LIST
12169: LIST
12170: LIST
12171: LIST
12172: LIST
12173: LIST
12174: LIST
12175: LIST
12176: LIST
12177: LIST
12178: LIST
12179: LIST
12180: LIST
12181: PUSH
12182: EMPTY
12183: LIST
12184: LIST
12185: ST_TO_ADDR
12186: GO 13641
12188: LD_INT 13
12190: DOUBLE
12191: EQUAL
12192: IFTRUE 12196
12194: GO 12404
12196: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
12197: LD_ADDR_VAR 0 2
12201: PUSH
12202: LD_INT 1
12204: PUSH
12205: LD_INT 2
12207: PUSH
12208: LD_INT 3
12210: PUSH
12211: LD_INT 4
12213: PUSH
12214: LD_INT 5
12216: PUSH
12217: LD_INT 8
12219: PUSH
12220: LD_INT 9
12222: PUSH
12223: LD_INT 10
12225: PUSH
12226: LD_INT 11
12228: PUSH
12229: LD_INT 12
12231: PUSH
12232: LD_INT 14
12234: PUSH
12235: LD_INT 15
12237: PUSH
12238: LD_INT 16
12240: PUSH
12241: LD_INT 17
12243: PUSH
12244: LD_INT 18
12246: PUSH
12247: LD_INT 19
12249: PUSH
12250: LD_INT 20
12252: PUSH
12253: LD_INT 21
12255: PUSH
12256: LD_INT 22
12258: PUSH
12259: LD_INT 23
12261: PUSH
12262: LD_INT 24
12264: PUSH
12265: LD_INT 25
12267: PUSH
12268: LD_INT 26
12270: PUSH
12271: LD_INT 27
12273: PUSH
12274: LD_INT 28
12276: PUSH
12277: LD_INT 30
12279: PUSH
12280: LD_INT 31
12282: PUSH
12283: LD_INT 32
12285: PUSH
12286: LD_INT 33
12288: PUSH
12289: LD_INT 34
12291: PUSH
12292: LD_INT 36
12294: PUSH
12295: EMPTY
12296: LIST
12297: LIST
12298: LIST
12299: LIST
12300: LIST
12301: LIST
12302: LIST
12303: LIST
12304: LIST
12305: LIST
12306: LIST
12307: LIST
12308: LIST
12309: LIST
12310: LIST
12311: LIST
12312: LIST
12313: LIST
12314: LIST
12315: LIST
12316: LIST
12317: LIST
12318: LIST
12319: LIST
12320: LIST
12321: LIST
12322: LIST
12323: LIST
12324: LIST
12325: LIST
12326: LIST
12327: PUSH
12328: LD_INT 101
12330: PUSH
12331: LD_INT 102
12333: PUSH
12334: LD_INT 103
12336: PUSH
12337: LD_INT 104
12339: PUSH
12340: LD_INT 105
12342: PUSH
12343: LD_INT 106
12345: PUSH
12346: LD_INT 107
12348: PUSH
12349: LD_INT 108
12351: PUSH
12352: LD_INT 109
12354: PUSH
12355: LD_INT 110
12357: PUSH
12358: LD_INT 111
12360: PUSH
12361: LD_INT 112
12363: PUSH
12364: LD_INT 113
12366: PUSH
12367: LD_INT 114
12369: PUSH
12370: LD_INT 116
12372: PUSH
12373: LD_INT 117
12375: PUSH
12376: LD_INT 118
12378: PUSH
12379: EMPTY
12380: LIST
12381: LIST
12382: LIST
12383: LIST
12384: LIST
12385: LIST
12386: LIST
12387: LIST
12388: LIST
12389: LIST
12390: LIST
12391: LIST
12392: LIST
12393: LIST
12394: LIST
12395: LIST
12396: LIST
12397: PUSH
12398: EMPTY
12399: LIST
12400: LIST
12401: ST_TO_ADDR
12402: GO 13641
12404: LD_INT 14
12406: DOUBLE
12407: EQUAL
12408: IFTRUE 12412
12410: GO 12636
12412: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
12413: LD_ADDR_VAR 0 2
12417: PUSH
12418: LD_INT 1
12420: PUSH
12421: LD_INT 2
12423: PUSH
12424: LD_INT 3
12426: PUSH
12427: LD_INT 4
12429: PUSH
12430: LD_INT 5
12432: PUSH
12433: LD_INT 6
12435: PUSH
12436: LD_INT 7
12438: PUSH
12439: LD_INT 8
12441: PUSH
12442: LD_INT 9
12444: PUSH
12445: LD_INT 10
12447: PUSH
12448: LD_INT 11
12450: PUSH
12451: LD_INT 12
12453: PUSH
12454: LD_INT 13
12456: PUSH
12457: LD_INT 14
12459: PUSH
12460: LD_INT 15
12462: PUSH
12463: LD_INT 16
12465: PUSH
12466: LD_INT 17
12468: PUSH
12469: LD_INT 18
12471: PUSH
12472: LD_INT 19
12474: PUSH
12475: LD_INT 20
12477: PUSH
12478: LD_INT 21
12480: PUSH
12481: LD_INT 22
12483: PUSH
12484: LD_INT 23
12486: PUSH
12487: LD_INT 24
12489: PUSH
12490: LD_INT 25
12492: PUSH
12493: LD_INT 26
12495: PUSH
12496: LD_INT 27
12498: PUSH
12499: LD_INT 28
12501: PUSH
12502: LD_INT 29
12504: PUSH
12505: LD_INT 30
12507: PUSH
12508: LD_INT 31
12510: PUSH
12511: LD_INT 32
12513: PUSH
12514: LD_INT 33
12516: PUSH
12517: LD_INT 34
12519: PUSH
12520: LD_INT 36
12522: PUSH
12523: EMPTY
12524: LIST
12525: LIST
12526: LIST
12527: LIST
12528: LIST
12529: LIST
12530: LIST
12531: LIST
12532: LIST
12533: LIST
12534: LIST
12535: LIST
12536: LIST
12537: LIST
12538: LIST
12539: LIST
12540: LIST
12541: LIST
12542: LIST
12543: LIST
12544: LIST
12545: LIST
12546: LIST
12547: LIST
12548: LIST
12549: LIST
12550: LIST
12551: LIST
12552: LIST
12553: LIST
12554: LIST
12555: LIST
12556: LIST
12557: LIST
12558: LIST
12559: PUSH
12560: LD_INT 101
12562: PUSH
12563: LD_INT 102
12565: PUSH
12566: LD_INT 103
12568: PUSH
12569: LD_INT 104
12571: PUSH
12572: LD_INT 105
12574: PUSH
12575: LD_INT 106
12577: PUSH
12578: LD_INT 107
12580: PUSH
12581: LD_INT 108
12583: PUSH
12584: LD_INT 109
12586: PUSH
12587: LD_INT 110
12589: PUSH
12590: LD_INT 111
12592: PUSH
12593: LD_INT 112
12595: PUSH
12596: LD_INT 113
12598: PUSH
12599: LD_INT 114
12601: PUSH
12602: LD_INT 116
12604: PUSH
12605: LD_INT 117
12607: PUSH
12608: LD_INT 118
12610: PUSH
12611: EMPTY
12612: LIST
12613: LIST
12614: LIST
12615: LIST
12616: LIST
12617: LIST
12618: LIST
12619: LIST
12620: LIST
12621: LIST
12622: LIST
12623: LIST
12624: LIST
12625: LIST
12626: LIST
12627: LIST
12628: LIST
12629: PUSH
12630: EMPTY
12631: LIST
12632: LIST
12633: ST_TO_ADDR
12634: GO 13641
12636: LD_INT 15
12638: DOUBLE
12639: EQUAL
12640: IFTRUE 12644
12642: GO 12868
12644: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
12645: LD_ADDR_VAR 0 2
12649: PUSH
12650: LD_INT 1
12652: PUSH
12653: LD_INT 2
12655: PUSH
12656: LD_INT 3
12658: PUSH
12659: LD_INT 4
12661: PUSH
12662: LD_INT 5
12664: PUSH
12665: LD_INT 6
12667: PUSH
12668: LD_INT 7
12670: PUSH
12671: LD_INT 8
12673: PUSH
12674: LD_INT 9
12676: PUSH
12677: LD_INT 10
12679: PUSH
12680: LD_INT 11
12682: PUSH
12683: LD_INT 12
12685: PUSH
12686: LD_INT 13
12688: PUSH
12689: LD_INT 14
12691: PUSH
12692: LD_INT 15
12694: PUSH
12695: LD_INT 16
12697: PUSH
12698: LD_INT 17
12700: PUSH
12701: LD_INT 18
12703: PUSH
12704: LD_INT 19
12706: PUSH
12707: LD_INT 20
12709: PUSH
12710: LD_INT 21
12712: PUSH
12713: LD_INT 22
12715: PUSH
12716: LD_INT 23
12718: PUSH
12719: LD_INT 24
12721: PUSH
12722: LD_INT 25
12724: PUSH
12725: LD_INT 26
12727: PUSH
12728: LD_INT 27
12730: PUSH
12731: LD_INT 28
12733: PUSH
12734: LD_INT 29
12736: PUSH
12737: LD_INT 30
12739: PUSH
12740: LD_INT 31
12742: PUSH
12743: LD_INT 32
12745: PUSH
12746: LD_INT 33
12748: PUSH
12749: LD_INT 34
12751: PUSH
12752: LD_INT 36
12754: PUSH
12755: EMPTY
12756: LIST
12757: LIST
12758: LIST
12759: LIST
12760: LIST
12761: LIST
12762: LIST
12763: LIST
12764: LIST
12765: LIST
12766: LIST
12767: LIST
12768: LIST
12769: LIST
12770: LIST
12771: LIST
12772: LIST
12773: LIST
12774: LIST
12775: LIST
12776: LIST
12777: LIST
12778: LIST
12779: LIST
12780: LIST
12781: LIST
12782: LIST
12783: LIST
12784: LIST
12785: LIST
12786: LIST
12787: LIST
12788: LIST
12789: LIST
12790: LIST
12791: PUSH
12792: LD_INT 101
12794: PUSH
12795: LD_INT 102
12797: PUSH
12798: LD_INT 103
12800: PUSH
12801: LD_INT 104
12803: PUSH
12804: LD_INT 105
12806: PUSH
12807: LD_INT 106
12809: PUSH
12810: LD_INT 107
12812: PUSH
12813: LD_INT 108
12815: PUSH
12816: LD_INT 109
12818: PUSH
12819: LD_INT 110
12821: PUSH
12822: LD_INT 111
12824: PUSH
12825: LD_INT 112
12827: PUSH
12828: LD_INT 113
12830: PUSH
12831: LD_INT 114
12833: PUSH
12834: LD_INT 116
12836: PUSH
12837: LD_INT 117
12839: PUSH
12840: LD_INT 118
12842: PUSH
12843: EMPTY
12844: LIST
12845: LIST
12846: LIST
12847: LIST
12848: LIST
12849: LIST
12850: LIST
12851: LIST
12852: LIST
12853: LIST
12854: LIST
12855: LIST
12856: LIST
12857: LIST
12858: LIST
12859: LIST
12860: LIST
12861: PUSH
12862: EMPTY
12863: LIST
12864: LIST
12865: ST_TO_ADDR
12866: GO 13641
12868: LD_INT 16
12870: DOUBLE
12871: EQUAL
12872: IFTRUE 12876
12874: GO 13012
12876: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
12877: LD_ADDR_VAR 0 2
12881: PUSH
12882: LD_INT 2
12884: PUSH
12885: LD_INT 4
12887: PUSH
12888: LD_INT 5
12890: PUSH
12891: LD_INT 7
12893: PUSH
12894: LD_INT 11
12896: PUSH
12897: LD_INT 12
12899: PUSH
12900: LD_INT 15
12902: PUSH
12903: LD_INT 16
12905: PUSH
12906: LD_INT 20
12908: PUSH
12909: LD_INT 21
12911: PUSH
12912: LD_INT 22
12914: PUSH
12915: LD_INT 23
12917: PUSH
12918: LD_INT 25
12920: PUSH
12921: LD_INT 26
12923: PUSH
12924: LD_INT 30
12926: PUSH
12927: LD_INT 31
12929: PUSH
12930: LD_INT 32
12932: PUSH
12933: LD_INT 33
12935: PUSH
12936: LD_INT 34
12938: PUSH
12939: EMPTY
12940: LIST
12941: LIST
12942: LIST
12943: LIST
12944: LIST
12945: LIST
12946: LIST
12947: LIST
12948: LIST
12949: LIST
12950: LIST
12951: LIST
12952: LIST
12953: LIST
12954: LIST
12955: LIST
12956: LIST
12957: LIST
12958: LIST
12959: PUSH
12960: LD_INT 101
12962: PUSH
12963: LD_INT 102
12965: PUSH
12966: LD_INT 103
12968: PUSH
12969: LD_INT 106
12971: PUSH
12972: LD_INT 108
12974: PUSH
12975: LD_INT 112
12977: PUSH
12978: LD_INT 113
12980: PUSH
12981: LD_INT 114
12983: PUSH
12984: LD_INT 116
12986: PUSH
12987: LD_INT 117
12989: PUSH
12990: LD_INT 118
12992: PUSH
12993: EMPTY
12994: LIST
12995: LIST
12996: LIST
12997: LIST
12998: LIST
12999: LIST
13000: LIST
13001: LIST
13002: LIST
13003: LIST
13004: LIST
13005: PUSH
13006: EMPTY
13007: LIST
13008: LIST
13009: ST_TO_ADDR
13010: GO 13641
13012: LD_INT 17
13014: DOUBLE
13015: EQUAL
13016: IFTRUE 13020
13018: GO 13244
13020: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
13021: LD_ADDR_VAR 0 2
13025: PUSH
13026: LD_INT 1
13028: PUSH
13029: LD_INT 2
13031: PUSH
13032: LD_INT 3
13034: PUSH
13035: LD_INT 4
13037: PUSH
13038: LD_INT 5
13040: PUSH
13041: LD_INT 6
13043: PUSH
13044: LD_INT 7
13046: PUSH
13047: LD_INT 8
13049: PUSH
13050: LD_INT 9
13052: PUSH
13053: LD_INT 10
13055: PUSH
13056: LD_INT 11
13058: PUSH
13059: LD_INT 12
13061: PUSH
13062: LD_INT 13
13064: PUSH
13065: LD_INT 14
13067: PUSH
13068: LD_INT 15
13070: PUSH
13071: LD_INT 16
13073: PUSH
13074: LD_INT 17
13076: PUSH
13077: LD_INT 18
13079: PUSH
13080: LD_INT 19
13082: PUSH
13083: LD_INT 20
13085: PUSH
13086: LD_INT 21
13088: PUSH
13089: LD_INT 22
13091: PUSH
13092: LD_INT 23
13094: PUSH
13095: LD_INT 24
13097: PUSH
13098: LD_INT 25
13100: PUSH
13101: LD_INT 26
13103: PUSH
13104: LD_INT 27
13106: PUSH
13107: LD_INT 28
13109: PUSH
13110: LD_INT 29
13112: PUSH
13113: LD_INT 30
13115: PUSH
13116: LD_INT 31
13118: PUSH
13119: LD_INT 32
13121: PUSH
13122: LD_INT 33
13124: PUSH
13125: LD_INT 34
13127: PUSH
13128: LD_INT 36
13130: PUSH
13131: EMPTY
13132: LIST
13133: LIST
13134: LIST
13135: LIST
13136: LIST
13137: LIST
13138: LIST
13139: LIST
13140: LIST
13141: LIST
13142: LIST
13143: LIST
13144: LIST
13145: LIST
13146: LIST
13147: LIST
13148: LIST
13149: LIST
13150: LIST
13151: LIST
13152: LIST
13153: LIST
13154: LIST
13155: LIST
13156: LIST
13157: LIST
13158: LIST
13159: LIST
13160: LIST
13161: LIST
13162: LIST
13163: LIST
13164: LIST
13165: LIST
13166: LIST
13167: PUSH
13168: LD_INT 101
13170: PUSH
13171: LD_INT 102
13173: PUSH
13174: LD_INT 103
13176: PUSH
13177: LD_INT 104
13179: PUSH
13180: LD_INT 105
13182: PUSH
13183: LD_INT 106
13185: PUSH
13186: LD_INT 107
13188: PUSH
13189: LD_INT 108
13191: PUSH
13192: LD_INT 109
13194: PUSH
13195: LD_INT 110
13197: PUSH
13198: LD_INT 111
13200: PUSH
13201: LD_INT 112
13203: PUSH
13204: LD_INT 113
13206: PUSH
13207: LD_INT 114
13209: PUSH
13210: LD_INT 116
13212: PUSH
13213: LD_INT 117
13215: PUSH
13216: LD_INT 118
13218: PUSH
13219: EMPTY
13220: LIST
13221: LIST
13222: LIST
13223: LIST
13224: LIST
13225: LIST
13226: LIST
13227: LIST
13228: LIST
13229: LIST
13230: LIST
13231: LIST
13232: LIST
13233: LIST
13234: LIST
13235: LIST
13236: LIST
13237: PUSH
13238: EMPTY
13239: LIST
13240: LIST
13241: ST_TO_ADDR
13242: GO 13641
13244: LD_INT 18
13246: DOUBLE
13247: EQUAL
13248: IFTRUE 13252
13250: GO 13400
13252: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
13253: LD_ADDR_VAR 0 2
13257: PUSH
13258: LD_INT 2
13260: PUSH
13261: LD_INT 4
13263: PUSH
13264: LD_INT 5
13266: PUSH
13267: LD_INT 7
13269: PUSH
13270: LD_INT 11
13272: PUSH
13273: LD_INT 12
13275: PUSH
13276: LD_INT 15
13278: PUSH
13279: LD_INT 16
13281: PUSH
13282: LD_INT 20
13284: PUSH
13285: LD_INT 21
13287: PUSH
13288: LD_INT 22
13290: PUSH
13291: LD_INT 23
13293: PUSH
13294: LD_INT 25
13296: PUSH
13297: LD_INT 26
13299: PUSH
13300: LD_INT 30
13302: PUSH
13303: LD_INT 31
13305: PUSH
13306: LD_INT 32
13308: PUSH
13309: LD_INT 33
13311: PUSH
13312: LD_INT 34
13314: PUSH
13315: LD_INT 35
13317: PUSH
13318: LD_INT 36
13320: PUSH
13321: EMPTY
13322: LIST
13323: LIST
13324: LIST
13325: LIST
13326: LIST
13327: LIST
13328: LIST
13329: LIST
13330: LIST
13331: LIST
13332: LIST
13333: LIST
13334: LIST
13335: LIST
13336: LIST
13337: LIST
13338: LIST
13339: LIST
13340: LIST
13341: LIST
13342: LIST
13343: PUSH
13344: LD_INT 101
13346: PUSH
13347: LD_INT 102
13349: PUSH
13350: LD_INT 103
13352: PUSH
13353: LD_INT 106
13355: PUSH
13356: LD_INT 108
13358: PUSH
13359: LD_INT 112
13361: PUSH
13362: LD_INT 113
13364: PUSH
13365: LD_INT 114
13367: PUSH
13368: LD_INT 115
13370: PUSH
13371: LD_INT 116
13373: PUSH
13374: LD_INT 117
13376: PUSH
13377: LD_INT 118
13379: PUSH
13380: EMPTY
13381: LIST
13382: LIST
13383: LIST
13384: LIST
13385: LIST
13386: LIST
13387: LIST
13388: LIST
13389: LIST
13390: LIST
13391: LIST
13392: LIST
13393: PUSH
13394: EMPTY
13395: LIST
13396: LIST
13397: ST_TO_ADDR
13398: GO 13641
13400: LD_INT 19
13402: DOUBLE
13403: EQUAL
13404: IFTRUE 13408
13406: GO 13640
13408: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
13409: LD_ADDR_VAR 0 2
13413: PUSH
13414: LD_INT 1
13416: PUSH
13417: LD_INT 2
13419: PUSH
13420: LD_INT 3
13422: PUSH
13423: LD_INT 4
13425: PUSH
13426: LD_INT 5
13428: PUSH
13429: LD_INT 6
13431: PUSH
13432: LD_INT 7
13434: PUSH
13435: LD_INT 8
13437: PUSH
13438: LD_INT 9
13440: PUSH
13441: LD_INT 10
13443: PUSH
13444: LD_INT 11
13446: PUSH
13447: LD_INT 12
13449: PUSH
13450: LD_INT 13
13452: PUSH
13453: LD_INT 14
13455: PUSH
13456: LD_INT 15
13458: PUSH
13459: LD_INT 16
13461: PUSH
13462: LD_INT 17
13464: PUSH
13465: LD_INT 18
13467: PUSH
13468: LD_INT 19
13470: PUSH
13471: LD_INT 20
13473: PUSH
13474: LD_INT 21
13476: PUSH
13477: LD_INT 22
13479: PUSH
13480: LD_INT 23
13482: PUSH
13483: LD_INT 24
13485: PUSH
13486: LD_INT 25
13488: PUSH
13489: LD_INT 26
13491: PUSH
13492: LD_INT 27
13494: PUSH
13495: LD_INT 28
13497: PUSH
13498: LD_INT 29
13500: PUSH
13501: LD_INT 30
13503: PUSH
13504: LD_INT 31
13506: PUSH
13507: LD_INT 32
13509: PUSH
13510: LD_INT 33
13512: PUSH
13513: LD_INT 34
13515: PUSH
13516: LD_INT 35
13518: PUSH
13519: LD_INT 36
13521: PUSH
13522: EMPTY
13523: LIST
13524: LIST
13525: LIST
13526: LIST
13527: LIST
13528: LIST
13529: LIST
13530: LIST
13531: LIST
13532: LIST
13533: LIST
13534: LIST
13535: LIST
13536: LIST
13537: LIST
13538: LIST
13539: LIST
13540: LIST
13541: LIST
13542: LIST
13543: LIST
13544: LIST
13545: LIST
13546: LIST
13547: LIST
13548: LIST
13549: LIST
13550: LIST
13551: LIST
13552: LIST
13553: LIST
13554: LIST
13555: LIST
13556: LIST
13557: LIST
13558: LIST
13559: PUSH
13560: LD_INT 101
13562: PUSH
13563: LD_INT 102
13565: PUSH
13566: LD_INT 103
13568: PUSH
13569: LD_INT 104
13571: PUSH
13572: LD_INT 105
13574: PUSH
13575: LD_INT 106
13577: PUSH
13578: LD_INT 107
13580: PUSH
13581: LD_INT 108
13583: PUSH
13584: LD_INT 109
13586: PUSH
13587: LD_INT 110
13589: PUSH
13590: LD_INT 111
13592: PUSH
13593: LD_INT 112
13595: PUSH
13596: LD_INT 113
13598: PUSH
13599: LD_INT 114
13601: PUSH
13602: LD_INT 115
13604: PUSH
13605: LD_INT 116
13607: PUSH
13608: LD_INT 117
13610: PUSH
13611: LD_INT 118
13613: PUSH
13614: EMPTY
13615: LIST
13616: LIST
13617: LIST
13618: LIST
13619: LIST
13620: LIST
13621: LIST
13622: LIST
13623: LIST
13624: LIST
13625: LIST
13626: LIST
13627: LIST
13628: LIST
13629: LIST
13630: LIST
13631: LIST
13632: LIST
13633: PUSH
13634: EMPTY
13635: LIST
13636: LIST
13637: ST_TO_ADDR
13638: GO 13641
13640: POP
// end else
13641: GO 13872
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
13643: LD_ADDR_VAR 0 2
13647: PUSH
13648: LD_INT 1
13650: PUSH
13651: LD_INT 2
13653: PUSH
13654: LD_INT 3
13656: PUSH
13657: LD_INT 4
13659: PUSH
13660: LD_INT 5
13662: PUSH
13663: LD_INT 6
13665: PUSH
13666: LD_INT 7
13668: PUSH
13669: LD_INT 8
13671: PUSH
13672: LD_INT 9
13674: PUSH
13675: LD_INT 10
13677: PUSH
13678: LD_INT 11
13680: PUSH
13681: LD_INT 12
13683: PUSH
13684: LD_INT 13
13686: PUSH
13687: LD_INT 14
13689: PUSH
13690: LD_INT 15
13692: PUSH
13693: LD_INT 16
13695: PUSH
13696: LD_INT 17
13698: PUSH
13699: LD_INT 18
13701: PUSH
13702: LD_INT 19
13704: PUSH
13705: LD_INT 20
13707: PUSH
13708: LD_INT 21
13710: PUSH
13711: LD_INT 22
13713: PUSH
13714: LD_INT 23
13716: PUSH
13717: LD_INT 24
13719: PUSH
13720: LD_INT 25
13722: PUSH
13723: LD_INT 26
13725: PUSH
13726: LD_INT 27
13728: PUSH
13729: LD_INT 28
13731: PUSH
13732: LD_INT 29
13734: PUSH
13735: LD_INT 30
13737: PUSH
13738: LD_INT 31
13740: PUSH
13741: LD_INT 32
13743: PUSH
13744: LD_INT 33
13746: PUSH
13747: LD_INT 34
13749: PUSH
13750: LD_INT 35
13752: PUSH
13753: LD_INT 36
13755: PUSH
13756: EMPTY
13757: LIST
13758: LIST
13759: LIST
13760: LIST
13761: LIST
13762: LIST
13763: LIST
13764: LIST
13765: LIST
13766: LIST
13767: LIST
13768: LIST
13769: LIST
13770: LIST
13771: LIST
13772: LIST
13773: LIST
13774: LIST
13775: LIST
13776: LIST
13777: LIST
13778: LIST
13779: LIST
13780: LIST
13781: LIST
13782: LIST
13783: LIST
13784: LIST
13785: LIST
13786: LIST
13787: LIST
13788: LIST
13789: LIST
13790: LIST
13791: LIST
13792: LIST
13793: PUSH
13794: LD_INT 101
13796: PUSH
13797: LD_INT 102
13799: PUSH
13800: LD_INT 103
13802: PUSH
13803: LD_INT 104
13805: PUSH
13806: LD_INT 105
13808: PUSH
13809: LD_INT 106
13811: PUSH
13812: LD_INT 107
13814: PUSH
13815: LD_INT 108
13817: PUSH
13818: LD_INT 109
13820: PUSH
13821: LD_INT 110
13823: PUSH
13824: LD_INT 111
13826: PUSH
13827: LD_INT 112
13829: PUSH
13830: LD_INT 113
13832: PUSH
13833: LD_INT 114
13835: PUSH
13836: LD_INT 115
13838: PUSH
13839: LD_INT 116
13841: PUSH
13842: LD_INT 117
13844: PUSH
13845: LD_INT 118
13847: PUSH
13848: EMPTY
13849: LIST
13850: LIST
13851: LIST
13852: LIST
13853: LIST
13854: LIST
13855: LIST
13856: LIST
13857: LIST
13858: LIST
13859: LIST
13860: LIST
13861: LIST
13862: LIST
13863: LIST
13864: LIST
13865: LIST
13866: LIST
13867: PUSH
13868: EMPTY
13869: LIST
13870: LIST
13871: ST_TO_ADDR
// if result then
13872: LD_VAR 0 2
13876: IFFALSE 14662
// begin normal :=  ;
13878: LD_ADDR_VAR 0 5
13882: PUSH
13883: LD_STRING 
13885: ST_TO_ADDR
// hardcore :=  ;
13886: LD_ADDR_VAR 0 6
13890: PUSH
13891: LD_STRING 
13893: ST_TO_ADDR
// active :=  ;
13894: LD_ADDR_VAR 0 7
13898: PUSH
13899: LD_STRING 
13901: ST_TO_ADDR
// for i = 1 to normalCounter do
13902: LD_ADDR_VAR 0 8
13906: PUSH
13907: DOUBLE
13908: LD_INT 1
13910: DEC
13911: ST_TO_ADDR
13912: LD_EXP 54
13916: PUSH
13917: FOR_TO
13918: IFFALSE 14019
// begin tmp := 0 ;
13920: LD_ADDR_VAR 0 3
13924: PUSH
13925: LD_STRING 0
13927: ST_TO_ADDR
// if result [ 1 ] then
13928: LD_VAR 0 2
13932: PUSH
13933: LD_INT 1
13935: ARRAY
13936: IFFALSE 14001
// if result [ 1 ] [ 1 ] = i then
13938: LD_VAR 0 2
13942: PUSH
13943: LD_INT 1
13945: ARRAY
13946: PUSH
13947: LD_INT 1
13949: ARRAY
13950: PUSH
13951: LD_VAR 0 8
13955: EQUAL
13956: IFFALSE 14001
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
13958: LD_ADDR_VAR 0 2
13962: PUSH
13963: LD_VAR 0 2
13967: PPUSH
13968: LD_INT 1
13970: PPUSH
13971: LD_VAR 0 2
13975: PUSH
13976: LD_INT 1
13978: ARRAY
13979: PPUSH
13980: LD_INT 1
13982: PPUSH
13983: CALL_OW 3
13987: PPUSH
13988: CALL_OW 1
13992: ST_TO_ADDR
// tmp := 1 ;
13993: LD_ADDR_VAR 0 3
13997: PUSH
13998: LD_STRING 1
14000: ST_TO_ADDR
// end ; normal := normal & tmp ;
14001: LD_ADDR_VAR 0 5
14005: PUSH
14006: LD_VAR 0 5
14010: PUSH
14011: LD_VAR 0 3
14015: STR
14016: ST_TO_ADDR
// end ;
14017: GO 13917
14019: POP
14020: POP
// for i = 1 to hardcoreCounter do
14021: LD_ADDR_VAR 0 8
14025: PUSH
14026: DOUBLE
14027: LD_INT 1
14029: DEC
14030: ST_TO_ADDR
14031: LD_EXP 55
14035: PUSH
14036: FOR_TO
14037: IFFALSE 14142
// begin tmp := 0 ;
14039: LD_ADDR_VAR 0 3
14043: PUSH
14044: LD_STRING 0
14046: ST_TO_ADDR
// if result [ 2 ] then
14047: LD_VAR 0 2
14051: PUSH
14052: LD_INT 2
14054: ARRAY
14055: IFFALSE 14124
// if result [ 2 ] [ 1 ] = 100 + i then
14057: LD_VAR 0 2
14061: PUSH
14062: LD_INT 2
14064: ARRAY
14065: PUSH
14066: LD_INT 1
14068: ARRAY
14069: PUSH
14070: LD_INT 100
14072: PUSH
14073: LD_VAR 0 8
14077: PLUS
14078: EQUAL
14079: IFFALSE 14124
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
14081: LD_ADDR_VAR 0 2
14085: PUSH
14086: LD_VAR 0 2
14090: PPUSH
14091: LD_INT 2
14093: PPUSH
14094: LD_VAR 0 2
14098: PUSH
14099: LD_INT 2
14101: ARRAY
14102: PPUSH
14103: LD_INT 1
14105: PPUSH
14106: CALL_OW 3
14110: PPUSH
14111: CALL_OW 1
14115: ST_TO_ADDR
// tmp := 1 ;
14116: LD_ADDR_VAR 0 3
14120: PUSH
14121: LD_STRING 1
14123: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
14124: LD_ADDR_VAR 0 6
14128: PUSH
14129: LD_VAR 0 6
14133: PUSH
14134: LD_VAR 0 3
14138: STR
14139: ST_TO_ADDR
// end ;
14140: GO 14036
14142: POP
14143: POP
// if isGameLoad then
14144: LD_VAR 0 1
14148: IFFALSE 14623
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
14150: LD_ADDR_VAR 0 4
14154: PUSH
14155: LD_EXP 58
14159: PUSH
14160: LD_EXP 57
14164: PUSH
14165: LD_EXP 59
14169: PUSH
14170: LD_EXP 56
14174: PUSH
14175: LD_EXP 60
14179: PUSH
14180: LD_EXP 61
14184: PUSH
14185: LD_EXP 62
14189: PUSH
14190: LD_EXP 63
14194: PUSH
14195: LD_EXP 64
14199: PUSH
14200: LD_EXP 65
14204: PUSH
14205: LD_EXP 66
14209: PUSH
14210: LD_EXP 67
14214: PUSH
14215: LD_EXP 68
14219: PUSH
14220: LD_EXP 69
14224: PUSH
14225: LD_EXP 77
14229: PUSH
14230: LD_EXP 78
14234: PUSH
14235: LD_EXP 79
14239: PUSH
14240: LD_EXP 80
14244: PUSH
14245: LD_EXP 82
14249: PUSH
14250: LD_EXP 83
14254: PUSH
14255: LD_EXP 84
14259: PUSH
14260: LD_EXP 87
14264: PUSH
14265: LD_EXP 89
14269: PUSH
14270: LD_EXP 90
14274: PUSH
14275: LD_EXP 91
14279: PUSH
14280: LD_EXP 93
14284: PUSH
14285: LD_EXP 94
14289: PUSH
14290: LD_EXP 97
14294: PUSH
14295: LD_EXP 98
14299: PUSH
14300: LD_EXP 99
14304: PUSH
14305: LD_EXP 100
14309: PUSH
14310: LD_EXP 101
14314: PUSH
14315: LD_EXP 102
14319: PUSH
14320: LD_EXP 103
14324: PUSH
14325: LD_EXP 104
14329: PUSH
14330: LD_EXP 105
14334: PUSH
14335: LD_EXP 70
14339: PUSH
14340: LD_EXP 71
14344: PUSH
14345: LD_EXP 74
14349: PUSH
14350: LD_EXP 75
14354: PUSH
14355: LD_EXP 76
14359: PUSH
14360: LD_EXP 72
14364: PUSH
14365: LD_EXP 73
14369: PUSH
14370: LD_EXP 81
14374: PUSH
14375: LD_EXP 85
14379: PUSH
14380: LD_EXP 86
14384: PUSH
14385: LD_EXP 88
14389: PUSH
14390: LD_EXP 92
14394: PUSH
14395: LD_EXP 95
14399: PUSH
14400: LD_EXP 96
14404: PUSH
14405: LD_EXP 106
14409: PUSH
14410: LD_EXP 107
14414: PUSH
14415: LD_EXP 108
14419: PUSH
14420: LD_EXP 109
14424: PUSH
14425: EMPTY
14426: LIST
14427: LIST
14428: LIST
14429: LIST
14430: LIST
14431: LIST
14432: LIST
14433: LIST
14434: LIST
14435: LIST
14436: LIST
14437: LIST
14438: LIST
14439: LIST
14440: LIST
14441: LIST
14442: LIST
14443: LIST
14444: LIST
14445: LIST
14446: LIST
14447: LIST
14448: LIST
14449: LIST
14450: LIST
14451: LIST
14452: LIST
14453: LIST
14454: LIST
14455: LIST
14456: LIST
14457: LIST
14458: LIST
14459: LIST
14460: LIST
14461: LIST
14462: LIST
14463: LIST
14464: LIST
14465: LIST
14466: LIST
14467: LIST
14468: LIST
14469: LIST
14470: LIST
14471: LIST
14472: LIST
14473: LIST
14474: LIST
14475: LIST
14476: LIST
14477: LIST
14478: LIST
14479: LIST
14480: ST_TO_ADDR
// tmp :=  ;
14481: LD_ADDR_VAR 0 3
14485: PUSH
14486: LD_STRING 
14488: ST_TO_ADDR
// for i = 1 to normalCounter do
14489: LD_ADDR_VAR 0 8
14493: PUSH
14494: DOUBLE
14495: LD_INT 1
14497: DEC
14498: ST_TO_ADDR
14499: LD_EXP 54
14503: PUSH
14504: FOR_TO
14505: IFFALSE 14541
// begin if flags [ i ] then
14507: LD_VAR 0 4
14511: PUSH
14512: LD_VAR 0 8
14516: ARRAY
14517: IFFALSE 14539
// tmp := tmp & i & ; ;
14519: LD_ADDR_VAR 0 3
14523: PUSH
14524: LD_VAR 0 3
14528: PUSH
14529: LD_VAR 0 8
14533: STR
14534: PUSH
14535: LD_STRING ;
14537: STR
14538: ST_TO_ADDR
// end ;
14539: GO 14504
14541: POP
14542: POP
// for i = 1 to hardcoreCounter do
14543: LD_ADDR_VAR 0 8
14547: PUSH
14548: DOUBLE
14549: LD_INT 1
14551: DEC
14552: ST_TO_ADDR
14553: LD_EXP 55
14557: PUSH
14558: FOR_TO
14559: IFFALSE 14605
// begin if flags [ normalCounter + i ] then
14561: LD_VAR 0 4
14565: PUSH
14566: LD_EXP 54
14570: PUSH
14571: LD_VAR 0 8
14575: PLUS
14576: ARRAY
14577: IFFALSE 14603
// tmp := tmp & ( 100 + i ) & ; ;
14579: LD_ADDR_VAR 0 3
14583: PUSH
14584: LD_VAR 0 3
14588: PUSH
14589: LD_INT 100
14591: PUSH
14592: LD_VAR 0 8
14596: PLUS
14597: STR
14598: PUSH
14599: LD_STRING ;
14601: STR
14602: ST_TO_ADDR
// end ;
14603: GO 14558
14605: POP
14606: POP
// if tmp then
14607: LD_VAR 0 3
14611: IFFALSE 14623
// active := tmp ;
14613: LD_ADDR_VAR 0 7
14617: PUSH
14618: LD_VAR 0 3
14622: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
14623: LD_STRING getStreamItemsFromMission("
14625: PUSH
14626: LD_VAR 0 5
14630: STR
14631: PUSH
14632: LD_STRING ","
14634: STR
14635: PUSH
14636: LD_VAR 0 6
14640: STR
14641: PUSH
14642: LD_STRING ","
14644: STR
14645: PUSH
14646: LD_VAR 0 7
14650: STR
14651: PUSH
14652: LD_STRING ")
14654: STR
14655: PPUSH
14656: CALL_OW 559
// end else
14660: GO 14669
// ToLua ( getStreamItemsFromMission("","","") ) ;
14662: LD_STRING getStreamItemsFromMission("","","")
14664: PPUSH
14665: CALL_OW 559
// end ;
14669: LD_VAR 0 2
14673: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
14674: LD_EXP 53
14678: PUSH
14679: LD_EXP 58
14683: AND
14684: IFFALSE 14808
14686: GO 14688
14688: DISABLE
14689: LD_INT 0
14691: PPUSH
14692: PPUSH
// begin enable ;
14693: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
14694: LD_ADDR_VAR 0 2
14698: PUSH
14699: LD_INT 22
14701: PUSH
14702: LD_OWVAR 2
14706: PUSH
14707: EMPTY
14708: LIST
14709: LIST
14710: PUSH
14711: LD_INT 2
14713: PUSH
14714: LD_INT 34
14716: PUSH
14717: LD_INT 7
14719: PUSH
14720: EMPTY
14721: LIST
14722: LIST
14723: PUSH
14724: LD_INT 34
14726: PUSH
14727: LD_INT 45
14729: PUSH
14730: EMPTY
14731: LIST
14732: LIST
14733: PUSH
14734: LD_INT 34
14736: PUSH
14737: LD_INT 28
14739: PUSH
14740: EMPTY
14741: LIST
14742: LIST
14743: PUSH
14744: LD_INT 34
14746: PUSH
14747: LD_INT 47
14749: PUSH
14750: EMPTY
14751: LIST
14752: LIST
14753: PUSH
14754: EMPTY
14755: LIST
14756: LIST
14757: LIST
14758: LIST
14759: LIST
14760: PUSH
14761: EMPTY
14762: LIST
14763: LIST
14764: PPUSH
14765: CALL_OW 69
14769: ST_TO_ADDR
// if not tmp then
14770: LD_VAR 0 2
14774: NOT
14775: IFFALSE 14779
// exit ;
14777: GO 14808
// for i in tmp do
14779: LD_ADDR_VAR 0 1
14783: PUSH
14784: LD_VAR 0 2
14788: PUSH
14789: FOR_IN
14790: IFFALSE 14806
// begin SetLives ( i , 0 ) ;
14792: LD_VAR 0 1
14796: PPUSH
14797: LD_INT 0
14799: PPUSH
14800: CALL_OW 234
// end ;
14804: GO 14789
14806: POP
14807: POP
// end ;
14808: PPOPN 2
14810: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
14811: LD_EXP 53
14815: PUSH
14816: LD_EXP 59
14820: AND
14821: IFFALSE 14905
14823: GO 14825
14825: DISABLE
14826: LD_INT 0
14828: PPUSH
14829: PPUSH
// begin enable ;
14830: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
14831: LD_ADDR_VAR 0 2
14835: PUSH
14836: LD_INT 22
14838: PUSH
14839: LD_OWVAR 2
14843: PUSH
14844: EMPTY
14845: LIST
14846: LIST
14847: PUSH
14848: LD_INT 32
14850: PUSH
14851: LD_INT 3
14853: PUSH
14854: EMPTY
14855: LIST
14856: LIST
14857: PUSH
14858: EMPTY
14859: LIST
14860: LIST
14861: PPUSH
14862: CALL_OW 69
14866: ST_TO_ADDR
// if not tmp then
14867: LD_VAR 0 2
14871: NOT
14872: IFFALSE 14876
// exit ;
14874: GO 14905
// for i in tmp do
14876: LD_ADDR_VAR 0 1
14880: PUSH
14881: LD_VAR 0 2
14885: PUSH
14886: FOR_IN
14887: IFFALSE 14903
// begin SetLives ( i , 0 ) ;
14889: LD_VAR 0 1
14893: PPUSH
14894: LD_INT 0
14896: PPUSH
14897: CALL_OW 234
// end ;
14901: GO 14886
14903: POP
14904: POP
// end ;
14905: PPOPN 2
14907: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
14908: LD_EXP 53
14912: PUSH
14913: LD_EXP 56
14917: AND
14918: IFFALSE 15011
14920: GO 14922
14922: DISABLE
14923: LD_INT 0
14925: PPUSH
// begin enable ;
14926: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
14927: LD_ADDR_VAR 0 1
14931: PUSH
14932: LD_INT 22
14934: PUSH
14935: LD_OWVAR 2
14939: PUSH
14940: EMPTY
14941: LIST
14942: LIST
14943: PUSH
14944: LD_INT 2
14946: PUSH
14947: LD_INT 25
14949: PUSH
14950: LD_INT 5
14952: PUSH
14953: EMPTY
14954: LIST
14955: LIST
14956: PUSH
14957: LD_INT 25
14959: PUSH
14960: LD_INT 9
14962: PUSH
14963: EMPTY
14964: LIST
14965: LIST
14966: PUSH
14967: LD_INT 25
14969: PUSH
14970: LD_INT 8
14972: PUSH
14973: EMPTY
14974: LIST
14975: LIST
14976: PUSH
14977: EMPTY
14978: LIST
14979: LIST
14980: LIST
14981: LIST
14982: PUSH
14983: EMPTY
14984: LIST
14985: LIST
14986: PPUSH
14987: CALL_OW 69
14991: PUSH
14992: FOR_IN
14993: IFFALSE 15009
// begin SetClass ( i , 1 ) ;
14995: LD_VAR 0 1
14999: PPUSH
15000: LD_INT 1
15002: PPUSH
15003: CALL_OW 336
// end ;
15007: GO 14992
15009: POP
15010: POP
// end ;
15011: PPOPN 1
15013: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
15014: LD_EXP 53
15018: PUSH
15019: LD_EXP 57
15023: AND
15024: PUSH
15025: LD_OWVAR 65
15029: PUSH
15030: LD_INT 7
15032: LESS
15033: AND
15034: IFFALSE 15048
15036: GO 15038
15038: DISABLE
// begin enable ;
15039: ENABLE
// game_speed := 7 ;
15040: LD_ADDR_OWVAR 65
15044: PUSH
15045: LD_INT 7
15047: ST_TO_ADDR
// end ;
15048: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
15049: LD_EXP 53
15053: PUSH
15054: LD_EXP 60
15058: AND
15059: IFFALSE 15261
15061: GO 15063
15063: DISABLE
15064: LD_INT 0
15066: PPUSH
15067: PPUSH
15068: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
15069: LD_ADDR_VAR 0 3
15073: PUSH
15074: LD_INT 81
15076: PUSH
15077: LD_OWVAR 2
15081: PUSH
15082: EMPTY
15083: LIST
15084: LIST
15085: PUSH
15086: LD_INT 21
15088: PUSH
15089: LD_INT 1
15091: PUSH
15092: EMPTY
15093: LIST
15094: LIST
15095: PUSH
15096: EMPTY
15097: LIST
15098: LIST
15099: PPUSH
15100: CALL_OW 69
15104: ST_TO_ADDR
// if not tmp then
15105: LD_VAR 0 3
15109: NOT
15110: IFFALSE 15114
// exit ;
15112: GO 15261
// if tmp > 5 then
15114: LD_VAR 0 3
15118: PUSH
15119: LD_INT 5
15121: GREATER
15122: IFFALSE 15134
// k := 5 else
15124: LD_ADDR_VAR 0 2
15128: PUSH
15129: LD_INT 5
15131: ST_TO_ADDR
15132: GO 15144
// k := tmp ;
15134: LD_ADDR_VAR 0 2
15138: PUSH
15139: LD_VAR 0 3
15143: ST_TO_ADDR
// for i := 1 to k do
15144: LD_ADDR_VAR 0 1
15148: PUSH
15149: DOUBLE
15150: LD_INT 1
15152: DEC
15153: ST_TO_ADDR
15154: LD_VAR 0 2
15158: PUSH
15159: FOR_TO
15160: IFFALSE 15259
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
15162: LD_VAR 0 3
15166: PUSH
15167: LD_VAR 0 1
15171: ARRAY
15172: PPUSH
15173: LD_VAR 0 1
15177: PUSH
15178: LD_INT 4
15180: MOD
15181: PUSH
15182: LD_INT 1
15184: PLUS
15185: PPUSH
15186: CALL_OW 259
15190: PUSH
15191: LD_INT 10
15193: LESS
15194: IFFALSE 15257
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
15196: LD_VAR 0 3
15200: PUSH
15201: LD_VAR 0 1
15205: ARRAY
15206: PPUSH
15207: LD_VAR 0 1
15211: PUSH
15212: LD_INT 4
15214: MOD
15215: PUSH
15216: LD_INT 1
15218: PLUS
15219: PPUSH
15220: LD_VAR 0 3
15224: PUSH
15225: LD_VAR 0 1
15229: ARRAY
15230: PPUSH
15231: LD_VAR 0 1
15235: PUSH
15236: LD_INT 4
15238: MOD
15239: PUSH
15240: LD_INT 1
15242: PLUS
15243: PPUSH
15244: CALL_OW 259
15248: PUSH
15249: LD_INT 1
15251: PLUS
15252: PPUSH
15253: CALL_OW 237
15257: GO 15159
15259: POP
15260: POP
// end ;
15261: PPOPN 3
15263: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
15264: LD_EXP 53
15268: PUSH
15269: LD_EXP 61
15273: AND
15274: IFFALSE 15294
15276: GO 15278
15278: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
15279: LD_INT 4
15281: PPUSH
15282: LD_OWVAR 2
15286: PPUSH
15287: LD_INT 0
15289: PPUSH
15290: CALL_OW 324
15294: END
// every 0 0$1 trigger StreamModeActive and sShovel do
15295: LD_EXP 53
15299: PUSH
15300: LD_EXP 90
15304: AND
15305: IFFALSE 15325
15307: GO 15309
15309: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
15310: LD_INT 19
15312: PPUSH
15313: LD_OWVAR 2
15317: PPUSH
15318: LD_INT 0
15320: PPUSH
15321: CALL_OW 324
15325: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
15326: LD_EXP 53
15330: PUSH
15331: LD_EXP 62
15335: AND
15336: IFFALSE 15438
15338: GO 15340
15340: DISABLE
15341: LD_INT 0
15343: PPUSH
15344: PPUSH
// begin enable ;
15345: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
15346: LD_ADDR_VAR 0 2
15350: PUSH
15351: LD_INT 22
15353: PUSH
15354: LD_OWVAR 2
15358: PUSH
15359: EMPTY
15360: LIST
15361: LIST
15362: PUSH
15363: LD_INT 2
15365: PUSH
15366: LD_INT 34
15368: PUSH
15369: LD_INT 11
15371: PUSH
15372: EMPTY
15373: LIST
15374: LIST
15375: PUSH
15376: LD_INT 34
15378: PUSH
15379: LD_INT 30
15381: PUSH
15382: EMPTY
15383: LIST
15384: LIST
15385: PUSH
15386: EMPTY
15387: LIST
15388: LIST
15389: LIST
15390: PUSH
15391: EMPTY
15392: LIST
15393: LIST
15394: PPUSH
15395: CALL_OW 69
15399: ST_TO_ADDR
// if not tmp then
15400: LD_VAR 0 2
15404: NOT
15405: IFFALSE 15409
// exit ;
15407: GO 15438
// for i in tmp do
15409: LD_ADDR_VAR 0 1
15413: PUSH
15414: LD_VAR 0 2
15418: PUSH
15419: FOR_IN
15420: IFFALSE 15436
// begin SetLives ( i , 0 ) ;
15422: LD_VAR 0 1
15426: PPUSH
15427: LD_INT 0
15429: PPUSH
15430: CALL_OW 234
// end ;
15434: GO 15419
15436: POP
15437: POP
// end ;
15438: PPOPN 2
15440: END
// every 0 0$1 trigger StreamModeActive and sBunker do
15441: LD_EXP 53
15445: PUSH
15446: LD_EXP 63
15450: AND
15451: IFFALSE 15471
15453: GO 15455
15455: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
15456: LD_INT 32
15458: PPUSH
15459: LD_OWVAR 2
15463: PPUSH
15464: LD_INT 0
15466: PPUSH
15467: CALL_OW 324
15471: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
15472: LD_EXP 53
15476: PUSH
15477: LD_EXP 64
15481: AND
15482: IFFALSE 15663
15484: GO 15486
15486: DISABLE
15487: LD_INT 0
15489: PPUSH
15490: PPUSH
15491: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
15492: LD_ADDR_VAR 0 2
15496: PUSH
15497: LD_INT 22
15499: PUSH
15500: LD_OWVAR 2
15504: PUSH
15505: EMPTY
15506: LIST
15507: LIST
15508: PUSH
15509: LD_INT 33
15511: PUSH
15512: LD_INT 3
15514: PUSH
15515: EMPTY
15516: LIST
15517: LIST
15518: PUSH
15519: EMPTY
15520: LIST
15521: LIST
15522: PPUSH
15523: CALL_OW 69
15527: ST_TO_ADDR
// if not tmp then
15528: LD_VAR 0 2
15532: NOT
15533: IFFALSE 15537
// exit ;
15535: GO 15663
// side := 0 ;
15537: LD_ADDR_VAR 0 3
15541: PUSH
15542: LD_INT 0
15544: ST_TO_ADDR
// for i := 1 to 8 do
15545: LD_ADDR_VAR 0 1
15549: PUSH
15550: DOUBLE
15551: LD_INT 1
15553: DEC
15554: ST_TO_ADDR
15555: LD_INT 8
15557: PUSH
15558: FOR_TO
15559: IFFALSE 15607
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
15561: LD_OWVAR 2
15565: PUSH
15566: LD_VAR 0 1
15570: NONEQUAL
15571: PUSH
15572: LD_OWVAR 2
15576: PPUSH
15577: LD_VAR 0 1
15581: PPUSH
15582: CALL_OW 81
15586: PUSH
15587: LD_INT 2
15589: EQUAL
15590: AND
15591: IFFALSE 15605
// begin side := i ;
15593: LD_ADDR_VAR 0 3
15597: PUSH
15598: LD_VAR 0 1
15602: ST_TO_ADDR
// break ;
15603: GO 15607
// end ;
15605: GO 15558
15607: POP
15608: POP
// if not side then
15609: LD_VAR 0 3
15613: NOT
15614: IFFALSE 15618
// exit ;
15616: GO 15663
// for i := 1 to tmp do
15618: LD_ADDR_VAR 0 1
15622: PUSH
15623: DOUBLE
15624: LD_INT 1
15626: DEC
15627: ST_TO_ADDR
15628: LD_VAR 0 2
15632: PUSH
15633: FOR_TO
15634: IFFALSE 15661
// if Prob ( 60 ) then
15636: LD_INT 60
15638: PPUSH
15639: CALL_OW 13
15643: IFFALSE 15659
// SetSide ( i , side ) ;
15645: LD_VAR 0 1
15649: PPUSH
15650: LD_VAR 0 3
15654: PPUSH
15655: CALL_OW 235
15659: GO 15633
15661: POP
15662: POP
// end ;
15663: PPOPN 3
15665: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
15666: LD_EXP 53
15670: PUSH
15671: LD_EXP 66
15675: AND
15676: IFFALSE 15795
15678: GO 15680
15680: DISABLE
15681: LD_INT 0
15683: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
15684: LD_ADDR_VAR 0 1
15688: PUSH
15689: LD_INT 22
15691: PUSH
15692: LD_OWVAR 2
15696: PUSH
15697: EMPTY
15698: LIST
15699: LIST
15700: PUSH
15701: LD_INT 21
15703: PUSH
15704: LD_INT 1
15706: PUSH
15707: EMPTY
15708: LIST
15709: LIST
15710: PUSH
15711: LD_INT 3
15713: PUSH
15714: LD_INT 23
15716: PUSH
15717: LD_INT 0
15719: PUSH
15720: EMPTY
15721: LIST
15722: LIST
15723: PUSH
15724: EMPTY
15725: LIST
15726: LIST
15727: PUSH
15728: EMPTY
15729: LIST
15730: LIST
15731: LIST
15732: PPUSH
15733: CALL_OW 69
15737: PUSH
15738: FOR_IN
15739: IFFALSE 15793
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
15741: LD_VAR 0 1
15745: PPUSH
15746: CALL_OW 257
15750: PUSH
15751: LD_INT 1
15753: PUSH
15754: LD_INT 2
15756: PUSH
15757: LD_INT 3
15759: PUSH
15760: LD_INT 4
15762: PUSH
15763: EMPTY
15764: LIST
15765: LIST
15766: LIST
15767: LIST
15768: IN
15769: IFFALSE 15791
// SetClass ( un , rand ( 1 , 4 ) ) ;
15771: LD_VAR 0 1
15775: PPUSH
15776: LD_INT 1
15778: PPUSH
15779: LD_INT 4
15781: PPUSH
15782: CALL_OW 12
15786: PPUSH
15787: CALL_OW 336
15791: GO 15738
15793: POP
15794: POP
// end ;
15795: PPOPN 1
15797: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
15798: LD_EXP 53
15802: PUSH
15803: LD_EXP 65
15807: AND
15808: IFFALSE 15887
15810: GO 15812
15812: DISABLE
15813: LD_INT 0
15815: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
15816: LD_ADDR_VAR 0 1
15820: PUSH
15821: LD_INT 22
15823: PUSH
15824: LD_OWVAR 2
15828: PUSH
15829: EMPTY
15830: LIST
15831: LIST
15832: PUSH
15833: LD_INT 21
15835: PUSH
15836: LD_INT 3
15838: PUSH
15839: EMPTY
15840: LIST
15841: LIST
15842: PUSH
15843: EMPTY
15844: LIST
15845: LIST
15846: PPUSH
15847: CALL_OW 69
15851: ST_TO_ADDR
// if not tmp then
15852: LD_VAR 0 1
15856: NOT
15857: IFFALSE 15861
// exit ;
15859: GO 15887
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
15861: LD_VAR 0 1
15865: PUSH
15866: LD_INT 1
15868: PPUSH
15869: LD_VAR 0 1
15873: PPUSH
15874: CALL_OW 12
15878: ARRAY
15879: PPUSH
15880: LD_INT 100
15882: PPUSH
15883: CALL_OW 234
// end ;
15887: PPOPN 1
15889: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
15890: LD_EXP 53
15894: PUSH
15895: LD_EXP 67
15899: AND
15900: IFFALSE 15998
15902: GO 15904
15904: DISABLE
15905: LD_INT 0
15907: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15908: LD_ADDR_VAR 0 1
15912: PUSH
15913: LD_INT 22
15915: PUSH
15916: LD_OWVAR 2
15920: PUSH
15921: EMPTY
15922: LIST
15923: LIST
15924: PUSH
15925: LD_INT 21
15927: PUSH
15928: LD_INT 1
15930: PUSH
15931: EMPTY
15932: LIST
15933: LIST
15934: PUSH
15935: EMPTY
15936: LIST
15937: LIST
15938: PPUSH
15939: CALL_OW 69
15943: ST_TO_ADDR
// if not tmp then
15944: LD_VAR 0 1
15948: NOT
15949: IFFALSE 15953
// exit ;
15951: GO 15998
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
15953: LD_VAR 0 1
15957: PUSH
15958: LD_INT 1
15960: PPUSH
15961: LD_VAR 0 1
15965: PPUSH
15966: CALL_OW 12
15970: ARRAY
15971: PPUSH
15972: LD_INT 1
15974: PPUSH
15975: LD_INT 4
15977: PPUSH
15978: CALL_OW 12
15982: PPUSH
15983: LD_INT 3000
15985: PPUSH
15986: LD_INT 9000
15988: PPUSH
15989: CALL_OW 12
15993: PPUSH
15994: CALL_OW 492
// end ;
15998: PPOPN 1
16000: END
// every 0 0$1 trigger StreamModeActive and sDepot do
16001: LD_EXP 53
16005: PUSH
16006: LD_EXP 68
16010: AND
16011: IFFALSE 16031
16013: GO 16015
16015: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
16016: LD_INT 1
16018: PPUSH
16019: LD_OWVAR 2
16023: PPUSH
16024: LD_INT 0
16026: PPUSH
16027: CALL_OW 324
16031: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
16032: LD_EXP 53
16036: PUSH
16037: LD_EXP 69
16041: AND
16042: IFFALSE 16125
16044: GO 16046
16046: DISABLE
16047: LD_INT 0
16049: PPUSH
16050: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
16051: LD_ADDR_VAR 0 2
16055: PUSH
16056: LD_INT 22
16058: PUSH
16059: LD_OWVAR 2
16063: PUSH
16064: EMPTY
16065: LIST
16066: LIST
16067: PUSH
16068: LD_INT 21
16070: PUSH
16071: LD_INT 3
16073: PUSH
16074: EMPTY
16075: LIST
16076: LIST
16077: PUSH
16078: EMPTY
16079: LIST
16080: LIST
16081: PPUSH
16082: CALL_OW 69
16086: ST_TO_ADDR
// if not tmp then
16087: LD_VAR 0 2
16091: NOT
16092: IFFALSE 16096
// exit ;
16094: GO 16125
// for i in tmp do
16096: LD_ADDR_VAR 0 1
16100: PUSH
16101: LD_VAR 0 2
16105: PUSH
16106: FOR_IN
16107: IFFALSE 16123
// SetBLevel ( i , 10 ) ;
16109: LD_VAR 0 1
16113: PPUSH
16114: LD_INT 10
16116: PPUSH
16117: CALL_OW 241
16121: GO 16106
16123: POP
16124: POP
// end ;
16125: PPOPN 2
16127: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
16128: LD_EXP 53
16132: PUSH
16133: LD_EXP 70
16137: AND
16138: IFFALSE 16249
16140: GO 16142
16142: DISABLE
16143: LD_INT 0
16145: PPUSH
16146: PPUSH
16147: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16148: LD_ADDR_VAR 0 3
16152: PUSH
16153: LD_INT 22
16155: PUSH
16156: LD_OWVAR 2
16160: PUSH
16161: EMPTY
16162: LIST
16163: LIST
16164: PUSH
16165: LD_INT 25
16167: PUSH
16168: LD_INT 1
16170: PUSH
16171: EMPTY
16172: LIST
16173: LIST
16174: PUSH
16175: EMPTY
16176: LIST
16177: LIST
16178: PPUSH
16179: CALL_OW 69
16183: ST_TO_ADDR
// if not tmp then
16184: LD_VAR 0 3
16188: NOT
16189: IFFALSE 16193
// exit ;
16191: GO 16249
// un := tmp [ rand ( 1 , tmp ) ] ;
16193: LD_ADDR_VAR 0 2
16197: PUSH
16198: LD_VAR 0 3
16202: PUSH
16203: LD_INT 1
16205: PPUSH
16206: LD_VAR 0 3
16210: PPUSH
16211: CALL_OW 12
16215: ARRAY
16216: ST_TO_ADDR
// if Crawls ( un ) then
16217: LD_VAR 0 2
16221: PPUSH
16222: CALL_OW 318
16226: IFFALSE 16237
// ComWalk ( un ) ;
16228: LD_VAR 0 2
16232: PPUSH
16233: CALL_OW 138
// SetClass ( un , class_sniper ) ;
16237: LD_VAR 0 2
16241: PPUSH
16242: LD_INT 5
16244: PPUSH
16245: CALL_OW 336
// end ;
16249: PPOPN 3
16251: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
16252: LD_EXP 53
16256: PUSH
16257: LD_EXP 71
16261: AND
16262: PUSH
16263: LD_OWVAR 67
16267: PUSH
16268: LD_INT 4
16270: LESS
16271: AND
16272: IFFALSE 16291
16274: GO 16276
16276: DISABLE
// begin Difficulty := Difficulty + 1 ;
16277: LD_ADDR_OWVAR 67
16281: PUSH
16282: LD_OWVAR 67
16286: PUSH
16287: LD_INT 1
16289: PLUS
16290: ST_TO_ADDR
// end ;
16291: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
16292: LD_EXP 53
16296: PUSH
16297: LD_EXP 72
16301: AND
16302: IFFALSE 16405
16304: GO 16306
16306: DISABLE
16307: LD_INT 0
16309: PPUSH
// begin for i := 1 to 5 do
16310: LD_ADDR_VAR 0 1
16314: PUSH
16315: DOUBLE
16316: LD_INT 1
16318: DEC
16319: ST_TO_ADDR
16320: LD_INT 5
16322: PUSH
16323: FOR_TO
16324: IFFALSE 16403
// begin uc_nation := nation_nature ;
16326: LD_ADDR_OWVAR 21
16330: PUSH
16331: LD_INT 0
16333: ST_TO_ADDR
// uc_side := 0 ;
16334: LD_ADDR_OWVAR 20
16338: PUSH
16339: LD_INT 0
16341: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
16342: LD_ADDR_OWVAR 29
16346: PUSH
16347: LD_INT 12
16349: PUSH
16350: LD_INT 12
16352: PUSH
16353: EMPTY
16354: LIST
16355: LIST
16356: ST_TO_ADDR
// hc_agressivity := 20 ;
16357: LD_ADDR_OWVAR 35
16361: PUSH
16362: LD_INT 20
16364: ST_TO_ADDR
// hc_class := class_tiger ;
16365: LD_ADDR_OWVAR 28
16369: PUSH
16370: LD_INT 14
16372: ST_TO_ADDR
// hc_gallery :=  ;
16373: LD_ADDR_OWVAR 33
16377: PUSH
16378: LD_STRING 
16380: ST_TO_ADDR
// hc_name :=  ;
16381: LD_ADDR_OWVAR 26
16385: PUSH
16386: LD_STRING 
16388: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
16389: CALL_OW 44
16393: PPUSH
16394: LD_INT 0
16396: PPUSH
16397: CALL_OW 51
// end ;
16401: GO 16323
16403: POP
16404: POP
// end ;
16405: PPOPN 1
16407: END
// every 0 0$1 trigger StreamModeActive and sBomb do
16408: LD_EXP 53
16412: PUSH
16413: LD_EXP 73
16417: AND
16418: IFFALSE 16427
16420: GO 16422
16422: DISABLE
// StreamSibBomb ;
16423: CALL 16428 0 0
16427: END
// export function StreamSibBomb ; var i , x , y ; begin
16428: LD_INT 0
16430: PPUSH
16431: PPUSH
16432: PPUSH
16433: PPUSH
// result := false ;
16434: LD_ADDR_VAR 0 1
16438: PUSH
16439: LD_INT 0
16441: ST_TO_ADDR
// for i := 1 to 16 do
16442: LD_ADDR_VAR 0 2
16446: PUSH
16447: DOUBLE
16448: LD_INT 1
16450: DEC
16451: ST_TO_ADDR
16452: LD_INT 16
16454: PUSH
16455: FOR_TO
16456: IFFALSE 16655
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
16458: LD_ADDR_VAR 0 3
16462: PUSH
16463: LD_INT 10
16465: PUSH
16466: LD_INT 20
16468: PUSH
16469: LD_INT 30
16471: PUSH
16472: LD_INT 40
16474: PUSH
16475: LD_INT 50
16477: PUSH
16478: LD_INT 60
16480: PUSH
16481: LD_INT 70
16483: PUSH
16484: LD_INT 80
16486: PUSH
16487: LD_INT 90
16489: PUSH
16490: LD_INT 100
16492: PUSH
16493: LD_INT 110
16495: PUSH
16496: LD_INT 120
16498: PUSH
16499: LD_INT 130
16501: PUSH
16502: LD_INT 140
16504: PUSH
16505: LD_INT 150
16507: PUSH
16508: EMPTY
16509: LIST
16510: LIST
16511: LIST
16512: LIST
16513: LIST
16514: LIST
16515: LIST
16516: LIST
16517: LIST
16518: LIST
16519: LIST
16520: LIST
16521: LIST
16522: LIST
16523: LIST
16524: PUSH
16525: LD_INT 1
16527: PPUSH
16528: LD_INT 15
16530: PPUSH
16531: CALL_OW 12
16535: ARRAY
16536: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
16537: LD_ADDR_VAR 0 4
16541: PUSH
16542: LD_INT 10
16544: PUSH
16545: LD_INT 20
16547: PUSH
16548: LD_INT 30
16550: PUSH
16551: LD_INT 40
16553: PUSH
16554: LD_INT 50
16556: PUSH
16557: LD_INT 60
16559: PUSH
16560: LD_INT 70
16562: PUSH
16563: LD_INT 80
16565: PUSH
16566: LD_INT 90
16568: PUSH
16569: LD_INT 100
16571: PUSH
16572: LD_INT 110
16574: PUSH
16575: LD_INT 120
16577: PUSH
16578: LD_INT 130
16580: PUSH
16581: LD_INT 140
16583: PUSH
16584: LD_INT 150
16586: PUSH
16587: EMPTY
16588: LIST
16589: LIST
16590: LIST
16591: LIST
16592: LIST
16593: LIST
16594: LIST
16595: LIST
16596: LIST
16597: LIST
16598: LIST
16599: LIST
16600: LIST
16601: LIST
16602: LIST
16603: PUSH
16604: LD_INT 1
16606: PPUSH
16607: LD_INT 15
16609: PPUSH
16610: CALL_OW 12
16614: ARRAY
16615: ST_TO_ADDR
// if ValidHex ( x , y ) then
16616: LD_VAR 0 3
16620: PPUSH
16621: LD_VAR 0 4
16625: PPUSH
16626: CALL_OW 488
16630: IFFALSE 16653
// begin result := [ x , y ] ;
16632: LD_ADDR_VAR 0 1
16636: PUSH
16637: LD_VAR 0 3
16641: PUSH
16642: LD_VAR 0 4
16646: PUSH
16647: EMPTY
16648: LIST
16649: LIST
16650: ST_TO_ADDR
// break ;
16651: GO 16655
// end ; end ;
16653: GO 16455
16655: POP
16656: POP
// if result then
16657: LD_VAR 0 1
16661: IFFALSE 16721
// begin ToLua ( playSibBomb() ) ;
16663: LD_STRING playSibBomb()
16665: PPUSH
16666: CALL_OW 559
// wait ( 0 0$14 ) ;
16670: LD_INT 490
16672: PPUSH
16673: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
16677: LD_VAR 0 1
16681: PUSH
16682: LD_INT 1
16684: ARRAY
16685: PPUSH
16686: LD_VAR 0 1
16690: PUSH
16691: LD_INT 2
16693: ARRAY
16694: PPUSH
16695: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
16699: LD_VAR 0 1
16703: PUSH
16704: LD_INT 1
16706: ARRAY
16707: PPUSH
16708: LD_VAR 0 1
16712: PUSH
16713: LD_INT 2
16715: ARRAY
16716: PPUSH
16717: CALL_OW 429
// end ; end ;
16721: LD_VAR 0 1
16725: RET
// every 0 0$1 trigger StreamModeActive and sReset do
16726: LD_EXP 53
16730: PUSH
16731: LD_EXP 75
16735: AND
16736: IFFALSE 16748
16738: GO 16740
16740: DISABLE
// YouLost (  ) ;
16741: LD_STRING 
16743: PPUSH
16744: CALL_OW 104
16748: END
// every 0 0$1 trigger StreamModeActive and sFog do
16749: LD_EXP 53
16753: PUSH
16754: LD_EXP 74
16758: AND
16759: IFFALSE 16773
16761: GO 16763
16763: DISABLE
// FogOff ( your_side ) ;
16764: LD_OWVAR 2
16768: PPUSH
16769: CALL_OW 344
16773: END
// every 0 0$1 trigger StreamModeActive and sSun do
16774: LD_EXP 53
16778: PUSH
16779: LD_EXP 76
16783: AND
16784: IFFALSE 16812
16786: GO 16788
16788: DISABLE
// begin solar_recharge_percent := 0 ;
16789: LD_ADDR_OWVAR 79
16793: PUSH
16794: LD_INT 0
16796: ST_TO_ADDR
// wait ( 5 5$00 ) ;
16797: LD_INT 10500
16799: PPUSH
16800: CALL_OW 67
// solar_recharge_percent := 100 ;
16804: LD_ADDR_OWVAR 79
16808: PUSH
16809: LD_INT 100
16811: ST_TO_ADDR
// end ;
16812: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
16813: LD_EXP 53
16817: PUSH
16818: LD_EXP 77
16822: AND
16823: IFFALSE 17062
16825: GO 16827
16827: DISABLE
16828: LD_INT 0
16830: PPUSH
16831: PPUSH
16832: PPUSH
// begin tmp := [ ] ;
16833: LD_ADDR_VAR 0 3
16837: PUSH
16838: EMPTY
16839: ST_TO_ADDR
// for i := 1 to 6 do
16840: LD_ADDR_VAR 0 1
16844: PUSH
16845: DOUBLE
16846: LD_INT 1
16848: DEC
16849: ST_TO_ADDR
16850: LD_INT 6
16852: PUSH
16853: FOR_TO
16854: IFFALSE 16959
// begin uc_nation := nation_nature ;
16856: LD_ADDR_OWVAR 21
16860: PUSH
16861: LD_INT 0
16863: ST_TO_ADDR
// uc_side := 0 ;
16864: LD_ADDR_OWVAR 20
16868: PUSH
16869: LD_INT 0
16871: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
16872: LD_ADDR_OWVAR 29
16876: PUSH
16877: LD_INT 12
16879: PUSH
16880: LD_INT 12
16882: PUSH
16883: EMPTY
16884: LIST
16885: LIST
16886: ST_TO_ADDR
// hc_agressivity := 20 ;
16887: LD_ADDR_OWVAR 35
16891: PUSH
16892: LD_INT 20
16894: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
16895: LD_ADDR_OWVAR 28
16899: PUSH
16900: LD_INT 17
16902: ST_TO_ADDR
// hc_gallery :=  ;
16903: LD_ADDR_OWVAR 33
16907: PUSH
16908: LD_STRING 
16910: ST_TO_ADDR
// hc_name :=  ;
16911: LD_ADDR_OWVAR 26
16915: PUSH
16916: LD_STRING 
16918: ST_TO_ADDR
// un := CreateHuman ;
16919: LD_ADDR_VAR 0 2
16923: PUSH
16924: CALL_OW 44
16928: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
16929: LD_VAR 0 2
16933: PPUSH
16934: LD_INT 1
16936: PPUSH
16937: CALL_OW 51
// tmp := tmp ^ un ;
16941: LD_ADDR_VAR 0 3
16945: PUSH
16946: LD_VAR 0 3
16950: PUSH
16951: LD_VAR 0 2
16955: ADD
16956: ST_TO_ADDR
// end ;
16957: GO 16853
16959: POP
16960: POP
// repeat wait ( 0 0$1 ) ;
16961: LD_INT 35
16963: PPUSH
16964: CALL_OW 67
// for un in tmp do
16968: LD_ADDR_VAR 0 2
16972: PUSH
16973: LD_VAR 0 3
16977: PUSH
16978: FOR_IN
16979: IFFALSE 17053
// begin if IsDead ( un ) then
16981: LD_VAR 0 2
16985: PPUSH
16986: CALL_OW 301
16990: IFFALSE 17010
// begin tmp := tmp diff un ;
16992: LD_ADDR_VAR 0 3
16996: PUSH
16997: LD_VAR 0 3
17001: PUSH
17002: LD_VAR 0 2
17006: DIFF
17007: ST_TO_ADDR
// continue ;
17008: GO 16978
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
17010: LD_VAR 0 2
17014: PPUSH
17015: LD_INT 3
17017: PUSH
17018: LD_INT 22
17020: PUSH
17021: LD_INT 0
17023: PUSH
17024: EMPTY
17025: LIST
17026: LIST
17027: PUSH
17028: EMPTY
17029: LIST
17030: LIST
17031: PPUSH
17032: CALL_OW 69
17036: PPUSH
17037: LD_VAR 0 2
17041: PPUSH
17042: CALL_OW 74
17046: PPUSH
17047: CALL_OW 115
// end ;
17051: GO 16978
17053: POP
17054: POP
// until not tmp ;
17055: LD_VAR 0 3
17059: NOT
17060: IFFALSE 16961
// end ;
17062: PPOPN 3
17064: END
// every 0 0$1 trigger StreamModeActive and sTroll do
17065: LD_EXP 53
17069: PUSH
17070: LD_EXP 78
17074: AND
17075: IFFALSE 17129
17077: GO 17079
17079: DISABLE
// begin ToLua ( displayTroll(); ) ;
17080: LD_STRING displayTroll();
17082: PPUSH
17083: CALL_OW 559
// wait ( 3 3$00 ) ;
17087: LD_INT 6300
17089: PPUSH
17090: CALL_OW 67
// ToLua ( hideTroll(); ) ;
17094: LD_STRING hideTroll();
17096: PPUSH
17097: CALL_OW 559
// wait ( 1 1$00 ) ;
17101: LD_INT 2100
17103: PPUSH
17104: CALL_OW 67
// ToLua ( displayTroll(); ) ;
17108: LD_STRING displayTroll();
17110: PPUSH
17111: CALL_OW 559
// wait ( 1 1$00 ) ;
17115: LD_INT 2100
17117: PPUSH
17118: CALL_OW 67
// ToLua ( hideTroll(); ) ;
17122: LD_STRING hideTroll();
17124: PPUSH
17125: CALL_OW 559
// end ;
17129: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
17130: LD_EXP 53
17134: PUSH
17135: LD_EXP 79
17139: AND
17140: IFFALSE 17203
17142: GO 17144
17144: DISABLE
17145: LD_INT 0
17147: PPUSH
// begin p := 0 ;
17148: LD_ADDR_VAR 0 1
17152: PUSH
17153: LD_INT 0
17155: ST_TO_ADDR
// repeat game_speed := 1 ;
17156: LD_ADDR_OWVAR 65
17160: PUSH
17161: LD_INT 1
17163: ST_TO_ADDR
// wait ( 0 0$1 ) ;
17164: LD_INT 35
17166: PPUSH
17167: CALL_OW 67
// p := p + 1 ;
17171: LD_ADDR_VAR 0 1
17175: PUSH
17176: LD_VAR 0 1
17180: PUSH
17181: LD_INT 1
17183: PLUS
17184: ST_TO_ADDR
// until p >= 60 ;
17185: LD_VAR 0 1
17189: PUSH
17190: LD_INT 60
17192: GREATEREQUAL
17193: IFFALSE 17156
// game_speed := 4 ;
17195: LD_ADDR_OWVAR 65
17199: PUSH
17200: LD_INT 4
17202: ST_TO_ADDR
// end ;
17203: PPOPN 1
17205: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
17206: LD_EXP 53
17210: PUSH
17211: LD_EXP 80
17215: AND
17216: IFFALSE 17362
17218: GO 17220
17220: DISABLE
17221: LD_INT 0
17223: PPUSH
17224: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17225: LD_ADDR_VAR 0 1
17229: PUSH
17230: LD_INT 22
17232: PUSH
17233: LD_OWVAR 2
17237: PUSH
17238: EMPTY
17239: LIST
17240: LIST
17241: PUSH
17242: LD_INT 2
17244: PUSH
17245: LD_INT 30
17247: PUSH
17248: LD_INT 0
17250: PUSH
17251: EMPTY
17252: LIST
17253: LIST
17254: PUSH
17255: LD_INT 30
17257: PUSH
17258: LD_INT 1
17260: PUSH
17261: EMPTY
17262: LIST
17263: LIST
17264: PUSH
17265: EMPTY
17266: LIST
17267: LIST
17268: LIST
17269: PUSH
17270: EMPTY
17271: LIST
17272: LIST
17273: PPUSH
17274: CALL_OW 69
17278: ST_TO_ADDR
// if not depot then
17279: LD_VAR 0 1
17283: NOT
17284: IFFALSE 17288
// exit ;
17286: GO 17362
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
17288: LD_ADDR_VAR 0 2
17292: PUSH
17293: LD_VAR 0 1
17297: PUSH
17298: LD_INT 1
17300: PPUSH
17301: LD_VAR 0 1
17305: PPUSH
17306: CALL_OW 12
17310: ARRAY
17311: PPUSH
17312: CALL_OW 274
17316: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
17317: LD_VAR 0 2
17321: PPUSH
17322: LD_INT 1
17324: PPUSH
17325: LD_INT 0
17327: PPUSH
17328: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
17332: LD_VAR 0 2
17336: PPUSH
17337: LD_INT 2
17339: PPUSH
17340: LD_INT 0
17342: PPUSH
17343: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
17347: LD_VAR 0 2
17351: PPUSH
17352: LD_INT 3
17354: PPUSH
17355: LD_INT 0
17357: PPUSH
17358: CALL_OW 277
// end ;
17362: PPOPN 2
17364: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
17365: LD_EXP 53
17369: PUSH
17370: LD_EXP 81
17374: AND
17375: IFFALSE 17472
17377: GO 17379
17379: DISABLE
17380: LD_INT 0
17382: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17383: LD_ADDR_VAR 0 1
17387: PUSH
17388: LD_INT 22
17390: PUSH
17391: LD_OWVAR 2
17395: PUSH
17396: EMPTY
17397: LIST
17398: LIST
17399: PUSH
17400: LD_INT 21
17402: PUSH
17403: LD_INT 1
17405: PUSH
17406: EMPTY
17407: LIST
17408: LIST
17409: PUSH
17410: LD_INT 3
17412: PUSH
17413: LD_INT 23
17415: PUSH
17416: LD_INT 0
17418: PUSH
17419: EMPTY
17420: LIST
17421: LIST
17422: PUSH
17423: EMPTY
17424: LIST
17425: LIST
17426: PUSH
17427: EMPTY
17428: LIST
17429: LIST
17430: LIST
17431: PPUSH
17432: CALL_OW 69
17436: ST_TO_ADDR
// if not tmp then
17437: LD_VAR 0 1
17441: NOT
17442: IFFALSE 17446
// exit ;
17444: GO 17472
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
17446: LD_VAR 0 1
17450: PUSH
17451: LD_INT 1
17453: PPUSH
17454: LD_VAR 0 1
17458: PPUSH
17459: CALL_OW 12
17463: ARRAY
17464: PPUSH
17465: LD_INT 200
17467: PPUSH
17468: CALL_OW 234
// end ;
17472: PPOPN 1
17474: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
17475: LD_EXP 53
17479: PUSH
17480: LD_EXP 82
17484: AND
17485: IFFALSE 17564
17487: GO 17489
17489: DISABLE
17490: LD_INT 0
17492: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
17493: LD_ADDR_VAR 0 1
17497: PUSH
17498: LD_INT 22
17500: PUSH
17501: LD_OWVAR 2
17505: PUSH
17506: EMPTY
17507: LIST
17508: LIST
17509: PUSH
17510: LD_INT 21
17512: PUSH
17513: LD_INT 2
17515: PUSH
17516: EMPTY
17517: LIST
17518: LIST
17519: PUSH
17520: EMPTY
17521: LIST
17522: LIST
17523: PPUSH
17524: CALL_OW 69
17528: ST_TO_ADDR
// if not tmp then
17529: LD_VAR 0 1
17533: NOT
17534: IFFALSE 17538
// exit ;
17536: GO 17564
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
17538: LD_VAR 0 1
17542: PUSH
17543: LD_INT 1
17545: PPUSH
17546: LD_VAR 0 1
17550: PPUSH
17551: CALL_OW 12
17555: ARRAY
17556: PPUSH
17557: LD_INT 60
17559: PPUSH
17560: CALL_OW 234
// end ;
17564: PPOPN 1
17566: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
17567: LD_EXP 53
17571: PUSH
17572: LD_EXP 83
17576: AND
17577: IFFALSE 17676
17579: GO 17581
17581: DISABLE
17582: LD_INT 0
17584: PPUSH
17585: PPUSH
// begin enable ;
17586: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
17587: LD_ADDR_VAR 0 1
17591: PUSH
17592: LD_INT 22
17594: PUSH
17595: LD_OWVAR 2
17599: PUSH
17600: EMPTY
17601: LIST
17602: LIST
17603: PUSH
17604: LD_INT 61
17606: PUSH
17607: EMPTY
17608: LIST
17609: PUSH
17610: LD_INT 33
17612: PUSH
17613: LD_INT 2
17615: PUSH
17616: EMPTY
17617: LIST
17618: LIST
17619: PUSH
17620: EMPTY
17621: LIST
17622: LIST
17623: LIST
17624: PPUSH
17625: CALL_OW 69
17629: ST_TO_ADDR
// if not tmp then
17630: LD_VAR 0 1
17634: NOT
17635: IFFALSE 17639
// exit ;
17637: GO 17676
// for i in tmp do
17639: LD_ADDR_VAR 0 2
17643: PUSH
17644: LD_VAR 0 1
17648: PUSH
17649: FOR_IN
17650: IFFALSE 17674
// if IsControledBy ( i ) then
17652: LD_VAR 0 2
17656: PPUSH
17657: CALL_OW 312
17661: IFFALSE 17672
// ComUnlink ( i ) ;
17663: LD_VAR 0 2
17667: PPUSH
17668: CALL_OW 136
17672: GO 17649
17674: POP
17675: POP
// end ;
17676: PPOPN 2
17678: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
17679: LD_EXP 53
17683: PUSH
17684: LD_EXP 84
17688: AND
17689: IFFALSE 17829
17691: GO 17693
17693: DISABLE
17694: LD_INT 0
17696: PPUSH
17697: PPUSH
// begin ToLua ( displayPowell(); ) ;
17698: LD_STRING displayPowell();
17700: PPUSH
17701: CALL_OW 559
// uc_side := 0 ;
17705: LD_ADDR_OWVAR 20
17709: PUSH
17710: LD_INT 0
17712: ST_TO_ADDR
// uc_nation := 2 ;
17713: LD_ADDR_OWVAR 21
17717: PUSH
17718: LD_INT 2
17720: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
17721: LD_ADDR_OWVAR 37
17725: PUSH
17726: LD_INT 14
17728: ST_TO_ADDR
// vc_engine := engine_siberite ;
17729: LD_ADDR_OWVAR 39
17733: PUSH
17734: LD_INT 3
17736: ST_TO_ADDR
// vc_control := control_apeman ;
17737: LD_ADDR_OWVAR 38
17741: PUSH
17742: LD_INT 5
17744: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
17745: LD_ADDR_OWVAR 40
17749: PUSH
17750: LD_INT 29
17752: ST_TO_ADDR
// un := CreateVehicle ;
17753: LD_ADDR_VAR 0 2
17757: PUSH
17758: CALL_OW 45
17762: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17763: LD_VAR 0 2
17767: PPUSH
17768: LD_INT 1
17770: PPUSH
17771: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
17775: LD_INT 35
17777: PPUSH
17778: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
17782: LD_VAR 0 2
17786: PPUSH
17787: LD_INT 22
17789: PUSH
17790: LD_OWVAR 2
17794: PUSH
17795: EMPTY
17796: LIST
17797: LIST
17798: PPUSH
17799: CALL_OW 69
17803: PPUSH
17804: LD_VAR 0 2
17808: PPUSH
17809: CALL_OW 74
17813: PPUSH
17814: CALL_OW 115
// until IsDead ( un ) ;
17818: LD_VAR 0 2
17822: PPUSH
17823: CALL_OW 301
17827: IFFALSE 17775
// end ;
17829: PPOPN 2
17831: END
// every 0 0$1 trigger StreamModeActive and sStu do
17832: LD_EXP 53
17836: PUSH
17837: LD_EXP 92
17841: AND
17842: IFFALSE 17858
17844: GO 17846
17846: DISABLE
// begin ToLua ( displayStucuk(); ) ;
17847: LD_STRING displayStucuk();
17849: PPUSH
17850: CALL_OW 559
// ResetFog ;
17854: CALL_OW 335
// end ;
17858: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
17859: LD_EXP 53
17863: PUSH
17864: LD_EXP 85
17868: AND
17869: IFFALSE 18010
17871: GO 17873
17873: DISABLE
17874: LD_INT 0
17876: PPUSH
17877: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17878: LD_ADDR_VAR 0 2
17882: PUSH
17883: LD_INT 22
17885: PUSH
17886: LD_OWVAR 2
17890: PUSH
17891: EMPTY
17892: LIST
17893: LIST
17894: PUSH
17895: LD_INT 21
17897: PUSH
17898: LD_INT 1
17900: PUSH
17901: EMPTY
17902: LIST
17903: LIST
17904: PUSH
17905: EMPTY
17906: LIST
17907: LIST
17908: PPUSH
17909: CALL_OW 69
17913: ST_TO_ADDR
// if not tmp then
17914: LD_VAR 0 2
17918: NOT
17919: IFFALSE 17923
// exit ;
17921: GO 18010
// un := tmp [ rand ( 1 , tmp ) ] ;
17923: LD_ADDR_VAR 0 1
17927: PUSH
17928: LD_VAR 0 2
17932: PUSH
17933: LD_INT 1
17935: PPUSH
17936: LD_VAR 0 2
17940: PPUSH
17941: CALL_OW 12
17945: ARRAY
17946: ST_TO_ADDR
// SetSide ( un , 0 ) ;
17947: LD_VAR 0 1
17951: PPUSH
17952: LD_INT 0
17954: PPUSH
17955: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
17959: LD_VAR 0 1
17963: PPUSH
17964: LD_OWVAR 3
17968: PUSH
17969: LD_VAR 0 1
17973: DIFF
17974: PPUSH
17975: LD_VAR 0 1
17979: PPUSH
17980: CALL_OW 74
17984: PPUSH
17985: CALL_OW 115
// wait ( 0 0$20 ) ;
17989: LD_INT 700
17991: PPUSH
17992: CALL_OW 67
// SetSide ( un , your_side ) ;
17996: LD_VAR 0 1
18000: PPUSH
18001: LD_OWVAR 2
18005: PPUSH
18006: CALL_OW 235
// end ;
18010: PPOPN 2
18012: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
18013: LD_EXP 53
18017: PUSH
18018: LD_EXP 86
18022: AND
18023: IFFALSE 18129
18025: GO 18027
18027: DISABLE
18028: LD_INT 0
18030: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18031: LD_ADDR_VAR 0 1
18035: PUSH
18036: LD_INT 22
18038: PUSH
18039: LD_OWVAR 2
18043: PUSH
18044: EMPTY
18045: LIST
18046: LIST
18047: PUSH
18048: LD_INT 2
18050: PUSH
18051: LD_INT 30
18053: PUSH
18054: LD_INT 0
18056: PUSH
18057: EMPTY
18058: LIST
18059: LIST
18060: PUSH
18061: LD_INT 30
18063: PUSH
18064: LD_INT 1
18066: PUSH
18067: EMPTY
18068: LIST
18069: LIST
18070: PUSH
18071: EMPTY
18072: LIST
18073: LIST
18074: LIST
18075: PUSH
18076: EMPTY
18077: LIST
18078: LIST
18079: PPUSH
18080: CALL_OW 69
18084: ST_TO_ADDR
// if not depot then
18085: LD_VAR 0 1
18089: NOT
18090: IFFALSE 18094
// exit ;
18092: GO 18129
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
18094: LD_VAR 0 1
18098: PUSH
18099: LD_INT 1
18101: ARRAY
18102: PPUSH
18103: CALL_OW 250
18107: PPUSH
18108: LD_VAR 0 1
18112: PUSH
18113: LD_INT 1
18115: ARRAY
18116: PPUSH
18117: CALL_OW 251
18121: PPUSH
18122: LD_INT 70
18124: PPUSH
18125: CALL_OW 495
// end ;
18129: PPOPN 1
18131: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
18132: LD_EXP 53
18136: PUSH
18137: LD_EXP 87
18141: AND
18142: IFFALSE 18353
18144: GO 18146
18146: DISABLE
18147: LD_INT 0
18149: PPUSH
18150: PPUSH
18151: PPUSH
18152: PPUSH
18153: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18154: LD_ADDR_VAR 0 5
18158: PUSH
18159: LD_INT 22
18161: PUSH
18162: LD_OWVAR 2
18166: PUSH
18167: EMPTY
18168: LIST
18169: LIST
18170: PUSH
18171: LD_INT 21
18173: PUSH
18174: LD_INT 1
18176: PUSH
18177: EMPTY
18178: LIST
18179: LIST
18180: PUSH
18181: EMPTY
18182: LIST
18183: LIST
18184: PPUSH
18185: CALL_OW 69
18189: ST_TO_ADDR
// if not tmp then
18190: LD_VAR 0 5
18194: NOT
18195: IFFALSE 18199
// exit ;
18197: GO 18353
// for i in tmp do
18199: LD_ADDR_VAR 0 1
18203: PUSH
18204: LD_VAR 0 5
18208: PUSH
18209: FOR_IN
18210: IFFALSE 18351
// begin d := rand ( 0 , 5 ) ;
18212: LD_ADDR_VAR 0 4
18216: PUSH
18217: LD_INT 0
18219: PPUSH
18220: LD_INT 5
18222: PPUSH
18223: CALL_OW 12
18227: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
18228: LD_ADDR_VAR 0 2
18232: PUSH
18233: LD_VAR 0 1
18237: PPUSH
18238: CALL_OW 250
18242: PPUSH
18243: LD_VAR 0 4
18247: PPUSH
18248: LD_INT 3
18250: PPUSH
18251: LD_INT 12
18253: PPUSH
18254: CALL_OW 12
18258: PPUSH
18259: CALL_OW 272
18263: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
18264: LD_ADDR_VAR 0 3
18268: PUSH
18269: LD_VAR 0 1
18273: PPUSH
18274: CALL_OW 251
18278: PPUSH
18279: LD_VAR 0 4
18283: PPUSH
18284: LD_INT 3
18286: PPUSH
18287: LD_INT 12
18289: PPUSH
18290: CALL_OW 12
18294: PPUSH
18295: CALL_OW 273
18299: ST_TO_ADDR
// if ValidHex ( x , y ) then
18300: LD_VAR 0 2
18304: PPUSH
18305: LD_VAR 0 3
18309: PPUSH
18310: CALL_OW 488
18314: IFFALSE 18349
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
18316: LD_VAR 0 1
18320: PPUSH
18321: LD_VAR 0 2
18325: PPUSH
18326: LD_VAR 0 3
18330: PPUSH
18331: LD_INT 3
18333: PPUSH
18334: LD_INT 6
18336: PPUSH
18337: CALL_OW 12
18341: PPUSH
18342: LD_INT 1
18344: PPUSH
18345: CALL_OW 483
// end ;
18349: GO 18209
18351: POP
18352: POP
// end ;
18353: PPOPN 5
18355: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
18356: LD_EXP 53
18360: PUSH
18361: LD_EXP 88
18365: AND
18366: IFFALSE 18460
18368: GO 18370
18370: DISABLE
18371: LD_INT 0
18373: PPUSH
18374: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
18375: LD_ADDR_VAR 0 2
18379: PUSH
18380: LD_INT 22
18382: PUSH
18383: LD_OWVAR 2
18387: PUSH
18388: EMPTY
18389: LIST
18390: LIST
18391: PUSH
18392: LD_INT 32
18394: PUSH
18395: LD_INT 1
18397: PUSH
18398: EMPTY
18399: LIST
18400: LIST
18401: PUSH
18402: LD_INT 21
18404: PUSH
18405: LD_INT 2
18407: PUSH
18408: EMPTY
18409: LIST
18410: LIST
18411: PUSH
18412: EMPTY
18413: LIST
18414: LIST
18415: LIST
18416: PPUSH
18417: CALL_OW 69
18421: ST_TO_ADDR
// if not tmp then
18422: LD_VAR 0 2
18426: NOT
18427: IFFALSE 18431
// exit ;
18429: GO 18460
// for i in tmp do
18431: LD_ADDR_VAR 0 1
18435: PUSH
18436: LD_VAR 0 2
18440: PUSH
18441: FOR_IN
18442: IFFALSE 18458
// SetFuel ( i , 0 ) ;
18444: LD_VAR 0 1
18448: PPUSH
18449: LD_INT 0
18451: PPUSH
18452: CALL_OW 240
18456: GO 18441
18458: POP
18459: POP
// end ;
18460: PPOPN 2
18462: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
18463: LD_EXP 53
18467: PUSH
18468: LD_EXP 89
18472: AND
18473: IFFALSE 18539
18475: GO 18477
18477: DISABLE
18478: LD_INT 0
18480: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
18481: LD_ADDR_VAR 0 1
18485: PUSH
18486: LD_INT 22
18488: PUSH
18489: LD_OWVAR 2
18493: PUSH
18494: EMPTY
18495: LIST
18496: LIST
18497: PUSH
18498: LD_INT 30
18500: PUSH
18501: LD_INT 29
18503: PUSH
18504: EMPTY
18505: LIST
18506: LIST
18507: PUSH
18508: EMPTY
18509: LIST
18510: LIST
18511: PPUSH
18512: CALL_OW 69
18516: ST_TO_ADDR
// if not tmp then
18517: LD_VAR 0 1
18521: NOT
18522: IFFALSE 18526
// exit ;
18524: GO 18539
// DestroyUnit ( tmp [ 1 ] ) ;
18526: LD_VAR 0 1
18530: PUSH
18531: LD_INT 1
18533: ARRAY
18534: PPUSH
18535: CALL_OW 65
// end ;
18539: PPOPN 1
18541: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
18542: LD_EXP 53
18546: PUSH
18547: LD_EXP 91
18551: AND
18552: IFFALSE 18681
18554: GO 18556
18556: DISABLE
18557: LD_INT 0
18559: PPUSH
// begin uc_side := 0 ;
18560: LD_ADDR_OWVAR 20
18564: PUSH
18565: LD_INT 0
18567: ST_TO_ADDR
// uc_nation := nation_arabian ;
18568: LD_ADDR_OWVAR 21
18572: PUSH
18573: LD_INT 2
18575: ST_TO_ADDR
// hc_gallery :=  ;
18576: LD_ADDR_OWVAR 33
18580: PUSH
18581: LD_STRING 
18583: ST_TO_ADDR
// hc_name :=  ;
18584: LD_ADDR_OWVAR 26
18588: PUSH
18589: LD_STRING 
18591: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
18592: LD_INT 1
18594: PPUSH
18595: LD_INT 11
18597: PPUSH
18598: LD_INT 10
18600: PPUSH
18601: CALL_OW 380
// un := CreateHuman ;
18605: LD_ADDR_VAR 0 1
18609: PUSH
18610: CALL_OW 44
18614: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18615: LD_VAR 0 1
18619: PPUSH
18620: LD_INT 1
18622: PPUSH
18623: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
18627: LD_INT 35
18629: PPUSH
18630: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
18634: LD_VAR 0 1
18638: PPUSH
18639: LD_INT 22
18641: PUSH
18642: LD_OWVAR 2
18646: PUSH
18647: EMPTY
18648: LIST
18649: LIST
18650: PPUSH
18651: CALL_OW 69
18655: PPUSH
18656: LD_VAR 0 1
18660: PPUSH
18661: CALL_OW 74
18665: PPUSH
18666: CALL_OW 115
// until IsDead ( un ) ;
18670: LD_VAR 0 1
18674: PPUSH
18675: CALL_OW 301
18679: IFFALSE 18627
// end ;
18681: PPOPN 1
18683: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
18684: LD_EXP 53
18688: PUSH
18689: LD_EXP 93
18693: AND
18694: IFFALSE 18706
18696: GO 18698
18698: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
18699: LD_STRING earthquake(getX(game), 0, 32)
18701: PPUSH
18702: CALL_OW 559
18706: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
18707: LD_EXP 53
18711: PUSH
18712: LD_EXP 94
18716: AND
18717: IFFALSE 18808
18719: GO 18721
18721: DISABLE
18722: LD_INT 0
18724: PPUSH
// begin enable ;
18725: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
18726: LD_ADDR_VAR 0 1
18730: PUSH
18731: LD_INT 22
18733: PUSH
18734: LD_OWVAR 2
18738: PUSH
18739: EMPTY
18740: LIST
18741: LIST
18742: PUSH
18743: LD_INT 21
18745: PUSH
18746: LD_INT 2
18748: PUSH
18749: EMPTY
18750: LIST
18751: LIST
18752: PUSH
18753: LD_INT 33
18755: PUSH
18756: LD_INT 3
18758: PUSH
18759: EMPTY
18760: LIST
18761: LIST
18762: PUSH
18763: EMPTY
18764: LIST
18765: LIST
18766: LIST
18767: PPUSH
18768: CALL_OW 69
18772: ST_TO_ADDR
// if not tmp then
18773: LD_VAR 0 1
18777: NOT
18778: IFFALSE 18782
// exit ;
18780: GO 18808
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
18782: LD_VAR 0 1
18786: PUSH
18787: LD_INT 1
18789: PPUSH
18790: LD_VAR 0 1
18794: PPUSH
18795: CALL_OW 12
18799: ARRAY
18800: PPUSH
18801: LD_INT 1
18803: PPUSH
18804: CALL_OW 234
// end ;
18808: PPOPN 1
18810: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
18811: LD_EXP 53
18815: PUSH
18816: LD_EXP 95
18820: AND
18821: IFFALSE 18962
18823: GO 18825
18825: DISABLE
18826: LD_INT 0
18828: PPUSH
18829: PPUSH
18830: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18831: LD_ADDR_VAR 0 3
18835: PUSH
18836: LD_INT 22
18838: PUSH
18839: LD_OWVAR 2
18843: PUSH
18844: EMPTY
18845: LIST
18846: LIST
18847: PUSH
18848: LD_INT 25
18850: PUSH
18851: LD_INT 1
18853: PUSH
18854: EMPTY
18855: LIST
18856: LIST
18857: PUSH
18858: EMPTY
18859: LIST
18860: LIST
18861: PPUSH
18862: CALL_OW 69
18866: ST_TO_ADDR
// if not tmp then
18867: LD_VAR 0 3
18871: NOT
18872: IFFALSE 18876
// exit ;
18874: GO 18962
// un := tmp [ rand ( 1 , tmp ) ] ;
18876: LD_ADDR_VAR 0 2
18880: PUSH
18881: LD_VAR 0 3
18885: PUSH
18886: LD_INT 1
18888: PPUSH
18889: LD_VAR 0 3
18893: PPUSH
18894: CALL_OW 12
18898: ARRAY
18899: ST_TO_ADDR
// if Crawls ( un ) then
18900: LD_VAR 0 2
18904: PPUSH
18905: CALL_OW 318
18909: IFFALSE 18920
// ComWalk ( un ) ;
18911: LD_VAR 0 2
18915: PPUSH
18916: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
18920: LD_VAR 0 2
18924: PPUSH
18925: LD_INT 9
18927: PPUSH
18928: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
18932: LD_INT 28
18934: PPUSH
18935: LD_OWVAR 2
18939: PPUSH
18940: LD_INT 2
18942: PPUSH
18943: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
18947: LD_INT 29
18949: PPUSH
18950: LD_OWVAR 2
18954: PPUSH
18955: LD_INT 2
18957: PPUSH
18958: CALL_OW 322
// end ;
18962: PPOPN 3
18964: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
18965: LD_EXP 53
18969: PUSH
18970: LD_EXP 96
18974: AND
18975: IFFALSE 19086
18977: GO 18979
18979: DISABLE
18980: LD_INT 0
18982: PPUSH
18983: PPUSH
18984: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18985: LD_ADDR_VAR 0 3
18989: PUSH
18990: LD_INT 22
18992: PUSH
18993: LD_OWVAR 2
18997: PUSH
18998: EMPTY
18999: LIST
19000: LIST
19001: PUSH
19002: LD_INT 25
19004: PUSH
19005: LD_INT 1
19007: PUSH
19008: EMPTY
19009: LIST
19010: LIST
19011: PUSH
19012: EMPTY
19013: LIST
19014: LIST
19015: PPUSH
19016: CALL_OW 69
19020: ST_TO_ADDR
// if not tmp then
19021: LD_VAR 0 3
19025: NOT
19026: IFFALSE 19030
// exit ;
19028: GO 19086
// un := tmp [ rand ( 1 , tmp ) ] ;
19030: LD_ADDR_VAR 0 2
19034: PUSH
19035: LD_VAR 0 3
19039: PUSH
19040: LD_INT 1
19042: PPUSH
19043: LD_VAR 0 3
19047: PPUSH
19048: CALL_OW 12
19052: ARRAY
19053: ST_TO_ADDR
// if Crawls ( un ) then
19054: LD_VAR 0 2
19058: PPUSH
19059: CALL_OW 318
19063: IFFALSE 19074
// ComWalk ( un ) ;
19065: LD_VAR 0 2
19069: PPUSH
19070: CALL_OW 138
// SetClass ( un , class_mortar ) ;
19074: LD_VAR 0 2
19078: PPUSH
19079: LD_INT 8
19081: PPUSH
19082: CALL_OW 336
// end ;
19086: PPOPN 3
19088: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
19089: LD_EXP 53
19093: PUSH
19094: LD_EXP 97
19098: AND
19099: IFFALSE 19243
19101: GO 19103
19103: DISABLE
19104: LD_INT 0
19106: PPUSH
19107: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
19108: LD_ADDR_VAR 0 2
19112: PUSH
19113: LD_INT 22
19115: PUSH
19116: LD_OWVAR 2
19120: PUSH
19121: EMPTY
19122: LIST
19123: LIST
19124: PUSH
19125: LD_INT 21
19127: PUSH
19128: LD_INT 2
19130: PUSH
19131: EMPTY
19132: LIST
19133: LIST
19134: PUSH
19135: LD_INT 2
19137: PUSH
19138: LD_INT 34
19140: PUSH
19141: LD_INT 12
19143: PUSH
19144: EMPTY
19145: LIST
19146: LIST
19147: PUSH
19148: LD_INT 34
19150: PUSH
19151: LD_INT 51
19153: PUSH
19154: EMPTY
19155: LIST
19156: LIST
19157: PUSH
19158: LD_INT 34
19160: PUSH
19161: LD_INT 32
19163: PUSH
19164: EMPTY
19165: LIST
19166: LIST
19167: PUSH
19168: EMPTY
19169: LIST
19170: LIST
19171: LIST
19172: LIST
19173: PUSH
19174: EMPTY
19175: LIST
19176: LIST
19177: LIST
19178: PPUSH
19179: CALL_OW 69
19183: ST_TO_ADDR
// if not tmp then
19184: LD_VAR 0 2
19188: NOT
19189: IFFALSE 19193
// exit ;
19191: GO 19243
// for i in tmp do
19193: LD_ADDR_VAR 0 1
19197: PUSH
19198: LD_VAR 0 2
19202: PUSH
19203: FOR_IN
19204: IFFALSE 19241
// if GetCargo ( i , mat_artifact ) = 0 then
19206: LD_VAR 0 1
19210: PPUSH
19211: LD_INT 4
19213: PPUSH
19214: CALL_OW 289
19218: PUSH
19219: LD_INT 0
19221: EQUAL
19222: IFFALSE 19239
// SetCargo ( i , mat_siberit , 100 ) ;
19224: LD_VAR 0 1
19228: PPUSH
19229: LD_INT 3
19231: PPUSH
19232: LD_INT 100
19234: PPUSH
19235: CALL_OW 290
19239: GO 19203
19241: POP
19242: POP
// end ;
19243: PPOPN 2
19245: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
19246: LD_EXP 53
19250: PUSH
19251: LD_EXP 98
19255: AND
19256: IFFALSE 19439
19258: GO 19260
19260: DISABLE
19261: LD_INT 0
19263: PPUSH
19264: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19265: LD_ADDR_VAR 0 2
19269: PUSH
19270: LD_INT 22
19272: PUSH
19273: LD_OWVAR 2
19277: PUSH
19278: EMPTY
19279: LIST
19280: LIST
19281: PPUSH
19282: CALL_OW 69
19286: ST_TO_ADDR
// if not tmp then
19287: LD_VAR 0 2
19291: NOT
19292: IFFALSE 19296
// exit ;
19294: GO 19439
// for i := 1 to 2 do
19296: LD_ADDR_VAR 0 1
19300: PUSH
19301: DOUBLE
19302: LD_INT 1
19304: DEC
19305: ST_TO_ADDR
19306: LD_INT 2
19308: PUSH
19309: FOR_TO
19310: IFFALSE 19437
// begin uc_side := your_side ;
19312: LD_ADDR_OWVAR 20
19316: PUSH
19317: LD_OWVAR 2
19321: ST_TO_ADDR
// uc_nation := nation_american ;
19322: LD_ADDR_OWVAR 21
19326: PUSH
19327: LD_INT 1
19329: ST_TO_ADDR
// vc_chassis := us_morphling ;
19330: LD_ADDR_OWVAR 37
19334: PUSH
19335: LD_INT 5
19337: ST_TO_ADDR
// vc_engine := engine_siberite ;
19338: LD_ADDR_OWVAR 39
19342: PUSH
19343: LD_INT 3
19345: ST_TO_ADDR
// vc_control := control_computer ;
19346: LD_ADDR_OWVAR 38
19350: PUSH
19351: LD_INT 3
19353: ST_TO_ADDR
// vc_weapon := us_double_laser ;
19354: LD_ADDR_OWVAR 40
19358: PUSH
19359: LD_INT 10
19361: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
19362: LD_VAR 0 2
19366: PUSH
19367: LD_INT 1
19369: ARRAY
19370: PPUSH
19371: CALL_OW 310
19375: NOT
19376: IFFALSE 19423
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
19378: CALL_OW 45
19382: PPUSH
19383: LD_VAR 0 2
19387: PUSH
19388: LD_INT 1
19390: ARRAY
19391: PPUSH
19392: CALL_OW 250
19396: PPUSH
19397: LD_VAR 0 2
19401: PUSH
19402: LD_INT 1
19404: ARRAY
19405: PPUSH
19406: CALL_OW 251
19410: PPUSH
19411: LD_INT 12
19413: PPUSH
19414: LD_INT 1
19416: PPUSH
19417: CALL_OW 50
19421: GO 19435
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
19423: CALL_OW 45
19427: PPUSH
19428: LD_INT 1
19430: PPUSH
19431: CALL_OW 51
// end ;
19435: GO 19309
19437: POP
19438: POP
// end ;
19439: PPOPN 2
19441: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
19442: LD_EXP 53
19446: PUSH
19447: LD_EXP 99
19451: AND
19452: IFFALSE 19674
19454: GO 19456
19456: DISABLE
19457: LD_INT 0
19459: PPUSH
19460: PPUSH
19461: PPUSH
19462: PPUSH
19463: PPUSH
19464: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19465: LD_ADDR_VAR 0 6
19469: PUSH
19470: LD_INT 22
19472: PUSH
19473: LD_OWVAR 2
19477: PUSH
19478: EMPTY
19479: LIST
19480: LIST
19481: PUSH
19482: LD_INT 21
19484: PUSH
19485: LD_INT 1
19487: PUSH
19488: EMPTY
19489: LIST
19490: LIST
19491: PUSH
19492: LD_INT 3
19494: PUSH
19495: LD_INT 23
19497: PUSH
19498: LD_INT 0
19500: PUSH
19501: EMPTY
19502: LIST
19503: LIST
19504: PUSH
19505: EMPTY
19506: LIST
19507: LIST
19508: PUSH
19509: EMPTY
19510: LIST
19511: LIST
19512: LIST
19513: PPUSH
19514: CALL_OW 69
19518: ST_TO_ADDR
// if not tmp then
19519: LD_VAR 0 6
19523: NOT
19524: IFFALSE 19528
// exit ;
19526: GO 19674
// s1 := rand ( 1 , 4 ) ;
19528: LD_ADDR_VAR 0 2
19532: PUSH
19533: LD_INT 1
19535: PPUSH
19536: LD_INT 4
19538: PPUSH
19539: CALL_OW 12
19543: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
19544: LD_ADDR_VAR 0 4
19548: PUSH
19549: LD_VAR 0 6
19553: PUSH
19554: LD_INT 1
19556: ARRAY
19557: PPUSH
19558: LD_VAR 0 2
19562: PPUSH
19563: CALL_OW 259
19567: ST_TO_ADDR
// if s1 = 1 then
19568: LD_VAR 0 2
19572: PUSH
19573: LD_INT 1
19575: EQUAL
19576: IFFALSE 19596
// s2 := rand ( 2 , 4 ) else
19578: LD_ADDR_VAR 0 3
19582: PUSH
19583: LD_INT 2
19585: PPUSH
19586: LD_INT 4
19588: PPUSH
19589: CALL_OW 12
19593: ST_TO_ADDR
19594: GO 19604
// s2 := 1 ;
19596: LD_ADDR_VAR 0 3
19600: PUSH
19601: LD_INT 1
19603: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
19604: LD_ADDR_VAR 0 5
19608: PUSH
19609: LD_VAR 0 6
19613: PUSH
19614: LD_INT 1
19616: ARRAY
19617: PPUSH
19618: LD_VAR 0 3
19622: PPUSH
19623: CALL_OW 259
19627: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
19628: LD_VAR 0 6
19632: PUSH
19633: LD_INT 1
19635: ARRAY
19636: PPUSH
19637: LD_VAR 0 2
19641: PPUSH
19642: LD_VAR 0 5
19646: PPUSH
19647: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
19651: LD_VAR 0 6
19655: PUSH
19656: LD_INT 1
19658: ARRAY
19659: PPUSH
19660: LD_VAR 0 3
19664: PPUSH
19665: LD_VAR 0 4
19669: PPUSH
19670: CALL_OW 237
// end ;
19674: PPOPN 6
19676: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
19677: LD_EXP 53
19681: PUSH
19682: LD_EXP 100
19686: AND
19687: IFFALSE 19766
19689: GO 19691
19691: DISABLE
19692: LD_INT 0
19694: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
19695: LD_ADDR_VAR 0 1
19699: PUSH
19700: LD_INT 22
19702: PUSH
19703: LD_OWVAR 2
19707: PUSH
19708: EMPTY
19709: LIST
19710: LIST
19711: PUSH
19712: LD_INT 30
19714: PUSH
19715: LD_INT 3
19717: PUSH
19718: EMPTY
19719: LIST
19720: LIST
19721: PUSH
19722: EMPTY
19723: LIST
19724: LIST
19725: PPUSH
19726: CALL_OW 69
19730: ST_TO_ADDR
// if not tmp then
19731: LD_VAR 0 1
19735: NOT
19736: IFFALSE 19740
// exit ;
19738: GO 19766
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
19740: LD_VAR 0 1
19744: PUSH
19745: LD_INT 1
19747: PPUSH
19748: LD_VAR 0 1
19752: PPUSH
19753: CALL_OW 12
19757: ARRAY
19758: PPUSH
19759: LD_INT 1
19761: PPUSH
19762: CALL_OW 234
// end ;
19766: PPOPN 1
19768: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
19769: LD_EXP 53
19773: PUSH
19774: LD_EXP 101
19778: AND
19779: IFFALSE 19891
19781: GO 19783
19783: DISABLE
19784: LD_INT 0
19786: PPUSH
19787: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
19788: LD_ADDR_VAR 0 2
19792: PUSH
19793: LD_INT 22
19795: PUSH
19796: LD_OWVAR 2
19800: PUSH
19801: EMPTY
19802: LIST
19803: LIST
19804: PUSH
19805: LD_INT 2
19807: PUSH
19808: LD_INT 30
19810: PUSH
19811: LD_INT 27
19813: PUSH
19814: EMPTY
19815: LIST
19816: LIST
19817: PUSH
19818: LD_INT 30
19820: PUSH
19821: LD_INT 26
19823: PUSH
19824: EMPTY
19825: LIST
19826: LIST
19827: PUSH
19828: LD_INT 30
19830: PUSH
19831: LD_INT 28
19833: PUSH
19834: EMPTY
19835: LIST
19836: LIST
19837: PUSH
19838: EMPTY
19839: LIST
19840: LIST
19841: LIST
19842: LIST
19843: PUSH
19844: EMPTY
19845: LIST
19846: LIST
19847: PPUSH
19848: CALL_OW 69
19852: ST_TO_ADDR
// if not tmp then
19853: LD_VAR 0 2
19857: NOT
19858: IFFALSE 19862
// exit ;
19860: GO 19891
// for i in tmp do
19862: LD_ADDR_VAR 0 1
19866: PUSH
19867: LD_VAR 0 2
19871: PUSH
19872: FOR_IN
19873: IFFALSE 19889
// SetLives ( i , 1 ) ;
19875: LD_VAR 0 1
19879: PPUSH
19880: LD_INT 1
19882: PPUSH
19883: CALL_OW 234
19887: GO 19872
19889: POP
19890: POP
// end ;
19891: PPOPN 2
19893: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
19894: LD_EXP 53
19898: PUSH
19899: LD_EXP 102
19903: AND
19904: IFFALSE 20191
19906: GO 19908
19908: DISABLE
19909: LD_INT 0
19911: PPUSH
19912: PPUSH
19913: PPUSH
// begin i := rand ( 1 , 7 ) ;
19914: LD_ADDR_VAR 0 1
19918: PUSH
19919: LD_INT 1
19921: PPUSH
19922: LD_INT 7
19924: PPUSH
19925: CALL_OW 12
19929: ST_TO_ADDR
// case i of 1 :
19930: LD_VAR 0 1
19934: PUSH
19935: LD_INT 1
19937: DOUBLE
19938: EQUAL
19939: IFTRUE 19943
19941: GO 19953
19943: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
19944: LD_STRING earthquake(getX(game), 0, 32)
19946: PPUSH
19947: CALL_OW 559
19951: GO 20191
19953: LD_INT 2
19955: DOUBLE
19956: EQUAL
19957: IFTRUE 19961
19959: GO 19975
19961: POP
// begin ToLua ( displayStucuk(); ) ;
19962: LD_STRING displayStucuk();
19964: PPUSH
19965: CALL_OW 559
// ResetFog ;
19969: CALL_OW 335
// end ; 3 :
19973: GO 20191
19975: LD_INT 3
19977: DOUBLE
19978: EQUAL
19979: IFTRUE 19983
19981: GO 20087
19983: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19984: LD_ADDR_VAR 0 2
19988: PUSH
19989: LD_INT 22
19991: PUSH
19992: LD_OWVAR 2
19996: PUSH
19997: EMPTY
19998: LIST
19999: LIST
20000: PUSH
20001: LD_INT 25
20003: PUSH
20004: LD_INT 1
20006: PUSH
20007: EMPTY
20008: LIST
20009: LIST
20010: PUSH
20011: EMPTY
20012: LIST
20013: LIST
20014: PPUSH
20015: CALL_OW 69
20019: ST_TO_ADDR
// if not tmp then
20020: LD_VAR 0 2
20024: NOT
20025: IFFALSE 20029
// exit ;
20027: GO 20191
// un := tmp [ rand ( 1 , tmp ) ] ;
20029: LD_ADDR_VAR 0 3
20033: PUSH
20034: LD_VAR 0 2
20038: PUSH
20039: LD_INT 1
20041: PPUSH
20042: LD_VAR 0 2
20046: PPUSH
20047: CALL_OW 12
20051: ARRAY
20052: ST_TO_ADDR
// if Crawls ( un ) then
20053: LD_VAR 0 3
20057: PPUSH
20058: CALL_OW 318
20062: IFFALSE 20073
// ComWalk ( un ) ;
20064: LD_VAR 0 3
20068: PPUSH
20069: CALL_OW 138
// SetClass ( un , class_mortar ) ;
20073: LD_VAR 0 3
20077: PPUSH
20078: LD_INT 8
20080: PPUSH
20081: CALL_OW 336
// end ; 4 :
20085: GO 20191
20087: LD_INT 4
20089: DOUBLE
20090: EQUAL
20091: IFTRUE 20095
20093: GO 20169
20095: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
20096: LD_ADDR_VAR 0 2
20100: PUSH
20101: LD_INT 22
20103: PUSH
20104: LD_OWVAR 2
20108: PUSH
20109: EMPTY
20110: LIST
20111: LIST
20112: PUSH
20113: LD_INT 30
20115: PUSH
20116: LD_INT 29
20118: PUSH
20119: EMPTY
20120: LIST
20121: LIST
20122: PUSH
20123: EMPTY
20124: LIST
20125: LIST
20126: PPUSH
20127: CALL_OW 69
20131: ST_TO_ADDR
// if not tmp then
20132: LD_VAR 0 2
20136: NOT
20137: IFFALSE 20141
// exit ;
20139: GO 20191
// CenterNowOnUnits ( tmp [ 1 ] ) ;
20141: LD_VAR 0 2
20145: PUSH
20146: LD_INT 1
20148: ARRAY
20149: PPUSH
20150: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
20154: LD_VAR 0 2
20158: PUSH
20159: LD_INT 1
20161: ARRAY
20162: PPUSH
20163: CALL_OW 65
// end ; 5 .. 7 :
20167: GO 20191
20169: LD_INT 5
20171: DOUBLE
20172: GREATEREQUAL
20173: IFFALSE 20181
20175: LD_INT 7
20177: DOUBLE
20178: LESSEQUAL
20179: IFTRUE 20183
20181: GO 20190
20183: POP
// StreamSibBomb ; end ;
20184: CALL 16428 0 0
20188: GO 20191
20190: POP
// end ;
20191: PPOPN 3
20193: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
20194: LD_EXP 53
20198: PUSH
20199: LD_EXP 103
20203: AND
20204: IFFALSE 20360
20206: GO 20208
20208: DISABLE
20209: LD_INT 0
20211: PPUSH
20212: PPUSH
20213: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
20214: LD_ADDR_VAR 0 2
20218: PUSH
20219: LD_INT 81
20221: PUSH
20222: LD_OWVAR 2
20226: PUSH
20227: EMPTY
20228: LIST
20229: LIST
20230: PUSH
20231: LD_INT 2
20233: PUSH
20234: LD_INT 21
20236: PUSH
20237: LD_INT 1
20239: PUSH
20240: EMPTY
20241: LIST
20242: LIST
20243: PUSH
20244: LD_INT 21
20246: PUSH
20247: LD_INT 2
20249: PUSH
20250: EMPTY
20251: LIST
20252: LIST
20253: PUSH
20254: EMPTY
20255: LIST
20256: LIST
20257: LIST
20258: PUSH
20259: EMPTY
20260: LIST
20261: LIST
20262: PPUSH
20263: CALL_OW 69
20267: ST_TO_ADDR
// if not tmp then
20268: LD_VAR 0 2
20272: NOT
20273: IFFALSE 20277
// exit ;
20275: GO 20360
// p := 0 ;
20277: LD_ADDR_VAR 0 3
20281: PUSH
20282: LD_INT 0
20284: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
20285: LD_INT 35
20287: PPUSH
20288: CALL_OW 67
// p := p + 1 ;
20292: LD_ADDR_VAR 0 3
20296: PUSH
20297: LD_VAR 0 3
20301: PUSH
20302: LD_INT 1
20304: PLUS
20305: ST_TO_ADDR
// for i in tmp do
20306: LD_ADDR_VAR 0 1
20310: PUSH
20311: LD_VAR 0 2
20315: PUSH
20316: FOR_IN
20317: IFFALSE 20348
// if GetLives ( i ) < 1000 then
20319: LD_VAR 0 1
20323: PPUSH
20324: CALL_OW 256
20328: PUSH
20329: LD_INT 1000
20331: LESS
20332: IFFALSE 20346
// SetLives ( i , 1000 ) ;
20334: LD_VAR 0 1
20338: PPUSH
20339: LD_INT 1000
20341: PPUSH
20342: CALL_OW 234
20346: GO 20316
20348: POP
20349: POP
// until p > 20 ;
20350: LD_VAR 0 3
20354: PUSH
20355: LD_INT 20
20357: GREATER
20358: IFFALSE 20285
// end ;
20360: PPOPN 3
20362: END
// every 0 0$1 trigger StreamModeActive and sTime do
20363: LD_EXP 53
20367: PUSH
20368: LD_EXP 104
20372: AND
20373: IFFALSE 20408
20375: GO 20377
20377: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
20378: LD_INT 28
20380: PPUSH
20381: LD_OWVAR 2
20385: PPUSH
20386: LD_INT 2
20388: PPUSH
20389: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
20393: LD_INT 30
20395: PPUSH
20396: LD_OWVAR 2
20400: PPUSH
20401: LD_INT 2
20403: PPUSH
20404: CALL_OW 322
// end ;
20408: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
20409: LD_EXP 53
20413: PUSH
20414: LD_EXP 105
20418: AND
20419: IFFALSE 20540
20421: GO 20423
20423: DISABLE
20424: LD_INT 0
20426: PPUSH
20427: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20428: LD_ADDR_VAR 0 2
20432: PUSH
20433: LD_INT 22
20435: PUSH
20436: LD_OWVAR 2
20440: PUSH
20441: EMPTY
20442: LIST
20443: LIST
20444: PUSH
20445: LD_INT 21
20447: PUSH
20448: LD_INT 1
20450: PUSH
20451: EMPTY
20452: LIST
20453: LIST
20454: PUSH
20455: LD_INT 3
20457: PUSH
20458: LD_INT 23
20460: PUSH
20461: LD_INT 0
20463: PUSH
20464: EMPTY
20465: LIST
20466: LIST
20467: PUSH
20468: EMPTY
20469: LIST
20470: LIST
20471: PUSH
20472: EMPTY
20473: LIST
20474: LIST
20475: LIST
20476: PPUSH
20477: CALL_OW 69
20481: ST_TO_ADDR
// if not tmp then
20482: LD_VAR 0 2
20486: NOT
20487: IFFALSE 20491
// exit ;
20489: GO 20540
// for i in tmp do
20491: LD_ADDR_VAR 0 1
20495: PUSH
20496: LD_VAR 0 2
20500: PUSH
20501: FOR_IN
20502: IFFALSE 20538
// begin if Crawls ( i ) then
20504: LD_VAR 0 1
20508: PPUSH
20509: CALL_OW 318
20513: IFFALSE 20524
// ComWalk ( i ) ;
20515: LD_VAR 0 1
20519: PPUSH
20520: CALL_OW 138
// SetClass ( i , 2 ) ;
20524: LD_VAR 0 1
20528: PPUSH
20529: LD_INT 2
20531: PPUSH
20532: CALL_OW 336
// end ;
20536: GO 20501
20538: POP
20539: POP
// end ;
20540: PPOPN 2
20542: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
20543: LD_EXP 53
20547: PUSH
20548: LD_EXP 106
20552: AND
20553: IFFALSE 20841
20555: GO 20557
20557: DISABLE
20558: LD_INT 0
20560: PPUSH
20561: PPUSH
20562: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
20563: LD_OWVAR 2
20567: PPUSH
20568: LD_INT 9
20570: PPUSH
20571: LD_INT 1
20573: PPUSH
20574: LD_INT 1
20576: PPUSH
20577: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
20581: LD_INT 9
20583: PPUSH
20584: LD_OWVAR 2
20588: PPUSH
20589: CALL_OW 343
// uc_side := 9 ;
20593: LD_ADDR_OWVAR 20
20597: PUSH
20598: LD_INT 9
20600: ST_TO_ADDR
// uc_nation := 2 ;
20601: LD_ADDR_OWVAR 21
20605: PUSH
20606: LD_INT 2
20608: ST_TO_ADDR
// hc_name := Dark Warrior ;
20609: LD_ADDR_OWVAR 26
20613: PUSH
20614: LD_STRING Dark Warrior
20616: ST_TO_ADDR
// hc_gallery :=  ;
20617: LD_ADDR_OWVAR 33
20621: PUSH
20622: LD_STRING 
20624: ST_TO_ADDR
// hc_noskilllimit := true ;
20625: LD_ADDR_OWVAR 76
20629: PUSH
20630: LD_INT 1
20632: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
20633: LD_ADDR_OWVAR 31
20637: PUSH
20638: LD_INT 30
20640: PUSH
20641: LD_INT 30
20643: PUSH
20644: LD_INT 30
20646: PUSH
20647: LD_INT 30
20649: PUSH
20650: EMPTY
20651: LIST
20652: LIST
20653: LIST
20654: LIST
20655: ST_TO_ADDR
// un := CreateHuman ;
20656: LD_ADDR_VAR 0 3
20660: PUSH
20661: CALL_OW 44
20665: ST_TO_ADDR
// hc_noskilllimit := false ;
20666: LD_ADDR_OWVAR 76
20670: PUSH
20671: LD_INT 0
20673: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20674: LD_VAR 0 3
20678: PPUSH
20679: LD_INT 1
20681: PPUSH
20682: CALL_OW 51
// ToLua ( playRanger() ) ;
20686: LD_STRING playRanger()
20688: PPUSH
20689: CALL_OW 559
// p := 0 ;
20693: LD_ADDR_VAR 0 2
20697: PUSH
20698: LD_INT 0
20700: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
20701: LD_INT 35
20703: PPUSH
20704: CALL_OW 67
// p := p + 1 ;
20708: LD_ADDR_VAR 0 2
20712: PUSH
20713: LD_VAR 0 2
20717: PUSH
20718: LD_INT 1
20720: PLUS
20721: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
20722: LD_VAR 0 3
20726: PPUSH
20727: CALL_OW 256
20731: PUSH
20732: LD_INT 1000
20734: LESS
20735: IFFALSE 20749
// SetLives ( un , 1000 ) ;
20737: LD_VAR 0 3
20741: PPUSH
20742: LD_INT 1000
20744: PPUSH
20745: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
20749: LD_VAR 0 3
20753: PPUSH
20754: LD_INT 81
20756: PUSH
20757: LD_OWVAR 2
20761: PUSH
20762: EMPTY
20763: LIST
20764: LIST
20765: PUSH
20766: LD_INT 91
20768: PUSH
20769: LD_VAR 0 3
20773: PUSH
20774: LD_INT 30
20776: PUSH
20777: EMPTY
20778: LIST
20779: LIST
20780: LIST
20781: PUSH
20782: EMPTY
20783: LIST
20784: LIST
20785: PPUSH
20786: CALL_OW 69
20790: PPUSH
20791: LD_VAR 0 3
20795: PPUSH
20796: CALL_OW 74
20800: PPUSH
20801: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
20805: LD_VAR 0 2
20809: PUSH
20810: LD_INT 80
20812: GREATER
20813: PUSH
20814: LD_VAR 0 3
20818: PPUSH
20819: CALL_OW 301
20823: OR
20824: IFFALSE 20701
// if un then
20826: LD_VAR 0 3
20830: IFFALSE 20841
// RemoveUnit ( un ) ;
20832: LD_VAR 0 3
20836: PPUSH
20837: CALL_OW 64
// end ;
20841: PPOPN 3
20843: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
20844: LD_EXP 107
20848: IFFALSE 20964
20850: GO 20852
20852: DISABLE
20853: LD_INT 0
20855: PPUSH
20856: PPUSH
20857: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
20858: LD_ADDR_VAR 0 2
20862: PUSH
20863: LD_INT 81
20865: PUSH
20866: LD_OWVAR 2
20870: PUSH
20871: EMPTY
20872: LIST
20873: LIST
20874: PUSH
20875: LD_INT 21
20877: PUSH
20878: LD_INT 1
20880: PUSH
20881: EMPTY
20882: LIST
20883: LIST
20884: PUSH
20885: EMPTY
20886: LIST
20887: LIST
20888: PPUSH
20889: CALL_OW 69
20893: ST_TO_ADDR
// ToLua ( playComputer() ) ;
20894: LD_STRING playComputer()
20896: PPUSH
20897: CALL_OW 559
// if not tmp then
20901: LD_VAR 0 2
20905: NOT
20906: IFFALSE 20910
// exit ;
20908: GO 20964
// for i in tmp do
20910: LD_ADDR_VAR 0 1
20914: PUSH
20915: LD_VAR 0 2
20919: PUSH
20920: FOR_IN
20921: IFFALSE 20962
// for j := 1 to 4 do
20923: LD_ADDR_VAR 0 3
20927: PUSH
20928: DOUBLE
20929: LD_INT 1
20931: DEC
20932: ST_TO_ADDR
20933: LD_INT 4
20935: PUSH
20936: FOR_TO
20937: IFFALSE 20958
// SetSkill ( i , j , 10 ) ;
20939: LD_VAR 0 1
20943: PPUSH
20944: LD_VAR 0 3
20948: PPUSH
20949: LD_INT 10
20951: PPUSH
20952: CALL_OW 237
20956: GO 20936
20958: POP
20959: POP
20960: GO 20920
20962: POP
20963: POP
// end ;
20964: PPOPN 3
20966: END
// every 0 0$1 trigger s30 do var i , tmp ;
20967: LD_EXP 108
20971: IFFALSE 21040
20973: GO 20975
20975: DISABLE
20976: LD_INT 0
20978: PPUSH
20979: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
20980: LD_ADDR_VAR 0 2
20984: PUSH
20985: LD_INT 22
20987: PUSH
20988: LD_OWVAR 2
20992: PUSH
20993: EMPTY
20994: LIST
20995: LIST
20996: PPUSH
20997: CALL_OW 69
21001: ST_TO_ADDR
// if not tmp then
21002: LD_VAR 0 2
21006: NOT
21007: IFFALSE 21011
// exit ;
21009: GO 21040
// for i in tmp do
21011: LD_ADDR_VAR 0 1
21015: PUSH
21016: LD_VAR 0 2
21020: PUSH
21021: FOR_IN
21022: IFFALSE 21038
// SetLives ( i , 300 ) ;
21024: LD_VAR 0 1
21028: PPUSH
21029: LD_INT 300
21031: PPUSH
21032: CALL_OW 234
21036: GO 21021
21038: POP
21039: POP
// end ;
21040: PPOPN 2
21042: END
// every 0 0$1 trigger s60 do var i , tmp ;
21043: LD_EXP 109
21047: IFFALSE 21116
21049: GO 21051
21051: DISABLE
21052: LD_INT 0
21054: PPUSH
21055: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21056: LD_ADDR_VAR 0 2
21060: PUSH
21061: LD_INT 22
21063: PUSH
21064: LD_OWVAR 2
21068: PUSH
21069: EMPTY
21070: LIST
21071: LIST
21072: PPUSH
21073: CALL_OW 69
21077: ST_TO_ADDR
// if not tmp then
21078: LD_VAR 0 2
21082: NOT
21083: IFFALSE 21087
// exit ;
21085: GO 21116
// for i in tmp do
21087: LD_ADDR_VAR 0 1
21091: PUSH
21092: LD_VAR 0 2
21096: PUSH
21097: FOR_IN
21098: IFFALSE 21114
// SetLives ( i , 600 ) ;
21100: LD_VAR 0 1
21104: PPUSH
21105: LD_INT 600
21107: PPUSH
21108: CALL_OW 234
21112: GO 21097
21114: POP
21115: POP
// end ;
21116: PPOPN 2
21118: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
21119: LD_INT 0
21121: PPUSH
// case cmd of 301 :
21122: LD_VAR 0 1
21126: PUSH
21127: LD_INT 301
21129: DOUBLE
21130: EQUAL
21131: IFTRUE 21135
21133: GO 21167
21135: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
21136: LD_VAR 0 6
21140: PPUSH
21141: LD_VAR 0 7
21145: PPUSH
21146: LD_VAR 0 8
21150: PPUSH
21151: LD_VAR 0 4
21155: PPUSH
21156: LD_VAR 0 5
21160: PPUSH
21161: CALL 22368 0 5
21165: GO 21288
21167: LD_INT 302
21169: DOUBLE
21170: EQUAL
21171: IFTRUE 21175
21173: GO 21212
21175: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
21176: LD_VAR 0 6
21180: PPUSH
21181: LD_VAR 0 7
21185: PPUSH
21186: LD_VAR 0 8
21190: PPUSH
21191: LD_VAR 0 9
21195: PPUSH
21196: LD_VAR 0 4
21200: PPUSH
21201: LD_VAR 0 5
21205: PPUSH
21206: CALL 22459 0 6
21210: GO 21288
21212: LD_INT 303
21214: DOUBLE
21215: EQUAL
21216: IFTRUE 21220
21218: GO 21257
21220: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
21221: LD_VAR 0 6
21225: PPUSH
21226: LD_VAR 0 7
21230: PPUSH
21231: LD_VAR 0 8
21235: PPUSH
21236: LD_VAR 0 9
21240: PPUSH
21241: LD_VAR 0 4
21245: PPUSH
21246: LD_VAR 0 5
21250: PPUSH
21251: CALL 21293 0 6
21255: GO 21288
21257: LD_INT 304
21259: DOUBLE
21260: EQUAL
21261: IFTRUE 21265
21263: GO 21287
21265: POP
// hHackTeleport ( unit , x , y ) ; end ;
21266: LD_VAR 0 2
21270: PPUSH
21271: LD_VAR 0 4
21275: PPUSH
21276: LD_VAR 0 5
21280: PPUSH
21281: CALL 23052 0 3
21285: GO 21288
21287: POP
// end ;
21288: LD_VAR 0 12
21292: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
21293: LD_INT 0
21295: PPUSH
21296: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
21297: LD_VAR 0 1
21301: PUSH
21302: LD_INT 1
21304: LESS
21305: PUSH
21306: LD_VAR 0 1
21310: PUSH
21311: LD_INT 3
21313: GREATER
21314: OR
21315: PUSH
21316: LD_VAR 0 5
21320: PPUSH
21321: LD_VAR 0 6
21325: PPUSH
21326: CALL_OW 428
21330: OR
21331: IFFALSE 21335
// exit ;
21333: GO 22055
// uc_side := your_side ;
21335: LD_ADDR_OWVAR 20
21339: PUSH
21340: LD_OWVAR 2
21344: ST_TO_ADDR
// uc_nation := nation ;
21345: LD_ADDR_OWVAR 21
21349: PUSH
21350: LD_VAR 0 1
21354: ST_TO_ADDR
// bc_level = 1 ;
21355: LD_ADDR_OWVAR 43
21359: PUSH
21360: LD_INT 1
21362: ST_TO_ADDR
// case btype of 1 :
21363: LD_VAR 0 2
21367: PUSH
21368: LD_INT 1
21370: DOUBLE
21371: EQUAL
21372: IFTRUE 21376
21374: GO 21387
21376: POP
// bc_type := b_depot ; 2 :
21377: LD_ADDR_OWVAR 42
21381: PUSH
21382: LD_INT 0
21384: ST_TO_ADDR
21385: GO 21999
21387: LD_INT 2
21389: DOUBLE
21390: EQUAL
21391: IFTRUE 21395
21393: GO 21406
21395: POP
// bc_type := b_warehouse ; 3 :
21396: LD_ADDR_OWVAR 42
21400: PUSH
21401: LD_INT 1
21403: ST_TO_ADDR
21404: GO 21999
21406: LD_INT 3
21408: DOUBLE
21409: EQUAL
21410: IFTRUE 21414
21412: GO 21425
21414: POP
// bc_type := b_lab ; 4 .. 9 :
21415: LD_ADDR_OWVAR 42
21419: PUSH
21420: LD_INT 6
21422: ST_TO_ADDR
21423: GO 21999
21425: LD_INT 4
21427: DOUBLE
21428: GREATEREQUAL
21429: IFFALSE 21437
21431: LD_INT 9
21433: DOUBLE
21434: LESSEQUAL
21435: IFTRUE 21439
21437: GO 21491
21439: POP
// begin bc_type := b_lab_half ;
21440: LD_ADDR_OWVAR 42
21444: PUSH
21445: LD_INT 7
21447: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
21448: LD_ADDR_OWVAR 44
21452: PUSH
21453: LD_INT 10
21455: PUSH
21456: LD_INT 11
21458: PUSH
21459: LD_INT 12
21461: PUSH
21462: LD_INT 15
21464: PUSH
21465: LD_INT 14
21467: PUSH
21468: LD_INT 13
21470: PUSH
21471: EMPTY
21472: LIST
21473: LIST
21474: LIST
21475: LIST
21476: LIST
21477: LIST
21478: PUSH
21479: LD_VAR 0 2
21483: PUSH
21484: LD_INT 3
21486: MINUS
21487: ARRAY
21488: ST_TO_ADDR
// end ; 10 .. 13 :
21489: GO 21999
21491: LD_INT 10
21493: DOUBLE
21494: GREATEREQUAL
21495: IFFALSE 21503
21497: LD_INT 13
21499: DOUBLE
21500: LESSEQUAL
21501: IFTRUE 21505
21503: GO 21582
21505: POP
// begin bc_type := b_lab_full ;
21506: LD_ADDR_OWVAR 42
21510: PUSH
21511: LD_INT 8
21513: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
21514: LD_ADDR_OWVAR 44
21518: PUSH
21519: LD_INT 10
21521: PUSH
21522: LD_INT 12
21524: PUSH
21525: LD_INT 14
21527: PUSH
21528: LD_INT 13
21530: PUSH
21531: EMPTY
21532: LIST
21533: LIST
21534: LIST
21535: LIST
21536: PUSH
21537: LD_VAR 0 2
21541: PUSH
21542: LD_INT 9
21544: MINUS
21545: ARRAY
21546: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
21547: LD_ADDR_OWVAR 45
21551: PUSH
21552: LD_INT 11
21554: PUSH
21555: LD_INT 15
21557: PUSH
21558: LD_INT 12
21560: PUSH
21561: LD_INT 15
21563: PUSH
21564: EMPTY
21565: LIST
21566: LIST
21567: LIST
21568: LIST
21569: PUSH
21570: LD_VAR 0 2
21574: PUSH
21575: LD_INT 9
21577: MINUS
21578: ARRAY
21579: ST_TO_ADDR
// end ; 14 :
21580: GO 21999
21582: LD_INT 14
21584: DOUBLE
21585: EQUAL
21586: IFTRUE 21590
21588: GO 21601
21590: POP
// bc_type := b_workshop ; 15 :
21591: LD_ADDR_OWVAR 42
21595: PUSH
21596: LD_INT 2
21598: ST_TO_ADDR
21599: GO 21999
21601: LD_INT 15
21603: DOUBLE
21604: EQUAL
21605: IFTRUE 21609
21607: GO 21620
21609: POP
// bc_type := b_factory ; 16 :
21610: LD_ADDR_OWVAR 42
21614: PUSH
21615: LD_INT 3
21617: ST_TO_ADDR
21618: GO 21999
21620: LD_INT 16
21622: DOUBLE
21623: EQUAL
21624: IFTRUE 21628
21626: GO 21639
21628: POP
// bc_type := b_ext_gun ; 17 :
21629: LD_ADDR_OWVAR 42
21633: PUSH
21634: LD_INT 17
21636: ST_TO_ADDR
21637: GO 21999
21639: LD_INT 17
21641: DOUBLE
21642: EQUAL
21643: IFTRUE 21647
21645: GO 21675
21647: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
21648: LD_ADDR_OWVAR 42
21652: PUSH
21653: LD_INT 19
21655: PUSH
21656: LD_INT 23
21658: PUSH
21659: LD_INT 19
21661: PUSH
21662: EMPTY
21663: LIST
21664: LIST
21665: LIST
21666: PUSH
21667: LD_VAR 0 1
21671: ARRAY
21672: ST_TO_ADDR
21673: GO 21999
21675: LD_INT 18
21677: DOUBLE
21678: EQUAL
21679: IFTRUE 21683
21681: GO 21694
21683: POP
// bc_type := b_ext_radar ; 19 :
21684: LD_ADDR_OWVAR 42
21688: PUSH
21689: LD_INT 20
21691: ST_TO_ADDR
21692: GO 21999
21694: LD_INT 19
21696: DOUBLE
21697: EQUAL
21698: IFTRUE 21702
21700: GO 21713
21702: POP
// bc_type := b_ext_radio ; 20 :
21703: LD_ADDR_OWVAR 42
21707: PUSH
21708: LD_INT 22
21710: ST_TO_ADDR
21711: GO 21999
21713: LD_INT 20
21715: DOUBLE
21716: EQUAL
21717: IFTRUE 21721
21719: GO 21732
21721: POP
// bc_type := b_ext_siberium ; 21 :
21722: LD_ADDR_OWVAR 42
21726: PUSH
21727: LD_INT 21
21729: ST_TO_ADDR
21730: GO 21999
21732: LD_INT 21
21734: DOUBLE
21735: EQUAL
21736: IFTRUE 21740
21738: GO 21751
21740: POP
// bc_type := b_ext_computer ; 22 :
21741: LD_ADDR_OWVAR 42
21745: PUSH
21746: LD_INT 24
21748: ST_TO_ADDR
21749: GO 21999
21751: LD_INT 22
21753: DOUBLE
21754: EQUAL
21755: IFTRUE 21759
21757: GO 21770
21759: POP
// bc_type := b_ext_track ; 23 :
21760: LD_ADDR_OWVAR 42
21764: PUSH
21765: LD_INT 16
21767: ST_TO_ADDR
21768: GO 21999
21770: LD_INT 23
21772: DOUBLE
21773: EQUAL
21774: IFTRUE 21778
21776: GO 21789
21778: POP
// bc_type := b_ext_laser ; 24 :
21779: LD_ADDR_OWVAR 42
21783: PUSH
21784: LD_INT 25
21786: ST_TO_ADDR
21787: GO 21999
21789: LD_INT 24
21791: DOUBLE
21792: EQUAL
21793: IFTRUE 21797
21795: GO 21808
21797: POP
// bc_type := b_control_tower ; 25 :
21798: LD_ADDR_OWVAR 42
21802: PUSH
21803: LD_INT 36
21805: ST_TO_ADDR
21806: GO 21999
21808: LD_INT 25
21810: DOUBLE
21811: EQUAL
21812: IFTRUE 21816
21814: GO 21827
21816: POP
// bc_type := b_breastwork ; 26 :
21817: LD_ADDR_OWVAR 42
21821: PUSH
21822: LD_INT 31
21824: ST_TO_ADDR
21825: GO 21999
21827: LD_INT 26
21829: DOUBLE
21830: EQUAL
21831: IFTRUE 21835
21833: GO 21846
21835: POP
// bc_type := b_bunker ; 27 :
21836: LD_ADDR_OWVAR 42
21840: PUSH
21841: LD_INT 32
21843: ST_TO_ADDR
21844: GO 21999
21846: LD_INT 27
21848: DOUBLE
21849: EQUAL
21850: IFTRUE 21854
21852: GO 21865
21854: POP
// bc_type := b_turret ; 28 :
21855: LD_ADDR_OWVAR 42
21859: PUSH
21860: LD_INT 33
21862: ST_TO_ADDR
21863: GO 21999
21865: LD_INT 28
21867: DOUBLE
21868: EQUAL
21869: IFTRUE 21873
21871: GO 21884
21873: POP
// bc_type := b_armoury ; 29 :
21874: LD_ADDR_OWVAR 42
21878: PUSH
21879: LD_INT 4
21881: ST_TO_ADDR
21882: GO 21999
21884: LD_INT 29
21886: DOUBLE
21887: EQUAL
21888: IFTRUE 21892
21890: GO 21903
21892: POP
// bc_type := b_barracks ; 30 :
21893: LD_ADDR_OWVAR 42
21897: PUSH
21898: LD_INT 5
21900: ST_TO_ADDR
21901: GO 21999
21903: LD_INT 30
21905: DOUBLE
21906: EQUAL
21907: IFTRUE 21911
21909: GO 21922
21911: POP
// bc_type := b_solar_power ; 31 :
21912: LD_ADDR_OWVAR 42
21916: PUSH
21917: LD_INT 27
21919: ST_TO_ADDR
21920: GO 21999
21922: LD_INT 31
21924: DOUBLE
21925: EQUAL
21926: IFTRUE 21930
21928: GO 21941
21930: POP
// bc_type := b_oil_power ; 32 :
21931: LD_ADDR_OWVAR 42
21935: PUSH
21936: LD_INT 26
21938: ST_TO_ADDR
21939: GO 21999
21941: LD_INT 32
21943: DOUBLE
21944: EQUAL
21945: IFTRUE 21949
21947: GO 21960
21949: POP
// bc_type := b_siberite_power ; 33 :
21950: LD_ADDR_OWVAR 42
21954: PUSH
21955: LD_INT 28
21957: ST_TO_ADDR
21958: GO 21999
21960: LD_INT 33
21962: DOUBLE
21963: EQUAL
21964: IFTRUE 21968
21966: GO 21979
21968: POP
// bc_type := b_oil_mine ; 34 :
21969: LD_ADDR_OWVAR 42
21973: PUSH
21974: LD_INT 29
21976: ST_TO_ADDR
21977: GO 21999
21979: LD_INT 34
21981: DOUBLE
21982: EQUAL
21983: IFTRUE 21987
21985: GO 21998
21987: POP
// bc_type := b_siberite_mine ; end ;
21988: LD_ADDR_OWVAR 42
21992: PUSH
21993: LD_INT 30
21995: ST_TO_ADDR
21996: GO 21999
21998: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
21999: LD_ADDR_VAR 0 8
22003: PUSH
22004: LD_VAR 0 5
22008: PPUSH
22009: LD_VAR 0 6
22013: PPUSH
22014: LD_VAR 0 3
22018: PPUSH
22019: CALL_OW 47
22023: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
22024: LD_OWVAR 42
22028: PUSH
22029: LD_INT 32
22031: PUSH
22032: LD_INT 33
22034: PUSH
22035: EMPTY
22036: LIST
22037: LIST
22038: IN
22039: IFFALSE 22055
// PlaceWeaponTurret ( b , weapon ) ;
22041: LD_VAR 0 8
22045: PPUSH
22046: LD_VAR 0 4
22050: PPUSH
22051: CALL_OW 431
// end ;
22055: LD_VAR 0 7
22059: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
22060: LD_INT 0
22062: PPUSH
22063: PPUSH
22064: PPUSH
22065: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22066: LD_ADDR_VAR 0 4
22070: PUSH
22071: LD_INT 22
22073: PUSH
22074: LD_OWVAR 2
22078: PUSH
22079: EMPTY
22080: LIST
22081: LIST
22082: PUSH
22083: LD_INT 2
22085: PUSH
22086: LD_INT 30
22088: PUSH
22089: LD_INT 0
22091: PUSH
22092: EMPTY
22093: LIST
22094: LIST
22095: PUSH
22096: LD_INT 30
22098: PUSH
22099: LD_INT 1
22101: PUSH
22102: EMPTY
22103: LIST
22104: LIST
22105: PUSH
22106: EMPTY
22107: LIST
22108: LIST
22109: LIST
22110: PUSH
22111: EMPTY
22112: LIST
22113: LIST
22114: PPUSH
22115: CALL_OW 69
22119: ST_TO_ADDR
// if not tmp then
22120: LD_VAR 0 4
22124: NOT
22125: IFFALSE 22129
// exit ;
22127: GO 22188
// for i in tmp do
22129: LD_ADDR_VAR 0 2
22133: PUSH
22134: LD_VAR 0 4
22138: PUSH
22139: FOR_IN
22140: IFFALSE 22186
// for j = 1 to 3 do
22142: LD_ADDR_VAR 0 3
22146: PUSH
22147: DOUBLE
22148: LD_INT 1
22150: DEC
22151: ST_TO_ADDR
22152: LD_INT 3
22154: PUSH
22155: FOR_TO
22156: IFFALSE 22182
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
22158: LD_VAR 0 2
22162: PPUSH
22163: CALL_OW 274
22167: PPUSH
22168: LD_VAR 0 3
22172: PPUSH
22173: LD_INT 99999
22175: PPUSH
22176: CALL_OW 277
22180: GO 22155
22182: POP
22183: POP
22184: GO 22139
22186: POP
22187: POP
// end ;
22188: LD_VAR 0 1
22192: RET
// export function hHackSetLevel10 ; var i , j ; begin
22193: LD_INT 0
22195: PPUSH
22196: PPUSH
22197: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
22198: LD_ADDR_VAR 0 2
22202: PUSH
22203: LD_INT 21
22205: PUSH
22206: LD_INT 1
22208: PUSH
22209: EMPTY
22210: LIST
22211: LIST
22212: PPUSH
22213: CALL_OW 69
22217: PUSH
22218: FOR_IN
22219: IFFALSE 22271
// if IsSelected ( i ) then
22221: LD_VAR 0 2
22225: PPUSH
22226: CALL_OW 306
22230: IFFALSE 22269
// begin for j := 1 to 4 do
22232: LD_ADDR_VAR 0 3
22236: PUSH
22237: DOUBLE
22238: LD_INT 1
22240: DEC
22241: ST_TO_ADDR
22242: LD_INT 4
22244: PUSH
22245: FOR_TO
22246: IFFALSE 22267
// SetSkill ( i , j , 10 ) ;
22248: LD_VAR 0 2
22252: PPUSH
22253: LD_VAR 0 3
22257: PPUSH
22258: LD_INT 10
22260: PPUSH
22261: CALL_OW 237
22265: GO 22245
22267: POP
22268: POP
// end ;
22269: GO 22218
22271: POP
22272: POP
// end ;
22273: LD_VAR 0 1
22277: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
22278: LD_INT 0
22280: PPUSH
22281: PPUSH
22282: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
22283: LD_ADDR_VAR 0 2
22287: PUSH
22288: LD_INT 22
22290: PUSH
22291: LD_OWVAR 2
22295: PUSH
22296: EMPTY
22297: LIST
22298: LIST
22299: PUSH
22300: LD_INT 21
22302: PUSH
22303: LD_INT 1
22305: PUSH
22306: EMPTY
22307: LIST
22308: LIST
22309: PUSH
22310: EMPTY
22311: LIST
22312: LIST
22313: PPUSH
22314: CALL_OW 69
22318: PUSH
22319: FOR_IN
22320: IFFALSE 22361
// begin for j := 1 to 4 do
22322: LD_ADDR_VAR 0 3
22326: PUSH
22327: DOUBLE
22328: LD_INT 1
22330: DEC
22331: ST_TO_ADDR
22332: LD_INT 4
22334: PUSH
22335: FOR_TO
22336: IFFALSE 22357
// SetSkill ( i , j , 10 ) ;
22338: LD_VAR 0 2
22342: PPUSH
22343: LD_VAR 0 3
22347: PPUSH
22348: LD_INT 10
22350: PPUSH
22351: CALL_OW 237
22355: GO 22335
22357: POP
22358: POP
// end ;
22359: GO 22319
22361: POP
22362: POP
// end ;
22363: LD_VAR 0 1
22367: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
22368: LD_INT 0
22370: PPUSH
// uc_side := your_side ;
22371: LD_ADDR_OWVAR 20
22375: PUSH
22376: LD_OWVAR 2
22380: ST_TO_ADDR
// uc_nation := nation ;
22381: LD_ADDR_OWVAR 21
22385: PUSH
22386: LD_VAR 0 1
22390: ST_TO_ADDR
// InitHc ;
22391: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
22395: LD_INT 0
22397: PPUSH
22398: LD_VAR 0 2
22402: PPUSH
22403: LD_VAR 0 3
22407: PPUSH
22408: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
22412: LD_VAR 0 4
22416: PPUSH
22417: LD_VAR 0 5
22421: PPUSH
22422: CALL_OW 428
22426: PUSH
22427: LD_INT 0
22429: EQUAL
22430: IFFALSE 22454
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
22432: CALL_OW 44
22436: PPUSH
22437: LD_VAR 0 4
22441: PPUSH
22442: LD_VAR 0 5
22446: PPUSH
22447: LD_INT 1
22449: PPUSH
22450: CALL_OW 48
// end ;
22454: LD_VAR 0 6
22458: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
22459: LD_INT 0
22461: PPUSH
22462: PPUSH
// uc_side := your_side ;
22463: LD_ADDR_OWVAR 20
22467: PUSH
22468: LD_OWVAR 2
22472: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
22473: LD_VAR 0 1
22477: PUSH
22478: LD_INT 1
22480: PUSH
22481: LD_INT 2
22483: PUSH
22484: LD_INT 3
22486: PUSH
22487: LD_INT 4
22489: PUSH
22490: LD_INT 5
22492: PUSH
22493: EMPTY
22494: LIST
22495: LIST
22496: LIST
22497: LIST
22498: LIST
22499: IN
22500: IFFALSE 22512
// uc_nation := nation_american else
22502: LD_ADDR_OWVAR 21
22506: PUSH
22507: LD_INT 1
22509: ST_TO_ADDR
22510: GO 22555
// if chassis in [ 11 , 12 , 13 , 14 ] then
22512: LD_VAR 0 1
22516: PUSH
22517: LD_INT 11
22519: PUSH
22520: LD_INT 12
22522: PUSH
22523: LD_INT 13
22525: PUSH
22526: LD_INT 14
22528: PUSH
22529: EMPTY
22530: LIST
22531: LIST
22532: LIST
22533: LIST
22534: IN
22535: IFFALSE 22547
// uc_nation := nation_arabian else
22537: LD_ADDR_OWVAR 21
22541: PUSH
22542: LD_INT 2
22544: ST_TO_ADDR
22545: GO 22555
// uc_nation := nation_russian ;
22547: LD_ADDR_OWVAR 21
22551: PUSH
22552: LD_INT 3
22554: ST_TO_ADDR
// vc_chassis := chassis ;
22555: LD_ADDR_OWVAR 37
22559: PUSH
22560: LD_VAR 0 1
22564: ST_TO_ADDR
// vc_engine := engine ;
22565: LD_ADDR_OWVAR 39
22569: PUSH
22570: LD_VAR 0 2
22574: ST_TO_ADDR
// vc_control := control ;
22575: LD_ADDR_OWVAR 38
22579: PUSH
22580: LD_VAR 0 3
22584: ST_TO_ADDR
// vc_weapon := weapon ;
22585: LD_ADDR_OWVAR 40
22589: PUSH
22590: LD_VAR 0 4
22594: ST_TO_ADDR
// un := CreateVehicle ;
22595: LD_ADDR_VAR 0 8
22599: PUSH
22600: CALL_OW 45
22604: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
22605: LD_VAR 0 8
22609: PPUSH
22610: LD_INT 0
22612: PPUSH
22613: LD_INT 5
22615: PPUSH
22616: CALL_OW 12
22620: PPUSH
22621: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
22625: LD_VAR 0 8
22629: PPUSH
22630: LD_VAR 0 5
22634: PPUSH
22635: LD_VAR 0 6
22639: PPUSH
22640: LD_INT 1
22642: PPUSH
22643: CALL_OW 48
// end ;
22647: LD_VAR 0 7
22651: RET
// export hInvincible ; every 1 do
22652: GO 22654
22654: DISABLE
// hInvincible := [ ] ;
22655: LD_ADDR_EXP 110
22659: PUSH
22660: EMPTY
22661: ST_TO_ADDR
22662: END
// every 10 do var i ;
22663: GO 22665
22665: DISABLE
22666: LD_INT 0
22668: PPUSH
// begin enable ;
22669: ENABLE
// if not hInvincible then
22670: LD_EXP 110
22674: NOT
22675: IFFALSE 22679
// exit ;
22677: GO 22723
// for i in hInvincible do
22679: LD_ADDR_VAR 0 1
22683: PUSH
22684: LD_EXP 110
22688: PUSH
22689: FOR_IN
22690: IFFALSE 22721
// if GetLives ( i ) < 1000 then
22692: LD_VAR 0 1
22696: PPUSH
22697: CALL_OW 256
22701: PUSH
22702: LD_INT 1000
22704: LESS
22705: IFFALSE 22719
// SetLives ( i , 1000 ) ;
22707: LD_VAR 0 1
22711: PPUSH
22712: LD_INT 1000
22714: PPUSH
22715: CALL_OW 234
22719: GO 22689
22721: POP
22722: POP
// end ;
22723: PPOPN 1
22725: END
// export function hHackInvincible ; var i ; begin
22726: LD_INT 0
22728: PPUSH
22729: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
22730: LD_ADDR_VAR 0 2
22734: PUSH
22735: LD_INT 2
22737: PUSH
22738: LD_INT 21
22740: PUSH
22741: LD_INT 1
22743: PUSH
22744: EMPTY
22745: LIST
22746: LIST
22747: PUSH
22748: LD_INT 21
22750: PUSH
22751: LD_INT 2
22753: PUSH
22754: EMPTY
22755: LIST
22756: LIST
22757: PUSH
22758: EMPTY
22759: LIST
22760: LIST
22761: LIST
22762: PPUSH
22763: CALL_OW 69
22767: PUSH
22768: FOR_IN
22769: IFFALSE 22830
// if IsSelected ( i ) then
22771: LD_VAR 0 2
22775: PPUSH
22776: CALL_OW 306
22780: IFFALSE 22828
// begin if i in hInvincible then
22782: LD_VAR 0 2
22786: PUSH
22787: LD_EXP 110
22791: IN
22792: IFFALSE 22812
// hInvincible := hInvincible diff i else
22794: LD_ADDR_EXP 110
22798: PUSH
22799: LD_EXP 110
22803: PUSH
22804: LD_VAR 0 2
22808: DIFF
22809: ST_TO_ADDR
22810: GO 22828
// hInvincible := hInvincible union i ;
22812: LD_ADDR_EXP 110
22816: PUSH
22817: LD_EXP 110
22821: PUSH
22822: LD_VAR 0 2
22826: UNION
22827: ST_TO_ADDR
// end ;
22828: GO 22768
22830: POP
22831: POP
// end ;
22832: LD_VAR 0 1
22836: RET
// export function hHackInvisible ; var i , j ; begin
22837: LD_INT 0
22839: PPUSH
22840: PPUSH
22841: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
22842: LD_ADDR_VAR 0 2
22846: PUSH
22847: LD_INT 21
22849: PUSH
22850: LD_INT 1
22852: PUSH
22853: EMPTY
22854: LIST
22855: LIST
22856: PPUSH
22857: CALL_OW 69
22861: PUSH
22862: FOR_IN
22863: IFFALSE 22887
// if IsSelected ( i ) then
22865: LD_VAR 0 2
22869: PPUSH
22870: CALL_OW 306
22874: IFFALSE 22885
// ComForceInvisible ( i ) ;
22876: LD_VAR 0 2
22880: PPUSH
22881: CALL_OW 496
22885: GO 22862
22887: POP
22888: POP
// end ;
22889: LD_VAR 0 1
22893: RET
// export function hHackChangeYourSide ; begin
22894: LD_INT 0
22896: PPUSH
// if your_side = 8 then
22897: LD_OWVAR 2
22901: PUSH
22902: LD_INT 8
22904: EQUAL
22905: IFFALSE 22917
// your_side := 0 else
22907: LD_ADDR_OWVAR 2
22911: PUSH
22912: LD_INT 0
22914: ST_TO_ADDR
22915: GO 22931
// your_side := your_side + 1 ;
22917: LD_ADDR_OWVAR 2
22921: PUSH
22922: LD_OWVAR 2
22926: PUSH
22927: LD_INT 1
22929: PLUS
22930: ST_TO_ADDR
// end ;
22931: LD_VAR 0 1
22935: RET
// export function hHackChangeUnitSide ; var i , j ; begin
22936: LD_INT 0
22938: PPUSH
22939: PPUSH
22940: PPUSH
// for i in all_units do
22941: LD_ADDR_VAR 0 2
22945: PUSH
22946: LD_OWVAR 3
22950: PUSH
22951: FOR_IN
22952: IFFALSE 23030
// if IsSelected ( i ) then
22954: LD_VAR 0 2
22958: PPUSH
22959: CALL_OW 306
22963: IFFALSE 23028
// begin j := GetSide ( i ) ;
22965: LD_ADDR_VAR 0 3
22969: PUSH
22970: LD_VAR 0 2
22974: PPUSH
22975: CALL_OW 255
22979: ST_TO_ADDR
// if j = 8 then
22980: LD_VAR 0 3
22984: PUSH
22985: LD_INT 8
22987: EQUAL
22988: IFFALSE 23000
// j := 0 else
22990: LD_ADDR_VAR 0 3
22994: PUSH
22995: LD_INT 0
22997: ST_TO_ADDR
22998: GO 23014
// j := j + 1 ;
23000: LD_ADDR_VAR 0 3
23004: PUSH
23005: LD_VAR 0 3
23009: PUSH
23010: LD_INT 1
23012: PLUS
23013: ST_TO_ADDR
// SetSide ( i , j ) ;
23014: LD_VAR 0 2
23018: PPUSH
23019: LD_VAR 0 3
23023: PPUSH
23024: CALL_OW 235
// end ;
23028: GO 22951
23030: POP
23031: POP
// end ;
23032: LD_VAR 0 1
23036: RET
// export function hHackFog ; begin
23037: LD_INT 0
23039: PPUSH
// FogOff ( true ) ;
23040: LD_INT 1
23042: PPUSH
23043: CALL_OW 344
// end ;
23047: LD_VAR 0 1
23051: RET
// export function hHackTeleport ( unit , x , y ) ; begin
23052: LD_INT 0
23054: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
23055: LD_VAR 0 1
23059: PPUSH
23060: LD_VAR 0 2
23064: PPUSH
23065: LD_VAR 0 3
23069: PPUSH
23070: LD_INT 1
23072: PPUSH
23073: LD_INT 1
23075: PPUSH
23076: CALL_OW 483
// CenterOnXY ( x , y ) ;
23080: LD_VAR 0 2
23084: PPUSH
23085: LD_VAR 0 3
23089: PPUSH
23090: CALL_OW 84
// end ;
23094: LD_VAR 0 4
23098: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
23099: LD_INT 0
23101: PPUSH
23102: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
23103: LD_VAR 0 1
23107: NOT
23108: PUSH
23109: LD_VAR 0 2
23113: PPUSH
23114: LD_VAR 0 3
23118: PPUSH
23119: CALL_OW 488
23123: NOT
23124: OR
23125: PUSH
23126: LD_VAR 0 1
23130: PPUSH
23131: CALL_OW 266
23135: PUSH
23136: LD_INT 3
23138: NONEQUAL
23139: PUSH
23140: LD_VAR 0 1
23144: PPUSH
23145: CALL_OW 247
23149: PUSH
23150: LD_INT 1
23152: EQUAL
23153: NOT
23154: AND
23155: OR
23156: IFFALSE 23160
// exit ;
23158: GO 23309
// if GetType ( factory ) = unit_human then
23160: LD_VAR 0 1
23164: PPUSH
23165: CALL_OW 247
23169: PUSH
23170: LD_INT 1
23172: EQUAL
23173: IFFALSE 23190
// factory := IsInUnit ( factory ) ;
23175: LD_ADDR_VAR 0 1
23179: PUSH
23180: LD_VAR 0 1
23184: PPUSH
23185: CALL_OW 310
23189: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
23190: LD_VAR 0 1
23194: PPUSH
23195: CALL_OW 266
23199: PUSH
23200: LD_INT 3
23202: NONEQUAL
23203: IFFALSE 23207
// exit ;
23205: GO 23309
// if HexInfo ( x , y ) = factory then
23207: LD_VAR 0 2
23211: PPUSH
23212: LD_VAR 0 3
23216: PPUSH
23217: CALL_OW 428
23221: PUSH
23222: LD_VAR 0 1
23226: EQUAL
23227: IFFALSE 23254
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
23229: LD_ADDR_EXP 111
23233: PUSH
23234: LD_EXP 111
23238: PPUSH
23239: LD_VAR 0 1
23243: PPUSH
23244: LD_INT 0
23246: PPUSH
23247: CALL_OW 1
23251: ST_TO_ADDR
23252: GO 23305
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
23254: LD_ADDR_EXP 111
23258: PUSH
23259: LD_EXP 111
23263: PPUSH
23264: LD_VAR 0 1
23268: PPUSH
23269: LD_VAR 0 1
23273: PPUSH
23274: CALL_OW 255
23278: PUSH
23279: LD_VAR 0 1
23283: PUSH
23284: LD_VAR 0 2
23288: PUSH
23289: LD_VAR 0 3
23293: PUSH
23294: EMPTY
23295: LIST
23296: LIST
23297: LIST
23298: LIST
23299: PPUSH
23300: CALL_OW 1
23304: ST_TO_ADDR
// UpdateFactoryWaypoints ;
23305: CALL 23314 0 0
// end ;
23309: LD_VAR 0 4
23313: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
23314: LD_INT 0
23316: PPUSH
23317: PPUSH
23318: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
23319: LD_STRING resetFactoryWaypoint();
23321: PPUSH
23322: CALL_OW 559
// if factoryWaypoints then
23326: LD_EXP 111
23330: IFFALSE 23456
// begin list := PrepareArray ( factoryWaypoints ) ;
23332: LD_ADDR_VAR 0 3
23336: PUSH
23337: LD_EXP 111
23341: PPUSH
23342: CALL 69925 0 1
23346: ST_TO_ADDR
// for i := 1 to list do
23347: LD_ADDR_VAR 0 2
23351: PUSH
23352: DOUBLE
23353: LD_INT 1
23355: DEC
23356: ST_TO_ADDR
23357: LD_VAR 0 3
23361: PUSH
23362: FOR_TO
23363: IFFALSE 23454
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
23365: LD_STRING setFactoryWaypointXY(
23367: PUSH
23368: LD_VAR 0 3
23372: PUSH
23373: LD_VAR 0 2
23377: ARRAY
23378: PUSH
23379: LD_INT 1
23381: ARRAY
23382: STR
23383: PUSH
23384: LD_STRING ,
23386: STR
23387: PUSH
23388: LD_VAR 0 3
23392: PUSH
23393: LD_VAR 0 2
23397: ARRAY
23398: PUSH
23399: LD_INT 2
23401: ARRAY
23402: STR
23403: PUSH
23404: LD_STRING ,
23406: STR
23407: PUSH
23408: LD_VAR 0 3
23412: PUSH
23413: LD_VAR 0 2
23417: ARRAY
23418: PUSH
23419: LD_INT 3
23421: ARRAY
23422: STR
23423: PUSH
23424: LD_STRING ,
23426: STR
23427: PUSH
23428: LD_VAR 0 3
23432: PUSH
23433: LD_VAR 0 2
23437: ARRAY
23438: PUSH
23439: LD_INT 4
23441: ARRAY
23442: STR
23443: PUSH
23444: LD_STRING )
23446: STR
23447: PPUSH
23448: CALL_OW 559
23452: GO 23362
23454: POP
23455: POP
// end ; end ;
23456: LD_VAR 0 1
23460: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
23461: LD_INT 0
23463: PPUSH
// if HexInfo ( x , y ) = warehouse then
23464: LD_VAR 0 2
23468: PPUSH
23469: LD_VAR 0 3
23473: PPUSH
23474: CALL_OW 428
23478: PUSH
23479: LD_VAR 0 1
23483: EQUAL
23484: IFFALSE 23511
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
23486: LD_ADDR_EXP 112
23490: PUSH
23491: LD_EXP 112
23495: PPUSH
23496: LD_VAR 0 1
23500: PPUSH
23501: LD_INT 0
23503: PPUSH
23504: CALL_OW 1
23508: ST_TO_ADDR
23509: GO 23562
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
23511: LD_ADDR_EXP 112
23515: PUSH
23516: LD_EXP 112
23520: PPUSH
23521: LD_VAR 0 1
23525: PPUSH
23526: LD_VAR 0 1
23530: PPUSH
23531: CALL_OW 255
23535: PUSH
23536: LD_VAR 0 1
23540: PUSH
23541: LD_VAR 0 2
23545: PUSH
23546: LD_VAR 0 3
23550: PUSH
23551: EMPTY
23552: LIST
23553: LIST
23554: LIST
23555: LIST
23556: PPUSH
23557: CALL_OW 1
23561: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
23562: CALL 23571 0 0
// end ;
23566: LD_VAR 0 4
23570: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
23571: LD_INT 0
23573: PPUSH
23574: PPUSH
23575: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
23576: LD_STRING resetWarehouseGatheringPoints();
23578: PPUSH
23579: CALL_OW 559
// if warehouseGatheringPoints then
23583: LD_EXP 112
23587: IFFALSE 23713
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
23589: LD_ADDR_VAR 0 3
23593: PUSH
23594: LD_EXP 112
23598: PPUSH
23599: CALL 69925 0 1
23603: ST_TO_ADDR
// for i := 1 to list do
23604: LD_ADDR_VAR 0 2
23608: PUSH
23609: DOUBLE
23610: LD_INT 1
23612: DEC
23613: ST_TO_ADDR
23614: LD_VAR 0 3
23618: PUSH
23619: FOR_TO
23620: IFFALSE 23711
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
23622: LD_STRING setWarehouseGatheringPointXY(
23624: PUSH
23625: LD_VAR 0 3
23629: PUSH
23630: LD_VAR 0 2
23634: ARRAY
23635: PUSH
23636: LD_INT 1
23638: ARRAY
23639: STR
23640: PUSH
23641: LD_STRING ,
23643: STR
23644: PUSH
23645: LD_VAR 0 3
23649: PUSH
23650: LD_VAR 0 2
23654: ARRAY
23655: PUSH
23656: LD_INT 2
23658: ARRAY
23659: STR
23660: PUSH
23661: LD_STRING ,
23663: STR
23664: PUSH
23665: LD_VAR 0 3
23669: PUSH
23670: LD_VAR 0 2
23674: ARRAY
23675: PUSH
23676: LD_INT 3
23678: ARRAY
23679: STR
23680: PUSH
23681: LD_STRING ,
23683: STR
23684: PUSH
23685: LD_VAR 0 3
23689: PUSH
23690: LD_VAR 0 2
23694: ARRAY
23695: PUSH
23696: LD_INT 4
23698: ARRAY
23699: STR
23700: PUSH
23701: LD_STRING )
23703: STR
23704: PPUSH
23705: CALL_OW 559
23709: GO 23619
23711: POP
23712: POP
// end ; end ;
23713: LD_VAR 0 1
23717: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
23718: LD_EXP 112
23722: IFFALSE 24407
23724: GO 23726
23726: DISABLE
23727: LD_INT 0
23729: PPUSH
23730: PPUSH
23731: PPUSH
23732: PPUSH
23733: PPUSH
23734: PPUSH
23735: PPUSH
23736: PPUSH
23737: PPUSH
// begin enable ;
23738: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
23739: LD_ADDR_VAR 0 3
23743: PUSH
23744: LD_EXP 112
23748: PPUSH
23749: CALL 69925 0 1
23753: ST_TO_ADDR
// if not list then
23754: LD_VAR 0 3
23758: NOT
23759: IFFALSE 23763
// exit ;
23761: GO 24407
// for i := 1 to list do
23763: LD_ADDR_VAR 0 1
23767: PUSH
23768: DOUBLE
23769: LD_INT 1
23771: DEC
23772: ST_TO_ADDR
23773: LD_VAR 0 3
23777: PUSH
23778: FOR_TO
23779: IFFALSE 24405
// begin depot := list [ i ] [ 2 ] ;
23781: LD_ADDR_VAR 0 8
23785: PUSH
23786: LD_VAR 0 3
23790: PUSH
23791: LD_VAR 0 1
23795: ARRAY
23796: PUSH
23797: LD_INT 2
23799: ARRAY
23800: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
23801: LD_ADDR_VAR 0 5
23805: PUSH
23806: LD_VAR 0 3
23810: PUSH
23811: LD_VAR 0 1
23815: ARRAY
23816: PUSH
23817: LD_INT 1
23819: ARRAY
23820: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
23821: LD_VAR 0 8
23825: PPUSH
23826: CALL_OW 301
23830: PUSH
23831: LD_VAR 0 5
23835: PUSH
23836: LD_VAR 0 8
23840: PPUSH
23841: CALL_OW 255
23845: NONEQUAL
23846: OR
23847: IFFALSE 23876
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
23849: LD_ADDR_EXP 112
23853: PUSH
23854: LD_EXP 112
23858: PPUSH
23859: LD_VAR 0 8
23863: PPUSH
23864: LD_INT 0
23866: PPUSH
23867: CALL_OW 1
23871: ST_TO_ADDR
// exit ;
23872: POP
23873: POP
23874: GO 24407
// end ; x := list [ i ] [ 3 ] ;
23876: LD_ADDR_VAR 0 6
23880: PUSH
23881: LD_VAR 0 3
23885: PUSH
23886: LD_VAR 0 1
23890: ARRAY
23891: PUSH
23892: LD_INT 3
23894: ARRAY
23895: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
23896: LD_ADDR_VAR 0 7
23900: PUSH
23901: LD_VAR 0 3
23905: PUSH
23906: LD_VAR 0 1
23910: ARRAY
23911: PUSH
23912: LD_INT 4
23914: ARRAY
23915: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
23916: LD_ADDR_VAR 0 9
23920: PUSH
23921: LD_VAR 0 6
23925: PPUSH
23926: LD_VAR 0 7
23930: PPUSH
23931: LD_INT 16
23933: PPUSH
23934: CALL 68513 0 3
23938: ST_TO_ADDR
// if not cratesNearbyPoint then
23939: LD_VAR 0 9
23943: NOT
23944: IFFALSE 23950
// exit ;
23946: POP
23947: POP
23948: GO 24407
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
23950: LD_ADDR_VAR 0 4
23954: PUSH
23955: LD_INT 22
23957: PUSH
23958: LD_VAR 0 5
23962: PUSH
23963: EMPTY
23964: LIST
23965: LIST
23966: PUSH
23967: LD_INT 3
23969: PUSH
23970: LD_INT 60
23972: PUSH
23973: EMPTY
23974: LIST
23975: PUSH
23976: EMPTY
23977: LIST
23978: LIST
23979: PUSH
23980: LD_INT 91
23982: PUSH
23983: LD_VAR 0 8
23987: PUSH
23988: LD_INT 6
23990: PUSH
23991: EMPTY
23992: LIST
23993: LIST
23994: LIST
23995: PUSH
23996: LD_INT 2
23998: PUSH
23999: LD_INT 25
24001: PUSH
24002: LD_INT 2
24004: PUSH
24005: EMPTY
24006: LIST
24007: LIST
24008: PUSH
24009: LD_INT 25
24011: PUSH
24012: LD_INT 16
24014: PUSH
24015: EMPTY
24016: LIST
24017: LIST
24018: PUSH
24019: EMPTY
24020: LIST
24021: LIST
24022: LIST
24023: PUSH
24024: EMPTY
24025: LIST
24026: LIST
24027: LIST
24028: LIST
24029: PPUSH
24030: CALL_OW 69
24034: PUSH
24035: LD_VAR 0 8
24039: PPUSH
24040: CALL_OW 313
24044: PPUSH
24045: LD_INT 3
24047: PUSH
24048: LD_INT 60
24050: PUSH
24051: EMPTY
24052: LIST
24053: PUSH
24054: EMPTY
24055: LIST
24056: LIST
24057: PUSH
24058: LD_INT 2
24060: PUSH
24061: LD_INT 25
24063: PUSH
24064: LD_INT 2
24066: PUSH
24067: EMPTY
24068: LIST
24069: LIST
24070: PUSH
24071: LD_INT 25
24073: PUSH
24074: LD_INT 16
24076: PUSH
24077: EMPTY
24078: LIST
24079: LIST
24080: PUSH
24081: EMPTY
24082: LIST
24083: LIST
24084: LIST
24085: PUSH
24086: EMPTY
24087: LIST
24088: LIST
24089: PPUSH
24090: CALL_OW 72
24094: UNION
24095: ST_TO_ADDR
// if tmp then
24096: LD_VAR 0 4
24100: IFFALSE 24180
// begin tmp := ShrinkArray ( tmp , 3 ) ;
24102: LD_ADDR_VAR 0 4
24106: PUSH
24107: LD_VAR 0 4
24111: PPUSH
24112: LD_INT 3
24114: PPUSH
24115: CALL 66482 0 2
24119: ST_TO_ADDR
// for j in tmp do
24120: LD_ADDR_VAR 0 2
24124: PUSH
24125: LD_VAR 0 4
24129: PUSH
24130: FOR_IN
24131: IFFALSE 24174
// begin if IsInUnit ( j ) then
24133: LD_VAR 0 2
24137: PPUSH
24138: CALL_OW 310
24142: IFFALSE 24153
// ComExit ( j ) ;
24144: LD_VAR 0 2
24148: PPUSH
24149: CALL 66565 0 1
// AddComCollect ( j , x , y ) ;
24153: LD_VAR 0 2
24157: PPUSH
24158: LD_VAR 0 6
24162: PPUSH
24163: LD_VAR 0 7
24167: PPUSH
24168: CALL_OW 177
// end ;
24172: GO 24130
24174: POP
24175: POP
// exit ;
24176: POP
24177: POP
24178: GO 24407
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
24180: LD_ADDR_VAR 0 4
24184: PUSH
24185: LD_INT 22
24187: PUSH
24188: LD_VAR 0 5
24192: PUSH
24193: EMPTY
24194: LIST
24195: LIST
24196: PUSH
24197: LD_INT 91
24199: PUSH
24200: LD_VAR 0 8
24204: PUSH
24205: LD_INT 8
24207: PUSH
24208: EMPTY
24209: LIST
24210: LIST
24211: LIST
24212: PUSH
24213: LD_INT 2
24215: PUSH
24216: LD_INT 34
24218: PUSH
24219: LD_INT 12
24221: PUSH
24222: EMPTY
24223: LIST
24224: LIST
24225: PUSH
24226: LD_INT 34
24228: PUSH
24229: LD_INT 51
24231: PUSH
24232: EMPTY
24233: LIST
24234: LIST
24235: PUSH
24236: LD_INT 34
24238: PUSH
24239: LD_INT 32
24241: PUSH
24242: EMPTY
24243: LIST
24244: LIST
24245: PUSH
24246: LD_INT 34
24248: PUSH
24249: LD_INT 89
24251: PUSH
24252: EMPTY
24253: LIST
24254: LIST
24255: PUSH
24256: EMPTY
24257: LIST
24258: LIST
24259: LIST
24260: LIST
24261: LIST
24262: PUSH
24263: EMPTY
24264: LIST
24265: LIST
24266: LIST
24267: PPUSH
24268: CALL_OW 69
24272: ST_TO_ADDR
// if tmp then
24273: LD_VAR 0 4
24277: IFFALSE 24403
// begin for j in tmp do
24279: LD_ADDR_VAR 0 2
24283: PUSH
24284: LD_VAR 0 4
24288: PUSH
24289: FOR_IN
24290: IFFALSE 24401
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
24292: LD_VAR 0 2
24296: PPUSH
24297: CALL_OW 262
24301: PUSH
24302: LD_INT 3
24304: EQUAL
24305: PUSH
24306: LD_VAR 0 2
24310: PPUSH
24311: CALL_OW 261
24315: PUSH
24316: LD_INT 20
24318: GREATER
24319: OR
24320: PUSH
24321: LD_VAR 0 2
24325: PPUSH
24326: CALL_OW 314
24330: NOT
24331: AND
24332: PUSH
24333: LD_VAR 0 2
24337: PPUSH
24338: CALL_OW 263
24342: PUSH
24343: LD_INT 1
24345: NONEQUAL
24346: PUSH
24347: LD_VAR 0 2
24351: PPUSH
24352: CALL_OW 311
24356: OR
24357: AND
24358: IFFALSE 24399
// begin ComCollect ( j , x , y ) ;
24360: LD_VAR 0 2
24364: PPUSH
24365: LD_VAR 0 6
24369: PPUSH
24370: LD_VAR 0 7
24374: PPUSH
24375: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
24379: LD_VAR 0 2
24383: PPUSH
24384: LD_VAR 0 8
24388: PPUSH
24389: CALL_OW 172
// exit ;
24393: POP
24394: POP
24395: POP
24396: POP
24397: GO 24407
// end ;
24399: GO 24289
24401: POP
24402: POP
// end ; end ;
24403: GO 23778
24405: POP
24406: POP
// end ; end_of_file
24407: PPOPN 9
24409: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
24410: LD_INT 0
24412: PPUSH
24413: PPUSH
24414: PPUSH
24415: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
24416: LD_VAR 0 1
24420: PPUSH
24421: CALL_OW 264
24425: PUSH
24426: LD_INT 91
24428: EQUAL
24429: IFFALSE 24501
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
24431: LD_INT 68
24433: PPUSH
24434: LD_VAR 0 1
24438: PPUSH
24439: CALL_OW 255
24443: PPUSH
24444: CALL_OW 321
24448: PUSH
24449: LD_INT 2
24451: EQUAL
24452: IFFALSE 24464
// eff := 70 else
24454: LD_ADDR_VAR 0 4
24458: PUSH
24459: LD_INT 70
24461: ST_TO_ADDR
24462: GO 24472
// eff := 30 ;
24464: LD_ADDR_VAR 0 4
24468: PUSH
24469: LD_INT 30
24471: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
24472: LD_VAR 0 1
24476: PPUSH
24477: CALL_OW 250
24481: PPUSH
24482: LD_VAR 0 1
24486: PPUSH
24487: CALL_OW 251
24491: PPUSH
24492: LD_VAR 0 4
24496: PPUSH
24497: CALL_OW 495
// end ; end ;
24501: LD_VAR 0 2
24505: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
24506: LD_INT 0
24508: PPUSH
// end ;
24509: LD_VAR 0 4
24513: RET
// export function SOS_Command ( cmd ) ; begin
24514: LD_INT 0
24516: PPUSH
// end ;
24517: LD_VAR 0 2
24521: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
24522: LD_INT 0
24524: PPUSH
// end ;
24525: LD_VAR 0 6
24529: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
24530: LD_INT 0
24532: PPUSH
24533: PPUSH
// if not vehicle or not factory then
24534: LD_VAR 0 1
24538: NOT
24539: PUSH
24540: LD_VAR 0 2
24544: NOT
24545: OR
24546: IFFALSE 24550
// exit ;
24548: GO 24781
// if factoryWaypoints >= factory then
24550: LD_EXP 111
24554: PUSH
24555: LD_VAR 0 2
24559: GREATEREQUAL
24560: IFFALSE 24781
// if factoryWaypoints [ factory ] then
24562: LD_EXP 111
24566: PUSH
24567: LD_VAR 0 2
24571: ARRAY
24572: IFFALSE 24781
// begin if GetControl ( vehicle ) = control_manual then
24574: LD_VAR 0 1
24578: PPUSH
24579: CALL_OW 263
24583: PUSH
24584: LD_INT 1
24586: EQUAL
24587: IFFALSE 24668
// begin driver := IsDrivenBy ( vehicle ) ;
24589: LD_ADDR_VAR 0 4
24593: PUSH
24594: LD_VAR 0 1
24598: PPUSH
24599: CALL_OW 311
24603: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
24604: LD_VAR 0 4
24608: PPUSH
24609: LD_EXP 111
24613: PUSH
24614: LD_VAR 0 2
24618: ARRAY
24619: PUSH
24620: LD_INT 3
24622: ARRAY
24623: PPUSH
24624: LD_EXP 111
24628: PUSH
24629: LD_VAR 0 2
24633: ARRAY
24634: PUSH
24635: LD_INT 4
24637: ARRAY
24638: PPUSH
24639: CALL_OW 171
// AddComExitVehicle ( driver ) ;
24643: LD_VAR 0 4
24647: PPUSH
24648: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
24652: LD_VAR 0 4
24656: PPUSH
24657: LD_VAR 0 2
24661: PPUSH
24662: CALL_OW 180
// end else
24666: GO 24781
// if GetControl ( vehicle ) = control_remote then
24668: LD_VAR 0 1
24672: PPUSH
24673: CALL_OW 263
24677: PUSH
24678: LD_INT 2
24680: EQUAL
24681: IFFALSE 24742
// begin wait ( 0 0$2 ) ;
24683: LD_INT 70
24685: PPUSH
24686: CALL_OW 67
// if Connect ( vehicle ) then
24690: LD_VAR 0 1
24694: PPUSH
24695: CALL 36805 0 1
24699: IFFALSE 24740
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
24701: LD_VAR 0 1
24705: PPUSH
24706: LD_EXP 111
24710: PUSH
24711: LD_VAR 0 2
24715: ARRAY
24716: PUSH
24717: LD_INT 3
24719: ARRAY
24720: PPUSH
24721: LD_EXP 111
24725: PUSH
24726: LD_VAR 0 2
24730: ARRAY
24731: PUSH
24732: LD_INT 4
24734: ARRAY
24735: PPUSH
24736: CALL_OW 171
// end else
24740: GO 24781
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
24742: LD_VAR 0 1
24746: PPUSH
24747: LD_EXP 111
24751: PUSH
24752: LD_VAR 0 2
24756: ARRAY
24757: PUSH
24758: LD_INT 3
24760: ARRAY
24761: PPUSH
24762: LD_EXP 111
24766: PUSH
24767: LD_VAR 0 2
24771: ARRAY
24772: PUSH
24773: LD_INT 4
24775: ARRAY
24776: PPUSH
24777: CALL_OW 171
// end ; end ;
24781: LD_VAR 0 3
24785: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
24786: LD_INT 0
24788: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
24789: LD_VAR 0 1
24793: PUSH
24794: LD_INT 250
24796: EQUAL
24797: PUSH
24798: LD_VAR 0 2
24802: PPUSH
24803: CALL_OW 264
24807: PUSH
24808: LD_INT 81
24810: EQUAL
24811: AND
24812: IFFALSE 24833
// MinerPlaceMine ( unit , x , y ) ;
24814: LD_VAR 0 2
24818: PPUSH
24819: LD_VAR 0 4
24823: PPUSH
24824: LD_VAR 0 5
24828: PPUSH
24829: CALL 27218 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
24833: LD_VAR 0 1
24837: PUSH
24838: LD_INT 251
24840: EQUAL
24841: PUSH
24842: LD_VAR 0 2
24846: PPUSH
24847: CALL_OW 264
24851: PUSH
24852: LD_INT 81
24854: EQUAL
24855: AND
24856: IFFALSE 24877
// MinerDetonateMine ( unit , x , y ) ;
24858: LD_VAR 0 2
24862: PPUSH
24863: LD_VAR 0 4
24867: PPUSH
24868: LD_VAR 0 5
24872: PPUSH
24873: CALL 27493 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
24877: LD_VAR 0 1
24881: PUSH
24882: LD_INT 252
24884: EQUAL
24885: PUSH
24886: LD_VAR 0 2
24890: PPUSH
24891: CALL_OW 264
24895: PUSH
24896: LD_INT 81
24898: EQUAL
24899: AND
24900: IFFALSE 24921
// MinerCreateMinefield ( unit , x , y ) ;
24902: LD_VAR 0 2
24906: PPUSH
24907: LD_VAR 0 4
24911: PPUSH
24912: LD_VAR 0 5
24916: PPUSH
24917: CALL 27910 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
24921: LD_VAR 0 1
24925: PUSH
24926: LD_INT 253
24928: EQUAL
24929: PUSH
24930: LD_VAR 0 2
24934: PPUSH
24935: CALL_OW 257
24939: PUSH
24940: LD_INT 5
24942: EQUAL
24943: AND
24944: IFFALSE 24965
// ComBinocular ( unit , x , y ) ;
24946: LD_VAR 0 2
24950: PPUSH
24951: LD_VAR 0 4
24955: PPUSH
24956: LD_VAR 0 5
24960: PPUSH
24961: CALL 28279 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
24965: LD_VAR 0 1
24969: PUSH
24970: LD_INT 254
24972: EQUAL
24973: PUSH
24974: LD_VAR 0 2
24978: PPUSH
24979: CALL_OW 264
24983: PUSH
24984: LD_INT 99
24986: EQUAL
24987: AND
24988: PUSH
24989: LD_VAR 0 3
24993: PPUSH
24994: CALL_OW 263
24998: PUSH
24999: LD_INT 3
25001: EQUAL
25002: AND
25003: IFFALSE 25019
// HackDestroyVehicle ( unit , selectedUnit ) ;
25005: LD_VAR 0 2
25009: PPUSH
25010: LD_VAR 0 3
25014: PPUSH
25015: CALL 26582 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
25019: LD_VAR 0 1
25023: PUSH
25024: LD_INT 255
25026: EQUAL
25027: PUSH
25028: LD_VAR 0 2
25032: PPUSH
25033: CALL_OW 264
25037: PUSH
25038: LD_INT 14
25040: PUSH
25041: LD_INT 53
25043: PUSH
25044: EMPTY
25045: LIST
25046: LIST
25047: IN
25048: AND
25049: PUSH
25050: LD_VAR 0 4
25054: PPUSH
25055: LD_VAR 0 5
25059: PPUSH
25060: CALL_OW 488
25064: AND
25065: IFFALSE 25089
// CutTreeXYR ( unit , x , y , 12 ) ;
25067: LD_VAR 0 2
25071: PPUSH
25072: LD_VAR 0 4
25076: PPUSH
25077: LD_VAR 0 5
25081: PPUSH
25082: LD_INT 12
25084: PPUSH
25085: CALL 25152 0 4
// if cmd = 256 then
25089: LD_VAR 0 1
25093: PUSH
25094: LD_INT 256
25096: EQUAL
25097: IFFALSE 25118
// SetFactoryWaypoint ( unit , x , y ) ;
25099: LD_VAR 0 2
25103: PPUSH
25104: LD_VAR 0 4
25108: PPUSH
25109: LD_VAR 0 5
25113: PPUSH
25114: CALL 23099 0 3
// if cmd = 257 then
25118: LD_VAR 0 1
25122: PUSH
25123: LD_INT 257
25125: EQUAL
25126: IFFALSE 25147
// SetWarehouseGatheringPoint ( unit , x , y ) ;
25128: LD_VAR 0 2
25132: PPUSH
25133: LD_VAR 0 4
25137: PPUSH
25138: LD_VAR 0 5
25142: PPUSH
25143: CALL 23461 0 3
// end ;
25147: LD_VAR 0 6
25151: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
25152: LD_INT 0
25154: PPUSH
25155: PPUSH
25156: PPUSH
25157: PPUSH
25158: PPUSH
25159: PPUSH
25160: PPUSH
25161: PPUSH
25162: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
25163: LD_VAR 0 1
25167: NOT
25168: PUSH
25169: LD_VAR 0 2
25173: PPUSH
25174: LD_VAR 0 3
25178: PPUSH
25179: CALL_OW 488
25183: NOT
25184: OR
25185: PUSH
25186: LD_VAR 0 4
25190: NOT
25191: OR
25192: IFFALSE 25196
// exit ;
25194: GO 25536
// list := [ ] ;
25196: LD_ADDR_VAR 0 13
25200: PUSH
25201: EMPTY
25202: ST_TO_ADDR
// if x - r < 0 then
25203: LD_VAR 0 2
25207: PUSH
25208: LD_VAR 0 4
25212: MINUS
25213: PUSH
25214: LD_INT 0
25216: LESS
25217: IFFALSE 25229
// min_x := 0 else
25219: LD_ADDR_VAR 0 7
25223: PUSH
25224: LD_INT 0
25226: ST_TO_ADDR
25227: GO 25245
// min_x := x - r ;
25229: LD_ADDR_VAR 0 7
25233: PUSH
25234: LD_VAR 0 2
25238: PUSH
25239: LD_VAR 0 4
25243: MINUS
25244: ST_TO_ADDR
// if y - r < 0 then
25245: LD_VAR 0 3
25249: PUSH
25250: LD_VAR 0 4
25254: MINUS
25255: PUSH
25256: LD_INT 0
25258: LESS
25259: IFFALSE 25271
// min_y := 0 else
25261: LD_ADDR_VAR 0 8
25265: PUSH
25266: LD_INT 0
25268: ST_TO_ADDR
25269: GO 25287
// min_y := y - r ;
25271: LD_ADDR_VAR 0 8
25275: PUSH
25276: LD_VAR 0 3
25280: PUSH
25281: LD_VAR 0 4
25285: MINUS
25286: ST_TO_ADDR
// max_x := x + r ;
25287: LD_ADDR_VAR 0 9
25291: PUSH
25292: LD_VAR 0 2
25296: PUSH
25297: LD_VAR 0 4
25301: PLUS
25302: ST_TO_ADDR
// max_y := y + r ;
25303: LD_ADDR_VAR 0 10
25307: PUSH
25308: LD_VAR 0 3
25312: PUSH
25313: LD_VAR 0 4
25317: PLUS
25318: ST_TO_ADDR
// for _x = min_x to max_x do
25319: LD_ADDR_VAR 0 11
25323: PUSH
25324: DOUBLE
25325: LD_VAR 0 7
25329: DEC
25330: ST_TO_ADDR
25331: LD_VAR 0 9
25335: PUSH
25336: FOR_TO
25337: IFFALSE 25454
// for _y = min_y to max_y do
25339: LD_ADDR_VAR 0 12
25343: PUSH
25344: DOUBLE
25345: LD_VAR 0 8
25349: DEC
25350: ST_TO_ADDR
25351: LD_VAR 0 10
25355: PUSH
25356: FOR_TO
25357: IFFALSE 25450
// begin if not ValidHex ( _x , _y ) then
25359: LD_VAR 0 11
25363: PPUSH
25364: LD_VAR 0 12
25368: PPUSH
25369: CALL_OW 488
25373: NOT
25374: IFFALSE 25378
// continue ;
25376: GO 25356
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
25378: LD_VAR 0 11
25382: PPUSH
25383: LD_VAR 0 12
25387: PPUSH
25388: CALL_OW 351
25392: PUSH
25393: LD_VAR 0 11
25397: PPUSH
25398: LD_VAR 0 12
25402: PPUSH
25403: CALL_OW 554
25407: AND
25408: IFFALSE 25448
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
25410: LD_ADDR_VAR 0 13
25414: PUSH
25415: LD_VAR 0 13
25419: PPUSH
25420: LD_VAR 0 13
25424: PUSH
25425: LD_INT 1
25427: PLUS
25428: PPUSH
25429: LD_VAR 0 11
25433: PUSH
25434: LD_VAR 0 12
25438: PUSH
25439: EMPTY
25440: LIST
25441: LIST
25442: PPUSH
25443: CALL_OW 2
25447: ST_TO_ADDR
// end ;
25448: GO 25356
25450: POP
25451: POP
25452: GO 25336
25454: POP
25455: POP
// if not list then
25456: LD_VAR 0 13
25460: NOT
25461: IFFALSE 25465
// exit ;
25463: GO 25536
// for i in list do
25465: LD_ADDR_VAR 0 6
25469: PUSH
25470: LD_VAR 0 13
25474: PUSH
25475: FOR_IN
25476: IFFALSE 25534
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
25478: LD_VAR 0 1
25482: PPUSH
25483: LD_STRING M
25485: PUSH
25486: LD_VAR 0 6
25490: PUSH
25491: LD_INT 1
25493: ARRAY
25494: PUSH
25495: LD_VAR 0 6
25499: PUSH
25500: LD_INT 2
25502: ARRAY
25503: PUSH
25504: LD_INT 0
25506: PUSH
25507: LD_INT 0
25509: PUSH
25510: LD_INT 0
25512: PUSH
25513: LD_INT 0
25515: PUSH
25516: EMPTY
25517: LIST
25518: LIST
25519: LIST
25520: LIST
25521: LIST
25522: LIST
25523: LIST
25524: PUSH
25525: EMPTY
25526: LIST
25527: PPUSH
25528: CALL_OW 447
25532: GO 25475
25534: POP
25535: POP
// end ;
25536: LD_VAR 0 5
25540: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
25541: LD_EXP 114
25545: NOT
25546: IFFALSE 25596
25548: GO 25550
25550: DISABLE
// begin initHack := true ;
25551: LD_ADDR_EXP 114
25555: PUSH
25556: LD_INT 1
25558: ST_TO_ADDR
// hackTanks := [ ] ;
25559: LD_ADDR_EXP 115
25563: PUSH
25564: EMPTY
25565: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
25566: LD_ADDR_EXP 116
25570: PUSH
25571: EMPTY
25572: ST_TO_ADDR
// hackLimit := 3 ;
25573: LD_ADDR_EXP 117
25577: PUSH
25578: LD_INT 3
25580: ST_TO_ADDR
// hackDist := 12 ;
25581: LD_ADDR_EXP 118
25585: PUSH
25586: LD_INT 12
25588: ST_TO_ADDR
// hackCounter := [ ] ;
25589: LD_ADDR_EXP 119
25593: PUSH
25594: EMPTY
25595: ST_TO_ADDR
// end ;
25596: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
25597: LD_EXP 114
25601: PUSH
25602: LD_INT 34
25604: PUSH
25605: LD_INT 99
25607: PUSH
25608: EMPTY
25609: LIST
25610: LIST
25611: PPUSH
25612: CALL_OW 69
25616: AND
25617: IFFALSE 25870
25619: GO 25621
25621: DISABLE
25622: LD_INT 0
25624: PPUSH
25625: PPUSH
// begin enable ;
25626: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
25627: LD_ADDR_VAR 0 1
25631: PUSH
25632: LD_INT 34
25634: PUSH
25635: LD_INT 99
25637: PUSH
25638: EMPTY
25639: LIST
25640: LIST
25641: PPUSH
25642: CALL_OW 69
25646: PUSH
25647: FOR_IN
25648: IFFALSE 25868
// begin if not i in hackTanks then
25650: LD_VAR 0 1
25654: PUSH
25655: LD_EXP 115
25659: IN
25660: NOT
25661: IFFALSE 25744
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
25663: LD_ADDR_EXP 115
25667: PUSH
25668: LD_EXP 115
25672: PPUSH
25673: LD_EXP 115
25677: PUSH
25678: LD_INT 1
25680: PLUS
25681: PPUSH
25682: LD_VAR 0 1
25686: PPUSH
25687: CALL_OW 1
25691: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
25692: LD_ADDR_EXP 116
25696: PUSH
25697: LD_EXP 116
25701: PPUSH
25702: LD_EXP 116
25706: PUSH
25707: LD_INT 1
25709: PLUS
25710: PPUSH
25711: EMPTY
25712: PPUSH
25713: CALL_OW 1
25717: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
25718: LD_ADDR_EXP 119
25722: PUSH
25723: LD_EXP 119
25727: PPUSH
25728: LD_EXP 119
25732: PUSH
25733: LD_INT 1
25735: PLUS
25736: PPUSH
25737: EMPTY
25738: PPUSH
25739: CALL_OW 1
25743: ST_TO_ADDR
// end ; if not IsOk ( i ) then
25744: LD_VAR 0 1
25748: PPUSH
25749: CALL_OW 302
25753: NOT
25754: IFFALSE 25767
// begin HackUnlinkAll ( i ) ;
25756: LD_VAR 0 1
25760: PPUSH
25761: CALL 25873 0 1
// continue ;
25765: GO 25647
// end ; HackCheckCapturedStatus ( i ) ;
25767: LD_VAR 0 1
25771: PPUSH
25772: CALL 26316 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
25776: LD_ADDR_VAR 0 2
25780: PUSH
25781: LD_INT 81
25783: PUSH
25784: LD_VAR 0 1
25788: PPUSH
25789: CALL_OW 255
25793: PUSH
25794: EMPTY
25795: LIST
25796: LIST
25797: PUSH
25798: LD_INT 33
25800: PUSH
25801: LD_INT 3
25803: PUSH
25804: EMPTY
25805: LIST
25806: LIST
25807: PUSH
25808: LD_INT 91
25810: PUSH
25811: LD_VAR 0 1
25815: PUSH
25816: LD_EXP 118
25820: PUSH
25821: EMPTY
25822: LIST
25823: LIST
25824: LIST
25825: PUSH
25826: LD_INT 50
25828: PUSH
25829: EMPTY
25830: LIST
25831: PUSH
25832: EMPTY
25833: LIST
25834: LIST
25835: LIST
25836: LIST
25837: PPUSH
25838: CALL_OW 69
25842: ST_TO_ADDR
// if not tmp then
25843: LD_VAR 0 2
25847: NOT
25848: IFFALSE 25852
// continue ;
25850: GO 25647
// HackLink ( i , tmp ) ;
25852: LD_VAR 0 1
25856: PPUSH
25857: LD_VAR 0 2
25861: PPUSH
25862: CALL 26009 0 2
// end ;
25866: GO 25647
25868: POP
25869: POP
// end ;
25870: PPOPN 2
25872: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
25873: LD_INT 0
25875: PPUSH
25876: PPUSH
25877: PPUSH
// if not hack in hackTanks then
25878: LD_VAR 0 1
25882: PUSH
25883: LD_EXP 115
25887: IN
25888: NOT
25889: IFFALSE 25893
// exit ;
25891: GO 26004
// index := GetElementIndex ( hackTanks , hack ) ;
25893: LD_ADDR_VAR 0 4
25897: PUSH
25898: LD_EXP 115
25902: PPUSH
25903: LD_VAR 0 1
25907: PPUSH
25908: CALL 33621 0 2
25912: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
25913: LD_EXP 116
25917: PUSH
25918: LD_VAR 0 4
25922: ARRAY
25923: IFFALSE 26004
// begin for i in hackTanksCaptured [ index ] do
25925: LD_ADDR_VAR 0 3
25929: PUSH
25930: LD_EXP 116
25934: PUSH
25935: LD_VAR 0 4
25939: ARRAY
25940: PUSH
25941: FOR_IN
25942: IFFALSE 25968
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
25944: LD_VAR 0 3
25948: PUSH
25949: LD_INT 1
25951: ARRAY
25952: PPUSH
25953: LD_VAR 0 3
25957: PUSH
25958: LD_INT 2
25960: ARRAY
25961: PPUSH
25962: CALL_OW 235
25966: GO 25941
25968: POP
25969: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
25970: LD_ADDR_EXP 116
25974: PUSH
25975: LD_EXP 116
25979: PPUSH
25980: LD_VAR 0 4
25984: PPUSH
25985: EMPTY
25986: PPUSH
25987: CALL_OW 1
25991: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
25992: LD_VAR 0 1
25996: PPUSH
25997: LD_INT 0
25999: PPUSH
26000: CALL_OW 505
// end ; end ;
26004: LD_VAR 0 2
26008: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
26009: LD_INT 0
26011: PPUSH
26012: PPUSH
26013: PPUSH
// if not hack in hackTanks or not vehicles then
26014: LD_VAR 0 1
26018: PUSH
26019: LD_EXP 115
26023: IN
26024: NOT
26025: PUSH
26026: LD_VAR 0 2
26030: NOT
26031: OR
26032: IFFALSE 26036
// exit ;
26034: GO 26311
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
26036: LD_ADDR_VAR 0 2
26040: PUSH
26041: LD_VAR 0 1
26045: PPUSH
26046: LD_VAR 0 2
26050: PPUSH
26051: LD_INT 1
26053: PPUSH
26054: LD_INT 1
26056: PPUSH
26057: CALL 34271 0 4
26061: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
26062: LD_ADDR_VAR 0 5
26066: PUSH
26067: LD_EXP 115
26071: PPUSH
26072: LD_VAR 0 1
26076: PPUSH
26077: CALL 33621 0 2
26081: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
26082: LD_EXP 116
26086: PUSH
26087: LD_VAR 0 5
26091: ARRAY
26092: PUSH
26093: LD_EXP 117
26097: LESS
26098: IFFALSE 26287
// begin for i := 1 to vehicles do
26100: LD_ADDR_VAR 0 4
26104: PUSH
26105: DOUBLE
26106: LD_INT 1
26108: DEC
26109: ST_TO_ADDR
26110: LD_VAR 0 2
26114: PUSH
26115: FOR_TO
26116: IFFALSE 26285
// begin if hackTanksCaptured [ index ] = hackLimit then
26118: LD_EXP 116
26122: PUSH
26123: LD_VAR 0 5
26127: ARRAY
26128: PUSH
26129: LD_EXP 117
26133: EQUAL
26134: IFFALSE 26138
// break ;
26136: GO 26285
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
26138: LD_ADDR_EXP 119
26142: PUSH
26143: LD_EXP 119
26147: PPUSH
26148: LD_VAR 0 5
26152: PPUSH
26153: LD_EXP 119
26157: PUSH
26158: LD_VAR 0 5
26162: ARRAY
26163: PUSH
26164: LD_INT 1
26166: PLUS
26167: PPUSH
26168: CALL_OW 1
26172: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
26173: LD_ADDR_EXP 116
26177: PUSH
26178: LD_EXP 116
26182: PPUSH
26183: LD_VAR 0 5
26187: PUSH
26188: LD_EXP 116
26192: PUSH
26193: LD_VAR 0 5
26197: ARRAY
26198: PUSH
26199: LD_INT 1
26201: PLUS
26202: PUSH
26203: EMPTY
26204: LIST
26205: LIST
26206: PPUSH
26207: LD_VAR 0 2
26211: PUSH
26212: LD_VAR 0 4
26216: ARRAY
26217: PUSH
26218: LD_VAR 0 2
26222: PUSH
26223: LD_VAR 0 4
26227: ARRAY
26228: PPUSH
26229: CALL_OW 255
26233: PUSH
26234: EMPTY
26235: LIST
26236: LIST
26237: PPUSH
26238: CALL 33836 0 3
26242: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
26243: LD_VAR 0 2
26247: PUSH
26248: LD_VAR 0 4
26252: ARRAY
26253: PPUSH
26254: LD_VAR 0 1
26258: PPUSH
26259: CALL_OW 255
26263: PPUSH
26264: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
26268: LD_VAR 0 2
26272: PUSH
26273: LD_VAR 0 4
26277: ARRAY
26278: PPUSH
26279: CALL_OW 141
// end ;
26283: GO 26115
26285: POP
26286: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
26287: LD_VAR 0 1
26291: PPUSH
26292: LD_EXP 116
26296: PUSH
26297: LD_VAR 0 5
26301: ARRAY
26302: PUSH
26303: LD_INT 0
26305: PLUS
26306: PPUSH
26307: CALL_OW 505
// end ;
26311: LD_VAR 0 3
26315: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
26316: LD_INT 0
26318: PPUSH
26319: PPUSH
26320: PPUSH
26321: PPUSH
// if not hack in hackTanks then
26322: LD_VAR 0 1
26326: PUSH
26327: LD_EXP 115
26331: IN
26332: NOT
26333: IFFALSE 26337
// exit ;
26335: GO 26577
// index := GetElementIndex ( hackTanks , hack ) ;
26337: LD_ADDR_VAR 0 4
26341: PUSH
26342: LD_EXP 115
26346: PPUSH
26347: LD_VAR 0 1
26351: PPUSH
26352: CALL 33621 0 2
26356: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
26357: LD_ADDR_VAR 0 3
26361: PUSH
26362: DOUBLE
26363: LD_EXP 116
26367: PUSH
26368: LD_VAR 0 4
26372: ARRAY
26373: INC
26374: ST_TO_ADDR
26375: LD_INT 1
26377: PUSH
26378: FOR_DOWNTO
26379: IFFALSE 26551
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
26381: LD_ADDR_VAR 0 5
26385: PUSH
26386: LD_EXP 116
26390: PUSH
26391: LD_VAR 0 4
26395: ARRAY
26396: PUSH
26397: LD_VAR 0 3
26401: ARRAY
26402: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
26403: LD_VAR 0 5
26407: PUSH
26408: LD_INT 1
26410: ARRAY
26411: PPUSH
26412: CALL_OW 302
26416: NOT
26417: PUSH
26418: LD_VAR 0 5
26422: PUSH
26423: LD_INT 1
26425: ARRAY
26426: PPUSH
26427: CALL_OW 255
26431: PUSH
26432: LD_VAR 0 1
26436: PPUSH
26437: CALL_OW 255
26441: NONEQUAL
26442: OR
26443: IFFALSE 26549
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
26445: LD_VAR 0 5
26449: PUSH
26450: LD_INT 1
26452: ARRAY
26453: PPUSH
26454: CALL_OW 305
26458: PUSH
26459: LD_VAR 0 5
26463: PUSH
26464: LD_INT 1
26466: ARRAY
26467: PPUSH
26468: CALL_OW 255
26472: PUSH
26473: LD_VAR 0 1
26477: PPUSH
26478: CALL_OW 255
26482: EQUAL
26483: AND
26484: IFFALSE 26508
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
26486: LD_VAR 0 5
26490: PUSH
26491: LD_INT 1
26493: ARRAY
26494: PPUSH
26495: LD_VAR 0 5
26499: PUSH
26500: LD_INT 2
26502: ARRAY
26503: PPUSH
26504: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
26508: LD_ADDR_EXP 116
26512: PUSH
26513: LD_EXP 116
26517: PPUSH
26518: LD_VAR 0 4
26522: PPUSH
26523: LD_EXP 116
26527: PUSH
26528: LD_VAR 0 4
26532: ARRAY
26533: PPUSH
26534: LD_VAR 0 3
26538: PPUSH
26539: CALL_OW 3
26543: PPUSH
26544: CALL_OW 1
26548: ST_TO_ADDR
// end ; end ;
26549: GO 26378
26551: POP
26552: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
26553: LD_VAR 0 1
26557: PPUSH
26558: LD_EXP 116
26562: PUSH
26563: LD_VAR 0 4
26567: ARRAY
26568: PUSH
26569: LD_INT 0
26571: PLUS
26572: PPUSH
26573: CALL_OW 505
// end ;
26577: LD_VAR 0 2
26581: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
26582: LD_INT 0
26584: PPUSH
26585: PPUSH
26586: PPUSH
26587: PPUSH
// if not hack in hackTanks then
26588: LD_VAR 0 1
26592: PUSH
26593: LD_EXP 115
26597: IN
26598: NOT
26599: IFFALSE 26603
// exit ;
26601: GO 26688
// index := GetElementIndex ( hackTanks , hack ) ;
26603: LD_ADDR_VAR 0 5
26607: PUSH
26608: LD_EXP 115
26612: PPUSH
26613: LD_VAR 0 1
26617: PPUSH
26618: CALL 33621 0 2
26622: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
26623: LD_ADDR_VAR 0 4
26627: PUSH
26628: DOUBLE
26629: LD_INT 1
26631: DEC
26632: ST_TO_ADDR
26633: LD_EXP 116
26637: PUSH
26638: LD_VAR 0 5
26642: ARRAY
26643: PUSH
26644: FOR_TO
26645: IFFALSE 26686
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
26647: LD_EXP 116
26651: PUSH
26652: LD_VAR 0 5
26656: ARRAY
26657: PUSH
26658: LD_VAR 0 4
26662: ARRAY
26663: PUSH
26664: LD_INT 1
26666: ARRAY
26667: PUSH
26668: LD_VAR 0 2
26672: EQUAL
26673: IFFALSE 26684
// KillUnit ( vehicle ) ;
26675: LD_VAR 0 2
26679: PPUSH
26680: CALL_OW 66
26684: GO 26644
26686: POP
26687: POP
// end ;
26688: LD_VAR 0 3
26692: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
26693: LD_EXP 120
26697: NOT
26698: IFFALSE 26733
26700: GO 26702
26702: DISABLE
// begin initMiner := true ;
26703: LD_ADDR_EXP 120
26707: PUSH
26708: LD_INT 1
26710: ST_TO_ADDR
// minersList := [ ] ;
26711: LD_ADDR_EXP 121
26715: PUSH
26716: EMPTY
26717: ST_TO_ADDR
// minerMinesList := [ ] ;
26718: LD_ADDR_EXP 122
26722: PUSH
26723: EMPTY
26724: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
26725: LD_ADDR_EXP 123
26729: PUSH
26730: LD_INT 5
26732: ST_TO_ADDR
// end ;
26733: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
26734: LD_EXP 120
26738: PUSH
26739: LD_INT 34
26741: PUSH
26742: LD_INT 81
26744: PUSH
26745: EMPTY
26746: LIST
26747: LIST
26748: PPUSH
26749: CALL_OW 69
26753: AND
26754: IFFALSE 27215
26756: GO 26758
26758: DISABLE
26759: LD_INT 0
26761: PPUSH
26762: PPUSH
26763: PPUSH
26764: PPUSH
// begin enable ;
26765: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
26766: LD_ADDR_VAR 0 1
26770: PUSH
26771: LD_INT 34
26773: PUSH
26774: LD_INT 81
26776: PUSH
26777: EMPTY
26778: LIST
26779: LIST
26780: PPUSH
26781: CALL_OW 69
26785: PUSH
26786: FOR_IN
26787: IFFALSE 26859
// begin if not i in minersList then
26789: LD_VAR 0 1
26793: PUSH
26794: LD_EXP 121
26798: IN
26799: NOT
26800: IFFALSE 26857
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
26802: LD_ADDR_EXP 121
26806: PUSH
26807: LD_EXP 121
26811: PPUSH
26812: LD_EXP 121
26816: PUSH
26817: LD_INT 1
26819: PLUS
26820: PPUSH
26821: LD_VAR 0 1
26825: PPUSH
26826: CALL_OW 1
26830: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
26831: LD_ADDR_EXP 122
26835: PUSH
26836: LD_EXP 122
26840: PPUSH
26841: LD_EXP 122
26845: PUSH
26846: LD_INT 1
26848: PLUS
26849: PPUSH
26850: EMPTY
26851: PPUSH
26852: CALL_OW 1
26856: ST_TO_ADDR
// end end ;
26857: GO 26786
26859: POP
26860: POP
// for i := minerMinesList downto 1 do
26861: LD_ADDR_VAR 0 1
26865: PUSH
26866: DOUBLE
26867: LD_EXP 122
26871: INC
26872: ST_TO_ADDR
26873: LD_INT 1
26875: PUSH
26876: FOR_DOWNTO
26877: IFFALSE 27213
// begin if IsLive ( minersList [ i ] ) then
26879: LD_EXP 121
26883: PUSH
26884: LD_VAR 0 1
26888: ARRAY
26889: PPUSH
26890: CALL_OW 300
26894: IFFALSE 26922
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
26896: LD_EXP 121
26900: PUSH
26901: LD_VAR 0 1
26905: ARRAY
26906: PPUSH
26907: LD_EXP 122
26911: PUSH
26912: LD_VAR 0 1
26916: ARRAY
26917: PPUSH
26918: CALL_OW 505
// if not minerMinesList [ i ] then
26922: LD_EXP 122
26926: PUSH
26927: LD_VAR 0 1
26931: ARRAY
26932: NOT
26933: IFFALSE 26937
// continue ;
26935: GO 26876
// for j := minerMinesList [ i ] downto 1 do
26937: LD_ADDR_VAR 0 2
26941: PUSH
26942: DOUBLE
26943: LD_EXP 122
26947: PUSH
26948: LD_VAR 0 1
26952: ARRAY
26953: INC
26954: ST_TO_ADDR
26955: LD_INT 1
26957: PUSH
26958: FOR_DOWNTO
26959: IFFALSE 27209
// begin side := GetSide ( minersList [ i ] ) ;
26961: LD_ADDR_VAR 0 3
26965: PUSH
26966: LD_EXP 121
26970: PUSH
26971: LD_VAR 0 1
26975: ARRAY
26976: PPUSH
26977: CALL_OW 255
26981: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
26982: LD_ADDR_VAR 0 4
26986: PUSH
26987: LD_EXP 122
26991: PUSH
26992: LD_VAR 0 1
26996: ARRAY
26997: PUSH
26998: LD_VAR 0 2
27002: ARRAY
27003: PUSH
27004: LD_INT 1
27006: ARRAY
27007: PPUSH
27008: LD_EXP 122
27012: PUSH
27013: LD_VAR 0 1
27017: ARRAY
27018: PUSH
27019: LD_VAR 0 2
27023: ARRAY
27024: PUSH
27025: LD_INT 2
27027: ARRAY
27028: PPUSH
27029: CALL_OW 428
27033: ST_TO_ADDR
// if not tmp then
27034: LD_VAR 0 4
27038: NOT
27039: IFFALSE 27043
// continue ;
27041: GO 26958
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
27043: LD_VAR 0 4
27047: PUSH
27048: LD_INT 81
27050: PUSH
27051: LD_VAR 0 3
27055: PUSH
27056: EMPTY
27057: LIST
27058: LIST
27059: PPUSH
27060: CALL_OW 69
27064: IN
27065: PUSH
27066: LD_EXP 122
27070: PUSH
27071: LD_VAR 0 1
27075: ARRAY
27076: PUSH
27077: LD_VAR 0 2
27081: ARRAY
27082: PUSH
27083: LD_INT 1
27085: ARRAY
27086: PPUSH
27087: LD_EXP 122
27091: PUSH
27092: LD_VAR 0 1
27096: ARRAY
27097: PUSH
27098: LD_VAR 0 2
27102: ARRAY
27103: PUSH
27104: LD_INT 2
27106: ARRAY
27107: PPUSH
27108: CALL_OW 458
27112: AND
27113: IFFALSE 27207
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
27115: LD_EXP 122
27119: PUSH
27120: LD_VAR 0 1
27124: ARRAY
27125: PUSH
27126: LD_VAR 0 2
27130: ARRAY
27131: PUSH
27132: LD_INT 1
27134: ARRAY
27135: PPUSH
27136: LD_EXP 122
27140: PUSH
27141: LD_VAR 0 1
27145: ARRAY
27146: PUSH
27147: LD_VAR 0 2
27151: ARRAY
27152: PUSH
27153: LD_INT 2
27155: ARRAY
27156: PPUSH
27157: LD_VAR 0 3
27161: PPUSH
27162: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
27166: LD_ADDR_EXP 122
27170: PUSH
27171: LD_EXP 122
27175: PPUSH
27176: LD_VAR 0 1
27180: PPUSH
27181: LD_EXP 122
27185: PUSH
27186: LD_VAR 0 1
27190: ARRAY
27191: PPUSH
27192: LD_VAR 0 2
27196: PPUSH
27197: CALL_OW 3
27201: PPUSH
27202: CALL_OW 1
27206: ST_TO_ADDR
// end ; end ;
27207: GO 26958
27209: POP
27210: POP
// end ;
27211: GO 26876
27213: POP
27214: POP
// end ;
27215: PPOPN 4
27217: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
27218: LD_INT 0
27220: PPUSH
27221: PPUSH
// result := false ;
27222: LD_ADDR_VAR 0 4
27226: PUSH
27227: LD_INT 0
27229: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
27230: LD_VAR 0 1
27234: PPUSH
27235: CALL_OW 264
27239: PUSH
27240: LD_INT 81
27242: EQUAL
27243: NOT
27244: IFFALSE 27248
// exit ;
27246: GO 27488
// index := GetElementIndex ( minersList , unit ) ;
27248: LD_ADDR_VAR 0 5
27252: PUSH
27253: LD_EXP 121
27257: PPUSH
27258: LD_VAR 0 1
27262: PPUSH
27263: CALL 33621 0 2
27267: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
27268: LD_EXP 122
27272: PUSH
27273: LD_VAR 0 5
27277: ARRAY
27278: PUSH
27279: LD_EXP 123
27283: GREATEREQUAL
27284: IFFALSE 27288
// exit ;
27286: GO 27488
// ComMoveXY ( unit , x , y ) ;
27288: LD_VAR 0 1
27292: PPUSH
27293: LD_VAR 0 2
27297: PPUSH
27298: LD_VAR 0 3
27302: PPUSH
27303: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
27307: LD_INT 35
27309: PPUSH
27310: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
27314: LD_VAR 0 1
27318: PPUSH
27319: LD_VAR 0 2
27323: PPUSH
27324: LD_VAR 0 3
27328: PPUSH
27329: CALL 64976 0 3
27333: NOT
27334: PUSH
27335: LD_VAR 0 1
27339: PPUSH
27340: CALL_OW 314
27344: AND
27345: IFFALSE 27349
// exit ;
27347: GO 27488
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
27349: LD_VAR 0 2
27353: PPUSH
27354: LD_VAR 0 3
27358: PPUSH
27359: CALL_OW 428
27363: PUSH
27364: LD_VAR 0 1
27368: EQUAL
27369: PUSH
27370: LD_VAR 0 1
27374: PPUSH
27375: CALL_OW 314
27379: NOT
27380: AND
27381: IFFALSE 27307
// PlaySoundXY ( x , y , PlantMine ) ;
27383: LD_VAR 0 2
27387: PPUSH
27388: LD_VAR 0 3
27392: PPUSH
27393: LD_STRING PlantMine
27395: PPUSH
27396: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
27400: LD_VAR 0 2
27404: PPUSH
27405: LD_VAR 0 3
27409: PPUSH
27410: LD_VAR 0 1
27414: PPUSH
27415: CALL_OW 255
27419: PPUSH
27420: LD_INT 0
27422: PPUSH
27423: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
27427: LD_ADDR_EXP 122
27431: PUSH
27432: LD_EXP 122
27436: PPUSH
27437: LD_VAR 0 5
27441: PUSH
27442: LD_EXP 122
27446: PUSH
27447: LD_VAR 0 5
27451: ARRAY
27452: PUSH
27453: LD_INT 1
27455: PLUS
27456: PUSH
27457: EMPTY
27458: LIST
27459: LIST
27460: PPUSH
27461: LD_VAR 0 2
27465: PUSH
27466: LD_VAR 0 3
27470: PUSH
27471: EMPTY
27472: LIST
27473: LIST
27474: PPUSH
27475: CALL 33836 0 3
27479: ST_TO_ADDR
// result := true ;
27480: LD_ADDR_VAR 0 4
27484: PUSH
27485: LD_INT 1
27487: ST_TO_ADDR
// end ;
27488: LD_VAR 0 4
27492: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
27493: LD_INT 0
27495: PPUSH
27496: PPUSH
27497: PPUSH
// if not unit in minersList then
27498: LD_VAR 0 1
27502: PUSH
27503: LD_EXP 121
27507: IN
27508: NOT
27509: IFFALSE 27513
// exit ;
27511: GO 27905
// index := GetElementIndex ( minersList , unit ) ;
27513: LD_ADDR_VAR 0 6
27517: PUSH
27518: LD_EXP 121
27522: PPUSH
27523: LD_VAR 0 1
27527: PPUSH
27528: CALL 33621 0 2
27532: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
27533: LD_ADDR_VAR 0 5
27537: PUSH
27538: DOUBLE
27539: LD_EXP 122
27543: PUSH
27544: LD_VAR 0 6
27548: ARRAY
27549: INC
27550: ST_TO_ADDR
27551: LD_INT 1
27553: PUSH
27554: FOR_DOWNTO
27555: IFFALSE 27716
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
27557: LD_EXP 122
27561: PUSH
27562: LD_VAR 0 6
27566: ARRAY
27567: PUSH
27568: LD_VAR 0 5
27572: ARRAY
27573: PUSH
27574: LD_INT 1
27576: ARRAY
27577: PUSH
27578: LD_VAR 0 2
27582: EQUAL
27583: PUSH
27584: LD_EXP 122
27588: PUSH
27589: LD_VAR 0 6
27593: ARRAY
27594: PUSH
27595: LD_VAR 0 5
27599: ARRAY
27600: PUSH
27601: LD_INT 2
27603: ARRAY
27604: PUSH
27605: LD_VAR 0 3
27609: EQUAL
27610: AND
27611: IFFALSE 27714
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
27613: LD_EXP 122
27617: PUSH
27618: LD_VAR 0 6
27622: ARRAY
27623: PUSH
27624: LD_VAR 0 5
27628: ARRAY
27629: PUSH
27630: LD_INT 1
27632: ARRAY
27633: PPUSH
27634: LD_EXP 122
27638: PUSH
27639: LD_VAR 0 6
27643: ARRAY
27644: PUSH
27645: LD_VAR 0 5
27649: ARRAY
27650: PUSH
27651: LD_INT 2
27653: ARRAY
27654: PPUSH
27655: LD_VAR 0 1
27659: PPUSH
27660: CALL_OW 255
27664: PPUSH
27665: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
27669: LD_ADDR_EXP 122
27673: PUSH
27674: LD_EXP 122
27678: PPUSH
27679: LD_VAR 0 6
27683: PPUSH
27684: LD_EXP 122
27688: PUSH
27689: LD_VAR 0 6
27693: ARRAY
27694: PPUSH
27695: LD_VAR 0 5
27699: PPUSH
27700: CALL_OW 3
27704: PPUSH
27705: CALL_OW 1
27709: ST_TO_ADDR
// exit ;
27710: POP
27711: POP
27712: GO 27905
// end ; end ;
27714: GO 27554
27716: POP
27717: POP
// for i := minerMinesList [ index ] downto 1 do
27718: LD_ADDR_VAR 0 5
27722: PUSH
27723: DOUBLE
27724: LD_EXP 122
27728: PUSH
27729: LD_VAR 0 6
27733: ARRAY
27734: INC
27735: ST_TO_ADDR
27736: LD_INT 1
27738: PUSH
27739: FOR_DOWNTO
27740: IFFALSE 27903
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
27742: LD_EXP 122
27746: PUSH
27747: LD_VAR 0 6
27751: ARRAY
27752: PUSH
27753: LD_VAR 0 5
27757: ARRAY
27758: PUSH
27759: LD_INT 1
27761: ARRAY
27762: PPUSH
27763: LD_EXP 122
27767: PUSH
27768: LD_VAR 0 6
27772: ARRAY
27773: PUSH
27774: LD_VAR 0 5
27778: ARRAY
27779: PUSH
27780: LD_INT 2
27782: ARRAY
27783: PPUSH
27784: LD_VAR 0 2
27788: PPUSH
27789: LD_VAR 0 3
27793: PPUSH
27794: CALL_OW 298
27798: PUSH
27799: LD_INT 6
27801: LESS
27802: IFFALSE 27901
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
27804: LD_EXP 122
27808: PUSH
27809: LD_VAR 0 6
27813: ARRAY
27814: PUSH
27815: LD_VAR 0 5
27819: ARRAY
27820: PUSH
27821: LD_INT 1
27823: ARRAY
27824: PPUSH
27825: LD_EXP 122
27829: PUSH
27830: LD_VAR 0 6
27834: ARRAY
27835: PUSH
27836: LD_VAR 0 5
27840: ARRAY
27841: PUSH
27842: LD_INT 2
27844: ARRAY
27845: PPUSH
27846: LD_VAR 0 1
27850: PPUSH
27851: CALL_OW 255
27855: PPUSH
27856: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
27860: LD_ADDR_EXP 122
27864: PUSH
27865: LD_EXP 122
27869: PPUSH
27870: LD_VAR 0 6
27874: PPUSH
27875: LD_EXP 122
27879: PUSH
27880: LD_VAR 0 6
27884: ARRAY
27885: PPUSH
27886: LD_VAR 0 5
27890: PPUSH
27891: CALL_OW 3
27895: PPUSH
27896: CALL_OW 1
27900: ST_TO_ADDR
// end ; end ;
27901: GO 27739
27903: POP
27904: POP
// end ;
27905: LD_VAR 0 4
27909: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
27910: LD_INT 0
27912: PPUSH
27913: PPUSH
27914: PPUSH
27915: PPUSH
27916: PPUSH
27917: PPUSH
27918: PPUSH
27919: PPUSH
27920: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
27921: LD_VAR 0 1
27925: PPUSH
27926: CALL_OW 264
27930: PUSH
27931: LD_INT 81
27933: EQUAL
27934: NOT
27935: PUSH
27936: LD_VAR 0 1
27940: PUSH
27941: LD_EXP 121
27945: IN
27946: NOT
27947: OR
27948: IFFALSE 27952
// exit ;
27950: GO 28274
// index := GetElementIndex ( minersList , unit ) ;
27952: LD_ADDR_VAR 0 6
27956: PUSH
27957: LD_EXP 121
27961: PPUSH
27962: LD_VAR 0 1
27966: PPUSH
27967: CALL 33621 0 2
27971: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
27972: LD_ADDR_VAR 0 8
27976: PUSH
27977: LD_EXP 123
27981: PUSH
27982: LD_EXP 122
27986: PUSH
27987: LD_VAR 0 6
27991: ARRAY
27992: MINUS
27993: ST_TO_ADDR
// if not minesFreeAmount then
27994: LD_VAR 0 8
27998: NOT
27999: IFFALSE 28003
// exit ;
28001: GO 28274
// tmp := [ ] ;
28003: LD_ADDR_VAR 0 7
28007: PUSH
28008: EMPTY
28009: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
28010: LD_ADDR_VAR 0 5
28014: PUSH
28015: DOUBLE
28016: LD_INT 1
28018: DEC
28019: ST_TO_ADDR
28020: LD_VAR 0 8
28024: PUSH
28025: FOR_TO
28026: IFFALSE 28221
// begin _d := rand ( 0 , 5 ) ;
28028: LD_ADDR_VAR 0 11
28032: PUSH
28033: LD_INT 0
28035: PPUSH
28036: LD_INT 5
28038: PPUSH
28039: CALL_OW 12
28043: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
28044: LD_ADDR_VAR 0 12
28048: PUSH
28049: LD_INT 2
28051: PPUSH
28052: LD_INT 6
28054: PPUSH
28055: CALL_OW 12
28059: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
28060: LD_ADDR_VAR 0 9
28064: PUSH
28065: LD_VAR 0 2
28069: PPUSH
28070: LD_VAR 0 11
28074: PPUSH
28075: LD_VAR 0 12
28079: PPUSH
28080: CALL_OW 272
28084: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
28085: LD_ADDR_VAR 0 10
28089: PUSH
28090: LD_VAR 0 3
28094: PPUSH
28095: LD_VAR 0 11
28099: PPUSH
28100: LD_VAR 0 12
28104: PPUSH
28105: CALL_OW 273
28109: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
28110: LD_VAR 0 9
28114: PPUSH
28115: LD_VAR 0 10
28119: PPUSH
28120: CALL_OW 488
28124: PUSH
28125: LD_VAR 0 9
28129: PUSH
28130: LD_VAR 0 10
28134: PUSH
28135: EMPTY
28136: LIST
28137: LIST
28138: PUSH
28139: LD_VAR 0 7
28143: IN
28144: NOT
28145: AND
28146: PUSH
28147: LD_VAR 0 9
28151: PPUSH
28152: LD_VAR 0 10
28156: PPUSH
28157: CALL_OW 458
28161: NOT
28162: AND
28163: IFFALSE 28205
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
28165: LD_ADDR_VAR 0 7
28169: PUSH
28170: LD_VAR 0 7
28174: PPUSH
28175: LD_VAR 0 7
28179: PUSH
28180: LD_INT 1
28182: PLUS
28183: PPUSH
28184: LD_VAR 0 9
28188: PUSH
28189: LD_VAR 0 10
28193: PUSH
28194: EMPTY
28195: LIST
28196: LIST
28197: PPUSH
28198: CALL_OW 1
28202: ST_TO_ADDR
28203: GO 28219
// i := i - 1 ;
28205: LD_ADDR_VAR 0 5
28209: PUSH
28210: LD_VAR 0 5
28214: PUSH
28215: LD_INT 1
28217: MINUS
28218: ST_TO_ADDR
// end ;
28219: GO 28025
28221: POP
28222: POP
// for i in tmp do
28223: LD_ADDR_VAR 0 5
28227: PUSH
28228: LD_VAR 0 7
28232: PUSH
28233: FOR_IN
28234: IFFALSE 28272
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
28236: LD_VAR 0 1
28240: PPUSH
28241: LD_VAR 0 5
28245: PUSH
28246: LD_INT 1
28248: ARRAY
28249: PPUSH
28250: LD_VAR 0 5
28254: PUSH
28255: LD_INT 2
28257: ARRAY
28258: PPUSH
28259: CALL 27218 0 3
28263: NOT
28264: IFFALSE 28270
// exit ;
28266: POP
28267: POP
28268: GO 28274
28270: GO 28233
28272: POP
28273: POP
// end ;
28274: LD_VAR 0 4
28278: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
28279: LD_INT 0
28281: PPUSH
28282: PPUSH
28283: PPUSH
28284: PPUSH
28285: PPUSH
28286: PPUSH
28287: PPUSH
// if not GetClass ( unit ) = class_sniper then
28288: LD_VAR 0 1
28292: PPUSH
28293: CALL_OW 257
28297: PUSH
28298: LD_INT 5
28300: EQUAL
28301: NOT
28302: IFFALSE 28306
// exit ;
28304: GO 28694
// dist := 8 ;
28306: LD_ADDR_VAR 0 5
28310: PUSH
28311: LD_INT 8
28313: ST_TO_ADDR
// viewRange := 12 ;
28314: LD_ADDR_VAR 0 7
28318: PUSH
28319: LD_INT 12
28321: ST_TO_ADDR
// side := GetSide ( unit ) ;
28322: LD_ADDR_VAR 0 6
28326: PUSH
28327: LD_VAR 0 1
28331: PPUSH
28332: CALL_OW 255
28336: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
28337: LD_INT 61
28339: PPUSH
28340: LD_VAR 0 6
28344: PPUSH
28345: CALL_OW 321
28349: PUSH
28350: LD_INT 2
28352: EQUAL
28353: IFFALSE 28363
// viewRange := 16 ;
28355: LD_ADDR_VAR 0 7
28359: PUSH
28360: LD_INT 16
28362: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
28363: LD_VAR 0 1
28367: PPUSH
28368: LD_VAR 0 2
28372: PPUSH
28373: LD_VAR 0 3
28377: PPUSH
28378: CALL_OW 297
28382: PUSH
28383: LD_VAR 0 5
28387: GREATER
28388: IFFALSE 28467
// begin ComMoveXY ( unit , x , y ) ;
28390: LD_VAR 0 1
28394: PPUSH
28395: LD_VAR 0 2
28399: PPUSH
28400: LD_VAR 0 3
28404: PPUSH
28405: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
28409: LD_INT 35
28411: PPUSH
28412: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
28416: LD_VAR 0 1
28420: PPUSH
28421: LD_VAR 0 2
28425: PPUSH
28426: LD_VAR 0 3
28430: PPUSH
28431: CALL 64976 0 3
28435: NOT
28436: IFFALSE 28440
// exit ;
28438: GO 28694
// until GetDistUnitXY ( unit , x , y ) < dist ;
28440: LD_VAR 0 1
28444: PPUSH
28445: LD_VAR 0 2
28449: PPUSH
28450: LD_VAR 0 3
28454: PPUSH
28455: CALL_OW 297
28459: PUSH
28460: LD_VAR 0 5
28464: LESS
28465: IFFALSE 28409
// end ; ComTurnXY ( unit , x , y ) ;
28467: LD_VAR 0 1
28471: PPUSH
28472: LD_VAR 0 2
28476: PPUSH
28477: LD_VAR 0 3
28481: PPUSH
28482: CALL_OW 118
// wait ( 5 ) ;
28486: LD_INT 5
28488: PPUSH
28489: CALL_OW 67
// _d := GetDir ( unit ) ;
28493: LD_ADDR_VAR 0 10
28497: PUSH
28498: LD_VAR 0 1
28502: PPUSH
28503: CALL_OW 254
28507: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
28508: LD_ADDR_VAR 0 8
28512: PUSH
28513: LD_VAR 0 1
28517: PPUSH
28518: CALL_OW 250
28522: PPUSH
28523: LD_VAR 0 10
28527: PPUSH
28528: LD_VAR 0 5
28532: PPUSH
28533: CALL_OW 272
28537: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
28538: LD_ADDR_VAR 0 9
28542: PUSH
28543: LD_VAR 0 1
28547: PPUSH
28548: CALL_OW 251
28552: PPUSH
28553: LD_VAR 0 10
28557: PPUSH
28558: LD_VAR 0 5
28562: PPUSH
28563: CALL_OW 273
28567: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28568: LD_VAR 0 8
28572: PPUSH
28573: LD_VAR 0 9
28577: PPUSH
28578: CALL_OW 488
28582: NOT
28583: IFFALSE 28587
// exit ;
28585: GO 28694
// ComAnimCustom ( unit , 1 ) ;
28587: LD_VAR 0 1
28591: PPUSH
28592: LD_INT 1
28594: PPUSH
28595: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
28599: LD_VAR 0 8
28603: PPUSH
28604: LD_VAR 0 9
28608: PPUSH
28609: LD_VAR 0 6
28613: PPUSH
28614: LD_VAR 0 7
28618: PPUSH
28619: CALL_OW 330
// repeat wait ( 1 ) ;
28623: LD_INT 1
28625: PPUSH
28626: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
28630: LD_VAR 0 1
28634: PPUSH
28635: CALL_OW 316
28639: PUSH
28640: LD_VAR 0 1
28644: PPUSH
28645: CALL_OW 314
28649: OR
28650: PUSH
28651: LD_VAR 0 1
28655: PPUSH
28656: CALL_OW 302
28660: NOT
28661: OR
28662: PUSH
28663: LD_VAR 0 1
28667: PPUSH
28668: CALL_OW 301
28672: OR
28673: IFFALSE 28623
// RemoveSeeing ( _x , _y , side ) ;
28675: LD_VAR 0 8
28679: PPUSH
28680: LD_VAR 0 9
28684: PPUSH
28685: LD_VAR 0 6
28689: PPUSH
28690: CALL_OW 331
// end ; end_of_file
28694: LD_VAR 0 4
28698: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
28699: LD_INT 0
28701: PPUSH
28702: PPUSH
// if exist_mode then
28703: LD_VAR 0 2
28707: IFFALSE 28732
// unit := CreateCharacter ( prefix & ident ) else
28709: LD_ADDR_VAR 0 5
28713: PUSH
28714: LD_VAR 0 3
28718: PUSH
28719: LD_VAR 0 1
28723: STR
28724: PPUSH
28725: CALL_OW 34
28729: ST_TO_ADDR
28730: GO 28747
// unit := NewCharacter ( ident ) ;
28732: LD_ADDR_VAR 0 5
28736: PUSH
28737: LD_VAR 0 1
28741: PPUSH
28742: CALL_OW 25
28746: ST_TO_ADDR
// result := unit ;
28747: LD_ADDR_VAR 0 4
28751: PUSH
28752: LD_VAR 0 5
28756: ST_TO_ADDR
// end ;
28757: LD_VAR 0 4
28761: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
28762: LD_INT 0
28764: PPUSH
28765: PPUSH
// if not side or not nation then
28766: LD_VAR 0 1
28770: NOT
28771: PUSH
28772: LD_VAR 0 2
28776: NOT
28777: OR
28778: IFFALSE 28782
// exit ;
28780: GO 29550
// case nation of nation_american :
28782: LD_VAR 0 2
28786: PUSH
28787: LD_INT 1
28789: DOUBLE
28790: EQUAL
28791: IFTRUE 28795
28793: GO 29009
28795: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
28796: LD_ADDR_VAR 0 4
28800: PUSH
28801: LD_INT 35
28803: PUSH
28804: LD_INT 45
28806: PUSH
28807: LD_INT 46
28809: PUSH
28810: LD_INT 47
28812: PUSH
28813: LD_INT 82
28815: PUSH
28816: LD_INT 83
28818: PUSH
28819: LD_INT 84
28821: PUSH
28822: LD_INT 85
28824: PUSH
28825: LD_INT 86
28827: PUSH
28828: LD_INT 1
28830: PUSH
28831: LD_INT 2
28833: PUSH
28834: LD_INT 6
28836: PUSH
28837: LD_INT 15
28839: PUSH
28840: LD_INT 16
28842: PUSH
28843: LD_INT 7
28845: PUSH
28846: LD_INT 12
28848: PUSH
28849: LD_INT 13
28851: PUSH
28852: LD_INT 10
28854: PUSH
28855: LD_INT 14
28857: PUSH
28858: LD_INT 20
28860: PUSH
28861: LD_INT 21
28863: PUSH
28864: LD_INT 22
28866: PUSH
28867: LD_INT 25
28869: PUSH
28870: LD_INT 32
28872: PUSH
28873: LD_INT 27
28875: PUSH
28876: LD_INT 36
28878: PUSH
28879: LD_INT 69
28881: PUSH
28882: LD_INT 39
28884: PUSH
28885: LD_INT 34
28887: PUSH
28888: LD_INT 40
28890: PUSH
28891: LD_INT 48
28893: PUSH
28894: LD_INT 49
28896: PUSH
28897: LD_INT 50
28899: PUSH
28900: LD_INT 51
28902: PUSH
28903: LD_INT 52
28905: PUSH
28906: LD_INT 53
28908: PUSH
28909: LD_INT 54
28911: PUSH
28912: LD_INT 55
28914: PUSH
28915: LD_INT 56
28917: PUSH
28918: LD_INT 57
28920: PUSH
28921: LD_INT 58
28923: PUSH
28924: LD_INT 59
28926: PUSH
28927: LD_INT 60
28929: PUSH
28930: LD_INT 61
28932: PUSH
28933: LD_INT 62
28935: PUSH
28936: LD_INT 80
28938: PUSH
28939: LD_INT 82
28941: PUSH
28942: LD_INT 83
28944: PUSH
28945: LD_INT 84
28947: PUSH
28948: LD_INT 85
28950: PUSH
28951: LD_INT 86
28953: PUSH
28954: EMPTY
28955: LIST
28956: LIST
28957: LIST
28958: LIST
28959: LIST
28960: LIST
28961: LIST
28962: LIST
28963: LIST
28964: LIST
28965: LIST
28966: LIST
28967: LIST
28968: LIST
28969: LIST
28970: LIST
28971: LIST
28972: LIST
28973: LIST
28974: LIST
28975: LIST
28976: LIST
28977: LIST
28978: LIST
28979: LIST
28980: LIST
28981: LIST
28982: LIST
28983: LIST
28984: LIST
28985: LIST
28986: LIST
28987: LIST
28988: LIST
28989: LIST
28990: LIST
28991: LIST
28992: LIST
28993: LIST
28994: LIST
28995: LIST
28996: LIST
28997: LIST
28998: LIST
28999: LIST
29000: LIST
29001: LIST
29002: LIST
29003: LIST
29004: LIST
29005: LIST
29006: ST_TO_ADDR
29007: GO 29474
29009: LD_INT 2
29011: DOUBLE
29012: EQUAL
29013: IFTRUE 29017
29015: GO 29243
29017: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
29018: LD_ADDR_VAR 0 4
29022: PUSH
29023: LD_INT 35
29025: PUSH
29026: LD_INT 45
29028: PUSH
29029: LD_INT 46
29031: PUSH
29032: LD_INT 47
29034: PUSH
29035: LD_INT 82
29037: PUSH
29038: LD_INT 83
29040: PUSH
29041: LD_INT 84
29043: PUSH
29044: LD_INT 85
29046: PUSH
29047: LD_INT 87
29049: PUSH
29050: LD_INT 70
29052: PUSH
29053: LD_INT 1
29055: PUSH
29056: LD_INT 11
29058: PUSH
29059: LD_INT 3
29061: PUSH
29062: LD_INT 4
29064: PUSH
29065: LD_INT 5
29067: PUSH
29068: LD_INT 6
29070: PUSH
29071: LD_INT 15
29073: PUSH
29074: LD_INT 18
29076: PUSH
29077: LD_INT 7
29079: PUSH
29080: LD_INT 17
29082: PUSH
29083: LD_INT 8
29085: PUSH
29086: LD_INT 20
29088: PUSH
29089: LD_INT 21
29091: PUSH
29092: LD_INT 22
29094: PUSH
29095: LD_INT 72
29097: PUSH
29098: LD_INT 26
29100: PUSH
29101: LD_INT 69
29103: PUSH
29104: LD_INT 39
29106: PUSH
29107: LD_INT 40
29109: PUSH
29110: LD_INT 41
29112: PUSH
29113: LD_INT 42
29115: PUSH
29116: LD_INT 43
29118: PUSH
29119: LD_INT 48
29121: PUSH
29122: LD_INT 49
29124: PUSH
29125: LD_INT 50
29127: PUSH
29128: LD_INT 51
29130: PUSH
29131: LD_INT 52
29133: PUSH
29134: LD_INT 53
29136: PUSH
29137: LD_INT 54
29139: PUSH
29140: LD_INT 55
29142: PUSH
29143: LD_INT 56
29145: PUSH
29146: LD_INT 60
29148: PUSH
29149: LD_INT 61
29151: PUSH
29152: LD_INT 62
29154: PUSH
29155: LD_INT 66
29157: PUSH
29158: LD_INT 67
29160: PUSH
29161: LD_INT 68
29163: PUSH
29164: LD_INT 81
29166: PUSH
29167: LD_INT 82
29169: PUSH
29170: LD_INT 83
29172: PUSH
29173: LD_INT 84
29175: PUSH
29176: LD_INT 85
29178: PUSH
29179: LD_INT 87
29181: PUSH
29182: LD_INT 88
29184: PUSH
29185: EMPTY
29186: LIST
29187: LIST
29188: LIST
29189: LIST
29190: LIST
29191: LIST
29192: LIST
29193: LIST
29194: LIST
29195: LIST
29196: LIST
29197: LIST
29198: LIST
29199: LIST
29200: LIST
29201: LIST
29202: LIST
29203: LIST
29204: LIST
29205: LIST
29206: LIST
29207: LIST
29208: LIST
29209: LIST
29210: LIST
29211: LIST
29212: LIST
29213: LIST
29214: LIST
29215: LIST
29216: LIST
29217: LIST
29218: LIST
29219: LIST
29220: LIST
29221: LIST
29222: LIST
29223: LIST
29224: LIST
29225: LIST
29226: LIST
29227: LIST
29228: LIST
29229: LIST
29230: LIST
29231: LIST
29232: LIST
29233: LIST
29234: LIST
29235: LIST
29236: LIST
29237: LIST
29238: LIST
29239: LIST
29240: ST_TO_ADDR
29241: GO 29474
29243: LD_INT 3
29245: DOUBLE
29246: EQUAL
29247: IFTRUE 29251
29249: GO 29473
29251: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
29252: LD_ADDR_VAR 0 4
29256: PUSH
29257: LD_INT 46
29259: PUSH
29260: LD_INT 47
29262: PUSH
29263: LD_INT 1
29265: PUSH
29266: LD_INT 2
29268: PUSH
29269: LD_INT 82
29271: PUSH
29272: LD_INT 83
29274: PUSH
29275: LD_INT 84
29277: PUSH
29278: LD_INT 85
29280: PUSH
29281: LD_INT 86
29283: PUSH
29284: LD_INT 11
29286: PUSH
29287: LD_INT 9
29289: PUSH
29290: LD_INT 20
29292: PUSH
29293: LD_INT 19
29295: PUSH
29296: LD_INT 21
29298: PUSH
29299: LD_INT 24
29301: PUSH
29302: LD_INT 22
29304: PUSH
29305: LD_INT 25
29307: PUSH
29308: LD_INT 28
29310: PUSH
29311: LD_INT 29
29313: PUSH
29314: LD_INT 30
29316: PUSH
29317: LD_INT 31
29319: PUSH
29320: LD_INT 37
29322: PUSH
29323: LD_INT 38
29325: PUSH
29326: LD_INT 32
29328: PUSH
29329: LD_INT 27
29331: PUSH
29332: LD_INT 33
29334: PUSH
29335: LD_INT 69
29337: PUSH
29338: LD_INT 39
29340: PUSH
29341: LD_INT 34
29343: PUSH
29344: LD_INT 40
29346: PUSH
29347: LD_INT 71
29349: PUSH
29350: LD_INT 23
29352: PUSH
29353: LD_INT 44
29355: PUSH
29356: LD_INT 48
29358: PUSH
29359: LD_INT 49
29361: PUSH
29362: LD_INT 50
29364: PUSH
29365: LD_INT 51
29367: PUSH
29368: LD_INT 52
29370: PUSH
29371: LD_INT 53
29373: PUSH
29374: LD_INT 54
29376: PUSH
29377: LD_INT 55
29379: PUSH
29380: LD_INT 56
29382: PUSH
29383: LD_INT 57
29385: PUSH
29386: LD_INT 58
29388: PUSH
29389: LD_INT 59
29391: PUSH
29392: LD_INT 63
29394: PUSH
29395: LD_INT 64
29397: PUSH
29398: LD_INT 65
29400: PUSH
29401: LD_INT 82
29403: PUSH
29404: LD_INT 83
29406: PUSH
29407: LD_INT 84
29409: PUSH
29410: LD_INT 85
29412: PUSH
29413: LD_INT 86
29415: PUSH
29416: EMPTY
29417: LIST
29418: LIST
29419: LIST
29420: LIST
29421: LIST
29422: LIST
29423: LIST
29424: LIST
29425: LIST
29426: LIST
29427: LIST
29428: LIST
29429: LIST
29430: LIST
29431: LIST
29432: LIST
29433: LIST
29434: LIST
29435: LIST
29436: LIST
29437: LIST
29438: LIST
29439: LIST
29440: LIST
29441: LIST
29442: LIST
29443: LIST
29444: LIST
29445: LIST
29446: LIST
29447: LIST
29448: LIST
29449: LIST
29450: LIST
29451: LIST
29452: LIST
29453: LIST
29454: LIST
29455: LIST
29456: LIST
29457: LIST
29458: LIST
29459: LIST
29460: LIST
29461: LIST
29462: LIST
29463: LIST
29464: LIST
29465: LIST
29466: LIST
29467: LIST
29468: LIST
29469: LIST
29470: ST_TO_ADDR
29471: GO 29474
29473: POP
// if state > - 1 and state < 3 then
29474: LD_VAR 0 3
29478: PUSH
29479: LD_INT 1
29481: NEG
29482: GREATER
29483: PUSH
29484: LD_VAR 0 3
29488: PUSH
29489: LD_INT 3
29491: LESS
29492: AND
29493: IFFALSE 29550
// for i in result do
29495: LD_ADDR_VAR 0 5
29499: PUSH
29500: LD_VAR 0 4
29504: PUSH
29505: FOR_IN
29506: IFFALSE 29548
// if GetTech ( i , side ) <> state then
29508: LD_VAR 0 5
29512: PPUSH
29513: LD_VAR 0 1
29517: PPUSH
29518: CALL_OW 321
29522: PUSH
29523: LD_VAR 0 3
29527: NONEQUAL
29528: IFFALSE 29546
// result := result diff i ;
29530: LD_ADDR_VAR 0 4
29534: PUSH
29535: LD_VAR 0 4
29539: PUSH
29540: LD_VAR 0 5
29544: DIFF
29545: ST_TO_ADDR
29546: GO 29505
29548: POP
29549: POP
// end ;
29550: LD_VAR 0 4
29554: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
29555: LD_INT 0
29557: PPUSH
29558: PPUSH
29559: PPUSH
// result := true ;
29560: LD_ADDR_VAR 0 3
29564: PUSH
29565: LD_INT 1
29567: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
29568: LD_ADDR_VAR 0 5
29572: PUSH
29573: LD_VAR 0 2
29577: PPUSH
29578: CALL_OW 480
29582: ST_TO_ADDR
// if not tmp then
29583: LD_VAR 0 5
29587: NOT
29588: IFFALSE 29592
// exit ;
29590: GO 29641
// for i in tmp do
29592: LD_ADDR_VAR 0 4
29596: PUSH
29597: LD_VAR 0 5
29601: PUSH
29602: FOR_IN
29603: IFFALSE 29639
// if GetTech ( i , side ) <> state_researched then
29605: LD_VAR 0 4
29609: PPUSH
29610: LD_VAR 0 1
29614: PPUSH
29615: CALL_OW 321
29619: PUSH
29620: LD_INT 2
29622: NONEQUAL
29623: IFFALSE 29637
// begin result := false ;
29625: LD_ADDR_VAR 0 3
29629: PUSH
29630: LD_INT 0
29632: ST_TO_ADDR
// exit ;
29633: POP
29634: POP
29635: GO 29641
// end ;
29637: GO 29602
29639: POP
29640: POP
// end ;
29641: LD_VAR 0 3
29645: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
29646: LD_INT 0
29648: PPUSH
29649: PPUSH
29650: PPUSH
29651: PPUSH
29652: PPUSH
29653: PPUSH
29654: PPUSH
29655: PPUSH
29656: PPUSH
29657: PPUSH
29658: PPUSH
29659: PPUSH
29660: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
29661: LD_VAR 0 1
29665: NOT
29666: PUSH
29667: LD_VAR 0 1
29671: PPUSH
29672: CALL_OW 257
29676: PUSH
29677: LD_INT 9
29679: NONEQUAL
29680: OR
29681: IFFALSE 29685
// exit ;
29683: GO 30258
// side := GetSide ( unit ) ;
29685: LD_ADDR_VAR 0 9
29689: PUSH
29690: LD_VAR 0 1
29694: PPUSH
29695: CALL_OW 255
29699: ST_TO_ADDR
// tech_space := tech_spacanom ;
29700: LD_ADDR_VAR 0 12
29704: PUSH
29705: LD_INT 29
29707: ST_TO_ADDR
// tech_time := tech_taurad ;
29708: LD_ADDR_VAR 0 13
29712: PUSH
29713: LD_INT 28
29715: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
29716: LD_ADDR_VAR 0 11
29720: PUSH
29721: LD_VAR 0 1
29725: PPUSH
29726: CALL_OW 310
29730: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
29731: LD_VAR 0 11
29735: PPUSH
29736: CALL_OW 247
29740: PUSH
29741: LD_INT 2
29743: EQUAL
29744: IFFALSE 29748
// exit ;
29746: GO 30258
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29748: LD_ADDR_VAR 0 8
29752: PUSH
29753: LD_INT 81
29755: PUSH
29756: LD_VAR 0 9
29760: PUSH
29761: EMPTY
29762: LIST
29763: LIST
29764: PUSH
29765: LD_INT 3
29767: PUSH
29768: LD_INT 21
29770: PUSH
29771: LD_INT 3
29773: PUSH
29774: EMPTY
29775: LIST
29776: LIST
29777: PUSH
29778: EMPTY
29779: LIST
29780: LIST
29781: PUSH
29782: EMPTY
29783: LIST
29784: LIST
29785: PPUSH
29786: CALL_OW 69
29790: ST_TO_ADDR
// if not tmp then
29791: LD_VAR 0 8
29795: NOT
29796: IFFALSE 29800
// exit ;
29798: GO 30258
// if in_unit then
29800: LD_VAR 0 11
29804: IFFALSE 29828
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
29806: LD_ADDR_VAR 0 10
29810: PUSH
29811: LD_VAR 0 8
29815: PPUSH
29816: LD_VAR 0 11
29820: PPUSH
29821: CALL_OW 74
29825: ST_TO_ADDR
29826: GO 29848
// enemy := NearestUnitToUnit ( tmp , unit ) ;
29828: LD_ADDR_VAR 0 10
29832: PUSH
29833: LD_VAR 0 8
29837: PPUSH
29838: LD_VAR 0 1
29842: PPUSH
29843: CALL_OW 74
29847: ST_TO_ADDR
// if not enemy then
29848: LD_VAR 0 10
29852: NOT
29853: IFFALSE 29857
// exit ;
29855: GO 30258
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
29857: LD_VAR 0 11
29861: PUSH
29862: LD_VAR 0 11
29866: PPUSH
29867: LD_VAR 0 10
29871: PPUSH
29872: CALL_OW 296
29876: PUSH
29877: LD_INT 13
29879: GREATER
29880: AND
29881: PUSH
29882: LD_VAR 0 1
29886: PPUSH
29887: LD_VAR 0 10
29891: PPUSH
29892: CALL_OW 296
29896: PUSH
29897: LD_INT 12
29899: GREATER
29900: OR
29901: IFFALSE 29905
// exit ;
29903: GO 30258
// missile := [ 1 ] ;
29905: LD_ADDR_VAR 0 14
29909: PUSH
29910: LD_INT 1
29912: PUSH
29913: EMPTY
29914: LIST
29915: ST_TO_ADDR
// if Researched ( side , tech_space ) then
29916: LD_VAR 0 9
29920: PPUSH
29921: LD_VAR 0 12
29925: PPUSH
29926: CALL_OW 325
29930: IFFALSE 29959
// missile := Replace ( missile , missile + 1 , 2 ) ;
29932: LD_ADDR_VAR 0 14
29936: PUSH
29937: LD_VAR 0 14
29941: PPUSH
29942: LD_VAR 0 14
29946: PUSH
29947: LD_INT 1
29949: PLUS
29950: PPUSH
29951: LD_INT 2
29953: PPUSH
29954: CALL_OW 1
29958: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
29959: LD_VAR 0 9
29963: PPUSH
29964: LD_VAR 0 13
29968: PPUSH
29969: CALL_OW 325
29973: PUSH
29974: LD_VAR 0 10
29978: PPUSH
29979: CALL_OW 255
29983: PPUSH
29984: LD_VAR 0 13
29988: PPUSH
29989: CALL_OW 325
29993: NOT
29994: AND
29995: IFFALSE 30024
// missile := Replace ( missile , missile + 1 , 3 ) ;
29997: LD_ADDR_VAR 0 14
30001: PUSH
30002: LD_VAR 0 14
30006: PPUSH
30007: LD_VAR 0 14
30011: PUSH
30012: LD_INT 1
30014: PLUS
30015: PPUSH
30016: LD_INT 3
30018: PPUSH
30019: CALL_OW 1
30023: ST_TO_ADDR
// if missile < 2 then
30024: LD_VAR 0 14
30028: PUSH
30029: LD_INT 2
30031: LESS
30032: IFFALSE 30036
// exit ;
30034: GO 30258
// x := GetX ( enemy ) ;
30036: LD_ADDR_VAR 0 4
30040: PUSH
30041: LD_VAR 0 10
30045: PPUSH
30046: CALL_OW 250
30050: ST_TO_ADDR
// y := GetY ( enemy ) ;
30051: LD_ADDR_VAR 0 5
30055: PUSH
30056: LD_VAR 0 10
30060: PPUSH
30061: CALL_OW 251
30065: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
30066: LD_ADDR_VAR 0 6
30070: PUSH
30071: LD_VAR 0 4
30075: PUSH
30076: LD_INT 1
30078: NEG
30079: PPUSH
30080: LD_INT 1
30082: PPUSH
30083: CALL_OW 12
30087: PLUS
30088: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
30089: LD_ADDR_VAR 0 7
30093: PUSH
30094: LD_VAR 0 5
30098: PUSH
30099: LD_INT 1
30101: NEG
30102: PPUSH
30103: LD_INT 1
30105: PPUSH
30106: CALL_OW 12
30110: PLUS
30111: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30112: LD_VAR 0 6
30116: PPUSH
30117: LD_VAR 0 7
30121: PPUSH
30122: CALL_OW 488
30126: NOT
30127: IFFALSE 30149
// begin _x := x ;
30129: LD_ADDR_VAR 0 6
30133: PUSH
30134: LD_VAR 0 4
30138: ST_TO_ADDR
// _y := y ;
30139: LD_ADDR_VAR 0 7
30143: PUSH
30144: LD_VAR 0 5
30148: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
30149: LD_ADDR_VAR 0 3
30153: PUSH
30154: LD_INT 1
30156: PPUSH
30157: LD_VAR 0 14
30161: PPUSH
30162: CALL_OW 12
30166: ST_TO_ADDR
// case i of 1 :
30167: LD_VAR 0 3
30171: PUSH
30172: LD_INT 1
30174: DOUBLE
30175: EQUAL
30176: IFTRUE 30180
30178: GO 30197
30180: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
30181: LD_VAR 0 1
30185: PPUSH
30186: LD_VAR 0 10
30190: PPUSH
30191: CALL_OW 115
30195: GO 30258
30197: LD_INT 2
30199: DOUBLE
30200: EQUAL
30201: IFTRUE 30205
30203: GO 30227
30205: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
30206: LD_VAR 0 1
30210: PPUSH
30211: LD_VAR 0 6
30215: PPUSH
30216: LD_VAR 0 7
30220: PPUSH
30221: CALL_OW 153
30225: GO 30258
30227: LD_INT 3
30229: DOUBLE
30230: EQUAL
30231: IFTRUE 30235
30233: GO 30257
30235: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
30236: LD_VAR 0 1
30240: PPUSH
30241: LD_VAR 0 6
30245: PPUSH
30246: LD_VAR 0 7
30250: PPUSH
30251: CALL_OW 154
30255: GO 30258
30257: POP
// end ;
30258: LD_VAR 0 2
30262: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
30263: LD_INT 0
30265: PPUSH
30266: PPUSH
30267: PPUSH
30268: PPUSH
30269: PPUSH
30270: PPUSH
// if not unit or not building then
30271: LD_VAR 0 1
30275: NOT
30276: PUSH
30277: LD_VAR 0 2
30281: NOT
30282: OR
30283: IFFALSE 30287
// exit ;
30285: GO 30445
// x := GetX ( building ) ;
30287: LD_ADDR_VAR 0 5
30291: PUSH
30292: LD_VAR 0 2
30296: PPUSH
30297: CALL_OW 250
30301: ST_TO_ADDR
// y := GetY ( building ) ;
30302: LD_ADDR_VAR 0 6
30306: PUSH
30307: LD_VAR 0 2
30311: PPUSH
30312: CALL_OW 251
30316: ST_TO_ADDR
// for i = 0 to 5 do
30317: LD_ADDR_VAR 0 4
30321: PUSH
30322: DOUBLE
30323: LD_INT 0
30325: DEC
30326: ST_TO_ADDR
30327: LD_INT 5
30329: PUSH
30330: FOR_TO
30331: IFFALSE 30443
// begin _x := ShiftX ( x , i , 3 ) ;
30333: LD_ADDR_VAR 0 7
30337: PUSH
30338: LD_VAR 0 5
30342: PPUSH
30343: LD_VAR 0 4
30347: PPUSH
30348: LD_INT 3
30350: PPUSH
30351: CALL_OW 272
30355: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
30356: LD_ADDR_VAR 0 8
30360: PUSH
30361: LD_VAR 0 6
30365: PPUSH
30366: LD_VAR 0 4
30370: PPUSH
30371: LD_INT 3
30373: PPUSH
30374: CALL_OW 273
30378: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30379: LD_VAR 0 7
30383: PPUSH
30384: LD_VAR 0 8
30388: PPUSH
30389: CALL_OW 488
30393: NOT
30394: IFFALSE 30398
// continue ;
30396: GO 30330
// if HexInfo ( _x , _y ) = 0 then
30398: LD_VAR 0 7
30402: PPUSH
30403: LD_VAR 0 8
30407: PPUSH
30408: CALL_OW 428
30412: PUSH
30413: LD_INT 0
30415: EQUAL
30416: IFFALSE 30441
// begin ComMoveXY ( unit , _x , _y ) ;
30418: LD_VAR 0 1
30422: PPUSH
30423: LD_VAR 0 7
30427: PPUSH
30428: LD_VAR 0 8
30432: PPUSH
30433: CALL_OW 111
// exit ;
30437: POP
30438: POP
30439: GO 30445
// end ; end ;
30441: GO 30330
30443: POP
30444: POP
// end ;
30445: LD_VAR 0 3
30449: RET
// export function ScanBase ( side , base_area ) ; begin
30450: LD_INT 0
30452: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
30453: LD_ADDR_VAR 0 3
30457: PUSH
30458: LD_VAR 0 2
30462: PPUSH
30463: LD_INT 81
30465: PUSH
30466: LD_VAR 0 1
30470: PUSH
30471: EMPTY
30472: LIST
30473: LIST
30474: PPUSH
30475: CALL_OW 70
30479: ST_TO_ADDR
// end ;
30480: LD_VAR 0 3
30484: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
30485: LD_INT 0
30487: PPUSH
30488: PPUSH
30489: PPUSH
30490: PPUSH
// result := false ;
30491: LD_ADDR_VAR 0 2
30495: PUSH
30496: LD_INT 0
30498: ST_TO_ADDR
// side := GetSide ( unit ) ;
30499: LD_ADDR_VAR 0 3
30503: PUSH
30504: LD_VAR 0 1
30508: PPUSH
30509: CALL_OW 255
30513: ST_TO_ADDR
// nat := GetNation ( unit ) ;
30514: LD_ADDR_VAR 0 4
30518: PUSH
30519: LD_VAR 0 1
30523: PPUSH
30524: CALL_OW 248
30528: ST_TO_ADDR
// case nat of 1 :
30529: LD_VAR 0 4
30533: PUSH
30534: LD_INT 1
30536: DOUBLE
30537: EQUAL
30538: IFTRUE 30542
30540: GO 30553
30542: POP
// tech := tech_lassight ; 2 :
30543: LD_ADDR_VAR 0 5
30547: PUSH
30548: LD_INT 12
30550: ST_TO_ADDR
30551: GO 30592
30553: LD_INT 2
30555: DOUBLE
30556: EQUAL
30557: IFTRUE 30561
30559: GO 30572
30561: POP
// tech := tech_mortar ; 3 :
30562: LD_ADDR_VAR 0 5
30566: PUSH
30567: LD_INT 41
30569: ST_TO_ADDR
30570: GO 30592
30572: LD_INT 3
30574: DOUBLE
30575: EQUAL
30576: IFTRUE 30580
30578: GO 30591
30580: POP
// tech := tech_bazooka ; end ;
30581: LD_ADDR_VAR 0 5
30585: PUSH
30586: LD_INT 44
30588: ST_TO_ADDR
30589: GO 30592
30591: POP
// if Researched ( side , tech ) then
30592: LD_VAR 0 3
30596: PPUSH
30597: LD_VAR 0 5
30601: PPUSH
30602: CALL_OW 325
30606: IFFALSE 30633
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
30608: LD_ADDR_VAR 0 2
30612: PUSH
30613: LD_INT 5
30615: PUSH
30616: LD_INT 8
30618: PUSH
30619: LD_INT 9
30621: PUSH
30622: EMPTY
30623: LIST
30624: LIST
30625: LIST
30626: PUSH
30627: LD_VAR 0 4
30631: ARRAY
30632: ST_TO_ADDR
// end ;
30633: LD_VAR 0 2
30637: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
30638: LD_INT 0
30640: PPUSH
30641: PPUSH
30642: PPUSH
// if not mines then
30643: LD_VAR 0 2
30647: NOT
30648: IFFALSE 30652
// exit ;
30650: GO 30796
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30652: LD_ADDR_VAR 0 5
30656: PUSH
30657: LD_INT 81
30659: PUSH
30660: LD_VAR 0 1
30664: PUSH
30665: EMPTY
30666: LIST
30667: LIST
30668: PUSH
30669: LD_INT 3
30671: PUSH
30672: LD_INT 21
30674: PUSH
30675: LD_INT 3
30677: PUSH
30678: EMPTY
30679: LIST
30680: LIST
30681: PUSH
30682: EMPTY
30683: LIST
30684: LIST
30685: PUSH
30686: EMPTY
30687: LIST
30688: LIST
30689: PPUSH
30690: CALL_OW 69
30694: ST_TO_ADDR
// for i in mines do
30695: LD_ADDR_VAR 0 4
30699: PUSH
30700: LD_VAR 0 2
30704: PUSH
30705: FOR_IN
30706: IFFALSE 30794
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
30708: LD_VAR 0 4
30712: PUSH
30713: LD_INT 1
30715: ARRAY
30716: PPUSH
30717: LD_VAR 0 4
30721: PUSH
30722: LD_INT 2
30724: ARRAY
30725: PPUSH
30726: CALL_OW 458
30730: NOT
30731: IFFALSE 30735
// continue ;
30733: GO 30705
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
30735: LD_VAR 0 4
30739: PUSH
30740: LD_INT 1
30742: ARRAY
30743: PPUSH
30744: LD_VAR 0 4
30748: PUSH
30749: LD_INT 2
30751: ARRAY
30752: PPUSH
30753: CALL_OW 428
30757: PUSH
30758: LD_VAR 0 5
30762: IN
30763: IFFALSE 30792
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
30765: LD_VAR 0 4
30769: PUSH
30770: LD_INT 1
30772: ARRAY
30773: PPUSH
30774: LD_VAR 0 4
30778: PUSH
30779: LD_INT 2
30781: ARRAY
30782: PPUSH
30783: LD_VAR 0 1
30787: PPUSH
30788: CALL_OW 456
// end ;
30792: GO 30705
30794: POP
30795: POP
// end ;
30796: LD_VAR 0 3
30800: RET
// export function Count ( array ) ; var i ; begin
30801: LD_INT 0
30803: PPUSH
30804: PPUSH
// result := 0 ;
30805: LD_ADDR_VAR 0 2
30809: PUSH
30810: LD_INT 0
30812: ST_TO_ADDR
// for i in array do
30813: LD_ADDR_VAR 0 3
30817: PUSH
30818: LD_VAR 0 1
30822: PUSH
30823: FOR_IN
30824: IFFALSE 30848
// if i then
30826: LD_VAR 0 3
30830: IFFALSE 30846
// result := result + 1 ;
30832: LD_ADDR_VAR 0 2
30836: PUSH
30837: LD_VAR 0 2
30841: PUSH
30842: LD_INT 1
30844: PLUS
30845: ST_TO_ADDR
30846: GO 30823
30848: POP
30849: POP
// end ;
30850: LD_VAR 0 2
30854: RET
// export function IsEmpty ( building ) ; begin
30855: LD_INT 0
30857: PPUSH
// if not building then
30858: LD_VAR 0 1
30862: NOT
30863: IFFALSE 30867
// exit ;
30865: GO 30910
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
30867: LD_ADDR_VAR 0 2
30871: PUSH
30872: LD_VAR 0 1
30876: PUSH
30877: LD_INT 22
30879: PUSH
30880: LD_VAR 0 1
30884: PPUSH
30885: CALL_OW 255
30889: PUSH
30890: EMPTY
30891: LIST
30892: LIST
30893: PUSH
30894: LD_INT 58
30896: PUSH
30897: EMPTY
30898: LIST
30899: PUSH
30900: EMPTY
30901: LIST
30902: LIST
30903: PPUSH
30904: CALL_OW 69
30908: IN
30909: ST_TO_ADDR
// end ;
30910: LD_VAR 0 2
30914: RET
// export function IsNotFull ( building ) ; var places ; begin
30915: LD_INT 0
30917: PPUSH
30918: PPUSH
// if not building then
30919: LD_VAR 0 1
30923: NOT
30924: IFFALSE 30928
// exit ;
30926: GO 31099
// result := false ;
30928: LD_ADDR_VAR 0 2
30932: PUSH
30933: LD_INT 0
30935: ST_TO_ADDR
// places := 0 ;
30936: LD_ADDR_VAR 0 3
30940: PUSH
30941: LD_INT 0
30943: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
30944: LD_VAR 0 1
30948: PPUSH
30949: CALL_OW 266
30953: PUSH
30954: LD_INT 0
30956: DOUBLE
30957: EQUAL
30958: IFTRUE 31016
30960: LD_INT 1
30962: DOUBLE
30963: EQUAL
30964: IFTRUE 31016
30966: LD_INT 6
30968: DOUBLE
30969: EQUAL
30970: IFTRUE 31016
30972: LD_INT 7
30974: DOUBLE
30975: EQUAL
30976: IFTRUE 31016
30978: LD_INT 8
30980: DOUBLE
30981: EQUAL
30982: IFTRUE 31016
30984: LD_INT 4
30986: DOUBLE
30987: EQUAL
30988: IFTRUE 31016
30990: LD_INT 5
30992: DOUBLE
30993: EQUAL
30994: IFTRUE 31016
30996: LD_INT 2
30998: DOUBLE
30999: EQUAL
31000: IFTRUE 31016
31002: LD_INT 3
31004: DOUBLE
31005: EQUAL
31006: IFTRUE 31016
31008: LD_INT 35
31010: DOUBLE
31011: EQUAL
31012: IFTRUE 31016
31014: GO 31027
31016: POP
// places := 6 ; b_bunker , b_breastwork :
31017: LD_ADDR_VAR 0 3
31021: PUSH
31022: LD_INT 6
31024: ST_TO_ADDR
31025: GO 31072
31027: LD_INT 32
31029: DOUBLE
31030: EQUAL
31031: IFTRUE 31041
31033: LD_INT 31
31035: DOUBLE
31036: EQUAL
31037: IFTRUE 31041
31039: GO 31052
31041: POP
// places := 1 ; b_control_tower :
31042: LD_ADDR_VAR 0 3
31046: PUSH
31047: LD_INT 1
31049: ST_TO_ADDR
31050: GO 31072
31052: LD_INT 36
31054: DOUBLE
31055: EQUAL
31056: IFTRUE 31060
31058: GO 31071
31060: POP
// places := 3 ; end ;
31061: LD_ADDR_VAR 0 3
31065: PUSH
31066: LD_INT 3
31068: ST_TO_ADDR
31069: GO 31072
31071: POP
// if places then
31072: LD_VAR 0 3
31076: IFFALSE 31099
// result := UnitsInside ( building ) < places ;
31078: LD_ADDR_VAR 0 2
31082: PUSH
31083: LD_VAR 0 1
31087: PPUSH
31088: CALL_OW 313
31092: PUSH
31093: LD_VAR 0 3
31097: LESS
31098: ST_TO_ADDR
// end ;
31099: LD_VAR 0 2
31103: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
31104: LD_INT 0
31106: PPUSH
31107: PPUSH
31108: PPUSH
31109: PPUSH
// tmp := [ ] ;
31110: LD_ADDR_VAR 0 3
31114: PUSH
31115: EMPTY
31116: ST_TO_ADDR
// list := [ ] ;
31117: LD_ADDR_VAR 0 5
31121: PUSH
31122: EMPTY
31123: ST_TO_ADDR
// for i = 16 to 25 do
31124: LD_ADDR_VAR 0 4
31128: PUSH
31129: DOUBLE
31130: LD_INT 16
31132: DEC
31133: ST_TO_ADDR
31134: LD_INT 25
31136: PUSH
31137: FOR_TO
31138: IFFALSE 31211
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
31140: LD_ADDR_VAR 0 3
31144: PUSH
31145: LD_VAR 0 3
31149: PUSH
31150: LD_INT 22
31152: PUSH
31153: LD_VAR 0 1
31157: PPUSH
31158: CALL_OW 255
31162: PUSH
31163: EMPTY
31164: LIST
31165: LIST
31166: PUSH
31167: LD_INT 91
31169: PUSH
31170: LD_VAR 0 1
31174: PUSH
31175: LD_INT 6
31177: PUSH
31178: EMPTY
31179: LIST
31180: LIST
31181: LIST
31182: PUSH
31183: LD_INT 30
31185: PUSH
31186: LD_VAR 0 4
31190: PUSH
31191: EMPTY
31192: LIST
31193: LIST
31194: PUSH
31195: EMPTY
31196: LIST
31197: LIST
31198: LIST
31199: PUSH
31200: EMPTY
31201: LIST
31202: PPUSH
31203: CALL_OW 69
31207: ADD
31208: ST_TO_ADDR
31209: GO 31137
31211: POP
31212: POP
// for i = 1 to tmp do
31213: LD_ADDR_VAR 0 4
31217: PUSH
31218: DOUBLE
31219: LD_INT 1
31221: DEC
31222: ST_TO_ADDR
31223: LD_VAR 0 3
31227: PUSH
31228: FOR_TO
31229: IFFALSE 31317
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
31231: LD_ADDR_VAR 0 5
31235: PUSH
31236: LD_VAR 0 5
31240: PUSH
31241: LD_VAR 0 3
31245: PUSH
31246: LD_VAR 0 4
31250: ARRAY
31251: PPUSH
31252: CALL_OW 266
31256: PUSH
31257: LD_VAR 0 3
31261: PUSH
31262: LD_VAR 0 4
31266: ARRAY
31267: PPUSH
31268: CALL_OW 250
31272: PUSH
31273: LD_VAR 0 3
31277: PUSH
31278: LD_VAR 0 4
31282: ARRAY
31283: PPUSH
31284: CALL_OW 251
31288: PUSH
31289: LD_VAR 0 3
31293: PUSH
31294: LD_VAR 0 4
31298: ARRAY
31299: PPUSH
31300: CALL_OW 254
31304: PUSH
31305: EMPTY
31306: LIST
31307: LIST
31308: LIST
31309: LIST
31310: PUSH
31311: EMPTY
31312: LIST
31313: ADD
31314: ST_TO_ADDR
31315: GO 31228
31317: POP
31318: POP
// result := list ;
31319: LD_ADDR_VAR 0 2
31323: PUSH
31324: LD_VAR 0 5
31328: ST_TO_ADDR
// end ;
31329: LD_VAR 0 2
31333: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
31334: LD_INT 0
31336: PPUSH
31337: PPUSH
31338: PPUSH
31339: PPUSH
31340: PPUSH
31341: PPUSH
31342: PPUSH
// if not factory then
31343: LD_VAR 0 1
31347: NOT
31348: IFFALSE 31352
// exit ;
31350: GO 31945
// if control = control_apeman then
31352: LD_VAR 0 4
31356: PUSH
31357: LD_INT 5
31359: EQUAL
31360: IFFALSE 31469
// begin tmp := UnitsInside ( factory ) ;
31362: LD_ADDR_VAR 0 8
31366: PUSH
31367: LD_VAR 0 1
31371: PPUSH
31372: CALL_OW 313
31376: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
31377: LD_VAR 0 8
31381: PPUSH
31382: LD_INT 25
31384: PUSH
31385: LD_INT 12
31387: PUSH
31388: EMPTY
31389: LIST
31390: LIST
31391: PPUSH
31392: CALL_OW 72
31396: NOT
31397: IFFALSE 31407
// control := control_manual ;
31399: LD_ADDR_VAR 0 4
31403: PUSH
31404: LD_INT 1
31406: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
31407: LD_ADDR_VAR 0 8
31411: PUSH
31412: LD_VAR 0 1
31416: PPUSH
31417: CALL 31104 0 1
31421: ST_TO_ADDR
// if tmp then
31422: LD_VAR 0 8
31426: IFFALSE 31469
// begin for i in tmp do
31428: LD_ADDR_VAR 0 7
31432: PUSH
31433: LD_VAR 0 8
31437: PUSH
31438: FOR_IN
31439: IFFALSE 31467
// if i [ 1 ] = b_ext_radio then
31441: LD_VAR 0 7
31445: PUSH
31446: LD_INT 1
31448: ARRAY
31449: PUSH
31450: LD_INT 22
31452: EQUAL
31453: IFFALSE 31465
// begin control := control_remote ;
31455: LD_ADDR_VAR 0 4
31459: PUSH
31460: LD_INT 2
31462: ST_TO_ADDR
// break ;
31463: GO 31467
// end ;
31465: GO 31438
31467: POP
31468: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
31469: LD_VAR 0 1
31473: PPUSH
31474: LD_VAR 0 2
31478: PPUSH
31479: LD_VAR 0 3
31483: PPUSH
31484: LD_VAR 0 4
31488: PPUSH
31489: LD_VAR 0 5
31493: PPUSH
31494: CALL_OW 448
31498: IFFALSE 31533
// begin result := [ chassis , engine , control , weapon ] ;
31500: LD_ADDR_VAR 0 6
31504: PUSH
31505: LD_VAR 0 2
31509: PUSH
31510: LD_VAR 0 3
31514: PUSH
31515: LD_VAR 0 4
31519: PUSH
31520: LD_VAR 0 5
31524: PUSH
31525: EMPTY
31526: LIST
31527: LIST
31528: LIST
31529: LIST
31530: ST_TO_ADDR
// exit ;
31531: GO 31945
// end ; _chassis := AvailableChassisList ( factory ) ;
31533: LD_ADDR_VAR 0 9
31537: PUSH
31538: LD_VAR 0 1
31542: PPUSH
31543: CALL_OW 475
31547: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
31548: LD_ADDR_VAR 0 11
31552: PUSH
31553: LD_VAR 0 1
31557: PPUSH
31558: CALL_OW 476
31562: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
31563: LD_ADDR_VAR 0 12
31567: PUSH
31568: LD_VAR 0 1
31572: PPUSH
31573: CALL_OW 477
31577: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
31578: LD_ADDR_VAR 0 10
31582: PUSH
31583: LD_VAR 0 1
31587: PPUSH
31588: CALL_OW 478
31592: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
31593: LD_VAR 0 9
31597: NOT
31598: PUSH
31599: LD_VAR 0 11
31603: NOT
31604: OR
31605: PUSH
31606: LD_VAR 0 12
31610: NOT
31611: OR
31612: PUSH
31613: LD_VAR 0 10
31617: NOT
31618: OR
31619: IFFALSE 31654
// begin result := [ chassis , engine , control , weapon ] ;
31621: LD_ADDR_VAR 0 6
31625: PUSH
31626: LD_VAR 0 2
31630: PUSH
31631: LD_VAR 0 3
31635: PUSH
31636: LD_VAR 0 4
31640: PUSH
31641: LD_VAR 0 5
31645: PUSH
31646: EMPTY
31647: LIST
31648: LIST
31649: LIST
31650: LIST
31651: ST_TO_ADDR
// exit ;
31652: GO 31945
// end ; if not chassis in _chassis then
31654: LD_VAR 0 2
31658: PUSH
31659: LD_VAR 0 9
31663: IN
31664: NOT
31665: IFFALSE 31691
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
31667: LD_ADDR_VAR 0 2
31671: PUSH
31672: LD_VAR 0 9
31676: PUSH
31677: LD_INT 1
31679: PPUSH
31680: LD_VAR 0 9
31684: PPUSH
31685: CALL_OW 12
31689: ARRAY
31690: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
31691: LD_VAR 0 2
31695: PPUSH
31696: LD_VAR 0 3
31700: PPUSH
31701: CALL 31950 0 2
31705: NOT
31706: IFFALSE 31765
// repeat engine := _engine [ 1 ] ;
31708: LD_ADDR_VAR 0 3
31712: PUSH
31713: LD_VAR 0 11
31717: PUSH
31718: LD_INT 1
31720: ARRAY
31721: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
31722: LD_ADDR_VAR 0 11
31726: PUSH
31727: LD_VAR 0 11
31731: PPUSH
31732: LD_INT 1
31734: PPUSH
31735: CALL_OW 3
31739: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
31740: LD_VAR 0 2
31744: PPUSH
31745: LD_VAR 0 3
31749: PPUSH
31750: CALL 31950 0 2
31754: PUSH
31755: LD_VAR 0 11
31759: PUSH
31760: EMPTY
31761: EQUAL
31762: OR
31763: IFFALSE 31708
// if not control in _control then
31765: LD_VAR 0 4
31769: PUSH
31770: LD_VAR 0 12
31774: IN
31775: NOT
31776: IFFALSE 31802
// control := _control [ rand ( 1 , _control ) ] ;
31778: LD_ADDR_VAR 0 4
31782: PUSH
31783: LD_VAR 0 12
31787: PUSH
31788: LD_INT 1
31790: PPUSH
31791: LD_VAR 0 12
31795: PPUSH
31796: CALL_OW 12
31800: ARRAY
31801: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
31802: LD_VAR 0 2
31806: PPUSH
31807: LD_VAR 0 5
31811: PPUSH
31812: CALL 32170 0 2
31816: NOT
31817: IFFALSE 31876
// repeat weapon := _weapon [ 1 ] ;
31819: LD_ADDR_VAR 0 5
31823: PUSH
31824: LD_VAR 0 10
31828: PUSH
31829: LD_INT 1
31831: ARRAY
31832: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
31833: LD_ADDR_VAR 0 10
31837: PUSH
31838: LD_VAR 0 10
31842: PPUSH
31843: LD_INT 1
31845: PPUSH
31846: CALL_OW 3
31850: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
31851: LD_VAR 0 2
31855: PPUSH
31856: LD_VAR 0 5
31860: PPUSH
31861: CALL 32170 0 2
31865: PUSH
31866: LD_VAR 0 10
31870: PUSH
31871: EMPTY
31872: EQUAL
31873: OR
31874: IFFALSE 31819
// result := [ ] ;
31876: LD_ADDR_VAR 0 6
31880: PUSH
31881: EMPTY
31882: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
31883: LD_VAR 0 1
31887: PPUSH
31888: LD_VAR 0 2
31892: PPUSH
31893: LD_VAR 0 3
31897: PPUSH
31898: LD_VAR 0 4
31902: PPUSH
31903: LD_VAR 0 5
31907: PPUSH
31908: CALL_OW 448
31912: IFFALSE 31945
// result := [ chassis , engine , control , weapon ] ;
31914: LD_ADDR_VAR 0 6
31918: PUSH
31919: LD_VAR 0 2
31923: PUSH
31924: LD_VAR 0 3
31928: PUSH
31929: LD_VAR 0 4
31933: PUSH
31934: LD_VAR 0 5
31938: PUSH
31939: EMPTY
31940: LIST
31941: LIST
31942: LIST
31943: LIST
31944: ST_TO_ADDR
// end ;
31945: LD_VAR 0 6
31949: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
31950: LD_INT 0
31952: PPUSH
// if not chassis or not engine then
31953: LD_VAR 0 1
31957: NOT
31958: PUSH
31959: LD_VAR 0 2
31963: NOT
31964: OR
31965: IFFALSE 31969
// exit ;
31967: GO 32165
// case engine of engine_solar :
31969: LD_VAR 0 2
31973: PUSH
31974: LD_INT 2
31976: DOUBLE
31977: EQUAL
31978: IFTRUE 31982
31980: GO 32020
31982: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
31983: LD_ADDR_VAR 0 3
31987: PUSH
31988: LD_INT 11
31990: PUSH
31991: LD_INT 12
31993: PUSH
31994: LD_INT 13
31996: PUSH
31997: LD_INT 14
31999: PUSH
32000: LD_INT 1
32002: PUSH
32003: LD_INT 2
32005: PUSH
32006: LD_INT 3
32008: PUSH
32009: EMPTY
32010: LIST
32011: LIST
32012: LIST
32013: LIST
32014: LIST
32015: LIST
32016: LIST
32017: ST_TO_ADDR
32018: GO 32149
32020: LD_INT 1
32022: DOUBLE
32023: EQUAL
32024: IFTRUE 32028
32026: GO 32090
32028: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
32029: LD_ADDR_VAR 0 3
32033: PUSH
32034: LD_INT 11
32036: PUSH
32037: LD_INT 12
32039: PUSH
32040: LD_INT 13
32042: PUSH
32043: LD_INT 14
32045: PUSH
32046: LD_INT 1
32048: PUSH
32049: LD_INT 2
32051: PUSH
32052: LD_INT 3
32054: PUSH
32055: LD_INT 4
32057: PUSH
32058: LD_INT 5
32060: PUSH
32061: LD_INT 21
32063: PUSH
32064: LD_INT 23
32066: PUSH
32067: LD_INT 22
32069: PUSH
32070: LD_INT 24
32072: PUSH
32073: EMPTY
32074: LIST
32075: LIST
32076: LIST
32077: LIST
32078: LIST
32079: LIST
32080: LIST
32081: LIST
32082: LIST
32083: LIST
32084: LIST
32085: LIST
32086: LIST
32087: ST_TO_ADDR
32088: GO 32149
32090: LD_INT 3
32092: DOUBLE
32093: EQUAL
32094: IFTRUE 32098
32096: GO 32148
32098: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
32099: LD_ADDR_VAR 0 3
32103: PUSH
32104: LD_INT 13
32106: PUSH
32107: LD_INT 14
32109: PUSH
32110: LD_INT 2
32112: PUSH
32113: LD_INT 3
32115: PUSH
32116: LD_INT 4
32118: PUSH
32119: LD_INT 5
32121: PUSH
32122: LD_INT 21
32124: PUSH
32125: LD_INT 22
32127: PUSH
32128: LD_INT 23
32130: PUSH
32131: LD_INT 24
32133: PUSH
32134: EMPTY
32135: LIST
32136: LIST
32137: LIST
32138: LIST
32139: LIST
32140: LIST
32141: LIST
32142: LIST
32143: LIST
32144: LIST
32145: ST_TO_ADDR
32146: GO 32149
32148: POP
// result := ( chassis in result ) ;
32149: LD_ADDR_VAR 0 3
32153: PUSH
32154: LD_VAR 0 1
32158: PUSH
32159: LD_VAR 0 3
32163: IN
32164: ST_TO_ADDR
// end ;
32165: LD_VAR 0 3
32169: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
32170: LD_INT 0
32172: PPUSH
// if not chassis or not weapon then
32173: LD_VAR 0 1
32177: NOT
32178: PUSH
32179: LD_VAR 0 2
32183: NOT
32184: OR
32185: IFFALSE 32189
// exit ;
32187: GO 33249
// case weapon of us_machine_gun :
32189: LD_VAR 0 2
32193: PUSH
32194: LD_INT 2
32196: DOUBLE
32197: EQUAL
32198: IFTRUE 32202
32200: GO 32232
32202: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
32203: LD_ADDR_VAR 0 3
32207: PUSH
32208: LD_INT 1
32210: PUSH
32211: LD_INT 2
32213: PUSH
32214: LD_INT 3
32216: PUSH
32217: LD_INT 4
32219: PUSH
32220: LD_INT 5
32222: PUSH
32223: EMPTY
32224: LIST
32225: LIST
32226: LIST
32227: LIST
32228: LIST
32229: ST_TO_ADDR
32230: GO 33233
32232: LD_INT 3
32234: DOUBLE
32235: EQUAL
32236: IFTRUE 32240
32238: GO 32270
32240: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
32241: LD_ADDR_VAR 0 3
32245: PUSH
32246: LD_INT 1
32248: PUSH
32249: LD_INT 2
32251: PUSH
32252: LD_INT 3
32254: PUSH
32255: LD_INT 4
32257: PUSH
32258: LD_INT 5
32260: PUSH
32261: EMPTY
32262: LIST
32263: LIST
32264: LIST
32265: LIST
32266: LIST
32267: ST_TO_ADDR
32268: GO 33233
32270: LD_INT 11
32272: DOUBLE
32273: EQUAL
32274: IFTRUE 32278
32276: GO 32308
32278: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
32279: LD_ADDR_VAR 0 3
32283: PUSH
32284: LD_INT 1
32286: PUSH
32287: LD_INT 2
32289: PUSH
32290: LD_INT 3
32292: PUSH
32293: LD_INT 4
32295: PUSH
32296: LD_INT 5
32298: PUSH
32299: EMPTY
32300: LIST
32301: LIST
32302: LIST
32303: LIST
32304: LIST
32305: ST_TO_ADDR
32306: GO 33233
32308: LD_INT 4
32310: DOUBLE
32311: EQUAL
32312: IFTRUE 32316
32314: GO 32342
32316: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
32317: LD_ADDR_VAR 0 3
32321: PUSH
32322: LD_INT 2
32324: PUSH
32325: LD_INT 3
32327: PUSH
32328: LD_INT 4
32330: PUSH
32331: LD_INT 5
32333: PUSH
32334: EMPTY
32335: LIST
32336: LIST
32337: LIST
32338: LIST
32339: ST_TO_ADDR
32340: GO 33233
32342: LD_INT 5
32344: DOUBLE
32345: EQUAL
32346: IFTRUE 32350
32348: GO 32376
32350: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
32351: LD_ADDR_VAR 0 3
32355: PUSH
32356: LD_INT 2
32358: PUSH
32359: LD_INT 3
32361: PUSH
32362: LD_INT 4
32364: PUSH
32365: LD_INT 5
32367: PUSH
32368: EMPTY
32369: LIST
32370: LIST
32371: LIST
32372: LIST
32373: ST_TO_ADDR
32374: GO 33233
32376: LD_INT 9
32378: DOUBLE
32379: EQUAL
32380: IFTRUE 32384
32382: GO 32410
32384: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
32385: LD_ADDR_VAR 0 3
32389: PUSH
32390: LD_INT 2
32392: PUSH
32393: LD_INT 3
32395: PUSH
32396: LD_INT 4
32398: PUSH
32399: LD_INT 5
32401: PUSH
32402: EMPTY
32403: LIST
32404: LIST
32405: LIST
32406: LIST
32407: ST_TO_ADDR
32408: GO 33233
32410: LD_INT 7
32412: DOUBLE
32413: EQUAL
32414: IFTRUE 32418
32416: GO 32444
32418: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
32419: LD_ADDR_VAR 0 3
32423: PUSH
32424: LD_INT 2
32426: PUSH
32427: LD_INT 3
32429: PUSH
32430: LD_INT 4
32432: PUSH
32433: LD_INT 5
32435: PUSH
32436: EMPTY
32437: LIST
32438: LIST
32439: LIST
32440: LIST
32441: ST_TO_ADDR
32442: GO 33233
32444: LD_INT 12
32446: DOUBLE
32447: EQUAL
32448: IFTRUE 32452
32450: GO 32478
32452: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
32453: LD_ADDR_VAR 0 3
32457: PUSH
32458: LD_INT 2
32460: PUSH
32461: LD_INT 3
32463: PUSH
32464: LD_INT 4
32466: PUSH
32467: LD_INT 5
32469: PUSH
32470: EMPTY
32471: LIST
32472: LIST
32473: LIST
32474: LIST
32475: ST_TO_ADDR
32476: GO 33233
32478: LD_INT 13
32480: DOUBLE
32481: EQUAL
32482: IFTRUE 32486
32484: GO 32512
32486: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
32487: LD_ADDR_VAR 0 3
32491: PUSH
32492: LD_INT 2
32494: PUSH
32495: LD_INT 3
32497: PUSH
32498: LD_INT 4
32500: PUSH
32501: LD_INT 5
32503: PUSH
32504: EMPTY
32505: LIST
32506: LIST
32507: LIST
32508: LIST
32509: ST_TO_ADDR
32510: GO 33233
32512: LD_INT 14
32514: DOUBLE
32515: EQUAL
32516: IFTRUE 32520
32518: GO 32538
32520: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
32521: LD_ADDR_VAR 0 3
32525: PUSH
32526: LD_INT 4
32528: PUSH
32529: LD_INT 5
32531: PUSH
32532: EMPTY
32533: LIST
32534: LIST
32535: ST_TO_ADDR
32536: GO 33233
32538: LD_INT 6
32540: DOUBLE
32541: EQUAL
32542: IFTRUE 32546
32544: GO 32564
32546: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
32547: LD_ADDR_VAR 0 3
32551: PUSH
32552: LD_INT 4
32554: PUSH
32555: LD_INT 5
32557: PUSH
32558: EMPTY
32559: LIST
32560: LIST
32561: ST_TO_ADDR
32562: GO 33233
32564: LD_INT 10
32566: DOUBLE
32567: EQUAL
32568: IFTRUE 32572
32570: GO 32590
32572: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
32573: LD_ADDR_VAR 0 3
32577: PUSH
32578: LD_INT 4
32580: PUSH
32581: LD_INT 5
32583: PUSH
32584: EMPTY
32585: LIST
32586: LIST
32587: ST_TO_ADDR
32588: GO 33233
32590: LD_INT 22
32592: DOUBLE
32593: EQUAL
32594: IFTRUE 32598
32596: GO 32624
32598: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
32599: LD_ADDR_VAR 0 3
32603: PUSH
32604: LD_INT 11
32606: PUSH
32607: LD_INT 12
32609: PUSH
32610: LD_INT 13
32612: PUSH
32613: LD_INT 14
32615: PUSH
32616: EMPTY
32617: LIST
32618: LIST
32619: LIST
32620: LIST
32621: ST_TO_ADDR
32622: GO 33233
32624: LD_INT 23
32626: DOUBLE
32627: EQUAL
32628: IFTRUE 32632
32630: GO 32658
32632: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
32633: LD_ADDR_VAR 0 3
32637: PUSH
32638: LD_INT 11
32640: PUSH
32641: LD_INT 12
32643: PUSH
32644: LD_INT 13
32646: PUSH
32647: LD_INT 14
32649: PUSH
32650: EMPTY
32651: LIST
32652: LIST
32653: LIST
32654: LIST
32655: ST_TO_ADDR
32656: GO 33233
32658: LD_INT 24
32660: DOUBLE
32661: EQUAL
32662: IFTRUE 32666
32664: GO 32692
32666: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
32667: LD_ADDR_VAR 0 3
32671: PUSH
32672: LD_INT 11
32674: PUSH
32675: LD_INT 12
32677: PUSH
32678: LD_INT 13
32680: PUSH
32681: LD_INT 14
32683: PUSH
32684: EMPTY
32685: LIST
32686: LIST
32687: LIST
32688: LIST
32689: ST_TO_ADDR
32690: GO 33233
32692: LD_INT 30
32694: DOUBLE
32695: EQUAL
32696: IFTRUE 32700
32698: GO 32726
32700: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
32701: LD_ADDR_VAR 0 3
32705: PUSH
32706: LD_INT 11
32708: PUSH
32709: LD_INT 12
32711: PUSH
32712: LD_INT 13
32714: PUSH
32715: LD_INT 14
32717: PUSH
32718: EMPTY
32719: LIST
32720: LIST
32721: LIST
32722: LIST
32723: ST_TO_ADDR
32724: GO 33233
32726: LD_INT 25
32728: DOUBLE
32729: EQUAL
32730: IFTRUE 32734
32732: GO 32752
32734: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
32735: LD_ADDR_VAR 0 3
32739: PUSH
32740: LD_INT 13
32742: PUSH
32743: LD_INT 14
32745: PUSH
32746: EMPTY
32747: LIST
32748: LIST
32749: ST_TO_ADDR
32750: GO 33233
32752: LD_INT 27
32754: DOUBLE
32755: EQUAL
32756: IFTRUE 32760
32758: GO 32778
32760: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
32761: LD_ADDR_VAR 0 3
32765: PUSH
32766: LD_INT 13
32768: PUSH
32769: LD_INT 14
32771: PUSH
32772: EMPTY
32773: LIST
32774: LIST
32775: ST_TO_ADDR
32776: GO 33233
32778: LD_INT 92
32780: DOUBLE
32781: EQUAL
32782: IFTRUE 32786
32784: GO 32812
32786: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
32787: LD_ADDR_VAR 0 3
32791: PUSH
32792: LD_INT 11
32794: PUSH
32795: LD_INT 12
32797: PUSH
32798: LD_INT 13
32800: PUSH
32801: LD_INT 14
32803: PUSH
32804: EMPTY
32805: LIST
32806: LIST
32807: LIST
32808: LIST
32809: ST_TO_ADDR
32810: GO 33233
32812: LD_INT 28
32814: DOUBLE
32815: EQUAL
32816: IFTRUE 32820
32818: GO 32838
32820: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
32821: LD_ADDR_VAR 0 3
32825: PUSH
32826: LD_INT 13
32828: PUSH
32829: LD_INT 14
32831: PUSH
32832: EMPTY
32833: LIST
32834: LIST
32835: ST_TO_ADDR
32836: GO 33233
32838: LD_INT 29
32840: DOUBLE
32841: EQUAL
32842: IFTRUE 32846
32844: GO 32864
32846: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
32847: LD_ADDR_VAR 0 3
32851: PUSH
32852: LD_INT 13
32854: PUSH
32855: LD_INT 14
32857: PUSH
32858: EMPTY
32859: LIST
32860: LIST
32861: ST_TO_ADDR
32862: GO 33233
32864: LD_INT 31
32866: DOUBLE
32867: EQUAL
32868: IFTRUE 32872
32870: GO 32890
32872: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
32873: LD_ADDR_VAR 0 3
32877: PUSH
32878: LD_INT 13
32880: PUSH
32881: LD_INT 14
32883: PUSH
32884: EMPTY
32885: LIST
32886: LIST
32887: ST_TO_ADDR
32888: GO 33233
32890: LD_INT 26
32892: DOUBLE
32893: EQUAL
32894: IFTRUE 32898
32896: GO 32916
32898: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
32899: LD_ADDR_VAR 0 3
32903: PUSH
32904: LD_INT 13
32906: PUSH
32907: LD_INT 14
32909: PUSH
32910: EMPTY
32911: LIST
32912: LIST
32913: ST_TO_ADDR
32914: GO 33233
32916: LD_INT 42
32918: DOUBLE
32919: EQUAL
32920: IFTRUE 32924
32922: GO 32950
32924: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
32925: LD_ADDR_VAR 0 3
32929: PUSH
32930: LD_INT 21
32932: PUSH
32933: LD_INT 22
32935: PUSH
32936: LD_INT 23
32938: PUSH
32939: LD_INT 24
32941: PUSH
32942: EMPTY
32943: LIST
32944: LIST
32945: LIST
32946: LIST
32947: ST_TO_ADDR
32948: GO 33233
32950: LD_INT 43
32952: DOUBLE
32953: EQUAL
32954: IFTRUE 32958
32956: GO 32984
32958: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
32959: LD_ADDR_VAR 0 3
32963: PUSH
32964: LD_INT 21
32966: PUSH
32967: LD_INT 22
32969: PUSH
32970: LD_INT 23
32972: PUSH
32973: LD_INT 24
32975: PUSH
32976: EMPTY
32977: LIST
32978: LIST
32979: LIST
32980: LIST
32981: ST_TO_ADDR
32982: GO 33233
32984: LD_INT 44
32986: DOUBLE
32987: EQUAL
32988: IFTRUE 32992
32990: GO 33018
32992: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
32993: LD_ADDR_VAR 0 3
32997: PUSH
32998: LD_INT 21
33000: PUSH
33001: LD_INT 22
33003: PUSH
33004: LD_INT 23
33006: PUSH
33007: LD_INT 24
33009: PUSH
33010: EMPTY
33011: LIST
33012: LIST
33013: LIST
33014: LIST
33015: ST_TO_ADDR
33016: GO 33233
33018: LD_INT 45
33020: DOUBLE
33021: EQUAL
33022: IFTRUE 33026
33024: GO 33052
33026: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
33027: LD_ADDR_VAR 0 3
33031: PUSH
33032: LD_INT 21
33034: PUSH
33035: LD_INT 22
33037: PUSH
33038: LD_INT 23
33040: PUSH
33041: LD_INT 24
33043: PUSH
33044: EMPTY
33045: LIST
33046: LIST
33047: LIST
33048: LIST
33049: ST_TO_ADDR
33050: GO 33233
33052: LD_INT 49
33054: DOUBLE
33055: EQUAL
33056: IFTRUE 33060
33058: GO 33086
33060: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
33061: LD_ADDR_VAR 0 3
33065: PUSH
33066: LD_INT 21
33068: PUSH
33069: LD_INT 22
33071: PUSH
33072: LD_INT 23
33074: PUSH
33075: LD_INT 24
33077: PUSH
33078: EMPTY
33079: LIST
33080: LIST
33081: LIST
33082: LIST
33083: ST_TO_ADDR
33084: GO 33233
33086: LD_INT 51
33088: DOUBLE
33089: EQUAL
33090: IFTRUE 33094
33092: GO 33120
33094: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
33095: LD_ADDR_VAR 0 3
33099: PUSH
33100: LD_INT 21
33102: PUSH
33103: LD_INT 22
33105: PUSH
33106: LD_INT 23
33108: PUSH
33109: LD_INT 24
33111: PUSH
33112: EMPTY
33113: LIST
33114: LIST
33115: LIST
33116: LIST
33117: ST_TO_ADDR
33118: GO 33233
33120: LD_INT 52
33122: DOUBLE
33123: EQUAL
33124: IFTRUE 33128
33126: GO 33154
33128: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
33129: LD_ADDR_VAR 0 3
33133: PUSH
33134: LD_INT 21
33136: PUSH
33137: LD_INT 22
33139: PUSH
33140: LD_INT 23
33142: PUSH
33143: LD_INT 24
33145: PUSH
33146: EMPTY
33147: LIST
33148: LIST
33149: LIST
33150: LIST
33151: ST_TO_ADDR
33152: GO 33233
33154: LD_INT 53
33156: DOUBLE
33157: EQUAL
33158: IFTRUE 33162
33160: GO 33180
33162: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
33163: LD_ADDR_VAR 0 3
33167: PUSH
33168: LD_INT 23
33170: PUSH
33171: LD_INT 24
33173: PUSH
33174: EMPTY
33175: LIST
33176: LIST
33177: ST_TO_ADDR
33178: GO 33233
33180: LD_INT 46
33182: DOUBLE
33183: EQUAL
33184: IFTRUE 33188
33186: GO 33206
33188: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
33189: LD_ADDR_VAR 0 3
33193: PUSH
33194: LD_INT 23
33196: PUSH
33197: LD_INT 24
33199: PUSH
33200: EMPTY
33201: LIST
33202: LIST
33203: ST_TO_ADDR
33204: GO 33233
33206: LD_INT 47
33208: DOUBLE
33209: EQUAL
33210: IFTRUE 33214
33212: GO 33232
33214: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33215: LD_ADDR_VAR 0 3
33219: PUSH
33220: LD_INT 23
33222: PUSH
33223: LD_INT 24
33225: PUSH
33226: EMPTY
33227: LIST
33228: LIST
33229: ST_TO_ADDR
33230: GO 33233
33232: POP
// result := ( chassis in result ) ;
33233: LD_ADDR_VAR 0 3
33237: PUSH
33238: LD_VAR 0 1
33242: PUSH
33243: LD_VAR 0 3
33247: IN
33248: ST_TO_ADDR
// end ;
33249: LD_VAR 0 3
33253: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
33254: LD_INT 0
33256: PPUSH
33257: PPUSH
33258: PPUSH
33259: PPUSH
33260: PPUSH
33261: PPUSH
33262: PPUSH
// result := array ;
33263: LD_ADDR_VAR 0 5
33267: PUSH
33268: LD_VAR 0 1
33272: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
33273: LD_VAR 0 1
33277: NOT
33278: PUSH
33279: LD_VAR 0 2
33283: NOT
33284: OR
33285: PUSH
33286: LD_VAR 0 3
33290: NOT
33291: OR
33292: PUSH
33293: LD_VAR 0 2
33297: PUSH
33298: LD_VAR 0 1
33302: GREATER
33303: OR
33304: PUSH
33305: LD_VAR 0 3
33309: PUSH
33310: LD_VAR 0 1
33314: GREATER
33315: OR
33316: IFFALSE 33320
// exit ;
33318: GO 33616
// if direction then
33320: LD_VAR 0 4
33324: IFFALSE 33388
// begin d := 1 ;
33326: LD_ADDR_VAR 0 9
33330: PUSH
33331: LD_INT 1
33333: ST_TO_ADDR
// if i_from > i_to then
33334: LD_VAR 0 2
33338: PUSH
33339: LD_VAR 0 3
33343: GREATER
33344: IFFALSE 33370
// length := ( array - i_from ) + i_to else
33346: LD_ADDR_VAR 0 11
33350: PUSH
33351: LD_VAR 0 1
33355: PUSH
33356: LD_VAR 0 2
33360: MINUS
33361: PUSH
33362: LD_VAR 0 3
33366: PLUS
33367: ST_TO_ADDR
33368: GO 33386
// length := i_to - i_from ;
33370: LD_ADDR_VAR 0 11
33374: PUSH
33375: LD_VAR 0 3
33379: PUSH
33380: LD_VAR 0 2
33384: MINUS
33385: ST_TO_ADDR
// end else
33386: GO 33449
// begin d := - 1 ;
33388: LD_ADDR_VAR 0 9
33392: PUSH
33393: LD_INT 1
33395: NEG
33396: ST_TO_ADDR
// if i_from > i_to then
33397: LD_VAR 0 2
33401: PUSH
33402: LD_VAR 0 3
33406: GREATER
33407: IFFALSE 33427
// length := i_from - i_to else
33409: LD_ADDR_VAR 0 11
33413: PUSH
33414: LD_VAR 0 2
33418: PUSH
33419: LD_VAR 0 3
33423: MINUS
33424: ST_TO_ADDR
33425: GO 33449
// length := ( array - i_to ) + i_from ;
33427: LD_ADDR_VAR 0 11
33431: PUSH
33432: LD_VAR 0 1
33436: PUSH
33437: LD_VAR 0 3
33441: MINUS
33442: PUSH
33443: LD_VAR 0 2
33447: PLUS
33448: ST_TO_ADDR
// end ; if not length then
33449: LD_VAR 0 11
33453: NOT
33454: IFFALSE 33458
// exit ;
33456: GO 33616
// tmp := array ;
33458: LD_ADDR_VAR 0 10
33462: PUSH
33463: LD_VAR 0 1
33467: ST_TO_ADDR
// for i = 1 to length do
33468: LD_ADDR_VAR 0 6
33472: PUSH
33473: DOUBLE
33474: LD_INT 1
33476: DEC
33477: ST_TO_ADDR
33478: LD_VAR 0 11
33482: PUSH
33483: FOR_TO
33484: IFFALSE 33604
// begin for j = 1 to array do
33486: LD_ADDR_VAR 0 7
33490: PUSH
33491: DOUBLE
33492: LD_INT 1
33494: DEC
33495: ST_TO_ADDR
33496: LD_VAR 0 1
33500: PUSH
33501: FOR_TO
33502: IFFALSE 33590
// begin k := j + d ;
33504: LD_ADDR_VAR 0 8
33508: PUSH
33509: LD_VAR 0 7
33513: PUSH
33514: LD_VAR 0 9
33518: PLUS
33519: ST_TO_ADDR
// if k > array then
33520: LD_VAR 0 8
33524: PUSH
33525: LD_VAR 0 1
33529: GREATER
33530: IFFALSE 33540
// k := 1 ;
33532: LD_ADDR_VAR 0 8
33536: PUSH
33537: LD_INT 1
33539: ST_TO_ADDR
// if not k then
33540: LD_VAR 0 8
33544: NOT
33545: IFFALSE 33557
// k := array ;
33547: LD_ADDR_VAR 0 8
33551: PUSH
33552: LD_VAR 0 1
33556: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
33557: LD_ADDR_VAR 0 10
33561: PUSH
33562: LD_VAR 0 10
33566: PPUSH
33567: LD_VAR 0 8
33571: PPUSH
33572: LD_VAR 0 1
33576: PUSH
33577: LD_VAR 0 7
33581: ARRAY
33582: PPUSH
33583: CALL_OW 1
33587: ST_TO_ADDR
// end ;
33588: GO 33501
33590: POP
33591: POP
// array := tmp ;
33592: LD_ADDR_VAR 0 1
33596: PUSH
33597: LD_VAR 0 10
33601: ST_TO_ADDR
// end ;
33602: GO 33483
33604: POP
33605: POP
// result := array ;
33606: LD_ADDR_VAR 0 5
33610: PUSH
33611: LD_VAR 0 1
33615: ST_TO_ADDR
// end ;
33616: LD_VAR 0 5
33620: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
33621: LD_INT 0
33623: PPUSH
33624: PPUSH
// result := 0 ;
33625: LD_ADDR_VAR 0 3
33629: PUSH
33630: LD_INT 0
33632: ST_TO_ADDR
// if not array or not value in array then
33633: LD_VAR 0 1
33637: NOT
33638: PUSH
33639: LD_VAR 0 2
33643: PUSH
33644: LD_VAR 0 1
33648: IN
33649: NOT
33650: OR
33651: IFFALSE 33655
// exit ;
33653: GO 33709
// for i = 1 to array do
33655: LD_ADDR_VAR 0 4
33659: PUSH
33660: DOUBLE
33661: LD_INT 1
33663: DEC
33664: ST_TO_ADDR
33665: LD_VAR 0 1
33669: PUSH
33670: FOR_TO
33671: IFFALSE 33707
// if value = array [ i ] then
33673: LD_VAR 0 2
33677: PUSH
33678: LD_VAR 0 1
33682: PUSH
33683: LD_VAR 0 4
33687: ARRAY
33688: EQUAL
33689: IFFALSE 33705
// begin result := i ;
33691: LD_ADDR_VAR 0 3
33695: PUSH
33696: LD_VAR 0 4
33700: ST_TO_ADDR
// exit ;
33701: POP
33702: POP
33703: GO 33709
// end ;
33705: GO 33670
33707: POP
33708: POP
// end ;
33709: LD_VAR 0 3
33713: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
33714: LD_INT 0
33716: PPUSH
// vc_chassis := chassis ;
33717: LD_ADDR_OWVAR 37
33721: PUSH
33722: LD_VAR 0 1
33726: ST_TO_ADDR
// vc_engine := engine ;
33727: LD_ADDR_OWVAR 39
33731: PUSH
33732: LD_VAR 0 2
33736: ST_TO_ADDR
// vc_control := control ;
33737: LD_ADDR_OWVAR 38
33741: PUSH
33742: LD_VAR 0 3
33746: ST_TO_ADDR
// vc_weapon := weapon ;
33747: LD_ADDR_OWVAR 40
33751: PUSH
33752: LD_VAR 0 4
33756: ST_TO_ADDR
// vc_fuel_battery := fuel ;
33757: LD_ADDR_OWVAR 41
33761: PUSH
33762: LD_VAR 0 5
33766: ST_TO_ADDR
// end ;
33767: LD_VAR 0 6
33771: RET
// export function WantPlant ( unit ) ; var task ; begin
33772: LD_INT 0
33774: PPUSH
33775: PPUSH
// result := false ;
33776: LD_ADDR_VAR 0 2
33780: PUSH
33781: LD_INT 0
33783: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
33784: LD_ADDR_VAR 0 3
33788: PUSH
33789: LD_VAR 0 1
33793: PPUSH
33794: CALL_OW 437
33798: ST_TO_ADDR
// if task then
33799: LD_VAR 0 3
33803: IFFALSE 33831
// if task [ 1 ] [ 1 ] = p then
33805: LD_VAR 0 3
33809: PUSH
33810: LD_INT 1
33812: ARRAY
33813: PUSH
33814: LD_INT 1
33816: ARRAY
33817: PUSH
33818: LD_STRING p
33820: EQUAL
33821: IFFALSE 33831
// result := true ;
33823: LD_ADDR_VAR 0 2
33827: PUSH
33828: LD_INT 1
33830: ST_TO_ADDR
// end ;
33831: LD_VAR 0 2
33835: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
33836: LD_INT 0
33838: PPUSH
33839: PPUSH
33840: PPUSH
33841: PPUSH
// if pos < 1 then
33842: LD_VAR 0 2
33846: PUSH
33847: LD_INT 1
33849: LESS
33850: IFFALSE 33854
// exit ;
33852: GO 34157
// if pos = 1 then
33854: LD_VAR 0 2
33858: PUSH
33859: LD_INT 1
33861: EQUAL
33862: IFFALSE 33895
// result := Replace ( arr , pos [ 1 ] , value ) else
33864: LD_ADDR_VAR 0 4
33868: PUSH
33869: LD_VAR 0 1
33873: PPUSH
33874: LD_VAR 0 2
33878: PUSH
33879: LD_INT 1
33881: ARRAY
33882: PPUSH
33883: LD_VAR 0 3
33887: PPUSH
33888: CALL_OW 1
33892: ST_TO_ADDR
33893: GO 34157
// begin tmp := arr ;
33895: LD_ADDR_VAR 0 6
33899: PUSH
33900: LD_VAR 0 1
33904: ST_TO_ADDR
// s_arr := [ tmp ] ;
33905: LD_ADDR_VAR 0 7
33909: PUSH
33910: LD_VAR 0 6
33914: PUSH
33915: EMPTY
33916: LIST
33917: ST_TO_ADDR
// for i = 1 to pos - 1 do
33918: LD_ADDR_VAR 0 5
33922: PUSH
33923: DOUBLE
33924: LD_INT 1
33926: DEC
33927: ST_TO_ADDR
33928: LD_VAR 0 2
33932: PUSH
33933: LD_INT 1
33935: MINUS
33936: PUSH
33937: FOR_TO
33938: IFFALSE 33983
// begin tmp := tmp [ pos [ i ] ] ;
33940: LD_ADDR_VAR 0 6
33944: PUSH
33945: LD_VAR 0 6
33949: PUSH
33950: LD_VAR 0 2
33954: PUSH
33955: LD_VAR 0 5
33959: ARRAY
33960: ARRAY
33961: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
33962: LD_ADDR_VAR 0 7
33966: PUSH
33967: LD_VAR 0 7
33971: PUSH
33972: LD_VAR 0 6
33976: PUSH
33977: EMPTY
33978: LIST
33979: ADD
33980: ST_TO_ADDR
// end ;
33981: GO 33937
33983: POP
33984: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
33985: LD_ADDR_VAR 0 6
33989: PUSH
33990: LD_VAR 0 6
33994: PPUSH
33995: LD_VAR 0 2
33999: PUSH
34000: LD_VAR 0 2
34004: ARRAY
34005: PPUSH
34006: LD_VAR 0 3
34010: PPUSH
34011: CALL_OW 1
34015: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
34016: LD_ADDR_VAR 0 7
34020: PUSH
34021: LD_VAR 0 7
34025: PPUSH
34026: LD_VAR 0 7
34030: PPUSH
34031: LD_VAR 0 6
34035: PPUSH
34036: CALL_OW 1
34040: ST_TO_ADDR
// for i = s_arr downto 2 do
34041: LD_ADDR_VAR 0 5
34045: PUSH
34046: DOUBLE
34047: LD_VAR 0 7
34051: INC
34052: ST_TO_ADDR
34053: LD_INT 2
34055: PUSH
34056: FOR_DOWNTO
34057: IFFALSE 34141
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
34059: LD_ADDR_VAR 0 6
34063: PUSH
34064: LD_VAR 0 7
34068: PUSH
34069: LD_VAR 0 5
34073: PUSH
34074: LD_INT 1
34076: MINUS
34077: ARRAY
34078: PPUSH
34079: LD_VAR 0 2
34083: PUSH
34084: LD_VAR 0 5
34088: PUSH
34089: LD_INT 1
34091: MINUS
34092: ARRAY
34093: PPUSH
34094: LD_VAR 0 7
34098: PUSH
34099: LD_VAR 0 5
34103: ARRAY
34104: PPUSH
34105: CALL_OW 1
34109: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
34110: LD_ADDR_VAR 0 7
34114: PUSH
34115: LD_VAR 0 7
34119: PPUSH
34120: LD_VAR 0 5
34124: PUSH
34125: LD_INT 1
34127: MINUS
34128: PPUSH
34129: LD_VAR 0 6
34133: PPUSH
34134: CALL_OW 1
34138: ST_TO_ADDR
// end ;
34139: GO 34056
34141: POP
34142: POP
// result := s_arr [ 1 ] ;
34143: LD_ADDR_VAR 0 4
34147: PUSH
34148: LD_VAR 0 7
34152: PUSH
34153: LD_INT 1
34155: ARRAY
34156: ST_TO_ADDR
// end ; end ;
34157: LD_VAR 0 4
34161: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
34162: LD_INT 0
34164: PPUSH
34165: PPUSH
// if not list then
34166: LD_VAR 0 1
34170: NOT
34171: IFFALSE 34175
// exit ;
34173: GO 34266
// i := list [ pos1 ] ;
34175: LD_ADDR_VAR 0 5
34179: PUSH
34180: LD_VAR 0 1
34184: PUSH
34185: LD_VAR 0 2
34189: ARRAY
34190: ST_TO_ADDR
// if not i then
34191: LD_VAR 0 5
34195: NOT
34196: IFFALSE 34200
// exit ;
34198: GO 34266
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
34200: LD_ADDR_VAR 0 1
34204: PUSH
34205: LD_VAR 0 1
34209: PPUSH
34210: LD_VAR 0 2
34214: PPUSH
34215: LD_VAR 0 1
34219: PUSH
34220: LD_VAR 0 3
34224: ARRAY
34225: PPUSH
34226: CALL_OW 1
34230: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
34231: LD_ADDR_VAR 0 1
34235: PUSH
34236: LD_VAR 0 1
34240: PPUSH
34241: LD_VAR 0 3
34245: PPUSH
34246: LD_VAR 0 5
34250: PPUSH
34251: CALL_OW 1
34255: ST_TO_ADDR
// result := list ;
34256: LD_ADDR_VAR 0 4
34260: PUSH
34261: LD_VAR 0 1
34265: ST_TO_ADDR
// end ;
34266: LD_VAR 0 4
34270: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
34271: LD_INT 0
34273: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
34274: LD_ADDR_VAR 0 5
34278: PUSH
34279: LD_VAR 0 1
34283: PPUSH
34284: CALL_OW 250
34288: PPUSH
34289: LD_VAR 0 1
34293: PPUSH
34294: CALL_OW 251
34298: PPUSH
34299: LD_VAR 0 2
34303: PPUSH
34304: LD_VAR 0 3
34308: PPUSH
34309: LD_VAR 0 4
34313: PPUSH
34314: CALL 34324 0 5
34318: ST_TO_ADDR
// end ;
34319: LD_VAR 0 5
34323: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
34324: LD_INT 0
34326: PPUSH
34327: PPUSH
34328: PPUSH
34329: PPUSH
// if not list then
34330: LD_VAR 0 3
34334: NOT
34335: IFFALSE 34339
// exit ;
34337: GO 34727
// result := [ ] ;
34339: LD_ADDR_VAR 0 6
34343: PUSH
34344: EMPTY
34345: ST_TO_ADDR
// for i in list do
34346: LD_ADDR_VAR 0 7
34350: PUSH
34351: LD_VAR 0 3
34355: PUSH
34356: FOR_IN
34357: IFFALSE 34559
// begin tmp := GetDistUnitXY ( i , x , y ) ;
34359: LD_ADDR_VAR 0 9
34363: PUSH
34364: LD_VAR 0 7
34368: PPUSH
34369: LD_VAR 0 1
34373: PPUSH
34374: LD_VAR 0 2
34378: PPUSH
34379: CALL_OW 297
34383: ST_TO_ADDR
// if not result then
34384: LD_VAR 0 6
34388: NOT
34389: IFFALSE 34415
// result := [ [ i , tmp ] ] else
34391: LD_ADDR_VAR 0 6
34395: PUSH
34396: LD_VAR 0 7
34400: PUSH
34401: LD_VAR 0 9
34405: PUSH
34406: EMPTY
34407: LIST
34408: LIST
34409: PUSH
34410: EMPTY
34411: LIST
34412: ST_TO_ADDR
34413: GO 34557
// begin if result [ result ] [ 2 ] < tmp then
34415: LD_VAR 0 6
34419: PUSH
34420: LD_VAR 0 6
34424: ARRAY
34425: PUSH
34426: LD_INT 2
34428: ARRAY
34429: PUSH
34430: LD_VAR 0 9
34434: LESS
34435: IFFALSE 34477
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
34437: LD_ADDR_VAR 0 6
34441: PUSH
34442: LD_VAR 0 6
34446: PPUSH
34447: LD_VAR 0 6
34451: PUSH
34452: LD_INT 1
34454: PLUS
34455: PPUSH
34456: LD_VAR 0 7
34460: PUSH
34461: LD_VAR 0 9
34465: PUSH
34466: EMPTY
34467: LIST
34468: LIST
34469: PPUSH
34470: CALL_OW 2
34474: ST_TO_ADDR
34475: GO 34557
// for j = 1 to result do
34477: LD_ADDR_VAR 0 8
34481: PUSH
34482: DOUBLE
34483: LD_INT 1
34485: DEC
34486: ST_TO_ADDR
34487: LD_VAR 0 6
34491: PUSH
34492: FOR_TO
34493: IFFALSE 34555
// begin if tmp < result [ j ] [ 2 ] then
34495: LD_VAR 0 9
34499: PUSH
34500: LD_VAR 0 6
34504: PUSH
34505: LD_VAR 0 8
34509: ARRAY
34510: PUSH
34511: LD_INT 2
34513: ARRAY
34514: LESS
34515: IFFALSE 34553
// begin result := Insert ( result , j , [ i , tmp ] ) ;
34517: LD_ADDR_VAR 0 6
34521: PUSH
34522: LD_VAR 0 6
34526: PPUSH
34527: LD_VAR 0 8
34531: PPUSH
34532: LD_VAR 0 7
34536: PUSH
34537: LD_VAR 0 9
34541: PUSH
34542: EMPTY
34543: LIST
34544: LIST
34545: PPUSH
34546: CALL_OW 2
34550: ST_TO_ADDR
// break ;
34551: GO 34555
// end ; end ;
34553: GO 34492
34555: POP
34556: POP
// end ; end ;
34557: GO 34356
34559: POP
34560: POP
// if result and not asc then
34561: LD_VAR 0 6
34565: PUSH
34566: LD_VAR 0 4
34570: NOT
34571: AND
34572: IFFALSE 34647
// begin tmp := result ;
34574: LD_ADDR_VAR 0 9
34578: PUSH
34579: LD_VAR 0 6
34583: ST_TO_ADDR
// for i = tmp downto 1 do
34584: LD_ADDR_VAR 0 7
34588: PUSH
34589: DOUBLE
34590: LD_VAR 0 9
34594: INC
34595: ST_TO_ADDR
34596: LD_INT 1
34598: PUSH
34599: FOR_DOWNTO
34600: IFFALSE 34645
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
34602: LD_ADDR_VAR 0 6
34606: PUSH
34607: LD_VAR 0 6
34611: PPUSH
34612: LD_VAR 0 9
34616: PUSH
34617: LD_VAR 0 7
34621: MINUS
34622: PUSH
34623: LD_INT 1
34625: PLUS
34626: PPUSH
34627: LD_VAR 0 9
34631: PUSH
34632: LD_VAR 0 7
34636: ARRAY
34637: PPUSH
34638: CALL_OW 1
34642: ST_TO_ADDR
34643: GO 34599
34645: POP
34646: POP
// end ; tmp := [ ] ;
34647: LD_ADDR_VAR 0 9
34651: PUSH
34652: EMPTY
34653: ST_TO_ADDR
// if mode then
34654: LD_VAR 0 5
34658: IFFALSE 34727
// begin for i = 1 to result do
34660: LD_ADDR_VAR 0 7
34664: PUSH
34665: DOUBLE
34666: LD_INT 1
34668: DEC
34669: ST_TO_ADDR
34670: LD_VAR 0 6
34674: PUSH
34675: FOR_TO
34676: IFFALSE 34715
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
34678: LD_ADDR_VAR 0 9
34682: PUSH
34683: LD_VAR 0 9
34687: PPUSH
34688: LD_VAR 0 7
34692: PPUSH
34693: LD_VAR 0 6
34697: PUSH
34698: LD_VAR 0 7
34702: ARRAY
34703: PUSH
34704: LD_INT 1
34706: ARRAY
34707: PPUSH
34708: CALL_OW 1
34712: ST_TO_ADDR
34713: GO 34675
34715: POP
34716: POP
// result := tmp ;
34717: LD_ADDR_VAR 0 6
34721: PUSH
34722: LD_VAR 0 9
34726: ST_TO_ADDR
// end ; end ;
34727: LD_VAR 0 6
34731: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
34732: LD_INT 0
34734: PPUSH
34735: PPUSH
34736: PPUSH
34737: PPUSH
34738: PPUSH
34739: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
34740: LD_ADDR_VAR 0 5
34744: PUSH
34745: LD_INT 0
34747: PUSH
34748: LD_INT 0
34750: PUSH
34751: LD_INT 0
34753: PUSH
34754: EMPTY
34755: PUSH
34756: EMPTY
34757: LIST
34758: LIST
34759: LIST
34760: LIST
34761: ST_TO_ADDR
// if not x or not y then
34762: LD_VAR 0 2
34766: NOT
34767: PUSH
34768: LD_VAR 0 3
34772: NOT
34773: OR
34774: IFFALSE 34778
// exit ;
34776: GO 36428
// if not range then
34778: LD_VAR 0 4
34782: NOT
34783: IFFALSE 34793
// range := 10 ;
34785: LD_ADDR_VAR 0 4
34789: PUSH
34790: LD_INT 10
34792: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34793: LD_ADDR_VAR 0 8
34797: PUSH
34798: LD_INT 81
34800: PUSH
34801: LD_VAR 0 1
34805: PUSH
34806: EMPTY
34807: LIST
34808: LIST
34809: PUSH
34810: LD_INT 92
34812: PUSH
34813: LD_VAR 0 2
34817: PUSH
34818: LD_VAR 0 3
34822: PUSH
34823: LD_VAR 0 4
34827: PUSH
34828: EMPTY
34829: LIST
34830: LIST
34831: LIST
34832: LIST
34833: PUSH
34834: LD_INT 3
34836: PUSH
34837: LD_INT 21
34839: PUSH
34840: LD_INT 3
34842: PUSH
34843: EMPTY
34844: LIST
34845: LIST
34846: PUSH
34847: EMPTY
34848: LIST
34849: LIST
34850: PUSH
34851: EMPTY
34852: LIST
34853: LIST
34854: LIST
34855: PPUSH
34856: CALL_OW 69
34860: ST_TO_ADDR
// if not tmp then
34861: LD_VAR 0 8
34865: NOT
34866: IFFALSE 34870
// exit ;
34868: GO 36428
// for i in tmp do
34870: LD_ADDR_VAR 0 6
34874: PUSH
34875: LD_VAR 0 8
34879: PUSH
34880: FOR_IN
34881: IFFALSE 36403
// begin points := [ 0 , 0 , 0 ] ;
34883: LD_ADDR_VAR 0 9
34887: PUSH
34888: LD_INT 0
34890: PUSH
34891: LD_INT 0
34893: PUSH
34894: LD_INT 0
34896: PUSH
34897: EMPTY
34898: LIST
34899: LIST
34900: LIST
34901: ST_TO_ADDR
// bpoints := 1 ;
34902: LD_ADDR_VAR 0 10
34906: PUSH
34907: LD_INT 1
34909: ST_TO_ADDR
// case GetType ( i ) of unit_human :
34910: LD_VAR 0 6
34914: PPUSH
34915: CALL_OW 247
34919: PUSH
34920: LD_INT 1
34922: DOUBLE
34923: EQUAL
34924: IFTRUE 34928
34926: GO 35506
34928: POP
// begin if GetClass ( i ) = 1 then
34929: LD_VAR 0 6
34933: PPUSH
34934: CALL_OW 257
34938: PUSH
34939: LD_INT 1
34941: EQUAL
34942: IFFALSE 34963
// points := [ 10 , 5 , 3 ] ;
34944: LD_ADDR_VAR 0 9
34948: PUSH
34949: LD_INT 10
34951: PUSH
34952: LD_INT 5
34954: PUSH
34955: LD_INT 3
34957: PUSH
34958: EMPTY
34959: LIST
34960: LIST
34961: LIST
34962: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
34963: LD_VAR 0 6
34967: PPUSH
34968: CALL_OW 257
34972: PUSH
34973: LD_INT 2
34975: PUSH
34976: LD_INT 3
34978: PUSH
34979: LD_INT 4
34981: PUSH
34982: EMPTY
34983: LIST
34984: LIST
34985: LIST
34986: IN
34987: IFFALSE 35008
// points := [ 3 , 2 , 1 ] ;
34989: LD_ADDR_VAR 0 9
34993: PUSH
34994: LD_INT 3
34996: PUSH
34997: LD_INT 2
34999: PUSH
35000: LD_INT 1
35002: PUSH
35003: EMPTY
35004: LIST
35005: LIST
35006: LIST
35007: ST_TO_ADDR
// if GetClass ( i ) = 5 then
35008: LD_VAR 0 6
35012: PPUSH
35013: CALL_OW 257
35017: PUSH
35018: LD_INT 5
35020: EQUAL
35021: IFFALSE 35042
// points := [ 130 , 5 , 2 ] ;
35023: LD_ADDR_VAR 0 9
35027: PUSH
35028: LD_INT 130
35030: PUSH
35031: LD_INT 5
35033: PUSH
35034: LD_INT 2
35036: PUSH
35037: EMPTY
35038: LIST
35039: LIST
35040: LIST
35041: ST_TO_ADDR
// if GetClass ( i ) = 8 then
35042: LD_VAR 0 6
35046: PPUSH
35047: CALL_OW 257
35051: PUSH
35052: LD_INT 8
35054: EQUAL
35055: IFFALSE 35076
// points := [ 35 , 35 , 30 ] ;
35057: LD_ADDR_VAR 0 9
35061: PUSH
35062: LD_INT 35
35064: PUSH
35065: LD_INT 35
35067: PUSH
35068: LD_INT 30
35070: PUSH
35071: EMPTY
35072: LIST
35073: LIST
35074: LIST
35075: ST_TO_ADDR
// if GetClass ( i ) = 9 then
35076: LD_VAR 0 6
35080: PPUSH
35081: CALL_OW 257
35085: PUSH
35086: LD_INT 9
35088: EQUAL
35089: IFFALSE 35110
// points := [ 20 , 55 , 40 ] ;
35091: LD_ADDR_VAR 0 9
35095: PUSH
35096: LD_INT 20
35098: PUSH
35099: LD_INT 55
35101: PUSH
35102: LD_INT 40
35104: PUSH
35105: EMPTY
35106: LIST
35107: LIST
35108: LIST
35109: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
35110: LD_VAR 0 6
35114: PPUSH
35115: CALL_OW 257
35119: PUSH
35120: LD_INT 12
35122: PUSH
35123: LD_INT 16
35125: PUSH
35126: EMPTY
35127: LIST
35128: LIST
35129: IN
35130: IFFALSE 35151
// points := [ 5 , 3 , 2 ] ;
35132: LD_ADDR_VAR 0 9
35136: PUSH
35137: LD_INT 5
35139: PUSH
35140: LD_INT 3
35142: PUSH
35143: LD_INT 2
35145: PUSH
35146: EMPTY
35147: LIST
35148: LIST
35149: LIST
35150: ST_TO_ADDR
// if GetClass ( i ) = 17 then
35151: LD_VAR 0 6
35155: PPUSH
35156: CALL_OW 257
35160: PUSH
35161: LD_INT 17
35163: EQUAL
35164: IFFALSE 35185
// points := [ 100 , 50 , 75 ] ;
35166: LD_ADDR_VAR 0 9
35170: PUSH
35171: LD_INT 100
35173: PUSH
35174: LD_INT 50
35176: PUSH
35177: LD_INT 75
35179: PUSH
35180: EMPTY
35181: LIST
35182: LIST
35183: LIST
35184: ST_TO_ADDR
// if GetClass ( i ) = 15 then
35185: LD_VAR 0 6
35189: PPUSH
35190: CALL_OW 257
35194: PUSH
35195: LD_INT 15
35197: EQUAL
35198: IFFALSE 35219
// points := [ 10 , 5 , 3 ] ;
35200: LD_ADDR_VAR 0 9
35204: PUSH
35205: LD_INT 10
35207: PUSH
35208: LD_INT 5
35210: PUSH
35211: LD_INT 3
35213: PUSH
35214: EMPTY
35215: LIST
35216: LIST
35217: LIST
35218: ST_TO_ADDR
// if GetClass ( i ) = 14 then
35219: LD_VAR 0 6
35223: PPUSH
35224: CALL_OW 257
35228: PUSH
35229: LD_INT 14
35231: EQUAL
35232: IFFALSE 35253
// points := [ 10 , 0 , 0 ] ;
35234: LD_ADDR_VAR 0 9
35238: PUSH
35239: LD_INT 10
35241: PUSH
35242: LD_INT 0
35244: PUSH
35245: LD_INT 0
35247: PUSH
35248: EMPTY
35249: LIST
35250: LIST
35251: LIST
35252: ST_TO_ADDR
// if GetClass ( i ) = 11 then
35253: LD_VAR 0 6
35257: PPUSH
35258: CALL_OW 257
35262: PUSH
35263: LD_INT 11
35265: EQUAL
35266: IFFALSE 35287
// points := [ 30 , 10 , 5 ] ;
35268: LD_ADDR_VAR 0 9
35272: PUSH
35273: LD_INT 30
35275: PUSH
35276: LD_INT 10
35278: PUSH
35279: LD_INT 5
35281: PUSH
35282: EMPTY
35283: LIST
35284: LIST
35285: LIST
35286: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
35287: LD_VAR 0 1
35291: PPUSH
35292: LD_INT 5
35294: PPUSH
35295: CALL_OW 321
35299: PUSH
35300: LD_INT 2
35302: EQUAL
35303: IFFALSE 35320
// bpoints := bpoints * 1.8 ;
35305: LD_ADDR_VAR 0 10
35309: PUSH
35310: LD_VAR 0 10
35314: PUSH
35315: LD_REAL  1.80000000000000E+0000
35318: MUL
35319: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
35320: LD_VAR 0 6
35324: PPUSH
35325: CALL_OW 257
35329: PUSH
35330: LD_INT 1
35332: PUSH
35333: LD_INT 2
35335: PUSH
35336: LD_INT 3
35338: PUSH
35339: LD_INT 4
35341: PUSH
35342: EMPTY
35343: LIST
35344: LIST
35345: LIST
35346: LIST
35347: IN
35348: PUSH
35349: LD_VAR 0 1
35353: PPUSH
35354: LD_INT 51
35356: PPUSH
35357: CALL_OW 321
35361: PUSH
35362: LD_INT 2
35364: EQUAL
35365: AND
35366: IFFALSE 35383
// bpoints := bpoints * 1.2 ;
35368: LD_ADDR_VAR 0 10
35372: PUSH
35373: LD_VAR 0 10
35377: PUSH
35378: LD_REAL  1.20000000000000E+0000
35381: MUL
35382: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
35383: LD_VAR 0 6
35387: PPUSH
35388: CALL_OW 257
35392: PUSH
35393: LD_INT 5
35395: PUSH
35396: LD_INT 7
35398: PUSH
35399: LD_INT 9
35401: PUSH
35402: EMPTY
35403: LIST
35404: LIST
35405: LIST
35406: IN
35407: PUSH
35408: LD_VAR 0 1
35412: PPUSH
35413: LD_INT 52
35415: PPUSH
35416: CALL_OW 321
35420: PUSH
35421: LD_INT 2
35423: EQUAL
35424: AND
35425: IFFALSE 35442
// bpoints := bpoints * 1.5 ;
35427: LD_ADDR_VAR 0 10
35431: PUSH
35432: LD_VAR 0 10
35436: PUSH
35437: LD_REAL  1.50000000000000E+0000
35440: MUL
35441: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
35442: LD_VAR 0 1
35446: PPUSH
35447: LD_INT 66
35449: PPUSH
35450: CALL_OW 321
35454: PUSH
35455: LD_INT 2
35457: EQUAL
35458: IFFALSE 35475
// bpoints := bpoints * 1.1 ;
35460: LD_ADDR_VAR 0 10
35464: PUSH
35465: LD_VAR 0 10
35469: PUSH
35470: LD_REAL  1.10000000000000E+0000
35473: MUL
35474: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
35475: LD_ADDR_VAR 0 10
35479: PUSH
35480: LD_VAR 0 10
35484: PUSH
35485: LD_VAR 0 6
35489: PPUSH
35490: LD_INT 1
35492: PPUSH
35493: CALL_OW 259
35497: PUSH
35498: LD_REAL  1.15000000000000E+0000
35501: MUL
35502: MUL
35503: ST_TO_ADDR
// end ; unit_vehicle :
35504: GO 36332
35506: LD_INT 2
35508: DOUBLE
35509: EQUAL
35510: IFTRUE 35514
35512: GO 36320
35514: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
35515: LD_VAR 0 6
35519: PPUSH
35520: CALL_OW 264
35524: PUSH
35525: LD_INT 2
35527: PUSH
35528: LD_INT 42
35530: PUSH
35531: LD_INT 24
35533: PUSH
35534: EMPTY
35535: LIST
35536: LIST
35537: LIST
35538: IN
35539: IFFALSE 35560
// points := [ 25 , 5 , 3 ] ;
35541: LD_ADDR_VAR 0 9
35545: PUSH
35546: LD_INT 25
35548: PUSH
35549: LD_INT 5
35551: PUSH
35552: LD_INT 3
35554: PUSH
35555: EMPTY
35556: LIST
35557: LIST
35558: LIST
35559: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
35560: LD_VAR 0 6
35564: PPUSH
35565: CALL_OW 264
35569: PUSH
35570: LD_INT 4
35572: PUSH
35573: LD_INT 43
35575: PUSH
35576: LD_INT 25
35578: PUSH
35579: EMPTY
35580: LIST
35581: LIST
35582: LIST
35583: IN
35584: IFFALSE 35605
// points := [ 40 , 15 , 5 ] ;
35586: LD_ADDR_VAR 0 9
35590: PUSH
35591: LD_INT 40
35593: PUSH
35594: LD_INT 15
35596: PUSH
35597: LD_INT 5
35599: PUSH
35600: EMPTY
35601: LIST
35602: LIST
35603: LIST
35604: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
35605: LD_VAR 0 6
35609: PPUSH
35610: CALL_OW 264
35614: PUSH
35615: LD_INT 3
35617: PUSH
35618: LD_INT 23
35620: PUSH
35621: EMPTY
35622: LIST
35623: LIST
35624: IN
35625: IFFALSE 35646
// points := [ 7 , 25 , 8 ] ;
35627: LD_ADDR_VAR 0 9
35631: PUSH
35632: LD_INT 7
35634: PUSH
35635: LD_INT 25
35637: PUSH
35638: LD_INT 8
35640: PUSH
35641: EMPTY
35642: LIST
35643: LIST
35644: LIST
35645: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
35646: LD_VAR 0 6
35650: PPUSH
35651: CALL_OW 264
35655: PUSH
35656: LD_INT 5
35658: PUSH
35659: LD_INT 27
35661: PUSH
35662: LD_INT 44
35664: PUSH
35665: EMPTY
35666: LIST
35667: LIST
35668: LIST
35669: IN
35670: IFFALSE 35691
// points := [ 14 , 50 , 16 ] ;
35672: LD_ADDR_VAR 0 9
35676: PUSH
35677: LD_INT 14
35679: PUSH
35680: LD_INT 50
35682: PUSH
35683: LD_INT 16
35685: PUSH
35686: EMPTY
35687: LIST
35688: LIST
35689: LIST
35690: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
35691: LD_VAR 0 6
35695: PPUSH
35696: CALL_OW 264
35700: PUSH
35701: LD_INT 6
35703: PUSH
35704: LD_INT 46
35706: PUSH
35707: EMPTY
35708: LIST
35709: LIST
35710: IN
35711: IFFALSE 35732
// points := [ 32 , 120 , 70 ] ;
35713: LD_ADDR_VAR 0 9
35717: PUSH
35718: LD_INT 32
35720: PUSH
35721: LD_INT 120
35723: PUSH
35724: LD_INT 70
35726: PUSH
35727: EMPTY
35728: LIST
35729: LIST
35730: LIST
35731: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
35732: LD_VAR 0 6
35736: PPUSH
35737: CALL_OW 264
35741: PUSH
35742: LD_INT 7
35744: PUSH
35745: LD_INT 28
35747: PUSH
35748: LD_INT 45
35750: PUSH
35751: LD_INT 92
35753: PUSH
35754: EMPTY
35755: LIST
35756: LIST
35757: LIST
35758: LIST
35759: IN
35760: IFFALSE 35781
// points := [ 35 , 20 , 45 ] ;
35762: LD_ADDR_VAR 0 9
35766: PUSH
35767: LD_INT 35
35769: PUSH
35770: LD_INT 20
35772: PUSH
35773: LD_INT 45
35775: PUSH
35776: EMPTY
35777: LIST
35778: LIST
35779: LIST
35780: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
35781: LD_VAR 0 6
35785: PPUSH
35786: CALL_OW 264
35790: PUSH
35791: LD_INT 47
35793: PUSH
35794: EMPTY
35795: LIST
35796: IN
35797: IFFALSE 35818
// points := [ 67 , 45 , 75 ] ;
35799: LD_ADDR_VAR 0 9
35803: PUSH
35804: LD_INT 67
35806: PUSH
35807: LD_INT 45
35809: PUSH
35810: LD_INT 75
35812: PUSH
35813: EMPTY
35814: LIST
35815: LIST
35816: LIST
35817: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
35818: LD_VAR 0 6
35822: PPUSH
35823: CALL_OW 264
35827: PUSH
35828: LD_INT 26
35830: PUSH
35831: EMPTY
35832: LIST
35833: IN
35834: IFFALSE 35855
// points := [ 120 , 30 , 80 ] ;
35836: LD_ADDR_VAR 0 9
35840: PUSH
35841: LD_INT 120
35843: PUSH
35844: LD_INT 30
35846: PUSH
35847: LD_INT 80
35849: PUSH
35850: EMPTY
35851: LIST
35852: LIST
35853: LIST
35854: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
35855: LD_VAR 0 6
35859: PPUSH
35860: CALL_OW 264
35864: PUSH
35865: LD_INT 22
35867: PUSH
35868: EMPTY
35869: LIST
35870: IN
35871: IFFALSE 35892
// points := [ 40 , 1 , 1 ] ;
35873: LD_ADDR_VAR 0 9
35877: PUSH
35878: LD_INT 40
35880: PUSH
35881: LD_INT 1
35883: PUSH
35884: LD_INT 1
35886: PUSH
35887: EMPTY
35888: LIST
35889: LIST
35890: LIST
35891: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
35892: LD_VAR 0 6
35896: PPUSH
35897: CALL_OW 264
35901: PUSH
35902: LD_INT 29
35904: PUSH
35905: EMPTY
35906: LIST
35907: IN
35908: IFFALSE 35929
// points := [ 70 , 200 , 400 ] ;
35910: LD_ADDR_VAR 0 9
35914: PUSH
35915: LD_INT 70
35917: PUSH
35918: LD_INT 200
35920: PUSH
35921: LD_INT 400
35923: PUSH
35924: EMPTY
35925: LIST
35926: LIST
35927: LIST
35928: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
35929: LD_VAR 0 6
35933: PPUSH
35934: CALL_OW 264
35938: PUSH
35939: LD_INT 14
35941: PUSH
35942: LD_INT 53
35944: PUSH
35945: EMPTY
35946: LIST
35947: LIST
35948: IN
35949: IFFALSE 35970
// points := [ 40 , 10 , 20 ] ;
35951: LD_ADDR_VAR 0 9
35955: PUSH
35956: LD_INT 40
35958: PUSH
35959: LD_INT 10
35961: PUSH
35962: LD_INT 20
35964: PUSH
35965: EMPTY
35966: LIST
35967: LIST
35968: LIST
35969: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
35970: LD_VAR 0 6
35974: PPUSH
35975: CALL_OW 264
35979: PUSH
35980: LD_INT 9
35982: PUSH
35983: EMPTY
35984: LIST
35985: IN
35986: IFFALSE 36007
// points := [ 5 , 70 , 20 ] ;
35988: LD_ADDR_VAR 0 9
35992: PUSH
35993: LD_INT 5
35995: PUSH
35996: LD_INT 70
35998: PUSH
35999: LD_INT 20
36001: PUSH
36002: EMPTY
36003: LIST
36004: LIST
36005: LIST
36006: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
36007: LD_VAR 0 6
36011: PPUSH
36012: CALL_OW 264
36016: PUSH
36017: LD_INT 10
36019: PUSH
36020: EMPTY
36021: LIST
36022: IN
36023: IFFALSE 36044
// points := [ 35 , 110 , 70 ] ;
36025: LD_ADDR_VAR 0 9
36029: PUSH
36030: LD_INT 35
36032: PUSH
36033: LD_INT 110
36035: PUSH
36036: LD_INT 70
36038: PUSH
36039: EMPTY
36040: LIST
36041: LIST
36042: LIST
36043: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
36044: LD_VAR 0 6
36048: PPUSH
36049: CALL_OW 265
36053: PUSH
36054: LD_INT 25
36056: EQUAL
36057: IFFALSE 36078
// points := [ 80 , 65 , 100 ] ;
36059: LD_ADDR_VAR 0 9
36063: PUSH
36064: LD_INT 80
36066: PUSH
36067: LD_INT 65
36069: PUSH
36070: LD_INT 100
36072: PUSH
36073: EMPTY
36074: LIST
36075: LIST
36076: LIST
36077: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
36078: LD_VAR 0 6
36082: PPUSH
36083: CALL_OW 263
36087: PUSH
36088: LD_INT 1
36090: EQUAL
36091: IFFALSE 36126
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
36093: LD_ADDR_VAR 0 10
36097: PUSH
36098: LD_VAR 0 10
36102: PUSH
36103: LD_VAR 0 6
36107: PPUSH
36108: CALL_OW 311
36112: PPUSH
36113: LD_INT 3
36115: PPUSH
36116: CALL_OW 259
36120: PUSH
36121: LD_INT 4
36123: MUL
36124: MUL
36125: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
36126: LD_VAR 0 6
36130: PPUSH
36131: CALL_OW 263
36135: PUSH
36136: LD_INT 2
36138: EQUAL
36139: IFFALSE 36190
// begin j := IsControledBy ( i ) ;
36141: LD_ADDR_VAR 0 7
36145: PUSH
36146: LD_VAR 0 6
36150: PPUSH
36151: CALL_OW 312
36155: ST_TO_ADDR
// if j then
36156: LD_VAR 0 7
36160: IFFALSE 36190
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
36162: LD_ADDR_VAR 0 10
36166: PUSH
36167: LD_VAR 0 10
36171: PUSH
36172: LD_VAR 0 7
36176: PPUSH
36177: LD_INT 3
36179: PPUSH
36180: CALL_OW 259
36184: PUSH
36185: LD_INT 3
36187: MUL
36188: MUL
36189: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
36190: LD_VAR 0 6
36194: PPUSH
36195: CALL_OW 264
36199: PUSH
36200: LD_INT 5
36202: PUSH
36203: LD_INT 6
36205: PUSH
36206: LD_INT 46
36208: PUSH
36209: LD_INT 44
36211: PUSH
36212: LD_INT 47
36214: PUSH
36215: LD_INT 45
36217: PUSH
36218: LD_INT 28
36220: PUSH
36221: LD_INT 7
36223: PUSH
36224: LD_INT 27
36226: PUSH
36227: LD_INT 29
36229: PUSH
36230: EMPTY
36231: LIST
36232: LIST
36233: LIST
36234: LIST
36235: LIST
36236: LIST
36237: LIST
36238: LIST
36239: LIST
36240: LIST
36241: IN
36242: PUSH
36243: LD_VAR 0 1
36247: PPUSH
36248: LD_INT 52
36250: PPUSH
36251: CALL_OW 321
36255: PUSH
36256: LD_INT 2
36258: EQUAL
36259: AND
36260: IFFALSE 36277
// bpoints := bpoints * 1.2 ;
36262: LD_ADDR_VAR 0 10
36266: PUSH
36267: LD_VAR 0 10
36271: PUSH
36272: LD_REAL  1.20000000000000E+0000
36275: MUL
36276: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
36277: LD_VAR 0 6
36281: PPUSH
36282: CALL_OW 264
36286: PUSH
36287: LD_INT 6
36289: PUSH
36290: LD_INT 46
36292: PUSH
36293: LD_INT 47
36295: PUSH
36296: EMPTY
36297: LIST
36298: LIST
36299: LIST
36300: IN
36301: IFFALSE 36318
// bpoints := bpoints * 1.2 ;
36303: LD_ADDR_VAR 0 10
36307: PUSH
36308: LD_VAR 0 10
36312: PUSH
36313: LD_REAL  1.20000000000000E+0000
36316: MUL
36317: ST_TO_ADDR
// end ; unit_building :
36318: GO 36332
36320: LD_INT 3
36322: DOUBLE
36323: EQUAL
36324: IFTRUE 36328
36326: GO 36331
36328: POP
// ; end ;
36329: GO 36332
36331: POP
// for j = 1 to 3 do
36332: LD_ADDR_VAR 0 7
36336: PUSH
36337: DOUBLE
36338: LD_INT 1
36340: DEC
36341: ST_TO_ADDR
36342: LD_INT 3
36344: PUSH
36345: FOR_TO
36346: IFFALSE 36399
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
36348: LD_ADDR_VAR 0 5
36352: PUSH
36353: LD_VAR 0 5
36357: PPUSH
36358: LD_VAR 0 7
36362: PPUSH
36363: LD_VAR 0 5
36367: PUSH
36368: LD_VAR 0 7
36372: ARRAY
36373: PUSH
36374: LD_VAR 0 9
36378: PUSH
36379: LD_VAR 0 7
36383: ARRAY
36384: PUSH
36385: LD_VAR 0 10
36389: MUL
36390: PLUS
36391: PPUSH
36392: CALL_OW 1
36396: ST_TO_ADDR
36397: GO 36345
36399: POP
36400: POP
// end ;
36401: GO 34880
36403: POP
36404: POP
// result := Replace ( result , 4 , tmp ) ;
36405: LD_ADDR_VAR 0 5
36409: PUSH
36410: LD_VAR 0 5
36414: PPUSH
36415: LD_INT 4
36417: PPUSH
36418: LD_VAR 0 8
36422: PPUSH
36423: CALL_OW 1
36427: ST_TO_ADDR
// end ;
36428: LD_VAR 0 5
36432: RET
// export function DangerAtRange ( unit , range ) ; begin
36433: LD_INT 0
36435: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
36436: LD_ADDR_VAR 0 3
36440: PUSH
36441: LD_VAR 0 1
36445: PPUSH
36446: CALL_OW 255
36450: PPUSH
36451: LD_VAR 0 1
36455: PPUSH
36456: CALL_OW 250
36460: PPUSH
36461: LD_VAR 0 1
36465: PPUSH
36466: CALL_OW 251
36470: PPUSH
36471: LD_VAR 0 2
36475: PPUSH
36476: CALL 34732 0 4
36480: ST_TO_ADDR
// end ;
36481: LD_VAR 0 3
36485: RET
// export function DangerInArea ( side , area ) ; begin
36486: LD_INT 0
36488: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
36489: LD_ADDR_VAR 0 3
36493: PUSH
36494: LD_VAR 0 2
36498: PPUSH
36499: LD_INT 81
36501: PUSH
36502: LD_VAR 0 1
36506: PUSH
36507: EMPTY
36508: LIST
36509: LIST
36510: PPUSH
36511: CALL_OW 70
36515: ST_TO_ADDR
// end ;
36516: LD_VAR 0 3
36520: RET
// export function IsExtension ( b ) ; begin
36521: LD_INT 0
36523: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
36524: LD_ADDR_VAR 0 2
36528: PUSH
36529: LD_VAR 0 1
36533: PUSH
36534: LD_INT 23
36536: PUSH
36537: LD_INT 20
36539: PUSH
36540: LD_INT 22
36542: PUSH
36543: LD_INT 17
36545: PUSH
36546: LD_INT 24
36548: PUSH
36549: LD_INT 21
36551: PUSH
36552: LD_INT 19
36554: PUSH
36555: LD_INT 16
36557: PUSH
36558: LD_INT 25
36560: PUSH
36561: LD_INT 18
36563: PUSH
36564: EMPTY
36565: LIST
36566: LIST
36567: LIST
36568: LIST
36569: LIST
36570: LIST
36571: LIST
36572: LIST
36573: LIST
36574: LIST
36575: IN
36576: ST_TO_ADDR
// end ;
36577: LD_VAR 0 2
36581: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
36582: LD_INT 0
36584: PPUSH
36585: PPUSH
36586: PPUSH
// result := [ ] ;
36587: LD_ADDR_VAR 0 4
36591: PUSH
36592: EMPTY
36593: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
36594: LD_ADDR_VAR 0 5
36598: PUSH
36599: LD_VAR 0 2
36603: PPUSH
36604: LD_INT 21
36606: PUSH
36607: LD_INT 3
36609: PUSH
36610: EMPTY
36611: LIST
36612: LIST
36613: PPUSH
36614: CALL_OW 70
36618: ST_TO_ADDR
// if not tmp then
36619: LD_VAR 0 5
36623: NOT
36624: IFFALSE 36628
// exit ;
36626: GO 36692
// if checkLink then
36628: LD_VAR 0 3
36632: IFFALSE 36682
// begin for i in tmp do
36634: LD_ADDR_VAR 0 6
36638: PUSH
36639: LD_VAR 0 5
36643: PUSH
36644: FOR_IN
36645: IFFALSE 36680
// if GetBase ( i ) <> base then
36647: LD_VAR 0 6
36651: PPUSH
36652: CALL_OW 274
36656: PUSH
36657: LD_VAR 0 1
36661: NONEQUAL
36662: IFFALSE 36678
// ComLinkToBase ( base , i ) ;
36664: LD_VAR 0 1
36668: PPUSH
36669: LD_VAR 0 6
36673: PPUSH
36674: CALL_OW 169
36678: GO 36644
36680: POP
36681: POP
// end ; result := tmp ;
36682: LD_ADDR_VAR 0 4
36686: PUSH
36687: LD_VAR 0 5
36691: ST_TO_ADDR
// end ;
36692: LD_VAR 0 4
36696: RET
// export function ComComplete ( units , b ) ; var i ; begin
36697: LD_INT 0
36699: PPUSH
36700: PPUSH
// if not units then
36701: LD_VAR 0 1
36705: NOT
36706: IFFALSE 36710
// exit ;
36708: GO 36800
// for i in units do
36710: LD_ADDR_VAR 0 4
36714: PUSH
36715: LD_VAR 0 1
36719: PUSH
36720: FOR_IN
36721: IFFALSE 36798
// if BuildingStatus ( b ) = bs_build then
36723: LD_VAR 0 2
36727: PPUSH
36728: CALL_OW 461
36732: PUSH
36733: LD_INT 1
36735: EQUAL
36736: IFFALSE 36796
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
36738: LD_VAR 0 4
36742: PPUSH
36743: LD_STRING h
36745: PUSH
36746: LD_VAR 0 2
36750: PPUSH
36751: CALL_OW 250
36755: PUSH
36756: LD_VAR 0 2
36760: PPUSH
36761: CALL_OW 251
36765: PUSH
36766: LD_VAR 0 2
36770: PUSH
36771: LD_INT 0
36773: PUSH
36774: LD_INT 0
36776: PUSH
36777: LD_INT 0
36779: PUSH
36780: EMPTY
36781: LIST
36782: LIST
36783: LIST
36784: LIST
36785: LIST
36786: LIST
36787: LIST
36788: PUSH
36789: EMPTY
36790: LIST
36791: PPUSH
36792: CALL_OW 446
36796: GO 36720
36798: POP
36799: POP
// end ;
36800: LD_VAR 0 3
36804: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
36805: LD_INT 0
36807: PPUSH
36808: PPUSH
36809: PPUSH
36810: PPUSH
36811: PPUSH
36812: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
36813: LD_VAR 0 1
36817: NOT
36818: PUSH
36819: LD_VAR 0 1
36823: PPUSH
36824: CALL_OW 263
36828: PUSH
36829: LD_INT 2
36831: NONEQUAL
36832: OR
36833: IFFALSE 36837
// exit ;
36835: GO 37153
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
36837: LD_ADDR_VAR 0 6
36841: PUSH
36842: LD_INT 22
36844: PUSH
36845: LD_VAR 0 1
36849: PPUSH
36850: CALL_OW 255
36854: PUSH
36855: EMPTY
36856: LIST
36857: LIST
36858: PUSH
36859: LD_INT 2
36861: PUSH
36862: LD_INT 30
36864: PUSH
36865: LD_INT 36
36867: PUSH
36868: EMPTY
36869: LIST
36870: LIST
36871: PUSH
36872: LD_INT 34
36874: PUSH
36875: LD_INT 31
36877: PUSH
36878: EMPTY
36879: LIST
36880: LIST
36881: PUSH
36882: EMPTY
36883: LIST
36884: LIST
36885: LIST
36886: PUSH
36887: EMPTY
36888: LIST
36889: LIST
36890: PPUSH
36891: CALL_OW 69
36895: ST_TO_ADDR
// if not tmp then
36896: LD_VAR 0 6
36900: NOT
36901: IFFALSE 36905
// exit ;
36903: GO 37153
// result := [ ] ;
36905: LD_ADDR_VAR 0 2
36909: PUSH
36910: EMPTY
36911: ST_TO_ADDR
// for i in tmp do
36912: LD_ADDR_VAR 0 3
36916: PUSH
36917: LD_VAR 0 6
36921: PUSH
36922: FOR_IN
36923: IFFALSE 36994
// begin t := UnitsInside ( i ) ;
36925: LD_ADDR_VAR 0 4
36929: PUSH
36930: LD_VAR 0 3
36934: PPUSH
36935: CALL_OW 313
36939: ST_TO_ADDR
// if t then
36940: LD_VAR 0 4
36944: IFFALSE 36992
// for j in t do
36946: LD_ADDR_VAR 0 7
36950: PUSH
36951: LD_VAR 0 4
36955: PUSH
36956: FOR_IN
36957: IFFALSE 36990
// result := Replace ( result , result + 1 , j ) ;
36959: LD_ADDR_VAR 0 2
36963: PUSH
36964: LD_VAR 0 2
36968: PPUSH
36969: LD_VAR 0 2
36973: PUSH
36974: LD_INT 1
36976: PLUS
36977: PPUSH
36978: LD_VAR 0 7
36982: PPUSH
36983: CALL_OW 1
36987: ST_TO_ADDR
36988: GO 36956
36990: POP
36991: POP
// end ;
36992: GO 36922
36994: POP
36995: POP
// if not result then
36996: LD_VAR 0 2
37000: NOT
37001: IFFALSE 37005
// exit ;
37003: GO 37153
// mech := result [ 1 ] ;
37005: LD_ADDR_VAR 0 5
37009: PUSH
37010: LD_VAR 0 2
37014: PUSH
37015: LD_INT 1
37017: ARRAY
37018: ST_TO_ADDR
// if result > 1 then
37019: LD_VAR 0 2
37023: PUSH
37024: LD_INT 1
37026: GREATER
37027: IFFALSE 37139
// begin for i = 2 to result do
37029: LD_ADDR_VAR 0 3
37033: PUSH
37034: DOUBLE
37035: LD_INT 2
37037: DEC
37038: ST_TO_ADDR
37039: LD_VAR 0 2
37043: PUSH
37044: FOR_TO
37045: IFFALSE 37137
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
37047: LD_ADDR_VAR 0 4
37051: PUSH
37052: LD_VAR 0 2
37056: PUSH
37057: LD_VAR 0 3
37061: ARRAY
37062: PPUSH
37063: LD_INT 3
37065: PPUSH
37066: CALL_OW 259
37070: PUSH
37071: LD_VAR 0 2
37075: PUSH
37076: LD_VAR 0 3
37080: ARRAY
37081: PPUSH
37082: CALL_OW 432
37086: MINUS
37087: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
37088: LD_VAR 0 4
37092: PUSH
37093: LD_VAR 0 5
37097: PPUSH
37098: LD_INT 3
37100: PPUSH
37101: CALL_OW 259
37105: PUSH
37106: LD_VAR 0 5
37110: PPUSH
37111: CALL_OW 432
37115: MINUS
37116: GREATEREQUAL
37117: IFFALSE 37135
// mech := result [ i ] ;
37119: LD_ADDR_VAR 0 5
37123: PUSH
37124: LD_VAR 0 2
37128: PUSH
37129: LD_VAR 0 3
37133: ARRAY
37134: ST_TO_ADDR
// end ;
37135: GO 37044
37137: POP
37138: POP
// end ; ComLinkTo ( vehicle , mech ) ;
37139: LD_VAR 0 1
37143: PPUSH
37144: LD_VAR 0 5
37148: PPUSH
37149: CALL_OW 135
// end ;
37153: LD_VAR 0 2
37157: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
37158: LD_INT 0
37160: PPUSH
37161: PPUSH
37162: PPUSH
37163: PPUSH
37164: PPUSH
37165: PPUSH
37166: PPUSH
37167: PPUSH
37168: PPUSH
37169: PPUSH
37170: PPUSH
37171: PPUSH
37172: PPUSH
// result := [ ] ;
37173: LD_ADDR_VAR 0 7
37177: PUSH
37178: EMPTY
37179: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
37180: LD_VAR 0 1
37184: PPUSH
37185: CALL_OW 266
37189: PUSH
37190: LD_INT 0
37192: PUSH
37193: LD_INT 1
37195: PUSH
37196: EMPTY
37197: LIST
37198: LIST
37199: IN
37200: NOT
37201: IFFALSE 37205
// exit ;
37203: GO 38839
// if name then
37205: LD_VAR 0 3
37209: IFFALSE 37225
// SetBName ( base_dep , name ) ;
37211: LD_VAR 0 1
37215: PPUSH
37216: LD_VAR 0 3
37220: PPUSH
37221: CALL_OW 500
// base := GetBase ( base_dep ) ;
37225: LD_ADDR_VAR 0 15
37229: PUSH
37230: LD_VAR 0 1
37234: PPUSH
37235: CALL_OW 274
37239: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
37240: LD_ADDR_VAR 0 16
37244: PUSH
37245: LD_VAR 0 1
37249: PPUSH
37250: CALL_OW 255
37254: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
37255: LD_ADDR_VAR 0 17
37259: PUSH
37260: LD_VAR 0 1
37264: PPUSH
37265: CALL_OW 248
37269: ST_TO_ADDR
// if sources then
37270: LD_VAR 0 5
37274: IFFALSE 37321
// for i = 1 to 3 do
37276: LD_ADDR_VAR 0 8
37280: PUSH
37281: DOUBLE
37282: LD_INT 1
37284: DEC
37285: ST_TO_ADDR
37286: LD_INT 3
37288: PUSH
37289: FOR_TO
37290: IFFALSE 37319
// AddResourceType ( base , i , sources [ i ] ) ;
37292: LD_VAR 0 15
37296: PPUSH
37297: LD_VAR 0 8
37301: PPUSH
37302: LD_VAR 0 5
37306: PUSH
37307: LD_VAR 0 8
37311: ARRAY
37312: PPUSH
37313: CALL_OW 276
37317: GO 37289
37319: POP
37320: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
37321: LD_ADDR_VAR 0 18
37325: PUSH
37326: LD_VAR 0 15
37330: PPUSH
37331: LD_VAR 0 2
37335: PPUSH
37336: LD_INT 1
37338: PPUSH
37339: CALL 36582 0 3
37343: ST_TO_ADDR
// InitHc ;
37344: CALL_OW 19
// InitUc ;
37348: CALL_OW 18
// uc_side := side ;
37352: LD_ADDR_OWVAR 20
37356: PUSH
37357: LD_VAR 0 16
37361: ST_TO_ADDR
// uc_nation := nation ;
37362: LD_ADDR_OWVAR 21
37366: PUSH
37367: LD_VAR 0 17
37371: ST_TO_ADDR
// if buildings then
37372: LD_VAR 0 18
37376: IFFALSE 38698
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
37378: LD_ADDR_VAR 0 19
37382: PUSH
37383: LD_VAR 0 18
37387: PPUSH
37388: LD_INT 2
37390: PUSH
37391: LD_INT 30
37393: PUSH
37394: LD_INT 29
37396: PUSH
37397: EMPTY
37398: LIST
37399: LIST
37400: PUSH
37401: LD_INT 30
37403: PUSH
37404: LD_INT 30
37406: PUSH
37407: EMPTY
37408: LIST
37409: LIST
37410: PUSH
37411: EMPTY
37412: LIST
37413: LIST
37414: LIST
37415: PPUSH
37416: CALL_OW 72
37420: ST_TO_ADDR
// if tmp then
37421: LD_VAR 0 19
37425: IFFALSE 37473
// for i in tmp do
37427: LD_ADDR_VAR 0 8
37431: PUSH
37432: LD_VAR 0 19
37436: PUSH
37437: FOR_IN
37438: IFFALSE 37471
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
37440: LD_VAR 0 8
37444: PPUSH
37445: CALL_OW 250
37449: PPUSH
37450: LD_VAR 0 8
37454: PPUSH
37455: CALL_OW 251
37459: PPUSH
37460: LD_VAR 0 16
37464: PPUSH
37465: CALL_OW 441
37469: GO 37437
37471: POP
37472: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
37473: LD_VAR 0 18
37477: PPUSH
37478: LD_INT 2
37480: PUSH
37481: LD_INT 30
37483: PUSH
37484: LD_INT 32
37486: PUSH
37487: EMPTY
37488: LIST
37489: LIST
37490: PUSH
37491: LD_INT 30
37493: PUSH
37494: LD_INT 33
37496: PUSH
37497: EMPTY
37498: LIST
37499: LIST
37500: PUSH
37501: EMPTY
37502: LIST
37503: LIST
37504: LIST
37505: PPUSH
37506: CALL_OW 72
37510: IFFALSE 37598
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
37512: LD_ADDR_VAR 0 8
37516: PUSH
37517: LD_VAR 0 18
37521: PPUSH
37522: LD_INT 2
37524: PUSH
37525: LD_INT 30
37527: PUSH
37528: LD_INT 32
37530: PUSH
37531: EMPTY
37532: LIST
37533: LIST
37534: PUSH
37535: LD_INT 30
37537: PUSH
37538: LD_INT 33
37540: PUSH
37541: EMPTY
37542: LIST
37543: LIST
37544: PUSH
37545: EMPTY
37546: LIST
37547: LIST
37548: LIST
37549: PPUSH
37550: CALL_OW 72
37554: PUSH
37555: FOR_IN
37556: IFFALSE 37596
// begin if not GetBWeapon ( i ) then
37558: LD_VAR 0 8
37562: PPUSH
37563: CALL_OW 269
37567: NOT
37568: IFFALSE 37594
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
37570: LD_VAR 0 8
37574: PPUSH
37575: LD_VAR 0 8
37579: PPUSH
37580: LD_VAR 0 2
37584: PPUSH
37585: CALL 38844 0 2
37589: PPUSH
37590: CALL_OW 431
// end ;
37594: GO 37555
37596: POP
37597: POP
// end ; for i = 1 to personel do
37598: LD_ADDR_VAR 0 8
37602: PUSH
37603: DOUBLE
37604: LD_INT 1
37606: DEC
37607: ST_TO_ADDR
37608: LD_VAR 0 6
37612: PUSH
37613: FOR_TO
37614: IFFALSE 38678
// begin if i > 4 then
37616: LD_VAR 0 8
37620: PUSH
37621: LD_INT 4
37623: GREATER
37624: IFFALSE 37628
// break ;
37626: GO 38678
// case i of 1 :
37628: LD_VAR 0 8
37632: PUSH
37633: LD_INT 1
37635: DOUBLE
37636: EQUAL
37637: IFTRUE 37641
37639: GO 37721
37641: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
37642: LD_ADDR_VAR 0 12
37646: PUSH
37647: LD_VAR 0 18
37651: PPUSH
37652: LD_INT 22
37654: PUSH
37655: LD_VAR 0 16
37659: PUSH
37660: EMPTY
37661: LIST
37662: LIST
37663: PUSH
37664: LD_INT 58
37666: PUSH
37667: EMPTY
37668: LIST
37669: PUSH
37670: LD_INT 2
37672: PUSH
37673: LD_INT 30
37675: PUSH
37676: LD_INT 32
37678: PUSH
37679: EMPTY
37680: LIST
37681: LIST
37682: PUSH
37683: LD_INT 30
37685: PUSH
37686: LD_INT 4
37688: PUSH
37689: EMPTY
37690: LIST
37691: LIST
37692: PUSH
37693: LD_INT 30
37695: PUSH
37696: LD_INT 5
37698: PUSH
37699: EMPTY
37700: LIST
37701: LIST
37702: PUSH
37703: EMPTY
37704: LIST
37705: LIST
37706: LIST
37707: LIST
37708: PUSH
37709: EMPTY
37710: LIST
37711: LIST
37712: LIST
37713: PPUSH
37714: CALL_OW 72
37718: ST_TO_ADDR
37719: GO 37943
37721: LD_INT 2
37723: DOUBLE
37724: EQUAL
37725: IFTRUE 37729
37727: GO 37791
37729: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
37730: LD_ADDR_VAR 0 12
37734: PUSH
37735: LD_VAR 0 18
37739: PPUSH
37740: LD_INT 22
37742: PUSH
37743: LD_VAR 0 16
37747: PUSH
37748: EMPTY
37749: LIST
37750: LIST
37751: PUSH
37752: LD_INT 2
37754: PUSH
37755: LD_INT 30
37757: PUSH
37758: LD_INT 0
37760: PUSH
37761: EMPTY
37762: LIST
37763: LIST
37764: PUSH
37765: LD_INT 30
37767: PUSH
37768: LD_INT 1
37770: PUSH
37771: EMPTY
37772: LIST
37773: LIST
37774: PUSH
37775: EMPTY
37776: LIST
37777: LIST
37778: LIST
37779: PUSH
37780: EMPTY
37781: LIST
37782: LIST
37783: PPUSH
37784: CALL_OW 72
37788: ST_TO_ADDR
37789: GO 37943
37791: LD_INT 3
37793: DOUBLE
37794: EQUAL
37795: IFTRUE 37799
37797: GO 37861
37799: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
37800: LD_ADDR_VAR 0 12
37804: PUSH
37805: LD_VAR 0 18
37809: PPUSH
37810: LD_INT 22
37812: PUSH
37813: LD_VAR 0 16
37817: PUSH
37818: EMPTY
37819: LIST
37820: LIST
37821: PUSH
37822: LD_INT 2
37824: PUSH
37825: LD_INT 30
37827: PUSH
37828: LD_INT 2
37830: PUSH
37831: EMPTY
37832: LIST
37833: LIST
37834: PUSH
37835: LD_INT 30
37837: PUSH
37838: LD_INT 3
37840: PUSH
37841: EMPTY
37842: LIST
37843: LIST
37844: PUSH
37845: EMPTY
37846: LIST
37847: LIST
37848: LIST
37849: PUSH
37850: EMPTY
37851: LIST
37852: LIST
37853: PPUSH
37854: CALL_OW 72
37858: ST_TO_ADDR
37859: GO 37943
37861: LD_INT 4
37863: DOUBLE
37864: EQUAL
37865: IFTRUE 37869
37867: GO 37942
37869: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
37870: LD_ADDR_VAR 0 12
37874: PUSH
37875: LD_VAR 0 18
37879: PPUSH
37880: LD_INT 22
37882: PUSH
37883: LD_VAR 0 16
37887: PUSH
37888: EMPTY
37889: LIST
37890: LIST
37891: PUSH
37892: LD_INT 2
37894: PUSH
37895: LD_INT 30
37897: PUSH
37898: LD_INT 6
37900: PUSH
37901: EMPTY
37902: LIST
37903: LIST
37904: PUSH
37905: LD_INT 30
37907: PUSH
37908: LD_INT 7
37910: PUSH
37911: EMPTY
37912: LIST
37913: LIST
37914: PUSH
37915: LD_INT 30
37917: PUSH
37918: LD_INT 8
37920: PUSH
37921: EMPTY
37922: LIST
37923: LIST
37924: PUSH
37925: EMPTY
37926: LIST
37927: LIST
37928: LIST
37929: LIST
37930: PUSH
37931: EMPTY
37932: LIST
37933: LIST
37934: PPUSH
37935: CALL_OW 72
37939: ST_TO_ADDR
37940: GO 37943
37942: POP
// if i = 1 then
37943: LD_VAR 0 8
37947: PUSH
37948: LD_INT 1
37950: EQUAL
37951: IFFALSE 38062
// begin tmp := [ ] ;
37953: LD_ADDR_VAR 0 19
37957: PUSH
37958: EMPTY
37959: ST_TO_ADDR
// for j in f do
37960: LD_ADDR_VAR 0 9
37964: PUSH
37965: LD_VAR 0 12
37969: PUSH
37970: FOR_IN
37971: IFFALSE 38044
// if GetBType ( j ) = b_bunker then
37973: LD_VAR 0 9
37977: PPUSH
37978: CALL_OW 266
37982: PUSH
37983: LD_INT 32
37985: EQUAL
37986: IFFALSE 38013
// tmp := Insert ( tmp , 1 , j ) else
37988: LD_ADDR_VAR 0 19
37992: PUSH
37993: LD_VAR 0 19
37997: PPUSH
37998: LD_INT 1
38000: PPUSH
38001: LD_VAR 0 9
38005: PPUSH
38006: CALL_OW 2
38010: ST_TO_ADDR
38011: GO 38042
// tmp := Insert ( tmp , tmp + 1 , j ) ;
38013: LD_ADDR_VAR 0 19
38017: PUSH
38018: LD_VAR 0 19
38022: PPUSH
38023: LD_VAR 0 19
38027: PUSH
38028: LD_INT 1
38030: PLUS
38031: PPUSH
38032: LD_VAR 0 9
38036: PPUSH
38037: CALL_OW 2
38041: ST_TO_ADDR
38042: GO 37970
38044: POP
38045: POP
// if tmp then
38046: LD_VAR 0 19
38050: IFFALSE 38062
// f := tmp ;
38052: LD_ADDR_VAR 0 12
38056: PUSH
38057: LD_VAR 0 19
38061: ST_TO_ADDR
// end ; x := personel [ i ] ;
38062: LD_ADDR_VAR 0 13
38066: PUSH
38067: LD_VAR 0 6
38071: PUSH
38072: LD_VAR 0 8
38076: ARRAY
38077: ST_TO_ADDR
// if x = - 1 then
38078: LD_VAR 0 13
38082: PUSH
38083: LD_INT 1
38085: NEG
38086: EQUAL
38087: IFFALSE 38296
// begin for j in f do
38089: LD_ADDR_VAR 0 9
38093: PUSH
38094: LD_VAR 0 12
38098: PUSH
38099: FOR_IN
38100: IFFALSE 38292
// repeat InitHc ;
38102: CALL_OW 19
// if GetBType ( j ) = b_barracks then
38106: LD_VAR 0 9
38110: PPUSH
38111: CALL_OW 266
38115: PUSH
38116: LD_INT 5
38118: EQUAL
38119: IFFALSE 38189
// begin if UnitsInside ( j ) < 3 then
38121: LD_VAR 0 9
38125: PPUSH
38126: CALL_OW 313
38130: PUSH
38131: LD_INT 3
38133: LESS
38134: IFFALSE 38170
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
38136: LD_INT 0
38138: PPUSH
38139: LD_INT 5
38141: PUSH
38142: LD_INT 8
38144: PUSH
38145: LD_INT 9
38147: PUSH
38148: EMPTY
38149: LIST
38150: LIST
38151: LIST
38152: PUSH
38153: LD_VAR 0 17
38157: ARRAY
38158: PPUSH
38159: LD_VAR 0 4
38163: PPUSH
38164: CALL_OW 380
38168: GO 38187
// PrepareHuman ( false , i , skill ) ;
38170: LD_INT 0
38172: PPUSH
38173: LD_VAR 0 8
38177: PPUSH
38178: LD_VAR 0 4
38182: PPUSH
38183: CALL_OW 380
// end else
38187: GO 38206
// PrepareHuman ( false , i , skill ) ;
38189: LD_INT 0
38191: PPUSH
38192: LD_VAR 0 8
38196: PPUSH
38197: LD_VAR 0 4
38201: PPUSH
38202: CALL_OW 380
// un := CreateHuman ;
38206: LD_ADDR_VAR 0 14
38210: PUSH
38211: CALL_OW 44
38215: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38216: LD_ADDR_VAR 0 7
38220: PUSH
38221: LD_VAR 0 7
38225: PPUSH
38226: LD_INT 1
38228: PPUSH
38229: LD_VAR 0 14
38233: PPUSH
38234: CALL_OW 2
38238: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
38239: LD_VAR 0 14
38243: PPUSH
38244: LD_VAR 0 9
38248: PPUSH
38249: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
38253: LD_VAR 0 9
38257: PPUSH
38258: CALL_OW 313
38262: PUSH
38263: LD_INT 6
38265: EQUAL
38266: PUSH
38267: LD_VAR 0 9
38271: PPUSH
38272: CALL_OW 266
38276: PUSH
38277: LD_INT 32
38279: PUSH
38280: LD_INT 31
38282: PUSH
38283: EMPTY
38284: LIST
38285: LIST
38286: IN
38287: OR
38288: IFFALSE 38102
38290: GO 38099
38292: POP
38293: POP
// end else
38294: GO 38676
// for j = 1 to x do
38296: LD_ADDR_VAR 0 9
38300: PUSH
38301: DOUBLE
38302: LD_INT 1
38304: DEC
38305: ST_TO_ADDR
38306: LD_VAR 0 13
38310: PUSH
38311: FOR_TO
38312: IFFALSE 38674
// begin InitHc ;
38314: CALL_OW 19
// if not f then
38318: LD_VAR 0 12
38322: NOT
38323: IFFALSE 38412
// begin PrepareHuman ( false , i , skill ) ;
38325: LD_INT 0
38327: PPUSH
38328: LD_VAR 0 8
38332: PPUSH
38333: LD_VAR 0 4
38337: PPUSH
38338: CALL_OW 380
// un := CreateHuman ;
38342: LD_ADDR_VAR 0 14
38346: PUSH
38347: CALL_OW 44
38351: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38352: LD_ADDR_VAR 0 7
38356: PUSH
38357: LD_VAR 0 7
38361: PPUSH
38362: LD_INT 1
38364: PPUSH
38365: LD_VAR 0 14
38369: PPUSH
38370: CALL_OW 2
38374: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
38375: LD_VAR 0 14
38379: PPUSH
38380: LD_VAR 0 1
38384: PPUSH
38385: CALL_OW 250
38389: PPUSH
38390: LD_VAR 0 1
38394: PPUSH
38395: CALL_OW 251
38399: PPUSH
38400: LD_INT 10
38402: PPUSH
38403: LD_INT 0
38405: PPUSH
38406: CALL_OW 50
// continue ;
38410: GO 38311
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
38412: LD_VAR 0 12
38416: PUSH
38417: LD_INT 1
38419: ARRAY
38420: PPUSH
38421: CALL_OW 313
38425: PUSH
38426: LD_VAR 0 12
38430: PUSH
38431: LD_INT 1
38433: ARRAY
38434: PPUSH
38435: CALL_OW 266
38439: PUSH
38440: LD_INT 32
38442: PUSH
38443: LD_INT 31
38445: PUSH
38446: EMPTY
38447: LIST
38448: LIST
38449: IN
38450: AND
38451: PUSH
38452: LD_VAR 0 12
38456: PUSH
38457: LD_INT 1
38459: ARRAY
38460: PPUSH
38461: CALL_OW 313
38465: PUSH
38466: LD_INT 6
38468: EQUAL
38469: OR
38470: IFFALSE 38490
// f := Delete ( f , 1 ) ;
38472: LD_ADDR_VAR 0 12
38476: PUSH
38477: LD_VAR 0 12
38481: PPUSH
38482: LD_INT 1
38484: PPUSH
38485: CALL_OW 3
38489: ST_TO_ADDR
// if not f then
38490: LD_VAR 0 12
38494: NOT
38495: IFFALSE 38513
// begin x := x + 2 ;
38497: LD_ADDR_VAR 0 13
38501: PUSH
38502: LD_VAR 0 13
38506: PUSH
38507: LD_INT 2
38509: PLUS
38510: ST_TO_ADDR
// continue ;
38511: GO 38311
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
38513: LD_VAR 0 12
38517: PUSH
38518: LD_INT 1
38520: ARRAY
38521: PPUSH
38522: CALL_OW 266
38526: PUSH
38527: LD_INT 5
38529: EQUAL
38530: IFFALSE 38604
// begin if UnitsInside ( f [ 1 ] ) < 3 then
38532: LD_VAR 0 12
38536: PUSH
38537: LD_INT 1
38539: ARRAY
38540: PPUSH
38541: CALL_OW 313
38545: PUSH
38546: LD_INT 3
38548: LESS
38549: IFFALSE 38585
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
38551: LD_INT 0
38553: PPUSH
38554: LD_INT 5
38556: PUSH
38557: LD_INT 8
38559: PUSH
38560: LD_INT 9
38562: PUSH
38563: EMPTY
38564: LIST
38565: LIST
38566: LIST
38567: PUSH
38568: LD_VAR 0 17
38572: ARRAY
38573: PPUSH
38574: LD_VAR 0 4
38578: PPUSH
38579: CALL_OW 380
38583: GO 38602
// PrepareHuman ( false , i , skill ) ;
38585: LD_INT 0
38587: PPUSH
38588: LD_VAR 0 8
38592: PPUSH
38593: LD_VAR 0 4
38597: PPUSH
38598: CALL_OW 380
// end else
38602: GO 38621
// PrepareHuman ( false , i , skill ) ;
38604: LD_INT 0
38606: PPUSH
38607: LD_VAR 0 8
38611: PPUSH
38612: LD_VAR 0 4
38616: PPUSH
38617: CALL_OW 380
// un := CreateHuman ;
38621: LD_ADDR_VAR 0 14
38625: PUSH
38626: CALL_OW 44
38630: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38631: LD_ADDR_VAR 0 7
38635: PUSH
38636: LD_VAR 0 7
38640: PPUSH
38641: LD_INT 1
38643: PPUSH
38644: LD_VAR 0 14
38648: PPUSH
38649: CALL_OW 2
38653: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
38654: LD_VAR 0 14
38658: PPUSH
38659: LD_VAR 0 12
38663: PUSH
38664: LD_INT 1
38666: ARRAY
38667: PPUSH
38668: CALL_OW 52
// end ;
38672: GO 38311
38674: POP
38675: POP
// end ;
38676: GO 37613
38678: POP
38679: POP
// result := result ^ buildings ;
38680: LD_ADDR_VAR 0 7
38684: PUSH
38685: LD_VAR 0 7
38689: PUSH
38690: LD_VAR 0 18
38694: ADD
38695: ST_TO_ADDR
// end else
38696: GO 38839
// begin for i = 1 to personel do
38698: LD_ADDR_VAR 0 8
38702: PUSH
38703: DOUBLE
38704: LD_INT 1
38706: DEC
38707: ST_TO_ADDR
38708: LD_VAR 0 6
38712: PUSH
38713: FOR_TO
38714: IFFALSE 38837
// begin if i > 4 then
38716: LD_VAR 0 8
38720: PUSH
38721: LD_INT 4
38723: GREATER
38724: IFFALSE 38728
// break ;
38726: GO 38837
// x := personel [ i ] ;
38728: LD_ADDR_VAR 0 13
38732: PUSH
38733: LD_VAR 0 6
38737: PUSH
38738: LD_VAR 0 8
38742: ARRAY
38743: ST_TO_ADDR
// if x = - 1 then
38744: LD_VAR 0 13
38748: PUSH
38749: LD_INT 1
38751: NEG
38752: EQUAL
38753: IFFALSE 38757
// continue ;
38755: GO 38713
// PrepareHuman ( false , i , skill ) ;
38757: LD_INT 0
38759: PPUSH
38760: LD_VAR 0 8
38764: PPUSH
38765: LD_VAR 0 4
38769: PPUSH
38770: CALL_OW 380
// un := CreateHuman ;
38774: LD_ADDR_VAR 0 14
38778: PUSH
38779: CALL_OW 44
38783: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
38784: LD_VAR 0 14
38788: PPUSH
38789: LD_VAR 0 1
38793: PPUSH
38794: CALL_OW 250
38798: PPUSH
38799: LD_VAR 0 1
38803: PPUSH
38804: CALL_OW 251
38808: PPUSH
38809: LD_INT 10
38811: PPUSH
38812: LD_INT 0
38814: PPUSH
38815: CALL_OW 50
// result := result ^ un ;
38819: LD_ADDR_VAR 0 7
38823: PUSH
38824: LD_VAR 0 7
38828: PUSH
38829: LD_VAR 0 14
38833: ADD
38834: ST_TO_ADDR
// end ;
38835: GO 38713
38837: POP
38838: POP
// end ; end ;
38839: LD_VAR 0 7
38843: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
38844: LD_INT 0
38846: PPUSH
38847: PPUSH
38848: PPUSH
38849: PPUSH
38850: PPUSH
38851: PPUSH
38852: PPUSH
38853: PPUSH
38854: PPUSH
38855: PPUSH
38856: PPUSH
38857: PPUSH
38858: PPUSH
38859: PPUSH
38860: PPUSH
38861: PPUSH
// result := false ;
38862: LD_ADDR_VAR 0 3
38866: PUSH
38867: LD_INT 0
38869: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
38870: LD_VAR 0 1
38874: NOT
38875: PUSH
38876: LD_VAR 0 1
38880: PPUSH
38881: CALL_OW 266
38885: PUSH
38886: LD_INT 32
38888: PUSH
38889: LD_INT 33
38891: PUSH
38892: EMPTY
38893: LIST
38894: LIST
38895: IN
38896: NOT
38897: OR
38898: IFFALSE 38902
// exit ;
38900: GO 40011
// nat := GetNation ( tower ) ;
38902: LD_ADDR_VAR 0 12
38906: PUSH
38907: LD_VAR 0 1
38911: PPUSH
38912: CALL_OW 248
38916: ST_TO_ADDR
// side := GetSide ( tower ) ;
38917: LD_ADDR_VAR 0 16
38921: PUSH
38922: LD_VAR 0 1
38926: PPUSH
38927: CALL_OW 255
38931: ST_TO_ADDR
// x := GetX ( tower ) ;
38932: LD_ADDR_VAR 0 10
38936: PUSH
38937: LD_VAR 0 1
38941: PPUSH
38942: CALL_OW 250
38946: ST_TO_ADDR
// y := GetY ( tower ) ;
38947: LD_ADDR_VAR 0 11
38951: PUSH
38952: LD_VAR 0 1
38956: PPUSH
38957: CALL_OW 251
38961: ST_TO_ADDR
// if not x or not y then
38962: LD_VAR 0 10
38966: NOT
38967: PUSH
38968: LD_VAR 0 11
38972: NOT
38973: OR
38974: IFFALSE 38978
// exit ;
38976: GO 40011
// weapon := 0 ;
38978: LD_ADDR_VAR 0 18
38982: PUSH
38983: LD_INT 0
38985: ST_TO_ADDR
// fac_list := [ ] ;
38986: LD_ADDR_VAR 0 17
38990: PUSH
38991: EMPTY
38992: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
38993: LD_ADDR_VAR 0 6
38997: PUSH
38998: LD_VAR 0 1
39002: PPUSH
39003: CALL_OW 274
39007: PPUSH
39008: LD_VAR 0 2
39012: PPUSH
39013: LD_INT 0
39015: PPUSH
39016: CALL 36582 0 3
39020: PPUSH
39021: LD_INT 30
39023: PUSH
39024: LD_INT 3
39026: PUSH
39027: EMPTY
39028: LIST
39029: LIST
39030: PPUSH
39031: CALL_OW 72
39035: ST_TO_ADDR
// if not factories then
39036: LD_VAR 0 6
39040: NOT
39041: IFFALSE 39045
// exit ;
39043: GO 40011
// for i in factories do
39045: LD_ADDR_VAR 0 8
39049: PUSH
39050: LD_VAR 0 6
39054: PUSH
39055: FOR_IN
39056: IFFALSE 39081
// fac_list := fac_list union AvailableWeaponList ( i ) ;
39058: LD_ADDR_VAR 0 17
39062: PUSH
39063: LD_VAR 0 17
39067: PUSH
39068: LD_VAR 0 8
39072: PPUSH
39073: CALL_OW 478
39077: UNION
39078: ST_TO_ADDR
39079: GO 39055
39081: POP
39082: POP
// if not fac_list then
39083: LD_VAR 0 17
39087: NOT
39088: IFFALSE 39092
// exit ;
39090: GO 40011
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
39092: LD_ADDR_VAR 0 5
39096: PUSH
39097: LD_INT 4
39099: PUSH
39100: LD_INT 5
39102: PUSH
39103: LD_INT 9
39105: PUSH
39106: LD_INT 10
39108: PUSH
39109: LD_INT 6
39111: PUSH
39112: LD_INT 7
39114: PUSH
39115: LD_INT 11
39117: PUSH
39118: EMPTY
39119: LIST
39120: LIST
39121: LIST
39122: LIST
39123: LIST
39124: LIST
39125: LIST
39126: PUSH
39127: LD_INT 27
39129: PUSH
39130: LD_INT 28
39132: PUSH
39133: LD_INT 26
39135: PUSH
39136: LD_INT 30
39138: PUSH
39139: EMPTY
39140: LIST
39141: LIST
39142: LIST
39143: LIST
39144: PUSH
39145: LD_INT 43
39147: PUSH
39148: LD_INT 44
39150: PUSH
39151: LD_INT 46
39153: PUSH
39154: LD_INT 45
39156: PUSH
39157: LD_INT 47
39159: PUSH
39160: LD_INT 49
39162: PUSH
39163: EMPTY
39164: LIST
39165: LIST
39166: LIST
39167: LIST
39168: LIST
39169: LIST
39170: PUSH
39171: EMPTY
39172: LIST
39173: LIST
39174: LIST
39175: PUSH
39176: LD_VAR 0 12
39180: ARRAY
39181: ST_TO_ADDR
// list := list isect fac_list ;
39182: LD_ADDR_VAR 0 5
39186: PUSH
39187: LD_VAR 0 5
39191: PUSH
39192: LD_VAR 0 17
39196: ISECT
39197: ST_TO_ADDR
// if not list then
39198: LD_VAR 0 5
39202: NOT
39203: IFFALSE 39207
// exit ;
39205: GO 40011
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
39207: LD_VAR 0 12
39211: PUSH
39212: LD_INT 3
39214: EQUAL
39215: PUSH
39216: LD_INT 49
39218: PUSH
39219: LD_VAR 0 5
39223: IN
39224: AND
39225: PUSH
39226: LD_INT 31
39228: PPUSH
39229: LD_VAR 0 16
39233: PPUSH
39234: CALL_OW 321
39238: PUSH
39239: LD_INT 2
39241: EQUAL
39242: AND
39243: IFFALSE 39303
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
39245: LD_INT 22
39247: PUSH
39248: LD_VAR 0 16
39252: PUSH
39253: EMPTY
39254: LIST
39255: LIST
39256: PUSH
39257: LD_INT 35
39259: PUSH
39260: LD_INT 49
39262: PUSH
39263: EMPTY
39264: LIST
39265: LIST
39266: PUSH
39267: LD_INT 91
39269: PUSH
39270: LD_VAR 0 1
39274: PUSH
39275: LD_INT 10
39277: PUSH
39278: EMPTY
39279: LIST
39280: LIST
39281: LIST
39282: PUSH
39283: EMPTY
39284: LIST
39285: LIST
39286: LIST
39287: PPUSH
39288: CALL_OW 69
39292: NOT
39293: IFFALSE 39303
// weapon := ru_time_lapser ;
39295: LD_ADDR_VAR 0 18
39299: PUSH
39300: LD_INT 49
39302: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
39303: LD_VAR 0 12
39307: PUSH
39308: LD_INT 1
39310: PUSH
39311: LD_INT 2
39313: PUSH
39314: EMPTY
39315: LIST
39316: LIST
39317: IN
39318: PUSH
39319: LD_INT 11
39321: PUSH
39322: LD_VAR 0 5
39326: IN
39327: PUSH
39328: LD_INT 30
39330: PUSH
39331: LD_VAR 0 5
39335: IN
39336: OR
39337: AND
39338: PUSH
39339: LD_INT 6
39341: PPUSH
39342: LD_VAR 0 16
39346: PPUSH
39347: CALL_OW 321
39351: PUSH
39352: LD_INT 2
39354: EQUAL
39355: AND
39356: IFFALSE 39521
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
39358: LD_INT 22
39360: PUSH
39361: LD_VAR 0 16
39365: PUSH
39366: EMPTY
39367: LIST
39368: LIST
39369: PUSH
39370: LD_INT 2
39372: PUSH
39373: LD_INT 35
39375: PUSH
39376: LD_INT 11
39378: PUSH
39379: EMPTY
39380: LIST
39381: LIST
39382: PUSH
39383: LD_INT 35
39385: PUSH
39386: LD_INT 30
39388: PUSH
39389: EMPTY
39390: LIST
39391: LIST
39392: PUSH
39393: EMPTY
39394: LIST
39395: LIST
39396: LIST
39397: PUSH
39398: LD_INT 91
39400: PUSH
39401: LD_VAR 0 1
39405: PUSH
39406: LD_INT 18
39408: PUSH
39409: EMPTY
39410: LIST
39411: LIST
39412: LIST
39413: PUSH
39414: EMPTY
39415: LIST
39416: LIST
39417: LIST
39418: PPUSH
39419: CALL_OW 69
39423: NOT
39424: PUSH
39425: LD_INT 22
39427: PUSH
39428: LD_VAR 0 16
39432: PUSH
39433: EMPTY
39434: LIST
39435: LIST
39436: PUSH
39437: LD_INT 2
39439: PUSH
39440: LD_INT 30
39442: PUSH
39443: LD_INT 32
39445: PUSH
39446: EMPTY
39447: LIST
39448: LIST
39449: PUSH
39450: LD_INT 30
39452: PUSH
39453: LD_INT 33
39455: PUSH
39456: EMPTY
39457: LIST
39458: LIST
39459: PUSH
39460: EMPTY
39461: LIST
39462: LIST
39463: LIST
39464: PUSH
39465: LD_INT 91
39467: PUSH
39468: LD_VAR 0 1
39472: PUSH
39473: LD_INT 12
39475: PUSH
39476: EMPTY
39477: LIST
39478: LIST
39479: LIST
39480: PUSH
39481: EMPTY
39482: LIST
39483: LIST
39484: LIST
39485: PUSH
39486: EMPTY
39487: LIST
39488: PPUSH
39489: CALL_OW 69
39493: PUSH
39494: LD_INT 2
39496: GREATER
39497: AND
39498: IFFALSE 39521
// weapon := [ us_radar , ar_radar ] [ nat ] ;
39500: LD_ADDR_VAR 0 18
39504: PUSH
39505: LD_INT 11
39507: PUSH
39508: LD_INT 30
39510: PUSH
39511: EMPTY
39512: LIST
39513: LIST
39514: PUSH
39515: LD_VAR 0 12
39519: ARRAY
39520: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
39521: LD_VAR 0 18
39525: NOT
39526: PUSH
39527: LD_INT 40
39529: PPUSH
39530: LD_VAR 0 16
39534: PPUSH
39535: CALL_OW 321
39539: PUSH
39540: LD_INT 2
39542: EQUAL
39543: AND
39544: PUSH
39545: LD_INT 7
39547: PUSH
39548: LD_VAR 0 5
39552: IN
39553: PUSH
39554: LD_INT 28
39556: PUSH
39557: LD_VAR 0 5
39561: IN
39562: OR
39563: PUSH
39564: LD_INT 45
39566: PUSH
39567: LD_VAR 0 5
39571: IN
39572: OR
39573: AND
39574: IFFALSE 39828
// begin hex := GetHexInfo ( x , y ) ;
39576: LD_ADDR_VAR 0 4
39580: PUSH
39581: LD_VAR 0 10
39585: PPUSH
39586: LD_VAR 0 11
39590: PPUSH
39591: CALL_OW 546
39595: ST_TO_ADDR
// if hex [ 1 ] then
39596: LD_VAR 0 4
39600: PUSH
39601: LD_INT 1
39603: ARRAY
39604: IFFALSE 39608
// exit ;
39606: GO 40011
// height := hex [ 2 ] ;
39608: LD_ADDR_VAR 0 15
39612: PUSH
39613: LD_VAR 0 4
39617: PUSH
39618: LD_INT 2
39620: ARRAY
39621: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
39622: LD_ADDR_VAR 0 14
39626: PUSH
39627: LD_INT 0
39629: PUSH
39630: LD_INT 2
39632: PUSH
39633: LD_INT 3
39635: PUSH
39636: LD_INT 5
39638: PUSH
39639: EMPTY
39640: LIST
39641: LIST
39642: LIST
39643: LIST
39644: ST_TO_ADDR
// for i in tmp do
39645: LD_ADDR_VAR 0 8
39649: PUSH
39650: LD_VAR 0 14
39654: PUSH
39655: FOR_IN
39656: IFFALSE 39826
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
39658: LD_ADDR_VAR 0 9
39662: PUSH
39663: LD_VAR 0 10
39667: PPUSH
39668: LD_VAR 0 8
39672: PPUSH
39673: LD_INT 5
39675: PPUSH
39676: CALL_OW 272
39680: PUSH
39681: LD_VAR 0 11
39685: PPUSH
39686: LD_VAR 0 8
39690: PPUSH
39691: LD_INT 5
39693: PPUSH
39694: CALL_OW 273
39698: PUSH
39699: EMPTY
39700: LIST
39701: LIST
39702: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
39703: LD_VAR 0 9
39707: PUSH
39708: LD_INT 1
39710: ARRAY
39711: PPUSH
39712: LD_VAR 0 9
39716: PUSH
39717: LD_INT 2
39719: ARRAY
39720: PPUSH
39721: CALL_OW 488
39725: IFFALSE 39824
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
39727: LD_ADDR_VAR 0 4
39731: PUSH
39732: LD_VAR 0 9
39736: PUSH
39737: LD_INT 1
39739: ARRAY
39740: PPUSH
39741: LD_VAR 0 9
39745: PUSH
39746: LD_INT 2
39748: ARRAY
39749: PPUSH
39750: CALL_OW 546
39754: ST_TO_ADDR
// if hex [ 1 ] then
39755: LD_VAR 0 4
39759: PUSH
39760: LD_INT 1
39762: ARRAY
39763: IFFALSE 39767
// continue ;
39765: GO 39655
// h := hex [ 2 ] ;
39767: LD_ADDR_VAR 0 13
39771: PUSH
39772: LD_VAR 0 4
39776: PUSH
39777: LD_INT 2
39779: ARRAY
39780: ST_TO_ADDR
// if h + 7 < height then
39781: LD_VAR 0 13
39785: PUSH
39786: LD_INT 7
39788: PLUS
39789: PUSH
39790: LD_VAR 0 15
39794: LESS
39795: IFFALSE 39824
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
39797: LD_ADDR_VAR 0 18
39801: PUSH
39802: LD_INT 7
39804: PUSH
39805: LD_INT 28
39807: PUSH
39808: LD_INT 45
39810: PUSH
39811: EMPTY
39812: LIST
39813: LIST
39814: LIST
39815: PUSH
39816: LD_VAR 0 12
39820: ARRAY
39821: ST_TO_ADDR
// break ;
39822: GO 39826
// end ; end ; end ;
39824: GO 39655
39826: POP
39827: POP
// end ; if not weapon then
39828: LD_VAR 0 18
39832: NOT
39833: IFFALSE 39893
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
39835: LD_ADDR_VAR 0 5
39839: PUSH
39840: LD_VAR 0 5
39844: PUSH
39845: LD_INT 11
39847: PUSH
39848: LD_INT 30
39850: PUSH
39851: LD_INT 49
39853: PUSH
39854: EMPTY
39855: LIST
39856: LIST
39857: LIST
39858: DIFF
39859: ST_TO_ADDR
// if not list then
39860: LD_VAR 0 5
39864: NOT
39865: IFFALSE 39869
// exit ;
39867: GO 40011
// weapon := list [ rand ( 1 , list ) ] ;
39869: LD_ADDR_VAR 0 18
39873: PUSH
39874: LD_VAR 0 5
39878: PUSH
39879: LD_INT 1
39881: PPUSH
39882: LD_VAR 0 5
39886: PPUSH
39887: CALL_OW 12
39891: ARRAY
39892: ST_TO_ADDR
// end ; if weapon then
39893: LD_VAR 0 18
39897: IFFALSE 40011
// begin tmp := CostOfWeapon ( weapon ) ;
39899: LD_ADDR_VAR 0 14
39903: PUSH
39904: LD_VAR 0 18
39908: PPUSH
39909: CALL_OW 451
39913: ST_TO_ADDR
// j := GetBase ( tower ) ;
39914: LD_ADDR_VAR 0 9
39918: PUSH
39919: LD_VAR 0 1
39923: PPUSH
39924: CALL_OW 274
39928: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
39929: LD_VAR 0 9
39933: PPUSH
39934: LD_INT 1
39936: PPUSH
39937: CALL_OW 275
39941: PUSH
39942: LD_VAR 0 14
39946: PUSH
39947: LD_INT 1
39949: ARRAY
39950: GREATEREQUAL
39951: PUSH
39952: LD_VAR 0 9
39956: PPUSH
39957: LD_INT 2
39959: PPUSH
39960: CALL_OW 275
39964: PUSH
39965: LD_VAR 0 14
39969: PUSH
39970: LD_INT 2
39972: ARRAY
39973: GREATEREQUAL
39974: AND
39975: PUSH
39976: LD_VAR 0 9
39980: PPUSH
39981: LD_INT 3
39983: PPUSH
39984: CALL_OW 275
39988: PUSH
39989: LD_VAR 0 14
39993: PUSH
39994: LD_INT 3
39996: ARRAY
39997: GREATEREQUAL
39998: AND
39999: IFFALSE 40011
// result := weapon ;
40001: LD_ADDR_VAR 0 3
40005: PUSH
40006: LD_VAR 0 18
40010: ST_TO_ADDR
// end ; end ;
40011: LD_VAR 0 3
40015: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
40016: LD_INT 0
40018: PPUSH
40019: PPUSH
// result := true ;
40020: LD_ADDR_VAR 0 3
40024: PUSH
40025: LD_INT 1
40027: ST_TO_ADDR
// if array1 = array2 then
40028: LD_VAR 0 1
40032: PUSH
40033: LD_VAR 0 2
40037: EQUAL
40038: IFFALSE 40098
// begin for i = 1 to array1 do
40040: LD_ADDR_VAR 0 4
40044: PUSH
40045: DOUBLE
40046: LD_INT 1
40048: DEC
40049: ST_TO_ADDR
40050: LD_VAR 0 1
40054: PUSH
40055: FOR_TO
40056: IFFALSE 40094
// if array1 [ i ] <> array2 [ i ] then
40058: LD_VAR 0 1
40062: PUSH
40063: LD_VAR 0 4
40067: ARRAY
40068: PUSH
40069: LD_VAR 0 2
40073: PUSH
40074: LD_VAR 0 4
40078: ARRAY
40079: NONEQUAL
40080: IFFALSE 40092
// begin result := false ;
40082: LD_ADDR_VAR 0 3
40086: PUSH
40087: LD_INT 0
40089: ST_TO_ADDR
// break ;
40090: GO 40094
// end ;
40092: GO 40055
40094: POP
40095: POP
// end else
40096: GO 40106
// result := false ;
40098: LD_ADDR_VAR 0 3
40102: PUSH
40103: LD_INT 0
40105: ST_TO_ADDR
// end ;
40106: LD_VAR 0 3
40110: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
40111: LD_INT 0
40113: PPUSH
40114: PPUSH
// if not array1 or not array2 then
40115: LD_VAR 0 1
40119: NOT
40120: PUSH
40121: LD_VAR 0 2
40125: NOT
40126: OR
40127: IFFALSE 40131
// exit ;
40129: GO 40195
// result := true ;
40131: LD_ADDR_VAR 0 3
40135: PUSH
40136: LD_INT 1
40138: ST_TO_ADDR
// for i = 1 to array1 do
40139: LD_ADDR_VAR 0 4
40143: PUSH
40144: DOUBLE
40145: LD_INT 1
40147: DEC
40148: ST_TO_ADDR
40149: LD_VAR 0 1
40153: PUSH
40154: FOR_TO
40155: IFFALSE 40193
// if array1 [ i ] <> array2 [ i ] then
40157: LD_VAR 0 1
40161: PUSH
40162: LD_VAR 0 4
40166: ARRAY
40167: PUSH
40168: LD_VAR 0 2
40172: PUSH
40173: LD_VAR 0 4
40177: ARRAY
40178: NONEQUAL
40179: IFFALSE 40191
// begin result := false ;
40181: LD_ADDR_VAR 0 3
40185: PUSH
40186: LD_INT 0
40188: ST_TO_ADDR
// break ;
40189: GO 40193
// end ;
40191: GO 40154
40193: POP
40194: POP
// end ;
40195: LD_VAR 0 3
40199: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
40200: LD_INT 0
40202: PPUSH
40203: PPUSH
40204: PPUSH
// pom := GetBase ( fac ) ;
40205: LD_ADDR_VAR 0 5
40209: PUSH
40210: LD_VAR 0 1
40214: PPUSH
40215: CALL_OW 274
40219: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
40220: LD_ADDR_VAR 0 4
40224: PUSH
40225: LD_VAR 0 2
40229: PUSH
40230: LD_INT 1
40232: ARRAY
40233: PPUSH
40234: LD_VAR 0 2
40238: PUSH
40239: LD_INT 2
40241: ARRAY
40242: PPUSH
40243: LD_VAR 0 2
40247: PUSH
40248: LD_INT 3
40250: ARRAY
40251: PPUSH
40252: LD_VAR 0 2
40256: PUSH
40257: LD_INT 4
40259: ARRAY
40260: PPUSH
40261: CALL_OW 449
40265: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40266: LD_ADDR_VAR 0 3
40270: PUSH
40271: LD_VAR 0 5
40275: PPUSH
40276: LD_INT 1
40278: PPUSH
40279: CALL_OW 275
40283: PUSH
40284: LD_VAR 0 4
40288: PUSH
40289: LD_INT 1
40291: ARRAY
40292: GREATEREQUAL
40293: PUSH
40294: LD_VAR 0 5
40298: PPUSH
40299: LD_INT 2
40301: PPUSH
40302: CALL_OW 275
40306: PUSH
40307: LD_VAR 0 4
40311: PUSH
40312: LD_INT 2
40314: ARRAY
40315: GREATEREQUAL
40316: AND
40317: PUSH
40318: LD_VAR 0 5
40322: PPUSH
40323: LD_INT 3
40325: PPUSH
40326: CALL_OW 275
40330: PUSH
40331: LD_VAR 0 4
40335: PUSH
40336: LD_INT 3
40338: ARRAY
40339: GREATEREQUAL
40340: AND
40341: ST_TO_ADDR
// end ;
40342: LD_VAR 0 3
40346: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
40347: LD_INT 0
40349: PPUSH
40350: PPUSH
40351: PPUSH
40352: PPUSH
// pom := GetBase ( building ) ;
40353: LD_ADDR_VAR 0 3
40357: PUSH
40358: LD_VAR 0 1
40362: PPUSH
40363: CALL_OW 274
40367: ST_TO_ADDR
// if not pom then
40368: LD_VAR 0 3
40372: NOT
40373: IFFALSE 40377
// exit ;
40375: GO 40547
// btype := GetBType ( building ) ;
40377: LD_ADDR_VAR 0 5
40381: PUSH
40382: LD_VAR 0 1
40386: PPUSH
40387: CALL_OW 266
40391: ST_TO_ADDR
// if btype = b_armoury then
40392: LD_VAR 0 5
40396: PUSH
40397: LD_INT 4
40399: EQUAL
40400: IFFALSE 40410
// btype := b_barracks ;
40402: LD_ADDR_VAR 0 5
40406: PUSH
40407: LD_INT 5
40409: ST_TO_ADDR
// if btype = b_depot then
40410: LD_VAR 0 5
40414: PUSH
40415: LD_INT 0
40417: EQUAL
40418: IFFALSE 40428
// btype := b_warehouse ;
40420: LD_ADDR_VAR 0 5
40424: PUSH
40425: LD_INT 1
40427: ST_TO_ADDR
// if btype = b_workshop then
40428: LD_VAR 0 5
40432: PUSH
40433: LD_INT 2
40435: EQUAL
40436: IFFALSE 40446
// btype := b_factory ;
40438: LD_ADDR_VAR 0 5
40442: PUSH
40443: LD_INT 3
40445: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
40446: LD_ADDR_VAR 0 4
40450: PUSH
40451: LD_VAR 0 5
40455: PPUSH
40456: LD_VAR 0 1
40460: PPUSH
40461: CALL_OW 248
40465: PPUSH
40466: CALL_OW 450
40470: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40471: LD_ADDR_VAR 0 2
40475: PUSH
40476: LD_VAR 0 3
40480: PPUSH
40481: LD_INT 1
40483: PPUSH
40484: CALL_OW 275
40488: PUSH
40489: LD_VAR 0 4
40493: PUSH
40494: LD_INT 1
40496: ARRAY
40497: GREATEREQUAL
40498: PUSH
40499: LD_VAR 0 3
40503: PPUSH
40504: LD_INT 2
40506: PPUSH
40507: CALL_OW 275
40511: PUSH
40512: LD_VAR 0 4
40516: PUSH
40517: LD_INT 2
40519: ARRAY
40520: GREATEREQUAL
40521: AND
40522: PUSH
40523: LD_VAR 0 3
40527: PPUSH
40528: LD_INT 3
40530: PPUSH
40531: CALL_OW 275
40535: PUSH
40536: LD_VAR 0 4
40540: PUSH
40541: LD_INT 3
40543: ARRAY
40544: GREATEREQUAL
40545: AND
40546: ST_TO_ADDR
// end ;
40547: LD_VAR 0 2
40551: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
40552: LD_INT 0
40554: PPUSH
40555: PPUSH
40556: PPUSH
// pom := GetBase ( building ) ;
40557: LD_ADDR_VAR 0 4
40561: PUSH
40562: LD_VAR 0 1
40566: PPUSH
40567: CALL_OW 274
40571: ST_TO_ADDR
// if not pom then
40572: LD_VAR 0 4
40576: NOT
40577: IFFALSE 40581
// exit ;
40579: GO 40682
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
40581: LD_ADDR_VAR 0 5
40585: PUSH
40586: LD_VAR 0 2
40590: PPUSH
40591: LD_VAR 0 1
40595: PPUSH
40596: CALL_OW 248
40600: PPUSH
40601: CALL_OW 450
40605: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40606: LD_ADDR_VAR 0 3
40610: PUSH
40611: LD_VAR 0 4
40615: PPUSH
40616: LD_INT 1
40618: PPUSH
40619: CALL_OW 275
40623: PUSH
40624: LD_VAR 0 5
40628: PUSH
40629: LD_INT 1
40631: ARRAY
40632: GREATEREQUAL
40633: PUSH
40634: LD_VAR 0 4
40638: PPUSH
40639: LD_INT 2
40641: PPUSH
40642: CALL_OW 275
40646: PUSH
40647: LD_VAR 0 5
40651: PUSH
40652: LD_INT 2
40654: ARRAY
40655: GREATEREQUAL
40656: AND
40657: PUSH
40658: LD_VAR 0 4
40662: PPUSH
40663: LD_INT 3
40665: PPUSH
40666: CALL_OW 275
40670: PUSH
40671: LD_VAR 0 5
40675: PUSH
40676: LD_INT 3
40678: ARRAY
40679: GREATEREQUAL
40680: AND
40681: ST_TO_ADDR
// end ;
40682: LD_VAR 0 3
40686: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
40687: LD_INT 0
40689: PPUSH
40690: PPUSH
40691: PPUSH
40692: PPUSH
40693: PPUSH
40694: PPUSH
40695: PPUSH
40696: PPUSH
40697: PPUSH
40698: PPUSH
40699: PPUSH
// result := false ;
40700: LD_ADDR_VAR 0 8
40704: PUSH
40705: LD_INT 0
40707: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
40708: LD_VAR 0 5
40712: NOT
40713: PUSH
40714: LD_VAR 0 1
40718: NOT
40719: OR
40720: PUSH
40721: LD_VAR 0 2
40725: NOT
40726: OR
40727: PUSH
40728: LD_VAR 0 3
40732: NOT
40733: OR
40734: IFFALSE 40738
// exit ;
40736: GO 41552
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
40738: LD_ADDR_VAR 0 14
40742: PUSH
40743: LD_VAR 0 1
40747: PPUSH
40748: LD_VAR 0 2
40752: PPUSH
40753: LD_VAR 0 3
40757: PPUSH
40758: LD_VAR 0 4
40762: PPUSH
40763: LD_VAR 0 5
40767: PUSH
40768: LD_INT 1
40770: ARRAY
40771: PPUSH
40772: CALL_OW 248
40776: PPUSH
40777: LD_INT 0
40779: PPUSH
40780: CALL 42785 0 6
40784: ST_TO_ADDR
// if not hexes then
40785: LD_VAR 0 14
40789: NOT
40790: IFFALSE 40794
// exit ;
40792: GO 41552
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
40794: LD_ADDR_VAR 0 17
40798: PUSH
40799: LD_VAR 0 5
40803: PPUSH
40804: LD_INT 22
40806: PUSH
40807: LD_VAR 0 13
40811: PPUSH
40812: CALL_OW 255
40816: PUSH
40817: EMPTY
40818: LIST
40819: LIST
40820: PUSH
40821: LD_INT 2
40823: PUSH
40824: LD_INT 30
40826: PUSH
40827: LD_INT 0
40829: PUSH
40830: EMPTY
40831: LIST
40832: LIST
40833: PUSH
40834: LD_INT 30
40836: PUSH
40837: LD_INT 1
40839: PUSH
40840: EMPTY
40841: LIST
40842: LIST
40843: PUSH
40844: EMPTY
40845: LIST
40846: LIST
40847: LIST
40848: PUSH
40849: EMPTY
40850: LIST
40851: LIST
40852: PPUSH
40853: CALL_OW 72
40857: ST_TO_ADDR
// for i = 1 to hexes do
40858: LD_ADDR_VAR 0 9
40862: PUSH
40863: DOUBLE
40864: LD_INT 1
40866: DEC
40867: ST_TO_ADDR
40868: LD_VAR 0 14
40872: PUSH
40873: FOR_TO
40874: IFFALSE 41550
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
40876: LD_ADDR_VAR 0 13
40880: PUSH
40881: LD_VAR 0 14
40885: PUSH
40886: LD_VAR 0 9
40890: ARRAY
40891: PUSH
40892: LD_INT 1
40894: ARRAY
40895: PPUSH
40896: LD_VAR 0 14
40900: PUSH
40901: LD_VAR 0 9
40905: ARRAY
40906: PUSH
40907: LD_INT 2
40909: ARRAY
40910: PPUSH
40911: CALL_OW 428
40915: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
40916: LD_VAR 0 14
40920: PUSH
40921: LD_VAR 0 9
40925: ARRAY
40926: PUSH
40927: LD_INT 1
40929: ARRAY
40930: PPUSH
40931: LD_VAR 0 14
40935: PUSH
40936: LD_VAR 0 9
40940: ARRAY
40941: PUSH
40942: LD_INT 2
40944: ARRAY
40945: PPUSH
40946: CALL_OW 351
40950: PUSH
40951: LD_VAR 0 14
40955: PUSH
40956: LD_VAR 0 9
40960: ARRAY
40961: PUSH
40962: LD_INT 1
40964: ARRAY
40965: PPUSH
40966: LD_VAR 0 14
40970: PUSH
40971: LD_VAR 0 9
40975: ARRAY
40976: PUSH
40977: LD_INT 2
40979: ARRAY
40980: PPUSH
40981: CALL_OW 488
40985: NOT
40986: OR
40987: PUSH
40988: LD_VAR 0 13
40992: PPUSH
40993: CALL_OW 247
40997: PUSH
40998: LD_INT 3
41000: EQUAL
41001: OR
41002: IFFALSE 41008
// exit ;
41004: POP
41005: POP
41006: GO 41552
// if not tmp then
41008: LD_VAR 0 13
41012: NOT
41013: IFFALSE 41017
// continue ;
41015: GO 40873
// result := true ;
41017: LD_ADDR_VAR 0 8
41021: PUSH
41022: LD_INT 1
41024: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
41025: LD_VAR 0 6
41029: PUSH
41030: LD_VAR 0 13
41034: PPUSH
41035: CALL_OW 247
41039: PUSH
41040: LD_INT 2
41042: EQUAL
41043: AND
41044: PUSH
41045: LD_VAR 0 13
41049: PPUSH
41050: CALL_OW 263
41054: PUSH
41055: LD_INT 1
41057: EQUAL
41058: AND
41059: IFFALSE 41223
// begin if IsDrivenBy ( tmp ) then
41061: LD_VAR 0 13
41065: PPUSH
41066: CALL_OW 311
41070: IFFALSE 41074
// continue ;
41072: GO 40873
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
41074: LD_VAR 0 6
41078: PPUSH
41079: LD_INT 3
41081: PUSH
41082: LD_INT 60
41084: PUSH
41085: EMPTY
41086: LIST
41087: PUSH
41088: EMPTY
41089: LIST
41090: LIST
41091: PUSH
41092: LD_INT 3
41094: PUSH
41095: LD_INT 55
41097: PUSH
41098: EMPTY
41099: LIST
41100: PUSH
41101: EMPTY
41102: LIST
41103: LIST
41104: PUSH
41105: EMPTY
41106: LIST
41107: LIST
41108: PPUSH
41109: CALL_OW 72
41113: IFFALSE 41221
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
41115: LD_ADDR_VAR 0 18
41119: PUSH
41120: LD_VAR 0 6
41124: PPUSH
41125: LD_INT 3
41127: PUSH
41128: LD_INT 60
41130: PUSH
41131: EMPTY
41132: LIST
41133: PUSH
41134: EMPTY
41135: LIST
41136: LIST
41137: PUSH
41138: LD_INT 3
41140: PUSH
41141: LD_INT 55
41143: PUSH
41144: EMPTY
41145: LIST
41146: PUSH
41147: EMPTY
41148: LIST
41149: LIST
41150: PUSH
41151: EMPTY
41152: LIST
41153: LIST
41154: PPUSH
41155: CALL_OW 72
41159: PUSH
41160: LD_INT 1
41162: ARRAY
41163: ST_TO_ADDR
// if IsInUnit ( driver ) then
41164: LD_VAR 0 18
41168: PPUSH
41169: CALL_OW 310
41173: IFFALSE 41184
// ComExit ( driver ) ;
41175: LD_VAR 0 18
41179: PPUSH
41180: CALL 66565 0 1
// AddComEnterUnit ( driver , tmp ) ;
41184: LD_VAR 0 18
41188: PPUSH
41189: LD_VAR 0 13
41193: PPUSH
41194: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
41198: LD_VAR 0 18
41202: PPUSH
41203: LD_VAR 0 7
41207: PPUSH
41208: CALL_OW 173
// AddComExitVehicle ( driver ) ;
41212: LD_VAR 0 18
41216: PPUSH
41217: CALL_OW 181
// end ; continue ;
41221: GO 40873
// end ; if not cleaners or not tmp in cleaners then
41223: LD_VAR 0 6
41227: NOT
41228: PUSH
41229: LD_VAR 0 13
41233: PUSH
41234: LD_VAR 0 6
41238: IN
41239: NOT
41240: OR
41241: IFFALSE 41548
// begin if dep then
41243: LD_VAR 0 17
41247: IFFALSE 41383
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
41249: LD_ADDR_VAR 0 16
41253: PUSH
41254: LD_VAR 0 17
41258: PUSH
41259: LD_INT 1
41261: ARRAY
41262: PPUSH
41263: CALL_OW 250
41267: PPUSH
41268: LD_VAR 0 17
41272: PUSH
41273: LD_INT 1
41275: ARRAY
41276: PPUSH
41277: CALL_OW 254
41281: PPUSH
41282: LD_INT 5
41284: PPUSH
41285: CALL_OW 272
41289: PUSH
41290: LD_VAR 0 17
41294: PUSH
41295: LD_INT 1
41297: ARRAY
41298: PPUSH
41299: CALL_OW 251
41303: PPUSH
41304: LD_VAR 0 17
41308: PUSH
41309: LD_INT 1
41311: ARRAY
41312: PPUSH
41313: CALL_OW 254
41317: PPUSH
41318: LD_INT 5
41320: PPUSH
41321: CALL_OW 273
41325: PUSH
41326: EMPTY
41327: LIST
41328: LIST
41329: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
41330: LD_VAR 0 16
41334: PUSH
41335: LD_INT 1
41337: ARRAY
41338: PPUSH
41339: LD_VAR 0 16
41343: PUSH
41344: LD_INT 2
41346: ARRAY
41347: PPUSH
41348: CALL_OW 488
41352: IFFALSE 41383
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
41354: LD_VAR 0 13
41358: PPUSH
41359: LD_VAR 0 16
41363: PUSH
41364: LD_INT 1
41366: ARRAY
41367: PPUSH
41368: LD_VAR 0 16
41372: PUSH
41373: LD_INT 2
41375: ARRAY
41376: PPUSH
41377: CALL_OW 111
// continue ;
41381: GO 40873
// end ; end ; r := GetDir ( tmp ) ;
41383: LD_ADDR_VAR 0 15
41387: PUSH
41388: LD_VAR 0 13
41392: PPUSH
41393: CALL_OW 254
41397: ST_TO_ADDR
// if r = 5 then
41398: LD_VAR 0 15
41402: PUSH
41403: LD_INT 5
41405: EQUAL
41406: IFFALSE 41416
// r := 0 ;
41408: LD_ADDR_VAR 0 15
41412: PUSH
41413: LD_INT 0
41415: ST_TO_ADDR
// for j = r to 5 do
41416: LD_ADDR_VAR 0 10
41420: PUSH
41421: DOUBLE
41422: LD_VAR 0 15
41426: DEC
41427: ST_TO_ADDR
41428: LD_INT 5
41430: PUSH
41431: FOR_TO
41432: IFFALSE 41546
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
41434: LD_ADDR_VAR 0 11
41438: PUSH
41439: LD_VAR 0 13
41443: PPUSH
41444: CALL_OW 250
41448: PPUSH
41449: LD_VAR 0 10
41453: PPUSH
41454: LD_INT 2
41456: PPUSH
41457: CALL_OW 272
41461: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
41462: LD_ADDR_VAR 0 12
41466: PUSH
41467: LD_VAR 0 13
41471: PPUSH
41472: CALL_OW 251
41476: PPUSH
41477: LD_VAR 0 10
41481: PPUSH
41482: LD_INT 2
41484: PPUSH
41485: CALL_OW 273
41489: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
41490: LD_VAR 0 11
41494: PPUSH
41495: LD_VAR 0 12
41499: PPUSH
41500: CALL_OW 488
41504: PUSH
41505: LD_VAR 0 11
41509: PPUSH
41510: LD_VAR 0 12
41514: PPUSH
41515: CALL_OW 428
41519: NOT
41520: AND
41521: IFFALSE 41544
// begin ComMoveXY ( tmp , _x , _y ) ;
41523: LD_VAR 0 13
41527: PPUSH
41528: LD_VAR 0 11
41532: PPUSH
41533: LD_VAR 0 12
41537: PPUSH
41538: CALL_OW 111
// break ;
41542: GO 41546
// end ; end ;
41544: GO 41431
41546: POP
41547: POP
// end ; end ;
41548: GO 40873
41550: POP
41551: POP
// end ;
41552: LD_VAR 0 8
41556: RET
// export function BuildingTechInvented ( side , btype ) ; begin
41557: LD_INT 0
41559: PPUSH
// result := true ;
41560: LD_ADDR_VAR 0 3
41564: PUSH
41565: LD_INT 1
41567: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
41568: LD_VAR 0 2
41572: PUSH
41573: LD_INT 24
41575: DOUBLE
41576: EQUAL
41577: IFTRUE 41587
41579: LD_INT 33
41581: DOUBLE
41582: EQUAL
41583: IFTRUE 41587
41585: GO 41612
41587: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
41588: LD_ADDR_VAR 0 3
41592: PUSH
41593: LD_INT 32
41595: PPUSH
41596: LD_VAR 0 1
41600: PPUSH
41601: CALL_OW 321
41605: PUSH
41606: LD_INT 2
41608: EQUAL
41609: ST_TO_ADDR
41610: GO 41928
41612: LD_INT 20
41614: DOUBLE
41615: EQUAL
41616: IFTRUE 41620
41618: GO 41645
41620: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
41621: LD_ADDR_VAR 0 3
41625: PUSH
41626: LD_INT 6
41628: PPUSH
41629: LD_VAR 0 1
41633: PPUSH
41634: CALL_OW 321
41638: PUSH
41639: LD_INT 2
41641: EQUAL
41642: ST_TO_ADDR
41643: GO 41928
41645: LD_INT 22
41647: DOUBLE
41648: EQUAL
41649: IFTRUE 41659
41651: LD_INT 36
41653: DOUBLE
41654: EQUAL
41655: IFTRUE 41659
41657: GO 41684
41659: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
41660: LD_ADDR_VAR 0 3
41664: PUSH
41665: LD_INT 15
41667: PPUSH
41668: LD_VAR 0 1
41672: PPUSH
41673: CALL_OW 321
41677: PUSH
41678: LD_INT 2
41680: EQUAL
41681: ST_TO_ADDR
41682: GO 41928
41684: LD_INT 30
41686: DOUBLE
41687: EQUAL
41688: IFTRUE 41692
41690: GO 41717
41692: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
41693: LD_ADDR_VAR 0 3
41697: PUSH
41698: LD_INT 20
41700: PPUSH
41701: LD_VAR 0 1
41705: PPUSH
41706: CALL_OW 321
41710: PUSH
41711: LD_INT 2
41713: EQUAL
41714: ST_TO_ADDR
41715: GO 41928
41717: LD_INT 28
41719: DOUBLE
41720: EQUAL
41721: IFTRUE 41731
41723: LD_INT 21
41725: DOUBLE
41726: EQUAL
41727: IFTRUE 41731
41729: GO 41756
41731: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
41732: LD_ADDR_VAR 0 3
41736: PUSH
41737: LD_INT 21
41739: PPUSH
41740: LD_VAR 0 1
41744: PPUSH
41745: CALL_OW 321
41749: PUSH
41750: LD_INT 2
41752: EQUAL
41753: ST_TO_ADDR
41754: GO 41928
41756: LD_INT 16
41758: DOUBLE
41759: EQUAL
41760: IFTRUE 41764
41762: GO 41789
41764: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
41765: LD_ADDR_VAR 0 3
41769: PUSH
41770: LD_INT 84
41772: PPUSH
41773: LD_VAR 0 1
41777: PPUSH
41778: CALL_OW 321
41782: PUSH
41783: LD_INT 2
41785: EQUAL
41786: ST_TO_ADDR
41787: GO 41928
41789: LD_INT 19
41791: DOUBLE
41792: EQUAL
41793: IFTRUE 41803
41795: LD_INT 23
41797: DOUBLE
41798: EQUAL
41799: IFTRUE 41803
41801: GO 41828
41803: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
41804: LD_ADDR_VAR 0 3
41808: PUSH
41809: LD_INT 83
41811: PPUSH
41812: LD_VAR 0 1
41816: PPUSH
41817: CALL_OW 321
41821: PUSH
41822: LD_INT 2
41824: EQUAL
41825: ST_TO_ADDR
41826: GO 41928
41828: LD_INT 17
41830: DOUBLE
41831: EQUAL
41832: IFTRUE 41836
41834: GO 41861
41836: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
41837: LD_ADDR_VAR 0 3
41841: PUSH
41842: LD_INT 39
41844: PPUSH
41845: LD_VAR 0 1
41849: PPUSH
41850: CALL_OW 321
41854: PUSH
41855: LD_INT 2
41857: EQUAL
41858: ST_TO_ADDR
41859: GO 41928
41861: LD_INT 18
41863: DOUBLE
41864: EQUAL
41865: IFTRUE 41869
41867: GO 41894
41869: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
41870: LD_ADDR_VAR 0 3
41874: PUSH
41875: LD_INT 40
41877: PPUSH
41878: LD_VAR 0 1
41882: PPUSH
41883: CALL_OW 321
41887: PUSH
41888: LD_INT 2
41890: EQUAL
41891: ST_TO_ADDR
41892: GO 41928
41894: LD_INT 27
41896: DOUBLE
41897: EQUAL
41898: IFTRUE 41902
41900: GO 41927
41902: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
41903: LD_ADDR_VAR 0 3
41907: PUSH
41908: LD_INT 35
41910: PPUSH
41911: LD_VAR 0 1
41915: PPUSH
41916: CALL_OW 321
41920: PUSH
41921: LD_INT 2
41923: EQUAL
41924: ST_TO_ADDR
41925: GO 41928
41927: POP
// end ;
41928: LD_VAR 0 3
41932: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
41933: LD_INT 0
41935: PPUSH
41936: PPUSH
41937: PPUSH
41938: PPUSH
41939: PPUSH
41940: PPUSH
41941: PPUSH
41942: PPUSH
41943: PPUSH
41944: PPUSH
41945: PPUSH
// result := false ;
41946: LD_ADDR_VAR 0 6
41950: PUSH
41951: LD_INT 0
41953: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
41954: LD_VAR 0 1
41958: NOT
41959: PUSH
41960: LD_VAR 0 1
41964: PPUSH
41965: CALL_OW 266
41969: PUSH
41970: LD_INT 0
41972: PUSH
41973: LD_INT 1
41975: PUSH
41976: EMPTY
41977: LIST
41978: LIST
41979: IN
41980: NOT
41981: OR
41982: PUSH
41983: LD_VAR 0 2
41987: NOT
41988: OR
41989: PUSH
41990: LD_VAR 0 5
41994: PUSH
41995: LD_INT 0
41997: PUSH
41998: LD_INT 1
42000: PUSH
42001: LD_INT 2
42003: PUSH
42004: LD_INT 3
42006: PUSH
42007: LD_INT 4
42009: PUSH
42010: LD_INT 5
42012: PUSH
42013: EMPTY
42014: LIST
42015: LIST
42016: LIST
42017: LIST
42018: LIST
42019: LIST
42020: IN
42021: NOT
42022: OR
42023: PUSH
42024: LD_VAR 0 3
42028: PPUSH
42029: LD_VAR 0 4
42033: PPUSH
42034: CALL_OW 488
42038: NOT
42039: OR
42040: IFFALSE 42044
// exit ;
42042: GO 42780
// side := GetSide ( depot ) ;
42044: LD_ADDR_VAR 0 9
42048: PUSH
42049: LD_VAR 0 1
42053: PPUSH
42054: CALL_OW 255
42058: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
42059: LD_VAR 0 9
42063: PPUSH
42064: LD_VAR 0 2
42068: PPUSH
42069: CALL 41557 0 2
42073: NOT
42074: IFFALSE 42078
// exit ;
42076: GO 42780
// pom := GetBase ( depot ) ;
42078: LD_ADDR_VAR 0 10
42082: PUSH
42083: LD_VAR 0 1
42087: PPUSH
42088: CALL_OW 274
42092: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
42093: LD_ADDR_VAR 0 11
42097: PUSH
42098: LD_VAR 0 2
42102: PPUSH
42103: LD_VAR 0 1
42107: PPUSH
42108: CALL_OW 248
42112: PPUSH
42113: CALL_OW 450
42117: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
42118: LD_VAR 0 10
42122: PPUSH
42123: LD_INT 1
42125: PPUSH
42126: CALL_OW 275
42130: PUSH
42131: LD_VAR 0 11
42135: PUSH
42136: LD_INT 1
42138: ARRAY
42139: GREATEREQUAL
42140: PUSH
42141: LD_VAR 0 10
42145: PPUSH
42146: LD_INT 2
42148: PPUSH
42149: CALL_OW 275
42153: PUSH
42154: LD_VAR 0 11
42158: PUSH
42159: LD_INT 2
42161: ARRAY
42162: GREATEREQUAL
42163: AND
42164: PUSH
42165: LD_VAR 0 10
42169: PPUSH
42170: LD_INT 3
42172: PPUSH
42173: CALL_OW 275
42177: PUSH
42178: LD_VAR 0 11
42182: PUSH
42183: LD_INT 3
42185: ARRAY
42186: GREATEREQUAL
42187: AND
42188: NOT
42189: IFFALSE 42193
// exit ;
42191: GO 42780
// if GetBType ( depot ) = b_depot then
42193: LD_VAR 0 1
42197: PPUSH
42198: CALL_OW 266
42202: PUSH
42203: LD_INT 0
42205: EQUAL
42206: IFFALSE 42218
// dist := 28 else
42208: LD_ADDR_VAR 0 14
42212: PUSH
42213: LD_INT 28
42215: ST_TO_ADDR
42216: GO 42226
// dist := 36 ;
42218: LD_ADDR_VAR 0 14
42222: PUSH
42223: LD_INT 36
42225: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
42226: LD_VAR 0 1
42230: PPUSH
42231: LD_VAR 0 3
42235: PPUSH
42236: LD_VAR 0 4
42240: PPUSH
42241: CALL_OW 297
42245: PUSH
42246: LD_VAR 0 14
42250: GREATER
42251: IFFALSE 42255
// exit ;
42253: GO 42780
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
42255: LD_ADDR_VAR 0 12
42259: PUSH
42260: LD_VAR 0 2
42264: PPUSH
42265: LD_VAR 0 3
42269: PPUSH
42270: LD_VAR 0 4
42274: PPUSH
42275: LD_VAR 0 5
42279: PPUSH
42280: LD_VAR 0 1
42284: PPUSH
42285: CALL_OW 248
42289: PPUSH
42290: LD_INT 0
42292: PPUSH
42293: CALL 42785 0 6
42297: ST_TO_ADDR
// if not hexes then
42298: LD_VAR 0 12
42302: NOT
42303: IFFALSE 42307
// exit ;
42305: GO 42780
// hex := GetHexInfo ( x , y ) ;
42307: LD_ADDR_VAR 0 15
42311: PUSH
42312: LD_VAR 0 3
42316: PPUSH
42317: LD_VAR 0 4
42321: PPUSH
42322: CALL_OW 546
42326: ST_TO_ADDR
// if hex [ 1 ] then
42327: LD_VAR 0 15
42331: PUSH
42332: LD_INT 1
42334: ARRAY
42335: IFFALSE 42339
// exit ;
42337: GO 42780
// height := hex [ 2 ] ;
42339: LD_ADDR_VAR 0 13
42343: PUSH
42344: LD_VAR 0 15
42348: PUSH
42349: LD_INT 2
42351: ARRAY
42352: ST_TO_ADDR
// for i = 1 to hexes do
42353: LD_ADDR_VAR 0 7
42357: PUSH
42358: DOUBLE
42359: LD_INT 1
42361: DEC
42362: ST_TO_ADDR
42363: LD_VAR 0 12
42367: PUSH
42368: FOR_TO
42369: IFFALSE 42699
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
42371: LD_VAR 0 12
42375: PUSH
42376: LD_VAR 0 7
42380: ARRAY
42381: PUSH
42382: LD_INT 1
42384: ARRAY
42385: PPUSH
42386: LD_VAR 0 12
42390: PUSH
42391: LD_VAR 0 7
42395: ARRAY
42396: PUSH
42397: LD_INT 2
42399: ARRAY
42400: PPUSH
42401: CALL_OW 488
42405: NOT
42406: PUSH
42407: LD_VAR 0 12
42411: PUSH
42412: LD_VAR 0 7
42416: ARRAY
42417: PUSH
42418: LD_INT 1
42420: ARRAY
42421: PPUSH
42422: LD_VAR 0 12
42426: PUSH
42427: LD_VAR 0 7
42431: ARRAY
42432: PUSH
42433: LD_INT 2
42435: ARRAY
42436: PPUSH
42437: CALL_OW 428
42441: PUSH
42442: LD_INT 0
42444: GREATER
42445: OR
42446: PUSH
42447: LD_VAR 0 12
42451: PUSH
42452: LD_VAR 0 7
42456: ARRAY
42457: PUSH
42458: LD_INT 1
42460: ARRAY
42461: PPUSH
42462: LD_VAR 0 12
42466: PUSH
42467: LD_VAR 0 7
42471: ARRAY
42472: PUSH
42473: LD_INT 2
42475: ARRAY
42476: PPUSH
42477: CALL_OW 351
42481: OR
42482: IFFALSE 42488
// exit ;
42484: POP
42485: POP
42486: GO 42780
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42488: LD_ADDR_VAR 0 8
42492: PUSH
42493: LD_VAR 0 12
42497: PUSH
42498: LD_VAR 0 7
42502: ARRAY
42503: PUSH
42504: LD_INT 1
42506: ARRAY
42507: PPUSH
42508: LD_VAR 0 12
42512: PUSH
42513: LD_VAR 0 7
42517: ARRAY
42518: PUSH
42519: LD_INT 2
42521: ARRAY
42522: PPUSH
42523: CALL_OW 546
42527: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
42528: LD_VAR 0 8
42532: PUSH
42533: LD_INT 1
42535: ARRAY
42536: PUSH
42537: LD_VAR 0 8
42541: PUSH
42542: LD_INT 2
42544: ARRAY
42545: PUSH
42546: LD_VAR 0 13
42550: PUSH
42551: LD_INT 2
42553: PLUS
42554: GREATER
42555: OR
42556: PUSH
42557: LD_VAR 0 8
42561: PUSH
42562: LD_INT 2
42564: ARRAY
42565: PUSH
42566: LD_VAR 0 13
42570: PUSH
42571: LD_INT 2
42573: MINUS
42574: LESS
42575: OR
42576: PUSH
42577: LD_VAR 0 8
42581: PUSH
42582: LD_INT 3
42584: ARRAY
42585: PUSH
42586: LD_INT 0
42588: PUSH
42589: LD_INT 8
42591: PUSH
42592: LD_INT 9
42594: PUSH
42595: LD_INT 10
42597: PUSH
42598: LD_INT 11
42600: PUSH
42601: LD_INT 12
42603: PUSH
42604: LD_INT 13
42606: PUSH
42607: LD_INT 16
42609: PUSH
42610: LD_INT 17
42612: PUSH
42613: LD_INT 18
42615: PUSH
42616: LD_INT 19
42618: PUSH
42619: LD_INT 20
42621: PUSH
42622: LD_INT 21
42624: PUSH
42625: EMPTY
42626: LIST
42627: LIST
42628: LIST
42629: LIST
42630: LIST
42631: LIST
42632: LIST
42633: LIST
42634: LIST
42635: LIST
42636: LIST
42637: LIST
42638: LIST
42639: IN
42640: NOT
42641: OR
42642: PUSH
42643: LD_VAR 0 8
42647: PUSH
42648: LD_INT 5
42650: ARRAY
42651: NOT
42652: OR
42653: PUSH
42654: LD_VAR 0 8
42658: PUSH
42659: LD_INT 6
42661: ARRAY
42662: PUSH
42663: LD_INT 1
42665: PUSH
42666: LD_INT 2
42668: PUSH
42669: LD_INT 7
42671: PUSH
42672: LD_INT 9
42674: PUSH
42675: LD_INT 10
42677: PUSH
42678: LD_INT 11
42680: PUSH
42681: EMPTY
42682: LIST
42683: LIST
42684: LIST
42685: LIST
42686: LIST
42687: LIST
42688: IN
42689: NOT
42690: OR
42691: IFFALSE 42697
// exit ;
42693: POP
42694: POP
42695: GO 42780
// end ;
42697: GO 42368
42699: POP
42700: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
42701: LD_VAR 0 9
42705: PPUSH
42706: LD_VAR 0 3
42710: PPUSH
42711: LD_VAR 0 4
42715: PPUSH
42716: LD_INT 20
42718: PPUSH
42719: CALL 34732 0 4
42723: PUSH
42724: LD_INT 4
42726: ARRAY
42727: IFFALSE 42731
// exit ;
42729: GO 42780
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
42731: LD_VAR 0 2
42735: PUSH
42736: LD_INT 29
42738: PUSH
42739: LD_INT 30
42741: PUSH
42742: EMPTY
42743: LIST
42744: LIST
42745: IN
42746: PUSH
42747: LD_VAR 0 3
42751: PPUSH
42752: LD_VAR 0 4
42756: PPUSH
42757: LD_VAR 0 9
42761: PPUSH
42762: CALL_OW 440
42766: NOT
42767: AND
42768: IFFALSE 42772
// exit ;
42770: GO 42780
// result := true ;
42772: LD_ADDR_VAR 0 6
42776: PUSH
42777: LD_INT 1
42779: ST_TO_ADDR
// end ;
42780: LD_VAR 0 6
42784: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
42785: LD_INT 0
42787: PPUSH
42788: PPUSH
42789: PPUSH
42790: PPUSH
42791: PPUSH
42792: PPUSH
42793: PPUSH
42794: PPUSH
42795: PPUSH
42796: PPUSH
42797: PPUSH
42798: PPUSH
42799: PPUSH
42800: PPUSH
42801: PPUSH
42802: PPUSH
42803: PPUSH
42804: PPUSH
42805: PPUSH
42806: PPUSH
42807: PPUSH
42808: PPUSH
42809: PPUSH
42810: PPUSH
42811: PPUSH
42812: PPUSH
42813: PPUSH
42814: PPUSH
42815: PPUSH
42816: PPUSH
42817: PPUSH
42818: PPUSH
42819: PPUSH
42820: PPUSH
42821: PPUSH
42822: PPUSH
42823: PPUSH
42824: PPUSH
42825: PPUSH
42826: PPUSH
42827: PPUSH
42828: PPUSH
42829: PPUSH
42830: PPUSH
42831: PPUSH
42832: PPUSH
42833: PPUSH
42834: PPUSH
42835: PPUSH
42836: PPUSH
42837: PPUSH
42838: PPUSH
42839: PPUSH
42840: PPUSH
42841: PPUSH
42842: PPUSH
42843: PPUSH
42844: PPUSH
// result = [ ] ;
42845: LD_ADDR_VAR 0 7
42849: PUSH
42850: EMPTY
42851: ST_TO_ADDR
// temp_list = [ ] ;
42852: LD_ADDR_VAR 0 9
42856: PUSH
42857: EMPTY
42858: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
42859: LD_VAR 0 4
42863: PUSH
42864: LD_INT 0
42866: PUSH
42867: LD_INT 1
42869: PUSH
42870: LD_INT 2
42872: PUSH
42873: LD_INT 3
42875: PUSH
42876: LD_INT 4
42878: PUSH
42879: LD_INT 5
42881: PUSH
42882: EMPTY
42883: LIST
42884: LIST
42885: LIST
42886: LIST
42887: LIST
42888: LIST
42889: IN
42890: NOT
42891: PUSH
42892: LD_VAR 0 1
42896: PUSH
42897: LD_INT 0
42899: PUSH
42900: LD_INT 1
42902: PUSH
42903: EMPTY
42904: LIST
42905: LIST
42906: IN
42907: PUSH
42908: LD_VAR 0 5
42912: PUSH
42913: LD_INT 1
42915: PUSH
42916: LD_INT 2
42918: PUSH
42919: LD_INT 3
42921: PUSH
42922: EMPTY
42923: LIST
42924: LIST
42925: LIST
42926: IN
42927: NOT
42928: AND
42929: OR
42930: IFFALSE 42934
// exit ;
42932: GO 61325
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
42934: LD_VAR 0 1
42938: PUSH
42939: LD_INT 6
42941: PUSH
42942: LD_INT 7
42944: PUSH
42945: LD_INT 8
42947: PUSH
42948: LD_INT 13
42950: PUSH
42951: LD_INT 12
42953: PUSH
42954: LD_INT 15
42956: PUSH
42957: LD_INT 11
42959: PUSH
42960: LD_INT 14
42962: PUSH
42963: LD_INT 10
42965: PUSH
42966: EMPTY
42967: LIST
42968: LIST
42969: LIST
42970: LIST
42971: LIST
42972: LIST
42973: LIST
42974: LIST
42975: LIST
42976: IN
42977: IFFALSE 42987
// btype = b_lab ;
42979: LD_ADDR_VAR 0 1
42983: PUSH
42984: LD_INT 6
42986: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
42987: LD_VAR 0 6
42991: PUSH
42992: LD_INT 0
42994: PUSH
42995: LD_INT 1
42997: PUSH
42998: LD_INT 2
43000: PUSH
43001: EMPTY
43002: LIST
43003: LIST
43004: LIST
43005: IN
43006: NOT
43007: PUSH
43008: LD_VAR 0 1
43012: PUSH
43013: LD_INT 0
43015: PUSH
43016: LD_INT 1
43018: PUSH
43019: LD_INT 2
43021: PUSH
43022: LD_INT 3
43024: PUSH
43025: LD_INT 6
43027: PUSH
43028: LD_INT 36
43030: PUSH
43031: LD_INT 4
43033: PUSH
43034: LD_INT 5
43036: PUSH
43037: LD_INT 31
43039: PUSH
43040: LD_INT 32
43042: PUSH
43043: LD_INT 33
43045: PUSH
43046: EMPTY
43047: LIST
43048: LIST
43049: LIST
43050: LIST
43051: LIST
43052: LIST
43053: LIST
43054: LIST
43055: LIST
43056: LIST
43057: LIST
43058: IN
43059: NOT
43060: PUSH
43061: LD_VAR 0 6
43065: PUSH
43066: LD_INT 1
43068: EQUAL
43069: AND
43070: OR
43071: PUSH
43072: LD_VAR 0 1
43076: PUSH
43077: LD_INT 2
43079: PUSH
43080: LD_INT 3
43082: PUSH
43083: EMPTY
43084: LIST
43085: LIST
43086: IN
43087: NOT
43088: PUSH
43089: LD_VAR 0 6
43093: PUSH
43094: LD_INT 2
43096: EQUAL
43097: AND
43098: OR
43099: IFFALSE 43109
// mode = 0 ;
43101: LD_ADDR_VAR 0 6
43105: PUSH
43106: LD_INT 0
43108: ST_TO_ADDR
// case mode of 0 :
43109: LD_VAR 0 6
43113: PUSH
43114: LD_INT 0
43116: DOUBLE
43117: EQUAL
43118: IFTRUE 43122
43120: GO 54575
43122: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43123: LD_ADDR_VAR 0 11
43127: PUSH
43128: LD_INT 0
43130: PUSH
43131: LD_INT 0
43133: PUSH
43134: EMPTY
43135: LIST
43136: LIST
43137: PUSH
43138: LD_INT 0
43140: PUSH
43141: LD_INT 1
43143: NEG
43144: PUSH
43145: EMPTY
43146: LIST
43147: LIST
43148: PUSH
43149: LD_INT 1
43151: PUSH
43152: LD_INT 0
43154: PUSH
43155: EMPTY
43156: LIST
43157: LIST
43158: PUSH
43159: LD_INT 1
43161: PUSH
43162: LD_INT 1
43164: PUSH
43165: EMPTY
43166: LIST
43167: LIST
43168: PUSH
43169: LD_INT 0
43171: PUSH
43172: LD_INT 1
43174: PUSH
43175: EMPTY
43176: LIST
43177: LIST
43178: PUSH
43179: LD_INT 1
43181: NEG
43182: PUSH
43183: LD_INT 0
43185: PUSH
43186: EMPTY
43187: LIST
43188: LIST
43189: PUSH
43190: LD_INT 1
43192: NEG
43193: PUSH
43194: LD_INT 1
43196: NEG
43197: PUSH
43198: EMPTY
43199: LIST
43200: LIST
43201: PUSH
43202: LD_INT 1
43204: NEG
43205: PUSH
43206: LD_INT 2
43208: NEG
43209: PUSH
43210: EMPTY
43211: LIST
43212: LIST
43213: PUSH
43214: LD_INT 0
43216: PUSH
43217: LD_INT 2
43219: NEG
43220: PUSH
43221: EMPTY
43222: LIST
43223: LIST
43224: PUSH
43225: LD_INT 1
43227: PUSH
43228: LD_INT 1
43230: NEG
43231: PUSH
43232: EMPTY
43233: LIST
43234: LIST
43235: PUSH
43236: LD_INT 1
43238: PUSH
43239: LD_INT 2
43241: PUSH
43242: EMPTY
43243: LIST
43244: LIST
43245: PUSH
43246: LD_INT 0
43248: PUSH
43249: LD_INT 2
43251: PUSH
43252: EMPTY
43253: LIST
43254: LIST
43255: PUSH
43256: LD_INT 1
43258: NEG
43259: PUSH
43260: LD_INT 1
43262: PUSH
43263: EMPTY
43264: LIST
43265: LIST
43266: PUSH
43267: LD_INT 1
43269: PUSH
43270: LD_INT 3
43272: PUSH
43273: EMPTY
43274: LIST
43275: LIST
43276: PUSH
43277: LD_INT 0
43279: PUSH
43280: LD_INT 3
43282: PUSH
43283: EMPTY
43284: LIST
43285: LIST
43286: PUSH
43287: LD_INT 1
43289: NEG
43290: PUSH
43291: LD_INT 2
43293: PUSH
43294: EMPTY
43295: LIST
43296: LIST
43297: PUSH
43298: EMPTY
43299: LIST
43300: LIST
43301: LIST
43302: LIST
43303: LIST
43304: LIST
43305: LIST
43306: LIST
43307: LIST
43308: LIST
43309: LIST
43310: LIST
43311: LIST
43312: LIST
43313: LIST
43314: LIST
43315: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43316: LD_ADDR_VAR 0 12
43320: PUSH
43321: LD_INT 0
43323: PUSH
43324: LD_INT 0
43326: PUSH
43327: EMPTY
43328: LIST
43329: LIST
43330: PUSH
43331: LD_INT 0
43333: PUSH
43334: LD_INT 1
43336: NEG
43337: PUSH
43338: EMPTY
43339: LIST
43340: LIST
43341: PUSH
43342: LD_INT 1
43344: PUSH
43345: LD_INT 0
43347: PUSH
43348: EMPTY
43349: LIST
43350: LIST
43351: PUSH
43352: LD_INT 1
43354: PUSH
43355: LD_INT 1
43357: PUSH
43358: EMPTY
43359: LIST
43360: LIST
43361: PUSH
43362: LD_INT 0
43364: PUSH
43365: LD_INT 1
43367: PUSH
43368: EMPTY
43369: LIST
43370: LIST
43371: PUSH
43372: LD_INT 1
43374: NEG
43375: PUSH
43376: LD_INT 0
43378: PUSH
43379: EMPTY
43380: LIST
43381: LIST
43382: PUSH
43383: LD_INT 1
43385: NEG
43386: PUSH
43387: LD_INT 1
43389: NEG
43390: PUSH
43391: EMPTY
43392: LIST
43393: LIST
43394: PUSH
43395: LD_INT 1
43397: PUSH
43398: LD_INT 1
43400: NEG
43401: PUSH
43402: EMPTY
43403: LIST
43404: LIST
43405: PUSH
43406: LD_INT 2
43408: PUSH
43409: LD_INT 0
43411: PUSH
43412: EMPTY
43413: LIST
43414: LIST
43415: PUSH
43416: LD_INT 2
43418: PUSH
43419: LD_INT 1
43421: PUSH
43422: EMPTY
43423: LIST
43424: LIST
43425: PUSH
43426: LD_INT 1
43428: NEG
43429: PUSH
43430: LD_INT 1
43432: PUSH
43433: EMPTY
43434: LIST
43435: LIST
43436: PUSH
43437: LD_INT 2
43439: NEG
43440: PUSH
43441: LD_INT 0
43443: PUSH
43444: EMPTY
43445: LIST
43446: LIST
43447: PUSH
43448: LD_INT 2
43450: NEG
43451: PUSH
43452: LD_INT 1
43454: NEG
43455: PUSH
43456: EMPTY
43457: LIST
43458: LIST
43459: PUSH
43460: LD_INT 2
43462: NEG
43463: PUSH
43464: LD_INT 1
43466: PUSH
43467: EMPTY
43468: LIST
43469: LIST
43470: PUSH
43471: LD_INT 3
43473: NEG
43474: PUSH
43475: LD_INT 0
43477: PUSH
43478: EMPTY
43479: LIST
43480: LIST
43481: PUSH
43482: LD_INT 3
43484: NEG
43485: PUSH
43486: LD_INT 1
43488: NEG
43489: PUSH
43490: EMPTY
43491: LIST
43492: LIST
43493: PUSH
43494: EMPTY
43495: LIST
43496: LIST
43497: LIST
43498: LIST
43499: LIST
43500: LIST
43501: LIST
43502: LIST
43503: LIST
43504: LIST
43505: LIST
43506: LIST
43507: LIST
43508: LIST
43509: LIST
43510: LIST
43511: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43512: LD_ADDR_VAR 0 13
43516: PUSH
43517: LD_INT 0
43519: PUSH
43520: LD_INT 0
43522: PUSH
43523: EMPTY
43524: LIST
43525: LIST
43526: PUSH
43527: LD_INT 0
43529: PUSH
43530: LD_INT 1
43532: NEG
43533: PUSH
43534: EMPTY
43535: LIST
43536: LIST
43537: PUSH
43538: LD_INT 1
43540: PUSH
43541: LD_INT 0
43543: PUSH
43544: EMPTY
43545: LIST
43546: LIST
43547: PUSH
43548: LD_INT 1
43550: PUSH
43551: LD_INT 1
43553: PUSH
43554: EMPTY
43555: LIST
43556: LIST
43557: PUSH
43558: LD_INT 0
43560: PUSH
43561: LD_INT 1
43563: PUSH
43564: EMPTY
43565: LIST
43566: LIST
43567: PUSH
43568: LD_INT 1
43570: NEG
43571: PUSH
43572: LD_INT 0
43574: PUSH
43575: EMPTY
43576: LIST
43577: LIST
43578: PUSH
43579: LD_INT 1
43581: NEG
43582: PUSH
43583: LD_INT 1
43585: NEG
43586: PUSH
43587: EMPTY
43588: LIST
43589: LIST
43590: PUSH
43591: LD_INT 1
43593: NEG
43594: PUSH
43595: LD_INT 2
43597: NEG
43598: PUSH
43599: EMPTY
43600: LIST
43601: LIST
43602: PUSH
43603: LD_INT 2
43605: PUSH
43606: LD_INT 1
43608: PUSH
43609: EMPTY
43610: LIST
43611: LIST
43612: PUSH
43613: LD_INT 2
43615: PUSH
43616: LD_INT 2
43618: PUSH
43619: EMPTY
43620: LIST
43621: LIST
43622: PUSH
43623: LD_INT 1
43625: PUSH
43626: LD_INT 2
43628: PUSH
43629: EMPTY
43630: LIST
43631: LIST
43632: PUSH
43633: LD_INT 2
43635: NEG
43636: PUSH
43637: LD_INT 1
43639: NEG
43640: PUSH
43641: EMPTY
43642: LIST
43643: LIST
43644: PUSH
43645: LD_INT 2
43647: NEG
43648: PUSH
43649: LD_INT 2
43651: NEG
43652: PUSH
43653: EMPTY
43654: LIST
43655: LIST
43656: PUSH
43657: LD_INT 2
43659: NEG
43660: PUSH
43661: LD_INT 3
43663: NEG
43664: PUSH
43665: EMPTY
43666: LIST
43667: LIST
43668: PUSH
43669: LD_INT 3
43671: NEG
43672: PUSH
43673: LD_INT 2
43675: NEG
43676: PUSH
43677: EMPTY
43678: LIST
43679: LIST
43680: PUSH
43681: LD_INT 3
43683: NEG
43684: PUSH
43685: LD_INT 3
43687: NEG
43688: PUSH
43689: EMPTY
43690: LIST
43691: LIST
43692: PUSH
43693: EMPTY
43694: LIST
43695: LIST
43696: LIST
43697: LIST
43698: LIST
43699: LIST
43700: LIST
43701: LIST
43702: LIST
43703: LIST
43704: LIST
43705: LIST
43706: LIST
43707: LIST
43708: LIST
43709: LIST
43710: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
43711: LD_ADDR_VAR 0 14
43715: PUSH
43716: LD_INT 0
43718: PUSH
43719: LD_INT 0
43721: PUSH
43722: EMPTY
43723: LIST
43724: LIST
43725: PUSH
43726: LD_INT 0
43728: PUSH
43729: LD_INT 1
43731: NEG
43732: PUSH
43733: EMPTY
43734: LIST
43735: LIST
43736: PUSH
43737: LD_INT 1
43739: PUSH
43740: LD_INT 0
43742: PUSH
43743: EMPTY
43744: LIST
43745: LIST
43746: PUSH
43747: LD_INT 1
43749: PUSH
43750: LD_INT 1
43752: PUSH
43753: EMPTY
43754: LIST
43755: LIST
43756: PUSH
43757: LD_INT 0
43759: PUSH
43760: LD_INT 1
43762: PUSH
43763: EMPTY
43764: LIST
43765: LIST
43766: PUSH
43767: LD_INT 1
43769: NEG
43770: PUSH
43771: LD_INT 0
43773: PUSH
43774: EMPTY
43775: LIST
43776: LIST
43777: PUSH
43778: LD_INT 1
43780: NEG
43781: PUSH
43782: LD_INT 1
43784: NEG
43785: PUSH
43786: EMPTY
43787: LIST
43788: LIST
43789: PUSH
43790: LD_INT 1
43792: NEG
43793: PUSH
43794: LD_INT 2
43796: NEG
43797: PUSH
43798: EMPTY
43799: LIST
43800: LIST
43801: PUSH
43802: LD_INT 0
43804: PUSH
43805: LD_INT 2
43807: NEG
43808: PUSH
43809: EMPTY
43810: LIST
43811: LIST
43812: PUSH
43813: LD_INT 1
43815: PUSH
43816: LD_INT 1
43818: NEG
43819: PUSH
43820: EMPTY
43821: LIST
43822: LIST
43823: PUSH
43824: LD_INT 1
43826: PUSH
43827: LD_INT 2
43829: PUSH
43830: EMPTY
43831: LIST
43832: LIST
43833: PUSH
43834: LD_INT 0
43836: PUSH
43837: LD_INT 2
43839: PUSH
43840: EMPTY
43841: LIST
43842: LIST
43843: PUSH
43844: LD_INT 1
43846: NEG
43847: PUSH
43848: LD_INT 1
43850: PUSH
43851: EMPTY
43852: LIST
43853: LIST
43854: PUSH
43855: LD_INT 1
43857: NEG
43858: PUSH
43859: LD_INT 3
43861: NEG
43862: PUSH
43863: EMPTY
43864: LIST
43865: LIST
43866: PUSH
43867: LD_INT 0
43869: PUSH
43870: LD_INT 3
43872: NEG
43873: PUSH
43874: EMPTY
43875: LIST
43876: LIST
43877: PUSH
43878: LD_INT 1
43880: PUSH
43881: LD_INT 2
43883: NEG
43884: PUSH
43885: EMPTY
43886: LIST
43887: LIST
43888: PUSH
43889: EMPTY
43890: LIST
43891: LIST
43892: LIST
43893: LIST
43894: LIST
43895: LIST
43896: LIST
43897: LIST
43898: LIST
43899: LIST
43900: LIST
43901: LIST
43902: LIST
43903: LIST
43904: LIST
43905: LIST
43906: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43907: LD_ADDR_VAR 0 15
43911: PUSH
43912: LD_INT 0
43914: PUSH
43915: LD_INT 0
43917: PUSH
43918: EMPTY
43919: LIST
43920: LIST
43921: PUSH
43922: LD_INT 0
43924: PUSH
43925: LD_INT 1
43927: NEG
43928: PUSH
43929: EMPTY
43930: LIST
43931: LIST
43932: PUSH
43933: LD_INT 1
43935: PUSH
43936: LD_INT 0
43938: PUSH
43939: EMPTY
43940: LIST
43941: LIST
43942: PUSH
43943: LD_INT 1
43945: PUSH
43946: LD_INT 1
43948: PUSH
43949: EMPTY
43950: LIST
43951: LIST
43952: PUSH
43953: LD_INT 0
43955: PUSH
43956: LD_INT 1
43958: PUSH
43959: EMPTY
43960: LIST
43961: LIST
43962: PUSH
43963: LD_INT 1
43965: NEG
43966: PUSH
43967: LD_INT 0
43969: PUSH
43970: EMPTY
43971: LIST
43972: LIST
43973: PUSH
43974: LD_INT 1
43976: NEG
43977: PUSH
43978: LD_INT 1
43980: NEG
43981: PUSH
43982: EMPTY
43983: LIST
43984: LIST
43985: PUSH
43986: LD_INT 1
43988: PUSH
43989: LD_INT 1
43991: NEG
43992: PUSH
43993: EMPTY
43994: LIST
43995: LIST
43996: PUSH
43997: LD_INT 2
43999: PUSH
44000: LD_INT 0
44002: PUSH
44003: EMPTY
44004: LIST
44005: LIST
44006: PUSH
44007: LD_INT 2
44009: PUSH
44010: LD_INT 1
44012: PUSH
44013: EMPTY
44014: LIST
44015: LIST
44016: PUSH
44017: LD_INT 1
44019: NEG
44020: PUSH
44021: LD_INT 1
44023: PUSH
44024: EMPTY
44025: LIST
44026: LIST
44027: PUSH
44028: LD_INT 2
44030: NEG
44031: PUSH
44032: LD_INT 0
44034: PUSH
44035: EMPTY
44036: LIST
44037: LIST
44038: PUSH
44039: LD_INT 2
44041: NEG
44042: PUSH
44043: LD_INT 1
44045: NEG
44046: PUSH
44047: EMPTY
44048: LIST
44049: LIST
44050: PUSH
44051: LD_INT 2
44053: PUSH
44054: LD_INT 1
44056: NEG
44057: PUSH
44058: EMPTY
44059: LIST
44060: LIST
44061: PUSH
44062: LD_INT 3
44064: PUSH
44065: LD_INT 0
44067: PUSH
44068: EMPTY
44069: LIST
44070: LIST
44071: PUSH
44072: LD_INT 3
44074: PUSH
44075: LD_INT 1
44077: PUSH
44078: EMPTY
44079: LIST
44080: LIST
44081: PUSH
44082: EMPTY
44083: LIST
44084: LIST
44085: LIST
44086: LIST
44087: LIST
44088: LIST
44089: LIST
44090: LIST
44091: LIST
44092: LIST
44093: LIST
44094: LIST
44095: LIST
44096: LIST
44097: LIST
44098: LIST
44099: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44100: LD_ADDR_VAR 0 16
44104: PUSH
44105: LD_INT 0
44107: PUSH
44108: LD_INT 0
44110: PUSH
44111: EMPTY
44112: LIST
44113: LIST
44114: PUSH
44115: LD_INT 0
44117: PUSH
44118: LD_INT 1
44120: NEG
44121: PUSH
44122: EMPTY
44123: LIST
44124: LIST
44125: PUSH
44126: LD_INT 1
44128: PUSH
44129: LD_INT 0
44131: PUSH
44132: EMPTY
44133: LIST
44134: LIST
44135: PUSH
44136: LD_INT 1
44138: PUSH
44139: LD_INT 1
44141: PUSH
44142: EMPTY
44143: LIST
44144: LIST
44145: PUSH
44146: LD_INT 0
44148: PUSH
44149: LD_INT 1
44151: PUSH
44152: EMPTY
44153: LIST
44154: LIST
44155: PUSH
44156: LD_INT 1
44158: NEG
44159: PUSH
44160: LD_INT 0
44162: PUSH
44163: EMPTY
44164: LIST
44165: LIST
44166: PUSH
44167: LD_INT 1
44169: NEG
44170: PUSH
44171: LD_INT 1
44173: NEG
44174: PUSH
44175: EMPTY
44176: LIST
44177: LIST
44178: PUSH
44179: LD_INT 1
44181: NEG
44182: PUSH
44183: LD_INT 2
44185: NEG
44186: PUSH
44187: EMPTY
44188: LIST
44189: LIST
44190: PUSH
44191: LD_INT 2
44193: PUSH
44194: LD_INT 1
44196: PUSH
44197: EMPTY
44198: LIST
44199: LIST
44200: PUSH
44201: LD_INT 2
44203: PUSH
44204: LD_INT 2
44206: PUSH
44207: EMPTY
44208: LIST
44209: LIST
44210: PUSH
44211: LD_INT 1
44213: PUSH
44214: LD_INT 2
44216: PUSH
44217: EMPTY
44218: LIST
44219: LIST
44220: PUSH
44221: LD_INT 2
44223: NEG
44224: PUSH
44225: LD_INT 1
44227: NEG
44228: PUSH
44229: EMPTY
44230: LIST
44231: LIST
44232: PUSH
44233: LD_INT 2
44235: NEG
44236: PUSH
44237: LD_INT 2
44239: NEG
44240: PUSH
44241: EMPTY
44242: LIST
44243: LIST
44244: PUSH
44245: LD_INT 3
44247: PUSH
44248: LD_INT 2
44250: PUSH
44251: EMPTY
44252: LIST
44253: LIST
44254: PUSH
44255: LD_INT 3
44257: PUSH
44258: LD_INT 3
44260: PUSH
44261: EMPTY
44262: LIST
44263: LIST
44264: PUSH
44265: LD_INT 2
44267: PUSH
44268: LD_INT 3
44270: PUSH
44271: EMPTY
44272: LIST
44273: LIST
44274: PUSH
44275: EMPTY
44276: LIST
44277: LIST
44278: LIST
44279: LIST
44280: LIST
44281: LIST
44282: LIST
44283: LIST
44284: LIST
44285: LIST
44286: LIST
44287: LIST
44288: LIST
44289: LIST
44290: LIST
44291: LIST
44292: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44293: LD_ADDR_VAR 0 17
44297: PUSH
44298: LD_INT 0
44300: PUSH
44301: LD_INT 0
44303: PUSH
44304: EMPTY
44305: LIST
44306: LIST
44307: PUSH
44308: LD_INT 0
44310: PUSH
44311: LD_INT 1
44313: NEG
44314: PUSH
44315: EMPTY
44316: LIST
44317: LIST
44318: PUSH
44319: LD_INT 1
44321: PUSH
44322: LD_INT 0
44324: PUSH
44325: EMPTY
44326: LIST
44327: LIST
44328: PUSH
44329: LD_INT 1
44331: PUSH
44332: LD_INT 1
44334: PUSH
44335: EMPTY
44336: LIST
44337: LIST
44338: PUSH
44339: LD_INT 0
44341: PUSH
44342: LD_INT 1
44344: PUSH
44345: EMPTY
44346: LIST
44347: LIST
44348: PUSH
44349: LD_INT 1
44351: NEG
44352: PUSH
44353: LD_INT 0
44355: PUSH
44356: EMPTY
44357: LIST
44358: LIST
44359: PUSH
44360: LD_INT 1
44362: NEG
44363: PUSH
44364: LD_INT 1
44366: NEG
44367: PUSH
44368: EMPTY
44369: LIST
44370: LIST
44371: PUSH
44372: LD_INT 1
44374: NEG
44375: PUSH
44376: LD_INT 2
44378: NEG
44379: PUSH
44380: EMPTY
44381: LIST
44382: LIST
44383: PUSH
44384: LD_INT 0
44386: PUSH
44387: LD_INT 2
44389: NEG
44390: PUSH
44391: EMPTY
44392: LIST
44393: LIST
44394: PUSH
44395: LD_INT 1
44397: PUSH
44398: LD_INT 1
44400: NEG
44401: PUSH
44402: EMPTY
44403: LIST
44404: LIST
44405: PUSH
44406: LD_INT 2
44408: PUSH
44409: LD_INT 0
44411: PUSH
44412: EMPTY
44413: LIST
44414: LIST
44415: PUSH
44416: LD_INT 2
44418: PUSH
44419: LD_INT 1
44421: PUSH
44422: EMPTY
44423: LIST
44424: LIST
44425: PUSH
44426: LD_INT 2
44428: PUSH
44429: LD_INT 2
44431: PUSH
44432: EMPTY
44433: LIST
44434: LIST
44435: PUSH
44436: LD_INT 1
44438: PUSH
44439: LD_INT 2
44441: PUSH
44442: EMPTY
44443: LIST
44444: LIST
44445: PUSH
44446: LD_INT 0
44448: PUSH
44449: LD_INT 2
44451: PUSH
44452: EMPTY
44453: LIST
44454: LIST
44455: PUSH
44456: LD_INT 1
44458: NEG
44459: PUSH
44460: LD_INT 1
44462: PUSH
44463: EMPTY
44464: LIST
44465: LIST
44466: PUSH
44467: LD_INT 2
44469: NEG
44470: PUSH
44471: LD_INT 0
44473: PUSH
44474: EMPTY
44475: LIST
44476: LIST
44477: PUSH
44478: LD_INT 2
44480: NEG
44481: PUSH
44482: LD_INT 1
44484: NEG
44485: PUSH
44486: EMPTY
44487: LIST
44488: LIST
44489: PUSH
44490: LD_INT 2
44492: NEG
44493: PUSH
44494: LD_INT 2
44496: NEG
44497: PUSH
44498: EMPTY
44499: LIST
44500: LIST
44501: PUSH
44502: EMPTY
44503: LIST
44504: LIST
44505: LIST
44506: LIST
44507: LIST
44508: LIST
44509: LIST
44510: LIST
44511: LIST
44512: LIST
44513: LIST
44514: LIST
44515: LIST
44516: LIST
44517: LIST
44518: LIST
44519: LIST
44520: LIST
44521: LIST
44522: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44523: LD_ADDR_VAR 0 18
44527: PUSH
44528: LD_INT 0
44530: PUSH
44531: LD_INT 0
44533: PUSH
44534: EMPTY
44535: LIST
44536: LIST
44537: PUSH
44538: LD_INT 0
44540: PUSH
44541: LD_INT 1
44543: NEG
44544: PUSH
44545: EMPTY
44546: LIST
44547: LIST
44548: PUSH
44549: LD_INT 1
44551: PUSH
44552: LD_INT 0
44554: PUSH
44555: EMPTY
44556: LIST
44557: LIST
44558: PUSH
44559: LD_INT 1
44561: PUSH
44562: LD_INT 1
44564: PUSH
44565: EMPTY
44566: LIST
44567: LIST
44568: PUSH
44569: LD_INT 0
44571: PUSH
44572: LD_INT 1
44574: PUSH
44575: EMPTY
44576: LIST
44577: LIST
44578: PUSH
44579: LD_INT 1
44581: NEG
44582: PUSH
44583: LD_INT 0
44585: PUSH
44586: EMPTY
44587: LIST
44588: LIST
44589: PUSH
44590: LD_INT 1
44592: NEG
44593: PUSH
44594: LD_INT 1
44596: NEG
44597: PUSH
44598: EMPTY
44599: LIST
44600: LIST
44601: PUSH
44602: LD_INT 1
44604: NEG
44605: PUSH
44606: LD_INT 2
44608: NEG
44609: PUSH
44610: EMPTY
44611: LIST
44612: LIST
44613: PUSH
44614: LD_INT 0
44616: PUSH
44617: LD_INT 2
44619: NEG
44620: PUSH
44621: EMPTY
44622: LIST
44623: LIST
44624: PUSH
44625: LD_INT 1
44627: PUSH
44628: LD_INT 1
44630: NEG
44631: PUSH
44632: EMPTY
44633: LIST
44634: LIST
44635: PUSH
44636: LD_INT 2
44638: PUSH
44639: LD_INT 0
44641: PUSH
44642: EMPTY
44643: LIST
44644: LIST
44645: PUSH
44646: LD_INT 2
44648: PUSH
44649: LD_INT 1
44651: PUSH
44652: EMPTY
44653: LIST
44654: LIST
44655: PUSH
44656: LD_INT 2
44658: PUSH
44659: LD_INT 2
44661: PUSH
44662: EMPTY
44663: LIST
44664: LIST
44665: PUSH
44666: LD_INT 1
44668: PUSH
44669: LD_INT 2
44671: PUSH
44672: EMPTY
44673: LIST
44674: LIST
44675: PUSH
44676: LD_INT 0
44678: PUSH
44679: LD_INT 2
44681: PUSH
44682: EMPTY
44683: LIST
44684: LIST
44685: PUSH
44686: LD_INT 1
44688: NEG
44689: PUSH
44690: LD_INT 1
44692: PUSH
44693: EMPTY
44694: LIST
44695: LIST
44696: PUSH
44697: LD_INT 2
44699: NEG
44700: PUSH
44701: LD_INT 0
44703: PUSH
44704: EMPTY
44705: LIST
44706: LIST
44707: PUSH
44708: LD_INT 2
44710: NEG
44711: PUSH
44712: LD_INT 1
44714: NEG
44715: PUSH
44716: EMPTY
44717: LIST
44718: LIST
44719: PUSH
44720: LD_INT 2
44722: NEG
44723: PUSH
44724: LD_INT 2
44726: NEG
44727: PUSH
44728: EMPTY
44729: LIST
44730: LIST
44731: PUSH
44732: EMPTY
44733: LIST
44734: LIST
44735: LIST
44736: LIST
44737: LIST
44738: LIST
44739: LIST
44740: LIST
44741: LIST
44742: LIST
44743: LIST
44744: LIST
44745: LIST
44746: LIST
44747: LIST
44748: LIST
44749: LIST
44750: LIST
44751: LIST
44752: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44753: LD_ADDR_VAR 0 19
44757: PUSH
44758: LD_INT 0
44760: PUSH
44761: LD_INT 0
44763: PUSH
44764: EMPTY
44765: LIST
44766: LIST
44767: PUSH
44768: LD_INT 0
44770: PUSH
44771: LD_INT 1
44773: NEG
44774: PUSH
44775: EMPTY
44776: LIST
44777: LIST
44778: PUSH
44779: LD_INT 1
44781: PUSH
44782: LD_INT 0
44784: PUSH
44785: EMPTY
44786: LIST
44787: LIST
44788: PUSH
44789: LD_INT 1
44791: PUSH
44792: LD_INT 1
44794: PUSH
44795: EMPTY
44796: LIST
44797: LIST
44798: PUSH
44799: LD_INT 0
44801: PUSH
44802: LD_INT 1
44804: PUSH
44805: EMPTY
44806: LIST
44807: LIST
44808: PUSH
44809: LD_INT 1
44811: NEG
44812: PUSH
44813: LD_INT 0
44815: PUSH
44816: EMPTY
44817: LIST
44818: LIST
44819: PUSH
44820: LD_INT 1
44822: NEG
44823: PUSH
44824: LD_INT 1
44826: NEG
44827: PUSH
44828: EMPTY
44829: LIST
44830: LIST
44831: PUSH
44832: LD_INT 1
44834: NEG
44835: PUSH
44836: LD_INT 2
44838: NEG
44839: PUSH
44840: EMPTY
44841: LIST
44842: LIST
44843: PUSH
44844: LD_INT 0
44846: PUSH
44847: LD_INT 2
44849: NEG
44850: PUSH
44851: EMPTY
44852: LIST
44853: LIST
44854: PUSH
44855: LD_INT 1
44857: PUSH
44858: LD_INT 1
44860: NEG
44861: PUSH
44862: EMPTY
44863: LIST
44864: LIST
44865: PUSH
44866: LD_INT 2
44868: PUSH
44869: LD_INT 0
44871: PUSH
44872: EMPTY
44873: LIST
44874: LIST
44875: PUSH
44876: LD_INT 2
44878: PUSH
44879: LD_INT 1
44881: PUSH
44882: EMPTY
44883: LIST
44884: LIST
44885: PUSH
44886: LD_INT 2
44888: PUSH
44889: LD_INT 2
44891: PUSH
44892: EMPTY
44893: LIST
44894: LIST
44895: PUSH
44896: LD_INT 1
44898: PUSH
44899: LD_INT 2
44901: PUSH
44902: EMPTY
44903: LIST
44904: LIST
44905: PUSH
44906: LD_INT 0
44908: PUSH
44909: LD_INT 2
44911: PUSH
44912: EMPTY
44913: LIST
44914: LIST
44915: PUSH
44916: LD_INT 1
44918: NEG
44919: PUSH
44920: LD_INT 1
44922: PUSH
44923: EMPTY
44924: LIST
44925: LIST
44926: PUSH
44927: LD_INT 2
44929: NEG
44930: PUSH
44931: LD_INT 0
44933: PUSH
44934: EMPTY
44935: LIST
44936: LIST
44937: PUSH
44938: LD_INT 2
44940: NEG
44941: PUSH
44942: LD_INT 1
44944: NEG
44945: PUSH
44946: EMPTY
44947: LIST
44948: LIST
44949: PUSH
44950: LD_INT 2
44952: NEG
44953: PUSH
44954: LD_INT 2
44956: NEG
44957: PUSH
44958: EMPTY
44959: LIST
44960: LIST
44961: PUSH
44962: EMPTY
44963: LIST
44964: LIST
44965: LIST
44966: LIST
44967: LIST
44968: LIST
44969: LIST
44970: LIST
44971: LIST
44972: LIST
44973: LIST
44974: LIST
44975: LIST
44976: LIST
44977: LIST
44978: LIST
44979: LIST
44980: LIST
44981: LIST
44982: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44983: LD_ADDR_VAR 0 20
44987: PUSH
44988: LD_INT 0
44990: PUSH
44991: LD_INT 0
44993: PUSH
44994: EMPTY
44995: LIST
44996: LIST
44997: PUSH
44998: LD_INT 0
45000: PUSH
45001: LD_INT 1
45003: NEG
45004: PUSH
45005: EMPTY
45006: LIST
45007: LIST
45008: PUSH
45009: LD_INT 1
45011: PUSH
45012: LD_INT 0
45014: PUSH
45015: EMPTY
45016: LIST
45017: LIST
45018: PUSH
45019: LD_INT 1
45021: PUSH
45022: LD_INT 1
45024: PUSH
45025: EMPTY
45026: LIST
45027: LIST
45028: PUSH
45029: LD_INT 0
45031: PUSH
45032: LD_INT 1
45034: PUSH
45035: EMPTY
45036: LIST
45037: LIST
45038: PUSH
45039: LD_INT 1
45041: NEG
45042: PUSH
45043: LD_INT 0
45045: PUSH
45046: EMPTY
45047: LIST
45048: LIST
45049: PUSH
45050: LD_INT 1
45052: NEG
45053: PUSH
45054: LD_INT 1
45056: NEG
45057: PUSH
45058: EMPTY
45059: LIST
45060: LIST
45061: PUSH
45062: LD_INT 1
45064: NEG
45065: PUSH
45066: LD_INT 2
45068: NEG
45069: PUSH
45070: EMPTY
45071: LIST
45072: LIST
45073: PUSH
45074: LD_INT 0
45076: PUSH
45077: LD_INT 2
45079: NEG
45080: PUSH
45081: EMPTY
45082: LIST
45083: LIST
45084: PUSH
45085: LD_INT 1
45087: PUSH
45088: LD_INT 1
45090: NEG
45091: PUSH
45092: EMPTY
45093: LIST
45094: LIST
45095: PUSH
45096: LD_INT 2
45098: PUSH
45099: LD_INT 0
45101: PUSH
45102: EMPTY
45103: LIST
45104: LIST
45105: PUSH
45106: LD_INT 2
45108: PUSH
45109: LD_INT 1
45111: PUSH
45112: EMPTY
45113: LIST
45114: LIST
45115: PUSH
45116: LD_INT 2
45118: PUSH
45119: LD_INT 2
45121: PUSH
45122: EMPTY
45123: LIST
45124: LIST
45125: PUSH
45126: LD_INT 1
45128: PUSH
45129: LD_INT 2
45131: PUSH
45132: EMPTY
45133: LIST
45134: LIST
45135: PUSH
45136: LD_INT 0
45138: PUSH
45139: LD_INT 2
45141: PUSH
45142: EMPTY
45143: LIST
45144: LIST
45145: PUSH
45146: LD_INT 1
45148: NEG
45149: PUSH
45150: LD_INT 1
45152: PUSH
45153: EMPTY
45154: LIST
45155: LIST
45156: PUSH
45157: LD_INT 2
45159: NEG
45160: PUSH
45161: LD_INT 0
45163: PUSH
45164: EMPTY
45165: LIST
45166: LIST
45167: PUSH
45168: LD_INT 2
45170: NEG
45171: PUSH
45172: LD_INT 1
45174: NEG
45175: PUSH
45176: EMPTY
45177: LIST
45178: LIST
45179: PUSH
45180: LD_INT 2
45182: NEG
45183: PUSH
45184: LD_INT 2
45186: NEG
45187: PUSH
45188: EMPTY
45189: LIST
45190: LIST
45191: PUSH
45192: EMPTY
45193: LIST
45194: LIST
45195: LIST
45196: LIST
45197: LIST
45198: LIST
45199: LIST
45200: LIST
45201: LIST
45202: LIST
45203: LIST
45204: LIST
45205: LIST
45206: LIST
45207: LIST
45208: LIST
45209: LIST
45210: LIST
45211: LIST
45212: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45213: LD_ADDR_VAR 0 21
45217: PUSH
45218: LD_INT 0
45220: PUSH
45221: LD_INT 0
45223: PUSH
45224: EMPTY
45225: LIST
45226: LIST
45227: PUSH
45228: LD_INT 0
45230: PUSH
45231: LD_INT 1
45233: NEG
45234: PUSH
45235: EMPTY
45236: LIST
45237: LIST
45238: PUSH
45239: LD_INT 1
45241: PUSH
45242: LD_INT 0
45244: PUSH
45245: EMPTY
45246: LIST
45247: LIST
45248: PUSH
45249: LD_INT 1
45251: PUSH
45252: LD_INT 1
45254: PUSH
45255: EMPTY
45256: LIST
45257: LIST
45258: PUSH
45259: LD_INT 0
45261: PUSH
45262: LD_INT 1
45264: PUSH
45265: EMPTY
45266: LIST
45267: LIST
45268: PUSH
45269: LD_INT 1
45271: NEG
45272: PUSH
45273: LD_INT 0
45275: PUSH
45276: EMPTY
45277: LIST
45278: LIST
45279: PUSH
45280: LD_INT 1
45282: NEG
45283: PUSH
45284: LD_INT 1
45286: NEG
45287: PUSH
45288: EMPTY
45289: LIST
45290: LIST
45291: PUSH
45292: LD_INT 1
45294: NEG
45295: PUSH
45296: LD_INT 2
45298: NEG
45299: PUSH
45300: EMPTY
45301: LIST
45302: LIST
45303: PUSH
45304: LD_INT 0
45306: PUSH
45307: LD_INT 2
45309: NEG
45310: PUSH
45311: EMPTY
45312: LIST
45313: LIST
45314: PUSH
45315: LD_INT 1
45317: PUSH
45318: LD_INT 1
45320: NEG
45321: PUSH
45322: EMPTY
45323: LIST
45324: LIST
45325: PUSH
45326: LD_INT 2
45328: PUSH
45329: LD_INT 0
45331: PUSH
45332: EMPTY
45333: LIST
45334: LIST
45335: PUSH
45336: LD_INT 2
45338: PUSH
45339: LD_INT 1
45341: PUSH
45342: EMPTY
45343: LIST
45344: LIST
45345: PUSH
45346: LD_INT 2
45348: PUSH
45349: LD_INT 2
45351: PUSH
45352: EMPTY
45353: LIST
45354: LIST
45355: PUSH
45356: LD_INT 1
45358: PUSH
45359: LD_INT 2
45361: PUSH
45362: EMPTY
45363: LIST
45364: LIST
45365: PUSH
45366: LD_INT 0
45368: PUSH
45369: LD_INT 2
45371: PUSH
45372: EMPTY
45373: LIST
45374: LIST
45375: PUSH
45376: LD_INT 1
45378: NEG
45379: PUSH
45380: LD_INT 1
45382: PUSH
45383: EMPTY
45384: LIST
45385: LIST
45386: PUSH
45387: LD_INT 2
45389: NEG
45390: PUSH
45391: LD_INT 0
45393: PUSH
45394: EMPTY
45395: LIST
45396: LIST
45397: PUSH
45398: LD_INT 2
45400: NEG
45401: PUSH
45402: LD_INT 1
45404: NEG
45405: PUSH
45406: EMPTY
45407: LIST
45408: LIST
45409: PUSH
45410: LD_INT 2
45412: NEG
45413: PUSH
45414: LD_INT 2
45416: NEG
45417: PUSH
45418: EMPTY
45419: LIST
45420: LIST
45421: PUSH
45422: EMPTY
45423: LIST
45424: LIST
45425: LIST
45426: LIST
45427: LIST
45428: LIST
45429: LIST
45430: LIST
45431: LIST
45432: LIST
45433: LIST
45434: LIST
45435: LIST
45436: LIST
45437: LIST
45438: LIST
45439: LIST
45440: LIST
45441: LIST
45442: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45443: LD_ADDR_VAR 0 22
45447: PUSH
45448: LD_INT 0
45450: PUSH
45451: LD_INT 0
45453: PUSH
45454: EMPTY
45455: LIST
45456: LIST
45457: PUSH
45458: LD_INT 0
45460: PUSH
45461: LD_INT 1
45463: NEG
45464: PUSH
45465: EMPTY
45466: LIST
45467: LIST
45468: PUSH
45469: LD_INT 1
45471: PUSH
45472: LD_INT 0
45474: PUSH
45475: EMPTY
45476: LIST
45477: LIST
45478: PUSH
45479: LD_INT 1
45481: PUSH
45482: LD_INT 1
45484: PUSH
45485: EMPTY
45486: LIST
45487: LIST
45488: PUSH
45489: LD_INT 0
45491: PUSH
45492: LD_INT 1
45494: PUSH
45495: EMPTY
45496: LIST
45497: LIST
45498: PUSH
45499: LD_INT 1
45501: NEG
45502: PUSH
45503: LD_INT 0
45505: PUSH
45506: EMPTY
45507: LIST
45508: LIST
45509: PUSH
45510: LD_INT 1
45512: NEG
45513: PUSH
45514: LD_INT 1
45516: NEG
45517: PUSH
45518: EMPTY
45519: LIST
45520: LIST
45521: PUSH
45522: LD_INT 1
45524: NEG
45525: PUSH
45526: LD_INT 2
45528: NEG
45529: PUSH
45530: EMPTY
45531: LIST
45532: LIST
45533: PUSH
45534: LD_INT 0
45536: PUSH
45537: LD_INT 2
45539: NEG
45540: PUSH
45541: EMPTY
45542: LIST
45543: LIST
45544: PUSH
45545: LD_INT 1
45547: PUSH
45548: LD_INT 1
45550: NEG
45551: PUSH
45552: EMPTY
45553: LIST
45554: LIST
45555: PUSH
45556: LD_INT 2
45558: PUSH
45559: LD_INT 0
45561: PUSH
45562: EMPTY
45563: LIST
45564: LIST
45565: PUSH
45566: LD_INT 2
45568: PUSH
45569: LD_INT 1
45571: PUSH
45572: EMPTY
45573: LIST
45574: LIST
45575: PUSH
45576: LD_INT 2
45578: PUSH
45579: LD_INT 2
45581: PUSH
45582: EMPTY
45583: LIST
45584: LIST
45585: PUSH
45586: LD_INT 1
45588: PUSH
45589: LD_INT 2
45591: PUSH
45592: EMPTY
45593: LIST
45594: LIST
45595: PUSH
45596: LD_INT 0
45598: PUSH
45599: LD_INT 2
45601: PUSH
45602: EMPTY
45603: LIST
45604: LIST
45605: PUSH
45606: LD_INT 1
45608: NEG
45609: PUSH
45610: LD_INT 1
45612: PUSH
45613: EMPTY
45614: LIST
45615: LIST
45616: PUSH
45617: LD_INT 2
45619: NEG
45620: PUSH
45621: LD_INT 0
45623: PUSH
45624: EMPTY
45625: LIST
45626: LIST
45627: PUSH
45628: LD_INT 2
45630: NEG
45631: PUSH
45632: LD_INT 1
45634: NEG
45635: PUSH
45636: EMPTY
45637: LIST
45638: LIST
45639: PUSH
45640: LD_INT 2
45642: NEG
45643: PUSH
45644: LD_INT 2
45646: NEG
45647: PUSH
45648: EMPTY
45649: LIST
45650: LIST
45651: PUSH
45652: EMPTY
45653: LIST
45654: LIST
45655: LIST
45656: LIST
45657: LIST
45658: LIST
45659: LIST
45660: LIST
45661: LIST
45662: LIST
45663: LIST
45664: LIST
45665: LIST
45666: LIST
45667: LIST
45668: LIST
45669: LIST
45670: LIST
45671: LIST
45672: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
45673: LD_ADDR_VAR 0 23
45677: PUSH
45678: LD_INT 0
45680: PUSH
45681: LD_INT 0
45683: PUSH
45684: EMPTY
45685: LIST
45686: LIST
45687: PUSH
45688: LD_INT 0
45690: PUSH
45691: LD_INT 1
45693: NEG
45694: PUSH
45695: EMPTY
45696: LIST
45697: LIST
45698: PUSH
45699: LD_INT 1
45701: PUSH
45702: LD_INT 0
45704: PUSH
45705: EMPTY
45706: LIST
45707: LIST
45708: PUSH
45709: LD_INT 1
45711: PUSH
45712: LD_INT 1
45714: PUSH
45715: EMPTY
45716: LIST
45717: LIST
45718: PUSH
45719: LD_INT 0
45721: PUSH
45722: LD_INT 1
45724: PUSH
45725: EMPTY
45726: LIST
45727: LIST
45728: PUSH
45729: LD_INT 1
45731: NEG
45732: PUSH
45733: LD_INT 0
45735: PUSH
45736: EMPTY
45737: LIST
45738: LIST
45739: PUSH
45740: LD_INT 1
45742: NEG
45743: PUSH
45744: LD_INT 1
45746: NEG
45747: PUSH
45748: EMPTY
45749: LIST
45750: LIST
45751: PUSH
45752: LD_INT 1
45754: NEG
45755: PUSH
45756: LD_INT 2
45758: NEG
45759: PUSH
45760: EMPTY
45761: LIST
45762: LIST
45763: PUSH
45764: LD_INT 0
45766: PUSH
45767: LD_INT 2
45769: NEG
45770: PUSH
45771: EMPTY
45772: LIST
45773: LIST
45774: PUSH
45775: LD_INT 1
45777: PUSH
45778: LD_INT 1
45780: NEG
45781: PUSH
45782: EMPTY
45783: LIST
45784: LIST
45785: PUSH
45786: LD_INT 2
45788: PUSH
45789: LD_INT 0
45791: PUSH
45792: EMPTY
45793: LIST
45794: LIST
45795: PUSH
45796: LD_INT 2
45798: PUSH
45799: LD_INT 1
45801: PUSH
45802: EMPTY
45803: LIST
45804: LIST
45805: PUSH
45806: LD_INT 2
45808: PUSH
45809: LD_INT 2
45811: PUSH
45812: EMPTY
45813: LIST
45814: LIST
45815: PUSH
45816: LD_INT 1
45818: PUSH
45819: LD_INT 2
45821: PUSH
45822: EMPTY
45823: LIST
45824: LIST
45825: PUSH
45826: LD_INT 0
45828: PUSH
45829: LD_INT 2
45831: PUSH
45832: EMPTY
45833: LIST
45834: LIST
45835: PUSH
45836: LD_INT 1
45838: NEG
45839: PUSH
45840: LD_INT 1
45842: PUSH
45843: EMPTY
45844: LIST
45845: LIST
45846: PUSH
45847: LD_INT 2
45849: NEG
45850: PUSH
45851: LD_INT 0
45853: PUSH
45854: EMPTY
45855: LIST
45856: LIST
45857: PUSH
45858: LD_INT 2
45860: NEG
45861: PUSH
45862: LD_INT 1
45864: NEG
45865: PUSH
45866: EMPTY
45867: LIST
45868: LIST
45869: PUSH
45870: LD_INT 2
45872: NEG
45873: PUSH
45874: LD_INT 2
45876: NEG
45877: PUSH
45878: EMPTY
45879: LIST
45880: LIST
45881: PUSH
45882: LD_INT 2
45884: NEG
45885: PUSH
45886: LD_INT 3
45888: NEG
45889: PUSH
45890: EMPTY
45891: LIST
45892: LIST
45893: PUSH
45894: LD_INT 1
45896: NEG
45897: PUSH
45898: LD_INT 3
45900: NEG
45901: PUSH
45902: EMPTY
45903: LIST
45904: LIST
45905: PUSH
45906: LD_INT 1
45908: PUSH
45909: LD_INT 2
45911: NEG
45912: PUSH
45913: EMPTY
45914: LIST
45915: LIST
45916: PUSH
45917: LD_INT 2
45919: PUSH
45920: LD_INT 1
45922: NEG
45923: PUSH
45924: EMPTY
45925: LIST
45926: LIST
45927: PUSH
45928: EMPTY
45929: LIST
45930: LIST
45931: LIST
45932: LIST
45933: LIST
45934: LIST
45935: LIST
45936: LIST
45937: LIST
45938: LIST
45939: LIST
45940: LIST
45941: LIST
45942: LIST
45943: LIST
45944: LIST
45945: LIST
45946: LIST
45947: LIST
45948: LIST
45949: LIST
45950: LIST
45951: LIST
45952: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
45953: LD_ADDR_VAR 0 24
45957: PUSH
45958: LD_INT 0
45960: PUSH
45961: LD_INT 0
45963: PUSH
45964: EMPTY
45965: LIST
45966: LIST
45967: PUSH
45968: LD_INT 0
45970: PUSH
45971: LD_INT 1
45973: NEG
45974: PUSH
45975: EMPTY
45976: LIST
45977: LIST
45978: PUSH
45979: LD_INT 1
45981: PUSH
45982: LD_INT 0
45984: PUSH
45985: EMPTY
45986: LIST
45987: LIST
45988: PUSH
45989: LD_INT 1
45991: PUSH
45992: LD_INT 1
45994: PUSH
45995: EMPTY
45996: LIST
45997: LIST
45998: PUSH
45999: LD_INT 0
46001: PUSH
46002: LD_INT 1
46004: PUSH
46005: EMPTY
46006: LIST
46007: LIST
46008: PUSH
46009: LD_INT 1
46011: NEG
46012: PUSH
46013: LD_INT 0
46015: PUSH
46016: EMPTY
46017: LIST
46018: LIST
46019: PUSH
46020: LD_INT 1
46022: NEG
46023: PUSH
46024: LD_INT 1
46026: NEG
46027: PUSH
46028: EMPTY
46029: LIST
46030: LIST
46031: PUSH
46032: LD_INT 1
46034: NEG
46035: PUSH
46036: LD_INT 2
46038: NEG
46039: PUSH
46040: EMPTY
46041: LIST
46042: LIST
46043: PUSH
46044: LD_INT 0
46046: PUSH
46047: LD_INT 2
46049: NEG
46050: PUSH
46051: EMPTY
46052: LIST
46053: LIST
46054: PUSH
46055: LD_INT 1
46057: PUSH
46058: LD_INT 1
46060: NEG
46061: PUSH
46062: EMPTY
46063: LIST
46064: LIST
46065: PUSH
46066: LD_INT 2
46068: PUSH
46069: LD_INT 0
46071: PUSH
46072: EMPTY
46073: LIST
46074: LIST
46075: PUSH
46076: LD_INT 2
46078: PUSH
46079: LD_INT 1
46081: PUSH
46082: EMPTY
46083: LIST
46084: LIST
46085: PUSH
46086: LD_INT 2
46088: PUSH
46089: LD_INT 2
46091: PUSH
46092: EMPTY
46093: LIST
46094: LIST
46095: PUSH
46096: LD_INT 1
46098: PUSH
46099: LD_INT 2
46101: PUSH
46102: EMPTY
46103: LIST
46104: LIST
46105: PUSH
46106: LD_INT 0
46108: PUSH
46109: LD_INT 2
46111: PUSH
46112: EMPTY
46113: LIST
46114: LIST
46115: PUSH
46116: LD_INT 1
46118: NEG
46119: PUSH
46120: LD_INT 1
46122: PUSH
46123: EMPTY
46124: LIST
46125: LIST
46126: PUSH
46127: LD_INT 2
46129: NEG
46130: PUSH
46131: LD_INT 0
46133: PUSH
46134: EMPTY
46135: LIST
46136: LIST
46137: PUSH
46138: LD_INT 2
46140: NEG
46141: PUSH
46142: LD_INT 1
46144: NEG
46145: PUSH
46146: EMPTY
46147: LIST
46148: LIST
46149: PUSH
46150: LD_INT 2
46152: NEG
46153: PUSH
46154: LD_INT 2
46156: NEG
46157: PUSH
46158: EMPTY
46159: LIST
46160: LIST
46161: PUSH
46162: LD_INT 1
46164: PUSH
46165: LD_INT 2
46167: NEG
46168: PUSH
46169: EMPTY
46170: LIST
46171: LIST
46172: PUSH
46173: LD_INT 2
46175: PUSH
46176: LD_INT 1
46178: NEG
46179: PUSH
46180: EMPTY
46181: LIST
46182: LIST
46183: PUSH
46184: LD_INT 3
46186: PUSH
46187: LD_INT 1
46189: PUSH
46190: EMPTY
46191: LIST
46192: LIST
46193: PUSH
46194: LD_INT 3
46196: PUSH
46197: LD_INT 2
46199: PUSH
46200: EMPTY
46201: LIST
46202: LIST
46203: PUSH
46204: EMPTY
46205: LIST
46206: LIST
46207: LIST
46208: LIST
46209: LIST
46210: LIST
46211: LIST
46212: LIST
46213: LIST
46214: LIST
46215: LIST
46216: LIST
46217: LIST
46218: LIST
46219: LIST
46220: LIST
46221: LIST
46222: LIST
46223: LIST
46224: LIST
46225: LIST
46226: LIST
46227: LIST
46228: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
46229: LD_ADDR_VAR 0 25
46233: PUSH
46234: LD_INT 0
46236: PUSH
46237: LD_INT 0
46239: PUSH
46240: EMPTY
46241: LIST
46242: LIST
46243: PUSH
46244: LD_INT 0
46246: PUSH
46247: LD_INT 1
46249: NEG
46250: PUSH
46251: EMPTY
46252: LIST
46253: LIST
46254: PUSH
46255: LD_INT 1
46257: PUSH
46258: LD_INT 0
46260: PUSH
46261: EMPTY
46262: LIST
46263: LIST
46264: PUSH
46265: LD_INT 1
46267: PUSH
46268: LD_INT 1
46270: PUSH
46271: EMPTY
46272: LIST
46273: LIST
46274: PUSH
46275: LD_INT 0
46277: PUSH
46278: LD_INT 1
46280: PUSH
46281: EMPTY
46282: LIST
46283: LIST
46284: PUSH
46285: LD_INT 1
46287: NEG
46288: PUSH
46289: LD_INT 0
46291: PUSH
46292: EMPTY
46293: LIST
46294: LIST
46295: PUSH
46296: LD_INT 1
46298: NEG
46299: PUSH
46300: LD_INT 1
46302: NEG
46303: PUSH
46304: EMPTY
46305: LIST
46306: LIST
46307: PUSH
46308: LD_INT 1
46310: NEG
46311: PUSH
46312: LD_INT 2
46314: NEG
46315: PUSH
46316: EMPTY
46317: LIST
46318: LIST
46319: PUSH
46320: LD_INT 0
46322: PUSH
46323: LD_INT 2
46325: NEG
46326: PUSH
46327: EMPTY
46328: LIST
46329: LIST
46330: PUSH
46331: LD_INT 1
46333: PUSH
46334: LD_INT 1
46336: NEG
46337: PUSH
46338: EMPTY
46339: LIST
46340: LIST
46341: PUSH
46342: LD_INT 2
46344: PUSH
46345: LD_INT 0
46347: PUSH
46348: EMPTY
46349: LIST
46350: LIST
46351: PUSH
46352: LD_INT 2
46354: PUSH
46355: LD_INT 1
46357: PUSH
46358: EMPTY
46359: LIST
46360: LIST
46361: PUSH
46362: LD_INT 2
46364: PUSH
46365: LD_INT 2
46367: PUSH
46368: EMPTY
46369: LIST
46370: LIST
46371: PUSH
46372: LD_INT 1
46374: PUSH
46375: LD_INT 2
46377: PUSH
46378: EMPTY
46379: LIST
46380: LIST
46381: PUSH
46382: LD_INT 0
46384: PUSH
46385: LD_INT 2
46387: PUSH
46388: EMPTY
46389: LIST
46390: LIST
46391: PUSH
46392: LD_INT 1
46394: NEG
46395: PUSH
46396: LD_INT 1
46398: PUSH
46399: EMPTY
46400: LIST
46401: LIST
46402: PUSH
46403: LD_INT 2
46405: NEG
46406: PUSH
46407: LD_INT 0
46409: PUSH
46410: EMPTY
46411: LIST
46412: LIST
46413: PUSH
46414: LD_INT 2
46416: NEG
46417: PUSH
46418: LD_INT 1
46420: NEG
46421: PUSH
46422: EMPTY
46423: LIST
46424: LIST
46425: PUSH
46426: LD_INT 2
46428: NEG
46429: PUSH
46430: LD_INT 2
46432: NEG
46433: PUSH
46434: EMPTY
46435: LIST
46436: LIST
46437: PUSH
46438: LD_INT 3
46440: PUSH
46441: LD_INT 1
46443: PUSH
46444: EMPTY
46445: LIST
46446: LIST
46447: PUSH
46448: LD_INT 3
46450: PUSH
46451: LD_INT 2
46453: PUSH
46454: EMPTY
46455: LIST
46456: LIST
46457: PUSH
46458: LD_INT 2
46460: PUSH
46461: LD_INT 3
46463: PUSH
46464: EMPTY
46465: LIST
46466: LIST
46467: PUSH
46468: LD_INT 1
46470: PUSH
46471: LD_INT 3
46473: PUSH
46474: EMPTY
46475: LIST
46476: LIST
46477: PUSH
46478: EMPTY
46479: LIST
46480: LIST
46481: LIST
46482: LIST
46483: LIST
46484: LIST
46485: LIST
46486: LIST
46487: LIST
46488: LIST
46489: LIST
46490: LIST
46491: LIST
46492: LIST
46493: LIST
46494: LIST
46495: LIST
46496: LIST
46497: LIST
46498: LIST
46499: LIST
46500: LIST
46501: LIST
46502: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
46503: LD_ADDR_VAR 0 26
46507: PUSH
46508: LD_INT 0
46510: PUSH
46511: LD_INT 0
46513: PUSH
46514: EMPTY
46515: LIST
46516: LIST
46517: PUSH
46518: LD_INT 0
46520: PUSH
46521: LD_INT 1
46523: NEG
46524: PUSH
46525: EMPTY
46526: LIST
46527: LIST
46528: PUSH
46529: LD_INT 1
46531: PUSH
46532: LD_INT 0
46534: PUSH
46535: EMPTY
46536: LIST
46537: LIST
46538: PUSH
46539: LD_INT 1
46541: PUSH
46542: LD_INT 1
46544: PUSH
46545: EMPTY
46546: LIST
46547: LIST
46548: PUSH
46549: LD_INT 0
46551: PUSH
46552: LD_INT 1
46554: PUSH
46555: EMPTY
46556: LIST
46557: LIST
46558: PUSH
46559: LD_INT 1
46561: NEG
46562: PUSH
46563: LD_INT 0
46565: PUSH
46566: EMPTY
46567: LIST
46568: LIST
46569: PUSH
46570: LD_INT 1
46572: NEG
46573: PUSH
46574: LD_INT 1
46576: NEG
46577: PUSH
46578: EMPTY
46579: LIST
46580: LIST
46581: PUSH
46582: LD_INT 1
46584: NEG
46585: PUSH
46586: LD_INT 2
46588: NEG
46589: PUSH
46590: EMPTY
46591: LIST
46592: LIST
46593: PUSH
46594: LD_INT 0
46596: PUSH
46597: LD_INT 2
46599: NEG
46600: PUSH
46601: EMPTY
46602: LIST
46603: LIST
46604: PUSH
46605: LD_INT 1
46607: PUSH
46608: LD_INT 1
46610: NEG
46611: PUSH
46612: EMPTY
46613: LIST
46614: LIST
46615: PUSH
46616: LD_INT 2
46618: PUSH
46619: LD_INT 0
46621: PUSH
46622: EMPTY
46623: LIST
46624: LIST
46625: PUSH
46626: LD_INT 2
46628: PUSH
46629: LD_INT 1
46631: PUSH
46632: EMPTY
46633: LIST
46634: LIST
46635: PUSH
46636: LD_INT 2
46638: PUSH
46639: LD_INT 2
46641: PUSH
46642: EMPTY
46643: LIST
46644: LIST
46645: PUSH
46646: LD_INT 1
46648: PUSH
46649: LD_INT 2
46651: PUSH
46652: EMPTY
46653: LIST
46654: LIST
46655: PUSH
46656: LD_INT 0
46658: PUSH
46659: LD_INT 2
46661: PUSH
46662: EMPTY
46663: LIST
46664: LIST
46665: PUSH
46666: LD_INT 1
46668: NEG
46669: PUSH
46670: LD_INT 1
46672: PUSH
46673: EMPTY
46674: LIST
46675: LIST
46676: PUSH
46677: LD_INT 2
46679: NEG
46680: PUSH
46681: LD_INT 0
46683: PUSH
46684: EMPTY
46685: LIST
46686: LIST
46687: PUSH
46688: LD_INT 2
46690: NEG
46691: PUSH
46692: LD_INT 1
46694: NEG
46695: PUSH
46696: EMPTY
46697: LIST
46698: LIST
46699: PUSH
46700: LD_INT 2
46702: NEG
46703: PUSH
46704: LD_INT 2
46706: NEG
46707: PUSH
46708: EMPTY
46709: LIST
46710: LIST
46711: PUSH
46712: LD_INT 2
46714: PUSH
46715: LD_INT 3
46717: PUSH
46718: EMPTY
46719: LIST
46720: LIST
46721: PUSH
46722: LD_INT 1
46724: PUSH
46725: LD_INT 3
46727: PUSH
46728: EMPTY
46729: LIST
46730: LIST
46731: PUSH
46732: LD_INT 1
46734: NEG
46735: PUSH
46736: LD_INT 2
46738: PUSH
46739: EMPTY
46740: LIST
46741: LIST
46742: PUSH
46743: LD_INT 2
46745: NEG
46746: PUSH
46747: LD_INT 1
46749: PUSH
46750: EMPTY
46751: LIST
46752: LIST
46753: PUSH
46754: EMPTY
46755: LIST
46756: LIST
46757: LIST
46758: LIST
46759: LIST
46760: LIST
46761: LIST
46762: LIST
46763: LIST
46764: LIST
46765: LIST
46766: LIST
46767: LIST
46768: LIST
46769: LIST
46770: LIST
46771: LIST
46772: LIST
46773: LIST
46774: LIST
46775: LIST
46776: LIST
46777: LIST
46778: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
46779: LD_ADDR_VAR 0 27
46783: PUSH
46784: LD_INT 0
46786: PUSH
46787: LD_INT 0
46789: PUSH
46790: EMPTY
46791: LIST
46792: LIST
46793: PUSH
46794: LD_INT 0
46796: PUSH
46797: LD_INT 1
46799: NEG
46800: PUSH
46801: EMPTY
46802: LIST
46803: LIST
46804: PUSH
46805: LD_INT 1
46807: PUSH
46808: LD_INT 0
46810: PUSH
46811: EMPTY
46812: LIST
46813: LIST
46814: PUSH
46815: LD_INT 1
46817: PUSH
46818: LD_INT 1
46820: PUSH
46821: EMPTY
46822: LIST
46823: LIST
46824: PUSH
46825: LD_INT 0
46827: PUSH
46828: LD_INT 1
46830: PUSH
46831: EMPTY
46832: LIST
46833: LIST
46834: PUSH
46835: LD_INT 1
46837: NEG
46838: PUSH
46839: LD_INT 0
46841: PUSH
46842: EMPTY
46843: LIST
46844: LIST
46845: PUSH
46846: LD_INT 1
46848: NEG
46849: PUSH
46850: LD_INT 1
46852: NEG
46853: PUSH
46854: EMPTY
46855: LIST
46856: LIST
46857: PUSH
46858: LD_INT 1
46860: NEG
46861: PUSH
46862: LD_INT 2
46864: NEG
46865: PUSH
46866: EMPTY
46867: LIST
46868: LIST
46869: PUSH
46870: LD_INT 0
46872: PUSH
46873: LD_INT 2
46875: NEG
46876: PUSH
46877: EMPTY
46878: LIST
46879: LIST
46880: PUSH
46881: LD_INT 1
46883: PUSH
46884: LD_INT 1
46886: NEG
46887: PUSH
46888: EMPTY
46889: LIST
46890: LIST
46891: PUSH
46892: LD_INT 2
46894: PUSH
46895: LD_INT 0
46897: PUSH
46898: EMPTY
46899: LIST
46900: LIST
46901: PUSH
46902: LD_INT 2
46904: PUSH
46905: LD_INT 1
46907: PUSH
46908: EMPTY
46909: LIST
46910: LIST
46911: PUSH
46912: LD_INT 2
46914: PUSH
46915: LD_INT 2
46917: PUSH
46918: EMPTY
46919: LIST
46920: LIST
46921: PUSH
46922: LD_INT 1
46924: PUSH
46925: LD_INT 2
46927: PUSH
46928: EMPTY
46929: LIST
46930: LIST
46931: PUSH
46932: LD_INT 0
46934: PUSH
46935: LD_INT 2
46937: PUSH
46938: EMPTY
46939: LIST
46940: LIST
46941: PUSH
46942: LD_INT 1
46944: NEG
46945: PUSH
46946: LD_INT 1
46948: PUSH
46949: EMPTY
46950: LIST
46951: LIST
46952: PUSH
46953: LD_INT 2
46955: NEG
46956: PUSH
46957: LD_INT 0
46959: PUSH
46960: EMPTY
46961: LIST
46962: LIST
46963: PUSH
46964: LD_INT 2
46966: NEG
46967: PUSH
46968: LD_INT 1
46970: NEG
46971: PUSH
46972: EMPTY
46973: LIST
46974: LIST
46975: PUSH
46976: LD_INT 2
46978: NEG
46979: PUSH
46980: LD_INT 2
46982: NEG
46983: PUSH
46984: EMPTY
46985: LIST
46986: LIST
46987: PUSH
46988: LD_INT 1
46990: NEG
46991: PUSH
46992: LD_INT 2
46994: PUSH
46995: EMPTY
46996: LIST
46997: LIST
46998: PUSH
46999: LD_INT 2
47001: NEG
47002: PUSH
47003: LD_INT 1
47005: PUSH
47006: EMPTY
47007: LIST
47008: LIST
47009: PUSH
47010: LD_INT 3
47012: NEG
47013: PUSH
47014: LD_INT 1
47016: NEG
47017: PUSH
47018: EMPTY
47019: LIST
47020: LIST
47021: PUSH
47022: LD_INT 3
47024: NEG
47025: PUSH
47026: LD_INT 2
47028: NEG
47029: PUSH
47030: EMPTY
47031: LIST
47032: LIST
47033: PUSH
47034: EMPTY
47035: LIST
47036: LIST
47037: LIST
47038: LIST
47039: LIST
47040: LIST
47041: LIST
47042: LIST
47043: LIST
47044: LIST
47045: LIST
47046: LIST
47047: LIST
47048: LIST
47049: LIST
47050: LIST
47051: LIST
47052: LIST
47053: LIST
47054: LIST
47055: LIST
47056: LIST
47057: LIST
47058: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47059: LD_ADDR_VAR 0 28
47063: PUSH
47064: LD_INT 0
47066: PUSH
47067: LD_INT 0
47069: PUSH
47070: EMPTY
47071: LIST
47072: LIST
47073: PUSH
47074: LD_INT 0
47076: PUSH
47077: LD_INT 1
47079: NEG
47080: PUSH
47081: EMPTY
47082: LIST
47083: LIST
47084: PUSH
47085: LD_INT 1
47087: PUSH
47088: LD_INT 0
47090: PUSH
47091: EMPTY
47092: LIST
47093: LIST
47094: PUSH
47095: LD_INT 1
47097: PUSH
47098: LD_INT 1
47100: PUSH
47101: EMPTY
47102: LIST
47103: LIST
47104: PUSH
47105: LD_INT 0
47107: PUSH
47108: LD_INT 1
47110: PUSH
47111: EMPTY
47112: LIST
47113: LIST
47114: PUSH
47115: LD_INT 1
47117: NEG
47118: PUSH
47119: LD_INT 0
47121: PUSH
47122: EMPTY
47123: LIST
47124: LIST
47125: PUSH
47126: LD_INT 1
47128: NEG
47129: PUSH
47130: LD_INT 1
47132: NEG
47133: PUSH
47134: EMPTY
47135: LIST
47136: LIST
47137: PUSH
47138: LD_INT 1
47140: NEG
47141: PUSH
47142: LD_INT 2
47144: NEG
47145: PUSH
47146: EMPTY
47147: LIST
47148: LIST
47149: PUSH
47150: LD_INT 0
47152: PUSH
47153: LD_INT 2
47155: NEG
47156: PUSH
47157: EMPTY
47158: LIST
47159: LIST
47160: PUSH
47161: LD_INT 1
47163: PUSH
47164: LD_INT 1
47166: NEG
47167: PUSH
47168: EMPTY
47169: LIST
47170: LIST
47171: PUSH
47172: LD_INT 2
47174: PUSH
47175: LD_INT 0
47177: PUSH
47178: EMPTY
47179: LIST
47180: LIST
47181: PUSH
47182: LD_INT 2
47184: PUSH
47185: LD_INT 1
47187: PUSH
47188: EMPTY
47189: LIST
47190: LIST
47191: PUSH
47192: LD_INT 2
47194: PUSH
47195: LD_INT 2
47197: PUSH
47198: EMPTY
47199: LIST
47200: LIST
47201: PUSH
47202: LD_INT 1
47204: PUSH
47205: LD_INT 2
47207: PUSH
47208: EMPTY
47209: LIST
47210: LIST
47211: PUSH
47212: LD_INT 0
47214: PUSH
47215: LD_INT 2
47217: PUSH
47218: EMPTY
47219: LIST
47220: LIST
47221: PUSH
47222: LD_INT 1
47224: NEG
47225: PUSH
47226: LD_INT 1
47228: PUSH
47229: EMPTY
47230: LIST
47231: LIST
47232: PUSH
47233: LD_INT 2
47235: NEG
47236: PUSH
47237: LD_INT 0
47239: PUSH
47240: EMPTY
47241: LIST
47242: LIST
47243: PUSH
47244: LD_INT 2
47246: NEG
47247: PUSH
47248: LD_INT 1
47250: NEG
47251: PUSH
47252: EMPTY
47253: LIST
47254: LIST
47255: PUSH
47256: LD_INT 2
47258: NEG
47259: PUSH
47260: LD_INT 2
47262: NEG
47263: PUSH
47264: EMPTY
47265: LIST
47266: LIST
47267: PUSH
47268: LD_INT 2
47270: NEG
47271: PUSH
47272: LD_INT 3
47274: NEG
47275: PUSH
47276: EMPTY
47277: LIST
47278: LIST
47279: PUSH
47280: LD_INT 1
47282: NEG
47283: PUSH
47284: LD_INT 3
47286: NEG
47287: PUSH
47288: EMPTY
47289: LIST
47290: LIST
47291: PUSH
47292: LD_INT 3
47294: NEG
47295: PUSH
47296: LD_INT 1
47298: NEG
47299: PUSH
47300: EMPTY
47301: LIST
47302: LIST
47303: PUSH
47304: LD_INT 3
47306: NEG
47307: PUSH
47308: LD_INT 2
47310: NEG
47311: PUSH
47312: EMPTY
47313: LIST
47314: LIST
47315: PUSH
47316: EMPTY
47317: LIST
47318: LIST
47319: LIST
47320: LIST
47321: LIST
47322: LIST
47323: LIST
47324: LIST
47325: LIST
47326: LIST
47327: LIST
47328: LIST
47329: LIST
47330: LIST
47331: LIST
47332: LIST
47333: LIST
47334: LIST
47335: LIST
47336: LIST
47337: LIST
47338: LIST
47339: LIST
47340: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47341: LD_ADDR_VAR 0 29
47345: PUSH
47346: LD_INT 0
47348: PUSH
47349: LD_INT 0
47351: PUSH
47352: EMPTY
47353: LIST
47354: LIST
47355: PUSH
47356: LD_INT 0
47358: PUSH
47359: LD_INT 1
47361: NEG
47362: PUSH
47363: EMPTY
47364: LIST
47365: LIST
47366: PUSH
47367: LD_INT 1
47369: PUSH
47370: LD_INT 0
47372: PUSH
47373: EMPTY
47374: LIST
47375: LIST
47376: PUSH
47377: LD_INT 1
47379: PUSH
47380: LD_INT 1
47382: PUSH
47383: EMPTY
47384: LIST
47385: LIST
47386: PUSH
47387: LD_INT 0
47389: PUSH
47390: LD_INT 1
47392: PUSH
47393: EMPTY
47394: LIST
47395: LIST
47396: PUSH
47397: LD_INT 1
47399: NEG
47400: PUSH
47401: LD_INT 0
47403: PUSH
47404: EMPTY
47405: LIST
47406: LIST
47407: PUSH
47408: LD_INT 1
47410: NEG
47411: PUSH
47412: LD_INT 1
47414: NEG
47415: PUSH
47416: EMPTY
47417: LIST
47418: LIST
47419: PUSH
47420: LD_INT 1
47422: NEG
47423: PUSH
47424: LD_INT 2
47426: NEG
47427: PUSH
47428: EMPTY
47429: LIST
47430: LIST
47431: PUSH
47432: LD_INT 0
47434: PUSH
47435: LD_INT 2
47437: NEG
47438: PUSH
47439: EMPTY
47440: LIST
47441: LIST
47442: PUSH
47443: LD_INT 1
47445: PUSH
47446: LD_INT 1
47448: NEG
47449: PUSH
47450: EMPTY
47451: LIST
47452: LIST
47453: PUSH
47454: LD_INT 2
47456: PUSH
47457: LD_INT 0
47459: PUSH
47460: EMPTY
47461: LIST
47462: LIST
47463: PUSH
47464: LD_INT 2
47466: PUSH
47467: LD_INT 1
47469: PUSH
47470: EMPTY
47471: LIST
47472: LIST
47473: PUSH
47474: LD_INT 1
47476: PUSH
47477: LD_INT 2
47479: PUSH
47480: EMPTY
47481: LIST
47482: LIST
47483: PUSH
47484: LD_INT 0
47486: PUSH
47487: LD_INT 2
47489: PUSH
47490: EMPTY
47491: LIST
47492: LIST
47493: PUSH
47494: LD_INT 1
47496: NEG
47497: PUSH
47498: LD_INT 1
47500: PUSH
47501: EMPTY
47502: LIST
47503: LIST
47504: PUSH
47505: LD_INT 2
47507: NEG
47508: PUSH
47509: LD_INT 1
47511: NEG
47512: PUSH
47513: EMPTY
47514: LIST
47515: LIST
47516: PUSH
47517: LD_INT 2
47519: NEG
47520: PUSH
47521: LD_INT 2
47523: NEG
47524: PUSH
47525: EMPTY
47526: LIST
47527: LIST
47528: PUSH
47529: LD_INT 2
47531: NEG
47532: PUSH
47533: LD_INT 3
47535: NEG
47536: PUSH
47537: EMPTY
47538: LIST
47539: LIST
47540: PUSH
47541: LD_INT 2
47543: PUSH
47544: LD_INT 1
47546: NEG
47547: PUSH
47548: EMPTY
47549: LIST
47550: LIST
47551: PUSH
47552: LD_INT 3
47554: PUSH
47555: LD_INT 1
47557: PUSH
47558: EMPTY
47559: LIST
47560: LIST
47561: PUSH
47562: LD_INT 1
47564: PUSH
47565: LD_INT 3
47567: PUSH
47568: EMPTY
47569: LIST
47570: LIST
47571: PUSH
47572: LD_INT 1
47574: NEG
47575: PUSH
47576: LD_INT 2
47578: PUSH
47579: EMPTY
47580: LIST
47581: LIST
47582: PUSH
47583: LD_INT 3
47585: NEG
47586: PUSH
47587: LD_INT 2
47589: NEG
47590: PUSH
47591: EMPTY
47592: LIST
47593: LIST
47594: PUSH
47595: EMPTY
47596: LIST
47597: LIST
47598: LIST
47599: LIST
47600: LIST
47601: LIST
47602: LIST
47603: LIST
47604: LIST
47605: LIST
47606: LIST
47607: LIST
47608: LIST
47609: LIST
47610: LIST
47611: LIST
47612: LIST
47613: LIST
47614: LIST
47615: LIST
47616: LIST
47617: LIST
47618: LIST
47619: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47620: LD_ADDR_VAR 0 30
47624: PUSH
47625: LD_INT 0
47627: PUSH
47628: LD_INT 0
47630: PUSH
47631: EMPTY
47632: LIST
47633: LIST
47634: PUSH
47635: LD_INT 0
47637: PUSH
47638: LD_INT 1
47640: NEG
47641: PUSH
47642: EMPTY
47643: LIST
47644: LIST
47645: PUSH
47646: LD_INT 1
47648: PUSH
47649: LD_INT 0
47651: PUSH
47652: EMPTY
47653: LIST
47654: LIST
47655: PUSH
47656: LD_INT 1
47658: PUSH
47659: LD_INT 1
47661: PUSH
47662: EMPTY
47663: LIST
47664: LIST
47665: PUSH
47666: LD_INT 0
47668: PUSH
47669: LD_INT 1
47671: PUSH
47672: EMPTY
47673: LIST
47674: LIST
47675: PUSH
47676: LD_INT 1
47678: NEG
47679: PUSH
47680: LD_INT 0
47682: PUSH
47683: EMPTY
47684: LIST
47685: LIST
47686: PUSH
47687: LD_INT 1
47689: NEG
47690: PUSH
47691: LD_INT 1
47693: NEG
47694: PUSH
47695: EMPTY
47696: LIST
47697: LIST
47698: PUSH
47699: LD_INT 1
47701: NEG
47702: PUSH
47703: LD_INT 2
47705: NEG
47706: PUSH
47707: EMPTY
47708: LIST
47709: LIST
47710: PUSH
47711: LD_INT 0
47713: PUSH
47714: LD_INT 2
47716: NEG
47717: PUSH
47718: EMPTY
47719: LIST
47720: LIST
47721: PUSH
47722: LD_INT 1
47724: PUSH
47725: LD_INT 1
47727: NEG
47728: PUSH
47729: EMPTY
47730: LIST
47731: LIST
47732: PUSH
47733: LD_INT 2
47735: PUSH
47736: LD_INT 0
47738: PUSH
47739: EMPTY
47740: LIST
47741: LIST
47742: PUSH
47743: LD_INT 2
47745: PUSH
47746: LD_INT 1
47748: PUSH
47749: EMPTY
47750: LIST
47751: LIST
47752: PUSH
47753: LD_INT 2
47755: PUSH
47756: LD_INT 2
47758: PUSH
47759: EMPTY
47760: LIST
47761: LIST
47762: PUSH
47763: LD_INT 1
47765: PUSH
47766: LD_INT 2
47768: PUSH
47769: EMPTY
47770: LIST
47771: LIST
47772: PUSH
47773: LD_INT 1
47775: NEG
47776: PUSH
47777: LD_INT 1
47779: PUSH
47780: EMPTY
47781: LIST
47782: LIST
47783: PUSH
47784: LD_INT 2
47786: NEG
47787: PUSH
47788: LD_INT 0
47790: PUSH
47791: EMPTY
47792: LIST
47793: LIST
47794: PUSH
47795: LD_INT 2
47797: NEG
47798: PUSH
47799: LD_INT 1
47801: NEG
47802: PUSH
47803: EMPTY
47804: LIST
47805: LIST
47806: PUSH
47807: LD_INT 1
47809: NEG
47810: PUSH
47811: LD_INT 3
47813: NEG
47814: PUSH
47815: EMPTY
47816: LIST
47817: LIST
47818: PUSH
47819: LD_INT 1
47821: PUSH
47822: LD_INT 2
47824: NEG
47825: PUSH
47826: EMPTY
47827: LIST
47828: LIST
47829: PUSH
47830: LD_INT 3
47832: PUSH
47833: LD_INT 2
47835: PUSH
47836: EMPTY
47837: LIST
47838: LIST
47839: PUSH
47840: LD_INT 2
47842: PUSH
47843: LD_INT 3
47845: PUSH
47846: EMPTY
47847: LIST
47848: LIST
47849: PUSH
47850: LD_INT 2
47852: NEG
47853: PUSH
47854: LD_INT 1
47856: PUSH
47857: EMPTY
47858: LIST
47859: LIST
47860: PUSH
47861: LD_INT 3
47863: NEG
47864: PUSH
47865: LD_INT 1
47867: NEG
47868: PUSH
47869: EMPTY
47870: LIST
47871: LIST
47872: PUSH
47873: EMPTY
47874: LIST
47875: LIST
47876: LIST
47877: LIST
47878: LIST
47879: LIST
47880: LIST
47881: LIST
47882: LIST
47883: LIST
47884: LIST
47885: LIST
47886: LIST
47887: LIST
47888: LIST
47889: LIST
47890: LIST
47891: LIST
47892: LIST
47893: LIST
47894: LIST
47895: LIST
47896: LIST
47897: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47898: LD_ADDR_VAR 0 31
47902: PUSH
47903: LD_INT 0
47905: PUSH
47906: LD_INT 0
47908: PUSH
47909: EMPTY
47910: LIST
47911: LIST
47912: PUSH
47913: LD_INT 0
47915: PUSH
47916: LD_INT 1
47918: NEG
47919: PUSH
47920: EMPTY
47921: LIST
47922: LIST
47923: PUSH
47924: LD_INT 1
47926: PUSH
47927: LD_INT 0
47929: PUSH
47930: EMPTY
47931: LIST
47932: LIST
47933: PUSH
47934: LD_INT 1
47936: PUSH
47937: LD_INT 1
47939: PUSH
47940: EMPTY
47941: LIST
47942: LIST
47943: PUSH
47944: LD_INT 0
47946: PUSH
47947: LD_INT 1
47949: PUSH
47950: EMPTY
47951: LIST
47952: LIST
47953: PUSH
47954: LD_INT 1
47956: NEG
47957: PUSH
47958: LD_INT 0
47960: PUSH
47961: EMPTY
47962: LIST
47963: LIST
47964: PUSH
47965: LD_INT 1
47967: NEG
47968: PUSH
47969: LD_INT 1
47971: NEG
47972: PUSH
47973: EMPTY
47974: LIST
47975: LIST
47976: PUSH
47977: LD_INT 1
47979: NEG
47980: PUSH
47981: LD_INT 2
47983: NEG
47984: PUSH
47985: EMPTY
47986: LIST
47987: LIST
47988: PUSH
47989: LD_INT 1
47991: PUSH
47992: LD_INT 1
47994: NEG
47995: PUSH
47996: EMPTY
47997: LIST
47998: LIST
47999: PUSH
48000: LD_INT 2
48002: PUSH
48003: LD_INT 0
48005: PUSH
48006: EMPTY
48007: LIST
48008: LIST
48009: PUSH
48010: LD_INT 2
48012: PUSH
48013: LD_INT 1
48015: PUSH
48016: EMPTY
48017: LIST
48018: LIST
48019: PUSH
48020: LD_INT 2
48022: PUSH
48023: LD_INT 2
48025: PUSH
48026: EMPTY
48027: LIST
48028: LIST
48029: PUSH
48030: LD_INT 1
48032: PUSH
48033: LD_INT 2
48035: PUSH
48036: EMPTY
48037: LIST
48038: LIST
48039: PUSH
48040: LD_INT 0
48042: PUSH
48043: LD_INT 2
48045: PUSH
48046: EMPTY
48047: LIST
48048: LIST
48049: PUSH
48050: LD_INT 1
48052: NEG
48053: PUSH
48054: LD_INT 1
48056: PUSH
48057: EMPTY
48058: LIST
48059: LIST
48060: PUSH
48061: LD_INT 2
48063: NEG
48064: PUSH
48065: LD_INT 1
48067: NEG
48068: PUSH
48069: EMPTY
48070: LIST
48071: LIST
48072: PUSH
48073: LD_INT 2
48075: NEG
48076: PUSH
48077: LD_INT 2
48079: NEG
48080: PUSH
48081: EMPTY
48082: LIST
48083: LIST
48084: PUSH
48085: LD_INT 2
48087: NEG
48088: PUSH
48089: LD_INT 3
48091: NEG
48092: PUSH
48093: EMPTY
48094: LIST
48095: LIST
48096: PUSH
48097: LD_INT 2
48099: PUSH
48100: LD_INT 1
48102: NEG
48103: PUSH
48104: EMPTY
48105: LIST
48106: LIST
48107: PUSH
48108: LD_INT 3
48110: PUSH
48111: LD_INT 1
48113: PUSH
48114: EMPTY
48115: LIST
48116: LIST
48117: PUSH
48118: LD_INT 1
48120: PUSH
48121: LD_INT 3
48123: PUSH
48124: EMPTY
48125: LIST
48126: LIST
48127: PUSH
48128: LD_INT 1
48130: NEG
48131: PUSH
48132: LD_INT 2
48134: PUSH
48135: EMPTY
48136: LIST
48137: LIST
48138: PUSH
48139: LD_INT 3
48141: NEG
48142: PUSH
48143: LD_INT 2
48145: NEG
48146: PUSH
48147: EMPTY
48148: LIST
48149: LIST
48150: PUSH
48151: EMPTY
48152: LIST
48153: LIST
48154: LIST
48155: LIST
48156: LIST
48157: LIST
48158: LIST
48159: LIST
48160: LIST
48161: LIST
48162: LIST
48163: LIST
48164: LIST
48165: LIST
48166: LIST
48167: LIST
48168: LIST
48169: LIST
48170: LIST
48171: LIST
48172: LIST
48173: LIST
48174: LIST
48175: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48176: LD_ADDR_VAR 0 32
48180: PUSH
48181: LD_INT 0
48183: PUSH
48184: LD_INT 0
48186: PUSH
48187: EMPTY
48188: LIST
48189: LIST
48190: PUSH
48191: LD_INT 0
48193: PUSH
48194: LD_INT 1
48196: NEG
48197: PUSH
48198: EMPTY
48199: LIST
48200: LIST
48201: PUSH
48202: LD_INT 1
48204: PUSH
48205: LD_INT 0
48207: PUSH
48208: EMPTY
48209: LIST
48210: LIST
48211: PUSH
48212: LD_INT 1
48214: PUSH
48215: LD_INT 1
48217: PUSH
48218: EMPTY
48219: LIST
48220: LIST
48221: PUSH
48222: LD_INT 0
48224: PUSH
48225: LD_INT 1
48227: PUSH
48228: EMPTY
48229: LIST
48230: LIST
48231: PUSH
48232: LD_INT 1
48234: NEG
48235: PUSH
48236: LD_INT 0
48238: PUSH
48239: EMPTY
48240: LIST
48241: LIST
48242: PUSH
48243: LD_INT 1
48245: NEG
48246: PUSH
48247: LD_INT 1
48249: NEG
48250: PUSH
48251: EMPTY
48252: LIST
48253: LIST
48254: PUSH
48255: LD_INT 1
48257: NEG
48258: PUSH
48259: LD_INT 2
48261: NEG
48262: PUSH
48263: EMPTY
48264: LIST
48265: LIST
48266: PUSH
48267: LD_INT 0
48269: PUSH
48270: LD_INT 2
48272: NEG
48273: PUSH
48274: EMPTY
48275: LIST
48276: LIST
48277: PUSH
48278: LD_INT 1
48280: PUSH
48281: LD_INT 1
48283: NEG
48284: PUSH
48285: EMPTY
48286: LIST
48287: LIST
48288: PUSH
48289: LD_INT 2
48291: PUSH
48292: LD_INT 1
48294: PUSH
48295: EMPTY
48296: LIST
48297: LIST
48298: PUSH
48299: LD_INT 2
48301: PUSH
48302: LD_INT 2
48304: PUSH
48305: EMPTY
48306: LIST
48307: LIST
48308: PUSH
48309: LD_INT 1
48311: PUSH
48312: LD_INT 2
48314: PUSH
48315: EMPTY
48316: LIST
48317: LIST
48318: PUSH
48319: LD_INT 0
48321: PUSH
48322: LD_INT 2
48324: PUSH
48325: EMPTY
48326: LIST
48327: LIST
48328: PUSH
48329: LD_INT 1
48331: NEG
48332: PUSH
48333: LD_INT 1
48335: PUSH
48336: EMPTY
48337: LIST
48338: LIST
48339: PUSH
48340: LD_INT 2
48342: NEG
48343: PUSH
48344: LD_INT 0
48346: PUSH
48347: EMPTY
48348: LIST
48349: LIST
48350: PUSH
48351: LD_INT 2
48353: NEG
48354: PUSH
48355: LD_INT 1
48357: NEG
48358: PUSH
48359: EMPTY
48360: LIST
48361: LIST
48362: PUSH
48363: LD_INT 1
48365: NEG
48366: PUSH
48367: LD_INT 3
48369: NEG
48370: PUSH
48371: EMPTY
48372: LIST
48373: LIST
48374: PUSH
48375: LD_INT 1
48377: PUSH
48378: LD_INT 2
48380: NEG
48381: PUSH
48382: EMPTY
48383: LIST
48384: LIST
48385: PUSH
48386: LD_INT 3
48388: PUSH
48389: LD_INT 2
48391: PUSH
48392: EMPTY
48393: LIST
48394: LIST
48395: PUSH
48396: LD_INT 2
48398: PUSH
48399: LD_INT 3
48401: PUSH
48402: EMPTY
48403: LIST
48404: LIST
48405: PUSH
48406: LD_INT 2
48408: NEG
48409: PUSH
48410: LD_INT 1
48412: PUSH
48413: EMPTY
48414: LIST
48415: LIST
48416: PUSH
48417: LD_INT 3
48419: NEG
48420: PUSH
48421: LD_INT 1
48423: NEG
48424: PUSH
48425: EMPTY
48426: LIST
48427: LIST
48428: PUSH
48429: EMPTY
48430: LIST
48431: LIST
48432: LIST
48433: LIST
48434: LIST
48435: LIST
48436: LIST
48437: LIST
48438: LIST
48439: LIST
48440: LIST
48441: LIST
48442: LIST
48443: LIST
48444: LIST
48445: LIST
48446: LIST
48447: LIST
48448: LIST
48449: LIST
48450: LIST
48451: LIST
48452: LIST
48453: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48454: LD_ADDR_VAR 0 33
48458: PUSH
48459: LD_INT 0
48461: PUSH
48462: LD_INT 0
48464: PUSH
48465: EMPTY
48466: LIST
48467: LIST
48468: PUSH
48469: LD_INT 0
48471: PUSH
48472: LD_INT 1
48474: NEG
48475: PUSH
48476: EMPTY
48477: LIST
48478: LIST
48479: PUSH
48480: LD_INT 1
48482: PUSH
48483: LD_INT 0
48485: PUSH
48486: EMPTY
48487: LIST
48488: LIST
48489: PUSH
48490: LD_INT 1
48492: PUSH
48493: LD_INT 1
48495: PUSH
48496: EMPTY
48497: LIST
48498: LIST
48499: PUSH
48500: LD_INT 0
48502: PUSH
48503: LD_INT 1
48505: PUSH
48506: EMPTY
48507: LIST
48508: LIST
48509: PUSH
48510: LD_INT 1
48512: NEG
48513: PUSH
48514: LD_INT 0
48516: PUSH
48517: EMPTY
48518: LIST
48519: LIST
48520: PUSH
48521: LD_INT 1
48523: NEG
48524: PUSH
48525: LD_INT 1
48527: NEG
48528: PUSH
48529: EMPTY
48530: LIST
48531: LIST
48532: PUSH
48533: LD_INT 1
48535: NEG
48536: PUSH
48537: LD_INT 2
48539: NEG
48540: PUSH
48541: EMPTY
48542: LIST
48543: LIST
48544: PUSH
48545: LD_INT 1
48547: PUSH
48548: LD_INT 1
48550: NEG
48551: PUSH
48552: EMPTY
48553: LIST
48554: LIST
48555: PUSH
48556: LD_INT 2
48558: PUSH
48559: LD_INT 0
48561: PUSH
48562: EMPTY
48563: LIST
48564: LIST
48565: PUSH
48566: LD_INT 2
48568: PUSH
48569: LD_INT 1
48571: PUSH
48572: EMPTY
48573: LIST
48574: LIST
48575: PUSH
48576: LD_INT 1
48578: PUSH
48579: LD_INT 2
48581: PUSH
48582: EMPTY
48583: LIST
48584: LIST
48585: PUSH
48586: LD_INT 0
48588: PUSH
48589: LD_INT 2
48591: PUSH
48592: EMPTY
48593: LIST
48594: LIST
48595: PUSH
48596: LD_INT 1
48598: NEG
48599: PUSH
48600: LD_INT 1
48602: PUSH
48603: EMPTY
48604: LIST
48605: LIST
48606: PUSH
48607: LD_INT 2
48609: NEG
48610: PUSH
48611: LD_INT 0
48613: PUSH
48614: EMPTY
48615: LIST
48616: LIST
48617: PUSH
48618: LD_INT 2
48620: NEG
48621: PUSH
48622: LD_INT 1
48624: NEG
48625: PUSH
48626: EMPTY
48627: LIST
48628: LIST
48629: PUSH
48630: LD_INT 2
48632: NEG
48633: PUSH
48634: LD_INT 2
48636: NEG
48637: PUSH
48638: EMPTY
48639: LIST
48640: LIST
48641: PUSH
48642: LD_INT 2
48644: NEG
48645: PUSH
48646: LD_INT 3
48648: NEG
48649: PUSH
48650: EMPTY
48651: LIST
48652: LIST
48653: PUSH
48654: LD_INT 2
48656: PUSH
48657: LD_INT 1
48659: NEG
48660: PUSH
48661: EMPTY
48662: LIST
48663: LIST
48664: PUSH
48665: LD_INT 3
48667: PUSH
48668: LD_INT 1
48670: PUSH
48671: EMPTY
48672: LIST
48673: LIST
48674: PUSH
48675: LD_INT 1
48677: PUSH
48678: LD_INT 3
48680: PUSH
48681: EMPTY
48682: LIST
48683: LIST
48684: PUSH
48685: LD_INT 1
48687: NEG
48688: PUSH
48689: LD_INT 2
48691: PUSH
48692: EMPTY
48693: LIST
48694: LIST
48695: PUSH
48696: LD_INT 3
48698: NEG
48699: PUSH
48700: LD_INT 2
48702: NEG
48703: PUSH
48704: EMPTY
48705: LIST
48706: LIST
48707: PUSH
48708: EMPTY
48709: LIST
48710: LIST
48711: LIST
48712: LIST
48713: LIST
48714: LIST
48715: LIST
48716: LIST
48717: LIST
48718: LIST
48719: LIST
48720: LIST
48721: LIST
48722: LIST
48723: LIST
48724: LIST
48725: LIST
48726: LIST
48727: LIST
48728: LIST
48729: LIST
48730: LIST
48731: LIST
48732: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48733: LD_ADDR_VAR 0 34
48737: PUSH
48738: LD_INT 0
48740: PUSH
48741: LD_INT 0
48743: PUSH
48744: EMPTY
48745: LIST
48746: LIST
48747: PUSH
48748: LD_INT 0
48750: PUSH
48751: LD_INT 1
48753: NEG
48754: PUSH
48755: EMPTY
48756: LIST
48757: LIST
48758: PUSH
48759: LD_INT 1
48761: PUSH
48762: LD_INT 0
48764: PUSH
48765: EMPTY
48766: LIST
48767: LIST
48768: PUSH
48769: LD_INT 1
48771: PUSH
48772: LD_INT 1
48774: PUSH
48775: EMPTY
48776: LIST
48777: LIST
48778: PUSH
48779: LD_INT 0
48781: PUSH
48782: LD_INT 1
48784: PUSH
48785: EMPTY
48786: LIST
48787: LIST
48788: PUSH
48789: LD_INT 1
48791: NEG
48792: PUSH
48793: LD_INT 0
48795: PUSH
48796: EMPTY
48797: LIST
48798: LIST
48799: PUSH
48800: LD_INT 1
48802: NEG
48803: PUSH
48804: LD_INT 1
48806: NEG
48807: PUSH
48808: EMPTY
48809: LIST
48810: LIST
48811: PUSH
48812: LD_INT 1
48814: NEG
48815: PUSH
48816: LD_INT 2
48818: NEG
48819: PUSH
48820: EMPTY
48821: LIST
48822: LIST
48823: PUSH
48824: LD_INT 0
48826: PUSH
48827: LD_INT 2
48829: NEG
48830: PUSH
48831: EMPTY
48832: LIST
48833: LIST
48834: PUSH
48835: LD_INT 1
48837: PUSH
48838: LD_INT 1
48840: NEG
48841: PUSH
48842: EMPTY
48843: LIST
48844: LIST
48845: PUSH
48846: LD_INT 2
48848: PUSH
48849: LD_INT 1
48851: PUSH
48852: EMPTY
48853: LIST
48854: LIST
48855: PUSH
48856: LD_INT 2
48858: PUSH
48859: LD_INT 2
48861: PUSH
48862: EMPTY
48863: LIST
48864: LIST
48865: PUSH
48866: LD_INT 1
48868: PUSH
48869: LD_INT 2
48871: PUSH
48872: EMPTY
48873: LIST
48874: LIST
48875: PUSH
48876: LD_INT 1
48878: NEG
48879: PUSH
48880: LD_INT 1
48882: PUSH
48883: EMPTY
48884: LIST
48885: LIST
48886: PUSH
48887: LD_INT 2
48889: NEG
48890: PUSH
48891: LD_INT 0
48893: PUSH
48894: EMPTY
48895: LIST
48896: LIST
48897: PUSH
48898: LD_INT 2
48900: NEG
48901: PUSH
48902: LD_INT 1
48904: NEG
48905: PUSH
48906: EMPTY
48907: LIST
48908: LIST
48909: PUSH
48910: LD_INT 2
48912: NEG
48913: PUSH
48914: LD_INT 2
48916: NEG
48917: PUSH
48918: EMPTY
48919: LIST
48920: LIST
48921: PUSH
48922: LD_INT 1
48924: NEG
48925: PUSH
48926: LD_INT 3
48928: NEG
48929: PUSH
48930: EMPTY
48931: LIST
48932: LIST
48933: PUSH
48934: LD_INT 1
48936: PUSH
48937: LD_INT 2
48939: NEG
48940: PUSH
48941: EMPTY
48942: LIST
48943: LIST
48944: PUSH
48945: LD_INT 3
48947: PUSH
48948: LD_INT 2
48950: PUSH
48951: EMPTY
48952: LIST
48953: LIST
48954: PUSH
48955: LD_INT 2
48957: PUSH
48958: LD_INT 3
48960: PUSH
48961: EMPTY
48962: LIST
48963: LIST
48964: PUSH
48965: LD_INT 2
48967: NEG
48968: PUSH
48969: LD_INT 1
48971: PUSH
48972: EMPTY
48973: LIST
48974: LIST
48975: PUSH
48976: LD_INT 3
48978: NEG
48979: PUSH
48980: LD_INT 1
48982: NEG
48983: PUSH
48984: EMPTY
48985: LIST
48986: LIST
48987: PUSH
48988: EMPTY
48989: LIST
48990: LIST
48991: LIST
48992: LIST
48993: LIST
48994: LIST
48995: LIST
48996: LIST
48997: LIST
48998: LIST
48999: LIST
49000: LIST
49001: LIST
49002: LIST
49003: LIST
49004: LIST
49005: LIST
49006: LIST
49007: LIST
49008: LIST
49009: LIST
49010: LIST
49011: LIST
49012: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
49013: LD_ADDR_VAR 0 35
49017: PUSH
49018: LD_INT 0
49020: PUSH
49021: LD_INT 0
49023: PUSH
49024: EMPTY
49025: LIST
49026: LIST
49027: PUSH
49028: LD_INT 0
49030: PUSH
49031: LD_INT 1
49033: NEG
49034: PUSH
49035: EMPTY
49036: LIST
49037: LIST
49038: PUSH
49039: LD_INT 1
49041: PUSH
49042: LD_INT 0
49044: PUSH
49045: EMPTY
49046: LIST
49047: LIST
49048: PUSH
49049: LD_INT 1
49051: PUSH
49052: LD_INT 1
49054: PUSH
49055: EMPTY
49056: LIST
49057: LIST
49058: PUSH
49059: LD_INT 0
49061: PUSH
49062: LD_INT 1
49064: PUSH
49065: EMPTY
49066: LIST
49067: LIST
49068: PUSH
49069: LD_INT 1
49071: NEG
49072: PUSH
49073: LD_INT 0
49075: PUSH
49076: EMPTY
49077: LIST
49078: LIST
49079: PUSH
49080: LD_INT 1
49082: NEG
49083: PUSH
49084: LD_INT 1
49086: NEG
49087: PUSH
49088: EMPTY
49089: LIST
49090: LIST
49091: PUSH
49092: LD_INT 2
49094: PUSH
49095: LD_INT 1
49097: PUSH
49098: EMPTY
49099: LIST
49100: LIST
49101: PUSH
49102: LD_INT 2
49104: NEG
49105: PUSH
49106: LD_INT 1
49108: NEG
49109: PUSH
49110: EMPTY
49111: LIST
49112: LIST
49113: PUSH
49114: EMPTY
49115: LIST
49116: LIST
49117: LIST
49118: LIST
49119: LIST
49120: LIST
49121: LIST
49122: LIST
49123: LIST
49124: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
49125: LD_ADDR_VAR 0 36
49129: PUSH
49130: LD_INT 0
49132: PUSH
49133: LD_INT 0
49135: PUSH
49136: EMPTY
49137: LIST
49138: LIST
49139: PUSH
49140: LD_INT 0
49142: PUSH
49143: LD_INT 1
49145: NEG
49146: PUSH
49147: EMPTY
49148: LIST
49149: LIST
49150: PUSH
49151: LD_INT 1
49153: PUSH
49154: LD_INT 0
49156: PUSH
49157: EMPTY
49158: LIST
49159: LIST
49160: PUSH
49161: LD_INT 1
49163: PUSH
49164: LD_INT 1
49166: PUSH
49167: EMPTY
49168: LIST
49169: LIST
49170: PUSH
49171: LD_INT 0
49173: PUSH
49174: LD_INT 1
49176: PUSH
49177: EMPTY
49178: LIST
49179: LIST
49180: PUSH
49181: LD_INT 1
49183: NEG
49184: PUSH
49185: LD_INT 0
49187: PUSH
49188: EMPTY
49189: LIST
49190: LIST
49191: PUSH
49192: LD_INT 1
49194: NEG
49195: PUSH
49196: LD_INT 1
49198: NEG
49199: PUSH
49200: EMPTY
49201: LIST
49202: LIST
49203: PUSH
49204: LD_INT 1
49206: NEG
49207: PUSH
49208: LD_INT 2
49210: NEG
49211: PUSH
49212: EMPTY
49213: LIST
49214: LIST
49215: PUSH
49216: LD_INT 1
49218: PUSH
49219: LD_INT 2
49221: PUSH
49222: EMPTY
49223: LIST
49224: LIST
49225: PUSH
49226: EMPTY
49227: LIST
49228: LIST
49229: LIST
49230: LIST
49231: LIST
49232: LIST
49233: LIST
49234: LIST
49235: LIST
49236: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
49237: LD_ADDR_VAR 0 37
49241: PUSH
49242: LD_INT 0
49244: PUSH
49245: LD_INT 0
49247: PUSH
49248: EMPTY
49249: LIST
49250: LIST
49251: PUSH
49252: LD_INT 0
49254: PUSH
49255: LD_INT 1
49257: NEG
49258: PUSH
49259: EMPTY
49260: LIST
49261: LIST
49262: PUSH
49263: LD_INT 1
49265: PUSH
49266: LD_INT 0
49268: PUSH
49269: EMPTY
49270: LIST
49271: LIST
49272: PUSH
49273: LD_INT 1
49275: PUSH
49276: LD_INT 1
49278: PUSH
49279: EMPTY
49280: LIST
49281: LIST
49282: PUSH
49283: LD_INT 0
49285: PUSH
49286: LD_INT 1
49288: PUSH
49289: EMPTY
49290: LIST
49291: LIST
49292: PUSH
49293: LD_INT 1
49295: NEG
49296: PUSH
49297: LD_INT 0
49299: PUSH
49300: EMPTY
49301: LIST
49302: LIST
49303: PUSH
49304: LD_INT 1
49306: NEG
49307: PUSH
49308: LD_INT 1
49310: NEG
49311: PUSH
49312: EMPTY
49313: LIST
49314: LIST
49315: PUSH
49316: LD_INT 1
49318: PUSH
49319: LD_INT 1
49321: NEG
49322: PUSH
49323: EMPTY
49324: LIST
49325: LIST
49326: PUSH
49327: LD_INT 1
49329: NEG
49330: PUSH
49331: LD_INT 1
49333: PUSH
49334: EMPTY
49335: LIST
49336: LIST
49337: PUSH
49338: EMPTY
49339: LIST
49340: LIST
49341: LIST
49342: LIST
49343: LIST
49344: LIST
49345: LIST
49346: LIST
49347: LIST
49348: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
49349: LD_ADDR_VAR 0 38
49353: PUSH
49354: LD_INT 0
49356: PUSH
49357: LD_INT 0
49359: PUSH
49360: EMPTY
49361: LIST
49362: LIST
49363: PUSH
49364: LD_INT 0
49366: PUSH
49367: LD_INT 1
49369: NEG
49370: PUSH
49371: EMPTY
49372: LIST
49373: LIST
49374: PUSH
49375: LD_INT 1
49377: PUSH
49378: LD_INT 0
49380: PUSH
49381: EMPTY
49382: LIST
49383: LIST
49384: PUSH
49385: LD_INT 1
49387: PUSH
49388: LD_INT 1
49390: PUSH
49391: EMPTY
49392: LIST
49393: LIST
49394: PUSH
49395: LD_INT 0
49397: PUSH
49398: LD_INT 1
49400: PUSH
49401: EMPTY
49402: LIST
49403: LIST
49404: PUSH
49405: LD_INT 1
49407: NEG
49408: PUSH
49409: LD_INT 0
49411: PUSH
49412: EMPTY
49413: LIST
49414: LIST
49415: PUSH
49416: LD_INT 1
49418: NEG
49419: PUSH
49420: LD_INT 1
49422: NEG
49423: PUSH
49424: EMPTY
49425: LIST
49426: LIST
49427: PUSH
49428: LD_INT 2
49430: PUSH
49431: LD_INT 1
49433: PUSH
49434: EMPTY
49435: LIST
49436: LIST
49437: PUSH
49438: LD_INT 2
49440: NEG
49441: PUSH
49442: LD_INT 1
49444: NEG
49445: PUSH
49446: EMPTY
49447: LIST
49448: LIST
49449: PUSH
49450: EMPTY
49451: LIST
49452: LIST
49453: LIST
49454: LIST
49455: LIST
49456: LIST
49457: LIST
49458: LIST
49459: LIST
49460: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
49461: LD_ADDR_VAR 0 39
49465: PUSH
49466: LD_INT 0
49468: PUSH
49469: LD_INT 0
49471: PUSH
49472: EMPTY
49473: LIST
49474: LIST
49475: PUSH
49476: LD_INT 0
49478: PUSH
49479: LD_INT 1
49481: NEG
49482: PUSH
49483: EMPTY
49484: LIST
49485: LIST
49486: PUSH
49487: LD_INT 1
49489: PUSH
49490: LD_INT 0
49492: PUSH
49493: EMPTY
49494: LIST
49495: LIST
49496: PUSH
49497: LD_INT 1
49499: PUSH
49500: LD_INT 1
49502: PUSH
49503: EMPTY
49504: LIST
49505: LIST
49506: PUSH
49507: LD_INT 0
49509: PUSH
49510: LD_INT 1
49512: PUSH
49513: EMPTY
49514: LIST
49515: LIST
49516: PUSH
49517: LD_INT 1
49519: NEG
49520: PUSH
49521: LD_INT 0
49523: PUSH
49524: EMPTY
49525: LIST
49526: LIST
49527: PUSH
49528: LD_INT 1
49530: NEG
49531: PUSH
49532: LD_INT 1
49534: NEG
49535: PUSH
49536: EMPTY
49537: LIST
49538: LIST
49539: PUSH
49540: LD_INT 1
49542: NEG
49543: PUSH
49544: LD_INT 2
49546: NEG
49547: PUSH
49548: EMPTY
49549: LIST
49550: LIST
49551: PUSH
49552: LD_INT 1
49554: PUSH
49555: LD_INT 2
49557: PUSH
49558: EMPTY
49559: LIST
49560: LIST
49561: PUSH
49562: EMPTY
49563: LIST
49564: LIST
49565: LIST
49566: LIST
49567: LIST
49568: LIST
49569: LIST
49570: LIST
49571: LIST
49572: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
49573: LD_ADDR_VAR 0 40
49577: PUSH
49578: LD_INT 0
49580: PUSH
49581: LD_INT 0
49583: PUSH
49584: EMPTY
49585: LIST
49586: LIST
49587: PUSH
49588: LD_INT 0
49590: PUSH
49591: LD_INT 1
49593: NEG
49594: PUSH
49595: EMPTY
49596: LIST
49597: LIST
49598: PUSH
49599: LD_INT 1
49601: PUSH
49602: LD_INT 0
49604: PUSH
49605: EMPTY
49606: LIST
49607: LIST
49608: PUSH
49609: LD_INT 1
49611: PUSH
49612: LD_INT 1
49614: PUSH
49615: EMPTY
49616: LIST
49617: LIST
49618: PUSH
49619: LD_INT 0
49621: PUSH
49622: LD_INT 1
49624: PUSH
49625: EMPTY
49626: LIST
49627: LIST
49628: PUSH
49629: LD_INT 1
49631: NEG
49632: PUSH
49633: LD_INT 0
49635: PUSH
49636: EMPTY
49637: LIST
49638: LIST
49639: PUSH
49640: LD_INT 1
49642: NEG
49643: PUSH
49644: LD_INT 1
49646: NEG
49647: PUSH
49648: EMPTY
49649: LIST
49650: LIST
49651: PUSH
49652: LD_INT 1
49654: PUSH
49655: LD_INT 1
49657: NEG
49658: PUSH
49659: EMPTY
49660: LIST
49661: LIST
49662: PUSH
49663: LD_INT 1
49665: NEG
49666: PUSH
49667: LD_INT 1
49669: PUSH
49670: EMPTY
49671: LIST
49672: LIST
49673: PUSH
49674: EMPTY
49675: LIST
49676: LIST
49677: LIST
49678: LIST
49679: LIST
49680: LIST
49681: LIST
49682: LIST
49683: LIST
49684: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49685: LD_ADDR_VAR 0 41
49689: PUSH
49690: LD_INT 0
49692: PUSH
49693: LD_INT 0
49695: PUSH
49696: EMPTY
49697: LIST
49698: LIST
49699: PUSH
49700: LD_INT 0
49702: PUSH
49703: LD_INT 1
49705: NEG
49706: PUSH
49707: EMPTY
49708: LIST
49709: LIST
49710: PUSH
49711: LD_INT 1
49713: PUSH
49714: LD_INT 0
49716: PUSH
49717: EMPTY
49718: LIST
49719: LIST
49720: PUSH
49721: LD_INT 1
49723: PUSH
49724: LD_INT 1
49726: PUSH
49727: EMPTY
49728: LIST
49729: LIST
49730: PUSH
49731: LD_INT 0
49733: PUSH
49734: LD_INT 1
49736: PUSH
49737: EMPTY
49738: LIST
49739: LIST
49740: PUSH
49741: LD_INT 1
49743: NEG
49744: PUSH
49745: LD_INT 0
49747: PUSH
49748: EMPTY
49749: LIST
49750: LIST
49751: PUSH
49752: LD_INT 1
49754: NEG
49755: PUSH
49756: LD_INT 1
49758: NEG
49759: PUSH
49760: EMPTY
49761: LIST
49762: LIST
49763: PUSH
49764: LD_INT 1
49766: NEG
49767: PUSH
49768: LD_INT 2
49770: NEG
49771: PUSH
49772: EMPTY
49773: LIST
49774: LIST
49775: PUSH
49776: LD_INT 1
49778: PUSH
49779: LD_INT 1
49781: NEG
49782: PUSH
49783: EMPTY
49784: LIST
49785: LIST
49786: PUSH
49787: LD_INT 2
49789: PUSH
49790: LD_INT 0
49792: PUSH
49793: EMPTY
49794: LIST
49795: LIST
49796: PUSH
49797: LD_INT 2
49799: PUSH
49800: LD_INT 1
49802: PUSH
49803: EMPTY
49804: LIST
49805: LIST
49806: PUSH
49807: LD_INT 2
49809: PUSH
49810: LD_INT 2
49812: PUSH
49813: EMPTY
49814: LIST
49815: LIST
49816: PUSH
49817: LD_INT 1
49819: PUSH
49820: LD_INT 2
49822: PUSH
49823: EMPTY
49824: LIST
49825: LIST
49826: PUSH
49827: LD_INT 1
49829: NEG
49830: PUSH
49831: LD_INT 1
49833: PUSH
49834: EMPTY
49835: LIST
49836: LIST
49837: PUSH
49838: LD_INT 2
49840: NEG
49841: PUSH
49842: LD_INT 0
49844: PUSH
49845: EMPTY
49846: LIST
49847: LIST
49848: PUSH
49849: LD_INT 2
49851: NEG
49852: PUSH
49853: LD_INT 1
49855: NEG
49856: PUSH
49857: EMPTY
49858: LIST
49859: LIST
49860: PUSH
49861: LD_INT 2
49863: NEG
49864: PUSH
49865: LD_INT 2
49867: NEG
49868: PUSH
49869: EMPTY
49870: LIST
49871: LIST
49872: PUSH
49873: LD_INT 2
49875: NEG
49876: PUSH
49877: LD_INT 3
49879: NEG
49880: PUSH
49881: EMPTY
49882: LIST
49883: LIST
49884: PUSH
49885: LD_INT 2
49887: PUSH
49888: LD_INT 1
49890: NEG
49891: PUSH
49892: EMPTY
49893: LIST
49894: LIST
49895: PUSH
49896: LD_INT 3
49898: PUSH
49899: LD_INT 0
49901: PUSH
49902: EMPTY
49903: LIST
49904: LIST
49905: PUSH
49906: LD_INT 3
49908: PUSH
49909: LD_INT 1
49911: PUSH
49912: EMPTY
49913: LIST
49914: LIST
49915: PUSH
49916: LD_INT 3
49918: PUSH
49919: LD_INT 2
49921: PUSH
49922: EMPTY
49923: LIST
49924: LIST
49925: PUSH
49926: LD_INT 3
49928: PUSH
49929: LD_INT 3
49931: PUSH
49932: EMPTY
49933: LIST
49934: LIST
49935: PUSH
49936: LD_INT 2
49938: PUSH
49939: LD_INT 3
49941: PUSH
49942: EMPTY
49943: LIST
49944: LIST
49945: PUSH
49946: LD_INT 2
49948: NEG
49949: PUSH
49950: LD_INT 1
49952: PUSH
49953: EMPTY
49954: LIST
49955: LIST
49956: PUSH
49957: LD_INT 3
49959: NEG
49960: PUSH
49961: LD_INT 0
49963: PUSH
49964: EMPTY
49965: LIST
49966: LIST
49967: PUSH
49968: LD_INT 3
49970: NEG
49971: PUSH
49972: LD_INT 1
49974: NEG
49975: PUSH
49976: EMPTY
49977: LIST
49978: LIST
49979: PUSH
49980: LD_INT 3
49982: NEG
49983: PUSH
49984: LD_INT 2
49986: NEG
49987: PUSH
49988: EMPTY
49989: LIST
49990: LIST
49991: PUSH
49992: LD_INT 3
49994: NEG
49995: PUSH
49996: LD_INT 3
49998: NEG
49999: PUSH
50000: EMPTY
50001: LIST
50002: LIST
50003: PUSH
50004: EMPTY
50005: LIST
50006: LIST
50007: LIST
50008: LIST
50009: LIST
50010: LIST
50011: LIST
50012: LIST
50013: LIST
50014: LIST
50015: LIST
50016: LIST
50017: LIST
50018: LIST
50019: LIST
50020: LIST
50021: LIST
50022: LIST
50023: LIST
50024: LIST
50025: LIST
50026: LIST
50027: LIST
50028: LIST
50029: LIST
50030: LIST
50031: LIST
50032: LIST
50033: LIST
50034: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50035: LD_ADDR_VAR 0 42
50039: PUSH
50040: LD_INT 0
50042: PUSH
50043: LD_INT 0
50045: PUSH
50046: EMPTY
50047: LIST
50048: LIST
50049: PUSH
50050: LD_INT 0
50052: PUSH
50053: LD_INT 1
50055: NEG
50056: PUSH
50057: EMPTY
50058: LIST
50059: LIST
50060: PUSH
50061: LD_INT 1
50063: PUSH
50064: LD_INT 0
50066: PUSH
50067: EMPTY
50068: LIST
50069: LIST
50070: PUSH
50071: LD_INT 1
50073: PUSH
50074: LD_INT 1
50076: PUSH
50077: EMPTY
50078: LIST
50079: LIST
50080: PUSH
50081: LD_INT 0
50083: PUSH
50084: LD_INT 1
50086: PUSH
50087: EMPTY
50088: LIST
50089: LIST
50090: PUSH
50091: LD_INT 1
50093: NEG
50094: PUSH
50095: LD_INT 0
50097: PUSH
50098: EMPTY
50099: LIST
50100: LIST
50101: PUSH
50102: LD_INT 1
50104: NEG
50105: PUSH
50106: LD_INT 1
50108: NEG
50109: PUSH
50110: EMPTY
50111: LIST
50112: LIST
50113: PUSH
50114: LD_INT 1
50116: NEG
50117: PUSH
50118: LD_INT 2
50120: NEG
50121: PUSH
50122: EMPTY
50123: LIST
50124: LIST
50125: PUSH
50126: LD_INT 0
50128: PUSH
50129: LD_INT 2
50131: NEG
50132: PUSH
50133: EMPTY
50134: LIST
50135: LIST
50136: PUSH
50137: LD_INT 1
50139: PUSH
50140: LD_INT 1
50142: NEG
50143: PUSH
50144: EMPTY
50145: LIST
50146: LIST
50147: PUSH
50148: LD_INT 2
50150: PUSH
50151: LD_INT 1
50153: PUSH
50154: EMPTY
50155: LIST
50156: LIST
50157: PUSH
50158: LD_INT 2
50160: PUSH
50161: LD_INT 2
50163: PUSH
50164: EMPTY
50165: LIST
50166: LIST
50167: PUSH
50168: LD_INT 1
50170: PUSH
50171: LD_INT 2
50173: PUSH
50174: EMPTY
50175: LIST
50176: LIST
50177: PUSH
50178: LD_INT 0
50180: PUSH
50181: LD_INT 2
50183: PUSH
50184: EMPTY
50185: LIST
50186: LIST
50187: PUSH
50188: LD_INT 1
50190: NEG
50191: PUSH
50192: LD_INT 1
50194: PUSH
50195: EMPTY
50196: LIST
50197: LIST
50198: PUSH
50199: LD_INT 2
50201: NEG
50202: PUSH
50203: LD_INT 1
50205: NEG
50206: PUSH
50207: EMPTY
50208: LIST
50209: LIST
50210: PUSH
50211: LD_INT 2
50213: NEG
50214: PUSH
50215: LD_INT 2
50217: NEG
50218: PUSH
50219: EMPTY
50220: LIST
50221: LIST
50222: PUSH
50223: LD_INT 2
50225: NEG
50226: PUSH
50227: LD_INT 3
50229: NEG
50230: PUSH
50231: EMPTY
50232: LIST
50233: LIST
50234: PUSH
50235: LD_INT 1
50237: NEG
50238: PUSH
50239: LD_INT 3
50241: NEG
50242: PUSH
50243: EMPTY
50244: LIST
50245: LIST
50246: PUSH
50247: LD_INT 0
50249: PUSH
50250: LD_INT 3
50252: NEG
50253: PUSH
50254: EMPTY
50255: LIST
50256: LIST
50257: PUSH
50258: LD_INT 1
50260: PUSH
50261: LD_INT 2
50263: NEG
50264: PUSH
50265: EMPTY
50266: LIST
50267: LIST
50268: PUSH
50269: LD_INT 3
50271: PUSH
50272: LD_INT 2
50274: PUSH
50275: EMPTY
50276: LIST
50277: LIST
50278: PUSH
50279: LD_INT 3
50281: PUSH
50282: LD_INT 3
50284: PUSH
50285: EMPTY
50286: LIST
50287: LIST
50288: PUSH
50289: LD_INT 2
50291: PUSH
50292: LD_INT 3
50294: PUSH
50295: EMPTY
50296: LIST
50297: LIST
50298: PUSH
50299: LD_INT 1
50301: PUSH
50302: LD_INT 3
50304: PUSH
50305: EMPTY
50306: LIST
50307: LIST
50308: PUSH
50309: LD_INT 0
50311: PUSH
50312: LD_INT 3
50314: PUSH
50315: EMPTY
50316: LIST
50317: LIST
50318: PUSH
50319: LD_INT 1
50321: NEG
50322: PUSH
50323: LD_INT 2
50325: PUSH
50326: EMPTY
50327: LIST
50328: LIST
50329: PUSH
50330: LD_INT 3
50332: NEG
50333: PUSH
50334: LD_INT 2
50336: NEG
50337: PUSH
50338: EMPTY
50339: LIST
50340: LIST
50341: PUSH
50342: LD_INT 3
50344: NEG
50345: PUSH
50346: LD_INT 3
50348: NEG
50349: PUSH
50350: EMPTY
50351: LIST
50352: LIST
50353: PUSH
50354: EMPTY
50355: LIST
50356: LIST
50357: LIST
50358: LIST
50359: LIST
50360: LIST
50361: LIST
50362: LIST
50363: LIST
50364: LIST
50365: LIST
50366: LIST
50367: LIST
50368: LIST
50369: LIST
50370: LIST
50371: LIST
50372: LIST
50373: LIST
50374: LIST
50375: LIST
50376: LIST
50377: LIST
50378: LIST
50379: LIST
50380: LIST
50381: LIST
50382: LIST
50383: LIST
50384: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50385: LD_ADDR_VAR 0 43
50389: PUSH
50390: LD_INT 0
50392: PUSH
50393: LD_INT 0
50395: PUSH
50396: EMPTY
50397: LIST
50398: LIST
50399: PUSH
50400: LD_INT 0
50402: PUSH
50403: LD_INT 1
50405: NEG
50406: PUSH
50407: EMPTY
50408: LIST
50409: LIST
50410: PUSH
50411: LD_INT 1
50413: PUSH
50414: LD_INT 0
50416: PUSH
50417: EMPTY
50418: LIST
50419: LIST
50420: PUSH
50421: LD_INT 1
50423: PUSH
50424: LD_INT 1
50426: PUSH
50427: EMPTY
50428: LIST
50429: LIST
50430: PUSH
50431: LD_INT 0
50433: PUSH
50434: LD_INT 1
50436: PUSH
50437: EMPTY
50438: LIST
50439: LIST
50440: PUSH
50441: LD_INT 1
50443: NEG
50444: PUSH
50445: LD_INT 0
50447: PUSH
50448: EMPTY
50449: LIST
50450: LIST
50451: PUSH
50452: LD_INT 1
50454: NEG
50455: PUSH
50456: LD_INT 1
50458: NEG
50459: PUSH
50460: EMPTY
50461: LIST
50462: LIST
50463: PUSH
50464: LD_INT 1
50466: NEG
50467: PUSH
50468: LD_INT 2
50470: NEG
50471: PUSH
50472: EMPTY
50473: LIST
50474: LIST
50475: PUSH
50476: LD_INT 0
50478: PUSH
50479: LD_INT 2
50481: NEG
50482: PUSH
50483: EMPTY
50484: LIST
50485: LIST
50486: PUSH
50487: LD_INT 1
50489: PUSH
50490: LD_INT 1
50492: NEG
50493: PUSH
50494: EMPTY
50495: LIST
50496: LIST
50497: PUSH
50498: LD_INT 2
50500: PUSH
50501: LD_INT 0
50503: PUSH
50504: EMPTY
50505: LIST
50506: LIST
50507: PUSH
50508: LD_INT 2
50510: PUSH
50511: LD_INT 1
50513: PUSH
50514: EMPTY
50515: LIST
50516: LIST
50517: PUSH
50518: LD_INT 1
50520: PUSH
50521: LD_INT 2
50523: PUSH
50524: EMPTY
50525: LIST
50526: LIST
50527: PUSH
50528: LD_INT 0
50530: PUSH
50531: LD_INT 2
50533: PUSH
50534: EMPTY
50535: LIST
50536: LIST
50537: PUSH
50538: LD_INT 1
50540: NEG
50541: PUSH
50542: LD_INT 1
50544: PUSH
50545: EMPTY
50546: LIST
50547: LIST
50548: PUSH
50549: LD_INT 2
50551: NEG
50552: PUSH
50553: LD_INT 0
50555: PUSH
50556: EMPTY
50557: LIST
50558: LIST
50559: PUSH
50560: LD_INT 2
50562: NEG
50563: PUSH
50564: LD_INT 1
50566: NEG
50567: PUSH
50568: EMPTY
50569: LIST
50570: LIST
50571: PUSH
50572: LD_INT 1
50574: NEG
50575: PUSH
50576: LD_INT 3
50578: NEG
50579: PUSH
50580: EMPTY
50581: LIST
50582: LIST
50583: PUSH
50584: LD_INT 0
50586: PUSH
50587: LD_INT 3
50589: NEG
50590: PUSH
50591: EMPTY
50592: LIST
50593: LIST
50594: PUSH
50595: LD_INT 1
50597: PUSH
50598: LD_INT 2
50600: NEG
50601: PUSH
50602: EMPTY
50603: LIST
50604: LIST
50605: PUSH
50606: LD_INT 2
50608: PUSH
50609: LD_INT 1
50611: NEG
50612: PUSH
50613: EMPTY
50614: LIST
50615: LIST
50616: PUSH
50617: LD_INT 3
50619: PUSH
50620: LD_INT 0
50622: PUSH
50623: EMPTY
50624: LIST
50625: LIST
50626: PUSH
50627: LD_INT 3
50629: PUSH
50630: LD_INT 1
50632: PUSH
50633: EMPTY
50634: LIST
50635: LIST
50636: PUSH
50637: LD_INT 1
50639: PUSH
50640: LD_INT 3
50642: PUSH
50643: EMPTY
50644: LIST
50645: LIST
50646: PUSH
50647: LD_INT 0
50649: PUSH
50650: LD_INT 3
50652: PUSH
50653: EMPTY
50654: LIST
50655: LIST
50656: PUSH
50657: LD_INT 1
50659: NEG
50660: PUSH
50661: LD_INT 2
50663: PUSH
50664: EMPTY
50665: LIST
50666: LIST
50667: PUSH
50668: LD_INT 2
50670: NEG
50671: PUSH
50672: LD_INT 1
50674: PUSH
50675: EMPTY
50676: LIST
50677: LIST
50678: PUSH
50679: LD_INT 3
50681: NEG
50682: PUSH
50683: LD_INT 0
50685: PUSH
50686: EMPTY
50687: LIST
50688: LIST
50689: PUSH
50690: LD_INT 3
50692: NEG
50693: PUSH
50694: LD_INT 1
50696: NEG
50697: PUSH
50698: EMPTY
50699: LIST
50700: LIST
50701: PUSH
50702: EMPTY
50703: LIST
50704: LIST
50705: LIST
50706: LIST
50707: LIST
50708: LIST
50709: LIST
50710: LIST
50711: LIST
50712: LIST
50713: LIST
50714: LIST
50715: LIST
50716: LIST
50717: LIST
50718: LIST
50719: LIST
50720: LIST
50721: LIST
50722: LIST
50723: LIST
50724: LIST
50725: LIST
50726: LIST
50727: LIST
50728: LIST
50729: LIST
50730: LIST
50731: LIST
50732: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50733: LD_ADDR_VAR 0 44
50737: PUSH
50738: LD_INT 0
50740: PUSH
50741: LD_INT 0
50743: PUSH
50744: EMPTY
50745: LIST
50746: LIST
50747: PUSH
50748: LD_INT 0
50750: PUSH
50751: LD_INT 1
50753: NEG
50754: PUSH
50755: EMPTY
50756: LIST
50757: LIST
50758: PUSH
50759: LD_INT 1
50761: PUSH
50762: LD_INT 0
50764: PUSH
50765: EMPTY
50766: LIST
50767: LIST
50768: PUSH
50769: LD_INT 1
50771: PUSH
50772: LD_INT 1
50774: PUSH
50775: EMPTY
50776: LIST
50777: LIST
50778: PUSH
50779: LD_INT 0
50781: PUSH
50782: LD_INT 1
50784: PUSH
50785: EMPTY
50786: LIST
50787: LIST
50788: PUSH
50789: LD_INT 1
50791: NEG
50792: PUSH
50793: LD_INT 0
50795: PUSH
50796: EMPTY
50797: LIST
50798: LIST
50799: PUSH
50800: LD_INT 1
50802: NEG
50803: PUSH
50804: LD_INT 1
50806: NEG
50807: PUSH
50808: EMPTY
50809: LIST
50810: LIST
50811: PUSH
50812: LD_INT 1
50814: NEG
50815: PUSH
50816: LD_INT 2
50818: NEG
50819: PUSH
50820: EMPTY
50821: LIST
50822: LIST
50823: PUSH
50824: LD_INT 1
50826: PUSH
50827: LD_INT 1
50829: NEG
50830: PUSH
50831: EMPTY
50832: LIST
50833: LIST
50834: PUSH
50835: LD_INT 2
50837: PUSH
50838: LD_INT 0
50840: PUSH
50841: EMPTY
50842: LIST
50843: LIST
50844: PUSH
50845: LD_INT 2
50847: PUSH
50848: LD_INT 1
50850: PUSH
50851: EMPTY
50852: LIST
50853: LIST
50854: PUSH
50855: LD_INT 2
50857: PUSH
50858: LD_INT 2
50860: PUSH
50861: EMPTY
50862: LIST
50863: LIST
50864: PUSH
50865: LD_INT 1
50867: PUSH
50868: LD_INT 2
50870: PUSH
50871: EMPTY
50872: LIST
50873: LIST
50874: PUSH
50875: LD_INT 1
50877: NEG
50878: PUSH
50879: LD_INT 1
50881: PUSH
50882: EMPTY
50883: LIST
50884: LIST
50885: PUSH
50886: LD_INT 2
50888: NEG
50889: PUSH
50890: LD_INT 0
50892: PUSH
50893: EMPTY
50894: LIST
50895: LIST
50896: PUSH
50897: LD_INT 2
50899: NEG
50900: PUSH
50901: LD_INT 1
50903: NEG
50904: PUSH
50905: EMPTY
50906: LIST
50907: LIST
50908: PUSH
50909: LD_INT 2
50911: NEG
50912: PUSH
50913: LD_INT 2
50915: NEG
50916: PUSH
50917: EMPTY
50918: LIST
50919: LIST
50920: PUSH
50921: LD_INT 2
50923: NEG
50924: PUSH
50925: LD_INT 3
50927: NEG
50928: PUSH
50929: EMPTY
50930: LIST
50931: LIST
50932: PUSH
50933: LD_INT 2
50935: PUSH
50936: LD_INT 1
50938: NEG
50939: PUSH
50940: EMPTY
50941: LIST
50942: LIST
50943: PUSH
50944: LD_INT 3
50946: PUSH
50947: LD_INT 0
50949: PUSH
50950: EMPTY
50951: LIST
50952: LIST
50953: PUSH
50954: LD_INT 3
50956: PUSH
50957: LD_INT 1
50959: PUSH
50960: EMPTY
50961: LIST
50962: LIST
50963: PUSH
50964: LD_INT 3
50966: PUSH
50967: LD_INT 2
50969: PUSH
50970: EMPTY
50971: LIST
50972: LIST
50973: PUSH
50974: LD_INT 3
50976: PUSH
50977: LD_INT 3
50979: PUSH
50980: EMPTY
50981: LIST
50982: LIST
50983: PUSH
50984: LD_INT 2
50986: PUSH
50987: LD_INT 3
50989: PUSH
50990: EMPTY
50991: LIST
50992: LIST
50993: PUSH
50994: LD_INT 2
50996: NEG
50997: PUSH
50998: LD_INT 1
51000: PUSH
51001: EMPTY
51002: LIST
51003: LIST
51004: PUSH
51005: LD_INT 3
51007: NEG
51008: PUSH
51009: LD_INT 0
51011: PUSH
51012: EMPTY
51013: LIST
51014: LIST
51015: PUSH
51016: LD_INT 3
51018: NEG
51019: PUSH
51020: LD_INT 1
51022: NEG
51023: PUSH
51024: EMPTY
51025: LIST
51026: LIST
51027: PUSH
51028: LD_INT 3
51030: NEG
51031: PUSH
51032: LD_INT 2
51034: NEG
51035: PUSH
51036: EMPTY
51037: LIST
51038: LIST
51039: PUSH
51040: LD_INT 3
51042: NEG
51043: PUSH
51044: LD_INT 3
51046: NEG
51047: PUSH
51048: EMPTY
51049: LIST
51050: LIST
51051: PUSH
51052: EMPTY
51053: LIST
51054: LIST
51055: LIST
51056: LIST
51057: LIST
51058: LIST
51059: LIST
51060: LIST
51061: LIST
51062: LIST
51063: LIST
51064: LIST
51065: LIST
51066: LIST
51067: LIST
51068: LIST
51069: LIST
51070: LIST
51071: LIST
51072: LIST
51073: LIST
51074: LIST
51075: LIST
51076: LIST
51077: LIST
51078: LIST
51079: LIST
51080: LIST
51081: LIST
51082: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51083: LD_ADDR_VAR 0 45
51087: PUSH
51088: LD_INT 0
51090: PUSH
51091: LD_INT 0
51093: PUSH
51094: EMPTY
51095: LIST
51096: LIST
51097: PUSH
51098: LD_INT 0
51100: PUSH
51101: LD_INT 1
51103: NEG
51104: PUSH
51105: EMPTY
51106: LIST
51107: LIST
51108: PUSH
51109: LD_INT 1
51111: PUSH
51112: LD_INT 0
51114: PUSH
51115: EMPTY
51116: LIST
51117: LIST
51118: PUSH
51119: LD_INT 1
51121: PUSH
51122: LD_INT 1
51124: PUSH
51125: EMPTY
51126: LIST
51127: LIST
51128: PUSH
51129: LD_INT 0
51131: PUSH
51132: LD_INT 1
51134: PUSH
51135: EMPTY
51136: LIST
51137: LIST
51138: PUSH
51139: LD_INT 1
51141: NEG
51142: PUSH
51143: LD_INT 0
51145: PUSH
51146: EMPTY
51147: LIST
51148: LIST
51149: PUSH
51150: LD_INT 1
51152: NEG
51153: PUSH
51154: LD_INT 1
51156: NEG
51157: PUSH
51158: EMPTY
51159: LIST
51160: LIST
51161: PUSH
51162: LD_INT 1
51164: NEG
51165: PUSH
51166: LD_INT 2
51168: NEG
51169: PUSH
51170: EMPTY
51171: LIST
51172: LIST
51173: PUSH
51174: LD_INT 0
51176: PUSH
51177: LD_INT 2
51179: NEG
51180: PUSH
51181: EMPTY
51182: LIST
51183: LIST
51184: PUSH
51185: LD_INT 1
51187: PUSH
51188: LD_INT 1
51190: NEG
51191: PUSH
51192: EMPTY
51193: LIST
51194: LIST
51195: PUSH
51196: LD_INT 2
51198: PUSH
51199: LD_INT 1
51201: PUSH
51202: EMPTY
51203: LIST
51204: LIST
51205: PUSH
51206: LD_INT 2
51208: PUSH
51209: LD_INT 2
51211: PUSH
51212: EMPTY
51213: LIST
51214: LIST
51215: PUSH
51216: LD_INT 1
51218: PUSH
51219: LD_INT 2
51221: PUSH
51222: EMPTY
51223: LIST
51224: LIST
51225: PUSH
51226: LD_INT 0
51228: PUSH
51229: LD_INT 2
51231: PUSH
51232: EMPTY
51233: LIST
51234: LIST
51235: PUSH
51236: LD_INT 1
51238: NEG
51239: PUSH
51240: LD_INT 1
51242: PUSH
51243: EMPTY
51244: LIST
51245: LIST
51246: PUSH
51247: LD_INT 2
51249: NEG
51250: PUSH
51251: LD_INT 1
51253: NEG
51254: PUSH
51255: EMPTY
51256: LIST
51257: LIST
51258: PUSH
51259: LD_INT 2
51261: NEG
51262: PUSH
51263: LD_INT 2
51265: NEG
51266: PUSH
51267: EMPTY
51268: LIST
51269: LIST
51270: PUSH
51271: LD_INT 2
51273: NEG
51274: PUSH
51275: LD_INT 3
51277: NEG
51278: PUSH
51279: EMPTY
51280: LIST
51281: LIST
51282: PUSH
51283: LD_INT 1
51285: NEG
51286: PUSH
51287: LD_INT 3
51289: NEG
51290: PUSH
51291: EMPTY
51292: LIST
51293: LIST
51294: PUSH
51295: LD_INT 0
51297: PUSH
51298: LD_INT 3
51300: NEG
51301: PUSH
51302: EMPTY
51303: LIST
51304: LIST
51305: PUSH
51306: LD_INT 1
51308: PUSH
51309: LD_INT 2
51311: NEG
51312: PUSH
51313: EMPTY
51314: LIST
51315: LIST
51316: PUSH
51317: LD_INT 3
51319: PUSH
51320: LD_INT 2
51322: PUSH
51323: EMPTY
51324: LIST
51325: LIST
51326: PUSH
51327: LD_INT 3
51329: PUSH
51330: LD_INT 3
51332: PUSH
51333: EMPTY
51334: LIST
51335: LIST
51336: PUSH
51337: LD_INT 2
51339: PUSH
51340: LD_INT 3
51342: PUSH
51343: EMPTY
51344: LIST
51345: LIST
51346: PUSH
51347: LD_INT 1
51349: PUSH
51350: LD_INT 3
51352: PUSH
51353: EMPTY
51354: LIST
51355: LIST
51356: PUSH
51357: LD_INT 0
51359: PUSH
51360: LD_INT 3
51362: PUSH
51363: EMPTY
51364: LIST
51365: LIST
51366: PUSH
51367: LD_INT 1
51369: NEG
51370: PUSH
51371: LD_INT 2
51373: PUSH
51374: EMPTY
51375: LIST
51376: LIST
51377: PUSH
51378: LD_INT 3
51380: NEG
51381: PUSH
51382: LD_INT 2
51384: NEG
51385: PUSH
51386: EMPTY
51387: LIST
51388: LIST
51389: PUSH
51390: LD_INT 3
51392: NEG
51393: PUSH
51394: LD_INT 3
51396: NEG
51397: PUSH
51398: EMPTY
51399: LIST
51400: LIST
51401: PUSH
51402: EMPTY
51403: LIST
51404: LIST
51405: LIST
51406: LIST
51407: LIST
51408: LIST
51409: LIST
51410: LIST
51411: LIST
51412: LIST
51413: LIST
51414: LIST
51415: LIST
51416: LIST
51417: LIST
51418: LIST
51419: LIST
51420: LIST
51421: LIST
51422: LIST
51423: LIST
51424: LIST
51425: LIST
51426: LIST
51427: LIST
51428: LIST
51429: LIST
51430: LIST
51431: LIST
51432: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51433: LD_ADDR_VAR 0 46
51437: PUSH
51438: LD_INT 0
51440: PUSH
51441: LD_INT 0
51443: PUSH
51444: EMPTY
51445: LIST
51446: LIST
51447: PUSH
51448: LD_INT 0
51450: PUSH
51451: LD_INT 1
51453: NEG
51454: PUSH
51455: EMPTY
51456: LIST
51457: LIST
51458: PUSH
51459: LD_INT 1
51461: PUSH
51462: LD_INT 0
51464: PUSH
51465: EMPTY
51466: LIST
51467: LIST
51468: PUSH
51469: LD_INT 1
51471: PUSH
51472: LD_INT 1
51474: PUSH
51475: EMPTY
51476: LIST
51477: LIST
51478: PUSH
51479: LD_INT 0
51481: PUSH
51482: LD_INT 1
51484: PUSH
51485: EMPTY
51486: LIST
51487: LIST
51488: PUSH
51489: LD_INT 1
51491: NEG
51492: PUSH
51493: LD_INT 0
51495: PUSH
51496: EMPTY
51497: LIST
51498: LIST
51499: PUSH
51500: LD_INT 1
51502: NEG
51503: PUSH
51504: LD_INT 1
51506: NEG
51507: PUSH
51508: EMPTY
51509: LIST
51510: LIST
51511: PUSH
51512: LD_INT 1
51514: NEG
51515: PUSH
51516: LD_INT 2
51518: NEG
51519: PUSH
51520: EMPTY
51521: LIST
51522: LIST
51523: PUSH
51524: LD_INT 0
51526: PUSH
51527: LD_INT 2
51529: NEG
51530: PUSH
51531: EMPTY
51532: LIST
51533: LIST
51534: PUSH
51535: LD_INT 1
51537: PUSH
51538: LD_INT 1
51540: NEG
51541: PUSH
51542: EMPTY
51543: LIST
51544: LIST
51545: PUSH
51546: LD_INT 2
51548: PUSH
51549: LD_INT 0
51551: PUSH
51552: EMPTY
51553: LIST
51554: LIST
51555: PUSH
51556: LD_INT 2
51558: PUSH
51559: LD_INT 1
51561: PUSH
51562: EMPTY
51563: LIST
51564: LIST
51565: PUSH
51566: LD_INT 1
51568: PUSH
51569: LD_INT 2
51571: PUSH
51572: EMPTY
51573: LIST
51574: LIST
51575: PUSH
51576: LD_INT 0
51578: PUSH
51579: LD_INT 2
51581: PUSH
51582: EMPTY
51583: LIST
51584: LIST
51585: PUSH
51586: LD_INT 1
51588: NEG
51589: PUSH
51590: LD_INT 1
51592: PUSH
51593: EMPTY
51594: LIST
51595: LIST
51596: PUSH
51597: LD_INT 2
51599: NEG
51600: PUSH
51601: LD_INT 0
51603: PUSH
51604: EMPTY
51605: LIST
51606: LIST
51607: PUSH
51608: LD_INT 2
51610: NEG
51611: PUSH
51612: LD_INT 1
51614: NEG
51615: PUSH
51616: EMPTY
51617: LIST
51618: LIST
51619: PUSH
51620: LD_INT 1
51622: NEG
51623: PUSH
51624: LD_INT 3
51626: NEG
51627: PUSH
51628: EMPTY
51629: LIST
51630: LIST
51631: PUSH
51632: LD_INT 0
51634: PUSH
51635: LD_INT 3
51637: NEG
51638: PUSH
51639: EMPTY
51640: LIST
51641: LIST
51642: PUSH
51643: LD_INT 1
51645: PUSH
51646: LD_INT 2
51648: NEG
51649: PUSH
51650: EMPTY
51651: LIST
51652: LIST
51653: PUSH
51654: LD_INT 2
51656: PUSH
51657: LD_INT 1
51659: NEG
51660: PUSH
51661: EMPTY
51662: LIST
51663: LIST
51664: PUSH
51665: LD_INT 3
51667: PUSH
51668: LD_INT 0
51670: PUSH
51671: EMPTY
51672: LIST
51673: LIST
51674: PUSH
51675: LD_INT 3
51677: PUSH
51678: LD_INT 1
51680: PUSH
51681: EMPTY
51682: LIST
51683: LIST
51684: PUSH
51685: LD_INT 1
51687: PUSH
51688: LD_INT 3
51690: PUSH
51691: EMPTY
51692: LIST
51693: LIST
51694: PUSH
51695: LD_INT 0
51697: PUSH
51698: LD_INT 3
51700: PUSH
51701: EMPTY
51702: LIST
51703: LIST
51704: PUSH
51705: LD_INT 1
51707: NEG
51708: PUSH
51709: LD_INT 2
51711: PUSH
51712: EMPTY
51713: LIST
51714: LIST
51715: PUSH
51716: LD_INT 2
51718: NEG
51719: PUSH
51720: LD_INT 1
51722: PUSH
51723: EMPTY
51724: LIST
51725: LIST
51726: PUSH
51727: LD_INT 3
51729: NEG
51730: PUSH
51731: LD_INT 0
51733: PUSH
51734: EMPTY
51735: LIST
51736: LIST
51737: PUSH
51738: LD_INT 3
51740: NEG
51741: PUSH
51742: LD_INT 1
51744: NEG
51745: PUSH
51746: EMPTY
51747: LIST
51748: LIST
51749: PUSH
51750: EMPTY
51751: LIST
51752: LIST
51753: LIST
51754: LIST
51755: LIST
51756: LIST
51757: LIST
51758: LIST
51759: LIST
51760: LIST
51761: LIST
51762: LIST
51763: LIST
51764: LIST
51765: LIST
51766: LIST
51767: LIST
51768: LIST
51769: LIST
51770: LIST
51771: LIST
51772: LIST
51773: LIST
51774: LIST
51775: LIST
51776: LIST
51777: LIST
51778: LIST
51779: LIST
51780: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51781: LD_ADDR_VAR 0 47
51785: PUSH
51786: LD_INT 0
51788: PUSH
51789: LD_INT 0
51791: PUSH
51792: EMPTY
51793: LIST
51794: LIST
51795: PUSH
51796: LD_INT 0
51798: PUSH
51799: LD_INT 1
51801: NEG
51802: PUSH
51803: EMPTY
51804: LIST
51805: LIST
51806: PUSH
51807: LD_INT 1
51809: PUSH
51810: LD_INT 0
51812: PUSH
51813: EMPTY
51814: LIST
51815: LIST
51816: PUSH
51817: LD_INT 1
51819: PUSH
51820: LD_INT 1
51822: PUSH
51823: EMPTY
51824: LIST
51825: LIST
51826: PUSH
51827: LD_INT 0
51829: PUSH
51830: LD_INT 1
51832: PUSH
51833: EMPTY
51834: LIST
51835: LIST
51836: PUSH
51837: LD_INT 1
51839: NEG
51840: PUSH
51841: LD_INT 0
51843: PUSH
51844: EMPTY
51845: LIST
51846: LIST
51847: PUSH
51848: LD_INT 1
51850: NEG
51851: PUSH
51852: LD_INT 1
51854: NEG
51855: PUSH
51856: EMPTY
51857: LIST
51858: LIST
51859: PUSH
51860: LD_INT 1
51862: NEG
51863: PUSH
51864: LD_INT 2
51866: NEG
51867: PUSH
51868: EMPTY
51869: LIST
51870: LIST
51871: PUSH
51872: LD_INT 0
51874: PUSH
51875: LD_INT 2
51877: NEG
51878: PUSH
51879: EMPTY
51880: LIST
51881: LIST
51882: PUSH
51883: LD_INT 1
51885: PUSH
51886: LD_INT 1
51888: NEG
51889: PUSH
51890: EMPTY
51891: LIST
51892: LIST
51893: PUSH
51894: LD_INT 2
51896: NEG
51897: PUSH
51898: LD_INT 1
51900: NEG
51901: PUSH
51902: EMPTY
51903: LIST
51904: LIST
51905: PUSH
51906: LD_INT 2
51908: NEG
51909: PUSH
51910: LD_INT 2
51912: NEG
51913: PUSH
51914: EMPTY
51915: LIST
51916: LIST
51917: PUSH
51918: EMPTY
51919: LIST
51920: LIST
51921: LIST
51922: LIST
51923: LIST
51924: LIST
51925: LIST
51926: LIST
51927: LIST
51928: LIST
51929: LIST
51930: LIST
51931: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
51932: LD_ADDR_VAR 0 48
51936: PUSH
51937: LD_INT 0
51939: PUSH
51940: LD_INT 0
51942: PUSH
51943: EMPTY
51944: LIST
51945: LIST
51946: PUSH
51947: LD_INT 0
51949: PUSH
51950: LD_INT 1
51952: NEG
51953: PUSH
51954: EMPTY
51955: LIST
51956: LIST
51957: PUSH
51958: LD_INT 1
51960: PUSH
51961: LD_INT 0
51963: PUSH
51964: EMPTY
51965: LIST
51966: LIST
51967: PUSH
51968: LD_INT 1
51970: PUSH
51971: LD_INT 1
51973: PUSH
51974: EMPTY
51975: LIST
51976: LIST
51977: PUSH
51978: LD_INT 0
51980: PUSH
51981: LD_INT 1
51983: PUSH
51984: EMPTY
51985: LIST
51986: LIST
51987: PUSH
51988: LD_INT 1
51990: NEG
51991: PUSH
51992: LD_INT 0
51994: PUSH
51995: EMPTY
51996: LIST
51997: LIST
51998: PUSH
51999: LD_INT 1
52001: NEG
52002: PUSH
52003: LD_INT 1
52005: NEG
52006: PUSH
52007: EMPTY
52008: LIST
52009: LIST
52010: PUSH
52011: LD_INT 1
52013: NEG
52014: PUSH
52015: LD_INT 2
52017: NEG
52018: PUSH
52019: EMPTY
52020: LIST
52021: LIST
52022: PUSH
52023: LD_INT 0
52025: PUSH
52026: LD_INT 2
52028: NEG
52029: PUSH
52030: EMPTY
52031: LIST
52032: LIST
52033: PUSH
52034: LD_INT 1
52036: PUSH
52037: LD_INT 1
52039: NEG
52040: PUSH
52041: EMPTY
52042: LIST
52043: LIST
52044: PUSH
52045: LD_INT 2
52047: PUSH
52048: LD_INT 0
52050: PUSH
52051: EMPTY
52052: LIST
52053: LIST
52054: PUSH
52055: LD_INT 2
52057: PUSH
52058: LD_INT 1
52060: PUSH
52061: EMPTY
52062: LIST
52063: LIST
52064: PUSH
52065: EMPTY
52066: LIST
52067: LIST
52068: LIST
52069: LIST
52070: LIST
52071: LIST
52072: LIST
52073: LIST
52074: LIST
52075: LIST
52076: LIST
52077: LIST
52078: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
52079: LD_ADDR_VAR 0 49
52083: PUSH
52084: LD_INT 0
52086: PUSH
52087: LD_INT 0
52089: PUSH
52090: EMPTY
52091: LIST
52092: LIST
52093: PUSH
52094: LD_INT 0
52096: PUSH
52097: LD_INT 1
52099: NEG
52100: PUSH
52101: EMPTY
52102: LIST
52103: LIST
52104: PUSH
52105: LD_INT 1
52107: PUSH
52108: LD_INT 0
52110: PUSH
52111: EMPTY
52112: LIST
52113: LIST
52114: PUSH
52115: LD_INT 1
52117: PUSH
52118: LD_INT 1
52120: PUSH
52121: EMPTY
52122: LIST
52123: LIST
52124: PUSH
52125: LD_INT 0
52127: PUSH
52128: LD_INT 1
52130: PUSH
52131: EMPTY
52132: LIST
52133: LIST
52134: PUSH
52135: LD_INT 1
52137: NEG
52138: PUSH
52139: LD_INT 0
52141: PUSH
52142: EMPTY
52143: LIST
52144: LIST
52145: PUSH
52146: LD_INT 1
52148: NEG
52149: PUSH
52150: LD_INT 1
52152: NEG
52153: PUSH
52154: EMPTY
52155: LIST
52156: LIST
52157: PUSH
52158: LD_INT 1
52160: PUSH
52161: LD_INT 1
52163: NEG
52164: PUSH
52165: EMPTY
52166: LIST
52167: LIST
52168: PUSH
52169: LD_INT 2
52171: PUSH
52172: LD_INT 0
52174: PUSH
52175: EMPTY
52176: LIST
52177: LIST
52178: PUSH
52179: LD_INT 2
52181: PUSH
52182: LD_INT 1
52184: PUSH
52185: EMPTY
52186: LIST
52187: LIST
52188: PUSH
52189: LD_INT 2
52191: PUSH
52192: LD_INT 2
52194: PUSH
52195: EMPTY
52196: LIST
52197: LIST
52198: PUSH
52199: LD_INT 1
52201: PUSH
52202: LD_INT 2
52204: PUSH
52205: EMPTY
52206: LIST
52207: LIST
52208: PUSH
52209: EMPTY
52210: LIST
52211: LIST
52212: LIST
52213: LIST
52214: LIST
52215: LIST
52216: LIST
52217: LIST
52218: LIST
52219: LIST
52220: LIST
52221: LIST
52222: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
52223: LD_ADDR_VAR 0 50
52227: PUSH
52228: LD_INT 0
52230: PUSH
52231: LD_INT 0
52233: PUSH
52234: EMPTY
52235: LIST
52236: LIST
52237: PUSH
52238: LD_INT 0
52240: PUSH
52241: LD_INT 1
52243: NEG
52244: PUSH
52245: EMPTY
52246: LIST
52247: LIST
52248: PUSH
52249: LD_INT 1
52251: PUSH
52252: LD_INT 0
52254: PUSH
52255: EMPTY
52256: LIST
52257: LIST
52258: PUSH
52259: LD_INT 1
52261: PUSH
52262: LD_INT 1
52264: PUSH
52265: EMPTY
52266: LIST
52267: LIST
52268: PUSH
52269: LD_INT 0
52271: PUSH
52272: LD_INT 1
52274: PUSH
52275: EMPTY
52276: LIST
52277: LIST
52278: PUSH
52279: LD_INT 1
52281: NEG
52282: PUSH
52283: LD_INT 0
52285: PUSH
52286: EMPTY
52287: LIST
52288: LIST
52289: PUSH
52290: LD_INT 1
52292: NEG
52293: PUSH
52294: LD_INT 1
52296: NEG
52297: PUSH
52298: EMPTY
52299: LIST
52300: LIST
52301: PUSH
52302: LD_INT 2
52304: PUSH
52305: LD_INT 1
52307: PUSH
52308: EMPTY
52309: LIST
52310: LIST
52311: PUSH
52312: LD_INT 2
52314: PUSH
52315: LD_INT 2
52317: PUSH
52318: EMPTY
52319: LIST
52320: LIST
52321: PUSH
52322: LD_INT 1
52324: PUSH
52325: LD_INT 2
52327: PUSH
52328: EMPTY
52329: LIST
52330: LIST
52331: PUSH
52332: LD_INT 0
52334: PUSH
52335: LD_INT 2
52337: PUSH
52338: EMPTY
52339: LIST
52340: LIST
52341: PUSH
52342: LD_INT 1
52344: NEG
52345: PUSH
52346: LD_INT 1
52348: PUSH
52349: EMPTY
52350: LIST
52351: LIST
52352: PUSH
52353: EMPTY
52354: LIST
52355: LIST
52356: LIST
52357: LIST
52358: LIST
52359: LIST
52360: LIST
52361: LIST
52362: LIST
52363: LIST
52364: LIST
52365: LIST
52366: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
52367: LD_ADDR_VAR 0 51
52371: PUSH
52372: LD_INT 0
52374: PUSH
52375: LD_INT 0
52377: PUSH
52378: EMPTY
52379: LIST
52380: LIST
52381: PUSH
52382: LD_INT 0
52384: PUSH
52385: LD_INT 1
52387: NEG
52388: PUSH
52389: EMPTY
52390: LIST
52391: LIST
52392: PUSH
52393: LD_INT 1
52395: PUSH
52396: LD_INT 0
52398: PUSH
52399: EMPTY
52400: LIST
52401: LIST
52402: PUSH
52403: LD_INT 1
52405: PUSH
52406: LD_INT 1
52408: PUSH
52409: EMPTY
52410: LIST
52411: LIST
52412: PUSH
52413: LD_INT 0
52415: PUSH
52416: LD_INT 1
52418: PUSH
52419: EMPTY
52420: LIST
52421: LIST
52422: PUSH
52423: LD_INT 1
52425: NEG
52426: PUSH
52427: LD_INT 0
52429: PUSH
52430: EMPTY
52431: LIST
52432: LIST
52433: PUSH
52434: LD_INT 1
52436: NEG
52437: PUSH
52438: LD_INT 1
52440: NEG
52441: PUSH
52442: EMPTY
52443: LIST
52444: LIST
52445: PUSH
52446: LD_INT 1
52448: PUSH
52449: LD_INT 2
52451: PUSH
52452: EMPTY
52453: LIST
52454: LIST
52455: PUSH
52456: LD_INT 0
52458: PUSH
52459: LD_INT 2
52461: PUSH
52462: EMPTY
52463: LIST
52464: LIST
52465: PUSH
52466: LD_INT 1
52468: NEG
52469: PUSH
52470: LD_INT 1
52472: PUSH
52473: EMPTY
52474: LIST
52475: LIST
52476: PUSH
52477: LD_INT 2
52479: NEG
52480: PUSH
52481: LD_INT 0
52483: PUSH
52484: EMPTY
52485: LIST
52486: LIST
52487: PUSH
52488: LD_INT 2
52490: NEG
52491: PUSH
52492: LD_INT 1
52494: NEG
52495: PUSH
52496: EMPTY
52497: LIST
52498: LIST
52499: PUSH
52500: EMPTY
52501: LIST
52502: LIST
52503: LIST
52504: LIST
52505: LIST
52506: LIST
52507: LIST
52508: LIST
52509: LIST
52510: LIST
52511: LIST
52512: LIST
52513: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52514: LD_ADDR_VAR 0 52
52518: PUSH
52519: LD_INT 0
52521: PUSH
52522: LD_INT 0
52524: PUSH
52525: EMPTY
52526: LIST
52527: LIST
52528: PUSH
52529: LD_INT 0
52531: PUSH
52532: LD_INT 1
52534: NEG
52535: PUSH
52536: EMPTY
52537: LIST
52538: LIST
52539: PUSH
52540: LD_INT 1
52542: PUSH
52543: LD_INT 0
52545: PUSH
52546: EMPTY
52547: LIST
52548: LIST
52549: PUSH
52550: LD_INT 1
52552: PUSH
52553: LD_INT 1
52555: PUSH
52556: EMPTY
52557: LIST
52558: LIST
52559: PUSH
52560: LD_INT 0
52562: PUSH
52563: LD_INT 1
52565: PUSH
52566: EMPTY
52567: LIST
52568: LIST
52569: PUSH
52570: LD_INT 1
52572: NEG
52573: PUSH
52574: LD_INT 0
52576: PUSH
52577: EMPTY
52578: LIST
52579: LIST
52580: PUSH
52581: LD_INT 1
52583: NEG
52584: PUSH
52585: LD_INT 1
52587: NEG
52588: PUSH
52589: EMPTY
52590: LIST
52591: LIST
52592: PUSH
52593: LD_INT 1
52595: NEG
52596: PUSH
52597: LD_INT 2
52599: NEG
52600: PUSH
52601: EMPTY
52602: LIST
52603: LIST
52604: PUSH
52605: LD_INT 1
52607: NEG
52608: PUSH
52609: LD_INT 1
52611: PUSH
52612: EMPTY
52613: LIST
52614: LIST
52615: PUSH
52616: LD_INT 2
52618: NEG
52619: PUSH
52620: LD_INT 0
52622: PUSH
52623: EMPTY
52624: LIST
52625: LIST
52626: PUSH
52627: LD_INT 2
52629: NEG
52630: PUSH
52631: LD_INT 1
52633: NEG
52634: PUSH
52635: EMPTY
52636: LIST
52637: LIST
52638: PUSH
52639: LD_INT 2
52641: NEG
52642: PUSH
52643: LD_INT 2
52645: NEG
52646: PUSH
52647: EMPTY
52648: LIST
52649: LIST
52650: PUSH
52651: EMPTY
52652: LIST
52653: LIST
52654: LIST
52655: LIST
52656: LIST
52657: LIST
52658: LIST
52659: LIST
52660: LIST
52661: LIST
52662: LIST
52663: LIST
52664: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52665: LD_ADDR_VAR 0 53
52669: PUSH
52670: LD_INT 0
52672: PUSH
52673: LD_INT 0
52675: PUSH
52676: EMPTY
52677: LIST
52678: LIST
52679: PUSH
52680: LD_INT 0
52682: PUSH
52683: LD_INT 1
52685: NEG
52686: PUSH
52687: EMPTY
52688: LIST
52689: LIST
52690: PUSH
52691: LD_INT 1
52693: PUSH
52694: LD_INT 0
52696: PUSH
52697: EMPTY
52698: LIST
52699: LIST
52700: PUSH
52701: LD_INT 1
52703: PUSH
52704: LD_INT 1
52706: PUSH
52707: EMPTY
52708: LIST
52709: LIST
52710: PUSH
52711: LD_INT 0
52713: PUSH
52714: LD_INT 1
52716: PUSH
52717: EMPTY
52718: LIST
52719: LIST
52720: PUSH
52721: LD_INT 1
52723: NEG
52724: PUSH
52725: LD_INT 0
52727: PUSH
52728: EMPTY
52729: LIST
52730: LIST
52731: PUSH
52732: LD_INT 1
52734: NEG
52735: PUSH
52736: LD_INT 1
52738: NEG
52739: PUSH
52740: EMPTY
52741: LIST
52742: LIST
52743: PUSH
52744: LD_INT 1
52746: NEG
52747: PUSH
52748: LD_INT 2
52750: NEG
52751: PUSH
52752: EMPTY
52753: LIST
52754: LIST
52755: PUSH
52756: LD_INT 0
52758: PUSH
52759: LD_INT 2
52761: NEG
52762: PUSH
52763: EMPTY
52764: LIST
52765: LIST
52766: PUSH
52767: LD_INT 1
52769: PUSH
52770: LD_INT 1
52772: NEG
52773: PUSH
52774: EMPTY
52775: LIST
52776: LIST
52777: PUSH
52778: LD_INT 2
52780: PUSH
52781: LD_INT 0
52783: PUSH
52784: EMPTY
52785: LIST
52786: LIST
52787: PUSH
52788: LD_INT 2
52790: PUSH
52791: LD_INT 1
52793: PUSH
52794: EMPTY
52795: LIST
52796: LIST
52797: PUSH
52798: LD_INT 2
52800: PUSH
52801: LD_INT 2
52803: PUSH
52804: EMPTY
52805: LIST
52806: LIST
52807: PUSH
52808: LD_INT 1
52810: PUSH
52811: LD_INT 2
52813: PUSH
52814: EMPTY
52815: LIST
52816: LIST
52817: PUSH
52818: LD_INT 0
52820: PUSH
52821: LD_INT 2
52823: PUSH
52824: EMPTY
52825: LIST
52826: LIST
52827: PUSH
52828: LD_INT 1
52830: NEG
52831: PUSH
52832: LD_INT 1
52834: PUSH
52835: EMPTY
52836: LIST
52837: LIST
52838: PUSH
52839: LD_INT 2
52841: NEG
52842: PUSH
52843: LD_INT 0
52845: PUSH
52846: EMPTY
52847: LIST
52848: LIST
52849: PUSH
52850: LD_INT 2
52852: NEG
52853: PUSH
52854: LD_INT 1
52856: NEG
52857: PUSH
52858: EMPTY
52859: LIST
52860: LIST
52861: PUSH
52862: LD_INT 2
52864: NEG
52865: PUSH
52866: LD_INT 2
52868: NEG
52869: PUSH
52870: EMPTY
52871: LIST
52872: LIST
52873: PUSH
52874: EMPTY
52875: LIST
52876: LIST
52877: LIST
52878: LIST
52879: LIST
52880: LIST
52881: LIST
52882: LIST
52883: LIST
52884: LIST
52885: LIST
52886: LIST
52887: LIST
52888: LIST
52889: LIST
52890: LIST
52891: LIST
52892: LIST
52893: LIST
52894: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52895: LD_ADDR_VAR 0 54
52899: PUSH
52900: LD_INT 0
52902: PUSH
52903: LD_INT 0
52905: PUSH
52906: EMPTY
52907: LIST
52908: LIST
52909: PUSH
52910: LD_INT 0
52912: PUSH
52913: LD_INT 1
52915: NEG
52916: PUSH
52917: EMPTY
52918: LIST
52919: LIST
52920: PUSH
52921: LD_INT 1
52923: PUSH
52924: LD_INT 0
52926: PUSH
52927: EMPTY
52928: LIST
52929: LIST
52930: PUSH
52931: LD_INT 1
52933: PUSH
52934: LD_INT 1
52936: PUSH
52937: EMPTY
52938: LIST
52939: LIST
52940: PUSH
52941: LD_INT 0
52943: PUSH
52944: LD_INT 1
52946: PUSH
52947: EMPTY
52948: LIST
52949: LIST
52950: PUSH
52951: LD_INT 1
52953: NEG
52954: PUSH
52955: LD_INT 0
52957: PUSH
52958: EMPTY
52959: LIST
52960: LIST
52961: PUSH
52962: LD_INT 1
52964: NEG
52965: PUSH
52966: LD_INT 1
52968: NEG
52969: PUSH
52970: EMPTY
52971: LIST
52972: LIST
52973: PUSH
52974: LD_INT 1
52976: NEG
52977: PUSH
52978: LD_INT 2
52980: NEG
52981: PUSH
52982: EMPTY
52983: LIST
52984: LIST
52985: PUSH
52986: LD_INT 0
52988: PUSH
52989: LD_INT 2
52991: NEG
52992: PUSH
52993: EMPTY
52994: LIST
52995: LIST
52996: PUSH
52997: LD_INT 1
52999: PUSH
53000: LD_INT 1
53002: NEG
53003: PUSH
53004: EMPTY
53005: LIST
53006: LIST
53007: PUSH
53008: LD_INT 2
53010: PUSH
53011: LD_INT 0
53013: PUSH
53014: EMPTY
53015: LIST
53016: LIST
53017: PUSH
53018: LD_INT 2
53020: PUSH
53021: LD_INT 1
53023: PUSH
53024: EMPTY
53025: LIST
53026: LIST
53027: PUSH
53028: LD_INT 2
53030: PUSH
53031: LD_INT 2
53033: PUSH
53034: EMPTY
53035: LIST
53036: LIST
53037: PUSH
53038: LD_INT 1
53040: PUSH
53041: LD_INT 2
53043: PUSH
53044: EMPTY
53045: LIST
53046: LIST
53047: PUSH
53048: LD_INT 0
53050: PUSH
53051: LD_INT 2
53053: PUSH
53054: EMPTY
53055: LIST
53056: LIST
53057: PUSH
53058: LD_INT 1
53060: NEG
53061: PUSH
53062: LD_INT 1
53064: PUSH
53065: EMPTY
53066: LIST
53067: LIST
53068: PUSH
53069: LD_INT 2
53071: NEG
53072: PUSH
53073: LD_INT 0
53075: PUSH
53076: EMPTY
53077: LIST
53078: LIST
53079: PUSH
53080: LD_INT 2
53082: NEG
53083: PUSH
53084: LD_INT 1
53086: NEG
53087: PUSH
53088: EMPTY
53089: LIST
53090: LIST
53091: PUSH
53092: LD_INT 2
53094: NEG
53095: PUSH
53096: LD_INT 2
53098: NEG
53099: PUSH
53100: EMPTY
53101: LIST
53102: LIST
53103: PUSH
53104: EMPTY
53105: LIST
53106: LIST
53107: LIST
53108: LIST
53109: LIST
53110: LIST
53111: LIST
53112: LIST
53113: LIST
53114: LIST
53115: LIST
53116: LIST
53117: LIST
53118: LIST
53119: LIST
53120: LIST
53121: LIST
53122: LIST
53123: LIST
53124: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53125: LD_ADDR_VAR 0 55
53129: PUSH
53130: LD_INT 0
53132: PUSH
53133: LD_INT 0
53135: PUSH
53136: EMPTY
53137: LIST
53138: LIST
53139: PUSH
53140: LD_INT 0
53142: PUSH
53143: LD_INT 1
53145: NEG
53146: PUSH
53147: EMPTY
53148: LIST
53149: LIST
53150: PUSH
53151: LD_INT 1
53153: PUSH
53154: LD_INT 0
53156: PUSH
53157: EMPTY
53158: LIST
53159: LIST
53160: PUSH
53161: LD_INT 1
53163: PUSH
53164: LD_INT 1
53166: PUSH
53167: EMPTY
53168: LIST
53169: LIST
53170: PUSH
53171: LD_INT 0
53173: PUSH
53174: LD_INT 1
53176: PUSH
53177: EMPTY
53178: LIST
53179: LIST
53180: PUSH
53181: LD_INT 1
53183: NEG
53184: PUSH
53185: LD_INT 0
53187: PUSH
53188: EMPTY
53189: LIST
53190: LIST
53191: PUSH
53192: LD_INT 1
53194: NEG
53195: PUSH
53196: LD_INT 1
53198: NEG
53199: PUSH
53200: EMPTY
53201: LIST
53202: LIST
53203: PUSH
53204: LD_INT 1
53206: NEG
53207: PUSH
53208: LD_INT 2
53210: NEG
53211: PUSH
53212: EMPTY
53213: LIST
53214: LIST
53215: PUSH
53216: LD_INT 0
53218: PUSH
53219: LD_INT 2
53221: NEG
53222: PUSH
53223: EMPTY
53224: LIST
53225: LIST
53226: PUSH
53227: LD_INT 1
53229: PUSH
53230: LD_INT 1
53232: NEG
53233: PUSH
53234: EMPTY
53235: LIST
53236: LIST
53237: PUSH
53238: LD_INT 2
53240: PUSH
53241: LD_INT 0
53243: PUSH
53244: EMPTY
53245: LIST
53246: LIST
53247: PUSH
53248: LD_INT 2
53250: PUSH
53251: LD_INT 1
53253: PUSH
53254: EMPTY
53255: LIST
53256: LIST
53257: PUSH
53258: LD_INT 2
53260: PUSH
53261: LD_INT 2
53263: PUSH
53264: EMPTY
53265: LIST
53266: LIST
53267: PUSH
53268: LD_INT 1
53270: PUSH
53271: LD_INT 2
53273: PUSH
53274: EMPTY
53275: LIST
53276: LIST
53277: PUSH
53278: LD_INT 0
53280: PUSH
53281: LD_INT 2
53283: PUSH
53284: EMPTY
53285: LIST
53286: LIST
53287: PUSH
53288: LD_INT 1
53290: NEG
53291: PUSH
53292: LD_INT 1
53294: PUSH
53295: EMPTY
53296: LIST
53297: LIST
53298: PUSH
53299: LD_INT 2
53301: NEG
53302: PUSH
53303: LD_INT 0
53305: PUSH
53306: EMPTY
53307: LIST
53308: LIST
53309: PUSH
53310: LD_INT 2
53312: NEG
53313: PUSH
53314: LD_INT 1
53316: NEG
53317: PUSH
53318: EMPTY
53319: LIST
53320: LIST
53321: PUSH
53322: LD_INT 2
53324: NEG
53325: PUSH
53326: LD_INT 2
53328: NEG
53329: PUSH
53330: EMPTY
53331: LIST
53332: LIST
53333: PUSH
53334: EMPTY
53335: LIST
53336: LIST
53337: LIST
53338: LIST
53339: LIST
53340: LIST
53341: LIST
53342: LIST
53343: LIST
53344: LIST
53345: LIST
53346: LIST
53347: LIST
53348: LIST
53349: LIST
53350: LIST
53351: LIST
53352: LIST
53353: LIST
53354: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53355: LD_ADDR_VAR 0 56
53359: PUSH
53360: LD_INT 0
53362: PUSH
53363: LD_INT 0
53365: PUSH
53366: EMPTY
53367: LIST
53368: LIST
53369: PUSH
53370: LD_INT 0
53372: PUSH
53373: LD_INT 1
53375: NEG
53376: PUSH
53377: EMPTY
53378: LIST
53379: LIST
53380: PUSH
53381: LD_INT 1
53383: PUSH
53384: LD_INT 0
53386: PUSH
53387: EMPTY
53388: LIST
53389: LIST
53390: PUSH
53391: LD_INT 1
53393: PUSH
53394: LD_INT 1
53396: PUSH
53397: EMPTY
53398: LIST
53399: LIST
53400: PUSH
53401: LD_INT 0
53403: PUSH
53404: LD_INT 1
53406: PUSH
53407: EMPTY
53408: LIST
53409: LIST
53410: PUSH
53411: LD_INT 1
53413: NEG
53414: PUSH
53415: LD_INT 0
53417: PUSH
53418: EMPTY
53419: LIST
53420: LIST
53421: PUSH
53422: LD_INT 1
53424: NEG
53425: PUSH
53426: LD_INT 1
53428: NEG
53429: PUSH
53430: EMPTY
53431: LIST
53432: LIST
53433: PUSH
53434: LD_INT 1
53436: NEG
53437: PUSH
53438: LD_INT 2
53440: NEG
53441: PUSH
53442: EMPTY
53443: LIST
53444: LIST
53445: PUSH
53446: LD_INT 0
53448: PUSH
53449: LD_INT 2
53451: NEG
53452: PUSH
53453: EMPTY
53454: LIST
53455: LIST
53456: PUSH
53457: LD_INT 1
53459: PUSH
53460: LD_INT 1
53462: NEG
53463: PUSH
53464: EMPTY
53465: LIST
53466: LIST
53467: PUSH
53468: LD_INT 2
53470: PUSH
53471: LD_INT 0
53473: PUSH
53474: EMPTY
53475: LIST
53476: LIST
53477: PUSH
53478: LD_INT 2
53480: PUSH
53481: LD_INT 1
53483: PUSH
53484: EMPTY
53485: LIST
53486: LIST
53487: PUSH
53488: LD_INT 2
53490: PUSH
53491: LD_INT 2
53493: PUSH
53494: EMPTY
53495: LIST
53496: LIST
53497: PUSH
53498: LD_INT 1
53500: PUSH
53501: LD_INT 2
53503: PUSH
53504: EMPTY
53505: LIST
53506: LIST
53507: PUSH
53508: LD_INT 0
53510: PUSH
53511: LD_INT 2
53513: PUSH
53514: EMPTY
53515: LIST
53516: LIST
53517: PUSH
53518: LD_INT 1
53520: NEG
53521: PUSH
53522: LD_INT 1
53524: PUSH
53525: EMPTY
53526: LIST
53527: LIST
53528: PUSH
53529: LD_INT 2
53531: NEG
53532: PUSH
53533: LD_INT 0
53535: PUSH
53536: EMPTY
53537: LIST
53538: LIST
53539: PUSH
53540: LD_INT 2
53542: NEG
53543: PUSH
53544: LD_INT 1
53546: NEG
53547: PUSH
53548: EMPTY
53549: LIST
53550: LIST
53551: PUSH
53552: LD_INT 2
53554: NEG
53555: PUSH
53556: LD_INT 2
53558: NEG
53559: PUSH
53560: EMPTY
53561: LIST
53562: LIST
53563: PUSH
53564: EMPTY
53565: LIST
53566: LIST
53567: LIST
53568: LIST
53569: LIST
53570: LIST
53571: LIST
53572: LIST
53573: LIST
53574: LIST
53575: LIST
53576: LIST
53577: LIST
53578: LIST
53579: LIST
53580: LIST
53581: LIST
53582: LIST
53583: LIST
53584: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53585: LD_ADDR_VAR 0 57
53589: PUSH
53590: LD_INT 0
53592: PUSH
53593: LD_INT 0
53595: PUSH
53596: EMPTY
53597: LIST
53598: LIST
53599: PUSH
53600: LD_INT 0
53602: PUSH
53603: LD_INT 1
53605: NEG
53606: PUSH
53607: EMPTY
53608: LIST
53609: LIST
53610: PUSH
53611: LD_INT 1
53613: PUSH
53614: LD_INT 0
53616: PUSH
53617: EMPTY
53618: LIST
53619: LIST
53620: PUSH
53621: LD_INT 1
53623: PUSH
53624: LD_INT 1
53626: PUSH
53627: EMPTY
53628: LIST
53629: LIST
53630: PUSH
53631: LD_INT 0
53633: PUSH
53634: LD_INT 1
53636: PUSH
53637: EMPTY
53638: LIST
53639: LIST
53640: PUSH
53641: LD_INT 1
53643: NEG
53644: PUSH
53645: LD_INT 0
53647: PUSH
53648: EMPTY
53649: LIST
53650: LIST
53651: PUSH
53652: LD_INT 1
53654: NEG
53655: PUSH
53656: LD_INT 1
53658: NEG
53659: PUSH
53660: EMPTY
53661: LIST
53662: LIST
53663: PUSH
53664: LD_INT 1
53666: NEG
53667: PUSH
53668: LD_INT 2
53670: NEG
53671: PUSH
53672: EMPTY
53673: LIST
53674: LIST
53675: PUSH
53676: LD_INT 0
53678: PUSH
53679: LD_INT 2
53681: NEG
53682: PUSH
53683: EMPTY
53684: LIST
53685: LIST
53686: PUSH
53687: LD_INT 1
53689: PUSH
53690: LD_INT 1
53692: NEG
53693: PUSH
53694: EMPTY
53695: LIST
53696: LIST
53697: PUSH
53698: LD_INT 2
53700: PUSH
53701: LD_INT 0
53703: PUSH
53704: EMPTY
53705: LIST
53706: LIST
53707: PUSH
53708: LD_INT 2
53710: PUSH
53711: LD_INT 1
53713: PUSH
53714: EMPTY
53715: LIST
53716: LIST
53717: PUSH
53718: LD_INT 2
53720: PUSH
53721: LD_INT 2
53723: PUSH
53724: EMPTY
53725: LIST
53726: LIST
53727: PUSH
53728: LD_INT 1
53730: PUSH
53731: LD_INT 2
53733: PUSH
53734: EMPTY
53735: LIST
53736: LIST
53737: PUSH
53738: LD_INT 0
53740: PUSH
53741: LD_INT 2
53743: PUSH
53744: EMPTY
53745: LIST
53746: LIST
53747: PUSH
53748: LD_INT 1
53750: NEG
53751: PUSH
53752: LD_INT 1
53754: PUSH
53755: EMPTY
53756: LIST
53757: LIST
53758: PUSH
53759: LD_INT 2
53761: NEG
53762: PUSH
53763: LD_INT 0
53765: PUSH
53766: EMPTY
53767: LIST
53768: LIST
53769: PUSH
53770: LD_INT 2
53772: NEG
53773: PUSH
53774: LD_INT 1
53776: NEG
53777: PUSH
53778: EMPTY
53779: LIST
53780: LIST
53781: PUSH
53782: LD_INT 2
53784: NEG
53785: PUSH
53786: LD_INT 2
53788: NEG
53789: PUSH
53790: EMPTY
53791: LIST
53792: LIST
53793: PUSH
53794: EMPTY
53795: LIST
53796: LIST
53797: LIST
53798: LIST
53799: LIST
53800: LIST
53801: LIST
53802: LIST
53803: LIST
53804: LIST
53805: LIST
53806: LIST
53807: LIST
53808: LIST
53809: LIST
53810: LIST
53811: LIST
53812: LIST
53813: LIST
53814: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53815: LD_ADDR_VAR 0 58
53819: PUSH
53820: LD_INT 0
53822: PUSH
53823: LD_INT 0
53825: PUSH
53826: EMPTY
53827: LIST
53828: LIST
53829: PUSH
53830: LD_INT 0
53832: PUSH
53833: LD_INT 1
53835: NEG
53836: PUSH
53837: EMPTY
53838: LIST
53839: LIST
53840: PUSH
53841: LD_INT 1
53843: PUSH
53844: LD_INT 0
53846: PUSH
53847: EMPTY
53848: LIST
53849: LIST
53850: PUSH
53851: LD_INT 1
53853: PUSH
53854: LD_INT 1
53856: PUSH
53857: EMPTY
53858: LIST
53859: LIST
53860: PUSH
53861: LD_INT 0
53863: PUSH
53864: LD_INT 1
53866: PUSH
53867: EMPTY
53868: LIST
53869: LIST
53870: PUSH
53871: LD_INT 1
53873: NEG
53874: PUSH
53875: LD_INT 0
53877: PUSH
53878: EMPTY
53879: LIST
53880: LIST
53881: PUSH
53882: LD_INT 1
53884: NEG
53885: PUSH
53886: LD_INT 1
53888: NEG
53889: PUSH
53890: EMPTY
53891: LIST
53892: LIST
53893: PUSH
53894: LD_INT 1
53896: NEG
53897: PUSH
53898: LD_INT 2
53900: NEG
53901: PUSH
53902: EMPTY
53903: LIST
53904: LIST
53905: PUSH
53906: LD_INT 0
53908: PUSH
53909: LD_INT 2
53911: NEG
53912: PUSH
53913: EMPTY
53914: LIST
53915: LIST
53916: PUSH
53917: LD_INT 1
53919: PUSH
53920: LD_INT 1
53922: NEG
53923: PUSH
53924: EMPTY
53925: LIST
53926: LIST
53927: PUSH
53928: LD_INT 2
53930: PUSH
53931: LD_INT 0
53933: PUSH
53934: EMPTY
53935: LIST
53936: LIST
53937: PUSH
53938: LD_INT 2
53940: PUSH
53941: LD_INT 1
53943: PUSH
53944: EMPTY
53945: LIST
53946: LIST
53947: PUSH
53948: LD_INT 2
53950: PUSH
53951: LD_INT 2
53953: PUSH
53954: EMPTY
53955: LIST
53956: LIST
53957: PUSH
53958: LD_INT 1
53960: PUSH
53961: LD_INT 2
53963: PUSH
53964: EMPTY
53965: LIST
53966: LIST
53967: PUSH
53968: LD_INT 0
53970: PUSH
53971: LD_INT 2
53973: PUSH
53974: EMPTY
53975: LIST
53976: LIST
53977: PUSH
53978: LD_INT 1
53980: NEG
53981: PUSH
53982: LD_INT 1
53984: PUSH
53985: EMPTY
53986: LIST
53987: LIST
53988: PUSH
53989: LD_INT 2
53991: NEG
53992: PUSH
53993: LD_INT 0
53995: PUSH
53996: EMPTY
53997: LIST
53998: LIST
53999: PUSH
54000: LD_INT 2
54002: NEG
54003: PUSH
54004: LD_INT 1
54006: NEG
54007: PUSH
54008: EMPTY
54009: LIST
54010: LIST
54011: PUSH
54012: LD_INT 2
54014: NEG
54015: PUSH
54016: LD_INT 2
54018: NEG
54019: PUSH
54020: EMPTY
54021: LIST
54022: LIST
54023: PUSH
54024: EMPTY
54025: LIST
54026: LIST
54027: LIST
54028: LIST
54029: LIST
54030: LIST
54031: LIST
54032: LIST
54033: LIST
54034: LIST
54035: LIST
54036: LIST
54037: LIST
54038: LIST
54039: LIST
54040: LIST
54041: LIST
54042: LIST
54043: LIST
54044: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54045: LD_ADDR_VAR 0 59
54049: PUSH
54050: LD_INT 0
54052: PUSH
54053: LD_INT 0
54055: PUSH
54056: EMPTY
54057: LIST
54058: LIST
54059: PUSH
54060: LD_INT 0
54062: PUSH
54063: LD_INT 1
54065: NEG
54066: PUSH
54067: EMPTY
54068: LIST
54069: LIST
54070: PUSH
54071: LD_INT 1
54073: PUSH
54074: LD_INT 0
54076: PUSH
54077: EMPTY
54078: LIST
54079: LIST
54080: PUSH
54081: LD_INT 1
54083: PUSH
54084: LD_INT 1
54086: PUSH
54087: EMPTY
54088: LIST
54089: LIST
54090: PUSH
54091: LD_INT 0
54093: PUSH
54094: LD_INT 1
54096: PUSH
54097: EMPTY
54098: LIST
54099: LIST
54100: PUSH
54101: LD_INT 1
54103: NEG
54104: PUSH
54105: LD_INT 0
54107: PUSH
54108: EMPTY
54109: LIST
54110: LIST
54111: PUSH
54112: LD_INT 1
54114: NEG
54115: PUSH
54116: LD_INT 1
54118: NEG
54119: PUSH
54120: EMPTY
54121: LIST
54122: LIST
54123: PUSH
54124: EMPTY
54125: LIST
54126: LIST
54127: LIST
54128: LIST
54129: LIST
54130: LIST
54131: LIST
54132: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54133: LD_ADDR_VAR 0 60
54137: PUSH
54138: LD_INT 0
54140: PUSH
54141: LD_INT 0
54143: PUSH
54144: EMPTY
54145: LIST
54146: LIST
54147: PUSH
54148: LD_INT 0
54150: PUSH
54151: LD_INT 1
54153: NEG
54154: PUSH
54155: EMPTY
54156: LIST
54157: LIST
54158: PUSH
54159: LD_INT 1
54161: PUSH
54162: LD_INT 0
54164: PUSH
54165: EMPTY
54166: LIST
54167: LIST
54168: PUSH
54169: LD_INT 1
54171: PUSH
54172: LD_INT 1
54174: PUSH
54175: EMPTY
54176: LIST
54177: LIST
54178: PUSH
54179: LD_INT 0
54181: PUSH
54182: LD_INT 1
54184: PUSH
54185: EMPTY
54186: LIST
54187: LIST
54188: PUSH
54189: LD_INT 1
54191: NEG
54192: PUSH
54193: LD_INT 0
54195: PUSH
54196: EMPTY
54197: LIST
54198: LIST
54199: PUSH
54200: LD_INT 1
54202: NEG
54203: PUSH
54204: LD_INT 1
54206: NEG
54207: PUSH
54208: EMPTY
54209: LIST
54210: LIST
54211: PUSH
54212: EMPTY
54213: LIST
54214: LIST
54215: LIST
54216: LIST
54217: LIST
54218: LIST
54219: LIST
54220: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54221: LD_ADDR_VAR 0 61
54225: PUSH
54226: LD_INT 0
54228: PUSH
54229: LD_INT 0
54231: PUSH
54232: EMPTY
54233: LIST
54234: LIST
54235: PUSH
54236: LD_INT 0
54238: PUSH
54239: LD_INT 1
54241: NEG
54242: PUSH
54243: EMPTY
54244: LIST
54245: LIST
54246: PUSH
54247: LD_INT 1
54249: PUSH
54250: LD_INT 0
54252: PUSH
54253: EMPTY
54254: LIST
54255: LIST
54256: PUSH
54257: LD_INT 1
54259: PUSH
54260: LD_INT 1
54262: PUSH
54263: EMPTY
54264: LIST
54265: LIST
54266: PUSH
54267: LD_INT 0
54269: PUSH
54270: LD_INT 1
54272: PUSH
54273: EMPTY
54274: LIST
54275: LIST
54276: PUSH
54277: LD_INT 1
54279: NEG
54280: PUSH
54281: LD_INT 0
54283: PUSH
54284: EMPTY
54285: LIST
54286: LIST
54287: PUSH
54288: LD_INT 1
54290: NEG
54291: PUSH
54292: LD_INT 1
54294: NEG
54295: PUSH
54296: EMPTY
54297: LIST
54298: LIST
54299: PUSH
54300: EMPTY
54301: LIST
54302: LIST
54303: LIST
54304: LIST
54305: LIST
54306: LIST
54307: LIST
54308: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54309: LD_ADDR_VAR 0 62
54313: PUSH
54314: LD_INT 0
54316: PUSH
54317: LD_INT 0
54319: PUSH
54320: EMPTY
54321: LIST
54322: LIST
54323: PUSH
54324: LD_INT 0
54326: PUSH
54327: LD_INT 1
54329: NEG
54330: PUSH
54331: EMPTY
54332: LIST
54333: LIST
54334: PUSH
54335: LD_INT 1
54337: PUSH
54338: LD_INT 0
54340: PUSH
54341: EMPTY
54342: LIST
54343: LIST
54344: PUSH
54345: LD_INT 1
54347: PUSH
54348: LD_INT 1
54350: PUSH
54351: EMPTY
54352: LIST
54353: LIST
54354: PUSH
54355: LD_INT 0
54357: PUSH
54358: LD_INT 1
54360: PUSH
54361: EMPTY
54362: LIST
54363: LIST
54364: PUSH
54365: LD_INT 1
54367: NEG
54368: PUSH
54369: LD_INT 0
54371: PUSH
54372: EMPTY
54373: LIST
54374: LIST
54375: PUSH
54376: LD_INT 1
54378: NEG
54379: PUSH
54380: LD_INT 1
54382: NEG
54383: PUSH
54384: EMPTY
54385: LIST
54386: LIST
54387: PUSH
54388: EMPTY
54389: LIST
54390: LIST
54391: LIST
54392: LIST
54393: LIST
54394: LIST
54395: LIST
54396: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54397: LD_ADDR_VAR 0 63
54401: PUSH
54402: LD_INT 0
54404: PUSH
54405: LD_INT 0
54407: PUSH
54408: EMPTY
54409: LIST
54410: LIST
54411: PUSH
54412: LD_INT 0
54414: PUSH
54415: LD_INT 1
54417: NEG
54418: PUSH
54419: EMPTY
54420: LIST
54421: LIST
54422: PUSH
54423: LD_INT 1
54425: PUSH
54426: LD_INT 0
54428: PUSH
54429: EMPTY
54430: LIST
54431: LIST
54432: PUSH
54433: LD_INT 1
54435: PUSH
54436: LD_INT 1
54438: PUSH
54439: EMPTY
54440: LIST
54441: LIST
54442: PUSH
54443: LD_INT 0
54445: PUSH
54446: LD_INT 1
54448: PUSH
54449: EMPTY
54450: LIST
54451: LIST
54452: PUSH
54453: LD_INT 1
54455: NEG
54456: PUSH
54457: LD_INT 0
54459: PUSH
54460: EMPTY
54461: LIST
54462: LIST
54463: PUSH
54464: LD_INT 1
54466: NEG
54467: PUSH
54468: LD_INT 1
54470: NEG
54471: PUSH
54472: EMPTY
54473: LIST
54474: LIST
54475: PUSH
54476: EMPTY
54477: LIST
54478: LIST
54479: LIST
54480: LIST
54481: LIST
54482: LIST
54483: LIST
54484: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54485: LD_ADDR_VAR 0 64
54489: PUSH
54490: LD_INT 0
54492: PUSH
54493: LD_INT 0
54495: PUSH
54496: EMPTY
54497: LIST
54498: LIST
54499: PUSH
54500: LD_INT 0
54502: PUSH
54503: LD_INT 1
54505: NEG
54506: PUSH
54507: EMPTY
54508: LIST
54509: LIST
54510: PUSH
54511: LD_INT 1
54513: PUSH
54514: LD_INT 0
54516: PUSH
54517: EMPTY
54518: LIST
54519: LIST
54520: PUSH
54521: LD_INT 1
54523: PUSH
54524: LD_INT 1
54526: PUSH
54527: EMPTY
54528: LIST
54529: LIST
54530: PUSH
54531: LD_INT 0
54533: PUSH
54534: LD_INT 1
54536: PUSH
54537: EMPTY
54538: LIST
54539: LIST
54540: PUSH
54541: LD_INT 1
54543: NEG
54544: PUSH
54545: LD_INT 0
54547: PUSH
54548: EMPTY
54549: LIST
54550: LIST
54551: PUSH
54552: LD_INT 1
54554: NEG
54555: PUSH
54556: LD_INT 1
54558: NEG
54559: PUSH
54560: EMPTY
54561: LIST
54562: LIST
54563: PUSH
54564: EMPTY
54565: LIST
54566: LIST
54567: LIST
54568: LIST
54569: LIST
54570: LIST
54571: LIST
54572: ST_TO_ADDR
// end ; 1 :
54573: GO 60470
54575: LD_INT 1
54577: DOUBLE
54578: EQUAL
54579: IFTRUE 54583
54581: GO 57206
54583: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54584: LD_ADDR_VAR 0 11
54588: PUSH
54589: LD_INT 1
54591: NEG
54592: PUSH
54593: LD_INT 3
54595: NEG
54596: PUSH
54597: EMPTY
54598: LIST
54599: LIST
54600: PUSH
54601: LD_INT 0
54603: PUSH
54604: LD_INT 3
54606: NEG
54607: PUSH
54608: EMPTY
54609: LIST
54610: LIST
54611: PUSH
54612: LD_INT 1
54614: PUSH
54615: LD_INT 2
54617: NEG
54618: PUSH
54619: EMPTY
54620: LIST
54621: LIST
54622: PUSH
54623: EMPTY
54624: LIST
54625: LIST
54626: LIST
54627: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54628: LD_ADDR_VAR 0 12
54632: PUSH
54633: LD_INT 2
54635: PUSH
54636: LD_INT 1
54638: NEG
54639: PUSH
54640: EMPTY
54641: LIST
54642: LIST
54643: PUSH
54644: LD_INT 3
54646: PUSH
54647: LD_INT 0
54649: PUSH
54650: EMPTY
54651: LIST
54652: LIST
54653: PUSH
54654: LD_INT 3
54656: PUSH
54657: LD_INT 1
54659: PUSH
54660: EMPTY
54661: LIST
54662: LIST
54663: PUSH
54664: EMPTY
54665: LIST
54666: LIST
54667: LIST
54668: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54669: LD_ADDR_VAR 0 13
54673: PUSH
54674: LD_INT 3
54676: PUSH
54677: LD_INT 2
54679: PUSH
54680: EMPTY
54681: LIST
54682: LIST
54683: PUSH
54684: LD_INT 3
54686: PUSH
54687: LD_INT 3
54689: PUSH
54690: EMPTY
54691: LIST
54692: LIST
54693: PUSH
54694: LD_INT 2
54696: PUSH
54697: LD_INT 3
54699: PUSH
54700: EMPTY
54701: LIST
54702: LIST
54703: PUSH
54704: EMPTY
54705: LIST
54706: LIST
54707: LIST
54708: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54709: LD_ADDR_VAR 0 14
54713: PUSH
54714: LD_INT 1
54716: PUSH
54717: LD_INT 3
54719: PUSH
54720: EMPTY
54721: LIST
54722: LIST
54723: PUSH
54724: LD_INT 0
54726: PUSH
54727: LD_INT 3
54729: PUSH
54730: EMPTY
54731: LIST
54732: LIST
54733: PUSH
54734: LD_INT 1
54736: NEG
54737: PUSH
54738: LD_INT 2
54740: PUSH
54741: EMPTY
54742: LIST
54743: LIST
54744: PUSH
54745: EMPTY
54746: LIST
54747: LIST
54748: LIST
54749: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54750: LD_ADDR_VAR 0 15
54754: PUSH
54755: LD_INT 2
54757: NEG
54758: PUSH
54759: LD_INT 1
54761: PUSH
54762: EMPTY
54763: LIST
54764: LIST
54765: PUSH
54766: LD_INT 3
54768: NEG
54769: PUSH
54770: LD_INT 0
54772: PUSH
54773: EMPTY
54774: LIST
54775: LIST
54776: PUSH
54777: LD_INT 3
54779: NEG
54780: PUSH
54781: LD_INT 1
54783: NEG
54784: PUSH
54785: EMPTY
54786: LIST
54787: LIST
54788: PUSH
54789: EMPTY
54790: LIST
54791: LIST
54792: LIST
54793: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54794: LD_ADDR_VAR 0 16
54798: PUSH
54799: LD_INT 2
54801: NEG
54802: PUSH
54803: LD_INT 3
54805: NEG
54806: PUSH
54807: EMPTY
54808: LIST
54809: LIST
54810: PUSH
54811: LD_INT 3
54813: NEG
54814: PUSH
54815: LD_INT 2
54817: NEG
54818: PUSH
54819: EMPTY
54820: LIST
54821: LIST
54822: PUSH
54823: LD_INT 3
54825: NEG
54826: PUSH
54827: LD_INT 3
54829: NEG
54830: PUSH
54831: EMPTY
54832: LIST
54833: LIST
54834: PUSH
54835: EMPTY
54836: LIST
54837: LIST
54838: LIST
54839: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54840: LD_ADDR_VAR 0 17
54844: PUSH
54845: LD_INT 1
54847: NEG
54848: PUSH
54849: LD_INT 3
54851: NEG
54852: PUSH
54853: EMPTY
54854: LIST
54855: LIST
54856: PUSH
54857: LD_INT 0
54859: PUSH
54860: LD_INT 3
54862: NEG
54863: PUSH
54864: EMPTY
54865: LIST
54866: LIST
54867: PUSH
54868: LD_INT 1
54870: PUSH
54871: LD_INT 2
54873: NEG
54874: PUSH
54875: EMPTY
54876: LIST
54877: LIST
54878: PUSH
54879: EMPTY
54880: LIST
54881: LIST
54882: LIST
54883: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54884: LD_ADDR_VAR 0 18
54888: PUSH
54889: LD_INT 2
54891: PUSH
54892: LD_INT 1
54894: NEG
54895: PUSH
54896: EMPTY
54897: LIST
54898: LIST
54899: PUSH
54900: LD_INT 3
54902: PUSH
54903: LD_INT 0
54905: PUSH
54906: EMPTY
54907: LIST
54908: LIST
54909: PUSH
54910: LD_INT 3
54912: PUSH
54913: LD_INT 1
54915: PUSH
54916: EMPTY
54917: LIST
54918: LIST
54919: PUSH
54920: EMPTY
54921: LIST
54922: LIST
54923: LIST
54924: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54925: LD_ADDR_VAR 0 19
54929: PUSH
54930: LD_INT 3
54932: PUSH
54933: LD_INT 2
54935: PUSH
54936: EMPTY
54937: LIST
54938: LIST
54939: PUSH
54940: LD_INT 3
54942: PUSH
54943: LD_INT 3
54945: PUSH
54946: EMPTY
54947: LIST
54948: LIST
54949: PUSH
54950: LD_INT 2
54952: PUSH
54953: LD_INT 3
54955: PUSH
54956: EMPTY
54957: LIST
54958: LIST
54959: PUSH
54960: EMPTY
54961: LIST
54962: LIST
54963: LIST
54964: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54965: LD_ADDR_VAR 0 20
54969: PUSH
54970: LD_INT 1
54972: PUSH
54973: LD_INT 3
54975: PUSH
54976: EMPTY
54977: LIST
54978: LIST
54979: PUSH
54980: LD_INT 0
54982: PUSH
54983: LD_INT 3
54985: PUSH
54986: EMPTY
54987: LIST
54988: LIST
54989: PUSH
54990: LD_INT 1
54992: NEG
54993: PUSH
54994: LD_INT 2
54996: PUSH
54997: EMPTY
54998: LIST
54999: LIST
55000: PUSH
55001: EMPTY
55002: LIST
55003: LIST
55004: LIST
55005: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55006: LD_ADDR_VAR 0 21
55010: PUSH
55011: LD_INT 2
55013: NEG
55014: PUSH
55015: LD_INT 1
55017: PUSH
55018: EMPTY
55019: LIST
55020: LIST
55021: PUSH
55022: LD_INT 3
55024: NEG
55025: PUSH
55026: LD_INT 0
55028: PUSH
55029: EMPTY
55030: LIST
55031: LIST
55032: PUSH
55033: LD_INT 3
55035: NEG
55036: PUSH
55037: LD_INT 1
55039: NEG
55040: PUSH
55041: EMPTY
55042: LIST
55043: LIST
55044: PUSH
55045: EMPTY
55046: LIST
55047: LIST
55048: LIST
55049: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55050: LD_ADDR_VAR 0 22
55054: PUSH
55055: LD_INT 2
55057: NEG
55058: PUSH
55059: LD_INT 3
55061: NEG
55062: PUSH
55063: EMPTY
55064: LIST
55065: LIST
55066: PUSH
55067: LD_INT 3
55069: NEG
55070: PUSH
55071: LD_INT 2
55073: NEG
55074: PUSH
55075: EMPTY
55076: LIST
55077: LIST
55078: PUSH
55079: LD_INT 3
55081: NEG
55082: PUSH
55083: LD_INT 3
55085: NEG
55086: PUSH
55087: EMPTY
55088: LIST
55089: LIST
55090: PUSH
55091: EMPTY
55092: LIST
55093: LIST
55094: LIST
55095: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
55096: LD_ADDR_VAR 0 23
55100: PUSH
55101: LD_INT 0
55103: PUSH
55104: LD_INT 3
55106: NEG
55107: PUSH
55108: EMPTY
55109: LIST
55110: LIST
55111: PUSH
55112: LD_INT 1
55114: NEG
55115: PUSH
55116: LD_INT 4
55118: NEG
55119: PUSH
55120: EMPTY
55121: LIST
55122: LIST
55123: PUSH
55124: LD_INT 1
55126: PUSH
55127: LD_INT 3
55129: NEG
55130: PUSH
55131: EMPTY
55132: LIST
55133: LIST
55134: PUSH
55135: EMPTY
55136: LIST
55137: LIST
55138: LIST
55139: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
55140: LD_ADDR_VAR 0 24
55144: PUSH
55145: LD_INT 3
55147: PUSH
55148: LD_INT 0
55150: PUSH
55151: EMPTY
55152: LIST
55153: LIST
55154: PUSH
55155: LD_INT 3
55157: PUSH
55158: LD_INT 1
55160: NEG
55161: PUSH
55162: EMPTY
55163: LIST
55164: LIST
55165: PUSH
55166: LD_INT 4
55168: PUSH
55169: LD_INT 1
55171: PUSH
55172: EMPTY
55173: LIST
55174: LIST
55175: PUSH
55176: EMPTY
55177: LIST
55178: LIST
55179: LIST
55180: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
55181: LD_ADDR_VAR 0 25
55185: PUSH
55186: LD_INT 3
55188: PUSH
55189: LD_INT 3
55191: PUSH
55192: EMPTY
55193: LIST
55194: LIST
55195: PUSH
55196: LD_INT 4
55198: PUSH
55199: LD_INT 3
55201: PUSH
55202: EMPTY
55203: LIST
55204: LIST
55205: PUSH
55206: LD_INT 3
55208: PUSH
55209: LD_INT 4
55211: PUSH
55212: EMPTY
55213: LIST
55214: LIST
55215: PUSH
55216: EMPTY
55217: LIST
55218: LIST
55219: LIST
55220: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
55221: LD_ADDR_VAR 0 26
55225: PUSH
55226: LD_INT 0
55228: PUSH
55229: LD_INT 3
55231: PUSH
55232: EMPTY
55233: LIST
55234: LIST
55235: PUSH
55236: LD_INT 1
55238: PUSH
55239: LD_INT 4
55241: PUSH
55242: EMPTY
55243: LIST
55244: LIST
55245: PUSH
55246: LD_INT 1
55248: NEG
55249: PUSH
55250: LD_INT 3
55252: PUSH
55253: EMPTY
55254: LIST
55255: LIST
55256: PUSH
55257: EMPTY
55258: LIST
55259: LIST
55260: LIST
55261: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
55262: LD_ADDR_VAR 0 27
55266: PUSH
55267: LD_INT 3
55269: NEG
55270: PUSH
55271: LD_INT 0
55273: PUSH
55274: EMPTY
55275: LIST
55276: LIST
55277: PUSH
55278: LD_INT 3
55280: NEG
55281: PUSH
55282: LD_INT 1
55284: PUSH
55285: EMPTY
55286: LIST
55287: LIST
55288: PUSH
55289: LD_INT 4
55291: NEG
55292: PUSH
55293: LD_INT 1
55295: NEG
55296: PUSH
55297: EMPTY
55298: LIST
55299: LIST
55300: PUSH
55301: EMPTY
55302: LIST
55303: LIST
55304: LIST
55305: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
55306: LD_ADDR_VAR 0 28
55310: PUSH
55311: LD_INT 3
55313: NEG
55314: PUSH
55315: LD_INT 3
55317: NEG
55318: PUSH
55319: EMPTY
55320: LIST
55321: LIST
55322: PUSH
55323: LD_INT 3
55325: NEG
55326: PUSH
55327: LD_INT 4
55329: NEG
55330: PUSH
55331: EMPTY
55332: LIST
55333: LIST
55334: PUSH
55335: LD_INT 4
55337: NEG
55338: PUSH
55339: LD_INT 3
55341: NEG
55342: PUSH
55343: EMPTY
55344: LIST
55345: LIST
55346: PUSH
55347: EMPTY
55348: LIST
55349: LIST
55350: LIST
55351: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
55352: LD_ADDR_VAR 0 29
55356: PUSH
55357: LD_INT 1
55359: NEG
55360: PUSH
55361: LD_INT 3
55363: NEG
55364: PUSH
55365: EMPTY
55366: LIST
55367: LIST
55368: PUSH
55369: LD_INT 0
55371: PUSH
55372: LD_INT 3
55374: NEG
55375: PUSH
55376: EMPTY
55377: LIST
55378: LIST
55379: PUSH
55380: LD_INT 1
55382: PUSH
55383: LD_INT 2
55385: NEG
55386: PUSH
55387: EMPTY
55388: LIST
55389: LIST
55390: PUSH
55391: LD_INT 1
55393: NEG
55394: PUSH
55395: LD_INT 4
55397: NEG
55398: PUSH
55399: EMPTY
55400: LIST
55401: LIST
55402: PUSH
55403: LD_INT 0
55405: PUSH
55406: LD_INT 4
55408: NEG
55409: PUSH
55410: EMPTY
55411: LIST
55412: LIST
55413: PUSH
55414: LD_INT 1
55416: PUSH
55417: LD_INT 3
55419: NEG
55420: PUSH
55421: EMPTY
55422: LIST
55423: LIST
55424: PUSH
55425: LD_INT 1
55427: NEG
55428: PUSH
55429: LD_INT 5
55431: NEG
55432: PUSH
55433: EMPTY
55434: LIST
55435: LIST
55436: PUSH
55437: LD_INT 0
55439: PUSH
55440: LD_INT 5
55442: NEG
55443: PUSH
55444: EMPTY
55445: LIST
55446: LIST
55447: PUSH
55448: LD_INT 1
55450: PUSH
55451: LD_INT 4
55453: NEG
55454: PUSH
55455: EMPTY
55456: LIST
55457: LIST
55458: PUSH
55459: LD_INT 1
55461: NEG
55462: PUSH
55463: LD_INT 6
55465: NEG
55466: PUSH
55467: EMPTY
55468: LIST
55469: LIST
55470: PUSH
55471: LD_INT 0
55473: PUSH
55474: LD_INT 6
55476: NEG
55477: PUSH
55478: EMPTY
55479: LIST
55480: LIST
55481: PUSH
55482: LD_INT 1
55484: PUSH
55485: LD_INT 5
55487: NEG
55488: PUSH
55489: EMPTY
55490: LIST
55491: LIST
55492: PUSH
55493: EMPTY
55494: LIST
55495: LIST
55496: LIST
55497: LIST
55498: LIST
55499: LIST
55500: LIST
55501: LIST
55502: LIST
55503: LIST
55504: LIST
55505: LIST
55506: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
55507: LD_ADDR_VAR 0 30
55511: PUSH
55512: LD_INT 2
55514: PUSH
55515: LD_INT 1
55517: NEG
55518: PUSH
55519: EMPTY
55520: LIST
55521: LIST
55522: PUSH
55523: LD_INT 3
55525: PUSH
55526: LD_INT 0
55528: PUSH
55529: EMPTY
55530: LIST
55531: LIST
55532: PUSH
55533: LD_INT 3
55535: PUSH
55536: LD_INT 1
55538: PUSH
55539: EMPTY
55540: LIST
55541: LIST
55542: PUSH
55543: LD_INT 3
55545: PUSH
55546: LD_INT 1
55548: NEG
55549: PUSH
55550: EMPTY
55551: LIST
55552: LIST
55553: PUSH
55554: LD_INT 4
55556: PUSH
55557: LD_INT 0
55559: PUSH
55560: EMPTY
55561: LIST
55562: LIST
55563: PUSH
55564: LD_INT 4
55566: PUSH
55567: LD_INT 1
55569: PUSH
55570: EMPTY
55571: LIST
55572: LIST
55573: PUSH
55574: LD_INT 4
55576: PUSH
55577: LD_INT 1
55579: NEG
55580: PUSH
55581: EMPTY
55582: LIST
55583: LIST
55584: PUSH
55585: LD_INT 5
55587: PUSH
55588: LD_INT 0
55590: PUSH
55591: EMPTY
55592: LIST
55593: LIST
55594: PUSH
55595: LD_INT 5
55597: PUSH
55598: LD_INT 1
55600: PUSH
55601: EMPTY
55602: LIST
55603: LIST
55604: PUSH
55605: LD_INT 5
55607: PUSH
55608: LD_INT 1
55610: NEG
55611: PUSH
55612: EMPTY
55613: LIST
55614: LIST
55615: PUSH
55616: LD_INT 6
55618: PUSH
55619: LD_INT 0
55621: PUSH
55622: EMPTY
55623: LIST
55624: LIST
55625: PUSH
55626: LD_INT 6
55628: PUSH
55629: LD_INT 1
55631: PUSH
55632: EMPTY
55633: LIST
55634: LIST
55635: PUSH
55636: EMPTY
55637: LIST
55638: LIST
55639: LIST
55640: LIST
55641: LIST
55642: LIST
55643: LIST
55644: LIST
55645: LIST
55646: LIST
55647: LIST
55648: LIST
55649: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
55650: LD_ADDR_VAR 0 31
55654: PUSH
55655: LD_INT 3
55657: PUSH
55658: LD_INT 2
55660: PUSH
55661: EMPTY
55662: LIST
55663: LIST
55664: PUSH
55665: LD_INT 3
55667: PUSH
55668: LD_INT 3
55670: PUSH
55671: EMPTY
55672: LIST
55673: LIST
55674: PUSH
55675: LD_INT 2
55677: PUSH
55678: LD_INT 3
55680: PUSH
55681: EMPTY
55682: LIST
55683: LIST
55684: PUSH
55685: LD_INT 4
55687: PUSH
55688: LD_INT 3
55690: PUSH
55691: EMPTY
55692: LIST
55693: LIST
55694: PUSH
55695: LD_INT 4
55697: PUSH
55698: LD_INT 4
55700: PUSH
55701: EMPTY
55702: LIST
55703: LIST
55704: PUSH
55705: LD_INT 3
55707: PUSH
55708: LD_INT 4
55710: PUSH
55711: EMPTY
55712: LIST
55713: LIST
55714: PUSH
55715: LD_INT 5
55717: PUSH
55718: LD_INT 4
55720: PUSH
55721: EMPTY
55722: LIST
55723: LIST
55724: PUSH
55725: LD_INT 5
55727: PUSH
55728: LD_INT 5
55730: PUSH
55731: EMPTY
55732: LIST
55733: LIST
55734: PUSH
55735: LD_INT 4
55737: PUSH
55738: LD_INT 5
55740: PUSH
55741: EMPTY
55742: LIST
55743: LIST
55744: PUSH
55745: LD_INT 6
55747: PUSH
55748: LD_INT 5
55750: PUSH
55751: EMPTY
55752: LIST
55753: LIST
55754: PUSH
55755: LD_INT 6
55757: PUSH
55758: LD_INT 6
55760: PUSH
55761: EMPTY
55762: LIST
55763: LIST
55764: PUSH
55765: LD_INT 5
55767: PUSH
55768: LD_INT 6
55770: PUSH
55771: EMPTY
55772: LIST
55773: LIST
55774: PUSH
55775: EMPTY
55776: LIST
55777: LIST
55778: LIST
55779: LIST
55780: LIST
55781: LIST
55782: LIST
55783: LIST
55784: LIST
55785: LIST
55786: LIST
55787: LIST
55788: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
55789: LD_ADDR_VAR 0 32
55793: PUSH
55794: LD_INT 1
55796: PUSH
55797: LD_INT 3
55799: PUSH
55800: EMPTY
55801: LIST
55802: LIST
55803: PUSH
55804: LD_INT 0
55806: PUSH
55807: LD_INT 3
55809: PUSH
55810: EMPTY
55811: LIST
55812: LIST
55813: PUSH
55814: LD_INT 1
55816: NEG
55817: PUSH
55818: LD_INT 2
55820: PUSH
55821: EMPTY
55822: LIST
55823: LIST
55824: PUSH
55825: LD_INT 1
55827: PUSH
55828: LD_INT 4
55830: PUSH
55831: EMPTY
55832: LIST
55833: LIST
55834: PUSH
55835: LD_INT 0
55837: PUSH
55838: LD_INT 4
55840: PUSH
55841: EMPTY
55842: LIST
55843: LIST
55844: PUSH
55845: LD_INT 1
55847: NEG
55848: PUSH
55849: LD_INT 3
55851: PUSH
55852: EMPTY
55853: LIST
55854: LIST
55855: PUSH
55856: LD_INT 1
55858: PUSH
55859: LD_INT 5
55861: PUSH
55862: EMPTY
55863: LIST
55864: LIST
55865: PUSH
55866: LD_INT 0
55868: PUSH
55869: LD_INT 5
55871: PUSH
55872: EMPTY
55873: LIST
55874: LIST
55875: PUSH
55876: LD_INT 1
55878: NEG
55879: PUSH
55880: LD_INT 4
55882: PUSH
55883: EMPTY
55884: LIST
55885: LIST
55886: PUSH
55887: LD_INT 1
55889: PUSH
55890: LD_INT 6
55892: PUSH
55893: EMPTY
55894: LIST
55895: LIST
55896: PUSH
55897: LD_INT 0
55899: PUSH
55900: LD_INT 6
55902: PUSH
55903: EMPTY
55904: LIST
55905: LIST
55906: PUSH
55907: LD_INT 1
55909: NEG
55910: PUSH
55911: LD_INT 5
55913: PUSH
55914: EMPTY
55915: LIST
55916: LIST
55917: PUSH
55918: EMPTY
55919: LIST
55920: LIST
55921: LIST
55922: LIST
55923: LIST
55924: LIST
55925: LIST
55926: LIST
55927: LIST
55928: LIST
55929: LIST
55930: LIST
55931: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
55932: LD_ADDR_VAR 0 33
55936: PUSH
55937: LD_INT 2
55939: NEG
55940: PUSH
55941: LD_INT 1
55943: PUSH
55944: EMPTY
55945: LIST
55946: LIST
55947: PUSH
55948: LD_INT 3
55950: NEG
55951: PUSH
55952: LD_INT 0
55954: PUSH
55955: EMPTY
55956: LIST
55957: LIST
55958: PUSH
55959: LD_INT 3
55961: NEG
55962: PUSH
55963: LD_INT 1
55965: NEG
55966: PUSH
55967: EMPTY
55968: LIST
55969: LIST
55970: PUSH
55971: LD_INT 3
55973: NEG
55974: PUSH
55975: LD_INT 1
55977: PUSH
55978: EMPTY
55979: LIST
55980: LIST
55981: PUSH
55982: LD_INT 4
55984: NEG
55985: PUSH
55986: LD_INT 0
55988: PUSH
55989: EMPTY
55990: LIST
55991: LIST
55992: PUSH
55993: LD_INT 4
55995: NEG
55996: PUSH
55997: LD_INT 1
55999: NEG
56000: PUSH
56001: EMPTY
56002: LIST
56003: LIST
56004: PUSH
56005: LD_INT 4
56007: NEG
56008: PUSH
56009: LD_INT 1
56011: PUSH
56012: EMPTY
56013: LIST
56014: LIST
56015: PUSH
56016: LD_INT 5
56018: NEG
56019: PUSH
56020: LD_INT 0
56022: PUSH
56023: EMPTY
56024: LIST
56025: LIST
56026: PUSH
56027: LD_INT 5
56029: NEG
56030: PUSH
56031: LD_INT 1
56033: NEG
56034: PUSH
56035: EMPTY
56036: LIST
56037: LIST
56038: PUSH
56039: LD_INT 5
56041: NEG
56042: PUSH
56043: LD_INT 1
56045: PUSH
56046: EMPTY
56047: LIST
56048: LIST
56049: PUSH
56050: LD_INT 6
56052: NEG
56053: PUSH
56054: LD_INT 0
56056: PUSH
56057: EMPTY
56058: LIST
56059: LIST
56060: PUSH
56061: LD_INT 6
56063: NEG
56064: PUSH
56065: LD_INT 1
56067: NEG
56068: PUSH
56069: EMPTY
56070: LIST
56071: LIST
56072: PUSH
56073: EMPTY
56074: LIST
56075: LIST
56076: LIST
56077: LIST
56078: LIST
56079: LIST
56080: LIST
56081: LIST
56082: LIST
56083: LIST
56084: LIST
56085: LIST
56086: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
56087: LD_ADDR_VAR 0 34
56091: PUSH
56092: LD_INT 2
56094: NEG
56095: PUSH
56096: LD_INT 3
56098: NEG
56099: PUSH
56100: EMPTY
56101: LIST
56102: LIST
56103: PUSH
56104: LD_INT 3
56106: NEG
56107: PUSH
56108: LD_INT 2
56110: NEG
56111: PUSH
56112: EMPTY
56113: LIST
56114: LIST
56115: PUSH
56116: LD_INT 3
56118: NEG
56119: PUSH
56120: LD_INT 3
56122: NEG
56123: PUSH
56124: EMPTY
56125: LIST
56126: LIST
56127: PUSH
56128: LD_INT 3
56130: NEG
56131: PUSH
56132: LD_INT 4
56134: NEG
56135: PUSH
56136: EMPTY
56137: LIST
56138: LIST
56139: PUSH
56140: LD_INT 4
56142: NEG
56143: PUSH
56144: LD_INT 3
56146: NEG
56147: PUSH
56148: EMPTY
56149: LIST
56150: LIST
56151: PUSH
56152: LD_INT 4
56154: NEG
56155: PUSH
56156: LD_INT 4
56158: NEG
56159: PUSH
56160: EMPTY
56161: LIST
56162: LIST
56163: PUSH
56164: LD_INT 4
56166: NEG
56167: PUSH
56168: LD_INT 5
56170: NEG
56171: PUSH
56172: EMPTY
56173: LIST
56174: LIST
56175: PUSH
56176: LD_INT 5
56178: NEG
56179: PUSH
56180: LD_INT 4
56182: NEG
56183: PUSH
56184: EMPTY
56185: LIST
56186: LIST
56187: PUSH
56188: LD_INT 5
56190: NEG
56191: PUSH
56192: LD_INT 5
56194: NEG
56195: PUSH
56196: EMPTY
56197: LIST
56198: LIST
56199: PUSH
56200: LD_INT 5
56202: NEG
56203: PUSH
56204: LD_INT 6
56206: NEG
56207: PUSH
56208: EMPTY
56209: LIST
56210: LIST
56211: PUSH
56212: LD_INT 6
56214: NEG
56215: PUSH
56216: LD_INT 5
56218: NEG
56219: PUSH
56220: EMPTY
56221: LIST
56222: LIST
56223: PUSH
56224: LD_INT 6
56226: NEG
56227: PUSH
56228: LD_INT 6
56230: NEG
56231: PUSH
56232: EMPTY
56233: LIST
56234: LIST
56235: PUSH
56236: EMPTY
56237: LIST
56238: LIST
56239: LIST
56240: LIST
56241: LIST
56242: LIST
56243: LIST
56244: LIST
56245: LIST
56246: LIST
56247: LIST
56248: LIST
56249: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
56250: LD_ADDR_VAR 0 41
56254: PUSH
56255: LD_INT 0
56257: PUSH
56258: LD_INT 2
56260: NEG
56261: PUSH
56262: EMPTY
56263: LIST
56264: LIST
56265: PUSH
56266: LD_INT 1
56268: NEG
56269: PUSH
56270: LD_INT 3
56272: NEG
56273: PUSH
56274: EMPTY
56275: LIST
56276: LIST
56277: PUSH
56278: LD_INT 1
56280: PUSH
56281: LD_INT 2
56283: NEG
56284: PUSH
56285: EMPTY
56286: LIST
56287: LIST
56288: PUSH
56289: EMPTY
56290: LIST
56291: LIST
56292: LIST
56293: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
56294: LD_ADDR_VAR 0 42
56298: PUSH
56299: LD_INT 2
56301: PUSH
56302: LD_INT 0
56304: PUSH
56305: EMPTY
56306: LIST
56307: LIST
56308: PUSH
56309: LD_INT 2
56311: PUSH
56312: LD_INT 1
56314: NEG
56315: PUSH
56316: EMPTY
56317: LIST
56318: LIST
56319: PUSH
56320: LD_INT 3
56322: PUSH
56323: LD_INT 1
56325: PUSH
56326: EMPTY
56327: LIST
56328: LIST
56329: PUSH
56330: EMPTY
56331: LIST
56332: LIST
56333: LIST
56334: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
56335: LD_ADDR_VAR 0 43
56339: PUSH
56340: LD_INT 2
56342: PUSH
56343: LD_INT 2
56345: PUSH
56346: EMPTY
56347: LIST
56348: LIST
56349: PUSH
56350: LD_INT 3
56352: PUSH
56353: LD_INT 2
56355: PUSH
56356: EMPTY
56357: LIST
56358: LIST
56359: PUSH
56360: LD_INT 2
56362: PUSH
56363: LD_INT 3
56365: PUSH
56366: EMPTY
56367: LIST
56368: LIST
56369: PUSH
56370: EMPTY
56371: LIST
56372: LIST
56373: LIST
56374: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
56375: LD_ADDR_VAR 0 44
56379: PUSH
56380: LD_INT 0
56382: PUSH
56383: LD_INT 2
56385: PUSH
56386: EMPTY
56387: LIST
56388: LIST
56389: PUSH
56390: LD_INT 1
56392: PUSH
56393: LD_INT 3
56395: PUSH
56396: EMPTY
56397: LIST
56398: LIST
56399: PUSH
56400: LD_INT 1
56402: NEG
56403: PUSH
56404: LD_INT 2
56406: PUSH
56407: EMPTY
56408: LIST
56409: LIST
56410: PUSH
56411: EMPTY
56412: LIST
56413: LIST
56414: LIST
56415: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56416: LD_ADDR_VAR 0 45
56420: PUSH
56421: LD_INT 2
56423: NEG
56424: PUSH
56425: LD_INT 0
56427: PUSH
56428: EMPTY
56429: LIST
56430: LIST
56431: PUSH
56432: LD_INT 2
56434: NEG
56435: PUSH
56436: LD_INT 1
56438: PUSH
56439: EMPTY
56440: LIST
56441: LIST
56442: PUSH
56443: LD_INT 3
56445: NEG
56446: PUSH
56447: LD_INT 1
56449: NEG
56450: PUSH
56451: EMPTY
56452: LIST
56453: LIST
56454: PUSH
56455: EMPTY
56456: LIST
56457: LIST
56458: LIST
56459: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
56460: LD_ADDR_VAR 0 46
56464: PUSH
56465: LD_INT 2
56467: NEG
56468: PUSH
56469: LD_INT 2
56471: NEG
56472: PUSH
56473: EMPTY
56474: LIST
56475: LIST
56476: PUSH
56477: LD_INT 2
56479: NEG
56480: PUSH
56481: LD_INT 3
56483: NEG
56484: PUSH
56485: EMPTY
56486: LIST
56487: LIST
56488: PUSH
56489: LD_INT 3
56491: NEG
56492: PUSH
56493: LD_INT 2
56495: NEG
56496: PUSH
56497: EMPTY
56498: LIST
56499: LIST
56500: PUSH
56501: EMPTY
56502: LIST
56503: LIST
56504: LIST
56505: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
56506: LD_ADDR_VAR 0 47
56510: PUSH
56511: LD_INT 2
56513: NEG
56514: PUSH
56515: LD_INT 3
56517: NEG
56518: PUSH
56519: EMPTY
56520: LIST
56521: LIST
56522: PUSH
56523: LD_INT 1
56525: NEG
56526: PUSH
56527: LD_INT 3
56529: NEG
56530: PUSH
56531: EMPTY
56532: LIST
56533: LIST
56534: PUSH
56535: EMPTY
56536: LIST
56537: LIST
56538: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
56539: LD_ADDR_VAR 0 48
56543: PUSH
56544: LD_INT 1
56546: PUSH
56547: LD_INT 2
56549: NEG
56550: PUSH
56551: EMPTY
56552: LIST
56553: LIST
56554: PUSH
56555: LD_INT 2
56557: PUSH
56558: LD_INT 1
56560: NEG
56561: PUSH
56562: EMPTY
56563: LIST
56564: LIST
56565: PUSH
56566: EMPTY
56567: LIST
56568: LIST
56569: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
56570: LD_ADDR_VAR 0 49
56574: PUSH
56575: LD_INT 3
56577: PUSH
56578: LD_INT 1
56580: PUSH
56581: EMPTY
56582: LIST
56583: LIST
56584: PUSH
56585: LD_INT 3
56587: PUSH
56588: LD_INT 2
56590: PUSH
56591: EMPTY
56592: LIST
56593: LIST
56594: PUSH
56595: EMPTY
56596: LIST
56597: LIST
56598: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
56599: LD_ADDR_VAR 0 50
56603: PUSH
56604: LD_INT 2
56606: PUSH
56607: LD_INT 3
56609: PUSH
56610: EMPTY
56611: LIST
56612: LIST
56613: PUSH
56614: LD_INT 1
56616: PUSH
56617: LD_INT 3
56619: PUSH
56620: EMPTY
56621: LIST
56622: LIST
56623: PUSH
56624: EMPTY
56625: LIST
56626: LIST
56627: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
56628: LD_ADDR_VAR 0 51
56632: PUSH
56633: LD_INT 1
56635: NEG
56636: PUSH
56637: LD_INT 2
56639: PUSH
56640: EMPTY
56641: LIST
56642: LIST
56643: PUSH
56644: LD_INT 2
56646: NEG
56647: PUSH
56648: LD_INT 1
56650: PUSH
56651: EMPTY
56652: LIST
56653: LIST
56654: PUSH
56655: EMPTY
56656: LIST
56657: LIST
56658: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56659: LD_ADDR_VAR 0 52
56663: PUSH
56664: LD_INT 3
56666: NEG
56667: PUSH
56668: LD_INT 1
56670: NEG
56671: PUSH
56672: EMPTY
56673: LIST
56674: LIST
56675: PUSH
56676: LD_INT 3
56678: NEG
56679: PUSH
56680: LD_INT 2
56682: NEG
56683: PUSH
56684: EMPTY
56685: LIST
56686: LIST
56687: PUSH
56688: EMPTY
56689: LIST
56690: LIST
56691: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56692: LD_ADDR_VAR 0 53
56696: PUSH
56697: LD_INT 1
56699: NEG
56700: PUSH
56701: LD_INT 3
56703: NEG
56704: PUSH
56705: EMPTY
56706: LIST
56707: LIST
56708: PUSH
56709: LD_INT 0
56711: PUSH
56712: LD_INT 3
56714: NEG
56715: PUSH
56716: EMPTY
56717: LIST
56718: LIST
56719: PUSH
56720: LD_INT 1
56722: PUSH
56723: LD_INT 2
56725: NEG
56726: PUSH
56727: EMPTY
56728: LIST
56729: LIST
56730: PUSH
56731: EMPTY
56732: LIST
56733: LIST
56734: LIST
56735: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56736: LD_ADDR_VAR 0 54
56740: PUSH
56741: LD_INT 2
56743: PUSH
56744: LD_INT 1
56746: NEG
56747: PUSH
56748: EMPTY
56749: LIST
56750: LIST
56751: PUSH
56752: LD_INT 3
56754: PUSH
56755: LD_INT 0
56757: PUSH
56758: EMPTY
56759: LIST
56760: LIST
56761: PUSH
56762: LD_INT 3
56764: PUSH
56765: LD_INT 1
56767: PUSH
56768: EMPTY
56769: LIST
56770: LIST
56771: PUSH
56772: EMPTY
56773: LIST
56774: LIST
56775: LIST
56776: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56777: LD_ADDR_VAR 0 55
56781: PUSH
56782: LD_INT 3
56784: PUSH
56785: LD_INT 2
56787: PUSH
56788: EMPTY
56789: LIST
56790: LIST
56791: PUSH
56792: LD_INT 3
56794: PUSH
56795: LD_INT 3
56797: PUSH
56798: EMPTY
56799: LIST
56800: LIST
56801: PUSH
56802: LD_INT 2
56804: PUSH
56805: LD_INT 3
56807: PUSH
56808: EMPTY
56809: LIST
56810: LIST
56811: PUSH
56812: EMPTY
56813: LIST
56814: LIST
56815: LIST
56816: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56817: LD_ADDR_VAR 0 56
56821: PUSH
56822: LD_INT 1
56824: PUSH
56825: LD_INT 3
56827: PUSH
56828: EMPTY
56829: LIST
56830: LIST
56831: PUSH
56832: LD_INT 0
56834: PUSH
56835: LD_INT 3
56837: PUSH
56838: EMPTY
56839: LIST
56840: LIST
56841: PUSH
56842: LD_INT 1
56844: NEG
56845: PUSH
56846: LD_INT 2
56848: PUSH
56849: EMPTY
56850: LIST
56851: LIST
56852: PUSH
56853: EMPTY
56854: LIST
56855: LIST
56856: LIST
56857: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56858: LD_ADDR_VAR 0 57
56862: PUSH
56863: LD_INT 2
56865: NEG
56866: PUSH
56867: LD_INT 1
56869: PUSH
56870: EMPTY
56871: LIST
56872: LIST
56873: PUSH
56874: LD_INT 3
56876: NEG
56877: PUSH
56878: LD_INT 0
56880: PUSH
56881: EMPTY
56882: LIST
56883: LIST
56884: PUSH
56885: LD_INT 3
56887: NEG
56888: PUSH
56889: LD_INT 1
56891: NEG
56892: PUSH
56893: EMPTY
56894: LIST
56895: LIST
56896: PUSH
56897: EMPTY
56898: LIST
56899: LIST
56900: LIST
56901: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56902: LD_ADDR_VAR 0 58
56906: PUSH
56907: LD_INT 2
56909: NEG
56910: PUSH
56911: LD_INT 3
56913: NEG
56914: PUSH
56915: EMPTY
56916: LIST
56917: LIST
56918: PUSH
56919: LD_INT 3
56921: NEG
56922: PUSH
56923: LD_INT 2
56925: NEG
56926: PUSH
56927: EMPTY
56928: LIST
56929: LIST
56930: PUSH
56931: LD_INT 3
56933: NEG
56934: PUSH
56935: LD_INT 3
56937: NEG
56938: PUSH
56939: EMPTY
56940: LIST
56941: LIST
56942: PUSH
56943: EMPTY
56944: LIST
56945: LIST
56946: LIST
56947: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
56948: LD_ADDR_VAR 0 59
56952: PUSH
56953: LD_INT 1
56955: NEG
56956: PUSH
56957: LD_INT 2
56959: NEG
56960: PUSH
56961: EMPTY
56962: LIST
56963: LIST
56964: PUSH
56965: LD_INT 0
56967: PUSH
56968: LD_INT 2
56970: NEG
56971: PUSH
56972: EMPTY
56973: LIST
56974: LIST
56975: PUSH
56976: LD_INT 1
56978: PUSH
56979: LD_INT 1
56981: NEG
56982: PUSH
56983: EMPTY
56984: LIST
56985: LIST
56986: PUSH
56987: EMPTY
56988: LIST
56989: LIST
56990: LIST
56991: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
56992: LD_ADDR_VAR 0 60
56996: PUSH
56997: LD_INT 1
56999: PUSH
57000: LD_INT 1
57002: NEG
57003: PUSH
57004: EMPTY
57005: LIST
57006: LIST
57007: PUSH
57008: LD_INT 2
57010: PUSH
57011: LD_INT 0
57013: PUSH
57014: EMPTY
57015: LIST
57016: LIST
57017: PUSH
57018: LD_INT 2
57020: PUSH
57021: LD_INT 1
57023: PUSH
57024: EMPTY
57025: LIST
57026: LIST
57027: PUSH
57028: EMPTY
57029: LIST
57030: LIST
57031: LIST
57032: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
57033: LD_ADDR_VAR 0 61
57037: PUSH
57038: LD_INT 2
57040: PUSH
57041: LD_INT 1
57043: PUSH
57044: EMPTY
57045: LIST
57046: LIST
57047: PUSH
57048: LD_INT 2
57050: PUSH
57051: LD_INT 2
57053: PUSH
57054: EMPTY
57055: LIST
57056: LIST
57057: PUSH
57058: LD_INT 1
57060: PUSH
57061: LD_INT 2
57063: PUSH
57064: EMPTY
57065: LIST
57066: LIST
57067: PUSH
57068: EMPTY
57069: LIST
57070: LIST
57071: LIST
57072: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
57073: LD_ADDR_VAR 0 62
57077: PUSH
57078: LD_INT 1
57080: PUSH
57081: LD_INT 2
57083: PUSH
57084: EMPTY
57085: LIST
57086: LIST
57087: PUSH
57088: LD_INT 0
57090: PUSH
57091: LD_INT 2
57093: PUSH
57094: EMPTY
57095: LIST
57096: LIST
57097: PUSH
57098: LD_INT 1
57100: NEG
57101: PUSH
57102: LD_INT 1
57104: PUSH
57105: EMPTY
57106: LIST
57107: LIST
57108: PUSH
57109: EMPTY
57110: LIST
57111: LIST
57112: LIST
57113: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
57114: LD_ADDR_VAR 0 63
57118: PUSH
57119: LD_INT 1
57121: NEG
57122: PUSH
57123: LD_INT 1
57125: PUSH
57126: EMPTY
57127: LIST
57128: LIST
57129: PUSH
57130: LD_INT 2
57132: NEG
57133: PUSH
57134: LD_INT 0
57136: PUSH
57137: EMPTY
57138: LIST
57139: LIST
57140: PUSH
57141: LD_INT 2
57143: NEG
57144: PUSH
57145: LD_INT 1
57147: NEG
57148: PUSH
57149: EMPTY
57150: LIST
57151: LIST
57152: PUSH
57153: EMPTY
57154: LIST
57155: LIST
57156: LIST
57157: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57158: LD_ADDR_VAR 0 64
57162: PUSH
57163: LD_INT 1
57165: NEG
57166: PUSH
57167: LD_INT 2
57169: NEG
57170: PUSH
57171: EMPTY
57172: LIST
57173: LIST
57174: PUSH
57175: LD_INT 2
57177: NEG
57178: PUSH
57179: LD_INT 1
57181: NEG
57182: PUSH
57183: EMPTY
57184: LIST
57185: LIST
57186: PUSH
57187: LD_INT 2
57189: NEG
57190: PUSH
57191: LD_INT 2
57193: NEG
57194: PUSH
57195: EMPTY
57196: LIST
57197: LIST
57198: PUSH
57199: EMPTY
57200: LIST
57201: LIST
57202: LIST
57203: ST_TO_ADDR
// end ; 2 :
57204: GO 60470
57206: LD_INT 2
57208: DOUBLE
57209: EQUAL
57210: IFTRUE 57214
57212: GO 60469
57214: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
57215: LD_ADDR_VAR 0 29
57219: PUSH
57220: LD_INT 4
57222: PUSH
57223: LD_INT 0
57225: PUSH
57226: EMPTY
57227: LIST
57228: LIST
57229: PUSH
57230: LD_INT 4
57232: PUSH
57233: LD_INT 1
57235: NEG
57236: PUSH
57237: EMPTY
57238: LIST
57239: LIST
57240: PUSH
57241: LD_INT 5
57243: PUSH
57244: LD_INT 0
57246: PUSH
57247: EMPTY
57248: LIST
57249: LIST
57250: PUSH
57251: LD_INT 5
57253: PUSH
57254: LD_INT 1
57256: PUSH
57257: EMPTY
57258: LIST
57259: LIST
57260: PUSH
57261: LD_INT 4
57263: PUSH
57264: LD_INT 1
57266: PUSH
57267: EMPTY
57268: LIST
57269: LIST
57270: PUSH
57271: LD_INT 3
57273: PUSH
57274: LD_INT 0
57276: PUSH
57277: EMPTY
57278: LIST
57279: LIST
57280: PUSH
57281: LD_INT 3
57283: PUSH
57284: LD_INT 1
57286: NEG
57287: PUSH
57288: EMPTY
57289: LIST
57290: LIST
57291: PUSH
57292: LD_INT 3
57294: PUSH
57295: LD_INT 2
57297: NEG
57298: PUSH
57299: EMPTY
57300: LIST
57301: LIST
57302: PUSH
57303: LD_INT 5
57305: PUSH
57306: LD_INT 2
57308: PUSH
57309: EMPTY
57310: LIST
57311: LIST
57312: PUSH
57313: LD_INT 3
57315: PUSH
57316: LD_INT 3
57318: PUSH
57319: EMPTY
57320: LIST
57321: LIST
57322: PUSH
57323: LD_INT 3
57325: PUSH
57326: LD_INT 2
57328: PUSH
57329: EMPTY
57330: LIST
57331: LIST
57332: PUSH
57333: LD_INT 4
57335: PUSH
57336: LD_INT 3
57338: PUSH
57339: EMPTY
57340: LIST
57341: LIST
57342: PUSH
57343: LD_INT 4
57345: PUSH
57346: LD_INT 4
57348: PUSH
57349: EMPTY
57350: LIST
57351: LIST
57352: PUSH
57353: LD_INT 3
57355: PUSH
57356: LD_INT 4
57358: PUSH
57359: EMPTY
57360: LIST
57361: LIST
57362: PUSH
57363: LD_INT 2
57365: PUSH
57366: LD_INT 3
57368: PUSH
57369: EMPTY
57370: LIST
57371: LIST
57372: PUSH
57373: LD_INT 2
57375: PUSH
57376: LD_INT 2
57378: PUSH
57379: EMPTY
57380: LIST
57381: LIST
57382: PUSH
57383: LD_INT 4
57385: PUSH
57386: LD_INT 2
57388: PUSH
57389: EMPTY
57390: LIST
57391: LIST
57392: PUSH
57393: LD_INT 2
57395: PUSH
57396: LD_INT 4
57398: PUSH
57399: EMPTY
57400: LIST
57401: LIST
57402: PUSH
57403: LD_INT 0
57405: PUSH
57406: LD_INT 4
57408: PUSH
57409: EMPTY
57410: LIST
57411: LIST
57412: PUSH
57413: LD_INT 0
57415: PUSH
57416: LD_INT 3
57418: PUSH
57419: EMPTY
57420: LIST
57421: LIST
57422: PUSH
57423: LD_INT 1
57425: PUSH
57426: LD_INT 4
57428: PUSH
57429: EMPTY
57430: LIST
57431: LIST
57432: PUSH
57433: LD_INT 1
57435: PUSH
57436: LD_INT 5
57438: PUSH
57439: EMPTY
57440: LIST
57441: LIST
57442: PUSH
57443: LD_INT 0
57445: PUSH
57446: LD_INT 5
57448: PUSH
57449: EMPTY
57450: LIST
57451: LIST
57452: PUSH
57453: LD_INT 1
57455: NEG
57456: PUSH
57457: LD_INT 4
57459: PUSH
57460: EMPTY
57461: LIST
57462: LIST
57463: PUSH
57464: LD_INT 1
57466: NEG
57467: PUSH
57468: LD_INT 3
57470: PUSH
57471: EMPTY
57472: LIST
57473: LIST
57474: PUSH
57475: LD_INT 2
57477: PUSH
57478: LD_INT 5
57480: PUSH
57481: EMPTY
57482: LIST
57483: LIST
57484: PUSH
57485: LD_INT 2
57487: NEG
57488: PUSH
57489: LD_INT 3
57491: PUSH
57492: EMPTY
57493: LIST
57494: LIST
57495: PUSH
57496: LD_INT 3
57498: NEG
57499: PUSH
57500: LD_INT 0
57502: PUSH
57503: EMPTY
57504: LIST
57505: LIST
57506: PUSH
57507: LD_INT 3
57509: NEG
57510: PUSH
57511: LD_INT 1
57513: NEG
57514: PUSH
57515: EMPTY
57516: LIST
57517: LIST
57518: PUSH
57519: LD_INT 2
57521: NEG
57522: PUSH
57523: LD_INT 0
57525: PUSH
57526: EMPTY
57527: LIST
57528: LIST
57529: PUSH
57530: LD_INT 2
57532: NEG
57533: PUSH
57534: LD_INT 1
57536: PUSH
57537: EMPTY
57538: LIST
57539: LIST
57540: PUSH
57541: LD_INT 3
57543: NEG
57544: PUSH
57545: LD_INT 1
57547: PUSH
57548: EMPTY
57549: LIST
57550: LIST
57551: PUSH
57552: LD_INT 4
57554: NEG
57555: PUSH
57556: LD_INT 0
57558: PUSH
57559: EMPTY
57560: LIST
57561: LIST
57562: PUSH
57563: LD_INT 4
57565: NEG
57566: PUSH
57567: LD_INT 1
57569: NEG
57570: PUSH
57571: EMPTY
57572: LIST
57573: LIST
57574: PUSH
57575: LD_INT 4
57577: NEG
57578: PUSH
57579: LD_INT 2
57581: NEG
57582: PUSH
57583: EMPTY
57584: LIST
57585: LIST
57586: PUSH
57587: LD_INT 2
57589: NEG
57590: PUSH
57591: LD_INT 2
57593: PUSH
57594: EMPTY
57595: LIST
57596: LIST
57597: PUSH
57598: LD_INT 4
57600: NEG
57601: PUSH
57602: LD_INT 4
57604: NEG
57605: PUSH
57606: EMPTY
57607: LIST
57608: LIST
57609: PUSH
57610: LD_INT 4
57612: NEG
57613: PUSH
57614: LD_INT 5
57616: NEG
57617: PUSH
57618: EMPTY
57619: LIST
57620: LIST
57621: PUSH
57622: LD_INT 3
57624: NEG
57625: PUSH
57626: LD_INT 4
57628: NEG
57629: PUSH
57630: EMPTY
57631: LIST
57632: LIST
57633: PUSH
57634: LD_INT 3
57636: NEG
57637: PUSH
57638: LD_INT 3
57640: NEG
57641: PUSH
57642: EMPTY
57643: LIST
57644: LIST
57645: PUSH
57646: LD_INT 4
57648: NEG
57649: PUSH
57650: LD_INT 3
57652: NEG
57653: PUSH
57654: EMPTY
57655: LIST
57656: LIST
57657: PUSH
57658: LD_INT 5
57660: NEG
57661: PUSH
57662: LD_INT 4
57664: NEG
57665: PUSH
57666: EMPTY
57667: LIST
57668: LIST
57669: PUSH
57670: LD_INT 5
57672: NEG
57673: PUSH
57674: LD_INT 5
57676: NEG
57677: PUSH
57678: EMPTY
57679: LIST
57680: LIST
57681: PUSH
57682: LD_INT 3
57684: NEG
57685: PUSH
57686: LD_INT 5
57688: NEG
57689: PUSH
57690: EMPTY
57691: LIST
57692: LIST
57693: PUSH
57694: LD_INT 5
57696: NEG
57697: PUSH
57698: LD_INT 3
57700: NEG
57701: PUSH
57702: EMPTY
57703: LIST
57704: LIST
57705: PUSH
57706: EMPTY
57707: LIST
57708: LIST
57709: LIST
57710: LIST
57711: LIST
57712: LIST
57713: LIST
57714: LIST
57715: LIST
57716: LIST
57717: LIST
57718: LIST
57719: LIST
57720: LIST
57721: LIST
57722: LIST
57723: LIST
57724: LIST
57725: LIST
57726: LIST
57727: LIST
57728: LIST
57729: LIST
57730: LIST
57731: LIST
57732: LIST
57733: LIST
57734: LIST
57735: LIST
57736: LIST
57737: LIST
57738: LIST
57739: LIST
57740: LIST
57741: LIST
57742: LIST
57743: LIST
57744: LIST
57745: LIST
57746: LIST
57747: LIST
57748: LIST
57749: LIST
57750: LIST
57751: LIST
57752: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
57753: LD_ADDR_VAR 0 30
57757: PUSH
57758: LD_INT 4
57760: PUSH
57761: LD_INT 4
57763: PUSH
57764: EMPTY
57765: LIST
57766: LIST
57767: PUSH
57768: LD_INT 4
57770: PUSH
57771: LD_INT 3
57773: PUSH
57774: EMPTY
57775: LIST
57776: LIST
57777: PUSH
57778: LD_INT 5
57780: PUSH
57781: LD_INT 4
57783: PUSH
57784: EMPTY
57785: LIST
57786: LIST
57787: PUSH
57788: LD_INT 5
57790: PUSH
57791: LD_INT 5
57793: PUSH
57794: EMPTY
57795: LIST
57796: LIST
57797: PUSH
57798: LD_INT 4
57800: PUSH
57801: LD_INT 5
57803: PUSH
57804: EMPTY
57805: LIST
57806: LIST
57807: PUSH
57808: LD_INT 3
57810: PUSH
57811: LD_INT 4
57813: PUSH
57814: EMPTY
57815: LIST
57816: LIST
57817: PUSH
57818: LD_INT 3
57820: PUSH
57821: LD_INT 3
57823: PUSH
57824: EMPTY
57825: LIST
57826: LIST
57827: PUSH
57828: LD_INT 5
57830: PUSH
57831: LD_INT 3
57833: PUSH
57834: EMPTY
57835: LIST
57836: LIST
57837: PUSH
57838: LD_INT 3
57840: PUSH
57841: LD_INT 5
57843: PUSH
57844: EMPTY
57845: LIST
57846: LIST
57847: PUSH
57848: LD_INT 0
57850: PUSH
57851: LD_INT 3
57853: PUSH
57854: EMPTY
57855: LIST
57856: LIST
57857: PUSH
57858: LD_INT 0
57860: PUSH
57861: LD_INT 2
57863: PUSH
57864: EMPTY
57865: LIST
57866: LIST
57867: PUSH
57868: LD_INT 1
57870: PUSH
57871: LD_INT 3
57873: PUSH
57874: EMPTY
57875: LIST
57876: LIST
57877: PUSH
57878: LD_INT 1
57880: PUSH
57881: LD_INT 4
57883: PUSH
57884: EMPTY
57885: LIST
57886: LIST
57887: PUSH
57888: LD_INT 0
57890: PUSH
57891: LD_INT 4
57893: PUSH
57894: EMPTY
57895: LIST
57896: LIST
57897: PUSH
57898: LD_INT 1
57900: NEG
57901: PUSH
57902: LD_INT 3
57904: PUSH
57905: EMPTY
57906: LIST
57907: LIST
57908: PUSH
57909: LD_INT 1
57911: NEG
57912: PUSH
57913: LD_INT 2
57915: PUSH
57916: EMPTY
57917: LIST
57918: LIST
57919: PUSH
57920: LD_INT 2
57922: PUSH
57923: LD_INT 4
57925: PUSH
57926: EMPTY
57927: LIST
57928: LIST
57929: PUSH
57930: LD_INT 2
57932: NEG
57933: PUSH
57934: LD_INT 2
57936: PUSH
57937: EMPTY
57938: LIST
57939: LIST
57940: PUSH
57941: LD_INT 4
57943: NEG
57944: PUSH
57945: LD_INT 0
57947: PUSH
57948: EMPTY
57949: LIST
57950: LIST
57951: PUSH
57952: LD_INT 4
57954: NEG
57955: PUSH
57956: LD_INT 1
57958: NEG
57959: PUSH
57960: EMPTY
57961: LIST
57962: LIST
57963: PUSH
57964: LD_INT 3
57966: NEG
57967: PUSH
57968: LD_INT 0
57970: PUSH
57971: EMPTY
57972: LIST
57973: LIST
57974: PUSH
57975: LD_INT 3
57977: NEG
57978: PUSH
57979: LD_INT 1
57981: PUSH
57982: EMPTY
57983: LIST
57984: LIST
57985: PUSH
57986: LD_INT 4
57988: NEG
57989: PUSH
57990: LD_INT 1
57992: PUSH
57993: EMPTY
57994: LIST
57995: LIST
57996: PUSH
57997: LD_INT 5
57999: NEG
58000: PUSH
58001: LD_INT 0
58003: PUSH
58004: EMPTY
58005: LIST
58006: LIST
58007: PUSH
58008: LD_INT 5
58010: NEG
58011: PUSH
58012: LD_INT 1
58014: NEG
58015: PUSH
58016: EMPTY
58017: LIST
58018: LIST
58019: PUSH
58020: LD_INT 5
58022: NEG
58023: PUSH
58024: LD_INT 2
58026: NEG
58027: PUSH
58028: EMPTY
58029: LIST
58030: LIST
58031: PUSH
58032: LD_INT 3
58034: NEG
58035: PUSH
58036: LD_INT 2
58038: PUSH
58039: EMPTY
58040: LIST
58041: LIST
58042: PUSH
58043: LD_INT 3
58045: NEG
58046: PUSH
58047: LD_INT 3
58049: NEG
58050: PUSH
58051: EMPTY
58052: LIST
58053: LIST
58054: PUSH
58055: LD_INT 3
58057: NEG
58058: PUSH
58059: LD_INT 4
58061: NEG
58062: PUSH
58063: EMPTY
58064: LIST
58065: LIST
58066: PUSH
58067: LD_INT 2
58069: NEG
58070: PUSH
58071: LD_INT 3
58073: NEG
58074: PUSH
58075: EMPTY
58076: LIST
58077: LIST
58078: PUSH
58079: LD_INT 2
58081: NEG
58082: PUSH
58083: LD_INT 2
58085: NEG
58086: PUSH
58087: EMPTY
58088: LIST
58089: LIST
58090: PUSH
58091: LD_INT 3
58093: NEG
58094: PUSH
58095: LD_INT 2
58097: NEG
58098: PUSH
58099: EMPTY
58100: LIST
58101: LIST
58102: PUSH
58103: LD_INT 4
58105: NEG
58106: PUSH
58107: LD_INT 3
58109: NEG
58110: PUSH
58111: EMPTY
58112: LIST
58113: LIST
58114: PUSH
58115: LD_INT 4
58117: NEG
58118: PUSH
58119: LD_INT 4
58121: NEG
58122: PUSH
58123: EMPTY
58124: LIST
58125: LIST
58126: PUSH
58127: LD_INT 2
58129: NEG
58130: PUSH
58131: LD_INT 4
58133: NEG
58134: PUSH
58135: EMPTY
58136: LIST
58137: LIST
58138: PUSH
58139: LD_INT 4
58141: NEG
58142: PUSH
58143: LD_INT 2
58145: NEG
58146: PUSH
58147: EMPTY
58148: LIST
58149: LIST
58150: PUSH
58151: LD_INT 0
58153: PUSH
58154: LD_INT 4
58156: NEG
58157: PUSH
58158: EMPTY
58159: LIST
58160: LIST
58161: PUSH
58162: LD_INT 0
58164: PUSH
58165: LD_INT 5
58167: NEG
58168: PUSH
58169: EMPTY
58170: LIST
58171: LIST
58172: PUSH
58173: LD_INT 1
58175: PUSH
58176: LD_INT 4
58178: NEG
58179: PUSH
58180: EMPTY
58181: LIST
58182: LIST
58183: PUSH
58184: LD_INT 1
58186: PUSH
58187: LD_INT 3
58189: NEG
58190: PUSH
58191: EMPTY
58192: LIST
58193: LIST
58194: PUSH
58195: LD_INT 0
58197: PUSH
58198: LD_INT 3
58200: NEG
58201: PUSH
58202: EMPTY
58203: LIST
58204: LIST
58205: PUSH
58206: LD_INT 1
58208: NEG
58209: PUSH
58210: LD_INT 4
58212: NEG
58213: PUSH
58214: EMPTY
58215: LIST
58216: LIST
58217: PUSH
58218: LD_INT 1
58220: NEG
58221: PUSH
58222: LD_INT 5
58224: NEG
58225: PUSH
58226: EMPTY
58227: LIST
58228: LIST
58229: PUSH
58230: LD_INT 2
58232: PUSH
58233: LD_INT 3
58235: NEG
58236: PUSH
58237: EMPTY
58238: LIST
58239: LIST
58240: PUSH
58241: LD_INT 2
58243: NEG
58244: PUSH
58245: LD_INT 5
58247: NEG
58248: PUSH
58249: EMPTY
58250: LIST
58251: LIST
58252: PUSH
58253: EMPTY
58254: LIST
58255: LIST
58256: LIST
58257: LIST
58258: LIST
58259: LIST
58260: LIST
58261: LIST
58262: LIST
58263: LIST
58264: LIST
58265: LIST
58266: LIST
58267: LIST
58268: LIST
58269: LIST
58270: LIST
58271: LIST
58272: LIST
58273: LIST
58274: LIST
58275: LIST
58276: LIST
58277: LIST
58278: LIST
58279: LIST
58280: LIST
58281: LIST
58282: LIST
58283: LIST
58284: LIST
58285: LIST
58286: LIST
58287: LIST
58288: LIST
58289: LIST
58290: LIST
58291: LIST
58292: LIST
58293: LIST
58294: LIST
58295: LIST
58296: LIST
58297: LIST
58298: LIST
58299: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
58300: LD_ADDR_VAR 0 31
58304: PUSH
58305: LD_INT 0
58307: PUSH
58308: LD_INT 4
58310: PUSH
58311: EMPTY
58312: LIST
58313: LIST
58314: PUSH
58315: LD_INT 0
58317: PUSH
58318: LD_INT 3
58320: PUSH
58321: EMPTY
58322: LIST
58323: LIST
58324: PUSH
58325: LD_INT 1
58327: PUSH
58328: LD_INT 4
58330: PUSH
58331: EMPTY
58332: LIST
58333: LIST
58334: PUSH
58335: LD_INT 1
58337: PUSH
58338: LD_INT 5
58340: PUSH
58341: EMPTY
58342: LIST
58343: LIST
58344: PUSH
58345: LD_INT 0
58347: PUSH
58348: LD_INT 5
58350: PUSH
58351: EMPTY
58352: LIST
58353: LIST
58354: PUSH
58355: LD_INT 1
58357: NEG
58358: PUSH
58359: LD_INT 4
58361: PUSH
58362: EMPTY
58363: LIST
58364: LIST
58365: PUSH
58366: LD_INT 1
58368: NEG
58369: PUSH
58370: LD_INT 3
58372: PUSH
58373: EMPTY
58374: LIST
58375: LIST
58376: PUSH
58377: LD_INT 2
58379: PUSH
58380: LD_INT 5
58382: PUSH
58383: EMPTY
58384: LIST
58385: LIST
58386: PUSH
58387: LD_INT 2
58389: NEG
58390: PUSH
58391: LD_INT 3
58393: PUSH
58394: EMPTY
58395: LIST
58396: LIST
58397: PUSH
58398: LD_INT 3
58400: NEG
58401: PUSH
58402: LD_INT 0
58404: PUSH
58405: EMPTY
58406: LIST
58407: LIST
58408: PUSH
58409: LD_INT 3
58411: NEG
58412: PUSH
58413: LD_INT 1
58415: NEG
58416: PUSH
58417: EMPTY
58418: LIST
58419: LIST
58420: PUSH
58421: LD_INT 2
58423: NEG
58424: PUSH
58425: LD_INT 0
58427: PUSH
58428: EMPTY
58429: LIST
58430: LIST
58431: PUSH
58432: LD_INT 2
58434: NEG
58435: PUSH
58436: LD_INT 1
58438: PUSH
58439: EMPTY
58440: LIST
58441: LIST
58442: PUSH
58443: LD_INT 3
58445: NEG
58446: PUSH
58447: LD_INT 1
58449: PUSH
58450: EMPTY
58451: LIST
58452: LIST
58453: PUSH
58454: LD_INT 4
58456: NEG
58457: PUSH
58458: LD_INT 0
58460: PUSH
58461: EMPTY
58462: LIST
58463: LIST
58464: PUSH
58465: LD_INT 4
58467: NEG
58468: PUSH
58469: LD_INT 1
58471: NEG
58472: PUSH
58473: EMPTY
58474: LIST
58475: LIST
58476: PUSH
58477: LD_INT 4
58479: NEG
58480: PUSH
58481: LD_INT 2
58483: NEG
58484: PUSH
58485: EMPTY
58486: LIST
58487: LIST
58488: PUSH
58489: LD_INT 2
58491: NEG
58492: PUSH
58493: LD_INT 2
58495: PUSH
58496: EMPTY
58497: LIST
58498: LIST
58499: PUSH
58500: LD_INT 4
58502: NEG
58503: PUSH
58504: LD_INT 4
58506: NEG
58507: PUSH
58508: EMPTY
58509: LIST
58510: LIST
58511: PUSH
58512: LD_INT 4
58514: NEG
58515: PUSH
58516: LD_INT 5
58518: NEG
58519: PUSH
58520: EMPTY
58521: LIST
58522: LIST
58523: PUSH
58524: LD_INT 3
58526: NEG
58527: PUSH
58528: LD_INT 4
58530: NEG
58531: PUSH
58532: EMPTY
58533: LIST
58534: LIST
58535: PUSH
58536: LD_INT 3
58538: NEG
58539: PUSH
58540: LD_INT 3
58542: NEG
58543: PUSH
58544: EMPTY
58545: LIST
58546: LIST
58547: PUSH
58548: LD_INT 4
58550: NEG
58551: PUSH
58552: LD_INT 3
58554: NEG
58555: PUSH
58556: EMPTY
58557: LIST
58558: LIST
58559: PUSH
58560: LD_INT 5
58562: NEG
58563: PUSH
58564: LD_INT 4
58566: NEG
58567: PUSH
58568: EMPTY
58569: LIST
58570: LIST
58571: PUSH
58572: LD_INT 5
58574: NEG
58575: PUSH
58576: LD_INT 5
58578: NEG
58579: PUSH
58580: EMPTY
58581: LIST
58582: LIST
58583: PUSH
58584: LD_INT 3
58586: NEG
58587: PUSH
58588: LD_INT 5
58590: NEG
58591: PUSH
58592: EMPTY
58593: LIST
58594: LIST
58595: PUSH
58596: LD_INT 5
58598: NEG
58599: PUSH
58600: LD_INT 3
58602: NEG
58603: PUSH
58604: EMPTY
58605: LIST
58606: LIST
58607: PUSH
58608: LD_INT 0
58610: PUSH
58611: LD_INT 3
58613: NEG
58614: PUSH
58615: EMPTY
58616: LIST
58617: LIST
58618: PUSH
58619: LD_INT 0
58621: PUSH
58622: LD_INT 4
58624: NEG
58625: PUSH
58626: EMPTY
58627: LIST
58628: LIST
58629: PUSH
58630: LD_INT 1
58632: PUSH
58633: LD_INT 3
58635: NEG
58636: PUSH
58637: EMPTY
58638: LIST
58639: LIST
58640: PUSH
58641: LD_INT 1
58643: PUSH
58644: LD_INT 2
58646: NEG
58647: PUSH
58648: EMPTY
58649: LIST
58650: LIST
58651: PUSH
58652: LD_INT 0
58654: PUSH
58655: LD_INT 2
58657: NEG
58658: PUSH
58659: EMPTY
58660: LIST
58661: LIST
58662: PUSH
58663: LD_INT 1
58665: NEG
58666: PUSH
58667: LD_INT 3
58669: NEG
58670: PUSH
58671: EMPTY
58672: LIST
58673: LIST
58674: PUSH
58675: LD_INT 1
58677: NEG
58678: PUSH
58679: LD_INT 4
58681: NEG
58682: PUSH
58683: EMPTY
58684: LIST
58685: LIST
58686: PUSH
58687: LD_INT 2
58689: PUSH
58690: LD_INT 2
58692: NEG
58693: PUSH
58694: EMPTY
58695: LIST
58696: LIST
58697: PUSH
58698: LD_INT 2
58700: NEG
58701: PUSH
58702: LD_INT 4
58704: NEG
58705: PUSH
58706: EMPTY
58707: LIST
58708: LIST
58709: PUSH
58710: LD_INT 4
58712: PUSH
58713: LD_INT 0
58715: PUSH
58716: EMPTY
58717: LIST
58718: LIST
58719: PUSH
58720: LD_INT 4
58722: PUSH
58723: LD_INT 1
58725: NEG
58726: PUSH
58727: EMPTY
58728: LIST
58729: LIST
58730: PUSH
58731: LD_INT 5
58733: PUSH
58734: LD_INT 0
58736: PUSH
58737: EMPTY
58738: LIST
58739: LIST
58740: PUSH
58741: LD_INT 5
58743: PUSH
58744: LD_INT 1
58746: PUSH
58747: EMPTY
58748: LIST
58749: LIST
58750: PUSH
58751: LD_INT 4
58753: PUSH
58754: LD_INT 1
58756: PUSH
58757: EMPTY
58758: LIST
58759: LIST
58760: PUSH
58761: LD_INT 3
58763: PUSH
58764: LD_INT 0
58766: PUSH
58767: EMPTY
58768: LIST
58769: LIST
58770: PUSH
58771: LD_INT 3
58773: PUSH
58774: LD_INT 1
58776: NEG
58777: PUSH
58778: EMPTY
58779: LIST
58780: LIST
58781: PUSH
58782: LD_INT 3
58784: PUSH
58785: LD_INT 2
58787: NEG
58788: PUSH
58789: EMPTY
58790: LIST
58791: LIST
58792: PUSH
58793: LD_INT 5
58795: PUSH
58796: LD_INT 2
58798: PUSH
58799: EMPTY
58800: LIST
58801: LIST
58802: PUSH
58803: EMPTY
58804: LIST
58805: LIST
58806: LIST
58807: LIST
58808: LIST
58809: LIST
58810: LIST
58811: LIST
58812: LIST
58813: LIST
58814: LIST
58815: LIST
58816: LIST
58817: LIST
58818: LIST
58819: LIST
58820: LIST
58821: LIST
58822: LIST
58823: LIST
58824: LIST
58825: LIST
58826: LIST
58827: LIST
58828: LIST
58829: LIST
58830: LIST
58831: LIST
58832: LIST
58833: LIST
58834: LIST
58835: LIST
58836: LIST
58837: LIST
58838: LIST
58839: LIST
58840: LIST
58841: LIST
58842: LIST
58843: LIST
58844: LIST
58845: LIST
58846: LIST
58847: LIST
58848: LIST
58849: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
58850: LD_ADDR_VAR 0 32
58854: PUSH
58855: LD_INT 4
58857: NEG
58858: PUSH
58859: LD_INT 0
58861: PUSH
58862: EMPTY
58863: LIST
58864: LIST
58865: PUSH
58866: LD_INT 4
58868: NEG
58869: PUSH
58870: LD_INT 1
58872: NEG
58873: PUSH
58874: EMPTY
58875: LIST
58876: LIST
58877: PUSH
58878: LD_INT 3
58880: NEG
58881: PUSH
58882: LD_INT 0
58884: PUSH
58885: EMPTY
58886: LIST
58887: LIST
58888: PUSH
58889: LD_INT 3
58891: NEG
58892: PUSH
58893: LD_INT 1
58895: PUSH
58896: EMPTY
58897: LIST
58898: LIST
58899: PUSH
58900: LD_INT 4
58902: NEG
58903: PUSH
58904: LD_INT 1
58906: PUSH
58907: EMPTY
58908: LIST
58909: LIST
58910: PUSH
58911: LD_INT 5
58913: NEG
58914: PUSH
58915: LD_INT 0
58917: PUSH
58918: EMPTY
58919: LIST
58920: LIST
58921: PUSH
58922: LD_INT 5
58924: NEG
58925: PUSH
58926: LD_INT 1
58928: NEG
58929: PUSH
58930: EMPTY
58931: LIST
58932: LIST
58933: PUSH
58934: LD_INT 5
58936: NEG
58937: PUSH
58938: LD_INT 2
58940: NEG
58941: PUSH
58942: EMPTY
58943: LIST
58944: LIST
58945: PUSH
58946: LD_INT 3
58948: NEG
58949: PUSH
58950: LD_INT 2
58952: PUSH
58953: EMPTY
58954: LIST
58955: LIST
58956: PUSH
58957: LD_INT 3
58959: NEG
58960: PUSH
58961: LD_INT 3
58963: NEG
58964: PUSH
58965: EMPTY
58966: LIST
58967: LIST
58968: PUSH
58969: LD_INT 3
58971: NEG
58972: PUSH
58973: LD_INT 4
58975: NEG
58976: PUSH
58977: EMPTY
58978: LIST
58979: LIST
58980: PUSH
58981: LD_INT 2
58983: NEG
58984: PUSH
58985: LD_INT 3
58987: NEG
58988: PUSH
58989: EMPTY
58990: LIST
58991: LIST
58992: PUSH
58993: LD_INT 2
58995: NEG
58996: PUSH
58997: LD_INT 2
58999: NEG
59000: PUSH
59001: EMPTY
59002: LIST
59003: LIST
59004: PUSH
59005: LD_INT 3
59007: NEG
59008: PUSH
59009: LD_INT 2
59011: NEG
59012: PUSH
59013: EMPTY
59014: LIST
59015: LIST
59016: PUSH
59017: LD_INT 4
59019: NEG
59020: PUSH
59021: LD_INT 3
59023: NEG
59024: PUSH
59025: EMPTY
59026: LIST
59027: LIST
59028: PUSH
59029: LD_INT 4
59031: NEG
59032: PUSH
59033: LD_INT 4
59035: NEG
59036: PUSH
59037: EMPTY
59038: LIST
59039: LIST
59040: PUSH
59041: LD_INT 2
59043: NEG
59044: PUSH
59045: LD_INT 4
59047: NEG
59048: PUSH
59049: EMPTY
59050: LIST
59051: LIST
59052: PUSH
59053: LD_INT 4
59055: NEG
59056: PUSH
59057: LD_INT 2
59059: NEG
59060: PUSH
59061: EMPTY
59062: LIST
59063: LIST
59064: PUSH
59065: LD_INT 0
59067: PUSH
59068: LD_INT 4
59070: NEG
59071: PUSH
59072: EMPTY
59073: LIST
59074: LIST
59075: PUSH
59076: LD_INT 0
59078: PUSH
59079: LD_INT 5
59081: NEG
59082: PUSH
59083: EMPTY
59084: LIST
59085: LIST
59086: PUSH
59087: LD_INT 1
59089: PUSH
59090: LD_INT 4
59092: NEG
59093: PUSH
59094: EMPTY
59095: LIST
59096: LIST
59097: PUSH
59098: LD_INT 1
59100: PUSH
59101: LD_INT 3
59103: NEG
59104: PUSH
59105: EMPTY
59106: LIST
59107: LIST
59108: PUSH
59109: LD_INT 0
59111: PUSH
59112: LD_INT 3
59114: NEG
59115: PUSH
59116: EMPTY
59117: LIST
59118: LIST
59119: PUSH
59120: LD_INT 1
59122: NEG
59123: PUSH
59124: LD_INT 4
59126: NEG
59127: PUSH
59128: EMPTY
59129: LIST
59130: LIST
59131: PUSH
59132: LD_INT 1
59134: NEG
59135: PUSH
59136: LD_INT 5
59138: NEG
59139: PUSH
59140: EMPTY
59141: LIST
59142: LIST
59143: PUSH
59144: LD_INT 2
59146: PUSH
59147: LD_INT 3
59149: NEG
59150: PUSH
59151: EMPTY
59152: LIST
59153: LIST
59154: PUSH
59155: LD_INT 2
59157: NEG
59158: PUSH
59159: LD_INT 5
59161: NEG
59162: PUSH
59163: EMPTY
59164: LIST
59165: LIST
59166: PUSH
59167: LD_INT 3
59169: PUSH
59170: LD_INT 0
59172: PUSH
59173: EMPTY
59174: LIST
59175: LIST
59176: PUSH
59177: LD_INT 3
59179: PUSH
59180: LD_INT 1
59182: NEG
59183: PUSH
59184: EMPTY
59185: LIST
59186: LIST
59187: PUSH
59188: LD_INT 4
59190: PUSH
59191: LD_INT 0
59193: PUSH
59194: EMPTY
59195: LIST
59196: LIST
59197: PUSH
59198: LD_INT 4
59200: PUSH
59201: LD_INT 1
59203: PUSH
59204: EMPTY
59205: LIST
59206: LIST
59207: PUSH
59208: LD_INT 3
59210: PUSH
59211: LD_INT 1
59213: PUSH
59214: EMPTY
59215: LIST
59216: LIST
59217: PUSH
59218: LD_INT 2
59220: PUSH
59221: LD_INT 0
59223: PUSH
59224: EMPTY
59225: LIST
59226: LIST
59227: PUSH
59228: LD_INT 2
59230: PUSH
59231: LD_INT 1
59233: NEG
59234: PUSH
59235: EMPTY
59236: LIST
59237: LIST
59238: PUSH
59239: LD_INT 2
59241: PUSH
59242: LD_INT 2
59244: NEG
59245: PUSH
59246: EMPTY
59247: LIST
59248: LIST
59249: PUSH
59250: LD_INT 4
59252: PUSH
59253: LD_INT 2
59255: PUSH
59256: EMPTY
59257: LIST
59258: LIST
59259: PUSH
59260: LD_INT 4
59262: PUSH
59263: LD_INT 4
59265: PUSH
59266: EMPTY
59267: LIST
59268: LIST
59269: PUSH
59270: LD_INT 4
59272: PUSH
59273: LD_INT 3
59275: PUSH
59276: EMPTY
59277: LIST
59278: LIST
59279: PUSH
59280: LD_INT 5
59282: PUSH
59283: LD_INT 4
59285: PUSH
59286: EMPTY
59287: LIST
59288: LIST
59289: PUSH
59290: LD_INT 5
59292: PUSH
59293: LD_INT 5
59295: PUSH
59296: EMPTY
59297: LIST
59298: LIST
59299: PUSH
59300: LD_INT 4
59302: PUSH
59303: LD_INT 5
59305: PUSH
59306: EMPTY
59307: LIST
59308: LIST
59309: PUSH
59310: LD_INT 3
59312: PUSH
59313: LD_INT 4
59315: PUSH
59316: EMPTY
59317: LIST
59318: LIST
59319: PUSH
59320: LD_INT 3
59322: PUSH
59323: LD_INT 3
59325: PUSH
59326: EMPTY
59327: LIST
59328: LIST
59329: PUSH
59330: LD_INT 5
59332: PUSH
59333: LD_INT 3
59335: PUSH
59336: EMPTY
59337: LIST
59338: LIST
59339: PUSH
59340: LD_INT 3
59342: PUSH
59343: LD_INT 5
59345: PUSH
59346: EMPTY
59347: LIST
59348: LIST
59349: PUSH
59350: EMPTY
59351: LIST
59352: LIST
59353: LIST
59354: LIST
59355: LIST
59356: LIST
59357: LIST
59358: LIST
59359: LIST
59360: LIST
59361: LIST
59362: LIST
59363: LIST
59364: LIST
59365: LIST
59366: LIST
59367: LIST
59368: LIST
59369: LIST
59370: LIST
59371: LIST
59372: LIST
59373: LIST
59374: LIST
59375: LIST
59376: LIST
59377: LIST
59378: LIST
59379: LIST
59380: LIST
59381: LIST
59382: LIST
59383: LIST
59384: LIST
59385: LIST
59386: LIST
59387: LIST
59388: LIST
59389: LIST
59390: LIST
59391: LIST
59392: LIST
59393: LIST
59394: LIST
59395: LIST
59396: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
59397: LD_ADDR_VAR 0 33
59401: PUSH
59402: LD_INT 4
59404: NEG
59405: PUSH
59406: LD_INT 4
59408: NEG
59409: PUSH
59410: EMPTY
59411: LIST
59412: LIST
59413: PUSH
59414: LD_INT 4
59416: NEG
59417: PUSH
59418: LD_INT 5
59420: NEG
59421: PUSH
59422: EMPTY
59423: LIST
59424: LIST
59425: PUSH
59426: LD_INT 3
59428: NEG
59429: PUSH
59430: LD_INT 4
59432: NEG
59433: PUSH
59434: EMPTY
59435: LIST
59436: LIST
59437: PUSH
59438: LD_INT 3
59440: NEG
59441: PUSH
59442: LD_INT 3
59444: NEG
59445: PUSH
59446: EMPTY
59447: LIST
59448: LIST
59449: PUSH
59450: LD_INT 4
59452: NEG
59453: PUSH
59454: LD_INT 3
59456: NEG
59457: PUSH
59458: EMPTY
59459: LIST
59460: LIST
59461: PUSH
59462: LD_INT 5
59464: NEG
59465: PUSH
59466: LD_INT 4
59468: NEG
59469: PUSH
59470: EMPTY
59471: LIST
59472: LIST
59473: PUSH
59474: LD_INT 5
59476: NEG
59477: PUSH
59478: LD_INT 5
59480: NEG
59481: PUSH
59482: EMPTY
59483: LIST
59484: LIST
59485: PUSH
59486: LD_INT 3
59488: NEG
59489: PUSH
59490: LD_INT 5
59492: NEG
59493: PUSH
59494: EMPTY
59495: LIST
59496: LIST
59497: PUSH
59498: LD_INT 5
59500: NEG
59501: PUSH
59502: LD_INT 3
59504: NEG
59505: PUSH
59506: EMPTY
59507: LIST
59508: LIST
59509: PUSH
59510: LD_INT 0
59512: PUSH
59513: LD_INT 3
59515: NEG
59516: PUSH
59517: EMPTY
59518: LIST
59519: LIST
59520: PUSH
59521: LD_INT 0
59523: PUSH
59524: LD_INT 4
59526: NEG
59527: PUSH
59528: EMPTY
59529: LIST
59530: LIST
59531: PUSH
59532: LD_INT 1
59534: PUSH
59535: LD_INT 3
59537: NEG
59538: PUSH
59539: EMPTY
59540: LIST
59541: LIST
59542: PUSH
59543: LD_INT 1
59545: PUSH
59546: LD_INT 2
59548: NEG
59549: PUSH
59550: EMPTY
59551: LIST
59552: LIST
59553: PUSH
59554: LD_INT 0
59556: PUSH
59557: LD_INT 2
59559: NEG
59560: PUSH
59561: EMPTY
59562: LIST
59563: LIST
59564: PUSH
59565: LD_INT 1
59567: NEG
59568: PUSH
59569: LD_INT 3
59571: NEG
59572: PUSH
59573: EMPTY
59574: LIST
59575: LIST
59576: PUSH
59577: LD_INT 1
59579: NEG
59580: PUSH
59581: LD_INT 4
59583: NEG
59584: PUSH
59585: EMPTY
59586: LIST
59587: LIST
59588: PUSH
59589: LD_INT 2
59591: PUSH
59592: LD_INT 2
59594: NEG
59595: PUSH
59596: EMPTY
59597: LIST
59598: LIST
59599: PUSH
59600: LD_INT 2
59602: NEG
59603: PUSH
59604: LD_INT 4
59606: NEG
59607: PUSH
59608: EMPTY
59609: LIST
59610: LIST
59611: PUSH
59612: LD_INT 4
59614: PUSH
59615: LD_INT 0
59617: PUSH
59618: EMPTY
59619: LIST
59620: LIST
59621: PUSH
59622: LD_INT 4
59624: PUSH
59625: LD_INT 1
59627: NEG
59628: PUSH
59629: EMPTY
59630: LIST
59631: LIST
59632: PUSH
59633: LD_INT 5
59635: PUSH
59636: LD_INT 0
59638: PUSH
59639: EMPTY
59640: LIST
59641: LIST
59642: PUSH
59643: LD_INT 5
59645: PUSH
59646: LD_INT 1
59648: PUSH
59649: EMPTY
59650: LIST
59651: LIST
59652: PUSH
59653: LD_INT 4
59655: PUSH
59656: LD_INT 1
59658: PUSH
59659: EMPTY
59660: LIST
59661: LIST
59662: PUSH
59663: LD_INT 3
59665: PUSH
59666: LD_INT 0
59668: PUSH
59669: EMPTY
59670: LIST
59671: LIST
59672: PUSH
59673: LD_INT 3
59675: PUSH
59676: LD_INT 1
59678: NEG
59679: PUSH
59680: EMPTY
59681: LIST
59682: LIST
59683: PUSH
59684: LD_INT 3
59686: PUSH
59687: LD_INT 2
59689: NEG
59690: PUSH
59691: EMPTY
59692: LIST
59693: LIST
59694: PUSH
59695: LD_INT 5
59697: PUSH
59698: LD_INT 2
59700: PUSH
59701: EMPTY
59702: LIST
59703: LIST
59704: PUSH
59705: LD_INT 3
59707: PUSH
59708: LD_INT 3
59710: PUSH
59711: EMPTY
59712: LIST
59713: LIST
59714: PUSH
59715: LD_INT 3
59717: PUSH
59718: LD_INT 2
59720: PUSH
59721: EMPTY
59722: LIST
59723: LIST
59724: PUSH
59725: LD_INT 4
59727: PUSH
59728: LD_INT 3
59730: PUSH
59731: EMPTY
59732: LIST
59733: LIST
59734: PUSH
59735: LD_INT 4
59737: PUSH
59738: LD_INT 4
59740: PUSH
59741: EMPTY
59742: LIST
59743: LIST
59744: PUSH
59745: LD_INT 3
59747: PUSH
59748: LD_INT 4
59750: PUSH
59751: EMPTY
59752: LIST
59753: LIST
59754: PUSH
59755: LD_INT 2
59757: PUSH
59758: LD_INT 3
59760: PUSH
59761: EMPTY
59762: LIST
59763: LIST
59764: PUSH
59765: LD_INT 2
59767: PUSH
59768: LD_INT 2
59770: PUSH
59771: EMPTY
59772: LIST
59773: LIST
59774: PUSH
59775: LD_INT 4
59777: PUSH
59778: LD_INT 2
59780: PUSH
59781: EMPTY
59782: LIST
59783: LIST
59784: PUSH
59785: LD_INT 2
59787: PUSH
59788: LD_INT 4
59790: PUSH
59791: EMPTY
59792: LIST
59793: LIST
59794: PUSH
59795: LD_INT 0
59797: PUSH
59798: LD_INT 4
59800: PUSH
59801: EMPTY
59802: LIST
59803: LIST
59804: PUSH
59805: LD_INT 0
59807: PUSH
59808: LD_INT 3
59810: PUSH
59811: EMPTY
59812: LIST
59813: LIST
59814: PUSH
59815: LD_INT 1
59817: PUSH
59818: LD_INT 4
59820: PUSH
59821: EMPTY
59822: LIST
59823: LIST
59824: PUSH
59825: LD_INT 1
59827: PUSH
59828: LD_INT 5
59830: PUSH
59831: EMPTY
59832: LIST
59833: LIST
59834: PUSH
59835: LD_INT 0
59837: PUSH
59838: LD_INT 5
59840: PUSH
59841: EMPTY
59842: LIST
59843: LIST
59844: PUSH
59845: LD_INT 1
59847: NEG
59848: PUSH
59849: LD_INT 4
59851: PUSH
59852: EMPTY
59853: LIST
59854: LIST
59855: PUSH
59856: LD_INT 1
59858: NEG
59859: PUSH
59860: LD_INT 3
59862: PUSH
59863: EMPTY
59864: LIST
59865: LIST
59866: PUSH
59867: LD_INT 2
59869: PUSH
59870: LD_INT 5
59872: PUSH
59873: EMPTY
59874: LIST
59875: LIST
59876: PUSH
59877: LD_INT 2
59879: NEG
59880: PUSH
59881: LD_INT 3
59883: PUSH
59884: EMPTY
59885: LIST
59886: LIST
59887: PUSH
59888: EMPTY
59889: LIST
59890: LIST
59891: LIST
59892: LIST
59893: LIST
59894: LIST
59895: LIST
59896: LIST
59897: LIST
59898: LIST
59899: LIST
59900: LIST
59901: LIST
59902: LIST
59903: LIST
59904: LIST
59905: LIST
59906: LIST
59907: LIST
59908: LIST
59909: LIST
59910: LIST
59911: LIST
59912: LIST
59913: LIST
59914: LIST
59915: LIST
59916: LIST
59917: LIST
59918: LIST
59919: LIST
59920: LIST
59921: LIST
59922: LIST
59923: LIST
59924: LIST
59925: LIST
59926: LIST
59927: LIST
59928: LIST
59929: LIST
59930: LIST
59931: LIST
59932: LIST
59933: LIST
59934: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
59935: LD_ADDR_VAR 0 34
59939: PUSH
59940: LD_INT 0
59942: PUSH
59943: LD_INT 4
59945: NEG
59946: PUSH
59947: EMPTY
59948: LIST
59949: LIST
59950: PUSH
59951: LD_INT 0
59953: PUSH
59954: LD_INT 5
59956: NEG
59957: PUSH
59958: EMPTY
59959: LIST
59960: LIST
59961: PUSH
59962: LD_INT 1
59964: PUSH
59965: LD_INT 4
59967: NEG
59968: PUSH
59969: EMPTY
59970: LIST
59971: LIST
59972: PUSH
59973: LD_INT 1
59975: PUSH
59976: LD_INT 3
59978: NEG
59979: PUSH
59980: EMPTY
59981: LIST
59982: LIST
59983: PUSH
59984: LD_INT 0
59986: PUSH
59987: LD_INT 3
59989: NEG
59990: PUSH
59991: EMPTY
59992: LIST
59993: LIST
59994: PUSH
59995: LD_INT 1
59997: NEG
59998: PUSH
59999: LD_INT 4
60001: NEG
60002: PUSH
60003: EMPTY
60004: LIST
60005: LIST
60006: PUSH
60007: LD_INT 1
60009: NEG
60010: PUSH
60011: LD_INT 5
60013: NEG
60014: PUSH
60015: EMPTY
60016: LIST
60017: LIST
60018: PUSH
60019: LD_INT 2
60021: PUSH
60022: LD_INT 3
60024: NEG
60025: PUSH
60026: EMPTY
60027: LIST
60028: LIST
60029: PUSH
60030: LD_INT 2
60032: NEG
60033: PUSH
60034: LD_INT 5
60036: NEG
60037: PUSH
60038: EMPTY
60039: LIST
60040: LIST
60041: PUSH
60042: LD_INT 3
60044: PUSH
60045: LD_INT 0
60047: PUSH
60048: EMPTY
60049: LIST
60050: LIST
60051: PUSH
60052: LD_INT 3
60054: PUSH
60055: LD_INT 1
60057: NEG
60058: PUSH
60059: EMPTY
60060: LIST
60061: LIST
60062: PUSH
60063: LD_INT 4
60065: PUSH
60066: LD_INT 0
60068: PUSH
60069: EMPTY
60070: LIST
60071: LIST
60072: PUSH
60073: LD_INT 4
60075: PUSH
60076: LD_INT 1
60078: PUSH
60079: EMPTY
60080: LIST
60081: LIST
60082: PUSH
60083: LD_INT 3
60085: PUSH
60086: LD_INT 1
60088: PUSH
60089: EMPTY
60090: LIST
60091: LIST
60092: PUSH
60093: LD_INT 2
60095: PUSH
60096: LD_INT 0
60098: PUSH
60099: EMPTY
60100: LIST
60101: LIST
60102: PUSH
60103: LD_INT 2
60105: PUSH
60106: LD_INT 1
60108: NEG
60109: PUSH
60110: EMPTY
60111: LIST
60112: LIST
60113: PUSH
60114: LD_INT 2
60116: PUSH
60117: LD_INT 2
60119: NEG
60120: PUSH
60121: EMPTY
60122: LIST
60123: LIST
60124: PUSH
60125: LD_INT 4
60127: PUSH
60128: LD_INT 2
60130: PUSH
60131: EMPTY
60132: LIST
60133: LIST
60134: PUSH
60135: LD_INT 4
60137: PUSH
60138: LD_INT 4
60140: PUSH
60141: EMPTY
60142: LIST
60143: LIST
60144: PUSH
60145: LD_INT 4
60147: PUSH
60148: LD_INT 3
60150: PUSH
60151: EMPTY
60152: LIST
60153: LIST
60154: PUSH
60155: LD_INT 5
60157: PUSH
60158: LD_INT 4
60160: PUSH
60161: EMPTY
60162: LIST
60163: LIST
60164: PUSH
60165: LD_INT 5
60167: PUSH
60168: LD_INT 5
60170: PUSH
60171: EMPTY
60172: LIST
60173: LIST
60174: PUSH
60175: LD_INT 4
60177: PUSH
60178: LD_INT 5
60180: PUSH
60181: EMPTY
60182: LIST
60183: LIST
60184: PUSH
60185: LD_INT 3
60187: PUSH
60188: LD_INT 4
60190: PUSH
60191: EMPTY
60192: LIST
60193: LIST
60194: PUSH
60195: LD_INT 3
60197: PUSH
60198: LD_INT 3
60200: PUSH
60201: EMPTY
60202: LIST
60203: LIST
60204: PUSH
60205: LD_INT 5
60207: PUSH
60208: LD_INT 3
60210: PUSH
60211: EMPTY
60212: LIST
60213: LIST
60214: PUSH
60215: LD_INT 3
60217: PUSH
60218: LD_INT 5
60220: PUSH
60221: EMPTY
60222: LIST
60223: LIST
60224: PUSH
60225: LD_INT 0
60227: PUSH
60228: LD_INT 3
60230: PUSH
60231: EMPTY
60232: LIST
60233: LIST
60234: PUSH
60235: LD_INT 0
60237: PUSH
60238: LD_INT 2
60240: PUSH
60241: EMPTY
60242: LIST
60243: LIST
60244: PUSH
60245: LD_INT 1
60247: PUSH
60248: LD_INT 3
60250: PUSH
60251: EMPTY
60252: LIST
60253: LIST
60254: PUSH
60255: LD_INT 1
60257: PUSH
60258: LD_INT 4
60260: PUSH
60261: EMPTY
60262: LIST
60263: LIST
60264: PUSH
60265: LD_INT 0
60267: PUSH
60268: LD_INT 4
60270: PUSH
60271: EMPTY
60272: LIST
60273: LIST
60274: PUSH
60275: LD_INT 1
60277: NEG
60278: PUSH
60279: LD_INT 3
60281: PUSH
60282: EMPTY
60283: LIST
60284: LIST
60285: PUSH
60286: LD_INT 1
60288: NEG
60289: PUSH
60290: LD_INT 2
60292: PUSH
60293: EMPTY
60294: LIST
60295: LIST
60296: PUSH
60297: LD_INT 2
60299: PUSH
60300: LD_INT 4
60302: PUSH
60303: EMPTY
60304: LIST
60305: LIST
60306: PUSH
60307: LD_INT 2
60309: NEG
60310: PUSH
60311: LD_INT 2
60313: PUSH
60314: EMPTY
60315: LIST
60316: LIST
60317: PUSH
60318: LD_INT 4
60320: NEG
60321: PUSH
60322: LD_INT 0
60324: PUSH
60325: EMPTY
60326: LIST
60327: LIST
60328: PUSH
60329: LD_INT 4
60331: NEG
60332: PUSH
60333: LD_INT 1
60335: NEG
60336: PUSH
60337: EMPTY
60338: LIST
60339: LIST
60340: PUSH
60341: LD_INT 3
60343: NEG
60344: PUSH
60345: LD_INT 0
60347: PUSH
60348: EMPTY
60349: LIST
60350: LIST
60351: PUSH
60352: LD_INT 3
60354: NEG
60355: PUSH
60356: LD_INT 1
60358: PUSH
60359: EMPTY
60360: LIST
60361: LIST
60362: PUSH
60363: LD_INT 4
60365: NEG
60366: PUSH
60367: LD_INT 1
60369: PUSH
60370: EMPTY
60371: LIST
60372: LIST
60373: PUSH
60374: LD_INT 5
60376: NEG
60377: PUSH
60378: LD_INT 0
60380: PUSH
60381: EMPTY
60382: LIST
60383: LIST
60384: PUSH
60385: LD_INT 5
60387: NEG
60388: PUSH
60389: LD_INT 1
60391: NEG
60392: PUSH
60393: EMPTY
60394: LIST
60395: LIST
60396: PUSH
60397: LD_INT 5
60399: NEG
60400: PUSH
60401: LD_INT 2
60403: NEG
60404: PUSH
60405: EMPTY
60406: LIST
60407: LIST
60408: PUSH
60409: LD_INT 3
60411: NEG
60412: PUSH
60413: LD_INT 2
60415: PUSH
60416: EMPTY
60417: LIST
60418: LIST
60419: PUSH
60420: EMPTY
60421: LIST
60422: LIST
60423: LIST
60424: LIST
60425: LIST
60426: LIST
60427: LIST
60428: LIST
60429: LIST
60430: LIST
60431: LIST
60432: LIST
60433: LIST
60434: LIST
60435: LIST
60436: LIST
60437: LIST
60438: LIST
60439: LIST
60440: LIST
60441: LIST
60442: LIST
60443: LIST
60444: LIST
60445: LIST
60446: LIST
60447: LIST
60448: LIST
60449: LIST
60450: LIST
60451: LIST
60452: LIST
60453: LIST
60454: LIST
60455: LIST
60456: LIST
60457: LIST
60458: LIST
60459: LIST
60460: LIST
60461: LIST
60462: LIST
60463: LIST
60464: LIST
60465: LIST
60466: ST_TO_ADDR
// end ; end ;
60467: GO 60470
60469: POP
// case btype of b_depot , b_warehouse :
60470: LD_VAR 0 1
60474: PUSH
60475: LD_INT 0
60477: DOUBLE
60478: EQUAL
60479: IFTRUE 60489
60481: LD_INT 1
60483: DOUBLE
60484: EQUAL
60485: IFTRUE 60489
60487: GO 60690
60489: POP
// case nation of nation_american :
60490: LD_VAR 0 5
60494: PUSH
60495: LD_INT 1
60497: DOUBLE
60498: EQUAL
60499: IFTRUE 60503
60501: GO 60559
60503: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
60504: LD_ADDR_VAR 0 9
60508: PUSH
60509: LD_VAR 0 11
60513: PUSH
60514: LD_VAR 0 12
60518: PUSH
60519: LD_VAR 0 13
60523: PUSH
60524: LD_VAR 0 14
60528: PUSH
60529: LD_VAR 0 15
60533: PUSH
60534: LD_VAR 0 16
60538: PUSH
60539: EMPTY
60540: LIST
60541: LIST
60542: LIST
60543: LIST
60544: LIST
60545: LIST
60546: PUSH
60547: LD_VAR 0 4
60551: PUSH
60552: LD_INT 1
60554: PLUS
60555: ARRAY
60556: ST_TO_ADDR
60557: GO 60688
60559: LD_INT 2
60561: DOUBLE
60562: EQUAL
60563: IFTRUE 60567
60565: GO 60623
60567: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
60568: LD_ADDR_VAR 0 9
60572: PUSH
60573: LD_VAR 0 17
60577: PUSH
60578: LD_VAR 0 18
60582: PUSH
60583: LD_VAR 0 19
60587: PUSH
60588: LD_VAR 0 20
60592: PUSH
60593: LD_VAR 0 21
60597: PUSH
60598: LD_VAR 0 22
60602: PUSH
60603: EMPTY
60604: LIST
60605: LIST
60606: LIST
60607: LIST
60608: LIST
60609: LIST
60610: PUSH
60611: LD_VAR 0 4
60615: PUSH
60616: LD_INT 1
60618: PLUS
60619: ARRAY
60620: ST_TO_ADDR
60621: GO 60688
60623: LD_INT 3
60625: DOUBLE
60626: EQUAL
60627: IFTRUE 60631
60629: GO 60687
60631: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
60632: LD_ADDR_VAR 0 9
60636: PUSH
60637: LD_VAR 0 23
60641: PUSH
60642: LD_VAR 0 24
60646: PUSH
60647: LD_VAR 0 25
60651: PUSH
60652: LD_VAR 0 26
60656: PUSH
60657: LD_VAR 0 27
60661: PUSH
60662: LD_VAR 0 28
60666: PUSH
60667: EMPTY
60668: LIST
60669: LIST
60670: LIST
60671: LIST
60672: LIST
60673: LIST
60674: PUSH
60675: LD_VAR 0 4
60679: PUSH
60680: LD_INT 1
60682: PLUS
60683: ARRAY
60684: ST_TO_ADDR
60685: GO 60688
60687: POP
60688: GO 61243
60690: LD_INT 2
60692: DOUBLE
60693: EQUAL
60694: IFTRUE 60704
60696: LD_INT 3
60698: DOUBLE
60699: EQUAL
60700: IFTRUE 60704
60702: GO 60760
60704: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
60705: LD_ADDR_VAR 0 9
60709: PUSH
60710: LD_VAR 0 29
60714: PUSH
60715: LD_VAR 0 30
60719: PUSH
60720: LD_VAR 0 31
60724: PUSH
60725: LD_VAR 0 32
60729: PUSH
60730: LD_VAR 0 33
60734: PUSH
60735: LD_VAR 0 34
60739: PUSH
60740: EMPTY
60741: LIST
60742: LIST
60743: LIST
60744: LIST
60745: LIST
60746: LIST
60747: PUSH
60748: LD_VAR 0 4
60752: PUSH
60753: LD_INT 1
60755: PLUS
60756: ARRAY
60757: ST_TO_ADDR
60758: GO 61243
60760: LD_INT 16
60762: DOUBLE
60763: EQUAL
60764: IFTRUE 60822
60766: LD_INT 17
60768: DOUBLE
60769: EQUAL
60770: IFTRUE 60822
60772: LD_INT 18
60774: DOUBLE
60775: EQUAL
60776: IFTRUE 60822
60778: LD_INT 19
60780: DOUBLE
60781: EQUAL
60782: IFTRUE 60822
60784: LD_INT 22
60786: DOUBLE
60787: EQUAL
60788: IFTRUE 60822
60790: LD_INT 20
60792: DOUBLE
60793: EQUAL
60794: IFTRUE 60822
60796: LD_INT 21
60798: DOUBLE
60799: EQUAL
60800: IFTRUE 60822
60802: LD_INT 23
60804: DOUBLE
60805: EQUAL
60806: IFTRUE 60822
60808: LD_INT 24
60810: DOUBLE
60811: EQUAL
60812: IFTRUE 60822
60814: LD_INT 25
60816: DOUBLE
60817: EQUAL
60818: IFTRUE 60822
60820: GO 60878
60822: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
60823: LD_ADDR_VAR 0 9
60827: PUSH
60828: LD_VAR 0 35
60832: PUSH
60833: LD_VAR 0 36
60837: PUSH
60838: LD_VAR 0 37
60842: PUSH
60843: LD_VAR 0 38
60847: PUSH
60848: LD_VAR 0 39
60852: PUSH
60853: LD_VAR 0 40
60857: PUSH
60858: EMPTY
60859: LIST
60860: LIST
60861: LIST
60862: LIST
60863: LIST
60864: LIST
60865: PUSH
60866: LD_VAR 0 4
60870: PUSH
60871: LD_INT 1
60873: PLUS
60874: ARRAY
60875: ST_TO_ADDR
60876: GO 61243
60878: LD_INT 6
60880: DOUBLE
60881: EQUAL
60882: IFTRUE 60934
60884: LD_INT 7
60886: DOUBLE
60887: EQUAL
60888: IFTRUE 60934
60890: LD_INT 8
60892: DOUBLE
60893: EQUAL
60894: IFTRUE 60934
60896: LD_INT 13
60898: DOUBLE
60899: EQUAL
60900: IFTRUE 60934
60902: LD_INT 12
60904: DOUBLE
60905: EQUAL
60906: IFTRUE 60934
60908: LD_INT 15
60910: DOUBLE
60911: EQUAL
60912: IFTRUE 60934
60914: LD_INT 11
60916: DOUBLE
60917: EQUAL
60918: IFTRUE 60934
60920: LD_INT 14
60922: DOUBLE
60923: EQUAL
60924: IFTRUE 60934
60926: LD_INT 10
60928: DOUBLE
60929: EQUAL
60930: IFTRUE 60934
60932: GO 60990
60934: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
60935: LD_ADDR_VAR 0 9
60939: PUSH
60940: LD_VAR 0 41
60944: PUSH
60945: LD_VAR 0 42
60949: PUSH
60950: LD_VAR 0 43
60954: PUSH
60955: LD_VAR 0 44
60959: PUSH
60960: LD_VAR 0 45
60964: PUSH
60965: LD_VAR 0 46
60969: PUSH
60970: EMPTY
60971: LIST
60972: LIST
60973: LIST
60974: LIST
60975: LIST
60976: LIST
60977: PUSH
60978: LD_VAR 0 4
60982: PUSH
60983: LD_INT 1
60985: PLUS
60986: ARRAY
60987: ST_TO_ADDR
60988: GO 61243
60990: LD_INT 36
60992: DOUBLE
60993: EQUAL
60994: IFTRUE 60998
60996: GO 61054
60998: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
60999: LD_ADDR_VAR 0 9
61003: PUSH
61004: LD_VAR 0 47
61008: PUSH
61009: LD_VAR 0 48
61013: PUSH
61014: LD_VAR 0 49
61018: PUSH
61019: LD_VAR 0 50
61023: PUSH
61024: LD_VAR 0 51
61028: PUSH
61029: LD_VAR 0 52
61033: PUSH
61034: EMPTY
61035: LIST
61036: LIST
61037: LIST
61038: LIST
61039: LIST
61040: LIST
61041: PUSH
61042: LD_VAR 0 4
61046: PUSH
61047: LD_INT 1
61049: PLUS
61050: ARRAY
61051: ST_TO_ADDR
61052: GO 61243
61054: LD_INT 4
61056: DOUBLE
61057: EQUAL
61058: IFTRUE 61080
61060: LD_INT 5
61062: DOUBLE
61063: EQUAL
61064: IFTRUE 61080
61066: LD_INT 34
61068: DOUBLE
61069: EQUAL
61070: IFTRUE 61080
61072: LD_INT 37
61074: DOUBLE
61075: EQUAL
61076: IFTRUE 61080
61078: GO 61136
61080: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
61081: LD_ADDR_VAR 0 9
61085: PUSH
61086: LD_VAR 0 53
61090: PUSH
61091: LD_VAR 0 54
61095: PUSH
61096: LD_VAR 0 55
61100: PUSH
61101: LD_VAR 0 56
61105: PUSH
61106: LD_VAR 0 57
61110: PUSH
61111: LD_VAR 0 58
61115: PUSH
61116: EMPTY
61117: LIST
61118: LIST
61119: LIST
61120: LIST
61121: LIST
61122: LIST
61123: PUSH
61124: LD_VAR 0 4
61128: PUSH
61129: LD_INT 1
61131: PLUS
61132: ARRAY
61133: ST_TO_ADDR
61134: GO 61243
61136: LD_INT 31
61138: DOUBLE
61139: EQUAL
61140: IFTRUE 61186
61142: LD_INT 32
61144: DOUBLE
61145: EQUAL
61146: IFTRUE 61186
61148: LD_INT 33
61150: DOUBLE
61151: EQUAL
61152: IFTRUE 61186
61154: LD_INT 27
61156: DOUBLE
61157: EQUAL
61158: IFTRUE 61186
61160: LD_INT 26
61162: DOUBLE
61163: EQUAL
61164: IFTRUE 61186
61166: LD_INT 28
61168: DOUBLE
61169: EQUAL
61170: IFTRUE 61186
61172: LD_INT 29
61174: DOUBLE
61175: EQUAL
61176: IFTRUE 61186
61178: LD_INT 30
61180: DOUBLE
61181: EQUAL
61182: IFTRUE 61186
61184: GO 61242
61186: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
61187: LD_ADDR_VAR 0 9
61191: PUSH
61192: LD_VAR 0 59
61196: PUSH
61197: LD_VAR 0 60
61201: PUSH
61202: LD_VAR 0 61
61206: PUSH
61207: LD_VAR 0 62
61211: PUSH
61212: LD_VAR 0 63
61216: PUSH
61217: LD_VAR 0 64
61221: PUSH
61222: EMPTY
61223: LIST
61224: LIST
61225: LIST
61226: LIST
61227: LIST
61228: LIST
61229: PUSH
61230: LD_VAR 0 4
61234: PUSH
61235: LD_INT 1
61237: PLUS
61238: ARRAY
61239: ST_TO_ADDR
61240: GO 61243
61242: POP
// temp_list2 = [ ] ;
61243: LD_ADDR_VAR 0 10
61247: PUSH
61248: EMPTY
61249: ST_TO_ADDR
// for i in temp_list do
61250: LD_ADDR_VAR 0 8
61254: PUSH
61255: LD_VAR 0 9
61259: PUSH
61260: FOR_IN
61261: IFFALSE 61313
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
61263: LD_ADDR_VAR 0 10
61267: PUSH
61268: LD_VAR 0 10
61272: PUSH
61273: LD_VAR 0 8
61277: PUSH
61278: LD_INT 1
61280: ARRAY
61281: PUSH
61282: LD_VAR 0 2
61286: PLUS
61287: PUSH
61288: LD_VAR 0 8
61292: PUSH
61293: LD_INT 2
61295: ARRAY
61296: PUSH
61297: LD_VAR 0 3
61301: PLUS
61302: PUSH
61303: EMPTY
61304: LIST
61305: LIST
61306: PUSH
61307: EMPTY
61308: LIST
61309: ADD
61310: ST_TO_ADDR
61311: GO 61260
61313: POP
61314: POP
// result = temp_list2 ;
61315: LD_ADDR_VAR 0 7
61319: PUSH
61320: LD_VAR 0 10
61324: ST_TO_ADDR
// end ;
61325: LD_VAR 0 7
61329: RET
// export function EnemyInRange ( unit , dist ) ; begin
61330: LD_INT 0
61332: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
61333: LD_ADDR_VAR 0 3
61337: PUSH
61338: LD_VAR 0 1
61342: PPUSH
61343: CALL_OW 255
61347: PPUSH
61348: LD_VAR 0 1
61352: PPUSH
61353: CALL_OW 250
61357: PPUSH
61358: LD_VAR 0 1
61362: PPUSH
61363: CALL_OW 251
61367: PPUSH
61368: LD_VAR 0 2
61372: PPUSH
61373: CALL 34732 0 4
61377: PUSH
61378: LD_INT 4
61380: ARRAY
61381: ST_TO_ADDR
// end ;
61382: LD_VAR 0 3
61386: RET
// export function PlayerSeeMe ( unit ) ; begin
61387: LD_INT 0
61389: PPUSH
// result := See ( your_side , unit ) ;
61390: LD_ADDR_VAR 0 2
61394: PUSH
61395: LD_OWVAR 2
61399: PPUSH
61400: LD_VAR 0 1
61404: PPUSH
61405: CALL_OW 292
61409: ST_TO_ADDR
// end ;
61410: LD_VAR 0 2
61414: RET
// export function ReverseDir ( unit ) ; begin
61415: LD_INT 0
61417: PPUSH
// if not unit then
61418: LD_VAR 0 1
61422: NOT
61423: IFFALSE 61427
// exit ;
61425: GO 61450
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
61427: LD_ADDR_VAR 0 2
61431: PUSH
61432: LD_VAR 0 1
61436: PPUSH
61437: CALL_OW 254
61441: PUSH
61442: LD_INT 3
61444: PLUS
61445: PUSH
61446: LD_INT 6
61448: MOD
61449: ST_TO_ADDR
// end ;
61450: LD_VAR 0 2
61454: RET
// export function ReverseArray ( array ) ; var i ; begin
61455: LD_INT 0
61457: PPUSH
61458: PPUSH
// if not array then
61459: LD_VAR 0 1
61463: NOT
61464: IFFALSE 61468
// exit ;
61466: GO 61523
// result := [ ] ;
61468: LD_ADDR_VAR 0 2
61472: PUSH
61473: EMPTY
61474: ST_TO_ADDR
// for i := array downto 1 do
61475: LD_ADDR_VAR 0 3
61479: PUSH
61480: DOUBLE
61481: LD_VAR 0 1
61485: INC
61486: ST_TO_ADDR
61487: LD_INT 1
61489: PUSH
61490: FOR_DOWNTO
61491: IFFALSE 61521
// result := Join ( result , array [ i ] ) ;
61493: LD_ADDR_VAR 0 2
61497: PUSH
61498: LD_VAR 0 2
61502: PPUSH
61503: LD_VAR 0 1
61507: PUSH
61508: LD_VAR 0 3
61512: ARRAY
61513: PPUSH
61514: CALL 66167 0 2
61518: ST_TO_ADDR
61519: GO 61490
61521: POP
61522: POP
// end ;
61523: LD_VAR 0 2
61527: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
61528: LD_INT 0
61530: PPUSH
61531: PPUSH
61532: PPUSH
61533: PPUSH
61534: PPUSH
61535: PPUSH
// if not unit or not hexes then
61536: LD_VAR 0 1
61540: NOT
61541: PUSH
61542: LD_VAR 0 2
61546: NOT
61547: OR
61548: IFFALSE 61552
// exit ;
61550: GO 61675
// dist := 9999 ;
61552: LD_ADDR_VAR 0 5
61556: PUSH
61557: LD_INT 9999
61559: ST_TO_ADDR
// for i = 1 to hexes do
61560: LD_ADDR_VAR 0 4
61564: PUSH
61565: DOUBLE
61566: LD_INT 1
61568: DEC
61569: ST_TO_ADDR
61570: LD_VAR 0 2
61574: PUSH
61575: FOR_TO
61576: IFFALSE 61663
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
61578: LD_ADDR_VAR 0 6
61582: PUSH
61583: LD_VAR 0 1
61587: PPUSH
61588: LD_VAR 0 2
61592: PUSH
61593: LD_VAR 0 4
61597: ARRAY
61598: PUSH
61599: LD_INT 1
61601: ARRAY
61602: PPUSH
61603: LD_VAR 0 2
61607: PUSH
61608: LD_VAR 0 4
61612: ARRAY
61613: PUSH
61614: LD_INT 2
61616: ARRAY
61617: PPUSH
61618: CALL_OW 297
61622: ST_TO_ADDR
// if tdist < dist then
61623: LD_VAR 0 6
61627: PUSH
61628: LD_VAR 0 5
61632: LESS
61633: IFFALSE 61661
// begin hex := hexes [ i ] ;
61635: LD_ADDR_VAR 0 8
61639: PUSH
61640: LD_VAR 0 2
61644: PUSH
61645: LD_VAR 0 4
61649: ARRAY
61650: ST_TO_ADDR
// dist := tdist ;
61651: LD_ADDR_VAR 0 5
61655: PUSH
61656: LD_VAR 0 6
61660: ST_TO_ADDR
// end ; end ;
61661: GO 61575
61663: POP
61664: POP
// result := hex ;
61665: LD_ADDR_VAR 0 3
61669: PUSH
61670: LD_VAR 0 8
61674: ST_TO_ADDR
// end ;
61675: LD_VAR 0 3
61679: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
61680: LD_INT 0
61682: PPUSH
61683: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
61684: LD_VAR 0 1
61688: NOT
61689: PUSH
61690: LD_VAR 0 1
61694: PUSH
61695: LD_INT 21
61697: PUSH
61698: LD_INT 2
61700: PUSH
61701: EMPTY
61702: LIST
61703: LIST
61704: PUSH
61705: LD_INT 23
61707: PUSH
61708: LD_INT 2
61710: PUSH
61711: EMPTY
61712: LIST
61713: LIST
61714: PUSH
61715: EMPTY
61716: LIST
61717: LIST
61718: PPUSH
61719: CALL_OW 69
61723: IN
61724: NOT
61725: OR
61726: IFFALSE 61730
// exit ;
61728: GO 61777
// for i = 1 to 3 do
61730: LD_ADDR_VAR 0 3
61734: PUSH
61735: DOUBLE
61736: LD_INT 1
61738: DEC
61739: ST_TO_ADDR
61740: LD_INT 3
61742: PUSH
61743: FOR_TO
61744: IFFALSE 61775
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
61746: LD_VAR 0 1
61750: PPUSH
61751: CALL_OW 250
61755: PPUSH
61756: LD_VAR 0 1
61760: PPUSH
61761: CALL_OW 251
61765: PPUSH
61766: LD_INT 1
61768: PPUSH
61769: CALL_OW 453
61773: GO 61743
61775: POP
61776: POP
// end ;
61777: LD_VAR 0 2
61781: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
61782: LD_INT 0
61784: PPUSH
61785: PPUSH
61786: PPUSH
61787: PPUSH
61788: PPUSH
61789: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
61790: LD_VAR 0 1
61794: NOT
61795: PUSH
61796: LD_VAR 0 2
61800: NOT
61801: OR
61802: PUSH
61803: LD_VAR 0 1
61807: PPUSH
61808: CALL_OW 314
61812: OR
61813: IFFALSE 61817
// exit ;
61815: GO 62284
// if GetLives ( i ) < 250 then
61817: LD_VAR 0 4
61821: PPUSH
61822: CALL_OW 256
61826: PUSH
61827: LD_INT 250
61829: LESS
61830: IFFALSE 61843
// begin ComAutodestruct ( i ) ;
61832: LD_VAR 0 4
61836: PPUSH
61837: CALL 61680 0 1
// exit ;
61841: GO 62284
// end ; x := GetX ( enemy_unit ) ;
61843: LD_ADDR_VAR 0 7
61847: PUSH
61848: LD_VAR 0 2
61852: PPUSH
61853: CALL_OW 250
61857: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
61858: LD_ADDR_VAR 0 8
61862: PUSH
61863: LD_VAR 0 2
61867: PPUSH
61868: CALL_OW 251
61872: ST_TO_ADDR
// if not x or not y then
61873: LD_VAR 0 7
61877: NOT
61878: PUSH
61879: LD_VAR 0 8
61883: NOT
61884: OR
61885: IFFALSE 61889
// exit ;
61887: GO 62284
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
61889: LD_ADDR_VAR 0 6
61893: PUSH
61894: LD_VAR 0 7
61898: PPUSH
61899: LD_INT 0
61901: PPUSH
61902: LD_INT 4
61904: PPUSH
61905: CALL_OW 272
61909: PUSH
61910: LD_VAR 0 8
61914: PPUSH
61915: LD_INT 0
61917: PPUSH
61918: LD_INT 4
61920: PPUSH
61921: CALL_OW 273
61925: PUSH
61926: EMPTY
61927: LIST
61928: LIST
61929: PUSH
61930: LD_VAR 0 7
61934: PPUSH
61935: LD_INT 1
61937: PPUSH
61938: LD_INT 4
61940: PPUSH
61941: CALL_OW 272
61945: PUSH
61946: LD_VAR 0 8
61950: PPUSH
61951: LD_INT 1
61953: PPUSH
61954: LD_INT 4
61956: PPUSH
61957: CALL_OW 273
61961: PUSH
61962: EMPTY
61963: LIST
61964: LIST
61965: PUSH
61966: LD_VAR 0 7
61970: PPUSH
61971: LD_INT 2
61973: PPUSH
61974: LD_INT 4
61976: PPUSH
61977: CALL_OW 272
61981: PUSH
61982: LD_VAR 0 8
61986: PPUSH
61987: LD_INT 2
61989: PPUSH
61990: LD_INT 4
61992: PPUSH
61993: CALL_OW 273
61997: PUSH
61998: EMPTY
61999: LIST
62000: LIST
62001: PUSH
62002: LD_VAR 0 7
62006: PPUSH
62007: LD_INT 3
62009: PPUSH
62010: LD_INT 4
62012: PPUSH
62013: CALL_OW 272
62017: PUSH
62018: LD_VAR 0 8
62022: PPUSH
62023: LD_INT 3
62025: PPUSH
62026: LD_INT 4
62028: PPUSH
62029: CALL_OW 273
62033: PUSH
62034: EMPTY
62035: LIST
62036: LIST
62037: PUSH
62038: LD_VAR 0 7
62042: PPUSH
62043: LD_INT 4
62045: PPUSH
62046: LD_INT 4
62048: PPUSH
62049: CALL_OW 272
62053: PUSH
62054: LD_VAR 0 8
62058: PPUSH
62059: LD_INT 4
62061: PPUSH
62062: LD_INT 4
62064: PPUSH
62065: CALL_OW 273
62069: PUSH
62070: EMPTY
62071: LIST
62072: LIST
62073: PUSH
62074: LD_VAR 0 7
62078: PPUSH
62079: LD_INT 5
62081: PPUSH
62082: LD_INT 4
62084: PPUSH
62085: CALL_OW 272
62089: PUSH
62090: LD_VAR 0 8
62094: PPUSH
62095: LD_INT 5
62097: PPUSH
62098: LD_INT 4
62100: PPUSH
62101: CALL_OW 273
62105: PUSH
62106: EMPTY
62107: LIST
62108: LIST
62109: PUSH
62110: EMPTY
62111: LIST
62112: LIST
62113: LIST
62114: LIST
62115: LIST
62116: LIST
62117: ST_TO_ADDR
// for i = tmp downto 1 do
62118: LD_ADDR_VAR 0 4
62122: PUSH
62123: DOUBLE
62124: LD_VAR 0 6
62128: INC
62129: ST_TO_ADDR
62130: LD_INT 1
62132: PUSH
62133: FOR_DOWNTO
62134: IFFALSE 62235
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
62136: LD_VAR 0 6
62140: PUSH
62141: LD_VAR 0 4
62145: ARRAY
62146: PUSH
62147: LD_INT 1
62149: ARRAY
62150: PPUSH
62151: LD_VAR 0 6
62155: PUSH
62156: LD_VAR 0 4
62160: ARRAY
62161: PUSH
62162: LD_INT 2
62164: ARRAY
62165: PPUSH
62166: CALL_OW 488
62170: NOT
62171: PUSH
62172: LD_VAR 0 6
62176: PUSH
62177: LD_VAR 0 4
62181: ARRAY
62182: PUSH
62183: LD_INT 1
62185: ARRAY
62186: PPUSH
62187: LD_VAR 0 6
62191: PUSH
62192: LD_VAR 0 4
62196: ARRAY
62197: PUSH
62198: LD_INT 2
62200: ARRAY
62201: PPUSH
62202: CALL_OW 428
62206: PUSH
62207: LD_INT 0
62209: NONEQUAL
62210: OR
62211: IFFALSE 62233
// tmp := Delete ( tmp , i ) ;
62213: LD_ADDR_VAR 0 6
62217: PUSH
62218: LD_VAR 0 6
62222: PPUSH
62223: LD_VAR 0 4
62227: PPUSH
62228: CALL_OW 3
62232: ST_TO_ADDR
62233: GO 62133
62235: POP
62236: POP
// j := GetClosestHex ( unit , tmp ) ;
62237: LD_ADDR_VAR 0 5
62241: PUSH
62242: LD_VAR 0 1
62246: PPUSH
62247: LD_VAR 0 6
62251: PPUSH
62252: CALL 61528 0 2
62256: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
62257: LD_VAR 0 1
62261: PPUSH
62262: LD_VAR 0 5
62266: PUSH
62267: LD_INT 1
62269: ARRAY
62270: PPUSH
62271: LD_VAR 0 5
62275: PUSH
62276: LD_INT 2
62278: ARRAY
62279: PPUSH
62280: CALL_OW 111
// end ;
62284: LD_VAR 0 3
62288: RET
// export function PrepareApemanSoldier ( ) ; begin
62289: LD_INT 0
62291: PPUSH
// uc_nation := 0 ;
62292: LD_ADDR_OWVAR 21
62296: PUSH
62297: LD_INT 0
62299: ST_TO_ADDR
// hc_sex := sex_male ;
62300: LD_ADDR_OWVAR 27
62304: PUSH
62305: LD_INT 1
62307: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
62308: LD_ADDR_OWVAR 28
62312: PUSH
62313: LD_INT 15
62315: ST_TO_ADDR
// hc_gallery :=  ;
62316: LD_ADDR_OWVAR 33
62320: PUSH
62321: LD_STRING 
62323: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
62324: LD_ADDR_OWVAR 31
62328: PUSH
62329: LD_INT 0
62331: PPUSH
62332: LD_INT 3
62334: PPUSH
62335: CALL_OW 12
62339: PUSH
62340: LD_INT 0
62342: PPUSH
62343: LD_INT 3
62345: PPUSH
62346: CALL_OW 12
62350: PUSH
62351: LD_INT 0
62353: PUSH
62354: LD_INT 0
62356: PUSH
62357: EMPTY
62358: LIST
62359: LIST
62360: LIST
62361: LIST
62362: ST_TO_ADDR
// end ;
62363: LD_VAR 0 1
62367: RET
// export function PrepareApemanEngineer ( ) ; begin
62368: LD_INT 0
62370: PPUSH
// uc_nation := 0 ;
62371: LD_ADDR_OWVAR 21
62375: PUSH
62376: LD_INT 0
62378: ST_TO_ADDR
// hc_sex := sex_male ;
62379: LD_ADDR_OWVAR 27
62383: PUSH
62384: LD_INT 1
62386: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
62387: LD_ADDR_OWVAR 28
62391: PUSH
62392: LD_INT 16
62394: ST_TO_ADDR
// hc_gallery :=  ;
62395: LD_ADDR_OWVAR 33
62399: PUSH
62400: LD_STRING 
62402: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
62403: LD_ADDR_OWVAR 31
62407: PUSH
62408: LD_INT 0
62410: PPUSH
62411: LD_INT 3
62413: PPUSH
62414: CALL_OW 12
62418: PUSH
62419: LD_INT 0
62421: PPUSH
62422: LD_INT 3
62424: PPUSH
62425: CALL_OW 12
62429: PUSH
62430: LD_INT 0
62432: PUSH
62433: LD_INT 0
62435: PUSH
62436: EMPTY
62437: LIST
62438: LIST
62439: LIST
62440: LIST
62441: ST_TO_ADDR
// end ;
62442: LD_VAR 0 1
62446: RET
// export function PrepareApeman ( agressivity ) ; begin
62447: LD_INT 0
62449: PPUSH
// uc_side := 0 ;
62450: LD_ADDR_OWVAR 20
62454: PUSH
62455: LD_INT 0
62457: ST_TO_ADDR
// uc_nation := 0 ;
62458: LD_ADDR_OWVAR 21
62462: PUSH
62463: LD_INT 0
62465: ST_TO_ADDR
// hc_sex := sex_male ;
62466: LD_ADDR_OWVAR 27
62470: PUSH
62471: LD_INT 1
62473: ST_TO_ADDR
// hc_class := class_apeman ;
62474: LD_ADDR_OWVAR 28
62478: PUSH
62479: LD_INT 12
62481: ST_TO_ADDR
// hc_gallery :=  ;
62482: LD_ADDR_OWVAR 33
62486: PUSH
62487: LD_STRING 
62489: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
62490: LD_ADDR_OWVAR 35
62494: PUSH
62495: LD_VAR 0 1
62499: NEG
62500: PPUSH
62501: LD_VAR 0 1
62505: PPUSH
62506: CALL_OW 12
62510: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
62511: LD_ADDR_OWVAR 31
62515: PUSH
62516: LD_INT 0
62518: PPUSH
62519: LD_INT 3
62521: PPUSH
62522: CALL_OW 12
62526: PUSH
62527: LD_INT 0
62529: PPUSH
62530: LD_INT 3
62532: PPUSH
62533: CALL_OW 12
62537: PUSH
62538: LD_INT 0
62540: PUSH
62541: LD_INT 0
62543: PUSH
62544: EMPTY
62545: LIST
62546: LIST
62547: LIST
62548: LIST
62549: ST_TO_ADDR
// end ;
62550: LD_VAR 0 2
62554: RET
// export function PrepareTiger ( agressivity ) ; begin
62555: LD_INT 0
62557: PPUSH
// uc_side := 0 ;
62558: LD_ADDR_OWVAR 20
62562: PUSH
62563: LD_INT 0
62565: ST_TO_ADDR
// uc_nation := 0 ;
62566: LD_ADDR_OWVAR 21
62570: PUSH
62571: LD_INT 0
62573: ST_TO_ADDR
// hc_class := class_tiger ;
62574: LD_ADDR_OWVAR 28
62578: PUSH
62579: LD_INT 14
62581: ST_TO_ADDR
// hc_gallery :=  ;
62582: LD_ADDR_OWVAR 33
62586: PUSH
62587: LD_STRING 
62589: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
62590: LD_ADDR_OWVAR 35
62594: PUSH
62595: LD_VAR 0 1
62599: NEG
62600: PPUSH
62601: LD_VAR 0 1
62605: PPUSH
62606: CALL_OW 12
62610: ST_TO_ADDR
// end ;
62611: LD_VAR 0 2
62615: RET
// export function PrepareEnchidna ( ) ; begin
62616: LD_INT 0
62618: PPUSH
// uc_side := 0 ;
62619: LD_ADDR_OWVAR 20
62623: PUSH
62624: LD_INT 0
62626: ST_TO_ADDR
// uc_nation := 0 ;
62627: LD_ADDR_OWVAR 21
62631: PUSH
62632: LD_INT 0
62634: ST_TO_ADDR
// hc_class := class_baggie ;
62635: LD_ADDR_OWVAR 28
62639: PUSH
62640: LD_INT 13
62642: ST_TO_ADDR
// hc_gallery :=  ;
62643: LD_ADDR_OWVAR 33
62647: PUSH
62648: LD_STRING 
62650: ST_TO_ADDR
// end ;
62651: LD_VAR 0 1
62655: RET
// export function PrepareFrog ( ) ; begin
62656: LD_INT 0
62658: PPUSH
// uc_side := 0 ;
62659: LD_ADDR_OWVAR 20
62663: PUSH
62664: LD_INT 0
62666: ST_TO_ADDR
// uc_nation := 0 ;
62667: LD_ADDR_OWVAR 21
62671: PUSH
62672: LD_INT 0
62674: ST_TO_ADDR
// hc_class := class_frog ;
62675: LD_ADDR_OWVAR 28
62679: PUSH
62680: LD_INT 19
62682: ST_TO_ADDR
// hc_gallery :=  ;
62683: LD_ADDR_OWVAR 33
62687: PUSH
62688: LD_STRING 
62690: ST_TO_ADDR
// end ;
62691: LD_VAR 0 1
62695: RET
// export function PrepareFish ( ) ; begin
62696: LD_INT 0
62698: PPUSH
// uc_side := 0 ;
62699: LD_ADDR_OWVAR 20
62703: PUSH
62704: LD_INT 0
62706: ST_TO_ADDR
// uc_nation := 0 ;
62707: LD_ADDR_OWVAR 21
62711: PUSH
62712: LD_INT 0
62714: ST_TO_ADDR
// hc_class := class_fish ;
62715: LD_ADDR_OWVAR 28
62719: PUSH
62720: LD_INT 20
62722: ST_TO_ADDR
// hc_gallery :=  ;
62723: LD_ADDR_OWVAR 33
62727: PUSH
62728: LD_STRING 
62730: ST_TO_ADDR
// end ;
62731: LD_VAR 0 1
62735: RET
// export function PrepareBird ( ) ; begin
62736: LD_INT 0
62738: PPUSH
// uc_side := 0 ;
62739: LD_ADDR_OWVAR 20
62743: PUSH
62744: LD_INT 0
62746: ST_TO_ADDR
// uc_nation := 0 ;
62747: LD_ADDR_OWVAR 21
62751: PUSH
62752: LD_INT 0
62754: ST_TO_ADDR
// hc_class := class_phororhacos ;
62755: LD_ADDR_OWVAR 28
62759: PUSH
62760: LD_INT 18
62762: ST_TO_ADDR
// hc_gallery :=  ;
62763: LD_ADDR_OWVAR 33
62767: PUSH
62768: LD_STRING 
62770: ST_TO_ADDR
// end ;
62771: LD_VAR 0 1
62775: RET
// export function PrepareHorse ( ) ; begin
62776: LD_INT 0
62778: PPUSH
// uc_side := 0 ;
62779: LD_ADDR_OWVAR 20
62783: PUSH
62784: LD_INT 0
62786: ST_TO_ADDR
// uc_nation := 0 ;
62787: LD_ADDR_OWVAR 21
62791: PUSH
62792: LD_INT 0
62794: ST_TO_ADDR
// hc_class := class_horse ;
62795: LD_ADDR_OWVAR 28
62799: PUSH
62800: LD_INT 21
62802: ST_TO_ADDR
// hc_gallery :=  ;
62803: LD_ADDR_OWVAR 33
62807: PUSH
62808: LD_STRING 
62810: ST_TO_ADDR
// end ;
62811: LD_VAR 0 1
62815: RET
// export function PrepareMastodont ( ) ; begin
62816: LD_INT 0
62818: PPUSH
// uc_side := 0 ;
62819: LD_ADDR_OWVAR 20
62823: PUSH
62824: LD_INT 0
62826: ST_TO_ADDR
// uc_nation := 0 ;
62827: LD_ADDR_OWVAR 21
62831: PUSH
62832: LD_INT 0
62834: ST_TO_ADDR
// vc_chassis := class_mastodont ;
62835: LD_ADDR_OWVAR 37
62839: PUSH
62840: LD_INT 31
62842: ST_TO_ADDR
// vc_control := control_rider ;
62843: LD_ADDR_OWVAR 38
62847: PUSH
62848: LD_INT 4
62850: ST_TO_ADDR
// end ;
62851: LD_VAR 0 1
62855: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
62856: LD_INT 0
62858: PPUSH
62859: PPUSH
62860: PPUSH
// uc_side = 0 ;
62861: LD_ADDR_OWVAR 20
62865: PUSH
62866: LD_INT 0
62868: ST_TO_ADDR
// uc_nation = 0 ;
62869: LD_ADDR_OWVAR 21
62873: PUSH
62874: LD_INT 0
62876: ST_TO_ADDR
// InitHc_All ( ) ;
62877: CALL_OW 584
// InitVc ;
62881: CALL_OW 20
// if mastodonts then
62885: LD_VAR 0 6
62889: IFFALSE 62956
// for i = 1 to mastodonts do
62891: LD_ADDR_VAR 0 11
62895: PUSH
62896: DOUBLE
62897: LD_INT 1
62899: DEC
62900: ST_TO_ADDR
62901: LD_VAR 0 6
62905: PUSH
62906: FOR_TO
62907: IFFALSE 62954
// begin vc_chassis := 31 ;
62909: LD_ADDR_OWVAR 37
62913: PUSH
62914: LD_INT 31
62916: ST_TO_ADDR
// vc_control := control_rider ;
62917: LD_ADDR_OWVAR 38
62921: PUSH
62922: LD_INT 4
62924: ST_TO_ADDR
// animal := CreateVehicle ;
62925: LD_ADDR_VAR 0 12
62929: PUSH
62930: CALL_OW 45
62934: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62935: LD_VAR 0 12
62939: PPUSH
62940: LD_VAR 0 8
62944: PPUSH
62945: LD_INT 0
62947: PPUSH
62948: CALL 65084 0 3
// end ;
62952: GO 62906
62954: POP
62955: POP
// if horses then
62956: LD_VAR 0 5
62960: IFFALSE 63027
// for i = 1 to horses do
62962: LD_ADDR_VAR 0 11
62966: PUSH
62967: DOUBLE
62968: LD_INT 1
62970: DEC
62971: ST_TO_ADDR
62972: LD_VAR 0 5
62976: PUSH
62977: FOR_TO
62978: IFFALSE 63025
// begin hc_class := 21 ;
62980: LD_ADDR_OWVAR 28
62984: PUSH
62985: LD_INT 21
62987: ST_TO_ADDR
// hc_gallery :=  ;
62988: LD_ADDR_OWVAR 33
62992: PUSH
62993: LD_STRING 
62995: ST_TO_ADDR
// animal := CreateHuman ;
62996: LD_ADDR_VAR 0 12
63000: PUSH
63001: CALL_OW 44
63005: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63006: LD_VAR 0 12
63010: PPUSH
63011: LD_VAR 0 8
63015: PPUSH
63016: LD_INT 0
63018: PPUSH
63019: CALL 65084 0 3
// end ;
63023: GO 62977
63025: POP
63026: POP
// if birds then
63027: LD_VAR 0 1
63031: IFFALSE 63098
// for i = 1 to birds do
63033: LD_ADDR_VAR 0 11
63037: PUSH
63038: DOUBLE
63039: LD_INT 1
63041: DEC
63042: ST_TO_ADDR
63043: LD_VAR 0 1
63047: PUSH
63048: FOR_TO
63049: IFFALSE 63096
// begin hc_class = 18 ;
63051: LD_ADDR_OWVAR 28
63055: PUSH
63056: LD_INT 18
63058: ST_TO_ADDR
// hc_gallery =  ;
63059: LD_ADDR_OWVAR 33
63063: PUSH
63064: LD_STRING 
63066: ST_TO_ADDR
// animal := CreateHuman ;
63067: LD_ADDR_VAR 0 12
63071: PUSH
63072: CALL_OW 44
63076: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63077: LD_VAR 0 12
63081: PPUSH
63082: LD_VAR 0 8
63086: PPUSH
63087: LD_INT 0
63089: PPUSH
63090: CALL 65084 0 3
// end ;
63094: GO 63048
63096: POP
63097: POP
// if tigers then
63098: LD_VAR 0 2
63102: IFFALSE 63186
// for i = 1 to tigers do
63104: LD_ADDR_VAR 0 11
63108: PUSH
63109: DOUBLE
63110: LD_INT 1
63112: DEC
63113: ST_TO_ADDR
63114: LD_VAR 0 2
63118: PUSH
63119: FOR_TO
63120: IFFALSE 63184
// begin hc_class = class_tiger ;
63122: LD_ADDR_OWVAR 28
63126: PUSH
63127: LD_INT 14
63129: ST_TO_ADDR
// hc_gallery =  ;
63130: LD_ADDR_OWVAR 33
63134: PUSH
63135: LD_STRING 
63137: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
63138: LD_ADDR_OWVAR 35
63142: PUSH
63143: LD_INT 7
63145: NEG
63146: PPUSH
63147: LD_INT 7
63149: PPUSH
63150: CALL_OW 12
63154: ST_TO_ADDR
// animal := CreateHuman ;
63155: LD_ADDR_VAR 0 12
63159: PUSH
63160: CALL_OW 44
63164: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63165: LD_VAR 0 12
63169: PPUSH
63170: LD_VAR 0 8
63174: PPUSH
63175: LD_INT 0
63177: PPUSH
63178: CALL 65084 0 3
// end ;
63182: GO 63119
63184: POP
63185: POP
// if apemans then
63186: LD_VAR 0 3
63190: IFFALSE 63313
// for i = 1 to apemans do
63192: LD_ADDR_VAR 0 11
63196: PUSH
63197: DOUBLE
63198: LD_INT 1
63200: DEC
63201: ST_TO_ADDR
63202: LD_VAR 0 3
63206: PUSH
63207: FOR_TO
63208: IFFALSE 63311
// begin hc_class = class_apeman ;
63210: LD_ADDR_OWVAR 28
63214: PUSH
63215: LD_INT 12
63217: ST_TO_ADDR
// hc_gallery =  ;
63218: LD_ADDR_OWVAR 33
63222: PUSH
63223: LD_STRING 
63225: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
63226: LD_ADDR_OWVAR 35
63230: PUSH
63231: LD_INT 2
63233: NEG
63234: PPUSH
63235: LD_INT 2
63237: PPUSH
63238: CALL_OW 12
63242: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
63243: LD_ADDR_OWVAR 31
63247: PUSH
63248: LD_INT 1
63250: PPUSH
63251: LD_INT 3
63253: PPUSH
63254: CALL_OW 12
63258: PUSH
63259: LD_INT 1
63261: PPUSH
63262: LD_INT 3
63264: PPUSH
63265: CALL_OW 12
63269: PUSH
63270: LD_INT 0
63272: PUSH
63273: LD_INT 0
63275: PUSH
63276: EMPTY
63277: LIST
63278: LIST
63279: LIST
63280: LIST
63281: ST_TO_ADDR
// animal := CreateHuman ;
63282: LD_ADDR_VAR 0 12
63286: PUSH
63287: CALL_OW 44
63291: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63292: LD_VAR 0 12
63296: PPUSH
63297: LD_VAR 0 8
63301: PPUSH
63302: LD_INT 0
63304: PPUSH
63305: CALL 65084 0 3
// end ;
63309: GO 63207
63311: POP
63312: POP
// if enchidnas then
63313: LD_VAR 0 4
63317: IFFALSE 63384
// for i = 1 to enchidnas do
63319: LD_ADDR_VAR 0 11
63323: PUSH
63324: DOUBLE
63325: LD_INT 1
63327: DEC
63328: ST_TO_ADDR
63329: LD_VAR 0 4
63333: PUSH
63334: FOR_TO
63335: IFFALSE 63382
// begin hc_class = 13 ;
63337: LD_ADDR_OWVAR 28
63341: PUSH
63342: LD_INT 13
63344: ST_TO_ADDR
// hc_gallery =  ;
63345: LD_ADDR_OWVAR 33
63349: PUSH
63350: LD_STRING 
63352: ST_TO_ADDR
// animal := CreateHuman ;
63353: LD_ADDR_VAR 0 12
63357: PUSH
63358: CALL_OW 44
63362: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63363: LD_VAR 0 12
63367: PPUSH
63368: LD_VAR 0 8
63372: PPUSH
63373: LD_INT 0
63375: PPUSH
63376: CALL 65084 0 3
// end ;
63380: GO 63334
63382: POP
63383: POP
// if fishes then
63384: LD_VAR 0 7
63388: IFFALSE 63455
// for i = 1 to fishes do
63390: LD_ADDR_VAR 0 11
63394: PUSH
63395: DOUBLE
63396: LD_INT 1
63398: DEC
63399: ST_TO_ADDR
63400: LD_VAR 0 7
63404: PUSH
63405: FOR_TO
63406: IFFALSE 63453
// begin hc_class = 20 ;
63408: LD_ADDR_OWVAR 28
63412: PUSH
63413: LD_INT 20
63415: ST_TO_ADDR
// hc_gallery =  ;
63416: LD_ADDR_OWVAR 33
63420: PUSH
63421: LD_STRING 
63423: ST_TO_ADDR
// animal := CreateHuman ;
63424: LD_ADDR_VAR 0 12
63428: PUSH
63429: CALL_OW 44
63433: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
63434: LD_VAR 0 12
63438: PPUSH
63439: LD_VAR 0 9
63443: PPUSH
63444: LD_INT 0
63446: PPUSH
63447: CALL 65084 0 3
// end ;
63451: GO 63405
63453: POP
63454: POP
// end ;
63455: LD_VAR 0 10
63459: RET
// export function WantHeal ( sci , unit ) ; begin
63460: LD_INT 0
63462: PPUSH
// if GetTaskList ( sci ) > 0 then
63463: LD_VAR 0 1
63467: PPUSH
63468: CALL_OW 437
63472: PUSH
63473: LD_INT 0
63475: GREATER
63476: IFFALSE 63546
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
63478: LD_VAR 0 1
63482: PPUSH
63483: CALL_OW 437
63487: PUSH
63488: LD_INT 1
63490: ARRAY
63491: PUSH
63492: LD_INT 1
63494: ARRAY
63495: PUSH
63496: LD_STRING l
63498: EQUAL
63499: PUSH
63500: LD_VAR 0 1
63504: PPUSH
63505: CALL_OW 437
63509: PUSH
63510: LD_INT 1
63512: ARRAY
63513: PUSH
63514: LD_INT 4
63516: ARRAY
63517: PUSH
63518: LD_VAR 0 2
63522: EQUAL
63523: AND
63524: IFFALSE 63536
// result := true else
63526: LD_ADDR_VAR 0 3
63530: PUSH
63531: LD_INT 1
63533: ST_TO_ADDR
63534: GO 63544
// result := false ;
63536: LD_ADDR_VAR 0 3
63540: PUSH
63541: LD_INT 0
63543: ST_TO_ADDR
// end else
63544: GO 63554
// result := false ;
63546: LD_ADDR_VAR 0 3
63550: PUSH
63551: LD_INT 0
63553: ST_TO_ADDR
// end ;
63554: LD_VAR 0 3
63558: RET
// export function HealTarget ( sci ) ; begin
63559: LD_INT 0
63561: PPUSH
// if not sci then
63562: LD_VAR 0 1
63566: NOT
63567: IFFALSE 63571
// exit ;
63569: GO 63636
// result := 0 ;
63571: LD_ADDR_VAR 0 2
63575: PUSH
63576: LD_INT 0
63578: ST_TO_ADDR
// if GetTaskList ( sci ) then
63579: LD_VAR 0 1
63583: PPUSH
63584: CALL_OW 437
63588: IFFALSE 63636
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
63590: LD_VAR 0 1
63594: PPUSH
63595: CALL_OW 437
63599: PUSH
63600: LD_INT 1
63602: ARRAY
63603: PUSH
63604: LD_INT 1
63606: ARRAY
63607: PUSH
63608: LD_STRING l
63610: EQUAL
63611: IFFALSE 63636
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
63613: LD_ADDR_VAR 0 2
63617: PUSH
63618: LD_VAR 0 1
63622: PPUSH
63623: CALL_OW 437
63627: PUSH
63628: LD_INT 1
63630: ARRAY
63631: PUSH
63632: LD_INT 4
63634: ARRAY
63635: ST_TO_ADDR
// end ;
63636: LD_VAR 0 2
63640: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
63641: LD_INT 0
63643: PPUSH
63644: PPUSH
63645: PPUSH
63646: PPUSH
// if not base_units then
63647: LD_VAR 0 1
63651: NOT
63652: IFFALSE 63656
// exit ;
63654: GO 63743
// result := false ;
63656: LD_ADDR_VAR 0 2
63660: PUSH
63661: LD_INT 0
63663: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
63664: LD_ADDR_VAR 0 5
63668: PUSH
63669: LD_VAR 0 1
63673: PPUSH
63674: LD_INT 21
63676: PUSH
63677: LD_INT 3
63679: PUSH
63680: EMPTY
63681: LIST
63682: LIST
63683: PPUSH
63684: CALL_OW 72
63688: ST_TO_ADDR
// if not tmp then
63689: LD_VAR 0 5
63693: NOT
63694: IFFALSE 63698
// exit ;
63696: GO 63743
// for i in tmp do
63698: LD_ADDR_VAR 0 3
63702: PUSH
63703: LD_VAR 0 5
63707: PUSH
63708: FOR_IN
63709: IFFALSE 63741
// begin result := EnemyInRange ( i , 22 ) ;
63711: LD_ADDR_VAR 0 2
63715: PUSH
63716: LD_VAR 0 3
63720: PPUSH
63721: LD_INT 22
63723: PPUSH
63724: CALL 61330 0 2
63728: ST_TO_ADDR
// if result then
63729: LD_VAR 0 2
63733: IFFALSE 63739
// exit ;
63735: POP
63736: POP
63737: GO 63743
// end ;
63739: GO 63708
63741: POP
63742: POP
// end ;
63743: LD_VAR 0 2
63747: RET
// export function FilterByTag ( units , tag ) ; begin
63748: LD_INT 0
63750: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
63751: LD_ADDR_VAR 0 3
63755: PUSH
63756: LD_VAR 0 1
63760: PPUSH
63761: LD_INT 120
63763: PUSH
63764: LD_VAR 0 2
63768: PUSH
63769: EMPTY
63770: LIST
63771: LIST
63772: PPUSH
63773: CALL_OW 72
63777: ST_TO_ADDR
// end ;
63778: LD_VAR 0 3
63782: RET
// export function IsDriver ( un ) ; begin
63783: LD_INT 0
63785: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
63786: LD_ADDR_VAR 0 2
63790: PUSH
63791: LD_VAR 0 1
63795: PUSH
63796: LD_INT 55
63798: PUSH
63799: EMPTY
63800: LIST
63801: PPUSH
63802: CALL_OW 69
63806: IN
63807: ST_TO_ADDR
// end ;
63808: LD_VAR 0 2
63812: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
63813: LD_INT 0
63815: PPUSH
63816: PPUSH
// list := [ ] ;
63817: LD_ADDR_VAR 0 5
63821: PUSH
63822: EMPTY
63823: ST_TO_ADDR
// case d of 0 :
63824: LD_VAR 0 3
63828: PUSH
63829: LD_INT 0
63831: DOUBLE
63832: EQUAL
63833: IFTRUE 63837
63835: GO 63970
63837: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
63838: LD_ADDR_VAR 0 5
63842: PUSH
63843: LD_VAR 0 1
63847: PUSH
63848: LD_INT 4
63850: MINUS
63851: PUSH
63852: LD_VAR 0 2
63856: PUSH
63857: LD_INT 4
63859: MINUS
63860: PUSH
63861: LD_INT 2
63863: PUSH
63864: EMPTY
63865: LIST
63866: LIST
63867: LIST
63868: PUSH
63869: LD_VAR 0 1
63873: PUSH
63874: LD_INT 3
63876: MINUS
63877: PUSH
63878: LD_VAR 0 2
63882: PUSH
63883: LD_INT 1
63885: PUSH
63886: EMPTY
63887: LIST
63888: LIST
63889: LIST
63890: PUSH
63891: LD_VAR 0 1
63895: PUSH
63896: LD_INT 4
63898: PLUS
63899: PUSH
63900: LD_VAR 0 2
63904: PUSH
63905: LD_INT 4
63907: PUSH
63908: EMPTY
63909: LIST
63910: LIST
63911: LIST
63912: PUSH
63913: LD_VAR 0 1
63917: PUSH
63918: LD_INT 3
63920: PLUS
63921: PUSH
63922: LD_VAR 0 2
63926: PUSH
63927: LD_INT 3
63929: PLUS
63930: PUSH
63931: LD_INT 5
63933: PUSH
63934: EMPTY
63935: LIST
63936: LIST
63937: LIST
63938: PUSH
63939: LD_VAR 0 1
63943: PUSH
63944: LD_VAR 0 2
63948: PUSH
63949: LD_INT 4
63951: PLUS
63952: PUSH
63953: LD_INT 0
63955: PUSH
63956: EMPTY
63957: LIST
63958: LIST
63959: LIST
63960: PUSH
63961: EMPTY
63962: LIST
63963: LIST
63964: LIST
63965: LIST
63966: LIST
63967: ST_TO_ADDR
// end ; 1 :
63968: GO 64668
63970: LD_INT 1
63972: DOUBLE
63973: EQUAL
63974: IFTRUE 63978
63976: GO 64111
63978: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
63979: LD_ADDR_VAR 0 5
63983: PUSH
63984: LD_VAR 0 1
63988: PUSH
63989: LD_VAR 0 2
63993: PUSH
63994: LD_INT 4
63996: MINUS
63997: PUSH
63998: LD_INT 3
64000: PUSH
64001: EMPTY
64002: LIST
64003: LIST
64004: LIST
64005: PUSH
64006: LD_VAR 0 1
64010: PUSH
64011: LD_INT 3
64013: MINUS
64014: PUSH
64015: LD_VAR 0 2
64019: PUSH
64020: LD_INT 3
64022: MINUS
64023: PUSH
64024: LD_INT 2
64026: PUSH
64027: EMPTY
64028: LIST
64029: LIST
64030: LIST
64031: PUSH
64032: LD_VAR 0 1
64036: PUSH
64037: LD_INT 4
64039: MINUS
64040: PUSH
64041: LD_VAR 0 2
64045: PUSH
64046: LD_INT 1
64048: PUSH
64049: EMPTY
64050: LIST
64051: LIST
64052: LIST
64053: PUSH
64054: LD_VAR 0 1
64058: PUSH
64059: LD_VAR 0 2
64063: PUSH
64064: LD_INT 3
64066: PLUS
64067: PUSH
64068: LD_INT 0
64070: PUSH
64071: EMPTY
64072: LIST
64073: LIST
64074: LIST
64075: PUSH
64076: LD_VAR 0 1
64080: PUSH
64081: LD_INT 4
64083: PLUS
64084: PUSH
64085: LD_VAR 0 2
64089: PUSH
64090: LD_INT 4
64092: PLUS
64093: PUSH
64094: LD_INT 5
64096: PUSH
64097: EMPTY
64098: LIST
64099: LIST
64100: LIST
64101: PUSH
64102: EMPTY
64103: LIST
64104: LIST
64105: LIST
64106: LIST
64107: LIST
64108: ST_TO_ADDR
// end ; 2 :
64109: GO 64668
64111: LD_INT 2
64113: DOUBLE
64114: EQUAL
64115: IFTRUE 64119
64117: GO 64248
64119: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
64120: LD_ADDR_VAR 0 5
64124: PUSH
64125: LD_VAR 0 1
64129: PUSH
64130: LD_VAR 0 2
64134: PUSH
64135: LD_INT 3
64137: MINUS
64138: PUSH
64139: LD_INT 3
64141: PUSH
64142: EMPTY
64143: LIST
64144: LIST
64145: LIST
64146: PUSH
64147: LD_VAR 0 1
64151: PUSH
64152: LD_INT 4
64154: PLUS
64155: PUSH
64156: LD_VAR 0 2
64160: PUSH
64161: LD_INT 4
64163: PUSH
64164: EMPTY
64165: LIST
64166: LIST
64167: LIST
64168: PUSH
64169: LD_VAR 0 1
64173: PUSH
64174: LD_VAR 0 2
64178: PUSH
64179: LD_INT 4
64181: PLUS
64182: PUSH
64183: LD_INT 0
64185: PUSH
64186: EMPTY
64187: LIST
64188: LIST
64189: LIST
64190: PUSH
64191: LD_VAR 0 1
64195: PUSH
64196: LD_INT 3
64198: MINUS
64199: PUSH
64200: LD_VAR 0 2
64204: PUSH
64205: LD_INT 1
64207: PUSH
64208: EMPTY
64209: LIST
64210: LIST
64211: LIST
64212: PUSH
64213: LD_VAR 0 1
64217: PUSH
64218: LD_INT 4
64220: MINUS
64221: PUSH
64222: LD_VAR 0 2
64226: PUSH
64227: LD_INT 4
64229: MINUS
64230: PUSH
64231: LD_INT 2
64233: PUSH
64234: EMPTY
64235: LIST
64236: LIST
64237: LIST
64238: PUSH
64239: EMPTY
64240: LIST
64241: LIST
64242: LIST
64243: LIST
64244: LIST
64245: ST_TO_ADDR
// end ; 3 :
64246: GO 64668
64248: LD_INT 3
64250: DOUBLE
64251: EQUAL
64252: IFTRUE 64256
64254: GO 64389
64256: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
64257: LD_ADDR_VAR 0 5
64261: PUSH
64262: LD_VAR 0 1
64266: PUSH
64267: LD_INT 3
64269: PLUS
64270: PUSH
64271: LD_VAR 0 2
64275: PUSH
64276: LD_INT 4
64278: PUSH
64279: EMPTY
64280: LIST
64281: LIST
64282: LIST
64283: PUSH
64284: LD_VAR 0 1
64288: PUSH
64289: LD_INT 4
64291: PLUS
64292: PUSH
64293: LD_VAR 0 2
64297: PUSH
64298: LD_INT 4
64300: PLUS
64301: PUSH
64302: LD_INT 5
64304: PUSH
64305: EMPTY
64306: LIST
64307: LIST
64308: LIST
64309: PUSH
64310: LD_VAR 0 1
64314: PUSH
64315: LD_INT 4
64317: MINUS
64318: PUSH
64319: LD_VAR 0 2
64323: PUSH
64324: LD_INT 1
64326: PUSH
64327: EMPTY
64328: LIST
64329: LIST
64330: LIST
64331: PUSH
64332: LD_VAR 0 1
64336: PUSH
64337: LD_VAR 0 2
64341: PUSH
64342: LD_INT 4
64344: MINUS
64345: PUSH
64346: LD_INT 3
64348: PUSH
64349: EMPTY
64350: LIST
64351: LIST
64352: LIST
64353: PUSH
64354: LD_VAR 0 1
64358: PUSH
64359: LD_INT 3
64361: MINUS
64362: PUSH
64363: LD_VAR 0 2
64367: PUSH
64368: LD_INT 3
64370: MINUS
64371: PUSH
64372: LD_INT 2
64374: PUSH
64375: EMPTY
64376: LIST
64377: LIST
64378: LIST
64379: PUSH
64380: EMPTY
64381: LIST
64382: LIST
64383: LIST
64384: LIST
64385: LIST
64386: ST_TO_ADDR
// end ; 4 :
64387: GO 64668
64389: LD_INT 4
64391: DOUBLE
64392: EQUAL
64393: IFTRUE 64397
64395: GO 64530
64397: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
64398: LD_ADDR_VAR 0 5
64402: PUSH
64403: LD_VAR 0 1
64407: PUSH
64408: LD_VAR 0 2
64412: PUSH
64413: LD_INT 4
64415: PLUS
64416: PUSH
64417: LD_INT 0
64419: PUSH
64420: EMPTY
64421: LIST
64422: LIST
64423: LIST
64424: PUSH
64425: LD_VAR 0 1
64429: PUSH
64430: LD_INT 3
64432: PLUS
64433: PUSH
64434: LD_VAR 0 2
64438: PUSH
64439: LD_INT 3
64441: PLUS
64442: PUSH
64443: LD_INT 5
64445: PUSH
64446: EMPTY
64447: LIST
64448: LIST
64449: LIST
64450: PUSH
64451: LD_VAR 0 1
64455: PUSH
64456: LD_INT 4
64458: PLUS
64459: PUSH
64460: LD_VAR 0 2
64464: PUSH
64465: LD_INT 4
64467: PUSH
64468: EMPTY
64469: LIST
64470: LIST
64471: LIST
64472: PUSH
64473: LD_VAR 0 1
64477: PUSH
64478: LD_VAR 0 2
64482: PUSH
64483: LD_INT 3
64485: MINUS
64486: PUSH
64487: LD_INT 3
64489: PUSH
64490: EMPTY
64491: LIST
64492: LIST
64493: LIST
64494: PUSH
64495: LD_VAR 0 1
64499: PUSH
64500: LD_INT 4
64502: MINUS
64503: PUSH
64504: LD_VAR 0 2
64508: PUSH
64509: LD_INT 4
64511: MINUS
64512: PUSH
64513: LD_INT 2
64515: PUSH
64516: EMPTY
64517: LIST
64518: LIST
64519: LIST
64520: PUSH
64521: EMPTY
64522: LIST
64523: LIST
64524: LIST
64525: LIST
64526: LIST
64527: ST_TO_ADDR
// end ; 5 :
64528: GO 64668
64530: LD_INT 5
64532: DOUBLE
64533: EQUAL
64534: IFTRUE 64538
64536: GO 64667
64538: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
64539: LD_ADDR_VAR 0 5
64543: PUSH
64544: LD_VAR 0 1
64548: PUSH
64549: LD_INT 4
64551: MINUS
64552: PUSH
64553: LD_VAR 0 2
64557: PUSH
64558: LD_INT 1
64560: PUSH
64561: EMPTY
64562: LIST
64563: LIST
64564: LIST
64565: PUSH
64566: LD_VAR 0 1
64570: PUSH
64571: LD_VAR 0 2
64575: PUSH
64576: LD_INT 4
64578: MINUS
64579: PUSH
64580: LD_INT 3
64582: PUSH
64583: EMPTY
64584: LIST
64585: LIST
64586: LIST
64587: PUSH
64588: LD_VAR 0 1
64592: PUSH
64593: LD_INT 4
64595: PLUS
64596: PUSH
64597: LD_VAR 0 2
64601: PUSH
64602: LD_INT 4
64604: PLUS
64605: PUSH
64606: LD_INT 5
64608: PUSH
64609: EMPTY
64610: LIST
64611: LIST
64612: LIST
64613: PUSH
64614: LD_VAR 0 1
64618: PUSH
64619: LD_INT 3
64621: PLUS
64622: PUSH
64623: LD_VAR 0 2
64627: PUSH
64628: LD_INT 4
64630: PUSH
64631: EMPTY
64632: LIST
64633: LIST
64634: LIST
64635: PUSH
64636: LD_VAR 0 1
64640: PUSH
64641: LD_VAR 0 2
64645: PUSH
64646: LD_INT 3
64648: PLUS
64649: PUSH
64650: LD_INT 0
64652: PUSH
64653: EMPTY
64654: LIST
64655: LIST
64656: LIST
64657: PUSH
64658: EMPTY
64659: LIST
64660: LIST
64661: LIST
64662: LIST
64663: LIST
64664: ST_TO_ADDR
// end ; end ;
64665: GO 64668
64667: POP
// result := list ;
64668: LD_ADDR_VAR 0 4
64672: PUSH
64673: LD_VAR 0 5
64677: ST_TO_ADDR
// end ;
64678: LD_VAR 0 4
64682: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
64683: LD_INT 0
64685: PPUSH
64686: PPUSH
64687: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
64688: LD_VAR 0 1
64692: NOT
64693: PUSH
64694: LD_VAR 0 2
64698: PUSH
64699: LD_INT 1
64701: PUSH
64702: LD_INT 2
64704: PUSH
64705: LD_INT 3
64707: PUSH
64708: LD_INT 4
64710: PUSH
64711: EMPTY
64712: LIST
64713: LIST
64714: LIST
64715: LIST
64716: IN
64717: NOT
64718: OR
64719: IFFALSE 64723
// exit ;
64721: GO 64806
// tmp := [ ] ;
64723: LD_ADDR_VAR 0 5
64727: PUSH
64728: EMPTY
64729: ST_TO_ADDR
// for i in units do
64730: LD_ADDR_VAR 0 4
64734: PUSH
64735: LD_VAR 0 1
64739: PUSH
64740: FOR_IN
64741: IFFALSE 64775
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
64743: LD_ADDR_VAR 0 5
64747: PUSH
64748: LD_VAR 0 5
64752: PPUSH
64753: LD_VAR 0 4
64757: PPUSH
64758: LD_VAR 0 2
64762: PPUSH
64763: CALL_OW 259
64767: PPUSH
64768: CALL 66167 0 2
64772: ST_TO_ADDR
64773: GO 64740
64775: POP
64776: POP
// if not tmp then
64777: LD_VAR 0 5
64781: NOT
64782: IFFALSE 64786
// exit ;
64784: GO 64806
// result := SortListByListDesc ( units , tmp ) ;
64786: LD_ADDR_VAR 0 3
64790: PUSH
64791: LD_VAR 0 1
64795: PPUSH
64796: LD_VAR 0 5
64800: PPUSH
64801: CALL_OW 77
64805: ST_TO_ADDR
// end ;
64806: LD_VAR 0 3
64810: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
64811: LD_INT 0
64813: PPUSH
64814: PPUSH
64815: PPUSH
// result := false ;
64816: LD_ADDR_VAR 0 3
64820: PUSH
64821: LD_INT 0
64823: ST_TO_ADDR
// if not building then
64824: LD_VAR 0 2
64828: NOT
64829: IFFALSE 64833
// exit ;
64831: GO 64971
// x := GetX ( building ) ;
64833: LD_ADDR_VAR 0 4
64837: PUSH
64838: LD_VAR 0 2
64842: PPUSH
64843: CALL_OW 250
64847: ST_TO_ADDR
// y := GetY ( building ) ;
64848: LD_ADDR_VAR 0 5
64852: PUSH
64853: LD_VAR 0 2
64857: PPUSH
64858: CALL_OW 251
64862: ST_TO_ADDR
// if not x or not y then
64863: LD_VAR 0 4
64867: NOT
64868: PUSH
64869: LD_VAR 0 5
64873: NOT
64874: OR
64875: IFFALSE 64879
// exit ;
64877: GO 64971
// if GetTaskList ( unit ) then
64879: LD_VAR 0 1
64883: PPUSH
64884: CALL_OW 437
64888: IFFALSE 64971
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
64890: LD_STRING e
64892: PUSH
64893: LD_VAR 0 1
64897: PPUSH
64898: CALL_OW 437
64902: PUSH
64903: LD_INT 1
64905: ARRAY
64906: PUSH
64907: LD_INT 1
64909: ARRAY
64910: EQUAL
64911: PUSH
64912: LD_VAR 0 4
64916: PUSH
64917: LD_VAR 0 1
64921: PPUSH
64922: CALL_OW 437
64926: PUSH
64927: LD_INT 1
64929: ARRAY
64930: PUSH
64931: LD_INT 2
64933: ARRAY
64934: EQUAL
64935: AND
64936: PUSH
64937: LD_VAR 0 5
64941: PUSH
64942: LD_VAR 0 1
64946: PPUSH
64947: CALL_OW 437
64951: PUSH
64952: LD_INT 1
64954: ARRAY
64955: PUSH
64956: LD_INT 3
64958: ARRAY
64959: EQUAL
64960: AND
64961: IFFALSE 64971
// result := true end ;
64963: LD_ADDR_VAR 0 3
64967: PUSH
64968: LD_INT 1
64970: ST_TO_ADDR
// end ;
64971: LD_VAR 0 3
64975: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
64976: LD_INT 0
64978: PPUSH
// result := false ;
64979: LD_ADDR_VAR 0 4
64983: PUSH
64984: LD_INT 0
64986: ST_TO_ADDR
// if GetTaskList ( unit ) then
64987: LD_VAR 0 1
64991: PPUSH
64992: CALL_OW 437
64996: IFFALSE 65079
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
64998: LD_STRING M
65000: PUSH
65001: LD_VAR 0 1
65005: PPUSH
65006: CALL_OW 437
65010: PUSH
65011: LD_INT 1
65013: ARRAY
65014: PUSH
65015: LD_INT 1
65017: ARRAY
65018: EQUAL
65019: PUSH
65020: LD_VAR 0 2
65024: PUSH
65025: LD_VAR 0 1
65029: PPUSH
65030: CALL_OW 437
65034: PUSH
65035: LD_INT 1
65037: ARRAY
65038: PUSH
65039: LD_INT 2
65041: ARRAY
65042: EQUAL
65043: AND
65044: PUSH
65045: LD_VAR 0 3
65049: PUSH
65050: LD_VAR 0 1
65054: PPUSH
65055: CALL_OW 437
65059: PUSH
65060: LD_INT 1
65062: ARRAY
65063: PUSH
65064: LD_INT 3
65066: ARRAY
65067: EQUAL
65068: AND
65069: IFFALSE 65079
// result := true ;
65071: LD_ADDR_VAR 0 4
65075: PUSH
65076: LD_INT 1
65078: ST_TO_ADDR
// end ; end ;
65079: LD_VAR 0 4
65083: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
65084: LD_INT 0
65086: PPUSH
65087: PPUSH
65088: PPUSH
65089: PPUSH
// if not unit or not area then
65090: LD_VAR 0 1
65094: NOT
65095: PUSH
65096: LD_VAR 0 2
65100: NOT
65101: OR
65102: IFFALSE 65106
// exit ;
65104: GO 65270
// tmp := AreaToList ( area , i ) ;
65106: LD_ADDR_VAR 0 6
65110: PUSH
65111: LD_VAR 0 2
65115: PPUSH
65116: LD_VAR 0 5
65120: PPUSH
65121: CALL_OW 517
65125: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
65126: LD_ADDR_VAR 0 5
65130: PUSH
65131: DOUBLE
65132: LD_INT 1
65134: DEC
65135: ST_TO_ADDR
65136: LD_VAR 0 6
65140: PUSH
65141: LD_INT 1
65143: ARRAY
65144: PUSH
65145: FOR_TO
65146: IFFALSE 65268
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
65148: LD_ADDR_VAR 0 7
65152: PUSH
65153: LD_VAR 0 6
65157: PUSH
65158: LD_INT 1
65160: ARRAY
65161: PUSH
65162: LD_VAR 0 5
65166: ARRAY
65167: PUSH
65168: LD_VAR 0 6
65172: PUSH
65173: LD_INT 2
65175: ARRAY
65176: PUSH
65177: LD_VAR 0 5
65181: ARRAY
65182: PUSH
65183: EMPTY
65184: LIST
65185: LIST
65186: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
65187: LD_VAR 0 7
65191: PUSH
65192: LD_INT 1
65194: ARRAY
65195: PPUSH
65196: LD_VAR 0 7
65200: PUSH
65201: LD_INT 2
65203: ARRAY
65204: PPUSH
65205: CALL_OW 428
65209: PUSH
65210: LD_INT 0
65212: EQUAL
65213: IFFALSE 65266
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
65215: LD_VAR 0 1
65219: PPUSH
65220: LD_VAR 0 7
65224: PUSH
65225: LD_INT 1
65227: ARRAY
65228: PPUSH
65229: LD_VAR 0 7
65233: PUSH
65234: LD_INT 2
65236: ARRAY
65237: PPUSH
65238: LD_VAR 0 3
65242: PPUSH
65243: CALL_OW 48
// result := IsPlaced ( unit ) ;
65247: LD_ADDR_VAR 0 4
65251: PUSH
65252: LD_VAR 0 1
65256: PPUSH
65257: CALL_OW 305
65261: ST_TO_ADDR
// exit ;
65262: POP
65263: POP
65264: GO 65270
// end ; end ;
65266: GO 65145
65268: POP
65269: POP
// end ;
65270: LD_VAR 0 4
65274: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
65275: LD_INT 0
65277: PPUSH
65278: PPUSH
65279: PPUSH
// if not side or side > 8 then
65280: LD_VAR 0 1
65284: NOT
65285: PUSH
65286: LD_VAR 0 1
65290: PUSH
65291: LD_INT 8
65293: GREATER
65294: OR
65295: IFFALSE 65299
// exit ;
65297: GO 65486
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
65299: LD_ADDR_VAR 0 4
65303: PUSH
65304: LD_INT 22
65306: PUSH
65307: LD_VAR 0 1
65311: PUSH
65312: EMPTY
65313: LIST
65314: LIST
65315: PUSH
65316: LD_INT 21
65318: PUSH
65319: LD_INT 3
65321: PUSH
65322: EMPTY
65323: LIST
65324: LIST
65325: PUSH
65326: EMPTY
65327: LIST
65328: LIST
65329: PPUSH
65330: CALL_OW 69
65334: ST_TO_ADDR
// if not tmp then
65335: LD_VAR 0 4
65339: NOT
65340: IFFALSE 65344
// exit ;
65342: GO 65486
// enable_addtolog := true ;
65344: LD_ADDR_OWVAR 81
65348: PUSH
65349: LD_INT 1
65351: ST_TO_ADDR
// AddToLog ( [ ) ;
65352: LD_STRING [
65354: PPUSH
65355: CALL_OW 561
// for i in tmp do
65359: LD_ADDR_VAR 0 3
65363: PUSH
65364: LD_VAR 0 4
65368: PUSH
65369: FOR_IN
65370: IFFALSE 65477
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
65372: LD_STRING [
65374: PUSH
65375: LD_VAR 0 3
65379: PPUSH
65380: CALL_OW 266
65384: STR
65385: PUSH
65386: LD_STRING , 
65388: STR
65389: PUSH
65390: LD_VAR 0 3
65394: PPUSH
65395: CALL_OW 250
65399: STR
65400: PUSH
65401: LD_STRING , 
65403: STR
65404: PUSH
65405: LD_VAR 0 3
65409: PPUSH
65410: CALL_OW 251
65414: STR
65415: PUSH
65416: LD_STRING , 
65418: STR
65419: PUSH
65420: LD_VAR 0 3
65424: PPUSH
65425: CALL_OW 254
65429: STR
65430: PUSH
65431: LD_STRING , 
65433: STR
65434: PUSH
65435: LD_VAR 0 3
65439: PPUSH
65440: LD_INT 1
65442: PPUSH
65443: CALL_OW 268
65447: STR
65448: PUSH
65449: LD_STRING , 
65451: STR
65452: PUSH
65453: LD_VAR 0 3
65457: PPUSH
65458: LD_INT 2
65460: PPUSH
65461: CALL_OW 268
65465: STR
65466: PUSH
65467: LD_STRING ],
65469: STR
65470: PPUSH
65471: CALL_OW 561
// end ;
65475: GO 65369
65477: POP
65478: POP
// AddToLog ( ]; ) ;
65479: LD_STRING ];
65481: PPUSH
65482: CALL_OW 561
// end ;
65486: LD_VAR 0 2
65490: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
65491: LD_INT 0
65493: PPUSH
65494: PPUSH
65495: PPUSH
65496: PPUSH
65497: PPUSH
// if not area or not rate or not max then
65498: LD_VAR 0 1
65502: NOT
65503: PUSH
65504: LD_VAR 0 2
65508: NOT
65509: OR
65510: PUSH
65511: LD_VAR 0 4
65515: NOT
65516: OR
65517: IFFALSE 65521
// exit ;
65519: GO 65710
// while 1 do
65521: LD_INT 1
65523: IFFALSE 65710
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
65525: LD_ADDR_VAR 0 9
65529: PUSH
65530: LD_VAR 0 1
65534: PPUSH
65535: LD_INT 1
65537: PPUSH
65538: CALL_OW 287
65542: PUSH
65543: LD_INT 10
65545: MUL
65546: ST_TO_ADDR
// r := rate / 10 ;
65547: LD_ADDR_VAR 0 7
65551: PUSH
65552: LD_VAR 0 2
65556: PUSH
65557: LD_INT 10
65559: DIVREAL
65560: ST_TO_ADDR
// time := 1 1$00 ;
65561: LD_ADDR_VAR 0 8
65565: PUSH
65566: LD_INT 2100
65568: ST_TO_ADDR
// if amount < min then
65569: LD_VAR 0 9
65573: PUSH
65574: LD_VAR 0 3
65578: LESS
65579: IFFALSE 65597
// r := r * 2 else
65581: LD_ADDR_VAR 0 7
65585: PUSH
65586: LD_VAR 0 7
65590: PUSH
65591: LD_INT 2
65593: MUL
65594: ST_TO_ADDR
65595: GO 65623
// if amount > max then
65597: LD_VAR 0 9
65601: PUSH
65602: LD_VAR 0 4
65606: GREATER
65607: IFFALSE 65623
// r := r / 2 ;
65609: LD_ADDR_VAR 0 7
65613: PUSH
65614: LD_VAR 0 7
65618: PUSH
65619: LD_INT 2
65621: DIVREAL
65622: ST_TO_ADDR
// time := time / r ;
65623: LD_ADDR_VAR 0 8
65627: PUSH
65628: LD_VAR 0 8
65632: PUSH
65633: LD_VAR 0 7
65637: DIVREAL
65638: ST_TO_ADDR
// if time < 0 then
65639: LD_VAR 0 8
65643: PUSH
65644: LD_INT 0
65646: LESS
65647: IFFALSE 65664
// time := time * - 1 ;
65649: LD_ADDR_VAR 0 8
65653: PUSH
65654: LD_VAR 0 8
65658: PUSH
65659: LD_INT 1
65661: NEG
65662: MUL
65663: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
65664: LD_VAR 0 8
65668: PUSH
65669: LD_INT 35
65671: PPUSH
65672: LD_INT 875
65674: PPUSH
65675: CALL_OW 12
65679: PLUS
65680: PPUSH
65681: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
65685: LD_INT 1
65687: PPUSH
65688: LD_INT 5
65690: PPUSH
65691: CALL_OW 12
65695: PPUSH
65696: LD_VAR 0 1
65700: PPUSH
65701: LD_INT 1
65703: PPUSH
65704: CALL_OW 55
// end ;
65708: GO 65521
// end ;
65710: LD_VAR 0 5
65714: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
65715: LD_INT 0
65717: PPUSH
65718: PPUSH
65719: PPUSH
65720: PPUSH
65721: PPUSH
65722: PPUSH
65723: PPUSH
65724: PPUSH
// if not turrets or not factories then
65725: LD_VAR 0 1
65729: NOT
65730: PUSH
65731: LD_VAR 0 2
65735: NOT
65736: OR
65737: IFFALSE 65741
// exit ;
65739: GO 66048
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
65741: LD_ADDR_VAR 0 10
65745: PUSH
65746: LD_INT 5
65748: PUSH
65749: LD_INT 6
65751: PUSH
65752: EMPTY
65753: LIST
65754: LIST
65755: PUSH
65756: LD_INT 2
65758: PUSH
65759: LD_INT 4
65761: PUSH
65762: EMPTY
65763: LIST
65764: LIST
65765: PUSH
65766: LD_INT 3
65768: PUSH
65769: LD_INT 5
65771: PUSH
65772: EMPTY
65773: LIST
65774: LIST
65775: PUSH
65776: EMPTY
65777: LIST
65778: LIST
65779: LIST
65780: PUSH
65781: LD_INT 24
65783: PUSH
65784: LD_INT 25
65786: PUSH
65787: EMPTY
65788: LIST
65789: LIST
65790: PUSH
65791: LD_INT 23
65793: PUSH
65794: LD_INT 27
65796: PUSH
65797: EMPTY
65798: LIST
65799: LIST
65800: PUSH
65801: EMPTY
65802: LIST
65803: LIST
65804: PUSH
65805: LD_INT 42
65807: PUSH
65808: LD_INT 43
65810: PUSH
65811: EMPTY
65812: LIST
65813: LIST
65814: PUSH
65815: LD_INT 44
65817: PUSH
65818: LD_INT 46
65820: PUSH
65821: EMPTY
65822: LIST
65823: LIST
65824: PUSH
65825: LD_INT 45
65827: PUSH
65828: LD_INT 47
65830: PUSH
65831: EMPTY
65832: LIST
65833: LIST
65834: PUSH
65835: EMPTY
65836: LIST
65837: LIST
65838: LIST
65839: PUSH
65840: EMPTY
65841: LIST
65842: LIST
65843: LIST
65844: ST_TO_ADDR
// result := [ ] ;
65845: LD_ADDR_VAR 0 3
65849: PUSH
65850: EMPTY
65851: ST_TO_ADDR
// for i in turrets do
65852: LD_ADDR_VAR 0 4
65856: PUSH
65857: LD_VAR 0 1
65861: PUSH
65862: FOR_IN
65863: IFFALSE 66046
// begin nat := GetNation ( i ) ;
65865: LD_ADDR_VAR 0 7
65869: PUSH
65870: LD_VAR 0 4
65874: PPUSH
65875: CALL_OW 248
65879: ST_TO_ADDR
// weapon := 0 ;
65880: LD_ADDR_VAR 0 8
65884: PUSH
65885: LD_INT 0
65887: ST_TO_ADDR
// if not nat then
65888: LD_VAR 0 7
65892: NOT
65893: IFFALSE 65897
// continue ;
65895: GO 65862
// for j in list [ nat ] do
65897: LD_ADDR_VAR 0 5
65901: PUSH
65902: LD_VAR 0 10
65906: PUSH
65907: LD_VAR 0 7
65911: ARRAY
65912: PUSH
65913: FOR_IN
65914: IFFALSE 65955
// if GetBWeapon ( i ) = j [ 1 ] then
65916: LD_VAR 0 4
65920: PPUSH
65921: CALL_OW 269
65925: PUSH
65926: LD_VAR 0 5
65930: PUSH
65931: LD_INT 1
65933: ARRAY
65934: EQUAL
65935: IFFALSE 65953
// begin weapon := j [ 2 ] ;
65937: LD_ADDR_VAR 0 8
65941: PUSH
65942: LD_VAR 0 5
65946: PUSH
65947: LD_INT 2
65949: ARRAY
65950: ST_TO_ADDR
// break ;
65951: GO 65955
// end ;
65953: GO 65913
65955: POP
65956: POP
// if not weapon then
65957: LD_VAR 0 8
65961: NOT
65962: IFFALSE 65966
// continue ;
65964: GO 65862
// for k in factories do
65966: LD_ADDR_VAR 0 6
65970: PUSH
65971: LD_VAR 0 2
65975: PUSH
65976: FOR_IN
65977: IFFALSE 66042
// begin weapons := AvailableWeaponList ( k ) ;
65979: LD_ADDR_VAR 0 9
65983: PUSH
65984: LD_VAR 0 6
65988: PPUSH
65989: CALL_OW 478
65993: ST_TO_ADDR
// if not weapons then
65994: LD_VAR 0 9
65998: NOT
65999: IFFALSE 66003
// continue ;
66001: GO 65976
// if weapon in weapons then
66003: LD_VAR 0 8
66007: PUSH
66008: LD_VAR 0 9
66012: IN
66013: IFFALSE 66040
// begin result := [ i , weapon ] ;
66015: LD_ADDR_VAR 0 3
66019: PUSH
66020: LD_VAR 0 4
66024: PUSH
66025: LD_VAR 0 8
66029: PUSH
66030: EMPTY
66031: LIST
66032: LIST
66033: ST_TO_ADDR
// exit ;
66034: POP
66035: POP
66036: POP
66037: POP
66038: GO 66048
// end ; end ;
66040: GO 65976
66042: POP
66043: POP
// end ;
66044: GO 65862
66046: POP
66047: POP
// end ;
66048: LD_VAR 0 3
66052: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
66053: LD_INT 0
66055: PPUSH
// if not side or side > 8 then
66056: LD_VAR 0 3
66060: NOT
66061: PUSH
66062: LD_VAR 0 3
66066: PUSH
66067: LD_INT 8
66069: GREATER
66070: OR
66071: IFFALSE 66075
// exit ;
66073: GO 66134
// if not range then
66075: LD_VAR 0 4
66079: NOT
66080: IFFALSE 66091
// range := - 12 ;
66082: LD_ADDR_VAR 0 4
66086: PUSH
66087: LD_INT 12
66089: NEG
66090: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
66091: LD_VAR 0 1
66095: PPUSH
66096: LD_VAR 0 2
66100: PPUSH
66101: LD_VAR 0 3
66105: PPUSH
66106: LD_VAR 0 4
66110: PPUSH
66111: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
66115: LD_VAR 0 1
66119: PPUSH
66120: LD_VAR 0 2
66124: PPUSH
66125: LD_VAR 0 3
66129: PPUSH
66130: CALL_OW 331
// end ;
66134: LD_VAR 0 5
66138: RET
// export function Video ( mode ) ; begin
66139: LD_INT 0
66141: PPUSH
// ingame_video = mode ;
66142: LD_ADDR_OWVAR 52
66146: PUSH
66147: LD_VAR 0 1
66151: ST_TO_ADDR
// interface_hidden = mode ;
66152: LD_ADDR_OWVAR 54
66156: PUSH
66157: LD_VAR 0 1
66161: ST_TO_ADDR
// end ;
66162: LD_VAR 0 2
66166: RET
// export function Join ( array , element ) ; begin
66167: LD_INT 0
66169: PPUSH
// result := Replace ( array , array + 1 , element ) ;
66170: LD_ADDR_VAR 0 3
66174: PUSH
66175: LD_VAR 0 1
66179: PPUSH
66180: LD_VAR 0 1
66184: PUSH
66185: LD_INT 1
66187: PLUS
66188: PPUSH
66189: LD_VAR 0 2
66193: PPUSH
66194: CALL_OW 1
66198: ST_TO_ADDR
// end ;
66199: LD_VAR 0 3
66203: RET
// export function JoinUnion ( array , element ) ; begin
66204: LD_INT 0
66206: PPUSH
// result := array union element ;
66207: LD_ADDR_VAR 0 3
66211: PUSH
66212: LD_VAR 0 1
66216: PUSH
66217: LD_VAR 0 2
66221: UNION
66222: ST_TO_ADDR
// end ;
66223: LD_VAR 0 3
66227: RET
// export function GetBehemoths ( side ) ; begin
66228: LD_INT 0
66230: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
66231: LD_ADDR_VAR 0 2
66235: PUSH
66236: LD_INT 22
66238: PUSH
66239: LD_VAR 0 1
66243: PUSH
66244: EMPTY
66245: LIST
66246: LIST
66247: PUSH
66248: LD_INT 31
66250: PUSH
66251: LD_INT 25
66253: PUSH
66254: EMPTY
66255: LIST
66256: LIST
66257: PUSH
66258: EMPTY
66259: LIST
66260: LIST
66261: PPUSH
66262: CALL_OW 69
66266: ST_TO_ADDR
// end ;
66267: LD_VAR 0 2
66271: RET
// export function Shuffle ( array ) ; var i , index ; begin
66272: LD_INT 0
66274: PPUSH
66275: PPUSH
66276: PPUSH
// result := [ ] ;
66277: LD_ADDR_VAR 0 2
66281: PUSH
66282: EMPTY
66283: ST_TO_ADDR
// if not array then
66284: LD_VAR 0 1
66288: NOT
66289: IFFALSE 66293
// exit ;
66291: GO 66392
// Randomize ;
66293: CALL_OW 10
// for i = array downto 1 do
66297: LD_ADDR_VAR 0 3
66301: PUSH
66302: DOUBLE
66303: LD_VAR 0 1
66307: INC
66308: ST_TO_ADDR
66309: LD_INT 1
66311: PUSH
66312: FOR_DOWNTO
66313: IFFALSE 66390
// begin index := rand ( 1 , array ) ;
66315: LD_ADDR_VAR 0 4
66319: PUSH
66320: LD_INT 1
66322: PPUSH
66323: LD_VAR 0 1
66327: PPUSH
66328: CALL_OW 12
66332: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
66333: LD_ADDR_VAR 0 2
66337: PUSH
66338: LD_VAR 0 2
66342: PPUSH
66343: LD_VAR 0 2
66347: PUSH
66348: LD_INT 1
66350: PLUS
66351: PPUSH
66352: LD_VAR 0 1
66356: PUSH
66357: LD_VAR 0 4
66361: ARRAY
66362: PPUSH
66363: CALL_OW 2
66367: ST_TO_ADDR
// array := Delete ( array , index ) ;
66368: LD_ADDR_VAR 0 1
66372: PUSH
66373: LD_VAR 0 1
66377: PPUSH
66378: LD_VAR 0 4
66382: PPUSH
66383: CALL_OW 3
66387: ST_TO_ADDR
// end ;
66388: GO 66312
66390: POP
66391: POP
// end ;
66392: LD_VAR 0 2
66396: RET
// export function GetBaseMaterials ( base ) ; begin
66397: LD_INT 0
66399: PPUSH
// result := [ 0 , 0 , 0 ] ;
66400: LD_ADDR_VAR 0 2
66404: PUSH
66405: LD_INT 0
66407: PUSH
66408: LD_INT 0
66410: PUSH
66411: LD_INT 0
66413: PUSH
66414: EMPTY
66415: LIST
66416: LIST
66417: LIST
66418: ST_TO_ADDR
// if not base then
66419: LD_VAR 0 1
66423: NOT
66424: IFFALSE 66428
// exit ;
66426: GO 66477
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
66428: LD_ADDR_VAR 0 2
66432: PUSH
66433: LD_VAR 0 1
66437: PPUSH
66438: LD_INT 1
66440: PPUSH
66441: CALL_OW 275
66445: PUSH
66446: LD_VAR 0 1
66450: PPUSH
66451: LD_INT 2
66453: PPUSH
66454: CALL_OW 275
66458: PUSH
66459: LD_VAR 0 1
66463: PPUSH
66464: LD_INT 3
66466: PPUSH
66467: CALL_OW 275
66471: PUSH
66472: EMPTY
66473: LIST
66474: LIST
66475: LIST
66476: ST_TO_ADDR
// end ;
66477: LD_VAR 0 2
66481: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
66482: LD_INT 0
66484: PPUSH
66485: PPUSH
// result := array ;
66486: LD_ADDR_VAR 0 3
66490: PUSH
66491: LD_VAR 0 1
66495: ST_TO_ADDR
// if size >= result then
66496: LD_VAR 0 2
66500: PUSH
66501: LD_VAR 0 3
66505: GREATEREQUAL
66506: IFFALSE 66510
// exit ;
66508: GO 66560
// if size then
66510: LD_VAR 0 2
66514: IFFALSE 66560
// for i := array downto size do
66516: LD_ADDR_VAR 0 4
66520: PUSH
66521: DOUBLE
66522: LD_VAR 0 1
66526: INC
66527: ST_TO_ADDR
66528: LD_VAR 0 2
66532: PUSH
66533: FOR_DOWNTO
66534: IFFALSE 66558
// result := Delete ( result , result ) ;
66536: LD_ADDR_VAR 0 3
66540: PUSH
66541: LD_VAR 0 3
66545: PPUSH
66546: LD_VAR 0 3
66550: PPUSH
66551: CALL_OW 3
66555: ST_TO_ADDR
66556: GO 66533
66558: POP
66559: POP
// end ;
66560: LD_VAR 0 3
66564: RET
// export function ComExit ( unit ) ; var tmp ; begin
66565: LD_INT 0
66567: PPUSH
66568: PPUSH
// if not IsInUnit ( unit ) then
66569: LD_VAR 0 1
66573: PPUSH
66574: CALL_OW 310
66578: NOT
66579: IFFALSE 66583
// exit ;
66581: GO 66643
// tmp := IsInUnit ( unit ) ;
66583: LD_ADDR_VAR 0 3
66587: PUSH
66588: LD_VAR 0 1
66592: PPUSH
66593: CALL_OW 310
66597: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
66598: LD_VAR 0 3
66602: PPUSH
66603: CALL_OW 247
66607: PUSH
66608: LD_INT 2
66610: EQUAL
66611: IFFALSE 66624
// ComExitVehicle ( unit ) else
66613: LD_VAR 0 1
66617: PPUSH
66618: CALL_OW 121
66622: GO 66633
// ComExitBuilding ( unit ) ;
66624: LD_VAR 0 1
66628: PPUSH
66629: CALL_OW 122
// result := tmp ;
66633: LD_ADDR_VAR 0 2
66637: PUSH
66638: LD_VAR 0 3
66642: ST_TO_ADDR
// end ;
66643: LD_VAR 0 2
66647: RET
// export function ComExitAll ( units ) ; var i ; begin
66648: LD_INT 0
66650: PPUSH
66651: PPUSH
// if not units then
66652: LD_VAR 0 1
66656: NOT
66657: IFFALSE 66661
// exit ;
66659: GO 66687
// for i in units do
66661: LD_ADDR_VAR 0 3
66665: PUSH
66666: LD_VAR 0 1
66670: PUSH
66671: FOR_IN
66672: IFFALSE 66685
// ComExit ( i ) ;
66674: LD_VAR 0 3
66678: PPUSH
66679: CALL 66565 0 1
66683: GO 66671
66685: POP
66686: POP
// end ;
66687: LD_VAR 0 2
66691: RET
// export function ResetHc ; begin
66692: LD_INT 0
66694: PPUSH
// InitHc ;
66695: CALL_OW 19
// hc_importance := 0 ;
66699: LD_ADDR_OWVAR 32
66703: PUSH
66704: LD_INT 0
66706: ST_TO_ADDR
// end ;
66707: LD_VAR 0 1
66711: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
66712: LD_INT 0
66714: PPUSH
66715: PPUSH
66716: PPUSH
// _x := ( x1 + x2 ) div 2 ;
66717: LD_ADDR_VAR 0 6
66721: PUSH
66722: LD_VAR 0 1
66726: PUSH
66727: LD_VAR 0 3
66731: PLUS
66732: PUSH
66733: LD_INT 2
66735: DIV
66736: ST_TO_ADDR
// if _x < 0 then
66737: LD_VAR 0 6
66741: PUSH
66742: LD_INT 0
66744: LESS
66745: IFFALSE 66762
// _x := _x * - 1 ;
66747: LD_ADDR_VAR 0 6
66751: PUSH
66752: LD_VAR 0 6
66756: PUSH
66757: LD_INT 1
66759: NEG
66760: MUL
66761: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
66762: LD_ADDR_VAR 0 7
66766: PUSH
66767: LD_VAR 0 2
66771: PUSH
66772: LD_VAR 0 4
66776: PLUS
66777: PUSH
66778: LD_INT 2
66780: DIV
66781: ST_TO_ADDR
// if _y < 0 then
66782: LD_VAR 0 7
66786: PUSH
66787: LD_INT 0
66789: LESS
66790: IFFALSE 66807
// _y := _y * - 1 ;
66792: LD_ADDR_VAR 0 7
66796: PUSH
66797: LD_VAR 0 7
66801: PUSH
66802: LD_INT 1
66804: NEG
66805: MUL
66806: ST_TO_ADDR
// result := [ _x , _y ] ;
66807: LD_ADDR_VAR 0 5
66811: PUSH
66812: LD_VAR 0 6
66816: PUSH
66817: LD_VAR 0 7
66821: PUSH
66822: EMPTY
66823: LIST
66824: LIST
66825: ST_TO_ADDR
// end ;
66826: LD_VAR 0 5
66830: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
66831: LD_INT 0
66833: PPUSH
66834: PPUSH
66835: PPUSH
66836: PPUSH
// task := GetTaskList ( unit ) ;
66837: LD_ADDR_VAR 0 7
66841: PUSH
66842: LD_VAR 0 1
66846: PPUSH
66847: CALL_OW 437
66851: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
66852: LD_VAR 0 7
66856: NOT
66857: PUSH
66858: LD_VAR 0 1
66862: PPUSH
66863: LD_VAR 0 2
66867: PPUSH
66868: CALL_OW 308
66872: NOT
66873: AND
66874: IFFALSE 66878
// exit ;
66876: GO 66996
// if IsInArea ( unit , area ) then
66878: LD_VAR 0 1
66882: PPUSH
66883: LD_VAR 0 2
66887: PPUSH
66888: CALL_OW 308
66892: IFFALSE 66910
// begin ComMoveToArea ( unit , goAway ) ;
66894: LD_VAR 0 1
66898: PPUSH
66899: LD_VAR 0 3
66903: PPUSH
66904: CALL_OW 113
// exit ;
66908: GO 66996
// end ; if task [ 1 ] [ 1 ] <> M then
66910: LD_VAR 0 7
66914: PUSH
66915: LD_INT 1
66917: ARRAY
66918: PUSH
66919: LD_INT 1
66921: ARRAY
66922: PUSH
66923: LD_STRING M
66925: NONEQUAL
66926: IFFALSE 66930
// exit ;
66928: GO 66996
// x := task [ 1 ] [ 2 ] ;
66930: LD_ADDR_VAR 0 5
66934: PUSH
66935: LD_VAR 0 7
66939: PUSH
66940: LD_INT 1
66942: ARRAY
66943: PUSH
66944: LD_INT 2
66946: ARRAY
66947: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
66948: LD_ADDR_VAR 0 6
66952: PUSH
66953: LD_VAR 0 7
66957: PUSH
66958: LD_INT 1
66960: ARRAY
66961: PUSH
66962: LD_INT 3
66964: ARRAY
66965: ST_TO_ADDR
// if InArea ( x , y , area ) then
66966: LD_VAR 0 5
66970: PPUSH
66971: LD_VAR 0 6
66975: PPUSH
66976: LD_VAR 0 2
66980: PPUSH
66981: CALL_OW 309
66985: IFFALSE 66996
// ComStop ( unit ) ;
66987: LD_VAR 0 1
66991: PPUSH
66992: CALL_OW 141
// end ;
66996: LD_VAR 0 4
67000: RET
// export function Abs ( value ) ; begin
67001: LD_INT 0
67003: PPUSH
// result := value ;
67004: LD_ADDR_VAR 0 2
67008: PUSH
67009: LD_VAR 0 1
67013: ST_TO_ADDR
// if value < 0 then
67014: LD_VAR 0 1
67018: PUSH
67019: LD_INT 0
67021: LESS
67022: IFFALSE 67039
// result := value * - 1 ;
67024: LD_ADDR_VAR 0 2
67028: PUSH
67029: LD_VAR 0 1
67033: PUSH
67034: LD_INT 1
67036: NEG
67037: MUL
67038: ST_TO_ADDR
// end ;
67039: LD_VAR 0 2
67043: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
67044: LD_INT 0
67046: PPUSH
67047: PPUSH
67048: PPUSH
67049: PPUSH
67050: PPUSH
67051: PPUSH
67052: PPUSH
67053: PPUSH
// if not unit or not building then
67054: LD_VAR 0 1
67058: NOT
67059: PUSH
67060: LD_VAR 0 2
67064: NOT
67065: OR
67066: IFFALSE 67070
// exit ;
67068: GO 67296
// x := GetX ( building ) ;
67070: LD_ADDR_VAR 0 4
67074: PUSH
67075: LD_VAR 0 2
67079: PPUSH
67080: CALL_OW 250
67084: ST_TO_ADDR
// y := GetY ( building ) ;
67085: LD_ADDR_VAR 0 6
67089: PUSH
67090: LD_VAR 0 2
67094: PPUSH
67095: CALL_OW 251
67099: ST_TO_ADDR
// d := GetDir ( building ) ;
67100: LD_ADDR_VAR 0 8
67104: PUSH
67105: LD_VAR 0 2
67109: PPUSH
67110: CALL_OW 254
67114: ST_TO_ADDR
// r := 4 ;
67115: LD_ADDR_VAR 0 9
67119: PUSH
67120: LD_INT 4
67122: ST_TO_ADDR
// for i := 1 to 5 do
67123: LD_ADDR_VAR 0 10
67127: PUSH
67128: DOUBLE
67129: LD_INT 1
67131: DEC
67132: ST_TO_ADDR
67133: LD_INT 5
67135: PUSH
67136: FOR_TO
67137: IFFALSE 67294
// begin _x := ShiftX ( x , d , r + i ) ;
67139: LD_ADDR_VAR 0 5
67143: PUSH
67144: LD_VAR 0 4
67148: PPUSH
67149: LD_VAR 0 8
67153: PPUSH
67154: LD_VAR 0 9
67158: PUSH
67159: LD_VAR 0 10
67163: PLUS
67164: PPUSH
67165: CALL_OW 272
67169: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
67170: LD_ADDR_VAR 0 7
67174: PUSH
67175: LD_VAR 0 6
67179: PPUSH
67180: LD_VAR 0 8
67184: PPUSH
67185: LD_VAR 0 9
67189: PUSH
67190: LD_VAR 0 10
67194: PLUS
67195: PPUSH
67196: CALL_OW 273
67200: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
67201: LD_VAR 0 5
67205: PPUSH
67206: LD_VAR 0 7
67210: PPUSH
67211: CALL_OW 488
67215: PUSH
67216: LD_VAR 0 5
67220: PPUSH
67221: LD_VAR 0 7
67225: PPUSH
67226: CALL_OW 428
67230: PPUSH
67231: CALL_OW 247
67235: PUSH
67236: LD_INT 3
67238: PUSH
67239: LD_INT 2
67241: PUSH
67242: EMPTY
67243: LIST
67244: LIST
67245: IN
67246: NOT
67247: AND
67248: IFFALSE 67292
// begin ComMoveXY ( unit , _x , _y ) ;
67250: LD_VAR 0 1
67254: PPUSH
67255: LD_VAR 0 5
67259: PPUSH
67260: LD_VAR 0 7
67264: PPUSH
67265: CALL_OW 111
// result := [ _x , _y ] ;
67269: LD_ADDR_VAR 0 3
67273: PUSH
67274: LD_VAR 0 5
67278: PUSH
67279: LD_VAR 0 7
67283: PUSH
67284: EMPTY
67285: LIST
67286: LIST
67287: ST_TO_ADDR
// exit ;
67288: POP
67289: POP
67290: GO 67296
// end ; end ;
67292: GO 67136
67294: POP
67295: POP
// end ;
67296: LD_VAR 0 3
67300: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
67301: LD_INT 0
67303: PPUSH
67304: PPUSH
67305: PPUSH
// result := 0 ;
67306: LD_ADDR_VAR 0 3
67310: PUSH
67311: LD_INT 0
67313: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
67314: LD_VAR 0 1
67318: PUSH
67319: LD_INT 0
67321: LESS
67322: PUSH
67323: LD_VAR 0 1
67327: PUSH
67328: LD_INT 8
67330: GREATER
67331: OR
67332: PUSH
67333: LD_VAR 0 2
67337: PUSH
67338: LD_INT 0
67340: LESS
67341: OR
67342: PUSH
67343: LD_VAR 0 2
67347: PUSH
67348: LD_INT 8
67350: GREATER
67351: OR
67352: IFFALSE 67356
// exit ;
67354: GO 67431
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
67356: LD_ADDR_VAR 0 4
67360: PUSH
67361: LD_INT 22
67363: PUSH
67364: LD_VAR 0 2
67368: PUSH
67369: EMPTY
67370: LIST
67371: LIST
67372: PPUSH
67373: CALL_OW 69
67377: PUSH
67378: FOR_IN
67379: IFFALSE 67429
// begin un := UnitShoot ( i ) ;
67381: LD_ADDR_VAR 0 5
67385: PUSH
67386: LD_VAR 0 4
67390: PPUSH
67391: CALL_OW 504
67395: ST_TO_ADDR
// if GetSide ( un ) = side1 then
67396: LD_VAR 0 5
67400: PPUSH
67401: CALL_OW 255
67405: PUSH
67406: LD_VAR 0 1
67410: EQUAL
67411: IFFALSE 67427
// begin result := un ;
67413: LD_ADDR_VAR 0 3
67417: PUSH
67418: LD_VAR 0 5
67422: ST_TO_ADDR
// exit ;
67423: POP
67424: POP
67425: GO 67431
// end ; end ;
67427: GO 67378
67429: POP
67430: POP
// end ;
67431: LD_VAR 0 3
67435: RET
// export function GetCargoBay ( units ) ; begin
67436: LD_INT 0
67438: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
67439: LD_ADDR_VAR 0 2
67443: PUSH
67444: LD_VAR 0 1
67448: PPUSH
67449: LD_INT 2
67451: PUSH
67452: LD_INT 34
67454: PUSH
67455: LD_INT 12
67457: PUSH
67458: EMPTY
67459: LIST
67460: LIST
67461: PUSH
67462: LD_INT 34
67464: PUSH
67465: LD_INT 51
67467: PUSH
67468: EMPTY
67469: LIST
67470: LIST
67471: PUSH
67472: LD_INT 34
67474: PUSH
67475: LD_INT 32
67477: PUSH
67478: EMPTY
67479: LIST
67480: LIST
67481: PUSH
67482: LD_INT 34
67484: PUSH
67485: LD_INT 89
67487: PUSH
67488: EMPTY
67489: LIST
67490: LIST
67491: PUSH
67492: EMPTY
67493: LIST
67494: LIST
67495: LIST
67496: LIST
67497: LIST
67498: PPUSH
67499: CALL_OW 72
67503: ST_TO_ADDR
// end ;
67504: LD_VAR 0 2
67508: RET
// export function Negate ( value ) ; begin
67509: LD_INT 0
67511: PPUSH
// result := not value ;
67512: LD_ADDR_VAR 0 2
67516: PUSH
67517: LD_VAR 0 1
67521: NOT
67522: ST_TO_ADDR
// end ;
67523: LD_VAR 0 2
67527: RET
// export function Inc ( value ) ; begin
67528: LD_INT 0
67530: PPUSH
// result := value + 1 ;
67531: LD_ADDR_VAR 0 2
67535: PUSH
67536: LD_VAR 0 1
67540: PUSH
67541: LD_INT 1
67543: PLUS
67544: ST_TO_ADDR
// end ;
67545: LD_VAR 0 2
67549: RET
// export function Dec ( value ) ; begin
67550: LD_INT 0
67552: PPUSH
// result := value - 1 ;
67553: LD_ADDR_VAR 0 2
67557: PUSH
67558: LD_VAR 0 1
67562: PUSH
67563: LD_INT 1
67565: MINUS
67566: ST_TO_ADDR
// end ;
67567: LD_VAR 0 2
67571: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
67572: LD_INT 0
67574: PPUSH
67575: PPUSH
67576: PPUSH
67577: PPUSH
67578: PPUSH
67579: PPUSH
67580: PPUSH
67581: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
67582: LD_VAR 0 1
67586: PPUSH
67587: LD_VAR 0 2
67591: PPUSH
67592: CALL_OW 488
67596: NOT
67597: PUSH
67598: LD_VAR 0 3
67602: PPUSH
67603: LD_VAR 0 4
67607: PPUSH
67608: CALL_OW 488
67612: NOT
67613: OR
67614: IFFALSE 67627
// begin result := - 1 ;
67616: LD_ADDR_VAR 0 5
67620: PUSH
67621: LD_INT 1
67623: NEG
67624: ST_TO_ADDR
// exit ;
67625: GO 67862
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
67627: LD_ADDR_VAR 0 12
67631: PUSH
67632: LD_VAR 0 1
67636: PPUSH
67637: LD_VAR 0 2
67641: PPUSH
67642: LD_VAR 0 3
67646: PPUSH
67647: LD_VAR 0 4
67651: PPUSH
67652: CALL 66712 0 4
67656: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
67657: LD_ADDR_VAR 0 11
67661: PUSH
67662: LD_VAR 0 1
67666: PPUSH
67667: LD_VAR 0 2
67671: PPUSH
67672: LD_VAR 0 12
67676: PUSH
67677: LD_INT 1
67679: ARRAY
67680: PPUSH
67681: LD_VAR 0 12
67685: PUSH
67686: LD_INT 2
67688: ARRAY
67689: PPUSH
67690: CALL_OW 298
67694: ST_TO_ADDR
// distance := 9999 ;
67695: LD_ADDR_VAR 0 10
67699: PUSH
67700: LD_INT 9999
67702: ST_TO_ADDR
// for i := 0 to 5 do
67703: LD_ADDR_VAR 0 6
67707: PUSH
67708: DOUBLE
67709: LD_INT 0
67711: DEC
67712: ST_TO_ADDR
67713: LD_INT 5
67715: PUSH
67716: FOR_TO
67717: IFFALSE 67860
// begin _x := ShiftX ( x1 , i , centerDist ) ;
67719: LD_ADDR_VAR 0 7
67723: PUSH
67724: LD_VAR 0 1
67728: PPUSH
67729: LD_VAR 0 6
67733: PPUSH
67734: LD_VAR 0 11
67738: PPUSH
67739: CALL_OW 272
67743: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
67744: LD_ADDR_VAR 0 8
67748: PUSH
67749: LD_VAR 0 2
67753: PPUSH
67754: LD_VAR 0 6
67758: PPUSH
67759: LD_VAR 0 11
67763: PPUSH
67764: CALL_OW 273
67768: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
67769: LD_VAR 0 7
67773: PPUSH
67774: LD_VAR 0 8
67778: PPUSH
67779: CALL_OW 488
67783: NOT
67784: IFFALSE 67788
// continue ;
67786: GO 67716
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
67788: LD_ADDR_VAR 0 9
67792: PUSH
67793: LD_VAR 0 12
67797: PUSH
67798: LD_INT 1
67800: ARRAY
67801: PPUSH
67802: LD_VAR 0 12
67806: PUSH
67807: LD_INT 2
67809: ARRAY
67810: PPUSH
67811: LD_VAR 0 7
67815: PPUSH
67816: LD_VAR 0 8
67820: PPUSH
67821: CALL_OW 298
67825: ST_TO_ADDR
// if tmp < distance then
67826: LD_VAR 0 9
67830: PUSH
67831: LD_VAR 0 10
67835: LESS
67836: IFFALSE 67858
// begin result := i ;
67838: LD_ADDR_VAR 0 5
67842: PUSH
67843: LD_VAR 0 6
67847: ST_TO_ADDR
// distance := tmp ;
67848: LD_ADDR_VAR 0 10
67852: PUSH
67853: LD_VAR 0 9
67857: ST_TO_ADDR
// end ; end ;
67858: GO 67716
67860: POP
67861: POP
// end ;
67862: LD_VAR 0 5
67866: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
67867: LD_INT 0
67869: PPUSH
67870: PPUSH
// if not driver or not IsInUnit ( driver ) then
67871: LD_VAR 0 1
67875: NOT
67876: PUSH
67877: LD_VAR 0 1
67881: PPUSH
67882: CALL_OW 310
67886: NOT
67887: OR
67888: IFFALSE 67892
// exit ;
67890: GO 67982
// vehicle := IsInUnit ( driver ) ;
67892: LD_ADDR_VAR 0 3
67896: PUSH
67897: LD_VAR 0 1
67901: PPUSH
67902: CALL_OW 310
67906: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
67907: LD_VAR 0 1
67911: PPUSH
67912: LD_STRING \
67914: PUSH
67915: LD_INT 0
67917: PUSH
67918: LD_INT 0
67920: PUSH
67921: LD_INT 0
67923: PUSH
67924: LD_INT 0
67926: PUSH
67927: LD_INT 0
67929: PUSH
67930: LD_INT 0
67932: PUSH
67933: EMPTY
67934: LIST
67935: LIST
67936: LIST
67937: LIST
67938: LIST
67939: LIST
67940: LIST
67941: PUSH
67942: LD_STRING E
67944: PUSH
67945: LD_INT 0
67947: PUSH
67948: LD_INT 0
67950: PUSH
67951: LD_VAR 0 3
67955: PUSH
67956: LD_INT 0
67958: PUSH
67959: LD_INT 0
67961: PUSH
67962: LD_INT 0
67964: PUSH
67965: EMPTY
67966: LIST
67967: LIST
67968: LIST
67969: LIST
67970: LIST
67971: LIST
67972: LIST
67973: PUSH
67974: EMPTY
67975: LIST
67976: LIST
67977: PPUSH
67978: CALL_OW 446
// end ;
67982: LD_VAR 0 2
67986: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
67987: LD_INT 0
67989: PPUSH
67990: PPUSH
// if not driver or not IsInUnit ( driver ) then
67991: LD_VAR 0 1
67995: NOT
67996: PUSH
67997: LD_VAR 0 1
68001: PPUSH
68002: CALL_OW 310
68006: NOT
68007: OR
68008: IFFALSE 68012
// exit ;
68010: GO 68102
// vehicle := IsInUnit ( driver ) ;
68012: LD_ADDR_VAR 0 3
68016: PUSH
68017: LD_VAR 0 1
68021: PPUSH
68022: CALL_OW 310
68026: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
68027: LD_VAR 0 1
68031: PPUSH
68032: LD_STRING \
68034: PUSH
68035: LD_INT 0
68037: PUSH
68038: LD_INT 0
68040: PUSH
68041: LD_INT 0
68043: PUSH
68044: LD_INT 0
68046: PUSH
68047: LD_INT 0
68049: PUSH
68050: LD_INT 0
68052: PUSH
68053: EMPTY
68054: LIST
68055: LIST
68056: LIST
68057: LIST
68058: LIST
68059: LIST
68060: LIST
68061: PUSH
68062: LD_STRING E
68064: PUSH
68065: LD_INT 0
68067: PUSH
68068: LD_INT 0
68070: PUSH
68071: LD_VAR 0 3
68075: PUSH
68076: LD_INT 0
68078: PUSH
68079: LD_INT 0
68081: PUSH
68082: LD_INT 0
68084: PUSH
68085: EMPTY
68086: LIST
68087: LIST
68088: LIST
68089: LIST
68090: LIST
68091: LIST
68092: LIST
68093: PUSH
68094: EMPTY
68095: LIST
68096: LIST
68097: PPUSH
68098: CALL_OW 447
// end ;
68102: LD_VAR 0 2
68106: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
68107: LD_INT 0
68109: PPUSH
68110: PPUSH
68111: PPUSH
// tmp := [ ] ;
68112: LD_ADDR_VAR 0 5
68116: PUSH
68117: EMPTY
68118: ST_TO_ADDR
// for i in units do
68119: LD_ADDR_VAR 0 4
68123: PUSH
68124: LD_VAR 0 1
68128: PUSH
68129: FOR_IN
68130: IFFALSE 68168
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
68132: LD_ADDR_VAR 0 5
68136: PUSH
68137: LD_VAR 0 5
68141: PPUSH
68142: LD_VAR 0 5
68146: PUSH
68147: LD_INT 1
68149: PLUS
68150: PPUSH
68151: LD_VAR 0 4
68155: PPUSH
68156: CALL_OW 256
68160: PPUSH
68161: CALL_OW 2
68165: ST_TO_ADDR
68166: GO 68129
68168: POP
68169: POP
// if not tmp then
68170: LD_VAR 0 5
68174: NOT
68175: IFFALSE 68179
// exit ;
68177: GO 68227
// if asc then
68179: LD_VAR 0 2
68183: IFFALSE 68207
// result := SortListByListAsc ( units , tmp ) else
68185: LD_ADDR_VAR 0 3
68189: PUSH
68190: LD_VAR 0 1
68194: PPUSH
68195: LD_VAR 0 5
68199: PPUSH
68200: CALL_OW 76
68204: ST_TO_ADDR
68205: GO 68227
// result := SortListByListDesc ( units , tmp ) ;
68207: LD_ADDR_VAR 0 3
68211: PUSH
68212: LD_VAR 0 1
68216: PPUSH
68217: LD_VAR 0 5
68221: PPUSH
68222: CALL_OW 77
68226: ST_TO_ADDR
// end ;
68227: LD_VAR 0 3
68231: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
68232: LD_INT 0
68234: PPUSH
68235: PPUSH
// task := GetTaskList ( mech ) ;
68236: LD_ADDR_VAR 0 4
68240: PUSH
68241: LD_VAR 0 1
68245: PPUSH
68246: CALL_OW 437
68250: ST_TO_ADDR
// if not task then
68251: LD_VAR 0 4
68255: NOT
68256: IFFALSE 68260
// exit ;
68258: GO 68302
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
68260: LD_ADDR_VAR 0 3
68264: PUSH
68265: LD_VAR 0 4
68269: PUSH
68270: LD_INT 1
68272: ARRAY
68273: PUSH
68274: LD_INT 1
68276: ARRAY
68277: PUSH
68278: LD_STRING r
68280: EQUAL
68281: PUSH
68282: LD_VAR 0 4
68286: PUSH
68287: LD_INT 1
68289: ARRAY
68290: PUSH
68291: LD_INT 4
68293: ARRAY
68294: PUSH
68295: LD_VAR 0 2
68299: EQUAL
68300: AND
68301: ST_TO_ADDR
// end ;
68302: LD_VAR 0 3
68306: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
68307: LD_INT 0
68309: PPUSH
// SetDir ( unit , d ) ;
68310: LD_VAR 0 1
68314: PPUSH
68315: LD_VAR 0 4
68319: PPUSH
68320: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
68324: LD_VAR 0 1
68328: PPUSH
68329: LD_VAR 0 2
68333: PPUSH
68334: LD_VAR 0 3
68338: PPUSH
68339: LD_VAR 0 5
68343: PPUSH
68344: CALL_OW 48
// end ;
68348: LD_VAR 0 6
68352: RET
// export function ToNaturalNumber ( number ) ; begin
68353: LD_INT 0
68355: PPUSH
// result := number div 1 ;
68356: LD_ADDR_VAR 0 2
68360: PUSH
68361: LD_VAR 0 1
68365: PUSH
68366: LD_INT 1
68368: DIV
68369: ST_TO_ADDR
// if number < 0 then
68370: LD_VAR 0 1
68374: PUSH
68375: LD_INT 0
68377: LESS
68378: IFFALSE 68388
// result := 0 ;
68380: LD_ADDR_VAR 0 2
68384: PUSH
68385: LD_INT 0
68387: ST_TO_ADDR
// end ;
68388: LD_VAR 0 2
68392: RET
// export function SortByClass ( units , class ) ; var un ; begin
68393: LD_INT 0
68395: PPUSH
68396: PPUSH
// if not units or not class then
68397: LD_VAR 0 1
68401: NOT
68402: PUSH
68403: LD_VAR 0 2
68407: NOT
68408: OR
68409: IFFALSE 68413
// exit ;
68411: GO 68508
// result := [ ] ;
68413: LD_ADDR_VAR 0 3
68417: PUSH
68418: EMPTY
68419: ST_TO_ADDR
// for un in units do
68420: LD_ADDR_VAR 0 4
68424: PUSH
68425: LD_VAR 0 1
68429: PUSH
68430: FOR_IN
68431: IFFALSE 68506
// if GetClass ( un ) = class then
68433: LD_VAR 0 4
68437: PPUSH
68438: CALL_OW 257
68442: PUSH
68443: LD_VAR 0 2
68447: EQUAL
68448: IFFALSE 68475
// result := Insert ( result , 1 , un ) else
68450: LD_ADDR_VAR 0 3
68454: PUSH
68455: LD_VAR 0 3
68459: PPUSH
68460: LD_INT 1
68462: PPUSH
68463: LD_VAR 0 4
68467: PPUSH
68468: CALL_OW 2
68472: ST_TO_ADDR
68473: GO 68504
// result := Replace ( result , result + 1 , un ) ;
68475: LD_ADDR_VAR 0 3
68479: PUSH
68480: LD_VAR 0 3
68484: PPUSH
68485: LD_VAR 0 3
68489: PUSH
68490: LD_INT 1
68492: PLUS
68493: PPUSH
68494: LD_VAR 0 4
68498: PPUSH
68499: CALL_OW 1
68503: ST_TO_ADDR
68504: GO 68430
68506: POP
68507: POP
// end ;
68508: LD_VAR 0 3
68512: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
68513: LD_INT 0
68515: PPUSH
68516: PPUSH
68517: PPUSH
68518: PPUSH
68519: PPUSH
68520: PPUSH
68521: PPUSH
// result := [ ] ;
68522: LD_ADDR_VAR 0 4
68526: PUSH
68527: EMPTY
68528: ST_TO_ADDR
// if x - r < 0 then
68529: LD_VAR 0 1
68533: PUSH
68534: LD_VAR 0 3
68538: MINUS
68539: PUSH
68540: LD_INT 0
68542: LESS
68543: IFFALSE 68555
// min_x := 0 else
68545: LD_ADDR_VAR 0 8
68549: PUSH
68550: LD_INT 0
68552: ST_TO_ADDR
68553: GO 68571
// min_x := x - r ;
68555: LD_ADDR_VAR 0 8
68559: PUSH
68560: LD_VAR 0 1
68564: PUSH
68565: LD_VAR 0 3
68569: MINUS
68570: ST_TO_ADDR
// if y - r < 0 then
68571: LD_VAR 0 2
68575: PUSH
68576: LD_VAR 0 3
68580: MINUS
68581: PUSH
68582: LD_INT 0
68584: LESS
68585: IFFALSE 68597
// min_y := 0 else
68587: LD_ADDR_VAR 0 7
68591: PUSH
68592: LD_INT 0
68594: ST_TO_ADDR
68595: GO 68613
// min_y := y - r ;
68597: LD_ADDR_VAR 0 7
68601: PUSH
68602: LD_VAR 0 2
68606: PUSH
68607: LD_VAR 0 3
68611: MINUS
68612: ST_TO_ADDR
// max_x := x + r ;
68613: LD_ADDR_VAR 0 9
68617: PUSH
68618: LD_VAR 0 1
68622: PUSH
68623: LD_VAR 0 3
68627: PLUS
68628: ST_TO_ADDR
// max_y := y + r ;
68629: LD_ADDR_VAR 0 10
68633: PUSH
68634: LD_VAR 0 2
68638: PUSH
68639: LD_VAR 0 3
68643: PLUS
68644: ST_TO_ADDR
// for _x = min_x to max_x do
68645: LD_ADDR_VAR 0 5
68649: PUSH
68650: DOUBLE
68651: LD_VAR 0 8
68655: DEC
68656: ST_TO_ADDR
68657: LD_VAR 0 9
68661: PUSH
68662: FOR_TO
68663: IFFALSE 68764
// for _y = min_y to max_y do
68665: LD_ADDR_VAR 0 6
68669: PUSH
68670: DOUBLE
68671: LD_VAR 0 7
68675: DEC
68676: ST_TO_ADDR
68677: LD_VAR 0 10
68681: PUSH
68682: FOR_TO
68683: IFFALSE 68760
// begin if not ValidHex ( _x , _y ) then
68685: LD_VAR 0 5
68689: PPUSH
68690: LD_VAR 0 6
68694: PPUSH
68695: CALL_OW 488
68699: NOT
68700: IFFALSE 68704
// continue ;
68702: GO 68682
// if GetResourceTypeXY ( _x , _y ) then
68704: LD_VAR 0 5
68708: PPUSH
68709: LD_VAR 0 6
68713: PPUSH
68714: CALL_OW 283
68718: IFFALSE 68758
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
68720: LD_ADDR_VAR 0 4
68724: PUSH
68725: LD_VAR 0 4
68729: PPUSH
68730: LD_VAR 0 4
68734: PUSH
68735: LD_INT 1
68737: PLUS
68738: PPUSH
68739: LD_VAR 0 5
68743: PUSH
68744: LD_VAR 0 6
68748: PUSH
68749: EMPTY
68750: LIST
68751: LIST
68752: PPUSH
68753: CALL_OW 1
68757: ST_TO_ADDR
// end ;
68758: GO 68682
68760: POP
68761: POP
68762: GO 68662
68764: POP
68765: POP
// end ;
68766: LD_VAR 0 4
68770: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
68771: LD_INT 0
68773: PPUSH
68774: PPUSH
68775: PPUSH
68776: PPUSH
68777: PPUSH
68778: PPUSH
68779: PPUSH
68780: PPUSH
// if not units then
68781: LD_VAR 0 1
68785: NOT
68786: IFFALSE 68790
// exit ;
68788: GO 69314
// result := UnitFilter ( units , [ f_ok ] ) ;
68790: LD_ADDR_VAR 0 3
68794: PUSH
68795: LD_VAR 0 1
68799: PPUSH
68800: LD_INT 50
68802: PUSH
68803: EMPTY
68804: LIST
68805: PPUSH
68806: CALL_OW 72
68810: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
68811: LD_ADDR_VAR 0 8
68815: PUSH
68816: LD_VAR 0 1
68820: PUSH
68821: LD_INT 1
68823: ARRAY
68824: PPUSH
68825: CALL_OW 255
68829: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
68830: LD_ADDR_VAR 0 10
68834: PUSH
68835: LD_INT 29
68837: PUSH
68838: LD_INT 91
68840: PUSH
68841: LD_INT 49
68843: PUSH
68844: EMPTY
68845: LIST
68846: LIST
68847: LIST
68848: ST_TO_ADDR
// if not result then
68849: LD_VAR 0 3
68853: NOT
68854: IFFALSE 68858
// exit ;
68856: GO 69314
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
68858: LD_ADDR_VAR 0 5
68862: PUSH
68863: LD_INT 81
68865: PUSH
68866: LD_VAR 0 8
68870: PUSH
68871: EMPTY
68872: LIST
68873: LIST
68874: PPUSH
68875: CALL_OW 69
68879: ST_TO_ADDR
// for i in result do
68880: LD_ADDR_VAR 0 4
68884: PUSH
68885: LD_VAR 0 3
68889: PUSH
68890: FOR_IN
68891: IFFALSE 69312
// begin tag := GetTag ( i ) + 1 ;
68893: LD_ADDR_VAR 0 9
68897: PUSH
68898: LD_VAR 0 4
68902: PPUSH
68903: CALL_OW 110
68907: PUSH
68908: LD_INT 1
68910: PLUS
68911: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
68912: LD_ADDR_VAR 0 7
68916: PUSH
68917: LD_VAR 0 4
68921: PPUSH
68922: CALL_OW 250
68926: PPUSH
68927: LD_VAR 0 4
68931: PPUSH
68932: CALL_OW 251
68936: PPUSH
68937: LD_INT 6
68939: PPUSH
68940: CALL 68513 0 3
68944: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
68945: LD_VAR 0 4
68949: PPUSH
68950: CALL_OW 247
68954: PUSH
68955: LD_INT 2
68957: EQUAL
68958: PUSH
68959: LD_VAR 0 7
68963: AND
68964: PUSH
68965: LD_VAR 0 4
68969: PPUSH
68970: CALL_OW 264
68974: PUSH
68975: LD_VAR 0 10
68979: IN
68980: NOT
68981: AND
68982: IFFALSE 69021
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
68984: LD_VAR 0 4
68988: PPUSH
68989: LD_VAR 0 7
68993: PUSH
68994: LD_INT 1
68996: ARRAY
68997: PUSH
68998: LD_INT 1
69000: ARRAY
69001: PPUSH
69002: LD_VAR 0 7
69006: PUSH
69007: LD_INT 1
69009: ARRAY
69010: PUSH
69011: LD_INT 2
69013: ARRAY
69014: PPUSH
69015: CALL_OW 116
69019: GO 69310
// if path > tag then
69021: LD_VAR 0 2
69025: PUSH
69026: LD_VAR 0 9
69030: GREATER
69031: IFFALSE 69239
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
69033: LD_ADDR_VAR 0 6
69037: PUSH
69038: LD_VAR 0 5
69042: PPUSH
69043: LD_INT 91
69045: PUSH
69046: LD_VAR 0 4
69050: PUSH
69051: LD_INT 8
69053: PUSH
69054: EMPTY
69055: LIST
69056: LIST
69057: LIST
69058: PPUSH
69059: CALL_OW 72
69063: ST_TO_ADDR
// if nearEnemy then
69064: LD_VAR 0 6
69068: IFFALSE 69137
// begin if GetWeapon ( i ) = ru_time_lapser then
69070: LD_VAR 0 4
69074: PPUSH
69075: CALL_OW 264
69079: PUSH
69080: LD_INT 49
69082: EQUAL
69083: IFFALSE 69111
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
69085: LD_VAR 0 4
69089: PPUSH
69090: LD_VAR 0 6
69094: PPUSH
69095: LD_VAR 0 4
69099: PPUSH
69100: CALL_OW 74
69104: PPUSH
69105: CALL_OW 112
69109: GO 69135
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
69111: LD_VAR 0 4
69115: PPUSH
69116: LD_VAR 0 6
69120: PPUSH
69121: LD_VAR 0 4
69125: PPUSH
69126: CALL_OW 74
69130: PPUSH
69131: CALL_OW 115
// end else
69135: GO 69237
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
69137: LD_VAR 0 4
69141: PPUSH
69142: LD_VAR 0 2
69146: PUSH
69147: LD_VAR 0 9
69151: ARRAY
69152: PUSH
69153: LD_INT 1
69155: ARRAY
69156: PPUSH
69157: LD_VAR 0 2
69161: PUSH
69162: LD_VAR 0 9
69166: ARRAY
69167: PUSH
69168: LD_INT 2
69170: ARRAY
69171: PPUSH
69172: CALL_OW 297
69176: PUSH
69177: LD_INT 6
69179: GREATER
69180: IFFALSE 69223
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
69182: LD_VAR 0 4
69186: PPUSH
69187: LD_VAR 0 2
69191: PUSH
69192: LD_VAR 0 9
69196: ARRAY
69197: PUSH
69198: LD_INT 1
69200: ARRAY
69201: PPUSH
69202: LD_VAR 0 2
69206: PUSH
69207: LD_VAR 0 9
69211: ARRAY
69212: PUSH
69213: LD_INT 2
69215: ARRAY
69216: PPUSH
69217: CALL_OW 114
69221: GO 69237
// SetTag ( i , tag ) ;
69223: LD_VAR 0 4
69227: PPUSH
69228: LD_VAR 0 9
69232: PPUSH
69233: CALL_OW 109
// end else
69237: GO 69310
// if enemy then
69239: LD_VAR 0 5
69243: IFFALSE 69310
// begin if GetWeapon ( i ) = ru_time_lapser then
69245: LD_VAR 0 4
69249: PPUSH
69250: CALL_OW 264
69254: PUSH
69255: LD_INT 49
69257: EQUAL
69258: IFFALSE 69286
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
69260: LD_VAR 0 4
69264: PPUSH
69265: LD_VAR 0 5
69269: PPUSH
69270: LD_VAR 0 4
69274: PPUSH
69275: CALL_OW 74
69279: PPUSH
69280: CALL_OW 112
69284: GO 69310
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
69286: LD_VAR 0 4
69290: PPUSH
69291: LD_VAR 0 5
69295: PPUSH
69296: LD_VAR 0 4
69300: PPUSH
69301: CALL_OW 74
69305: PPUSH
69306: CALL_OW 115
// end ; end ;
69310: GO 68890
69312: POP
69313: POP
// end ;
69314: LD_VAR 0 3
69318: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
69319: LD_INT 0
69321: PPUSH
69322: PPUSH
69323: PPUSH
// if not unit or IsInUnit ( unit ) then
69324: LD_VAR 0 1
69328: NOT
69329: PUSH
69330: LD_VAR 0 1
69334: PPUSH
69335: CALL_OW 310
69339: OR
69340: IFFALSE 69344
// exit ;
69342: GO 69435
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
69344: LD_ADDR_VAR 0 4
69348: PUSH
69349: LD_VAR 0 1
69353: PPUSH
69354: CALL_OW 250
69358: PPUSH
69359: LD_VAR 0 2
69363: PPUSH
69364: LD_INT 1
69366: PPUSH
69367: CALL_OW 272
69371: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
69372: LD_ADDR_VAR 0 5
69376: PUSH
69377: LD_VAR 0 1
69381: PPUSH
69382: CALL_OW 251
69386: PPUSH
69387: LD_VAR 0 2
69391: PPUSH
69392: LD_INT 1
69394: PPUSH
69395: CALL_OW 273
69399: ST_TO_ADDR
// if ValidHex ( x , y ) then
69400: LD_VAR 0 4
69404: PPUSH
69405: LD_VAR 0 5
69409: PPUSH
69410: CALL_OW 488
69414: IFFALSE 69435
// ComTurnXY ( unit , x , y ) ;
69416: LD_VAR 0 1
69420: PPUSH
69421: LD_VAR 0 4
69425: PPUSH
69426: LD_VAR 0 5
69430: PPUSH
69431: CALL_OW 118
// end ;
69435: LD_VAR 0 3
69439: RET
// export function SeeUnits ( side , units ) ; var i ; begin
69440: LD_INT 0
69442: PPUSH
69443: PPUSH
// result := false ;
69444: LD_ADDR_VAR 0 3
69448: PUSH
69449: LD_INT 0
69451: ST_TO_ADDR
// if not units then
69452: LD_VAR 0 2
69456: NOT
69457: IFFALSE 69461
// exit ;
69459: GO 69506
// for i in units do
69461: LD_ADDR_VAR 0 4
69465: PUSH
69466: LD_VAR 0 2
69470: PUSH
69471: FOR_IN
69472: IFFALSE 69504
// if See ( side , i ) then
69474: LD_VAR 0 1
69478: PPUSH
69479: LD_VAR 0 4
69483: PPUSH
69484: CALL_OW 292
69488: IFFALSE 69502
// begin result := true ;
69490: LD_ADDR_VAR 0 3
69494: PUSH
69495: LD_INT 1
69497: ST_TO_ADDR
// exit ;
69498: POP
69499: POP
69500: GO 69506
// end ;
69502: GO 69471
69504: POP
69505: POP
// end ;
69506: LD_VAR 0 3
69510: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
69511: LD_INT 0
69513: PPUSH
69514: PPUSH
69515: PPUSH
69516: PPUSH
// if not unit or not points then
69517: LD_VAR 0 1
69521: NOT
69522: PUSH
69523: LD_VAR 0 2
69527: NOT
69528: OR
69529: IFFALSE 69533
// exit ;
69531: GO 69623
// dist := 99999 ;
69533: LD_ADDR_VAR 0 5
69537: PUSH
69538: LD_INT 99999
69540: ST_TO_ADDR
// for i in points do
69541: LD_ADDR_VAR 0 4
69545: PUSH
69546: LD_VAR 0 2
69550: PUSH
69551: FOR_IN
69552: IFFALSE 69621
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
69554: LD_ADDR_VAR 0 6
69558: PUSH
69559: LD_VAR 0 1
69563: PPUSH
69564: LD_VAR 0 4
69568: PUSH
69569: LD_INT 1
69571: ARRAY
69572: PPUSH
69573: LD_VAR 0 4
69577: PUSH
69578: LD_INT 2
69580: ARRAY
69581: PPUSH
69582: CALL_OW 297
69586: ST_TO_ADDR
// if tmpDist < dist then
69587: LD_VAR 0 6
69591: PUSH
69592: LD_VAR 0 5
69596: LESS
69597: IFFALSE 69619
// begin result := i ;
69599: LD_ADDR_VAR 0 3
69603: PUSH
69604: LD_VAR 0 4
69608: ST_TO_ADDR
// dist := tmpDist ;
69609: LD_ADDR_VAR 0 5
69613: PUSH
69614: LD_VAR 0 6
69618: ST_TO_ADDR
// end ; end ;
69619: GO 69551
69621: POP
69622: POP
// end ;
69623: LD_VAR 0 3
69627: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
69628: LD_INT 0
69630: PPUSH
// uc_side := side ;
69631: LD_ADDR_OWVAR 20
69635: PUSH
69636: LD_VAR 0 1
69640: ST_TO_ADDR
// uc_nation := 3 ;
69641: LD_ADDR_OWVAR 21
69645: PUSH
69646: LD_INT 3
69648: ST_TO_ADDR
// vc_chassis := 25 ;
69649: LD_ADDR_OWVAR 37
69653: PUSH
69654: LD_INT 25
69656: ST_TO_ADDR
// vc_engine := engine_siberite ;
69657: LD_ADDR_OWVAR 39
69661: PUSH
69662: LD_INT 3
69664: ST_TO_ADDR
// vc_control := control_computer ;
69665: LD_ADDR_OWVAR 38
69669: PUSH
69670: LD_INT 3
69672: ST_TO_ADDR
// vc_weapon := 59 ;
69673: LD_ADDR_OWVAR 40
69677: PUSH
69678: LD_INT 59
69680: ST_TO_ADDR
// result := CreateVehicle ;
69681: LD_ADDR_VAR 0 5
69685: PUSH
69686: CALL_OW 45
69690: ST_TO_ADDR
// SetDir ( result , d ) ;
69691: LD_VAR 0 5
69695: PPUSH
69696: LD_VAR 0 4
69700: PPUSH
69701: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
69705: LD_VAR 0 5
69709: PPUSH
69710: LD_VAR 0 2
69714: PPUSH
69715: LD_VAR 0 3
69719: PPUSH
69720: LD_INT 0
69722: PPUSH
69723: CALL_OW 48
// end ;
69727: LD_VAR 0 5
69731: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
69732: LD_INT 0
69734: PPUSH
69735: PPUSH
69736: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
69737: LD_ADDR_VAR 0 2
69741: PUSH
69742: LD_INT 0
69744: PUSH
69745: LD_INT 0
69747: PUSH
69748: LD_INT 0
69750: PUSH
69751: LD_INT 0
69753: PUSH
69754: EMPTY
69755: LIST
69756: LIST
69757: LIST
69758: LIST
69759: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
69760: LD_VAR 0 1
69764: NOT
69765: PUSH
69766: LD_VAR 0 1
69770: PPUSH
69771: CALL_OW 264
69775: PUSH
69776: LD_INT 12
69778: PUSH
69779: LD_INT 51
69781: PUSH
69782: LD_INT 32
69784: PUSH
69785: LD_INT 89
69787: PUSH
69788: EMPTY
69789: LIST
69790: LIST
69791: LIST
69792: LIST
69793: IN
69794: NOT
69795: OR
69796: IFFALSE 69800
// exit ;
69798: GO 69898
// for i := 1 to 3 do
69800: LD_ADDR_VAR 0 3
69804: PUSH
69805: DOUBLE
69806: LD_INT 1
69808: DEC
69809: ST_TO_ADDR
69810: LD_INT 3
69812: PUSH
69813: FOR_TO
69814: IFFALSE 69896
// begin tmp := GetCargo ( cargo , i ) ;
69816: LD_ADDR_VAR 0 4
69820: PUSH
69821: LD_VAR 0 1
69825: PPUSH
69826: LD_VAR 0 3
69830: PPUSH
69831: CALL_OW 289
69835: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
69836: LD_ADDR_VAR 0 2
69840: PUSH
69841: LD_VAR 0 2
69845: PPUSH
69846: LD_VAR 0 3
69850: PPUSH
69851: LD_VAR 0 4
69855: PPUSH
69856: CALL_OW 1
69860: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
69861: LD_ADDR_VAR 0 2
69865: PUSH
69866: LD_VAR 0 2
69870: PPUSH
69871: LD_INT 4
69873: PPUSH
69874: LD_VAR 0 2
69878: PUSH
69879: LD_INT 4
69881: ARRAY
69882: PUSH
69883: LD_VAR 0 4
69887: PLUS
69888: PPUSH
69889: CALL_OW 1
69893: ST_TO_ADDR
// end ;
69894: GO 69813
69896: POP
69897: POP
// end ;
69898: LD_VAR 0 2
69902: RET
// export function Length ( array ) ; begin
69903: LD_INT 0
69905: PPUSH
// result := array + 0 ;
69906: LD_ADDR_VAR 0 2
69910: PUSH
69911: LD_VAR 0 1
69915: PUSH
69916: LD_INT 0
69918: PLUS
69919: ST_TO_ADDR
// end ;
69920: LD_VAR 0 2
69924: RET
// export function PrepareArray ( array ) ; begin
69925: LD_INT 0
69927: PPUSH
// result := array diff 0 ;
69928: LD_ADDR_VAR 0 2
69932: PUSH
69933: LD_VAR 0 1
69937: PUSH
69938: LD_INT 0
69940: DIFF
69941: ST_TO_ADDR
// if not result [ 1 ] then
69942: LD_VAR 0 2
69946: PUSH
69947: LD_INT 1
69949: ARRAY
69950: NOT
69951: IFFALSE 69971
// result := Delete ( result , 1 ) ;
69953: LD_ADDR_VAR 0 2
69957: PUSH
69958: LD_VAR 0 2
69962: PPUSH
69963: LD_INT 1
69965: PPUSH
69966: CALL_OW 3
69970: ST_TO_ADDR
// end ;
69971: LD_VAR 0 2
69975: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
69976: LD_INT 0
69978: PPUSH
69979: PPUSH
69980: PPUSH
69981: PPUSH
// sibRocketRange := 25 ;
69982: LD_ADDR_VAR 0 6
69986: PUSH
69987: LD_INT 25
69989: ST_TO_ADDR
// result := false ;
69990: LD_ADDR_VAR 0 4
69994: PUSH
69995: LD_INT 0
69997: ST_TO_ADDR
// for i := 0 to 5 do
69998: LD_ADDR_VAR 0 5
70002: PUSH
70003: DOUBLE
70004: LD_INT 0
70006: DEC
70007: ST_TO_ADDR
70008: LD_INT 5
70010: PUSH
70011: FOR_TO
70012: IFFALSE 70079
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
70014: LD_VAR 0 1
70018: PPUSH
70019: LD_VAR 0 5
70023: PPUSH
70024: LD_VAR 0 6
70028: PPUSH
70029: CALL_OW 272
70033: PPUSH
70034: LD_VAR 0 2
70038: PPUSH
70039: LD_VAR 0 5
70043: PPUSH
70044: LD_VAR 0 6
70048: PPUSH
70049: CALL_OW 273
70053: PPUSH
70054: LD_VAR 0 3
70058: PPUSH
70059: CALL_OW 309
70063: IFFALSE 70077
// begin result := true ;
70065: LD_ADDR_VAR 0 4
70069: PUSH
70070: LD_INT 1
70072: ST_TO_ADDR
// exit ;
70073: POP
70074: POP
70075: GO 70081
// end ;
70077: GO 70011
70079: POP
70080: POP
// end ;
70081: LD_VAR 0 4
70085: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
70086: LD_INT 0
70088: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
70089: LD_VAR 0 1
70093: PPUSH
70094: LD_VAR 0 2
70098: PPUSH
70099: LD_INT 0
70101: PPUSH
70102: LD_INT 0
70104: PPUSH
70105: LD_INT 1
70107: PPUSH
70108: LD_INT 0
70110: PPUSH
70111: CALL_OW 587
// end ; end_of_file
70115: LD_VAR 0 3
70119: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
70120: LD_VAR 0 1
70124: PUSH
70125: LD_INT 200
70127: DOUBLE
70128: GREATEREQUAL
70129: IFFALSE 70137
70131: LD_INT 299
70133: DOUBLE
70134: LESSEQUAL
70135: IFTRUE 70139
70137: GO 70171
70139: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
70140: LD_VAR 0 1
70144: PPUSH
70145: LD_VAR 0 2
70149: PPUSH
70150: LD_VAR 0 3
70154: PPUSH
70155: LD_VAR 0 4
70159: PPUSH
70160: LD_VAR 0 5
70164: PPUSH
70165: CALL 24786 0 5
70169: GO 70248
70171: LD_INT 300
70173: DOUBLE
70174: GREATEREQUAL
70175: IFFALSE 70183
70177: LD_INT 399
70179: DOUBLE
70180: LESSEQUAL
70181: IFTRUE 70185
70183: GO 70247
70185: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
70186: LD_VAR 0 1
70190: PPUSH
70191: LD_VAR 0 2
70195: PPUSH
70196: LD_VAR 0 3
70200: PPUSH
70201: LD_VAR 0 4
70205: PPUSH
70206: LD_VAR 0 5
70210: PPUSH
70211: LD_VAR 0 6
70215: PPUSH
70216: LD_VAR 0 7
70220: PPUSH
70221: LD_VAR 0 8
70225: PPUSH
70226: LD_VAR 0 9
70230: PPUSH
70231: LD_VAR 0 10
70235: PPUSH
70236: LD_VAR 0 11
70240: PPUSH
70241: CALL 21119 0 11
70245: GO 70248
70247: POP
// end ;
70248: PPOPN 11
70250: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
70251: LD_VAR 0 1
70255: PPUSH
70256: LD_VAR 0 2
70260: PPUSH
70261: LD_VAR 0 3
70265: PPUSH
70266: LD_VAR 0 4
70270: PPUSH
70271: LD_VAR 0 5
70275: PPUSH
70276: CALL 24522 0 5
// end ; end_of_file
70280: PPOPN 5
70282: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
70283: LD_VAR 0 1
70287: PPUSH
70288: LD_VAR 0 2
70292: PPUSH
70293: LD_VAR 0 3
70297: PPUSH
70298: LD_VAR 0 4
70302: PPUSH
70303: LD_VAR 0 5
70307: PPUSH
70308: LD_VAR 0 6
70312: PPUSH
70313: CALL 8771 0 6
// end ;
70317: PPOPN 6
70319: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
70320: LD_INT 0
70322: PPUSH
// begin if not units then
70323: LD_VAR 0 1
70327: NOT
70328: IFFALSE 70332
// exit ;
70330: GO 70332
// end ;
70332: PPOPN 7
70334: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
70335: CALL 8675 0 0
// end ;
70339: PPOPN 1
70341: END
