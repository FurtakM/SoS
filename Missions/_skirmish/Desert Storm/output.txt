// starting begin PrepareMap ;
   0: CALL 13 0 0
// Main_Variables ;
   4: CALL 136 0 0
// Start_Mission ;
   8: CALL 3478 0 0
// end ;
  12: END
// function PrepareMap ; begin
  13: LD_INT 0
  15: PPUSH
// ResetFog ;
  16: CALL_OW 335
// RandomizeAll ;
  20: CALL_OW 11
// game_difficulty := GetMultiplayerSetting ( 0 ) ;
  24: LD_ADDR_EXP 2
  28: PUSH
  29: LD_INT 0
  31: PPUSH
  32: CALL_OW 426
  36: ST_TO_ADDR
// Difficulty := game_difficulty ;
  37: LD_ADDR_OWVAR 67
  41: PUSH
  42: LD_EXP 2
  46: ST_TO_ADDR
// ChangeSideFog ( 8 , 6 ) ;
  47: LD_INT 8
  49: PPUSH
  50: LD_INT 6
  52: PPUSH
  53: CALL_OW 343
// PlaceSeeing ( 1 , 1 , 8 , - 37963 ) ;
  57: LD_INT 1
  59: PPUSH
  60: LD_INT 1
  62: PPUSH
  63: LD_INT 8
  65: PPUSH
  66: LD_INT 37963
  68: NEG
  69: PPUSH
  70: CALL_OW 330
// RemoveSeeing ( 1 , 1 , 8 ) ;
  74: LD_INT 1
  76: PPUSH
  77: LD_INT 1
  79: PPUSH
  80: LD_INT 8
  82: PPUSH
  83: CALL_OW 331
// PlaceCamera ;
  87: CALL 3945 0 0
// CreateNature ( nature , 4 , 3 , 2 , 1 ) ;
  91: LD_INT 2
  93: PPUSH
  94: LD_INT 4
  96: PPUSH
  97: LD_INT 3
  99: PPUSH
 100: LD_INT 2
 102: PPUSH
 103: LD_INT 1
 105: PPUSH
 106: CALL 7878 0 5
// PrepareComm ;
 110: CALL 8361 0 0
// SetSide ( fort , 6 ) ;
 114: LD_INT 23
 116: PPUSH
 117: LD_INT 6
 119: PPUSH
 120: CALL_OW 235
// CenterNowOnUnits ( fort ) ;
 124: LD_INT 23
 126: PPUSH
 127: CALL_OW 87
// end ;
 131: LD_VAR 0 1
 135: RET
// export game_on , game_difficulty , game_time , game_option , game_end , game_strings ; export leopold , leopold_in_fort , samuel , samuel_in_fort , mortars_in_fort , scout ; export u_mine , u_fac ; export areas ; export skill ; export ar_weapons , ru_weapons , us_weapons ; export arabian_force , russian_force , american_force , arabian_timeing , russian_timeing , american_timeing ; export meeting_start , meeting_arive , meeting_break , meeting_end , meeting_time , russian_timer , fort_destroyed , hero_died , mission_time , cargo_ok , american_hchan , dezert , arabian_attack , russian_attack , american_attack , american_help , american_sib_bomb , russian_trade , heike_dialog1 , heike_dialog2 ; export am_comander , ru_comander , ar_comander ; function Main_Variables ; begin
 136: LD_INT 0
 138: PPUSH
// game_on := false ;
 139: LD_ADDR_EXP 1
 143: PUSH
 144: LD_INT 0
 146: ST_TO_ADDR
// game_time := 0 0$00 ;
 147: LD_ADDR_EXP 3
 151: PUSH
 152: LD_INT 0
 154: ST_TO_ADDR
// game_option := [ 1 ] ;
 155: LD_ADDR_EXP 4
 159: PUSH
 160: LD_INT 1
 162: PUSH
 163: EMPTY
 164: LIST
 165: ST_TO_ADDR
// game_end := false ;
 166: LD_ADDR_EXP 5
 170: PUSH
 171: LD_INT 0
 173: ST_TO_ADDR
// game_strings := [ ] ;
 174: LD_ADDR_EXP 6
 178: PUSH
 179: EMPTY
 180: ST_TO_ADDR
// game_time := 0 0$00 ;
 181: LD_ADDR_EXP 3
 185: PUSH
 186: LD_INT 0
 188: ST_TO_ADDR
// mission_time := 0 0$00 ;
 189: LD_ADDR_EXP 34
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// skill := [ 5 , 7 , 9 ] [ game_difficulty ] ;
 197: LD_ADDR_EXP 16
 201: PUSH
 202: LD_INT 5
 204: PUSH
 205: LD_INT 7
 207: PUSH
 208: LD_INT 9
 210: PUSH
 211: EMPTY
 212: LIST
 213: LIST
 214: LIST
 215: PUSH
 216: LD_EXP 2
 220: ARRAY
 221: ST_TO_ADDR
// areas := [ a_swest , a_nwest , a_neast , a_seast ] ;
 222: LD_ADDR_EXP 15
 226: PUSH
 227: LD_INT 5
 229: PUSH
 230: LD_INT 6
 232: PUSH
 233: LD_INT 7
 235: PUSH
 236: LD_INT 8
 238: PUSH
 239: EMPTY
 240: LIST
 241: LIST
 242: LIST
 243: LIST
 244: ST_TO_ADDR
// meeting_start := false ;
 245: LD_ADDR_EXP 26
 249: PUSH
 250: LD_INT 0
 252: ST_TO_ADDR
// meeting_arive := false ;
 253: LD_ADDR_EXP 27
 257: PUSH
 258: LD_INT 0
 260: ST_TO_ADDR
// meeting_break := false ;
 261: LD_ADDR_EXP 28
 265: PUSH
 266: LD_INT 0
 268: ST_TO_ADDR
// meeting_end := false ;
 269: LD_ADDR_EXP 29
 273: PUSH
 274: LD_INT 0
 276: ST_TO_ADDR
// meeting_time := [ 4 4$00 , 3 3$40 , 3 3$20 ] [ game_difficulty ] ;
 277: LD_ADDR_EXP 30
 281: PUSH
 282: LD_INT 8400
 284: PUSH
 285: LD_INT 7700
 287: PUSH
 288: LD_INT 7000
 290: PUSH
 291: EMPTY
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: LD_EXP 2
 300: ARRAY
 301: ST_TO_ADDR
// arabian_force := [ 4 , 5 , 6 ] [ game_difficulty ] ;
 302: LD_ADDR_EXP 20
 306: PUSH
 307: LD_INT 4
 309: PUSH
 310: LD_INT 5
 312: PUSH
 313: LD_INT 6
 315: PUSH
 316: EMPTY
 317: LIST
 318: LIST
 319: LIST
 320: PUSH
 321: LD_EXP 2
 325: ARRAY
 326: ST_TO_ADDR
// american_force := [ 5 , 6 , 7 ] [ game_difficulty ] ;
 327: LD_ADDR_EXP 22
 331: PUSH
 332: LD_INT 5
 334: PUSH
 335: LD_INT 6
 337: PUSH
 338: LD_INT 7
 340: PUSH
 341: EMPTY
 342: LIST
 343: LIST
 344: LIST
 345: PUSH
 346: LD_EXP 2
 350: ARRAY
 351: ST_TO_ADDR
// russian_force := [ 6 , 7 , 8 ] [ game_difficulty ] ;
 352: LD_ADDR_EXP 21
 356: PUSH
 357: LD_INT 6
 359: PUSH
 360: LD_INT 7
 362: PUSH
 363: LD_INT 8
 365: PUSH
 366: EMPTY
 367: LIST
 368: LIST
 369: LIST
 370: PUSH
 371: LD_EXP 2
 375: ARRAY
 376: ST_TO_ADDR
// u_mine := false ;
 377: LD_ADDR_EXP 13
 381: PUSH
 382: LD_INT 0
 384: ST_TO_ADDR
// u_fac := false ;
 385: LD_ADDR_EXP 14
 389: PUSH
 390: LD_INT 0
 392: ST_TO_ADDR
// leopold_in_fort := false ;
 393: LD_ADDR_EXP 8
 397: PUSH
 398: LD_INT 0
 400: ST_TO_ADDR
// samuel_in_fort := false ;
 401: LD_ADDR_EXP 10
 405: PUSH
 406: LD_INT 0
 408: ST_TO_ADDR
// mortars_in_fort := false ;
 409: LD_ADDR_EXP 11
 413: PUSH
 414: LD_INT 0
 416: ST_TO_ADDR
// fort_destroyed := false ;
 417: LD_ADDR_EXP 32
 421: PUSH
 422: LD_INT 0
 424: ST_TO_ADDR
// hero_died := false ;
 425: LD_ADDR_EXP 33
 429: PUSH
 430: LD_INT 0
 432: ST_TO_ADDR
// dezert := false ;
 433: LD_ADDR_EXP 37
 437: PUSH
 438: LD_INT 0
 440: ST_TO_ADDR
// arabian_attack := false ;
 441: LD_ADDR_EXP 38
 445: PUSH
 446: LD_INT 0
 448: ST_TO_ADDR
// russian_attack := false ;
 449: LD_ADDR_EXP 39
 453: PUSH
 454: LD_INT 0
 456: ST_TO_ADDR
// american_attack := false ;
 457: LD_ADDR_EXP 40
 461: PUSH
 462: LD_INT 0
 464: ST_TO_ADDR
// american_help := false ;
 465: LD_ADDR_EXP 41
 469: PUSH
 470: LD_INT 0
 472: ST_TO_ADDR
// american_hchan := [ 91 , 81 , 71 ] [ game_difficulty ] ;
 473: LD_ADDR_EXP 36
 477: PUSH
 478: LD_INT 91
 480: PUSH
 481: LD_INT 81
 483: PUSH
 484: LD_INT 71
 486: PUSH
 487: EMPTY
 488: LIST
 489: LIST
 490: LIST
 491: PUSH
 492: LD_EXP 2
 496: ARRAY
 497: ST_TO_ADDR
// american_sib_bomb := false ;
 498: LD_ADDR_EXP 42
 502: PUSH
 503: LD_INT 0
 505: ST_TO_ADDR
// russian_trade := false ;
 506: LD_ADDR_EXP 43
 510: PUSH
 511: LD_INT 0
 513: ST_TO_ADDR
// russian_timer := 5 5$00 ;
 514: LD_ADDR_EXP 31
 518: PUSH
 519: LD_INT 10500
 521: ST_TO_ADDR
// cargo_ok := false ;
 522: LD_ADDR_EXP 35
 526: PUSH
 527: LD_INT 0
 529: ST_TO_ADDR
// heike_dialog1 := false ;
 530: LD_ADDR_EXP 44
 534: PUSH
 535: LD_INT 0
 537: ST_TO_ADDR
// heike_dialog2 := false ;
 538: LD_ADDR_EXP 45
 542: PUSH
 543: LD_INT 0
 545: ST_TO_ADDR
// american_timeing := [ 10 10$00 , 9 9$50 , 9 9$30 ] [ game_difficulty ] ;
 546: LD_ADDR_EXP 25
 550: PUSH
 551: LD_INT 21000
 553: PUSH
 554: LD_INT 20650
 556: PUSH
 557: LD_INT 19950
 559: PUSH
 560: EMPTY
 561: LIST
 562: LIST
 563: LIST
 564: PUSH
 565: LD_EXP 2
 569: ARRAY
 570: ST_TO_ADDR
// arabian_timeing := [ 8 8$00 , 7 7$30 , 6 6$40 ] [ game_difficulty ] ;
 571: LD_ADDR_EXP 23
 575: PUSH
 576: LD_INT 16800
 578: PUSH
 579: LD_INT 15750
 581: PUSH
 582: LD_INT 14000
 584: PUSH
 585: EMPTY
 586: LIST
 587: LIST
 588: LIST
 589: PUSH
 590: LD_EXP 2
 594: ARRAY
 595: ST_TO_ADDR
// russian_timeing := [ 11 11$00 , 10 10$30 , 9 9$20 ] [ game_difficulty ] ;
 596: LD_ADDR_EXP 24
 600: PUSH
 601: LD_INT 23100
 603: PUSH
 604: LD_INT 22050
 606: PUSH
 607: LD_INT 19600
 609: PUSH
 610: EMPTY
 611: LIST
 612: LIST
 613: LIST
 614: PUSH
 615: LD_EXP 2
 619: ARRAY
 620: ST_TO_ADDR
// ar_weapons := [ ar_rocket_launcher , ar_gun , ar_flame_thrower , ar_selfpropelled_bomb , ar_bio_bomb ] ;
 621: LD_ADDR_EXP 17
 625: PUSH
 626: LD_INT 28
 628: PUSH
 629: LD_INT 27
 631: PUSH
 632: LD_INT 26
 634: PUSH
 635: LD_INT 29
 637: PUSH
 638: LD_EXP 56
 642: PUSH
 643: EMPTY
 644: LIST
 645: LIST
 646: LIST
 647: LIST
 648: LIST
 649: ST_TO_ADDR
// us_weapons := [ us_rocket_launcher , us_heavy_gun , us_double_laser , us_laser ] ;
 650: LD_ADDR_EXP 19
 654: PUSH
 655: LD_INT 7
 657: PUSH
 658: LD_INT 6
 660: PUSH
 661: LD_INT 10
 663: PUSH
 664: LD_INT 9
 666: PUSH
 667: EMPTY
 668: LIST
 669: LIST
 670: LIST
 671: LIST
 672: ST_TO_ADDR
// ru_weapons := [ ru_rocket_launcher , ru_rocket , ru_heavy_gun , ru_heavy_gun ] ;
 673: LD_ADDR_EXP 18
 677: PUSH
 678: LD_INT 45
 680: PUSH
 681: LD_INT 47
 683: PUSH
 684: LD_INT 46
 686: PUSH
 687: LD_INT 46
 689: PUSH
 690: EMPTY
 691: LIST
 692: LIST
 693: LIST
 694: LIST
 695: ST_TO_ADDR
// end ;
 696: LD_VAR 0 1
 700: RET
// every 0 0$01 trigger game_on do var i , p , x , filter ;
 701: LD_EXP 1
 705: IFFALSE 3475
 707: GO 709
 709: DISABLE
 710: LD_INT 0
 712: PPUSH
 713: PPUSH
 714: PPUSH
 715: PPUSH
// begin enable ;
 716: ENABLE
// Display_Strings := [ #tick , game_time ] ^ game_strings ;
 717: LD_ADDR_OWVAR 47
 721: PUSH
 722: LD_STRING #tick
 724: PUSH
 725: LD_EXP 3
 729: PUSH
 730: EMPTY
 731: LIST
 732: LIST
 733: PUSH
 734: LD_EXP 6
 738: ADD
 739: ST_TO_ADDR
// game_time := RefreshTime ( game_time , true ) ;
 740: LD_ADDR_EXP 3
 744: PUSH
 745: LD_EXP 3
 749: PPUSH
 750: LD_INT 1
 752: PPUSH
 753: CALL 6964 0 2
 757: ST_TO_ADDR
// if meeting_start and meeting_time > 0 0$00 then
 758: LD_EXP 26
 762: PUSH
 763: LD_EXP 30
 767: PUSH
 768: LD_INT 0
 770: GREATER
 771: AND
 772: IFFALSE 809
// begin game_strings := [ #mtime , meeting_time ] ;
 774: LD_ADDR_EXP 6
 778: PUSH
 779: LD_STRING #mtime
 781: PUSH
 782: LD_EXP 30
 786: PUSH
 787: EMPTY
 788: LIST
 789: LIST
 790: ST_TO_ADDR
// meeting_time := RefreshTime ( meeting_time , false ) ;
 791: LD_ADDR_EXP 30
 795: PUSH
 796: LD_EXP 30
 800: PPUSH
 801: LD_INT 0
 803: PPUSH
 804: CALL 6964 0 2
 808: ST_TO_ADDR
// end ; if meeting_arive then
 809: LD_EXP 27
 813: IFFALSE 833
// mission_time := RefreshTime ( mission_time , true ) ;
 815: LD_ADDR_EXP 34
 819: PUSH
 820: LD_EXP 34
 824: PPUSH
 825: LD_INT 1
 827: PPUSH
 828: CALL 6964 0 2
 832: ST_TO_ADDR
// if arabian_attack and arabian_timeing > 0 0$00 and meeting_arive then
 833: LD_EXP 38
 837: PUSH
 838: LD_EXP 23
 842: PUSH
 843: LD_INT 0
 845: GREATER
 846: AND
 847: PUSH
 848: LD_EXP 27
 852: AND
 853: IFFALSE 873
// begin arabian_timeing := RefreshTime ( arabian_timeing , false ) ;
 855: LD_ADDR_EXP 23
 859: PUSH
 860: LD_EXP 23
 864: PPUSH
 865: LD_INT 0
 867: PPUSH
 868: CALL 6964 0 2
 872: ST_TO_ADDR
// end ; if russian_attack and russian_timeing > 0 0$00 and meeting_arive then
 873: LD_EXP 39
 877: PUSH
 878: LD_EXP 24
 882: PUSH
 883: LD_INT 0
 885: GREATER
 886: AND
 887: PUSH
 888: LD_EXP 27
 892: AND
 893: IFFALSE 913
// begin russian_timeing := RefreshTime ( russian_timeing , false ) ;
 895: LD_ADDR_EXP 24
 899: PUSH
 900: LD_EXP 24
 904: PPUSH
 905: LD_INT 0
 907: PPUSH
 908: CALL 6964 0 2
 912: ST_TO_ADDR
// end ; if american_attack and american_timeing > 0 0$00 and meeting_arive then
 913: LD_EXP 40
 917: PUSH
 918: LD_EXP 25
 922: PUSH
 923: LD_INT 0
 925: GREATER
 926: AND
 927: PUSH
 928: LD_EXP 27
 932: AND
 933: IFFALSE 953
// begin american_timeing := RefreshTime ( american_timeing , false ) ;
 935: LD_ADDR_EXP 25
 939: PUSH
 940: LD_EXP 25
 944: PPUSH
 945: LD_INT 0
 947: PPUSH
 948: CALL 6964 0 2
 952: ST_TO_ADDR
// end ; if russian_trade and russian_timer > 0 0$00 then
 953: LD_EXP 43
 957: PUSH
 958: LD_EXP 31
 962: PUSH
 963: LD_INT 0
 965: GREATER
 966: AND
 967: IFFALSE 1004
// begin game_strings := [ #rtime , russian_timer ] ;
 969: LD_ADDR_EXP 6
 973: PUSH
 974: LD_STRING #rtime
 976: PUSH
 977: LD_EXP 31
 981: PUSH
 982: EMPTY
 983: LIST
 984: LIST
 985: ST_TO_ADDR
// russian_timer := RefreshTime ( russian_timer , false ) ;
 986: LD_ADDR_EXP 31
 990: PUSH
 991: LD_EXP 31
 995: PPUSH
 996: LD_INT 0
 998: PPUSH
 999: CALL 6964 0 2
1003: ST_TO_ADDR
// end ; if russian_trade and russian_timer = 0 0$00 or cargo_ok then
1004: LD_EXP 43
1008: PUSH
1009: LD_EXP 31
1013: PUSH
1014: LD_INT 0
1016: EQUAL
1017: AND
1018: PUSH
1019: LD_EXP 35
1023: OR
1024: IFFALSE 1033
// game_strings := [ ] ;
1026: LD_ADDR_EXP 6
1030: PUSH
1031: EMPTY
1032: ST_TO_ADDR
// if dezert = false and tick mod 33600 = 0 then
1033: LD_EXP 37
1037: PUSH
1038: LD_INT 0
1040: EQUAL
1041: PUSH
1042: LD_OWVAR 1
1046: PUSH
1047: LD_INT 33600
1049: MOD
1050: PUSH
1051: LD_INT 0
1053: EQUAL
1054: AND
1055: IFFALSE 1115
// begin p := Rand ( 1 , 5 ) ;
1057: LD_ADDR_VAR 0 2
1061: PUSH
1062: LD_INT 1
1064: PPUSH
1065: LD_INT 5
1067: PPUSH
1068: CALL_OW 12
1072: ST_TO_ADDR
// if p <= [ 4 , 3 , 3 ] [ game_difficulty ] then
1073: LD_VAR 0 2
1077: PUSH
1078: LD_INT 4
1080: PUSH
1081: LD_INT 3
1083: PUSH
1084: LD_INT 3
1086: PUSH
1087: EMPTY
1088: LIST
1089: LIST
1090: LIST
1091: PUSH
1092: LD_EXP 2
1096: ARRAY
1097: LESSEQUAL
1098: IFFALSE 1115
// begin RaiseSailEvent ( 92 ) ;
1100: LD_INT 92
1102: PPUSH
1103: CALL_OW 427
// dezert := true ;
1107: LD_ADDR_EXP 37
1111: PUSH
1112: LD_INT 1
1114: ST_TO_ADDR
// end ; end ; if tick mod 8400 = 0 then
1115: LD_OWVAR 1
1119: PUSH
1120: LD_INT 8400
1122: MOD
1123: PUSH
1124: LD_INT 0
1126: EQUAL
1127: IFFALSE 1136
// RaiseSailEvent ( 101 ) ;
1129: LD_INT 101
1131: PPUSH
1132: CALL_OW 427
// if MineExist ( 8 ) and u_mine = false then
1136: LD_INT 8
1138: PPUSH
1139: CALL 7018 0 1
1143: PUSH
1144: LD_EXP 13
1148: PUSH
1149: LD_INT 0
1151: EQUAL
1152: AND
1153: IFFALSE 1170
// begin u_mine := true ;
1155: LD_ADDR_EXP 13
1159: PUSH
1160: LD_INT 1
1162: ST_TO_ADDR
// ChangeMissionObjectives ( DS-T1m ) ;
1163: LD_STRING DS-T1m
1165: PPUSH
1166: CALL_OW 337
// end ; if FacExist ( 8 ) and u_fac = false then
1170: LD_INT 8
1172: PPUSH
1173: CALL 7080 0 1
1177: PUSH
1178: LD_EXP 14
1182: PUSH
1183: LD_INT 0
1185: EQUAL
1186: AND
1187: IFFALSE 1204
// begin u_fac := true ;
1189: LD_ADDR_EXP 14
1193: PUSH
1194: LD_INT 1
1196: ST_TO_ADDR
// ChangeMissionObjectives ( DS-T1f ) ;
1197: LD_STRING DS-T1f
1199: PPUSH
1200: CALL_OW 337
// end ; if hero_died then
1204: LD_EXP 33
1208: IFFALSE 1217
// YouLost ( DS-h1 ) ;
1210: LD_STRING DS-h1
1212: PPUSH
1213: CALL_OW 104
// if fort_destroyed then
1217: LD_EXP 32
1221: IFFALSE 1230
// YouLost ( DS-h2 ) ;
1223: LD_STRING DS-h2
1225: PPUSH
1226: CALL_OW 104
// if GetDistUnits ( leopold , l_cmndr ) > 6 and meeting_start = false then
1230: LD_EXP 7
1234: PPUSH
1235: LD_EXP 49
1239: PPUSH
1240: CALL_OW 296
1244: PUSH
1245: LD_INT 6
1247: GREATER
1248: PUSH
1249: LD_EXP 26
1253: PUSH
1254: LD_INT 0
1256: EQUAL
1257: AND
1258: IFFALSE 1281
// begin if not HasTask ( leopold ) then
1260: LD_EXP 7
1264: PPUSH
1265: CALL_OW 314
1269: NOT
1270: IFFALSE 1279
// RaiseSailEvent ( 1 ) ;
1272: LD_INT 1
1274: PPUSH
1275: CALL_OW 427
// end else
1279: GO 1298
// if meeting_start = false then
1281: LD_EXP 26
1285: PUSH
1286: LD_INT 0
1288: EQUAL
1289: IFFALSE 1298
// begin RaiseSailEvent ( 2 ) ;
1291: LD_INT 2
1293: PPUSH
1294: CALL_OW 427
// end ; if game_time >= [ 50 50$00 , 62 62$30 , 72 72$00 ] [ game_difficulty ] and meeting_end = false then
1298: LD_EXP 3
1302: PUSH
1303: LD_INT 105000
1305: PUSH
1306: LD_INT 131250
1308: PUSH
1309: LD_INT 151200
1311: PUSH
1312: EMPTY
1313: LIST
1314: LIST
1315: LIST
1316: PUSH
1317: LD_EXP 2
1321: ARRAY
1322: GREATEREQUAL
1323: PUSH
1324: LD_EXP 29
1328: PUSH
1329: LD_INT 0
1331: EQUAL
1332: AND
1333: IFFALSE 1350
// begin meeting_end := true ;
1335: LD_ADDR_EXP 29
1339: PUSH
1340: LD_INT 1
1342: ST_TO_ADDR
// RaiseSailEvent ( 200 ) ;
1343: LD_INT 200
1345: PPUSH
1346: CALL_OW 427
// end ; if meeting_time = 0 0$00 and meeting_arive = false then
1350: LD_EXP 30
1354: PUSH
1355: LD_INT 0
1357: EQUAL
1358: PUSH
1359: LD_EXP 27
1363: PUSH
1364: LD_INT 0
1366: EQUAL
1367: AND
1368: IFFALSE 1392
// begin meeting_arive := true ;
1370: LD_ADDR_EXP 27
1374: PUSH
1375: LD_INT 1
1377: ST_TO_ADDR
// game_strings := [ ] ;
1378: LD_ADDR_EXP 6
1382: PUSH
1383: EMPTY
1384: ST_TO_ADDR
// RaiseSailEvent ( 10 ) ;
1385: LD_INT 10
1387: PPUSH
1388: CALL_OW 427
// end ; if meeting_arive then
1392: LD_EXP 27
1396: IFFALSE 2195
// begin if arabian_attack = false and tick mod 4200 = 0 then
1398: LD_EXP 38
1402: PUSH
1403: LD_INT 0
1405: EQUAL
1406: PUSH
1407: LD_OWVAR 1
1411: PUSH
1412: LD_INT 4200
1414: MOD
1415: PUSH
1416: LD_INT 0
1418: EQUAL
1419: AND
1420: IFFALSE 1473
// begin p := Rand ( 1 , 100 ) ;
1422: LD_ADDR_VAR 0 2
1426: PUSH
1427: LD_INT 1
1429: PPUSH
1430: LD_INT 100
1432: PPUSH
1433: CALL_OW 12
1437: ST_TO_ADDR
// if p <= [ 85 , 90 , 95 ] [ game_difficulty ] then
1438: LD_VAR 0 2
1442: PUSH
1443: LD_INT 85
1445: PUSH
1446: LD_INT 90
1448: PUSH
1449: LD_INT 95
1451: PUSH
1452: EMPTY
1453: LIST
1454: LIST
1455: LIST
1456: PUSH
1457: LD_EXP 2
1461: ARRAY
1462: LESSEQUAL
1463: IFFALSE 1473
// arabian_attack := true ;
1465: LD_ADDR_EXP 38
1469: PUSH
1470: LD_INT 1
1472: ST_TO_ADDR
// end ; if russian_trade = false and russian_attack = false and tick > 52500 then
1473: LD_EXP 43
1477: PUSH
1478: LD_INT 0
1480: EQUAL
1481: PUSH
1482: LD_EXP 39
1486: PUSH
1487: LD_INT 0
1489: EQUAL
1490: AND
1491: PUSH
1492: LD_OWVAR 1
1496: PUSH
1497: LD_INT 52500
1499: GREATER
1500: AND
1501: IFFALSE 1572
// begin russian_trade = true ;
1503: LD_ADDR_EXP 43
1507: PUSH
1508: LD_INT 1
1510: ST_TO_ADDR
// DialogueOn ;
1511: CALL_OW 6
// SayRadio ( ru_comander , DS-DR-RTr ) ;
1515: LD_EXP 47
1519: PPUSH
1520: LD_STRING DS-DR-RTr
1522: PPUSH
1523: CALL_OW 94
// Say ( l_cmndr , DS-DC-RTr ) ;
1527: LD_EXP 49
1531: PPUSH
1532: LD_STRING DS-DC-RTr
1534: PPUSH
1535: CALL_OW 88
// SayRadio ( ru_comander , DS-DR-RTr2 ) ;
1539: LD_EXP 47
1543: PPUSH
1544: LD_STRING DS-DR-RTr2
1546: PPUSH
1547: CALL_OW 94
// DialogueOff ;
1551: CALL_OW 7
// ChangeMissionObjectives ( DS-T2 ) ;
1555: LD_STRING DS-T2
1557: PPUSH
1558: CALL_OW 337
// SetAreaMapShow ( tree , 1 ) ;
1562: LD_INT 10
1564: PPUSH
1565: LD_INT 1
1567: PPUSH
1568: CALL_OW 424
// end ; if russian_trade and cargo_ok = false and russian_timer > 0 0$00 then
1572: LD_EXP 43
1576: PUSH
1577: LD_EXP 35
1581: PUSH
1582: LD_INT 0
1584: EQUAL
1585: AND
1586: PUSH
1587: LD_EXP 31
1591: PUSH
1592: LD_INT 0
1594: GREATER
1595: AND
1596: IFFALSE 1845
// begin if FilterUnitsInArea ( tree , ( [ [ f_empty ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] , [ f_not , [ f_control , control_remote ] ] ] ) ) > 0 then
1598: LD_INT 10
1600: PPUSH
1601: LD_INT 58
1603: PUSH
1604: EMPTY
1605: LIST
1606: PUSH
1607: LD_INT 2
1609: PUSH
1610: LD_INT 34
1612: PUSH
1613: LD_INT 32
1615: PUSH
1616: EMPTY
1617: LIST
1618: LIST
1619: PUSH
1620: LD_INT 34
1622: PUSH
1623: LD_INT 12
1625: PUSH
1626: EMPTY
1627: LIST
1628: LIST
1629: PUSH
1630: EMPTY
1631: LIST
1632: LIST
1633: LIST
1634: PUSH
1635: LD_INT 3
1637: PUSH
1638: LD_INT 33
1640: PUSH
1641: LD_INT 2
1643: PUSH
1644: EMPTY
1645: LIST
1646: LIST
1647: PUSH
1648: EMPTY
1649: LIST
1650: LIST
1651: PUSH
1652: EMPTY
1653: LIST
1654: LIST
1655: LIST
1656: PPUSH
1657: CALL_OW 70
1661: PUSH
1662: LD_INT 0
1664: GREATER
1665: IFFALSE 1845
// if GetCargo ( FilterUnitsInArea ( tree , ( [ [ f_empty ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] , [ f_not , [ f_control , control_remote ] ] ] ) ) [ 1 ] , mat_siberit ) = 100 then
1667: LD_INT 10
1669: PPUSH
1670: LD_INT 58
1672: PUSH
1673: EMPTY
1674: LIST
1675: PUSH
1676: LD_INT 2
1678: PUSH
1679: LD_INT 34
1681: PUSH
1682: LD_INT 32
1684: PUSH
1685: EMPTY
1686: LIST
1687: LIST
1688: PUSH
1689: LD_INT 34
1691: PUSH
1692: LD_INT 12
1694: PUSH
1695: EMPTY
1696: LIST
1697: LIST
1698: PUSH
1699: EMPTY
1700: LIST
1701: LIST
1702: LIST
1703: PUSH
1704: LD_INT 3
1706: PUSH
1707: LD_INT 33
1709: PUSH
1710: LD_INT 2
1712: PUSH
1713: EMPTY
1714: LIST
1715: LIST
1716: PUSH
1717: EMPTY
1718: LIST
1719: LIST
1720: PUSH
1721: EMPTY
1722: LIST
1723: LIST
1724: LIST
1725: PPUSH
1726: CALL_OW 70
1730: PUSH
1731: LD_INT 1
1733: ARRAY
1734: PPUSH
1735: LD_INT 3
1737: PPUSH
1738: CALL_OW 289
1742: PUSH
1743: LD_INT 100
1745: EQUAL
1746: IFFALSE 1845
// begin cargo_ok := true ;
1748: LD_ADDR_EXP 35
1752: PUSH
1753: LD_INT 1
1755: ST_TO_ADDR
// RemoveUnit ( FilterUnitsInArea ( tree , ( [ [ f_empty ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] , [ f_not , [ f_control , control_remote ] ] ] ) ) [ 1 ] ) ;
1756: LD_INT 10
1758: PPUSH
1759: LD_INT 58
1761: PUSH
1762: EMPTY
1763: LIST
1764: PUSH
1765: LD_INT 2
1767: PUSH
1768: LD_INT 34
1770: PUSH
1771: LD_INT 32
1773: PUSH
1774: EMPTY
1775: LIST
1776: LIST
1777: PUSH
1778: LD_INT 34
1780: PUSH
1781: LD_INT 12
1783: PUSH
1784: EMPTY
1785: LIST
1786: LIST
1787: PUSH
1788: EMPTY
1789: LIST
1790: LIST
1791: LIST
1792: PUSH
1793: LD_INT 3
1795: PUSH
1796: LD_INT 33
1798: PUSH
1799: LD_INT 2
1801: PUSH
1802: EMPTY
1803: LIST
1804: LIST
1805: PUSH
1806: EMPTY
1807: LIST
1808: LIST
1809: PUSH
1810: EMPTY
1811: LIST
1812: LIST
1813: LIST
1814: PPUSH
1815: CALL_OW 70
1819: PUSH
1820: LD_INT 1
1822: ARRAY
1823: PPUSH
1824: CALL_OW 64
// ChangeMissionObjectives ( DS-T2-out ) ;
1828: LD_STRING DS-T2-out
1830: PPUSH
1831: CALL_OW 337
// SetAreaMapShow ( tree , 0 ) ;
1835: LD_INT 10
1837: PPUSH
1838: LD_INT 0
1840: PPUSH
1841: CALL_OW 424
// end ; end ; if russian_attack = false and russian_trade and cargo_ok = false and russian_timer = 0 0$00 then
1845: LD_EXP 39
1849: PUSH
1850: LD_INT 0
1852: EQUAL
1853: PUSH
1854: LD_EXP 43
1858: AND
1859: PUSH
1860: LD_EXP 35
1864: PUSH
1865: LD_INT 0
1867: EQUAL
1868: AND
1869: PUSH
1870: LD_EXP 31
1874: PUSH
1875: LD_INT 0
1877: EQUAL
1878: AND
1879: IFFALSE 1906
// begin russian_attack := true ;
1881: LD_ADDR_EXP 39
1885: PUSH
1886: LD_INT 1
1888: ST_TO_ADDR
// ChangeMissionObjectives ( DS-T2-out ) ;
1889: LD_STRING DS-T2-out
1891: PPUSH
1892: CALL_OW 337
// SetAreaMapShow ( tree , 0 ) ;
1896: LD_INT 10
1898: PPUSH
1899: LD_INT 0
1901: PPUSH
1902: CALL_OW 424
// end ; if russian_trade = false and russian_attack = false and american_attack = false and tick mod 21000 = 0 then
1906: LD_EXP 43
1910: PUSH
1911: LD_INT 0
1913: EQUAL
1914: PUSH
1915: LD_EXP 39
1919: PUSH
1920: LD_INT 0
1922: EQUAL
1923: AND
1924: PUSH
1925: LD_EXP 40
1929: PUSH
1930: LD_INT 0
1932: EQUAL
1933: AND
1934: PUSH
1935: LD_OWVAR 1
1939: PUSH
1940: LD_INT 21000
1942: MOD
1943: PUSH
1944: LD_INT 0
1946: EQUAL
1947: AND
1948: IFFALSE 2001
// begin p := Rand ( 1 , 100 ) ;
1950: LD_ADDR_VAR 0 2
1954: PUSH
1955: LD_INT 1
1957: PPUSH
1958: LD_INT 100
1960: PPUSH
1961: CALL_OW 12
1965: ST_TO_ADDR
// if p <= [ 35 , 45 , 55 ] [ game_difficulty ] then
1966: LD_VAR 0 2
1970: PUSH
1971: LD_INT 35
1973: PUSH
1974: LD_INT 45
1976: PUSH
1977: LD_INT 55
1979: PUSH
1980: EMPTY
1981: LIST
1982: LIST
1983: LIST
1984: PUSH
1985: LD_EXP 2
1989: ARRAY
1990: LESSEQUAL
1991: IFFALSE 2001
// russian_attack := true ;
1993: LD_ADDR_EXP 39
1997: PUSH
1998: LD_INT 1
2000: ST_TO_ADDR
// end ; if american_help = false and american_attack = false and russian_attack = false and tick mod 31500 = 0 then
2001: LD_EXP 41
2005: PUSH
2006: LD_INT 0
2008: EQUAL
2009: PUSH
2010: LD_EXP 40
2014: PUSH
2015: LD_INT 0
2017: EQUAL
2018: AND
2019: PUSH
2020: LD_EXP 39
2024: PUSH
2025: LD_INT 0
2027: EQUAL
2028: AND
2029: PUSH
2030: LD_OWVAR 1
2034: PUSH
2035: LD_INT 31500
2037: MOD
2038: PUSH
2039: LD_INT 0
2041: EQUAL
2042: AND
2043: IFFALSE 2096
// begin p := Rand ( 1 , 100 ) ;
2045: LD_ADDR_VAR 0 2
2049: PUSH
2050: LD_INT 1
2052: PPUSH
2053: LD_INT 100
2055: PPUSH
2056: CALL_OW 12
2060: ST_TO_ADDR
// if p <= [ 33 , 44 , 55 ] [ game_difficulty ] then
2061: LD_VAR 0 2
2065: PUSH
2066: LD_INT 33
2068: PUSH
2069: LD_INT 44
2071: PUSH
2072: LD_INT 55
2074: PUSH
2075: EMPTY
2076: LIST
2077: LIST
2078: LIST
2079: PUSH
2080: LD_EXP 2
2084: ARRAY
2085: LESSEQUAL
2086: IFFALSE 2096
// american_attack := true ;
2088: LD_ADDR_EXP 40
2092: PUSH
2093: LD_INT 1
2095: ST_TO_ADDR
// end ; if american_attack = false and russian_attack = false and american_help = false and tick mod 21200 = 0 then
2096: LD_EXP 40
2100: PUSH
2101: LD_INT 0
2103: EQUAL
2104: PUSH
2105: LD_EXP 39
2109: PUSH
2110: LD_INT 0
2112: EQUAL
2113: AND
2114: PUSH
2115: LD_EXP 41
2119: PUSH
2120: LD_INT 0
2122: EQUAL
2123: AND
2124: PUSH
2125: LD_OWVAR 1
2129: PUSH
2130: LD_INT 21200
2132: MOD
2133: PUSH
2134: LD_INT 0
2136: EQUAL
2137: AND
2138: IFFALSE 2195
// begin p := Rand ( 1 , 100 ) ;
2140: LD_ADDR_VAR 0 2
2144: PUSH
2145: LD_INT 1
2147: PPUSH
2148: LD_INT 100
2150: PPUSH
2151: CALL_OW 12
2155: ST_TO_ADDR
// if p <= american_hchan then
2156: LD_VAR 0 2
2160: PUSH
2161: LD_EXP 36
2165: LESSEQUAL
2166: IFFALSE 2195
// begin american_help := true ;
2168: LD_ADDR_EXP 41
2172: PUSH
2173: LD_INT 1
2175: ST_TO_ADDR
// SayRadio ( am_comander , DS-amhelp ) ;
2176: LD_EXP 46
2180: PPUSH
2181: LD_STRING DS-amhelp
2183: PPUSH
2184: CALL_OW 94
// RaiseSailEvent ( 91 ) ;
2188: LD_INT 91
2190: PPUSH
2191: CALL_OW 427
// end ; end ; end ; if american_attack and american_timeing = 0 0$00 and FilterAllUnits ( [ f_side , 1 ] ) = 0 then
2195: LD_EXP 40
2199: PUSH
2200: LD_EXP 25
2204: PUSH
2205: LD_INT 0
2207: EQUAL
2208: AND
2209: PUSH
2210: LD_INT 22
2212: PUSH
2213: LD_INT 1
2215: PUSH
2216: EMPTY
2217: LIST
2218: LIST
2219: PPUSH
2220: CALL_OW 69
2224: PUSH
2225: LD_INT 0
2227: EQUAL
2228: AND
2229: IFFALSE 2331
// begin american_timeing := Rand ( 17 17$00 , 20 20$00 ) ;
2231: LD_ADDR_EXP 25
2235: PUSH
2236: LD_INT 35700
2238: PPUSH
2239: LD_INT 42000
2241: PPUSH
2242: CALL_OW 12
2246: ST_TO_ADDR
// SayRadio ( scout , DS-DZ-U ) ;
2247: LD_EXP 12
2251: PPUSH
2252: LD_STRING DS-DZ-U
2254: PPUSH
2255: CALL_OW 94
// Wait ( 0 0$33 ) ;
2259: LD_INT 1155
2261: PPUSH
2262: CALL_OW 67
// x := Rand ( 1 , 2 ) ;
2266: LD_ADDR_VAR 0 3
2270: PUSH
2271: LD_INT 1
2273: PPUSH
2274: LD_INT 2
2276: PPUSH
2277: CALL_OW 12
2281: ST_TO_ADDR
// case x of 1 :
2282: LD_VAR 0 3
2286: PUSH
2287: LD_INT 1
2289: DOUBLE
2290: EQUAL
2291: IFTRUE 2295
2293: GO 2305
2295: POP
// RaiseSailEvent ( 41 ) ; 2 :
2296: LD_INT 41
2298: PPUSH
2299: CALL_OW 427
2303: GO 2324
2305: LD_INT 2
2307: DOUBLE
2308: EQUAL
2309: IFTRUE 2313
2311: GO 2323
2313: POP
// RaiseSailEvent ( 42 ) ; end ;
2314: LD_INT 42
2316: PPUSH
2317: CALL_OW 427
2321: GO 2324
2323: POP
// RaiseSailEvent ( 42 ) ;
2324: LD_INT 42
2326: PPUSH
2327: CALL_OW 427
// end ; if russian_attack and russian_timeing = 0 0$00 and FilterAllUnits ( [ f_side , 3 ] ) = 0 then
2331: LD_EXP 39
2335: PUSH
2336: LD_EXP 24
2340: PUSH
2341: LD_INT 0
2343: EQUAL
2344: AND
2345: PUSH
2346: LD_INT 22
2348: PUSH
2349: LD_INT 3
2351: PUSH
2352: EMPTY
2353: LIST
2354: LIST
2355: PPUSH
2356: CALL_OW 69
2360: PUSH
2361: LD_INT 0
2363: EQUAL
2364: AND
2365: IFFALSE 2421
// begin russian_timeing := Rand ( 17 17$00 , 20 20$00 ) ;
2367: LD_ADDR_EXP 24
2371: PUSH
2372: LD_INT 35700
2374: PPUSH
2375: LD_INT 42000
2377: PPUSH
2378: CALL_OW 12
2382: ST_TO_ADDR
// SayRadio ( scout , DS-DZ-R ) ;
2383: LD_EXP 12
2387: PPUSH
2388: LD_STRING DS-DZ-R
2390: PPUSH
2391: CALL_OW 94
// Wait ( 0 0$45 ) ;
2395: LD_INT 1575
2397: PPUSH
2398: CALL_OW 67
// SayRadio ( ru_comander , DS-DR-R1 ) ;
2402: LD_EXP 47
2406: PPUSH
2407: LD_STRING DS-DR-R1
2409: PPUSH
2410: CALL_OW 94
// RaiseSailEvent ( 51 ) ;
2414: LD_INT 51
2416: PPUSH
2417: CALL_OW 427
// end ; if mission_time >= 25 25$00 and arabian_force < 10 then
2421: LD_EXP 34
2425: PUSH
2426: LD_INT 52500
2428: GREATEREQUAL
2429: PUSH
2430: LD_EXP 20
2434: PUSH
2435: LD_INT 10
2437: LESS
2438: AND
2439: IFFALSE 2463
// begin mission_time := 0 0$00 ;
2441: LD_ADDR_EXP 34
2445: PUSH
2446: LD_INT 0
2448: ST_TO_ADDR
// arabian_force := arabian_force + 1 ;
2449: LD_ADDR_EXP 20
2453: PUSH
2454: LD_EXP 20
2458: PUSH
2459: LD_INT 1
2461: PLUS
2462: ST_TO_ADDR
// end ; if arabian_timeing = 0 0$00 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_weapon , ar_control_tower ] ] ] ) = 0 then
2463: LD_EXP 23
2467: PUSH
2468: LD_INT 0
2470: EQUAL
2471: PUSH
2472: LD_INT 22
2474: PUSH
2475: LD_INT 2
2477: PUSH
2478: EMPTY
2479: LIST
2480: LIST
2481: PUSH
2482: LD_INT 3
2484: PUSH
2485: LD_INT 34
2487: PUSH
2488: LD_INT 31
2490: PUSH
2491: EMPTY
2492: LIST
2493: LIST
2494: PUSH
2495: EMPTY
2496: LIST
2497: LIST
2498: PUSH
2499: EMPTY
2500: LIST
2501: LIST
2502: PPUSH
2503: CALL_OW 69
2507: PUSH
2508: LD_INT 0
2510: EQUAL
2511: AND
2512: IFFALSE 2710
// begin arabian_timeing := 7 7$30 ;
2514: LD_ADDR_EXP 23
2518: PUSH
2519: LD_INT 15750
2521: ST_TO_ADDR
// x := Rand ( 1 , 3 ) ;
2522: LD_ADDR_VAR 0 3
2526: PUSH
2527: LD_INT 1
2529: PPUSH
2530: LD_INT 3
2532: PPUSH
2533: CALL_OW 12
2537: ST_TO_ADDR
// SayRadio ( scout , DS-DZ-H ) ;
2538: LD_EXP 12
2542: PPUSH
2543: LD_STRING DS-DZ-H
2545: PPUSH
2546: CALL_OW 94
// case x of 1 :
2550: LD_VAR 0 3
2554: PUSH
2555: LD_INT 1
2557: DOUBLE
2558: EQUAL
2559: IFTRUE 2563
2561: GO 2573
2563: POP
// RaiseSailEvent ( 31 ) ; 2 :
2564: LD_INT 31
2566: PPUSH
2567: CALL_OW 427
2571: GO 2610
2573: LD_INT 2
2575: DOUBLE
2576: EQUAL
2577: IFTRUE 2581
2579: GO 2591
2581: POP
// RaiseSailEvent ( 32 ) ; 3 :
2582: LD_INT 32
2584: PPUSH
2585: CALL_OW 427
2589: GO 2610
2591: LD_INT 3
2593: DOUBLE
2594: EQUAL
2595: IFTRUE 2599
2597: GO 2609
2599: POP
// RaiseSailEvent ( 33 ) ; end ;
2600: LD_INT 33
2602: PPUSH
2603: CALL_OW 427
2607: GO 2610
2609: POP
// RaiseSailEvent ( 33 ) ;
2610: LD_INT 33
2612: PPUSH
2613: CALL_OW 427
// if game_difficulty > 1 then
2617: LD_EXP 2
2621: PUSH
2622: LD_INT 1
2624: GREATER
2625: IFFALSE 2634
// RaiseSailEvent ( 33 ) ;
2627: LD_INT 33
2629: PPUSH
2630: CALL_OW 427
// if heike_dialog1 = false then
2634: LD_EXP 44
2638: PUSH
2639: LD_INT 0
2641: EQUAL
2642: IFFALSE 2673
// begin heike_dialog1 := true ;
2644: LD_ADDR_EXP 44
2648: PUSH
2649: LD_INT 1
2651: ST_TO_ADDR
// Wait ( 0 0$03 ) ;
2652: LD_INT 105
2654: PPUSH
2655: CALL_OW 67
// SayRadio ( ar_comander , heike1 ) ;
2659: LD_EXP 48
2663: PPUSH
2664: LD_STRING heike1
2666: PPUSH
2667: CALL_OW 94
// end else
2671: GO 2710
// if heike_dialog2 = false then
2673: LD_EXP 45
2677: PUSH
2678: LD_INT 0
2680: EQUAL
2681: IFFALSE 2710
// begin heike_dialog2 := true ;
2683: LD_ADDR_EXP 45
2687: PUSH
2688: LD_INT 1
2690: ST_TO_ADDR
// Wait ( 0 0$03 ) ;
2691: LD_INT 105
2693: PPUSH
2694: CALL_OW 67
// SayRadio ( ar_comander , heike2 ) ;
2698: LD_EXP 48
2702: PPUSH
2703: LD_STRING heike2
2705: PPUSH
2706: CALL_OW 94
// end ; end ; if FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) > 0 then
2710: LD_INT 22
2712: PUSH
2713: LD_INT 2
2715: PUSH
2716: EMPTY
2717: LIST
2718: LIST
2719: PUSH
2720: LD_INT 33
2722: PUSH
2723: LD_INT 2
2725: PUSH
2726: EMPTY
2727: LIST
2728: LIST
2729: PUSH
2730: EMPTY
2731: LIST
2732: LIST
2733: PPUSH
2734: CALL_OW 69
2738: PUSH
2739: LD_INT 0
2741: GREATER
2742: IFFALSE 2751
// ConnectWithTower ( 2 ) ;
2744: LD_INT 2
2746: PPUSH
2747: CALL 7128 0 1
// if FilterAllUnits ( [ [ [ f_side , 2 ] , [ f_not , [ f_weapon , ar_control_tower ] ] , [ f_not , [ f_hastask ] ] ] ] ) > 0 then
2751: LD_INT 22
2753: PUSH
2754: LD_INT 2
2756: PUSH
2757: EMPTY
2758: LIST
2759: LIST
2760: PUSH
2761: LD_INT 3
2763: PUSH
2764: LD_INT 34
2766: PUSH
2767: LD_INT 31
2769: PUSH
2770: EMPTY
2771: LIST
2772: LIST
2773: PUSH
2774: EMPTY
2775: LIST
2776: LIST
2777: PUSH
2778: LD_INT 3
2780: PUSH
2781: LD_INT 60
2783: PUSH
2784: EMPTY
2785: LIST
2786: PUSH
2787: EMPTY
2788: LIST
2789: LIST
2790: PUSH
2791: EMPTY
2792: LIST
2793: LIST
2794: LIST
2795: PUSH
2796: EMPTY
2797: LIST
2798: PPUSH
2799: CALL_OW 69
2803: PUSH
2804: LD_INT 0
2806: GREATER
2807: IFFALSE 2953
// begin filter := FilterAllUnits ( [ [ [ f_side , 2 ] , [ f_not , [ f_weapon , ar_control_tower ] ] , [ f_not , [ f_hastask ] ] ] ] ) ;
2809: LD_ADDR_VAR 0 4
2813: PUSH
2814: LD_INT 22
2816: PUSH
2817: LD_INT 2
2819: PUSH
2820: EMPTY
2821: LIST
2822: LIST
2823: PUSH
2824: LD_INT 3
2826: PUSH
2827: LD_INT 34
2829: PUSH
2830: LD_INT 31
2832: PUSH
2833: EMPTY
2834: LIST
2835: LIST
2836: PUSH
2837: EMPTY
2838: LIST
2839: LIST
2840: PUSH
2841: LD_INT 3
2843: PUSH
2844: LD_INT 60
2846: PUSH
2847: EMPTY
2848: LIST
2849: PUSH
2850: EMPTY
2851: LIST
2852: LIST
2853: PUSH
2854: EMPTY
2855: LIST
2856: LIST
2857: LIST
2858: PUSH
2859: EMPTY
2860: LIST
2861: PPUSH
2862: CALL_OW 69
2866: ST_TO_ADDR
// x := SpeedFilter ( FilterAllUnits ( [ f_enemy , 2 ] ) , 20 ) ;
2867: LD_ADDR_VAR 0 3
2871: PUSH
2872: LD_INT 81
2874: PUSH
2875: LD_INT 2
2877: PUSH
2878: EMPTY
2879: LIST
2880: LIST
2881: PPUSH
2882: CALL_OW 69
2886: PPUSH
2887: LD_INT 20
2889: PPUSH
2890: CALL 8511 0 2
2894: ST_TO_ADDR
// for i = 1 to filter do
2895: LD_ADDR_VAR 0 1
2899: PUSH
2900: DOUBLE
2901: LD_INT 1
2903: DEC
2904: ST_TO_ADDR
2905: LD_VAR 0 4
2909: PUSH
2910: FOR_TO
2911: IFFALSE 2951
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( x , filter [ i ] ) ) ;
2913: LD_VAR 0 4
2917: PUSH
2918: LD_VAR 0 1
2922: ARRAY
2923: PPUSH
2924: LD_VAR 0 3
2928: PPUSH
2929: LD_VAR 0 4
2933: PUSH
2934: LD_VAR 0 1
2938: ARRAY
2939: PPUSH
2940: CALL_OW 74
2944: PPUSH
2945: CALL_OW 115
2949: GO 2910
2951: POP
2952: POP
// end ; if FilterAllUnits ( [ [ [ f_side , 3 ] , [ f_not , [ f_hastask ] ] ] ] ) > 0 then
2953: LD_INT 22
2955: PUSH
2956: LD_INT 3
2958: PUSH
2959: EMPTY
2960: LIST
2961: LIST
2962: PUSH
2963: LD_INT 3
2965: PUSH
2966: LD_INT 60
2968: PUSH
2969: EMPTY
2970: LIST
2971: PUSH
2972: EMPTY
2973: LIST
2974: LIST
2975: PUSH
2976: EMPTY
2977: LIST
2978: LIST
2979: PUSH
2980: EMPTY
2981: LIST
2982: PPUSH
2983: CALL_OW 69
2987: PUSH
2988: LD_INT 0
2990: GREATER
2991: IFFALSE 3137
// begin filter := FilterAllUnits ( [ [ [ f_side , 3 ] , [ f_not , [ f_weapon , ar_control_tower ] ] , [ f_not , [ f_hastask ] ] ] ] ) ;
2993: LD_ADDR_VAR 0 4
2997: PUSH
2998: LD_INT 22
3000: PUSH
3001: LD_INT 3
3003: PUSH
3004: EMPTY
3005: LIST
3006: LIST
3007: PUSH
3008: LD_INT 3
3010: PUSH
3011: LD_INT 34
3013: PUSH
3014: LD_INT 31
3016: PUSH
3017: EMPTY
3018: LIST
3019: LIST
3020: PUSH
3021: EMPTY
3022: LIST
3023: LIST
3024: PUSH
3025: LD_INT 3
3027: PUSH
3028: LD_INT 60
3030: PUSH
3031: EMPTY
3032: LIST
3033: PUSH
3034: EMPTY
3035: LIST
3036: LIST
3037: PUSH
3038: EMPTY
3039: LIST
3040: LIST
3041: LIST
3042: PUSH
3043: EMPTY
3044: LIST
3045: PPUSH
3046: CALL_OW 69
3050: ST_TO_ADDR
// x := SpeedFilter ( FilterAllUnits ( [ f_enemy , 3 ] ) , 20 ) ;
3051: LD_ADDR_VAR 0 3
3055: PUSH
3056: LD_INT 81
3058: PUSH
3059: LD_INT 3
3061: PUSH
3062: EMPTY
3063: LIST
3064: LIST
3065: PPUSH
3066: CALL_OW 69
3070: PPUSH
3071: LD_INT 20
3073: PPUSH
3074: CALL 8511 0 2
3078: ST_TO_ADDR
// for i = 1 to filter do
3079: LD_ADDR_VAR 0 1
3083: PUSH
3084: DOUBLE
3085: LD_INT 1
3087: DEC
3088: ST_TO_ADDR
3089: LD_VAR 0 4
3093: PUSH
3094: FOR_TO
3095: IFFALSE 3135
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( x , filter [ i ] ) ) ;
3097: LD_VAR 0 4
3101: PUSH
3102: LD_VAR 0 1
3106: ARRAY
3107: PPUSH
3108: LD_VAR 0 3
3112: PPUSH
3113: LD_VAR 0 4
3117: PUSH
3118: LD_VAR 0 1
3122: ARRAY
3123: PPUSH
3124: CALL_OW 74
3128: PPUSH
3129: CALL_OW 115
3133: GO 3094
3135: POP
3136: POP
// end ; if FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] ] ] ) > 0 then
3137: LD_INT 22
3139: PUSH
3140: LD_INT 1
3142: PUSH
3143: EMPTY
3144: LIST
3145: LIST
3146: PUSH
3147: LD_INT 3
3149: PUSH
3150: LD_INT 60
3152: PUSH
3153: EMPTY
3154: LIST
3155: PUSH
3156: EMPTY
3157: LIST
3158: LIST
3159: PUSH
3160: EMPTY
3161: LIST
3162: LIST
3163: PUSH
3164: EMPTY
3165: LIST
3166: PPUSH
3167: CALL_OW 69
3171: PUSH
3172: LD_INT 0
3174: GREATER
3175: IFFALSE 3321
// begin filter := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_not , [ f_weapon , ar_control_tower ] ] , [ f_not , [ f_hastask ] ] ] ] ) ;
3177: LD_ADDR_VAR 0 4
3181: PUSH
3182: LD_INT 22
3184: PUSH
3185: LD_INT 1
3187: PUSH
3188: EMPTY
3189: LIST
3190: LIST
3191: PUSH
3192: LD_INT 3
3194: PUSH
3195: LD_INT 34
3197: PUSH
3198: LD_INT 31
3200: PUSH
3201: EMPTY
3202: LIST
3203: LIST
3204: PUSH
3205: EMPTY
3206: LIST
3207: LIST
3208: PUSH
3209: LD_INT 3
3211: PUSH
3212: LD_INT 60
3214: PUSH
3215: EMPTY
3216: LIST
3217: PUSH
3218: EMPTY
3219: LIST
3220: LIST
3221: PUSH
3222: EMPTY
3223: LIST
3224: LIST
3225: LIST
3226: PUSH
3227: EMPTY
3228: LIST
3229: PPUSH
3230: CALL_OW 69
3234: ST_TO_ADDR
// x := SpeedFilter ( FilterAllUnits ( [ f_enemy , 1 ] ) , 20 ) ;
3235: LD_ADDR_VAR 0 3
3239: PUSH
3240: LD_INT 81
3242: PUSH
3243: LD_INT 1
3245: PUSH
3246: EMPTY
3247: LIST
3248: LIST
3249: PPUSH
3250: CALL_OW 69
3254: PPUSH
3255: LD_INT 20
3257: PPUSH
3258: CALL 8511 0 2
3262: ST_TO_ADDR
// for i = 1 to filter do
3263: LD_ADDR_VAR 0 1
3267: PUSH
3268: DOUBLE
3269: LD_INT 1
3271: DEC
3272: ST_TO_ADDR
3273: LD_VAR 0 4
3277: PUSH
3278: FOR_TO
3279: IFFALSE 3319
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( x , filter [ i ] ) ) ;
3281: LD_VAR 0 4
3285: PUSH
3286: LD_VAR 0 1
3290: ARRAY
3291: PPUSH
3292: LD_VAR 0 3
3296: PPUSH
3297: LD_VAR 0 4
3301: PUSH
3302: LD_VAR 0 1
3306: ARRAY
3307: PPUSH
3308: CALL_OW 74
3312: PPUSH
3313: CALL_OW 115
3317: GO 3278
3319: POP
3320: POP
// end ; if FilterAllUnits ( [ [ [ f_side , 2 ] , [ f_weapon , ar_bio_bomb ] , [ f_not , [ f_lives , 700 ] ] ] ] ) > 0 then
3321: LD_INT 22
3323: PUSH
3324: LD_INT 2
3326: PUSH
3327: EMPTY
3328: LIST
3329: LIST
3330: PUSH
3331: LD_INT 34
3333: PUSH
3334: LD_EXP 56
3338: PUSH
3339: EMPTY
3340: LIST
3341: LIST
3342: PUSH
3343: LD_INT 3
3345: PUSH
3346: LD_INT 24
3348: PUSH
3349: LD_INT 700
3351: PUSH
3352: EMPTY
3353: LIST
3354: LIST
3355: PUSH
3356: EMPTY
3357: LIST
3358: LIST
3359: PUSH
3360: EMPTY
3361: LIST
3362: LIST
3363: LIST
3364: PUSH
3365: EMPTY
3366: LIST
3367: PPUSH
3368: CALL_OW 69
3372: PUSH
3373: LD_INT 0
3375: GREATER
3376: IFFALSE 3475
// begin filter := FilterAllUnits ( [ [ [ f_side , 2 ] , [ f_weapon , ar_bio_bomb ] , [ f_not , [ f_lives , 700 ] ] ] ] ) ;
3378: LD_ADDR_VAR 0 4
3382: PUSH
3383: LD_INT 22
3385: PUSH
3386: LD_INT 2
3388: PUSH
3389: EMPTY
3390: LIST
3391: LIST
3392: PUSH
3393: LD_INT 34
3395: PUSH
3396: LD_EXP 56
3400: PUSH
3401: EMPTY
3402: LIST
3403: LIST
3404: PUSH
3405: LD_INT 3
3407: PUSH
3408: LD_INT 24
3410: PUSH
3411: LD_INT 700
3413: PUSH
3414: EMPTY
3415: LIST
3416: LIST
3417: PUSH
3418: EMPTY
3419: LIST
3420: LIST
3421: PUSH
3422: EMPTY
3423: LIST
3424: LIST
3425: LIST
3426: PUSH
3427: EMPTY
3428: LIST
3429: PPUSH
3430: CALL_OW 69
3434: ST_TO_ADDR
// for i = 1 to filter do
3435: LD_ADDR_VAR 0 1
3439: PUSH
3440: DOUBLE
3441: LD_INT 1
3443: DEC
3444: ST_TO_ADDR
3445: LD_VAR 0 4
3449: PUSH
3450: FOR_TO
3451: IFFALSE 3473
// SetLives ( filter [ i ] , 1 ) ;
3453: LD_VAR 0 4
3457: PUSH
3458: LD_VAR 0 1
3462: ARRAY
3463: PPUSH
3464: LD_INT 1
3466: PPUSH
3467: CALL_OW 234
3471: GO 3450
3473: POP
3474: POP
// end ; end ; end_of_file
3475: PPOPN 4
3477: END
// export function Start_Mission ; begin
3478: LD_INT 0
3480: PPUSH
// PrepareLegion ;
3481: CALL 3522 0 0
// PrepareMeeting ;
3485: CALL 4139 0 0
// case Query ( DS-text-beg ) of 1 :
3489: LD_STRING DS-text-beg
3491: PPUSH
3492: CALL_OW 97
3496: PUSH
3497: LD_INT 1
3499: DOUBLE
3500: EQUAL
3501: IFTRUE 3505
3503: GO 3508
3505: POP
// ; end ;
3506: GO 3509
3508: POP
// game_on := true ;
3509: LD_ADDR_EXP 1
3513: PUSH
3514: LD_INT 1
3516: ST_TO_ADDR
// end ;
3517: LD_VAR 0 1
3521: RET
// export l_cmndr , l_skill , l_units ; function PrepareLegion ; var i , p , filter , team ; begin
3522: LD_INT 0
3524: PPUSH
3525: PPUSH
3526: PPUSH
3527: PPUSH
3528: PPUSH
// uc_side := 8 ;
3529: LD_ADDR_OWVAR 20
3533: PUSH
3534: LD_INT 8
3536: ST_TO_ADDR
// uc_nation := 2 ;
3537: LD_ADDR_OWVAR 21
3541: PUSH
3542: LD_INT 2
3544: ST_TO_ADDR
// l_skill := [ 9 , 8 , 7 ] [ difficulty ] ;
3545: LD_ADDR_EXP 50
3549: PUSH
3550: LD_INT 9
3552: PUSH
3553: LD_INT 8
3555: PUSH
3556: LD_INT 7
3558: PUSH
3559: EMPTY
3560: LIST
3561: LIST
3562: LIST
3563: PUSH
3564: LD_OWVAR 67
3568: ARRAY
3569: ST_TO_ADDR
// l_units := [ 9 , 8 , 8 ] [ difficulty ] ;
3570: LD_ADDR_EXP 51
3574: PUSH
3575: LD_INT 9
3577: PUSH
3578: LD_INT 8
3580: PUSH
3581: LD_INT 8
3583: PUSH
3584: EMPTY
3585: LIST
3586: LIST
3587: LIST
3588: PUSH
3589: LD_OWVAR 67
3593: ARRAY
3594: ST_TO_ADDR
// filter := [ ] ;
3595: LD_ADDR_VAR 0 4
3599: PUSH
3600: EMPTY
3601: ST_TO_ADDR
// hc_gallery := desert ;
3602: LD_ADDR_OWVAR 33
3606: PUSH
3607: LD_STRING desert
3609: ST_TO_ADDR
// hc_face_number := 1 ;
3610: LD_ADDR_OWVAR 34
3614: PUSH
3615: LD_INT 1
3617: ST_TO_ADDR
// hc_skills := [ l_skill + 2 , l_skill - 1 , l_skill , l_skill + 1 ] ;
3618: LD_ADDR_OWVAR 31
3622: PUSH
3623: LD_EXP 50
3627: PUSH
3628: LD_INT 2
3630: PLUS
3631: PUSH
3632: LD_EXP 50
3636: PUSH
3637: LD_INT 1
3639: MINUS
3640: PUSH
3641: LD_EXP 50
3645: PUSH
3646: LD_EXP 50
3650: PUSH
3651: LD_INT 1
3653: PLUS
3654: PUSH
3655: EMPTY
3656: LIST
3657: LIST
3658: LIST
3659: LIST
3660: ST_TO_ADDR
// hc_sex := sex_male ;
3661: LD_ADDR_OWVAR 27
3665: PUSH
3666: LD_INT 1
3668: ST_TO_ADDR
// hc_name := Henri Ruotz ;
3669: LD_ADDR_OWVAR 26
3673: PUSH
3674: LD_STRING Henri Ruotz
3676: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
3677: LD_ADDR_OWVAR 29
3681: PUSH
3682: LD_INT 10
3684: PUSH
3685: LD_INT 10
3687: PUSH
3688: EMPTY
3689: LIST
3690: LIST
3691: ST_TO_ADDR
// hc_class := 1 ;
3692: LD_ADDR_OWVAR 28
3696: PUSH
3697: LD_INT 1
3699: ST_TO_ADDR
// hc_importance := 100 ;
3700: LD_ADDR_OWVAR 32
3704: PUSH
3705: LD_INT 100
3707: ST_TO_ADDR
// l_cmndr := CreateHuman ;
3708: LD_ADDR_EXP 49
3712: PUSH
3713: CALL_OW 44
3717: ST_TO_ADDR
// hc_importance := 0 ;
3718: LD_ADDR_OWVAR 32
3722: PUSH
3723: LD_INT 0
3725: ST_TO_ADDR
// scout := PrepareHuman ( sex_male , 1 , 0 ) ;
3726: LD_ADDR_EXP 12
3730: PUSH
3731: LD_INT 1
3733: PPUSH
3734: LD_INT 1
3736: PPUSH
3737: LD_INT 0
3739: PPUSH
3740: CALL_OW 380
3744: ST_TO_ADDR
// for i = 1 to 4 do
3745: LD_ADDR_VAR 0 2
3749: PUSH
3750: DOUBLE
3751: LD_INT 1
3753: DEC
3754: ST_TO_ADDR
3755: LD_INT 4
3757: PUSH
3758: FOR_TO
3759: IFFALSE 3809
// for p = 1 to 6 do
3761: LD_ADDR_VAR 0 3
3765: PUSH
3766: DOUBLE
3767: LD_INT 1
3769: DEC
3770: ST_TO_ADDR
3771: LD_INT 6
3773: PUSH
3774: FOR_TO
3775: IFFALSE 3805
// filter := filter ^ CreateHumanWithClass ( i , l_skill ) ;
3777: LD_ADDR_VAR 0 4
3781: PUSH
3782: LD_VAR 0 4
3786: PUSH
3787: LD_VAR 0 2
3791: PPUSH
3792: LD_EXP 50
3796: PPUSH
3797: CALL 7312 0 2
3801: ADD
3802: ST_TO_ADDR
3803: GO 3774
3805: POP
3806: POP
3807: GO 3758
3809: POP
3810: POP
// team := CharacterSelection ( text , l_units , l_units , [ sel_change_class , l_cmndr , sel_changeable , sel_not_hired ] ^ filter , [ class_soldier , class_mechanic , class_engineer , class_scientistic , class_mortar ] ) ;
3811: LD_ADDR_VAR 0 5
3815: PUSH
3816: LD_STRING text
3818: PPUSH
3819: LD_EXP 51
3823: PPUSH
3824: LD_EXP 51
3828: PPUSH
3829: LD_INT -5
3831: PUSH
3832: LD_EXP 49
3836: PUSH
3837: LD_INT -3
3839: PUSH
3840: LD_INT -2
3842: PUSH
3843: EMPTY
3844: LIST
3845: LIST
3846: LIST
3847: LIST
3848: PUSH
3849: LD_VAR 0 4
3853: ADD
3854: PPUSH
3855: LD_INT 1
3857: PUSH
3858: LD_INT 3
3860: PUSH
3861: LD_INT 2
3863: PUSH
3864: LD_INT 4
3866: PUSH
3867: LD_INT 8
3869: PUSH
3870: EMPTY
3871: LIST
3872: LIST
3873: LIST
3874: LIST
3875: LIST
3876: PPUSH
3877: CALL_OW 42
3881: ST_TO_ADDR
// for i = 1 to l_units do
3882: LD_ADDR_VAR 0 2
3886: PUSH
3887: DOUBLE
3888: LD_INT 1
3890: DEC
3891: ST_TO_ADDR
3892: LD_EXP 51
3896: PUSH
3897: FOR_TO
3898: IFFALSE 3923
// PlaceUnitArea ( team [ i ] , legion_spawn , false ) ;
3900: LD_VAR 0 5
3904: PUSH
3905: LD_VAR 0 2
3909: ARRAY
3910: PPUSH
3911: LD_INT 1
3913: PPUSH
3914: LD_INT 0
3916: PPUSH
3917: CALL_OW 49
3921: GO 3897
3923: POP
3924: POP
// PlaceUnitArea ( l_cmndr , legion_spawn , false ) ;
3925: LD_EXP 49
3929: PPUSH
3930: LD_INT 1
3932: PPUSH
3933: LD_INT 0
3935: PPUSH
3936: CALL_OW 49
// end ;
3940: LD_VAR 0 1
3944: RET
// export function PlaceCamera ; begin
3945: LD_INT 0
3947: PPUSH
// PlaceSeeing ( 46 , 48 , 8 , 10 ) ;
3948: LD_INT 46
3950: PPUSH
3951: LD_INT 48
3953: PPUSH
3954: LD_INT 8
3956: PPUSH
3957: LD_INT 10
3959: PPUSH
3960: CALL_OW 330
// PlaceSeeing ( 58 , 66 , 8 , 10 ) ;
3964: LD_INT 58
3966: PPUSH
3967: LD_INT 66
3969: PPUSH
3970: LD_INT 8
3972: PPUSH
3973: LD_INT 10
3975: PPUSH
3976: CALL_OW 330
// PlaceSeeing ( 82 , 82 , 8 , 10 ) ;
3980: LD_INT 82
3982: PPUSH
3983: LD_INT 82
3985: PPUSH
3986: LD_INT 8
3988: PPUSH
3989: LD_INT 10
3991: PPUSH
3992: CALL_OW 330
// PlaceSeeing ( 107 , 79 , 8 , 10 ) ;
3996: LD_INT 107
3998: PPUSH
3999: LD_INT 79
4001: PPUSH
4002: LD_INT 8
4004: PPUSH
4005: LD_INT 10
4007: PPUSH
4008: CALL_OW 330
// PlaceSeeing ( 101 , 57 , 8 , 10 ) ;
4012: LD_INT 101
4014: PPUSH
4015: LD_INT 57
4017: PPUSH
4018: LD_INT 8
4020: PPUSH
4021: LD_INT 10
4023: PPUSH
4024: CALL_OW 330
// PlaceSeeing ( 85 , 32 , 8 , 10 ) ;
4028: LD_INT 85
4030: PPUSH
4031: LD_INT 32
4033: PPUSH
4034: LD_INT 8
4036: PPUSH
4037: LD_INT 10
4039: PPUSH
4040: CALL_OW 330
// PlaceSeeing ( 108 , 72 , 8 , 10 ) ;
4044: LD_INT 108
4046: PPUSH
4047: LD_INT 72
4049: PPUSH
4050: LD_INT 8
4052: PPUSH
4053: LD_INT 10
4055: PPUSH
4056: CALL_OW 330
// PlaceSeeing ( 124 , 74 , 8 , 10 ) ;
4060: LD_INT 124
4062: PPUSH
4063: LD_INT 74
4065: PPUSH
4066: LD_INT 8
4068: PPUSH
4069: LD_INT 10
4071: PPUSH
4072: CALL_OW 330
// PlaceSeeing ( 67 , 33 , 8 , 20 ) ;
4076: LD_INT 67
4078: PPUSH
4079: LD_INT 33
4081: PPUSH
4082: LD_INT 8
4084: PPUSH
4085: LD_INT 20
4087: PPUSH
4088: CALL_OW 330
// RemoveSeeing ( 67 , 33 , 8 ) ;
4092: LD_INT 67
4094: PPUSH
4095: LD_INT 33
4097: PPUSH
4098: LD_INT 8
4100: PPUSH
4101: CALL_OW 331
// PlaceSeeing ( 94 , 84 , 8 , 20 ) ;
4105: LD_INT 94
4107: PPUSH
4108: LD_INT 84
4110: PPUSH
4111: LD_INT 8
4113: PPUSH
4114: LD_INT 20
4116: PPUSH
4117: CALL_OW 330
// RemoveSeeing ( 94 , 84 , 8 ) ;
4121: LD_INT 94
4123: PPUSH
4124: LD_INT 84
4126: PPUSH
4127: LD_INT 8
4129: PPUSH
4130: CALL_OW 331
// end ;
4134: LD_VAR 0 1
4138: RET
// export function PrepareMeeting ; begin
4139: LD_INT 0
4141: PPUSH
// uc_side := 6 ;
4142: LD_ADDR_OWVAR 20
4146: PUSH
4147: LD_INT 6
4149: ST_TO_ADDR
// hc_gallery := desert ;
4150: LD_ADDR_OWVAR 33
4154: PUSH
4155: LD_STRING desert
4157: ST_TO_ADDR
// hc_face_number := 2 ;
4158: LD_ADDR_OWVAR 34
4162: PUSH
4163: LD_INT 2
4165: ST_TO_ADDR
// hc_name := Leopold Drass ;
4166: LD_ADDR_OWVAR 26
4170: PUSH
4171: LD_STRING Leopold Drass
4173: ST_TO_ADDR
// hc_class := 1 ;
4174: LD_ADDR_OWVAR 28
4178: PUSH
4179: LD_INT 1
4181: ST_TO_ADDR
// hc_sex := sex_male ;
4182: LD_ADDR_OWVAR 27
4186: PUSH
4187: LD_INT 1
4189: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
4190: LD_ADDR_OWVAR 29
4194: PUSH
4195: LD_INT 12
4197: PUSH
4198: LD_INT 12
4200: PUSH
4201: EMPTY
4202: LIST
4203: LIST
4204: ST_TO_ADDR
// Leopold := CreateHuman ;
4205: LD_ADDR_EXP 7
4209: PUSH
4210: CALL_OW 44
4214: ST_TO_ADDR
// PlaceUnitArea ( Leopold , north_spawn , false ) ;
4215: LD_EXP 7
4219: PPUSH
4220: LD_INT 3
4222: PPUSH
4223: LD_INT 0
4225: PPUSH
4226: CALL_OW 49
// end ; end_of_file
4230: LD_VAR 0 1
4234: RET
// on SailEvent ( num ) do var i , filter , un , p , area ;
4235: LD_INT 0
4237: PPUSH
4238: PPUSH
4239: PPUSH
4240: PPUSH
4241: PPUSH
// begin case num of 1 :
4242: LD_VAR 0 1
4246: PUSH
4247: LD_INT 1
4249: DOUBLE
4250: EQUAL
4251: IFTRUE 4255
4253: GO 4287
4255: POP
// begin ComMoveXY ( leopold , GetX ( l_cmndr ) , GetY ( l_cmndr ) ) ;
4256: LD_EXP 7
4260: PPUSH
4261: LD_EXP 49
4265: PPUSH
4266: CALL_OW 250
4270: PPUSH
4271: LD_EXP 49
4275: PPUSH
4276: CALL_OW 251
4280: PPUSH
4281: CALL_OW 111
// end ; 2 :
4285: GO 6705
4287: LD_INT 2
4289: DOUBLE
4290: EQUAL
4291: IFTRUE 4295
4293: GO 4404
4295: POP
// begin InGameOn ;
4296: CALL_OW 8
// meeting_start := true ;
4300: LD_ADDR_EXP 26
4304: PUSH
4305: LD_INT 1
4307: ST_TO_ADDR
// ComTurnUnit ( leopold , l_cmndr ) ;
4308: LD_EXP 7
4312: PPUSH
4313: LD_EXP 49
4317: PPUSH
4318: CALL_OW 119
// ComTurnUnit ( l_cmndr , leopold ) ;
4322: LD_EXP 49
4326: PPUSH
4327: LD_EXP 7
4331: PPUSH
4332: CALL_OW 119
// Say ( leopold , DS-DL-1 ) ;
4336: LD_EXP 7
4340: PPUSH
4341: LD_STRING DS-DL-1
4343: PPUSH
4344: CALL_OW 88
// Say ( l_cmndr , DS-DC-1 ) ;
4348: LD_EXP 49
4352: PPUSH
4353: LD_STRING DS-DC-1
4355: PPUSH
4356: CALL_OW 88
// Say ( leopold , DS-DL-2 ) ;
4360: LD_EXP 7
4364: PPUSH
4365: LD_STRING DS-DL-2
4367: PPUSH
4368: CALL_OW 88
// ComEnterUnit ( leopold , fort ) ;
4372: LD_EXP 7
4376: PPUSH
4377: LD_INT 23
4379: PPUSH
4380: CALL_OW 120
// InGameOff ;
4384: CALL_OW 9
// Wait ( 0 0$01 ) ;
4388: LD_INT 35
4390: PPUSH
4391: CALL_OW 67
// ChangeMissionObjectives ( DS-T1 ) ;
4395: LD_STRING DS-T1
4397: PPUSH
4398: CALL_OW 337
// end ; 10 :
4402: GO 6705
4404: LD_INT 10
4406: DOUBLE
4407: EQUAL
4408: IFTRUE 4412
4410: GO 4624
4412: POP
// begin uc_side := 6 ;
4413: LD_ADDR_OWVAR 20
4417: PUSH
4418: LD_INT 6
4420: ST_TO_ADDR
// uc_nation := 2 ;
4421: LD_ADDR_OWVAR 21
4425: PUSH
4426: LD_INT 2
4428: ST_TO_ADDR
// hc_gallery :=  ;
4429: LD_ADDR_OWVAR 33
4433: PUSH
4434: LD_STRING 
4436: ST_TO_ADDR
// hc_skills := [ skill + 2 , skill - 1 , skill , skill + 1 ] ;
4437: LD_ADDR_OWVAR 31
4441: PUSH
4442: LD_EXP 16
4446: PUSH
4447: LD_INT 2
4449: PLUS
4450: PUSH
4451: LD_EXP 16
4455: PUSH
4456: LD_INT 1
4458: MINUS
4459: PUSH
4460: LD_EXP 16
4464: PUSH
4465: LD_EXP 16
4469: PUSH
4470: LD_INT 1
4472: PLUS
4473: PUSH
4474: EMPTY
4475: LIST
4476: LIST
4477: LIST
4478: LIST
4479: ST_TO_ADDR
// hc_sex := sex_male ;
4480: LD_ADDR_OWVAR 27
4484: PUSH
4485: LD_INT 1
4487: ST_TO_ADDR
// hc_name := Samuel van Horn ;
4488: LD_ADDR_OWVAR 26
4492: PUSH
4493: LD_STRING Samuel van Horn
4495: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
4496: LD_ADDR_OWVAR 29
4500: PUSH
4501: LD_INT 11
4503: PUSH
4504: LD_INT 10
4506: PUSH
4507: EMPTY
4508: LIST
4509: LIST
4510: ST_TO_ADDR
// hc_class := 1 ;
4511: LD_ADDR_OWVAR 28
4515: PUSH
4516: LD_INT 1
4518: ST_TO_ADDR
// samuel := CreateHuman ;
4519: LD_ADDR_EXP 9
4523: PUSH
4524: CALL_OW 44
4528: ST_TO_ADDR
// PlaceUnitArea ( samuel , south_spawn , false ) ;
4529: LD_EXP 9
4533: PPUSH
4534: LD_INT 4
4536: PPUSH
4537: LD_INT 0
4539: PPUSH
4540: CALL_OW 49
// for i = 1 to 3 do
4544: LD_ADDR_VAR 0 2
4548: PUSH
4549: DOUBLE
4550: LD_INT 1
4552: DEC
4553: ST_TO_ADDR
4554: LD_INT 3
4556: PUSH
4557: FOR_TO
4558: IFFALSE 4585
// PlaceUnitArea ( CreateHumanWithClass ( class_mortar , skill ) , south_spawn , false ) ;
4560: LD_INT 8
4562: PPUSH
4563: LD_EXP 16
4567: PPUSH
4568: CALL 7312 0 2
4572: PPUSH
4573: LD_INT 4
4575: PPUSH
4576: LD_INT 0
4578: PPUSH
4579: CALL_OW 49
4583: GO 4557
4585: POP
4586: POP
// ComEnterUnit ( FilterAllUnits ( [ f_side , 6 ] ) diff [ leopold , fort ] , fort ) ;
4587: LD_INT 22
4589: PUSH
4590: LD_INT 6
4592: PUSH
4593: EMPTY
4594: LIST
4595: LIST
4596: PPUSH
4597: CALL_OW 69
4601: PUSH
4602: LD_EXP 7
4606: PUSH
4607: LD_INT 23
4609: PUSH
4610: EMPTY
4611: LIST
4612: LIST
4613: DIFF
4614: PPUSH
4615: LD_INT 23
4617: PPUSH
4618: CALL_OW 120
// end ; 3 :
4622: GO 6705
4624: LD_INT 3
4626: DOUBLE
4627: EQUAL
4628: IFTRUE 4632
4630: GO 4643
4632: POP
// begin arabian_attack := true ;
4633: LD_ADDR_EXP 38
4637: PUSH
4638: LD_INT 1
4640: ST_TO_ADDR
// end ; 4 :
4641: GO 6705
4643: LD_INT 4
4645: DOUBLE
4646: EQUAL
4647: IFTRUE 4651
4649: GO 4662
4651: POP
// begin american_attack := true ;
4652: LD_ADDR_EXP 40
4656: PUSH
4657: LD_INT 1
4659: ST_TO_ADDR
// end ; 5 :
4660: GO 6705
4662: LD_INT 5
4664: DOUBLE
4665: EQUAL
4666: IFTRUE 4670
4668: GO 4681
4670: POP
// begin russian_attack := true ;
4671: LD_ADDR_EXP 39
4675: PUSH
4676: LD_INT 1
4678: ST_TO_ADDR
// end ; 31 :
4679: GO 6705
4681: LD_INT 31
4683: DOUBLE
4684: EQUAL
4685: IFTRUE 4689
4687: GO 4964
4689: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
4690: LD_ADDR_VAR 0 6
4694: PUSH
4695: LD_EXP 15
4699: PUSH
4700: LD_INT 1
4702: PPUSH
4703: LD_EXP 15
4707: PPUSH
4708: CALL_OW 12
4712: ARRAY
4713: ST_TO_ADDR
// uc_side := 2 ;
4714: LD_ADDR_OWVAR 20
4718: PUSH
4719: LD_INT 2
4721: ST_TO_ADDR
// uc_nation := 2 ;
4722: LD_ADDR_OWVAR 21
4726: PUSH
4727: LD_INT 2
4729: ST_TO_ADDR
// for i = 1 to arabian_force do
4730: LD_ADDR_VAR 0 2
4734: PUSH
4735: DOUBLE
4736: LD_INT 1
4738: DEC
4739: ST_TO_ADDR
4740: LD_EXP 20
4744: PUSH
4745: FOR_TO
4746: IFFALSE 4825
// begin vc_chassis := ar_half_tracked ;
4748: LD_ADDR_OWVAR 37
4752: PUSH
4753: LD_INT 14
4755: ST_TO_ADDR
// vc_engine := engine_siberite ;
4756: LD_ADDR_OWVAR 39
4760: PUSH
4761: LD_INT 3
4763: ST_TO_ADDR
// vc_control := control_remote ;
4764: LD_ADDR_OWVAR 38
4768: PUSH
4769: LD_INT 2
4771: ST_TO_ADDR
// vc_weapon := ar_weapons [ Rand ( 1 , ar_weapons ) ] ;
4772: LD_ADDR_OWVAR 40
4776: PUSH
4777: LD_EXP 17
4781: PUSH
4782: LD_INT 1
4784: PPUSH
4785: LD_EXP 17
4789: PPUSH
4790: CALL_OW 12
4794: ARRAY
4795: ST_TO_ADDR
// un := CreateVehicle ;
4796: LD_ADDR_VAR 0 4
4800: PUSH
4801: CALL_OW 45
4805: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
4806: LD_VAR 0 4
4810: PPUSH
4811: LD_VAR 0 6
4815: PPUSH
4816: LD_INT 0
4818: PPUSH
4819: CALL_OW 49
// end ;
4823: GO 4745
4825: POP
4826: POP
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_manual ] ] ) < 2 then
4827: LD_INT 22
4829: PUSH
4830: LD_INT 2
4832: PUSH
4833: EMPTY
4834: LIST
4835: LIST
4836: PUSH
4837: LD_INT 33
4839: PUSH
4840: LD_INT 1
4842: PUSH
4843: EMPTY
4844: LIST
4845: LIST
4846: PUSH
4847: EMPTY
4848: LIST
4849: LIST
4850: PPUSH
4851: CALL_OW 69
4855: PUSH
4856: LD_INT 2
4858: LESS
4859: IFFALSE 4962
// for i = 1 to 2 do
4861: LD_ADDR_VAR 0 2
4865: PUSH
4866: DOUBLE
4867: LD_INT 1
4869: DEC
4870: ST_TO_ADDR
4871: LD_INT 2
4873: PUSH
4874: FOR_TO
4875: IFFALSE 4960
// begin vc_chassis := ar_half_tracked ;
4877: LD_ADDR_OWVAR 37
4881: PUSH
4882: LD_INT 14
4884: ST_TO_ADDR
// vc_engine := engine_siberite ;
4885: LD_ADDR_OWVAR 39
4889: PUSH
4890: LD_INT 3
4892: ST_TO_ADDR
// vc_control := control_manual ;
4893: LD_ADDR_OWVAR 38
4897: PUSH
4898: LD_INT 1
4900: ST_TO_ADDR
// vc_weapon := ar_control_tower ;
4901: LD_ADDR_OWVAR 40
4905: PUSH
4906: LD_INT 31
4908: ST_TO_ADDR
// un := CreateVehicle ;
4909: LD_ADDR_VAR 0 4
4913: PUSH
4914: CALL_OW 45
4918: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
4919: LD_VAR 0 4
4923: PPUSH
4924: LD_VAR 0 6
4928: PPUSH
4929: LD_INT 0
4931: PPUSH
4932: CALL_OW 49
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , skill ) , un ) ;
4936: LD_INT 3
4938: PPUSH
4939: LD_EXP 16
4943: PPUSH
4944: CALL 7312 0 2
4948: PPUSH
4949: LD_VAR 0 4
4953: PPUSH
4954: CALL_OW 52
// end ;
4958: GO 4874
4960: POP
4961: POP
// end ; 32 :
4962: GO 6705
4964: LD_INT 32
4966: DOUBLE
4967: EQUAL
4968: IFTRUE 4972
4970: GO 5345
4972: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
4973: LD_ADDR_VAR 0 6
4977: PUSH
4978: LD_EXP 15
4982: PUSH
4983: LD_INT 1
4985: PPUSH
4986: LD_EXP 15
4990: PPUSH
4991: CALL_OW 12
4995: ARRAY
4996: ST_TO_ADDR
// uc_side := 2 ;
4997: LD_ADDR_OWVAR 20
5001: PUSH
5002: LD_INT 2
5004: ST_TO_ADDR
// uc_nation := 2 ;
5005: LD_ADDR_OWVAR 21
5009: PUSH
5010: LD_INT 2
5012: ST_TO_ADDR
// for i = 1 to ( arabian_force - 2 ) do
5013: LD_ADDR_VAR 0 2
5017: PUSH
5018: DOUBLE
5019: LD_INT 1
5021: DEC
5022: ST_TO_ADDR
5023: LD_EXP 20
5027: PUSH
5028: LD_INT 2
5030: MINUS
5031: PUSH
5032: FOR_TO
5033: IFFALSE 5116
// begin vc_chassis := ar_half_tracked ;
5035: LD_ADDR_OWVAR 37
5039: PUSH
5040: LD_INT 14
5042: ST_TO_ADDR
// vc_engine := engine_siberite ;
5043: LD_ADDR_OWVAR 39
5047: PUSH
5048: LD_INT 3
5050: ST_TO_ADDR
// vc_control := control_remote ;
5051: LD_ADDR_OWVAR 38
5055: PUSH
5056: LD_INT 2
5058: ST_TO_ADDR
// vc_weapon := ar_weapons [ Rand ( 1 , ar_weapons - 1 ) ] ;
5059: LD_ADDR_OWVAR 40
5063: PUSH
5064: LD_EXP 17
5068: PUSH
5069: LD_INT 1
5071: PPUSH
5072: LD_EXP 17
5076: PUSH
5077: LD_INT 1
5079: MINUS
5080: PPUSH
5081: CALL_OW 12
5085: ARRAY
5086: ST_TO_ADDR
// un := CreateVehicle ;
5087: LD_ADDR_VAR 0 4
5091: PUSH
5092: CALL_OW 45
5096: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5097: LD_VAR 0 4
5101: PPUSH
5102: LD_VAR 0 6
5106: PPUSH
5107: LD_INT 0
5109: PPUSH
5110: CALL_OW 49
// end ;
5114: GO 5032
5116: POP
5117: POP
// for i = 1 to Rand ( 0 , 1 ) + [ 2 , 3 , 3 ] [ game_difficulty ] do
5118: LD_ADDR_VAR 0 2
5122: PUSH
5123: DOUBLE
5124: LD_INT 1
5126: DEC
5127: ST_TO_ADDR
5128: LD_INT 0
5130: PPUSH
5131: LD_INT 1
5133: PPUSH
5134: CALL_OW 12
5138: PUSH
5139: LD_INT 2
5141: PUSH
5142: LD_INT 3
5144: PUSH
5145: LD_INT 3
5147: PUSH
5148: EMPTY
5149: LIST
5150: LIST
5151: LIST
5152: PUSH
5153: LD_EXP 2
5157: ARRAY
5158: PLUS
5159: PUSH
5160: FOR_TO
5161: IFFALSE 5198
// begin uc_nation := 0 ;
5163: LD_ADDR_OWVAR 21
5167: PUSH
5168: LD_INT 0
5170: ST_TO_ADDR
// PlaceUnitArea ( CreateHumanWithClass ( 17 , skill ) , area , false ) ;
5171: LD_INT 17
5173: PPUSH
5174: LD_EXP 16
5178: PPUSH
5179: CALL 7312 0 2
5183: PPUSH
5184: LD_VAR 0 6
5188: PPUSH
5189: LD_INT 0
5191: PPUSH
5192: CALL_OW 49
// end ;
5196: GO 5160
5198: POP
5199: POP
// uc_nation := 2 ;
5200: LD_ADDR_OWVAR 21
5204: PUSH
5205: LD_INT 2
5207: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_manual ] ] ) < 2 then
5208: LD_INT 22
5210: PUSH
5211: LD_INT 2
5213: PUSH
5214: EMPTY
5215: LIST
5216: LIST
5217: PUSH
5218: LD_INT 33
5220: PUSH
5221: LD_INT 1
5223: PUSH
5224: EMPTY
5225: LIST
5226: LIST
5227: PUSH
5228: EMPTY
5229: LIST
5230: LIST
5231: PPUSH
5232: CALL_OW 69
5236: PUSH
5237: LD_INT 2
5239: LESS
5240: IFFALSE 5343
// for i = 1 to 2 do
5242: LD_ADDR_VAR 0 2
5246: PUSH
5247: DOUBLE
5248: LD_INT 1
5250: DEC
5251: ST_TO_ADDR
5252: LD_INT 2
5254: PUSH
5255: FOR_TO
5256: IFFALSE 5341
// begin vc_chassis := ar_half_tracked ;
5258: LD_ADDR_OWVAR 37
5262: PUSH
5263: LD_INT 14
5265: ST_TO_ADDR
// vc_engine := engine_siberite ;
5266: LD_ADDR_OWVAR 39
5270: PUSH
5271: LD_INT 3
5273: ST_TO_ADDR
// vc_control := control_manual ;
5274: LD_ADDR_OWVAR 38
5278: PUSH
5279: LD_INT 1
5281: ST_TO_ADDR
// vc_weapon := ar_control_tower ;
5282: LD_ADDR_OWVAR 40
5286: PUSH
5287: LD_INT 31
5289: ST_TO_ADDR
// un := CreateVehicle ;
5290: LD_ADDR_VAR 0 4
5294: PUSH
5295: CALL_OW 45
5299: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5300: LD_VAR 0 4
5304: PPUSH
5305: LD_VAR 0 6
5309: PPUSH
5310: LD_INT 0
5312: PPUSH
5313: CALL_OW 49
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , skill ) , un ) ;
5317: LD_INT 3
5319: PPUSH
5320: LD_EXP 16
5324: PPUSH
5325: CALL 7312 0 2
5329: PPUSH
5330: LD_VAR 0 4
5334: PPUSH
5335: CALL_OW 52
// end ;
5339: GO 5255
5341: POP
5342: POP
// end ; 33 :
5343: GO 6705
5345: LD_INT 33
5347: DOUBLE
5348: EQUAL
5349: IFTRUE 5353
5351: GO 5624
5353: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
5354: LD_ADDR_VAR 0 6
5358: PUSH
5359: LD_EXP 15
5363: PUSH
5364: LD_INT 1
5366: PPUSH
5367: LD_EXP 15
5371: PPUSH
5372: CALL_OW 12
5376: ARRAY
5377: ST_TO_ADDR
// uc_side := 2 ;
5378: LD_ADDR_OWVAR 20
5382: PUSH
5383: LD_INT 2
5385: ST_TO_ADDR
// uc_nation := 2 ;
5386: LD_ADDR_OWVAR 21
5390: PUSH
5391: LD_INT 2
5393: ST_TO_ADDR
// for i = 1 to ( arabian_force / 2 ) do
5394: LD_ADDR_VAR 0 2
5398: PUSH
5399: DOUBLE
5400: LD_INT 1
5402: DEC
5403: ST_TO_ADDR
5404: LD_EXP 20
5408: PUSH
5409: LD_INT 2
5411: DIVREAL
5412: PUSH
5413: FOR_TO
5414: IFFALSE 5519
// begin vc_chassis := ar_half_tracked ;
5416: LD_ADDR_OWVAR 37
5420: PUSH
5421: LD_INT 14
5423: ST_TO_ADDR
// vc_engine := engine_siberite ;
5424: LD_ADDR_OWVAR 39
5428: PUSH
5429: LD_INT 3
5431: ST_TO_ADDR
// vc_control := control_manual ;
5432: LD_ADDR_OWVAR 38
5436: PUSH
5437: LD_INT 1
5439: ST_TO_ADDR
// vc_weapon := ar_weapons [ Rand ( 1 , ar_weapons - 2 ) ] ;
5440: LD_ADDR_OWVAR 40
5444: PUSH
5445: LD_EXP 17
5449: PUSH
5450: LD_INT 1
5452: PPUSH
5453: LD_EXP 17
5457: PUSH
5458: LD_INT 2
5460: MINUS
5461: PPUSH
5462: CALL_OW 12
5466: ARRAY
5467: ST_TO_ADDR
// un := CreateVehicle ;
5468: LD_ADDR_VAR 0 4
5472: PUSH
5473: CALL_OW 45
5477: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5478: LD_VAR 0 4
5482: PPUSH
5483: LD_VAR 0 6
5487: PPUSH
5488: LD_INT 0
5490: PPUSH
5491: CALL_OW 49
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , skill ) , un ) ;
5495: LD_INT 3
5497: PPUSH
5498: LD_EXP 16
5502: PPUSH
5503: CALL 7312 0 2
5507: PPUSH
5508: LD_VAR 0 4
5512: PPUSH
5513: CALL_OW 52
// end ;
5517: GO 5413
5519: POP
5520: POP
// for i = 1 to ( arabian_force / 2 ) do
5521: LD_ADDR_VAR 0 2
5525: PUSH
5526: DOUBLE
5527: LD_INT 1
5529: DEC
5530: ST_TO_ADDR
5531: LD_EXP 20
5535: PUSH
5536: LD_INT 2
5538: DIVREAL
5539: PUSH
5540: FOR_TO
5541: IFFALSE 5620
// begin vc_chassis := ar_half_tracked ;
5543: LD_ADDR_OWVAR 37
5547: PUSH
5548: LD_INT 14
5550: ST_TO_ADDR
// vc_engine := engine_siberite ;
5551: LD_ADDR_OWVAR 39
5555: PUSH
5556: LD_INT 3
5558: ST_TO_ADDR
// vc_control := control_apeman ;
5559: LD_ADDR_OWVAR 38
5563: PUSH
5564: LD_INT 5
5566: ST_TO_ADDR
// vc_weapon := ar_weapons [ Rand ( 2 , ar_weapons ) ] ;
5567: LD_ADDR_OWVAR 40
5571: PUSH
5572: LD_EXP 17
5576: PUSH
5577: LD_INT 2
5579: PPUSH
5580: LD_EXP 17
5584: PPUSH
5585: CALL_OW 12
5589: ARRAY
5590: ST_TO_ADDR
// un := CreateVehicle ;
5591: LD_ADDR_VAR 0 4
5595: PUSH
5596: CALL_OW 45
5600: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5601: LD_VAR 0 4
5605: PPUSH
5606: LD_VAR 0 6
5610: PPUSH
5611: LD_INT 0
5613: PPUSH
5614: CALL_OW 49
// end ;
5618: GO 5540
5620: POP
5621: POP
// end ; 41 :
5622: GO 6705
5624: LD_INT 41
5626: DOUBLE
5627: EQUAL
5628: IFTRUE 5632
5630: GO 5776
5632: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
5633: LD_ADDR_VAR 0 6
5637: PUSH
5638: LD_EXP 15
5642: PUSH
5643: LD_INT 1
5645: PPUSH
5646: LD_EXP 15
5650: PPUSH
5651: CALL_OW 12
5655: ARRAY
5656: ST_TO_ADDR
// uc_side := 1 ;
5657: LD_ADDR_OWVAR 20
5661: PUSH
5662: LD_INT 1
5664: ST_TO_ADDR
// uc_nation := 1 ;
5665: LD_ADDR_OWVAR 21
5669: PUSH
5670: LD_INT 1
5672: ST_TO_ADDR
// for i = 1 to american_force do
5673: LD_ADDR_VAR 0 2
5677: PUSH
5678: DOUBLE
5679: LD_INT 1
5681: DEC
5682: ST_TO_ADDR
5683: LD_EXP 22
5687: PUSH
5688: FOR_TO
5689: IFFALSE 5772
// begin vc_chassis := us_morphling ;
5691: LD_ADDR_OWVAR 37
5695: PUSH
5696: LD_INT 5
5698: ST_TO_ADDR
// vc_engine := engine_siberite ;
5699: LD_ADDR_OWVAR 39
5703: PUSH
5704: LD_INT 3
5706: ST_TO_ADDR
// vc_control := control_computer ;
5707: LD_ADDR_OWVAR 38
5711: PUSH
5712: LD_INT 3
5714: ST_TO_ADDR
// vc_weapon := us_weapons [ Rand ( 1 , us_weapons - 1 ) ] ;
5715: LD_ADDR_OWVAR 40
5719: PUSH
5720: LD_EXP 19
5724: PUSH
5725: LD_INT 1
5727: PPUSH
5728: LD_EXP 19
5732: PUSH
5733: LD_INT 1
5735: MINUS
5736: PPUSH
5737: CALL_OW 12
5741: ARRAY
5742: ST_TO_ADDR
// un := CreateVehicle ;
5743: LD_ADDR_VAR 0 4
5747: PUSH
5748: CALL_OW 45
5752: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5753: LD_VAR 0 4
5757: PPUSH
5758: LD_VAR 0 6
5762: PPUSH
5763: LD_INT 0
5765: PPUSH
5766: CALL_OW 49
// end ;
5770: GO 5688
5772: POP
5773: POP
// end ; 42 :
5774: GO 6705
5776: LD_INT 42
5778: DOUBLE
5779: EQUAL
5780: IFTRUE 5784
5782: GO 5924
5784: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
5785: LD_ADDR_VAR 0 6
5789: PUSH
5790: LD_EXP 15
5794: PUSH
5795: LD_INT 1
5797: PPUSH
5798: LD_EXP 15
5802: PPUSH
5803: CALL_OW 12
5807: ARRAY
5808: ST_TO_ADDR
// uc_side := 1 ;
5809: LD_ADDR_OWVAR 20
5813: PUSH
5814: LD_INT 1
5816: ST_TO_ADDR
// uc_nation := 1 ;
5817: LD_ADDR_OWVAR 21
5821: PUSH
5822: LD_INT 1
5824: ST_TO_ADDR
// for i = 1 to american_force do
5825: LD_ADDR_VAR 0 2
5829: PUSH
5830: DOUBLE
5831: LD_INT 1
5833: DEC
5834: ST_TO_ADDR
5835: LD_EXP 22
5839: PUSH
5840: FOR_TO
5841: IFFALSE 5920
// begin vc_chassis := us_morphling ;
5843: LD_ADDR_OWVAR 37
5847: PUSH
5848: LD_INT 5
5850: ST_TO_ADDR
// vc_engine := engine_siberite ;
5851: LD_ADDR_OWVAR 39
5855: PUSH
5856: LD_INT 3
5858: ST_TO_ADDR
// vc_control := control_computer ;
5859: LD_ADDR_OWVAR 38
5863: PUSH
5864: LD_INT 3
5866: ST_TO_ADDR
// vc_weapon := us_weapons [ Rand ( 1 , us_weapons ) ] ;
5867: LD_ADDR_OWVAR 40
5871: PUSH
5872: LD_EXP 19
5876: PUSH
5877: LD_INT 1
5879: PPUSH
5880: LD_EXP 19
5884: PPUSH
5885: CALL_OW 12
5889: ARRAY
5890: ST_TO_ADDR
// un := CreateVehicle ;
5891: LD_ADDR_VAR 0 4
5895: PUSH
5896: CALL_OW 45
5900: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5901: LD_VAR 0 4
5905: PPUSH
5906: LD_VAR 0 6
5910: PPUSH
5911: LD_INT 0
5913: PPUSH
5914: CALL_OW 49
// end ;
5918: GO 5840
5920: POP
5921: POP
// end ; 51 :
5922: GO 6705
5924: LD_INT 51
5926: DOUBLE
5927: EQUAL
5928: IFTRUE 5932
5930: GO 6072
5932: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
5933: LD_ADDR_VAR 0 6
5937: PUSH
5938: LD_EXP 15
5942: PUSH
5943: LD_INT 1
5945: PPUSH
5946: LD_EXP 15
5950: PPUSH
5951: CALL_OW 12
5955: ARRAY
5956: ST_TO_ADDR
// uc_side := 3 ;
5957: LD_ADDR_OWVAR 20
5961: PUSH
5962: LD_INT 3
5964: ST_TO_ADDR
// uc_nation := 3 ;
5965: LD_ADDR_OWVAR 21
5969: PUSH
5970: LD_INT 3
5972: ST_TO_ADDR
// for i = 1 to russian_force do
5973: LD_ADDR_VAR 0 2
5977: PUSH
5978: DOUBLE
5979: LD_INT 1
5981: DEC
5982: ST_TO_ADDR
5983: LD_EXP 21
5987: PUSH
5988: FOR_TO
5989: IFFALSE 6068
// begin vc_chassis := ru_heavy_tracked ;
5991: LD_ADDR_OWVAR 37
5995: PUSH
5996: LD_INT 24
5998: ST_TO_ADDR
// vc_engine := engine_siberite ;
5999: LD_ADDR_OWVAR 39
6003: PUSH
6004: LD_INT 3
6006: ST_TO_ADDR
// vc_control := control_computer ;
6007: LD_ADDR_OWVAR 38
6011: PUSH
6012: LD_INT 3
6014: ST_TO_ADDR
// vc_weapon := ru_weapons [ Rand ( 1 , ru_weapons ) ] ;
6015: LD_ADDR_OWVAR 40
6019: PUSH
6020: LD_EXP 18
6024: PUSH
6025: LD_INT 1
6027: PPUSH
6028: LD_EXP 18
6032: PPUSH
6033: CALL_OW 12
6037: ARRAY
6038: ST_TO_ADDR
// un := CreateVehicle ;
6039: LD_ADDR_VAR 0 4
6043: PUSH
6044: CALL_OW 45
6048: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
6049: LD_VAR 0 4
6053: PPUSH
6054: LD_VAR 0 6
6058: PPUSH
6059: LD_INT 0
6061: PPUSH
6062: CALL_OW 49
// end ;
6066: GO 5988
6068: POP
6069: POP
// end ; 91 :
6070: GO 6705
6072: LD_INT 91
6074: DOUBLE
6075: EQUAL
6076: IFTRUE 6080
6078: GO 6218
6080: POP
// begin uc_side := 8 ;
6081: LD_ADDR_OWVAR 20
6085: PUSH
6086: LD_INT 8
6088: ST_TO_ADDR
// uc_nation := 1 ;
6089: LD_ADDR_OWVAR 21
6093: PUSH
6094: LD_INT 1
6096: ST_TO_ADDR
// for i = 1 to [ 4 , 3 , 3 ] [ game_difficulty ] do
6097: LD_ADDR_VAR 0 2
6101: PUSH
6102: DOUBLE
6103: LD_INT 1
6105: DEC
6106: ST_TO_ADDR
6107: LD_INT 4
6109: PUSH
6110: LD_INT 3
6112: PUSH
6113: LD_INT 3
6115: PUSH
6116: EMPTY
6117: LIST
6118: LIST
6119: LIST
6120: PUSH
6121: LD_EXP 2
6125: ARRAY
6126: PUSH
6127: FOR_TO
6128: IFFALSE 6214
// begin vc_chassis := us_heavy_tracked ;
6130: LD_ADDR_OWVAR 37
6134: PUSH
6135: LD_INT 4
6137: ST_TO_ADDR
// vc_engine := engine_siberite ;
6138: LD_ADDR_OWVAR 39
6142: PUSH
6143: LD_INT 3
6145: ST_TO_ADDR
// vc_control := control_computer ;
6146: LD_ADDR_OWVAR 38
6150: PUSH
6151: LD_INT 3
6153: ST_TO_ADDR
// vc_weapon := [ us_double_gun , us_heavy_gun ] [ Rand ( 1 , 2 ) ] ;
6154: LD_ADDR_OWVAR 40
6158: PUSH
6159: LD_INT 5
6161: PUSH
6162: LD_INT 6
6164: PUSH
6165: EMPTY
6166: LIST
6167: LIST
6168: PUSH
6169: LD_INT 1
6171: PPUSH
6172: LD_INT 2
6174: PPUSH
6175: CALL_OW 12
6179: ARRAY
6180: ST_TO_ADDR
// un := CreateVehicle ;
6181: LD_ADDR_VAR 0 4
6185: PUSH
6186: CALL_OW 45
6190: ST_TO_ADDR
// PlaceUnitArea ( un , areas [ 1 ] , false ) ;
6191: LD_VAR 0 4
6195: PPUSH
6196: LD_EXP 15
6200: PUSH
6201: LD_INT 1
6203: ARRAY
6204: PPUSH
6205: LD_INT 0
6207: PPUSH
6208: CALL_OW 49
// end ;
6212: GO 6127
6214: POP
6215: POP
// end ; 92 :
6216: GO 6705
6218: LD_INT 92
6220: DOUBLE
6221: EQUAL
6222: IFTRUE 6226
6224: GO 6555
6226: POP
// begin uc_side := 5 ;
6227: LD_ADDR_OWVAR 20
6231: PUSH
6232: LD_INT 5
6234: ST_TO_ADDR
// uc_nation := 2 ;
6235: LD_ADDR_OWVAR 21
6239: PUSH
6240: LD_INT 2
6242: ST_TO_ADDR
// filter := [ ] ;
6243: LD_ADDR_VAR 0 3
6247: PUSH
6248: EMPTY
6249: ST_TO_ADDR
// InitHc ;
6250: CALL_OW 19
// PrepareHuman ( false , 1 , l_skill ) ;
6254: LD_INT 0
6256: PPUSH
6257: LD_INT 1
6259: PPUSH
6260: LD_EXP 50
6264: PPUSH
6265: CALL_OW 380
// un := CreateHuman ;
6269: LD_ADDR_VAR 0 4
6273: PUSH
6274: CALL_OW 44
6278: ST_TO_ADDR
// filter := filter ^ un ;
6279: LD_ADDR_VAR 0 3
6283: PUSH
6284: LD_VAR 0 3
6288: PUSH
6289: LD_VAR 0 4
6293: ADD
6294: ST_TO_ADDR
// for i = 1 to [ 4 , 3 , 2 ] [ game_difficulty ] do
6295: LD_ADDR_VAR 0 2
6299: PUSH
6300: DOUBLE
6301: LD_INT 1
6303: DEC
6304: ST_TO_ADDR
6305: LD_INT 4
6307: PUSH
6308: LD_INT 3
6310: PUSH
6311: LD_INT 2
6313: PUSH
6314: EMPTY
6315: LIST
6316: LIST
6317: LIST
6318: PUSH
6319: LD_EXP 2
6323: ARRAY
6324: PUSH
6325: FOR_TO
6326: IFFALSE 6364
// begin un := CreateHumanWithClass ( 1 , l_skill ) ;
6328: LD_ADDR_VAR 0 4
6332: PUSH
6333: LD_INT 1
6335: PPUSH
6336: LD_EXP 50
6340: PPUSH
6341: CALL 7312 0 2
6345: ST_TO_ADDR
// filter := filter ^ un ;
6346: LD_ADDR_VAR 0 3
6350: PUSH
6351: LD_VAR 0 3
6355: PUSH
6356: LD_VAR 0 4
6360: ADD
6361: ST_TO_ADDR
// end ;
6362: GO 6325
6364: POP
6365: POP
// DialogueOn ;
6366: CALL_OW 6
// if GetSex ( filter [ 1 ] ) = sex_male then
6370: LD_VAR 0 3
6374: PUSH
6375: LD_INT 1
6377: ARRAY
6378: PPUSH
6379: CALL_OW 258
6383: PUSH
6384: LD_INT 1
6386: EQUAL
6387: IFFALSE 6407
// SayRadio ( filter [ 1 ] , DS-DF-1 ) else
6389: LD_VAR 0 3
6393: PUSH
6394: LD_INT 1
6396: ARRAY
6397: PPUSH
6398: LD_STRING DS-DF-1
6400: PPUSH
6401: CALL_OW 94
6405: GO 6423
// SayRadio ( filter [ 1 ] , DS-DF-f1 ) ;
6407: LD_VAR 0 3
6411: PUSH
6412: LD_INT 1
6414: ARRAY
6415: PPUSH
6416: LD_STRING DS-DF-f1
6418: PPUSH
6419: CALL_OW 94
// case Query ( DS-dezert ) of 1 :
6423: LD_STRING DS-dezert
6425: PPUSH
6426: CALL_OW 97
6430: PUSH
6431: LD_INT 1
6433: DOUBLE
6434: EQUAL
6435: IFTRUE 6439
6437: GO 6454
6439: POP
// Say ( l_cmndr , DS-DC-dis ) ; 2 :
6440: LD_EXP 49
6444: PPUSH
6445: LD_STRING DS-DC-dis
6447: PPUSH
6448: CALL_OW 88
6452: GO 6549
6454: LD_INT 2
6456: DOUBLE
6457: EQUAL
6458: IFTRUE 6462
6460: GO 6548
6462: POP
// begin Say ( l_cmndr , DS-DC-acp ) ;
6463: LD_EXP 49
6467: PPUSH
6468: LD_STRING DS-DC-acp
6470: PPUSH
6471: CALL_OW 88
// for i = 1 to filter do
6475: LD_ADDR_VAR 0 2
6479: PUSH
6480: DOUBLE
6481: LD_INT 1
6483: DEC
6484: ST_TO_ADDR
6485: LD_VAR 0 3
6489: PUSH
6490: FOR_TO
6491: IFFALSE 6544
// begin SetSide ( filter [ i ] , 8 ) ;
6493: LD_VAR 0 3
6497: PUSH
6498: LD_VAR 0 2
6502: ARRAY
6503: PPUSH
6504: LD_INT 8
6506: PPUSH
6507: CALL_OW 235
// PlaceUnitArea ( filter [ i ] , south_spawn , false ) ;
6511: LD_VAR 0 3
6515: PUSH
6516: LD_VAR 0 2
6520: ARRAY
6521: PPUSH
6522: LD_INT 4
6524: PPUSH
6525: LD_INT 0
6527: PPUSH
6528: CALL_OW 49
// CenterNowOnXY ( 111 , 121 ) ;
6532: LD_INT 111
6534: PPUSH
6535: LD_INT 121
6537: PPUSH
6538: CALL_OW 86
// end ;
6542: GO 6490
6544: POP
6545: POP
// end ; end ;
6546: GO 6549
6548: POP
// DialogueOff ;
6549: CALL_OW 7
// end ; 101 :
6553: GO 6705
6555: LD_INT 101
6557: DOUBLE
6558: EQUAL
6559: IFTRUE 6563
6561: GO 6615
6563: POP
// begin CreateCratesArea ( Rand ( 3 , 5 ) , crates_area , true ) ;
6564: LD_INT 3
6566: PPUSH
6567: LD_INT 5
6569: PPUSH
6570: CALL_OW 12
6574: PPUSH
6575: LD_INT 9
6577: PPUSH
6578: LD_INT 1
6580: PPUSH
6581: CALL_OW 55
// Wait ( 0 0$11 ) ;
6585: LD_INT 385
6587: PPUSH
6588: CALL_OW 67
// CreateCratesArea ( Rand ( 3 , 5 ) , crates_area , true ) ;
6592: LD_INT 3
6594: PPUSH
6595: LD_INT 5
6597: PPUSH
6598: CALL_OW 12
6602: PPUSH
6603: LD_INT 9
6605: PPUSH
6606: LD_INT 1
6608: PPUSH
6609: CALL_OW 55
// end ; 200 :
6613: GO 6705
6615: LD_INT 200
6617: DOUBLE
6618: EQUAL
6619: IFTRUE 6623
6621: GO 6704
6623: POP
// begin Say ( Leopold , DS-end ) ;
6624: LD_EXP 7
6628: PPUSH
6629: LD_STRING DS-end
6631: PPUSH
6632: CALL_OW 88
// if Difficulty = 3 then
6636: LD_OWVAR 67
6640: PUSH
6641: LD_INT 3
6643: EQUAL
6644: IFFALSE 6653
// SetAchievement ( ACH_DESERT ) ;
6646: LD_STRING ACH_DESERT
6648: PPUSH
6649: CALL_OW 543
// music_nat := 5 ;
6653: LD_ADDR_OWVAR 71
6657: PUSH
6658: LD_INT 5
6660: ST_TO_ADDR
// AddMedal ( med , 1 ) ;
6661: LD_STRING med
6663: PPUSH
6664: LD_INT 1
6666: PPUSH
6667: CALL_OW 101
// AddMedal ( med , 1 ) ;
6671: LD_STRING med
6673: PPUSH
6674: LD_INT 1
6676: PPUSH
6677: CALL_OW 101
// AddMedal ( med , 1 ) ;
6681: LD_STRING med
6683: PPUSH
6684: LD_INT 1
6686: PPUSH
6687: CALL_OW 101
// GiveMedals ( MAIN ) ;
6691: LD_STRING MAIN
6693: PPUSH
6694: CALL_OW 102
// YouWin ;
6698: CALL_OW 103
// end ; end ;
6702: GO 6705
6704: POP
// end ;
6705: PPOPN 6
6707: END
// on UnitGoesToRed ( un ) do begin if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) then
6708: LD_VAR 0 1
6712: PUSH
6713: LD_INT 22
6715: PUSH
6716: LD_INT 2
6718: PUSH
6719: EMPTY
6720: LIST
6721: LIST
6722: PUSH
6723: LD_INT 21
6725: PUSH
6726: LD_INT 2
6728: PUSH
6729: EMPTY
6730: LIST
6731: LIST
6732: PUSH
6733: EMPTY
6734: LIST
6735: LIST
6736: PPUSH
6737: CALL_OW 69
6741: IN
6742: IFFALSE 6867
// begin Wait ( Rand ( 0 0$03 , 0 0$06 ) ) ;
6744: LD_INT 105
6746: PPUSH
6747: LD_INT 210
6749: PPUSH
6750: CALL_OW 12
6754: PPUSH
6755: CALL_OW 67
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
6759: LD_VAR 0 1
6763: PPUSH
6764: CALL_OW 250
6768: PPUSH
6769: LD_VAR 0 1
6773: PPUSH
6774: CALL_OW 251
6778: PPUSH
6779: LD_INT 3
6781: PPUSH
6782: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
6786: LD_VAR 0 1
6790: PPUSH
6791: CALL_OW 250
6795: PPUSH
6796: LD_VAR 0 1
6800: PPUSH
6801: CALL_OW 251
6805: PPUSH
6806: LD_INT 3
6808: PPUSH
6809: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
6813: LD_VAR 0 1
6817: PPUSH
6818: CALL_OW 250
6822: PPUSH
6823: LD_VAR 0 1
6827: PPUSH
6828: CALL_OW 251
6832: PPUSH
6833: LD_INT 3
6835: PPUSH
6836: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
6840: LD_VAR 0 1
6844: PPUSH
6845: CALL_OW 250
6849: PPUSH
6850: LD_VAR 0 1
6854: PPUSH
6855: CALL_OW 251
6859: PPUSH
6860: LD_INT 3
6862: PPUSH
6863: CALL_OW 453
// end ; end ;
6867: PPOPN 1
6869: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
6870: LD_VAR 0 1
6874: PPUSH
6875: CALL 21916 0 1
// if un = fort then
6879: LD_VAR 0 1
6883: PUSH
6884: LD_INT 23
6886: EQUAL
6887: IFFALSE 6897
// fort_destroyed := true ;
6889: LD_ADDR_EXP 32
6893: PUSH
6894: LD_INT 1
6896: ST_TO_ADDR
// if un = l_cmndr then
6897: LD_VAR 0 1
6901: PUSH
6902: LD_EXP 49
6906: EQUAL
6907: IFFALSE 6917
// hero_died := true ;
6909: LD_ADDR_EXP 33
6913: PUSH
6914: LD_INT 1
6916: ST_TO_ADDR
// end ;
6917: PPOPN 1
6919: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin debug_strings := un ;
6920: LD_ADDR_OWVAR 48
6924: PUSH
6925: LD_VAR 0 1
6929: ST_TO_ADDR
// SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
6930: LD_VAR 0 1
6934: PPUSH
6935: LD_VAR 0 2
6939: PPUSH
6940: LD_VAR 0 3
6944: PPUSH
6945: CALL 22014 0 3
// end ;
6949: PPOPN 3
6951: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
6952: LD_VAR 0 1
6956: PPUSH
6957: CALL 22022 0 1
// end ; end_of_file
6961: PPOPN 1
6963: END
// export function RefreshTime ( time , bool ) ; begin
6964: LD_INT 0
6966: PPUSH
// if bool then
6967: LD_VAR 0 2
6971: IFFALSE 6989
// time := time + 0 0$01 else
6973: LD_ADDR_VAR 0 1
6977: PUSH
6978: LD_VAR 0 1
6982: PUSH
6983: LD_INT 35
6985: PLUS
6986: ST_TO_ADDR
6987: GO 7003
// time := time - 0 0$01 ;
6989: LD_ADDR_VAR 0 1
6993: PUSH
6994: LD_VAR 0 1
6998: PUSH
6999: LD_INT 35
7001: MINUS
7002: ST_TO_ADDR
// result := time ;
7003: LD_ADDR_VAR 0 3
7007: PUSH
7008: LD_VAR 0 1
7012: ST_TO_ADDR
// end ;
7013: LD_VAR 0 3
7017: RET
// export function MineExist ( side ) ; begin
7018: LD_INT 0
7020: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_siberite_mine ] ] ) > 0 then
7021: LD_INT 22
7023: PUSH
7024: LD_VAR 0 1
7028: PUSH
7029: EMPTY
7030: LIST
7031: LIST
7032: PUSH
7033: LD_INT 30
7035: PUSH
7036: LD_INT 30
7038: PUSH
7039: EMPTY
7040: LIST
7041: LIST
7042: PUSH
7043: EMPTY
7044: LIST
7045: LIST
7046: PPUSH
7047: CALL_OW 69
7051: PUSH
7052: LD_INT 0
7054: GREATER
7055: IFFALSE 7067
// result := true else
7057: LD_ADDR_VAR 0 2
7061: PUSH
7062: LD_INT 1
7064: ST_TO_ADDR
7065: GO 7075
// result := false ;
7067: LD_ADDR_VAR 0 2
7071: PUSH
7072: LD_INT 0
7074: ST_TO_ADDR
// end ;
7075: LD_VAR 0 2
7079: RET
// export function FacExist ( side ) ; begin
7080: LD_INT 0
7082: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_factory ] ] ) > 0 ;
7083: LD_ADDR_VAR 0 2
7087: PUSH
7088: LD_INT 22
7090: PUSH
7091: LD_VAR 0 1
7095: PUSH
7096: EMPTY
7097: LIST
7098: LIST
7099: PUSH
7100: LD_INT 30
7102: PUSH
7103: LD_INT 3
7105: PUSH
7106: EMPTY
7107: LIST
7108: LIST
7109: PUSH
7110: EMPTY
7111: LIST
7112: LIST
7113: PPUSH
7114: CALL_OW 69
7118: PUSH
7119: LD_INT 0
7121: GREATER
7122: ST_TO_ADDR
// end ;
7123: LD_VAR 0 2
7127: RET
// export function ConnectWithTower ( side ) ; var i , filter , tower ; begin
7128: LD_INT 0
7130: PPUSH
7131: PPUSH
7132: PPUSH
7133: PPUSH
// filter := FilterAllUnits ( [ [ f_side , side ] , [ f_control , control_remote ] , [ f_ok ] ] ) ;
7134: LD_ADDR_VAR 0 4
7138: PUSH
7139: LD_INT 22
7141: PUSH
7142: LD_VAR 0 1
7146: PUSH
7147: EMPTY
7148: LIST
7149: LIST
7150: PUSH
7151: LD_INT 33
7153: PUSH
7154: LD_INT 2
7156: PUSH
7157: EMPTY
7158: LIST
7159: LIST
7160: PUSH
7161: LD_INT 50
7163: PUSH
7164: EMPTY
7165: LIST
7166: PUSH
7167: EMPTY
7168: LIST
7169: LIST
7170: LIST
7171: PPUSH
7172: CALL_OW 69
7176: ST_TO_ADDR
// tower := FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , ar_control_tower ] ] ) ;
7177: LD_ADDR_VAR 0 5
7181: PUSH
7182: LD_INT 22
7184: PUSH
7185: LD_VAR 0 1
7189: PUSH
7190: EMPTY
7191: LIST
7192: LIST
7193: PUSH
7194: LD_INT 34
7196: PUSH
7197: LD_INT 31
7199: PUSH
7200: EMPTY
7201: LIST
7202: LIST
7203: PUSH
7204: EMPTY
7205: LIST
7206: LIST
7207: PPUSH
7208: CALL_OW 69
7212: ST_TO_ADDR
// if tower > 0 and filter > 0 then
7213: LD_VAR 0 5
7217: PUSH
7218: LD_INT 0
7220: GREATER
7221: PUSH
7222: LD_VAR 0 4
7226: PUSH
7227: LD_INT 0
7229: GREATER
7230: AND
7231: IFFALSE 7307
// for i = 1 to filter do
7233: LD_ADDR_VAR 0 3
7237: PUSH
7238: DOUBLE
7239: LD_INT 1
7241: DEC
7242: ST_TO_ADDR
7243: LD_VAR 0 4
7247: PUSH
7248: FOR_TO
7249: IFFALSE 7305
// if not IsControledBy ( filter [ i ] ) then
7251: LD_VAR 0 4
7255: PUSH
7256: LD_VAR 0 3
7260: ARRAY
7261: PPUSH
7262: CALL_OW 312
7266: NOT
7267: IFFALSE 7303
// ComLinkTo ( filter [ i ] , tower [ Rand ( 1 , tower ) ] ) ;
7269: LD_VAR 0 4
7273: PUSH
7274: LD_VAR 0 3
7278: ARRAY
7279: PPUSH
7280: LD_VAR 0 5
7284: PUSH
7285: LD_INT 1
7287: PPUSH
7288: LD_VAR 0 5
7292: PPUSH
7293: CALL_OW 12
7297: ARRAY
7298: PPUSH
7299: CALL_OW 135
7303: GO 7248
7305: POP
7306: POP
// end ;
7307: LD_VAR 0 2
7311: RET
// export function CreateHumanWithClass ( clas , lvl ) ; var skill_com , skill_eng , skill_mech , skill_sci , bonus ; begin
7312: LD_INT 0
7314: PPUSH
7315: PPUSH
7316: PPUSH
7317: PPUSH
7318: PPUSH
7319: PPUSH
// hc_class := clas ;
7320: LD_ADDR_OWVAR 28
7324: PUSH
7325: LD_VAR 0 1
7329: ST_TO_ADDR
// skill_com := ( lvl + Rand ( - 1 , 1 ) ) ;
7330: LD_ADDR_VAR 0 4
7334: PUSH
7335: LD_VAR 0 2
7339: PUSH
7340: LD_INT 1
7342: NEG
7343: PPUSH
7344: LD_INT 1
7346: PPUSH
7347: CALL_OW 12
7351: PLUS
7352: ST_TO_ADDR
// skill_eng := ( lvl + Rand ( - 1 , 1 ) ) ;
7353: LD_ADDR_VAR 0 5
7357: PUSH
7358: LD_VAR 0 2
7362: PUSH
7363: LD_INT 1
7365: NEG
7366: PPUSH
7367: LD_INT 1
7369: PPUSH
7370: CALL_OW 12
7374: PLUS
7375: ST_TO_ADDR
// skill_mech := ( lvl + Rand ( - 1 , 1 ) ) ;
7376: LD_ADDR_VAR 0 6
7380: PUSH
7381: LD_VAR 0 2
7385: PUSH
7386: LD_INT 1
7388: NEG
7389: PPUSH
7390: LD_INT 1
7392: PPUSH
7393: CALL_OW 12
7397: PLUS
7398: ST_TO_ADDR
// skill_sci := ( lvl + Rand ( - 1 , 1 ) ) ;
7399: LD_ADDR_VAR 0 7
7403: PUSH
7404: LD_VAR 0 2
7408: PUSH
7409: LD_INT 1
7411: NEG
7412: PPUSH
7413: LD_INT 1
7415: PPUSH
7416: CALL_OW 12
7420: PLUS
7421: ST_TO_ADDR
// if clas = 1 or clas = 9 or clas = class_sniper or clas = class_mortar then
7422: LD_VAR 0 1
7426: PUSH
7427: LD_INT 1
7429: EQUAL
7430: PUSH
7431: LD_VAR 0 1
7435: PUSH
7436: LD_INT 9
7438: EQUAL
7439: OR
7440: PUSH
7441: LD_VAR 0 1
7445: PUSH
7446: LD_INT 5
7448: EQUAL
7449: OR
7450: PUSH
7451: LD_VAR 0 1
7455: PUSH
7456: LD_INT 8
7458: EQUAL
7459: OR
7460: IFFALSE 7485
// bonus := [ 2 , 0 , 0 , 0 ] ;
7462: LD_ADDR_VAR 0 8
7466: PUSH
7467: LD_INT 2
7469: PUSH
7470: LD_INT 0
7472: PUSH
7473: LD_INT 0
7475: PUSH
7476: LD_INT 0
7478: PUSH
7479: EMPTY
7480: LIST
7481: LIST
7482: LIST
7483: LIST
7484: ST_TO_ADDR
// if clas = 2 then
7485: LD_VAR 0 1
7489: PUSH
7490: LD_INT 2
7492: EQUAL
7493: IFFALSE 7518
// bonus := [ 0 , 2 , 0 , 0 ] ;
7495: LD_ADDR_VAR 0 8
7499: PUSH
7500: LD_INT 0
7502: PUSH
7503: LD_INT 2
7505: PUSH
7506: LD_INT 0
7508: PUSH
7509: LD_INT 0
7511: PUSH
7512: EMPTY
7513: LIST
7514: LIST
7515: LIST
7516: LIST
7517: ST_TO_ADDR
// if clas = 3 then
7518: LD_VAR 0 1
7522: PUSH
7523: LD_INT 3
7525: EQUAL
7526: IFFALSE 7551
// bonus := [ 0 , 0 , 2 , 0 ] ;
7528: LD_ADDR_VAR 0 8
7532: PUSH
7533: LD_INT 0
7535: PUSH
7536: LD_INT 0
7538: PUSH
7539: LD_INT 2
7541: PUSH
7542: LD_INT 0
7544: PUSH
7545: EMPTY
7546: LIST
7547: LIST
7548: LIST
7549: LIST
7550: ST_TO_ADDR
// if clas = 4 then
7551: LD_VAR 0 1
7555: PUSH
7556: LD_INT 4
7558: EQUAL
7559: IFFALSE 7584
// bonus := [ 0 , 0 , 0 , 2 ] ;
7561: LD_ADDR_VAR 0 8
7565: PUSH
7566: LD_INT 0
7568: PUSH
7569: LD_INT 0
7571: PUSH
7572: LD_INT 0
7574: PUSH
7575: LD_INT 2
7577: PUSH
7578: EMPTY
7579: LIST
7580: LIST
7581: LIST
7582: LIST
7583: ST_TO_ADDR
// if clas > 4 and clas <> 9 and clas <> class_sniper and clas <> class_mortar then
7584: LD_VAR 0 1
7588: PUSH
7589: LD_INT 4
7591: GREATER
7592: PUSH
7593: LD_VAR 0 1
7597: PUSH
7598: LD_INT 9
7600: NONEQUAL
7601: AND
7602: PUSH
7603: LD_VAR 0 1
7607: PUSH
7608: LD_INT 5
7610: NONEQUAL
7611: AND
7612: PUSH
7613: LD_VAR 0 1
7617: PUSH
7618: LD_INT 8
7620: NONEQUAL
7621: AND
7622: IFFALSE 7647
// bonus := [ 0 , 0 , 0 , 0 ] ;
7624: LD_ADDR_VAR 0 8
7628: PUSH
7629: LD_INT 0
7631: PUSH
7632: LD_INT 0
7634: PUSH
7635: LD_INT 0
7637: PUSH
7638: LD_INT 0
7640: PUSH
7641: EMPTY
7642: LIST
7643: LIST
7644: LIST
7645: LIST
7646: ST_TO_ADDR
// hc_basic_skills := [ Rand ( 0 , 2 ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) ] ;
7647: LD_ADDR_OWVAR 30
7651: PUSH
7652: LD_INT 0
7654: PPUSH
7655: LD_INT 2
7657: PPUSH
7658: CALL_OW 12
7662: PUSH
7663: LD_INT 0
7665: PPUSH
7666: LD_INT 2
7668: PPUSH
7669: CALL_OW 12
7673: PUSH
7674: LD_INT 0
7676: PPUSH
7677: LD_INT 2
7679: PPUSH
7680: CALL_OW 12
7684: PUSH
7685: LD_INT 0
7687: PPUSH
7688: LD_INT 2
7690: PPUSH
7691: CALL_OW 12
7695: PUSH
7696: EMPTY
7697: LIST
7698: LIST
7699: LIST
7700: LIST
7701: ST_TO_ADDR
// hc_skills := [ skill_com + bonus [ 1 ] , skill_eng + bonus [ 2 ] , skill_mech + bonus [ 3 ] , skill_sci + bonus [ 4 ] ] ;
7702: LD_ADDR_OWVAR 31
7706: PUSH
7707: LD_VAR 0 4
7711: PUSH
7712: LD_VAR 0 8
7716: PUSH
7717: LD_INT 1
7719: ARRAY
7720: PLUS
7721: PUSH
7722: LD_VAR 0 5
7726: PUSH
7727: LD_VAR 0 8
7731: PUSH
7732: LD_INT 2
7734: ARRAY
7735: PLUS
7736: PUSH
7737: LD_VAR 0 6
7741: PUSH
7742: LD_VAR 0 8
7746: PUSH
7747: LD_INT 3
7749: ARRAY
7750: PLUS
7751: PUSH
7752: LD_VAR 0 7
7756: PUSH
7757: LD_VAR 0 8
7761: PUSH
7762: LD_INT 4
7764: ARRAY
7765: PLUS
7766: PUSH
7767: EMPTY
7768: LIST
7769: LIST
7770: LIST
7771: LIST
7772: ST_TO_ADDR
// hc_sex := Rand ( sex_male , sex_female ) ;
7773: LD_ADDR_OWVAR 27
7777: PUSH
7778: LD_INT 1
7780: PPUSH
7781: LD_INT 2
7783: PPUSH
7784: CALL_OW 12
7788: ST_TO_ADDR
// hc_gallery :=  ;
7789: LD_ADDR_OWVAR 33
7793: PUSH
7794: LD_STRING 
7796: ST_TO_ADDR
// hc_attr := [ Rand ( 8 , 12 ) , Rand ( 9 , 11 ) ] ;
7797: LD_ADDR_OWVAR 29
7801: PUSH
7802: LD_INT 8
7804: PPUSH
7805: LD_INT 12
7807: PPUSH
7808: CALL_OW 12
7812: PUSH
7813: LD_INT 9
7815: PPUSH
7816: LD_INT 11
7818: PPUSH
7819: CALL_OW 12
7823: PUSH
7824: EMPTY
7825: LIST
7826: LIST
7827: ST_TO_ADDR
// hc_name :=  ;
7828: LD_ADDR_OWVAR 26
7832: PUSH
7833: LD_STRING 
7835: ST_TO_ADDR
// result := CreateHuman ;
7836: LD_ADDR_VAR 0 3
7840: PUSH
7841: CALL_OW 44
7845: ST_TO_ADDR
// end ;
7846: LD_VAR 0 3
7850: RET
// export function GetSpeed ( unit ) ; begin
7851: LD_INT 0
7853: PPUSH
// result := GetProperties ( unit ) [ 1 ] ;
7854: LD_ADDR_VAR 0 2
7858: PUSH
7859: LD_VAR 0 1
7863: PPUSH
7864: CALL_OW 464
7868: PUSH
7869: LD_INT 1
7871: ARRAY
7872: ST_TO_ADDR
// end ;
7873: LD_VAR 0 2
7877: RET
// export function CreateNature ( area , num1 , num2 , num3 , num4 ) ; var l , apeman , tiger , bird , horse ; begin
7878: LD_INT 0
7880: PPUSH
7881: PPUSH
7882: PPUSH
7883: PPUSH
7884: PPUSH
7885: PPUSH
// uc_nation = nation_nature ;
7886: LD_ADDR_OWVAR 21
7890: PUSH
7891: LD_INT 0
7893: ST_TO_ADDR
// uc_side = 0 ;
7894: LD_ADDR_OWVAR 20
7898: PUSH
7899: LD_INT 0
7901: ST_TO_ADDR
// l = 0 ;
7902: LD_ADDR_VAR 0 7
7906: PUSH
7907: LD_INT 0
7909: ST_TO_ADDR
// repeat begin uc_direction = Rand ( 0 , 5 ) ;
7910: LD_ADDR_OWVAR 24
7914: PUSH
7915: LD_INT 0
7917: PPUSH
7918: LD_INT 5
7920: PPUSH
7921: CALL_OW 12
7925: ST_TO_ADDR
// hc_agressivity = Rand ( - 5 , 0 ) ;
7926: LD_ADDR_OWVAR 35
7930: PUSH
7931: LD_INT 5
7933: NEG
7934: PPUSH
7935: LD_INT 0
7937: PPUSH
7938: CALL_OW 12
7942: ST_TO_ADDR
// hc_gallery =  ;
7943: LD_ADDR_OWVAR 33
7947: PUSH
7948: LD_STRING 
7950: ST_TO_ADDR
// hc_class = class_apeman ;
7951: LD_ADDR_OWVAR 28
7955: PUSH
7956: LD_INT 12
7958: ST_TO_ADDR
// hc_attr = [ Rand ( 11 , 13 ) , Rand ( 10 , 11 ) ] ;
7959: LD_ADDR_OWVAR 29
7963: PUSH
7964: LD_INT 11
7966: PPUSH
7967: LD_INT 13
7969: PPUSH
7970: CALL_OW 12
7974: PUSH
7975: LD_INT 10
7977: PPUSH
7978: LD_INT 11
7980: PPUSH
7981: CALL_OW 12
7985: PUSH
7986: EMPTY
7987: LIST
7988: LIST
7989: ST_TO_ADDR
// hc_sex = sex_male ;
7990: LD_ADDR_OWVAR 27
7994: PUSH
7995: LD_INT 1
7997: ST_TO_ADDR
// hc_skills = [ Rand ( 0 , 2 ) , 0 , 0 , 0 ] ;
7998: LD_ADDR_OWVAR 31
8002: PUSH
8003: LD_INT 0
8005: PPUSH
8006: LD_INT 2
8008: PPUSH
8009: CALL_OW 12
8013: PUSH
8014: LD_INT 0
8016: PUSH
8017: LD_INT 0
8019: PUSH
8020: LD_INT 0
8022: PUSH
8023: EMPTY
8024: LIST
8025: LIST
8026: LIST
8027: LIST
8028: ST_TO_ADDR
// apeman = CreateHuman ;
8029: LD_ADDR_VAR 0 8
8033: PUSH
8034: CALL_OW 44
8038: ST_TO_ADDR
// PlaceUnitArea ( apeman , area , false ) ;
8039: LD_VAR 0 8
8043: PPUSH
8044: LD_VAR 0 1
8048: PPUSH
8049: LD_INT 0
8051: PPUSH
8052: CALL_OW 49
// l = l + 1 ;
8056: LD_ADDR_VAR 0 7
8060: PUSH
8061: LD_VAR 0 7
8065: PUSH
8066: LD_INT 1
8068: PLUS
8069: ST_TO_ADDR
// end until l = num1 ;
8070: LD_VAR 0 7
8074: PUSH
8075: LD_VAR 0 2
8079: EQUAL
8080: IFFALSE 7910
// l = 0 ;
8082: LD_ADDR_VAR 0 7
8086: PUSH
8087: LD_INT 0
8089: ST_TO_ADDR
// repeat begin hc_agressivity = Rand ( 0 , 25 ) ;
8090: LD_ADDR_OWVAR 35
8094: PUSH
8095: LD_INT 0
8097: PPUSH
8098: LD_INT 25
8100: PPUSH
8101: CALL_OW 12
8105: ST_TO_ADDR
// hc_class = class_tiger ;
8106: LD_ADDR_OWVAR 28
8110: PUSH
8111: LD_INT 14
8113: ST_TO_ADDR
// hc_sex = sex_male ;
8114: LD_ADDR_OWVAR 27
8118: PUSH
8119: LD_INT 1
8121: ST_TO_ADDR
// hc_gallery = sandnature ;
8122: LD_ADDR_OWVAR 33
8126: PUSH
8127: LD_STRING sandnature
8129: ST_TO_ADDR
// hc_face_number = 3 ;
8130: LD_ADDR_OWVAR 34
8134: PUSH
8135: LD_INT 3
8137: ST_TO_ADDR
// tiger = CreateHuman ;
8138: LD_ADDR_VAR 0 9
8142: PUSH
8143: CALL_OW 44
8147: ST_TO_ADDR
// PlaceUnitArea ( tiger , area , false ) ;
8148: LD_VAR 0 9
8152: PPUSH
8153: LD_VAR 0 1
8157: PPUSH
8158: LD_INT 0
8160: PPUSH
8161: CALL_OW 49
// l = l + 1 ;
8165: LD_ADDR_VAR 0 7
8169: PUSH
8170: LD_VAR 0 7
8174: PUSH
8175: LD_INT 1
8177: PLUS
8178: ST_TO_ADDR
// end until l = num2 ;
8179: LD_VAR 0 7
8183: PUSH
8184: LD_VAR 0 3
8188: EQUAL
8189: IFFALSE 8090
// l = 0 ;
8191: LD_ADDR_VAR 0 7
8195: PUSH
8196: LD_INT 0
8198: ST_TO_ADDR
// repeat begin hc_class = class_phororhacos ;
8199: LD_ADDR_OWVAR 28
8203: PUSH
8204: LD_INT 18
8206: ST_TO_ADDR
// hc_gallery = sandnature ;
8207: LD_ADDR_OWVAR 33
8211: PUSH
8212: LD_STRING sandnature
8214: ST_TO_ADDR
// hc_face_number = 1 ;
8215: LD_ADDR_OWVAR 34
8219: PUSH
8220: LD_INT 1
8222: ST_TO_ADDR
// bird = CreateHuman ;
8223: LD_ADDR_VAR 0 10
8227: PUSH
8228: CALL_OW 44
8232: ST_TO_ADDR
// PlaceUnitAnywhere ( bird , false ) ;
8233: LD_VAR 0 10
8237: PPUSH
8238: LD_INT 0
8240: PPUSH
8241: CALL_OW 51
// l = l + 1 ;
8245: LD_ADDR_VAR 0 7
8249: PUSH
8250: LD_VAR 0 7
8254: PUSH
8255: LD_INT 1
8257: PLUS
8258: ST_TO_ADDR
// end until l = num3 ;
8259: LD_VAR 0 7
8263: PUSH
8264: LD_VAR 0 4
8268: EQUAL
8269: IFFALSE 8199
// l = 0 ;
8271: LD_ADDR_VAR 0 7
8275: PUSH
8276: LD_INT 0
8278: ST_TO_ADDR
// repeat begin hc_class = 21 ;
8279: LD_ADDR_OWVAR 28
8283: PUSH
8284: LD_INT 21
8286: ST_TO_ADDR
// hc_gallery = sandnature ;
8287: LD_ADDR_OWVAR 33
8291: PUSH
8292: LD_STRING sandnature
8294: ST_TO_ADDR
// hc_face_number = 5 ;
8295: LD_ADDR_OWVAR 34
8299: PUSH
8300: LD_INT 5
8302: ST_TO_ADDR
// horse := CreateHuman ;
8303: LD_ADDR_VAR 0 11
8307: PUSH
8308: CALL_OW 44
8312: ST_TO_ADDR
// PlaceUnitArea ( horse , area , false ) ;
8313: LD_VAR 0 11
8317: PPUSH
8318: LD_VAR 0 1
8322: PPUSH
8323: LD_INT 0
8325: PPUSH
8326: CALL_OW 49
// l = l + 1 ;
8330: LD_ADDR_VAR 0 7
8334: PUSH
8335: LD_VAR 0 7
8339: PUSH
8340: LD_INT 1
8342: PLUS
8343: ST_TO_ADDR
// end until l = num4 ;
8344: LD_VAR 0 7
8348: PUSH
8349: LD_VAR 0 5
8353: EQUAL
8354: IFFALSE 8279
// end ;
8356: LD_VAR 0 6
8360: RET
// export function PrepareComm ; begin
8361: LD_INT 0
8363: PPUSH
// uc_side := 1 ;
8364: LD_ADDR_OWVAR 20
8368: PUSH
8369: LD_INT 1
8371: ST_TO_ADDR
// uc_nation := 1 ;
8372: LD_ADDR_OWVAR 21
8376: PUSH
8377: LD_INT 1
8379: ST_TO_ADDR
// hc_gallery :=  ;
8380: LD_ADDR_OWVAR 33
8384: PUSH
8385: LD_STRING 
8387: ST_TO_ADDR
// hc_name :=  ;
8388: LD_ADDR_OWVAR 26
8392: PUSH
8393: LD_STRING 
8395: ST_TO_ADDR
// hc_class := 1 ;
8396: LD_ADDR_OWVAR 28
8400: PUSH
8401: LD_INT 1
8403: ST_TO_ADDR
// hc_sex := sex_male ;
8404: LD_ADDR_OWVAR 27
8408: PUSH
8409: LD_INT 1
8411: ST_TO_ADDR
// am_comander := CreateHuman ;
8412: LD_ADDR_EXP 46
8416: PUSH
8417: CALL_OW 44
8421: ST_TO_ADDR
// uc_side := 3 ;
8422: LD_ADDR_OWVAR 20
8426: PUSH
8427: LD_INT 3
8429: ST_TO_ADDR
// uc_nation := 3 ;
8430: LD_ADDR_OWVAR 21
8434: PUSH
8435: LD_INT 3
8437: ST_TO_ADDR
// ru_comander := CreateHuman ;
8438: LD_ADDR_EXP 47
8442: PUSH
8443: CALL_OW 44
8447: ST_TO_ADDR
// uc_side := 2 ;
8448: LD_ADDR_OWVAR 20
8452: PUSH
8453: LD_INT 2
8455: ST_TO_ADDR
// uc_nation := 2 ;
8456: LD_ADDR_OWVAR 21
8460: PUSH
8461: LD_INT 2
8463: ST_TO_ADDR
// hc_name := Heike Steyer ;
8464: LD_ADDR_OWVAR 26
8468: PUSH
8469: LD_STRING Heike Steyer
8471: ST_TO_ADDR
// hc_sex := sex_female ;
8472: LD_ADDR_OWVAR 27
8476: PUSH
8477: LD_INT 2
8479: ST_TO_ADDR
// hc_gallery := sandar ;
8480: LD_ADDR_OWVAR 33
8484: PUSH
8485: LD_STRING sandar
8487: ST_TO_ADDR
// hc_face_number := 14 ;
8488: LD_ADDR_OWVAR 34
8492: PUSH
8493: LD_INT 14
8495: ST_TO_ADDR
// ar_comander := CreateHuman ;
8496: LD_ADDR_EXP 48
8500: PUSH
8501: CALL_OW 44
8505: ST_TO_ADDR
// end ;
8506: LD_VAR 0 1
8510: RET
// export function SpeedFilter ( filter , speed ) ; var list , i ; begin
8511: LD_INT 0
8513: PPUSH
8514: PPUSH
8515: PPUSH
// list := [ ] ;
8516: LD_ADDR_VAR 0 4
8520: PUSH
8521: EMPTY
8522: ST_TO_ADDR
// for i = 1 to filter do
8523: LD_ADDR_VAR 0 5
8527: PUSH
8528: DOUBLE
8529: LD_INT 1
8531: DEC
8532: ST_TO_ADDR
8533: LD_VAR 0 1
8537: PUSH
8538: FOR_TO
8539: IFFALSE 8588
// if GetSpeed ( filter [ i ] ) < speed then
8541: LD_VAR 0 1
8545: PUSH
8546: LD_VAR 0 5
8550: ARRAY
8551: PPUSH
8552: CALL 7851 0 1
8556: PUSH
8557: LD_VAR 0 2
8561: LESS
8562: IFFALSE 8586
// list := list ^ filter [ i ] ;
8564: LD_ADDR_VAR 0 4
8568: PUSH
8569: LD_VAR 0 4
8573: PUSH
8574: LD_VAR 0 1
8578: PUSH
8579: LD_VAR 0 5
8583: ARRAY
8584: ADD
8585: ST_TO_ADDR
8586: GO 8538
8588: POP
8589: POP
// result := list ;
8590: LD_ADDR_VAR 0 3
8594: PUSH
8595: LD_VAR 0 4
8599: ST_TO_ADDR
// end ; end_of_file
8600: LD_VAR 0 3
8604: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
8605: LD_INT 0
8607: PPUSH
// ar_miner := 81 ;
8608: LD_ADDR_EXP 59
8612: PUSH
8613: LD_INT 81
8615: ST_TO_ADDR
// ar_crane := 88 ;
8616: LD_ADDR_EXP 58
8620: PUSH
8621: LD_INT 88
8623: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
8624: LD_ADDR_EXP 53
8628: PUSH
8629: LD_INT 89
8631: ST_TO_ADDR
// us_hack := 99 ;
8632: LD_ADDR_EXP 54
8636: PUSH
8637: LD_INT 99
8639: ST_TO_ADDR
// us_artillery := 97 ;
8640: LD_ADDR_EXP 55
8644: PUSH
8645: LD_INT 97
8647: ST_TO_ADDR
// ar_bio_bomb := 91 ;
8648: LD_ADDR_EXP 56
8652: PUSH
8653: LD_INT 91
8655: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
8656: LD_ADDR_EXP 57
8660: PUSH
8661: LD_INT 92
8663: ST_TO_ADDR
// ru_radar := 98 ;
8664: LD_ADDR_EXP 52
8668: PUSH
8669: LD_INT 98
8671: ST_TO_ADDR
// tech_Artillery := 80 ;
8672: LD_ADDR_EXP 60
8676: PUSH
8677: LD_INT 80
8679: ST_TO_ADDR
// tech_RadMat := 81 ;
8680: LD_ADDR_EXP 61
8684: PUSH
8685: LD_INT 81
8687: ST_TO_ADDR
// tech_BasicTools := 82 ;
8688: LD_ADDR_EXP 62
8692: PUSH
8693: LD_INT 82
8695: ST_TO_ADDR
// tech_Cargo := 83 ;
8696: LD_ADDR_EXP 63
8700: PUSH
8701: LD_INT 83
8703: ST_TO_ADDR
// tech_Track := 84 ;
8704: LD_ADDR_EXP 64
8708: PUSH
8709: LD_INT 84
8711: ST_TO_ADDR
// tech_Crane := 85 ;
8712: LD_ADDR_EXP 65
8716: PUSH
8717: LD_INT 85
8719: ST_TO_ADDR
// tech_Bulldozer := 86 ;
8720: LD_ADDR_EXP 66
8724: PUSH
8725: LD_INT 86
8727: ST_TO_ADDR
// tech_Hovercraft := 87 ;
8728: LD_ADDR_EXP 67
8732: PUSH
8733: LD_INT 87
8735: ST_TO_ADDR
// end ;
8736: LD_VAR 0 1
8740: RET
// every 1 do
8741: GO 8743
8743: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
8744: CALL 8605 0 0
8748: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
8749: LD_VAR 0 2
8753: PUSH
8754: LD_INT 100
8756: EQUAL
8757: IFFALSE 9706
// begin if not StreamModeActive then
8759: LD_EXP 68
8763: NOT
8764: IFFALSE 8774
// StreamModeActive := true ;
8766: LD_ADDR_EXP 68
8770: PUSH
8771: LD_INT 1
8773: ST_TO_ADDR
// if p3 = 0 then
8774: LD_VAR 0 3
8778: PUSH
8779: LD_INT 0
8781: EQUAL
8782: IFFALSE 8788
// InitStreamMode ;
8784: CALL 9864 0 0
// if p3 = 1 then
8788: LD_VAR 0 3
8792: PUSH
8793: LD_INT 1
8795: EQUAL
8796: IFFALSE 8806
// sRocket := true ;
8798: LD_ADDR_EXP 73
8802: PUSH
8803: LD_INT 1
8805: ST_TO_ADDR
// if p3 = 2 then
8806: LD_VAR 0 3
8810: PUSH
8811: LD_INT 2
8813: EQUAL
8814: IFFALSE 8824
// sSpeed := true ;
8816: LD_ADDR_EXP 72
8820: PUSH
8821: LD_INT 1
8823: ST_TO_ADDR
// if p3 = 3 then
8824: LD_VAR 0 3
8828: PUSH
8829: LD_INT 3
8831: EQUAL
8832: IFFALSE 8842
// sEngine := true ;
8834: LD_ADDR_EXP 74
8838: PUSH
8839: LD_INT 1
8841: ST_TO_ADDR
// if p3 = 4 then
8842: LD_VAR 0 3
8846: PUSH
8847: LD_INT 4
8849: EQUAL
8850: IFFALSE 8860
// sSpec := true ;
8852: LD_ADDR_EXP 71
8856: PUSH
8857: LD_INT 1
8859: ST_TO_ADDR
// if p3 = 5 then
8860: LD_VAR 0 3
8864: PUSH
8865: LD_INT 5
8867: EQUAL
8868: IFFALSE 8878
// sLevel := true ;
8870: LD_ADDR_EXP 75
8874: PUSH
8875: LD_INT 1
8877: ST_TO_ADDR
// if p3 = 6 then
8878: LD_VAR 0 3
8882: PUSH
8883: LD_INT 6
8885: EQUAL
8886: IFFALSE 8896
// sArmoury := true ;
8888: LD_ADDR_EXP 76
8892: PUSH
8893: LD_INT 1
8895: ST_TO_ADDR
// if p3 = 7 then
8896: LD_VAR 0 3
8900: PUSH
8901: LD_INT 7
8903: EQUAL
8904: IFFALSE 8914
// sRadar := true ;
8906: LD_ADDR_EXP 77
8910: PUSH
8911: LD_INT 1
8913: ST_TO_ADDR
// if p3 = 8 then
8914: LD_VAR 0 3
8918: PUSH
8919: LD_INT 8
8921: EQUAL
8922: IFFALSE 8932
// sBunker := true ;
8924: LD_ADDR_EXP 78
8928: PUSH
8929: LD_INT 1
8931: ST_TO_ADDR
// if p3 = 9 then
8932: LD_VAR 0 3
8936: PUSH
8937: LD_INT 9
8939: EQUAL
8940: IFFALSE 8950
// sHack := true ;
8942: LD_ADDR_EXP 79
8946: PUSH
8947: LD_INT 1
8949: ST_TO_ADDR
// if p3 = 10 then
8950: LD_VAR 0 3
8954: PUSH
8955: LD_INT 10
8957: EQUAL
8958: IFFALSE 8968
// sFire := true ;
8960: LD_ADDR_EXP 80
8964: PUSH
8965: LD_INT 1
8967: ST_TO_ADDR
// if p3 = 11 then
8968: LD_VAR 0 3
8972: PUSH
8973: LD_INT 11
8975: EQUAL
8976: IFFALSE 8986
// sRefresh := true ;
8978: LD_ADDR_EXP 81
8982: PUSH
8983: LD_INT 1
8985: ST_TO_ADDR
// if p3 = 12 then
8986: LD_VAR 0 3
8990: PUSH
8991: LD_INT 12
8993: EQUAL
8994: IFFALSE 9004
// sExp := true ;
8996: LD_ADDR_EXP 82
9000: PUSH
9001: LD_INT 1
9003: ST_TO_ADDR
// if p3 = 13 then
9004: LD_VAR 0 3
9008: PUSH
9009: LD_INT 13
9011: EQUAL
9012: IFFALSE 9022
// sDepot := true ;
9014: LD_ADDR_EXP 83
9018: PUSH
9019: LD_INT 1
9021: ST_TO_ADDR
// if p3 = 14 then
9022: LD_VAR 0 3
9026: PUSH
9027: LD_INT 14
9029: EQUAL
9030: IFFALSE 9040
// sFlag := true ;
9032: LD_ADDR_EXP 84
9036: PUSH
9037: LD_INT 1
9039: ST_TO_ADDR
// if p3 = 15 then
9040: LD_VAR 0 3
9044: PUSH
9045: LD_INT 15
9047: EQUAL
9048: IFFALSE 9058
// sKamikadze := true ;
9050: LD_ADDR_EXP 92
9054: PUSH
9055: LD_INT 1
9057: ST_TO_ADDR
// if p3 = 16 then
9058: LD_VAR 0 3
9062: PUSH
9063: LD_INT 16
9065: EQUAL
9066: IFFALSE 9076
// sTroll := true ;
9068: LD_ADDR_EXP 93
9072: PUSH
9073: LD_INT 1
9075: ST_TO_ADDR
// if p3 = 17 then
9076: LD_VAR 0 3
9080: PUSH
9081: LD_INT 17
9083: EQUAL
9084: IFFALSE 9094
// sSlow := true ;
9086: LD_ADDR_EXP 94
9090: PUSH
9091: LD_INT 1
9093: ST_TO_ADDR
// if p3 = 18 then
9094: LD_VAR 0 3
9098: PUSH
9099: LD_INT 18
9101: EQUAL
9102: IFFALSE 9112
// sLack := true ;
9104: LD_ADDR_EXP 95
9108: PUSH
9109: LD_INT 1
9111: ST_TO_ADDR
// if p3 = 19 then
9112: LD_VAR 0 3
9116: PUSH
9117: LD_INT 19
9119: EQUAL
9120: IFFALSE 9130
// sTank := true ;
9122: LD_ADDR_EXP 97
9126: PUSH
9127: LD_INT 1
9129: ST_TO_ADDR
// if p3 = 20 then
9130: LD_VAR 0 3
9134: PUSH
9135: LD_INT 20
9137: EQUAL
9138: IFFALSE 9148
// sRemote := true ;
9140: LD_ADDR_EXP 98
9144: PUSH
9145: LD_INT 1
9147: ST_TO_ADDR
// if p3 = 21 then
9148: LD_VAR 0 3
9152: PUSH
9153: LD_INT 21
9155: EQUAL
9156: IFFALSE 9166
// sPowell := true ;
9158: LD_ADDR_EXP 99
9162: PUSH
9163: LD_INT 1
9165: ST_TO_ADDR
// if p3 = 22 then
9166: LD_VAR 0 3
9170: PUSH
9171: LD_INT 22
9173: EQUAL
9174: IFFALSE 9184
// sTeleport := true ;
9176: LD_ADDR_EXP 102
9180: PUSH
9181: LD_INT 1
9183: ST_TO_ADDR
// if p3 = 23 then
9184: LD_VAR 0 3
9188: PUSH
9189: LD_INT 23
9191: EQUAL
9192: IFFALSE 9202
// sOilTower := true ;
9194: LD_ADDR_EXP 104
9198: PUSH
9199: LD_INT 1
9201: ST_TO_ADDR
// if p3 = 24 then
9202: LD_VAR 0 3
9206: PUSH
9207: LD_INT 24
9209: EQUAL
9210: IFFALSE 9220
// sShovel := true ;
9212: LD_ADDR_EXP 105
9216: PUSH
9217: LD_INT 1
9219: ST_TO_ADDR
// if p3 = 25 then
9220: LD_VAR 0 3
9224: PUSH
9225: LD_INT 25
9227: EQUAL
9228: IFFALSE 9238
// sSheik := true ;
9230: LD_ADDR_EXP 106
9234: PUSH
9235: LD_INT 1
9237: ST_TO_ADDR
// if p3 = 26 then
9238: LD_VAR 0 3
9242: PUSH
9243: LD_INT 26
9245: EQUAL
9246: IFFALSE 9256
// sEarthquake := true ;
9248: LD_ADDR_EXP 108
9252: PUSH
9253: LD_INT 1
9255: ST_TO_ADDR
// if p3 = 27 then
9256: LD_VAR 0 3
9260: PUSH
9261: LD_INT 27
9263: EQUAL
9264: IFFALSE 9274
// sAI := true ;
9266: LD_ADDR_EXP 109
9270: PUSH
9271: LD_INT 1
9273: ST_TO_ADDR
// if p3 = 28 then
9274: LD_VAR 0 3
9278: PUSH
9279: LD_INT 28
9281: EQUAL
9282: IFFALSE 9292
// sCargo := true ;
9284: LD_ADDR_EXP 112
9288: PUSH
9289: LD_INT 1
9291: ST_TO_ADDR
// if p3 = 29 then
9292: LD_VAR 0 3
9296: PUSH
9297: LD_INT 29
9299: EQUAL
9300: IFFALSE 9310
// sDLaser := true ;
9302: LD_ADDR_EXP 113
9306: PUSH
9307: LD_INT 1
9309: ST_TO_ADDR
// if p3 = 30 then
9310: LD_VAR 0 3
9314: PUSH
9315: LD_INT 30
9317: EQUAL
9318: IFFALSE 9328
// sExchange := true ;
9320: LD_ADDR_EXP 114
9324: PUSH
9325: LD_INT 1
9327: ST_TO_ADDR
// if p3 = 31 then
9328: LD_VAR 0 3
9332: PUSH
9333: LD_INT 31
9335: EQUAL
9336: IFFALSE 9346
// sFac := true ;
9338: LD_ADDR_EXP 115
9342: PUSH
9343: LD_INT 1
9345: ST_TO_ADDR
// if p3 = 32 then
9346: LD_VAR 0 3
9350: PUSH
9351: LD_INT 32
9353: EQUAL
9354: IFFALSE 9364
// sPower := true ;
9356: LD_ADDR_EXP 116
9360: PUSH
9361: LD_INT 1
9363: ST_TO_ADDR
// if p3 = 33 then
9364: LD_VAR 0 3
9368: PUSH
9369: LD_INT 33
9371: EQUAL
9372: IFFALSE 9382
// sRandom := true ;
9374: LD_ADDR_EXP 117
9378: PUSH
9379: LD_INT 1
9381: ST_TO_ADDR
// if p3 = 34 then
9382: LD_VAR 0 3
9386: PUSH
9387: LD_INT 34
9389: EQUAL
9390: IFFALSE 9400
// sShield := true ;
9392: LD_ADDR_EXP 118
9396: PUSH
9397: LD_INT 1
9399: ST_TO_ADDR
// if p3 = 35 then
9400: LD_VAR 0 3
9404: PUSH
9405: LD_INT 35
9407: EQUAL
9408: IFFALSE 9418
// sTime := true ;
9410: LD_ADDR_EXP 119
9414: PUSH
9415: LD_INT 1
9417: ST_TO_ADDR
// if p3 = 36 then
9418: LD_VAR 0 3
9422: PUSH
9423: LD_INT 36
9425: EQUAL
9426: IFFALSE 9436
// sTools := true ;
9428: LD_ADDR_EXP 120
9432: PUSH
9433: LD_INT 1
9435: ST_TO_ADDR
// if p3 = 101 then
9436: LD_VAR 0 3
9440: PUSH
9441: LD_INT 101
9443: EQUAL
9444: IFFALSE 9454
// sSold := true ;
9446: LD_ADDR_EXP 85
9450: PUSH
9451: LD_INT 1
9453: ST_TO_ADDR
// if p3 = 102 then
9454: LD_VAR 0 3
9458: PUSH
9459: LD_INT 102
9461: EQUAL
9462: IFFALSE 9472
// sDiff := true ;
9464: LD_ADDR_EXP 86
9468: PUSH
9469: LD_INT 1
9471: ST_TO_ADDR
// if p3 = 103 then
9472: LD_VAR 0 3
9476: PUSH
9477: LD_INT 103
9479: EQUAL
9480: IFFALSE 9490
// sFog := true ;
9482: LD_ADDR_EXP 89
9486: PUSH
9487: LD_INT 1
9489: ST_TO_ADDR
// if p3 = 104 then
9490: LD_VAR 0 3
9494: PUSH
9495: LD_INT 104
9497: EQUAL
9498: IFFALSE 9508
// sReset := true ;
9500: LD_ADDR_EXP 90
9504: PUSH
9505: LD_INT 1
9507: ST_TO_ADDR
// if p3 = 105 then
9508: LD_VAR 0 3
9512: PUSH
9513: LD_INT 105
9515: EQUAL
9516: IFFALSE 9526
// sSun := true ;
9518: LD_ADDR_EXP 91
9522: PUSH
9523: LD_INT 1
9525: ST_TO_ADDR
// if p3 = 106 then
9526: LD_VAR 0 3
9530: PUSH
9531: LD_INT 106
9533: EQUAL
9534: IFFALSE 9544
// sTiger := true ;
9536: LD_ADDR_EXP 87
9540: PUSH
9541: LD_INT 1
9543: ST_TO_ADDR
// if p3 = 107 then
9544: LD_VAR 0 3
9548: PUSH
9549: LD_INT 107
9551: EQUAL
9552: IFFALSE 9562
// sBomb := true ;
9554: LD_ADDR_EXP 88
9558: PUSH
9559: LD_INT 1
9561: ST_TO_ADDR
// if p3 = 108 then
9562: LD_VAR 0 3
9566: PUSH
9567: LD_INT 108
9569: EQUAL
9570: IFFALSE 9580
// sWound := true ;
9572: LD_ADDR_EXP 96
9576: PUSH
9577: LD_INT 1
9579: ST_TO_ADDR
// if p3 = 109 then
9580: LD_VAR 0 3
9584: PUSH
9585: LD_INT 109
9587: EQUAL
9588: IFFALSE 9598
// sBetray := true ;
9590: LD_ADDR_EXP 100
9594: PUSH
9595: LD_INT 1
9597: ST_TO_ADDR
// if p3 = 110 then
9598: LD_VAR 0 3
9602: PUSH
9603: LD_INT 110
9605: EQUAL
9606: IFFALSE 9616
// sContamin := true ;
9608: LD_ADDR_EXP 101
9612: PUSH
9613: LD_INT 1
9615: ST_TO_ADDR
// if p3 = 111 then
9616: LD_VAR 0 3
9620: PUSH
9621: LD_INT 111
9623: EQUAL
9624: IFFALSE 9634
// sOil := true ;
9626: LD_ADDR_EXP 103
9630: PUSH
9631: LD_INT 1
9633: ST_TO_ADDR
// if p3 = 112 then
9634: LD_VAR 0 3
9638: PUSH
9639: LD_INT 112
9641: EQUAL
9642: IFFALSE 9652
// sStu := true ;
9644: LD_ADDR_EXP 107
9648: PUSH
9649: LD_INT 1
9651: ST_TO_ADDR
// if p3 = 113 then
9652: LD_VAR 0 3
9656: PUSH
9657: LD_INT 113
9659: EQUAL
9660: IFFALSE 9670
// sBazooka := true ;
9662: LD_ADDR_EXP 110
9666: PUSH
9667: LD_INT 1
9669: ST_TO_ADDR
// if p3 = 114 then
9670: LD_VAR 0 3
9674: PUSH
9675: LD_INT 114
9677: EQUAL
9678: IFFALSE 9688
// sMortar := true ;
9680: LD_ADDR_EXP 111
9684: PUSH
9685: LD_INT 1
9687: ST_TO_ADDR
// if p3 = 115 then
9688: LD_VAR 0 3
9692: PUSH
9693: LD_INT 115
9695: EQUAL
9696: IFFALSE 9706
// sRanger := true ;
9698: LD_ADDR_EXP 121
9702: PUSH
9703: LD_INT 1
9705: ST_TO_ADDR
// end ; if p2 = 101 then
9706: LD_VAR 0 2
9710: PUSH
9711: LD_INT 101
9713: EQUAL
9714: IFFALSE 9842
// begin case p3 of 1 :
9716: LD_VAR 0 3
9720: PUSH
9721: LD_INT 1
9723: DOUBLE
9724: EQUAL
9725: IFTRUE 9729
9727: GO 9736
9729: POP
// hHackUnlimitedResources ; 2 :
9730: CALL 20877 0 0
9734: GO 9842
9736: LD_INT 2
9738: DOUBLE
9739: EQUAL
9740: IFTRUE 9744
9742: GO 9751
9744: POP
// hHackSetLevel10 ; 3 :
9745: CALL 21010 0 0
9749: GO 9842
9751: LD_INT 3
9753: DOUBLE
9754: EQUAL
9755: IFTRUE 9759
9757: GO 9766
9759: POP
// hHackSetLevel10YourUnits ; 4 :
9760: CALL 21095 0 0
9764: GO 9842
9766: LD_INT 4
9768: DOUBLE
9769: EQUAL
9770: IFTRUE 9774
9772: GO 9781
9774: POP
// hHackInvincible ; 5 :
9775: CALL 21543 0 0
9779: GO 9842
9781: LD_INT 5
9783: DOUBLE
9784: EQUAL
9785: IFTRUE 9789
9787: GO 9796
9789: POP
// hHackInvisible ; 6 :
9790: CALL 21654 0 0
9794: GO 9842
9796: LD_INT 6
9798: DOUBLE
9799: EQUAL
9800: IFTRUE 9804
9802: GO 9811
9804: POP
// hHackChangeYourSide ; 7 :
9805: CALL 21711 0 0
9809: GO 9842
9811: LD_INT 7
9813: DOUBLE
9814: EQUAL
9815: IFTRUE 9819
9817: GO 9826
9819: POP
// hHackChangeUnitSide ; 8 :
9820: CALL 21753 0 0
9824: GO 9842
9826: LD_INT 8
9828: DOUBLE
9829: EQUAL
9830: IFTRUE 9834
9832: GO 9841
9834: POP
// hHackFog ; end ;
9835: CALL 21854 0 0
9839: GO 9842
9841: POP
// end ; end ;
9842: PPOPN 6
9844: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
9845: GO 9847
9847: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
9848: LD_STRING initStreamRollete();
9850: PPUSH
9851: CALL_OW 559
// InitStreamMode ;
9855: CALL 9864 0 0
// DefineStreamItems ( ) ;
9859: CALL 10304 0 0
// end ;
9863: END
// function InitStreamMode ; begin
9864: LD_INT 0
9866: PPUSH
// streamModeActive := false ;
9867: LD_ADDR_EXP 68
9871: PUSH
9872: LD_INT 0
9874: ST_TO_ADDR
// normalCounter := 36 ;
9875: LD_ADDR_EXP 69
9879: PUSH
9880: LD_INT 36
9882: ST_TO_ADDR
// hardcoreCounter := 16 ;
9883: LD_ADDR_EXP 70
9887: PUSH
9888: LD_INT 16
9890: ST_TO_ADDR
// sRocket := false ;
9891: LD_ADDR_EXP 73
9895: PUSH
9896: LD_INT 0
9898: ST_TO_ADDR
// sSpeed := false ;
9899: LD_ADDR_EXP 72
9903: PUSH
9904: LD_INT 0
9906: ST_TO_ADDR
// sEngine := false ;
9907: LD_ADDR_EXP 74
9911: PUSH
9912: LD_INT 0
9914: ST_TO_ADDR
// sSpec := false ;
9915: LD_ADDR_EXP 71
9919: PUSH
9920: LD_INT 0
9922: ST_TO_ADDR
// sLevel := false ;
9923: LD_ADDR_EXP 75
9927: PUSH
9928: LD_INT 0
9930: ST_TO_ADDR
// sArmoury := false ;
9931: LD_ADDR_EXP 76
9935: PUSH
9936: LD_INT 0
9938: ST_TO_ADDR
// sRadar := false ;
9939: LD_ADDR_EXP 77
9943: PUSH
9944: LD_INT 0
9946: ST_TO_ADDR
// sBunker := false ;
9947: LD_ADDR_EXP 78
9951: PUSH
9952: LD_INT 0
9954: ST_TO_ADDR
// sHack := false ;
9955: LD_ADDR_EXP 79
9959: PUSH
9960: LD_INT 0
9962: ST_TO_ADDR
// sFire := false ;
9963: LD_ADDR_EXP 80
9967: PUSH
9968: LD_INT 0
9970: ST_TO_ADDR
// sRefresh := false ;
9971: LD_ADDR_EXP 81
9975: PUSH
9976: LD_INT 0
9978: ST_TO_ADDR
// sExp := false ;
9979: LD_ADDR_EXP 82
9983: PUSH
9984: LD_INT 0
9986: ST_TO_ADDR
// sDepot := false ;
9987: LD_ADDR_EXP 83
9991: PUSH
9992: LD_INT 0
9994: ST_TO_ADDR
// sFlag := false ;
9995: LD_ADDR_EXP 84
9999: PUSH
10000: LD_INT 0
10002: ST_TO_ADDR
// sKamikadze := false ;
10003: LD_ADDR_EXP 92
10007: PUSH
10008: LD_INT 0
10010: ST_TO_ADDR
// sTroll := false ;
10011: LD_ADDR_EXP 93
10015: PUSH
10016: LD_INT 0
10018: ST_TO_ADDR
// sSlow := false ;
10019: LD_ADDR_EXP 94
10023: PUSH
10024: LD_INT 0
10026: ST_TO_ADDR
// sLack := false ;
10027: LD_ADDR_EXP 95
10031: PUSH
10032: LD_INT 0
10034: ST_TO_ADDR
// sTank := false ;
10035: LD_ADDR_EXP 97
10039: PUSH
10040: LD_INT 0
10042: ST_TO_ADDR
// sRemote := false ;
10043: LD_ADDR_EXP 98
10047: PUSH
10048: LD_INT 0
10050: ST_TO_ADDR
// sPowell := false ;
10051: LD_ADDR_EXP 99
10055: PUSH
10056: LD_INT 0
10058: ST_TO_ADDR
// sTeleport := false ;
10059: LD_ADDR_EXP 102
10063: PUSH
10064: LD_INT 0
10066: ST_TO_ADDR
// sOilTower := false ;
10067: LD_ADDR_EXP 104
10071: PUSH
10072: LD_INT 0
10074: ST_TO_ADDR
// sShovel := false ;
10075: LD_ADDR_EXP 105
10079: PUSH
10080: LD_INT 0
10082: ST_TO_ADDR
// sSheik := false ;
10083: LD_ADDR_EXP 106
10087: PUSH
10088: LD_INT 0
10090: ST_TO_ADDR
// sEarthquake := false ;
10091: LD_ADDR_EXP 108
10095: PUSH
10096: LD_INT 0
10098: ST_TO_ADDR
// sAI := false ;
10099: LD_ADDR_EXP 109
10103: PUSH
10104: LD_INT 0
10106: ST_TO_ADDR
// sCargo := false ;
10107: LD_ADDR_EXP 112
10111: PUSH
10112: LD_INT 0
10114: ST_TO_ADDR
// sDLaser := false ;
10115: LD_ADDR_EXP 113
10119: PUSH
10120: LD_INT 0
10122: ST_TO_ADDR
// sExchange := false ;
10123: LD_ADDR_EXP 114
10127: PUSH
10128: LD_INT 0
10130: ST_TO_ADDR
// sFac := false ;
10131: LD_ADDR_EXP 115
10135: PUSH
10136: LD_INT 0
10138: ST_TO_ADDR
// sPower := false ;
10139: LD_ADDR_EXP 116
10143: PUSH
10144: LD_INT 0
10146: ST_TO_ADDR
// sRandom := false ;
10147: LD_ADDR_EXP 117
10151: PUSH
10152: LD_INT 0
10154: ST_TO_ADDR
// sShield := false ;
10155: LD_ADDR_EXP 118
10159: PUSH
10160: LD_INT 0
10162: ST_TO_ADDR
// sTime := false ;
10163: LD_ADDR_EXP 119
10167: PUSH
10168: LD_INT 0
10170: ST_TO_ADDR
// sTools := false ;
10171: LD_ADDR_EXP 120
10175: PUSH
10176: LD_INT 0
10178: ST_TO_ADDR
// sSold := false ;
10179: LD_ADDR_EXP 85
10183: PUSH
10184: LD_INT 0
10186: ST_TO_ADDR
// sDiff := false ;
10187: LD_ADDR_EXP 86
10191: PUSH
10192: LD_INT 0
10194: ST_TO_ADDR
// sFog := false ;
10195: LD_ADDR_EXP 89
10199: PUSH
10200: LD_INT 0
10202: ST_TO_ADDR
// sReset := false ;
10203: LD_ADDR_EXP 90
10207: PUSH
10208: LD_INT 0
10210: ST_TO_ADDR
// sSun := false ;
10211: LD_ADDR_EXP 91
10215: PUSH
10216: LD_INT 0
10218: ST_TO_ADDR
// sTiger := false ;
10219: LD_ADDR_EXP 87
10223: PUSH
10224: LD_INT 0
10226: ST_TO_ADDR
// sBomb := false ;
10227: LD_ADDR_EXP 88
10231: PUSH
10232: LD_INT 0
10234: ST_TO_ADDR
// sWound := false ;
10235: LD_ADDR_EXP 96
10239: PUSH
10240: LD_INT 0
10242: ST_TO_ADDR
// sBetray := false ;
10243: LD_ADDR_EXP 100
10247: PUSH
10248: LD_INT 0
10250: ST_TO_ADDR
// sContamin := false ;
10251: LD_ADDR_EXP 101
10255: PUSH
10256: LD_INT 0
10258: ST_TO_ADDR
// sOil := false ;
10259: LD_ADDR_EXP 103
10263: PUSH
10264: LD_INT 0
10266: ST_TO_ADDR
// sStu := false ;
10267: LD_ADDR_EXP 107
10271: PUSH
10272: LD_INT 0
10274: ST_TO_ADDR
// sBazooka := false ;
10275: LD_ADDR_EXP 110
10279: PUSH
10280: LD_INT 0
10282: ST_TO_ADDR
// sMortar := false ;
10283: LD_ADDR_EXP 111
10287: PUSH
10288: LD_INT 0
10290: ST_TO_ADDR
// sRanger := false ;
10291: LD_ADDR_EXP 121
10295: PUSH
10296: LD_INT 0
10298: ST_TO_ADDR
// end ;
10299: LD_VAR 0 1
10303: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
10304: LD_INT 0
10306: PPUSH
10307: PPUSH
10308: PPUSH
10309: PPUSH
10310: PPUSH
// result := [ ] ;
10311: LD_ADDR_VAR 0 1
10315: PUSH
10316: EMPTY
10317: ST_TO_ADDR
// if campaign_id = 1 then
10318: LD_OWVAR 69
10322: PUSH
10323: LD_INT 1
10325: EQUAL
10326: IFFALSE 13264
// begin case mission_number of 1 :
10328: LD_OWVAR 70
10332: PUSH
10333: LD_INT 1
10335: DOUBLE
10336: EQUAL
10337: IFTRUE 10341
10339: GO 10405
10341: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
10342: LD_ADDR_VAR 0 1
10346: PUSH
10347: LD_INT 2
10349: PUSH
10350: LD_INT 4
10352: PUSH
10353: LD_INT 11
10355: PUSH
10356: LD_INT 12
10358: PUSH
10359: LD_INT 15
10361: PUSH
10362: LD_INT 16
10364: PUSH
10365: LD_INT 22
10367: PUSH
10368: LD_INT 23
10370: PUSH
10371: LD_INT 26
10373: PUSH
10374: EMPTY
10375: LIST
10376: LIST
10377: LIST
10378: LIST
10379: LIST
10380: LIST
10381: LIST
10382: LIST
10383: LIST
10384: PUSH
10385: LD_INT 101
10387: PUSH
10388: LD_INT 102
10390: PUSH
10391: LD_INT 106
10393: PUSH
10394: EMPTY
10395: LIST
10396: LIST
10397: LIST
10398: PUSH
10399: EMPTY
10400: LIST
10401: LIST
10402: ST_TO_ADDR
10403: GO 13262
10405: LD_INT 2
10407: DOUBLE
10408: EQUAL
10409: IFTRUE 10413
10411: GO 10485
10413: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
10414: LD_ADDR_VAR 0 1
10418: PUSH
10419: LD_INT 2
10421: PUSH
10422: LD_INT 4
10424: PUSH
10425: LD_INT 11
10427: PUSH
10428: LD_INT 12
10430: PUSH
10431: LD_INT 15
10433: PUSH
10434: LD_INT 16
10436: PUSH
10437: LD_INT 22
10439: PUSH
10440: LD_INT 23
10442: PUSH
10443: LD_INT 26
10445: PUSH
10446: EMPTY
10447: LIST
10448: LIST
10449: LIST
10450: LIST
10451: LIST
10452: LIST
10453: LIST
10454: LIST
10455: LIST
10456: PUSH
10457: LD_INT 101
10459: PUSH
10460: LD_INT 102
10462: PUSH
10463: LD_INT 105
10465: PUSH
10466: LD_INT 106
10468: PUSH
10469: LD_INT 108
10471: PUSH
10472: EMPTY
10473: LIST
10474: LIST
10475: LIST
10476: LIST
10477: LIST
10478: PUSH
10479: EMPTY
10480: LIST
10481: LIST
10482: ST_TO_ADDR
10483: GO 13262
10485: LD_INT 3
10487: DOUBLE
10488: EQUAL
10489: IFTRUE 10493
10491: GO 10569
10493: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
10494: LD_ADDR_VAR 0 1
10498: PUSH
10499: LD_INT 2
10501: PUSH
10502: LD_INT 4
10504: PUSH
10505: LD_INT 5
10507: PUSH
10508: LD_INT 11
10510: PUSH
10511: LD_INT 12
10513: PUSH
10514: LD_INT 15
10516: PUSH
10517: LD_INT 16
10519: PUSH
10520: LD_INT 22
10522: PUSH
10523: LD_INT 26
10525: PUSH
10526: LD_INT 36
10528: PUSH
10529: EMPTY
10530: LIST
10531: LIST
10532: LIST
10533: LIST
10534: LIST
10535: LIST
10536: LIST
10537: LIST
10538: LIST
10539: LIST
10540: PUSH
10541: LD_INT 101
10543: PUSH
10544: LD_INT 102
10546: PUSH
10547: LD_INT 105
10549: PUSH
10550: LD_INT 106
10552: PUSH
10553: LD_INT 108
10555: PUSH
10556: EMPTY
10557: LIST
10558: LIST
10559: LIST
10560: LIST
10561: LIST
10562: PUSH
10563: EMPTY
10564: LIST
10565: LIST
10566: ST_TO_ADDR
10567: GO 13262
10569: LD_INT 4
10571: DOUBLE
10572: EQUAL
10573: IFTRUE 10577
10575: GO 10661
10577: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
10578: LD_ADDR_VAR 0 1
10582: PUSH
10583: LD_INT 2
10585: PUSH
10586: LD_INT 4
10588: PUSH
10589: LD_INT 5
10591: PUSH
10592: LD_INT 8
10594: PUSH
10595: LD_INT 11
10597: PUSH
10598: LD_INT 12
10600: PUSH
10601: LD_INT 15
10603: PUSH
10604: LD_INT 16
10606: PUSH
10607: LD_INT 22
10609: PUSH
10610: LD_INT 23
10612: PUSH
10613: LD_INT 26
10615: PUSH
10616: LD_INT 36
10618: PUSH
10619: EMPTY
10620: LIST
10621: LIST
10622: LIST
10623: LIST
10624: LIST
10625: LIST
10626: LIST
10627: LIST
10628: LIST
10629: LIST
10630: LIST
10631: LIST
10632: PUSH
10633: LD_INT 101
10635: PUSH
10636: LD_INT 102
10638: PUSH
10639: LD_INT 105
10641: PUSH
10642: LD_INT 106
10644: PUSH
10645: LD_INT 108
10647: PUSH
10648: EMPTY
10649: LIST
10650: LIST
10651: LIST
10652: LIST
10653: LIST
10654: PUSH
10655: EMPTY
10656: LIST
10657: LIST
10658: ST_TO_ADDR
10659: GO 13262
10661: LD_INT 5
10663: DOUBLE
10664: EQUAL
10665: IFTRUE 10669
10667: GO 10769
10669: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
10670: LD_ADDR_VAR 0 1
10674: PUSH
10675: LD_INT 2
10677: PUSH
10678: LD_INT 4
10680: PUSH
10681: LD_INT 5
10683: PUSH
10684: LD_INT 6
10686: PUSH
10687: LD_INT 8
10689: PUSH
10690: LD_INT 11
10692: PUSH
10693: LD_INT 12
10695: PUSH
10696: LD_INT 15
10698: PUSH
10699: LD_INT 16
10701: PUSH
10702: LD_INT 22
10704: PUSH
10705: LD_INT 23
10707: PUSH
10708: LD_INT 25
10710: PUSH
10711: LD_INT 26
10713: PUSH
10714: LD_INT 36
10716: PUSH
10717: EMPTY
10718: LIST
10719: LIST
10720: LIST
10721: LIST
10722: LIST
10723: LIST
10724: LIST
10725: LIST
10726: LIST
10727: LIST
10728: LIST
10729: LIST
10730: LIST
10731: LIST
10732: PUSH
10733: LD_INT 101
10735: PUSH
10736: LD_INT 102
10738: PUSH
10739: LD_INT 105
10741: PUSH
10742: LD_INT 106
10744: PUSH
10745: LD_INT 108
10747: PUSH
10748: LD_INT 109
10750: PUSH
10751: LD_INT 112
10753: PUSH
10754: EMPTY
10755: LIST
10756: LIST
10757: LIST
10758: LIST
10759: LIST
10760: LIST
10761: LIST
10762: PUSH
10763: EMPTY
10764: LIST
10765: LIST
10766: ST_TO_ADDR
10767: GO 13262
10769: LD_INT 6
10771: DOUBLE
10772: EQUAL
10773: IFTRUE 10777
10775: GO 10897
10777: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
10778: LD_ADDR_VAR 0 1
10782: PUSH
10783: LD_INT 2
10785: PUSH
10786: LD_INT 4
10788: PUSH
10789: LD_INT 5
10791: PUSH
10792: LD_INT 6
10794: PUSH
10795: LD_INT 8
10797: PUSH
10798: LD_INT 11
10800: PUSH
10801: LD_INT 12
10803: PUSH
10804: LD_INT 15
10806: PUSH
10807: LD_INT 16
10809: PUSH
10810: LD_INT 20
10812: PUSH
10813: LD_INT 21
10815: PUSH
10816: LD_INT 22
10818: PUSH
10819: LD_INT 23
10821: PUSH
10822: LD_INT 25
10824: PUSH
10825: LD_INT 26
10827: PUSH
10828: LD_INT 30
10830: PUSH
10831: LD_INT 31
10833: PUSH
10834: LD_INT 32
10836: PUSH
10837: LD_INT 36
10839: PUSH
10840: EMPTY
10841: LIST
10842: LIST
10843: LIST
10844: LIST
10845: LIST
10846: LIST
10847: LIST
10848: LIST
10849: LIST
10850: LIST
10851: LIST
10852: LIST
10853: LIST
10854: LIST
10855: LIST
10856: LIST
10857: LIST
10858: LIST
10859: LIST
10860: PUSH
10861: LD_INT 101
10863: PUSH
10864: LD_INT 102
10866: PUSH
10867: LD_INT 105
10869: PUSH
10870: LD_INT 106
10872: PUSH
10873: LD_INT 108
10875: PUSH
10876: LD_INT 109
10878: PUSH
10879: LD_INT 112
10881: PUSH
10882: EMPTY
10883: LIST
10884: LIST
10885: LIST
10886: LIST
10887: LIST
10888: LIST
10889: LIST
10890: PUSH
10891: EMPTY
10892: LIST
10893: LIST
10894: ST_TO_ADDR
10895: GO 13262
10897: LD_INT 7
10899: DOUBLE
10900: EQUAL
10901: IFTRUE 10905
10903: GO 11005
10905: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
10906: LD_ADDR_VAR 0 1
10910: PUSH
10911: LD_INT 2
10913: PUSH
10914: LD_INT 4
10916: PUSH
10917: LD_INT 5
10919: PUSH
10920: LD_INT 7
10922: PUSH
10923: LD_INT 11
10925: PUSH
10926: LD_INT 12
10928: PUSH
10929: LD_INT 15
10931: PUSH
10932: LD_INT 16
10934: PUSH
10935: LD_INT 20
10937: PUSH
10938: LD_INT 21
10940: PUSH
10941: LD_INT 22
10943: PUSH
10944: LD_INT 23
10946: PUSH
10947: LD_INT 25
10949: PUSH
10950: LD_INT 26
10952: PUSH
10953: EMPTY
10954: LIST
10955: LIST
10956: LIST
10957: LIST
10958: LIST
10959: LIST
10960: LIST
10961: LIST
10962: LIST
10963: LIST
10964: LIST
10965: LIST
10966: LIST
10967: LIST
10968: PUSH
10969: LD_INT 101
10971: PUSH
10972: LD_INT 102
10974: PUSH
10975: LD_INT 103
10977: PUSH
10978: LD_INT 105
10980: PUSH
10981: LD_INT 106
10983: PUSH
10984: LD_INT 108
10986: PUSH
10987: LD_INT 112
10989: PUSH
10990: EMPTY
10991: LIST
10992: LIST
10993: LIST
10994: LIST
10995: LIST
10996: LIST
10997: LIST
10998: PUSH
10999: EMPTY
11000: LIST
11001: LIST
11002: ST_TO_ADDR
11003: GO 13262
11005: LD_INT 8
11007: DOUBLE
11008: EQUAL
11009: IFTRUE 11013
11011: GO 11141
11013: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
11014: LD_ADDR_VAR 0 1
11018: PUSH
11019: LD_INT 2
11021: PUSH
11022: LD_INT 4
11024: PUSH
11025: LD_INT 5
11027: PUSH
11028: LD_INT 6
11030: PUSH
11031: LD_INT 7
11033: PUSH
11034: LD_INT 8
11036: PUSH
11037: LD_INT 11
11039: PUSH
11040: LD_INT 12
11042: PUSH
11043: LD_INT 15
11045: PUSH
11046: LD_INT 16
11048: PUSH
11049: LD_INT 20
11051: PUSH
11052: LD_INT 21
11054: PUSH
11055: LD_INT 22
11057: PUSH
11058: LD_INT 23
11060: PUSH
11061: LD_INT 25
11063: PUSH
11064: LD_INT 26
11066: PUSH
11067: LD_INT 30
11069: PUSH
11070: LD_INT 31
11072: PUSH
11073: LD_INT 32
11075: PUSH
11076: LD_INT 36
11078: PUSH
11079: EMPTY
11080: LIST
11081: LIST
11082: LIST
11083: LIST
11084: LIST
11085: LIST
11086: LIST
11087: LIST
11088: LIST
11089: LIST
11090: LIST
11091: LIST
11092: LIST
11093: LIST
11094: LIST
11095: LIST
11096: LIST
11097: LIST
11098: LIST
11099: LIST
11100: PUSH
11101: LD_INT 101
11103: PUSH
11104: LD_INT 102
11106: PUSH
11107: LD_INT 103
11109: PUSH
11110: LD_INT 105
11112: PUSH
11113: LD_INT 106
11115: PUSH
11116: LD_INT 108
11118: PUSH
11119: LD_INT 109
11121: PUSH
11122: LD_INT 112
11124: PUSH
11125: EMPTY
11126: LIST
11127: LIST
11128: LIST
11129: LIST
11130: LIST
11131: LIST
11132: LIST
11133: LIST
11134: PUSH
11135: EMPTY
11136: LIST
11137: LIST
11138: ST_TO_ADDR
11139: GO 13262
11141: LD_INT 9
11143: DOUBLE
11144: EQUAL
11145: IFTRUE 11149
11147: GO 11285
11149: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
11150: LD_ADDR_VAR 0 1
11154: PUSH
11155: LD_INT 2
11157: PUSH
11158: LD_INT 4
11160: PUSH
11161: LD_INT 5
11163: PUSH
11164: LD_INT 6
11166: PUSH
11167: LD_INT 7
11169: PUSH
11170: LD_INT 8
11172: PUSH
11173: LD_INT 11
11175: PUSH
11176: LD_INT 12
11178: PUSH
11179: LD_INT 15
11181: PUSH
11182: LD_INT 16
11184: PUSH
11185: LD_INT 20
11187: PUSH
11188: LD_INT 21
11190: PUSH
11191: LD_INT 22
11193: PUSH
11194: LD_INT 23
11196: PUSH
11197: LD_INT 25
11199: PUSH
11200: LD_INT 26
11202: PUSH
11203: LD_INT 28
11205: PUSH
11206: LD_INT 30
11208: PUSH
11209: LD_INT 31
11211: PUSH
11212: LD_INT 32
11214: PUSH
11215: LD_INT 36
11217: PUSH
11218: EMPTY
11219: LIST
11220: LIST
11221: LIST
11222: LIST
11223: LIST
11224: LIST
11225: LIST
11226: LIST
11227: LIST
11228: LIST
11229: LIST
11230: LIST
11231: LIST
11232: LIST
11233: LIST
11234: LIST
11235: LIST
11236: LIST
11237: LIST
11238: LIST
11239: LIST
11240: PUSH
11241: LD_INT 101
11243: PUSH
11244: LD_INT 102
11246: PUSH
11247: LD_INT 103
11249: PUSH
11250: LD_INT 105
11252: PUSH
11253: LD_INT 106
11255: PUSH
11256: LD_INT 108
11258: PUSH
11259: LD_INT 109
11261: PUSH
11262: LD_INT 112
11264: PUSH
11265: LD_INT 114
11267: PUSH
11268: EMPTY
11269: LIST
11270: LIST
11271: LIST
11272: LIST
11273: LIST
11274: LIST
11275: LIST
11276: LIST
11277: LIST
11278: PUSH
11279: EMPTY
11280: LIST
11281: LIST
11282: ST_TO_ADDR
11283: GO 13262
11285: LD_INT 10
11287: DOUBLE
11288: EQUAL
11289: IFTRUE 11293
11291: GO 11477
11293: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
11294: LD_ADDR_VAR 0 1
11298: PUSH
11299: LD_INT 2
11301: PUSH
11302: LD_INT 4
11304: PUSH
11305: LD_INT 5
11307: PUSH
11308: LD_INT 6
11310: PUSH
11311: LD_INT 7
11313: PUSH
11314: LD_INT 8
11316: PUSH
11317: LD_INT 9
11319: PUSH
11320: LD_INT 10
11322: PUSH
11323: LD_INT 11
11325: PUSH
11326: LD_INT 12
11328: PUSH
11329: LD_INT 13
11331: PUSH
11332: LD_INT 14
11334: PUSH
11335: LD_INT 15
11337: PUSH
11338: LD_INT 16
11340: PUSH
11341: LD_INT 17
11343: PUSH
11344: LD_INT 18
11346: PUSH
11347: LD_INT 19
11349: PUSH
11350: LD_INT 20
11352: PUSH
11353: LD_INT 21
11355: PUSH
11356: LD_INT 22
11358: PUSH
11359: LD_INT 23
11361: PUSH
11362: LD_INT 24
11364: PUSH
11365: LD_INT 25
11367: PUSH
11368: LD_INT 26
11370: PUSH
11371: LD_INT 28
11373: PUSH
11374: LD_INT 30
11376: PUSH
11377: LD_INT 31
11379: PUSH
11380: LD_INT 32
11382: PUSH
11383: LD_INT 36
11385: PUSH
11386: EMPTY
11387: LIST
11388: LIST
11389: LIST
11390: LIST
11391: LIST
11392: LIST
11393: LIST
11394: LIST
11395: LIST
11396: LIST
11397: LIST
11398: LIST
11399: LIST
11400: LIST
11401: LIST
11402: LIST
11403: LIST
11404: LIST
11405: LIST
11406: LIST
11407: LIST
11408: LIST
11409: LIST
11410: LIST
11411: LIST
11412: LIST
11413: LIST
11414: LIST
11415: LIST
11416: PUSH
11417: LD_INT 101
11419: PUSH
11420: LD_INT 102
11422: PUSH
11423: LD_INT 103
11425: PUSH
11426: LD_INT 104
11428: PUSH
11429: LD_INT 105
11431: PUSH
11432: LD_INT 106
11434: PUSH
11435: LD_INT 107
11437: PUSH
11438: LD_INT 108
11440: PUSH
11441: LD_INT 109
11443: PUSH
11444: LD_INT 110
11446: PUSH
11447: LD_INT 111
11449: PUSH
11450: LD_INT 112
11452: PUSH
11453: LD_INT 114
11455: PUSH
11456: EMPTY
11457: LIST
11458: LIST
11459: LIST
11460: LIST
11461: LIST
11462: LIST
11463: LIST
11464: LIST
11465: LIST
11466: LIST
11467: LIST
11468: LIST
11469: LIST
11470: PUSH
11471: EMPTY
11472: LIST
11473: LIST
11474: ST_TO_ADDR
11475: GO 13262
11477: LD_INT 11
11479: DOUBLE
11480: EQUAL
11481: IFTRUE 11485
11483: GO 11677
11485: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
11486: LD_ADDR_VAR 0 1
11490: PUSH
11491: LD_INT 2
11493: PUSH
11494: LD_INT 3
11496: PUSH
11497: LD_INT 4
11499: PUSH
11500: LD_INT 5
11502: PUSH
11503: LD_INT 6
11505: PUSH
11506: LD_INT 7
11508: PUSH
11509: LD_INT 8
11511: PUSH
11512: LD_INT 9
11514: PUSH
11515: LD_INT 10
11517: PUSH
11518: LD_INT 11
11520: PUSH
11521: LD_INT 12
11523: PUSH
11524: LD_INT 13
11526: PUSH
11527: LD_INT 14
11529: PUSH
11530: LD_INT 15
11532: PUSH
11533: LD_INT 16
11535: PUSH
11536: LD_INT 17
11538: PUSH
11539: LD_INT 18
11541: PUSH
11542: LD_INT 19
11544: PUSH
11545: LD_INT 20
11547: PUSH
11548: LD_INT 21
11550: PUSH
11551: LD_INT 22
11553: PUSH
11554: LD_INT 23
11556: PUSH
11557: LD_INT 24
11559: PUSH
11560: LD_INT 25
11562: PUSH
11563: LD_INT 26
11565: PUSH
11566: LD_INT 28
11568: PUSH
11569: LD_INT 30
11571: PUSH
11572: LD_INT 31
11574: PUSH
11575: LD_INT 32
11577: PUSH
11578: LD_INT 34
11580: PUSH
11581: LD_INT 36
11583: PUSH
11584: EMPTY
11585: LIST
11586: LIST
11587: LIST
11588: LIST
11589: LIST
11590: LIST
11591: LIST
11592: LIST
11593: LIST
11594: LIST
11595: LIST
11596: LIST
11597: LIST
11598: LIST
11599: LIST
11600: LIST
11601: LIST
11602: LIST
11603: LIST
11604: LIST
11605: LIST
11606: LIST
11607: LIST
11608: LIST
11609: LIST
11610: LIST
11611: LIST
11612: LIST
11613: LIST
11614: LIST
11615: LIST
11616: PUSH
11617: LD_INT 101
11619: PUSH
11620: LD_INT 102
11622: PUSH
11623: LD_INT 103
11625: PUSH
11626: LD_INT 104
11628: PUSH
11629: LD_INT 105
11631: PUSH
11632: LD_INT 106
11634: PUSH
11635: LD_INT 107
11637: PUSH
11638: LD_INT 108
11640: PUSH
11641: LD_INT 109
11643: PUSH
11644: LD_INT 110
11646: PUSH
11647: LD_INT 111
11649: PUSH
11650: LD_INT 112
11652: PUSH
11653: LD_INT 114
11655: PUSH
11656: EMPTY
11657: LIST
11658: LIST
11659: LIST
11660: LIST
11661: LIST
11662: LIST
11663: LIST
11664: LIST
11665: LIST
11666: LIST
11667: LIST
11668: LIST
11669: LIST
11670: PUSH
11671: EMPTY
11672: LIST
11673: LIST
11674: ST_TO_ADDR
11675: GO 13262
11677: LD_INT 12
11679: DOUBLE
11680: EQUAL
11681: IFTRUE 11685
11683: GO 11893
11685: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
11686: LD_ADDR_VAR 0 1
11690: PUSH
11691: LD_INT 1
11693: PUSH
11694: LD_INT 2
11696: PUSH
11697: LD_INT 3
11699: PUSH
11700: LD_INT 4
11702: PUSH
11703: LD_INT 5
11705: PUSH
11706: LD_INT 6
11708: PUSH
11709: LD_INT 7
11711: PUSH
11712: LD_INT 8
11714: PUSH
11715: LD_INT 9
11717: PUSH
11718: LD_INT 10
11720: PUSH
11721: LD_INT 11
11723: PUSH
11724: LD_INT 12
11726: PUSH
11727: LD_INT 13
11729: PUSH
11730: LD_INT 14
11732: PUSH
11733: LD_INT 15
11735: PUSH
11736: LD_INT 16
11738: PUSH
11739: LD_INT 17
11741: PUSH
11742: LD_INT 18
11744: PUSH
11745: LD_INT 19
11747: PUSH
11748: LD_INT 20
11750: PUSH
11751: LD_INT 21
11753: PUSH
11754: LD_INT 22
11756: PUSH
11757: LD_INT 23
11759: PUSH
11760: LD_INT 24
11762: PUSH
11763: LD_INT 25
11765: PUSH
11766: LD_INT 26
11768: PUSH
11769: LD_INT 27
11771: PUSH
11772: LD_INT 28
11774: PUSH
11775: LD_INT 30
11777: PUSH
11778: LD_INT 31
11780: PUSH
11781: LD_INT 32
11783: PUSH
11784: LD_INT 33
11786: PUSH
11787: LD_INT 34
11789: PUSH
11790: LD_INT 36
11792: PUSH
11793: EMPTY
11794: LIST
11795: LIST
11796: LIST
11797: LIST
11798: LIST
11799: LIST
11800: LIST
11801: LIST
11802: LIST
11803: LIST
11804: LIST
11805: LIST
11806: LIST
11807: LIST
11808: LIST
11809: LIST
11810: LIST
11811: LIST
11812: LIST
11813: LIST
11814: LIST
11815: LIST
11816: LIST
11817: LIST
11818: LIST
11819: LIST
11820: LIST
11821: LIST
11822: LIST
11823: LIST
11824: LIST
11825: LIST
11826: LIST
11827: LIST
11828: PUSH
11829: LD_INT 101
11831: PUSH
11832: LD_INT 102
11834: PUSH
11835: LD_INT 103
11837: PUSH
11838: LD_INT 104
11840: PUSH
11841: LD_INT 105
11843: PUSH
11844: LD_INT 106
11846: PUSH
11847: LD_INT 107
11849: PUSH
11850: LD_INT 108
11852: PUSH
11853: LD_INT 109
11855: PUSH
11856: LD_INT 110
11858: PUSH
11859: LD_INT 111
11861: PUSH
11862: LD_INT 112
11864: PUSH
11865: LD_INT 113
11867: PUSH
11868: LD_INT 114
11870: PUSH
11871: EMPTY
11872: LIST
11873: LIST
11874: LIST
11875: LIST
11876: LIST
11877: LIST
11878: LIST
11879: LIST
11880: LIST
11881: LIST
11882: LIST
11883: LIST
11884: LIST
11885: LIST
11886: PUSH
11887: EMPTY
11888: LIST
11889: LIST
11890: ST_TO_ADDR
11891: GO 13262
11893: LD_INT 13
11895: DOUBLE
11896: EQUAL
11897: IFTRUE 11901
11899: GO 12097
11901: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
11902: LD_ADDR_VAR 0 1
11906: PUSH
11907: LD_INT 1
11909: PUSH
11910: LD_INT 2
11912: PUSH
11913: LD_INT 3
11915: PUSH
11916: LD_INT 4
11918: PUSH
11919: LD_INT 5
11921: PUSH
11922: LD_INT 8
11924: PUSH
11925: LD_INT 9
11927: PUSH
11928: LD_INT 10
11930: PUSH
11931: LD_INT 11
11933: PUSH
11934: LD_INT 12
11936: PUSH
11937: LD_INT 14
11939: PUSH
11940: LD_INT 15
11942: PUSH
11943: LD_INT 16
11945: PUSH
11946: LD_INT 17
11948: PUSH
11949: LD_INT 18
11951: PUSH
11952: LD_INT 19
11954: PUSH
11955: LD_INT 20
11957: PUSH
11958: LD_INT 21
11960: PUSH
11961: LD_INT 22
11963: PUSH
11964: LD_INT 23
11966: PUSH
11967: LD_INT 24
11969: PUSH
11970: LD_INT 25
11972: PUSH
11973: LD_INT 26
11975: PUSH
11976: LD_INT 27
11978: PUSH
11979: LD_INT 28
11981: PUSH
11982: LD_INT 30
11984: PUSH
11985: LD_INT 31
11987: PUSH
11988: LD_INT 32
11990: PUSH
11991: LD_INT 33
11993: PUSH
11994: LD_INT 34
11996: PUSH
11997: LD_INT 36
11999: PUSH
12000: EMPTY
12001: LIST
12002: LIST
12003: LIST
12004: LIST
12005: LIST
12006: LIST
12007: LIST
12008: LIST
12009: LIST
12010: LIST
12011: LIST
12012: LIST
12013: LIST
12014: LIST
12015: LIST
12016: LIST
12017: LIST
12018: LIST
12019: LIST
12020: LIST
12021: LIST
12022: LIST
12023: LIST
12024: LIST
12025: LIST
12026: LIST
12027: LIST
12028: LIST
12029: LIST
12030: LIST
12031: LIST
12032: PUSH
12033: LD_INT 101
12035: PUSH
12036: LD_INT 102
12038: PUSH
12039: LD_INT 103
12041: PUSH
12042: LD_INT 104
12044: PUSH
12045: LD_INT 105
12047: PUSH
12048: LD_INT 106
12050: PUSH
12051: LD_INT 107
12053: PUSH
12054: LD_INT 108
12056: PUSH
12057: LD_INT 109
12059: PUSH
12060: LD_INT 110
12062: PUSH
12063: LD_INT 111
12065: PUSH
12066: LD_INT 112
12068: PUSH
12069: LD_INT 113
12071: PUSH
12072: LD_INT 114
12074: PUSH
12075: EMPTY
12076: LIST
12077: LIST
12078: LIST
12079: LIST
12080: LIST
12081: LIST
12082: LIST
12083: LIST
12084: LIST
12085: LIST
12086: LIST
12087: LIST
12088: LIST
12089: LIST
12090: PUSH
12091: EMPTY
12092: LIST
12093: LIST
12094: ST_TO_ADDR
12095: GO 13262
12097: LD_INT 14
12099: DOUBLE
12100: EQUAL
12101: IFTRUE 12105
12103: GO 12317
12105: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
12106: LD_ADDR_VAR 0 1
12110: PUSH
12111: LD_INT 1
12113: PUSH
12114: LD_INT 2
12116: PUSH
12117: LD_INT 3
12119: PUSH
12120: LD_INT 4
12122: PUSH
12123: LD_INT 5
12125: PUSH
12126: LD_INT 6
12128: PUSH
12129: LD_INT 7
12131: PUSH
12132: LD_INT 8
12134: PUSH
12135: LD_INT 9
12137: PUSH
12138: LD_INT 10
12140: PUSH
12141: LD_INT 11
12143: PUSH
12144: LD_INT 12
12146: PUSH
12147: LD_INT 13
12149: PUSH
12150: LD_INT 14
12152: PUSH
12153: LD_INT 15
12155: PUSH
12156: LD_INT 16
12158: PUSH
12159: LD_INT 17
12161: PUSH
12162: LD_INT 18
12164: PUSH
12165: LD_INT 19
12167: PUSH
12168: LD_INT 20
12170: PUSH
12171: LD_INT 21
12173: PUSH
12174: LD_INT 22
12176: PUSH
12177: LD_INT 23
12179: PUSH
12180: LD_INT 24
12182: PUSH
12183: LD_INT 25
12185: PUSH
12186: LD_INT 26
12188: PUSH
12189: LD_INT 27
12191: PUSH
12192: LD_INT 28
12194: PUSH
12195: LD_INT 29
12197: PUSH
12198: LD_INT 30
12200: PUSH
12201: LD_INT 31
12203: PUSH
12204: LD_INT 32
12206: PUSH
12207: LD_INT 33
12209: PUSH
12210: LD_INT 34
12212: PUSH
12213: LD_INT 36
12215: PUSH
12216: EMPTY
12217: LIST
12218: LIST
12219: LIST
12220: LIST
12221: LIST
12222: LIST
12223: LIST
12224: LIST
12225: LIST
12226: LIST
12227: LIST
12228: LIST
12229: LIST
12230: LIST
12231: LIST
12232: LIST
12233: LIST
12234: LIST
12235: LIST
12236: LIST
12237: LIST
12238: LIST
12239: LIST
12240: LIST
12241: LIST
12242: LIST
12243: LIST
12244: LIST
12245: LIST
12246: LIST
12247: LIST
12248: LIST
12249: LIST
12250: LIST
12251: LIST
12252: PUSH
12253: LD_INT 101
12255: PUSH
12256: LD_INT 102
12258: PUSH
12259: LD_INT 103
12261: PUSH
12262: LD_INT 104
12264: PUSH
12265: LD_INT 105
12267: PUSH
12268: LD_INT 106
12270: PUSH
12271: LD_INT 107
12273: PUSH
12274: LD_INT 108
12276: PUSH
12277: LD_INT 109
12279: PUSH
12280: LD_INT 110
12282: PUSH
12283: LD_INT 111
12285: PUSH
12286: LD_INT 112
12288: PUSH
12289: LD_INT 113
12291: PUSH
12292: LD_INT 114
12294: PUSH
12295: EMPTY
12296: LIST
12297: LIST
12298: LIST
12299: LIST
12300: LIST
12301: LIST
12302: LIST
12303: LIST
12304: LIST
12305: LIST
12306: LIST
12307: LIST
12308: LIST
12309: LIST
12310: PUSH
12311: EMPTY
12312: LIST
12313: LIST
12314: ST_TO_ADDR
12315: GO 13262
12317: LD_INT 15
12319: DOUBLE
12320: EQUAL
12321: IFTRUE 12325
12323: GO 12537
12325: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
12326: LD_ADDR_VAR 0 1
12330: PUSH
12331: LD_INT 1
12333: PUSH
12334: LD_INT 2
12336: PUSH
12337: LD_INT 3
12339: PUSH
12340: LD_INT 4
12342: PUSH
12343: LD_INT 5
12345: PUSH
12346: LD_INT 6
12348: PUSH
12349: LD_INT 7
12351: PUSH
12352: LD_INT 8
12354: PUSH
12355: LD_INT 9
12357: PUSH
12358: LD_INT 10
12360: PUSH
12361: LD_INT 11
12363: PUSH
12364: LD_INT 12
12366: PUSH
12367: LD_INT 13
12369: PUSH
12370: LD_INT 14
12372: PUSH
12373: LD_INT 15
12375: PUSH
12376: LD_INT 16
12378: PUSH
12379: LD_INT 17
12381: PUSH
12382: LD_INT 18
12384: PUSH
12385: LD_INT 19
12387: PUSH
12388: LD_INT 20
12390: PUSH
12391: LD_INT 21
12393: PUSH
12394: LD_INT 22
12396: PUSH
12397: LD_INT 23
12399: PUSH
12400: LD_INT 24
12402: PUSH
12403: LD_INT 25
12405: PUSH
12406: LD_INT 26
12408: PUSH
12409: LD_INT 27
12411: PUSH
12412: LD_INT 28
12414: PUSH
12415: LD_INT 29
12417: PUSH
12418: LD_INT 30
12420: PUSH
12421: LD_INT 31
12423: PUSH
12424: LD_INT 32
12426: PUSH
12427: LD_INT 33
12429: PUSH
12430: LD_INT 34
12432: PUSH
12433: LD_INT 36
12435: PUSH
12436: EMPTY
12437: LIST
12438: LIST
12439: LIST
12440: LIST
12441: LIST
12442: LIST
12443: LIST
12444: LIST
12445: LIST
12446: LIST
12447: LIST
12448: LIST
12449: LIST
12450: LIST
12451: LIST
12452: LIST
12453: LIST
12454: LIST
12455: LIST
12456: LIST
12457: LIST
12458: LIST
12459: LIST
12460: LIST
12461: LIST
12462: LIST
12463: LIST
12464: LIST
12465: LIST
12466: LIST
12467: LIST
12468: LIST
12469: LIST
12470: LIST
12471: LIST
12472: PUSH
12473: LD_INT 101
12475: PUSH
12476: LD_INT 102
12478: PUSH
12479: LD_INT 103
12481: PUSH
12482: LD_INT 104
12484: PUSH
12485: LD_INT 105
12487: PUSH
12488: LD_INT 106
12490: PUSH
12491: LD_INT 107
12493: PUSH
12494: LD_INT 108
12496: PUSH
12497: LD_INT 109
12499: PUSH
12500: LD_INT 110
12502: PUSH
12503: LD_INT 111
12505: PUSH
12506: LD_INT 112
12508: PUSH
12509: LD_INT 113
12511: PUSH
12512: LD_INT 114
12514: PUSH
12515: EMPTY
12516: LIST
12517: LIST
12518: LIST
12519: LIST
12520: LIST
12521: LIST
12522: LIST
12523: LIST
12524: LIST
12525: LIST
12526: LIST
12527: LIST
12528: LIST
12529: LIST
12530: PUSH
12531: EMPTY
12532: LIST
12533: LIST
12534: ST_TO_ADDR
12535: GO 13262
12537: LD_INT 16
12539: DOUBLE
12540: EQUAL
12541: IFTRUE 12545
12543: GO 12669
12545: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
12546: LD_ADDR_VAR 0 1
12550: PUSH
12551: LD_INT 2
12553: PUSH
12554: LD_INT 4
12556: PUSH
12557: LD_INT 5
12559: PUSH
12560: LD_INT 7
12562: PUSH
12563: LD_INT 11
12565: PUSH
12566: LD_INT 12
12568: PUSH
12569: LD_INT 15
12571: PUSH
12572: LD_INT 16
12574: PUSH
12575: LD_INT 20
12577: PUSH
12578: LD_INT 21
12580: PUSH
12581: LD_INT 22
12583: PUSH
12584: LD_INT 23
12586: PUSH
12587: LD_INT 25
12589: PUSH
12590: LD_INT 26
12592: PUSH
12593: LD_INT 30
12595: PUSH
12596: LD_INT 31
12598: PUSH
12599: LD_INT 32
12601: PUSH
12602: LD_INT 33
12604: PUSH
12605: LD_INT 34
12607: PUSH
12608: EMPTY
12609: LIST
12610: LIST
12611: LIST
12612: LIST
12613: LIST
12614: LIST
12615: LIST
12616: LIST
12617: LIST
12618: LIST
12619: LIST
12620: LIST
12621: LIST
12622: LIST
12623: LIST
12624: LIST
12625: LIST
12626: LIST
12627: LIST
12628: PUSH
12629: LD_INT 101
12631: PUSH
12632: LD_INT 102
12634: PUSH
12635: LD_INT 103
12637: PUSH
12638: LD_INT 106
12640: PUSH
12641: LD_INT 108
12643: PUSH
12644: LD_INT 112
12646: PUSH
12647: LD_INT 113
12649: PUSH
12650: LD_INT 114
12652: PUSH
12653: EMPTY
12654: LIST
12655: LIST
12656: LIST
12657: LIST
12658: LIST
12659: LIST
12660: LIST
12661: LIST
12662: PUSH
12663: EMPTY
12664: LIST
12665: LIST
12666: ST_TO_ADDR
12667: GO 13262
12669: LD_INT 17
12671: DOUBLE
12672: EQUAL
12673: IFTRUE 12677
12675: GO 12889
12677: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
12678: LD_ADDR_VAR 0 1
12682: PUSH
12683: LD_INT 1
12685: PUSH
12686: LD_INT 2
12688: PUSH
12689: LD_INT 3
12691: PUSH
12692: LD_INT 4
12694: PUSH
12695: LD_INT 5
12697: PUSH
12698: LD_INT 6
12700: PUSH
12701: LD_INT 7
12703: PUSH
12704: LD_INT 8
12706: PUSH
12707: LD_INT 9
12709: PUSH
12710: LD_INT 10
12712: PUSH
12713: LD_INT 11
12715: PUSH
12716: LD_INT 12
12718: PUSH
12719: LD_INT 13
12721: PUSH
12722: LD_INT 14
12724: PUSH
12725: LD_INT 15
12727: PUSH
12728: LD_INT 16
12730: PUSH
12731: LD_INT 17
12733: PUSH
12734: LD_INT 18
12736: PUSH
12737: LD_INT 19
12739: PUSH
12740: LD_INT 20
12742: PUSH
12743: LD_INT 21
12745: PUSH
12746: LD_INT 22
12748: PUSH
12749: LD_INT 23
12751: PUSH
12752: LD_INT 24
12754: PUSH
12755: LD_INT 25
12757: PUSH
12758: LD_INT 26
12760: PUSH
12761: LD_INT 27
12763: PUSH
12764: LD_INT 28
12766: PUSH
12767: LD_INT 29
12769: PUSH
12770: LD_INT 30
12772: PUSH
12773: LD_INT 31
12775: PUSH
12776: LD_INT 32
12778: PUSH
12779: LD_INT 33
12781: PUSH
12782: LD_INT 34
12784: PUSH
12785: LD_INT 36
12787: PUSH
12788: EMPTY
12789: LIST
12790: LIST
12791: LIST
12792: LIST
12793: LIST
12794: LIST
12795: LIST
12796: LIST
12797: LIST
12798: LIST
12799: LIST
12800: LIST
12801: LIST
12802: LIST
12803: LIST
12804: LIST
12805: LIST
12806: LIST
12807: LIST
12808: LIST
12809: LIST
12810: LIST
12811: LIST
12812: LIST
12813: LIST
12814: LIST
12815: LIST
12816: LIST
12817: LIST
12818: LIST
12819: LIST
12820: LIST
12821: LIST
12822: LIST
12823: LIST
12824: PUSH
12825: LD_INT 101
12827: PUSH
12828: LD_INT 102
12830: PUSH
12831: LD_INT 103
12833: PUSH
12834: LD_INT 104
12836: PUSH
12837: LD_INT 105
12839: PUSH
12840: LD_INT 106
12842: PUSH
12843: LD_INT 107
12845: PUSH
12846: LD_INT 108
12848: PUSH
12849: LD_INT 109
12851: PUSH
12852: LD_INT 110
12854: PUSH
12855: LD_INT 111
12857: PUSH
12858: LD_INT 112
12860: PUSH
12861: LD_INT 113
12863: PUSH
12864: LD_INT 114
12866: PUSH
12867: EMPTY
12868: LIST
12869: LIST
12870: LIST
12871: LIST
12872: LIST
12873: LIST
12874: LIST
12875: LIST
12876: LIST
12877: LIST
12878: LIST
12879: LIST
12880: LIST
12881: LIST
12882: PUSH
12883: EMPTY
12884: LIST
12885: LIST
12886: ST_TO_ADDR
12887: GO 13262
12889: LD_INT 18
12891: DOUBLE
12892: EQUAL
12893: IFTRUE 12897
12895: GO 13033
12897: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
12898: LD_ADDR_VAR 0 1
12902: PUSH
12903: LD_INT 2
12905: PUSH
12906: LD_INT 4
12908: PUSH
12909: LD_INT 5
12911: PUSH
12912: LD_INT 7
12914: PUSH
12915: LD_INT 11
12917: PUSH
12918: LD_INT 12
12920: PUSH
12921: LD_INT 15
12923: PUSH
12924: LD_INT 16
12926: PUSH
12927: LD_INT 20
12929: PUSH
12930: LD_INT 21
12932: PUSH
12933: LD_INT 22
12935: PUSH
12936: LD_INT 23
12938: PUSH
12939: LD_INT 25
12941: PUSH
12942: LD_INT 26
12944: PUSH
12945: LD_INT 30
12947: PUSH
12948: LD_INT 31
12950: PUSH
12951: LD_INT 32
12953: PUSH
12954: LD_INT 33
12956: PUSH
12957: LD_INT 34
12959: PUSH
12960: LD_INT 35
12962: PUSH
12963: LD_INT 36
12965: PUSH
12966: EMPTY
12967: LIST
12968: LIST
12969: LIST
12970: LIST
12971: LIST
12972: LIST
12973: LIST
12974: LIST
12975: LIST
12976: LIST
12977: LIST
12978: LIST
12979: LIST
12980: LIST
12981: LIST
12982: LIST
12983: LIST
12984: LIST
12985: LIST
12986: LIST
12987: LIST
12988: PUSH
12989: LD_INT 101
12991: PUSH
12992: LD_INT 102
12994: PUSH
12995: LD_INT 103
12997: PUSH
12998: LD_INT 106
13000: PUSH
13001: LD_INT 108
13003: PUSH
13004: LD_INT 112
13006: PUSH
13007: LD_INT 113
13009: PUSH
13010: LD_INT 114
13012: PUSH
13013: LD_INT 115
13015: PUSH
13016: EMPTY
13017: LIST
13018: LIST
13019: LIST
13020: LIST
13021: LIST
13022: LIST
13023: LIST
13024: LIST
13025: LIST
13026: PUSH
13027: EMPTY
13028: LIST
13029: LIST
13030: ST_TO_ADDR
13031: GO 13262
13033: LD_INT 19
13035: DOUBLE
13036: EQUAL
13037: IFTRUE 13041
13039: GO 13261
13041: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
13042: LD_ADDR_VAR 0 1
13046: PUSH
13047: LD_INT 1
13049: PUSH
13050: LD_INT 2
13052: PUSH
13053: LD_INT 3
13055: PUSH
13056: LD_INT 4
13058: PUSH
13059: LD_INT 5
13061: PUSH
13062: LD_INT 6
13064: PUSH
13065: LD_INT 7
13067: PUSH
13068: LD_INT 8
13070: PUSH
13071: LD_INT 9
13073: PUSH
13074: LD_INT 10
13076: PUSH
13077: LD_INT 11
13079: PUSH
13080: LD_INT 12
13082: PUSH
13083: LD_INT 13
13085: PUSH
13086: LD_INT 14
13088: PUSH
13089: LD_INT 15
13091: PUSH
13092: LD_INT 16
13094: PUSH
13095: LD_INT 17
13097: PUSH
13098: LD_INT 18
13100: PUSH
13101: LD_INT 19
13103: PUSH
13104: LD_INT 20
13106: PUSH
13107: LD_INT 21
13109: PUSH
13110: LD_INT 22
13112: PUSH
13113: LD_INT 23
13115: PUSH
13116: LD_INT 24
13118: PUSH
13119: LD_INT 25
13121: PUSH
13122: LD_INT 26
13124: PUSH
13125: LD_INT 27
13127: PUSH
13128: LD_INT 28
13130: PUSH
13131: LD_INT 29
13133: PUSH
13134: LD_INT 30
13136: PUSH
13137: LD_INT 31
13139: PUSH
13140: LD_INT 32
13142: PUSH
13143: LD_INT 33
13145: PUSH
13146: LD_INT 34
13148: PUSH
13149: LD_INT 35
13151: PUSH
13152: LD_INT 36
13154: PUSH
13155: EMPTY
13156: LIST
13157: LIST
13158: LIST
13159: LIST
13160: LIST
13161: LIST
13162: LIST
13163: LIST
13164: LIST
13165: LIST
13166: LIST
13167: LIST
13168: LIST
13169: LIST
13170: LIST
13171: LIST
13172: LIST
13173: LIST
13174: LIST
13175: LIST
13176: LIST
13177: LIST
13178: LIST
13179: LIST
13180: LIST
13181: LIST
13182: LIST
13183: LIST
13184: LIST
13185: LIST
13186: LIST
13187: LIST
13188: LIST
13189: LIST
13190: LIST
13191: LIST
13192: PUSH
13193: LD_INT 101
13195: PUSH
13196: LD_INT 102
13198: PUSH
13199: LD_INT 103
13201: PUSH
13202: LD_INT 104
13204: PUSH
13205: LD_INT 105
13207: PUSH
13208: LD_INT 106
13210: PUSH
13211: LD_INT 107
13213: PUSH
13214: LD_INT 108
13216: PUSH
13217: LD_INT 109
13219: PUSH
13220: LD_INT 110
13222: PUSH
13223: LD_INT 111
13225: PUSH
13226: LD_INT 112
13228: PUSH
13229: LD_INT 113
13231: PUSH
13232: LD_INT 114
13234: PUSH
13235: LD_INT 115
13237: PUSH
13238: EMPTY
13239: LIST
13240: LIST
13241: LIST
13242: LIST
13243: LIST
13244: LIST
13245: LIST
13246: LIST
13247: LIST
13248: LIST
13249: LIST
13250: LIST
13251: LIST
13252: LIST
13253: LIST
13254: PUSH
13255: EMPTY
13256: LIST
13257: LIST
13258: ST_TO_ADDR
13259: GO 13262
13261: POP
// end else
13262: GO 13481
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
13264: LD_ADDR_VAR 0 1
13268: PUSH
13269: LD_INT 1
13271: PUSH
13272: LD_INT 2
13274: PUSH
13275: LD_INT 3
13277: PUSH
13278: LD_INT 4
13280: PUSH
13281: LD_INT 5
13283: PUSH
13284: LD_INT 6
13286: PUSH
13287: LD_INT 7
13289: PUSH
13290: LD_INT 8
13292: PUSH
13293: LD_INT 9
13295: PUSH
13296: LD_INT 10
13298: PUSH
13299: LD_INT 11
13301: PUSH
13302: LD_INT 12
13304: PUSH
13305: LD_INT 13
13307: PUSH
13308: LD_INT 14
13310: PUSH
13311: LD_INT 15
13313: PUSH
13314: LD_INT 16
13316: PUSH
13317: LD_INT 17
13319: PUSH
13320: LD_INT 18
13322: PUSH
13323: LD_INT 19
13325: PUSH
13326: LD_INT 20
13328: PUSH
13329: LD_INT 21
13331: PUSH
13332: LD_INT 22
13334: PUSH
13335: LD_INT 23
13337: PUSH
13338: LD_INT 24
13340: PUSH
13341: LD_INT 25
13343: PUSH
13344: LD_INT 26
13346: PUSH
13347: LD_INT 27
13349: PUSH
13350: LD_INT 28
13352: PUSH
13353: LD_INT 29
13355: PUSH
13356: LD_INT 30
13358: PUSH
13359: LD_INT 31
13361: PUSH
13362: LD_INT 32
13364: PUSH
13365: LD_INT 33
13367: PUSH
13368: LD_INT 34
13370: PUSH
13371: LD_INT 35
13373: PUSH
13374: LD_INT 36
13376: PUSH
13377: EMPTY
13378: LIST
13379: LIST
13380: LIST
13381: LIST
13382: LIST
13383: LIST
13384: LIST
13385: LIST
13386: LIST
13387: LIST
13388: LIST
13389: LIST
13390: LIST
13391: LIST
13392: LIST
13393: LIST
13394: LIST
13395: LIST
13396: LIST
13397: LIST
13398: LIST
13399: LIST
13400: LIST
13401: LIST
13402: LIST
13403: LIST
13404: LIST
13405: LIST
13406: LIST
13407: LIST
13408: LIST
13409: LIST
13410: LIST
13411: LIST
13412: LIST
13413: LIST
13414: PUSH
13415: LD_INT 101
13417: PUSH
13418: LD_INT 102
13420: PUSH
13421: LD_INT 103
13423: PUSH
13424: LD_INT 104
13426: PUSH
13427: LD_INT 105
13429: PUSH
13430: LD_INT 106
13432: PUSH
13433: LD_INT 107
13435: PUSH
13436: LD_INT 108
13438: PUSH
13439: LD_INT 109
13441: PUSH
13442: LD_INT 110
13444: PUSH
13445: LD_INT 111
13447: PUSH
13448: LD_INT 112
13450: PUSH
13451: LD_INT 113
13453: PUSH
13454: LD_INT 114
13456: PUSH
13457: LD_INT 115
13459: PUSH
13460: EMPTY
13461: LIST
13462: LIST
13463: LIST
13464: LIST
13465: LIST
13466: LIST
13467: LIST
13468: LIST
13469: LIST
13470: LIST
13471: LIST
13472: LIST
13473: LIST
13474: LIST
13475: LIST
13476: PUSH
13477: EMPTY
13478: LIST
13479: LIST
13480: ST_TO_ADDR
// if result then
13481: LD_VAR 0 1
13485: IFFALSE 13774
// begin normal :=  ;
13487: LD_ADDR_VAR 0 3
13491: PUSH
13492: LD_STRING 
13494: ST_TO_ADDR
// hardcore :=  ;
13495: LD_ADDR_VAR 0 4
13499: PUSH
13500: LD_STRING 
13502: ST_TO_ADDR
// for i = 1 to normalCounter do
13503: LD_ADDR_VAR 0 5
13507: PUSH
13508: DOUBLE
13509: LD_INT 1
13511: DEC
13512: ST_TO_ADDR
13513: LD_EXP 69
13517: PUSH
13518: FOR_TO
13519: IFFALSE 13620
// begin tmp := 0 ;
13521: LD_ADDR_VAR 0 2
13525: PUSH
13526: LD_STRING 0
13528: ST_TO_ADDR
// if result [ 1 ] then
13529: LD_VAR 0 1
13533: PUSH
13534: LD_INT 1
13536: ARRAY
13537: IFFALSE 13602
// if result [ 1 ] [ 1 ] = i then
13539: LD_VAR 0 1
13543: PUSH
13544: LD_INT 1
13546: ARRAY
13547: PUSH
13548: LD_INT 1
13550: ARRAY
13551: PUSH
13552: LD_VAR 0 5
13556: EQUAL
13557: IFFALSE 13602
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
13559: LD_ADDR_VAR 0 1
13563: PUSH
13564: LD_VAR 0 1
13568: PPUSH
13569: LD_INT 1
13571: PPUSH
13572: LD_VAR 0 1
13576: PUSH
13577: LD_INT 1
13579: ARRAY
13580: PPUSH
13581: LD_INT 1
13583: PPUSH
13584: CALL_OW 3
13588: PPUSH
13589: CALL_OW 1
13593: ST_TO_ADDR
// tmp := 1 ;
13594: LD_ADDR_VAR 0 2
13598: PUSH
13599: LD_STRING 1
13601: ST_TO_ADDR
// end ; normal := normal & tmp ;
13602: LD_ADDR_VAR 0 3
13606: PUSH
13607: LD_VAR 0 3
13611: PUSH
13612: LD_VAR 0 2
13616: STR
13617: ST_TO_ADDR
// end ;
13618: GO 13518
13620: POP
13621: POP
// for i = 1 to hardcoreCounter do
13622: LD_ADDR_VAR 0 5
13626: PUSH
13627: DOUBLE
13628: LD_INT 1
13630: DEC
13631: ST_TO_ADDR
13632: LD_EXP 70
13636: PUSH
13637: FOR_TO
13638: IFFALSE 13743
// begin tmp := 0 ;
13640: LD_ADDR_VAR 0 2
13644: PUSH
13645: LD_STRING 0
13647: ST_TO_ADDR
// if result [ 2 ] then
13648: LD_VAR 0 1
13652: PUSH
13653: LD_INT 2
13655: ARRAY
13656: IFFALSE 13725
// if result [ 2 ] [ 1 ] = 100 + i then
13658: LD_VAR 0 1
13662: PUSH
13663: LD_INT 2
13665: ARRAY
13666: PUSH
13667: LD_INT 1
13669: ARRAY
13670: PUSH
13671: LD_INT 100
13673: PUSH
13674: LD_VAR 0 5
13678: PLUS
13679: EQUAL
13680: IFFALSE 13725
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
13682: LD_ADDR_VAR 0 1
13686: PUSH
13687: LD_VAR 0 1
13691: PPUSH
13692: LD_INT 2
13694: PPUSH
13695: LD_VAR 0 1
13699: PUSH
13700: LD_INT 2
13702: ARRAY
13703: PPUSH
13704: LD_INT 1
13706: PPUSH
13707: CALL_OW 3
13711: PPUSH
13712: CALL_OW 1
13716: ST_TO_ADDR
// tmp := 1 ;
13717: LD_ADDR_VAR 0 2
13721: PUSH
13722: LD_STRING 1
13724: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
13725: LD_ADDR_VAR 0 4
13729: PUSH
13730: LD_VAR 0 4
13734: PUSH
13735: LD_VAR 0 2
13739: STR
13740: ST_TO_ADDR
// end ;
13741: GO 13637
13743: POP
13744: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
13745: LD_STRING getStreamItemsFromMission("
13747: PUSH
13748: LD_VAR 0 3
13752: STR
13753: PUSH
13754: LD_STRING ","
13756: STR
13757: PUSH
13758: LD_VAR 0 4
13762: STR
13763: PUSH
13764: LD_STRING ")
13766: STR
13767: PPUSH
13768: CALL_OW 559
// end else
13772: GO 13781
// ToLua ( getStreamItemsFromMission("","") ) ;
13774: LD_STRING getStreamItemsFromMission("","")
13776: PPUSH
13777: CALL_OW 559
// end ;
13781: LD_VAR 0 1
13785: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
13786: LD_EXP 68
13790: PUSH
13791: LD_EXP 73
13795: AND
13796: IFFALSE 13920
13798: GO 13800
13800: DISABLE
13801: LD_INT 0
13803: PPUSH
13804: PPUSH
// begin enable ;
13805: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
13806: LD_ADDR_VAR 0 2
13810: PUSH
13811: LD_INT 22
13813: PUSH
13814: LD_OWVAR 2
13818: PUSH
13819: EMPTY
13820: LIST
13821: LIST
13822: PUSH
13823: LD_INT 2
13825: PUSH
13826: LD_INT 34
13828: PUSH
13829: LD_INT 7
13831: PUSH
13832: EMPTY
13833: LIST
13834: LIST
13835: PUSH
13836: LD_INT 34
13838: PUSH
13839: LD_INT 45
13841: PUSH
13842: EMPTY
13843: LIST
13844: LIST
13845: PUSH
13846: LD_INT 34
13848: PUSH
13849: LD_INT 28
13851: PUSH
13852: EMPTY
13853: LIST
13854: LIST
13855: PUSH
13856: LD_INT 34
13858: PUSH
13859: LD_INT 47
13861: PUSH
13862: EMPTY
13863: LIST
13864: LIST
13865: PUSH
13866: EMPTY
13867: LIST
13868: LIST
13869: LIST
13870: LIST
13871: LIST
13872: PUSH
13873: EMPTY
13874: LIST
13875: LIST
13876: PPUSH
13877: CALL_OW 69
13881: ST_TO_ADDR
// if not tmp then
13882: LD_VAR 0 2
13886: NOT
13887: IFFALSE 13891
// exit ;
13889: GO 13920
// for i in tmp do
13891: LD_ADDR_VAR 0 1
13895: PUSH
13896: LD_VAR 0 2
13900: PUSH
13901: FOR_IN
13902: IFFALSE 13918
// begin SetLives ( i , 0 ) ;
13904: LD_VAR 0 1
13908: PPUSH
13909: LD_INT 0
13911: PPUSH
13912: CALL_OW 234
// end ;
13916: GO 13901
13918: POP
13919: POP
// end ;
13920: PPOPN 2
13922: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
13923: LD_EXP 68
13927: PUSH
13928: LD_EXP 74
13932: AND
13933: IFFALSE 14017
13935: GO 13937
13937: DISABLE
13938: LD_INT 0
13940: PPUSH
13941: PPUSH
// begin enable ;
13942: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
13943: LD_ADDR_VAR 0 2
13947: PUSH
13948: LD_INT 22
13950: PUSH
13951: LD_OWVAR 2
13955: PUSH
13956: EMPTY
13957: LIST
13958: LIST
13959: PUSH
13960: LD_INT 32
13962: PUSH
13963: LD_INT 3
13965: PUSH
13966: EMPTY
13967: LIST
13968: LIST
13969: PUSH
13970: EMPTY
13971: LIST
13972: LIST
13973: PPUSH
13974: CALL_OW 69
13978: ST_TO_ADDR
// if not tmp then
13979: LD_VAR 0 2
13983: NOT
13984: IFFALSE 13988
// exit ;
13986: GO 14017
// for i in tmp do
13988: LD_ADDR_VAR 0 1
13992: PUSH
13993: LD_VAR 0 2
13997: PUSH
13998: FOR_IN
13999: IFFALSE 14015
// begin SetLives ( i , 0 ) ;
14001: LD_VAR 0 1
14005: PPUSH
14006: LD_INT 0
14008: PPUSH
14009: CALL_OW 234
// end ;
14013: GO 13998
14015: POP
14016: POP
// end ;
14017: PPOPN 2
14019: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
14020: LD_EXP 68
14024: PUSH
14025: LD_EXP 71
14029: AND
14030: IFFALSE 14123
14032: GO 14034
14034: DISABLE
14035: LD_INT 0
14037: PPUSH
// begin enable ;
14038: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
14039: LD_ADDR_VAR 0 1
14043: PUSH
14044: LD_INT 22
14046: PUSH
14047: LD_OWVAR 2
14051: PUSH
14052: EMPTY
14053: LIST
14054: LIST
14055: PUSH
14056: LD_INT 2
14058: PUSH
14059: LD_INT 25
14061: PUSH
14062: LD_INT 5
14064: PUSH
14065: EMPTY
14066: LIST
14067: LIST
14068: PUSH
14069: LD_INT 25
14071: PUSH
14072: LD_INT 9
14074: PUSH
14075: EMPTY
14076: LIST
14077: LIST
14078: PUSH
14079: LD_INT 25
14081: PUSH
14082: LD_INT 8
14084: PUSH
14085: EMPTY
14086: LIST
14087: LIST
14088: PUSH
14089: EMPTY
14090: LIST
14091: LIST
14092: LIST
14093: LIST
14094: PUSH
14095: EMPTY
14096: LIST
14097: LIST
14098: PPUSH
14099: CALL_OW 69
14103: PUSH
14104: FOR_IN
14105: IFFALSE 14121
// begin SetClass ( i , 1 ) ;
14107: LD_VAR 0 1
14111: PPUSH
14112: LD_INT 1
14114: PPUSH
14115: CALL_OW 336
// end ;
14119: GO 14104
14121: POP
14122: POP
// end ;
14123: PPOPN 1
14125: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
14126: LD_EXP 68
14130: PUSH
14131: LD_EXP 72
14135: AND
14136: PUSH
14137: LD_OWVAR 65
14141: PUSH
14142: LD_INT 7
14144: LESS
14145: AND
14146: IFFALSE 14160
14148: GO 14150
14150: DISABLE
// begin enable ;
14151: ENABLE
// game_speed := 7 ;
14152: LD_ADDR_OWVAR 65
14156: PUSH
14157: LD_INT 7
14159: ST_TO_ADDR
// end ;
14160: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
14161: LD_EXP 68
14165: PUSH
14166: LD_EXP 75
14170: AND
14171: IFFALSE 14373
14173: GO 14175
14175: DISABLE
14176: LD_INT 0
14178: PPUSH
14179: PPUSH
14180: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
14181: LD_ADDR_VAR 0 3
14185: PUSH
14186: LD_INT 81
14188: PUSH
14189: LD_OWVAR 2
14193: PUSH
14194: EMPTY
14195: LIST
14196: LIST
14197: PUSH
14198: LD_INT 21
14200: PUSH
14201: LD_INT 1
14203: PUSH
14204: EMPTY
14205: LIST
14206: LIST
14207: PUSH
14208: EMPTY
14209: LIST
14210: LIST
14211: PPUSH
14212: CALL_OW 69
14216: ST_TO_ADDR
// if not tmp then
14217: LD_VAR 0 3
14221: NOT
14222: IFFALSE 14226
// exit ;
14224: GO 14373
// if tmp > 5 then
14226: LD_VAR 0 3
14230: PUSH
14231: LD_INT 5
14233: GREATER
14234: IFFALSE 14246
// k := 5 else
14236: LD_ADDR_VAR 0 2
14240: PUSH
14241: LD_INT 5
14243: ST_TO_ADDR
14244: GO 14256
// k := tmp ;
14246: LD_ADDR_VAR 0 2
14250: PUSH
14251: LD_VAR 0 3
14255: ST_TO_ADDR
// for i := 1 to k do
14256: LD_ADDR_VAR 0 1
14260: PUSH
14261: DOUBLE
14262: LD_INT 1
14264: DEC
14265: ST_TO_ADDR
14266: LD_VAR 0 2
14270: PUSH
14271: FOR_TO
14272: IFFALSE 14371
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
14274: LD_VAR 0 3
14278: PUSH
14279: LD_VAR 0 1
14283: ARRAY
14284: PPUSH
14285: LD_VAR 0 1
14289: PUSH
14290: LD_INT 4
14292: MOD
14293: PUSH
14294: LD_INT 1
14296: PLUS
14297: PPUSH
14298: CALL_OW 259
14302: PUSH
14303: LD_INT 10
14305: LESS
14306: IFFALSE 14369
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
14308: LD_VAR 0 3
14312: PUSH
14313: LD_VAR 0 1
14317: ARRAY
14318: PPUSH
14319: LD_VAR 0 1
14323: PUSH
14324: LD_INT 4
14326: MOD
14327: PUSH
14328: LD_INT 1
14330: PLUS
14331: PPUSH
14332: LD_VAR 0 3
14336: PUSH
14337: LD_VAR 0 1
14341: ARRAY
14342: PPUSH
14343: LD_VAR 0 1
14347: PUSH
14348: LD_INT 4
14350: MOD
14351: PUSH
14352: LD_INT 1
14354: PLUS
14355: PPUSH
14356: CALL_OW 259
14360: PUSH
14361: LD_INT 1
14363: PLUS
14364: PPUSH
14365: CALL_OW 237
14369: GO 14271
14371: POP
14372: POP
// end ;
14373: PPOPN 3
14375: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
14376: LD_EXP 68
14380: PUSH
14381: LD_EXP 76
14385: AND
14386: IFFALSE 14406
14388: GO 14390
14390: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
14391: LD_INT 4
14393: PPUSH
14394: LD_OWVAR 2
14398: PPUSH
14399: LD_INT 0
14401: PPUSH
14402: CALL_OW 324
14406: END
// every 0 0$1 trigger StreamModeActive and sShovel do
14407: LD_EXP 68
14411: PUSH
14412: LD_EXP 105
14416: AND
14417: IFFALSE 14437
14419: GO 14421
14421: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
14422: LD_INT 19
14424: PPUSH
14425: LD_OWVAR 2
14429: PPUSH
14430: LD_INT 0
14432: PPUSH
14433: CALL_OW 324
14437: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
14438: LD_EXP 68
14442: PUSH
14443: LD_EXP 77
14447: AND
14448: IFFALSE 14550
14450: GO 14452
14452: DISABLE
14453: LD_INT 0
14455: PPUSH
14456: PPUSH
// begin enable ;
14457: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
14458: LD_ADDR_VAR 0 2
14462: PUSH
14463: LD_INT 22
14465: PUSH
14466: LD_OWVAR 2
14470: PUSH
14471: EMPTY
14472: LIST
14473: LIST
14474: PUSH
14475: LD_INT 2
14477: PUSH
14478: LD_INT 34
14480: PUSH
14481: LD_INT 11
14483: PUSH
14484: EMPTY
14485: LIST
14486: LIST
14487: PUSH
14488: LD_INT 34
14490: PUSH
14491: LD_INT 30
14493: PUSH
14494: EMPTY
14495: LIST
14496: LIST
14497: PUSH
14498: EMPTY
14499: LIST
14500: LIST
14501: LIST
14502: PUSH
14503: EMPTY
14504: LIST
14505: LIST
14506: PPUSH
14507: CALL_OW 69
14511: ST_TO_ADDR
// if not tmp then
14512: LD_VAR 0 2
14516: NOT
14517: IFFALSE 14521
// exit ;
14519: GO 14550
// for i in tmp do
14521: LD_ADDR_VAR 0 1
14525: PUSH
14526: LD_VAR 0 2
14530: PUSH
14531: FOR_IN
14532: IFFALSE 14548
// begin SetLives ( i , 0 ) ;
14534: LD_VAR 0 1
14538: PPUSH
14539: LD_INT 0
14541: PPUSH
14542: CALL_OW 234
// end ;
14546: GO 14531
14548: POP
14549: POP
// end ;
14550: PPOPN 2
14552: END
// every 0 0$1 trigger StreamModeActive and sBunker do
14553: LD_EXP 68
14557: PUSH
14558: LD_EXP 78
14562: AND
14563: IFFALSE 14583
14565: GO 14567
14567: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
14568: LD_INT 32
14570: PPUSH
14571: LD_OWVAR 2
14575: PPUSH
14576: LD_INT 0
14578: PPUSH
14579: CALL_OW 324
14583: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
14584: LD_EXP 68
14588: PUSH
14589: LD_EXP 79
14593: AND
14594: IFFALSE 14775
14596: GO 14598
14598: DISABLE
14599: LD_INT 0
14601: PPUSH
14602: PPUSH
14603: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
14604: LD_ADDR_VAR 0 2
14608: PUSH
14609: LD_INT 22
14611: PUSH
14612: LD_OWVAR 2
14616: PUSH
14617: EMPTY
14618: LIST
14619: LIST
14620: PUSH
14621: LD_INT 33
14623: PUSH
14624: LD_INT 3
14626: PUSH
14627: EMPTY
14628: LIST
14629: LIST
14630: PUSH
14631: EMPTY
14632: LIST
14633: LIST
14634: PPUSH
14635: CALL_OW 69
14639: ST_TO_ADDR
// if not tmp then
14640: LD_VAR 0 2
14644: NOT
14645: IFFALSE 14649
// exit ;
14647: GO 14775
// side := 0 ;
14649: LD_ADDR_VAR 0 3
14653: PUSH
14654: LD_INT 0
14656: ST_TO_ADDR
// for i := 1 to 8 do
14657: LD_ADDR_VAR 0 1
14661: PUSH
14662: DOUBLE
14663: LD_INT 1
14665: DEC
14666: ST_TO_ADDR
14667: LD_INT 8
14669: PUSH
14670: FOR_TO
14671: IFFALSE 14719
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
14673: LD_OWVAR 2
14677: PUSH
14678: LD_VAR 0 1
14682: NONEQUAL
14683: PUSH
14684: LD_OWVAR 2
14688: PPUSH
14689: LD_VAR 0 1
14693: PPUSH
14694: CALL_OW 81
14698: PUSH
14699: LD_INT 2
14701: EQUAL
14702: AND
14703: IFFALSE 14717
// begin side := i ;
14705: LD_ADDR_VAR 0 3
14709: PUSH
14710: LD_VAR 0 1
14714: ST_TO_ADDR
// break ;
14715: GO 14719
// end ;
14717: GO 14670
14719: POP
14720: POP
// if not side then
14721: LD_VAR 0 3
14725: NOT
14726: IFFALSE 14730
// exit ;
14728: GO 14775
// for i := 1 to tmp do
14730: LD_ADDR_VAR 0 1
14734: PUSH
14735: DOUBLE
14736: LD_INT 1
14738: DEC
14739: ST_TO_ADDR
14740: LD_VAR 0 2
14744: PUSH
14745: FOR_TO
14746: IFFALSE 14773
// if Prob ( 60 ) then
14748: LD_INT 60
14750: PPUSH
14751: CALL_OW 13
14755: IFFALSE 14771
// SetSide ( i , side ) ;
14757: LD_VAR 0 1
14761: PPUSH
14762: LD_VAR 0 3
14766: PPUSH
14767: CALL_OW 235
14771: GO 14745
14773: POP
14774: POP
// end ;
14775: PPOPN 3
14777: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
14778: LD_EXP 68
14782: PUSH
14783: LD_EXP 81
14787: AND
14788: IFFALSE 14907
14790: GO 14792
14792: DISABLE
14793: LD_INT 0
14795: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
14796: LD_ADDR_VAR 0 1
14800: PUSH
14801: LD_INT 22
14803: PUSH
14804: LD_OWVAR 2
14808: PUSH
14809: EMPTY
14810: LIST
14811: LIST
14812: PUSH
14813: LD_INT 21
14815: PUSH
14816: LD_INT 1
14818: PUSH
14819: EMPTY
14820: LIST
14821: LIST
14822: PUSH
14823: LD_INT 3
14825: PUSH
14826: LD_INT 23
14828: PUSH
14829: LD_INT 0
14831: PUSH
14832: EMPTY
14833: LIST
14834: LIST
14835: PUSH
14836: EMPTY
14837: LIST
14838: LIST
14839: PUSH
14840: EMPTY
14841: LIST
14842: LIST
14843: LIST
14844: PPUSH
14845: CALL_OW 69
14849: PUSH
14850: FOR_IN
14851: IFFALSE 14905
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
14853: LD_VAR 0 1
14857: PPUSH
14858: CALL_OW 257
14862: PUSH
14863: LD_INT 1
14865: PUSH
14866: LD_INT 2
14868: PUSH
14869: LD_INT 3
14871: PUSH
14872: LD_INT 4
14874: PUSH
14875: EMPTY
14876: LIST
14877: LIST
14878: LIST
14879: LIST
14880: IN
14881: IFFALSE 14903
// SetClass ( un , rand ( 1 , 4 ) ) ;
14883: LD_VAR 0 1
14887: PPUSH
14888: LD_INT 1
14890: PPUSH
14891: LD_INT 4
14893: PPUSH
14894: CALL_OW 12
14898: PPUSH
14899: CALL_OW 336
14903: GO 14850
14905: POP
14906: POP
// end ;
14907: PPOPN 1
14909: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
14910: LD_EXP 68
14914: PUSH
14915: LD_EXP 80
14919: AND
14920: IFFALSE 14999
14922: GO 14924
14924: DISABLE
14925: LD_INT 0
14927: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
14928: LD_ADDR_VAR 0 1
14932: PUSH
14933: LD_INT 22
14935: PUSH
14936: LD_OWVAR 2
14940: PUSH
14941: EMPTY
14942: LIST
14943: LIST
14944: PUSH
14945: LD_INT 21
14947: PUSH
14948: LD_INT 3
14950: PUSH
14951: EMPTY
14952: LIST
14953: LIST
14954: PUSH
14955: EMPTY
14956: LIST
14957: LIST
14958: PPUSH
14959: CALL_OW 69
14963: ST_TO_ADDR
// if not tmp then
14964: LD_VAR 0 1
14968: NOT
14969: IFFALSE 14973
// exit ;
14971: GO 14999
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
14973: LD_VAR 0 1
14977: PUSH
14978: LD_INT 1
14980: PPUSH
14981: LD_VAR 0 1
14985: PPUSH
14986: CALL_OW 12
14990: ARRAY
14991: PPUSH
14992: LD_INT 100
14994: PPUSH
14995: CALL_OW 234
// end ;
14999: PPOPN 1
15001: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
15002: LD_EXP 68
15006: PUSH
15007: LD_EXP 82
15011: AND
15012: IFFALSE 15110
15014: GO 15016
15016: DISABLE
15017: LD_INT 0
15019: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15020: LD_ADDR_VAR 0 1
15024: PUSH
15025: LD_INT 22
15027: PUSH
15028: LD_OWVAR 2
15032: PUSH
15033: EMPTY
15034: LIST
15035: LIST
15036: PUSH
15037: LD_INT 21
15039: PUSH
15040: LD_INT 1
15042: PUSH
15043: EMPTY
15044: LIST
15045: LIST
15046: PUSH
15047: EMPTY
15048: LIST
15049: LIST
15050: PPUSH
15051: CALL_OW 69
15055: ST_TO_ADDR
// if not tmp then
15056: LD_VAR 0 1
15060: NOT
15061: IFFALSE 15065
// exit ;
15063: GO 15110
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
15065: LD_VAR 0 1
15069: PUSH
15070: LD_INT 1
15072: PPUSH
15073: LD_VAR 0 1
15077: PPUSH
15078: CALL_OW 12
15082: ARRAY
15083: PPUSH
15084: LD_INT 1
15086: PPUSH
15087: LD_INT 4
15089: PPUSH
15090: CALL_OW 12
15094: PPUSH
15095: LD_INT 3000
15097: PPUSH
15098: LD_INT 9000
15100: PPUSH
15101: CALL_OW 12
15105: PPUSH
15106: CALL_OW 492
// end ;
15110: PPOPN 1
15112: END
// every 0 0$1 trigger StreamModeActive and sDepot do
15113: LD_EXP 68
15117: PUSH
15118: LD_EXP 83
15122: AND
15123: IFFALSE 15143
15125: GO 15127
15127: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
15128: LD_INT 1
15130: PPUSH
15131: LD_OWVAR 2
15135: PPUSH
15136: LD_INT 0
15138: PPUSH
15139: CALL_OW 324
15143: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
15144: LD_EXP 68
15148: PUSH
15149: LD_EXP 84
15153: AND
15154: IFFALSE 15237
15156: GO 15158
15158: DISABLE
15159: LD_INT 0
15161: PPUSH
15162: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
15163: LD_ADDR_VAR 0 2
15167: PUSH
15168: LD_INT 22
15170: PUSH
15171: LD_OWVAR 2
15175: PUSH
15176: EMPTY
15177: LIST
15178: LIST
15179: PUSH
15180: LD_INT 21
15182: PUSH
15183: LD_INT 3
15185: PUSH
15186: EMPTY
15187: LIST
15188: LIST
15189: PUSH
15190: EMPTY
15191: LIST
15192: LIST
15193: PPUSH
15194: CALL_OW 69
15198: ST_TO_ADDR
// if not tmp then
15199: LD_VAR 0 2
15203: NOT
15204: IFFALSE 15208
// exit ;
15206: GO 15237
// for i in tmp do
15208: LD_ADDR_VAR 0 1
15212: PUSH
15213: LD_VAR 0 2
15217: PUSH
15218: FOR_IN
15219: IFFALSE 15235
// SetBLevel ( i , 10 ) ;
15221: LD_VAR 0 1
15225: PPUSH
15226: LD_INT 10
15228: PPUSH
15229: CALL_OW 241
15233: GO 15218
15235: POP
15236: POP
// end ;
15237: PPOPN 2
15239: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
15240: LD_EXP 68
15244: PUSH
15245: LD_EXP 85
15249: AND
15250: IFFALSE 15361
15252: GO 15254
15254: DISABLE
15255: LD_INT 0
15257: PPUSH
15258: PPUSH
15259: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15260: LD_ADDR_VAR 0 3
15264: PUSH
15265: LD_INT 22
15267: PUSH
15268: LD_OWVAR 2
15272: PUSH
15273: EMPTY
15274: LIST
15275: LIST
15276: PUSH
15277: LD_INT 25
15279: PUSH
15280: LD_INT 1
15282: PUSH
15283: EMPTY
15284: LIST
15285: LIST
15286: PUSH
15287: EMPTY
15288: LIST
15289: LIST
15290: PPUSH
15291: CALL_OW 69
15295: ST_TO_ADDR
// if not tmp then
15296: LD_VAR 0 3
15300: NOT
15301: IFFALSE 15305
// exit ;
15303: GO 15361
// un := tmp [ rand ( 1 , tmp ) ] ;
15305: LD_ADDR_VAR 0 2
15309: PUSH
15310: LD_VAR 0 3
15314: PUSH
15315: LD_INT 1
15317: PPUSH
15318: LD_VAR 0 3
15322: PPUSH
15323: CALL_OW 12
15327: ARRAY
15328: ST_TO_ADDR
// if Crawls ( un ) then
15329: LD_VAR 0 2
15333: PPUSH
15334: CALL_OW 318
15338: IFFALSE 15349
// ComWalk ( un ) ;
15340: LD_VAR 0 2
15344: PPUSH
15345: CALL_OW 138
// SetClass ( un , class_sniper ) ;
15349: LD_VAR 0 2
15353: PPUSH
15354: LD_INT 5
15356: PPUSH
15357: CALL_OW 336
// end ;
15361: PPOPN 3
15363: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
15364: LD_EXP 68
15368: PUSH
15369: LD_EXP 86
15373: AND
15374: PUSH
15375: LD_OWVAR 67
15379: PUSH
15380: LD_INT 3
15382: LESS
15383: AND
15384: IFFALSE 15403
15386: GO 15388
15388: DISABLE
// Difficulty := Difficulty + 1 ;
15389: LD_ADDR_OWVAR 67
15393: PUSH
15394: LD_OWVAR 67
15398: PUSH
15399: LD_INT 1
15401: PLUS
15402: ST_TO_ADDR
15403: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
15404: LD_EXP 68
15408: PUSH
15409: LD_EXP 87
15413: AND
15414: IFFALSE 15517
15416: GO 15418
15418: DISABLE
15419: LD_INT 0
15421: PPUSH
// begin for i := 1 to 5 do
15422: LD_ADDR_VAR 0 1
15426: PUSH
15427: DOUBLE
15428: LD_INT 1
15430: DEC
15431: ST_TO_ADDR
15432: LD_INT 5
15434: PUSH
15435: FOR_TO
15436: IFFALSE 15515
// begin uc_nation := nation_nature ;
15438: LD_ADDR_OWVAR 21
15442: PUSH
15443: LD_INT 0
15445: ST_TO_ADDR
// uc_side := 0 ;
15446: LD_ADDR_OWVAR 20
15450: PUSH
15451: LD_INT 0
15453: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
15454: LD_ADDR_OWVAR 29
15458: PUSH
15459: LD_INT 12
15461: PUSH
15462: LD_INT 12
15464: PUSH
15465: EMPTY
15466: LIST
15467: LIST
15468: ST_TO_ADDR
// hc_agressivity := 20 ;
15469: LD_ADDR_OWVAR 35
15473: PUSH
15474: LD_INT 20
15476: ST_TO_ADDR
// hc_class := class_tiger ;
15477: LD_ADDR_OWVAR 28
15481: PUSH
15482: LD_INT 14
15484: ST_TO_ADDR
// hc_gallery :=  ;
15485: LD_ADDR_OWVAR 33
15489: PUSH
15490: LD_STRING 
15492: ST_TO_ADDR
// hc_name :=  ;
15493: LD_ADDR_OWVAR 26
15497: PUSH
15498: LD_STRING 
15500: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
15501: CALL_OW 44
15505: PPUSH
15506: LD_INT 0
15508: PPUSH
15509: CALL_OW 51
// end ;
15513: GO 15435
15515: POP
15516: POP
// end ;
15517: PPOPN 1
15519: END
// every 0 0$1 trigger StreamModeActive and sBomb do
15520: LD_EXP 68
15524: PUSH
15525: LD_EXP 88
15529: AND
15530: IFFALSE 15539
15532: GO 15534
15534: DISABLE
// StreamSibBomb ;
15535: CALL 15540 0 0
15539: END
// export function StreamSibBomb ; var i , x , y ; begin
15540: LD_INT 0
15542: PPUSH
15543: PPUSH
15544: PPUSH
15545: PPUSH
// result := false ;
15546: LD_ADDR_VAR 0 1
15550: PUSH
15551: LD_INT 0
15553: ST_TO_ADDR
// for i := 1 to 16 do
15554: LD_ADDR_VAR 0 2
15558: PUSH
15559: DOUBLE
15560: LD_INT 1
15562: DEC
15563: ST_TO_ADDR
15564: LD_INT 16
15566: PUSH
15567: FOR_TO
15568: IFFALSE 15767
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
15570: LD_ADDR_VAR 0 3
15574: PUSH
15575: LD_INT 10
15577: PUSH
15578: LD_INT 20
15580: PUSH
15581: LD_INT 30
15583: PUSH
15584: LD_INT 40
15586: PUSH
15587: LD_INT 50
15589: PUSH
15590: LD_INT 60
15592: PUSH
15593: LD_INT 70
15595: PUSH
15596: LD_INT 80
15598: PUSH
15599: LD_INT 90
15601: PUSH
15602: LD_INT 100
15604: PUSH
15605: LD_INT 110
15607: PUSH
15608: LD_INT 120
15610: PUSH
15611: LD_INT 130
15613: PUSH
15614: LD_INT 140
15616: PUSH
15617: LD_INT 150
15619: PUSH
15620: EMPTY
15621: LIST
15622: LIST
15623: LIST
15624: LIST
15625: LIST
15626: LIST
15627: LIST
15628: LIST
15629: LIST
15630: LIST
15631: LIST
15632: LIST
15633: LIST
15634: LIST
15635: LIST
15636: PUSH
15637: LD_INT 1
15639: PPUSH
15640: LD_INT 15
15642: PPUSH
15643: CALL_OW 12
15647: ARRAY
15648: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
15649: LD_ADDR_VAR 0 4
15653: PUSH
15654: LD_INT 10
15656: PUSH
15657: LD_INT 20
15659: PUSH
15660: LD_INT 30
15662: PUSH
15663: LD_INT 40
15665: PUSH
15666: LD_INT 50
15668: PUSH
15669: LD_INT 60
15671: PUSH
15672: LD_INT 70
15674: PUSH
15675: LD_INT 80
15677: PUSH
15678: LD_INT 90
15680: PUSH
15681: LD_INT 100
15683: PUSH
15684: LD_INT 110
15686: PUSH
15687: LD_INT 120
15689: PUSH
15690: LD_INT 130
15692: PUSH
15693: LD_INT 140
15695: PUSH
15696: LD_INT 150
15698: PUSH
15699: EMPTY
15700: LIST
15701: LIST
15702: LIST
15703: LIST
15704: LIST
15705: LIST
15706: LIST
15707: LIST
15708: LIST
15709: LIST
15710: LIST
15711: LIST
15712: LIST
15713: LIST
15714: LIST
15715: PUSH
15716: LD_INT 1
15718: PPUSH
15719: LD_INT 15
15721: PPUSH
15722: CALL_OW 12
15726: ARRAY
15727: ST_TO_ADDR
// if ValidHex ( x , y ) then
15728: LD_VAR 0 3
15732: PPUSH
15733: LD_VAR 0 4
15737: PPUSH
15738: CALL_OW 488
15742: IFFALSE 15765
// begin result := [ x , y ] ;
15744: LD_ADDR_VAR 0 1
15748: PUSH
15749: LD_VAR 0 3
15753: PUSH
15754: LD_VAR 0 4
15758: PUSH
15759: EMPTY
15760: LIST
15761: LIST
15762: ST_TO_ADDR
// break ;
15763: GO 15767
// end ; end ;
15765: GO 15567
15767: POP
15768: POP
// if result then
15769: LD_VAR 0 1
15773: IFFALSE 15833
// begin ToLua ( playSibBomb() ) ;
15775: LD_STRING playSibBomb()
15777: PPUSH
15778: CALL_OW 559
// wait ( 0 0$14 ) ;
15782: LD_INT 490
15784: PPUSH
15785: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
15789: LD_VAR 0 1
15793: PUSH
15794: LD_INT 1
15796: ARRAY
15797: PPUSH
15798: LD_VAR 0 1
15802: PUSH
15803: LD_INT 2
15805: ARRAY
15806: PPUSH
15807: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
15811: LD_VAR 0 1
15815: PUSH
15816: LD_INT 1
15818: ARRAY
15819: PPUSH
15820: LD_VAR 0 1
15824: PUSH
15825: LD_INT 2
15827: ARRAY
15828: PPUSH
15829: CALL_OW 429
// end ; end ;
15833: LD_VAR 0 1
15837: RET
// every 0 0$1 trigger StreamModeActive and sReset do
15838: LD_EXP 68
15842: PUSH
15843: LD_EXP 90
15847: AND
15848: IFFALSE 15860
15850: GO 15852
15852: DISABLE
// YouLost (  ) ;
15853: LD_STRING 
15855: PPUSH
15856: CALL_OW 104
15860: END
// every 0 0$1 trigger StreamModeActive and sFog do
15861: LD_EXP 68
15865: PUSH
15866: LD_EXP 89
15870: AND
15871: IFFALSE 15885
15873: GO 15875
15875: DISABLE
// FogOff ( your_side ) ;
15876: LD_OWVAR 2
15880: PPUSH
15881: CALL_OW 344
15885: END
// every 0 0$1 trigger StreamModeActive and sSun do
15886: LD_EXP 68
15890: PUSH
15891: LD_EXP 91
15895: AND
15896: IFFALSE 15924
15898: GO 15900
15900: DISABLE
// begin solar_recharge_percent := 0 ;
15901: LD_ADDR_OWVAR 79
15905: PUSH
15906: LD_INT 0
15908: ST_TO_ADDR
// wait ( 5 5$00 ) ;
15909: LD_INT 10500
15911: PPUSH
15912: CALL_OW 67
// solar_recharge_percent := 100 ;
15916: LD_ADDR_OWVAR 79
15920: PUSH
15921: LD_INT 100
15923: ST_TO_ADDR
// end ;
15924: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
15925: LD_EXP 68
15929: PUSH
15930: LD_EXP 92
15934: AND
15935: IFFALSE 16174
15937: GO 15939
15939: DISABLE
15940: LD_INT 0
15942: PPUSH
15943: PPUSH
15944: PPUSH
// begin tmp := [ ] ;
15945: LD_ADDR_VAR 0 3
15949: PUSH
15950: EMPTY
15951: ST_TO_ADDR
// for i := 1 to 6 do
15952: LD_ADDR_VAR 0 1
15956: PUSH
15957: DOUBLE
15958: LD_INT 1
15960: DEC
15961: ST_TO_ADDR
15962: LD_INT 6
15964: PUSH
15965: FOR_TO
15966: IFFALSE 16071
// begin uc_nation := nation_nature ;
15968: LD_ADDR_OWVAR 21
15972: PUSH
15973: LD_INT 0
15975: ST_TO_ADDR
// uc_side := 0 ;
15976: LD_ADDR_OWVAR 20
15980: PUSH
15981: LD_INT 0
15983: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
15984: LD_ADDR_OWVAR 29
15988: PUSH
15989: LD_INT 12
15991: PUSH
15992: LD_INT 12
15994: PUSH
15995: EMPTY
15996: LIST
15997: LIST
15998: ST_TO_ADDR
// hc_agressivity := 20 ;
15999: LD_ADDR_OWVAR 35
16003: PUSH
16004: LD_INT 20
16006: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
16007: LD_ADDR_OWVAR 28
16011: PUSH
16012: LD_INT 17
16014: ST_TO_ADDR
// hc_gallery :=  ;
16015: LD_ADDR_OWVAR 33
16019: PUSH
16020: LD_STRING 
16022: ST_TO_ADDR
// hc_name :=  ;
16023: LD_ADDR_OWVAR 26
16027: PUSH
16028: LD_STRING 
16030: ST_TO_ADDR
// un := CreateHuman ;
16031: LD_ADDR_VAR 0 2
16035: PUSH
16036: CALL_OW 44
16040: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
16041: LD_VAR 0 2
16045: PPUSH
16046: LD_INT 1
16048: PPUSH
16049: CALL_OW 51
// tmp := tmp ^ un ;
16053: LD_ADDR_VAR 0 3
16057: PUSH
16058: LD_VAR 0 3
16062: PUSH
16063: LD_VAR 0 2
16067: ADD
16068: ST_TO_ADDR
// end ;
16069: GO 15965
16071: POP
16072: POP
// repeat wait ( 0 0$1 ) ;
16073: LD_INT 35
16075: PPUSH
16076: CALL_OW 67
// for un in tmp do
16080: LD_ADDR_VAR 0 2
16084: PUSH
16085: LD_VAR 0 3
16089: PUSH
16090: FOR_IN
16091: IFFALSE 16165
// begin if IsDead ( un ) then
16093: LD_VAR 0 2
16097: PPUSH
16098: CALL_OW 301
16102: IFFALSE 16122
// begin tmp := tmp diff un ;
16104: LD_ADDR_VAR 0 3
16108: PUSH
16109: LD_VAR 0 3
16113: PUSH
16114: LD_VAR 0 2
16118: DIFF
16119: ST_TO_ADDR
// continue ;
16120: GO 16090
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
16122: LD_VAR 0 2
16126: PPUSH
16127: LD_INT 3
16129: PUSH
16130: LD_INT 22
16132: PUSH
16133: LD_INT 0
16135: PUSH
16136: EMPTY
16137: LIST
16138: LIST
16139: PUSH
16140: EMPTY
16141: LIST
16142: LIST
16143: PPUSH
16144: CALL_OW 69
16148: PPUSH
16149: LD_VAR 0 2
16153: PPUSH
16154: CALL_OW 74
16158: PPUSH
16159: CALL_OW 115
// end ;
16163: GO 16090
16165: POP
16166: POP
// until not tmp ;
16167: LD_VAR 0 3
16171: NOT
16172: IFFALSE 16073
// end ;
16174: PPOPN 3
16176: END
// every 0 0$1 trigger StreamModeActive and sTroll do
16177: LD_EXP 68
16181: PUSH
16182: LD_EXP 93
16186: AND
16187: IFFALSE 16241
16189: GO 16191
16191: DISABLE
// begin ToLua ( displayTroll(); ) ;
16192: LD_STRING displayTroll();
16194: PPUSH
16195: CALL_OW 559
// wait ( 3 3$00 ) ;
16199: LD_INT 6300
16201: PPUSH
16202: CALL_OW 67
// ToLua ( hideTroll(); ) ;
16206: LD_STRING hideTroll();
16208: PPUSH
16209: CALL_OW 559
// wait ( 1 1$00 ) ;
16213: LD_INT 2100
16215: PPUSH
16216: CALL_OW 67
// ToLua ( displayTroll(); ) ;
16220: LD_STRING displayTroll();
16222: PPUSH
16223: CALL_OW 559
// wait ( 1 1$00 ) ;
16227: LD_INT 2100
16229: PPUSH
16230: CALL_OW 67
// ToLua ( hideTroll(); ) ;
16234: LD_STRING hideTroll();
16236: PPUSH
16237: CALL_OW 559
// end ;
16241: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
16242: LD_EXP 68
16246: PUSH
16247: LD_EXP 94
16251: AND
16252: IFFALSE 16315
16254: GO 16256
16256: DISABLE
16257: LD_INT 0
16259: PPUSH
// begin p := 0 ;
16260: LD_ADDR_VAR 0 1
16264: PUSH
16265: LD_INT 0
16267: ST_TO_ADDR
// repeat game_speed := 1 ;
16268: LD_ADDR_OWVAR 65
16272: PUSH
16273: LD_INT 1
16275: ST_TO_ADDR
// wait ( 0 0$1 ) ;
16276: LD_INT 35
16278: PPUSH
16279: CALL_OW 67
// p := p + 1 ;
16283: LD_ADDR_VAR 0 1
16287: PUSH
16288: LD_VAR 0 1
16292: PUSH
16293: LD_INT 1
16295: PLUS
16296: ST_TO_ADDR
// until p >= 60 ;
16297: LD_VAR 0 1
16301: PUSH
16302: LD_INT 60
16304: GREATEREQUAL
16305: IFFALSE 16268
// game_speed := 4 ;
16307: LD_ADDR_OWVAR 65
16311: PUSH
16312: LD_INT 4
16314: ST_TO_ADDR
// end ;
16315: PPOPN 1
16317: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
16318: LD_EXP 68
16322: PUSH
16323: LD_EXP 95
16327: AND
16328: IFFALSE 16474
16330: GO 16332
16332: DISABLE
16333: LD_INT 0
16335: PPUSH
16336: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16337: LD_ADDR_VAR 0 1
16341: PUSH
16342: LD_INT 22
16344: PUSH
16345: LD_OWVAR 2
16349: PUSH
16350: EMPTY
16351: LIST
16352: LIST
16353: PUSH
16354: LD_INT 2
16356: PUSH
16357: LD_INT 30
16359: PUSH
16360: LD_INT 0
16362: PUSH
16363: EMPTY
16364: LIST
16365: LIST
16366: PUSH
16367: LD_INT 30
16369: PUSH
16370: LD_INT 1
16372: PUSH
16373: EMPTY
16374: LIST
16375: LIST
16376: PUSH
16377: EMPTY
16378: LIST
16379: LIST
16380: LIST
16381: PUSH
16382: EMPTY
16383: LIST
16384: LIST
16385: PPUSH
16386: CALL_OW 69
16390: ST_TO_ADDR
// if not depot then
16391: LD_VAR 0 1
16395: NOT
16396: IFFALSE 16400
// exit ;
16398: GO 16474
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
16400: LD_ADDR_VAR 0 2
16404: PUSH
16405: LD_VAR 0 1
16409: PUSH
16410: LD_INT 1
16412: PPUSH
16413: LD_VAR 0 1
16417: PPUSH
16418: CALL_OW 12
16422: ARRAY
16423: PPUSH
16424: CALL_OW 274
16428: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
16429: LD_VAR 0 2
16433: PPUSH
16434: LD_INT 1
16436: PPUSH
16437: LD_INT 0
16439: PPUSH
16440: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
16444: LD_VAR 0 2
16448: PPUSH
16449: LD_INT 2
16451: PPUSH
16452: LD_INT 0
16454: PPUSH
16455: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
16459: LD_VAR 0 2
16463: PPUSH
16464: LD_INT 3
16466: PPUSH
16467: LD_INT 0
16469: PPUSH
16470: CALL_OW 277
// end ;
16474: PPOPN 2
16476: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
16477: LD_EXP 68
16481: PUSH
16482: LD_EXP 96
16486: AND
16487: IFFALSE 16584
16489: GO 16491
16491: DISABLE
16492: LD_INT 0
16494: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16495: LD_ADDR_VAR 0 1
16499: PUSH
16500: LD_INT 22
16502: PUSH
16503: LD_OWVAR 2
16507: PUSH
16508: EMPTY
16509: LIST
16510: LIST
16511: PUSH
16512: LD_INT 21
16514: PUSH
16515: LD_INT 1
16517: PUSH
16518: EMPTY
16519: LIST
16520: LIST
16521: PUSH
16522: LD_INT 3
16524: PUSH
16525: LD_INT 23
16527: PUSH
16528: LD_INT 0
16530: PUSH
16531: EMPTY
16532: LIST
16533: LIST
16534: PUSH
16535: EMPTY
16536: LIST
16537: LIST
16538: PUSH
16539: EMPTY
16540: LIST
16541: LIST
16542: LIST
16543: PPUSH
16544: CALL_OW 69
16548: ST_TO_ADDR
// if not tmp then
16549: LD_VAR 0 1
16553: NOT
16554: IFFALSE 16558
// exit ;
16556: GO 16584
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
16558: LD_VAR 0 1
16562: PUSH
16563: LD_INT 1
16565: PPUSH
16566: LD_VAR 0 1
16570: PPUSH
16571: CALL_OW 12
16575: ARRAY
16576: PPUSH
16577: LD_INT 200
16579: PPUSH
16580: CALL_OW 234
// end ;
16584: PPOPN 1
16586: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
16587: LD_EXP 68
16591: PUSH
16592: LD_EXP 97
16596: AND
16597: IFFALSE 16676
16599: GO 16601
16601: DISABLE
16602: LD_INT 0
16604: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
16605: LD_ADDR_VAR 0 1
16609: PUSH
16610: LD_INT 22
16612: PUSH
16613: LD_OWVAR 2
16617: PUSH
16618: EMPTY
16619: LIST
16620: LIST
16621: PUSH
16622: LD_INT 21
16624: PUSH
16625: LD_INT 2
16627: PUSH
16628: EMPTY
16629: LIST
16630: LIST
16631: PUSH
16632: EMPTY
16633: LIST
16634: LIST
16635: PPUSH
16636: CALL_OW 69
16640: ST_TO_ADDR
// if not tmp then
16641: LD_VAR 0 1
16645: NOT
16646: IFFALSE 16650
// exit ;
16648: GO 16676
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
16650: LD_VAR 0 1
16654: PUSH
16655: LD_INT 1
16657: PPUSH
16658: LD_VAR 0 1
16662: PPUSH
16663: CALL_OW 12
16667: ARRAY
16668: PPUSH
16669: LD_INT 60
16671: PPUSH
16672: CALL_OW 234
// end ;
16676: PPOPN 1
16678: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
16679: LD_EXP 68
16683: PUSH
16684: LD_EXP 98
16688: AND
16689: IFFALSE 16788
16691: GO 16693
16693: DISABLE
16694: LD_INT 0
16696: PPUSH
16697: PPUSH
// begin enable ;
16698: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
16699: LD_ADDR_VAR 0 1
16703: PUSH
16704: LD_INT 22
16706: PUSH
16707: LD_OWVAR 2
16711: PUSH
16712: EMPTY
16713: LIST
16714: LIST
16715: PUSH
16716: LD_INT 61
16718: PUSH
16719: EMPTY
16720: LIST
16721: PUSH
16722: LD_INT 33
16724: PUSH
16725: LD_INT 2
16727: PUSH
16728: EMPTY
16729: LIST
16730: LIST
16731: PUSH
16732: EMPTY
16733: LIST
16734: LIST
16735: LIST
16736: PPUSH
16737: CALL_OW 69
16741: ST_TO_ADDR
// if not tmp then
16742: LD_VAR 0 1
16746: NOT
16747: IFFALSE 16751
// exit ;
16749: GO 16788
// for i in tmp do
16751: LD_ADDR_VAR 0 2
16755: PUSH
16756: LD_VAR 0 1
16760: PUSH
16761: FOR_IN
16762: IFFALSE 16786
// if IsControledBy ( i ) then
16764: LD_VAR 0 2
16768: PPUSH
16769: CALL_OW 312
16773: IFFALSE 16784
// ComUnlink ( i ) ;
16775: LD_VAR 0 2
16779: PPUSH
16780: CALL_OW 136
16784: GO 16761
16786: POP
16787: POP
// end ;
16788: PPOPN 2
16790: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
16791: LD_EXP 68
16795: PUSH
16796: LD_EXP 99
16800: AND
16801: IFFALSE 16941
16803: GO 16805
16805: DISABLE
16806: LD_INT 0
16808: PPUSH
16809: PPUSH
// begin ToLua ( displayPowell(); ) ;
16810: LD_STRING displayPowell();
16812: PPUSH
16813: CALL_OW 559
// uc_side := 0 ;
16817: LD_ADDR_OWVAR 20
16821: PUSH
16822: LD_INT 0
16824: ST_TO_ADDR
// uc_nation := 2 ;
16825: LD_ADDR_OWVAR 21
16829: PUSH
16830: LD_INT 2
16832: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
16833: LD_ADDR_OWVAR 37
16837: PUSH
16838: LD_INT 14
16840: ST_TO_ADDR
// vc_engine := engine_siberite ;
16841: LD_ADDR_OWVAR 39
16845: PUSH
16846: LD_INT 3
16848: ST_TO_ADDR
// vc_control := control_apeman ;
16849: LD_ADDR_OWVAR 38
16853: PUSH
16854: LD_INT 5
16856: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
16857: LD_ADDR_OWVAR 40
16861: PUSH
16862: LD_INT 29
16864: ST_TO_ADDR
// un := CreateVehicle ;
16865: LD_ADDR_VAR 0 2
16869: PUSH
16870: CALL_OW 45
16874: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16875: LD_VAR 0 2
16879: PPUSH
16880: LD_INT 1
16882: PPUSH
16883: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
16887: LD_INT 35
16889: PPUSH
16890: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
16894: LD_VAR 0 2
16898: PPUSH
16899: LD_INT 22
16901: PUSH
16902: LD_OWVAR 2
16906: PUSH
16907: EMPTY
16908: LIST
16909: LIST
16910: PPUSH
16911: CALL_OW 69
16915: PPUSH
16916: LD_VAR 0 2
16920: PPUSH
16921: CALL_OW 74
16925: PPUSH
16926: CALL_OW 115
// until IsDead ( un ) ;
16930: LD_VAR 0 2
16934: PPUSH
16935: CALL_OW 301
16939: IFFALSE 16887
// end ;
16941: PPOPN 2
16943: END
// every 0 0$1 trigger StreamModeActive and sStu do
16944: LD_EXP 68
16948: PUSH
16949: LD_EXP 107
16953: AND
16954: IFFALSE 16970
16956: GO 16958
16958: DISABLE
// begin ToLua ( displayStucuk(); ) ;
16959: LD_STRING displayStucuk();
16961: PPUSH
16962: CALL_OW 559
// ResetFog ;
16966: CALL_OW 335
// end ;
16970: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
16971: LD_EXP 68
16975: PUSH
16976: LD_EXP 100
16980: AND
16981: IFFALSE 17122
16983: GO 16985
16985: DISABLE
16986: LD_INT 0
16988: PPUSH
16989: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16990: LD_ADDR_VAR 0 2
16994: PUSH
16995: LD_INT 22
16997: PUSH
16998: LD_OWVAR 2
17002: PUSH
17003: EMPTY
17004: LIST
17005: LIST
17006: PUSH
17007: LD_INT 21
17009: PUSH
17010: LD_INT 1
17012: PUSH
17013: EMPTY
17014: LIST
17015: LIST
17016: PUSH
17017: EMPTY
17018: LIST
17019: LIST
17020: PPUSH
17021: CALL_OW 69
17025: ST_TO_ADDR
// if not tmp then
17026: LD_VAR 0 2
17030: NOT
17031: IFFALSE 17035
// exit ;
17033: GO 17122
// un := tmp [ rand ( 1 , tmp ) ] ;
17035: LD_ADDR_VAR 0 1
17039: PUSH
17040: LD_VAR 0 2
17044: PUSH
17045: LD_INT 1
17047: PPUSH
17048: LD_VAR 0 2
17052: PPUSH
17053: CALL_OW 12
17057: ARRAY
17058: ST_TO_ADDR
// SetSide ( un , 0 ) ;
17059: LD_VAR 0 1
17063: PPUSH
17064: LD_INT 0
17066: PPUSH
17067: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
17071: LD_VAR 0 1
17075: PPUSH
17076: LD_OWVAR 3
17080: PUSH
17081: LD_VAR 0 1
17085: DIFF
17086: PPUSH
17087: LD_VAR 0 1
17091: PPUSH
17092: CALL_OW 74
17096: PPUSH
17097: CALL_OW 115
// wait ( 0 0$20 ) ;
17101: LD_INT 700
17103: PPUSH
17104: CALL_OW 67
// SetSide ( un , your_side ) ;
17108: LD_VAR 0 1
17112: PPUSH
17113: LD_OWVAR 2
17117: PPUSH
17118: CALL_OW 235
// end ;
17122: PPOPN 2
17124: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
17125: LD_EXP 68
17129: PUSH
17130: LD_EXP 101
17134: AND
17135: IFFALSE 17241
17137: GO 17139
17139: DISABLE
17140: LD_INT 0
17142: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17143: LD_ADDR_VAR 0 1
17147: PUSH
17148: LD_INT 22
17150: PUSH
17151: LD_OWVAR 2
17155: PUSH
17156: EMPTY
17157: LIST
17158: LIST
17159: PUSH
17160: LD_INT 2
17162: PUSH
17163: LD_INT 30
17165: PUSH
17166: LD_INT 0
17168: PUSH
17169: EMPTY
17170: LIST
17171: LIST
17172: PUSH
17173: LD_INT 30
17175: PUSH
17176: LD_INT 1
17178: PUSH
17179: EMPTY
17180: LIST
17181: LIST
17182: PUSH
17183: EMPTY
17184: LIST
17185: LIST
17186: LIST
17187: PUSH
17188: EMPTY
17189: LIST
17190: LIST
17191: PPUSH
17192: CALL_OW 69
17196: ST_TO_ADDR
// if not depot then
17197: LD_VAR 0 1
17201: NOT
17202: IFFALSE 17206
// exit ;
17204: GO 17241
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
17206: LD_VAR 0 1
17210: PUSH
17211: LD_INT 1
17213: ARRAY
17214: PPUSH
17215: CALL_OW 250
17219: PPUSH
17220: LD_VAR 0 1
17224: PUSH
17225: LD_INT 1
17227: ARRAY
17228: PPUSH
17229: CALL_OW 251
17233: PPUSH
17234: LD_INT 70
17236: PPUSH
17237: CALL_OW 495
// end ;
17241: PPOPN 1
17243: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
17244: LD_EXP 68
17248: PUSH
17249: LD_EXP 102
17253: AND
17254: IFFALSE 17465
17256: GO 17258
17258: DISABLE
17259: LD_INT 0
17261: PPUSH
17262: PPUSH
17263: PPUSH
17264: PPUSH
17265: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17266: LD_ADDR_VAR 0 5
17270: PUSH
17271: LD_INT 22
17273: PUSH
17274: LD_OWVAR 2
17278: PUSH
17279: EMPTY
17280: LIST
17281: LIST
17282: PUSH
17283: LD_INT 21
17285: PUSH
17286: LD_INT 1
17288: PUSH
17289: EMPTY
17290: LIST
17291: LIST
17292: PUSH
17293: EMPTY
17294: LIST
17295: LIST
17296: PPUSH
17297: CALL_OW 69
17301: ST_TO_ADDR
// if not tmp then
17302: LD_VAR 0 5
17306: NOT
17307: IFFALSE 17311
// exit ;
17309: GO 17465
// for i in tmp do
17311: LD_ADDR_VAR 0 1
17315: PUSH
17316: LD_VAR 0 5
17320: PUSH
17321: FOR_IN
17322: IFFALSE 17463
// begin d := rand ( 0 , 5 ) ;
17324: LD_ADDR_VAR 0 4
17328: PUSH
17329: LD_INT 0
17331: PPUSH
17332: LD_INT 5
17334: PPUSH
17335: CALL_OW 12
17339: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
17340: LD_ADDR_VAR 0 2
17344: PUSH
17345: LD_VAR 0 1
17349: PPUSH
17350: CALL_OW 250
17354: PPUSH
17355: LD_VAR 0 4
17359: PPUSH
17360: LD_INT 3
17362: PPUSH
17363: LD_INT 12
17365: PPUSH
17366: CALL_OW 12
17370: PPUSH
17371: CALL_OW 272
17375: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
17376: LD_ADDR_VAR 0 3
17380: PUSH
17381: LD_VAR 0 1
17385: PPUSH
17386: CALL_OW 251
17390: PPUSH
17391: LD_VAR 0 4
17395: PPUSH
17396: LD_INT 3
17398: PPUSH
17399: LD_INT 12
17401: PPUSH
17402: CALL_OW 12
17406: PPUSH
17407: CALL_OW 273
17411: ST_TO_ADDR
// if ValidHex ( x , y ) then
17412: LD_VAR 0 2
17416: PPUSH
17417: LD_VAR 0 3
17421: PPUSH
17422: CALL_OW 488
17426: IFFALSE 17461
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
17428: LD_VAR 0 1
17432: PPUSH
17433: LD_VAR 0 2
17437: PPUSH
17438: LD_VAR 0 3
17442: PPUSH
17443: LD_INT 3
17445: PPUSH
17446: LD_INT 6
17448: PPUSH
17449: CALL_OW 12
17453: PPUSH
17454: LD_INT 1
17456: PPUSH
17457: CALL_OW 483
// end ;
17461: GO 17321
17463: POP
17464: POP
// end ;
17465: PPOPN 5
17467: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
17468: LD_EXP 68
17472: PUSH
17473: LD_EXP 103
17477: AND
17478: IFFALSE 17572
17480: GO 17482
17482: DISABLE
17483: LD_INT 0
17485: PPUSH
17486: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
17487: LD_ADDR_VAR 0 2
17491: PUSH
17492: LD_INT 22
17494: PUSH
17495: LD_OWVAR 2
17499: PUSH
17500: EMPTY
17501: LIST
17502: LIST
17503: PUSH
17504: LD_INT 32
17506: PUSH
17507: LD_INT 1
17509: PUSH
17510: EMPTY
17511: LIST
17512: LIST
17513: PUSH
17514: LD_INT 21
17516: PUSH
17517: LD_INT 2
17519: PUSH
17520: EMPTY
17521: LIST
17522: LIST
17523: PUSH
17524: EMPTY
17525: LIST
17526: LIST
17527: LIST
17528: PPUSH
17529: CALL_OW 69
17533: ST_TO_ADDR
// if not tmp then
17534: LD_VAR 0 2
17538: NOT
17539: IFFALSE 17543
// exit ;
17541: GO 17572
// for i in tmp do
17543: LD_ADDR_VAR 0 1
17547: PUSH
17548: LD_VAR 0 2
17552: PUSH
17553: FOR_IN
17554: IFFALSE 17570
// SetFuel ( i , 0 ) ;
17556: LD_VAR 0 1
17560: PPUSH
17561: LD_INT 0
17563: PPUSH
17564: CALL_OW 240
17568: GO 17553
17570: POP
17571: POP
// end ;
17572: PPOPN 2
17574: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
17575: LD_EXP 68
17579: PUSH
17580: LD_EXP 104
17584: AND
17585: IFFALSE 17651
17587: GO 17589
17589: DISABLE
17590: LD_INT 0
17592: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
17593: LD_ADDR_VAR 0 1
17597: PUSH
17598: LD_INT 22
17600: PUSH
17601: LD_OWVAR 2
17605: PUSH
17606: EMPTY
17607: LIST
17608: LIST
17609: PUSH
17610: LD_INT 30
17612: PUSH
17613: LD_INT 29
17615: PUSH
17616: EMPTY
17617: LIST
17618: LIST
17619: PUSH
17620: EMPTY
17621: LIST
17622: LIST
17623: PPUSH
17624: CALL_OW 69
17628: ST_TO_ADDR
// if not tmp then
17629: LD_VAR 0 1
17633: NOT
17634: IFFALSE 17638
// exit ;
17636: GO 17651
// DestroyUnit ( tmp [ 1 ] ) ;
17638: LD_VAR 0 1
17642: PUSH
17643: LD_INT 1
17645: ARRAY
17646: PPUSH
17647: CALL_OW 65
// end ;
17651: PPOPN 1
17653: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
17654: LD_EXP 68
17658: PUSH
17659: LD_EXP 106
17663: AND
17664: IFFALSE 17793
17666: GO 17668
17668: DISABLE
17669: LD_INT 0
17671: PPUSH
// begin uc_side := 0 ;
17672: LD_ADDR_OWVAR 20
17676: PUSH
17677: LD_INT 0
17679: ST_TO_ADDR
// uc_nation := nation_arabian ;
17680: LD_ADDR_OWVAR 21
17684: PUSH
17685: LD_INT 2
17687: ST_TO_ADDR
// hc_gallery :=  ;
17688: LD_ADDR_OWVAR 33
17692: PUSH
17693: LD_STRING 
17695: ST_TO_ADDR
// hc_name :=  ;
17696: LD_ADDR_OWVAR 26
17700: PUSH
17701: LD_STRING 
17703: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
17704: LD_INT 1
17706: PPUSH
17707: LD_INT 11
17709: PPUSH
17710: LD_INT 10
17712: PPUSH
17713: CALL_OW 380
// un := CreateHuman ;
17717: LD_ADDR_VAR 0 1
17721: PUSH
17722: CALL_OW 44
17726: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17727: LD_VAR 0 1
17731: PPUSH
17732: LD_INT 1
17734: PPUSH
17735: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
17739: LD_INT 35
17741: PPUSH
17742: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
17746: LD_VAR 0 1
17750: PPUSH
17751: LD_INT 22
17753: PUSH
17754: LD_OWVAR 2
17758: PUSH
17759: EMPTY
17760: LIST
17761: LIST
17762: PPUSH
17763: CALL_OW 69
17767: PPUSH
17768: LD_VAR 0 1
17772: PPUSH
17773: CALL_OW 74
17777: PPUSH
17778: CALL_OW 115
// until IsDead ( un ) ;
17782: LD_VAR 0 1
17786: PPUSH
17787: CALL_OW 301
17791: IFFALSE 17739
// end ;
17793: PPOPN 1
17795: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
17796: LD_EXP 68
17800: PUSH
17801: LD_EXP 108
17805: AND
17806: IFFALSE 17818
17808: GO 17810
17810: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
17811: LD_STRING earthquake(getX(game), 0, 32)
17813: PPUSH
17814: CALL_OW 559
17818: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
17819: LD_EXP 68
17823: PUSH
17824: LD_EXP 109
17828: AND
17829: IFFALSE 17920
17831: GO 17833
17833: DISABLE
17834: LD_INT 0
17836: PPUSH
// begin enable ;
17837: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
17838: LD_ADDR_VAR 0 1
17842: PUSH
17843: LD_INT 22
17845: PUSH
17846: LD_OWVAR 2
17850: PUSH
17851: EMPTY
17852: LIST
17853: LIST
17854: PUSH
17855: LD_INT 21
17857: PUSH
17858: LD_INT 2
17860: PUSH
17861: EMPTY
17862: LIST
17863: LIST
17864: PUSH
17865: LD_INT 33
17867: PUSH
17868: LD_INT 3
17870: PUSH
17871: EMPTY
17872: LIST
17873: LIST
17874: PUSH
17875: EMPTY
17876: LIST
17877: LIST
17878: LIST
17879: PPUSH
17880: CALL_OW 69
17884: ST_TO_ADDR
// if not tmp then
17885: LD_VAR 0 1
17889: NOT
17890: IFFALSE 17894
// exit ;
17892: GO 17920
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
17894: LD_VAR 0 1
17898: PUSH
17899: LD_INT 1
17901: PPUSH
17902: LD_VAR 0 1
17906: PPUSH
17907: CALL_OW 12
17911: ARRAY
17912: PPUSH
17913: LD_INT 1
17915: PPUSH
17916: CALL_OW 234
// end ;
17920: PPOPN 1
17922: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
17923: LD_EXP 68
17927: PUSH
17928: LD_EXP 110
17932: AND
17933: IFFALSE 18074
17935: GO 17937
17937: DISABLE
17938: LD_INT 0
17940: PPUSH
17941: PPUSH
17942: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17943: LD_ADDR_VAR 0 3
17947: PUSH
17948: LD_INT 22
17950: PUSH
17951: LD_OWVAR 2
17955: PUSH
17956: EMPTY
17957: LIST
17958: LIST
17959: PUSH
17960: LD_INT 25
17962: PUSH
17963: LD_INT 1
17965: PUSH
17966: EMPTY
17967: LIST
17968: LIST
17969: PUSH
17970: EMPTY
17971: LIST
17972: LIST
17973: PPUSH
17974: CALL_OW 69
17978: ST_TO_ADDR
// if not tmp then
17979: LD_VAR 0 3
17983: NOT
17984: IFFALSE 17988
// exit ;
17986: GO 18074
// un := tmp [ rand ( 1 , tmp ) ] ;
17988: LD_ADDR_VAR 0 2
17992: PUSH
17993: LD_VAR 0 3
17997: PUSH
17998: LD_INT 1
18000: PPUSH
18001: LD_VAR 0 3
18005: PPUSH
18006: CALL_OW 12
18010: ARRAY
18011: ST_TO_ADDR
// if Crawls ( un ) then
18012: LD_VAR 0 2
18016: PPUSH
18017: CALL_OW 318
18021: IFFALSE 18032
// ComWalk ( un ) ;
18023: LD_VAR 0 2
18027: PPUSH
18028: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
18032: LD_VAR 0 2
18036: PPUSH
18037: LD_INT 9
18039: PPUSH
18040: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
18044: LD_INT 28
18046: PPUSH
18047: LD_OWVAR 2
18051: PPUSH
18052: LD_INT 2
18054: PPUSH
18055: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
18059: LD_INT 29
18061: PPUSH
18062: LD_OWVAR 2
18066: PPUSH
18067: LD_INT 2
18069: PPUSH
18070: CALL_OW 322
// end ;
18074: PPOPN 3
18076: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
18077: LD_EXP 68
18081: PUSH
18082: LD_EXP 111
18086: AND
18087: IFFALSE 18198
18089: GO 18091
18091: DISABLE
18092: LD_INT 0
18094: PPUSH
18095: PPUSH
18096: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18097: LD_ADDR_VAR 0 3
18101: PUSH
18102: LD_INT 22
18104: PUSH
18105: LD_OWVAR 2
18109: PUSH
18110: EMPTY
18111: LIST
18112: LIST
18113: PUSH
18114: LD_INT 25
18116: PUSH
18117: LD_INT 1
18119: PUSH
18120: EMPTY
18121: LIST
18122: LIST
18123: PUSH
18124: EMPTY
18125: LIST
18126: LIST
18127: PPUSH
18128: CALL_OW 69
18132: ST_TO_ADDR
// if not tmp then
18133: LD_VAR 0 3
18137: NOT
18138: IFFALSE 18142
// exit ;
18140: GO 18198
// un := tmp [ rand ( 1 , tmp ) ] ;
18142: LD_ADDR_VAR 0 2
18146: PUSH
18147: LD_VAR 0 3
18151: PUSH
18152: LD_INT 1
18154: PPUSH
18155: LD_VAR 0 3
18159: PPUSH
18160: CALL_OW 12
18164: ARRAY
18165: ST_TO_ADDR
// if Crawls ( un ) then
18166: LD_VAR 0 2
18170: PPUSH
18171: CALL_OW 318
18175: IFFALSE 18186
// ComWalk ( un ) ;
18177: LD_VAR 0 2
18181: PPUSH
18182: CALL_OW 138
// SetClass ( un , class_mortar ) ;
18186: LD_VAR 0 2
18190: PPUSH
18191: LD_INT 8
18193: PPUSH
18194: CALL_OW 336
// end ;
18198: PPOPN 3
18200: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
18201: LD_EXP 68
18205: PUSH
18206: LD_EXP 112
18210: AND
18211: IFFALSE 18355
18213: GO 18215
18215: DISABLE
18216: LD_INT 0
18218: PPUSH
18219: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
18220: LD_ADDR_VAR 0 2
18224: PUSH
18225: LD_INT 22
18227: PUSH
18228: LD_OWVAR 2
18232: PUSH
18233: EMPTY
18234: LIST
18235: LIST
18236: PUSH
18237: LD_INT 21
18239: PUSH
18240: LD_INT 2
18242: PUSH
18243: EMPTY
18244: LIST
18245: LIST
18246: PUSH
18247: LD_INT 2
18249: PUSH
18250: LD_INT 34
18252: PUSH
18253: LD_INT 12
18255: PUSH
18256: EMPTY
18257: LIST
18258: LIST
18259: PUSH
18260: LD_INT 34
18262: PUSH
18263: LD_INT 51
18265: PUSH
18266: EMPTY
18267: LIST
18268: LIST
18269: PUSH
18270: LD_INT 34
18272: PUSH
18273: LD_INT 32
18275: PUSH
18276: EMPTY
18277: LIST
18278: LIST
18279: PUSH
18280: EMPTY
18281: LIST
18282: LIST
18283: LIST
18284: LIST
18285: PUSH
18286: EMPTY
18287: LIST
18288: LIST
18289: LIST
18290: PPUSH
18291: CALL_OW 69
18295: ST_TO_ADDR
// if not tmp then
18296: LD_VAR 0 2
18300: NOT
18301: IFFALSE 18305
// exit ;
18303: GO 18355
// for i in tmp do
18305: LD_ADDR_VAR 0 1
18309: PUSH
18310: LD_VAR 0 2
18314: PUSH
18315: FOR_IN
18316: IFFALSE 18353
// if GetCargo ( i , mat_artifact ) = 0 then
18318: LD_VAR 0 1
18322: PPUSH
18323: LD_INT 4
18325: PPUSH
18326: CALL_OW 289
18330: PUSH
18331: LD_INT 0
18333: EQUAL
18334: IFFALSE 18351
// SetCargo ( i , mat_siberit , 100 ) ;
18336: LD_VAR 0 1
18340: PPUSH
18341: LD_INT 3
18343: PPUSH
18344: LD_INT 100
18346: PPUSH
18347: CALL_OW 290
18351: GO 18315
18353: POP
18354: POP
// end ;
18355: PPOPN 2
18357: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
18358: LD_EXP 68
18362: PUSH
18363: LD_EXP 113
18367: AND
18368: IFFALSE 18551
18370: GO 18372
18372: DISABLE
18373: LD_INT 0
18375: PPUSH
18376: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
18377: LD_ADDR_VAR 0 2
18381: PUSH
18382: LD_INT 22
18384: PUSH
18385: LD_OWVAR 2
18389: PUSH
18390: EMPTY
18391: LIST
18392: LIST
18393: PPUSH
18394: CALL_OW 69
18398: ST_TO_ADDR
// if not tmp then
18399: LD_VAR 0 2
18403: NOT
18404: IFFALSE 18408
// exit ;
18406: GO 18551
// for i := 1 to 2 do
18408: LD_ADDR_VAR 0 1
18412: PUSH
18413: DOUBLE
18414: LD_INT 1
18416: DEC
18417: ST_TO_ADDR
18418: LD_INT 2
18420: PUSH
18421: FOR_TO
18422: IFFALSE 18549
// begin uc_side := your_side ;
18424: LD_ADDR_OWVAR 20
18428: PUSH
18429: LD_OWVAR 2
18433: ST_TO_ADDR
// uc_nation := nation_american ;
18434: LD_ADDR_OWVAR 21
18438: PUSH
18439: LD_INT 1
18441: ST_TO_ADDR
// vc_chassis := us_morphling ;
18442: LD_ADDR_OWVAR 37
18446: PUSH
18447: LD_INT 5
18449: ST_TO_ADDR
// vc_engine := engine_siberite ;
18450: LD_ADDR_OWVAR 39
18454: PUSH
18455: LD_INT 3
18457: ST_TO_ADDR
// vc_control := control_computer ;
18458: LD_ADDR_OWVAR 38
18462: PUSH
18463: LD_INT 3
18465: ST_TO_ADDR
// vc_weapon := us_double_laser ;
18466: LD_ADDR_OWVAR 40
18470: PUSH
18471: LD_INT 10
18473: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
18474: LD_VAR 0 2
18478: PUSH
18479: LD_INT 1
18481: ARRAY
18482: PPUSH
18483: CALL_OW 310
18487: NOT
18488: IFFALSE 18535
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
18490: CALL_OW 45
18494: PPUSH
18495: LD_VAR 0 2
18499: PUSH
18500: LD_INT 1
18502: ARRAY
18503: PPUSH
18504: CALL_OW 250
18508: PPUSH
18509: LD_VAR 0 2
18513: PUSH
18514: LD_INT 1
18516: ARRAY
18517: PPUSH
18518: CALL_OW 251
18522: PPUSH
18523: LD_INT 12
18525: PPUSH
18526: LD_INT 1
18528: PPUSH
18529: CALL_OW 50
18533: GO 18547
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
18535: CALL_OW 45
18539: PPUSH
18540: LD_INT 1
18542: PPUSH
18543: CALL_OW 51
// end ;
18547: GO 18421
18549: POP
18550: POP
// end ;
18551: PPOPN 2
18553: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
18554: LD_EXP 68
18558: PUSH
18559: LD_EXP 114
18563: AND
18564: IFFALSE 18786
18566: GO 18568
18568: DISABLE
18569: LD_INT 0
18571: PPUSH
18572: PPUSH
18573: PPUSH
18574: PPUSH
18575: PPUSH
18576: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18577: LD_ADDR_VAR 0 6
18581: PUSH
18582: LD_INT 22
18584: PUSH
18585: LD_OWVAR 2
18589: PUSH
18590: EMPTY
18591: LIST
18592: LIST
18593: PUSH
18594: LD_INT 21
18596: PUSH
18597: LD_INT 1
18599: PUSH
18600: EMPTY
18601: LIST
18602: LIST
18603: PUSH
18604: LD_INT 3
18606: PUSH
18607: LD_INT 23
18609: PUSH
18610: LD_INT 0
18612: PUSH
18613: EMPTY
18614: LIST
18615: LIST
18616: PUSH
18617: EMPTY
18618: LIST
18619: LIST
18620: PUSH
18621: EMPTY
18622: LIST
18623: LIST
18624: LIST
18625: PPUSH
18626: CALL_OW 69
18630: ST_TO_ADDR
// if not tmp then
18631: LD_VAR 0 6
18635: NOT
18636: IFFALSE 18640
// exit ;
18638: GO 18786
// s1 := rand ( 1 , 4 ) ;
18640: LD_ADDR_VAR 0 2
18644: PUSH
18645: LD_INT 1
18647: PPUSH
18648: LD_INT 4
18650: PPUSH
18651: CALL_OW 12
18655: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
18656: LD_ADDR_VAR 0 4
18660: PUSH
18661: LD_VAR 0 6
18665: PUSH
18666: LD_INT 1
18668: ARRAY
18669: PPUSH
18670: LD_VAR 0 2
18674: PPUSH
18675: CALL_OW 259
18679: ST_TO_ADDR
// if s1 = 1 then
18680: LD_VAR 0 2
18684: PUSH
18685: LD_INT 1
18687: EQUAL
18688: IFFALSE 18708
// s2 := rand ( 2 , 4 ) else
18690: LD_ADDR_VAR 0 3
18694: PUSH
18695: LD_INT 2
18697: PPUSH
18698: LD_INT 4
18700: PPUSH
18701: CALL_OW 12
18705: ST_TO_ADDR
18706: GO 18716
// s2 := 1 ;
18708: LD_ADDR_VAR 0 3
18712: PUSH
18713: LD_INT 1
18715: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
18716: LD_ADDR_VAR 0 5
18720: PUSH
18721: LD_VAR 0 6
18725: PUSH
18726: LD_INT 1
18728: ARRAY
18729: PPUSH
18730: LD_VAR 0 3
18734: PPUSH
18735: CALL_OW 259
18739: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
18740: LD_VAR 0 6
18744: PUSH
18745: LD_INT 1
18747: ARRAY
18748: PPUSH
18749: LD_VAR 0 2
18753: PPUSH
18754: LD_VAR 0 5
18758: PPUSH
18759: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
18763: LD_VAR 0 6
18767: PUSH
18768: LD_INT 1
18770: ARRAY
18771: PPUSH
18772: LD_VAR 0 3
18776: PPUSH
18777: LD_VAR 0 4
18781: PPUSH
18782: CALL_OW 237
// end ;
18786: PPOPN 6
18788: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
18789: LD_EXP 68
18793: PUSH
18794: LD_EXP 115
18798: AND
18799: IFFALSE 18878
18801: GO 18803
18803: DISABLE
18804: LD_INT 0
18806: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
18807: LD_ADDR_VAR 0 1
18811: PUSH
18812: LD_INT 22
18814: PUSH
18815: LD_OWVAR 2
18819: PUSH
18820: EMPTY
18821: LIST
18822: LIST
18823: PUSH
18824: LD_INT 30
18826: PUSH
18827: LD_INT 3
18829: PUSH
18830: EMPTY
18831: LIST
18832: LIST
18833: PUSH
18834: EMPTY
18835: LIST
18836: LIST
18837: PPUSH
18838: CALL_OW 69
18842: ST_TO_ADDR
// if not tmp then
18843: LD_VAR 0 1
18847: NOT
18848: IFFALSE 18852
// exit ;
18850: GO 18878
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
18852: LD_VAR 0 1
18856: PUSH
18857: LD_INT 1
18859: PPUSH
18860: LD_VAR 0 1
18864: PPUSH
18865: CALL_OW 12
18869: ARRAY
18870: PPUSH
18871: LD_INT 1
18873: PPUSH
18874: CALL_OW 234
// end ;
18878: PPOPN 1
18880: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
18881: LD_EXP 68
18885: PUSH
18886: LD_EXP 116
18890: AND
18891: IFFALSE 19003
18893: GO 18895
18895: DISABLE
18896: LD_INT 0
18898: PPUSH
18899: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
18900: LD_ADDR_VAR 0 2
18904: PUSH
18905: LD_INT 22
18907: PUSH
18908: LD_OWVAR 2
18912: PUSH
18913: EMPTY
18914: LIST
18915: LIST
18916: PUSH
18917: LD_INT 2
18919: PUSH
18920: LD_INT 30
18922: PUSH
18923: LD_INT 27
18925: PUSH
18926: EMPTY
18927: LIST
18928: LIST
18929: PUSH
18930: LD_INT 30
18932: PUSH
18933: LD_INT 26
18935: PUSH
18936: EMPTY
18937: LIST
18938: LIST
18939: PUSH
18940: LD_INT 30
18942: PUSH
18943: LD_INT 28
18945: PUSH
18946: EMPTY
18947: LIST
18948: LIST
18949: PUSH
18950: EMPTY
18951: LIST
18952: LIST
18953: LIST
18954: LIST
18955: PUSH
18956: EMPTY
18957: LIST
18958: LIST
18959: PPUSH
18960: CALL_OW 69
18964: ST_TO_ADDR
// if not tmp then
18965: LD_VAR 0 2
18969: NOT
18970: IFFALSE 18974
// exit ;
18972: GO 19003
// for i in tmp do
18974: LD_ADDR_VAR 0 1
18978: PUSH
18979: LD_VAR 0 2
18983: PUSH
18984: FOR_IN
18985: IFFALSE 19001
// SetLives ( i , 1 ) ;
18987: LD_VAR 0 1
18991: PPUSH
18992: LD_INT 1
18994: PPUSH
18995: CALL_OW 234
18999: GO 18984
19001: POP
19002: POP
// end ;
19003: PPOPN 2
19005: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
19006: LD_EXP 68
19010: PUSH
19011: LD_EXP 117
19015: AND
19016: IFFALSE 19290
19018: GO 19020
19020: DISABLE
19021: LD_INT 0
19023: PPUSH
19024: PPUSH
19025: PPUSH
// begin i := rand ( 1 , 7 ) ;
19026: LD_ADDR_VAR 0 1
19030: PUSH
19031: LD_INT 1
19033: PPUSH
19034: LD_INT 7
19036: PPUSH
19037: CALL_OW 12
19041: ST_TO_ADDR
// case i of 1 :
19042: LD_VAR 0 1
19046: PUSH
19047: LD_INT 1
19049: DOUBLE
19050: EQUAL
19051: IFTRUE 19055
19053: GO 19065
19055: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
19056: LD_STRING earthquake(getX(game), 0, 32)
19058: PPUSH
19059: CALL_OW 559
19063: GO 19290
19065: LD_INT 2
19067: DOUBLE
19068: EQUAL
19069: IFTRUE 19073
19071: GO 19087
19073: POP
// begin ToLua ( displayStucuk(); ) ;
19074: LD_STRING displayStucuk();
19076: PPUSH
19077: CALL_OW 559
// ResetFog ;
19081: CALL_OW 335
// end ; 3 :
19085: GO 19290
19087: LD_INT 3
19089: DOUBLE
19090: EQUAL
19091: IFTRUE 19095
19093: GO 19199
19095: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19096: LD_ADDR_VAR 0 2
19100: PUSH
19101: LD_INT 22
19103: PUSH
19104: LD_OWVAR 2
19108: PUSH
19109: EMPTY
19110: LIST
19111: LIST
19112: PUSH
19113: LD_INT 25
19115: PUSH
19116: LD_INT 1
19118: PUSH
19119: EMPTY
19120: LIST
19121: LIST
19122: PUSH
19123: EMPTY
19124: LIST
19125: LIST
19126: PPUSH
19127: CALL_OW 69
19131: ST_TO_ADDR
// if not tmp then
19132: LD_VAR 0 2
19136: NOT
19137: IFFALSE 19141
// exit ;
19139: GO 19290
// un := tmp [ rand ( 1 , tmp ) ] ;
19141: LD_ADDR_VAR 0 3
19145: PUSH
19146: LD_VAR 0 2
19150: PUSH
19151: LD_INT 1
19153: PPUSH
19154: LD_VAR 0 2
19158: PPUSH
19159: CALL_OW 12
19163: ARRAY
19164: ST_TO_ADDR
// if Crawls ( un ) then
19165: LD_VAR 0 3
19169: PPUSH
19170: CALL_OW 318
19174: IFFALSE 19185
// ComWalk ( un ) ;
19176: LD_VAR 0 3
19180: PPUSH
19181: CALL_OW 138
// SetClass ( un , class_mortar ) ;
19185: LD_VAR 0 3
19189: PPUSH
19190: LD_INT 8
19192: PPUSH
19193: CALL_OW 336
// end ; 4 :
19197: GO 19290
19199: LD_INT 4
19201: DOUBLE
19202: EQUAL
19203: IFTRUE 19207
19205: GO 19268
19207: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
19208: LD_ADDR_VAR 0 2
19212: PUSH
19213: LD_INT 22
19215: PUSH
19216: LD_OWVAR 2
19220: PUSH
19221: EMPTY
19222: LIST
19223: LIST
19224: PUSH
19225: LD_INT 30
19227: PUSH
19228: LD_INT 29
19230: PUSH
19231: EMPTY
19232: LIST
19233: LIST
19234: PUSH
19235: EMPTY
19236: LIST
19237: LIST
19238: PPUSH
19239: CALL_OW 69
19243: ST_TO_ADDR
// if not tmp then
19244: LD_VAR 0 2
19248: NOT
19249: IFFALSE 19253
// exit ;
19251: GO 19290
// DestroyUnit ( tmp [ 1 ] ) ;
19253: LD_VAR 0 2
19257: PUSH
19258: LD_INT 1
19260: ARRAY
19261: PPUSH
19262: CALL_OW 65
// end ; 5 .. 7 :
19266: GO 19290
19268: LD_INT 5
19270: DOUBLE
19271: GREATEREQUAL
19272: IFFALSE 19280
19274: LD_INT 7
19276: DOUBLE
19277: LESSEQUAL
19278: IFTRUE 19282
19280: GO 19289
19282: POP
// StreamSibBomb ; end ;
19283: CALL 15540 0 0
19287: GO 19290
19289: POP
// end ;
19290: PPOPN 3
19292: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
19293: LD_EXP 68
19297: PUSH
19298: LD_EXP 118
19302: AND
19303: IFFALSE 19459
19305: GO 19307
19307: DISABLE
19308: LD_INT 0
19310: PPUSH
19311: PPUSH
19312: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
19313: LD_ADDR_VAR 0 2
19317: PUSH
19318: LD_INT 81
19320: PUSH
19321: LD_OWVAR 2
19325: PUSH
19326: EMPTY
19327: LIST
19328: LIST
19329: PUSH
19330: LD_INT 2
19332: PUSH
19333: LD_INT 21
19335: PUSH
19336: LD_INT 1
19338: PUSH
19339: EMPTY
19340: LIST
19341: LIST
19342: PUSH
19343: LD_INT 21
19345: PUSH
19346: LD_INT 2
19348: PUSH
19349: EMPTY
19350: LIST
19351: LIST
19352: PUSH
19353: EMPTY
19354: LIST
19355: LIST
19356: LIST
19357: PUSH
19358: EMPTY
19359: LIST
19360: LIST
19361: PPUSH
19362: CALL_OW 69
19366: ST_TO_ADDR
// if not tmp then
19367: LD_VAR 0 2
19371: NOT
19372: IFFALSE 19376
// exit ;
19374: GO 19459
// p := 0 ;
19376: LD_ADDR_VAR 0 3
19380: PUSH
19381: LD_INT 0
19383: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19384: LD_INT 35
19386: PPUSH
19387: CALL_OW 67
// p := p + 1 ;
19391: LD_ADDR_VAR 0 3
19395: PUSH
19396: LD_VAR 0 3
19400: PUSH
19401: LD_INT 1
19403: PLUS
19404: ST_TO_ADDR
// for i in tmp do
19405: LD_ADDR_VAR 0 1
19409: PUSH
19410: LD_VAR 0 2
19414: PUSH
19415: FOR_IN
19416: IFFALSE 19447
// if GetLives ( i ) < 1000 then
19418: LD_VAR 0 1
19422: PPUSH
19423: CALL_OW 256
19427: PUSH
19428: LD_INT 1000
19430: LESS
19431: IFFALSE 19445
// SetLives ( i , 1000 ) ;
19433: LD_VAR 0 1
19437: PPUSH
19438: LD_INT 1000
19440: PPUSH
19441: CALL_OW 234
19445: GO 19415
19447: POP
19448: POP
// until p > 20 ;
19449: LD_VAR 0 3
19453: PUSH
19454: LD_INT 20
19456: GREATER
19457: IFFALSE 19384
// end ;
19459: PPOPN 3
19461: END
// every 0 0$1 trigger StreamModeActive and sTime do
19462: LD_EXP 68
19466: PUSH
19467: LD_EXP 119
19471: AND
19472: IFFALSE 19507
19474: GO 19476
19476: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
19477: LD_INT 28
19479: PPUSH
19480: LD_OWVAR 2
19484: PPUSH
19485: LD_INT 2
19487: PPUSH
19488: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
19492: LD_INT 30
19494: PPUSH
19495: LD_OWVAR 2
19499: PPUSH
19500: LD_INT 2
19502: PPUSH
19503: CALL_OW 322
// end ;
19507: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
19508: LD_EXP 68
19512: PUSH
19513: LD_EXP 120
19517: AND
19518: IFFALSE 19639
19520: GO 19522
19522: DISABLE
19523: LD_INT 0
19525: PPUSH
19526: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19527: LD_ADDR_VAR 0 2
19531: PUSH
19532: LD_INT 22
19534: PUSH
19535: LD_OWVAR 2
19539: PUSH
19540: EMPTY
19541: LIST
19542: LIST
19543: PUSH
19544: LD_INT 21
19546: PUSH
19547: LD_INT 1
19549: PUSH
19550: EMPTY
19551: LIST
19552: LIST
19553: PUSH
19554: LD_INT 3
19556: PUSH
19557: LD_INT 23
19559: PUSH
19560: LD_INT 0
19562: PUSH
19563: EMPTY
19564: LIST
19565: LIST
19566: PUSH
19567: EMPTY
19568: LIST
19569: LIST
19570: PUSH
19571: EMPTY
19572: LIST
19573: LIST
19574: LIST
19575: PPUSH
19576: CALL_OW 69
19580: ST_TO_ADDR
// if not tmp then
19581: LD_VAR 0 2
19585: NOT
19586: IFFALSE 19590
// exit ;
19588: GO 19639
// for i in tmp do
19590: LD_ADDR_VAR 0 1
19594: PUSH
19595: LD_VAR 0 2
19599: PUSH
19600: FOR_IN
19601: IFFALSE 19637
// begin if Crawls ( i ) then
19603: LD_VAR 0 1
19607: PPUSH
19608: CALL_OW 318
19612: IFFALSE 19623
// ComWalk ( i ) ;
19614: LD_VAR 0 1
19618: PPUSH
19619: CALL_OW 138
// SetClass ( i , 2 ) ;
19623: LD_VAR 0 1
19627: PPUSH
19628: LD_INT 2
19630: PPUSH
19631: CALL_OW 336
// end ;
19635: GO 19600
19637: POP
19638: POP
// end ;
19639: PPOPN 2
19641: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
19642: LD_EXP 68
19646: PUSH
19647: LD_EXP 121
19651: AND
19652: IFFALSE 19933
19654: GO 19656
19656: DISABLE
19657: LD_INT 0
19659: PPUSH
19660: PPUSH
19661: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
19662: LD_OWVAR 2
19666: PPUSH
19667: LD_INT 9
19669: PPUSH
19670: LD_INT 1
19672: PPUSH
19673: LD_INT 1
19675: PPUSH
19676: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
19680: LD_INT 9
19682: PPUSH
19683: LD_OWVAR 2
19687: PPUSH
19688: CALL_OW 343
// uc_side := 9 ;
19692: LD_ADDR_OWVAR 20
19696: PUSH
19697: LD_INT 9
19699: ST_TO_ADDR
// uc_nation := 2 ;
19700: LD_ADDR_OWVAR 21
19704: PUSH
19705: LD_INT 2
19707: ST_TO_ADDR
// hc_name := Dark Warrior ;
19708: LD_ADDR_OWVAR 26
19712: PUSH
19713: LD_STRING Dark Warrior
19715: ST_TO_ADDR
// hc_gallery :=  ;
19716: LD_ADDR_OWVAR 33
19720: PUSH
19721: LD_STRING 
19723: ST_TO_ADDR
// hc_noskilllimit := true ;
19724: LD_ADDR_OWVAR 76
19728: PUSH
19729: LD_INT 1
19731: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
19732: LD_ADDR_OWVAR 31
19736: PUSH
19737: LD_INT 30
19739: PUSH
19740: LD_INT 30
19742: PUSH
19743: LD_INT 30
19745: PUSH
19746: LD_INT 30
19748: PUSH
19749: EMPTY
19750: LIST
19751: LIST
19752: LIST
19753: LIST
19754: ST_TO_ADDR
// un := CreateHuman ;
19755: LD_ADDR_VAR 0 3
19759: PUSH
19760: CALL_OW 44
19764: ST_TO_ADDR
// hc_noskilllimit := false ;
19765: LD_ADDR_OWVAR 76
19769: PUSH
19770: LD_INT 0
19772: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19773: LD_VAR 0 3
19777: PPUSH
19778: LD_INT 1
19780: PPUSH
19781: CALL_OW 51
// p := 0 ;
19785: LD_ADDR_VAR 0 2
19789: PUSH
19790: LD_INT 0
19792: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19793: LD_INT 35
19795: PPUSH
19796: CALL_OW 67
// p := p + 1 ;
19800: LD_ADDR_VAR 0 2
19804: PUSH
19805: LD_VAR 0 2
19809: PUSH
19810: LD_INT 1
19812: PLUS
19813: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
19814: LD_VAR 0 3
19818: PPUSH
19819: CALL_OW 256
19823: PUSH
19824: LD_INT 1000
19826: LESS
19827: IFFALSE 19841
// SetLives ( un , 1000 ) ;
19829: LD_VAR 0 3
19833: PPUSH
19834: LD_INT 1000
19836: PPUSH
19837: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
19841: LD_VAR 0 3
19845: PPUSH
19846: LD_INT 81
19848: PUSH
19849: LD_OWVAR 2
19853: PUSH
19854: EMPTY
19855: LIST
19856: LIST
19857: PUSH
19858: LD_INT 91
19860: PUSH
19861: LD_VAR 0 3
19865: PUSH
19866: LD_INT 30
19868: PUSH
19869: EMPTY
19870: LIST
19871: LIST
19872: LIST
19873: PUSH
19874: EMPTY
19875: LIST
19876: LIST
19877: PPUSH
19878: CALL_OW 69
19882: PPUSH
19883: LD_VAR 0 3
19887: PPUSH
19888: CALL_OW 74
19892: PPUSH
19893: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
19897: LD_VAR 0 2
19901: PUSH
19902: LD_INT 60
19904: GREATER
19905: PUSH
19906: LD_VAR 0 3
19910: PPUSH
19911: CALL_OW 301
19915: OR
19916: IFFALSE 19793
// if un then
19918: LD_VAR 0 3
19922: IFFALSE 19933
// RemoveUnit ( un ) ;
19924: LD_VAR 0 3
19928: PPUSH
19929: CALL_OW 64
// end ;
19933: PPOPN 3
19935: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19936: LD_INT 0
19938: PPUSH
// case cmd of 301 :
19939: LD_VAR 0 1
19943: PUSH
19944: LD_INT 301
19946: DOUBLE
19947: EQUAL
19948: IFTRUE 19952
19950: GO 19984
19952: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
19953: LD_VAR 0 6
19957: PPUSH
19958: LD_VAR 0 7
19962: PPUSH
19963: LD_VAR 0 8
19967: PPUSH
19968: LD_VAR 0 4
19972: PPUSH
19973: LD_VAR 0 5
19977: PPUSH
19978: CALL 21185 0 5
19982: GO 20105
19984: LD_INT 302
19986: DOUBLE
19987: EQUAL
19988: IFTRUE 19992
19990: GO 20029
19992: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
19993: LD_VAR 0 6
19997: PPUSH
19998: LD_VAR 0 7
20002: PPUSH
20003: LD_VAR 0 8
20007: PPUSH
20008: LD_VAR 0 9
20012: PPUSH
20013: LD_VAR 0 4
20017: PPUSH
20018: LD_VAR 0 5
20022: PPUSH
20023: CALL 21276 0 6
20027: GO 20105
20029: LD_INT 303
20031: DOUBLE
20032: EQUAL
20033: IFTRUE 20037
20035: GO 20074
20037: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
20038: LD_VAR 0 6
20042: PPUSH
20043: LD_VAR 0 7
20047: PPUSH
20048: LD_VAR 0 8
20052: PPUSH
20053: LD_VAR 0 9
20057: PPUSH
20058: LD_VAR 0 4
20062: PPUSH
20063: LD_VAR 0 5
20067: PPUSH
20068: CALL 20110 0 6
20072: GO 20105
20074: LD_INT 304
20076: DOUBLE
20077: EQUAL
20078: IFTRUE 20082
20080: GO 20104
20082: POP
// hHackTeleport ( unit , x , y ) ; end ;
20083: LD_VAR 0 2
20087: PPUSH
20088: LD_VAR 0 4
20092: PPUSH
20093: LD_VAR 0 5
20097: PPUSH
20098: CALL 21869 0 3
20102: GO 20105
20104: POP
// end ;
20105: LD_VAR 0 12
20109: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
20110: LD_INT 0
20112: PPUSH
20113: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
20114: LD_VAR 0 1
20118: PUSH
20119: LD_INT 1
20121: LESS
20122: PUSH
20123: LD_VAR 0 1
20127: PUSH
20128: LD_INT 3
20130: GREATER
20131: OR
20132: PUSH
20133: LD_VAR 0 5
20137: PPUSH
20138: LD_VAR 0 6
20142: PPUSH
20143: CALL_OW 428
20147: OR
20148: IFFALSE 20152
// exit ;
20150: GO 20872
// uc_side := your_side ;
20152: LD_ADDR_OWVAR 20
20156: PUSH
20157: LD_OWVAR 2
20161: ST_TO_ADDR
// uc_nation := nation ;
20162: LD_ADDR_OWVAR 21
20166: PUSH
20167: LD_VAR 0 1
20171: ST_TO_ADDR
// bc_level = 1 ;
20172: LD_ADDR_OWVAR 43
20176: PUSH
20177: LD_INT 1
20179: ST_TO_ADDR
// case btype of 1 :
20180: LD_VAR 0 2
20184: PUSH
20185: LD_INT 1
20187: DOUBLE
20188: EQUAL
20189: IFTRUE 20193
20191: GO 20204
20193: POP
// bc_type := b_depot ; 2 :
20194: LD_ADDR_OWVAR 42
20198: PUSH
20199: LD_INT 0
20201: ST_TO_ADDR
20202: GO 20816
20204: LD_INT 2
20206: DOUBLE
20207: EQUAL
20208: IFTRUE 20212
20210: GO 20223
20212: POP
// bc_type := b_warehouse ; 3 :
20213: LD_ADDR_OWVAR 42
20217: PUSH
20218: LD_INT 1
20220: ST_TO_ADDR
20221: GO 20816
20223: LD_INT 3
20225: DOUBLE
20226: EQUAL
20227: IFTRUE 20231
20229: GO 20242
20231: POP
// bc_type := b_lab ; 4 .. 9 :
20232: LD_ADDR_OWVAR 42
20236: PUSH
20237: LD_INT 6
20239: ST_TO_ADDR
20240: GO 20816
20242: LD_INT 4
20244: DOUBLE
20245: GREATEREQUAL
20246: IFFALSE 20254
20248: LD_INT 9
20250: DOUBLE
20251: LESSEQUAL
20252: IFTRUE 20256
20254: GO 20308
20256: POP
// begin bc_type := b_lab_half ;
20257: LD_ADDR_OWVAR 42
20261: PUSH
20262: LD_INT 7
20264: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
20265: LD_ADDR_OWVAR 44
20269: PUSH
20270: LD_INT 10
20272: PUSH
20273: LD_INT 11
20275: PUSH
20276: LD_INT 12
20278: PUSH
20279: LD_INT 15
20281: PUSH
20282: LD_INT 14
20284: PUSH
20285: LD_INT 13
20287: PUSH
20288: EMPTY
20289: LIST
20290: LIST
20291: LIST
20292: LIST
20293: LIST
20294: LIST
20295: PUSH
20296: LD_VAR 0 2
20300: PUSH
20301: LD_INT 3
20303: MINUS
20304: ARRAY
20305: ST_TO_ADDR
// end ; 10 .. 13 :
20306: GO 20816
20308: LD_INT 10
20310: DOUBLE
20311: GREATEREQUAL
20312: IFFALSE 20320
20314: LD_INT 13
20316: DOUBLE
20317: LESSEQUAL
20318: IFTRUE 20322
20320: GO 20399
20322: POP
// begin bc_type := b_lab_full ;
20323: LD_ADDR_OWVAR 42
20327: PUSH
20328: LD_INT 8
20330: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
20331: LD_ADDR_OWVAR 44
20335: PUSH
20336: LD_INT 10
20338: PUSH
20339: LD_INT 12
20341: PUSH
20342: LD_INT 14
20344: PUSH
20345: LD_INT 13
20347: PUSH
20348: EMPTY
20349: LIST
20350: LIST
20351: LIST
20352: LIST
20353: PUSH
20354: LD_VAR 0 2
20358: PUSH
20359: LD_INT 9
20361: MINUS
20362: ARRAY
20363: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
20364: LD_ADDR_OWVAR 45
20368: PUSH
20369: LD_INT 11
20371: PUSH
20372: LD_INT 15
20374: PUSH
20375: LD_INT 12
20377: PUSH
20378: LD_INT 15
20380: PUSH
20381: EMPTY
20382: LIST
20383: LIST
20384: LIST
20385: LIST
20386: PUSH
20387: LD_VAR 0 2
20391: PUSH
20392: LD_INT 9
20394: MINUS
20395: ARRAY
20396: ST_TO_ADDR
// end ; 14 :
20397: GO 20816
20399: LD_INT 14
20401: DOUBLE
20402: EQUAL
20403: IFTRUE 20407
20405: GO 20418
20407: POP
// bc_type := b_workshop ; 15 :
20408: LD_ADDR_OWVAR 42
20412: PUSH
20413: LD_INT 2
20415: ST_TO_ADDR
20416: GO 20816
20418: LD_INT 15
20420: DOUBLE
20421: EQUAL
20422: IFTRUE 20426
20424: GO 20437
20426: POP
// bc_type := b_factory ; 16 :
20427: LD_ADDR_OWVAR 42
20431: PUSH
20432: LD_INT 3
20434: ST_TO_ADDR
20435: GO 20816
20437: LD_INT 16
20439: DOUBLE
20440: EQUAL
20441: IFTRUE 20445
20443: GO 20456
20445: POP
// bc_type := b_ext_gun ; 17 :
20446: LD_ADDR_OWVAR 42
20450: PUSH
20451: LD_INT 17
20453: ST_TO_ADDR
20454: GO 20816
20456: LD_INT 17
20458: DOUBLE
20459: EQUAL
20460: IFTRUE 20464
20462: GO 20492
20464: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
20465: LD_ADDR_OWVAR 42
20469: PUSH
20470: LD_INT 19
20472: PUSH
20473: LD_INT 23
20475: PUSH
20476: LD_INT 19
20478: PUSH
20479: EMPTY
20480: LIST
20481: LIST
20482: LIST
20483: PUSH
20484: LD_VAR 0 1
20488: ARRAY
20489: ST_TO_ADDR
20490: GO 20816
20492: LD_INT 18
20494: DOUBLE
20495: EQUAL
20496: IFTRUE 20500
20498: GO 20511
20500: POP
// bc_type := b_ext_radar ; 19 :
20501: LD_ADDR_OWVAR 42
20505: PUSH
20506: LD_INT 20
20508: ST_TO_ADDR
20509: GO 20816
20511: LD_INT 19
20513: DOUBLE
20514: EQUAL
20515: IFTRUE 20519
20517: GO 20530
20519: POP
// bc_type := b_ext_radio ; 20 :
20520: LD_ADDR_OWVAR 42
20524: PUSH
20525: LD_INT 22
20527: ST_TO_ADDR
20528: GO 20816
20530: LD_INT 20
20532: DOUBLE
20533: EQUAL
20534: IFTRUE 20538
20536: GO 20549
20538: POP
// bc_type := b_ext_siberium ; 21 :
20539: LD_ADDR_OWVAR 42
20543: PUSH
20544: LD_INT 21
20546: ST_TO_ADDR
20547: GO 20816
20549: LD_INT 21
20551: DOUBLE
20552: EQUAL
20553: IFTRUE 20557
20555: GO 20568
20557: POP
// bc_type := b_ext_computer ; 22 :
20558: LD_ADDR_OWVAR 42
20562: PUSH
20563: LD_INT 24
20565: ST_TO_ADDR
20566: GO 20816
20568: LD_INT 22
20570: DOUBLE
20571: EQUAL
20572: IFTRUE 20576
20574: GO 20587
20576: POP
// bc_type := b_ext_track ; 23 :
20577: LD_ADDR_OWVAR 42
20581: PUSH
20582: LD_INT 16
20584: ST_TO_ADDR
20585: GO 20816
20587: LD_INT 23
20589: DOUBLE
20590: EQUAL
20591: IFTRUE 20595
20593: GO 20606
20595: POP
// bc_type := b_ext_laser ; 24 :
20596: LD_ADDR_OWVAR 42
20600: PUSH
20601: LD_INT 25
20603: ST_TO_ADDR
20604: GO 20816
20606: LD_INT 24
20608: DOUBLE
20609: EQUAL
20610: IFTRUE 20614
20612: GO 20625
20614: POP
// bc_type := b_control_tower ; 25 :
20615: LD_ADDR_OWVAR 42
20619: PUSH
20620: LD_INT 36
20622: ST_TO_ADDR
20623: GO 20816
20625: LD_INT 25
20627: DOUBLE
20628: EQUAL
20629: IFTRUE 20633
20631: GO 20644
20633: POP
// bc_type := b_breastwork ; 26 :
20634: LD_ADDR_OWVAR 42
20638: PUSH
20639: LD_INT 31
20641: ST_TO_ADDR
20642: GO 20816
20644: LD_INT 26
20646: DOUBLE
20647: EQUAL
20648: IFTRUE 20652
20650: GO 20663
20652: POP
// bc_type := b_bunker ; 27 :
20653: LD_ADDR_OWVAR 42
20657: PUSH
20658: LD_INT 32
20660: ST_TO_ADDR
20661: GO 20816
20663: LD_INT 27
20665: DOUBLE
20666: EQUAL
20667: IFTRUE 20671
20669: GO 20682
20671: POP
// bc_type := b_turret ; 28 :
20672: LD_ADDR_OWVAR 42
20676: PUSH
20677: LD_INT 33
20679: ST_TO_ADDR
20680: GO 20816
20682: LD_INT 28
20684: DOUBLE
20685: EQUAL
20686: IFTRUE 20690
20688: GO 20701
20690: POP
// bc_type := b_armoury ; 29 :
20691: LD_ADDR_OWVAR 42
20695: PUSH
20696: LD_INT 4
20698: ST_TO_ADDR
20699: GO 20816
20701: LD_INT 29
20703: DOUBLE
20704: EQUAL
20705: IFTRUE 20709
20707: GO 20720
20709: POP
// bc_type := b_barracks ; 30 :
20710: LD_ADDR_OWVAR 42
20714: PUSH
20715: LD_INT 5
20717: ST_TO_ADDR
20718: GO 20816
20720: LD_INT 30
20722: DOUBLE
20723: EQUAL
20724: IFTRUE 20728
20726: GO 20739
20728: POP
// bc_type := b_solar_power ; 31 :
20729: LD_ADDR_OWVAR 42
20733: PUSH
20734: LD_INT 27
20736: ST_TO_ADDR
20737: GO 20816
20739: LD_INT 31
20741: DOUBLE
20742: EQUAL
20743: IFTRUE 20747
20745: GO 20758
20747: POP
// bc_type := b_oil_power ; 32 :
20748: LD_ADDR_OWVAR 42
20752: PUSH
20753: LD_INT 26
20755: ST_TO_ADDR
20756: GO 20816
20758: LD_INT 32
20760: DOUBLE
20761: EQUAL
20762: IFTRUE 20766
20764: GO 20777
20766: POP
// bc_type := b_siberite_power ; 33 :
20767: LD_ADDR_OWVAR 42
20771: PUSH
20772: LD_INT 28
20774: ST_TO_ADDR
20775: GO 20816
20777: LD_INT 33
20779: DOUBLE
20780: EQUAL
20781: IFTRUE 20785
20783: GO 20796
20785: POP
// bc_type := b_oil_mine ; 34 :
20786: LD_ADDR_OWVAR 42
20790: PUSH
20791: LD_INT 29
20793: ST_TO_ADDR
20794: GO 20816
20796: LD_INT 34
20798: DOUBLE
20799: EQUAL
20800: IFTRUE 20804
20802: GO 20815
20804: POP
// bc_type := b_siberite_mine ; end ;
20805: LD_ADDR_OWVAR 42
20809: PUSH
20810: LD_INT 30
20812: ST_TO_ADDR
20813: GO 20816
20815: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
20816: LD_ADDR_VAR 0 8
20820: PUSH
20821: LD_VAR 0 5
20825: PPUSH
20826: LD_VAR 0 6
20830: PPUSH
20831: LD_VAR 0 3
20835: PPUSH
20836: CALL_OW 47
20840: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
20841: LD_OWVAR 42
20845: PUSH
20846: LD_INT 32
20848: PUSH
20849: LD_INT 33
20851: PUSH
20852: EMPTY
20853: LIST
20854: LIST
20855: IN
20856: IFFALSE 20872
// PlaceWeaponTurret ( b , weapon ) ;
20858: LD_VAR 0 8
20862: PPUSH
20863: LD_VAR 0 4
20867: PPUSH
20868: CALL_OW 431
// end ;
20872: LD_VAR 0 7
20876: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
20877: LD_INT 0
20879: PPUSH
20880: PPUSH
20881: PPUSH
20882: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20883: LD_ADDR_VAR 0 4
20887: PUSH
20888: LD_INT 22
20890: PUSH
20891: LD_OWVAR 2
20895: PUSH
20896: EMPTY
20897: LIST
20898: LIST
20899: PUSH
20900: LD_INT 2
20902: PUSH
20903: LD_INT 30
20905: PUSH
20906: LD_INT 0
20908: PUSH
20909: EMPTY
20910: LIST
20911: LIST
20912: PUSH
20913: LD_INT 30
20915: PUSH
20916: LD_INT 1
20918: PUSH
20919: EMPTY
20920: LIST
20921: LIST
20922: PUSH
20923: EMPTY
20924: LIST
20925: LIST
20926: LIST
20927: PUSH
20928: EMPTY
20929: LIST
20930: LIST
20931: PPUSH
20932: CALL_OW 69
20936: ST_TO_ADDR
// if not tmp then
20937: LD_VAR 0 4
20941: NOT
20942: IFFALSE 20946
// exit ;
20944: GO 21005
// for i in tmp do
20946: LD_ADDR_VAR 0 2
20950: PUSH
20951: LD_VAR 0 4
20955: PUSH
20956: FOR_IN
20957: IFFALSE 21003
// for j = 1 to 3 do
20959: LD_ADDR_VAR 0 3
20963: PUSH
20964: DOUBLE
20965: LD_INT 1
20967: DEC
20968: ST_TO_ADDR
20969: LD_INT 3
20971: PUSH
20972: FOR_TO
20973: IFFALSE 20999
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
20975: LD_VAR 0 2
20979: PPUSH
20980: CALL_OW 274
20984: PPUSH
20985: LD_VAR 0 3
20989: PPUSH
20990: LD_INT 99999
20992: PPUSH
20993: CALL_OW 277
20997: GO 20972
20999: POP
21000: POP
21001: GO 20956
21003: POP
21004: POP
// end ;
21005: LD_VAR 0 1
21009: RET
// export function hHackSetLevel10 ; var i , j ; begin
21010: LD_INT 0
21012: PPUSH
21013: PPUSH
21014: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
21015: LD_ADDR_VAR 0 2
21019: PUSH
21020: LD_INT 21
21022: PUSH
21023: LD_INT 1
21025: PUSH
21026: EMPTY
21027: LIST
21028: LIST
21029: PPUSH
21030: CALL_OW 69
21034: PUSH
21035: FOR_IN
21036: IFFALSE 21088
// if IsSelected ( i ) then
21038: LD_VAR 0 2
21042: PPUSH
21043: CALL_OW 306
21047: IFFALSE 21086
// begin for j := 1 to 4 do
21049: LD_ADDR_VAR 0 3
21053: PUSH
21054: DOUBLE
21055: LD_INT 1
21057: DEC
21058: ST_TO_ADDR
21059: LD_INT 4
21061: PUSH
21062: FOR_TO
21063: IFFALSE 21084
// SetSkill ( i , j , 10 ) ;
21065: LD_VAR 0 2
21069: PPUSH
21070: LD_VAR 0 3
21074: PPUSH
21075: LD_INT 10
21077: PPUSH
21078: CALL_OW 237
21082: GO 21062
21084: POP
21085: POP
// end ;
21086: GO 21035
21088: POP
21089: POP
// end ;
21090: LD_VAR 0 1
21094: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
21095: LD_INT 0
21097: PPUSH
21098: PPUSH
21099: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
21100: LD_ADDR_VAR 0 2
21104: PUSH
21105: LD_INT 22
21107: PUSH
21108: LD_OWVAR 2
21112: PUSH
21113: EMPTY
21114: LIST
21115: LIST
21116: PUSH
21117: LD_INT 21
21119: PUSH
21120: LD_INT 1
21122: PUSH
21123: EMPTY
21124: LIST
21125: LIST
21126: PUSH
21127: EMPTY
21128: LIST
21129: LIST
21130: PPUSH
21131: CALL_OW 69
21135: PUSH
21136: FOR_IN
21137: IFFALSE 21178
// begin for j := 1 to 4 do
21139: LD_ADDR_VAR 0 3
21143: PUSH
21144: DOUBLE
21145: LD_INT 1
21147: DEC
21148: ST_TO_ADDR
21149: LD_INT 4
21151: PUSH
21152: FOR_TO
21153: IFFALSE 21174
// SetSkill ( i , j , 10 ) ;
21155: LD_VAR 0 2
21159: PPUSH
21160: LD_VAR 0 3
21164: PPUSH
21165: LD_INT 10
21167: PPUSH
21168: CALL_OW 237
21172: GO 21152
21174: POP
21175: POP
// end ;
21176: GO 21136
21178: POP
21179: POP
// end ;
21180: LD_VAR 0 1
21184: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
21185: LD_INT 0
21187: PPUSH
// uc_side := your_side ;
21188: LD_ADDR_OWVAR 20
21192: PUSH
21193: LD_OWVAR 2
21197: ST_TO_ADDR
// uc_nation := nation ;
21198: LD_ADDR_OWVAR 21
21202: PUSH
21203: LD_VAR 0 1
21207: ST_TO_ADDR
// InitHc ;
21208: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
21212: LD_INT 0
21214: PPUSH
21215: LD_VAR 0 2
21219: PPUSH
21220: LD_VAR 0 3
21224: PPUSH
21225: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
21229: LD_VAR 0 4
21233: PPUSH
21234: LD_VAR 0 5
21238: PPUSH
21239: CALL_OW 428
21243: PUSH
21244: LD_INT 0
21246: EQUAL
21247: IFFALSE 21271
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
21249: CALL_OW 44
21253: PPUSH
21254: LD_VAR 0 4
21258: PPUSH
21259: LD_VAR 0 5
21263: PPUSH
21264: LD_INT 1
21266: PPUSH
21267: CALL_OW 48
// end ;
21271: LD_VAR 0 6
21275: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
21276: LD_INT 0
21278: PPUSH
21279: PPUSH
// uc_side := your_side ;
21280: LD_ADDR_OWVAR 20
21284: PUSH
21285: LD_OWVAR 2
21289: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
21290: LD_VAR 0 1
21294: PUSH
21295: LD_INT 1
21297: PUSH
21298: LD_INT 2
21300: PUSH
21301: LD_INT 3
21303: PUSH
21304: LD_INT 4
21306: PUSH
21307: LD_INT 5
21309: PUSH
21310: EMPTY
21311: LIST
21312: LIST
21313: LIST
21314: LIST
21315: LIST
21316: IN
21317: IFFALSE 21329
// uc_nation := nation_american else
21319: LD_ADDR_OWVAR 21
21323: PUSH
21324: LD_INT 1
21326: ST_TO_ADDR
21327: GO 21372
// if chassis in [ 11 , 12 , 13 , 14 ] then
21329: LD_VAR 0 1
21333: PUSH
21334: LD_INT 11
21336: PUSH
21337: LD_INT 12
21339: PUSH
21340: LD_INT 13
21342: PUSH
21343: LD_INT 14
21345: PUSH
21346: EMPTY
21347: LIST
21348: LIST
21349: LIST
21350: LIST
21351: IN
21352: IFFALSE 21364
// uc_nation := nation_arabian else
21354: LD_ADDR_OWVAR 21
21358: PUSH
21359: LD_INT 2
21361: ST_TO_ADDR
21362: GO 21372
// uc_nation := nation_russian ;
21364: LD_ADDR_OWVAR 21
21368: PUSH
21369: LD_INT 3
21371: ST_TO_ADDR
// vc_chassis := chassis ;
21372: LD_ADDR_OWVAR 37
21376: PUSH
21377: LD_VAR 0 1
21381: ST_TO_ADDR
// vc_engine := engine ;
21382: LD_ADDR_OWVAR 39
21386: PUSH
21387: LD_VAR 0 2
21391: ST_TO_ADDR
// vc_control := control ;
21392: LD_ADDR_OWVAR 38
21396: PUSH
21397: LD_VAR 0 3
21401: ST_TO_ADDR
// vc_weapon := weapon ;
21402: LD_ADDR_OWVAR 40
21406: PUSH
21407: LD_VAR 0 4
21411: ST_TO_ADDR
// un := CreateVehicle ;
21412: LD_ADDR_VAR 0 8
21416: PUSH
21417: CALL_OW 45
21421: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
21422: LD_VAR 0 8
21426: PPUSH
21427: LD_INT 0
21429: PPUSH
21430: LD_INT 5
21432: PPUSH
21433: CALL_OW 12
21437: PPUSH
21438: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
21442: LD_VAR 0 8
21446: PPUSH
21447: LD_VAR 0 5
21451: PPUSH
21452: LD_VAR 0 6
21456: PPUSH
21457: LD_INT 1
21459: PPUSH
21460: CALL_OW 48
// end ;
21464: LD_VAR 0 7
21468: RET
// export hInvincible ; every 1 do
21469: GO 21471
21471: DISABLE
// hInvincible := [ ] ;
21472: LD_ADDR_EXP 122
21476: PUSH
21477: EMPTY
21478: ST_TO_ADDR
21479: END
// every 10 do var i ;
21480: GO 21482
21482: DISABLE
21483: LD_INT 0
21485: PPUSH
// begin enable ;
21486: ENABLE
// if not hInvincible then
21487: LD_EXP 122
21491: NOT
21492: IFFALSE 21496
// exit ;
21494: GO 21540
// for i in hInvincible do
21496: LD_ADDR_VAR 0 1
21500: PUSH
21501: LD_EXP 122
21505: PUSH
21506: FOR_IN
21507: IFFALSE 21538
// if GetLives ( i ) < 1000 then
21509: LD_VAR 0 1
21513: PPUSH
21514: CALL_OW 256
21518: PUSH
21519: LD_INT 1000
21521: LESS
21522: IFFALSE 21536
// SetLives ( i , 1000 ) ;
21524: LD_VAR 0 1
21528: PPUSH
21529: LD_INT 1000
21531: PPUSH
21532: CALL_OW 234
21536: GO 21506
21538: POP
21539: POP
// end ;
21540: PPOPN 1
21542: END
// export function hHackInvincible ; var i ; begin
21543: LD_INT 0
21545: PPUSH
21546: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
21547: LD_ADDR_VAR 0 2
21551: PUSH
21552: LD_INT 2
21554: PUSH
21555: LD_INT 21
21557: PUSH
21558: LD_INT 1
21560: PUSH
21561: EMPTY
21562: LIST
21563: LIST
21564: PUSH
21565: LD_INT 21
21567: PUSH
21568: LD_INT 2
21570: PUSH
21571: EMPTY
21572: LIST
21573: LIST
21574: PUSH
21575: EMPTY
21576: LIST
21577: LIST
21578: LIST
21579: PPUSH
21580: CALL_OW 69
21584: PUSH
21585: FOR_IN
21586: IFFALSE 21647
// if IsSelected ( i ) then
21588: LD_VAR 0 2
21592: PPUSH
21593: CALL_OW 306
21597: IFFALSE 21645
// begin if i in hInvincible then
21599: LD_VAR 0 2
21603: PUSH
21604: LD_EXP 122
21608: IN
21609: IFFALSE 21629
// hInvincible := hInvincible diff i else
21611: LD_ADDR_EXP 122
21615: PUSH
21616: LD_EXP 122
21620: PUSH
21621: LD_VAR 0 2
21625: DIFF
21626: ST_TO_ADDR
21627: GO 21645
// hInvincible := hInvincible union i ;
21629: LD_ADDR_EXP 122
21633: PUSH
21634: LD_EXP 122
21638: PUSH
21639: LD_VAR 0 2
21643: UNION
21644: ST_TO_ADDR
// end ;
21645: GO 21585
21647: POP
21648: POP
// end ;
21649: LD_VAR 0 1
21653: RET
// export function hHackInvisible ; var i , j ; begin
21654: LD_INT 0
21656: PPUSH
21657: PPUSH
21658: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
21659: LD_ADDR_VAR 0 2
21663: PUSH
21664: LD_INT 21
21666: PUSH
21667: LD_INT 1
21669: PUSH
21670: EMPTY
21671: LIST
21672: LIST
21673: PPUSH
21674: CALL_OW 69
21678: PUSH
21679: FOR_IN
21680: IFFALSE 21704
// if IsSelected ( i ) then
21682: LD_VAR 0 2
21686: PPUSH
21687: CALL_OW 306
21691: IFFALSE 21702
// ComForceInvisible ( i ) ;
21693: LD_VAR 0 2
21697: PPUSH
21698: CALL_OW 496
21702: GO 21679
21704: POP
21705: POP
// end ;
21706: LD_VAR 0 1
21710: RET
// export function hHackChangeYourSide ; begin
21711: LD_INT 0
21713: PPUSH
// if your_side = 8 then
21714: LD_OWVAR 2
21718: PUSH
21719: LD_INT 8
21721: EQUAL
21722: IFFALSE 21734
// your_side := 0 else
21724: LD_ADDR_OWVAR 2
21728: PUSH
21729: LD_INT 0
21731: ST_TO_ADDR
21732: GO 21748
// your_side := your_side + 1 ;
21734: LD_ADDR_OWVAR 2
21738: PUSH
21739: LD_OWVAR 2
21743: PUSH
21744: LD_INT 1
21746: PLUS
21747: ST_TO_ADDR
// end ;
21748: LD_VAR 0 1
21752: RET
// export function hHackChangeUnitSide ; var i , j ; begin
21753: LD_INT 0
21755: PPUSH
21756: PPUSH
21757: PPUSH
// for i in all_units do
21758: LD_ADDR_VAR 0 2
21762: PUSH
21763: LD_OWVAR 3
21767: PUSH
21768: FOR_IN
21769: IFFALSE 21847
// if IsSelected ( i ) then
21771: LD_VAR 0 2
21775: PPUSH
21776: CALL_OW 306
21780: IFFALSE 21845
// begin j := GetSide ( i ) ;
21782: LD_ADDR_VAR 0 3
21786: PUSH
21787: LD_VAR 0 2
21791: PPUSH
21792: CALL_OW 255
21796: ST_TO_ADDR
// if j = 8 then
21797: LD_VAR 0 3
21801: PUSH
21802: LD_INT 8
21804: EQUAL
21805: IFFALSE 21817
// j := 0 else
21807: LD_ADDR_VAR 0 3
21811: PUSH
21812: LD_INT 0
21814: ST_TO_ADDR
21815: GO 21831
// j := j + 1 ;
21817: LD_ADDR_VAR 0 3
21821: PUSH
21822: LD_VAR 0 3
21826: PUSH
21827: LD_INT 1
21829: PLUS
21830: ST_TO_ADDR
// SetSide ( i , j ) ;
21831: LD_VAR 0 2
21835: PPUSH
21836: LD_VAR 0 3
21840: PPUSH
21841: CALL_OW 235
// end ;
21845: GO 21768
21847: POP
21848: POP
// end ;
21849: LD_VAR 0 1
21853: RET
// export function hHackFog ; begin
21854: LD_INT 0
21856: PPUSH
// FogOff ( true ) ;
21857: LD_INT 1
21859: PPUSH
21860: CALL_OW 344
// end ;
21864: LD_VAR 0 1
21868: RET
// export function hHackTeleport ( unit , x , y ) ; begin
21869: LD_INT 0
21871: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
21872: LD_VAR 0 1
21876: PPUSH
21877: LD_VAR 0 2
21881: PPUSH
21882: LD_VAR 0 3
21886: PPUSH
21887: LD_INT 1
21889: PPUSH
21890: LD_INT 1
21892: PPUSH
21893: CALL_OW 483
// CenterOnXY ( x , y ) ;
21897: LD_VAR 0 2
21901: PPUSH
21902: LD_VAR 0 3
21906: PPUSH
21907: CALL_OW 84
// end ; end_of_file
21911: LD_VAR 0 4
21915: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
21916: LD_INT 0
21918: PPUSH
21919: PPUSH
21920: PPUSH
21921: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
21922: LD_VAR 0 1
21926: PPUSH
21927: CALL_OW 264
21931: PUSH
21932: LD_EXP 56
21936: EQUAL
21937: IFFALSE 22009
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
21939: LD_INT 68
21941: PPUSH
21942: LD_VAR 0 1
21946: PPUSH
21947: CALL_OW 255
21951: PPUSH
21952: CALL_OW 321
21956: PUSH
21957: LD_INT 2
21959: EQUAL
21960: IFFALSE 21972
// eff := 70 else
21962: LD_ADDR_VAR 0 4
21966: PUSH
21967: LD_INT 70
21969: ST_TO_ADDR
21970: GO 21980
// eff := 30 ;
21972: LD_ADDR_VAR 0 4
21976: PUSH
21977: LD_INT 30
21979: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
21980: LD_VAR 0 1
21984: PPUSH
21985: CALL_OW 250
21989: PPUSH
21990: LD_VAR 0 1
21994: PPUSH
21995: CALL_OW 251
21999: PPUSH
22000: LD_VAR 0 4
22004: PPUSH
22005: CALL_OW 495
// end ; end ;
22009: LD_VAR 0 2
22013: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
22014: LD_INT 0
22016: PPUSH
// end ;
22017: LD_VAR 0 4
22021: RET
// export function SOS_Command ( cmd ) ; begin
22022: LD_INT 0
22024: PPUSH
// end ;
22025: LD_VAR 0 2
22029: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
22030: LD_INT 0
22032: PPUSH
// if cmd = 121 then
22033: LD_VAR 0 1
22037: PUSH
22038: LD_INT 121
22040: EQUAL
22041: IFFALSE 22043
// end ;
22043: LD_VAR 0 6
22047: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
22048: LD_INT 0
22050: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
22051: LD_VAR 0 1
22055: PUSH
22056: LD_INT 250
22058: EQUAL
22059: PUSH
22060: LD_VAR 0 2
22064: PPUSH
22065: CALL_OW 264
22069: PUSH
22070: LD_EXP 59
22074: EQUAL
22075: AND
22076: IFFALSE 22097
// MinerPlaceMine ( unit , x , y ) ;
22078: LD_VAR 0 2
22082: PPUSH
22083: LD_VAR 0 4
22087: PPUSH
22088: LD_VAR 0 5
22092: PPUSH
22093: CALL 24446 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
22097: LD_VAR 0 1
22101: PUSH
22102: LD_INT 251
22104: EQUAL
22105: PUSH
22106: LD_VAR 0 2
22110: PPUSH
22111: CALL_OW 264
22115: PUSH
22116: LD_EXP 59
22120: EQUAL
22121: AND
22122: IFFALSE 22143
// MinerDetonateMine ( unit , x , y ) ;
22124: LD_VAR 0 2
22128: PPUSH
22129: LD_VAR 0 4
22133: PPUSH
22134: LD_VAR 0 5
22138: PPUSH
22139: CALL 24723 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
22143: LD_VAR 0 1
22147: PUSH
22148: LD_INT 252
22150: EQUAL
22151: PUSH
22152: LD_VAR 0 2
22156: PPUSH
22157: CALL_OW 264
22161: PUSH
22162: LD_EXP 59
22166: EQUAL
22167: AND
22168: IFFALSE 22189
// MinerCreateMinefield ( unit , x , y ) ;
22170: LD_VAR 0 2
22174: PPUSH
22175: LD_VAR 0 4
22179: PPUSH
22180: LD_VAR 0 5
22184: PPUSH
22185: CALL 25140 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
22189: LD_VAR 0 1
22193: PUSH
22194: LD_INT 253
22196: EQUAL
22197: PUSH
22198: LD_VAR 0 2
22202: PPUSH
22203: CALL_OW 257
22207: PUSH
22208: LD_INT 5
22210: EQUAL
22211: AND
22212: IFFALSE 22233
// ComBinocular ( unit , x , y ) ;
22214: LD_VAR 0 2
22218: PPUSH
22219: LD_VAR 0 4
22223: PPUSH
22224: LD_VAR 0 5
22228: PPUSH
22229: CALL 25511 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
22233: LD_VAR 0 1
22237: PUSH
22238: LD_INT 254
22240: EQUAL
22241: PUSH
22242: LD_VAR 0 2
22246: PPUSH
22247: CALL_OW 264
22251: PUSH
22252: LD_EXP 54
22256: EQUAL
22257: AND
22258: PUSH
22259: LD_VAR 0 3
22263: PPUSH
22264: CALL_OW 263
22268: PUSH
22269: LD_INT 3
22271: EQUAL
22272: AND
22273: IFFALSE 22289
// HackDestroyVehicle ( unit , selectedUnit ) ;
22275: LD_VAR 0 2
22279: PPUSH
22280: LD_VAR 0 3
22284: PPUSH
22285: CALL 23806 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
22289: LD_VAR 0 1
22293: PUSH
22294: LD_INT 255
22296: EQUAL
22297: PUSH
22298: LD_VAR 0 2
22302: PPUSH
22303: CALL_OW 264
22307: PUSH
22308: LD_INT 14
22310: PUSH
22311: LD_INT 53
22313: PUSH
22314: EMPTY
22315: LIST
22316: LIST
22317: IN
22318: AND
22319: PUSH
22320: LD_VAR 0 4
22324: PPUSH
22325: LD_VAR 0 5
22329: PPUSH
22330: CALL_OW 488
22334: AND
22335: IFFALSE 22359
// CutTreeXYR ( unit , x , y , 12 ) ;
22337: LD_VAR 0 2
22341: PPUSH
22342: LD_VAR 0 4
22346: PPUSH
22347: LD_VAR 0 5
22351: PPUSH
22352: LD_INT 12
22354: PPUSH
22355: CALL 22372 0 4
// end ;
22359: LD_VAR 0 6
22363: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
22364: LD_INT 0
22366: PPUSH
// end ;
22367: LD_VAR 0 4
22371: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
22372: LD_INT 0
22374: PPUSH
22375: PPUSH
22376: PPUSH
22377: PPUSH
22378: PPUSH
22379: PPUSH
22380: PPUSH
22381: PPUSH
22382: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
22383: LD_VAR 0 1
22387: NOT
22388: PUSH
22389: LD_VAR 0 2
22393: PPUSH
22394: LD_VAR 0 3
22398: PPUSH
22399: CALL_OW 488
22403: NOT
22404: OR
22405: PUSH
22406: LD_VAR 0 4
22410: NOT
22411: OR
22412: IFFALSE 22416
// exit ;
22414: GO 22756
// list := [ ] ;
22416: LD_ADDR_VAR 0 13
22420: PUSH
22421: EMPTY
22422: ST_TO_ADDR
// if x - r < 0 then
22423: LD_VAR 0 2
22427: PUSH
22428: LD_VAR 0 4
22432: MINUS
22433: PUSH
22434: LD_INT 0
22436: LESS
22437: IFFALSE 22449
// min_x := 0 else
22439: LD_ADDR_VAR 0 7
22443: PUSH
22444: LD_INT 0
22446: ST_TO_ADDR
22447: GO 22465
// min_x := x - r ;
22449: LD_ADDR_VAR 0 7
22453: PUSH
22454: LD_VAR 0 2
22458: PUSH
22459: LD_VAR 0 4
22463: MINUS
22464: ST_TO_ADDR
// if y - r < 0 then
22465: LD_VAR 0 3
22469: PUSH
22470: LD_VAR 0 4
22474: MINUS
22475: PUSH
22476: LD_INT 0
22478: LESS
22479: IFFALSE 22491
// min_y := 0 else
22481: LD_ADDR_VAR 0 8
22485: PUSH
22486: LD_INT 0
22488: ST_TO_ADDR
22489: GO 22507
// min_y := y - r ;
22491: LD_ADDR_VAR 0 8
22495: PUSH
22496: LD_VAR 0 3
22500: PUSH
22501: LD_VAR 0 4
22505: MINUS
22506: ST_TO_ADDR
// max_x := x + r ;
22507: LD_ADDR_VAR 0 9
22511: PUSH
22512: LD_VAR 0 2
22516: PUSH
22517: LD_VAR 0 4
22521: PLUS
22522: ST_TO_ADDR
// max_y := y + r ;
22523: LD_ADDR_VAR 0 10
22527: PUSH
22528: LD_VAR 0 3
22532: PUSH
22533: LD_VAR 0 4
22537: PLUS
22538: ST_TO_ADDR
// for _x = min_x to max_x do
22539: LD_ADDR_VAR 0 11
22543: PUSH
22544: DOUBLE
22545: LD_VAR 0 7
22549: DEC
22550: ST_TO_ADDR
22551: LD_VAR 0 9
22555: PUSH
22556: FOR_TO
22557: IFFALSE 22674
// for _y = min_y to max_y do
22559: LD_ADDR_VAR 0 12
22563: PUSH
22564: DOUBLE
22565: LD_VAR 0 8
22569: DEC
22570: ST_TO_ADDR
22571: LD_VAR 0 10
22575: PUSH
22576: FOR_TO
22577: IFFALSE 22670
// begin if not ValidHex ( _x , _y ) then
22579: LD_VAR 0 11
22583: PPUSH
22584: LD_VAR 0 12
22588: PPUSH
22589: CALL_OW 488
22593: NOT
22594: IFFALSE 22598
// continue ;
22596: GO 22576
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
22598: LD_VAR 0 11
22602: PPUSH
22603: LD_VAR 0 12
22607: PPUSH
22608: CALL_OW 351
22612: PUSH
22613: LD_VAR 0 11
22617: PPUSH
22618: LD_VAR 0 12
22622: PPUSH
22623: CALL_OW 554
22627: AND
22628: IFFALSE 22668
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
22630: LD_ADDR_VAR 0 13
22634: PUSH
22635: LD_VAR 0 13
22639: PPUSH
22640: LD_VAR 0 13
22644: PUSH
22645: LD_INT 1
22647: PLUS
22648: PPUSH
22649: LD_VAR 0 11
22653: PUSH
22654: LD_VAR 0 12
22658: PUSH
22659: EMPTY
22660: LIST
22661: LIST
22662: PPUSH
22663: CALL_OW 2
22667: ST_TO_ADDR
// end ;
22668: GO 22576
22670: POP
22671: POP
22672: GO 22556
22674: POP
22675: POP
// if not list then
22676: LD_VAR 0 13
22680: NOT
22681: IFFALSE 22685
// exit ;
22683: GO 22756
// for i in list do
22685: LD_ADDR_VAR 0 6
22689: PUSH
22690: LD_VAR 0 13
22694: PUSH
22695: FOR_IN
22696: IFFALSE 22754
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
22698: LD_VAR 0 1
22702: PPUSH
22703: LD_STRING M
22705: PUSH
22706: LD_VAR 0 6
22710: PUSH
22711: LD_INT 1
22713: ARRAY
22714: PUSH
22715: LD_VAR 0 6
22719: PUSH
22720: LD_INT 2
22722: ARRAY
22723: PUSH
22724: LD_INT 0
22726: PUSH
22727: LD_INT 0
22729: PUSH
22730: LD_INT 0
22732: PUSH
22733: LD_INT 0
22735: PUSH
22736: EMPTY
22737: LIST
22738: LIST
22739: LIST
22740: LIST
22741: LIST
22742: LIST
22743: LIST
22744: PUSH
22745: EMPTY
22746: LIST
22747: PPUSH
22748: CALL_OW 447
22752: GO 22695
22754: POP
22755: POP
// end ;
22756: LD_VAR 0 5
22760: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
22761: LD_EXP 125
22765: NOT
22766: IFFALSE 22816
22768: GO 22770
22770: DISABLE
// begin initHack := true ;
22771: LD_ADDR_EXP 125
22775: PUSH
22776: LD_INT 1
22778: ST_TO_ADDR
// hackTanks := [ ] ;
22779: LD_ADDR_EXP 126
22783: PUSH
22784: EMPTY
22785: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
22786: LD_ADDR_EXP 127
22790: PUSH
22791: EMPTY
22792: ST_TO_ADDR
// hackLimit := 3 ;
22793: LD_ADDR_EXP 128
22797: PUSH
22798: LD_INT 3
22800: ST_TO_ADDR
// hackDist := 12 ;
22801: LD_ADDR_EXP 129
22805: PUSH
22806: LD_INT 12
22808: ST_TO_ADDR
// hackCounter := [ ] ;
22809: LD_ADDR_EXP 130
22813: PUSH
22814: EMPTY
22815: ST_TO_ADDR
// end ;
22816: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
22817: LD_EXP 125
22821: PUSH
22822: LD_INT 34
22824: PUSH
22825: LD_EXP 54
22829: PUSH
22830: EMPTY
22831: LIST
22832: LIST
22833: PPUSH
22834: CALL_OW 69
22838: AND
22839: IFFALSE 23094
22841: GO 22843
22843: DISABLE
22844: LD_INT 0
22846: PPUSH
22847: PPUSH
// begin enable ;
22848: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
22849: LD_ADDR_VAR 0 1
22853: PUSH
22854: LD_INT 34
22856: PUSH
22857: LD_EXP 54
22861: PUSH
22862: EMPTY
22863: LIST
22864: LIST
22865: PPUSH
22866: CALL_OW 69
22870: PUSH
22871: FOR_IN
22872: IFFALSE 23092
// begin if not i in hackTanks then
22874: LD_VAR 0 1
22878: PUSH
22879: LD_EXP 126
22883: IN
22884: NOT
22885: IFFALSE 22968
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
22887: LD_ADDR_EXP 126
22891: PUSH
22892: LD_EXP 126
22896: PPUSH
22897: LD_EXP 126
22901: PUSH
22902: LD_INT 1
22904: PLUS
22905: PPUSH
22906: LD_VAR 0 1
22910: PPUSH
22911: CALL_OW 1
22915: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
22916: LD_ADDR_EXP 127
22920: PUSH
22921: LD_EXP 127
22925: PPUSH
22926: LD_EXP 127
22930: PUSH
22931: LD_INT 1
22933: PLUS
22934: PPUSH
22935: EMPTY
22936: PPUSH
22937: CALL_OW 1
22941: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
22942: LD_ADDR_EXP 130
22946: PUSH
22947: LD_EXP 130
22951: PPUSH
22952: LD_EXP 130
22956: PUSH
22957: LD_INT 1
22959: PLUS
22960: PPUSH
22961: EMPTY
22962: PPUSH
22963: CALL_OW 1
22967: ST_TO_ADDR
// end ; if not IsOk ( i ) then
22968: LD_VAR 0 1
22972: PPUSH
22973: CALL_OW 302
22977: NOT
22978: IFFALSE 22991
// begin HackUnlinkAll ( i ) ;
22980: LD_VAR 0 1
22984: PPUSH
22985: CALL 23097 0 1
// continue ;
22989: GO 22871
// end ; HackCheckCapturedStatus ( i ) ;
22991: LD_VAR 0 1
22995: PPUSH
22996: CALL 23540 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
23000: LD_ADDR_VAR 0 2
23004: PUSH
23005: LD_INT 81
23007: PUSH
23008: LD_VAR 0 1
23012: PPUSH
23013: CALL_OW 255
23017: PUSH
23018: EMPTY
23019: LIST
23020: LIST
23021: PUSH
23022: LD_INT 33
23024: PUSH
23025: LD_INT 3
23027: PUSH
23028: EMPTY
23029: LIST
23030: LIST
23031: PUSH
23032: LD_INT 91
23034: PUSH
23035: LD_VAR 0 1
23039: PUSH
23040: LD_EXP 129
23044: PUSH
23045: EMPTY
23046: LIST
23047: LIST
23048: LIST
23049: PUSH
23050: LD_INT 50
23052: PUSH
23053: EMPTY
23054: LIST
23055: PUSH
23056: EMPTY
23057: LIST
23058: LIST
23059: LIST
23060: LIST
23061: PPUSH
23062: CALL_OW 69
23066: ST_TO_ADDR
// if not tmp then
23067: LD_VAR 0 2
23071: NOT
23072: IFFALSE 23076
// continue ;
23074: GO 22871
// HackLink ( i , tmp ) ;
23076: LD_VAR 0 1
23080: PPUSH
23081: LD_VAR 0 2
23085: PPUSH
23086: CALL 23233 0 2
// end ;
23090: GO 22871
23092: POP
23093: POP
// end ;
23094: PPOPN 2
23096: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
23097: LD_INT 0
23099: PPUSH
23100: PPUSH
23101: PPUSH
// if not hack in hackTanks then
23102: LD_VAR 0 1
23106: PUSH
23107: LD_EXP 126
23111: IN
23112: NOT
23113: IFFALSE 23117
// exit ;
23115: GO 23228
// index := GetElementIndex ( hackTanks , hack ) ;
23117: LD_ADDR_VAR 0 4
23121: PUSH
23122: LD_EXP 126
23126: PPUSH
23127: LD_VAR 0 1
23131: PPUSH
23132: CALL 30662 0 2
23136: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
23137: LD_EXP 127
23141: PUSH
23142: LD_VAR 0 4
23146: ARRAY
23147: IFFALSE 23228
// begin for i in hackTanksCaptured [ index ] do
23149: LD_ADDR_VAR 0 3
23153: PUSH
23154: LD_EXP 127
23158: PUSH
23159: LD_VAR 0 4
23163: ARRAY
23164: PUSH
23165: FOR_IN
23166: IFFALSE 23192
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
23168: LD_VAR 0 3
23172: PUSH
23173: LD_INT 1
23175: ARRAY
23176: PPUSH
23177: LD_VAR 0 3
23181: PUSH
23182: LD_INT 2
23184: ARRAY
23185: PPUSH
23186: CALL_OW 235
23190: GO 23165
23192: POP
23193: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
23194: LD_ADDR_EXP 127
23198: PUSH
23199: LD_EXP 127
23203: PPUSH
23204: LD_VAR 0 4
23208: PPUSH
23209: EMPTY
23210: PPUSH
23211: CALL_OW 1
23215: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
23216: LD_VAR 0 1
23220: PPUSH
23221: LD_INT 0
23223: PPUSH
23224: CALL_OW 505
// end ; end ;
23228: LD_VAR 0 2
23232: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
23233: LD_INT 0
23235: PPUSH
23236: PPUSH
23237: PPUSH
// if not hack in hackTanks or not vehicles then
23238: LD_VAR 0 1
23242: PUSH
23243: LD_EXP 126
23247: IN
23248: NOT
23249: PUSH
23250: LD_VAR 0 2
23254: NOT
23255: OR
23256: IFFALSE 23260
// exit ;
23258: GO 23535
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
23260: LD_ADDR_VAR 0 2
23264: PUSH
23265: LD_VAR 0 1
23269: PPUSH
23270: LD_VAR 0 2
23274: PPUSH
23275: LD_INT 1
23277: PPUSH
23278: LD_INT 1
23280: PPUSH
23281: CALL 31312 0 4
23285: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
23286: LD_ADDR_VAR 0 5
23290: PUSH
23291: LD_EXP 126
23295: PPUSH
23296: LD_VAR 0 1
23300: PPUSH
23301: CALL 30662 0 2
23305: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
23306: LD_EXP 127
23310: PUSH
23311: LD_VAR 0 5
23315: ARRAY
23316: PUSH
23317: LD_EXP 128
23321: LESS
23322: IFFALSE 23511
// begin for i := 1 to vehicles do
23324: LD_ADDR_VAR 0 4
23328: PUSH
23329: DOUBLE
23330: LD_INT 1
23332: DEC
23333: ST_TO_ADDR
23334: LD_VAR 0 2
23338: PUSH
23339: FOR_TO
23340: IFFALSE 23509
// begin if hackTanksCaptured [ index ] = hackLimit then
23342: LD_EXP 127
23346: PUSH
23347: LD_VAR 0 5
23351: ARRAY
23352: PUSH
23353: LD_EXP 128
23357: EQUAL
23358: IFFALSE 23362
// break ;
23360: GO 23509
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
23362: LD_ADDR_EXP 130
23366: PUSH
23367: LD_EXP 130
23371: PPUSH
23372: LD_VAR 0 5
23376: PPUSH
23377: LD_EXP 130
23381: PUSH
23382: LD_VAR 0 5
23386: ARRAY
23387: PUSH
23388: LD_INT 1
23390: PLUS
23391: PPUSH
23392: CALL_OW 1
23396: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
23397: LD_ADDR_EXP 127
23401: PUSH
23402: LD_EXP 127
23406: PPUSH
23407: LD_VAR 0 5
23411: PUSH
23412: LD_EXP 127
23416: PUSH
23417: LD_VAR 0 5
23421: ARRAY
23422: PUSH
23423: LD_INT 1
23425: PLUS
23426: PUSH
23427: EMPTY
23428: LIST
23429: LIST
23430: PPUSH
23431: LD_VAR 0 2
23435: PUSH
23436: LD_VAR 0 4
23440: ARRAY
23441: PUSH
23442: LD_VAR 0 2
23446: PUSH
23447: LD_VAR 0 4
23451: ARRAY
23452: PPUSH
23453: CALL_OW 255
23457: PUSH
23458: EMPTY
23459: LIST
23460: LIST
23461: PPUSH
23462: CALL 30877 0 3
23466: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
23467: LD_VAR 0 2
23471: PUSH
23472: LD_VAR 0 4
23476: ARRAY
23477: PPUSH
23478: LD_VAR 0 1
23482: PPUSH
23483: CALL_OW 255
23487: PPUSH
23488: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
23492: LD_VAR 0 2
23496: PUSH
23497: LD_VAR 0 4
23501: ARRAY
23502: PPUSH
23503: CALL_OW 141
// end ;
23507: GO 23339
23509: POP
23510: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
23511: LD_VAR 0 1
23515: PPUSH
23516: LD_EXP 127
23520: PUSH
23521: LD_VAR 0 5
23525: ARRAY
23526: PUSH
23527: LD_INT 0
23529: PLUS
23530: PPUSH
23531: CALL_OW 505
// end ;
23535: LD_VAR 0 3
23539: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
23540: LD_INT 0
23542: PPUSH
23543: PPUSH
23544: PPUSH
23545: PPUSH
// if not hack in hackTanks then
23546: LD_VAR 0 1
23550: PUSH
23551: LD_EXP 126
23555: IN
23556: NOT
23557: IFFALSE 23561
// exit ;
23559: GO 23801
// index := GetElementIndex ( hackTanks , hack ) ;
23561: LD_ADDR_VAR 0 4
23565: PUSH
23566: LD_EXP 126
23570: PPUSH
23571: LD_VAR 0 1
23575: PPUSH
23576: CALL 30662 0 2
23580: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
23581: LD_ADDR_VAR 0 3
23585: PUSH
23586: DOUBLE
23587: LD_EXP 127
23591: PUSH
23592: LD_VAR 0 4
23596: ARRAY
23597: INC
23598: ST_TO_ADDR
23599: LD_INT 1
23601: PUSH
23602: FOR_DOWNTO
23603: IFFALSE 23775
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
23605: LD_ADDR_VAR 0 5
23609: PUSH
23610: LD_EXP 127
23614: PUSH
23615: LD_VAR 0 4
23619: ARRAY
23620: PUSH
23621: LD_VAR 0 3
23625: ARRAY
23626: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
23627: LD_VAR 0 5
23631: PUSH
23632: LD_INT 1
23634: ARRAY
23635: PPUSH
23636: CALL_OW 302
23640: NOT
23641: PUSH
23642: LD_VAR 0 5
23646: PUSH
23647: LD_INT 1
23649: ARRAY
23650: PPUSH
23651: CALL_OW 255
23655: PUSH
23656: LD_VAR 0 1
23660: PPUSH
23661: CALL_OW 255
23665: NONEQUAL
23666: OR
23667: IFFALSE 23773
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
23669: LD_VAR 0 5
23673: PUSH
23674: LD_INT 1
23676: ARRAY
23677: PPUSH
23678: CALL_OW 305
23682: PUSH
23683: LD_VAR 0 5
23687: PUSH
23688: LD_INT 1
23690: ARRAY
23691: PPUSH
23692: CALL_OW 255
23696: PUSH
23697: LD_VAR 0 1
23701: PPUSH
23702: CALL_OW 255
23706: EQUAL
23707: AND
23708: IFFALSE 23732
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
23710: LD_VAR 0 5
23714: PUSH
23715: LD_INT 1
23717: ARRAY
23718: PPUSH
23719: LD_VAR 0 5
23723: PUSH
23724: LD_INT 2
23726: ARRAY
23727: PPUSH
23728: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
23732: LD_ADDR_EXP 127
23736: PUSH
23737: LD_EXP 127
23741: PPUSH
23742: LD_VAR 0 4
23746: PPUSH
23747: LD_EXP 127
23751: PUSH
23752: LD_VAR 0 4
23756: ARRAY
23757: PPUSH
23758: LD_VAR 0 3
23762: PPUSH
23763: CALL_OW 3
23767: PPUSH
23768: CALL_OW 1
23772: ST_TO_ADDR
// end ; end ;
23773: GO 23602
23775: POP
23776: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
23777: LD_VAR 0 1
23781: PPUSH
23782: LD_EXP 127
23786: PUSH
23787: LD_VAR 0 4
23791: ARRAY
23792: PUSH
23793: LD_INT 0
23795: PLUS
23796: PPUSH
23797: CALL_OW 505
// end ;
23801: LD_VAR 0 2
23805: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
23806: LD_INT 0
23808: PPUSH
23809: PPUSH
23810: PPUSH
23811: PPUSH
// if not hack in hackTanks then
23812: LD_VAR 0 1
23816: PUSH
23817: LD_EXP 126
23821: IN
23822: NOT
23823: IFFALSE 23827
// exit ;
23825: GO 23912
// index := GetElementIndex ( hackTanks , hack ) ;
23827: LD_ADDR_VAR 0 5
23831: PUSH
23832: LD_EXP 126
23836: PPUSH
23837: LD_VAR 0 1
23841: PPUSH
23842: CALL 30662 0 2
23846: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
23847: LD_ADDR_VAR 0 4
23851: PUSH
23852: DOUBLE
23853: LD_INT 1
23855: DEC
23856: ST_TO_ADDR
23857: LD_EXP 127
23861: PUSH
23862: LD_VAR 0 5
23866: ARRAY
23867: PUSH
23868: FOR_TO
23869: IFFALSE 23910
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
23871: LD_EXP 127
23875: PUSH
23876: LD_VAR 0 5
23880: ARRAY
23881: PUSH
23882: LD_VAR 0 4
23886: ARRAY
23887: PUSH
23888: LD_INT 1
23890: ARRAY
23891: PUSH
23892: LD_VAR 0 2
23896: EQUAL
23897: IFFALSE 23908
// KillUnit ( vehicle ) ;
23899: LD_VAR 0 2
23903: PPUSH
23904: CALL_OW 66
23908: GO 23868
23910: POP
23911: POP
// end ;
23912: LD_VAR 0 3
23916: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
23917: LD_EXP 131
23921: NOT
23922: IFFALSE 23957
23924: GO 23926
23926: DISABLE
// begin initMiner := true ;
23927: LD_ADDR_EXP 131
23931: PUSH
23932: LD_INT 1
23934: ST_TO_ADDR
// minersList := [ ] ;
23935: LD_ADDR_EXP 132
23939: PUSH
23940: EMPTY
23941: ST_TO_ADDR
// minerMinesList := [ ] ;
23942: LD_ADDR_EXP 133
23946: PUSH
23947: EMPTY
23948: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
23949: LD_ADDR_EXP 134
23953: PUSH
23954: LD_INT 5
23956: ST_TO_ADDR
// end ;
23957: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
23958: LD_EXP 131
23962: PUSH
23963: LD_INT 34
23965: PUSH
23966: LD_EXP 59
23970: PUSH
23971: EMPTY
23972: LIST
23973: LIST
23974: PPUSH
23975: CALL_OW 69
23979: AND
23980: IFFALSE 24443
23982: GO 23984
23984: DISABLE
23985: LD_INT 0
23987: PPUSH
23988: PPUSH
23989: PPUSH
23990: PPUSH
// begin enable ;
23991: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
23992: LD_ADDR_VAR 0 1
23996: PUSH
23997: LD_INT 34
23999: PUSH
24000: LD_EXP 59
24004: PUSH
24005: EMPTY
24006: LIST
24007: LIST
24008: PPUSH
24009: CALL_OW 69
24013: PUSH
24014: FOR_IN
24015: IFFALSE 24087
// begin if not i in minersList then
24017: LD_VAR 0 1
24021: PUSH
24022: LD_EXP 132
24026: IN
24027: NOT
24028: IFFALSE 24085
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
24030: LD_ADDR_EXP 132
24034: PUSH
24035: LD_EXP 132
24039: PPUSH
24040: LD_EXP 132
24044: PUSH
24045: LD_INT 1
24047: PLUS
24048: PPUSH
24049: LD_VAR 0 1
24053: PPUSH
24054: CALL_OW 1
24058: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
24059: LD_ADDR_EXP 133
24063: PUSH
24064: LD_EXP 133
24068: PPUSH
24069: LD_EXP 133
24073: PUSH
24074: LD_INT 1
24076: PLUS
24077: PPUSH
24078: EMPTY
24079: PPUSH
24080: CALL_OW 1
24084: ST_TO_ADDR
// end end ;
24085: GO 24014
24087: POP
24088: POP
// for i := minerMinesList downto 1 do
24089: LD_ADDR_VAR 0 1
24093: PUSH
24094: DOUBLE
24095: LD_EXP 133
24099: INC
24100: ST_TO_ADDR
24101: LD_INT 1
24103: PUSH
24104: FOR_DOWNTO
24105: IFFALSE 24441
// begin if IsLive ( minersList [ i ] ) then
24107: LD_EXP 132
24111: PUSH
24112: LD_VAR 0 1
24116: ARRAY
24117: PPUSH
24118: CALL_OW 300
24122: IFFALSE 24150
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
24124: LD_EXP 132
24128: PUSH
24129: LD_VAR 0 1
24133: ARRAY
24134: PPUSH
24135: LD_EXP 133
24139: PUSH
24140: LD_VAR 0 1
24144: ARRAY
24145: PPUSH
24146: CALL_OW 505
// if not minerMinesList [ i ] then
24150: LD_EXP 133
24154: PUSH
24155: LD_VAR 0 1
24159: ARRAY
24160: NOT
24161: IFFALSE 24165
// continue ;
24163: GO 24104
// for j := minerMinesList [ i ] downto 1 do
24165: LD_ADDR_VAR 0 2
24169: PUSH
24170: DOUBLE
24171: LD_EXP 133
24175: PUSH
24176: LD_VAR 0 1
24180: ARRAY
24181: INC
24182: ST_TO_ADDR
24183: LD_INT 1
24185: PUSH
24186: FOR_DOWNTO
24187: IFFALSE 24437
// begin side := GetSide ( minersList [ i ] ) ;
24189: LD_ADDR_VAR 0 3
24193: PUSH
24194: LD_EXP 132
24198: PUSH
24199: LD_VAR 0 1
24203: ARRAY
24204: PPUSH
24205: CALL_OW 255
24209: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
24210: LD_ADDR_VAR 0 4
24214: PUSH
24215: LD_EXP 133
24219: PUSH
24220: LD_VAR 0 1
24224: ARRAY
24225: PUSH
24226: LD_VAR 0 2
24230: ARRAY
24231: PUSH
24232: LD_INT 1
24234: ARRAY
24235: PPUSH
24236: LD_EXP 133
24240: PUSH
24241: LD_VAR 0 1
24245: ARRAY
24246: PUSH
24247: LD_VAR 0 2
24251: ARRAY
24252: PUSH
24253: LD_INT 2
24255: ARRAY
24256: PPUSH
24257: CALL_OW 428
24261: ST_TO_ADDR
// if not tmp then
24262: LD_VAR 0 4
24266: NOT
24267: IFFALSE 24271
// continue ;
24269: GO 24186
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
24271: LD_VAR 0 4
24275: PUSH
24276: LD_INT 81
24278: PUSH
24279: LD_VAR 0 3
24283: PUSH
24284: EMPTY
24285: LIST
24286: LIST
24287: PPUSH
24288: CALL_OW 69
24292: IN
24293: PUSH
24294: LD_EXP 133
24298: PUSH
24299: LD_VAR 0 1
24303: ARRAY
24304: PUSH
24305: LD_VAR 0 2
24309: ARRAY
24310: PUSH
24311: LD_INT 1
24313: ARRAY
24314: PPUSH
24315: LD_EXP 133
24319: PUSH
24320: LD_VAR 0 1
24324: ARRAY
24325: PUSH
24326: LD_VAR 0 2
24330: ARRAY
24331: PUSH
24332: LD_INT 2
24334: ARRAY
24335: PPUSH
24336: CALL_OW 458
24340: AND
24341: IFFALSE 24435
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
24343: LD_EXP 133
24347: PUSH
24348: LD_VAR 0 1
24352: ARRAY
24353: PUSH
24354: LD_VAR 0 2
24358: ARRAY
24359: PUSH
24360: LD_INT 1
24362: ARRAY
24363: PPUSH
24364: LD_EXP 133
24368: PUSH
24369: LD_VAR 0 1
24373: ARRAY
24374: PUSH
24375: LD_VAR 0 2
24379: ARRAY
24380: PUSH
24381: LD_INT 2
24383: ARRAY
24384: PPUSH
24385: LD_VAR 0 3
24389: PPUSH
24390: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
24394: LD_ADDR_EXP 133
24398: PUSH
24399: LD_EXP 133
24403: PPUSH
24404: LD_VAR 0 1
24408: PPUSH
24409: LD_EXP 133
24413: PUSH
24414: LD_VAR 0 1
24418: ARRAY
24419: PPUSH
24420: LD_VAR 0 2
24424: PPUSH
24425: CALL_OW 3
24429: PPUSH
24430: CALL_OW 1
24434: ST_TO_ADDR
// end ; end ;
24435: GO 24186
24437: POP
24438: POP
// end ;
24439: GO 24104
24441: POP
24442: POP
// end ;
24443: PPOPN 4
24445: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
24446: LD_INT 0
24448: PPUSH
24449: PPUSH
// result := false ;
24450: LD_ADDR_VAR 0 4
24454: PUSH
24455: LD_INT 0
24457: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
24458: LD_VAR 0 1
24462: PPUSH
24463: CALL_OW 264
24467: PUSH
24468: LD_EXP 59
24472: EQUAL
24473: NOT
24474: IFFALSE 24478
// exit ;
24476: GO 24718
// index := GetElementIndex ( minersList , unit ) ;
24478: LD_ADDR_VAR 0 5
24482: PUSH
24483: LD_EXP 132
24487: PPUSH
24488: LD_VAR 0 1
24492: PPUSH
24493: CALL 30662 0 2
24497: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
24498: LD_EXP 133
24502: PUSH
24503: LD_VAR 0 5
24507: ARRAY
24508: PUSH
24509: LD_EXP 134
24513: GREATEREQUAL
24514: IFFALSE 24518
// exit ;
24516: GO 24718
// ComMoveXY ( unit , x , y ) ;
24518: LD_VAR 0 1
24522: PPUSH
24523: LD_VAR 0 2
24527: PPUSH
24528: LD_VAR 0 3
24532: PPUSH
24533: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
24537: LD_INT 35
24539: PPUSH
24540: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
24544: LD_VAR 0 1
24548: PPUSH
24549: LD_VAR 0 2
24553: PPUSH
24554: LD_VAR 0 3
24558: PPUSH
24559: CALL 61059 0 3
24563: NOT
24564: PUSH
24565: LD_VAR 0 1
24569: PPUSH
24570: CALL_OW 314
24574: AND
24575: IFFALSE 24579
// exit ;
24577: GO 24718
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
24579: LD_VAR 0 2
24583: PPUSH
24584: LD_VAR 0 3
24588: PPUSH
24589: CALL_OW 428
24593: PUSH
24594: LD_VAR 0 1
24598: EQUAL
24599: PUSH
24600: LD_VAR 0 1
24604: PPUSH
24605: CALL_OW 314
24609: NOT
24610: AND
24611: IFFALSE 24537
// PlaySoundXY ( x , y , PlantMine ) ;
24613: LD_VAR 0 2
24617: PPUSH
24618: LD_VAR 0 3
24622: PPUSH
24623: LD_STRING PlantMine
24625: PPUSH
24626: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
24630: LD_VAR 0 2
24634: PPUSH
24635: LD_VAR 0 3
24639: PPUSH
24640: LD_VAR 0 1
24644: PPUSH
24645: CALL_OW 255
24649: PPUSH
24650: LD_INT 0
24652: PPUSH
24653: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
24657: LD_ADDR_EXP 133
24661: PUSH
24662: LD_EXP 133
24666: PPUSH
24667: LD_VAR 0 5
24671: PUSH
24672: LD_EXP 133
24676: PUSH
24677: LD_VAR 0 5
24681: ARRAY
24682: PUSH
24683: LD_INT 1
24685: PLUS
24686: PUSH
24687: EMPTY
24688: LIST
24689: LIST
24690: PPUSH
24691: LD_VAR 0 2
24695: PUSH
24696: LD_VAR 0 3
24700: PUSH
24701: EMPTY
24702: LIST
24703: LIST
24704: PPUSH
24705: CALL 30877 0 3
24709: ST_TO_ADDR
// result := true ;
24710: LD_ADDR_VAR 0 4
24714: PUSH
24715: LD_INT 1
24717: ST_TO_ADDR
// end ;
24718: LD_VAR 0 4
24722: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
24723: LD_INT 0
24725: PPUSH
24726: PPUSH
24727: PPUSH
// if not unit in minersList then
24728: LD_VAR 0 1
24732: PUSH
24733: LD_EXP 132
24737: IN
24738: NOT
24739: IFFALSE 24743
// exit ;
24741: GO 25135
// index := GetElementIndex ( minersList , unit ) ;
24743: LD_ADDR_VAR 0 6
24747: PUSH
24748: LD_EXP 132
24752: PPUSH
24753: LD_VAR 0 1
24757: PPUSH
24758: CALL 30662 0 2
24762: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
24763: LD_ADDR_VAR 0 5
24767: PUSH
24768: DOUBLE
24769: LD_EXP 133
24773: PUSH
24774: LD_VAR 0 6
24778: ARRAY
24779: INC
24780: ST_TO_ADDR
24781: LD_INT 1
24783: PUSH
24784: FOR_DOWNTO
24785: IFFALSE 24946
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
24787: LD_EXP 133
24791: PUSH
24792: LD_VAR 0 6
24796: ARRAY
24797: PUSH
24798: LD_VAR 0 5
24802: ARRAY
24803: PUSH
24804: LD_INT 1
24806: ARRAY
24807: PUSH
24808: LD_VAR 0 2
24812: EQUAL
24813: PUSH
24814: LD_EXP 133
24818: PUSH
24819: LD_VAR 0 6
24823: ARRAY
24824: PUSH
24825: LD_VAR 0 5
24829: ARRAY
24830: PUSH
24831: LD_INT 2
24833: ARRAY
24834: PUSH
24835: LD_VAR 0 3
24839: EQUAL
24840: AND
24841: IFFALSE 24944
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
24843: LD_EXP 133
24847: PUSH
24848: LD_VAR 0 6
24852: ARRAY
24853: PUSH
24854: LD_VAR 0 5
24858: ARRAY
24859: PUSH
24860: LD_INT 1
24862: ARRAY
24863: PPUSH
24864: LD_EXP 133
24868: PUSH
24869: LD_VAR 0 6
24873: ARRAY
24874: PUSH
24875: LD_VAR 0 5
24879: ARRAY
24880: PUSH
24881: LD_INT 2
24883: ARRAY
24884: PPUSH
24885: LD_VAR 0 1
24889: PPUSH
24890: CALL_OW 255
24894: PPUSH
24895: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
24899: LD_ADDR_EXP 133
24903: PUSH
24904: LD_EXP 133
24908: PPUSH
24909: LD_VAR 0 6
24913: PPUSH
24914: LD_EXP 133
24918: PUSH
24919: LD_VAR 0 6
24923: ARRAY
24924: PPUSH
24925: LD_VAR 0 5
24929: PPUSH
24930: CALL_OW 3
24934: PPUSH
24935: CALL_OW 1
24939: ST_TO_ADDR
// exit ;
24940: POP
24941: POP
24942: GO 25135
// end ; end ;
24944: GO 24784
24946: POP
24947: POP
// for i := minerMinesList [ index ] downto 1 do
24948: LD_ADDR_VAR 0 5
24952: PUSH
24953: DOUBLE
24954: LD_EXP 133
24958: PUSH
24959: LD_VAR 0 6
24963: ARRAY
24964: INC
24965: ST_TO_ADDR
24966: LD_INT 1
24968: PUSH
24969: FOR_DOWNTO
24970: IFFALSE 25133
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
24972: LD_EXP 133
24976: PUSH
24977: LD_VAR 0 6
24981: ARRAY
24982: PUSH
24983: LD_VAR 0 5
24987: ARRAY
24988: PUSH
24989: LD_INT 1
24991: ARRAY
24992: PPUSH
24993: LD_EXP 133
24997: PUSH
24998: LD_VAR 0 6
25002: ARRAY
25003: PUSH
25004: LD_VAR 0 5
25008: ARRAY
25009: PUSH
25010: LD_INT 2
25012: ARRAY
25013: PPUSH
25014: LD_VAR 0 2
25018: PPUSH
25019: LD_VAR 0 3
25023: PPUSH
25024: CALL_OW 298
25028: PUSH
25029: LD_INT 6
25031: LESS
25032: IFFALSE 25131
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
25034: LD_EXP 133
25038: PUSH
25039: LD_VAR 0 6
25043: ARRAY
25044: PUSH
25045: LD_VAR 0 5
25049: ARRAY
25050: PUSH
25051: LD_INT 1
25053: ARRAY
25054: PPUSH
25055: LD_EXP 133
25059: PUSH
25060: LD_VAR 0 6
25064: ARRAY
25065: PUSH
25066: LD_VAR 0 5
25070: ARRAY
25071: PUSH
25072: LD_INT 2
25074: ARRAY
25075: PPUSH
25076: LD_VAR 0 1
25080: PPUSH
25081: CALL_OW 255
25085: PPUSH
25086: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
25090: LD_ADDR_EXP 133
25094: PUSH
25095: LD_EXP 133
25099: PPUSH
25100: LD_VAR 0 6
25104: PPUSH
25105: LD_EXP 133
25109: PUSH
25110: LD_VAR 0 6
25114: ARRAY
25115: PPUSH
25116: LD_VAR 0 5
25120: PPUSH
25121: CALL_OW 3
25125: PPUSH
25126: CALL_OW 1
25130: ST_TO_ADDR
// end ; end ;
25131: GO 24969
25133: POP
25134: POP
// end ;
25135: LD_VAR 0 4
25139: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
25140: LD_INT 0
25142: PPUSH
25143: PPUSH
25144: PPUSH
25145: PPUSH
25146: PPUSH
25147: PPUSH
25148: PPUSH
25149: PPUSH
25150: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
25151: LD_VAR 0 1
25155: PPUSH
25156: CALL_OW 264
25160: PUSH
25161: LD_EXP 59
25165: EQUAL
25166: NOT
25167: PUSH
25168: LD_VAR 0 1
25172: PUSH
25173: LD_EXP 132
25177: IN
25178: NOT
25179: OR
25180: IFFALSE 25184
// exit ;
25182: GO 25506
// index := GetElementIndex ( minersList , unit ) ;
25184: LD_ADDR_VAR 0 6
25188: PUSH
25189: LD_EXP 132
25193: PPUSH
25194: LD_VAR 0 1
25198: PPUSH
25199: CALL 30662 0 2
25203: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
25204: LD_ADDR_VAR 0 8
25208: PUSH
25209: LD_EXP 134
25213: PUSH
25214: LD_EXP 133
25218: PUSH
25219: LD_VAR 0 6
25223: ARRAY
25224: MINUS
25225: ST_TO_ADDR
// if not minesFreeAmount then
25226: LD_VAR 0 8
25230: NOT
25231: IFFALSE 25235
// exit ;
25233: GO 25506
// tmp := [ ] ;
25235: LD_ADDR_VAR 0 7
25239: PUSH
25240: EMPTY
25241: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
25242: LD_ADDR_VAR 0 5
25246: PUSH
25247: DOUBLE
25248: LD_INT 1
25250: DEC
25251: ST_TO_ADDR
25252: LD_VAR 0 8
25256: PUSH
25257: FOR_TO
25258: IFFALSE 25453
// begin _d := rand ( 0 , 5 ) ;
25260: LD_ADDR_VAR 0 11
25264: PUSH
25265: LD_INT 0
25267: PPUSH
25268: LD_INT 5
25270: PPUSH
25271: CALL_OW 12
25275: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
25276: LD_ADDR_VAR 0 12
25280: PUSH
25281: LD_INT 2
25283: PPUSH
25284: LD_INT 6
25286: PPUSH
25287: CALL_OW 12
25291: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
25292: LD_ADDR_VAR 0 9
25296: PUSH
25297: LD_VAR 0 2
25301: PPUSH
25302: LD_VAR 0 11
25306: PPUSH
25307: LD_VAR 0 12
25311: PPUSH
25312: CALL_OW 272
25316: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
25317: LD_ADDR_VAR 0 10
25321: PUSH
25322: LD_VAR 0 3
25326: PPUSH
25327: LD_VAR 0 11
25331: PPUSH
25332: LD_VAR 0 12
25336: PPUSH
25337: CALL_OW 273
25341: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
25342: LD_VAR 0 9
25346: PPUSH
25347: LD_VAR 0 10
25351: PPUSH
25352: CALL_OW 488
25356: PUSH
25357: LD_VAR 0 9
25361: PUSH
25362: LD_VAR 0 10
25366: PUSH
25367: EMPTY
25368: LIST
25369: LIST
25370: PUSH
25371: LD_VAR 0 7
25375: IN
25376: NOT
25377: AND
25378: PUSH
25379: LD_VAR 0 9
25383: PPUSH
25384: LD_VAR 0 10
25388: PPUSH
25389: CALL_OW 458
25393: NOT
25394: AND
25395: IFFALSE 25437
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
25397: LD_ADDR_VAR 0 7
25401: PUSH
25402: LD_VAR 0 7
25406: PPUSH
25407: LD_VAR 0 7
25411: PUSH
25412: LD_INT 1
25414: PLUS
25415: PPUSH
25416: LD_VAR 0 9
25420: PUSH
25421: LD_VAR 0 10
25425: PUSH
25426: EMPTY
25427: LIST
25428: LIST
25429: PPUSH
25430: CALL_OW 1
25434: ST_TO_ADDR
25435: GO 25451
// i := i - 1 ;
25437: LD_ADDR_VAR 0 5
25441: PUSH
25442: LD_VAR 0 5
25446: PUSH
25447: LD_INT 1
25449: MINUS
25450: ST_TO_ADDR
// end ;
25451: GO 25257
25453: POP
25454: POP
// for i in tmp do
25455: LD_ADDR_VAR 0 5
25459: PUSH
25460: LD_VAR 0 7
25464: PUSH
25465: FOR_IN
25466: IFFALSE 25504
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
25468: LD_VAR 0 1
25472: PPUSH
25473: LD_VAR 0 5
25477: PUSH
25478: LD_INT 1
25480: ARRAY
25481: PPUSH
25482: LD_VAR 0 5
25486: PUSH
25487: LD_INT 2
25489: ARRAY
25490: PPUSH
25491: CALL 24446 0 3
25495: NOT
25496: IFFALSE 25502
// exit ;
25498: POP
25499: POP
25500: GO 25506
25502: GO 25465
25504: POP
25505: POP
// end ;
25506: LD_VAR 0 4
25510: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
25511: LD_INT 0
25513: PPUSH
25514: PPUSH
25515: PPUSH
25516: PPUSH
25517: PPUSH
25518: PPUSH
25519: PPUSH
// if not GetClass ( unit ) = class_sniper then
25520: LD_VAR 0 1
25524: PPUSH
25525: CALL_OW 257
25529: PUSH
25530: LD_INT 5
25532: EQUAL
25533: NOT
25534: IFFALSE 25538
// exit ;
25536: GO 25926
// dist := 8 ;
25538: LD_ADDR_VAR 0 5
25542: PUSH
25543: LD_INT 8
25545: ST_TO_ADDR
// viewRange := 12 ;
25546: LD_ADDR_VAR 0 7
25550: PUSH
25551: LD_INT 12
25553: ST_TO_ADDR
// side := GetSide ( unit ) ;
25554: LD_ADDR_VAR 0 6
25558: PUSH
25559: LD_VAR 0 1
25563: PPUSH
25564: CALL_OW 255
25568: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
25569: LD_INT 61
25571: PPUSH
25572: LD_VAR 0 6
25576: PPUSH
25577: CALL_OW 321
25581: PUSH
25582: LD_INT 2
25584: EQUAL
25585: IFFALSE 25595
// viewRange := 16 ;
25587: LD_ADDR_VAR 0 7
25591: PUSH
25592: LD_INT 16
25594: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
25595: LD_VAR 0 1
25599: PPUSH
25600: LD_VAR 0 2
25604: PPUSH
25605: LD_VAR 0 3
25609: PPUSH
25610: CALL_OW 297
25614: PUSH
25615: LD_VAR 0 5
25619: GREATER
25620: IFFALSE 25699
// begin ComMoveXY ( unit , x , y ) ;
25622: LD_VAR 0 1
25626: PPUSH
25627: LD_VAR 0 2
25631: PPUSH
25632: LD_VAR 0 3
25636: PPUSH
25637: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
25641: LD_INT 35
25643: PPUSH
25644: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
25648: LD_VAR 0 1
25652: PPUSH
25653: LD_VAR 0 2
25657: PPUSH
25658: LD_VAR 0 3
25662: PPUSH
25663: CALL 61059 0 3
25667: NOT
25668: IFFALSE 25672
// exit ;
25670: GO 25926
// until GetDistUnitXY ( unit , x , y ) < dist ;
25672: LD_VAR 0 1
25676: PPUSH
25677: LD_VAR 0 2
25681: PPUSH
25682: LD_VAR 0 3
25686: PPUSH
25687: CALL_OW 297
25691: PUSH
25692: LD_VAR 0 5
25696: LESS
25697: IFFALSE 25641
// end ; ComTurnXY ( unit , x , y ) ;
25699: LD_VAR 0 1
25703: PPUSH
25704: LD_VAR 0 2
25708: PPUSH
25709: LD_VAR 0 3
25713: PPUSH
25714: CALL_OW 118
// wait ( 5 ) ;
25718: LD_INT 5
25720: PPUSH
25721: CALL_OW 67
// _d := GetDir ( unit ) ;
25725: LD_ADDR_VAR 0 10
25729: PUSH
25730: LD_VAR 0 1
25734: PPUSH
25735: CALL_OW 254
25739: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
25740: LD_ADDR_VAR 0 8
25744: PUSH
25745: LD_VAR 0 1
25749: PPUSH
25750: CALL_OW 250
25754: PPUSH
25755: LD_VAR 0 10
25759: PPUSH
25760: LD_VAR 0 5
25764: PPUSH
25765: CALL_OW 272
25769: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
25770: LD_ADDR_VAR 0 9
25774: PUSH
25775: LD_VAR 0 1
25779: PPUSH
25780: CALL_OW 251
25784: PPUSH
25785: LD_VAR 0 10
25789: PPUSH
25790: LD_VAR 0 5
25794: PPUSH
25795: CALL_OW 273
25799: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
25800: LD_VAR 0 8
25804: PPUSH
25805: LD_VAR 0 9
25809: PPUSH
25810: CALL_OW 488
25814: NOT
25815: IFFALSE 25819
// exit ;
25817: GO 25926
// ComAnimCustom ( unit , 1 ) ;
25819: LD_VAR 0 1
25823: PPUSH
25824: LD_INT 1
25826: PPUSH
25827: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
25831: LD_VAR 0 8
25835: PPUSH
25836: LD_VAR 0 9
25840: PPUSH
25841: LD_VAR 0 6
25845: PPUSH
25846: LD_VAR 0 7
25850: PPUSH
25851: CALL_OW 330
// repeat wait ( 1 ) ;
25855: LD_INT 1
25857: PPUSH
25858: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
25862: LD_VAR 0 1
25866: PPUSH
25867: CALL_OW 316
25871: PUSH
25872: LD_VAR 0 1
25876: PPUSH
25877: CALL_OW 314
25881: OR
25882: PUSH
25883: LD_VAR 0 1
25887: PPUSH
25888: CALL_OW 302
25892: NOT
25893: OR
25894: PUSH
25895: LD_VAR 0 1
25899: PPUSH
25900: CALL_OW 301
25904: OR
25905: IFFALSE 25855
// RemoveSeeing ( _x , _y , side ) ;
25907: LD_VAR 0 8
25911: PPUSH
25912: LD_VAR 0 9
25916: PPUSH
25917: LD_VAR 0 6
25921: PPUSH
25922: CALL_OW 331
// end ; end_of_file
25926: LD_VAR 0 4
25930: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
25931: LD_INT 0
25933: PPUSH
25934: PPUSH
// if exist_mode then
25935: LD_VAR 0 2
25939: IFFALSE 25964
// unit := CreateCharacter ( prefix & ident ) else
25941: LD_ADDR_VAR 0 5
25945: PUSH
25946: LD_VAR 0 3
25950: PUSH
25951: LD_VAR 0 1
25955: STR
25956: PPUSH
25957: CALL_OW 34
25961: ST_TO_ADDR
25962: GO 25979
// unit := NewCharacter ( ident ) ;
25964: LD_ADDR_VAR 0 5
25968: PUSH
25969: LD_VAR 0 1
25973: PPUSH
25974: CALL_OW 25
25978: ST_TO_ADDR
// result := unit ;
25979: LD_ADDR_VAR 0 4
25983: PUSH
25984: LD_VAR 0 5
25988: ST_TO_ADDR
// end ;
25989: LD_VAR 0 4
25993: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
25994: LD_INT 0
25996: PPUSH
25997: PPUSH
// if not side or not nation then
25998: LD_VAR 0 1
26002: NOT
26003: PUSH
26004: LD_VAR 0 2
26008: NOT
26009: OR
26010: IFFALSE 26014
// exit ;
26012: GO 26778
// case nation of nation_american :
26014: LD_VAR 0 2
26018: PUSH
26019: LD_INT 1
26021: DOUBLE
26022: EQUAL
26023: IFTRUE 26027
26025: GO 26241
26027: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
26028: LD_ADDR_VAR 0 4
26032: PUSH
26033: LD_INT 35
26035: PUSH
26036: LD_INT 45
26038: PUSH
26039: LD_INT 46
26041: PUSH
26042: LD_INT 47
26044: PUSH
26045: LD_INT 82
26047: PUSH
26048: LD_INT 83
26050: PUSH
26051: LD_INT 84
26053: PUSH
26054: LD_INT 85
26056: PUSH
26057: LD_INT 86
26059: PUSH
26060: LD_INT 1
26062: PUSH
26063: LD_INT 2
26065: PUSH
26066: LD_INT 6
26068: PUSH
26069: LD_INT 15
26071: PUSH
26072: LD_INT 16
26074: PUSH
26075: LD_INT 7
26077: PUSH
26078: LD_INT 12
26080: PUSH
26081: LD_INT 13
26083: PUSH
26084: LD_INT 10
26086: PUSH
26087: LD_INT 14
26089: PUSH
26090: LD_INT 20
26092: PUSH
26093: LD_INT 21
26095: PUSH
26096: LD_INT 22
26098: PUSH
26099: LD_INT 25
26101: PUSH
26102: LD_INT 32
26104: PUSH
26105: LD_INT 27
26107: PUSH
26108: LD_INT 36
26110: PUSH
26111: LD_INT 69
26113: PUSH
26114: LD_INT 39
26116: PUSH
26117: LD_INT 34
26119: PUSH
26120: LD_INT 40
26122: PUSH
26123: LD_INT 48
26125: PUSH
26126: LD_INT 49
26128: PUSH
26129: LD_INT 50
26131: PUSH
26132: LD_INT 51
26134: PUSH
26135: LD_INT 52
26137: PUSH
26138: LD_INT 53
26140: PUSH
26141: LD_INT 54
26143: PUSH
26144: LD_INT 55
26146: PUSH
26147: LD_INT 56
26149: PUSH
26150: LD_INT 57
26152: PUSH
26153: LD_INT 58
26155: PUSH
26156: LD_INT 59
26158: PUSH
26159: LD_INT 60
26161: PUSH
26162: LD_INT 61
26164: PUSH
26165: LD_INT 62
26167: PUSH
26168: LD_INT 80
26170: PUSH
26171: LD_INT 82
26173: PUSH
26174: LD_INT 83
26176: PUSH
26177: LD_INT 84
26179: PUSH
26180: LD_INT 85
26182: PUSH
26183: LD_INT 86
26185: PUSH
26186: EMPTY
26187: LIST
26188: LIST
26189: LIST
26190: LIST
26191: LIST
26192: LIST
26193: LIST
26194: LIST
26195: LIST
26196: LIST
26197: LIST
26198: LIST
26199: LIST
26200: LIST
26201: LIST
26202: LIST
26203: LIST
26204: LIST
26205: LIST
26206: LIST
26207: LIST
26208: LIST
26209: LIST
26210: LIST
26211: LIST
26212: LIST
26213: LIST
26214: LIST
26215: LIST
26216: LIST
26217: LIST
26218: LIST
26219: LIST
26220: LIST
26221: LIST
26222: LIST
26223: LIST
26224: LIST
26225: LIST
26226: LIST
26227: LIST
26228: LIST
26229: LIST
26230: LIST
26231: LIST
26232: LIST
26233: LIST
26234: LIST
26235: LIST
26236: LIST
26237: LIST
26238: ST_TO_ADDR
26239: GO 26702
26241: LD_INT 2
26243: DOUBLE
26244: EQUAL
26245: IFTRUE 26249
26247: GO 26471
26249: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
26250: LD_ADDR_VAR 0 4
26254: PUSH
26255: LD_INT 35
26257: PUSH
26258: LD_INT 45
26260: PUSH
26261: LD_INT 46
26263: PUSH
26264: LD_INT 47
26266: PUSH
26267: LD_INT 82
26269: PUSH
26270: LD_INT 83
26272: PUSH
26273: LD_INT 84
26275: PUSH
26276: LD_INT 85
26278: PUSH
26279: LD_INT 87
26281: PUSH
26282: LD_INT 70
26284: PUSH
26285: LD_INT 1
26287: PUSH
26288: LD_INT 11
26290: PUSH
26291: LD_INT 3
26293: PUSH
26294: LD_INT 4
26296: PUSH
26297: LD_INT 5
26299: PUSH
26300: LD_INT 6
26302: PUSH
26303: LD_INT 15
26305: PUSH
26306: LD_INT 18
26308: PUSH
26309: LD_INT 7
26311: PUSH
26312: LD_INT 17
26314: PUSH
26315: LD_INT 8
26317: PUSH
26318: LD_INT 20
26320: PUSH
26321: LD_INT 21
26323: PUSH
26324: LD_INT 22
26326: PUSH
26327: LD_INT 72
26329: PUSH
26330: LD_INT 26
26332: PUSH
26333: LD_INT 69
26335: PUSH
26336: LD_INT 39
26338: PUSH
26339: LD_INT 40
26341: PUSH
26342: LD_INT 41
26344: PUSH
26345: LD_INT 42
26347: PUSH
26348: LD_INT 43
26350: PUSH
26351: LD_INT 48
26353: PUSH
26354: LD_INT 49
26356: PUSH
26357: LD_INT 50
26359: PUSH
26360: LD_INT 51
26362: PUSH
26363: LD_INT 52
26365: PUSH
26366: LD_INT 53
26368: PUSH
26369: LD_INT 54
26371: PUSH
26372: LD_INT 55
26374: PUSH
26375: LD_INT 56
26377: PUSH
26378: LD_INT 60
26380: PUSH
26381: LD_INT 61
26383: PUSH
26384: LD_INT 62
26386: PUSH
26387: LD_INT 66
26389: PUSH
26390: LD_INT 67
26392: PUSH
26393: LD_INT 68
26395: PUSH
26396: LD_INT 81
26398: PUSH
26399: LD_INT 82
26401: PUSH
26402: LD_INT 83
26404: PUSH
26405: LD_INT 84
26407: PUSH
26408: LD_INT 85
26410: PUSH
26411: LD_INT 87
26413: PUSH
26414: EMPTY
26415: LIST
26416: LIST
26417: LIST
26418: LIST
26419: LIST
26420: LIST
26421: LIST
26422: LIST
26423: LIST
26424: LIST
26425: LIST
26426: LIST
26427: LIST
26428: LIST
26429: LIST
26430: LIST
26431: LIST
26432: LIST
26433: LIST
26434: LIST
26435: LIST
26436: LIST
26437: LIST
26438: LIST
26439: LIST
26440: LIST
26441: LIST
26442: LIST
26443: LIST
26444: LIST
26445: LIST
26446: LIST
26447: LIST
26448: LIST
26449: LIST
26450: LIST
26451: LIST
26452: LIST
26453: LIST
26454: LIST
26455: LIST
26456: LIST
26457: LIST
26458: LIST
26459: LIST
26460: LIST
26461: LIST
26462: LIST
26463: LIST
26464: LIST
26465: LIST
26466: LIST
26467: LIST
26468: ST_TO_ADDR
26469: GO 26702
26471: LD_INT 3
26473: DOUBLE
26474: EQUAL
26475: IFTRUE 26479
26477: GO 26701
26479: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
26480: LD_ADDR_VAR 0 4
26484: PUSH
26485: LD_INT 46
26487: PUSH
26488: LD_INT 47
26490: PUSH
26491: LD_INT 1
26493: PUSH
26494: LD_INT 2
26496: PUSH
26497: LD_INT 82
26499: PUSH
26500: LD_INT 83
26502: PUSH
26503: LD_INT 84
26505: PUSH
26506: LD_INT 85
26508: PUSH
26509: LD_INT 86
26511: PUSH
26512: LD_INT 11
26514: PUSH
26515: LD_INT 9
26517: PUSH
26518: LD_INT 20
26520: PUSH
26521: LD_INT 19
26523: PUSH
26524: LD_INT 21
26526: PUSH
26527: LD_INT 24
26529: PUSH
26530: LD_INT 22
26532: PUSH
26533: LD_INT 25
26535: PUSH
26536: LD_INT 28
26538: PUSH
26539: LD_INT 29
26541: PUSH
26542: LD_INT 30
26544: PUSH
26545: LD_INT 31
26547: PUSH
26548: LD_INT 37
26550: PUSH
26551: LD_INT 38
26553: PUSH
26554: LD_INT 32
26556: PUSH
26557: LD_INT 27
26559: PUSH
26560: LD_INT 33
26562: PUSH
26563: LD_INT 69
26565: PUSH
26566: LD_INT 39
26568: PUSH
26569: LD_INT 34
26571: PUSH
26572: LD_INT 40
26574: PUSH
26575: LD_INT 71
26577: PUSH
26578: LD_INT 23
26580: PUSH
26581: LD_INT 44
26583: PUSH
26584: LD_INT 48
26586: PUSH
26587: LD_INT 49
26589: PUSH
26590: LD_INT 50
26592: PUSH
26593: LD_INT 51
26595: PUSH
26596: LD_INT 52
26598: PUSH
26599: LD_INT 53
26601: PUSH
26602: LD_INT 54
26604: PUSH
26605: LD_INT 55
26607: PUSH
26608: LD_INT 56
26610: PUSH
26611: LD_INT 57
26613: PUSH
26614: LD_INT 58
26616: PUSH
26617: LD_INT 59
26619: PUSH
26620: LD_INT 63
26622: PUSH
26623: LD_INT 64
26625: PUSH
26626: LD_INT 65
26628: PUSH
26629: LD_INT 82
26631: PUSH
26632: LD_INT 83
26634: PUSH
26635: LD_INT 84
26637: PUSH
26638: LD_INT 85
26640: PUSH
26641: LD_INT 86
26643: PUSH
26644: EMPTY
26645: LIST
26646: LIST
26647: LIST
26648: LIST
26649: LIST
26650: LIST
26651: LIST
26652: LIST
26653: LIST
26654: LIST
26655: LIST
26656: LIST
26657: LIST
26658: LIST
26659: LIST
26660: LIST
26661: LIST
26662: LIST
26663: LIST
26664: LIST
26665: LIST
26666: LIST
26667: LIST
26668: LIST
26669: LIST
26670: LIST
26671: LIST
26672: LIST
26673: LIST
26674: LIST
26675: LIST
26676: LIST
26677: LIST
26678: LIST
26679: LIST
26680: LIST
26681: LIST
26682: LIST
26683: LIST
26684: LIST
26685: LIST
26686: LIST
26687: LIST
26688: LIST
26689: LIST
26690: LIST
26691: LIST
26692: LIST
26693: LIST
26694: LIST
26695: LIST
26696: LIST
26697: LIST
26698: ST_TO_ADDR
26699: GO 26702
26701: POP
// if state > - 1 and state < 3 then
26702: LD_VAR 0 3
26706: PUSH
26707: LD_INT 1
26709: NEG
26710: GREATER
26711: PUSH
26712: LD_VAR 0 3
26716: PUSH
26717: LD_INT 3
26719: LESS
26720: AND
26721: IFFALSE 26778
// for i in result do
26723: LD_ADDR_VAR 0 5
26727: PUSH
26728: LD_VAR 0 4
26732: PUSH
26733: FOR_IN
26734: IFFALSE 26776
// if GetTech ( i , side ) <> state then
26736: LD_VAR 0 5
26740: PPUSH
26741: LD_VAR 0 1
26745: PPUSH
26746: CALL_OW 321
26750: PUSH
26751: LD_VAR 0 3
26755: NONEQUAL
26756: IFFALSE 26774
// result := result diff i ;
26758: LD_ADDR_VAR 0 4
26762: PUSH
26763: LD_VAR 0 4
26767: PUSH
26768: LD_VAR 0 5
26772: DIFF
26773: ST_TO_ADDR
26774: GO 26733
26776: POP
26777: POP
// end ;
26778: LD_VAR 0 4
26782: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
26783: LD_INT 0
26785: PPUSH
26786: PPUSH
26787: PPUSH
// result := true ;
26788: LD_ADDR_VAR 0 3
26792: PUSH
26793: LD_INT 1
26795: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
26796: LD_ADDR_VAR 0 5
26800: PUSH
26801: LD_VAR 0 2
26805: PPUSH
26806: CALL_OW 480
26810: ST_TO_ADDR
// if not tmp then
26811: LD_VAR 0 5
26815: NOT
26816: IFFALSE 26820
// exit ;
26818: GO 26869
// for i in tmp do
26820: LD_ADDR_VAR 0 4
26824: PUSH
26825: LD_VAR 0 5
26829: PUSH
26830: FOR_IN
26831: IFFALSE 26867
// if GetTech ( i , side ) <> state_researched then
26833: LD_VAR 0 4
26837: PPUSH
26838: LD_VAR 0 1
26842: PPUSH
26843: CALL_OW 321
26847: PUSH
26848: LD_INT 2
26850: NONEQUAL
26851: IFFALSE 26865
// begin result := false ;
26853: LD_ADDR_VAR 0 3
26857: PUSH
26858: LD_INT 0
26860: ST_TO_ADDR
// exit ;
26861: POP
26862: POP
26863: GO 26869
// end ;
26865: GO 26830
26867: POP
26868: POP
// end ;
26869: LD_VAR 0 3
26873: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
26874: LD_INT 0
26876: PPUSH
26877: PPUSH
26878: PPUSH
26879: PPUSH
26880: PPUSH
26881: PPUSH
26882: PPUSH
26883: PPUSH
26884: PPUSH
26885: PPUSH
26886: PPUSH
26887: PPUSH
26888: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
26889: LD_VAR 0 1
26893: NOT
26894: PUSH
26895: LD_VAR 0 1
26899: PPUSH
26900: CALL_OW 257
26904: PUSH
26905: LD_INT 9
26907: NONEQUAL
26908: OR
26909: IFFALSE 26913
// exit ;
26911: GO 27486
// side := GetSide ( unit ) ;
26913: LD_ADDR_VAR 0 9
26917: PUSH
26918: LD_VAR 0 1
26922: PPUSH
26923: CALL_OW 255
26927: ST_TO_ADDR
// tech_space := tech_spacanom ;
26928: LD_ADDR_VAR 0 12
26932: PUSH
26933: LD_INT 29
26935: ST_TO_ADDR
// tech_time := tech_taurad ;
26936: LD_ADDR_VAR 0 13
26940: PUSH
26941: LD_INT 28
26943: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
26944: LD_ADDR_VAR 0 11
26948: PUSH
26949: LD_VAR 0 1
26953: PPUSH
26954: CALL_OW 310
26958: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
26959: LD_VAR 0 11
26963: PPUSH
26964: CALL_OW 247
26968: PUSH
26969: LD_INT 2
26971: EQUAL
26972: IFFALSE 26976
// exit ;
26974: GO 27486
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26976: LD_ADDR_VAR 0 8
26980: PUSH
26981: LD_INT 81
26983: PUSH
26984: LD_VAR 0 9
26988: PUSH
26989: EMPTY
26990: LIST
26991: LIST
26992: PUSH
26993: LD_INT 3
26995: PUSH
26996: LD_INT 21
26998: PUSH
26999: LD_INT 3
27001: PUSH
27002: EMPTY
27003: LIST
27004: LIST
27005: PUSH
27006: EMPTY
27007: LIST
27008: LIST
27009: PUSH
27010: EMPTY
27011: LIST
27012: LIST
27013: PPUSH
27014: CALL_OW 69
27018: ST_TO_ADDR
// if not tmp then
27019: LD_VAR 0 8
27023: NOT
27024: IFFALSE 27028
// exit ;
27026: GO 27486
// if in_unit then
27028: LD_VAR 0 11
27032: IFFALSE 27056
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
27034: LD_ADDR_VAR 0 10
27038: PUSH
27039: LD_VAR 0 8
27043: PPUSH
27044: LD_VAR 0 11
27048: PPUSH
27049: CALL_OW 74
27053: ST_TO_ADDR
27054: GO 27076
// enemy := NearestUnitToUnit ( tmp , unit ) ;
27056: LD_ADDR_VAR 0 10
27060: PUSH
27061: LD_VAR 0 8
27065: PPUSH
27066: LD_VAR 0 1
27070: PPUSH
27071: CALL_OW 74
27075: ST_TO_ADDR
// if not enemy then
27076: LD_VAR 0 10
27080: NOT
27081: IFFALSE 27085
// exit ;
27083: GO 27486
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
27085: LD_VAR 0 11
27089: PUSH
27090: LD_VAR 0 11
27094: PPUSH
27095: LD_VAR 0 10
27099: PPUSH
27100: CALL_OW 296
27104: PUSH
27105: LD_INT 13
27107: GREATER
27108: AND
27109: PUSH
27110: LD_VAR 0 1
27114: PPUSH
27115: LD_VAR 0 10
27119: PPUSH
27120: CALL_OW 296
27124: PUSH
27125: LD_INT 12
27127: GREATER
27128: OR
27129: IFFALSE 27133
// exit ;
27131: GO 27486
// missile := [ 1 ] ;
27133: LD_ADDR_VAR 0 14
27137: PUSH
27138: LD_INT 1
27140: PUSH
27141: EMPTY
27142: LIST
27143: ST_TO_ADDR
// if Researched ( side , tech_space ) then
27144: LD_VAR 0 9
27148: PPUSH
27149: LD_VAR 0 12
27153: PPUSH
27154: CALL_OW 325
27158: IFFALSE 27187
// missile := Insert ( missile , missile + 1 , 2 ) ;
27160: LD_ADDR_VAR 0 14
27164: PUSH
27165: LD_VAR 0 14
27169: PPUSH
27170: LD_VAR 0 14
27174: PUSH
27175: LD_INT 1
27177: PLUS
27178: PPUSH
27179: LD_INT 2
27181: PPUSH
27182: CALL_OW 2
27186: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
27187: LD_VAR 0 9
27191: PPUSH
27192: LD_VAR 0 13
27196: PPUSH
27197: CALL_OW 325
27201: PUSH
27202: LD_VAR 0 10
27206: PPUSH
27207: CALL_OW 255
27211: PPUSH
27212: LD_VAR 0 13
27216: PPUSH
27217: CALL_OW 325
27221: NOT
27222: AND
27223: IFFALSE 27252
// missile := Insert ( missile , missile + 1 , 3 ) ;
27225: LD_ADDR_VAR 0 14
27229: PUSH
27230: LD_VAR 0 14
27234: PPUSH
27235: LD_VAR 0 14
27239: PUSH
27240: LD_INT 1
27242: PLUS
27243: PPUSH
27244: LD_INT 3
27246: PPUSH
27247: CALL_OW 2
27251: ST_TO_ADDR
// if missile < 2 then
27252: LD_VAR 0 14
27256: PUSH
27257: LD_INT 2
27259: LESS
27260: IFFALSE 27264
// exit ;
27262: GO 27486
// x := GetX ( enemy ) ;
27264: LD_ADDR_VAR 0 4
27268: PUSH
27269: LD_VAR 0 10
27273: PPUSH
27274: CALL_OW 250
27278: ST_TO_ADDR
// y := GetY ( enemy ) ;
27279: LD_ADDR_VAR 0 5
27283: PUSH
27284: LD_VAR 0 10
27288: PPUSH
27289: CALL_OW 251
27293: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
27294: LD_ADDR_VAR 0 6
27298: PUSH
27299: LD_VAR 0 4
27303: PUSH
27304: LD_INT 1
27306: NEG
27307: PPUSH
27308: LD_INT 1
27310: PPUSH
27311: CALL_OW 12
27315: PLUS
27316: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
27317: LD_ADDR_VAR 0 7
27321: PUSH
27322: LD_VAR 0 5
27326: PUSH
27327: LD_INT 1
27329: NEG
27330: PPUSH
27331: LD_INT 1
27333: PPUSH
27334: CALL_OW 12
27338: PLUS
27339: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
27340: LD_VAR 0 6
27344: PPUSH
27345: LD_VAR 0 7
27349: PPUSH
27350: CALL_OW 488
27354: NOT
27355: IFFALSE 27377
// begin _x := x ;
27357: LD_ADDR_VAR 0 6
27361: PUSH
27362: LD_VAR 0 4
27366: ST_TO_ADDR
// _y := y ;
27367: LD_ADDR_VAR 0 7
27371: PUSH
27372: LD_VAR 0 5
27376: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
27377: LD_ADDR_VAR 0 3
27381: PUSH
27382: LD_INT 1
27384: PPUSH
27385: LD_VAR 0 14
27389: PPUSH
27390: CALL_OW 12
27394: ST_TO_ADDR
// case i of 1 :
27395: LD_VAR 0 3
27399: PUSH
27400: LD_INT 1
27402: DOUBLE
27403: EQUAL
27404: IFTRUE 27408
27406: GO 27425
27408: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
27409: LD_VAR 0 1
27413: PPUSH
27414: LD_VAR 0 10
27418: PPUSH
27419: CALL_OW 115
27423: GO 27486
27425: LD_INT 2
27427: DOUBLE
27428: EQUAL
27429: IFTRUE 27433
27431: GO 27455
27433: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
27434: LD_VAR 0 1
27438: PPUSH
27439: LD_VAR 0 6
27443: PPUSH
27444: LD_VAR 0 7
27448: PPUSH
27449: CALL_OW 153
27453: GO 27486
27455: LD_INT 3
27457: DOUBLE
27458: EQUAL
27459: IFTRUE 27463
27461: GO 27485
27463: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
27464: LD_VAR 0 1
27468: PPUSH
27469: LD_VAR 0 6
27473: PPUSH
27474: LD_VAR 0 7
27478: PPUSH
27479: CALL_OW 154
27483: GO 27486
27485: POP
// end ;
27486: LD_VAR 0 2
27490: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
27491: LD_INT 0
27493: PPUSH
27494: PPUSH
27495: PPUSH
27496: PPUSH
27497: PPUSH
27498: PPUSH
// if not unit or not building then
27499: LD_VAR 0 1
27503: NOT
27504: PUSH
27505: LD_VAR 0 2
27509: NOT
27510: OR
27511: IFFALSE 27515
// exit ;
27513: GO 27673
// x := GetX ( building ) ;
27515: LD_ADDR_VAR 0 5
27519: PUSH
27520: LD_VAR 0 2
27524: PPUSH
27525: CALL_OW 250
27529: ST_TO_ADDR
// y := GetY ( building ) ;
27530: LD_ADDR_VAR 0 6
27534: PUSH
27535: LD_VAR 0 2
27539: PPUSH
27540: CALL_OW 251
27544: ST_TO_ADDR
// for i = 0 to 5 do
27545: LD_ADDR_VAR 0 4
27549: PUSH
27550: DOUBLE
27551: LD_INT 0
27553: DEC
27554: ST_TO_ADDR
27555: LD_INT 5
27557: PUSH
27558: FOR_TO
27559: IFFALSE 27671
// begin _x := ShiftX ( x , i , 3 ) ;
27561: LD_ADDR_VAR 0 7
27565: PUSH
27566: LD_VAR 0 5
27570: PPUSH
27571: LD_VAR 0 4
27575: PPUSH
27576: LD_INT 3
27578: PPUSH
27579: CALL_OW 272
27583: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
27584: LD_ADDR_VAR 0 8
27588: PUSH
27589: LD_VAR 0 6
27593: PPUSH
27594: LD_VAR 0 4
27598: PPUSH
27599: LD_INT 3
27601: PPUSH
27602: CALL_OW 273
27606: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
27607: LD_VAR 0 7
27611: PPUSH
27612: LD_VAR 0 8
27616: PPUSH
27617: CALL_OW 488
27621: NOT
27622: IFFALSE 27626
// continue ;
27624: GO 27558
// if HexInfo ( _x , _y ) = 0 then
27626: LD_VAR 0 7
27630: PPUSH
27631: LD_VAR 0 8
27635: PPUSH
27636: CALL_OW 428
27640: PUSH
27641: LD_INT 0
27643: EQUAL
27644: IFFALSE 27669
// begin ComMoveXY ( unit , _x , _y ) ;
27646: LD_VAR 0 1
27650: PPUSH
27651: LD_VAR 0 7
27655: PPUSH
27656: LD_VAR 0 8
27660: PPUSH
27661: CALL_OW 111
// exit ;
27665: POP
27666: POP
27667: GO 27673
// end ; end ;
27669: GO 27558
27671: POP
27672: POP
// end ;
27673: LD_VAR 0 3
27677: RET
// export function ScanBase ( side , base_area ) ; begin
27678: LD_INT 0
27680: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
27681: LD_ADDR_VAR 0 3
27685: PUSH
27686: LD_VAR 0 2
27690: PPUSH
27691: LD_INT 81
27693: PUSH
27694: LD_VAR 0 1
27698: PUSH
27699: EMPTY
27700: LIST
27701: LIST
27702: PPUSH
27703: CALL_OW 70
27707: ST_TO_ADDR
// end ;
27708: LD_VAR 0 3
27712: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
27713: LD_INT 0
27715: PPUSH
27716: PPUSH
27717: PPUSH
27718: PPUSH
// result := false ;
27719: LD_ADDR_VAR 0 2
27723: PUSH
27724: LD_INT 0
27726: ST_TO_ADDR
// side := GetSide ( unit ) ;
27727: LD_ADDR_VAR 0 3
27731: PUSH
27732: LD_VAR 0 1
27736: PPUSH
27737: CALL_OW 255
27741: ST_TO_ADDR
// nat := GetNation ( unit ) ;
27742: LD_ADDR_VAR 0 4
27746: PUSH
27747: LD_VAR 0 1
27751: PPUSH
27752: CALL_OW 248
27756: ST_TO_ADDR
// case nat of 1 :
27757: LD_VAR 0 4
27761: PUSH
27762: LD_INT 1
27764: DOUBLE
27765: EQUAL
27766: IFTRUE 27770
27768: GO 27781
27770: POP
// tech := tech_lassight ; 2 :
27771: LD_ADDR_VAR 0 5
27775: PUSH
27776: LD_INT 12
27778: ST_TO_ADDR
27779: GO 27820
27781: LD_INT 2
27783: DOUBLE
27784: EQUAL
27785: IFTRUE 27789
27787: GO 27800
27789: POP
// tech := tech_mortar ; 3 :
27790: LD_ADDR_VAR 0 5
27794: PUSH
27795: LD_INT 41
27797: ST_TO_ADDR
27798: GO 27820
27800: LD_INT 3
27802: DOUBLE
27803: EQUAL
27804: IFTRUE 27808
27806: GO 27819
27808: POP
// tech := tech_bazooka ; end ;
27809: LD_ADDR_VAR 0 5
27813: PUSH
27814: LD_INT 44
27816: ST_TO_ADDR
27817: GO 27820
27819: POP
// if Researched ( side , tech ) then
27820: LD_VAR 0 3
27824: PPUSH
27825: LD_VAR 0 5
27829: PPUSH
27830: CALL_OW 325
27834: IFFALSE 27861
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
27836: LD_ADDR_VAR 0 2
27840: PUSH
27841: LD_INT 5
27843: PUSH
27844: LD_INT 8
27846: PUSH
27847: LD_INT 9
27849: PUSH
27850: EMPTY
27851: LIST
27852: LIST
27853: LIST
27854: PUSH
27855: LD_VAR 0 4
27859: ARRAY
27860: ST_TO_ADDR
// end ;
27861: LD_VAR 0 2
27865: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
27866: LD_INT 0
27868: PPUSH
27869: PPUSH
27870: PPUSH
// if not mines then
27871: LD_VAR 0 2
27875: NOT
27876: IFFALSE 27880
// exit ;
27878: GO 28024
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27880: LD_ADDR_VAR 0 5
27884: PUSH
27885: LD_INT 81
27887: PUSH
27888: LD_VAR 0 1
27892: PUSH
27893: EMPTY
27894: LIST
27895: LIST
27896: PUSH
27897: LD_INT 3
27899: PUSH
27900: LD_INT 21
27902: PUSH
27903: LD_INT 3
27905: PUSH
27906: EMPTY
27907: LIST
27908: LIST
27909: PUSH
27910: EMPTY
27911: LIST
27912: LIST
27913: PUSH
27914: EMPTY
27915: LIST
27916: LIST
27917: PPUSH
27918: CALL_OW 69
27922: ST_TO_ADDR
// for i in mines do
27923: LD_ADDR_VAR 0 4
27927: PUSH
27928: LD_VAR 0 2
27932: PUSH
27933: FOR_IN
27934: IFFALSE 28022
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
27936: LD_VAR 0 4
27940: PUSH
27941: LD_INT 1
27943: ARRAY
27944: PPUSH
27945: LD_VAR 0 4
27949: PUSH
27950: LD_INT 2
27952: ARRAY
27953: PPUSH
27954: CALL_OW 458
27958: NOT
27959: IFFALSE 27963
// continue ;
27961: GO 27933
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
27963: LD_VAR 0 4
27967: PUSH
27968: LD_INT 1
27970: ARRAY
27971: PPUSH
27972: LD_VAR 0 4
27976: PUSH
27977: LD_INT 2
27979: ARRAY
27980: PPUSH
27981: CALL_OW 428
27985: PUSH
27986: LD_VAR 0 5
27990: IN
27991: IFFALSE 28020
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
27993: LD_VAR 0 4
27997: PUSH
27998: LD_INT 1
28000: ARRAY
28001: PPUSH
28002: LD_VAR 0 4
28006: PUSH
28007: LD_INT 2
28009: ARRAY
28010: PPUSH
28011: LD_VAR 0 1
28015: PPUSH
28016: CALL_OW 456
// end ;
28020: GO 27933
28022: POP
28023: POP
// end ;
28024: LD_VAR 0 3
28028: RET
// export function Count ( array ) ; var i ; begin
28029: LD_INT 0
28031: PPUSH
28032: PPUSH
// result := 0 ;
28033: LD_ADDR_VAR 0 2
28037: PUSH
28038: LD_INT 0
28040: ST_TO_ADDR
// for i in array do
28041: LD_ADDR_VAR 0 3
28045: PUSH
28046: LD_VAR 0 1
28050: PUSH
28051: FOR_IN
28052: IFFALSE 28076
// if i then
28054: LD_VAR 0 3
28058: IFFALSE 28074
// result := result + 1 ;
28060: LD_ADDR_VAR 0 2
28064: PUSH
28065: LD_VAR 0 2
28069: PUSH
28070: LD_INT 1
28072: PLUS
28073: ST_TO_ADDR
28074: GO 28051
28076: POP
28077: POP
// end ;
28078: LD_VAR 0 2
28082: RET
// export function IsEmpty ( building ) ; begin
28083: LD_INT 0
28085: PPUSH
// if not building then
28086: LD_VAR 0 1
28090: NOT
28091: IFFALSE 28095
// exit ;
28093: GO 28138
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
28095: LD_ADDR_VAR 0 2
28099: PUSH
28100: LD_VAR 0 1
28104: PUSH
28105: LD_INT 22
28107: PUSH
28108: LD_VAR 0 1
28112: PPUSH
28113: CALL_OW 255
28117: PUSH
28118: EMPTY
28119: LIST
28120: LIST
28121: PUSH
28122: LD_INT 58
28124: PUSH
28125: EMPTY
28126: LIST
28127: PUSH
28128: EMPTY
28129: LIST
28130: LIST
28131: PPUSH
28132: CALL_OW 69
28136: IN
28137: ST_TO_ADDR
// end ;
28138: LD_VAR 0 2
28142: RET
// export function IsNotFull ( building ) ; begin
28143: LD_INT 0
28145: PPUSH
// if not building then
28146: LD_VAR 0 1
28150: NOT
28151: IFFALSE 28155
// exit ;
28153: GO 28174
// result := UnitsInside ( building ) < 6 ;
28155: LD_ADDR_VAR 0 2
28159: PUSH
28160: LD_VAR 0 1
28164: PPUSH
28165: CALL_OW 313
28169: PUSH
28170: LD_INT 6
28172: LESS
28173: ST_TO_ADDR
// end ;
28174: LD_VAR 0 2
28178: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
28179: LD_INT 0
28181: PPUSH
28182: PPUSH
28183: PPUSH
28184: PPUSH
// tmp := [ ] ;
28185: LD_ADDR_VAR 0 3
28189: PUSH
28190: EMPTY
28191: ST_TO_ADDR
// list := [ ] ;
28192: LD_ADDR_VAR 0 5
28196: PUSH
28197: EMPTY
28198: ST_TO_ADDR
// for i = 16 to 25 do
28199: LD_ADDR_VAR 0 4
28203: PUSH
28204: DOUBLE
28205: LD_INT 16
28207: DEC
28208: ST_TO_ADDR
28209: LD_INT 25
28211: PUSH
28212: FOR_TO
28213: IFFALSE 28286
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
28215: LD_ADDR_VAR 0 3
28219: PUSH
28220: LD_VAR 0 3
28224: PUSH
28225: LD_INT 22
28227: PUSH
28228: LD_VAR 0 1
28232: PPUSH
28233: CALL_OW 255
28237: PUSH
28238: EMPTY
28239: LIST
28240: LIST
28241: PUSH
28242: LD_INT 91
28244: PUSH
28245: LD_VAR 0 1
28249: PUSH
28250: LD_INT 6
28252: PUSH
28253: EMPTY
28254: LIST
28255: LIST
28256: LIST
28257: PUSH
28258: LD_INT 30
28260: PUSH
28261: LD_VAR 0 4
28265: PUSH
28266: EMPTY
28267: LIST
28268: LIST
28269: PUSH
28270: EMPTY
28271: LIST
28272: LIST
28273: LIST
28274: PUSH
28275: EMPTY
28276: LIST
28277: PPUSH
28278: CALL_OW 69
28282: ADD
28283: ST_TO_ADDR
28284: GO 28212
28286: POP
28287: POP
// for i = 1 to tmp do
28288: LD_ADDR_VAR 0 4
28292: PUSH
28293: DOUBLE
28294: LD_INT 1
28296: DEC
28297: ST_TO_ADDR
28298: LD_VAR 0 3
28302: PUSH
28303: FOR_TO
28304: IFFALSE 28392
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
28306: LD_ADDR_VAR 0 5
28310: PUSH
28311: LD_VAR 0 5
28315: PUSH
28316: LD_VAR 0 3
28320: PUSH
28321: LD_VAR 0 4
28325: ARRAY
28326: PPUSH
28327: CALL_OW 266
28331: PUSH
28332: LD_VAR 0 3
28336: PUSH
28337: LD_VAR 0 4
28341: ARRAY
28342: PPUSH
28343: CALL_OW 250
28347: PUSH
28348: LD_VAR 0 3
28352: PUSH
28353: LD_VAR 0 4
28357: ARRAY
28358: PPUSH
28359: CALL_OW 251
28363: PUSH
28364: LD_VAR 0 3
28368: PUSH
28369: LD_VAR 0 4
28373: ARRAY
28374: PPUSH
28375: CALL_OW 254
28379: PUSH
28380: EMPTY
28381: LIST
28382: LIST
28383: LIST
28384: LIST
28385: PUSH
28386: EMPTY
28387: LIST
28388: ADD
28389: ST_TO_ADDR
28390: GO 28303
28392: POP
28393: POP
// result := list ;
28394: LD_ADDR_VAR 0 2
28398: PUSH
28399: LD_VAR 0 5
28403: ST_TO_ADDR
// end ;
28404: LD_VAR 0 2
28408: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
28409: LD_INT 0
28411: PPUSH
28412: PPUSH
28413: PPUSH
28414: PPUSH
28415: PPUSH
28416: PPUSH
28417: PPUSH
// if not factory then
28418: LD_VAR 0 1
28422: NOT
28423: IFFALSE 28427
// exit ;
28425: GO 29020
// if control = control_apeman then
28427: LD_VAR 0 4
28431: PUSH
28432: LD_INT 5
28434: EQUAL
28435: IFFALSE 28544
// begin tmp := UnitsInside ( factory ) ;
28437: LD_ADDR_VAR 0 8
28441: PUSH
28442: LD_VAR 0 1
28446: PPUSH
28447: CALL_OW 313
28451: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
28452: LD_VAR 0 8
28456: PPUSH
28457: LD_INT 25
28459: PUSH
28460: LD_INT 12
28462: PUSH
28463: EMPTY
28464: LIST
28465: LIST
28466: PPUSH
28467: CALL_OW 72
28471: NOT
28472: IFFALSE 28482
// control := control_manual ;
28474: LD_ADDR_VAR 0 4
28478: PUSH
28479: LD_INT 1
28481: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
28482: LD_ADDR_VAR 0 8
28486: PUSH
28487: LD_VAR 0 1
28491: PPUSH
28492: CALL 28179 0 1
28496: ST_TO_ADDR
// if tmp then
28497: LD_VAR 0 8
28501: IFFALSE 28544
// begin for i in tmp do
28503: LD_ADDR_VAR 0 7
28507: PUSH
28508: LD_VAR 0 8
28512: PUSH
28513: FOR_IN
28514: IFFALSE 28542
// if i [ 1 ] = b_ext_radio then
28516: LD_VAR 0 7
28520: PUSH
28521: LD_INT 1
28523: ARRAY
28524: PUSH
28525: LD_INT 22
28527: EQUAL
28528: IFFALSE 28540
// begin control := control_remote ;
28530: LD_ADDR_VAR 0 4
28534: PUSH
28535: LD_INT 2
28537: ST_TO_ADDR
// break ;
28538: GO 28542
// end ;
28540: GO 28513
28542: POP
28543: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
28544: LD_VAR 0 1
28548: PPUSH
28549: LD_VAR 0 2
28553: PPUSH
28554: LD_VAR 0 3
28558: PPUSH
28559: LD_VAR 0 4
28563: PPUSH
28564: LD_VAR 0 5
28568: PPUSH
28569: CALL_OW 448
28573: IFFALSE 28608
// begin result := [ chassis , engine , control , weapon ] ;
28575: LD_ADDR_VAR 0 6
28579: PUSH
28580: LD_VAR 0 2
28584: PUSH
28585: LD_VAR 0 3
28589: PUSH
28590: LD_VAR 0 4
28594: PUSH
28595: LD_VAR 0 5
28599: PUSH
28600: EMPTY
28601: LIST
28602: LIST
28603: LIST
28604: LIST
28605: ST_TO_ADDR
// exit ;
28606: GO 29020
// end ; _chassis := AvailableChassisList ( factory ) ;
28608: LD_ADDR_VAR 0 9
28612: PUSH
28613: LD_VAR 0 1
28617: PPUSH
28618: CALL_OW 475
28622: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
28623: LD_ADDR_VAR 0 11
28627: PUSH
28628: LD_VAR 0 1
28632: PPUSH
28633: CALL_OW 476
28637: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
28638: LD_ADDR_VAR 0 12
28642: PUSH
28643: LD_VAR 0 1
28647: PPUSH
28648: CALL_OW 477
28652: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
28653: LD_ADDR_VAR 0 10
28657: PUSH
28658: LD_VAR 0 1
28662: PPUSH
28663: CALL_OW 478
28667: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
28668: LD_VAR 0 9
28672: NOT
28673: PUSH
28674: LD_VAR 0 11
28678: NOT
28679: OR
28680: PUSH
28681: LD_VAR 0 12
28685: NOT
28686: OR
28687: PUSH
28688: LD_VAR 0 10
28692: NOT
28693: OR
28694: IFFALSE 28729
// begin result := [ chassis , engine , control , weapon ] ;
28696: LD_ADDR_VAR 0 6
28700: PUSH
28701: LD_VAR 0 2
28705: PUSH
28706: LD_VAR 0 3
28710: PUSH
28711: LD_VAR 0 4
28715: PUSH
28716: LD_VAR 0 5
28720: PUSH
28721: EMPTY
28722: LIST
28723: LIST
28724: LIST
28725: LIST
28726: ST_TO_ADDR
// exit ;
28727: GO 29020
// end ; if not chassis in _chassis then
28729: LD_VAR 0 2
28733: PUSH
28734: LD_VAR 0 9
28738: IN
28739: NOT
28740: IFFALSE 28766
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
28742: LD_ADDR_VAR 0 2
28746: PUSH
28747: LD_VAR 0 9
28751: PUSH
28752: LD_INT 1
28754: PPUSH
28755: LD_VAR 0 9
28759: PPUSH
28760: CALL_OW 12
28764: ARRAY
28765: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
28766: LD_VAR 0 2
28770: PPUSH
28771: LD_VAR 0 3
28775: PPUSH
28776: CALL 29025 0 2
28780: NOT
28781: IFFALSE 28840
// repeat engine := _engine [ 1 ] ;
28783: LD_ADDR_VAR 0 3
28787: PUSH
28788: LD_VAR 0 11
28792: PUSH
28793: LD_INT 1
28795: ARRAY
28796: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
28797: LD_ADDR_VAR 0 11
28801: PUSH
28802: LD_VAR 0 11
28806: PPUSH
28807: LD_INT 1
28809: PPUSH
28810: CALL_OW 3
28814: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
28815: LD_VAR 0 2
28819: PPUSH
28820: LD_VAR 0 3
28824: PPUSH
28825: CALL 29025 0 2
28829: PUSH
28830: LD_VAR 0 11
28834: PUSH
28835: EMPTY
28836: EQUAL
28837: OR
28838: IFFALSE 28783
// if not control in _control then
28840: LD_VAR 0 4
28844: PUSH
28845: LD_VAR 0 12
28849: IN
28850: NOT
28851: IFFALSE 28877
// control := _control [ rand ( 1 , _control ) ] ;
28853: LD_ADDR_VAR 0 4
28857: PUSH
28858: LD_VAR 0 12
28862: PUSH
28863: LD_INT 1
28865: PPUSH
28866: LD_VAR 0 12
28870: PPUSH
28871: CALL_OW 12
28875: ARRAY
28876: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
28877: LD_VAR 0 2
28881: PPUSH
28882: LD_VAR 0 5
28886: PPUSH
28887: CALL 29245 0 2
28891: NOT
28892: IFFALSE 28951
// repeat weapon := _weapon [ 1 ] ;
28894: LD_ADDR_VAR 0 5
28898: PUSH
28899: LD_VAR 0 10
28903: PUSH
28904: LD_INT 1
28906: ARRAY
28907: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
28908: LD_ADDR_VAR 0 10
28912: PUSH
28913: LD_VAR 0 10
28917: PPUSH
28918: LD_INT 1
28920: PPUSH
28921: CALL_OW 3
28925: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
28926: LD_VAR 0 2
28930: PPUSH
28931: LD_VAR 0 5
28935: PPUSH
28936: CALL 29245 0 2
28940: PUSH
28941: LD_VAR 0 10
28945: PUSH
28946: EMPTY
28947: EQUAL
28948: OR
28949: IFFALSE 28894
// result := [ ] ;
28951: LD_ADDR_VAR 0 6
28955: PUSH
28956: EMPTY
28957: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
28958: LD_VAR 0 1
28962: PPUSH
28963: LD_VAR 0 2
28967: PPUSH
28968: LD_VAR 0 3
28972: PPUSH
28973: LD_VAR 0 4
28977: PPUSH
28978: LD_VAR 0 5
28982: PPUSH
28983: CALL_OW 448
28987: IFFALSE 29020
// result := [ chassis , engine , control , weapon ] ;
28989: LD_ADDR_VAR 0 6
28993: PUSH
28994: LD_VAR 0 2
28998: PUSH
28999: LD_VAR 0 3
29003: PUSH
29004: LD_VAR 0 4
29008: PUSH
29009: LD_VAR 0 5
29013: PUSH
29014: EMPTY
29015: LIST
29016: LIST
29017: LIST
29018: LIST
29019: ST_TO_ADDR
// end ;
29020: LD_VAR 0 6
29024: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
29025: LD_INT 0
29027: PPUSH
// if not chassis or not engine then
29028: LD_VAR 0 1
29032: NOT
29033: PUSH
29034: LD_VAR 0 2
29038: NOT
29039: OR
29040: IFFALSE 29044
// exit ;
29042: GO 29240
// case engine of engine_solar :
29044: LD_VAR 0 2
29048: PUSH
29049: LD_INT 2
29051: DOUBLE
29052: EQUAL
29053: IFTRUE 29057
29055: GO 29095
29057: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
29058: LD_ADDR_VAR 0 3
29062: PUSH
29063: LD_INT 11
29065: PUSH
29066: LD_INT 12
29068: PUSH
29069: LD_INT 13
29071: PUSH
29072: LD_INT 14
29074: PUSH
29075: LD_INT 1
29077: PUSH
29078: LD_INT 2
29080: PUSH
29081: LD_INT 3
29083: PUSH
29084: EMPTY
29085: LIST
29086: LIST
29087: LIST
29088: LIST
29089: LIST
29090: LIST
29091: LIST
29092: ST_TO_ADDR
29093: GO 29224
29095: LD_INT 1
29097: DOUBLE
29098: EQUAL
29099: IFTRUE 29103
29101: GO 29165
29103: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
29104: LD_ADDR_VAR 0 3
29108: PUSH
29109: LD_INT 11
29111: PUSH
29112: LD_INT 12
29114: PUSH
29115: LD_INT 13
29117: PUSH
29118: LD_INT 14
29120: PUSH
29121: LD_INT 1
29123: PUSH
29124: LD_INT 2
29126: PUSH
29127: LD_INT 3
29129: PUSH
29130: LD_INT 4
29132: PUSH
29133: LD_INT 5
29135: PUSH
29136: LD_INT 21
29138: PUSH
29139: LD_INT 23
29141: PUSH
29142: LD_INT 22
29144: PUSH
29145: LD_INT 24
29147: PUSH
29148: EMPTY
29149: LIST
29150: LIST
29151: LIST
29152: LIST
29153: LIST
29154: LIST
29155: LIST
29156: LIST
29157: LIST
29158: LIST
29159: LIST
29160: LIST
29161: LIST
29162: ST_TO_ADDR
29163: GO 29224
29165: LD_INT 3
29167: DOUBLE
29168: EQUAL
29169: IFTRUE 29173
29171: GO 29223
29173: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
29174: LD_ADDR_VAR 0 3
29178: PUSH
29179: LD_INT 13
29181: PUSH
29182: LD_INT 14
29184: PUSH
29185: LD_INT 2
29187: PUSH
29188: LD_INT 3
29190: PUSH
29191: LD_INT 4
29193: PUSH
29194: LD_INT 5
29196: PUSH
29197: LD_INT 21
29199: PUSH
29200: LD_INT 22
29202: PUSH
29203: LD_INT 23
29205: PUSH
29206: LD_INT 24
29208: PUSH
29209: EMPTY
29210: LIST
29211: LIST
29212: LIST
29213: LIST
29214: LIST
29215: LIST
29216: LIST
29217: LIST
29218: LIST
29219: LIST
29220: ST_TO_ADDR
29221: GO 29224
29223: POP
// result := ( chassis in result ) ;
29224: LD_ADDR_VAR 0 3
29228: PUSH
29229: LD_VAR 0 1
29233: PUSH
29234: LD_VAR 0 3
29238: IN
29239: ST_TO_ADDR
// end ;
29240: LD_VAR 0 3
29244: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
29245: LD_INT 0
29247: PPUSH
// if not chassis or not weapon then
29248: LD_VAR 0 1
29252: NOT
29253: PUSH
29254: LD_VAR 0 2
29258: NOT
29259: OR
29260: IFFALSE 29264
// exit ;
29262: GO 30290
// case weapon of us_machine_gun :
29264: LD_VAR 0 2
29268: PUSH
29269: LD_INT 2
29271: DOUBLE
29272: EQUAL
29273: IFTRUE 29277
29275: GO 29307
29277: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
29278: LD_ADDR_VAR 0 3
29282: PUSH
29283: LD_INT 1
29285: PUSH
29286: LD_INT 2
29288: PUSH
29289: LD_INT 3
29291: PUSH
29292: LD_INT 4
29294: PUSH
29295: LD_INT 5
29297: PUSH
29298: EMPTY
29299: LIST
29300: LIST
29301: LIST
29302: LIST
29303: LIST
29304: ST_TO_ADDR
29305: GO 30274
29307: LD_INT 3
29309: DOUBLE
29310: EQUAL
29311: IFTRUE 29315
29313: GO 29345
29315: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
29316: LD_ADDR_VAR 0 3
29320: PUSH
29321: LD_INT 1
29323: PUSH
29324: LD_INT 2
29326: PUSH
29327: LD_INT 3
29329: PUSH
29330: LD_INT 4
29332: PUSH
29333: LD_INT 5
29335: PUSH
29336: EMPTY
29337: LIST
29338: LIST
29339: LIST
29340: LIST
29341: LIST
29342: ST_TO_ADDR
29343: GO 30274
29345: LD_INT 11
29347: DOUBLE
29348: EQUAL
29349: IFTRUE 29353
29351: GO 29383
29353: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
29354: LD_ADDR_VAR 0 3
29358: PUSH
29359: LD_INT 1
29361: PUSH
29362: LD_INT 2
29364: PUSH
29365: LD_INT 3
29367: PUSH
29368: LD_INT 4
29370: PUSH
29371: LD_INT 5
29373: PUSH
29374: EMPTY
29375: LIST
29376: LIST
29377: LIST
29378: LIST
29379: LIST
29380: ST_TO_ADDR
29381: GO 30274
29383: LD_INT 4
29385: DOUBLE
29386: EQUAL
29387: IFTRUE 29391
29389: GO 29417
29391: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
29392: LD_ADDR_VAR 0 3
29396: PUSH
29397: LD_INT 2
29399: PUSH
29400: LD_INT 3
29402: PUSH
29403: LD_INT 4
29405: PUSH
29406: LD_INT 5
29408: PUSH
29409: EMPTY
29410: LIST
29411: LIST
29412: LIST
29413: LIST
29414: ST_TO_ADDR
29415: GO 30274
29417: LD_INT 5
29419: DOUBLE
29420: EQUAL
29421: IFTRUE 29425
29423: GO 29451
29425: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
29426: LD_ADDR_VAR 0 3
29430: PUSH
29431: LD_INT 2
29433: PUSH
29434: LD_INT 3
29436: PUSH
29437: LD_INT 4
29439: PUSH
29440: LD_INT 5
29442: PUSH
29443: EMPTY
29444: LIST
29445: LIST
29446: LIST
29447: LIST
29448: ST_TO_ADDR
29449: GO 30274
29451: LD_INT 9
29453: DOUBLE
29454: EQUAL
29455: IFTRUE 29459
29457: GO 29485
29459: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
29460: LD_ADDR_VAR 0 3
29464: PUSH
29465: LD_INT 2
29467: PUSH
29468: LD_INT 3
29470: PUSH
29471: LD_INT 4
29473: PUSH
29474: LD_INT 5
29476: PUSH
29477: EMPTY
29478: LIST
29479: LIST
29480: LIST
29481: LIST
29482: ST_TO_ADDR
29483: GO 30274
29485: LD_INT 7
29487: DOUBLE
29488: EQUAL
29489: IFTRUE 29493
29491: GO 29519
29493: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
29494: LD_ADDR_VAR 0 3
29498: PUSH
29499: LD_INT 2
29501: PUSH
29502: LD_INT 3
29504: PUSH
29505: LD_INT 4
29507: PUSH
29508: LD_INT 5
29510: PUSH
29511: EMPTY
29512: LIST
29513: LIST
29514: LIST
29515: LIST
29516: ST_TO_ADDR
29517: GO 30274
29519: LD_INT 12
29521: DOUBLE
29522: EQUAL
29523: IFTRUE 29527
29525: GO 29553
29527: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
29528: LD_ADDR_VAR 0 3
29532: PUSH
29533: LD_INT 2
29535: PUSH
29536: LD_INT 3
29538: PUSH
29539: LD_INT 4
29541: PUSH
29542: LD_INT 5
29544: PUSH
29545: EMPTY
29546: LIST
29547: LIST
29548: LIST
29549: LIST
29550: ST_TO_ADDR
29551: GO 30274
29553: LD_INT 13
29555: DOUBLE
29556: EQUAL
29557: IFTRUE 29561
29559: GO 29587
29561: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
29562: LD_ADDR_VAR 0 3
29566: PUSH
29567: LD_INT 2
29569: PUSH
29570: LD_INT 3
29572: PUSH
29573: LD_INT 4
29575: PUSH
29576: LD_INT 5
29578: PUSH
29579: EMPTY
29580: LIST
29581: LIST
29582: LIST
29583: LIST
29584: ST_TO_ADDR
29585: GO 30274
29587: LD_INT 14
29589: DOUBLE
29590: EQUAL
29591: IFTRUE 29595
29593: GO 29613
29595: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
29596: LD_ADDR_VAR 0 3
29600: PUSH
29601: LD_INT 4
29603: PUSH
29604: LD_INT 5
29606: PUSH
29607: EMPTY
29608: LIST
29609: LIST
29610: ST_TO_ADDR
29611: GO 30274
29613: LD_INT 6
29615: DOUBLE
29616: EQUAL
29617: IFTRUE 29621
29619: GO 29639
29621: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
29622: LD_ADDR_VAR 0 3
29626: PUSH
29627: LD_INT 4
29629: PUSH
29630: LD_INT 5
29632: PUSH
29633: EMPTY
29634: LIST
29635: LIST
29636: ST_TO_ADDR
29637: GO 30274
29639: LD_INT 10
29641: DOUBLE
29642: EQUAL
29643: IFTRUE 29647
29645: GO 29665
29647: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
29648: LD_ADDR_VAR 0 3
29652: PUSH
29653: LD_INT 4
29655: PUSH
29656: LD_INT 5
29658: PUSH
29659: EMPTY
29660: LIST
29661: LIST
29662: ST_TO_ADDR
29663: GO 30274
29665: LD_INT 22
29667: DOUBLE
29668: EQUAL
29669: IFTRUE 29673
29671: GO 29699
29673: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
29674: LD_ADDR_VAR 0 3
29678: PUSH
29679: LD_INT 11
29681: PUSH
29682: LD_INT 12
29684: PUSH
29685: LD_INT 13
29687: PUSH
29688: LD_INT 14
29690: PUSH
29691: EMPTY
29692: LIST
29693: LIST
29694: LIST
29695: LIST
29696: ST_TO_ADDR
29697: GO 30274
29699: LD_INT 23
29701: DOUBLE
29702: EQUAL
29703: IFTRUE 29707
29705: GO 29733
29707: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
29708: LD_ADDR_VAR 0 3
29712: PUSH
29713: LD_INT 11
29715: PUSH
29716: LD_INT 12
29718: PUSH
29719: LD_INT 13
29721: PUSH
29722: LD_INT 14
29724: PUSH
29725: EMPTY
29726: LIST
29727: LIST
29728: LIST
29729: LIST
29730: ST_TO_ADDR
29731: GO 30274
29733: LD_INT 24
29735: DOUBLE
29736: EQUAL
29737: IFTRUE 29741
29739: GO 29767
29741: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
29742: LD_ADDR_VAR 0 3
29746: PUSH
29747: LD_INT 11
29749: PUSH
29750: LD_INT 12
29752: PUSH
29753: LD_INT 13
29755: PUSH
29756: LD_INT 14
29758: PUSH
29759: EMPTY
29760: LIST
29761: LIST
29762: LIST
29763: LIST
29764: ST_TO_ADDR
29765: GO 30274
29767: LD_INT 30
29769: DOUBLE
29770: EQUAL
29771: IFTRUE 29775
29773: GO 29801
29775: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
29776: LD_ADDR_VAR 0 3
29780: PUSH
29781: LD_INT 11
29783: PUSH
29784: LD_INT 12
29786: PUSH
29787: LD_INT 13
29789: PUSH
29790: LD_INT 14
29792: PUSH
29793: EMPTY
29794: LIST
29795: LIST
29796: LIST
29797: LIST
29798: ST_TO_ADDR
29799: GO 30274
29801: LD_INT 25
29803: DOUBLE
29804: EQUAL
29805: IFTRUE 29809
29807: GO 29827
29809: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
29810: LD_ADDR_VAR 0 3
29814: PUSH
29815: LD_INT 13
29817: PUSH
29818: LD_INT 14
29820: PUSH
29821: EMPTY
29822: LIST
29823: LIST
29824: ST_TO_ADDR
29825: GO 30274
29827: LD_INT 27
29829: DOUBLE
29830: EQUAL
29831: IFTRUE 29835
29833: GO 29853
29835: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
29836: LD_ADDR_VAR 0 3
29840: PUSH
29841: LD_INT 13
29843: PUSH
29844: LD_INT 14
29846: PUSH
29847: EMPTY
29848: LIST
29849: LIST
29850: ST_TO_ADDR
29851: GO 30274
29853: LD_INT 28
29855: DOUBLE
29856: EQUAL
29857: IFTRUE 29861
29859: GO 29879
29861: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
29862: LD_ADDR_VAR 0 3
29866: PUSH
29867: LD_INT 13
29869: PUSH
29870: LD_INT 14
29872: PUSH
29873: EMPTY
29874: LIST
29875: LIST
29876: ST_TO_ADDR
29877: GO 30274
29879: LD_INT 29
29881: DOUBLE
29882: EQUAL
29883: IFTRUE 29887
29885: GO 29905
29887: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
29888: LD_ADDR_VAR 0 3
29892: PUSH
29893: LD_INT 13
29895: PUSH
29896: LD_INT 14
29898: PUSH
29899: EMPTY
29900: LIST
29901: LIST
29902: ST_TO_ADDR
29903: GO 30274
29905: LD_INT 31
29907: DOUBLE
29908: EQUAL
29909: IFTRUE 29913
29911: GO 29931
29913: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
29914: LD_ADDR_VAR 0 3
29918: PUSH
29919: LD_INT 13
29921: PUSH
29922: LD_INT 14
29924: PUSH
29925: EMPTY
29926: LIST
29927: LIST
29928: ST_TO_ADDR
29929: GO 30274
29931: LD_INT 26
29933: DOUBLE
29934: EQUAL
29935: IFTRUE 29939
29937: GO 29957
29939: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
29940: LD_ADDR_VAR 0 3
29944: PUSH
29945: LD_INT 13
29947: PUSH
29948: LD_INT 14
29950: PUSH
29951: EMPTY
29952: LIST
29953: LIST
29954: ST_TO_ADDR
29955: GO 30274
29957: LD_INT 42
29959: DOUBLE
29960: EQUAL
29961: IFTRUE 29965
29963: GO 29991
29965: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
29966: LD_ADDR_VAR 0 3
29970: PUSH
29971: LD_INT 21
29973: PUSH
29974: LD_INT 22
29976: PUSH
29977: LD_INT 23
29979: PUSH
29980: LD_INT 24
29982: PUSH
29983: EMPTY
29984: LIST
29985: LIST
29986: LIST
29987: LIST
29988: ST_TO_ADDR
29989: GO 30274
29991: LD_INT 43
29993: DOUBLE
29994: EQUAL
29995: IFTRUE 29999
29997: GO 30025
29999: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
30000: LD_ADDR_VAR 0 3
30004: PUSH
30005: LD_INT 21
30007: PUSH
30008: LD_INT 22
30010: PUSH
30011: LD_INT 23
30013: PUSH
30014: LD_INT 24
30016: PUSH
30017: EMPTY
30018: LIST
30019: LIST
30020: LIST
30021: LIST
30022: ST_TO_ADDR
30023: GO 30274
30025: LD_INT 44
30027: DOUBLE
30028: EQUAL
30029: IFTRUE 30033
30031: GO 30059
30033: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
30034: LD_ADDR_VAR 0 3
30038: PUSH
30039: LD_INT 21
30041: PUSH
30042: LD_INT 22
30044: PUSH
30045: LD_INT 23
30047: PUSH
30048: LD_INT 24
30050: PUSH
30051: EMPTY
30052: LIST
30053: LIST
30054: LIST
30055: LIST
30056: ST_TO_ADDR
30057: GO 30274
30059: LD_INT 45
30061: DOUBLE
30062: EQUAL
30063: IFTRUE 30067
30065: GO 30093
30067: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
30068: LD_ADDR_VAR 0 3
30072: PUSH
30073: LD_INT 21
30075: PUSH
30076: LD_INT 22
30078: PUSH
30079: LD_INT 23
30081: PUSH
30082: LD_INT 24
30084: PUSH
30085: EMPTY
30086: LIST
30087: LIST
30088: LIST
30089: LIST
30090: ST_TO_ADDR
30091: GO 30274
30093: LD_INT 49
30095: DOUBLE
30096: EQUAL
30097: IFTRUE 30101
30099: GO 30127
30101: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
30102: LD_ADDR_VAR 0 3
30106: PUSH
30107: LD_INT 21
30109: PUSH
30110: LD_INT 22
30112: PUSH
30113: LD_INT 23
30115: PUSH
30116: LD_INT 24
30118: PUSH
30119: EMPTY
30120: LIST
30121: LIST
30122: LIST
30123: LIST
30124: ST_TO_ADDR
30125: GO 30274
30127: LD_INT 51
30129: DOUBLE
30130: EQUAL
30131: IFTRUE 30135
30133: GO 30161
30135: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
30136: LD_ADDR_VAR 0 3
30140: PUSH
30141: LD_INT 21
30143: PUSH
30144: LD_INT 22
30146: PUSH
30147: LD_INT 23
30149: PUSH
30150: LD_INT 24
30152: PUSH
30153: EMPTY
30154: LIST
30155: LIST
30156: LIST
30157: LIST
30158: ST_TO_ADDR
30159: GO 30274
30161: LD_INT 52
30163: DOUBLE
30164: EQUAL
30165: IFTRUE 30169
30167: GO 30195
30169: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
30170: LD_ADDR_VAR 0 3
30174: PUSH
30175: LD_INT 21
30177: PUSH
30178: LD_INT 22
30180: PUSH
30181: LD_INT 23
30183: PUSH
30184: LD_INT 24
30186: PUSH
30187: EMPTY
30188: LIST
30189: LIST
30190: LIST
30191: LIST
30192: ST_TO_ADDR
30193: GO 30274
30195: LD_INT 53
30197: DOUBLE
30198: EQUAL
30199: IFTRUE 30203
30201: GO 30221
30203: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
30204: LD_ADDR_VAR 0 3
30208: PUSH
30209: LD_INT 23
30211: PUSH
30212: LD_INT 24
30214: PUSH
30215: EMPTY
30216: LIST
30217: LIST
30218: ST_TO_ADDR
30219: GO 30274
30221: LD_INT 46
30223: DOUBLE
30224: EQUAL
30225: IFTRUE 30229
30227: GO 30247
30229: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
30230: LD_ADDR_VAR 0 3
30234: PUSH
30235: LD_INT 23
30237: PUSH
30238: LD_INT 24
30240: PUSH
30241: EMPTY
30242: LIST
30243: LIST
30244: ST_TO_ADDR
30245: GO 30274
30247: LD_INT 47
30249: DOUBLE
30250: EQUAL
30251: IFTRUE 30255
30253: GO 30273
30255: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
30256: LD_ADDR_VAR 0 3
30260: PUSH
30261: LD_INT 23
30263: PUSH
30264: LD_INT 24
30266: PUSH
30267: EMPTY
30268: LIST
30269: LIST
30270: ST_TO_ADDR
30271: GO 30274
30273: POP
// result := ( chassis in result ) ;
30274: LD_ADDR_VAR 0 3
30278: PUSH
30279: LD_VAR 0 1
30283: PUSH
30284: LD_VAR 0 3
30288: IN
30289: ST_TO_ADDR
// end ;
30290: LD_VAR 0 3
30294: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
30295: LD_INT 0
30297: PPUSH
30298: PPUSH
30299: PPUSH
30300: PPUSH
30301: PPUSH
30302: PPUSH
30303: PPUSH
// result := array ;
30304: LD_ADDR_VAR 0 5
30308: PUSH
30309: LD_VAR 0 1
30313: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
30314: LD_VAR 0 1
30318: NOT
30319: PUSH
30320: LD_VAR 0 2
30324: NOT
30325: OR
30326: PUSH
30327: LD_VAR 0 3
30331: NOT
30332: OR
30333: PUSH
30334: LD_VAR 0 2
30338: PUSH
30339: LD_VAR 0 1
30343: GREATER
30344: OR
30345: PUSH
30346: LD_VAR 0 3
30350: PUSH
30351: LD_VAR 0 1
30355: GREATER
30356: OR
30357: IFFALSE 30361
// exit ;
30359: GO 30657
// if direction then
30361: LD_VAR 0 4
30365: IFFALSE 30429
// begin d := 1 ;
30367: LD_ADDR_VAR 0 9
30371: PUSH
30372: LD_INT 1
30374: ST_TO_ADDR
// if i_from > i_to then
30375: LD_VAR 0 2
30379: PUSH
30380: LD_VAR 0 3
30384: GREATER
30385: IFFALSE 30411
// length := ( array - i_from ) + i_to else
30387: LD_ADDR_VAR 0 11
30391: PUSH
30392: LD_VAR 0 1
30396: PUSH
30397: LD_VAR 0 2
30401: MINUS
30402: PUSH
30403: LD_VAR 0 3
30407: PLUS
30408: ST_TO_ADDR
30409: GO 30427
// length := i_to - i_from ;
30411: LD_ADDR_VAR 0 11
30415: PUSH
30416: LD_VAR 0 3
30420: PUSH
30421: LD_VAR 0 2
30425: MINUS
30426: ST_TO_ADDR
// end else
30427: GO 30490
// begin d := - 1 ;
30429: LD_ADDR_VAR 0 9
30433: PUSH
30434: LD_INT 1
30436: NEG
30437: ST_TO_ADDR
// if i_from > i_to then
30438: LD_VAR 0 2
30442: PUSH
30443: LD_VAR 0 3
30447: GREATER
30448: IFFALSE 30468
// length := i_from - i_to else
30450: LD_ADDR_VAR 0 11
30454: PUSH
30455: LD_VAR 0 2
30459: PUSH
30460: LD_VAR 0 3
30464: MINUS
30465: ST_TO_ADDR
30466: GO 30490
// length := ( array - i_to ) + i_from ;
30468: LD_ADDR_VAR 0 11
30472: PUSH
30473: LD_VAR 0 1
30477: PUSH
30478: LD_VAR 0 3
30482: MINUS
30483: PUSH
30484: LD_VAR 0 2
30488: PLUS
30489: ST_TO_ADDR
// end ; if not length then
30490: LD_VAR 0 11
30494: NOT
30495: IFFALSE 30499
// exit ;
30497: GO 30657
// tmp := array ;
30499: LD_ADDR_VAR 0 10
30503: PUSH
30504: LD_VAR 0 1
30508: ST_TO_ADDR
// for i = 1 to length do
30509: LD_ADDR_VAR 0 6
30513: PUSH
30514: DOUBLE
30515: LD_INT 1
30517: DEC
30518: ST_TO_ADDR
30519: LD_VAR 0 11
30523: PUSH
30524: FOR_TO
30525: IFFALSE 30645
// begin for j = 1 to array do
30527: LD_ADDR_VAR 0 7
30531: PUSH
30532: DOUBLE
30533: LD_INT 1
30535: DEC
30536: ST_TO_ADDR
30537: LD_VAR 0 1
30541: PUSH
30542: FOR_TO
30543: IFFALSE 30631
// begin k := j + d ;
30545: LD_ADDR_VAR 0 8
30549: PUSH
30550: LD_VAR 0 7
30554: PUSH
30555: LD_VAR 0 9
30559: PLUS
30560: ST_TO_ADDR
// if k > array then
30561: LD_VAR 0 8
30565: PUSH
30566: LD_VAR 0 1
30570: GREATER
30571: IFFALSE 30581
// k := 1 ;
30573: LD_ADDR_VAR 0 8
30577: PUSH
30578: LD_INT 1
30580: ST_TO_ADDR
// if not k then
30581: LD_VAR 0 8
30585: NOT
30586: IFFALSE 30598
// k := array ;
30588: LD_ADDR_VAR 0 8
30592: PUSH
30593: LD_VAR 0 1
30597: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
30598: LD_ADDR_VAR 0 10
30602: PUSH
30603: LD_VAR 0 10
30607: PPUSH
30608: LD_VAR 0 8
30612: PPUSH
30613: LD_VAR 0 1
30617: PUSH
30618: LD_VAR 0 7
30622: ARRAY
30623: PPUSH
30624: CALL_OW 1
30628: ST_TO_ADDR
// end ;
30629: GO 30542
30631: POP
30632: POP
// array := tmp ;
30633: LD_ADDR_VAR 0 1
30637: PUSH
30638: LD_VAR 0 10
30642: ST_TO_ADDR
// end ;
30643: GO 30524
30645: POP
30646: POP
// result := array ;
30647: LD_ADDR_VAR 0 5
30651: PUSH
30652: LD_VAR 0 1
30656: ST_TO_ADDR
// end ;
30657: LD_VAR 0 5
30661: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
30662: LD_INT 0
30664: PPUSH
30665: PPUSH
// result := 0 ;
30666: LD_ADDR_VAR 0 3
30670: PUSH
30671: LD_INT 0
30673: ST_TO_ADDR
// if not array or not value in array then
30674: LD_VAR 0 1
30678: NOT
30679: PUSH
30680: LD_VAR 0 2
30684: PUSH
30685: LD_VAR 0 1
30689: IN
30690: NOT
30691: OR
30692: IFFALSE 30696
// exit ;
30694: GO 30750
// for i = 1 to array do
30696: LD_ADDR_VAR 0 4
30700: PUSH
30701: DOUBLE
30702: LD_INT 1
30704: DEC
30705: ST_TO_ADDR
30706: LD_VAR 0 1
30710: PUSH
30711: FOR_TO
30712: IFFALSE 30748
// if value = array [ i ] then
30714: LD_VAR 0 2
30718: PUSH
30719: LD_VAR 0 1
30723: PUSH
30724: LD_VAR 0 4
30728: ARRAY
30729: EQUAL
30730: IFFALSE 30746
// begin result := i ;
30732: LD_ADDR_VAR 0 3
30736: PUSH
30737: LD_VAR 0 4
30741: ST_TO_ADDR
// exit ;
30742: POP
30743: POP
30744: GO 30750
// end ;
30746: GO 30711
30748: POP
30749: POP
// end ;
30750: LD_VAR 0 3
30754: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
30755: LD_INT 0
30757: PPUSH
// vc_chassis := chassis ;
30758: LD_ADDR_OWVAR 37
30762: PUSH
30763: LD_VAR 0 1
30767: ST_TO_ADDR
// vc_engine := engine ;
30768: LD_ADDR_OWVAR 39
30772: PUSH
30773: LD_VAR 0 2
30777: ST_TO_ADDR
// vc_control := control ;
30778: LD_ADDR_OWVAR 38
30782: PUSH
30783: LD_VAR 0 3
30787: ST_TO_ADDR
// vc_weapon := weapon ;
30788: LD_ADDR_OWVAR 40
30792: PUSH
30793: LD_VAR 0 4
30797: ST_TO_ADDR
// vc_fuel_battery := fuel ;
30798: LD_ADDR_OWVAR 41
30802: PUSH
30803: LD_VAR 0 5
30807: ST_TO_ADDR
// end ;
30808: LD_VAR 0 6
30812: RET
// export function WantPlant ( unit ) ; var task ; begin
30813: LD_INT 0
30815: PPUSH
30816: PPUSH
// result := false ;
30817: LD_ADDR_VAR 0 2
30821: PUSH
30822: LD_INT 0
30824: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
30825: LD_ADDR_VAR 0 3
30829: PUSH
30830: LD_VAR 0 1
30834: PPUSH
30835: CALL_OW 437
30839: ST_TO_ADDR
// if task then
30840: LD_VAR 0 3
30844: IFFALSE 30872
// if task [ 1 ] [ 1 ] = p then
30846: LD_VAR 0 3
30850: PUSH
30851: LD_INT 1
30853: ARRAY
30854: PUSH
30855: LD_INT 1
30857: ARRAY
30858: PUSH
30859: LD_STRING p
30861: EQUAL
30862: IFFALSE 30872
// result := true ;
30864: LD_ADDR_VAR 0 2
30868: PUSH
30869: LD_INT 1
30871: ST_TO_ADDR
// end ;
30872: LD_VAR 0 2
30876: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
30877: LD_INT 0
30879: PPUSH
30880: PPUSH
30881: PPUSH
30882: PPUSH
// if pos < 1 then
30883: LD_VAR 0 2
30887: PUSH
30888: LD_INT 1
30890: LESS
30891: IFFALSE 30895
// exit ;
30893: GO 31198
// if pos = 1 then
30895: LD_VAR 0 2
30899: PUSH
30900: LD_INT 1
30902: EQUAL
30903: IFFALSE 30936
// result := Replace ( arr , pos [ 1 ] , value ) else
30905: LD_ADDR_VAR 0 4
30909: PUSH
30910: LD_VAR 0 1
30914: PPUSH
30915: LD_VAR 0 2
30919: PUSH
30920: LD_INT 1
30922: ARRAY
30923: PPUSH
30924: LD_VAR 0 3
30928: PPUSH
30929: CALL_OW 1
30933: ST_TO_ADDR
30934: GO 31198
// begin tmp := arr ;
30936: LD_ADDR_VAR 0 6
30940: PUSH
30941: LD_VAR 0 1
30945: ST_TO_ADDR
// s_arr := [ tmp ] ;
30946: LD_ADDR_VAR 0 7
30950: PUSH
30951: LD_VAR 0 6
30955: PUSH
30956: EMPTY
30957: LIST
30958: ST_TO_ADDR
// for i = 1 to pos - 1 do
30959: LD_ADDR_VAR 0 5
30963: PUSH
30964: DOUBLE
30965: LD_INT 1
30967: DEC
30968: ST_TO_ADDR
30969: LD_VAR 0 2
30973: PUSH
30974: LD_INT 1
30976: MINUS
30977: PUSH
30978: FOR_TO
30979: IFFALSE 31024
// begin tmp := tmp [ pos [ i ] ] ;
30981: LD_ADDR_VAR 0 6
30985: PUSH
30986: LD_VAR 0 6
30990: PUSH
30991: LD_VAR 0 2
30995: PUSH
30996: LD_VAR 0 5
31000: ARRAY
31001: ARRAY
31002: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
31003: LD_ADDR_VAR 0 7
31007: PUSH
31008: LD_VAR 0 7
31012: PUSH
31013: LD_VAR 0 6
31017: PUSH
31018: EMPTY
31019: LIST
31020: ADD
31021: ST_TO_ADDR
// end ;
31022: GO 30978
31024: POP
31025: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
31026: LD_ADDR_VAR 0 6
31030: PUSH
31031: LD_VAR 0 6
31035: PPUSH
31036: LD_VAR 0 2
31040: PUSH
31041: LD_VAR 0 2
31045: ARRAY
31046: PPUSH
31047: LD_VAR 0 3
31051: PPUSH
31052: CALL_OW 1
31056: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
31057: LD_ADDR_VAR 0 7
31061: PUSH
31062: LD_VAR 0 7
31066: PPUSH
31067: LD_VAR 0 7
31071: PPUSH
31072: LD_VAR 0 6
31076: PPUSH
31077: CALL_OW 1
31081: ST_TO_ADDR
// for i = s_arr downto 2 do
31082: LD_ADDR_VAR 0 5
31086: PUSH
31087: DOUBLE
31088: LD_VAR 0 7
31092: INC
31093: ST_TO_ADDR
31094: LD_INT 2
31096: PUSH
31097: FOR_DOWNTO
31098: IFFALSE 31182
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
31100: LD_ADDR_VAR 0 6
31104: PUSH
31105: LD_VAR 0 7
31109: PUSH
31110: LD_VAR 0 5
31114: PUSH
31115: LD_INT 1
31117: MINUS
31118: ARRAY
31119: PPUSH
31120: LD_VAR 0 2
31124: PUSH
31125: LD_VAR 0 5
31129: PUSH
31130: LD_INT 1
31132: MINUS
31133: ARRAY
31134: PPUSH
31135: LD_VAR 0 7
31139: PUSH
31140: LD_VAR 0 5
31144: ARRAY
31145: PPUSH
31146: CALL_OW 1
31150: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
31151: LD_ADDR_VAR 0 7
31155: PUSH
31156: LD_VAR 0 7
31160: PPUSH
31161: LD_VAR 0 5
31165: PUSH
31166: LD_INT 1
31168: MINUS
31169: PPUSH
31170: LD_VAR 0 6
31174: PPUSH
31175: CALL_OW 1
31179: ST_TO_ADDR
// end ;
31180: GO 31097
31182: POP
31183: POP
// result := s_arr [ 1 ] ;
31184: LD_ADDR_VAR 0 4
31188: PUSH
31189: LD_VAR 0 7
31193: PUSH
31194: LD_INT 1
31196: ARRAY
31197: ST_TO_ADDR
// end ; end ;
31198: LD_VAR 0 4
31202: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
31203: LD_INT 0
31205: PPUSH
31206: PPUSH
// if not list then
31207: LD_VAR 0 1
31211: NOT
31212: IFFALSE 31216
// exit ;
31214: GO 31307
// i := list [ pos1 ] ;
31216: LD_ADDR_VAR 0 5
31220: PUSH
31221: LD_VAR 0 1
31225: PUSH
31226: LD_VAR 0 2
31230: ARRAY
31231: ST_TO_ADDR
// if not i then
31232: LD_VAR 0 5
31236: NOT
31237: IFFALSE 31241
// exit ;
31239: GO 31307
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
31241: LD_ADDR_VAR 0 1
31245: PUSH
31246: LD_VAR 0 1
31250: PPUSH
31251: LD_VAR 0 2
31255: PPUSH
31256: LD_VAR 0 1
31260: PUSH
31261: LD_VAR 0 3
31265: ARRAY
31266: PPUSH
31267: CALL_OW 1
31271: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
31272: LD_ADDR_VAR 0 1
31276: PUSH
31277: LD_VAR 0 1
31281: PPUSH
31282: LD_VAR 0 3
31286: PPUSH
31287: LD_VAR 0 5
31291: PPUSH
31292: CALL_OW 1
31296: ST_TO_ADDR
// result := list ;
31297: LD_ADDR_VAR 0 4
31301: PUSH
31302: LD_VAR 0 1
31306: ST_TO_ADDR
// end ;
31307: LD_VAR 0 4
31311: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
31312: LD_INT 0
31314: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
31315: LD_ADDR_VAR 0 5
31319: PUSH
31320: LD_VAR 0 1
31324: PPUSH
31325: CALL_OW 250
31329: PPUSH
31330: LD_VAR 0 1
31334: PPUSH
31335: CALL_OW 251
31339: PPUSH
31340: LD_VAR 0 2
31344: PPUSH
31345: LD_VAR 0 3
31349: PPUSH
31350: LD_VAR 0 4
31354: PPUSH
31355: CALL 31365 0 5
31359: ST_TO_ADDR
// end ;
31360: LD_VAR 0 5
31364: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
31365: LD_INT 0
31367: PPUSH
31368: PPUSH
31369: PPUSH
31370: PPUSH
// if not list then
31371: LD_VAR 0 3
31375: NOT
31376: IFFALSE 31380
// exit ;
31378: GO 31768
// result := [ ] ;
31380: LD_ADDR_VAR 0 6
31384: PUSH
31385: EMPTY
31386: ST_TO_ADDR
// for i in list do
31387: LD_ADDR_VAR 0 7
31391: PUSH
31392: LD_VAR 0 3
31396: PUSH
31397: FOR_IN
31398: IFFALSE 31600
// begin tmp := GetDistUnitXY ( i , x , y ) ;
31400: LD_ADDR_VAR 0 9
31404: PUSH
31405: LD_VAR 0 7
31409: PPUSH
31410: LD_VAR 0 1
31414: PPUSH
31415: LD_VAR 0 2
31419: PPUSH
31420: CALL_OW 297
31424: ST_TO_ADDR
// if not result then
31425: LD_VAR 0 6
31429: NOT
31430: IFFALSE 31456
// result := [ [ i , tmp ] ] else
31432: LD_ADDR_VAR 0 6
31436: PUSH
31437: LD_VAR 0 7
31441: PUSH
31442: LD_VAR 0 9
31446: PUSH
31447: EMPTY
31448: LIST
31449: LIST
31450: PUSH
31451: EMPTY
31452: LIST
31453: ST_TO_ADDR
31454: GO 31598
// begin if result [ result ] [ 2 ] < tmp then
31456: LD_VAR 0 6
31460: PUSH
31461: LD_VAR 0 6
31465: ARRAY
31466: PUSH
31467: LD_INT 2
31469: ARRAY
31470: PUSH
31471: LD_VAR 0 9
31475: LESS
31476: IFFALSE 31518
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
31478: LD_ADDR_VAR 0 6
31482: PUSH
31483: LD_VAR 0 6
31487: PPUSH
31488: LD_VAR 0 6
31492: PUSH
31493: LD_INT 1
31495: PLUS
31496: PPUSH
31497: LD_VAR 0 7
31501: PUSH
31502: LD_VAR 0 9
31506: PUSH
31507: EMPTY
31508: LIST
31509: LIST
31510: PPUSH
31511: CALL_OW 2
31515: ST_TO_ADDR
31516: GO 31598
// for j = 1 to result do
31518: LD_ADDR_VAR 0 8
31522: PUSH
31523: DOUBLE
31524: LD_INT 1
31526: DEC
31527: ST_TO_ADDR
31528: LD_VAR 0 6
31532: PUSH
31533: FOR_TO
31534: IFFALSE 31596
// begin if tmp < result [ j ] [ 2 ] then
31536: LD_VAR 0 9
31540: PUSH
31541: LD_VAR 0 6
31545: PUSH
31546: LD_VAR 0 8
31550: ARRAY
31551: PUSH
31552: LD_INT 2
31554: ARRAY
31555: LESS
31556: IFFALSE 31594
// begin result := Insert ( result , j , [ i , tmp ] ) ;
31558: LD_ADDR_VAR 0 6
31562: PUSH
31563: LD_VAR 0 6
31567: PPUSH
31568: LD_VAR 0 8
31572: PPUSH
31573: LD_VAR 0 7
31577: PUSH
31578: LD_VAR 0 9
31582: PUSH
31583: EMPTY
31584: LIST
31585: LIST
31586: PPUSH
31587: CALL_OW 2
31591: ST_TO_ADDR
// break ;
31592: GO 31596
// end ; end ;
31594: GO 31533
31596: POP
31597: POP
// end ; end ;
31598: GO 31397
31600: POP
31601: POP
// if result and not asc then
31602: LD_VAR 0 6
31606: PUSH
31607: LD_VAR 0 4
31611: NOT
31612: AND
31613: IFFALSE 31688
// begin tmp := result ;
31615: LD_ADDR_VAR 0 9
31619: PUSH
31620: LD_VAR 0 6
31624: ST_TO_ADDR
// for i = tmp downto 1 do
31625: LD_ADDR_VAR 0 7
31629: PUSH
31630: DOUBLE
31631: LD_VAR 0 9
31635: INC
31636: ST_TO_ADDR
31637: LD_INT 1
31639: PUSH
31640: FOR_DOWNTO
31641: IFFALSE 31686
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
31643: LD_ADDR_VAR 0 6
31647: PUSH
31648: LD_VAR 0 6
31652: PPUSH
31653: LD_VAR 0 9
31657: PUSH
31658: LD_VAR 0 7
31662: MINUS
31663: PUSH
31664: LD_INT 1
31666: PLUS
31667: PPUSH
31668: LD_VAR 0 9
31672: PUSH
31673: LD_VAR 0 7
31677: ARRAY
31678: PPUSH
31679: CALL_OW 1
31683: ST_TO_ADDR
31684: GO 31640
31686: POP
31687: POP
// end ; tmp := [ ] ;
31688: LD_ADDR_VAR 0 9
31692: PUSH
31693: EMPTY
31694: ST_TO_ADDR
// if mode then
31695: LD_VAR 0 5
31699: IFFALSE 31768
// begin for i = 1 to result do
31701: LD_ADDR_VAR 0 7
31705: PUSH
31706: DOUBLE
31707: LD_INT 1
31709: DEC
31710: ST_TO_ADDR
31711: LD_VAR 0 6
31715: PUSH
31716: FOR_TO
31717: IFFALSE 31756
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
31719: LD_ADDR_VAR 0 9
31723: PUSH
31724: LD_VAR 0 9
31728: PPUSH
31729: LD_VAR 0 7
31733: PPUSH
31734: LD_VAR 0 6
31738: PUSH
31739: LD_VAR 0 7
31743: ARRAY
31744: PUSH
31745: LD_INT 1
31747: ARRAY
31748: PPUSH
31749: CALL_OW 1
31753: ST_TO_ADDR
31754: GO 31716
31756: POP
31757: POP
// result := tmp ;
31758: LD_ADDR_VAR 0 6
31762: PUSH
31763: LD_VAR 0 9
31767: ST_TO_ADDR
// end ; end ;
31768: LD_VAR 0 6
31772: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
31773: LD_INT 0
31775: PPUSH
31776: PPUSH
31777: PPUSH
31778: PPUSH
31779: PPUSH
31780: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
31781: LD_ADDR_VAR 0 5
31785: PUSH
31786: LD_INT 0
31788: PUSH
31789: LD_INT 0
31791: PUSH
31792: LD_INT 0
31794: PUSH
31795: EMPTY
31796: PUSH
31797: EMPTY
31798: LIST
31799: LIST
31800: LIST
31801: LIST
31802: ST_TO_ADDR
// if not x or not y then
31803: LD_VAR 0 2
31807: NOT
31808: PUSH
31809: LD_VAR 0 3
31813: NOT
31814: OR
31815: IFFALSE 31819
// exit ;
31817: GO 33465
// if not range then
31819: LD_VAR 0 4
31823: NOT
31824: IFFALSE 31834
// range := 10 ;
31826: LD_ADDR_VAR 0 4
31830: PUSH
31831: LD_INT 10
31833: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31834: LD_ADDR_VAR 0 8
31838: PUSH
31839: LD_INT 81
31841: PUSH
31842: LD_VAR 0 1
31846: PUSH
31847: EMPTY
31848: LIST
31849: LIST
31850: PUSH
31851: LD_INT 92
31853: PUSH
31854: LD_VAR 0 2
31858: PUSH
31859: LD_VAR 0 3
31863: PUSH
31864: LD_VAR 0 4
31868: PUSH
31869: EMPTY
31870: LIST
31871: LIST
31872: LIST
31873: LIST
31874: PUSH
31875: LD_INT 3
31877: PUSH
31878: LD_INT 21
31880: PUSH
31881: LD_INT 3
31883: PUSH
31884: EMPTY
31885: LIST
31886: LIST
31887: PUSH
31888: EMPTY
31889: LIST
31890: LIST
31891: PUSH
31892: EMPTY
31893: LIST
31894: LIST
31895: LIST
31896: PPUSH
31897: CALL_OW 69
31901: ST_TO_ADDR
// if not tmp then
31902: LD_VAR 0 8
31906: NOT
31907: IFFALSE 31911
// exit ;
31909: GO 33465
// for i in tmp do
31911: LD_ADDR_VAR 0 6
31915: PUSH
31916: LD_VAR 0 8
31920: PUSH
31921: FOR_IN
31922: IFFALSE 33440
// begin points := [ 0 , 0 , 0 ] ;
31924: LD_ADDR_VAR 0 9
31928: PUSH
31929: LD_INT 0
31931: PUSH
31932: LD_INT 0
31934: PUSH
31935: LD_INT 0
31937: PUSH
31938: EMPTY
31939: LIST
31940: LIST
31941: LIST
31942: ST_TO_ADDR
// bpoints := 1 ;
31943: LD_ADDR_VAR 0 10
31947: PUSH
31948: LD_INT 1
31950: ST_TO_ADDR
// case GetType ( i ) of unit_human :
31951: LD_VAR 0 6
31955: PPUSH
31956: CALL_OW 247
31960: PUSH
31961: LD_INT 1
31963: DOUBLE
31964: EQUAL
31965: IFTRUE 31969
31967: GO 32547
31969: POP
// begin if GetClass ( i ) = 1 then
31970: LD_VAR 0 6
31974: PPUSH
31975: CALL_OW 257
31979: PUSH
31980: LD_INT 1
31982: EQUAL
31983: IFFALSE 32004
// points := [ 10 , 5 , 3 ] ;
31985: LD_ADDR_VAR 0 9
31989: PUSH
31990: LD_INT 10
31992: PUSH
31993: LD_INT 5
31995: PUSH
31996: LD_INT 3
31998: PUSH
31999: EMPTY
32000: LIST
32001: LIST
32002: LIST
32003: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
32004: LD_VAR 0 6
32008: PPUSH
32009: CALL_OW 257
32013: PUSH
32014: LD_INT 2
32016: PUSH
32017: LD_INT 3
32019: PUSH
32020: LD_INT 4
32022: PUSH
32023: EMPTY
32024: LIST
32025: LIST
32026: LIST
32027: IN
32028: IFFALSE 32049
// points := [ 3 , 2 , 1 ] ;
32030: LD_ADDR_VAR 0 9
32034: PUSH
32035: LD_INT 3
32037: PUSH
32038: LD_INT 2
32040: PUSH
32041: LD_INT 1
32043: PUSH
32044: EMPTY
32045: LIST
32046: LIST
32047: LIST
32048: ST_TO_ADDR
// if GetClass ( i ) = 5 then
32049: LD_VAR 0 6
32053: PPUSH
32054: CALL_OW 257
32058: PUSH
32059: LD_INT 5
32061: EQUAL
32062: IFFALSE 32083
// points := [ 130 , 5 , 2 ] ;
32064: LD_ADDR_VAR 0 9
32068: PUSH
32069: LD_INT 130
32071: PUSH
32072: LD_INT 5
32074: PUSH
32075: LD_INT 2
32077: PUSH
32078: EMPTY
32079: LIST
32080: LIST
32081: LIST
32082: ST_TO_ADDR
// if GetClass ( i ) = 8 then
32083: LD_VAR 0 6
32087: PPUSH
32088: CALL_OW 257
32092: PUSH
32093: LD_INT 8
32095: EQUAL
32096: IFFALSE 32117
// points := [ 35 , 35 , 30 ] ;
32098: LD_ADDR_VAR 0 9
32102: PUSH
32103: LD_INT 35
32105: PUSH
32106: LD_INT 35
32108: PUSH
32109: LD_INT 30
32111: PUSH
32112: EMPTY
32113: LIST
32114: LIST
32115: LIST
32116: ST_TO_ADDR
// if GetClass ( i ) = 9 then
32117: LD_VAR 0 6
32121: PPUSH
32122: CALL_OW 257
32126: PUSH
32127: LD_INT 9
32129: EQUAL
32130: IFFALSE 32151
// points := [ 20 , 55 , 40 ] ;
32132: LD_ADDR_VAR 0 9
32136: PUSH
32137: LD_INT 20
32139: PUSH
32140: LD_INT 55
32142: PUSH
32143: LD_INT 40
32145: PUSH
32146: EMPTY
32147: LIST
32148: LIST
32149: LIST
32150: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
32151: LD_VAR 0 6
32155: PPUSH
32156: CALL_OW 257
32160: PUSH
32161: LD_INT 12
32163: PUSH
32164: LD_INT 16
32166: PUSH
32167: EMPTY
32168: LIST
32169: LIST
32170: IN
32171: IFFALSE 32192
// points := [ 5 , 3 , 2 ] ;
32173: LD_ADDR_VAR 0 9
32177: PUSH
32178: LD_INT 5
32180: PUSH
32181: LD_INT 3
32183: PUSH
32184: LD_INT 2
32186: PUSH
32187: EMPTY
32188: LIST
32189: LIST
32190: LIST
32191: ST_TO_ADDR
// if GetClass ( i ) = 17 then
32192: LD_VAR 0 6
32196: PPUSH
32197: CALL_OW 257
32201: PUSH
32202: LD_INT 17
32204: EQUAL
32205: IFFALSE 32226
// points := [ 100 , 50 , 75 ] ;
32207: LD_ADDR_VAR 0 9
32211: PUSH
32212: LD_INT 100
32214: PUSH
32215: LD_INT 50
32217: PUSH
32218: LD_INT 75
32220: PUSH
32221: EMPTY
32222: LIST
32223: LIST
32224: LIST
32225: ST_TO_ADDR
// if GetClass ( i ) = 15 then
32226: LD_VAR 0 6
32230: PPUSH
32231: CALL_OW 257
32235: PUSH
32236: LD_INT 15
32238: EQUAL
32239: IFFALSE 32260
// points := [ 10 , 5 , 3 ] ;
32241: LD_ADDR_VAR 0 9
32245: PUSH
32246: LD_INT 10
32248: PUSH
32249: LD_INT 5
32251: PUSH
32252: LD_INT 3
32254: PUSH
32255: EMPTY
32256: LIST
32257: LIST
32258: LIST
32259: ST_TO_ADDR
// if GetClass ( i ) = 14 then
32260: LD_VAR 0 6
32264: PPUSH
32265: CALL_OW 257
32269: PUSH
32270: LD_INT 14
32272: EQUAL
32273: IFFALSE 32294
// points := [ 10 , 0 , 0 ] ;
32275: LD_ADDR_VAR 0 9
32279: PUSH
32280: LD_INT 10
32282: PUSH
32283: LD_INT 0
32285: PUSH
32286: LD_INT 0
32288: PUSH
32289: EMPTY
32290: LIST
32291: LIST
32292: LIST
32293: ST_TO_ADDR
// if GetClass ( i ) = 11 then
32294: LD_VAR 0 6
32298: PPUSH
32299: CALL_OW 257
32303: PUSH
32304: LD_INT 11
32306: EQUAL
32307: IFFALSE 32328
// points := [ 30 , 10 , 5 ] ;
32309: LD_ADDR_VAR 0 9
32313: PUSH
32314: LD_INT 30
32316: PUSH
32317: LD_INT 10
32319: PUSH
32320: LD_INT 5
32322: PUSH
32323: EMPTY
32324: LIST
32325: LIST
32326: LIST
32327: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
32328: LD_VAR 0 1
32332: PPUSH
32333: LD_INT 5
32335: PPUSH
32336: CALL_OW 321
32340: PUSH
32341: LD_INT 2
32343: EQUAL
32344: IFFALSE 32361
// bpoints := bpoints * 1.8 ;
32346: LD_ADDR_VAR 0 10
32350: PUSH
32351: LD_VAR 0 10
32355: PUSH
32356: LD_REAL  1.80000000000000E+0000
32359: MUL
32360: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
32361: LD_VAR 0 6
32365: PPUSH
32366: CALL_OW 257
32370: PUSH
32371: LD_INT 1
32373: PUSH
32374: LD_INT 2
32376: PUSH
32377: LD_INT 3
32379: PUSH
32380: LD_INT 4
32382: PUSH
32383: EMPTY
32384: LIST
32385: LIST
32386: LIST
32387: LIST
32388: IN
32389: PUSH
32390: LD_VAR 0 1
32394: PPUSH
32395: LD_INT 51
32397: PPUSH
32398: CALL_OW 321
32402: PUSH
32403: LD_INT 2
32405: EQUAL
32406: AND
32407: IFFALSE 32424
// bpoints := bpoints * 1.2 ;
32409: LD_ADDR_VAR 0 10
32413: PUSH
32414: LD_VAR 0 10
32418: PUSH
32419: LD_REAL  1.20000000000000E+0000
32422: MUL
32423: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
32424: LD_VAR 0 6
32428: PPUSH
32429: CALL_OW 257
32433: PUSH
32434: LD_INT 5
32436: PUSH
32437: LD_INT 7
32439: PUSH
32440: LD_INT 9
32442: PUSH
32443: EMPTY
32444: LIST
32445: LIST
32446: LIST
32447: IN
32448: PUSH
32449: LD_VAR 0 1
32453: PPUSH
32454: LD_INT 52
32456: PPUSH
32457: CALL_OW 321
32461: PUSH
32462: LD_INT 2
32464: EQUAL
32465: AND
32466: IFFALSE 32483
// bpoints := bpoints * 1.5 ;
32468: LD_ADDR_VAR 0 10
32472: PUSH
32473: LD_VAR 0 10
32477: PUSH
32478: LD_REAL  1.50000000000000E+0000
32481: MUL
32482: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
32483: LD_VAR 0 1
32487: PPUSH
32488: LD_INT 66
32490: PPUSH
32491: CALL_OW 321
32495: PUSH
32496: LD_INT 2
32498: EQUAL
32499: IFFALSE 32516
// bpoints := bpoints * 1.1 ;
32501: LD_ADDR_VAR 0 10
32505: PUSH
32506: LD_VAR 0 10
32510: PUSH
32511: LD_REAL  1.10000000000000E+0000
32514: MUL
32515: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
32516: LD_ADDR_VAR 0 10
32520: PUSH
32521: LD_VAR 0 10
32525: PUSH
32526: LD_VAR 0 6
32530: PPUSH
32531: LD_INT 1
32533: PPUSH
32534: CALL_OW 259
32538: PUSH
32539: LD_REAL  1.15000000000000E+0000
32542: MUL
32543: MUL
32544: ST_TO_ADDR
// end ; unit_vehicle :
32545: GO 33369
32547: LD_INT 2
32549: DOUBLE
32550: EQUAL
32551: IFTRUE 32555
32553: GO 33357
32555: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
32556: LD_VAR 0 6
32560: PPUSH
32561: CALL_OW 264
32565: PUSH
32566: LD_INT 2
32568: PUSH
32569: LD_INT 42
32571: PUSH
32572: LD_INT 24
32574: PUSH
32575: EMPTY
32576: LIST
32577: LIST
32578: LIST
32579: IN
32580: IFFALSE 32601
// points := [ 25 , 5 , 3 ] ;
32582: LD_ADDR_VAR 0 9
32586: PUSH
32587: LD_INT 25
32589: PUSH
32590: LD_INT 5
32592: PUSH
32593: LD_INT 3
32595: PUSH
32596: EMPTY
32597: LIST
32598: LIST
32599: LIST
32600: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
32601: LD_VAR 0 6
32605: PPUSH
32606: CALL_OW 264
32610: PUSH
32611: LD_INT 4
32613: PUSH
32614: LD_INT 43
32616: PUSH
32617: LD_INT 25
32619: PUSH
32620: EMPTY
32621: LIST
32622: LIST
32623: LIST
32624: IN
32625: IFFALSE 32646
// points := [ 40 , 15 , 5 ] ;
32627: LD_ADDR_VAR 0 9
32631: PUSH
32632: LD_INT 40
32634: PUSH
32635: LD_INT 15
32637: PUSH
32638: LD_INT 5
32640: PUSH
32641: EMPTY
32642: LIST
32643: LIST
32644: LIST
32645: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
32646: LD_VAR 0 6
32650: PPUSH
32651: CALL_OW 264
32655: PUSH
32656: LD_INT 3
32658: PUSH
32659: LD_INT 23
32661: PUSH
32662: EMPTY
32663: LIST
32664: LIST
32665: IN
32666: IFFALSE 32687
// points := [ 7 , 25 , 8 ] ;
32668: LD_ADDR_VAR 0 9
32672: PUSH
32673: LD_INT 7
32675: PUSH
32676: LD_INT 25
32678: PUSH
32679: LD_INT 8
32681: PUSH
32682: EMPTY
32683: LIST
32684: LIST
32685: LIST
32686: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
32687: LD_VAR 0 6
32691: PPUSH
32692: CALL_OW 264
32696: PUSH
32697: LD_INT 5
32699: PUSH
32700: LD_INT 27
32702: PUSH
32703: LD_INT 44
32705: PUSH
32706: EMPTY
32707: LIST
32708: LIST
32709: LIST
32710: IN
32711: IFFALSE 32732
// points := [ 14 , 50 , 16 ] ;
32713: LD_ADDR_VAR 0 9
32717: PUSH
32718: LD_INT 14
32720: PUSH
32721: LD_INT 50
32723: PUSH
32724: LD_INT 16
32726: PUSH
32727: EMPTY
32728: LIST
32729: LIST
32730: LIST
32731: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
32732: LD_VAR 0 6
32736: PPUSH
32737: CALL_OW 264
32741: PUSH
32742: LD_INT 6
32744: PUSH
32745: LD_INT 46
32747: PUSH
32748: EMPTY
32749: LIST
32750: LIST
32751: IN
32752: IFFALSE 32773
// points := [ 32 , 120 , 70 ] ;
32754: LD_ADDR_VAR 0 9
32758: PUSH
32759: LD_INT 32
32761: PUSH
32762: LD_INT 120
32764: PUSH
32765: LD_INT 70
32767: PUSH
32768: EMPTY
32769: LIST
32770: LIST
32771: LIST
32772: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
32773: LD_VAR 0 6
32777: PPUSH
32778: CALL_OW 264
32782: PUSH
32783: LD_INT 7
32785: PUSH
32786: LD_INT 28
32788: PUSH
32789: LD_INT 45
32791: PUSH
32792: EMPTY
32793: LIST
32794: LIST
32795: LIST
32796: IN
32797: IFFALSE 32818
// points := [ 35 , 20 , 45 ] ;
32799: LD_ADDR_VAR 0 9
32803: PUSH
32804: LD_INT 35
32806: PUSH
32807: LD_INT 20
32809: PUSH
32810: LD_INT 45
32812: PUSH
32813: EMPTY
32814: LIST
32815: LIST
32816: LIST
32817: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
32818: LD_VAR 0 6
32822: PPUSH
32823: CALL_OW 264
32827: PUSH
32828: LD_INT 47
32830: PUSH
32831: EMPTY
32832: LIST
32833: IN
32834: IFFALSE 32855
// points := [ 67 , 45 , 75 ] ;
32836: LD_ADDR_VAR 0 9
32840: PUSH
32841: LD_INT 67
32843: PUSH
32844: LD_INT 45
32846: PUSH
32847: LD_INT 75
32849: PUSH
32850: EMPTY
32851: LIST
32852: LIST
32853: LIST
32854: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
32855: LD_VAR 0 6
32859: PPUSH
32860: CALL_OW 264
32864: PUSH
32865: LD_INT 26
32867: PUSH
32868: EMPTY
32869: LIST
32870: IN
32871: IFFALSE 32892
// points := [ 120 , 30 , 80 ] ;
32873: LD_ADDR_VAR 0 9
32877: PUSH
32878: LD_INT 120
32880: PUSH
32881: LD_INT 30
32883: PUSH
32884: LD_INT 80
32886: PUSH
32887: EMPTY
32888: LIST
32889: LIST
32890: LIST
32891: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
32892: LD_VAR 0 6
32896: PPUSH
32897: CALL_OW 264
32901: PUSH
32902: LD_INT 22
32904: PUSH
32905: EMPTY
32906: LIST
32907: IN
32908: IFFALSE 32929
// points := [ 40 , 1 , 1 ] ;
32910: LD_ADDR_VAR 0 9
32914: PUSH
32915: LD_INT 40
32917: PUSH
32918: LD_INT 1
32920: PUSH
32921: LD_INT 1
32923: PUSH
32924: EMPTY
32925: LIST
32926: LIST
32927: LIST
32928: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
32929: LD_VAR 0 6
32933: PPUSH
32934: CALL_OW 264
32938: PUSH
32939: LD_INT 29
32941: PUSH
32942: EMPTY
32943: LIST
32944: IN
32945: IFFALSE 32966
// points := [ 70 , 200 , 400 ] ;
32947: LD_ADDR_VAR 0 9
32951: PUSH
32952: LD_INT 70
32954: PUSH
32955: LD_INT 200
32957: PUSH
32958: LD_INT 400
32960: PUSH
32961: EMPTY
32962: LIST
32963: LIST
32964: LIST
32965: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
32966: LD_VAR 0 6
32970: PPUSH
32971: CALL_OW 264
32975: PUSH
32976: LD_INT 14
32978: PUSH
32979: LD_INT 53
32981: PUSH
32982: EMPTY
32983: LIST
32984: LIST
32985: IN
32986: IFFALSE 33007
// points := [ 40 , 10 , 20 ] ;
32988: LD_ADDR_VAR 0 9
32992: PUSH
32993: LD_INT 40
32995: PUSH
32996: LD_INT 10
32998: PUSH
32999: LD_INT 20
33001: PUSH
33002: EMPTY
33003: LIST
33004: LIST
33005: LIST
33006: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
33007: LD_VAR 0 6
33011: PPUSH
33012: CALL_OW 264
33016: PUSH
33017: LD_INT 9
33019: PUSH
33020: EMPTY
33021: LIST
33022: IN
33023: IFFALSE 33044
// points := [ 5 , 70 , 20 ] ;
33025: LD_ADDR_VAR 0 9
33029: PUSH
33030: LD_INT 5
33032: PUSH
33033: LD_INT 70
33035: PUSH
33036: LD_INT 20
33038: PUSH
33039: EMPTY
33040: LIST
33041: LIST
33042: LIST
33043: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
33044: LD_VAR 0 6
33048: PPUSH
33049: CALL_OW 264
33053: PUSH
33054: LD_INT 10
33056: PUSH
33057: EMPTY
33058: LIST
33059: IN
33060: IFFALSE 33081
// points := [ 35 , 110 , 70 ] ;
33062: LD_ADDR_VAR 0 9
33066: PUSH
33067: LD_INT 35
33069: PUSH
33070: LD_INT 110
33072: PUSH
33073: LD_INT 70
33075: PUSH
33076: EMPTY
33077: LIST
33078: LIST
33079: LIST
33080: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
33081: LD_VAR 0 6
33085: PPUSH
33086: CALL_OW 265
33090: PUSH
33091: LD_INT 25
33093: EQUAL
33094: IFFALSE 33115
// points := [ 80 , 65 , 100 ] ;
33096: LD_ADDR_VAR 0 9
33100: PUSH
33101: LD_INT 80
33103: PUSH
33104: LD_INT 65
33106: PUSH
33107: LD_INT 100
33109: PUSH
33110: EMPTY
33111: LIST
33112: LIST
33113: LIST
33114: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
33115: LD_VAR 0 6
33119: PPUSH
33120: CALL_OW 263
33124: PUSH
33125: LD_INT 1
33127: EQUAL
33128: IFFALSE 33163
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
33130: LD_ADDR_VAR 0 10
33134: PUSH
33135: LD_VAR 0 10
33139: PUSH
33140: LD_VAR 0 6
33144: PPUSH
33145: CALL_OW 311
33149: PPUSH
33150: LD_INT 3
33152: PPUSH
33153: CALL_OW 259
33157: PUSH
33158: LD_INT 4
33160: MUL
33161: MUL
33162: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
33163: LD_VAR 0 6
33167: PPUSH
33168: CALL_OW 263
33172: PUSH
33173: LD_INT 2
33175: EQUAL
33176: IFFALSE 33227
// begin j := IsControledBy ( i ) ;
33178: LD_ADDR_VAR 0 7
33182: PUSH
33183: LD_VAR 0 6
33187: PPUSH
33188: CALL_OW 312
33192: ST_TO_ADDR
// if j then
33193: LD_VAR 0 7
33197: IFFALSE 33227
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
33199: LD_ADDR_VAR 0 10
33203: PUSH
33204: LD_VAR 0 10
33208: PUSH
33209: LD_VAR 0 7
33213: PPUSH
33214: LD_INT 3
33216: PPUSH
33217: CALL_OW 259
33221: PUSH
33222: LD_INT 3
33224: MUL
33225: MUL
33226: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
33227: LD_VAR 0 6
33231: PPUSH
33232: CALL_OW 264
33236: PUSH
33237: LD_INT 5
33239: PUSH
33240: LD_INT 6
33242: PUSH
33243: LD_INT 46
33245: PUSH
33246: LD_INT 44
33248: PUSH
33249: LD_INT 47
33251: PUSH
33252: LD_INT 45
33254: PUSH
33255: LD_INT 28
33257: PUSH
33258: LD_INT 7
33260: PUSH
33261: LD_INT 27
33263: PUSH
33264: LD_INT 29
33266: PUSH
33267: EMPTY
33268: LIST
33269: LIST
33270: LIST
33271: LIST
33272: LIST
33273: LIST
33274: LIST
33275: LIST
33276: LIST
33277: LIST
33278: IN
33279: PUSH
33280: LD_VAR 0 1
33284: PPUSH
33285: LD_INT 52
33287: PPUSH
33288: CALL_OW 321
33292: PUSH
33293: LD_INT 2
33295: EQUAL
33296: AND
33297: IFFALSE 33314
// bpoints := bpoints * 1.2 ;
33299: LD_ADDR_VAR 0 10
33303: PUSH
33304: LD_VAR 0 10
33308: PUSH
33309: LD_REAL  1.20000000000000E+0000
33312: MUL
33313: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
33314: LD_VAR 0 6
33318: PPUSH
33319: CALL_OW 264
33323: PUSH
33324: LD_INT 6
33326: PUSH
33327: LD_INT 46
33329: PUSH
33330: LD_INT 47
33332: PUSH
33333: EMPTY
33334: LIST
33335: LIST
33336: LIST
33337: IN
33338: IFFALSE 33355
// bpoints := bpoints * 1.2 ;
33340: LD_ADDR_VAR 0 10
33344: PUSH
33345: LD_VAR 0 10
33349: PUSH
33350: LD_REAL  1.20000000000000E+0000
33353: MUL
33354: ST_TO_ADDR
// end ; unit_building :
33355: GO 33369
33357: LD_INT 3
33359: DOUBLE
33360: EQUAL
33361: IFTRUE 33365
33363: GO 33368
33365: POP
// ; end ;
33366: GO 33369
33368: POP
// for j = 1 to 3 do
33369: LD_ADDR_VAR 0 7
33373: PUSH
33374: DOUBLE
33375: LD_INT 1
33377: DEC
33378: ST_TO_ADDR
33379: LD_INT 3
33381: PUSH
33382: FOR_TO
33383: IFFALSE 33436
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
33385: LD_ADDR_VAR 0 5
33389: PUSH
33390: LD_VAR 0 5
33394: PPUSH
33395: LD_VAR 0 7
33399: PPUSH
33400: LD_VAR 0 5
33404: PUSH
33405: LD_VAR 0 7
33409: ARRAY
33410: PUSH
33411: LD_VAR 0 9
33415: PUSH
33416: LD_VAR 0 7
33420: ARRAY
33421: PUSH
33422: LD_VAR 0 10
33426: MUL
33427: PLUS
33428: PPUSH
33429: CALL_OW 1
33433: ST_TO_ADDR
33434: GO 33382
33436: POP
33437: POP
// end ;
33438: GO 31921
33440: POP
33441: POP
// result := Replace ( result , 4 , tmp ) ;
33442: LD_ADDR_VAR 0 5
33446: PUSH
33447: LD_VAR 0 5
33451: PPUSH
33452: LD_INT 4
33454: PPUSH
33455: LD_VAR 0 8
33459: PPUSH
33460: CALL_OW 1
33464: ST_TO_ADDR
// end ;
33465: LD_VAR 0 5
33469: RET
// export function DangerAtRange ( unit , range ) ; begin
33470: LD_INT 0
33472: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
33473: LD_ADDR_VAR 0 3
33477: PUSH
33478: LD_VAR 0 1
33482: PPUSH
33483: CALL_OW 255
33487: PPUSH
33488: LD_VAR 0 1
33492: PPUSH
33493: CALL_OW 250
33497: PPUSH
33498: LD_VAR 0 1
33502: PPUSH
33503: CALL_OW 251
33507: PPUSH
33508: LD_VAR 0 2
33512: PPUSH
33513: CALL 31773 0 4
33517: ST_TO_ADDR
// end ;
33518: LD_VAR 0 3
33522: RET
// export function DangerInArea ( side , area ) ; begin
33523: LD_INT 0
33525: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
33526: LD_ADDR_VAR 0 3
33530: PUSH
33531: LD_VAR 0 2
33535: PPUSH
33536: LD_INT 81
33538: PUSH
33539: LD_VAR 0 1
33543: PUSH
33544: EMPTY
33545: LIST
33546: LIST
33547: PPUSH
33548: CALL_OW 70
33552: ST_TO_ADDR
// end ;
33553: LD_VAR 0 3
33557: RET
// export function IsExtension ( b ) ; begin
33558: LD_INT 0
33560: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
33561: LD_ADDR_VAR 0 2
33565: PUSH
33566: LD_VAR 0 1
33570: PUSH
33571: LD_INT 23
33573: PUSH
33574: LD_INT 20
33576: PUSH
33577: LD_INT 22
33579: PUSH
33580: LD_INT 17
33582: PUSH
33583: LD_INT 24
33585: PUSH
33586: LD_INT 21
33588: PUSH
33589: LD_INT 19
33591: PUSH
33592: LD_INT 16
33594: PUSH
33595: LD_INT 25
33597: PUSH
33598: LD_INT 18
33600: PUSH
33601: EMPTY
33602: LIST
33603: LIST
33604: LIST
33605: LIST
33606: LIST
33607: LIST
33608: LIST
33609: LIST
33610: LIST
33611: LIST
33612: IN
33613: ST_TO_ADDR
// end ;
33614: LD_VAR 0 2
33618: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
33619: LD_INT 0
33621: PPUSH
33622: PPUSH
33623: PPUSH
// result := [ ] ;
33624: LD_ADDR_VAR 0 4
33628: PUSH
33629: EMPTY
33630: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
33631: LD_ADDR_VAR 0 5
33635: PUSH
33636: LD_VAR 0 2
33640: PPUSH
33641: LD_INT 21
33643: PUSH
33644: LD_INT 3
33646: PUSH
33647: EMPTY
33648: LIST
33649: LIST
33650: PPUSH
33651: CALL_OW 70
33655: ST_TO_ADDR
// if not tmp then
33656: LD_VAR 0 5
33660: NOT
33661: IFFALSE 33665
// exit ;
33663: GO 33729
// if checkLink then
33665: LD_VAR 0 3
33669: IFFALSE 33719
// begin for i in tmp do
33671: LD_ADDR_VAR 0 6
33675: PUSH
33676: LD_VAR 0 5
33680: PUSH
33681: FOR_IN
33682: IFFALSE 33717
// if GetBase ( i ) <> base then
33684: LD_VAR 0 6
33688: PPUSH
33689: CALL_OW 274
33693: PUSH
33694: LD_VAR 0 1
33698: NONEQUAL
33699: IFFALSE 33715
// ComLinkToBase ( base , i ) ;
33701: LD_VAR 0 1
33705: PPUSH
33706: LD_VAR 0 6
33710: PPUSH
33711: CALL_OW 169
33715: GO 33681
33717: POP
33718: POP
// end ; result := tmp ;
33719: LD_ADDR_VAR 0 4
33723: PUSH
33724: LD_VAR 0 5
33728: ST_TO_ADDR
// end ;
33729: LD_VAR 0 4
33733: RET
// export function ComComplete ( units , b ) ; var i ; begin
33734: LD_INT 0
33736: PPUSH
33737: PPUSH
// if not units then
33738: LD_VAR 0 1
33742: NOT
33743: IFFALSE 33747
// exit ;
33745: GO 33837
// for i in units do
33747: LD_ADDR_VAR 0 4
33751: PUSH
33752: LD_VAR 0 1
33756: PUSH
33757: FOR_IN
33758: IFFALSE 33835
// if BuildingStatus ( b ) = bs_build then
33760: LD_VAR 0 2
33764: PPUSH
33765: CALL_OW 461
33769: PUSH
33770: LD_INT 1
33772: EQUAL
33773: IFFALSE 33833
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
33775: LD_VAR 0 4
33779: PPUSH
33780: LD_STRING h
33782: PUSH
33783: LD_VAR 0 2
33787: PPUSH
33788: CALL_OW 250
33792: PUSH
33793: LD_VAR 0 2
33797: PPUSH
33798: CALL_OW 251
33802: PUSH
33803: LD_VAR 0 2
33807: PUSH
33808: LD_INT 0
33810: PUSH
33811: LD_INT 0
33813: PUSH
33814: LD_INT 0
33816: PUSH
33817: EMPTY
33818: LIST
33819: LIST
33820: LIST
33821: LIST
33822: LIST
33823: LIST
33824: LIST
33825: PUSH
33826: EMPTY
33827: LIST
33828: PPUSH
33829: CALL_OW 446
33833: GO 33757
33835: POP
33836: POP
// end ;
33837: LD_VAR 0 3
33841: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
33842: LD_INT 0
33844: PPUSH
33845: PPUSH
33846: PPUSH
33847: PPUSH
33848: PPUSH
33849: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
33850: LD_VAR 0 1
33854: NOT
33855: PUSH
33856: LD_VAR 0 1
33860: PPUSH
33861: CALL_OW 263
33865: PUSH
33866: LD_INT 2
33868: EQUAL
33869: NOT
33870: OR
33871: IFFALSE 33875
// exit ;
33873: GO 34191
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
33875: LD_ADDR_VAR 0 6
33879: PUSH
33880: LD_INT 22
33882: PUSH
33883: LD_VAR 0 1
33887: PPUSH
33888: CALL_OW 255
33892: PUSH
33893: EMPTY
33894: LIST
33895: LIST
33896: PUSH
33897: LD_INT 2
33899: PUSH
33900: LD_INT 30
33902: PUSH
33903: LD_INT 36
33905: PUSH
33906: EMPTY
33907: LIST
33908: LIST
33909: PUSH
33910: LD_INT 34
33912: PUSH
33913: LD_INT 31
33915: PUSH
33916: EMPTY
33917: LIST
33918: LIST
33919: PUSH
33920: EMPTY
33921: LIST
33922: LIST
33923: LIST
33924: PUSH
33925: EMPTY
33926: LIST
33927: LIST
33928: PPUSH
33929: CALL_OW 69
33933: ST_TO_ADDR
// if not tmp then
33934: LD_VAR 0 6
33938: NOT
33939: IFFALSE 33943
// exit ;
33941: GO 34191
// result := [ ] ;
33943: LD_ADDR_VAR 0 2
33947: PUSH
33948: EMPTY
33949: ST_TO_ADDR
// for i in tmp do
33950: LD_ADDR_VAR 0 3
33954: PUSH
33955: LD_VAR 0 6
33959: PUSH
33960: FOR_IN
33961: IFFALSE 34032
// begin t := UnitsInside ( i ) ;
33963: LD_ADDR_VAR 0 4
33967: PUSH
33968: LD_VAR 0 3
33972: PPUSH
33973: CALL_OW 313
33977: ST_TO_ADDR
// if t then
33978: LD_VAR 0 4
33982: IFFALSE 34030
// for j in t do
33984: LD_ADDR_VAR 0 7
33988: PUSH
33989: LD_VAR 0 4
33993: PUSH
33994: FOR_IN
33995: IFFALSE 34028
// result := Insert ( result , result + 1 , j ) ;
33997: LD_ADDR_VAR 0 2
34001: PUSH
34002: LD_VAR 0 2
34006: PPUSH
34007: LD_VAR 0 2
34011: PUSH
34012: LD_INT 1
34014: PLUS
34015: PPUSH
34016: LD_VAR 0 7
34020: PPUSH
34021: CALL_OW 2
34025: ST_TO_ADDR
34026: GO 33994
34028: POP
34029: POP
// end ;
34030: GO 33960
34032: POP
34033: POP
// if not result then
34034: LD_VAR 0 2
34038: NOT
34039: IFFALSE 34043
// exit ;
34041: GO 34191
// mech := result [ 1 ] ;
34043: LD_ADDR_VAR 0 5
34047: PUSH
34048: LD_VAR 0 2
34052: PUSH
34053: LD_INT 1
34055: ARRAY
34056: ST_TO_ADDR
// if result > 1 then
34057: LD_VAR 0 2
34061: PUSH
34062: LD_INT 1
34064: GREATER
34065: IFFALSE 34177
// for i = 2 to result do
34067: LD_ADDR_VAR 0 3
34071: PUSH
34072: DOUBLE
34073: LD_INT 2
34075: DEC
34076: ST_TO_ADDR
34077: LD_VAR 0 2
34081: PUSH
34082: FOR_TO
34083: IFFALSE 34175
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
34085: LD_ADDR_VAR 0 4
34089: PUSH
34090: LD_VAR 0 2
34094: PUSH
34095: LD_VAR 0 3
34099: ARRAY
34100: PPUSH
34101: LD_INT 3
34103: PPUSH
34104: CALL_OW 259
34108: PUSH
34109: LD_VAR 0 2
34113: PUSH
34114: LD_VAR 0 3
34118: ARRAY
34119: PPUSH
34120: CALL_OW 432
34124: MINUS
34125: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
34126: LD_VAR 0 4
34130: PUSH
34131: LD_VAR 0 5
34135: PPUSH
34136: LD_INT 3
34138: PPUSH
34139: CALL_OW 259
34143: PUSH
34144: LD_VAR 0 5
34148: PPUSH
34149: CALL_OW 432
34153: MINUS
34154: GREATEREQUAL
34155: IFFALSE 34173
// mech := result [ i ] ;
34157: LD_ADDR_VAR 0 5
34161: PUSH
34162: LD_VAR 0 2
34166: PUSH
34167: LD_VAR 0 3
34171: ARRAY
34172: ST_TO_ADDR
// end ;
34173: GO 34082
34175: POP
34176: POP
// ComLinkTo ( vehicle , mech ) ;
34177: LD_VAR 0 1
34181: PPUSH
34182: LD_VAR 0 5
34186: PPUSH
34187: CALL_OW 135
// end ;
34191: LD_VAR 0 2
34195: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
34196: LD_INT 0
34198: PPUSH
34199: PPUSH
34200: PPUSH
34201: PPUSH
34202: PPUSH
34203: PPUSH
34204: PPUSH
34205: PPUSH
34206: PPUSH
34207: PPUSH
34208: PPUSH
34209: PPUSH
34210: PPUSH
// result := [ ] ;
34211: LD_ADDR_VAR 0 7
34215: PUSH
34216: EMPTY
34217: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
34218: LD_VAR 0 1
34222: PPUSH
34223: CALL_OW 266
34227: PUSH
34228: LD_INT 0
34230: PUSH
34231: LD_INT 1
34233: PUSH
34234: EMPTY
34235: LIST
34236: LIST
34237: IN
34238: NOT
34239: IFFALSE 34243
// exit ;
34241: GO 35877
// if name then
34243: LD_VAR 0 3
34247: IFFALSE 34263
// SetBName ( base_dep , name ) ;
34249: LD_VAR 0 1
34253: PPUSH
34254: LD_VAR 0 3
34258: PPUSH
34259: CALL_OW 500
// base := GetBase ( base_dep ) ;
34263: LD_ADDR_VAR 0 15
34267: PUSH
34268: LD_VAR 0 1
34272: PPUSH
34273: CALL_OW 274
34277: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
34278: LD_ADDR_VAR 0 16
34282: PUSH
34283: LD_VAR 0 1
34287: PPUSH
34288: CALL_OW 255
34292: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
34293: LD_ADDR_VAR 0 17
34297: PUSH
34298: LD_VAR 0 1
34302: PPUSH
34303: CALL_OW 248
34307: ST_TO_ADDR
// if sources then
34308: LD_VAR 0 5
34312: IFFALSE 34359
// for i = 1 to 3 do
34314: LD_ADDR_VAR 0 8
34318: PUSH
34319: DOUBLE
34320: LD_INT 1
34322: DEC
34323: ST_TO_ADDR
34324: LD_INT 3
34326: PUSH
34327: FOR_TO
34328: IFFALSE 34357
// AddResourceType ( base , i , sources [ i ] ) ;
34330: LD_VAR 0 15
34334: PPUSH
34335: LD_VAR 0 8
34339: PPUSH
34340: LD_VAR 0 5
34344: PUSH
34345: LD_VAR 0 8
34349: ARRAY
34350: PPUSH
34351: CALL_OW 276
34355: GO 34327
34357: POP
34358: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
34359: LD_ADDR_VAR 0 18
34363: PUSH
34364: LD_VAR 0 15
34368: PPUSH
34369: LD_VAR 0 2
34373: PPUSH
34374: LD_INT 1
34376: PPUSH
34377: CALL 33619 0 3
34381: ST_TO_ADDR
// InitHc ;
34382: CALL_OW 19
// InitUc ;
34386: CALL_OW 18
// uc_side := side ;
34390: LD_ADDR_OWVAR 20
34394: PUSH
34395: LD_VAR 0 16
34399: ST_TO_ADDR
// uc_nation := nation ;
34400: LD_ADDR_OWVAR 21
34404: PUSH
34405: LD_VAR 0 17
34409: ST_TO_ADDR
// if buildings then
34410: LD_VAR 0 18
34414: IFFALSE 35736
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
34416: LD_ADDR_VAR 0 19
34420: PUSH
34421: LD_VAR 0 18
34425: PPUSH
34426: LD_INT 2
34428: PUSH
34429: LD_INT 30
34431: PUSH
34432: LD_INT 29
34434: PUSH
34435: EMPTY
34436: LIST
34437: LIST
34438: PUSH
34439: LD_INT 30
34441: PUSH
34442: LD_INT 30
34444: PUSH
34445: EMPTY
34446: LIST
34447: LIST
34448: PUSH
34449: EMPTY
34450: LIST
34451: LIST
34452: LIST
34453: PPUSH
34454: CALL_OW 72
34458: ST_TO_ADDR
// if tmp then
34459: LD_VAR 0 19
34463: IFFALSE 34511
// for i in tmp do
34465: LD_ADDR_VAR 0 8
34469: PUSH
34470: LD_VAR 0 19
34474: PUSH
34475: FOR_IN
34476: IFFALSE 34509
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
34478: LD_VAR 0 8
34482: PPUSH
34483: CALL_OW 250
34487: PPUSH
34488: LD_VAR 0 8
34492: PPUSH
34493: CALL_OW 251
34497: PPUSH
34498: LD_VAR 0 16
34502: PPUSH
34503: CALL_OW 441
34507: GO 34475
34509: POP
34510: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
34511: LD_VAR 0 18
34515: PPUSH
34516: LD_INT 2
34518: PUSH
34519: LD_INT 30
34521: PUSH
34522: LD_INT 32
34524: PUSH
34525: EMPTY
34526: LIST
34527: LIST
34528: PUSH
34529: LD_INT 30
34531: PUSH
34532: LD_INT 33
34534: PUSH
34535: EMPTY
34536: LIST
34537: LIST
34538: PUSH
34539: EMPTY
34540: LIST
34541: LIST
34542: LIST
34543: PPUSH
34544: CALL_OW 72
34548: IFFALSE 34636
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
34550: LD_ADDR_VAR 0 8
34554: PUSH
34555: LD_VAR 0 18
34559: PPUSH
34560: LD_INT 2
34562: PUSH
34563: LD_INT 30
34565: PUSH
34566: LD_INT 32
34568: PUSH
34569: EMPTY
34570: LIST
34571: LIST
34572: PUSH
34573: LD_INT 30
34575: PUSH
34576: LD_INT 33
34578: PUSH
34579: EMPTY
34580: LIST
34581: LIST
34582: PUSH
34583: EMPTY
34584: LIST
34585: LIST
34586: LIST
34587: PPUSH
34588: CALL_OW 72
34592: PUSH
34593: FOR_IN
34594: IFFALSE 34634
// begin if not GetBWeapon ( i ) then
34596: LD_VAR 0 8
34600: PPUSH
34601: CALL_OW 269
34605: NOT
34606: IFFALSE 34632
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
34608: LD_VAR 0 8
34612: PPUSH
34613: LD_VAR 0 8
34617: PPUSH
34618: LD_VAR 0 2
34622: PPUSH
34623: CALL 35882 0 2
34627: PPUSH
34628: CALL_OW 431
// end ;
34632: GO 34593
34634: POP
34635: POP
// end ; for i = 1 to personel do
34636: LD_ADDR_VAR 0 8
34640: PUSH
34641: DOUBLE
34642: LD_INT 1
34644: DEC
34645: ST_TO_ADDR
34646: LD_VAR 0 6
34650: PUSH
34651: FOR_TO
34652: IFFALSE 35716
// begin if i > 4 then
34654: LD_VAR 0 8
34658: PUSH
34659: LD_INT 4
34661: GREATER
34662: IFFALSE 34666
// break ;
34664: GO 35716
// case i of 1 :
34666: LD_VAR 0 8
34670: PUSH
34671: LD_INT 1
34673: DOUBLE
34674: EQUAL
34675: IFTRUE 34679
34677: GO 34759
34679: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
34680: LD_ADDR_VAR 0 12
34684: PUSH
34685: LD_VAR 0 18
34689: PPUSH
34690: LD_INT 22
34692: PUSH
34693: LD_VAR 0 16
34697: PUSH
34698: EMPTY
34699: LIST
34700: LIST
34701: PUSH
34702: LD_INT 58
34704: PUSH
34705: EMPTY
34706: LIST
34707: PUSH
34708: LD_INT 2
34710: PUSH
34711: LD_INT 30
34713: PUSH
34714: LD_INT 32
34716: PUSH
34717: EMPTY
34718: LIST
34719: LIST
34720: PUSH
34721: LD_INT 30
34723: PUSH
34724: LD_INT 4
34726: PUSH
34727: EMPTY
34728: LIST
34729: LIST
34730: PUSH
34731: LD_INT 30
34733: PUSH
34734: LD_INT 5
34736: PUSH
34737: EMPTY
34738: LIST
34739: LIST
34740: PUSH
34741: EMPTY
34742: LIST
34743: LIST
34744: LIST
34745: LIST
34746: PUSH
34747: EMPTY
34748: LIST
34749: LIST
34750: LIST
34751: PPUSH
34752: CALL_OW 72
34756: ST_TO_ADDR
34757: GO 34981
34759: LD_INT 2
34761: DOUBLE
34762: EQUAL
34763: IFTRUE 34767
34765: GO 34829
34767: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
34768: LD_ADDR_VAR 0 12
34772: PUSH
34773: LD_VAR 0 18
34777: PPUSH
34778: LD_INT 22
34780: PUSH
34781: LD_VAR 0 16
34785: PUSH
34786: EMPTY
34787: LIST
34788: LIST
34789: PUSH
34790: LD_INT 2
34792: PUSH
34793: LD_INT 30
34795: PUSH
34796: LD_INT 0
34798: PUSH
34799: EMPTY
34800: LIST
34801: LIST
34802: PUSH
34803: LD_INT 30
34805: PUSH
34806: LD_INT 1
34808: PUSH
34809: EMPTY
34810: LIST
34811: LIST
34812: PUSH
34813: EMPTY
34814: LIST
34815: LIST
34816: LIST
34817: PUSH
34818: EMPTY
34819: LIST
34820: LIST
34821: PPUSH
34822: CALL_OW 72
34826: ST_TO_ADDR
34827: GO 34981
34829: LD_INT 3
34831: DOUBLE
34832: EQUAL
34833: IFTRUE 34837
34835: GO 34899
34837: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
34838: LD_ADDR_VAR 0 12
34842: PUSH
34843: LD_VAR 0 18
34847: PPUSH
34848: LD_INT 22
34850: PUSH
34851: LD_VAR 0 16
34855: PUSH
34856: EMPTY
34857: LIST
34858: LIST
34859: PUSH
34860: LD_INT 2
34862: PUSH
34863: LD_INT 30
34865: PUSH
34866: LD_INT 2
34868: PUSH
34869: EMPTY
34870: LIST
34871: LIST
34872: PUSH
34873: LD_INT 30
34875: PUSH
34876: LD_INT 3
34878: PUSH
34879: EMPTY
34880: LIST
34881: LIST
34882: PUSH
34883: EMPTY
34884: LIST
34885: LIST
34886: LIST
34887: PUSH
34888: EMPTY
34889: LIST
34890: LIST
34891: PPUSH
34892: CALL_OW 72
34896: ST_TO_ADDR
34897: GO 34981
34899: LD_INT 4
34901: DOUBLE
34902: EQUAL
34903: IFTRUE 34907
34905: GO 34980
34907: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
34908: LD_ADDR_VAR 0 12
34912: PUSH
34913: LD_VAR 0 18
34917: PPUSH
34918: LD_INT 22
34920: PUSH
34921: LD_VAR 0 16
34925: PUSH
34926: EMPTY
34927: LIST
34928: LIST
34929: PUSH
34930: LD_INT 2
34932: PUSH
34933: LD_INT 30
34935: PUSH
34936: LD_INT 6
34938: PUSH
34939: EMPTY
34940: LIST
34941: LIST
34942: PUSH
34943: LD_INT 30
34945: PUSH
34946: LD_INT 7
34948: PUSH
34949: EMPTY
34950: LIST
34951: LIST
34952: PUSH
34953: LD_INT 30
34955: PUSH
34956: LD_INT 8
34958: PUSH
34959: EMPTY
34960: LIST
34961: LIST
34962: PUSH
34963: EMPTY
34964: LIST
34965: LIST
34966: LIST
34967: LIST
34968: PUSH
34969: EMPTY
34970: LIST
34971: LIST
34972: PPUSH
34973: CALL_OW 72
34977: ST_TO_ADDR
34978: GO 34981
34980: POP
// if i = 1 then
34981: LD_VAR 0 8
34985: PUSH
34986: LD_INT 1
34988: EQUAL
34989: IFFALSE 35100
// begin tmp := [ ] ;
34991: LD_ADDR_VAR 0 19
34995: PUSH
34996: EMPTY
34997: ST_TO_ADDR
// for j in f do
34998: LD_ADDR_VAR 0 9
35002: PUSH
35003: LD_VAR 0 12
35007: PUSH
35008: FOR_IN
35009: IFFALSE 35082
// if GetBType ( j ) = b_bunker then
35011: LD_VAR 0 9
35015: PPUSH
35016: CALL_OW 266
35020: PUSH
35021: LD_INT 32
35023: EQUAL
35024: IFFALSE 35051
// tmp := Insert ( tmp , 1 , j ) else
35026: LD_ADDR_VAR 0 19
35030: PUSH
35031: LD_VAR 0 19
35035: PPUSH
35036: LD_INT 1
35038: PPUSH
35039: LD_VAR 0 9
35043: PPUSH
35044: CALL_OW 2
35048: ST_TO_ADDR
35049: GO 35080
// tmp := Insert ( tmp , tmp + 1 , j ) ;
35051: LD_ADDR_VAR 0 19
35055: PUSH
35056: LD_VAR 0 19
35060: PPUSH
35061: LD_VAR 0 19
35065: PUSH
35066: LD_INT 1
35068: PLUS
35069: PPUSH
35070: LD_VAR 0 9
35074: PPUSH
35075: CALL_OW 2
35079: ST_TO_ADDR
35080: GO 35008
35082: POP
35083: POP
// if tmp then
35084: LD_VAR 0 19
35088: IFFALSE 35100
// f := tmp ;
35090: LD_ADDR_VAR 0 12
35094: PUSH
35095: LD_VAR 0 19
35099: ST_TO_ADDR
// end ; x := personel [ i ] ;
35100: LD_ADDR_VAR 0 13
35104: PUSH
35105: LD_VAR 0 6
35109: PUSH
35110: LD_VAR 0 8
35114: ARRAY
35115: ST_TO_ADDR
// if x = - 1 then
35116: LD_VAR 0 13
35120: PUSH
35121: LD_INT 1
35123: NEG
35124: EQUAL
35125: IFFALSE 35334
// begin for j in f do
35127: LD_ADDR_VAR 0 9
35131: PUSH
35132: LD_VAR 0 12
35136: PUSH
35137: FOR_IN
35138: IFFALSE 35330
// repeat InitHc ;
35140: CALL_OW 19
// if GetBType ( j ) = b_barracks then
35144: LD_VAR 0 9
35148: PPUSH
35149: CALL_OW 266
35153: PUSH
35154: LD_INT 5
35156: EQUAL
35157: IFFALSE 35227
// begin if UnitsInside ( j ) < 3 then
35159: LD_VAR 0 9
35163: PPUSH
35164: CALL_OW 313
35168: PUSH
35169: LD_INT 3
35171: LESS
35172: IFFALSE 35208
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
35174: LD_INT 0
35176: PPUSH
35177: LD_INT 5
35179: PUSH
35180: LD_INT 8
35182: PUSH
35183: LD_INT 9
35185: PUSH
35186: EMPTY
35187: LIST
35188: LIST
35189: LIST
35190: PUSH
35191: LD_VAR 0 17
35195: ARRAY
35196: PPUSH
35197: LD_VAR 0 4
35201: PPUSH
35202: CALL_OW 380
35206: GO 35225
// PrepareHuman ( false , i , skill ) ;
35208: LD_INT 0
35210: PPUSH
35211: LD_VAR 0 8
35215: PPUSH
35216: LD_VAR 0 4
35220: PPUSH
35221: CALL_OW 380
// end else
35225: GO 35244
// PrepareHuman ( false , i , skill ) ;
35227: LD_INT 0
35229: PPUSH
35230: LD_VAR 0 8
35234: PPUSH
35235: LD_VAR 0 4
35239: PPUSH
35240: CALL_OW 380
// un := CreateHuman ;
35244: LD_ADDR_VAR 0 14
35248: PUSH
35249: CALL_OW 44
35253: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
35254: LD_ADDR_VAR 0 7
35258: PUSH
35259: LD_VAR 0 7
35263: PPUSH
35264: LD_INT 1
35266: PPUSH
35267: LD_VAR 0 14
35271: PPUSH
35272: CALL_OW 2
35276: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
35277: LD_VAR 0 14
35281: PPUSH
35282: LD_VAR 0 9
35286: PPUSH
35287: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
35291: LD_VAR 0 9
35295: PPUSH
35296: CALL_OW 313
35300: PUSH
35301: LD_INT 6
35303: EQUAL
35304: PUSH
35305: LD_VAR 0 9
35309: PPUSH
35310: CALL_OW 266
35314: PUSH
35315: LD_INT 32
35317: PUSH
35318: LD_INT 31
35320: PUSH
35321: EMPTY
35322: LIST
35323: LIST
35324: IN
35325: OR
35326: IFFALSE 35140
35328: GO 35137
35330: POP
35331: POP
// end else
35332: GO 35714
// for j = 1 to x do
35334: LD_ADDR_VAR 0 9
35338: PUSH
35339: DOUBLE
35340: LD_INT 1
35342: DEC
35343: ST_TO_ADDR
35344: LD_VAR 0 13
35348: PUSH
35349: FOR_TO
35350: IFFALSE 35712
// begin InitHc ;
35352: CALL_OW 19
// if not f then
35356: LD_VAR 0 12
35360: NOT
35361: IFFALSE 35450
// begin PrepareHuman ( false , i , skill ) ;
35363: LD_INT 0
35365: PPUSH
35366: LD_VAR 0 8
35370: PPUSH
35371: LD_VAR 0 4
35375: PPUSH
35376: CALL_OW 380
// un := CreateHuman ;
35380: LD_ADDR_VAR 0 14
35384: PUSH
35385: CALL_OW 44
35389: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
35390: LD_ADDR_VAR 0 7
35394: PUSH
35395: LD_VAR 0 7
35399: PPUSH
35400: LD_INT 1
35402: PPUSH
35403: LD_VAR 0 14
35407: PPUSH
35408: CALL_OW 2
35412: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
35413: LD_VAR 0 14
35417: PPUSH
35418: LD_VAR 0 1
35422: PPUSH
35423: CALL_OW 250
35427: PPUSH
35428: LD_VAR 0 1
35432: PPUSH
35433: CALL_OW 251
35437: PPUSH
35438: LD_INT 10
35440: PPUSH
35441: LD_INT 0
35443: PPUSH
35444: CALL_OW 50
// continue ;
35448: GO 35349
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
35450: LD_VAR 0 12
35454: PUSH
35455: LD_INT 1
35457: ARRAY
35458: PPUSH
35459: CALL_OW 313
35463: PUSH
35464: LD_VAR 0 12
35468: PUSH
35469: LD_INT 1
35471: ARRAY
35472: PPUSH
35473: CALL_OW 266
35477: PUSH
35478: LD_INT 32
35480: PUSH
35481: LD_INT 31
35483: PUSH
35484: EMPTY
35485: LIST
35486: LIST
35487: IN
35488: AND
35489: PUSH
35490: LD_VAR 0 12
35494: PUSH
35495: LD_INT 1
35497: ARRAY
35498: PPUSH
35499: CALL_OW 313
35503: PUSH
35504: LD_INT 6
35506: EQUAL
35507: OR
35508: IFFALSE 35528
// f := Delete ( f , 1 ) ;
35510: LD_ADDR_VAR 0 12
35514: PUSH
35515: LD_VAR 0 12
35519: PPUSH
35520: LD_INT 1
35522: PPUSH
35523: CALL_OW 3
35527: ST_TO_ADDR
// if not f then
35528: LD_VAR 0 12
35532: NOT
35533: IFFALSE 35551
// begin x := x + 2 ;
35535: LD_ADDR_VAR 0 13
35539: PUSH
35540: LD_VAR 0 13
35544: PUSH
35545: LD_INT 2
35547: PLUS
35548: ST_TO_ADDR
// continue ;
35549: GO 35349
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
35551: LD_VAR 0 12
35555: PUSH
35556: LD_INT 1
35558: ARRAY
35559: PPUSH
35560: CALL_OW 266
35564: PUSH
35565: LD_INT 5
35567: EQUAL
35568: IFFALSE 35642
// begin if UnitsInside ( f [ 1 ] ) < 3 then
35570: LD_VAR 0 12
35574: PUSH
35575: LD_INT 1
35577: ARRAY
35578: PPUSH
35579: CALL_OW 313
35583: PUSH
35584: LD_INT 3
35586: LESS
35587: IFFALSE 35623
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
35589: LD_INT 0
35591: PPUSH
35592: LD_INT 5
35594: PUSH
35595: LD_INT 8
35597: PUSH
35598: LD_INT 9
35600: PUSH
35601: EMPTY
35602: LIST
35603: LIST
35604: LIST
35605: PUSH
35606: LD_VAR 0 17
35610: ARRAY
35611: PPUSH
35612: LD_VAR 0 4
35616: PPUSH
35617: CALL_OW 380
35621: GO 35640
// PrepareHuman ( false , i , skill ) ;
35623: LD_INT 0
35625: PPUSH
35626: LD_VAR 0 8
35630: PPUSH
35631: LD_VAR 0 4
35635: PPUSH
35636: CALL_OW 380
// end else
35640: GO 35659
// PrepareHuman ( false , i , skill ) ;
35642: LD_INT 0
35644: PPUSH
35645: LD_VAR 0 8
35649: PPUSH
35650: LD_VAR 0 4
35654: PPUSH
35655: CALL_OW 380
// un := CreateHuman ;
35659: LD_ADDR_VAR 0 14
35663: PUSH
35664: CALL_OW 44
35668: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
35669: LD_ADDR_VAR 0 7
35673: PUSH
35674: LD_VAR 0 7
35678: PPUSH
35679: LD_INT 1
35681: PPUSH
35682: LD_VAR 0 14
35686: PPUSH
35687: CALL_OW 2
35691: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
35692: LD_VAR 0 14
35696: PPUSH
35697: LD_VAR 0 12
35701: PUSH
35702: LD_INT 1
35704: ARRAY
35705: PPUSH
35706: CALL_OW 52
// end ;
35710: GO 35349
35712: POP
35713: POP
// end ;
35714: GO 34651
35716: POP
35717: POP
// result := result ^ buildings ;
35718: LD_ADDR_VAR 0 7
35722: PUSH
35723: LD_VAR 0 7
35727: PUSH
35728: LD_VAR 0 18
35732: ADD
35733: ST_TO_ADDR
// end else
35734: GO 35877
// begin for i = 1 to personel do
35736: LD_ADDR_VAR 0 8
35740: PUSH
35741: DOUBLE
35742: LD_INT 1
35744: DEC
35745: ST_TO_ADDR
35746: LD_VAR 0 6
35750: PUSH
35751: FOR_TO
35752: IFFALSE 35875
// begin if i > 4 then
35754: LD_VAR 0 8
35758: PUSH
35759: LD_INT 4
35761: GREATER
35762: IFFALSE 35766
// break ;
35764: GO 35875
// x := personel [ i ] ;
35766: LD_ADDR_VAR 0 13
35770: PUSH
35771: LD_VAR 0 6
35775: PUSH
35776: LD_VAR 0 8
35780: ARRAY
35781: ST_TO_ADDR
// if x = - 1 then
35782: LD_VAR 0 13
35786: PUSH
35787: LD_INT 1
35789: NEG
35790: EQUAL
35791: IFFALSE 35795
// continue ;
35793: GO 35751
// PrepareHuman ( false , i , skill ) ;
35795: LD_INT 0
35797: PPUSH
35798: LD_VAR 0 8
35802: PPUSH
35803: LD_VAR 0 4
35807: PPUSH
35808: CALL_OW 380
// un := CreateHuman ;
35812: LD_ADDR_VAR 0 14
35816: PUSH
35817: CALL_OW 44
35821: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
35822: LD_VAR 0 14
35826: PPUSH
35827: LD_VAR 0 1
35831: PPUSH
35832: CALL_OW 250
35836: PPUSH
35837: LD_VAR 0 1
35841: PPUSH
35842: CALL_OW 251
35846: PPUSH
35847: LD_INT 10
35849: PPUSH
35850: LD_INT 0
35852: PPUSH
35853: CALL_OW 50
// result := result ^ un ;
35857: LD_ADDR_VAR 0 7
35861: PUSH
35862: LD_VAR 0 7
35866: PUSH
35867: LD_VAR 0 14
35871: ADD
35872: ST_TO_ADDR
// end ;
35873: GO 35751
35875: POP
35876: POP
// end ; end ;
35877: LD_VAR 0 7
35881: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
35882: LD_INT 0
35884: PPUSH
35885: PPUSH
35886: PPUSH
35887: PPUSH
35888: PPUSH
35889: PPUSH
35890: PPUSH
35891: PPUSH
35892: PPUSH
35893: PPUSH
35894: PPUSH
35895: PPUSH
35896: PPUSH
35897: PPUSH
35898: PPUSH
35899: PPUSH
// result := false ;
35900: LD_ADDR_VAR 0 3
35904: PUSH
35905: LD_INT 0
35907: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
35908: LD_VAR 0 1
35912: NOT
35913: PUSH
35914: LD_VAR 0 1
35918: PPUSH
35919: CALL_OW 266
35923: PUSH
35924: LD_INT 32
35926: PUSH
35927: LD_INT 33
35929: PUSH
35930: EMPTY
35931: LIST
35932: LIST
35933: IN
35934: NOT
35935: OR
35936: IFFALSE 35940
// exit ;
35938: GO 37079
// nat := GetNation ( tower ) ;
35940: LD_ADDR_VAR 0 12
35944: PUSH
35945: LD_VAR 0 1
35949: PPUSH
35950: CALL_OW 248
35954: ST_TO_ADDR
// side := GetSide ( tower ) ;
35955: LD_ADDR_VAR 0 16
35959: PUSH
35960: LD_VAR 0 1
35964: PPUSH
35965: CALL_OW 255
35969: ST_TO_ADDR
// x := GetX ( tower ) ;
35970: LD_ADDR_VAR 0 10
35974: PUSH
35975: LD_VAR 0 1
35979: PPUSH
35980: CALL_OW 250
35984: ST_TO_ADDR
// y := GetY ( tower ) ;
35985: LD_ADDR_VAR 0 11
35989: PUSH
35990: LD_VAR 0 1
35994: PPUSH
35995: CALL_OW 251
35999: ST_TO_ADDR
// if not x or not y then
36000: LD_VAR 0 10
36004: NOT
36005: PUSH
36006: LD_VAR 0 11
36010: NOT
36011: OR
36012: IFFALSE 36016
// exit ;
36014: GO 37079
// weapon := 0 ;
36016: LD_ADDR_VAR 0 18
36020: PUSH
36021: LD_INT 0
36023: ST_TO_ADDR
// fac_list := [ ] ;
36024: LD_ADDR_VAR 0 17
36028: PUSH
36029: EMPTY
36030: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
36031: LD_ADDR_VAR 0 6
36035: PUSH
36036: LD_VAR 0 1
36040: PPUSH
36041: CALL_OW 274
36045: PPUSH
36046: LD_VAR 0 2
36050: PPUSH
36051: LD_INT 0
36053: PPUSH
36054: CALL 33619 0 3
36058: PPUSH
36059: LD_INT 30
36061: PUSH
36062: LD_INT 3
36064: PUSH
36065: EMPTY
36066: LIST
36067: LIST
36068: PPUSH
36069: CALL_OW 72
36073: ST_TO_ADDR
// if not factories then
36074: LD_VAR 0 6
36078: NOT
36079: IFFALSE 36083
// exit ;
36081: GO 37079
// for i in factories do
36083: LD_ADDR_VAR 0 8
36087: PUSH
36088: LD_VAR 0 6
36092: PUSH
36093: FOR_IN
36094: IFFALSE 36119
// fac_list := fac_list union AvailableWeaponList ( i ) ;
36096: LD_ADDR_VAR 0 17
36100: PUSH
36101: LD_VAR 0 17
36105: PUSH
36106: LD_VAR 0 8
36110: PPUSH
36111: CALL_OW 478
36115: UNION
36116: ST_TO_ADDR
36117: GO 36093
36119: POP
36120: POP
// if not fac_list then
36121: LD_VAR 0 17
36125: NOT
36126: IFFALSE 36130
// exit ;
36128: GO 37079
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
36130: LD_ADDR_VAR 0 5
36134: PUSH
36135: LD_INT 4
36137: PUSH
36138: LD_INT 5
36140: PUSH
36141: LD_INT 9
36143: PUSH
36144: LD_INT 10
36146: PUSH
36147: LD_INT 6
36149: PUSH
36150: LD_INT 7
36152: PUSH
36153: LD_INT 11
36155: PUSH
36156: EMPTY
36157: LIST
36158: LIST
36159: LIST
36160: LIST
36161: LIST
36162: LIST
36163: LIST
36164: PUSH
36165: LD_INT 27
36167: PUSH
36168: LD_INT 28
36170: PUSH
36171: LD_INT 26
36173: PUSH
36174: LD_INT 30
36176: PUSH
36177: EMPTY
36178: LIST
36179: LIST
36180: LIST
36181: LIST
36182: PUSH
36183: LD_INT 43
36185: PUSH
36186: LD_INT 44
36188: PUSH
36189: LD_INT 46
36191: PUSH
36192: LD_INT 45
36194: PUSH
36195: LD_INT 47
36197: PUSH
36198: LD_INT 49
36200: PUSH
36201: EMPTY
36202: LIST
36203: LIST
36204: LIST
36205: LIST
36206: LIST
36207: LIST
36208: PUSH
36209: EMPTY
36210: LIST
36211: LIST
36212: LIST
36213: PUSH
36214: LD_VAR 0 12
36218: ARRAY
36219: ST_TO_ADDR
// for i in list do
36220: LD_ADDR_VAR 0 8
36224: PUSH
36225: LD_VAR 0 5
36229: PUSH
36230: FOR_IN
36231: IFFALSE 36264
// if not i in fac_list then
36233: LD_VAR 0 8
36237: PUSH
36238: LD_VAR 0 17
36242: IN
36243: NOT
36244: IFFALSE 36262
// list := list diff i ;
36246: LD_ADDR_VAR 0 5
36250: PUSH
36251: LD_VAR 0 5
36255: PUSH
36256: LD_VAR 0 8
36260: DIFF
36261: ST_TO_ADDR
36262: GO 36230
36264: POP
36265: POP
// if not list then
36266: LD_VAR 0 5
36270: NOT
36271: IFFALSE 36275
// exit ;
36273: GO 37079
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
36275: LD_VAR 0 12
36279: PUSH
36280: LD_INT 3
36282: EQUAL
36283: PUSH
36284: LD_INT 49
36286: PUSH
36287: LD_VAR 0 5
36291: IN
36292: AND
36293: PUSH
36294: LD_INT 31
36296: PPUSH
36297: LD_VAR 0 16
36301: PPUSH
36302: CALL_OW 321
36306: PUSH
36307: LD_INT 2
36309: EQUAL
36310: AND
36311: IFFALSE 36371
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
36313: LD_INT 22
36315: PUSH
36316: LD_VAR 0 16
36320: PUSH
36321: EMPTY
36322: LIST
36323: LIST
36324: PUSH
36325: LD_INT 35
36327: PUSH
36328: LD_INT 49
36330: PUSH
36331: EMPTY
36332: LIST
36333: LIST
36334: PUSH
36335: LD_INT 91
36337: PUSH
36338: LD_VAR 0 1
36342: PUSH
36343: LD_INT 10
36345: PUSH
36346: EMPTY
36347: LIST
36348: LIST
36349: LIST
36350: PUSH
36351: EMPTY
36352: LIST
36353: LIST
36354: LIST
36355: PPUSH
36356: CALL_OW 69
36360: NOT
36361: IFFALSE 36371
// weapon := ru_time_lapser ;
36363: LD_ADDR_VAR 0 18
36367: PUSH
36368: LD_INT 49
36370: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
36371: LD_VAR 0 12
36375: PUSH
36376: LD_INT 1
36378: PUSH
36379: LD_INT 2
36381: PUSH
36382: EMPTY
36383: LIST
36384: LIST
36385: IN
36386: PUSH
36387: LD_INT 11
36389: PUSH
36390: LD_VAR 0 5
36394: IN
36395: PUSH
36396: LD_INT 30
36398: PUSH
36399: LD_VAR 0 5
36403: IN
36404: OR
36405: AND
36406: PUSH
36407: LD_INT 6
36409: PPUSH
36410: LD_VAR 0 16
36414: PPUSH
36415: CALL_OW 321
36419: PUSH
36420: LD_INT 2
36422: EQUAL
36423: AND
36424: IFFALSE 36589
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
36426: LD_INT 22
36428: PUSH
36429: LD_VAR 0 16
36433: PUSH
36434: EMPTY
36435: LIST
36436: LIST
36437: PUSH
36438: LD_INT 2
36440: PUSH
36441: LD_INT 35
36443: PUSH
36444: LD_INT 11
36446: PUSH
36447: EMPTY
36448: LIST
36449: LIST
36450: PUSH
36451: LD_INT 35
36453: PUSH
36454: LD_INT 30
36456: PUSH
36457: EMPTY
36458: LIST
36459: LIST
36460: PUSH
36461: EMPTY
36462: LIST
36463: LIST
36464: LIST
36465: PUSH
36466: LD_INT 91
36468: PUSH
36469: LD_VAR 0 1
36473: PUSH
36474: LD_INT 18
36476: PUSH
36477: EMPTY
36478: LIST
36479: LIST
36480: LIST
36481: PUSH
36482: EMPTY
36483: LIST
36484: LIST
36485: LIST
36486: PPUSH
36487: CALL_OW 69
36491: NOT
36492: PUSH
36493: LD_INT 22
36495: PUSH
36496: LD_VAR 0 16
36500: PUSH
36501: EMPTY
36502: LIST
36503: LIST
36504: PUSH
36505: LD_INT 2
36507: PUSH
36508: LD_INT 30
36510: PUSH
36511: LD_INT 32
36513: PUSH
36514: EMPTY
36515: LIST
36516: LIST
36517: PUSH
36518: LD_INT 30
36520: PUSH
36521: LD_INT 33
36523: PUSH
36524: EMPTY
36525: LIST
36526: LIST
36527: PUSH
36528: EMPTY
36529: LIST
36530: LIST
36531: LIST
36532: PUSH
36533: LD_INT 91
36535: PUSH
36536: LD_VAR 0 1
36540: PUSH
36541: LD_INT 12
36543: PUSH
36544: EMPTY
36545: LIST
36546: LIST
36547: LIST
36548: PUSH
36549: EMPTY
36550: LIST
36551: LIST
36552: LIST
36553: PUSH
36554: EMPTY
36555: LIST
36556: PPUSH
36557: CALL_OW 69
36561: PUSH
36562: LD_INT 2
36564: GREATER
36565: AND
36566: IFFALSE 36589
// weapon := [ us_radar , ar_radar ] [ nat ] ;
36568: LD_ADDR_VAR 0 18
36572: PUSH
36573: LD_INT 11
36575: PUSH
36576: LD_INT 30
36578: PUSH
36579: EMPTY
36580: LIST
36581: LIST
36582: PUSH
36583: LD_VAR 0 12
36587: ARRAY
36588: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
36589: LD_VAR 0 18
36593: NOT
36594: PUSH
36595: LD_INT 40
36597: PPUSH
36598: LD_VAR 0 16
36602: PPUSH
36603: CALL_OW 321
36607: PUSH
36608: LD_INT 2
36610: EQUAL
36611: AND
36612: PUSH
36613: LD_INT 7
36615: PUSH
36616: LD_VAR 0 5
36620: IN
36621: PUSH
36622: LD_INT 28
36624: PUSH
36625: LD_VAR 0 5
36629: IN
36630: OR
36631: PUSH
36632: LD_INT 45
36634: PUSH
36635: LD_VAR 0 5
36639: IN
36640: OR
36641: AND
36642: IFFALSE 36896
// begin hex := GetHexInfo ( x , y ) ;
36644: LD_ADDR_VAR 0 4
36648: PUSH
36649: LD_VAR 0 10
36653: PPUSH
36654: LD_VAR 0 11
36658: PPUSH
36659: CALL_OW 546
36663: ST_TO_ADDR
// if hex [ 1 ] then
36664: LD_VAR 0 4
36668: PUSH
36669: LD_INT 1
36671: ARRAY
36672: IFFALSE 36676
// exit ;
36674: GO 37079
// height := hex [ 2 ] ;
36676: LD_ADDR_VAR 0 15
36680: PUSH
36681: LD_VAR 0 4
36685: PUSH
36686: LD_INT 2
36688: ARRAY
36689: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
36690: LD_ADDR_VAR 0 14
36694: PUSH
36695: LD_INT 0
36697: PUSH
36698: LD_INT 2
36700: PUSH
36701: LD_INT 3
36703: PUSH
36704: LD_INT 5
36706: PUSH
36707: EMPTY
36708: LIST
36709: LIST
36710: LIST
36711: LIST
36712: ST_TO_ADDR
// for i in tmp do
36713: LD_ADDR_VAR 0 8
36717: PUSH
36718: LD_VAR 0 14
36722: PUSH
36723: FOR_IN
36724: IFFALSE 36894
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
36726: LD_ADDR_VAR 0 9
36730: PUSH
36731: LD_VAR 0 10
36735: PPUSH
36736: LD_VAR 0 8
36740: PPUSH
36741: LD_INT 5
36743: PPUSH
36744: CALL_OW 272
36748: PUSH
36749: LD_VAR 0 11
36753: PPUSH
36754: LD_VAR 0 8
36758: PPUSH
36759: LD_INT 5
36761: PPUSH
36762: CALL_OW 273
36766: PUSH
36767: EMPTY
36768: LIST
36769: LIST
36770: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
36771: LD_VAR 0 9
36775: PUSH
36776: LD_INT 1
36778: ARRAY
36779: PPUSH
36780: LD_VAR 0 9
36784: PUSH
36785: LD_INT 2
36787: ARRAY
36788: PPUSH
36789: CALL_OW 488
36793: IFFALSE 36892
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
36795: LD_ADDR_VAR 0 4
36799: PUSH
36800: LD_VAR 0 9
36804: PUSH
36805: LD_INT 1
36807: ARRAY
36808: PPUSH
36809: LD_VAR 0 9
36813: PUSH
36814: LD_INT 2
36816: ARRAY
36817: PPUSH
36818: CALL_OW 546
36822: ST_TO_ADDR
// if hex [ 1 ] then
36823: LD_VAR 0 4
36827: PUSH
36828: LD_INT 1
36830: ARRAY
36831: IFFALSE 36835
// continue ;
36833: GO 36723
// h := hex [ 2 ] ;
36835: LD_ADDR_VAR 0 13
36839: PUSH
36840: LD_VAR 0 4
36844: PUSH
36845: LD_INT 2
36847: ARRAY
36848: ST_TO_ADDR
// if h + 7 < height then
36849: LD_VAR 0 13
36853: PUSH
36854: LD_INT 7
36856: PLUS
36857: PUSH
36858: LD_VAR 0 15
36862: LESS
36863: IFFALSE 36892
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
36865: LD_ADDR_VAR 0 18
36869: PUSH
36870: LD_INT 7
36872: PUSH
36873: LD_INT 28
36875: PUSH
36876: LD_INT 45
36878: PUSH
36879: EMPTY
36880: LIST
36881: LIST
36882: LIST
36883: PUSH
36884: LD_VAR 0 12
36888: ARRAY
36889: ST_TO_ADDR
// break ;
36890: GO 36894
// end ; end ; end ;
36892: GO 36723
36894: POP
36895: POP
// end ; if not weapon then
36896: LD_VAR 0 18
36900: NOT
36901: IFFALSE 36961
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
36903: LD_ADDR_VAR 0 5
36907: PUSH
36908: LD_VAR 0 5
36912: PUSH
36913: LD_INT 11
36915: PUSH
36916: LD_INT 30
36918: PUSH
36919: LD_INT 49
36921: PUSH
36922: EMPTY
36923: LIST
36924: LIST
36925: LIST
36926: DIFF
36927: ST_TO_ADDR
// if not list then
36928: LD_VAR 0 5
36932: NOT
36933: IFFALSE 36937
// exit ;
36935: GO 37079
// weapon := list [ rand ( 1 , list ) ] ;
36937: LD_ADDR_VAR 0 18
36941: PUSH
36942: LD_VAR 0 5
36946: PUSH
36947: LD_INT 1
36949: PPUSH
36950: LD_VAR 0 5
36954: PPUSH
36955: CALL_OW 12
36959: ARRAY
36960: ST_TO_ADDR
// end ; if weapon then
36961: LD_VAR 0 18
36965: IFFALSE 37079
// begin tmp := CostOfWeapon ( weapon ) ;
36967: LD_ADDR_VAR 0 14
36971: PUSH
36972: LD_VAR 0 18
36976: PPUSH
36977: CALL_OW 451
36981: ST_TO_ADDR
// j := GetBase ( tower ) ;
36982: LD_ADDR_VAR 0 9
36986: PUSH
36987: LD_VAR 0 1
36991: PPUSH
36992: CALL_OW 274
36996: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
36997: LD_VAR 0 9
37001: PPUSH
37002: LD_INT 1
37004: PPUSH
37005: CALL_OW 275
37009: PUSH
37010: LD_VAR 0 14
37014: PUSH
37015: LD_INT 1
37017: ARRAY
37018: GREATEREQUAL
37019: PUSH
37020: LD_VAR 0 9
37024: PPUSH
37025: LD_INT 2
37027: PPUSH
37028: CALL_OW 275
37032: PUSH
37033: LD_VAR 0 14
37037: PUSH
37038: LD_INT 2
37040: ARRAY
37041: GREATEREQUAL
37042: AND
37043: PUSH
37044: LD_VAR 0 9
37048: PPUSH
37049: LD_INT 3
37051: PPUSH
37052: CALL_OW 275
37056: PUSH
37057: LD_VAR 0 14
37061: PUSH
37062: LD_INT 3
37064: ARRAY
37065: GREATEREQUAL
37066: AND
37067: IFFALSE 37079
// result := weapon ;
37069: LD_ADDR_VAR 0 3
37073: PUSH
37074: LD_VAR 0 18
37078: ST_TO_ADDR
// end ; end ;
37079: LD_VAR 0 3
37083: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
37084: LD_INT 0
37086: PPUSH
37087: PPUSH
// result := true ;
37088: LD_ADDR_VAR 0 3
37092: PUSH
37093: LD_INT 1
37095: ST_TO_ADDR
// if array1 = array2 then
37096: LD_VAR 0 1
37100: PUSH
37101: LD_VAR 0 2
37105: EQUAL
37106: IFFALSE 37166
// begin for i = 1 to array1 do
37108: LD_ADDR_VAR 0 4
37112: PUSH
37113: DOUBLE
37114: LD_INT 1
37116: DEC
37117: ST_TO_ADDR
37118: LD_VAR 0 1
37122: PUSH
37123: FOR_TO
37124: IFFALSE 37162
// if array1 [ i ] <> array2 [ i ] then
37126: LD_VAR 0 1
37130: PUSH
37131: LD_VAR 0 4
37135: ARRAY
37136: PUSH
37137: LD_VAR 0 2
37141: PUSH
37142: LD_VAR 0 4
37146: ARRAY
37147: NONEQUAL
37148: IFFALSE 37160
// begin result := false ;
37150: LD_ADDR_VAR 0 3
37154: PUSH
37155: LD_INT 0
37157: ST_TO_ADDR
// break ;
37158: GO 37162
// end ;
37160: GO 37123
37162: POP
37163: POP
// end else
37164: GO 37174
// result := false ;
37166: LD_ADDR_VAR 0 3
37170: PUSH
37171: LD_INT 0
37173: ST_TO_ADDR
// end ;
37174: LD_VAR 0 3
37178: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
37179: LD_INT 0
37181: PPUSH
37182: PPUSH
// if not array1 or not array2 then
37183: LD_VAR 0 1
37187: NOT
37188: PUSH
37189: LD_VAR 0 2
37193: NOT
37194: OR
37195: IFFALSE 37199
// exit ;
37197: GO 37263
// result := true ;
37199: LD_ADDR_VAR 0 3
37203: PUSH
37204: LD_INT 1
37206: ST_TO_ADDR
// for i = 1 to array1 do
37207: LD_ADDR_VAR 0 4
37211: PUSH
37212: DOUBLE
37213: LD_INT 1
37215: DEC
37216: ST_TO_ADDR
37217: LD_VAR 0 1
37221: PUSH
37222: FOR_TO
37223: IFFALSE 37261
// if array1 [ i ] <> array2 [ i ] then
37225: LD_VAR 0 1
37229: PUSH
37230: LD_VAR 0 4
37234: ARRAY
37235: PUSH
37236: LD_VAR 0 2
37240: PUSH
37241: LD_VAR 0 4
37245: ARRAY
37246: NONEQUAL
37247: IFFALSE 37259
// begin result := false ;
37249: LD_ADDR_VAR 0 3
37253: PUSH
37254: LD_INT 0
37256: ST_TO_ADDR
// break ;
37257: GO 37261
// end ;
37259: GO 37222
37261: POP
37262: POP
// end ;
37263: LD_VAR 0 3
37267: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
37268: LD_INT 0
37270: PPUSH
37271: PPUSH
37272: PPUSH
// pom := GetBase ( fac ) ;
37273: LD_ADDR_VAR 0 5
37277: PUSH
37278: LD_VAR 0 1
37282: PPUSH
37283: CALL_OW 274
37287: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
37288: LD_ADDR_VAR 0 4
37292: PUSH
37293: LD_VAR 0 2
37297: PUSH
37298: LD_INT 1
37300: ARRAY
37301: PPUSH
37302: LD_VAR 0 2
37306: PUSH
37307: LD_INT 2
37309: ARRAY
37310: PPUSH
37311: LD_VAR 0 2
37315: PUSH
37316: LD_INT 3
37318: ARRAY
37319: PPUSH
37320: LD_VAR 0 2
37324: PUSH
37325: LD_INT 4
37327: ARRAY
37328: PPUSH
37329: CALL_OW 449
37333: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
37334: LD_ADDR_VAR 0 3
37338: PUSH
37339: LD_VAR 0 5
37343: PPUSH
37344: LD_INT 1
37346: PPUSH
37347: CALL_OW 275
37351: PUSH
37352: LD_VAR 0 4
37356: PUSH
37357: LD_INT 1
37359: ARRAY
37360: GREATEREQUAL
37361: PUSH
37362: LD_VAR 0 5
37366: PPUSH
37367: LD_INT 2
37369: PPUSH
37370: CALL_OW 275
37374: PUSH
37375: LD_VAR 0 4
37379: PUSH
37380: LD_INT 2
37382: ARRAY
37383: GREATEREQUAL
37384: AND
37385: PUSH
37386: LD_VAR 0 5
37390: PPUSH
37391: LD_INT 3
37393: PPUSH
37394: CALL_OW 275
37398: PUSH
37399: LD_VAR 0 4
37403: PUSH
37404: LD_INT 3
37406: ARRAY
37407: GREATEREQUAL
37408: AND
37409: ST_TO_ADDR
// end ;
37410: LD_VAR 0 3
37414: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
37415: LD_INT 0
37417: PPUSH
37418: PPUSH
37419: PPUSH
37420: PPUSH
// pom := GetBase ( building ) ;
37421: LD_ADDR_VAR 0 3
37425: PUSH
37426: LD_VAR 0 1
37430: PPUSH
37431: CALL_OW 274
37435: ST_TO_ADDR
// if not pom then
37436: LD_VAR 0 3
37440: NOT
37441: IFFALSE 37445
// exit ;
37443: GO 37615
// btype := GetBType ( building ) ;
37445: LD_ADDR_VAR 0 5
37449: PUSH
37450: LD_VAR 0 1
37454: PPUSH
37455: CALL_OW 266
37459: ST_TO_ADDR
// if btype = b_armoury then
37460: LD_VAR 0 5
37464: PUSH
37465: LD_INT 4
37467: EQUAL
37468: IFFALSE 37478
// btype := b_barracks ;
37470: LD_ADDR_VAR 0 5
37474: PUSH
37475: LD_INT 5
37477: ST_TO_ADDR
// if btype = b_depot then
37478: LD_VAR 0 5
37482: PUSH
37483: LD_INT 0
37485: EQUAL
37486: IFFALSE 37496
// btype := b_warehouse ;
37488: LD_ADDR_VAR 0 5
37492: PUSH
37493: LD_INT 1
37495: ST_TO_ADDR
// if btype = b_workshop then
37496: LD_VAR 0 5
37500: PUSH
37501: LD_INT 2
37503: EQUAL
37504: IFFALSE 37514
// btype := b_factory ;
37506: LD_ADDR_VAR 0 5
37510: PUSH
37511: LD_INT 3
37513: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
37514: LD_ADDR_VAR 0 4
37518: PUSH
37519: LD_VAR 0 5
37523: PPUSH
37524: LD_VAR 0 1
37528: PPUSH
37529: CALL_OW 248
37533: PPUSH
37534: CALL_OW 450
37538: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
37539: LD_ADDR_VAR 0 2
37543: PUSH
37544: LD_VAR 0 3
37548: PPUSH
37549: LD_INT 1
37551: PPUSH
37552: CALL_OW 275
37556: PUSH
37557: LD_VAR 0 4
37561: PUSH
37562: LD_INT 1
37564: ARRAY
37565: GREATEREQUAL
37566: PUSH
37567: LD_VAR 0 3
37571: PPUSH
37572: LD_INT 2
37574: PPUSH
37575: CALL_OW 275
37579: PUSH
37580: LD_VAR 0 4
37584: PUSH
37585: LD_INT 2
37587: ARRAY
37588: GREATEREQUAL
37589: AND
37590: PUSH
37591: LD_VAR 0 3
37595: PPUSH
37596: LD_INT 3
37598: PPUSH
37599: CALL_OW 275
37603: PUSH
37604: LD_VAR 0 4
37608: PUSH
37609: LD_INT 3
37611: ARRAY
37612: GREATEREQUAL
37613: AND
37614: ST_TO_ADDR
// end ;
37615: LD_VAR 0 2
37619: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
37620: LD_INT 0
37622: PPUSH
37623: PPUSH
37624: PPUSH
// pom := GetBase ( building ) ;
37625: LD_ADDR_VAR 0 4
37629: PUSH
37630: LD_VAR 0 1
37634: PPUSH
37635: CALL_OW 274
37639: ST_TO_ADDR
// if not pom then
37640: LD_VAR 0 4
37644: NOT
37645: IFFALSE 37649
// exit ;
37647: GO 37750
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
37649: LD_ADDR_VAR 0 5
37653: PUSH
37654: LD_VAR 0 2
37658: PPUSH
37659: LD_VAR 0 1
37663: PPUSH
37664: CALL_OW 248
37668: PPUSH
37669: CALL_OW 450
37673: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
37674: LD_ADDR_VAR 0 3
37678: PUSH
37679: LD_VAR 0 4
37683: PPUSH
37684: LD_INT 1
37686: PPUSH
37687: CALL_OW 275
37691: PUSH
37692: LD_VAR 0 5
37696: PUSH
37697: LD_INT 1
37699: ARRAY
37700: GREATEREQUAL
37701: PUSH
37702: LD_VAR 0 4
37706: PPUSH
37707: LD_INT 2
37709: PPUSH
37710: CALL_OW 275
37714: PUSH
37715: LD_VAR 0 5
37719: PUSH
37720: LD_INT 2
37722: ARRAY
37723: GREATEREQUAL
37724: AND
37725: PUSH
37726: LD_VAR 0 4
37730: PPUSH
37731: LD_INT 3
37733: PPUSH
37734: CALL_OW 275
37738: PUSH
37739: LD_VAR 0 5
37743: PUSH
37744: LD_INT 3
37746: ARRAY
37747: GREATEREQUAL
37748: AND
37749: ST_TO_ADDR
// end ;
37750: LD_VAR 0 3
37754: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
37755: LD_INT 0
37757: PPUSH
37758: PPUSH
37759: PPUSH
37760: PPUSH
37761: PPUSH
37762: PPUSH
37763: PPUSH
37764: PPUSH
37765: PPUSH
37766: PPUSH
37767: PPUSH
// result := false ;
37768: LD_ADDR_VAR 0 8
37772: PUSH
37773: LD_INT 0
37775: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
37776: LD_VAR 0 5
37780: NOT
37781: PUSH
37782: LD_VAR 0 1
37786: NOT
37787: OR
37788: PUSH
37789: LD_VAR 0 2
37793: NOT
37794: OR
37795: PUSH
37796: LD_VAR 0 3
37800: NOT
37801: OR
37802: IFFALSE 37806
// exit ;
37804: GO 38620
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
37806: LD_ADDR_VAR 0 14
37810: PUSH
37811: LD_VAR 0 1
37815: PPUSH
37816: LD_VAR 0 2
37820: PPUSH
37821: LD_VAR 0 3
37825: PPUSH
37826: LD_VAR 0 4
37830: PPUSH
37831: LD_VAR 0 5
37835: PUSH
37836: LD_INT 1
37838: ARRAY
37839: PPUSH
37840: CALL_OW 248
37844: PPUSH
37845: LD_INT 0
37847: PPUSH
37848: CALL 39457 0 6
37852: ST_TO_ADDR
// if not hexes then
37853: LD_VAR 0 14
37857: NOT
37858: IFFALSE 37862
// exit ;
37860: GO 38620
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
37862: LD_ADDR_VAR 0 17
37866: PUSH
37867: LD_VAR 0 5
37871: PPUSH
37872: LD_INT 22
37874: PUSH
37875: LD_VAR 0 13
37879: PPUSH
37880: CALL_OW 255
37884: PUSH
37885: EMPTY
37886: LIST
37887: LIST
37888: PUSH
37889: LD_INT 2
37891: PUSH
37892: LD_INT 30
37894: PUSH
37895: LD_INT 0
37897: PUSH
37898: EMPTY
37899: LIST
37900: LIST
37901: PUSH
37902: LD_INT 30
37904: PUSH
37905: LD_INT 1
37907: PUSH
37908: EMPTY
37909: LIST
37910: LIST
37911: PUSH
37912: EMPTY
37913: LIST
37914: LIST
37915: LIST
37916: PUSH
37917: EMPTY
37918: LIST
37919: LIST
37920: PPUSH
37921: CALL_OW 72
37925: ST_TO_ADDR
// for i = 1 to hexes do
37926: LD_ADDR_VAR 0 9
37930: PUSH
37931: DOUBLE
37932: LD_INT 1
37934: DEC
37935: ST_TO_ADDR
37936: LD_VAR 0 14
37940: PUSH
37941: FOR_TO
37942: IFFALSE 38618
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
37944: LD_ADDR_VAR 0 13
37948: PUSH
37949: LD_VAR 0 14
37953: PUSH
37954: LD_VAR 0 9
37958: ARRAY
37959: PUSH
37960: LD_INT 1
37962: ARRAY
37963: PPUSH
37964: LD_VAR 0 14
37968: PUSH
37969: LD_VAR 0 9
37973: ARRAY
37974: PUSH
37975: LD_INT 2
37977: ARRAY
37978: PPUSH
37979: CALL_OW 428
37983: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
37984: LD_VAR 0 14
37988: PUSH
37989: LD_VAR 0 9
37993: ARRAY
37994: PUSH
37995: LD_INT 1
37997: ARRAY
37998: PPUSH
37999: LD_VAR 0 14
38003: PUSH
38004: LD_VAR 0 9
38008: ARRAY
38009: PUSH
38010: LD_INT 2
38012: ARRAY
38013: PPUSH
38014: CALL_OW 351
38018: PUSH
38019: LD_VAR 0 14
38023: PUSH
38024: LD_VAR 0 9
38028: ARRAY
38029: PUSH
38030: LD_INT 1
38032: ARRAY
38033: PPUSH
38034: LD_VAR 0 14
38038: PUSH
38039: LD_VAR 0 9
38043: ARRAY
38044: PUSH
38045: LD_INT 2
38047: ARRAY
38048: PPUSH
38049: CALL_OW 488
38053: NOT
38054: OR
38055: PUSH
38056: LD_VAR 0 13
38060: PPUSH
38061: CALL_OW 247
38065: PUSH
38066: LD_INT 3
38068: EQUAL
38069: OR
38070: IFFALSE 38076
// exit ;
38072: POP
38073: POP
38074: GO 38620
// if not tmp then
38076: LD_VAR 0 13
38080: NOT
38081: IFFALSE 38085
// continue ;
38083: GO 37941
// result := true ;
38085: LD_ADDR_VAR 0 8
38089: PUSH
38090: LD_INT 1
38092: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
38093: LD_VAR 0 6
38097: PUSH
38098: LD_VAR 0 13
38102: PPUSH
38103: CALL_OW 247
38107: PUSH
38108: LD_INT 2
38110: EQUAL
38111: AND
38112: PUSH
38113: LD_VAR 0 13
38117: PPUSH
38118: CALL_OW 263
38122: PUSH
38123: LD_INT 1
38125: EQUAL
38126: AND
38127: IFFALSE 38291
// begin if IsDrivenBy ( tmp ) then
38129: LD_VAR 0 13
38133: PPUSH
38134: CALL_OW 311
38138: IFFALSE 38142
// continue ;
38140: GO 37941
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
38142: LD_VAR 0 6
38146: PPUSH
38147: LD_INT 3
38149: PUSH
38150: LD_INT 60
38152: PUSH
38153: EMPTY
38154: LIST
38155: PUSH
38156: EMPTY
38157: LIST
38158: LIST
38159: PUSH
38160: LD_INT 3
38162: PUSH
38163: LD_INT 55
38165: PUSH
38166: EMPTY
38167: LIST
38168: PUSH
38169: EMPTY
38170: LIST
38171: LIST
38172: PUSH
38173: EMPTY
38174: LIST
38175: LIST
38176: PPUSH
38177: CALL_OW 72
38181: IFFALSE 38289
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
38183: LD_ADDR_VAR 0 18
38187: PUSH
38188: LD_VAR 0 6
38192: PPUSH
38193: LD_INT 3
38195: PUSH
38196: LD_INT 60
38198: PUSH
38199: EMPTY
38200: LIST
38201: PUSH
38202: EMPTY
38203: LIST
38204: LIST
38205: PUSH
38206: LD_INT 3
38208: PUSH
38209: LD_INT 55
38211: PUSH
38212: EMPTY
38213: LIST
38214: PUSH
38215: EMPTY
38216: LIST
38217: LIST
38218: PUSH
38219: EMPTY
38220: LIST
38221: LIST
38222: PPUSH
38223: CALL_OW 72
38227: PUSH
38228: LD_INT 1
38230: ARRAY
38231: ST_TO_ADDR
// if IsInUnit ( driver ) then
38232: LD_VAR 0 18
38236: PPUSH
38237: CALL_OW 310
38241: IFFALSE 38252
// ComExit ( driver ) ;
38243: LD_VAR 0 18
38247: PPUSH
38248: CALL 62641 0 1
// AddComEnterUnit ( driver , tmp ) ;
38252: LD_VAR 0 18
38256: PPUSH
38257: LD_VAR 0 13
38261: PPUSH
38262: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
38266: LD_VAR 0 18
38270: PPUSH
38271: LD_VAR 0 7
38275: PPUSH
38276: CALL_OW 173
// AddComExitVehicle ( driver ) ;
38280: LD_VAR 0 18
38284: PPUSH
38285: CALL_OW 181
// end ; continue ;
38289: GO 37941
// end ; if not cleaners or not tmp in cleaners then
38291: LD_VAR 0 6
38295: NOT
38296: PUSH
38297: LD_VAR 0 13
38301: PUSH
38302: LD_VAR 0 6
38306: IN
38307: NOT
38308: OR
38309: IFFALSE 38616
// begin if dep then
38311: LD_VAR 0 17
38315: IFFALSE 38451
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
38317: LD_ADDR_VAR 0 16
38321: PUSH
38322: LD_VAR 0 17
38326: PUSH
38327: LD_INT 1
38329: ARRAY
38330: PPUSH
38331: CALL_OW 250
38335: PPUSH
38336: LD_VAR 0 17
38340: PUSH
38341: LD_INT 1
38343: ARRAY
38344: PPUSH
38345: CALL_OW 254
38349: PPUSH
38350: LD_INT 5
38352: PPUSH
38353: CALL_OW 272
38357: PUSH
38358: LD_VAR 0 17
38362: PUSH
38363: LD_INT 1
38365: ARRAY
38366: PPUSH
38367: CALL_OW 251
38371: PPUSH
38372: LD_VAR 0 17
38376: PUSH
38377: LD_INT 1
38379: ARRAY
38380: PPUSH
38381: CALL_OW 254
38385: PPUSH
38386: LD_INT 5
38388: PPUSH
38389: CALL_OW 273
38393: PUSH
38394: EMPTY
38395: LIST
38396: LIST
38397: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
38398: LD_VAR 0 16
38402: PUSH
38403: LD_INT 1
38405: ARRAY
38406: PPUSH
38407: LD_VAR 0 16
38411: PUSH
38412: LD_INT 2
38414: ARRAY
38415: PPUSH
38416: CALL_OW 488
38420: IFFALSE 38451
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
38422: LD_VAR 0 13
38426: PPUSH
38427: LD_VAR 0 16
38431: PUSH
38432: LD_INT 1
38434: ARRAY
38435: PPUSH
38436: LD_VAR 0 16
38440: PUSH
38441: LD_INT 2
38443: ARRAY
38444: PPUSH
38445: CALL_OW 111
// continue ;
38449: GO 37941
// end ; end ; r := GetDir ( tmp ) ;
38451: LD_ADDR_VAR 0 15
38455: PUSH
38456: LD_VAR 0 13
38460: PPUSH
38461: CALL_OW 254
38465: ST_TO_ADDR
// if r = 5 then
38466: LD_VAR 0 15
38470: PUSH
38471: LD_INT 5
38473: EQUAL
38474: IFFALSE 38484
// r := 0 ;
38476: LD_ADDR_VAR 0 15
38480: PUSH
38481: LD_INT 0
38483: ST_TO_ADDR
// for j = r to 5 do
38484: LD_ADDR_VAR 0 10
38488: PUSH
38489: DOUBLE
38490: LD_VAR 0 15
38494: DEC
38495: ST_TO_ADDR
38496: LD_INT 5
38498: PUSH
38499: FOR_TO
38500: IFFALSE 38614
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
38502: LD_ADDR_VAR 0 11
38506: PUSH
38507: LD_VAR 0 13
38511: PPUSH
38512: CALL_OW 250
38516: PPUSH
38517: LD_VAR 0 10
38521: PPUSH
38522: LD_INT 2
38524: PPUSH
38525: CALL_OW 272
38529: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
38530: LD_ADDR_VAR 0 12
38534: PUSH
38535: LD_VAR 0 13
38539: PPUSH
38540: CALL_OW 251
38544: PPUSH
38545: LD_VAR 0 10
38549: PPUSH
38550: LD_INT 2
38552: PPUSH
38553: CALL_OW 273
38557: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
38558: LD_VAR 0 11
38562: PPUSH
38563: LD_VAR 0 12
38567: PPUSH
38568: CALL_OW 488
38572: PUSH
38573: LD_VAR 0 11
38577: PPUSH
38578: LD_VAR 0 12
38582: PPUSH
38583: CALL_OW 428
38587: NOT
38588: AND
38589: IFFALSE 38612
// begin ComMoveXY ( tmp , _x , _y ) ;
38591: LD_VAR 0 13
38595: PPUSH
38596: LD_VAR 0 11
38600: PPUSH
38601: LD_VAR 0 12
38605: PPUSH
38606: CALL_OW 111
// break ;
38610: GO 38614
// end ; end ;
38612: GO 38499
38614: POP
38615: POP
// end ; end ;
38616: GO 37941
38618: POP
38619: POP
// end ;
38620: LD_VAR 0 8
38624: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
38625: LD_INT 0
38627: PPUSH
38628: PPUSH
38629: PPUSH
38630: PPUSH
38631: PPUSH
38632: PPUSH
38633: PPUSH
38634: PPUSH
38635: PPUSH
38636: PPUSH
// result := false ;
38637: LD_ADDR_VAR 0 6
38641: PUSH
38642: LD_INT 0
38644: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
38645: LD_VAR 0 1
38649: NOT
38650: PUSH
38651: LD_VAR 0 1
38655: PPUSH
38656: CALL_OW 266
38660: PUSH
38661: LD_INT 0
38663: PUSH
38664: LD_INT 1
38666: PUSH
38667: EMPTY
38668: LIST
38669: LIST
38670: IN
38671: NOT
38672: OR
38673: PUSH
38674: LD_VAR 0 2
38678: NOT
38679: OR
38680: PUSH
38681: LD_VAR 0 5
38685: PUSH
38686: LD_INT 0
38688: PUSH
38689: LD_INT 1
38691: PUSH
38692: LD_INT 2
38694: PUSH
38695: LD_INT 3
38697: PUSH
38698: LD_INT 4
38700: PUSH
38701: LD_INT 5
38703: PUSH
38704: EMPTY
38705: LIST
38706: LIST
38707: LIST
38708: LIST
38709: LIST
38710: LIST
38711: IN
38712: NOT
38713: OR
38714: PUSH
38715: LD_VAR 0 3
38719: PPUSH
38720: LD_VAR 0 4
38724: PPUSH
38725: CALL_OW 488
38729: NOT
38730: OR
38731: IFFALSE 38735
// exit ;
38733: GO 39452
// pom := GetBase ( depot ) ;
38735: LD_ADDR_VAR 0 10
38739: PUSH
38740: LD_VAR 0 1
38744: PPUSH
38745: CALL_OW 274
38749: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
38750: LD_ADDR_VAR 0 11
38754: PUSH
38755: LD_VAR 0 2
38759: PPUSH
38760: LD_VAR 0 1
38764: PPUSH
38765: CALL_OW 248
38769: PPUSH
38770: CALL_OW 450
38774: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
38775: LD_VAR 0 10
38779: PPUSH
38780: LD_INT 1
38782: PPUSH
38783: CALL_OW 275
38787: PUSH
38788: LD_VAR 0 11
38792: PUSH
38793: LD_INT 1
38795: ARRAY
38796: GREATEREQUAL
38797: PUSH
38798: LD_VAR 0 10
38802: PPUSH
38803: LD_INT 2
38805: PPUSH
38806: CALL_OW 275
38810: PUSH
38811: LD_VAR 0 11
38815: PUSH
38816: LD_INT 2
38818: ARRAY
38819: GREATEREQUAL
38820: AND
38821: PUSH
38822: LD_VAR 0 10
38826: PPUSH
38827: LD_INT 3
38829: PPUSH
38830: CALL_OW 275
38834: PUSH
38835: LD_VAR 0 11
38839: PUSH
38840: LD_INT 3
38842: ARRAY
38843: GREATEREQUAL
38844: AND
38845: NOT
38846: IFFALSE 38850
// exit ;
38848: GO 39452
// if GetBType ( depot ) = b_depot then
38850: LD_VAR 0 1
38854: PPUSH
38855: CALL_OW 266
38859: PUSH
38860: LD_INT 0
38862: EQUAL
38863: IFFALSE 38875
// dist := 28 else
38865: LD_ADDR_VAR 0 14
38869: PUSH
38870: LD_INT 28
38872: ST_TO_ADDR
38873: GO 38883
// dist := 36 ;
38875: LD_ADDR_VAR 0 14
38879: PUSH
38880: LD_INT 36
38882: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
38883: LD_VAR 0 1
38887: PPUSH
38888: LD_VAR 0 3
38892: PPUSH
38893: LD_VAR 0 4
38897: PPUSH
38898: CALL_OW 297
38902: PUSH
38903: LD_VAR 0 14
38907: GREATER
38908: IFFALSE 38912
// exit ;
38910: GO 39452
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
38912: LD_ADDR_VAR 0 12
38916: PUSH
38917: LD_VAR 0 2
38921: PPUSH
38922: LD_VAR 0 3
38926: PPUSH
38927: LD_VAR 0 4
38931: PPUSH
38932: LD_VAR 0 5
38936: PPUSH
38937: LD_VAR 0 1
38941: PPUSH
38942: CALL_OW 248
38946: PPUSH
38947: LD_INT 0
38949: PPUSH
38950: CALL 39457 0 6
38954: ST_TO_ADDR
// if not hexes then
38955: LD_VAR 0 12
38959: NOT
38960: IFFALSE 38964
// exit ;
38962: GO 39452
// hex := GetHexInfo ( x , y ) ;
38964: LD_ADDR_VAR 0 15
38968: PUSH
38969: LD_VAR 0 3
38973: PPUSH
38974: LD_VAR 0 4
38978: PPUSH
38979: CALL_OW 546
38983: ST_TO_ADDR
// if hex [ 1 ] then
38984: LD_VAR 0 15
38988: PUSH
38989: LD_INT 1
38991: ARRAY
38992: IFFALSE 38996
// exit ;
38994: GO 39452
// height := hex [ 2 ] ;
38996: LD_ADDR_VAR 0 13
39000: PUSH
39001: LD_VAR 0 15
39005: PUSH
39006: LD_INT 2
39008: ARRAY
39009: ST_TO_ADDR
// for i = 1 to hexes do
39010: LD_ADDR_VAR 0 7
39014: PUSH
39015: DOUBLE
39016: LD_INT 1
39018: DEC
39019: ST_TO_ADDR
39020: LD_VAR 0 12
39024: PUSH
39025: FOR_TO
39026: IFFALSE 39356
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
39028: LD_VAR 0 12
39032: PUSH
39033: LD_VAR 0 7
39037: ARRAY
39038: PUSH
39039: LD_INT 1
39041: ARRAY
39042: PPUSH
39043: LD_VAR 0 12
39047: PUSH
39048: LD_VAR 0 7
39052: ARRAY
39053: PUSH
39054: LD_INT 2
39056: ARRAY
39057: PPUSH
39058: CALL_OW 488
39062: NOT
39063: PUSH
39064: LD_VAR 0 12
39068: PUSH
39069: LD_VAR 0 7
39073: ARRAY
39074: PUSH
39075: LD_INT 1
39077: ARRAY
39078: PPUSH
39079: LD_VAR 0 12
39083: PUSH
39084: LD_VAR 0 7
39088: ARRAY
39089: PUSH
39090: LD_INT 2
39092: ARRAY
39093: PPUSH
39094: CALL_OW 428
39098: PUSH
39099: LD_INT 0
39101: GREATER
39102: OR
39103: PUSH
39104: LD_VAR 0 12
39108: PUSH
39109: LD_VAR 0 7
39113: ARRAY
39114: PUSH
39115: LD_INT 1
39117: ARRAY
39118: PPUSH
39119: LD_VAR 0 12
39123: PUSH
39124: LD_VAR 0 7
39128: ARRAY
39129: PUSH
39130: LD_INT 2
39132: ARRAY
39133: PPUSH
39134: CALL_OW 351
39138: OR
39139: IFFALSE 39145
// exit ;
39141: POP
39142: POP
39143: GO 39452
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
39145: LD_ADDR_VAR 0 8
39149: PUSH
39150: LD_VAR 0 12
39154: PUSH
39155: LD_VAR 0 7
39159: ARRAY
39160: PUSH
39161: LD_INT 1
39163: ARRAY
39164: PPUSH
39165: LD_VAR 0 12
39169: PUSH
39170: LD_VAR 0 7
39174: ARRAY
39175: PUSH
39176: LD_INT 2
39178: ARRAY
39179: PPUSH
39180: CALL_OW 546
39184: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
39185: LD_VAR 0 8
39189: PUSH
39190: LD_INT 1
39192: ARRAY
39193: PUSH
39194: LD_VAR 0 8
39198: PUSH
39199: LD_INT 2
39201: ARRAY
39202: PUSH
39203: LD_VAR 0 13
39207: PUSH
39208: LD_INT 2
39210: PLUS
39211: GREATER
39212: OR
39213: PUSH
39214: LD_VAR 0 8
39218: PUSH
39219: LD_INT 2
39221: ARRAY
39222: PUSH
39223: LD_VAR 0 13
39227: PUSH
39228: LD_INT 2
39230: MINUS
39231: LESS
39232: OR
39233: PUSH
39234: LD_VAR 0 8
39238: PUSH
39239: LD_INT 3
39241: ARRAY
39242: PUSH
39243: LD_INT 0
39245: PUSH
39246: LD_INT 8
39248: PUSH
39249: LD_INT 9
39251: PUSH
39252: LD_INT 10
39254: PUSH
39255: LD_INT 11
39257: PUSH
39258: LD_INT 12
39260: PUSH
39261: LD_INT 13
39263: PUSH
39264: LD_INT 16
39266: PUSH
39267: LD_INT 17
39269: PUSH
39270: LD_INT 18
39272: PUSH
39273: LD_INT 19
39275: PUSH
39276: LD_INT 20
39278: PUSH
39279: LD_INT 21
39281: PUSH
39282: EMPTY
39283: LIST
39284: LIST
39285: LIST
39286: LIST
39287: LIST
39288: LIST
39289: LIST
39290: LIST
39291: LIST
39292: LIST
39293: LIST
39294: LIST
39295: LIST
39296: IN
39297: NOT
39298: OR
39299: PUSH
39300: LD_VAR 0 8
39304: PUSH
39305: LD_INT 5
39307: ARRAY
39308: NOT
39309: OR
39310: PUSH
39311: LD_VAR 0 8
39315: PUSH
39316: LD_INT 6
39318: ARRAY
39319: PUSH
39320: LD_INT 1
39322: PUSH
39323: LD_INT 2
39325: PUSH
39326: LD_INT 7
39328: PUSH
39329: LD_INT 9
39331: PUSH
39332: LD_INT 10
39334: PUSH
39335: LD_INT 11
39337: PUSH
39338: EMPTY
39339: LIST
39340: LIST
39341: LIST
39342: LIST
39343: LIST
39344: LIST
39345: IN
39346: NOT
39347: OR
39348: IFFALSE 39354
// exit ;
39350: POP
39351: POP
39352: GO 39452
// end ;
39354: GO 39025
39356: POP
39357: POP
// side := GetSide ( depot ) ;
39358: LD_ADDR_VAR 0 9
39362: PUSH
39363: LD_VAR 0 1
39367: PPUSH
39368: CALL_OW 255
39372: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
39373: LD_VAR 0 9
39377: PPUSH
39378: LD_VAR 0 3
39382: PPUSH
39383: LD_VAR 0 4
39387: PPUSH
39388: LD_INT 20
39390: PPUSH
39391: CALL 31773 0 4
39395: PUSH
39396: LD_INT 4
39398: ARRAY
39399: IFFALSE 39403
// exit ;
39401: GO 39452
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
39403: LD_VAR 0 2
39407: PUSH
39408: LD_INT 29
39410: PUSH
39411: LD_INT 30
39413: PUSH
39414: EMPTY
39415: LIST
39416: LIST
39417: IN
39418: PUSH
39419: LD_VAR 0 3
39423: PPUSH
39424: LD_VAR 0 4
39428: PPUSH
39429: LD_VAR 0 9
39433: PPUSH
39434: CALL_OW 440
39438: NOT
39439: AND
39440: IFFALSE 39444
// exit ;
39442: GO 39452
// result := true ;
39444: LD_ADDR_VAR 0 6
39448: PUSH
39449: LD_INT 1
39451: ST_TO_ADDR
// end ;
39452: LD_VAR 0 6
39456: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
39457: LD_INT 0
39459: PPUSH
39460: PPUSH
39461: PPUSH
39462: PPUSH
39463: PPUSH
39464: PPUSH
39465: PPUSH
39466: PPUSH
39467: PPUSH
39468: PPUSH
39469: PPUSH
39470: PPUSH
39471: PPUSH
39472: PPUSH
39473: PPUSH
39474: PPUSH
39475: PPUSH
39476: PPUSH
39477: PPUSH
39478: PPUSH
39479: PPUSH
39480: PPUSH
39481: PPUSH
39482: PPUSH
39483: PPUSH
39484: PPUSH
39485: PPUSH
39486: PPUSH
39487: PPUSH
39488: PPUSH
39489: PPUSH
39490: PPUSH
39491: PPUSH
39492: PPUSH
39493: PPUSH
39494: PPUSH
39495: PPUSH
39496: PPUSH
39497: PPUSH
39498: PPUSH
39499: PPUSH
39500: PPUSH
39501: PPUSH
39502: PPUSH
39503: PPUSH
39504: PPUSH
39505: PPUSH
39506: PPUSH
39507: PPUSH
39508: PPUSH
39509: PPUSH
39510: PPUSH
39511: PPUSH
39512: PPUSH
39513: PPUSH
39514: PPUSH
39515: PPUSH
39516: PPUSH
// result = [ ] ;
39517: LD_ADDR_VAR 0 7
39521: PUSH
39522: EMPTY
39523: ST_TO_ADDR
// temp_list = [ ] ;
39524: LD_ADDR_VAR 0 9
39528: PUSH
39529: EMPTY
39530: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
39531: LD_VAR 0 4
39535: PUSH
39536: LD_INT 0
39538: PUSH
39539: LD_INT 1
39541: PUSH
39542: LD_INT 2
39544: PUSH
39545: LD_INT 3
39547: PUSH
39548: LD_INT 4
39550: PUSH
39551: LD_INT 5
39553: PUSH
39554: EMPTY
39555: LIST
39556: LIST
39557: LIST
39558: LIST
39559: LIST
39560: LIST
39561: IN
39562: NOT
39563: PUSH
39564: LD_VAR 0 1
39568: PUSH
39569: LD_INT 0
39571: PUSH
39572: LD_INT 1
39574: PUSH
39575: EMPTY
39576: LIST
39577: LIST
39578: IN
39579: PUSH
39580: LD_VAR 0 5
39584: PUSH
39585: LD_INT 1
39587: PUSH
39588: LD_INT 2
39590: PUSH
39591: LD_INT 3
39593: PUSH
39594: EMPTY
39595: LIST
39596: LIST
39597: LIST
39598: IN
39599: NOT
39600: AND
39601: OR
39602: IFFALSE 39606
// exit ;
39604: GO 57997
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
39606: LD_VAR 0 1
39610: PUSH
39611: LD_INT 6
39613: PUSH
39614: LD_INT 7
39616: PUSH
39617: LD_INT 8
39619: PUSH
39620: LD_INT 13
39622: PUSH
39623: LD_INT 12
39625: PUSH
39626: LD_INT 15
39628: PUSH
39629: LD_INT 11
39631: PUSH
39632: LD_INT 14
39634: PUSH
39635: LD_INT 10
39637: PUSH
39638: EMPTY
39639: LIST
39640: LIST
39641: LIST
39642: LIST
39643: LIST
39644: LIST
39645: LIST
39646: LIST
39647: LIST
39648: IN
39649: IFFALSE 39659
// btype = b_lab ;
39651: LD_ADDR_VAR 0 1
39655: PUSH
39656: LD_INT 6
39658: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
39659: LD_VAR 0 6
39663: PUSH
39664: LD_INT 0
39666: PUSH
39667: LD_INT 1
39669: PUSH
39670: LD_INT 2
39672: PUSH
39673: EMPTY
39674: LIST
39675: LIST
39676: LIST
39677: IN
39678: NOT
39679: PUSH
39680: LD_VAR 0 1
39684: PUSH
39685: LD_INT 0
39687: PUSH
39688: LD_INT 1
39690: PUSH
39691: LD_INT 2
39693: PUSH
39694: LD_INT 3
39696: PUSH
39697: LD_INT 6
39699: PUSH
39700: LD_INT 36
39702: PUSH
39703: LD_INT 4
39705: PUSH
39706: LD_INT 5
39708: PUSH
39709: LD_INT 31
39711: PUSH
39712: LD_INT 32
39714: PUSH
39715: LD_INT 33
39717: PUSH
39718: EMPTY
39719: LIST
39720: LIST
39721: LIST
39722: LIST
39723: LIST
39724: LIST
39725: LIST
39726: LIST
39727: LIST
39728: LIST
39729: LIST
39730: IN
39731: NOT
39732: PUSH
39733: LD_VAR 0 6
39737: PUSH
39738: LD_INT 1
39740: EQUAL
39741: AND
39742: OR
39743: PUSH
39744: LD_VAR 0 1
39748: PUSH
39749: LD_INT 2
39751: PUSH
39752: LD_INT 3
39754: PUSH
39755: EMPTY
39756: LIST
39757: LIST
39758: IN
39759: NOT
39760: PUSH
39761: LD_VAR 0 6
39765: PUSH
39766: LD_INT 2
39768: EQUAL
39769: AND
39770: OR
39771: IFFALSE 39781
// mode = 0 ;
39773: LD_ADDR_VAR 0 6
39777: PUSH
39778: LD_INT 0
39780: ST_TO_ADDR
// case mode of 0 :
39781: LD_VAR 0 6
39785: PUSH
39786: LD_INT 0
39788: DOUBLE
39789: EQUAL
39790: IFTRUE 39794
39792: GO 51247
39794: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
39795: LD_ADDR_VAR 0 11
39799: PUSH
39800: LD_INT 0
39802: PUSH
39803: LD_INT 0
39805: PUSH
39806: EMPTY
39807: LIST
39808: LIST
39809: PUSH
39810: LD_INT 0
39812: PUSH
39813: LD_INT 1
39815: NEG
39816: PUSH
39817: EMPTY
39818: LIST
39819: LIST
39820: PUSH
39821: LD_INT 1
39823: PUSH
39824: LD_INT 0
39826: PUSH
39827: EMPTY
39828: LIST
39829: LIST
39830: PUSH
39831: LD_INT 1
39833: PUSH
39834: LD_INT 1
39836: PUSH
39837: EMPTY
39838: LIST
39839: LIST
39840: PUSH
39841: LD_INT 0
39843: PUSH
39844: LD_INT 1
39846: PUSH
39847: EMPTY
39848: LIST
39849: LIST
39850: PUSH
39851: LD_INT 1
39853: NEG
39854: PUSH
39855: LD_INT 0
39857: PUSH
39858: EMPTY
39859: LIST
39860: LIST
39861: PUSH
39862: LD_INT 1
39864: NEG
39865: PUSH
39866: LD_INT 1
39868: NEG
39869: PUSH
39870: EMPTY
39871: LIST
39872: LIST
39873: PUSH
39874: LD_INT 1
39876: NEG
39877: PUSH
39878: LD_INT 2
39880: NEG
39881: PUSH
39882: EMPTY
39883: LIST
39884: LIST
39885: PUSH
39886: LD_INT 0
39888: PUSH
39889: LD_INT 2
39891: NEG
39892: PUSH
39893: EMPTY
39894: LIST
39895: LIST
39896: PUSH
39897: LD_INT 1
39899: PUSH
39900: LD_INT 1
39902: NEG
39903: PUSH
39904: EMPTY
39905: LIST
39906: LIST
39907: PUSH
39908: LD_INT 1
39910: PUSH
39911: LD_INT 2
39913: PUSH
39914: EMPTY
39915: LIST
39916: LIST
39917: PUSH
39918: LD_INT 0
39920: PUSH
39921: LD_INT 2
39923: PUSH
39924: EMPTY
39925: LIST
39926: LIST
39927: PUSH
39928: LD_INT 1
39930: NEG
39931: PUSH
39932: LD_INT 1
39934: PUSH
39935: EMPTY
39936: LIST
39937: LIST
39938: PUSH
39939: LD_INT 1
39941: PUSH
39942: LD_INT 3
39944: PUSH
39945: EMPTY
39946: LIST
39947: LIST
39948: PUSH
39949: LD_INT 0
39951: PUSH
39952: LD_INT 3
39954: PUSH
39955: EMPTY
39956: LIST
39957: LIST
39958: PUSH
39959: LD_INT 1
39961: NEG
39962: PUSH
39963: LD_INT 2
39965: PUSH
39966: EMPTY
39967: LIST
39968: LIST
39969: PUSH
39970: EMPTY
39971: LIST
39972: LIST
39973: LIST
39974: LIST
39975: LIST
39976: LIST
39977: LIST
39978: LIST
39979: LIST
39980: LIST
39981: LIST
39982: LIST
39983: LIST
39984: LIST
39985: LIST
39986: LIST
39987: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39988: LD_ADDR_VAR 0 12
39992: PUSH
39993: LD_INT 0
39995: PUSH
39996: LD_INT 0
39998: PUSH
39999: EMPTY
40000: LIST
40001: LIST
40002: PUSH
40003: LD_INT 0
40005: PUSH
40006: LD_INT 1
40008: NEG
40009: PUSH
40010: EMPTY
40011: LIST
40012: LIST
40013: PUSH
40014: LD_INT 1
40016: PUSH
40017: LD_INT 0
40019: PUSH
40020: EMPTY
40021: LIST
40022: LIST
40023: PUSH
40024: LD_INT 1
40026: PUSH
40027: LD_INT 1
40029: PUSH
40030: EMPTY
40031: LIST
40032: LIST
40033: PUSH
40034: LD_INT 0
40036: PUSH
40037: LD_INT 1
40039: PUSH
40040: EMPTY
40041: LIST
40042: LIST
40043: PUSH
40044: LD_INT 1
40046: NEG
40047: PUSH
40048: LD_INT 0
40050: PUSH
40051: EMPTY
40052: LIST
40053: LIST
40054: PUSH
40055: LD_INT 1
40057: NEG
40058: PUSH
40059: LD_INT 1
40061: NEG
40062: PUSH
40063: EMPTY
40064: LIST
40065: LIST
40066: PUSH
40067: LD_INT 1
40069: PUSH
40070: LD_INT 1
40072: NEG
40073: PUSH
40074: EMPTY
40075: LIST
40076: LIST
40077: PUSH
40078: LD_INT 2
40080: PUSH
40081: LD_INT 0
40083: PUSH
40084: EMPTY
40085: LIST
40086: LIST
40087: PUSH
40088: LD_INT 2
40090: PUSH
40091: LD_INT 1
40093: PUSH
40094: EMPTY
40095: LIST
40096: LIST
40097: PUSH
40098: LD_INT 1
40100: NEG
40101: PUSH
40102: LD_INT 1
40104: PUSH
40105: EMPTY
40106: LIST
40107: LIST
40108: PUSH
40109: LD_INT 2
40111: NEG
40112: PUSH
40113: LD_INT 0
40115: PUSH
40116: EMPTY
40117: LIST
40118: LIST
40119: PUSH
40120: LD_INT 2
40122: NEG
40123: PUSH
40124: LD_INT 1
40126: NEG
40127: PUSH
40128: EMPTY
40129: LIST
40130: LIST
40131: PUSH
40132: LD_INT 2
40134: NEG
40135: PUSH
40136: LD_INT 1
40138: PUSH
40139: EMPTY
40140: LIST
40141: LIST
40142: PUSH
40143: LD_INT 3
40145: NEG
40146: PUSH
40147: LD_INT 0
40149: PUSH
40150: EMPTY
40151: LIST
40152: LIST
40153: PUSH
40154: LD_INT 3
40156: NEG
40157: PUSH
40158: LD_INT 1
40160: NEG
40161: PUSH
40162: EMPTY
40163: LIST
40164: LIST
40165: PUSH
40166: EMPTY
40167: LIST
40168: LIST
40169: LIST
40170: LIST
40171: LIST
40172: LIST
40173: LIST
40174: LIST
40175: LIST
40176: LIST
40177: LIST
40178: LIST
40179: LIST
40180: LIST
40181: LIST
40182: LIST
40183: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40184: LD_ADDR_VAR 0 13
40188: PUSH
40189: LD_INT 0
40191: PUSH
40192: LD_INT 0
40194: PUSH
40195: EMPTY
40196: LIST
40197: LIST
40198: PUSH
40199: LD_INT 0
40201: PUSH
40202: LD_INT 1
40204: NEG
40205: PUSH
40206: EMPTY
40207: LIST
40208: LIST
40209: PUSH
40210: LD_INT 1
40212: PUSH
40213: LD_INT 0
40215: PUSH
40216: EMPTY
40217: LIST
40218: LIST
40219: PUSH
40220: LD_INT 1
40222: PUSH
40223: LD_INT 1
40225: PUSH
40226: EMPTY
40227: LIST
40228: LIST
40229: PUSH
40230: LD_INT 0
40232: PUSH
40233: LD_INT 1
40235: PUSH
40236: EMPTY
40237: LIST
40238: LIST
40239: PUSH
40240: LD_INT 1
40242: NEG
40243: PUSH
40244: LD_INT 0
40246: PUSH
40247: EMPTY
40248: LIST
40249: LIST
40250: PUSH
40251: LD_INT 1
40253: NEG
40254: PUSH
40255: LD_INT 1
40257: NEG
40258: PUSH
40259: EMPTY
40260: LIST
40261: LIST
40262: PUSH
40263: LD_INT 1
40265: NEG
40266: PUSH
40267: LD_INT 2
40269: NEG
40270: PUSH
40271: EMPTY
40272: LIST
40273: LIST
40274: PUSH
40275: LD_INT 2
40277: PUSH
40278: LD_INT 1
40280: PUSH
40281: EMPTY
40282: LIST
40283: LIST
40284: PUSH
40285: LD_INT 2
40287: PUSH
40288: LD_INT 2
40290: PUSH
40291: EMPTY
40292: LIST
40293: LIST
40294: PUSH
40295: LD_INT 1
40297: PUSH
40298: LD_INT 2
40300: PUSH
40301: EMPTY
40302: LIST
40303: LIST
40304: PUSH
40305: LD_INT 2
40307: NEG
40308: PUSH
40309: LD_INT 1
40311: NEG
40312: PUSH
40313: EMPTY
40314: LIST
40315: LIST
40316: PUSH
40317: LD_INT 2
40319: NEG
40320: PUSH
40321: LD_INT 2
40323: NEG
40324: PUSH
40325: EMPTY
40326: LIST
40327: LIST
40328: PUSH
40329: LD_INT 2
40331: NEG
40332: PUSH
40333: LD_INT 3
40335: NEG
40336: PUSH
40337: EMPTY
40338: LIST
40339: LIST
40340: PUSH
40341: LD_INT 3
40343: NEG
40344: PUSH
40345: LD_INT 2
40347: NEG
40348: PUSH
40349: EMPTY
40350: LIST
40351: LIST
40352: PUSH
40353: LD_INT 3
40355: NEG
40356: PUSH
40357: LD_INT 3
40359: NEG
40360: PUSH
40361: EMPTY
40362: LIST
40363: LIST
40364: PUSH
40365: EMPTY
40366: LIST
40367: LIST
40368: LIST
40369: LIST
40370: LIST
40371: LIST
40372: LIST
40373: LIST
40374: LIST
40375: LIST
40376: LIST
40377: LIST
40378: LIST
40379: LIST
40380: LIST
40381: LIST
40382: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
40383: LD_ADDR_VAR 0 14
40387: PUSH
40388: LD_INT 0
40390: PUSH
40391: LD_INT 0
40393: PUSH
40394: EMPTY
40395: LIST
40396: LIST
40397: PUSH
40398: LD_INT 0
40400: PUSH
40401: LD_INT 1
40403: NEG
40404: PUSH
40405: EMPTY
40406: LIST
40407: LIST
40408: PUSH
40409: LD_INT 1
40411: PUSH
40412: LD_INT 0
40414: PUSH
40415: EMPTY
40416: LIST
40417: LIST
40418: PUSH
40419: LD_INT 1
40421: PUSH
40422: LD_INT 1
40424: PUSH
40425: EMPTY
40426: LIST
40427: LIST
40428: PUSH
40429: LD_INT 0
40431: PUSH
40432: LD_INT 1
40434: PUSH
40435: EMPTY
40436: LIST
40437: LIST
40438: PUSH
40439: LD_INT 1
40441: NEG
40442: PUSH
40443: LD_INT 0
40445: PUSH
40446: EMPTY
40447: LIST
40448: LIST
40449: PUSH
40450: LD_INT 1
40452: NEG
40453: PUSH
40454: LD_INT 1
40456: NEG
40457: PUSH
40458: EMPTY
40459: LIST
40460: LIST
40461: PUSH
40462: LD_INT 1
40464: NEG
40465: PUSH
40466: LD_INT 2
40468: NEG
40469: PUSH
40470: EMPTY
40471: LIST
40472: LIST
40473: PUSH
40474: LD_INT 0
40476: PUSH
40477: LD_INT 2
40479: NEG
40480: PUSH
40481: EMPTY
40482: LIST
40483: LIST
40484: PUSH
40485: LD_INT 1
40487: PUSH
40488: LD_INT 1
40490: NEG
40491: PUSH
40492: EMPTY
40493: LIST
40494: LIST
40495: PUSH
40496: LD_INT 1
40498: PUSH
40499: LD_INT 2
40501: PUSH
40502: EMPTY
40503: LIST
40504: LIST
40505: PUSH
40506: LD_INT 0
40508: PUSH
40509: LD_INT 2
40511: PUSH
40512: EMPTY
40513: LIST
40514: LIST
40515: PUSH
40516: LD_INT 1
40518: NEG
40519: PUSH
40520: LD_INT 1
40522: PUSH
40523: EMPTY
40524: LIST
40525: LIST
40526: PUSH
40527: LD_INT 1
40529: NEG
40530: PUSH
40531: LD_INT 3
40533: NEG
40534: PUSH
40535: EMPTY
40536: LIST
40537: LIST
40538: PUSH
40539: LD_INT 0
40541: PUSH
40542: LD_INT 3
40544: NEG
40545: PUSH
40546: EMPTY
40547: LIST
40548: LIST
40549: PUSH
40550: LD_INT 1
40552: PUSH
40553: LD_INT 2
40555: NEG
40556: PUSH
40557: EMPTY
40558: LIST
40559: LIST
40560: PUSH
40561: EMPTY
40562: LIST
40563: LIST
40564: LIST
40565: LIST
40566: LIST
40567: LIST
40568: LIST
40569: LIST
40570: LIST
40571: LIST
40572: LIST
40573: LIST
40574: LIST
40575: LIST
40576: LIST
40577: LIST
40578: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
40579: LD_ADDR_VAR 0 15
40583: PUSH
40584: LD_INT 0
40586: PUSH
40587: LD_INT 0
40589: PUSH
40590: EMPTY
40591: LIST
40592: LIST
40593: PUSH
40594: LD_INT 0
40596: PUSH
40597: LD_INT 1
40599: NEG
40600: PUSH
40601: EMPTY
40602: LIST
40603: LIST
40604: PUSH
40605: LD_INT 1
40607: PUSH
40608: LD_INT 0
40610: PUSH
40611: EMPTY
40612: LIST
40613: LIST
40614: PUSH
40615: LD_INT 1
40617: PUSH
40618: LD_INT 1
40620: PUSH
40621: EMPTY
40622: LIST
40623: LIST
40624: PUSH
40625: LD_INT 0
40627: PUSH
40628: LD_INT 1
40630: PUSH
40631: EMPTY
40632: LIST
40633: LIST
40634: PUSH
40635: LD_INT 1
40637: NEG
40638: PUSH
40639: LD_INT 0
40641: PUSH
40642: EMPTY
40643: LIST
40644: LIST
40645: PUSH
40646: LD_INT 1
40648: NEG
40649: PUSH
40650: LD_INT 1
40652: NEG
40653: PUSH
40654: EMPTY
40655: LIST
40656: LIST
40657: PUSH
40658: LD_INT 1
40660: PUSH
40661: LD_INT 1
40663: NEG
40664: PUSH
40665: EMPTY
40666: LIST
40667: LIST
40668: PUSH
40669: LD_INT 2
40671: PUSH
40672: LD_INT 0
40674: PUSH
40675: EMPTY
40676: LIST
40677: LIST
40678: PUSH
40679: LD_INT 2
40681: PUSH
40682: LD_INT 1
40684: PUSH
40685: EMPTY
40686: LIST
40687: LIST
40688: PUSH
40689: LD_INT 1
40691: NEG
40692: PUSH
40693: LD_INT 1
40695: PUSH
40696: EMPTY
40697: LIST
40698: LIST
40699: PUSH
40700: LD_INT 2
40702: NEG
40703: PUSH
40704: LD_INT 0
40706: PUSH
40707: EMPTY
40708: LIST
40709: LIST
40710: PUSH
40711: LD_INT 2
40713: NEG
40714: PUSH
40715: LD_INT 1
40717: NEG
40718: PUSH
40719: EMPTY
40720: LIST
40721: LIST
40722: PUSH
40723: LD_INT 2
40725: PUSH
40726: LD_INT 1
40728: NEG
40729: PUSH
40730: EMPTY
40731: LIST
40732: LIST
40733: PUSH
40734: LD_INT 3
40736: PUSH
40737: LD_INT 0
40739: PUSH
40740: EMPTY
40741: LIST
40742: LIST
40743: PUSH
40744: LD_INT 3
40746: PUSH
40747: LD_INT 1
40749: PUSH
40750: EMPTY
40751: LIST
40752: LIST
40753: PUSH
40754: EMPTY
40755: LIST
40756: LIST
40757: LIST
40758: LIST
40759: LIST
40760: LIST
40761: LIST
40762: LIST
40763: LIST
40764: LIST
40765: LIST
40766: LIST
40767: LIST
40768: LIST
40769: LIST
40770: LIST
40771: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
40772: LD_ADDR_VAR 0 16
40776: PUSH
40777: LD_INT 0
40779: PUSH
40780: LD_INT 0
40782: PUSH
40783: EMPTY
40784: LIST
40785: LIST
40786: PUSH
40787: LD_INT 0
40789: PUSH
40790: LD_INT 1
40792: NEG
40793: PUSH
40794: EMPTY
40795: LIST
40796: LIST
40797: PUSH
40798: LD_INT 1
40800: PUSH
40801: LD_INT 0
40803: PUSH
40804: EMPTY
40805: LIST
40806: LIST
40807: PUSH
40808: LD_INT 1
40810: PUSH
40811: LD_INT 1
40813: PUSH
40814: EMPTY
40815: LIST
40816: LIST
40817: PUSH
40818: LD_INT 0
40820: PUSH
40821: LD_INT 1
40823: PUSH
40824: EMPTY
40825: LIST
40826: LIST
40827: PUSH
40828: LD_INT 1
40830: NEG
40831: PUSH
40832: LD_INT 0
40834: PUSH
40835: EMPTY
40836: LIST
40837: LIST
40838: PUSH
40839: LD_INT 1
40841: NEG
40842: PUSH
40843: LD_INT 1
40845: NEG
40846: PUSH
40847: EMPTY
40848: LIST
40849: LIST
40850: PUSH
40851: LD_INT 1
40853: NEG
40854: PUSH
40855: LD_INT 2
40857: NEG
40858: PUSH
40859: EMPTY
40860: LIST
40861: LIST
40862: PUSH
40863: LD_INT 2
40865: PUSH
40866: LD_INT 1
40868: PUSH
40869: EMPTY
40870: LIST
40871: LIST
40872: PUSH
40873: LD_INT 2
40875: PUSH
40876: LD_INT 2
40878: PUSH
40879: EMPTY
40880: LIST
40881: LIST
40882: PUSH
40883: LD_INT 1
40885: PUSH
40886: LD_INT 2
40888: PUSH
40889: EMPTY
40890: LIST
40891: LIST
40892: PUSH
40893: LD_INT 2
40895: NEG
40896: PUSH
40897: LD_INT 1
40899: NEG
40900: PUSH
40901: EMPTY
40902: LIST
40903: LIST
40904: PUSH
40905: LD_INT 2
40907: NEG
40908: PUSH
40909: LD_INT 2
40911: NEG
40912: PUSH
40913: EMPTY
40914: LIST
40915: LIST
40916: PUSH
40917: LD_INT 3
40919: PUSH
40920: LD_INT 2
40922: PUSH
40923: EMPTY
40924: LIST
40925: LIST
40926: PUSH
40927: LD_INT 3
40929: PUSH
40930: LD_INT 3
40932: PUSH
40933: EMPTY
40934: LIST
40935: LIST
40936: PUSH
40937: LD_INT 2
40939: PUSH
40940: LD_INT 3
40942: PUSH
40943: EMPTY
40944: LIST
40945: LIST
40946: PUSH
40947: EMPTY
40948: LIST
40949: LIST
40950: LIST
40951: LIST
40952: LIST
40953: LIST
40954: LIST
40955: LIST
40956: LIST
40957: LIST
40958: LIST
40959: LIST
40960: LIST
40961: LIST
40962: LIST
40963: LIST
40964: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40965: LD_ADDR_VAR 0 17
40969: PUSH
40970: LD_INT 0
40972: PUSH
40973: LD_INT 0
40975: PUSH
40976: EMPTY
40977: LIST
40978: LIST
40979: PUSH
40980: LD_INT 0
40982: PUSH
40983: LD_INT 1
40985: NEG
40986: PUSH
40987: EMPTY
40988: LIST
40989: LIST
40990: PUSH
40991: LD_INT 1
40993: PUSH
40994: LD_INT 0
40996: PUSH
40997: EMPTY
40998: LIST
40999: LIST
41000: PUSH
41001: LD_INT 1
41003: PUSH
41004: LD_INT 1
41006: PUSH
41007: EMPTY
41008: LIST
41009: LIST
41010: PUSH
41011: LD_INT 0
41013: PUSH
41014: LD_INT 1
41016: PUSH
41017: EMPTY
41018: LIST
41019: LIST
41020: PUSH
41021: LD_INT 1
41023: NEG
41024: PUSH
41025: LD_INT 0
41027: PUSH
41028: EMPTY
41029: LIST
41030: LIST
41031: PUSH
41032: LD_INT 1
41034: NEG
41035: PUSH
41036: LD_INT 1
41038: NEG
41039: PUSH
41040: EMPTY
41041: LIST
41042: LIST
41043: PUSH
41044: LD_INT 1
41046: NEG
41047: PUSH
41048: LD_INT 2
41050: NEG
41051: PUSH
41052: EMPTY
41053: LIST
41054: LIST
41055: PUSH
41056: LD_INT 0
41058: PUSH
41059: LD_INT 2
41061: NEG
41062: PUSH
41063: EMPTY
41064: LIST
41065: LIST
41066: PUSH
41067: LD_INT 1
41069: PUSH
41070: LD_INT 1
41072: NEG
41073: PUSH
41074: EMPTY
41075: LIST
41076: LIST
41077: PUSH
41078: LD_INT 2
41080: PUSH
41081: LD_INT 0
41083: PUSH
41084: EMPTY
41085: LIST
41086: LIST
41087: PUSH
41088: LD_INT 2
41090: PUSH
41091: LD_INT 1
41093: PUSH
41094: EMPTY
41095: LIST
41096: LIST
41097: PUSH
41098: LD_INT 2
41100: PUSH
41101: LD_INT 2
41103: PUSH
41104: EMPTY
41105: LIST
41106: LIST
41107: PUSH
41108: LD_INT 1
41110: PUSH
41111: LD_INT 2
41113: PUSH
41114: EMPTY
41115: LIST
41116: LIST
41117: PUSH
41118: LD_INT 0
41120: PUSH
41121: LD_INT 2
41123: PUSH
41124: EMPTY
41125: LIST
41126: LIST
41127: PUSH
41128: LD_INT 1
41130: NEG
41131: PUSH
41132: LD_INT 1
41134: PUSH
41135: EMPTY
41136: LIST
41137: LIST
41138: PUSH
41139: LD_INT 2
41141: NEG
41142: PUSH
41143: LD_INT 0
41145: PUSH
41146: EMPTY
41147: LIST
41148: LIST
41149: PUSH
41150: LD_INT 2
41152: NEG
41153: PUSH
41154: LD_INT 1
41156: NEG
41157: PUSH
41158: EMPTY
41159: LIST
41160: LIST
41161: PUSH
41162: LD_INT 2
41164: NEG
41165: PUSH
41166: LD_INT 2
41168: NEG
41169: PUSH
41170: EMPTY
41171: LIST
41172: LIST
41173: PUSH
41174: EMPTY
41175: LIST
41176: LIST
41177: LIST
41178: LIST
41179: LIST
41180: LIST
41181: LIST
41182: LIST
41183: LIST
41184: LIST
41185: LIST
41186: LIST
41187: LIST
41188: LIST
41189: LIST
41190: LIST
41191: LIST
41192: LIST
41193: LIST
41194: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41195: LD_ADDR_VAR 0 18
41199: PUSH
41200: LD_INT 0
41202: PUSH
41203: LD_INT 0
41205: PUSH
41206: EMPTY
41207: LIST
41208: LIST
41209: PUSH
41210: LD_INT 0
41212: PUSH
41213: LD_INT 1
41215: NEG
41216: PUSH
41217: EMPTY
41218: LIST
41219: LIST
41220: PUSH
41221: LD_INT 1
41223: PUSH
41224: LD_INT 0
41226: PUSH
41227: EMPTY
41228: LIST
41229: LIST
41230: PUSH
41231: LD_INT 1
41233: PUSH
41234: LD_INT 1
41236: PUSH
41237: EMPTY
41238: LIST
41239: LIST
41240: PUSH
41241: LD_INT 0
41243: PUSH
41244: LD_INT 1
41246: PUSH
41247: EMPTY
41248: LIST
41249: LIST
41250: PUSH
41251: LD_INT 1
41253: NEG
41254: PUSH
41255: LD_INT 0
41257: PUSH
41258: EMPTY
41259: LIST
41260: LIST
41261: PUSH
41262: LD_INT 1
41264: NEG
41265: PUSH
41266: LD_INT 1
41268: NEG
41269: PUSH
41270: EMPTY
41271: LIST
41272: LIST
41273: PUSH
41274: LD_INT 1
41276: NEG
41277: PUSH
41278: LD_INT 2
41280: NEG
41281: PUSH
41282: EMPTY
41283: LIST
41284: LIST
41285: PUSH
41286: LD_INT 0
41288: PUSH
41289: LD_INT 2
41291: NEG
41292: PUSH
41293: EMPTY
41294: LIST
41295: LIST
41296: PUSH
41297: LD_INT 1
41299: PUSH
41300: LD_INT 1
41302: NEG
41303: PUSH
41304: EMPTY
41305: LIST
41306: LIST
41307: PUSH
41308: LD_INT 2
41310: PUSH
41311: LD_INT 0
41313: PUSH
41314: EMPTY
41315: LIST
41316: LIST
41317: PUSH
41318: LD_INT 2
41320: PUSH
41321: LD_INT 1
41323: PUSH
41324: EMPTY
41325: LIST
41326: LIST
41327: PUSH
41328: LD_INT 2
41330: PUSH
41331: LD_INT 2
41333: PUSH
41334: EMPTY
41335: LIST
41336: LIST
41337: PUSH
41338: LD_INT 1
41340: PUSH
41341: LD_INT 2
41343: PUSH
41344: EMPTY
41345: LIST
41346: LIST
41347: PUSH
41348: LD_INT 0
41350: PUSH
41351: LD_INT 2
41353: PUSH
41354: EMPTY
41355: LIST
41356: LIST
41357: PUSH
41358: LD_INT 1
41360: NEG
41361: PUSH
41362: LD_INT 1
41364: PUSH
41365: EMPTY
41366: LIST
41367: LIST
41368: PUSH
41369: LD_INT 2
41371: NEG
41372: PUSH
41373: LD_INT 0
41375: PUSH
41376: EMPTY
41377: LIST
41378: LIST
41379: PUSH
41380: LD_INT 2
41382: NEG
41383: PUSH
41384: LD_INT 1
41386: NEG
41387: PUSH
41388: EMPTY
41389: LIST
41390: LIST
41391: PUSH
41392: LD_INT 2
41394: NEG
41395: PUSH
41396: LD_INT 2
41398: NEG
41399: PUSH
41400: EMPTY
41401: LIST
41402: LIST
41403: PUSH
41404: EMPTY
41405: LIST
41406: LIST
41407: LIST
41408: LIST
41409: LIST
41410: LIST
41411: LIST
41412: LIST
41413: LIST
41414: LIST
41415: LIST
41416: LIST
41417: LIST
41418: LIST
41419: LIST
41420: LIST
41421: LIST
41422: LIST
41423: LIST
41424: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41425: LD_ADDR_VAR 0 19
41429: PUSH
41430: LD_INT 0
41432: PUSH
41433: LD_INT 0
41435: PUSH
41436: EMPTY
41437: LIST
41438: LIST
41439: PUSH
41440: LD_INT 0
41442: PUSH
41443: LD_INT 1
41445: NEG
41446: PUSH
41447: EMPTY
41448: LIST
41449: LIST
41450: PUSH
41451: LD_INT 1
41453: PUSH
41454: LD_INT 0
41456: PUSH
41457: EMPTY
41458: LIST
41459: LIST
41460: PUSH
41461: LD_INT 1
41463: PUSH
41464: LD_INT 1
41466: PUSH
41467: EMPTY
41468: LIST
41469: LIST
41470: PUSH
41471: LD_INT 0
41473: PUSH
41474: LD_INT 1
41476: PUSH
41477: EMPTY
41478: LIST
41479: LIST
41480: PUSH
41481: LD_INT 1
41483: NEG
41484: PUSH
41485: LD_INT 0
41487: PUSH
41488: EMPTY
41489: LIST
41490: LIST
41491: PUSH
41492: LD_INT 1
41494: NEG
41495: PUSH
41496: LD_INT 1
41498: NEG
41499: PUSH
41500: EMPTY
41501: LIST
41502: LIST
41503: PUSH
41504: LD_INT 1
41506: NEG
41507: PUSH
41508: LD_INT 2
41510: NEG
41511: PUSH
41512: EMPTY
41513: LIST
41514: LIST
41515: PUSH
41516: LD_INT 0
41518: PUSH
41519: LD_INT 2
41521: NEG
41522: PUSH
41523: EMPTY
41524: LIST
41525: LIST
41526: PUSH
41527: LD_INT 1
41529: PUSH
41530: LD_INT 1
41532: NEG
41533: PUSH
41534: EMPTY
41535: LIST
41536: LIST
41537: PUSH
41538: LD_INT 2
41540: PUSH
41541: LD_INT 0
41543: PUSH
41544: EMPTY
41545: LIST
41546: LIST
41547: PUSH
41548: LD_INT 2
41550: PUSH
41551: LD_INT 1
41553: PUSH
41554: EMPTY
41555: LIST
41556: LIST
41557: PUSH
41558: LD_INT 2
41560: PUSH
41561: LD_INT 2
41563: PUSH
41564: EMPTY
41565: LIST
41566: LIST
41567: PUSH
41568: LD_INT 1
41570: PUSH
41571: LD_INT 2
41573: PUSH
41574: EMPTY
41575: LIST
41576: LIST
41577: PUSH
41578: LD_INT 0
41580: PUSH
41581: LD_INT 2
41583: PUSH
41584: EMPTY
41585: LIST
41586: LIST
41587: PUSH
41588: LD_INT 1
41590: NEG
41591: PUSH
41592: LD_INT 1
41594: PUSH
41595: EMPTY
41596: LIST
41597: LIST
41598: PUSH
41599: LD_INT 2
41601: NEG
41602: PUSH
41603: LD_INT 0
41605: PUSH
41606: EMPTY
41607: LIST
41608: LIST
41609: PUSH
41610: LD_INT 2
41612: NEG
41613: PUSH
41614: LD_INT 1
41616: NEG
41617: PUSH
41618: EMPTY
41619: LIST
41620: LIST
41621: PUSH
41622: LD_INT 2
41624: NEG
41625: PUSH
41626: LD_INT 2
41628: NEG
41629: PUSH
41630: EMPTY
41631: LIST
41632: LIST
41633: PUSH
41634: EMPTY
41635: LIST
41636: LIST
41637: LIST
41638: LIST
41639: LIST
41640: LIST
41641: LIST
41642: LIST
41643: LIST
41644: LIST
41645: LIST
41646: LIST
41647: LIST
41648: LIST
41649: LIST
41650: LIST
41651: LIST
41652: LIST
41653: LIST
41654: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41655: LD_ADDR_VAR 0 20
41659: PUSH
41660: LD_INT 0
41662: PUSH
41663: LD_INT 0
41665: PUSH
41666: EMPTY
41667: LIST
41668: LIST
41669: PUSH
41670: LD_INT 0
41672: PUSH
41673: LD_INT 1
41675: NEG
41676: PUSH
41677: EMPTY
41678: LIST
41679: LIST
41680: PUSH
41681: LD_INT 1
41683: PUSH
41684: LD_INT 0
41686: PUSH
41687: EMPTY
41688: LIST
41689: LIST
41690: PUSH
41691: LD_INT 1
41693: PUSH
41694: LD_INT 1
41696: PUSH
41697: EMPTY
41698: LIST
41699: LIST
41700: PUSH
41701: LD_INT 0
41703: PUSH
41704: LD_INT 1
41706: PUSH
41707: EMPTY
41708: LIST
41709: LIST
41710: PUSH
41711: LD_INT 1
41713: NEG
41714: PUSH
41715: LD_INT 0
41717: PUSH
41718: EMPTY
41719: LIST
41720: LIST
41721: PUSH
41722: LD_INT 1
41724: NEG
41725: PUSH
41726: LD_INT 1
41728: NEG
41729: PUSH
41730: EMPTY
41731: LIST
41732: LIST
41733: PUSH
41734: LD_INT 1
41736: NEG
41737: PUSH
41738: LD_INT 2
41740: NEG
41741: PUSH
41742: EMPTY
41743: LIST
41744: LIST
41745: PUSH
41746: LD_INT 0
41748: PUSH
41749: LD_INT 2
41751: NEG
41752: PUSH
41753: EMPTY
41754: LIST
41755: LIST
41756: PUSH
41757: LD_INT 1
41759: PUSH
41760: LD_INT 1
41762: NEG
41763: PUSH
41764: EMPTY
41765: LIST
41766: LIST
41767: PUSH
41768: LD_INT 2
41770: PUSH
41771: LD_INT 0
41773: PUSH
41774: EMPTY
41775: LIST
41776: LIST
41777: PUSH
41778: LD_INT 2
41780: PUSH
41781: LD_INT 1
41783: PUSH
41784: EMPTY
41785: LIST
41786: LIST
41787: PUSH
41788: LD_INT 2
41790: PUSH
41791: LD_INT 2
41793: PUSH
41794: EMPTY
41795: LIST
41796: LIST
41797: PUSH
41798: LD_INT 1
41800: PUSH
41801: LD_INT 2
41803: PUSH
41804: EMPTY
41805: LIST
41806: LIST
41807: PUSH
41808: LD_INT 0
41810: PUSH
41811: LD_INT 2
41813: PUSH
41814: EMPTY
41815: LIST
41816: LIST
41817: PUSH
41818: LD_INT 1
41820: NEG
41821: PUSH
41822: LD_INT 1
41824: PUSH
41825: EMPTY
41826: LIST
41827: LIST
41828: PUSH
41829: LD_INT 2
41831: NEG
41832: PUSH
41833: LD_INT 0
41835: PUSH
41836: EMPTY
41837: LIST
41838: LIST
41839: PUSH
41840: LD_INT 2
41842: NEG
41843: PUSH
41844: LD_INT 1
41846: NEG
41847: PUSH
41848: EMPTY
41849: LIST
41850: LIST
41851: PUSH
41852: LD_INT 2
41854: NEG
41855: PUSH
41856: LD_INT 2
41858: NEG
41859: PUSH
41860: EMPTY
41861: LIST
41862: LIST
41863: PUSH
41864: EMPTY
41865: LIST
41866: LIST
41867: LIST
41868: LIST
41869: LIST
41870: LIST
41871: LIST
41872: LIST
41873: LIST
41874: LIST
41875: LIST
41876: LIST
41877: LIST
41878: LIST
41879: LIST
41880: LIST
41881: LIST
41882: LIST
41883: LIST
41884: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41885: LD_ADDR_VAR 0 21
41889: PUSH
41890: LD_INT 0
41892: PUSH
41893: LD_INT 0
41895: PUSH
41896: EMPTY
41897: LIST
41898: LIST
41899: PUSH
41900: LD_INT 0
41902: PUSH
41903: LD_INT 1
41905: NEG
41906: PUSH
41907: EMPTY
41908: LIST
41909: LIST
41910: PUSH
41911: LD_INT 1
41913: PUSH
41914: LD_INT 0
41916: PUSH
41917: EMPTY
41918: LIST
41919: LIST
41920: PUSH
41921: LD_INT 1
41923: PUSH
41924: LD_INT 1
41926: PUSH
41927: EMPTY
41928: LIST
41929: LIST
41930: PUSH
41931: LD_INT 0
41933: PUSH
41934: LD_INT 1
41936: PUSH
41937: EMPTY
41938: LIST
41939: LIST
41940: PUSH
41941: LD_INT 1
41943: NEG
41944: PUSH
41945: LD_INT 0
41947: PUSH
41948: EMPTY
41949: LIST
41950: LIST
41951: PUSH
41952: LD_INT 1
41954: NEG
41955: PUSH
41956: LD_INT 1
41958: NEG
41959: PUSH
41960: EMPTY
41961: LIST
41962: LIST
41963: PUSH
41964: LD_INT 1
41966: NEG
41967: PUSH
41968: LD_INT 2
41970: NEG
41971: PUSH
41972: EMPTY
41973: LIST
41974: LIST
41975: PUSH
41976: LD_INT 0
41978: PUSH
41979: LD_INT 2
41981: NEG
41982: PUSH
41983: EMPTY
41984: LIST
41985: LIST
41986: PUSH
41987: LD_INT 1
41989: PUSH
41990: LD_INT 1
41992: NEG
41993: PUSH
41994: EMPTY
41995: LIST
41996: LIST
41997: PUSH
41998: LD_INT 2
42000: PUSH
42001: LD_INT 0
42003: PUSH
42004: EMPTY
42005: LIST
42006: LIST
42007: PUSH
42008: LD_INT 2
42010: PUSH
42011: LD_INT 1
42013: PUSH
42014: EMPTY
42015: LIST
42016: LIST
42017: PUSH
42018: LD_INT 2
42020: PUSH
42021: LD_INT 2
42023: PUSH
42024: EMPTY
42025: LIST
42026: LIST
42027: PUSH
42028: LD_INT 1
42030: PUSH
42031: LD_INT 2
42033: PUSH
42034: EMPTY
42035: LIST
42036: LIST
42037: PUSH
42038: LD_INT 0
42040: PUSH
42041: LD_INT 2
42043: PUSH
42044: EMPTY
42045: LIST
42046: LIST
42047: PUSH
42048: LD_INT 1
42050: NEG
42051: PUSH
42052: LD_INT 1
42054: PUSH
42055: EMPTY
42056: LIST
42057: LIST
42058: PUSH
42059: LD_INT 2
42061: NEG
42062: PUSH
42063: LD_INT 0
42065: PUSH
42066: EMPTY
42067: LIST
42068: LIST
42069: PUSH
42070: LD_INT 2
42072: NEG
42073: PUSH
42074: LD_INT 1
42076: NEG
42077: PUSH
42078: EMPTY
42079: LIST
42080: LIST
42081: PUSH
42082: LD_INT 2
42084: NEG
42085: PUSH
42086: LD_INT 2
42088: NEG
42089: PUSH
42090: EMPTY
42091: LIST
42092: LIST
42093: PUSH
42094: EMPTY
42095: LIST
42096: LIST
42097: LIST
42098: LIST
42099: LIST
42100: LIST
42101: LIST
42102: LIST
42103: LIST
42104: LIST
42105: LIST
42106: LIST
42107: LIST
42108: LIST
42109: LIST
42110: LIST
42111: LIST
42112: LIST
42113: LIST
42114: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42115: LD_ADDR_VAR 0 22
42119: PUSH
42120: LD_INT 0
42122: PUSH
42123: LD_INT 0
42125: PUSH
42126: EMPTY
42127: LIST
42128: LIST
42129: PUSH
42130: LD_INT 0
42132: PUSH
42133: LD_INT 1
42135: NEG
42136: PUSH
42137: EMPTY
42138: LIST
42139: LIST
42140: PUSH
42141: LD_INT 1
42143: PUSH
42144: LD_INT 0
42146: PUSH
42147: EMPTY
42148: LIST
42149: LIST
42150: PUSH
42151: LD_INT 1
42153: PUSH
42154: LD_INT 1
42156: PUSH
42157: EMPTY
42158: LIST
42159: LIST
42160: PUSH
42161: LD_INT 0
42163: PUSH
42164: LD_INT 1
42166: PUSH
42167: EMPTY
42168: LIST
42169: LIST
42170: PUSH
42171: LD_INT 1
42173: NEG
42174: PUSH
42175: LD_INT 0
42177: PUSH
42178: EMPTY
42179: LIST
42180: LIST
42181: PUSH
42182: LD_INT 1
42184: NEG
42185: PUSH
42186: LD_INT 1
42188: NEG
42189: PUSH
42190: EMPTY
42191: LIST
42192: LIST
42193: PUSH
42194: LD_INT 1
42196: NEG
42197: PUSH
42198: LD_INT 2
42200: NEG
42201: PUSH
42202: EMPTY
42203: LIST
42204: LIST
42205: PUSH
42206: LD_INT 0
42208: PUSH
42209: LD_INT 2
42211: NEG
42212: PUSH
42213: EMPTY
42214: LIST
42215: LIST
42216: PUSH
42217: LD_INT 1
42219: PUSH
42220: LD_INT 1
42222: NEG
42223: PUSH
42224: EMPTY
42225: LIST
42226: LIST
42227: PUSH
42228: LD_INT 2
42230: PUSH
42231: LD_INT 0
42233: PUSH
42234: EMPTY
42235: LIST
42236: LIST
42237: PUSH
42238: LD_INT 2
42240: PUSH
42241: LD_INT 1
42243: PUSH
42244: EMPTY
42245: LIST
42246: LIST
42247: PUSH
42248: LD_INT 2
42250: PUSH
42251: LD_INT 2
42253: PUSH
42254: EMPTY
42255: LIST
42256: LIST
42257: PUSH
42258: LD_INT 1
42260: PUSH
42261: LD_INT 2
42263: PUSH
42264: EMPTY
42265: LIST
42266: LIST
42267: PUSH
42268: LD_INT 0
42270: PUSH
42271: LD_INT 2
42273: PUSH
42274: EMPTY
42275: LIST
42276: LIST
42277: PUSH
42278: LD_INT 1
42280: NEG
42281: PUSH
42282: LD_INT 1
42284: PUSH
42285: EMPTY
42286: LIST
42287: LIST
42288: PUSH
42289: LD_INT 2
42291: NEG
42292: PUSH
42293: LD_INT 0
42295: PUSH
42296: EMPTY
42297: LIST
42298: LIST
42299: PUSH
42300: LD_INT 2
42302: NEG
42303: PUSH
42304: LD_INT 1
42306: NEG
42307: PUSH
42308: EMPTY
42309: LIST
42310: LIST
42311: PUSH
42312: LD_INT 2
42314: NEG
42315: PUSH
42316: LD_INT 2
42318: NEG
42319: PUSH
42320: EMPTY
42321: LIST
42322: LIST
42323: PUSH
42324: EMPTY
42325: LIST
42326: LIST
42327: LIST
42328: LIST
42329: LIST
42330: LIST
42331: LIST
42332: LIST
42333: LIST
42334: LIST
42335: LIST
42336: LIST
42337: LIST
42338: LIST
42339: LIST
42340: LIST
42341: LIST
42342: LIST
42343: LIST
42344: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
42345: LD_ADDR_VAR 0 23
42349: PUSH
42350: LD_INT 0
42352: PUSH
42353: LD_INT 0
42355: PUSH
42356: EMPTY
42357: LIST
42358: LIST
42359: PUSH
42360: LD_INT 0
42362: PUSH
42363: LD_INT 1
42365: NEG
42366: PUSH
42367: EMPTY
42368: LIST
42369: LIST
42370: PUSH
42371: LD_INT 1
42373: PUSH
42374: LD_INT 0
42376: PUSH
42377: EMPTY
42378: LIST
42379: LIST
42380: PUSH
42381: LD_INT 1
42383: PUSH
42384: LD_INT 1
42386: PUSH
42387: EMPTY
42388: LIST
42389: LIST
42390: PUSH
42391: LD_INT 0
42393: PUSH
42394: LD_INT 1
42396: PUSH
42397: EMPTY
42398: LIST
42399: LIST
42400: PUSH
42401: LD_INT 1
42403: NEG
42404: PUSH
42405: LD_INT 0
42407: PUSH
42408: EMPTY
42409: LIST
42410: LIST
42411: PUSH
42412: LD_INT 1
42414: NEG
42415: PUSH
42416: LD_INT 1
42418: NEG
42419: PUSH
42420: EMPTY
42421: LIST
42422: LIST
42423: PUSH
42424: LD_INT 1
42426: NEG
42427: PUSH
42428: LD_INT 2
42430: NEG
42431: PUSH
42432: EMPTY
42433: LIST
42434: LIST
42435: PUSH
42436: LD_INT 0
42438: PUSH
42439: LD_INT 2
42441: NEG
42442: PUSH
42443: EMPTY
42444: LIST
42445: LIST
42446: PUSH
42447: LD_INT 1
42449: PUSH
42450: LD_INT 1
42452: NEG
42453: PUSH
42454: EMPTY
42455: LIST
42456: LIST
42457: PUSH
42458: LD_INT 2
42460: PUSH
42461: LD_INT 0
42463: PUSH
42464: EMPTY
42465: LIST
42466: LIST
42467: PUSH
42468: LD_INT 2
42470: PUSH
42471: LD_INT 1
42473: PUSH
42474: EMPTY
42475: LIST
42476: LIST
42477: PUSH
42478: LD_INT 2
42480: PUSH
42481: LD_INT 2
42483: PUSH
42484: EMPTY
42485: LIST
42486: LIST
42487: PUSH
42488: LD_INT 1
42490: PUSH
42491: LD_INT 2
42493: PUSH
42494: EMPTY
42495: LIST
42496: LIST
42497: PUSH
42498: LD_INT 0
42500: PUSH
42501: LD_INT 2
42503: PUSH
42504: EMPTY
42505: LIST
42506: LIST
42507: PUSH
42508: LD_INT 1
42510: NEG
42511: PUSH
42512: LD_INT 1
42514: PUSH
42515: EMPTY
42516: LIST
42517: LIST
42518: PUSH
42519: LD_INT 2
42521: NEG
42522: PUSH
42523: LD_INT 0
42525: PUSH
42526: EMPTY
42527: LIST
42528: LIST
42529: PUSH
42530: LD_INT 2
42532: NEG
42533: PUSH
42534: LD_INT 1
42536: NEG
42537: PUSH
42538: EMPTY
42539: LIST
42540: LIST
42541: PUSH
42542: LD_INT 2
42544: NEG
42545: PUSH
42546: LD_INT 2
42548: NEG
42549: PUSH
42550: EMPTY
42551: LIST
42552: LIST
42553: PUSH
42554: LD_INT 2
42556: NEG
42557: PUSH
42558: LD_INT 3
42560: NEG
42561: PUSH
42562: EMPTY
42563: LIST
42564: LIST
42565: PUSH
42566: LD_INT 1
42568: NEG
42569: PUSH
42570: LD_INT 3
42572: NEG
42573: PUSH
42574: EMPTY
42575: LIST
42576: LIST
42577: PUSH
42578: LD_INT 1
42580: PUSH
42581: LD_INT 2
42583: NEG
42584: PUSH
42585: EMPTY
42586: LIST
42587: LIST
42588: PUSH
42589: LD_INT 2
42591: PUSH
42592: LD_INT 1
42594: NEG
42595: PUSH
42596: EMPTY
42597: LIST
42598: LIST
42599: PUSH
42600: EMPTY
42601: LIST
42602: LIST
42603: LIST
42604: LIST
42605: LIST
42606: LIST
42607: LIST
42608: LIST
42609: LIST
42610: LIST
42611: LIST
42612: LIST
42613: LIST
42614: LIST
42615: LIST
42616: LIST
42617: LIST
42618: LIST
42619: LIST
42620: LIST
42621: LIST
42622: LIST
42623: LIST
42624: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
42625: LD_ADDR_VAR 0 24
42629: PUSH
42630: LD_INT 0
42632: PUSH
42633: LD_INT 0
42635: PUSH
42636: EMPTY
42637: LIST
42638: LIST
42639: PUSH
42640: LD_INT 0
42642: PUSH
42643: LD_INT 1
42645: NEG
42646: PUSH
42647: EMPTY
42648: LIST
42649: LIST
42650: PUSH
42651: LD_INT 1
42653: PUSH
42654: LD_INT 0
42656: PUSH
42657: EMPTY
42658: LIST
42659: LIST
42660: PUSH
42661: LD_INT 1
42663: PUSH
42664: LD_INT 1
42666: PUSH
42667: EMPTY
42668: LIST
42669: LIST
42670: PUSH
42671: LD_INT 0
42673: PUSH
42674: LD_INT 1
42676: PUSH
42677: EMPTY
42678: LIST
42679: LIST
42680: PUSH
42681: LD_INT 1
42683: NEG
42684: PUSH
42685: LD_INT 0
42687: PUSH
42688: EMPTY
42689: LIST
42690: LIST
42691: PUSH
42692: LD_INT 1
42694: NEG
42695: PUSH
42696: LD_INT 1
42698: NEG
42699: PUSH
42700: EMPTY
42701: LIST
42702: LIST
42703: PUSH
42704: LD_INT 1
42706: NEG
42707: PUSH
42708: LD_INT 2
42710: NEG
42711: PUSH
42712: EMPTY
42713: LIST
42714: LIST
42715: PUSH
42716: LD_INT 0
42718: PUSH
42719: LD_INT 2
42721: NEG
42722: PUSH
42723: EMPTY
42724: LIST
42725: LIST
42726: PUSH
42727: LD_INT 1
42729: PUSH
42730: LD_INT 1
42732: NEG
42733: PUSH
42734: EMPTY
42735: LIST
42736: LIST
42737: PUSH
42738: LD_INT 2
42740: PUSH
42741: LD_INT 0
42743: PUSH
42744: EMPTY
42745: LIST
42746: LIST
42747: PUSH
42748: LD_INT 2
42750: PUSH
42751: LD_INT 1
42753: PUSH
42754: EMPTY
42755: LIST
42756: LIST
42757: PUSH
42758: LD_INT 2
42760: PUSH
42761: LD_INT 2
42763: PUSH
42764: EMPTY
42765: LIST
42766: LIST
42767: PUSH
42768: LD_INT 1
42770: PUSH
42771: LD_INT 2
42773: PUSH
42774: EMPTY
42775: LIST
42776: LIST
42777: PUSH
42778: LD_INT 0
42780: PUSH
42781: LD_INT 2
42783: PUSH
42784: EMPTY
42785: LIST
42786: LIST
42787: PUSH
42788: LD_INT 1
42790: NEG
42791: PUSH
42792: LD_INT 1
42794: PUSH
42795: EMPTY
42796: LIST
42797: LIST
42798: PUSH
42799: LD_INT 2
42801: NEG
42802: PUSH
42803: LD_INT 0
42805: PUSH
42806: EMPTY
42807: LIST
42808: LIST
42809: PUSH
42810: LD_INT 2
42812: NEG
42813: PUSH
42814: LD_INT 1
42816: NEG
42817: PUSH
42818: EMPTY
42819: LIST
42820: LIST
42821: PUSH
42822: LD_INT 2
42824: NEG
42825: PUSH
42826: LD_INT 2
42828: NEG
42829: PUSH
42830: EMPTY
42831: LIST
42832: LIST
42833: PUSH
42834: LD_INT 1
42836: PUSH
42837: LD_INT 2
42839: NEG
42840: PUSH
42841: EMPTY
42842: LIST
42843: LIST
42844: PUSH
42845: LD_INT 2
42847: PUSH
42848: LD_INT 1
42850: NEG
42851: PUSH
42852: EMPTY
42853: LIST
42854: LIST
42855: PUSH
42856: LD_INT 3
42858: PUSH
42859: LD_INT 1
42861: PUSH
42862: EMPTY
42863: LIST
42864: LIST
42865: PUSH
42866: LD_INT 3
42868: PUSH
42869: LD_INT 2
42871: PUSH
42872: EMPTY
42873: LIST
42874: LIST
42875: PUSH
42876: EMPTY
42877: LIST
42878: LIST
42879: LIST
42880: LIST
42881: LIST
42882: LIST
42883: LIST
42884: LIST
42885: LIST
42886: LIST
42887: LIST
42888: LIST
42889: LIST
42890: LIST
42891: LIST
42892: LIST
42893: LIST
42894: LIST
42895: LIST
42896: LIST
42897: LIST
42898: LIST
42899: LIST
42900: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
42901: LD_ADDR_VAR 0 25
42905: PUSH
42906: LD_INT 0
42908: PUSH
42909: LD_INT 0
42911: PUSH
42912: EMPTY
42913: LIST
42914: LIST
42915: PUSH
42916: LD_INT 0
42918: PUSH
42919: LD_INT 1
42921: NEG
42922: PUSH
42923: EMPTY
42924: LIST
42925: LIST
42926: PUSH
42927: LD_INT 1
42929: PUSH
42930: LD_INT 0
42932: PUSH
42933: EMPTY
42934: LIST
42935: LIST
42936: PUSH
42937: LD_INT 1
42939: PUSH
42940: LD_INT 1
42942: PUSH
42943: EMPTY
42944: LIST
42945: LIST
42946: PUSH
42947: LD_INT 0
42949: PUSH
42950: LD_INT 1
42952: PUSH
42953: EMPTY
42954: LIST
42955: LIST
42956: PUSH
42957: LD_INT 1
42959: NEG
42960: PUSH
42961: LD_INT 0
42963: PUSH
42964: EMPTY
42965: LIST
42966: LIST
42967: PUSH
42968: LD_INT 1
42970: NEG
42971: PUSH
42972: LD_INT 1
42974: NEG
42975: PUSH
42976: EMPTY
42977: LIST
42978: LIST
42979: PUSH
42980: LD_INT 1
42982: NEG
42983: PUSH
42984: LD_INT 2
42986: NEG
42987: PUSH
42988: EMPTY
42989: LIST
42990: LIST
42991: PUSH
42992: LD_INT 0
42994: PUSH
42995: LD_INT 2
42997: NEG
42998: PUSH
42999: EMPTY
43000: LIST
43001: LIST
43002: PUSH
43003: LD_INT 1
43005: PUSH
43006: LD_INT 1
43008: NEG
43009: PUSH
43010: EMPTY
43011: LIST
43012: LIST
43013: PUSH
43014: LD_INT 2
43016: PUSH
43017: LD_INT 0
43019: PUSH
43020: EMPTY
43021: LIST
43022: LIST
43023: PUSH
43024: LD_INT 2
43026: PUSH
43027: LD_INT 1
43029: PUSH
43030: EMPTY
43031: LIST
43032: LIST
43033: PUSH
43034: LD_INT 2
43036: PUSH
43037: LD_INT 2
43039: PUSH
43040: EMPTY
43041: LIST
43042: LIST
43043: PUSH
43044: LD_INT 1
43046: PUSH
43047: LD_INT 2
43049: PUSH
43050: EMPTY
43051: LIST
43052: LIST
43053: PUSH
43054: LD_INT 0
43056: PUSH
43057: LD_INT 2
43059: PUSH
43060: EMPTY
43061: LIST
43062: LIST
43063: PUSH
43064: LD_INT 1
43066: NEG
43067: PUSH
43068: LD_INT 1
43070: PUSH
43071: EMPTY
43072: LIST
43073: LIST
43074: PUSH
43075: LD_INT 2
43077: NEG
43078: PUSH
43079: LD_INT 0
43081: PUSH
43082: EMPTY
43083: LIST
43084: LIST
43085: PUSH
43086: LD_INT 2
43088: NEG
43089: PUSH
43090: LD_INT 1
43092: NEG
43093: PUSH
43094: EMPTY
43095: LIST
43096: LIST
43097: PUSH
43098: LD_INT 2
43100: NEG
43101: PUSH
43102: LD_INT 2
43104: NEG
43105: PUSH
43106: EMPTY
43107: LIST
43108: LIST
43109: PUSH
43110: LD_INT 3
43112: PUSH
43113: LD_INT 1
43115: PUSH
43116: EMPTY
43117: LIST
43118: LIST
43119: PUSH
43120: LD_INT 3
43122: PUSH
43123: LD_INT 2
43125: PUSH
43126: EMPTY
43127: LIST
43128: LIST
43129: PUSH
43130: LD_INT 2
43132: PUSH
43133: LD_INT 3
43135: PUSH
43136: EMPTY
43137: LIST
43138: LIST
43139: PUSH
43140: LD_INT 1
43142: PUSH
43143: LD_INT 3
43145: PUSH
43146: EMPTY
43147: LIST
43148: LIST
43149: PUSH
43150: EMPTY
43151: LIST
43152: LIST
43153: LIST
43154: LIST
43155: LIST
43156: LIST
43157: LIST
43158: LIST
43159: LIST
43160: LIST
43161: LIST
43162: LIST
43163: LIST
43164: LIST
43165: LIST
43166: LIST
43167: LIST
43168: LIST
43169: LIST
43170: LIST
43171: LIST
43172: LIST
43173: LIST
43174: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
43175: LD_ADDR_VAR 0 26
43179: PUSH
43180: LD_INT 0
43182: PUSH
43183: LD_INT 0
43185: PUSH
43186: EMPTY
43187: LIST
43188: LIST
43189: PUSH
43190: LD_INT 0
43192: PUSH
43193: LD_INT 1
43195: NEG
43196: PUSH
43197: EMPTY
43198: LIST
43199: LIST
43200: PUSH
43201: LD_INT 1
43203: PUSH
43204: LD_INT 0
43206: PUSH
43207: EMPTY
43208: LIST
43209: LIST
43210: PUSH
43211: LD_INT 1
43213: PUSH
43214: LD_INT 1
43216: PUSH
43217: EMPTY
43218: LIST
43219: LIST
43220: PUSH
43221: LD_INT 0
43223: PUSH
43224: LD_INT 1
43226: PUSH
43227: EMPTY
43228: LIST
43229: LIST
43230: PUSH
43231: LD_INT 1
43233: NEG
43234: PUSH
43235: LD_INT 0
43237: PUSH
43238: EMPTY
43239: LIST
43240: LIST
43241: PUSH
43242: LD_INT 1
43244: NEG
43245: PUSH
43246: LD_INT 1
43248: NEG
43249: PUSH
43250: EMPTY
43251: LIST
43252: LIST
43253: PUSH
43254: LD_INT 1
43256: NEG
43257: PUSH
43258: LD_INT 2
43260: NEG
43261: PUSH
43262: EMPTY
43263: LIST
43264: LIST
43265: PUSH
43266: LD_INT 0
43268: PUSH
43269: LD_INT 2
43271: NEG
43272: PUSH
43273: EMPTY
43274: LIST
43275: LIST
43276: PUSH
43277: LD_INT 1
43279: PUSH
43280: LD_INT 1
43282: NEG
43283: PUSH
43284: EMPTY
43285: LIST
43286: LIST
43287: PUSH
43288: LD_INT 2
43290: PUSH
43291: LD_INT 0
43293: PUSH
43294: EMPTY
43295: LIST
43296: LIST
43297: PUSH
43298: LD_INT 2
43300: PUSH
43301: LD_INT 1
43303: PUSH
43304: EMPTY
43305: LIST
43306: LIST
43307: PUSH
43308: LD_INT 2
43310: PUSH
43311: LD_INT 2
43313: PUSH
43314: EMPTY
43315: LIST
43316: LIST
43317: PUSH
43318: LD_INT 1
43320: PUSH
43321: LD_INT 2
43323: PUSH
43324: EMPTY
43325: LIST
43326: LIST
43327: PUSH
43328: LD_INT 0
43330: PUSH
43331: LD_INT 2
43333: PUSH
43334: EMPTY
43335: LIST
43336: LIST
43337: PUSH
43338: LD_INT 1
43340: NEG
43341: PUSH
43342: LD_INT 1
43344: PUSH
43345: EMPTY
43346: LIST
43347: LIST
43348: PUSH
43349: LD_INT 2
43351: NEG
43352: PUSH
43353: LD_INT 0
43355: PUSH
43356: EMPTY
43357: LIST
43358: LIST
43359: PUSH
43360: LD_INT 2
43362: NEG
43363: PUSH
43364: LD_INT 1
43366: NEG
43367: PUSH
43368: EMPTY
43369: LIST
43370: LIST
43371: PUSH
43372: LD_INT 2
43374: NEG
43375: PUSH
43376: LD_INT 2
43378: NEG
43379: PUSH
43380: EMPTY
43381: LIST
43382: LIST
43383: PUSH
43384: LD_INT 2
43386: PUSH
43387: LD_INT 3
43389: PUSH
43390: EMPTY
43391: LIST
43392: LIST
43393: PUSH
43394: LD_INT 1
43396: PUSH
43397: LD_INT 3
43399: PUSH
43400: EMPTY
43401: LIST
43402: LIST
43403: PUSH
43404: LD_INT 1
43406: NEG
43407: PUSH
43408: LD_INT 2
43410: PUSH
43411: EMPTY
43412: LIST
43413: LIST
43414: PUSH
43415: LD_INT 2
43417: NEG
43418: PUSH
43419: LD_INT 1
43421: PUSH
43422: EMPTY
43423: LIST
43424: LIST
43425: PUSH
43426: EMPTY
43427: LIST
43428: LIST
43429: LIST
43430: LIST
43431: LIST
43432: LIST
43433: LIST
43434: LIST
43435: LIST
43436: LIST
43437: LIST
43438: LIST
43439: LIST
43440: LIST
43441: LIST
43442: LIST
43443: LIST
43444: LIST
43445: LIST
43446: LIST
43447: LIST
43448: LIST
43449: LIST
43450: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
43451: LD_ADDR_VAR 0 27
43455: PUSH
43456: LD_INT 0
43458: PUSH
43459: LD_INT 0
43461: PUSH
43462: EMPTY
43463: LIST
43464: LIST
43465: PUSH
43466: LD_INT 0
43468: PUSH
43469: LD_INT 1
43471: NEG
43472: PUSH
43473: EMPTY
43474: LIST
43475: LIST
43476: PUSH
43477: LD_INT 1
43479: PUSH
43480: LD_INT 0
43482: PUSH
43483: EMPTY
43484: LIST
43485: LIST
43486: PUSH
43487: LD_INT 1
43489: PUSH
43490: LD_INT 1
43492: PUSH
43493: EMPTY
43494: LIST
43495: LIST
43496: PUSH
43497: LD_INT 0
43499: PUSH
43500: LD_INT 1
43502: PUSH
43503: EMPTY
43504: LIST
43505: LIST
43506: PUSH
43507: LD_INT 1
43509: NEG
43510: PUSH
43511: LD_INT 0
43513: PUSH
43514: EMPTY
43515: LIST
43516: LIST
43517: PUSH
43518: LD_INT 1
43520: NEG
43521: PUSH
43522: LD_INT 1
43524: NEG
43525: PUSH
43526: EMPTY
43527: LIST
43528: LIST
43529: PUSH
43530: LD_INT 1
43532: NEG
43533: PUSH
43534: LD_INT 2
43536: NEG
43537: PUSH
43538: EMPTY
43539: LIST
43540: LIST
43541: PUSH
43542: LD_INT 0
43544: PUSH
43545: LD_INT 2
43547: NEG
43548: PUSH
43549: EMPTY
43550: LIST
43551: LIST
43552: PUSH
43553: LD_INT 1
43555: PUSH
43556: LD_INT 1
43558: NEG
43559: PUSH
43560: EMPTY
43561: LIST
43562: LIST
43563: PUSH
43564: LD_INT 2
43566: PUSH
43567: LD_INT 0
43569: PUSH
43570: EMPTY
43571: LIST
43572: LIST
43573: PUSH
43574: LD_INT 2
43576: PUSH
43577: LD_INT 1
43579: PUSH
43580: EMPTY
43581: LIST
43582: LIST
43583: PUSH
43584: LD_INT 2
43586: PUSH
43587: LD_INT 2
43589: PUSH
43590: EMPTY
43591: LIST
43592: LIST
43593: PUSH
43594: LD_INT 1
43596: PUSH
43597: LD_INT 2
43599: PUSH
43600: EMPTY
43601: LIST
43602: LIST
43603: PUSH
43604: LD_INT 0
43606: PUSH
43607: LD_INT 2
43609: PUSH
43610: EMPTY
43611: LIST
43612: LIST
43613: PUSH
43614: LD_INT 1
43616: NEG
43617: PUSH
43618: LD_INT 1
43620: PUSH
43621: EMPTY
43622: LIST
43623: LIST
43624: PUSH
43625: LD_INT 2
43627: NEG
43628: PUSH
43629: LD_INT 0
43631: PUSH
43632: EMPTY
43633: LIST
43634: LIST
43635: PUSH
43636: LD_INT 2
43638: NEG
43639: PUSH
43640: LD_INT 1
43642: NEG
43643: PUSH
43644: EMPTY
43645: LIST
43646: LIST
43647: PUSH
43648: LD_INT 2
43650: NEG
43651: PUSH
43652: LD_INT 2
43654: NEG
43655: PUSH
43656: EMPTY
43657: LIST
43658: LIST
43659: PUSH
43660: LD_INT 1
43662: NEG
43663: PUSH
43664: LD_INT 2
43666: PUSH
43667: EMPTY
43668: LIST
43669: LIST
43670: PUSH
43671: LD_INT 2
43673: NEG
43674: PUSH
43675: LD_INT 1
43677: PUSH
43678: EMPTY
43679: LIST
43680: LIST
43681: PUSH
43682: LD_INT 3
43684: NEG
43685: PUSH
43686: LD_INT 1
43688: NEG
43689: PUSH
43690: EMPTY
43691: LIST
43692: LIST
43693: PUSH
43694: LD_INT 3
43696: NEG
43697: PUSH
43698: LD_INT 2
43700: NEG
43701: PUSH
43702: EMPTY
43703: LIST
43704: LIST
43705: PUSH
43706: EMPTY
43707: LIST
43708: LIST
43709: LIST
43710: LIST
43711: LIST
43712: LIST
43713: LIST
43714: LIST
43715: LIST
43716: LIST
43717: LIST
43718: LIST
43719: LIST
43720: LIST
43721: LIST
43722: LIST
43723: LIST
43724: LIST
43725: LIST
43726: LIST
43727: LIST
43728: LIST
43729: LIST
43730: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
43731: LD_ADDR_VAR 0 28
43735: PUSH
43736: LD_INT 0
43738: PUSH
43739: LD_INT 0
43741: PUSH
43742: EMPTY
43743: LIST
43744: LIST
43745: PUSH
43746: LD_INT 0
43748: PUSH
43749: LD_INT 1
43751: NEG
43752: PUSH
43753: EMPTY
43754: LIST
43755: LIST
43756: PUSH
43757: LD_INT 1
43759: PUSH
43760: LD_INT 0
43762: PUSH
43763: EMPTY
43764: LIST
43765: LIST
43766: PUSH
43767: LD_INT 1
43769: PUSH
43770: LD_INT 1
43772: PUSH
43773: EMPTY
43774: LIST
43775: LIST
43776: PUSH
43777: LD_INT 0
43779: PUSH
43780: LD_INT 1
43782: PUSH
43783: EMPTY
43784: LIST
43785: LIST
43786: PUSH
43787: LD_INT 1
43789: NEG
43790: PUSH
43791: LD_INT 0
43793: PUSH
43794: EMPTY
43795: LIST
43796: LIST
43797: PUSH
43798: LD_INT 1
43800: NEG
43801: PUSH
43802: LD_INT 1
43804: NEG
43805: PUSH
43806: EMPTY
43807: LIST
43808: LIST
43809: PUSH
43810: LD_INT 1
43812: NEG
43813: PUSH
43814: LD_INT 2
43816: NEG
43817: PUSH
43818: EMPTY
43819: LIST
43820: LIST
43821: PUSH
43822: LD_INT 0
43824: PUSH
43825: LD_INT 2
43827: NEG
43828: PUSH
43829: EMPTY
43830: LIST
43831: LIST
43832: PUSH
43833: LD_INT 1
43835: PUSH
43836: LD_INT 1
43838: NEG
43839: PUSH
43840: EMPTY
43841: LIST
43842: LIST
43843: PUSH
43844: LD_INT 2
43846: PUSH
43847: LD_INT 0
43849: PUSH
43850: EMPTY
43851: LIST
43852: LIST
43853: PUSH
43854: LD_INT 2
43856: PUSH
43857: LD_INT 1
43859: PUSH
43860: EMPTY
43861: LIST
43862: LIST
43863: PUSH
43864: LD_INT 2
43866: PUSH
43867: LD_INT 2
43869: PUSH
43870: EMPTY
43871: LIST
43872: LIST
43873: PUSH
43874: LD_INT 1
43876: PUSH
43877: LD_INT 2
43879: PUSH
43880: EMPTY
43881: LIST
43882: LIST
43883: PUSH
43884: LD_INT 0
43886: PUSH
43887: LD_INT 2
43889: PUSH
43890: EMPTY
43891: LIST
43892: LIST
43893: PUSH
43894: LD_INT 1
43896: NEG
43897: PUSH
43898: LD_INT 1
43900: PUSH
43901: EMPTY
43902: LIST
43903: LIST
43904: PUSH
43905: LD_INT 2
43907: NEG
43908: PUSH
43909: LD_INT 0
43911: PUSH
43912: EMPTY
43913: LIST
43914: LIST
43915: PUSH
43916: LD_INT 2
43918: NEG
43919: PUSH
43920: LD_INT 1
43922: NEG
43923: PUSH
43924: EMPTY
43925: LIST
43926: LIST
43927: PUSH
43928: LD_INT 2
43930: NEG
43931: PUSH
43932: LD_INT 2
43934: NEG
43935: PUSH
43936: EMPTY
43937: LIST
43938: LIST
43939: PUSH
43940: LD_INT 2
43942: NEG
43943: PUSH
43944: LD_INT 3
43946: NEG
43947: PUSH
43948: EMPTY
43949: LIST
43950: LIST
43951: PUSH
43952: LD_INT 1
43954: NEG
43955: PUSH
43956: LD_INT 3
43958: NEG
43959: PUSH
43960: EMPTY
43961: LIST
43962: LIST
43963: PUSH
43964: LD_INT 3
43966: NEG
43967: PUSH
43968: LD_INT 1
43970: NEG
43971: PUSH
43972: EMPTY
43973: LIST
43974: LIST
43975: PUSH
43976: LD_INT 3
43978: NEG
43979: PUSH
43980: LD_INT 2
43982: NEG
43983: PUSH
43984: EMPTY
43985: LIST
43986: LIST
43987: PUSH
43988: EMPTY
43989: LIST
43990: LIST
43991: LIST
43992: LIST
43993: LIST
43994: LIST
43995: LIST
43996: LIST
43997: LIST
43998: LIST
43999: LIST
44000: LIST
44001: LIST
44002: LIST
44003: LIST
44004: LIST
44005: LIST
44006: LIST
44007: LIST
44008: LIST
44009: LIST
44010: LIST
44011: LIST
44012: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44013: LD_ADDR_VAR 0 29
44017: PUSH
44018: LD_INT 0
44020: PUSH
44021: LD_INT 0
44023: PUSH
44024: EMPTY
44025: LIST
44026: LIST
44027: PUSH
44028: LD_INT 0
44030: PUSH
44031: LD_INT 1
44033: NEG
44034: PUSH
44035: EMPTY
44036: LIST
44037: LIST
44038: PUSH
44039: LD_INT 1
44041: PUSH
44042: LD_INT 0
44044: PUSH
44045: EMPTY
44046: LIST
44047: LIST
44048: PUSH
44049: LD_INT 1
44051: PUSH
44052: LD_INT 1
44054: PUSH
44055: EMPTY
44056: LIST
44057: LIST
44058: PUSH
44059: LD_INT 0
44061: PUSH
44062: LD_INT 1
44064: PUSH
44065: EMPTY
44066: LIST
44067: LIST
44068: PUSH
44069: LD_INT 1
44071: NEG
44072: PUSH
44073: LD_INT 0
44075: PUSH
44076: EMPTY
44077: LIST
44078: LIST
44079: PUSH
44080: LD_INT 1
44082: NEG
44083: PUSH
44084: LD_INT 1
44086: NEG
44087: PUSH
44088: EMPTY
44089: LIST
44090: LIST
44091: PUSH
44092: LD_INT 1
44094: NEG
44095: PUSH
44096: LD_INT 2
44098: NEG
44099: PUSH
44100: EMPTY
44101: LIST
44102: LIST
44103: PUSH
44104: LD_INT 0
44106: PUSH
44107: LD_INT 2
44109: NEG
44110: PUSH
44111: EMPTY
44112: LIST
44113: LIST
44114: PUSH
44115: LD_INT 1
44117: PUSH
44118: LD_INT 1
44120: NEG
44121: PUSH
44122: EMPTY
44123: LIST
44124: LIST
44125: PUSH
44126: LD_INT 2
44128: PUSH
44129: LD_INT 0
44131: PUSH
44132: EMPTY
44133: LIST
44134: LIST
44135: PUSH
44136: LD_INT 2
44138: PUSH
44139: LD_INT 1
44141: PUSH
44142: EMPTY
44143: LIST
44144: LIST
44145: PUSH
44146: LD_INT 1
44148: PUSH
44149: LD_INT 2
44151: PUSH
44152: EMPTY
44153: LIST
44154: LIST
44155: PUSH
44156: LD_INT 0
44158: PUSH
44159: LD_INT 2
44161: PUSH
44162: EMPTY
44163: LIST
44164: LIST
44165: PUSH
44166: LD_INT 1
44168: NEG
44169: PUSH
44170: LD_INT 1
44172: PUSH
44173: EMPTY
44174: LIST
44175: LIST
44176: PUSH
44177: LD_INT 2
44179: NEG
44180: PUSH
44181: LD_INT 1
44183: NEG
44184: PUSH
44185: EMPTY
44186: LIST
44187: LIST
44188: PUSH
44189: LD_INT 2
44191: NEG
44192: PUSH
44193: LD_INT 2
44195: NEG
44196: PUSH
44197: EMPTY
44198: LIST
44199: LIST
44200: PUSH
44201: LD_INT 2
44203: NEG
44204: PUSH
44205: LD_INT 3
44207: NEG
44208: PUSH
44209: EMPTY
44210: LIST
44211: LIST
44212: PUSH
44213: LD_INT 2
44215: PUSH
44216: LD_INT 1
44218: NEG
44219: PUSH
44220: EMPTY
44221: LIST
44222: LIST
44223: PUSH
44224: LD_INT 3
44226: PUSH
44227: LD_INT 1
44229: PUSH
44230: EMPTY
44231: LIST
44232: LIST
44233: PUSH
44234: LD_INT 1
44236: PUSH
44237: LD_INT 3
44239: PUSH
44240: EMPTY
44241: LIST
44242: LIST
44243: PUSH
44244: LD_INT 1
44246: NEG
44247: PUSH
44248: LD_INT 2
44250: PUSH
44251: EMPTY
44252: LIST
44253: LIST
44254: PUSH
44255: LD_INT 3
44257: NEG
44258: PUSH
44259: LD_INT 2
44261: NEG
44262: PUSH
44263: EMPTY
44264: LIST
44265: LIST
44266: PUSH
44267: EMPTY
44268: LIST
44269: LIST
44270: LIST
44271: LIST
44272: LIST
44273: LIST
44274: LIST
44275: LIST
44276: LIST
44277: LIST
44278: LIST
44279: LIST
44280: LIST
44281: LIST
44282: LIST
44283: LIST
44284: LIST
44285: LIST
44286: LIST
44287: LIST
44288: LIST
44289: LIST
44290: LIST
44291: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44292: LD_ADDR_VAR 0 30
44296: PUSH
44297: LD_INT 0
44299: PUSH
44300: LD_INT 0
44302: PUSH
44303: EMPTY
44304: LIST
44305: LIST
44306: PUSH
44307: LD_INT 0
44309: PUSH
44310: LD_INT 1
44312: NEG
44313: PUSH
44314: EMPTY
44315: LIST
44316: LIST
44317: PUSH
44318: LD_INT 1
44320: PUSH
44321: LD_INT 0
44323: PUSH
44324: EMPTY
44325: LIST
44326: LIST
44327: PUSH
44328: LD_INT 1
44330: PUSH
44331: LD_INT 1
44333: PUSH
44334: EMPTY
44335: LIST
44336: LIST
44337: PUSH
44338: LD_INT 0
44340: PUSH
44341: LD_INT 1
44343: PUSH
44344: EMPTY
44345: LIST
44346: LIST
44347: PUSH
44348: LD_INT 1
44350: NEG
44351: PUSH
44352: LD_INT 0
44354: PUSH
44355: EMPTY
44356: LIST
44357: LIST
44358: PUSH
44359: LD_INT 1
44361: NEG
44362: PUSH
44363: LD_INT 1
44365: NEG
44366: PUSH
44367: EMPTY
44368: LIST
44369: LIST
44370: PUSH
44371: LD_INT 1
44373: NEG
44374: PUSH
44375: LD_INT 2
44377: NEG
44378: PUSH
44379: EMPTY
44380: LIST
44381: LIST
44382: PUSH
44383: LD_INT 0
44385: PUSH
44386: LD_INT 2
44388: NEG
44389: PUSH
44390: EMPTY
44391: LIST
44392: LIST
44393: PUSH
44394: LD_INT 1
44396: PUSH
44397: LD_INT 1
44399: NEG
44400: PUSH
44401: EMPTY
44402: LIST
44403: LIST
44404: PUSH
44405: LD_INT 2
44407: PUSH
44408: LD_INT 0
44410: PUSH
44411: EMPTY
44412: LIST
44413: LIST
44414: PUSH
44415: LD_INT 2
44417: PUSH
44418: LD_INT 1
44420: PUSH
44421: EMPTY
44422: LIST
44423: LIST
44424: PUSH
44425: LD_INT 2
44427: PUSH
44428: LD_INT 2
44430: PUSH
44431: EMPTY
44432: LIST
44433: LIST
44434: PUSH
44435: LD_INT 1
44437: PUSH
44438: LD_INT 2
44440: PUSH
44441: EMPTY
44442: LIST
44443: LIST
44444: PUSH
44445: LD_INT 1
44447: NEG
44448: PUSH
44449: LD_INT 1
44451: PUSH
44452: EMPTY
44453: LIST
44454: LIST
44455: PUSH
44456: LD_INT 2
44458: NEG
44459: PUSH
44460: LD_INT 0
44462: PUSH
44463: EMPTY
44464: LIST
44465: LIST
44466: PUSH
44467: LD_INT 2
44469: NEG
44470: PUSH
44471: LD_INT 1
44473: NEG
44474: PUSH
44475: EMPTY
44476: LIST
44477: LIST
44478: PUSH
44479: LD_INT 1
44481: NEG
44482: PUSH
44483: LD_INT 3
44485: NEG
44486: PUSH
44487: EMPTY
44488: LIST
44489: LIST
44490: PUSH
44491: LD_INT 1
44493: PUSH
44494: LD_INT 2
44496: NEG
44497: PUSH
44498: EMPTY
44499: LIST
44500: LIST
44501: PUSH
44502: LD_INT 3
44504: PUSH
44505: LD_INT 2
44507: PUSH
44508: EMPTY
44509: LIST
44510: LIST
44511: PUSH
44512: LD_INT 2
44514: PUSH
44515: LD_INT 3
44517: PUSH
44518: EMPTY
44519: LIST
44520: LIST
44521: PUSH
44522: LD_INT 2
44524: NEG
44525: PUSH
44526: LD_INT 1
44528: PUSH
44529: EMPTY
44530: LIST
44531: LIST
44532: PUSH
44533: LD_INT 3
44535: NEG
44536: PUSH
44537: LD_INT 1
44539: NEG
44540: PUSH
44541: EMPTY
44542: LIST
44543: LIST
44544: PUSH
44545: EMPTY
44546: LIST
44547: LIST
44548: LIST
44549: LIST
44550: LIST
44551: LIST
44552: LIST
44553: LIST
44554: LIST
44555: LIST
44556: LIST
44557: LIST
44558: LIST
44559: LIST
44560: LIST
44561: LIST
44562: LIST
44563: LIST
44564: LIST
44565: LIST
44566: LIST
44567: LIST
44568: LIST
44569: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44570: LD_ADDR_VAR 0 31
44574: PUSH
44575: LD_INT 0
44577: PUSH
44578: LD_INT 0
44580: PUSH
44581: EMPTY
44582: LIST
44583: LIST
44584: PUSH
44585: LD_INT 0
44587: PUSH
44588: LD_INT 1
44590: NEG
44591: PUSH
44592: EMPTY
44593: LIST
44594: LIST
44595: PUSH
44596: LD_INT 1
44598: PUSH
44599: LD_INT 0
44601: PUSH
44602: EMPTY
44603: LIST
44604: LIST
44605: PUSH
44606: LD_INT 1
44608: PUSH
44609: LD_INT 1
44611: PUSH
44612: EMPTY
44613: LIST
44614: LIST
44615: PUSH
44616: LD_INT 0
44618: PUSH
44619: LD_INT 1
44621: PUSH
44622: EMPTY
44623: LIST
44624: LIST
44625: PUSH
44626: LD_INT 1
44628: NEG
44629: PUSH
44630: LD_INT 0
44632: PUSH
44633: EMPTY
44634: LIST
44635: LIST
44636: PUSH
44637: LD_INT 1
44639: NEG
44640: PUSH
44641: LD_INT 1
44643: NEG
44644: PUSH
44645: EMPTY
44646: LIST
44647: LIST
44648: PUSH
44649: LD_INT 1
44651: NEG
44652: PUSH
44653: LD_INT 2
44655: NEG
44656: PUSH
44657: EMPTY
44658: LIST
44659: LIST
44660: PUSH
44661: LD_INT 1
44663: PUSH
44664: LD_INT 1
44666: NEG
44667: PUSH
44668: EMPTY
44669: LIST
44670: LIST
44671: PUSH
44672: LD_INT 2
44674: PUSH
44675: LD_INT 0
44677: PUSH
44678: EMPTY
44679: LIST
44680: LIST
44681: PUSH
44682: LD_INT 2
44684: PUSH
44685: LD_INT 1
44687: PUSH
44688: EMPTY
44689: LIST
44690: LIST
44691: PUSH
44692: LD_INT 2
44694: PUSH
44695: LD_INT 2
44697: PUSH
44698: EMPTY
44699: LIST
44700: LIST
44701: PUSH
44702: LD_INT 1
44704: PUSH
44705: LD_INT 2
44707: PUSH
44708: EMPTY
44709: LIST
44710: LIST
44711: PUSH
44712: LD_INT 0
44714: PUSH
44715: LD_INT 2
44717: PUSH
44718: EMPTY
44719: LIST
44720: LIST
44721: PUSH
44722: LD_INT 1
44724: NEG
44725: PUSH
44726: LD_INT 1
44728: PUSH
44729: EMPTY
44730: LIST
44731: LIST
44732: PUSH
44733: LD_INT 2
44735: NEG
44736: PUSH
44737: LD_INT 1
44739: NEG
44740: PUSH
44741: EMPTY
44742: LIST
44743: LIST
44744: PUSH
44745: LD_INT 2
44747: NEG
44748: PUSH
44749: LD_INT 2
44751: NEG
44752: PUSH
44753: EMPTY
44754: LIST
44755: LIST
44756: PUSH
44757: LD_INT 2
44759: NEG
44760: PUSH
44761: LD_INT 3
44763: NEG
44764: PUSH
44765: EMPTY
44766: LIST
44767: LIST
44768: PUSH
44769: LD_INT 2
44771: PUSH
44772: LD_INT 1
44774: NEG
44775: PUSH
44776: EMPTY
44777: LIST
44778: LIST
44779: PUSH
44780: LD_INT 3
44782: PUSH
44783: LD_INT 1
44785: PUSH
44786: EMPTY
44787: LIST
44788: LIST
44789: PUSH
44790: LD_INT 1
44792: PUSH
44793: LD_INT 3
44795: PUSH
44796: EMPTY
44797: LIST
44798: LIST
44799: PUSH
44800: LD_INT 1
44802: NEG
44803: PUSH
44804: LD_INT 2
44806: PUSH
44807: EMPTY
44808: LIST
44809: LIST
44810: PUSH
44811: LD_INT 3
44813: NEG
44814: PUSH
44815: LD_INT 2
44817: NEG
44818: PUSH
44819: EMPTY
44820: LIST
44821: LIST
44822: PUSH
44823: EMPTY
44824: LIST
44825: LIST
44826: LIST
44827: LIST
44828: LIST
44829: LIST
44830: LIST
44831: LIST
44832: LIST
44833: LIST
44834: LIST
44835: LIST
44836: LIST
44837: LIST
44838: LIST
44839: LIST
44840: LIST
44841: LIST
44842: LIST
44843: LIST
44844: LIST
44845: LIST
44846: LIST
44847: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44848: LD_ADDR_VAR 0 32
44852: PUSH
44853: LD_INT 0
44855: PUSH
44856: LD_INT 0
44858: PUSH
44859: EMPTY
44860: LIST
44861: LIST
44862: PUSH
44863: LD_INT 0
44865: PUSH
44866: LD_INT 1
44868: NEG
44869: PUSH
44870: EMPTY
44871: LIST
44872: LIST
44873: PUSH
44874: LD_INT 1
44876: PUSH
44877: LD_INT 0
44879: PUSH
44880: EMPTY
44881: LIST
44882: LIST
44883: PUSH
44884: LD_INT 1
44886: PUSH
44887: LD_INT 1
44889: PUSH
44890: EMPTY
44891: LIST
44892: LIST
44893: PUSH
44894: LD_INT 0
44896: PUSH
44897: LD_INT 1
44899: PUSH
44900: EMPTY
44901: LIST
44902: LIST
44903: PUSH
44904: LD_INT 1
44906: NEG
44907: PUSH
44908: LD_INT 0
44910: PUSH
44911: EMPTY
44912: LIST
44913: LIST
44914: PUSH
44915: LD_INT 1
44917: NEG
44918: PUSH
44919: LD_INT 1
44921: NEG
44922: PUSH
44923: EMPTY
44924: LIST
44925: LIST
44926: PUSH
44927: LD_INT 1
44929: NEG
44930: PUSH
44931: LD_INT 2
44933: NEG
44934: PUSH
44935: EMPTY
44936: LIST
44937: LIST
44938: PUSH
44939: LD_INT 0
44941: PUSH
44942: LD_INT 2
44944: NEG
44945: PUSH
44946: EMPTY
44947: LIST
44948: LIST
44949: PUSH
44950: LD_INT 1
44952: PUSH
44953: LD_INT 1
44955: NEG
44956: PUSH
44957: EMPTY
44958: LIST
44959: LIST
44960: PUSH
44961: LD_INT 2
44963: PUSH
44964: LD_INT 1
44966: PUSH
44967: EMPTY
44968: LIST
44969: LIST
44970: PUSH
44971: LD_INT 2
44973: PUSH
44974: LD_INT 2
44976: PUSH
44977: EMPTY
44978: LIST
44979: LIST
44980: PUSH
44981: LD_INT 1
44983: PUSH
44984: LD_INT 2
44986: PUSH
44987: EMPTY
44988: LIST
44989: LIST
44990: PUSH
44991: LD_INT 0
44993: PUSH
44994: LD_INT 2
44996: PUSH
44997: EMPTY
44998: LIST
44999: LIST
45000: PUSH
45001: LD_INT 1
45003: NEG
45004: PUSH
45005: LD_INT 1
45007: PUSH
45008: EMPTY
45009: LIST
45010: LIST
45011: PUSH
45012: LD_INT 2
45014: NEG
45015: PUSH
45016: LD_INT 0
45018: PUSH
45019: EMPTY
45020: LIST
45021: LIST
45022: PUSH
45023: LD_INT 2
45025: NEG
45026: PUSH
45027: LD_INT 1
45029: NEG
45030: PUSH
45031: EMPTY
45032: LIST
45033: LIST
45034: PUSH
45035: LD_INT 1
45037: NEG
45038: PUSH
45039: LD_INT 3
45041: NEG
45042: PUSH
45043: EMPTY
45044: LIST
45045: LIST
45046: PUSH
45047: LD_INT 1
45049: PUSH
45050: LD_INT 2
45052: NEG
45053: PUSH
45054: EMPTY
45055: LIST
45056: LIST
45057: PUSH
45058: LD_INT 3
45060: PUSH
45061: LD_INT 2
45063: PUSH
45064: EMPTY
45065: LIST
45066: LIST
45067: PUSH
45068: LD_INT 2
45070: PUSH
45071: LD_INT 3
45073: PUSH
45074: EMPTY
45075: LIST
45076: LIST
45077: PUSH
45078: LD_INT 2
45080: NEG
45081: PUSH
45082: LD_INT 1
45084: PUSH
45085: EMPTY
45086: LIST
45087: LIST
45088: PUSH
45089: LD_INT 3
45091: NEG
45092: PUSH
45093: LD_INT 1
45095: NEG
45096: PUSH
45097: EMPTY
45098: LIST
45099: LIST
45100: PUSH
45101: EMPTY
45102: LIST
45103: LIST
45104: LIST
45105: LIST
45106: LIST
45107: LIST
45108: LIST
45109: LIST
45110: LIST
45111: LIST
45112: LIST
45113: LIST
45114: LIST
45115: LIST
45116: LIST
45117: LIST
45118: LIST
45119: LIST
45120: LIST
45121: LIST
45122: LIST
45123: LIST
45124: LIST
45125: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45126: LD_ADDR_VAR 0 33
45130: PUSH
45131: LD_INT 0
45133: PUSH
45134: LD_INT 0
45136: PUSH
45137: EMPTY
45138: LIST
45139: LIST
45140: PUSH
45141: LD_INT 0
45143: PUSH
45144: LD_INT 1
45146: NEG
45147: PUSH
45148: EMPTY
45149: LIST
45150: LIST
45151: PUSH
45152: LD_INT 1
45154: PUSH
45155: LD_INT 0
45157: PUSH
45158: EMPTY
45159: LIST
45160: LIST
45161: PUSH
45162: LD_INT 1
45164: PUSH
45165: LD_INT 1
45167: PUSH
45168: EMPTY
45169: LIST
45170: LIST
45171: PUSH
45172: LD_INT 0
45174: PUSH
45175: LD_INT 1
45177: PUSH
45178: EMPTY
45179: LIST
45180: LIST
45181: PUSH
45182: LD_INT 1
45184: NEG
45185: PUSH
45186: LD_INT 0
45188: PUSH
45189: EMPTY
45190: LIST
45191: LIST
45192: PUSH
45193: LD_INT 1
45195: NEG
45196: PUSH
45197: LD_INT 1
45199: NEG
45200: PUSH
45201: EMPTY
45202: LIST
45203: LIST
45204: PUSH
45205: LD_INT 1
45207: NEG
45208: PUSH
45209: LD_INT 2
45211: NEG
45212: PUSH
45213: EMPTY
45214: LIST
45215: LIST
45216: PUSH
45217: LD_INT 1
45219: PUSH
45220: LD_INT 1
45222: NEG
45223: PUSH
45224: EMPTY
45225: LIST
45226: LIST
45227: PUSH
45228: LD_INT 2
45230: PUSH
45231: LD_INT 0
45233: PUSH
45234: EMPTY
45235: LIST
45236: LIST
45237: PUSH
45238: LD_INT 2
45240: PUSH
45241: LD_INT 1
45243: PUSH
45244: EMPTY
45245: LIST
45246: LIST
45247: PUSH
45248: LD_INT 1
45250: PUSH
45251: LD_INT 2
45253: PUSH
45254: EMPTY
45255: LIST
45256: LIST
45257: PUSH
45258: LD_INT 0
45260: PUSH
45261: LD_INT 2
45263: PUSH
45264: EMPTY
45265: LIST
45266: LIST
45267: PUSH
45268: LD_INT 1
45270: NEG
45271: PUSH
45272: LD_INT 1
45274: PUSH
45275: EMPTY
45276: LIST
45277: LIST
45278: PUSH
45279: LD_INT 2
45281: NEG
45282: PUSH
45283: LD_INT 0
45285: PUSH
45286: EMPTY
45287: LIST
45288: LIST
45289: PUSH
45290: LD_INT 2
45292: NEG
45293: PUSH
45294: LD_INT 1
45296: NEG
45297: PUSH
45298: EMPTY
45299: LIST
45300: LIST
45301: PUSH
45302: LD_INT 2
45304: NEG
45305: PUSH
45306: LD_INT 2
45308: NEG
45309: PUSH
45310: EMPTY
45311: LIST
45312: LIST
45313: PUSH
45314: LD_INT 2
45316: NEG
45317: PUSH
45318: LD_INT 3
45320: NEG
45321: PUSH
45322: EMPTY
45323: LIST
45324: LIST
45325: PUSH
45326: LD_INT 2
45328: PUSH
45329: LD_INT 1
45331: NEG
45332: PUSH
45333: EMPTY
45334: LIST
45335: LIST
45336: PUSH
45337: LD_INT 3
45339: PUSH
45340: LD_INT 1
45342: PUSH
45343: EMPTY
45344: LIST
45345: LIST
45346: PUSH
45347: LD_INT 1
45349: PUSH
45350: LD_INT 3
45352: PUSH
45353: EMPTY
45354: LIST
45355: LIST
45356: PUSH
45357: LD_INT 1
45359: NEG
45360: PUSH
45361: LD_INT 2
45363: PUSH
45364: EMPTY
45365: LIST
45366: LIST
45367: PUSH
45368: LD_INT 3
45370: NEG
45371: PUSH
45372: LD_INT 2
45374: NEG
45375: PUSH
45376: EMPTY
45377: LIST
45378: LIST
45379: PUSH
45380: EMPTY
45381: LIST
45382: LIST
45383: LIST
45384: LIST
45385: LIST
45386: LIST
45387: LIST
45388: LIST
45389: LIST
45390: LIST
45391: LIST
45392: LIST
45393: LIST
45394: LIST
45395: LIST
45396: LIST
45397: LIST
45398: LIST
45399: LIST
45400: LIST
45401: LIST
45402: LIST
45403: LIST
45404: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45405: LD_ADDR_VAR 0 34
45409: PUSH
45410: LD_INT 0
45412: PUSH
45413: LD_INT 0
45415: PUSH
45416: EMPTY
45417: LIST
45418: LIST
45419: PUSH
45420: LD_INT 0
45422: PUSH
45423: LD_INT 1
45425: NEG
45426: PUSH
45427: EMPTY
45428: LIST
45429: LIST
45430: PUSH
45431: LD_INT 1
45433: PUSH
45434: LD_INT 0
45436: PUSH
45437: EMPTY
45438: LIST
45439: LIST
45440: PUSH
45441: LD_INT 1
45443: PUSH
45444: LD_INT 1
45446: PUSH
45447: EMPTY
45448: LIST
45449: LIST
45450: PUSH
45451: LD_INT 0
45453: PUSH
45454: LD_INT 1
45456: PUSH
45457: EMPTY
45458: LIST
45459: LIST
45460: PUSH
45461: LD_INT 1
45463: NEG
45464: PUSH
45465: LD_INT 0
45467: PUSH
45468: EMPTY
45469: LIST
45470: LIST
45471: PUSH
45472: LD_INT 1
45474: NEG
45475: PUSH
45476: LD_INT 1
45478: NEG
45479: PUSH
45480: EMPTY
45481: LIST
45482: LIST
45483: PUSH
45484: LD_INT 1
45486: NEG
45487: PUSH
45488: LD_INT 2
45490: NEG
45491: PUSH
45492: EMPTY
45493: LIST
45494: LIST
45495: PUSH
45496: LD_INT 0
45498: PUSH
45499: LD_INT 2
45501: NEG
45502: PUSH
45503: EMPTY
45504: LIST
45505: LIST
45506: PUSH
45507: LD_INT 1
45509: PUSH
45510: LD_INT 1
45512: NEG
45513: PUSH
45514: EMPTY
45515: LIST
45516: LIST
45517: PUSH
45518: LD_INT 2
45520: PUSH
45521: LD_INT 1
45523: PUSH
45524: EMPTY
45525: LIST
45526: LIST
45527: PUSH
45528: LD_INT 2
45530: PUSH
45531: LD_INT 2
45533: PUSH
45534: EMPTY
45535: LIST
45536: LIST
45537: PUSH
45538: LD_INT 1
45540: PUSH
45541: LD_INT 2
45543: PUSH
45544: EMPTY
45545: LIST
45546: LIST
45547: PUSH
45548: LD_INT 1
45550: NEG
45551: PUSH
45552: LD_INT 1
45554: PUSH
45555: EMPTY
45556: LIST
45557: LIST
45558: PUSH
45559: LD_INT 2
45561: NEG
45562: PUSH
45563: LD_INT 0
45565: PUSH
45566: EMPTY
45567: LIST
45568: LIST
45569: PUSH
45570: LD_INT 2
45572: NEG
45573: PUSH
45574: LD_INT 1
45576: NEG
45577: PUSH
45578: EMPTY
45579: LIST
45580: LIST
45581: PUSH
45582: LD_INT 2
45584: NEG
45585: PUSH
45586: LD_INT 2
45588: NEG
45589: PUSH
45590: EMPTY
45591: LIST
45592: LIST
45593: PUSH
45594: LD_INT 1
45596: NEG
45597: PUSH
45598: LD_INT 3
45600: NEG
45601: PUSH
45602: EMPTY
45603: LIST
45604: LIST
45605: PUSH
45606: LD_INT 1
45608: PUSH
45609: LD_INT 2
45611: NEG
45612: PUSH
45613: EMPTY
45614: LIST
45615: LIST
45616: PUSH
45617: LD_INT 3
45619: PUSH
45620: LD_INT 2
45622: PUSH
45623: EMPTY
45624: LIST
45625: LIST
45626: PUSH
45627: LD_INT 2
45629: PUSH
45630: LD_INT 3
45632: PUSH
45633: EMPTY
45634: LIST
45635: LIST
45636: PUSH
45637: LD_INT 2
45639: NEG
45640: PUSH
45641: LD_INT 1
45643: PUSH
45644: EMPTY
45645: LIST
45646: LIST
45647: PUSH
45648: LD_INT 3
45650: NEG
45651: PUSH
45652: LD_INT 1
45654: NEG
45655: PUSH
45656: EMPTY
45657: LIST
45658: LIST
45659: PUSH
45660: EMPTY
45661: LIST
45662: LIST
45663: LIST
45664: LIST
45665: LIST
45666: LIST
45667: LIST
45668: LIST
45669: LIST
45670: LIST
45671: LIST
45672: LIST
45673: LIST
45674: LIST
45675: LIST
45676: LIST
45677: LIST
45678: LIST
45679: LIST
45680: LIST
45681: LIST
45682: LIST
45683: LIST
45684: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
45685: LD_ADDR_VAR 0 35
45689: PUSH
45690: LD_INT 0
45692: PUSH
45693: LD_INT 0
45695: PUSH
45696: EMPTY
45697: LIST
45698: LIST
45699: PUSH
45700: LD_INT 0
45702: PUSH
45703: LD_INT 1
45705: NEG
45706: PUSH
45707: EMPTY
45708: LIST
45709: LIST
45710: PUSH
45711: LD_INT 1
45713: PUSH
45714: LD_INT 0
45716: PUSH
45717: EMPTY
45718: LIST
45719: LIST
45720: PUSH
45721: LD_INT 1
45723: PUSH
45724: LD_INT 1
45726: PUSH
45727: EMPTY
45728: LIST
45729: LIST
45730: PUSH
45731: LD_INT 0
45733: PUSH
45734: LD_INT 1
45736: PUSH
45737: EMPTY
45738: LIST
45739: LIST
45740: PUSH
45741: LD_INT 1
45743: NEG
45744: PUSH
45745: LD_INT 0
45747: PUSH
45748: EMPTY
45749: LIST
45750: LIST
45751: PUSH
45752: LD_INT 1
45754: NEG
45755: PUSH
45756: LD_INT 1
45758: NEG
45759: PUSH
45760: EMPTY
45761: LIST
45762: LIST
45763: PUSH
45764: LD_INT 2
45766: PUSH
45767: LD_INT 1
45769: PUSH
45770: EMPTY
45771: LIST
45772: LIST
45773: PUSH
45774: LD_INT 2
45776: NEG
45777: PUSH
45778: LD_INT 1
45780: NEG
45781: PUSH
45782: EMPTY
45783: LIST
45784: LIST
45785: PUSH
45786: EMPTY
45787: LIST
45788: LIST
45789: LIST
45790: LIST
45791: LIST
45792: LIST
45793: LIST
45794: LIST
45795: LIST
45796: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
45797: LD_ADDR_VAR 0 36
45801: PUSH
45802: LD_INT 0
45804: PUSH
45805: LD_INT 0
45807: PUSH
45808: EMPTY
45809: LIST
45810: LIST
45811: PUSH
45812: LD_INT 0
45814: PUSH
45815: LD_INT 1
45817: NEG
45818: PUSH
45819: EMPTY
45820: LIST
45821: LIST
45822: PUSH
45823: LD_INT 1
45825: PUSH
45826: LD_INT 0
45828: PUSH
45829: EMPTY
45830: LIST
45831: LIST
45832: PUSH
45833: LD_INT 1
45835: PUSH
45836: LD_INT 1
45838: PUSH
45839: EMPTY
45840: LIST
45841: LIST
45842: PUSH
45843: LD_INT 0
45845: PUSH
45846: LD_INT 1
45848: PUSH
45849: EMPTY
45850: LIST
45851: LIST
45852: PUSH
45853: LD_INT 1
45855: NEG
45856: PUSH
45857: LD_INT 0
45859: PUSH
45860: EMPTY
45861: LIST
45862: LIST
45863: PUSH
45864: LD_INT 1
45866: NEG
45867: PUSH
45868: LD_INT 1
45870: NEG
45871: PUSH
45872: EMPTY
45873: LIST
45874: LIST
45875: PUSH
45876: LD_INT 1
45878: NEG
45879: PUSH
45880: LD_INT 2
45882: NEG
45883: PUSH
45884: EMPTY
45885: LIST
45886: LIST
45887: PUSH
45888: LD_INT 1
45890: PUSH
45891: LD_INT 2
45893: PUSH
45894: EMPTY
45895: LIST
45896: LIST
45897: PUSH
45898: EMPTY
45899: LIST
45900: LIST
45901: LIST
45902: LIST
45903: LIST
45904: LIST
45905: LIST
45906: LIST
45907: LIST
45908: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
45909: LD_ADDR_VAR 0 37
45913: PUSH
45914: LD_INT 0
45916: PUSH
45917: LD_INT 0
45919: PUSH
45920: EMPTY
45921: LIST
45922: LIST
45923: PUSH
45924: LD_INT 0
45926: PUSH
45927: LD_INT 1
45929: NEG
45930: PUSH
45931: EMPTY
45932: LIST
45933: LIST
45934: PUSH
45935: LD_INT 1
45937: PUSH
45938: LD_INT 0
45940: PUSH
45941: EMPTY
45942: LIST
45943: LIST
45944: PUSH
45945: LD_INT 1
45947: PUSH
45948: LD_INT 1
45950: PUSH
45951: EMPTY
45952: LIST
45953: LIST
45954: PUSH
45955: LD_INT 0
45957: PUSH
45958: LD_INT 1
45960: PUSH
45961: EMPTY
45962: LIST
45963: LIST
45964: PUSH
45965: LD_INT 1
45967: NEG
45968: PUSH
45969: LD_INT 0
45971: PUSH
45972: EMPTY
45973: LIST
45974: LIST
45975: PUSH
45976: LD_INT 1
45978: NEG
45979: PUSH
45980: LD_INT 1
45982: NEG
45983: PUSH
45984: EMPTY
45985: LIST
45986: LIST
45987: PUSH
45988: LD_INT 1
45990: PUSH
45991: LD_INT 1
45993: NEG
45994: PUSH
45995: EMPTY
45996: LIST
45997: LIST
45998: PUSH
45999: LD_INT 1
46001: NEG
46002: PUSH
46003: LD_INT 1
46005: PUSH
46006: EMPTY
46007: LIST
46008: LIST
46009: PUSH
46010: EMPTY
46011: LIST
46012: LIST
46013: LIST
46014: LIST
46015: LIST
46016: LIST
46017: LIST
46018: LIST
46019: LIST
46020: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
46021: LD_ADDR_VAR 0 38
46025: PUSH
46026: LD_INT 0
46028: PUSH
46029: LD_INT 0
46031: PUSH
46032: EMPTY
46033: LIST
46034: LIST
46035: PUSH
46036: LD_INT 0
46038: PUSH
46039: LD_INT 1
46041: NEG
46042: PUSH
46043: EMPTY
46044: LIST
46045: LIST
46046: PUSH
46047: LD_INT 1
46049: PUSH
46050: LD_INT 0
46052: PUSH
46053: EMPTY
46054: LIST
46055: LIST
46056: PUSH
46057: LD_INT 1
46059: PUSH
46060: LD_INT 1
46062: PUSH
46063: EMPTY
46064: LIST
46065: LIST
46066: PUSH
46067: LD_INT 0
46069: PUSH
46070: LD_INT 1
46072: PUSH
46073: EMPTY
46074: LIST
46075: LIST
46076: PUSH
46077: LD_INT 1
46079: NEG
46080: PUSH
46081: LD_INT 0
46083: PUSH
46084: EMPTY
46085: LIST
46086: LIST
46087: PUSH
46088: LD_INT 1
46090: NEG
46091: PUSH
46092: LD_INT 1
46094: NEG
46095: PUSH
46096: EMPTY
46097: LIST
46098: LIST
46099: PUSH
46100: LD_INT 2
46102: PUSH
46103: LD_INT 1
46105: PUSH
46106: EMPTY
46107: LIST
46108: LIST
46109: PUSH
46110: LD_INT 2
46112: NEG
46113: PUSH
46114: LD_INT 1
46116: NEG
46117: PUSH
46118: EMPTY
46119: LIST
46120: LIST
46121: PUSH
46122: EMPTY
46123: LIST
46124: LIST
46125: LIST
46126: LIST
46127: LIST
46128: LIST
46129: LIST
46130: LIST
46131: LIST
46132: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
46133: LD_ADDR_VAR 0 39
46137: PUSH
46138: LD_INT 0
46140: PUSH
46141: LD_INT 0
46143: PUSH
46144: EMPTY
46145: LIST
46146: LIST
46147: PUSH
46148: LD_INT 0
46150: PUSH
46151: LD_INT 1
46153: NEG
46154: PUSH
46155: EMPTY
46156: LIST
46157: LIST
46158: PUSH
46159: LD_INT 1
46161: PUSH
46162: LD_INT 0
46164: PUSH
46165: EMPTY
46166: LIST
46167: LIST
46168: PUSH
46169: LD_INT 1
46171: PUSH
46172: LD_INT 1
46174: PUSH
46175: EMPTY
46176: LIST
46177: LIST
46178: PUSH
46179: LD_INT 0
46181: PUSH
46182: LD_INT 1
46184: PUSH
46185: EMPTY
46186: LIST
46187: LIST
46188: PUSH
46189: LD_INT 1
46191: NEG
46192: PUSH
46193: LD_INT 0
46195: PUSH
46196: EMPTY
46197: LIST
46198: LIST
46199: PUSH
46200: LD_INT 1
46202: NEG
46203: PUSH
46204: LD_INT 1
46206: NEG
46207: PUSH
46208: EMPTY
46209: LIST
46210: LIST
46211: PUSH
46212: LD_INT 1
46214: NEG
46215: PUSH
46216: LD_INT 2
46218: NEG
46219: PUSH
46220: EMPTY
46221: LIST
46222: LIST
46223: PUSH
46224: LD_INT 1
46226: PUSH
46227: LD_INT 2
46229: PUSH
46230: EMPTY
46231: LIST
46232: LIST
46233: PUSH
46234: EMPTY
46235: LIST
46236: LIST
46237: LIST
46238: LIST
46239: LIST
46240: LIST
46241: LIST
46242: LIST
46243: LIST
46244: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
46245: LD_ADDR_VAR 0 40
46249: PUSH
46250: LD_INT 0
46252: PUSH
46253: LD_INT 0
46255: PUSH
46256: EMPTY
46257: LIST
46258: LIST
46259: PUSH
46260: LD_INT 0
46262: PUSH
46263: LD_INT 1
46265: NEG
46266: PUSH
46267: EMPTY
46268: LIST
46269: LIST
46270: PUSH
46271: LD_INT 1
46273: PUSH
46274: LD_INT 0
46276: PUSH
46277: EMPTY
46278: LIST
46279: LIST
46280: PUSH
46281: LD_INT 1
46283: PUSH
46284: LD_INT 1
46286: PUSH
46287: EMPTY
46288: LIST
46289: LIST
46290: PUSH
46291: LD_INT 0
46293: PUSH
46294: LD_INT 1
46296: PUSH
46297: EMPTY
46298: LIST
46299: LIST
46300: PUSH
46301: LD_INT 1
46303: NEG
46304: PUSH
46305: LD_INT 0
46307: PUSH
46308: EMPTY
46309: LIST
46310: LIST
46311: PUSH
46312: LD_INT 1
46314: NEG
46315: PUSH
46316: LD_INT 1
46318: NEG
46319: PUSH
46320: EMPTY
46321: LIST
46322: LIST
46323: PUSH
46324: LD_INT 1
46326: PUSH
46327: LD_INT 1
46329: NEG
46330: PUSH
46331: EMPTY
46332: LIST
46333: LIST
46334: PUSH
46335: LD_INT 1
46337: NEG
46338: PUSH
46339: LD_INT 1
46341: PUSH
46342: EMPTY
46343: LIST
46344: LIST
46345: PUSH
46346: EMPTY
46347: LIST
46348: LIST
46349: LIST
46350: LIST
46351: LIST
46352: LIST
46353: LIST
46354: LIST
46355: LIST
46356: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46357: LD_ADDR_VAR 0 41
46361: PUSH
46362: LD_INT 0
46364: PUSH
46365: LD_INT 0
46367: PUSH
46368: EMPTY
46369: LIST
46370: LIST
46371: PUSH
46372: LD_INT 0
46374: PUSH
46375: LD_INT 1
46377: NEG
46378: PUSH
46379: EMPTY
46380: LIST
46381: LIST
46382: PUSH
46383: LD_INT 1
46385: PUSH
46386: LD_INT 0
46388: PUSH
46389: EMPTY
46390: LIST
46391: LIST
46392: PUSH
46393: LD_INT 1
46395: PUSH
46396: LD_INT 1
46398: PUSH
46399: EMPTY
46400: LIST
46401: LIST
46402: PUSH
46403: LD_INT 0
46405: PUSH
46406: LD_INT 1
46408: PUSH
46409: EMPTY
46410: LIST
46411: LIST
46412: PUSH
46413: LD_INT 1
46415: NEG
46416: PUSH
46417: LD_INT 0
46419: PUSH
46420: EMPTY
46421: LIST
46422: LIST
46423: PUSH
46424: LD_INT 1
46426: NEG
46427: PUSH
46428: LD_INT 1
46430: NEG
46431: PUSH
46432: EMPTY
46433: LIST
46434: LIST
46435: PUSH
46436: LD_INT 1
46438: NEG
46439: PUSH
46440: LD_INT 2
46442: NEG
46443: PUSH
46444: EMPTY
46445: LIST
46446: LIST
46447: PUSH
46448: LD_INT 1
46450: PUSH
46451: LD_INT 1
46453: NEG
46454: PUSH
46455: EMPTY
46456: LIST
46457: LIST
46458: PUSH
46459: LD_INT 2
46461: PUSH
46462: LD_INT 0
46464: PUSH
46465: EMPTY
46466: LIST
46467: LIST
46468: PUSH
46469: LD_INT 2
46471: PUSH
46472: LD_INT 1
46474: PUSH
46475: EMPTY
46476: LIST
46477: LIST
46478: PUSH
46479: LD_INT 2
46481: PUSH
46482: LD_INT 2
46484: PUSH
46485: EMPTY
46486: LIST
46487: LIST
46488: PUSH
46489: LD_INT 1
46491: PUSH
46492: LD_INT 2
46494: PUSH
46495: EMPTY
46496: LIST
46497: LIST
46498: PUSH
46499: LD_INT 1
46501: NEG
46502: PUSH
46503: LD_INT 1
46505: PUSH
46506: EMPTY
46507: LIST
46508: LIST
46509: PUSH
46510: LD_INT 2
46512: NEG
46513: PUSH
46514: LD_INT 0
46516: PUSH
46517: EMPTY
46518: LIST
46519: LIST
46520: PUSH
46521: LD_INT 2
46523: NEG
46524: PUSH
46525: LD_INT 1
46527: NEG
46528: PUSH
46529: EMPTY
46530: LIST
46531: LIST
46532: PUSH
46533: LD_INT 2
46535: NEG
46536: PUSH
46537: LD_INT 2
46539: NEG
46540: PUSH
46541: EMPTY
46542: LIST
46543: LIST
46544: PUSH
46545: LD_INT 2
46547: NEG
46548: PUSH
46549: LD_INT 3
46551: NEG
46552: PUSH
46553: EMPTY
46554: LIST
46555: LIST
46556: PUSH
46557: LD_INT 2
46559: PUSH
46560: LD_INT 1
46562: NEG
46563: PUSH
46564: EMPTY
46565: LIST
46566: LIST
46567: PUSH
46568: LD_INT 3
46570: PUSH
46571: LD_INT 0
46573: PUSH
46574: EMPTY
46575: LIST
46576: LIST
46577: PUSH
46578: LD_INT 3
46580: PUSH
46581: LD_INT 1
46583: PUSH
46584: EMPTY
46585: LIST
46586: LIST
46587: PUSH
46588: LD_INT 3
46590: PUSH
46591: LD_INT 2
46593: PUSH
46594: EMPTY
46595: LIST
46596: LIST
46597: PUSH
46598: LD_INT 3
46600: PUSH
46601: LD_INT 3
46603: PUSH
46604: EMPTY
46605: LIST
46606: LIST
46607: PUSH
46608: LD_INT 2
46610: PUSH
46611: LD_INT 3
46613: PUSH
46614: EMPTY
46615: LIST
46616: LIST
46617: PUSH
46618: LD_INT 2
46620: NEG
46621: PUSH
46622: LD_INT 1
46624: PUSH
46625: EMPTY
46626: LIST
46627: LIST
46628: PUSH
46629: LD_INT 3
46631: NEG
46632: PUSH
46633: LD_INT 0
46635: PUSH
46636: EMPTY
46637: LIST
46638: LIST
46639: PUSH
46640: LD_INT 3
46642: NEG
46643: PUSH
46644: LD_INT 1
46646: NEG
46647: PUSH
46648: EMPTY
46649: LIST
46650: LIST
46651: PUSH
46652: LD_INT 3
46654: NEG
46655: PUSH
46656: LD_INT 2
46658: NEG
46659: PUSH
46660: EMPTY
46661: LIST
46662: LIST
46663: PUSH
46664: LD_INT 3
46666: NEG
46667: PUSH
46668: LD_INT 3
46670: NEG
46671: PUSH
46672: EMPTY
46673: LIST
46674: LIST
46675: PUSH
46676: EMPTY
46677: LIST
46678: LIST
46679: LIST
46680: LIST
46681: LIST
46682: LIST
46683: LIST
46684: LIST
46685: LIST
46686: LIST
46687: LIST
46688: LIST
46689: LIST
46690: LIST
46691: LIST
46692: LIST
46693: LIST
46694: LIST
46695: LIST
46696: LIST
46697: LIST
46698: LIST
46699: LIST
46700: LIST
46701: LIST
46702: LIST
46703: LIST
46704: LIST
46705: LIST
46706: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46707: LD_ADDR_VAR 0 42
46711: PUSH
46712: LD_INT 0
46714: PUSH
46715: LD_INT 0
46717: PUSH
46718: EMPTY
46719: LIST
46720: LIST
46721: PUSH
46722: LD_INT 0
46724: PUSH
46725: LD_INT 1
46727: NEG
46728: PUSH
46729: EMPTY
46730: LIST
46731: LIST
46732: PUSH
46733: LD_INT 1
46735: PUSH
46736: LD_INT 0
46738: PUSH
46739: EMPTY
46740: LIST
46741: LIST
46742: PUSH
46743: LD_INT 1
46745: PUSH
46746: LD_INT 1
46748: PUSH
46749: EMPTY
46750: LIST
46751: LIST
46752: PUSH
46753: LD_INT 0
46755: PUSH
46756: LD_INT 1
46758: PUSH
46759: EMPTY
46760: LIST
46761: LIST
46762: PUSH
46763: LD_INT 1
46765: NEG
46766: PUSH
46767: LD_INT 0
46769: PUSH
46770: EMPTY
46771: LIST
46772: LIST
46773: PUSH
46774: LD_INT 1
46776: NEG
46777: PUSH
46778: LD_INT 1
46780: NEG
46781: PUSH
46782: EMPTY
46783: LIST
46784: LIST
46785: PUSH
46786: LD_INT 1
46788: NEG
46789: PUSH
46790: LD_INT 2
46792: NEG
46793: PUSH
46794: EMPTY
46795: LIST
46796: LIST
46797: PUSH
46798: LD_INT 0
46800: PUSH
46801: LD_INT 2
46803: NEG
46804: PUSH
46805: EMPTY
46806: LIST
46807: LIST
46808: PUSH
46809: LD_INT 1
46811: PUSH
46812: LD_INT 1
46814: NEG
46815: PUSH
46816: EMPTY
46817: LIST
46818: LIST
46819: PUSH
46820: LD_INT 2
46822: PUSH
46823: LD_INT 1
46825: PUSH
46826: EMPTY
46827: LIST
46828: LIST
46829: PUSH
46830: LD_INT 2
46832: PUSH
46833: LD_INT 2
46835: PUSH
46836: EMPTY
46837: LIST
46838: LIST
46839: PUSH
46840: LD_INT 1
46842: PUSH
46843: LD_INT 2
46845: PUSH
46846: EMPTY
46847: LIST
46848: LIST
46849: PUSH
46850: LD_INT 0
46852: PUSH
46853: LD_INT 2
46855: PUSH
46856: EMPTY
46857: LIST
46858: LIST
46859: PUSH
46860: LD_INT 1
46862: NEG
46863: PUSH
46864: LD_INT 1
46866: PUSH
46867: EMPTY
46868: LIST
46869: LIST
46870: PUSH
46871: LD_INT 2
46873: NEG
46874: PUSH
46875: LD_INT 1
46877: NEG
46878: PUSH
46879: EMPTY
46880: LIST
46881: LIST
46882: PUSH
46883: LD_INT 2
46885: NEG
46886: PUSH
46887: LD_INT 2
46889: NEG
46890: PUSH
46891: EMPTY
46892: LIST
46893: LIST
46894: PUSH
46895: LD_INT 2
46897: NEG
46898: PUSH
46899: LD_INT 3
46901: NEG
46902: PUSH
46903: EMPTY
46904: LIST
46905: LIST
46906: PUSH
46907: LD_INT 1
46909: NEG
46910: PUSH
46911: LD_INT 3
46913: NEG
46914: PUSH
46915: EMPTY
46916: LIST
46917: LIST
46918: PUSH
46919: LD_INT 0
46921: PUSH
46922: LD_INT 3
46924: NEG
46925: PUSH
46926: EMPTY
46927: LIST
46928: LIST
46929: PUSH
46930: LD_INT 1
46932: PUSH
46933: LD_INT 2
46935: NEG
46936: PUSH
46937: EMPTY
46938: LIST
46939: LIST
46940: PUSH
46941: LD_INT 3
46943: PUSH
46944: LD_INT 2
46946: PUSH
46947: EMPTY
46948: LIST
46949: LIST
46950: PUSH
46951: LD_INT 3
46953: PUSH
46954: LD_INT 3
46956: PUSH
46957: EMPTY
46958: LIST
46959: LIST
46960: PUSH
46961: LD_INT 2
46963: PUSH
46964: LD_INT 3
46966: PUSH
46967: EMPTY
46968: LIST
46969: LIST
46970: PUSH
46971: LD_INT 1
46973: PUSH
46974: LD_INT 3
46976: PUSH
46977: EMPTY
46978: LIST
46979: LIST
46980: PUSH
46981: LD_INT 0
46983: PUSH
46984: LD_INT 3
46986: PUSH
46987: EMPTY
46988: LIST
46989: LIST
46990: PUSH
46991: LD_INT 1
46993: NEG
46994: PUSH
46995: LD_INT 2
46997: PUSH
46998: EMPTY
46999: LIST
47000: LIST
47001: PUSH
47002: LD_INT 3
47004: NEG
47005: PUSH
47006: LD_INT 2
47008: NEG
47009: PUSH
47010: EMPTY
47011: LIST
47012: LIST
47013: PUSH
47014: LD_INT 3
47016: NEG
47017: PUSH
47018: LD_INT 3
47020: NEG
47021: PUSH
47022: EMPTY
47023: LIST
47024: LIST
47025: PUSH
47026: EMPTY
47027: LIST
47028: LIST
47029: LIST
47030: LIST
47031: LIST
47032: LIST
47033: LIST
47034: LIST
47035: LIST
47036: LIST
47037: LIST
47038: LIST
47039: LIST
47040: LIST
47041: LIST
47042: LIST
47043: LIST
47044: LIST
47045: LIST
47046: LIST
47047: LIST
47048: LIST
47049: LIST
47050: LIST
47051: LIST
47052: LIST
47053: LIST
47054: LIST
47055: LIST
47056: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47057: LD_ADDR_VAR 0 43
47061: PUSH
47062: LD_INT 0
47064: PUSH
47065: LD_INT 0
47067: PUSH
47068: EMPTY
47069: LIST
47070: LIST
47071: PUSH
47072: LD_INT 0
47074: PUSH
47075: LD_INT 1
47077: NEG
47078: PUSH
47079: EMPTY
47080: LIST
47081: LIST
47082: PUSH
47083: LD_INT 1
47085: PUSH
47086: LD_INT 0
47088: PUSH
47089: EMPTY
47090: LIST
47091: LIST
47092: PUSH
47093: LD_INT 1
47095: PUSH
47096: LD_INT 1
47098: PUSH
47099: EMPTY
47100: LIST
47101: LIST
47102: PUSH
47103: LD_INT 0
47105: PUSH
47106: LD_INT 1
47108: PUSH
47109: EMPTY
47110: LIST
47111: LIST
47112: PUSH
47113: LD_INT 1
47115: NEG
47116: PUSH
47117: LD_INT 0
47119: PUSH
47120: EMPTY
47121: LIST
47122: LIST
47123: PUSH
47124: LD_INT 1
47126: NEG
47127: PUSH
47128: LD_INT 1
47130: NEG
47131: PUSH
47132: EMPTY
47133: LIST
47134: LIST
47135: PUSH
47136: LD_INT 1
47138: NEG
47139: PUSH
47140: LD_INT 2
47142: NEG
47143: PUSH
47144: EMPTY
47145: LIST
47146: LIST
47147: PUSH
47148: LD_INT 0
47150: PUSH
47151: LD_INT 2
47153: NEG
47154: PUSH
47155: EMPTY
47156: LIST
47157: LIST
47158: PUSH
47159: LD_INT 1
47161: PUSH
47162: LD_INT 1
47164: NEG
47165: PUSH
47166: EMPTY
47167: LIST
47168: LIST
47169: PUSH
47170: LD_INT 2
47172: PUSH
47173: LD_INT 0
47175: PUSH
47176: EMPTY
47177: LIST
47178: LIST
47179: PUSH
47180: LD_INT 2
47182: PUSH
47183: LD_INT 1
47185: PUSH
47186: EMPTY
47187: LIST
47188: LIST
47189: PUSH
47190: LD_INT 1
47192: PUSH
47193: LD_INT 2
47195: PUSH
47196: EMPTY
47197: LIST
47198: LIST
47199: PUSH
47200: LD_INT 0
47202: PUSH
47203: LD_INT 2
47205: PUSH
47206: EMPTY
47207: LIST
47208: LIST
47209: PUSH
47210: LD_INT 1
47212: NEG
47213: PUSH
47214: LD_INT 1
47216: PUSH
47217: EMPTY
47218: LIST
47219: LIST
47220: PUSH
47221: LD_INT 2
47223: NEG
47224: PUSH
47225: LD_INT 0
47227: PUSH
47228: EMPTY
47229: LIST
47230: LIST
47231: PUSH
47232: LD_INT 2
47234: NEG
47235: PUSH
47236: LD_INT 1
47238: NEG
47239: PUSH
47240: EMPTY
47241: LIST
47242: LIST
47243: PUSH
47244: LD_INT 1
47246: NEG
47247: PUSH
47248: LD_INT 3
47250: NEG
47251: PUSH
47252: EMPTY
47253: LIST
47254: LIST
47255: PUSH
47256: LD_INT 0
47258: PUSH
47259: LD_INT 3
47261: NEG
47262: PUSH
47263: EMPTY
47264: LIST
47265: LIST
47266: PUSH
47267: LD_INT 1
47269: PUSH
47270: LD_INT 2
47272: NEG
47273: PUSH
47274: EMPTY
47275: LIST
47276: LIST
47277: PUSH
47278: LD_INT 2
47280: PUSH
47281: LD_INT 1
47283: NEG
47284: PUSH
47285: EMPTY
47286: LIST
47287: LIST
47288: PUSH
47289: LD_INT 3
47291: PUSH
47292: LD_INT 0
47294: PUSH
47295: EMPTY
47296: LIST
47297: LIST
47298: PUSH
47299: LD_INT 3
47301: PUSH
47302: LD_INT 1
47304: PUSH
47305: EMPTY
47306: LIST
47307: LIST
47308: PUSH
47309: LD_INT 1
47311: PUSH
47312: LD_INT 3
47314: PUSH
47315: EMPTY
47316: LIST
47317: LIST
47318: PUSH
47319: LD_INT 0
47321: PUSH
47322: LD_INT 3
47324: PUSH
47325: EMPTY
47326: LIST
47327: LIST
47328: PUSH
47329: LD_INT 1
47331: NEG
47332: PUSH
47333: LD_INT 2
47335: PUSH
47336: EMPTY
47337: LIST
47338: LIST
47339: PUSH
47340: LD_INT 2
47342: NEG
47343: PUSH
47344: LD_INT 1
47346: PUSH
47347: EMPTY
47348: LIST
47349: LIST
47350: PUSH
47351: LD_INT 3
47353: NEG
47354: PUSH
47355: LD_INT 0
47357: PUSH
47358: EMPTY
47359: LIST
47360: LIST
47361: PUSH
47362: LD_INT 3
47364: NEG
47365: PUSH
47366: LD_INT 1
47368: NEG
47369: PUSH
47370: EMPTY
47371: LIST
47372: LIST
47373: PUSH
47374: EMPTY
47375: LIST
47376: LIST
47377: LIST
47378: LIST
47379: LIST
47380: LIST
47381: LIST
47382: LIST
47383: LIST
47384: LIST
47385: LIST
47386: LIST
47387: LIST
47388: LIST
47389: LIST
47390: LIST
47391: LIST
47392: LIST
47393: LIST
47394: LIST
47395: LIST
47396: LIST
47397: LIST
47398: LIST
47399: LIST
47400: LIST
47401: LIST
47402: LIST
47403: LIST
47404: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47405: LD_ADDR_VAR 0 44
47409: PUSH
47410: LD_INT 0
47412: PUSH
47413: LD_INT 0
47415: PUSH
47416: EMPTY
47417: LIST
47418: LIST
47419: PUSH
47420: LD_INT 0
47422: PUSH
47423: LD_INT 1
47425: NEG
47426: PUSH
47427: EMPTY
47428: LIST
47429: LIST
47430: PUSH
47431: LD_INT 1
47433: PUSH
47434: LD_INT 0
47436: PUSH
47437: EMPTY
47438: LIST
47439: LIST
47440: PUSH
47441: LD_INT 1
47443: PUSH
47444: LD_INT 1
47446: PUSH
47447: EMPTY
47448: LIST
47449: LIST
47450: PUSH
47451: LD_INT 0
47453: PUSH
47454: LD_INT 1
47456: PUSH
47457: EMPTY
47458: LIST
47459: LIST
47460: PUSH
47461: LD_INT 1
47463: NEG
47464: PUSH
47465: LD_INT 0
47467: PUSH
47468: EMPTY
47469: LIST
47470: LIST
47471: PUSH
47472: LD_INT 1
47474: NEG
47475: PUSH
47476: LD_INT 1
47478: NEG
47479: PUSH
47480: EMPTY
47481: LIST
47482: LIST
47483: PUSH
47484: LD_INT 1
47486: NEG
47487: PUSH
47488: LD_INT 2
47490: NEG
47491: PUSH
47492: EMPTY
47493: LIST
47494: LIST
47495: PUSH
47496: LD_INT 1
47498: PUSH
47499: LD_INT 1
47501: NEG
47502: PUSH
47503: EMPTY
47504: LIST
47505: LIST
47506: PUSH
47507: LD_INT 2
47509: PUSH
47510: LD_INT 0
47512: PUSH
47513: EMPTY
47514: LIST
47515: LIST
47516: PUSH
47517: LD_INT 2
47519: PUSH
47520: LD_INT 1
47522: PUSH
47523: EMPTY
47524: LIST
47525: LIST
47526: PUSH
47527: LD_INT 2
47529: PUSH
47530: LD_INT 2
47532: PUSH
47533: EMPTY
47534: LIST
47535: LIST
47536: PUSH
47537: LD_INT 1
47539: PUSH
47540: LD_INT 2
47542: PUSH
47543: EMPTY
47544: LIST
47545: LIST
47546: PUSH
47547: LD_INT 1
47549: NEG
47550: PUSH
47551: LD_INT 1
47553: PUSH
47554: EMPTY
47555: LIST
47556: LIST
47557: PUSH
47558: LD_INT 2
47560: NEG
47561: PUSH
47562: LD_INT 0
47564: PUSH
47565: EMPTY
47566: LIST
47567: LIST
47568: PUSH
47569: LD_INT 2
47571: NEG
47572: PUSH
47573: LD_INT 1
47575: NEG
47576: PUSH
47577: EMPTY
47578: LIST
47579: LIST
47580: PUSH
47581: LD_INT 2
47583: NEG
47584: PUSH
47585: LD_INT 2
47587: NEG
47588: PUSH
47589: EMPTY
47590: LIST
47591: LIST
47592: PUSH
47593: LD_INT 2
47595: NEG
47596: PUSH
47597: LD_INT 3
47599: NEG
47600: PUSH
47601: EMPTY
47602: LIST
47603: LIST
47604: PUSH
47605: LD_INT 2
47607: PUSH
47608: LD_INT 1
47610: NEG
47611: PUSH
47612: EMPTY
47613: LIST
47614: LIST
47615: PUSH
47616: LD_INT 3
47618: PUSH
47619: LD_INT 0
47621: PUSH
47622: EMPTY
47623: LIST
47624: LIST
47625: PUSH
47626: LD_INT 3
47628: PUSH
47629: LD_INT 1
47631: PUSH
47632: EMPTY
47633: LIST
47634: LIST
47635: PUSH
47636: LD_INT 3
47638: PUSH
47639: LD_INT 2
47641: PUSH
47642: EMPTY
47643: LIST
47644: LIST
47645: PUSH
47646: LD_INT 3
47648: PUSH
47649: LD_INT 3
47651: PUSH
47652: EMPTY
47653: LIST
47654: LIST
47655: PUSH
47656: LD_INT 2
47658: PUSH
47659: LD_INT 3
47661: PUSH
47662: EMPTY
47663: LIST
47664: LIST
47665: PUSH
47666: LD_INT 2
47668: NEG
47669: PUSH
47670: LD_INT 1
47672: PUSH
47673: EMPTY
47674: LIST
47675: LIST
47676: PUSH
47677: LD_INT 3
47679: NEG
47680: PUSH
47681: LD_INT 0
47683: PUSH
47684: EMPTY
47685: LIST
47686: LIST
47687: PUSH
47688: LD_INT 3
47690: NEG
47691: PUSH
47692: LD_INT 1
47694: NEG
47695: PUSH
47696: EMPTY
47697: LIST
47698: LIST
47699: PUSH
47700: LD_INT 3
47702: NEG
47703: PUSH
47704: LD_INT 2
47706: NEG
47707: PUSH
47708: EMPTY
47709: LIST
47710: LIST
47711: PUSH
47712: LD_INT 3
47714: NEG
47715: PUSH
47716: LD_INT 3
47718: NEG
47719: PUSH
47720: EMPTY
47721: LIST
47722: LIST
47723: PUSH
47724: EMPTY
47725: LIST
47726: LIST
47727: LIST
47728: LIST
47729: LIST
47730: LIST
47731: LIST
47732: LIST
47733: LIST
47734: LIST
47735: LIST
47736: LIST
47737: LIST
47738: LIST
47739: LIST
47740: LIST
47741: LIST
47742: LIST
47743: LIST
47744: LIST
47745: LIST
47746: LIST
47747: LIST
47748: LIST
47749: LIST
47750: LIST
47751: LIST
47752: LIST
47753: LIST
47754: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47755: LD_ADDR_VAR 0 45
47759: PUSH
47760: LD_INT 0
47762: PUSH
47763: LD_INT 0
47765: PUSH
47766: EMPTY
47767: LIST
47768: LIST
47769: PUSH
47770: LD_INT 0
47772: PUSH
47773: LD_INT 1
47775: NEG
47776: PUSH
47777: EMPTY
47778: LIST
47779: LIST
47780: PUSH
47781: LD_INT 1
47783: PUSH
47784: LD_INT 0
47786: PUSH
47787: EMPTY
47788: LIST
47789: LIST
47790: PUSH
47791: LD_INT 1
47793: PUSH
47794: LD_INT 1
47796: PUSH
47797: EMPTY
47798: LIST
47799: LIST
47800: PUSH
47801: LD_INT 0
47803: PUSH
47804: LD_INT 1
47806: PUSH
47807: EMPTY
47808: LIST
47809: LIST
47810: PUSH
47811: LD_INT 1
47813: NEG
47814: PUSH
47815: LD_INT 0
47817: PUSH
47818: EMPTY
47819: LIST
47820: LIST
47821: PUSH
47822: LD_INT 1
47824: NEG
47825: PUSH
47826: LD_INT 1
47828: NEG
47829: PUSH
47830: EMPTY
47831: LIST
47832: LIST
47833: PUSH
47834: LD_INT 1
47836: NEG
47837: PUSH
47838: LD_INT 2
47840: NEG
47841: PUSH
47842: EMPTY
47843: LIST
47844: LIST
47845: PUSH
47846: LD_INT 0
47848: PUSH
47849: LD_INT 2
47851: NEG
47852: PUSH
47853: EMPTY
47854: LIST
47855: LIST
47856: PUSH
47857: LD_INT 1
47859: PUSH
47860: LD_INT 1
47862: NEG
47863: PUSH
47864: EMPTY
47865: LIST
47866: LIST
47867: PUSH
47868: LD_INT 2
47870: PUSH
47871: LD_INT 1
47873: PUSH
47874: EMPTY
47875: LIST
47876: LIST
47877: PUSH
47878: LD_INT 2
47880: PUSH
47881: LD_INT 2
47883: PUSH
47884: EMPTY
47885: LIST
47886: LIST
47887: PUSH
47888: LD_INT 1
47890: PUSH
47891: LD_INT 2
47893: PUSH
47894: EMPTY
47895: LIST
47896: LIST
47897: PUSH
47898: LD_INT 0
47900: PUSH
47901: LD_INT 2
47903: PUSH
47904: EMPTY
47905: LIST
47906: LIST
47907: PUSH
47908: LD_INT 1
47910: NEG
47911: PUSH
47912: LD_INT 1
47914: PUSH
47915: EMPTY
47916: LIST
47917: LIST
47918: PUSH
47919: LD_INT 2
47921: NEG
47922: PUSH
47923: LD_INT 1
47925: NEG
47926: PUSH
47927: EMPTY
47928: LIST
47929: LIST
47930: PUSH
47931: LD_INT 2
47933: NEG
47934: PUSH
47935: LD_INT 2
47937: NEG
47938: PUSH
47939: EMPTY
47940: LIST
47941: LIST
47942: PUSH
47943: LD_INT 2
47945: NEG
47946: PUSH
47947: LD_INT 3
47949: NEG
47950: PUSH
47951: EMPTY
47952: LIST
47953: LIST
47954: PUSH
47955: LD_INT 1
47957: NEG
47958: PUSH
47959: LD_INT 3
47961: NEG
47962: PUSH
47963: EMPTY
47964: LIST
47965: LIST
47966: PUSH
47967: LD_INT 0
47969: PUSH
47970: LD_INT 3
47972: NEG
47973: PUSH
47974: EMPTY
47975: LIST
47976: LIST
47977: PUSH
47978: LD_INT 1
47980: PUSH
47981: LD_INT 2
47983: NEG
47984: PUSH
47985: EMPTY
47986: LIST
47987: LIST
47988: PUSH
47989: LD_INT 3
47991: PUSH
47992: LD_INT 2
47994: PUSH
47995: EMPTY
47996: LIST
47997: LIST
47998: PUSH
47999: LD_INT 3
48001: PUSH
48002: LD_INT 3
48004: PUSH
48005: EMPTY
48006: LIST
48007: LIST
48008: PUSH
48009: LD_INT 2
48011: PUSH
48012: LD_INT 3
48014: PUSH
48015: EMPTY
48016: LIST
48017: LIST
48018: PUSH
48019: LD_INT 1
48021: PUSH
48022: LD_INT 3
48024: PUSH
48025: EMPTY
48026: LIST
48027: LIST
48028: PUSH
48029: LD_INT 0
48031: PUSH
48032: LD_INT 3
48034: PUSH
48035: EMPTY
48036: LIST
48037: LIST
48038: PUSH
48039: LD_INT 1
48041: NEG
48042: PUSH
48043: LD_INT 2
48045: PUSH
48046: EMPTY
48047: LIST
48048: LIST
48049: PUSH
48050: LD_INT 3
48052: NEG
48053: PUSH
48054: LD_INT 2
48056: NEG
48057: PUSH
48058: EMPTY
48059: LIST
48060: LIST
48061: PUSH
48062: LD_INT 3
48064: NEG
48065: PUSH
48066: LD_INT 3
48068: NEG
48069: PUSH
48070: EMPTY
48071: LIST
48072: LIST
48073: PUSH
48074: EMPTY
48075: LIST
48076: LIST
48077: LIST
48078: LIST
48079: LIST
48080: LIST
48081: LIST
48082: LIST
48083: LIST
48084: LIST
48085: LIST
48086: LIST
48087: LIST
48088: LIST
48089: LIST
48090: LIST
48091: LIST
48092: LIST
48093: LIST
48094: LIST
48095: LIST
48096: LIST
48097: LIST
48098: LIST
48099: LIST
48100: LIST
48101: LIST
48102: LIST
48103: LIST
48104: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48105: LD_ADDR_VAR 0 46
48109: PUSH
48110: LD_INT 0
48112: PUSH
48113: LD_INT 0
48115: PUSH
48116: EMPTY
48117: LIST
48118: LIST
48119: PUSH
48120: LD_INT 0
48122: PUSH
48123: LD_INT 1
48125: NEG
48126: PUSH
48127: EMPTY
48128: LIST
48129: LIST
48130: PUSH
48131: LD_INT 1
48133: PUSH
48134: LD_INT 0
48136: PUSH
48137: EMPTY
48138: LIST
48139: LIST
48140: PUSH
48141: LD_INT 1
48143: PUSH
48144: LD_INT 1
48146: PUSH
48147: EMPTY
48148: LIST
48149: LIST
48150: PUSH
48151: LD_INT 0
48153: PUSH
48154: LD_INT 1
48156: PUSH
48157: EMPTY
48158: LIST
48159: LIST
48160: PUSH
48161: LD_INT 1
48163: NEG
48164: PUSH
48165: LD_INT 0
48167: PUSH
48168: EMPTY
48169: LIST
48170: LIST
48171: PUSH
48172: LD_INT 1
48174: NEG
48175: PUSH
48176: LD_INT 1
48178: NEG
48179: PUSH
48180: EMPTY
48181: LIST
48182: LIST
48183: PUSH
48184: LD_INT 1
48186: NEG
48187: PUSH
48188: LD_INT 2
48190: NEG
48191: PUSH
48192: EMPTY
48193: LIST
48194: LIST
48195: PUSH
48196: LD_INT 0
48198: PUSH
48199: LD_INT 2
48201: NEG
48202: PUSH
48203: EMPTY
48204: LIST
48205: LIST
48206: PUSH
48207: LD_INT 1
48209: PUSH
48210: LD_INT 1
48212: NEG
48213: PUSH
48214: EMPTY
48215: LIST
48216: LIST
48217: PUSH
48218: LD_INT 2
48220: PUSH
48221: LD_INT 0
48223: PUSH
48224: EMPTY
48225: LIST
48226: LIST
48227: PUSH
48228: LD_INT 2
48230: PUSH
48231: LD_INT 1
48233: PUSH
48234: EMPTY
48235: LIST
48236: LIST
48237: PUSH
48238: LD_INT 1
48240: PUSH
48241: LD_INT 2
48243: PUSH
48244: EMPTY
48245: LIST
48246: LIST
48247: PUSH
48248: LD_INT 0
48250: PUSH
48251: LD_INT 2
48253: PUSH
48254: EMPTY
48255: LIST
48256: LIST
48257: PUSH
48258: LD_INT 1
48260: NEG
48261: PUSH
48262: LD_INT 1
48264: PUSH
48265: EMPTY
48266: LIST
48267: LIST
48268: PUSH
48269: LD_INT 2
48271: NEG
48272: PUSH
48273: LD_INT 0
48275: PUSH
48276: EMPTY
48277: LIST
48278: LIST
48279: PUSH
48280: LD_INT 2
48282: NEG
48283: PUSH
48284: LD_INT 1
48286: NEG
48287: PUSH
48288: EMPTY
48289: LIST
48290: LIST
48291: PUSH
48292: LD_INT 1
48294: NEG
48295: PUSH
48296: LD_INT 3
48298: NEG
48299: PUSH
48300: EMPTY
48301: LIST
48302: LIST
48303: PUSH
48304: LD_INT 0
48306: PUSH
48307: LD_INT 3
48309: NEG
48310: PUSH
48311: EMPTY
48312: LIST
48313: LIST
48314: PUSH
48315: LD_INT 1
48317: PUSH
48318: LD_INT 2
48320: NEG
48321: PUSH
48322: EMPTY
48323: LIST
48324: LIST
48325: PUSH
48326: LD_INT 2
48328: PUSH
48329: LD_INT 1
48331: NEG
48332: PUSH
48333: EMPTY
48334: LIST
48335: LIST
48336: PUSH
48337: LD_INT 3
48339: PUSH
48340: LD_INT 0
48342: PUSH
48343: EMPTY
48344: LIST
48345: LIST
48346: PUSH
48347: LD_INT 3
48349: PUSH
48350: LD_INT 1
48352: PUSH
48353: EMPTY
48354: LIST
48355: LIST
48356: PUSH
48357: LD_INT 1
48359: PUSH
48360: LD_INT 3
48362: PUSH
48363: EMPTY
48364: LIST
48365: LIST
48366: PUSH
48367: LD_INT 0
48369: PUSH
48370: LD_INT 3
48372: PUSH
48373: EMPTY
48374: LIST
48375: LIST
48376: PUSH
48377: LD_INT 1
48379: NEG
48380: PUSH
48381: LD_INT 2
48383: PUSH
48384: EMPTY
48385: LIST
48386: LIST
48387: PUSH
48388: LD_INT 2
48390: NEG
48391: PUSH
48392: LD_INT 1
48394: PUSH
48395: EMPTY
48396: LIST
48397: LIST
48398: PUSH
48399: LD_INT 3
48401: NEG
48402: PUSH
48403: LD_INT 0
48405: PUSH
48406: EMPTY
48407: LIST
48408: LIST
48409: PUSH
48410: LD_INT 3
48412: NEG
48413: PUSH
48414: LD_INT 1
48416: NEG
48417: PUSH
48418: EMPTY
48419: LIST
48420: LIST
48421: PUSH
48422: EMPTY
48423: LIST
48424: LIST
48425: LIST
48426: LIST
48427: LIST
48428: LIST
48429: LIST
48430: LIST
48431: LIST
48432: LIST
48433: LIST
48434: LIST
48435: LIST
48436: LIST
48437: LIST
48438: LIST
48439: LIST
48440: LIST
48441: LIST
48442: LIST
48443: LIST
48444: LIST
48445: LIST
48446: LIST
48447: LIST
48448: LIST
48449: LIST
48450: LIST
48451: LIST
48452: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48453: LD_ADDR_VAR 0 47
48457: PUSH
48458: LD_INT 0
48460: PUSH
48461: LD_INT 0
48463: PUSH
48464: EMPTY
48465: LIST
48466: LIST
48467: PUSH
48468: LD_INT 0
48470: PUSH
48471: LD_INT 1
48473: NEG
48474: PUSH
48475: EMPTY
48476: LIST
48477: LIST
48478: PUSH
48479: LD_INT 1
48481: PUSH
48482: LD_INT 0
48484: PUSH
48485: EMPTY
48486: LIST
48487: LIST
48488: PUSH
48489: LD_INT 1
48491: PUSH
48492: LD_INT 1
48494: PUSH
48495: EMPTY
48496: LIST
48497: LIST
48498: PUSH
48499: LD_INT 0
48501: PUSH
48502: LD_INT 1
48504: PUSH
48505: EMPTY
48506: LIST
48507: LIST
48508: PUSH
48509: LD_INT 1
48511: NEG
48512: PUSH
48513: LD_INT 0
48515: PUSH
48516: EMPTY
48517: LIST
48518: LIST
48519: PUSH
48520: LD_INT 1
48522: NEG
48523: PUSH
48524: LD_INT 1
48526: NEG
48527: PUSH
48528: EMPTY
48529: LIST
48530: LIST
48531: PUSH
48532: LD_INT 1
48534: NEG
48535: PUSH
48536: LD_INT 2
48538: NEG
48539: PUSH
48540: EMPTY
48541: LIST
48542: LIST
48543: PUSH
48544: LD_INT 0
48546: PUSH
48547: LD_INT 2
48549: NEG
48550: PUSH
48551: EMPTY
48552: LIST
48553: LIST
48554: PUSH
48555: LD_INT 1
48557: PUSH
48558: LD_INT 1
48560: NEG
48561: PUSH
48562: EMPTY
48563: LIST
48564: LIST
48565: PUSH
48566: LD_INT 2
48568: NEG
48569: PUSH
48570: LD_INT 1
48572: NEG
48573: PUSH
48574: EMPTY
48575: LIST
48576: LIST
48577: PUSH
48578: LD_INT 2
48580: NEG
48581: PUSH
48582: LD_INT 2
48584: NEG
48585: PUSH
48586: EMPTY
48587: LIST
48588: LIST
48589: PUSH
48590: EMPTY
48591: LIST
48592: LIST
48593: LIST
48594: LIST
48595: LIST
48596: LIST
48597: LIST
48598: LIST
48599: LIST
48600: LIST
48601: LIST
48602: LIST
48603: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
48604: LD_ADDR_VAR 0 48
48608: PUSH
48609: LD_INT 0
48611: PUSH
48612: LD_INT 0
48614: PUSH
48615: EMPTY
48616: LIST
48617: LIST
48618: PUSH
48619: LD_INT 0
48621: PUSH
48622: LD_INT 1
48624: NEG
48625: PUSH
48626: EMPTY
48627: LIST
48628: LIST
48629: PUSH
48630: LD_INT 1
48632: PUSH
48633: LD_INT 0
48635: PUSH
48636: EMPTY
48637: LIST
48638: LIST
48639: PUSH
48640: LD_INT 1
48642: PUSH
48643: LD_INT 1
48645: PUSH
48646: EMPTY
48647: LIST
48648: LIST
48649: PUSH
48650: LD_INT 0
48652: PUSH
48653: LD_INT 1
48655: PUSH
48656: EMPTY
48657: LIST
48658: LIST
48659: PUSH
48660: LD_INT 1
48662: NEG
48663: PUSH
48664: LD_INT 0
48666: PUSH
48667: EMPTY
48668: LIST
48669: LIST
48670: PUSH
48671: LD_INT 1
48673: NEG
48674: PUSH
48675: LD_INT 1
48677: NEG
48678: PUSH
48679: EMPTY
48680: LIST
48681: LIST
48682: PUSH
48683: LD_INT 1
48685: NEG
48686: PUSH
48687: LD_INT 2
48689: NEG
48690: PUSH
48691: EMPTY
48692: LIST
48693: LIST
48694: PUSH
48695: LD_INT 0
48697: PUSH
48698: LD_INT 2
48700: NEG
48701: PUSH
48702: EMPTY
48703: LIST
48704: LIST
48705: PUSH
48706: LD_INT 1
48708: PUSH
48709: LD_INT 1
48711: NEG
48712: PUSH
48713: EMPTY
48714: LIST
48715: LIST
48716: PUSH
48717: LD_INT 2
48719: PUSH
48720: LD_INT 0
48722: PUSH
48723: EMPTY
48724: LIST
48725: LIST
48726: PUSH
48727: LD_INT 2
48729: PUSH
48730: LD_INT 1
48732: PUSH
48733: EMPTY
48734: LIST
48735: LIST
48736: PUSH
48737: EMPTY
48738: LIST
48739: LIST
48740: LIST
48741: LIST
48742: LIST
48743: LIST
48744: LIST
48745: LIST
48746: LIST
48747: LIST
48748: LIST
48749: LIST
48750: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
48751: LD_ADDR_VAR 0 49
48755: PUSH
48756: LD_INT 0
48758: PUSH
48759: LD_INT 0
48761: PUSH
48762: EMPTY
48763: LIST
48764: LIST
48765: PUSH
48766: LD_INT 0
48768: PUSH
48769: LD_INT 1
48771: NEG
48772: PUSH
48773: EMPTY
48774: LIST
48775: LIST
48776: PUSH
48777: LD_INT 1
48779: PUSH
48780: LD_INT 0
48782: PUSH
48783: EMPTY
48784: LIST
48785: LIST
48786: PUSH
48787: LD_INT 1
48789: PUSH
48790: LD_INT 1
48792: PUSH
48793: EMPTY
48794: LIST
48795: LIST
48796: PUSH
48797: LD_INT 0
48799: PUSH
48800: LD_INT 1
48802: PUSH
48803: EMPTY
48804: LIST
48805: LIST
48806: PUSH
48807: LD_INT 1
48809: NEG
48810: PUSH
48811: LD_INT 0
48813: PUSH
48814: EMPTY
48815: LIST
48816: LIST
48817: PUSH
48818: LD_INT 1
48820: NEG
48821: PUSH
48822: LD_INT 1
48824: NEG
48825: PUSH
48826: EMPTY
48827: LIST
48828: LIST
48829: PUSH
48830: LD_INT 1
48832: PUSH
48833: LD_INT 1
48835: NEG
48836: PUSH
48837: EMPTY
48838: LIST
48839: LIST
48840: PUSH
48841: LD_INT 2
48843: PUSH
48844: LD_INT 0
48846: PUSH
48847: EMPTY
48848: LIST
48849: LIST
48850: PUSH
48851: LD_INT 2
48853: PUSH
48854: LD_INT 1
48856: PUSH
48857: EMPTY
48858: LIST
48859: LIST
48860: PUSH
48861: LD_INT 2
48863: PUSH
48864: LD_INT 2
48866: PUSH
48867: EMPTY
48868: LIST
48869: LIST
48870: PUSH
48871: LD_INT 1
48873: PUSH
48874: LD_INT 2
48876: PUSH
48877: EMPTY
48878: LIST
48879: LIST
48880: PUSH
48881: EMPTY
48882: LIST
48883: LIST
48884: LIST
48885: LIST
48886: LIST
48887: LIST
48888: LIST
48889: LIST
48890: LIST
48891: LIST
48892: LIST
48893: LIST
48894: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
48895: LD_ADDR_VAR 0 50
48899: PUSH
48900: LD_INT 0
48902: PUSH
48903: LD_INT 0
48905: PUSH
48906: EMPTY
48907: LIST
48908: LIST
48909: PUSH
48910: LD_INT 0
48912: PUSH
48913: LD_INT 1
48915: NEG
48916: PUSH
48917: EMPTY
48918: LIST
48919: LIST
48920: PUSH
48921: LD_INT 1
48923: PUSH
48924: LD_INT 0
48926: PUSH
48927: EMPTY
48928: LIST
48929: LIST
48930: PUSH
48931: LD_INT 1
48933: PUSH
48934: LD_INT 1
48936: PUSH
48937: EMPTY
48938: LIST
48939: LIST
48940: PUSH
48941: LD_INT 0
48943: PUSH
48944: LD_INT 1
48946: PUSH
48947: EMPTY
48948: LIST
48949: LIST
48950: PUSH
48951: LD_INT 1
48953: NEG
48954: PUSH
48955: LD_INT 0
48957: PUSH
48958: EMPTY
48959: LIST
48960: LIST
48961: PUSH
48962: LD_INT 1
48964: NEG
48965: PUSH
48966: LD_INT 1
48968: NEG
48969: PUSH
48970: EMPTY
48971: LIST
48972: LIST
48973: PUSH
48974: LD_INT 2
48976: PUSH
48977: LD_INT 1
48979: PUSH
48980: EMPTY
48981: LIST
48982: LIST
48983: PUSH
48984: LD_INT 2
48986: PUSH
48987: LD_INT 2
48989: PUSH
48990: EMPTY
48991: LIST
48992: LIST
48993: PUSH
48994: LD_INT 1
48996: PUSH
48997: LD_INT 2
48999: PUSH
49000: EMPTY
49001: LIST
49002: LIST
49003: PUSH
49004: LD_INT 0
49006: PUSH
49007: LD_INT 2
49009: PUSH
49010: EMPTY
49011: LIST
49012: LIST
49013: PUSH
49014: LD_INT 1
49016: NEG
49017: PUSH
49018: LD_INT 1
49020: PUSH
49021: EMPTY
49022: LIST
49023: LIST
49024: PUSH
49025: EMPTY
49026: LIST
49027: LIST
49028: LIST
49029: LIST
49030: LIST
49031: LIST
49032: LIST
49033: LIST
49034: LIST
49035: LIST
49036: LIST
49037: LIST
49038: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
49039: LD_ADDR_VAR 0 51
49043: PUSH
49044: LD_INT 0
49046: PUSH
49047: LD_INT 0
49049: PUSH
49050: EMPTY
49051: LIST
49052: LIST
49053: PUSH
49054: LD_INT 0
49056: PUSH
49057: LD_INT 1
49059: NEG
49060: PUSH
49061: EMPTY
49062: LIST
49063: LIST
49064: PUSH
49065: LD_INT 1
49067: PUSH
49068: LD_INT 0
49070: PUSH
49071: EMPTY
49072: LIST
49073: LIST
49074: PUSH
49075: LD_INT 1
49077: PUSH
49078: LD_INT 1
49080: PUSH
49081: EMPTY
49082: LIST
49083: LIST
49084: PUSH
49085: LD_INT 0
49087: PUSH
49088: LD_INT 1
49090: PUSH
49091: EMPTY
49092: LIST
49093: LIST
49094: PUSH
49095: LD_INT 1
49097: NEG
49098: PUSH
49099: LD_INT 0
49101: PUSH
49102: EMPTY
49103: LIST
49104: LIST
49105: PUSH
49106: LD_INT 1
49108: NEG
49109: PUSH
49110: LD_INT 1
49112: NEG
49113: PUSH
49114: EMPTY
49115: LIST
49116: LIST
49117: PUSH
49118: LD_INT 1
49120: PUSH
49121: LD_INT 2
49123: PUSH
49124: EMPTY
49125: LIST
49126: LIST
49127: PUSH
49128: LD_INT 0
49130: PUSH
49131: LD_INT 2
49133: PUSH
49134: EMPTY
49135: LIST
49136: LIST
49137: PUSH
49138: LD_INT 1
49140: NEG
49141: PUSH
49142: LD_INT 1
49144: PUSH
49145: EMPTY
49146: LIST
49147: LIST
49148: PUSH
49149: LD_INT 2
49151: NEG
49152: PUSH
49153: LD_INT 0
49155: PUSH
49156: EMPTY
49157: LIST
49158: LIST
49159: PUSH
49160: LD_INT 2
49162: NEG
49163: PUSH
49164: LD_INT 1
49166: NEG
49167: PUSH
49168: EMPTY
49169: LIST
49170: LIST
49171: PUSH
49172: EMPTY
49173: LIST
49174: LIST
49175: LIST
49176: LIST
49177: LIST
49178: LIST
49179: LIST
49180: LIST
49181: LIST
49182: LIST
49183: LIST
49184: LIST
49185: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49186: LD_ADDR_VAR 0 52
49190: PUSH
49191: LD_INT 0
49193: PUSH
49194: LD_INT 0
49196: PUSH
49197: EMPTY
49198: LIST
49199: LIST
49200: PUSH
49201: LD_INT 0
49203: PUSH
49204: LD_INT 1
49206: NEG
49207: PUSH
49208: EMPTY
49209: LIST
49210: LIST
49211: PUSH
49212: LD_INT 1
49214: PUSH
49215: LD_INT 0
49217: PUSH
49218: EMPTY
49219: LIST
49220: LIST
49221: PUSH
49222: LD_INT 1
49224: PUSH
49225: LD_INT 1
49227: PUSH
49228: EMPTY
49229: LIST
49230: LIST
49231: PUSH
49232: LD_INT 0
49234: PUSH
49235: LD_INT 1
49237: PUSH
49238: EMPTY
49239: LIST
49240: LIST
49241: PUSH
49242: LD_INT 1
49244: NEG
49245: PUSH
49246: LD_INT 0
49248: PUSH
49249: EMPTY
49250: LIST
49251: LIST
49252: PUSH
49253: LD_INT 1
49255: NEG
49256: PUSH
49257: LD_INT 1
49259: NEG
49260: PUSH
49261: EMPTY
49262: LIST
49263: LIST
49264: PUSH
49265: LD_INT 1
49267: NEG
49268: PUSH
49269: LD_INT 2
49271: NEG
49272: PUSH
49273: EMPTY
49274: LIST
49275: LIST
49276: PUSH
49277: LD_INT 1
49279: NEG
49280: PUSH
49281: LD_INT 1
49283: PUSH
49284: EMPTY
49285: LIST
49286: LIST
49287: PUSH
49288: LD_INT 2
49290: NEG
49291: PUSH
49292: LD_INT 0
49294: PUSH
49295: EMPTY
49296: LIST
49297: LIST
49298: PUSH
49299: LD_INT 2
49301: NEG
49302: PUSH
49303: LD_INT 1
49305: NEG
49306: PUSH
49307: EMPTY
49308: LIST
49309: LIST
49310: PUSH
49311: LD_INT 2
49313: NEG
49314: PUSH
49315: LD_INT 2
49317: NEG
49318: PUSH
49319: EMPTY
49320: LIST
49321: LIST
49322: PUSH
49323: EMPTY
49324: LIST
49325: LIST
49326: LIST
49327: LIST
49328: LIST
49329: LIST
49330: LIST
49331: LIST
49332: LIST
49333: LIST
49334: LIST
49335: LIST
49336: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49337: LD_ADDR_VAR 0 53
49341: PUSH
49342: LD_INT 0
49344: PUSH
49345: LD_INT 0
49347: PUSH
49348: EMPTY
49349: LIST
49350: LIST
49351: PUSH
49352: LD_INT 0
49354: PUSH
49355: LD_INT 1
49357: NEG
49358: PUSH
49359: EMPTY
49360: LIST
49361: LIST
49362: PUSH
49363: LD_INT 1
49365: PUSH
49366: LD_INT 0
49368: PUSH
49369: EMPTY
49370: LIST
49371: LIST
49372: PUSH
49373: LD_INT 1
49375: PUSH
49376: LD_INT 1
49378: PUSH
49379: EMPTY
49380: LIST
49381: LIST
49382: PUSH
49383: LD_INT 0
49385: PUSH
49386: LD_INT 1
49388: PUSH
49389: EMPTY
49390: LIST
49391: LIST
49392: PUSH
49393: LD_INT 1
49395: NEG
49396: PUSH
49397: LD_INT 0
49399: PUSH
49400: EMPTY
49401: LIST
49402: LIST
49403: PUSH
49404: LD_INT 1
49406: NEG
49407: PUSH
49408: LD_INT 1
49410: NEG
49411: PUSH
49412: EMPTY
49413: LIST
49414: LIST
49415: PUSH
49416: LD_INT 1
49418: NEG
49419: PUSH
49420: LD_INT 2
49422: NEG
49423: PUSH
49424: EMPTY
49425: LIST
49426: LIST
49427: PUSH
49428: LD_INT 0
49430: PUSH
49431: LD_INT 2
49433: NEG
49434: PUSH
49435: EMPTY
49436: LIST
49437: LIST
49438: PUSH
49439: LD_INT 1
49441: PUSH
49442: LD_INT 1
49444: NEG
49445: PUSH
49446: EMPTY
49447: LIST
49448: LIST
49449: PUSH
49450: LD_INT 2
49452: PUSH
49453: LD_INT 0
49455: PUSH
49456: EMPTY
49457: LIST
49458: LIST
49459: PUSH
49460: LD_INT 2
49462: PUSH
49463: LD_INT 1
49465: PUSH
49466: EMPTY
49467: LIST
49468: LIST
49469: PUSH
49470: LD_INT 2
49472: PUSH
49473: LD_INT 2
49475: PUSH
49476: EMPTY
49477: LIST
49478: LIST
49479: PUSH
49480: LD_INT 1
49482: PUSH
49483: LD_INT 2
49485: PUSH
49486: EMPTY
49487: LIST
49488: LIST
49489: PUSH
49490: LD_INT 0
49492: PUSH
49493: LD_INT 2
49495: PUSH
49496: EMPTY
49497: LIST
49498: LIST
49499: PUSH
49500: LD_INT 1
49502: NEG
49503: PUSH
49504: LD_INT 1
49506: PUSH
49507: EMPTY
49508: LIST
49509: LIST
49510: PUSH
49511: LD_INT 2
49513: NEG
49514: PUSH
49515: LD_INT 0
49517: PUSH
49518: EMPTY
49519: LIST
49520: LIST
49521: PUSH
49522: LD_INT 2
49524: NEG
49525: PUSH
49526: LD_INT 1
49528: NEG
49529: PUSH
49530: EMPTY
49531: LIST
49532: LIST
49533: PUSH
49534: LD_INT 2
49536: NEG
49537: PUSH
49538: LD_INT 2
49540: NEG
49541: PUSH
49542: EMPTY
49543: LIST
49544: LIST
49545: PUSH
49546: EMPTY
49547: LIST
49548: LIST
49549: LIST
49550: LIST
49551: LIST
49552: LIST
49553: LIST
49554: LIST
49555: LIST
49556: LIST
49557: LIST
49558: LIST
49559: LIST
49560: LIST
49561: LIST
49562: LIST
49563: LIST
49564: LIST
49565: LIST
49566: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49567: LD_ADDR_VAR 0 54
49571: PUSH
49572: LD_INT 0
49574: PUSH
49575: LD_INT 0
49577: PUSH
49578: EMPTY
49579: LIST
49580: LIST
49581: PUSH
49582: LD_INT 0
49584: PUSH
49585: LD_INT 1
49587: NEG
49588: PUSH
49589: EMPTY
49590: LIST
49591: LIST
49592: PUSH
49593: LD_INT 1
49595: PUSH
49596: LD_INT 0
49598: PUSH
49599: EMPTY
49600: LIST
49601: LIST
49602: PUSH
49603: LD_INT 1
49605: PUSH
49606: LD_INT 1
49608: PUSH
49609: EMPTY
49610: LIST
49611: LIST
49612: PUSH
49613: LD_INT 0
49615: PUSH
49616: LD_INT 1
49618: PUSH
49619: EMPTY
49620: LIST
49621: LIST
49622: PUSH
49623: LD_INT 1
49625: NEG
49626: PUSH
49627: LD_INT 0
49629: PUSH
49630: EMPTY
49631: LIST
49632: LIST
49633: PUSH
49634: LD_INT 1
49636: NEG
49637: PUSH
49638: LD_INT 1
49640: NEG
49641: PUSH
49642: EMPTY
49643: LIST
49644: LIST
49645: PUSH
49646: LD_INT 1
49648: NEG
49649: PUSH
49650: LD_INT 2
49652: NEG
49653: PUSH
49654: EMPTY
49655: LIST
49656: LIST
49657: PUSH
49658: LD_INT 0
49660: PUSH
49661: LD_INT 2
49663: NEG
49664: PUSH
49665: EMPTY
49666: LIST
49667: LIST
49668: PUSH
49669: LD_INT 1
49671: PUSH
49672: LD_INT 1
49674: NEG
49675: PUSH
49676: EMPTY
49677: LIST
49678: LIST
49679: PUSH
49680: LD_INT 2
49682: PUSH
49683: LD_INT 0
49685: PUSH
49686: EMPTY
49687: LIST
49688: LIST
49689: PUSH
49690: LD_INT 2
49692: PUSH
49693: LD_INT 1
49695: PUSH
49696: EMPTY
49697: LIST
49698: LIST
49699: PUSH
49700: LD_INT 2
49702: PUSH
49703: LD_INT 2
49705: PUSH
49706: EMPTY
49707: LIST
49708: LIST
49709: PUSH
49710: LD_INT 1
49712: PUSH
49713: LD_INT 2
49715: PUSH
49716: EMPTY
49717: LIST
49718: LIST
49719: PUSH
49720: LD_INT 0
49722: PUSH
49723: LD_INT 2
49725: PUSH
49726: EMPTY
49727: LIST
49728: LIST
49729: PUSH
49730: LD_INT 1
49732: NEG
49733: PUSH
49734: LD_INT 1
49736: PUSH
49737: EMPTY
49738: LIST
49739: LIST
49740: PUSH
49741: LD_INT 2
49743: NEG
49744: PUSH
49745: LD_INT 0
49747: PUSH
49748: EMPTY
49749: LIST
49750: LIST
49751: PUSH
49752: LD_INT 2
49754: NEG
49755: PUSH
49756: LD_INT 1
49758: NEG
49759: PUSH
49760: EMPTY
49761: LIST
49762: LIST
49763: PUSH
49764: LD_INT 2
49766: NEG
49767: PUSH
49768: LD_INT 2
49770: NEG
49771: PUSH
49772: EMPTY
49773: LIST
49774: LIST
49775: PUSH
49776: EMPTY
49777: LIST
49778: LIST
49779: LIST
49780: LIST
49781: LIST
49782: LIST
49783: LIST
49784: LIST
49785: LIST
49786: LIST
49787: LIST
49788: LIST
49789: LIST
49790: LIST
49791: LIST
49792: LIST
49793: LIST
49794: LIST
49795: LIST
49796: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49797: LD_ADDR_VAR 0 55
49801: PUSH
49802: LD_INT 0
49804: PUSH
49805: LD_INT 0
49807: PUSH
49808: EMPTY
49809: LIST
49810: LIST
49811: PUSH
49812: LD_INT 0
49814: PUSH
49815: LD_INT 1
49817: NEG
49818: PUSH
49819: EMPTY
49820: LIST
49821: LIST
49822: PUSH
49823: LD_INT 1
49825: PUSH
49826: LD_INT 0
49828: PUSH
49829: EMPTY
49830: LIST
49831: LIST
49832: PUSH
49833: LD_INT 1
49835: PUSH
49836: LD_INT 1
49838: PUSH
49839: EMPTY
49840: LIST
49841: LIST
49842: PUSH
49843: LD_INT 0
49845: PUSH
49846: LD_INT 1
49848: PUSH
49849: EMPTY
49850: LIST
49851: LIST
49852: PUSH
49853: LD_INT 1
49855: NEG
49856: PUSH
49857: LD_INT 0
49859: PUSH
49860: EMPTY
49861: LIST
49862: LIST
49863: PUSH
49864: LD_INT 1
49866: NEG
49867: PUSH
49868: LD_INT 1
49870: NEG
49871: PUSH
49872: EMPTY
49873: LIST
49874: LIST
49875: PUSH
49876: LD_INT 1
49878: NEG
49879: PUSH
49880: LD_INT 2
49882: NEG
49883: PUSH
49884: EMPTY
49885: LIST
49886: LIST
49887: PUSH
49888: LD_INT 0
49890: PUSH
49891: LD_INT 2
49893: NEG
49894: PUSH
49895: EMPTY
49896: LIST
49897: LIST
49898: PUSH
49899: LD_INT 1
49901: PUSH
49902: LD_INT 1
49904: NEG
49905: PUSH
49906: EMPTY
49907: LIST
49908: LIST
49909: PUSH
49910: LD_INT 2
49912: PUSH
49913: LD_INT 0
49915: PUSH
49916: EMPTY
49917: LIST
49918: LIST
49919: PUSH
49920: LD_INT 2
49922: PUSH
49923: LD_INT 1
49925: PUSH
49926: EMPTY
49927: LIST
49928: LIST
49929: PUSH
49930: LD_INT 2
49932: PUSH
49933: LD_INT 2
49935: PUSH
49936: EMPTY
49937: LIST
49938: LIST
49939: PUSH
49940: LD_INT 1
49942: PUSH
49943: LD_INT 2
49945: PUSH
49946: EMPTY
49947: LIST
49948: LIST
49949: PUSH
49950: LD_INT 0
49952: PUSH
49953: LD_INT 2
49955: PUSH
49956: EMPTY
49957: LIST
49958: LIST
49959: PUSH
49960: LD_INT 1
49962: NEG
49963: PUSH
49964: LD_INT 1
49966: PUSH
49967: EMPTY
49968: LIST
49969: LIST
49970: PUSH
49971: LD_INT 2
49973: NEG
49974: PUSH
49975: LD_INT 0
49977: PUSH
49978: EMPTY
49979: LIST
49980: LIST
49981: PUSH
49982: LD_INT 2
49984: NEG
49985: PUSH
49986: LD_INT 1
49988: NEG
49989: PUSH
49990: EMPTY
49991: LIST
49992: LIST
49993: PUSH
49994: LD_INT 2
49996: NEG
49997: PUSH
49998: LD_INT 2
50000: NEG
50001: PUSH
50002: EMPTY
50003: LIST
50004: LIST
50005: PUSH
50006: EMPTY
50007: LIST
50008: LIST
50009: LIST
50010: LIST
50011: LIST
50012: LIST
50013: LIST
50014: LIST
50015: LIST
50016: LIST
50017: LIST
50018: LIST
50019: LIST
50020: LIST
50021: LIST
50022: LIST
50023: LIST
50024: LIST
50025: LIST
50026: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50027: LD_ADDR_VAR 0 56
50031: PUSH
50032: LD_INT 0
50034: PUSH
50035: LD_INT 0
50037: PUSH
50038: EMPTY
50039: LIST
50040: LIST
50041: PUSH
50042: LD_INT 0
50044: PUSH
50045: LD_INT 1
50047: NEG
50048: PUSH
50049: EMPTY
50050: LIST
50051: LIST
50052: PUSH
50053: LD_INT 1
50055: PUSH
50056: LD_INT 0
50058: PUSH
50059: EMPTY
50060: LIST
50061: LIST
50062: PUSH
50063: LD_INT 1
50065: PUSH
50066: LD_INT 1
50068: PUSH
50069: EMPTY
50070: LIST
50071: LIST
50072: PUSH
50073: LD_INT 0
50075: PUSH
50076: LD_INT 1
50078: PUSH
50079: EMPTY
50080: LIST
50081: LIST
50082: PUSH
50083: LD_INT 1
50085: NEG
50086: PUSH
50087: LD_INT 0
50089: PUSH
50090: EMPTY
50091: LIST
50092: LIST
50093: PUSH
50094: LD_INT 1
50096: NEG
50097: PUSH
50098: LD_INT 1
50100: NEG
50101: PUSH
50102: EMPTY
50103: LIST
50104: LIST
50105: PUSH
50106: LD_INT 1
50108: NEG
50109: PUSH
50110: LD_INT 2
50112: NEG
50113: PUSH
50114: EMPTY
50115: LIST
50116: LIST
50117: PUSH
50118: LD_INT 0
50120: PUSH
50121: LD_INT 2
50123: NEG
50124: PUSH
50125: EMPTY
50126: LIST
50127: LIST
50128: PUSH
50129: LD_INT 1
50131: PUSH
50132: LD_INT 1
50134: NEG
50135: PUSH
50136: EMPTY
50137: LIST
50138: LIST
50139: PUSH
50140: LD_INT 2
50142: PUSH
50143: LD_INT 0
50145: PUSH
50146: EMPTY
50147: LIST
50148: LIST
50149: PUSH
50150: LD_INT 2
50152: PUSH
50153: LD_INT 1
50155: PUSH
50156: EMPTY
50157: LIST
50158: LIST
50159: PUSH
50160: LD_INT 2
50162: PUSH
50163: LD_INT 2
50165: PUSH
50166: EMPTY
50167: LIST
50168: LIST
50169: PUSH
50170: LD_INT 1
50172: PUSH
50173: LD_INT 2
50175: PUSH
50176: EMPTY
50177: LIST
50178: LIST
50179: PUSH
50180: LD_INT 0
50182: PUSH
50183: LD_INT 2
50185: PUSH
50186: EMPTY
50187: LIST
50188: LIST
50189: PUSH
50190: LD_INT 1
50192: NEG
50193: PUSH
50194: LD_INT 1
50196: PUSH
50197: EMPTY
50198: LIST
50199: LIST
50200: PUSH
50201: LD_INT 2
50203: NEG
50204: PUSH
50205: LD_INT 0
50207: PUSH
50208: EMPTY
50209: LIST
50210: LIST
50211: PUSH
50212: LD_INT 2
50214: NEG
50215: PUSH
50216: LD_INT 1
50218: NEG
50219: PUSH
50220: EMPTY
50221: LIST
50222: LIST
50223: PUSH
50224: LD_INT 2
50226: NEG
50227: PUSH
50228: LD_INT 2
50230: NEG
50231: PUSH
50232: EMPTY
50233: LIST
50234: LIST
50235: PUSH
50236: EMPTY
50237: LIST
50238: LIST
50239: LIST
50240: LIST
50241: LIST
50242: LIST
50243: LIST
50244: LIST
50245: LIST
50246: LIST
50247: LIST
50248: LIST
50249: LIST
50250: LIST
50251: LIST
50252: LIST
50253: LIST
50254: LIST
50255: LIST
50256: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50257: LD_ADDR_VAR 0 57
50261: PUSH
50262: LD_INT 0
50264: PUSH
50265: LD_INT 0
50267: PUSH
50268: EMPTY
50269: LIST
50270: LIST
50271: PUSH
50272: LD_INT 0
50274: PUSH
50275: LD_INT 1
50277: NEG
50278: PUSH
50279: EMPTY
50280: LIST
50281: LIST
50282: PUSH
50283: LD_INT 1
50285: PUSH
50286: LD_INT 0
50288: PUSH
50289: EMPTY
50290: LIST
50291: LIST
50292: PUSH
50293: LD_INT 1
50295: PUSH
50296: LD_INT 1
50298: PUSH
50299: EMPTY
50300: LIST
50301: LIST
50302: PUSH
50303: LD_INT 0
50305: PUSH
50306: LD_INT 1
50308: PUSH
50309: EMPTY
50310: LIST
50311: LIST
50312: PUSH
50313: LD_INT 1
50315: NEG
50316: PUSH
50317: LD_INT 0
50319: PUSH
50320: EMPTY
50321: LIST
50322: LIST
50323: PUSH
50324: LD_INT 1
50326: NEG
50327: PUSH
50328: LD_INT 1
50330: NEG
50331: PUSH
50332: EMPTY
50333: LIST
50334: LIST
50335: PUSH
50336: LD_INT 1
50338: NEG
50339: PUSH
50340: LD_INT 2
50342: NEG
50343: PUSH
50344: EMPTY
50345: LIST
50346: LIST
50347: PUSH
50348: LD_INT 0
50350: PUSH
50351: LD_INT 2
50353: NEG
50354: PUSH
50355: EMPTY
50356: LIST
50357: LIST
50358: PUSH
50359: LD_INT 1
50361: PUSH
50362: LD_INT 1
50364: NEG
50365: PUSH
50366: EMPTY
50367: LIST
50368: LIST
50369: PUSH
50370: LD_INT 2
50372: PUSH
50373: LD_INT 0
50375: PUSH
50376: EMPTY
50377: LIST
50378: LIST
50379: PUSH
50380: LD_INT 2
50382: PUSH
50383: LD_INT 1
50385: PUSH
50386: EMPTY
50387: LIST
50388: LIST
50389: PUSH
50390: LD_INT 2
50392: PUSH
50393: LD_INT 2
50395: PUSH
50396: EMPTY
50397: LIST
50398: LIST
50399: PUSH
50400: LD_INT 1
50402: PUSH
50403: LD_INT 2
50405: PUSH
50406: EMPTY
50407: LIST
50408: LIST
50409: PUSH
50410: LD_INT 0
50412: PUSH
50413: LD_INT 2
50415: PUSH
50416: EMPTY
50417: LIST
50418: LIST
50419: PUSH
50420: LD_INT 1
50422: NEG
50423: PUSH
50424: LD_INT 1
50426: PUSH
50427: EMPTY
50428: LIST
50429: LIST
50430: PUSH
50431: LD_INT 2
50433: NEG
50434: PUSH
50435: LD_INT 0
50437: PUSH
50438: EMPTY
50439: LIST
50440: LIST
50441: PUSH
50442: LD_INT 2
50444: NEG
50445: PUSH
50446: LD_INT 1
50448: NEG
50449: PUSH
50450: EMPTY
50451: LIST
50452: LIST
50453: PUSH
50454: LD_INT 2
50456: NEG
50457: PUSH
50458: LD_INT 2
50460: NEG
50461: PUSH
50462: EMPTY
50463: LIST
50464: LIST
50465: PUSH
50466: EMPTY
50467: LIST
50468: LIST
50469: LIST
50470: LIST
50471: LIST
50472: LIST
50473: LIST
50474: LIST
50475: LIST
50476: LIST
50477: LIST
50478: LIST
50479: LIST
50480: LIST
50481: LIST
50482: LIST
50483: LIST
50484: LIST
50485: LIST
50486: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50487: LD_ADDR_VAR 0 58
50491: PUSH
50492: LD_INT 0
50494: PUSH
50495: LD_INT 0
50497: PUSH
50498: EMPTY
50499: LIST
50500: LIST
50501: PUSH
50502: LD_INT 0
50504: PUSH
50505: LD_INT 1
50507: NEG
50508: PUSH
50509: EMPTY
50510: LIST
50511: LIST
50512: PUSH
50513: LD_INT 1
50515: PUSH
50516: LD_INT 0
50518: PUSH
50519: EMPTY
50520: LIST
50521: LIST
50522: PUSH
50523: LD_INT 1
50525: PUSH
50526: LD_INT 1
50528: PUSH
50529: EMPTY
50530: LIST
50531: LIST
50532: PUSH
50533: LD_INT 0
50535: PUSH
50536: LD_INT 1
50538: PUSH
50539: EMPTY
50540: LIST
50541: LIST
50542: PUSH
50543: LD_INT 1
50545: NEG
50546: PUSH
50547: LD_INT 0
50549: PUSH
50550: EMPTY
50551: LIST
50552: LIST
50553: PUSH
50554: LD_INT 1
50556: NEG
50557: PUSH
50558: LD_INT 1
50560: NEG
50561: PUSH
50562: EMPTY
50563: LIST
50564: LIST
50565: PUSH
50566: LD_INT 1
50568: NEG
50569: PUSH
50570: LD_INT 2
50572: NEG
50573: PUSH
50574: EMPTY
50575: LIST
50576: LIST
50577: PUSH
50578: LD_INT 0
50580: PUSH
50581: LD_INT 2
50583: NEG
50584: PUSH
50585: EMPTY
50586: LIST
50587: LIST
50588: PUSH
50589: LD_INT 1
50591: PUSH
50592: LD_INT 1
50594: NEG
50595: PUSH
50596: EMPTY
50597: LIST
50598: LIST
50599: PUSH
50600: LD_INT 2
50602: PUSH
50603: LD_INT 0
50605: PUSH
50606: EMPTY
50607: LIST
50608: LIST
50609: PUSH
50610: LD_INT 2
50612: PUSH
50613: LD_INT 1
50615: PUSH
50616: EMPTY
50617: LIST
50618: LIST
50619: PUSH
50620: LD_INT 2
50622: PUSH
50623: LD_INT 2
50625: PUSH
50626: EMPTY
50627: LIST
50628: LIST
50629: PUSH
50630: LD_INT 1
50632: PUSH
50633: LD_INT 2
50635: PUSH
50636: EMPTY
50637: LIST
50638: LIST
50639: PUSH
50640: LD_INT 0
50642: PUSH
50643: LD_INT 2
50645: PUSH
50646: EMPTY
50647: LIST
50648: LIST
50649: PUSH
50650: LD_INT 1
50652: NEG
50653: PUSH
50654: LD_INT 1
50656: PUSH
50657: EMPTY
50658: LIST
50659: LIST
50660: PUSH
50661: LD_INT 2
50663: NEG
50664: PUSH
50665: LD_INT 0
50667: PUSH
50668: EMPTY
50669: LIST
50670: LIST
50671: PUSH
50672: LD_INT 2
50674: NEG
50675: PUSH
50676: LD_INT 1
50678: NEG
50679: PUSH
50680: EMPTY
50681: LIST
50682: LIST
50683: PUSH
50684: LD_INT 2
50686: NEG
50687: PUSH
50688: LD_INT 2
50690: NEG
50691: PUSH
50692: EMPTY
50693: LIST
50694: LIST
50695: PUSH
50696: EMPTY
50697: LIST
50698: LIST
50699: LIST
50700: LIST
50701: LIST
50702: LIST
50703: LIST
50704: LIST
50705: LIST
50706: LIST
50707: LIST
50708: LIST
50709: LIST
50710: LIST
50711: LIST
50712: LIST
50713: LIST
50714: LIST
50715: LIST
50716: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50717: LD_ADDR_VAR 0 59
50721: PUSH
50722: LD_INT 0
50724: PUSH
50725: LD_INT 0
50727: PUSH
50728: EMPTY
50729: LIST
50730: LIST
50731: PUSH
50732: LD_INT 0
50734: PUSH
50735: LD_INT 1
50737: NEG
50738: PUSH
50739: EMPTY
50740: LIST
50741: LIST
50742: PUSH
50743: LD_INT 1
50745: PUSH
50746: LD_INT 0
50748: PUSH
50749: EMPTY
50750: LIST
50751: LIST
50752: PUSH
50753: LD_INT 1
50755: PUSH
50756: LD_INT 1
50758: PUSH
50759: EMPTY
50760: LIST
50761: LIST
50762: PUSH
50763: LD_INT 0
50765: PUSH
50766: LD_INT 1
50768: PUSH
50769: EMPTY
50770: LIST
50771: LIST
50772: PUSH
50773: LD_INT 1
50775: NEG
50776: PUSH
50777: LD_INT 0
50779: PUSH
50780: EMPTY
50781: LIST
50782: LIST
50783: PUSH
50784: LD_INT 1
50786: NEG
50787: PUSH
50788: LD_INT 1
50790: NEG
50791: PUSH
50792: EMPTY
50793: LIST
50794: LIST
50795: PUSH
50796: EMPTY
50797: LIST
50798: LIST
50799: LIST
50800: LIST
50801: LIST
50802: LIST
50803: LIST
50804: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50805: LD_ADDR_VAR 0 60
50809: PUSH
50810: LD_INT 0
50812: PUSH
50813: LD_INT 0
50815: PUSH
50816: EMPTY
50817: LIST
50818: LIST
50819: PUSH
50820: LD_INT 0
50822: PUSH
50823: LD_INT 1
50825: NEG
50826: PUSH
50827: EMPTY
50828: LIST
50829: LIST
50830: PUSH
50831: LD_INT 1
50833: PUSH
50834: LD_INT 0
50836: PUSH
50837: EMPTY
50838: LIST
50839: LIST
50840: PUSH
50841: LD_INT 1
50843: PUSH
50844: LD_INT 1
50846: PUSH
50847: EMPTY
50848: LIST
50849: LIST
50850: PUSH
50851: LD_INT 0
50853: PUSH
50854: LD_INT 1
50856: PUSH
50857: EMPTY
50858: LIST
50859: LIST
50860: PUSH
50861: LD_INT 1
50863: NEG
50864: PUSH
50865: LD_INT 0
50867: PUSH
50868: EMPTY
50869: LIST
50870: LIST
50871: PUSH
50872: LD_INT 1
50874: NEG
50875: PUSH
50876: LD_INT 1
50878: NEG
50879: PUSH
50880: EMPTY
50881: LIST
50882: LIST
50883: PUSH
50884: EMPTY
50885: LIST
50886: LIST
50887: LIST
50888: LIST
50889: LIST
50890: LIST
50891: LIST
50892: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50893: LD_ADDR_VAR 0 61
50897: PUSH
50898: LD_INT 0
50900: PUSH
50901: LD_INT 0
50903: PUSH
50904: EMPTY
50905: LIST
50906: LIST
50907: PUSH
50908: LD_INT 0
50910: PUSH
50911: LD_INT 1
50913: NEG
50914: PUSH
50915: EMPTY
50916: LIST
50917: LIST
50918: PUSH
50919: LD_INT 1
50921: PUSH
50922: LD_INT 0
50924: PUSH
50925: EMPTY
50926: LIST
50927: LIST
50928: PUSH
50929: LD_INT 1
50931: PUSH
50932: LD_INT 1
50934: PUSH
50935: EMPTY
50936: LIST
50937: LIST
50938: PUSH
50939: LD_INT 0
50941: PUSH
50942: LD_INT 1
50944: PUSH
50945: EMPTY
50946: LIST
50947: LIST
50948: PUSH
50949: LD_INT 1
50951: NEG
50952: PUSH
50953: LD_INT 0
50955: PUSH
50956: EMPTY
50957: LIST
50958: LIST
50959: PUSH
50960: LD_INT 1
50962: NEG
50963: PUSH
50964: LD_INT 1
50966: NEG
50967: PUSH
50968: EMPTY
50969: LIST
50970: LIST
50971: PUSH
50972: EMPTY
50973: LIST
50974: LIST
50975: LIST
50976: LIST
50977: LIST
50978: LIST
50979: LIST
50980: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50981: LD_ADDR_VAR 0 62
50985: PUSH
50986: LD_INT 0
50988: PUSH
50989: LD_INT 0
50991: PUSH
50992: EMPTY
50993: LIST
50994: LIST
50995: PUSH
50996: LD_INT 0
50998: PUSH
50999: LD_INT 1
51001: NEG
51002: PUSH
51003: EMPTY
51004: LIST
51005: LIST
51006: PUSH
51007: LD_INT 1
51009: PUSH
51010: LD_INT 0
51012: PUSH
51013: EMPTY
51014: LIST
51015: LIST
51016: PUSH
51017: LD_INT 1
51019: PUSH
51020: LD_INT 1
51022: PUSH
51023: EMPTY
51024: LIST
51025: LIST
51026: PUSH
51027: LD_INT 0
51029: PUSH
51030: LD_INT 1
51032: PUSH
51033: EMPTY
51034: LIST
51035: LIST
51036: PUSH
51037: LD_INT 1
51039: NEG
51040: PUSH
51041: LD_INT 0
51043: PUSH
51044: EMPTY
51045: LIST
51046: LIST
51047: PUSH
51048: LD_INT 1
51050: NEG
51051: PUSH
51052: LD_INT 1
51054: NEG
51055: PUSH
51056: EMPTY
51057: LIST
51058: LIST
51059: PUSH
51060: EMPTY
51061: LIST
51062: LIST
51063: LIST
51064: LIST
51065: LIST
51066: LIST
51067: LIST
51068: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51069: LD_ADDR_VAR 0 63
51073: PUSH
51074: LD_INT 0
51076: PUSH
51077: LD_INT 0
51079: PUSH
51080: EMPTY
51081: LIST
51082: LIST
51083: PUSH
51084: LD_INT 0
51086: PUSH
51087: LD_INT 1
51089: NEG
51090: PUSH
51091: EMPTY
51092: LIST
51093: LIST
51094: PUSH
51095: LD_INT 1
51097: PUSH
51098: LD_INT 0
51100: PUSH
51101: EMPTY
51102: LIST
51103: LIST
51104: PUSH
51105: LD_INT 1
51107: PUSH
51108: LD_INT 1
51110: PUSH
51111: EMPTY
51112: LIST
51113: LIST
51114: PUSH
51115: LD_INT 0
51117: PUSH
51118: LD_INT 1
51120: PUSH
51121: EMPTY
51122: LIST
51123: LIST
51124: PUSH
51125: LD_INT 1
51127: NEG
51128: PUSH
51129: LD_INT 0
51131: PUSH
51132: EMPTY
51133: LIST
51134: LIST
51135: PUSH
51136: LD_INT 1
51138: NEG
51139: PUSH
51140: LD_INT 1
51142: NEG
51143: PUSH
51144: EMPTY
51145: LIST
51146: LIST
51147: PUSH
51148: EMPTY
51149: LIST
51150: LIST
51151: LIST
51152: LIST
51153: LIST
51154: LIST
51155: LIST
51156: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51157: LD_ADDR_VAR 0 64
51161: PUSH
51162: LD_INT 0
51164: PUSH
51165: LD_INT 0
51167: PUSH
51168: EMPTY
51169: LIST
51170: LIST
51171: PUSH
51172: LD_INT 0
51174: PUSH
51175: LD_INT 1
51177: NEG
51178: PUSH
51179: EMPTY
51180: LIST
51181: LIST
51182: PUSH
51183: LD_INT 1
51185: PUSH
51186: LD_INT 0
51188: PUSH
51189: EMPTY
51190: LIST
51191: LIST
51192: PUSH
51193: LD_INT 1
51195: PUSH
51196: LD_INT 1
51198: PUSH
51199: EMPTY
51200: LIST
51201: LIST
51202: PUSH
51203: LD_INT 0
51205: PUSH
51206: LD_INT 1
51208: PUSH
51209: EMPTY
51210: LIST
51211: LIST
51212: PUSH
51213: LD_INT 1
51215: NEG
51216: PUSH
51217: LD_INT 0
51219: PUSH
51220: EMPTY
51221: LIST
51222: LIST
51223: PUSH
51224: LD_INT 1
51226: NEG
51227: PUSH
51228: LD_INT 1
51230: NEG
51231: PUSH
51232: EMPTY
51233: LIST
51234: LIST
51235: PUSH
51236: EMPTY
51237: LIST
51238: LIST
51239: LIST
51240: LIST
51241: LIST
51242: LIST
51243: LIST
51244: ST_TO_ADDR
// end ; 1 :
51245: GO 57142
51247: LD_INT 1
51249: DOUBLE
51250: EQUAL
51251: IFTRUE 51255
51253: GO 53878
51255: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51256: LD_ADDR_VAR 0 11
51260: PUSH
51261: LD_INT 1
51263: NEG
51264: PUSH
51265: LD_INT 3
51267: NEG
51268: PUSH
51269: EMPTY
51270: LIST
51271: LIST
51272: PUSH
51273: LD_INT 0
51275: PUSH
51276: LD_INT 3
51278: NEG
51279: PUSH
51280: EMPTY
51281: LIST
51282: LIST
51283: PUSH
51284: LD_INT 1
51286: PUSH
51287: LD_INT 2
51289: NEG
51290: PUSH
51291: EMPTY
51292: LIST
51293: LIST
51294: PUSH
51295: EMPTY
51296: LIST
51297: LIST
51298: LIST
51299: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51300: LD_ADDR_VAR 0 12
51304: PUSH
51305: LD_INT 2
51307: PUSH
51308: LD_INT 1
51310: NEG
51311: PUSH
51312: EMPTY
51313: LIST
51314: LIST
51315: PUSH
51316: LD_INT 3
51318: PUSH
51319: LD_INT 0
51321: PUSH
51322: EMPTY
51323: LIST
51324: LIST
51325: PUSH
51326: LD_INT 3
51328: PUSH
51329: LD_INT 1
51331: PUSH
51332: EMPTY
51333: LIST
51334: LIST
51335: PUSH
51336: EMPTY
51337: LIST
51338: LIST
51339: LIST
51340: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51341: LD_ADDR_VAR 0 13
51345: PUSH
51346: LD_INT 3
51348: PUSH
51349: LD_INT 2
51351: PUSH
51352: EMPTY
51353: LIST
51354: LIST
51355: PUSH
51356: LD_INT 3
51358: PUSH
51359: LD_INT 3
51361: PUSH
51362: EMPTY
51363: LIST
51364: LIST
51365: PUSH
51366: LD_INT 2
51368: PUSH
51369: LD_INT 3
51371: PUSH
51372: EMPTY
51373: LIST
51374: LIST
51375: PUSH
51376: EMPTY
51377: LIST
51378: LIST
51379: LIST
51380: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51381: LD_ADDR_VAR 0 14
51385: PUSH
51386: LD_INT 1
51388: PUSH
51389: LD_INT 3
51391: PUSH
51392: EMPTY
51393: LIST
51394: LIST
51395: PUSH
51396: LD_INT 0
51398: PUSH
51399: LD_INT 3
51401: PUSH
51402: EMPTY
51403: LIST
51404: LIST
51405: PUSH
51406: LD_INT 1
51408: NEG
51409: PUSH
51410: LD_INT 2
51412: PUSH
51413: EMPTY
51414: LIST
51415: LIST
51416: PUSH
51417: EMPTY
51418: LIST
51419: LIST
51420: LIST
51421: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51422: LD_ADDR_VAR 0 15
51426: PUSH
51427: LD_INT 2
51429: NEG
51430: PUSH
51431: LD_INT 1
51433: PUSH
51434: EMPTY
51435: LIST
51436: LIST
51437: PUSH
51438: LD_INT 3
51440: NEG
51441: PUSH
51442: LD_INT 0
51444: PUSH
51445: EMPTY
51446: LIST
51447: LIST
51448: PUSH
51449: LD_INT 3
51451: NEG
51452: PUSH
51453: LD_INT 1
51455: NEG
51456: PUSH
51457: EMPTY
51458: LIST
51459: LIST
51460: PUSH
51461: EMPTY
51462: LIST
51463: LIST
51464: LIST
51465: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51466: LD_ADDR_VAR 0 16
51470: PUSH
51471: LD_INT 2
51473: NEG
51474: PUSH
51475: LD_INT 3
51477: NEG
51478: PUSH
51479: EMPTY
51480: LIST
51481: LIST
51482: PUSH
51483: LD_INT 3
51485: NEG
51486: PUSH
51487: LD_INT 2
51489: NEG
51490: PUSH
51491: EMPTY
51492: LIST
51493: LIST
51494: PUSH
51495: LD_INT 3
51497: NEG
51498: PUSH
51499: LD_INT 3
51501: NEG
51502: PUSH
51503: EMPTY
51504: LIST
51505: LIST
51506: PUSH
51507: EMPTY
51508: LIST
51509: LIST
51510: LIST
51511: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51512: LD_ADDR_VAR 0 17
51516: PUSH
51517: LD_INT 1
51519: NEG
51520: PUSH
51521: LD_INT 3
51523: NEG
51524: PUSH
51525: EMPTY
51526: LIST
51527: LIST
51528: PUSH
51529: LD_INT 0
51531: PUSH
51532: LD_INT 3
51534: NEG
51535: PUSH
51536: EMPTY
51537: LIST
51538: LIST
51539: PUSH
51540: LD_INT 1
51542: PUSH
51543: LD_INT 2
51545: NEG
51546: PUSH
51547: EMPTY
51548: LIST
51549: LIST
51550: PUSH
51551: EMPTY
51552: LIST
51553: LIST
51554: LIST
51555: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51556: LD_ADDR_VAR 0 18
51560: PUSH
51561: LD_INT 2
51563: PUSH
51564: LD_INT 1
51566: NEG
51567: PUSH
51568: EMPTY
51569: LIST
51570: LIST
51571: PUSH
51572: LD_INT 3
51574: PUSH
51575: LD_INT 0
51577: PUSH
51578: EMPTY
51579: LIST
51580: LIST
51581: PUSH
51582: LD_INT 3
51584: PUSH
51585: LD_INT 1
51587: PUSH
51588: EMPTY
51589: LIST
51590: LIST
51591: PUSH
51592: EMPTY
51593: LIST
51594: LIST
51595: LIST
51596: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51597: LD_ADDR_VAR 0 19
51601: PUSH
51602: LD_INT 3
51604: PUSH
51605: LD_INT 2
51607: PUSH
51608: EMPTY
51609: LIST
51610: LIST
51611: PUSH
51612: LD_INT 3
51614: PUSH
51615: LD_INT 3
51617: PUSH
51618: EMPTY
51619: LIST
51620: LIST
51621: PUSH
51622: LD_INT 2
51624: PUSH
51625: LD_INT 3
51627: PUSH
51628: EMPTY
51629: LIST
51630: LIST
51631: PUSH
51632: EMPTY
51633: LIST
51634: LIST
51635: LIST
51636: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51637: LD_ADDR_VAR 0 20
51641: PUSH
51642: LD_INT 1
51644: PUSH
51645: LD_INT 3
51647: PUSH
51648: EMPTY
51649: LIST
51650: LIST
51651: PUSH
51652: LD_INT 0
51654: PUSH
51655: LD_INT 3
51657: PUSH
51658: EMPTY
51659: LIST
51660: LIST
51661: PUSH
51662: LD_INT 1
51664: NEG
51665: PUSH
51666: LD_INT 2
51668: PUSH
51669: EMPTY
51670: LIST
51671: LIST
51672: PUSH
51673: EMPTY
51674: LIST
51675: LIST
51676: LIST
51677: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51678: LD_ADDR_VAR 0 21
51682: PUSH
51683: LD_INT 2
51685: NEG
51686: PUSH
51687: LD_INT 1
51689: PUSH
51690: EMPTY
51691: LIST
51692: LIST
51693: PUSH
51694: LD_INT 3
51696: NEG
51697: PUSH
51698: LD_INT 0
51700: PUSH
51701: EMPTY
51702: LIST
51703: LIST
51704: PUSH
51705: LD_INT 3
51707: NEG
51708: PUSH
51709: LD_INT 1
51711: NEG
51712: PUSH
51713: EMPTY
51714: LIST
51715: LIST
51716: PUSH
51717: EMPTY
51718: LIST
51719: LIST
51720: LIST
51721: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51722: LD_ADDR_VAR 0 22
51726: PUSH
51727: LD_INT 2
51729: NEG
51730: PUSH
51731: LD_INT 3
51733: NEG
51734: PUSH
51735: EMPTY
51736: LIST
51737: LIST
51738: PUSH
51739: LD_INT 3
51741: NEG
51742: PUSH
51743: LD_INT 2
51745: NEG
51746: PUSH
51747: EMPTY
51748: LIST
51749: LIST
51750: PUSH
51751: LD_INT 3
51753: NEG
51754: PUSH
51755: LD_INT 3
51757: NEG
51758: PUSH
51759: EMPTY
51760: LIST
51761: LIST
51762: PUSH
51763: EMPTY
51764: LIST
51765: LIST
51766: LIST
51767: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
51768: LD_ADDR_VAR 0 23
51772: PUSH
51773: LD_INT 0
51775: PUSH
51776: LD_INT 3
51778: NEG
51779: PUSH
51780: EMPTY
51781: LIST
51782: LIST
51783: PUSH
51784: LD_INT 1
51786: NEG
51787: PUSH
51788: LD_INT 4
51790: NEG
51791: PUSH
51792: EMPTY
51793: LIST
51794: LIST
51795: PUSH
51796: LD_INT 1
51798: PUSH
51799: LD_INT 3
51801: NEG
51802: PUSH
51803: EMPTY
51804: LIST
51805: LIST
51806: PUSH
51807: EMPTY
51808: LIST
51809: LIST
51810: LIST
51811: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
51812: LD_ADDR_VAR 0 24
51816: PUSH
51817: LD_INT 3
51819: PUSH
51820: LD_INT 0
51822: PUSH
51823: EMPTY
51824: LIST
51825: LIST
51826: PUSH
51827: LD_INT 3
51829: PUSH
51830: LD_INT 1
51832: NEG
51833: PUSH
51834: EMPTY
51835: LIST
51836: LIST
51837: PUSH
51838: LD_INT 4
51840: PUSH
51841: LD_INT 1
51843: PUSH
51844: EMPTY
51845: LIST
51846: LIST
51847: PUSH
51848: EMPTY
51849: LIST
51850: LIST
51851: LIST
51852: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
51853: LD_ADDR_VAR 0 25
51857: PUSH
51858: LD_INT 3
51860: PUSH
51861: LD_INT 3
51863: PUSH
51864: EMPTY
51865: LIST
51866: LIST
51867: PUSH
51868: LD_INT 4
51870: PUSH
51871: LD_INT 3
51873: PUSH
51874: EMPTY
51875: LIST
51876: LIST
51877: PUSH
51878: LD_INT 3
51880: PUSH
51881: LD_INT 4
51883: PUSH
51884: EMPTY
51885: LIST
51886: LIST
51887: PUSH
51888: EMPTY
51889: LIST
51890: LIST
51891: LIST
51892: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
51893: LD_ADDR_VAR 0 26
51897: PUSH
51898: LD_INT 0
51900: PUSH
51901: LD_INT 3
51903: PUSH
51904: EMPTY
51905: LIST
51906: LIST
51907: PUSH
51908: LD_INT 1
51910: PUSH
51911: LD_INT 4
51913: PUSH
51914: EMPTY
51915: LIST
51916: LIST
51917: PUSH
51918: LD_INT 1
51920: NEG
51921: PUSH
51922: LD_INT 3
51924: PUSH
51925: EMPTY
51926: LIST
51927: LIST
51928: PUSH
51929: EMPTY
51930: LIST
51931: LIST
51932: LIST
51933: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
51934: LD_ADDR_VAR 0 27
51938: PUSH
51939: LD_INT 3
51941: NEG
51942: PUSH
51943: LD_INT 0
51945: PUSH
51946: EMPTY
51947: LIST
51948: LIST
51949: PUSH
51950: LD_INT 3
51952: NEG
51953: PUSH
51954: LD_INT 1
51956: PUSH
51957: EMPTY
51958: LIST
51959: LIST
51960: PUSH
51961: LD_INT 4
51963: NEG
51964: PUSH
51965: LD_INT 1
51967: NEG
51968: PUSH
51969: EMPTY
51970: LIST
51971: LIST
51972: PUSH
51973: EMPTY
51974: LIST
51975: LIST
51976: LIST
51977: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
51978: LD_ADDR_VAR 0 28
51982: PUSH
51983: LD_INT 3
51985: NEG
51986: PUSH
51987: LD_INT 3
51989: NEG
51990: PUSH
51991: EMPTY
51992: LIST
51993: LIST
51994: PUSH
51995: LD_INT 3
51997: NEG
51998: PUSH
51999: LD_INT 4
52001: NEG
52002: PUSH
52003: EMPTY
52004: LIST
52005: LIST
52006: PUSH
52007: LD_INT 4
52009: NEG
52010: PUSH
52011: LD_INT 3
52013: NEG
52014: PUSH
52015: EMPTY
52016: LIST
52017: LIST
52018: PUSH
52019: EMPTY
52020: LIST
52021: LIST
52022: LIST
52023: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
52024: LD_ADDR_VAR 0 29
52028: PUSH
52029: LD_INT 1
52031: NEG
52032: PUSH
52033: LD_INT 3
52035: NEG
52036: PUSH
52037: EMPTY
52038: LIST
52039: LIST
52040: PUSH
52041: LD_INT 0
52043: PUSH
52044: LD_INT 3
52046: NEG
52047: PUSH
52048: EMPTY
52049: LIST
52050: LIST
52051: PUSH
52052: LD_INT 1
52054: PUSH
52055: LD_INT 2
52057: NEG
52058: PUSH
52059: EMPTY
52060: LIST
52061: LIST
52062: PUSH
52063: LD_INT 1
52065: NEG
52066: PUSH
52067: LD_INT 4
52069: NEG
52070: PUSH
52071: EMPTY
52072: LIST
52073: LIST
52074: PUSH
52075: LD_INT 0
52077: PUSH
52078: LD_INT 4
52080: NEG
52081: PUSH
52082: EMPTY
52083: LIST
52084: LIST
52085: PUSH
52086: LD_INT 1
52088: PUSH
52089: LD_INT 3
52091: NEG
52092: PUSH
52093: EMPTY
52094: LIST
52095: LIST
52096: PUSH
52097: LD_INT 1
52099: NEG
52100: PUSH
52101: LD_INT 5
52103: NEG
52104: PUSH
52105: EMPTY
52106: LIST
52107: LIST
52108: PUSH
52109: LD_INT 0
52111: PUSH
52112: LD_INT 5
52114: NEG
52115: PUSH
52116: EMPTY
52117: LIST
52118: LIST
52119: PUSH
52120: LD_INT 1
52122: PUSH
52123: LD_INT 4
52125: NEG
52126: PUSH
52127: EMPTY
52128: LIST
52129: LIST
52130: PUSH
52131: LD_INT 1
52133: NEG
52134: PUSH
52135: LD_INT 6
52137: NEG
52138: PUSH
52139: EMPTY
52140: LIST
52141: LIST
52142: PUSH
52143: LD_INT 0
52145: PUSH
52146: LD_INT 6
52148: NEG
52149: PUSH
52150: EMPTY
52151: LIST
52152: LIST
52153: PUSH
52154: LD_INT 1
52156: PUSH
52157: LD_INT 5
52159: NEG
52160: PUSH
52161: EMPTY
52162: LIST
52163: LIST
52164: PUSH
52165: EMPTY
52166: LIST
52167: LIST
52168: LIST
52169: LIST
52170: LIST
52171: LIST
52172: LIST
52173: LIST
52174: LIST
52175: LIST
52176: LIST
52177: LIST
52178: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
52179: LD_ADDR_VAR 0 30
52183: PUSH
52184: LD_INT 2
52186: PUSH
52187: LD_INT 1
52189: NEG
52190: PUSH
52191: EMPTY
52192: LIST
52193: LIST
52194: PUSH
52195: LD_INT 3
52197: PUSH
52198: LD_INT 0
52200: PUSH
52201: EMPTY
52202: LIST
52203: LIST
52204: PUSH
52205: LD_INT 3
52207: PUSH
52208: LD_INT 1
52210: PUSH
52211: EMPTY
52212: LIST
52213: LIST
52214: PUSH
52215: LD_INT 3
52217: PUSH
52218: LD_INT 1
52220: NEG
52221: PUSH
52222: EMPTY
52223: LIST
52224: LIST
52225: PUSH
52226: LD_INT 4
52228: PUSH
52229: LD_INT 0
52231: PUSH
52232: EMPTY
52233: LIST
52234: LIST
52235: PUSH
52236: LD_INT 4
52238: PUSH
52239: LD_INT 1
52241: PUSH
52242: EMPTY
52243: LIST
52244: LIST
52245: PUSH
52246: LD_INT 4
52248: PUSH
52249: LD_INT 1
52251: NEG
52252: PUSH
52253: EMPTY
52254: LIST
52255: LIST
52256: PUSH
52257: LD_INT 5
52259: PUSH
52260: LD_INT 0
52262: PUSH
52263: EMPTY
52264: LIST
52265: LIST
52266: PUSH
52267: LD_INT 5
52269: PUSH
52270: LD_INT 1
52272: PUSH
52273: EMPTY
52274: LIST
52275: LIST
52276: PUSH
52277: LD_INT 5
52279: PUSH
52280: LD_INT 1
52282: NEG
52283: PUSH
52284: EMPTY
52285: LIST
52286: LIST
52287: PUSH
52288: LD_INT 6
52290: PUSH
52291: LD_INT 0
52293: PUSH
52294: EMPTY
52295: LIST
52296: LIST
52297: PUSH
52298: LD_INT 6
52300: PUSH
52301: LD_INT 1
52303: PUSH
52304: EMPTY
52305: LIST
52306: LIST
52307: PUSH
52308: EMPTY
52309: LIST
52310: LIST
52311: LIST
52312: LIST
52313: LIST
52314: LIST
52315: LIST
52316: LIST
52317: LIST
52318: LIST
52319: LIST
52320: LIST
52321: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
52322: LD_ADDR_VAR 0 31
52326: PUSH
52327: LD_INT 3
52329: PUSH
52330: LD_INT 2
52332: PUSH
52333: EMPTY
52334: LIST
52335: LIST
52336: PUSH
52337: LD_INT 3
52339: PUSH
52340: LD_INT 3
52342: PUSH
52343: EMPTY
52344: LIST
52345: LIST
52346: PUSH
52347: LD_INT 2
52349: PUSH
52350: LD_INT 3
52352: PUSH
52353: EMPTY
52354: LIST
52355: LIST
52356: PUSH
52357: LD_INT 4
52359: PUSH
52360: LD_INT 3
52362: PUSH
52363: EMPTY
52364: LIST
52365: LIST
52366: PUSH
52367: LD_INT 4
52369: PUSH
52370: LD_INT 4
52372: PUSH
52373: EMPTY
52374: LIST
52375: LIST
52376: PUSH
52377: LD_INT 3
52379: PUSH
52380: LD_INT 4
52382: PUSH
52383: EMPTY
52384: LIST
52385: LIST
52386: PUSH
52387: LD_INT 5
52389: PUSH
52390: LD_INT 4
52392: PUSH
52393: EMPTY
52394: LIST
52395: LIST
52396: PUSH
52397: LD_INT 5
52399: PUSH
52400: LD_INT 5
52402: PUSH
52403: EMPTY
52404: LIST
52405: LIST
52406: PUSH
52407: LD_INT 4
52409: PUSH
52410: LD_INT 5
52412: PUSH
52413: EMPTY
52414: LIST
52415: LIST
52416: PUSH
52417: LD_INT 6
52419: PUSH
52420: LD_INT 5
52422: PUSH
52423: EMPTY
52424: LIST
52425: LIST
52426: PUSH
52427: LD_INT 6
52429: PUSH
52430: LD_INT 6
52432: PUSH
52433: EMPTY
52434: LIST
52435: LIST
52436: PUSH
52437: LD_INT 5
52439: PUSH
52440: LD_INT 6
52442: PUSH
52443: EMPTY
52444: LIST
52445: LIST
52446: PUSH
52447: EMPTY
52448: LIST
52449: LIST
52450: LIST
52451: LIST
52452: LIST
52453: LIST
52454: LIST
52455: LIST
52456: LIST
52457: LIST
52458: LIST
52459: LIST
52460: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
52461: LD_ADDR_VAR 0 32
52465: PUSH
52466: LD_INT 1
52468: PUSH
52469: LD_INT 3
52471: PUSH
52472: EMPTY
52473: LIST
52474: LIST
52475: PUSH
52476: LD_INT 0
52478: PUSH
52479: LD_INT 3
52481: PUSH
52482: EMPTY
52483: LIST
52484: LIST
52485: PUSH
52486: LD_INT 1
52488: NEG
52489: PUSH
52490: LD_INT 2
52492: PUSH
52493: EMPTY
52494: LIST
52495: LIST
52496: PUSH
52497: LD_INT 1
52499: PUSH
52500: LD_INT 4
52502: PUSH
52503: EMPTY
52504: LIST
52505: LIST
52506: PUSH
52507: LD_INT 0
52509: PUSH
52510: LD_INT 4
52512: PUSH
52513: EMPTY
52514: LIST
52515: LIST
52516: PUSH
52517: LD_INT 1
52519: NEG
52520: PUSH
52521: LD_INT 3
52523: PUSH
52524: EMPTY
52525: LIST
52526: LIST
52527: PUSH
52528: LD_INT 1
52530: PUSH
52531: LD_INT 5
52533: PUSH
52534: EMPTY
52535: LIST
52536: LIST
52537: PUSH
52538: LD_INT 0
52540: PUSH
52541: LD_INT 5
52543: PUSH
52544: EMPTY
52545: LIST
52546: LIST
52547: PUSH
52548: LD_INT 1
52550: NEG
52551: PUSH
52552: LD_INT 4
52554: PUSH
52555: EMPTY
52556: LIST
52557: LIST
52558: PUSH
52559: LD_INT 1
52561: PUSH
52562: LD_INT 6
52564: PUSH
52565: EMPTY
52566: LIST
52567: LIST
52568: PUSH
52569: LD_INT 0
52571: PUSH
52572: LD_INT 6
52574: PUSH
52575: EMPTY
52576: LIST
52577: LIST
52578: PUSH
52579: LD_INT 1
52581: NEG
52582: PUSH
52583: LD_INT 5
52585: PUSH
52586: EMPTY
52587: LIST
52588: LIST
52589: PUSH
52590: EMPTY
52591: LIST
52592: LIST
52593: LIST
52594: LIST
52595: LIST
52596: LIST
52597: LIST
52598: LIST
52599: LIST
52600: LIST
52601: LIST
52602: LIST
52603: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
52604: LD_ADDR_VAR 0 33
52608: PUSH
52609: LD_INT 2
52611: NEG
52612: PUSH
52613: LD_INT 1
52615: PUSH
52616: EMPTY
52617: LIST
52618: LIST
52619: PUSH
52620: LD_INT 3
52622: NEG
52623: PUSH
52624: LD_INT 0
52626: PUSH
52627: EMPTY
52628: LIST
52629: LIST
52630: PUSH
52631: LD_INT 3
52633: NEG
52634: PUSH
52635: LD_INT 1
52637: NEG
52638: PUSH
52639: EMPTY
52640: LIST
52641: LIST
52642: PUSH
52643: LD_INT 3
52645: NEG
52646: PUSH
52647: LD_INT 1
52649: PUSH
52650: EMPTY
52651: LIST
52652: LIST
52653: PUSH
52654: LD_INT 4
52656: NEG
52657: PUSH
52658: LD_INT 0
52660: PUSH
52661: EMPTY
52662: LIST
52663: LIST
52664: PUSH
52665: LD_INT 4
52667: NEG
52668: PUSH
52669: LD_INT 1
52671: NEG
52672: PUSH
52673: EMPTY
52674: LIST
52675: LIST
52676: PUSH
52677: LD_INT 4
52679: NEG
52680: PUSH
52681: LD_INT 1
52683: PUSH
52684: EMPTY
52685: LIST
52686: LIST
52687: PUSH
52688: LD_INT 5
52690: NEG
52691: PUSH
52692: LD_INT 0
52694: PUSH
52695: EMPTY
52696: LIST
52697: LIST
52698: PUSH
52699: LD_INT 5
52701: NEG
52702: PUSH
52703: LD_INT 1
52705: NEG
52706: PUSH
52707: EMPTY
52708: LIST
52709: LIST
52710: PUSH
52711: LD_INT 5
52713: NEG
52714: PUSH
52715: LD_INT 1
52717: PUSH
52718: EMPTY
52719: LIST
52720: LIST
52721: PUSH
52722: LD_INT 6
52724: NEG
52725: PUSH
52726: LD_INT 0
52728: PUSH
52729: EMPTY
52730: LIST
52731: LIST
52732: PUSH
52733: LD_INT 6
52735: NEG
52736: PUSH
52737: LD_INT 1
52739: NEG
52740: PUSH
52741: EMPTY
52742: LIST
52743: LIST
52744: PUSH
52745: EMPTY
52746: LIST
52747: LIST
52748: LIST
52749: LIST
52750: LIST
52751: LIST
52752: LIST
52753: LIST
52754: LIST
52755: LIST
52756: LIST
52757: LIST
52758: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
52759: LD_ADDR_VAR 0 34
52763: PUSH
52764: LD_INT 2
52766: NEG
52767: PUSH
52768: LD_INT 3
52770: NEG
52771: PUSH
52772: EMPTY
52773: LIST
52774: LIST
52775: PUSH
52776: LD_INT 3
52778: NEG
52779: PUSH
52780: LD_INT 2
52782: NEG
52783: PUSH
52784: EMPTY
52785: LIST
52786: LIST
52787: PUSH
52788: LD_INT 3
52790: NEG
52791: PUSH
52792: LD_INT 3
52794: NEG
52795: PUSH
52796: EMPTY
52797: LIST
52798: LIST
52799: PUSH
52800: LD_INT 3
52802: NEG
52803: PUSH
52804: LD_INT 4
52806: NEG
52807: PUSH
52808: EMPTY
52809: LIST
52810: LIST
52811: PUSH
52812: LD_INT 4
52814: NEG
52815: PUSH
52816: LD_INT 3
52818: NEG
52819: PUSH
52820: EMPTY
52821: LIST
52822: LIST
52823: PUSH
52824: LD_INT 4
52826: NEG
52827: PUSH
52828: LD_INT 4
52830: NEG
52831: PUSH
52832: EMPTY
52833: LIST
52834: LIST
52835: PUSH
52836: LD_INT 4
52838: NEG
52839: PUSH
52840: LD_INT 5
52842: NEG
52843: PUSH
52844: EMPTY
52845: LIST
52846: LIST
52847: PUSH
52848: LD_INT 5
52850: NEG
52851: PUSH
52852: LD_INT 4
52854: NEG
52855: PUSH
52856: EMPTY
52857: LIST
52858: LIST
52859: PUSH
52860: LD_INT 5
52862: NEG
52863: PUSH
52864: LD_INT 5
52866: NEG
52867: PUSH
52868: EMPTY
52869: LIST
52870: LIST
52871: PUSH
52872: LD_INT 5
52874: NEG
52875: PUSH
52876: LD_INT 6
52878: NEG
52879: PUSH
52880: EMPTY
52881: LIST
52882: LIST
52883: PUSH
52884: LD_INT 6
52886: NEG
52887: PUSH
52888: LD_INT 5
52890: NEG
52891: PUSH
52892: EMPTY
52893: LIST
52894: LIST
52895: PUSH
52896: LD_INT 6
52898: NEG
52899: PUSH
52900: LD_INT 6
52902: NEG
52903: PUSH
52904: EMPTY
52905: LIST
52906: LIST
52907: PUSH
52908: EMPTY
52909: LIST
52910: LIST
52911: LIST
52912: LIST
52913: LIST
52914: LIST
52915: LIST
52916: LIST
52917: LIST
52918: LIST
52919: LIST
52920: LIST
52921: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
52922: LD_ADDR_VAR 0 41
52926: PUSH
52927: LD_INT 0
52929: PUSH
52930: LD_INT 2
52932: NEG
52933: PUSH
52934: EMPTY
52935: LIST
52936: LIST
52937: PUSH
52938: LD_INT 1
52940: NEG
52941: PUSH
52942: LD_INT 3
52944: NEG
52945: PUSH
52946: EMPTY
52947: LIST
52948: LIST
52949: PUSH
52950: LD_INT 1
52952: PUSH
52953: LD_INT 2
52955: NEG
52956: PUSH
52957: EMPTY
52958: LIST
52959: LIST
52960: PUSH
52961: EMPTY
52962: LIST
52963: LIST
52964: LIST
52965: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
52966: LD_ADDR_VAR 0 42
52970: PUSH
52971: LD_INT 2
52973: PUSH
52974: LD_INT 0
52976: PUSH
52977: EMPTY
52978: LIST
52979: LIST
52980: PUSH
52981: LD_INT 2
52983: PUSH
52984: LD_INT 1
52986: NEG
52987: PUSH
52988: EMPTY
52989: LIST
52990: LIST
52991: PUSH
52992: LD_INT 3
52994: PUSH
52995: LD_INT 1
52997: PUSH
52998: EMPTY
52999: LIST
53000: LIST
53001: PUSH
53002: EMPTY
53003: LIST
53004: LIST
53005: LIST
53006: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
53007: LD_ADDR_VAR 0 43
53011: PUSH
53012: LD_INT 2
53014: PUSH
53015: LD_INT 2
53017: PUSH
53018: EMPTY
53019: LIST
53020: LIST
53021: PUSH
53022: LD_INT 3
53024: PUSH
53025: LD_INT 2
53027: PUSH
53028: EMPTY
53029: LIST
53030: LIST
53031: PUSH
53032: LD_INT 2
53034: PUSH
53035: LD_INT 3
53037: PUSH
53038: EMPTY
53039: LIST
53040: LIST
53041: PUSH
53042: EMPTY
53043: LIST
53044: LIST
53045: LIST
53046: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
53047: LD_ADDR_VAR 0 44
53051: PUSH
53052: LD_INT 0
53054: PUSH
53055: LD_INT 2
53057: PUSH
53058: EMPTY
53059: LIST
53060: LIST
53061: PUSH
53062: LD_INT 1
53064: PUSH
53065: LD_INT 3
53067: PUSH
53068: EMPTY
53069: LIST
53070: LIST
53071: PUSH
53072: LD_INT 1
53074: NEG
53075: PUSH
53076: LD_INT 2
53078: PUSH
53079: EMPTY
53080: LIST
53081: LIST
53082: PUSH
53083: EMPTY
53084: LIST
53085: LIST
53086: LIST
53087: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53088: LD_ADDR_VAR 0 45
53092: PUSH
53093: LD_INT 2
53095: NEG
53096: PUSH
53097: LD_INT 0
53099: PUSH
53100: EMPTY
53101: LIST
53102: LIST
53103: PUSH
53104: LD_INT 2
53106: NEG
53107: PUSH
53108: LD_INT 1
53110: PUSH
53111: EMPTY
53112: LIST
53113: LIST
53114: PUSH
53115: LD_INT 3
53117: NEG
53118: PUSH
53119: LD_INT 1
53121: NEG
53122: PUSH
53123: EMPTY
53124: LIST
53125: LIST
53126: PUSH
53127: EMPTY
53128: LIST
53129: LIST
53130: LIST
53131: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
53132: LD_ADDR_VAR 0 46
53136: PUSH
53137: LD_INT 2
53139: NEG
53140: PUSH
53141: LD_INT 2
53143: NEG
53144: PUSH
53145: EMPTY
53146: LIST
53147: LIST
53148: PUSH
53149: LD_INT 2
53151: NEG
53152: PUSH
53153: LD_INT 3
53155: NEG
53156: PUSH
53157: EMPTY
53158: LIST
53159: LIST
53160: PUSH
53161: LD_INT 3
53163: NEG
53164: PUSH
53165: LD_INT 2
53167: NEG
53168: PUSH
53169: EMPTY
53170: LIST
53171: LIST
53172: PUSH
53173: EMPTY
53174: LIST
53175: LIST
53176: LIST
53177: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
53178: LD_ADDR_VAR 0 47
53182: PUSH
53183: LD_INT 2
53185: NEG
53186: PUSH
53187: LD_INT 3
53189: NEG
53190: PUSH
53191: EMPTY
53192: LIST
53193: LIST
53194: PUSH
53195: LD_INT 1
53197: NEG
53198: PUSH
53199: LD_INT 3
53201: NEG
53202: PUSH
53203: EMPTY
53204: LIST
53205: LIST
53206: PUSH
53207: EMPTY
53208: LIST
53209: LIST
53210: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
53211: LD_ADDR_VAR 0 48
53215: PUSH
53216: LD_INT 1
53218: PUSH
53219: LD_INT 2
53221: NEG
53222: PUSH
53223: EMPTY
53224: LIST
53225: LIST
53226: PUSH
53227: LD_INT 2
53229: PUSH
53230: LD_INT 1
53232: NEG
53233: PUSH
53234: EMPTY
53235: LIST
53236: LIST
53237: PUSH
53238: EMPTY
53239: LIST
53240: LIST
53241: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
53242: LD_ADDR_VAR 0 49
53246: PUSH
53247: LD_INT 3
53249: PUSH
53250: LD_INT 1
53252: PUSH
53253: EMPTY
53254: LIST
53255: LIST
53256: PUSH
53257: LD_INT 3
53259: PUSH
53260: LD_INT 2
53262: PUSH
53263: EMPTY
53264: LIST
53265: LIST
53266: PUSH
53267: EMPTY
53268: LIST
53269: LIST
53270: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
53271: LD_ADDR_VAR 0 50
53275: PUSH
53276: LD_INT 2
53278: PUSH
53279: LD_INT 3
53281: PUSH
53282: EMPTY
53283: LIST
53284: LIST
53285: PUSH
53286: LD_INT 1
53288: PUSH
53289: LD_INT 3
53291: PUSH
53292: EMPTY
53293: LIST
53294: LIST
53295: PUSH
53296: EMPTY
53297: LIST
53298: LIST
53299: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
53300: LD_ADDR_VAR 0 51
53304: PUSH
53305: LD_INT 1
53307: NEG
53308: PUSH
53309: LD_INT 2
53311: PUSH
53312: EMPTY
53313: LIST
53314: LIST
53315: PUSH
53316: LD_INT 2
53318: NEG
53319: PUSH
53320: LD_INT 1
53322: PUSH
53323: EMPTY
53324: LIST
53325: LIST
53326: PUSH
53327: EMPTY
53328: LIST
53329: LIST
53330: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
53331: LD_ADDR_VAR 0 52
53335: PUSH
53336: LD_INT 3
53338: NEG
53339: PUSH
53340: LD_INT 1
53342: NEG
53343: PUSH
53344: EMPTY
53345: LIST
53346: LIST
53347: PUSH
53348: LD_INT 3
53350: NEG
53351: PUSH
53352: LD_INT 2
53354: NEG
53355: PUSH
53356: EMPTY
53357: LIST
53358: LIST
53359: PUSH
53360: EMPTY
53361: LIST
53362: LIST
53363: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53364: LD_ADDR_VAR 0 53
53368: PUSH
53369: LD_INT 1
53371: NEG
53372: PUSH
53373: LD_INT 3
53375: NEG
53376: PUSH
53377: EMPTY
53378: LIST
53379: LIST
53380: PUSH
53381: LD_INT 0
53383: PUSH
53384: LD_INT 3
53386: NEG
53387: PUSH
53388: EMPTY
53389: LIST
53390: LIST
53391: PUSH
53392: LD_INT 1
53394: PUSH
53395: LD_INT 2
53397: NEG
53398: PUSH
53399: EMPTY
53400: LIST
53401: LIST
53402: PUSH
53403: EMPTY
53404: LIST
53405: LIST
53406: LIST
53407: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53408: LD_ADDR_VAR 0 54
53412: PUSH
53413: LD_INT 2
53415: PUSH
53416: LD_INT 1
53418: NEG
53419: PUSH
53420: EMPTY
53421: LIST
53422: LIST
53423: PUSH
53424: LD_INT 3
53426: PUSH
53427: LD_INT 0
53429: PUSH
53430: EMPTY
53431: LIST
53432: LIST
53433: PUSH
53434: LD_INT 3
53436: PUSH
53437: LD_INT 1
53439: PUSH
53440: EMPTY
53441: LIST
53442: LIST
53443: PUSH
53444: EMPTY
53445: LIST
53446: LIST
53447: LIST
53448: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53449: LD_ADDR_VAR 0 55
53453: PUSH
53454: LD_INT 3
53456: PUSH
53457: LD_INT 2
53459: PUSH
53460: EMPTY
53461: LIST
53462: LIST
53463: PUSH
53464: LD_INT 3
53466: PUSH
53467: LD_INT 3
53469: PUSH
53470: EMPTY
53471: LIST
53472: LIST
53473: PUSH
53474: LD_INT 2
53476: PUSH
53477: LD_INT 3
53479: PUSH
53480: EMPTY
53481: LIST
53482: LIST
53483: PUSH
53484: EMPTY
53485: LIST
53486: LIST
53487: LIST
53488: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53489: LD_ADDR_VAR 0 56
53493: PUSH
53494: LD_INT 1
53496: PUSH
53497: LD_INT 3
53499: PUSH
53500: EMPTY
53501: LIST
53502: LIST
53503: PUSH
53504: LD_INT 0
53506: PUSH
53507: LD_INT 3
53509: PUSH
53510: EMPTY
53511: LIST
53512: LIST
53513: PUSH
53514: LD_INT 1
53516: NEG
53517: PUSH
53518: LD_INT 2
53520: PUSH
53521: EMPTY
53522: LIST
53523: LIST
53524: PUSH
53525: EMPTY
53526: LIST
53527: LIST
53528: LIST
53529: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53530: LD_ADDR_VAR 0 57
53534: PUSH
53535: LD_INT 2
53537: NEG
53538: PUSH
53539: LD_INT 1
53541: PUSH
53542: EMPTY
53543: LIST
53544: LIST
53545: PUSH
53546: LD_INT 3
53548: NEG
53549: PUSH
53550: LD_INT 0
53552: PUSH
53553: EMPTY
53554: LIST
53555: LIST
53556: PUSH
53557: LD_INT 3
53559: NEG
53560: PUSH
53561: LD_INT 1
53563: NEG
53564: PUSH
53565: EMPTY
53566: LIST
53567: LIST
53568: PUSH
53569: EMPTY
53570: LIST
53571: LIST
53572: LIST
53573: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53574: LD_ADDR_VAR 0 58
53578: PUSH
53579: LD_INT 2
53581: NEG
53582: PUSH
53583: LD_INT 3
53585: NEG
53586: PUSH
53587: EMPTY
53588: LIST
53589: LIST
53590: PUSH
53591: LD_INT 3
53593: NEG
53594: PUSH
53595: LD_INT 2
53597: NEG
53598: PUSH
53599: EMPTY
53600: LIST
53601: LIST
53602: PUSH
53603: LD_INT 3
53605: NEG
53606: PUSH
53607: LD_INT 3
53609: NEG
53610: PUSH
53611: EMPTY
53612: LIST
53613: LIST
53614: PUSH
53615: EMPTY
53616: LIST
53617: LIST
53618: LIST
53619: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
53620: LD_ADDR_VAR 0 59
53624: PUSH
53625: LD_INT 1
53627: NEG
53628: PUSH
53629: LD_INT 2
53631: NEG
53632: PUSH
53633: EMPTY
53634: LIST
53635: LIST
53636: PUSH
53637: LD_INT 0
53639: PUSH
53640: LD_INT 2
53642: NEG
53643: PUSH
53644: EMPTY
53645: LIST
53646: LIST
53647: PUSH
53648: LD_INT 1
53650: PUSH
53651: LD_INT 1
53653: NEG
53654: PUSH
53655: EMPTY
53656: LIST
53657: LIST
53658: PUSH
53659: EMPTY
53660: LIST
53661: LIST
53662: LIST
53663: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
53664: LD_ADDR_VAR 0 60
53668: PUSH
53669: LD_INT 1
53671: PUSH
53672: LD_INT 1
53674: NEG
53675: PUSH
53676: EMPTY
53677: LIST
53678: LIST
53679: PUSH
53680: LD_INT 2
53682: PUSH
53683: LD_INT 0
53685: PUSH
53686: EMPTY
53687: LIST
53688: LIST
53689: PUSH
53690: LD_INT 2
53692: PUSH
53693: LD_INT 1
53695: PUSH
53696: EMPTY
53697: LIST
53698: LIST
53699: PUSH
53700: EMPTY
53701: LIST
53702: LIST
53703: LIST
53704: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
53705: LD_ADDR_VAR 0 61
53709: PUSH
53710: LD_INT 2
53712: PUSH
53713: LD_INT 1
53715: PUSH
53716: EMPTY
53717: LIST
53718: LIST
53719: PUSH
53720: LD_INT 2
53722: PUSH
53723: LD_INT 2
53725: PUSH
53726: EMPTY
53727: LIST
53728: LIST
53729: PUSH
53730: LD_INT 1
53732: PUSH
53733: LD_INT 2
53735: PUSH
53736: EMPTY
53737: LIST
53738: LIST
53739: PUSH
53740: EMPTY
53741: LIST
53742: LIST
53743: LIST
53744: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
53745: LD_ADDR_VAR 0 62
53749: PUSH
53750: LD_INT 1
53752: PUSH
53753: LD_INT 2
53755: PUSH
53756: EMPTY
53757: LIST
53758: LIST
53759: PUSH
53760: LD_INT 0
53762: PUSH
53763: LD_INT 2
53765: PUSH
53766: EMPTY
53767: LIST
53768: LIST
53769: PUSH
53770: LD_INT 1
53772: NEG
53773: PUSH
53774: LD_INT 1
53776: PUSH
53777: EMPTY
53778: LIST
53779: LIST
53780: PUSH
53781: EMPTY
53782: LIST
53783: LIST
53784: LIST
53785: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
53786: LD_ADDR_VAR 0 63
53790: PUSH
53791: LD_INT 1
53793: NEG
53794: PUSH
53795: LD_INT 1
53797: PUSH
53798: EMPTY
53799: LIST
53800: LIST
53801: PUSH
53802: LD_INT 2
53804: NEG
53805: PUSH
53806: LD_INT 0
53808: PUSH
53809: EMPTY
53810: LIST
53811: LIST
53812: PUSH
53813: LD_INT 2
53815: NEG
53816: PUSH
53817: LD_INT 1
53819: NEG
53820: PUSH
53821: EMPTY
53822: LIST
53823: LIST
53824: PUSH
53825: EMPTY
53826: LIST
53827: LIST
53828: LIST
53829: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53830: LD_ADDR_VAR 0 64
53834: PUSH
53835: LD_INT 1
53837: NEG
53838: PUSH
53839: LD_INT 2
53841: NEG
53842: PUSH
53843: EMPTY
53844: LIST
53845: LIST
53846: PUSH
53847: LD_INT 2
53849: NEG
53850: PUSH
53851: LD_INT 1
53853: NEG
53854: PUSH
53855: EMPTY
53856: LIST
53857: LIST
53858: PUSH
53859: LD_INT 2
53861: NEG
53862: PUSH
53863: LD_INT 2
53865: NEG
53866: PUSH
53867: EMPTY
53868: LIST
53869: LIST
53870: PUSH
53871: EMPTY
53872: LIST
53873: LIST
53874: LIST
53875: ST_TO_ADDR
// end ; 2 :
53876: GO 57142
53878: LD_INT 2
53880: DOUBLE
53881: EQUAL
53882: IFTRUE 53886
53884: GO 57141
53886: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
53887: LD_ADDR_VAR 0 29
53891: PUSH
53892: LD_INT 4
53894: PUSH
53895: LD_INT 0
53897: PUSH
53898: EMPTY
53899: LIST
53900: LIST
53901: PUSH
53902: LD_INT 4
53904: PUSH
53905: LD_INT 1
53907: NEG
53908: PUSH
53909: EMPTY
53910: LIST
53911: LIST
53912: PUSH
53913: LD_INT 5
53915: PUSH
53916: LD_INT 0
53918: PUSH
53919: EMPTY
53920: LIST
53921: LIST
53922: PUSH
53923: LD_INT 5
53925: PUSH
53926: LD_INT 1
53928: PUSH
53929: EMPTY
53930: LIST
53931: LIST
53932: PUSH
53933: LD_INT 4
53935: PUSH
53936: LD_INT 1
53938: PUSH
53939: EMPTY
53940: LIST
53941: LIST
53942: PUSH
53943: LD_INT 3
53945: PUSH
53946: LD_INT 0
53948: PUSH
53949: EMPTY
53950: LIST
53951: LIST
53952: PUSH
53953: LD_INT 3
53955: PUSH
53956: LD_INT 1
53958: NEG
53959: PUSH
53960: EMPTY
53961: LIST
53962: LIST
53963: PUSH
53964: LD_INT 3
53966: PUSH
53967: LD_INT 2
53969: NEG
53970: PUSH
53971: EMPTY
53972: LIST
53973: LIST
53974: PUSH
53975: LD_INT 5
53977: PUSH
53978: LD_INT 2
53980: PUSH
53981: EMPTY
53982: LIST
53983: LIST
53984: PUSH
53985: LD_INT 3
53987: PUSH
53988: LD_INT 3
53990: PUSH
53991: EMPTY
53992: LIST
53993: LIST
53994: PUSH
53995: LD_INT 3
53997: PUSH
53998: LD_INT 2
54000: PUSH
54001: EMPTY
54002: LIST
54003: LIST
54004: PUSH
54005: LD_INT 4
54007: PUSH
54008: LD_INT 3
54010: PUSH
54011: EMPTY
54012: LIST
54013: LIST
54014: PUSH
54015: LD_INT 4
54017: PUSH
54018: LD_INT 4
54020: PUSH
54021: EMPTY
54022: LIST
54023: LIST
54024: PUSH
54025: LD_INT 3
54027: PUSH
54028: LD_INT 4
54030: PUSH
54031: EMPTY
54032: LIST
54033: LIST
54034: PUSH
54035: LD_INT 2
54037: PUSH
54038: LD_INT 3
54040: PUSH
54041: EMPTY
54042: LIST
54043: LIST
54044: PUSH
54045: LD_INT 2
54047: PUSH
54048: LD_INT 2
54050: PUSH
54051: EMPTY
54052: LIST
54053: LIST
54054: PUSH
54055: LD_INT 4
54057: PUSH
54058: LD_INT 2
54060: PUSH
54061: EMPTY
54062: LIST
54063: LIST
54064: PUSH
54065: LD_INT 2
54067: PUSH
54068: LD_INT 4
54070: PUSH
54071: EMPTY
54072: LIST
54073: LIST
54074: PUSH
54075: LD_INT 0
54077: PUSH
54078: LD_INT 4
54080: PUSH
54081: EMPTY
54082: LIST
54083: LIST
54084: PUSH
54085: LD_INT 0
54087: PUSH
54088: LD_INT 3
54090: PUSH
54091: EMPTY
54092: LIST
54093: LIST
54094: PUSH
54095: LD_INT 1
54097: PUSH
54098: LD_INT 4
54100: PUSH
54101: EMPTY
54102: LIST
54103: LIST
54104: PUSH
54105: LD_INT 1
54107: PUSH
54108: LD_INT 5
54110: PUSH
54111: EMPTY
54112: LIST
54113: LIST
54114: PUSH
54115: LD_INT 0
54117: PUSH
54118: LD_INT 5
54120: PUSH
54121: EMPTY
54122: LIST
54123: LIST
54124: PUSH
54125: LD_INT 1
54127: NEG
54128: PUSH
54129: LD_INT 4
54131: PUSH
54132: EMPTY
54133: LIST
54134: LIST
54135: PUSH
54136: LD_INT 1
54138: NEG
54139: PUSH
54140: LD_INT 3
54142: PUSH
54143: EMPTY
54144: LIST
54145: LIST
54146: PUSH
54147: LD_INT 2
54149: PUSH
54150: LD_INT 5
54152: PUSH
54153: EMPTY
54154: LIST
54155: LIST
54156: PUSH
54157: LD_INT 2
54159: NEG
54160: PUSH
54161: LD_INT 3
54163: PUSH
54164: EMPTY
54165: LIST
54166: LIST
54167: PUSH
54168: LD_INT 3
54170: NEG
54171: PUSH
54172: LD_INT 0
54174: PUSH
54175: EMPTY
54176: LIST
54177: LIST
54178: PUSH
54179: LD_INT 3
54181: NEG
54182: PUSH
54183: LD_INT 1
54185: NEG
54186: PUSH
54187: EMPTY
54188: LIST
54189: LIST
54190: PUSH
54191: LD_INT 2
54193: NEG
54194: PUSH
54195: LD_INT 0
54197: PUSH
54198: EMPTY
54199: LIST
54200: LIST
54201: PUSH
54202: LD_INT 2
54204: NEG
54205: PUSH
54206: LD_INT 1
54208: PUSH
54209: EMPTY
54210: LIST
54211: LIST
54212: PUSH
54213: LD_INT 3
54215: NEG
54216: PUSH
54217: LD_INT 1
54219: PUSH
54220: EMPTY
54221: LIST
54222: LIST
54223: PUSH
54224: LD_INT 4
54226: NEG
54227: PUSH
54228: LD_INT 0
54230: PUSH
54231: EMPTY
54232: LIST
54233: LIST
54234: PUSH
54235: LD_INT 4
54237: NEG
54238: PUSH
54239: LD_INT 1
54241: NEG
54242: PUSH
54243: EMPTY
54244: LIST
54245: LIST
54246: PUSH
54247: LD_INT 4
54249: NEG
54250: PUSH
54251: LD_INT 2
54253: NEG
54254: PUSH
54255: EMPTY
54256: LIST
54257: LIST
54258: PUSH
54259: LD_INT 2
54261: NEG
54262: PUSH
54263: LD_INT 2
54265: PUSH
54266: EMPTY
54267: LIST
54268: LIST
54269: PUSH
54270: LD_INT 4
54272: NEG
54273: PUSH
54274: LD_INT 4
54276: NEG
54277: PUSH
54278: EMPTY
54279: LIST
54280: LIST
54281: PUSH
54282: LD_INT 4
54284: NEG
54285: PUSH
54286: LD_INT 5
54288: NEG
54289: PUSH
54290: EMPTY
54291: LIST
54292: LIST
54293: PUSH
54294: LD_INT 3
54296: NEG
54297: PUSH
54298: LD_INT 4
54300: NEG
54301: PUSH
54302: EMPTY
54303: LIST
54304: LIST
54305: PUSH
54306: LD_INT 3
54308: NEG
54309: PUSH
54310: LD_INT 3
54312: NEG
54313: PUSH
54314: EMPTY
54315: LIST
54316: LIST
54317: PUSH
54318: LD_INT 4
54320: NEG
54321: PUSH
54322: LD_INT 3
54324: NEG
54325: PUSH
54326: EMPTY
54327: LIST
54328: LIST
54329: PUSH
54330: LD_INT 5
54332: NEG
54333: PUSH
54334: LD_INT 4
54336: NEG
54337: PUSH
54338: EMPTY
54339: LIST
54340: LIST
54341: PUSH
54342: LD_INT 5
54344: NEG
54345: PUSH
54346: LD_INT 5
54348: NEG
54349: PUSH
54350: EMPTY
54351: LIST
54352: LIST
54353: PUSH
54354: LD_INT 3
54356: NEG
54357: PUSH
54358: LD_INT 5
54360: NEG
54361: PUSH
54362: EMPTY
54363: LIST
54364: LIST
54365: PUSH
54366: LD_INT 5
54368: NEG
54369: PUSH
54370: LD_INT 3
54372: NEG
54373: PUSH
54374: EMPTY
54375: LIST
54376: LIST
54377: PUSH
54378: EMPTY
54379: LIST
54380: LIST
54381: LIST
54382: LIST
54383: LIST
54384: LIST
54385: LIST
54386: LIST
54387: LIST
54388: LIST
54389: LIST
54390: LIST
54391: LIST
54392: LIST
54393: LIST
54394: LIST
54395: LIST
54396: LIST
54397: LIST
54398: LIST
54399: LIST
54400: LIST
54401: LIST
54402: LIST
54403: LIST
54404: LIST
54405: LIST
54406: LIST
54407: LIST
54408: LIST
54409: LIST
54410: LIST
54411: LIST
54412: LIST
54413: LIST
54414: LIST
54415: LIST
54416: LIST
54417: LIST
54418: LIST
54419: LIST
54420: LIST
54421: LIST
54422: LIST
54423: LIST
54424: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
54425: LD_ADDR_VAR 0 30
54429: PUSH
54430: LD_INT 4
54432: PUSH
54433: LD_INT 4
54435: PUSH
54436: EMPTY
54437: LIST
54438: LIST
54439: PUSH
54440: LD_INT 4
54442: PUSH
54443: LD_INT 3
54445: PUSH
54446: EMPTY
54447: LIST
54448: LIST
54449: PUSH
54450: LD_INT 5
54452: PUSH
54453: LD_INT 4
54455: PUSH
54456: EMPTY
54457: LIST
54458: LIST
54459: PUSH
54460: LD_INT 5
54462: PUSH
54463: LD_INT 5
54465: PUSH
54466: EMPTY
54467: LIST
54468: LIST
54469: PUSH
54470: LD_INT 4
54472: PUSH
54473: LD_INT 5
54475: PUSH
54476: EMPTY
54477: LIST
54478: LIST
54479: PUSH
54480: LD_INT 3
54482: PUSH
54483: LD_INT 4
54485: PUSH
54486: EMPTY
54487: LIST
54488: LIST
54489: PUSH
54490: LD_INT 3
54492: PUSH
54493: LD_INT 3
54495: PUSH
54496: EMPTY
54497: LIST
54498: LIST
54499: PUSH
54500: LD_INT 5
54502: PUSH
54503: LD_INT 3
54505: PUSH
54506: EMPTY
54507: LIST
54508: LIST
54509: PUSH
54510: LD_INT 3
54512: PUSH
54513: LD_INT 5
54515: PUSH
54516: EMPTY
54517: LIST
54518: LIST
54519: PUSH
54520: LD_INT 0
54522: PUSH
54523: LD_INT 3
54525: PUSH
54526: EMPTY
54527: LIST
54528: LIST
54529: PUSH
54530: LD_INT 0
54532: PUSH
54533: LD_INT 2
54535: PUSH
54536: EMPTY
54537: LIST
54538: LIST
54539: PUSH
54540: LD_INT 1
54542: PUSH
54543: LD_INT 3
54545: PUSH
54546: EMPTY
54547: LIST
54548: LIST
54549: PUSH
54550: LD_INT 1
54552: PUSH
54553: LD_INT 4
54555: PUSH
54556: EMPTY
54557: LIST
54558: LIST
54559: PUSH
54560: LD_INT 0
54562: PUSH
54563: LD_INT 4
54565: PUSH
54566: EMPTY
54567: LIST
54568: LIST
54569: PUSH
54570: LD_INT 1
54572: NEG
54573: PUSH
54574: LD_INT 3
54576: PUSH
54577: EMPTY
54578: LIST
54579: LIST
54580: PUSH
54581: LD_INT 1
54583: NEG
54584: PUSH
54585: LD_INT 2
54587: PUSH
54588: EMPTY
54589: LIST
54590: LIST
54591: PUSH
54592: LD_INT 2
54594: PUSH
54595: LD_INT 4
54597: PUSH
54598: EMPTY
54599: LIST
54600: LIST
54601: PUSH
54602: LD_INT 2
54604: NEG
54605: PUSH
54606: LD_INT 2
54608: PUSH
54609: EMPTY
54610: LIST
54611: LIST
54612: PUSH
54613: LD_INT 4
54615: NEG
54616: PUSH
54617: LD_INT 0
54619: PUSH
54620: EMPTY
54621: LIST
54622: LIST
54623: PUSH
54624: LD_INT 4
54626: NEG
54627: PUSH
54628: LD_INT 1
54630: NEG
54631: PUSH
54632: EMPTY
54633: LIST
54634: LIST
54635: PUSH
54636: LD_INT 3
54638: NEG
54639: PUSH
54640: LD_INT 0
54642: PUSH
54643: EMPTY
54644: LIST
54645: LIST
54646: PUSH
54647: LD_INT 3
54649: NEG
54650: PUSH
54651: LD_INT 1
54653: PUSH
54654: EMPTY
54655: LIST
54656: LIST
54657: PUSH
54658: LD_INT 4
54660: NEG
54661: PUSH
54662: LD_INT 1
54664: PUSH
54665: EMPTY
54666: LIST
54667: LIST
54668: PUSH
54669: LD_INT 5
54671: NEG
54672: PUSH
54673: LD_INT 0
54675: PUSH
54676: EMPTY
54677: LIST
54678: LIST
54679: PUSH
54680: LD_INT 5
54682: NEG
54683: PUSH
54684: LD_INT 1
54686: NEG
54687: PUSH
54688: EMPTY
54689: LIST
54690: LIST
54691: PUSH
54692: LD_INT 5
54694: NEG
54695: PUSH
54696: LD_INT 2
54698: NEG
54699: PUSH
54700: EMPTY
54701: LIST
54702: LIST
54703: PUSH
54704: LD_INT 3
54706: NEG
54707: PUSH
54708: LD_INT 2
54710: PUSH
54711: EMPTY
54712: LIST
54713: LIST
54714: PUSH
54715: LD_INT 3
54717: NEG
54718: PUSH
54719: LD_INT 3
54721: NEG
54722: PUSH
54723: EMPTY
54724: LIST
54725: LIST
54726: PUSH
54727: LD_INT 3
54729: NEG
54730: PUSH
54731: LD_INT 4
54733: NEG
54734: PUSH
54735: EMPTY
54736: LIST
54737: LIST
54738: PUSH
54739: LD_INT 2
54741: NEG
54742: PUSH
54743: LD_INT 3
54745: NEG
54746: PUSH
54747: EMPTY
54748: LIST
54749: LIST
54750: PUSH
54751: LD_INT 2
54753: NEG
54754: PUSH
54755: LD_INT 2
54757: NEG
54758: PUSH
54759: EMPTY
54760: LIST
54761: LIST
54762: PUSH
54763: LD_INT 3
54765: NEG
54766: PUSH
54767: LD_INT 2
54769: NEG
54770: PUSH
54771: EMPTY
54772: LIST
54773: LIST
54774: PUSH
54775: LD_INT 4
54777: NEG
54778: PUSH
54779: LD_INT 3
54781: NEG
54782: PUSH
54783: EMPTY
54784: LIST
54785: LIST
54786: PUSH
54787: LD_INT 4
54789: NEG
54790: PUSH
54791: LD_INT 4
54793: NEG
54794: PUSH
54795: EMPTY
54796: LIST
54797: LIST
54798: PUSH
54799: LD_INT 2
54801: NEG
54802: PUSH
54803: LD_INT 4
54805: NEG
54806: PUSH
54807: EMPTY
54808: LIST
54809: LIST
54810: PUSH
54811: LD_INT 4
54813: NEG
54814: PUSH
54815: LD_INT 2
54817: NEG
54818: PUSH
54819: EMPTY
54820: LIST
54821: LIST
54822: PUSH
54823: LD_INT 0
54825: PUSH
54826: LD_INT 4
54828: NEG
54829: PUSH
54830: EMPTY
54831: LIST
54832: LIST
54833: PUSH
54834: LD_INT 0
54836: PUSH
54837: LD_INT 5
54839: NEG
54840: PUSH
54841: EMPTY
54842: LIST
54843: LIST
54844: PUSH
54845: LD_INT 1
54847: PUSH
54848: LD_INT 4
54850: NEG
54851: PUSH
54852: EMPTY
54853: LIST
54854: LIST
54855: PUSH
54856: LD_INT 1
54858: PUSH
54859: LD_INT 3
54861: NEG
54862: PUSH
54863: EMPTY
54864: LIST
54865: LIST
54866: PUSH
54867: LD_INT 0
54869: PUSH
54870: LD_INT 3
54872: NEG
54873: PUSH
54874: EMPTY
54875: LIST
54876: LIST
54877: PUSH
54878: LD_INT 1
54880: NEG
54881: PUSH
54882: LD_INT 4
54884: NEG
54885: PUSH
54886: EMPTY
54887: LIST
54888: LIST
54889: PUSH
54890: LD_INT 1
54892: NEG
54893: PUSH
54894: LD_INT 5
54896: NEG
54897: PUSH
54898: EMPTY
54899: LIST
54900: LIST
54901: PUSH
54902: LD_INT 2
54904: PUSH
54905: LD_INT 3
54907: NEG
54908: PUSH
54909: EMPTY
54910: LIST
54911: LIST
54912: PUSH
54913: LD_INT 2
54915: NEG
54916: PUSH
54917: LD_INT 5
54919: NEG
54920: PUSH
54921: EMPTY
54922: LIST
54923: LIST
54924: PUSH
54925: EMPTY
54926: LIST
54927: LIST
54928: LIST
54929: LIST
54930: LIST
54931: LIST
54932: LIST
54933: LIST
54934: LIST
54935: LIST
54936: LIST
54937: LIST
54938: LIST
54939: LIST
54940: LIST
54941: LIST
54942: LIST
54943: LIST
54944: LIST
54945: LIST
54946: LIST
54947: LIST
54948: LIST
54949: LIST
54950: LIST
54951: LIST
54952: LIST
54953: LIST
54954: LIST
54955: LIST
54956: LIST
54957: LIST
54958: LIST
54959: LIST
54960: LIST
54961: LIST
54962: LIST
54963: LIST
54964: LIST
54965: LIST
54966: LIST
54967: LIST
54968: LIST
54969: LIST
54970: LIST
54971: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
54972: LD_ADDR_VAR 0 31
54976: PUSH
54977: LD_INT 0
54979: PUSH
54980: LD_INT 4
54982: PUSH
54983: EMPTY
54984: LIST
54985: LIST
54986: PUSH
54987: LD_INT 0
54989: PUSH
54990: LD_INT 3
54992: PUSH
54993: EMPTY
54994: LIST
54995: LIST
54996: PUSH
54997: LD_INT 1
54999: PUSH
55000: LD_INT 4
55002: PUSH
55003: EMPTY
55004: LIST
55005: LIST
55006: PUSH
55007: LD_INT 1
55009: PUSH
55010: LD_INT 5
55012: PUSH
55013: EMPTY
55014: LIST
55015: LIST
55016: PUSH
55017: LD_INT 0
55019: PUSH
55020: LD_INT 5
55022: PUSH
55023: EMPTY
55024: LIST
55025: LIST
55026: PUSH
55027: LD_INT 1
55029: NEG
55030: PUSH
55031: LD_INT 4
55033: PUSH
55034: EMPTY
55035: LIST
55036: LIST
55037: PUSH
55038: LD_INT 1
55040: NEG
55041: PUSH
55042: LD_INT 3
55044: PUSH
55045: EMPTY
55046: LIST
55047: LIST
55048: PUSH
55049: LD_INT 2
55051: PUSH
55052: LD_INT 5
55054: PUSH
55055: EMPTY
55056: LIST
55057: LIST
55058: PUSH
55059: LD_INT 2
55061: NEG
55062: PUSH
55063: LD_INT 3
55065: PUSH
55066: EMPTY
55067: LIST
55068: LIST
55069: PUSH
55070: LD_INT 3
55072: NEG
55073: PUSH
55074: LD_INT 0
55076: PUSH
55077: EMPTY
55078: LIST
55079: LIST
55080: PUSH
55081: LD_INT 3
55083: NEG
55084: PUSH
55085: LD_INT 1
55087: NEG
55088: PUSH
55089: EMPTY
55090: LIST
55091: LIST
55092: PUSH
55093: LD_INT 2
55095: NEG
55096: PUSH
55097: LD_INT 0
55099: PUSH
55100: EMPTY
55101: LIST
55102: LIST
55103: PUSH
55104: LD_INT 2
55106: NEG
55107: PUSH
55108: LD_INT 1
55110: PUSH
55111: EMPTY
55112: LIST
55113: LIST
55114: PUSH
55115: LD_INT 3
55117: NEG
55118: PUSH
55119: LD_INT 1
55121: PUSH
55122: EMPTY
55123: LIST
55124: LIST
55125: PUSH
55126: LD_INT 4
55128: NEG
55129: PUSH
55130: LD_INT 0
55132: PUSH
55133: EMPTY
55134: LIST
55135: LIST
55136: PUSH
55137: LD_INT 4
55139: NEG
55140: PUSH
55141: LD_INT 1
55143: NEG
55144: PUSH
55145: EMPTY
55146: LIST
55147: LIST
55148: PUSH
55149: LD_INT 4
55151: NEG
55152: PUSH
55153: LD_INT 2
55155: NEG
55156: PUSH
55157: EMPTY
55158: LIST
55159: LIST
55160: PUSH
55161: LD_INT 2
55163: NEG
55164: PUSH
55165: LD_INT 2
55167: PUSH
55168: EMPTY
55169: LIST
55170: LIST
55171: PUSH
55172: LD_INT 4
55174: NEG
55175: PUSH
55176: LD_INT 4
55178: NEG
55179: PUSH
55180: EMPTY
55181: LIST
55182: LIST
55183: PUSH
55184: LD_INT 4
55186: NEG
55187: PUSH
55188: LD_INT 5
55190: NEG
55191: PUSH
55192: EMPTY
55193: LIST
55194: LIST
55195: PUSH
55196: LD_INT 3
55198: NEG
55199: PUSH
55200: LD_INT 4
55202: NEG
55203: PUSH
55204: EMPTY
55205: LIST
55206: LIST
55207: PUSH
55208: LD_INT 3
55210: NEG
55211: PUSH
55212: LD_INT 3
55214: NEG
55215: PUSH
55216: EMPTY
55217: LIST
55218: LIST
55219: PUSH
55220: LD_INT 4
55222: NEG
55223: PUSH
55224: LD_INT 3
55226: NEG
55227: PUSH
55228: EMPTY
55229: LIST
55230: LIST
55231: PUSH
55232: LD_INT 5
55234: NEG
55235: PUSH
55236: LD_INT 4
55238: NEG
55239: PUSH
55240: EMPTY
55241: LIST
55242: LIST
55243: PUSH
55244: LD_INT 5
55246: NEG
55247: PUSH
55248: LD_INT 5
55250: NEG
55251: PUSH
55252: EMPTY
55253: LIST
55254: LIST
55255: PUSH
55256: LD_INT 3
55258: NEG
55259: PUSH
55260: LD_INT 5
55262: NEG
55263: PUSH
55264: EMPTY
55265: LIST
55266: LIST
55267: PUSH
55268: LD_INT 5
55270: NEG
55271: PUSH
55272: LD_INT 3
55274: NEG
55275: PUSH
55276: EMPTY
55277: LIST
55278: LIST
55279: PUSH
55280: LD_INT 0
55282: PUSH
55283: LD_INT 3
55285: NEG
55286: PUSH
55287: EMPTY
55288: LIST
55289: LIST
55290: PUSH
55291: LD_INT 0
55293: PUSH
55294: LD_INT 4
55296: NEG
55297: PUSH
55298: EMPTY
55299: LIST
55300: LIST
55301: PUSH
55302: LD_INT 1
55304: PUSH
55305: LD_INT 3
55307: NEG
55308: PUSH
55309: EMPTY
55310: LIST
55311: LIST
55312: PUSH
55313: LD_INT 1
55315: PUSH
55316: LD_INT 2
55318: NEG
55319: PUSH
55320: EMPTY
55321: LIST
55322: LIST
55323: PUSH
55324: LD_INT 0
55326: PUSH
55327: LD_INT 2
55329: NEG
55330: PUSH
55331: EMPTY
55332: LIST
55333: LIST
55334: PUSH
55335: LD_INT 1
55337: NEG
55338: PUSH
55339: LD_INT 3
55341: NEG
55342: PUSH
55343: EMPTY
55344: LIST
55345: LIST
55346: PUSH
55347: LD_INT 1
55349: NEG
55350: PUSH
55351: LD_INT 4
55353: NEG
55354: PUSH
55355: EMPTY
55356: LIST
55357: LIST
55358: PUSH
55359: LD_INT 2
55361: PUSH
55362: LD_INT 2
55364: NEG
55365: PUSH
55366: EMPTY
55367: LIST
55368: LIST
55369: PUSH
55370: LD_INT 2
55372: NEG
55373: PUSH
55374: LD_INT 4
55376: NEG
55377: PUSH
55378: EMPTY
55379: LIST
55380: LIST
55381: PUSH
55382: LD_INT 4
55384: PUSH
55385: LD_INT 0
55387: PUSH
55388: EMPTY
55389: LIST
55390: LIST
55391: PUSH
55392: LD_INT 4
55394: PUSH
55395: LD_INT 1
55397: NEG
55398: PUSH
55399: EMPTY
55400: LIST
55401: LIST
55402: PUSH
55403: LD_INT 5
55405: PUSH
55406: LD_INT 0
55408: PUSH
55409: EMPTY
55410: LIST
55411: LIST
55412: PUSH
55413: LD_INT 5
55415: PUSH
55416: LD_INT 1
55418: PUSH
55419: EMPTY
55420: LIST
55421: LIST
55422: PUSH
55423: LD_INT 4
55425: PUSH
55426: LD_INT 1
55428: PUSH
55429: EMPTY
55430: LIST
55431: LIST
55432: PUSH
55433: LD_INT 3
55435: PUSH
55436: LD_INT 0
55438: PUSH
55439: EMPTY
55440: LIST
55441: LIST
55442: PUSH
55443: LD_INT 3
55445: PUSH
55446: LD_INT 1
55448: NEG
55449: PUSH
55450: EMPTY
55451: LIST
55452: LIST
55453: PUSH
55454: LD_INT 3
55456: PUSH
55457: LD_INT 2
55459: NEG
55460: PUSH
55461: EMPTY
55462: LIST
55463: LIST
55464: PUSH
55465: LD_INT 5
55467: PUSH
55468: LD_INT 2
55470: PUSH
55471: EMPTY
55472: LIST
55473: LIST
55474: PUSH
55475: EMPTY
55476: LIST
55477: LIST
55478: LIST
55479: LIST
55480: LIST
55481: LIST
55482: LIST
55483: LIST
55484: LIST
55485: LIST
55486: LIST
55487: LIST
55488: LIST
55489: LIST
55490: LIST
55491: LIST
55492: LIST
55493: LIST
55494: LIST
55495: LIST
55496: LIST
55497: LIST
55498: LIST
55499: LIST
55500: LIST
55501: LIST
55502: LIST
55503: LIST
55504: LIST
55505: LIST
55506: LIST
55507: LIST
55508: LIST
55509: LIST
55510: LIST
55511: LIST
55512: LIST
55513: LIST
55514: LIST
55515: LIST
55516: LIST
55517: LIST
55518: LIST
55519: LIST
55520: LIST
55521: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
55522: LD_ADDR_VAR 0 32
55526: PUSH
55527: LD_INT 4
55529: NEG
55530: PUSH
55531: LD_INT 0
55533: PUSH
55534: EMPTY
55535: LIST
55536: LIST
55537: PUSH
55538: LD_INT 4
55540: NEG
55541: PUSH
55542: LD_INT 1
55544: NEG
55545: PUSH
55546: EMPTY
55547: LIST
55548: LIST
55549: PUSH
55550: LD_INT 3
55552: NEG
55553: PUSH
55554: LD_INT 0
55556: PUSH
55557: EMPTY
55558: LIST
55559: LIST
55560: PUSH
55561: LD_INT 3
55563: NEG
55564: PUSH
55565: LD_INT 1
55567: PUSH
55568: EMPTY
55569: LIST
55570: LIST
55571: PUSH
55572: LD_INT 4
55574: NEG
55575: PUSH
55576: LD_INT 1
55578: PUSH
55579: EMPTY
55580: LIST
55581: LIST
55582: PUSH
55583: LD_INT 5
55585: NEG
55586: PUSH
55587: LD_INT 0
55589: PUSH
55590: EMPTY
55591: LIST
55592: LIST
55593: PUSH
55594: LD_INT 5
55596: NEG
55597: PUSH
55598: LD_INT 1
55600: NEG
55601: PUSH
55602: EMPTY
55603: LIST
55604: LIST
55605: PUSH
55606: LD_INT 5
55608: NEG
55609: PUSH
55610: LD_INT 2
55612: NEG
55613: PUSH
55614: EMPTY
55615: LIST
55616: LIST
55617: PUSH
55618: LD_INT 3
55620: NEG
55621: PUSH
55622: LD_INT 2
55624: PUSH
55625: EMPTY
55626: LIST
55627: LIST
55628: PUSH
55629: LD_INT 3
55631: NEG
55632: PUSH
55633: LD_INT 3
55635: NEG
55636: PUSH
55637: EMPTY
55638: LIST
55639: LIST
55640: PUSH
55641: LD_INT 3
55643: NEG
55644: PUSH
55645: LD_INT 4
55647: NEG
55648: PUSH
55649: EMPTY
55650: LIST
55651: LIST
55652: PUSH
55653: LD_INT 2
55655: NEG
55656: PUSH
55657: LD_INT 3
55659: NEG
55660: PUSH
55661: EMPTY
55662: LIST
55663: LIST
55664: PUSH
55665: LD_INT 2
55667: NEG
55668: PUSH
55669: LD_INT 2
55671: NEG
55672: PUSH
55673: EMPTY
55674: LIST
55675: LIST
55676: PUSH
55677: LD_INT 3
55679: NEG
55680: PUSH
55681: LD_INT 2
55683: NEG
55684: PUSH
55685: EMPTY
55686: LIST
55687: LIST
55688: PUSH
55689: LD_INT 4
55691: NEG
55692: PUSH
55693: LD_INT 3
55695: NEG
55696: PUSH
55697: EMPTY
55698: LIST
55699: LIST
55700: PUSH
55701: LD_INT 4
55703: NEG
55704: PUSH
55705: LD_INT 4
55707: NEG
55708: PUSH
55709: EMPTY
55710: LIST
55711: LIST
55712: PUSH
55713: LD_INT 2
55715: NEG
55716: PUSH
55717: LD_INT 4
55719: NEG
55720: PUSH
55721: EMPTY
55722: LIST
55723: LIST
55724: PUSH
55725: LD_INT 4
55727: NEG
55728: PUSH
55729: LD_INT 2
55731: NEG
55732: PUSH
55733: EMPTY
55734: LIST
55735: LIST
55736: PUSH
55737: LD_INT 0
55739: PUSH
55740: LD_INT 4
55742: NEG
55743: PUSH
55744: EMPTY
55745: LIST
55746: LIST
55747: PUSH
55748: LD_INT 0
55750: PUSH
55751: LD_INT 5
55753: NEG
55754: PUSH
55755: EMPTY
55756: LIST
55757: LIST
55758: PUSH
55759: LD_INT 1
55761: PUSH
55762: LD_INT 4
55764: NEG
55765: PUSH
55766: EMPTY
55767: LIST
55768: LIST
55769: PUSH
55770: LD_INT 1
55772: PUSH
55773: LD_INT 3
55775: NEG
55776: PUSH
55777: EMPTY
55778: LIST
55779: LIST
55780: PUSH
55781: LD_INT 0
55783: PUSH
55784: LD_INT 3
55786: NEG
55787: PUSH
55788: EMPTY
55789: LIST
55790: LIST
55791: PUSH
55792: LD_INT 1
55794: NEG
55795: PUSH
55796: LD_INT 4
55798: NEG
55799: PUSH
55800: EMPTY
55801: LIST
55802: LIST
55803: PUSH
55804: LD_INT 1
55806: NEG
55807: PUSH
55808: LD_INT 5
55810: NEG
55811: PUSH
55812: EMPTY
55813: LIST
55814: LIST
55815: PUSH
55816: LD_INT 2
55818: PUSH
55819: LD_INT 3
55821: NEG
55822: PUSH
55823: EMPTY
55824: LIST
55825: LIST
55826: PUSH
55827: LD_INT 2
55829: NEG
55830: PUSH
55831: LD_INT 5
55833: NEG
55834: PUSH
55835: EMPTY
55836: LIST
55837: LIST
55838: PUSH
55839: LD_INT 3
55841: PUSH
55842: LD_INT 0
55844: PUSH
55845: EMPTY
55846: LIST
55847: LIST
55848: PUSH
55849: LD_INT 3
55851: PUSH
55852: LD_INT 1
55854: NEG
55855: PUSH
55856: EMPTY
55857: LIST
55858: LIST
55859: PUSH
55860: LD_INT 4
55862: PUSH
55863: LD_INT 0
55865: PUSH
55866: EMPTY
55867: LIST
55868: LIST
55869: PUSH
55870: LD_INT 4
55872: PUSH
55873: LD_INT 1
55875: PUSH
55876: EMPTY
55877: LIST
55878: LIST
55879: PUSH
55880: LD_INT 3
55882: PUSH
55883: LD_INT 1
55885: PUSH
55886: EMPTY
55887: LIST
55888: LIST
55889: PUSH
55890: LD_INT 2
55892: PUSH
55893: LD_INT 0
55895: PUSH
55896: EMPTY
55897: LIST
55898: LIST
55899: PUSH
55900: LD_INT 2
55902: PUSH
55903: LD_INT 1
55905: NEG
55906: PUSH
55907: EMPTY
55908: LIST
55909: LIST
55910: PUSH
55911: LD_INT 2
55913: PUSH
55914: LD_INT 2
55916: NEG
55917: PUSH
55918: EMPTY
55919: LIST
55920: LIST
55921: PUSH
55922: LD_INT 4
55924: PUSH
55925: LD_INT 2
55927: PUSH
55928: EMPTY
55929: LIST
55930: LIST
55931: PUSH
55932: LD_INT 4
55934: PUSH
55935: LD_INT 4
55937: PUSH
55938: EMPTY
55939: LIST
55940: LIST
55941: PUSH
55942: LD_INT 4
55944: PUSH
55945: LD_INT 3
55947: PUSH
55948: EMPTY
55949: LIST
55950: LIST
55951: PUSH
55952: LD_INT 5
55954: PUSH
55955: LD_INT 4
55957: PUSH
55958: EMPTY
55959: LIST
55960: LIST
55961: PUSH
55962: LD_INT 5
55964: PUSH
55965: LD_INT 5
55967: PUSH
55968: EMPTY
55969: LIST
55970: LIST
55971: PUSH
55972: LD_INT 4
55974: PUSH
55975: LD_INT 5
55977: PUSH
55978: EMPTY
55979: LIST
55980: LIST
55981: PUSH
55982: LD_INT 3
55984: PUSH
55985: LD_INT 4
55987: PUSH
55988: EMPTY
55989: LIST
55990: LIST
55991: PUSH
55992: LD_INT 3
55994: PUSH
55995: LD_INT 3
55997: PUSH
55998: EMPTY
55999: LIST
56000: LIST
56001: PUSH
56002: LD_INT 5
56004: PUSH
56005: LD_INT 3
56007: PUSH
56008: EMPTY
56009: LIST
56010: LIST
56011: PUSH
56012: LD_INT 3
56014: PUSH
56015: LD_INT 5
56017: PUSH
56018: EMPTY
56019: LIST
56020: LIST
56021: PUSH
56022: EMPTY
56023: LIST
56024: LIST
56025: LIST
56026: LIST
56027: LIST
56028: LIST
56029: LIST
56030: LIST
56031: LIST
56032: LIST
56033: LIST
56034: LIST
56035: LIST
56036: LIST
56037: LIST
56038: LIST
56039: LIST
56040: LIST
56041: LIST
56042: LIST
56043: LIST
56044: LIST
56045: LIST
56046: LIST
56047: LIST
56048: LIST
56049: LIST
56050: LIST
56051: LIST
56052: LIST
56053: LIST
56054: LIST
56055: LIST
56056: LIST
56057: LIST
56058: LIST
56059: LIST
56060: LIST
56061: LIST
56062: LIST
56063: LIST
56064: LIST
56065: LIST
56066: LIST
56067: LIST
56068: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
56069: LD_ADDR_VAR 0 33
56073: PUSH
56074: LD_INT 4
56076: NEG
56077: PUSH
56078: LD_INT 4
56080: NEG
56081: PUSH
56082: EMPTY
56083: LIST
56084: LIST
56085: PUSH
56086: LD_INT 4
56088: NEG
56089: PUSH
56090: LD_INT 5
56092: NEG
56093: PUSH
56094: EMPTY
56095: LIST
56096: LIST
56097: PUSH
56098: LD_INT 3
56100: NEG
56101: PUSH
56102: LD_INT 4
56104: NEG
56105: PUSH
56106: EMPTY
56107: LIST
56108: LIST
56109: PUSH
56110: LD_INT 3
56112: NEG
56113: PUSH
56114: LD_INT 3
56116: NEG
56117: PUSH
56118: EMPTY
56119: LIST
56120: LIST
56121: PUSH
56122: LD_INT 4
56124: NEG
56125: PUSH
56126: LD_INT 3
56128: NEG
56129: PUSH
56130: EMPTY
56131: LIST
56132: LIST
56133: PUSH
56134: LD_INT 5
56136: NEG
56137: PUSH
56138: LD_INT 4
56140: NEG
56141: PUSH
56142: EMPTY
56143: LIST
56144: LIST
56145: PUSH
56146: LD_INT 5
56148: NEG
56149: PUSH
56150: LD_INT 5
56152: NEG
56153: PUSH
56154: EMPTY
56155: LIST
56156: LIST
56157: PUSH
56158: LD_INT 3
56160: NEG
56161: PUSH
56162: LD_INT 5
56164: NEG
56165: PUSH
56166: EMPTY
56167: LIST
56168: LIST
56169: PUSH
56170: LD_INT 5
56172: NEG
56173: PUSH
56174: LD_INT 3
56176: NEG
56177: PUSH
56178: EMPTY
56179: LIST
56180: LIST
56181: PUSH
56182: LD_INT 0
56184: PUSH
56185: LD_INT 3
56187: NEG
56188: PUSH
56189: EMPTY
56190: LIST
56191: LIST
56192: PUSH
56193: LD_INT 0
56195: PUSH
56196: LD_INT 4
56198: NEG
56199: PUSH
56200: EMPTY
56201: LIST
56202: LIST
56203: PUSH
56204: LD_INT 1
56206: PUSH
56207: LD_INT 3
56209: NEG
56210: PUSH
56211: EMPTY
56212: LIST
56213: LIST
56214: PUSH
56215: LD_INT 1
56217: PUSH
56218: LD_INT 2
56220: NEG
56221: PUSH
56222: EMPTY
56223: LIST
56224: LIST
56225: PUSH
56226: LD_INT 0
56228: PUSH
56229: LD_INT 2
56231: NEG
56232: PUSH
56233: EMPTY
56234: LIST
56235: LIST
56236: PUSH
56237: LD_INT 1
56239: NEG
56240: PUSH
56241: LD_INT 3
56243: NEG
56244: PUSH
56245: EMPTY
56246: LIST
56247: LIST
56248: PUSH
56249: LD_INT 1
56251: NEG
56252: PUSH
56253: LD_INT 4
56255: NEG
56256: PUSH
56257: EMPTY
56258: LIST
56259: LIST
56260: PUSH
56261: LD_INT 2
56263: PUSH
56264: LD_INT 2
56266: NEG
56267: PUSH
56268: EMPTY
56269: LIST
56270: LIST
56271: PUSH
56272: LD_INT 2
56274: NEG
56275: PUSH
56276: LD_INT 4
56278: NEG
56279: PUSH
56280: EMPTY
56281: LIST
56282: LIST
56283: PUSH
56284: LD_INT 4
56286: PUSH
56287: LD_INT 0
56289: PUSH
56290: EMPTY
56291: LIST
56292: LIST
56293: PUSH
56294: LD_INT 4
56296: PUSH
56297: LD_INT 1
56299: NEG
56300: PUSH
56301: EMPTY
56302: LIST
56303: LIST
56304: PUSH
56305: LD_INT 5
56307: PUSH
56308: LD_INT 0
56310: PUSH
56311: EMPTY
56312: LIST
56313: LIST
56314: PUSH
56315: LD_INT 5
56317: PUSH
56318: LD_INT 1
56320: PUSH
56321: EMPTY
56322: LIST
56323: LIST
56324: PUSH
56325: LD_INT 4
56327: PUSH
56328: LD_INT 1
56330: PUSH
56331: EMPTY
56332: LIST
56333: LIST
56334: PUSH
56335: LD_INT 3
56337: PUSH
56338: LD_INT 0
56340: PUSH
56341: EMPTY
56342: LIST
56343: LIST
56344: PUSH
56345: LD_INT 3
56347: PUSH
56348: LD_INT 1
56350: NEG
56351: PUSH
56352: EMPTY
56353: LIST
56354: LIST
56355: PUSH
56356: LD_INT 3
56358: PUSH
56359: LD_INT 2
56361: NEG
56362: PUSH
56363: EMPTY
56364: LIST
56365: LIST
56366: PUSH
56367: LD_INT 5
56369: PUSH
56370: LD_INT 2
56372: PUSH
56373: EMPTY
56374: LIST
56375: LIST
56376: PUSH
56377: LD_INT 3
56379: PUSH
56380: LD_INT 3
56382: PUSH
56383: EMPTY
56384: LIST
56385: LIST
56386: PUSH
56387: LD_INT 3
56389: PUSH
56390: LD_INT 2
56392: PUSH
56393: EMPTY
56394: LIST
56395: LIST
56396: PUSH
56397: LD_INT 4
56399: PUSH
56400: LD_INT 3
56402: PUSH
56403: EMPTY
56404: LIST
56405: LIST
56406: PUSH
56407: LD_INT 4
56409: PUSH
56410: LD_INT 4
56412: PUSH
56413: EMPTY
56414: LIST
56415: LIST
56416: PUSH
56417: LD_INT 3
56419: PUSH
56420: LD_INT 4
56422: PUSH
56423: EMPTY
56424: LIST
56425: LIST
56426: PUSH
56427: LD_INT 2
56429: PUSH
56430: LD_INT 3
56432: PUSH
56433: EMPTY
56434: LIST
56435: LIST
56436: PUSH
56437: LD_INT 2
56439: PUSH
56440: LD_INT 2
56442: PUSH
56443: EMPTY
56444: LIST
56445: LIST
56446: PUSH
56447: LD_INT 4
56449: PUSH
56450: LD_INT 2
56452: PUSH
56453: EMPTY
56454: LIST
56455: LIST
56456: PUSH
56457: LD_INT 2
56459: PUSH
56460: LD_INT 4
56462: PUSH
56463: EMPTY
56464: LIST
56465: LIST
56466: PUSH
56467: LD_INT 0
56469: PUSH
56470: LD_INT 4
56472: PUSH
56473: EMPTY
56474: LIST
56475: LIST
56476: PUSH
56477: LD_INT 0
56479: PUSH
56480: LD_INT 3
56482: PUSH
56483: EMPTY
56484: LIST
56485: LIST
56486: PUSH
56487: LD_INT 1
56489: PUSH
56490: LD_INT 4
56492: PUSH
56493: EMPTY
56494: LIST
56495: LIST
56496: PUSH
56497: LD_INT 1
56499: PUSH
56500: LD_INT 5
56502: PUSH
56503: EMPTY
56504: LIST
56505: LIST
56506: PUSH
56507: LD_INT 0
56509: PUSH
56510: LD_INT 5
56512: PUSH
56513: EMPTY
56514: LIST
56515: LIST
56516: PUSH
56517: LD_INT 1
56519: NEG
56520: PUSH
56521: LD_INT 4
56523: PUSH
56524: EMPTY
56525: LIST
56526: LIST
56527: PUSH
56528: LD_INT 1
56530: NEG
56531: PUSH
56532: LD_INT 3
56534: PUSH
56535: EMPTY
56536: LIST
56537: LIST
56538: PUSH
56539: LD_INT 2
56541: PUSH
56542: LD_INT 5
56544: PUSH
56545: EMPTY
56546: LIST
56547: LIST
56548: PUSH
56549: LD_INT 2
56551: NEG
56552: PUSH
56553: LD_INT 3
56555: PUSH
56556: EMPTY
56557: LIST
56558: LIST
56559: PUSH
56560: EMPTY
56561: LIST
56562: LIST
56563: LIST
56564: LIST
56565: LIST
56566: LIST
56567: LIST
56568: LIST
56569: LIST
56570: LIST
56571: LIST
56572: LIST
56573: LIST
56574: LIST
56575: LIST
56576: LIST
56577: LIST
56578: LIST
56579: LIST
56580: LIST
56581: LIST
56582: LIST
56583: LIST
56584: LIST
56585: LIST
56586: LIST
56587: LIST
56588: LIST
56589: LIST
56590: LIST
56591: LIST
56592: LIST
56593: LIST
56594: LIST
56595: LIST
56596: LIST
56597: LIST
56598: LIST
56599: LIST
56600: LIST
56601: LIST
56602: LIST
56603: LIST
56604: LIST
56605: LIST
56606: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
56607: LD_ADDR_VAR 0 34
56611: PUSH
56612: LD_INT 0
56614: PUSH
56615: LD_INT 4
56617: NEG
56618: PUSH
56619: EMPTY
56620: LIST
56621: LIST
56622: PUSH
56623: LD_INT 0
56625: PUSH
56626: LD_INT 5
56628: NEG
56629: PUSH
56630: EMPTY
56631: LIST
56632: LIST
56633: PUSH
56634: LD_INT 1
56636: PUSH
56637: LD_INT 4
56639: NEG
56640: PUSH
56641: EMPTY
56642: LIST
56643: LIST
56644: PUSH
56645: LD_INT 1
56647: PUSH
56648: LD_INT 3
56650: NEG
56651: PUSH
56652: EMPTY
56653: LIST
56654: LIST
56655: PUSH
56656: LD_INT 0
56658: PUSH
56659: LD_INT 3
56661: NEG
56662: PUSH
56663: EMPTY
56664: LIST
56665: LIST
56666: PUSH
56667: LD_INT 1
56669: NEG
56670: PUSH
56671: LD_INT 4
56673: NEG
56674: PUSH
56675: EMPTY
56676: LIST
56677: LIST
56678: PUSH
56679: LD_INT 1
56681: NEG
56682: PUSH
56683: LD_INT 5
56685: NEG
56686: PUSH
56687: EMPTY
56688: LIST
56689: LIST
56690: PUSH
56691: LD_INT 2
56693: PUSH
56694: LD_INT 3
56696: NEG
56697: PUSH
56698: EMPTY
56699: LIST
56700: LIST
56701: PUSH
56702: LD_INT 2
56704: NEG
56705: PUSH
56706: LD_INT 5
56708: NEG
56709: PUSH
56710: EMPTY
56711: LIST
56712: LIST
56713: PUSH
56714: LD_INT 3
56716: PUSH
56717: LD_INT 0
56719: PUSH
56720: EMPTY
56721: LIST
56722: LIST
56723: PUSH
56724: LD_INT 3
56726: PUSH
56727: LD_INT 1
56729: NEG
56730: PUSH
56731: EMPTY
56732: LIST
56733: LIST
56734: PUSH
56735: LD_INT 4
56737: PUSH
56738: LD_INT 0
56740: PUSH
56741: EMPTY
56742: LIST
56743: LIST
56744: PUSH
56745: LD_INT 4
56747: PUSH
56748: LD_INT 1
56750: PUSH
56751: EMPTY
56752: LIST
56753: LIST
56754: PUSH
56755: LD_INT 3
56757: PUSH
56758: LD_INT 1
56760: PUSH
56761: EMPTY
56762: LIST
56763: LIST
56764: PUSH
56765: LD_INT 2
56767: PUSH
56768: LD_INT 0
56770: PUSH
56771: EMPTY
56772: LIST
56773: LIST
56774: PUSH
56775: LD_INT 2
56777: PUSH
56778: LD_INT 1
56780: NEG
56781: PUSH
56782: EMPTY
56783: LIST
56784: LIST
56785: PUSH
56786: LD_INT 2
56788: PUSH
56789: LD_INT 2
56791: NEG
56792: PUSH
56793: EMPTY
56794: LIST
56795: LIST
56796: PUSH
56797: LD_INT 4
56799: PUSH
56800: LD_INT 2
56802: PUSH
56803: EMPTY
56804: LIST
56805: LIST
56806: PUSH
56807: LD_INT 4
56809: PUSH
56810: LD_INT 4
56812: PUSH
56813: EMPTY
56814: LIST
56815: LIST
56816: PUSH
56817: LD_INT 4
56819: PUSH
56820: LD_INT 3
56822: PUSH
56823: EMPTY
56824: LIST
56825: LIST
56826: PUSH
56827: LD_INT 5
56829: PUSH
56830: LD_INT 4
56832: PUSH
56833: EMPTY
56834: LIST
56835: LIST
56836: PUSH
56837: LD_INT 5
56839: PUSH
56840: LD_INT 5
56842: PUSH
56843: EMPTY
56844: LIST
56845: LIST
56846: PUSH
56847: LD_INT 4
56849: PUSH
56850: LD_INT 5
56852: PUSH
56853: EMPTY
56854: LIST
56855: LIST
56856: PUSH
56857: LD_INT 3
56859: PUSH
56860: LD_INT 4
56862: PUSH
56863: EMPTY
56864: LIST
56865: LIST
56866: PUSH
56867: LD_INT 3
56869: PUSH
56870: LD_INT 3
56872: PUSH
56873: EMPTY
56874: LIST
56875: LIST
56876: PUSH
56877: LD_INT 5
56879: PUSH
56880: LD_INT 3
56882: PUSH
56883: EMPTY
56884: LIST
56885: LIST
56886: PUSH
56887: LD_INT 3
56889: PUSH
56890: LD_INT 5
56892: PUSH
56893: EMPTY
56894: LIST
56895: LIST
56896: PUSH
56897: LD_INT 0
56899: PUSH
56900: LD_INT 3
56902: PUSH
56903: EMPTY
56904: LIST
56905: LIST
56906: PUSH
56907: LD_INT 0
56909: PUSH
56910: LD_INT 2
56912: PUSH
56913: EMPTY
56914: LIST
56915: LIST
56916: PUSH
56917: LD_INT 1
56919: PUSH
56920: LD_INT 3
56922: PUSH
56923: EMPTY
56924: LIST
56925: LIST
56926: PUSH
56927: LD_INT 1
56929: PUSH
56930: LD_INT 4
56932: PUSH
56933: EMPTY
56934: LIST
56935: LIST
56936: PUSH
56937: LD_INT 0
56939: PUSH
56940: LD_INT 4
56942: PUSH
56943: EMPTY
56944: LIST
56945: LIST
56946: PUSH
56947: LD_INT 1
56949: NEG
56950: PUSH
56951: LD_INT 3
56953: PUSH
56954: EMPTY
56955: LIST
56956: LIST
56957: PUSH
56958: LD_INT 1
56960: NEG
56961: PUSH
56962: LD_INT 2
56964: PUSH
56965: EMPTY
56966: LIST
56967: LIST
56968: PUSH
56969: LD_INT 2
56971: PUSH
56972: LD_INT 4
56974: PUSH
56975: EMPTY
56976: LIST
56977: LIST
56978: PUSH
56979: LD_INT 2
56981: NEG
56982: PUSH
56983: LD_INT 2
56985: PUSH
56986: EMPTY
56987: LIST
56988: LIST
56989: PUSH
56990: LD_INT 4
56992: NEG
56993: PUSH
56994: LD_INT 0
56996: PUSH
56997: EMPTY
56998: LIST
56999: LIST
57000: PUSH
57001: LD_INT 4
57003: NEG
57004: PUSH
57005: LD_INT 1
57007: NEG
57008: PUSH
57009: EMPTY
57010: LIST
57011: LIST
57012: PUSH
57013: LD_INT 3
57015: NEG
57016: PUSH
57017: LD_INT 0
57019: PUSH
57020: EMPTY
57021: LIST
57022: LIST
57023: PUSH
57024: LD_INT 3
57026: NEG
57027: PUSH
57028: LD_INT 1
57030: PUSH
57031: EMPTY
57032: LIST
57033: LIST
57034: PUSH
57035: LD_INT 4
57037: NEG
57038: PUSH
57039: LD_INT 1
57041: PUSH
57042: EMPTY
57043: LIST
57044: LIST
57045: PUSH
57046: LD_INT 5
57048: NEG
57049: PUSH
57050: LD_INT 0
57052: PUSH
57053: EMPTY
57054: LIST
57055: LIST
57056: PUSH
57057: LD_INT 5
57059: NEG
57060: PUSH
57061: LD_INT 1
57063: NEG
57064: PUSH
57065: EMPTY
57066: LIST
57067: LIST
57068: PUSH
57069: LD_INT 5
57071: NEG
57072: PUSH
57073: LD_INT 2
57075: NEG
57076: PUSH
57077: EMPTY
57078: LIST
57079: LIST
57080: PUSH
57081: LD_INT 3
57083: NEG
57084: PUSH
57085: LD_INT 2
57087: PUSH
57088: EMPTY
57089: LIST
57090: LIST
57091: PUSH
57092: EMPTY
57093: LIST
57094: LIST
57095: LIST
57096: LIST
57097: LIST
57098: LIST
57099: LIST
57100: LIST
57101: LIST
57102: LIST
57103: LIST
57104: LIST
57105: LIST
57106: LIST
57107: LIST
57108: LIST
57109: LIST
57110: LIST
57111: LIST
57112: LIST
57113: LIST
57114: LIST
57115: LIST
57116: LIST
57117: LIST
57118: LIST
57119: LIST
57120: LIST
57121: LIST
57122: LIST
57123: LIST
57124: LIST
57125: LIST
57126: LIST
57127: LIST
57128: LIST
57129: LIST
57130: LIST
57131: LIST
57132: LIST
57133: LIST
57134: LIST
57135: LIST
57136: LIST
57137: LIST
57138: ST_TO_ADDR
// end ; end ;
57139: GO 57142
57141: POP
// case btype of b_depot , b_warehouse :
57142: LD_VAR 0 1
57146: PUSH
57147: LD_INT 0
57149: DOUBLE
57150: EQUAL
57151: IFTRUE 57161
57153: LD_INT 1
57155: DOUBLE
57156: EQUAL
57157: IFTRUE 57161
57159: GO 57362
57161: POP
// case nation of nation_american :
57162: LD_VAR 0 5
57166: PUSH
57167: LD_INT 1
57169: DOUBLE
57170: EQUAL
57171: IFTRUE 57175
57173: GO 57231
57175: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
57176: LD_ADDR_VAR 0 9
57180: PUSH
57181: LD_VAR 0 11
57185: PUSH
57186: LD_VAR 0 12
57190: PUSH
57191: LD_VAR 0 13
57195: PUSH
57196: LD_VAR 0 14
57200: PUSH
57201: LD_VAR 0 15
57205: PUSH
57206: LD_VAR 0 16
57210: PUSH
57211: EMPTY
57212: LIST
57213: LIST
57214: LIST
57215: LIST
57216: LIST
57217: LIST
57218: PUSH
57219: LD_VAR 0 4
57223: PUSH
57224: LD_INT 1
57226: PLUS
57227: ARRAY
57228: ST_TO_ADDR
57229: GO 57360
57231: LD_INT 2
57233: DOUBLE
57234: EQUAL
57235: IFTRUE 57239
57237: GO 57295
57239: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
57240: LD_ADDR_VAR 0 9
57244: PUSH
57245: LD_VAR 0 17
57249: PUSH
57250: LD_VAR 0 18
57254: PUSH
57255: LD_VAR 0 19
57259: PUSH
57260: LD_VAR 0 20
57264: PUSH
57265: LD_VAR 0 21
57269: PUSH
57270: LD_VAR 0 22
57274: PUSH
57275: EMPTY
57276: LIST
57277: LIST
57278: LIST
57279: LIST
57280: LIST
57281: LIST
57282: PUSH
57283: LD_VAR 0 4
57287: PUSH
57288: LD_INT 1
57290: PLUS
57291: ARRAY
57292: ST_TO_ADDR
57293: GO 57360
57295: LD_INT 3
57297: DOUBLE
57298: EQUAL
57299: IFTRUE 57303
57301: GO 57359
57303: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
57304: LD_ADDR_VAR 0 9
57308: PUSH
57309: LD_VAR 0 23
57313: PUSH
57314: LD_VAR 0 24
57318: PUSH
57319: LD_VAR 0 25
57323: PUSH
57324: LD_VAR 0 26
57328: PUSH
57329: LD_VAR 0 27
57333: PUSH
57334: LD_VAR 0 28
57338: PUSH
57339: EMPTY
57340: LIST
57341: LIST
57342: LIST
57343: LIST
57344: LIST
57345: LIST
57346: PUSH
57347: LD_VAR 0 4
57351: PUSH
57352: LD_INT 1
57354: PLUS
57355: ARRAY
57356: ST_TO_ADDR
57357: GO 57360
57359: POP
57360: GO 57915
57362: LD_INT 2
57364: DOUBLE
57365: EQUAL
57366: IFTRUE 57376
57368: LD_INT 3
57370: DOUBLE
57371: EQUAL
57372: IFTRUE 57376
57374: GO 57432
57376: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
57377: LD_ADDR_VAR 0 9
57381: PUSH
57382: LD_VAR 0 29
57386: PUSH
57387: LD_VAR 0 30
57391: PUSH
57392: LD_VAR 0 31
57396: PUSH
57397: LD_VAR 0 32
57401: PUSH
57402: LD_VAR 0 33
57406: PUSH
57407: LD_VAR 0 34
57411: PUSH
57412: EMPTY
57413: LIST
57414: LIST
57415: LIST
57416: LIST
57417: LIST
57418: LIST
57419: PUSH
57420: LD_VAR 0 4
57424: PUSH
57425: LD_INT 1
57427: PLUS
57428: ARRAY
57429: ST_TO_ADDR
57430: GO 57915
57432: LD_INT 16
57434: DOUBLE
57435: EQUAL
57436: IFTRUE 57494
57438: LD_INT 17
57440: DOUBLE
57441: EQUAL
57442: IFTRUE 57494
57444: LD_INT 18
57446: DOUBLE
57447: EQUAL
57448: IFTRUE 57494
57450: LD_INT 19
57452: DOUBLE
57453: EQUAL
57454: IFTRUE 57494
57456: LD_INT 22
57458: DOUBLE
57459: EQUAL
57460: IFTRUE 57494
57462: LD_INT 20
57464: DOUBLE
57465: EQUAL
57466: IFTRUE 57494
57468: LD_INT 21
57470: DOUBLE
57471: EQUAL
57472: IFTRUE 57494
57474: LD_INT 23
57476: DOUBLE
57477: EQUAL
57478: IFTRUE 57494
57480: LD_INT 24
57482: DOUBLE
57483: EQUAL
57484: IFTRUE 57494
57486: LD_INT 25
57488: DOUBLE
57489: EQUAL
57490: IFTRUE 57494
57492: GO 57550
57494: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
57495: LD_ADDR_VAR 0 9
57499: PUSH
57500: LD_VAR 0 35
57504: PUSH
57505: LD_VAR 0 36
57509: PUSH
57510: LD_VAR 0 37
57514: PUSH
57515: LD_VAR 0 38
57519: PUSH
57520: LD_VAR 0 39
57524: PUSH
57525: LD_VAR 0 40
57529: PUSH
57530: EMPTY
57531: LIST
57532: LIST
57533: LIST
57534: LIST
57535: LIST
57536: LIST
57537: PUSH
57538: LD_VAR 0 4
57542: PUSH
57543: LD_INT 1
57545: PLUS
57546: ARRAY
57547: ST_TO_ADDR
57548: GO 57915
57550: LD_INT 6
57552: DOUBLE
57553: EQUAL
57554: IFTRUE 57606
57556: LD_INT 7
57558: DOUBLE
57559: EQUAL
57560: IFTRUE 57606
57562: LD_INT 8
57564: DOUBLE
57565: EQUAL
57566: IFTRUE 57606
57568: LD_INT 13
57570: DOUBLE
57571: EQUAL
57572: IFTRUE 57606
57574: LD_INT 12
57576: DOUBLE
57577: EQUAL
57578: IFTRUE 57606
57580: LD_INT 15
57582: DOUBLE
57583: EQUAL
57584: IFTRUE 57606
57586: LD_INT 11
57588: DOUBLE
57589: EQUAL
57590: IFTRUE 57606
57592: LD_INT 14
57594: DOUBLE
57595: EQUAL
57596: IFTRUE 57606
57598: LD_INT 10
57600: DOUBLE
57601: EQUAL
57602: IFTRUE 57606
57604: GO 57662
57606: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
57607: LD_ADDR_VAR 0 9
57611: PUSH
57612: LD_VAR 0 41
57616: PUSH
57617: LD_VAR 0 42
57621: PUSH
57622: LD_VAR 0 43
57626: PUSH
57627: LD_VAR 0 44
57631: PUSH
57632: LD_VAR 0 45
57636: PUSH
57637: LD_VAR 0 46
57641: PUSH
57642: EMPTY
57643: LIST
57644: LIST
57645: LIST
57646: LIST
57647: LIST
57648: LIST
57649: PUSH
57650: LD_VAR 0 4
57654: PUSH
57655: LD_INT 1
57657: PLUS
57658: ARRAY
57659: ST_TO_ADDR
57660: GO 57915
57662: LD_INT 36
57664: DOUBLE
57665: EQUAL
57666: IFTRUE 57670
57668: GO 57726
57670: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
57671: LD_ADDR_VAR 0 9
57675: PUSH
57676: LD_VAR 0 47
57680: PUSH
57681: LD_VAR 0 48
57685: PUSH
57686: LD_VAR 0 49
57690: PUSH
57691: LD_VAR 0 50
57695: PUSH
57696: LD_VAR 0 51
57700: PUSH
57701: LD_VAR 0 52
57705: PUSH
57706: EMPTY
57707: LIST
57708: LIST
57709: LIST
57710: LIST
57711: LIST
57712: LIST
57713: PUSH
57714: LD_VAR 0 4
57718: PUSH
57719: LD_INT 1
57721: PLUS
57722: ARRAY
57723: ST_TO_ADDR
57724: GO 57915
57726: LD_INT 4
57728: DOUBLE
57729: EQUAL
57730: IFTRUE 57752
57732: LD_INT 5
57734: DOUBLE
57735: EQUAL
57736: IFTRUE 57752
57738: LD_INT 34
57740: DOUBLE
57741: EQUAL
57742: IFTRUE 57752
57744: LD_INT 37
57746: DOUBLE
57747: EQUAL
57748: IFTRUE 57752
57750: GO 57808
57752: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
57753: LD_ADDR_VAR 0 9
57757: PUSH
57758: LD_VAR 0 53
57762: PUSH
57763: LD_VAR 0 54
57767: PUSH
57768: LD_VAR 0 55
57772: PUSH
57773: LD_VAR 0 56
57777: PUSH
57778: LD_VAR 0 57
57782: PUSH
57783: LD_VAR 0 58
57787: PUSH
57788: EMPTY
57789: LIST
57790: LIST
57791: LIST
57792: LIST
57793: LIST
57794: LIST
57795: PUSH
57796: LD_VAR 0 4
57800: PUSH
57801: LD_INT 1
57803: PLUS
57804: ARRAY
57805: ST_TO_ADDR
57806: GO 57915
57808: LD_INT 31
57810: DOUBLE
57811: EQUAL
57812: IFTRUE 57858
57814: LD_INT 32
57816: DOUBLE
57817: EQUAL
57818: IFTRUE 57858
57820: LD_INT 33
57822: DOUBLE
57823: EQUAL
57824: IFTRUE 57858
57826: LD_INT 27
57828: DOUBLE
57829: EQUAL
57830: IFTRUE 57858
57832: LD_INT 26
57834: DOUBLE
57835: EQUAL
57836: IFTRUE 57858
57838: LD_INT 28
57840: DOUBLE
57841: EQUAL
57842: IFTRUE 57858
57844: LD_INT 29
57846: DOUBLE
57847: EQUAL
57848: IFTRUE 57858
57850: LD_INT 30
57852: DOUBLE
57853: EQUAL
57854: IFTRUE 57858
57856: GO 57914
57858: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
57859: LD_ADDR_VAR 0 9
57863: PUSH
57864: LD_VAR 0 59
57868: PUSH
57869: LD_VAR 0 60
57873: PUSH
57874: LD_VAR 0 61
57878: PUSH
57879: LD_VAR 0 62
57883: PUSH
57884: LD_VAR 0 63
57888: PUSH
57889: LD_VAR 0 64
57893: PUSH
57894: EMPTY
57895: LIST
57896: LIST
57897: LIST
57898: LIST
57899: LIST
57900: LIST
57901: PUSH
57902: LD_VAR 0 4
57906: PUSH
57907: LD_INT 1
57909: PLUS
57910: ARRAY
57911: ST_TO_ADDR
57912: GO 57915
57914: POP
// temp_list2 = [ ] ;
57915: LD_ADDR_VAR 0 10
57919: PUSH
57920: EMPTY
57921: ST_TO_ADDR
// for i in temp_list do
57922: LD_ADDR_VAR 0 8
57926: PUSH
57927: LD_VAR 0 9
57931: PUSH
57932: FOR_IN
57933: IFFALSE 57985
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
57935: LD_ADDR_VAR 0 10
57939: PUSH
57940: LD_VAR 0 10
57944: PUSH
57945: LD_VAR 0 8
57949: PUSH
57950: LD_INT 1
57952: ARRAY
57953: PUSH
57954: LD_VAR 0 2
57958: PLUS
57959: PUSH
57960: LD_VAR 0 8
57964: PUSH
57965: LD_INT 2
57967: ARRAY
57968: PUSH
57969: LD_VAR 0 3
57973: PLUS
57974: PUSH
57975: EMPTY
57976: LIST
57977: LIST
57978: PUSH
57979: EMPTY
57980: LIST
57981: ADD
57982: ST_TO_ADDR
57983: GO 57932
57985: POP
57986: POP
// result = temp_list2 ;
57987: LD_ADDR_VAR 0 7
57991: PUSH
57992: LD_VAR 0 10
57996: ST_TO_ADDR
// end ;
57997: LD_VAR 0 7
58001: RET
// export function EnemyInRange ( unit , dist ) ; begin
58002: LD_INT 0
58004: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
58005: LD_ADDR_VAR 0 3
58009: PUSH
58010: LD_VAR 0 1
58014: PPUSH
58015: CALL_OW 255
58019: PPUSH
58020: LD_VAR 0 1
58024: PPUSH
58025: CALL_OW 250
58029: PPUSH
58030: LD_VAR 0 1
58034: PPUSH
58035: CALL_OW 251
58039: PPUSH
58040: LD_VAR 0 2
58044: PPUSH
58045: CALL 31773 0 4
58049: PUSH
58050: LD_INT 4
58052: ARRAY
58053: ST_TO_ADDR
// end ;
58054: LD_VAR 0 3
58058: RET
// export function PlayerSeeMe ( unit ) ; begin
58059: LD_INT 0
58061: PPUSH
// result := See ( your_side , unit ) ;
58062: LD_ADDR_VAR 0 2
58066: PUSH
58067: LD_OWVAR 2
58071: PPUSH
58072: LD_VAR 0 1
58076: PPUSH
58077: CALL_OW 292
58081: ST_TO_ADDR
// end ;
58082: LD_VAR 0 2
58086: RET
// export function ReverseDir ( unit ) ; begin
58087: LD_INT 0
58089: PPUSH
// if not unit then
58090: LD_VAR 0 1
58094: NOT
58095: IFFALSE 58099
// exit ;
58097: GO 58122
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
58099: LD_ADDR_VAR 0 2
58103: PUSH
58104: LD_VAR 0 1
58108: PPUSH
58109: CALL_OW 254
58113: PUSH
58114: LD_INT 3
58116: PLUS
58117: PUSH
58118: LD_INT 6
58120: MOD
58121: ST_TO_ADDR
// end ;
58122: LD_VAR 0 2
58126: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
58127: LD_INT 0
58129: PPUSH
58130: PPUSH
58131: PPUSH
58132: PPUSH
58133: PPUSH
// if not hexes then
58134: LD_VAR 0 2
58138: NOT
58139: IFFALSE 58143
// exit ;
58141: GO 58291
// dist := 9999 ;
58143: LD_ADDR_VAR 0 5
58147: PUSH
58148: LD_INT 9999
58150: ST_TO_ADDR
// for i = 1 to hexes do
58151: LD_ADDR_VAR 0 4
58155: PUSH
58156: DOUBLE
58157: LD_INT 1
58159: DEC
58160: ST_TO_ADDR
58161: LD_VAR 0 2
58165: PUSH
58166: FOR_TO
58167: IFFALSE 58279
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
58169: LD_VAR 0 1
58173: PPUSH
58174: LD_VAR 0 2
58178: PUSH
58179: LD_VAR 0 4
58183: ARRAY
58184: PUSH
58185: LD_INT 1
58187: ARRAY
58188: PPUSH
58189: LD_VAR 0 2
58193: PUSH
58194: LD_VAR 0 4
58198: ARRAY
58199: PUSH
58200: LD_INT 2
58202: ARRAY
58203: PPUSH
58204: CALL_OW 297
58208: PUSH
58209: LD_VAR 0 5
58213: LESS
58214: IFFALSE 58277
// begin hex := hexes [ i ] ;
58216: LD_ADDR_VAR 0 7
58220: PUSH
58221: LD_VAR 0 2
58225: PUSH
58226: LD_VAR 0 4
58230: ARRAY
58231: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
58232: LD_ADDR_VAR 0 5
58236: PUSH
58237: LD_VAR 0 1
58241: PPUSH
58242: LD_VAR 0 2
58246: PUSH
58247: LD_VAR 0 4
58251: ARRAY
58252: PUSH
58253: LD_INT 1
58255: ARRAY
58256: PPUSH
58257: LD_VAR 0 2
58261: PUSH
58262: LD_VAR 0 4
58266: ARRAY
58267: PUSH
58268: LD_INT 2
58270: ARRAY
58271: PPUSH
58272: CALL_OW 297
58276: ST_TO_ADDR
// end ; end ;
58277: GO 58166
58279: POP
58280: POP
// result := hex ;
58281: LD_ADDR_VAR 0 3
58285: PUSH
58286: LD_VAR 0 7
58290: ST_TO_ADDR
// end ;
58291: LD_VAR 0 3
58295: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
58296: LD_INT 0
58298: PPUSH
58299: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
58300: LD_VAR 0 1
58304: NOT
58305: PUSH
58306: LD_VAR 0 1
58310: PUSH
58311: LD_INT 21
58313: PUSH
58314: LD_INT 2
58316: PUSH
58317: EMPTY
58318: LIST
58319: LIST
58320: PUSH
58321: LD_INT 23
58323: PUSH
58324: LD_INT 2
58326: PUSH
58327: EMPTY
58328: LIST
58329: LIST
58330: PUSH
58331: EMPTY
58332: LIST
58333: LIST
58334: PPUSH
58335: CALL_OW 69
58339: IN
58340: NOT
58341: OR
58342: IFFALSE 58346
// exit ;
58344: GO 58393
// for i = 1 to 3 do
58346: LD_ADDR_VAR 0 3
58350: PUSH
58351: DOUBLE
58352: LD_INT 1
58354: DEC
58355: ST_TO_ADDR
58356: LD_INT 3
58358: PUSH
58359: FOR_TO
58360: IFFALSE 58391
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
58362: LD_VAR 0 1
58366: PPUSH
58367: CALL_OW 250
58371: PPUSH
58372: LD_VAR 0 1
58376: PPUSH
58377: CALL_OW 251
58381: PPUSH
58382: LD_INT 1
58384: PPUSH
58385: CALL_OW 453
58389: GO 58359
58391: POP
58392: POP
// end ;
58393: LD_VAR 0 2
58397: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
58398: LD_INT 0
58400: PPUSH
58401: PPUSH
58402: PPUSH
58403: PPUSH
58404: PPUSH
58405: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
58406: LD_VAR 0 1
58410: NOT
58411: PUSH
58412: LD_VAR 0 2
58416: NOT
58417: OR
58418: PUSH
58419: LD_VAR 0 1
58423: PPUSH
58424: CALL_OW 314
58428: OR
58429: IFFALSE 58433
// exit ;
58431: GO 58874
// x := GetX ( enemy_unit ) ;
58433: LD_ADDR_VAR 0 7
58437: PUSH
58438: LD_VAR 0 2
58442: PPUSH
58443: CALL_OW 250
58447: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
58448: LD_ADDR_VAR 0 8
58452: PUSH
58453: LD_VAR 0 2
58457: PPUSH
58458: CALL_OW 251
58462: ST_TO_ADDR
// if not x or not y then
58463: LD_VAR 0 7
58467: NOT
58468: PUSH
58469: LD_VAR 0 8
58473: NOT
58474: OR
58475: IFFALSE 58479
// exit ;
58477: GO 58874
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
58479: LD_ADDR_VAR 0 6
58483: PUSH
58484: LD_VAR 0 7
58488: PPUSH
58489: LD_INT 0
58491: PPUSH
58492: LD_INT 4
58494: PPUSH
58495: CALL_OW 272
58499: PUSH
58500: LD_VAR 0 8
58504: PPUSH
58505: LD_INT 0
58507: PPUSH
58508: LD_INT 4
58510: PPUSH
58511: CALL_OW 273
58515: PUSH
58516: EMPTY
58517: LIST
58518: LIST
58519: PUSH
58520: LD_VAR 0 7
58524: PPUSH
58525: LD_INT 1
58527: PPUSH
58528: LD_INT 4
58530: PPUSH
58531: CALL_OW 272
58535: PUSH
58536: LD_VAR 0 8
58540: PPUSH
58541: LD_INT 1
58543: PPUSH
58544: LD_INT 4
58546: PPUSH
58547: CALL_OW 273
58551: PUSH
58552: EMPTY
58553: LIST
58554: LIST
58555: PUSH
58556: LD_VAR 0 7
58560: PPUSH
58561: LD_INT 2
58563: PPUSH
58564: LD_INT 4
58566: PPUSH
58567: CALL_OW 272
58571: PUSH
58572: LD_VAR 0 8
58576: PPUSH
58577: LD_INT 2
58579: PPUSH
58580: LD_INT 4
58582: PPUSH
58583: CALL_OW 273
58587: PUSH
58588: EMPTY
58589: LIST
58590: LIST
58591: PUSH
58592: LD_VAR 0 7
58596: PPUSH
58597: LD_INT 3
58599: PPUSH
58600: LD_INT 4
58602: PPUSH
58603: CALL_OW 272
58607: PUSH
58608: LD_VAR 0 8
58612: PPUSH
58613: LD_INT 3
58615: PPUSH
58616: LD_INT 4
58618: PPUSH
58619: CALL_OW 273
58623: PUSH
58624: EMPTY
58625: LIST
58626: LIST
58627: PUSH
58628: LD_VAR 0 7
58632: PPUSH
58633: LD_INT 4
58635: PPUSH
58636: LD_INT 4
58638: PPUSH
58639: CALL_OW 272
58643: PUSH
58644: LD_VAR 0 8
58648: PPUSH
58649: LD_INT 4
58651: PPUSH
58652: LD_INT 4
58654: PPUSH
58655: CALL_OW 273
58659: PUSH
58660: EMPTY
58661: LIST
58662: LIST
58663: PUSH
58664: LD_VAR 0 7
58668: PPUSH
58669: LD_INT 5
58671: PPUSH
58672: LD_INT 4
58674: PPUSH
58675: CALL_OW 272
58679: PUSH
58680: LD_VAR 0 8
58684: PPUSH
58685: LD_INT 5
58687: PPUSH
58688: LD_INT 4
58690: PPUSH
58691: CALL_OW 273
58695: PUSH
58696: EMPTY
58697: LIST
58698: LIST
58699: PUSH
58700: EMPTY
58701: LIST
58702: LIST
58703: LIST
58704: LIST
58705: LIST
58706: LIST
58707: ST_TO_ADDR
// for i = tmp downto 1 do
58708: LD_ADDR_VAR 0 4
58712: PUSH
58713: DOUBLE
58714: LD_VAR 0 6
58718: INC
58719: ST_TO_ADDR
58720: LD_INT 1
58722: PUSH
58723: FOR_DOWNTO
58724: IFFALSE 58825
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
58726: LD_VAR 0 6
58730: PUSH
58731: LD_VAR 0 4
58735: ARRAY
58736: PUSH
58737: LD_INT 1
58739: ARRAY
58740: PPUSH
58741: LD_VAR 0 6
58745: PUSH
58746: LD_VAR 0 4
58750: ARRAY
58751: PUSH
58752: LD_INT 2
58754: ARRAY
58755: PPUSH
58756: CALL_OW 488
58760: NOT
58761: PUSH
58762: LD_VAR 0 6
58766: PUSH
58767: LD_VAR 0 4
58771: ARRAY
58772: PUSH
58773: LD_INT 1
58775: ARRAY
58776: PPUSH
58777: LD_VAR 0 6
58781: PUSH
58782: LD_VAR 0 4
58786: ARRAY
58787: PUSH
58788: LD_INT 2
58790: ARRAY
58791: PPUSH
58792: CALL_OW 428
58796: PUSH
58797: LD_INT 0
58799: NONEQUAL
58800: OR
58801: IFFALSE 58823
// tmp := Delete ( tmp , i ) ;
58803: LD_ADDR_VAR 0 6
58807: PUSH
58808: LD_VAR 0 6
58812: PPUSH
58813: LD_VAR 0 4
58817: PPUSH
58818: CALL_OW 3
58822: ST_TO_ADDR
58823: GO 58723
58825: POP
58826: POP
// j := GetClosestHex ( unit , tmp ) ;
58827: LD_ADDR_VAR 0 5
58831: PUSH
58832: LD_VAR 0 1
58836: PPUSH
58837: LD_VAR 0 6
58841: PPUSH
58842: CALL 58127 0 2
58846: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
58847: LD_VAR 0 1
58851: PPUSH
58852: LD_VAR 0 5
58856: PUSH
58857: LD_INT 1
58859: ARRAY
58860: PPUSH
58861: LD_VAR 0 5
58865: PUSH
58866: LD_INT 2
58868: ARRAY
58869: PPUSH
58870: CALL_OW 111
// end ;
58874: LD_VAR 0 3
58878: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
58879: LD_INT 0
58881: PPUSH
58882: PPUSH
58883: PPUSH
// uc_side = 0 ;
58884: LD_ADDR_OWVAR 20
58888: PUSH
58889: LD_INT 0
58891: ST_TO_ADDR
// uc_nation = 0 ;
58892: LD_ADDR_OWVAR 21
58896: PUSH
58897: LD_INT 0
58899: ST_TO_ADDR
// InitHc_All ( ) ;
58900: CALL_OW 584
// InitVc ;
58904: CALL_OW 20
// if mastodonts then
58908: LD_VAR 0 6
58912: IFFALSE 58979
// for i = 1 to mastodonts do
58914: LD_ADDR_VAR 0 11
58918: PUSH
58919: DOUBLE
58920: LD_INT 1
58922: DEC
58923: ST_TO_ADDR
58924: LD_VAR 0 6
58928: PUSH
58929: FOR_TO
58930: IFFALSE 58977
// begin vc_chassis := 31 ;
58932: LD_ADDR_OWVAR 37
58936: PUSH
58937: LD_INT 31
58939: ST_TO_ADDR
// vc_control := control_rider ;
58940: LD_ADDR_OWVAR 38
58944: PUSH
58945: LD_INT 4
58947: ST_TO_ADDR
// animal := CreateVehicle ;
58948: LD_ADDR_VAR 0 12
58952: PUSH
58953: CALL_OW 45
58957: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58958: LD_VAR 0 12
58962: PPUSH
58963: LD_VAR 0 8
58967: PPUSH
58968: LD_INT 0
58970: PPUSH
58971: CALL 61167 0 3
// end ;
58975: GO 58929
58977: POP
58978: POP
// if horses then
58979: LD_VAR 0 5
58983: IFFALSE 59050
// for i = 1 to horses do
58985: LD_ADDR_VAR 0 11
58989: PUSH
58990: DOUBLE
58991: LD_INT 1
58993: DEC
58994: ST_TO_ADDR
58995: LD_VAR 0 5
58999: PUSH
59000: FOR_TO
59001: IFFALSE 59048
// begin hc_class := 21 ;
59003: LD_ADDR_OWVAR 28
59007: PUSH
59008: LD_INT 21
59010: ST_TO_ADDR
// hc_gallery :=  ;
59011: LD_ADDR_OWVAR 33
59015: PUSH
59016: LD_STRING 
59018: ST_TO_ADDR
// animal := CreateHuman ;
59019: LD_ADDR_VAR 0 12
59023: PUSH
59024: CALL_OW 44
59028: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59029: LD_VAR 0 12
59033: PPUSH
59034: LD_VAR 0 8
59038: PPUSH
59039: LD_INT 0
59041: PPUSH
59042: CALL 61167 0 3
// end ;
59046: GO 59000
59048: POP
59049: POP
// if birds then
59050: LD_VAR 0 1
59054: IFFALSE 59121
// for i = 1 to birds do
59056: LD_ADDR_VAR 0 11
59060: PUSH
59061: DOUBLE
59062: LD_INT 1
59064: DEC
59065: ST_TO_ADDR
59066: LD_VAR 0 1
59070: PUSH
59071: FOR_TO
59072: IFFALSE 59119
// begin hc_class = 18 ;
59074: LD_ADDR_OWVAR 28
59078: PUSH
59079: LD_INT 18
59081: ST_TO_ADDR
// hc_gallery =  ;
59082: LD_ADDR_OWVAR 33
59086: PUSH
59087: LD_STRING 
59089: ST_TO_ADDR
// animal := CreateHuman ;
59090: LD_ADDR_VAR 0 12
59094: PUSH
59095: CALL_OW 44
59099: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59100: LD_VAR 0 12
59104: PPUSH
59105: LD_VAR 0 8
59109: PPUSH
59110: LD_INT 0
59112: PPUSH
59113: CALL 61167 0 3
// end ;
59117: GO 59071
59119: POP
59120: POP
// if tigers then
59121: LD_VAR 0 2
59125: IFFALSE 59209
// for i = 1 to tigers do
59127: LD_ADDR_VAR 0 11
59131: PUSH
59132: DOUBLE
59133: LD_INT 1
59135: DEC
59136: ST_TO_ADDR
59137: LD_VAR 0 2
59141: PUSH
59142: FOR_TO
59143: IFFALSE 59207
// begin hc_class = class_tiger ;
59145: LD_ADDR_OWVAR 28
59149: PUSH
59150: LD_INT 14
59152: ST_TO_ADDR
// hc_gallery =  ;
59153: LD_ADDR_OWVAR 33
59157: PUSH
59158: LD_STRING 
59160: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
59161: LD_ADDR_OWVAR 35
59165: PUSH
59166: LD_INT 7
59168: NEG
59169: PPUSH
59170: LD_INT 7
59172: PPUSH
59173: CALL_OW 12
59177: ST_TO_ADDR
// animal := CreateHuman ;
59178: LD_ADDR_VAR 0 12
59182: PUSH
59183: CALL_OW 44
59187: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59188: LD_VAR 0 12
59192: PPUSH
59193: LD_VAR 0 8
59197: PPUSH
59198: LD_INT 0
59200: PPUSH
59201: CALL 61167 0 3
// end ;
59205: GO 59142
59207: POP
59208: POP
// if apemans then
59209: LD_VAR 0 3
59213: IFFALSE 59336
// for i = 1 to apemans do
59215: LD_ADDR_VAR 0 11
59219: PUSH
59220: DOUBLE
59221: LD_INT 1
59223: DEC
59224: ST_TO_ADDR
59225: LD_VAR 0 3
59229: PUSH
59230: FOR_TO
59231: IFFALSE 59334
// begin hc_class = class_apeman ;
59233: LD_ADDR_OWVAR 28
59237: PUSH
59238: LD_INT 12
59240: ST_TO_ADDR
// hc_gallery =  ;
59241: LD_ADDR_OWVAR 33
59245: PUSH
59246: LD_STRING 
59248: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
59249: LD_ADDR_OWVAR 35
59253: PUSH
59254: LD_INT 5
59256: NEG
59257: PPUSH
59258: LD_INT 5
59260: PPUSH
59261: CALL_OW 12
59265: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
59266: LD_ADDR_OWVAR 31
59270: PUSH
59271: LD_INT 1
59273: PPUSH
59274: LD_INT 3
59276: PPUSH
59277: CALL_OW 12
59281: PUSH
59282: LD_INT 1
59284: PPUSH
59285: LD_INT 3
59287: PPUSH
59288: CALL_OW 12
59292: PUSH
59293: LD_INT 0
59295: PUSH
59296: LD_INT 0
59298: PUSH
59299: EMPTY
59300: LIST
59301: LIST
59302: LIST
59303: LIST
59304: ST_TO_ADDR
// animal := CreateHuman ;
59305: LD_ADDR_VAR 0 12
59309: PUSH
59310: CALL_OW 44
59314: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59315: LD_VAR 0 12
59319: PPUSH
59320: LD_VAR 0 8
59324: PPUSH
59325: LD_INT 0
59327: PPUSH
59328: CALL 61167 0 3
// end ;
59332: GO 59230
59334: POP
59335: POP
// if enchidnas then
59336: LD_VAR 0 4
59340: IFFALSE 59407
// for i = 1 to enchidnas do
59342: LD_ADDR_VAR 0 11
59346: PUSH
59347: DOUBLE
59348: LD_INT 1
59350: DEC
59351: ST_TO_ADDR
59352: LD_VAR 0 4
59356: PUSH
59357: FOR_TO
59358: IFFALSE 59405
// begin hc_class = 13 ;
59360: LD_ADDR_OWVAR 28
59364: PUSH
59365: LD_INT 13
59367: ST_TO_ADDR
// hc_gallery =  ;
59368: LD_ADDR_OWVAR 33
59372: PUSH
59373: LD_STRING 
59375: ST_TO_ADDR
// animal := CreateHuman ;
59376: LD_ADDR_VAR 0 12
59380: PUSH
59381: CALL_OW 44
59385: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59386: LD_VAR 0 12
59390: PPUSH
59391: LD_VAR 0 8
59395: PPUSH
59396: LD_INT 0
59398: PPUSH
59399: CALL 61167 0 3
// end ;
59403: GO 59357
59405: POP
59406: POP
// if fishes then
59407: LD_VAR 0 7
59411: IFFALSE 59478
// for i = 1 to fishes do
59413: LD_ADDR_VAR 0 11
59417: PUSH
59418: DOUBLE
59419: LD_INT 1
59421: DEC
59422: ST_TO_ADDR
59423: LD_VAR 0 7
59427: PUSH
59428: FOR_TO
59429: IFFALSE 59476
// begin hc_class = 20 ;
59431: LD_ADDR_OWVAR 28
59435: PUSH
59436: LD_INT 20
59438: ST_TO_ADDR
// hc_gallery =  ;
59439: LD_ADDR_OWVAR 33
59443: PUSH
59444: LD_STRING 
59446: ST_TO_ADDR
// animal := CreateHuman ;
59447: LD_ADDR_VAR 0 12
59451: PUSH
59452: CALL_OW 44
59456: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
59457: LD_VAR 0 12
59461: PPUSH
59462: LD_VAR 0 9
59466: PPUSH
59467: LD_INT 0
59469: PPUSH
59470: CALL 61167 0 3
// end ;
59474: GO 59428
59476: POP
59477: POP
// end ;
59478: LD_VAR 0 10
59482: RET
// export function WantHeal ( sci , unit ) ; begin
59483: LD_INT 0
59485: PPUSH
// if GetTaskList ( sci ) > 0 then
59486: LD_VAR 0 1
59490: PPUSH
59491: CALL_OW 437
59495: PUSH
59496: LD_INT 0
59498: GREATER
59499: IFFALSE 59569
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
59501: LD_VAR 0 1
59505: PPUSH
59506: CALL_OW 437
59510: PUSH
59511: LD_INT 1
59513: ARRAY
59514: PUSH
59515: LD_INT 1
59517: ARRAY
59518: PUSH
59519: LD_STRING l
59521: EQUAL
59522: PUSH
59523: LD_VAR 0 1
59527: PPUSH
59528: CALL_OW 437
59532: PUSH
59533: LD_INT 1
59535: ARRAY
59536: PUSH
59537: LD_INT 4
59539: ARRAY
59540: PUSH
59541: LD_VAR 0 2
59545: EQUAL
59546: AND
59547: IFFALSE 59559
// result := true else
59549: LD_ADDR_VAR 0 3
59553: PUSH
59554: LD_INT 1
59556: ST_TO_ADDR
59557: GO 59567
// result := false ;
59559: LD_ADDR_VAR 0 3
59563: PUSH
59564: LD_INT 0
59566: ST_TO_ADDR
// end else
59567: GO 59577
// result := false ;
59569: LD_ADDR_VAR 0 3
59573: PUSH
59574: LD_INT 0
59576: ST_TO_ADDR
// end ;
59577: LD_VAR 0 3
59581: RET
// export function HealTarget ( sci ) ; begin
59582: LD_INT 0
59584: PPUSH
// if not sci then
59585: LD_VAR 0 1
59589: NOT
59590: IFFALSE 59594
// exit ;
59592: GO 59659
// result := 0 ;
59594: LD_ADDR_VAR 0 2
59598: PUSH
59599: LD_INT 0
59601: ST_TO_ADDR
// if GetTaskList ( sci ) then
59602: LD_VAR 0 1
59606: PPUSH
59607: CALL_OW 437
59611: IFFALSE 59659
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
59613: LD_VAR 0 1
59617: PPUSH
59618: CALL_OW 437
59622: PUSH
59623: LD_INT 1
59625: ARRAY
59626: PUSH
59627: LD_INT 1
59629: ARRAY
59630: PUSH
59631: LD_STRING l
59633: EQUAL
59634: IFFALSE 59659
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
59636: LD_ADDR_VAR 0 2
59640: PUSH
59641: LD_VAR 0 1
59645: PPUSH
59646: CALL_OW 437
59650: PUSH
59651: LD_INT 1
59653: ARRAY
59654: PUSH
59655: LD_INT 4
59657: ARRAY
59658: ST_TO_ADDR
// end ;
59659: LD_VAR 0 2
59663: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
59664: LD_INT 0
59666: PPUSH
59667: PPUSH
59668: PPUSH
59669: PPUSH
// if not base_units then
59670: LD_VAR 0 1
59674: NOT
59675: IFFALSE 59679
// exit ;
59677: GO 59766
// result := false ;
59679: LD_ADDR_VAR 0 2
59683: PUSH
59684: LD_INT 0
59686: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
59687: LD_ADDR_VAR 0 5
59691: PUSH
59692: LD_VAR 0 1
59696: PPUSH
59697: LD_INT 21
59699: PUSH
59700: LD_INT 3
59702: PUSH
59703: EMPTY
59704: LIST
59705: LIST
59706: PPUSH
59707: CALL_OW 72
59711: ST_TO_ADDR
// if not tmp then
59712: LD_VAR 0 5
59716: NOT
59717: IFFALSE 59721
// exit ;
59719: GO 59766
// for i in tmp do
59721: LD_ADDR_VAR 0 3
59725: PUSH
59726: LD_VAR 0 5
59730: PUSH
59731: FOR_IN
59732: IFFALSE 59764
// begin result := EnemyInRange ( i , 22 ) ;
59734: LD_ADDR_VAR 0 2
59738: PUSH
59739: LD_VAR 0 3
59743: PPUSH
59744: LD_INT 22
59746: PPUSH
59747: CALL 58002 0 2
59751: ST_TO_ADDR
// if result then
59752: LD_VAR 0 2
59756: IFFALSE 59762
// exit ;
59758: POP
59759: POP
59760: GO 59766
// end ;
59762: GO 59731
59764: POP
59765: POP
// end ;
59766: LD_VAR 0 2
59770: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
59771: LD_INT 0
59773: PPUSH
59774: PPUSH
// if not units then
59775: LD_VAR 0 1
59779: NOT
59780: IFFALSE 59784
// exit ;
59782: GO 59854
// result := [ ] ;
59784: LD_ADDR_VAR 0 3
59788: PUSH
59789: EMPTY
59790: ST_TO_ADDR
// for i in units do
59791: LD_ADDR_VAR 0 4
59795: PUSH
59796: LD_VAR 0 1
59800: PUSH
59801: FOR_IN
59802: IFFALSE 59852
// if GetTag ( i ) = tag then
59804: LD_VAR 0 4
59808: PPUSH
59809: CALL_OW 110
59813: PUSH
59814: LD_VAR 0 2
59818: EQUAL
59819: IFFALSE 59850
// result := Insert ( result , result + 1 , i ) ;
59821: LD_ADDR_VAR 0 3
59825: PUSH
59826: LD_VAR 0 3
59830: PPUSH
59831: LD_VAR 0 3
59835: PUSH
59836: LD_INT 1
59838: PLUS
59839: PPUSH
59840: LD_VAR 0 4
59844: PPUSH
59845: CALL_OW 2
59849: ST_TO_ADDR
59850: GO 59801
59852: POP
59853: POP
// end ;
59854: LD_VAR 0 3
59858: RET
// export function IsDriver ( un ) ; begin
59859: LD_INT 0
59861: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
59862: LD_ADDR_VAR 0 2
59866: PUSH
59867: LD_VAR 0 1
59871: PUSH
59872: LD_INT 55
59874: PUSH
59875: EMPTY
59876: LIST
59877: PPUSH
59878: CALL_OW 69
59882: IN
59883: ST_TO_ADDR
// end ;
59884: LD_VAR 0 2
59888: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
59889: LD_INT 0
59891: PPUSH
59892: PPUSH
// list := [ ] ;
59893: LD_ADDR_VAR 0 5
59897: PUSH
59898: EMPTY
59899: ST_TO_ADDR
// case d of 0 :
59900: LD_VAR 0 3
59904: PUSH
59905: LD_INT 0
59907: DOUBLE
59908: EQUAL
59909: IFTRUE 59913
59911: GO 60046
59913: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
59914: LD_ADDR_VAR 0 5
59918: PUSH
59919: LD_VAR 0 1
59923: PUSH
59924: LD_INT 4
59926: MINUS
59927: PUSH
59928: LD_VAR 0 2
59932: PUSH
59933: LD_INT 4
59935: MINUS
59936: PUSH
59937: LD_INT 2
59939: PUSH
59940: EMPTY
59941: LIST
59942: LIST
59943: LIST
59944: PUSH
59945: LD_VAR 0 1
59949: PUSH
59950: LD_INT 3
59952: MINUS
59953: PUSH
59954: LD_VAR 0 2
59958: PUSH
59959: LD_INT 1
59961: PUSH
59962: EMPTY
59963: LIST
59964: LIST
59965: LIST
59966: PUSH
59967: LD_VAR 0 1
59971: PUSH
59972: LD_INT 4
59974: PLUS
59975: PUSH
59976: LD_VAR 0 2
59980: PUSH
59981: LD_INT 4
59983: PUSH
59984: EMPTY
59985: LIST
59986: LIST
59987: LIST
59988: PUSH
59989: LD_VAR 0 1
59993: PUSH
59994: LD_INT 3
59996: PLUS
59997: PUSH
59998: LD_VAR 0 2
60002: PUSH
60003: LD_INT 3
60005: PLUS
60006: PUSH
60007: LD_INT 5
60009: PUSH
60010: EMPTY
60011: LIST
60012: LIST
60013: LIST
60014: PUSH
60015: LD_VAR 0 1
60019: PUSH
60020: LD_VAR 0 2
60024: PUSH
60025: LD_INT 4
60027: PLUS
60028: PUSH
60029: LD_INT 0
60031: PUSH
60032: EMPTY
60033: LIST
60034: LIST
60035: LIST
60036: PUSH
60037: EMPTY
60038: LIST
60039: LIST
60040: LIST
60041: LIST
60042: LIST
60043: ST_TO_ADDR
// end ; 1 :
60044: GO 60744
60046: LD_INT 1
60048: DOUBLE
60049: EQUAL
60050: IFTRUE 60054
60052: GO 60187
60054: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
60055: LD_ADDR_VAR 0 5
60059: PUSH
60060: LD_VAR 0 1
60064: PUSH
60065: LD_VAR 0 2
60069: PUSH
60070: LD_INT 4
60072: MINUS
60073: PUSH
60074: LD_INT 3
60076: PUSH
60077: EMPTY
60078: LIST
60079: LIST
60080: LIST
60081: PUSH
60082: LD_VAR 0 1
60086: PUSH
60087: LD_INT 3
60089: MINUS
60090: PUSH
60091: LD_VAR 0 2
60095: PUSH
60096: LD_INT 3
60098: MINUS
60099: PUSH
60100: LD_INT 2
60102: PUSH
60103: EMPTY
60104: LIST
60105: LIST
60106: LIST
60107: PUSH
60108: LD_VAR 0 1
60112: PUSH
60113: LD_INT 4
60115: MINUS
60116: PUSH
60117: LD_VAR 0 2
60121: PUSH
60122: LD_INT 1
60124: PUSH
60125: EMPTY
60126: LIST
60127: LIST
60128: LIST
60129: PUSH
60130: LD_VAR 0 1
60134: PUSH
60135: LD_VAR 0 2
60139: PUSH
60140: LD_INT 3
60142: PLUS
60143: PUSH
60144: LD_INT 0
60146: PUSH
60147: EMPTY
60148: LIST
60149: LIST
60150: LIST
60151: PUSH
60152: LD_VAR 0 1
60156: PUSH
60157: LD_INT 4
60159: PLUS
60160: PUSH
60161: LD_VAR 0 2
60165: PUSH
60166: LD_INT 4
60168: PLUS
60169: PUSH
60170: LD_INT 5
60172: PUSH
60173: EMPTY
60174: LIST
60175: LIST
60176: LIST
60177: PUSH
60178: EMPTY
60179: LIST
60180: LIST
60181: LIST
60182: LIST
60183: LIST
60184: ST_TO_ADDR
// end ; 2 :
60185: GO 60744
60187: LD_INT 2
60189: DOUBLE
60190: EQUAL
60191: IFTRUE 60195
60193: GO 60324
60195: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
60196: LD_ADDR_VAR 0 5
60200: PUSH
60201: LD_VAR 0 1
60205: PUSH
60206: LD_VAR 0 2
60210: PUSH
60211: LD_INT 3
60213: MINUS
60214: PUSH
60215: LD_INT 3
60217: PUSH
60218: EMPTY
60219: LIST
60220: LIST
60221: LIST
60222: PUSH
60223: LD_VAR 0 1
60227: PUSH
60228: LD_INT 4
60230: PLUS
60231: PUSH
60232: LD_VAR 0 2
60236: PUSH
60237: LD_INT 4
60239: PUSH
60240: EMPTY
60241: LIST
60242: LIST
60243: LIST
60244: PUSH
60245: LD_VAR 0 1
60249: PUSH
60250: LD_VAR 0 2
60254: PUSH
60255: LD_INT 4
60257: PLUS
60258: PUSH
60259: LD_INT 0
60261: PUSH
60262: EMPTY
60263: LIST
60264: LIST
60265: LIST
60266: PUSH
60267: LD_VAR 0 1
60271: PUSH
60272: LD_INT 3
60274: MINUS
60275: PUSH
60276: LD_VAR 0 2
60280: PUSH
60281: LD_INT 1
60283: PUSH
60284: EMPTY
60285: LIST
60286: LIST
60287: LIST
60288: PUSH
60289: LD_VAR 0 1
60293: PUSH
60294: LD_INT 4
60296: MINUS
60297: PUSH
60298: LD_VAR 0 2
60302: PUSH
60303: LD_INT 4
60305: MINUS
60306: PUSH
60307: LD_INT 2
60309: PUSH
60310: EMPTY
60311: LIST
60312: LIST
60313: LIST
60314: PUSH
60315: EMPTY
60316: LIST
60317: LIST
60318: LIST
60319: LIST
60320: LIST
60321: ST_TO_ADDR
// end ; 3 :
60322: GO 60744
60324: LD_INT 3
60326: DOUBLE
60327: EQUAL
60328: IFTRUE 60332
60330: GO 60465
60332: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
60333: LD_ADDR_VAR 0 5
60337: PUSH
60338: LD_VAR 0 1
60342: PUSH
60343: LD_INT 3
60345: PLUS
60346: PUSH
60347: LD_VAR 0 2
60351: PUSH
60352: LD_INT 4
60354: PUSH
60355: EMPTY
60356: LIST
60357: LIST
60358: LIST
60359: PUSH
60360: LD_VAR 0 1
60364: PUSH
60365: LD_INT 4
60367: PLUS
60368: PUSH
60369: LD_VAR 0 2
60373: PUSH
60374: LD_INT 4
60376: PLUS
60377: PUSH
60378: LD_INT 5
60380: PUSH
60381: EMPTY
60382: LIST
60383: LIST
60384: LIST
60385: PUSH
60386: LD_VAR 0 1
60390: PUSH
60391: LD_INT 4
60393: MINUS
60394: PUSH
60395: LD_VAR 0 2
60399: PUSH
60400: LD_INT 1
60402: PUSH
60403: EMPTY
60404: LIST
60405: LIST
60406: LIST
60407: PUSH
60408: LD_VAR 0 1
60412: PUSH
60413: LD_VAR 0 2
60417: PUSH
60418: LD_INT 4
60420: MINUS
60421: PUSH
60422: LD_INT 3
60424: PUSH
60425: EMPTY
60426: LIST
60427: LIST
60428: LIST
60429: PUSH
60430: LD_VAR 0 1
60434: PUSH
60435: LD_INT 3
60437: MINUS
60438: PUSH
60439: LD_VAR 0 2
60443: PUSH
60444: LD_INT 3
60446: MINUS
60447: PUSH
60448: LD_INT 2
60450: PUSH
60451: EMPTY
60452: LIST
60453: LIST
60454: LIST
60455: PUSH
60456: EMPTY
60457: LIST
60458: LIST
60459: LIST
60460: LIST
60461: LIST
60462: ST_TO_ADDR
// end ; 4 :
60463: GO 60744
60465: LD_INT 4
60467: DOUBLE
60468: EQUAL
60469: IFTRUE 60473
60471: GO 60606
60473: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
60474: LD_ADDR_VAR 0 5
60478: PUSH
60479: LD_VAR 0 1
60483: PUSH
60484: LD_VAR 0 2
60488: PUSH
60489: LD_INT 4
60491: PLUS
60492: PUSH
60493: LD_INT 0
60495: PUSH
60496: EMPTY
60497: LIST
60498: LIST
60499: LIST
60500: PUSH
60501: LD_VAR 0 1
60505: PUSH
60506: LD_INT 3
60508: PLUS
60509: PUSH
60510: LD_VAR 0 2
60514: PUSH
60515: LD_INT 3
60517: PLUS
60518: PUSH
60519: LD_INT 5
60521: PUSH
60522: EMPTY
60523: LIST
60524: LIST
60525: LIST
60526: PUSH
60527: LD_VAR 0 1
60531: PUSH
60532: LD_INT 4
60534: PLUS
60535: PUSH
60536: LD_VAR 0 2
60540: PUSH
60541: LD_INT 4
60543: PUSH
60544: EMPTY
60545: LIST
60546: LIST
60547: LIST
60548: PUSH
60549: LD_VAR 0 1
60553: PUSH
60554: LD_VAR 0 2
60558: PUSH
60559: LD_INT 3
60561: MINUS
60562: PUSH
60563: LD_INT 3
60565: PUSH
60566: EMPTY
60567: LIST
60568: LIST
60569: LIST
60570: PUSH
60571: LD_VAR 0 1
60575: PUSH
60576: LD_INT 4
60578: MINUS
60579: PUSH
60580: LD_VAR 0 2
60584: PUSH
60585: LD_INT 4
60587: MINUS
60588: PUSH
60589: LD_INT 2
60591: PUSH
60592: EMPTY
60593: LIST
60594: LIST
60595: LIST
60596: PUSH
60597: EMPTY
60598: LIST
60599: LIST
60600: LIST
60601: LIST
60602: LIST
60603: ST_TO_ADDR
// end ; 5 :
60604: GO 60744
60606: LD_INT 5
60608: DOUBLE
60609: EQUAL
60610: IFTRUE 60614
60612: GO 60743
60614: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
60615: LD_ADDR_VAR 0 5
60619: PUSH
60620: LD_VAR 0 1
60624: PUSH
60625: LD_INT 4
60627: MINUS
60628: PUSH
60629: LD_VAR 0 2
60633: PUSH
60634: LD_INT 1
60636: PUSH
60637: EMPTY
60638: LIST
60639: LIST
60640: LIST
60641: PUSH
60642: LD_VAR 0 1
60646: PUSH
60647: LD_VAR 0 2
60651: PUSH
60652: LD_INT 4
60654: MINUS
60655: PUSH
60656: LD_INT 3
60658: PUSH
60659: EMPTY
60660: LIST
60661: LIST
60662: LIST
60663: PUSH
60664: LD_VAR 0 1
60668: PUSH
60669: LD_INT 4
60671: PLUS
60672: PUSH
60673: LD_VAR 0 2
60677: PUSH
60678: LD_INT 4
60680: PLUS
60681: PUSH
60682: LD_INT 5
60684: PUSH
60685: EMPTY
60686: LIST
60687: LIST
60688: LIST
60689: PUSH
60690: LD_VAR 0 1
60694: PUSH
60695: LD_INT 3
60697: PLUS
60698: PUSH
60699: LD_VAR 0 2
60703: PUSH
60704: LD_INT 4
60706: PUSH
60707: EMPTY
60708: LIST
60709: LIST
60710: LIST
60711: PUSH
60712: LD_VAR 0 1
60716: PUSH
60717: LD_VAR 0 2
60721: PUSH
60722: LD_INT 3
60724: PLUS
60725: PUSH
60726: LD_INT 0
60728: PUSH
60729: EMPTY
60730: LIST
60731: LIST
60732: LIST
60733: PUSH
60734: EMPTY
60735: LIST
60736: LIST
60737: LIST
60738: LIST
60739: LIST
60740: ST_TO_ADDR
// end ; end ;
60741: GO 60744
60743: POP
// result := list ;
60744: LD_ADDR_VAR 0 4
60748: PUSH
60749: LD_VAR 0 5
60753: ST_TO_ADDR
// end ;
60754: LD_VAR 0 4
60758: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
60759: LD_INT 0
60761: PPUSH
60762: PPUSH
60763: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
60764: LD_VAR 0 1
60768: NOT
60769: PUSH
60770: LD_VAR 0 2
60774: PUSH
60775: LD_INT 1
60777: PUSH
60778: LD_INT 2
60780: PUSH
60781: LD_INT 3
60783: PUSH
60784: LD_INT 4
60786: PUSH
60787: EMPTY
60788: LIST
60789: LIST
60790: LIST
60791: LIST
60792: IN
60793: NOT
60794: OR
60795: IFFALSE 60799
// exit ;
60797: GO 60891
// tmp := [ ] ;
60799: LD_ADDR_VAR 0 5
60803: PUSH
60804: EMPTY
60805: ST_TO_ADDR
// for i in units do
60806: LD_ADDR_VAR 0 4
60810: PUSH
60811: LD_VAR 0 1
60815: PUSH
60816: FOR_IN
60817: IFFALSE 60860
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
60819: LD_ADDR_VAR 0 5
60823: PUSH
60824: LD_VAR 0 5
60828: PPUSH
60829: LD_VAR 0 5
60833: PUSH
60834: LD_INT 1
60836: PLUS
60837: PPUSH
60838: LD_VAR 0 4
60842: PPUSH
60843: LD_VAR 0 2
60847: PPUSH
60848: CALL_OW 259
60852: PPUSH
60853: CALL_OW 2
60857: ST_TO_ADDR
60858: GO 60816
60860: POP
60861: POP
// if not tmp then
60862: LD_VAR 0 5
60866: NOT
60867: IFFALSE 60871
// exit ;
60869: GO 60891
// result := SortListByListDesc ( units , tmp ) ;
60871: LD_ADDR_VAR 0 3
60875: PUSH
60876: LD_VAR 0 1
60880: PPUSH
60881: LD_VAR 0 5
60885: PPUSH
60886: CALL_OW 77
60890: ST_TO_ADDR
// end ;
60891: LD_VAR 0 3
60895: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
60896: LD_INT 0
60898: PPUSH
60899: PPUSH
60900: PPUSH
// result := false ;
60901: LD_ADDR_VAR 0 3
60905: PUSH
60906: LD_INT 0
60908: ST_TO_ADDR
// x := GetX ( building ) ;
60909: LD_ADDR_VAR 0 4
60913: PUSH
60914: LD_VAR 0 2
60918: PPUSH
60919: CALL_OW 250
60923: ST_TO_ADDR
// y := GetY ( building ) ;
60924: LD_ADDR_VAR 0 5
60928: PUSH
60929: LD_VAR 0 2
60933: PPUSH
60934: CALL_OW 251
60938: ST_TO_ADDR
// if not building or not x or not y then
60939: LD_VAR 0 2
60943: NOT
60944: PUSH
60945: LD_VAR 0 4
60949: NOT
60950: OR
60951: PUSH
60952: LD_VAR 0 5
60956: NOT
60957: OR
60958: IFFALSE 60962
// exit ;
60960: GO 61054
// if GetTaskList ( unit ) then
60962: LD_VAR 0 1
60966: PPUSH
60967: CALL_OW 437
60971: IFFALSE 61054
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
60973: LD_STRING e
60975: PUSH
60976: LD_VAR 0 1
60980: PPUSH
60981: CALL_OW 437
60985: PUSH
60986: LD_INT 1
60988: ARRAY
60989: PUSH
60990: LD_INT 1
60992: ARRAY
60993: EQUAL
60994: PUSH
60995: LD_VAR 0 4
60999: PUSH
61000: LD_VAR 0 1
61004: PPUSH
61005: CALL_OW 437
61009: PUSH
61010: LD_INT 1
61012: ARRAY
61013: PUSH
61014: LD_INT 2
61016: ARRAY
61017: EQUAL
61018: AND
61019: PUSH
61020: LD_VAR 0 5
61024: PUSH
61025: LD_VAR 0 1
61029: PPUSH
61030: CALL_OW 437
61034: PUSH
61035: LD_INT 1
61037: ARRAY
61038: PUSH
61039: LD_INT 3
61041: ARRAY
61042: EQUAL
61043: AND
61044: IFFALSE 61054
// result := true end ;
61046: LD_ADDR_VAR 0 3
61050: PUSH
61051: LD_INT 1
61053: ST_TO_ADDR
// end ;
61054: LD_VAR 0 3
61058: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
61059: LD_INT 0
61061: PPUSH
// result := false ;
61062: LD_ADDR_VAR 0 4
61066: PUSH
61067: LD_INT 0
61069: ST_TO_ADDR
// if GetTaskList ( unit ) then
61070: LD_VAR 0 1
61074: PPUSH
61075: CALL_OW 437
61079: IFFALSE 61162
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
61081: LD_STRING M
61083: PUSH
61084: LD_VAR 0 1
61088: PPUSH
61089: CALL_OW 437
61093: PUSH
61094: LD_INT 1
61096: ARRAY
61097: PUSH
61098: LD_INT 1
61100: ARRAY
61101: EQUAL
61102: PUSH
61103: LD_VAR 0 2
61107: PUSH
61108: LD_VAR 0 1
61112: PPUSH
61113: CALL_OW 437
61117: PUSH
61118: LD_INT 1
61120: ARRAY
61121: PUSH
61122: LD_INT 2
61124: ARRAY
61125: EQUAL
61126: AND
61127: PUSH
61128: LD_VAR 0 3
61132: PUSH
61133: LD_VAR 0 1
61137: PPUSH
61138: CALL_OW 437
61142: PUSH
61143: LD_INT 1
61145: ARRAY
61146: PUSH
61147: LD_INT 3
61149: ARRAY
61150: EQUAL
61151: AND
61152: IFFALSE 61162
// result := true ;
61154: LD_ADDR_VAR 0 4
61158: PUSH
61159: LD_INT 1
61161: ST_TO_ADDR
// end ; end ;
61162: LD_VAR 0 4
61166: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
61167: LD_INT 0
61169: PPUSH
61170: PPUSH
61171: PPUSH
61172: PPUSH
// if not unit or not area then
61173: LD_VAR 0 1
61177: NOT
61178: PUSH
61179: LD_VAR 0 2
61183: NOT
61184: OR
61185: IFFALSE 61189
// exit ;
61187: GO 61353
// tmp := AreaToList ( area , i ) ;
61189: LD_ADDR_VAR 0 6
61193: PUSH
61194: LD_VAR 0 2
61198: PPUSH
61199: LD_VAR 0 5
61203: PPUSH
61204: CALL_OW 517
61208: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
61209: LD_ADDR_VAR 0 5
61213: PUSH
61214: DOUBLE
61215: LD_INT 1
61217: DEC
61218: ST_TO_ADDR
61219: LD_VAR 0 6
61223: PUSH
61224: LD_INT 1
61226: ARRAY
61227: PUSH
61228: FOR_TO
61229: IFFALSE 61351
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
61231: LD_ADDR_VAR 0 7
61235: PUSH
61236: LD_VAR 0 6
61240: PUSH
61241: LD_INT 1
61243: ARRAY
61244: PUSH
61245: LD_VAR 0 5
61249: ARRAY
61250: PUSH
61251: LD_VAR 0 6
61255: PUSH
61256: LD_INT 2
61258: ARRAY
61259: PUSH
61260: LD_VAR 0 5
61264: ARRAY
61265: PUSH
61266: EMPTY
61267: LIST
61268: LIST
61269: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
61270: LD_VAR 0 7
61274: PUSH
61275: LD_INT 1
61277: ARRAY
61278: PPUSH
61279: LD_VAR 0 7
61283: PUSH
61284: LD_INT 2
61286: ARRAY
61287: PPUSH
61288: CALL_OW 428
61292: PUSH
61293: LD_INT 0
61295: EQUAL
61296: IFFALSE 61349
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
61298: LD_VAR 0 1
61302: PPUSH
61303: LD_VAR 0 7
61307: PUSH
61308: LD_INT 1
61310: ARRAY
61311: PPUSH
61312: LD_VAR 0 7
61316: PUSH
61317: LD_INT 2
61319: ARRAY
61320: PPUSH
61321: LD_VAR 0 3
61325: PPUSH
61326: CALL_OW 48
// result := IsPlaced ( unit ) ;
61330: LD_ADDR_VAR 0 4
61334: PUSH
61335: LD_VAR 0 1
61339: PPUSH
61340: CALL_OW 305
61344: ST_TO_ADDR
// exit ;
61345: POP
61346: POP
61347: GO 61353
// end ; end ;
61349: GO 61228
61351: POP
61352: POP
// end ;
61353: LD_VAR 0 4
61357: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
61358: LD_INT 0
61360: PPUSH
61361: PPUSH
61362: PPUSH
// if not side or side > 8 then
61363: LD_VAR 0 1
61367: NOT
61368: PUSH
61369: LD_VAR 0 1
61373: PUSH
61374: LD_INT 8
61376: GREATER
61377: OR
61378: IFFALSE 61382
// exit ;
61380: GO 61569
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
61382: LD_ADDR_VAR 0 4
61386: PUSH
61387: LD_INT 22
61389: PUSH
61390: LD_VAR 0 1
61394: PUSH
61395: EMPTY
61396: LIST
61397: LIST
61398: PUSH
61399: LD_INT 21
61401: PUSH
61402: LD_INT 3
61404: PUSH
61405: EMPTY
61406: LIST
61407: LIST
61408: PUSH
61409: EMPTY
61410: LIST
61411: LIST
61412: PPUSH
61413: CALL_OW 69
61417: ST_TO_ADDR
// if not tmp then
61418: LD_VAR 0 4
61422: NOT
61423: IFFALSE 61427
// exit ;
61425: GO 61569
// enable_addtolog := true ;
61427: LD_ADDR_OWVAR 81
61431: PUSH
61432: LD_INT 1
61434: ST_TO_ADDR
// AddToLog ( [ ) ;
61435: LD_STRING [
61437: PPUSH
61438: CALL_OW 561
// for i in tmp do
61442: LD_ADDR_VAR 0 3
61446: PUSH
61447: LD_VAR 0 4
61451: PUSH
61452: FOR_IN
61453: IFFALSE 61560
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
61455: LD_STRING [
61457: PUSH
61458: LD_VAR 0 3
61462: PPUSH
61463: CALL_OW 266
61467: STR
61468: PUSH
61469: LD_STRING , 
61471: STR
61472: PUSH
61473: LD_VAR 0 3
61477: PPUSH
61478: CALL_OW 250
61482: STR
61483: PUSH
61484: LD_STRING , 
61486: STR
61487: PUSH
61488: LD_VAR 0 3
61492: PPUSH
61493: CALL_OW 251
61497: STR
61498: PUSH
61499: LD_STRING , 
61501: STR
61502: PUSH
61503: LD_VAR 0 3
61507: PPUSH
61508: CALL_OW 254
61512: STR
61513: PUSH
61514: LD_STRING , 
61516: STR
61517: PUSH
61518: LD_VAR 0 3
61522: PPUSH
61523: LD_INT 1
61525: PPUSH
61526: CALL_OW 268
61530: STR
61531: PUSH
61532: LD_STRING , 
61534: STR
61535: PUSH
61536: LD_VAR 0 3
61540: PPUSH
61541: LD_INT 2
61543: PPUSH
61544: CALL_OW 268
61548: STR
61549: PUSH
61550: LD_STRING ],
61552: STR
61553: PPUSH
61554: CALL_OW 561
// end ;
61558: GO 61452
61560: POP
61561: POP
// AddToLog ( ]; ) ;
61562: LD_STRING ];
61564: PPUSH
61565: CALL_OW 561
// end ;
61569: LD_VAR 0 2
61573: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
61574: LD_INT 0
61576: PPUSH
61577: PPUSH
61578: PPUSH
61579: PPUSH
61580: PPUSH
// if not area or not rate or not max then
61581: LD_VAR 0 1
61585: NOT
61586: PUSH
61587: LD_VAR 0 2
61591: NOT
61592: OR
61593: PUSH
61594: LD_VAR 0 4
61598: NOT
61599: OR
61600: IFFALSE 61604
// exit ;
61602: GO 61796
// while 1 do
61604: LD_INT 1
61606: IFFALSE 61796
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
61608: LD_ADDR_VAR 0 9
61612: PUSH
61613: LD_VAR 0 1
61617: PPUSH
61618: LD_INT 1
61620: PPUSH
61621: CALL_OW 287
61625: PUSH
61626: LD_INT 10
61628: MUL
61629: ST_TO_ADDR
// r := rate / 10 ;
61630: LD_ADDR_VAR 0 7
61634: PUSH
61635: LD_VAR 0 2
61639: PUSH
61640: LD_INT 10
61642: DIVREAL
61643: ST_TO_ADDR
// time := 1 1$00 ;
61644: LD_ADDR_VAR 0 8
61648: PUSH
61649: LD_INT 2100
61651: ST_TO_ADDR
// if amount < min then
61652: LD_VAR 0 9
61656: PUSH
61657: LD_VAR 0 3
61661: LESS
61662: IFFALSE 61680
// r := r * 2 else
61664: LD_ADDR_VAR 0 7
61668: PUSH
61669: LD_VAR 0 7
61673: PUSH
61674: LD_INT 2
61676: MUL
61677: ST_TO_ADDR
61678: GO 61706
// if amount > max then
61680: LD_VAR 0 9
61684: PUSH
61685: LD_VAR 0 4
61689: GREATER
61690: IFFALSE 61706
// r := r / 2 ;
61692: LD_ADDR_VAR 0 7
61696: PUSH
61697: LD_VAR 0 7
61701: PUSH
61702: LD_INT 2
61704: DIVREAL
61705: ST_TO_ADDR
// time := time / r ;
61706: LD_ADDR_VAR 0 8
61710: PUSH
61711: LD_VAR 0 8
61715: PUSH
61716: LD_VAR 0 7
61720: DIVREAL
61721: ST_TO_ADDR
// if time < 0 then
61722: LD_VAR 0 8
61726: PUSH
61727: LD_INT 0
61729: LESS
61730: IFFALSE 61747
// time := time * - 1 ;
61732: LD_ADDR_VAR 0 8
61736: PUSH
61737: LD_VAR 0 8
61741: PUSH
61742: LD_INT 1
61744: NEG
61745: MUL
61746: ST_TO_ADDR
// wait ( time ) ;
61747: LD_VAR 0 8
61751: PPUSH
61752: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
61756: LD_INT 35
61758: PPUSH
61759: LD_INT 875
61761: PPUSH
61762: CALL_OW 12
61766: PPUSH
61767: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
61771: LD_INT 1
61773: PPUSH
61774: LD_INT 5
61776: PPUSH
61777: CALL_OW 12
61781: PPUSH
61782: LD_VAR 0 1
61786: PPUSH
61787: LD_INT 1
61789: PPUSH
61790: CALL_OW 55
// end ;
61794: GO 61604
// end ;
61796: LD_VAR 0 5
61800: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
61801: LD_INT 0
61803: PPUSH
61804: PPUSH
61805: PPUSH
61806: PPUSH
61807: PPUSH
61808: PPUSH
61809: PPUSH
61810: PPUSH
// if not turrets or not factories then
61811: LD_VAR 0 1
61815: NOT
61816: PUSH
61817: LD_VAR 0 2
61821: NOT
61822: OR
61823: IFFALSE 61827
// exit ;
61825: GO 62134
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
61827: LD_ADDR_VAR 0 10
61831: PUSH
61832: LD_INT 5
61834: PUSH
61835: LD_INT 6
61837: PUSH
61838: EMPTY
61839: LIST
61840: LIST
61841: PUSH
61842: LD_INT 2
61844: PUSH
61845: LD_INT 4
61847: PUSH
61848: EMPTY
61849: LIST
61850: LIST
61851: PUSH
61852: LD_INT 3
61854: PUSH
61855: LD_INT 5
61857: PUSH
61858: EMPTY
61859: LIST
61860: LIST
61861: PUSH
61862: EMPTY
61863: LIST
61864: LIST
61865: LIST
61866: PUSH
61867: LD_INT 24
61869: PUSH
61870: LD_INT 25
61872: PUSH
61873: EMPTY
61874: LIST
61875: LIST
61876: PUSH
61877: LD_INT 23
61879: PUSH
61880: LD_INT 27
61882: PUSH
61883: EMPTY
61884: LIST
61885: LIST
61886: PUSH
61887: EMPTY
61888: LIST
61889: LIST
61890: PUSH
61891: LD_INT 42
61893: PUSH
61894: LD_INT 43
61896: PUSH
61897: EMPTY
61898: LIST
61899: LIST
61900: PUSH
61901: LD_INT 44
61903: PUSH
61904: LD_INT 46
61906: PUSH
61907: EMPTY
61908: LIST
61909: LIST
61910: PUSH
61911: LD_INT 45
61913: PUSH
61914: LD_INT 47
61916: PUSH
61917: EMPTY
61918: LIST
61919: LIST
61920: PUSH
61921: EMPTY
61922: LIST
61923: LIST
61924: LIST
61925: PUSH
61926: EMPTY
61927: LIST
61928: LIST
61929: LIST
61930: ST_TO_ADDR
// result := [ ] ;
61931: LD_ADDR_VAR 0 3
61935: PUSH
61936: EMPTY
61937: ST_TO_ADDR
// for i in turrets do
61938: LD_ADDR_VAR 0 4
61942: PUSH
61943: LD_VAR 0 1
61947: PUSH
61948: FOR_IN
61949: IFFALSE 62132
// begin nat := GetNation ( i ) ;
61951: LD_ADDR_VAR 0 7
61955: PUSH
61956: LD_VAR 0 4
61960: PPUSH
61961: CALL_OW 248
61965: ST_TO_ADDR
// weapon := 0 ;
61966: LD_ADDR_VAR 0 8
61970: PUSH
61971: LD_INT 0
61973: ST_TO_ADDR
// if not nat then
61974: LD_VAR 0 7
61978: NOT
61979: IFFALSE 61983
// continue ;
61981: GO 61948
// for j in list [ nat ] do
61983: LD_ADDR_VAR 0 5
61987: PUSH
61988: LD_VAR 0 10
61992: PUSH
61993: LD_VAR 0 7
61997: ARRAY
61998: PUSH
61999: FOR_IN
62000: IFFALSE 62041
// if GetBWeapon ( i ) = j [ 1 ] then
62002: LD_VAR 0 4
62006: PPUSH
62007: CALL_OW 269
62011: PUSH
62012: LD_VAR 0 5
62016: PUSH
62017: LD_INT 1
62019: ARRAY
62020: EQUAL
62021: IFFALSE 62039
// begin weapon := j [ 2 ] ;
62023: LD_ADDR_VAR 0 8
62027: PUSH
62028: LD_VAR 0 5
62032: PUSH
62033: LD_INT 2
62035: ARRAY
62036: ST_TO_ADDR
// break ;
62037: GO 62041
// end ;
62039: GO 61999
62041: POP
62042: POP
// if not weapon then
62043: LD_VAR 0 8
62047: NOT
62048: IFFALSE 62052
// continue ;
62050: GO 61948
// for k in factories do
62052: LD_ADDR_VAR 0 6
62056: PUSH
62057: LD_VAR 0 2
62061: PUSH
62062: FOR_IN
62063: IFFALSE 62128
// begin weapons := AvailableWeaponList ( k ) ;
62065: LD_ADDR_VAR 0 9
62069: PUSH
62070: LD_VAR 0 6
62074: PPUSH
62075: CALL_OW 478
62079: ST_TO_ADDR
// if not weapons then
62080: LD_VAR 0 9
62084: NOT
62085: IFFALSE 62089
// continue ;
62087: GO 62062
// if weapon in weapons then
62089: LD_VAR 0 8
62093: PUSH
62094: LD_VAR 0 9
62098: IN
62099: IFFALSE 62126
// begin result := [ i , weapon ] ;
62101: LD_ADDR_VAR 0 3
62105: PUSH
62106: LD_VAR 0 4
62110: PUSH
62111: LD_VAR 0 8
62115: PUSH
62116: EMPTY
62117: LIST
62118: LIST
62119: ST_TO_ADDR
// exit ;
62120: POP
62121: POP
62122: POP
62123: POP
62124: GO 62134
// end ; end ;
62126: GO 62062
62128: POP
62129: POP
// end ;
62130: GO 61948
62132: POP
62133: POP
// end ;
62134: LD_VAR 0 3
62138: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
62139: LD_INT 0
62141: PPUSH
// if not side or side > 8 then
62142: LD_VAR 0 3
62146: NOT
62147: PUSH
62148: LD_VAR 0 3
62152: PUSH
62153: LD_INT 8
62155: GREATER
62156: OR
62157: IFFALSE 62161
// exit ;
62159: GO 62220
// if not range then
62161: LD_VAR 0 4
62165: NOT
62166: IFFALSE 62177
// range := - 12 ;
62168: LD_ADDR_VAR 0 4
62172: PUSH
62173: LD_INT 12
62175: NEG
62176: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
62177: LD_VAR 0 1
62181: PPUSH
62182: LD_VAR 0 2
62186: PPUSH
62187: LD_VAR 0 3
62191: PPUSH
62192: LD_VAR 0 4
62196: PPUSH
62197: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
62201: LD_VAR 0 1
62205: PPUSH
62206: LD_VAR 0 2
62210: PPUSH
62211: LD_VAR 0 3
62215: PPUSH
62216: CALL_OW 331
// end ;
62220: LD_VAR 0 5
62224: RET
// export function Video ( mode ) ; begin
62225: LD_INT 0
62227: PPUSH
// ingame_video = mode ;
62228: LD_ADDR_OWVAR 52
62232: PUSH
62233: LD_VAR 0 1
62237: ST_TO_ADDR
// interface_hidden = mode ;
62238: LD_ADDR_OWVAR 54
62242: PUSH
62243: LD_VAR 0 1
62247: ST_TO_ADDR
// end ;
62248: LD_VAR 0 2
62252: RET
// export function Join ( array , element ) ; begin
62253: LD_INT 0
62255: PPUSH
// result := Replace ( array , array + 1 , element ) ;
62256: LD_ADDR_VAR 0 3
62260: PUSH
62261: LD_VAR 0 1
62265: PPUSH
62266: LD_VAR 0 1
62270: PUSH
62271: LD_INT 1
62273: PLUS
62274: PPUSH
62275: LD_VAR 0 2
62279: PPUSH
62280: CALL_OW 1
62284: ST_TO_ADDR
// end ;
62285: LD_VAR 0 3
62289: RET
// export function JoinUnion ( array , element ) ; begin
62290: LD_INT 0
62292: PPUSH
// result := array union element ;
62293: LD_ADDR_VAR 0 3
62297: PUSH
62298: LD_VAR 0 1
62302: PUSH
62303: LD_VAR 0 2
62307: UNION
62308: ST_TO_ADDR
// end ;
62309: LD_VAR 0 3
62313: RET
// export function GetBehemoths ( side ) ; begin
62314: LD_INT 0
62316: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
62317: LD_ADDR_VAR 0 2
62321: PUSH
62322: LD_INT 22
62324: PUSH
62325: LD_VAR 0 1
62329: PUSH
62330: EMPTY
62331: LIST
62332: LIST
62333: PUSH
62334: LD_INT 31
62336: PUSH
62337: LD_INT 25
62339: PUSH
62340: EMPTY
62341: LIST
62342: LIST
62343: PUSH
62344: EMPTY
62345: LIST
62346: LIST
62347: PPUSH
62348: CALL_OW 69
62352: ST_TO_ADDR
// end ;
62353: LD_VAR 0 2
62357: RET
// export function Shuffle ( array ) ; var i , index ; begin
62358: LD_INT 0
62360: PPUSH
62361: PPUSH
62362: PPUSH
// result := [ ] ;
62363: LD_ADDR_VAR 0 2
62367: PUSH
62368: EMPTY
62369: ST_TO_ADDR
// if not array then
62370: LD_VAR 0 1
62374: NOT
62375: IFFALSE 62379
// exit ;
62377: GO 62478
// Randomize ;
62379: CALL_OW 10
// for i = array downto 1 do
62383: LD_ADDR_VAR 0 3
62387: PUSH
62388: DOUBLE
62389: LD_VAR 0 1
62393: INC
62394: ST_TO_ADDR
62395: LD_INT 1
62397: PUSH
62398: FOR_DOWNTO
62399: IFFALSE 62476
// begin index := rand ( 1 , array ) ;
62401: LD_ADDR_VAR 0 4
62405: PUSH
62406: LD_INT 1
62408: PPUSH
62409: LD_VAR 0 1
62413: PPUSH
62414: CALL_OW 12
62418: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
62419: LD_ADDR_VAR 0 2
62423: PUSH
62424: LD_VAR 0 2
62428: PPUSH
62429: LD_VAR 0 2
62433: PUSH
62434: LD_INT 1
62436: PLUS
62437: PPUSH
62438: LD_VAR 0 1
62442: PUSH
62443: LD_VAR 0 4
62447: ARRAY
62448: PPUSH
62449: CALL_OW 2
62453: ST_TO_ADDR
// array := Delete ( array , index ) ;
62454: LD_ADDR_VAR 0 1
62458: PUSH
62459: LD_VAR 0 1
62463: PPUSH
62464: LD_VAR 0 4
62468: PPUSH
62469: CALL_OW 3
62473: ST_TO_ADDR
// end ;
62474: GO 62398
62476: POP
62477: POP
// end ;
62478: LD_VAR 0 2
62482: RET
// export function GetBaseMaterials ( base ) ; begin
62483: LD_INT 0
62485: PPUSH
// result := [ 0 , 0 , 0 ] ;
62486: LD_ADDR_VAR 0 2
62490: PUSH
62491: LD_INT 0
62493: PUSH
62494: LD_INT 0
62496: PUSH
62497: LD_INT 0
62499: PUSH
62500: EMPTY
62501: LIST
62502: LIST
62503: LIST
62504: ST_TO_ADDR
// if not base then
62505: LD_VAR 0 1
62509: NOT
62510: IFFALSE 62514
// exit ;
62512: GO 62563
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
62514: LD_ADDR_VAR 0 2
62518: PUSH
62519: LD_VAR 0 1
62523: PPUSH
62524: LD_INT 1
62526: PPUSH
62527: CALL_OW 275
62531: PUSH
62532: LD_VAR 0 1
62536: PPUSH
62537: LD_INT 2
62539: PPUSH
62540: CALL_OW 275
62544: PUSH
62545: LD_VAR 0 1
62549: PPUSH
62550: LD_INT 3
62552: PPUSH
62553: CALL_OW 275
62557: PUSH
62558: EMPTY
62559: LIST
62560: LIST
62561: LIST
62562: ST_TO_ADDR
// end ;
62563: LD_VAR 0 2
62567: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
62568: LD_INT 0
62570: PPUSH
62571: PPUSH
// result := array ;
62572: LD_ADDR_VAR 0 3
62576: PUSH
62577: LD_VAR 0 1
62581: ST_TO_ADDR
// if size > 0 then
62582: LD_VAR 0 2
62586: PUSH
62587: LD_INT 0
62589: GREATER
62590: IFFALSE 62636
// for i := array downto size do
62592: LD_ADDR_VAR 0 4
62596: PUSH
62597: DOUBLE
62598: LD_VAR 0 1
62602: INC
62603: ST_TO_ADDR
62604: LD_VAR 0 2
62608: PUSH
62609: FOR_DOWNTO
62610: IFFALSE 62634
// result := Delete ( result , result ) ;
62612: LD_ADDR_VAR 0 3
62616: PUSH
62617: LD_VAR 0 3
62621: PPUSH
62622: LD_VAR 0 3
62626: PPUSH
62627: CALL_OW 3
62631: ST_TO_ADDR
62632: GO 62609
62634: POP
62635: POP
// end ;
62636: LD_VAR 0 3
62640: RET
// export function ComExit ( unit ) ; var tmp ; begin
62641: LD_INT 0
62643: PPUSH
62644: PPUSH
// if not IsInUnit ( unit ) then
62645: LD_VAR 0 1
62649: PPUSH
62650: CALL_OW 310
62654: NOT
62655: IFFALSE 62659
// exit ;
62657: GO 62719
// tmp := IsInUnit ( unit ) ;
62659: LD_ADDR_VAR 0 3
62663: PUSH
62664: LD_VAR 0 1
62668: PPUSH
62669: CALL_OW 310
62673: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
62674: LD_VAR 0 3
62678: PPUSH
62679: CALL_OW 247
62683: PUSH
62684: LD_INT 2
62686: EQUAL
62687: IFFALSE 62700
// ComExitVehicle ( unit ) else
62689: LD_VAR 0 1
62693: PPUSH
62694: CALL_OW 121
62698: GO 62709
// ComExitBuilding ( unit ) ;
62700: LD_VAR 0 1
62704: PPUSH
62705: CALL_OW 122
// result := tmp ;
62709: LD_ADDR_VAR 0 2
62713: PUSH
62714: LD_VAR 0 3
62718: ST_TO_ADDR
// end ;
62719: LD_VAR 0 2
62723: RET
// export function ComExitAll ( units ) ; var i ; begin
62724: LD_INT 0
62726: PPUSH
62727: PPUSH
// if not units then
62728: LD_VAR 0 1
62732: NOT
62733: IFFALSE 62737
// exit ;
62735: GO 62763
// for i in units do
62737: LD_ADDR_VAR 0 3
62741: PUSH
62742: LD_VAR 0 1
62746: PUSH
62747: FOR_IN
62748: IFFALSE 62761
// ComExit ( i ) ;
62750: LD_VAR 0 3
62754: PPUSH
62755: CALL 62641 0 1
62759: GO 62747
62761: POP
62762: POP
// end ;
62763: LD_VAR 0 2
62767: RET
// export function ResetHc ; begin
62768: LD_INT 0
62770: PPUSH
// InitHc ;
62771: CALL_OW 19
// hc_importance := 0 ;
62775: LD_ADDR_OWVAR 32
62779: PUSH
62780: LD_INT 0
62782: ST_TO_ADDR
// end ;
62783: LD_VAR 0 1
62787: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
62788: LD_INT 0
62790: PPUSH
62791: PPUSH
62792: PPUSH
// _x := ( x1 + x2 ) div 2 ;
62793: LD_ADDR_VAR 0 6
62797: PUSH
62798: LD_VAR 0 1
62802: PUSH
62803: LD_VAR 0 3
62807: PLUS
62808: PUSH
62809: LD_INT 2
62811: DIV
62812: ST_TO_ADDR
// if _x < 0 then
62813: LD_VAR 0 6
62817: PUSH
62818: LD_INT 0
62820: LESS
62821: IFFALSE 62838
// _x := _x * - 1 ;
62823: LD_ADDR_VAR 0 6
62827: PUSH
62828: LD_VAR 0 6
62832: PUSH
62833: LD_INT 1
62835: NEG
62836: MUL
62837: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
62838: LD_ADDR_VAR 0 7
62842: PUSH
62843: LD_VAR 0 2
62847: PUSH
62848: LD_VAR 0 4
62852: PLUS
62853: PUSH
62854: LD_INT 2
62856: DIV
62857: ST_TO_ADDR
// if _y < 0 then
62858: LD_VAR 0 7
62862: PUSH
62863: LD_INT 0
62865: LESS
62866: IFFALSE 62883
// _y := _y * - 1 ;
62868: LD_ADDR_VAR 0 7
62872: PUSH
62873: LD_VAR 0 7
62877: PUSH
62878: LD_INT 1
62880: NEG
62881: MUL
62882: ST_TO_ADDR
// result := [ _x , _y ] ;
62883: LD_ADDR_VAR 0 5
62887: PUSH
62888: LD_VAR 0 6
62892: PUSH
62893: LD_VAR 0 7
62897: PUSH
62898: EMPTY
62899: LIST
62900: LIST
62901: ST_TO_ADDR
// end ;
62902: LD_VAR 0 5
62906: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
62907: LD_INT 0
62909: PPUSH
62910: PPUSH
62911: PPUSH
62912: PPUSH
// task := GetTaskList ( unit ) ;
62913: LD_ADDR_VAR 0 7
62917: PUSH
62918: LD_VAR 0 1
62922: PPUSH
62923: CALL_OW 437
62927: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
62928: LD_VAR 0 7
62932: NOT
62933: PUSH
62934: LD_VAR 0 1
62938: PPUSH
62939: LD_VAR 0 2
62943: PPUSH
62944: CALL_OW 308
62948: NOT
62949: AND
62950: IFFALSE 62954
// exit ;
62952: GO 63072
// if IsInArea ( unit , area ) then
62954: LD_VAR 0 1
62958: PPUSH
62959: LD_VAR 0 2
62963: PPUSH
62964: CALL_OW 308
62968: IFFALSE 62986
// begin ComMoveToArea ( unit , goAway ) ;
62970: LD_VAR 0 1
62974: PPUSH
62975: LD_VAR 0 3
62979: PPUSH
62980: CALL_OW 113
// exit ;
62984: GO 63072
// end ; if task [ 1 ] [ 1 ] <> M then
62986: LD_VAR 0 7
62990: PUSH
62991: LD_INT 1
62993: ARRAY
62994: PUSH
62995: LD_INT 1
62997: ARRAY
62998: PUSH
62999: LD_STRING M
63001: NONEQUAL
63002: IFFALSE 63006
// exit ;
63004: GO 63072
// x := task [ 1 ] [ 2 ] ;
63006: LD_ADDR_VAR 0 5
63010: PUSH
63011: LD_VAR 0 7
63015: PUSH
63016: LD_INT 1
63018: ARRAY
63019: PUSH
63020: LD_INT 2
63022: ARRAY
63023: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
63024: LD_ADDR_VAR 0 6
63028: PUSH
63029: LD_VAR 0 7
63033: PUSH
63034: LD_INT 1
63036: ARRAY
63037: PUSH
63038: LD_INT 3
63040: ARRAY
63041: ST_TO_ADDR
// if InArea ( x , y , area ) then
63042: LD_VAR 0 5
63046: PPUSH
63047: LD_VAR 0 6
63051: PPUSH
63052: LD_VAR 0 2
63056: PPUSH
63057: CALL_OW 309
63061: IFFALSE 63072
// ComStop ( unit ) ;
63063: LD_VAR 0 1
63067: PPUSH
63068: CALL_OW 141
// end ;
63072: LD_VAR 0 4
63076: RET
// export function Abs ( value ) ; begin
63077: LD_INT 0
63079: PPUSH
// result := value ;
63080: LD_ADDR_VAR 0 2
63084: PUSH
63085: LD_VAR 0 1
63089: ST_TO_ADDR
// if value < 0 then
63090: LD_VAR 0 1
63094: PUSH
63095: LD_INT 0
63097: LESS
63098: IFFALSE 63115
// result := value * - 1 ;
63100: LD_ADDR_VAR 0 2
63104: PUSH
63105: LD_VAR 0 1
63109: PUSH
63110: LD_INT 1
63112: NEG
63113: MUL
63114: ST_TO_ADDR
// end ;
63115: LD_VAR 0 2
63119: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
63120: LD_INT 0
63122: PPUSH
63123: PPUSH
63124: PPUSH
63125: PPUSH
63126: PPUSH
63127: PPUSH
63128: PPUSH
63129: PPUSH
// if not unit or not building then
63130: LD_VAR 0 1
63134: NOT
63135: PUSH
63136: LD_VAR 0 2
63140: NOT
63141: OR
63142: IFFALSE 63146
// exit ;
63144: GO 63372
// x := GetX ( building ) ;
63146: LD_ADDR_VAR 0 4
63150: PUSH
63151: LD_VAR 0 2
63155: PPUSH
63156: CALL_OW 250
63160: ST_TO_ADDR
// y := GetY ( building ) ;
63161: LD_ADDR_VAR 0 6
63165: PUSH
63166: LD_VAR 0 2
63170: PPUSH
63171: CALL_OW 251
63175: ST_TO_ADDR
// d := GetDir ( building ) ;
63176: LD_ADDR_VAR 0 8
63180: PUSH
63181: LD_VAR 0 2
63185: PPUSH
63186: CALL_OW 254
63190: ST_TO_ADDR
// r := 4 ;
63191: LD_ADDR_VAR 0 9
63195: PUSH
63196: LD_INT 4
63198: ST_TO_ADDR
// for i := 1 to 5 do
63199: LD_ADDR_VAR 0 10
63203: PUSH
63204: DOUBLE
63205: LD_INT 1
63207: DEC
63208: ST_TO_ADDR
63209: LD_INT 5
63211: PUSH
63212: FOR_TO
63213: IFFALSE 63370
// begin _x := ShiftX ( x , d , r + i ) ;
63215: LD_ADDR_VAR 0 5
63219: PUSH
63220: LD_VAR 0 4
63224: PPUSH
63225: LD_VAR 0 8
63229: PPUSH
63230: LD_VAR 0 9
63234: PUSH
63235: LD_VAR 0 10
63239: PLUS
63240: PPUSH
63241: CALL_OW 272
63245: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
63246: LD_ADDR_VAR 0 7
63250: PUSH
63251: LD_VAR 0 6
63255: PPUSH
63256: LD_VAR 0 8
63260: PPUSH
63261: LD_VAR 0 9
63265: PUSH
63266: LD_VAR 0 10
63270: PLUS
63271: PPUSH
63272: CALL_OW 273
63276: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
63277: LD_VAR 0 5
63281: PPUSH
63282: LD_VAR 0 7
63286: PPUSH
63287: CALL_OW 488
63291: PUSH
63292: LD_VAR 0 5
63296: PPUSH
63297: LD_VAR 0 7
63301: PPUSH
63302: CALL_OW 428
63306: PPUSH
63307: CALL_OW 247
63311: PUSH
63312: LD_INT 3
63314: PUSH
63315: LD_INT 2
63317: PUSH
63318: EMPTY
63319: LIST
63320: LIST
63321: IN
63322: NOT
63323: AND
63324: IFFALSE 63368
// begin ComMoveXY ( unit , _x , _y ) ;
63326: LD_VAR 0 1
63330: PPUSH
63331: LD_VAR 0 5
63335: PPUSH
63336: LD_VAR 0 7
63340: PPUSH
63341: CALL_OW 111
// result := [ _x , _y ] ;
63345: LD_ADDR_VAR 0 3
63349: PUSH
63350: LD_VAR 0 5
63354: PUSH
63355: LD_VAR 0 7
63359: PUSH
63360: EMPTY
63361: LIST
63362: LIST
63363: ST_TO_ADDR
// exit ;
63364: POP
63365: POP
63366: GO 63372
// end ; end ;
63368: GO 63212
63370: POP
63371: POP
// end ;
63372: LD_VAR 0 3
63376: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
63377: LD_INT 0
63379: PPUSH
63380: PPUSH
63381: PPUSH
// result := 0 ;
63382: LD_ADDR_VAR 0 3
63386: PUSH
63387: LD_INT 0
63389: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
63390: LD_VAR 0 1
63394: PUSH
63395: LD_INT 0
63397: LESS
63398: PUSH
63399: LD_VAR 0 1
63403: PUSH
63404: LD_INT 8
63406: GREATER
63407: OR
63408: PUSH
63409: LD_VAR 0 2
63413: PUSH
63414: LD_INT 0
63416: LESS
63417: OR
63418: PUSH
63419: LD_VAR 0 2
63423: PUSH
63424: LD_INT 8
63426: GREATER
63427: OR
63428: IFFALSE 63432
// exit ;
63430: GO 63507
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
63432: LD_ADDR_VAR 0 4
63436: PUSH
63437: LD_INT 22
63439: PUSH
63440: LD_VAR 0 2
63444: PUSH
63445: EMPTY
63446: LIST
63447: LIST
63448: PPUSH
63449: CALL_OW 69
63453: PUSH
63454: FOR_IN
63455: IFFALSE 63505
// begin un := UnitShoot ( i ) ;
63457: LD_ADDR_VAR 0 5
63461: PUSH
63462: LD_VAR 0 4
63466: PPUSH
63467: CALL_OW 504
63471: ST_TO_ADDR
// if GetSide ( un ) = side1 then
63472: LD_VAR 0 5
63476: PPUSH
63477: CALL_OW 255
63481: PUSH
63482: LD_VAR 0 1
63486: EQUAL
63487: IFFALSE 63503
// begin result := un ;
63489: LD_ADDR_VAR 0 3
63493: PUSH
63494: LD_VAR 0 5
63498: ST_TO_ADDR
// exit ;
63499: POP
63500: POP
63501: GO 63507
// end ; end ;
63503: GO 63454
63505: POP
63506: POP
// end ;
63507: LD_VAR 0 3
63511: RET
// export function GetCargoBay ( units ) ; begin
63512: LD_INT 0
63514: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
63515: LD_ADDR_VAR 0 2
63519: PUSH
63520: LD_VAR 0 1
63524: PPUSH
63525: LD_INT 2
63527: PUSH
63528: LD_INT 34
63530: PUSH
63531: LD_INT 12
63533: PUSH
63534: EMPTY
63535: LIST
63536: LIST
63537: PUSH
63538: LD_INT 34
63540: PUSH
63541: LD_INT 51
63543: PUSH
63544: EMPTY
63545: LIST
63546: LIST
63547: PUSH
63548: LD_INT 34
63550: PUSH
63551: LD_INT 32
63553: PUSH
63554: EMPTY
63555: LIST
63556: LIST
63557: PUSH
63558: LD_INT 34
63560: PUSH
63561: LD_EXP 53
63565: PUSH
63566: EMPTY
63567: LIST
63568: LIST
63569: PUSH
63570: EMPTY
63571: LIST
63572: LIST
63573: LIST
63574: LIST
63575: LIST
63576: PPUSH
63577: CALL_OW 72
63581: ST_TO_ADDR
// end ;
63582: LD_VAR 0 2
63586: RET
