// starting begin PrepareMap ;
   0: CALL 13 0 0
// Main_Variables ;
   4: CALL 136 0 0
// Start_Mission ;
   8: CALL 3478 0 0
// end ;
  12: END
// function PrepareMap ; begin
  13: LD_INT 0
  15: PPUSH
// ResetFog ;
  16: CALL_OW 335
// RandomizeAll ;
  20: CALL_OW 11
// game_difficulty := GetMultiplayerSetting ( 0 ) ;
  24: LD_ADDR_EXP 2
  28: PUSH
  29: LD_INT 0
  31: PPUSH
  32: CALL_OW 426
  36: ST_TO_ADDR
// Difficulty := game_difficulty ;
  37: LD_ADDR_OWVAR 67
  41: PUSH
  42: LD_EXP 2
  46: ST_TO_ADDR
// ChangeSideFog ( 8 , 6 ) ;
  47: LD_INT 8
  49: PPUSH
  50: LD_INT 6
  52: PPUSH
  53: CALL_OW 343
// PlaceSeeing ( 1 , 1 , 8 , - 37963 ) ;
  57: LD_INT 1
  59: PPUSH
  60: LD_INT 1
  62: PPUSH
  63: LD_INT 8
  65: PPUSH
  66: LD_INT 37963
  68: NEG
  69: PPUSH
  70: CALL_OW 330
// RemoveSeeing ( 1 , 1 , 8 ) ;
  74: LD_INT 1
  76: PPUSH
  77: LD_INT 1
  79: PPUSH
  80: LD_INT 8
  82: PPUSH
  83: CALL_OW 331
// PlaceCamera ;
  87: CALL 3945 0 0
// CreateNature ( nature , 4 , 3 , 2 , 1 ) ;
  91: LD_INT 2
  93: PPUSH
  94: LD_INT 4
  96: PPUSH
  97: LD_INT 3
  99: PPUSH
 100: LD_INT 2
 102: PPUSH
 103: LD_INT 1
 105: PPUSH
 106: CALL 7878 0 5
// PrepareComm ;
 110: CALL 8361 0 0
// SetSide ( fort , 6 ) ;
 114: LD_INT 23
 116: PPUSH
 117: LD_INT 6
 119: PPUSH
 120: CALL_OW 235
// CenterNowOnUnits ( fort ) ;
 124: LD_INT 23
 126: PPUSH
 127: CALL_OW 87
// end ;
 131: LD_VAR 0 1
 135: RET
// export game_on , game_difficulty , game_time , game_option , game_end , game_strings ; export leopold , leopold_in_fort , samuel , samuel_in_fort , mortars_in_fort , scout ; export u_mine , u_fac ; export areas ; export skill ; export ar_weapons , ru_weapons , us_weapons ; export arabian_force , russian_force , american_force , arabian_timeing , russian_timeing , american_timeing ; export meeting_start , meeting_arive , meeting_break , meeting_end , meeting_time , russian_timer , fort_destroyed , hero_died , mission_time , cargo_ok , american_hchan , dezert , arabian_attack , russian_attack , american_attack , american_help , american_sib_bomb , russian_trade , heike_dialog1 , heike_dialog2 ; export am_comander , ru_comander , ar_comander ; function Main_Variables ; begin
 136: LD_INT 0
 138: PPUSH
// game_on := false ;
 139: LD_ADDR_EXP 1
 143: PUSH
 144: LD_INT 0
 146: ST_TO_ADDR
// game_time := 0 0$00 ;
 147: LD_ADDR_EXP 3
 151: PUSH
 152: LD_INT 0
 154: ST_TO_ADDR
// game_option := [ 1 ] ;
 155: LD_ADDR_EXP 4
 159: PUSH
 160: LD_INT 1
 162: PUSH
 163: EMPTY
 164: LIST
 165: ST_TO_ADDR
// game_end := false ;
 166: LD_ADDR_EXP 5
 170: PUSH
 171: LD_INT 0
 173: ST_TO_ADDR
// game_strings := [ ] ;
 174: LD_ADDR_EXP 6
 178: PUSH
 179: EMPTY
 180: ST_TO_ADDR
// game_time := 0 0$00 ;
 181: LD_ADDR_EXP 3
 185: PUSH
 186: LD_INT 0
 188: ST_TO_ADDR
// mission_time := 0 0$00 ;
 189: LD_ADDR_EXP 34
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// skill := [ 5 , 7 , 9 ] [ game_difficulty ] ;
 197: LD_ADDR_EXP 16
 201: PUSH
 202: LD_INT 5
 204: PUSH
 205: LD_INT 7
 207: PUSH
 208: LD_INT 9
 210: PUSH
 211: EMPTY
 212: LIST
 213: LIST
 214: LIST
 215: PUSH
 216: LD_EXP 2
 220: ARRAY
 221: ST_TO_ADDR
// areas := [ a_swest , a_nwest , a_neast , a_seast ] ;
 222: LD_ADDR_EXP 15
 226: PUSH
 227: LD_INT 5
 229: PUSH
 230: LD_INT 6
 232: PUSH
 233: LD_INT 7
 235: PUSH
 236: LD_INT 8
 238: PUSH
 239: EMPTY
 240: LIST
 241: LIST
 242: LIST
 243: LIST
 244: ST_TO_ADDR
// meeting_start := false ;
 245: LD_ADDR_EXP 26
 249: PUSH
 250: LD_INT 0
 252: ST_TO_ADDR
// meeting_arive := false ;
 253: LD_ADDR_EXP 27
 257: PUSH
 258: LD_INT 0
 260: ST_TO_ADDR
// meeting_break := false ;
 261: LD_ADDR_EXP 28
 265: PUSH
 266: LD_INT 0
 268: ST_TO_ADDR
// meeting_end := false ;
 269: LD_ADDR_EXP 29
 273: PUSH
 274: LD_INT 0
 276: ST_TO_ADDR
// meeting_time := [ 4 4$00 , 3 3$40 , 3 3$20 ] [ game_difficulty ] ;
 277: LD_ADDR_EXP 30
 281: PUSH
 282: LD_INT 8400
 284: PUSH
 285: LD_INT 7700
 287: PUSH
 288: LD_INT 7000
 290: PUSH
 291: EMPTY
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: LD_EXP 2
 300: ARRAY
 301: ST_TO_ADDR
// arabian_force := [ 4 , 5 , 6 ] [ game_difficulty ] ;
 302: LD_ADDR_EXP 20
 306: PUSH
 307: LD_INT 4
 309: PUSH
 310: LD_INT 5
 312: PUSH
 313: LD_INT 6
 315: PUSH
 316: EMPTY
 317: LIST
 318: LIST
 319: LIST
 320: PUSH
 321: LD_EXP 2
 325: ARRAY
 326: ST_TO_ADDR
// american_force := [ 5 , 6 , 7 ] [ game_difficulty ] ;
 327: LD_ADDR_EXP 22
 331: PUSH
 332: LD_INT 5
 334: PUSH
 335: LD_INT 6
 337: PUSH
 338: LD_INT 7
 340: PUSH
 341: EMPTY
 342: LIST
 343: LIST
 344: LIST
 345: PUSH
 346: LD_EXP 2
 350: ARRAY
 351: ST_TO_ADDR
// russian_force := [ 6 , 7 , 8 ] [ game_difficulty ] ;
 352: LD_ADDR_EXP 21
 356: PUSH
 357: LD_INT 6
 359: PUSH
 360: LD_INT 7
 362: PUSH
 363: LD_INT 8
 365: PUSH
 366: EMPTY
 367: LIST
 368: LIST
 369: LIST
 370: PUSH
 371: LD_EXP 2
 375: ARRAY
 376: ST_TO_ADDR
// u_mine := false ;
 377: LD_ADDR_EXP 13
 381: PUSH
 382: LD_INT 0
 384: ST_TO_ADDR
// u_fac := false ;
 385: LD_ADDR_EXP 14
 389: PUSH
 390: LD_INT 0
 392: ST_TO_ADDR
// leopold_in_fort := false ;
 393: LD_ADDR_EXP 8
 397: PUSH
 398: LD_INT 0
 400: ST_TO_ADDR
// samuel_in_fort := false ;
 401: LD_ADDR_EXP 10
 405: PUSH
 406: LD_INT 0
 408: ST_TO_ADDR
// mortars_in_fort := false ;
 409: LD_ADDR_EXP 11
 413: PUSH
 414: LD_INT 0
 416: ST_TO_ADDR
// fort_destroyed := false ;
 417: LD_ADDR_EXP 32
 421: PUSH
 422: LD_INT 0
 424: ST_TO_ADDR
// hero_died := false ;
 425: LD_ADDR_EXP 33
 429: PUSH
 430: LD_INT 0
 432: ST_TO_ADDR
// dezert := false ;
 433: LD_ADDR_EXP 37
 437: PUSH
 438: LD_INT 0
 440: ST_TO_ADDR
// arabian_attack := false ;
 441: LD_ADDR_EXP 38
 445: PUSH
 446: LD_INT 0
 448: ST_TO_ADDR
// russian_attack := false ;
 449: LD_ADDR_EXP 39
 453: PUSH
 454: LD_INT 0
 456: ST_TO_ADDR
// american_attack := false ;
 457: LD_ADDR_EXP 40
 461: PUSH
 462: LD_INT 0
 464: ST_TO_ADDR
// american_help := false ;
 465: LD_ADDR_EXP 41
 469: PUSH
 470: LD_INT 0
 472: ST_TO_ADDR
// american_hchan := [ 91 , 81 , 71 ] [ game_difficulty ] ;
 473: LD_ADDR_EXP 36
 477: PUSH
 478: LD_INT 91
 480: PUSH
 481: LD_INT 81
 483: PUSH
 484: LD_INT 71
 486: PUSH
 487: EMPTY
 488: LIST
 489: LIST
 490: LIST
 491: PUSH
 492: LD_EXP 2
 496: ARRAY
 497: ST_TO_ADDR
// american_sib_bomb := false ;
 498: LD_ADDR_EXP 42
 502: PUSH
 503: LD_INT 0
 505: ST_TO_ADDR
// russian_trade := false ;
 506: LD_ADDR_EXP 43
 510: PUSH
 511: LD_INT 0
 513: ST_TO_ADDR
// russian_timer := 5 5$00 ;
 514: LD_ADDR_EXP 31
 518: PUSH
 519: LD_INT 10500
 521: ST_TO_ADDR
// cargo_ok := false ;
 522: LD_ADDR_EXP 35
 526: PUSH
 527: LD_INT 0
 529: ST_TO_ADDR
// heike_dialog1 := false ;
 530: LD_ADDR_EXP 44
 534: PUSH
 535: LD_INT 0
 537: ST_TO_ADDR
// heike_dialog2 := false ;
 538: LD_ADDR_EXP 45
 542: PUSH
 543: LD_INT 0
 545: ST_TO_ADDR
// american_timeing := [ 10 10$00 , 9 9$50 , 9 9$30 ] [ game_difficulty ] ;
 546: LD_ADDR_EXP 25
 550: PUSH
 551: LD_INT 21000
 553: PUSH
 554: LD_INT 20650
 556: PUSH
 557: LD_INT 19950
 559: PUSH
 560: EMPTY
 561: LIST
 562: LIST
 563: LIST
 564: PUSH
 565: LD_EXP 2
 569: ARRAY
 570: ST_TO_ADDR
// arabian_timeing := [ 8 8$00 , 7 7$30 , 6 6$40 ] [ game_difficulty ] ;
 571: LD_ADDR_EXP 23
 575: PUSH
 576: LD_INT 16800
 578: PUSH
 579: LD_INT 15750
 581: PUSH
 582: LD_INT 14000
 584: PUSH
 585: EMPTY
 586: LIST
 587: LIST
 588: LIST
 589: PUSH
 590: LD_EXP 2
 594: ARRAY
 595: ST_TO_ADDR
// russian_timeing := [ 11 11$00 , 10 10$30 , 9 9$20 ] [ game_difficulty ] ;
 596: LD_ADDR_EXP 24
 600: PUSH
 601: LD_INT 23100
 603: PUSH
 604: LD_INT 22050
 606: PUSH
 607: LD_INT 19600
 609: PUSH
 610: EMPTY
 611: LIST
 612: LIST
 613: LIST
 614: PUSH
 615: LD_EXP 2
 619: ARRAY
 620: ST_TO_ADDR
// ar_weapons := [ ar_rocket_launcher , ar_gun , ar_flame_thrower , ar_selfpropelled_bomb , ar_bio_bomb ] ;
 621: LD_ADDR_EXP 17
 625: PUSH
 626: LD_INT 28
 628: PUSH
 629: LD_INT 27
 631: PUSH
 632: LD_INT 26
 634: PUSH
 635: LD_INT 29
 637: PUSH
 638: LD_EXP 56
 642: PUSH
 643: EMPTY
 644: LIST
 645: LIST
 646: LIST
 647: LIST
 648: LIST
 649: ST_TO_ADDR
// us_weapons := [ us_rocket_launcher , us_heavy_gun , us_double_laser , us_laser ] ;
 650: LD_ADDR_EXP 19
 654: PUSH
 655: LD_INT 7
 657: PUSH
 658: LD_INT 6
 660: PUSH
 661: LD_INT 10
 663: PUSH
 664: LD_INT 9
 666: PUSH
 667: EMPTY
 668: LIST
 669: LIST
 670: LIST
 671: LIST
 672: ST_TO_ADDR
// ru_weapons := [ ru_rocket_launcher , ru_rocket , ru_heavy_gun , ru_heavy_gun ] ;
 673: LD_ADDR_EXP 18
 677: PUSH
 678: LD_INT 45
 680: PUSH
 681: LD_INT 47
 683: PUSH
 684: LD_INT 46
 686: PUSH
 687: LD_INT 46
 689: PUSH
 690: EMPTY
 691: LIST
 692: LIST
 693: LIST
 694: LIST
 695: ST_TO_ADDR
// end ;
 696: LD_VAR 0 1
 700: RET
// every 0 0$01 trigger game_on do var i , p , x , filter ;
 701: LD_EXP 1
 705: IFFALSE 3475
 707: GO 709
 709: DISABLE
 710: LD_INT 0
 712: PPUSH
 713: PPUSH
 714: PPUSH
 715: PPUSH
// begin enable ;
 716: ENABLE
// Display_Strings := [ #tick , game_time ] ^ game_strings ;
 717: LD_ADDR_OWVAR 47
 721: PUSH
 722: LD_STRING #tick
 724: PUSH
 725: LD_EXP 3
 729: PUSH
 730: EMPTY
 731: LIST
 732: LIST
 733: PUSH
 734: LD_EXP 6
 738: ADD
 739: ST_TO_ADDR
// game_time := RefreshTime ( game_time , true ) ;
 740: LD_ADDR_EXP 3
 744: PUSH
 745: LD_EXP 3
 749: PPUSH
 750: LD_INT 1
 752: PPUSH
 753: CALL 6964 0 2
 757: ST_TO_ADDR
// if meeting_start and meeting_time > 0 0$00 then
 758: LD_EXP 26
 762: PUSH
 763: LD_EXP 30
 767: PUSH
 768: LD_INT 0
 770: GREATER
 771: AND
 772: IFFALSE 809
// begin game_strings := [ #mtime , meeting_time ] ;
 774: LD_ADDR_EXP 6
 778: PUSH
 779: LD_STRING #mtime
 781: PUSH
 782: LD_EXP 30
 786: PUSH
 787: EMPTY
 788: LIST
 789: LIST
 790: ST_TO_ADDR
// meeting_time := RefreshTime ( meeting_time , false ) ;
 791: LD_ADDR_EXP 30
 795: PUSH
 796: LD_EXP 30
 800: PPUSH
 801: LD_INT 0
 803: PPUSH
 804: CALL 6964 0 2
 808: ST_TO_ADDR
// end ; if meeting_arive then
 809: LD_EXP 27
 813: IFFALSE 833
// mission_time := RefreshTime ( mission_time , true ) ;
 815: LD_ADDR_EXP 34
 819: PUSH
 820: LD_EXP 34
 824: PPUSH
 825: LD_INT 1
 827: PPUSH
 828: CALL 6964 0 2
 832: ST_TO_ADDR
// if arabian_attack and arabian_timeing > 0 0$00 and meeting_arive then
 833: LD_EXP 38
 837: PUSH
 838: LD_EXP 23
 842: PUSH
 843: LD_INT 0
 845: GREATER
 846: AND
 847: PUSH
 848: LD_EXP 27
 852: AND
 853: IFFALSE 873
// begin arabian_timeing := RefreshTime ( arabian_timeing , false ) ;
 855: LD_ADDR_EXP 23
 859: PUSH
 860: LD_EXP 23
 864: PPUSH
 865: LD_INT 0
 867: PPUSH
 868: CALL 6964 0 2
 872: ST_TO_ADDR
// end ; if russian_attack and russian_timeing > 0 0$00 and meeting_arive then
 873: LD_EXP 39
 877: PUSH
 878: LD_EXP 24
 882: PUSH
 883: LD_INT 0
 885: GREATER
 886: AND
 887: PUSH
 888: LD_EXP 27
 892: AND
 893: IFFALSE 913
// begin russian_timeing := RefreshTime ( russian_timeing , false ) ;
 895: LD_ADDR_EXP 24
 899: PUSH
 900: LD_EXP 24
 904: PPUSH
 905: LD_INT 0
 907: PPUSH
 908: CALL 6964 0 2
 912: ST_TO_ADDR
// end ; if american_attack and american_timeing > 0 0$00 and meeting_arive then
 913: LD_EXP 40
 917: PUSH
 918: LD_EXP 25
 922: PUSH
 923: LD_INT 0
 925: GREATER
 926: AND
 927: PUSH
 928: LD_EXP 27
 932: AND
 933: IFFALSE 953
// begin american_timeing := RefreshTime ( american_timeing , false ) ;
 935: LD_ADDR_EXP 25
 939: PUSH
 940: LD_EXP 25
 944: PPUSH
 945: LD_INT 0
 947: PPUSH
 948: CALL 6964 0 2
 952: ST_TO_ADDR
// end ; if russian_trade and russian_timer > 0 0$00 then
 953: LD_EXP 43
 957: PUSH
 958: LD_EXP 31
 962: PUSH
 963: LD_INT 0
 965: GREATER
 966: AND
 967: IFFALSE 1004
// begin game_strings := [ #rtime , russian_timer ] ;
 969: LD_ADDR_EXP 6
 973: PUSH
 974: LD_STRING #rtime
 976: PUSH
 977: LD_EXP 31
 981: PUSH
 982: EMPTY
 983: LIST
 984: LIST
 985: ST_TO_ADDR
// russian_timer := RefreshTime ( russian_timer , false ) ;
 986: LD_ADDR_EXP 31
 990: PUSH
 991: LD_EXP 31
 995: PPUSH
 996: LD_INT 0
 998: PPUSH
 999: CALL 6964 0 2
1003: ST_TO_ADDR
// end ; if russian_trade and russian_timer = 0 0$00 or cargo_ok then
1004: LD_EXP 43
1008: PUSH
1009: LD_EXP 31
1013: PUSH
1014: LD_INT 0
1016: EQUAL
1017: AND
1018: PUSH
1019: LD_EXP 35
1023: OR
1024: IFFALSE 1033
// game_strings := [ ] ;
1026: LD_ADDR_EXP 6
1030: PUSH
1031: EMPTY
1032: ST_TO_ADDR
// if dezert = false and tick mod 33600 = 0 then
1033: LD_EXP 37
1037: PUSH
1038: LD_INT 0
1040: EQUAL
1041: PUSH
1042: LD_OWVAR 1
1046: PUSH
1047: LD_INT 33600
1049: MOD
1050: PUSH
1051: LD_INT 0
1053: EQUAL
1054: AND
1055: IFFALSE 1115
// begin p := Rand ( 1 , 5 ) ;
1057: LD_ADDR_VAR 0 2
1061: PUSH
1062: LD_INT 1
1064: PPUSH
1065: LD_INT 5
1067: PPUSH
1068: CALL_OW 12
1072: ST_TO_ADDR
// if p <= [ 4 , 3 , 3 ] [ game_difficulty ] then
1073: LD_VAR 0 2
1077: PUSH
1078: LD_INT 4
1080: PUSH
1081: LD_INT 3
1083: PUSH
1084: LD_INT 3
1086: PUSH
1087: EMPTY
1088: LIST
1089: LIST
1090: LIST
1091: PUSH
1092: LD_EXP 2
1096: ARRAY
1097: LESSEQUAL
1098: IFFALSE 1115
// begin RaiseSailEvent ( 92 ) ;
1100: LD_INT 92
1102: PPUSH
1103: CALL_OW 427
// dezert := true ;
1107: LD_ADDR_EXP 37
1111: PUSH
1112: LD_INT 1
1114: ST_TO_ADDR
// end ; end ; if tick mod 8400 = 0 then
1115: LD_OWVAR 1
1119: PUSH
1120: LD_INT 8400
1122: MOD
1123: PUSH
1124: LD_INT 0
1126: EQUAL
1127: IFFALSE 1136
// RaiseSailEvent ( 101 ) ;
1129: LD_INT 101
1131: PPUSH
1132: CALL_OW 427
// if MineExist ( 8 ) and u_mine = false then
1136: LD_INT 8
1138: PPUSH
1139: CALL 7018 0 1
1143: PUSH
1144: LD_EXP 13
1148: PUSH
1149: LD_INT 0
1151: EQUAL
1152: AND
1153: IFFALSE 1170
// begin u_mine := true ;
1155: LD_ADDR_EXP 13
1159: PUSH
1160: LD_INT 1
1162: ST_TO_ADDR
// ChangeMissionObjectives ( DS-T1m ) ;
1163: LD_STRING DS-T1m
1165: PPUSH
1166: CALL_OW 337
// end ; if FacExist ( 8 ) and u_fac = false then
1170: LD_INT 8
1172: PPUSH
1173: CALL 7080 0 1
1177: PUSH
1178: LD_EXP 14
1182: PUSH
1183: LD_INT 0
1185: EQUAL
1186: AND
1187: IFFALSE 1204
// begin u_fac := true ;
1189: LD_ADDR_EXP 14
1193: PUSH
1194: LD_INT 1
1196: ST_TO_ADDR
// ChangeMissionObjectives ( DS-T1f ) ;
1197: LD_STRING DS-T1f
1199: PPUSH
1200: CALL_OW 337
// end ; if hero_died then
1204: LD_EXP 33
1208: IFFALSE 1217
// YouLost ( DS-h1 ) ;
1210: LD_STRING DS-h1
1212: PPUSH
1213: CALL_OW 104
// if fort_destroyed then
1217: LD_EXP 32
1221: IFFALSE 1230
// YouLost ( DS-h2 ) ;
1223: LD_STRING DS-h2
1225: PPUSH
1226: CALL_OW 104
// if GetDistUnits ( leopold , l_cmndr ) > 6 and meeting_start = false then
1230: LD_EXP 7
1234: PPUSH
1235: LD_EXP 49
1239: PPUSH
1240: CALL_OW 296
1244: PUSH
1245: LD_INT 6
1247: GREATER
1248: PUSH
1249: LD_EXP 26
1253: PUSH
1254: LD_INT 0
1256: EQUAL
1257: AND
1258: IFFALSE 1281
// begin if not HasTask ( leopold ) then
1260: LD_EXP 7
1264: PPUSH
1265: CALL_OW 314
1269: NOT
1270: IFFALSE 1279
// RaiseSailEvent ( 1 ) ;
1272: LD_INT 1
1274: PPUSH
1275: CALL_OW 427
// end else
1279: GO 1298
// if meeting_start = false then
1281: LD_EXP 26
1285: PUSH
1286: LD_INT 0
1288: EQUAL
1289: IFFALSE 1298
// begin RaiseSailEvent ( 2 ) ;
1291: LD_INT 2
1293: PPUSH
1294: CALL_OW 427
// end ; if game_time >= [ 50 50$00 , 62 62$30 , 72 72$00 ] [ game_difficulty ] and meeting_end = false then
1298: LD_EXP 3
1302: PUSH
1303: LD_INT 105000
1305: PUSH
1306: LD_INT 131250
1308: PUSH
1309: LD_INT 151200
1311: PUSH
1312: EMPTY
1313: LIST
1314: LIST
1315: LIST
1316: PUSH
1317: LD_EXP 2
1321: ARRAY
1322: GREATEREQUAL
1323: PUSH
1324: LD_EXP 29
1328: PUSH
1329: LD_INT 0
1331: EQUAL
1332: AND
1333: IFFALSE 1350
// begin meeting_end := true ;
1335: LD_ADDR_EXP 29
1339: PUSH
1340: LD_INT 1
1342: ST_TO_ADDR
// RaiseSailEvent ( 200 ) ;
1343: LD_INT 200
1345: PPUSH
1346: CALL_OW 427
// end ; if meeting_time = 0 0$00 and meeting_arive = false then
1350: LD_EXP 30
1354: PUSH
1355: LD_INT 0
1357: EQUAL
1358: PUSH
1359: LD_EXP 27
1363: PUSH
1364: LD_INT 0
1366: EQUAL
1367: AND
1368: IFFALSE 1392
// begin meeting_arive := true ;
1370: LD_ADDR_EXP 27
1374: PUSH
1375: LD_INT 1
1377: ST_TO_ADDR
// game_strings := [ ] ;
1378: LD_ADDR_EXP 6
1382: PUSH
1383: EMPTY
1384: ST_TO_ADDR
// RaiseSailEvent ( 10 ) ;
1385: LD_INT 10
1387: PPUSH
1388: CALL_OW 427
// end ; if meeting_arive then
1392: LD_EXP 27
1396: IFFALSE 2195
// begin if arabian_attack = false and tick mod 4200 = 0 then
1398: LD_EXP 38
1402: PUSH
1403: LD_INT 0
1405: EQUAL
1406: PUSH
1407: LD_OWVAR 1
1411: PUSH
1412: LD_INT 4200
1414: MOD
1415: PUSH
1416: LD_INT 0
1418: EQUAL
1419: AND
1420: IFFALSE 1473
// begin p := Rand ( 1 , 100 ) ;
1422: LD_ADDR_VAR 0 2
1426: PUSH
1427: LD_INT 1
1429: PPUSH
1430: LD_INT 100
1432: PPUSH
1433: CALL_OW 12
1437: ST_TO_ADDR
// if p <= [ 85 , 90 , 95 ] [ game_difficulty ] then
1438: LD_VAR 0 2
1442: PUSH
1443: LD_INT 85
1445: PUSH
1446: LD_INT 90
1448: PUSH
1449: LD_INT 95
1451: PUSH
1452: EMPTY
1453: LIST
1454: LIST
1455: LIST
1456: PUSH
1457: LD_EXP 2
1461: ARRAY
1462: LESSEQUAL
1463: IFFALSE 1473
// arabian_attack := true ;
1465: LD_ADDR_EXP 38
1469: PUSH
1470: LD_INT 1
1472: ST_TO_ADDR
// end ; if russian_trade = false and russian_attack = false and tick > 52500 then
1473: LD_EXP 43
1477: PUSH
1478: LD_INT 0
1480: EQUAL
1481: PUSH
1482: LD_EXP 39
1486: PUSH
1487: LD_INT 0
1489: EQUAL
1490: AND
1491: PUSH
1492: LD_OWVAR 1
1496: PUSH
1497: LD_INT 52500
1499: GREATER
1500: AND
1501: IFFALSE 1572
// begin russian_trade = true ;
1503: LD_ADDR_EXP 43
1507: PUSH
1508: LD_INT 1
1510: ST_TO_ADDR
// DialogueOn ;
1511: CALL_OW 6
// SayRadio ( ru_comander , DS-DR-RTr ) ;
1515: LD_EXP 47
1519: PPUSH
1520: LD_STRING DS-DR-RTr
1522: PPUSH
1523: CALL_OW 94
// Say ( l_cmndr , DS-DC-RTr ) ;
1527: LD_EXP 49
1531: PPUSH
1532: LD_STRING DS-DC-RTr
1534: PPUSH
1535: CALL_OW 88
// SayRadio ( ru_comander , DS-DR-RTr2 ) ;
1539: LD_EXP 47
1543: PPUSH
1544: LD_STRING DS-DR-RTr2
1546: PPUSH
1547: CALL_OW 94
// DialogueOff ;
1551: CALL_OW 7
// ChangeMissionObjectives ( DS-T2 ) ;
1555: LD_STRING DS-T2
1557: PPUSH
1558: CALL_OW 337
// SetAreaMapShow ( tree , 1 ) ;
1562: LD_INT 10
1564: PPUSH
1565: LD_INT 1
1567: PPUSH
1568: CALL_OW 424
// end ; if russian_trade and cargo_ok = false and russian_timer > 0 0$00 then
1572: LD_EXP 43
1576: PUSH
1577: LD_EXP 35
1581: PUSH
1582: LD_INT 0
1584: EQUAL
1585: AND
1586: PUSH
1587: LD_EXP 31
1591: PUSH
1592: LD_INT 0
1594: GREATER
1595: AND
1596: IFFALSE 1845
// begin if FilterUnitsInArea ( tree , ( [ [ f_empty ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] , [ f_not , [ f_control , control_remote ] ] ] ) ) > 0 then
1598: LD_INT 10
1600: PPUSH
1601: LD_INT 58
1603: PUSH
1604: EMPTY
1605: LIST
1606: PUSH
1607: LD_INT 2
1609: PUSH
1610: LD_INT 34
1612: PUSH
1613: LD_INT 32
1615: PUSH
1616: EMPTY
1617: LIST
1618: LIST
1619: PUSH
1620: LD_INT 34
1622: PUSH
1623: LD_INT 12
1625: PUSH
1626: EMPTY
1627: LIST
1628: LIST
1629: PUSH
1630: EMPTY
1631: LIST
1632: LIST
1633: LIST
1634: PUSH
1635: LD_INT 3
1637: PUSH
1638: LD_INT 33
1640: PUSH
1641: LD_INT 2
1643: PUSH
1644: EMPTY
1645: LIST
1646: LIST
1647: PUSH
1648: EMPTY
1649: LIST
1650: LIST
1651: PUSH
1652: EMPTY
1653: LIST
1654: LIST
1655: LIST
1656: PPUSH
1657: CALL_OW 70
1661: PUSH
1662: LD_INT 0
1664: GREATER
1665: IFFALSE 1845
// if GetCargo ( FilterUnitsInArea ( tree , ( [ [ f_empty ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] , [ f_not , [ f_control , control_remote ] ] ] ) ) [ 1 ] , mat_siberit ) = 100 then
1667: LD_INT 10
1669: PPUSH
1670: LD_INT 58
1672: PUSH
1673: EMPTY
1674: LIST
1675: PUSH
1676: LD_INT 2
1678: PUSH
1679: LD_INT 34
1681: PUSH
1682: LD_INT 32
1684: PUSH
1685: EMPTY
1686: LIST
1687: LIST
1688: PUSH
1689: LD_INT 34
1691: PUSH
1692: LD_INT 12
1694: PUSH
1695: EMPTY
1696: LIST
1697: LIST
1698: PUSH
1699: EMPTY
1700: LIST
1701: LIST
1702: LIST
1703: PUSH
1704: LD_INT 3
1706: PUSH
1707: LD_INT 33
1709: PUSH
1710: LD_INT 2
1712: PUSH
1713: EMPTY
1714: LIST
1715: LIST
1716: PUSH
1717: EMPTY
1718: LIST
1719: LIST
1720: PUSH
1721: EMPTY
1722: LIST
1723: LIST
1724: LIST
1725: PPUSH
1726: CALL_OW 70
1730: PUSH
1731: LD_INT 1
1733: ARRAY
1734: PPUSH
1735: LD_INT 3
1737: PPUSH
1738: CALL_OW 289
1742: PUSH
1743: LD_INT 100
1745: EQUAL
1746: IFFALSE 1845
// begin cargo_ok := true ;
1748: LD_ADDR_EXP 35
1752: PUSH
1753: LD_INT 1
1755: ST_TO_ADDR
// RemoveUnit ( FilterUnitsInArea ( tree , ( [ [ f_empty ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] , [ f_not , [ f_control , control_remote ] ] ] ) ) [ 1 ] ) ;
1756: LD_INT 10
1758: PPUSH
1759: LD_INT 58
1761: PUSH
1762: EMPTY
1763: LIST
1764: PUSH
1765: LD_INT 2
1767: PUSH
1768: LD_INT 34
1770: PUSH
1771: LD_INT 32
1773: PUSH
1774: EMPTY
1775: LIST
1776: LIST
1777: PUSH
1778: LD_INT 34
1780: PUSH
1781: LD_INT 12
1783: PUSH
1784: EMPTY
1785: LIST
1786: LIST
1787: PUSH
1788: EMPTY
1789: LIST
1790: LIST
1791: LIST
1792: PUSH
1793: LD_INT 3
1795: PUSH
1796: LD_INT 33
1798: PUSH
1799: LD_INT 2
1801: PUSH
1802: EMPTY
1803: LIST
1804: LIST
1805: PUSH
1806: EMPTY
1807: LIST
1808: LIST
1809: PUSH
1810: EMPTY
1811: LIST
1812: LIST
1813: LIST
1814: PPUSH
1815: CALL_OW 70
1819: PUSH
1820: LD_INT 1
1822: ARRAY
1823: PPUSH
1824: CALL_OW 64
// ChangeMissionObjectives ( DS-T2-out ) ;
1828: LD_STRING DS-T2-out
1830: PPUSH
1831: CALL_OW 337
// SetAreaMapShow ( tree , 0 ) ;
1835: LD_INT 10
1837: PPUSH
1838: LD_INT 0
1840: PPUSH
1841: CALL_OW 424
// end ; end ; if russian_attack = false and russian_trade and cargo_ok = false and russian_timer = 0 0$00 then
1845: LD_EXP 39
1849: PUSH
1850: LD_INT 0
1852: EQUAL
1853: PUSH
1854: LD_EXP 43
1858: AND
1859: PUSH
1860: LD_EXP 35
1864: PUSH
1865: LD_INT 0
1867: EQUAL
1868: AND
1869: PUSH
1870: LD_EXP 31
1874: PUSH
1875: LD_INT 0
1877: EQUAL
1878: AND
1879: IFFALSE 1906
// begin russian_attack := true ;
1881: LD_ADDR_EXP 39
1885: PUSH
1886: LD_INT 1
1888: ST_TO_ADDR
// ChangeMissionObjectives ( DS-T2-out ) ;
1889: LD_STRING DS-T2-out
1891: PPUSH
1892: CALL_OW 337
// SetAreaMapShow ( tree , 0 ) ;
1896: LD_INT 10
1898: PPUSH
1899: LD_INT 0
1901: PPUSH
1902: CALL_OW 424
// end ; if russian_trade = false and russian_attack = false and american_attack = false and tick mod 21000 = 0 then
1906: LD_EXP 43
1910: PUSH
1911: LD_INT 0
1913: EQUAL
1914: PUSH
1915: LD_EXP 39
1919: PUSH
1920: LD_INT 0
1922: EQUAL
1923: AND
1924: PUSH
1925: LD_EXP 40
1929: PUSH
1930: LD_INT 0
1932: EQUAL
1933: AND
1934: PUSH
1935: LD_OWVAR 1
1939: PUSH
1940: LD_INT 21000
1942: MOD
1943: PUSH
1944: LD_INT 0
1946: EQUAL
1947: AND
1948: IFFALSE 2001
// begin p := Rand ( 1 , 100 ) ;
1950: LD_ADDR_VAR 0 2
1954: PUSH
1955: LD_INT 1
1957: PPUSH
1958: LD_INT 100
1960: PPUSH
1961: CALL_OW 12
1965: ST_TO_ADDR
// if p <= [ 35 , 45 , 55 ] [ game_difficulty ] then
1966: LD_VAR 0 2
1970: PUSH
1971: LD_INT 35
1973: PUSH
1974: LD_INT 45
1976: PUSH
1977: LD_INT 55
1979: PUSH
1980: EMPTY
1981: LIST
1982: LIST
1983: LIST
1984: PUSH
1985: LD_EXP 2
1989: ARRAY
1990: LESSEQUAL
1991: IFFALSE 2001
// russian_attack := true ;
1993: LD_ADDR_EXP 39
1997: PUSH
1998: LD_INT 1
2000: ST_TO_ADDR
// end ; if american_help = false and american_attack = false and russian_attack = false and tick mod 31500 = 0 then
2001: LD_EXP 41
2005: PUSH
2006: LD_INT 0
2008: EQUAL
2009: PUSH
2010: LD_EXP 40
2014: PUSH
2015: LD_INT 0
2017: EQUAL
2018: AND
2019: PUSH
2020: LD_EXP 39
2024: PUSH
2025: LD_INT 0
2027: EQUAL
2028: AND
2029: PUSH
2030: LD_OWVAR 1
2034: PUSH
2035: LD_INT 31500
2037: MOD
2038: PUSH
2039: LD_INT 0
2041: EQUAL
2042: AND
2043: IFFALSE 2096
// begin p := Rand ( 1 , 100 ) ;
2045: LD_ADDR_VAR 0 2
2049: PUSH
2050: LD_INT 1
2052: PPUSH
2053: LD_INT 100
2055: PPUSH
2056: CALL_OW 12
2060: ST_TO_ADDR
// if p <= [ 33 , 44 , 55 ] [ game_difficulty ] then
2061: LD_VAR 0 2
2065: PUSH
2066: LD_INT 33
2068: PUSH
2069: LD_INT 44
2071: PUSH
2072: LD_INT 55
2074: PUSH
2075: EMPTY
2076: LIST
2077: LIST
2078: LIST
2079: PUSH
2080: LD_EXP 2
2084: ARRAY
2085: LESSEQUAL
2086: IFFALSE 2096
// american_attack := true ;
2088: LD_ADDR_EXP 40
2092: PUSH
2093: LD_INT 1
2095: ST_TO_ADDR
// end ; if american_attack = false and russian_attack = false and american_help = false and tick mod 21200 = 0 then
2096: LD_EXP 40
2100: PUSH
2101: LD_INT 0
2103: EQUAL
2104: PUSH
2105: LD_EXP 39
2109: PUSH
2110: LD_INT 0
2112: EQUAL
2113: AND
2114: PUSH
2115: LD_EXP 41
2119: PUSH
2120: LD_INT 0
2122: EQUAL
2123: AND
2124: PUSH
2125: LD_OWVAR 1
2129: PUSH
2130: LD_INT 21200
2132: MOD
2133: PUSH
2134: LD_INT 0
2136: EQUAL
2137: AND
2138: IFFALSE 2195
// begin p := Rand ( 1 , 100 ) ;
2140: LD_ADDR_VAR 0 2
2144: PUSH
2145: LD_INT 1
2147: PPUSH
2148: LD_INT 100
2150: PPUSH
2151: CALL_OW 12
2155: ST_TO_ADDR
// if p <= american_hchan then
2156: LD_VAR 0 2
2160: PUSH
2161: LD_EXP 36
2165: LESSEQUAL
2166: IFFALSE 2195
// begin american_help := true ;
2168: LD_ADDR_EXP 41
2172: PUSH
2173: LD_INT 1
2175: ST_TO_ADDR
// SayRadio ( am_comander , DS-amhelp ) ;
2176: LD_EXP 46
2180: PPUSH
2181: LD_STRING DS-amhelp
2183: PPUSH
2184: CALL_OW 94
// RaiseSailEvent ( 91 ) ;
2188: LD_INT 91
2190: PPUSH
2191: CALL_OW 427
// end ; end ; end ; if american_attack and american_timeing = 0 0$00 and FilterAllUnits ( [ f_side , 1 ] ) = 0 then
2195: LD_EXP 40
2199: PUSH
2200: LD_EXP 25
2204: PUSH
2205: LD_INT 0
2207: EQUAL
2208: AND
2209: PUSH
2210: LD_INT 22
2212: PUSH
2213: LD_INT 1
2215: PUSH
2216: EMPTY
2217: LIST
2218: LIST
2219: PPUSH
2220: CALL_OW 69
2224: PUSH
2225: LD_INT 0
2227: EQUAL
2228: AND
2229: IFFALSE 2331
// begin american_timeing := Rand ( 17 17$00 , 20 20$00 ) ;
2231: LD_ADDR_EXP 25
2235: PUSH
2236: LD_INT 35700
2238: PPUSH
2239: LD_INT 42000
2241: PPUSH
2242: CALL_OW 12
2246: ST_TO_ADDR
// SayRadio ( scout , DS-DZ-U ) ;
2247: LD_EXP 12
2251: PPUSH
2252: LD_STRING DS-DZ-U
2254: PPUSH
2255: CALL_OW 94
// Wait ( 0 0$33 ) ;
2259: LD_INT 1155
2261: PPUSH
2262: CALL_OW 67
// x := Rand ( 1 , 2 ) ;
2266: LD_ADDR_VAR 0 3
2270: PUSH
2271: LD_INT 1
2273: PPUSH
2274: LD_INT 2
2276: PPUSH
2277: CALL_OW 12
2281: ST_TO_ADDR
// case x of 1 :
2282: LD_VAR 0 3
2286: PUSH
2287: LD_INT 1
2289: DOUBLE
2290: EQUAL
2291: IFTRUE 2295
2293: GO 2305
2295: POP
// RaiseSailEvent ( 41 ) ; 2 :
2296: LD_INT 41
2298: PPUSH
2299: CALL_OW 427
2303: GO 2324
2305: LD_INT 2
2307: DOUBLE
2308: EQUAL
2309: IFTRUE 2313
2311: GO 2323
2313: POP
// RaiseSailEvent ( 42 ) ; end ;
2314: LD_INT 42
2316: PPUSH
2317: CALL_OW 427
2321: GO 2324
2323: POP
// RaiseSailEvent ( 42 ) ;
2324: LD_INT 42
2326: PPUSH
2327: CALL_OW 427
// end ; if russian_attack and russian_timeing = 0 0$00 and FilterAllUnits ( [ f_side , 3 ] ) = 0 then
2331: LD_EXP 39
2335: PUSH
2336: LD_EXP 24
2340: PUSH
2341: LD_INT 0
2343: EQUAL
2344: AND
2345: PUSH
2346: LD_INT 22
2348: PUSH
2349: LD_INT 3
2351: PUSH
2352: EMPTY
2353: LIST
2354: LIST
2355: PPUSH
2356: CALL_OW 69
2360: PUSH
2361: LD_INT 0
2363: EQUAL
2364: AND
2365: IFFALSE 2421
// begin russian_timeing := Rand ( 17 17$00 , 20 20$00 ) ;
2367: LD_ADDR_EXP 24
2371: PUSH
2372: LD_INT 35700
2374: PPUSH
2375: LD_INT 42000
2377: PPUSH
2378: CALL_OW 12
2382: ST_TO_ADDR
// SayRadio ( scout , DS-DZ-R ) ;
2383: LD_EXP 12
2387: PPUSH
2388: LD_STRING DS-DZ-R
2390: PPUSH
2391: CALL_OW 94
// Wait ( 0 0$45 ) ;
2395: LD_INT 1575
2397: PPUSH
2398: CALL_OW 67
// SayRadio ( ru_comander , DS-DR-R1 ) ;
2402: LD_EXP 47
2406: PPUSH
2407: LD_STRING DS-DR-R1
2409: PPUSH
2410: CALL_OW 94
// RaiseSailEvent ( 51 ) ;
2414: LD_INT 51
2416: PPUSH
2417: CALL_OW 427
// end ; if mission_time >= 25 25$00 and arabian_force < 10 then
2421: LD_EXP 34
2425: PUSH
2426: LD_INT 52500
2428: GREATEREQUAL
2429: PUSH
2430: LD_EXP 20
2434: PUSH
2435: LD_INT 10
2437: LESS
2438: AND
2439: IFFALSE 2463
// begin mission_time := 0 0$00 ;
2441: LD_ADDR_EXP 34
2445: PUSH
2446: LD_INT 0
2448: ST_TO_ADDR
// arabian_force := arabian_force + 1 ;
2449: LD_ADDR_EXP 20
2453: PUSH
2454: LD_EXP 20
2458: PUSH
2459: LD_INT 1
2461: PLUS
2462: ST_TO_ADDR
// end ; if arabian_timeing = 0 0$00 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_weapon , ar_control_tower ] ] ] ) = 0 then
2463: LD_EXP 23
2467: PUSH
2468: LD_INT 0
2470: EQUAL
2471: PUSH
2472: LD_INT 22
2474: PUSH
2475: LD_INT 2
2477: PUSH
2478: EMPTY
2479: LIST
2480: LIST
2481: PUSH
2482: LD_INT 3
2484: PUSH
2485: LD_INT 34
2487: PUSH
2488: LD_INT 31
2490: PUSH
2491: EMPTY
2492: LIST
2493: LIST
2494: PUSH
2495: EMPTY
2496: LIST
2497: LIST
2498: PUSH
2499: EMPTY
2500: LIST
2501: LIST
2502: PPUSH
2503: CALL_OW 69
2507: PUSH
2508: LD_INT 0
2510: EQUAL
2511: AND
2512: IFFALSE 2710
// begin arabian_timeing := 7 7$30 ;
2514: LD_ADDR_EXP 23
2518: PUSH
2519: LD_INT 15750
2521: ST_TO_ADDR
// x := Rand ( 1 , 3 ) ;
2522: LD_ADDR_VAR 0 3
2526: PUSH
2527: LD_INT 1
2529: PPUSH
2530: LD_INT 3
2532: PPUSH
2533: CALL_OW 12
2537: ST_TO_ADDR
// SayRadio ( scout , DS-DZ-H ) ;
2538: LD_EXP 12
2542: PPUSH
2543: LD_STRING DS-DZ-H
2545: PPUSH
2546: CALL_OW 94
// case x of 1 :
2550: LD_VAR 0 3
2554: PUSH
2555: LD_INT 1
2557: DOUBLE
2558: EQUAL
2559: IFTRUE 2563
2561: GO 2573
2563: POP
// RaiseSailEvent ( 31 ) ; 2 :
2564: LD_INT 31
2566: PPUSH
2567: CALL_OW 427
2571: GO 2610
2573: LD_INT 2
2575: DOUBLE
2576: EQUAL
2577: IFTRUE 2581
2579: GO 2591
2581: POP
// RaiseSailEvent ( 32 ) ; 3 :
2582: LD_INT 32
2584: PPUSH
2585: CALL_OW 427
2589: GO 2610
2591: LD_INT 3
2593: DOUBLE
2594: EQUAL
2595: IFTRUE 2599
2597: GO 2609
2599: POP
// RaiseSailEvent ( 33 ) ; end ;
2600: LD_INT 33
2602: PPUSH
2603: CALL_OW 427
2607: GO 2610
2609: POP
// RaiseSailEvent ( 33 ) ;
2610: LD_INT 33
2612: PPUSH
2613: CALL_OW 427
// if game_difficulty > 1 then
2617: LD_EXP 2
2621: PUSH
2622: LD_INT 1
2624: GREATER
2625: IFFALSE 2634
// RaiseSailEvent ( 33 ) ;
2627: LD_INT 33
2629: PPUSH
2630: CALL_OW 427
// if heike_dialog1 = false then
2634: LD_EXP 44
2638: PUSH
2639: LD_INT 0
2641: EQUAL
2642: IFFALSE 2673
// begin heike_dialog1 := true ;
2644: LD_ADDR_EXP 44
2648: PUSH
2649: LD_INT 1
2651: ST_TO_ADDR
// Wait ( 0 0$03 ) ;
2652: LD_INT 105
2654: PPUSH
2655: CALL_OW 67
// SayRadio ( ar_comander , heike1 ) ;
2659: LD_EXP 48
2663: PPUSH
2664: LD_STRING heike1
2666: PPUSH
2667: CALL_OW 94
// end else
2671: GO 2710
// if heike_dialog2 = false then
2673: LD_EXP 45
2677: PUSH
2678: LD_INT 0
2680: EQUAL
2681: IFFALSE 2710
// begin heike_dialog2 := true ;
2683: LD_ADDR_EXP 45
2687: PUSH
2688: LD_INT 1
2690: ST_TO_ADDR
// Wait ( 0 0$03 ) ;
2691: LD_INT 105
2693: PPUSH
2694: CALL_OW 67
// SayRadio ( ar_comander , heike2 ) ;
2698: LD_EXP 48
2702: PPUSH
2703: LD_STRING heike2
2705: PPUSH
2706: CALL_OW 94
// end ; end ; if FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) > 0 then
2710: LD_INT 22
2712: PUSH
2713: LD_INT 2
2715: PUSH
2716: EMPTY
2717: LIST
2718: LIST
2719: PUSH
2720: LD_INT 33
2722: PUSH
2723: LD_INT 2
2725: PUSH
2726: EMPTY
2727: LIST
2728: LIST
2729: PUSH
2730: EMPTY
2731: LIST
2732: LIST
2733: PPUSH
2734: CALL_OW 69
2738: PUSH
2739: LD_INT 0
2741: GREATER
2742: IFFALSE 2751
// ConnectWithTower ( 2 ) ;
2744: LD_INT 2
2746: PPUSH
2747: CALL 7128 0 1
// if FilterAllUnits ( [ [ [ f_side , 2 ] , [ f_not , [ f_weapon , ar_control_tower ] ] , [ f_not , [ f_hastask ] ] ] ] ) > 0 then
2751: LD_INT 22
2753: PUSH
2754: LD_INT 2
2756: PUSH
2757: EMPTY
2758: LIST
2759: LIST
2760: PUSH
2761: LD_INT 3
2763: PUSH
2764: LD_INT 34
2766: PUSH
2767: LD_INT 31
2769: PUSH
2770: EMPTY
2771: LIST
2772: LIST
2773: PUSH
2774: EMPTY
2775: LIST
2776: LIST
2777: PUSH
2778: LD_INT 3
2780: PUSH
2781: LD_INT 60
2783: PUSH
2784: EMPTY
2785: LIST
2786: PUSH
2787: EMPTY
2788: LIST
2789: LIST
2790: PUSH
2791: EMPTY
2792: LIST
2793: LIST
2794: LIST
2795: PUSH
2796: EMPTY
2797: LIST
2798: PPUSH
2799: CALL_OW 69
2803: PUSH
2804: LD_INT 0
2806: GREATER
2807: IFFALSE 2953
// begin filter := FilterAllUnits ( [ [ [ f_side , 2 ] , [ f_not , [ f_weapon , ar_control_tower ] ] , [ f_not , [ f_hastask ] ] ] ] ) ;
2809: LD_ADDR_VAR 0 4
2813: PUSH
2814: LD_INT 22
2816: PUSH
2817: LD_INT 2
2819: PUSH
2820: EMPTY
2821: LIST
2822: LIST
2823: PUSH
2824: LD_INT 3
2826: PUSH
2827: LD_INT 34
2829: PUSH
2830: LD_INT 31
2832: PUSH
2833: EMPTY
2834: LIST
2835: LIST
2836: PUSH
2837: EMPTY
2838: LIST
2839: LIST
2840: PUSH
2841: LD_INT 3
2843: PUSH
2844: LD_INT 60
2846: PUSH
2847: EMPTY
2848: LIST
2849: PUSH
2850: EMPTY
2851: LIST
2852: LIST
2853: PUSH
2854: EMPTY
2855: LIST
2856: LIST
2857: LIST
2858: PUSH
2859: EMPTY
2860: LIST
2861: PPUSH
2862: CALL_OW 69
2866: ST_TO_ADDR
// x := SpeedFilter ( FilterAllUnits ( [ f_enemy , 2 ] ) , 20 ) ;
2867: LD_ADDR_VAR 0 3
2871: PUSH
2872: LD_INT 81
2874: PUSH
2875: LD_INT 2
2877: PUSH
2878: EMPTY
2879: LIST
2880: LIST
2881: PPUSH
2882: CALL_OW 69
2886: PPUSH
2887: LD_INT 20
2889: PPUSH
2890: CALL 8511 0 2
2894: ST_TO_ADDR
// for i = 1 to filter do
2895: LD_ADDR_VAR 0 1
2899: PUSH
2900: DOUBLE
2901: LD_INT 1
2903: DEC
2904: ST_TO_ADDR
2905: LD_VAR 0 4
2909: PUSH
2910: FOR_TO
2911: IFFALSE 2951
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( x , filter [ i ] ) ) ;
2913: LD_VAR 0 4
2917: PUSH
2918: LD_VAR 0 1
2922: ARRAY
2923: PPUSH
2924: LD_VAR 0 3
2928: PPUSH
2929: LD_VAR 0 4
2933: PUSH
2934: LD_VAR 0 1
2938: ARRAY
2939: PPUSH
2940: CALL_OW 74
2944: PPUSH
2945: CALL_OW 115
2949: GO 2910
2951: POP
2952: POP
// end ; if FilterAllUnits ( [ [ [ f_side , 3 ] , [ f_not , [ f_hastask ] ] ] ] ) > 0 then
2953: LD_INT 22
2955: PUSH
2956: LD_INT 3
2958: PUSH
2959: EMPTY
2960: LIST
2961: LIST
2962: PUSH
2963: LD_INT 3
2965: PUSH
2966: LD_INT 60
2968: PUSH
2969: EMPTY
2970: LIST
2971: PUSH
2972: EMPTY
2973: LIST
2974: LIST
2975: PUSH
2976: EMPTY
2977: LIST
2978: LIST
2979: PUSH
2980: EMPTY
2981: LIST
2982: PPUSH
2983: CALL_OW 69
2987: PUSH
2988: LD_INT 0
2990: GREATER
2991: IFFALSE 3137
// begin filter := FilterAllUnits ( [ [ [ f_side , 3 ] , [ f_not , [ f_weapon , ar_control_tower ] ] , [ f_not , [ f_hastask ] ] ] ] ) ;
2993: LD_ADDR_VAR 0 4
2997: PUSH
2998: LD_INT 22
3000: PUSH
3001: LD_INT 3
3003: PUSH
3004: EMPTY
3005: LIST
3006: LIST
3007: PUSH
3008: LD_INT 3
3010: PUSH
3011: LD_INT 34
3013: PUSH
3014: LD_INT 31
3016: PUSH
3017: EMPTY
3018: LIST
3019: LIST
3020: PUSH
3021: EMPTY
3022: LIST
3023: LIST
3024: PUSH
3025: LD_INT 3
3027: PUSH
3028: LD_INT 60
3030: PUSH
3031: EMPTY
3032: LIST
3033: PUSH
3034: EMPTY
3035: LIST
3036: LIST
3037: PUSH
3038: EMPTY
3039: LIST
3040: LIST
3041: LIST
3042: PUSH
3043: EMPTY
3044: LIST
3045: PPUSH
3046: CALL_OW 69
3050: ST_TO_ADDR
// x := SpeedFilter ( FilterAllUnits ( [ f_enemy , 3 ] ) , 20 ) ;
3051: LD_ADDR_VAR 0 3
3055: PUSH
3056: LD_INT 81
3058: PUSH
3059: LD_INT 3
3061: PUSH
3062: EMPTY
3063: LIST
3064: LIST
3065: PPUSH
3066: CALL_OW 69
3070: PPUSH
3071: LD_INT 20
3073: PPUSH
3074: CALL 8511 0 2
3078: ST_TO_ADDR
// for i = 1 to filter do
3079: LD_ADDR_VAR 0 1
3083: PUSH
3084: DOUBLE
3085: LD_INT 1
3087: DEC
3088: ST_TO_ADDR
3089: LD_VAR 0 4
3093: PUSH
3094: FOR_TO
3095: IFFALSE 3135
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( x , filter [ i ] ) ) ;
3097: LD_VAR 0 4
3101: PUSH
3102: LD_VAR 0 1
3106: ARRAY
3107: PPUSH
3108: LD_VAR 0 3
3112: PPUSH
3113: LD_VAR 0 4
3117: PUSH
3118: LD_VAR 0 1
3122: ARRAY
3123: PPUSH
3124: CALL_OW 74
3128: PPUSH
3129: CALL_OW 115
3133: GO 3094
3135: POP
3136: POP
// end ; if FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] ] ] ) > 0 then
3137: LD_INT 22
3139: PUSH
3140: LD_INT 1
3142: PUSH
3143: EMPTY
3144: LIST
3145: LIST
3146: PUSH
3147: LD_INT 3
3149: PUSH
3150: LD_INT 60
3152: PUSH
3153: EMPTY
3154: LIST
3155: PUSH
3156: EMPTY
3157: LIST
3158: LIST
3159: PUSH
3160: EMPTY
3161: LIST
3162: LIST
3163: PUSH
3164: EMPTY
3165: LIST
3166: PPUSH
3167: CALL_OW 69
3171: PUSH
3172: LD_INT 0
3174: GREATER
3175: IFFALSE 3321
// begin filter := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_not , [ f_weapon , ar_control_tower ] ] , [ f_not , [ f_hastask ] ] ] ] ) ;
3177: LD_ADDR_VAR 0 4
3181: PUSH
3182: LD_INT 22
3184: PUSH
3185: LD_INT 1
3187: PUSH
3188: EMPTY
3189: LIST
3190: LIST
3191: PUSH
3192: LD_INT 3
3194: PUSH
3195: LD_INT 34
3197: PUSH
3198: LD_INT 31
3200: PUSH
3201: EMPTY
3202: LIST
3203: LIST
3204: PUSH
3205: EMPTY
3206: LIST
3207: LIST
3208: PUSH
3209: LD_INT 3
3211: PUSH
3212: LD_INT 60
3214: PUSH
3215: EMPTY
3216: LIST
3217: PUSH
3218: EMPTY
3219: LIST
3220: LIST
3221: PUSH
3222: EMPTY
3223: LIST
3224: LIST
3225: LIST
3226: PUSH
3227: EMPTY
3228: LIST
3229: PPUSH
3230: CALL_OW 69
3234: ST_TO_ADDR
// x := SpeedFilter ( FilterAllUnits ( [ f_enemy , 1 ] ) , 20 ) ;
3235: LD_ADDR_VAR 0 3
3239: PUSH
3240: LD_INT 81
3242: PUSH
3243: LD_INT 1
3245: PUSH
3246: EMPTY
3247: LIST
3248: LIST
3249: PPUSH
3250: CALL_OW 69
3254: PPUSH
3255: LD_INT 20
3257: PPUSH
3258: CALL 8511 0 2
3262: ST_TO_ADDR
// for i = 1 to filter do
3263: LD_ADDR_VAR 0 1
3267: PUSH
3268: DOUBLE
3269: LD_INT 1
3271: DEC
3272: ST_TO_ADDR
3273: LD_VAR 0 4
3277: PUSH
3278: FOR_TO
3279: IFFALSE 3319
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( x , filter [ i ] ) ) ;
3281: LD_VAR 0 4
3285: PUSH
3286: LD_VAR 0 1
3290: ARRAY
3291: PPUSH
3292: LD_VAR 0 3
3296: PPUSH
3297: LD_VAR 0 4
3301: PUSH
3302: LD_VAR 0 1
3306: ARRAY
3307: PPUSH
3308: CALL_OW 74
3312: PPUSH
3313: CALL_OW 115
3317: GO 3278
3319: POP
3320: POP
// end ; if FilterAllUnits ( [ [ [ f_side , 2 ] , [ f_weapon , ar_bio_bomb ] , [ f_not , [ f_lives , 700 ] ] ] ] ) > 0 then
3321: LD_INT 22
3323: PUSH
3324: LD_INT 2
3326: PUSH
3327: EMPTY
3328: LIST
3329: LIST
3330: PUSH
3331: LD_INT 34
3333: PUSH
3334: LD_EXP 56
3338: PUSH
3339: EMPTY
3340: LIST
3341: LIST
3342: PUSH
3343: LD_INT 3
3345: PUSH
3346: LD_INT 24
3348: PUSH
3349: LD_INT 700
3351: PUSH
3352: EMPTY
3353: LIST
3354: LIST
3355: PUSH
3356: EMPTY
3357: LIST
3358: LIST
3359: PUSH
3360: EMPTY
3361: LIST
3362: LIST
3363: LIST
3364: PUSH
3365: EMPTY
3366: LIST
3367: PPUSH
3368: CALL_OW 69
3372: PUSH
3373: LD_INT 0
3375: GREATER
3376: IFFALSE 3475
// begin filter := FilterAllUnits ( [ [ [ f_side , 2 ] , [ f_weapon , ar_bio_bomb ] , [ f_not , [ f_lives , 700 ] ] ] ] ) ;
3378: LD_ADDR_VAR 0 4
3382: PUSH
3383: LD_INT 22
3385: PUSH
3386: LD_INT 2
3388: PUSH
3389: EMPTY
3390: LIST
3391: LIST
3392: PUSH
3393: LD_INT 34
3395: PUSH
3396: LD_EXP 56
3400: PUSH
3401: EMPTY
3402: LIST
3403: LIST
3404: PUSH
3405: LD_INT 3
3407: PUSH
3408: LD_INT 24
3410: PUSH
3411: LD_INT 700
3413: PUSH
3414: EMPTY
3415: LIST
3416: LIST
3417: PUSH
3418: EMPTY
3419: LIST
3420: LIST
3421: PUSH
3422: EMPTY
3423: LIST
3424: LIST
3425: LIST
3426: PUSH
3427: EMPTY
3428: LIST
3429: PPUSH
3430: CALL_OW 69
3434: ST_TO_ADDR
// for i = 1 to filter do
3435: LD_ADDR_VAR 0 1
3439: PUSH
3440: DOUBLE
3441: LD_INT 1
3443: DEC
3444: ST_TO_ADDR
3445: LD_VAR 0 4
3449: PUSH
3450: FOR_TO
3451: IFFALSE 3473
// SetLives ( filter [ i ] , 1 ) ;
3453: LD_VAR 0 4
3457: PUSH
3458: LD_VAR 0 1
3462: ARRAY
3463: PPUSH
3464: LD_INT 1
3466: PPUSH
3467: CALL_OW 234
3471: GO 3450
3473: POP
3474: POP
// end ; end ; end_of_file
3475: PPOPN 4
3477: END
// export function Start_Mission ; begin
3478: LD_INT 0
3480: PPUSH
// PrepareLegion ;
3481: CALL 3522 0 0
// PrepareMeeting ;
3485: CALL 4139 0 0
// case Query ( DS-text-beg ) of 1 :
3489: LD_STRING DS-text-beg
3491: PPUSH
3492: CALL_OW 97
3496: PUSH
3497: LD_INT 1
3499: DOUBLE
3500: EQUAL
3501: IFTRUE 3505
3503: GO 3508
3505: POP
// ; end ;
3506: GO 3509
3508: POP
// game_on := true ;
3509: LD_ADDR_EXP 1
3513: PUSH
3514: LD_INT 1
3516: ST_TO_ADDR
// end ;
3517: LD_VAR 0 1
3521: RET
// export l_cmndr , l_skill , l_units ; function PrepareLegion ; var i , p , filter , team ; begin
3522: LD_INT 0
3524: PPUSH
3525: PPUSH
3526: PPUSH
3527: PPUSH
3528: PPUSH
// uc_side := 8 ;
3529: LD_ADDR_OWVAR 20
3533: PUSH
3534: LD_INT 8
3536: ST_TO_ADDR
// uc_nation := 2 ;
3537: LD_ADDR_OWVAR 21
3541: PUSH
3542: LD_INT 2
3544: ST_TO_ADDR
// l_skill := [ 9 , 8 , 7 ] [ difficulty ] ;
3545: LD_ADDR_EXP 50
3549: PUSH
3550: LD_INT 9
3552: PUSH
3553: LD_INT 8
3555: PUSH
3556: LD_INT 7
3558: PUSH
3559: EMPTY
3560: LIST
3561: LIST
3562: LIST
3563: PUSH
3564: LD_OWVAR 67
3568: ARRAY
3569: ST_TO_ADDR
// l_units := [ 9 , 8 , 8 ] [ difficulty ] ;
3570: LD_ADDR_EXP 51
3574: PUSH
3575: LD_INT 9
3577: PUSH
3578: LD_INT 8
3580: PUSH
3581: LD_INT 8
3583: PUSH
3584: EMPTY
3585: LIST
3586: LIST
3587: LIST
3588: PUSH
3589: LD_OWVAR 67
3593: ARRAY
3594: ST_TO_ADDR
// filter := [ ] ;
3595: LD_ADDR_VAR 0 4
3599: PUSH
3600: EMPTY
3601: ST_TO_ADDR
// hc_gallery := desert ;
3602: LD_ADDR_OWVAR 33
3606: PUSH
3607: LD_STRING desert
3609: ST_TO_ADDR
// hc_face_number := 1 ;
3610: LD_ADDR_OWVAR 34
3614: PUSH
3615: LD_INT 1
3617: ST_TO_ADDR
// hc_skills := [ l_skill + 2 , l_skill - 1 , l_skill , l_skill + 1 ] ;
3618: LD_ADDR_OWVAR 31
3622: PUSH
3623: LD_EXP 50
3627: PUSH
3628: LD_INT 2
3630: PLUS
3631: PUSH
3632: LD_EXP 50
3636: PUSH
3637: LD_INT 1
3639: MINUS
3640: PUSH
3641: LD_EXP 50
3645: PUSH
3646: LD_EXP 50
3650: PUSH
3651: LD_INT 1
3653: PLUS
3654: PUSH
3655: EMPTY
3656: LIST
3657: LIST
3658: LIST
3659: LIST
3660: ST_TO_ADDR
// hc_sex := sex_male ;
3661: LD_ADDR_OWVAR 27
3665: PUSH
3666: LD_INT 1
3668: ST_TO_ADDR
// hc_name := Henri Ruotz ;
3669: LD_ADDR_OWVAR 26
3673: PUSH
3674: LD_STRING Henri Ruotz
3676: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
3677: LD_ADDR_OWVAR 29
3681: PUSH
3682: LD_INT 10
3684: PUSH
3685: LD_INT 10
3687: PUSH
3688: EMPTY
3689: LIST
3690: LIST
3691: ST_TO_ADDR
// hc_class := 1 ;
3692: LD_ADDR_OWVAR 28
3696: PUSH
3697: LD_INT 1
3699: ST_TO_ADDR
// hc_importance := 100 ;
3700: LD_ADDR_OWVAR 32
3704: PUSH
3705: LD_INT 100
3707: ST_TO_ADDR
// l_cmndr := CreateHuman ;
3708: LD_ADDR_EXP 49
3712: PUSH
3713: CALL_OW 44
3717: ST_TO_ADDR
// hc_importance := 0 ;
3718: LD_ADDR_OWVAR 32
3722: PUSH
3723: LD_INT 0
3725: ST_TO_ADDR
// scout := PrepareHuman ( sex_male , 1 , 0 ) ;
3726: LD_ADDR_EXP 12
3730: PUSH
3731: LD_INT 1
3733: PPUSH
3734: LD_INT 1
3736: PPUSH
3737: LD_INT 0
3739: PPUSH
3740: CALL_OW 380
3744: ST_TO_ADDR
// for i = 1 to 4 do
3745: LD_ADDR_VAR 0 2
3749: PUSH
3750: DOUBLE
3751: LD_INT 1
3753: DEC
3754: ST_TO_ADDR
3755: LD_INT 4
3757: PUSH
3758: FOR_TO
3759: IFFALSE 3809
// for p = 1 to 6 do
3761: LD_ADDR_VAR 0 3
3765: PUSH
3766: DOUBLE
3767: LD_INT 1
3769: DEC
3770: ST_TO_ADDR
3771: LD_INT 6
3773: PUSH
3774: FOR_TO
3775: IFFALSE 3805
// filter := filter ^ CreateHumanWithClass ( i , l_skill ) ;
3777: LD_ADDR_VAR 0 4
3781: PUSH
3782: LD_VAR 0 4
3786: PUSH
3787: LD_VAR 0 2
3791: PPUSH
3792: LD_EXP 50
3796: PPUSH
3797: CALL 7312 0 2
3801: ADD
3802: ST_TO_ADDR
3803: GO 3774
3805: POP
3806: POP
3807: GO 3758
3809: POP
3810: POP
// team := CharacterSelection ( text , l_units , l_units , [ sel_change_class , l_cmndr , sel_changeable , sel_not_hired ] ^ filter , [ class_soldier , class_mechanic , class_engineer , class_scientistic , class_mortar ] ) ;
3811: LD_ADDR_VAR 0 5
3815: PUSH
3816: LD_STRING text
3818: PPUSH
3819: LD_EXP 51
3823: PPUSH
3824: LD_EXP 51
3828: PPUSH
3829: LD_INT -5
3831: PUSH
3832: LD_EXP 49
3836: PUSH
3837: LD_INT -3
3839: PUSH
3840: LD_INT -2
3842: PUSH
3843: EMPTY
3844: LIST
3845: LIST
3846: LIST
3847: LIST
3848: PUSH
3849: LD_VAR 0 4
3853: ADD
3854: PPUSH
3855: LD_INT 1
3857: PUSH
3858: LD_INT 3
3860: PUSH
3861: LD_INT 2
3863: PUSH
3864: LD_INT 4
3866: PUSH
3867: LD_INT 8
3869: PUSH
3870: EMPTY
3871: LIST
3872: LIST
3873: LIST
3874: LIST
3875: LIST
3876: PPUSH
3877: CALL_OW 42
3881: ST_TO_ADDR
// for i = 1 to l_units do
3882: LD_ADDR_VAR 0 2
3886: PUSH
3887: DOUBLE
3888: LD_INT 1
3890: DEC
3891: ST_TO_ADDR
3892: LD_EXP 51
3896: PUSH
3897: FOR_TO
3898: IFFALSE 3923
// PlaceUnitArea ( team [ i ] , legion_spawn , false ) ;
3900: LD_VAR 0 5
3904: PUSH
3905: LD_VAR 0 2
3909: ARRAY
3910: PPUSH
3911: LD_INT 1
3913: PPUSH
3914: LD_INT 0
3916: PPUSH
3917: CALL_OW 49
3921: GO 3897
3923: POP
3924: POP
// PlaceUnitArea ( l_cmndr , legion_spawn , false ) ;
3925: LD_EXP 49
3929: PPUSH
3930: LD_INT 1
3932: PPUSH
3933: LD_INT 0
3935: PPUSH
3936: CALL_OW 49
// end ;
3940: LD_VAR 0 1
3944: RET
// export function PlaceCamera ; begin
3945: LD_INT 0
3947: PPUSH
// PlaceSeeing ( 46 , 48 , 8 , 10 ) ;
3948: LD_INT 46
3950: PPUSH
3951: LD_INT 48
3953: PPUSH
3954: LD_INT 8
3956: PPUSH
3957: LD_INT 10
3959: PPUSH
3960: CALL_OW 330
// PlaceSeeing ( 58 , 66 , 8 , 10 ) ;
3964: LD_INT 58
3966: PPUSH
3967: LD_INT 66
3969: PPUSH
3970: LD_INT 8
3972: PPUSH
3973: LD_INT 10
3975: PPUSH
3976: CALL_OW 330
// PlaceSeeing ( 82 , 82 , 8 , 10 ) ;
3980: LD_INT 82
3982: PPUSH
3983: LD_INT 82
3985: PPUSH
3986: LD_INT 8
3988: PPUSH
3989: LD_INT 10
3991: PPUSH
3992: CALL_OW 330
// PlaceSeeing ( 107 , 79 , 8 , 10 ) ;
3996: LD_INT 107
3998: PPUSH
3999: LD_INT 79
4001: PPUSH
4002: LD_INT 8
4004: PPUSH
4005: LD_INT 10
4007: PPUSH
4008: CALL_OW 330
// PlaceSeeing ( 101 , 57 , 8 , 10 ) ;
4012: LD_INT 101
4014: PPUSH
4015: LD_INT 57
4017: PPUSH
4018: LD_INT 8
4020: PPUSH
4021: LD_INT 10
4023: PPUSH
4024: CALL_OW 330
// PlaceSeeing ( 85 , 32 , 8 , 10 ) ;
4028: LD_INT 85
4030: PPUSH
4031: LD_INT 32
4033: PPUSH
4034: LD_INT 8
4036: PPUSH
4037: LD_INT 10
4039: PPUSH
4040: CALL_OW 330
// PlaceSeeing ( 108 , 72 , 8 , 10 ) ;
4044: LD_INT 108
4046: PPUSH
4047: LD_INT 72
4049: PPUSH
4050: LD_INT 8
4052: PPUSH
4053: LD_INT 10
4055: PPUSH
4056: CALL_OW 330
// PlaceSeeing ( 124 , 74 , 8 , 10 ) ;
4060: LD_INT 124
4062: PPUSH
4063: LD_INT 74
4065: PPUSH
4066: LD_INT 8
4068: PPUSH
4069: LD_INT 10
4071: PPUSH
4072: CALL_OW 330
// PlaceSeeing ( 67 , 33 , 8 , 20 ) ;
4076: LD_INT 67
4078: PPUSH
4079: LD_INT 33
4081: PPUSH
4082: LD_INT 8
4084: PPUSH
4085: LD_INT 20
4087: PPUSH
4088: CALL_OW 330
// RemoveSeeing ( 67 , 33 , 8 ) ;
4092: LD_INT 67
4094: PPUSH
4095: LD_INT 33
4097: PPUSH
4098: LD_INT 8
4100: PPUSH
4101: CALL_OW 331
// PlaceSeeing ( 94 , 84 , 8 , 20 ) ;
4105: LD_INT 94
4107: PPUSH
4108: LD_INT 84
4110: PPUSH
4111: LD_INT 8
4113: PPUSH
4114: LD_INT 20
4116: PPUSH
4117: CALL_OW 330
// RemoveSeeing ( 94 , 84 , 8 ) ;
4121: LD_INT 94
4123: PPUSH
4124: LD_INT 84
4126: PPUSH
4127: LD_INT 8
4129: PPUSH
4130: CALL_OW 331
// end ;
4134: LD_VAR 0 1
4138: RET
// export function PrepareMeeting ; begin
4139: LD_INT 0
4141: PPUSH
// uc_side := 6 ;
4142: LD_ADDR_OWVAR 20
4146: PUSH
4147: LD_INT 6
4149: ST_TO_ADDR
// hc_gallery := desert ;
4150: LD_ADDR_OWVAR 33
4154: PUSH
4155: LD_STRING desert
4157: ST_TO_ADDR
// hc_face_number := 2 ;
4158: LD_ADDR_OWVAR 34
4162: PUSH
4163: LD_INT 2
4165: ST_TO_ADDR
// hc_name := Leopold Drass ;
4166: LD_ADDR_OWVAR 26
4170: PUSH
4171: LD_STRING Leopold Drass
4173: ST_TO_ADDR
// hc_class := 1 ;
4174: LD_ADDR_OWVAR 28
4178: PUSH
4179: LD_INT 1
4181: ST_TO_ADDR
// hc_sex := sex_male ;
4182: LD_ADDR_OWVAR 27
4186: PUSH
4187: LD_INT 1
4189: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
4190: LD_ADDR_OWVAR 29
4194: PUSH
4195: LD_INT 12
4197: PUSH
4198: LD_INT 12
4200: PUSH
4201: EMPTY
4202: LIST
4203: LIST
4204: ST_TO_ADDR
// Leopold := CreateHuman ;
4205: LD_ADDR_EXP 7
4209: PUSH
4210: CALL_OW 44
4214: ST_TO_ADDR
// PlaceUnitArea ( Leopold , north_spawn , false ) ;
4215: LD_EXP 7
4219: PPUSH
4220: LD_INT 3
4222: PPUSH
4223: LD_INT 0
4225: PPUSH
4226: CALL_OW 49
// end ; end_of_file
4230: LD_VAR 0 1
4234: RET
// on SailEvent ( num ) do var i , filter , un , p , area ;
4235: LD_INT 0
4237: PPUSH
4238: PPUSH
4239: PPUSH
4240: PPUSH
4241: PPUSH
// begin case num of 1 :
4242: LD_VAR 0 1
4246: PUSH
4247: LD_INT 1
4249: DOUBLE
4250: EQUAL
4251: IFTRUE 4255
4253: GO 4287
4255: POP
// begin ComMoveXY ( leopold , GetX ( l_cmndr ) , GetY ( l_cmndr ) ) ;
4256: LD_EXP 7
4260: PPUSH
4261: LD_EXP 49
4265: PPUSH
4266: CALL_OW 250
4270: PPUSH
4271: LD_EXP 49
4275: PPUSH
4276: CALL_OW 251
4280: PPUSH
4281: CALL_OW 111
// end ; 2 :
4285: GO 6705
4287: LD_INT 2
4289: DOUBLE
4290: EQUAL
4291: IFTRUE 4295
4293: GO 4404
4295: POP
// begin InGameOn ;
4296: CALL_OW 8
// meeting_start := true ;
4300: LD_ADDR_EXP 26
4304: PUSH
4305: LD_INT 1
4307: ST_TO_ADDR
// ComTurnUnit ( leopold , l_cmndr ) ;
4308: LD_EXP 7
4312: PPUSH
4313: LD_EXP 49
4317: PPUSH
4318: CALL_OW 119
// ComTurnUnit ( l_cmndr , leopold ) ;
4322: LD_EXP 49
4326: PPUSH
4327: LD_EXP 7
4331: PPUSH
4332: CALL_OW 119
// Say ( leopold , DS-DL-1 ) ;
4336: LD_EXP 7
4340: PPUSH
4341: LD_STRING DS-DL-1
4343: PPUSH
4344: CALL_OW 88
// Say ( l_cmndr , DS-DC-1 ) ;
4348: LD_EXP 49
4352: PPUSH
4353: LD_STRING DS-DC-1
4355: PPUSH
4356: CALL_OW 88
// Say ( leopold , DS-DL-2 ) ;
4360: LD_EXP 7
4364: PPUSH
4365: LD_STRING DS-DL-2
4367: PPUSH
4368: CALL_OW 88
// ComEnterUnit ( leopold , fort ) ;
4372: LD_EXP 7
4376: PPUSH
4377: LD_INT 23
4379: PPUSH
4380: CALL_OW 120
// InGameOff ;
4384: CALL_OW 9
// Wait ( 0 0$01 ) ;
4388: LD_INT 35
4390: PPUSH
4391: CALL_OW 67
// ChangeMissionObjectives ( DS-T1 ) ;
4395: LD_STRING DS-T1
4397: PPUSH
4398: CALL_OW 337
// end ; 10 :
4402: GO 6705
4404: LD_INT 10
4406: DOUBLE
4407: EQUAL
4408: IFTRUE 4412
4410: GO 4624
4412: POP
// begin uc_side := 6 ;
4413: LD_ADDR_OWVAR 20
4417: PUSH
4418: LD_INT 6
4420: ST_TO_ADDR
// uc_nation := 2 ;
4421: LD_ADDR_OWVAR 21
4425: PUSH
4426: LD_INT 2
4428: ST_TO_ADDR
// hc_gallery :=  ;
4429: LD_ADDR_OWVAR 33
4433: PUSH
4434: LD_STRING 
4436: ST_TO_ADDR
// hc_skills := [ skill + 2 , skill - 1 , skill , skill + 1 ] ;
4437: LD_ADDR_OWVAR 31
4441: PUSH
4442: LD_EXP 16
4446: PUSH
4447: LD_INT 2
4449: PLUS
4450: PUSH
4451: LD_EXP 16
4455: PUSH
4456: LD_INT 1
4458: MINUS
4459: PUSH
4460: LD_EXP 16
4464: PUSH
4465: LD_EXP 16
4469: PUSH
4470: LD_INT 1
4472: PLUS
4473: PUSH
4474: EMPTY
4475: LIST
4476: LIST
4477: LIST
4478: LIST
4479: ST_TO_ADDR
// hc_sex := sex_male ;
4480: LD_ADDR_OWVAR 27
4484: PUSH
4485: LD_INT 1
4487: ST_TO_ADDR
// hc_name := Samuel van Horn ;
4488: LD_ADDR_OWVAR 26
4492: PUSH
4493: LD_STRING Samuel van Horn
4495: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
4496: LD_ADDR_OWVAR 29
4500: PUSH
4501: LD_INT 11
4503: PUSH
4504: LD_INT 10
4506: PUSH
4507: EMPTY
4508: LIST
4509: LIST
4510: ST_TO_ADDR
// hc_class := 1 ;
4511: LD_ADDR_OWVAR 28
4515: PUSH
4516: LD_INT 1
4518: ST_TO_ADDR
// samuel := CreateHuman ;
4519: LD_ADDR_EXP 9
4523: PUSH
4524: CALL_OW 44
4528: ST_TO_ADDR
// PlaceUnitArea ( samuel , south_spawn , false ) ;
4529: LD_EXP 9
4533: PPUSH
4534: LD_INT 4
4536: PPUSH
4537: LD_INT 0
4539: PPUSH
4540: CALL_OW 49
// for i = 1 to 3 do
4544: LD_ADDR_VAR 0 2
4548: PUSH
4549: DOUBLE
4550: LD_INT 1
4552: DEC
4553: ST_TO_ADDR
4554: LD_INT 3
4556: PUSH
4557: FOR_TO
4558: IFFALSE 4585
// PlaceUnitArea ( CreateHumanWithClass ( class_mortar , skill ) , south_spawn , false ) ;
4560: LD_INT 8
4562: PPUSH
4563: LD_EXP 16
4567: PPUSH
4568: CALL 7312 0 2
4572: PPUSH
4573: LD_INT 4
4575: PPUSH
4576: LD_INT 0
4578: PPUSH
4579: CALL_OW 49
4583: GO 4557
4585: POP
4586: POP
// ComEnterUnit ( FilterAllUnits ( [ f_side , 6 ] ) diff [ leopold , fort ] , fort ) ;
4587: LD_INT 22
4589: PUSH
4590: LD_INT 6
4592: PUSH
4593: EMPTY
4594: LIST
4595: LIST
4596: PPUSH
4597: CALL_OW 69
4601: PUSH
4602: LD_EXP 7
4606: PUSH
4607: LD_INT 23
4609: PUSH
4610: EMPTY
4611: LIST
4612: LIST
4613: DIFF
4614: PPUSH
4615: LD_INT 23
4617: PPUSH
4618: CALL_OW 120
// end ; 3 :
4622: GO 6705
4624: LD_INT 3
4626: DOUBLE
4627: EQUAL
4628: IFTRUE 4632
4630: GO 4643
4632: POP
// begin arabian_attack := true ;
4633: LD_ADDR_EXP 38
4637: PUSH
4638: LD_INT 1
4640: ST_TO_ADDR
// end ; 4 :
4641: GO 6705
4643: LD_INT 4
4645: DOUBLE
4646: EQUAL
4647: IFTRUE 4651
4649: GO 4662
4651: POP
// begin american_attack := true ;
4652: LD_ADDR_EXP 40
4656: PUSH
4657: LD_INT 1
4659: ST_TO_ADDR
// end ; 5 :
4660: GO 6705
4662: LD_INT 5
4664: DOUBLE
4665: EQUAL
4666: IFTRUE 4670
4668: GO 4681
4670: POP
// begin russian_attack := true ;
4671: LD_ADDR_EXP 39
4675: PUSH
4676: LD_INT 1
4678: ST_TO_ADDR
// end ; 31 :
4679: GO 6705
4681: LD_INT 31
4683: DOUBLE
4684: EQUAL
4685: IFTRUE 4689
4687: GO 4964
4689: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
4690: LD_ADDR_VAR 0 6
4694: PUSH
4695: LD_EXP 15
4699: PUSH
4700: LD_INT 1
4702: PPUSH
4703: LD_EXP 15
4707: PPUSH
4708: CALL_OW 12
4712: ARRAY
4713: ST_TO_ADDR
// uc_side := 2 ;
4714: LD_ADDR_OWVAR 20
4718: PUSH
4719: LD_INT 2
4721: ST_TO_ADDR
// uc_nation := 2 ;
4722: LD_ADDR_OWVAR 21
4726: PUSH
4727: LD_INT 2
4729: ST_TO_ADDR
// for i = 1 to arabian_force do
4730: LD_ADDR_VAR 0 2
4734: PUSH
4735: DOUBLE
4736: LD_INT 1
4738: DEC
4739: ST_TO_ADDR
4740: LD_EXP 20
4744: PUSH
4745: FOR_TO
4746: IFFALSE 4825
// begin vc_chassis := ar_half_tracked ;
4748: LD_ADDR_OWVAR 37
4752: PUSH
4753: LD_INT 14
4755: ST_TO_ADDR
// vc_engine := engine_siberite ;
4756: LD_ADDR_OWVAR 39
4760: PUSH
4761: LD_INT 3
4763: ST_TO_ADDR
// vc_control := control_remote ;
4764: LD_ADDR_OWVAR 38
4768: PUSH
4769: LD_INT 2
4771: ST_TO_ADDR
// vc_weapon := ar_weapons [ Rand ( 1 , ar_weapons ) ] ;
4772: LD_ADDR_OWVAR 40
4776: PUSH
4777: LD_EXP 17
4781: PUSH
4782: LD_INT 1
4784: PPUSH
4785: LD_EXP 17
4789: PPUSH
4790: CALL_OW 12
4794: ARRAY
4795: ST_TO_ADDR
// un := CreateVehicle ;
4796: LD_ADDR_VAR 0 4
4800: PUSH
4801: CALL_OW 45
4805: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
4806: LD_VAR 0 4
4810: PPUSH
4811: LD_VAR 0 6
4815: PPUSH
4816: LD_INT 0
4818: PPUSH
4819: CALL_OW 49
// end ;
4823: GO 4745
4825: POP
4826: POP
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_manual ] ] ) < 2 then
4827: LD_INT 22
4829: PUSH
4830: LD_INT 2
4832: PUSH
4833: EMPTY
4834: LIST
4835: LIST
4836: PUSH
4837: LD_INT 33
4839: PUSH
4840: LD_INT 1
4842: PUSH
4843: EMPTY
4844: LIST
4845: LIST
4846: PUSH
4847: EMPTY
4848: LIST
4849: LIST
4850: PPUSH
4851: CALL_OW 69
4855: PUSH
4856: LD_INT 2
4858: LESS
4859: IFFALSE 4962
// for i = 1 to 2 do
4861: LD_ADDR_VAR 0 2
4865: PUSH
4866: DOUBLE
4867: LD_INT 1
4869: DEC
4870: ST_TO_ADDR
4871: LD_INT 2
4873: PUSH
4874: FOR_TO
4875: IFFALSE 4960
// begin vc_chassis := ar_half_tracked ;
4877: LD_ADDR_OWVAR 37
4881: PUSH
4882: LD_INT 14
4884: ST_TO_ADDR
// vc_engine := engine_siberite ;
4885: LD_ADDR_OWVAR 39
4889: PUSH
4890: LD_INT 3
4892: ST_TO_ADDR
// vc_control := control_manual ;
4893: LD_ADDR_OWVAR 38
4897: PUSH
4898: LD_INT 1
4900: ST_TO_ADDR
// vc_weapon := ar_control_tower ;
4901: LD_ADDR_OWVAR 40
4905: PUSH
4906: LD_INT 31
4908: ST_TO_ADDR
// un := CreateVehicle ;
4909: LD_ADDR_VAR 0 4
4913: PUSH
4914: CALL_OW 45
4918: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
4919: LD_VAR 0 4
4923: PPUSH
4924: LD_VAR 0 6
4928: PPUSH
4929: LD_INT 0
4931: PPUSH
4932: CALL_OW 49
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , skill ) , un ) ;
4936: LD_INT 3
4938: PPUSH
4939: LD_EXP 16
4943: PPUSH
4944: CALL 7312 0 2
4948: PPUSH
4949: LD_VAR 0 4
4953: PPUSH
4954: CALL_OW 52
// end ;
4958: GO 4874
4960: POP
4961: POP
// end ; 32 :
4962: GO 6705
4964: LD_INT 32
4966: DOUBLE
4967: EQUAL
4968: IFTRUE 4972
4970: GO 5345
4972: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
4973: LD_ADDR_VAR 0 6
4977: PUSH
4978: LD_EXP 15
4982: PUSH
4983: LD_INT 1
4985: PPUSH
4986: LD_EXP 15
4990: PPUSH
4991: CALL_OW 12
4995: ARRAY
4996: ST_TO_ADDR
// uc_side := 2 ;
4997: LD_ADDR_OWVAR 20
5001: PUSH
5002: LD_INT 2
5004: ST_TO_ADDR
// uc_nation := 2 ;
5005: LD_ADDR_OWVAR 21
5009: PUSH
5010: LD_INT 2
5012: ST_TO_ADDR
// for i = 1 to ( arabian_force - 2 ) do
5013: LD_ADDR_VAR 0 2
5017: PUSH
5018: DOUBLE
5019: LD_INT 1
5021: DEC
5022: ST_TO_ADDR
5023: LD_EXP 20
5027: PUSH
5028: LD_INT 2
5030: MINUS
5031: PUSH
5032: FOR_TO
5033: IFFALSE 5116
// begin vc_chassis := ar_half_tracked ;
5035: LD_ADDR_OWVAR 37
5039: PUSH
5040: LD_INT 14
5042: ST_TO_ADDR
// vc_engine := engine_siberite ;
5043: LD_ADDR_OWVAR 39
5047: PUSH
5048: LD_INT 3
5050: ST_TO_ADDR
// vc_control := control_remote ;
5051: LD_ADDR_OWVAR 38
5055: PUSH
5056: LD_INT 2
5058: ST_TO_ADDR
// vc_weapon := ar_weapons [ Rand ( 1 , ar_weapons - 1 ) ] ;
5059: LD_ADDR_OWVAR 40
5063: PUSH
5064: LD_EXP 17
5068: PUSH
5069: LD_INT 1
5071: PPUSH
5072: LD_EXP 17
5076: PUSH
5077: LD_INT 1
5079: MINUS
5080: PPUSH
5081: CALL_OW 12
5085: ARRAY
5086: ST_TO_ADDR
// un := CreateVehicle ;
5087: LD_ADDR_VAR 0 4
5091: PUSH
5092: CALL_OW 45
5096: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5097: LD_VAR 0 4
5101: PPUSH
5102: LD_VAR 0 6
5106: PPUSH
5107: LD_INT 0
5109: PPUSH
5110: CALL_OW 49
// end ;
5114: GO 5032
5116: POP
5117: POP
// for i = 1 to Rand ( 0 , 1 ) + [ 2 , 3 , 3 ] [ game_difficulty ] do
5118: LD_ADDR_VAR 0 2
5122: PUSH
5123: DOUBLE
5124: LD_INT 1
5126: DEC
5127: ST_TO_ADDR
5128: LD_INT 0
5130: PPUSH
5131: LD_INT 1
5133: PPUSH
5134: CALL_OW 12
5138: PUSH
5139: LD_INT 2
5141: PUSH
5142: LD_INT 3
5144: PUSH
5145: LD_INT 3
5147: PUSH
5148: EMPTY
5149: LIST
5150: LIST
5151: LIST
5152: PUSH
5153: LD_EXP 2
5157: ARRAY
5158: PLUS
5159: PUSH
5160: FOR_TO
5161: IFFALSE 5198
// begin uc_nation := 0 ;
5163: LD_ADDR_OWVAR 21
5167: PUSH
5168: LD_INT 0
5170: ST_TO_ADDR
// PlaceUnitArea ( CreateHumanWithClass ( 17 , skill ) , area , false ) ;
5171: LD_INT 17
5173: PPUSH
5174: LD_EXP 16
5178: PPUSH
5179: CALL 7312 0 2
5183: PPUSH
5184: LD_VAR 0 6
5188: PPUSH
5189: LD_INT 0
5191: PPUSH
5192: CALL_OW 49
// end ;
5196: GO 5160
5198: POP
5199: POP
// uc_nation := 2 ;
5200: LD_ADDR_OWVAR 21
5204: PUSH
5205: LD_INT 2
5207: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_manual ] ] ) < 2 then
5208: LD_INT 22
5210: PUSH
5211: LD_INT 2
5213: PUSH
5214: EMPTY
5215: LIST
5216: LIST
5217: PUSH
5218: LD_INT 33
5220: PUSH
5221: LD_INT 1
5223: PUSH
5224: EMPTY
5225: LIST
5226: LIST
5227: PUSH
5228: EMPTY
5229: LIST
5230: LIST
5231: PPUSH
5232: CALL_OW 69
5236: PUSH
5237: LD_INT 2
5239: LESS
5240: IFFALSE 5343
// for i = 1 to 2 do
5242: LD_ADDR_VAR 0 2
5246: PUSH
5247: DOUBLE
5248: LD_INT 1
5250: DEC
5251: ST_TO_ADDR
5252: LD_INT 2
5254: PUSH
5255: FOR_TO
5256: IFFALSE 5341
// begin vc_chassis := ar_half_tracked ;
5258: LD_ADDR_OWVAR 37
5262: PUSH
5263: LD_INT 14
5265: ST_TO_ADDR
// vc_engine := engine_siberite ;
5266: LD_ADDR_OWVAR 39
5270: PUSH
5271: LD_INT 3
5273: ST_TO_ADDR
// vc_control := control_manual ;
5274: LD_ADDR_OWVAR 38
5278: PUSH
5279: LD_INT 1
5281: ST_TO_ADDR
// vc_weapon := ar_control_tower ;
5282: LD_ADDR_OWVAR 40
5286: PUSH
5287: LD_INT 31
5289: ST_TO_ADDR
// un := CreateVehicle ;
5290: LD_ADDR_VAR 0 4
5294: PUSH
5295: CALL_OW 45
5299: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5300: LD_VAR 0 4
5304: PPUSH
5305: LD_VAR 0 6
5309: PPUSH
5310: LD_INT 0
5312: PPUSH
5313: CALL_OW 49
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , skill ) , un ) ;
5317: LD_INT 3
5319: PPUSH
5320: LD_EXP 16
5324: PPUSH
5325: CALL 7312 0 2
5329: PPUSH
5330: LD_VAR 0 4
5334: PPUSH
5335: CALL_OW 52
// end ;
5339: GO 5255
5341: POP
5342: POP
// end ; 33 :
5343: GO 6705
5345: LD_INT 33
5347: DOUBLE
5348: EQUAL
5349: IFTRUE 5353
5351: GO 5624
5353: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
5354: LD_ADDR_VAR 0 6
5358: PUSH
5359: LD_EXP 15
5363: PUSH
5364: LD_INT 1
5366: PPUSH
5367: LD_EXP 15
5371: PPUSH
5372: CALL_OW 12
5376: ARRAY
5377: ST_TO_ADDR
// uc_side := 2 ;
5378: LD_ADDR_OWVAR 20
5382: PUSH
5383: LD_INT 2
5385: ST_TO_ADDR
// uc_nation := 2 ;
5386: LD_ADDR_OWVAR 21
5390: PUSH
5391: LD_INT 2
5393: ST_TO_ADDR
// for i = 1 to ( arabian_force / 2 ) do
5394: LD_ADDR_VAR 0 2
5398: PUSH
5399: DOUBLE
5400: LD_INT 1
5402: DEC
5403: ST_TO_ADDR
5404: LD_EXP 20
5408: PUSH
5409: LD_INT 2
5411: DIVREAL
5412: PUSH
5413: FOR_TO
5414: IFFALSE 5519
// begin vc_chassis := ar_half_tracked ;
5416: LD_ADDR_OWVAR 37
5420: PUSH
5421: LD_INT 14
5423: ST_TO_ADDR
// vc_engine := engine_siberite ;
5424: LD_ADDR_OWVAR 39
5428: PUSH
5429: LD_INT 3
5431: ST_TO_ADDR
// vc_control := control_manual ;
5432: LD_ADDR_OWVAR 38
5436: PUSH
5437: LD_INT 1
5439: ST_TO_ADDR
// vc_weapon := ar_weapons [ Rand ( 1 , ar_weapons - 2 ) ] ;
5440: LD_ADDR_OWVAR 40
5444: PUSH
5445: LD_EXP 17
5449: PUSH
5450: LD_INT 1
5452: PPUSH
5453: LD_EXP 17
5457: PUSH
5458: LD_INT 2
5460: MINUS
5461: PPUSH
5462: CALL_OW 12
5466: ARRAY
5467: ST_TO_ADDR
// un := CreateVehicle ;
5468: LD_ADDR_VAR 0 4
5472: PUSH
5473: CALL_OW 45
5477: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5478: LD_VAR 0 4
5482: PPUSH
5483: LD_VAR 0 6
5487: PPUSH
5488: LD_INT 0
5490: PPUSH
5491: CALL_OW 49
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , skill ) , un ) ;
5495: LD_INT 3
5497: PPUSH
5498: LD_EXP 16
5502: PPUSH
5503: CALL 7312 0 2
5507: PPUSH
5508: LD_VAR 0 4
5512: PPUSH
5513: CALL_OW 52
// end ;
5517: GO 5413
5519: POP
5520: POP
// for i = 1 to ( arabian_force / 2 ) do
5521: LD_ADDR_VAR 0 2
5525: PUSH
5526: DOUBLE
5527: LD_INT 1
5529: DEC
5530: ST_TO_ADDR
5531: LD_EXP 20
5535: PUSH
5536: LD_INT 2
5538: DIVREAL
5539: PUSH
5540: FOR_TO
5541: IFFALSE 5620
// begin vc_chassis := ar_half_tracked ;
5543: LD_ADDR_OWVAR 37
5547: PUSH
5548: LD_INT 14
5550: ST_TO_ADDR
// vc_engine := engine_siberite ;
5551: LD_ADDR_OWVAR 39
5555: PUSH
5556: LD_INT 3
5558: ST_TO_ADDR
// vc_control := control_apeman ;
5559: LD_ADDR_OWVAR 38
5563: PUSH
5564: LD_INT 5
5566: ST_TO_ADDR
// vc_weapon := ar_weapons [ Rand ( 2 , ar_weapons ) ] ;
5567: LD_ADDR_OWVAR 40
5571: PUSH
5572: LD_EXP 17
5576: PUSH
5577: LD_INT 2
5579: PPUSH
5580: LD_EXP 17
5584: PPUSH
5585: CALL_OW 12
5589: ARRAY
5590: ST_TO_ADDR
// un := CreateVehicle ;
5591: LD_ADDR_VAR 0 4
5595: PUSH
5596: CALL_OW 45
5600: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5601: LD_VAR 0 4
5605: PPUSH
5606: LD_VAR 0 6
5610: PPUSH
5611: LD_INT 0
5613: PPUSH
5614: CALL_OW 49
// end ;
5618: GO 5540
5620: POP
5621: POP
// end ; 41 :
5622: GO 6705
5624: LD_INT 41
5626: DOUBLE
5627: EQUAL
5628: IFTRUE 5632
5630: GO 5776
5632: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
5633: LD_ADDR_VAR 0 6
5637: PUSH
5638: LD_EXP 15
5642: PUSH
5643: LD_INT 1
5645: PPUSH
5646: LD_EXP 15
5650: PPUSH
5651: CALL_OW 12
5655: ARRAY
5656: ST_TO_ADDR
// uc_side := 1 ;
5657: LD_ADDR_OWVAR 20
5661: PUSH
5662: LD_INT 1
5664: ST_TO_ADDR
// uc_nation := 1 ;
5665: LD_ADDR_OWVAR 21
5669: PUSH
5670: LD_INT 1
5672: ST_TO_ADDR
// for i = 1 to american_force do
5673: LD_ADDR_VAR 0 2
5677: PUSH
5678: DOUBLE
5679: LD_INT 1
5681: DEC
5682: ST_TO_ADDR
5683: LD_EXP 22
5687: PUSH
5688: FOR_TO
5689: IFFALSE 5772
// begin vc_chassis := us_morphling ;
5691: LD_ADDR_OWVAR 37
5695: PUSH
5696: LD_INT 5
5698: ST_TO_ADDR
// vc_engine := engine_siberite ;
5699: LD_ADDR_OWVAR 39
5703: PUSH
5704: LD_INT 3
5706: ST_TO_ADDR
// vc_control := control_computer ;
5707: LD_ADDR_OWVAR 38
5711: PUSH
5712: LD_INT 3
5714: ST_TO_ADDR
// vc_weapon := us_weapons [ Rand ( 1 , us_weapons - 1 ) ] ;
5715: LD_ADDR_OWVAR 40
5719: PUSH
5720: LD_EXP 19
5724: PUSH
5725: LD_INT 1
5727: PPUSH
5728: LD_EXP 19
5732: PUSH
5733: LD_INT 1
5735: MINUS
5736: PPUSH
5737: CALL_OW 12
5741: ARRAY
5742: ST_TO_ADDR
// un := CreateVehicle ;
5743: LD_ADDR_VAR 0 4
5747: PUSH
5748: CALL_OW 45
5752: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5753: LD_VAR 0 4
5757: PPUSH
5758: LD_VAR 0 6
5762: PPUSH
5763: LD_INT 0
5765: PPUSH
5766: CALL_OW 49
// end ;
5770: GO 5688
5772: POP
5773: POP
// end ; 42 :
5774: GO 6705
5776: LD_INT 42
5778: DOUBLE
5779: EQUAL
5780: IFTRUE 5784
5782: GO 5924
5784: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
5785: LD_ADDR_VAR 0 6
5789: PUSH
5790: LD_EXP 15
5794: PUSH
5795: LD_INT 1
5797: PPUSH
5798: LD_EXP 15
5802: PPUSH
5803: CALL_OW 12
5807: ARRAY
5808: ST_TO_ADDR
// uc_side := 1 ;
5809: LD_ADDR_OWVAR 20
5813: PUSH
5814: LD_INT 1
5816: ST_TO_ADDR
// uc_nation := 1 ;
5817: LD_ADDR_OWVAR 21
5821: PUSH
5822: LD_INT 1
5824: ST_TO_ADDR
// for i = 1 to american_force do
5825: LD_ADDR_VAR 0 2
5829: PUSH
5830: DOUBLE
5831: LD_INT 1
5833: DEC
5834: ST_TO_ADDR
5835: LD_EXP 22
5839: PUSH
5840: FOR_TO
5841: IFFALSE 5920
// begin vc_chassis := us_morphling ;
5843: LD_ADDR_OWVAR 37
5847: PUSH
5848: LD_INT 5
5850: ST_TO_ADDR
// vc_engine := engine_siberite ;
5851: LD_ADDR_OWVAR 39
5855: PUSH
5856: LD_INT 3
5858: ST_TO_ADDR
// vc_control := control_computer ;
5859: LD_ADDR_OWVAR 38
5863: PUSH
5864: LD_INT 3
5866: ST_TO_ADDR
// vc_weapon := us_weapons [ Rand ( 1 , us_weapons ) ] ;
5867: LD_ADDR_OWVAR 40
5871: PUSH
5872: LD_EXP 19
5876: PUSH
5877: LD_INT 1
5879: PPUSH
5880: LD_EXP 19
5884: PPUSH
5885: CALL_OW 12
5889: ARRAY
5890: ST_TO_ADDR
// un := CreateVehicle ;
5891: LD_ADDR_VAR 0 4
5895: PUSH
5896: CALL_OW 45
5900: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5901: LD_VAR 0 4
5905: PPUSH
5906: LD_VAR 0 6
5910: PPUSH
5911: LD_INT 0
5913: PPUSH
5914: CALL_OW 49
// end ;
5918: GO 5840
5920: POP
5921: POP
// end ; 51 :
5922: GO 6705
5924: LD_INT 51
5926: DOUBLE
5927: EQUAL
5928: IFTRUE 5932
5930: GO 6072
5932: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
5933: LD_ADDR_VAR 0 6
5937: PUSH
5938: LD_EXP 15
5942: PUSH
5943: LD_INT 1
5945: PPUSH
5946: LD_EXP 15
5950: PPUSH
5951: CALL_OW 12
5955: ARRAY
5956: ST_TO_ADDR
// uc_side := 3 ;
5957: LD_ADDR_OWVAR 20
5961: PUSH
5962: LD_INT 3
5964: ST_TO_ADDR
// uc_nation := 3 ;
5965: LD_ADDR_OWVAR 21
5969: PUSH
5970: LD_INT 3
5972: ST_TO_ADDR
// for i = 1 to russian_force do
5973: LD_ADDR_VAR 0 2
5977: PUSH
5978: DOUBLE
5979: LD_INT 1
5981: DEC
5982: ST_TO_ADDR
5983: LD_EXP 21
5987: PUSH
5988: FOR_TO
5989: IFFALSE 6068
// begin vc_chassis := ru_heavy_tracked ;
5991: LD_ADDR_OWVAR 37
5995: PUSH
5996: LD_INT 24
5998: ST_TO_ADDR
// vc_engine := engine_siberite ;
5999: LD_ADDR_OWVAR 39
6003: PUSH
6004: LD_INT 3
6006: ST_TO_ADDR
// vc_control := control_computer ;
6007: LD_ADDR_OWVAR 38
6011: PUSH
6012: LD_INT 3
6014: ST_TO_ADDR
// vc_weapon := ru_weapons [ Rand ( 1 , ru_weapons ) ] ;
6015: LD_ADDR_OWVAR 40
6019: PUSH
6020: LD_EXP 18
6024: PUSH
6025: LD_INT 1
6027: PPUSH
6028: LD_EXP 18
6032: PPUSH
6033: CALL_OW 12
6037: ARRAY
6038: ST_TO_ADDR
// un := CreateVehicle ;
6039: LD_ADDR_VAR 0 4
6043: PUSH
6044: CALL_OW 45
6048: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
6049: LD_VAR 0 4
6053: PPUSH
6054: LD_VAR 0 6
6058: PPUSH
6059: LD_INT 0
6061: PPUSH
6062: CALL_OW 49
// end ;
6066: GO 5988
6068: POP
6069: POP
// end ; 91 :
6070: GO 6705
6072: LD_INT 91
6074: DOUBLE
6075: EQUAL
6076: IFTRUE 6080
6078: GO 6218
6080: POP
// begin uc_side := 8 ;
6081: LD_ADDR_OWVAR 20
6085: PUSH
6086: LD_INT 8
6088: ST_TO_ADDR
// uc_nation := 1 ;
6089: LD_ADDR_OWVAR 21
6093: PUSH
6094: LD_INT 1
6096: ST_TO_ADDR
// for i = 1 to [ 4 , 3 , 3 ] [ game_difficulty ] do
6097: LD_ADDR_VAR 0 2
6101: PUSH
6102: DOUBLE
6103: LD_INT 1
6105: DEC
6106: ST_TO_ADDR
6107: LD_INT 4
6109: PUSH
6110: LD_INT 3
6112: PUSH
6113: LD_INT 3
6115: PUSH
6116: EMPTY
6117: LIST
6118: LIST
6119: LIST
6120: PUSH
6121: LD_EXP 2
6125: ARRAY
6126: PUSH
6127: FOR_TO
6128: IFFALSE 6214
// begin vc_chassis := us_heavy_tracked ;
6130: LD_ADDR_OWVAR 37
6134: PUSH
6135: LD_INT 4
6137: ST_TO_ADDR
// vc_engine := engine_siberite ;
6138: LD_ADDR_OWVAR 39
6142: PUSH
6143: LD_INT 3
6145: ST_TO_ADDR
// vc_control := control_computer ;
6146: LD_ADDR_OWVAR 38
6150: PUSH
6151: LD_INT 3
6153: ST_TO_ADDR
// vc_weapon := [ us_double_gun , us_heavy_gun ] [ Rand ( 1 , 2 ) ] ;
6154: LD_ADDR_OWVAR 40
6158: PUSH
6159: LD_INT 5
6161: PUSH
6162: LD_INT 6
6164: PUSH
6165: EMPTY
6166: LIST
6167: LIST
6168: PUSH
6169: LD_INT 1
6171: PPUSH
6172: LD_INT 2
6174: PPUSH
6175: CALL_OW 12
6179: ARRAY
6180: ST_TO_ADDR
// un := CreateVehicle ;
6181: LD_ADDR_VAR 0 4
6185: PUSH
6186: CALL_OW 45
6190: ST_TO_ADDR
// PlaceUnitArea ( un , areas [ 1 ] , false ) ;
6191: LD_VAR 0 4
6195: PPUSH
6196: LD_EXP 15
6200: PUSH
6201: LD_INT 1
6203: ARRAY
6204: PPUSH
6205: LD_INT 0
6207: PPUSH
6208: CALL_OW 49
// end ;
6212: GO 6127
6214: POP
6215: POP
// end ; 92 :
6216: GO 6705
6218: LD_INT 92
6220: DOUBLE
6221: EQUAL
6222: IFTRUE 6226
6224: GO 6555
6226: POP
// begin uc_side := 5 ;
6227: LD_ADDR_OWVAR 20
6231: PUSH
6232: LD_INT 5
6234: ST_TO_ADDR
// uc_nation := 2 ;
6235: LD_ADDR_OWVAR 21
6239: PUSH
6240: LD_INT 2
6242: ST_TO_ADDR
// filter := [ ] ;
6243: LD_ADDR_VAR 0 3
6247: PUSH
6248: EMPTY
6249: ST_TO_ADDR
// InitHc ;
6250: CALL_OW 19
// PrepareHuman ( false , 1 , l_skill ) ;
6254: LD_INT 0
6256: PPUSH
6257: LD_INT 1
6259: PPUSH
6260: LD_EXP 50
6264: PPUSH
6265: CALL_OW 380
// un := CreateHuman ;
6269: LD_ADDR_VAR 0 4
6273: PUSH
6274: CALL_OW 44
6278: ST_TO_ADDR
// filter := filter ^ un ;
6279: LD_ADDR_VAR 0 3
6283: PUSH
6284: LD_VAR 0 3
6288: PUSH
6289: LD_VAR 0 4
6293: ADD
6294: ST_TO_ADDR
// for i = 1 to [ 4 , 3 , 2 ] [ game_difficulty ] do
6295: LD_ADDR_VAR 0 2
6299: PUSH
6300: DOUBLE
6301: LD_INT 1
6303: DEC
6304: ST_TO_ADDR
6305: LD_INT 4
6307: PUSH
6308: LD_INT 3
6310: PUSH
6311: LD_INT 2
6313: PUSH
6314: EMPTY
6315: LIST
6316: LIST
6317: LIST
6318: PUSH
6319: LD_EXP 2
6323: ARRAY
6324: PUSH
6325: FOR_TO
6326: IFFALSE 6364
// begin un := CreateHumanWithClass ( 1 , l_skill ) ;
6328: LD_ADDR_VAR 0 4
6332: PUSH
6333: LD_INT 1
6335: PPUSH
6336: LD_EXP 50
6340: PPUSH
6341: CALL 7312 0 2
6345: ST_TO_ADDR
// filter := filter ^ un ;
6346: LD_ADDR_VAR 0 3
6350: PUSH
6351: LD_VAR 0 3
6355: PUSH
6356: LD_VAR 0 4
6360: ADD
6361: ST_TO_ADDR
// end ;
6362: GO 6325
6364: POP
6365: POP
// DialogueOn ;
6366: CALL_OW 6
// if GetSex ( filter [ 1 ] ) = sex_male then
6370: LD_VAR 0 3
6374: PUSH
6375: LD_INT 1
6377: ARRAY
6378: PPUSH
6379: CALL_OW 258
6383: PUSH
6384: LD_INT 1
6386: EQUAL
6387: IFFALSE 6407
// SayRadio ( filter [ 1 ] , DS-DF-1 ) else
6389: LD_VAR 0 3
6393: PUSH
6394: LD_INT 1
6396: ARRAY
6397: PPUSH
6398: LD_STRING DS-DF-1
6400: PPUSH
6401: CALL_OW 94
6405: GO 6423
// SayRadio ( filter [ 1 ] , DS-DF-f1 ) ;
6407: LD_VAR 0 3
6411: PUSH
6412: LD_INT 1
6414: ARRAY
6415: PPUSH
6416: LD_STRING DS-DF-f1
6418: PPUSH
6419: CALL_OW 94
// case Query ( DS-dezert ) of 1 :
6423: LD_STRING DS-dezert
6425: PPUSH
6426: CALL_OW 97
6430: PUSH
6431: LD_INT 1
6433: DOUBLE
6434: EQUAL
6435: IFTRUE 6439
6437: GO 6454
6439: POP
// Say ( l_cmndr , DS-DC-dis ) ; 2 :
6440: LD_EXP 49
6444: PPUSH
6445: LD_STRING DS-DC-dis
6447: PPUSH
6448: CALL_OW 88
6452: GO 6549
6454: LD_INT 2
6456: DOUBLE
6457: EQUAL
6458: IFTRUE 6462
6460: GO 6548
6462: POP
// begin Say ( l_cmndr , DS-DC-acp ) ;
6463: LD_EXP 49
6467: PPUSH
6468: LD_STRING DS-DC-acp
6470: PPUSH
6471: CALL_OW 88
// for i = 1 to filter do
6475: LD_ADDR_VAR 0 2
6479: PUSH
6480: DOUBLE
6481: LD_INT 1
6483: DEC
6484: ST_TO_ADDR
6485: LD_VAR 0 3
6489: PUSH
6490: FOR_TO
6491: IFFALSE 6544
// begin SetSide ( filter [ i ] , 8 ) ;
6493: LD_VAR 0 3
6497: PUSH
6498: LD_VAR 0 2
6502: ARRAY
6503: PPUSH
6504: LD_INT 8
6506: PPUSH
6507: CALL_OW 235
// PlaceUnitArea ( filter [ i ] , south_spawn , false ) ;
6511: LD_VAR 0 3
6515: PUSH
6516: LD_VAR 0 2
6520: ARRAY
6521: PPUSH
6522: LD_INT 4
6524: PPUSH
6525: LD_INT 0
6527: PPUSH
6528: CALL_OW 49
// CenterNowOnXY ( 111 , 121 ) ;
6532: LD_INT 111
6534: PPUSH
6535: LD_INT 121
6537: PPUSH
6538: CALL_OW 86
// end ;
6542: GO 6490
6544: POP
6545: POP
// end ; end ;
6546: GO 6549
6548: POP
// DialogueOff ;
6549: CALL_OW 7
// end ; 101 :
6553: GO 6705
6555: LD_INT 101
6557: DOUBLE
6558: EQUAL
6559: IFTRUE 6563
6561: GO 6615
6563: POP
// begin CreateCratesArea ( Rand ( 3 , 5 ) , crates_area , true ) ;
6564: LD_INT 3
6566: PPUSH
6567: LD_INT 5
6569: PPUSH
6570: CALL_OW 12
6574: PPUSH
6575: LD_INT 9
6577: PPUSH
6578: LD_INT 1
6580: PPUSH
6581: CALL_OW 55
// Wait ( 0 0$11 ) ;
6585: LD_INT 385
6587: PPUSH
6588: CALL_OW 67
// CreateCratesArea ( Rand ( 3 , 5 ) , crates_area , true ) ;
6592: LD_INT 3
6594: PPUSH
6595: LD_INT 5
6597: PPUSH
6598: CALL_OW 12
6602: PPUSH
6603: LD_INT 9
6605: PPUSH
6606: LD_INT 1
6608: PPUSH
6609: CALL_OW 55
// end ; 200 :
6613: GO 6705
6615: LD_INT 200
6617: DOUBLE
6618: EQUAL
6619: IFTRUE 6623
6621: GO 6704
6623: POP
// begin Say ( Leopold , DS-end ) ;
6624: LD_EXP 7
6628: PPUSH
6629: LD_STRING DS-end
6631: PPUSH
6632: CALL_OW 88
// if Difficulty = 3 then
6636: LD_OWVAR 67
6640: PUSH
6641: LD_INT 3
6643: EQUAL
6644: IFFALSE 6653
// SetAchievement ( ACH_DESERT ) ;
6646: LD_STRING ACH_DESERT
6648: PPUSH
6649: CALL_OW 543
// music_nat := 5 ;
6653: LD_ADDR_OWVAR 71
6657: PUSH
6658: LD_INT 5
6660: ST_TO_ADDR
// AddMedal ( med , 1 ) ;
6661: LD_STRING med
6663: PPUSH
6664: LD_INT 1
6666: PPUSH
6667: CALL_OW 101
// AddMedal ( med , 1 ) ;
6671: LD_STRING med
6673: PPUSH
6674: LD_INT 1
6676: PPUSH
6677: CALL_OW 101
// AddMedal ( med , 1 ) ;
6681: LD_STRING med
6683: PPUSH
6684: LD_INT 1
6686: PPUSH
6687: CALL_OW 101
// GiveMedals ( MAIN ) ;
6691: LD_STRING MAIN
6693: PPUSH
6694: CALL_OW 102
// YouWin ;
6698: CALL_OW 103
// end ; end ;
6702: GO 6705
6704: POP
// end ;
6705: PPOPN 6
6707: END
// on UnitGoesToRed ( un ) do begin if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) then
6708: LD_VAR 0 1
6712: PUSH
6713: LD_INT 22
6715: PUSH
6716: LD_INT 2
6718: PUSH
6719: EMPTY
6720: LIST
6721: LIST
6722: PUSH
6723: LD_INT 21
6725: PUSH
6726: LD_INT 2
6728: PUSH
6729: EMPTY
6730: LIST
6731: LIST
6732: PUSH
6733: EMPTY
6734: LIST
6735: LIST
6736: PPUSH
6737: CALL_OW 69
6741: IN
6742: IFFALSE 6867
// begin Wait ( Rand ( 0 0$03 , 0 0$06 ) ) ;
6744: LD_INT 105
6746: PPUSH
6747: LD_INT 210
6749: PPUSH
6750: CALL_OW 12
6754: PPUSH
6755: CALL_OW 67
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
6759: LD_VAR 0 1
6763: PPUSH
6764: CALL_OW 250
6768: PPUSH
6769: LD_VAR 0 1
6773: PPUSH
6774: CALL_OW 251
6778: PPUSH
6779: LD_INT 3
6781: PPUSH
6782: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
6786: LD_VAR 0 1
6790: PPUSH
6791: CALL_OW 250
6795: PPUSH
6796: LD_VAR 0 1
6800: PPUSH
6801: CALL_OW 251
6805: PPUSH
6806: LD_INT 3
6808: PPUSH
6809: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
6813: LD_VAR 0 1
6817: PPUSH
6818: CALL_OW 250
6822: PPUSH
6823: LD_VAR 0 1
6827: PPUSH
6828: CALL_OW 251
6832: PPUSH
6833: LD_INT 3
6835: PPUSH
6836: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
6840: LD_VAR 0 1
6844: PPUSH
6845: CALL_OW 250
6849: PPUSH
6850: LD_VAR 0 1
6854: PPUSH
6855: CALL_OW 251
6859: PPUSH
6860: LD_INT 3
6862: PPUSH
6863: CALL_OW 453
// end ; end ;
6867: PPOPN 1
6869: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
6870: LD_VAR 0 1
6874: PPUSH
6875: CALL 22558 0 1
// if un = fort then
6879: LD_VAR 0 1
6883: PUSH
6884: LD_INT 23
6886: EQUAL
6887: IFFALSE 6897
// fort_destroyed := true ;
6889: LD_ADDR_EXP 32
6893: PUSH
6894: LD_INT 1
6896: ST_TO_ADDR
// if un = l_cmndr then
6897: LD_VAR 0 1
6901: PUSH
6902: LD_EXP 49
6906: EQUAL
6907: IFFALSE 6917
// hero_died := true ;
6909: LD_ADDR_EXP 33
6913: PUSH
6914: LD_INT 1
6916: ST_TO_ADDR
// end ;
6917: PPOPN 1
6919: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin debug_strings := un ;
6920: LD_ADDR_OWVAR 48
6924: PUSH
6925: LD_VAR 0 1
6929: ST_TO_ADDR
// SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
6930: LD_VAR 0 1
6934: PPUSH
6935: LD_VAR 0 2
6939: PPUSH
6940: LD_VAR 0 3
6944: PPUSH
6945: CALL 22656 0 3
// end ;
6949: PPOPN 3
6951: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
6952: LD_VAR 0 1
6956: PPUSH
6957: CALL 22664 0 1
// end ; end_of_file
6961: PPOPN 1
6963: END
// export function RefreshTime ( time , bool ) ; begin
6964: LD_INT 0
6966: PPUSH
// if bool then
6967: LD_VAR 0 2
6971: IFFALSE 6989
// time := time + 0 0$01 else
6973: LD_ADDR_VAR 0 1
6977: PUSH
6978: LD_VAR 0 1
6982: PUSH
6983: LD_INT 35
6985: PLUS
6986: ST_TO_ADDR
6987: GO 7003
// time := time - 0 0$01 ;
6989: LD_ADDR_VAR 0 1
6993: PUSH
6994: LD_VAR 0 1
6998: PUSH
6999: LD_INT 35
7001: MINUS
7002: ST_TO_ADDR
// result := time ;
7003: LD_ADDR_VAR 0 3
7007: PUSH
7008: LD_VAR 0 1
7012: ST_TO_ADDR
// end ;
7013: LD_VAR 0 3
7017: RET
// export function MineExist ( side ) ; begin
7018: LD_INT 0
7020: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_siberite_mine ] ] ) > 0 then
7021: LD_INT 22
7023: PUSH
7024: LD_VAR 0 1
7028: PUSH
7029: EMPTY
7030: LIST
7031: LIST
7032: PUSH
7033: LD_INT 30
7035: PUSH
7036: LD_INT 30
7038: PUSH
7039: EMPTY
7040: LIST
7041: LIST
7042: PUSH
7043: EMPTY
7044: LIST
7045: LIST
7046: PPUSH
7047: CALL_OW 69
7051: PUSH
7052: LD_INT 0
7054: GREATER
7055: IFFALSE 7067
// result := true else
7057: LD_ADDR_VAR 0 2
7061: PUSH
7062: LD_INT 1
7064: ST_TO_ADDR
7065: GO 7075
// result := false ;
7067: LD_ADDR_VAR 0 2
7071: PUSH
7072: LD_INT 0
7074: ST_TO_ADDR
// end ;
7075: LD_VAR 0 2
7079: RET
// export function FacExist ( side ) ; begin
7080: LD_INT 0
7082: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_factory ] ] ) > 0 ;
7083: LD_ADDR_VAR 0 2
7087: PUSH
7088: LD_INT 22
7090: PUSH
7091: LD_VAR 0 1
7095: PUSH
7096: EMPTY
7097: LIST
7098: LIST
7099: PUSH
7100: LD_INT 30
7102: PUSH
7103: LD_INT 3
7105: PUSH
7106: EMPTY
7107: LIST
7108: LIST
7109: PUSH
7110: EMPTY
7111: LIST
7112: LIST
7113: PPUSH
7114: CALL_OW 69
7118: PUSH
7119: LD_INT 0
7121: GREATER
7122: ST_TO_ADDR
// end ;
7123: LD_VAR 0 2
7127: RET
// export function ConnectWithTower ( side ) ; var i , filter , tower ; begin
7128: LD_INT 0
7130: PPUSH
7131: PPUSH
7132: PPUSH
7133: PPUSH
// filter := FilterAllUnits ( [ [ f_side , side ] , [ f_control , control_remote ] , [ f_ok ] ] ) ;
7134: LD_ADDR_VAR 0 4
7138: PUSH
7139: LD_INT 22
7141: PUSH
7142: LD_VAR 0 1
7146: PUSH
7147: EMPTY
7148: LIST
7149: LIST
7150: PUSH
7151: LD_INT 33
7153: PUSH
7154: LD_INT 2
7156: PUSH
7157: EMPTY
7158: LIST
7159: LIST
7160: PUSH
7161: LD_INT 50
7163: PUSH
7164: EMPTY
7165: LIST
7166: PUSH
7167: EMPTY
7168: LIST
7169: LIST
7170: LIST
7171: PPUSH
7172: CALL_OW 69
7176: ST_TO_ADDR
// tower := FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , ar_control_tower ] ] ) ;
7177: LD_ADDR_VAR 0 5
7181: PUSH
7182: LD_INT 22
7184: PUSH
7185: LD_VAR 0 1
7189: PUSH
7190: EMPTY
7191: LIST
7192: LIST
7193: PUSH
7194: LD_INT 34
7196: PUSH
7197: LD_INT 31
7199: PUSH
7200: EMPTY
7201: LIST
7202: LIST
7203: PUSH
7204: EMPTY
7205: LIST
7206: LIST
7207: PPUSH
7208: CALL_OW 69
7212: ST_TO_ADDR
// if tower > 0 and filter > 0 then
7213: LD_VAR 0 5
7217: PUSH
7218: LD_INT 0
7220: GREATER
7221: PUSH
7222: LD_VAR 0 4
7226: PUSH
7227: LD_INT 0
7229: GREATER
7230: AND
7231: IFFALSE 7307
// for i = 1 to filter do
7233: LD_ADDR_VAR 0 3
7237: PUSH
7238: DOUBLE
7239: LD_INT 1
7241: DEC
7242: ST_TO_ADDR
7243: LD_VAR 0 4
7247: PUSH
7248: FOR_TO
7249: IFFALSE 7305
// if not IsControledBy ( filter [ i ] ) then
7251: LD_VAR 0 4
7255: PUSH
7256: LD_VAR 0 3
7260: ARRAY
7261: PPUSH
7262: CALL_OW 312
7266: NOT
7267: IFFALSE 7303
// ComLinkTo ( filter [ i ] , tower [ Rand ( 1 , tower ) ] ) ;
7269: LD_VAR 0 4
7273: PUSH
7274: LD_VAR 0 3
7278: ARRAY
7279: PPUSH
7280: LD_VAR 0 5
7284: PUSH
7285: LD_INT 1
7287: PPUSH
7288: LD_VAR 0 5
7292: PPUSH
7293: CALL_OW 12
7297: ARRAY
7298: PPUSH
7299: CALL_OW 135
7303: GO 7248
7305: POP
7306: POP
// end ;
7307: LD_VAR 0 2
7311: RET
// export function CreateHumanWithClass ( clas , lvl ) ; var skill_com , skill_eng , skill_mech , skill_sci , bonus ; begin
7312: LD_INT 0
7314: PPUSH
7315: PPUSH
7316: PPUSH
7317: PPUSH
7318: PPUSH
7319: PPUSH
// hc_class := clas ;
7320: LD_ADDR_OWVAR 28
7324: PUSH
7325: LD_VAR 0 1
7329: ST_TO_ADDR
// skill_com := ( lvl + Rand ( - 1 , 1 ) ) ;
7330: LD_ADDR_VAR 0 4
7334: PUSH
7335: LD_VAR 0 2
7339: PUSH
7340: LD_INT 1
7342: NEG
7343: PPUSH
7344: LD_INT 1
7346: PPUSH
7347: CALL_OW 12
7351: PLUS
7352: ST_TO_ADDR
// skill_eng := ( lvl + Rand ( - 1 , 1 ) ) ;
7353: LD_ADDR_VAR 0 5
7357: PUSH
7358: LD_VAR 0 2
7362: PUSH
7363: LD_INT 1
7365: NEG
7366: PPUSH
7367: LD_INT 1
7369: PPUSH
7370: CALL_OW 12
7374: PLUS
7375: ST_TO_ADDR
// skill_mech := ( lvl + Rand ( - 1 , 1 ) ) ;
7376: LD_ADDR_VAR 0 6
7380: PUSH
7381: LD_VAR 0 2
7385: PUSH
7386: LD_INT 1
7388: NEG
7389: PPUSH
7390: LD_INT 1
7392: PPUSH
7393: CALL_OW 12
7397: PLUS
7398: ST_TO_ADDR
// skill_sci := ( lvl + Rand ( - 1 , 1 ) ) ;
7399: LD_ADDR_VAR 0 7
7403: PUSH
7404: LD_VAR 0 2
7408: PUSH
7409: LD_INT 1
7411: NEG
7412: PPUSH
7413: LD_INT 1
7415: PPUSH
7416: CALL_OW 12
7420: PLUS
7421: ST_TO_ADDR
// if clas = 1 or clas = 9 or clas = class_sniper or clas = class_mortar then
7422: LD_VAR 0 1
7426: PUSH
7427: LD_INT 1
7429: EQUAL
7430: PUSH
7431: LD_VAR 0 1
7435: PUSH
7436: LD_INT 9
7438: EQUAL
7439: OR
7440: PUSH
7441: LD_VAR 0 1
7445: PUSH
7446: LD_INT 5
7448: EQUAL
7449: OR
7450: PUSH
7451: LD_VAR 0 1
7455: PUSH
7456: LD_INT 8
7458: EQUAL
7459: OR
7460: IFFALSE 7485
// bonus := [ 2 , 0 , 0 , 0 ] ;
7462: LD_ADDR_VAR 0 8
7466: PUSH
7467: LD_INT 2
7469: PUSH
7470: LD_INT 0
7472: PUSH
7473: LD_INT 0
7475: PUSH
7476: LD_INT 0
7478: PUSH
7479: EMPTY
7480: LIST
7481: LIST
7482: LIST
7483: LIST
7484: ST_TO_ADDR
// if clas = 2 then
7485: LD_VAR 0 1
7489: PUSH
7490: LD_INT 2
7492: EQUAL
7493: IFFALSE 7518
// bonus := [ 0 , 2 , 0 , 0 ] ;
7495: LD_ADDR_VAR 0 8
7499: PUSH
7500: LD_INT 0
7502: PUSH
7503: LD_INT 2
7505: PUSH
7506: LD_INT 0
7508: PUSH
7509: LD_INT 0
7511: PUSH
7512: EMPTY
7513: LIST
7514: LIST
7515: LIST
7516: LIST
7517: ST_TO_ADDR
// if clas = 3 then
7518: LD_VAR 0 1
7522: PUSH
7523: LD_INT 3
7525: EQUAL
7526: IFFALSE 7551
// bonus := [ 0 , 0 , 2 , 0 ] ;
7528: LD_ADDR_VAR 0 8
7532: PUSH
7533: LD_INT 0
7535: PUSH
7536: LD_INT 0
7538: PUSH
7539: LD_INT 2
7541: PUSH
7542: LD_INT 0
7544: PUSH
7545: EMPTY
7546: LIST
7547: LIST
7548: LIST
7549: LIST
7550: ST_TO_ADDR
// if clas = 4 then
7551: LD_VAR 0 1
7555: PUSH
7556: LD_INT 4
7558: EQUAL
7559: IFFALSE 7584
// bonus := [ 0 , 0 , 0 , 2 ] ;
7561: LD_ADDR_VAR 0 8
7565: PUSH
7566: LD_INT 0
7568: PUSH
7569: LD_INT 0
7571: PUSH
7572: LD_INT 0
7574: PUSH
7575: LD_INT 2
7577: PUSH
7578: EMPTY
7579: LIST
7580: LIST
7581: LIST
7582: LIST
7583: ST_TO_ADDR
// if clas > 4 and clas <> 9 and clas <> class_sniper and clas <> class_mortar then
7584: LD_VAR 0 1
7588: PUSH
7589: LD_INT 4
7591: GREATER
7592: PUSH
7593: LD_VAR 0 1
7597: PUSH
7598: LD_INT 9
7600: NONEQUAL
7601: AND
7602: PUSH
7603: LD_VAR 0 1
7607: PUSH
7608: LD_INT 5
7610: NONEQUAL
7611: AND
7612: PUSH
7613: LD_VAR 0 1
7617: PUSH
7618: LD_INT 8
7620: NONEQUAL
7621: AND
7622: IFFALSE 7647
// bonus := [ 0 , 0 , 0 , 0 ] ;
7624: LD_ADDR_VAR 0 8
7628: PUSH
7629: LD_INT 0
7631: PUSH
7632: LD_INT 0
7634: PUSH
7635: LD_INT 0
7637: PUSH
7638: LD_INT 0
7640: PUSH
7641: EMPTY
7642: LIST
7643: LIST
7644: LIST
7645: LIST
7646: ST_TO_ADDR
// hc_basic_skills := [ Rand ( 0 , 2 ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) ] ;
7647: LD_ADDR_OWVAR 30
7651: PUSH
7652: LD_INT 0
7654: PPUSH
7655: LD_INT 2
7657: PPUSH
7658: CALL_OW 12
7662: PUSH
7663: LD_INT 0
7665: PPUSH
7666: LD_INT 2
7668: PPUSH
7669: CALL_OW 12
7673: PUSH
7674: LD_INT 0
7676: PPUSH
7677: LD_INT 2
7679: PPUSH
7680: CALL_OW 12
7684: PUSH
7685: LD_INT 0
7687: PPUSH
7688: LD_INT 2
7690: PPUSH
7691: CALL_OW 12
7695: PUSH
7696: EMPTY
7697: LIST
7698: LIST
7699: LIST
7700: LIST
7701: ST_TO_ADDR
// hc_skills := [ skill_com + bonus [ 1 ] , skill_eng + bonus [ 2 ] , skill_mech + bonus [ 3 ] , skill_sci + bonus [ 4 ] ] ;
7702: LD_ADDR_OWVAR 31
7706: PUSH
7707: LD_VAR 0 4
7711: PUSH
7712: LD_VAR 0 8
7716: PUSH
7717: LD_INT 1
7719: ARRAY
7720: PLUS
7721: PUSH
7722: LD_VAR 0 5
7726: PUSH
7727: LD_VAR 0 8
7731: PUSH
7732: LD_INT 2
7734: ARRAY
7735: PLUS
7736: PUSH
7737: LD_VAR 0 6
7741: PUSH
7742: LD_VAR 0 8
7746: PUSH
7747: LD_INT 3
7749: ARRAY
7750: PLUS
7751: PUSH
7752: LD_VAR 0 7
7756: PUSH
7757: LD_VAR 0 8
7761: PUSH
7762: LD_INT 4
7764: ARRAY
7765: PLUS
7766: PUSH
7767: EMPTY
7768: LIST
7769: LIST
7770: LIST
7771: LIST
7772: ST_TO_ADDR
// hc_sex := Rand ( sex_male , sex_female ) ;
7773: LD_ADDR_OWVAR 27
7777: PUSH
7778: LD_INT 1
7780: PPUSH
7781: LD_INT 2
7783: PPUSH
7784: CALL_OW 12
7788: ST_TO_ADDR
// hc_gallery :=  ;
7789: LD_ADDR_OWVAR 33
7793: PUSH
7794: LD_STRING 
7796: ST_TO_ADDR
// hc_attr := [ Rand ( 8 , 12 ) , Rand ( 9 , 11 ) ] ;
7797: LD_ADDR_OWVAR 29
7801: PUSH
7802: LD_INT 8
7804: PPUSH
7805: LD_INT 12
7807: PPUSH
7808: CALL_OW 12
7812: PUSH
7813: LD_INT 9
7815: PPUSH
7816: LD_INT 11
7818: PPUSH
7819: CALL_OW 12
7823: PUSH
7824: EMPTY
7825: LIST
7826: LIST
7827: ST_TO_ADDR
// hc_name :=  ;
7828: LD_ADDR_OWVAR 26
7832: PUSH
7833: LD_STRING 
7835: ST_TO_ADDR
// result := CreateHuman ;
7836: LD_ADDR_VAR 0 3
7840: PUSH
7841: CALL_OW 44
7845: ST_TO_ADDR
// end ;
7846: LD_VAR 0 3
7850: RET
// export function GetSpeed ( unit ) ; begin
7851: LD_INT 0
7853: PPUSH
// result := GetProperties ( unit ) [ 1 ] ;
7854: LD_ADDR_VAR 0 2
7858: PUSH
7859: LD_VAR 0 1
7863: PPUSH
7864: CALL_OW 464
7868: PUSH
7869: LD_INT 1
7871: ARRAY
7872: ST_TO_ADDR
// end ;
7873: LD_VAR 0 2
7877: RET
// export function CreateNature ( area , num1 , num2 , num3 , num4 ) ; var l , apeman , tiger , bird , horse ; begin
7878: LD_INT 0
7880: PPUSH
7881: PPUSH
7882: PPUSH
7883: PPUSH
7884: PPUSH
7885: PPUSH
// uc_nation = nation_nature ;
7886: LD_ADDR_OWVAR 21
7890: PUSH
7891: LD_INT 0
7893: ST_TO_ADDR
// uc_side = 0 ;
7894: LD_ADDR_OWVAR 20
7898: PUSH
7899: LD_INT 0
7901: ST_TO_ADDR
// l = 0 ;
7902: LD_ADDR_VAR 0 7
7906: PUSH
7907: LD_INT 0
7909: ST_TO_ADDR
// repeat begin uc_direction = Rand ( 0 , 5 ) ;
7910: LD_ADDR_OWVAR 24
7914: PUSH
7915: LD_INT 0
7917: PPUSH
7918: LD_INT 5
7920: PPUSH
7921: CALL_OW 12
7925: ST_TO_ADDR
// hc_agressivity = Rand ( - 5 , 0 ) ;
7926: LD_ADDR_OWVAR 35
7930: PUSH
7931: LD_INT 5
7933: NEG
7934: PPUSH
7935: LD_INT 0
7937: PPUSH
7938: CALL_OW 12
7942: ST_TO_ADDR
// hc_gallery =  ;
7943: LD_ADDR_OWVAR 33
7947: PUSH
7948: LD_STRING 
7950: ST_TO_ADDR
// hc_class = class_apeman ;
7951: LD_ADDR_OWVAR 28
7955: PUSH
7956: LD_INT 12
7958: ST_TO_ADDR
// hc_attr = [ Rand ( 11 , 13 ) , Rand ( 10 , 11 ) ] ;
7959: LD_ADDR_OWVAR 29
7963: PUSH
7964: LD_INT 11
7966: PPUSH
7967: LD_INT 13
7969: PPUSH
7970: CALL_OW 12
7974: PUSH
7975: LD_INT 10
7977: PPUSH
7978: LD_INT 11
7980: PPUSH
7981: CALL_OW 12
7985: PUSH
7986: EMPTY
7987: LIST
7988: LIST
7989: ST_TO_ADDR
// hc_sex = sex_male ;
7990: LD_ADDR_OWVAR 27
7994: PUSH
7995: LD_INT 1
7997: ST_TO_ADDR
// hc_skills = [ Rand ( 0 , 2 ) , 0 , 0 , 0 ] ;
7998: LD_ADDR_OWVAR 31
8002: PUSH
8003: LD_INT 0
8005: PPUSH
8006: LD_INT 2
8008: PPUSH
8009: CALL_OW 12
8013: PUSH
8014: LD_INT 0
8016: PUSH
8017: LD_INT 0
8019: PUSH
8020: LD_INT 0
8022: PUSH
8023: EMPTY
8024: LIST
8025: LIST
8026: LIST
8027: LIST
8028: ST_TO_ADDR
// apeman = CreateHuman ;
8029: LD_ADDR_VAR 0 8
8033: PUSH
8034: CALL_OW 44
8038: ST_TO_ADDR
// PlaceUnitArea ( apeman , area , false ) ;
8039: LD_VAR 0 8
8043: PPUSH
8044: LD_VAR 0 1
8048: PPUSH
8049: LD_INT 0
8051: PPUSH
8052: CALL_OW 49
// l = l + 1 ;
8056: LD_ADDR_VAR 0 7
8060: PUSH
8061: LD_VAR 0 7
8065: PUSH
8066: LD_INT 1
8068: PLUS
8069: ST_TO_ADDR
// end until l = num1 ;
8070: LD_VAR 0 7
8074: PUSH
8075: LD_VAR 0 2
8079: EQUAL
8080: IFFALSE 7910
// l = 0 ;
8082: LD_ADDR_VAR 0 7
8086: PUSH
8087: LD_INT 0
8089: ST_TO_ADDR
// repeat begin hc_agressivity = Rand ( 0 , 25 ) ;
8090: LD_ADDR_OWVAR 35
8094: PUSH
8095: LD_INT 0
8097: PPUSH
8098: LD_INT 25
8100: PPUSH
8101: CALL_OW 12
8105: ST_TO_ADDR
// hc_class = class_tiger ;
8106: LD_ADDR_OWVAR 28
8110: PUSH
8111: LD_INT 14
8113: ST_TO_ADDR
// hc_sex = sex_male ;
8114: LD_ADDR_OWVAR 27
8118: PUSH
8119: LD_INT 1
8121: ST_TO_ADDR
// hc_gallery = sandnature ;
8122: LD_ADDR_OWVAR 33
8126: PUSH
8127: LD_STRING sandnature
8129: ST_TO_ADDR
// hc_face_number = 3 ;
8130: LD_ADDR_OWVAR 34
8134: PUSH
8135: LD_INT 3
8137: ST_TO_ADDR
// tiger = CreateHuman ;
8138: LD_ADDR_VAR 0 9
8142: PUSH
8143: CALL_OW 44
8147: ST_TO_ADDR
// PlaceUnitArea ( tiger , area , false ) ;
8148: LD_VAR 0 9
8152: PPUSH
8153: LD_VAR 0 1
8157: PPUSH
8158: LD_INT 0
8160: PPUSH
8161: CALL_OW 49
// l = l + 1 ;
8165: LD_ADDR_VAR 0 7
8169: PUSH
8170: LD_VAR 0 7
8174: PUSH
8175: LD_INT 1
8177: PLUS
8178: ST_TO_ADDR
// end until l = num2 ;
8179: LD_VAR 0 7
8183: PUSH
8184: LD_VAR 0 3
8188: EQUAL
8189: IFFALSE 8090
// l = 0 ;
8191: LD_ADDR_VAR 0 7
8195: PUSH
8196: LD_INT 0
8198: ST_TO_ADDR
// repeat begin hc_class = class_phororhacos ;
8199: LD_ADDR_OWVAR 28
8203: PUSH
8204: LD_INT 18
8206: ST_TO_ADDR
// hc_gallery = sandnature ;
8207: LD_ADDR_OWVAR 33
8211: PUSH
8212: LD_STRING sandnature
8214: ST_TO_ADDR
// hc_face_number = 1 ;
8215: LD_ADDR_OWVAR 34
8219: PUSH
8220: LD_INT 1
8222: ST_TO_ADDR
// bird = CreateHuman ;
8223: LD_ADDR_VAR 0 10
8227: PUSH
8228: CALL_OW 44
8232: ST_TO_ADDR
// PlaceUnitAnywhere ( bird , false ) ;
8233: LD_VAR 0 10
8237: PPUSH
8238: LD_INT 0
8240: PPUSH
8241: CALL_OW 51
// l = l + 1 ;
8245: LD_ADDR_VAR 0 7
8249: PUSH
8250: LD_VAR 0 7
8254: PUSH
8255: LD_INT 1
8257: PLUS
8258: ST_TO_ADDR
// end until l = num3 ;
8259: LD_VAR 0 7
8263: PUSH
8264: LD_VAR 0 4
8268: EQUAL
8269: IFFALSE 8199
// l = 0 ;
8271: LD_ADDR_VAR 0 7
8275: PUSH
8276: LD_INT 0
8278: ST_TO_ADDR
// repeat begin hc_class = 21 ;
8279: LD_ADDR_OWVAR 28
8283: PUSH
8284: LD_INT 21
8286: ST_TO_ADDR
// hc_gallery = sandnature ;
8287: LD_ADDR_OWVAR 33
8291: PUSH
8292: LD_STRING sandnature
8294: ST_TO_ADDR
// hc_face_number = 5 ;
8295: LD_ADDR_OWVAR 34
8299: PUSH
8300: LD_INT 5
8302: ST_TO_ADDR
// horse := CreateHuman ;
8303: LD_ADDR_VAR 0 11
8307: PUSH
8308: CALL_OW 44
8312: ST_TO_ADDR
// PlaceUnitArea ( horse , area , false ) ;
8313: LD_VAR 0 11
8317: PPUSH
8318: LD_VAR 0 1
8322: PPUSH
8323: LD_INT 0
8325: PPUSH
8326: CALL_OW 49
// l = l + 1 ;
8330: LD_ADDR_VAR 0 7
8334: PUSH
8335: LD_VAR 0 7
8339: PUSH
8340: LD_INT 1
8342: PLUS
8343: ST_TO_ADDR
// end until l = num4 ;
8344: LD_VAR 0 7
8348: PUSH
8349: LD_VAR 0 5
8353: EQUAL
8354: IFFALSE 8279
// end ;
8356: LD_VAR 0 6
8360: RET
// export function PrepareComm ; begin
8361: LD_INT 0
8363: PPUSH
// uc_side := 1 ;
8364: LD_ADDR_OWVAR 20
8368: PUSH
8369: LD_INT 1
8371: ST_TO_ADDR
// uc_nation := 1 ;
8372: LD_ADDR_OWVAR 21
8376: PUSH
8377: LD_INT 1
8379: ST_TO_ADDR
// hc_gallery :=  ;
8380: LD_ADDR_OWVAR 33
8384: PUSH
8385: LD_STRING 
8387: ST_TO_ADDR
// hc_name :=  ;
8388: LD_ADDR_OWVAR 26
8392: PUSH
8393: LD_STRING 
8395: ST_TO_ADDR
// hc_class := 1 ;
8396: LD_ADDR_OWVAR 28
8400: PUSH
8401: LD_INT 1
8403: ST_TO_ADDR
// hc_sex := sex_male ;
8404: LD_ADDR_OWVAR 27
8408: PUSH
8409: LD_INT 1
8411: ST_TO_ADDR
// am_comander := CreateHuman ;
8412: LD_ADDR_EXP 46
8416: PUSH
8417: CALL_OW 44
8421: ST_TO_ADDR
// uc_side := 3 ;
8422: LD_ADDR_OWVAR 20
8426: PUSH
8427: LD_INT 3
8429: ST_TO_ADDR
// uc_nation := 3 ;
8430: LD_ADDR_OWVAR 21
8434: PUSH
8435: LD_INT 3
8437: ST_TO_ADDR
// ru_comander := CreateHuman ;
8438: LD_ADDR_EXP 47
8442: PUSH
8443: CALL_OW 44
8447: ST_TO_ADDR
// uc_side := 2 ;
8448: LD_ADDR_OWVAR 20
8452: PUSH
8453: LD_INT 2
8455: ST_TO_ADDR
// uc_nation := 2 ;
8456: LD_ADDR_OWVAR 21
8460: PUSH
8461: LD_INT 2
8463: ST_TO_ADDR
// hc_name := Heike Steyer ;
8464: LD_ADDR_OWVAR 26
8468: PUSH
8469: LD_STRING Heike Steyer
8471: ST_TO_ADDR
// hc_sex := sex_female ;
8472: LD_ADDR_OWVAR 27
8476: PUSH
8477: LD_INT 2
8479: ST_TO_ADDR
// hc_gallery := sandar ;
8480: LD_ADDR_OWVAR 33
8484: PUSH
8485: LD_STRING sandar
8487: ST_TO_ADDR
// hc_face_number := 14 ;
8488: LD_ADDR_OWVAR 34
8492: PUSH
8493: LD_INT 14
8495: ST_TO_ADDR
// ar_comander := CreateHuman ;
8496: LD_ADDR_EXP 48
8500: PUSH
8501: CALL_OW 44
8505: ST_TO_ADDR
// end ;
8506: LD_VAR 0 1
8510: RET
// export function SpeedFilter ( filter , speed ) ; var list , i ; begin
8511: LD_INT 0
8513: PPUSH
8514: PPUSH
8515: PPUSH
// list := [ ] ;
8516: LD_ADDR_VAR 0 4
8520: PUSH
8521: EMPTY
8522: ST_TO_ADDR
// for i = 1 to filter do
8523: LD_ADDR_VAR 0 5
8527: PUSH
8528: DOUBLE
8529: LD_INT 1
8531: DEC
8532: ST_TO_ADDR
8533: LD_VAR 0 1
8537: PUSH
8538: FOR_TO
8539: IFFALSE 8588
// if GetSpeed ( filter [ i ] ) < speed then
8541: LD_VAR 0 1
8545: PUSH
8546: LD_VAR 0 5
8550: ARRAY
8551: PPUSH
8552: CALL 7851 0 1
8556: PUSH
8557: LD_VAR 0 2
8561: LESS
8562: IFFALSE 8586
// list := list ^ filter [ i ] ;
8564: LD_ADDR_VAR 0 4
8568: PUSH
8569: LD_VAR 0 4
8573: PUSH
8574: LD_VAR 0 1
8578: PUSH
8579: LD_VAR 0 5
8583: ARRAY
8584: ADD
8585: ST_TO_ADDR
8586: GO 8538
8588: POP
8589: POP
// result := list ;
8590: LD_ADDR_VAR 0 3
8594: PUSH
8595: LD_VAR 0 4
8599: ST_TO_ADDR
// end ; end_of_file
8600: LD_VAR 0 3
8604: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
8605: LD_INT 0
8607: PPUSH
// ar_miner := 81 ;
8608: LD_ADDR_EXP 59
8612: PUSH
8613: LD_INT 81
8615: ST_TO_ADDR
// ar_crane := 88 ;
8616: LD_ADDR_EXP 58
8620: PUSH
8621: LD_INT 88
8623: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
8624: LD_ADDR_EXP 53
8628: PUSH
8629: LD_INT 89
8631: ST_TO_ADDR
// us_hack := 99 ;
8632: LD_ADDR_EXP 54
8636: PUSH
8637: LD_INT 99
8639: ST_TO_ADDR
// us_artillery := 97 ;
8640: LD_ADDR_EXP 55
8644: PUSH
8645: LD_INT 97
8647: ST_TO_ADDR
// ar_bio_bomb := 91 ;
8648: LD_ADDR_EXP 56
8652: PUSH
8653: LD_INT 91
8655: ST_TO_ADDR
// ar_mortar := 92 ;
8656: LD_ADDR_EXP 57
8660: PUSH
8661: LD_INT 92
8663: ST_TO_ADDR
// ru_radar := 98 ;
8664: LD_ADDR_EXP 52
8668: PUSH
8669: LD_INT 98
8671: ST_TO_ADDR
// tech_Artillery := 80 ;
8672: LD_ADDR_EXP 60
8676: PUSH
8677: LD_INT 80
8679: ST_TO_ADDR
// tech_RadMat := 81 ;
8680: LD_ADDR_EXP 61
8684: PUSH
8685: LD_INT 81
8687: ST_TO_ADDR
// tech_BasicTools := 82 ;
8688: LD_ADDR_EXP 62
8692: PUSH
8693: LD_INT 82
8695: ST_TO_ADDR
// tech_Cargo := 83 ;
8696: LD_ADDR_EXP 63
8700: PUSH
8701: LD_INT 83
8703: ST_TO_ADDR
// tech_Track := 84 ;
8704: LD_ADDR_EXP 64
8708: PUSH
8709: LD_INT 84
8711: ST_TO_ADDR
// tech_Crane := 85 ;
8712: LD_ADDR_EXP 65
8716: PUSH
8717: LD_INT 85
8719: ST_TO_ADDR
// tech_Bulldozer := 86 ;
8720: LD_ADDR_EXP 66
8724: PUSH
8725: LD_INT 86
8727: ST_TO_ADDR
// tech_Hovercraft := 87 ;
8728: LD_ADDR_EXP 67
8732: PUSH
8733: LD_INT 87
8735: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
8736: LD_ADDR_EXP 68
8740: PUSH
8741: LD_INT 88
8743: ST_TO_ADDR
// class_mastodont := 31 ;
8744: LD_ADDR_EXP 69
8748: PUSH
8749: LD_INT 31
8751: ST_TO_ADDR
// class_horse := 21 ;
8752: LD_ADDR_EXP 70
8756: PUSH
8757: LD_INT 21
8759: ST_TO_ADDR
// end ;
8760: LD_VAR 0 1
8764: RET
// every 1 do
8765: GO 8767
8767: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
8768: CALL 8605 0 0
8772: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
8773: LD_INT 0
8775: PPUSH
// if p2 = 100 then
8776: LD_VAR 0 2
8780: PUSH
8781: LD_INT 100
8783: EQUAL
8784: IFFALSE 9787
// begin if not StreamModeActive then
8786: LD_EXP 71
8790: NOT
8791: IFFALSE 8801
// StreamModeActive := true ;
8793: LD_ADDR_EXP 71
8797: PUSH
8798: LD_INT 1
8800: ST_TO_ADDR
// if p3 = 0 then
8801: LD_VAR 0 3
8805: PUSH
8806: LD_INT 0
8808: EQUAL
8809: IFFALSE 8815
// InitStreamMode ;
8811: CALL 9947 0 0
// if p3 = 1 then
8815: LD_VAR 0 3
8819: PUSH
8820: LD_INT 1
8822: EQUAL
8823: IFFALSE 8833
// sRocket := true ;
8825: LD_ADDR_EXP 76
8829: PUSH
8830: LD_INT 1
8832: ST_TO_ADDR
// if p3 = 2 then
8833: LD_VAR 0 3
8837: PUSH
8838: LD_INT 2
8840: EQUAL
8841: IFFALSE 8851
// sSpeed := true ;
8843: LD_ADDR_EXP 75
8847: PUSH
8848: LD_INT 1
8850: ST_TO_ADDR
// if p3 = 3 then
8851: LD_VAR 0 3
8855: PUSH
8856: LD_INT 3
8858: EQUAL
8859: IFFALSE 8869
// sEngine := true ;
8861: LD_ADDR_EXP 77
8865: PUSH
8866: LD_INT 1
8868: ST_TO_ADDR
// if p3 = 4 then
8869: LD_VAR 0 3
8873: PUSH
8874: LD_INT 4
8876: EQUAL
8877: IFFALSE 8887
// sSpec := true ;
8879: LD_ADDR_EXP 74
8883: PUSH
8884: LD_INT 1
8886: ST_TO_ADDR
// if p3 = 5 then
8887: LD_VAR 0 3
8891: PUSH
8892: LD_INT 5
8894: EQUAL
8895: IFFALSE 8905
// sLevel := true ;
8897: LD_ADDR_EXP 78
8901: PUSH
8902: LD_INT 1
8904: ST_TO_ADDR
// if p3 = 6 then
8905: LD_VAR 0 3
8909: PUSH
8910: LD_INT 6
8912: EQUAL
8913: IFFALSE 8923
// sArmoury := true ;
8915: LD_ADDR_EXP 79
8919: PUSH
8920: LD_INT 1
8922: ST_TO_ADDR
// if p3 = 7 then
8923: LD_VAR 0 3
8927: PUSH
8928: LD_INT 7
8930: EQUAL
8931: IFFALSE 8941
// sRadar := true ;
8933: LD_ADDR_EXP 80
8937: PUSH
8938: LD_INT 1
8940: ST_TO_ADDR
// if p3 = 8 then
8941: LD_VAR 0 3
8945: PUSH
8946: LD_INT 8
8948: EQUAL
8949: IFFALSE 8959
// sBunker := true ;
8951: LD_ADDR_EXP 81
8955: PUSH
8956: LD_INT 1
8958: ST_TO_ADDR
// if p3 = 9 then
8959: LD_VAR 0 3
8963: PUSH
8964: LD_INT 9
8966: EQUAL
8967: IFFALSE 8977
// sHack := true ;
8969: LD_ADDR_EXP 82
8973: PUSH
8974: LD_INT 1
8976: ST_TO_ADDR
// if p3 = 10 then
8977: LD_VAR 0 3
8981: PUSH
8982: LD_INT 10
8984: EQUAL
8985: IFFALSE 8995
// sFire := true ;
8987: LD_ADDR_EXP 83
8991: PUSH
8992: LD_INT 1
8994: ST_TO_ADDR
// if p3 = 11 then
8995: LD_VAR 0 3
8999: PUSH
9000: LD_INT 11
9002: EQUAL
9003: IFFALSE 9013
// sRefresh := true ;
9005: LD_ADDR_EXP 84
9009: PUSH
9010: LD_INT 1
9012: ST_TO_ADDR
// if p3 = 12 then
9013: LD_VAR 0 3
9017: PUSH
9018: LD_INT 12
9020: EQUAL
9021: IFFALSE 9031
// sExp := true ;
9023: LD_ADDR_EXP 85
9027: PUSH
9028: LD_INT 1
9030: ST_TO_ADDR
// if p3 = 13 then
9031: LD_VAR 0 3
9035: PUSH
9036: LD_INT 13
9038: EQUAL
9039: IFFALSE 9049
// sDepot := true ;
9041: LD_ADDR_EXP 86
9045: PUSH
9046: LD_INT 1
9048: ST_TO_ADDR
// if p3 = 14 then
9049: LD_VAR 0 3
9053: PUSH
9054: LD_INT 14
9056: EQUAL
9057: IFFALSE 9067
// sFlag := true ;
9059: LD_ADDR_EXP 87
9063: PUSH
9064: LD_INT 1
9066: ST_TO_ADDR
// if p3 = 15 then
9067: LD_VAR 0 3
9071: PUSH
9072: LD_INT 15
9074: EQUAL
9075: IFFALSE 9085
// sKamikadze := true ;
9077: LD_ADDR_EXP 95
9081: PUSH
9082: LD_INT 1
9084: ST_TO_ADDR
// if p3 = 16 then
9085: LD_VAR 0 3
9089: PUSH
9090: LD_INT 16
9092: EQUAL
9093: IFFALSE 9103
// sTroll := true ;
9095: LD_ADDR_EXP 96
9099: PUSH
9100: LD_INT 1
9102: ST_TO_ADDR
// if p3 = 17 then
9103: LD_VAR 0 3
9107: PUSH
9108: LD_INT 17
9110: EQUAL
9111: IFFALSE 9121
// sSlow := true ;
9113: LD_ADDR_EXP 97
9117: PUSH
9118: LD_INT 1
9120: ST_TO_ADDR
// if p3 = 18 then
9121: LD_VAR 0 3
9125: PUSH
9126: LD_INT 18
9128: EQUAL
9129: IFFALSE 9139
// sLack := true ;
9131: LD_ADDR_EXP 98
9135: PUSH
9136: LD_INT 1
9138: ST_TO_ADDR
// if p3 = 19 then
9139: LD_VAR 0 3
9143: PUSH
9144: LD_INT 19
9146: EQUAL
9147: IFFALSE 9157
// sTank := true ;
9149: LD_ADDR_EXP 100
9153: PUSH
9154: LD_INT 1
9156: ST_TO_ADDR
// if p3 = 20 then
9157: LD_VAR 0 3
9161: PUSH
9162: LD_INT 20
9164: EQUAL
9165: IFFALSE 9175
// sRemote := true ;
9167: LD_ADDR_EXP 101
9171: PUSH
9172: LD_INT 1
9174: ST_TO_ADDR
// if p3 = 21 then
9175: LD_VAR 0 3
9179: PUSH
9180: LD_INT 21
9182: EQUAL
9183: IFFALSE 9193
// sPowell := true ;
9185: LD_ADDR_EXP 102
9189: PUSH
9190: LD_INT 1
9192: ST_TO_ADDR
// if p3 = 22 then
9193: LD_VAR 0 3
9197: PUSH
9198: LD_INT 22
9200: EQUAL
9201: IFFALSE 9211
// sTeleport := true ;
9203: LD_ADDR_EXP 105
9207: PUSH
9208: LD_INT 1
9210: ST_TO_ADDR
// if p3 = 23 then
9211: LD_VAR 0 3
9215: PUSH
9216: LD_INT 23
9218: EQUAL
9219: IFFALSE 9229
// sOilTower := true ;
9221: LD_ADDR_EXP 107
9225: PUSH
9226: LD_INT 1
9228: ST_TO_ADDR
// if p3 = 24 then
9229: LD_VAR 0 3
9233: PUSH
9234: LD_INT 24
9236: EQUAL
9237: IFFALSE 9247
// sShovel := true ;
9239: LD_ADDR_EXP 108
9243: PUSH
9244: LD_INT 1
9246: ST_TO_ADDR
// if p3 = 25 then
9247: LD_VAR 0 3
9251: PUSH
9252: LD_INT 25
9254: EQUAL
9255: IFFALSE 9265
// sSheik := true ;
9257: LD_ADDR_EXP 109
9261: PUSH
9262: LD_INT 1
9264: ST_TO_ADDR
// if p3 = 26 then
9265: LD_VAR 0 3
9269: PUSH
9270: LD_INT 26
9272: EQUAL
9273: IFFALSE 9283
// sEarthquake := true ;
9275: LD_ADDR_EXP 111
9279: PUSH
9280: LD_INT 1
9282: ST_TO_ADDR
// if p3 = 27 then
9283: LD_VAR 0 3
9287: PUSH
9288: LD_INT 27
9290: EQUAL
9291: IFFALSE 9301
// sAI := true ;
9293: LD_ADDR_EXP 112
9297: PUSH
9298: LD_INT 1
9300: ST_TO_ADDR
// if p3 = 28 then
9301: LD_VAR 0 3
9305: PUSH
9306: LD_INT 28
9308: EQUAL
9309: IFFALSE 9319
// sCargo := true ;
9311: LD_ADDR_EXP 115
9315: PUSH
9316: LD_INT 1
9318: ST_TO_ADDR
// if p3 = 29 then
9319: LD_VAR 0 3
9323: PUSH
9324: LD_INT 29
9326: EQUAL
9327: IFFALSE 9337
// sDLaser := true ;
9329: LD_ADDR_EXP 116
9333: PUSH
9334: LD_INT 1
9336: ST_TO_ADDR
// if p3 = 30 then
9337: LD_VAR 0 3
9341: PUSH
9342: LD_INT 30
9344: EQUAL
9345: IFFALSE 9355
// sExchange := true ;
9347: LD_ADDR_EXP 117
9351: PUSH
9352: LD_INT 1
9354: ST_TO_ADDR
// if p3 = 31 then
9355: LD_VAR 0 3
9359: PUSH
9360: LD_INT 31
9362: EQUAL
9363: IFFALSE 9373
// sFac := true ;
9365: LD_ADDR_EXP 118
9369: PUSH
9370: LD_INT 1
9372: ST_TO_ADDR
// if p3 = 32 then
9373: LD_VAR 0 3
9377: PUSH
9378: LD_INT 32
9380: EQUAL
9381: IFFALSE 9391
// sPower := true ;
9383: LD_ADDR_EXP 119
9387: PUSH
9388: LD_INT 1
9390: ST_TO_ADDR
// if p3 = 33 then
9391: LD_VAR 0 3
9395: PUSH
9396: LD_INT 33
9398: EQUAL
9399: IFFALSE 9409
// sRandom := true ;
9401: LD_ADDR_EXP 120
9405: PUSH
9406: LD_INT 1
9408: ST_TO_ADDR
// if p3 = 34 then
9409: LD_VAR 0 3
9413: PUSH
9414: LD_INT 34
9416: EQUAL
9417: IFFALSE 9427
// sShield := true ;
9419: LD_ADDR_EXP 121
9423: PUSH
9424: LD_INT 1
9426: ST_TO_ADDR
// if p3 = 35 then
9427: LD_VAR 0 3
9431: PUSH
9432: LD_INT 35
9434: EQUAL
9435: IFFALSE 9445
// sTime := true ;
9437: LD_ADDR_EXP 122
9441: PUSH
9442: LD_INT 1
9444: ST_TO_ADDR
// if p3 = 36 then
9445: LD_VAR 0 3
9449: PUSH
9450: LD_INT 36
9452: EQUAL
9453: IFFALSE 9463
// sTools := true ;
9455: LD_ADDR_EXP 123
9459: PUSH
9460: LD_INT 1
9462: ST_TO_ADDR
// if p3 = 101 then
9463: LD_VAR 0 3
9467: PUSH
9468: LD_INT 101
9470: EQUAL
9471: IFFALSE 9481
// sSold := true ;
9473: LD_ADDR_EXP 88
9477: PUSH
9478: LD_INT 1
9480: ST_TO_ADDR
// if p3 = 102 then
9481: LD_VAR 0 3
9485: PUSH
9486: LD_INT 102
9488: EQUAL
9489: IFFALSE 9499
// sDiff := true ;
9491: LD_ADDR_EXP 89
9495: PUSH
9496: LD_INT 1
9498: ST_TO_ADDR
// if p3 = 103 then
9499: LD_VAR 0 3
9503: PUSH
9504: LD_INT 103
9506: EQUAL
9507: IFFALSE 9517
// sFog := true ;
9509: LD_ADDR_EXP 92
9513: PUSH
9514: LD_INT 1
9516: ST_TO_ADDR
// if p3 = 104 then
9517: LD_VAR 0 3
9521: PUSH
9522: LD_INT 104
9524: EQUAL
9525: IFFALSE 9535
// sReset := true ;
9527: LD_ADDR_EXP 93
9531: PUSH
9532: LD_INT 1
9534: ST_TO_ADDR
// if p3 = 105 then
9535: LD_VAR 0 3
9539: PUSH
9540: LD_INT 105
9542: EQUAL
9543: IFFALSE 9553
// sSun := true ;
9545: LD_ADDR_EXP 94
9549: PUSH
9550: LD_INT 1
9552: ST_TO_ADDR
// if p3 = 106 then
9553: LD_VAR 0 3
9557: PUSH
9558: LD_INT 106
9560: EQUAL
9561: IFFALSE 9571
// sTiger := true ;
9563: LD_ADDR_EXP 90
9567: PUSH
9568: LD_INT 1
9570: ST_TO_ADDR
// if p3 = 107 then
9571: LD_VAR 0 3
9575: PUSH
9576: LD_INT 107
9578: EQUAL
9579: IFFALSE 9589
// sBomb := true ;
9581: LD_ADDR_EXP 91
9585: PUSH
9586: LD_INT 1
9588: ST_TO_ADDR
// if p3 = 108 then
9589: LD_VAR 0 3
9593: PUSH
9594: LD_INT 108
9596: EQUAL
9597: IFFALSE 9607
// sWound := true ;
9599: LD_ADDR_EXP 99
9603: PUSH
9604: LD_INT 1
9606: ST_TO_ADDR
// if p3 = 109 then
9607: LD_VAR 0 3
9611: PUSH
9612: LD_INT 109
9614: EQUAL
9615: IFFALSE 9625
// sBetray := true ;
9617: LD_ADDR_EXP 103
9621: PUSH
9622: LD_INT 1
9624: ST_TO_ADDR
// if p3 = 110 then
9625: LD_VAR 0 3
9629: PUSH
9630: LD_INT 110
9632: EQUAL
9633: IFFALSE 9643
// sContamin := true ;
9635: LD_ADDR_EXP 104
9639: PUSH
9640: LD_INT 1
9642: ST_TO_ADDR
// if p3 = 111 then
9643: LD_VAR 0 3
9647: PUSH
9648: LD_INT 111
9650: EQUAL
9651: IFFALSE 9661
// sOil := true ;
9653: LD_ADDR_EXP 106
9657: PUSH
9658: LD_INT 1
9660: ST_TO_ADDR
// if p3 = 112 then
9661: LD_VAR 0 3
9665: PUSH
9666: LD_INT 112
9668: EQUAL
9669: IFFALSE 9679
// sStu := true ;
9671: LD_ADDR_EXP 110
9675: PUSH
9676: LD_INT 1
9678: ST_TO_ADDR
// if p3 = 113 then
9679: LD_VAR 0 3
9683: PUSH
9684: LD_INT 113
9686: EQUAL
9687: IFFALSE 9697
// sBazooka := true ;
9689: LD_ADDR_EXP 113
9693: PUSH
9694: LD_INT 1
9696: ST_TO_ADDR
// if p3 = 114 then
9697: LD_VAR 0 3
9701: PUSH
9702: LD_INT 114
9704: EQUAL
9705: IFFALSE 9715
// sMortar := true ;
9707: LD_ADDR_EXP 114
9711: PUSH
9712: LD_INT 1
9714: ST_TO_ADDR
// if p3 = 115 then
9715: LD_VAR 0 3
9719: PUSH
9720: LD_INT 115
9722: EQUAL
9723: IFFALSE 9733
// sRanger := true ;
9725: LD_ADDR_EXP 124
9729: PUSH
9730: LD_INT 1
9732: ST_TO_ADDR
// if p3 = 116 then
9733: LD_VAR 0 3
9737: PUSH
9738: LD_INT 116
9740: EQUAL
9741: IFFALSE 9751
// sComputer := true ;
9743: LD_ADDR_EXP 125
9747: PUSH
9748: LD_INT 1
9750: ST_TO_ADDR
// if p3 = 117 then
9751: LD_VAR 0 3
9755: PUSH
9756: LD_INT 117
9758: EQUAL
9759: IFFALSE 9769
// s30 := true ;
9761: LD_ADDR_EXP 126
9765: PUSH
9766: LD_INT 1
9768: ST_TO_ADDR
// if p3 = 118 then
9769: LD_VAR 0 3
9773: PUSH
9774: LD_INT 118
9776: EQUAL
9777: IFFALSE 9787
// s60 := true ;
9779: LD_ADDR_EXP 127
9783: PUSH
9784: LD_INT 1
9786: ST_TO_ADDR
// end ; if p2 = 101 then
9787: LD_VAR 0 2
9791: PUSH
9792: LD_INT 101
9794: EQUAL
9795: IFFALSE 9923
// begin case p3 of 1 :
9797: LD_VAR 0 3
9801: PUSH
9802: LD_INT 1
9804: DOUBLE
9805: EQUAL
9806: IFTRUE 9810
9808: GO 9817
9810: POP
// hHackUnlimitedResources ; 2 :
9811: CALL 21519 0 0
9815: GO 9923
9817: LD_INT 2
9819: DOUBLE
9820: EQUAL
9821: IFTRUE 9825
9823: GO 9832
9825: POP
// hHackSetLevel10 ; 3 :
9826: CALL 21652 0 0
9830: GO 9923
9832: LD_INT 3
9834: DOUBLE
9835: EQUAL
9836: IFTRUE 9840
9838: GO 9847
9840: POP
// hHackSetLevel10YourUnits ; 4 :
9841: CALL 21737 0 0
9845: GO 9923
9847: LD_INT 4
9849: DOUBLE
9850: EQUAL
9851: IFTRUE 9855
9853: GO 9862
9855: POP
// hHackInvincible ; 5 :
9856: CALL 22185 0 0
9860: GO 9923
9862: LD_INT 5
9864: DOUBLE
9865: EQUAL
9866: IFTRUE 9870
9868: GO 9877
9870: POP
// hHackInvisible ; 6 :
9871: CALL 22296 0 0
9875: GO 9923
9877: LD_INT 6
9879: DOUBLE
9880: EQUAL
9881: IFTRUE 9885
9883: GO 9892
9885: POP
// hHackChangeYourSide ; 7 :
9886: CALL 22353 0 0
9890: GO 9923
9892: LD_INT 7
9894: DOUBLE
9895: EQUAL
9896: IFTRUE 9900
9898: GO 9907
9900: POP
// hHackChangeUnitSide ; 8 :
9901: CALL 22395 0 0
9905: GO 9923
9907: LD_INT 8
9909: DOUBLE
9910: EQUAL
9911: IFTRUE 9915
9913: GO 9922
9915: POP
// hHackFog ; end ;
9916: CALL 22496 0 0
9920: GO 9923
9922: POP
// end ; end ;
9923: LD_VAR 0 7
9927: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
9928: GO 9930
9930: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
9931: LD_STRING initStreamRollete();
9933: PPUSH
9934: CALL_OW 559
// InitStreamMode ;
9938: CALL 9947 0 0
// DefineStreamItems ( ) ;
9942: CALL 10411 0 0
// end ;
9946: END
// function InitStreamMode ; begin
9947: LD_INT 0
9949: PPUSH
// streamModeActive := false ;
9950: LD_ADDR_EXP 71
9954: PUSH
9955: LD_INT 0
9957: ST_TO_ADDR
// normalCounter := 36 ;
9958: LD_ADDR_EXP 72
9962: PUSH
9963: LD_INT 36
9965: ST_TO_ADDR
// hardcoreCounter := 16 ;
9966: LD_ADDR_EXP 73
9970: PUSH
9971: LD_INT 16
9973: ST_TO_ADDR
// sRocket := false ;
9974: LD_ADDR_EXP 76
9978: PUSH
9979: LD_INT 0
9981: ST_TO_ADDR
// sSpeed := false ;
9982: LD_ADDR_EXP 75
9986: PUSH
9987: LD_INT 0
9989: ST_TO_ADDR
// sEngine := false ;
9990: LD_ADDR_EXP 77
9994: PUSH
9995: LD_INT 0
9997: ST_TO_ADDR
// sSpec := false ;
9998: LD_ADDR_EXP 74
10002: PUSH
10003: LD_INT 0
10005: ST_TO_ADDR
// sLevel := false ;
10006: LD_ADDR_EXP 78
10010: PUSH
10011: LD_INT 0
10013: ST_TO_ADDR
// sArmoury := false ;
10014: LD_ADDR_EXP 79
10018: PUSH
10019: LD_INT 0
10021: ST_TO_ADDR
// sRadar := false ;
10022: LD_ADDR_EXP 80
10026: PUSH
10027: LD_INT 0
10029: ST_TO_ADDR
// sBunker := false ;
10030: LD_ADDR_EXP 81
10034: PUSH
10035: LD_INT 0
10037: ST_TO_ADDR
// sHack := false ;
10038: LD_ADDR_EXP 82
10042: PUSH
10043: LD_INT 0
10045: ST_TO_ADDR
// sFire := false ;
10046: LD_ADDR_EXP 83
10050: PUSH
10051: LD_INT 0
10053: ST_TO_ADDR
// sRefresh := false ;
10054: LD_ADDR_EXP 84
10058: PUSH
10059: LD_INT 0
10061: ST_TO_ADDR
// sExp := false ;
10062: LD_ADDR_EXP 85
10066: PUSH
10067: LD_INT 0
10069: ST_TO_ADDR
// sDepot := false ;
10070: LD_ADDR_EXP 86
10074: PUSH
10075: LD_INT 0
10077: ST_TO_ADDR
// sFlag := false ;
10078: LD_ADDR_EXP 87
10082: PUSH
10083: LD_INT 0
10085: ST_TO_ADDR
// sKamikadze := false ;
10086: LD_ADDR_EXP 95
10090: PUSH
10091: LD_INT 0
10093: ST_TO_ADDR
// sTroll := false ;
10094: LD_ADDR_EXP 96
10098: PUSH
10099: LD_INT 0
10101: ST_TO_ADDR
// sSlow := false ;
10102: LD_ADDR_EXP 97
10106: PUSH
10107: LD_INT 0
10109: ST_TO_ADDR
// sLack := false ;
10110: LD_ADDR_EXP 98
10114: PUSH
10115: LD_INT 0
10117: ST_TO_ADDR
// sTank := false ;
10118: LD_ADDR_EXP 100
10122: PUSH
10123: LD_INT 0
10125: ST_TO_ADDR
// sRemote := false ;
10126: LD_ADDR_EXP 101
10130: PUSH
10131: LD_INT 0
10133: ST_TO_ADDR
// sPowell := false ;
10134: LD_ADDR_EXP 102
10138: PUSH
10139: LD_INT 0
10141: ST_TO_ADDR
// sTeleport := false ;
10142: LD_ADDR_EXP 105
10146: PUSH
10147: LD_INT 0
10149: ST_TO_ADDR
// sOilTower := false ;
10150: LD_ADDR_EXP 107
10154: PUSH
10155: LD_INT 0
10157: ST_TO_ADDR
// sShovel := false ;
10158: LD_ADDR_EXP 108
10162: PUSH
10163: LD_INT 0
10165: ST_TO_ADDR
// sSheik := false ;
10166: LD_ADDR_EXP 109
10170: PUSH
10171: LD_INT 0
10173: ST_TO_ADDR
// sEarthquake := false ;
10174: LD_ADDR_EXP 111
10178: PUSH
10179: LD_INT 0
10181: ST_TO_ADDR
// sAI := false ;
10182: LD_ADDR_EXP 112
10186: PUSH
10187: LD_INT 0
10189: ST_TO_ADDR
// sCargo := false ;
10190: LD_ADDR_EXP 115
10194: PUSH
10195: LD_INT 0
10197: ST_TO_ADDR
// sDLaser := false ;
10198: LD_ADDR_EXP 116
10202: PUSH
10203: LD_INT 0
10205: ST_TO_ADDR
// sExchange := false ;
10206: LD_ADDR_EXP 117
10210: PUSH
10211: LD_INT 0
10213: ST_TO_ADDR
// sFac := false ;
10214: LD_ADDR_EXP 118
10218: PUSH
10219: LD_INT 0
10221: ST_TO_ADDR
// sPower := false ;
10222: LD_ADDR_EXP 119
10226: PUSH
10227: LD_INT 0
10229: ST_TO_ADDR
// sRandom := false ;
10230: LD_ADDR_EXP 120
10234: PUSH
10235: LD_INT 0
10237: ST_TO_ADDR
// sShield := false ;
10238: LD_ADDR_EXP 121
10242: PUSH
10243: LD_INT 0
10245: ST_TO_ADDR
// sTime := false ;
10246: LD_ADDR_EXP 122
10250: PUSH
10251: LD_INT 0
10253: ST_TO_ADDR
// sTools := false ;
10254: LD_ADDR_EXP 123
10258: PUSH
10259: LD_INT 0
10261: ST_TO_ADDR
// sSold := false ;
10262: LD_ADDR_EXP 88
10266: PUSH
10267: LD_INT 0
10269: ST_TO_ADDR
// sDiff := false ;
10270: LD_ADDR_EXP 89
10274: PUSH
10275: LD_INT 0
10277: ST_TO_ADDR
// sFog := false ;
10278: LD_ADDR_EXP 92
10282: PUSH
10283: LD_INT 0
10285: ST_TO_ADDR
// sReset := false ;
10286: LD_ADDR_EXP 93
10290: PUSH
10291: LD_INT 0
10293: ST_TO_ADDR
// sSun := false ;
10294: LD_ADDR_EXP 94
10298: PUSH
10299: LD_INT 0
10301: ST_TO_ADDR
// sTiger := false ;
10302: LD_ADDR_EXP 90
10306: PUSH
10307: LD_INT 0
10309: ST_TO_ADDR
// sBomb := false ;
10310: LD_ADDR_EXP 91
10314: PUSH
10315: LD_INT 0
10317: ST_TO_ADDR
// sWound := false ;
10318: LD_ADDR_EXP 99
10322: PUSH
10323: LD_INT 0
10325: ST_TO_ADDR
// sBetray := false ;
10326: LD_ADDR_EXP 103
10330: PUSH
10331: LD_INT 0
10333: ST_TO_ADDR
// sContamin := false ;
10334: LD_ADDR_EXP 104
10338: PUSH
10339: LD_INT 0
10341: ST_TO_ADDR
// sOil := false ;
10342: LD_ADDR_EXP 106
10346: PUSH
10347: LD_INT 0
10349: ST_TO_ADDR
// sStu := false ;
10350: LD_ADDR_EXP 110
10354: PUSH
10355: LD_INT 0
10357: ST_TO_ADDR
// sBazooka := false ;
10358: LD_ADDR_EXP 113
10362: PUSH
10363: LD_INT 0
10365: ST_TO_ADDR
// sMortar := false ;
10366: LD_ADDR_EXP 114
10370: PUSH
10371: LD_INT 0
10373: ST_TO_ADDR
// sRanger := false ;
10374: LD_ADDR_EXP 124
10378: PUSH
10379: LD_INT 0
10381: ST_TO_ADDR
// sComputer := false ;
10382: LD_ADDR_EXP 125
10386: PUSH
10387: LD_INT 0
10389: ST_TO_ADDR
// s30 := false ;
10390: LD_ADDR_EXP 126
10394: PUSH
10395: LD_INT 0
10397: ST_TO_ADDR
// s60 := false ;
10398: LD_ADDR_EXP 127
10402: PUSH
10403: LD_INT 0
10405: ST_TO_ADDR
// end ;
10406: LD_VAR 0 1
10410: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
10411: LD_INT 0
10413: PPUSH
10414: PPUSH
10415: PPUSH
10416: PPUSH
10417: PPUSH
// result := [ ] ;
10418: LD_ADDR_VAR 0 1
10422: PUSH
10423: EMPTY
10424: ST_TO_ADDR
// if campaign_id = 1 then
10425: LD_OWVAR 69
10429: PUSH
10430: LD_INT 1
10432: EQUAL
10433: IFFALSE 13599
// begin case mission_number of 1 :
10435: LD_OWVAR 70
10439: PUSH
10440: LD_INT 1
10442: DOUBLE
10443: EQUAL
10444: IFTRUE 10448
10446: GO 10524
10448: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
10449: LD_ADDR_VAR 0 1
10453: PUSH
10454: LD_INT 2
10456: PUSH
10457: LD_INT 4
10459: PUSH
10460: LD_INT 11
10462: PUSH
10463: LD_INT 12
10465: PUSH
10466: LD_INT 15
10468: PUSH
10469: LD_INT 16
10471: PUSH
10472: LD_INT 22
10474: PUSH
10475: LD_INT 23
10477: PUSH
10478: LD_INT 26
10480: PUSH
10481: EMPTY
10482: LIST
10483: LIST
10484: LIST
10485: LIST
10486: LIST
10487: LIST
10488: LIST
10489: LIST
10490: LIST
10491: PUSH
10492: LD_INT 101
10494: PUSH
10495: LD_INT 102
10497: PUSH
10498: LD_INT 106
10500: PUSH
10501: LD_INT 116
10503: PUSH
10504: LD_INT 117
10506: PUSH
10507: LD_INT 118
10509: PUSH
10510: EMPTY
10511: LIST
10512: LIST
10513: LIST
10514: LIST
10515: LIST
10516: LIST
10517: PUSH
10518: EMPTY
10519: LIST
10520: LIST
10521: ST_TO_ADDR
10522: GO 13597
10524: LD_INT 2
10526: DOUBLE
10527: EQUAL
10528: IFTRUE 10532
10530: GO 10616
10532: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
10533: LD_ADDR_VAR 0 1
10537: PUSH
10538: LD_INT 2
10540: PUSH
10541: LD_INT 4
10543: PUSH
10544: LD_INT 11
10546: PUSH
10547: LD_INT 12
10549: PUSH
10550: LD_INT 15
10552: PUSH
10553: LD_INT 16
10555: PUSH
10556: LD_INT 22
10558: PUSH
10559: LD_INT 23
10561: PUSH
10562: LD_INT 26
10564: PUSH
10565: EMPTY
10566: LIST
10567: LIST
10568: LIST
10569: LIST
10570: LIST
10571: LIST
10572: LIST
10573: LIST
10574: LIST
10575: PUSH
10576: LD_INT 101
10578: PUSH
10579: LD_INT 102
10581: PUSH
10582: LD_INT 105
10584: PUSH
10585: LD_INT 106
10587: PUSH
10588: LD_INT 108
10590: PUSH
10591: LD_INT 116
10593: PUSH
10594: LD_INT 117
10596: PUSH
10597: LD_INT 118
10599: PUSH
10600: EMPTY
10601: LIST
10602: LIST
10603: LIST
10604: LIST
10605: LIST
10606: LIST
10607: LIST
10608: LIST
10609: PUSH
10610: EMPTY
10611: LIST
10612: LIST
10613: ST_TO_ADDR
10614: GO 13597
10616: LD_INT 3
10618: DOUBLE
10619: EQUAL
10620: IFTRUE 10624
10622: GO 10712
10624: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
10625: LD_ADDR_VAR 0 1
10629: PUSH
10630: LD_INT 2
10632: PUSH
10633: LD_INT 4
10635: PUSH
10636: LD_INT 5
10638: PUSH
10639: LD_INT 11
10641: PUSH
10642: LD_INT 12
10644: PUSH
10645: LD_INT 15
10647: PUSH
10648: LD_INT 16
10650: PUSH
10651: LD_INT 22
10653: PUSH
10654: LD_INT 26
10656: PUSH
10657: LD_INT 36
10659: PUSH
10660: EMPTY
10661: LIST
10662: LIST
10663: LIST
10664: LIST
10665: LIST
10666: LIST
10667: LIST
10668: LIST
10669: LIST
10670: LIST
10671: PUSH
10672: LD_INT 101
10674: PUSH
10675: LD_INT 102
10677: PUSH
10678: LD_INT 105
10680: PUSH
10681: LD_INT 106
10683: PUSH
10684: LD_INT 108
10686: PUSH
10687: LD_INT 116
10689: PUSH
10690: LD_INT 117
10692: PUSH
10693: LD_INT 118
10695: PUSH
10696: EMPTY
10697: LIST
10698: LIST
10699: LIST
10700: LIST
10701: LIST
10702: LIST
10703: LIST
10704: LIST
10705: PUSH
10706: EMPTY
10707: LIST
10708: LIST
10709: ST_TO_ADDR
10710: GO 13597
10712: LD_INT 4
10714: DOUBLE
10715: EQUAL
10716: IFTRUE 10720
10718: GO 10816
10720: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
10721: LD_ADDR_VAR 0 1
10725: PUSH
10726: LD_INT 2
10728: PUSH
10729: LD_INT 4
10731: PUSH
10732: LD_INT 5
10734: PUSH
10735: LD_INT 8
10737: PUSH
10738: LD_INT 11
10740: PUSH
10741: LD_INT 12
10743: PUSH
10744: LD_INT 15
10746: PUSH
10747: LD_INT 16
10749: PUSH
10750: LD_INT 22
10752: PUSH
10753: LD_INT 23
10755: PUSH
10756: LD_INT 26
10758: PUSH
10759: LD_INT 36
10761: PUSH
10762: EMPTY
10763: LIST
10764: LIST
10765: LIST
10766: LIST
10767: LIST
10768: LIST
10769: LIST
10770: LIST
10771: LIST
10772: LIST
10773: LIST
10774: LIST
10775: PUSH
10776: LD_INT 101
10778: PUSH
10779: LD_INT 102
10781: PUSH
10782: LD_INT 105
10784: PUSH
10785: LD_INT 106
10787: PUSH
10788: LD_INT 108
10790: PUSH
10791: LD_INT 116
10793: PUSH
10794: LD_INT 117
10796: PUSH
10797: LD_INT 118
10799: PUSH
10800: EMPTY
10801: LIST
10802: LIST
10803: LIST
10804: LIST
10805: LIST
10806: LIST
10807: LIST
10808: LIST
10809: PUSH
10810: EMPTY
10811: LIST
10812: LIST
10813: ST_TO_ADDR
10814: GO 13597
10816: LD_INT 5
10818: DOUBLE
10819: EQUAL
10820: IFTRUE 10824
10822: GO 10936
10824: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
10825: LD_ADDR_VAR 0 1
10829: PUSH
10830: LD_INT 2
10832: PUSH
10833: LD_INT 4
10835: PUSH
10836: LD_INT 5
10838: PUSH
10839: LD_INT 6
10841: PUSH
10842: LD_INT 8
10844: PUSH
10845: LD_INT 11
10847: PUSH
10848: LD_INT 12
10850: PUSH
10851: LD_INT 15
10853: PUSH
10854: LD_INT 16
10856: PUSH
10857: LD_INT 22
10859: PUSH
10860: LD_INT 23
10862: PUSH
10863: LD_INT 25
10865: PUSH
10866: LD_INT 26
10868: PUSH
10869: LD_INT 36
10871: PUSH
10872: EMPTY
10873: LIST
10874: LIST
10875: LIST
10876: LIST
10877: LIST
10878: LIST
10879: LIST
10880: LIST
10881: LIST
10882: LIST
10883: LIST
10884: LIST
10885: LIST
10886: LIST
10887: PUSH
10888: LD_INT 101
10890: PUSH
10891: LD_INT 102
10893: PUSH
10894: LD_INT 105
10896: PUSH
10897: LD_INT 106
10899: PUSH
10900: LD_INT 108
10902: PUSH
10903: LD_INT 109
10905: PUSH
10906: LD_INT 112
10908: PUSH
10909: LD_INT 116
10911: PUSH
10912: LD_INT 117
10914: PUSH
10915: LD_INT 118
10917: PUSH
10918: EMPTY
10919: LIST
10920: LIST
10921: LIST
10922: LIST
10923: LIST
10924: LIST
10925: LIST
10926: LIST
10927: LIST
10928: LIST
10929: PUSH
10930: EMPTY
10931: LIST
10932: LIST
10933: ST_TO_ADDR
10934: GO 13597
10936: LD_INT 6
10938: DOUBLE
10939: EQUAL
10940: IFTRUE 10944
10942: GO 11076
10944: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
10945: LD_ADDR_VAR 0 1
10949: PUSH
10950: LD_INT 2
10952: PUSH
10953: LD_INT 4
10955: PUSH
10956: LD_INT 5
10958: PUSH
10959: LD_INT 6
10961: PUSH
10962: LD_INT 8
10964: PUSH
10965: LD_INT 11
10967: PUSH
10968: LD_INT 12
10970: PUSH
10971: LD_INT 15
10973: PUSH
10974: LD_INT 16
10976: PUSH
10977: LD_INT 20
10979: PUSH
10980: LD_INT 21
10982: PUSH
10983: LD_INT 22
10985: PUSH
10986: LD_INT 23
10988: PUSH
10989: LD_INT 25
10991: PUSH
10992: LD_INT 26
10994: PUSH
10995: LD_INT 30
10997: PUSH
10998: LD_INT 31
11000: PUSH
11001: LD_INT 32
11003: PUSH
11004: LD_INT 36
11006: PUSH
11007: EMPTY
11008: LIST
11009: LIST
11010: LIST
11011: LIST
11012: LIST
11013: LIST
11014: LIST
11015: LIST
11016: LIST
11017: LIST
11018: LIST
11019: LIST
11020: LIST
11021: LIST
11022: LIST
11023: LIST
11024: LIST
11025: LIST
11026: LIST
11027: PUSH
11028: LD_INT 101
11030: PUSH
11031: LD_INT 102
11033: PUSH
11034: LD_INT 105
11036: PUSH
11037: LD_INT 106
11039: PUSH
11040: LD_INT 108
11042: PUSH
11043: LD_INT 109
11045: PUSH
11046: LD_INT 112
11048: PUSH
11049: LD_INT 116
11051: PUSH
11052: LD_INT 117
11054: PUSH
11055: LD_INT 118
11057: PUSH
11058: EMPTY
11059: LIST
11060: LIST
11061: LIST
11062: LIST
11063: LIST
11064: LIST
11065: LIST
11066: LIST
11067: LIST
11068: LIST
11069: PUSH
11070: EMPTY
11071: LIST
11072: LIST
11073: ST_TO_ADDR
11074: GO 13597
11076: LD_INT 7
11078: DOUBLE
11079: EQUAL
11080: IFTRUE 11084
11082: GO 11196
11084: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
11085: LD_ADDR_VAR 0 1
11089: PUSH
11090: LD_INT 2
11092: PUSH
11093: LD_INT 4
11095: PUSH
11096: LD_INT 5
11098: PUSH
11099: LD_INT 7
11101: PUSH
11102: LD_INT 11
11104: PUSH
11105: LD_INT 12
11107: PUSH
11108: LD_INT 15
11110: PUSH
11111: LD_INT 16
11113: PUSH
11114: LD_INT 20
11116: PUSH
11117: LD_INT 21
11119: PUSH
11120: LD_INT 22
11122: PUSH
11123: LD_INT 23
11125: PUSH
11126: LD_INT 25
11128: PUSH
11129: LD_INT 26
11131: PUSH
11132: EMPTY
11133: LIST
11134: LIST
11135: LIST
11136: LIST
11137: LIST
11138: LIST
11139: LIST
11140: LIST
11141: LIST
11142: LIST
11143: LIST
11144: LIST
11145: LIST
11146: LIST
11147: PUSH
11148: LD_INT 101
11150: PUSH
11151: LD_INT 102
11153: PUSH
11154: LD_INT 103
11156: PUSH
11157: LD_INT 105
11159: PUSH
11160: LD_INT 106
11162: PUSH
11163: LD_INT 108
11165: PUSH
11166: LD_INT 112
11168: PUSH
11169: LD_INT 116
11171: PUSH
11172: LD_INT 117
11174: PUSH
11175: LD_INT 118
11177: PUSH
11178: EMPTY
11179: LIST
11180: LIST
11181: LIST
11182: LIST
11183: LIST
11184: LIST
11185: LIST
11186: LIST
11187: LIST
11188: LIST
11189: PUSH
11190: EMPTY
11191: LIST
11192: LIST
11193: ST_TO_ADDR
11194: GO 13597
11196: LD_INT 8
11198: DOUBLE
11199: EQUAL
11200: IFTRUE 11204
11202: GO 11344
11204: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
11205: LD_ADDR_VAR 0 1
11209: PUSH
11210: LD_INT 2
11212: PUSH
11213: LD_INT 4
11215: PUSH
11216: LD_INT 5
11218: PUSH
11219: LD_INT 6
11221: PUSH
11222: LD_INT 7
11224: PUSH
11225: LD_INT 8
11227: PUSH
11228: LD_INT 11
11230: PUSH
11231: LD_INT 12
11233: PUSH
11234: LD_INT 15
11236: PUSH
11237: LD_INT 16
11239: PUSH
11240: LD_INT 20
11242: PUSH
11243: LD_INT 21
11245: PUSH
11246: LD_INT 22
11248: PUSH
11249: LD_INT 23
11251: PUSH
11252: LD_INT 25
11254: PUSH
11255: LD_INT 26
11257: PUSH
11258: LD_INT 30
11260: PUSH
11261: LD_INT 31
11263: PUSH
11264: LD_INT 32
11266: PUSH
11267: LD_INT 36
11269: PUSH
11270: EMPTY
11271: LIST
11272: LIST
11273: LIST
11274: LIST
11275: LIST
11276: LIST
11277: LIST
11278: LIST
11279: LIST
11280: LIST
11281: LIST
11282: LIST
11283: LIST
11284: LIST
11285: LIST
11286: LIST
11287: LIST
11288: LIST
11289: LIST
11290: LIST
11291: PUSH
11292: LD_INT 101
11294: PUSH
11295: LD_INT 102
11297: PUSH
11298: LD_INT 103
11300: PUSH
11301: LD_INT 105
11303: PUSH
11304: LD_INT 106
11306: PUSH
11307: LD_INT 108
11309: PUSH
11310: LD_INT 109
11312: PUSH
11313: LD_INT 112
11315: PUSH
11316: LD_INT 116
11318: PUSH
11319: LD_INT 117
11321: PUSH
11322: LD_INT 118
11324: PUSH
11325: EMPTY
11326: LIST
11327: LIST
11328: LIST
11329: LIST
11330: LIST
11331: LIST
11332: LIST
11333: LIST
11334: LIST
11335: LIST
11336: LIST
11337: PUSH
11338: EMPTY
11339: LIST
11340: LIST
11341: ST_TO_ADDR
11342: GO 13597
11344: LD_INT 9
11346: DOUBLE
11347: EQUAL
11348: IFTRUE 11352
11350: GO 11500
11352: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
11353: LD_ADDR_VAR 0 1
11357: PUSH
11358: LD_INT 2
11360: PUSH
11361: LD_INT 4
11363: PUSH
11364: LD_INT 5
11366: PUSH
11367: LD_INT 6
11369: PUSH
11370: LD_INT 7
11372: PUSH
11373: LD_INT 8
11375: PUSH
11376: LD_INT 11
11378: PUSH
11379: LD_INT 12
11381: PUSH
11382: LD_INT 15
11384: PUSH
11385: LD_INT 16
11387: PUSH
11388: LD_INT 20
11390: PUSH
11391: LD_INT 21
11393: PUSH
11394: LD_INT 22
11396: PUSH
11397: LD_INT 23
11399: PUSH
11400: LD_INT 25
11402: PUSH
11403: LD_INT 26
11405: PUSH
11406: LD_INT 28
11408: PUSH
11409: LD_INT 30
11411: PUSH
11412: LD_INT 31
11414: PUSH
11415: LD_INT 32
11417: PUSH
11418: LD_INT 36
11420: PUSH
11421: EMPTY
11422: LIST
11423: LIST
11424: LIST
11425: LIST
11426: LIST
11427: LIST
11428: LIST
11429: LIST
11430: LIST
11431: LIST
11432: LIST
11433: LIST
11434: LIST
11435: LIST
11436: LIST
11437: LIST
11438: LIST
11439: LIST
11440: LIST
11441: LIST
11442: LIST
11443: PUSH
11444: LD_INT 101
11446: PUSH
11447: LD_INT 102
11449: PUSH
11450: LD_INT 103
11452: PUSH
11453: LD_INT 105
11455: PUSH
11456: LD_INT 106
11458: PUSH
11459: LD_INT 108
11461: PUSH
11462: LD_INT 109
11464: PUSH
11465: LD_INT 112
11467: PUSH
11468: LD_INT 114
11470: PUSH
11471: LD_INT 116
11473: PUSH
11474: LD_INT 117
11476: PUSH
11477: LD_INT 118
11479: PUSH
11480: EMPTY
11481: LIST
11482: LIST
11483: LIST
11484: LIST
11485: LIST
11486: LIST
11487: LIST
11488: LIST
11489: LIST
11490: LIST
11491: LIST
11492: LIST
11493: PUSH
11494: EMPTY
11495: LIST
11496: LIST
11497: ST_TO_ADDR
11498: GO 13597
11500: LD_INT 10
11502: DOUBLE
11503: EQUAL
11504: IFTRUE 11508
11506: GO 11704
11508: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
11509: LD_ADDR_VAR 0 1
11513: PUSH
11514: LD_INT 2
11516: PUSH
11517: LD_INT 4
11519: PUSH
11520: LD_INT 5
11522: PUSH
11523: LD_INT 6
11525: PUSH
11526: LD_INT 7
11528: PUSH
11529: LD_INT 8
11531: PUSH
11532: LD_INT 9
11534: PUSH
11535: LD_INT 10
11537: PUSH
11538: LD_INT 11
11540: PUSH
11541: LD_INT 12
11543: PUSH
11544: LD_INT 13
11546: PUSH
11547: LD_INT 14
11549: PUSH
11550: LD_INT 15
11552: PUSH
11553: LD_INT 16
11555: PUSH
11556: LD_INT 17
11558: PUSH
11559: LD_INT 18
11561: PUSH
11562: LD_INT 19
11564: PUSH
11565: LD_INT 20
11567: PUSH
11568: LD_INT 21
11570: PUSH
11571: LD_INT 22
11573: PUSH
11574: LD_INT 23
11576: PUSH
11577: LD_INT 24
11579: PUSH
11580: LD_INT 25
11582: PUSH
11583: LD_INT 26
11585: PUSH
11586: LD_INT 28
11588: PUSH
11589: LD_INT 30
11591: PUSH
11592: LD_INT 31
11594: PUSH
11595: LD_INT 32
11597: PUSH
11598: LD_INT 36
11600: PUSH
11601: EMPTY
11602: LIST
11603: LIST
11604: LIST
11605: LIST
11606: LIST
11607: LIST
11608: LIST
11609: LIST
11610: LIST
11611: LIST
11612: LIST
11613: LIST
11614: LIST
11615: LIST
11616: LIST
11617: LIST
11618: LIST
11619: LIST
11620: LIST
11621: LIST
11622: LIST
11623: LIST
11624: LIST
11625: LIST
11626: LIST
11627: LIST
11628: LIST
11629: LIST
11630: LIST
11631: PUSH
11632: LD_INT 101
11634: PUSH
11635: LD_INT 102
11637: PUSH
11638: LD_INT 103
11640: PUSH
11641: LD_INT 104
11643: PUSH
11644: LD_INT 105
11646: PUSH
11647: LD_INT 106
11649: PUSH
11650: LD_INT 107
11652: PUSH
11653: LD_INT 108
11655: PUSH
11656: LD_INT 109
11658: PUSH
11659: LD_INT 110
11661: PUSH
11662: LD_INT 111
11664: PUSH
11665: LD_INT 112
11667: PUSH
11668: LD_INT 114
11670: PUSH
11671: LD_INT 116
11673: PUSH
11674: LD_INT 117
11676: PUSH
11677: LD_INT 118
11679: PUSH
11680: EMPTY
11681: LIST
11682: LIST
11683: LIST
11684: LIST
11685: LIST
11686: LIST
11687: LIST
11688: LIST
11689: LIST
11690: LIST
11691: LIST
11692: LIST
11693: LIST
11694: LIST
11695: LIST
11696: LIST
11697: PUSH
11698: EMPTY
11699: LIST
11700: LIST
11701: ST_TO_ADDR
11702: GO 13597
11704: LD_INT 11
11706: DOUBLE
11707: EQUAL
11708: IFTRUE 11712
11710: GO 11916
11712: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
11713: LD_ADDR_VAR 0 1
11717: PUSH
11718: LD_INT 2
11720: PUSH
11721: LD_INT 3
11723: PUSH
11724: LD_INT 4
11726: PUSH
11727: LD_INT 5
11729: PUSH
11730: LD_INT 6
11732: PUSH
11733: LD_INT 7
11735: PUSH
11736: LD_INT 8
11738: PUSH
11739: LD_INT 9
11741: PUSH
11742: LD_INT 10
11744: PUSH
11745: LD_INT 11
11747: PUSH
11748: LD_INT 12
11750: PUSH
11751: LD_INT 13
11753: PUSH
11754: LD_INT 14
11756: PUSH
11757: LD_INT 15
11759: PUSH
11760: LD_INT 16
11762: PUSH
11763: LD_INT 17
11765: PUSH
11766: LD_INT 18
11768: PUSH
11769: LD_INT 19
11771: PUSH
11772: LD_INT 20
11774: PUSH
11775: LD_INT 21
11777: PUSH
11778: LD_INT 22
11780: PUSH
11781: LD_INT 23
11783: PUSH
11784: LD_INT 24
11786: PUSH
11787: LD_INT 25
11789: PUSH
11790: LD_INT 26
11792: PUSH
11793: LD_INT 28
11795: PUSH
11796: LD_INT 30
11798: PUSH
11799: LD_INT 31
11801: PUSH
11802: LD_INT 32
11804: PUSH
11805: LD_INT 34
11807: PUSH
11808: LD_INT 36
11810: PUSH
11811: EMPTY
11812: LIST
11813: LIST
11814: LIST
11815: LIST
11816: LIST
11817: LIST
11818: LIST
11819: LIST
11820: LIST
11821: LIST
11822: LIST
11823: LIST
11824: LIST
11825: LIST
11826: LIST
11827: LIST
11828: LIST
11829: LIST
11830: LIST
11831: LIST
11832: LIST
11833: LIST
11834: LIST
11835: LIST
11836: LIST
11837: LIST
11838: LIST
11839: LIST
11840: LIST
11841: LIST
11842: LIST
11843: PUSH
11844: LD_INT 101
11846: PUSH
11847: LD_INT 102
11849: PUSH
11850: LD_INT 103
11852: PUSH
11853: LD_INT 104
11855: PUSH
11856: LD_INT 105
11858: PUSH
11859: LD_INT 106
11861: PUSH
11862: LD_INT 107
11864: PUSH
11865: LD_INT 108
11867: PUSH
11868: LD_INT 109
11870: PUSH
11871: LD_INT 110
11873: PUSH
11874: LD_INT 111
11876: PUSH
11877: LD_INT 112
11879: PUSH
11880: LD_INT 114
11882: PUSH
11883: LD_INT 116
11885: PUSH
11886: LD_INT 117
11888: PUSH
11889: LD_INT 118
11891: PUSH
11892: EMPTY
11893: LIST
11894: LIST
11895: LIST
11896: LIST
11897: LIST
11898: LIST
11899: LIST
11900: LIST
11901: LIST
11902: LIST
11903: LIST
11904: LIST
11905: LIST
11906: LIST
11907: LIST
11908: LIST
11909: PUSH
11910: EMPTY
11911: LIST
11912: LIST
11913: ST_TO_ADDR
11914: GO 13597
11916: LD_INT 12
11918: DOUBLE
11919: EQUAL
11920: IFTRUE 11924
11922: GO 12144
11924: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
11925: LD_ADDR_VAR 0 1
11929: PUSH
11930: LD_INT 1
11932: PUSH
11933: LD_INT 2
11935: PUSH
11936: LD_INT 3
11938: PUSH
11939: LD_INT 4
11941: PUSH
11942: LD_INT 5
11944: PUSH
11945: LD_INT 6
11947: PUSH
11948: LD_INT 7
11950: PUSH
11951: LD_INT 8
11953: PUSH
11954: LD_INT 9
11956: PUSH
11957: LD_INT 10
11959: PUSH
11960: LD_INT 11
11962: PUSH
11963: LD_INT 12
11965: PUSH
11966: LD_INT 13
11968: PUSH
11969: LD_INT 14
11971: PUSH
11972: LD_INT 15
11974: PUSH
11975: LD_INT 16
11977: PUSH
11978: LD_INT 17
11980: PUSH
11981: LD_INT 18
11983: PUSH
11984: LD_INT 19
11986: PUSH
11987: LD_INT 20
11989: PUSH
11990: LD_INT 21
11992: PUSH
11993: LD_INT 22
11995: PUSH
11996: LD_INT 23
11998: PUSH
11999: LD_INT 24
12001: PUSH
12002: LD_INT 25
12004: PUSH
12005: LD_INT 26
12007: PUSH
12008: LD_INT 27
12010: PUSH
12011: LD_INT 28
12013: PUSH
12014: LD_INT 30
12016: PUSH
12017: LD_INT 31
12019: PUSH
12020: LD_INT 32
12022: PUSH
12023: LD_INT 33
12025: PUSH
12026: LD_INT 34
12028: PUSH
12029: LD_INT 36
12031: PUSH
12032: EMPTY
12033: LIST
12034: LIST
12035: LIST
12036: LIST
12037: LIST
12038: LIST
12039: LIST
12040: LIST
12041: LIST
12042: LIST
12043: LIST
12044: LIST
12045: LIST
12046: LIST
12047: LIST
12048: LIST
12049: LIST
12050: LIST
12051: LIST
12052: LIST
12053: LIST
12054: LIST
12055: LIST
12056: LIST
12057: LIST
12058: LIST
12059: LIST
12060: LIST
12061: LIST
12062: LIST
12063: LIST
12064: LIST
12065: LIST
12066: LIST
12067: PUSH
12068: LD_INT 101
12070: PUSH
12071: LD_INT 102
12073: PUSH
12074: LD_INT 103
12076: PUSH
12077: LD_INT 104
12079: PUSH
12080: LD_INT 105
12082: PUSH
12083: LD_INT 106
12085: PUSH
12086: LD_INT 107
12088: PUSH
12089: LD_INT 108
12091: PUSH
12092: LD_INT 109
12094: PUSH
12095: LD_INT 110
12097: PUSH
12098: LD_INT 111
12100: PUSH
12101: LD_INT 112
12103: PUSH
12104: LD_INT 113
12106: PUSH
12107: LD_INT 114
12109: PUSH
12110: LD_INT 116
12112: PUSH
12113: LD_INT 117
12115: PUSH
12116: LD_INT 118
12118: PUSH
12119: EMPTY
12120: LIST
12121: LIST
12122: LIST
12123: LIST
12124: LIST
12125: LIST
12126: LIST
12127: LIST
12128: LIST
12129: LIST
12130: LIST
12131: LIST
12132: LIST
12133: LIST
12134: LIST
12135: LIST
12136: LIST
12137: PUSH
12138: EMPTY
12139: LIST
12140: LIST
12141: ST_TO_ADDR
12142: GO 13597
12144: LD_INT 13
12146: DOUBLE
12147: EQUAL
12148: IFTRUE 12152
12150: GO 12360
12152: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
12153: LD_ADDR_VAR 0 1
12157: PUSH
12158: LD_INT 1
12160: PUSH
12161: LD_INT 2
12163: PUSH
12164: LD_INT 3
12166: PUSH
12167: LD_INT 4
12169: PUSH
12170: LD_INT 5
12172: PUSH
12173: LD_INT 8
12175: PUSH
12176: LD_INT 9
12178: PUSH
12179: LD_INT 10
12181: PUSH
12182: LD_INT 11
12184: PUSH
12185: LD_INT 12
12187: PUSH
12188: LD_INT 14
12190: PUSH
12191: LD_INT 15
12193: PUSH
12194: LD_INT 16
12196: PUSH
12197: LD_INT 17
12199: PUSH
12200: LD_INT 18
12202: PUSH
12203: LD_INT 19
12205: PUSH
12206: LD_INT 20
12208: PUSH
12209: LD_INT 21
12211: PUSH
12212: LD_INT 22
12214: PUSH
12215: LD_INT 23
12217: PUSH
12218: LD_INT 24
12220: PUSH
12221: LD_INT 25
12223: PUSH
12224: LD_INT 26
12226: PUSH
12227: LD_INT 27
12229: PUSH
12230: LD_INT 28
12232: PUSH
12233: LD_INT 30
12235: PUSH
12236: LD_INT 31
12238: PUSH
12239: LD_INT 32
12241: PUSH
12242: LD_INT 33
12244: PUSH
12245: LD_INT 34
12247: PUSH
12248: LD_INT 36
12250: PUSH
12251: EMPTY
12252: LIST
12253: LIST
12254: LIST
12255: LIST
12256: LIST
12257: LIST
12258: LIST
12259: LIST
12260: LIST
12261: LIST
12262: LIST
12263: LIST
12264: LIST
12265: LIST
12266: LIST
12267: LIST
12268: LIST
12269: LIST
12270: LIST
12271: LIST
12272: LIST
12273: LIST
12274: LIST
12275: LIST
12276: LIST
12277: LIST
12278: LIST
12279: LIST
12280: LIST
12281: LIST
12282: LIST
12283: PUSH
12284: LD_INT 101
12286: PUSH
12287: LD_INT 102
12289: PUSH
12290: LD_INT 103
12292: PUSH
12293: LD_INT 104
12295: PUSH
12296: LD_INT 105
12298: PUSH
12299: LD_INT 106
12301: PUSH
12302: LD_INT 107
12304: PUSH
12305: LD_INT 108
12307: PUSH
12308: LD_INT 109
12310: PUSH
12311: LD_INT 110
12313: PUSH
12314: LD_INT 111
12316: PUSH
12317: LD_INT 112
12319: PUSH
12320: LD_INT 113
12322: PUSH
12323: LD_INT 114
12325: PUSH
12326: LD_INT 116
12328: PUSH
12329: LD_INT 117
12331: PUSH
12332: LD_INT 118
12334: PUSH
12335: EMPTY
12336: LIST
12337: LIST
12338: LIST
12339: LIST
12340: LIST
12341: LIST
12342: LIST
12343: LIST
12344: LIST
12345: LIST
12346: LIST
12347: LIST
12348: LIST
12349: LIST
12350: LIST
12351: LIST
12352: LIST
12353: PUSH
12354: EMPTY
12355: LIST
12356: LIST
12357: ST_TO_ADDR
12358: GO 13597
12360: LD_INT 14
12362: DOUBLE
12363: EQUAL
12364: IFTRUE 12368
12366: GO 12592
12368: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
12369: LD_ADDR_VAR 0 1
12373: PUSH
12374: LD_INT 1
12376: PUSH
12377: LD_INT 2
12379: PUSH
12380: LD_INT 3
12382: PUSH
12383: LD_INT 4
12385: PUSH
12386: LD_INT 5
12388: PUSH
12389: LD_INT 6
12391: PUSH
12392: LD_INT 7
12394: PUSH
12395: LD_INT 8
12397: PUSH
12398: LD_INT 9
12400: PUSH
12401: LD_INT 10
12403: PUSH
12404: LD_INT 11
12406: PUSH
12407: LD_INT 12
12409: PUSH
12410: LD_INT 13
12412: PUSH
12413: LD_INT 14
12415: PUSH
12416: LD_INT 15
12418: PUSH
12419: LD_INT 16
12421: PUSH
12422: LD_INT 17
12424: PUSH
12425: LD_INT 18
12427: PUSH
12428: LD_INT 19
12430: PUSH
12431: LD_INT 20
12433: PUSH
12434: LD_INT 21
12436: PUSH
12437: LD_INT 22
12439: PUSH
12440: LD_INT 23
12442: PUSH
12443: LD_INT 24
12445: PUSH
12446: LD_INT 25
12448: PUSH
12449: LD_INT 26
12451: PUSH
12452: LD_INT 27
12454: PUSH
12455: LD_INT 28
12457: PUSH
12458: LD_INT 29
12460: PUSH
12461: LD_INT 30
12463: PUSH
12464: LD_INT 31
12466: PUSH
12467: LD_INT 32
12469: PUSH
12470: LD_INT 33
12472: PUSH
12473: LD_INT 34
12475: PUSH
12476: LD_INT 36
12478: PUSH
12479: EMPTY
12480: LIST
12481: LIST
12482: LIST
12483: LIST
12484: LIST
12485: LIST
12486: LIST
12487: LIST
12488: LIST
12489: LIST
12490: LIST
12491: LIST
12492: LIST
12493: LIST
12494: LIST
12495: LIST
12496: LIST
12497: LIST
12498: LIST
12499: LIST
12500: LIST
12501: LIST
12502: LIST
12503: LIST
12504: LIST
12505: LIST
12506: LIST
12507: LIST
12508: LIST
12509: LIST
12510: LIST
12511: LIST
12512: LIST
12513: LIST
12514: LIST
12515: PUSH
12516: LD_INT 101
12518: PUSH
12519: LD_INT 102
12521: PUSH
12522: LD_INT 103
12524: PUSH
12525: LD_INT 104
12527: PUSH
12528: LD_INT 105
12530: PUSH
12531: LD_INT 106
12533: PUSH
12534: LD_INT 107
12536: PUSH
12537: LD_INT 108
12539: PUSH
12540: LD_INT 109
12542: PUSH
12543: LD_INT 110
12545: PUSH
12546: LD_INT 111
12548: PUSH
12549: LD_INT 112
12551: PUSH
12552: LD_INT 113
12554: PUSH
12555: LD_INT 114
12557: PUSH
12558: LD_INT 116
12560: PUSH
12561: LD_INT 117
12563: PUSH
12564: LD_INT 118
12566: PUSH
12567: EMPTY
12568: LIST
12569: LIST
12570: LIST
12571: LIST
12572: LIST
12573: LIST
12574: LIST
12575: LIST
12576: LIST
12577: LIST
12578: LIST
12579: LIST
12580: LIST
12581: LIST
12582: LIST
12583: LIST
12584: LIST
12585: PUSH
12586: EMPTY
12587: LIST
12588: LIST
12589: ST_TO_ADDR
12590: GO 13597
12592: LD_INT 15
12594: DOUBLE
12595: EQUAL
12596: IFTRUE 12600
12598: GO 12824
12600: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
12601: LD_ADDR_VAR 0 1
12605: PUSH
12606: LD_INT 1
12608: PUSH
12609: LD_INT 2
12611: PUSH
12612: LD_INT 3
12614: PUSH
12615: LD_INT 4
12617: PUSH
12618: LD_INT 5
12620: PUSH
12621: LD_INT 6
12623: PUSH
12624: LD_INT 7
12626: PUSH
12627: LD_INT 8
12629: PUSH
12630: LD_INT 9
12632: PUSH
12633: LD_INT 10
12635: PUSH
12636: LD_INT 11
12638: PUSH
12639: LD_INT 12
12641: PUSH
12642: LD_INT 13
12644: PUSH
12645: LD_INT 14
12647: PUSH
12648: LD_INT 15
12650: PUSH
12651: LD_INT 16
12653: PUSH
12654: LD_INT 17
12656: PUSH
12657: LD_INT 18
12659: PUSH
12660: LD_INT 19
12662: PUSH
12663: LD_INT 20
12665: PUSH
12666: LD_INT 21
12668: PUSH
12669: LD_INT 22
12671: PUSH
12672: LD_INT 23
12674: PUSH
12675: LD_INT 24
12677: PUSH
12678: LD_INT 25
12680: PUSH
12681: LD_INT 26
12683: PUSH
12684: LD_INT 27
12686: PUSH
12687: LD_INT 28
12689: PUSH
12690: LD_INT 29
12692: PUSH
12693: LD_INT 30
12695: PUSH
12696: LD_INT 31
12698: PUSH
12699: LD_INT 32
12701: PUSH
12702: LD_INT 33
12704: PUSH
12705: LD_INT 34
12707: PUSH
12708: LD_INT 36
12710: PUSH
12711: EMPTY
12712: LIST
12713: LIST
12714: LIST
12715: LIST
12716: LIST
12717: LIST
12718: LIST
12719: LIST
12720: LIST
12721: LIST
12722: LIST
12723: LIST
12724: LIST
12725: LIST
12726: LIST
12727: LIST
12728: LIST
12729: LIST
12730: LIST
12731: LIST
12732: LIST
12733: LIST
12734: LIST
12735: LIST
12736: LIST
12737: LIST
12738: LIST
12739: LIST
12740: LIST
12741: LIST
12742: LIST
12743: LIST
12744: LIST
12745: LIST
12746: LIST
12747: PUSH
12748: LD_INT 101
12750: PUSH
12751: LD_INT 102
12753: PUSH
12754: LD_INT 103
12756: PUSH
12757: LD_INT 104
12759: PUSH
12760: LD_INT 105
12762: PUSH
12763: LD_INT 106
12765: PUSH
12766: LD_INT 107
12768: PUSH
12769: LD_INT 108
12771: PUSH
12772: LD_INT 109
12774: PUSH
12775: LD_INT 110
12777: PUSH
12778: LD_INT 111
12780: PUSH
12781: LD_INT 112
12783: PUSH
12784: LD_INT 113
12786: PUSH
12787: LD_INT 114
12789: PUSH
12790: LD_INT 116
12792: PUSH
12793: LD_INT 117
12795: PUSH
12796: LD_INT 118
12798: PUSH
12799: EMPTY
12800: LIST
12801: LIST
12802: LIST
12803: LIST
12804: LIST
12805: LIST
12806: LIST
12807: LIST
12808: LIST
12809: LIST
12810: LIST
12811: LIST
12812: LIST
12813: LIST
12814: LIST
12815: LIST
12816: LIST
12817: PUSH
12818: EMPTY
12819: LIST
12820: LIST
12821: ST_TO_ADDR
12822: GO 13597
12824: LD_INT 16
12826: DOUBLE
12827: EQUAL
12828: IFTRUE 12832
12830: GO 12968
12832: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
12833: LD_ADDR_VAR 0 1
12837: PUSH
12838: LD_INT 2
12840: PUSH
12841: LD_INT 4
12843: PUSH
12844: LD_INT 5
12846: PUSH
12847: LD_INT 7
12849: PUSH
12850: LD_INT 11
12852: PUSH
12853: LD_INT 12
12855: PUSH
12856: LD_INT 15
12858: PUSH
12859: LD_INT 16
12861: PUSH
12862: LD_INT 20
12864: PUSH
12865: LD_INT 21
12867: PUSH
12868: LD_INT 22
12870: PUSH
12871: LD_INT 23
12873: PUSH
12874: LD_INT 25
12876: PUSH
12877: LD_INT 26
12879: PUSH
12880: LD_INT 30
12882: PUSH
12883: LD_INT 31
12885: PUSH
12886: LD_INT 32
12888: PUSH
12889: LD_INT 33
12891: PUSH
12892: LD_INT 34
12894: PUSH
12895: EMPTY
12896: LIST
12897: LIST
12898: LIST
12899: LIST
12900: LIST
12901: LIST
12902: LIST
12903: LIST
12904: LIST
12905: LIST
12906: LIST
12907: LIST
12908: LIST
12909: LIST
12910: LIST
12911: LIST
12912: LIST
12913: LIST
12914: LIST
12915: PUSH
12916: LD_INT 101
12918: PUSH
12919: LD_INT 102
12921: PUSH
12922: LD_INT 103
12924: PUSH
12925: LD_INT 106
12927: PUSH
12928: LD_INT 108
12930: PUSH
12931: LD_INT 112
12933: PUSH
12934: LD_INT 113
12936: PUSH
12937: LD_INT 114
12939: PUSH
12940: LD_INT 116
12942: PUSH
12943: LD_INT 117
12945: PUSH
12946: LD_INT 118
12948: PUSH
12949: EMPTY
12950: LIST
12951: LIST
12952: LIST
12953: LIST
12954: LIST
12955: LIST
12956: LIST
12957: LIST
12958: LIST
12959: LIST
12960: LIST
12961: PUSH
12962: EMPTY
12963: LIST
12964: LIST
12965: ST_TO_ADDR
12966: GO 13597
12968: LD_INT 17
12970: DOUBLE
12971: EQUAL
12972: IFTRUE 12976
12974: GO 13200
12976: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
12977: LD_ADDR_VAR 0 1
12981: PUSH
12982: LD_INT 1
12984: PUSH
12985: LD_INT 2
12987: PUSH
12988: LD_INT 3
12990: PUSH
12991: LD_INT 4
12993: PUSH
12994: LD_INT 5
12996: PUSH
12997: LD_INT 6
12999: PUSH
13000: LD_INT 7
13002: PUSH
13003: LD_INT 8
13005: PUSH
13006: LD_INT 9
13008: PUSH
13009: LD_INT 10
13011: PUSH
13012: LD_INT 11
13014: PUSH
13015: LD_INT 12
13017: PUSH
13018: LD_INT 13
13020: PUSH
13021: LD_INT 14
13023: PUSH
13024: LD_INT 15
13026: PUSH
13027: LD_INT 16
13029: PUSH
13030: LD_INT 17
13032: PUSH
13033: LD_INT 18
13035: PUSH
13036: LD_INT 19
13038: PUSH
13039: LD_INT 20
13041: PUSH
13042: LD_INT 21
13044: PUSH
13045: LD_INT 22
13047: PUSH
13048: LD_INT 23
13050: PUSH
13051: LD_INT 24
13053: PUSH
13054: LD_INT 25
13056: PUSH
13057: LD_INT 26
13059: PUSH
13060: LD_INT 27
13062: PUSH
13063: LD_INT 28
13065: PUSH
13066: LD_INT 29
13068: PUSH
13069: LD_INT 30
13071: PUSH
13072: LD_INT 31
13074: PUSH
13075: LD_INT 32
13077: PUSH
13078: LD_INT 33
13080: PUSH
13081: LD_INT 34
13083: PUSH
13084: LD_INT 36
13086: PUSH
13087: EMPTY
13088: LIST
13089: LIST
13090: LIST
13091: LIST
13092: LIST
13093: LIST
13094: LIST
13095: LIST
13096: LIST
13097: LIST
13098: LIST
13099: LIST
13100: LIST
13101: LIST
13102: LIST
13103: LIST
13104: LIST
13105: LIST
13106: LIST
13107: LIST
13108: LIST
13109: LIST
13110: LIST
13111: LIST
13112: LIST
13113: LIST
13114: LIST
13115: LIST
13116: LIST
13117: LIST
13118: LIST
13119: LIST
13120: LIST
13121: LIST
13122: LIST
13123: PUSH
13124: LD_INT 101
13126: PUSH
13127: LD_INT 102
13129: PUSH
13130: LD_INT 103
13132: PUSH
13133: LD_INT 104
13135: PUSH
13136: LD_INT 105
13138: PUSH
13139: LD_INT 106
13141: PUSH
13142: LD_INT 107
13144: PUSH
13145: LD_INT 108
13147: PUSH
13148: LD_INT 109
13150: PUSH
13151: LD_INT 110
13153: PUSH
13154: LD_INT 111
13156: PUSH
13157: LD_INT 112
13159: PUSH
13160: LD_INT 113
13162: PUSH
13163: LD_INT 114
13165: PUSH
13166: LD_INT 116
13168: PUSH
13169: LD_INT 117
13171: PUSH
13172: LD_INT 118
13174: PUSH
13175: EMPTY
13176: LIST
13177: LIST
13178: LIST
13179: LIST
13180: LIST
13181: LIST
13182: LIST
13183: LIST
13184: LIST
13185: LIST
13186: LIST
13187: LIST
13188: LIST
13189: LIST
13190: LIST
13191: LIST
13192: LIST
13193: PUSH
13194: EMPTY
13195: LIST
13196: LIST
13197: ST_TO_ADDR
13198: GO 13597
13200: LD_INT 18
13202: DOUBLE
13203: EQUAL
13204: IFTRUE 13208
13206: GO 13356
13208: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
13209: LD_ADDR_VAR 0 1
13213: PUSH
13214: LD_INT 2
13216: PUSH
13217: LD_INT 4
13219: PUSH
13220: LD_INT 5
13222: PUSH
13223: LD_INT 7
13225: PUSH
13226: LD_INT 11
13228: PUSH
13229: LD_INT 12
13231: PUSH
13232: LD_INT 15
13234: PUSH
13235: LD_INT 16
13237: PUSH
13238: LD_INT 20
13240: PUSH
13241: LD_INT 21
13243: PUSH
13244: LD_INT 22
13246: PUSH
13247: LD_INT 23
13249: PUSH
13250: LD_INT 25
13252: PUSH
13253: LD_INT 26
13255: PUSH
13256: LD_INT 30
13258: PUSH
13259: LD_INT 31
13261: PUSH
13262: LD_INT 32
13264: PUSH
13265: LD_INT 33
13267: PUSH
13268: LD_INT 34
13270: PUSH
13271: LD_INT 35
13273: PUSH
13274: LD_INT 36
13276: PUSH
13277: EMPTY
13278: LIST
13279: LIST
13280: LIST
13281: LIST
13282: LIST
13283: LIST
13284: LIST
13285: LIST
13286: LIST
13287: LIST
13288: LIST
13289: LIST
13290: LIST
13291: LIST
13292: LIST
13293: LIST
13294: LIST
13295: LIST
13296: LIST
13297: LIST
13298: LIST
13299: PUSH
13300: LD_INT 101
13302: PUSH
13303: LD_INT 102
13305: PUSH
13306: LD_INT 103
13308: PUSH
13309: LD_INT 106
13311: PUSH
13312: LD_INT 108
13314: PUSH
13315: LD_INT 112
13317: PUSH
13318: LD_INT 113
13320: PUSH
13321: LD_INT 114
13323: PUSH
13324: LD_INT 115
13326: PUSH
13327: LD_INT 116
13329: PUSH
13330: LD_INT 117
13332: PUSH
13333: LD_INT 118
13335: PUSH
13336: EMPTY
13337: LIST
13338: LIST
13339: LIST
13340: LIST
13341: LIST
13342: LIST
13343: LIST
13344: LIST
13345: LIST
13346: LIST
13347: LIST
13348: LIST
13349: PUSH
13350: EMPTY
13351: LIST
13352: LIST
13353: ST_TO_ADDR
13354: GO 13597
13356: LD_INT 19
13358: DOUBLE
13359: EQUAL
13360: IFTRUE 13364
13362: GO 13596
13364: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
13365: LD_ADDR_VAR 0 1
13369: PUSH
13370: LD_INT 1
13372: PUSH
13373: LD_INT 2
13375: PUSH
13376: LD_INT 3
13378: PUSH
13379: LD_INT 4
13381: PUSH
13382: LD_INT 5
13384: PUSH
13385: LD_INT 6
13387: PUSH
13388: LD_INT 7
13390: PUSH
13391: LD_INT 8
13393: PUSH
13394: LD_INT 9
13396: PUSH
13397: LD_INT 10
13399: PUSH
13400: LD_INT 11
13402: PUSH
13403: LD_INT 12
13405: PUSH
13406: LD_INT 13
13408: PUSH
13409: LD_INT 14
13411: PUSH
13412: LD_INT 15
13414: PUSH
13415: LD_INT 16
13417: PUSH
13418: LD_INT 17
13420: PUSH
13421: LD_INT 18
13423: PUSH
13424: LD_INT 19
13426: PUSH
13427: LD_INT 20
13429: PUSH
13430: LD_INT 21
13432: PUSH
13433: LD_INT 22
13435: PUSH
13436: LD_INT 23
13438: PUSH
13439: LD_INT 24
13441: PUSH
13442: LD_INT 25
13444: PUSH
13445: LD_INT 26
13447: PUSH
13448: LD_INT 27
13450: PUSH
13451: LD_INT 28
13453: PUSH
13454: LD_INT 29
13456: PUSH
13457: LD_INT 30
13459: PUSH
13460: LD_INT 31
13462: PUSH
13463: LD_INT 32
13465: PUSH
13466: LD_INT 33
13468: PUSH
13469: LD_INT 34
13471: PUSH
13472: LD_INT 35
13474: PUSH
13475: LD_INT 36
13477: PUSH
13478: EMPTY
13479: LIST
13480: LIST
13481: LIST
13482: LIST
13483: LIST
13484: LIST
13485: LIST
13486: LIST
13487: LIST
13488: LIST
13489: LIST
13490: LIST
13491: LIST
13492: LIST
13493: LIST
13494: LIST
13495: LIST
13496: LIST
13497: LIST
13498: LIST
13499: LIST
13500: LIST
13501: LIST
13502: LIST
13503: LIST
13504: LIST
13505: LIST
13506: LIST
13507: LIST
13508: LIST
13509: LIST
13510: LIST
13511: LIST
13512: LIST
13513: LIST
13514: LIST
13515: PUSH
13516: LD_INT 101
13518: PUSH
13519: LD_INT 102
13521: PUSH
13522: LD_INT 103
13524: PUSH
13525: LD_INT 104
13527: PUSH
13528: LD_INT 105
13530: PUSH
13531: LD_INT 106
13533: PUSH
13534: LD_INT 107
13536: PUSH
13537: LD_INT 108
13539: PUSH
13540: LD_INT 109
13542: PUSH
13543: LD_INT 110
13545: PUSH
13546: LD_INT 111
13548: PUSH
13549: LD_INT 112
13551: PUSH
13552: LD_INT 113
13554: PUSH
13555: LD_INT 114
13557: PUSH
13558: LD_INT 115
13560: PUSH
13561: LD_INT 116
13563: PUSH
13564: LD_INT 117
13566: PUSH
13567: LD_INT 118
13569: PUSH
13570: EMPTY
13571: LIST
13572: LIST
13573: LIST
13574: LIST
13575: LIST
13576: LIST
13577: LIST
13578: LIST
13579: LIST
13580: LIST
13581: LIST
13582: LIST
13583: LIST
13584: LIST
13585: LIST
13586: LIST
13587: LIST
13588: LIST
13589: PUSH
13590: EMPTY
13591: LIST
13592: LIST
13593: ST_TO_ADDR
13594: GO 13597
13596: POP
// end else
13597: GO 13828
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
13599: LD_ADDR_VAR 0 1
13603: PUSH
13604: LD_INT 1
13606: PUSH
13607: LD_INT 2
13609: PUSH
13610: LD_INT 3
13612: PUSH
13613: LD_INT 4
13615: PUSH
13616: LD_INT 5
13618: PUSH
13619: LD_INT 6
13621: PUSH
13622: LD_INT 7
13624: PUSH
13625: LD_INT 8
13627: PUSH
13628: LD_INT 9
13630: PUSH
13631: LD_INT 10
13633: PUSH
13634: LD_INT 11
13636: PUSH
13637: LD_INT 12
13639: PUSH
13640: LD_INT 13
13642: PUSH
13643: LD_INT 14
13645: PUSH
13646: LD_INT 15
13648: PUSH
13649: LD_INT 16
13651: PUSH
13652: LD_INT 17
13654: PUSH
13655: LD_INT 18
13657: PUSH
13658: LD_INT 19
13660: PUSH
13661: LD_INT 20
13663: PUSH
13664: LD_INT 21
13666: PUSH
13667: LD_INT 22
13669: PUSH
13670: LD_INT 23
13672: PUSH
13673: LD_INT 24
13675: PUSH
13676: LD_INT 25
13678: PUSH
13679: LD_INT 26
13681: PUSH
13682: LD_INT 27
13684: PUSH
13685: LD_INT 28
13687: PUSH
13688: LD_INT 29
13690: PUSH
13691: LD_INT 30
13693: PUSH
13694: LD_INT 31
13696: PUSH
13697: LD_INT 32
13699: PUSH
13700: LD_INT 33
13702: PUSH
13703: LD_INT 34
13705: PUSH
13706: LD_INT 35
13708: PUSH
13709: LD_INT 36
13711: PUSH
13712: EMPTY
13713: LIST
13714: LIST
13715: LIST
13716: LIST
13717: LIST
13718: LIST
13719: LIST
13720: LIST
13721: LIST
13722: LIST
13723: LIST
13724: LIST
13725: LIST
13726: LIST
13727: LIST
13728: LIST
13729: LIST
13730: LIST
13731: LIST
13732: LIST
13733: LIST
13734: LIST
13735: LIST
13736: LIST
13737: LIST
13738: LIST
13739: LIST
13740: LIST
13741: LIST
13742: LIST
13743: LIST
13744: LIST
13745: LIST
13746: LIST
13747: LIST
13748: LIST
13749: PUSH
13750: LD_INT 101
13752: PUSH
13753: LD_INT 102
13755: PUSH
13756: LD_INT 103
13758: PUSH
13759: LD_INT 104
13761: PUSH
13762: LD_INT 105
13764: PUSH
13765: LD_INT 106
13767: PUSH
13768: LD_INT 107
13770: PUSH
13771: LD_INT 108
13773: PUSH
13774: LD_INT 109
13776: PUSH
13777: LD_INT 110
13779: PUSH
13780: LD_INT 111
13782: PUSH
13783: LD_INT 112
13785: PUSH
13786: LD_INT 113
13788: PUSH
13789: LD_INT 114
13791: PUSH
13792: LD_INT 115
13794: PUSH
13795: LD_INT 116
13797: PUSH
13798: LD_INT 117
13800: PUSH
13801: LD_INT 118
13803: PUSH
13804: EMPTY
13805: LIST
13806: LIST
13807: LIST
13808: LIST
13809: LIST
13810: LIST
13811: LIST
13812: LIST
13813: LIST
13814: LIST
13815: LIST
13816: LIST
13817: LIST
13818: LIST
13819: LIST
13820: LIST
13821: LIST
13822: LIST
13823: PUSH
13824: EMPTY
13825: LIST
13826: LIST
13827: ST_TO_ADDR
// if result then
13828: LD_VAR 0 1
13832: IFFALSE 14121
// begin normal :=  ;
13834: LD_ADDR_VAR 0 3
13838: PUSH
13839: LD_STRING 
13841: ST_TO_ADDR
// hardcore :=  ;
13842: LD_ADDR_VAR 0 4
13846: PUSH
13847: LD_STRING 
13849: ST_TO_ADDR
// for i = 1 to normalCounter do
13850: LD_ADDR_VAR 0 5
13854: PUSH
13855: DOUBLE
13856: LD_INT 1
13858: DEC
13859: ST_TO_ADDR
13860: LD_EXP 72
13864: PUSH
13865: FOR_TO
13866: IFFALSE 13967
// begin tmp := 0 ;
13868: LD_ADDR_VAR 0 2
13872: PUSH
13873: LD_STRING 0
13875: ST_TO_ADDR
// if result [ 1 ] then
13876: LD_VAR 0 1
13880: PUSH
13881: LD_INT 1
13883: ARRAY
13884: IFFALSE 13949
// if result [ 1 ] [ 1 ] = i then
13886: LD_VAR 0 1
13890: PUSH
13891: LD_INT 1
13893: ARRAY
13894: PUSH
13895: LD_INT 1
13897: ARRAY
13898: PUSH
13899: LD_VAR 0 5
13903: EQUAL
13904: IFFALSE 13949
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
13906: LD_ADDR_VAR 0 1
13910: PUSH
13911: LD_VAR 0 1
13915: PPUSH
13916: LD_INT 1
13918: PPUSH
13919: LD_VAR 0 1
13923: PUSH
13924: LD_INT 1
13926: ARRAY
13927: PPUSH
13928: LD_INT 1
13930: PPUSH
13931: CALL_OW 3
13935: PPUSH
13936: CALL_OW 1
13940: ST_TO_ADDR
// tmp := 1 ;
13941: LD_ADDR_VAR 0 2
13945: PUSH
13946: LD_STRING 1
13948: ST_TO_ADDR
// end ; normal := normal & tmp ;
13949: LD_ADDR_VAR 0 3
13953: PUSH
13954: LD_VAR 0 3
13958: PUSH
13959: LD_VAR 0 2
13963: STR
13964: ST_TO_ADDR
// end ;
13965: GO 13865
13967: POP
13968: POP
// for i = 1 to hardcoreCounter do
13969: LD_ADDR_VAR 0 5
13973: PUSH
13974: DOUBLE
13975: LD_INT 1
13977: DEC
13978: ST_TO_ADDR
13979: LD_EXP 73
13983: PUSH
13984: FOR_TO
13985: IFFALSE 14090
// begin tmp := 0 ;
13987: LD_ADDR_VAR 0 2
13991: PUSH
13992: LD_STRING 0
13994: ST_TO_ADDR
// if result [ 2 ] then
13995: LD_VAR 0 1
13999: PUSH
14000: LD_INT 2
14002: ARRAY
14003: IFFALSE 14072
// if result [ 2 ] [ 1 ] = 100 + i then
14005: LD_VAR 0 1
14009: PUSH
14010: LD_INT 2
14012: ARRAY
14013: PUSH
14014: LD_INT 1
14016: ARRAY
14017: PUSH
14018: LD_INT 100
14020: PUSH
14021: LD_VAR 0 5
14025: PLUS
14026: EQUAL
14027: IFFALSE 14072
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
14029: LD_ADDR_VAR 0 1
14033: PUSH
14034: LD_VAR 0 1
14038: PPUSH
14039: LD_INT 2
14041: PPUSH
14042: LD_VAR 0 1
14046: PUSH
14047: LD_INT 2
14049: ARRAY
14050: PPUSH
14051: LD_INT 1
14053: PPUSH
14054: CALL_OW 3
14058: PPUSH
14059: CALL_OW 1
14063: ST_TO_ADDR
// tmp := 1 ;
14064: LD_ADDR_VAR 0 2
14068: PUSH
14069: LD_STRING 1
14071: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
14072: LD_ADDR_VAR 0 4
14076: PUSH
14077: LD_VAR 0 4
14081: PUSH
14082: LD_VAR 0 2
14086: STR
14087: ST_TO_ADDR
// end ;
14088: GO 13984
14090: POP
14091: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
14092: LD_STRING getStreamItemsFromMission("
14094: PUSH
14095: LD_VAR 0 3
14099: STR
14100: PUSH
14101: LD_STRING ","
14103: STR
14104: PUSH
14105: LD_VAR 0 4
14109: STR
14110: PUSH
14111: LD_STRING ")
14113: STR
14114: PPUSH
14115: CALL_OW 559
// end else
14119: GO 14128
// ToLua ( getStreamItemsFromMission("","") ) ;
14121: LD_STRING getStreamItemsFromMission("","")
14123: PPUSH
14124: CALL_OW 559
// end ;
14128: LD_VAR 0 1
14132: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
14133: LD_EXP 71
14137: PUSH
14138: LD_EXP 76
14142: AND
14143: IFFALSE 14267
14145: GO 14147
14147: DISABLE
14148: LD_INT 0
14150: PPUSH
14151: PPUSH
// begin enable ;
14152: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
14153: LD_ADDR_VAR 0 2
14157: PUSH
14158: LD_INT 22
14160: PUSH
14161: LD_OWVAR 2
14165: PUSH
14166: EMPTY
14167: LIST
14168: LIST
14169: PUSH
14170: LD_INT 2
14172: PUSH
14173: LD_INT 34
14175: PUSH
14176: LD_INT 7
14178: PUSH
14179: EMPTY
14180: LIST
14181: LIST
14182: PUSH
14183: LD_INT 34
14185: PUSH
14186: LD_INT 45
14188: PUSH
14189: EMPTY
14190: LIST
14191: LIST
14192: PUSH
14193: LD_INT 34
14195: PUSH
14196: LD_INT 28
14198: PUSH
14199: EMPTY
14200: LIST
14201: LIST
14202: PUSH
14203: LD_INT 34
14205: PUSH
14206: LD_INT 47
14208: PUSH
14209: EMPTY
14210: LIST
14211: LIST
14212: PUSH
14213: EMPTY
14214: LIST
14215: LIST
14216: LIST
14217: LIST
14218: LIST
14219: PUSH
14220: EMPTY
14221: LIST
14222: LIST
14223: PPUSH
14224: CALL_OW 69
14228: ST_TO_ADDR
// if not tmp then
14229: LD_VAR 0 2
14233: NOT
14234: IFFALSE 14238
// exit ;
14236: GO 14267
// for i in tmp do
14238: LD_ADDR_VAR 0 1
14242: PUSH
14243: LD_VAR 0 2
14247: PUSH
14248: FOR_IN
14249: IFFALSE 14265
// begin SetLives ( i , 0 ) ;
14251: LD_VAR 0 1
14255: PPUSH
14256: LD_INT 0
14258: PPUSH
14259: CALL_OW 234
// end ;
14263: GO 14248
14265: POP
14266: POP
// end ;
14267: PPOPN 2
14269: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
14270: LD_EXP 71
14274: PUSH
14275: LD_EXP 77
14279: AND
14280: IFFALSE 14364
14282: GO 14284
14284: DISABLE
14285: LD_INT 0
14287: PPUSH
14288: PPUSH
// begin enable ;
14289: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
14290: LD_ADDR_VAR 0 2
14294: PUSH
14295: LD_INT 22
14297: PUSH
14298: LD_OWVAR 2
14302: PUSH
14303: EMPTY
14304: LIST
14305: LIST
14306: PUSH
14307: LD_INT 32
14309: PUSH
14310: LD_INT 3
14312: PUSH
14313: EMPTY
14314: LIST
14315: LIST
14316: PUSH
14317: EMPTY
14318: LIST
14319: LIST
14320: PPUSH
14321: CALL_OW 69
14325: ST_TO_ADDR
// if not tmp then
14326: LD_VAR 0 2
14330: NOT
14331: IFFALSE 14335
// exit ;
14333: GO 14364
// for i in tmp do
14335: LD_ADDR_VAR 0 1
14339: PUSH
14340: LD_VAR 0 2
14344: PUSH
14345: FOR_IN
14346: IFFALSE 14362
// begin SetLives ( i , 0 ) ;
14348: LD_VAR 0 1
14352: PPUSH
14353: LD_INT 0
14355: PPUSH
14356: CALL_OW 234
// end ;
14360: GO 14345
14362: POP
14363: POP
// end ;
14364: PPOPN 2
14366: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
14367: LD_EXP 71
14371: PUSH
14372: LD_EXP 74
14376: AND
14377: IFFALSE 14470
14379: GO 14381
14381: DISABLE
14382: LD_INT 0
14384: PPUSH
// begin enable ;
14385: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
14386: LD_ADDR_VAR 0 1
14390: PUSH
14391: LD_INT 22
14393: PUSH
14394: LD_OWVAR 2
14398: PUSH
14399: EMPTY
14400: LIST
14401: LIST
14402: PUSH
14403: LD_INT 2
14405: PUSH
14406: LD_INT 25
14408: PUSH
14409: LD_INT 5
14411: PUSH
14412: EMPTY
14413: LIST
14414: LIST
14415: PUSH
14416: LD_INT 25
14418: PUSH
14419: LD_INT 9
14421: PUSH
14422: EMPTY
14423: LIST
14424: LIST
14425: PUSH
14426: LD_INT 25
14428: PUSH
14429: LD_INT 8
14431: PUSH
14432: EMPTY
14433: LIST
14434: LIST
14435: PUSH
14436: EMPTY
14437: LIST
14438: LIST
14439: LIST
14440: LIST
14441: PUSH
14442: EMPTY
14443: LIST
14444: LIST
14445: PPUSH
14446: CALL_OW 69
14450: PUSH
14451: FOR_IN
14452: IFFALSE 14468
// begin SetClass ( i , 1 ) ;
14454: LD_VAR 0 1
14458: PPUSH
14459: LD_INT 1
14461: PPUSH
14462: CALL_OW 336
// end ;
14466: GO 14451
14468: POP
14469: POP
// end ;
14470: PPOPN 1
14472: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
14473: LD_EXP 71
14477: PUSH
14478: LD_EXP 75
14482: AND
14483: PUSH
14484: LD_OWVAR 65
14488: PUSH
14489: LD_INT 7
14491: LESS
14492: AND
14493: IFFALSE 14507
14495: GO 14497
14497: DISABLE
// begin enable ;
14498: ENABLE
// game_speed := 7 ;
14499: LD_ADDR_OWVAR 65
14503: PUSH
14504: LD_INT 7
14506: ST_TO_ADDR
// end ;
14507: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
14508: LD_EXP 71
14512: PUSH
14513: LD_EXP 78
14517: AND
14518: IFFALSE 14720
14520: GO 14522
14522: DISABLE
14523: LD_INT 0
14525: PPUSH
14526: PPUSH
14527: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
14528: LD_ADDR_VAR 0 3
14532: PUSH
14533: LD_INT 81
14535: PUSH
14536: LD_OWVAR 2
14540: PUSH
14541: EMPTY
14542: LIST
14543: LIST
14544: PUSH
14545: LD_INT 21
14547: PUSH
14548: LD_INT 1
14550: PUSH
14551: EMPTY
14552: LIST
14553: LIST
14554: PUSH
14555: EMPTY
14556: LIST
14557: LIST
14558: PPUSH
14559: CALL_OW 69
14563: ST_TO_ADDR
// if not tmp then
14564: LD_VAR 0 3
14568: NOT
14569: IFFALSE 14573
// exit ;
14571: GO 14720
// if tmp > 5 then
14573: LD_VAR 0 3
14577: PUSH
14578: LD_INT 5
14580: GREATER
14581: IFFALSE 14593
// k := 5 else
14583: LD_ADDR_VAR 0 2
14587: PUSH
14588: LD_INT 5
14590: ST_TO_ADDR
14591: GO 14603
// k := tmp ;
14593: LD_ADDR_VAR 0 2
14597: PUSH
14598: LD_VAR 0 3
14602: ST_TO_ADDR
// for i := 1 to k do
14603: LD_ADDR_VAR 0 1
14607: PUSH
14608: DOUBLE
14609: LD_INT 1
14611: DEC
14612: ST_TO_ADDR
14613: LD_VAR 0 2
14617: PUSH
14618: FOR_TO
14619: IFFALSE 14718
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
14621: LD_VAR 0 3
14625: PUSH
14626: LD_VAR 0 1
14630: ARRAY
14631: PPUSH
14632: LD_VAR 0 1
14636: PUSH
14637: LD_INT 4
14639: MOD
14640: PUSH
14641: LD_INT 1
14643: PLUS
14644: PPUSH
14645: CALL_OW 259
14649: PUSH
14650: LD_INT 10
14652: LESS
14653: IFFALSE 14716
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
14655: LD_VAR 0 3
14659: PUSH
14660: LD_VAR 0 1
14664: ARRAY
14665: PPUSH
14666: LD_VAR 0 1
14670: PUSH
14671: LD_INT 4
14673: MOD
14674: PUSH
14675: LD_INT 1
14677: PLUS
14678: PPUSH
14679: LD_VAR 0 3
14683: PUSH
14684: LD_VAR 0 1
14688: ARRAY
14689: PPUSH
14690: LD_VAR 0 1
14694: PUSH
14695: LD_INT 4
14697: MOD
14698: PUSH
14699: LD_INT 1
14701: PLUS
14702: PPUSH
14703: CALL_OW 259
14707: PUSH
14708: LD_INT 1
14710: PLUS
14711: PPUSH
14712: CALL_OW 237
14716: GO 14618
14718: POP
14719: POP
// end ;
14720: PPOPN 3
14722: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
14723: LD_EXP 71
14727: PUSH
14728: LD_EXP 79
14732: AND
14733: IFFALSE 14753
14735: GO 14737
14737: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
14738: LD_INT 4
14740: PPUSH
14741: LD_OWVAR 2
14745: PPUSH
14746: LD_INT 0
14748: PPUSH
14749: CALL_OW 324
14753: END
// every 0 0$1 trigger StreamModeActive and sShovel do
14754: LD_EXP 71
14758: PUSH
14759: LD_EXP 108
14763: AND
14764: IFFALSE 14784
14766: GO 14768
14768: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
14769: LD_INT 19
14771: PPUSH
14772: LD_OWVAR 2
14776: PPUSH
14777: LD_INT 0
14779: PPUSH
14780: CALL_OW 324
14784: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
14785: LD_EXP 71
14789: PUSH
14790: LD_EXP 80
14794: AND
14795: IFFALSE 14897
14797: GO 14799
14799: DISABLE
14800: LD_INT 0
14802: PPUSH
14803: PPUSH
// begin enable ;
14804: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
14805: LD_ADDR_VAR 0 2
14809: PUSH
14810: LD_INT 22
14812: PUSH
14813: LD_OWVAR 2
14817: PUSH
14818: EMPTY
14819: LIST
14820: LIST
14821: PUSH
14822: LD_INT 2
14824: PUSH
14825: LD_INT 34
14827: PUSH
14828: LD_INT 11
14830: PUSH
14831: EMPTY
14832: LIST
14833: LIST
14834: PUSH
14835: LD_INT 34
14837: PUSH
14838: LD_INT 30
14840: PUSH
14841: EMPTY
14842: LIST
14843: LIST
14844: PUSH
14845: EMPTY
14846: LIST
14847: LIST
14848: LIST
14849: PUSH
14850: EMPTY
14851: LIST
14852: LIST
14853: PPUSH
14854: CALL_OW 69
14858: ST_TO_ADDR
// if not tmp then
14859: LD_VAR 0 2
14863: NOT
14864: IFFALSE 14868
// exit ;
14866: GO 14897
// for i in tmp do
14868: LD_ADDR_VAR 0 1
14872: PUSH
14873: LD_VAR 0 2
14877: PUSH
14878: FOR_IN
14879: IFFALSE 14895
// begin SetLives ( i , 0 ) ;
14881: LD_VAR 0 1
14885: PPUSH
14886: LD_INT 0
14888: PPUSH
14889: CALL_OW 234
// end ;
14893: GO 14878
14895: POP
14896: POP
// end ;
14897: PPOPN 2
14899: END
// every 0 0$1 trigger StreamModeActive and sBunker do
14900: LD_EXP 71
14904: PUSH
14905: LD_EXP 81
14909: AND
14910: IFFALSE 14930
14912: GO 14914
14914: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
14915: LD_INT 32
14917: PPUSH
14918: LD_OWVAR 2
14922: PPUSH
14923: LD_INT 0
14925: PPUSH
14926: CALL_OW 324
14930: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
14931: LD_EXP 71
14935: PUSH
14936: LD_EXP 82
14940: AND
14941: IFFALSE 15122
14943: GO 14945
14945: DISABLE
14946: LD_INT 0
14948: PPUSH
14949: PPUSH
14950: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
14951: LD_ADDR_VAR 0 2
14955: PUSH
14956: LD_INT 22
14958: PUSH
14959: LD_OWVAR 2
14963: PUSH
14964: EMPTY
14965: LIST
14966: LIST
14967: PUSH
14968: LD_INT 33
14970: PUSH
14971: LD_INT 3
14973: PUSH
14974: EMPTY
14975: LIST
14976: LIST
14977: PUSH
14978: EMPTY
14979: LIST
14980: LIST
14981: PPUSH
14982: CALL_OW 69
14986: ST_TO_ADDR
// if not tmp then
14987: LD_VAR 0 2
14991: NOT
14992: IFFALSE 14996
// exit ;
14994: GO 15122
// side := 0 ;
14996: LD_ADDR_VAR 0 3
15000: PUSH
15001: LD_INT 0
15003: ST_TO_ADDR
// for i := 1 to 8 do
15004: LD_ADDR_VAR 0 1
15008: PUSH
15009: DOUBLE
15010: LD_INT 1
15012: DEC
15013: ST_TO_ADDR
15014: LD_INT 8
15016: PUSH
15017: FOR_TO
15018: IFFALSE 15066
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
15020: LD_OWVAR 2
15024: PUSH
15025: LD_VAR 0 1
15029: NONEQUAL
15030: PUSH
15031: LD_OWVAR 2
15035: PPUSH
15036: LD_VAR 0 1
15040: PPUSH
15041: CALL_OW 81
15045: PUSH
15046: LD_INT 2
15048: EQUAL
15049: AND
15050: IFFALSE 15064
// begin side := i ;
15052: LD_ADDR_VAR 0 3
15056: PUSH
15057: LD_VAR 0 1
15061: ST_TO_ADDR
// break ;
15062: GO 15066
// end ;
15064: GO 15017
15066: POP
15067: POP
// if not side then
15068: LD_VAR 0 3
15072: NOT
15073: IFFALSE 15077
// exit ;
15075: GO 15122
// for i := 1 to tmp do
15077: LD_ADDR_VAR 0 1
15081: PUSH
15082: DOUBLE
15083: LD_INT 1
15085: DEC
15086: ST_TO_ADDR
15087: LD_VAR 0 2
15091: PUSH
15092: FOR_TO
15093: IFFALSE 15120
// if Prob ( 60 ) then
15095: LD_INT 60
15097: PPUSH
15098: CALL_OW 13
15102: IFFALSE 15118
// SetSide ( i , side ) ;
15104: LD_VAR 0 1
15108: PPUSH
15109: LD_VAR 0 3
15113: PPUSH
15114: CALL_OW 235
15118: GO 15092
15120: POP
15121: POP
// end ;
15122: PPOPN 3
15124: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
15125: LD_EXP 71
15129: PUSH
15130: LD_EXP 84
15134: AND
15135: IFFALSE 15254
15137: GO 15139
15139: DISABLE
15140: LD_INT 0
15142: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
15143: LD_ADDR_VAR 0 1
15147: PUSH
15148: LD_INT 22
15150: PUSH
15151: LD_OWVAR 2
15155: PUSH
15156: EMPTY
15157: LIST
15158: LIST
15159: PUSH
15160: LD_INT 21
15162: PUSH
15163: LD_INT 1
15165: PUSH
15166: EMPTY
15167: LIST
15168: LIST
15169: PUSH
15170: LD_INT 3
15172: PUSH
15173: LD_INT 23
15175: PUSH
15176: LD_INT 0
15178: PUSH
15179: EMPTY
15180: LIST
15181: LIST
15182: PUSH
15183: EMPTY
15184: LIST
15185: LIST
15186: PUSH
15187: EMPTY
15188: LIST
15189: LIST
15190: LIST
15191: PPUSH
15192: CALL_OW 69
15196: PUSH
15197: FOR_IN
15198: IFFALSE 15252
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
15200: LD_VAR 0 1
15204: PPUSH
15205: CALL_OW 257
15209: PUSH
15210: LD_INT 1
15212: PUSH
15213: LD_INT 2
15215: PUSH
15216: LD_INT 3
15218: PUSH
15219: LD_INT 4
15221: PUSH
15222: EMPTY
15223: LIST
15224: LIST
15225: LIST
15226: LIST
15227: IN
15228: IFFALSE 15250
// SetClass ( un , rand ( 1 , 4 ) ) ;
15230: LD_VAR 0 1
15234: PPUSH
15235: LD_INT 1
15237: PPUSH
15238: LD_INT 4
15240: PPUSH
15241: CALL_OW 12
15245: PPUSH
15246: CALL_OW 336
15250: GO 15197
15252: POP
15253: POP
// end ;
15254: PPOPN 1
15256: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
15257: LD_EXP 71
15261: PUSH
15262: LD_EXP 83
15266: AND
15267: IFFALSE 15346
15269: GO 15271
15271: DISABLE
15272: LD_INT 0
15274: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
15275: LD_ADDR_VAR 0 1
15279: PUSH
15280: LD_INT 22
15282: PUSH
15283: LD_OWVAR 2
15287: PUSH
15288: EMPTY
15289: LIST
15290: LIST
15291: PUSH
15292: LD_INT 21
15294: PUSH
15295: LD_INT 3
15297: PUSH
15298: EMPTY
15299: LIST
15300: LIST
15301: PUSH
15302: EMPTY
15303: LIST
15304: LIST
15305: PPUSH
15306: CALL_OW 69
15310: ST_TO_ADDR
// if not tmp then
15311: LD_VAR 0 1
15315: NOT
15316: IFFALSE 15320
// exit ;
15318: GO 15346
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
15320: LD_VAR 0 1
15324: PUSH
15325: LD_INT 1
15327: PPUSH
15328: LD_VAR 0 1
15332: PPUSH
15333: CALL_OW 12
15337: ARRAY
15338: PPUSH
15339: LD_INT 100
15341: PPUSH
15342: CALL_OW 234
// end ;
15346: PPOPN 1
15348: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
15349: LD_EXP 71
15353: PUSH
15354: LD_EXP 85
15358: AND
15359: IFFALSE 15457
15361: GO 15363
15363: DISABLE
15364: LD_INT 0
15366: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15367: LD_ADDR_VAR 0 1
15371: PUSH
15372: LD_INT 22
15374: PUSH
15375: LD_OWVAR 2
15379: PUSH
15380: EMPTY
15381: LIST
15382: LIST
15383: PUSH
15384: LD_INT 21
15386: PUSH
15387: LD_INT 1
15389: PUSH
15390: EMPTY
15391: LIST
15392: LIST
15393: PUSH
15394: EMPTY
15395: LIST
15396: LIST
15397: PPUSH
15398: CALL_OW 69
15402: ST_TO_ADDR
// if not tmp then
15403: LD_VAR 0 1
15407: NOT
15408: IFFALSE 15412
// exit ;
15410: GO 15457
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
15412: LD_VAR 0 1
15416: PUSH
15417: LD_INT 1
15419: PPUSH
15420: LD_VAR 0 1
15424: PPUSH
15425: CALL_OW 12
15429: ARRAY
15430: PPUSH
15431: LD_INT 1
15433: PPUSH
15434: LD_INT 4
15436: PPUSH
15437: CALL_OW 12
15441: PPUSH
15442: LD_INT 3000
15444: PPUSH
15445: LD_INT 9000
15447: PPUSH
15448: CALL_OW 12
15452: PPUSH
15453: CALL_OW 492
// end ;
15457: PPOPN 1
15459: END
// every 0 0$1 trigger StreamModeActive and sDepot do
15460: LD_EXP 71
15464: PUSH
15465: LD_EXP 86
15469: AND
15470: IFFALSE 15490
15472: GO 15474
15474: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
15475: LD_INT 1
15477: PPUSH
15478: LD_OWVAR 2
15482: PPUSH
15483: LD_INT 0
15485: PPUSH
15486: CALL_OW 324
15490: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
15491: LD_EXP 71
15495: PUSH
15496: LD_EXP 87
15500: AND
15501: IFFALSE 15584
15503: GO 15505
15505: DISABLE
15506: LD_INT 0
15508: PPUSH
15509: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
15510: LD_ADDR_VAR 0 2
15514: PUSH
15515: LD_INT 22
15517: PUSH
15518: LD_OWVAR 2
15522: PUSH
15523: EMPTY
15524: LIST
15525: LIST
15526: PUSH
15527: LD_INT 21
15529: PUSH
15530: LD_INT 3
15532: PUSH
15533: EMPTY
15534: LIST
15535: LIST
15536: PUSH
15537: EMPTY
15538: LIST
15539: LIST
15540: PPUSH
15541: CALL_OW 69
15545: ST_TO_ADDR
// if not tmp then
15546: LD_VAR 0 2
15550: NOT
15551: IFFALSE 15555
// exit ;
15553: GO 15584
// for i in tmp do
15555: LD_ADDR_VAR 0 1
15559: PUSH
15560: LD_VAR 0 2
15564: PUSH
15565: FOR_IN
15566: IFFALSE 15582
// SetBLevel ( i , 10 ) ;
15568: LD_VAR 0 1
15572: PPUSH
15573: LD_INT 10
15575: PPUSH
15576: CALL_OW 241
15580: GO 15565
15582: POP
15583: POP
// end ;
15584: PPOPN 2
15586: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
15587: LD_EXP 71
15591: PUSH
15592: LD_EXP 88
15596: AND
15597: IFFALSE 15708
15599: GO 15601
15601: DISABLE
15602: LD_INT 0
15604: PPUSH
15605: PPUSH
15606: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15607: LD_ADDR_VAR 0 3
15611: PUSH
15612: LD_INT 22
15614: PUSH
15615: LD_OWVAR 2
15619: PUSH
15620: EMPTY
15621: LIST
15622: LIST
15623: PUSH
15624: LD_INT 25
15626: PUSH
15627: LD_INT 1
15629: PUSH
15630: EMPTY
15631: LIST
15632: LIST
15633: PUSH
15634: EMPTY
15635: LIST
15636: LIST
15637: PPUSH
15638: CALL_OW 69
15642: ST_TO_ADDR
// if not tmp then
15643: LD_VAR 0 3
15647: NOT
15648: IFFALSE 15652
// exit ;
15650: GO 15708
// un := tmp [ rand ( 1 , tmp ) ] ;
15652: LD_ADDR_VAR 0 2
15656: PUSH
15657: LD_VAR 0 3
15661: PUSH
15662: LD_INT 1
15664: PPUSH
15665: LD_VAR 0 3
15669: PPUSH
15670: CALL_OW 12
15674: ARRAY
15675: ST_TO_ADDR
// if Crawls ( un ) then
15676: LD_VAR 0 2
15680: PPUSH
15681: CALL_OW 318
15685: IFFALSE 15696
// ComWalk ( un ) ;
15687: LD_VAR 0 2
15691: PPUSH
15692: CALL_OW 138
// SetClass ( un , class_sniper ) ;
15696: LD_VAR 0 2
15700: PPUSH
15701: LD_INT 5
15703: PPUSH
15704: CALL_OW 336
// end ;
15708: PPOPN 3
15710: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
15711: LD_EXP 71
15715: PUSH
15716: LD_EXP 89
15720: AND
15721: PUSH
15722: LD_OWVAR 67
15726: PUSH
15727: LD_INT 4
15729: LESS
15730: AND
15731: IFFALSE 15750
15733: GO 15735
15735: DISABLE
// begin Difficulty := Difficulty + 1 ;
15736: LD_ADDR_OWVAR 67
15740: PUSH
15741: LD_OWVAR 67
15745: PUSH
15746: LD_INT 1
15748: PLUS
15749: ST_TO_ADDR
// end ;
15750: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
15751: LD_EXP 71
15755: PUSH
15756: LD_EXP 90
15760: AND
15761: IFFALSE 15864
15763: GO 15765
15765: DISABLE
15766: LD_INT 0
15768: PPUSH
// begin for i := 1 to 5 do
15769: LD_ADDR_VAR 0 1
15773: PUSH
15774: DOUBLE
15775: LD_INT 1
15777: DEC
15778: ST_TO_ADDR
15779: LD_INT 5
15781: PUSH
15782: FOR_TO
15783: IFFALSE 15862
// begin uc_nation := nation_nature ;
15785: LD_ADDR_OWVAR 21
15789: PUSH
15790: LD_INT 0
15792: ST_TO_ADDR
// uc_side := 0 ;
15793: LD_ADDR_OWVAR 20
15797: PUSH
15798: LD_INT 0
15800: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
15801: LD_ADDR_OWVAR 29
15805: PUSH
15806: LD_INT 12
15808: PUSH
15809: LD_INT 12
15811: PUSH
15812: EMPTY
15813: LIST
15814: LIST
15815: ST_TO_ADDR
// hc_agressivity := 20 ;
15816: LD_ADDR_OWVAR 35
15820: PUSH
15821: LD_INT 20
15823: ST_TO_ADDR
// hc_class := class_tiger ;
15824: LD_ADDR_OWVAR 28
15828: PUSH
15829: LD_INT 14
15831: ST_TO_ADDR
// hc_gallery :=  ;
15832: LD_ADDR_OWVAR 33
15836: PUSH
15837: LD_STRING 
15839: ST_TO_ADDR
// hc_name :=  ;
15840: LD_ADDR_OWVAR 26
15844: PUSH
15845: LD_STRING 
15847: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
15848: CALL_OW 44
15852: PPUSH
15853: LD_INT 0
15855: PPUSH
15856: CALL_OW 51
// end ;
15860: GO 15782
15862: POP
15863: POP
// end ;
15864: PPOPN 1
15866: END
// every 0 0$1 trigger StreamModeActive and sBomb do
15867: LD_EXP 71
15871: PUSH
15872: LD_EXP 91
15876: AND
15877: IFFALSE 15886
15879: GO 15881
15881: DISABLE
// StreamSibBomb ;
15882: CALL 15887 0 0
15886: END
// export function StreamSibBomb ; var i , x , y ; begin
15887: LD_INT 0
15889: PPUSH
15890: PPUSH
15891: PPUSH
15892: PPUSH
// result := false ;
15893: LD_ADDR_VAR 0 1
15897: PUSH
15898: LD_INT 0
15900: ST_TO_ADDR
// for i := 1 to 16 do
15901: LD_ADDR_VAR 0 2
15905: PUSH
15906: DOUBLE
15907: LD_INT 1
15909: DEC
15910: ST_TO_ADDR
15911: LD_INT 16
15913: PUSH
15914: FOR_TO
15915: IFFALSE 16114
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
15917: LD_ADDR_VAR 0 3
15921: PUSH
15922: LD_INT 10
15924: PUSH
15925: LD_INT 20
15927: PUSH
15928: LD_INT 30
15930: PUSH
15931: LD_INT 40
15933: PUSH
15934: LD_INT 50
15936: PUSH
15937: LD_INT 60
15939: PUSH
15940: LD_INT 70
15942: PUSH
15943: LD_INT 80
15945: PUSH
15946: LD_INT 90
15948: PUSH
15949: LD_INT 100
15951: PUSH
15952: LD_INT 110
15954: PUSH
15955: LD_INT 120
15957: PUSH
15958: LD_INT 130
15960: PUSH
15961: LD_INT 140
15963: PUSH
15964: LD_INT 150
15966: PUSH
15967: EMPTY
15968: LIST
15969: LIST
15970: LIST
15971: LIST
15972: LIST
15973: LIST
15974: LIST
15975: LIST
15976: LIST
15977: LIST
15978: LIST
15979: LIST
15980: LIST
15981: LIST
15982: LIST
15983: PUSH
15984: LD_INT 1
15986: PPUSH
15987: LD_INT 15
15989: PPUSH
15990: CALL_OW 12
15994: ARRAY
15995: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
15996: LD_ADDR_VAR 0 4
16000: PUSH
16001: LD_INT 10
16003: PUSH
16004: LD_INT 20
16006: PUSH
16007: LD_INT 30
16009: PUSH
16010: LD_INT 40
16012: PUSH
16013: LD_INT 50
16015: PUSH
16016: LD_INT 60
16018: PUSH
16019: LD_INT 70
16021: PUSH
16022: LD_INT 80
16024: PUSH
16025: LD_INT 90
16027: PUSH
16028: LD_INT 100
16030: PUSH
16031: LD_INT 110
16033: PUSH
16034: LD_INT 120
16036: PUSH
16037: LD_INT 130
16039: PUSH
16040: LD_INT 140
16042: PUSH
16043: LD_INT 150
16045: PUSH
16046: EMPTY
16047: LIST
16048: LIST
16049: LIST
16050: LIST
16051: LIST
16052: LIST
16053: LIST
16054: LIST
16055: LIST
16056: LIST
16057: LIST
16058: LIST
16059: LIST
16060: LIST
16061: LIST
16062: PUSH
16063: LD_INT 1
16065: PPUSH
16066: LD_INT 15
16068: PPUSH
16069: CALL_OW 12
16073: ARRAY
16074: ST_TO_ADDR
// if ValidHex ( x , y ) then
16075: LD_VAR 0 3
16079: PPUSH
16080: LD_VAR 0 4
16084: PPUSH
16085: CALL_OW 488
16089: IFFALSE 16112
// begin result := [ x , y ] ;
16091: LD_ADDR_VAR 0 1
16095: PUSH
16096: LD_VAR 0 3
16100: PUSH
16101: LD_VAR 0 4
16105: PUSH
16106: EMPTY
16107: LIST
16108: LIST
16109: ST_TO_ADDR
// break ;
16110: GO 16114
// end ; end ;
16112: GO 15914
16114: POP
16115: POP
// if result then
16116: LD_VAR 0 1
16120: IFFALSE 16180
// begin ToLua ( playSibBomb() ) ;
16122: LD_STRING playSibBomb()
16124: PPUSH
16125: CALL_OW 559
// wait ( 0 0$14 ) ;
16129: LD_INT 490
16131: PPUSH
16132: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
16136: LD_VAR 0 1
16140: PUSH
16141: LD_INT 1
16143: ARRAY
16144: PPUSH
16145: LD_VAR 0 1
16149: PUSH
16150: LD_INT 2
16152: ARRAY
16153: PPUSH
16154: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
16158: LD_VAR 0 1
16162: PUSH
16163: LD_INT 1
16165: ARRAY
16166: PPUSH
16167: LD_VAR 0 1
16171: PUSH
16172: LD_INT 2
16174: ARRAY
16175: PPUSH
16176: CALL_OW 429
// end ; end ;
16180: LD_VAR 0 1
16184: RET
// every 0 0$1 trigger StreamModeActive and sReset do
16185: LD_EXP 71
16189: PUSH
16190: LD_EXP 93
16194: AND
16195: IFFALSE 16207
16197: GO 16199
16199: DISABLE
// YouLost (  ) ;
16200: LD_STRING 
16202: PPUSH
16203: CALL_OW 104
16207: END
// every 0 0$1 trigger StreamModeActive and sFog do
16208: LD_EXP 71
16212: PUSH
16213: LD_EXP 92
16217: AND
16218: IFFALSE 16232
16220: GO 16222
16222: DISABLE
// FogOff ( your_side ) ;
16223: LD_OWVAR 2
16227: PPUSH
16228: CALL_OW 344
16232: END
// every 0 0$1 trigger StreamModeActive and sSun do
16233: LD_EXP 71
16237: PUSH
16238: LD_EXP 94
16242: AND
16243: IFFALSE 16271
16245: GO 16247
16247: DISABLE
// begin solar_recharge_percent := 0 ;
16248: LD_ADDR_OWVAR 79
16252: PUSH
16253: LD_INT 0
16255: ST_TO_ADDR
// wait ( 5 5$00 ) ;
16256: LD_INT 10500
16258: PPUSH
16259: CALL_OW 67
// solar_recharge_percent := 100 ;
16263: LD_ADDR_OWVAR 79
16267: PUSH
16268: LD_INT 100
16270: ST_TO_ADDR
// end ;
16271: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
16272: LD_EXP 71
16276: PUSH
16277: LD_EXP 95
16281: AND
16282: IFFALSE 16521
16284: GO 16286
16286: DISABLE
16287: LD_INT 0
16289: PPUSH
16290: PPUSH
16291: PPUSH
// begin tmp := [ ] ;
16292: LD_ADDR_VAR 0 3
16296: PUSH
16297: EMPTY
16298: ST_TO_ADDR
// for i := 1 to 6 do
16299: LD_ADDR_VAR 0 1
16303: PUSH
16304: DOUBLE
16305: LD_INT 1
16307: DEC
16308: ST_TO_ADDR
16309: LD_INT 6
16311: PUSH
16312: FOR_TO
16313: IFFALSE 16418
// begin uc_nation := nation_nature ;
16315: LD_ADDR_OWVAR 21
16319: PUSH
16320: LD_INT 0
16322: ST_TO_ADDR
// uc_side := 0 ;
16323: LD_ADDR_OWVAR 20
16327: PUSH
16328: LD_INT 0
16330: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
16331: LD_ADDR_OWVAR 29
16335: PUSH
16336: LD_INT 12
16338: PUSH
16339: LD_INT 12
16341: PUSH
16342: EMPTY
16343: LIST
16344: LIST
16345: ST_TO_ADDR
// hc_agressivity := 20 ;
16346: LD_ADDR_OWVAR 35
16350: PUSH
16351: LD_INT 20
16353: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
16354: LD_ADDR_OWVAR 28
16358: PUSH
16359: LD_INT 17
16361: ST_TO_ADDR
// hc_gallery :=  ;
16362: LD_ADDR_OWVAR 33
16366: PUSH
16367: LD_STRING 
16369: ST_TO_ADDR
// hc_name :=  ;
16370: LD_ADDR_OWVAR 26
16374: PUSH
16375: LD_STRING 
16377: ST_TO_ADDR
// un := CreateHuman ;
16378: LD_ADDR_VAR 0 2
16382: PUSH
16383: CALL_OW 44
16387: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
16388: LD_VAR 0 2
16392: PPUSH
16393: LD_INT 1
16395: PPUSH
16396: CALL_OW 51
// tmp := tmp ^ un ;
16400: LD_ADDR_VAR 0 3
16404: PUSH
16405: LD_VAR 0 3
16409: PUSH
16410: LD_VAR 0 2
16414: ADD
16415: ST_TO_ADDR
// end ;
16416: GO 16312
16418: POP
16419: POP
// repeat wait ( 0 0$1 ) ;
16420: LD_INT 35
16422: PPUSH
16423: CALL_OW 67
// for un in tmp do
16427: LD_ADDR_VAR 0 2
16431: PUSH
16432: LD_VAR 0 3
16436: PUSH
16437: FOR_IN
16438: IFFALSE 16512
// begin if IsDead ( un ) then
16440: LD_VAR 0 2
16444: PPUSH
16445: CALL_OW 301
16449: IFFALSE 16469
// begin tmp := tmp diff un ;
16451: LD_ADDR_VAR 0 3
16455: PUSH
16456: LD_VAR 0 3
16460: PUSH
16461: LD_VAR 0 2
16465: DIFF
16466: ST_TO_ADDR
// continue ;
16467: GO 16437
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
16469: LD_VAR 0 2
16473: PPUSH
16474: LD_INT 3
16476: PUSH
16477: LD_INT 22
16479: PUSH
16480: LD_INT 0
16482: PUSH
16483: EMPTY
16484: LIST
16485: LIST
16486: PUSH
16487: EMPTY
16488: LIST
16489: LIST
16490: PPUSH
16491: CALL_OW 69
16495: PPUSH
16496: LD_VAR 0 2
16500: PPUSH
16501: CALL_OW 74
16505: PPUSH
16506: CALL_OW 115
// end ;
16510: GO 16437
16512: POP
16513: POP
// until not tmp ;
16514: LD_VAR 0 3
16518: NOT
16519: IFFALSE 16420
// end ;
16521: PPOPN 3
16523: END
// every 0 0$1 trigger StreamModeActive and sTroll do
16524: LD_EXP 71
16528: PUSH
16529: LD_EXP 96
16533: AND
16534: IFFALSE 16588
16536: GO 16538
16538: DISABLE
// begin ToLua ( displayTroll(); ) ;
16539: LD_STRING displayTroll();
16541: PPUSH
16542: CALL_OW 559
// wait ( 3 3$00 ) ;
16546: LD_INT 6300
16548: PPUSH
16549: CALL_OW 67
// ToLua ( hideTroll(); ) ;
16553: LD_STRING hideTroll();
16555: PPUSH
16556: CALL_OW 559
// wait ( 1 1$00 ) ;
16560: LD_INT 2100
16562: PPUSH
16563: CALL_OW 67
// ToLua ( displayTroll(); ) ;
16567: LD_STRING displayTroll();
16569: PPUSH
16570: CALL_OW 559
// wait ( 1 1$00 ) ;
16574: LD_INT 2100
16576: PPUSH
16577: CALL_OW 67
// ToLua ( hideTroll(); ) ;
16581: LD_STRING hideTroll();
16583: PPUSH
16584: CALL_OW 559
// end ;
16588: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
16589: LD_EXP 71
16593: PUSH
16594: LD_EXP 97
16598: AND
16599: IFFALSE 16662
16601: GO 16603
16603: DISABLE
16604: LD_INT 0
16606: PPUSH
// begin p := 0 ;
16607: LD_ADDR_VAR 0 1
16611: PUSH
16612: LD_INT 0
16614: ST_TO_ADDR
// repeat game_speed := 1 ;
16615: LD_ADDR_OWVAR 65
16619: PUSH
16620: LD_INT 1
16622: ST_TO_ADDR
// wait ( 0 0$1 ) ;
16623: LD_INT 35
16625: PPUSH
16626: CALL_OW 67
// p := p + 1 ;
16630: LD_ADDR_VAR 0 1
16634: PUSH
16635: LD_VAR 0 1
16639: PUSH
16640: LD_INT 1
16642: PLUS
16643: ST_TO_ADDR
// until p >= 60 ;
16644: LD_VAR 0 1
16648: PUSH
16649: LD_INT 60
16651: GREATEREQUAL
16652: IFFALSE 16615
// game_speed := 4 ;
16654: LD_ADDR_OWVAR 65
16658: PUSH
16659: LD_INT 4
16661: ST_TO_ADDR
// end ;
16662: PPOPN 1
16664: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
16665: LD_EXP 71
16669: PUSH
16670: LD_EXP 98
16674: AND
16675: IFFALSE 16821
16677: GO 16679
16679: DISABLE
16680: LD_INT 0
16682: PPUSH
16683: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16684: LD_ADDR_VAR 0 1
16688: PUSH
16689: LD_INT 22
16691: PUSH
16692: LD_OWVAR 2
16696: PUSH
16697: EMPTY
16698: LIST
16699: LIST
16700: PUSH
16701: LD_INT 2
16703: PUSH
16704: LD_INT 30
16706: PUSH
16707: LD_INT 0
16709: PUSH
16710: EMPTY
16711: LIST
16712: LIST
16713: PUSH
16714: LD_INT 30
16716: PUSH
16717: LD_INT 1
16719: PUSH
16720: EMPTY
16721: LIST
16722: LIST
16723: PUSH
16724: EMPTY
16725: LIST
16726: LIST
16727: LIST
16728: PUSH
16729: EMPTY
16730: LIST
16731: LIST
16732: PPUSH
16733: CALL_OW 69
16737: ST_TO_ADDR
// if not depot then
16738: LD_VAR 0 1
16742: NOT
16743: IFFALSE 16747
// exit ;
16745: GO 16821
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
16747: LD_ADDR_VAR 0 2
16751: PUSH
16752: LD_VAR 0 1
16756: PUSH
16757: LD_INT 1
16759: PPUSH
16760: LD_VAR 0 1
16764: PPUSH
16765: CALL_OW 12
16769: ARRAY
16770: PPUSH
16771: CALL_OW 274
16775: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
16776: LD_VAR 0 2
16780: PPUSH
16781: LD_INT 1
16783: PPUSH
16784: LD_INT 0
16786: PPUSH
16787: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
16791: LD_VAR 0 2
16795: PPUSH
16796: LD_INT 2
16798: PPUSH
16799: LD_INT 0
16801: PPUSH
16802: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
16806: LD_VAR 0 2
16810: PPUSH
16811: LD_INT 3
16813: PPUSH
16814: LD_INT 0
16816: PPUSH
16817: CALL_OW 277
// end ;
16821: PPOPN 2
16823: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
16824: LD_EXP 71
16828: PUSH
16829: LD_EXP 99
16833: AND
16834: IFFALSE 16931
16836: GO 16838
16838: DISABLE
16839: LD_INT 0
16841: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16842: LD_ADDR_VAR 0 1
16846: PUSH
16847: LD_INT 22
16849: PUSH
16850: LD_OWVAR 2
16854: PUSH
16855: EMPTY
16856: LIST
16857: LIST
16858: PUSH
16859: LD_INT 21
16861: PUSH
16862: LD_INT 1
16864: PUSH
16865: EMPTY
16866: LIST
16867: LIST
16868: PUSH
16869: LD_INT 3
16871: PUSH
16872: LD_INT 23
16874: PUSH
16875: LD_INT 0
16877: PUSH
16878: EMPTY
16879: LIST
16880: LIST
16881: PUSH
16882: EMPTY
16883: LIST
16884: LIST
16885: PUSH
16886: EMPTY
16887: LIST
16888: LIST
16889: LIST
16890: PPUSH
16891: CALL_OW 69
16895: ST_TO_ADDR
// if not tmp then
16896: LD_VAR 0 1
16900: NOT
16901: IFFALSE 16905
// exit ;
16903: GO 16931
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
16905: LD_VAR 0 1
16909: PUSH
16910: LD_INT 1
16912: PPUSH
16913: LD_VAR 0 1
16917: PPUSH
16918: CALL_OW 12
16922: ARRAY
16923: PPUSH
16924: LD_INT 200
16926: PPUSH
16927: CALL_OW 234
// end ;
16931: PPOPN 1
16933: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
16934: LD_EXP 71
16938: PUSH
16939: LD_EXP 100
16943: AND
16944: IFFALSE 17023
16946: GO 16948
16948: DISABLE
16949: LD_INT 0
16951: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
16952: LD_ADDR_VAR 0 1
16956: PUSH
16957: LD_INT 22
16959: PUSH
16960: LD_OWVAR 2
16964: PUSH
16965: EMPTY
16966: LIST
16967: LIST
16968: PUSH
16969: LD_INT 21
16971: PUSH
16972: LD_INT 2
16974: PUSH
16975: EMPTY
16976: LIST
16977: LIST
16978: PUSH
16979: EMPTY
16980: LIST
16981: LIST
16982: PPUSH
16983: CALL_OW 69
16987: ST_TO_ADDR
// if not tmp then
16988: LD_VAR 0 1
16992: NOT
16993: IFFALSE 16997
// exit ;
16995: GO 17023
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
16997: LD_VAR 0 1
17001: PUSH
17002: LD_INT 1
17004: PPUSH
17005: LD_VAR 0 1
17009: PPUSH
17010: CALL_OW 12
17014: ARRAY
17015: PPUSH
17016: LD_INT 60
17018: PPUSH
17019: CALL_OW 234
// end ;
17023: PPOPN 1
17025: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
17026: LD_EXP 71
17030: PUSH
17031: LD_EXP 101
17035: AND
17036: IFFALSE 17135
17038: GO 17040
17040: DISABLE
17041: LD_INT 0
17043: PPUSH
17044: PPUSH
// begin enable ;
17045: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
17046: LD_ADDR_VAR 0 1
17050: PUSH
17051: LD_INT 22
17053: PUSH
17054: LD_OWVAR 2
17058: PUSH
17059: EMPTY
17060: LIST
17061: LIST
17062: PUSH
17063: LD_INT 61
17065: PUSH
17066: EMPTY
17067: LIST
17068: PUSH
17069: LD_INT 33
17071: PUSH
17072: LD_INT 2
17074: PUSH
17075: EMPTY
17076: LIST
17077: LIST
17078: PUSH
17079: EMPTY
17080: LIST
17081: LIST
17082: LIST
17083: PPUSH
17084: CALL_OW 69
17088: ST_TO_ADDR
// if not tmp then
17089: LD_VAR 0 1
17093: NOT
17094: IFFALSE 17098
// exit ;
17096: GO 17135
// for i in tmp do
17098: LD_ADDR_VAR 0 2
17102: PUSH
17103: LD_VAR 0 1
17107: PUSH
17108: FOR_IN
17109: IFFALSE 17133
// if IsControledBy ( i ) then
17111: LD_VAR 0 2
17115: PPUSH
17116: CALL_OW 312
17120: IFFALSE 17131
// ComUnlink ( i ) ;
17122: LD_VAR 0 2
17126: PPUSH
17127: CALL_OW 136
17131: GO 17108
17133: POP
17134: POP
// end ;
17135: PPOPN 2
17137: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
17138: LD_EXP 71
17142: PUSH
17143: LD_EXP 102
17147: AND
17148: IFFALSE 17288
17150: GO 17152
17152: DISABLE
17153: LD_INT 0
17155: PPUSH
17156: PPUSH
// begin ToLua ( displayPowell(); ) ;
17157: LD_STRING displayPowell();
17159: PPUSH
17160: CALL_OW 559
// uc_side := 0 ;
17164: LD_ADDR_OWVAR 20
17168: PUSH
17169: LD_INT 0
17171: ST_TO_ADDR
// uc_nation := 2 ;
17172: LD_ADDR_OWVAR 21
17176: PUSH
17177: LD_INT 2
17179: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
17180: LD_ADDR_OWVAR 37
17184: PUSH
17185: LD_INT 14
17187: ST_TO_ADDR
// vc_engine := engine_siberite ;
17188: LD_ADDR_OWVAR 39
17192: PUSH
17193: LD_INT 3
17195: ST_TO_ADDR
// vc_control := control_apeman ;
17196: LD_ADDR_OWVAR 38
17200: PUSH
17201: LD_INT 5
17203: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
17204: LD_ADDR_OWVAR 40
17208: PUSH
17209: LD_INT 29
17211: ST_TO_ADDR
// un := CreateVehicle ;
17212: LD_ADDR_VAR 0 2
17216: PUSH
17217: CALL_OW 45
17221: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17222: LD_VAR 0 2
17226: PPUSH
17227: LD_INT 1
17229: PPUSH
17230: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
17234: LD_INT 35
17236: PPUSH
17237: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
17241: LD_VAR 0 2
17245: PPUSH
17246: LD_INT 22
17248: PUSH
17249: LD_OWVAR 2
17253: PUSH
17254: EMPTY
17255: LIST
17256: LIST
17257: PPUSH
17258: CALL_OW 69
17262: PPUSH
17263: LD_VAR 0 2
17267: PPUSH
17268: CALL_OW 74
17272: PPUSH
17273: CALL_OW 115
// until IsDead ( un ) ;
17277: LD_VAR 0 2
17281: PPUSH
17282: CALL_OW 301
17286: IFFALSE 17234
// end ;
17288: PPOPN 2
17290: END
// every 0 0$1 trigger StreamModeActive and sStu do
17291: LD_EXP 71
17295: PUSH
17296: LD_EXP 110
17300: AND
17301: IFFALSE 17317
17303: GO 17305
17305: DISABLE
// begin ToLua ( displayStucuk(); ) ;
17306: LD_STRING displayStucuk();
17308: PPUSH
17309: CALL_OW 559
// ResetFog ;
17313: CALL_OW 335
// end ;
17317: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
17318: LD_EXP 71
17322: PUSH
17323: LD_EXP 103
17327: AND
17328: IFFALSE 17469
17330: GO 17332
17332: DISABLE
17333: LD_INT 0
17335: PPUSH
17336: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17337: LD_ADDR_VAR 0 2
17341: PUSH
17342: LD_INT 22
17344: PUSH
17345: LD_OWVAR 2
17349: PUSH
17350: EMPTY
17351: LIST
17352: LIST
17353: PUSH
17354: LD_INT 21
17356: PUSH
17357: LD_INT 1
17359: PUSH
17360: EMPTY
17361: LIST
17362: LIST
17363: PUSH
17364: EMPTY
17365: LIST
17366: LIST
17367: PPUSH
17368: CALL_OW 69
17372: ST_TO_ADDR
// if not tmp then
17373: LD_VAR 0 2
17377: NOT
17378: IFFALSE 17382
// exit ;
17380: GO 17469
// un := tmp [ rand ( 1 , tmp ) ] ;
17382: LD_ADDR_VAR 0 1
17386: PUSH
17387: LD_VAR 0 2
17391: PUSH
17392: LD_INT 1
17394: PPUSH
17395: LD_VAR 0 2
17399: PPUSH
17400: CALL_OW 12
17404: ARRAY
17405: ST_TO_ADDR
// SetSide ( un , 0 ) ;
17406: LD_VAR 0 1
17410: PPUSH
17411: LD_INT 0
17413: PPUSH
17414: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
17418: LD_VAR 0 1
17422: PPUSH
17423: LD_OWVAR 3
17427: PUSH
17428: LD_VAR 0 1
17432: DIFF
17433: PPUSH
17434: LD_VAR 0 1
17438: PPUSH
17439: CALL_OW 74
17443: PPUSH
17444: CALL_OW 115
// wait ( 0 0$20 ) ;
17448: LD_INT 700
17450: PPUSH
17451: CALL_OW 67
// SetSide ( un , your_side ) ;
17455: LD_VAR 0 1
17459: PPUSH
17460: LD_OWVAR 2
17464: PPUSH
17465: CALL_OW 235
// end ;
17469: PPOPN 2
17471: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
17472: LD_EXP 71
17476: PUSH
17477: LD_EXP 104
17481: AND
17482: IFFALSE 17588
17484: GO 17486
17486: DISABLE
17487: LD_INT 0
17489: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17490: LD_ADDR_VAR 0 1
17494: PUSH
17495: LD_INT 22
17497: PUSH
17498: LD_OWVAR 2
17502: PUSH
17503: EMPTY
17504: LIST
17505: LIST
17506: PUSH
17507: LD_INT 2
17509: PUSH
17510: LD_INT 30
17512: PUSH
17513: LD_INT 0
17515: PUSH
17516: EMPTY
17517: LIST
17518: LIST
17519: PUSH
17520: LD_INT 30
17522: PUSH
17523: LD_INT 1
17525: PUSH
17526: EMPTY
17527: LIST
17528: LIST
17529: PUSH
17530: EMPTY
17531: LIST
17532: LIST
17533: LIST
17534: PUSH
17535: EMPTY
17536: LIST
17537: LIST
17538: PPUSH
17539: CALL_OW 69
17543: ST_TO_ADDR
// if not depot then
17544: LD_VAR 0 1
17548: NOT
17549: IFFALSE 17553
// exit ;
17551: GO 17588
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
17553: LD_VAR 0 1
17557: PUSH
17558: LD_INT 1
17560: ARRAY
17561: PPUSH
17562: CALL_OW 250
17566: PPUSH
17567: LD_VAR 0 1
17571: PUSH
17572: LD_INT 1
17574: ARRAY
17575: PPUSH
17576: CALL_OW 251
17580: PPUSH
17581: LD_INT 70
17583: PPUSH
17584: CALL_OW 495
// end ;
17588: PPOPN 1
17590: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
17591: LD_EXP 71
17595: PUSH
17596: LD_EXP 105
17600: AND
17601: IFFALSE 17812
17603: GO 17605
17605: DISABLE
17606: LD_INT 0
17608: PPUSH
17609: PPUSH
17610: PPUSH
17611: PPUSH
17612: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17613: LD_ADDR_VAR 0 5
17617: PUSH
17618: LD_INT 22
17620: PUSH
17621: LD_OWVAR 2
17625: PUSH
17626: EMPTY
17627: LIST
17628: LIST
17629: PUSH
17630: LD_INT 21
17632: PUSH
17633: LD_INT 1
17635: PUSH
17636: EMPTY
17637: LIST
17638: LIST
17639: PUSH
17640: EMPTY
17641: LIST
17642: LIST
17643: PPUSH
17644: CALL_OW 69
17648: ST_TO_ADDR
// if not tmp then
17649: LD_VAR 0 5
17653: NOT
17654: IFFALSE 17658
// exit ;
17656: GO 17812
// for i in tmp do
17658: LD_ADDR_VAR 0 1
17662: PUSH
17663: LD_VAR 0 5
17667: PUSH
17668: FOR_IN
17669: IFFALSE 17810
// begin d := rand ( 0 , 5 ) ;
17671: LD_ADDR_VAR 0 4
17675: PUSH
17676: LD_INT 0
17678: PPUSH
17679: LD_INT 5
17681: PPUSH
17682: CALL_OW 12
17686: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
17687: LD_ADDR_VAR 0 2
17691: PUSH
17692: LD_VAR 0 1
17696: PPUSH
17697: CALL_OW 250
17701: PPUSH
17702: LD_VAR 0 4
17706: PPUSH
17707: LD_INT 3
17709: PPUSH
17710: LD_INT 12
17712: PPUSH
17713: CALL_OW 12
17717: PPUSH
17718: CALL_OW 272
17722: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
17723: LD_ADDR_VAR 0 3
17727: PUSH
17728: LD_VAR 0 1
17732: PPUSH
17733: CALL_OW 251
17737: PPUSH
17738: LD_VAR 0 4
17742: PPUSH
17743: LD_INT 3
17745: PPUSH
17746: LD_INT 12
17748: PPUSH
17749: CALL_OW 12
17753: PPUSH
17754: CALL_OW 273
17758: ST_TO_ADDR
// if ValidHex ( x , y ) then
17759: LD_VAR 0 2
17763: PPUSH
17764: LD_VAR 0 3
17768: PPUSH
17769: CALL_OW 488
17773: IFFALSE 17808
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
17775: LD_VAR 0 1
17779: PPUSH
17780: LD_VAR 0 2
17784: PPUSH
17785: LD_VAR 0 3
17789: PPUSH
17790: LD_INT 3
17792: PPUSH
17793: LD_INT 6
17795: PPUSH
17796: CALL_OW 12
17800: PPUSH
17801: LD_INT 1
17803: PPUSH
17804: CALL_OW 483
// end ;
17808: GO 17668
17810: POP
17811: POP
// end ;
17812: PPOPN 5
17814: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
17815: LD_EXP 71
17819: PUSH
17820: LD_EXP 106
17824: AND
17825: IFFALSE 17919
17827: GO 17829
17829: DISABLE
17830: LD_INT 0
17832: PPUSH
17833: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
17834: LD_ADDR_VAR 0 2
17838: PUSH
17839: LD_INT 22
17841: PUSH
17842: LD_OWVAR 2
17846: PUSH
17847: EMPTY
17848: LIST
17849: LIST
17850: PUSH
17851: LD_INT 32
17853: PUSH
17854: LD_INT 1
17856: PUSH
17857: EMPTY
17858: LIST
17859: LIST
17860: PUSH
17861: LD_INT 21
17863: PUSH
17864: LD_INT 2
17866: PUSH
17867: EMPTY
17868: LIST
17869: LIST
17870: PUSH
17871: EMPTY
17872: LIST
17873: LIST
17874: LIST
17875: PPUSH
17876: CALL_OW 69
17880: ST_TO_ADDR
// if not tmp then
17881: LD_VAR 0 2
17885: NOT
17886: IFFALSE 17890
// exit ;
17888: GO 17919
// for i in tmp do
17890: LD_ADDR_VAR 0 1
17894: PUSH
17895: LD_VAR 0 2
17899: PUSH
17900: FOR_IN
17901: IFFALSE 17917
// SetFuel ( i , 0 ) ;
17903: LD_VAR 0 1
17907: PPUSH
17908: LD_INT 0
17910: PPUSH
17911: CALL_OW 240
17915: GO 17900
17917: POP
17918: POP
// end ;
17919: PPOPN 2
17921: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
17922: LD_EXP 71
17926: PUSH
17927: LD_EXP 107
17931: AND
17932: IFFALSE 17998
17934: GO 17936
17936: DISABLE
17937: LD_INT 0
17939: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
17940: LD_ADDR_VAR 0 1
17944: PUSH
17945: LD_INT 22
17947: PUSH
17948: LD_OWVAR 2
17952: PUSH
17953: EMPTY
17954: LIST
17955: LIST
17956: PUSH
17957: LD_INT 30
17959: PUSH
17960: LD_INT 29
17962: PUSH
17963: EMPTY
17964: LIST
17965: LIST
17966: PUSH
17967: EMPTY
17968: LIST
17969: LIST
17970: PPUSH
17971: CALL_OW 69
17975: ST_TO_ADDR
// if not tmp then
17976: LD_VAR 0 1
17980: NOT
17981: IFFALSE 17985
// exit ;
17983: GO 17998
// DestroyUnit ( tmp [ 1 ] ) ;
17985: LD_VAR 0 1
17989: PUSH
17990: LD_INT 1
17992: ARRAY
17993: PPUSH
17994: CALL_OW 65
// end ;
17998: PPOPN 1
18000: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
18001: LD_EXP 71
18005: PUSH
18006: LD_EXP 109
18010: AND
18011: IFFALSE 18140
18013: GO 18015
18015: DISABLE
18016: LD_INT 0
18018: PPUSH
// begin uc_side := 0 ;
18019: LD_ADDR_OWVAR 20
18023: PUSH
18024: LD_INT 0
18026: ST_TO_ADDR
// uc_nation := nation_arabian ;
18027: LD_ADDR_OWVAR 21
18031: PUSH
18032: LD_INT 2
18034: ST_TO_ADDR
// hc_gallery :=  ;
18035: LD_ADDR_OWVAR 33
18039: PUSH
18040: LD_STRING 
18042: ST_TO_ADDR
// hc_name :=  ;
18043: LD_ADDR_OWVAR 26
18047: PUSH
18048: LD_STRING 
18050: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
18051: LD_INT 1
18053: PPUSH
18054: LD_INT 11
18056: PPUSH
18057: LD_INT 10
18059: PPUSH
18060: CALL_OW 380
// un := CreateHuman ;
18064: LD_ADDR_VAR 0 1
18068: PUSH
18069: CALL_OW 44
18073: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18074: LD_VAR 0 1
18078: PPUSH
18079: LD_INT 1
18081: PPUSH
18082: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
18086: LD_INT 35
18088: PPUSH
18089: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
18093: LD_VAR 0 1
18097: PPUSH
18098: LD_INT 22
18100: PUSH
18101: LD_OWVAR 2
18105: PUSH
18106: EMPTY
18107: LIST
18108: LIST
18109: PPUSH
18110: CALL_OW 69
18114: PPUSH
18115: LD_VAR 0 1
18119: PPUSH
18120: CALL_OW 74
18124: PPUSH
18125: CALL_OW 115
// until IsDead ( un ) ;
18129: LD_VAR 0 1
18133: PPUSH
18134: CALL_OW 301
18138: IFFALSE 18086
// end ;
18140: PPOPN 1
18142: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
18143: LD_EXP 71
18147: PUSH
18148: LD_EXP 111
18152: AND
18153: IFFALSE 18165
18155: GO 18157
18157: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
18158: LD_STRING earthquake(getX(game), 0, 32)
18160: PPUSH
18161: CALL_OW 559
18165: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
18166: LD_EXP 71
18170: PUSH
18171: LD_EXP 112
18175: AND
18176: IFFALSE 18267
18178: GO 18180
18180: DISABLE
18181: LD_INT 0
18183: PPUSH
// begin enable ;
18184: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
18185: LD_ADDR_VAR 0 1
18189: PUSH
18190: LD_INT 22
18192: PUSH
18193: LD_OWVAR 2
18197: PUSH
18198: EMPTY
18199: LIST
18200: LIST
18201: PUSH
18202: LD_INT 21
18204: PUSH
18205: LD_INT 2
18207: PUSH
18208: EMPTY
18209: LIST
18210: LIST
18211: PUSH
18212: LD_INT 33
18214: PUSH
18215: LD_INT 3
18217: PUSH
18218: EMPTY
18219: LIST
18220: LIST
18221: PUSH
18222: EMPTY
18223: LIST
18224: LIST
18225: LIST
18226: PPUSH
18227: CALL_OW 69
18231: ST_TO_ADDR
// if not tmp then
18232: LD_VAR 0 1
18236: NOT
18237: IFFALSE 18241
// exit ;
18239: GO 18267
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
18241: LD_VAR 0 1
18245: PUSH
18246: LD_INT 1
18248: PPUSH
18249: LD_VAR 0 1
18253: PPUSH
18254: CALL_OW 12
18258: ARRAY
18259: PPUSH
18260: LD_INT 1
18262: PPUSH
18263: CALL_OW 234
// end ;
18267: PPOPN 1
18269: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
18270: LD_EXP 71
18274: PUSH
18275: LD_EXP 113
18279: AND
18280: IFFALSE 18421
18282: GO 18284
18284: DISABLE
18285: LD_INT 0
18287: PPUSH
18288: PPUSH
18289: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18290: LD_ADDR_VAR 0 3
18294: PUSH
18295: LD_INT 22
18297: PUSH
18298: LD_OWVAR 2
18302: PUSH
18303: EMPTY
18304: LIST
18305: LIST
18306: PUSH
18307: LD_INT 25
18309: PUSH
18310: LD_INT 1
18312: PUSH
18313: EMPTY
18314: LIST
18315: LIST
18316: PUSH
18317: EMPTY
18318: LIST
18319: LIST
18320: PPUSH
18321: CALL_OW 69
18325: ST_TO_ADDR
// if not tmp then
18326: LD_VAR 0 3
18330: NOT
18331: IFFALSE 18335
// exit ;
18333: GO 18421
// un := tmp [ rand ( 1 , tmp ) ] ;
18335: LD_ADDR_VAR 0 2
18339: PUSH
18340: LD_VAR 0 3
18344: PUSH
18345: LD_INT 1
18347: PPUSH
18348: LD_VAR 0 3
18352: PPUSH
18353: CALL_OW 12
18357: ARRAY
18358: ST_TO_ADDR
// if Crawls ( un ) then
18359: LD_VAR 0 2
18363: PPUSH
18364: CALL_OW 318
18368: IFFALSE 18379
// ComWalk ( un ) ;
18370: LD_VAR 0 2
18374: PPUSH
18375: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
18379: LD_VAR 0 2
18383: PPUSH
18384: LD_INT 9
18386: PPUSH
18387: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
18391: LD_INT 28
18393: PPUSH
18394: LD_OWVAR 2
18398: PPUSH
18399: LD_INT 2
18401: PPUSH
18402: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
18406: LD_INT 29
18408: PPUSH
18409: LD_OWVAR 2
18413: PPUSH
18414: LD_INT 2
18416: PPUSH
18417: CALL_OW 322
// end ;
18421: PPOPN 3
18423: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
18424: LD_EXP 71
18428: PUSH
18429: LD_EXP 114
18433: AND
18434: IFFALSE 18545
18436: GO 18438
18438: DISABLE
18439: LD_INT 0
18441: PPUSH
18442: PPUSH
18443: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18444: LD_ADDR_VAR 0 3
18448: PUSH
18449: LD_INT 22
18451: PUSH
18452: LD_OWVAR 2
18456: PUSH
18457: EMPTY
18458: LIST
18459: LIST
18460: PUSH
18461: LD_INT 25
18463: PUSH
18464: LD_INT 1
18466: PUSH
18467: EMPTY
18468: LIST
18469: LIST
18470: PUSH
18471: EMPTY
18472: LIST
18473: LIST
18474: PPUSH
18475: CALL_OW 69
18479: ST_TO_ADDR
// if not tmp then
18480: LD_VAR 0 3
18484: NOT
18485: IFFALSE 18489
// exit ;
18487: GO 18545
// un := tmp [ rand ( 1 , tmp ) ] ;
18489: LD_ADDR_VAR 0 2
18493: PUSH
18494: LD_VAR 0 3
18498: PUSH
18499: LD_INT 1
18501: PPUSH
18502: LD_VAR 0 3
18506: PPUSH
18507: CALL_OW 12
18511: ARRAY
18512: ST_TO_ADDR
// if Crawls ( un ) then
18513: LD_VAR 0 2
18517: PPUSH
18518: CALL_OW 318
18522: IFFALSE 18533
// ComWalk ( un ) ;
18524: LD_VAR 0 2
18528: PPUSH
18529: CALL_OW 138
// SetClass ( un , class_mortar ) ;
18533: LD_VAR 0 2
18537: PPUSH
18538: LD_INT 8
18540: PPUSH
18541: CALL_OW 336
// end ;
18545: PPOPN 3
18547: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
18548: LD_EXP 71
18552: PUSH
18553: LD_EXP 115
18557: AND
18558: IFFALSE 18702
18560: GO 18562
18562: DISABLE
18563: LD_INT 0
18565: PPUSH
18566: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
18567: LD_ADDR_VAR 0 2
18571: PUSH
18572: LD_INT 22
18574: PUSH
18575: LD_OWVAR 2
18579: PUSH
18580: EMPTY
18581: LIST
18582: LIST
18583: PUSH
18584: LD_INT 21
18586: PUSH
18587: LD_INT 2
18589: PUSH
18590: EMPTY
18591: LIST
18592: LIST
18593: PUSH
18594: LD_INT 2
18596: PUSH
18597: LD_INT 34
18599: PUSH
18600: LD_INT 12
18602: PUSH
18603: EMPTY
18604: LIST
18605: LIST
18606: PUSH
18607: LD_INT 34
18609: PUSH
18610: LD_INT 51
18612: PUSH
18613: EMPTY
18614: LIST
18615: LIST
18616: PUSH
18617: LD_INT 34
18619: PUSH
18620: LD_INT 32
18622: PUSH
18623: EMPTY
18624: LIST
18625: LIST
18626: PUSH
18627: EMPTY
18628: LIST
18629: LIST
18630: LIST
18631: LIST
18632: PUSH
18633: EMPTY
18634: LIST
18635: LIST
18636: LIST
18637: PPUSH
18638: CALL_OW 69
18642: ST_TO_ADDR
// if not tmp then
18643: LD_VAR 0 2
18647: NOT
18648: IFFALSE 18652
// exit ;
18650: GO 18702
// for i in tmp do
18652: LD_ADDR_VAR 0 1
18656: PUSH
18657: LD_VAR 0 2
18661: PUSH
18662: FOR_IN
18663: IFFALSE 18700
// if GetCargo ( i , mat_artifact ) = 0 then
18665: LD_VAR 0 1
18669: PPUSH
18670: LD_INT 4
18672: PPUSH
18673: CALL_OW 289
18677: PUSH
18678: LD_INT 0
18680: EQUAL
18681: IFFALSE 18698
// SetCargo ( i , mat_siberit , 100 ) ;
18683: LD_VAR 0 1
18687: PPUSH
18688: LD_INT 3
18690: PPUSH
18691: LD_INT 100
18693: PPUSH
18694: CALL_OW 290
18698: GO 18662
18700: POP
18701: POP
// end ;
18702: PPOPN 2
18704: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
18705: LD_EXP 71
18709: PUSH
18710: LD_EXP 116
18714: AND
18715: IFFALSE 18898
18717: GO 18719
18719: DISABLE
18720: LD_INT 0
18722: PPUSH
18723: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
18724: LD_ADDR_VAR 0 2
18728: PUSH
18729: LD_INT 22
18731: PUSH
18732: LD_OWVAR 2
18736: PUSH
18737: EMPTY
18738: LIST
18739: LIST
18740: PPUSH
18741: CALL_OW 69
18745: ST_TO_ADDR
// if not tmp then
18746: LD_VAR 0 2
18750: NOT
18751: IFFALSE 18755
// exit ;
18753: GO 18898
// for i := 1 to 2 do
18755: LD_ADDR_VAR 0 1
18759: PUSH
18760: DOUBLE
18761: LD_INT 1
18763: DEC
18764: ST_TO_ADDR
18765: LD_INT 2
18767: PUSH
18768: FOR_TO
18769: IFFALSE 18896
// begin uc_side := your_side ;
18771: LD_ADDR_OWVAR 20
18775: PUSH
18776: LD_OWVAR 2
18780: ST_TO_ADDR
// uc_nation := nation_american ;
18781: LD_ADDR_OWVAR 21
18785: PUSH
18786: LD_INT 1
18788: ST_TO_ADDR
// vc_chassis := us_morphling ;
18789: LD_ADDR_OWVAR 37
18793: PUSH
18794: LD_INT 5
18796: ST_TO_ADDR
// vc_engine := engine_siberite ;
18797: LD_ADDR_OWVAR 39
18801: PUSH
18802: LD_INT 3
18804: ST_TO_ADDR
// vc_control := control_computer ;
18805: LD_ADDR_OWVAR 38
18809: PUSH
18810: LD_INT 3
18812: ST_TO_ADDR
// vc_weapon := us_double_laser ;
18813: LD_ADDR_OWVAR 40
18817: PUSH
18818: LD_INT 10
18820: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
18821: LD_VAR 0 2
18825: PUSH
18826: LD_INT 1
18828: ARRAY
18829: PPUSH
18830: CALL_OW 310
18834: NOT
18835: IFFALSE 18882
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
18837: CALL_OW 45
18841: PPUSH
18842: LD_VAR 0 2
18846: PUSH
18847: LD_INT 1
18849: ARRAY
18850: PPUSH
18851: CALL_OW 250
18855: PPUSH
18856: LD_VAR 0 2
18860: PUSH
18861: LD_INT 1
18863: ARRAY
18864: PPUSH
18865: CALL_OW 251
18869: PPUSH
18870: LD_INT 12
18872: PPUSH
18873: LD_INT 1
18875: PPUSH
18876: CALL_OW 50
18880: GO 18894
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
18882: CALL_OW 45
18886: PPUSH
18887: LD_INT 1
18889: PPUSH
18890: CALL_OW 51
// end ;
18894: GO 18768
18896: POP
18897: POP
// end ;
18898: PPOPN 2
18900: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
18901: LD_EXP 71
18905: PUSH
18906: LD_EXP 117
18910: AND
18911: IFFALSE 19133
18913: GO 18915
18915: DISABLE
18916: LD_INT 0
18918: PPUSH
18919: PPUSH
18920: PPUSH
18921: PPUSH
18922: PPUSH
18923: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18924: LD_ADDR_VAR 0 6
18928: PUSH
18929: LD_INT 22
18931: PUSH
18932: LD_OWVAR 2
18936: PUSH
18937: EMPTY
18938: LIST
18939: LIST
18940: PUSH
18941: LD_INT 21
18943: PUSH
18944: LD_INT 1
18946: PUSH
18947: EMPTY
18948: LIST
18949: LIST
18950: PUSH
18951: LD_INT 3
18953: PUSH
18954: LD_INT 23
18956: PUSH
18957: LD_INT 0
18959: PUSH
18960: EMPTY
18961: LIST
18962: LIST
18963: PUSH
18964: EMPTY
18965: LIST
18966: LIST
18967: PUSH
18968: EMPTY
18969: LIST
18970: LIST
18971: LIST
18972: PPUSH
18973: CALL_OW 69
18977: ST_TO_ADDR
// if not tmp then
18978: LD_VAR 0 6
18982: NOT
18983: IFFALSE 18987
// exit ;
18985: GO 19133
// s1 := rand ( 1 , 4 ) ;
18987: LD_ADDR_VAR 0 2
18991: PUSH
18992: LD_INT 1
18994: PPUSH
18995: LD_INT 4
18997: PPUSH
18998: CALL_OW 12
19002: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
19003: LD_ADDR_VAR 0 4
19007: PUSH
19008: LD_VAR 0 6
19012: PUSH
19013: LD_INT 1
19015: ARRAY
19016: PPUSH
19017: LD_VAR 0 2
19021: PPUSH
19022: CALL_OW 259
19026: ST_TO_ADDR
// if s1 = 1 then
19027: LD_VAR 0 2
19031: PUSH
19032: LD_INT 1
19034: EQUAL
19035: IFFALSE 19055
// s2 := rand ( 2 , 4 ) else
19037: LD_ADDR_VAR 0 3
19041: PUSH
19042: LD_INT 2
19044: PPUSH
19045: LD_INT 4
19047: PPUSH
19048: CALL_OW 12
19052: ST_TO_ADDR
19053: GO 19063
// s2 := 1 ;
19055: LD_ADDR_VAR 0 3
19059: PUSH
19060: LD_INT 1
19062: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
19063: LD_ADDR_VAR 0 5
19067: PUSH
19068: LD_VAR 0 6
19072: PUSH
19073: LD_INT 1
19075: ARRAY
19076: PPUSH
19077: LD_VAR 0 3
19081: PPUSH
19082: CALL_OW 259
19086: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
19087: LD_VAR 0 6
19091: PUSH
19092: LD_INT 1
19094: ARRAY
19095: PPUSH
19096: LD_VAR 0 2
19100: PPUSH
19101: LD_VAR 0 5
19105: PPUSH
19106: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
19110: LD_VAR 0 6
19114: PUSH
19115: LD_INT 1
19117: ARRAY
19118: PPUSH
19119: LD_VAR 0 3
19123: PPUSH
19124: LD_VAR 0 4
19128: PPUSH
19129: CALL_OW 237
// end ;
19133: PPOPN 6
19135: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
19136: LD_EXP 71
19140: PUSH
19141: LD_EXP 118
19145: AND
19146: IFFALSE 19225
19148: GO 19150
19150: DISABLE
19151: LD_INT 0
19153: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
19154: LD_ADDR_VAR 0 1
19158: PUSH
19159: LD_INT 22
19161: PUSH
19162: LD_OWVAR 2
19166: PUSH
19167: EMPTY
19168: LIST
19169: LIST
19170: PUSH
19171: LD_INT 30
19173: PUSH
19174: LD_INT 3
19176: PUSH
19177: EMPTY
19178: LIST
19179: LIST
19180: PUSH
19181: EMPTY
19182: LIST
19183: LIST
19184: PPUSH
19185: CALL_OW 69
19189: ST_TO_ADDR
// if not tmp then
19190: LD_VAR 0 1
19194: NOT
19195: IFFALSE 19199
// exit ;
19197: GO 19225
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
19199: LD_VAR 0 1
19203: PUSH
19204: LD_INT 1
19206: PPUSH
19207: LD_VAR 0 1
19211: PPUSH
19212: CALL_OW 12
19216: ARRAY
19217: PPUSH
19218: LD_INT 1
19220: PPUSH
19221: CALL_OW 234
// end ;
19225: PPOPN 1
19227: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
19228: LD_EXP 71
19232: PUSH
19233: LD_EXP 119
19237: AND
19238: IFFALSE 19350
19240: GO 19242
19242: DISABLE
19243: LD_INT 0
19245: PPUSH
19246: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
19247: LD_ADDR_VAR 0 2
19251: PUSH
19252: LD_INT 22
19254: PUSH
19255: LD_OWVAR 2
19259: PUSH
19260: EMPTY
19261: LIST
19262: LIST
19263: PUSH
19264: LD_INT 2
19266: PUSH
19267: LD_INT 30
19269: PUSH
19270: LD_INT 27
19272: PUSH
19273: EMPTY
19274: LIST
19275: LIST
19276: PUSH
19277: LD_INT 30
19279: PUSH
19280: LD_INT 26
19282: PUSH
19283: EMPTY
19284: LIST
19285: LIST
19286: PUSH
19287: LD_INT 30
19289: PUSH
19290: LD_INT 28
19292: PUSH
19293: EMPTY
19294: LIST
19295: LIST
19296: PUSH
19297: EMPTY
19298: LIST
19299: LIST
19300: LIST
19301: LIST
19302: PUSH
19303: EMPTY
19304: LIST
19305: LIST
19306: PPUSH
19307: CALL_OW 69
19311: ST_TO_ADDR
// if not tmp then
19312: LD_VAR 0 2
19316: NOT
19317: IFFALSE 19321
// exit ;
19319: GO 19350
// for i in tmp do
19321: LD_ADDR_VAR 0 1
19325: PUSH
19326: LD_VAR 0 2
19330: PUSH
19331: FOR_IN
19332: IFFALSE 19348
// SetLives ( i , 1 ) ;
19334: LD_VAR 0 1
19338: PPUSH
19339: LD_INT 1
19341: PPUSH
19342: CALL_OW 234
19346: GO 19331
19348: POP
19349: POP
// end ;
19350: PPOPN 2
19352: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
19353: LD_EXP 71
19357: PUSH
19358: LD_EXP 120
19362: AND
19363: IFFALSE 19650
19365: GO 19367
19367: DISABLE
19368: LD_INT 0
19370: PPUSH
19371: PPUSH
19372: PPUSH
// begin i := rand ( 1 , 7 ) ;
19373: LD_ADDR_VAR 0 1
19377: PUSH
19378: LD_INT 1
19380: PPUSH
19381: LD_INT 7
19383: PPUSH
19384: CALL_OW 12
19388: ST_TO_ADDR
// case i of 1 :
19389: LD_VAR 0 1
19393: PUSH
19394: LD_INT 1
19396: DOUBLE
19397: EQUAL
19398: IFTRUE 19402
19400: GO 19412
19402: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
19403: LD_STRING earthquake(getX(game), 0, 32)
19405: PPUSH
19406: CALL_OW 559
19410: GO 19650
19412: LD_INT 2
19414: DOUBLE
19415: EQUAL
19416: IFTRUE 19420
19418: GO 19434
19420: POP
// begin ToLua ( displayStucuk(); ) ;
19421: LD_STRING displayStucuk();
19423: PPUSH
19424: CALL_OW 559
// ResetFog ;
19428: CALL_OW 335
// end ; 3 :
19432: GO 19650
19434: LD_INT 3
19436: DOUBLE
19437: EQUAL
19438: IFTRUE 19442
19440: GO 19546
19442: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19443: LD_ADDR_VAR 0 2
19447: PUSH
19448: LD_INT 22
19450: PUSH
19451: LD_OWVAR 2
19455: PUSH
19456: EMPTY
19457: LIST
19458: LIST
19459: PUSH
19460: LD_INT 25
19462: PUSH
19463: LD_INT 1
19465: PUSH
19466: EMPTY
19467: LIST
19468: LIST
19469: PUSH
19470: EMPTY
19471: LIST
19472: LIST
19473: PPUSH
19474: CALL_OW 69
19478: ST_TO_ADDR
// if not tmp then
19479: LD_VAR 0 2
19483: NOT
19484: IFFALSE 19488
// exit ;
19486: GO 19650
// un := tmp [ rand ( 1 , tmp ) ] ;
19488: LD_ADDR_VAR 0 3
19492: PUSH
19493: LD_VAR 0 2
19497: PUSH
19498: LD_INT 1
19500: PPUSH
19501: LD_VAR 0 2
19505: PPUSH
19506: CALL_OW 12
19510: ARRAY
19511: ST_TO_ADDR
// if Crawls ( un ) then
19512: LD_VAR 0 3
19516: PPUSH
19517: CALL_OW 318
19521: IFFALSE 19532
// ComWalk ( un ) ;
19523: LD_VAR 0 3
19527: PPUSH
19528: CALL_OW 138
// SetClass ( un , class_mortar ) ;
19532: LD_VAR 0 3
19536: PPUSH
19537: LD_INT 8
19539: PPUSH
19540: CALL_OW 336
// end ; 4 :
19544: GO 19650
19546: LD_INT 4
19548: DOUBLE
19549: EQUAL
19550: IFTRUE 19554
19552: GO 19628
19554: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
19555: LD_ADDR_VAR 0 2
19559: PUSH
19560: LD_INT 22
19562: PUSH
19563: LD_OWVAR 2
19567: PUSH
19568: EMPTY
19569: LIST
19570: LIST
19571: PUSH
19572: LD_INT 30
19574: PUSH
19575: LD_INT 29
19577: PUSH
19578: EMPTY
19579: LIST
19580: LIST
19581: PUSH
19582: EMPTY
19583: LIST
19584: LIST
19585: PPUSH
19586: CALL_OW 69
19590: ST_TO_ADDR
// if not tmp then
19591: LD_VAR 0 2
19595: NOT
19596: IFFALSE 19600
// exit ;
19598: GO 19650
// CenterNowOnUnits ( tmp [ 1 ] ) ;
19600: LD_VAR 0 2
19604: PUSH
19605: LD_INT 1
19607: ARRAY
19608: PPUSH
19609: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
19613: LD_VAR 0 2
19617: PUSH
19618: LD_INT 1
19620: ARRAY
19621: PPUSH
19622: CALL_OW 65
// end ; 5 .. 7 :
19626: GO 19650
19628: LD_INT 5
19630: DOUBLE
19631: GREATEREQUAL
19632: IFFALSE 19640
19634: LD_INT 7
19636: DOUBLE
19637: LESSEQUAL
19638: IFTRUE 19642
19640: GO 19649
19642: POP
// StreamSibBomb ; end ;
19643: CALL 15887 0 0
19647: GO 19650
19649: POP
// end ;
19650: PPOPN 3
19652: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
19653: LD_EXP 71
19657: PUSH
19658: LD_EXP 121
19662: AND
19663: IFFALSE 19819
19665: GO 19667
19667: DISABLE
19668: LD_INT 0
19670: PPUSH
19671: PPUSH
19672: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
19673: LD_ADDR_VAR 0 2
19677: PUSH
19678: LD_INT 81
19680: PUSH
19681: LD_OWVAR 2
19685: PUSH
19686: EMPTY
19687: LIST
19688: LIST
19689: PUSH
19690: LD_INT 2
19692: PUSH
19693: LD_INT 21
19695: PUSH
19696: LD_INT 1
19698: PUSH
19699: EMPTY
19700: LIST
19701: LIST
19702: PUSH
19703: LD_INT 21
19705: PUSH
19706: LD_INT 2
19708: PUSH
19709: EMPTY
19710: LIST
19711: LIST
19712: PUSH
19713: EMPTY
19714: LIST
19715: LIST
19716: LIST
19717: PUSH
19718: EMPTY
19719: LIST
19720: LIST
19721: PPUSH
19722: CALL_OW 69
19726: ST_TO_ADDR
// if not tmp then
19727: LD_VAR 0 2
19731: NOT
19732: IFFALSE 19736
// exit ;
19734: GO 19819
// p := 0 ;
19736: LD_ADDR_VAR 0 3
19740: PUSH
19741: LD_INT 0
19743: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19744: LD_INT 35
19746: PPUSH
19747: CALL_OW 67
// p := p + 1 ;
19751: LD_ADDR_VAR 0 3
19755: PUSH
19756: LD_VAR 0 3
19760: PUSH
19761: LD_INT 1
19763: PLUS
19764: ST_TO_ADDR
// for i in tmp do
19765: LD_ADDR_VAR 0 1
19769: PUSH
19770: LD_VAR 0 2
19774: PUSH
19775: FOR_IN
19776: IFFALSE 19807
// if GetLives ( i ) < 1000 then
19778: LD_VAR 0 1
19782: PPUSH
19783: CALL_OW 256
19787: PUSH
19788: LD_INT 1000
19790: LESS
19791: IFFALSE 19805
// SetLives ( i , 1000 ) ;
19793: LD_VAR 0 1
19797: PPUSH
19798: LD_INT 1000
19800: PPUSH
19801: CALL_OW 234
19805: GO 19775
19807: POP
19808: POP
// until p > 20 ;
19809: LD_VAR 0 3
19813: PUSH
19814: LD_INT 20
19816: GREATER
19817: IFFALSE 19744
// end ;
19819: PPOPN 3
19821: END
// every 0 0$1 trigger StreamModeActive and sTime do
19822: LD_EXP 71
19826: PUSH
19827: LD_EXP 122
19831: AND
19832: IFFALSE 19867
19834: GO 19836
19836: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
19837: LD_INT 28
19839: PPUSH
19840: LD_OWVAR 2
19844: PPUSH
19845: LD_INT 2
19847: PPUSH
19848: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
19852: LD_INT 30
19854: PPUSH
19855: LD_OWVAR 2
19859: PPUSH
19860: LD_INT 2
19862: PPUSH
19863: CALL_OW 322
// end ;
19867: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
19868: LD_EXP 71
19872: PUSH
19873: LD_EXP 123
19877: AND
19878: IFFALSE 19999
19880: GO 19882
19882: DISABLE
19883: LD_INT 0
19885: PPUSH
19886: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19887: LD_ADDR_VAR 0 2
19891: PUSH
19892: LD_INT 22
19894: PUSH
19895: LD_OWVAR 2
19899: PUSH
19900: EMPTY
19901: LIST
19902: LIST
19903: PUSH
19904: LD_INT 21
19906: PUSH
19907: LD_INT 1
19909: PUSH
19910: EMPTY
19911: LIST
19912: LIST
19913: PUSH
19914: LD_INT 3
19916: PUSH
19917: LD_INT 23
19919: PUSH
19920: LD_INT 0
19922: PUSH
19923: EMPTY
19924: LIST
19925: LIST
19926: PUSH
19927: EMPTY
19928: LIST
19929: LIST
19930: PUSH
19931: EMPTY
19932: LIST
19933: LIST
19934: LIST
19935: PPUSH
19936: CALL_OW 69
19940: ST_TO_ADDR
// if not tmp then
19941: LD_VAR 0 2
19945: NOT
19946: IFFALSE 19950
// exit ;
19948: GO 19999
// for i in tmp do
19950: LD_ADDR_VAR 0 1
19954: PUSH
19955: LD_VAR 0 2
19959: PUSH
19960: FOR_IN
19961: IFFALSE 19997
// begin if Crawls ( i ) then
19963: LD_VAR 0 1
19967: PPUSH
19968: CALL_OW 318
19972: IFFALSE 19983
// ComWalk ( i ) ;
19974: LD_VAR 0 1
19978: PPUSH
19979: CALL_OW 138
// SetClass ( i , 2 ) ;
19983: LD_VAR 0 1
19987: PPUSH
19988: LD_INT 2
19990: PPUSH
19991: CALL_OW 336
// end ;
19995: GO 19960
19997: POP
19998: POP
// end ;
19999: PPOPN 2
20001: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
20002: LD_EXP 71
20006: PUSH
20007: LD_EXP 124
20011: AND
20012: IFFALSE 20300
20014: GO 20016
20016: DISABLE
20017: LD_INT 0
20019: PPUSH
20020: PPUSH
20021: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
20022: LD_OWVAR 2
20026: PPUSH
20027: LD_INT 9
20029: PPUSH
20030: LD_INT 1
20032: PPUSH
20033: LD_INT 1
20035: PPUSH
20036: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
20040: LD_INT 9
20042: PPUSH
20043: LD_OWVAR 2
20047: PPUSH
20048: CALL_OW 343
// uc_side := 9 ;
20052: LD_ADDR_OWVAR 20
20056: PUSH
20057: LD_INT 9
20059: ST_TO_ADDR
// uc_nation := 2 ;
20060: LD_ADDR_OWVAR 21
20064: PUSH
20065: LD_INT 2
20067: ST_TO_ADDR
// hc_name := Dark Warrior ;
20068: LD_ADDR_OWVAR 26
20072: PUSH
20073: LD_STRING Dark Warrior
20075: ST_TO_ADDR
// hc_gallery :=  ;
20076: LD_ADDR_OWVAR 33
20080: PUSH
20081: LD_STRING 
20083: ST_TO_ADDR
// hc_noskilllimit := true ;
20084: LD_ADDR_OWVAR 76
20088: PUSH
20089: LD_INT 1
20091: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
20092: LD_ADDR_OWVAR 31
20096: PUSH
20097: LD_INT 30
20099: PUSH
20100: LD_INT 30
20102: PUSH
20103: LD_INT 30
20105: PUSH
20106: LD_INT 30
20108: PUSH
20109: EMPTY
20110: LIST
20111: LIST
20112: LIST
20113: LIST
20114: ST_TO_ADDR
// un := CreateHuman ;
20115: LD_ADDR_VAR 0 3
20119: PUSH
20120: CALL_OW 44
20124: ST_TO_ADDR
// hc_noskilllimit := false ;
20125: LD_ADDR_OWVAR 76
20129: PUSH
20130: LD_INT 0
20132: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20133: LD_VAR 0 3
20137: PPUSH
20138: LD_INT 1
20140: PPUSH
20141: CALL_OW 51
// ToLua ( playRanger() ) ;
20145: LD_STRING playRanger()
20147: PPUSH
20148: CALL_OW 559
// p := 0 ;
20152: LD_ADDR_VAR 0 2
20156: PUSH
20157: LD_INT 0
20159: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
20160: LD_INT 35
20162: PPUSH
20163: CALL_OW 67
// p := p + 1 ;
20167: LD_ADDR_VAR 0 2
20171: PUSH
20172: LD_VAR 0 2
20176: PUSH
20177: LD_INT 1
20179: PLUS
20180: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
20181: LD_VAR 0 3
20185: PPUSH
20186: CALL_OW 256
20190: PUSH
20191: LD_INT 1000
20193: LESS
20194: IFFALSE 20208
// SetLives ( un , 1000 ) ;
20196: LD_VAR 0 3
20200: PPUSH
20201: LD_INT 1000
20203: PPUSH
20204: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
20208: LD_VAR 0 3
20212: PPUSH
20213: LD_INT 81
20215: PUSH
20216: LD_OWVAR 2
20220: PUSH
20221: EMPTY
20222: LIST
20223: LIST
20224: PUSH
20225: LD_INT 91
20227: PUSH
20228: LD_VAR 0 3
20232: PUSH
20233: LD_INT 30
20235: PUSH
20236: EMPTY
20237: LIST
20238: LIST
20239: LIST
20240: PUSH
20241: EMPTY
20242: LIST
20243: LIST
20244: PPUSH
20245: CALL_OW 69
20249: PPUSH
20250: LD_VAR 0 3
20254: PPUSH
20255: CALL_OW 74
20259: PPUSH
20260: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
20264: LD_VAR 0 2
20268: PUSH
20269: LD_INT 80
20271: GREATER
20272: PUSH
20273: LD_VAR 0 3
20277: PPUSH
20278: CALL_OW 301
20282: OR
20283: IFFALSE 20160
// if un then
20285: LD_VAR 0 3
20289: IFFALSE 20300
// RemoveUnit ( un ) ;
20291: LD_VAR 0 3
20295: PPUSH
20296: CALL_OW 64
// end ;
20300: PPOPN 3
20302: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
20303: LD_EXP 125
20307: IFFALSE 20423
20309: GO 20311
20311: DISABLE
20312: LD_INT 0
20314: PPUSH
20315: PPUSH
20316: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
20317: LD_ADDR_VAR 0 2
20321: PUSH
20322: LD_INT 81
20324: PUSH
20325: LD_OWVAR 2
20329: PUSH
20330: EMPTY
20331: LIST
20332: LIST
20333: PUSH
20334: LD_INT 21
20336: PUSH
20337: LD_INT 1
20339: PUSH
20340: EMPTY
20341: LIST
20342: LIST
20343: PUSH
20344: EMPTY
20345: LIST
20346: LIST
20347: PPUSH
20348: CALL_OW 69
20352: ST_TO_ADDR
// ToLua ( playComputer() ) ;
20353: LD_STRING playComputer()
20355: PPUSH
20356: CALL_OW 559
// if not tmp then
20360: LD_VAR 0 2
20364: NOT
20365: IFFALSE 20369
// exit ;
20367: GO 20423
// for i in tmp do
20369: LD_ADDR_VAR 0 1
20373: PUSH
20374: LD_VAR 0 2
20378: PUSH
20379: FOR_IN
20380: IFFALSE 20421
// for j := 1 to 4 do
20382: LD_ADDR_VAR 0 3
20386: PUSH
20387: DOUBLE
20388: LD_INT 1
20390: DEC
20391: ST_TO_ADDR
20392: LD_INT 4
20394: PUSH
20395: FOR_TO
20396: IFFALSE 20417
// SetSkill ( i , j , 10 ) ;
20398: LD_VAR 0 1
20402: PPUSH
20403: LD_VAR 0 3
20407: PPUSH
20408: LD_INT 10
20410: PPUSH
20411: CALL_OW 237
20415: GO 20395
20417: POP
20418: POP
20419: GO 20379
20421: POP
20422: POP
// end ;
20423: PPOPN 3
20425: END
// every 0 0$1 trigger s30 do var i , tmp ;
20426: LD_EXP 126
20430: IFFALSE 20499
20432: GO 20434
20434: DISABLE
20435: LD_INT 0
20437: PPUSH
20438: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
20439: LD_ADDR_VAR 0 2
20443: PUSH
20444: LD_INT 22
20446: PUSH
20447: LD_OWVAR 2
20451: PUSH
20452: EMPTY
20453: LIST
20454: LIST
20455: PPUSH
20456: CALL_OW 69
20460: ST_TO_ADDR
// if not tmp then
20461: LD_VAR 0 2
20465: NOT
20466: IFFALSE 20470
// exit ;
20468: GO 20499
// for i in tmp do
20470: LD_ADDR_VAR 0 1
20474: PUSH
20475: LD_VAR 0 2
20479: PUSH
20480: FOR_IN
20481: IFFALSE 20497
// SetLives ( i , 300 ) ;
20483: LD_VAR 0 1
20487: PPUSH
20488: LD_INT 300
20490: PPUSH
20491: CALL_OW 234
20495: GO 20480
20497: POP
20498: POP
// end ;
20499: PPOPN 2
20501: END
// every 0 0$1 trigger s60 do var i , tmp ;
20502: LD_EXP 127
20506: IFFALSE 20575
20508: GO 20510
20510: DISABLE
20511: LD_INT 0
20513: PPUSH
20514: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
20515: LD_ADDR_VAR 0 2
20519: PUSH
20520: LD_INT 22
20522: PUSH
20523: LD_OWVAR 2
20527: PUSH
20528: EMPTY
20529: LIST
20530: LIST
20531: PPUSH
20532: CALL_OW 69
20536: ST_TO_ADDR
// if not tmp then
20537: LD_VAR 0 2
20541: NOT
20542: IFFALSE 20546
// exit ;
20544: GO 20575
// for i in tmp do
20546: LD_ADDR_VAR 0 1
20550: PUSH
20551: LD_VAR 0 2
20555: PUSH
20556: FOR_IN
20557: IFFALSE 20573
// SetLives ( i , 600 ) ;
20559: LD_VAR 0 1
20563: PPUSH
20564: LD_INT 600
20566: PPUSH
20567: CALL_OW 234
20571: GO 20556
20573: POP
20574: POP
// end ;
20575: PPOPN 2
20577: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
20578: LD_INT 0
20580: PPUSH
// case cmd of 301 :
20581: LD_VAR 0 1
20585: PUSH
20586: LD_INT 301
20588: DOUBLE
20589: EQUAL
20590: IFTRUE 20594
20592: GO 20626
20594: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
20595: LD_VAR 0 6
20599: PPUSH
20600: LD_VAR 0 7
20604: PPUSH
20605: LD_VAR 0 8
20609: PPUSH
20610: LD_VAR 0 4
20614: PPUSH
20615: LD_VAR 0 5
20619: PPUSH
20620: CALL 21827 0 5
20624: GO 20747
20626: LD_INT 302
20628: DOUBLE
20629: EQUAL
20630: IFTRUE 20634
20632: GO 20671
20634: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
20635: LD_VAR 0 6
20639: PPUSH
20640: LD_VAR 0 7
20644: PPUSH
20645: LD_VAR 0 8
20649: PPUSH
20650: LD_VAR 0 9
20654: PPUSH
20655: LD_VAR 0 4
20659: PPUSH
20660: LD_VAR 0 5
20664: PPUSH
20665: CALL 21918 0 6
20669: GO 20747
20671: LD_INT 303
20673: DOUBLE
20674: EQUAL
20675: IFTRUE 20679
20677: GO 20716
20679: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
20680: LD_VAR 0 6
20684: PPUSH
20685: LD_VAR 0 7
20689: PPUSH
20690: LD_VAR 0 8
20694: PPUSH
20695: LD_VAR 0 9
20699: PPUSH
20700: LD_VAR 0 4
20704: PPUSH
20705: LD_VAR 0 5
20709: PPUSH
20710: CALL 20752 0 6
20714: GO 20747
20716: LD_INT 304
20718: DOUBLE
20719: EQUAL
20720: IFTRUE 20724
20722: GO 20746
20724: POP
// hHackTeleport ( unit , x , y ) ; end ;
20725: LD_VAR 0 2
20729: PPUSH
20730: LD_VAR 0 4
20734: PPUSH
20735: LD_VAR 0 5
20739: PPUSH
20740: CALL 22511 0 3
20744: GO 20747
20746: POP
// end ;
20747: LD_VAR 0 12
20751: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
20752: LD_INT 0
20754: PPUSH
20755: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
20756: LD_VAR 0 1
20760: PUSH
20761: LD_INT 1
20763: LESS
20764: PUSH
20765: LD_VAR 0 1
20769: PUSH
20770: LD_INT 3
20772: GREATER
20773: OR
20774: PUSH
20775: LD_VAR 0 5
20779: PPUSH
20780: LD_VAR 0 6
20784: PPUSH
20785: CALL_OW 428
20789: OR
20790: IFFALSE 20794
// exit ;
20792: GO 21514
// uc_side := your_side ;
20794: LD_ADDR_OWVAR 20
20798: PUSH
20799: LD_OWVAR 2
20803: ST_TO_ADDR
// uc_nation := nation ;
20804: LD_ADDR_OWVAR 21
20808: PUSH
20809: LD_VAR 0 1
20813: ST_TO_ADDR
// bc_level = 1 ;
20814: LD_ADDR_OWVAR 43
20818: PUSH
20819: LD_INT 1
20821: ST_TO_ADDR
// case btype of 1 :
20822: LD_VAR 0 2
20826: PUSH
20827: LD_INT 1
20829: DOUBLE
20830: EQUAL
20831: IFTRUE 20835
20833: GO 20846
20835: POP
// bc_type := b_depot ; 2 :
20836: LD_ADDR_OWVAR 42
20840: PUSH
20841: LD_INT 0
20843: ST_TO_ADDR
20844: GO 21458
20846: LD_INT 2
20848: DOUBLE
20849: EQUAL
20850: IFTRUE 20854
20852: GO 20865
20854: POP
// bc_type := b_warehouse ; 3 :
20855: LD_ADDR_OWVAR 42
20859: PUSH
20860: LD_INT 1
20862: ST_TO_ADDR
20863: GO 21458
20865: LD_INT 3
20867: DOUBLE
20868: EQUAL
20869: IFTRUE 20873
20871: GO 20884
20873: POP
// bc_type := b_lab ; 4 .. 9 :
20874: LD_ADDR_OWVAR 42
20878: PUSH
20879: LD_INT 6
20881: ST_TO_ADDR
20882: GO 21458
20884: LD_INT 4
20886: DOUBLE
20887: GREATEREQUAL
20888: IFFALSE 20896
20890: LD_INT 9
20892: DOUBLE
20893: LESSEQUAL
20894: IFTRUE 20898
20896: GO 20950
20898: POP
// begin bc_type := b_lab_half ;
20899: LD_ADDR_OWVAR 42
20903: PUSH
20904: LD_INT 7
20906: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
20907: LD_ADDR_OWVAR 44
20911: PUSH
20912: LD_INT 10
20914: PUSH
20915: LD_INT 11
20917: PUSH
20918: LD_INT 12
20920: PUSH
20921: LD_INT 15
20923: PUSH
20924: LD_INT 14
20926: PUSH
20927: LD_INT 13
20929: PUSH
20930: EMPTY
20931: LIST
20932: LIST
20933: LIST
20934: LIST
20935: LIST
20936: LIST
20937: PUSH
20938: LD_VAR 0 2
20942: PUSH
20943: LD_INT 3
20945: MINUS
20946: ARRAY
20947: ST_TO_ADDR
// end ; 10 .. 13 :
20948: GO 21458
20950: LD_INT 10
20952: DOUBLE
20953: GREATEREQUAL
20954: IFFALSE 20962
20956: LD_INT 13
20958: DOUBLE
20959: LESSEQUAL
20960: IFTRUE 20964
20962: GO 21041
20964: POP
// begin bc_type := b_lab_full ;
20965: LD_ADDR_OWVAR 42
20969: PUSH
20970: LD_INT 8
20972: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
20973: LD_ADDR_OWVAR 44
20977: PUSH
20978: LD_INT 10
20980: PUSH
20981: LD_INT 12
20983: PUSH
20984: LD_INT 14
20986: PUSH
20987: LD_INT 13
20989: PUSH
20990: EMPTY
20991: LIST
20992: LIST
20993: LIST
20994: LIST
20995: PUSH
20996: LD_VAR 0 2
21000: PUSH
21001: LD_INT 9
21003: MINUS
21004: ARRAY
21005: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
21006: LD_ADDR_OWVAR 45
21010: PUSH
21011: LD_INT 11
21013: PUSH
21014: LD_INT 15
21016: PUSH
21017: LD_INT 12
21019: PUSH
21020: LD_INT 15
21022: PUSH
21023: EMPTY
21024: LIST
21025: LIST
21026: LIST
21027: LIST
21028: PUSH
21029: LD_VAR 0 2
21033: PUSH
21034: LD_INT 9
21036: MINUS
21037: ARRAY
21038: ST_TO_ADDR
// end ; 14 :
21039: GO 21458
21041: LD_INT 14
21043: DOUBLE
21044: EQUAL
21045: IFTRUE 21049
21047: GO 21060
21049: POP
// bc_type := b_workshop ; 15 :
21050: LD_ADDR_OWVAR 42
21054: PUSH
21055: LD_INT 2
21057: ST_TO_ADDR
21058: GO 21458
21060: LD_INT 15
21062: DOUBLE
21063: EQUAL
21064: IFTRUE 21068
21066: GO 21079
21068: POP
// bc_type := b_factory ; 16 :
21069: LD_ADDR_OWVAR 42
21073: PUSH
21074: LD_INT 3
21076: ST_TO_ADDR
21077: GO 21458
21079: LD_INT 16
21081: DOUBLE
21082: EQUAL
21083: IFTRUE 21087
21085: GO 21098
21087: POP
// bc_type := b_ext_gun ; 17 :
21088: LD_ADDR_OWVAR 42
21092: PUSH
21093: LD_INT 17
21095: ST_TO_ADDR
21096: GO 21458
21098: LD_INT 17
21100: DOUBLE
21101: EQUAL
21102: IFTRUE 21106
21104: GO 21134
21106: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
21107: LD_ADDR_OWVAR 42
21111: PUSH
21112: LD_INT 19
21114: PUSH
21115: LD_INT 23
21117: PUSH
21118: LD_INT 19
21120: PUSH
21121: EMPTY
21122: LIST
21123: LIST
21124: LIST
21125: PUSH
21126: LD_VAR 0 1
21130: ARRAY
21131: ST_TO_ADDR
21132: GO 21458
21134: LD_INT 18
21136: DOUBLE
21137: EQUAL
21138: IFTRUE 21142
21140: GO 21153
21142: POP
// bc_type := b_ext_radar ; 19 :
21143: LD_ADDR_OWVAR 42
21147: PUSH
21148: LD_INT 20
21150: ST_TO_ADDR
21151: GO 21458
21153: LD_INT 19
21155: DOUBLE
21156: EQUAL
21157: IFTRUE 21161
21159: GO 21172
21161: POP
// bc_type := b_ext_radio ; 20 :
21162: LD_ADDR_OWVAR 42
21166: PUSH
21167: LD_INT 22
21169: ST_TO_ADDR
21170: GO 21458
21172: LD_INT 20
21174: DOUBLE
21175: EQUAL
21176: IFTRUE 21180
21178: GO 21191
21180: POP
// bc_type := b_ext_siberium ; 21 :
21181: LD_ADDR_OWVAR 42
21185: PUSH
21186: LD_INT 21
21188: ST_TO_ADDR
21189: GO 21458
21191: LD_INT 21
21193: DOUBLE
21194: EQUAL
21195: IFTRUE 21199
21197: GO 21210
21199: POP
// bc_type := b_ext_computer ; 22 :
21200: LD_ADDR_OWVAR 42
21204: PUSH
21205: LD_INT 24
21207: ST_TO_ADDR
21208: GO 21458
21210: LD_INT 22
21212: DOUBLE
21213: EQUAL
21214: IFTRUE 21218
21216: GO 21229
21218: POP
// bc_type := b_ext_track ; 23 :
21219: LD_ADDR_OWVAR 42
21223: PUSH
21224: LD_INT 16
21226: ST_TO_ADDR
21227: GO 21458
21229: LD_INT 23
21231: DOUBLE
21232: EQUAL
21233: IFTRUE 21237
21235: GO 21248
21237: POP
// bc_type := b_ext_laser ; 24 :
21238: LD_ADDR_OWVAR 42
21242: PUSH
21243: LD_INT 25
21245: ST_TO_ADDR
21246: GO 21458
21248: LD_INT 24
21250: DOUBLE
21251: EQUAL
21252: IFTRUE 21256
21254: GO 21267
21256: POP
// bc_type := b_control_tower ; 25 :
21257: LD_ADDR_OWVAR 42
21261: PUSH
21262: LD_INT 36
21264: ST_TO_ADDR
21265: GO 21458
21267: LD_INT 25
21269: DOUBLE
21270: EQUAL
21271: IFTRUE 21275
21273: GO 21286
21275: POP
// bc_type := b_breastwork ; 26 :
21276: LD_ADDR_OWVAR 42
21280: PUSH
21281: LD_INT 31
21283: ST_TO_ADDR
21284: GO 21458
21286: LD_INT 26
21288: DOUBLE
21289: EQUAL
21290: IFTRUE 21294
21292: GO 21305
21294: POP
// bc_type := b_bunker ; 27 :
21295: LD_ADDR_OWVAR 42
21299: PUSH
21300: LD_INT 32
21302: ST_TO_ADDR
21303: GO 21458
21305: LD_INT 27
21307: DOUBLE
21308: EQUAL
21309: IFTRUE 21313
21311: GO 21324
21313: POP
// bc_type := b_turret ; 28 :
21314: LD_ADDR_OWVAR 42
21318: PUSH
21319: LD_INT 33
21321: ST_TO_ADDR
21322: GO 21458
21324: LD_INT 28
21326: DOUBLE
21327: EQUAL
21328: IFTRUE 21332
21330: GO 21343
21332: POP
// bc_type := b_armoury ; 29 :
21333: LD_ADDR_OWVAR 42
21337: PUSH
21338: LD_INT 4
21340: ST_TO_ADDR
21341: GO 21458
21343: LD_INT 29
21345: DOUBLE
21346: EQUAL
21347: IFTRUE 21351
21349: GO 21362
21351: POP
// bc_type := b_barracks ; 30 :
21352: LD_ADDR_OWVAR 42
21356: PUSH
21357: LD_INT 5
21359: ST_TO_ADDR
21360: GO 21458
21362: LD_INT 30
21364: DOUBLE
21365: EQUAL
21366: IFTRUE 21370
21368: GO 21381
21370: POP
// bc_type := b_solar_power ; 31 :
21371: LD_ADDR_OWVAR 42
21375: PUSH
21376: LD_INT 27
21378: ST_TO_ADDR
21379: GO 21458
21381: LD_INT 31
21383: DOUBLE
21384: EQUAL
21385: IFTRUE 21389
21387: GO 21400
21389: POP
// bc_type := b_oil_power ; 32 :
21390: LD_ADDR_OWVAR 42
21394: PUSH
21395: LD_INT 26
21397: ST_TO_ADDR
21398: GO 21458
21400: LD_INT 32
21402: DOUBLE
21403: EQUAL
21404: IFTRUE 21408
21406: GO 21419
21408: POP
// bc_type := b_siberite_power ; 33 :
21409: LD_ADDR_OWVAR 42
21413: PUSH
21414: LD_INT 28
21416: ST_TO_ADDR
21417: GO 21458
21419: LD_INT 33
21421: DOUBLE
21422: EQUAL
21423: IFTRUE 21427
21425: GO 21438
21427: POP
// bc_type := b_oil_mine ; 34 :
21428: LD_ADDR_OWVAR 42
21432: PUSH
21433: LD_INT 29
21435: ST_TO_ADDR
21436: GO 21458
21438: LD_INT 34
21440: DOUBLE
21441: EQUAL
21442: IFTRUE 21446
21444: GO 21457
21446: POP
// bc_type := b_siberite_mine ; end ;
21447: LD_ADDR_OWVAR 42
21451: PUSH
21452: LD_INT 30
21454: ST_TO_ADDR
21455: GO 21458
21457: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
21458: LD_ADDR_VAR 0 8
21462: PUSH
21463: LD_VAR 0 5
21467: PPUSH
21468: LD_VAR 0 6
21472: PPUSH
21473: LD_VAR 0 3
21477: PPUSH
21478: CALL_OW 47
21482: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
21483: LD_OWVAR 42
21487: PUSH
21488: LD_INT 32
21490: PUSH
21491: LD_INT 33
21493: PUSH
21494: EMPTY
21495: LIST
21496: LIST
21497: IN
21498: IFFALSE 21514
// PlaceWeaponTurret ( b , weapon ) ;
21500: LD_VAR 0 8
21504: PPUSH
21505: LD_VAR 0 4
21509: PPUSH
21510: CALL_OW 431
// end ;
21514: LD_VAR 0 7
21518: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
21519: LD_INT 0
21521: PPUSH
21522: PPUSH
21523: PPUSH
21524: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21525: LD_ADDR_VAR 0 4
21529: PUSH
21530: LD_INT 22
21532: PUSH
21533: LD_OWVAR 2
21537: PUSH
21538: EMPTY
21539: LIST
21540: LIST
21541: PUSH
21542: LD_INT 2
21544: PUSH
21545: LD_INT 30
21547: PUSH
21548: LD_INT 0
21550: PUSH
21551: EMPTY
21552: LIST
21553: LIST
21554: PUSH
21555: LD_INT 30
21557: PUSH
21558: LD_INT 1
21560: PUSH
21561: EMPTY
21562: LIST
21563: LIST
21564: PUSH
21565: EMPTY
21566: LIST
21567: LIST
21568: LIST
21569: PUSH
21570: EMPTY
21571: LIST
21572: LIST
21573: PPUSH
21574: CALL_OW 69
21578: ST_TO_ADDR
// if not tmp then
21579: LD_VAR 0 4
21583: NOT
21584: IFFALSE 21588
// exit ;
21586: GO 21647
// for i in tmp do
21588: LD_ADDR_VAR 0 2
21592: PUSH
21593: LD_VAR 0 4
21597: PUSH
21598: FOR_IN
21599: IFFALSE 21645
// for j = 1 to 3 do
21601: LD_ADDR_VAR 0 3
21605: PUSH
21606: DOUBLE
21607: LD_INT 1
21609: DEC
21610: ST_TO_ADDR
21611: LD_INT 3
21613: PUSH
21614: FOR_TO
21615: IFFALSE 21641
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
21617: LD_VAR 0 2
21621: PPUSH
21622: CALL_OW 274
21626: PPUSH
21627: LD_VAR 0 3
21631: PPUSH
21632: LD_INT 99999
21634: PPUSH
21635: CALL_OW 277
21639: GO 21614
21641: POP
21642: POP
21643: GO 21598
21645: POP
21646: POP
// end ;
21647: LD_VAR 0 1
21651: RET
// export function hHackSetLevel10 ; var i , j ; begin
21652: LD_INT 0
21654: PPUSH
21655: PPUSH
21656: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
21657: LD_ADDR_VAR 0 2
21661: PUSH
21662: LD_INT 21
21664: PUSH
21665: LD_INT 1
21667: PUSH
21668: EMPTY
21669: LIST
21670: LIST
21671: PPUSH
21672: CALL_OW 69
21676: PUSH
21677: FOR_IN
21678: IFFALSE 21730
// if IsSelected ( i ) then
21680: LD_VAR 0 2
21684: PPUSH
21685: CALL_OW 306
21689: IFFALSE 21728
// begin for j := 1 to 4 do
21691: LD_ADDR_VAR 0 3
21695: PUSH
21696: DOUBLE
21697: LD_INT 1
21699: DEC
21700: ST_TO_ADDR
21701: LD_INT 4
21703: PUSH
21704: FOR_TO
21705: IFFALSE 21726
// SetSkill ( i , j , 10 ) ;
21707: LD_VAR 0 2
21711: PPUSH
21712: LD_VAR 0 3
21716: PPUSH
21717: LD_INT 10
21719: PPUSH
21720: CALL_OW 237
21724: GO 21704
21726: POP
21727: POP
// end ;
21728: GO 21677
21730: POP
21731: POP
// end ;
21732: LD_VAR 0 1
21736: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
21737: LD_INT 0
21739: PPUSH
21740: PPUSH
21741: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
21742: LD_ADDR_VAR 0 2
21746: PUSH
21747: LD_INT 22
21749: PUSH
21750: LD_OWVAR 2
21754: PUSH
21755: EMPTY
21756: LIST
21757: LIST
21758: PUSH
21759: LD_INT 21
21761: PUSH
21762: LD_INT 1
21764: PUSH
21765: EMPTY
21766: LIST
21767: LIST
21768: PUSH
21769: EMPTY
21770: LIST
21771: LIST
21772: PPUSH
21773: CALL_OW 69
21777: PUSH
21778: FOR_IN
21779: IFFALSE 21820
// begin for j := 1 to 4 do
21781: LD_ADDR_VAR 0 3
21785: PUSH
21786: DOUBLE
21787: LD_INT 1
21789: DEC
21790: ST_TO_ADDR
21791: LD_INT 4
21793: PUSH
21794: FOR_TO
21795: IFFALSE 21816
// SetSkill ( i , j , 10 ) ;
21797: LD_VAR 0 2
21801: PPUSH
21802: LD_VAR 0 3
21806: PPUSH
21807: LD_INT 10
21809: PPUSH
21810: CALL_OW 237
21814: GO 21794
21816: POP
21817: POP
// end ;
21818: GO 21778
21820: POP
21821: POP
// end ;
21822: LD_VAR 0 1
21826: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
21827: LD_INT 0
21829: PPUSH
// uc_side := your_side ;
21830: LD_ADDR_OWVAR 20
21834: PUSH
21835: LD_OWVAR 2
21839: ST_TO_ADDR
// uc_nation := nation ;
21840: LD_ADDR_OWVAR 21
21844: PUSH
21845: LD_VAR 0 1
21849: ST_TO_ADDR
// InitHc ;
21850: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
21854: LD_INT 0
21856: PPUSH
21857: LD_VAR 0 2
21861: PPUSH
21862: LD_VAR 0 3
21866: PPUSH
21867: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
21871: LD_VAR 0 4
21875: PPUSH
21876: LD_VAR 0 5
21880: PPUSH
21881: CALL_OW 428
21885: PUSH
21886: LD_INT 0
21888: EQUAL
21889: IFFALSE 21913
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
21891: CALL_OW 44
21895: PPUSH
21896: LD_VAR 0 4
21900: PPUSH
21901: LD_VAR 0 5
21905: PPUSH
21906: LD_INT 1
21908: PPUSH
21909: CALL_OW 48
// end ;
21913: LD_VAR 0 6
21917: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
21918: LD_INT 0
21920: PPUSH
21921: PPUSH
// uc_side := your_side ;
21922: LD_ADDR_OWVAR 20
21926: PUSH
21927: LD_OWVAR 2
21931: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
21932: LD_VAR 0 1
21936: PUSH
21937: LD_INT 1
21939: PUSH
21940: LD_INT 2
21942: PUSH
21943: LD_INT 3
21945: PUSH
21946: LD_INT 4
21948: PUSH
21949: LD_INT 5
21951: PUSH
21952: EMPTY
21953: LIST
21954: LIST
21955: LIST
21956: LIST
21957: LIST
21958: IN
21959: IFFALSE 21971
// uc_nation := nation_american else
21961: LD_ADDR_OWVAR 21
21965: PUSH
21966: LD_INT 1
21968: ST_TO_ADDR
21969: GO 22014
// if chassis in [ 11 , 12 , 13 , 14 ] then
21971: LD_VAR 0 1
21975: PUSH
21976: LD_INT 11
21978: PUSH
21979: LD_INT 12
21981: PUSH
21982: LD_INT 13
21984: PUSH
21985: LD_INT 14
21987: PUSH
21988: EMPTY
21989: LIST
21990: LIST
21991: LIST
21992: LIST
21993: IN
21994: IFFALSE 22006
// uc_nation := nation_arabian else
21996: LD_ADDR_OWVAR 21
22000: PUSH
22001: LD_INT 2
22003: ST_TO_ADDR
22004: GO 22014
// uc_nation := nation_russian ;
22006: LD_ADDR_OWVAR 21
22010: PUSH
22011: LD_INT 3
22013: ST_TO_ADDR
// vc_chassis := chassis ;
22014: LD_ADDR_OWVAR 37
22018: PUSH
22019: LD_VAR 0 1
22023: ST_TO_ADDR
// vc_engine := engine ;
22024: LD_ADDR_OWVAR 39
22028: PUSH
22029: LD_VAR 0 2
22033: ST_TO_ADDR
// vc_control := control ;
22034: LD_ADDR_OWVAR 38
22038: PUSH
22039: LD_VAR 0 3
22043: ST_TO_ADDR
// vc_weapon := weapon ;
22044: LD_ADDR_OWVAR 40
22048: PUSH
22049: LD_VAR 0 4
22053: ST_TO_ADDR
// un := CreateVehicle ;
22054: LD_ADDR_VAR 0 8
22058: PUSH
22059: CALL_OW 45
22063: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
22064: LD_VAR 0 8
22068: PPUSH
22069: LD_INT 0
22071: PPUSH
22072: LD_INT 5
22074: PPUSH
22075: CALL_OW 12
22079: PPUSH
22080: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
22084: LD_VAR 0 8
22088: PPUSH
22089: LD_VAR 0 5
22093: PPUSH
22094: LD_VAR 0 6
22098: PPUSH
22099: LD_INT 1
22101: PPUSH
22102: CALL_OW 48
// end ;
22106: LD_VAR 0 7
22110: RET
// export hInvincible ; every 1 do
22111: GO 22113
22113: DISABLE
// hInvincible := [ ] ;
22114: LD_ADDR_EXP 128
22118: PUSH
22119: EMPTY
22120: ST_TO_ADDR
22121: END
// every 10 do var i ;
22122: GO 22124
22124: DISABLE
22125: LD_INT 0
22127: PPUSH
// begin enable ;
22128: ENABLE
// if not hInvincible then
22129: LD_EXP 128
22133: NOT
22134: IFFALSE 22138
// exit ;
22136: GO 22182
// for i in hInvincible do
22138: LD_ADDR_VAR 0 1
22142: PUSH
22143: LD_EXP 128
22147: PUSH
22148: FOR_IN
22149: IFFALSE 22180
// if GetLives ( i ) < 1000 then
22151: LD_VAR 0 1
22155: PPUSH
22156: CALL_OW 256
22160: PUSH
22161: LD_INT 1000
22163: LESS
22164: IFFALSE 22178
// SetLives ( i , 1000 ) ;
22166: LD_VAR 0 1
22170: PPUSH
22171: LD_INT 1000
22173: PPUSH
22174: CALL_OW 234
22178: GO 22148
22180: POP
22181: POP
// end ;
22182: PPOPN 1
22184: END
// export function hHackInvincible ; var i ; begin
22185: LD_INT 0
22187: PPUSH
22188: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
22189: LD_ADDR_VAR 0 2
22193: PUSH
22194: LD_INT 2
22196: PUSH
22197: LD_INT 21
22199: PUSH
22200: LD_INT 1
22202: PUSH
22203: EMPTY
22204: LIST
22205: LIST
22206: PUSH
22207: LD_INT 21
22209: PUSH
22210: LD_INT 2
22212: PUSH
22213: EMPTY
22214: LIST
22215: LIST
22216: PUSH
22217: EMPTY
22218: LIST
22219: LIST
22220: LIST
22221: PPUSH
22222: CALL_OW 69
22226: PUSH
22227: FOR_IN
22228: IFFALSE 22289
// if IsSelected ( i ) then
22230: LD_VAR 0 2
22234: PPUSH
22235: CALL_OW 306
22239: IFFALSE 22287
// begin if i in hInvincible then
22241: LD_VAR 0 2
22245: PUSH
22246: LD_EXP 128
22250: IN
22251: IFFALSE 22271
// hInvincible := hInvincible diff i else
22253: LD_ADDR_EXP 128
22257: PUSH
22258: LD_EXP 128
22262: PUSH
22263: LD_VAR 0 2
22267: DIFF
22268: ST_TO_ADDR
22269: GO 22287
// hInvincible := hInvincible union i ;
22271: LD_ADDR_EXP 128
22275: PUSH
22276: LD_EXP 128
22280: PUSH
22281: LD_VAR 0 2
22285: UNION
22286: ST_TO_ADDR
// end ;
22287: GO 22227
22289: POP
22290: POP
// end ;
22291: LD_VAR 0 1
22295: RET
// export function hHackInvisible ; var i , j ; begin
22296: LD_INT 0
22298: PPUSH
22299: PPUSH
22300: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
22301: LD_ADDR_VAR 0 2
22305: PUSH
22306: LD_INT 21
22308: PUSH
22309: LD_INT 1
22311: PUSH
22312: EMPTY
22313: LIST
22314: LIST
22315: PPUSH
22316: CALL_OW 69
22320: PUSH
22321: FOR_IN
22322: IFFALSE 22346
// if IsSelected ( i ) then
22324: LD_VAR 0 2
22328: PPUSH
22329: CALL_OW 306
22333: IFFALSE 22344
// ComForceInvisible ( i ) ;
22335: LD_VAR 0 2
22339: PPUSH
22340: CALL_OW 496
22344: GO 22321
22346: POP
22347: POP
// end ;
22348: LD_VAR 0 1
22352: RET
// export function hHackChangeYourSide ; begin
22353: LD_INT 0
22355: PPUSH
// if your_side = 8 then
22356: LD_OWVAR 2
22360: PUSH
22361: LD_INT 8
22363: EQUAL
22364: IFFALSE 22376
// your_side := 0 else
22366: LD_ADDR_OWVAR 2
22370: PUSH
22371: LD_INT 0
22373: ST_TO_ADDR
22374: GO 22390
// your_side := your_side + 1 ;
22376: LD_ADDR_OWVAR 2
22380: PUSH
22381: LD_OWVAR 2
22385: PUSH
22386: LD_INT 1
22388: PLUS
22389: ST_TO_ADDR
// end ;
22390: LD_VAR 0 1
22394: RET
// export function hHackChangeUnitSide ; var i , j ; begin
22395: LD_INT 0
22397: PPUSH
22398: PPUSH
22399: PPUSH
// for i in all_units do
22400: LD_ADDR_VAR 0 2
22404: PUSH
22405: LD_OWVAR 3
22409: PUSH
22410: FOR_IN
22411: IFFALSE 22489
// if IsSelected ( i ) then
22413: LD_VAR 0 2
22417: PPUSH
22418: CALL_OW 306
22422: IFFALSE 22487
// begin j := GetSide ( i ) ;
22424: LD_ADDR_VAR 0 3
22428: PUSH
22429: LD_VAR 0 2
22433: PPUSH
22434: CALL_OW 255
22438: ST_TO_ADDR
// if j = 8 then
22439: LD_VAR 0 3
22443: PUSH
22444: LD_INT 8
22446: EQUAL
22447: IFFALSE 22459
// j := 0 else
22449: LD_ADDR_VAR 0 3
22453: PUSH
22454: LD_INT 0
22456: ST_TO_ADDR
22457: GO 22473
// j := j + 1 ;
22459: LD_ADDR_VAR 0 3
22463: PUSH
22464: LD_VAR 0 3
22468: PUSH
22469: LD_INT 1
22471: PLUS
22472: ST_TO_ADDR
// SetSide ( i , j ) ;
22473: LD_VAR 0 2
22477: PPUSH
22478: LD_VAR 0 3
22482: PPUSH
22483: CALL_OW 235
// end ;
22487: GO 22410
22489: POP
22490: POP
// end ;
22491: LD_VAR 0 1
22495: RET
// export function hHackFog ; begin
22496: LD_INT 0
22498: PPUSH
// FogOff ( true ) ;
22499: LD_INT 1
22501: PPUSH
22502: CALL_OW 344
// end ;
22506: LD_VAR 0 1
22510: RET
// export function hHackTeleport ( unit , x , y ) ; begin
22511: LD_INT 0
22513: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
22514: LD_VAR 0 1
22518: PPUSH
22519: LD_VAR 0 2
22523: PPUSH
22524: LD_VAR 0 3
22528: PPUSH
22529: LD_INT 1
22531: PPUSH
22532: LD_INT 1
22534: PPUSH
22535: CALL_OW 483
// CenterOnXY ( x , y ) ;
22539: LD_VAR 0 2
22543: PPUSH
22544: LD_VAR 0 3
22548: PPUSH
22549: CALL_OW 84
// end ; end_of_file
22553: LD_VAR 0 4
22557: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
22558: LD_INT 0
22560: PPUSH
22561: PPUSH
22562: PPUSH
22563: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
22564: LD_VAR 0 1
22568: PPUSH
22569: CALL_OW 264
22573: PUSH
22574: LD_EXP 56
22578: EQUAL
22579: IFFALSE 22651
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
22581: LD_INT 68
22583: PPUSH
22584: LD_VAR 0 1
22588: PPUSH
22589: CALL_OW 255
22593: PPUSH
22594: CALL_OW 321
22598: PUSH
22599: LD_INT 2
22601: EQUAL
22602: IFFALSE 22614
// eff := 70 else
22604: LD_ADDR_VAR 0 4
22608: PUSH
22609: LD_INT 70
22611: ST_TO_ADDR
22612: GO 22622
// eff := 30 ;
22614: LD_ADDR_VAR 0 4
22618: PUSH
22619: LD_INT 30
22621: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
22622: LD_VAR 0 1
22626: PPUSH
22627: CALL_OW 250
22631: PPUSH
22632: LD_VAR 0 1
22636: PPUSH
22637: CALL_OW 251
22641: PPUSH
22642: LD_VAR 0 4
22646: PPUSH
22647: CALL_OW 495
// end ; end ;
22651: LD_VAR 0 2
22655: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
22656: LD_INT 0
22658: PPUSH
// end ;
22659: LD_VAR 0 4
22663: RET
// export function SOS_Command ( cmd ) ; begin
22664: LD_INT 0
22666: PPUSH
// end ;
22667: LD_VAR 0 2
22671: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
22672: LD_INT 0
22674: PPUSH
// end ;
22675: LD_VAR 0 6
22679: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
22680: LD_INT 0
22682: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
22683: LD_VAR 0 1
22687: PUSH
22688: LD_INT 250
22690: EQUAL
22691: PUSH
22692: LD_VAR 0 2
22696: PPUSH
22697: CALL_OW 264
22701: PUSH
22702: LD_EXP 59
22706: EQUAL
22707: AND
22708: IFFALSE 22729
// MinerPlaceMine ( unit , x , y ) ;
22710: LD_VAR 0 2
22714: PPUSH
22715: LD_VAR 0 4
22719: PPUSH
22720: LD_VAR 0 5
22724: PPUSH
22725: CALL 25078 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
22729: LD_VAR 0 1
22733: PUSH
22734: LD_INT 251
22736: EQUAL
22737: PUSH
22738: LD_VAR 0 2
22742: PPUSH
22743: CALL_OW 264
22747: PUSH
22748: LD_EXP 59
22752: EQUAL
22753: AND
22754: IFFALSE 22775
// MinerDetonateMine ( unit , x , y ) ;
22756: LD_VAR 0 2
22760: PPUSH
22761: LD_VAR 0 4
22765: PPUSH
22766: LD_VAR 0 5
22770: PPUSH
22771: CALL 25355 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
22775: LD_VAR 0 1
22779: PUSH
22780: LD_INT 252
22782: EQUAL
22783: PUSH
22784: LD_VAR 0 2
22788: PPUSH
22789: CALL_OW 264
22793: PUSH
22794: LD_EXP 59
22798: EQUAL
22799: AND
22800: IFFALSE 22821
// MinerCreateMinefield ( unit , x , y ) ;
22802: LD_VAR 0 2
22806: PPUSH
22807: LD_VAR 0 4
22811: PPUSH
22812: LD_VAR 0 5
22816: PPUSH
22817: CALL 25772 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
22821: LD_VAR 0 1
22825: PUSH
22826: LD_INT 253
22828: EQUAL
22829: PUSH
22830: LD_VAR 0 2
22834: PPUSH
22835: CALL_OW 257
22839: PUSH
22840: LD_INT 5
22842: EQUAL
22843: AND
22844: IFFALSE 22865
// ComBinocular ( unit , x , y ) ;
22846: LD_VAR 0 2
22850: PPUSH
22851: LD_VAR 0 4
22855: PPUSH
22856: LD_VAR 0 5
22860: PPUSH
22861: CALL 26143 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
22865: LD_VAR 0 1
22869: PUSH
22870: LD_INT 254
22872: EQUAL
22873: PUSH
22874: LD_VAR 0 2
22878: PPUSH
22879: CALL_OW 264
22883: PUSH
22884: LD_EXP 54
22888: EQUAL
22889: AND
22890: PUSH
22891: LD_VAR 0 3
22895: PPUSH
22896: CALL_OW 263
22900: PUSH
22901: LD_INT 3
22903: EQUAL
22904: AND
22905: IFFALSE 22921
// HackDestroyVehicle ( unit , selectedUnit ) ;
22907: LD_VAR 0 2
22911: PPUSH
22912: LD_VAR 0 3
22916: PPUSH
22917: CALL 24438 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
22921: LD_VAR 0 1
22925: PUSH
22926: LD_INT 255
22928: EQUAL
22929: PUSH
22930: LD_VAR 0 2
22934: PPUSH
22935: CALL_OW 264
22939: PUSH
22940: LD_INT 14
22942: PUSH
22943: LD_INT 53
22945: PUSH
22946: EMPTY
22947: LIST
22948: LIST
22949: IN
22950: AND
22951: PUSH
22952: LD_VAR 0 4
22956: PPUSH
22957: LD_VAR 0 5
22961: PPUSH
22962: CALL_OW 488
22966: AND
22967: IFFALSE 22991
// CutTreeXYR ( unit , x , y , 12 ) ;
22969: LD_VAR 0 2
22973: PPUSH
22974: LD_VAR 0 4
22978: PPUSH
22979: LD_VAR 0 5
22983: PPUSH
22984: LD_INT 12
22986: PPUSH
22987: CALL 23004 0 4
// end ;
22991: LD_VAR 0 6
22995: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
22996: LD_INT 0
22998: PPUSH
// end ;
22999: LD_VAR 0 4
23003: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
23004: LD_INT 0
23006: PPUSH
23007: PPUSH
23008: PPUSH
23009: PPUSH
23010: PPUSH
23011: PPUSH
23012: PPUSH
23013: PPUSH
23014: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
23015: LD_VAR 0 1
23019: NOT
23020: PUSH
23021: LD_VAR 0 2
23025: PPUSH
23026: LD_VAR 0 3
23030: PPUSH
23031: CALL_OW 488
23035: NOT
23036: OR
23037: PUSH
23038: LD_VAR 0 4
23042: NOT
23043: OR
23044: IFFALSE 23048
// exit ;
23046: GO 23388
// list := [ ] ;
23048: LD_ADDR_VAR 0 13
23052: PUSH
23053: EMPTY
23054: ST_TO_ADDR
// if x - r < 0 then
23055: LD_VAR 0 2
23059: PUSH
23060: LD_VAR 0 4
23064: MINUS
23065: PUSH
23066: LD_INT 0
23068: LESS
23069: IFFALSE 23081
// min_x := 0 else
23071: LD_ADDR_VAR 0 7
23075: PUSH
23076: LD_INT 0
23078: ST_TO_ADDR
23079: GO 23097
// min_x := x - r ;
23081: LD_ADDR_VAR 0 7
23085: PUSH
23086: LD_VAR 0 2
23090: PUSH
23091: LD_VAR 0 4
23095: MINUS
23096: ST_TO_ADDR
// if y - r < 0 then
23097: LD_VAR 0 3
23101: PUSH
23102: LD_VAR 0 4
23106: MINUS
23107: PUSH
23108: LD_INT 0
23110: LESS
23111: IFFALSE 23123
// min_y := 0 else
23113: LD_ADDR_VAR 0 8
23117: PUSH
23118: LD_INT 0
23120: ST_TO_ADDR
23121: GO 23139
// min_y := y - r ;
23123: LD_ADDR_VAR 0 8
23127: PUSH
23128: LD_VAR 0 3
23132: PUSH
23133: LD_VAR 0 4
23137: MINUS
23138: ST_TO_ADDR
// max_x := x + r ;
23139: LD_ADDR_VAR 0 9
23143: PUSH
23144: LD_VAR 0 2
23148: PUSH
23149: LD_VAR 0 4
23153: PLUS
23154: ST_TO_ADDR
// max_y := y + r ;
23155: LD_ADDR_VAR 0 10
23159: PUSH
23160: LD_VAR 0 3
23164: PUSH
23165: LD_VAR 0 4
23169: PLUS
23170: ST_TO_ADDR
// for _x = min_x to max_x do
23171: LD_ADDR_VAR 0 11
23175: PUSH
23176: DOUBLE
23177: LD_VAR 0 7
23181: DEC
23182: ST_TO_ADDR
23183: LD_VAR 0 9
23187: PUSH
23188: FOR_TO
23189: IFFALSE 23306
// for _y = min_y to max_y do
23191: LD_ADDR_VAR 0 12
23195: PUSH
23196: DOUBLE
23197: LD_VAR 0 8
23201: DEC
23202: ST_TO_ADDR
23203: LD_VAR 0 10
23207: PUSH
23208: FOR_TO
23209: IFFALSE 23302
// begin if not ValidHex ( _x , _y ) then
23211: LD_VAR 0 11
23215: PPUSH
23216: LD_VAR 0 12
23220: PPUSH
23221: CALL_OW 488
23225: NOT
23226: IFFALSE 23230
// continue ;
23228: GO 23208
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
23230: LD_VAR 0 11
23234: PPUSH
23235: LD_VAR 0 12
23239: PPUSH
23240: CALL_OW 351
23244: PUSH
23245: LD_VAR 0 11
23249: PPUSH
23250: LD_VAR 0 12
23254: PPUSH
23255: CALL_OW 554
23259: AND
23260: IFFALSE 23300
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
23262: LD_ADDR_VAR 0 13
23266: PUSH
23267: LD_VAR 0 13
23271: PPUSH
23272: LD_VAR 0 13
23276: PUSH
23277: LD_INT 1
23279: PLUS
23280: PPUSH
23281: LD_VAR 0 11
23285: PUSH
23286: LD_VAR 0 12
23290: PUSH
23291: EMPTY
23292: LIST
23293: LIST
23294: PPUSH
23295: CALL_OW 2
23299: ST_TO_ADDR
// end ;
23300: GO 23208
23302: POP
23303: POP
23304: GO 23188
23306: POP
23307: POP
// if not list then
23308: LD_VAR 0 13
23312: NOT
23313: IFFALSE 23317
// exit ;
23315: GO 23388
// for i in list do
23317: LD_ADDR_VAR 0 6
23321: PUSH
23322: LD_VAR 0 13
23326: PUSH
23327: FOR_IN
23328: IFFALSE 23386
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
23330: LD_VAR 0 1
23334: PPUSH
23335: LD_STRING M
23337: PUSH
23338: LD_VAR 0 6
23342: PUSH
23343: LD_INT 1
23345: ARRAY
23346: PUSH
23347: LD_VAR 0 6
23351: PUSH
23352: LD_INT 2
23354: ARRAY
23355: PUSH
23356: LD_INT 0
23358: PUSH
23359: LD_INT 0
23361: PUSH
23362: LD_INT 0
23364: PUSH
23365: LD_INT 0
23367: PUSH
23368: EMPTY
23369: LIST
23370: LIST
23371: LIST
23372: LIST
23373: LIST
23374: LIST
23375: LIST
23376: PUSH
23377: EMPTY
23378: LIST
23379: PPUSH
23380: CALL_OW 447
23384: GO 23327
23386: POP
23387: POP
// end ;
23388: LD_VAR 0 5
23392: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
23393: LD_EXP 131
23397: NOT
23398: IFFALSE 23448
23400: GO 23402
23402: DISABLE
// begin initHack := true ;
23403: LD_ADDR_EXP 131
23407: PUSH
23408: LD_INT 1
23410: ST_TO_ADDR
// hackTanks := [ ] ;
23411: LD_ADDR_EXP 132
23415: PUSH
23416: EMPTY
23417: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
23418: LD_ADDR_EXP 133
23422: PUSH
23423: EMPTY
23424: ST_TO_ADDR
// hackLimit := 3 ;
23425: LD_ADDR_EXP 134
23429: PUSH
23430: LD_INT 3
23432: ST_TO_ADDR
// hackDist := 12 ;
23433: LD_ADDR_EXP 135
23437: PUSH
23438: LD_INT 12
23440: ST_TO_ADDR
// hackCounter := [ ] ;
23441: LD_ADDR_EXP 136
23445: PUSH
23446: EMPTY
23447: ST_TO_ADDR
// end ;
23448: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
23449: LD_EXP 131
23453: PUSH
23454: LD_INT 34
23456: PUSH
23457: LD_EXP 54
23461: PUSH
23462: EMPTY
23463: LIST
23464: LIST
23465: PPUSH
23466: CALL_OW 69
23470: AND
23471: IFFALSE 23726
23473: GO 23475
23475: DISABLE
23476: LD_INT 0
23478: PPUSH
23479: PPUSH
// begin enable ;
23480: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
23481: LD_ADDR_VAR 0 1
23485: PUSH
23486: LD_INT 34
23488: PUSH
23489: LD_EXP 54
23493: PUSH
23494: EMPTY
23495: LIST
23496: LIST
23497: PPUSH
23498: CALL_OW 69
23502: PUSH
23503: FOR_IN
23504: IFFALSE 23724
// begin if not i in hackTanks then
23506: LD_VAR 0 1
23510: PUSH
23511: LD_EXP 132
23515: IN
23516: NOT
23517: IFFALSE 23600
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
23519: LD_ADDR_EXP 132
23523: PUSH
23524: LD_EXP 132
23528: PPUSH
23529: LD_EXP 132
23533: PUSH
23534: LD_INT 1
23536: PLUS
23537: PPUSH
23538: LD_VAR 0 1
23542: PPUSH
23543: CALL_OW 1
23547: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
23548: LD_ADDR_EXP 133
23552: PUSH
23553: LD_EXP 133
23557: PPUSH
23558: LD_EXP 133
23562: PUSH
23563: LD_INT 1
23565: PLUS
23566: PPUSH
23567: EMPTY
23568: PPUSH
23569: CALL_OW 1
23573: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
23574: LD_ADDR_EXP 136
23578: PUSH
23579: LD_EXP 136
23583: PPUSH
23584: LD_EXP 136
23588: PUSH
23589: LD_INT 1
23591: PLUS
23592: PPUSH
23593: EMPTY
23594: PPUSH
23595: CALL_OW 1
23599: ST_TO_ADDR
// end ; if not IsOk ( i ) then
23600: LD_VAR 0 1
23604: PPUSH
23605: CALL_OW 302
23609: NOT
23610: IFFALSE 23623
// begin HackUnlinkAll ( i ) ;
23612: LD_VAR 0 1
23616: PPUSH
23617: CALL 23729 0 1
// continue ;
23621: GO 23503
// end ; HackCheckCapturedStatus ( i ) ;
23623: LD_VAR 0 1
23627: PPUSH
23628: CALL 24172 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
23632: LD_ADDR_VAR 0 2
23636: PUSH
23637: LD_INT 81
23639: PUSH
23640: LD_VAR 0 1
23644: PPUSH
23645: CALL_OW 255
23649: PUSH
23650: EMPTY
23651: LIST
23652: LIST
23653: PUSH
23654: LD_INT 33
23656: PUSH
23657: LD_INT 3
23659: PUSH
23660: EMPTY
23661: LIST
23662: LIST
23663: PUSH
23664: LD_INT 91
23666: PUSH
23667: LD_VAR 0 1
23671: PUSH
23672: LD_EXP 135
23676: PUSH
23677: EMPTY
23678: LIST
23679: LIST
23680: LIST
23681: PUSH
23682: LD_INT 50
23684: PUSH
23685: EMPTY
23686: LIST
23687: PUSH
23688: EMPTY
23689: LIST
23690: LIST
23691: LIST
23692: LIST
23693: PPUSH
23694: CALL_OW 69
23698: ST_TO_ADDR
// if not tmp then
23699: LD_VAR 0 2
23703: NOT
23704: IFFALSE 23708
// continue ;
23706: GO 23503
// HackLink ( i , tmp ) ;
23708: LD_VAR 0 1
23712: PPUSH
23713: LD_VAR 0 2
23717: PPUSH
23718: CALL 23865 0 2
// end ;
23722: GO 23503
23724: POP
23725: POP
// end ;
23726: PPOPN 2
23728: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
23729: LD_INT 0
23731: PPUSH
23732: PPUSH
23733: PPUSH
// if not hack in hackTanks then
23734: LD_VAR 0 1
23738: PUSH
23739: LD_EXP 132
23743: IN
23744: NOT
23745: IFFALSE 23749
// exit ;
23747: GO 23860
// index := GetElementIndex ( hackTanks , hack ) ;
23749: LD_ADDR_VAR 0 4
23753: PUSH
23754: LD_EXP 132
23758: PPUSH
23759: LD_VAR 0 1
23763: PPUSH
23764: CALL 31334 0 2
23768: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
23769: LD_EXP 133
23773: PUSH
23774: LD_VAR 0 4
23778: ARRAY
23779: IFFALSE 23860
// begin for i in hackTanksCaptured [ index ] do
23781: LD_ADDR_VAR 0 3
23785: PUSH
23786: LD_EXP 133
23790: PUSH
23791: LD_VAR 0 4
23795: ARRAY
23796: PUSH
23797: FOR_IN
23798: IFFALSE 23824
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
23800: LD_VAR 0 3
23804: PUSH
23805: LD_INT 1
23807: ARRAY
23808: PPUSH
23809: LD_VAR 0 3
23813: PUSH
23814: LD_INT 2
23816: ARRAY
23817: PPUSH
23818: CALL_OW 235
23822: GO 23797
23824: POP
23825: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
23826: LD_ADDR_EXP 133
23830: PUSH
23831: LD_EXP 133
23835: PPUSH
23836: LD_VAR 0 4
23840: PPUSH
23841: EMPTY
23842: PPUSH
23843: CALL_OW 1
23847: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
23848: LD_VAR 0 1
23852: PPUSH
23853: LD_INT 0
23855: PPUSH
23856: CALL_OW 505
// end ; end ;
23860: LD_VAR 0 2
23864: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
23865: LD_INT 0
23867: PPUSH
23868: PPUSH
23869: PPUSH
// if not hack in hackTanks or not vehicles then
23870: LD_VAR 0 1
23874: PUSH
23875: LD_EXP 132
23879: IN
23880: NOT
23881: PUSH
23882: LD_VAR 0 2
23886: NOT
23887: OR
23888: IFFALSE 23892
// exit ;
23890: GO 24167
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
23892: LD_ADDR_VAR 0 2
23896: PUSH
23897: LD_VAR 0 1
23901: PPUSH
23902: LD_VAR 0 2
23906: PPUSH
23907: LD_INT 1
23909: PPUSH
23910: LD_INT 1
23912: PPUSH
23913: CALL 31984 0 4
23917: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
23918: LD_ADDR_VAR 0 5
23922: PUSH
23923: LD_EXP 132
23927: PPUSH
23928: LD_VAR 0 1
23932: PPUSH
23933: CALL 31334 0 2
23937: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
23938: LD_EXP 133
23942: PUSH
23943: LD_VAR 0 5
23947: ARRAY
23948: PUSH
23949: LD_EXP 134
23953: LESS
23954: IFFALSE 24143
// begin for i := 1 to vehicles do
23956: LD_ADDR_VAR 0 4
23960: PUSH
23961: DOUBLE
23962: LD_INT 1
23964: DEC
23965: ST_TO_ADDR
23966: LD_VAR 0 2
23970: PUSH
23971: FOR_TO
23972: IFFALSE 24141
// begin if hackTanksCaptured [ index ] = hackLimit then
23974: LD_EXP 133
23978: PUSH
23979: LD_VAR 0 5
23983: ARRAY
23984: PUSH
23985: LD_EXP 134
23989: EQUAL
23990: IFFALSE 23994
// break ;
23992: GO 24141
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
23994: LD_ADDR_EXP 136
23998: PUSH
23999: LD_EXP 136
24003: PPUSH
24004: LD_VAR 0 5
24008: PPUSH
24009: LD_EXP 136
24013: PUSH
24014: LD_VAR 0 5
24018: ARRAY
24019: PUSH
24020: LD_INT 1
24022: PLUS
24023: PPUSH
24024: CALL_OW 1
24028: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
24029: LD_ADDR_EXP 133
24033: PUSH
24034: LD_EXP 133
24038: PPUSH
24039: LD_VAR 0 5
24043: PUSH
24044: LD_EXP 133
24048: PUSH
24049: LD_VAR 0 5
24053: ARRAY
24054: PUSH
24055: LD_INT 1
24057: PLUS
24058: PUSH
24059: EMPTY
24060: LIST
24061: LIST
24062: PPUSH
24063: LD_VAR 0 2
24067: PUSH
24068: LD_VAR 0 4
24072: ARRAY
24073: PUSH
24074: LD_VAR 0 2
24078: PUSH
24079: LD_VAR 0 4
24083: ARRAY
24084: PPUSH
24085: CALL_OW 255
24089: PUSH
24090: EMPTY
24091: LIST
24092: LIST
24093: PPUSH
24094: CALL 31549 0 3
24098: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
24099: LD_VAR 0 2
24103: PUSH
24104: LD_VAR 0 4
24108: ARRAY
24109: PPUSH
24110: LD_VAR 0 1
24114: PPUSH
24115: CALL_OW 255
24119: PPUSH
24120: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
24124: LD_VAR 0 2
24128: PUSH
24129: LD_VAR 0 4
24133: ARRAY
24134: PPUSH
24135: CALL_OW 141
// end ;
24139: GO 23971
24141: POP
24142: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
24143: LD_VAR 0 1
24147: PPUSH
24148: LD_EXP 133
24152: PUSH
24153: LD_VAR 0 5
24157: ARRAY
24158: PUSH
24159: LD_INT 0
24161: PLUS
24162: PPUSH
24163: CALL_OW 505
// end ;
24167: LD_VAR 0 3
24171: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
24172: LD_INT 0
24174: PPUSH
24175: PPUSH
24176: PPUSH
24177: PPUSH
// if not hack in hackTanks then
24178: LD_VAR 0 1
24182: PUSH
24183: LD_EXP 132
24187: IN
24188: NOT
24189: IFFALSE 24193
// exit ;
24191: GO 24433
// index := GetElementIndex ( hackTanks , hack ) ;
24193: LD_ADDR_VAR 0 4
24197: PUSH
24198: LD_EXP 132
24202: PPUSH
24203: LD_VAR 0 1
24207: PPUSH
24208: CALL 31334 0 2
24212: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
24213: LD_ADDR_VAR 0 3
24217: PUSH
24218: DOUBLE
24219: LD_EXP 133
24223: PUSH
24224: LD_VAR 0 4
24228: ARRAY
24229: INC
24230: ST_TO_ADDR
24231: LD_INT 1
24233: PUSH
24234: FOR_DOWNTO
24235: IFFALSE 24407
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
24237: LD_ADDR_VAR 0 5
24241: PUSH
24242: LD_EXP 133
24246: PUSH
24247: LD_VAR 0 4
24251: ARRAY
24252: PUSH
24253: LD_VAR 0 3
24257: ARRAY
24258: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
24259: LD_VAR 0 5
24263: PUSH
24264: LD_INT 1
24266: ARRAY
24267: PPUSH
24268: CALL_OW 302
24272: NOT
24273: PUSH
24274: LD_VAR 0 5
24278: PUSH
24279: LD_INT 1
24281: ARRAY
24282: PPUSH
24283: CALL_OW 255
24287: PUSH
24288: LD_VAR 0 1
24292: PPUSH
24293: CALL_OW 255
24297: NONEQUAL
24298: OR
24299: IFFALSE 24405
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
24301: LD_VAR 0 5
24305: PUSH
24306: LD_INT 1
24308: ARRAY
24309: PPUSH
24310: CALL_OW 305
24314: PUSH
24315: LD_VAR 0 5
24319: PUSH
24320: LD_INT 1
24322: ARRAY
24323: PPUSH
24324: CALL_OW 255
24328: PUSH
24329: LD_VAR 0 1
24333: PPUSH
24334: CALL_OW 255
24338: EQUAL
24339: AND
24340: IFFALSE 24364
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
24342: LD_VAR 0 5
24346: PUSH
24347: LD_INT 1
24349: ARRAY
24350: PPUSH
24351: LD_VAR 0 5
24355: PUSH
24356: LD_INT 2
24358: ARRAY
24359: PPUSH
24360: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
24364: LD_ADDR_EXP 133
24368: PUSH
24369: LD_EXP 133
24373: PPUSH
24374: LD_VAR 0 4
24378: PPUSH
24379: LD_EXP 133
24383: PUSH
24384: LD_VAR 0 4
24388: ARRAY
24389: PPUSH
24390: LD_VAR 0 3
24394: PPUSH
24395: CALL_OW 3
24399: PPUSH
24400: CALL_OW 1
24404: ST_TO_ADDR
// end ; end ;
24405: GO 24234
24407: POP
24408: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
24409: LD_VAR 0 1
24413: PPUSH
24414: LD_EXP 133
24418: PUSH
24419: LD_VAR 0 4
24423: ARRAY
24424: PUSH
24425: LD_INT 0
24427: PLUS
24428: PPUSH
24429: CALL_OW 505
// end ;
24433: LD_VAR 0 2
24437: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
24438: LD_INT 0
24440: PPUSH
24441: PPUSH
24442: PPUSH
24443: PPUSH
// if not hack in hackTanks then
24444: LD_VAR 0 1
24448: PUSH
24449: LD_EXP 132
24453: IN
24454: NOT
24455: IFFALSE 24459
// exit ;
24457: GO 24544
// index := GetElementIndex ( hackTanks , hack ) ;
24459: LD_ADDR_VAR 0 5
24463: PUSH
24464: LD_EXP 132
24468: PPUSH
24469: LD_VAR 0 1
24473: PPUSH
24474: CALL 31334 0 2
24478: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
24479: LD_ADDR_VAR 0 4
24483: PUSH
24484: DOUBLE
24485: LD_INT 1
24487: DEC
24488: ST_TO_ADDR
24489: LD_EXP 133
24493: PUSH
24494: LD_VAR 0 5
24498: ARRAY
24499: PUSH
24500: FOR_TO
24501: IFFALSE 24542
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
24503: LD_EXP 133
24507: PUSH
24508: LD_VAR 0 5
24512: ARRAY
24513: PUSH
24514: LD_VAR 0 4
24518: ARRAY
24519: PUSH
24520: LD_INT 1
24522: ARRAY
24523: PUSH
24524: LD_VAR 0 2
24528: EQUAL
24529: IFFALSE 24540
// KillUnit ( vehicle ) ;
24531: LD_VAR 0 2
24535: PPUSH
24536: CALL_OW 66
24540: GO 24500
24542: POP
24543: POP
// end ;
24544: LD_VAR 0 3
24548: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
24549: LD_EXP 137
24553: NOT
24554: IFFALSE 24589
24556: GO 24558
24558: DISABLE
// begin initMiner := true ;
24559: LD_ADDR_EXP 137
24563: PUSH
24564: LD_INT 1
24566: ST_TO_ADDR
// minersList := [ ] ;
24567: LD_ADDR_EXP 138
24571: PUSH
24572: EMPTY
24573: ST_TO_ADDR
// minerMinesList := [ ] ;
24574: LD_ADDR_EXP 139
24578: PUSH
24579: EMPTY
24580: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
24581: LD_ADDR_EXP 140
24585: PUSH
24586: LD_INT 5
24588: ST_TO_ADDR
// end ;
24589: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
24590: LD_EXP 137
24594: PUSH
24595: LD_INT 34
24597: PUSH
24598: LD_EXP 59
24602: PUSH
24603: EMPTY
24604: LIST
24605: LIST
24606: PPUSH
24607: CALL_OW 69
24611: AND
24612: IFFALSE 25075
24614: GO 24616
24616: DISABLE
24617: LD_INT 0
24619: PPUSH
24620: PPUSH
24621: PPUSH
24622: PPUSH
// begin enable ;
24623: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
24624: LD_ADDR_VAR 0 1
24628: PUSH
24629: LD_INT 34
24631: PUSH
24632: LD_EXP 59
24636: PUSH
24637: EMPTY
24638: LIST
24639: LIST
24640: PPUSH
24641: CALL_OW 69
24645: PUSH
24646: FOR_IN
24647: IFFALSE 24719
// begin if not i in minersList then
24649: LD_VAR 0 1
24653: PUSH
24654: LD_EXP 138
24658: IN
24659: NOT
24660: IFFALSE 24717
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
24662: LD_ADDR_EXP 138
24666: PUSH
24667: LD_EXP 138
24671: PPUSH
24672: LD_EXP 138
24676: PUSH
24677: LD_INT 1
24679: PLUS
24680: PPUSH
24681: LD_VAR 0 1
24685: PPUSH
24686: CALL_OW 1
24690: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
24691: LD_ADDR_EXP 139
24695: PUSH
24696: LD_EXP 139
24700: PPUSH
24701: LD_EXP 139
24705: PUSH
24706: LD_INT 1
24708: PLUS
24709: PPUSH
24710: EMPTY
24711: PPUSH
24712: CALL_OW 1
24716: ST_TO_ADDR
// end end ;
24717: GO 24646
24719: POP
24720: POP
// for i := minerMinesList downto 1 do
24721: LD_ADDR_VAR 0 1
24725: PUSH
24726: DOUBLE
24727: LD_EXP 139
24731: INC
24732: ST_TO_ADDR
24733: LD_INT 1
24735: PUSH
24736: FOR_DOWNTO
24737: IFFALSE 25073
// begin if IsLive ( minersList [ i ] ) then
24739: LD_EXP 138
24743: PUSH
24744: LD_VAR 0 1
24748: ARRAY
24749: PPUSH
24750: CALL_OW 300
24754: IFFALSE 24782
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
24756: LD_EXP 138
24760: PUSH
24761: LD_VAR 0 1
24765: ARRAY
24766: PPUSH
24767: LD_EXP 139
24771: PUSH
24772: LD_VAR 0 1
24776: ARRAY
24777: PPUSH
24778: CALL_OW 505
// if not minerMinesList [ i ] then
24782: LD_EXP 139
24786: PUSH
24787: LD_VAR 0 1
24791: ARRAY
24792: NOT
24793: IFFALSE 24797
// continue ;
24795: GO 24736
// for j := minerMinesList [ i ] downto 1 do
24797: LD_ADDR_VAR 0 2
24801: PUSH
24802: DOUBLE
24803: LD_EXP 139
24807: PUSH
24808: LD_VAR 0 1
24812: ARRAY
24813: INC
24814: ST_TO_ADDR
24815: LD_INT 1
24817: PUSH
24818: FOR_DOWNTO
24819: IFFALSE 25069
// begin side := GetSide ( minersList [ i ] ) ;
24821: LD_ADDR_VAR 0 3
24825: PUSH
24826: LD_EXP 138
24830: PUSH
24831: LD_VAR 0 1
24835: ARRAY
24836: PPUSH
24837: CALL_OW 255
24841: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
24842: LD_ADDR_VAR 0 4
24846: PUSH
24847: LD_EXP 139
24851: PUSH
24852: LD_VAR 0 1
24856: ARRAY
24857: PUSH
24858: LD_VAR 0 2
24862: ARRAY
24863: PUSH
24864: LD_INT 1
24866: ARRAY
24867: PPUSH
24868: LD_EXP 139
24872: PUSH
24873: LD_VAR 0 1
24877: ARRAY
24878: PUSH
24879: LD_VAR 0 2
24883: ARRAY
24884: PUSH
24885: LD_INT 2
24887: ARRAY
24888: PPUSH
24889: CALL_OW 428
24893: ST_TO_ADDR
// if not tmp then
24894: LD_VAR 0 4
24898: NOT
24899: IFFALSE 24903
// continue ;
24901: GO 24818
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
24903: LD_VAR 0 4
24907: PUSH
24908: LD_INT 81
24910: PUSH
24911: LD_VAR 0 3
24915: PUSH
24916: EMPTY
24917: LIST
24918: LIST
24919: PPUSH
24920: CALL_OW 69
24924: IN
24925: PUSH
24926: LD_EXP 139
24930: PUSH
24931: LD_VAR 0 1
24935: ARRAY
24936: PUSH
24937: LD_VAR 0 2
24941: ARRAY
24942: PUSH
24943: LD_INT 1
24945: ARRAY
24946: PPUSH
24947: LD_EXP 139
24951: PUSH
24952: LD_VAR 0 1
24956: ARRAY
24957: PUSH
24958: LD_VAR 0 2
24962: ARRAY
24963: PUSH
24964: LD_INT 2
24966: ARRAY
24967: PPUSH
24968: CALL_OW 458
24972: AND
24973: IFFALSE 25067
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
24975: LD_EXP 139
24979: PUSH
24980: LD_VAR 0 1
24984: ARRAY
24985: PUSH
24986: LD_VAR 0 2
24990: ARRAY
24991: PUSH
24992: LD_INT 1
24994: ARRAY
24995: PPUSH
24996: LD_EXP 139
25000: PUSH
25001: LD_VAR 0 1
25005: ARRAY
25006: PUSH
25007: LD_VAR 0 2
25011: ARRAY
25012: PUSH
25013: LD_INT 2
25015: ARRAY
25016: PPUSH
25017: LD_VAR 0 3
25021: PPUSH
25022: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
25026: LD_ADDR_EXP 139
25030: PUSH
25031: LD_EXP 139
25035: PPUSH
25036: LD_VAR 0 1
25040: PPUSH
25041: LD_EXP 139
25045: PUSH
25046: LD_VAR 0 1
25050: ARRAY
25051: PPUSH
25052: LD_VAR 0 2
25056: PPUSH
25057: CALL_OW 3
25061: PPUSH
25062: CALL_OW 1
25066: ST_TO_ADDR
// end ; end ;
25067: GO 24818
25069: POP
25070: POP
// end ;
25071: GO 24736
25073: POP
25074: POP
// end ;
25075: PPOPN 4
25077: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
25078: LD_INT 0
25080: PPUSH
25081: PPUSH
// result := false ;
25082: LD_ADDR_VAR 0 4
25086: PUSH
25087: LD_INT 0
25089: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
25090: LD_VAR 0 1
25094: PPUSH
25095: CALL_OW 264
25099: PUSH
25100: LD_EXP 59
25104: EQUAL
25105: NOT
25106: IFFALSE 25110
// exit ;
25108: GO 25350
// index := GetElementIndex ( minersList , unit ) ;
25110: LD_ADDR_VAR 0 5
25114: PUSH
25115: LD_EXP 138
25119: PPUSH
25120: LD_VAR 0 1
25124: PPUSH
25125: CALL 31334 0 2
25129: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
25130: LD_EXP 139
25134: PUSH
25135: LD_VAR 0 5
25139: ARRAY
25140: PUSH
25141: LD_EXP 140
25145: GREATEREQUAL
25146: IFFALSE 25150
// exit ;
25148: GO 25350
// ComMoveXY ( unit , x , y ) ;
25150: LD_VAR 0 1
25154: PPUSH
25155: LD_VAR 0 2
25159: PPUSH
25160: LD_VAR 0 3
25164: PPUSH
25165: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
25169: LD_INT 35
25171: PPUSH
25172: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
25176: LD_VAR 0 1
25180: PPUSH
25181: LD_VAR 0 2
25185: PPUSH
25186: LD_VAR 0 3
25190: PPUSH
25191: CALL 62106 0 3
25195: NOT
25196: PUSH
25197: LD_VAR 0 1
25201: PPUSH
25202: CALL_OW 314
25206: AND
25207: IFFALSE 25211
// exit ;
25209: GO 25350
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
25211: LD_VAR 0 2
25215: PPUSH
25216: LD_VAR 0 3
25220: PPUSH
25221: CALL_OW 428
25225: PUSH
25226: LD_VAR 0 1
25230: EQUAL
25231: PUSH
25232: LD_VAR 0 1
25236: PPUSH
25237: CALL_OW 314
25241: NOT
25242: AND
25243: IFFALSE 25169
// PlaySoundXY ( x , y , PlantMine ) ;
25245: LD_VAR 0 2
25249: PPUSH
25250: LD_VAR 0 3
25254: PPUSH
25255: LD_STRING PlantMine
25257: PPUSH
25258: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
25262: LD_VAR 0 2
25266: PPUSH
25267: LD_VAR 0 3
25271: PPUSH
25272: LD_VAR 0 1
25276: PPUSH
25277: CALL_OW 255
25281: PPUSH
25282: LD_INT 0
25284: PPUSH
25285: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
25289: LD_ADDR_EXP 139
25293: PUSH
25294: LD_EXP 139
25298: PPUSH
25299: LD_VAR 0 5
25303: PUSH
25304: LD_EXP 139
25308: PUSH
25309: LD_VAR 0 5
25313: ARRAY
25314: PUSH
25315: LD_INT 1
25317: PLUS
25318: PUSH
25319: EMPTY
25320: LIST
25321: LIST
25322: PPUSH
25323: LD_VAR 0 2
25327: PUSH
25328: LD_VAR 0 3
25332: PUSH
25333: EMPTY
25334: LIST
25335: LIST
25336: PPUSH
25337: CALL 31549 0 3
25341: ST_TO_ADDR
// result := true ;
25342: LD_ADDR_VAR 0 4
25346: PUSH
25347: LD_INT 1
25349: ST_TO_ADDR
// end ;
25350: LD_VAR 0 4
25354: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
25355: LD_INT 0
25357: PPUSH
25358: PPUSH
25359: PPUSH
// if not unit in minersList then
25360: LD_VAR 0 1
25364: PUSH
25365: LD_EXP 138
25369: IN
25370: NOT
25371: IFFALSE 25375
// exit ;
25373: GO 25767
// index := GetElementIndex ( minersList , unit ) ;
25375: LD_ADDR_VAR 0 6
25379: PUSH
25380: LD_EXP 138
25384: PPUSH
25385: LD_VAR 0 1
25389: PPUSH
25390: CALL 31334 0 2
25394: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
25395: LD_ADDR_VAR 0 5
25399: PUSH
25400: DOUBLE
25401: LD_EXP 139
25405: PUSH
25406: LD_VAR 0 6
25410: ARRAY
25411: INC
25412: ST_TO_ADDR
25413: LD_INT 1
25415: PUSH
25416: FOR_DOWNTO
25417: IFFALSE 25578
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
25419: LD_EXP 139
25423: PUSH
25424: LD_VAR 0 6
25428: ARRAY
25429: PUSH
25430: LD_VAR 0 5
25434: ARRAY
25435: PUSH
25436: LD_INT 1
25438: ARRAY
25439: PUSH
25440: LD_VAR 0 2
25444: EQUAL
25445: PUSH
25446: LD_EXP 139
25450: PUSH
25451: LD_VAR 0 6
25455: ARRAY
25456: PUSH
25457: LD_VAR 0 5
25461: ARRAY
25462: PUSH
25463: LD_INT 2
25465: ARRAY
25466: PUSH
25467: LD_VAR 0 3
25471: EQUAL
25472: AND
25473: IFFALSE 25576
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
25475: LD_EXP 139
25479: PUSH
25480: LD_VAR 0 6
25484: ARRAY
25485: PUSH
25486: LD_VAR 0 5
25490: ARRAY
25491: PUSH
25492: LD_INT 1
25494: ARRAY
25495: PPUSH
25496: LD_EXP 139
25500: PUSH
25501: LD_VAR 0 6
25505: ARRAY
25506: PUSH
25507: LD_VAR 0 5
25511: ARRAY
25512: PUSH
25513: LD_INT 2
25515: ARRAY
25516: PPUSH
25517: LD_VAR 0 1
25521: PPUSH
25522: CALL_OW 255
25526: PPUSH
25527: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
25531: LD_ADDR_EXP 139
25535: PUSH
25536: LD_EXP 139
25540: PPUSH
25541: LD_VAR 0 6
25545: PPUSH
25546: LD_EXP 139
25550: PUSH
25551: LD_VAR 0 6
25555: ARRAY
25556: PPUSH
25557: LD_VAR 0 5
25561: PPUSH
25562: CALL_OW 3
25566: PPUSH
25567: CALL_OW 1
25571: ST_TO_ADDR
// exit ;
25572: POP
25573: POP
25574: GO 25767
// end ; end ;
25576: GO 25416
25578: POP
25579: POP
// for i := minerMinesList [ index ] downto 1 do
25580: LD_ADDR_VAR 0 5
25584: PUSH
25585: DOUBLE
25586: LD_EXP 139
25590: PUSH
25591: LD_VAR 0 6
25595: ARRAY
25596: INC
25597: ST_TO_ADDR
25598: LD_INT 1
25600: PUSH
25601: FOR_DOWNTO
25602: IFFALSE 25765
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
25604: LD_EXP 139
25608: PUSH
25609: LD_VAR 0 6
25613: ARRAY
25614: PUSH
25615: LD_VAR 0 5
25619: ARRAY
25620: PUSH
25621: LD_INT 1
25623: ARRAY
25624: PPUSH
25625: LD_EXP 139
25629: PUSH
25630: LD_VAR 0 6
25634: ARRAY
25635: PUSH
25636: LD_VAR 0 5
25640: ARRAY
25641: PUSH
25642: LD_INT 2
25644: ARRAY
25645: PPUSH
25646: LD_VAR 0 2
25650: PPUSH
25651: LD_VAR 0 3
25655: PPUSH
25656: CALL_OW 298
25660: PUSH
25661: LD_INT 6
25663: LESS
25664: IFFALSE 25763
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
25666: LD_EXP 139
25670: PUSH
25671: LD_VAR 0 6
25675: ARRAY
25676: PUSH
25677: LD_VAR 0 5
25681: ARRAY
25682: PUSH
25683: LD_INT 1
25685: ARRAY
25686: PPUSH
25687: LD_EXP 139
25691: PUSH
25692: LD_VAR 0 6
25696: ARRAY
25697: PUSH
25698: LD_VAR 0 5
25702: ARRAY
25703: PUSH
25704: LD_INT 2
25706: ARRAY
25707: PPUSH
25708: LD_VAR 0 1
25712: PPUSH
25713: CALL_OW 255
25717: PPUSH
25718: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
25722: LD_ADDR_EXP 139
25726: PUSH
25727: LD_EXP 139
25731: PPUSH
25732: LD_VAR 0 6
25736: PPUSH
25737: LD_EXP 139
25741: PUSH
25742: LD_VAR 0 6
25746: ARRAY
25747: PPUSH
25748: LD_VAR 0 5
25752: PPUSH
25753: CALL_OW 3
25757: PPUSH
25758: CALL_OW 1
25762: ST_TO_ADDR
// end ; end ;
25763: GO 25601
25765: POP
25766: POP
// end ;
25767: LD_VAR 0 4
25771: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
25772: LD_INT 0
25774: PPUSH
25775: PPUSH
25776: PPUSH
25777: PPUSH
25778: PPUSH
25779: PPUSH
25780: PPUSH
25781: PPUSH
25782: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
25783: LD_VAR 0 1
25787: PPUSH
25788: CALL_OW 264
25792: PUSH
25793: LD_EXP 59
25797: EQUAL
25798: NOT
25799: PUSH
25800: LD_VAR 0 1
25804: PUSH
25805: LD_EXP 138
25809: IN
25810: NOT
25811: OR
25812: IFFALSE 25816
// exit ;
25814: GO 26138
// index := GetElementIndex ( minersList , unit ) ;
25816: LD_ADDR_VAR 0 6
25820: PUSH
25821: LD_EXP 138
25825: PPUSH
25826: LD_VAR 0 1
25830: PPUSH
25831: CALL 31334 0 2
25835: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
25836: LD_ADDR_VAR 0 8
25840: PUSH
25841: LD_EXP 140
25845: PUSH
25846: LD_EXP 139
25850: PUSH
25851: LD_VAR 0 6
25855: ARRAY
25856: MINUS
25857: ST_TO_ADDR
// if not minesFreeAmount then
25858: LD_VAR 0 8
25862: NOT
25863: IFFALSE 25867
// exit ;
25865: GO 26138
// tmp := [ ] ;
25867: LD_ADDR_VAR 0 7
25871: PUSH
25872: EMPTY
25873: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
25874: LD_ADDR_VAR 0 5
25878: PUSH
25879: DOUBLE
25880: LD_INT 1
25882: DEC
25883: ST_TO_ADDR
25884: LD_VAR 0 8
25888: PUSH
25889: FOR_TO
25890: IFFALSE 26085
// begin _d := rand ( 0 , 5 ) ;
25892: LD_ADDR_VAR 0 11
25896: PUSH
25897: LD_INT 0
25899: PPUSH
25900: LD_INT 5
25902: PPUSH
25903: CALL_OW 12
25907: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
25908: LD_ADDR_VAR 0 12
25912: PUSH
25913: LD_INT 2
25915: PPUSH
25916: LD_INT 6
25918: PPUSH
25919: CALL_OW 12
25923: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
25924: LD_ADDR_VAR 0 9
25928: PUSH
25929: LD_VAR 0 2
25933: PPUSH
25934: LD_VAR 0 11
25938: PPUSH
25939: LD_VAR 0 12
25943: PPUSH
25944: CALL_OW 272
25948: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
25949: LD_ADDR_VAR 0 10
25953: PUSH
25954: LD_VAR 0 3
25958: PPUSH
25959: LD_VAR 0 11
25963: PPUSH
25964: LD_VAR 0 12
25968: PPUSH
25969: CALL_OW 273
25973: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
25974: LD_VAR 0 9
25978: PPUSH
25979: LD_VAR 0 10
25983: PPUSH
25984: CALL_OW 488
25988: PUSH
25989: LD_VAR 0 9
25993: PUSH
25994: LD_VAR 0 10
25998: PUSH
25999: EMPTY
26000: LIST
26001: LIST
26002: PUSH
26003: LD_VAR 0 7
26007: IN
26008: NOT
26009: AND
26010: PUSH
26011: LD_VAR 0 9
26015: PPUSH
26016: LD_VAR 0 10
26020: PPUSH
26021: CALL_OW 458
26025: NOT
26026: AND
26027: IFFALSE 26069
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
26029: LD_ADDR_VAR 0 7
26033: PUSH
26034: LD_VAR 0 7
26038: PPUSH
26039: LD_VAR 0 7
26043: PUSH
26044: LD_INT 1
26046: PLUS
26047: PPUSH
26048: LD_VAR 0 9
26052: PUSH
26053: LD_VAR 0 10
26057: PUSH
26058: EMPTY
26059: LIST
26060: LIST
26061: PPUSH
26062: CALL_OW 1
26066: ST_TO_ADDR
26067: GO 26083
// i := i - 1 ;
26069: LD_ADDR_VAR 0 5
26073: PUSH
26074: LD_VAR 0 5
26078: PUSH
26079: LD_INT 1
26081: MINUS
26082: ST_TO_ADDR
// end ;
26083: GO 25889
26085: POP
26086: POP
// for i in tmp do
26087: LD_ADDR_VAR 0 5
26091: PUSH
26092: LD_VAR 0 7
26096: PUSH
26097: FOR_IN
26098: IFFALSE 26136
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
26100: LD_VAR 0 1
26104: PPUSH
26105: LD_VAR 0 5
26109: PUSH
26110: LD_INT 1
26112: ARRAY
26113: PPUSH
26114: LD_VAR 0 5
26118: PUSH
26119: LD_INT 2
26121: ARRAY
26122: PPUSH
26123: CALL 25078 0 3
26127: NOT
26128: IFFALSE 26134
// exit ;
26130: POP
26131: POP
26132: GO 26138
26134: GO 26097
26136: POP
26137: POP
// end ;
26138: LD_VAR 0 4
26142: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
26143: LD_INT 0
26145: PPUSH
26146: PPUSH
26147: PPUSH
26148: PPUSH
26149: PPUSH
26150: PPUSH
26151: PPUSH
// if not GetClass ( unit ) = class_sniper then
26152: LD_VAR 0 1
26156: PPUSH
26157: CALL_OW 257
26161: PUSH
26162: LD_INT 5
26164: EQUAL
26165: NOT
26166: IFFALSE 26170
// exit ;
26168: GO 26558
// dist := 8 ;
26170: LD_ADDR_VAR 0 5
26174: PUSH
26175: LD_INT 8
26177: ST_TO_ADDR
// viewRange := 12 ;
26178: LD_ADDR_VAR 0 7
26182: PUSH
26183: LD_INT 12
26185: ST_TO_ADDR
// side := GetSide ( unit ) ;
26186: LD_ADDR_VAR 0 6
26190: PUSH
26191: LD_VAR 0 1
26195: PPUSH
26196: CALL_OW 255
26200: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
26201: LD_INT 61
26203: PPUSH
26204: LD_VAR 0 6
26208: PPUSH
26209: CALL_OW 321
26213: PUSH
26214: LD_INT 2
26216: EQUAL
26217: IFFALSE 26227
// viewRange := 16 ;
26219: LD_ADDR_VAR 0 7
26223: PUSH
26224: LD_INT 16
26226: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
26227: LD_VAR 0 1
26231: PPUSH
26232: LD_VAR 0 2
26236: PPUSH
26237: LD_VAR 0 3
26241: PPUSH
26242: CALL_OW 297
26246: PUSH
26247: LD_VAR 0 5
26251: GREATER
26252: IFFALSE 26331
// begin ComMoveXY ( unit , x , y ) ;
26254: LD_VAR 0 1
26258: PPUSH
26259: LD_VAR 0 2
26263: PPUSH
26264: LD_VAR 0 3
26268: PPUSH
26269: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
26273: LD_INT 35
26275: PPUSH
26276: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
26280: LD_VAR 0 1
26284: PPUSH
26285: LD_VAR 0 2
26289: PPUSH
26290: LD_VAR 0 3
26294: PPUSH
26295: CALL 62106 0 3
26299: NOT
26300: IFFALSE 26304
// exit ;
26302: GO 26558
// until GetDistUnitXY ( unit , x , y ) < dist ;
26304: LD_VAR 0 1
26308: PPUSH
26309: LD_VAR 0 2
26313: PPUSH
26314: LD_VAR 0 3
26318: PPUSH
26319: CALL_OW 297
26323: PUSH
26324: LD_VAR 0 5
26328: LESS
26329: IFFALSE 26273
// end ; ComTurnXY ( unit , x , y ) ;
26331: LD_VAR 0 1
26335: PPUSH
26336: LD_VAR 0 2
26340: PPUSH
26341: LD_VAR 0 3
26345: PPUSH
26346: CALL_OW 118
// wait ( 5 ) ;
26350: LD_INT 5
26352: PPUSH
26353: CALL_OW 67
// _d := GetDir ( unit ) ;
26357: LD_ADDR_VAR 0 10
26361: PUSH
26362: LD_VAR 0 1
26366: PPUSH
26367: CALL_OW 254
26371: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
26372: LD_ADDR_VAR 0 8
26376: PUSH
26377: LD_VAR 0 1
26381: PPUSH
26382: CALL_OW 250
26386: PPUSH
26387: LD_VAR 0 10
26391: PPUSH
26392: LD_VAR 0 5
26396: PPUSH
26397: CALL_OW 272
26401: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
26402: LD_ADDR_VAR 0 9
26406: PUSH
26407: LD_VAR 0 1
26411: PPUSH
26412: CALL_OW 251
26416: PPUSH
26417: LD_VAR 0 10
26421: PPUSH
26422: LD_VAR 0 5
26426: PPUSH
26427: CALL_OW 273
26431: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26432: LD_VAR 0 8
26436: PPUSH
26437: LD_VAR 0 9
26441: PPUSH
26442: CALL_OW 488
26446: NOT
26447: IFFALSE 26451
// exit ;
26449: GO 26558
// ComAnimCustom ( unit , 1 ) ;
26451: LD_VAR 0 1
26455: PPUSH
26456: LD_INT 1
26458: PPUSH
26459: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
26463: LD_VAR 0 8
26467: PPUSH
26468: LD_VAR 0 9
26472: PPUSH
26473: LD_VAR 0 6
26477: PPUSH
26478: LD_VAR 0 7
26482: PPUSH
26483: CALL_OW 330
// repeat wait ( 1 ) ;
26487: LD_INT 1
26489: PPUSH
26490: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
26494: LD_VAR 0 1
26498: PPUSH
26499: CALL_OW 316
26503: PUSH
26504: LD_VAR 0 1
26508: PPUSH
26509: CALL_OW 314
26513: OR
26514: PUSH
26515: LD_VAR 0 1
26519: PPUSH
26520: CALL_OW 302
26524: NOT
26525: OR
26526: PUSH
26527: LD_VAR 0 1
26531: PPUSH
26532: CALL_OW 301
26536: OR
26537: IFFALSE 26487
// RemoveSeeing ( _x , _y , side ) ;
26539: LD_VAR 0 8
26543: PPUSH
26544: LD_VAR 0 9
26548: PPUSH
26549: LD_VAR 0 6
26553: PPUSH
26554: CALL_OW 331
// end ; end_of_file
26558: LD_VAR 0 4
26562: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
26563: LD_INT 0
26565: PPUSH
26566: PPUSH
// if exist_mode then
26567: LD_VAR 0 2
26571: IFFALSE 26596
// unit := CreateCharacter ( prefix & ident ) else
26573: LD_ADDR_VAR 0 5
26577: PUSH
26578: LD_VAR 0 3
26582: PUSH
26583: LD_VAR 0 1
26587: STR
26588: PPUSH
26589: CALL_OW 34
26593: ST_TO_ADDR
26594: GO 26611
// unit := NewCharacter ( ident ) ;
26596: LD_ADDR_VAR 0 5
26600: PUSH
26601: LD_VAR 0 1
26605: PPUSH
26606: CALL_OW 25
26610: ST_TO_ADDR
// result := unit ;
26611: LD_ADDR_VAR 0 4
26615: PUSH
26616: LD_VAR 0 5
26620: ST_TO_ADDR
// end ;
26621: LD_VAR 0 4
26625: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
26626: LD_INT 0
26628: PPUSH
26629: PPUSH
// if not side or not nation then
26630: LD_VAR 0 1
26634: NOT
26635: PUSH
26636: LD_VAR 0 2
26640: NOT
26641: OR
26642: IFFALSE 26646
// exit ;
26644: GO 27414
// case nation of nation_american :
26646: LD_VAR 0 2
26650: PUSH
26651: LD_INT 1
26653: DOUBLE
26654: EQUAL
26655: IFTRUE 26659
26657: GO 26873
26659: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
26660: LD_ADDR_VAR 0 4
26664: PUSH
26665: LD_INT 35
26667: PUSH
26668: LD_INT 45
26670: PUSH
26671: LD_INT 46
26673: PUSH
26674: LD_INT 47
26676: PUSH
26677: LD_INT 82
26679: PUSH
26680: LD_INT 83
26682: PUSH
26683: LD_INT 84
26685: PUSH
26686: LD_INT 85
26688: PUSH
26689: LD_INT 86
26691: PUSH
26692: LD_INT 1
26694: PUSH
26695: LD_INT 2
26697: PUSH
26698: LD_INT 6
26700: PUSH
26701: LD_INT 15
26703: PUSH
26704: LD_INT 16
26706: PUSH
26707: LD_INT 7
26709: PUSH
26710: LD_INT 12
26712: PUSH
26713: LD_INT 13
26715: PUSH
26716: LD_INT 10
26718: PUSH
26719: LD_INT 14
26721: PUSH
26722: LD_INT 20
26724: PUSH
26725: LD_INT 21
26727: PUSH
26728: LD_INT 22
26730: PUSH
26731: LD_INT 25
26733: PUSH
26734: LD_INT 32
26736: PUSH
26737: LD_INT 27
26739: PUSH
26740: LD_INT 36
26742: PUSH
26743: LD_INT 69
26745: PUSH
26746: LD_INT 39
26748: PUSH
26749: LD_INT 34
26751: PUSH
26752: LD_INT 40
26754: PUSH
26755: LD_INT 48
26757: PUSH
26758: LD_INT 49
26760: PUSH
26761: LD_INT 50
26763: PUSH
26764: LD_INT 51
26766: PUSH
26767: LD_INT 52
26769: PUSH
26770: LD_INT 53
26772: PUSH
26773: LD_INT 54
26775: PUSH
26776: LD_INT 55
26778: PUSH
26779: LD_INT 56
26781: PUSH
26782: LD_INT 57
26784: PUSH
26785: LD_INT 58
26787: PUSH
26788: LD_INT 59
26790: PUSH
26791: LD_INT 60
26793: PUSH
26794: LD_INT 61
26796: PUSH
26797: LD_INT 62
26799: PUSH
26800: LD_INT 80
26802: PUSH
26803: LD_INT 82
26805: PUSH
26806: LD_INT 83
26808: PUSH
26809: LD_INT 84
26811: PUSH
26812: LD_INT 85
26814: PUSH
26815: LD_INT 86
26817: PUSH
26818: EMPTY
26819: LIST
26820: LIST
26821: LIST
26822: LIST
26823: LIST
26824: LIST
26825: LIST
26826: LIST
26827: LIST
26828: LIST
26829: LIST
26830: LIST
26831: LIST
26832: LIST
26833: LIST
26834: LIST
26835: LIST
26836: LIST
26837: LIST
26838: LIST
26839: LIST
26840: LIST
26841: LIST
26842: LIST
26843: LIST
26844: LIST
26845: LIST
26846: LIST
26847: LIST
26848: LIST
26849: LIST
26850: LIST
26851: LIST
26852: LIST
26853: LIST
26854: LIST
26855: LIST
26856: LIST
26857: LIST
26858: LIST
26859: LIST
26860: LIST
26861: LIST
26862: LIST
26863: LIST
26864: LIST
26865: LIST
26866: LIST
26867: LIST
26868: LIST
26869: LIST
26870: ST_TO_ADDR
26871: GO 27338
26873: LD_INT 2
26875: DOUBLE
26876: EQUAL
26877: IFTRUE 26881
26879: GO 27107
26881: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
26882: LD_ADDR_VAR 0 4
26886: PUSH
26887: LD_INT 35
26889: PUSH
26890: LD_INT 45
26892: PUSH
26893: LD_INT 46
26895: PUSH
26896: LD_INT 47
26898: PUSH
26899: LD_INT 82
26901: PUSH
26902: LD_INT 83
26904: PUSH
26905: LD_INT 84
26907: PUSH
26908: LD_INT 85
26910: PUSH
26911: LD_INT 87
26913: PUSH
26914: LD_INT 70
26916: PUSH
26917: LD_INT 1
26919: PUSH
26920: LD_INT 11
26922: PUSH
26923: LD_INT 3
26925: PUSH
26926: LD_INT 4
26928: PUSH
26929: LD_INT 5
26931: PUSH
26932: LD_INT 6
26934: PUSH
26935: LD_INT 15
26937: PUSH
26938: LD_INT 18
26940: PUSH
26941: LD_INT 7
26943: PUSH
26944: LD_INT 17
26946: PUSH
26947: LD_INT 8
26949: PUSH
26950: LD_INT 20
26952: PUSH
26953: LD_INT 21
26955: PUSH
26956: LD_INT 22
26958: PUSH
26959: LD_INT 72
26961: PUSH
26962: LD_INT 26
26964: PUSH
26965: LD_INT 69
26967: PUSH
26968: LD_INT 39
26970: PUSH
26971: LD_INT 40
26973: PUSH
26974: LD_INT 41
26976: PUSH
26977: LD_INT 42
26979: PUSH
26980: LD_INT 43
26982: PUSH
26983: LD_INT 48
26985: PUSH
26986: LD_INT 49
26988: PUSH
26989: LD_INT 50
26991: PUSH
26992: LD_INT 51
26994: PUSH
26995: LD_INT 52
26997: PUSH
26998: LD_INT 53
27000: PUSH
27001: LD_INT 54
27003: PUSH
27004: LD_INT 55
27006: PUSH
27007: LD_INT 56
27009: PUSH
27010: LD_INT 60
27012: PUSH
27013: LD_INT 61
27015: PUSH
27016: LD_INT 62
27018: PUSH
27019: LD_INT 66
27021: PUSH
27022: LD_INT 67
27024: PUSH
27025: LD_INT 68
27027: PUSH
27028: LD_INT 81
27030: PUSH
27031: LD_INT 82
27033: PUSH
27034: LD_INT 83
27036: PUSH
27037: LD_INT 84
27039: PUSH
27040: LD_INT 85
27042: PUSH
27043: LD_INT 87
27045: PUSH
27046: LD_INT 88
27048: PUSH
27049: EMPTY
27050: LIST
27051: LIST
27052: LIST
27053: LIST
27054: LIST
27055: LIST
27056: LIST
27057: LIST
27058: LIST
27059: LIST
27060: LIST
27061: LIST
27062: LIST
27063: LIST
27064: LIST
27065: LIST
27066: LIST
27067: LIST
27068: LIST
27069: LIST
27070: LIST
27071: LIST
27072: LIST
27073: LIST
27074: LIST
27075: LIST
27076: LIST
27077: LIST
27078: LIST
27079: LIST
27080: LIST
27081: LIST
27082: LIST
27083: LIST
27084: LIST
27085: LIST
27086: LIST
27087: LIST
27088: LIST
27089: LIST
27090: LIST
27091: LIST
27092: LIST
27093: LIST
27094: LIST
27095: LIST
27096: LIST
27097: LIST
27098: LIST
27099: LIST
27100: LIST
27101: LIST
27102: LIST
27103: LIST
27104: ST_TO_ADDR
27105: GO 27338
27107: LD_INT 3
27109: DOUBLE
27110: EQUAL
27111: IFTRUE 27115
27113: GO 27337
27115: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
27116: LD_ADDR_VAR 0 4
27120: PUSH
27121: LD_INT 46
27123: PUSH
27124: LD_INT 47
27126: PUSH
27127: LD_INT 1
27129: PUSH
27130: LD_INT 2
27132: PUSH
27133: LD_INT 82
27135: PUSH
27136: LD_INT 83
27138: PUSH
27139: LD_INT 84
27141: PUSH
27142: LD_INT 85
27144: PUSH
27145: LD_INT 86
27147: PUSH
27148: LD_INT 11
27150: PUSH
27151: LD_INT 9
27153: PUSH
27154: LD_INT 20
27156: PUSH
27157: LD_INT 19
27159: PUSH
27160: LD_INT 21
27162: PUSH
27163: LD_INT 24
27165: PUSH
27166: LD_INT 22
27168: PUSH
27169: LD_INT 25
27171: PUSH
27172: LD_INT 28
27174: PUSH
27175: LD_INT 29
27177: PUSH
27178: LD_INT 30
27180: PUSH
27181: LD_INT 31
27183: PUSH
27184: LD_INT 37
27186: PUSH
27187: LD_INT 38
27189: PUSH
27190: LD_INT 32
27192: PUSH
27193: LD_INT 27
27195: PUSH
27196: LD_INT 33
27198: PUSH
27199: LD_INT 69
27201: PUSH
27202: LD_INT 39
27204: PUSH
27205: LD_INT 34
27207: PUSH
27208: LD_INT 40
27210: PUSH
27211: LD_INT 71
27213: PUSH
27214: LD_INT 23
27216: PUSH
27217: LD_INT 44
27219: PUSH
27220: LD_INT 48
27222: PUSH
27223: LD_INT 49
27225: PUSH
27226: LD_INT 50
27228: PUSH
27229: LD_INT 51
27231: PUSH
27232: LD_INT 52
27234: PUSH
27235: LD_INT 53
27237: PUSH
27238: LD_INT 54
27240: PUSH
27241: LD_INT 55
27243: PUSH
27244: LD_INT 56
27246: PUSH
27247: LD_INT 57
27249: PUSH
27250: LD_INT 58
27252: PUSH
27253: LD_INT 59
27255: PUSH
27256: LD_INT 63
27258: PUSH
27259: LD_INT 64
27261: PUSH
27262: LD_INT 65
27264: PUSH
27265: LD_INT 82
27267: PUSH
27268: LD_INT 83
27270: PUSH
27271: LD_INT 84
27273: PUSH
27274: LD_INT 85
27276: PUSH
27277: LD_INT 86
27279: PUSH
27280: EMPTY
27281: LIST
27282: LIST
27283: LIST
27284: LIST
27285: LIST
27286: LIST
27287: LIST
27288: LIST
27289: LIST
27290: LIST
27291: LIST
27292: LIST
27293: LIST
27294: LIST
27295: LIST
27296: LIST
27297: LIST
27298: LIST
27299: LIST
27300: LIST
27301: LIST
27302: LIST
27303: LIST
27304: LIST
27305: LIST
27306: LIST
27307: LIST
27308: LIST
27309: LIST
27310: LIST
27311: LIST
27312: LIST
27313: LIST
27314: LIST
27315: LIST
27316: LIST
27317: LIST
27318: LIST
27319: LIST
27320: LIST
27321: LIST
27322: LIST
27323: LIST
27324: LIST
27325: LIST
27326: LIST
27327: LIST
27328: LIST
27329: LIST
27330: LIST
27331: LIST
27332: LIST
27333: LIST
27334: ST_TO_ADDR
27335: GO 27338
27337: POP
// if state > - 1 and state < 3 then
27338: LD_VAR 0 3
27342: PUSH
27343: LD_INT 1
27345: NEG
27346: GREATER
27347: PUSH
27348: LD_VAR 0 3
27352: PUSH
27353: LD_INT 3
27355: LESS
27356: AND
27357: IFFALSE 27414
// for i in result do
27359: LD_ADDR_VAR 0 5
27363: PUSH
27364: LD_VAR 0 4
27368: PUSH
27369: FOR_IN
27370: IFFALSE 27412
// if GetTech ( i , side ) <> state then
27372: LD_VAR 0 5
27376: PPUSH
27377: LD_VAR 0 1
27381: PPUSH
27382: CALL_OW 321
27386: PUSH
27387: LD_VAR 0 3
27391: NONEQUAL
27392: IFFALSE 27410
// result := result diff i ;
27394: LD_ADDR_VAR 0 4
27398: PUSH
27399: LD_VAR 0 4
27403: PUSH
27404: LD_VAR 0 5
27408: DIFF
27409: ST_TO_ADDR
27410: GO 27369
27412: POP
27413: POP
// end ;
27414: LD_VAR 0 4
27418: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
27419: LD_INT 0
27421: PPUSH
27422: PPUSH
27423: PPUSH
// result := true ;
27424: LD_ADDR_VAR 0 3
27428: PUSH
27429: LD_INT 1
27431: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
27432: LD_ADDR_VAR 0 5
27436: PUSH
27437: LD_VAR 0 2
27441: PPUSH
27442: CALL_OW 480
27446: ST_TO_ADDR
// if not tmp then
27447: LD_VAR 0 5
27451: NOT
27452: IFFALSE 27456
// exit ;
27454: GO 27505
// for i in tmp do
27456: LD_ADDR_VAR 0 4
27460: PUSH
27461: LD_VAR 0 5
27465: PUSH
27466: FOR_IN
27467: IFFALSE 27503
// if GetTech ( i , side ) <> state_researched then
27469: LD_VAR 0 4
27473: PPUSH
27474: LD_VAR 0 1
27478: PPUSH
27479: CALL_OW 321
27483: PUSH
27484: LD_INT 2
27486: NONEQUAL
27487: IFFALSE 27501
// begin result := false ;
27489: LD_ADDR_VAR 0 3
27493: PUSH
27494: LD_INT 0
27496: ST_TO_ADDR
// exit ;
27497: POP
27498: POP
27499: GO 27505
// end ;
27501: GO 27466
27503: POP
27504: POP
// end ;
27505: LD_VAR 0 3
27509: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
27510: LD_INT 0
27512: PPUSH
27513: PPUSH
27514: PPUSH
27515: PPUSH
27516: PPUSH
27517: PPUSH
27518: PPUSH
27519: PPUSH
27520: PPUSH
27521: PPUSH
27522: PPUSH
27523: PPUSH
27524: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
27525: LD_VAR 0 1
27529: NOT
27530: PUSH
27531: LD_VAR 0 1
27535: PPUSH
27536: CALL_OW 257
27540: PUSH
27541: LD_INT 9
27543: NONEQUAL
27544: OR
27545: IFFALSE 27549
// exit ;
27547: GO 28122
// side := GetSide ( unit ) ;
27549: LD_ADDR_VAR 0 9
27553: PUSH
27554: LD_VAR 0 1
27558: PPUSH
27559: CALL_OW 255
27563: ST_TO_ADDR
// tech_space := tech_spacanom ;
27564: LD_ADDR_VAR 0 12
27568: PUSH
27569: LD_INT 29
27571: ST_TO_ADDR
// tech_time := tech_taurad ;
27572: LD_ADDR_VAR 0 13
27576: PUSH
27577: LD_INT 28
27579: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
27580: LD_ADDR_VAR 0 11
27584: PUSH
27585: LD_VAR 0 1
27589: PPUSH
27590: CALL_OW 310
27594: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
27595: LD_VAR 0 11
27599: PPUSH
27600: CALL_OW 247
27604: PUSH
27605: LD_INT 2
27607: EQUAL
27608: IFFALSE 27612
// exit ;
27610: GO 28122
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27612: LD_ADDR_VAR 0 8
27616: PUSH
27617: LD_INT 81
27619: PUSH
27620: LD_VAR 0 9
27624: PUSH
27625: EMPTY
27626: LIST
27627: LIST
27628: PUSH
27629: LD_INT 3
27631: PUSH
27632: LD_INT 21
27634: PUSH
27635: LD_INT 3
27637: PUSH
27638: EMPTY
27639: LIST
27640: LIST
27641: PUSH
27642: EMPTY
27643: LIST
27644: LIST
27645: PUSH
27646: EMPTY
27647: LIST
27648: LIST
27649: PPUSH
27650: CALL_OW 69
27654: ST_TO_ADDR
// if not tmp then
27655: LD_VAR 0 8
27659: NOT
27660: IFFALSE 27664
// exit ;
27662: GO 28122
// if in_unit then
27664: LD_VAR 0 11
27668: IFFALSE 27692
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
27670: LD_ADDR_VAR 0 10
27674: PUSH
27675: LD_VAR 0 8
27679: PPUSH
27680: LD_VAR 0 11
27684: PPUSH
27685: CALL_OW 74
27689: ST_TO_ADDR
27690: GO 27712
// enemy := NearestUnitToUnit ( tmp , unit ) ;
27692: LD_ADDR_VAR 0 10
27696: PUSH
27697: LD_VAR 0 8
27701: PPUSH
27702: LD_VAR 0 1
27706: PPUSH
27707: CALL_OW 74
27711: ST_TO_ADDR
// if not enemy then
27712: LD_VAR 0 10
27716: NOT
27717: IFFALSE 27721
// exit ;
27719: GO 28122
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
27721: LD_VAR 0 11
27725: PUSH
27726: LD_VAR 0 11
27730: PPUSH
27731: LD_VAR 0 10
27735: PPUSH
27736: CALL_OW 296
27740: PUSH
27741: LD_INT 13
27743: GREATER
27744: AND
27745: PUSH
27746: LD_VAR 0 1
27750: PPUSH
27751: LD_VAR 0 10
27755: PPUSH
27756: CALL_OW 296
27760: PUSH
27761: LD_INT 12
27763: GREATER
27764: OR
27765: IFFALSE 27769
// exit ;
27767: GO 28122
// missile := [ 1 ] ;
27769: LD_ADDR_VAR 0 14
27773: PUSH
27774: LD_INT 1
27776: PUSH
27777: EMPTY
27778: LIST
27779: ST_TO_ADDR
// if Researched ( side , tech_space ) then
27780: LD_VAR 0 9
27784: PPUSH
27785: LD_VAR 0 12
27789: PPUSH
27790: CALL_OW 325
27794: IFFALSE 27823
// missile := Insert ( missile , missile + 1 , 2 ) ;
27796: LD_ADDR_VAR 0 14
27800: PUSH
27801: LD_VAR 0 14
27805: PPUSH
27806: LD_VAR 0 14
27810: PUSH
27811: LD_INT 1
27813: PLUS
27814: PPUSH
27815: LD_INT 2
27817: PPUSH
27818: CALL_OW 2
27822: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
27823: LD_VAR 0 9
27827: PPUSH
27828: LD_VAR 0 13
27832: PPUSH
27833: CALL_OW 325
27837: PUSH
27838: LD_VAR 0 10
27842: PPUSH
27843: CALL_OW 255
27847: PPUSH
27848: LD_VAR 0 13
27852: PPUSH
27853: CALL_OW 325
27857: NOT
27858: AND
27859: IFFALSE 27888
// missile := Insert ( missile , missile + 1 , 3 ) ;
27861: LD_ADDR_VAR 0 14
27865: PUSH
27866: LD_VAR 0 14
27870: PPUSH
27871: LD_VAR 0 14
27875: PUSH
27876: LD_INT 1
27878: PLUS
27879: PPUSH
27880: LD_INT 3
27882: PPUSH
27883: CALL_OW 2
27887: ST_TO_ADDR
// if missile < 2 then
27888: LD_VAR 0 14
27892: PUSH
27893: LD_INT 2
27895: LESS
27896: IFFALSE 27900
// exit ;
27898: GO 28122
// x := GetX ( enemy ) ;
27900: LD_ADDR_VAR 0 4
27904: PUSH
27905: LD_VAR 0 10
27909: PPUSH
27910: CALL_OW 250
27914: ST_TO_ADDR
// y := GetY ( enemy ) ;
27915: LD_ADDR_VAR 0 5
27919: PUSH
27920: LD_VAR 0 10
27924: PPUSH
27925: CALL_OW 251
27929: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
27930: LD_ADDR_VAR 0 6
27934: PUSH
27935: LD_VAR 0 4
27939: PUSH
27940: LD_INT 1
27942: NEG
27943: PPUSH
27944: LD_INT 1
27946: PPUSH
27947: CALL_OW 12
27951: PLUS
27952: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
27953: LD_ADDR_VAR 0 7
27957: PUSH
27958: LD_VAR 0 5
27962: PUSH
27963: LD_INT 1
27965: NEG
27966: PPUSH
27967: LD_INT 1
27969: PPUSH
27970: CALL_OW 12
27974: PLUS
27975: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
27976: LD_VAR 0 6
27980: PPUSH
27981: LD_VAR 0 7
27985: PPUSH
27986: CALL_OW 488
27990: NOT
27991: IFFALSE 28013
// begin _x := x ;
27993: LD_ADDR_VAR 0 6
27997: PUSH
27998: LD_VAR 0 4
28002: ST_TO_ADDR
// _y := y ;
28003: LD_ADDR_VAR 0 7
28007: PUSH
28008: LD_VAR 0 5
28012: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
28013: LD_ADDR_VAR 0 3
28017: PUSH
28018: LD_INT 1
28020: PPUSH
28021: LD_VAR 0 14
28025: PPUSH
28026: CALL_OW 12
28030: ST_TO_ADDR
// case i of 1 :
28031: LD_VAR 0 3
28035: PUSH
28036: LD_INT 1
28038: DOUBLE
28039: EQUAL
28040: IFTRUE 28044
28042: GO 28061
28044: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
28045: LD_VAR 0 1
28049: PPUSH
28050: LD_VAR 0 10
28054: PPUSH
28055: CALL_OW 115
28059: GO 28122
28061: LD_INT 2
28063: DOUBLE
28064: EQUAL
28065: IFTRUE 28069
28067: GO 28091
28069: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
28070: LD_VAR 0 1
28074: PPUSH
28075: LD_VAR 0 6
28079: PPUSH
28080: LD_VAR 0 7
28084: PPUSH
28085: CALL_OW 153
28089: GO 28122
28091: LD_INT 3
28093: DOUBLE
28094: EQUAL
28095: IFTRUE 28099
28097: GO 28121
28099: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
28100: LD_VAR 0 1
28104: PPUSH
28105: LD_VAR 0 6
28109: PPUSH
28110: LD_VAR 0 7
28114: PPUSH
28115: CALL_OW 154
28119: GO 28122
28121: POP
// end ;
28122: LD_VAR 0 2
28126: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
28127: LD_INT 0
28129: PPUSH
28130: PPUSH
28131: PPUSH
28132: PPUSH
28133: PPUSH
28134: PPUSH
// if not unit or not building then
28135: LD_VAR 0 1
28139: NOT
28140: PUSH
28141: LD_VAR 0 2
28145: NOT
28146: OR
28147: IFFALSE 28151
// exit ;
28149: GO 28309
// x := GetX ( building ) ;
28151: LD_ADDR_VAR 0 5
28155: PUSH
28156: LD_VAR 0 2
28160: PPUSH
28161: CALL_OW 250
28165: ST_TO_ADDR
// y := GetY ( building ) ;
28166: LD_ADDR_VAR 0 6
28170: PUSH
28171: LD_VAR 0 2
28175: PPUSH
28176: CALL_OW 251
28180: ST_TO_ADDR
// for i = 0 to 5 do
28181: LD_ADDR_VAR 0 4
28185: PUSH
28186: DOUBLE
28187: LD_INT 0
28189: DEC
28190: ST_TO_ADDR
28191: LD_INT 5
28193: PUSH
28194: FOR_TO
28195: IFFALSE 28307
// begin _x := ShiftX ( x , i , 3 ) ;
28197: LD_ADDR_VAR 0 7
28201: PUSH
28202: LD_VAR 0 5
28206: PPUSH
28207: LD_VAR 0 4
28211: PPUSH
28212: LD_INT 3
28214: PPUSH
28215: CALL_OW 272
28219: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
28220: LD_ADDR_VAR 0 8
28224: PUSH
28225: LD_VAR 0 6
28229: PPUSH
28230: LD_VAR 0 4
28234: PPUSH
28235: LD_INT 3
28237: PPUSH
28238: CALL_OW 273
28242: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28243: LD_VAR 0 7
28247: PPUSH
28248: LD_VAR 0 8
28252: PPUSH
28253: CALL_OW 488
28257: NOT
28258: IFFALSE 28262
// continue ;
28260: GO 28194
// if HexInfo ( _x , _y ) = 0 then
28262: LD_VAR 0 7
28266: PPUSH
28267: LD_VAR 0 8
28271: PPUSH
28272: CALL_OW 428
28276: PUSH
28277: LD_INT 0
28279: EQUAL
28280: IFFALSE 28305
// begin ComMoveXY ( unit , _x , _y ) ;
28282: LD_VAR 0 1
28286: PPUSH
28287: LD_VAR 0 7
28291: PPUSH
28292: LD_VAR 0 8
28296: PPUSH
28297: CALL_OW 111
// exit ;
28301: POP
28302: POP
28303: GO 28309
// end ; end ;
28305: GO 28194
28307: POP
28308: POP
// end ;
28309: LD_VAR 0 3
28313: RET
// export function ScanBase ( side , base_area ) ; begin
28314: LD_INT 0
28316: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
28317: LD_ADDR_VAR 0 3
28321: PUSH
28322: LD_VAR 0 2
28326: PPUSH
28327: LD_INT 81
28329: PUSH
28330: LD_VAR 0 1
28334: PUSH
28335: EMPTY
28336: LIST
28337: LIST
28338: PPUSH
28339: CALL_OW 70
28343: ST_TO_ADDR
// end ;
28344: LD_VAR 0 3
28348: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
28349: LD_INT 0
28351: PPUSH
28352: PPUSH
28353: PPUSH
28354: PPUSH
// result := false ;
28355: LD_ADDR_VAR 0 2
28359: PUSH
28360: LD_INT 0
28362: ST_TO_ADDR
// side := GetSide ( unit ) ;
28363: LD_ADDR_VAR 0 3
28367: PUSH
28368: LD_VAR 0 1
28372: PPUSH
28373: CALL_OW 255
28377: ST_TO_ADDR
// nat := GetNation ( unit ) ;
28378: LD_ADDR_VAR 0 4
28382: PUSH
28383: LD_VAR 0 1
28387: PPUSH
28388: CALL_OW 248
28392: ST_TO_ADDR
// case nat of 1 :
28393: LD_VAR 0 4
28397: PUSH
28398: LD_INT 1
28400: DOUBLE
28401: EQUAL
28402: IFTRUE 28406
28404: GO 28417
28406: POP
// tech := tech_lassight ; 2 :
28407: LD_ADDR_VAR 0 5
28411: PUSH
28412: LD_INT 12
28414: ST_TO_ADDR
28415: GO 28456
28417: LD_INT 2
28419: DOUBLE
28420: EQUAL
28421: IFTRUE 28425
28423: GO 28436
28425: POP
// tech := tech_mortar ; 3 :
28426: LD_ADDR_VAR 0 5
28430: PUSH
28431: LD_INT 41
28433: ST_TO_ADDR
28434: GO 28456
28436: LD_INT 3
28438: DOUBLE
28439: EQUAL
28440: IFTRUE 28444
28442: GO 28455
28444: POP
// tech := tech_bazooka ; end ;
28445: LD_ADDR_VAR 0 5
28449: PUSH
28450: LD_INT 44
28452: ST_TO_ADDR
28453: GO 28456
28455: POP
// if Researched ( side , tech ) then
28456: LD_VAR 0 3
28460: PPUSH
28461: LD_VAR 0 5
28465: PPUSH
28466: CALL_OW 325
28470: IFFALSE 28497
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
28472: LD_ADDR_VAR 0 2
28476: PUSH
28477: LD_INT 5
28479: PUSH
28480: LD_INT 8
28482: PUSH
28483: LD_INT 9
28485: PUSH
28486: EMPTY
28487: LIST
28488: LIST
28489: LIST
28490: PUSH
28491: LD_VAR 0 4
28495: ARRAY
28496: ST_TO_ADDR
// end ;
28497: LD_VAR 0 2
28501: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
28502: LD_INT 0
28504: PPUSH
28505: PPUSH
28506: PPUSH
// if not mines then
28507: LD_VAR 0 2
28511: NOT
28512: IFFALSE 28516
// exit ;
28514: GO 28660
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28516: LD_ADDR_VAR 0 5
28520: PUSH
28521: LD_INT 81
28523: PUSH
28524: LD_VAR 0 1
28528: PUSH
28529: EMPTY
28530: LIST
28531: LIST
28532: PUSH
28533: LD_INT 3
28535: PUSH
28536: LD_INT 21
28538: PUSH
28539: LD_INT 3
28541: PUSH
28542: EMPTY
28543: LIST
28544: LIST
28545: PUSH
28546: EMPTY
28547: LIST
28548: LIST
28549: PUSH
28550: EMPTY
28551: LIST
28552: LIST
28553: PPUSH
28554: CALL_OW 69
28558: ST_TO_ADDR
// for i in mines do
28559: LD_ADDR_VAR 0 4
28563: PUSH
28564: LD_VAR 0 2
28568: PUSH
28569: FOR_IN
28570: IFFALSE 28658
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
28572: LD_VAR 0 4
28576: PUSH
28577: LD_INT 1
28579: ARRAY
28580: PPUSH
28581: LD_VAR 0 4
28585: PUSH
28586: LD_INT 2
28588: ARRAY
28589: PPUSH
28590: CALL_OW 458
28594: NOT
28595: IFFALSE 28599
// continue ;
28597: GO 28569
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
28599: LD_VAR 0 4
28603: PUSH
28604: LD_INT 1
28606: ARRAY
28607: PPUSH
28608: LD_VAR 0 4
28612: PUSH
28613: LD_INT 2
28615: ARRAY
28616: PPUSH
28617: CALL_OW 428
28621: PUSH
28622: LD_VAR 0 5
28626: IN
28627: IFFALSE 28656
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
28629: LD_VAR 0 4
28633: PUSH
28634: LD_INT 1
28636: ARRAY
28637: PPUSH
28638: LD_VAR 0 4
28642: PUSH
28643: LD_INT 2
28645: ARRAY
28646: PPUSH
28647: LD_VAR 0 1
28651: PPUSH
28652: CALL_OW 456
// end ;
28656: GO 28569
28658: POP
28659: POP
// end ;
28660: LD_VAR 0 3
28664: RET
// export function Count ( array ) ; var i ; begin
28665: LD_INT 0
28667: PPUSH
28668: PPUSH
// result := 0 ;
28669: LD_ADDR_VAR 0 2
28673: PUSH
28674: LD_INT 0
28676: ST_TO_ADDR
// for i in array do
28677: LD_ADDR_VAR 0 3
28681: PUSH
28682: LD_VAR 0 1
28686: PUSH
28687: FOR_IN
28688: IFFALSE 28712
// if i then
28690: LD_VAR 0 3
28694: IFFALSE 28710
// result := result + 1 ;
28696: LD_ADDR_VAR 0 2
28700: PUSH
28701: LD_VAR 0 2
28705: PUSH
28706: LD_INT 1
28708: PLUS
28709: ST_TO_ADDR
28710: GO 28687
28712: POP
28713: POP
// end ;
28714: LD_VAR 0 2
28718: RET
// export function IsEmpty ( building ) ; begin
28719: LD_INT 0
28721: PPUSH
// if not building then
28722: LD_VAR 0 1
28726: NOT
28727: IFFALSE 28731
// exit ;
28729: GO 28774
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
28731: LD_ADDR_VAR 0 2
28735: PUSH
28736: LD_VAR 0 1
28740: PUSH
28741: LD_INT 22
28743: PUSH
28744: LD_VAR 0 1
28748: PPUSH
28749: CALL_OW 255
28753: PUSH
28754: EMPTY
28755: LIST
28756: LIST
28757: PUSH
28758: LD_INT 58
28760: PUSH
28761: EMPTY
28762: LIST
28763: PUSH
28764: EMPTY
28765: LIST
28766: LIST
28767: PPUSH
28768: CALL_OW 69
28772: IN
28773: ST_TO_ADDR
// end ;
28774: LD_VAR 0 2
28778: RET
// export function IsNotFull ( building ) ; begin
28779: LD_INT 0
28781: PPUSH
// if not building then
28782: LD_VAR 0 1
28786: NOT
28787: IFFALSE 28791
// exit ;
28789: GO 28810
// result := UnitsInside ( building ) < 6 ;
28791: LD_ADDR_VAR 0 2
28795: PUSH
28796: LD_VAR 0 1
28800: PPUSH
28801: CALL_OW 313
28805: PUSH
28806: LD_INT 6
28808: LESS
28809: ST_TO_ADDR
// end ;
28810: LD_VAR 0 2
28814: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
28815: LD_INT 0
28817: PPUSH
28818: PPUSH
28819: PPUSH
28820: PPUSH
// tmp := [ ] ;
28821: LD_ADDR_VAR 0 3
28825: PUSH
28826: EMPTY
28827: ST_TO_ADDR
// list := [ ] ;
28828: LD_ADDR_VAR 0 5
28832: PUSH
28833: EMPTY
28834: ST_TO_ADDR
// for i = 16 to 25 do
28835: LD_ADDR_VAR 0 4
28839: PUSH
28840: DOUBLE
28841: LD_INT 16
28843: DEC
28844: ST_TO_ADDR
28845: LD_INT 25
28847: PUSH
28848: FOR_TO
28849: IFFALSE 28922
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
28851: LD_ADDR_VAR 0 3
28855: PUSH
28856: LD_VAR 0 3
28860: PUSH
28861: LD_INT 22
28863: PUSH
28864: LD_VAR 0 1
28868: PPUSH
28869: CALL_OW 255
28873: PUSH
28874: EMPTY
28875: LIST
28876: LIST
28877: PUSH
28878: LD_INT 91
28880: PUSH
28881: LD_VAR 0 1
28885: PUSH
28886: LD_INT 6
28888: PUSH
28889: EMPTY
28890: LIST
28891: LIST
28892: LIST
28893: PUSH
28894: LD_INT 30
28896: PUSH
28897: LD_VAR 0 4
28901: PUSH
28902: EMPTY
28903: LIST
28904: LIST
28905: PUSH
28906: EMPTY
28907: LIST
28908: LIST
28909: LIST
28910: PUSH
28911: EMPTY
28912: LIST
28913: PPUSH
28914: CALL_OW 69
28918: ADD
28919: ST_TO_ADDR
28920: GO 28848
28922: POP
28923: POP
// for i = 1 to tmp do
28924: LD_ADDR_VAR 0 4
28928: PUSH
28929: DOUBLE
28930: LD_INT 1
28932: DEC
28933: ST_TO_ADDR
28934: LD_VAR 0 3
28938: PUSH
28939: FOR_TO
28940: IFFALSE 29028
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
28942: LD_ADDR_VAR 0 5
28946: PUSH
28947: LD_VAR 0 5
28951: PUSH
28952: LD_VAR 0 3
28956: PUSH
28957: LD_VAR 0 4
28961: ARRAY
28962: PPUSH
28963: CALL_OW 266
28967: PUSH
28968: LD_VAR 0 3
28972: PUSH
28973: LD_VAR 0 4
28977: ARRAY
28978: PPUSH
28979: CALL_OW 250
28983: PUSH
28984: LD_VAR 0 3
28988: PUSH
28989: LD_VAR 0 4
28993: ARRAY
28994: PPUSH
28995: CALL_OW 251
28999: PUSH
29000: LD_VAR 0 3
29004: PUSH
29005: LD_VAR 0 4
29009: ARRAY
29010: PPUSH
29011: CALL_OW 254
29015: PUSH
29016: EMPTY
29017: LIST
29018: LIST
29019: LIST
29020: LIST
29021: PUSH
29022: EMPTY
29023: LIST
29024: ADD
29025: ST_TO_ADDR
29026: GO 28939
29028: POP
29029: POP
// result := list ;
29030: LD_ADDR_VAR 0 2
29034: PUSH
29035: LD_VAR 0 5
29039: ST_TO_ADDR
// end ;
29040: LD_VAR 0 2
29044: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
29045: LD_INT 0
29047: PPUSH
29048: PPUSH
29049: PPUSH
29050: PPUSH
29051: PPUSH
29052: PPUSH
29053: PPUSH
// if not factory then
29054: LD_VAR 0 1
29058: NOT
29059: IFFALSE 29063
// exit ;
29061: GO 29656
// if control = control_apeman then
29063: LD_VAR 0 4
29067: PUSH
29068: LD_INT 5
29070: EQUAL
29071: IFFALSE 29180
// begin tmp := UnitsInside ( factory ) ;
29073: LD_ADDR_VAR 0 8
29077: PUSH
29078: LD_VAR 0 1
29082: PPUSH
29083: CALL_OW 313
29087: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
29088: LD_VAR 0 8
29092: PPUSH
29093: LD_INT 25
29095: PUSH
29096: LD_INT 12
29098: PUSH
29099: EMPTY
29100: LIST
29101: LIST
29102: PPUSH
29103: CALL_OW 72
29107: NOT
29108: IFFALSE 29118
// control := control_manual ;
29110: LD_ADDR_VAR 0 4
29114: PUSH
29115: LD_INT 1
29117: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
29118: LD_ADDR_VAR 0 8
29122: PUSH
29123: LD_VAR 0 1
29127: PPUSH
29128: CALL 28815 0 1
29132: ST_TO_ADDR
// if tmp then
29133: LD_VAR 0 8
29137: IFFALSE 29180
// begin for i in tmp do
29139: LD_ADDR_VAR 0 7
29143: PUSH
29144: LD_VAR 0 8
29148: PUSH
29149: FOR_IN
29150: IFFALSE 29178
// if i [ 1 ] = b_ext_radio then
29152: LD_VAR 0 7
29156: PUSH
29157: LD_INT 1
29159: ARRAY
29160: PUSH
29161: LD_INT 22
29163: EQUAL
29164: IFFALSE 29176
// begin control := control_remote ;
29166: LD_ADDR_VAR 0 4
29170: PUSH
29171: LD_INT 2
29173: ST_TO_ADDR
// break ;
29174: GO 29178
// end ;
29176: GO 29149
29178: POP
29179: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
29180: LD_VAR 0 1
29184: PPUSH
29185: LD_VAR 0 2
29189: PPUSH
29190: LD_VAR 0 3
29194: PPUSH
29195: LD_VAR 0 4
29199: PPUSH
29200: LD_VAR 0 5
29204: PPUSH
29205: CALL_OW 448
29209: IFFALSE 29244
// begin result := [ chassis , engine , control , weapon ] ;
29211: LD_ADDR_VAR 0 6
29215: PUSH
29216: LD_VAR 0 2
29220: PUSH
29221: LD_VAR 0 3
29225: PUSH
29226: LD_VAR 0 4
29230: PUSH
29231: LD_VAR 0 5
29235: PUSH
29236: EMPTY
29237: LIST
29238: LIST
29239: LIST
29240: LIST
29241: ST_TO_ADDR
// exit ;
29242: GO 29656
// end ; _chassis := AvailableChassisList ( factory ) ;
29244: LD_ADDR_VAR 0 9
29248: PUSH
29249: LD_VAR 0 1
29253: PPUSH
29254: CALL_OW 475
29258: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
29259: LD_ADDR_VAR 0 11
29263: PUSH
29264: LD_VAR 0 1
29268: PPUSH
29269: CALL_OW 476
29273: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
29274: LD_ADDR_VAR 0 12
29278: PUSH
29279: LD_VAR 0 1
29283: PPUSH
29284: CALL_OW 477
29288: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
29289: LD_ADDR_VAR 0 10
29293: PUSH
29294: LD_VAR 0 1
29298: PPUSH
29299: CALL_OW 478
29303: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
29304: LD_VAR 0 9
29308: NOT
29309: PUSH
29310: LD_VAR 0 11
29314: NOT
29315: OR
29316: PUSH
29317: LD_VAR 0 12
29321: NOT
29322: OR
29323: PUSH
29324: LD_VAR 0 10
29328: NOT
29329: OR
29330: IFFALSE 29365
// begin result := [ chassis , engine , control , weapon ] ;
29332: LD_ADDR_VAR 0 6
29336: PUSH
29337: LD_VAR 0 2
29341: PUSH
29342: LD_VAR 0 3
29346: PUSH
29347: LD_VAR 0 4
29351: PUSH
29352: LD_VAR 0 5
29356: PUSH
29357: EMPTY
29358: LIST
29359: LIST
29360: LIST
29361: LIST
29362: ST_TO_ADDR
// exit ;
29363: GO 29656
// end ; if not chassis in _chassis then
29365: LD_VAR 0 2
29369: PUSH
29370: LD_VAR 0 9
29374: IN
29375: NOT
29376: IFFALSE 29402
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
29378: LD_ADDR_VAR 0 2
29382: PUSH
29383: LD_VAR 0 9
29387: PUSH
29388: LD_INT 1
29390: PPUSH
29391: LD_VAR 0 9
29395: PPUSH
29396: CALL_OW 12
29400: ARRAY
29401: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
29402: LD_VAR 0 2
29406: PPUSH
29407: LD_VAR 0 3
29411: PPUSH
29412: CALL 29661 0 2
29416: NOT
29417: IFFALSE 29476
// repeat engine := _engine [ 1 ] ;
29419: LD_ADDR_VAR 0 3
29423: PUSH
29424: LD_VAR 0 11
29428: PUSH
29429: LD_INT 1
29431: ARRAY
29432: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
29433: LD_ADDR_VAR 0 11
29437: PUSH
29438: LD_VAR 0 11
29442: PPUSH
29443: LD_INT 1
29445: PPUSH
29446: CALL_OW 3
29450: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
29451: LD_VAR 0 2
29455: PPUSH
29456: LD_VAR 0 3
29460: PPUSH
29461: CALL 29661 0 2
29465: PUSH
29466: LD_VAR 0 11
29470: PUSH
29471: EMPTY
29472: EQUAL
29473: OR
29474: IFFALSE 29419
// if not control in _control then
29476: LD_VAR 0 4
29480: PUSH
29481: LD_VAR 0 12
29485: IN
29486: NOT
29487: IFFALSE 29513
// control := _control [ rand ( 1 , _control ) ] ;
29489: LD_ADDR_VAR 0 4
29493: PUSH
29494: LD_VAR 0 12
29498: PUSH
29499: LD_INT 1
29501: PPUSH
29502: LD_VAR 0 12
29506: PPUSH
29507: CALL_OW 12
29511: ARRAY
29512: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
29513: LD_VAR 0 2
29517: PPUSH
29518: LD_VAR 0 5
29522: PPUSH
29523: CALL 29881 0 2
29527: NOT
29528: IFFALSE 29587
// repeat weapon := _weapon [ 1 ] ;
29530: LD_ADDR_VAR 0 5
29534: PUSH
29535: LD_VAR 0 10
29539: PUSH
29540: LD_INT 1
29542: ARRAY
29543: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
29544: LD_ADDR_VAR 0 10
29548: PUSH
29549: LD_VAR 0 10
29553: PPUSH
29554: LD_INT 1
29556: PPUSH
29557: CALL_OW 3
29561: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
29562: LD_VAR 0 2
29566: PPUSH
29567: LD_VAR 0 5
29571: PPUSH
29572: CALL 29881 0 2
29576: PUSH
29577: LD_VAR 0 10
29581: PUSH
29582: EMPTY
29583: EQUAL
29584: OR
29585: IFFALSE 29530
// result := [ ] ;
29587: LD_ADDR_VAR 0 6
29591: PUSH
29592: EMPTY
29593: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
29594: LD_VAR 0 1
29598: PPUSH
29599: LD_VAR 0 2
29603: PPUSH
29604: LD_VAR 0 3
29608: PPUSH
29609: LD_VAR 0 4
29613: PPUSH
29614: LD_VAR 0 5
29618: PPUSH
29619: CALL_OW 448
29623: IFFALSE 29656
// result := [ chassis , engine , control , weapon ] ;
29625: LD_ADDR_VAR 0 6
29629: PUSH
29630: LD_VAR 0 2
29634: PUSH
29635: LD_VAR 0 3
29639: PUSH
29640: LD_VAR 0 4
29644: PUSH
29645: LD_VAR 0 5
29649: PUSH
29650: EMPTY
29651: LIST
29652: LIST
29653: LIST
29654: LIST
29655: ST_TO_ADDR
// end ;
29656: LD_VAR 0 6
29660: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
29661: LD_INT 0
29663: PPUSH
// if not chassis or not engine then
29664: LD_VAR 0 1
29668: NOT
29669: PUSH
29670: LD_VAR 0 2
29674: NOT
29675: OR
29676: IFFALSE 29680
// exit ;
29678: GO 29876
// case engine of engine_solar :
29680: LD_VAR 0 2
29684: PUSH
29685: LD_INT 2
29687: DOUBLE
29688: EQUAL
29689: IFTRUE 29693
29691: GO 29731
29693: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
29694: LD_ADDR_VAR 0 3
29698: PUSH
29699: LD_INT 11
29701: PUSH
29702: LD_INT 12
29704: PUSH
29705: LD_INT 13
29707: PUSH
29708: LD_INT 14
29710: PUSH
29711: LD_INT 1
29713: PUSH
29714: LD_INT 2
29716: PUSH
29717: LD_INT 3
29719: PUSH
29720: EMPTY
29721: LIST
29722: LIST
29723: LIST
29724: LIST
29725: LIST
29726: LIST
29727: LIST
29728: ST_TO_ADDR
29729: GO 29860
29731: LD_INT 1
29733: DOUBLE
29734: EQUAL
29735: IFTRUE 29739
29737: GO 29801
29739: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
29740: LD_ADDR_VAR 0 3
29744: PUSH
29745: LD_INT 11
29747: PUSH
29748: LD_INT 12
29750: PUSH
29751: LD_INT 13
29753: PUSH
29754: LD_INT 14
29756: PUSH
29757: LD_INT 1
29759: PUSH
29760: LD_INT 2
29762: PUSH
29763: LD_INT 3
29765: PUSH
29766: LD_INT 4
29768: PUSH
29769: LD_INT 5
29771: PUSH
29772: LD_INT 21
29774: PUSH
29775: LD_INT 23
29777: PUSH
29778: LD_INT 22
29780: PUSH
29781: LD_INT 24
29783: PUSH
29784: EMPTY
29785: LIST
29786: LIST
29787: LIST
29788: LIST
29789: LIST
29790: LIST
29791: LIST
29792: LIST
29793: LIST
29794: LIST
29795: LIST
29796: LIST
29797: LIST
29798: ST_TO_ADDR
29799: GO 29860
29801: LD_INT 3
29803: DOUBLE
29804: EQUAL
29805: IFTRUE 29809
29807: GO 29859
29809: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
29810: LD_ADDR_VAR 0 3
29814: PUSH
29815: LD_INT 13
29817: PUSH
29818: LD_INT 14
29820: PUSH
29821: LD_INT 2
29823: PUSH
29824: LD_INT 3
29826: PUSH
29827: LD_INT 4
29829: PUSH
29830: LD_INT 5
29832: PUSH
29833: LD_INT 21
29835: PUSH
29836: LD_INT 22
29838: PUSH
29839: LD_INT 23
29841: PUSH
29842: LD_INT 24
29844: PUSH
29845: EMPTY
29846: LIST
29847: LIST
29848: LIST
29849: LIST
29850: LIST
29851: LIST
29852: LIST
29853: LIST
29854: LIST
29855: LIST
29856: ST_TO_ADDR
29857: GO 29860
29859: POP
// result := ( chassis in result ) ;
29860: LD_ADDR_VAR 0 3
29864: PUSH
29865: LD_VAR 0 1
29869: PUSH
29870: LD_VAR 0 3
29874: IN
29875: ST_TO_ADDR
// end ;
29876: LD_VAR 0 3
29880: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
29881: LD_INT 0
29883: PPUSH
// if not chassis or not weapon then
29884: LD_VAR 0 1
29888: NOT
29889: PUSH
29890: LD_VAR 0 2
29894: NOT
29895: OR
29896: IFFALSE 29900
// exit ;
29898: GO 30962
// case weapon of us_machine_gun :
29900: LD_VAR 0 2
29904: PUSH
29905: LD_INT 2
29907: DOUBLE
29908: EQUAL
29909: IFTRUE 29913
29911: GO 29943
29913: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
29914: LD_ADDR_VAR 0 3
29918: PUSH
29919: LD_INT 1
29921: PUSH
29922: LD_INT 2
29924: PUSH
29925: LD_INT 3
29927: PUSH
29928: LD_INT 4
29930: PUSH
29931: LD_INT 5
29933: PUSH
29934: EMPTY
29935: LIST
29936: LIST
29937: LIST
29938: LIST
29939: LIST
29940: ST_TO_ADDR
29941: GO 30946
29943: LD_INT 3
29945: DOUBLE
29946: EQUAL
29947: IFTRUE 29951
29949: GO 29981
29951: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
29952: LD_ADDR_VAR 0 3
29956: PUSH
29957: LD_INT 1
29959: PUSH
29960: LD_INT 2
29962: PUSH
29963: LD_INT 3
29965: PUSH
29966: LD_INT 4
29968: PUSH
29969: LD_INT 5
29971: PUSH
29972: EMPTY
29973: LIST
29974: LIST
29975: LIST
29976: LIST
29977: LIST
29978: ST_TO_ADDR
29979: GO 30946
29981: LD_INT 11
29983: DOUBLE
29984: EQUAL
29985: IFTRUE 29989
29987: GO 30019
29989: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
29990: LD_ADDR_VAR 0 3
29994: PUSH
29995: LD_INT 1
29997: PUSH
29998: LD_INT 2
30000: PUSH
30001: LD_INT 3
30003: PUSH
30004: LD_INT 4
30006: PUSH
30007: LD_INT 5
30009: PUSH
30010: EMPTY
30011: LIST
30012: LIST
30013: LIST
30014: LIST
30015: LIST
30016: ST_TO_ADDR
30017: GO 30946
30019: LD_INT 4
30021: DOUBLE
30022: EQUAL
30023: IFTRUE 30027
30025: GO 30053
30027: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
30028: LD_ADDR_VAR 0 3
30032: PUSH
30033: LD_INT 2
30035: PUSH
30036: LD_INT 3
30038: PUSH
30039: LD_INT 4
30041: PUSH
30042: LD_INT 5
30044: PUSH
30045: EMPTY
30046: LIST
30047: LIST
30048: LIST
30049: LIST
30050: ST_TO_ADDR
30051: GO 30946
30053: LD_INT 5
30055: DOUBLE
30056: EQUAL
30057: IFTRUE 30061
30059: GO 30087
30061: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
30062: LD_ADDR_VAR 0 3
30066: PUSH
30067: LD_INT 2
30069: PUSH
30070: LD_INT 3
30072: PUSH
30073: LD_INT 4
30075: PUSH
30076: LD_INT 5
30078: PUSH
30079: EMPTY
30080: LIST
30081: LIST
30082: LIST
30083: LIST
30084: ST_TO_ADDR
30085: GO 30946
30087: LD_INT 9
30089: DOUBLE
30090: EQUAL
30091: IFTRUE 30095
30093: GO 30121
30095: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
30096: LD_ADDR_VAR 0 3
30100: PUSH
30101: LD_INT 2
30103: PUSH
30104: LD_INT 3
30106: PUSH
30107: LD_INT 4
30109: PUSH
30110: LD_INT 5
30112: PUSH
30113: EMPTY
30114: LIST
30115: LIST
30116: LIST
30117: LIST
30118: ST_TO_ADDR
30119: GO 30946
30121: LD_INT 7
30123: DOUBLE
30124: EQUAL
30125: IFTRUE 30129
30127: GO 30155
30129: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
30130: LD_ADDR_VAR 0 3
30134: PUSH
30135: LD_INT 2
30137: PUSH
30138: LD_INT 3
30140: PUSH
30141: LD_INT 4
30143: PUSH
30144: LD_INT 5
30146: PUSH
30147: EMPTY
30148: LIST
30149: LIST
30150: LIST
30151: LIST
30152: ST_TO_ADDR
30153: GO 30946
30155: LD_INT 12
30157: DOUBLE
30158: EQUAL
30159: IFTRUE 30163
30161: GO 30189
30163: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
30164: LD_ADDR_VAR 0 3
30168: PUSH
30169: LD_INT 2
30171: PUSH
30172: LD_INT 3
30174: PUSH
30175: LD_INT 4
30177: PUSH
30178: LD_INT 5
30180: PUSH
30181: EMPTY
30182: LIST
30183: LIST
30184: LIST
30185: LIST
30186: ST_TO_ADDR
30187: GO 30946
30189: LD_INT 13
30191: DOUBLE
30192: EQUAL
30193: IFTRUE 30197
30195: GO 30223
30197: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
30198: LD_ADDR_VAR 0 3
30202: PUSH
30203: LD_INT 2
30205: PUSH
30206: LD_INT 3
30208: PUSH
30209: LD_INT 4
30211: PUSH
30212: LD_INT 5
30214: PUSH
30215: EMPTY
30216: LIST
30217: LIST
30218: LIST
30219: LIST
30220: ST_TO_ADDR
30221: GO 30946
30223: LD_INT 14
30225: DOUBLE
30226: EQUAL
30227: IFTRUE 30231
30229: GO 30249
30231: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
30232: LD_ADDR_VAR 0 3
30236: PUSH
30237: LD_INT 4
30239: PUSH
30240: LD_INT 5
30242: PUSH
30243: EMPTY
30244: LIST
30245: LIST
30246: ST_TO_ADDR
30247: GO 30946
30249: LD_INT 6
30251: DOUBLE
30252: EQUAL
30253: IFTRUE 30257
30255: GO 30275
30257: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
30258: LD_ADDR_VAR 0 3
30262: PUSH
30263: LD_INT 4
30265: PUSH
30266: LD_INT 5
30268: PUSH
30269: EMPTY
30270: LIST
30271: LIST
30272: ST_TO_ADDR
30273: GO 30946
30275: LD_INT 10
30277: DOUBLE
30278: EQUAL
30279: IFTRUE 30283
30281: GO 30301
30283: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
30284: LD_ADDR_VAR 0 3
30288: PUSH
30289: LD_INT 4
30291: PUSH
30292: LD_INT 5
30294: PUSH
30295: EMPTY
30296: LIST
30297: LIST
30298: ST_TO_ADDR
30299: GO 30946
30301: LD_INT 22
30303: DOUBLE
30304: EQUAL
30305: IFTRUE 30309
30307: GO 30335
30309: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
30310: LD_ADDR_VAR 0 3
30314: PUSH
30315: LD_INT 11
30317: PUSH
30318: LD_INT 12
30320: PUSH
30321: LD_INT 13
30323: PUSH
30324: LD_INT 14
30326: PUSH
30327: EMPTY
30328: LIST
30329: LIST
30330: LIST
30331: LIST
30332: ST_TO_ADDR
30333: GO 30946
30335: LD_INT 23
30337: DOUBLE
30338: EQUAL
30339: IFTRUE 30343
30341: GO 30369
30343: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
30344: LD_ADDR_VAR 0 3
30348: PUSH
30349: LD_INT 11
30351: PUSH
30352: LD_INT 12
30354: PUSH
30355: LD_INT 13
30357: PUSH
30358: LD_INT 14
30360: PUSH
30361: EMPTY
30362: LIST
30363: LIST
30364: LIST
30365: LIST
30366: ST_TO_ADDR
30367: GO 30946
30369: LD_INT 24
30371: DOUBLE
30372: EQUAL
30373: IFTRUE 30377
30375: GO 30403
30377: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
30378: LD_ADDR_VAR 0 3
30382: PUSH
30383: LD_INT 11
30385: PUSH
30386: LD_INT 12
30388: PUSH
30389: LD_INT 13
30391: PUSH
30392: LD_INT 14
30394: PUSH
30395: EMPTY
30396: LIST
30397: LIST
30398: LIST
30399: LIST
30400: ST_TO_ADDR
30401: GO 30946
30403: LD_INT 30
30405: DOUBLE
30406: EQUAL
30407: IFTRUE 30411
30409: GO 30437
30411: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
30412: LD_ADDR_VAR 0 3
30416: PUSH
30417: LD_INT 11
30419: PUSH
30420: LD_INT 12
30422: PUSH
30423: LD_INT 13
30425: PUSH
30426: LD_INT 14
30428: PUSH
30429: EMPTY
30430: LIST
30431: LIST
30432: LIST
30433: LIST
30434: ST_TO_ADDR
30435: GO 30946
30437: LD_INT 25
30439: DOUBLE
30440: EQUAL
30441: IFTRUE 30445
30443: GO 30463
30445: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
30446: LD_ADDR_VAR 0 3
30450: PUSH
30451: LD_INT 13
30453: PUSH
30454: LD_INT 14
30456: PUSH
30457: EMPTY
30458: LIST
30459: LIST
30460: ST_TO_ADDR
30461: GO 30946
30463: LD_INT 27
30465: DOUBLE
30466: EQUAL
30467: IFTRUE 30471
30469: GO 30489
30471: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
30472: LD_ADDR_VAR 0 3
30476: PUSH
30477: LD_INT 13
30479: PUSH
30480: LD_INT 14
30482: PUSH
30483: EMPTY
30484: LIST
30485: LIST
30486: ST_TO_ADDR
30487: GO 30946
30489: LD_EXP 57
30493: DOUBLE
30494: EQUAL
30495: IFTRUE 30499
30497: GO 30525
30499: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
30500: LD_ADDR_VAR 0 3
30504: PUSH
30505: LD_INT 11
30507: PUSH
30508: LD_INT 12
30510: PUSH
30511: LD_INT 13
30513: PUSH
30514: LD_INT 14
30516: PUSH
30517: EMPTY
30518: LIST
30519: LIST
30520: LIST
30521: LIST
30522: ST_TO_ADDR
30523: GO 30946
30525: LD_INT 28
30527: DOUBLE
30528: EQUAL
30529: IFTRUE 30533
30531: GO 30551
30533: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
30534: LD_ADDR_VAR 0 3
30538: PUSH
30539: LD_INT 13
30541: PUSH
30542: LD_INT 14
30544: PUSH
30545: EMPTY
30546: LIST
30547: LIST
30548: ST_TO_ADDR
30549: GO 30946
30551: LD_INT 29
30553: DOUBLE
30554: EQUAL
30555: IFTRUE 30559
30557: GO 30577
30559: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
30560: LD_ADDR_VAR 0 3
30564: PUSH
30565: LD_INT 13
30567: PUSH
30568: LD_INT 14
30570: PUSH
30571: EMPTY
30572: LIST
30573: LIST
30574: ST_TO_ADDR
30575: GO 30946
30577: LD_INT 31
30579: DOUBLE
30580: EQUAL
30581: IFTRUE 30585
30583: GO 30603
30585: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
30586: LD_ADDR_VAR 0 3
30590: PUSH
30591: LD_INT 13
30593: PUSH
30594: LD_INT 14
30596: PUSH
30597: EMPTY
30598: LIST
30599: LIST
30600: ST_TO_ADDR
30601: GO 30946
30603: LD_INT 26
30605: DOUBLE
30606: EQUAL
30607: IFTRUE 30611
30609: GO 30629
30611: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
30612: LD_ADDR_VAR 0 3
30616: PUSH
30617: LD_INT 13
30619: PUSH
30620: LD_INT 14
30622: PUSH
30623: EMPTY
30624: LIST
30625: LIST
30626: ST_TO_ADDR
30627: GO 30946
30629: LD_INT 42
30631: DOUBLE
30632: EQUAL
30633: IFTRUE 30637
30635: GO 30663
30637: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
30638: LD_ADDR_VAR 0 3
30642: PUSH
30643: LD_INT 21
30645: PUSH
30646: LD_INT 22
30648: PUSH
30649: LD_INT 23
30651: PUSH
30652: LD_INT 24
30654: PUSH
30655: EMPTY
30656: LIST
30657: LIST
30658: LIST
30659: LIST
30660: ST_TO_ADDR
30661: GO 30946
30663: LD_INT 43
30665: DOUBLE
30666: EQUAL
30667: IFTRUE 30671
30669: GO 30697
30671: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
30672: LD_ADDR_VAR 0 3
30676: PUSH
30677: LD_INT 21
30679: PUSH
30680: LD_INT 22
30682: PUSH
30683: LD_INT 23
30685: PUSH
30686: LD_INT 24
30688: PUSH
30689: EMPTY
30690: LIST
30691: LIST
30692: LIST
30693: LIST
30694: ST_TO_ADDR
30695: GO 30946
30697: LD_INT 44
30699: DOUBLE
30700: EQUAL
30701: IFTRUE 30705
30703: GO 30731
30705: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
30706: LD_ADDR_VAR 0 3
30710: PUSH
30711: LD_INT 21
30713: PUSH
30714: LD_INT 22
30716: PUSH
30717: LD_INT 23
30719: PUSH
30720: LD_INT 24
30722: PUSH
30723: EMPTY
30724: LIST
30725: LIST
30726: LIST
30727: LIST
30728: ST_TO_ADDR
30729: GO 30946
30731: LD_INT 45
30733: DOUBLE
30734: EQUAL
30735: IFTRUE 30739
30737: GO 30765
30739: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
30740: LD_ADDR_VAR 0 3
30744: PUSH
30745: LD_INT 21
30747: PUSH
30748: LD_INT 22
30750: PUSH
30751: LD_INT 23
30753: PUSH
30754: LD_INT 24
30756: PUSH
30757: EMPTY
30758: LIST
30759: LIST
30760: LIST
30761: LIST
30762: ST_TO_ADDR
30763: GO 30946
30765: LD_INT 49
30767: DOUBLE
30768: EQUAL
30769: IFTRUE 30773
30771: GO 30799
30773: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
30774: LD_ADDR_VAR 0 3
30778: PUSH
30779: LD_INT 21
30781: PUSH
30782: LD_INT 22
30784: PUSH
30785: LD_INT 23
30787: PUSH
30788: LD_INT 24
30790: PUSH
30791: EMPTY
30792: LIST
30793: LIST
30794: LIST
30795: LIST
30796: ST_TO_ADDR
30797: GO 30946
30799: LD_INT 51
30801: DOUBLE
30802: EQUAL
30803: IFTRUE 30807
30805: GO 30833
30807: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
30808: LD_ADDR_VAR 0 3
30812: PUSH
30813: LD_INT 21
30815: PUSH
30816: LD_INT 22
30818: PUSH
30819: LD_INT 23
30821: PUSH
30822: LD_INT 24
30824: PUSH
30825: EMPTY
30826: LIST
30827: LIST
30828: LIST
30829: LIST
30830: ST_TO_ADDR
30831: GO 30946
30833: LD_INT 52
30835: DOUBLE
30836: EQUAL
30837: IFTRUE 30841
30839: GO 30867
30841: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
30842: LD_ADDR_VAR 0 3
30846: PUSH
30847: LD_INT 21
30849: PUSH
30850: LD_INT 22
30852: PUSH
30853: LD_INT 23
30855: PUSH
30856: LD_INT 24
30858: PUSH
30859: EMPTY
30860: LIST
30861: LIST
30862: LIST
30863: LIST
30864: ST_TO_ADDR
30865: GO 30946
30867: LD_INT 53
30869: DOUBLE
30870: EQUAL
30871: IFTRUE 30875
30873: GO 30893
30875: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
30876: LD_ADDR_VAR 0 3
30880: PUSH
30881: LD_INT 23
30883: PUSH
30884: LD_INT 24
30886: PUSH
30887: EMPTY
30888: LIST
30889: LIST
30890: ST_TO_ADDR
30891: GO 30946
30893: LD_INT 46
30895: DOUBLE
30896: EQUAL
30897: IFTRUE 30901
30899: GO 30919
30901: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
30902: LD_ADDR_VAR 0 3
30906: PUSH
30907: LD_INT 23
30909: PUSH
30910: LD_INT 24
30912: PUSH
30913: EMPTY
30914: LIST
30915: LIST
30916: ST_TO_ADDR
30917: GO 30946
30919: LD_INT 47
30921: DOUBLE
30922: EQUAL
30923: IFTRUE 30927
30925: GO 30945
30927: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
30928: LD_ADDR_VAR 0 3
30932: PUSH
30933: LD_INT 23
30935: PUSH
30936: LD_INT 24
30938: PUSH
30939: EMPTY
30940: LIST
30941: LIST
30942: ST_TO_ADDR
30943: GO 30946
30945: POP
// result := ( chassis in result ) ;
30946: LD_ADDR_VAR 0 3
30950: PUSH
30951: LD_VAR 0 1
30955: PUSH
30956: LD_VAR 0 3
30960: IN
30961: ST_TO_ADDR
// end ;
30962: LD_VAR 0 3
30966: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
30967: LD_INT 0
30969: PPUSH
30970: PPUSH
30971: PPUSH
30972: PPUSH
30973: PPUSH
30974: PPUSH
30975: PPUSH
// result := array ;
30976: LD_ADDR_VAR 0 5
30980: PUSH
30981: LD_VAR 0 1
30985: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
30986: LD_VAR 0 1
30990: NOT
30991: PUSH
30992: LD_VAR 0 2
30996: NOT
30997: OR
30998: PUSH
30999: LD_VAR 0 3
31003: NOT
31004: OR
31005: PUSH
31006: LD_VAR 0 2
31010: PUSH
31011: LD_VAR 0 1
31015: GREATER
31016: OR
31017: PUSH
31018: LD_VAR 0 3
31022: PUSH
31023: LD_VAR 0 1
31027: GREATER
31028: OR
31029: IFFALSE 31033
// exit ;
31031: GO 31329
// if direction then
31033: LD_VAR 0 4
31037: IFFALSE 31101
// begin d := 1 ;
31039: LD_ADDR_VAR 0 9
31043: PUSH
31044: LD_INT 1
31046: ST_TO_ADDR
// if i_from > i_to then
31047: LD_VAR 0 2
31051: PUSH
31052: LD_VAR 0 3
31056: GREATER
31057: IFFALSE 31083
// length := ( array - i_from ) + i_to else
31059: LD_ADDR_VAR 0 11
31063: PUSH
31064: LD_VAR 0 1
31068: PUSH
31069: LD_VAR 0 2
31073: MINUS
31074: PUSH
31075: LD_VAR 0 3
31079: PLUS
31080: ST_TO_ADDR
31081: GO 31099
// length := i_to - i_from ;
31083: LD_ADDR_VAR 0 11
31087: PUSH
31088: LD_VAR 0 3
31092: PUSH
31093: LD_VAR 0 2
31097: MINUS
31098: ST_TO_ADDR
// end else
31099: GO 31162
// begin d := - 1 ;
31101: LD_ADDR_VAR 0 9
31105: PUSH
31106: LD_INT 1
31108: NEG
31109: ST_TO_ADDR
// if i_from > i_to then
31110: LD_VAR 0 2
31114: PUSH
31115: LD_VAR 0 3
31119: GREATER
31120: IFFALSE 31140
// length := i_from - i_to else
31122: LD_ADDR_VAR 0 11
31126: PUSH
31127: LD_VAR 0 2
31131: PUSH
31132: LD_VAR 0 3
31136: MINUS
31137: ST_TO_ADDR
31138: GO 31162
// length := ( array - i_to ) + i_from ;
31140: LD_ADDR_VAR 0 11
31144: PUSH
31145: LD_VAR 0 1
31149: PUSH
31150: LD_VAR 0 3
31154: MINUS
31155: PUSH
31156: LD_VAR 0 2
31160: PLUS
31161: ST_TO_ADDR
// end ; if not length then
31162: LD_VAR 0 11
31166: NOT
31167: IFFALSE 31171
// exit ;
31169: GO 31329
// tmp := array ;
31171: LD_ADDR_VAR 0 10
31175: PUSH
31176: LD_VAR 0 1
31180: ST_TO_ADDR
// for i = 1 to length do
31181: LD_ADDR_VAR 0 6
31185: PUSH
31186: DOUBLE
31187: LD_INT 1
31189: DEC
31190: ST_TO_ADDR
31191: LD_VAR 0 11
31195: PUSH
31196: FOR_TO
31197: IFFALSE 31317
// begin for j = 1 to array do
31199: LD_ADDR_VAR 0 7
31203: PUSH
31204: DOUBLE
31205: LD_INT 1
31207: DEC
31208: ST_TO_ADDR
31209: LD_VAR 0 1
31213: PUSH
31214: FOR_TO
31215: IFFALSE 31303
// begin k := j + d ;
31217: LD_ADDR_VAR 0 8
31221: PUSH
31222: LD_VAR 0 7
31226: PUSH
31227: LD_VAR 0 9
31231: PLUS
31232: ST_TO_ADDR
// if k > array then
31233: LD_VAR 0 8
31237: PUSH
31238: LD_VAR 0 1
31242: GREATER
31243: IFFALSE 31253
// k := 1 ;
31245: LD_ADDR_VAR 0 8
31249: PUSH
31250: LD_INT 1
31252: ST_TO_ADDR
// if not k then
31253: LD_VAR 0 8
31257: NOT
31258: IFFALSE 31270
// k := array ;
31260: LD_ADDR_VAR 0 8
31264: PUSH
31265: LD_VAR 0 1
31269: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
31270: LD_ADDR_VAR 0 10
31274: PUSH
31275: LD_VAR 0 10
31279: PPUSH
31280: LD_VAR 0 8
31284: PPUSH
31285: LD_VAR 0 1
31289: PUSH
31290: LD_VAR 0 7
31294: ARRAY
31295: PPUSH
31296: CALL_OW 1
31300: ST_TO_ADDR
// end ;
31301: GO 31214
31303: POP
31304: POP
// array := tmp ;
31305: LD_ADDR_VAR 0 1
31309: PUSH
31310: LD_VAR 0 10
31314: ST_TO_ADDR
// end ;
31315: GO 31196
31317: POP
31318: POP
// result := array ;
31319: LD_ADDR_VAR 0 5
31323: PUSH
31324: LD_VAR 0 1
31328: ST_TO_ADDR
// end ;
31329: LD_VAR 0 5
31333: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
31334: LD_INT 0
31336: PPUSH
31337: PPUSH
// result := 0 ;
31338: LD_ADDR_VAR 0 3
31342: PUSH
31343: LD_INT 0
31345: ST_TO_ADDR
// if not array or not value in array then
31346: LD_VAR 0 1
31350: NOT
31351: PUSH
31352: LD_VAR 0 2
31356: PUSH
31357: LD_VAR 0 1
31361: IN
31362: NOT
31363: OR
31364: IFFALSE 31368
// exit ;
31366: GO 31422
// for i = 1 to array do
31368: LD_ADDR_VAR 0 4
31372: PUSH
31373: DOUBLE
31374: LD_INT 1
31376: DEC
31377: ST_TO_ADDR
31378: LD_VAR 0 1
31382: PUSH
31383: FOR_TO
31384: IFFALSE 31420
// if value = array [ i ] then
31386: LD_VAR 0 2
31390: PUSH
31391: LD_VAR 0 1
31395: PUSH
31396: LD_VAR 0 4
31400: ARRAY
31401: EQUAL
31402: IFFALSE 31418
// begin result := i ;
31404: LD_ADDR_VAR 0 3
31408: PUSH
31409: LD_VAR 0 4
31413: ST_TO_ADDR
// exit ;
31414: POP
31415: POP
31416: GO 31422
// end ;
31418: GO 31383
31420: POP
31421: POP
// end ;
31422: LD_VAR 0 3
31426: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
31427: LD_INT 0
31429: PPUSH
// vc_chassis := chassis ;
31430: LD_ADDR_OWVAR 37
31434: PUSH
31435: LD_VAR 0 1
31439: ST_TO_ADDR
// vc_engine := engine ;
31440: LD_ADDR_OWVAR 39
31444: PUSH
31445: LD_VAR 0 2
31449: ST_TO_ADDR
// vc_control := control ;
31450: LD_ADDR_OWVAR 38
31454: PUSH
31455: LD_VAR 0 3
31459: ST_TO_ADDR
// vc_weapon := weapon ;
31460: LD_ADDR_OWVAR 40
31464: PUSH
31465: LD_VAR 0 4
31469: ST_TO_ADDR
// vc_fuel_battery := fuel ;
31470: LD_ADDR_OWVAR 41
31474: PUSH
31475: LD_VAR 0 5
31479: ST_TO_ADDR
// end ;
31480: LD_VAR 0 6
31484: RET
// export function WantPlant ( unit ) ; var task ; begin
31485: LD_INT 0
31487: PPUSH
31488: PPUSH
// result := false ;
31489: LD_ADDR_VAR 0 2
31493: PUSH
31494: LD_INT 0
31496: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
31497: LD_ADDR_VAR 0 3
31501: PUSH
31502: LD_VAR 0 1
31506: PPUSH
31507: CALL_OW 437
31511: ST_TO_ADDR
// if task then
31512: LD_VAR 0 3
31516: IFFALSE 31544
// if task [ 1 ] [ 1 ] = p then
31518: LD_VAR 0 3
31522: PUSH
31523: LD_INT 1
31525: ARRAY
31526: PUSH
31527: LD_INT 1
31529: ARRAY
31530: PUSH
31531: LD_STRING p
31533: EQUAL
31534: IFFALSE 31544
// result := true ;
31536: LD_ADDR_VAR 0 2
31540: PUSH
31541: LD_INT 1
31543: ST_TO_ADDR
// end ;
31544: LD_VAR 0 2
31548: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
31549: LD_INT 0
31551: PPUSH
31552: PPUSH
31553: PPUSH
31554: PPUSH
// if pos < 1 then
31555: LD_VAR 0 2
31559: PUSH
31560: LD_INT 1
31562: LESS
31563: IFFALSE 31567
// exit ;
31565: GO 31870
// if pos = 1 then
31567: LD_VAR 0 2
31571: PUSH
31572: LD_INT 1
31574: EQUAL
31575: IFFALSE 31608
// result := Replace ( arr , pos [ 1 ] , value ) else
31577: LD_ADDR_VAR 0 4
31581: PUSH
31582: LD_VAR 0 1
31586: PPUSH
31587: LD_VAR 0 2
31591: PUSH
31592: LD_INT 1
31594: ARRAY
31595: PPUSH
31596: LD_VAR 0 3
31600: PPUSH
31601: CALL_OW 1
31605: ST_TO_ADDR
31606: GO 31870
// begin tmp := arr ;
31608: LD_ADDR_VAR 0 6
31612: PUSH
31613: LD_VAR 0 1
31617: ST_TO_ADDR
// s_arr := [ tmp ] ;
31618: LD_ADDR_VAR 0 7
31622: PUSH
31623: LD_VAR 0 6
31627: PUSH
31628: EMPTY
31629: LIST
31630: ST_TO_ADDR
// for i = 1 to pos - 1 do
31631: LD_ADDR_VAR 0 5
31635: PUSH
31636: DOUBLE
31637: LD_INT 1
31639: DEC
31640: ST_TO_ADDR
31641: LD_VAR 0 2
31645: PUSH
31646: LD_INT 1
31648: MINUS
31649: PUSH
31650: FOR_TO
31651: IFFALSE 31696
// begin tmp := tmp [ pos [ i ] ] ;
31653: LD_ADDR_VAR 0 6
31657: PUSH
31658: LD_VAR 0 6
31662: PUSH
31663: LD_VAR 0 2
31667: PUSH
31668: LD_VAR 0 5
31672: ARRAY
31673: ARRAY
31674: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
31675: LD_ADDR_VAR 0 7
31679: PUSH
31680: LD_VAR 0 7
31684: PUSH
31685: LD_VAR 0 6
31689: PUSH
31690: EMPTY
31691: LIST
31692: ADD
31693: ST_TO_ADDR
// end ;
31694: GO 31650
31696: POP
31697: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
31698: LD_ADDR_VAR 0 6
31702: PUSH
31703: LD_VAR 0 6
31707: PPUSH
31708: LD_VAR 0 2
31712: PUSH
31713: LD_VAR 0 2
31717: ARRAY
31718: PPUSH
31719: LD_VAR 0 3
31723: PPUSH
31724: CALL_OW 1
31728: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
31729: LD_ADDR_VAR 0 7
31733: PUSH
31734: LD_VAR 0 7
31738: PPUSH
31739: LD_VAR 0 7
31743: PPUSH
31744: LD_VAR 0 6
31748: PPUSH
31749: CALL_OW 1
31753: ST_TO_ADDR
// for i = s_arr downto 2 do
31754: LD_ADDR_VAR 0 5
31758: PUSH
31759: DOUBLE
31760: LD_VAR 0 7
31764: INC
31765: ST_TO_ADDR
31766: LD_INT 2
31768: PUSH
31769: FOR_DOWNTO
31770: IFFALSE 31854
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
31772: LD_ADDR_VAR 0 6
31776: PUSH
31777: LD_VAR 0 7
31781: PUSH
31782: LD_VAR 0 5
31786: PUSH
31787: LD_INT 1
31789: MINUS
31790: ARRAY
31791: PPUSH
31792: LD_VAR 0 2
31796: PUSH
31797: LD_VAR 0 5
31801: PUSH
31802: LD_INT 1
31804: MINUS
31805: ARRAY
31806: PPUSH
31807: LD_VAR 0 7
31811: PUSH
31812: LD_VAR 0 5
31816: ARRAY
31817: PPUSH
31818: CALL_OW 1
31822: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
31823: LD_ADDR_VAR 0 7
31827: PUSH
31828: LD_VAR 0 7
31832: PPUSH
31833: LD_VAR 0 5
31837: PUSH
31838: LD_INT 1
31840: MINUS
31841: PPUSH
31842: LD_VAR 0 6
31846: PPUSH
31847: CALL_OW 1
31851: ST_TO_ADDR
// end ;
31852: GO 31769
31854: POP
31855: POP
// result := s_arr [ 1 ] ;
31856: LD_ADDR_VAR 0 4
31860: PUSH
31861: LD_VAR 0 7
31865: PUSH
31866: LD_INT 1
31868: ARRAY
31869: ST_TO_ADDR
// end ; end ;
31870: LD_VAR 0 4
31874: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
31875: LD_INT 0
31877: PPUSH
31878: PPUSH
// if not list then
31879: LD_VAR 0 1
31883: NOT
31884: IFFALSE 31888
// exit ;
31886: GO 31979
// i := list [ pos1 ] ;
31888: LD_ADDR_VAR 0 5
31892: PUSH
31893: LD_VAR 0 1
31897: PUSH
31898: LD_VAR 0 2
31902: ARRAY
31903: ST_TO_ADDR
// if not i then
31904: LD_VAR 0 5
31908: NOT
31909: IFFALSE 31913
// exit ;
31911: GO 31979
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
31913: LD_ADDR_VAR 0 1
31917: PUSH
31918: LD_VAR 0 1
31922: PPUSH
31923: LD_VAR 0 2
31927: PPUSH
31928: LD_VAR 0 1
31932: PUSH
31933: LD_VAR 0 3
31937: ARRAY
31938: PPUSH
31939: CALL_OW 1
31943: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
31944: LD_ADDR_VAR 0 1
31948: PUSH
31949: LD_VAR 0 1
31953: PPUSH
31954: LD_VAR 0 3
31958: PPUSH
31959: LD_VAR 0 5
31963: PPUSH
31964: CALL_OW 1
31968: ST_TO_ADDR
// result := list ;
31969: LD_ADDR_VAR 0 4
31973: PUSH
31974: LD_VAR 0 1
31978: ST_TO_ADDR
// end ;
31979: LD_VAR 0 4
31983: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
31984: LD_INT 0
31986: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
31987: LD_ADDR_VAR 0 5
31991: PUSH
31992: LD_VAR 0 1
31996: PPUSH
31997: CALL_OW 250
32001: PPUSH
32002: LD_VAR 0 1
32006: PPUSH
32007: CALL_OW 251
32011: PPUSH
32012: LD_VAR 0 2
32016: PPUSH
32017: LD_VAR 0 3
32021: PPUSH
32022: LD_VAR 0 4
32026: PPUSH
32027: CALL 32037 0 5
32031: ST_TO_ADDR
// end ;
32032: LD_VAR 0 5
32036: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
32037: LD_INT 0
32039: PPUSH
32040: PPUSH
32041: PPUSH
32042: PPUSH
// if not list then
32043: LD_VAR 0 3
32047: NOT
32048: IFFALSE 32052
// exit ;
32050: GO 32440
// result := [ ] ;
32052: LD_ADDR_VAR 0 6
32056: PUSH
32057: EMPTY
32058: ST_TO_ADDR
// for i in list do
32059: LD_ADDR_VAR 0 7
32063: PUSH
32064: LD_VAR 0 3
32068: PUSH
32069: FOR_IN
32070: IFFALSE 32272
// begin tmp := GetDistUnitXY ( i , x , y ) ;
32072: LD_ADDR_VAR 0 9
32076: PUSH
32077: LD_VAR 0 7
32081: PPUSH
32082: LD_VAR 0 1
32086: PPUSH
32087: LD_VAR 0 2
32091: PPUSH
32092: CALL_OW 297
32096: ST_TO_ADDR
// if not result then
32097: LD_VAR 0 6
32101: NOT
32102: IFFALSE 32128
// result := [ [ i , tmp ] ] else
32104: LD_ADDR_VAR 0 6
32108: PUSH
32109: LD_VAR 0 7
32113: PUSH
32114: LD_VAR 0 9
32118: PUSH
32119: EMPTY
32120: LIST
32121: LIST
32122: PUSH
32123: EMPTY
32124: LIST
32125: ST_TO_ADDR
32126: GO 32270
// begin if result [ result ] [ 2 ] < tmp then
32128: LD_VAR 0 6
32132: PUSH
32133: LD_VAR 0 6
32137: ARRAY
32138: PUSH
32139: LD_INT 2
32141: ARRAY
32142: PUSH
32143: LD_VAR 0 9
32147: LESS
32148: IFFALSE 32190
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
32150: LD_ADDR_VAR 0 6
32154: PUSH
32155: LD_VAR 0 6
32159: PPUSH
32160: LD_VAR 0 6
32164: PUSH
32165: LD_INT 1
32167: PLUS
32168: PPUSH
32169: LD_VAR 0 7
32173: PUSH
32174: LD_VAR 0 9
32178: PUSH
32179: EMPTY
32180: LIST
32181: LIST
32182: PPUSH
32183: CALL_OW 2
32187: ST_TO_ADDR
32188: GO 32270
// for j = 1 to result do
32190: LD_ADDR_VAR 0 8
32194: PUSH
32195: DOUBLE
32196: LD_INT 1
32198: DEC
32199: ST_TO_ADDR
32200: LD_VAR 0 6
32204: PUSH
32205: FOR_TO
32206: IFFALSE 32268
// begin if tmp < result [ j ] [ 2 ] then
32208: LD_VAR 0 9
32212: PUSH
32213: LD_VAR 0 6
32217: PUSH
32218: LD_VAR 0 8
32222: ARRAY
32223: PUSH
32224: LD_INT 2
32226: ARRAY
32227: LESS
32228: IFFALSE 32266
// begin result := Insert ( result , j , [ i , tmp ] ) ;
32230: LD_ADDR_VAR 0 6
32234: PUSH
32235: LD_VAR 0 6
32239: PPUSH
32240: LD_VAR 0 8
32244: PPUSH
32245: LD_VAR 0 7
32249: PUSH
32250: LD_VAR 0 9
32254: PUSH
32255: EMPTY
32256: LIST
32257: LIST
32258: PPUSH
32259: CALL_OW 2
32263: ST_TO_ADDR
// break ;
32264: GO 32268
// end ; end ;
32266: GO 32205
32268: POP
32269: POP
// end ; end ;
32270: GO 32069
32272: POP
32273: POP
// if result and not asc then
32274: LD_VAR 0 6
32278: PUSH
32279: LD_VAR 0 4
32283: NOT
32284: AND
32285: IFFALSE 32360
// begin tmp := result ;
32287: LD_ADDR_VAR 0 9
32291: PUSH
32292: LD_VAR 0 6
32296: ST_TO_ADDR
// for i = tmp downto 1 do
32297: LD_ADDR_VAR 0 7
32301: PUSH
32302: DOUBLE
32303: LD_VAR 0 9
32307: INC
32308: ST_TO_ADDR
32309: LD_INT 1
32311: PUSH
32312: FOR_DOWNTO
32313: IFFALSE 32358
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
32315: LD_ADDR_VAR 0 6
32319: PUSH
32320: LD_VAR 0 6
32324: PPUSH
32325: LD_VAR 0 9
32329: PUSH
32330: LD_VAR 0 7
32334: MINUS
32335: PUSH
32336: LD_INT 1
32338: PLUS
32339: PPUSH
32340: LD_VAR 0 9
32344: PUSH
32345: LD_VAR 0 7
32349: ARRAY
32350: PPUSH
32351: CALL_OW 1
32355: ST_TO_ADDR
32356: GO 32312
32358: POP
32359: POP
// end ; tmp := [ ] ;
32360: LD_ADDR_VAR 0 9
32364: PUSH
32365: EMPTY
32366: ST_TO_ADDR
// if mode then
32367: LD_VAR 0 5
32371: IFFALSE 32440
// begin for i = 1 to result do
32373: LD_ADDR_VAR 0 7
32377: PUSH
32378: DOUBLE
32379: LD_INT 1
32381: DEC
32382: ST_TO_ADDR
32383: LD_VAR 0 6
32387: PUSH
32388: FOR_TO
32389: IFFALSE 32428
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
32391: LD_ADDR_VAR 0 9
32395: PUSH
32396: LD_VAR 0 9
32400: PPUSH
32401: LD_VAR 0 7
32405: PPUSH
32406: LD_VAR 0 6
32410: PUSH
32411: LD_VAR 0 7
32415: ARRAY
32416: PUSH
32417: LD_INT 1
32419: ARRAY
32420: PPUSH
32421: CALL_OW 1
32425: ST_TO_ADDR
32426: GO 32388
32428: POP
32429: POP
// result := tmp ;
32430: LD_ADDR_VAR 0 6
32434: PUSH
32435: LD_VAR 0 9
32439: ST_TO_ADDR
// end ; end ;
32440: LD_VAR 0 6
32444: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
32445: LD_INT 0
32447: PPUSH
32448: PPUSH
32449: PPUSH
32450: PPUSH
32451: PPUSH
32452: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
32453: LD_ADDR_VAR 0 5
32457: PUSH
32458: LD_INT 0
32460: PUSH
32461: LD_INT 0
32463: PUSH
32464: LD_INT 0
32466: PUSH
32467: EMPTY
32468: PUSH
32469: EMPTY
32470: LIST
32471: LIST
32472: LIST
32473: LIST
32474: ST_TO_ADDR
// if not x or not y then
32475: LD_VAR 0 2
32479: NOT
32480: PUSH
32481: LD_VAR 0 3
32485: NOT
32486: OR
32487: IFFALSE 32491
// exit ;
32489: GO 34143
// if not range then
32491: LD_VAR 0 4
32495: NOT
32496: IFFALSE 32506
// range := 10 ;
32498: LD_ADDR_VAR 0 4
32502: PUSH
32503: LD_INT 10
32505: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32506: LD_ADDR_VAR 0 8
32510: PUSH
32511: LD_INT 81
32513: PUSH
32514: LD_VAR 0 1
32518: PUSH
32519: EMPTY
32520: LIST
32521: LIST
32522: PUSH
32523: LD_INT 92
32525: PUSH
32526: LD_VAR 0 2
32530: PUSH
32531: LD_VAR 0 3
32535: PUSH
32536: LD_VAR 0 4
32540: PUSH
32541: EMPTY
32542: LIST
32543: LIST
32544: LIST
32545: LIST
32546: PUSH
32547: LD_INT 3
32549: PUSH
32550: LD_INT 21
32552: PUSH
32553: LD_INT 3
32555: PUSH
32556: EMPTY
32557: LIST
32558: LIST
32559: PUSH
32560: EMPTY
32561: LIST
32562: LIST
32563: PUSH
32564: EMPTY
32565: LIST
32566: LIST
32567: LIST
32568: PPUSH
32569: CALL_OW 69
32573: ST_TO_ADDR
// if not tmp then
32574: LD_VAR 0 8
32578: NOT
32579: IFFALSE 32583
// exit ;
32581: GO 34143
// for i in tmp do
32583: LD_ADDR_VAR 0 6
32587: PUSH
32588: LD_VAR 0 8
32592: PUSH
32593: FOR_IN
32594: IFFALSE 34118
// begin points := [ 0 , 0 , 0 ] ;
32596: LD_ADDR_VAR 0 9
32600: PUSH
32601: LD_INT 0
32603: PUSH
32604: LD_INT 0
32606: PUSH
32607: LD_INT 0
32609: PUSH
32610: EMPTY
32611: LIST
32612: LIST
32613: LIST
32614: ST_TO_ADDR
// bpoints := 1 ;
32615: LD_ADDR_VAR 0 10
32619: PUSH
32620: LD_INT 1
32622: ST_TO_ADDR
// case GetType ( i ) of unit_human :
32623: LD_VAR 0 6
32627: PPUSH
32628: CALL_OW 247
32632: PUSH
32633: LD_INT 1
32635: DOUBLE
32636: EQUAL
32637: IFTRUE 32641
32639: GO 33219
32641: POP
// begin if GetClass ( i ) = 1 then
32642: LD_VAR 0 6
32646: PPUSH
32647: CALL_OW 257
32651: PUSH
32652: LD_INT 1
32654: EQUAL
32655: IFFALSE 32676
// points := [ 10 , 5 , 3 ] ;
32657: LD_ADDR_VAR 0 9
32661: PUSH
32662: LD_INT 10
32664: PUSH
32665: LD_INT 5
32667: PUSH
32668: LD_INT 3
32670: PUSH
32671: EMPTY
32672: LIST
32673: LIST
32674: LIST
32675: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
32676: LD_VAR 0 6
32680: PPUSH
32681: CALL_OW 257
32685: PUSH
32686: LD_INT 2
32688: PUSH
32689: LD_INT 3
32691: PUSH
32692: LD_INT 4
32694: PUSH
32695: EMPTY
32696: LIST
32697: LIST
32698: LIST
32699: IN
32700: IFFALSE 32721
// points := [ 3 , 2 , 1 ] ;
32702: LD_ADDR_VAR 0 9
32706: PUSH
32707: LD_INT 3
32709: PUSH
32710: LD_INT 2
32712: PUSH
32713: LD_INT 1
32715: PUSH
32716: EMPTY
32717: LIST
32718: LIST
32719: LIST
32720: ST_TO_ADDR
// if GetClass ( i ) = 5 then
32721: LD_VAR 0 6
32725: PPUSH
32726: CALL_OW 257
32730: PUSH
32731: LD_INT 5
32733: EQUAL
32734: IFFALSE 32755
// points := [ 130 , 5 , 2 ] ;
32736: LD_ADDR_VAR 0 9
32740: PUSH
32741: LD_INT 130
32743: PUSH
32744: LD_INT 5
32746: PUSH
32747: LD_INT 2
32749: PUSH
32750: EMPTY
32751: LIST
32752: LIST
32753: LIST
32754: ST_TO_ADDR
// if GetClass ( i ) = 8 then
32755: LD_VAR 0 6
32759: PPUSH
32760: CALL_OW 257
32764: PUSH
32765: LD_INT 8
32767: EQUAL
32768: IFFALSE 32789
// points := [ 35 , 35 , 30 ] ;
32770: LD_ADDR_VAR 0 9
32774: PUSH
32775: LD_INT 35
32777: PUSH
32778: LD_INT 35
32780: PUSH
32781: LD_INT 30
32783: PUSH
32784: EMPTY
32785: LIST
32786: LIST
32787: LIST
32788: ST_TO_ADDR
// if GetClass ( i ) = 9 then
32789: LD_VAR 0 6
32793: PPUSH
32794: CALL_OW 257
32798: PUSH
32799: LD_INT 9
32801: EQUAL
32802: IFFALSE 32823
// points := [ 20 , 55 , 40 ] ;
32804: LD_ADDR_VAR 0 9
32808: PUSH
32809: LD_INT 20
32811: PUSH
32812: LD_INT 55
32814: PUSH
32815: LD_INT 40
32817: PUSH
32818: EMPTY
32819: LIST
32820: LIST
32821: LIST
32822: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
32823: LD_VAR 0 6
32827: PPUSH
32828: CALL_OW 257
32832: PUSH
32833: LD_INT 12
32835: PUSH
32836: LD_INT 16
32838: PUSH
32839: EMPTY
32840: LIST
32841: LIST
32842: IN
32843: IFFALSE 32864
// points := [ 5 , 3 , 2 ] ;
32845: LD_ADDR_VAR 0 9
32849: PUSH
32850: LD_INT 5
32852: PUSH
32853: LD_INT 3
32855: PUSH
32856: LD_INT 2
32858: PUSH
32859: EMPTY
32860: LIST
32861: LIST
32862: LIST
32863: ST_TO_ADDR
// if GetClass ( i ) = 17 then
32864: LD_VAR 0 6
32868: PPUSH
32869: CALL_OW 257
32873: PUSH
32874: LD_INT 17
32876: EQUAL
32877: IFFALSE 32898
// points := [ 100 , 50 , 75 ] ;
32879: LD_ADDR_VAR 0 9
32883: PUSH
32884: LD_INT 100
32886: PUSH
32887: LD_INT 50
32889: PUSH
32890: LD_INT 75
32892: PUSH
32893: EMPTY
32894: LIST
32895: LIST
32896: LIST
32897: ST_TO_ADDR
// if GetClass ( i ) = 15 then
32898: LD_VAR 0 6
32902: PPUSH
32903: CALL_OW 257
32907: PUSH
32908: LD_INT 15
32910: EQUAL
32911: IFFALSE 32932
// points := [ 10 , 5 , 3 ] ;
32913: LD_ADDR_VAR 0 9
32917: PUSH
32918: LD_INT 10
32920: PUSH
32921: LD_INT 5
32923: PUSH
32924: LD_INT 3
32926: PUSH
32927: EMPTY
32928: LIST
32929: LIST
32930: LIST
32931: ST_TO_ADDR
// if GetClass ( i ) = 14 then
32932: LD_VAR 0 6
32936: PPUSH
32937: CALL_OW 257
32941: PUSH
32942: LD_INT 14
32944: EQUAL
32945: IFFALSE 32966
// points := [ 10 , 0 , 0 ] ;
32947: LD_ADDR_VAR 0 9
32951: PUSH
32952: LD_INT 10
32954: PUSH
32955: LD_INT 0
32957: PUSH
32958: LD_INT 0
32960: PUSH
32961: EMPTY
32962: LIST
32963: LIST
32964: LIST
32965: ST_TO_ADDR
// if GetClass ( i ) = 11 then
32966: LD_VAR 0 6
32970: PPUSH
32971: CALL_OW 257
32975: PUSH
32976: LD_INT 11
32978: EQUAL
32979: IFFALSE 33000
// points := [ 30 , 10 , 5 ] ;
32981: LD_ADDR_VAR 0 9
32985: PUSH
32986: LD_INT 30
32988: PUSH
32989: LD_INT 10
32991: PUSH
32992: LD_INT 5
32994: PUSH
32995: EMPTY
32996: LIST
32997: LIST
32998: LIST
32999: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
33000: LD_VAR 0 1
33004: PPUSH
33005: LD_INT 5
33007: PPUSH
33008: CALL_OW 321
33012: PUSH
33013: LD_INT 2
33015: EQUAL
33016: IFFALSE 33033
// bpoints := bpoints * 1.8 ;
33018: LD_ADDR_VAR 0 10
33022: PUSH
33023: LD_VAR 0 10
33027: PUSH
33028: LD_REAL  1.80000000000000E+0000
33031: MUL
33032: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
33033: LD_VAR 0 6
33037: PPUSH
33038: CALL_OW 257
33042: PUSH
33043: LD_INT 1
33045: PUSH
33046: LD_INT 2
33048: PUSH
33049: LD_INT 3
33051: PUSH
33052: LD_INT 4
33054: PUSH
33055: EMPTY
33056: LIST
33057: LIST
33058: LIST
33059: LIST
33060: IN
33061: PUSH
33062: LD_VAR 0 1
33066: PPUSH
33067: LD_INT 51
33069: PPUSH
33070: CALL_OW 321
33074: PUSH
33075: LD_INT 2
33077: EQUAL
33078: AND
33079: IFFALSE 33096
// bpoints := bpoints * 1.2 ;
33081: LD_ADDR_VAR 0 10
33085: PUSH
33086: LD_VAR 0 10
33090: PUSH
33091: LD_REAL  1.20000000000000E+0000
33094: MUL
33095: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
33096: LD_VAR 0 6
33100: PPUSH
33101: CALL_OW 257
33105: PUSH
33106: LD_INT 5
33108: PUSH
33109: LD_INT 7
33111: PUSH
33112: LD_INT 9
33114: PUSH
33115: EMPTY
33116: LIST
33117: LIST
33118: LIST
33119: IN
33120: PUSH
33121: LD_VAR 0 1
33125: PPUSH
33126: LD_INT 52
33128: PPUSH
33129: CALL_OW 321
33133: PUSH
33134: LD_INT 2
33136: EQUAL
33137: AND
33138: IFFALSE 33155
// bpoints := bpoints * 1.5 ;
33140: LD_ADDR_VAR 0 10
33144: PUSH
33145: LD_VAR 0 10
33149: PUSH
33150: LD_REAL  1.50000000000000E+0000
33153: MUL
33154: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
33155: LD_VAR 0 1
33159: PPUSH
33160: LD_INT 66
33162: PPUSH
33163: CALL_OW 321
33167: PUSH
33168: LD_INT 2
33170: EQUAL
33171: IFFALSE 33188
// bpoints := bpoints * 1.1 ;
33173: LD_ADDR_VAR 0 10
33177: PUSH
33178: LD_VAR 0 10
33182: PUSH
33183: LD_REAL  1.10000000000000E+0000
33186: MUL
33187: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
33188: LD_ADDR_VAR 0 10
33192: PUSH
33193: LD_VAR 0 10
33197: PUSH
33198: LD_VAR 0 6
33202: PPUSH
33203: LD_INT 1
33205: PPUSH
33206: CALL_OW 259
33210: PUSH
33211: LD_REAL  1.15000000000000E+0000
33214: MUL
33215: MUL
33216: ST_TO_ADDR
// end ; unit_vehicle :
33217: GO 34047
33219: LD_INT 2
33221: DOUBLE
33222: EQUAL
33223: IFTRUE 33227
33225: GO 34035
33227: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
33228: LD_VAR 0 6
33232: PPUSH
33233: CALL_OW 264
33237: PUSH
33238: LD_INT 2
33240: PUSH
33241: LD_INT 42
33243: PUSH
33244: LD_INT 24
33246: PUSH
33247: EMPTY
33248: LIST
33249: LIST
33250: LIST
33251: IN
33252: IFFALSE 33273
// points := [ 25 , 5 , 3 ] ;
33254: LD_ADDR_VAR 0 9
33258: PUSH
33259: LD_INT 25
33261: PUSH
33262: LD_INT 5
33264: PUSH
33265: LD_INT 3
33267: PUSH
33268: EMPTY
33269: LIST
33270: LIST
33271: LIST
33272: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
33273: LD_VAR 0 6
33277: PPUSH
33278: CALL_OW 264
33282: PUSH
33283: LD_INT 4
33285: PUSH
33286: LD_INT 43
33288: PUSH
33289: LD_INT 25
33291: PUSH
33292: EMPTY
33293: LIST
33294: LIST
33295: LIST
33296: IN
33297: IFFALSE 33318
// points := [ 40 , 15 , 5 ] ;
33299: LD_ADDR_VAR 0 9
33303: PUSH
33304: LD_INT 40
33306: PUSH
33307: LD_INT 15
33309: PUSH
33310: LD_INT 5
33312: PUSH
33313: EMPTY
33314: LIST
33315: LIST
33316: LIST
33317: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
33318: LD_VAR 0 6
33322: PPUSH
33323: CALL_OW 264
33327: PUSH
33328: LD_INT 3
33330: PUSH
33331: LD_INT 23
33333: PUSH
33334: EMPTY
33335: LIST
33336: LIST
33337: IN
33338: IFFALSE 33359
// points := [ 7 , 25 , 8 ] ;
33340: LD_ADDR_VAR 0 9
33344: PUSH
33345: LD_INT 7
33347: PUSH
33348: LD_INT 25
33350: PUSH
33351: LD_INT 8
33353: PUSH
33354: EMPTY
33355: LIST
33356: LIST
33357: LIST
33358: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
33359: LD_VAR 0 6
33363: PPUSH
33364: CALL_OW 264
33368: PUSH
33369: LD_INT 5
33371: PUSH
33372: LD_INT 27
33374: PUSH
33375: LD_INT 44
33377: PUSH
33378: EMPTY
33379: LIST
33380: LIST
33381: LIST
33382: IN
33383: IFFALSE 33404
// points := [ 14 , 50 , 16 ] ;
33385: LD_ADDR_VAR 0 9
33389: PUSH
33390: LD_INT 14
33392: PUSH
33393: LD_INT 50
33395: PUSH
33396: LD_INT 16
33398: PUSH
33399: EMPTY
33400: LIST
33401: LIST
33402: LIST
33403: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
33404: LD_VAR 0 6
33408: PPUSH
33409: CALL_OW 264
33413: PUSH
33414: LD_INT 6
33416: PUSH
33417: LD_INT 46
33419: PUSH
33420: EMPTY
33421: LIST
33422: LIST
33423: IN
33424: IFFALSE 33445
// points := [ 32 , 120 , 70 ] ;
33426: LD_ADDR_VAR 0 9
33430: PUSH
33431: LD_INT 32
33433: PUSH
33434: LD_INT 120
33436: PUSH
33437: LD_INT 70
33439: PUSH
33440: EMPTY
33441: LIST
33442: LIST
33443: LIST
33444: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
33445: LD_VAR 0 6
33449: PPUSH
33450: CALL_OW 264
33454: PUSH
33455: LD_INT 7
33457: PUSH
33458: LD_INT 28
33460: PUSH
33461: LD_INT 45
33463: PUSH
33464: LD_EXP 57
33468: PUSH
33469: EMPTY
33470: LIST
33471: LIST
33472: LIST
33473: LIST
33474: IN
33475: IFFALSE 33496
// points := [ 35 , 20 , 45 ] ;
33477: LD_ADDR_VAR 0 9
33481: PUSH
33482: LD_INT 35
33484: PUSH
33485: LD_INT 20
33487: PUSH
33488: LD_INT 45
33490: PUSH
33491: EMPTY
33492: LIST
33493: LIST
33494: LIST
33495: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
33496: LD_VAR 0 6
33500: PPUSH
33501: CALL_OW 264
33505: PUSH
33506: LD_INT 47
33508: PUSH
33509: EMPTY
33510: LIST
33511: IN
33512: IFFALSE 33533
// points := [ 67 , 45 , 75 ] ;
33514: LD_ADDR_VAR 0 9
33518: PUSH
33519: LD_INT 67
33521: PUSH
33522: LD_INT 45
33524: PUSH
33525: LD_INT 75
33527: PUSH
33528: EMPTY
33529: LIST
33530: LIST
33531: LIST
33532: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
33533: LD_VAR 0 6
33537: PPUSH
33538: CALL_OW 264
33542: PUSH
33543: LD_INT 26
33545: PUSH
33546: EMPTY
33547: LIST
33548: IN
33549: IFFALSE 33570
// points := [ 120 , 30 , 80 ] ;
33551: LD_ADDR_VAR 0 9
33555: PUSH
33556: LD_INT 120
33558: PUSH
33559: LD_INT 30
33561: PUSH
33562: LD_INT 80
33564: PUSH
33565: EMPTY
33566: LIST
33567: LIST
33568: LIST
33569: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
33570: LD_VAR 0 6
33574: PPUSH
33575: CALL_OW 264
33579: PUSH
33580: LD_INT 22
33582: PUSH
33583: EMPTY
33584: LIST
33585: IN
33586: IFFALSE 33607
// points := [ 40 , 1 , 1 ] ;
33588: LD_ADDR_VAR 0 9
33592: PUSH
33593: LD_INT 40
33595: PUSH
33596: LD_INT 1
33598: PUSH
33599: LD_INT 1
33601: PUSH
33602: EMPTY
33603: LIST
33604: LIST
33605: LIST
33606: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
33607: LD_VAR 0 6
33611: PPUSH
33612: CALL_OW 264
33616: PUSH
33617: LD_INT 29
33619: PUSH
33620: EMPTY
33621: LIST
33622: IN
33623: IFFALSE 33644
// points := [ 70 , 200 , 400 ] ;
33625: LD_ADDR_VAR 0 9
33629: PUSH
33630: LD_INT 70
33632: PUSH
33633: LD_INT 200
33635: PUSH
33636: LD_INT 400
33638: PUSH
33639: EMPTY
33640: LIST
33641: LIST
33642: LIST
33643: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
33644: LD_VAR 0 6
33648: PPUSH
33649: CALL_OW 264
33653: PUSH
33654: LD_INT 14
33656: PUSH
33657: LD_INT 53
33659: PUSH
33660: EMPTY
33661: LIST
33662: LIST
33663: IN
33664: IFFALSE 33685
// points := [ 40 , 10 , 20 ] ;
33666: LD_ADDR_VAR 0 9
33670: PUSH
33671: LD_INT 40
33673: PUSH
33674: LD_INT 10
33676: PUSH
33677: LD_INT 20
33679: PUSH
33680: EMPTY
33681: LIST
33682: LIST
33683: LIST
33684: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
33685: LD_VAR 0 6
33689: PPUSH
33690: CALL_OW 264
33694: PUSH
33695: LD_INT 9
33697: PUSH
33698: EMPTY
33699: LIST
33700: IN
33701: IFFALSE 33722
// points := [ 5 , 70 , 20 ] ;
33703: LD_ADDR_VAR 0 9
33707: PUSH
33708: LD_INT 5
33710: PUSH
33711: LD_INT 70
33713: PUSH
33714: LD_INT 20
33716: PUSH
33717: EMPTY
33718: LIST
33719: LIST
33720: LIST
33721: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
33722: LD_VAR 0 6
33726: PPUSH
33727: CALL_OW 264
33731: PUSH
33732: LD_INT 10
33734: PUSH
33735: EMPTY
33736: LIST
33737: IN
33738: IFFALSE 33759
// points := [ 35 , 110 , 70 ] ;
33740: LD_ADDR_VAR 0 9
33744: PUSH
33745: LD_INT 35
33747: PUSH
33748: LD_INT 110
33750: PUSH
33751: LD_INT 70
33753: PUSH
33754: EMPTY
33755: LIST
33756: LIST
33757: LIST
33758: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
33759: LD_VAR 0 6
33763: PPUSH
33764: CALL_OW 265
33768: PUSH
33769: LD_INT 25
33771: EQUAL
33772: IFFALSE 33793
// points := [ 80 , 65 , 100 ] ;
33774: LD_ADDR_VAR 0 9
33778: PUSH
33779: LD_INT 80
33781: PUSH
33782: LD_INT 65
33784: PUSH
33785: LD_INT 100
33787: PUSH
33788: EMPTY
33789: LIST
33790: LIST
33791: LIST
33792: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
33793: LD_VAR 0 6
33797: PPUSH
33798: CALL_OW 263
33802: PUSH
33803: LD_INT 1
33805: EQUAL
33806: IFFALSE 33841
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
33808: LD_ADDR_VAR 0 10
33812: PUSH
33813: LD_VAR 0 10
33817: PUSH
33818: LD_VAR 0 6
33822: PPUSH
33823: CALL_OW 311
33827: PPUSH
33828: LD_INT 3
33830: PPUSH
33831: CALL_OW 259
33835: PUSH
33836: LD_INT 4
33838: MUL
33839: MUL
33840: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
33841: LD_VAR 0 6
33845: PPUSH
33846: CALL_OW 263
33850: PUSH
33851: LD_INT 2
33853: EQUAL
33854: IFFALSE 33905
// begin j := IsControledBy ( i ) ;
33856: LD_ADDR_VAR 0 7
33860: PUSH
33861: LD_VAR 0 6
33865: PPUSH
33866: CALL_OW 312
33870: ST_TO_ADDR
// if j then
33871: LD_VAR 0 7
33875: IFFALSE 33905
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
33877: LD_ADDR_VAR 0 10
33881: PUSH
33882: LD_VAR 0 10
33886: PUSH
33887: LD_VAR 0 7
33891: PPUSH
33892: LD_INT 3
33894: PPUSH
33895: CALL_OW 259
33899: PUSH
33900: LD_INT 3
33902: MUL
33903: MUL
33904: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
33905: LD_VAR 0 6
33909: PPUSH
33910: CALL_OW 264
33914: PUSH
33915: LD_INT 5
33917: PUSH
33918: LD_INT 6
33920: PUSH
33921: LD_INT 46
33923: PUSH
33924: LD_INT 44
33926: PUSH
33927: LD_INT 47
33929: PUSH
33930: LD_INT 45
33932: PUSH
33933: LD_INT 28
33935: PUSH
33936: LD_INT 7
33938: PUSH
33939: LD_INT 27
33941: PUSH
33942: LD_INT 29
33944: PUSH
33945: EMPTY
33946: LIST
33947: LIST
33948: LIST
33949: LIST
33950: LIST
33951: LIST
33952: LIST
33953: LIST
33954: LIST
33955: LIST
33956: IN
33957: PUSH
33958: LD_VAR 0 1
33962: PPUSH
33963: LD_INT 52
33965: PPUSH
33966: CALL_OW 321
33970: PUSH
33971: LD_INT 2
33973: EQUAL
33974: AND
33975: IFFALSE 33992
// bpoints := bpoints * 1.2 ;
33977: LD_ADDR_VAR 0 10
33981: PUSH
33982: LD_VAR 0 10
33986: PUSH
33987: LD_REAL  1.20000000000000E+0000
33990: MUL
33991: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
33992: LD_VAR 0 6
33996: PPUSH
33997: CALL_OW 264
34001: PUSH
34002: LD_INT 6
34004: PUSH
34005: LD_INT 46
34007: PUSH
34008: LD_INT 47
34010: PUSH
34011: EMPTY
34012: LIST
34013: LIST
34014: LIST
34015: IN
34016: IFFALSE 34033
// bpoints := bpoints * 1.2 ;
34018: LD_ADDR_VAR 0 10
34022: PUSH
34023: LD_VAR 0 10
34027: PUSH
34028: LD_REAL  1.20000000000000E+0000
34031: MUL
34032: ST_TO_ADDR
// end ; unit_building :
34033: GO 34047
34035: LD_INT 3
34037: DOUBLE
34038: EQUAL
34039: IFTRUE 34043
34041: GO 34046
34043: POP
// ; end ;
34044: GO 34047
34046: POP
// for j = 1 to 3 do
34047: LD_ADDR_VAR 0 7
34051: PUSH
34052: DOUBLE
34053: LD_INT 1
34055: DEC
34056: ST_TO_ADDR
34057: LD_INT 3
34059: PUSH
34060: FOR_TO
34061: IFFALSE 34114
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
34063: LD_ADDR_VAR 0 5
34067: PUSH
34068: LD_VAR 0 5
34072: PPUSH
34073: LD_VAR 0 7
34077: PPUSH
34078: LD_VAR 0 5
34082: PUSH
34083: LD_VAR 0 7
34087: ARRAY
34088: PUSH
34089: LD_VAR 0 9
34093: PUSH
34094: LD_VAR 0 7
34098: ARRAY
34099: PUSH
34100: LD_VAR 0 10
34104: MUL
34105: PLUS
34106: PPUSH
34107: CALL_OW 1
34111: ST_TO_ADDR
34112: GO 34060
34114: POP
34115: POP
// end ;
34116: GO 32593
34118: POP
34119: POP
// result := Replace ( result , 4 , tmp ) ;
34120: LD_ADDR_VAR 0 5
34124: PUSH
34125: LD_VAR 0 5
34129: PPUSH
34130: LD_INT 4
34132: PPUSH
34133: LD_VAR 0 8
34137: PPUSH
34138: CALL_OW 1
34142: ST_TO_ADDR
// end ;
34143: LD_VAR 0 5
34147: RET
// export function DangerAtRange ( unit , range ) ; begin
34148: LD_INT 0
34150: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
34151: LD_ADDR_VAR 0 3
34155: PUSH
34156: LD_VAR 0 1
34160: PPUSH
34161: CALL_OW 255
34165: PPUSH
34166: LD_VAR 0 1
34170: PPUSH
34171: CALL_OW 250
34175: PPUSH
34176: LD_VAR 0 1
34180: PPUSH
34181: CALL_OW 251
34185: PPUSH
34186: LD_VAR 0 2
34190: PPUSH
34191: CALL 32445 0 4
34195: ST_TO_ADDR
// end ;
34196: LD_VAR 0 3
34200: RET
// export function DangerInArea ( side , area ) ; begin
34201: LD_INT 0
34203: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
34204: LD_ADDR_VAR 0 3
34208: PUSH
34209: LD_VAR 0 2
34213: PPUSH
34214: LD_INT 81
34216: PUSH
34217: LD_VAR 0 1
34221: PUSH
34222: EMPTY
34223: LIST
34224: LIST
34225: PPUSH
34226: CALL_OW 70
34230: ST_TO_ADDR
// end ;
34231: LD_VAR 0 3
34235: RET
// export function IsExtension ( b ) ; begin
34236: LD_INT 0
34238: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
34239: LD_ADDR_VAR 0 2
34243: PUSH
34244: LD_VAR 0 1
34248: PUSH
34249: LD_INT 23
34251: PUSH
34252: LD_INT 20
34254: PUSH
34255: LD_INT 22
34257: PUSH
34258: LD_INT 17
34260: PUSH
34261: LD_INT 24
34263: PUSH
34264: LD_INT 21
34266: PUSH
34267: LD_INT 19
34269: PUSH
34270: LD_INT 16
34272: PUSH
34273: LD_INT 25
34275: PUSH
34276: LD_INT 18
34278: PUSH
34279: EMPTY
34280: LIST
34281: LIST
34282: LIST
34283: LIST
34284: LIST
34285: LIST
34286: LIST
34287: LIST
34288: LIST
34289: LIST
34290: IN
34291: ST_TO_ADDR
// end ;
34292: LD_VAR 0 2
34296: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
34297: LD_INT 0
34299: PPUSH
34300: PPUSH
34301: PPUSH
// result := [ ] ;
34302: LD_ADDR_VAR 0 4
34306: PUSH
34307: EMPTY
34308: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
34309: LD_ADDR_VAR 0 5
34313: PUSH
34314: LD_VAR 0 2
34318: PPUSH
34319: LD_INT 21
34321: PUSH
34322: LD_INT 3
34324: PUSH
34325: EMPTY
34326: LIST
34327: LIST
34328: PPUSH
34329: CALL_OW 70
34333: ST_TO_ADDR
// if not tmp then
34334: LD_VAR 0 5
34338: NOT
34339: IFFALSE 34343
// exit ;
34341: GO 34407
// if checkLink then
34343: LD_VAR 0 3
34347: IFFALSE 34397
// begin for i in tmp do
34349: LD_ADDR_VAR 0 6
34353: PUSH
34354: LD_VAR 0 5
34358: PUSH
34359: FOR_IN
34360: IFFALSE 34395
// if GetBase ( i ) <> base then
34362: LD_VAR 0 6
34366: PPUSH
34367: CALL_OW 274
34371: PUSH
34372: LD_VAR 0 1
34376: NONEQUAL
34377: IFFALSE 34393
// ComLinkToBase ( base , i ) ;
34379: LD_VAR 0 1
34383: PPUSH
34384: LD_VAR 0 6
34388: PPUSH
34389: CALL_OW 169
34393: GO 34359
34395: POP
34396: POP
// end ; result := tmp ;
34397: LD_ADDR_VAR 0 4
34401: PUSH
34402: LD_VAR 0 5
34406: ST_TO_ADDR
// end ;
34407: LD_VAR 0 4
34411: RET
// export function ComComplete ( units , b ) ; var i ; begin
34412: LD_INT 0
34414: PPUSH
34415: PPUSH
// if not units then
34416: LD_VAR 0 1
34420: NOT
34421: IFFALSE 34425
// exit ;
34423: GO 34515
// for i in units do
34425: LD_ADDR_VAR 0 4
34429: PUSH
34430: LD_VAR 0 1
34434: PUSH
34435: FOR_IN
34436: IFFALSE 34513
// if BuildingStatus ( b ) = bs_build then
34438: LD_VAR 0 2
34442: PPUSH
34443: CALL_OW 461
34447: PUSH
34448: LD_INT 1
34450: EQUAL
34451: IFFALSE 34511
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
34453: LD_VAR 0 4
34457: PPUSH
34458: LD_STRING h
34460: PUSH
34461: LD_VAR 0 2
34465: PPUSH
34466: CALL_OW 250
34470: PUSH
34471: LD_VAR 0 2
34475: PPUSH
34476: CALL_OW 251
34480: PUSH
34481: LD_VAR 0 2
34485: PUSH
34486: LD_INT 0
34488: PUSH
34489: LD_INT 0
34491: PUSH
34492: LD_INT 0
34494: PUSH
34495: EMPTY
34496: LIST
34497: LIST
34498: LIST
34499: LIST
34500: LIST
34501: LIST
34502: LIST
34503: PUSH
34504: EMPTY
34505: LIST
34506: PPUSH
34507: CALL_OW 446
34511: GO 34435
34513: POP
34514: POP
// end ;
34515: LD_VAR 0 3
34519: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
34520: LD_INT 0
34522: PPUSH
34523: PPUSH
34524: PPUSH
34525: PPUSH
34526: PPUSH
34527: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
34528: LD_VAR 0 1
34532: NOT
34533: PUSH
34534: LD_VAR 0 1
34538: PPUSH
34539: CALL_OW 263
34543: PUSH
34544: LD_INT 2
34546: NONEQUAL
34547: OR
34548: IFFALSE 34552
// exit ;
34550: GO 34868
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
34552: LD_ADDR_VAR 0 6
34556: PUSH
34557: LD_INT 22
34559: PUSH
34560: LD_VAR 0 1
34564: PPUSH
34565: CALL_OW 255
34569: PUSH
34570: EMPTY
34571: LIST
34572: LIST
34573: PUSH
34574: LD_INT 2
34576: PUSH
34577: LD_INT 30
34579: PUSH
34580: LD_INT 36
34582: PUSH
34583: EMPTY
34584: LIST
34585: LIST
34586: PUSH
34587: LD_INT 34
34589: PUSH
34590: LD_INT 31
34592: PUSH
34593: EMPTY
34594: LIST
34595: LIST
34596: PUSH
34597: EMPTY
34598: LIST
34599: LIST
34600: LIST
34601: PUSH
34602: EMPTY
34603: LIST
34604: LIST
34605: PPUSH
34606: CALL_OW 69
34610: ST_TO_ADDR
// if not tmp then
34611: LD_VAR 0 6
34615: NOT
34616: IFFALSE 34620
// exit ;
34618: GO 34868
// result := [ ] ;
34620: LD_ADDR_VAR 0 2
34624: PUSH
34625: EMPTY
34626: ST_TO_ADDR
// for i in tmp do
34627: LD_ADDR_VAR 0 3
34631: PUSH
34632: LD_VAR 0 6
34636: PUSH
34637: FOR_IN
34638: IFFALSE 34709
// begin t := UnitsInside ( i ) ;
34640: LD_ADDR_VAR 0 4
34644: PUSH
34645: LD_VAR 0 3
34649: PPUSH
34650: CALL_OW 313
34654: ST_TO_ADDR
// if t then
34655: LD_VAR 0 4
34659: IFFALSE 34707
// for j in t do
34661: LD_ADDR_VAR 0 7
34665: PUSH
34666: LD_VAR 0 4
34670: PUSH
34671: FOR_IN
34672: IFFALSE 34705
// result := Replace ( result , result + 1 , j ) ;
34674: LD_ADDR_VAR 0 2
34678: PUSH
34679: LD_VAR 0 2
34683: PPUSH
34684: LD_VAR 0 2
34688: PUSH
34689: LD_INT 1
34691: PLUS
34692: PPUSH
34693: LD_VAR 0 7
34697: PPUSH
34698: CALL_OW 1
34702: ST_TO_ADDR
34703: GO 34671
34705: POP
34706: POP
// end ;
34707: GO 34637
34709: POP
34710: POP
// if not result then
34711: LD_VAR 0 2
34715: NOT
34716: IFFALSE 34720
// exit ;
34718: GO 34868
// mech := result [ 1 ] ;
34720: LD_ADDR_VAR 0 5
34724: PUSH
34725: LD_VAR 0 2
34729: PUSH
34730: LD_INT 1
34732: ARRAY
34733: ST_TO_ADDR
// if result > 1 then
34734: LD_VAR 0 2
34738: PUSH
34739: LD_INT 1
34741: GREATER
34742: IFFALSE 34854
// begin for i = 2 to result do
34744: LD_ADDR_VAR 0 3
34748: PUSH
34749: DOUBLE
34750: LD_INT 2
34752: DEC
34753: ST_TO_ADDR
34754: LD_VAR 0 2
34758: PUSH
34759: FOR_TO
34760: IFFALSE 34852
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
34762: LD_ADDR_VAR 0 4
34766: PUSH
34767: LD_VAR 0 2
34771: PUSH
34772: LD_VAR 0 3
34776: ARRAY
34777: PPUSH
34778: LD_INT 3
34780: PPUSH
34781: CALL_OW 259
34785: PUSH
34786: LD_VAR 0 2
34790: PUSH
34791: LD_VAR 0 3
34795: ARRAY
34796: PPUSH
34797: CALL_OW 432
34801: MINUS
34802: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
34803: LD_VAR 0 4
34807: PUSH
34808: LD_VAR 0 5
34812: PPUSH
34813: LD_INT 3
34815: PPUSH
34816: CALL_OW 259
34820: PUSH
34821: LD_VAR 0 5
34825: PPUSH
34826: CALL_OW 432
34830: MINUS
34831: GREATEREQUAL
34832: IFFALSE 34850
// mech := result [ i ] ;
34834: LD_ADDR_VAR 0 5
34838: PUSH
34839: LD_VAR 0 2
34843: PUSH
34844: LD_VAR 0 3
34848: ARRAY
34849: ST_TO_ADDR
// end ;
34850: GO 34759
34852: POP
34853: POP
// end ; ComLinkTo ( vehicle , mech ) ;
34854: LD_VAR 0 1
34858: PPUSH
34859: LD_VAR 0 5
34863: PPUSH
34864: CALL_OW 135
// end ;
34868: LD_VAR 0 2
34872: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
34873: LD_INT 0
34875: PPUSH
34876: PPUSH
34877: PPUSH
34878: PPUSH
34879: PPUSH
34880: PPUSH
34881: PPUSH
34882: PPUSH
34883: PPUSH
34884: PPUSH
34885: PPUSH
34886: PPUSH
34887: PPUSH
// result := [ ] ;
34888: LD_ADDR_VAR 0 7
34892: PUSH
34893: EMPTY
34894: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
34895: LD_VAR 0 1
34899: PPUSH
34900: CALL_OW 266
34904: PUSH
34905: LD_INT 0
34907: PUSH
34908: LD_INT 1
34910: PUSH
34911: EMPTY
34912: LIST
34913: LIST
34914: IN
34915: NOT
34916: IFFALSE 34920
// exit ;
34918: GO 36554
// if name then
34920: LD_VAR 0 3
34924: IFFALSE 34940
// SetBName ( base_dep , name ) ;
34926: LD_VAR 0 1
34930: PPUSH
34931: LD_VAR 0 3
34935: PPUSH
34936: CALL_OW 500
// base := GetBase ( base_dep ) ;
34940: LD_ADDR_VAR 0 15
34944: PUSH
34945: LD_VAR 0 1
34949: PPUSH
34950: CALL_OW 274
34954: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
34955: LD_ADDR_VAR 0 16
34959: PUSH
34960: LD_VAR 0 1
34964: PPUSH
34965: CALL_OW 255
34969: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
34970: LD_ADDR_VAR 0 17
34974: PUSH
34975: LD_VAR 0 1
34979: PPUSH
34980: CALL_OW 248
34984: ST_TO_ADDR
// if sources then
34985: LD_VAR 0 5
34989: IFFALSE 35036
// for i = 1 to 3 do
34991: LD_ADDR_VAR 0 8
34995: PUSH
34996: DOUBLE
34997: LD_INT 1
34999: DEC
35000: ST_TO_ADDR
35001: LD_INT 3
35003: PUSH
35004: FOR_TO
35005: IFFALSE 35034
// AddResourceType ( base , i , sources [ i ] ) ;
35007: LD_VAR 0 15
35011: PPUSH
35012: LD_VAR 0 8
35016: PPUSH
35017: LD_VAR 0 5
35021: PUSH
35022: LD_VAR 0 8
35026: ARRAY
35027: PPUSH
35028: CALL_OW 276
35032: GO 35004
35034: POP
35035: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
35036: LD_ADDR_VAR 0 18
35040: PUSH
35041: LD_VAR 0 15
35045: PPUSH
35046: LD_VAR 0 2
35050: PPUSH
35051: LD_INT 1
35053: PPUSH
35054: CALL 34297 0 3
35058: ST_TO_ADDR
// InitHc ;
35059: CALL_OW 19
// InitUc ;
35063: CALL_OW 18
// uc_side := side ;
35067: LD_ADDR_OWVAR 20
35071: PUSH
35072: LD_VAR 0 16
35076: ST_TO_ADDR
// uc_nation := nation ;
35077: LD_ADDR_OWVAR 21
35081: PUSH
35082: LD_VAR 0 17
35086: ST_TO_ADDR
// if buildings then
35087: LD_VAR 0 18
35091: IFFALSE 36413
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
35093: LD_ADDR_VAR 0 19
35097: PUSH
35098: LD_VAR 0 18
35102: PPUSH
35103: LD_INT 2
35105: PUSH
35106: LD_INT 30
35108: PUSH
35109: LD_INT 29
35111: PUSH
35112: EMPTY
35113: LIST
35114: LIST
35115: PUSH
35116: LD_INT 30
35118: PUSH
35119: LD_INT 30
35121: PUSH
35122: EMPTY
35123: LIST
35124: LIST
35125: PUSH
35126: EMPTY
35127: LIST
35128: LIST
35129: LIST
35130: PPUSH
35131: CALL_OW 72
35135: ST_TO_ADDR
// if tmp then
35136: LD_VAR 0 19
35140: IFFALSE 35188
// for i in tmp do
35142: LD_ADDR_VAR 0 8
35146: PUSH
35147: LD_VAR 0 19
35151: PUSH
35152: FOR_IN
35153: IFFALSE 35186
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
35155: LD_VAR 0 8
35159: PPUSH
35160: CALL_OW 250
35164: PPUSH
35165: LD_VAR 0 8
35169: PPUSH
35170: CALL_OW 251
35174: PPUSH
35175: LD_VAR 0 16
35179: PPUSH
35180: CALL_OW 441
35184: GO 35152
35186: POP
35187: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
35188: LD_VAR 0 18
35192: PPUSH
35193: LD_INT 2
35195: PUSH
35196: LD_INT 30
35198: PUSH
35199: LD_INT 32
35201: PUSH
35202: EMPTY
35203: LIST
35204: LIST
35205: PUSH
35206: LD_INT 30
35208: PUSH
35209: LD_INT 33
35211: PUSH
35212: EMPTY
35213: LIST
35214: LIST
35215: PUSH
35216: EMPTY
35217: LIST
35218: LIST
35219: LIST
35220: PPUSH
35221: CALL_OW 72
35225: IFFALSE 35313
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
35227: LD_ADDR_VAR 0 8
35231: PUSH
35232: LD_VAR 0 18
35236: PPUSH
35237: LD_INT 2
35239: PUSH
35240: LD_INT 30
35242: PUSH
35243: LD_INT 32
35245: PUSH
35246: EMPTY
35247: LIST
35248: LIST
35249: PUSH
35250: LD_INT 30
35252: PUSH
35253: LD_INT 33
35255: PUSH
35256: EMPTY
35257: LIST
35258: LIST
35259: PUSH
35260: EMPTY
35261: LIST
35262: LIST
35263: LIST
35264: PPUSH
35265: CALL_OW 72
35269: PUSH
35270: FOR_IN
35271: IFFALSE 35311
// begin if not GetBWeapon ( i ) then
35273: LD_VAR 0 8
35277: PPUSH
35278: CALL_OW 269
35282: NOT
35283: IFFALSE 35309
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
35285: LD_VAR 0 8
35289: PPUSH
35290: LD_VAR 0 8
35294: PPUSH
35295: LD_VAR 0 2
35299: PPUSH
35300: CALL 36559 0 2
35304: PPUSH
35305: CALL_OW 431
// end ;
35309: GO 35270
35311: POP
35312: POP
// end ; for i = 1 to personel do
35313: LD_ADDR_VAR 0 8
35317: PUSH
35318: DOUBLE
35319: LD_INT 1
35321: DEC
35322: ST_TO_ADDR
35323: LD_VAR 0 6
35327: PUSH
35328: FOR_TO
35329: IFFALSE 36393
// begin if i > 4 then
35331: LD_VAR 0 8
35335: PUSH
35336: LD_INT 4
35338: GREATER
35339: IFFALSE 35343
// break ;
35341: GO 36393
// case i of 1 :
35343: LD_VAR 0 8
35347: PUSH
35348: LD_INT 1
35350: DOUBLE
35351: EQUAL
35352: IFTRUE 35356
35354: GO 35436
35356: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
35357: LD_ADDR_VAR 0 12
35361: PUSH
35362: LD_VAR 0 18
35366: PPUSH
35367: LD_INT 22
35369: PUSH
35370: LD_VAR 0 16
35374: PUSH
35375: EMPTY
35376: LIST
35377: LIST
35378: PUSH
35379: LD_INT 58
35381: PUSH
35382: EMPTY
35383: LIST
35384: PUSH
35385: LD_INT 2
35387: PUSH
35388: LD_INT 30
35390: PUSH
35391: LD_INT 32
35393: PUSH
35394: EMPTY
35395: LIST
35396: LIST
35397: PUSH
35398: LD_INT 30
35400: PUSH
35401: LD_INT 4
35403: PUSH
35404: EMPTY
35405: LIST
35406: LIST
35407: PUSH
35408: LD_INT 30
35410: PUSH
35411: LD_INT 5
35413: PUSH
35414: EMPTY
35415: LIST
35416: LIST
35417: PUSH
35418: EMPTY
35419: LIST
35420: LIST
35421: LIST
35422: LIST
35423: PUSH
35424: EMPTY
35425: LIST
35426: LIST
35427: LIST
35428: PPUSH
35429: CALL_OW 72
35433: ST_TO_ADDR
35434: GO 35658
35436: LD_INT 2
35438: DOUBLE
35439: EQUAL
35440: IFTRUE 35444
35442: GO 35506
35444: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
35445: LD_ADDR_VAR 0 12
35449: PUSH
35450: LD_VAR 0 18
35454: PPUSH
35455: LD_INT 22
35457: PUSH
35458: LD_VAR 0 16
35462: PUSH
35463: EMPTY
35464: LIST
35465: LIST
35466: PUSH
35467: LD_INT 2
35469: PUSH
35470: LD_INT 30
35472: PUSH
35473: LD_INT 0
35475: PUSH
35476: EMPTY
35477: LIST
35478: LIST
35479: PUSH
35480: LD_INT 30
35482: PUSH
35483: LD_INT 1
35485: PUSH
35486: EMPTY
35487: LIST
35488: LIST
35489: PUSH
35490: EMPTY
35491: LIST
35492: LIST
35493: LIST
35494: PUSH
35495: EMPTY
35496: LIST
35497: LIST
35498: PPUSH
35499: CALL_OW 72
35503: ST_TO_ADDR
35504: GO 35658
35506: LD_INT 3
35508: DOUBLE
35509: EQUAL
35510: IFTRUE 35514
35512: GO 35576
35514: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
35515: LD_ADDR_VAR 0 12
35519: PUSH
35520: LD_VAR 0 18
35524: PPUSH
35525: LD_INT 22
35527: PUSH
35528: LD_VAR 0 16
35532: PUSH
35533: EMPTY
35534: LIST
35535: LIST
35536: PUSH
35537: LD_INT 2
35539: PUSH
35540: LD_INT 30
35542: PUSH
35543: LD_INT 2
35545: PUSH
35546: EMPTY
35547: LIST
35548: LIST
35549: PUSH
35550: LD_INT 30
35552: PUSH
35553: LD_INT 3
35555: PUSH
35556: EMPTY
35557: LIST
35558: LIST
35559: PUSH
35560: EMPTY
35561: LIST
35562: LIST
35563: LIST
35564: PUSH
35565: EMPTY
35566: LIST
35567: LIST
35568: PPUSH
35569: CALL_OW 72
35573: ST_TO_ADDR
35574: GO 35658
35576: LD_INT 4
35578: DOUBLE
35579: EQUAL
35580: IFTRUE 35584
35582: GO 35657
35584: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
35585: LD_ADDR_VAR 0 12
35589: PUSH
35590: LD_VAR 0 18
35594: PPUSH
35595: LD_INT 22
35597: PUSH
35598: LD_VAR 0 16
35602: PUSH
35603: EMPTY
35604: LIST
35605: LIST
35606: PUSH
35607: LD_INT 2
35609: PUSH
35610: LD_INT 30
35612: PUSH
35613: LD_INT 6
35615: PUSH
35616: EMPTY
35617: LIST
35618: LIST
35619: PUSH
35620: LD_INT 30
35622: PUSH
35623: LD_INT 7
35625: PUSH
35626: EMPTY
35627: LIST
35628: LIST
35629: PUSH
35630: LD_INT 30
35632: PUSH
35633: LD_INT 8
35635: PUSH
35636: EMPTY
35637: LIST
35638: LIST
35639: PUSH
35640: EMPTY
35641: LIST
35642: LIST
35643: LIST
35644: LIST
35645: PUSH
35646: EMPTY
35647: LIST
35648: LIST
35649: PPUSH
35650: CALL_OW 72
35654: ST_TO_ADDR
35655: GO 35658
35657: POP
// if i = 1 then
35658: LD_VAR 0 8
35662: PUSH
35663: LD_INT 1
35665: EQUAL
35666: IFFALSE 35777
// begin tmp := [ ] ;
35668: LD_ADDR_VAR 0 19
35672: PUSH
35673: EMPTY
35674: ST_TO_ADDR
// for j in f do
35675: LD_ADDR_VAR 0 9
35679: PUSH
35680: LD_VAR 0 12
35684: PUSH
35685: FOR_IN
35686: IFFALSE 35759
// if GetBType ( j ) = b_bunker then
35688: LD_VAR 0 9
35692: PPUSH
35693: CALL_OW 266
35697: PUSH
35698: LD_INT 32
35700: EQUAL
35701: IFFALSE 35728
// tmp := Insert ( tmp , 1 , j ) else
35703: LD_ADDR_VAR 0 19
35707: PUSH
35708: LD_VAR 0 19
35712: PPUSH
35713: LD_INT 1
35715: PPUSH
35716: LD_VAR 0 9
35720: PPUSH
35721: CALL_OW 2
35725: ST_TO_ADDR
35726: GO 35757
// tmp := Insert ( tmp , tmp + 1 , j ) ;
35728: LD_ADDR_VAR 0 19
35732: PUSH
35733: LD_VAR 0 19
35737: PPUSH
35738: LD_VAR 0 19
35742: PUSH
35743: LD_INT 1
35745: PLUS
35746: PPUSH
35747: LD_VAR 0 9
35751: PPUSH
35752: CALL_OW 2
35756: ST_TO_ADDR
35757: GO 35685
35759: POP
35760: POP
// if tmp then
35761: LD_VAR 0 19
35765: IFFALSE 35777
// f := tmp ;
35767: LD_ADDR_VAR 0 12
35771: PUSH
35772: LD_VAR 0 19
35776: ST_TO_ADDR
// end ; x := personel [ i ] ;
35777: LD_ADDR_VAR 0 13
35781: PUSH
35782: LD_VAR 0 6
35786: PUSH
35787: LD_VAR 0 8
35791: ARRAY
35792: ST_TO_ADDR
// if x = - 1 then
35793: LD_VAR 0 13
35797: PUSH
35798: LD_INT 1
35800: NEG
35801: EQUAL
35802: IFFALSE 36011
// begin for j in f do
35804: LD_ADDR_VAR 0 9
35808: PUSH
35809: LD_VAR 0 12
35813: PUSH
35814: FOR_IN
35815: IFFALSE 36007
// repeat InitHc ;
35817: CALL_OW 19
// if GetBType ( j ) = b_barracks then
35821: LD_VAR 0 9
35825: PPUSH
35826: CALL_OW 266
35830: PUSH
35831: LD_INT 5
35833: EQUAL
35834: IFFALSE 35904
// begin if UnitsInside ( j ) < 3 then
35836: LD_VAR 0 9
35840: PPUSH
35841: CALL_OW 313
35845: PUSH
35846: LD_INT 3
35848: LESS
35849: IFFALSE 35885
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
35851: LD_INT 0
35853: PPUSH
35854: LD_INT 5
35856: PUSH
35857: LD_INT 8
35859: PUSH
35860: LD_INT 9
35862: PUSH
35863: EMPTY
35864: LIST
35865: LIST
35866: LIST
35867: PUSH
35868: LD_VAR 0 17
35872: ARRAY
35873: PPUSH
35874: LD_VAR 0 4
35878: PPUSH
35879: CALL_OW 380
35883: GO 35902
// PrepareHuman ( false , i , skill ) ;
35885: LD_INT 0
35887: PPUSH
35888: LD_VAR 0 8
35892: PPUSH
35893: LD_VAR 0 4
35897: PPUSH
35898: CALL_OW 380
// end else
35902: GO 35921
// PrepareHuman ( false , i , skill ) ;
35904: LD_INT 0
35906: PPUSH
35907: LD_VAR 0 8
35911: PPUSH
35912: LD_VAR 0 4
35916: PPUSH
35917: CALL_OW 380
// un := CreateHuman ;
35921: LD_ADDR_VAR 0 14
35925: PUSH
35926: CALL_OW 44
35930: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
35931: LD_ADDR_VAR 0 7
35935: PUSH
35936: LD_VAR 0 7
35940: PPUSH
35941: LD_INT 1
35943: PPUSH
35944: LD_VAR 0 14
35948: PPUSH
35949: CALL_OW 2
35953: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
35954: LD_VAR 0 14
35958: PPUSH
35959: LD_VAR 0 9
35963: PPUSH
35964: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
35968: LD_VAR 0 9
35972: PPUSH
35973: CALL_OW 313
35977: PUSH
35978: LD_INT 6
35980: EQUAL
35981: PUSH
35982: LD_VAR 0 9
35986: PPUSH
35987: CALL_OW 266
35991: PUSH
35992: LD_INT 32
35994: PUSH
35995: LD_INT 31
35997: PUSH
35998: EMPTY
35999: LIST
36000: LIST
36001: IN
36002: OR
36003: IFFALSE 35817
36005: GO 35814
36007: POP
36008: POP
// end else
36009: GO 36391
// for j = 1 to x do
36011: LD_ADDR_VAR 0 9
36015: PUSH
36016: DOUBLE
36017: LD_INT 1
36019: DEC
36020: ST_TO_ADDR
36021: LD_VAR 0 13
36025: PUSH
36026: FOR_TO
36027: IFFALSE 36389
// begin InitHc ;
36029: CALL_OW 19
// if not f then
36033: LD_VAR 0 12
36037: NOT
36038: IFFALSE 36127
// begin PrepareHuman ( false , i , skill ) ;
36040: LD_INT 0
36042: PPUSH
36043: LD_VAR 0 8
36047: PPUSH
36048: LD_VAR 0 4
36052: PPUSH
36053: CALL_OW 380
// un := CreateHuman ;
36057: LD_ADDR_VAR 0 14
36061: PUSH
36062: CALL_OW 44
36066: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36067: LD_ADDR_VAR 0 7
36071: PUSH
36072: LD_VAR 0 7
36076: PPUSH
36077: LD_INT 1
36079: PPUSH
36080: LD_VAR 0 14
36084: PPUSH
36085: CALL_OW 2
36089: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
36090: LD_VAR 0 14
36094: PPUSH
36095: LD_VAR 0 1
36099: PPUSH
36100: CALL_OW 250
36104: PPUSH
36105: LD_VAR 0 1
36109: PPUSH
36110: CALL_OW 251
36114: PPUSH
36115: LD_INT 10
36117: PPUSH
36118: LD_INT 0
36120: PPUSH
36121: CALL_OW 50
// continue ;
36125: GO 36026
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
36127: LD_VAR 0 12
36131: PUSH
36132: LD_INT 1
36134: ARRAY
36135: PPUSH
36136: CALL_OW 313
36140: PUSH
36141: LD_VAR 0 12
36145: PUSH
36146: LD_INT 1
36148: ARRAY
36149: PPUSH
36150: CALL_OW 266
36154: PUSH
36155: LD_INT 32
36157: PUSH
36158: LD_INT 31
36160: PUSH
36161: EMPTY
36162: LIST
36163: LIST
36164: IN
36165: AND
36166: PUSH
36167: LD_VAR 0 12
36171: PUSH
36172: LD_INT 1
36174: ARRAY
36175: PPUSH
36176: CALL_OW 313
36180: PUSH
36181: LD_INT 6
36183: EQUAL
36184: OR
36185: IFFALSE 36205
// f := Delete ( f , 1 ) ;
36187: LD_ADDR_VAR 0 12
36191: PUSH
36192: LD_VAR 0 12
36196: PPUSH
36197: LD_INT 1
36199: PPUSH
36200: CALL_OW 3
36204: ST_TO_ADDR
// if not f then
36205: LD_VAR 0 12
36209: NOT
36210: IFFALSE 36228
// begin x := x + 2 ;
36212: LD_ADDR_VAR 0 13
36216: PUSH
36217: LD_VAR 0 13
36221: PUSH
36222: LD_INT 2
36224: PLUS
36225: ST_TO_ADDR
// continue ;
36226: GO 36026
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
36228: LD_VAR 0 12
36232: PUSH
36233: LD_INT 1
36235: ARRAY
36236: PPUSH
36237: CALL_OW 266
36241: PUSH
36242: LD_INT 5
36244: EQUAL
36245: IFFALSE 36319
// begin if UnitsInside ( f [ 1 ] ) < 3 then
36247: LD_VAR 0 12
36251: PUSH
36252: LD_INT 1
36254: ARRAY
36255: PPUSH
36256: CALL_OW 313
36260: PUSH
36261: LD_INT 3
36263: LESS
36264: IFFALSE 36300
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
36266: LD_INT 0
36268: PPUSH
36269: LD_INT 5
36271: PUSH
36272: LD_INT 8
36274: PUSH
36275: LD_INT 9
36277: PUSH
36278: EMPTY
36279: LIST
36280: LIST
36281: LIST
36282: PUSH
36283: LD_VAR 0 17
36287: ARRAY
36288: PPUSH
36289: LD_VAR 0 4
36293: PPUSH
36294: CALL_OW 380
36298: GO 36317
// PrepareHuman ( false , i , skill ) ;
36300: LD_INT 0
36302: PPUSH
36303: LD_VAR 0 8
36307: PPUSH
36308: LD_VAR 0 4
36312: PPUSH
36313: CALL_OW 380
// end else
36317: GO 36336
// PrepareHuman ( false , i , skill ) ;
36319: LD_INT 0
36321: PPUSH
36322: LD_VAR 0 8
36326: PPUSH
36327: LD_VAR 0 4
36331: PPUSH
36332: CALL_OW 380
// un := CreateHuman ;
36336: LD_ADDR_VAR 0 14
36340: PUSH
36341: CALL_OW 44
36345: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36346: LD_ADDR_VAR 0 7
36350: PUSH
36351: LD_VAR 0 7
36355: PPUSH
36356: LD_INT 1
36358: PPUSH
36359: LD_VAR 0 14
36363: PPUSH
36364: CALL_OW 2
36368: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
36369: LD_VAR 0 14
36373: PPUSH
36374: LD_VAR 0 12
36378: PUSH
36379: LD_INT 1
36381: ARRAY
36382: PPUSH
36383: CALL_OW 52
// end ;
36387: GO 36026
36389: POP
36390: POP
// end ;
36391: GO 35328
36393: POP
36394: POP
// result := result ^ buildings ;
36395: LD_ADDR_VAR 0 7
36399: PUSH
36400: LD_VAR 0 7
36404: PUSH
36405: LD_VAR 0 18
36409: ADD
36410: ST_TO_ADDR
// end else
36411: GO 36554
// begin for i = 1 to personel do
36413: LD_ADDR_VAR 0 8
36417: PUSH
36418: DOUBLE
36419: LD_INT 1
36421: DEC
36422: ST_TO_ADDR
36423: LD_VAR 0 6
36427: PUSH
36428: FOR_TO
36429: IFFALSE 36552
// begin if i > 4 then
36431: LD_VAR 0 8
36435: PUSH
36436: LD_INT 4
36438: GREATER
36439: IFFALSE 36443
// break ;
36441: GO 36552
// x := personel [ i ] ;
36443: LD_ADDR_VAR 0 13
36447: PUSH
36448: LD_VAR 0 6
36452: PUSH
36453: LD_VAR 0 8
36457: ARRAY
36458: ST_TO_ADDR
// if x = - 1 then
36459: LD_VAR 0 13
36463: PUSH
36464: LD_INT 1
36466: NEG
36467: EQUAL
36468: IFFALSE 36472
// continue ;
36470: GO 36428
// PrepareHuman ( false , i , skill ) ;
36472: LD_INT 0
36474: PPUSH
36475: LD_VAR 0 8
36479: PPUSH
36480: LD_VAR 0 4
36484: PPUSH
36485: CALL_OW 380
// un := CreateHuman ;
36489: LD_ADDR_VAR 0 14
36493: PUSH
36494: CALL_OW 44
36498: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
36499: LD_VAR 0 14
36503: PPUSH
36504: LD_VAR 0 1
36508: PPUSH
36509: CALL_OW 250
36513: PPUSH
36514: LD_VAR 0 1
36518: PPUSH
36519: CALL_OW 251
36523: PPUSH
36524: LD_INT 10
36526: PPUSH
36527: LD_INT 0
36529: PPUSH
36530: CALL_OW 50
// result := result ^ un ;
36534: LD_ADDR_VAR 0 7
36538: PUSH
36539: LD_VAR 0 7
36543: PUSH
36544: LD_VAR 0 14
36548: ADD
36549: ST_TO_ADDR
// end ;
36550: GO 36428
36552: POP
36553: POP
// end ; end ;
36554: LD_VAR 0 7
36558: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
36559: LD_INT 0
36561: PPUSH
36562: PPUSH
36563: PPUSH
36564: PPUSH
36565: PPUSH
36566: PPUSH
36567: PPUSH
36568: PPUSH
36569: PPUSH
36570: PPUSH
36571: PPUSH
36572: PPUSH
36573: PPUSH
36574: PPUSH
36575: PPUSH
36576: PPUSH
// result := false ;
36577: LD_ADDR_VAR 0 3
36581: PUSH
36582: LD_INT 0
36584: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
36585: LD_VAR 0 1
36589: NOT
36590: PUSH
36591: LD_VAR 0 1
36595: PPUSH
36596: CALL_OW 266
36600: PUSH
36601: LD_INT 32
36603: PUSH
36604: LD_INT 33
36606: PUSH
36607: EMPTY
36608: LIST
36609: LIST
36610: IN
36611: NOT
36612: OR
36613: IFFALSE 36617
// exit ;
36615: GO 37726
// nat := GetNation ( tower ) ;
36617: LD_ADDR_VAR 0 12
36621: PUSH
36622: LD_VAR 0 1
36626: PPUSH
36627: CALL_OW 248
36631: ST_TO_ADDR
// side := GetSide ( tower ) ;
36632: LD_ADDR_VAR 0 16
36636: PUSH
36637: LD_VAR 0 1
36641: PPUSH
36642: CALL_OW 255
36646: ST_TO_ADDR
// x := GetX ( tower ) ;
36647: LD_ADDR_VAR 0 10
36651: PUSH
36652: LD_VAR 0 1
36656: PPUSH
36657: CALL_OW 250
36661: ST_TO_ADDR
// y := GetY ( tower ) ;
36662: LD_ADDR_VAR 0 11
36666: PUSH
36667: LD_VAR 0 1
36671: PPUSH
36672: CALL_OW 251
36676: ST_TO_ADDR
// if not x or not y then
36677: LD_VAR 0 10
36681: NOT
36682: PUSH
36683: LD_VAR 0 11
36687: NOT
36688: OR
36689: IFFALSE 36693
// exit ;
36691: GO 37726
// weapon := 0 ;
36693: LD_ADDR_VAR 0 18
36697: PUSH
36698: LD_INT 0
36700: ST_TO_ADDR
// fac_list := [ ] ;
36701: LD_ADDR_VAR 0 17
36705: PUSH
36706: EMPTY
36707: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
36708: LD_ADDR_VAR 0 6
36712: PUSH
36713: LD_VAR 0 1
36717: PPUSH
36718: CALL_OW 274
36722: PPUSH
36723: LD_VAR 0 2
36727: PPUSH
36728: LD_INT 0
36730: PPUSH
36731: CALL 34297 0 3
36735: PPUSH
36736: LD_INT 30
36738: PUSH
36739: LD_INT 3
36741: PUSH
36742: EMPTY
36743: LIST
36744: LIST
36745: PPUSH
36746: CALL_OW 72
36750: ST_TO_ADDR
// if not factories then
36751: LD_VAR 0 6
36755: NOT
36756: IFFALSE 36760
// exit ;
36758: GO 37726
// for i in factories do
36760: LD_ADDR_VAR 0 8
36764: PUSH
36765: LD_VAR 0 6
36769: PUSH
36770: FOR_IN
36771: IFFALSE 36796
// fac_list := fac_list union AvailableWeaponList ( i ) ;
36773: LD_ADDR_VAR 0 17
36777: PUSH
36778: LD_VAR 0 17
36782: PUSH
36783: LD_VAR 0 8
36787: PPUSH
36788: CALL_OW 478
36792: UNION
36793: ST_TO_ADDR
36794: GO 36770
36796: POP
36797: POP
// if not fac_list then
36798: LD_VAR 0 17
36802: NOT
36803: IFFALSE 36807
// exit ;
36805: GO 37726
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
36807: LD_ADDR_VAR 0 5
36811: PUSH
36812: LD_INT 4
36814: PUSH
36815: LD_INT 5
36817: PUSH
36818: LD_INT 9
36820: PUSH
36821: LD_INT 10
36823: PUSH
36824: LD_INT 6
36826: PUSH
36827: LD_INT 7
36829: PUSH
36830: LD_INT 11
36832: PUSH
36833: EMPTY
36834: LIST
36835: LIST
36836: LIST
36837: LIST
36838: LIST
36839: LIST
36840: LIST
36841: PUSH
36842: LD_INT 27
36844: PUSH
36845: LD_INT 28
36847: PUSH
36848: LD_INT 26
36850: PUSH
36851: LD_INT 30
36853: PUSH
36854: EMPTY
36855: LIST
36856: LIST
36857: LIST
36858: LIST
36859: PUSH
36860: LD_INT 43
36862: PUSH
36863: LD_INT 44
36865: PUSH
36866: LD_INT 46
36868: PUSH
36869: LD_INT 45
36871: PUSH
36872: LD_INT 47
36874: PUSH
36875: LD_INT 49
36877: PUSH
36878: EMPTY
36879: LIST
36880: LIST
36881: LIST
36882: LIST
36883: LIST
36884: LIST
36885: PUSH
36886: EMPTY
36887: LIST
36888: LIST
36889: LIST
36890: PUSH
36891: LD_VAR 0 12
36895: ARRAY
36896: ST_TO_ADDR
// list := list isect fac_list ;
36897: LD_ADDR_VAR 0 5
36901: PUSH
36902: LD_VAR 0 5
36906: PUSH
36907: LD_VAR 0 17
36911: ISECT
36912: ST_TO_ADDR
// if not list then
36913: LD_VAR 0 5
36917: NOT
36918: IFFALSE 36922
// exit ;
36920: GO 37726
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
36922: LD_VAR 0 12
36926: PUSH
36927: LD_INT 3
36929: EQUAL
36930: PUSH
36931: LD_INT 49
36933: PUSH
36934: LD_VAR 0 5
36938: IN
36939: AND
36940: PUSH
36941: LD_INT 31
36943: PPUSH
36944: LD_VAR 0 16
36948: PPUSH
36949: CALL_OW 321
36953: PUSH
36954: LD_INT 2
36956: EQUAL
36957: AND
36958: IFFALSE 37018
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
36960: LD_INT 22
36962: PUSH
36963: LD_VAR 0 16
36967: PUSH
36968: EMPTY
36969: LIST
36970: LIST
36971: PUSH
36972: LD_INT 35
36974: PUSH
36975: LD_INT 49
36977: PUSH
36978: EMPTY
36979: LIST
36980: LIST
36981: PUSH
36982: LD_INT 91
36984: PUSH
36985: LD_VAR 0 1
36989: PUSH
36990: LD_INT 10
36992: PUSH
36993: EMPTY
36994: LIST
36995: LIST
36996: LIST
36997: PUSH
36998: EMPTY
36999: LIST
37000: LIST
37001: LIST
37002: PPUSH
37003: CALL_OW 69
37007: NOT
37008: IFFALSE 37018
// weapon := ru_time_lapser ;
37010: LD_ADDR_VAR 0 18
37014: PUSH
37015: LD_INT 49
37017: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
37018: LD_VAR 0 12
37022: PUSH
37023: LD_INT 1
37025: PUSH
37026: LD_INT 2
37028: PUSH
37029: EMPTY
37030: LIST
37031: LIST
37032: IN
37033: PUSH
37034: LD_INT 11
37036: PUSH
37037: LD_VAR 0 5
37041: IN
37042: PUSH
37043: LD_INT 30
37045: PUSH
37046: LD_VAR 0 5
37050: IN
37051: OR
37052: AND
37053: PUSH
37054: LD_INT 6
37056: PPUSH
37057: LD_VAR 0 16
37061: PPUSH
37062: CALL_OW 321
37066: PUSH
37067: LD_INT 2
37069: EQUAL
37070: AND
37071: IFFALSE 37236
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
37073: LD_INT 22
37075: PUSH
37076: LD_VAR 0 16
37080: PUSH
37081: EMPTY
37082: LIST
37083: LIST
37084: PUSH
37085: LD_INT 2
37087: PUSH
37088: LD_INT 35
37090: PUSH
37091: LD_INT 11
37093: PUSH
37094: EMPTY
37095: LIST
37096: LIST
37097: PUSH
37098: LD_INT 35
37100: PUSH
37101: LD_INT 30
37103: PUSH
37104: EMPTY
37105: LIST
37106: LIST
37107: PUSH
37108: EMPTY
37109: LIST
37110: LIST
37111: LIST
37112: PUSH
37113: LD_INT 91
37115: PUSH
37116: LD_VAR 0 1
37120: PUSH
37121: LD_INT 18
37123: PUSH
37124: EMPTY
37125: LIST
37126: LIST
37127: LIST
37128: PUSH
37129: EMPTY
37130: LIST
37131: LIST
37132: LIST
37133: PPUSH
37134: CALL_OW 69
37138: NOT
37139: PUSH
37140: LD_INT 22
37142: PUSH
37143: LD_VAR 0 16
37147: PUSH
37148: EMPTY
37149: LIST
37150: LIST
37151: PUSH
37152: LD_INT 2
37154: PUSH
37155: LD_INT 30
37157: PUSH
37158: LD_INT 32
37160: PUSH
37161: EMPTY
37162: LIST
37163: LIST
37164: PUSH
37165: LD_INT 30
37167: PUSH
37168: LD_INT 33
37170: PUSH
37171: EMPTY
37172: LIST
37173: LIST
37174: PUSH
37175: EMPTY
37176: LIST
37177: LIST
37178: LIST
37179: PUSH
37180: LD_INT 91
37182: PUSH
37183: LD_VAR 0 1
37187: PUSH
37188: LD_INT 12
37190: PUSH
37191: EMPTY
37192: LIST
37193: LIST
37194: LIST
37195: PUSH
37196: EMPTY
37197: LIST
37198: LIST
37199: LIST
37200: PUSH
37201: EMPTY
37202: LIST
37203: PPUSH
37204: CALL_OW 69
37208: PUSH
37209: LD_INT 2
37211: GREATER
37212: AND
37213: IFFALSE 37236
// weapon := [ us_radar , ar_radar ] [ nat ] ;
37215: LD_ADDR_VAR 0 18
37219: PUSH
37220: LD_INT 11
37222: PUSH
37223: LD_INT 30
37225: PUSH
37226: EMPTY
37227: LIST
37228: LIST
37229: PUSH
37230: LD_VAR 0 12
37234: ARRAY
37235: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
37236: LD_VAR 0 18
37240: NOT
37241: PUSH
37242: LD_INT 40
37244: PPUSH
37245: LD_VAR 0 16
37249: PPUSH
37250: CALL_OW 321
37254: PUSH
37255: LD_INT 2
37257: EQUAL
37258: AND
37259: PUSH
37260: LD_INT 7
37262: PUSH
37263: LD_VAR 0 5
37267: IN
37268: PUSH
37269: LD_INT 28
37271: PUSH
37272: LD_VAR 0 5
37276: IN
37277: OR
37278: PUSH
37279: LD_INT 45
37281: PUSH
37282: LD_VAR 0 5
37286: IN
37287: OR
37288: AND
37289: IFFALSE 37543
// begin hex := GetHexInfo ( x , y ) ;
37291: LD_ADDR_VAR 0 4
37295: PUSH
37296: LD_VAR 0 10
37300: PPUSH
37301: LD_VAR 0 11
37305: PPUSH
37306: CALL_OW 546
37310: ST_TO_ADDR
// if hex [ 1 ] then
37311: LD_VAR 0 4
37315: PUSH
37316: LD_INT 1
37318: ARRAY
37319: IFFALSE 37323
// exit ;
37321: GO 37726
// height := hex [ 2 ] ;
37323: LD_ADDR_VAR 0 15
37327: PUSH
37328: LD_VAR 0 4
37332: PUSH
37333: LD_INT 2
37335: ARRAY
37336: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
37337: LD_ADDR_VAR 0 14
37341: PUSH
37342: LD_INT 0
37344: PUSH
37345: LD_INT 2
37347: PUSH
37348: LD_INT 3
37350: PUSH
37351: LD_INT 5
37353: PUSH
37354: EMPTY
37355: LIST
37356: LIST
37357: LIST
37358: LIST
37359: ST_TO_ADDR
// for i in tmp do
37360: LD_ADDR_VAR 0 8
37364: PUSH
37365: LD_VAR 0 14
37369: PUSH
37370: FOR_IN
37371: IFFALSE 37541
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
37373: LD_ADDR_VAR 0 9
37377: PUSH
37378: LD_VAR 0 10
37382: PPUSH
37383: LD_VAR 0 8
37387: PPUSH
37388: LD_INT 5
37390: PPUSH
37391: CALL_OW 272
37395: PUSH
37396: LD_VAR 0 11
37400: PPUSH
37401: LD_VAR 0 8
37405: PPUSH
37406: LD_INT 5
37408: PPUSH
37409: CALL_OW 273
37413: PUSH
37414: EMPTY
37415: LIST
37416: LIST
37417: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
37418: LD_VAR 0 9
37422: PUSH
37423: LD_INT 1
37425: ARRAY
37426: PPUSH
37427: LD_VAR 0 9
37431: PUSH
37432: LD_INT 2
37434: ARRAY
37435: PPUSH
37436: CALL_OW 488
37440: IFFALSE 37539
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
37442: LD_ADDR_VAR 0 4
37446: PUSH
37447: LD_VAR 0 9
37451: PUSH
37452: LD_INT 1
37454: ARRAY
37455: PPUSH
37456: LD_VAR 0 9
37460: PUSH
37461: LD_INT 2
37463: ARRAY
37464: PPUSH
37465: CALL_OW 546
37469: ST_TO_ADDR
// if hex [ 1 ] then
37470: LD_VAR 0 4
37474: PUSH
37475: LD_INT 1
37477: ARRAY
37478: IFFALSE 37482
// continue ;
37480: GO 37370
// h := hex [ 2 ] ;
37482: LD_ADDR_VAR 0 13
37486: PUSH
37487: LD_VAR 0 4
37491: PUSH
37492: LD_INT 2
37494: ARRAY
37495: ST_TO_ADDR
// if h + 7 < height then
37496: LD_VAR 0 13
37500: PUSH
37501: LD_INT 7
37503: PLUS
37504: PUSH
37505: LD_VAR 0 15
37509: LESS
37510: IFFALSE 37539
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
37512: LD_ADDR_VAR 0 18
37516: PUSH
37517: LD_INT 7
37519: PUSH
37520: LD_INT 28
37522: PUSH
37523: LD_INT 45
37525: PUSH
37526: EMPTY
37527: LIST
37528: LIST
37529: LIST
37530: PUSH
37531: LD_VAR 0 12
37535: ARRAY
37536: ST_TO_ADDR
// break ;
37537: GO 37541
// end ; end ; end ;
37539: GO 37370
37541: POP
37542: POP
// end ; if not weapon then
37543: LD_VAR 0 18
37547: NOT
37548: IFFALSE 37608
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
37550: LD_ADDR_VAR 0 5
37554: PUSH
37555: LD_VAR 0 5
37559: PUSH
37560: LD_INT 11
37562: PUSH
37563: LD_INT 30
37565: PUSH
37566: LD_INT 49
37568: PUSH
37569: EMPTY
37570: LIST
37571: LIST
37572: LIST
37573: DIFF
37574: ST_TO_ADDR
// if not list then
37575: LD_VAR 0 5
37579: NOT
37580: IFFALSE 37584
// exit ;
37582: GO 37726
// weapon := list [ rand ( 1 , list ) ] ;
37584: LD_ADDR_VAR 0 18
37588: PUSH
37589: LD_VAR 0 5
37593: PUSH
37594: LD_INT 1
37596: PPUSH
37597: LD_VAR 0 5
37601: PPUSH
37602: CALL_OW 12
37606: ARRAY
37607: ST_TO_ADDR
// end ; if weapon then
37608: LD_VAR 0 18
37612: IFFALSE 37726
// begin tmp := CostOfWeapon ( weapon ) ;
37614: LD_ADDR_VAR 0 14
37618: PUSH
37619: LD_VAR 0 18
37623: PPUSH
37624: CALL_OW 451
37628: ST_TO_ADDR
// j := GetBase ( tower ) ;
37629: LD_ADDR_VAR 0 9
37633: PUSH
37634: LD_VAR 0 1
37638: PPUSH
37639: CALL_OW 274
37643: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
37644: LD_VAR 0 9
37648: PPUSH
37649: LD_INT 1
37651: PPUSH
37652: CALL_OW 275
37656: PUSH
37657: LD_VAR 0 14
37661: PUSH
37662: LD_INT 1
37664: ARRAY
37665: GREATEREQUAL
37666: PUSH
37667: LD_VAR 0 9
37671: PPUSH
37672: LD_INT 2
37674: PPUSH
37675: CALL_OW 275
37679: PUSH
37680: LD_VAR 0 14
37684: PUSH
37685: LD_INT 2
37687: ARRAY
37688: GREATEREQUAL
37689: AND
37690: PUSH
37691: LD_VAR 0 9
37695: PPUSH
37696: LD_INT 3
37698: PPUSH
37699: CALL_OW 275
37703: PUSH
37704: LD_VAR 0 14
37708: PUSH
37709: LD_INT 3
37711: ARRAY
37712: GREATEREQUAL
37713: AND
37714: IFFALSE 37726
// result := weapon ;
37716: LD_ADDR_VAR 0 3
37720: PUSH
37721: LD_VAR 0 18
37725: ST_TO_ADDR
// end ; end ;
37726: LD_VAR 0 3
37730: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
37731: LD_INT 0
37733: PPUSH
37734: PPUSH
// result := true ;
37735: LD_ADDR_VAR 0 3
37739: PUSH
37740: LD_INT 1
37742: ST_TO_ADDR
// if array1 = array2 then
37743: LD_VAR 0 1
37747: PUSH
37748: LD_VAR 0 2
37752: EQUAL
37753: IFFALSE 37813
// begin for i = 1 to array1 do
37755: LD_ADDR_VAR 0 4
37759: PUSH
37760: DOUBLE
37761: LD_INT 1
37763: DEC
37764: ST_TO_ADDR
37765: LD_VAR 0 1
37769: PUSH
37770: FOR_TO
37771: IFFALSE 37809
// if array1 [ i ] <> array2 [ i ] then
37773: LD_VAR 0 1
37777: PUSH
37778: LD_VAR 0 4
37782: ARRAY
37783: PUSH
37784: LD_VAR 0 2
37788: PUSH
37789: LD_VAR 0 4
37793: ARRAY
37794: NONEQUAL
37795: IFFALSE 37807
// begin result := false ;
37797: LD_ADDR_VAR 0 3
37801: PUSH
37802: LD_INT 0
37804: ST_TO_ADDR
// break ;
37805: GO 37809
// end ;
37807: GO 37770
37809: POP
37810: POP
// end else
37811: GO 37821
// result := false ;
37813: LD_ADDR_VAR 0 3
37817: PUSH
37818: LD_INT 0
37820: ST_TO_ADDR
// end ;
37821: LD_VAR 0 3
37825: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
37826: LD_INT 0
37828: PPUSH
37829: PPUSH
// if not array1 or not array2 then
37830: LD_VAR 0 1
37834: NOT
37835: PUSH
37836: LD_VAR 0 2
37840: NOT
37841: OR
37842: IFFALSE 37846
// exit ;
37844: GO 37910
// result := true ;
37846: LD_ADDR_VAR 0 3
37850: PUSH
37851: LD_INT 1
37853: ST_TO_ADDR
// for i = 1 to array1 do
37854: LD_ADDR_VAR 0 4
37858: PUSH
37859: DOUBLE
37860: LD_INT 1
37862: DEC
37863: ST_TO_ADDR
37864: LD_VAR 0 1
37868: PUSH
37869: FOR_TO
37870: IFFALSE 37908
// if array1 [ i ] <> array2 [ i ] then
37872: LD_VAR 0 1
37876: PUSH
37877: LD_VAR 0 4
37881: ARRAY
37882: PUSH
37883: LD_VAR 0 2
37887: PUSH
37888: LD_VAR 0 4
37892: ARRAY
37893: NONEQUAL
37894: IFFALSE 37906
// begin result := false ;
37896: LD_ADDR_VAR 0 3
37900: PUSH
37901: LD_INT 0
37903: ST_TO_ADDR
// break ;
37904: GO 37908
// end ;
37906: GO 37869
37908: POP
37909: POP
// end ;
37910: LD_VAR 0 3
37914: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
37915: LD_INT 0
37917: PPUSH
37918: PPUSH
37919: PPUSH
// pom := GetBase ( fac ) ;
37920: LD_ADDR_VAR 0 5
37924: PUSH
37925: LD_VAR 0 1
37929: PPUSH
37930: CALL_OW 274
37934: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
37935: LD_ADDR_VAR 0 4
37939: PUSH
37940: LD_VAR 0 2
37944: PUSH
37945: LD_INT 1
37947: ARRAY
37948: PPUSH
37949: LD_VAR 0 2
37953: PUSH
37954: LD_INT 2
37956: ARRAY
37957: PPUSH
37958: LD_VAR 0 2
37962: PUSH
37963: LD_INT 3
37965: ARRAY
37966: PPUSH
37967: LD_VAR 0 2
37971: PUSH
37972: LD_INT 4
37974: ARRAY
37975: PPUSH
37976: CALL_OW 449
37980: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
37981: LD_ADDR_VAR 0 3
37985: PUSH
37986: LD_VAR 0 5
37990: PPUSH
37991: LD_INT 1
37993: PPUSH
37994: CALL_OW 275
37998: PUSH
37999: LD_VAR 0 4
38003: PUSH
38004: LD_INT 1
38006: ARRAY
38007: GREATEREQUAL
38008: PUSH
38009: LD_VAR 0 5
38013: PPUSH
38014: LD_INT 2
38016: PPUSH
38017: CALL_OW 275
38021: PUSH
38022: LD_VAR 0 4
38026: PUSH
38027: LD_INT 2
38029: ARRAY
38030: GREATEREQUAL
38031: AND
38032: PUSH
38033: LD_VAR 0 5
38037: PPUSH
38038: LD_INT 3
38040: PPUSH
38041: CALL_OW 275
38045: PUSH
38046: LD_VAR 0 4
38050: PUSH
38051: LD_INT 3
38053: ARRAY
38054: GREATEREQUAL
38055: AND
38056: ST_TO_ADDR
// end ;
38057: LD_VAR 0 3
38061: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
38062: LD_INT 0
38064: PPUSH
38065: PPUSH
38066: PPUSH
38067: PPUSH
// pom := GetBase ( building ) ;
38068: LD_ADDR_VAR 0 3
38072: PUSH
38073: LD_VAR 0 1
38077: PPUSH
38078: CALL_OW 274
38082: ST_TO_ADDR
// if not pom then
38083: LD_VAR 0 3
38087: NOT
38088: IFFALSE 38092
// exit ;
38090: GO 38262
// btype := GetBType ( building ) ;
38092: LD_ADDR_VAR 0 5
38096: PUSH
38097: LD_VAR 0 1
38101: PPUSH
38102: CALL_OW 266
38106: ST_TO_ADDR
// if btype = b_armoury then
38107: LD_VAR 0 5
38111: PUSH
38112: LD_INT 4
38114: EQUAL
38115: IFFALSE 38125
// btype := b_barracks ;
38117: LD_ADDR_VAR 0 5
38121: PUSH
38122: LD_INT 5
38124: ST_TO_ADDR
// if btype = b_depot then
38125: LD_VAR 0 5
38129: PUSH
38130: LD_INT 0
38132: EQUAL
38133: IFFALSE 38143
// btype := b_warehouse ;
38135: LD_ADDR_VAR 0 5
38139: PUSH
38140: LD_INT 1
38142: ST_TO_ADDR
// if btype = b_workshop then
38143: LD_VAR 0 5
38147: PUSH
38148: LD_INT 2
38150: EQUAL
38151: IFFALSE 38161
// btype := b_factory ;
38153: LD_ADDR_VAR 0 5
38157: PUSH
38158: LD_INT 3
38160: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
38161: LD_ADDR_VAR 0 4
38165: PUSH
38166: LD_VAR 0 5
38170: PPUSH
38171: LD_VAR 0 1
38175: PPUSH
38176: CALL_OW 248
38180: PPUSH
38181: CALL_OW 450
38185: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38186: LD_ADDR_VAR 0 2
38190: PUSH
38191: LD_VAR 0 3
38195: PPUSH
38196: LD_INT 1
38198: PPUSH
38199: CALL_OW 275
38203: PUSH
38204: LD_VAR 0 4
38208: PUSH
38209: LD_INT 1
38211: ARRAY
38212: GREATEREQUAL
38213: PUSH
38214: LD_VAR 0 3
38218: PPUSH
38219: LD_INT 2
38221: PPUSH
38222: CALL_OW 275
38226: PUSH
38227: LD_VAR 0 4
38231: PUSH
38232: LD_INT 2
38234: ARRAY
38235: GREATEREQUAL
38236: AND
38237: PUSH
38238: LD_VAR 0 3
38242: PPUSH
38243: LD_INT 3
38245: PPUSH
38246: CALL_OW 275
38250: PUSH
38251: LD_VAR 0 4
38255: PUSH
38256: LD_INT 3
38258: ARRAY
38259: GREATEREQUAL
38260: AND
38261: ST_TO_ADDR
// end ;
38262: LD_VAR 0 2
38266: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
38267: LD_INT 0
38269: PPUSH
38270: PPUSH
38271: PPUSH
// pom := GetBase ( building ) ;
38272: LD_ADDR_VAR 0 4
38276: PUSH
38277: LD_VAR 0 1
38281: PPUSH
38282: CALL_OW 274
38286: ST_TO_ADDR
// if not pom then
38287: LD_VAR 0 4
38291: NOT
38292: IFFALSE 38296
// exit ;
38294: GO 38397
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
38296: LD_ADDR_VAR 0 5
38300: PUSH
38301: LD_VAR 0 2
38305: PPUSH
38306: LD_VAR 0 1
38310: PPUSH
38311: CALL_OW 248
38315: PPUSH
38316: CALL_OW 450
38320: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38321: LD_ADDR_VAR 0 3
38325: PUSH
38326: LD_VAR 0 4
38330: PPUSH
38331: LD_INT 1
38333: PPUSH
38334: CALL_OW 275
38338: PUSH
38339: LD_VAR 0 5
38343: PUSH
38344: LD_INT 1
38346: ARRAY
38347: GREATEREQUAL
38348: PUSH
38349: LD_VAR 0 4
38353: PPUSH
38354: LD_INT 2
38356: PPUSH
38357: CALL_OW 275
38361: PUSH
38362: LD_VAR 0 5
38366: PUSH
38367: LD_INT 2
38369: ARRAY
38370: GREATEREQUAL
38371: AND
38372: PUSH
38373: LD_VAR 0 4
38377: PPUSH
38378: LD_INT 3
38380: PPUSH
38381: CALL_OW 275
38385: PUSH
38386: LD_VAR 0 5
38390: PUSH
38391: LD_INT 3
38393: ARRAY
38394: GREATEREQUAL
38395: AND
38396: ST_TO_ADDR
// end ;
38397: LD_VAR 0 3
38401: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
38402: LD_INT 0
38404: PPUSH
38405: PPUSH
38406: PPUSH
38407: PPUSH
38408: PPUSH
38409: PPUSH
38410: PPUSH
38411: PPUSH
38412: PPUSH
38413: PPUSH
38414: PPUSH
// result := false ;
38415: LD_ADDR_VAR 0 8
38419: PUSH
38420: LD_INT 0
38422: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
38423: LD_VAR 0 5
38427: NOT
38428: PUSH
38429: LD_VAR 0 1
38433: NOT
38434: OR
38435: PUSH
38436: LD_VAR 0 2
38440: NOT
38441: OR
38442: PUSH
38443: LD_VAR 0 3
38447: NOT
38448: OR
38449: IFFALSE 38453
// exit ;
38451: GO 39267
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
38453: LD_ADDR_VAR 0 14
38457: PUSH
38458: LD_VAR 0 1
38462: PPUSH
38463: LD_VAR 0 2
38467: PPUSH
38468: LD_VAR 0 3
38472: PPUSH
38473: LD_VAR 0 4
38477: PPUSH
38478: LD_VAR 0 5
38482: PUSH
38483: LD_INT 1
38485: ARRAY
38486: PPUSH
38487: CALL_OW 248
38491: PPUSH
38492: LD_INT 0
38494: PPUSH
38495: CALL 40504 0 6
38499: ST_TO_ADDR
// if not hexes then
38500: LD_VAR 0 14
38504: NOT
38505: IFFALSE 38509
// exit ;
38507: GO 39267
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
38509: LD_ADDR_VAR 0 17
38513: PUSH
38514: LD_VAR 0 5
38518: PPUSH
38519: LD_INT 22
38521: PUSH
38522: LD_VAR 0 13
38526: PPUSH
38527: CALL_OW 255
38531: PUSH
38532: EMPTY
38533: LIST
38534: LIST
38535: PUSH
38536: LD_INT 2
38538: PUSH
38539: LD_INT 30
38541: PUSH
38542: LD_INT 0
38544: PUSH
38545: EMPTY
38546: LIST
38547: LIST
38548: PUSH
38549: LD_INT 30
38551: PUSH
38552: LD_INT 1
38554: PUSH
38555: EMPTY
38556: LIST
38557: LIST
38558: PUSH
38559: EMPTY
38560: LIST
38561: LIST
38562: LIST
38563: PUSH
38564: EMPTY
38565: LIST
38566: LIST
38567: PPUSH
38568: CALL_OW 72
38572: ST_TO_ADDR
// for i = 1 to hexes do
38573: LD_ADDR_VAR 0 9
38577: PUSH
38578: DOUBLE
38579: LD_INT 1
38581: DEC
38582: ST_TO_ADDR
38583: LD_VAR 0 14
38587: PUSH
38588: FOR_TO
38589: IFFALSE 39265
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
38591: LD_ADDR_VAR 0 13
38595: PUSH
38596: LD_VAR 0 14
38600: PUSH
38601: LD_VAR 0 9
38605: ARRAY
38606: PUSH
38607: LD_INT 1
38609: ARRAY
38610: PPUSH
38611: LD_VAR 0 14
38615: PUSH
38616: LD_VAR 0 9
38620: ARRAY
38621: PUSH
38622: LD_INT 2
38624: ARRAY
38625: PPUSH
38626: CALL_OW 428
38630: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
38631: LD_VAR 0 14
38635: PUSH
38636: LD_VAR 0 9
38640: ARRAY
38641: PUSH
38642: LD_INT 1
38644: ARRAY
38645: PPUSH
38646: LD_VAR 0 14
38650: PUSH
38651: LD_VAR 0 9
38655: ARRAY
38656: PUSH
38657: LD_INT 2
38659: ARRAY
38660: PPUSH
38661: CALL_OW 351
38665: PUSH
38666: LD_VAR 0 14
38670: PUSH
38671: LD_VAR 0 9
38675: ARRAY
38676: PUSH
38677: LD_INT 1
38679: ARRAY
38680: PPUSH
38681: LD_VAR 0 14
38685: PUSH
38686: LD_VAR 0 9
38690: ARRAY
38691: PUSH
38692: LD_INT 2
38694: ARRAY
38695: PPUSH
38696: CALL_OW 488
38700: NOT
38701: OR
38702: PUSH
38703: LD_VAR 0 13
38707: PPUSH
38708: CALL_OW 247
38712: PUSH
38713: LD_INT 3
38715: EQUAL
38716: OR
38717: IFFALSE 38723
// exit ;
38719: POP
38720: POP
38721: GO 39267
// if not tmp then
38723: LD_VAR 0 13
38727: NOT
38728: IFFALSE 38732
// continue ;
38730: GO 38588
// result := true ;
38732: LD_ADDR_VAR 0 8
38736: PUSH
38737: LD_INT 1
38739: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
38740: LD_VAR 0 6
38744: PUSH
38745: LD_VAR 0 13
38749: PPUSH
38750: CALL_OW 247
38754: PUSH
38755: LD_INT 2
38757: EQUAL
38758: AND
38759: PUSH
38760: LD_VAR 0 13
38764: PPUSH
38765: CALL_OW 263
38769: PUSH
38770: LD_INT 1
38772: EQUAL
38773: AND
38774: IFFALSE 38938
// begin if IsDrivenBy ( tmp ) then
38776: LD_VAR 0 13
38780: PPUSH
38781: CALL_OW 311
38785: IFFALSE 38789
// continue ;
38787: GO 38588
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
38789: LD_VAR 0 6
38793: PPUSH
38794: LD_INT 3
38796: PUSH
38797: LD_INT 60
38799: PUSH
38800: EMPTY
38801: LIST
38802: PUSH
38803: EMPTY
38804: LIST
38805: LIST
38806: PUSH
38807: LD_INT 3
38809: PUSH
38810: LD_INT 55
38812: PUSH
38813: EMPTY
38814: LIST
38815: PUSH
38816: EMPTY
38817: LIST
38818: LIST
38819: PUSH
38820: EMPTY
38821: LIST
38822: LIST
38823: PPUSH
38824: CALL_OW 72
38828: IFFALSE 38936
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
38830: LD_ADDR_VAR 0 18
38834: PUSH
38835: LD_VAR 0 6
38839: PPUSH
38840: LD_INT 3
38842: PUSH
38843: LD_INT 60
38845: PUSH
38846: EMPTY
38847: LIST
38848: PUSH
38849: EMPTY
38850: LIST
38851: LIST
38852: PUSH
38853: LD_INT 3
38855: PUSH
38856: LD_INT 55
38858: PUSH
38859: EMPTY
38860: LIST
38861: PUSH
38862: EMPTY
38863: LIST
38864: LIST
38865: PUSH
38866: EMPTY
38867: LIST
38868: LIST
38869: PPUSH
38870: CALL_OW 72
38874: PUSH
38875: LD_INT 1
38877: ARRAY
38878: ST_TO_ADDR
// if IsInUnit ( driver ) then
38879: LD_VAR 0 18
38883: PPUSH
38884: CALL_OW 310
38888: IFFALSE 38899
// ComExit ( driver ) ;
38890: LD_VAR 0 18
38894: PPUSH
38895: CALL 63688 0 1
// AddComEnterUnit ( driver , tmp ) ;
38899: LD_VAR 0 18
38903: PPUSH
38904: LD_VAR 0 13
38908: PPUSH
38909: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
38913: LD_VAR 0 18
38917: PPUSH
38918: LD_VAR 0 7
38922: PPUSH
38923: CALL_OW 173
// AddComExitVehicle ( driver ) ;
38927: LD_VAR 0 18
38931: PPUSH
38932: CALL_OW 181
// end ; continue ;
38936: GO 38588
// end ; if not cleaners or not tmp in cleaners then
38938: LD_VAR 0 6
38942: NOT
38943: PUSH
38944: LD_VAR 0 13
38948: PUSH
38949: LD_VAR 0 6
38953: IN
38954: NOT
38955: OR
38956: IFFALSE 39263
// begin if dep then
38958: LD_VAR 0 17
38962: IFFALSE 39098
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
38964: LD_ADDR_VAR 0 16
38968: PUSH
38969: LD_VAR 0 17
38973: PUSH
38974: LD_INT 1
38976: ARRAY
38977: PPUSH
38978: CALL_OW 250
38982: PPUSH
38983: LD_VAR 0 17
38987: PUSH
38988: LD_INT 1
38990: ARRAY
38991: PPUSH
38992: CALL_OW 254
38996: PPUSH
38997: LD_INT 5
38999: PPUSH
39000: CALL_OW 272
39004: PUSH
39005: LD_VAR 0 17
39009: PUSH
39010: LD_INT 1
39012: ARRAY
39013: PPUSH
39014: CALL_OW 251
39018: PPUSH
39019: LD_VAR 0 17
39023: PUSH
39024: LD_INT 1
39026: ARRAY
39027: PPUSH
39028: CALL_OW 254
39032: PPUSH
39033: LD_INT 5
39035: PPUSH
39036: CALL_OW 273
39040: PUSH
39041: EMPTY
39042: LIST
39043: LIST
39044: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
39045: LD_VAR 0 16
39049: PUSH
39050: LD_INT 1
39052: ARRAY
39053: PPUSH
39054: LD_VAR 0 16
39058: PUSH
39059: LD_INT 2
39061: ARRAY
39062: PPUSH
39063: CALL_OW 488
39067: IFFALSE 39098
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
39069: LD_VAR 0 13
39073: PPUSH
39074: LD_VAR 0 16
39078: PUSH
39079: LD_INT 1
39081: ARRAY
39082: PPUSH
39083: LD_VAR 0 16
39087: PUSH
39088: LD_INT 2
39090: ARRAY
39091: PPUSH
39092: CALL_OW 111
// continue ;
39096: GO 38588
// end ; end ; r := GetDir ( tmp ) ;
39098: LD_ADDR_VAR 0 15
39102: PUSH
39103: LD_VAR 0 13
39107: PPUSH
39108: CALL_OW 254
39112: ST_TO_ADDR
// if r = 5 then
39113: LD_VAR 0 15
39117: PUSH
39118: LD_INT 5
39120: EQUAL
39121: IFFALSE 39131
// r := 0 ;
39123: LD_ADDR_VAR 0 15
39127: PUSH
39128: LD_INT 0
39130: ST_TO_ADDR
// for j = r to 5 do
39131: LD_ADDR_VAR 0 10
39135: PUSH
39136: DOUBLE
39137: LD_VAR 0 15
39141: DEC
39142: ST_TO_ADDR
39143: LD_INT 5
39145: PUSH
39146: FOR_TO
39147: IFFALSE 39261
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
39149: LD_ADDR_VAR 0 11
39153: PUSH
39154: LD_VAR 0 13
39158: PPUSH
39159: CALL_OW 250
39163: PPUSH
39164: LD_VAR 0 10
39168: PPUSH
39169: LD_INT 2
39171: PPUSH
39172: CALL_OW 272
39176: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
39177: LD_ADDR_VAR 0 12
39181: PUSH
39182: LD_VAR 0 13
39186: PPUSH
39187: CALL_OW 251
39191: PPUSH
39192: LD_VAR 0 10
39196: PPUSH
39197: LD_INT 2
39199: PPUSH
39200: CALL_OW 273
39204: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
39205: LD_VAR 0 11
39209: PPUSH
39210: LD_VAR 0 12
39214: PPUSH
39215: CALL_OW 488
39219: PUSH
39220: LD_VAR 0 11
39224: PPUSH
39225: LD_VAR 0 12
39229: PPUSH
39230: CALL_OW 428
39234: NOT
39235: AND
39236: IFFALSE 39259
// begin ComMoveXY ( tmp , _x , _y ) ;
39238: LD_VAR 0 13
39242: PPUSH
39243: LD_VAR 0 11
39247: PPUSH
39248: LD_VAR 0 12
39252: PPUSH
39253: CALL_OW 111
// break ;
39257: GO 39261
// end ; end ;
39259: GO 39146
39261: POP
39262: POP
// end ; end ;
39263: GO 38588
39265: POP
39266: POP
// end ;
39267: LD_VAR 0 8
39271: RET
// export function BuildingTechInvented ( side , btype ) ; begin
39272: LD_INT 0
39274: PPUSH
// result := true ;
39275: LD_ADDR_VAR 0 3
39279: PUSH
39280: LD_INT 1
39282: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
39283: LD_VAR 0 2
39287: PUSH
39288: LD_INT 24
39290: DOUBLE
39291: EQUAL
39292: IFTRUE 39302
39294: LD_INT 33
39296: DOUBLE
39297: EQUAL
39298: IFTRUE 39302
39300: GO 39327
39302: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
39303: LD_ADDR_VAR 0 3
39307: PUSH
39308: LD_INT 32
39310: PPUSH
39311: LD_VAR 0 1
39315: PPUSH
39316: CALL_OW 321
39320: PUSH
39321: LD_INT 2
39323: EQUAL
39324: ST_TO_ADDR
39325: GO 39647
39327: LD_INT 20
39329: DOUBLE
39330: EQUAL
39331: IFTRUE 39335
39333: GO 39360
39335: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
39336: LD_ADDR_VAR 0 3
39340: PUSH
39341: LD_INT 6
39343: PPUSH
39344: LD_VAR 0 1
39348: PPUSH
39349: CALL_OW 321
39353: PUSH
39354: LD_INT 2
39356: EQUAL
39357: ST_TO_ADDR
39358: GO 39647
39360: LD_INT 22
39362: DOUBLE
39363: EQUAL
39364: IFTRUE 39374
39366: LD_INT 36
39368: DOUBLE
39369: EQUAL
39370: IFTRUE 39374
39372: GO 39399
39374: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
39375: LD_ADDR_VAR 0 3
39379: PUSH
39380: LD_INT 15
39382: PPUSH
39383: LD_VAR 0 1
39387: PPUSH
39388: CALL_OW 321
39392: PUSH
39393: LD_INT 2
39395: EQUAL
39396: ST_TO_ADDR
39397: GO 39647
39399: LD_INT 30
39401: DOUBLE
39402: EQUAL
39403: IFTRUE 39407
39405: GO 39432
39407: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
39408: LD_ADDR_VAR 0 3
39412: PUSH
39413: LD_INT 20
39415: PPUSH
39416: LD_VAR 0 1
39420: PPUSH
39421: CALL_OW 321
39425: PUSH
39426: LD_INT 2
39428: EQUAL
39429: ST_TO_ADDR
39430: GO 39647
39432: LD_INT 28
39434: DOUBLE
39435: EQUAL
39436: IFTRUE 39446
39438: LD_INT 21
39440: DOUBLE
39441: EQUAL
39442: IFTRUE 39446
39444: GO 39471
39446: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
39447: LD_ADDR_VAR 0 3
39451: PUSH
39452: LD_INT 21
39454: PPUSH
39455: LD_VAR 0 1
39459: PPUSH
39460: CALL_OW 321
39464: PUSH
39465: LD_INT 2
39467: EQUAL
39468: ST_TO_ADDR
39469: GO 39647
39471: LD_INT 16
39473: DOUBLE
39474: EQUAL
39475: IFTRUE 39479
39477: GO 39506
39479: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
39480: LD_ADDR_VAR 0 3
39484: PUSH
39485: LD_EXP 64
39489: PPUSH
39490: LD_VAR 0 1
39494: PPUSH
39495: CALL_OW 321
39499: PUSH
39500: LD_INT 2
39502: EQUAL
39503: ST_TO_ADDR
39504: GO 39647
39506: LD_INT 19
39508: DOUBLE
39509: EQUAL
39510: IFTRUE 39520
39512: LD_INT 23
39514: DOUBLE
39515: EQUAL
39516: IFTRUE 39520
39518: GO 39547
39520: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
39521: LD_ADDR_VAR 0 3
39525: PUSH
39526: LD_EXP 63
39530: PPUSH
39531: LD_VAR 0 1
39535: PPUSH
39536: CALL_OW 321
39540: PUSH
39541: LD_INT 2
39543: EQUAL
39544: ST_TO_ADDR
39545: GO 39647
39547: LD_INT 17
39549: DOUBLE
39550: EQUAL
39551: IFTRUE 39555
39553: GO 39580
39555: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
39556: LD_ADDR_VAR 0 3
39560: PUSH
39561: LD_INT 39
39563: PPUSH
39564: LD_VAR 0 1
39568: PPUSH
39569: CALL_OW 321
39573: PUSH
39574: LD_INT 2
39576: EQUAL
39577: ST_TO_ADDR
39578: GO 39647
39580: LD_INT 18
39582: DOUBLE
39583: EQUAL
39584: IFTRUE 39588
39586: GO 39613
39588: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
39589: LD_ADDR_VAR 0 3
39593: PUSH
39594: LD_INT 40
39596: PPUSH
39597: LD_VAR 0 1
39601: PPUSH
39602: CALL_OW 321
39606: PUSH
39607: LD_INT 2
39609: EQUAL
39610: ST_TO_ADDR
39611: GO 39647
39613: LD_INT 27
39615: DOUBLE
39616: EQUAL
39617: IFTRUE 39621
39619: GO 39646
39621: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
39622: LD_ADDR_VAR 0 3
39626: PUSH
39627: LD_INT 35
39629: PPUSH
39630: LD_VAR 0 1
39634: PPUSH
39635: CALL_OW 321
39639: PUSH
39640: LD_INT 2
39642: EQUAL
39643: ST_TO_ADDR
39644: GO 39647
39646: POP
// end ;
39647: LD_VAR 0 3
39651: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
39652: LD_INT 0
39654: PPUSH
39655: PPUSH
39656: PPUSH
39657: PPUSH
39658: PPUSH
39659: PPUSH
39660: PPUSH
39661: PPUSH
39662: PPUSH
39663: PPUSH
39664: PPUSH
// result := false ;
39665: LD_ADDR_VAR 0 6
39669: PUSH
39670: LD_INT 0
39672: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
39673: LD_VAR 0 1
39677: NOT
39678: PUSH
39679: LD_VAR 0 1
39683: PPUSH
39684: CALL_OW 266
39688: PUSH
39689: LD_INT 0
39691: PUSH
39692: LD_INT 1
39694: PUSH
39695: EMPTY
39696: LIST
39697: LIST
39698: IN
39699: NOT
39700: OR
39701: PUSH
39702: LD_VAR 0 2
39706: NOT
39707: OR
39708: PUSH
39709: LD_VAR 0 5
39713: PUSH
39714: LD_INT 0
39716: PUSH
39717: LD_INT 1
39719: PUSH
39720: LD_INT 2
39722: PUSH
39723: LD_INT 3
39725: PUSH
39726: LD_INT 4
39728: PUSH
39729: LD_INT 5
39731: PUSH
39732: EMPTY
39733: LIST
39734: LIST
39735: LIST
39736: LIST
39737: LIST
39738: LIST
39739: IN
39740: NOT
39741: OR
39742: PUSH
39743: LD_VAR 0 3
39747: PPUSH
39748: LD_VAR 0 4
39752: PPUSH
39753: CALL_OW 488
39757: NOT
39758: OR
39759: IFFALSE 39763
// exit ;
39761: GO 40499
// side := GetSide ( depot ) ;
39763: LD_ADDR_VAR 0 9
39767: PUSH
39768: LD_VAR 0 1
39772: PPUSH
39773: CALL_OW 255
39777: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
39778: LD_VAR 0 9
39782: PPUSH
39783: LD_VAR 0 2
39787: PPUSH
39788: CALL 39272 0 2
39792: NOT
39793: IFFALSE 39797
// exit ;
39795: GO 40499
// pom := GetBase ( depot ) ;
39797: LD_ADDR_VAR 0 10
39801: PUSH
39802: LD_VAR 0 1
39806: PPUSH
39807: CALL_OW 274
39811: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
39812: LD_ADDR_VAR 0 11
39816: PUSH
39817: LD_VAR 0 2
39821: PPUSH
39822: LD_VAR 0 1
39826: PPUSH
39827: CALL_OW 248
39831: PPUSH
39832: CALL_OW 450
39836: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
39837: LD_VAR 0 10
39841: PPUSH
39842: LD_INT 1
39844: PPUSH
39845: CALL_OW 275
39849: PUSH
39850: LD_VAR 0 11
39854: PUSH
39855: LD_INT 1
39857: ARRAY
39858: GREATEREQUAL
39859: PUSH
39860: LD_VAR 0 10
39864: PPUSH
39865: LD_INT 2
39867: PPUSH
39868: CALL_OW 275
39872: PUSH
39873: LD_VAR 0 11
39877: PUSH
39878: LD_INT 2
39880: ARRAY
39881: GREATEREQUAL
39882: AND
39883: PUSH
39884: LD_VAR 0 10
39888: PPUSH
39889: LD_INT 3
39891: PPUSH
39892: CALL_OW 275
39896: PUSH
39897: LD_VAR 0 11
39901: PUSH
39902: LD_INT 3
39904: ARRAY
39905: GREATEREQUAL
39906: AND
39907: NOT
39908: IFFALSE 39912
// exit ;
39910: GO 40499
// if GetBType ( depot ) = b_depot then
39912: LD_VAR 0 1
39916: PPUSH
39917: CALL_OW 266
39921: PUSH
39922: LD_INT 0
39924: EQUAL
39925: IFFALSE 39937
// dist := 28 else
39927: LD_ADDR_VAR 0 14
39931: PUSH
39932: LD_INT 28
39934: ST_TO_ADDR
39935: GO 39945
// dist := 36 ;
39937: LD_ADDR_VAR 0 14
39941: PUSH
39942: LD_INT 36
39944: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
39945: LD_VAR 0 1
39949: PPUSH
39950: LD_VAR 0 3
39954: PPUSH
39955: LD_VAR 0 4
39959: PPUSH
39960: CALL_OW 297
39964: PUSH
39965: LD_VAR 0 14
39969: GREATER
39970: IFFALSE 39974
// exit ;
39972: GO 40499
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
39974: LD_ADDR_VAR 0 12
39978: PUSH
39979: LD_VAR 0 2
39983: PPUSH
39984: LD_VAR 0 3
39988: PPUSH
39989: LD_VAR 0 4
39993: PPUSH
39994: LD_VAR 0 5
39998: PPUSH
39999: LD_VAR 0 1
40003: PPUSH
40004: CALL_OW 248
40008: PPUSH
40009: LD_INT 0
40011: PPUSH
40012: CALL 40504 0 6
40016: ST_TO_ADDR
// if not hexes then
40017: LD_VAR 0 12
40021: NOT
40022: IFFALSE 40026
// exit ;
40024: GO 40499
// hex := GetHexInfo ( x , y ) ;
40026: LD_ADDR_VAR 0 15
40030: PUSH
40031: LD_VAR 0 3
40035: PPUSH
40036: LD_VAR 0 4
40040: PPUSH
40041: CALL_OW 546
40045: ST_TO_ADDR
// if hex [ 1 ] then
40046: LD_VAR 0 15
40050: PUSH
40051: LD_INT 1
40053: ARRAY
40054: IFFALSE 40058
// exit ;
40056: GO 40499
// height := hex [ 2 ] ;
40058: LD_ADDR_VAR 0 13
40062: PUSH
40063: LD_VAR 0 15
40067: PUSH
40068: LD_INT 2
40070: ARRAY
40071: ST_TO_ADDR
// for i = 1 to hexes do
40072: LD_ADDR_VAR 0 7
40076: PUSH
40077: DOUBLE
40078: LD_INT 1
40080: DEC
40081: ST_TO_ADDR
40082: LD_VAR 0 12
40086: PUSH
40087: FOR_TO
40088: IFFALSE 40418
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
40090: LD_VAR 0 12
40094: PUSH
40095: LD_VAR 0 7
40099: ARRAY
40100: PUSH
40101: LD_INT 1
40103: ARRAY
40104: PPUSH
40105: LD_VAR 0 12
40109: PUSH
40110: LD_VAR 0 7
40114: ARRAY
40115: PUSH
40116: LD_INT 2
40118: ARRAY
40119: PPUSH
40120: CALL_OW 488
40124: NOT
40125: PUSH
40126: LD_VAR 0 12
40130: PUSH
40131: LD_VAR 0 7
40135: ARRAY
40136: PUSH
40137: LD_INT 1
40139: ARRAY
40140: PPUSH
40141: LD_VAR 0 12
40145: PUSH
40146: LD_VAR 0 7
40150: ARRAY
40151: PUSH
40152: LD_INT 2
40154: ARRAY
40155: PPUSH
40156: CALL_OW 428
40160: PUSH
40161: LD_INT 0
40163: GREATER
40164: OR
40165: PUSH
40166: LD_VAR 0 12
40170: PUSH
40171: LD_VAR 0 7
40175: ARRAY
40176: PUSH
40177: LD_INT 1
40179: ARRAY
40180: PPUSH
40181: LD_VAR 0 12
40185: PUSH
40186: LD_VAR 0 7
40190: ARRAY
40191: PUSH
40192: LD_INT 2
40194: ARRAY
40195: PPUSH
40196: CALL_OW 351
40200: OR
40201: IFFALSE 40207
// exit ;
40203: POP
40204: POP
40205: GO 40499
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
40207: LD_ADDR_VAR 0 8
40211: PUSH
40212: LD_VAR 0 12
40216: PUSH
40217: LD_VAR 0 7
40221: ARRAY
40222: PUSH
40223: LD_INT 1
40225: ARRAY
40226: PPUSH
40227: LD_VAR 0 12
40231: PUSH
40232: LD_VAR 0 7
40236: ARRAY
40237: PUSH
40238: LD_INT 2
40240: ARRAY
40241: PPUSH
40242: CALL_OW 546
40246: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
40247: LD_VAR 0 8
40251: PUSH
40252: LD_INT 1
40254: ARRAY
40255: PUSH
40256: LD_VAR 0 8
40260: PUSH
40261: LD_INT 2
40263: ARRAY
40264: PUSH
40265: LD_VAR 0 13
40269: PUSH
40270: LD_INT 2
40272: PLUS
40273: GREATER
40274: OR
40275: PUSH
40276: LD_VAR 0 8
40280: PUSH
40281: LD_INT 2
40283: ARRAY
40284: PUSH
40285: LD_VAR 0 13
40289: PUSH
40290: LD_INT 2
40292: MINUS
40293: LESS
40294: OR
40295: PUSH
40296: LD_VAR 0 8
40300: PUSH
40301: LD_INT 3
40303: ARRAY
40304: PUSH
40305: LD_INT 0
40307: PUSH
40308: LD_INT 8
40310: PUSH
40311: LD_INT 9
40313: PUSH
40314: LD_INT 10
40316: PUSH
40317: LD_INT 11
40319: PUSH
40320: LD_INT 12
40322: PUSH
40323: LD_INT 13
40325: PUSH
40326: LD_INT 16
40328: PUSH
40329: LD_INT 17
40331: PUSH
40332: LD_INT 18
40334: PUSH
40335: LD_INT 19
40337: PUSH
40338: LD_INT 20
40340: PUSH
40341: LD_INT 21
40343: PUSH
40344: EMPTY
40345: LIST
40346: LIST
40347: LIST
40348: LIST
40349: LIST
40350: LIST
40351: LIST
40352: LIST
40353: LIST
40354: LIST
40355: LIST
40356: LIST
40357: LIST
40358: IN
40359: NOT
40360: OR
40361: PUSH
40362: LD_VAR 0 8
40366: PUSH
40367: LD_INT 5
40369: ARRAY
40370: NOT
40371: OR
40372: PUSH
40373: LD_VAR 0 8
40377: PUSH
40378: LD_INT 6
40380: ARRAY
40381: PUSH
40382: LD_INT 1
40384: PUSH
40385: LD_INT 2
40387: PUSH
40388: LD_INT 7
40390: PUSH
40391: LD_INT 9
40393: PUSH
40394: LD_INT 10
40396: PUSH
40397: LD_INT 11
40399: PUSH
40400: EMPTY
40401: LIST
40402: LIST
40403: LIST
40404: LIST
40405: LIST
40406: LIST
40407: IN
40408: NOT
40409: OR
40410: IFFALSE 40416
// exit ;
40412: POP
40413: POP
40414: GO 40499
// end ;
40416: GO 40087
40418: POP
40419: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
40420: LD_VAR 0 9
40424: PPUSH
40425: LD_VAR 0 3
40429: PPUSH
40430: LD_VAR 0 4
40434: PPUSH
40435: LD_INT 20
40437: PPUSH
40438: CALL 32445 0 4
40442: PUSH
40443: LD_INT 4
40445: ARRAY
40446: IFFALSE 40450
// exit ;
40448: GO 40499
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
40450: LD_VAR 0 2
40454: PUSH
40455: LD_INT 29
40457: PUSH
40458: LD_INT 30
40460: PUSH
40461: EMPTY
40462: LIST
40463: LIST
40464: IN
40465: PUSH
40466: LD_VAR 0 3
40470: PPUSH
40471: LD_VAR 0 4
40475: PPUSH
40476: LD_VAR 0 9
40480: PPUSH
40481: CALL_OW 440
40485: NOT
40486: AND
40487: IFFALSE 40491
// exit ;
40489: GO 40499
// result := true ;
40491: LD_ADDR_VAR 0 6
40495: PUSH
40496: LD_INT 1
40498: ST_TO_ADDR
// end ;
40499: LD_VAR 0 6
40503: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
40504: LD_INT 0
40506: PPUSH
40507: PPUSH
40508: PPUSH
40509: PPUSH
40510: PPUSH
40511: PPUSH
40512: PPUSH
40513: PPUSH
40514: PPUSH
40515: PPUSH
40516: PPUSH
40517: PPUSH
40518: PPUSH
40519: PPUSH
40520: PPUSH
40521: PPUSH
40522: PPUSH
40523: PPUSH
40524: PPUSH
40525: PPUSH
40526: PPUSH
40527: PPUSH
40528: PPUSH
40529: PPUSH
40530: PPUSH
40531: PPUSH
40532: PPUSH
40533: PPUSH
40534: PPUSH
40535: PPUSH
40536: PPUSH
40537: PPUSH
40538: PPUSH
40539: PPUSH
40540: PPUSH
40541: PPUSH
40542: PPUSH
40543: PPUSH
40544: PPUSH
40545: PPUSH
40546: PPUSH
40547: PPUSH
40548: PPUSH
40549: PPUSH
40550: PPUSH
40551: PPUSH
40552: PPUSH
40553: PPUSH
40554: PPUSH
40555: PPUSH
40556: PPUSH
40557: PPUSH
40558: PPUSH
40559: PPUSH
40560: PPUSH
40561: PPUSH
40562: PPUSH
40563: PPUSH
// result = [ ] ;
40564: LD_ADDR_VAR 0 7
40568: PUSH
40569: EMPTY
40570: ST_TO_ADDR
// temp_list = [ ] ;
40571: LD_ADDR_VAR 0 9
40575: PUSH
40576: EMPTY
40577: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
40578: LD_VAR 0 4
40582: PUSH
40583: LD_INT 0
40585: PUSH
40586: LD_INT 1
40588: PUSH
40589: LD_INT 2
40591: PUSH
40592: LD_INT 3
40594: PUSH
40595: LD_INT 4
40597: PUSH
40598: LD_INT 5
40600: PUSH
40601: EMPTY
40602: LIST
40603: LIST
40604: LIST
40605: LIST
40606: LIST
40607: LIST
40608: IN
40609: NOT
40610: PUSH
40611: LD_VAR 0 1
40615: PUSH
40616: LD_INT 0
40618: PUSH
40619: LD_INT 1
40621: PUSH
40622: EMPTY
40623: LIST
40624: LIST
40625: IN
40626: PUSH
40627: LD_VAR 0 5
40631: PUSH
40632: LD_INT 1
40634: PUSH
40635: LD_INT 2
40637: PUSH
40638: LD_INT 3
40640: PUSH
40641: EMPTY
40642: LIST
40643: LIST
40644: LIST
40645: IN
40646: NOT
40647: AND
40648: OR
40649: IFFALSE 40653
// exit ;
40651: GO 59044
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
40653: LD_VAR 0 1
40657: PUSH
40658: LD_INT 6
40660: PUSH
40661: LD_INT 7
40663: PUSH
40664: LD_INT 8
40666: PUSH
40667: LD_INT 13
40669: PUSH
40670: LD_INT 12
40672: PUSH
40673: LD_INT 15
40675: PUSH
40676: LD_INT 11
40678: PUSH
40679: LD_INT 14
40681: PUSH
40682: LD_INT 10
40684: PUSH
40685: EMPTY
40686: LIST
40687: LIST
40688: LIST
40689: LIST
40690: LIST
40691: LIST
40692: LIST
40693: LIST
40694: LIST
40695: IN
40696: IFFALSE 40706
// btype = b_lab ;
40698: LD_ADDR_VAR 0 1
40702: PUSH
40703: LD_INT 6
40705: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
40706: LD_VAR 0 6
40710: PUSH
40711: LD_INT 0
40713: PUSH
40714: LD_INT 1
40716: PUSH
40717: LD_INT 2
40719: PUSH
40720: EMPTY
40721: LIST
40722: LIST
40723: LIST
40724: IN
40725: NOT
40726: PUSH
40727: LD_VAR 0 1
40731: PUSH
40732: LD_INT 0
40734: PUSH
40735: LD_INT 1
40737: PUSH
40738: LD_INT 2
40740: PUSH
40741: LD_INT 3
40743: PUSH
40744: LD_INT 6
40746: PUSH
40747: LD_INT 36
40749: PUSH
40750: LD_INT 4
40752: PUSH
40753: LD_INT 5
40755: PUSH
40756: LD_INT 31
40758: PUSH
40759: LD_INT 32
40761: PUSH
40762: LD_INT 33
40764: PUSH
40765: EMPTY
40766: LIST
40767: LIST
40768: LIST
40769: LIST
40770: LIST
40771: LIST
40772: LIST
40773: LIST
40774: LIST
40775: LIST
40776: LIST
40777: IN
40778: NOT
40779: PUSH
40780: LD_VAR 0 6
40784: PUSH
40785: LD_INT 1
40787: EQUAL
40788: AND
40789: OR
40790: PUSH
40791: LD_VAR 0 1
40795: PUSH
40796: LD_INT 2
40798: PUSH
40799: LD_INT 3
40801: PUSH
40802: EMPTY
40803: LIST
40804: LIST
40805: IN
40806: NOT
40807: PUSH
40808: LD_VAR 0 6
40812: PUSH
40813: LD_INT 2
40815: EQUAL
40816: AND
40817: OR
40818: IFFALSE 40828
// mode = 0 ;
40820: LD_ADDR_VAR 0 6
40824: PUSH
40825: LD_INT 0
40827: ST_TO_ADDR
// case mode of 0 :
40828: LD_VAR 0 6
40832: PUSH
40833: LD_INT 0
40835: DOUBLE
40836: EQUAL
40837: IFTRUE 40841
40839: GO 52294
40841: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
40842: LD_ADDR_VAR 0 11
40846: PUSH
40847: LD_INT 0
40849: PUSH
40850: LD_INT 0
40852: PUSH
40853: EMPTY
40854: LIST
40855: LIST
40856: PUSH
40857: LD_INT 0
40859: PUSH
40860: LD_INT 1
40862: NEG
40863: PUSH
40864: EMPTY
40865: LIST
40866: LIST
40867: PUSH
40868: LD_INT 1
40870: PUSH
40871: LD_INT 0
40873: PUSH
40874: EMPTY
40875: LIST
40876: LIST
40877: PUSH
40878: LD_INT 1
40880: PUSH
40881: LD_INT 1
40883: PUSH
40884: EMPTY
40885: LIST
40886: LIST
40887: PUSH
40888: LD_INT 0
40890: PUSH
40891: LD_INT 1
40893: PUSH
40894: EMPTY
40895: LIST
40896: LIST
40897: PUSH
40898: LD_INT 1
40900: NEG
40901: PUSH
40902: LD_INT 0
40904: PUSH
40905: EMPTY
40906: LIST
40907: LIST
40908: PUSH
40909: LD_INT 1
40911: NEG
40912: PUSH
40913: LD_INT 1
40915: NEG
40916: PUSH
40917: EMPTY
40918: LIST
40919: LIST
40920: PUSH
40921: LD_INT 1
40923: NEG
40924: PUSH
40925: LD_INT 2
40927: NEG
40928: PUSH
40929: EMPTY
40930: LIST
40931: LIST
40932: PUSH
40933: LD_INT 0
40935: PUSH
40936: LD_INT 2
40938: NEG
40939: PUSH
40940: EMPTY
40941: LIST
40942: LIST
40943: PUSH
40944: LD_INT 1
40946: PUSH
40947: LD_INT 1
40949: NEG
40950: PUSH
40951: EMPTY
40952: LIST
40953: LIST
40954: PUSH
40955: LD_INT 1
40957: PUSH
40958: LD_INT 2
40960: PUSH
40961: EMPTY
40962: LIST
40963: LIST
40964: PUSH
40965: LD_INT 0
40967: PUSH
40968: LD_INT 2
40970: PUSH
40971: EMPTY
40972: LIST
40973: LIST
40974: PUSH
40975: LD_INT 1
40977: NEG
40978: PUSH
40979: LD_INT 1
40981: PUSH
40982: EMPTY
40983: LIST
40984: LIST
40985: PUSH
40986: LD_INT 1
40988: PUSH
40989: LD_INT 3
40991: PUSH
40992: EMPTY
40993: LIST
40994: LIST
40995: PUSH
40996: LD_INT 0
40998: PUSH
40999: LD_INT 3
41001: PUSH
41002: EMPTY
41003: LIST
41004: LIST
41005: PUSH
41006: LD_INT 1
41008: NEG
41009: PUSH
41010: LD_INT 2
41012: PUSH
41013: EMPTY
41014: LIST
41015: LIST
41016: PUSH
41017: EMPTY
41018: LIST
41019: LIST
41020: LIST
41021: LIST
41022: LIST
41023: LIST
41024: LIST
41025: LIST
41026: LIST
41027: LIST
41028: LIST
41029: LIST
41030: LIST
41031: LIST
41032: LIST
41033: LIST
41034: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41035: LD_ADDR_VAR 0 12
41039: PUSH
41040: LD_INT 0
41042: PUSH
41043: LD_INT 0
41045: PUSH
41046: EMPTY
41047: LIST
41048: LIST
41049: PUSH
41050: LD_INT 0
41052: PUSH
41053: LD_INT 1
41055: NEG
41056: PUSH
41057: EMPTY
41058: LIST
41059: LIST
41060: PUSH
41061: LD_INT 1
41063: PUSH
41064: LD_INT 0
41066: PUSH
41067: EMPTY
41068: LIST
41069: LIST
41070: PUSH
41071: LD_INT 1
41073: PUSH
41074: LD_INT 1
41076: PUSH
41077: EMPTY
41078: LIST
41079: LIST
41080: PUSH
41081: LD_INT 0
41083: PUSH
41084: LD_INT 1
41086: PUSH
41087: EMPTY
41088: LIST
41089: LIST
41090: PUSH
41091: LD_INT 1
41093: NEG
41094: PUSH
41095: LD_INT 0
41097: PUSH
41098: EMPTY
41099: LIST
41100: LIST
41101: PUSH
41102: LD_INT 1
41104: NEG
41105: PUSH
41106: LD_INT 1
41108: NEG
41109: PUSH
41110: EMPTY
41111: LIST
41112: LIST
41113: PUSH
41114: LD_INT 1
41116: PUSH
41117: LD_INT 1
41119: NEG
41120: PUSH
41121: EMPTY
41122: LIST
41123: LIST
41124: PUSH
41125: LD_INT 2
41127: PUSH
41128: LD_INT 0
41130: PUSH
41131: EMPTY
41132: LIST
41133: LIST
41134: PUSH
41135: LD_INT 2
41137: PUSH
41138: LD_INT 1
41140: PUSH
41141: EMPTY
41142: LIST
41143: LIST
41144: PUSH
41145: LD_INT 1
41147: NEG
41148: PUSH
41149: LD_INT 1
41151: PUSH
41152: EMPTY
41153: LIST
41154: LIST
41155: PUSH
41156: LD_INT 2
41158: NEG
41159: PUSH
41160: LD_INT 0
41162: PUSH
41163: EMPTY
41164: LIST
41165: LIST
41166: PUSH
41167: LD_INT 2
41169: NEG
41170: PUSH
41171: LD_INT 1
41173: NEG
41174: PUSH
41175: EMPTY
41176: LIST
41177: LIST
41178: PUSH
41179: LD_INT 2
41181: NEG
41182: PUSH
41183: LD_INT 1
41185: PUSH
41186: EMPTY
41187: LIST
41188: LIST
41189: PUSH
41190: LD_INT 3
41192: NEG
41193: PUSH
41194: LD_INT 0
41196: PUSH
41197: EMPTY
41198: LIST
41199: LIST
41200: PUSH
41201: LD_INT 3
41203: NEG
41204: PUSH
41205: LD_INT 1
41207: NEG
41208: PUSH
41209: EMPTY
41210: LIST
41211: LIST
41212: PUSH
41213: EMPTY
41214: LIST
41215: LIST
41216: LIST
41217: LIST
41218: LIST
41219: LIST
41220: LIST
41221: LIST
41222: LIST
41223: LIST
41224: LIST
41225: LIST
41226: LIST
41227: LIST
41228: LIST
41229: LIST
41230: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41231: LD_ADDR_VAR 0 13
41235: PUSH
41236: LD_INT 0
41238: PUSH
41239: LD_INT 0
41241: PUSH
41242: EMPTY
41243: LIST
41244: LIST
41245: PUSH
41246: LD_INT 0
41248: PUSH
41249: LD_INT 1
41251: NEG
41252: PUSH
41253: EMPTY
41254: LIST
41255: LIST
41256: PUSH
41257: LD_INT 1
41259: PUSH
41260: LD_INT 0
41262: PUSH
41263: EMPTY
41264: LIST
41265: LIST
41266: PUSH
41267: LD_INT 1
41269: PUSH
41270: LD_INT 1
41272: PUSH
41273: EMPTY
41274: LIST
41275: LIST
41276: PUSH
41277: LD_INT 0
41279: PUSH
41280: LD_INT 1
41282: PUSH
41283: EMPTY
41284: LIST
41285: LIST
41286: PUSH
41287: LD_INT 1
41289: NEG
41290: PUSH
41291: LD_INT 0
41293: PUSH
41294: EMPTY
41295: LIST
41296: LIST
41297: PUSH
41298: LD_INT 1
41300: NEG
41301: PUSH
41302: LD_INT 1
41304: NEG
41305: PUSH
41306: EMPTY
41307: LIST
41308: LIST
41309: PUSH
41310: LD_INT 1
41312: NEG
41313: PUSH
41314: LD_INT 2
41316: NEG
41317: PUSH
41318: EMPTY
41319: LIST
41320: LIST
41321: PUSH
41322: LD_INT 2
41324: PUSH
41325: LD_INT 1
41327: PUSH
41328: EMPTY
41329: LIST
41330: LIST
41331: PUSH
41332: LD_INT 2
41334: PUSH
41335: LD_INT 2
41337: PUSH
41338: EMPTY
41339: LIST
41340: LIST
41341: PUSH
41342: LD_INT 1
41344: PUSH
41345: LD_INT 2
41347: PUSH
41348: EMPTY
41349: LIST
41350: LIST
41351: PUSH
41352: LD_INT 2
41354: NEG
41355: PUSH
41356: LD_INT 1
41358: NEG
41359: PUSH
41360: EMPTY
41361: LIST
41362: LIST
41363: PUSH
41364: LD_INT 2
41366: NEG
41367: PUSH
41368: LD_INT 2
41370: NEG
41371: PUSH
41372: EMPTY
41373: LIST
41374: LIST
41375: PUSH
41376: LD_INT 2
41378: NEG
41379: PUSH
41380: LD_INT 3
41382: NEG
41383: PUSH
41384: EMPTY
41385: LIST
41386: LIST
41387: PUSH
41388: LD_INT 3
41390: NEG
41391: PUSH
41392: LD_INT 2
41394: NEG
41395: PUSH
41396: EMPTY
41397: LIST
41398: LIST
41399: PUSH
41400: LD_INT 3
41402: NEG
41403: PUSH
41404: LD_INT 3
41406: NEG
41407: PUSH
41408: EMPTY
41409: LIST
41410: LIST
41411: PUSH
41412: EMPTY
41413: LIST
41414: LIST
41415: LIST
41416: LIST
41417: LIST
41418: LIST
41419: LIST
41420: LIST
41421: LIST
41422: LIST
41423: LIST
41424: LIST
41425: LIST
41426: LIST
41427: LIST
41428: LIST
41429: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
41430: LD_ADDR_VAR 0 14
41434: PUSH
41435: LD_INT 0
41437: PUSH
41438: LD_INT 0
41440: PUSH
41441: EMPTY
41442: LIST
41443: LIST
41444: PUSH
41445: LD_INT 0
41447: PUSH
41448: LD_INT 1
41450: NEG
41451: PUSH
41452: EMPTY
41453: LIST
41454: LIST
41455: PUSH
41456: LD_INT 1
41458: PUSH
41459: LD_INT 0
41461: PUSH
41462: EMPTY
41463: LIST
41464: LIST
41465: PUSH
41466: LD_INT 1
41468: PUSH
41469: LD_INT 1
41471: PUSH
41472: EMPTY
41473: LIST
41474: LIST
41475: PUSH
41476: LD_INT 0
41478: PUSH
41479: LD_INT 1
41481: PUSH
41482: EMPTY
41483: LIST
41484: LIST
41485: PUSH
41486: LD_INT 1
41488: NEG
41489: PUSH
41490: LD_INT 0
41492: PUSH
41493: EMPTY
41494: LIST
41495: LIST
41496: PUSH
41497: LD_INT 1
41499: NEG
41500: PUSH
41501: LD_INT 1
41503: NEG
41504: PUSH
41505: EMPTY
41506: LIST
41507: LIST
41508: PUSH
41509: LD_INT 1
41511: NEG
41512: PUSH
41513: LD_INT 2
41515: NEG
41516: PUSH
41517: EMPTY
41518: LIST
41519: LIST
41520: PUSH
41521: LD_INT 0
41523: PUSH
41524: LD_INT 2
41526: NEG
41527: PUSH
41528: EMPTY
41529: LIST
41530: LIST
41531: PUSH
41532: LD_INT 1
41534: PUSH
41535: LD_INT 1
41537: NEG
41538: PUSH
41539: EMPTY
41540: LIST
41541: LIST
41542: PUSH
41543: LD_INT 1
41545: PUSH
41546: LD_INT 2
41548: PUSH
41549: EMPTY
41550: LIST
41551: LIST
41552: PUSH
41553: LD_INT 0
41555: PUSH
41556: LD_INT 2
41558: PUSH
41559: EMPTY
41560: LIST
41561: LIST
41562: PUSH
41563: LD_INT 1
41565: NEG
41566: PUSH
41567: LD_INT 1
41569: PUSH
41570: EMPTY
41571: LIST
41572: LIST
41573: PUSH
41574: LD_INT 1
41576: NEG
41577: PUSH
41578: LD_INT 3
41580: NEG
41581: PUSH
41582: EMPTY
41583: LIST
41584: LIST
41585: PUSH
41586: LD_INT 0
41588: PUSH
41589: LD_INT 3
41591: NEG
41592: PUSH
41593: EMPTY
41594: LIST
41595: LIST
41596: PUSH
41597: LD_INT 1
41599: PUSH
41600: LD_INT 2
41602: NEG
41603: PUSH
41604: EMPTY
41605: LIST
41606: LIST
41607: PUSH
41608: EMPTY
41609: LIST
41610: LIST
41611: LIST
41612: LIST
41613: LIST
41614: LIST
41615: LIST
41616: LIST
41617: LIST
41618: LIST
41619: LIST
41620: LIST
41621: LIST
41622: LIST
41623: LIST
41624: LIST
41625: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
41626: LD_ADDR_VAR 0 15
41630: PUSH
41631: LD_INT 0
41633: PUSH
41634: LD_INT 0
41636: PUSH
41637: EMPTY
41638: LIST
41639: LIST
41640: PUSH
41641: LD_INT 0
41643: PUSH
41644: LD_INT 1
41646: NEG
41647: PUSH
41648: EMPTY
41649: LIST
41650: LIST
41651: PUSH
41652: LD_INT 1
41654: PUSH
41655: LD_INT 0
41657: PUSH
41658: EMPTY
41659: LIST
41660: LIST
41661: PUSH
41662: LD_INT 1
41664: PUSH
41665: LD_INT 1
41667: PUSH
41668: EMPTY
41669: LIST
41670: LIST
41671: PUSH
41672: LD_INT 0
41674: PUSH
41675: LD_INT 1
41677: PUSH
41678: EMPTY
41679: LIST
41680: LIST
41681: PUSH
41682: LD_INT 1
41684: NEG
41685: PUSH
41686: LD_INT 0
41688: PUSH
41689: EMPTY
41690: LIST
41691: LIST
41692: PUSH
41693: LD_INT 1
41695: NEG
41696: PUSH
41697: LD_INT 1
41699: NEG
41700: PUSH
41701: EMPTY
41702: LIST
41703: LIST
41704: PUSH
41705: LD_INT 1
41707: PUSH
41708: LD_INT 1
41710: NEG
41711: PUSH
41712: EMPTY
41713: LIST
41714: LIST
41715: PUSH
41716: LD_INT 2
41718: PUSH
41719: LD_INT 0
41721: PUSH
41722: EMPTY
41723: LIST
41724: LIST
41725: PUSH
41726: LD_INT 2
41728: PUSH
41729: LD_INT 1
41731: PUSH
41732: EMPTY
41733: LIST
41734: LIST
41735: PUSH
41736: LD_INT 1
41738: NEG
41739: PUSH
41740: LD_INT 1
41742: PUSH
41743: EMPTY
41744: LIST
41745: LIST
41746: PUSH
41747: LD_INT 2
41749: NEG
41750: PUSH
41751: LD_INT 0
41753: PUSH
41754: EMPTY
41755: LIST
41756: LIST
41757: PUSH
41758: LD_INT 2
41760: NEG
41761: PUSH
41762: LD_INT 1
41764: NEG
41765: PUSH
41766: EMPTY
41767: LIST
41768: LIST
41769: PUSH
41770: LD_INT 2
41772: PUSH
41773: LD_INT 1
41775: NEG
41776: PUSH
41777: EMPTY
41778: LIST
41779: LIST
41780: PUSH
41781: LD_INT 3
41783: PUSH
41784: LD_INT 0
41786: PUSH
41787: EMPTY
41788: LIST
41789: LIST
41790: PUSH
41791: LD_INT 3
41793: PUSH
41794: LD_INT 1
41796: PUSH
41797: EMPTY
41798: LIST
41799: LIST
41800: PUSH
41801: EMPTY
41802: LIST
41803: LIST
41804: LIST
41805: LIST
41806: LIST
41807: LIST
41808: LIST
41809: LIST
41810: LIST
41811: LIST
41812: LIST
41813: LIST
41814: LIST
41815: LIST
41816: LIST
41817: LIST
41818: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
41819: LD_ADDR_VAR 0 16
41823: PUSH
41824: LD_INT 0
41826: PUSH
41827: LD_INT 0
41829: PUSH
41830: EMPTY
41831: LIST
41832: LIST
41833: PUSH
41834: LD_INT 0
41836: PUSH
41837: LD_INT 1
41839: NEG
41840: PUSH
41841: EMPTY
41842: LIST
41843: LIST
41844: PUSH
41845: LD_INT 1
41847: PUSH
41848: LD_INT 0
41850: PUSH
41851: EMPTY
41852: LIST
41853: LIST
41854: PUSH
41855: LD_INT 1
41857: PUSH
41858: LD_INT 1
41860: PUSH
41861: EMPTY
41862: LIST
41863: LIST
41864: PUSH
41865: LD_INT 0
41867: PUSH
41868: LD_INT 1
41870: PUSH
41871: EMPTY
41872: LIST
41873: LIST
41874: PUSH
41875: LD_INT 1
41877: NEG
41878: PUSH
41879: LD_INT 0
41881: PUSH
41882: EMPTY
41883: LIST
41884: LIST
41885: PUSH
41886: LD_INT 1
41888: NEG
41889: PUSH
41890: LD_INT 1
41892: NEG
41893: PUSH
41894: EMPTY
41895: LIST
41896: LIST
41897: PUSH
41898: LD_INT 1
41900: NEG
41901: PUSH
41902: LD_INT 2
41904: NEG
41905: PUSH
41906: EMPTY
41907: LIST
41908: LIST
41909: PUSH
41910: LD_INT 2
41912: PUSH
41913: LD_INT 1
41915: PUSH
41916: EMPTY
41917: LIST
41918: LIST
41919: PUSH
41920: LD_INT 2
41922: PUSH
41923: LD_INT 2
41925: PUSH
41926: EMPTY
41927: LIST
41928: LIST
41929: PUSH
41930: LD_INT 1
41932: PUSH
41933: LD_INT 2
41935: PUSH
41936: EMPTY
41937: LIST
41938: LIST
41939: PUSH
41940: LD_INT 2
41942: NEG
41943: PUSH
41944: LD_INT 1
41946: NEG
41947: PUSH
41948: EMPTY
41949: LIST
41950: LIST
41951: PUSH
41952: LD_INT 2
41954: NEG
41955: PUSH
41956: LD_INT 2
41958: NEG
41959: PUSH
41960: EMPTY
41961: LIST
41962: LIST
41963: PUSH
41964: LD_INT 3
41966: PUSH
41967: LD_INT 2
41969: PUSH
41970: EMPTY
41971: LIST
41972: LIST
41973: PUSH
41974: LD_INT 3
41976: PUSH
41977: LD_INT 3
41979: PUSH
41980: EMPTY
41981: LIST
41982: LIST
41983: PUSH
41984: LD_INT 2
41986: PUSH
41987: LD_INT 3
41989: PUSH
41990: EMPTY
41991: LIST
41992: LIST
41993: PUSH
41994: EMPTY
41995: LIST
41996: LIST
41997: LIST
41998: LIST
41999: LIST
42000: LIST
42001: LIST
42002: LIST
42003: LIST
42004: LIST
42005: LIST
42006: LIST
42007: LIST
42008: LIST
42009: LIST
42010: LIST
42011: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42012: LD_ADDR_VAR 0 17
42016: PUSH
42017: LD_INT 0
42019: PUSH
42020: LD_INT 0
42022: PUSH
42023: EMPTY
42024: LIST
42025: LIST
42026: PUSH
42027: LD_INT 0
42029: PUSH
42030: LD_INT 1
42032: NEG
42033: PUSH
42034: EMPTY
42035: LIST
42036: LIST
42037: PUSH
42038: LD_INT 1
42040: PUSH
42041: LD_INT 0
42043: PUSH
42044: EMPTY
42045: LIST
42046: LIST
42047: PUSH
42048: LD_INT 1
42050: PUSH
42051: LD_INT 1
42053: PUSH
42054: EMPTY
42055: LIST
42056: LIST
42057: PUSH
42058: LD_INT 0
42060: PUSH
42061: LD_INT 1
42063: PUSH
42064: EMPTY
42065: LIST
42066: LIST
42067: PUSH
42068: LD_INT 1
42070: NEG
42071: PUSH
42072: LD_INT 0
42074: PUSH
42075: EMPTY
42076: LIST
42077: LIST
42078: PUSH
42079: LD_INT 1
42081: NEG
42082: PUSH
42083: LD_INT 1
42085: NEG
42086: PUSH
42087: EMPTY
42088: LIST
42089: LIST
42090: PUSH
42091: LD_INT 1
42093: NEG
42094: PUSH
42095: LD_INT 2
42097: NEG
42098: PUSH
42099: EMPTY
42100: LIST
42101: LIST
42102: PUSH
42103: LD_INT 0
42105: PUSH
42106: LD_INT 2
42108: NEG
42109: PUSH
42110: EMPTY
42111: LIST
42112: LIST
42113: PUSH
42114: LD_INT 1
42116: PUSH
42117: LD_INT 1
42119: NEG
42120: PUSH
42121: EMPTY
42122: LIST
42123: LIST
42124: PUSH
42125: LD_INT 2
42127: PUSH
42128: LD_INT 0
42130: PUSH
42131: EMPTY
42132: LIST
42133: LIST
42134: PUSH
42135: LD_INT 2
42137: PUSH
42138: LD_INT 1
42140: PUSH
42141: EMPTY
42142: LIST
42143: LIST
42144: PUSH
42145: LD_INT 2
42147: PUSH
42148: LD_INT 2
42150: PUSH
42151: EMPTY
42152: LIST
42153: LIST
42154: PUSH
42155: LD_INT 1
42157: PUSH
42158: LD_INT 2
42160: PUSH
42161: EMPTY
42162: LIST
42163: LIST
42164: PUSH
42165: LD_INT 0
42167: PUSH
42168: LD_INT 2
42170: PUSH
42171: EMPTY
42172: LIST
42173: LIST
42174: PUSH
42175: LD_INT 1
42177: NEG
42178: PUSH
42179: LD_INT 1
42181: PUSH
42182: EMPTY
42183: LIST
42184: LIST
42185: PUSH
42186: LD_INT 2
42188: NEG
42189: PUSH
42190: LD_INT 0
42192: PUSH
42193: EMPTY
42194: LIST
42195: LIST
42196: PUSH
42197: LD_INT 2
42199: NEG
42200: PUSH
42201: LD_INT 1
42203: NEG
42204: PUSH
42205: EMPTY
42206: LIST
42207: LIST
42208: PUSH
42209: LD_INT 2
42211: NEG
42212: PUSH
42213: LD_INT 2
42215: NEG
42216: PUSH
42217: EMPTY
42218: LIST
42219: LIST
42220: PUSH
42221: EMPTY
42222: LIST
42223: LIST
42224: LIST
42225: LIST
42226: LIST
42227: LIST
42228: LIST
42229: LIST
42230: LIST
42231: LIST
42232: LIST
42233: LIST
42234: LIST
42235: LIST
42236: LIST
42237: LIST
42238: LIST
42239: LIST
42240: LIST
42241: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42242: LD_ADDR_VAR 0 18
42246: PUSH
42247: LD_INT 0
42249: PUSH
42250: LD_INT 0
42252: PUSH
42253: EMPTY
42254: LIST
42255: LIST
42256: PUSH
42257: LD_INT 0
42259: PUSH
42260: LD_INT 1
42262: NEG
42263: PUSH
42264: EMPTY
42265: LIST
42266: LIST
42267: PUSH
42268: LD_INT 1
42270: PUSH
42271: LD_INT 0
42273: PUSH
42274: EMPTY
42275: LIST
42276: LIST
42277: PUSH
42278: LD_INT 1
42280: PUSH
42281: LD_INT 1
42283: PUSH
42284: EMPTY
42285: LIST
42286: LIST
42287: PUSH
42288: LD_INT 0
42290: PUSH
42291: LD_INT 1
42293: PUSH
42294: EMPTY
42295: LIST
42296: LIST
42297: PUSH
42298: LD_INT 1
42300: NEG
42301: PUSH
42302: LD_INT 0
42304: PUSH
42305: EMPTY
42306: LIST
42307: LIST
42308: PUSH
42309: LD_INT 1
42311: NEG
42312: PUSH
42313: LD_INT 1
42315: NEG
42316: PUSH
42317: EMPTY
42318: LIST
42319: LIST
42320: PUSH
42321: LD_INT 1
42323: NEG
42324: PUSH
42325: LD_INT 2
42327: NEG
42328: PUSH
42329: EMPTY
42330: LIST
42331: LIST
42332: PUSH
42333: LD_INT 0
42335: PUSH
42336: LD_INT 2
42338: NEG
42339: PUSH
42340: EMPTY
42341: LIST
42342: LIST
42343: PUSH
42344: LD_INT 1
42346: PUSH
42347: LD_INT 1
42349: NEG
42350: PUSH
42351: EMPTY
42352: LIST
42353: LIST
42354: PUSH
42355: LD_INT 2
42357: PUSH
42358: LD_INT 0
42360: PUSH
42361: EMPTY
42362: LIST
42363: LIST
42364: PUSH
42365: LD_INT 2
42367: PUSH
42368: LD_INT 1
42370: PUSH
42371: EMPTY
42372: LIST
42373: LIST
42374: PUSH
42375: LD_INT 2
42377: PUSH
42378: LD_INT 2
42380: PUSH
42381: EMPTY
42382: LIST
42383: LIST
42384: PUSH
42385: LD_INT 1
42387: PUSH
42388: LD_INT 2
42390: PUSH
42391: EMPTY
42392: LIST
42393: LIST
42394: PUSH
42395: LD_INT 0
42397: PUSH
42398: LD_INT 2
42400: PUSH
42401: EMPTY
42402: LIST
42403: LIST
42404: PUSH
42405: LD_INT 1
42407: NEG
42408: PUSH
42409: LD_INT 1
42411: PUSH
42412: EMPTY
42413: LIST
42414: LIST
42415: PUSH
42416: LD_INT 2
42418: NEG
42419: PUSH
42420: LD_INT 0
42422: PUSH
42423: EMPTY
42424: LIST
42425: LIST
42426: PUSH
42427: LD_INT 2
42429: NEG
42430: PUSH
42431: LD_INT 1
42433: NEG
42434: PUSH
42435: EMPTY
42436: LIST
42437: LIST
42438: PUSH
42439: LD_INT 2
42441: NEG
42442: PUSH
42443: LD_INT 2
42445: NEG
42446: PUSH
42447: EMPTY
42448: LIST
42449: LIST
42450: PUSH
42451: EMPTY
42452: LIST
42453: LIST
42454: LIST
42455: LIST
42456: LIST
42457: LIST
42458: LIST
42459: LIST
42460: LIST
42461: LIST
42462: LIST
42463: LIST
42464: LIST
42465: LIST
42466: LIST
42467: LIST
42468: LIST
42469: LIST
42470: LIST
42471: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42472: LD_ADDR_VAR 0 19
42476: PUSH
42477: LD_INT 0
42479: PUSH
42480: LD_INT 0
42482: PUSH
42483: EMPTY
42484: LIST
42485: LIST
42486: PUSH
42487: LD_INT 0
42489: PUSH
42490: LD_INT 1
42492: NEG
42493: PUSH
42494: EMPTY
42495: LIST
42496: LIST
42497: PUSH
42498: LD_INT 1
42500: PUSH
42501: LD_INT 0
42503: PUSH
42504: EMPTY
42505: LIST
42506: LIST
42507: PUSH
42508: LD_INT 1
42510: PUSH
42511: LD_INT 1
42513: PUSH
42514: EMPTY
42515: LIST
42516: LIST
42517: PUSH
42518: LD_INT 0
42520: PUSH
42521: LD_INT 1
42523: PUSH
42524: EMPTY
42525: LIST
42526: LIST
42527: PUSH
42528: LD_INT 1
42530: NEG
42531: PUSH
42532: LD_INT 0
42534: PUSH
42535: EMPTY
42536: LIST
42537: LIST
42538: PUSH
42539: LD_INT 1
42541: NEG
42542: PUSH
42543: LD_INT 1
42545: NEG
42546: PUSH
42547: EMPTY
42548: LIST
42549: LIST
42550: PUSH
42551: LD_INT 1
42553: NEG
42554: PUSH
42555: LD_INT 2
42557: NEG
42558: PUSH
42559: EMPTY
42560: LIST
42561: LIST
42562: PUSH
42563: LD_INT 0
42565: PUSH
42566: LD_INT 2
42568: NEG
42569: PUSH
42570: EMPTY
42571: LIST
42572: LIST
42573: PUSH
42574: LD_INT 1
42576: PUSH
42577: LD_INT 1
42579: NEG
42580: PUSH
42581: EMPTY
42582: LIST
42583: LIST
42584: PUSH
42585: LD_INT 2
42587: PUSH
42588: LD_INT 0
42590: PUSH
42591: EMPTY
42592: LIST
42593: LIST
42594: PUSH
42595: LD_INT 2
42597: PUSH
42598: LD_INT 1
42600: PUSH
42601: EMPTY
42602: LIST
42603: LIST
42604: PUSH
42605: LD_INT 2
42607: PUSH
42608: LD_INT 2
42610: PUSH
42611: EMPTY
42612: LIST
42613: LIST
42614: PUSH
42615: LD_INT 1
42617: PUSH
42618: LD_INT 2
42620: PUSH
42621: EMPTY
42622: LIST
42623: LIST
42624: PUSH
42625: LD_INT 0
42627: PUSH
42628: LD_INT 2
42630: PUSH
42631: EMPTY
42632: LIST
42633: LIST
42634: PUSH
42635: LD_INT 1
42637: NEG
42638: PUSH
42639: LD_INT 1
42641: PUSH
42642: EMPTY
42643: LIST
42644: LIST
42645: PUSH
42646: LD_INT 2
42648: NEG
42649: PUSH
42650: LD_INT 0
42652: PUSH
42653: EMPTY
42654: LIST
42655: LIST
42656: PUSH
42657: LD_INT 2
42659: NEG
42660: PUSH
42661: LD_INT 1
42663: NEG
42664: PUSH
42665: EMPTY
42666: LIST
42667: LIST
42668: PUSH
42669: LD_INT 2
42671: NEG
42672: PUSH
42673: LD_INT 2
42675: NEG
42676: PUSH
42677: EMPTY
42678: LIST
42679: LIST
42680: PUSH
42681: EMPTY
42682: LIST
42683: LIST
42684: LIST
42685: LIST
42686: LIST
42687: LIST
42688: LIST
42689: LIST
42690: LIST
42691: LIST
42692: LIST
42693: LIST
42694: LIST
42695: LIST
42696: LIST
42697: LIST
42698: LIST
42699: LIST
42700: LIST
42701: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42702: LD_ADDR_VAR 0 20
42706: PUSH
42707: LD_INT 0
42709: PUSH
42710: LD_INT 0
42712: PUSH
42713: EMPTY
42714: LIST
42715: LIST
42716: PUSH
42717: LD_INT 0
42719: PUSH
42720: LD_INT 1
42722: NEG
42723: PUSH
42724: EMPTY
42725: LIST
42726: LIST
42727: PUSH
42728: LD_INT 1
42730: PUSH
42731: LD_INT 0
42733: PUSH
42734: EMPTY
42735: LIST
42736: LIST
42737: PUSH
42738: LD_INT 1
42740: PUSH
42741: LD_INT 1
42743: PUSH
42744: EMPTY
42745: LIST
42746: LIST
42747: PUSH
42748: LD_INT 0
42750: PUSH
42751: LD_INT 1
42753: PUSH
42754: EMPTY
42755: LIST
42756: LIST
42757: PUSH
42758: LD_INT 1
42760: NEG
42761: PUSH
42762: LD_INT 0
42764: PUSH
42765: EMPTY
42766: LIST
42767: LIST
42768: PUSH
42769: LD_INT 1
42771: NEG
42772: PUSH
42773: LD_INT 1
42775: NEG
42776: PUSH
42777: EMPTY
42778: LIST
42779: LIST
42780: PUSH
42781: LD_INT 1
42783: NEG
42784: PUSH
42785: LD_INT 2
42787: NEG
42788: PUSH
42789: EMPTY
42790: LIST
42791: LIST
42792: PUSH
42793: LD_INT 0
42795: PUSH
42796: LD_INT 2
42798: NEG
42799: PUSH
42800: EMPTY
42801: LIST
42802: LIST
42803: PUSH
42804: LD_INT 1
42806: PUSH
42807: LD_INT 1
42809: NEG
42810: PUSH
42811: EMPTY
42812: LIST
42813: LIST
42814: PUSH
42815: LD_INT 2
42817: PUSH
42818: LD_INT 0
42820: PUSH
42821: EMPTY
42822: LIST
42823: LIST
42824: PUSH
42825: LD_INT 2
42827: PUSH
42828: LD_INT 1
42830: PUSH
42831: EMPTY
42832: LIST
42833: LIST
42834: PUSH
42835: LD_INT 2
42837: PUSH
42838: LD_INT 2
42840: PUSH
42841: EMPTY
42842: LIST
42843: LIST
42844: PUSH
42845: LD_INT 1
42847: PUSH
42848: LD_INT 2
42850: PUSH
42851: EMPTY
42852: LIST
42853: LIST
42854: PUSH
42855: LD_INT 0
42857: PUSH
42858: LD_INT 2
42860: PUSH
42861: EMPTY
42862: LIST
42863: LIST
42864: PUSH
42865: LD_INT 1
42867: NEG
42868: PUSH
42869: LD_INT 1
42871: PUSH
42872: EMPTY
42873: LIST
42874: LIST
42875: PUSH
42876: LD_INT 2
42878: NEG
42879: PUSH
42880: LD_INT 0
42882: PUSH
42883: EMPTY
42884: LIST
42885: LIST
42886: PUSH
42887: LD_INT 2
42889: NEG
42890: PUSH
42891: LD_INT 1
42893: NEG
42894: PUSH
42895: EMPTY
42896: LIST
42897: LIST
42898: PUSH
42899: LD_INT 2
42901: NEG
42902: PUSH
42903: LD_INT 2
42905: NEG
42906: PUSH
42907: EMPTY
42908: LIST
42909: LIST
42910: PUSH
42911: EMPTY
42912: LIST
42913: LIST
42914: LIST
42915: LIST
42916: LIST
42917: LIST
42918: LIST
42919: LIST
42920: LIST
42921: LIST
42922: LIST
42923: LIST
42924: LIST
42925: LIST
42926: LIST
42927: LIST
42928: LIST
42929: LIST
42930: LIST
42931: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42932: LD_ADDR_VAR 0 21
42936: PUSH
42937: LD_INT 0
42939: PUSH
42940: LD_INT 0
42942: PUSH
42943: EMPTY
42944: LIST
42945: LIST
42946: PUSH
42947: LD_INT 0
42949: PUSH
42950: LD_INT 1
42952: NEG
42953: PUSH
42954: EMPTY
42955: LIST
42956: LIST
42957: PUSH
42958: LD_INT 1
42960: PUSH
42961: LD_INT 0
42963: PUSH
42964: EMPTY
42965: LIST
42966: LIST
42967: PUSH
42968: LD_INT 1
42970: PUSH
42971: LD_INT 1
42973: PUSH
42974: EMPTY
42975: LIST
42976: LIST
42977: PUSH
42978: LD_INT 0
42980: PUSH
42981: LD_INT 1
42983: PUSH
42984: EMPTY
42985: LIST
42986: LIST
42987: PUSH
42988: LD_INT 1
42990: NEG
42991: PUSH
42992: LD_INT 0
42994: PUSH
42995: EMPTY
42996: LIST
42997: LIST
42998: PUSH
42999: LD_INT 1
43001: NEG
43002: PUSH
43003: LD_INT 1
43005: NEG
43006: PUSH
43007: EMPTY
43008: LIST
43009: LIST
43010: PUSH
43011: LD_INT 1
43013: NEG
43014: PUSH
43015: LD_INT 2
43017: NEG
43018: PUSH
43019: EMPTY
43020: LIST
43021: LIST
43022: PUSH
43023: LD_INT 0
43025: PUSH
43026: LD_INT 2
43028: NEG
43029: PUSH
43030: EMPTY
43031: LIST
43032: LIST
43033: PUSH
43034: LD_INT 1
43036: PUSH
43037: LD_INT 1
43039: NEG
43040: PUSH
43041: EMPTY
43042: LIST
43043: LIST
43044: PUSH
43045: LD_INT 2
43047: PUSH
43048: LD_INT 0
43050: PUSH
43051: EMPTY
43052: LIST
43053: LIST
43054: PUSH
43055: LD_INT 2
43057: PUSH
43058: LD_INT 1
43060: PUSH
43061: EMPTY
43062: LIST
43063: LIST
43064: PUSH
43065: LD_INT 2
43067: PUSH
43068: LD_INT 2
43070: PUSH
43071: EMPTY
43072: LIST
43073: LIST
43074: PUSH
43075: LD_INT 1
43077: PUSH
43078: LD_INT 2
43080: PUSH
43081: EMPTY
43082: LIST
43083: LIST
43084: PUSH
43085: LD_INT 0
43087: PUSH
43088: LD_INT 2
43090: PUSH
43091: EMPTY
43092: LIST
43093: LIST
43094: PUSH
43095: LD_INT 1
43097: NEG
43098: PUSH
43099: LD_INT 1
43101: PUSH
43102: EMPTY
43103: LIST
43104: LIST
43105: PUSH
43106: LD_INT 2
43108: NEG
43109: PUSH
43110: LD_INT 0
43112: PUSH
43113: EMPTY
43114: LIST
43115: LIST
43116: PUSH
43117: LD_INT 2
43119: NEG
43120: PUSH
43121: LD_INT 1
43123: NEG
43124: PUSH
43125: EMPTY
43126: LIST
43127: LIST
43128: PUSH
43129: LD_INT 2
43131: NEG
43132: PUSH
43133: LD_INT 2
43135: NEG
43136: PUSH
43137: EMPTY
43138: LIST
43139: LIST
43140: PUSH
43141: EMPTY
43142: LIST
43143: LIST
43144: LIST
43145: LIST
43146: LIST
43147: LIST
43148: LIST
43149: LIST
43150: LIST
43151: LIST
43152: LIST
43153: LIST
43154: LIST
43155: LIST
43156: LIST
43157: LIST
43158: LIST
43159: LIST
43160: LIST
43161: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43162: LD_ADDR_VAR 0 22
43166: PUSH
43167: LD_INT 0
43169: PUSH
43170: LD_INT 0
43172: PUSH
43173: EMPTY
43174: LIST
43175: LIST
43176: PUSH
43177: LD_INT 0
43179: PUSH
43180: LD_INT 1
43182: NEG
43183: PUSH
43184: EMPTY
43185: LIST
43186: LIST
43187: PUSH
43188: LD_INT 1
43190: PUSH
43191: LD_INT 0
43193: PUSH
43194: EMPTY
43195: LIST
43196: LIST
43197: PUSH
43198: LD_INT 1
43200: PUSH
43201: LD_INT 1
43203: PUSH
43204: EMPTY
43205: LIST
43206: LIST
43207: PUSH
43208: LD_INT 0
43210: PUSH
43211: LD_INT 1
43213: PUSH
43214: EMPTY
43215: LIST
43216: LIST
43217: PUSH
43218: LD_INT 1
43220: NEG
43221: PUSH
43222: LD_INT 0
43224: PUSH
43225: EMPTY
43226: LIST
43227: LIST
43228: PUSH
43229: LD_INT 1
43231: NEG
43232: PUSH
43233: LD_INT 1
43235: NEG
43236: PUSH
43237: EMPTY
43238: LIST
43239: LIST
43240: PUSH
43241: LD_INT 1
43243: NEG
43244: PUSH
43245: LD_INT 2
43247: NEG
43248: PUSH
43249: EMPTY
43250: LIST
43251: LIST
43252: PUSH
43253: LD_INT 0
43255: PUSH
43256: LD_INT 2
43258: NEG
43259: PUSH
43260: EMPTY
43261: LIST
43262: LIST
43263: PUSH
43264: LD_INT 1
43266: PUSH
43267: LD_INT 1
43269: NEG
43270: PUSH
43271: EMPTY
43272: LIST
43273: LIST
43274: PUSH
43275: LD_INT 2
43277: PUSH
43278: LD_INT 0
43280: PUSH
43281: EMPTY
43282: LIST
43283: LIST
43284: PUSH
43285: LD_INT 2
43287: PUSH
43288: LD_INT 1
43290: PUSH
43291: EMPTY
43292: LIST
43293: LIST
43294: PUSH
43295: LD_INT 2
43297: PUSH
43298: LD_INT 2
43300: PUSH
43301: EMPTY
43302: LIST
43303: LIST
43304: PUSH
43305: LD_INT 1
43307: PUSH
43308: LD_INT 2
43310: PUSH
43311: EMPTY
43312: LIST
43313: LIST
43314: PUSH
43315: LD_INT 0
43317: PUSH
43318: LD_INT 2
43320: PUSH
43321: EMPTY
43322: LIST
43323: LIST
43324: PUSH
43325: LD_INT 1
43327: NEG
43328: PUSH
43329: LD_INT 1
43331: PUSH
43332: EMPTY
43333: LIST
43334: LIST
43335: PUSH
43336: LD_INT 2
43338: NEG
43339: PUSH
43340: LD_INT 0
43342: PUSH
43343: EMPTY
43344: LIST
43345: LIST
43346: PUSH
43347: LD_INT 2
43349: NEG
43350: PUSH
43351: LD_INT 1
43353: NEG
43354: PUSH
43355: EMPTY
43356: LIST
43357: LIST
43358: PUSH
43359: LD_INT 2
43361: NEG
43362: PUSH
43363: LD_INT 2
43365: NEG
43366: PUSH
43367: EMPTY
43368: LIST
43369: LIST
43370: PUSH
43371: EMPTY
43372: LIST
43373: LIST
43374: LIST
43375: LIST
43376: LIST
43377: LIST
43378: LIST
43379: LIST
43380: LIST
43381: LIST
43382: LIST
43383: LIST
43384: LIST
43385: LIST
43386: LIST
43387: LIST
43388: LIST
43389: LIST
43390: LIST
43391: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
43392: LD_ADDR_VAR 0 23
43396: PUSH
43397: LD_INT 0
43399: PUSH
43400: LD_INT 0
43402: PUSH
43403: EMPTY
43404: LIST
43405: LIST
43406: PUSH
43407: LD_INT 0
43409: PUSH
43410: LD_INT 1
43412: NEG
43413: PUSH
43414: EMPTY
43415: LIST
43416: LIST
43417: PUSH
43418: LD_INT 1
43420: PUSH
43421: LD_INT 0
43423: PUSH
43424: EMPTY
43425: LIST
43426: LIST
43427: PUSH
43428: LD_INT 1
43430: PUSH
43431: LD_INT 1
43433: PUSH
43434: EMPTY
43435: LIST
43436: LIST
43437: PUSH
43438: LD_INT 0
43440: PUSH
43441: LD_INT 1
43443: PUSH
43444: EMPTY
43445: LIST
43446: LIST
43447: PUSH
43448: LD_INT 1
43450: NEG
43451: PUSH
43452: LD_INT 0
43454: PUSH
43455: EMPTY
43456: LIST
43457: LIST
43458: PUSH
43459: LD_INT 1
43461: NEG
43462: PUSH
43463: LD_INT 1
43465: NEG
43466: PUSH
43467: EMPTY
43468: LIST
43469: LIST
43470: PUSH
43471: LD_INT 1
43473: NEG
43474: PUSH
43475: LD_INT 2
43477: NEG
43478: PUSH
43479: EMPTY
43480: LIST
43481: LIST
43482: PUSH
43483: LD_INT 0
43485: PUSH
43486: LD_INT 2
43488: NEG
43489: PUSH
43490: EMPTY
43491: LIST
43492: LIST
43493: PUSH
43494: LD_INT 1
43496: PUSH
43497: LD_INT 1
43499: NEG
43500: PUSH
43501: EMPTY
43502: LIST
43503: LIST
43504: PUSH
43505: LD_INT 2
43507: PUSH
43508: LD_INT 0
43510: PUSH
43511: EMPTY
43512: LIST
43513: LIST
43514: PUSH
43515: LD_INT 2
43517: PUSH
43518: LD_INT 1
43520: PUSH
43521: EMPTY
43522: LIST
43523: LIST
43524: PUSH
43525: LD_INT 2
43527: PUSH
43528: LD_INT 2
43530: PUSH
43531: EMPTY
43532: LIST
43533: LIST
43534: PUSH
43535: LD_INT 1
43537: PUSH
43538: LD_INT 2
43540: PUSH
43541: EMPTY
43542: LIST
43543: LIST
43544: PUSH
43545: LD_INT 0
43547: PUSH
43548: LD_INT 2
43550: PUSH
43551: EMPTY
43552: LIST
43553: LIST
43554: PUSH
43555: LD_INT 1
43557: NEG
43558: PUSH
43559: LD_INT 1
43561: PUSH
43562: EMPTY
43563: LIST
43564: LIST
43565: PUSH
43566: LD_INT 2
43568: NEG
43569: PUSH
43570: LD_INT 0
43572: PUSH
43573: EMPTY
43574: LIST
43575: LIST
43576: PUSH
43577: LD_INT 2
43579: NEG
43580: PUSH
43581: LD_INT 1
43583: NEG
43584: PUSH
43585: EMPTY
43586: LIST
43587: LIST
43588: PUSH
43589: LD_INT 2
43591: NEG
43592: PUSH
43593: LD_INT 2
43595: NEG
43596: PUSH
43597: EMPTY
43598: LIST
43599: LIST
43600: PUSH
43601: LD_INT 2
43603: NEG
43604: PUSH
43605: LD_INT 3
43607: NEG
43608: PUSH
43609: EMPTY
43610: LIST
43611: LIST
43612: PUSH
43613: LD_INT 1
43615: NEG
43616: PUSH
43617: LD_INT 3
43619: NEG
43620: PUSH
43621: EMPTY
43622: LIST
43623: LIST
43624: PUSH
43625: LD_INT 1
43627: PUSH
43628: LD_INT 2
43630: NEG
43631: PUSH
43632: EMPTY
43633: LIST
43634: LIST
43635: PUSH
43636: LD_INT 2
43638: PUSH
43639: LD_INT 1
43641: NEG
43642: PUSH
43643: EMPTY
43644: LIST
43645: LIST
43646: PUSH
43647: EMPTY
43648: LIST
43649: LIST
43650: LIST
43651: LIST
43652: LIST
43653: LIST
43654: LIST
43655: LIST
43656: LIST
43657: LIST
43658: LIST
43659: LIST
43660: LIST
43661: LIST
43662: LIST
43663: LIST
43664: LIST
43665: LIST
43666: LIST
43667: LIST
43668: LIST
43669: LIST
43670: LIST
43671: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
43672: LD_ADDR_VAR 0 24
43676: PUSH
43677: LD_INT 0
43679: PUSH
43680: LD_INT 0
43682: PUSH
43683: EMPTY
43684: LIST
43685: LIST
43686: PUSH
43687: LD_INT 0
43689: PUSH
43690: LD_INT 1
43692: NEG
43693: PUSH
43694: EMPTY
43695: LIST
43696: LIST
43697: PUSH
43698: LD_INT 1
43700: PUSH
43701: LD_INT 0
43703: PUSH
43704: EMPTY
43705: LIST
43706: LIST
43707: PUSH
43708: LD_INT 1
43710: PUSH
43711: LD_INT 1
43713: PUSH
43714: EMPTY
43715: LIST
43716: LIST
43717: PUSH
43718: LD_INT 0
43720: PUSH
43721: LD_INT 1
43723: PUSH
43724: EMPTY
43725: LIST
43726: LIST
43727: PUSH
43728: LD_INT 1
43730: NEG
43731: PUSH
43732: LD_INT 0
43734: PUSH
43735: EMPTY
43736: LIST
43737: LIST
43738: PUSH
43739: LD_INT 1
43741: NEG
43742: PUSH
43743: LD_INT 1
43745: NEG
43746: PUSH
43747: EMPTY
43748: LIST
43749: LIST
43750: PUSH
43751: LD_INT 1
43753: NEG
43754: PUSH
43755: LD_INT 2
43757: NEG
43758: PUSH
43759: EMPTY
43760: LIST
43761: LIST
43762: PUSH
43763: LD_INT 0
43765: PUSH
43766: LD_INT 2
43768: NEG
43769: PUSH
43770: EMPTY
43771: LIST
43772: LIST
43773: PUSH
43774: LD_INT 1
43776: PUSH
43777: LD_INT 1
43779: NEG
43780: PUSH
43781: EMPTY
43782: LIST
43783: LIST
43784: PUSH
43785: LD_INT 2
43787: PUSH
43788: LD_INT 0
43790: PUSH
43791: EMPTY
43792: LIST
43793: LIST
43794: PUSH
43795: LD_INT 2
43797: PUSH
43798: LD_INT 1
43800: PUSH
43801: EMPTY
43802: LIST
43803: LIST
43804: PUSH
43805: LD_INT 2
43807: PUSH
43808: LD_INT 2
43810: PUSH
43811: EMPTY
43812: LIST
43813: LIST
43814: PUSH
43815: LD_INT 1
43817: PUSH
43818: LD_INT 2
43820: PUSH
43821: EMPTY
43822: LIST
43823: LIST
43824: PUSH
43825: LD_INT 0
43827: PUSH
43828: LD_INT 2
43830: PUSH
43831: EMPTY
43832: LIST
43833: LIST
43834: PUSH
43835: LD_INT 1
43837: NEG
43838: PUSH
43839: LD_INT 1
43841: PUSH
43842: EMPTY
43843: LIST
43844: LIST
43845: PUSH
43846: LD_INT 2
43848: NEG
43849: PUSH
43850: LD_INT 0
43852: PUSH
43853: EMPTY
43854: LIST
43855: LIST
43856: PUSH
43857: LD_INT 2
43859: NEG
43860: PUSH
43861: LD_INT 1
43863: NEG
43864: PUSH
43865: EMPTY
43866: LIST
43867: LIST
43868: PUSH
43869: LD_INT 2
43871: NEG
43872: PUSH
43873: LD_INT 2
43875: NEG
43876: PUSH
43877: EMPTY
43878: LIST
43879: LIST
43880: PUSH
43881: LD_INT 1
43883: PUSH
43884: LD_INT 2
43886: NEG
43887: PUSH
43888: EMPTY
43889: LIST
43890: LIST
43891: PUSH
43892: LD_INT 2
43894: PUSH
43895: LD_INT 1
43897: NEG
43898: PUSH
43899: EMPTY
43900: LIST
43901: LIST
43902: PUSH
43903: LD_INT 3
43905: PUSH
43906: LD_INT 1
43908: PUSH
43909: EMPTY
43910: LIST
43911: LIST
43912: PUSH
43913: LD_INT 3
43915: PUSH
43916: LD_INT 2
43918: PUSH
43919: EMPTY
43920: LIST
43921: LIST
43922: PUSH
43923: EMPTY
43924: LIST
43925: LIST
43926: LIST
43927: LIST
43928: LIST
43929: LIST
43930: LIST
43931: LIST
43932: LIST
43933: LIST
43934: LIST
43935: LIST
43936: LIST
43937: LIST
43938: LIST
43939: LIST
43940: LIST
43941: LIST
43942: LIST
43943: LIST
43944: LIST
43945: LIST
43946: LIST
43947: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
43948: LD_ADDR_VAR 0 25
43952: PUSH
43953: LD_INT 0
43955: PUSH
43956: LD_INT 0
43958: PUSH
43959: EMPTY
43960: LIST
43961: LIST
43962: PUSH
43963: LD_INT 0
43965: PUSH
43966: LD_INT 1
43968: NEG
43969: PUSH
43970: EMPTY
43971: LIST
43972: LIST
43973: PUSH
43974: LD_INT 1
43976: PUSH
43977: LD_INT 0
43979: PUSH
43980: EMPTY
43981: LIST
43982: LIST
43983: PUSH
43984: LD_INT 1
43986: PUSH
43987: LD_INT 1
43989: PUSH
43990: EMPTY
43991: LIST
43992: LIST
43993: PUSH
43994: LD_INT 0
43996: PUSH
43997: LD_INT 1
43999: PUSH
44000: EMPTY
44001: LIST
44002: LIST
44003: PUSH
44004: LD_INT 1
44006: NEG
44007: PUSH
44008: LD_INT 0
44010: PUSH
44011: EMPTY
44012: LIST
44013: LIST
44014: PUSH
44015: LD_INT 1
44017: NEG
44018: PUSH
44019: LD_INT 1
44021: NEG
44022: PUSH
44023: EMPTY
44024: LIST
44025: LIST
44026: PUSH
44027: LD_INT 1
44029: NEG
44030: PUSH
44031: LD_INT 2
44033: NEG
44034: PUSH
44035: EMPTY
44036: LIST
44037: LIST
44038: PUSH
44039: LD_INT 0
44041: PUSH
44042: LD_INT 2
44044: NEG
44045: PUSH
44046: EMPTY
44047: LIST
44048: LIST
44049: PUSH
44050: LD_INT 1
44052: PUSH
44053: LD_INT 1
44055: NEG
44056: PUSH
44057: EMPTY
44058: LIST
44059: LIST
44060: PUSH
44061: LD_INT 2
44063: PUSH
44064: LD_INT 0
44066: PUSH
44067: EMPTY
44068: LIST
44069: LIST
44070: PUSH
44071: LD_INT 2
44073: PUSH
44074: LD_INT 1
44076: PUSH
44077: EMPTY
44078: LIST
44079: LIST
44080: PUSH
44081: LD_INT 2
44083: PUSH
44084: LD_INT 2
44086: PUSH
44087: EMPTY
44088: LIST
44089: LIST
44090: PUSH
44091: LD_INT 1
44093: PUSH
44094: LD_INT 2
44096: PUSH
44097: EMPTY
44098: LIST
44099: LIST
44100: PUSH
44101: LD_INT 0
44103: PUSH
44104: LD_INT 2
44106: PUSH
44107: EMPTY
44108: LIST
44109: LIST
44110: PUSH
44111: LD_INT 1
44113: NEG
44114: PUSH
44115: LD_INT 1
44117: PUSH
44118: EMPTY
44119: LIST
44120: LIST
44121: PUSH
44122: LD_INT 2
44124: NEG
44125: PUSH
44126: LD_INT 0
44128: PUSH
44129: EMPTY
44130: LIST
44131: LIST
44132: PUSH
44133: LD_INT 2
44135: NEG
44136: PUSH
44137: LD_INT 1
44139: NEG
44140: PUSH
44141: EMPTY
44142: LIST
44143: LIST
44144: PUSH
44145: LD_INT 2
44147: NEG
44148: PUSH
44149: LD_INT 2
44151: NEG
44152: PUSH
44153: EMPTY
44154: LIST
44155: LIST
44156: PUSH
44157: LD_INT 3
44159: PUSH
44160: LD_INT 1
44162: PUSH
44163: EMPTY
44164: LIST
44165: LIST
44166: PUSH
44167: LD_INT 3
44169: PUSH
44170: LD_INT 2
44172: PUSH
44173: EMPTY
44174: LIST
44175: LIST
44176: PUSH
44177: LD_INT 2
44179: PUSH
44180: LD_INT 3
44182: PUSH
44183: EMPTY
44184: LIST
44185: LIST
44186: PUSH
44187: LD_INT 1
44189: PUSH
44190: LD_INT 3
44192: PUSH
44193: EMPTY
44194: LIST
44195: LIST
44196: PUSH
44197: EMPTY
44198: LIST
44199: LIST
44200: LIST
44201: LIST
44202: LIST
44203: LIST
44204: LIST
44205: LIST
44206: LIST
44207: LIST
44208: LIST
44209: LIST
44210: LIST
44211: LIST
44212: LIST
44213: LIST
44214: LIST
44215: LIST
44216: LIST
44217: LIST
44218: LIST
44219: LIST
44220: LIST
44221: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
44222: LD_ADDR_VAR 0 26
44226: PUSH
44227: LD_INT 0
44229: PUSH
44230: LD_INT 0
44232: PUSH
44233: EMPTY
44234: LIST
44235: LIST
44236: PUSH
44237: LD_INT 0
44239: PUSH
44240: LD_INT 1
44242: NEG
44243: PUSH
44244: EMPTY
44245: LIST
44246: LIST
44247: PUSH
44248: LD_INT 1
44250: PUSH
44251: LD_INT 0
44253: PUSH
44254: EMPTY
44255: LIST
44256: LIST
44257: PUSH
44258: LD_INT 1
44260: PUSH
44261: LD_INT 1
44263: PUSH
44264: EMPTY
44265: LIST
44266: LIST
44267: PUSH
44268: LD_INT 0
44270: PUSH
44271: LD_INT 1
44273: PUSH
44274: EMPTY
44275: LIST
44276: LIST
44277: PUSH
44278: LD_INT 1
44280: NEG
44281: PUSH
44282: LD_INT 0
44284: PUSH
44285: EMPTY
44286: LIST
44287: LIST
44288: PUSH
44289: LD_INT 1
44291: NEG
44292: PUSH
44293: LD_INT 1
44295: NEG
44296: PUSH
44297: EMPTY
44298: LIST
44299: LIST
44300: PUSH
44301: LD_INT 1
44303: NEG
44304: PUSH
44305: LD_INT 2
44307: NEG
44308: PUSH
44309: EMPTY
44310: LIST
44311: LIST
44312: PUSH
44313: LD_INT 0
44315: PUSH
44316: LD_INT 2
44318: NEG
44319: PUSH
44320: EMPTY
44321: LIST
44322: LIST
44323: PUSH
44324: LD_INT 1
44326: PUSH
44327: LD_INT 1
44329: NEG
44330: PUSH
44331: EMPTY
44332: LIST
44333: LIST
44334: PUSH
44335: LD_INT 2
44337: PUSH
44338: LD_INT 0
44340: PUSH
44341: EMPTY
44342: LIST
44343: LIST
44344: PUSH
44345: LD_INT 2
44347: PUSH
44348: LD_INT 1
44350: PUSH
44351: EMPTY
44352: LIST
44353: LIST
44354: PUSH
44355: LD_INT 2
44357: PUSH
44358: LD_INT 2
44360: PUSH
44361: EMPTY
44362: LIST
44363: LIST
44364: PUSH
44365: LD_INT 1
44367: PUSH
44368: LD_INT 2
44370: PUSH
44371: EMPTY
44372: LIST
44373: LIST
44374: PUSH
44375: LD_INT 0
44377: PUSH
44378: LD_INT 2
44380: PUSH
44381: EMPTY
44382: LIST
44383: LIST
44384: PUSH
44385: LD_INT 1
44387: NEG
44388: PUSH
44389: LD_INT 1
44391: PUSH
44392: EMPTY
44393: LIST
44394: LIST
44395: PUSH
44396: LD_INT 2
44398: NEG
44399: PUSH
44400: LD_INT 0
44402: PUSH
44403: EMPTY
44404: LIST
44405: LIST
44406: PUSH
44407: LD_INT 2
44409: NEG
44410: PUSH
44411: LD_INT 1
44413: NEG
44414: PUSH
44415: EMPTY
44416: LIST
44417: LIST
44418: PUSH
44419: LD_INT 2
44421: NEG
44422: PUSH
44423: LD_INT 2
44425: NEG
44426: PUSH
44427: EMPTY
44428: LIST
44429: LIST
44430: PUSH
44431: LD_INT 2
44433: PUSH
44434: LD_INT 3
44436: PUSH
44437: EMPTY
44438: LIST
44439: LIST
44440: PUSH
44441: LD_INT 1
44443: PUSH
44444: LD_INT 3
44446: PUSH
44447: EMPTY
44448: LIST
44449: LIST
44450: PUSH
44451: LD_INT 1
44453: NEG
44454: PUSH
44455: LD_INT 2
44457: PUSH
44458: EMPTY
44459: LIST
44460: LIST
44461: PUSH
44462: LD_INT 2
44464: NEG
44465: PUSH
44466: LD_INT 1
44468: PUSH
44469: EMPTY
44470: LIST
44471: LIST
44472: PUSH
44473: EMPTY
44474: LIST
44475: LIST
44476: LIST
44477: LIST
44478: LIST
44479: LIST
44480: LIST
44481: LIST
44482: LIST
44483: LIST
44484: LIST
44485: LIST
44486: LIST
44487: LIST
44488: LIST
44489: LIST
44490: LIST
44491: LIST
44492: LIST
44493: LIST
44494: LIST
44495: LIST
44496: LIST
44497: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44498: LD_ADDR_VAR 0 27
44502: PUSH
44503: LD_INT 0
44505: PUSH
44506: LD_INT 0
44508: PUSH
44509: EMPTY
44510: LIST
44511: LIST
44512: PUSH
44513: LD_INT 0
44515: PUSH
44516: LD_INT 1
44518: NEG
44519: PUSH
44520: EMPTY
44521: LIST
44522: LIST
44523: PUSH
44524: LD_INT 1
44526: PUSH
44527: LD_INT 0
44529: PUSH
44530: EMPTY
44531: LIST
44532: LIST
44533: PUSH
44534: LD_INT 1
44536: PUSH
44537: LD_INT 1
44539: PUSH
44540: EMPTY
44541: LIST
44542: LIST
44543: PUSH
44544: LD_INT 0
44546: PUSH
44547: LD_INT 1
44549: PUSH
44550: EMPTY
44551: LIST
44552: LIST
44553: PUSH
44554: LD_INT 1
44556: NEG
44557: PUSH
44558: LD_INT 0
44560: PUSH
44561: EMPTY
44562: LIST
44563: LIST
44564: PUSH
44565: LD_INT 1
44567: NEG
44568: PUSH
44569: LD_INT 1
44571: NEG
44572: PUSH
44573: EMPTY
44574: LIST
44575: LIST
44576: PUSH
44577: LD_INT 1
44579: NEG
44580: PUSH
44581: LD_INT 2
44583: NEG
44584: PUSH
44585: EMPTY
44586: LIST
44587: LIST
44588: PUSH
44589: LD_INT 0
44591: PUSH
44592: LD_INT 2
44594: NEG
44595: PUSH
44596: EMPTY
44597: LIST
44598: LIST
44599: PUSH
44600: LD_INT 1
44602: PUSH
44603: LD_INT 1
44605: NEG
44606: PUSH
44607: EMPTY
44608: LIST
44609: LIST
44610: PUSH
44611: LD_INT 2
44613: PUSH
44614: LD_INT 0
44616: PUSH
44617: EMPTY
44618: LIST
44619: LIST
44620: PUSH
44621: LD_INT 2
44623: PUSH
44624: LD_INT 1
44626: PUSH
44627: EMPTY
44628: LIST
44629: LIST
44630: PUSH
44631: LD_INT 2
44633: PUSH
44634: LD_INT 2
44636: PUSH
44637: EMPTY
44638: LIST
44639: LIST
44640: PUSH
44641: LD_INT 1
44643: PUSH
44644: LD_INT 2
44646: PUSH
44647: EMPTY
44648: LIST
44649: LIST
44650: PUSH
44651: LD_INT 0
44653: PUSH
44654: LD_INT 2
44656: PUSH
44657: EMPTY
44658: LIST
44659: LIST
44660: PUSH
44661: LD_INT 1
44663: NEG
44664: PUSH
44665: LD_INT 1
44667: PUSH
44668: EMPTY
44669: LIST
44670: LIST
44671: PUSH
44672: LD_INT 2
44674: NEG
44675: PUSH
44676: LD_INT 0
44678: PUSH
44679: EMPTY
44680: LIST
44681: LIST
44682: PUSH
44683: LD_INT 2
44685: NEG
44686: PUSH
44687: LD_INT 1
44689: NEG
44690: PUSH
44691: EMPTY
44692: LIST
44693: LIST
44694: PUSH
44695: LD_INT 2
44697: NEG
44698: PUSH
44699: LD_INT 2
44701: NEG
44702: PUSH
44703: EMPTY
44704: LIST
44705: LIST
44706: PUSH
44707: LD_INT 1
44709: NEG
44710: PUSH
44711: LD_INT 2
44713: PUSH
44714: EMPTY
44715: LIST
44716: LIST
44717: PUSH
44718: LD_INT 2
44720: NEG
44721: PUSH
44722: LD_INT 1
44724: PUSH
44725: EMPTY
44726: LIST
44727: LIST
44728: PUSH
44729: LD_INT 3
44731: NEG
44732: PUSH
44733: LD_INT 1
44735: NEG
44736: PUSH
44737: EMPTY
44738: LIST
44739: LIST
44740: PUSH
44741: LD_INT 3
44743: NEG
44744: PUSH
44745: LD_INT 2
44747: NEG
44748: PUSH
44749: EMPTY
44750: LIST
44751: LIST
44752: PUSH
44753: EMPTY
44754: LIST
44755: LIST
44756: LIST
44757: LIST
44758: LIST
44759: LIST
44760: LIST
44761: LIST
44762: LIST
44763: LIST
44764: LIST
44765: LIST
44766: LIST
44767: LIST
44768: LIST
44769: LIST
44770: LIST
44771: LIST
44772: LIST
44773: LIST
44774: LIST
44775: LIST
44776: LIST
44777: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44778: LD_ADDR_VAR 0 28
44782: PUSH
44783: LD_INT 0
44785: PUSH
44786: LD_INT 0
44788: PUSH
44789: EMPTY
44790: LIST
44791: LIST
44792: PUSH
44793: LD_INT 0
44795: PUSH
44796: LD_INT 1
44798: NEG
44799: PUSH
44800: EMPTY
44801: LIST
44802: LIST
44803: PUSH
44804: LD_INT 1
44806: PUSH
44807: LD_INT 0
44809: PUSH
44810: EMPTY
44811: LIST
44812: LIST
44813: PUSH
44814: LD_INT 1
44816: PUSH
44817: LD_INT 1
44819: PUSH
44820: EMPTY
44821: LIST
44822: LIST
44823: PUSH
44824: LD_INT 0
44826: PUSH
44827: LD_INT 1
44829: PUSH
44830: EMPTY
44831: LIST
44832: LIST
44833: PUSH
44834: LD_INT 1
44836: NEG
44837: PUSH
44838: LD_INT 0
44840: PUSH
44841: EMPTY
44842: LIST
44843: LIST
44844: PUSH
44845: LD_INT 1
44847: NEG
44848: PUSH
44849: LD_INT 1
44851: NEG
44852: PUSH
44853: EMPTY
44854: LIST
44855: LIST
44856: PUSH
44857: LD_INT 1
44859: NEG
44860: PUSH
44861: LD_INT 2
44863: NEG
44864: PUSH
44865: EMPTY
44866: LIST
44867: LIST
44868: PUSH
44869: LD_INT 0
44871: PUSH
44872: LD_INT 2
44874: NEG
44875: PUSH
44876: EMPTY
44877: LIST
44878: LIST
44879: PUSH
44880: LD_INT 1
44882: PUSH
44883: LD_INT 1
44885: NEG
44886: PUSH
44887: EMPTY
44888: LIST
44889: LIST
44890: PUSH
44891: LD_INT 2
44893: PUSH
44894: LD_INT 0
44896: PUSH
44897: EMPTY
44898: LIST
44899: LIST
44900: PUSH
44901: LD_INT 2
44903: PUSH
44904: LD_INT 1
44906: PUSH
44907: EMPTY
44908: LIST
44909: LIST
44910: PUSH
44911: LD_INT 2
44913: PUSH
44914: LD_INT 2
44916: PUSH
44917: EMPTY
44918: LIST
44919: LIST
44920: PUSH
44921: LD_INT 1
44923: PUSH
44924: LD_INT 2
44926: PUSH
44927: EMPTY
44928: LIST
44929: LIST
44930: PUSH
44931: LD_INT 0
44933: PUSH
44934: LD_INT 2
44936: PUSH
44937: EMPTY
44938: LIST
44939: LIST
44940: PUSH
44941: LD_INT 1
44943: NEG
44944: PUSH
44945: LD_INT 1
44947: PUSH
44948: EMPTY
44949: LIST
44950: LIST
44951: PUSH
44952: LD_INT 2
44954: NEG
44955: PUSH
44956: LD_INT 0
44958: PUSH
44959: EMPTY
44960: LIST
44961: LIST
44962: PUSH
44963: LD_INT 2
44965: NEG
44966: PUSH
44967: LD_INT 1
44969: NEG
44970: PUSH
44971: EMPTY
44972: LIST
44973: LIST
44974: PUSH
44975: LD_INT 2
44977: NEG
44978: PUSH
44979: LD_INT 2
44981: NEG
44982: PUSH
44983: EMPTY
44984: LIST
44985: LIST
44986: PUSH
44987: LD_INT 2
44989: NEG
44990: PUSH
44991: LD_INT 3
44993: NEG
44994: PUSH
44995: EMPTY
44996: LIST
44997: LIST
44998: PUSH
44999: LD_INT 1
45001: NEG
45002: PUSH
45003: LD_INT 3
45005: NEG
45006: PUSH
45007: EMPTY
45008: LIST
45009: LIST
45010: PUSH
45011: LD_INT 3
45013: NEG
45014: PUSH
45015: LD_INT 1
45017: NEG
45018: PUSH
45019: EMPTY
45020: LIST
45021: LIST
45022: PUSH
45023: LD_INT 3
45025: NEG
45026: PUSH
45027: LD_INT 2
45029: NEG
45030: PUSH
45031: EMPTY
45032: LIST
45033: LIST
45034: PUSH
45035: EMPTY
45036: LIST
45037: LIST
45038: LIST
45039: LIST
45040: LIST
45041: LIST
45042: LIST
45043: LIST
45044: LIST
45045: LIST
45046: LIST
45047: LIST
45048: LIST
45049: LIST
45050: LIST
45051: LIST
45052: LIST
45053: LIST
45054: LIST
45055: LIST
45056: LIST
45057: LIST
45058: LIST
45059: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45060: LD_ADDR_VAR 0 29
45064: PUSH
45065: LD_INT 0
45067: PUSH
45068: LD_INT 0
45070: PUSH
45071: EMPTY
45072: LIST
45073: LIST
45074: PUSH
45075: LD_INT 0
45077: PUSH
45078: LD_INT 1
45080: NEG
45081: PUSH
45082: EMPTY
45083: LIST
45084: LIST
45085: PUSH
45086: LD_INT 1
45088: PUSH
45089: LD_INT 0
45091: PUSH
45092: EMPTY
45093: LIST
45094: LIST
45095: PUSH
45096: LD_INT 1
45098: PUSH
45099: LD_INT 1
45101: PUSH
45102: EMPTY
45103: LIST
45104: LIST
45105: PUSH
45106: LD_INT 0
45108: PUSH
45109: LD_INT 1
45111: PUSH
45112: EMPTY
45113: LIST
45114: LIST
45115: PUSH
45116: LD_INT 1
45118: NEG
45119: PUSH
45120: LD_INT 0
45122: PUSH
45123: EMPTY
45124: LIST
45125: LIST
45126: PUSH
45127: LD_INT 1
45129: NEG
45130: PUSH
45131: LD_INT 1
45133: NEG
45134: PUSH
45135: EMPTY
45136: LIST
45137: LIST
45138: PUSH
45139: LD_INT 1
45141: NEG
45142: PUSH
45143: LD_INT 2
45145: NEG
45146: PUSH
45147: EMPTY
45148: LIST
45149: LIST
45150: PUSH
45151: LD_INT 0
45153: PUSH
45154: LD_INT 2
45156: NEG
45157: PUSH
45158: EMPTY
45159: LIST
45160: LIST
45161: PUSH
45162: LD_INT 1
45164: PUSH
45165: LD_INT 1
45167: NEG
45168: PUSH
45169: EMPTY
45170: LIST
45171: LIST
45172: PUSH
45173: LD_INT 2
45175: PUSH
45176: LD_INT 0
45178: PUSH
45179: EMPTY
45180: LIST
45181: LIST
45182: PUSH
45183: LD_INT 2
45185: PUSH
45186: LD_INT 1
45188: PUSH
45189: EMPTY
45190: LIST
45191: LIST
45192: PUSH
45193: LD_INT 1
45195: PUSH
45196: LD_INT 2
45198: PUSH
45199: EMPTY
45200: LIST
45201: LIST
45202: PUSH
45203: LD_INT 0
45205: PUSH
45206: LD_INT 2
45208: PUSH
45209: EMPTY
45210: LIST
45211: LIST
45212: PUSH
45213: LD_INT 1
45215: NEG
45216: PUSH
45217: LD_INT 1
45219: PUSH
45220: EMPTY
45221: LIST
45222: LIST
45223: PUSH
45224: LD_INT 2
45226: NEG
45227: PUSH
45228: LD_INT 1
45230: NEG
45231: PUSH
45232: EMPTY
45233: LIST
45234: LIST
45235: PUSH
45236: LD_INT 2
45238: NEG
45239: PUSH
45240: LD_INT 2
45242: NEG
45243: PUSH
45244: EMPTY
45245: LIST
45246: LIST
45247: PUSH
45248: LD_INT 2
45250: NEG
45251: PUSH
45252: LD_INT 3
45254: NEG
45255: PUSH
45256: EMPTY
45257: LIST
45258: LIST
45259: PUSH
45260: LD_INT 2
45262: PUSH
45263: LD_INT 1
45265: NEG
45266: PUSH
45267: EMPTY
45268: LIST
45269: LIST
45270: PUSH
45271: LD_INT 3
45273: PUSH
45274: LD_INT 1
45276: PUSH
45277: EMPTY
45278: LIST
45279: LIST
45280: PUSH
45281: LD_INT 1
45283: PUSH
45284: LD_INT 3
45286: PUSH
45287: EMPTY
45288: LIST
45289: LIST
45290: PUSH
45291: LD_INT 1
45293: NEG
45294: PUSH
45295: LD_INT 2
45297: PUSH
45298: EMPTY
45299: LIST
45300: LIST
45301: PUSH
45302: LD_INT 3
45304: NEG
45305: PUSH
45306: LD_INT 2
45308: NEG
45309: PUSH
45310: EMPTY
45311: LIST
45312: LIST
45313: PUSH
45314: EMPTY
45315: LIST
45316: LIST
45317: LIST
45318: LIST
45319: LIST
45320: LIST
45321: LIST
45322: LIST
45323: LIST
45324: LIST
45325: LIST
45326: LIST
45327: LIST
45328: LIST
45329: LIST
45330: LIST
45331: LIST
45332: LIST
45333: LIST
45334: LIST
45335: LIST
45336: LIST
45337: LIST
45338: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45339: LD_ADDR_VAR 0 30
45343: PUSH
45344: LD_INT 0
45346: PUSH
45347: LD_INT 0
45349: PUSH
45350: EMPTY
45351: LIST
45352: LIST
45353: PUSH
45354: LD_INT 0
45356: PUSH
45357: LD_INT 1
45359: NEG
45360: PUSH
45361: EMPTY
45362: LIST
45363: LIST
45364: PUSH
45365: LD_INT 1
45367: PUSH
45368: LD_INT 0
45370: PUSH
45371: EMPTY
45372: LIST
45373: LIST
45374: PUSH
45375: LD_INT 1
45377: PUSH
45378: LD_INT 1
45380: PUSH
45381: EMPTY
45382: LIST
45383: LIST
45384: PUSH
45385: LD_INT 0
45387: PUSH
45388: LD_INT 1
45390: PUSH
45391: EMPTY
45392: LIST
45393: LIST
45394: PUSH
45395: LD_INT 1
45397: NEG
45398: PUSH
45399: LD_INT 0
45401: PUSH
45402: EMPTY
45403: LIST
45404: LIST
45405: PUSH
45406: LD_INT 1
45408: NEG
45409: PUSH
45410: LD_INT 1
45412: NEG
45413: PUSH
45414: EMPTY
45415: LIST
45416: LIST
45417: PUSH
45418: LD_INT 1
45420: NEG
45421: PUSH
45422: LD_INT 2
45424: NEG
45425: PUSH
45426: EMPTY
45427: LIST
45428: LIST
45429: PUSH
45430: LD_INT 0
45432: PUSH
45433: LD_INT 2
45435: NEG
45436: PUSH
45437: EMPTY
45438: LIST
45439: LIST
45440: PUSH
45441: LD_INT 1
45443: PUSH
45444: LD_INT 1
45446: NEG
45447: PUSH
45448: EMPTY
45449: LIST
45450: LIST
45451: PUSH
45452: LD_INT 2
45454: PUSH
45455: LD_INT 0
45457: PUSH
45458: EMPTY
45459: LIST
45460: LIST
45461: PUSH
45462: LD_INT 2
45464: PUSH
45465: LD_INT 1
45467: PUSH
45468: EMPTY
45469: LIST
45470: LIST
45471: PUSH
45472: LD_INT 2
45474: PUSH
45475: LD_INT 2
45477: PUSH
45478: EMPTY
45479: LIST
45480: LIST
45481: PUSH
45482: LD_INT 1
45484: PUSH
45485: LD_INT 2
45487: PUSH
45488: EMPTY
45489: LIST
45490: LIST
45491: PUSH
45492: LD_INT 1
45494: NEG
45495: PUSH
45496: LD_INT 1
45498: PUSH
45499: EMPTY
45500: LIST
45501: LIST
45502: PUSH
45503: LD_INT 2
45505: NEG
45506: PUSH
45507: LD_INT 0
45509: PUSH
45510: EMPTY
45511: LIST
45512: LIST
45513: PUSH
45514: LD_INT 2
45516: NEG
45517: PUSH
45518: LD_INT 1
45520: NEG
45521: PUSH
45522: EMPTY
45523: LIST
45524: LIST
45525: PUSH
45526: LD_INT 1
45528: NEG
45529: PUSH
45530: LD_INT 3
45532: NEG
45533: PUSH
45534: EMPTY
45535: LIST
45536: LIST
45537: PUSH
45538: LD_INT 1
45540: PUSH
45541: LD_INT 2
45543: NEG
45544: PUSH
45545: EMPTY
45546: LIST
45547: LIST
45548: PUSH
45549: LD_INT 3
45551: PUSH
45552: LD_INT 2
45554: PUSH
45555: EMPTY
45556: LIST
45557: LIST
45558: PUSH
45559: LD_INT 2
45561: PUSH
45562: LD_INT 3
45564: PUSH
45565: EMPTY
45566: LIST
45567: LIST
45568: PUSH
45569: LD_INT 2
45571: NEG
45572: PUSH
45573: LD_INT 1
45575: PUSH
45576: EMPTY
45577: LIST
45578: LIST
45579: PUSH
45580: LD_INT 3
45582: NEG
45583: PUSH
45584: LD_INT 1
45586: NEG
45587: PUSH
45588: EMPTY
45589: LIST
45590: LIST
45591: PUSH
45592: EMPTY
45593: LIST
45594: LIST
45595: LIST
45596: LIST
45597: LIST
45598: LIST
45599: LIST
45600: LIST
45601: LIST
45602: LIST
45603: LIST
45604: LIST
45605: LIST
45606: LIST
45607: LIST
45608: LIST
45609: LIST
45610: LIST
45611: LIST
45612: LIST
45613: LIST
45614: LIST
45615: LIST
45616: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45617: LD_ADDR_VAR 0 31
45621: PUSH
45622: LD_INT 0
45624: PUSH
45625: LD_INT 0
45627: PUSH
45628: EMPTY
45629: LIST
45630: LIST
45631: PUSH
45632: LD_INT 0
45634: PUSH
45635: LD_INT 1
45637: NEG
45638: PUSH
45639: EMPTY
45640: LIST
45641: LIST
45642: PUSH
45643: LD_INT 1
45645: PUSH
45646: LD_INT 0
45648: PUSH
45649: EMPTY
45650: LIST
45651: LIST
45652: PUSH
45653: LD_INT 1
45655: PUSH
45656: LD_INT 1
45658: PUSH
45659: EMPTY
45660: LIST
45661: LIST
45662: PUSH
45663: LD_INT 0
45665: PUSH
45666: LD_INT 1
45668: PUSH
45669: EMPTY
45670: LIST
45671: LIST
45672: PUSH
45673: LD_INT 1
45675: NEG
45676: PUSH
45677: LD_INT 0
45679: PUSH
45680: EMPTY
45681: LIST
45682: LIST
45683: PUSH
45684: LD_INT 1
45686: NEG
45687: PUSH
45688: LD_INT 1
45690: NEG
45691: PUSH
45692: EMPTY
45693: LIST
45694: LIST
45695: PUSH
45696: LD_INT 1
45698: NEG
45699: PUSH
45700: LD_INT 2
45702: NEG
45703: PUSH
45704: EMPTY
45705: LIST
45706: LIST
45707: PUSH
45708: LD_INT 1
45710: PUSH
45711: LD_INT 1
45713: NEG
45714: PUSH
45715: EMPTY
45716: LIST
45717: LIST
45718: PUSH
45719: LD_INT 2
45721: PUSH
45722: LD_INT 0
45724: PUSH
45725: EMPTY
45726: LIST
45727: LIST
45728: PUSH
45729: LD_INT 2
45731: PUSH
45732: LD_INT 1
45734: PUSH
45735: EMPTY
45736: LIST
45737: LIST
45738: PUSH
45739: LD_INT 2
45741: PUSH
45742: LD_INT 2
45744: PUSH
45745: EMPTY
45746: LIST
45747: LIST
45748: PUSH
45749: LD_INT 1
45751: PUSH
45752: LD_INT 2
45754: PUSH
45755: EMPTY
45756: LIST
45757: LIST
45758: PUSH
45759: LD_INT 0
45761: PUSH
45762: LD_INT 2
45764: PUSH
45765: EMPTY
45766: LIST
45767: LIST
45768: PUSH
45769: LD_INT 1
45771: NEG
45772: PUSH
45773: LD_INT 1
45775: PUSH
45776: EMPTY
45777: LIST
45778: LIST
45779: PUSH
45780: LD_INT 2
45782: NEG
45783: PUSH
45784: LD_INT 1
45786: NEG
45787: PUSH
45788: EMPTY
45789: LIST
45790: LIST
45791: PUSH
45792: LD_INT 2
45794: NEG
45795: PUSH
45796: LD_INT 2
45798: NEG
45799: PUSH
45800: EMPTY
45801: LIST
45802: LIST
45803: PUSH
45804: LD_INT 2
45806: NEG
45807: PUSH
45808: LD_INT 3
45810: NEG
45811: PUSH
45812: EMPTY
45813: LIST
45814: LIST
45815: PUSH
45816: LD_INT 2
45818: PUSH
45819: LD_INT 1
45821: NEG
45822: PUSH
45823: EMPTY
45824: LIST
45825: LIST
45826: PUSH
45827: LD_INT 3
45829: PUSH
45830: LD_INT 1
45832: PUSH
45833: EMPTY
45834: LIST
45835: LIST
45836: PUSH
45837: LD_INT 1
45839: PUSH
45840: LD_INT 3
45842: PUSH
45843: EMPTY
45844: LIST
45845: LIST
45846: PUSH
45847: LD_INT 1
45849: NEG
45850: PUSH
45851: LD_INT 2
45853: PUSH
45854: EMPTY
45855: LIST
45856: LIST
45857: PUSH
45858: LD_INT 3
45860: NEG
45861: PUSH
45862: LD_INT 2
45864: NEG
45865: PUSH
45866: EMPTY
45867: LIST
45868: LIST
45869: PUSH
45870: EMPTY
45871: LIST
45872: LIST
45873: LIST
45874: LIST
45875: LIST
45876: LIST
45877: LIST
45878: LIST
45879: LIST
45880: LIST
45881: LIST
45882: LIST
45883: LIST
45884: LIST
45885: LIST
45886: LIST
45887: LIST
45888: LIST
45889: LIST
45890: LIST
45891: LIST
45892: LIST
45893: LIST
45894: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45895: LD_ADDR_VAR 0 32
45899: PUSH
45900: LD_INT 0
45902: PUSH
45903: LD_INT 0
45905: PUSH
45906: EMPTY
45907: LIST
45908: LIST
45909: PUSH
45910: LD_INT 0
45912: PUSH
45913: LD_INT 1
45915: NEG
45916: PUSH
45917: EMPTY
45918: LIST
45919: LIST
45920: PUSH
45921: LD_INT 1
45923: PUSH
45924: LD_INT 0
45926: PUSH
45927: EMPTY
45928: LIST
45929: LIST
45930: PUSH
45931: LD_INT 1
45933: PUSH
45934: LD_INT 1
45936: PUSH
45937: EMPTY
45938: LIST
45939: LIST
45940: PUSH
45941: LD_INT 0
45943: PUSH
45944: LD_INT 1
45946: PUSH
45947: EMPTY
45948: LIST
45949: LIST
45950: PUSH
45951: LD_INT 1
45953: NEG
45954: PUSH
45955: LD_INT 0
45957: PUSH
45958: EMPTY
45959: LIST
45960: LIST
45961: PUSH
45962: LD_INT 1
45964: NEG
45965: PUSH
45966: LD_INT 1
45968: NEG
45969: PUSH
45970: EMPTY
45971: LIST
45972: LIST
45973: PUSH
45974: LD_INT 1
45976: NEG
45977: PUSH
45978: LD_INT 2
45980: NEG
45981: PUSH
45982: EMPTY
45983: LIST
45984: LIST
45985: PUSH
45986: LD_INT 0
45988: PUSH
45989: LD_INT 2
45991: NEG
45992: PUSH
45993: EMPTY
45994: LIST
45995: LIST
45996: PUSH
45997: LD_INT 1
45999: PUSH
46000: LD_INT 1
46002: NEG
46003: PUSH
46004: EMPTY
46005: LIST
46006: LIST
46007: PUSH
46008: LD_INT 2
46010: PUSH
46011: LD_INT 1
46013: PUSH
46014: EMPTY
46015: LIST
46016: LIST
46017: PUSH
46018: LD_INT 2
46020: PUSH
46021: LD_INT 2
46023: PUSH
46024: EMPTY
46025: LIST
46026: LIST
46027: PUSH
46028: LD_INT 1
46030: PUSH
46031: LD_INT 2
46033: PUSH
46034: EMPTY
46035: LIST
46036: LIST
46037: PUSH
46038: LD_INT 0
46040: PUSH
46041: LD_INT 2
46043: PUSH
46044: EMPTY
46045: LIST
46046: LIST
46047: PUSH
46048: LD_INT 1
46050: NEG
46051: PUSH
46052: LD_INT 1
46054: PUSH
46055: EMPTY
46056: LIST
46057: LIST
46058: PUSH
46059: LD_INT 2
46061: NEG
46062: PUSH
46063: LD_INT 0
46065: PUSH
46066: EMPTY
46067: LIST
46068: LIST
46069: PUSH
46070: LD_INT 2
46072: NEG
46073: PUSH
46074: LD_INT 1
46076: NEG
46077: PUSH
46078: EMPTY
46079: LIST
46080: LIST
46081: PUSH
46082: LD_INT 1
46084: NEG
46085: PUSH
46086: LD_INT 3
46088: NEG
46089: PUSH
46090: EMPTY
46091: LIST
46092: LIST
46093: PUSH
46094: LD_INT 1
46096: PUSH
46097: LD_INT 2
46099: NEG
46100: PUSH
46101: EMPTY
46102: LIST
46103: LIST
46104: PUSH
46105: LD_INT 3
46107: PUSH
46108: LD_INT 2
46110: PUSH
46111: EMPTY
46112: LIST
46113: LIST
46114: PUSH
46115: LD_INT 2
46117: PUSH
46118: LD_INT 3
46120: PUSH
46121: EMPTY
46122: LIST
46123: LIST
46124: PUSH
46125: LD_INT 2
46127: NEG
46128: PUSH
46129: LD_INT 1
46131: PUSH
46132: EMPTY
46133: LIST
46134: LIST
46135: PUSH
46136: LD_INT 3
46138: NEG
46139: PUSH
46140: LD_INT 1
46142: NEG
46143: PUSH
46144: EMPTY
46145: LIST
46146: LIST
46147: PUSH
46148: EMPTY
46149: LIST
46150: LIST
46151: LIST
46152: LIST
46153: LIST
46154: LIST
46155: LIST
46156: LIST
46157: LIST
46158: LIST
46159: LIST
46160: LIST
46161: LIST
46162: LIST
46163: LIST
46164: LIST
46165: LIST
46166: LIST
46167: LIST
46168: LIST
46169: LIST
46170: LIST
46171: LIST
46172: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46173: LD_ADDR_VAR 0 33
46177: PUSH
46178: LD_INT 0
46180: PUSH
46181: LD_INT 0
46183: PUSH
46184: EMPTY
46185: LIST
46186: LIST
46187: PUSH
46188: LD_INT 0
46190: PUSH
46191: LD_INT 1
46193: NEG
46194: PUSH
46195: EMPTY
46196: LIST
46197: LIST
46198: PUSH
46199: LD_INT 1
46201: PUSH
46202: LD_INT 0
46204: PUSH
46205: EMPTY
46206: LIST
46207: LIST
46208: PUSH
46209: LD_INT 1
46211: PUSH
46212: LD_INT 1
46214: PUSH
46215: EMPTY
46216: LIST
46217: LIST
46218: PUSH
46219: LD_INT 0
46221: PUSH
46222: LD_INT 1
46224: PUSH
46225: EMPTY
46226: LIST
46227: LIST
46228: PUSH
46229: LD_INT 1
46231: NEG
46232: PUSH
46233: LD_INT 0
46235: PUSH
46236: EMPTY
46237: LIST
46238: LIST
46239: PUSH
46240: LD_INT 1
46242: NEG
46243: PUSH
46244: LD_INT 1
46246: NEG
46247: PUSH
46248: EMPTY
46249: LIST
46250: LIST
46251: PUSH
46252: LD_INT 1
46254: NEG
46255: PUSH
46256: LD_INT 2
46258: NEG
46259: PUSH
46260: EMPTY
46261: LIST
46262: LIST
46263: PUSH
46264: LD_INT 1
46266: PUSH
46267: LD_INT 1
46269: NEG
46270: PUSH
46271: EMPTY
46272: LIST
46273: LIST
46274: PUSH
46275: LD_INT 2
46277: PUSH
46278: LD_INT 0
46280: PUSH
46281: EMPTY
46282: LIST
46283: LIST
46284: PUSH
46285: LD_INT 2
46287: PUSH
46288: LD_INT 1
46290: PUSH
46291: EMPTY
46292: LIST
46293: LIST
46294: PUSH
46295: LD_INT 1
46297: PUSH
46298: LD_INT 2
46300: PUSH
46301: EMPTY
46302: LIST
46303: LIST
46304: PUSH
46305: LD_INT 0
46307: PUSH
46308: LD_INT 2
46310: PUSH
46311: EMPTY
46312: LIST
46313: LIST
46314: PUSH
46315: LD_INT 1
46317: NEG
46318: PUSH
46319: LD_INT 1
46321: PUSH
46322: EMPTY
46323: LIST
46324: LIST
46325: PUSH
46326: LD_INT 2
46328: NEG
46329: PUSH
46330: LD_INT 0
46332: PUSH
46333: EMPTY
46334: LIST
46335: LIST
46336: PUSH
46337: LD_INT 2
46339: NEG
46340: PUSH
46341: LD_INT 1
46343: NEG
46344: PUSH
46345: EMPTY
46346: LIST
46347: LIST
46348: PUSH
46349: LD_INT 2
46351: NEG
46352: PUSH
46353: LD_INT 2
46355: NEG
46356: PUSH
46357: EMPTY
46358: LIST
46359: LIST
46360: PUSH
46361: LD_INT 2
46363: NEG
46364: PUSH
46365: LD_INT 3
46367: NEG
46368: PUSH
46369: EMPTY
46370: LIST
46371: LIST
46372: PUSH
46373: LD_INT 2
46375: PUSH
46376: LD_INT 1
46378: NEG
46379: PUSH
46380: EMPTY
46381: LIST
46382: LIST
46383: PUSH
46384: LD_INT 3
46386: PUSH
46387: LD_INT 1
46389: PUSH
46390: EMPTY
46391: LIST
46392: LIST
46393: PUSH
46394: LD_INT 1
46396: PUSH
46397: LD_INT 3
46399: PUSH
46400: EMPTY
46401: LIST
46402: LIST
46403: PUSH
46404: LD_INT 1
46406: NEG
46407: PUSH
46408: LD_INT 2
46410: PUSH
46411: EMPTY
46412: LIST
46413: LIST
46414: PUSH
46415: LD_INT 3
46417: NEG
46418: PUSH
46419: LD_INT 2
46421: NEG
46422: PUSH
46423: EMPTY
46424: LIST
46425: LIST
46426: PUSH
46427: EMPTY
46428: LIST
46429: LIST
46430: LIST
46431: LIST
46432: LIST
46433: LIST
46434: LIST
46435: LIST
46436: LIST
46437: LIST
46438: LIST
46439: LIST
46440: LIST
46441: LIST
46442: LIST
46443: LIST
46444: LIST
46445: LIST
46446: LIST
46447: LIST
46448: LIST
46449: LIST
46450: LIST
46451: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46452: LD_ADDR_VAR 0 34
46456: PUSH
46457: LD_INT 0
46459: PUSH
46460: LD_INT 0
46462: PUSH
46463: EMPTY
46464: LIST
46465: LIST
46466: PUSH
46467: LD_INT 0
46469: PUSH
46470: LD_INT 1
46472: NEG
46473: PUSH
46474: EMPTY
46475: LIST
46476: LIST
46477: PUSH
46478: LD_INT 1
46480: PUSH
46481: LD_INT 0
46483: PUSH
46484: EMPTY
46485: LIST
46486: LIST
46487: PUSH
46488: LD_INT 1
46490: PUSH
46491: LD_INT 1
46493: PUSH
46494: EMPTY
46495: LIST
46496: LIST
46497: PUSH
46498: LD_INT 0
46500: PUSH
46501: LD_INT 1
46503: PUSH
46504: EMPTY
46505: LIST
46506: LIST
46507: PUSH
46508: LD_INT 1
46510: NEG
46511: PUSH
46512: LD_INT 0
46514: PUSH
46515: EMPTY
46516: LIST
46517: LIST
46518: PUSH
46519: LD_INT 1
46521: NEG
46522: PUSH
46523: LD_INT 1
46525: NEG
46526: PUSH
46527: EMPTY
46528: LIST
46529: LIST
46530: PUSH
46531: LD_INT 1
46533: NEG
46534: PUSH
46535: LD_INT 2
46537: NEG
46538: PUSH
46539: EMPTY
46540: LIST
46541: LIST
46542: PUSH
46543: LD_INT 0
46545: PUSH
46546: LD_INT 2
46548: NEG
46549: PUSH
46550: EMPTY
46551: LIST
46552: LIST
46553: PUSH
46554: LD_INT 1
46556: PUSH
46557: LD_INT 1
46559: NEG
46560: PUSH
46561: EMPTY
46562: LIST
46563: LIST
46564: PUSH
46565: LD_INT 2
46567: PUSH
46568: LD_INT 1
46570: PUSH
46571: EMPTY
46572: LIST
46573: LIST
46574: PUSH
46575: LD_INT 2
46577: PUSH
46578: LD_INT 2
46580: PUSH
46581: EMPTY
46582: LIST
46583: LIST
46584: PUSH
46585: LD_INT 1
46587: PUSH
46588: LD_INT 2
46590: PUSH
46591: EMPTY
46592: LIST
46593: LIST
46594: PUSH
46595: LD_INT 1
46597: NEG
46598: PUSH
46599: LD_INT 1
46601: PUSH
46602: EMPTY
46603: LIST
46604: LIST
46605: PUSH
46606: LD_INT 2
46608: NEG
46609: PUSH
46610: LD_INT 0
46612: PUSH
46613: EMPTY
46614: LIST
46615: LIST
46616: PUSH
46617: LD_INT 2
46619: NEG
46620: PUSH
46621: LD_INT 1
46623: NEG
46624: PUSH
46625: EMPTY
46626: LIST
46627: LIST
46628: PUSH
46629: LD_INT 2
46631: NEG
46632: PUSH
46633: LD_INT 2
46635: NEG
46636: PUSH
46637: EMPTY
46638: LIST
46639: LIST
46640: PUSH
46641: LD_INT 1
46643: NEG
46644: PUSH
46645: LD_INT 3
46647: NEG
46648: PUSH
46649: EMPTY
46650: LIST
46651: LIST
46652: PUSH
46653: LD_INT 1
46655: PUSH
46656: LD_INT 2
46658: NEG
46659: PUSH
46660: EMPTY
46661: LIST
46662: LIST
46663: PUSH
46664: LD_INT 3
46666: PUSH
46667: LD_INT 2
46669: PUSH
46670: EMPTY
46671: LIST
46672: LIST
46673: PUSH
46674: LD_INT 2
46676: PUSH
46677: LD_INT 3
46679: PUSH
46680: EMPTY
46681: LIST
46682: LIST
46683: PUSH
46684: LD_INT 2
46686: NEG
46687: PUSH
46688: LD_INT 1
46690: PUSH
46691: EMPTY
46692: LIST
46693: LIST
46694: PUSH
46695: LD_INT 3
46697: NEG
46698: PUSH
46699: LD_INT 1
46701: NEG
46702: PUSH
46703: EMPTY
46704: LIST
46705: LIST
46706: PUSH
46707: EMPTY
46708: LIST
46709: LIST
46710: LIST
46711: LIST
46712: LIST
46713: LIST
46714: LIST
46715: LIST
46716: LIST
46717: LIST
46718: LIST
46719: LIST
46720: LIST
46721: LIST
46722: LIST
46723: LIST
46724: LIST
46725: LIST
46726: LIST
46727: LIST
46728: LIST
46729: LIST
46730: LIST
46731: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
46732: LD_ADDR_VAR 0 35
46736: PUSH
46737: LD_INT 0
46739: PUSH
46740: LD_INT 0
46742: PUSH
46743: EMPTY
46744: LIST
46745: LIST
46746: PUSH
46747: LD_INT 0
46749: PUSH
46750: LD_INT 1
46752: NEG
46753: PUSH
46754: EMPTY
46755: LIST
46756: LIST
46757: PUSH
46758: LD_INT 1
46760: PUSH
46761: LD_INT 0
46763: PUSH
46764: EMPTY
46765: LIST
46766: LIST
46767: PUSH
46768: LD_INT 1
46770: PUSH
46771: LD_INT 1
46773: PUSH
46774: EMPTY
46775: LIST
46776: LIST
46777: PUSH
46778: LD_INT 0
46780: PUSH
46781: LD_INT 1
46783: PUSH
46784: EMPTY
46785: LIST
46786: LIST
46787: PUSH
46788: LD_INT 1
46790: NEG
46791: PUSH
46792: LD_INT 0
46794: PUSH
46795: EMPTY
46796: LIST
46797: LIST
46798: PUSH
46799: LD_INT 1
46801: NEG
46802: PUSH
46803: LD_INT 1
46805: NEG
46806: PUSH
46807: EMPTY
46808: LIST
46809: LIST
46810: PUSH
46811: LD_INT 2
46813: PUSH
46814: LD_INT 1
46816: PUSH
46817: EMPTY
46818: LIST
46819: LIST
46820: PUSH
46821: LD_INT 2
46823: NEG
46824: PUSH
46825: LD_INT 1
46827: NEG
46828: PUSH
46829: EMPTY
46830: LIST
46831: LIST
46832: PUSH
46833: EMPTY
46834: LIST
46835: LIST
46836: LIST
46837: LIST
46838: LIST
46839: LIST
46840: LIST
46841: LIST
46842: LIST
46843: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
46844: LD_ADDR_VAR 0 36
46848: PUSH
46849: LD_INT 0
46851: PUSH
46852: LD_INT 0
46854: PUSH
46855: EMPTY
46856: LIST
46857: LIST
46858: PUSH
46859: LD_INT 0
46861: PUSH
46862: LD_INT 1
46864: NEG
46865: PUSH
46866: EMPTY
46867: LIST
46868: LIST
46869: PUSH
46870: LD_INT 1
46872: PUSH
46873: LD_INT 0
46875: PUSH
46876: EMPTY
46877: LIST
46878: LIST
46879: PUSH
46880: LD_INT 1
46882: PUSH
46883: LD_INT 1
46885: PUSH
46886: EMPTY
46887: LIST
46888: LIST
46889: PUSH
46890: LD_INT 0
46892: PUSH
46893: LD_INT 1
46895: PUSH
46896: EMPTY
46897: LIST
46898: LIST
46899: PUSH
46900: LD_INT 1
46902: NEG
46903: PUSH
46904: LD_INT 0
46906: PUSH
46907: EMPTY
46908: LIST
46909: LIST
46910: PUSH
46911: LD_INT 1
46913: NEG
46914: PUSH
46915: LD_INT 1
46917: NEG
46918: PUSH
46919: EMPTY
46920: LIST
46921: LIST
46922: PUSH
46923: LD_INT 1
46925: NEG
46926: PUSH
46927: LD_INT 2
46929: NEG
46930: PUSH
46931: EMPTY
46932: LIST
46933: LIST
46934: PUSH
46935: LD_INT 1
46937: PUSH
46938: LD_INT 2
46940: PUSH
46941: EMPTY
46942: LIST
46943: LIST
46944: PUSH
46945: EMPTY
46946: LIST
46947: LIST
46948: LIST
46949: LIST
46950: LIST
46951: LIST
46952: LIST
46953: LIST
46954: LIST
46955: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
46956: LD_ADDR_VAR 0 37
46960: PUSH
46961: LD_INT 0
46963: PUSH
46964: LD_INT 0
46966: PUSH
46967: EMPTY
46968: LIST
46969: LIST
46970: PUSH
46971: LD_INT 0
46973: PUSH
46974: LD_INT 1
46976: NEG
46977: PUSH
46978: EMPTY
46979: LIST
46980: LIST
46981: PUSH
46982: LD_INT 1
46984: PUSH
46985: LD_INT 0
46987: PUSH
46988: EMPTY
46989: LIST
46990: LIST
46991: PUSH
46992: LD_INT 1
46994: PUSH
46995: LD_INT 1
46997: PUSH
46998: EMPTY
46999: LIST
47000: LIST
47001: PUSH
47002: LD_INT 0
47004: PUSH
47005: LD_INT 1
47007: PUSH
47008: EMPTY
47009: LIST
47010: LIST
47011: PUSH
47012: LD_INT 1
47014: NEG
47015: PUSH
47016: LD_INT 0
47018: PUSH
47019: EMPTY
47020: LIST
47021: LIST
47022: PUSH
47023: LD_INT 1
47025: NEG
47026: PUSH
47027: LD_INT 1
47029: NEG
47030: PUSH
47031: EMPTY
47032: LIST
47033: LIST
47034: PUSH
47035: LD_INT 1
47037: PUSH
47038: LD_INT 1
47040: NEG
47041: PUSH
47042: EMPTY
47043: LIST
47044: LIST
47045: PUSH
47046: LD_INT 1
47048: NEG
47049: PUSH
47050: LD_INT 1
47052: PUSH
47053: EMPTY
47054: LIST
47055: LIST
47056: PUSH
47057: EMPTY
47058: LIST
47059: LIST
47060: LIST
47061: LIST
47062: LIST
47063: LIST
47064: LIST
47065: LIST
47066: LIST
47067: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
47068: LD_ADDR_VAR 0 38
47072: PUSH
47073: LD_INT 0
47075: PUSH
47076: LD_INT 0
47078: PUSH
47079: EMPTY
47080: LIST
47081: LIST
47082: PUSH
47083: LD_INT 0
47085: PUSH
47086: LD_INT 1
47088: NEG
47089: PUSH
47090: EMPTY
47091: LIST
47092: LIST
47093: PUSH
47094: LD_INT 1
47096: PUSH
47097: LD_INT 0
47099: PUSH
47100: EMPTY
47101: LIST
47102: LIST
47103: PUSH
47104: LD_INT 1
47106: PUSH
47107: LD_INT 1
47109: PUSH
47110: EMPTY
47111: LIST
47112: LIST
47113: PUSH
47114: LD_INT 0
47116: PUSH
47117: LD_INT 1
47119: PUSH
47120: EMPTY
47121: LIST
47122: LIST
47123: PUSH
47124: LD_INT 1
47126: NEG
47127: PUSH
47128: LD_INT 0
47130: PUSH
47131: EMPTY
47132: LIST
47133: LIST
47134: PUSH
47135: LD_INT 1
47137: NEG
47138: PUSH
47139: LD_INT 1
47141: NEG
47142: PUSH
47143: EMPTY
47144: LIST
47145: LIST
47146: PUSH
47147: LD_INT 2
47149: PUSH
47150: LD_INT 1
47152: PUSH
47153: EMPTY
47154: LIST
47155: LIST
47156: PUSH
47157: LD_INT 2
47159: NEG
47160: PUSH
47161: LD_INT 1
47163: NEG
47164: PUSH
47165: EMPTY
47166: LIST
47167: LIST
47168: PUSH
47169: EMPTY
47170: LIST
47171: LIST
47172: LIST
47173: LIST
47174: LIST
47175: LIST
47176: LIST
47177: LIST
47178: LIST
47179: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
47180: LD_ADDR_VAR 0 39
47184: PUSH
47185: LD_INT 0
47187: PUSH
47188: LD_INT 0
47190: PUSH
47191: EMPTY
47192: LIST
47193: LIST
47194: PUSH
47195: LD_INT 0
47197: PUSH
47198: LD_INT 1
47200: NEG
47201: PUSH
47202: EMPTY
47203: LIST
47204: LIST
47205: PUSH
47206: LD_INT 1
47208: PUSH
47209: LD_INT 0
47211: PUSH
47212: EMPTY
47213: LIST
47214: LIST
47215: PUSH
47216: LD_INT 1
47218: PUSH
47219: LD_INT 1
47221: PUSH
47222: EMPTY
47223: LIST
47224: LIST
47225: PUSH
47226: LD_INT 0
47228: PUSH
47229: LD_INT 1
47231: PUSH
47232: EMPTY
47233: LIST
47234: LIST
47235: PUSH
47236: LD_INT 1
47238: NEG
47239: PUSH
47240: LD_INT 0
47242: PUSH
47243: EMPTY
47244: LIST
47245: LIST
47246: PUSH
47247: LD_INT 1
47249: NEG
47250: PUSH
47251: LD_INT 1
47253: NEG
47254: PUSH
47255: EMPTY
47256: LIST
47257: LIST
47258: PUSH
47259: LD_INT 1
47261: NEG
47262: PUSH
47263: LD_INT 2
47265: NEG
47266: PUSH
47267: EMPTY
47268: LIST
47269: LIST
47270: PUSH
47271: LD_INT 1
47273: PUSH
47274: LD_INT 2
47276: PUSH
47277: EMPTY
47278: LIST
47279: LIST
47280: PUSH
47281: EMPTY
47282: LIST
47283: LIST
47284: LIST
47285: LIST
47286: LIST
47287: LIST
47288: LIST
47289: LIST
47290: LIST
47291: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
47292: LD_ADDR_VAR 0 40
47296: PUSH
47297: LD_INT 0
47299: PUSH
47300: LD_INT 0
47302: PUSH
47303: EMPTY
47304: LIST
47305: LIST
47306: PUSH
47307: LD_INT 0
47309: PUSH
47310: LD_INT 1
47312: NEG
47313: PUSH
47314: EMPTY
47315: LIST
47316: LIST
47317: PUSH
47318: LD_INT 1
47320: PUSH
47321: LD_INT 0
47323: PUSH
47324: EMPTY
47325: LIST
47326: LIST
47327: PUSH
47328: LD_INT 1
47330: PUSH
47331: LD_INT 1
47333: PUSH
47334: EMPTY
47335: LIST
47336: LIST
47337: PUSH
47338: LD_INT 0
47340: PUSH
47341: LD_INT 1
47343: PUSH
47344: EMPTY
47345: LIST
47346: LIST
47347: PUSH
47348: LD_INT 1
47350: NEG
47351: PUSH
47352: LD_INT 0
47354: PUSH
47355: EMPTY
47356: LIST
47357: LIST
47358: PUSH
47359: LD_INT 1
47361: NEG
47362: PUSH
47363: LD_INT 1
47365: NEG
47366: PUSH
47367: EMPTY
47368: LIST
47369: LIST
47370: PUSH
47371: LD_INT 1
47373: PUSH
47374: LD_INT 1
47376: NEG
47377: PUSH
47378: EMPTY
47379: LIST
47380: LIST
47381: PUSH
47382: LD_INT 1
47384: NEG
47385: PUSH
47386: LD_INT 1
47388: PUSH
47389: EMPTY
47390: LIST
47391: LIST
47392: PUSH
47393: EMPTY
47394: LIST
47395: LIST
47396: LIST
47397: LIST
47398: LIST
47399: LIST
47400: LIST
47401: LIST
47402: LIST
47403: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47404: LD_ADDR_VAR 0 41
47408: PUSH
47409: LD_INT 0
47411: PUSH
47412: LD_INT 0
47414: PUSH
47415: EMPTY
47416: LIST
47417: LIST
47418: PUSH
47419: LD_INT 0
47421: PUSH
47422: LD_INT 1
47424: NEG
47425: PUSH
47426: EMPTY
47427: LIST
47428: LIST
47429: PUSH
47430: LD_INT 1
47432: PUSH
47433: LD_INT 0
47435: PUSH
47436: EMPTY
47437: LIST
47438: LIST
47439: PUSH
47440: LD_INT 1
47442: PUSH
47443: LD_INT 1
47445: PUSH
47446: EMPTY
47447: LIST
47448: LIST
47449: PUSH
47450: LD_INT 0
47452: PUSH
47453: LD_INT 1
47455: PUSH
47456: EMPTY
47457: LIST
47458: LIST
47459: PUSH
47460: LD_INT 1
47462: NEG
47463: PUSH
47464: LD_INT 0
47466: PUSH
47467: EMPTY
47468: LIST
47469: LIST
47470: PUSH
47471: LD_INT 1
47473: NEG
47474: PUSH
47475: LD_INT 1
47477: NEG
47478: PUSH
47479: EMPTY
47480: LIST
47481: LIST
47482: PUSH
47483: LD_INT 1
47485: NEG
47486: PUSH
47487: LD_INT 2
47489: NEG
47490: PUSH
47491: EMPTY
47492: LIST
47493: LIST
47494: PUSH
47495: LD_INT 1
47497: PUSH
47498: LD_INT 1
47500: NEG
47501: PUSH
47502: EMPTY
47503: LIST
47504: LIST
47505: PUSH
47506: LD_INT 2
47508: PUSH
47509: LD_INT 0
47511: PUSH
47512: EMPTY
47513: LIST
47514: LIST
47515: PUSH
47516: LD_INT 2
47518: PUSH
47519: LD_INT 1
47521: PUSH
47522: EMPTY
47523: LIST
47524: LIST
47525: PUSH
47526: LD_INT 2
47528: PUSH
47529: LD_INT 2
47531: PUSH
47532: EMPTY
47533: LIST
47534: LIST
47535: PUSH
47536: LD_INT 1
47538: PUSH
47539: LD_INT 2
47541: PUSH
47542: EMPTY
47543: LIST
47544: LIST
47545: PUSH
47546: LD_INT 1
47548: NEG
47549: PUSH
47550: LD_INT 1
47552: PUSH
47553: EMPTY
47554: LIST
47555: LIST
47556: PUSH
47557: LD_INT 2
47559: NEG
47560: PUSH
47561: LD_INT 0
47563: PUSH
47564: EMPTY
47565: LIST
47566: LIST
47567: PUSH
47568: LD_INT 2
47570: NEG
47571: PUSH
47572: LD_INT 1
47574: NEG
47575: PUSH
47576: EMPTY
47577: LIST
47578: LIST
47579: PUSH
47580: LD_INT 2
47582: NEG
47583: PUSH
47584: LD_INT 2
47586: NEG
47587: PUSH
47588: EMPTY
47589: LIST
47590: LIST
47591: PUSH
47592: LD_INT 2
47594: NEG
47595: PUSH
47596: LD_INT 3
47598: NEG
47599: PUSH
47600: EMPTY
47601: LIST
47602: LIST
47603: PUSH
47604: LD_INT 2
47606: PUSH
47607: LD_INT 1
47609: NEG
47610: PUSH
47611: EMPTY
47612: LIST
47613: LIST
47614: PUSH
47615: LD_INT 3
47617: PUSH
47618: LD_INT 0
47620: PUSH
47621: EMPTY
47622: LIST
47623: LIST
47624: PUSH
47625: LD_INT 3
47627: PUSH
47628: LD_INT 1
47630: PUSH
47631: EMPTY
47632: LIST
47633: LIST
47634: PUSH
47635: LD_INT 3
47637: PUSH
47638: LD_INT 2
47640: PUSH
47641: EMPTY
47642: LIST
47643: LIST
47644: PUSH
47645: LD_INT 3
47647: PUSH
47648: LD_INT 3
47650: PUSH
47651: EMPTY
47652: LIST
47653: LIST
47654: PUSH
47655: LD_INT 2
47657: PUSH
47658: LD_INT 3
47660: PUSH
47661: EMPTY
47662: LIST
47663: LIST
47664: PUSH
47665: LD_INT 2
47667: NEG
47668: PUSH
47669: LD_INT 1
47671: PUSH
47672: EMPTY
47673: LIST
47674: LIST
47675: PUSH
47676: LD_INT 3
47678: NEG
47679: PUSH
47680: LD_INT 0
47682: PUSH
47683: EMPTY
47684: LIST
47685: LIST
47686: PUSH
47687: LD_INT 3
47689: NEG
47690: PUSH
47691: LD_INT 1
47693: NEG
47694: PUSH
47695: EMPTY
47696: LIST
47697: LIST
47698: PUSH
47699: LD_INT 3
47701: NEG
47702: PUSH
47703: LD_INT 2
47705: NEG
47706: PUSH
47707: EMPTY
47708: LIST
47709: LIST
47710: PUSH
47711: LD_INT 3
47713: NEG
47714: PUSH
47715: LD_INT 3
47717: NEG
47718: PUSH
47719: EMPTY
47720: LIST
47721: LIST
47722: PUSH
47723: EMPTY
47724: LIST
47725: LIST
47726: LIST
47727: LIST
47728: LIST
47729: LIST
47730: LIST
47731: LIST
47732: LIST
47733: LIST
47734: LIST
47735: LIST
47736: LIST
47737: LIST
47738: LIST
47739: LIST
47740: LIST
47741: LIST
47742: LIST
47743: LIST
47744: LIST
47745: LIST
47746: LIST
47747: LIST
47748: LIST
47749: LIST
47750: LIST
47751: LIST
47752: LIST
47753: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47754: LD_ADDR_VAR 0 42
47758: PUSH
47759: LD_INT 0
47761: PUSH
47762: LD_INT 0
47764: PUSH
47765: EMPTY
47766: LIST
47767: LIST
47768: PUSH
47769: LD_INT 0
47771: PUSH
47772: LD_INT 1
47774: NEG
47775: PUSH
47776: EMPTY
47777: LIST
47778: LIST
47779: PUSH
47780: LD_INT 1
47782: PUSH
47783: LD_INT 0
47785: PUSH
47786: EMPTY
47787: LIST
47788: LIST
47789: PUSH
47790: LD_INT 1
47792: PUSH
47793: LD_INT 1
47795: PUSH
47796: EMPTY
47797: LIST
47798: LIST
47799: PUSH
47800: LD_INT 0
47802: PUSH
47803: LD_INT 1
47805: PUSH
47806: EMPTY
47807: LIST
47808: LIST
47809: PUSH
47810: LD_INT 1
47812: NEG
47813: PUSH
47814: LD_INT 0
47816: PUSH
47817: EMPTY
47818: LIST
47819: LIST
47820: PUSH
47821: LD_INT 1
47823: NEG
47824: PUSH
47825: LD_INT 1
47827: NEG
47828: PUSH
47829: EMPTY
47830: LIST
47831: LIST
47832: PUSH
47833: LD_INT 1
47835: NEG
47836: PUSH
47837: LD_INT 2
47839: NEG
47840: PUSH
47841: EMPTY
47842: LIST
47843: LIST
47844: PUSH
47845: LD_INT 0
47847: PUSH
47848: LD_INT 2
47850: NEG
47851: PUSH
47852: EMPTY
47853: LIST
47854: LIST
47855: PUSH
47856: LD_INT 1
47858: PUSH
47859: LD_INT 1
47861: NEG
47862: PUSH
47863: EMPTY
47864: LIST
47865: LIST
47866: PUSH
47867: LD_INT 2
47869: PUSH
47870: LD_INT 1
47872: PUSH
47873: EMPTY
47874: LIST
47875: LIST
47876: PUSH
47877: LD_INT 2
47879: PUSH
47880: LD_INT 2
47882: PUSH
47883: EMPTY
47884: LIST
47885: LIST
47886: PUSH
47887: LD_INT 1
47889: PUSH
47890: LD_INT 2
47892: PUSH
47893: EMPTY
47894: LIST
47895: LIST
47896: PUSH
47897: LD_INT 0
47899: PUSH
47900: LD_INT 2
47902: PUSH
47903: EMPTY
47904: LIST
47905: LIST
47906: PUSH
47907: LD_INT 1
47909: NEG
47910: PUSH
47911: LD_INT 1
47913: PUSH
47914: EMPTY
47915: LIST
47916: LIST
47917: PUSH
47918: LD_INT 2
47920: NEG
47921: PUSH
47922: LD_INT 1
47924: NEG
47925: PUSH
47926: EMPTY
47927: LIST
47928: LIST
47929: PUSH
47930: LD_INT 2
47932: NEG
47933: PUSH
47934: LD_INT 2
47936: NEG
47937: PUSH
47938: EMPTY
47939: LIST
47940: LIST
47941: PUSH
47942: LD_INT 2
47944: NEG
47945: PUSH
47946: LD_INT 3
47948: NEG
47949: PUSH
47950: EMPTY
47951: LIST
47952: LIST
47953: PUSH
47954: LD_INT 1
47956: NEG
47957: PUSH
47958: LD_INT 3
47960: NEG
47961: PUSH
47962: EMPTY
47963: LIST
47964: LIST
47965: PUSH
47966: LD_INT 0
47968: PUSH
47969: LD_INT 3
47971: NEG
47972: PUSH
47973: EMPTY
47974: LIST
47975: LIST
47976: PUSH
47977: LD_INT 1
47979: PUSH
47980: LD_INT 2
47982: NEG
47983: PUSH
47984: EMPTY
47985: LIST
47986: LIST
47987: PUSH
47988: LD_INT 3
47990: PUSH
47991: LD_INT 2
47993: PUSH
47994: EMPTY
47995: LIST
47996: LIST
47997: PUSH
47998: LD_INT 3
48000: PUSH
48001: LD_INT 3
48003: PUSH
48004: EMPTY
48005: LIST
48006: LIST
48007: PUSH
48008: LD_INT 2
48010: PUSH
48011: LD_INT 3
48013: PUSH
48014: EMPTY
48015: LIST
48016: LIST
48017: PUSH
48018: LD_INT 1
48020: PUSH
48021: LD_INT 3
48023: PUSH
48024: EMPTY
48025: LIST
48026: LIST
48027: PUSH
48028: LD_INT 0
48030: PUSH
48031: LD_INT 3
48033: PUSH
48034: EMPTY
48035: LIST
48036: LIST
48037: PUSH
48038: LD_INT 1
48040: NEG
48041: PUSH
48042: LD_INT 2
48044: PUSH
48045: EMPTY
48046: LIST
48047: LIST
48048: PUSH
48049: LD_INT 3
48051: NEG
48052: PUSH
48053: LD_INT 2
48055: NEG
48056: PUSH
48057: EMPTY
48058: LIST
48059: LIST
48060: PUSH
48061: LD_INT 3
48063: NEG
48064: PUSH
48065: LD_INT 3
48067: NEG
48068: PUSH
48069: EMPTY
48070: LIST
48071: LIST
48072: PUSH
48073: EMPTY
48074: LIST
48075: LIST
48076: LIST
48077: LIST
48078: LIST
48079: LIST
48080: LIST
48081: LIST
48082: LIST
48083: LIST
48084: LIST
48085: LIST
48086: LIST
48087: LIST
48088: LIST
48089: LIST
48090: LIST
48091: LIST
48092: LIST
48093: LIST
48094: LIST
48095: LIST
48096: LIST
48097: LIST
48098: LIST
48099: LIST
48100: LIST
48101: LIST
48102: LIST
48103: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48104: LD_ADDR_VAR 0 43
48108: PUSH
48109: LD_INT 0
48111: PUSH
48112: LD_INT 0
48114: PUSH
48115: EMPTY
48116: LIST
48117: LIST
48118: PUSH
48119: LD_INT 0
48121: PUSH
48122: LD_INT 1
48124: NEG
48125: PUSH
48126: EMPTY
48127: LIST
48128: LIST
48129: PUSH
48130: LD_INT 1
48132: PUSH
48133: LD_INT 0
48135: PUSH
48136: EMPTY
48137: LIST
48138: LIST
48139: PUSH
48140: LD_INT 1
48142: PUSH
48143: LD_INT 1
48145: PUSH
48146: EMPTY
48147: LIST
48148: LIST
48149: PUSH
48150: LD_INT 0
48152: PUSH
48153: LD_INT 1
48155: PUSH
48156: EMPTY
48157: LIST
48158: LIST
48159: PUSH
48160: LD_INT 1
48162: NEG
48163: PUSH
48164: LD_INT 0
48166: PUSH
48167: EMPTY
48168: LIST
48169: LIST
48170: PUSH
48171: LD_INT 1
48173: NEG
48174: PUSH
48175: LD_INT 1
48177: NEG
48178: PUSH
48179: EMPTY
48180: LIST
48181: LIST
48182: PUSH
48183: LD_INT 1
48185: NEG
48186: PUSH
48187: LD_INT 2
48189: NEG
48190: PUSH
48191: EMPTY
48192: LIST
48193: LIST
48194: PUSH
48195: LD_INT 0
48197: PUSH
48198: LD_INT 2
48200: NEG
48201: PUSH
48202: EMPTY
48203: LIST
48204: LIST
48205: PUSH
48206: LD_INT 1
48208: PUSH
48209: LD_INT 1
48211: NEG
48212: PUSH
48213: EMPTY
48214: LIST
48215: LIST
48216: PUSH
48217: LD_INT 2
48219: PUSH
48220: LD_INT 0
48222: PUSH
48223: EMPTY
48224: LIST
48225: LIST
48226: PUSH
48227: LD_INT 2
48229: PUSH
48230: LD_INT 1
48232: PUSH
48233: EMPTY
48234: LIST
48235: LIST
48236: PUSH
48237: LD_INT 1
48239: PUSH
48240: LD_INT 2
48242: PUSH
48243: EMPTY
48244: LIST
48245: LIST
48246: PUSH
48247: LD_INT 0
48249: PUSH
48250: LD_INT 2
48252: PUSH
48253: EMPTY
48254: LIST
48255: LIST
48256: PUSH
48257: LD_INT 1
48259: NEG
48260: PUSH
48261: LD_INT 1
48263: PUSH
48264: EMPTY
48265: LIST
48266: LIST
48267: PUSH
48268: LD_INT 2
48270: NEG
48271: PUSH
48272: LD_INT 0
48274: PUSH
48275: EMPTY
48276: LIST
48277: LIST
48278: PUSH
48279: LD_INT 2
48281: NEG
48282: PUSH
48283: LD_INT 1
48285: NEG
48286: PUSH
48287: EMPTY
48288: LIST
48289: LIST
48290: PUSH
48291: LD_INT 1
48293: NEG
48294: PUSH
48295: LD_INT 3
48297: NEG
48298: PUSH
48299: EMPTY
48300: LIST
48301: LIST
48302: PUSH
48303: LD_INT 0
48305: PUSH
48306: LD_INT 3
48308: NEG
48309: PUSH
48310: EMPTY
48311: LIST
48312: LIST
48313: PUSH
48314: LD_INT 1
48316: PUSH
48317: LD_INT 2
48319: NEG
48320: PUSH
48321: EMPTY
48322: LIST
48323: LIST
48324: PUSH
48325: LD_INT 2
48327: PUSH
48328: LD_INT 1
48330: NEG
48331: PUSH
48332: EMPTY
48333: LIST
48334: LIST
48335: PUSH
48336: LD_INT 3
48338: PUSH
48339: LD_INT 0
48341: PUSH
48342: EMPTY
48343: LIST
48344: LIST
48345: PUSH
48346: LD_INT 3
48348: PUSH
48349: LD_INT 1
48351: PUSH
48352: EMPTY
48353: LIST
48354: LIST
48355: PUSH
48356: LD_INT 1
48358: PUSH
48359: LD_INT 3
48361: PUSH
48362: EMPTY
48363: LIST
48364: LIST
48365: PUSH
48366: LD_INT 0
48368: PUSH
48369: LD_INT 3
48371: PUSH
48372: EMPTY
48373: LIST
48374: LIST
48375: PUSH
48376: LD_INT 1
48378: NEG
48379: PUSH
48380: LD_INT 2
48382: PUSH
48383: EMPTY
48384: LIST
48385: LIST
48386: PUSH
48387: LD_INT 2
48389: NEG
48390: PUSH
48391: LD_INT 1
48393: PUSH
48394: EMPTY
48395: LIST
48396: LIST
48397: PUSH
48398: LD_INT 3
48400: NEG
48401: PUSH
48402: LD_INT 0
48404: PUSH
48405: EMPTY
48406: LIST
48407: LIST
48408: PUSH
48409: LD_INT 3
48411: NEG
48412: PUSH
48413: LD_INT 1
48415: NEG
48416: PUSH
48417: EMPTY
48418: LIST
48419: LIST
48420: PUSH
48421: EMPTY
48422: LIST
48423: LIST
48424: LIST
48425: LIST
48426: LIST
48427: LIST
48428: LIST
48429: LIST
48430: LIST
48431: LIST
48432: LIST
48433: LIST
48434: LIST
48435: LIST
48436: LIST
48437: LIST
48438: LIST
48439: LIST
48440: LIST
48441: LIST
48442: LIST
48443: LIST
48444: LIST
48445: LIST
48446: LIST
48447: LIST
48448: LIST
48449: LIST
48450: LIST
48451: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48452: LD_ADDR_VAR 0 44
48456: PUSH
48457: LD_INT 0
48459: PUSH
48460: LD_INT 0
48462: PUSH
48463: EMPTY
48464: LIST
48465: LIST
48466: PUSH
48467: LD_INT 0
48469: PUSH
48470: LD_INT 1
48472: NEG
48473: PUSH
48474: EMPTY
48475: LIST
48476: LIST
48477: PUSH
48478: LD_INT 1
48480: PUSH
48481: LD_INT 0
48483: PUSH
48484: EMPTY
48485: LIST
48486: LIST
48487: PUSH
48488: LD_INT 1
48490: PUSH
48491: LD_INT 1
48493: PUSH
48494: EMPTY
48495: LIST
48496: LIST
48497: PUSH
48498: LD_INT 0
48500: PUSH
48501: LD_INT 1
48503: PUSH
48504: EMPTY
48505: LIST
48506: LIST
48507: PUSH
48508: LD_INT 1
48510: NEG
48511: PUSH
48512: LD_INT 0
48514: PUSH
48515: EMPTY
48516: LIST
48517: LIST
48518: PUSH
48519: LD_INT 1
48521: NEG
48522: PUSH
48523: LD_INT 1
48525: NEG
48526: PUSH
48527: EMPTY
48528: LIST
48529: LIST
48530: PUSH
48531: LD_INT 1
48533: NEG
48534: PUSH
48535: LD_INT 2
48537: NEG
48538: PUSH
48539: EMPTY
48540: LIST
48541: LIST
48542: PUSH
48543: LD_INT 1
48545: PUSH
48546: LD_INT 1
48548: NEG
48549: PUSH
48550: EMPTY
48551: LIST
48552: LIST
48553: PUSH
48554: LD_INT 2
48556: PUSH
48557: LD_INT 0
48559: PUSH
48560: EMPTY
48561: LIST
48562: LIST
48563: PUSH
48564: LD_INT 2
48566: PUSH
48567: LD_INT 1
48569: PUSH
48570: EMPTY
48571: LIST
48572: LIST
48573: PUSH
48574: LD_INT 2
48576: PUSH
48577: LD_INT 2
48579: PUSH
48580: EMPTY
48581: LIST
48582: LIST
48583: PUSH
48584: LD_INT 1
48586: PUSH
48587: LD_INT 2
48589: PUSH
48590: EMPTY
48591: LIST
48592: LIST
48593: PUSH
48594: LD_INT 1
48596: NEG
48597: PUSH
48598: LD_INT 1
48600: PUSH
48601: EMPTY
48602: LIST
48603: LIST
48604: PUSH
48605: LD_INT 2
48607: NEG
48608: PUSH
48609: LD_INT 0
48611: PUSH
48612: EMPTY
48613: LIST
48614: LIST
48615: PUSH
48616: LD_INT 2
48618: NEG
48619: PUSH
48620: LD_INT 1
48622: NEG
48623: PUSH
48624: EMPTY
48625: LIST
48626: LIST
48627: PUSH
48628: LD_INT 2
48630: NEG
48631: PUSH
48632: LD_INT 2
48634: NEG
48635: PUSH
48636: EMPTY
48637: LIST
48638: LIST
48639: PUSH
48640: LD_INT 2
48642: NEG
48643: PUSH
48644: LD_INT 3
48646: NEG
48647: PUSH
48648: EMPTY
48649: LIST
48650: LIST
48651: PUSH
48652: LD_INT 2
48654: PUSH
48655: LD_INT 1
48657: NEG
48658: PUSH
48659: EMPTY
48660: LIST
48661: LIST
48662: PUSH
48663: LD_INT 3
48665: PUSH
48666: LD_INT 0
48668: PUSH
48669: EMPTY
48670: LIST
48671: LIST
48672: PUSH
48673: LD_INT 3
48675: PUSH
48676: LD_INT 1
48678: PUSH
48679: EMPTY
48680: LIST
48681: LIST
48682: PUSH
48683: LD_INT 3
48685: PUSH
48686: LD_INT 2
48688: PUSH
48689: EMPTY
48690: LIST
48691: LIST
48692: PUSH
48693: LD_INT 3
48695: PUSH
48696: LD_INT 3
48698: PUSH
48699: EMPTY
48700: LIST
48701: LIST
48702: PUSH
48703: LD_INT 2
48705: PUSH
48706: LD_INT 3
48708: PUSH
48709: EMPTY
48710: LIST
48711: LIST
48712: PUSH
48713: LD_INT 2
48715: NEG
48716: PUSH
48717: LD_INT 1
48719: PUSH
48720: EMPTY
48721: LIST
48722: LIST
48723: PUSH
48724: LD_INT 3
48726: NEG
48727: PUSH
48728: LD_INT 0
48730: PUSH
48731: EMPTY
48732: LIST
48733: LIST
48734: PUSH
48735: LD_INT 3
48737: NEG
48738: PUSH
48739: LD_INT 1
48741: NEG
48742: PUSH
48743: EMPTY
48744: LIST
48745: LIST
48746: PUSH
48747: LD_INT 3
48749: NEG
48750: PUSH
48751: LD_INT 2
48753: NEG
48754: PUSH
48755: EMPTY
48756: LIST
48757: LIST
48758: PUSH
48759: LD_INT 3
48761: NEG
48762: PUSH
48763: LD_INT 3
48765: NEG
48766: PUSH
48767: EMPTY
48768: LIST
48769: LIST
48770: PUSH
48771: EMPTY
48772: LIST
48773: LIST
48774: LIST
48775: LIST
48776: LIST
48777: LIST
48778: LIST
48779: LIST
48780: LIST
48781: LIST
48782: LIST
48783: LIST
48784: LIST
48785: LIST
48786: LIST
48787: LIST
48788: LIST
48789: LIST
48790: LIST
48791: LIST
48792: LIST
48793: LIST
48794: LIST
48795: LIST
48796: LIST
48797: LIST
48798: LIST
48799: LIST
48800: LIST
48801: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48802: LD_ADDR_VAR 0 45
48806: PUSH
48807: LD_INT 0
48809: PUSH
48810: LD_INT 0
48812: PUSH
48813: EMPTY
48814: LIST
48815: LIST
48816: PUSH
48817: LD_INT 0
48819: PUSH
48820: LD_INT 1
48822: NEG
48823: PUSH
48824: EMPTY
48825: LIST
48826: LIST
48827: PUSH
48828: LD_INT 1
48830: PUSH
48831: LD_INT 0
48833: PUSH
48834: EMPTY
48835: LIST
48836: LIST
48837: PUSH
48838: LD_INT 1
48840: PUSH
48841: LD_INT 1
48843: PUSH
48844: EMPTY
48845: LIST
48846: LIST
48847: PUSH
48848: LD_INT 0
48850: PUSH
48851: LD_INT 1
48853: PUSH
48854: EMPTY
48855: LIST
48856: LIST
48857: PUSH
48858: LD_INT 1
48860: NEG
48861: PUSH
48862: LD_INT 0
48864: PUSH
48865: EMPTY
48866: LIST
48867: LIST
48868: PUSH
48869: LD_INT 1
48871: NEG
48872: PUSH
48873: LD_INT 1
48875: NEG
48876: PUSH
48877: EMPTY
48878: LIST
48879: LIST
48880: PUSH
48881: LD_INT 1
48883: NEG
48884: PUSH
48885: LD_INT 2
48887: NEG
48888: PUSH
48889: EMPTY
48890: LIST
48891: LIST
48892: PUSH
48893: LD_INT 0
48895: PUSH
48896: LD_INT 2
48898: NEG
48899: PUSH
48900: EMPTY
48901: LIST
48902: LIST
48903: PUSH
48904: LD_INT 1
48906: PUSH
48907: LD_INT 1
48909: NEG
48910: PUSH
48911: EMPTY
48912: LIST
48913: LIST
48914: PUSH
48915: LD_INT 2
48917: PUSH
48918: LD_INT 1
48920: PUSH
48921: EMPTY
48922: LIST
48923: LIST
48924: PUSH
48925: LD_INT 2
48927: PUSH
48928: LD_INT 2
48930: PUSH
48931: EMPTY
48932: LIST
48933: LIST
48934: PUSH
48935: LD_INT 1
48937: PUSH
48938: LD_INT 2
48940: PUSH
48941: EMPTY
48942: LIST
48943: LIST
48944: PUSH
48945: LD_INT 0
48947: PUSH
48948: LD_INT 2
48950: PUSH
48951: EMPTY
48952: LIST
48953: LIST
48954: PUSH
48955: LD_INT 1
48957: NEG
48958: PUSH
48959: LD_INT 1
48961: PUSH
48962: EMPTY
48963: LIST
48964: LIST
48965: PUSH
48966: LD_INT 2
48968: NEG
48969: PUSH
48970: LD_INT 1
48972: NEG
48973: PUSH
48974: EMPTY
48975: LIST
48976: LIST
48977: PUSH
48978: LD_INT 2
48980: NEG
48981: PUSH
48982: LD_INT 2
48984: NEG
48985: PUSH
48986: EMPTY
48987: LIST
48988: LIST
48989: PUSH
48990: LD_INT 2
48992: NEG
48993: PUSH
48994: LD_INT 3
48996: NEG
48997: PUSH
48998: EMPTY
48999: LIST
49000: LIST
49001: PUSH
49002: LD_INT 1
49004: NEG
49005: PUSH
49006: LD_INT 3
49008: NEG
49009: PUSH
49010: EMPTY
49011: LIST
49012: LIST
49013: PUSH
49014: LD_INT 0
49016: PUSH
49017: LD_INT 3
49019: NEG
49020: PUSH
49021: EMPTY
49022: LIST
49023: LIST
49024: PUSH
49025: LD_INT 1
49027: PUSH
49028: LD_INT 2
49030: NEG
49031: PUSH
49032: EMPTY
49033: LIST
49034: LIST
49035: PUSH
49036: LD_INT 3
49038: PUSH
49039: LD_INT 2
49041: PUSH
49042: EMPTY
49043: LIST
49044: LIST
49045: PUSH
49046: LD_INT 3
49048: PUSH
49049: LD_INT 3
49051: PUSH
49052: EMPTY
49053: LIST
49054: LIST
49055: PUSH
49056: LD_INT 2
49058: PUSH
49059: LD_INT 3
49061: PUSH
49062: EMPTY
49063: LIST
49064: LIST
49065: PUSH
49066: LD_INT 1
49068: PUSH
49069: LD_INT 3
49071: PUSH
49072: EMPTY
49073: LIST
49074: LIST
49075: PUSH
49076: LD_INT 0
49078: PUSH
49079: LD_INT 3
49081: PUSH
49082: EMPTY
49083: LIST
49084: LIST
49085: PUSH
49086: LD_INT 1
49088: NEG
49089: PUSH
49090: LD_INT 2
49092: PUSH
49093: EMPTY
49094: LIST
49095: LIST
49096: PUSH
49097: LD_INT 3
49099: NEG
49100: PUSH
49101: LD_INT 2
49103: NEG
49104: PUSH
49105: EMPTY
49106: LIST
49107: LIST
49108: PUSH
49109: LD_INT 3
49111: NEG
49112: PUSH
49113: LD_INT 3
49115: NEG
49116: PUSH
49117: EMPTY
49118: LIST
49119: LIST
49120: PUSH
49121: EMPTY
49122: LIST
49123: LIST
49124: LIST
49125: LIST
49126: LIST
49127: LIST
49128: LIST
49129: LIST
49130: LIST
49131: LIST
49132: LIST
49133: LIST
49134: LIST
49135: LIST
49136: LIST
49137: LIST
49138: LIST
49139: LIST
49140: LIST
49141: LIST
49142: LIST
49143: LIST
49144: LIST
49145: LIST
49146: LIST
49147: LIST
49148: LIST
49149: LIST
49150: LIST
49151: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49152: LD_ADDR_VAR 0 46
49156: PUSH
49157: LD_INT 0
49159: PUSH
49160: LD_INT 0
49162: PUSH
49163: EMPTY
49164: LIST
49165: LIST
49166: PUSH
49167: LD_INT 0
49169: PUSH
49170: LD_INT 1
49172: NEG
49173: PUSH
49174: EMPTY
49175: LIST
49176: LIST
49177: PUSH
49178: LD_INT 1
49180: PUSH
49181: LD_INT 0
49183: PUSH
49184: EMPTY
49185: LIST
49186: LIST
49187: PUSH
49188: LD_INT 1
49190: PUSH
49191: LD_INT 1
49193: PUSH
49194: EMPTY
49195: LIST
49196: LIST
49197: PUSH
49198: LD_INT 0
49200: PUSH
49201: LD_INT 1
49203: PUSH
49204: EMPTY
49205: LIST
49206: LIST
49207: PUSH
49208: LD_INT 1
49210: NEG
49211: PUSH
49212: LD_INT 0
49214: PUSH
49215: EMPTY
49216: LIST
49217: LIST
49218: PUSH
49219: LD_INT 1
49221: NEG
49222: PUSH
49223: LD_INT 1
49225: NEG
49226: PUSH
49227: EMPTY
49228: LIST
49229: LIST
49230: PUSH
49231: LD_INT 1
49233: NEG
49234: PUSH
49235: LD_INT 2
49237: NEG
49238: PUSH
49239: EMPTY
49240: LIST
49241: LIST
49242: PUSH
49243: LD_INT 0
49245: PUSH
49246: LD_INT 2
49248: NEG
49249: PUSH
49250: EMPTY
49251: LIST
49252: LIST
49253: PUSH
49254: LD_INT 1
49256: PUSH
49257: LD_INT 1
49259: NEG
49260: PUSH
49261: EMPTY
49262: LIST
49263: LIST
49264: PUSH
49265: LD_INT 2
49267: PUSH
49268: LD_INT 0
49270: PUSH
49271: EMPTY
49272: LIST
49273: LIST
49274: PUSH
49275: LD_INT 2
49277: PUSH
49278: LD_INT 1
49280: PUSH
49281: EMPTY
49282: LIST
49283: LIST
49284: PUSH
49285: LD_INT 1
49287: PUSH
49288: LD_INT 2
49290: PUSH
49291: EMPTY
49292: LIST
49293: LIST
49294: PUSH
49295: LD_INT 0
49297: PUSH
49298: LD_INT 2
49300: PUSH
49301: EMPTY
49302: LIST
49303: LIST
49304: PUSH
49305: LD_INT 1
49307: NEG
49308: PUSH
49309: LD_INT 1
49311: PUSH
49312: EMPTY
49313: LIST
49314: LIST
49315: PUSH
49316: LD_INT 2
49318: NEG
49319: PUSH
49320: LD_INT 0
49322: PUSH
49323: EMPTY
49324: LIST
49325: LIST
49326: PUSH
49327: LD_INT 2
49329: NEG
49330: PUSH
49331: LD_INT 1
49333: NEG
49334: PUSH
49335: EMPTY
49336: LIST
49337: LIST
49338: PUSH
49339: LD_INT 1
49341: NEG
49342: PUSH
49343: LD_INT 3
49345: NEG
49346: PUSH
49347: EMPTY
49348: LIST
49349: LIST
49350: PUSH
49351: LD_INT 0
49353: PUSH
49354: LD_INT 3
49356: NEG
49357: PUSH
49358: EMPTY
49359: LIST
49360: LIST
49361: PUSH
49362: LD_INT 1
49364: PUSH
49365: LD_INT 2
49367: NEG
49368: PUSH
49369: EMPTY
49370: LIST
49371: LIST
49372: PUSH
49373: LD_INT 2
49375: PUSH
49376: LD_INT 1
49378: NEG
49379: PUSH
49380: EMPTY
49381: LIST
49382: LIST
49383: PUSH
49384: LD_INT 3
49386: PUSH
49387: LD_INT 0
49389: PUSH
49390: EMPTY
49391: LIST
49392: LIST
49393: PUSH
49394: LD_INT 3
49396: PUSH
49397: LD_INT 1
49399: PUSH
49400: EMPTY
49401: LIST
49402: LIST
49403: PUSH
49404: LD_INT 1
49406: PUSH
49407: LD_INT 3
49409: PUSH
49410: EMPTY
49411: LIST
49412: LIST
49413: PUSH
49414: LD_INT 0
49416: PUSH
49417: LD_INT 3
49419: PUSH
49420: EMPTY
49421: LIST
49422: LIST
49423: PUSH
49424: LD_INT 1
49426: NEG
49427: PUSH
49428: LD_INT 2
49430: PUSH
49431: EMPTY
49432: LIST
49433: LIST
49434: PUSH
49435: LD_INT 2
49437: NEG
49438: PUSH
49439: LD_INT 1
49441: PUSH
49442: EMPTY
49443: LIST
49444: LIST
49445: PUSH
49446: LD_INT 3
49448: NEG
49449: PUSH
49450: LD_INT 0
49452: PUSH
49453: EMPTY
49454: LIST
49455: LIST
49456: PUSH
49457: LD_INT 3
49459: NEG
49460: PUSH
49461: LD_INT 1
49463: NEG
49464: PUSH
49465: EMPTY
49466: LIST
49467: LIST
49468: PUSH
49469: EMPTY
49470: LIST
49471: LIST
49472: LIST
49473: LIST
49474: LIST
49475: LIST
49476: LIST
49477: LIST
49478: LIST
49479: LIST
49480: LIST
49481: LIST
49482: LIST
49483: LIST
49484: LIST
49485: LIST
49486: LIST
49487: LIST
49488: LIST
49489: LIST
49490: LIST
49491: LIST
49492: LIST
49493: LIST
49494: LIST
49495: LIST
49496: LIST
49497: LIST
49498: LIST
49499: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49500: LD_ADDR_VAR 0 47
49504: PUSH
49505: LD_INT 0
49507: PUSH
49508: LD_INT 0
49510: PUSH
49511: EMPTY
49512: LIST
49513: LIST
49514: PUSH
49515: LD_INT 0
49517: PUSH
49518: LD_INT 1
49520: NEG
49521: PUSH
49522: EMPTY
49523: LIST
49524: LIST
49525: PUSH
49526: LD_INT 1
49528: PUSH
49529: LD_INT 0
49531: PUSH
49532: EMPTY
49533: LIST
49534: LIST
49535: PUSH
49536: LD_INT 1
49538: PUSH
49539: LD_INT 1
49541: PUSH
49542: EMPTY
49543: LIST
49544: LIST
49545: PUSH
49546: LD_INT 0
49548: PUSH
49549: LD_INT 1
49551: PUSH
49552: EMPTY
49553: LIST
49554: LIST
49555: PUSH
49556: LD_INT 1
49558: NEG
49559: PUSH
49560: LD_INT 0
49562: PUSH
49563: EMPTY
49564: LIST
49565: LIST
49566: PUSH
49567: LD_INT 1
49569: NEG
49570: PUSH
49571: LD_INT 1
49573: NEG
49574: PUSH
49575: EMPTY
49576: LIST
49577: LIST
49578: PUSH
49579: LD_INT 1
49581: NEG
49582: PUSH
49583: LD_INT 2
49585: NEG
49586: PUSH
49587: EMPTY
49588: LIST
49589: LIST
49590: PUSH
49591: LD_INT 0
49593: PUSH
49594: LD_INT 2
49596: NEG
49597: PUSH
49598: EMPTY
49599: LIST
49600: LIST
49601: PUSH
49602: LD_INT 1
49604: PUSH
49605: LD_INT 1
49607: NEG
49608: PUSH
49609: EMPTY
49610: LIST
49611: LIST
49612: PUSH
49613: LD_INT 2
49615: NEG
49616: PUSH
49617: LD_INT 1
49619: NEG
49620: PUSH
49621: EMPTY
49622: LIST
49623: LIST
49624: PUSH
49625: LD_INT 2
49627: NEG
49628: PUSH
49629: LD_INT 2
49631: NEG
49632: PUSH
49633: EMPTY
49634: LIST
49635: LIST
49636: PUSH
49637: EMPTY
49638: LIST
49639: LIST
49640: LIST
49641: LIST
49642: LIST
49643: LIST
49644: LIST
49645: LIST
49646: LIST
49647: LIST
49648: LIST
49649: LIST
49650: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
49651: LD_ADDR_VAR 0 48
49655: PUSH
49656: LD_INT 0
49658: PUSH
49659: LD_INT 0
49661: PUSH
49662: EMPTY
49663: LIST
49664: LIST
49665: PUSH
49666: LD_INT 0
49668: PUSH
49669: LD_INT 1
49671: NEG
49672: PUSH
49673: EMPTY
49674: LIST
49675: LIST
49676: PUSH
49677: LD_INT 1
49679: PUSH
49680: LD_INT 0
49682: PUSH
49683: EMPTY
49684: LIST
49685: LIST
49686: PUSH
49687: LD_INT 1
49689: PUSH
49690: LD_INT 1
49692: PUSH
49693: EMPTY
49694: LIST
49695: LIST
49696: PUSH
49697: LD_INT 0
49699: PUSH
49700: LD_INT 1
49702: PUSH
49703: EMPTY
49704: LIST
49705: LIST
49706: PUSH
49707: LD_INT 1
49709: NEG
49710: PUSH
49711: LD_INT 0
49713: PUSH
49714: EMPTY
49715: LIST
49716: LIST
49717: PUSH
49718: LD_INT 1
49720: NEG
49721: PUSH
49722: LD_INT 1
49724: NEG
49725: PUSH
49726: EMPTY
49727: LIST
49728: LIST
49729: PUSH
49730: LD_INT 1
49732: NEG
49733: PUSH
49734: LD_INT 2
49736: NEG
49737: PUSH
49738: EMPTY
49739: LIST
49740: LIST
49741: PUSH
49742: LD_INT 0
49744: PUSH
49745: LD_INT 2
49747: NEG
49748: PUSH
49749: EMPTY
49750: LIST
49751: LIST
49752: PUSH
49753: LD_INT 1
49755: PUSH
49756: LD_INT 1
49758: NEG
49759: PUSH
49760: EMPTY
49761: LIST
49762: LIST
49763: PUSH
49764: LD_INT 2
49766: PUSH
49767: LD_INT 0
49769: PUSH
49770: EMPTY
49771: LIST
49772: LIST
49773: PUSH
49774: LD_INT 2
49776: PUSH
49777: LD_INT 1
49779: PUSH
49780: EMPTY
49781: LIST
49782: LIST
49783: PUSH
49784: EMPTY
49785: LIST
49786: LIST
49787: LIST
49788: LIST
49789: LIST
49790: LIST
49791: LIST
49792: LIST
49793: LIST
49794: LIST
49795: LIST
49796: LIST
49797: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
49798: LD_ADDR_VAR 0 49
49802: PUSH
49803: LD_INT 0
49805: PUSH
49806: LD_INT 0
49808: PUSH
49809: EMPTY
49810: LIST
49811: LIST
49812: PUSH
49813: LD_INT 0
49815: PUSH
49816: LD_INT 1
49818: NEG
49819: PUSH
49820: EMPTY
49821: LIST
49822: LIST
49823: PUSH
49824: LD_INT 1
49826: PUSH
49827: LD_INT 0
49829: PUSH
49830: EMPTY
49831: LIST
49832: LIST
49833: PUSH
49834: LD_INT 1
49836: PUSH
49837: LD_INT 1
49839: PUSH
49840: EMPTY
49841: LIST
49842: LIST
49843: PUSH
49844: LD_INT 0
49846: PUSH
49847: LD_INT 1
49849: PUSH
49850: EMPTY
49851: LIST
49852: LIST
49853: PUSH
49854: LD_INT 1
49856: NEG
49857: PUSH
49858: LD_INT 0
49860: PUSH
49861: EMPTY
49862: LIST
49863: LIST
49864: PUSH
49865: LD_INT 1
49867: NEG
49868: PUSH
49869: LD_INT 1
49871: NEG
49872: PUSH
49873: EMPTY
49874: LIST
49875: LIST
49876: PUSH
49877: LD_INT 1
49879: PUSH
49880: LD_INT 1
49882: NEG
49883: PUSH
49884: EMPTY
49885: LIST
49886: LIST
49887: PUSH
49888: LD_INT 2
49890: PUSH
49891: LD_INT 0
49893: PUSH
49894: EMPTY
49895: LIST
49896: LIST
49897: PUSH
49898: LD_INT 2
49900: PUSH
49901: LD_INT 1
49903: PUSH
49904: EMPTY
49905: LIST
49906: LIST
49907: PUSH
49908: LD_INT 2
49910: PUSH
49911: LD_INT 2
49913: PUSH
49914: EMPTY
49915: LIST
49916: LIST
49917: PUSH
49918: LD_INT 1
49920: PUSH
49921: LD_INT 2
49923: PUSH
49924: EMPTY
49925: LIST
49926: LIST
49927: PUSH
49928: EMPTY
49929: LIST
49930: LIST
49931: LIST
49932: LIST
49933: LIST
49934: LIST
49935: LIST
49936: LIST
49937: LIST
49938: LIST
49939: LIST
49940: LIST
49941: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
49942: LD_ADDR_VAR 0 50
49946: PUSH
49947: LD_INT 0
49949: PUSH
49950: LD_INT 0
49952: PUSH
49953: EMPTY
49954: LIST
49955: LIST
49956: PUSH
49957: LD_INT 0
49959: PUSH
49960: LD_INT 1
49962: NEG
49963: PUSH
49964: EMPTY
49965: LIST
49966: LIST
49967: PUSH
49968: LD_INT 1
49970: PUSH
49971: LD_INT 0
49973: PUSH
49974: EMPTY
49975: LIST
49976: LIST
49977: PUSH
49978: LD_INT 1
49980: PUSH
49981: LD_INT 1
49983: PUSH
49984: EMPTY
49985: LIST
49986: LIST
49987: PUSH
49988: LD_INT 0
49990: PUSH
49991: LD_INT 1
49993: PUSH
49994: EMPTY
49995: LIST
49996: LIST
49997: PUSH
49998: LD_INT 1
50000: NEG
50001: PUSH
50002: LD_INT 0
50004: PUSH
50005: EMPTY
50006: LIST
50007: LIST
50008: PUSH
50009: LD_INT 1
50011: NEG
50012: PUSH
50013: LD_INT 1
50015: NEG
50016: PUSH
50017: EMPTY
50018: LIST
50019: LIST
50020: PUSH
50021: LD_INT 2
50023: PUSH
50024: LD_INT 1
50026: PUSH
50027: EMPTY
50028: LIST
50029: LIST
50030: PUSH
50031: LD_INT 2
50033: PUSH
50034: LD_INT 2
50036: PUSH
50037: EMPTY
50038: LIST
50039: LIST
50040: PUSH
50041: LD_INT 1
50043: PUSH
50044: LD_INT 2
50046: PUSH
50047: EMPTY
50048: LIST
50049: LIST
50050: PUSH
50051: LD_INT 0
50053: PUSH
50054: LD_INT 2
50056: PUSH
50057: EMPTY
50058: LIST
50059: LIST
50060: PUSH
50061: LD_INT 1
50063: NEG
50064: PUSH
50065: LD_INT 1
50067: PUSH
50068: EMPTY
50069: LIST
50070: LIST
50071: PUSH
50072: EMPTY
50073: LIST
50074: LIST
50075: LIST
50076: LIST
50077: LIST
50078: LIST
50079: LIST
50080: LIST
50081: LIST
50082: LIST
50083: LIST
50084: LIST
50085: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
50086: LD_ADDR_VAR 0 51
50090: PUSH
50091: LD_INT 0
50093: PUSH
50094: LD_INT 0
50096: PUSH
50097: EMPTY
50098: LIST
50099: LIST
50100: PUSH
50101: LD_INT 0
50103: PUSH
50104: LD_INT 1
50106: NEG
50107: PUSH
50108: EMPTY
50109: LIST
50110: LIST
50111: PUSH
50112: LD_INT 1
50114: PUSH
50115: LD_INT 0
50117: PUSH
50118: EMPTY
50119: LIST
50120: LIST
50121: PUSH
50122: LD_INT 1
50124: PUSH
50125: LD_INT 1
50127: PUSH
50128: EMPTY
50129: LIST
50130: LIST
50131: PUSH
50132: LD_INT 0
50134: PUSH
50135: LD_INT 1
50137: PUSH
50138: EMPTY
50139: LIST
50140: LIST
50141: PUSH
50142: LD_INT 1
50144: NEG
50145: PUSH
50146: LD_INT 0
50148: PUSH
50149: EMPTY
50150: LIST
50151: LIST
50152: PUSH
50153: LD_INT 1
50155: NEG
50156: PUSH
50157: LD_INT 1
50159: NEG
50160: PUSH
50161: EMPTY
50162: LIST
50163: LIST
50164: PUSH
50165: LD_INT 1
50167: PUSH
50168: LD_INT 2
50170: PUSH
50171: EMPTY
50172: LIST
50173: LIST
50174: PUSH
50175: LD_INT 0
50177: PUSH
50178: LD_INT 2
50180: PUSH
50181: EMPTY
50182: LIST
50183: LIST
50184: PUSH
50185: LD_INT 1
50187: NEG
50188: PUSH
50189: LD_INT 1
50191: PUSH
50192: EMPTY
50193: LIST
50194: LIST
50195: PUSH
50196: LD_INT 2
50198: NEG
50199: PUSH
50200: LD_INT 0
50202: PUSH
50203: EMPTY
50204: LIST
50205: LIST
50206: PUSH
50207: LD_INT 2
50209: NEG
50210: PUSH
50211: LD_INT 1
50213: NEG
50214: PUSH
50215: EMPTY
50216: LIST
50217: LIST
50218: PUSH
50219: EMPTY
50220: LIST
50221: LIST
50222: LIST
50223: LIST
50224: LIST
50225: LIST
50226: LIST
50227: LIST
50228: LIST
50229: LIST
50230: LIST
50231: LIST
50232: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50233: LD_ADDR_VAR 0 52
50237: PUSH
50238: LD_INT 0
50240: PUSH
50241: LD_INT 0
50243: PUSH
50244: EMPTY
50245: LIST
50246: LIST
50247: PUSH
50248: LD_INT 0
50250: PUSH
50251: LD_INT 1
50253: NEG
50254: PUSH
50255: EMPTY
50256: LIST
50257: LIST
50258: PUSH
50259: LD_INT 1
50261: PUSH
50262: LD_INT 0
50264: PUSH
50265: EMPTY
50266: LIST
50267: LIST
50268: PUSH
50269: LD_INT 1
50271: PUSH
50272: LD_INT 1
50274: PUSH
50275: EMPTY
50276: LIST
50277: LIST
50278: PUSH
50279: LD_INT 0
50281: PUSH
50282: LD_INT 1
50284: PUSH
50285: EMPTY
50286: LIST
50287: LIST
50288: PUSH
50289: LD_INT 1
50291: NEG
50292: PUSH
50293: LD_INT 0
50295: PUSH
50296: EMPTY
50297: LIST
50298: LIST
50299: PUSH
50300: LD_INT 1
50302: NEG
50303: PUSH
50304: LD_INT 1
50306: NEG
50307: PUSH
50308: EMPTY
50309: LIST
50310: LIST
50311: PUSH
50312: LD_INT 1
50314: NEG
50315: PUSH
50316: LD_INT 2
50318: NEG
50319: PUSH
50320: EMPTY
50321: LIST
50322: LIST
50323: PUSH
50324: LD_INT 1
50326: NEG
50327: PUSH
50328: LD_INT 1
50330: PUSH
50331: EMPTY
50332: LIST
50333: LIST
50334: PUSH
50335: LD_INT 2
50337: NEG
50338: PUSH
50339: LD_INT 0
50341: PUSH
50342: EMPTY
50343: LIST
50344: LIST
50345: PUSH
50346: LD_INT 2
50348: NEG
50349: PUSH
50350: LD_INT 1
50352: NEG
50353: PUSH
50354: EMPTY
50355: LIST
50356: LIST
50357: PUSH
50358: LD_INT 2
50360: NEG
50361: PUSH
50362: LD_INT 2
50364: NEG
50365: PUSH
50366: EMPTY
50367: LIST
50368: LIST
50369: PUSH
50370: EMPTY
50371: LIST
50372: LIST
50373: LIST
50374: LIST
50375: LIST
50376: LIST
50377: LIST
50378: LIST
50379: LIST
50380: LIST
50381: LIST
50382: LIST
50383: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50384: LD_ADDR_VAR 0 53
50388: PUSH
50389: LD_INT 0
50391: PUSH
50392: LD_INT 0
50394: PUSH
50395: EMPTY
50396: LIST
50397: LIST
50398: PUSH
50399: LD_INT 0
50401: PUSH
50402: LD_INT 1
50404: NEG
50405: PUSH
50406: EMPTY
50407: LIST
50408: LIST
50409: PUSH
50410: LD_INT 1
50412: PUSH
50413: LD_INT 0
50415: PUSH
50416: EMPTY
50417: LIST
50418: LIST
50419: PUSH
50420: LD_INT 1
50422: PUSH
50423: LD_INT 1
50425: PUSH
50426: EMPTY
50427: LIST
50428: LIST
50429: PUSH
50430: LD_INT 0
50432: PUSH
50433: LD_INT 1
50435: PUSH
50436: EMPTY
50437: LIST
50438: LIST
50439: PUSH
50440: LD_INT 1
50442: NEG
50443: PUSH
50444: LD_INT 0
50446: PUSH
50447: EMPTY
50448: LIST
50449: LIST
50450: PUSH
50451: LD_INT 1
50453: NEG
50454: PUSH
50455: LD_INT 1
50457: NEG
50458: PUSH
50459: EMPTY
50460: LIST
50461: LIST
50462: PUSH
50463: LD_INT 1
50465: NEG
50466: PUSH
50467: LD_INT 2
50469: NEG
50470: PUSH
50471: EMPTY
50472: LIST
50473: LIST
50474: PUSH
50475: LD_INT 0
50477: PUSH
50478: LD_INT 2
50480: NEG
50481: PUSH
50482: EMPTY
50483: LIST
50484: LIST
50485: PUSH
50486: LD_INT 1
50488: PUSH
50489: LD_INT 1
50491: NEG
50492: PUSH
50493: EMPTY
50494: LIST
50495: LIST
50496: PUSH
50497: LD_INT 2
50499: PUSH
50500: LD_INT 0
50502: PUSH
50503: EMPTY
50504: LIST
50505: LIST
50506: PUSH
50507: LD_INT 2
50509: PUSH
50510: LD_INT 1
50512: PUSH
50513: EMPTY
50514: LIST
50515: LIST
50516: PUSH
50517: LD_INT 2
50519: PUSH
50520: LD_INT 2
50522: PUSH
50523: EMPTY
50524: LIST
50525: LIST
50526: PUSH
50527: LD_INT 1
50529: PUSH
50530: LD_INT 2
50532: PUSH
50533: EMPTY
50534: LIST
50535: LIST
50536: PUSH
50537: LD_INT 0
50539: PUSH
50540: LD_INT 2
50542: PUSH
50543: EMPTY
50544: LIST
50545: LIST
50546: PUSH
50547: LD_INT 1
50549: NEG
50550: PUSH
50551: LD_INT 1
50553: PUSH
50554: EMPTY
50555: LIST
50556: LIST
50557: PUSH
50558: LD_INT 2
50560: NEG
50561: PUSH
50562: LD_INT 0
50564: PUSH
50565: EMPTY
50566: LIST
50567: LIST
50568: PUSH
50569: LD_INT 2
50571: NEG
50572: PUSH
50573: LD_INT 1
50575: NEG
50576: PUSH
50577: EMPTY
50578: LIST
50579: LIST
50580: PUSH
50581: LD_INT 2
50583: NEG
50584: PUSH
50585: LD_INT 2
50587: NEG
50588: PUSH
50589: EMPTY
50590: LIST
50591: LIST
50592: PUSH
50593: EMPTY
50594: LIST
50595: LIST
50596: LIST
50597: LIST
50598: LIST
50599: LIST
50600: LIST
50601: LIST
50602: LIST
50603: LIST
50604: LIST
50605: LIST
50606: LIST
50607: LIST
50608: LIST
50609: LIST
50610: LIST
50611: LIST
50612: LIST
50613: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50614: LD_ADDR_VAR 0 54
50618: PUSH
50619: LD_INT 0
50621: PUSH
50622: LD_INT 0
50624: PUSH
50625: EMPTY
50626: LIST
50627: LIST
50628: PUSH
50629: LD_INT 0
50631: PUSH
50632: LD_INT 1
50634: NEG
50635: PUSH
50636: EMPTY
50637: LIST
50638: LIST
50639: PUSH
50640: LD_INT 1
50642: PUSH
50643: LD_INT 0
50645: PUSH
50646: EMPTY
50647: LIST
50648: LIST
50649: PUSH
50650: LD_INT 1
50652: PUSH
50653: LD_INT 1
50655: PUSH
50656: EMPTY
50657: LIST
50658: LIST
50659: PUSH
50660: LD_INT 0
50662: PUSH
50663: LD_INT 1
50665: PUSH
50666: EMPTY
50667: LIST
50668: LIST
50669: PUSH
50670: LD_INT 1
50672: NEG
50673: PUSH
50674: LD_INT 0
50676: PUSH
50677: EMPTY
50678: LIST
50679: LIST
50680: PUSH
50681: LD_INT 1
50683: NEG
50684: PUSH
50685: LD_INT 1
50687: NEG
50688: PUSH
50689: EMPTY
50690: LIST
50691: LIST
50692: PUSH
50693: LD_INT 1
50695: NEG
50696: PUSH
50697: LD_INT 2
50699: NEG
50700: PUSH
50701: EMPTY
50702: LIST
50703: LIST
50704: PUSH
50705: LD_INT 0
50707: PUSH
50708: LD_INT 2
50710: NEG
50711: PUSH
50712: EMPTY
50713: LIST
50714: LIST
50715: PUSH
50716: LD_INT 1
50718: PUSH
50719: LD_INT 1
50721: NEG
50722: PUSH
50723: EMPTY
50724: LIST
50725: LIST
50726: PUSH
50727: LD_INT 2
50729: PUSH
50730: LD_INT 0
50732: PUSH
50733: EMPTY
50734: LIST
50735: LIST
50736: PUSH
50737: LD_INT 2
50739: PUSH
50740: LD_INT 1
50742: PUSH
50743: EMPTY
50744: LIST
50745: LIST
50746: PUSH
50747: LD_INT 2
50749: PUSH
50750: LD_INT 2
50752: PUSH
50753: EMPTY
50754: LIST
50755: LIST
50756: PUSH
50757: LD_INT 1
50759: PUSH
50760: LD_INT 2
50762: PUSH
50763: EMPTY
50764: LIST
50765: LIST
50766: PUSH
50767: LD_INT 0
50769: PUSH
50770: LD_INT 2
50772: PUSH
50773: EMPTY
50774: LIST
50775: LIST
50776: PUSH
50777: LD_INT 1
50779: NEG
50780: PUSH
50781: LD_INT 1
50783: PUSH
50784: EMPTY
50785: LIST
50786: LIST
50787: PUSH
50788: LD_INT 2
50790: NEG
50791: PUSH
50792: LD_INT 0
50794: PUSH
50795: EMPTY
50796: LIST
50797: LIST
50798: PUSH
50799: LD_INT 2
50801: NEG
50802: PUSH
50803: LD_INT 1
50805: NEG
50806: PUSH
50807: EMPTY
50808: LIST
50809: LIST
50810: PUSH
50811: LD_INT 2
50813: NEG
50814: PUSH
50815: LD_INT 2
50817: NEG
50818: PUSH
50819: EMPTY
50820: LIST
50821: LIST
50822: PUSH
50823: EMPTY
50824: LIST
50825: LIST
50826: LIST
50827: LIST
50828: LIST
50829: LIST
50830: LIST
50831: LIST
50832: LIST
50833: LIST
50834: LIST
50835: LIST
50836: LIST
50837: LIST
50838: LIST
50839: LIST
50840: LIST
50841: LIST
50842: LIST
50843: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50844: LD_ADDR_VAR 0 55
50848: PUSH
50849: LD_INT 0
50851: PUSH
50852: LD_INT 0
50854: PUSH
50855: EMPTY
50856: LIST
50857: LIST
50858: PUSH
50859: LD_INT 0
50861: PUSH
50862: LD_INT 1
50864: NEG
50865: PUSH
50866: EMPTY
50867: LIST
50868: LIST
50869: PUSH
50870: LD_INT 1
50872: PUSH
50873: LD_INT 0
50875: PUSH
50876: EMPTY
50877: LIST
50878: LIST
50879: PUSH
50880: LD_INT 1
50882: PUSH
50883: LD_INT 1
50885: PUSH
50886: EMPTY
50887: LIST
50888: LIST
50889: PUSH
50890: LD_INT 0
50892: PUSH
50893: LD_INT 1
50895: PUSH
50896: EMPTY
50897: LIST
50898: LIST
50899: PUSH
50900: LD_INT 1
50902: NEG
50903: PUSH
50904: LD_INT 0
50906: PUSH
50907: EMPTY
50908: LIST
50909: LIST
50910: PUSH
50911: LD_INT 1
50913: NEG
50914: PUSH
50915: LD_INT 1
50917: NEG
50918: PUSH
50919: EMPTY
50920: LIST
50921: LIST
50922: PUSH
50923: LD_INT 1
50925: NEG
50926: PUSH
50927: LD_INT 2
50929: NEG
50930: PUSH
50931: EMPTY
50932: LIST
50933: LIST
50934: PUSH
50935: LD_INT 0
50937: PUSH
50938: LD_INT 2
50940: NEG
50941: PUSH
50942: EMPTY
50943: LIST
50944: LIST
50945: PUSH
50946: LD_INT 1
50948: PUSH
50949: LD_INT 1
50951: NEG
50952: PUSH
50953: EMPTY
50954: LIST
50955: LIST
50956: PUSH
50957: LD_INT 2
50959: PUSH
50960: LD_INT 0
50962: PUSH
50963: EMPTY
50964: LIST
50965: LIST
50966: PUSH
50967: LD_INT 2
50969: PUSH
50970: LD_INT 1
50972: PUSH
50973: EMPTY
50974: LIST
50975: LIST
50976: PUSH
50977: LD_INT 2
50979: PUSH
50980: LD_INT 2
50982: PUSH
50983: EMPTY
50984: LIST
50985: LIST
50986: PUSH
50987: LD_INT 1
50989: PUSH
50990: LD_INT 2
50992: PUSH
50993: EMPTY
50994: LIST
50995: LIST
50996: PUSH
50997: LD_INT 0
50999: PUSH
51000: LD_INT 2
51002: PUSH
51003: EMPTY
51004: LIST
51005: LIST
51006: PUSH
51007: LD_INT 1
51009: NEG
51010: PUSH
51011: LD_INT 1
51013: PUSH
51014: EMPTY
51015: LIST
51016: LIST
51017: PUSH
51018: LD_INT 2
51020: NEG
51021: PUSH
51022: LD_INT 0
51024: PUSH
51025: EMPTY
51026: LIST
51027: LIST
51028: PUSH
51029: LD_INT 2
51031: NEG
51032: PUSH
51033: LD_INT 1
51035: NEG
51036: PUSH
51037: EMPTY
51038: LIST
51039: LIST
51040: PUSH
51041: LD_INT 2
51043: NEG
51044: PUSH
51045: LD_INT 2
51047: NEG
51048: PUSH
51049: EMPTY
51050: LIST
51051: LIST
51052: PUSH
51053: EMPTY
51054: LIST
51055: LIST
51056: LIST
51057: LIST
51058: LIST
51059: LIST
51060: LIST
51061: LIST
51062: LIST
51063: LIST
51064: LIST
51065: LIST
51066: LIST
51067: LIST
51068: LIST
51069: LIST
51070: LIST
51071: LIST
51072: LIST
51073: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51074: LD_ADDR_VAR 0 56
51078: PUSH
51079: LD_INT 0
51081: PUSH
51082: LD_INT 0
51084: PUSH
51085: EMPTY
51086: LIST
51087: LIST
51088: PUSH
51089: LD_INT 0
51091: PUSH
51092: LD_INT 1
51094: NEG
51095: PUSH
51096: EMPTY
51097: LIST
51098: LIST
51099: PUSH
51100: LD_INT 1
51102: PUSH
51103: LD_INT 0
51105: PUSH
51106: EMPTY
51107: LIST
51108: LIST
51109: PUSH
51110: LD_INT 1
51112: PUSH
51113: LD_INT 1
51115: PUSH
51116: EMPTY
51117: LIST
51118: LIST
51119: PUSH
51120: LD_INT 0
51122: PUSH
51123: LD_INT 1
51125: PUSH
51126: EMPTY
51127: LIST
51128: LIST
51129: PUSH
51130: LD_INT 1
51132: NEG
51133: PUSH
51134: LD_INT 0
51136: PUSH
51137: EMPTY
51138: LIST
51139: LIST
51140: PUSH
51141: LD_INT 1
51143: NEG
51144: PUSH
51145: LD_INT 1
51147: NEG
51148: PUSH
51149: EMPTY
51150: LIST
51151: LIST
51152: PUSH
51153: LD_INT 1
51155: NEG
51156: PUSH
51157: LD_INT 2
51159: NEG
51160: PUSH
51161: EMPTY
51162: LIST
51163: LIST
51164: PUSH
51165: LD_INT 0
51167: PUSH
51168: LD_INT 2
51170: NEG
51171: PUSH
51172: EMPTY
51173: LIST
51174: LIST
51175: PUSH
51176: LD_INT 1
51178: PUSH
51179: LD_INT 1
51181: NEG
51182: PUSH
51183: EMPTY
51184: LIST
51185: LIST
51186: PUSH
51187: LD_INT 2
51189: PUSH
51190: LD_INT 0
51192: PUSH
51193: EMPTY
51194: LIST
51195: LIST
51196: PUSH
51197: LD_INT 2
51199: PUSH
51200: LD_INT 1
51202: PUSH
51203: EMPTY
51204: LIST
51205: LIST
51206: PUSH
51207: LD_INT 2
51209: PUSH
51210: LD_INT 2
51212: PUSH
51213: EMPTY
51214: LIST
51215: LIST
51216: PUSH
51217: LD_INT 1
51219: PUSH
51220: LD_INT 2
51222: PUSH
51223: EMPTY
51224: LIST
51225: LIST
51226: PUSH
51227: LD_INT 0
51229: PUSH
51230: LD_INT 2
51232: PUSH
51233: EMPTY
51234: LIST
51235: LIST
51236: PUSH
51237: LD_INT 1
51239: NEG
51240: PUSH
51241: LD_INT 1
51243: PUSH
51244: EMPTY
51245: LIST
51246: LIST
51247: PUSH
51248: LD_INT 2
51250: NEG
51251: PUSH
51252: LD_INT 0
51254: PUSH
51255: EMPTY
51256: LIST
51257: LIST
51258: PUSH
51259: LD_INT 2
51261: NEG
51262: PUSH
51263: LD_INT 1
51265: NEG
51266: PUSH
51267: EMPTY
51268: LIST
51269: LIST
51270: PUSH
51271: LD_INT 2
51273: NEG
51274: PUSH
51275: LD_INT 2
51277: NEG
51278: PUSH
51279: EMPTY
51280: LIST
51281: LIST
51282: PUSH
51283: EMPTY
51284: LIST
51285: LIST
51286: LIST
51287: LIST
51288: LIST
51289: LIST
51290: LIST
51291: LIST
51292: LIST
51293: LIST
51294: LIST
51295: LIST
51296: LIST
51297: LIST
51298: LIST
51299: LIST
51300: LIST
51301: LIST
51302: LIST
51303: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51304: LD_ADDR_VAR 0 57
51308: PUSH
51309: LD_INT 0
51311: PUSH
51312: LD_INT 0
51314: PUSH
51315: EMPTY
51316: LIST
51317: LIST
51318: PUSH
51319: LD_INT 0
51321: PUSH
51322: LD_INT 1
51324: NEG
51325: PUSH
51326: EMPTY
51327: LIST
51328: LIST
51329: PUSH
51330: LD_INT 1
51332: PUSH
51333: LD_INT 0
51335: PUSH
51336: EMPTY
51337: LIST
51338: LIST
51339: PUSH
51340: LD_INT 1
51342: PUSH
51343: LD_INT 1
51345: PUSH
51346: EMPTY
51347: LIST
51348: LIST
51349: PUSH
51350: LD_INT 0
51352: PUSH
51353: LD_INT 1
51355: PUSH
51356: EMPTY
51357: LIST
51358: LIST
51359: PUSH
51360: LD_INT 1
51362: NEG
51363: PUSH
51364: LD_INT 0
51366: PUSH
51367: EMPTY
51368: LIST
51369: LIST
51370: PUSH
51371: LD_INT 1
51373: NEG
51374: PUSH
51375: LD_INT 1
51377: NEG
51378: PUSH
51379: EMPTY
51380: LIST
51381: LIST
51382: PUSH
51383: LD_INT 1
51385: NEG
51386: PUSH
51387: LD_INT 2
51389: NEG
51390: PUSH
51391: EMPTY
51392: LIST
51393: LIST
51394: PUSH
51395: LD_INT 0
51397: PUSH
51398: LD_INT 2
51400: NEG
51401: PUSH
51402: EMPTY
51403: LIST
51404: LIST
51405: PUSH
51406: LD_INT 1
51408: PUSH
51409: LD_INT 1
51411: NEG
51412: PUSH
51413: EMPTY
51414: LIST
51415: LIST
51416: PUSH
51417: LD_INT 2
51419: PUSH
51420: LD_INT 0
51422: PUSH
51423: EMPTY
51424: LIST
51425: LIST
51426: PUSH
51427: LD_INT 2
51429: PUSH
51430: LD_INT 1
51432: PUSH
51433: EMPTY
51434: LIST
51435: LIST
51436: PUSH
51437: LD_INT 2
51439: PUSH
51440: LD_INT 2
51442: PUSH
51443: EMPTY
51444: LIST
51445: LIST
51446: PUSH
51447: LD_INT 1
51449: PUSH
51450: LD_INT 2
51452: PUSH
51453: EMPTY
51454: LIST
51455: LIST
51456: PUSH
51457: LD_INT 0
51459: PUSH
51460: LD_INT 2
51462: PUSH
51463: EMPTY
51464: LIST
51465: LIST
51466: PUSH
51467: LD_INT 1
51469: NEG
51470: PUSH
51471: LD_INT 1
51473: PUSH
51474: EMPTY
51475: LIST
51476: LIST
51477: PUSH
51478: LD_INT 2
51480: NEG
51481: PUSH
51482: LD_INT 0
51484: PUSH
51485: EMPTY
51486: LIST
51487: LIST
51488: PUSH
51489: LD_INT 2
51491: NEG
51492: PUSH
51493: LD_INT 1
51495: NEG
51496: PUSH
51497: EMPTY
51498: LIST
51499: LIST
51500: PUSH
51501: LD_INT 2
51503: NEG
51504: PUSH
51505: LD_INT 2
51507: NEG
51508: PUSH
51509: EMPTY
51510: LIST
51511: LIST
51512: PUSH
51513: EMPTY
51514: LIST
51515: LIST
51516: LIST
51517: LIST
51518: LIST
51519: LIST
51520: LIST
51521: LIST
51522: LIST
51523: LIST
51524: LIST
51525: LIST
51526: LIST
51527: LIST
51528: LIST
51529: LIST
51530: LIST
51531: LIST
51532: LIST
51533: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51534: LD_ADDR_VAR 0 58
51538: PUSH
51539: LD_INT 0
51541: PUSH
51542: LD_INT 0
51544: PUSH
51545: EMPTY
51546: LIST
51547: LIST
51548: PUSH
51549: LD_INT 0
51551: PUSH
51552: LD_INT 1
51554: NEG
51555: PUSH
51556: EMPTY
51557: LIST
51558: LIST
51559: PUSH
51560: LD_INT 1
51562: PUSH
51563: LD_INT 0
51565: PUSH
51566: EMPTY
51567: LIST
51568: LIST
51569: PUSH
51570: LD_INT 1
51572: PUSH
51573: LD_INT 1
51575: PUSH
51576: EMPTY
51577: LIST
51578: LIST
51579: PUSH
51580: LD_INT 0
51582: PUSH
51583: LD_INT 1
51585: PUSH
51586: EMPTY
51587: LIST
51588: LIST
51589: PUSH
51590: LD_INT 1
51592: NEG
51593: PUSH
51594: LD_INT 0
51596: PUSH
51597: EMPTY
51598: LIST
51599: LIST
51600: PUSH
51601: LD_INT 1
51603: NEG
51604: PUSH
51605: LD_INT 1
51607: NEG
51608: PUSH
51609: EMPTY
51610: LIST
51611: LIST
51612: PUSH
51613: LD_INT 1
51615: NEG
51616: PUSH
51617: LD_INT 2
51619: NEG
51620: PUSH
51621: EMPTY
51622: LIST
51623: LIST
51624: PUSH
51625: LD_INT 0
51627: PUSH
51628: LD_INT 2
51630: NEG
51631: PUSH
51632: EMPTY
51633: LIST
51634: LIST
51635: PUSH
51636: LD_INT 1
51638: PUSH
51639: LD_INT 1
51641: NEG
51642: PUSH
51643: EMPTY
51644: LIST
51645: LIST
51646: PUSH
51647: LD_INT 2
51649: PUSH
51650: LD_INT 0
51652: PUSH
51653: EMPTY
51654: LIST
51655: LIST
51656: PUSH
51657: LD_INT 2
51659: PUSH
51660: LD_INT 1
51662: PUSH
51663: EMPTY
51664: LIST
51665: LIST
51666: PUSH
51667: LD_INT 2
51669: PUSH
51670: LD_INT 2
51672: PUSH
51673: EMPTY
51674: LIST
51675: LIST
51676: PUSH
51677: LD_INT 1
51679: PUSH
51680: LD_INT 2
51682: PUSH
51683: EMPTY
51684: LIST
51685: LIST
51686: PUSH
51687: LD_INT 0
51689: PUSH
51690: LD_INT 2
51692: PUSH
51693: EMPTY
51694: LIST
51695: LIST
51696: PUSH
51697: LD_INT 1
51699: NEG
51700: PUSH
51701: LD_INT 1
51703: PUSH
51704: EMPTY
51705: LIST
51706: LIST
51707: PUSH
51708: LD_INT 2
51710: NEG
51711: PUSH
51712: LD_INT 0
51714: PUSH
51715: EMPTY
51716: LIST
51717: LIST
51718: PUSH
51719: LD_INT 2
51721: NEG
51722: PUSH
51723: LD_INT 1
51725: NEG
51726: PUSH
51727: EMPTY
51728: LIST
51729: LIST
51730: PUSH
51731: LD_INT 2
51733: NEG
51734: PUSH
51735: LD_INT 2
51737: NEG
51738: PUSH
51739: EMPTY
51740: LIST
51741: LIST
51742: PUSH
51743: EMPTY
51744: LIST
51745: LIST
51746: LIST
51747: LIST
51748: LIST
51749: LIST
51750: LIST
51751: LIST
51752: LIST
51753: LIST
51754: LIST
51755: LIST
51756: LIST
51757: LIST
51758: LIST
51759: LIST
51760: LIST
51761: LIST
51762: LIST
51763: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51764: LD_ADDR_VAR 0 59
51768: PUSH
51769: LD_INT 0
51771: PUSH
51772: LD_INT 0
51774: PUSH
51775: EMPTY
51776: LIST
51777: LIST
51778: PUSH
51779: LD_INT 0
51781: PUSH
51782: LD_INT 1
51784: NEG
51785: PUSH
51786: EMPTY
51787: LIST
51788: LIST
51789: PUSH
51790: LD_INT 1
51792: PUSH
51793: LD_INT 0
51795: PUSH
51796: EMPTY
51797: LIST
51798: LIST
51799: PUSH
51800: LD_INT 1
51802: PUSH
51803: LD_INT 1
51805: PUSH
51806: EMPTY
51807: LIST
51808: LIST
51809: PUSH
51810: LD_INT 0
51812: PUSH
51813: LD_INT 1
51815: PUSH
51816: EMPTY
51817: LIST
51818: LIST
51819: PUSH
51820: LD_INT 1
51822: NEG
51823: PUSH
51824: LD_INT 0
51826: PUSH
51827: EMPTY
51828: LIST
51829: LIST
51830: PUSH
51831: LD_INT 1
51833: NEG
51834: PUSH
51835: LD_INT 1
51837: NEG
51838: PUSH
51839: EMPTY
51840: LIST
51841: LIST
51842: PUSH
51843: EMPTY
51844: LIST
51845: LIST
51846: LIST
51847: LIST
51848: LIST
51849: LIST
51850: LIST
51851: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51852: LD_ADDR_VAR 0 60
51856: PUSH
51857: LD_INT 0
51859: PUSH
51860: LD_INT 0
51862: PUSH
51863: EMPTY
51864: LIST
51865: LIST
51866: PUSH
51867: LD_INT 0
51869: PUSH
51870: LD_INT 1
51872: NEG
51873: PUSH
51874: EMPTY
51875: LIST
51876: LIST
51877: PUSH
51878: LD_INT 1
51880: PUSH
51881: LD_INT 0
51883: PUSH
51884: EMPTY
51885: LIST
51886: LIST
51887: PUSH
51888: LD_INT 1
51890: PUSH
51891: LD_INT 1
51893: PUSH
51894: EMPTY
51895: LIST
51896: LIST
51897: PUSH
51898: LD_INT 0
51900: PUSH
51901: LD_INT 1
51903: PUSH
51904: EMPTY
51905: LIST
51906: LIST
51907: PUSH
51908: LD_INT 1
51910: NEG
51911: PUSH
51912: LD_INT 0
51914: PUSH
51915: EMPTY
51916: LIST
51917: LIST
51918: PUSH
51919: LD_INT 1
51921: NEG
51922: PUSH
51923: LD_INT 1
51925: NEG
51926: PUSH
51927: EMPTY
51928: LIST
51929: LIST
51930: PUSH
51931: EMPTY
51932: LIST
51933: LIST
51934: LIST
51935: LIST
51936: LIST
51937: LIST
51938: LIST
51939: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51940: LD_ADDR_VAR 0 61
51944: PUSH
51945: LD_INT 0
51947: PUSH
51948: LD_INT 0
51950: PUSH
51951: EMPTY
51952: LIST
51953: LIST
51954: PUSH
51955: LD_INT 0
51957: PUSH
51958: LD_INT 1
51960: NEG
51961: PUSH
51962: EMPTY
51963: LIST
51964: LIST
51965: PUSH
51966: LD_INT 1
51968: PUSH
51969: LD_INT 0
51971: PUSH
51972: EMPTY
51973: LIST
51974: LIST
51975: PUSH
51976: LD_INT 1
51978: PUSH
51979: LD_INT 1
51981: PUSH
51982: EMPTY
51983: LIST
51984: LIST
51985: PUSH
51986: LD_INT 0
51988: PUSH
51989: LD_INT 1
51991: PUSH
51992: EMPTY
51993: LIST
51994: LIST
51995: PUSH
51996: LD_INT 1
51998: NEG
51999: PUSH
52000: LD_INT 0
52002: PUSH
52003: EMPTY
52004: LIST
52005: LIST
52006: PUSH
52007: LD_INT 1
52009: NEG
52010: PUSH
52011: LD_INT 1
52013: NEG
52014: PUSH
52015: EMPTY
52016: LIST
52017: LIST
52018: PUSH
52019: EMPTY
52020: LIST
52021: LIST
52022: LIST
52023: LIST
52024: LIST
52025: LIST
52026: LIST
52027: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52028: LD_ADDR_VAR 0 62
52032: PUSH
52033: LD_INT 0
52035: PUSH
52036: LD_INT 0
52038: PUSH
52039: EMPTY
52040: LIST
52041: LIST
52042: PUSH
52043: LD_INT 0
52045: PUSH
52046: LD_INT 1
52048: NEG
52049: PUSH
52050: EMPTY
52051: LIST
52052: LIST
52053: PUSH
52054: LD_INT 1
52056: PUSH
52057: LD_INT 0
52059: PUSH
52060: EMPTY
52061: LIST
52062: LIST
52063: PUSH
52064: LD_INT 1
52066: PUSH
52067: LD_INT 1
52069: PUSH
52070: EMPTY
52071: LIST
52072: LIST
52073: PUSH
52074: LD_INT 0
52076: PUSH
52077: LD_INT 1
52079: PUSH
52080: EMPTY
52081: LIST
52082: LIST
52083: PUSH
52084: LD_INT 1
52086: NEG
52087: PUSH
52088: LD_INT 0
52090: PUSH
52091: EMPTY
52092: LIST
52093: LIST
52094: PUSH
52095: LD_INT 1
52097: NEG
52098: PUSH
52099: LD_INT 1
52101: NEG
52102: PUSH
52103: EMPTY
52104: LIST
52105: LIST
52106: PUSH
52107: EMPTY
52108: LIST
52109: LIST
52110: LIST
52111: LIST
52112: LIST
52113: LIST
52114: LIST
52115: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52116: LD_ADDR_VAR 0 63
52120: PUSH
52121: LD_INT 0
52123: PUSH
52124: LD_INT 0
52126: PUSH
52127: EMPTY
52128: LIST
52129: LIST
52130: PUSH
52131: LD_INT 0
52133: PUSH
52134: LD_INT 1
52136: NEG
52137: PUSH
52138: EMPTY
52139: LIST
52140: LIST
52141: PUSH
52142: LD_INT 1
52144: PUSH
52145: LD_INT 0
52147: PUSH
52148: EMPTY
52149: LIST
52150: LIST
52151: PUSH
52152: LD_INT 1
52154: PUSH
52155: LD_INT 1
52157: PUSH
52158: EMPTY
52159: LIST
52160: LIST
52161: PUSH
52162: LD_INT 0
52164: PUSH
52165: LD_INT 1
52167: PUSH
52168: EMPTY
52169: LIST
52170: LIST
52171: PUSH
52172: LD_INT 1
52174: NEG
52175: PUSH
52176: LD_INT 0
52178: PUSH
52179: EMPTY
52180: LIST
52181: LIST
52182: PUSH
52183: LD_INT 1
52185: NEG
52186: PUSH
52187: LD_INT 1
52189: NEG
52190: PUSH
52191: EMPTY
52192: LIST
52193: LIST
52194: PUSH
52195: EMPTY
52196: LIST
52197: LIST
52198: LIST
52199: LIST
52200: LIST
52201: LIST
52202: LIST
52203: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52204: LD_ADDR_VAR 0 64
52208: PUSH
52209: LD_INT 0
52211: PUSH
52212: LD_INT 0
52214: PUSH
52215: EMPTY
52216: LIST
52217: LIST
52218: PUSH
52219: LD_INT 0
52221: PUSH
52222: LD_INT 1
52224: NEG
52225: PUSH
52226: EMPTY
52227: LIST
52228: LIST
52229: PUSH
52230: LD_INT 1
52232: PUSH
52233: LD_INT 0
52235: PUSH
52236: EMPTY
52237: LIST
52238: LIST
52239: PUSH
52240: LD_INT 1
52242: PUSH
52243: LD_INT 1
52245: PUSH
52246: EMPTY
52247: LIST
52248: LIST
52249: PUSH
52250: LD_INT 0
52252: PUSH
52253: LD_INT 1
52255: PUSH
52256: EMPTY
52257: LIST
52258: LIST
52259: PUSH
52260: LD_INT 1
52262: NEG
52263: PUSH
52264: LD_INT 0
52266: PUSH
52267: EMPTY
52268: LIST
52269: LIST
52270: PUSH
52271: LD_INT 1
52273: NEG
52274: PUSH
52275: LD_INT 1
52277: NEG
52278: PUSH
52279: EMPTY
52280: LIST
52281: LIST
52282: PUSH
52283: EMPTY
52284: LIST
52285: LIST
52286: LIST
52287: LIST
52288: LIST
52289: LIST
52290: LIST
52291: ST_TO_ADDR
// end ; 1 :
52292: GO 58189
52294: LD_INT 1
52296: DOUBLE
52297: EQUAL
52298: IFTRUE 52302
52300: GO 54925
52302: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52303: LD_ADDR_VAR 0 11
52307: PUSH
52308: LD_INT 1
52310: NEG
52311: PUSH
52312: LD_INT 3
52314: NEG
52315: PUSH
52316: EMPTY
52317: LIST
52318: LIST
52319: PUSH
52320: LD_INT 0
52322: PUSH
52323: LD_INT 3
52325: NEG
52326: PUSH
52327: EMPTY
52328: LIST
52329: LIST
52330: PUSH
52331: LD_INT 1
52333: PUSH
52334: LD_INT 2
52336: NEG
52337: PUSH
52338: EMPTY
52339: LIST
52340: LIST
52341: PUSH
52342: EMPTY
52343: LIST
52344: LIST
52345: LIST
52346: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52347: LD_ADDR_VAR 0 12
52351: PUSH
52352: LD_INT 2
52354: PUSH
52355: LD_INT 1
52357: NEG
52358: PUSH
52359: EMPTY
52360: LIST
52361: LIST
52362: PUSH
52363: LD_INT 3
52365: PUSH
52366: LD_INT 0
52368: PUSH
52369: EMPTY
52370: LIST
52371: LIST
52372: PUSH
52373: LD_INT 3
52375: PUSH
52376: LD_INT 1
52378: PUSH
52379: EMPTY
52380: LIST
52381: LIST
52382: PUSH
52383: EMPTY
52384: LIST
52385: LIST
52386: LIST
52387: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52388: LD_ADDR_VAR 0 13
52392: PUSH
52393: LD_INT 3
52395: PUSH
52396: LD_INT 2
52398: PUSH
52399: EMPTY
52400: LIST
52401: LIST
52402: PUSH
52403: LD_INT 3
52405: PUSH
52406: LD_INT 3
52408: PUSH
52409: EMPTY
52410: LIST
52411: LIST
52412: PUSH
52413: LD_INT 2
52415: PUSH
52416: LD_INT 3
52418: PUSH
52419: EMPTY
52420: LIST
52421: LIST
52422: PUSH
52423: EMPTY
52424: LIST
52425: LIST
52426: LIST
52427: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52428: LD_ADDR_VAR 0 14
52432: PUSH
52433: LD_INT 1
52435: PUSH
52436: LD_INT 3
52438: PUSH
52439: EMPTY
52440: LIST
52441: LIST
52442: PUSH
52443: LD_INT 0
52445: PUSH
52446: LD_INT 3
52448: PUSH
52449: EMPTY
52450: LIST
52451: LIST
52452: PUSH
52453: LD_INT 1
52455: NEG
52456: PUSH
52457: LD_INT 2
52459: PUSH
52460: EMPTY
52461: LIST
52462: LIST
52463: PUSH
52464: EMPTY
52465: LIST
52466: LIST
52467: LIST
52468: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52469: LD_ADDR_VAR 0 15
52473: PUSH
52474: LD_INT 2
52476: NEG
52477: PUSH
52478: LD_INT 1
52480: PUSH
52481: EMPTY
52482: LIST
52483: LIST
52484: PUSH
52485: LD_INT 3
52487: NEG
52488: PUSH
52489: LD_INT 0
52491: PUSH
52492: EMPTY
52493: LIST
52494: LIST
52495: PUSH
52496: LD_INT 3
52498: NEG
52499: PUSH
52500: LD_INT 1
52502: NEG
52503: PUSH
52504: EMPTY
52505: LIST
52506: LIST
52507: PUSH
52508: EMPTY
52509: LIST
52510: LIST
52511: LIST
52512: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52513: LD_ADDR_VAR 0 16
52517: PUSH
52518: LD_INT 2
52520: NEG
52521: PUSH
52522: LD_INT 3
52524: NEG
52525: PUSH
52526: EMPTY
52527: LIST
52528: LIST
52529: PUSH
52530: LD_INT 3
52532: NEG
52533: PUSH
52534: LD_INT 2
52536: NEG
52537: PUSH
52538: EMPTY
52539: LIST
52540: LIST
52541: PUSH
52542: LD_INT 3
52544: NEG
52545: PUSH
52546: LD_INT 3
52548: NEG
52549: PUSH
52550: EMPTY
52551: LIST
52552: LIST
52553: PUSH
52554: EMPTY
52555: LIST
52556: LIST
52557: LIST
52558: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52559: LD_ADDR_VAR 0 17
52563: PUSH
52564: LD_INT 1
52566: NEG
52567: PUSH
52568: LD_INT 3
52570: NEG
52571: PUSH
52572: EMPTY
52573: LIST
52574: LIST
52575: PUSH
52576: LD_INT 0
52578: PUSH
52579: LD_INT 3
52581: NEG
52582: PUSH
52583: EMPTY
52584: LIST
52585: LIST
52586: PUSH
52587: LD_INT 1
52589: PUSH
52590: LD_INT 2
52592: NEG
52593: PUSH
52594: EMPTY
52595: LIST
52596: LIST
52597: PUSH
52598: EMPTY
52599: LIST
52600: LIST
52601: LIST
52602: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52603: LD_ADDR_VAR 0 18
52607: PUSH
52608: LD_INT 2
52610: PUSH
52611: LD_INT 1
52613: NEG
52614: PUSH
52615: EMPTY
52616: LIST
52617: LIST
52618: PUSH
52619: LD_INT 3
52621: PUSH
52622: LD_INT 0
52624: PUSH
52625: EMPTY
52626: LIST
52627: LIST
52628: PUSH
52629: LD_INT 3
52631: PUSH
52632: LD_INT 1
52634: PUSH
52635: EMPTY
52636: LIST
52637: LIST
52638: PUSH
52639: EMPTY
52640: LIST
52641: LIST
52642: LIST
52643: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52644: LD_ADDR_VAR 0 19
52648: PUSH
52649: LD_INT 3
52651: PUSH
52652: LD_INT 2
52654: PUSH
52655: EMPTY
52656: LIST
52657: LIST
52658: PUSH
52659: LD_INT 3
52661: PUSH
52662: LD_INT 3
52664: PUSH
52665: EMPTY
52666: LIST
52667: LIST
52668: PUSH
52669: LD_INT 2
52671: PUSH
52672: LD_INT 3
52674: PUSH
52675: EMPTY
52676: LIST
52677: LIST
52678: PUSH
52679: EMPTY
52680: LIST
52681: LIST
52682: LIST
52683: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52684: LD_ADDR_VAR 0 20
52688: PUSH
52689: LD_INT 1
52691: PUSH
52692: LD_INT 3
52694: PUSH
52695: EMPTY
52696: LIST
52697: LIST
52698: PUSH
52699: LD_INT 0
52701: PUSH
52702: LD_INT 3
52704: PUSH
52705: EMPTY
52706: LIST
52707: LIST
52708: PUSH
52709: LD_INT 1
52711: NEG
52712: PUSH
52713: LD_INT 2
52715: PUSH
52716: EMPTY
52717: LIST
52718: LIST
52719: PUSH
52720: EMPTY
52721: LIST
52722: LIST
52723: LIST
52724: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52725: LD_ADDR_VAR 0 21
52729: PUSH
52730: LD_INT 2
52732: NEG
52733: PUSH
52734: LD_INT 1
52736: PUSH
52737: EMPTY
52738: LIST
52739: LIST
52740: PUSH
52741: LD_INT 3
52743: NEG
52744: PUSH
52745: LD_INT 0
52747: PUSH
52748: EMPTY
52749: LIST
52750: LIST
52751: PUSH
52752: LD_INT 3
52754: NEG
52755: PUSH
52756: LD_INT 1
52758: NEG
52759: PUSH
52760: EMPTY
52761: LIST
52762: LIST
52763: PUSH
52764: EMPTY
52765: LIST
52766: LIST
52767: LIST
52768: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52769: LD_ADDR_VAR 0 22
52773: PUSH
52774: LD_INT 2
52776: NEG
52777: PUSH
52778: LD_INT 3
52780: NEG
52781: PUSH
52782: EMPTY
52783: LIST
52784: LIST
52785: PUSH
52786: LD_INT 3
52788: NEG
52789: PUSH
52790: LD_INT 2
52792: NEG
52793: PUSH
52794: EMPTY
52795: LIST
52796: LIST
52797: PUSH
52798: LD_INT 3
52800: NEG
52801: PUSH
52802: LD_INT 3
52804: NEG
52805: PUSH
52806: EMPTY
52807: LIST
52808: LIST
52809: PUSH
52810: EMPTY
52811: LIST
52812: LIST
52813: LIST
52814: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
52815: LD_ADDR_VAR 0 23
52819: PUSH
52820: LD_INT 0
52822: PUSH
52823: LD_INT 3
52825: NEG
52826: PUSH
52827: EMPTY
52828: LIST
52829: LIST
52830: PUSH
52831: LD_INT 1
52833: NEG
52834: PUSH
52835: LD_INT 4
52837: NEG
52838: PUSH
52839: EMPTY
52840: LIST
52841: LIST
52842: PUSH
52843: LD_INT 1
52845: PUSH
52846: LD_INT 3
52848: NEG
52849: PUSH
52850: EMPTY
52851: LIST
52852: LIST
52853: PUSH
52854: EMPTY
52855: LIST
52856: LIST
52857: LIST
52858: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
52859: LD_ADDR_VAR 0 24
52863: PUSH
52864: LD_INT 3
52866: PUSH
52867: LD_INT 0
52869: PUSH
52870: EMPTY
52871: LIST
52872: LIST
52873: PUSH
52874: LD_INT 3
52876: PUSH
52877: LD_INT 1
52879: NEG
52880: PUSH
52881: EMPTY
52882: LIST
52883: LIST
52884: PUSH
52885: LD_INT 4
52887: PUSH
52888: LD_INT 1
52890: PUSH
52891: EMPTY
52892: LIST
52893: LIST
52894: PUSH
52895: EMPTY
52896: LIST
52897: LIST
52898: LIST
52899: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
52900: LD_ADDR_VAR 0 25
52904: PUSH
52905: LD_INT 3
52907: PUSH
52908: LD_INT 3
52910: PUSH
52911: EMPTY
52912: LIST
52913: LIST
52914: PUSH
52915: LD_INT 4
52917: PUSH
52918: LD_INT 3
52920: PUSH
52921: EMPTY
52922: LIST
52923: LIST
52924: PUSH
52925: LD_INT 3
52927: PUSH
52928: LD_INT 4
52930: PUSH
52931: EMPTY
52932: LIST
52933: LIST
52934: PUSH
52935: EMPTY
52936: LIST
52937: LIST
52938: LIST
52939: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
52940: LD_ADDR_VAR 0 26
52944: PUSH
52945: LD_INT 0
52947: PUSH
52948: LD_INT 3
52950: PUSH
52951: EMPTY
52952: LIST
52953: LIST
52954: PUSH
52955: LD_INT 1
52957: PUSH
52958: LD_INT 4
52960: PUSH
52961: EMPTY
52962: LIST
52963: LIST
52964: PUSH
52965: LD_INT 1
52967: NEG
52968: PUSH
52969: LD_INT 3
52971: PUSH
52972: EMPTY
52973: LIST
52974: LIST
52975: PUSH
52976: EMPTY
52977: LIST
52978: LIST
52979: LIST
52980: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
52981: LD_ADDR_VAR 0 27
52985: PUSH
52986: LD_INT 3
52988: NEG
52989: PUSH
52990: LD_INT 0
52992: PUSH
52993: EMPTY
52994: LIST
52995: LIST
52996: PUSH
52997: LD_INT 3
52999: NEG
53000: PUSH
53001: LD_INT 1
53003: PUSH
53004: EMPTY
53005: LIST
53006: LIST
53007: PUSH
53008: LD_INT 4
53010: NEG
53011: PUSH
53012: LD_INT 1
53014: NEG
53015: PUSH
53016: EMPTY
53017: LIST
53018: LIST
53019: PUSH
53020: EMPTY
53021: LIST
53022: LIST
53023: LIST
53024: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
53025: LD_ADDR_VAR 0 28
53029: PUSH
53030: LD_INT 3
53032: NEG
53033: PUSH
53034: LD_INT 3
53036: NEG
53037: PUSH
53038: EMPTY
53039: LIST
53040: LIST
53041: PUSH
53042: LD_INT 3
53044: NEG
53045: PUSH
53046: LD_INT 4
53048: NEG
53049: PUSH
53050: EMPTY
53051: LIST
53052: LIST
53053: PUSH
53054: LD_INT 4
53056: NEG
53057: PUSH
53058: LD_INT 3
53060: NEG
53061: PUSH
53062: EMPTY
53063: LIST
53064: LIST
53065: PUSH
53066: EMPTY
53067: LIST
53068: LIST
53069: LIST
53070: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
53071: LD_ADDR_VAR 0 29
53075: PUSH
53076: LD_INT 1
53078: NEG
53079: PUSH
53080: LD_INT 3
53082: NEG
53083: PUSH
53084: EMPTY
53085: LIST
53086: LIST
53087: PUSH
53088: LD_INT 0
53090: PUSH
53091: LD_INT 3
53093: NEG
53094: PUSH
53095: EMPTY
53096: LIST
53097: LIST
53098: PUSH
53099: LD_INT 1
53101: PUSH
53102: LD_INT 2
53104: NEG
53105: PUSH
53106: EMPTY
53107: LIST
53108: LIST
53109: PUSH
53110: LD_INT 1
53112: NEG
53113: PUSH
53114: LD_INT 4
53116: NEG
53117: PUSH
53118: EMPTY
53119: LIST
53120: LIST
53121: PUSH
53122: LD_INT 0
53124: PUSH
53125: LD_INT 4
53127: NEG
53128: PUSH
53129: EMPTY
53130: LIST
53131: LIST
53132: PUSH
53133: LD_INT 1
53135: PUSH
53136: LD_INT 3
53138: NEG
53139: PUSH
53140: EMPTY
53141: LIST
53142: LIST
53143: PUSH
53144: LD_INT 1
53146: NEG
53147: PUSH
53148: LD_INT 5
53150: NEG
53151: PUSH
53152: EMPTY
53153: LIST
53154: LIST
53155: PUSH
53156: LD_INT 0
53158: PUSH
53159: LD_INT 5
53161: NEG
53162: PUSH
53163: EMPTY
53164: LIST
53165: LIST
53166: PUSH
53167: LD_INT 1
53169: PUSH
53170: LD_INT 4
53172: NEG
53173: PUSH
53174: EMPTY
53175: LIST
53176: LIST
53177: PUSH
53178: LD_INT 1
53180: NEG
53181: PUSH
53182: LD_INT 6
53184: NEG
53185: PUSH
53186: EMPTY
53187: LIST
53188: LIST
53189: PUSH
53190: LD_INT 0
53192: PUSH
53193: LD_INT 6
53195: NEG
53196: PUSH
53197: EMPTY
53198: LIST
53199: LIST
53200: PUSH
53201: LD_INT 1
53203: PUSH
53204: LD_INT 5
53206: NEG
53207: PUSH
53208: EMPTY
53209: LIST
53210: LIST
53211: PUSH
53212: EMPTY
53213: LIST
53214: LIST
53215: LIST
53216: LIST
53217: LIST
53218: LIST
53219: LIST
53220: LIST
53221: LIST
53222: LIST
53223: LIST
53224: LIST
53225: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
53226: LD_ADDR_VAR 0 30
53230: PUSH
53231: LD_INT 2
53233: PUSH
53234: LD_INT 1
53236: NEG
53237: PUSH
53238: EMPTY
53239: LIST
53240: LIST
53241: PUSH
53242: LD_INT 3
53244: PUSH
53245: LD_INT 0
53247: PUSH
53248: EMPTY
53249: LIST
53250: LIST
53251: PUSH
53252: LD_INT 3
53254: PUSH
53255: LD_INT 1
53257: PUSH
53258: EMPTY
53259: LIST
53260: LIST
53261: PUSH
53262: LD_INT 3
53264: PUSH
53265: LD_INT 1
53267: NEG
53268: PUSH
53269: EMPTY
53270: LIST
53271: LIST
53272: PUSH
53273: LD_INT 4
53275: PUSH
53276: LD_INT 0
53278: PUSH
53279: EMPTY
53280: LIST
53281: LIST
53282: PUSH
53283: LD_INT 4
53285: PUSH
53286: LD_INT 1
53288: PUSH
53289: EMPTY
53290: LIST
53291: LIST
53292: PUSH
53293: LD_INT 4
53295: PUSH
53296: LD_INT 1
53298: NEG
53299: PUSH
53300: EMPTY
53301: LIST
53302: LIST
53303: PUSH
53304: LD_INT 5
53306: PUSH
53307: LD_INT 0
53309: PUSH
53310: EMPTY
53311: LIST
53312: LIST
53313: PUSH
53314: LD_INT 5
53316: PUSH
53317: LD_INT 1
53319: PUSH
53320: EMPTY
53321: LIST
53322: LIST
53323: PUSH
53324: LD_INT 5
53326: PUSH
53327: LD_INT 1
53329: NEG
53330: PUSH
53331: EMPTY
53332: LIST
53333: LIST
53334: PUSH
53335: LD_INT 6
53337: PUSH
53338: LD_INT 0
53340: PUSH
53341: EMPTY
53342: LIST
53343: LIST
53344: PUSH
53345: LD_INT 6
53347: PUSH
53348: LD_INT 1
53350: PUSH
53351: EMPTY
53352: LIST
53353: LIST
53354: PUSH
53355: EMPTY
53356: LIST
53357: LIST
53358: LIST
53359: LIST
53360: LIST
53361: LIST
53362: LIST
53363: LIST
53364: LIST
53365: LIST
53366: LIST
53367: LIST
53368: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
53369: LD_ADDR_VAR 0 31
53373: PUSH
53374: LD_INT 3
53376: PUSH
53377: LD_INT 2
53379: PUSH
53380: EMPTY
53381: LIST
53382: LIST
53383: PUSH
53384: LD_INT 3
53386: PUSH
53387: LD_INT 3
53389: PUSH
53390: EMPTY
53391: LIST
53392: LIST
53393: PUSH
53394: LD_INT 2
53396: PUSH
53397: LD_INT 3
53399: PUSH
53400: EMPTY
53401: LIST
53402: LIST
53403: PUSH
53404: LD_INT 4
53406: PUSH
53407: LD_INT 3
53409: PUSH
53410: EMPTY
53411: LIST
53412: LIST
53413: PUSH
53414: LD_INT 4
53416: PUSH
53417: LD_INT 4
53419: PUSH
53420: EMPTY
53421: LIST
53422: LIST
53423: PUSH
53424: LD_INT 3
53426: PUSH
53427: LD_INT 4
53429: PUSH
53430: EMPTY
53431: LIST
53432: LIST
53433: PUSH
53434: LD_INT 5
53436: PUSH
53437: LD_INT 4
53439: PUSH
53440: EMPTY
53441: LIST
53442: LIST
53443: PUSH
53444: LD_INT 5
53446: PUSH
53447: LD_INT 5
53449: PUSH
53450: EMPTY
53451: LIST
53452: LIST
53453: PUSH
53454: LD_INT 4
53456: PUSH
53457: LD_INT 5
53459: PUSH
53460: EMPTY
53461: LIST
53462: LIST
53463: PUSH
53464: LD_INT 6
53466: PUSH
53467: LD_INT 5
53469: PUSH
53470: EMPTY
53471: LIST
53472: LIST
53473: PUSH
53474: LD_INT 6
53476: PUSH
53477: LD_INT 6
53479: PUSH
53480: EMPTY
53481: LIST
53482: LIST
53483: PUSH
53484: LD_INT 5
53486: PUSH
53487: LD_INT 6
53489: PUSH
53490: EMPTY
53491: LIST
53492: LIST
53493: PUSH
53494: EMPTY
53495: LIST
53496: LIST
53497: LIST
53498: LIST
53499: LIST
53500: LIST
53501: LIST
53502: LIST
53503: LIST
53504: LIST
53505: LIST
53506: LIST
53507: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
53508: LD_ADDR_VAR 0 32
53512: PUSH
53513: LD_INT 1
53515: PUSH
53516: LD_INT 3
53518: PUSH
53519: EMPTY
53520: LIST
53521: LIST
53522: PUSH
53523: LD_INT 0
53525: PUSH
53526: LD_INT 3
53528: PUSH
53529: EMPTY
53530: LIST
53531: LIST
53532: PUSH
53533: LD_INT 1
53535: NEG
53536: PUSH
53537: LD_INT 2
53539: PUSH
53540: EMPTY
53541: LIST
53542: LIST
53543: PUSH
53544: LD_INT 1
53546: PUSH
53547: LD_INT 4
53549: PUSH
53550: EMPTY
53551: LIST
53552: LIST
53553: PUSH
53554: LD_INT 0
53556: PUSH
53557: LD_INT 4
53559: PUSH
53560: EMPTY
53561: LIST
53562: LIST
53563: PUSH
53564: LD_INT 1
53566: NEG
53567: PUSH
53568: LD_INT 3
53570: PUSH
53571: EMPTY
53572: LIST
53573: LIST
53574: PUSH
53575: LD_INT 1
53577: PUSH
53578: LD_INT 5
53580: PUSH
53581: EMPTY
53582: LIST
53583: LIST
53584: PUSH
53585: LD_INT 0
53587: PUSH
53588: LD_INT 5
53590: PUSH
53591: EMPTY
53592: LIST
53593: LIST
53594: PUSH
53595: LD_INT 1
53597: NEG
53598: PUSH
53599: LD_INT 4
53601: PUSH
53602: EMPTY
53603: LIST
53604: LIST
53605: PUSH
53606: LD_INT 1
53608: PUSH
53609: LD_INT 6
53611: PUSH
53612: EMPTY
53613: LIST
53614: LIST
53615: PUSH
53616: LD_INT 0
53618: PUSH
53619: LD_INT 6
53621: PUSH
53622: EMPTY
53623: LIST
53624: LIST
53625: PUSH
53626: LD_INT 1
53628: NEG
53629: PUSH
53630: LD_INT 5
53632: PUSH
53633: EMPTY
53634: LIST
53635: LIST
53636: PUSH
53637: EMPTY
53638: LIST
53639: LIST
53640: LIST
53641: LIST
53642: LIST
53643: LIST
53644: LIST
53645: LIST
53646: LIST
53647: LIST
53648: LIST
53649: LIST
53650: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
53651: LD_ADDR_VAR 0 33
53655: PUSH
53656: LD_INT 2
53658: NEG
53659: PUSH
53660: LD_INT 1
53662: PUSH
53663: EMPTY
53664: LIST
53665: LIST
53666: PUSH
53667: LD_INT 3
53669: NEG
53670: PUSH
53671: LD_INT 0
53673: PUSH
53674: EMPTY
53675: LIST
53676: LIST
53677: PUSH
53678: LD_INT 3
53680: NEG
53681: PUSH
53682: LD_INT 1
53684: NEG
53685: PUSH
53686: EMPTY
53687: LIST
53688: LIST
53689: PUSH
53690: LD_INT 3
53692: NEG
53693: PUSH
53694: LD_INT 1
53696: PUSH
53697: EMPTY
53698: LIST
53699: LIST
53700: PUSH
53701: LD_INT 4
53703: NEG
53704: PUSH
53705: LD_INT 0
53707: PUSH
53708: EMPTY
53709: LIST
53710: LIST
53711: PUSH
53712: LD_INT 4
53714: NEG
53715: PUSH
53716: LD_INT 1
53718: NEG
53719: PUSH
53720: EMPTY
53721: LIST
53722: LIST
53723: PUSH
53724: LD_INT 4
53726: NEG
53727: PUSH
53728: LD_INT 1
53730: PUSH
53731: EMPTY
53732: LIST
53733: LIST
53734: PUSH
53735: LD_INT 5
53737: NEG
53738: PUSH
53739: LD_INT 0
53741: PUSH
53742: EMPTY
53743: LIST
53744: LIST
53745: PUSH
53746: LD_INT 5
53748: NEG
53749: PUSH
53750: LD_INT 1
53752: NEG
53753: PUSH
53754: EMPTY
53755: LIST
53756: LIST
53757: PUSH
53758: LD_INT 5
53760: NEG
53761: PUSH
53762: LD_INT 1
53764: PUSH
53765: EMPTY
53766: LIST
53767: LIST
53768: PUSH
53769: LD_INT 6
53771: NEG
53772: PUSH
53773: LD_INT 0
53775: PUSH
53776: EMPTY
53777: LIST
53778: LIST
53779: PUSH
53780: LD_INT 6
53782: NEG
53783: PUSH
53784: LD_INT 1
53786: NEG
53787: PUSH
53788: EMPTY
53789: LIST
53790: LIST
53791: PUSH
53792: EMPTY
53793: LIST
53794: LIST
53795: LIST
53796: LIST
53797: LIST
53798: LIST
53799: LIST
53800: LIST
53801: LIST
53802: LIST
53803: LIST
53804: LIST
53805: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
53806: LD_ADDR_VAR 0 34
53810: PUSH
53811: LD_INT 2
53813: NEG
53814: PUSH
53815: LD_INT 3
53817: NEG
53818: PUSH
53819: EMPTY
53820: LIST
53821: LIST
53822: PUSH
53823: LD_INT 3
53825: NEG
53826: PUSH
53827: LD_INT 2
53829: NEG
53830: PUSH
53831: EMPTY
53832: LIST
53833: LIST
53834: PUSH
53835: LD_INT 3
53837: NEG
53838: PUSH
53839: LD_INT 3
53841: NEG
53842: PUSH
53843: EMPTY
53844: LIST
53845: LIST
53846: PUSH
53847: LD_INT 3
53849: NEG
53850: PUSH
53851: LD_INT 4
53853: NEG
53854: PUSH
53855: EMPTY
53856: LIST
53857: LIST
53858: PUSH
53859: LD_INT 4
53861: NEG
53862: PUSH
53863: LD_INT 3
53865: NEG
53866: PUSH
53867: EMPTY
53868: LIST
53869: LIST
53870: PUSH
53871: LD_INT 4
53873: NEG
53874: PUSH
53875: LD_INT 4
53877: NEG
53878: PUSH
53879: EMPTY
53880: LIST
53881: LIST
53882: PUSH
53883: LD_INT 4
53885: NEG
53886: PUSH
53887: LD_INT 5
53889: NEG
53890: PUSH
53891: EMPTY
53892: LIST
53893: LIST
53894: PUSH
53895: LD_INT 5
53897: NEG
53898: PUSH
53899: LD_INT 4
53901: NEG
53902: PUSH
53903: EMPTY
53904: LIST
53905: LIST
53906: PUSH
53907: LD_INT 5
53909: NEG
53910: PUSH
53911: LD_INT 5
53913: NEG
53914: PUSH
53915: EMPTY
53916: LIST
53917: LIST
53918: PUSH
53919: LD_INT 5
53921: NEG
53922: PUSH
53923: LD_INT 6
53925: NEG
53926: PUSH
53927: EMPTY
53928: LIST
53929: LIST
53930: PUSH
53931: LD_INT 6
53933: NEG
53934: PUSH
53935: LD_INT 5
53937: NEG
53938: PUSH
53939: EMPTY
53940: LIST
53941: LIST
53942: PUSH
53943: LD_INT 6
53945: NEG
53946: PUSH
53947: LD_INT 6
53949: NEG
53950: PUSH
53951: EMPTY
53952: LIST
53953: LIST
53954: PUSH
53955: EMPTY
53956: LIST
53957: LIST
53958: LIST
53959: LIST
53960: LIST
53961: LIST
53962: LIST
53963: LIST
53964: LIST
53965: LIST
53966: LIST
53967: LIST
53968: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
53969: LD_ADDR_VAR 0 41
53973: PUSH
53974: LD_INT 0
53976: PUSH
53977: LD_INT 2
53979: NEG
53980: PUSH
53981: EMPTY
53982: LIST
53983: LIST
53984: PUSH
53985: LD_INT 1
53987: NEG
53988: PUSH
53989: LD_INT 3
53991: NEG
53992: PUSH
53993: EMPTY
53994: LIST
53995: LIST
53996: PUSH
53997: LD_INT 1
53999: PUSH
54000: LD_INT 2
54002: NEG
54003: PUSH
54004: EMPTY
54005: LIST
54006: LIST
54007: PUSH
54008: EMPTY
54009: LIST
54010: LIST
54011: LIST
54012: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
54013: LD_ADDR_VAR 0 42
54017: PUSH
54018: LD_INT 2
54020: PUSH
54021: LD_INT 0
54023: PUSH
54024: EMPTY
54025: LIST
54026: LIST
54027: PUSH
54028: LD_INT 2
54030: PUSH
54031: LD_INT 1
54033: NEG
54034: PUSH
54035: EMPTY
54036: LIST
54037: LIST
54038: PUSH
54039: LD_INT 3
54041: PUSH
54042: LD_INT 1
54044: PUSH
54045: EMPTY
54046: LIST
54047: LIST
54048: PUSH
54049: EMPTY
54050: LIST
54051: LIST
54052: LIST
54053: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
54054: LD_ADDR_VAR 0 43
54058: PUSH
54059: LD_INT 2
54061: PUSH
54062: LD_INT 2
54064: PUSH
54065: EMPTY
54066: LIST
54067: LIST
54068: PUSH
54069: LD_INT 3
54071: PUSH
54072: LD_INT 2
54074: PUSH
54075: EMPTY
54076: LIST
54077: LIST
54078: PUSH
54079: LD_INT 2
54081: PUSH
54082: LD_INT 3
54084: PUSH
54085: EMPTY
54086: LIST
54087: LIST
54088: PUSH
54089: EMPTY
54090: LIST
54091: LIST
54092: LIST
54093: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
54094: LD_ADDR_VAR 0 44
54098: PUSH
54099: LD_INT 0
54101: PUSH
54102: LD_INT 2
54104: PUSH
54105: EMPTY
54106: LIST
54107: LIST
54108: PUSH
54109: LD_INT 1
54111: PUSH
54112: LD_INT 3
54114: PUSH
54115: EMPTY
54116: LIST
54117: LIST
54118: PUSH
54119: LD_INT 1
54121: NEG
54122: PUSH
54123: LD_INT 2
54125: PUSH
54126: EMPTY
54127: LIST
54128: LIST
54129: PUSH
54130: EMPTY
54131: LIST
54132: LIST
54133: LIST
54134: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54135: LD_ADDR_VAR 0 45
54139: PUSH
54140: LD_INT 2
54142: NEG
54143: PUSH
54144: LD_INT 0
54146: PUSH
54147: EMPTY
54148: LIST
54149: LIST
54150: PUSH
54151: LD_INT 2
54153: NEG
54154: PUSH
54155: LD_INT 1
54157: PUSH
54158: EMPTY
54159: LIST
54160: LIST
54161: PUSH
54162: LD_INT 3
54164: NEG
54165: PUSH
54166: LD_INT 1
54168: NEG
54169: PUSH
54170: EMPTY
54171: LIST
54172: LIST
54173: PUSH
54174: EMPTY
54175: LIST
54176: LIST
54177: LIST
54178: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
54179: LD_ADDR_VAR 0 46
54183: PUSH
54184: LD_INT 2
54186: NEG
54187: PUSH
54188: LD_INT 2
54190: NEG
54191: PUSH
54192: EMPTY
54193: LIST
54194: LIST
54195: PUSH
54196: LD_INT 2
54198: NEG
54199: PUSH
54200: LD_INT 3
54202: NEG
54203: PUSH
54204: EMPTY
54205: LIST
54206: LIST
54207: PUSH
54208: LD_INT 3
54210: NEG
54211: PUSH
54212: LD_INT 2
54214: NEG
54215: PUSH
54216: EMPTY
54217: LIST
54218: LIST
54219: PUSH
54220: EMPTY
54221: LIST
54222: LIST
54223: LIST
54224: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
54225: LD_ADDR_VAR 0 47
54229: PUSH
54230: LD_INT 2
54232: NEG
54233: PUSH
54234: LD_INT 3
54236: NEG
54237: PUSH
54238: EMPTY
54239: LIST
54240: LIST
54241: PUSH
54242: LD_INT 1
54244: NEG
54245: PUSH
54246: LD_INT 3
54248: NEG
54249: PUSH
54250: EMPTY
54251: LIST
54252: LIST
54253: PUSH
54254: EMPTY
54255: LIST
54256: LIST
54257: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
54258: LD_ADDR_VAR 0 48
54262: PUSH
54263: LD_INT 1
54265: PUSH
54266: LD_INT 2
54268: NEG
54269: PUSH
54270: EMPTY
54271: LIST
54272: LIST
54273: PUSH
54274: LD_INT 2
54276: PUSH
54277: LD_INT 1
54279: NEG
54280: PUSH
54281: EMPTY
54282: LIST
54283: LIST
54284: PUSH
54285: EMPTY
54286: LIST
54287: LIST
54288: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
54289: LD_ADDR_VAR 0 49
54293: PUSH
54294: LD_INT 3
54296: PUSH
54297: LD_INT 1
54299: PUSH
54300: EMPTY
54301: LIST
54302: LIST
54303: PUSH
54304: LD_INT 3
54306: PUSH
54307: LD_INT 2
54309: PUSH
54310: EMPTY
54311: LIST
54312: LIST
54313: PUSH
54314: EMPTY
54315: LIST
54316: LIST
54317: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
54318: LD_ADDR_VAR 0 50
54322: PUSH
54323: LD_INT 2
54325: PUSH
54326: LD_INT 3
54328: PUSH
54329: EMPTY
54330: LIST
54331: LIST
54332: PUSH
54333: LD_INT 1
54335: PUSH
54336: LD_INT 3
54338: PUSH
54339: EMPTY
54340: LIST
54341: LIST
54342: PUSH
54343: EMPTY
54344: LIST
54345: LIST
54346: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
54347: LD_ADDR_VAR 0 51
54351: PUSH
54352: LD_INT 1
54354: NEG
54355: PUSH
54356: LD_INT 2
54358: PUSH
54359: EMPTY
54360: LIST
54361: LIST
54362: PUSH
54363: LD_INT 2
54365: NEG
54366: PUSH
54367: LD_INT 1
54369: PUSH
54370: EMPTY
54371: LIST
54372: LIST
54373: PUSH
54374: EMPTY
54375: LIST
54376: LIST
54377: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54378: LD_ADDR_VAR 0 52
54382: PUSH
54383: LD_INT 3
54385: NEG
54386: PUSH
54387: LD_INT 1
54389: NEG
54390: PUSH
54391: EMPTY
54392: LIST
54393: LIST
54394: PUSH
54395: LD_INT 3
54397: NEG
54398: PUSH
54399: LD_INT 2
54401: NEG
54402: PUSH
54403: EMPTY
54404: LIST
54405: LIST
54406: PUSH
54407: EMPTY
54408: LIST
54409: LIST
54410: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54411: LD_ADDR_VAR 0 53
54415: PUSH
54416: LD_INT 1
54418: NEG
54419: PUSH
54420: LD_INT 3
54422: NEG
54423: PUSH
54424: EMPTY
54425: LIST
54426: LIST
54427: PUSH
54428: LD_INT 0
54430: PUSH
54431: LD_INT 3
54433: NEG
54434: PUSH
54435: EMPTY
54436: LIST
54437: LIST
54438: PUSH
54439: LD_INT 1
54441: PUSH
54442: LD_INT 2
54444: NEG
54445: PUSH
54446: EMPTY
54447: LIST
54448: LIST
54449: PUSH
54450: EMPTY
54451: LIST
54452: LIST
54453: LIST
54454: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54455: LD_ADDR_VAR 0 54
54459: PUSH
54460: LD_INT 2
54462: PUSH
54463: LD_INT 1
54465: NEG
54466: PUSH
54467: EMPTY
54468: LIST
54469: LIST
54470: PUSH
54471: LD_INT 3
54473: PUSH
54474: LD_INT 0
54476: PUSH
54477: EMPTY
54478: LIST
54479: LIST
54480: PUSH
54481: LD_INT 3
54483: PUSH
54484: LD_INT 1
54486: PUSH
54487: EMPTY
54488: LIST
54489: LIST
54490: PUSH
54491: EMPTY
54492: LIST
54493: LIST
54494: LIST
54495: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54496: LD_ADDR_VAR 0 55
54500: PUSH
54501: LD_INT 3
54503: PUSH
54504: LD_INT 2
54506: PUSH
54507: EMPTY
54508: LIST
54509: LIST
54510: PUSH
54511: LD_INT 3
54513: PUSH
54514: LD_INT 3
54516: PUSH
54517: EMPTY
54518: LIST
54519: LIST
54520: PUSH
54521: LD_INT 2
54523: PUSH
54524: LD_INT 3
54526: PUSH
54527: EMPTY
54528: LIST
54529: LIST
54530: PUSH
54531: EMPTY
54532: LIST
54533: LIST
54534: LIST
54535: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54536: LD_ADDR_VAR 0 56
54540: PUSH
54541: LD_INT 1
54543: PUSH
54544: LD_INT 3
54546: PUSH
54547: EMPTY
54548: LIST
54549: LIST
54550: PUSH
54551: LD_INT 0
54553: PUSH
54554: LD_INT 3
54556: PUSH
54557: EMPTY
54558: LIST
54559: LIST
54560: PUSH
54561: LD_INT 1
54563: NEG
54564: PUSH
54565: LD_INT 2
54567: PUSH
54568: EMPTY
54569: LIST
54570: LIST
54571: PUSH
54572: EMPTY
54573: LIST
54574: LIST
54575: LIST
54576: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54577: LD_ADDR_VAR 0 57
54581: PUSH
54582: LD_INT 2
54584: NEG
54585: PUSH
54586: LD_INT 1
54588: PUSH
54589: EMPTY
54590: LIST
54591: LIST
54592: PUSH
54593: LD_INT 3
54595: NEG
54596: PUSH
54597: LD_INT 0
54599: PUSH
54600: EMPTY
54601: LIST
54602: LIST
54603: PUSH
54604: LD_INT 3
54606: NEG
54607: PUSH
54608: LD_INT 1
54610: NEG
54611: PUSH
54612: EMPTY
54613: LIST
54614: LIST
54615: PUSH
54616: EMPTY
54617: LIST
54618: LIST
54619: LIST
54620: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54621: LD_ADDR_VAR 0 58
54625: PUSH
54626: LD_INT 2
54628: NEG
54629: PUSH
54630: LD_INT 3
54632: NEG
54633: PUSH
54634: EMPTY
54635: LIST
54636: LIST
54637: PUSH
54638: LD_INT 3
54640: NEG
54641: PUSH
54642: LD_INT 2
54644: NEG
54645: PUSH
54646: EMPTY
54647: LIST
54648: LIST
54649: PUSH
54650: LD_INT 3
54652: NEG
54653: PUSH
54654: LD_INT 3
54656: NEG
54657: PUSH
54658: EMPTY
54659: LIST
54660: LIST
54661: PUSH
54662: EMPTY
54663: LIST
54664: LIST
54665: LIST
54666: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
54667: LD_ADDR_VAR 0 59
54671: PUSH
54672: LD_INT 1
54674: NEG
54675: PUSH
54676: LD_INT 2
54678: NEG
54679: PUSH
54680: EMPTY
54681: LIST
54682: LIST
54683: PUSH
54684: LD_INT 0
54686: PUSH
54687: LD_INT 2
54689: NEG
54690: PUSH
54691: EMPTY
54692: LIST
54693: LIST
54694: PUSH
54695: LD_INT 1
54697: PUSH
54698: LD_INT 1
54700: NEG
54701: PUSH
54702: EMPTY
54703: LIST
54704: LIST
54705: PUSH
54706: EMPTY
54707: LIST
54708: LIST
54709: LIST
54710: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
54711: LD_ADDR_VAR 0 60
54715: PUSH
54716: LD_INT 1
54718: PUSH
54719: LD_INT 1
54721: NEG
54722: PUSH
54723: EMPTY
54724: LIST
54725: LIST
54726: PUSH
54727: LD_INT 2
54729: PUSH
54730: LD_INT 0
54732: PUSH
54733: EMPTY
54734: LIST
54735: LIST
54736: PUSH
54737: LD_INT 2
54739: PUSH
54740: LD_INT 1
54742: PUSH
54743: EMPTY
54744: LIST
54745: LIST
54746: PUSH
54747: EMPTY
54748: LIST
54749: LIST
54750: LIST
54751: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
54752: LD_ADDR_VAR 0 61
54756: PUSH
54757: LD_INT 2
54759: PUSH
54760: LD_INT 1
54762: PUSH
54763: EMPTY
54764: LIST
54765: LIST
54766: PUSH
54767: LD_INT 2
54769: PUSH
54770: LD_INT 2
54772: PUSH
54773: EMPTY
54774: LIST
54775: LIST
54776: PUSH
54777: LD_INT 1
54779: PUSH
54780: LD_INT 2
54782: PUSH
54783: EMPTY
54784: LIST
54785: LIST
54786: PUSH
54787: EMPTY
54788: LIST
54789: LIST
54790: LIST
54791: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
54792: LD_ADDR_VAR 0 62
54796: PUSH
54797: LD_INT 1
54799: PUSH
54800: LD_INT 2
54802: PUSH
54803: EMPTY
54804: LIST
54805: LIST
54806: PUSH
54807: LD_INT 0
54809: PUSH
54810: LD_INT 2
54812: PUSH
54813: EMPTY
54814: LIST
54815: LIST
54816: PUSH
54817: LD_INT 1
54819: NEG
54820: PUSH
54821: LD_INT 1
54823: PUSH
54824: EMPTY
54825: LIST
54826: LIST
54827: PUSH
54828: EMPTY
54829: LIST
54830: LIST
54831: LIST
54832: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
54833: LD_ADDR_VAR 0 63
54837: PUSH
54838: LD_INT 1
54840: NEG
54841: PUSH
54842: LD_INT 1
54844: PUSH
54845: EMPTY
54846: LIST
54847: LIST
54848: PUSH
54849: LD_INT 2
54851: NEG
54852: PUSH
54853: LD_INT 0
54855: PUSH
54856: EMPTY
54857: LIST
54858: LIST
54859: PUSH
54860: LD_INT 2
54862: NEG
54863: PUSH
54864: LD_INT 1
54866: NEG
54867: PUSH
54868: EMPTY
54869: LIST
54870: LIST
54871: PUSH
54872: EMPTY
54873: LIST
54874: LIST
54875: LIST
54876: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54877: LD_ADDR_VAR 0 64
54881: PUSH
54882: LD_INT 1
54884: NEG
54885: PUSH
54886: LD_INT 2
54888: NEG
54889: PUSH
54890: EMPTY
54891: LIST
54892: LIST
54893: PUSH
54894: LD_INT 2
54896: NEG
54897: PUSH
54898: LD_INT 1
54900: NEG
54901: PUSH
54902: EMPTY
54903: LIST
54904: LIST
54905: PUSH
54906: LD_INT 2
54908: NEG
54909: PUSH
54910: LD_INT 2
54912: NEG
54913: PUSH
54914: EMPTY
54915: LIST
54916: LIST
54917: PUSH
54918: EMPTY
54919: LIST
54920: LIST
54921: LIST
54922: ST_TO_ADDR
// end ; 2 :
54923: GO 58189
54925: LD_INT 2
54927: DOUBLE
54928: EQUAL
54929: IFTRUE 54933
54931: GO 58188
54933: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
54934: LD_ADDR_VAR 0 29
54938: PUSH
54939: LD_INT 4
54941: PUSH
54942: LD_INT 0
54944: PUSH
54945: EMPTY
54946: LIST
54947: LIST
54948: PUSH
54949: LD_INT 4
54951: PUSH
54952: LD_INT 1
54954: NEG
54955: PUSH
54956: EMPTY
54957: LIST
54958: LIST
54959: PUSH
54960: LD_INT 5
54962: PUSH
54963: LD_INT 0
54965: PUSH
54966: EMPTY
54967: LIST
54968: LIST
54969: PUSH
54970: LD_INT 5
54972: PUSH
54973: LD_INT 1
54975: PUSH
54976: EMPTY
54977: LIST
54978: LIST
54979: PUSH
54980: LD_INT 4
54982: PUSH
54983: LD_INT 1
54985: PUSH
54986: EMPTY
54987: LIST
54988: LIST
54989: PUSH
54990: LD_INT 3
54992: PUSH
54993: LD_INT 0
54995: PUSH
54996: EMPTY
54997: LIST
54998: LIST
54999: PUSH
55000: LD_INT 3
55002: PUSH
55003: LD_INT 1
55005: NEG
55006: PUSH
55007: EMPTY
55008: LIST
55009: LIST
55010: PUSH
55011: LD_INT 3
55013: PUSH
55014: LD_INT 2
55016: NEG
55017: PUSH
55018: EMPTY
55019: LIST
55020: LIST
55021: PUSH
55022: LD_INT 5
55024: PUSH
55025: LD_INT 2
55027: PUSH
55028: EMPTY
55029: LIST
55030: LIST
55031: PUSH
55032: LD_INT 3
55034: PUSH
55035: LD_INT 3
55037: PUSH
55038: EMPTY
55039: LIST
55040: LIST
55041: PUSH
55042: LD_INT 3
55044: PUSH
55045: LD_INT 2
55047: PUSH
55048: EMPTY
55049: LIST
55050: LIST
55051: PUSH
55052: LD_INT 4
55054: PUSH
55055: LD_INT 3
55057: PUSH
55058: EMPTY
55059: LIST
55060: LIST
55061: PUSH
55062: LD_INT 4
55064: PUSH
55065: LD_INT 4
55067: PUSH
55068: EMPTY
55069: LIST
55070: LIST
55071: PUSH
55072: LD_INT 3
55074: PUSH
55075: LD_INT 4
55077: PUSH
55078: EMPTY
55079: LIST
55080: LIST
55081: PUSH
55082: LD_INT 2
55084: PUSH
55085: LD_INT 3
55087: PUSH
55088: EMPTY
55089: LIST
55090: LIST
55091: PUSH
55092: LD_INT 2
55094: PUSH
55095: LD_INT 2
55097: PUSH
55098: EMPTY
55099: LIST
55100: LIST
55101: PUSH
55102: LD_INT 4
55104: PUSH
55105: LD_INT 2
55107: PUSH
55108: EMPTY
55109: LIST
55110: LIST
55111: PUSH
55112: LD_INT 2
55114: PUSH
55115: LD_INT 4
55117: PUSH
55118: EMPTY
55119: LIST
55120: LIST
55121: PUSH
55122: LD_INT 0
55124: PUSH
55125: LD_INT 4
55127: PUSH
55128: EMPTY
55129: LIST
55130: LIST
55131: PUSH
55132: LD_INT 0
55134: PUSH
55135: LD_INT 3
55137: PUSH
55138: EMPTY
55139: LIST
55140: LIST
55141: PUSH
55142: LD_INT 1
55144: PUSH
55145: LD_INT 4
55147: PUSH
55148: EMPTY
55149: LIST
55150: LIST
55151: PUSH
55152: LD_INT 1
55154: PUSH
55155: LD_INT 5
55157: PUSH
55158: EMPTY
55159: LIST
55160: LIST
55161: PUSH
55162: LD_INT 0
55164: PUSH
55165: LD_INT 5
55167: PUSH
55168: EMPTY
55169: LIST
55170: LIST
55171: PUSH
55172: LD_INT 1
55174: NEG
55175: PUSH
55176: LD_INT 4
55178: PUSH
55179: EMPTY
55180: LIST
55181: LIST
55182: PUSH
55183: LD_INT 1
55185: NEG
55186: PUSH
55187: LD_INT 3
55189: PUSH
55190: EMPTY
55191: LIST
55192: LIST
55193: PUSH
55194: LD_INT 2
55196: PUSH
55197: LD_INT 5
55199: PUSH
55200: EMPTY
55201: LIST
55202: LIST
55203: PUSH
55204: LD_INT 2
55206: NEG
55207: PUSH
55208: LD_INT 3
55210: PUSH
55211: EMPTY
55212: LIST
55213: LIST
55214: PUSH
55215: LD_INT 3
55217: NEG
55218: PUSH
55219: LD_INT 0
55221: PUSH
55222: EMPTY
55223: LIST
55224: LIST
55225: PUSH
55226: LD_INT 3
55228: NEG
55229: PUSH
55230: LD_INT 1
55232: NEG
55233: PUSH
55234: EMPTY
55235: LIST
55236: LIST
55237: PUSH
55238: LD_INT 2
55240: NEG
55241: PUSH
55242: LD_INT 0
55244: PUSH
55245: EMPTY
55246: LIST
55247: LIST
55248: PUSH
55249: LD_INT 2
55251: NEG
55252: PUSH
55253: LD_INT 1
55255: PUSH
55256: EMPTY
55257: LIST
55258: LIST
55259: PUSH
55260: LD_INT 3
55262: NEG
55263: PUSH
55264: LD_INT 1
55266: PUSH
55267: EMPTY
55268: LIST
55269: LIST
55270: PUSH
55271: LD_INT 4
55273: NEG
55274: PUSH
55275: LD_INT 0
55277: PUSH
55278: EMPTY
55279: LIST
55280: LIST
55281: PUSH
55282: LD_INT 4
55284: NEG
55285: PUSH
55286: LD_INT 1
55288: NEG
55289: PUSH
55290: EMPTY
55291: LIST
55292: LIST
55293: PUSH
55294: LD_INT 4
55296: NEG
55297: PUSH
55298: LD_INT 2
55300: NEG
55301: PUSH
55302: EMPTY
55303: LIST
55304: LIST
55305: PUSH
55306: LD_INT 2
55308: NEG
55309: PUSH
55310: LD_INT 2
55312: PUSH
55313: EMPTY
55314: LIST
55315: LIST
55316: PUSH
55317: LD_INT 4
55319: NEG
55320: PUSH
55321: LD_INT 4
55323: NEG
55324: PUSH
55325: EMPTY
55326: LIST
55327: LIST
55328: PUSH
55329: LD_INT 4
55331: NEG
55332: PUSH
55333: LD_INT 5
55335: NEG
55336: PUSH
55337: EMPTY
55338: LIST
55339: LIST
55340: PUSH
55341: LD_INT 3
55343: NEG
55344: PUSH
55345: LD_INT 4
55347: NEG
55348: PUSH
55349: EMPTY
55350: LIST
55351: LIST
55352: PUSH
55353: LD_INT 3
55355: NEG
55356: PUSH
55357: LD_INT 3
55359: NEG
55360: PUSH
55361: EMPTY
55362: LIST
55363: LIST
55364: PUSH
55365: LD_INT 4
55367: NEG
55368: PUSH
55369: LD_INT 3
55371: NEG
55372: PUSH
55373: EMPTY
55374: LIST
55375: LIST
55376: PUSH
55377: LD_INT 5
55379: NEG
55380: PUSH
55381: LD_INT 4
55383: NEG
55384: PUSH
55385: EMPTY
55386: LIST
55387: LIST
55388: PUSH
55389: LD_INT 5
55391: NEG
55392: PUSH
55393: LD_INT 5
55395: NEG
55396: PUSH
55397: EMPTY
55398: LIST
55399: LIST
55400: PUSH
55401: LD_INT 3
55403: NEG
55404: PUSH
55405: LD_INT 5
55407: NEG
55408: PUSH
55409: EMPTY
55410: LIST
55411: LIST
55412: PUSH
55413: LD_INT 5
55415: NEG
55416: PUSH
55417: LD_INT 3
55419: NEG
55420: PUSH
55421: EMPTY
55422: LIST
55423: LIST
55424: PUSH
55425: EMPTY
55426: LIST
55427: LIST
55428: LIST
55429: LIST
55430: LIST
55431: LIST
55432: LIST
55433: LIST
55434: LIST
55435: LIST
55436: LIST
55437: LIST
55438: LIST
55439: LIST
55440: LIST
55441: LIST
55442: LIST
55443: LIST
55444: LIST
55445: LIST
55446: LIST
55447: LIST
55448: LIST
55449: LIST
55450: LIST
55451: LIST
55452: LIST
55453: LIST
55454: LIST
55455: LIST
55456: LIST
55457: LIST
55458: LIST
55459: LIST
55460: LIST
55461: LIST
55462: LIST
55463: LIST
55464: LIST
55465: LIST
55466: LIST
55467: LIST
55468: LIST
55469: LIST
55470: LIST
55471: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
55472: LD_ADDR_VAR 0 30
55476: PUSH
55477: LD_INT 4
55479: PUSH
55480: LD_INT 4
55482: PUSH
55483: EMPTY
55484: LIST
55485: LIST
55486: PUSH
55487: LD_INT 4
55489: PUSH
55490: LD_INT 3
55492: PUSH
55493: EMPTY
55494: LIST
55495: LIST
55496: PUSH
55497: LD_INT 5
55499: PUSH
55500: LD_INT 4
55502: PUSH
55503: EMPTY
55504: LIST
55505: LIST
55506: PUSH
55507: LD_INT 5
55509: PUSH
55510: LD_INT 5
55512: PUSH
55513: EMPTY
55514: LIST
55515: LIST
55516: PUSH
55517: LD_INT 4
55519: PUSH
55520: LD_INT 5
55522: PUSH
55523: EMPTY
55524: LIST
55525: LIST
55526: PUSH
55527: LD_INT 3
55529: PUSH
55530: LD_INT 4
55532: PUSH
55533: EMPTY
55534: LIST
55535: LIST
55536: PUSH
55537: LD_INT 3
55539: PUSH
55540: LD_INT 3
55542: PUSH
55543: EMPTY
55544: LIST
55545: LIST
55546: PUSH
55547: LD_INT 5
55549: PUSH
55550: LD_INT 3
55552: PUSH
55553: EMPTY
55554: LIST
55555: LIST
55556: PUSH
55557: LD_INT 3
55559: PUSH
55560: LD_INT 5
55562: PUSH
55563: EMPTY
55564: LIST
55565: LIST
55566: PUSH
55567: LD_INT 0
55569: PUSH
55570: LD_INT 3
55572: PUSH
55573: EMPTY
55574: LIST
55575: LIST
55576: PUSH
55577: LD_INT 0
55579: PUSH
55580: LD_INT 2
55582: PUSH
55583: EMPTY
55584: LIST
55585: LIST
55586: PUSH
55587: LD_INT 1
55589: PUSH
55590: LD_INT 3
55592: PUSH
55593: EMPTY
55594: LIST
55595: LIST
55596: PUSH
55597: LD_INT 1
55599: PUSH
55600: LD_INT 4
55602: PUSH
55603: EMPTY
55604: LIST
55605: LIST
55606: PUSH
55607: LD_INT 0
55609: PUSH
55610: LD_INT 4
55612: PUSH
55613: EMPTY
55614: LIST
55615: LIST
55616: PUSH
55617: LD_INT 1
55619: NEG
55620: PUSH
55621: LD_INT 3
55623: PUSH
55624: EMPTY
55625: LIST
55626: LIST
55627: PUSH
55628: LD_INT 1
55630: NEG
55631: PUSH
55632: LD_INT 2
55634: PUSH
55635: EMPTY
55636: LIST
55637: LIST
55638: PUSH
55639: LD_INT 2
55641: PUSH
55642: LD_INT 4
55644: PUSH
55645: EMPTY
55646: LIST
55647: LIST
55648: PUSH
55649: LD_INT 2
55651: NEG
55652: PUSH
55653: LD_INT 2
55655: PUSH
55656: EMPTY
55657: LIST
55658: LIST
55659: PUSH
55660: LD_INT 4
55662: NEG
55663: PUSH
55664: LD_INT 0
55666: PUSH
55667: EMPTY
55668: LIST
55669: LIST
55670: PUSH
55671: LD_INT 4
55673: NEG
55674: PUSH
55675: LD_INT 1
55677: NEG
55678: PUSH
55679: EMPTY
55680: LIST
55681: LIST
55682: PUSH
55683: LD_INT 3
55685: NEG
55686: PUSH
55687: LD_INT 0
55689: PUSH
55690: EMPTY
55691: LIST
55692: LIST
55693: PUSH
55694: LD_INT 3
55696: NEG
55697: PUSH
55698: LD_INT 1
55700: PUSH
55701: EMPTY
55702: LIST
55703: LIST
55704: PUSH
55705: LD_INT 4
55707: NEG
55708: PUSH
55709: LD_INT 1
55711: PUSH
55712: EMPTY
55713: LIST
55714: LIST
55715: PUSH
55716: LD_INT 5
55718: NEG
55719: PUSH
55720: LD_INT 0
55722: PUSH
55723: EMPTY
55724: LIST
55725: LIST
55726: PUSH
55727: LD_INT 5
55729: NEG
55730: PUSH
55731: LD_INT 1
55733: NEG
55734: PUSH
55735: EMPTY
55736: LIST
55737: LIST
55738: PUSH
55739: LD_INT 5
55741: NEG
55742: PUSH
55743: LD_INT 2
55745: NEG
55746: PUSH
55747: EMPTY
55748: LIST
55749: LIST
55750: PUSH
55751: LD_INT 3
55753: NEG
55754: PUSH
55755: LD_INT 2
55757: PUSH
55758: EMPTY
55759: LIST
55760: LIST
55761: PUSH
55762: LD_INT 3
55764: NEG
55765: PUSH
55766: LD_INT 3
55768: NEG
55769: PUSH
55770: EMPTY
55771: LIST
55772: LIST
55773: PUSH
55774: LD_INT 3
55776: NEG
55777: PUSH
55778: LD_INT 4
55780: NEG
55781: PUSH
55782: EMPTY
55783: LIST
55784: LIST
55785: PUSH
55786: LD_INT 2
55788: NEG
55789: PUSH
55790: LD_INT 3
55792: NEG
55793: PUSH
55794: EMPTY
55795: LIST
55796: LIST
55797: PUSH
55798: LD_INT 2
55800: NEG
55801: PUSH
55802: LD_INT 2
55804: NEG
55805: PUSH
55806: EMPTY
55807: LIST
55808: LIST
55809: PUSH
55810: LD_INT 3
55812: NEG
55813: PUSH
55814: LD_INT 2
55816: NEG
55817: PUSH
55818: EMPTY
55819: LIST
55820: LIST
55821: PUSH
55822: LD_INT 4
55824: NEG
55825: PUSH
55826: LD_INT 3
55828: NEG
55829: PUSH
55830: EMPTY
55831: LIST
55832: LIST
55833: PUSH
55834: LD_INT 4
55836: NEG
55837: PUSH
55838: LD_INT 4
55840: NEG
55841: PUSH
55842: EMPTY
55843: LIST
55844: LIST
55845: PUSH
55846: LD_INT 2
55848: NEG
55849: PUSH
55850: LD_INT 4
55852: NEG
55853: PUSH
55854: EMPTY
55855: LIST
55856: LIST
55857: PUSH
55858: LD_INT 4
55860: NEG
55861: PUSH
55862: LD_INT 2
55864: NEG
55865: PUSH
55866: EMPTY
55867: LIST
55868: LIST
55869: PUSH
55870: LD_INT 0
55872: PUSH
55873: LD_INT 4
55875: NEG
55876: PUSH
55877: EMPTY
55878: LIST
55879: LIST
55880: PUSH
55881: LD_INT 0
55883: PUSH
55884: LD_INT 5
55886: NEG
55887: PUSH
55888: EMPTY
55889: LIST
55890: LIST
55891: PUSH
55892: LD_INT 1
55894: PUSH
55895: LD_INT 4
55897: NEG
55898: PUSH
55899: EMPTY
55900: LIST
55901: LIST
55902: PUSH
55903: LD_INT 1
55905: PUSH
55906: LD_INT 3
55908: NEG
55909: PUSH
55910: EMPTY
55911: LIST
55912: LIST
55913: PUSH
55914: LD_INT 0
55916: PUSH
55917: LD_INT 3
55919: NEG
55920: PUSH
55921: EMPTY
55922: LIST
55923: LIST
55924: PUSH
55925: LD_INT 1
55927: NEG
55928: PUSH
55929: LD_INT 4
55931: NEG
55932: PUSH
55933: EMPTY
55934: LIST
55935: LIST
55936: PUSH
55937: LD_INT 1
55939: NEG
55940: PUSH
55941: LD_INT 5
55943: NEG
55944: PUSH
55945: EMPTY
55946: LIST
55947: LIST
55948: PUSH
55949: LD_INT 2
55951: PUSH
55952: LD_INT 3
55954: NEG
55955: PUSH
55956: EMPTY
55957: LIST
55958: LIST
55959: PUSH
55960: LD_INT 2
55962: NEG
55963: PUSH
55964: LD_INT 5
55966: NEG
55967: PUSH
55968: EMPTY
55969: LIST
55970: LIST
55971: PUSH
55972: EMPTY
55973: LIST
55974: LIST
55975: LIST
55976: LIST
55977: LIST
55978: LIST
55979: LIST
55980: LIST
55981: LIST
55982: LIST
55983: LIST
55984: LIST
55985: LIST
55986: LIST
55987: LIST
55988: LIST
55989: LIST
55990: LIST
55991: LIST
55992: LIST
55993: LIST
55994: LIST
55995: LIST
55996: LIST
55997: LIST
55998: LIST
55999: LIST
56000: LIST
56001: LIST
56002: LIST
56003: LIST
56004: LIST
56005: LIST
56006: LIST
56007: LIST
56008: LIST
56009: LIST
56010: LIST
56011: LIST
56012: LIST
56013: LIST
56014: LIST
56015: LIST
56016: LIST
56017: LIST
56018: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
56019: LD_ADDR_VAR 0 31
56023: PUSH
56024: LD_INT 0
56026: PUSH
56027: LD_INT 4
56029: PUSH
56030: EMPTY
56031: LIST
56032: LIST
56033: PUSH
56034: LD_INT 0
56036: PUSH
56037: LD_INT 3
56039: PUSH
56040: EMPTY
56041: LIST
56042: LIST
56043: PUSH
56044: LD_INT 1
56046: PUSH
56047: LD_INT 4
56049: PUSH
56050: EMPTY
56051: LIST
56052: LIST
56053: PUSH
56054: LD_INT 1
56056: PUSH
56057: LD_INT 5
56059: PUSH
56060: EMPTY
56061: LIST
56062: LIST
56063: PUSH
56064: LD_INT 0
56066: PUSH
56067: LD_INT 5
56069: PUSH
56070: EMPTY
56071: LIST
56072: LIST
56073: PUSH
56074: LD_INT 1
56076: NEG
56077: PUSH
56078: LD_INT 4
56080: PUSH
56081: EMPTY
56082: LIST
56083: LIST
56084: PUSH
56085: LD_INT 1
56087: NEG
56088: PUSH
56089: LD_INT 3
56091: PUSH
56092: EMPTY
56093: LIST
56094: LIST
56095: PUSH
56096: LD_INT 2
56098: PUSH
56099: LD_INT 5
56101: PUSH
56102: EMPTY
56103: LIST
56104: LIST
56105: PUSH
56106: LD_INT 2
56108: NEG
56109: PUSH
56110: LD_INT 3
56112: PUSH
56113: EMPTY
56114: LIST
56115: LIST
56116: PUSH
56117: LD_INT 3
56119: NEG
56120: PUSH
56121: LD_INT 0
56123: PUSH
56124: EMPTY
56125: LIST
56126: LIST
56127: PUSH
56128: LD_INT 3
56130: NEG
56131: PUSH
56132: LD_INT 1
56134: NEG
56135: PUSH
56136: EMPTY
56137: LIST
56138: LIST
56139: PUSH
56140: LD_INT 2
56142: NEG
56143: PUSH
56144: LD_INT 0
56146: PUSH
56147: EMPTY
56148: LIST
56149: LIST
56150: PUSH
56151: LD_INT 2
56153: NEG
56154: PUSH
56155: LD_INT 1
56157: PUSH
56158: EMPTY
56159: LIST
56160: LIST
56161: PUSH
56162: LD_INT 3
56164: NEG
56165: PUSH
56166: LD_INT 1
56168: PUSH
56169: EMPTY
56170: LIST
56171: LIST
56172: PUSH
56173: LD_INT 4
56175: NEG
56176: PUSH
56177: LD_INT 0
56179: PUSH
56180: EMPTY
56181: LIST
56182: LIST
56183: PUSH
56184: LD_INT 4
56186: NEG
56187: PUSH
56188: LD_INT 1
56190: NEG
56191: PUSH
56192: EMPTY
56193: LIST
56194: LIST
56195: PUSH
56196: LD_INT 4
56198: NEG
56199: PUSH
56200: LD_INT 2
56202: NEG
56203: PUSH
56204: EMPTY
56205: LIST
56206: LIST
56207: PUSH
56208: LD_INT 2
56210: NEG
56211: PUSH
56212: LD_INT 2
56214: PUSH
56215: EMPTY
56216: LIST
56217: LIST
56218: PUSH
56219: LD_INT 4
56221: NEG
56222: PUSH
56223: LD_INT 4
56225: NEG
56226: PUSH
56227: EMPTY
56228: LIST
56229: LIST
56230: PUSH
56231: LD_INT 4
56233: NEG
56234: PUSH
56235: LD_INT 5
56237: NEG
56238: PUSH
56239: EMPTY
56240: LIST
56241: LIST
56242: PUSH
56243: LD_INT 3
56245: NEG
56246: PUSH
56247: LD_INT 4
56249: NEG
56250: PUSH
56251: EMPTY
56252: LIST
56253: LIST
56254: PUSH
56255: LD_INT 3
56257: NEG
56258: PUSH
56259: LD_INT 3
56261: NEG
56262: PUSH
56263: EMPTY
56264: LIST
56265: LIST
56266: PUSH
56267: LD_INT 4
56269: NEG
56270: PUSH
56271: LD_INT 3
56273: NEG
56274: PUSH
56275: EMPTY
56276: LIST
56277: LIST
56278: PUSH
56279: LD_INT 5
56281: NEG
56282: PUSH
56283: LD_INT 4
56285: NEG
56286: PUSH
56287: EMPTY
56288: LIST
56289: LIST
56290: PUSH
56291: LD_INT 5
56293: NEG
56294: PUSH
56295: LD_INT 5
56297: NEG
56298: PUSH
56299: EMPTY
56300: LIST
56301: LIST
56302: PUSH
56303: LD_INT 3
56305: NEG
56306: PUSH
56307: LD_INT 5
56309: NEG
56310: PUSH
56311: EMPTY
56312: LIST
56313: LIST
56314: PUSH
56315: LD_INT 5
56317: NEG
56318: PUSH
56319: LD_INT 3
56321: NEG
56322: PUSH
56323: EMPTY
56324: LIST
56325: LIST
56326: PUSH
56327: LD_INT 0
56329: PUSH
56330: LD_INT 3
56332: NEG
56333: PUSH
56334: EMPTY
56335: LIST
56336: LIST
56337: PUSH
56338: LD_INT 0
56340: PUSH
56341: LD_INT 4
56343: NEG
56344: PUSH
56345: EMPTY
56346: LIST
56347: LIST
56348: PUSH
56349: LD_INT 1
56351: PUSH
56352: LD_INT 3
56354: NEG
56355: PUSH
56356: EMPTY
56357: LIST
56358: LIST
56359: PUSH
56360: LD_INT 1
56362: PUSH
56363: LD_INT 2
56365: NEG
56366: PUSH
56367: EMPTY
56368: LIST
56369: LIST
56370: PUSH
56371: LD_INT 0
56373: PUSH
56374: LD_INT 2
56376: NEG
56377: PUSH
56378: EMPTY
56379: LIST
56380: LIST
56381: PUSH
56382: LD_INT 1
56384: NEG
56385: PUSH
56386: LD_INT 3
56388: NEG
56389: PUSH
56390: EMPTY
56391: LIST
56392: LIST
56393: PUSH
56394: LD_INT 1
56396: NEG
56397: PUSH
56398: LD_INT 4
56400: NEG
56401: PUSH
56402: EMPTY
56403: LIST
56404: LIST
56405: PUSH
56406: LD_INT 2
56408: PUSH
56409: LD_INT 2
56411: NEG
56412: PUSH
56413: EMPTY
56414: LIST
56415: LIST
56416: PUSH
56417: LD_INT 2
56419: NEG
56420: PUSH
56421: LD_INT 4
56423: NEG
56424: PUSH
56425: EMPTY
56426: LIST
56427: LIST
56428: PUSH
56429: LD_INT 4
56431: PUSH
56432: LD_INT 0
56434: PUSH
56435: EMPTY
56436: LIST
56437: LIST
56438: PUSH
56439: LD_INT 4
56441: PUSH
56442: LD_INT 1
56444: NEG
56445: PUSH
56446: EMPTY
56447: LIST
56448: LIST
56449: PUSH
56450: LD_INT 5
56452: PUSH
56453: LD_INT 0
56455: PUSH
56456: EMPTY
56457: LIST
56458: LIST
56459: PUSH
56460: LD_INT 5
56462: PUSH
56463: LD_INT 1
56465: PUSH
56466: EMPTY
56467: LIST
56468: LIST
56469: PUSH
56470: LD_INT 4
56472: PUSH
56473: LD_INT 1
56475: PUSH
56476: EMPTY
56477: LIST
56478: LIST
56479: PUSH
56480: LD_INT 3
56482: PUSH
56483: LD_INT 0
56485: PUSH
56486: EMPTY
56487: LIST
56488: LIST
56489: PUSH
56490: LD_INT 3
56492: PUSH
56493: LD_INT 1
56495: NEG
56496: PUSH
56497: EMPTY
56498: LIST
56499: LIST
56500: PUSH
56501: LD_INT 3
56503: PUSH
56504: LD_INT 2
56506: NEG
56507: PUSH
56508: EMPTY
56509: LIST
56510: LIST
56511: PUSH
56512: LD_INT 5
56514: PUSH
56515: LD_INT 2
56517: PUSH
56518: EMPTY
56519: LIST
56520: LIST
56521: PUSH
56522: EMPTY
56523: LIST
56524: LIST
56525: LIST
56526: LIST
56527: LIST
56528: LIST
56529: LIST
56530: LIST
56531: LIST
56532: LIST
56533: LIST
56534: LIST
56535: LIST
56536: LIST
56537: LIST
56538: LIST
56539: LIST
56540: LIST
56541: LIST
56542: LIST
56543: LIST
56544: LIST
56545: LIST
56546: LIST
56547: LIST
56548: LIST
56549: LIST
56550: LIST
56551: LIST
56552: LIST
56553: LIST
56554: LIST
56555: LIST
56556: LIST
56557: LIST
56558: LIST
56559: LIST
56560: LIST
56561: LIST
56562: LIST
56563: LIST
56564: LIST
56565: LIST
56566: LIST
56567: LIST
56568: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
56569: LD_ADDR_VAR 0 32
56573: PUSH
56574: LD_INT 4
56576: NEG
56577: PUSH
56578: LD_INT 0
56580: PUSH
56581: EMPTY
56582: LIST
56583: LIST
56584: PUSH
56585: LD_INT 4
56587: NEG
56588: PUSH
56589: LD_INT 1
56591: NEG
56592: PUSH
56593: EMPTY
56594: LIST
56595: LIST
56596: PUSH
56597: LD_INT 3
56599: NEG
56600: PUSH
56601: LD_INT 0
56603: PUSH
56604: EMPTY
56605: LIST
56606: LIST
56607: PUSH
56608: LD_INT 3
56610: NEG
56611: PUSH
56612: LD_INT 1
56614: PUSH
56615: EMPTY
56616: LIST
56617: LIST
56618: PUSH
56619: LD_INT 4
56621: NEG
56622: PUSH
56623: LD_INT 1
56625: PUSH
56626: EMPTY
56627: LIST
56628: LIST
56629: PUSH
56630: LD_INT 5
56632: NEG
56633: PUSH
56634: LD_INT 0
56636: PUSH
56637: EMPTY
56638: LIST
56639: LIST
56640: PUSH
56641: LD_INT 5
56643: NEG
56644: PUSH
56645: LD_INT 1
56647: NEG
56648: PUSH
56649: EMPTY
56650: LIST
56651: LIST
56652: PUSH
56653: LD_INT 5
56655: NEG
56656: PUSH
56657: LD_INT 2
56659: NEG
56660: PUSH
56661: EMPTY
56662: LIST
56663: LIST
56664: PUSH
56665: LD_INT 3
56667: NEG
56668: PUSH
56669: LD_INT 2
56671: PUSH
56672: EMPTY
56673: LIST
56674: LIST
56675: PUSH
56676: LD_INT 3
56678: NEG
56679: PUSH
56680: LD_INT 3
56682: NEG
56683: PUSH
56684: EMPTY
56685: LIST
56686: LIST
56687: PUSH
56688: LD_INT 3
56690: NEG
56691: PUSH
56692: LD_INT 4
56694: NEG
56695: PUSH
56696: EMPTY
56697: LIST
56698: LIST
56699: PUSH
56700: LD_INT 2
56702: NEG
56703: PUSH
56704: LD_INT 3
56706: NEG
56707: PUSH
56708: EMPTY
56709: LIST
56710: LIST
56711: PUSH
56712: LD_INT 2
56714: NEG
56715: PUSH
56716: LD_INT 2
56718: NEG
56719: PUSH
56720: EMPTY
56721: LIST
56722: LIST
56723: PUSH
56724: LD_INT 3
56726: NEG
56727: PUSH
56728: LD_INT 2
56730: NEG
56731: PUSH
56732: EMPTY
56733: LIST
56734: LIST
56735: PUSH
56736: LD_INT 4
56738: NEG
56739: PUSH
56740: LD_INT 3
56742: NEG
56743: PUSH
56744: EMPTY
56745: LIST
56746: LIST
56747: PUSH
56748: LD_INT 4
56750: NEG
56751: PUSH
56752: LD_INT 4
56754: NEG
56755: PUSH
56756: EMPTY
56757: LIST
56758: LIST
56759: PUSH
56760: LD_INT 2
56762: NEG
56763: PUSH
56764: LD_INT 4
56766: NEG
56767: PUSH
56768: EMPTY
56769: LIST
56770: LIST
56771: PUSH
56772: LD_INT 4
56774: NEG
56775: PUSH
56776: LD_INT 2
56778: NEG
56779: PUSH
56780: EMPTY
56781: LIST
56782: LIST
56783: PUSH
56784: LD_INT 0
56786: PUSH
56787: LD_INT 4
56789: NEG
56790: PUSH
56791: EMPTY
56792: LIST
56793: LIST
56794: PUSH
56795: LD_INT 0
56797: PUSH
56798: LD_INT 5
56800: NEG
56801: PUSH
56802: EMPTY
56803: LIST
56804: LIST
56805: PUSH
56806: LD_INT 1
56808: PUSH
56809: LD_INT 4
56811: NEG
56812: PUSH
56813: EMPTY
56814: LIST
56815: LIST
56816: PUSH
56817: LD_INT 1
56819: PUSH
56820: LD_INT 3
56822: NEG
56823: PUSH
56824: EMPTY
56825: LIST
56826: LIST
56827: PUSH
56828: LD_INT 0
56830: PUSH
56831: LD_INT 3
56833: NEG
56834: PUSH
56835: EMPTY
56836: LIST
56837: LIST
56838: PUSH
56839: LD_INT 1
56841: NEG
56842: PUSH
56843: LD_INT 4
56845: NEG
56846: PUSH
56847: EMPTY
56848: LIST
56849: LIST
56850: PUSH
56851: LD_INT 1
56853: NEG
56854: PUSH
56855: LD_INT 5
56857: NEG
56858: PUSH
56859: EMPTY
56860: LIST
56861: LIST
56862: PUSH
56863: LD_INT 2
56865: PUSH
56866: LD_INT 3
56868: NEG
56869: PUSH
56870: EMPTY
56871: LIST
56872: LIST
56873: PUSH
56874: LD_INT 2
56876: NEG
56877: PUSH
56878: LD_INT 5
56880: NEG
56881: PUSH
56882: EMPTY
56883: LIST
56884: LIST
56885: PUSH
56886: LD_INT 3
56888: PUSH
56889: LD_INT 0
56891: PUSH
56892: EMPTY
56893: LIST
56894: LIST
56895: PUSH
56896: LD_INT 3
56898: PUSH
56899: LD_INT 1
56901: NEG
56902: PUSH
56903: EMPTY
56904: LIST
56905: LIST
56906: PUSH
56907: LD_INT 4
56909: PUSH
56910: LD_INT 0
56912: PUSH
56913: EMPTY
56914: LIST
56915: LIST
56916: PUSH
56917: LD_INT 4
56919: PUSH
56920: LD_INT 1
56922: PUSH
56923: EMPTY
56924: LIST
56925: LIST
56926: PUSH
56927: LD_INT 3
56929: PUSH
56930: LD_INT 1
56932: PUSH
56933: EMPTY
56934: LIST
56935: LIST
56936: PUSH
56937: LD_INT 2
56939: PUSH
56940: LD_INT 0
56942: PUSH
56943: EMPTY
56944: LIST
56945: LIST
56946: PUSH
56947: LD_INT 2
56949: PUSH
56950: LD_INT 1
56952: NEG
56953: PUSH
56954: EMPTY
56955: LIST
56956: LIST
56957: PUSH
56958: LD_INT 2
56960: PUSH
56961: LD_INT 2
56963: NEG
56964: PUSH
56965: EMPTY
56966: LIST
56967: LIST
56968: PUSH
56969: LD_INT 4
56971: PUSH
56972: LD_INT 2
56974: PUSH
56975: EMPTY
56976: LIST
56977: LIST
56978: PUSH
56979: LD_INT 4
56981: PUSH
56982: LD_INT 4
56984: PUSH
56985: EMPTY
56986: LIST
56987: LIST
56988: PUSH
56989: LD_INT 4
56991: PUSH
56992: LD_INT 3
56994: PUSH
56995: EMPTY
56996: LIST
56997: LIST
56998: PUSH
56999: LD_INT 5
57001: PUSH
57002: LD_INT 4
57004: PUSH
57005: EMPTY
57006: LIST
57007: LIST
57008: PUSH
57009: LD_INT 5
57011: PUSH
57012: LD_INT 5
57014: PUSH
57015: EMPTY
57016: LIST
57017: LIST
57018: PUSH
57019: LD_INT 4
57021: PUSH
57022: LD_INT 5
57024: PUSH
57025: EMPTY
57026: LIST
57027: LIST
57028: PUSH
57029: LD_INT 3
57031: PUSH
57032: LD_INT 4
57034: PUSH
57035: EMPTY
57036: LIST
57037: LIST
57038: PUSH
57039: LD_INT 3
57041: PUSH
57042: LD_INT 3
57044: PUSH
57045: EMPTY
57046: LIST
57047: LIST
57048: PUSH
57049: LD_INT 5
57051: PUSH
57052: LD_INT 3
57054: PUSH
57055: EMPTY
57056: LIST
57057: LIST
57058: PUSH
57059: LD_INT 3
57061: PUSH
57062: LD_INT 5
57064: PUSH
57065: EMPTY
57066: LIST
57067: LIST
57068: PUSH
57069: EMPTY
57070: LIST
57071: LIST
57072: LIST
57073: LIST
57074: LIST
57075: LIST
57076: LIST
57077: LIST
57078: LIST
57079: LIST
57080: LIST
57081: LIST
57082: LIST
57083: LIST
57084: LIST
57085: LIST
57086: LIST
57087: LIST
57088: LIST
57089: LIST
57090: LIST
57091: LIST
57092: LIST
57093: LIST
57094: LIST
57095: LIST
57096: LIST
57097: LIST
57098: LIST
57099: LIST
57100: LIST
57101: LIST
57102: LIST
57103: LIST
57104: LIST
57105: LIST
57106: LIST
57107: LIST
57108: LIST
57109: LIST
57110: LIST
57111: LIST
57112: LIST
57113: LIST
57114: LIST
57115: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
57116: LD_ADDR_VAR 0 33
57120: PUSH
57121: LD_INT 4
57123: NEG
57124: PUSH
57125: LD_INT 4
57127: NEG
57128: PUSH
57129: EMPTY
57130: LIST
57131: LIST
57132: PUSH
57133: LD_INT 4
57135: NEG
57136: PUSH
57137: LD_INT 5
57139: NEG
57140: PUSH
57141: EMPTY
57142: LIST
57143: LIST
57144: PUSH
57145: LD_INT 3
57147: NEG
57148: PUSH
57149: LD_INT 4
57151: NEG
57152: PUSH
57153: EMPTY
57154: LIST
57155: LIST
57156: PUSH
57157: LD_INT 3
57159: NEG
57160: PUSH
57161: LD_INT 3
57163: NEG
57164: PUSH
57165: EMPTY
57166: LIST
57167: LIST
57168: PUSH
57169: LD_INT 4
57171: NEG
57172: PUSH
57173: LD_INT 3
57175: NEG
57176: PUSH
57177: EMPTY
57178: LIST
57179: LIST
57180: PUSH
57181: LD_INT 5
57183: NEG
57184: PUSH
57185: LD_INT 4
57187: NEG
57188: PUSH
57189: EMPTY
57190: LIST
57191: LIST
57192: PUSH
57193: LD_INT 5
57195: NEG
57196: PUSH
57197: LD_INT 5
57199: NEG
57200: PUSH
57201: EMPTY
57202: LIST
57203: LIST
57204: PUSH
57205: LD_INT 3
57207: NEG
57208: PUSH
57209: LD_INT 5
57211: NEG
57212: PUSH
57213: EMPTY
57214: LIST
57215: LIST
57216: PUSH
57217: LD_INT 5
57219: NEG
57220: PUSH
57221: LD_INT 3
57223: NEG
57224: PUSH
57225: EMPTY
57226: LIST
57227: LIST
57228: PUSH
57229: LD_INT 0
57231: PUSH
57232: LD_INT 3
57234: NEG
57235: PUSH
57236: EMPTY
57237: LIST
57238: LIST
57239: PUSH
57240: LD_INT 0
57242: PUSH
57243: LD_INT 4
57245: NEG
57246: PUSH
57247: EMPTY
57248: LIST
57249: LIST
57250: PUSH
57251: LD_INT 1
57253: PUSH
57254: LD_INT 3
57256: NEG
57257: PUSH
57258: EMPTY
57259: LIST
57260: LIST
57261: PUSH
57262: LD_INT 1
57264: PUSH
57265: LD_INT 2
57267: NEG
57268: PUSH
57269: EMPTY
57270: LIST
57271: LIST
57272: PUSH
57273: LD_INT 0
57275: PUSH
57276: LD_INT 2
57278: NEG
57279: PUSH
57280: EMPTY
57281: LIST
57282: LIST
57283: PUSH
57284: LD_INT 1
57286: NEG
57287: PUSH
57288: LD_INT 3
57290: NEG
57291: PUSH
57292: EMPTY
57293: LIST
57294: LIST
57295: PUSH
57296: LD_INT 1
57298: NEG
57299: PUSH
57300: LD_INT 4
57302: NEG
57303: PUSH
57304: EMPTY
57305: LIST
57306: LIST
57307: PUSH
57308: LD_INT 2
57310: PUSH
57311: LD_INT 2
57313: NEG
57314: PUSH
57315: EMPTY
57316: LIST
57317: LIST
57318: PUSH
57319: LD_INT 2
57321: NEG
57322: PUSH
57323: LD_INT 4
57325: NEG
57326: PUSH
57327: EMPTY
57328: LIST
57329: LIST
57330: PUSH
57331: LD_INT 4
57333: PUSH
57334: LD_INT 0
57336: PUSH
57337: EMPTY
57338: LIST
57339: LIST
57340: PUSH
57341: LD_INT 4
57343: PUSH
57344: LD_INT 1
57346: NEG
57347: PUSH
57348: EMPTY
57349: LIST
57350: LIST
57351: PUSH
57352: LD_INT 5
57354: PUSH
57355: LD_INT 0
57357: PUSH
57358: EMPTY
57359: LIST
57360: LIST
57361: PUSH
57362: LD_INT 5
57364: PUSH
57365: LD_INT 1
57367: PUSH
57368: EMPTY
57369: LIST
57370: LIST
57371: PUSH
57372: LD_INT 4
57374: PUSH
57375: LD_INT 1
57377: PUSH
57378: EMPTY
57379: LIST
57380: LIST
57381: PUSH
57382: LD_INT 3
57384: PUSH
57385: LD_INT 0
57387: PUSH
57388: EMPTY
57389: LIST
57390: LIST
57391: PUSH
57392: LD_INT 3
57394: PUSH
57395: LD_INT 1
57397: NEG
57398: PUSH
57399: EMPTY
57400: LIST
57401: LIST
57402: PUSH
57403: LD_INT 3
57405: PUSH
57406: LD_INT 2
57408: NEG
57409: PUSH
57410: EMPTY
57411: LIST
57412: LIST
57413: PUSH
57414: LD_INT 5
57416: PUSH
57417: LD_INT 2
57419: PUSH
57420: EMPTY
57421: LIST
57422: LIST
57423: PUSH
57424: LD_INT 3
57426: PUSH
57427: LD_INT 3
57429: PUSH
57430: EMPTY
57431: LIST
57432: LIST
57433: PUSH
57434: LD_INT 3
57436: PUSH
57437: LD_INT 2
57439: PUSH
57440: EMPTY
57441: LIST
57442: LIST
57443: PUSH
57444: LD_INT 4
57446: PUSH
57447: LD_INT 3
57449: PUSH
57450: EMPTY
57451: LIST
57452: LIST
57453: PUSH
57454: LD_INT 4
57456: PUSH
57457: LD_INT 4
57459: PUSH
57460: EMPTY
57461: LIST
57462: LIST
57463: PUSH
57464: LD_INT 3
57466: PUSH
57467: LD_INT 4
57469: PUSH
57470: EMPTY
57471: LIST
57472: LIST
57473: PUSH
57474: LD_INT 2
57476: PUSH
57477: LD_INT 3
57479: PUSH
57480: EMPTY
57481: LIST
57482: LIST
57483: PUSH
57484: LD_INT 2
57486: PUSH
57487: LD_INT 2
57489: PUSH
57490: EMPTY
57491: LIST
57492: LIST
57493: PUSH
57494: LD_INT 4
57496: PUSH
57497: LD_INT 2
57499: PUSH
57500: EMPTY
57501: LIST
57502: LIST
57503: PUSH
57504: LD_INT 2
57506: PUSH
57507: LD_INT 4
57509: PUSH
57510: EMPTY
57511: LIST
57512: LIST
57513: PUSH
57514: LD_INT 0
57516: PUSH
57517: LD_INT 4
57519: PUSH
57520: EMPTY
57521: LIST
57522: LIST
57523: PUSH
57524: LD_INT 0
57526: PUSH
57527: LD_INT 3
57529: PUSH
57530: EMPTY
57531: LIST
57532: LIST
57533: PUSH
57534: LD_INT 1
57536: PUSH
57537: LD_INT 4
57539: PUSH
57540: EMPTY
57541: LIST
57542: LIST
57543: PUSH
57544: LD_INT 1
57546: PUSH
57547: LD_INT 5
57549: PUSH
57550: EMPTY
57551: LIST
57552: LIST
57553: PUSH
57554: LD_INT 0
57556: PUSH
57557: LD_INT 5
57559: PUSH
57560: EMPTY
57561: LIST
57562: LIST
57563: PUSH
57564: LD_INT 1
57566: NEG
57567: PUSH
57568: LD_INT 4
57570: PUSH
57571: EMPTY
57572: LIST
57573: LIST
57574: PUSH
57575: LD_INT 1
57577: NEG
57578: PUSH
57579: LD_INT 3
57581: PUSH
57582: EMPTY
57583: LIST
57584: LIST
57585: PUSH
57586: LD_INT 2
57588: PUSH
57589: LD_INT 5
57591: PUSH
57592: EMPTY
57593: LIST
57594: LIST
57595: PUSH
57596: LD_INT 2
57598: NEG
57599: PUSH
57600: LD_INT 3
57602: PUSH
57603: EMPTY
57604: LIST
57605: LIST
57606: PUSH
57607: EMPTY
57608: LIST
57609: LIST
57610: LIST
57611: LIST
57612: LIST
57613: LIST
57614: LIST
57615: LIST
57616: LIST
57617: LIST
57618: LIST
57619: LIST
57620: LIST
57621: LIST
57622: LIST
57623: LIST
57624: LIST
57625: LIST
57626: LIST
57627: LIST
57628: LIST
57629: LIST
57630: LIST
57631: LIST
57632: LIST
57633: LIST
57634: LIST
57635: LIST
57636: LIST
57637: LIST
57638: LIST
57639: LIST
57640: LIST
57641: LIST
57642: LIST
57643: LIST
57644: LIST
57645: LIST
57646: LIST
57647: LIST
57648: LIST
57649: LIST
57650: LIST
57651: LIST
57652: LIST
57653: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
57654: LD_ADDR_VAR 0 34
57658: PUSH
57659: LD_INT 0
57661: PUSH
57662: LD_INT 4
57664: NEG
57665: PUSH
57666: EMPTY
57667: LIST
57668: LIST
57669: PUSH
57670: LD_INT 0
57672: PUSH
57673: LD_INT 5
57675: NEG
57676: PUSH
57677: EMPTY
57678: LIST
57679: LIST
57680: PUSH
57681: LD_INT 1
57683: PUSH
57684: LD_INT 4
57686: NEG
57687: PUSH
57688: EMPTY
57689: LIST
57690: LIST
57691: PUSH
57692: LD_INT 1
57694: PUSH
57695: LD_INT 3
57697: NEG
57698: PUSH
57699: EMPTY
57700: LIST
57701: LIST
57702: PUSH
57703: LD_INT 0
57705: PUSH
57706: LD_INT 3
57708: NEG
57709: PUSH
57710: EMPTY
57711: LIST
57712: LIST
57713: PUSH
57714: LD_INT 1
57716: NEG
57717: PUSH
57718: LD_INT 4
57720: NEG
57721: PUSH
57722: EMPTY
57723: LIST
57724: LIST
57725: PUSH
57726: LD_INT 1
57728: NEG
57729: PUSH
57730: LD_INT 5
57732: NEG
57733: PUSH
57734: EMPTY
57735: LIST
57736: LIST
57737: PUSH
57738: LD_INT 2
57740: PUSH
57741: LD_INT 3
57743: NEG
57744: PUSH
57745: EMPTY
57746: LIST
57747: LIST
57748: PUSH
57749: LD_INT 2
57751: NEG
57752: PUSH
57753: LD_INT 5
57755: NEG
57756: PUSH
57757: EMPTY
57758: LIST
57759: LIST
57760: PUSH
57761: LD_INT 3
57763: PUSH
57764: LD_INT 0
57766: PUSH
57767: EMPTY
57768: LIST
57769: LIST
57770: PUSH
57771: LD_INT 3
57773: PUSH
57774: LD_INT 1
57776: NEG
57777: PUSH
57778: EMPTY
57779: LIST
57780: LIST
57781: PUSH
57782: LD_INT 4
57784: PUSH
57785: LD_INT 0
57787: PUSH
57788: EMPTY
57789: LIST
57790: LIST
57791: PUSH
57792: LD_INT 4
57794: PUSH
57795: LD_INT 1
57797: PUSH
57798: EMPTY
57799: LIST
57800: LIST
57801: PUSH
57802: LD_INT 3
57804: PUSH
57805: LD_INT 1
57807: PUSH
57808: EMPTY
57809: LIST
57810: LIST
57811: PUSH
57812: LD_INT 2
57814: PUSH
57815: LD_INT 0
57817: PUSH
57818: EMPTY
57819: LIST
57820: LIST
57821: PUSH
57822: LD_INT 2
57824: PUSH
57825: LD_INT 1
57827: NEG
57828: PUSH
57829: EMPTY
57830: LIST
57831: LIST
57832: PUSH
57833: LD_INT 2
57835: PUSH
57836: LD_INT 2
57838: NEG
57839: PUSH
57840: EMPTY
57841: LIST
57842: LIST
57843: PUSH
57844: LD_INT 4
57846: PUSH
57847: LD_INT 2
57849: PUSH
57850: EMPTY
57851: LIST
57852: LIST
57853: PUSH
57854: LD_INT 4
57856: PUSH
57857: LD_INT 4
57859: PUSH
57860: EMPTY
57861: LIST
57862: LIST
57863: PUSH
57864: LD_INT 4
57866: PUSH
57867: LD_INT 3
57869: PUSH
57870: EMPTY
57871: LIST
57872: LIST
57873: PUSH
57874: LD_INT 5
57876: PUSH
57877: LD_INT 4
57879: PUSH
57880: EMPTY
57881: LIST
57882: LIST
57883: PUSH
57884: LD_INT 5
57886: PUSH
57887: LD_INT 5
57889: PUSH
57890: EMPTY
57891: LIST
57892: LIST
57893: PUSH
57894: LD_INT 4
57896: PUSH
57897: LD_INT 5
57899: PUSH
57900: EMPTY
57901: LIST
57902: LIST
57903: PUSH
57904: LD_INT 3
57906: PUSH
57907: LD_INT 4
57909: PUSH
57910: EMPTY
57911: LIST
57912: LIST
57913: PUSH
57914: LD_INT 3
57916: PUSH
57917: LD_INT 3
57919: PUSH
57920: EMPTY
57921: LIST
57922: LIST
57923: PUSH
57924: LD_INT 5
57926: PUSH
57927: LD_INT 3
57929: PUSH
57930: EMPTY
57931: LIST
57932: LIST
57933: PUSH
57934: LD_INT 3
57936: PUSH
57937: LD_INT 5
57939: PUSH
57940: EMPTY
57941: LIST
57942: LIST
57943: PUSH
57944: LD_INT 0
57946: PUSH
57947: LD_INT 3
57949: PUSH
57950: EMPTY
57951: LIST
57952: LIST
57953: PUSH
57954: LD_INT 0
57956: PUSH
57957: LD_INT 2
57959: PUSH
57960: EMPTY
57961: LIST
57962: LIST
57963: PUSH
57964: LD_INT 1
57966: PUSH
57967: LD_INT 3
57969: PUSH
57970: EMPTY
57971: LIST
57972: LIST
57973: PUSH
57974: LD_INT 1
57976: PUSH
57977: LD_INT 4
57979: PUSH
57980: EMPTY
57981: LIST
57982: LIST
57983: PUSH
57984: LD_INT 0
57986: PUSH
57987: LD_INT 4
57989: PUSH
57990: EMPTY
57991: LIST
57992: LIST
57993: PUSH
57994: LD_INT 1
57996: NEG
57997: PUSH
57998: LD_INT 3
58000: PUSH
58001: EMPTY
58002: LIST
58003: LIST
58004: PUSH
58005: LD_INT 1
58007: NEG
58008: PUSH
58009: LD_INT 2
58011: PUSH
58012: EMPTY
58013: LIST
58014: LIST
58015: PUSH
58016: LD_INT 2
58018: PUSH
58019: LD_INT 4
58021: PUSH
58022: EMPTY
58023: LIST
58024: LIST
58025: PUSH
58026: LD_INT 2
58028: NEG
58029: PUSH
58030: LD_INT 2
58032: PUSH
58033: EMPTY
58034: LIST
58035: LIST
58036: PUSH
58037: LD_INT 4
58039: NEG
58040: PUSH
58041: LD_INT 0
58043: PUSH
58044: EMPTY
58045: LIST
58046: LIST
58047: PUSH
58048: LD_INT 4
58050: NEG
58051: PUSH
58052: LD_INT 1
58054: NEG
58055: PUSH
58056: EMPTY
58057: LIST
58058: LIST
58059: PUSH
58060: LD_INT 3
58062: NEG
58063: PUSH
58064: LD_INT 0
58066: PUSH
58067: EMPTY
58068: LIST
58069: LIST
58070: PUSH
58071: LD_INT 3
58073: NEG
58074: PUSH
58075: LD_INT 1
58077: PUSH
58078: EMPTY
58079: LIST
58080: LIST
58081: PUSH
58082: LD_INT 4
58084: NEG
58085: PUSH
58086: LD_INT 1
58088: PUSH
58089: EMPTY
58090: LIST
58091: LIST
58092: PUSH
58093: LD_INT 5
58095: NEG
58096: PUSH
58097: LD_INT 0
58099: PUSH
58100: EMPTY
58101: LIST
58102: LIST
58103: PUSH
58104: LD_INT 5
58106: NEG
58107: PUSH
58108: LD_INT 1
58110: NEG
58111: PUSH
58112: EMPTY
58113: LIST
58114: LIST
58115: PUSH
58116: LD_INT 5
58118: NEG
58119: PUSH
58120: LD_INT 2
58122: NEG
58123: PUSH
58124: EMPTY
58125: LIST
58126: LIST
58127: PUSH
58128: LD_INT 3
58130: NEG
58131: PUSH
58132: LD_INT 2
58134: PUSH
58135: EMPTY
58136: LIST
58137: LIST
58138: PUSH
58139: EMPTY
58140: LIST
58141: LIST
58142: LIST
58143: LIST
58144: LIST
58145: LIST
58146: LIST
58147: LIST
58148: LIST
58149: LIST
58150: LIST
58151: LIST
58152: LIST
58153: LIST
58154: LIST
58155: LIST
58156: LIST
58157: LIST
58158: LIST
58159: LIST
58160: LIST
58161: LIST
58162: LIST
58163: LIST
58164: LIST
58165: LIST
58166: LIST
58167: LIST
58168: LIST
58169: LIST
58170: LIST
58171: LIST
58172: LIST
58173: LIST
58174: LIST
58175: LIST
58176: LIST
58177: LIST
58178: LIST
58179: LIST
58180: LIST
58181: LIST
58182: LIST
58183: LIST
58184: LIST
58185: ST_TO_ADDR
// end ; end ;
58186: GO 58189
58188: POP
// case btype of b_depot , b_warehouse :
58189: LD_VAR 0 1
58193: PUSH
58194: LD_INT 0
58196: DOUBLE
58197: EQUAL
58198: IFTRUE 58208
58200: LD_INT 1
58202: DOUBLE
58203: EQUAL
58204: IFTRUE 58208
58206: GO 58409
58208: POP
// case nation of nation_american :
58209: LD_VAR 0 5
58213: PUSH
58214: LD_INT 1
58216: DOUBLE
58217: EQUAL
58218: IFTRUE 58222
58220: GO 58278
58222: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
58223: LD_ADDR_VAR 0 9
58227: PUSH
58228: LD_VAR 0 11
58232: PUSH
58233: LD_VAR 0 12
58237: PUSH
58238: LD_VAR 0 13
58242: PUSH
58243: LD_VAR 0 14
58247: PUSH
58248: LD_VAR 0 15
58252: PUSH
58253: LD_VAR 0 16
58257: PUSH
58258: EMPTY
58259: LIST
58260: LIST
58261: LIST
58262: LIST
58263: LIST
58264: LIST
58265: PUSH
58266: LD_VAR 0 4
58270: PUSH
58271: LD_INT 1
58273: PLUS
58274: ARRAY
58275: ST_TO_ADDR
58276: GO 58407
58278: LD_INT 2
58280: DOUBLE
58281: EQUAL
58282: IFTRUE 58286
58284: GO 58342
58286: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
58287: LD_ADDR_VAR 0 9
58291: PUSH
58292: LD_VAR 0 17
58296: PUSH
58297: LD_VAR 0 18
58301: PUSH
58302: LD_VAR 0 19
58306: PUSH
58307: LD_VAR 0 20
58311: PUSH
58312: LD_VAR 0 21
58316: PUSH
58317: LD_VAR 0 22
58321: PUSH
58322: EMPTY
58323: LIST
58324: LIST
58325: LIST
58326: LIST
58327: LIST
58328: LIST
58329: PUSH
58330: LD_VAR 0 4
58334: PUSH
58335: LD_INT 1
58337: PLUS
58338: ARRAY
58339: ST_TO_ADDR
58340: GO 58407
58342: LD_INT 3
58344: DOUBLE
58345: EQUAL
58346: IFTRUE 58350
58348: GO 58406
58350: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
58351: LD_ADDR_VAR 0 9
58355: PUSH
58356: LD_VAR 0 23
58360: PUSH
58361: LD_VAR 0 24
58365: PUSH
58366: LD_VAR 0 25
58370: PUSH
58371: LD_VAR 0 26
58375: PUSH
58376: LD_VAR 0 27
58380: PUSH
58381: LD_VAR 0 28
58385: PUSH
58386: EMPTY
58387: LIST
58388: LIST
58389: LIST
58390: LIST
58391: LIST
58392: LIST
58393: PUSH
58394: LD_VAR 0 4
58398: PUSH
58399: LD_INT 1
58401: PLUS
58402: ARRAY
58403: ST_TO_ADDR
58404: GO 58407
58406: POP
58407: GO 58962
58409: LD_INT 2
58411: DOUBLE
58412: EQUAL
58413: IFTRUE 58423
58415: LD_INT 3
58417: DOUBLE
58418: EQUAL
58419: IFTRUE 58423
58421: GO 58479
58423: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
58424: LD_ADDR_VAR 0 9
58428: PUSH
58429: LD_VAR 0 29
58433: PUSH
58434: LD_VAR 0 30
58438: PUSH
58439: LD_VAR 0 31
58443: PUSH
58444: LD_VAR 0 32
58448: PUSH
58449: LD_VAR 0 33
58453: PUSH
58454: LD_VAR 0 34
58458: PUSH
58459: EMPTY
58460: LIST
58461: LIST
58462: LIST
58463: LIST
58464: LIST
58465: LIST
58466: PUSH
58467: LD_VAR 0 4
58471: PUSH
58472: LD_INT 1
58474: PLUS
58475: ARRAY
58476: ST_TO_ADDR
58477: GO 58962
58479: LD_INT 16
58481: DOUBLE
58482: EQUAL
58483: IFTRUE 58541
58485: LD_INT 17
58487: DOUBLE
58488: EQUAL
58489: IFTRUE 58541
58491: LD_INT 18
58493: DOUBLE
58494: EQUAL
58495: IFTRUE 58541
58497: LD_INT 19
58499: DOUBLE
58500: EQUAL
58501: IFTRUE 58541
58503: LD_INT 22
58505: DOUBLE
58506: EQUAL
58507: IFTRUE 58541
58509: LD_INT 20
58511: DOUBLE
58512: EQUAL
58513: IFTRUE 58541
58515: LD_INT 21
58517: DOUBLE
58518: EQUAL
58519: IFTRUE 58541
58521: LD_INT 23
58523: DOUBLE
58524: EQUAL
58525: IFTRUE 58541
58527: LD_INT 24
58529: DOUBLE
58530: EQUAL
58531: IFTRUE 58541
58533: LD_INT 25
58535: DOUBLE
58536: EQUAL
58537: IFTRUE 58541
58539: GO 58597
58541: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
58542: LD_ADDR_VAR 0 9
58546: PUSH
58547: LD_VAR 0 35
58551: PUSH
58552: LD_VAR 0 36
58556: PUSH
58557: LD_VAR 0 37
58561: PUSH
58562: LD_VAR 0 38
58566: PUSH
58567: LD_VAR 0 39
58571: PUSH
58572: LD_VAR 0 40
58576: PUSH
58577: EMPTY
58578: LIST
58579: LIST
58580: LIST
58581: LIST
58582: LIST
58583: LIST
58584: PUSH
58585: LD_VAR 0 4
58589: PUSH
58590: LD_INT 1
58592: PLUS
58593: ARRAY
58594: ST_TO_ADDR
58595: GO 58962
58597: LD_INT 6
58599: DOUBLE
58600: EQUAL
58601: IFTRUE 58653
58603: LD_INT 7
58605: DOUBLE
58606: EQUAL
58607: IFTRUE 58653
58609: LD_INT 8
58611: DOUBLE
58612: EQUAL
58613: IFTRUE 58653
58615: LD_INT 13
58617: DOUBLE
58618: EQUAL
58619: IFTRUE 58653
58621: LD_INT 12
58623: DOUBLE
58624: EQUAL
58625: IFTRUE 58653
58627: LD_INT 15
58629: DOUBLE
58630: EQUAL
58631: IFTRUE 58653
58633: LD_INT 11
58635: DOUBLE
58636: EQUAL
58637: IFTRUE 58653
58639: LD_INT 14
58641: DOUBLE
58642: EQUAL
58643: IFTRUE 58653
58645: LD_INT 10
58647: DOUBLE
58648: EQUAL
58649: IFTRUE 58653
58651: GO 58709
58653: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
58654: LD_ADDR_VAR 0 9
58658: PUSH
58659: LD_VAR 0 41
58663: PUSH
58664: LD_VAR 0 42
58668: PUSH
58669: LD_VAR 0 43
58673: PUSH
58674: LD_VAR 0 44
58678: PUSH
58679: LD_VAR 0 45
58683: PUSH
58684: LD_VAR 0 46
58688: PUSH
58689: EMPTY
58690: LIST
58691: LIST
58692: LIST
58693: LIST
58694: LIST
58695: LIST
58696: PUSH
58697: LD_VAR 0 4
58701: PUSH
58702: LD_INT 1
58704: PLUS
58705: ARRAY
58706: ST_TO_ADDR
58707: GO 58962
58709: LD_INT 36
58711: DOUBLE
58712: EQUAL
58713: IFTRUE 58717
58715: GO 58773
58717: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
58718: LD_ADDR_VAR 0 9
58722: PUSH
58723: LD_VAR 0 47
58727: PUSH
58728: LD_VAR 0 48
58732: PUSH
58733: LD_VAR 0 49
58737: PUSH
58738: LD_VAR 0 50
58742: PUSH
58743: LD_VAR 0 51
58747: PUSH
58748: LD_VAR 0 52
58752: PUSH
58753: EMPTY
58754: LIST
58755: LIST
58756: LIST
58757: LIST
58758: LIST
58759: LIST
58760: PUSH
58761: LD_VAR 0 4
58765: PUSH
58766: LD_INT 1
58768: PLUS
58769: ARRAY
58770: ST_TO_ADDR
58771: GO 58962
58773: LD_INT 4
58775: DOUBLE
58776: EQUAL
58777: IFTRUE 58799
58779: LD_INT 5
58781: DOUBLE
58782: EQUAL
58783: IFTRUE 58799
58785: LD_INT 34
58787: DOUBLE
58788: EQUAL
58789: IFTRUE 58799
58791: LD_INT 37
58793: DOUBLE
58794: EQUAL
58795: IFTRUE 58799
58797: GO 58855
58799: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
58800: LD_ADDR_VAR 0 9
58804: PUSH
58805: LD_VAR 0 53
58809: PUSH
58810: LD_VAR 0 54
58814: PUSH
58815: LD_VAR 0 55
58819: PUSH
58820: LD_VAR 0 56
58824: PUSH
58825: LD_VAR 0 57
58829: PUSH
58830: LD_VAR 0 58
58834: PUSH
58835: EMPTY
58836: LIST
58837: LIST
58838: LIST
58839: LIST
58840: LIST
58841: LIST
58842: PUSH
58843: LD_VAR 0 4
58847: PUSH
58848: LD_INT 1
58850: PLUS
58851: ARRAY
58852: ST_TO_ADDR
58853: GO 58962
58855: LD_INT 31
58857: DOUBLE
58858: EQUAL
58859: IFTRUE 58905
58861: LD_INT 32
58863: DOUBLE
58864: EQUAL
58865: IFTRUE 58905
58867: LD_INT 33
58869: DOUBLE
58870: EQUAL
58871: IFTRUE 58905
58873: LD_INT 27
58875: DOUBLE
58876: EQUAL
58877: IFTRUE 58905
58879: LD_INT 26
58881: DOUBLE
58882: EQUAL
58883: IFTRUE 58905
58885: LD_INT 28
58887: DOUBLE
58888: EQUAL
58889: IFTRUE 58905
58891: LD_INT 29
58893: DOUBLE
58894: EQUAL
58895: IFTRUE 58905
58897: LD_INT 30
58899: DOUBLE
58900: EQUAL
58901: IFTRUE 58905
58903: GO 58961
58905: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
58906: LD_ADDR_VAR 0 9
58910: PUSH
58911: LD_VAR 0 59
58915: PUSH
58916: LD_VAR 0 60
58920: PUSH
58921: LD_VAR 0 61
58925: PUSH
58926: LD_VAR 0 62
58930: PUSH
58931: LD_VAR 0 63
58935: PUSH
58936: LD_VAR 0 64
58940: PUSH
58941: EMPTY
58942: LIST
58943: LIST
58944: LIST
58945: LIST
58946: LIST
58947: LIST
58948: PUSH
58949: LD_VAR 0 4
58953: PUSH
58954: LD_INT 1
58956: PLUS
58957: ARRAY
58958: ST_TO_ADDR
58959: GO 58962
58961: POP
// temp_list2 = [ ] ;
58962: LD_ADDR_VAR 0 10
58966: PUSH
58967: EMPTY
58968: ST_TO_ADDR
// for i in temp_list do
58969: LD_ADDR_VAR 0 8
58973: PUSH
58974: LD_VAR 0 9
58978: PUSH
58979: FOR_IN
58980: IFFALSE 59032
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
58982: LD_ADDR_VAR 0 10
58986: PUSH
58987: LD_VAR 0 10
58991: PUSH
58992: LD_VAR 0 8
58996: PUSH
58997: LD_INT 1
58999: ARRAY
59000: PUSH
59001: LD_VAR 0 2
59005: PLUS
59006: PUSH
59007: LD_VAR 0 8
59011: PUSH
59012: LD_INT 2
59014: ARRAY
59015: PUSH
59016: LD_VAR 0 3
59020: PLUS
59021: PUSH
59022: EMPTY
59023: LIST
59024: LIST
59025: PUSH
59026: EMPTY
59027: LIST
59028: ADD
59029: ST_TO_ADDR
59030: GO 58979
59032: POP
59033: POP
// result = temp_list2 ;
59034: LD_ADDR_VAR 0 7
59038: PUSH
59039: LD_VAR 0 10
59043: ST_TO_ADDR
// end ;
59044: LD_VAR 0 7
59048: RET
// export function EnemyInRange ( unit , dist ) ; begin
59049: LD_INT 0
59051: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
59052: LD_ADDR_VAR 0 3
59056: PUSH
59057: LD_VAR 0 1
59061: PPUSH
59062: CALL_OW 255
59066: PPUSH
59067: LD_VAR 0 1
59071: PPUSH
59072: CALL_OW 250
59076: PPUSH
59077: LD_VAR 0 1
59081: PPUSH
59082: CALL_OW 251
59086: PPUSH
59087: LD_VAR 0 2
59091: PPUSH
59092: CALL 32445 0 4
59096: PUSH
59097: LD_INT 4
59099: ARRAY
59100: ST_TO_ADDR
// end ;
59101: LD_VAR 0 3
59105: RET
// export function PlayerSeeMe ( unit ) ; begin
59106: LD_INT 0
59108: PPUSH
// result := See ( your_side , unit ) ;
59109: LD_ADDR_VAR 0 2
59113: PUSH
59114: LD_OWVAR 2
59118: PPUSH
59119: LD_VAR 0 1
59123: PPUSH
59124: CALL_OW 292
59128: ST_TO_ADDR
// end ;
59129: LD_VAR 0 2
59133: RET
// export function ReverseDir ( unit ) ; begin
59134: LD_INT 0
59136: PPUSH
// if not unit then
59137: LD_VAR 0 1
59141: NOT
59142: IFFALSE 59146
// exit ;
59144: GO 59169
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
59146: LD_ADDR_VAR 0 2
59150: PUSH
59151: LD_VAR 0 1
59155: PPUSH
59156: CALL_OW 254
59160: PUSH
59161: LD_INT 3
59163: PLUS
59164: PUSH
59165: LD_INT 6
59167: MOD
59168: ST_TO_ADDR
// end ;
59169: LD_VAR 0 2
59173: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
59174: LD_INT 0
59176: PPUSH
59177: PPUSH
59178: PPUSH
59179: PPUSH
59180: PPUSH
// if not hexes then
59181: LD_VAR 0 2
59185: NOT
59186: IFFALSE 59190
// exit ;
59188: GO 59338
// dist := 9999 ;
59190: LD_ADDR_VAR 0 5
59194: PUSH
59195: LD_INT 9999
59197: ST_TO_ADDR
// for i = 1 to hexes do
59198: LD_ADDR_VAR 0 4
59202: PUSH
59203: DOUBLE
59204: LD_INT 1
59206: DEC
59207: ST_TO_ADDR
59208: LD_VAR 0 2
59212: PUSH
59213: FOR_TO
59214: IFFALSE 59326
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
59216: LD_VAR 0 1
59220: PPUSH
59221: LD_VAR 0 2
59225: PUSH
59226: LD_VAR 0 4
59230: ARRAY
59231: PUSH
59232: LD_INT 1
59234: ARRAY
59235: PPUSH
59236: LD_VAR 0 2
59240: PUSH
59241: LD_VAR 0 4
59245: ARRAY
59246: PUSH
59247: LD_INT 2
59249: ARRAY
59250: PPUSH
59251: CALL_OW 297
59255: PUSH
59256: LD_VAR 0 5
59260: LESS
59261: IFFALSE 59324
// begin hex := hexes [ i ] ;
59263: LD_ADDR_VAR 0 7
59267: PUSH
59268: LD_VAR 0 2
59272: PUSH
59273: LD_VAR 0 4
59277: ARRAY
59278: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
59279: LD_ADDR_VAR 0 5
59283: PUSH
59284: LD_VAR 0 1
59288: PPUSH
59289: LD_VAR 0 2
59293: PUSH
59294: LD_VAR 0 4
59298: ARRAY
59299: PUSH
59300: LD_INT 1
59302: ARRAY
59303: PPUSH
59304: LD_VAR 0 2
59308: PUSH
59309: LD_VAR 0 4
59313: ARRAY
59314: PUSH
59315: LD_INT 2
59317: ARRAY
59318: PPUSH
59319: CALL_OW 297
59323: ST_TO_ADDR
// end ; end ;
59324: GO 59213
59326: POP
59327: POP
// result := hex ;
59328: LD_ADDR_VAR 0 3
59332: PUSH
59333: LD_VAR 0 7
59337: ST_TO_ADDR
// end ;
59338: LD_VAR 0 3
59342: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
59343: LD_INT 0
59345: PPUSH
59346: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
59347: LD_VAR 0 1
59351: NOT
59352: PUSH
59353: LD_VAR 0 1
59357: PUSH
59358: LD_INT 21
59360: PUSH
59361: LD_INT 2
59363: PUSH
59364: EMPTY
59365: LIST
59366: LIST
59367: PUSH
59368: LD_INT 23
59370: PUSH
59371: LD_INT 2
59373: PUSH
59374: EMPTY
59375: LIST
59376: LIST
59377: PUSH
59378: EMPTY
59379: LIST
59380: LIST
59381: PPUSH
59382: CALL_OW 69
59386: IN
59387: NOT
59388: OR
59389: IFFALSE 59393
// exit ;
59391: GO 59440
// for i = 1 to 3 do
59393: LD_ADDR_VAR 0 3
59397: PUSH
59398: DOUBLE
59399: LD_INT 1
59401: DEC
59402: ST_TO_ADDR
59403: LD_INT 3
59405: PUSH
59406: FOR_TO
59407: IFFALSE 59438
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
59409: LD_VAR 0 1
59413: PPUSH
59414: CALL_OW 250
59418: PPUSH
59419: LD_VAR 0 1
59423: PPUSH
59424: CALL_OW 251
59428: PPUSH
59429: LD_INT 1
59431: PPUSH
59432: CALL_OW 453
59436: GO 59406
59438: POP
59439: POP
// end ;
59440: LD_VAR 0 2
59444: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
59445: LD_INT 0
59447: PPUSH
59448: PPUSH
59449: PPUSH
59450: PPUSH
59451: PPUSH
59452: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
59453: LD_VAR 0 1
59457: NOT
59458: PUSH
59459: LD_VAR 0 2
59463: NOT
59464: OR
59465: PUSH
59466: LD_VAR 0 1
59470: PPUSH
59471: CALL_OW 314
59475: OR
59476: IFFALSE 59480
// exit ;
59478: GO 59921
// x := GetX ( enemy_unit ) ;
59480: LD_ADDR_VAR 0 7
59484: PUSH
59485: LD_VAR 0 2
59489: PPUSH
59490: CALL_OW 250
59494: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
59495: LD_ADDR_VAR 0 8
59499: PUSH
59500: LD_VAR 0 2
59504: PPUSH
59505: CALL_OW 251
59509: ST_TO_ADDR
// if not x or not y then
59510: LD_VAR 0 7
59514: NOT
59515: PUSH
59516: LD_VAR 0 8
59520: NOT
59521: OR
59522: IFFALSE 59526
// exit ;
59524: GO 59921
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
59526: LD_ADDR_VAR 0 6
59530: PUSH
59531: LD_VAR 0 7
59535: PPUSH
59536: LD_INT 0
59538: PPUSH
59539: LD_INT 4
59541: PPUSH
59542: CALL_OW 272
59546: PUSH
59547: LD_VAR 0 8
59551: PPUSH
59552: LD_INT 0
59554: PPUSH
59555: LD_INT 4
59557: PPUSH
59558: CALL_OW 273
59562: PUSH
59563: EMPTY
59564: LIST
59565: LIST
59566: PUSH
59567: LD_VAR 0 7
59571: PPUSH
59572: LD_INT 1
59574: PPUSH
59575: LD_INT 4
59577: PPUSH
59578: CALL_OW 272
59582: PUSH
59583: LD_VAR 0 8
59587: PPUSH
59588: LD_INT 1
59590: PPUSH
59591: LD_INT 4
59593: PPUSH
59594: CALL_OW 273
59598: PUSH
59599: EMPTY
59600: LIST
59601: LIST
59602: PUSH
59603: LD_VAR 0 7
59607: PPUSH
59608: LD_INT 2
59610: PPUSH
59611: LD_INT 4
59613: PPUSH
59614: CALL_OW 272
59618: PUSH
59619: LD_VAR 0 8
59623: PPUSH
59624: LD_INT 2
59626: PPUSH
59627: LD_INT 4
59629: PPUSH
59630: CALL_OW 273
59634: PUSH
59635: EMPTY
59636: LIST
59637: LIST
59638: PUSH
59639: LD_VAR 0 7
59643: PPUSH
59644: LD_INT 3
59646: PPUSH
59647: LD_INT 4
59649: PPUSH
59650: CALL_OW 272
59654: PUSH
59655: LD_VAR 0 8
59659: PPUSH
59660: LD_INT 3
59662: PPUSH
59663: LD_INT 4
59665: PPUSH
59666: CALL_OW 273
59670: PUSH
59671: EMPTY
59672: LIST
59673: LIST
59674: PUSH
59675: LD_VAR 0 7
59679: PPUSH
59680: LD_INT 4
59682: PPUSH
59683: LD_INT 4
59685: PPUSH
59686: CALL_OW 272
59690: PUSH
59691: LD_VAR 0 8
59695: PPUSH
59696: LD_INT 4
59698: PPUSH
59699: LD_INT 4
59701: PPUSH
59702: CALL_OW 273
59706: PUSH
59707: EMPTY
59708: LIST
59709: LIST
59710: PUSH
59711: LD_VAR 0 7
59715: PPUSH
59716: LD_INT 5
59718: PPUSH
59719: LD_INT 4
59721: PPUSH
59722: CALL_OW 272
59726: PUSH
59727: LD_VAR 0 8
59731: PPUSH
59732: LD_INT 5
59734: PPUSH
59735: LD_INT 4
59737: PPUSH
59738: CALL_OW 273
59742: PUSH
59743: EMPTY
59744: LIST
59745: LIST
59746: PUSH
59747: EMPTY
59748: LIST
59749: LIST
59750: LIST
59751: LIST
59752: LIST
59753: LIST
59754: ST_TO_ADDR
// for i = tmp downto 1 do
59755: LD_ADDR_VAR 0 4
59759: PUSH
59760: DOUBLE
59761: LD_VAR 0 6
59765: INC
59766: ST_TO_ADDR
59767: LD_INT 1
59769: PUSH
59770: FOR_DOWNTO
59771: IFFALSE 59872
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
59773: LD_VAR 0 6
59777: PUSH
59778: LD_VAR 0 4
59782: ARRAY
59783: PUSH
59784: LD_INT 1
59786: ARRAY
59787: PPUSH
59788: LD_VAR 0 6
59792: PUSH
59793: LD_VAR 0 4
59797: ARRAY
59798: PUSH
59799: LD_INT 2
59801: ARRAY
59802: PPUSH
59803: CALL_OW 488
59807: NOT
59808: PUSH
59809: LD_VAR 0 6
59813: PUSH
59814: LD_VAR 0 4
59818: ARRAY
59819: PUSH
59820: LD_INT 1
59822: ARRAY
59823: PPUSH
59824: LD_VAR 0 6
59828: PUSH
59829: LD_VAR 0 4
59833: ARRAY
59834: PUSH
59835: LD_INT 2
59837: ARRAY
59838: PPUSH
59839: CALL_OW 428
59843: PUSH
59844: LD_INT 0
59846: NONEQUAL
59847: OR
59848: IFFALSE 59870
// tmp := Delete ( tmp , i ) ;
59850: LD_ADDR_VAR 0 6
59854: PUSH
59855: LD_VAR 0 6
59859: PPUSH
59860: LD_VAR 0 4
59864: PPUSH
59865: CALL_OW 3
59869: ST_TO_ADDR
59870: GO 59770
59872: POP
59873: POP
// j := GetClosestHex ( unit , tmp ) ;
59874: LD_ADDR_VAR 0 5
59878: PUSH
59879: LD_VAR 0 1
59883: PPUSH
59884: LD_VAR 0 6
59888: PPUSH
59889: CALL 59174 0 2
59893: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
59894: LD_VAR 0 1
59898: PPUSH
59899: LD_VAR 0 5
59903: PUSH
59904: LD_INT 1
59906: ARRAY
59907: PPUSH
59908: LD_VAR 0 5
59912: PUSH
59913: LD_INT 2
59915: ARRAY
59916: PPUSH
59917: CALL_OW 111
// end ;
59921: LD_VAR 0 3
59925: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
59926: LD_INT 0
59928: PPUSH
59929: PPUSH
59930: PPUSH
// uc_side = 0 ;
59931: LD_ADDR_OWVAR 20
59935: PUSH
59936: LD_INT 0
59938: ST_TO_ADDR
// uc_nation = 0 ;
59939: LD_ADDR_OWVAR 21
59943: PUSH
59944: LD_INT 0
59946: ST_TO_ADDR
// InitHc_All ( ) ;
59947: CALL_OW 584
// InitVc ;
59951: CALL_OW 20
// if mastodonts then
59955: LD_VAR 0 6
59959: IFFALSE 60026
// for i = 1 to mastodonts do
59961: LD_ADDR_VAR 0 11
59965: PUSH
59966: DOUBLE
59967: LD_INT 1
59969: DEC
59970: ST_TO_ADDR
59971: LD_VAR 0 6
59975: PUSH
59976: FOR_TO
59977: IFFALSE 60024
// begin vc_chassis := 31 ;
59979: LD_ADDR_OWVAR 37
59983: PUSH
59984: LD_INT 31
59986: ST_TO_ADDR
// vc_control := control_rider ;
59987: LD_ADDR_OWVAR 38
59991: PUSH
59992: LD_INT 4
59994: ST_TO_ADDR
// animal := CreateVehicle ;
59995: LD_ADDR_VAR 0 12
59999: PUSH
60000: CALL_OW 45
60004: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60005: LD_VAR 0 12
60009: PPUSH
60010: LD_VAR 0 8
60014: PPUSH
60015: LD_INT 0
60017: PPUSH
60018: CALL 62214 0 3
// end ;
60022: GO 59976
60024: POP
60025: POP
// if horses then
60026: LD_VAR 0 5
60030: IFFALSE 60097
// for i = 1 to horses do
60032: LD_ADDR_VAR 0 11
60036: PUSH
60037: DOUBLE
60038: LD_INT 1
60040: DEC
60041: ST_TO_ADDR
60042: LD_VAR 0 5
60046: PUSH
60047: FOR_TO
60048: IFFALSE 60095
// begin hc_class := 21 ;
60050: LD_ADDR_OWVAR 28
60054: PUSH
60055: LD_INT 21
60057: ST_TO_ADDR
// hc_gallery :=  ;
60058: LD_ADDR_OWVAR 33
60062: PUSH
60063: LD_STRING 
60065: ST_TO_ADDR
// animal := CreateHuman ;
60066: LD_ADDR_VAR 0 12
60070: PUSH
60071: CALL_OW 44
60075: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60076: LD_VAR 0 12
60080: PPUSH
60081: LD_VAR 0 8
60085: PPUSH
60086: LD_INT 0
60088: PPUSH
60089: CALL 62214 0 3
// end ;
60093: GO 60047
60095: POP
60096: POP
// if birds then
60097: LD_VAR 0 1
60101: IFFALSE 60168
// for i = 1 to birds do
60103: LD_ADDR_VAR 0 11
60107: PUSH
60108: DOUBLE
60109: LD_INT 1
60111: DEC
60112: ST_TO_ADDR
60113: LD_VAR 0 1
60117: PUSH
60118: FOR_TO
60119: IFFALSE 60166
// begin hc_class = 18 ;
60121: LD_ADDR_OWVAR 28
60125: PUSH
60126: LD_INT 18
60128: ST_TO_ADDR
// hc_gallery =  ;
60129: LD_ADDR_OWVAR 33
60133: PUSH
60134: LD_STRING 
60136: ST_TO_ADDR
// animal := CreateHuman ;
60137: LD_ADDR_VAR 0 12
60141: PUSH
60142: CALL_OW 44
60146: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60147: LD_VAR 0 12
60151: PPUSH
60152: LD_VAR 0 8
60156: PPUSH
60157: LD_INT 0
60159: PPUSH
60160: CALL 62214 0 3
// end ;
60164: GO 60118
60166: POP
60167: POP
// if tigers then
60168: LD_VAR 0 2
60172: IFFALSE 60256
// for i = 1 to tigers do
60174: LD_ADDR_VAR 0 11
60178: PUSH
60179: DOUBLE
60180: LD_INT 1
60182: DEC
60183: ST_TO_ADDR
60184: LD_VAR 0 2
60188: PUSH
60189: FOR_TO
60190: IFFALSE 60254
// begin hc_class = class_tiger ;
60192: LD_ADDR_OWVAR 28
60196: PUSH
60197: LD_INT 14
60199: ST_TO_ADDR
// hc_gallery =  ;
60200: LD_ADDR_OWVAR 33
60204: PUSH
60205: LD_STRING 
60207: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
60208: LD_ADDR_OWVAR 35
60212: PUSH
60213: LD_INT 7
60215: NEG
60216: PPUSH
60217: LD_INT 7
60219: PPUSH
60220: CALL_OW 12
60224: ST_TO_ADDR
// animal := CreateHuman ;
60225: LD_ADDR_VAR 0 12
60229: PUSH
60230: CALL_OW 44
60234: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60235: LD_VAR 0 12
60239: PPUSH
60240: LD_VAR 0 8
60244: PPUSH
60245: LD_INT 0
60247: PPUSH
60248: CALL 62214 0 3
// end ;
60252: GO 60189
60254: POP
60255: POP
// if apemans then
60256: LD_VAR 0 3
60260: IFFALSE 60383
// for i = 1 to apemans do
60262: LD_ADDR_VAR 0 11
60266: PUSH
60267: DOUBLE
60268: LD_INT 1
60270: DEC
60271: ST_TO_ADDR
60272: LD_VAR 0 3
60276: PUSH
60277: FOR_TO
60278: IFFALSE 60381
// begin hc_class = class_apeman ;
60280: LD_ADDR_OWVAR 28
60284: PUSH
60285: LD_INT 12
60287: ST_TO_ADDR
// hc_gallery =  ;
60288: LD_ADDR_OWVAR 33
60292: PUSH
60293: LD_STRING 
60295: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
60296: LD_ADDR_OWVAR 35
60300: PUSH
60301: LD_INT 2
60303: NEG
60304: PPUSH
60305: LD_INT 2
60307: PPUSH
60308: CALL_OW 12
60312: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
60313: LD_ADDR_OWVAR 31
60317: PUSH
60318: LD_INT 1
60320: PPUSH
60321: LD_INT 3
60323: PPUSH
60324: CALL_OW 12
60328: PUSH
60329: LD_INT 1
60331: PPUSH
60332: LD_INT 3
60334: PPUSH
60335: CALL_OW 12
60339: PUSH
60340: LD_INT 0
60342: PUSH
60343: LD_INT 0
60345: PUSH
60346: EMPTY
60347: LIST
60348: LIST
60349: LIST
60350: LIST
60351: ST_TO_ADDR
// animal := CreateHuman ;
60352: LD_ADDR_VAR 0 12
60356: PUSH
60357: CALL_OW 44
60361: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60362: LD_VAR 0 12
60366: PPUSH
60367: LD_VAR 0 8
60371: PPUSH
60372: LD_INT 0
60374: PPUSH
60375: CALL 62214 0 3
// end ;
60379: GO 60277
60381: POP
60382: POP
// if enchidnas then
60383: LD_VAR 0 4
60387: IFFALSE 60454
// for i = 1 to enchidnas do
60389: LD_ADDR_VAR 0 11
60393: PUSH
60394: DOUBLE
60395: LD_INT 1
60397: DEC
60398: ST_TO_ADDR
60399: LD_VAR 0 4
60403: PUSH
60404: FOR_TO
60405: IFFALSE 60452
// begin hc_class = 13 ;
60407: LD_ADDR_OWVAR 28
60411: PUSH
60412: LD_INT 13
60414: ST_TO_ADDR
// hc_gallery =  ;
60415: LD_ADDR_OWVAR 33
60419: PUSH
60420: LD_STRING 
60422: ST_TO_ADDR
// animal := CreateHuman ;
60423: LD_ADDR_VAR 0 12
60427: PUSH
60428: CALL_OW 44
60432: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60433: LD_VAR 0 12
60437: PPUSH
60438: LD_VAR 0 8
60442: PPUSH
60443: LD_INT 0
60445: PPUSH
60446: CALL 62214 0 3
// end ;
60450: GO 60404
60452: POP
60453: POP
// if fishes then
60454: LD_VAR 0 7
60458: IFFALSE 60525
// for i = 1 to fishes do
60460: LD_ADDR_VAR 0 11
60464: PUSH
60465: DOUBLE
60466: LD_INT 1
60468: DEC
60469: ST_TO_ADDR
60470: LD_VAR 0 7
60474: PUSH
60475: FOR_TO
60476: IFFALSE 60523
// begin hc_class = 20 ;
60478: LD_ADDR_OWVAR 28
60482: PUSH
60483: LD_INT 20
60485: ST_TO_ADDR
// hc_gallery =  ;
60486: LD_ADDR_OWVAR 33
60490: PUSH
60491: LD_STRING 
60493: ST_TO_ADDR
// animal := CreateHuman ;
60494: LD_ADDR_VAR 0 12
60498: PUSH
60499: CALL_OW 44
60503: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
60504: LD_VAR 0 12
60508: PPUSH
60509: LD_VAR 0 9
60513: PPUSH
60514: LD_INT 0
60516: PPUSH
60517: CALL 62214 0 3
// end ;
60521: GO 60475
60523: POP
60524: POP
// end ;
60525: LD_VAR 0 10
60529: RET
// export function WantHeal ( sci , unit ) ; begin
60530: LD_INT 0
60532: PPUSH
// if GetTaskList ( sci ) > 0 then
60533: LD_VAR 0 1
60537: PPUSH
60538: CALL_OW 437
60542: PUSH
60543: LD_INT 0
60545: GREATER
60546: IFFALSE 60616
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
60548: LD_VAR 0 1
60552: PPUSH
60553: CALL_OW 437
60557: PUSH
60558: LD_INT 1
60560: ARRAY
60561: PUSH
60562: LD_INT 1
60564: ARRAY
60565: PUSH
60566: LD_STRING l
60568: EQUAL
60569: PUSH
60570: LD_VAR 0 1
60574: PPUSH
60575: CALL_OW 437
60579: PUSH
60580: LD_INT 1
60582: ARRAY
60583: PUSH
60584: LD_INT 4
60586: ARRAY
60587: PUSH
60588: LD_VAR 0 2
60592: EQUAL
60593: AND
60594: IFFALSE 60606
// result := true else
60596: LD_ADDR_VAR 0 3
60600: PUSH
60601: LD_INT 1
60603: ST_TO_ADDR
60604: GO 60614
// result := false ;
60606: LD_ADDR_VAR 0 3
60610: PUSH
60611: LD_INT 0
60613: ST_TO_ADDR
// end else
60614: GO 60624
// result := false ;
60616: LD_ADDR_VAR 0 3
60620: PUSH
60621: LD_INT 0
60623: ST_TO_ADDR
// end ;
60624: LD_VAR 0 3
60628: RET
// export function HealTarget ( sci ) ; begin
60629: LD_INT 0
60631: PPUSH
// if not sci then
60632: LD_VAR 0 1
60636: NOT
60637: IFFALSE 60641
// exit ;
60639: GO 60706
// result := 0 ;
60641: LD_ADDR_VAR 0 2
60645: PUSH
60646: LD_INT 0
60648: ST_TO_ADDR
// if GetTaskList ( sci ) then
60649: LD_VAR 0 1
60653: PPUSH
60654: CALL_OW 437
60658: IFFALSE 60706
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
60660: LD_VAR 0 1
60664: PPUSH
60665: CALL_OW 437
60669: PUSH
60670: LD_INT 1
60672: ARRAY
60673: PUSH
60674: LD_INT 1
60676: ARRAY
60677: PUSH
60678: LD_STRING l
60680: EQUAL
60681: IFFALSE 60706
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
60683: LD_ADDR_VAR 0 2
60687: PUSH
60688: LD_VAR 0 1
60692: PPUSH
60693: CALL_OW 437
60697: PUSH
60698: LD_INT 1
60700: ARRAY
60701: PUSH
60702: LD_INT 4
60704: ARRAY
60705: ST_TO_ADDR
// end ;
60706: LD_VAR 0 2
60710: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
60711: LD_INT 0
60713: PPUSH
60714: PPUSH
60715: PPUSH
60716: PPUSH
// if not base_units then
60717: LD_VAR 0 1
60721: NOT
60722: IFFALSE 60726
// exit ;
60724: GO 60813
// result := false ;
60726: LD_ADDR_VAR 0 2
60730: PUSH
60731: LD_INT 0
60733: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
60734: LD_ADDR_VAR 0 5
60738: PUSH
60739: LD_VAR 0 1
60743: PPUSH
60744: LD_INT 21
60746: PUSH
60747: LD_INT 3
60749: PUSH
60750: EMPTY
60751: LIST
60752: LIST
60753: PPUSH
60754: CALL_OW 72
60758: ST_TO_ADDR
// if not tmp then
60759: LD_VAR 0 5
60763: NOT
60764: IFFALSE 60768
// exit ;
60766: GO 60813
// for i in tmp do
60768: LD_ADDR_VAR 0 3
60772: PUSH
60773: LD_VAR 0 5
60777: PUSH
60778: FOR_IN
60779: IFFALSE 60811
// begin result := EnemyInRange ( i , 22 ) ;
60781: LD_ADDR_VAR 0 2
60785: PUSH
60786: LD_VAR 0 3
60790: PPUSH
60791: LD_INT 22
60793: PPUSH
60794: CALL 59049 0 2
60798: ST_TO_ADDR
// if result then
60799: LD_VAR 0 2
60803: IFFALSE 60809
// exit ;
60805: POP
60806: POP
60807: GO 60813
// end ;
60809: GO 60778
60811: POP
60812: POP
// end ;
60813: LD_VAR 0 2
60817: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
60818: LD_INT 0
60820: PPUSH
60821: PPUSH
// if not units then
60822: LD_VAR 0 1
60826: NOT
60827: IFFALSE 60831
// exit ;
60829: GO 60901
// result := [ ] ;
60831: LD_ADDR_VAR 0 3
60835: PUSH
60836: EMPTY
60837: ST_TO_ADDR
// for i in units do
60838: LD_ADDR_VAR 0 4
60842: PUSH
60843: LD_VAR 0 1
60847: PUSH
60848: FOR_IN
60849: IFFALSE 60899
// if GetTag ( i ) = tag then
60851: LD_VAR 0 4
60855: PPUSH
60856: CALL_OW 110
60860: PUSH
60861: LD_VAR 0 2
60865: EQUAL
60866: IFFALSE 60897
// result := Replace ( result , result + 1 , i ) ;
60868: LD_ADDR_VAR 0 3
60872: PUSH
60873: LD_VAR 0 3
60877: PPUSH
60878: LD_VAR 0 3
60882: PUSH
60883: LD_INT 1
60885: PLUS
60886: PPUSH
60887: LD_VAR 0 4
60891: PPUSH
60892: CALL_OW 1
60896: ST_TO_ADDR
60897: GO 60848
60899: POP
60900: POP
// end ;
60901: LD_VAR 0 3
60905: RET
// export function IsDriver ( un ) ; begin
60906: LD_INT 0
60908: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
60909: LD_ADDR_VAR 0 2
60913: PUSH
60914: LD_VAR 0 1
60918: PUSH
60919: LD_INT 55
60921: PUSH
60922: EMPTY
60923: LIST
60924: PPUSH
60925: CALL_OW 69
60929: IN
60930: ST_TO_ADDR
// end ;
60931: LD_VAR 0 2
60935: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
60936: LD_INT 0
60938: PPUSH
60939: PPUSH
// list := [ ] ;
60940: LD_ADDR_VAR 0 5
60944: PUSH
60945: EMPTY
60946: ST_TO_ADDR
// case d of 0 :
60947: LD_VAR 0 3
60951: PUSH
60952: LD_INT 0
60954: DOUBLE
60955: EQUAL
60956: IFTRUE 60960
60958: GO 61093
60960: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
60961: LD_ADDR_VAR 0 5
60965: PUSH
60966: LD_VAR 0 1
60970: PUSH
60971: LD_INT 4
60973: MINUS
60974: PUSH
60975: LD_VAR 0 2
60979: PUSH
60980: LD_INT 4
60982: MINUS
60983: PUSH
60984: LD_INT 2
60986: PUSH
60987: EMPTY
60988: LIST
60989: LIST
60990: LIST
60991: PUSH
60992: LD_VAR 0 1
60996: PUSH
60997: LD_INT 3
60999: MINUS
61000: PUSH
61001: LD_VAR 0 2
61005: PUSH
61006: LD_INT 1
61008: PUSH
61009: EMPTY
61010: LIST
61011: LIST
61012: LIST
61013: PUSH
61014: LD_VAR 0 1
61018: PUSH
61019: LD_INT 4
61021: PLUS
61022: PUSH
61023: LD_VAR 0 2
61027: PUSH
61028: LD_INT 4
61030: PUSH
61031: EMPTY
61032: LIST
61033: LIST
61034: LIST
61035: PUSH
61036: LD_VAR 0 1
61040: PUSH
61041: LD_INT 3
61043: PLUS
61044: PUSH
61045: LD_VAR 0 2
61049: PUSH
61050: LD_INT 3
61052: PLUS
61053: PUSH
61054: LD_INT 5
61056: PUSH
61057: EMPTY
61058: LIST
61059: LIST
61060: LIST
61061: PUSH
61062: LD_VAR 0 1
61066: PUSH
61067: LD_VAR 0 2
61071: PUSH
61072: LD_INT 4
61074: PLUS
61075: PUSH
61076: LD_INT 0
61078: PUSH
61079: EMPTY
61080: LIST
61081: LIST
61082: LIST
61083: PUSH
61084: EMPTY
61085: LIST
61086: LIST
61087: LIST
61088: LIST
61089: LIST
61090: ST_TO_ADDR
// end ; 1 :
61091: GO 61791
61093: LD_INT 1
61095: DOUBLE
61096: EQUAL
61097: IFTRUE 61101
61099: GO 61234
61101: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
61102: LD_ADDR_VAR 0 5
61106: PUSH
61107: LD_VAR 0 1
61111: PUSH
61112: LD_VAR 0 2
61116: PUSH
61117: LD_INT 4
61119: MINUS
61120: PUSH
61121: LD_INT 3
61123: PUSH
61124: EMPTY
61125: LIST
61126: LIST
61127: LIST
61128: PUSH
61129: LD_VAR 0 1
61133: PUSH
61134: LD_INT 3
61136: MINUS
61137: PUSH
61138: LD_VAR 0 2
61142: PUSH
61143: LD_INT 3
61145: MINUS
61146: PUSH
61147: LD_INT 2
61149: PUSH
61150: EMPTY
61151: LIST
61152: LIST
61153: LIST
61154: PUSH
61155: LD_VAR 0 1
61159: PUSH
61160: LD_INT 4
61162: MINUS
61163: PUSH
61164: LD_VAR 0 2
61168: PUSH
61169: LD_INT 1
61171: PUSH
61172: EMPTY
61173: LIST
61174: LIST
61175: LIST
61176: PUSH
61177: LD_VAR 0 1
61181: PUSH
61182: LD_VAR 0 2
61186: PUSH
61187: LD_INT 3
61189: PLUS
61190: PUSH
61191: LD_INT 0
61193: PUSH
61194: EMPTY
61195: LIST
61196: LIST
61197: LIST
61198: PUSH
61199: LD_VAR 0 1
61203: PUSH
61204: LD_INT 4
61206: PLUS
61207: PUSH
61208: LD_VAR 0 2
61212: PUSH
61213: LD_INT 4
61215: PLUS
61216: PUSH
61217: LD_INT 5
61219: PUSH
61220: EMPTY
61221: LIST
61222: LIST
61223: LIST
61224: PUSH
61225: EMPTY
61226: LIST
61227: LIST
61228: LIST
61229: LIST
61230: LIST
61231: ST_TO_ADDR
// end ; 2 :
61232: GO 61791
61234: LD_INT 2
61236: DOUBLE
61237: EQUAL
61238: IFTRUE 61242
61240: GO 61371
61242: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
61243: LD_ADDR_VAR 0 5
61247: PUSH
61248: LD_VAR 0 1
61252: PUSH
61253: LD_VAR 0 2
61257: PUSH
61258: LD_INT 3
61260: MINUS
61261: PUSH
61262: LD_INT 3
61264: PUSH
61265: EMPTY
61266: LIST
61267: LIST
61268: LIST
61269: PUSH
61270: LD_VAR 0 1
61274: PUSH
61275: LD_INT 4
61277: PLUS
61278: PUSH
61279: LD_VAR 0 2
61283: PUSH
61284: LD_INT 4
61286: PUSH
61287: EMPTY
61288: LIST
61289: LIST
61290: LIST
61291: PUSH
61292: LD_VAR 0 1
61296: PUSH
61297: LD_VAR 0 2
61301: PUSH
61302: LD_INT 4
61304: PLUS
61305: PUSH
61306: LD_INT 0
61308: PUSH
61309: EMPTY
61310: LIST
61311: LIST
61312: LIST
61313: PUSH
61314: LD_VAR 0 1
61318: PUSH
61319: LD_INT 3
61321: MINUS
61322: PUSH
61323: LD_VAR 0 2
61327: PUSH
61328: LD_INT 1
61330: PUSH
61331: EMPTY
61332: LIST
61333: LIST
61334: LIST
61335: PUSH
61336: LD_VAR 0 1
61340: PUSH
61341: LD_INT 4
61343: MINUS
61344: PUSH
61345: LD_VAR 0 2
61349: PUSH
61350: LD_INT 4
61352: MINUS
61353: PUSH
61354: LD_INT 2
61356: PUSH
61357: EMPTY
61358: LIST
61359: LIST
61360: LIST
61361: PUSH
61362: EMPTY
61363: LIST
61364: LIST
61365: LIST
61366: LIST
61367: LIST
61368: ST_TO_ADDR
// end ; 3 :
61369: GO 61791
61371: LD_INT 3
61373: DOUBLE
61374: EQUAL
61375: IFTRUE 61379
61377: GO 61512
61379: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
61380: LD_ADDR_VAR 0 5
61384: PUSH
61385: LD_VAR 0 1
61389: PUSH
61390: LD_INT 3
61392: PLUS
61393: PUSH
61394: LD_VAR 0 2
61398: PUSH
61399: LD_INT 4
61401: PUSH
61402: EMPTY
61403: LIST
61404: LIST
61405: LIST
61406: PUSH
61407: LD_VAR 0 1
61411: PUSH
61412: LD_INT 4
61414: PLUS
61415: PUSH
61416: LD_VAR 0 2
61420: PUSH
61421: LD_INT 4
61423: PLUS
61424: PUSH
61425: LD_INT 5
61427: PUSH
61428: EMPTY
61429: LIST
61430: LIST
61431: LIST
61432: PUSH
61433: LD_VAR 0 1
61437: PUSH
61438: LD_INT 4
61440: MINUS
61441: PUSH
61442: LD_VAR 0 2
61446: PUSH
61447: LD_INT 1
61449: PUSH
61450: EMPTY
61451: LIST
61452: LIST
61453: LIST
61454: PUSH
61455: LD_VAR 0 1
61459: PUSH
61460: LD_VAR 0 2
61464: PUSH
61465: LD_INT 4
61467: MINUS
61468: PUSH
61469: LD_INT 3
61471: PUSH
61472: EMPTY
61473: LIST
61474: LIST
61475: LIST
61476: PUSH
61477: LD_VAR 0 1
61481: PUSH
61482: LD_INT 3
61484: MINUS
61485: PUSH
61486: LD_VAR 0 2
61490: PUSH
61491: LD_INT 3
61493: MINUS
61494: PUSH
61495: LD_INT 2
61497: PUSH
61498: EMPTY
61499: LIST
61500: LIST
61501: LIST
61502: PUSH
61503: EMPTY
61504: LIST
61505: LIST
61506: LIST
61507: LIST
61508: LIST
61509: ST_TO_ADDR
// end ; 4 :
61510: GO 61791
61512: LD_INT 4
61514: DOUBLE
61515: EQUAL
61516: IFTRUE 61520
61518: GO 61653
61520: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
61521: LD_ADDR_VAR 0 5
61525: PUSH
61526: LD_VAR 0 1
61530: PUSH
61531: LD_VAR 0 2
61535: PUSH
61536: LD_INT 4
61538: PLUS
61539: PUSH
61540: LD_INT 0
61542: PUSH
61543: EMPTY
61544: LIST
61545: LIST
61546: LIST
61547: PUSH
61548: LD_VAR 0 1
61552: PUSH
61553: LD_INT 3
61555: PLUS
61556: PUSH
61557: LD_VAR 0 2
61561: PUSH
61562: LD_INT 3
61564: PLUS
61565: PUSH
61566: LD_INT 5
61568: PUSH
61569: EMPTY
61570: LIST
61571: LIST
61572: LIST
61573: PUSH
61574: LD_VAR 0 1
61578: PUSH
61579: LD_INT 4
61581: PLUS
61582: PUSH
61583: LD_VAR 0 2
61587: PUSH
61588: LD_INT 4
61590: PUSH
61591: EMPTY
61592: LIST
61593: LIST
61594: LIST
61595: PUSH
61596: LD_VAR 0 1
61600: PUSH
61601: LD_VAR 0 2
61605: PUSH
61606: LD_INT 3
61608: MINUS
61609: PUSH
61610: LD_INT 3
61612: PUSH
61613: EMPTY
61614: LIST
61615: LIST
61616: LIST
61617: PUSH
61618: LD_VAR 0 1
61622: PUSH
61623: LD_INT 4
61625: MINUS
61626: PUSH
61627: LD_VAR 0 2
61631: PUSH
61632: LD_INT 4
61634: MINUS
61635: PUSH
61636: LD_INT 2
61638: PUSH
61639: EMPTY
61640: LIST
61641: LIST
61642: LIST
61643: PUSH
61644: EMPTY
61645: LIST
61646: LIST
61647: LIST
61648: LIST
61649: LIST
61650: ST_TO_ADDR
// end ; 5 :
61651: GO 61791
61653: LD_INT 5
61655: DOUBLE
61656: EQUAL
61657: IFTRUE 61661
61659: GO 61790
61661: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
61662: LD_ADDR_VAR 0 5
61666: PUSH
61667: LD_VAR 0 1
61671: PUSH
61672: LD_INT 4
61674: MINUS
61675: PUSH
61676: LD_VAR 0 2
61680: PUSH
61681: LD_INT 1
61683: PUSH
61684: EMPTY
61685: LIST
61686: LIST
61687: LIST
61688: PUSH
61689: LD_VAR 0 1
61693: PUSH
61694: LD_VAR 0 2
61698: PUSH
61699: LD_INT 4
61701: MINUS
61702: PUSH
61703: LD_INT 3
61705: PUSH
61706: EMPTY
61707: LIST
61708: LIST
61709: LIST
61710: PUSH
61711: LD_VAR 0 1
61715: PUSH
61716: LD_INT 4
61718: PLUS
61719: PUSH
61720: LD_VAR 0 2
61724: PUSH
61725: LD_INT 4
61727: PLUS
61728: PUSH
61729: LD_INT 5
61731: PUSH
61732: EMPTY
61733: LIST
61734: LIST
61735: LIST
61736: PUSH
61737: LD_VAR 0 1
61741: PUSH
61742: LD_INT 3
61744: PLUS
61745: PUSH
61746: LD_VAR 0 2
61750: PUSH
61751: LD_INT 4
61753: PUSH
61754: EMPTY
61755: LIST
61756: LIST
61757: LIST
61758: PUSH
61759: LD_VAR 0 1
61763: PUSH
61764: LD_VAR 0 2
61768: PUSH
61769: LD_INT 3
61771: PLUS
61772: PUSH
61773: LD_INT 0
61775: PUSH
61776: EMPTY
61777: LIST
61778: LIST
61779: LIST
61780: PUSH
61781: EMPTY
61782: LIST
61783: LIST
61784: LIST
61785: LIST
61786: LIST
61787: ST_TO_ADDR
// end ; end ;
61788: GO 61791
61790: POP
// result := list ;
61791: LD_ADDR_VAR 0 4
61795: PUSH
61796: LD_VAR 0 5
61800: ST_TO_ADDR
// end ;
61801: LD_VAR 0 4
61805: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
61806: LD_INT 0
61808: PPUSH
61809: PPUSH
61810: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
61811: LD_VAR 0 1
61815: NOT
61816: PUSH
61817: LD_VAR 0 2
61821: PUSH
61822: LD_INT 1
61824: PUSH
61825: LD_INT 2
61827: PUSH
61828: LD_INT 3
61830: PUSH
61831: LD_INT 4
61833: PUSH
61834: EMPTY
61835: LIST
61836: LIST
61837: LIST
61838: LIST
61839: IN
61840: NOT
61841: OR
61842: IFFALSE 61846
// exit ;
61844: GO 61938
// tmp := [ ] ;
61846: LD_ADDR_VAR 0 5
61850: PUSH
61851: EMPTY
61852: ST_TO_ADDR
// for i in units do
61853: LD_ADDR_VAR 0 4
61857: PUSH
61858: LD_VAR 0 1
61862: PUSH
61863: FOR_IN
61864: IFFALSE 61907
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
61866: LD_ADDR_VAR 0 5
61870: PUSH
61871: LD_VAR 0 5
61875: PPUSH
61876: LD_VAR 0 5
61880: PUSH
61881: LD_INT 1
61883: PLUS
61884: PPUSH
61885: LD_VAR 0 4
61889: PPUSH
61890: LD_VAR 0 2
61894: PPUSH
61895: CALL_OW 259
61899: PPUSH
61900: CALL_OW 2
61904: ST_TO_ADDR
61905: GO 61863
61907: POP
61908: POP
// if not tmp then
61909: LD_VAR 0 5
61913: NOT
61914: IFFALSE 61918
// exit ;
61916: GO 61938
// result := SortListByListDesc ( units , tmp ) ;
61918: LD_ADDR_VAR 0 3
61922: PUSH
61923: LD_VAR 0 1
61927: PPUSH
61928: LD_VAR 0 5
61932: PPUSH
61933: CALL_OW 77
61937: ST_TO_ADDR
// end ;
61938: LD_VAR 0 3
61942: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
61943: LD_INT 0
61945: PPUSH
61946: PPUSH
61947: PPUSH
// result := false ;
61948: LD_ADDR_VAR 0 3
61952: PUSH
61953: LD_INT 0
61955: ST_TO_ADDR
// x := GetX ( building ) ;
61956: LD_ADDR_VAR 0 4
61960: PUSH
61961: LD_VAR 0 2
61965: PPUSH
61966: CALL_OW 250
61970: ST_TO_ADDR
// y := GetY ( building ) ;
61971: LD_ADDR_VAR 0 5
61975: PUSH
61976: LD_VAR 0 2
61980: PPUSH
61981: CALL_OW 251
61985: ST_TO_ADDR
// if not building or not x or not y then
61986: LD_VAR 0 2
61990: NOT
61991: PUSH
61992: LD_VAR 0 4
61996: NOT
61997: OR
61998: PUSH
61999: LD_VAR 0 5
62003: NOT
62004: OR
62005: IFFALSE 62009
// exit ;
62007: GO 62101
// if GetTaskList ( unit ) then
62009: LD_VAR 0 1
62013: PPUSH
62014: CALL_OW 437
62018: IFFALSE 62101
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
62020: LD_STRING e
62022: PUSH
62023: LD_VAR 0 1
62027: PPUSH
62028: CALL_OW 437
62032: PUSH
62033: LD_INT 1
62035: ARRAY
62036: PUSH
62037: LD_INT 1
62039: ARRAY
62040: EQUAL
62041: PUSH
62042: LD_VAR 0 4
62046: PUSH
62047: LD_VAR 0 1
62051: PPUSH
62052: CALL_OW 437
62056: PUSH
62057: LD_INT 1
62059: ARRAY
62060: PUSH
62061: LD_INT 2
62063: ARRAY
62064: EQUAL
62065: AND
62066: PUSH
62067: LD_VAR 0 5
62071: PUSH
62072: LD_VAR 0 1
62076: PPUSH
62077: CALL_OW 437
62081: PUSH
62082: LD_INT 1
62084: ARRAY
62085: PUSH
62086: LD_INT 3
62088: ARRAY
62089: EQUAL
62090: AND
62091: IFFALSE 62101
// result := true end ;
62093: LD_ADDR_VAR 0 3
62097: PUSH
62098: LD_INT 1
62100: ST_TO_ADDR
// end ;
62101: LD_VAR 0 3
62105: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
62106: LD_INT 0
62108: PPUSH
// result := false ;
62109: LD_ADDR_VAR 0 4
62113: PUSH
62114: LD_INT 0
62116: ST_TO_ADDR
// if GetTaskList ( unit ) then
62117: LD_VAR 0 1
62121: PPUSH
62122: CALL_OW 437
62126: IFFALSE 62209
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
62128: LD_STRING M
62130: PUSH
62131: LD_VAR 0 1
62135: PPUSH
62136: CALL_OW 437
62140: PUSH
62141: LD_INT 1
62143: ARRAY
62144: PUSH
62145: LD_INT 1
62147: ARRAY
62148: EQUAL
62149: PUSH
62150: LD_VAR 0 2
62154: PUSH
62155: LD_VAR 0 1
62159: PPUSH
62160: CALL_OW 437
62164: PUSH
62165: LD_INT 1
62167: ARRAY
62168: PUSH
62169: LD_INT 2
62171: ARRAY
62172: EQUAL
62173: AND
62174: PUSH
62175: LD_VAR 0 3
62179: PUSH
62180: LD_VAR 0 1
62184: PPUSH
62185: CALL_OW 437
62189: PUSH
62190: LD_INT 1
62192: ARRAY
62193: PUSH
62194: LD_INT 3
62196: ARRAY
62197: EQUAL
62198: AND
62199: IFFALSE 62209
// result := true ;
62201: LD_ADDR_VAR 0 4
62205: PUSH
62206: LD_INT 1
62208: ST_TO_ADDR
// end ; end ;
62209: LD_VAR 0 4
62213: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
62214: LD_INT 0
62216: PPUSH
62217: PPUSH
62218: PPUSH
62219: PPUSH
// if not unit or not area then
62220: LD_VAR 0 1
62224: NOT
62225: PUSH
62226: LD_VAR 0 2
62230: NOT
62231: OR
62232: IFFALSE 62236
// exit ;
62234: GO 62400
// tmp := AreaToList ( area , i ) ;
62236: LD_ADDR_VAR 0 6
62240: PUSH
62241: LD_VAR 0 2
62245: PPUSH
62246: LD_VAR 0 5
62250: PPUSH
62251: CALL_OW 517
62255: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
62256: LD_ADDR_VAR 0 5
62260: PUSH
62261: DOUBLE
62262: LD_INT 1
62264: DEC
62265: ST_TO_ADDR
62266: LD_VAR 0 6
62270: PUSH
62271: LD_INT 1
62273: ARRAY
62274: PUSH
62275: FOR_TO
62276: IFFALSE 62398
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
62278: LD_ADDR_VAR 0 7
62282: PUSH
62283: LD_VAR 0 6
62287: PUSH
62288: LD_INT 1
62290: ARRAY
62291: PUSH
62292: LD_VAR 0 5
62296: ARRAY
62297: PUSH
62298: LD_VAR 0 6
62302: PUSH
62303: LD_INT 2
62305: ARRAY
62306: PUSH
62307: LD_VAR 0 5
62311: ARRAY
62312: PUSH
62313: EMPTY
62314: LIST
62315: LIST
62316: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
62317: LD_VAR 0 7
62321: PUSH
62322: LD_INT 1
62324: ARRAY
62325: PPUSH
62326: LD_VAR 0 7
62330: PUSH
62331: LD_INT 2
62333: ARRAY
62334: PPUSH
62335: CALL_OW 428
62339: PUSH
62340: LD_INT 0
62342: EQUAL
62343: IFFALSE 62396
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
62345: LD_VAR 0 1
62349: PPUSH
62350: LD_VAR 0 7
62354: PUSH
62355: LD_INT 1
62357: ARRAY
62358: PPUSH
62359: LD_VAR 0 7
62363: PUSH
62364: LD_INT 2
62366: ARRAY
62367: PPUSH
62368: LD_VAR 0 3
62372: PPUSH
62373: CALL_OW 48
// result := IsPlaced ( unit ) ;
62377: LD_ADDR_VAR 0 4
62381: PUSH
62382: LD_VAR 0 1
62386: PPUSH
62387: CALL_OW 305
62391: ST_TO_ADDR
// exit ;
62392: POP
62393: POP
62394: GO 62400
// end ; end ;
62396: GO 62275
62398: POP
62399: POP
// end ;
62400: LD_VAR 0 4
62404: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
62405: LD_INT 0
62407: PPUSH
62408: PPUSH
62409: PPUSH
// if not side or side > 8 then
62410: LD_VAR 0 1
62414: NOT
62415: PUSH
62416: LD_VAR 0 1
62420: PUSH
62421: LD_INT 8
62423: GREATER
62424: OR
62425: IFFALSE 62429
// exit ;
62427: GO 62616
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
62429: LD_ADDR_VAR 0 4
62433: PUSH
62434: LD_INT 22
62436: PUSH
62437: LD_VAR 0 1
62441: PUSH
62442: EMPTY
62443: LIST
62444: LIST
62445: PUSH
62446: LD_INT 21
62448: PUSH
62449: LD_INT 3
62451: PUSH
62452: EMPTY
62453: LIST
62454: LIST
62455: PUSH
62456: EMPTY
62457: LIST
62458: LIST
62459: PPUSH
62460: CALL_OW 69
62464: ST_TO_ADDR
// if not tmp then
62465: LD_VAR 0 4
62469: NOT
62470: IFFALSE 62474
// exit ;
62472: GO 62616
// enable_addtolog := true ;
62474: LD_ADDR_OWVAR 81
62478: PUSH
62479: LD_INT 1
62481: ST_TO_ADDR
// AddToLog ( [ ) ;
62482: LD_STRING [
62484: PPUSH
62485: CALL_OW 561
// for i in tmp do
62489: LD_ADDR_VAR 0 3
62493: PUSH
62494: LD_VAR 0 4
62498: PUSH
62499: FOR_IN
62500: IFFALSE 62607
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
62502: LD_STRING [
62504: PUSH
62505: LD_VAR 0 3
62509: PPUSH
62510: CALL_OW 266
62514: STR
62515: PUSH
62516: LD_STRING , 
62518: STR
62519: PUSH
62520: LD_VAR 0 3
62524: PPUSH
62525: CALL_OW 250
62529: STR
62530: PUSH
62531: LD_STRING , 
62533: STR
62534: PUSH
62535: LD_VAR 0 3
62539: PPUSH
62540: CALL_OW 251
62544: STR
62545: PUSH
62546: LD_STRING , 
62548: STR
62549: PUSH
62550: LD_VAR 0 3
62554: PPUSH
62555: CALL_OW 254
62559: STR
62560: PUSH
62561: LD_STRING , 
62563: STR
62564: PUSH
62565: LD_VAR 0 3
62569: PPUSH
62570: LD_INT 1
62572: PPUSH
62573: CALL_OW 268
62577: STR
62578: PUSH
62579: LD_STRING , 
62581: STR
62582: PUSH
62583: LD_VAR 0 3
62587: PPUSH
62588: LD_INT 2
62590: PPUSH
62591: CALL_OW 268
62595: STR
62596: PUSH
62597: LD_STRING ],
62599: STR
62600: PPUSH
62601: CALL_OW 561
// end ;
62605: GO 62499
62607: POP
62608: POP
// AddToLog ( ]; ) ;
62609: LD_STRING ];
62611: PPUSH
62612: CALL_OW 561
// end ;
62616: LD_VAR 0 2
62620: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
62621: LD_INT 0
62623: PPUSH
62624: PPUSH
62625: PPUSH
62626: PPUSH
62627: PPUSH
// if not area or not rate or not max then
62628: LD_VAR 0 1
62632: NOT
62633: PUSH
62634: LD_VAR 0 2
62638: NOT
62639: OR
62640: PUSH
62641: LD_VAR 0 4
62645: NOT
62646: OR
62647: IFFALSE 62651
// exit ;
62649: GO 62843
// while 1 do
62651: LD_INT 1
62653: IFFALSE 62843
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
62655: LD_ADDR_VAR 0 9
62659: PUSH
62660: LD_VAR 0 1
62664: PPUSH
62665: LD_INT 1
62667: PPUSH
62668: CALL_OW 287
62672: PUSH
62673: LD_INT 10
62675: MUL
62676: ST_TO_ADDR
// r := rate / 10 ;
62677: LD_ADDR_VAR 0 7
62681: PUSH
62682: LD_VAR 0 2
62686: PUSH
62687: LD_INT 10
62689: DIVREAL
62690: ST_TO_ADDR
// time := 1 1$00 ;
62691: LD_ADDR_VAR 0 8
62695: PUSH
62696: LD_INT 2100
62698: ST_TO_ADDR
// if amount < min then
62699: LD_VAR 0 9
62703: PUSH
62704: LD_VAR 0 3
62708: LESS
62709: IFFALSE 62727
// r := r * 2 else
62711: LD_ADDR_VAR 0 7
62715: PUSH
62716: LD_VAR 0 7
62720: PUSH
62721: LD_INT 2
62723: MUL
62724: ST_TO_ADDR
62725: GO 62753
// if amount > max then
62727: LD_VAR 0 9
62731: PUSH
62732: LD_VAR 0 4
62736: GREATER
62737: IFFALSE 62753
// r := r / 2 ;
62739: LD_ADDR_VAR 0 7
62743: PUSH
62744: LD_VAR 0 7
62748: PUSH
62749: LD_INT 2
62751: DIVREAL
62752: ST_TO_ADDR
// time := time / r ;
62753: LD_ADDR_VAR 0 8
62757: PUSH
62758: LD_VAR 0 8
62762: PUSH
62763: LD_VAR 0 7
62767: DIVREAL
62768: ST_TO_ADDR
// if time < 0 then
62769: LD_VAR 0 8
62773: PUSH
62774: LD_INT 0
62776: LESS
62777: IFFALSE 62794
// time := time * - 1 ;
62779: LD_ADDR_VAR 0 8
62783: PUSH
62784: LD_VAR 0 8
62788: PUSH
62789: LD_INT 1
62791: NEG
62792: MUL
62793: ST_TO_ADDR
// wait ( time ) ;
62794: LD_VAR 0 8
62798: PPUSH
62799: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
62803: LD_INT 35
62805: PPUSH
62806: LD_INT 875
62808: PPUSH
62809: CALL_OW 12
62813: PPUSH
62814: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
62818: LD_INT 1
62820: PPUSH
62821: LD_INT 5
62823: PPUSH
62824: CALL_OW 12
62828: PPUSH
62829: LD_VAR 0 1
62833: PPUSH
62834: LD_INT 1
62836: PPUSH
62837: CALL_OW 55
// end ;
62841: GO 62651
// end ;
62843: LD_VAR 0 5
62847: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
62848: LD_INT 0
62850: PPUSH
62851: PPUSH
62852: PPUSH
62853: PPUSH
62854: PPUSH
62855: PPUSH
62856: PPUSH
62857: PPUSH
// if not turrets or not factories then
62858: LD_VAR 0 1
62862: NOT
62863: PUSH
62864: LD_VAR 0 2
62868: NOT
62869: OR
62870: IFFALSE 62874
// exit ;
62872: GO 63181
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
62874: LD_ADDR_VAR 0 10
62878: PUSH
62879: LD_INT 5
62881: PUSH
62882: LD_INT 6
62884: PUSH
62885: EMPTY
62886: LIST
62887: LIST
62888: PUSH
62889: LD_INT 2
62891: PUSH
62892: LD_INT 4
62894: PUSH
62895: EMPTY
62896: LIST
62897: LIST
62898: PUSH
62899: LD_INT 3
62901: PUSH
62902: LD_INT 5
62904: PUSH
62905: EMPTY
62906: LIST
62907: LIST
62908: PUSH
62909: EMPTY
62910: LIST
62911: LIST
62912: LIST
62913: PUSH
62914: LD_INT 24
62916: PUSH
62917: LD_INT 25
62919: PUSH
62920: EMPTY
62921: LIST
62922: LIST
62923: PUSH
62924: LD_INT 23
62926: PUSH
62927: LD_INT 27
62929: PUSH
62930: EMPTY
62931: LIST
62932: LIST
62933: PUSH
62934: EMPTY
62935: LIST
62936: LIST
62937: PUSH
62938: LD_INT 42
62940: PUSH
62941: LD_INT 43
62943: PUSH
62944: EMPTY
62945: LIST
62946: LIST
62947: PUSH
62948: LD_INT 44
62950: PUSH
62951: LD_INT 46
62953: PUSH
62954: EMPTY
62955: LIST
62956: LIST
62957: PUSH
62958: LD_INT 45
62960: PUSH
62961: LD_INT 47
62963: PUSH
62964: EMPTY
62965: LIST
62966: LIST
62967: PUSH
62968: EMPTY
62969: LIST
62970: LIST
62971: LIST
62972: PUSH
62973: EMPTY
62974: LIST
62975: LIST
62976: LIST
62977: ST_TO_ADDR
// result := [ ] ;
62978: LD_ADDR_VAR 0 3
62982: PUSH
62983: EMPTY
62984: ST_TO_ADDR
// for i in turrets do
62985: LD_ADDR_VAR 0 4
62989: PUSH
62990: LD_VAR 0 1
62994: PUSH
62995: FOR_IN
62996: IFFALSE 63179
// begin nat := GetNation ( i ) ;
62998: LD_ADDR_VAR 0 7
63002: PUSH
63003: LD_VAR 0 4
63007: PPUSH
63008: CALL_OW 248
63012: ST_TO_ADDR
// weapon := 0 ;
63013: LD_ADDR_VAR 0 8
63017: PUSH
63018: LD_INT 0
63020: ST_TO_ADDR
// if not nat then
63021: LD_VAR 0 7
63025: NOT
63026: IFFALSE 63030
// continue ;
63028: GO 62995
// for j in list [ nat ] do
63030: LD_ADDR_VAR 0 5
63034: PUSH
63035: LD_VAR 0 10
63039: PUSH
63040: LD_VAR 0 7
63044: ARRAY
63045: PUSH
63046: FOR_IN
63047: IFFALSE 63088
// if GetBWeapon ( i ) = j [ 1 ] then
63049: LD_VAR 0 4
63053: PPUSH
63054: CALL_OW 269
63058: PUSH
63059: LD_VAR 0 5
63063: PUSH
63064: LD_INT 1
63066: ARRAY
63067: EQUAL
63068: IFFALSE 63086
// begin weapon := j [ 2 ] ;
63070: LD_ADDR_VAR 0 8
63074: PUSH
63075: LD_VAR 0 5
63079: PUSH
63080: LD_INT 2
63082: ARRAY
63083: ST_TO_ADDR
// break ;
63084: GO 63088
// end ;
63086: GO 63046
63088: POP
63089: POP
// if not weapon then
63090: LD_VAR 0 8
63094: NOT
63095: IFFALSE 63099
// continue ;
63097: GO 62995
// for k in factories do
63099: LD_ADDR_VAR 0 6
63103: PUSH
63104: LD_VAR 0 2
63108: PUSH
63109: FOR_IN
63110: IFFALSE 63175
// begin weapons := AvailableWeaponList ( k ) ;
63112: LD_ADDR_VAR 0 9
63116: PUSH
63117: LD_VAR 0 6
63121: PPUSH
63122: CALL_OW 478
63126: ST_TO_ADDR
// if not weapons then
63127: LD_VAR 0 9
63131: NOT
63132: IFFALSE 63136
// continue ;
63134: GO 63109
// if weapon in weapons then
63136: LD_VAR 0 8
63140: PUSH
63141: LD_VAR 0 9
63145: IN
63146: IFFALSE 63173
// begin result := [ i , weapon ] ;
63148: LD_ADDR_VAR 0 3
63152: PUSH
63153: LD_VAR 0 4
63157: PUSH
63158: LD_VAR 0 8
63162: PUSH
63163: EMPTY
63164: LIST
63165: LIST
63166: ST_TO_ADDR
// exit ;
63167: POP
63168: POP
63169: POP
63170: POP
63171: GO 63181
// end ; end ;
63173: GO 63109
63175: POP
63176: POP
// end ;
63177: GO 62995
63179: POP
63180: POP
// end ;
63181: LD_VAR 0 3
63185: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
63186: LD_INT 0
63188: PPUSH
// if not side or side > 8 then
63189: LD_VAR 0 3
63193: NOT
63194: PUSH
63195: LD_VAR 0 3
63199: PUSH
63200: LD_INT 8
63202: GREATER
63203: OR
63204: IFFALSE 63208
// exit ;
63206: GO 63267
// if not range then
63208: LD_VAR 0 4
63212: NOT
63213: IFFALSE 63224
// range := - 12 ;
63215: LD_ADDR_VAR 0 4
63219: PUSH
63220: LD_INT 12
63222: NEG
63223: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
63224: LD_VAR 0 1
63228: PPUSH
63229: LD_VAR 0 2
63233: PPUSH
63234: LD_VAR 0 3
63238: PPUSH
63239: LD_VAR 0 4
63243: PPUSH
63244: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
63248: LD_VAR 0 1
63252: PPUSH
63253: LD_VAR 0 2
63257: PPUSH
63258: LD_VAR 0 3
63262: PPUSH
63263: CALL_OW 331
// end ;
63267: LD_VAR 0 5
63271: RET
// export function Video ( mode ) ; begin
63272: LD_INT 0
63274: PPUSH
// ingame_video = mode ;
63275: LD_ADDR_OWVAR 52
63279: PUSH
63280: LD_VAR 0 1
63284: ST_TO_ADDR
// interface_hidden = mode ;
63285: LD_ADDR_OWVAR 54
63289: PUSH
63290: LD_VAR 0 1
63294: ST_TO_ADDR
// end ;
63295: LD_VAR 0 2
63299: RET
// export function Join ( array , element ) ; begin
63300: LD_INT 0
63302: PPUSH
// result := Replace ( array , array + 1 , element ) ;
63303: LD_ADDR_VAR 0 3
63307: PUSH
63308: LD_VAR 0 1
63312: PPUSH
63313: LD_VAR 0 1
63317: PUSH
63318: LD_INT 1
63320: PLUS
63321: PPUSH
63322: LD_VAR 0 2
63326: PPUSH
63327: CALL_OW 1
63331: ST_TO_ADDR
// end ;
63332: LD_VAR 0 3
63336: RET
// export function JoinUnion ( array , element ) ; begin
63337: LD_INT 0
63339: PPUSH
// result := array union element ;
63340: LD_ADDR_VAR 0 3
63344: PUSH
63345: LD_VAR 0 1
63349: PUSH
63350: LD_VAR 0 2
63354: UNION
63355: ST_TO_ADDR
// end ;
63356: LD_VAR 0 3
63360: RET
// export function GetBehemoths ( side ) ; begin
63361: LD_INT 0
63363: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
63364: LD_ADDR_VAR 0 2
63368: PUSH
63369: LD_INT 22
63371: PUSH
63372: LD_VAR 0 1
63376: PUSH
63377: EMPTY
63378: LIST
63379: LIST
63380: PUSH
63381: LD_INT 31
63383: PUSH
63384: LD_INT 25
63386: PUSH
63387: EMPTY
63388: LIST
63389: LIST
63390: PUSH
63391: EMPTY
63392: LIST
63393: LIST
63394: PPUSH
63395: CALL_OW 69
63399: ST_TO_ADDR
// end ;
63400: LD_VAR 0 2
63404: RET
// export function Shuffle ( array ) ; var i , index ; begin
63405: LD_INT 0
63407: PPUSH
63408: PPUSH
63409: PPUSH
// result := [ ] ;
63410: LD_ADDR_VAR 0 2
63414: PUSH
63415: EMPTY
63416: ST_TO_ADDR
// if not array then
63417: LD_VAR 0 1
63421: NOT
63422: IFFALSE 63426
// exit ;
63424: GO 63525
// Randomize ;
63426: CALL_OW 10
// for i = array downto 1 do
63430: LD_ADDR_VAR 0 3
63434: PUSH
63435: DOUBLE
63436: LD_VAR 0 1
63440: INC
63441: ST_TO_ADDR
63442: LD_INT 1
63444: PUSH
63445: FOR_DOWNTO
63446: IFFALSE 63523
// begin index := rand ( 1 , array ) ;
63448: LD_ADDR_VAR 0 4
63452: PUSH
63453: LD_INT 1
63455: PPUSH
63456: LD_VAR 0 1
63460: PPUSH
63461: CALL_OW 12
63465: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
63466: LD_ADDR_VAR 0 2
63470: PUSH
63471: LD_VAR 0 2
63475: PPUSH
63476: LD_VAR 0 2
63480: PUSH
63481: LD_INT 1
63483: PLUS
63484: PPUSH
63485: LD_VAR 0 1
63489: PUSH
63490: LD_VAR 0 4
63494: ARRAY
63495: PPUSH
63496: CALL_OW 2
63500: ST_TO_ADDR
// array := Delete ( array , index ) ;
63501: LD_ADDR_VAR 0 1
63505: PUSH
63506: LD_VAR 0 1
63510: PPUSH
63511: LD_VAR 0 4
63515: PPUSH
63516: CALL_OW 3
63520: ST_TO_ADDR
// end ;
63521: GO 63445
63523: POP
63524: POP
// end ;
63525: LD_VAR 0 2
63529: RET
// export function GetBaseMaterials ( base ) ; begin
63530: LD_INT 0
63532: PPUSH
// result := [ 0 , 0 , 0 ] ;
63533: LD_ADDR_VAR 0 2
63537: PUSH
63538: LD_INT 0
63540: PUSH
63541: LD_INT 0
63543: PUSH
63544: LD_INT 0
63546: PUSH
63547: EMPTY
63548: LIST
63549: LIST
63550: LIST
63551: ST_TO_ADDR
// if not base then
63552: LD_VAR 0 1
63556: NOT
63557: IFFALSE 63561
// exit ;
63559: GO 63610
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
63561: LD_ADDR_VAR 0 2
63565: PUSH
63566: LD_VAR 0 1
63570: PPUSH
63571: LD_INT 1
63573: PPUSH
63574: CALL_OW 275
63578: PUSH
63579: LD_VAR 0 1
63583: PPUSH
63584: LD_INT 2
63586: PPUSH
63587: CALL_OW 275
63591: PUSH
63592: LD_VAR 0 1
63596: PPUSH
63597: LD_INT 3
63599: PPUSH
63600: CALL_OW 275
63604: PUSH
63605: EMPTY
63606: LIST
63607: LIST
63608: LIST
63609: ST_TO_ADDR
// end ;
63610: LD_VAR 0 2
63614: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
63615: LD_INT 0
63617: PPUSH
63618: PPUSH
// result := array ;
63619: LD_ADDR_VAR 0 3
63623: PUSH
63624: LD_VAR 0 1
63628: ST_TO_ADDR
// if size > 0 then
63629: LD_VAR 0 2
63633: PUSH
63634: LD_INT 0
63636: GREATER
63637: IFFALSE 63683
// for i := array downto size do
63639: LD_ADDR_VAR 0 4
63643: PUSH
63644: DOUBLE
63645: LD_VAR 0 1
63649: INC
63650: ST_TO_ADDR
63651: LD_VAR 0 2
63655: PUSH
63656: FOR_DOWNTO
63657: IFFALSE 63681
// result := Delete ( result , result ) ;
63659: LD_ADDR_VAR 0 3
63663: PUSH
63664: LD_VAR 0 3
63668: PPUSH
63669: LD_VAR 0 3
63673: PPUSH
63674: CALL_OW 3
63678: ST_TO_ADDR
63679: GO 63656
63681: POP
63682: POP
// end ;
63683: LD_VAR 0 3
63687: RET
// export function ComExit ( unit ) ; var tmp ; begin
63688: LD_INT 0
63690: PPUSH
63691: PPUSH
// if not IsInUnit ( unit ) then
63692: LD_VAR 0 1
63696: PPUSH
63697: CALL_OW 310
63701: NOT
63702: IFFALSE 63706
// exit ;
63704: GO 63766
// tmp := IsInUnit ( unit ) ;
63706: LD_ADDR_VAR 0 3
63710: PUSH
63711: LD_VAR 0 1
63715: PPUSH
63716: CALL_OW 310
63720: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
63721: LD_VAR 0 3
63725: PPUSH
63726: CALL_OW 247
63730: PUSH
63731: LD_INT 2
63733: EQUAL
63734: IFFALSE 63747
// ComExitVehicle ( unit ) else
63736: LD_VAR 0 1
63740: PPUSH
63741: CALL_OW 121
63745: GO 63756
// ComExitBuilding ( unit ) ;
63747: LD_VAR 0 1
63751: PPUSH
63752: CALL_OW 122
// result := tmp ;
63756: LD_ADDR_VAR 0 2
63760: PUSH
63761: LD_VAR 0 3
63765: ST_TO_ADDR
// end ;
63766: LD_VAR 0 2
63770: RET
// export function ComExitAll ( units ) ; var i ; begin
63771: LD_INT 0
63773: PPUSH
63774: PPUSH
// if not units then
63775: LD_VAR 0 1
63779: NOT
63780: IFFALSE 63784
// exit ;
63782: GO 63810
// for i in units do
63784: LD_ADDR_VAR 0 3
63788: PUSH
63789: LD_VAR 0 1
63793: PUSH
63794: FOR_IN
63795: IFFALSE 63808
// ComExit ( i ) ;
63797: LD_VAR 0 3
63801: PPUSH
63802: CALL 63688 0 1
63806: GO 63794
63808: POP
63809: POP
// end ;
63810: LD_VAR 0 2
63814: RET
// export function ResetHc ; begin
63815: LD_INT 0
63817: PPUSH
// InitHc ;
63818: CALL_OW 19
// hc_importance := 0 ;
63822: LD_ADDR_OWVAR 32
63826: PUSH
63827: LD_INT 0
63829: ST_TO_ADDR
// end ;
63830: LD_VAR 0 1
63834: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
63835: LD_INT 0
63837: PPUSH
63838: PPUSH
63839: PPUSH
// _x := ( x1 + x2 ) div 2 ;
63840: LD_ADDR_VAR 0 6
63844: PUSH
63845: LD_VAR 0 1
63849: PUSH
63850: LD_VAR 0 3
63854: PLUS
63855: PUSH
63856: LD_INT 2
63858: DIV
63859: ST_TO_ADDR
// if _x < 0 then
63860: LD_VAR 0 6
63864: PUSH
63865: LD_INT 0
63867: LESS
63868: IFFALSE 63885
// _x := _x * - 1 ;
63870: LD_ADDR_VAR 0 6
63874: PUSH
63875: LD_VAR 0 6
63879: PUSH
63880: LD_INT 1
63882: NEG
63883: MUL
63884: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
63885: LD_ADDR_VAR 0 7
63889: PUSH
63890: LD_VAR 0 2
63894: PUSH
63895: LD_VAR 0 4
63899: PLUS
63900: PUSH
63901: LD_INT 2
63903: DIV
63904: ST_TO_ADDR
// if _y < 0 then
63905: LD_VAR 0 7
63909: PUSH
63910: LD_INT 0
63912: LESS
63913: IFFALSE 63930
// _y := _y * - 1 ;
63915: LD_ADDR_VAR 0 7
63919: PUSH
63920: LD_VAR 0 7
63924: PUSH
63925: LD_INT 1
63927: NEG
63928: MUL
63929: ST_TO_ADDR
// result := [ _x , _y ] ;
63930: LD_ADDR_VAR 0 5
63934: PUSH
63935: LD_VAR 0 6
63939: PUSH
63940: LD_VAR 0 7
63944: PUSH
63945: EMPTY
63946: LIST
63947: LIST
63948: ST_TO_ADDR
// end ;
63949: LD_VAR 0 5
63953: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
63954: LD_INT 0
63956: PPUSH
63957: PPUSH
63958: PPUSH
63959: PPUSH
// task := GetTaskList ( unit ) ;
63960: LD_ADDR_VAR 0 7
63964: PUSH
63965: LD_VAR 0 1
63969: PPUSH
63970: CALL_OW 437
63974: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
63975: LD_VAR 0 7
63979: NOT
63980: PUSH
63981: LD_VAR 0 1
63985: PPUSH
63986: LD_VAR 0 2
63990: PPUSH
63991: CALL_OW 308
63995: NOT
63996: AND
63997: IFFALSE 64001
// exit ;
63999: GO 64119
// if IsInArea ( unit , area ) then
64001: LD_VAR 0 1
64005: PPUSH
64006: LD_VAR 0 2
64010: PPUSH
64011: CALL_OW 308
64015: IFFALSE 64033
// begin ComMoveToArea ( unit , goAway ) ;
64017: LD_VAR 0 1
64021: PPUSH
64022: LD_VAR 0 3
64026: PPUSH
64027: CALL_OW 113
// exit ;
64031: GO 64119
// end ; if task [ 1 ] [ 1 ] <> M then
64033: LD_VAR 0 7
64037: PUSH
64038: LD_INT 1
64040: ARRAY
64041: PUSH
64042: LD_INT 1
64044: ARRAY
64045: PUSH
64046: LD_STRING M
64048: NONEQUAL
64049: IFFALSE 64053
// exit ;
64051: GO 64119
// x := task [ 1 ] [ 2 ] ;
64053: LD_ADDR_VAR 0 5
64057: PUSH
64058: LD_VAR 0 7
64062: PUSH
64063: LD_INT 1
64065: ARRAY
64066: PUSH
64067: LD_INT 2
64069: ARRAY
64070: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
64071: LD_ADDR_VAR 0 6
64075: PUSH
64076: LD_VAR 0 7
64080: PUSH
64081: LD_INT 1
64083: ARRAY
64084: PUSH
64085: LD_INT 3
64087: ARRAY
64088: ST_TO_ADDR
// if InArea ( x , y , area ) then
64089: LD_VAR 0 5
64093: PPUSH
64094: LD_VAR 0 6
64098: PPUSH
64099: LD_VAR 0 2
64103: PPUSH
64104: CALL_OW 309
64108: IFFALSE 64119
// ComStop ( unit ) ;
64110: LD_VAR 0 1
64114: PPUSH
64115: CALL_OW 141
// end ;
64119: LD_VAR 0 4
64123: RET
// export function Abs ( value ) ; begin
64124: LD_INT 0
64126: PPUSH
// result := value ;
64127: LD_ADDR_VAR 0 2
64131: PUSH
64132: LD_VAR 0 1
64136: ST_TO_ADDR
// if value < 0 then
64137: LD_VAR 0 1
64141: PUSH
64142: LD_INT 0
64144: LESS
64145: IFFALSE 64162
// result := value * - 1 ;
64147: LD_ADDR_VAR 0 2
64151: PUSH
64152: LD_VAR 0 1
64156: PUSH
64157: LD_INT 1
64159: NEG
64160: MUL
64161: ST_TO_ADDR
// end ;
64162: LD_VAR 0 2
64166: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
64167: LD_INT 0
64169: PPUSH
64170: PPUSH
64171: PPUSH
64172: PPUSH
64173: PPUSH
64174: PPUSH
64175: PPUSH
64176: PPUSH
// if not unit or not building then
64177: LD_VAR 0 1
64181: NOT
64182: PUSH
64183: LD_VAR 0 2
64187: NOT
64188: OR
64189: IFFALSE 64193
// exit ;
64191: GO 64419
// x := GetX ( building ) ;
64193: LD_ADDR_VAR 0 4
64197: PUSH
64198: LD_VAR 0 2
64202: PPUSH
64203: CALL_OW 250
64207: ST_TO_ADDR
// y := GetY ( building ) ;
64208: LD_ADDR_VAR 0 6
64212: PUSH
64213: LD_VAR 0 2
64217: PPUSH
64218: CALL_OW 251
64222: ST_TO_ADDR
// d := GetDir ( building ) ;
64223: LD_ADDR_VAR 0 8
64227: PUSH
64228: LD_VAR 0 2
64232: PPUSH
64233: CALL_OW 254
64237: ST_TO_ADDR
// r := 4 ;
64238: LD_ADDR_VAR 0 9
64242: PUSH
64243: LD_INT 4
64245: ST_TO_ADDR
// for i := 1 to 5 do
64246: LD_ADDR_VAR 0 10
64250: PUSH
64251: DOUBLE
64252: LD_INT 1
64254: DEC
64255: ST_TO_ADDR
64256: LD_INT 5
64258: PUSH
64259: FOR_TO
64260: IFFALSE 64417
// begin _x := ShiftX ( x , d , r + i ) ;
64262: LD_ADDR_VAR 0 5
64266: PUSH
64267: LD_VAR 0 4
64271: PPUSH
64272: LD_VAR 0 8
64276: PPUSH
64277: LD_VAR 0 9
64281: PUSH
64282: LD_VAR 0 10
64286: PLUS
64287: PPUSH
64288: CALL_OW 272
64292: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
64293: LD_ADDR_VAR 0 7
64297: PUSH
64298: LD_VAR 0 6
64302: PPUSH
64303: LD_VAR 0 8
64307: PPUSH
64308: LD_VAR 0 9
64312: PUSH
64313: LD_VAR 0 10
64317: PLUS
64318: PPUSH
64319: CALL_OW 273
64323: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
64324: LD_VAR 0 5
64328: PPUSH
64329: LD_VAR 0 7
64333: PPUSH
64334: CALL_OW 488
64338: PUSH
64339: LD_VAR 0 5
64343: PPUSH
64344: LD_VAR 0 7
64348: PPUSH
64349: CALL_OW 428
64353: PPUSH
64354: CALL_OW 247
64358: PUSH
64359: LD_INT 3
64361: PUSH
64362: LD_INT 2
64364: PUSH
64365: EMPTY
64366: LIST
64367: LIST
64368: IN
64369: NOT
64370: AND
64371: IFFALSE 64415
// begin ComMoveXY ( unit , _x , _y ) ;
64373: LD_VAR 0 1
64377: PPUSH
64378: LD_VAR 0 5
64382: PPUSH
64383: LD_VAR 0 7
64387: PPUSH
64388: CALL_OW 111
// result := [ _x , _y ] ;
64392: LD_ADDR_VAR 0 3
64396: PUSH
64397: LD_VAR 0 5
64401: PUSH
64402: LD_VAR 0 7
64406: PUSH
64407: EMPTY
64408: LIST
64409: LIST
64410: ST_TO_ADDR
// exit ;
64411: POP
64412: POP
64413: GO 64419
// end ; end ;
64415: GO 64259
64417: POP
64418: POP
// end ;
64419: LD_VAR 0 3
64423: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
64424: LD_INT 0
64426: PPUSH
64427: PPUSH
64428: PPUSH
// result := 0 ;
64429: LD_ADDR_VAR 0 3
64433: PUSH
64434: LD_INT 0
64436: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
64437: LD_VAR 0 1
64441: PUSH
64442: LD_INT 0
64444: LESS
64445: PUSH
64446: LD_VAR 0 1
64450: PUSH
64451: LD_INT 8
64453: GREATER
64454: OR
64455: PUSH
64456: LD_VAR 0 2
64460: PUSH
64461: LD_INT 0
64463: LESS
64464: OR
64465: PUSH
64466: LD_VAR 0 2
64470: PUSH
64471: LD_INT 8
64473: GREATER
64474: OR
64475: IFFALSE 64479
// exit ;
64477: GO 64554
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
64479: LD_ADDR_VAR 0 4
64483: PUSH
64484: LD_INT 22
64486: PUSH
64487: LD_VAR 0 2
64491: PUSH
64492: EMPTY
64493: LIST
64494: LIST
64495: PPUSH
64496: CALL_OW 69
64500: PUSH
64501: FOR_IN
64502: IFFALSE 64552
// begin un := UnitShoot ( i ) ;
64504: LD_ADDR_VAR 0 5
64508: PUSH
64509: LD_VAR 0 4
64513: PPUSH
64514: CALL_OW 504
64518: ST_TO_ADDR
// if GetSide ( un ) = side1 then
64519: LD_VAR 0 5
64523: PPUSH
64524: CALL_OW 255
64528: PUSH
64529: LD_VAR 0 1
64533: EQUAL
64534: IFFALSE 64550
// begin result := un ;
64536: LD_ADDR_VAR 0 3
64540: PUSH
64541: LD_VAR 0 5
64545: ST_TO_ADDR
// exit ;
64546: POP
64547: POP
64548: GO 64554
// end ; end ;
64550: GO 64501
64552: POP
64553: POP
// end ;
64554: LD_VAR 0 3
64558: RET
// export function GetCargoBay ( units ) ; begin
64559: LD_INT 0
64561: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
64562: LD_ADDR_VAR 0 2
64566: PUSH
64567: LD_VAR 0 1
64571: PPUSH
64572: LD_INT 2
64574: PUSH
64575: LD_INT 34
64577: PUSH
64578: LD_INT 12
64580: PUSH
64581: EMPTY
64582: LIST
64583: LIST
64584: PUSH
64585: LD_INT 34
64587: PUSH
64588: LD_INT 51
64590: PUSH
64591: EMPTY
64592: LIST
64593: LIST
64594: PUSH
64595: LD_INT 34
64597: PUSH
64598: LD_INT 32
64600: PUSH
64601: EMPTY
64602: LIST
64603: LIST
64604: PUSH
64605: LD_INT 34
64607: PUSH
64608: LD_EXP 53
64612: PUSH
64613: EMPTY
64614: LIST
64615: LIST
64616: PUSH
64617: EMPTY
64618: LIST
64619: LIST
64620: LIST
64621: LIST
64622: LIST
64623: PPUSH
64624: CALL_OW 72
64628: ST_TO_ADDR
// end ;
64629: LD_VAR 0 2
64633: RET
// export function Negate ( value ) ; begin
64634: LD_INT 0
64636: PPUSH
// result := not value ;
64637: LD_ADDR_VAR 0 2
64641: PUSH
64642: LD_VAR 0 1
64646: NOT
64647: ST_TO_ADDR
// end ;
64648: LD_VAR 0 2
64652: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; begin
64653: LD_INT 0
64655: PPUSH
// if x1 = x2 then
64656: LD_VAR 0 1
64660: PUSH
64661: LD_VAR 0 3
64665: EQUAL
64666: IFFALSE 64700
// begin if y1 > y2 then
64668: LD_VAR 0 2
64672: PUSH
64673: LD_VAR 0 4
64677: GREATER
64678: IFFALSE 64690
// result := 0 else
64680: LD_ADDR_VAR 0 5
64684: PUSH
64685: LD_INT 0
64687: ST_TO_ADDR
64688: GO 64698
// result := 3 ;
64690: LD_ADDR_VAR 0 5
64694: PUSH
64695: LD_INT 3
64697: ST_TO_ADDR
// exit ;
64698: GO 64786
// end ; if y1 = y2 then
64700: LD_VAR 0 2
64704: PUSH
64705: LD_VAR 0 4
64709: EQUAL
64710: IFFALSE 64744
// begin if x1 > x2 then
64712: LD_VAR 0 1
64716: PUSH
64717: LD_VAR 0 3
64721: GREATER
64722: IFFALSE 64734
// result := 1 else
64724: LD_ADDR_VAR 0 5
64728: PUSH
64729: LD_INT 1
64731: ST_TO_ADDR
64732: GO 64742
// result := 4 ;
64734: LD_ADDR_VAR 0 5
64738: PUSH
64739: LD_INT 4
64741: ST_TO_ADDR
// exit ;
64742: GO 64786
// end ; if x1 > x2 and y1 > y2 then
64744: LD_VAR 0 1
64748: PUSH
64749: LD_VAR 0 3
64753: GREATER
64754: PUSH
64755: LD_VAR 0 2
64759: PUSH
64760: LD_VAR 0 4
64764: GREATER
64765: AND
64766: IFFALSE 64778
// result := 2 else
64768: LD_ADDR_VAR 0 5
64772: PUSH
64773: LD_INT 2
64775: ST_TO_ADDR
64776: GO 64786
// result := 5 ;
64778: LD_ADDR_VAR 0 5
64782: PUSH
64783: LD_INT 5
64785: ST_TO_ADDR
// end ;
64786: LD_VAR 0 5
64790: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
64791: LD_INT 0
64793: PPUSH
64794: PPUSH
// if not driver or not IsInUnit ( driver ) then
64795: LD_VAR 0 1
64799: NOT
64800: PUSH
64801: LD_VAR 0 1
64805: PPUSH
64806: CALL_OW 310
64810: NOT
64811: OR
64812: IFFALSE 64816
// exit ;
64814: GO 64906
// vehicle := IsInUnit ( driver ) ;
64816: LD_ADDR_VAR 0 3
64820: PUSH
64821: LD_VAR 0 1
64825: PPUSH
64826: CALL_OW 310
64830: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
64831: LD_VAR 0 1
64835: PPUSH
64836: LD_STRING \
64838: PUSH
64839: LD_INT 0
64841: PUSH
64842: LD_INT 0
64844: PUSH
64845: LD_INT 0
64847: PUSH
64848: LD_INT 0
64850: PUSH
64851: LD_INT 0
64853: PUSH
64854: LD_INT 0
64856: PUSH
64857: EMPTY
64858: LIST
64859: LIST
64860: LIST
64861: LIST
64862: LIST
64863: LIST
64864: LIST
64865: PUSH
64866: LD_STRING E
64868: PUSH
64869: LD_INT 0
64871: PUSH
64872: LD_INT 0
64874: PUSH
64875: LD_VAR 0 3
64879: PUSH
64880: LD_INT 0
64882: PUSH
64883: LD_INT 0
64885: PUSH
64886: LD_INT 0
64888: PUSH
64889: EMPTY
64890: LIST
64891: LIST
64892: LIST
64893: LIST
64894: LIST
64895: LIST
64896: LIST
64897: PUSH
64898: EMPTY
64899: LIST
64900: LIST
64901: PPUSH
64902: CALL_OW 446
// end ;
64906: LD_VAR 0 2
64910: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
64911: LD_INT 0
64913: PPUSH
64914: PPUSH
// if not driver or not IsInUnit ( driver ) then
64915: LD_VAR 0 1
64919: NOT
64920: PUSH
64921: LD_VAR 0 1
64925: PPUSH
64926: CALL_OW 310
64930: NOT
64931: OR
64932: IFFALSE 64936
// exit ;
64934: GO 65026
// vehicle := IsInUnit ( driver ) ;
64936: LD_ADDR_VAR 0 3
64940: PUSH
64941: LD_VAR 0 1
64945: PPUSH
64946: CALL_OW 310
64950: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
64951: LD_VAR 0 1
64955: PPUSH
64956: LD_STRING \
64958: PUSH
64959: LD_INT 0
64961: PUSH
64962: LD_INT 0
64964: PUSH
64965: LD_INT 0
64967: PUSH
64968: LD_INT 0
64970: PUSH
64971: LD_INT 0
64973: PUSH
64974: LD_INT 0
64976: PUSH
64977: EMPTY
64978: LIST
64979: LIST
64980: LIST
64981: LIST
64982: LIST
64983: LIST
64984: LIST
64985: PUSH
64986: LD_STRING E
64988: PUSH
64989: LD_INT 0
64991: PUSH
64992: LD_INT 0
64994: PUSH
64995: LD_VAR 0 3
64999: PUSH
65000: LD_INT 0
65002: PUSH
65003: LD_INT 0
65005: PUSH
65006: LD_INT 0
65008: PUSH
65009: EMPTY
65010: LIST
65011: LIST
65012: LIST
65013: LIST
65014: LIST
65015: LIST
65016: LIST
65017: PUSH
65018: EMPTY
65019: LIST
65020: LIST
65021: PPUSH
65022: CALL_OW 447
// end ;
65026: LD_VAR 0 2
65030: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
65031: LD_INT 0
65033: PPUSH
65034: PPUSH
65035: PPUSH
// tmp := [ ] ;
65036: LD_ADDR_VAR 0 5
65040: PUSH
65041: EMPTY
65042: ST_TO_ADDR
// for i in units do
65043: LD_ADDR_VAR 0 4
65047: PUSH
65048: LD_VAR 0 1
65052: PUSH
65053: FOR_IN
65054: IFFALSE 65092
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
65056: LD_ADDR_VAR 0 5
65060: PUSH
65061: LD_VAR 0 5
65065: PPUSH
65066: LD_VAR 0 5
65070: PUSH
65071: LD_INT 1
65073: PLUS
65074: PPUSH
65075: LD_VAR 0 4
65079: PPUSH
65080: CALL_OW 256
65084: PPUSH
65085: CALL_OW 2
65089: ST_TO_ADDR
65090: GO 65053
65092: POP
65093: POP
// if not tmp then
65094: LD_VAR 0 5
65098: NOT
65099: IFFALSE 65103
// exit ;
65101: GO 65151
// if asc then
65103: LD_VAR 0 2
65107: IFFALSE 65131
// result := SortListByListAsc ( units , tmp ) else
65109: LD_ADDR_VAR 0 3
65113: PUSH
65114: LD_VAR 0 1
65118: PPUSH
65119: LD_VAR 0 5
65123: PPUSH
65124: CALL_OW 76
65128: ST_TO_ADDR
65129: GO 65151
// result := SortListByListDesc ( units , tmp ) ;
65131: LD_ADDR_VAR 0 3
65135: PUSH
65136: LD_VAR 0 1
65140: PPUSH
65141: LD_VAR 0 5
65145: PPUSH
65146: CALL_OW 77
65150: ST_TO_ADDR
// end ;
65151: LD_VAR 0 3
65155: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
65156: LD_INT 0
65158: PPUSH
65159: PPUSH
// task := GetTaskList ( mech ) ;
65160: LD_ADDR_VAR 0 4
65164: PUSH
65165: LD_VAR 0 1
65169: PPUSH
65170: CALL_OW 437
65174: ST_TO_ADDR
// if not task then
65175: LD_VAR 0 4
65179: NOT
65180: IFFALSE 65184
// exit ;
65182: GO 65226
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
65184: LD_ADDR_VAR 0 3
65188: PUSH
65189: LD_VAR 0 4
65193: PUSH
65194: LD_INT 1
65196: ARRAY
65197: PUSH
65198: LD_INT 1
65200: ARRAY
65201: PUSH
65202: LD_STRING r
65204: EQUAL
65205: PUSH
65206: LD_VAR 0 4
65210: PUSH
65211: LD_INT 1
65213: ARRAY
65214: PUSH
65215: LD_INT 4
65217: ARRAY
65218: PUSH
65219: LD_VAR 0 2
65223: EQUAL
65224: AND
65225: ST_TO_ADDR
// end ;
65226: LD_VAR 0 3
65230: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
65231: LD_INT 0
65233: PPUSH
// SetDir ( unit , d ) ;
65234: LD_VAR 0 1
65238: PPUSH
65239: LD_VAR 0 4
65243: PPUSH
65244: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
65248: LD_VAR 0 1
65252: PPUSH
65253: LD_VAR 0 2
65257: PPUSH
65258: LD_VAR 0 3
65262: PPUSH
65263: LD_VAR 0 5
65267: PPUSH
65268: CALL_OW 48
// end ;
65272: LD_VAR 0 6
65276: RET
// export function ToNaturalNumber ( number ) ; begin
65277: LD_INT 0
65279: PPUSH
// result := number div 1 ;
65280: LD_ADDR_VAR 0 2
65284: PUSH
65285: LD_VAR 0 1
65289: PUSH
65290: LD_INT 1
65292: DIV
65293: ST_TO_ADDR
// if number < 0 then
65294: LD_VAR 0 1
65298: PUSH
65299: LD_INT 0
65301: LESS
65302: IFFALSE 65312
// result := 0 ;
65304: LD_ADDR_VAR 0 2
65308: PUSH
65309: LD_INT 0
65311: ST_TO_ADDR
// end ;
65312: LD_VAR 0 2
65316: RET
// export function SortByClass ( units , class ) ; var un ; begin
65317: LD_INT 0
65319: PPUSH
65320: PPUSH
// if not units or not class then
65321: LD_VAR 0 1
65325: NOT
65326: PUSH
65327: LD_VAR 0 2
65331: NOT
65332: OR
65333: IFFALSE 65337
// exit ;
65335: GO 65432
// result := [ ] ;
65337: LD_ADDR_VAR 0 3
65341: PUSH
65342: EMPTY
65343: ST_TO_ADDR
// for un in units do
65344: LD_ADDR_VAR 0 4
65348: PUSH
65349: LD_VAR 0 1
65353: PUSH
65354: FOR_IN
65355: IFFALSE 65430
// if GetClass ( un ) = class then
65357: LD_VAR 0 4
65361: PPUSH
65362: CALL_OW 257
65366: PUSH
65367: LD_VAR 0 2
65371: EQUAL
65372: IFFALSE 65399
// result := Insert ( result , 1 , un ) else
65374: LD_ADDR_VAR 0 3
65378: PUSH
65379: LD_VAR 0 3
65383: PPUSH
65384: LD_INT 1
65386: PPUSH
65387: LD_VAR 0 4
65391: PPUSH
65392: CALL_OW 2
65396: ST_TO_ADDR
65397: GO 65428
// result := Replace ( result , result + 1 , un ) ;
65399: LD_ADDR_VAR 0 3
65403: PUSH
65404: LD_VAR 0 3
65408: PPUSH
65409: LD_VAR 0 3
65413: PUSH
65414: LD_INT 1
65416: PLUS
65417: PPUSH
65418: LD_VAR 0 4
65422: PPUSH
65423: CALL_OW 1
65427: ST_TO_ADDR
65428: GO 65354
65430: POP
65431: POP
// end ;
65432: LD_VAR 0 3
65436: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
65437: LD_INT 0
65439: PPUSH
65440: PPUSH
65441: PPUSH
65442: PPUSH
65443: PPUSH
65444: PPUSH
65445: PPUSH
// result := [ ] ;
65446: LD_ADDR_VAR 0 4
65450: PUSH
65451: EMPTY
65452: ST_TO_ADDR
// if x - r < 0 then
65453: LD_VAR 0 1
65457: PUSH
65458: LD_VAR 0 3
65462: MINUS
65463: PUSH
65464: LD_INT 0
65466: LESS
65467: IFFALSE 65479
// min_x := 0 else
65469: LD_ADDR_VAR 0 8
65473: PUSH
65474: LD_INT 0
65476: ST_TO_ADDR
65477: GO 65495
// min_x := x - r ;
65479: LD_ADDR_VAR 0 8
65483: PUSH
65484: LD_VAR 0 1
65488: PUSH
65489: LD_VAR 0 3
65493: MINUS
65494: ST_TO_ADDR
// if y - r < 0 then
65495: LD_VAR 0 2
65499: PUSH
65500: LD_VAR 0 3
65504: MINUS
65505: PUSH
65506: LD_INT 0
65508: LESS
65509: IFFALSE 65521
// min_y := 0 else
65511: LD_ADDR_VAR 0 7
65515: PUSH
65516: LD_INT 0
65518: ST_TO_ADDR
65519: GO 65537
// min_y := y - r ;
65521: LD_ADDR_VAR 0 7
65525: PUSH
65526: LD_VAR 0 2
65530: PUSH
65531: LD_VAR 0 3
65535: MINUS
65536: ST_TO_ADDR
// max_x := x + r ;
65537: LD_ADDR_VAR 0 9
65541: PUSH
65542: LD_VAR 0 1
65546: PUSH
65547: LD_VAR 0 3
65551: PLUS
65552: ST_TO_ADDR
// max_y := y + r ;
65553: LD_ADDR_VAR 0 10
65557: PUSH
65558: LD_VAR 0 2
65562: PUSH
65563: LD_VAR 0 3
65567: PLUS
65568: ST_TO_ADDR
// for _x = min_x to max_x do
65569: LD_ADDR_VAR 0 5
65573: PUSH
65574: DOUBLE
65575: LD_VAR 0 8
65579: DEC
65580: ST_TO_ADDR
65581: LD_VAR 0 9
65585: PUSH
65586: FOR_TO
65587: IFFALSE 65688
// for _y = min_y to max_y do
65589: LD_ADDR_VAR 0 6
65593: PUSH
65594: DOUBLE
65595: LD_VAR 0 7
65599: DEC
65600: ST_TO_ADDR
65601: LD_VAR 0 10
65605: PUSH
65606: FOR_TO
65607: IFFALSE 65684
// begin if not ValidHex ( _x , _y ) then
65609: LD_VAR 0 5
65613: PPUSH
65614: LD_VAR 0 6
65618: PPUSH
65619: CALL_OW 488
65623: NOT
65624: IFFALSE 65628
// continue ;
65626: GO 65606
// if GetResourceTypeXY ( _x , _y ) then
65628: LD_VAR 0 5
65632: PPUSH
65633: LD_VAR 0 6
65637: PPUSH
65638: CALL_OW 283
65642: IFFALSE 65682
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
65644: LD_ADDR_VAR 0 4
65648: PUSH
65649: LD_VAR 0 4
65653: PPUSH
65654: LD_VAR 0 4
65658: PUSH
65659: LD_INT 1
65661: PLUS
65662: PPUSH
65663: LD_VAR 0 5
65667: PUSH
65668: LD_VAR 0 6
65672: PUSH
65673: EMPTY
65674: LIST
65675: LIST
65676: PPUSH
65677: CALL_OW 1
65681: ST_TO_ADDR
// end ;
65682: GO 65606
65684: POP
65685: POP
65686: GO 65586
65688: POP
65689: POP
// end ;
65690: LD_VAR 0 4
65694: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , cr , side , tag ; begin
65695: LD_INT 0
65697: PPUSH
65698: PPUSH
65699: PPUSH
65700: PPUSH
65701: PPUSH
65702: PPUSH
// if not units then
65703: LD_VAR 0 1
65707: NOT
65708: IFFALSE 65712
// exit ;
65710: GO 66113
// result := UnitFilter ( units , [ f_ok ] ) ;
65712: LD_ADDR_VAR 0 3
65716: PUSH
65717: LD_VAR 0 1
65721: PPUSH
65722: LD_INT 50
65724: PUSH
65725: EMPTY
65726: LIST
65727: PPUSH
65728: CALL_OW 72
65732: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
65733: LD_ADDR_VAR 0 7
65737: PUSH
65738: LD_VAR 0 1
65742: PUSH
65743: LD_INT 1
65745: ARRAY
65746: PPUSH
65747: CALL_OW 255
65751: ST_TO_ADDR
// if not result then
65752: LD_VAR 0 3
65756: NOT
65757: IFFALSE 65761
// exit ;
65759: GO 66113
// for i in result do
65761: LD_ADDR_VAR 0 4
65765: PUSH
65766: LD_VAR 0 3
65770: PUSH
65771: FOR_IN
65772: IFFALSE 66111
// begin tag := GetTag ( i ) + 1 ;
65774: LD_ADDR_VAR 0 8
65778: PUSH
65779: LD_VAR 0 4
65783: PPUSH
65784: CALL_OW 110
65788: PUSH
65789: LD_INT 1
65791: PLUS
65792: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
65793: LD_ADDR_VAR 0 6
65797: PUSH
65798: LD_VAR 0 4
65802: PPUSH
65803: CALL_OW 250
65807: PPUSH
65808: LD_VAR 0 4
65812: PPUSH
65813: CALL_OW 251
65817: PPUSH
65818: LD_INT 6
65820: PPUSH
65821: CALL 65437 0 3
65825: ST_TO_ADDR
// if cr then
65826: LD_VAR 0 6
65830: IFFALSE 65869
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
65832: LD_VAR 0 4
65836: PPUSH
65837: LD_VAR 0 6
65841: PUSH
65842: LD_INT 1
65844: ARRAY
65845: PUSH
65846: LD_INT 1
65848: ARRAY
65849: PPUSH
65850: LD_VAR 0 6
65854: PUSH
65855: LD_INT 1
65857: ARRAY
65858: PUSH
65859: LD_INT 2
65861: ARRAY
65862: PPUSH
65863: CALL_OW 116
65867: GO 66109
// if path > tag then
65869: LD_VAR 0 2
65873: PUSH
65874: LD_VAR 0 8
65878: GREATER
65879: IFFALSE 66057
// begin enemy := FilterAllUnits ( [ [ f_enemy , side ] , [ f_dist , i , 12 ] ] ) ;
65881: LD_ADDR_VAR 0 5
65885: PUSH
65886: LD_INT 81
65888: PUSH
65889: LD_VAR 0 7
65893: PUSH
65894: EMPTY
65895: LIST
65896: LIST
65897: PUSH
65898: LD_INT 91
65900: PUSH
65901: LD_VAR 0 4
65905: PUSH
65906: LD_INT 12
65908: PUSH
65909: EMPTY
65910: LIST
65911: LIST
65912: LIST
65913: PUSH
65914: EMPTY
65915: LIST
65916: LIST
65917: PPUSH
65918: CALL_OW 69
65922: ST_TO_ADDR
// if enemy then
65923: LD_VAR 0 5
65927: IFFALSE 65955
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
65929: LD_VAR 0 4
65933: PPUSH
65934: LD_VAR 0 5
65938: PPUSH
65939: LD_VAR 0 4
65943: PPUSH
65944: CALL_OW 74
65948: PPUSH
65949: CALL_OW 115
65953: GO 66055
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
65955: LD_VAR 0 4
65959: PPUSH
65960: LD_VAR 0 2
65964: PUSH
65965: LD_VAR 0 8
65969: ARRAY
65970: PUSH
65971: LD_INT 1
65973: ARRAY
65974: PPUSH
65975: LD_VAR 0 2
65979: PUSH
65980: LD_VAR 0 8
65984: ARRAY
65985: PUSH
65986: LD_INT 2
65988: ARRAY
65989: PPUSH
65990: CALL_OW 297
65994: PUSH
65995: LD_INT 6
65997: GREATER
65998: IFFALSE 66041
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
66000: LD_VAR 0 4
66004: PPUSH
66005: LD_VAR 0 2
66009: PUSH
66010: LD_VAR 0 8
66014: ARRAY
66015: PUSH
66016: LD_INT 1
66018: ARRAY
66019: PPUSH
66020: LD_VAR 0 2
66024: PUSH
66025: LD_VAR 0 8
66029: ARRAY
66030: PUSH
66031: LD_INT 2
66033: ARRAY
66034: PPUSH
66035: CALL_OW 114
66039: GO 66055
// SetTag ( i , tag ) ;
66041: LD_VAR 0 4
66045: PPUSH
66046: LD_VAR 0 8
66050: PPUSH
66051: CALL_OW 109
// end else
66055: GO 66109
// begin enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
66057: LD_ADDR_VAR 0 5
66061: PUSH
66062: LD_INT 81
66064: PUSH
66065: LD_VAR 0 7
66069: PUSH
66070: EMPTY
66071: LIST
66072: LIST
66073: PPUSH
66074: CALL_OW 69
66078: ST_TO_ADDR
// if enemy then
66079: LD_VAR 0 5
66083: IFFALSE 66109
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
66085: LD_VAR 0 4
66089: PPUSH
66090: LD_VAR 0 5
66094: PPUSH
66095: LD_VAR 0 4
66099: PPUSH
66100: CALL_OW 74
66104: PPUSH
66105: CALL_OW 115
// end ; end ;
66109: GO 65771
66111: POP
66112: POP
// end ; end_of_file
66113: LD_VAR 0 3
66117: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
66118: LD_VAR 0 1
66122: PUSH
66123: LD_INT 200
66125: DOUBLE
66126: GREATEREQUAL
66127: IFFALSE 66135
66129: LD_INT 299
66131: DOUBLE
66132: LESSEQUAL
66133: IFTRUE 66137
66135: GO 66169
66137: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
66138: LD_VAR 0 1
66142: PPUSH
66143: LD_VAR 0 2
66147: PPUSH
66148: LD_VAR 0 3
66152: PPUSH
66153: LD_VAR 0 4
66157: PPUSH
66158: LD_VAR 0 5
66162: PPUSH
66163: CALL 22680 0 5
66167: GO 66246
66169: LD_INT 300
66171: DOUBLE
66172: GREATEREQUAL
66173: IFFALSE 66181
66175: LD_INT 399
66177: DOUBLE
66178: LESSEQUAL
66179: IFTRUE 66183
66181: GO 66245
66183: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
66184: LD_VAR 0 1
66188: PPUSH
66189: LD_VAR 0 2
66193: PPUSH
66194: LD_VAR 0 3
66198: PPUSH
66199: LD_VAR 0 4
66203: PPUSH
66204: LD_VAR 0 5
66208: PPUSH
66209: LD_VAR 0 6
66213: PPUSH
66214: LD_VAR 0 7
66218: PPUSH
66219: LD_VAR 0 8
66223: PPUSH
66224: LD_VAR 0 9
66228: PPUSH
66229: LD_VAR 0 10
66233: PPUSH
66234: LD_VAR 0 11
66238: PPUSH
66239: CALL 20578 0 11
66243: GO 66246
66245: POP
// end ;
66246: PPOPN 11
66248: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
66249: LD_VAR 0 1
66253: PPUSH
66254: LD_VAR 0 2
66258: PPUSH
66259: LD_VAR 0 3
66263: PPUSH
66264: LD_VAR 0 4
66268: PPUSH
66269: LD_VAR 0 5
66273: PPUSH
66274: CALL 22672 0 5
// end ; end_of_file
66278: PPOPN 5
66280: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
66281: LD_VAR 0 1
66285: PPUSH
66286: LD_VAR 0 2
66290: PPUSH
66291: LD_VAR 0 3
66295: PPUSH
66296: LD_VAR 0 4
66300: PPUSH
66301: LD_VAR 0 5
66305: PPUSH
66306: LD_VAR 0 6
66310: PPUSH
66311: CALL 8773 0 6
// end ;
66315: PPOPN 6
66317: END
