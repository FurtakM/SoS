// starting begin PrepareMap ;
   0: CALL 13 0 0
// Main_Variables ;
   4: CALL 83 0 0
// Start_Mission ;
   8: CALL 3379 0 0
// end ;
  12: END
// function PrepareMap ; begin
  13: LD_INT 0
  15: PPUSH
// ResetFog ;
  16: CALL_OW 335
// RandomizeAll ;
  20: CALL_OW 11
// ChangeSideFog ( 8 , 6 ) ;
  24: LD_INT 8
  26: PPUSH
  27: LD_INT 6
  29: PPUSH
  30: CALL_OW 343
// PlaceCamera ;
  34: CALL 3909 0 0
// PrepareNature ( nature , 4 , 3 , 2 , 1 ) ;
  38: LD_INT 2
  40: PPUSH
  41: LD_INT 4
  43: PPUSH
  44: LD_INT 3
  46: PPUSH
  47: LD_INT 2
  49: PPUSH
  50: LD_INT 1
  52: PPUSH
  53: CALL 7821 0 5
// PrepareComm ;
  57: CALL 8304 0 0
// SetSide ( fort , 6 ) ;
  61: LD_INT 23
  63: PPUSH
  64: LD_INT 6
  66: PPUSH
  67: CALL_OW 235
// CenterNowOnUnits ( fort ) ;
  71: LD_INT 23
  73: PPUSH
  74: CALL_OW 87
// end ;
  78: LD_VAR 0 1
  82: RET
// export game_on , game_difficulty , game_time , game_option , game_end , game_strings ; export leopold , leopold_in_fort , samuel , samuel_in_fort , mortars_in_fort , scout ; export u_mine , u_fac ; export areas ; export skill ; export ar_bio_bomb , us_art ; export ar_weapons , ru_weapons , us_weapons ; export arabian_force , russian_force , american_force , arabian_timeing , russian_timeing , american_timeing ; export meeting_start , meeting_arive , meeting_break , meeting_end , meeting_time , russian_timer , fort_destroyed , hero_died , mission_time , cargo_ok , american_hchan , dezert , arabian_attack , russian_attack , american_attack , american_help , american_sib_bomb , russian_trade , heike_dialog1 , heike_dialog2 ; export am_comander , ru_comander , ar_comander ; function Main_Variables ; begin
  83: LD_INT 0
  85: PPUSH
// game_on := false ;
  86: LD_ADDR_EXP 1
  90: PUSH
  91: LD_INT 0
  93: ST_TO_ADDR
// game_time := 0 0$00 ;
  94: LD_ADDR_EXP 3
  98: PUSH
  99: LD_INT 0
 101: ST_TO_ADDR
// game_option := [ 1 ] ;
 102: LD_ADDR_EXP 4
 106: PUSH
 107: LD_INT 1
 109: PUSH
 110: EMPTY
 111: LIST
 112: ST_TO_ADDR
// game_end := false ;
 113: LD_ADDR_EXP 5
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// game_strings := [ ] ;
 121: LD_ADDR_EXP 6
 125: PUSH
 126: EMPTY
 127: ST_TO_ADDR
// game_time := 0 0$00 ;
 128: LD_ADDR_EXP 3
 132: PUSH
 133: LD_INT 0
 135: ST_TO_ADDR
// mission_time := 0 0$00 ;
 136: LD_ADDR_EXP 36
 140: PUSH
 141: LD_INT 0
 143: ST_TO_ADDR
// skill := [ 5 , 7 , 9 ] [ game_difficulty ] ;
 144: LD_ADDR_EXP 16
 148: PUSH
 149: LD_INT 5
 151: PUSH
 152: LD_INT 7
 154: PUSH
 155: LD_INT 9
 157: PUSH
 158: EMPTY
 159: LIST
 160: LIST
 161: LIST
 162: PUSH
 163: LD_EXP 2
 167: ARRAY
 168: ST_TO_ADDR
// areas := [ a_swest , a_nwest , a_neast , a_seast ] ;
 169: LD_ADDR_EXP 15
 173: PUSH
 174: LD_INT 5
 176: PUSH
 177: LD_INT 6
 179: PUSH
 180: LD_INT 7
 182: PUSH
 183: LD_INT 8
 185: PUSH
 186: EMPTY
 187: LIST
 188: LIST
 189: LIST
 190: LIST
 191: ST_TO_ADDR
// meeting_start := false ;
 192: LD_ADDR_EXP 28
 196: PUSH
 197: LD_INT 0
 199: ST_TO_ADDR
// meeting_arive := false ;
 200: LD_ADDR_EXP 29
 204: PUSH
 205: LD_INT 0
 207: ST_TO_ADDR
// meeting_break := false ;
 208: LD_ADDR_EXP 30
 212: PUSH
 213: LD_INT 0
 215: ST_TO_ADDR
// meeting_end := false ;
 216: LD_ADDR_EXP 31
 220: PUSH
 221: LD_INT 0
 223: ST_TO_ADDR
// meeting_time := [ 4 4$00 , 3 3$40 , 3 3$20 ] [ game_difficulty ] ;
 224: LD_ADDR_EXP 32
 228: PUSH
 229: LD_INT 8400
 231: PUSH
 232: LD_INT 7700
 234: PUSH
 235: LD_INT 7000
 237: PUSH
 238: EMPTY
 239: LIST
 240: LIST
 241: LIST
 242: PUSH
 243: LD_EXP 2
 247: ARRAY
 248: ST_TO_ADDR
// arabian_force := [ 5 , 6 , 7 ] [ game_difficulty ] ;
 249: LD_ADDR_EXP 22
 253: PUSH
 254: LD_INT 5
 256: PUSH
 257: LD_INT 6
 259: PUSH
 260: LD_INT 7
 262: PUSH
 263: EMPTY
 264: LIST
 265: LIST
 266: LIST
 267: PUSH
 268: LD_EXP 2
 272: ARRAY
 273: ST_TO_ADDR
// american_force := [ 6 , 8 , 9 ] [ game_difficulty ] ;
 274: LD_ADDR_EXP 24
 278: PUSH
 279: LD_INT 6
 281: PUSH
 282: LD_INT 8
 284: PUSH
 285: LD_INT 9
 287: PUSH
 288: EMPTY
 289: LIST
 290: LIST
 291: LIST
 292: PUSH
 293: LD_EXP 2
 297: ARRAY
 298: ST_TO_ADDR
// russian_force := [ 7 , 9 , 10 ] [ game_difficulty ] ;
 299: LD_ADDR_EXP 23
 303: PUSH
 304: LD_INT 7
 306: PUSH
 307: LD_INT 9
 309: PUSH
 310: LD_INT 10
 312: PUSH
 313: EMPTY
 314: LIST
 315: LIST
 316: LIST
 317: PUSH
 318: LD_EXP 2
 322: ARRAY
 323: ST_TO_ADDR
// u_mine := false ;
 324: LD_ADDR_EXP 13
 328: PUSH
 329: LD_INT 0
 331: ST_TO_ADDR
// u_fac := false ;
 332: LD_ADDR_EXP 14
 336: PUSH
 337: LD_INT 0
 339: ST_TO_ADDR
// leopold_in_fort := false ;
 340: LD_ADDR_EXP 8
 344: PUSH
 345: LD_INT 0
 347: ST_TO_ADDR
// samuel_in_fort := false ;
 348: LD_ADDR_EXP 10
 352: PUSH
 353: LD_INT 0
 355: ST_TO_ADDR
// mortars_in_fort := false ;
 356: LD_ADDR_EXP 11
 360: PUSH
 361: LD_INT 0
 363: ST_TO_ADDR
// fort_destroyed := false ;
 364: LD_ADDR_EXP 34
 368: PUSH
 369: LD_INT 0
 371: ST_TO_ADDR
// hero_died := false ;
 372: LD_ADDR_EXP 35
 376: PUSH
 377: LD_INT 0
 379: ST_TO_ADDR
// dezert := false ;
 380: LD_ADDR_EXP 39
 384: PUSH
 385: LD_INT 0
 387: ST_TO_ADDR
// arabian_attack := false ;
 388: LD_ADDR_EXP 40
 392: PUSH
 393: LD_INT 0
 395: ST_TO_ADDR
// russian_attack := false ;
 396: LD_ADDR_EXP 41
 400: PUSH
 401: LD_INT 0
 403: ST_TO_ADDR
// american_attack := false ;
 404: LD_ADDR_EXP 42
 408: PUSH
 409: LD_INT 0
 411: ST_TO_ADDR
// american_help := false ;
 412: LD_ADDR_EXP 43
 416: PUSH
 417: LD_INT 0
 419: ST_TO_ADDR
// american_hchan := [ 91 , 81 , 71 ] [ game_difficulty ] ;
 420: LD_ADDR_EXP 38
 424: PUSH
 425: LD_INT 91
 427: PUSH
 428: LD_INT 81
 430: PUSH
 431: LD_INT 71
 433: PUSH
 434: EMPTY
 435: LIST
 436: LIST
 437: LIST
 438: PUSH
 439: LD_EXP 2
 443: ARRAY
 444: ST_TO_ADDR
// american_sib_bomb := false ;
 445: LD_ADDR_EXP 44
 449: PUSH
 450: LD_INT 0
 452: ST_TO_ADDR
// russian_trade := false ;
 453: LD_ADDR_EXP 45
 457: PUSH
 458: LD_INT 0
 460: ST_TO_ADDR
// russian_timer := 5 5$00 ;
 461: LD_ADDR_EXP 33
 465: PUSH
 466: LD_INT 10500
 468: ST_TO_ADDR
// cargo_ok := false ;
 469: LD_ADDR_EXP 37
 473: PUSH
 474: LD_INT 0
 476: ST_TO_ADDR
// heike_dialog1 := false ;
 477: LD_ADDR_EXP 46
 481: PUSH
 482: LD_INT 0
 484: ST_TO_ADDR
// heike_dialog2 := false ;
 485: LD_ADDR_EXP 47
 489: PUSH
 490: LD_INT 0
 492: ST_TO_ADDR
// american_timeing := [ 10 10$00 , 9 9$40 , 9 9$10 ] [ game_difficulty ] ;
 493: LD_ADDR_EXP 27
 497: PUSH
 498: LD_INT 21000
 500: PUSH
 501: LD_INT 20300
 503: PUSH
 504: LD_INT 19250
 506: PUSH
 507: EMPTY
 508: LIST
 509: LIST
 510: LIST
 511: PUSH
 512: LD_EXP 2
 516: ARRAY
 517: ST_TO_ADDR
// arabian_timeing := [ 8 8$00 , 7 7$30 , 7 7$20 ] [ game_difficulty ] ;
 518: LD_ADDR_EXP 25
 522: PUSH
 523: LD_INT 16800
 525: PUSH
 526: LD_INT 15750
 528: PUSH
 529: LD_INT 15400
 531: PUSH
 532: EMPTY
 533: LIST
 534: LIST
 535: LIST
 536: PUSH
 537: LD_EXP 2
 541: ARRAY
 542: ST_TO_ADDR
// russian_timeing := [ 11 11$00 , 10 10$30 , 9 9$20 ] [ game_difficulty ] ;
 543: LD_ADDR_EXP 26
 547: PUSH
 548: LD_INT 23100
 550: PUSH
 551: LD_INT 22050
 553: PUSH
 554: LD_INT 19600
 556: PUSH
 557: EMPTY
 558: LIST
 559: LIST
 560: LIST
 561: PUSH
 562: LD_EXP 2
 566: ARRAY
 567: ST_TO_ADDR
// ar_bio_bomb := 91 ;
 568: LD_ADDR_EXP 17
 572: PUSH
 573: LD_INT 91
 575: ST_TO_ADDR
// us_art := 97 ;
 576: LD_ADDR_EXP 18
 580: PUSH
 581: LD_INT 97
 583: ST_TO_ADDR
// ar_weapons := [ ar_rocket_launcher , ar_gun , ar_flame_thrower , ar_selfpropelled_bomb , ar_bio_bomb ] ;
 584: LD_ADDR_EXP 19
 588: PUSH
 589: LD_INT 28
 591: PUSH
 592: LD_INT 27
 594: PUSH
 595: LD_INT 26
 597: PUSH
 598: LD_INT 29
 600: PUSH
 601: LD_EXP 17
 605: PUSH
 606: EMPTY
 607: LIST
 608: LIST
 609: LIST
 610: LIST
 611: LIST
 612: ST_TO_ADDR
// us_weapons := [ us_rocket_launcher , us_heavy_gun , us_double_laser ] ;
 613: LD_ADDR_EXP 21
 617: PUSH
 618: LD_INT 7
 620: PUSH
 621: LD_INT 6
 623: PUSH
 624: LD_INT 10
 626: PUSH
 627: EMPTY
 628: LIST
 629: LIST
 630: LIST
 631: ST_TO_ADDR
// ru_weapons := [ ru_rocket_launcher , ru_rocket , ru_heavy_gun ] ;
 632: LD_ADDR_EXP 20
 636: PUSH
 637: LD_INT 45
 639: PUSH
 640: LD_INT 47
 642: PUSH
 643: LD_INT 46
 645: PUSH
 646: EMPTY
 647: LIST
 648: LIST
 649: LIST
 650: ST_TO_ADDR
// end ;
 651: LD_VAR 0 1
 655: RET
// every 0 0$01 trigger game_on do var i , p , x , filter ;
 656: LD_EXP 1
 660: IFFALSE 3376
 662: GO 664
 664: DISABLE
 665: LD_INT 0
 667: PPUSH
 668: PPUSH
 669: PPUSH
 670: PPUSH
// begin enable ;
 671: ENABLE
// Display_Strings := [ #tick , game_time ] ^ game_strings ;
 672: LD_ADDR_OWVAR 47
 676: PUSH
 677: LD_STRING #tick
 679: PUSH
 680: LD_EXP 3
 684: PUSH
 685: EMPTY
 686: LIST
 687: LIST
 688: PUSH
 689: LD_EXP 6
 693: ADD
 694: ST_TO_ADDR
// game_time := RefreshTime ( game_time , true ) ;
 695: LD_ADDR_EXP 3
 699: PUSH
 700: LD_EXP 3
 704: PPUSH
 705: LD_INT 1
 707: PPUSH
 708: CALL 6893 0 2
 712: ST_TO_ADDR
// if meeting_start and meeting_time > 0 0$00 then
 713: LD_EXP 28
 717: PUSH
 718: LD_EXP 32
 722: PUSH
 723: LD_INT 0
 725: GREATER
 726: AND
 727: IFFALSE 764
// begin game_strings := [ #mtime , meeting_time ] ;
 729: LD_ADDR_EXP 6
 733: PUSH
 734: LD_STRING #mtime
 736: PUSH
 737: LD_EXP 32
 741: PUSH
 742: EMPTY
 743: LIST
 744: LIST
 745: ST_TO_ADDR
// meeting_time := RefreshTime ( meeting_time , false ) ;
 746: LD_ADDR_EXP 32
 750: PUSH
 751: LD_EXP 32
 755: PPUSH
 756: LD_INT 0
 758: PPUSH
 759: CALL 6893 0 2
 763: ST_TO_ADDR
// end ; if meeting_arive then
 764: LD_EXP 29
 768: IFFALSE 788
// mission_time := RefreshTime ( mission_time , true ) ;
 770: LD_ADDR_EXP 36
 774: PUSH
 775: LD_EXP 36
 779: PPUSH
 780: LD_INT 1
 782: PPUSH
 783: CALL 6893 0 2
 787: ST_TO_ADDR
// if arabian_attack and arabian_timeing > 0 0$00 and meeting_arive then
 788: LD_EXP 40
 792: PUSH
 793: LD_EXP 25
 797: PUSH
 798: LD_INT 0
 800: GREATER
 801: AND
 802: PUSH
 803: LD_EXP 29
 807: AND
 808: IFFALSE 828
// begin arabian_timeing := RefreshTime ( arabian_timeing , false ) ;
 810: LD_ADDR_EXP 25
 814: PUSH
 815: LD_EXP 25
 819: PPUSH
 820: LD_INT 0
 822: PPUSH
 823: CALL 6893 0 2
 827: ST_TO_ADDR
// end ; if russian_attack and russian_timeing > 0 0$00 and meeting_arive then
 828: LD_EXP 41
 832: PUSH
 833: LD_EXP 26
 837: PUSH
 838: LD_INT 0
 840: GREATER
 841: AND
 842: PUSH
 843: LD_EXP 29
 847: AND
 848: IFFALSE 868
// begin russian_timeing := RefreshTime ( russian_timeing , false ) ;
 850: LD_ADDR_EXP 26
 854: PUSH
 855: LD_EXP 26
 859: PPUSH
 860: LD_INT 0
 862: PPUSH
 863: CALL 6893 0 2
 867: ST_TO_ADDR
// end ; if american_attack and american_timeing > 0 0$00 and meeting_arive then
 868: LD_EXP 42
 872: PUSH
 873: LD_EXP 27
 877: PUSH
 878: LD_INT 0
 880: GREATER
 881: AND
 882: PUSH
 883: LD_EXP 29
 887: AND
 888: IFFALSE 908
// begin american_timeing := RefreshTime ( american_timeing , false ) ;
 890: LD_ADDR_EXP 27
 894: PUSH
 895: LD_EXP 27
 899: PPUSH
 900: LD_INT 0
 902: PPUSH
 903: CALL 6893 0 2
 907: ST_TO_ADDR
// end ; if russian_trade and russian_timer > 0 0$00 then
 908: LD_EXP 45
 912: PUSH
 913: LD_EXP 33
 917: PUSH
 918: LD_INT 0
 920: GREATER
 921: AND
 922: IFFALSE 959
// begin game_strings := [ #rtime , russian_timer ] ;
 924: LD_ADDR_EXP 6
 928: PUSH
 929: LD_STRING #rtime
 931: PUSH
 932: LD_EXP 33
 936: PUSH
 937: EMPTY
 938: LIST
 939: LIST
 940: ST_TO_ADDR
// russian_timer := RefreshTime ( russian_timer , false ) ;
 941: LD_ADDR_EXP 33
 945: PUSH
 946: LD_EXP 33
 950: PPUSH
 951: LD_INT 0
 953: PPUSH
 954: CALL 6893 0 2
 958: ST_TO_ADDR
// end ; if russian_trade and russian_timer = 0 0$00 or cargo_ok then
 959: LD_EXP 45
 963: PUSH
 964: LD_EXP 33
 968: PUSH
 969: LD_INT 0
 971: EQUAL
 972: AND
 973: PUSH
 974: LD_EXP 37
 978: OR
 979: IFFALSE 988
// game_strings := [ ] ;
 981: LD_ADDR_EXP 6
 985: PUSH
 986: EMPTY
 987: ST_TO_ADDR
// if dezert = false and tick mod 33600 = 0 then
 988: LD_EXP 39
 992: PUSH
 993: LD_INT 0
 995: EQUAL
 996: PUSH
 997: LD_OWVAR 1
1001: PUSH
1002: LD_INT 33600
1004: MOD
1005: PUSH
1006: LD_INT 0
1008: EQUAL
1009: AND
1010: IFFALSE 1070
// begin p := Rand ( 1 , 5 ) ;
1012: LD_ADDR_VAR 0 2
1016: PUSH
1017: LD_INT 1
1019: PPUSH
1020: LD_INT 5
1022: PPUSH
1023: CALL_OW 12
1027: ST_TO_ADDR
// if p <= [ 4 , 3 , 3 ] [ game_difficulty ] then
1028: LD_VAR 0 2
1032: PUSH
1033: LD_INT 4
1035: PUSH
1036: LD_INT 3
1038: PUSH
1039: LD_INT 3
1041: PUSH
1042: EMPTY
1043: LIST
1044: LIST
1045: LIST
1046: PUSH
1047: LD_EXP 2
1051: ARRAY
1052: LESSEQUAL
1053: IFFALSE 1070
// begin RaiseSailEvent ( 92 ) ;
1055: LD_INT 92
1057: PPUSH
1058: CALL_OW 427
// dezert := true ;
1062: LD_ADDR_EXP 39
1066: PUSH
1067: LD_INT 1
1069: ST_TO_ADDR
// end ; end ; if tick mod 8400 = 0 then
1070: LD_OWVAR 1
1074: PUSH
1075: LD_INT 8400
1077: MOD
1078: PUSH
1079: LD_INT 0
1081: EQUAL
1082: IFFALSE 1091
// RaiseSailEvent ( 101 ) ;
1084: LD_INT 101
1086: PPUSH
1087: CALL_OW 427
// if MineExist ( 8 ) and u_mine = false then
1091: LD_INT 8
1093: PPUSH
1094: CALL 6947 0 1
1098: PUSH
1099: LD_EXP 13
1103: PUSH
1104: LD_INT 0
1106: EQUAL
1107: AND
1108: IFFALSE 1125
// begin u_mine := true ;
1110: LD_ADDR_EXP 13
1114: PUSH
1115: LD_INT 1
1117: ST_TO_ADDR
// ChangeMissionObjectives ( DS-T1m ) ;
1118: LD_STRING DS-T1m
1120: PPUSH
1121: CALL_OW 337
// end ; if FacExist ( 8 ) and u_fac = false then
1125: LD_INT 8
1127: PPUSH
1128: CALL 7009 0 1
1132: PUSH
1133: LD_EXP 14
1137: PUSH
1138: LD_INT 0
1140: EQUAL
1141: AND
1142: IFFALSE 1159
// begin u_fac := true ;
1144: LD_ADDR_EXP 14
1148: PUSH
1149: LD_INT 1
1151: ST_TO_ADDR
// ChangeMissionObjectives ( DS-T1f ) ;
1152: LD_STRING DS-T1f
1154: PPUSH
1155: CALL_OW 337
// end ; if hero_died then
1159: LD_EXP 35
1163: IFFALSE 1172
// YouLost ( DS-h1 ) ;
1165: LD_STRING DS-h1
1167: PPUSH
1168: CALL_OW 104
// if fort_destroyed then
1172: LD_EXP 34
1176: IFFALSE 1185
// YouLost ( DS-h2 ) ;
1178: LD_STRING DS-h2
1180: PPUSH
1181: CALL_OW 104
// if GetDistUnits ( leopold , l_cmndr ) > 6 and meeting_start = false then
1185: LD_EXP 7
1189: PPUSH
1190: LD_EXP 51
1194: PPUSH
1195: CALL_OW 296
1199: PUSH
1200: LD_INT 6
1202: GREATER
1203: PUSH
1204: LD_EXP 28
1208: PUSH
1209: LD_INT 0
1211: EQUAL
1212: AND
1213: IFFALSE 1236
// begin if not HasTask ( leopold ) then
1215: LD_EXP 7
1219: PPUSH
1220: CALL_OW 314
1224: NOT
1225: IFFALSE 1234
// RaiseSailEvent ( 1 ) ;
1227: LD_INT 1
1229: PPUSH
1230: CALL_OW 427
// end else
1234: GO 1253
// if meeting_start = false then
1236: LD_EXP 28
1240: PUSH
1241: LD_INT 0
1243: EQUAL
1244: IFFALSE 1253
// begin RaiseSailEvent ( 2 ) ;
1246: LD_INT 2
1248: PPUSH
1249: CALL_OW 427
// end ; if game_time >= [ 50 50$00 , 62 62$30 , 75 75$00 ] [ game_difficulty ] and meeting_end = false then
1253: LD_EXP 3
1257: PUSH
1258: LD_INT 105000
1260: PUSH
1261: LD_INT 131250
1263: PUSH
1264: LD_INT 157500
1266: PUSH
1267: EMPTY
1268: LIST
1269: LIST
1270: LIST
1271: PUSH
1272: LD_EXP 2
1276: ARRAY
1277: GREATEREQUAL
1278: PUSH
1279: LD_EXP 31
1283: PUSH
1284: LD_INT 0
1286: EQUAL
1287: AND
1288: IFFALSE 1305
// begin meeting_end := true ;
1290: LD_ADDR_EXP 31
1294: PUSH
1295: LD_INT 1
1297: ST_TO_ADDR
// RaiseSailEvent ( 200 ) ;
1298: LD_INT 200
1300: PPUSH
1301: CALL_OW 427
// end ; if meeting_time = 0 0$00 and meeting_arive = false then
1305: LD_EXP 32
1309: PUSH
1310: LD_INT 0
1312: EQUAL
1313: PUSH
1314: LD_EXP 29
1318: PUSH
1319: LD_INT 0
1321: EQUAL
1322: AND
1323: IFFALSE 1347
// begin meeting_arive := true ;
1325: LD_ADDR_EXP 29
1329: PUSH
1330: LD_INT 1
1332: ST_TO_ADDR
// game_strings := [ ] ;
1333: LD_ADDR_EXP 6
1337: PUSH
1338: EMPTY
1339: ST_TO_ADDR
// RaiseSailEvent ( 10 ) ;
1340: LD_INT 10
1342: PPUSH
1343: CALL_OW 427
// end ; if meeting_arive then
1347: LD_EXP 29
1351: IFFALSE 2096
// begin if arabian_attack = false and tick mod 4200 = 0 then
1353: LD_EXP 40
1357: PUSH
1358: LD_INT 0
1360: EQUAL
1361: PUSH
1362: LD_OWVAR 1
1366: PUSH
1367: LD_INT 4200
1369: MOD
1370: PUSH
1371: LD_INT 0
1373: EQUAL
1374: AND
1375: IFFALSE 1428
// begin p := Rand ( 1 , 100 ) ;
1377: LD_ADDR_VAR 0 2
1381: PUSH
1382: LD_INT 1
1384: PPUSH
1385: LD_INT 100
1387: PPUSH
1388: CALL_OW 12
1392: ST_TO_ADDR
// if p <= [ 80 , 85 , 90 ] [ game_difficulty ] then
1393: LD_VAR 0 2
1397: PUSH
1398: LD_INT 80
1400: PUSH
1401: LD_INT 85
1403: PUSH
1404: LD_INT 90
1406: PUSH
1407: EMPTY
1408: LIST
1409: LIST
1410: LIST
1411: PUSH
1412: LD_EXP 2
1416: ARRAY
1417: LESSEQUAL
1418: IFFALSE 1428
// arabian_attack := true ;
1420: LD_ADDR_EXP 40
1424: PUSH
1425: LD_INT 1
1427: ST_TO_ADDR
// end ; if russian_trade = false and russian_attack = false and tick > 52500 then
1428: LD_EXP 45
1432: PUSH
1433: LD_INT 0
1435: EQUAL
1436: PUSH
1437: LD_EXP 41
1441: PUSH
1442: LD_INT 0
1444: EQUAL
1445: AND
1446: PUSH
1447: LD_OWVAR 1
1451: PUSH
1452: LD_INT 52500
1454: GREATER
1455: AND
1456: IFFALSE 1527
// begin russian_trade = true ;
1458: LD_ADDR_EXP 45
1462: PUSH
1463: LD_INT 1
1465: ST_TO_ADDR
// DialogueOn ;
1466: CALL_OW 6
// SayRadio ( ru_comander , DS-DR-RTr ) ;
1470: LD_EXP 49
1474: PPUSH
1475: LD_STRING DS-DR-RTr
1477: PPUSH
1478: CALL_OW 94
// Say ( l_cmndr , DS-DC-RTr ) ;
1482: LD_EXP 51
1486: PPUSH
1487: LD_STRING DS-DC-RTr
1489: PPUSH
1490: CALL_OW 88
// SayRadio ( ru_comander , DS-DR-RTr2 ) ;
1494: LD_EXP 49
1498: PPUSH
1499: LD_STRING DS-DR-RTr2
1501: PPUSH
1502: CALL_OW 94
// DialogueOff ;
1506: CALL_OW 7
// ChangeMissionObjectives ( DS-T2 ) ;
1510: LD_STRING DS-T2
1512: PPUSH
1513: CALL_OW 337
// SetAreaMapShow ( tree , 1 ) ;
1517: LD_INT 10
1519: PPUSH
1520: LD_INT 1
1522: PPUSH
1523: CALL_OW 424
// end ; if russian_trade and cargo_ok = false and russian_timer > 0 0$00 then
1527: LD_EXP 45
1531: PUSH
1532: LD_EXP 37
1536: PUSH
1537: LD_INT 0
1539: EQUAL
1540: AND
1541: PUSH
1542: LD_EXP 33
1546: PUSH
1547: LD_INT 0
1549: GREATER
1550: AND
1551: IFFALSE 1746
// begin if FilterUnitsInArea ( tree , ( [ [ f_empty ] , [ f_weapon , ar_cargo_bay ] , [ f_not , [ f_control , control_remote ] ] ] ) ) > 0 then
1553: LD_INT 10
1555: PPUSH
1556: LD_INT 58
1558: PUSH
1559: EMPTY
1560: LIST
1561: PUSH
1562: LD_INT 34
1564: PUSH
1565: LD_INT 32
1567: PUSH
1568: EMPTY
1569: LIST
1570: LIST
1571: PUSH
1572: LD_INT 3
1574: PUSH
1575: LD_INT 33
1577: PUSH
1578: LD_INT 2
1580: PUSH
1581: EMPTY
1582: LIST
1583: LIST
1584: PUSH
1585: EMPTY
1586: LIST
1587: LIST
1588: PUSH
1589: EMPTY
1590: LIST
1591: LIST
1592: LIST
1593: PPUSH
1594: CALL_OW 70
1598: PUSH
1599: LD_INT 0
1601: GREATER
1602: IFFALSE 1746
// if GetCargo ( FilterUnitsInArea ( tree , ( [ [ f_empty ] , [ f_weapon , ar_cargo_bay ] , [ f_not , [ f_control , control_remote ] ] ] ) ) [ 1 ] , mat_siberit ) = 100 then
1604: LD_INT 10
1606: PPUSH
1607: LD_INT 58
1609: PUSH
1610: EMPTY
1611: LIST
1612: PUSH
1613: LD_INT 34
1615: PUSH
1616: LD_INT 32
1618: PUSH
1619: EMPTY
1620: LIST
1621: LIST
1622: PUSH
1623: LD_INT 3
1625: PUSH
1626: LD_INT 33
1628: PUSH
1629: LD_INT 2
1631: PUSH
1632: EMPTY
1633: LIST
1634: LIST
1635: PUSH
1636: EMPTY
1637: LIST
1638: LIST
1639: PUSH
1640: EMPTY
1641: LIST
1642: LIST
1643: LIST
1644: PPUSH
1645: CALL_OW 70
1649: PUSH
1650: LD_INT 1
1652: ARRAY
1653: PPUSH
1654: LD_INT 3
1656: PPUSH
1657: CALL_OW 289
1661: PUSH
1662: LD_INT 100
1664: EQUAL
1665: IFFALSE 1746
// begin cargo_ok := true ;
1667: LD_ADDR_EXP 37
1671: PUSH
1672: LD_INT 1
1674: ST_TO_ADDR
// RemoveUnit ( FilterUnitsInArea ( tree , ( [ [ f_empty ] , [ f_weapon , ar_cargo_bay ] , [ f_not , [ f_control , control_remote ] ] ] ) ) [ 1 ] ) ;
1675: LD_INT 10
1677: PPUSH
1678: LD_INT 58
1680: PUSH
1681: EMPTY
1682: LIST
1683: PUSH
1684: LD_INT 34
1686: PUSH
1687: LD_INT 32
1689: PUSH
1690: EMPTY
1691: LIST
1692: LIST
1693: PUSH
1694: LD_INT 3
1696: PUSH
1697: LD_INT 33
1699: PUSH
1700: LD_INT 2
1702: PUSH
1703: EMPTY
1704: LIST
1705: LIST
1706: PUSH
1707: EMPTY
1708: LIST
1709: LIST
1710: PUSH
1711: EMPTY
1712: LIST
1713: LIST
1714: LIST
1715: PPUSH
1716: CALL_OW 70
1720: PUSH
1721: LD_INT 1
1723: ARRAY
1724: PPUSH
1725: CALL_OW 64
// ChangeMissionObjectives ( DS-T2-out ) ;
1729: LD_STRING DS-T2-out
1731: PPUSH
1732: CALL_OW 337
// SetAreaMapShow ( tree , 0 ) ;
1736: LD_INT 10
1738: PPUSH
1739: LD_INT 0
1741: PPUSH
1742: CALL_OW 424
// end ; end ; if russian_attack = false and russian_trade and cargo_ok = false and russian_timer = 0 0$00 then
1746: LD_EXP 41
1750: PUSH
1751: LD_INT 0
1753: EQUAL
1754: PUSH
1755: LD_EXP 45
1759: AND
1760: PUSH
1761: LD_EXP 37
1765: PUSH
1766: LD_INT 0
1768: EQUAL
1769: AND
1770: PUSH
1771: LD_EXP 33
1775: PUSH
1776: LD_INT 0
1778: EQUAL
1779: AND
1780: IFFALSE 1807
// begin russian_attack := true ;
1782: LD_ADDR_EXP 41
1786: PUSH
1787: LD_INT 1
1789: ST_TO_ADDR
// ChangeMissionObjectives ( DS-T2-out ) ;
1790: LD_STRING DS-T2-out
1792: PPUSH
1793: CALL_OW 337
// SetAreaMapShow ( tree , 0 ) ;
1797: LD_INT 10
1799: PPUSH
1800: LD_INT 0
1802: PPUSH
1803: CALL_OW 424
// end ; if russian_trade = false and russian_attack = false and american_attack = false and tick mod 21000 = 0 then
1807: LD_EXP 45
1811: PUSH
1812: LD_INT 0
1814: EQUAL
1815: PUSH
1816: LD_EXP 41
1820: PUSH
1821: LD_INT 0
1823: EQUAL
1824: AND
1825: PUSH
1826: LD_EXP 42
1830: PUSH
1831: LD_INT 0
1833: EQUAL
1834: AND
1835: PUSH
1836: LD_OWVAR 1
1840: PUSH
1841: LD_INT 21000
1843: MOD
1844: PUSH
1845: LD_INT 0
1847: EQUAL
1848: AND
1849: IFFALSE 1902
// begin p := Rand ( 1 , 100 ) ;
1851: LD_ADDR_VAR 0 2
1855: PUSH
1856: LD_INT 1
1858: PPUSH
1859: LD_INT 100
1861: PPUSH
1862: CALL_OW 12
1866: ST_TO_ADDR
// if p <= [ 25 , 35 , 45 ] [ game_difficulty ] then
1867: LD_VAR 0 2
1871: PUSH
1872: LD_INT 25
1874: PUSH
1875: LD_INT 35
1877: PUSH
1878: LD_INT 45
1880: PUSH
1881: EMPTY
1882: LIST
1883: LIST
1884: LIST
1885: PUSH
1886: LD_EXP 2
1890: ARRAY
1891: LESSEQUAL
1892: IFFALSE 1902
// russian_attack := true ;
1894: LD_ADDR_EXP 41
1898: PUSH
1899: LD_INT 1
1901: ST_TO_ADDR
// end ; if american_help = false and american_attack = false and russian_attack = false and tick mod 31500 = 0 then
1902: LD_EXP 43
1906: PUSH
1907: LD_INT 0
1909: EQUAL
1910: PUSH
1911: LD_EXP 42
1915: PUSH
1916: LD_INT 0
1918: EQUAL
1919: AND
1920: PUSH
1921: LD_EXP 41
1925: PUSH
1926: LD_INT 0
1928: EQUAL
1929: AND
1930: PUSH
1931: LD_OWVAR 1
1935: PUSH
1936: LD_INT 31500
1938: MOD
1939: PUSH
1940: LD_INT 0
1942: EQUAL
1943: AND
1944: IFFALSE 1997
// begin p := Rand ( 1 , 100 ) ;
1946: LD_ADDR_VAR 0 2
1950: PUSH
1951: LD_INT 1
1953: PPUSH
1954: LD_INT 100
1956: PPUSH
1957: CALL_OW 12
1961: ST_TO_ADDR
// if p <= [ 22 , 33 , 44 ] [ game_difficulty ] then
1962: LD_VAR 0 2
1966: PUSH
1967: LD_INT 22
1969: PUSH
1970: LD_INT 33
1972: PUSH
1973: LD_INT 44
1975: PUSH
1976: EMPTY
1977: LIST
1978: LIST
1979: LIST
1980: PUSH
1981: LD_EXP 2
1985: ARRAY
1986: LESSEQUAL
1987: IFFALSE 1997
// american_attack := true ;
1989: LD_ADDR_EXP 42
1993: PUSH
1994: LD_INT 1
1996: ST_TO_ADDR
// end ; if american_attack = false and russian_attack = false and american_help = false and tick mod 21200 = 0 then
1997: LD_EXP 42
2001: PUSH
2002: LD_INT 0
2004: EQUAL
2005: PUSH
2006: LD_EXP 41
2010: PUSH
2011: LD_INT 0
2013: EQUAL
2014: AND
2015: PUSH
2016: LD_EXP 43
2020: PUSH
2021: LD_INT 0
2023: EQUAL
2024: AND
2025: PUSH
2026: LD_OWVAR 1
2030: PUSH
2031: LD_INT 21200
2033: MOD
2034: PUSH
2035: LD_INT 0
2037: EQUAL
2038: AND
2039: IFFALSE 2096
// begin p := Rand ( 1 , 100 ) ;
2041: LD_ADDR_VAR 0 2
2045: PUSH
2046: LD_INT 1
2048: PPUSH
2049: LD_INT 100
2051: PPUSH
2052: CALL_OW 12
2056: ST_TO_ADDR
// if p <= american_hchan then
2057: LD_VAR 0 2
2061: PUSH
2062: LD_EXP 38
2066: LESSEQUAL
2067: IFFALSE 2096
// begin american_help := true ;
2069: LD_ADDR_EXP 43
2073: PUSH
2074: LD_INT 1
2076: ST_TO_ADDR
// SayRadio ( am_comander , DS-amhelp ) ;
2077: LD_EXP 48
2081: PPUSH
2082: LD_STRING DS-amhelp
2084: PPUSH
2085: CALL_OW 94
// RaiseSailEvent ( 91 ) ;
2089: LD_INT 91
2091: PPUSH
2092: CALL_OW 427
// end ; end ; end ; if american_attack and american_timeing = 0 0$00 and FilterAllUnits ( [ f_side , 1 ] ) = 0 then
2096: LD_EXP 42
2100: PUSH
2101: LD_EXP 27
2105: PUSH
2106: LD_INT 0
2108: EQUAL
2109: AND
2110: PUSH
2111: LD_INT 22
2113: PUSH
2114: LD_INT 1
2116: PUSH
2117: EMPTY
2118: LIST
2119: LIST
2120: PPUSH
2121: CALL_OW 69
2125: PUSH
2126: LD_INT 0
2128: EQUAL
2129: AND
2130: IFFALSE 2232
// begin american_timeing := Rand ( 17 17$00 , 20 20$00 ) ;
2132: LD_ADDR_EXP 27
2136: PUSH
2137: LD_INT 35700
2139: PPUSH
2140: LD_INT 42000
2142: PPUSH
2143: CALL_OW 12
2147: ST_TO_ADDR
// SayRadio ( scout , DS-DZ-U ) ;
2148: LD_EXP 12
2152: PPUSH
2153: LD_STRING DS-DZ-U
2155: PPUSH
2156: CALL_OW 94
// Wait ( 0 0$33 ) ;
2160: LD_INT 1155
2162: PPUSH
2163: CALL_OW 67
// x := Rand ( 1 , 2 ) ;
2167: LD_ADDR_VAR 0 3
2171: PUSH
2172: LD_INT 1
2174: PPUSH
2175: LD_INT 2
2177: PPUSH
2178: CALL_OW 12
2182: ST_TO_ADDR
// case x of 1 :
2183: LD_VAR 0 3
2187: PUSH
2188: LD_INT 1
2190: DOUBLE
2191: EQUAL
2192: IFTRUE 2196
2194: GO 2206
2196: POP
// RaiseSailEvent ( 41 ) ; 2 :
2197: LD_INT 41
2199: PPUSH
2200: CALL_OW 427
2204: GO 2225
2206: LD_INT 2
2208: DOUBLE
2209: EQUAL
2210: IFTRUE 2214
2212: GO 2224
2214: POP
// RaiseSailEvent ( 42 ) ; end ;
2215: LD_INT 42
2217: PPUSH
2218: CALL_OW 427
2222: GO 2225
2224: POP
// RaiseSailEvent ( 42 ) ;
2225: LD_INT 42
2227: PPUSH
2228: CALL_OW 427
// end ; if russian_attack and russian_timeing = 0 0$00 and FilterAllUnits ( [ f_side , 3 ] ) = 0 then
2232: LD_EXP 41
2236: PUSH
2237: LD_EXP 26
2241: PUSH
2242: LD_INT 0
2244: EQUAL
2245: AND
2246: PUSH
2247: LD_INT 22
2249: PUSH
2250: LD_INT 3
2252: PUSH
2253: EMPTY
2254: LIST
2255: LIST
2256: PPUSH
2257: CALL_OW 69
2261: PUSH
2262: LD_INT 0
2264: EQUAL
2265: AND
2266: IFFALSE 2322
// begin russian_timeing := Rand ( 17 17$00 , 20 20$00 ) ;
2268: LD_ADDR_EXP 26
2272: PUSH
2273: LD_INT 35700
2275: PPUSH
2276: LD_INT 42000
2278: PPUSH
2279: CALL_OW 12
2283: ST_TO_ADDR
// SayRadio ( scout , DS-DZ-R ) ;
2284: LD_EXP 12
2288: PPUSH
2289: LD_STRING DS-DZ-R
2291: PPUSH
2292: CALL_OW 94
// Wait ( 0 0$45 ) ;
2296: LD_INT 1575
2298: PPUSH
2299: CALL_OW 67
// SayRadio ( ru_comander , DS-DR-R1 ) ;
2303: LD_EXP 49
2307: PPUSH
2308: LD_STRING DS-DR-R1
2310: PPUSH
2311: CALL_OW 94
// RaiseSailEvent ( 51 ) ;
2315: LD_INT 51
2317: PPUSH
2318: CALL_OW 427
// end ; if mission_time >= 10 10$00 and arabian_force < 10 then
2322: LD_EXP 36
2326: PUSH
2327: LD_INT 21000
2329: GREATEREQUAL
2330: PUSH
2331: LD_EXP 22
2335: PUSH
2336: LD_INT 10
2338: LESS
2339: AND
2340: IFFALSE 2364
// begin mission_time := 0 0$00 ;
2342: LD_ADDR_EXP 36
2346: PUSH
2347: LD_INT 0
2349: ST_TO_ADDR
// arabian_force := arabian_force + 1 ;
2350: LD_ADDR_EXP 22
2354: PUSH
2355: LD_EXP 22
2359: PUSH
2360: LD_INT 1
2362: PLUS
2363: ST_TO_ADDR
// end ; if arabian_timeing = 0 0$00 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_weapon , ar_control_tower ] ] ] ) = 0 then
2364: LD_EXP 25
2368: PUSH
2369: LD_INT 0
2371: EQUAL
2372: PUSH
2373: LD_INT 22
2375: PUSH
2376: LD_INT 2
2378: PUSH
2379: EMPTY
2380: LIST
2381: LIST
2382: PUSH
2383: LD_INT 3
2385: PUSH
2386: LD_INT 34
2388: PUSH
2389: LD_INT 31
2391: PUSH
2392: EMPTY
2393: LIST
2394: LIST
2395: PUSH
2396: EMPTY
2397: LIST
2398: LIST
2399: PUSH
2400: EMPTY
2401: LIST
2402: LIST
2403: PPUSH
2404: CALL_OW 69
2408: PUSH
2409: LD_INT 0
2411: EQUAL
2412: AND
2413: IFFALSE 2611
// begin arabian_timeing := 7 7$30 ;
2415: LD_ADDR_EXP 25
2419: PUSH
2420: LD_INT 15750
2422: ST_TO_ADDR
// x := Rand ( 1 , 3 ) ;
2423: LD_ADDR_VAR 0 3
2427: PUSH
2428: LD_INT 1
2430: PPUSH
2431: LD_INT 3
2433: PPUSH
2434: CALL_OW 12
2438: ST_TO_ADDR
// SayRadio ( scout , DS-DZ-H ) ;
2439: LD_EXP 12
2443: PPUSH
2444: LD_STRING DS-DZ-H
2446: PPUSH
2447: CALL_OW 94
// case x of 1 :
2451: LD_VAR 0 3
2455: PUSH
2456: LD_INT 1
2458: DOUBLE
2459: EQUAL
2460: IFTRUE 2464
2462: GO 2474
2464: POP
// RaiseSailEvent ( 31 ) ; 2 :
2465: LD_INT 31
2467: PPUSH
2468: CALL_OW 427
2472: GO 2511
2474: LD_INT 2
2476: DOUBLE
2477: EQUAL
2478: IFTRUE 2482
2480: GO 2492
2482: POP
// RaiseSailEvent ( 32 ) ; 3 :
2483: LD_INT 32
2485: PPUSH
2486: CALL_OW 427
2490: GO 2511
2492: LD_INT 3
2494: DOUBLE
2495: EQUAL
2496: IFTRUE 2500
2498: GO 2510
2500: POP
// RaiseSailEvent ( 33 ) ; end ;
2501: LD_INT 33
2503: PPUSH
2504: CALL_OW 427
2508: GO 2511
2510: POP
// RaiseSailEvent ( 33 ) ;
2511: LD_INT 33
2513: PPUSH
2514: CALL_OW 427
// if game_difficulty > 1 then
2518: LD_EXP 2
2522: PUSH
2523: LD_INT 1
2525: GREATER
2526: IFFALSE 2535
// RaiseSailEvent ( 33 ) ;
2528: LD_INT 33
2530: PPUSH
2531: CALL_OW 427
// if heike_dialog1 = false then
2535: LD_EXP 46
2539: PUSH
2540: LD_INT 0
2542: EQUAL
2543: IFFALSE 2574
// begin heike_dialog1 := true ;
2545: LD_ADDR_EXP 46
2549: PUSH
2550: LD_INT 1
2552: ST_TO_ADDR
// Wait ( 0 0$03 ) ;
2553: LD_INT 105
2555: PPUSH
2556: CALL_OW 67
// SayRadio ( ar_comander , heike1 ) ;
2560: LD_EXP 50
2564: PPUSH
2565: LD_STRING heike1
2567: PPUSH
2568: CALL_OW 94
// end else
2572: GO 2611
// if heike_dialog2 = false then
2574: LD_EXP 47
2578: PUSH
2579: LD_INT 0
2581: EQUAL
2582: IFFALSE 2611
// begin heike_dialog2 := true ;
2584: LD_ADDR_EXP 47
2588: PUSH
2589: LD_INT 1
2591: ST_TO_ADDR
// Wait ( 0 0$03 ) ;
2592: LD_INT 105
2594: PPUSH
2595: CALL_OW 67
// SayRadio ( ar_comander , heike2 ) ;
2599: LD_EXP 50
2603: PPUSH
2604: LD_STRING heike2
2606: PPUSH
2607: CALL_OW 94
// end ; end ; if FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) > 0 then
2611: LD_INT 22
2613: PUSH
2614: LD_INT 2
2616: PUSH
2617: EMPTY
2618: LIST
2619: LIST
2620: PUSH
2621: LD_INT 33
2623: PUSH
2624: LD_INT 2
2626: PUSH
2627: EMPTY
2628: LIST
2629: LIST
2630: PUSH
2631: EMPTY
2632: LIST
2633: LIST
2634: PPUSH
2635: CALL_OW 69
2639: PUSH
2640: LD_INT 0
2642: GREATER
2643: IFFALSE 2652
// ConnectWithTower ( 2 ) ;
2645: LD_INT 2
2647: PPUSH
2648: CALL 7071 0 1
// if FilterAllUnits ( [ [ [ f_side , 2 ] , [ f_not , [ f_weapon , ar_control_tower ] ] , [ f_not , [ f_hastask ] ] ] ] ) > 0 then
2652: LD_INT 22
2654: PUSH
2655: LD_INT 2
2657: PUSH
2658: EMPTY
2659: LIST
2660: LIST
2661: PUSH
2662: LD_INT 3
2664: PUSH
2665: LD_INT 34
2667: PUSH
2668: LD_INT 31
2670: PUSH
2671: EMPTY
2672: LIST
2673: LIST
2674: PUSH
2675: EMPTY
2676: LIST
2677: LIST
2678: PUSH
2679: LD_INT 3
2681: PUSH
2682: LD_INT 60
2684: PUSH
2685: EMPTY
2686: LIST
2687: PUSH
2688: EMPTY
2689: LIST
2690: LIST
2691: PUSH
2692: EMPTY
2693: LIST
2694: LIST
2695: LIST
2696: PUSH
2697: EMPTY
2698: LIST
2699: PPUSH
2700: CALL_OW 69
2704: PUSH
2705: LD_INT 0
2707: GREATER
2708: IFFALSE 2854
// begin filter := FilterAllUnits ( [ [ [ f_side , 2 ] , [ f_not , [ f_weapon , ar_control_tower ] ] , [ f_not , [ f_hastask ] ] ] ] ) ;
2710: LD_ADDR_VAR 0 4
2714: PUSH
2715: LD_INT 22
2717: PUSH
2718: LD_INT 2
2720: PUSH
2721: EMPTY
2722: LIST
2723: LIST
2724: PUSH
2725: LD_INT 3
2727: PUSH
2728: LD_INT 34
2730: PUSH
2731: LD_INT 31
2733: PUSH
2734: EMPTY
2735: LIST
2736: LIST
2737: PUSH
2738: EMPTY
2739: LIST
2740: LIST
2741: PUSH
2742: LD_INT 3
2744: PUSH
2745: LD_INT 60
2747: PUSH
2748: EMPTY
2749: LIST
2750: PUSH
2751: EMPTY
2752: LIST
2753: LIST
2754: PUSH
2755: EMPTY
2756: LIST
2757: LIST
2758: LIST
2759: PUSH
2760: EMPTY
2761: LIST
2762: PPUSH
2763: CALL_OW 69
2767: ST_TO_ADDR
// x := SpeedFilter ( FilterAllUnits ( [ f_enemy , 2 ] ) , 20 ) ;
2768: LD_ADDR_VAR 0 3
2772: PUSH
2773: LD_INT 81
2775: PUSH
2776: LD_INT 2
2778: PUSH
2779: EMPTY
2780: LIST
2781: LIST
2782: PPUSH
2783: CALL_OW 69
2787: PPUSH
2788: LD_INT 20
2790: PPUSH
2791: CALL 8454 0 2
2795: ST_TO_ADDR
// for i = 1 to filter do
2796: LD_ADDR_VAR 0 1
2800: PUSH
2801: DOUBLE
2802: LD_INT 1
2804: DEC
2805: ST_TO_ADDR
2806: LD_VAR 0 4
2810: PUSH
2811: FOR_TO
2812: IFFALSE 2852
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( x , filter [ i ] ) ) ;
2814: LD_VAR 0 4
2818: PUSH
2819: LD_VAR 0 1
2823: ARRAY
2824: PPUSH
2825: LD_VAR 0 3
2829: PPUSH
2830: LD_VAR 0 4
2834: PUSH
2835: LD_VAR 0 1
2839: ARRAY
2840: PPUSH
2841: CALL_OW 74
2845: PPUSH
2846: CALL_OW 115
2850: GO 2811
2852: POP
2853: POP
// end ; if FilterAllUnits ( [ [ [ f_side , 3 ] , [ f_not , [ f_hastask ] ] ] ] ) > 0 then
2854: LD_INT 22
2856: PUSH
2857: LD_INT 3
2859: PUSH
2860: EMPTY
2861: LIST
2862: LIST
2863: PUSH
2864: LD_INT 3
2866: PUSH
2867: LD_INT 60
2869: PUSH
2870: EMPTY
2871: LIST
2872: PUSH
2873: EMPTY
2874: LIST
2875: LIST
2876: PUSH
2877: EMPTY
2878: LIST
2879: LIST
2880: PUSH
2881: EMPTY
2882: LIST
2883: PPUSH
2884: CALL_OW 69
2888: PUSH
2889: LD_INT 0
2891: GREATER
2892: IFFALSE 3038
// begin filter := FilterAllUnits ( [ [ [ f_side , 3 ] , [ f_not , [ f_weapon , ar_control_tower ] ] , [ f_not , [ f_hastask ] ] ] ] ) ;
2894: LD_ADDR_VAR 0 4
2898: PUSH
2899: LD_INT 22
2901: PUSH
2902: LD_INT 3
2904: PUSH
2905: EMPTY
2906: LIST
2907: LIST
2908: PUSH
2909: LD_INT 3
2911: PUSH
2912: LD_INT 34
2914: PUSH
2915: LD_INT 31
2917: PUSH
2918: EMPTY
2919: LIST
2920: LIST
2921: PUSH
2922: EMPTY
2923: LIST
2924: LIST
2925: PUSH
2926: LD_INT 3
2928: PUSH
2929: LD_INT 60
2931: PUSH
2932: EMPTY
2933: LIST
2934: PUSH
2935: EMPTY
2936: LIST
2937: LIST
2938: PUSH
2939: EMPTY
2940: LIST
2941: LIST
2942: LIST
2943: PUSH
2944: EMPTY
2945: LIST
2946: PPUSH
2947: CALL_OW 69
2951: ST_TO_ADDR
// x := SpeedFilter ( FilterAllUnits ( [ f_enemy , 3 ] ) , 20 ) ;
2952: LD_ADDR_VAR 0 3
2956: PUSH
2957: LD_INT 81
2959: PUSH
2960: LD_INT 3
2962: PUSH
2963: EMPTY
2964: LIST
2965: LIST
2966: PPUSH
2967: CALL_OW 69
2971: PPUSH
2972: LD_INT 20
2974: PPUSH
2975: CALL 8454 0 2
2979: ST_TO_ADDR
// for i = 1 to filter do
2980: LD_ADDR_VAR 0 1
2984: PUSH
2985: DOUBLE
2986: LD_INT 1
2988: DEC
2989: ST_TO_ADDR
2990: LD_VAR 0 4
2994: PUSH
2995: FOR_TO
2996: IFFALSE 3036
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( x , filter [ i ] ) ) ;
2998: LD_VAR 0 4
3002: PUSH
3003: LD_VAR 0 1
3007: ARRAY
3008: PPUSH
3009: LD_VAR 0 3
3013: PPUSH
3014: LD_VAR 0 4
3018: PUSH
3019: LD_VAR 0 1
3023: ARRAY
3024: PPUSH
3025: CALL_OW 74
3029: PPUSH
3030: CALL_OW 115
3034: GO 2995
3036: POP
3037: POP
// end ; if FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] ] ] ) > 0 then
3038: LD_INT 22
3040: PUSH
3041: LD_INT 1
3043: PUSH
3044: EMPTY
3045: LIST
3046: LIST
3047: PUSH
3048: LD_INT 3
3050: PUSH
3051: LD_INT 60
3053: PUSH
3054: EMPTY
3055: LIST
3056: PUSH
3057: EMPTY
3058: LIST
3059: LIST
3060: PUSH
3061: EMPTY
3062: LIST
3063: LIST
3064: PUSH
3065: EMPTY
3066: LIST
3067: PPUSH
3068: CALL_OW 69
3072: PUSH
3073: LD_INT 0
3075: GREATER
3076: IFFALSE 3222
// begin filter := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_not , [ f_weapon , ar_control_tower ] ] , [ f_not , [ f_hastask ] ] ] ] ) ;
3078: LD_ADDR_VAR 0 4
3082: PUSH
3083: LD_INT 22
3085: PUSH
3086: LD_INT 1
3088: PUSH
3089: EMPTY
3090: LIST
3091: LIST
3092: PUSH
3093: LD_INT 3
3095: PUSH
3096: LD_INT 34
3098: PUSH
3099: LD_INT 31
3101: PUSH
3102: EMPTY
3103: LIST
3104: LIST
3105: PUSH
3106: EMPTY
3107: LIST
3108: LIST
3109: PUSH
3110: LD_INT 3
3112: PUSH
3113: LD_INT 60
3115: PUSH
3116: EMPTY
3117: LIST
3118: PUSH
3119: EMPTY
3120: LIST
3121: LIST
3122: PUSH
3123: EMPTY
3124: LIST
3125: LIST
3126: LIST
3127: PUSH
3128: EMPTY
3129: LIST
3130: PPUSH
3131: CALL_OW 69
3135: ST_TO_ADDR
// x := SpeedFilter ( FilterAllUnits ( [ f_enemy , 1 ] ) , 20 ) ;
3136: LD_ADDR_VAR 0 3
3140: PUSH
3141: LD_INT 81
3143: PUSH
3144: LD_INT 1
3146: PUSH
3147: EMPTY
3148: LIST
3149: LIST
3150: PPUSH
3151: CALL_OW 69
3155: PPUSH
3156: LD_INT 20
3158: PPUSH
3159: CALL 8454 0 2
3163: ST_TO_ADDR
// for i = 1 to filter do
3164: LD_ADDR_VAR 0 1
3168: PUSH
3169: DOUBLE
3170: LD_INT 1
3172: DEC
3173: ST_TO_ADDR
3174: LD_VAR 0 4
3178: PUSH
3179: FOR_TO
3180: IFFALSE 3220
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( x , filter [ i ] ) ) ;
3182: LD_VAR 0 4
3186: PUSH
3187: LD_VAR 0 1
3191: ARRAY
3192: PPUSH
3193: LD_VAR 0 3
3197: PPUSH
3198: LD_VAR 0 4
3202: PUSH
3203: LD_VAR 0 1
3207: ARRAY
3208: PPUSH
3209: CALL_OW 74
3213: PPUSH
3214: CALL_OW 115
3218: GO 3179
3220: POP
3221: POP
// end ; if FilterAllUnits ( [ [ [ f_side , 2 ] , [ f_weapon , ar_bio_bomb ] , [ f_not , [ f_lives , 700 ] ] ] ] ) > 0 then
3222: LD_INT 22
3224: PUSH
3225: LD_INT 2
3227: PUSH
3228: EMPTY
3229: LIST
3230: LIST
3231: PUSH
3232: LD_INT 34
3234: PUSH
3235: LD_EXP 17
3239: PUSH
3240: EMPTY
3241: LIST
3242: LIST
3243: PUSH
3244: LD_INT 3
3246: PUSH
3247: LD_INT 24
3249: PUSH
3250: LD_INT 700
3252: PUSH
3253: EMPTY
3254: LIST
3255: LIST
3256: PUSH
3257: EMPTY
3258: LIST
3259: LIST
3260: PUSH
3261: EMPTY
3262: LIST
3263: LIST
3264: LIST
3265: PUSH
3266: EMPTY
3267: LIST
3268: PPUSH
3269: CALL_OW 69
3273: PUSH
3274: LD_INT 0
3276: GREATER
3277: IFFALSE 3376
// begin filter := FilterAllUnits ( [ [ [ f_side , 2 ] , [ f_weapon , ar_bio_bomb ] , [ f_not , [ f_lives , 700 ] ] ] ] ) ;
3279: LD_ADDR_VAR 0 4
3283: PUSH
3284: LD_INT 22
3286: PUSH
3287: LD_INT 2
3289: PUSH
3290: EMPTY
3291: LIST
3292: LIST
3293: PUSH
3294: LD_INT 34
3296: PUSH
3297: LD_EXP 17
3301: PUSH
3302: EMPTY
3303: LIST
3304: LIST
3305: PUSH
3306: LD_INT 3
3308: PUSH
3309: LD_INT 24
3311: PUSH
3312: LD_INT 700
3314: PUSH
3315: EMPTY
3316: LIST
3317: LIST
3318: PUSH
3319: EMPTY
3320: LIST
3321: LIST
3322: PUSH
3323: EMPTY
3324: LIST
3325: LIST
3326: LIST
3327: PUSH
3328: EMPTY
3329: LIST
3330: PPUSH
3331: CALL_OW 69
3335: ST_TO_ADDR
// for i = 1 to filter do
3336: LD_ADDR_VAR 0 1
3340: PUSH
3341: DOUBLE
3342: LD_INT 1
3344: DEC
3345: ST_TO_ADDR
3346: LD_VAR 0 4
3350: PUSH
3351: FOR_TO
3352: IFFALSE 3374
// SetLives ( filter [ i ] , 1 ) ;
3354: LD_VAR 0 4
3358: PUSH
3359: LD_VAR 0 1
3363: ARRAY
3364: PPUSH
3365: LD_INT 1
3367: PPUSH
3368: CALL_OW 234
3372: GO 3351
3374: POP
3375: POP
// end ; end ; end_of_file
3376: PPOPN 4
3378: END
// export function Start_Mission ; begin
3379: LD_INT 0
3381: PPUSH
// PrepareLegion ;
3382: CALL 3489 0 0
// PrepareMeeting ;
3386: CALL 4103 0 0
// case Query ( textdiff ) of 1 :
3390: LD_STRING textdiff
3392: PPUSH
3393: CALL_OW 97
3397: PUSH
3398: LD_INT 1
3400: DOUBLE
3401: EQUAL
3402: IFTRUE 3406
3404: GO 3417
3406: POP
// game_difficulty = 1 ; 2 :
3407: LD_ADDR_EXP 2
3411: PUSH
3412: LD_INT 1
3414: ST_TO_ADDR
3415: GO 3456
3417: LD_INT 2
3419: DOUBLE
3420: EQUAL
3421: IFTRUE 3425
3423: GO 3436
3425: POP
// game_difficulty = 2 ; 3 :
3426: LD_ADDR_EXP 2
3430: PUSH
3431: LD_INT 2
3433: ST_TO_ADDR
3434: GO 3456
3436: LD_INT 3
3438: DOUBLE
3439: EQUAL
3440: IFTRUE 3444
3442: GO 3455
3444: POP
// game_difficulty = 3 ; end ;
3445: LD_ADDR_EXP 2
3449: PUSH
3450: LD_INT 3
3452: ST_TO_ADDR
3453: GO 3456
3455: POP
// case Query ( DS-text-beg ) of 1 :
3456: LD_STRING DS-text-beg
3458: PPUSH
3459: CALL_OW 97
3463: PUSH
3464: LD_INT 1
3466: DOUBLE
3467: EQUAL
3468: IFTRUE 3472
3470: GO 3475
3472: POP
// ; end ;
3473: GO 3476
3475: POP
// game_on := true ;
3476: LD_ADDR_EXP 1
3480: PUSH
3481: LD_INT 1
3483: ST_TO_ADDR
// end ;
3484: LD_VAR 0 1
3488: RET
// export l_cmndr , l_skill , l_units ; function PrepareLegion ; var i , p , filter , team ; begin
3489: LD_INT 0
3491: PPUSH
3492: PPUSH
3493: PPUSH
3494: PPUSH
3495: PPUSH
// uc_side := 8 ;
3496: LD_ADDR_OWVAR 20
3500: PUSH
3501: LD_INT 8
3503: ST_TO_ADDR
// uc_nation := 2 ;
3504: LD_ADDR_OWVAR 21
3508: PUSH
3509: LD_INT 2
3511: ST_TO_ADDR
// l_skill := [ 7 , 6 , 5 ] [ difficulty ] ;
3512: LD_ADDR_EXP 52
3516: PUSH
3517: LD_INT 7
3519: PUSH
3520: LD_INT 6
3522: PUSH
3523: LD_INT 5
3525: PUSH
3526: EMPTY
3527: LIST
3528: LIST
3529: LIST
3530: PUSH
3531: LD_OWVAR 67
3535: ARRAY
3536: ST_TO_ADDR
// l_units := [ 8 , 7 , 6 ] [ difficulty ] ;
3537: LD_ADDR_EXP 53
3541: PUSH
3542: LD_INT 8
3544: PUSH
3545: LD_INT 7
3547: PUSH
3548: LD_INT 6
3550: PUSH
3551: EMPTY
3552: LIST
3553: LIST
3554: LIST
3555: PUSH
3556: LD_OWVAR 67
3560: ARRAY
3561: ST_TO_ADDR
// filter := [ ] ;
3562: LD_ADDR_VAR 0 4
3566: PUSH
3567: EMPTY
3568: ST_TO_ADDR
// hc_gallery := desert ;
3569: LD_ADDR_OWVAR 33
3573: PUSH
3574: LD_STRING desert
3576: ST_TO_ADDR
// hc_face_number := 1 ;
3577: LD_ADDR_OWVAR 34
3581: PUSH
3582: LD_INT 1
3584: ST_TO_ADDR
// hc_skills := [ l_skill + 2 , l_skill - 1 , l_skill , l_skill + 1 ] ;
3585: LD_ADDR_OWVAR 31
3589: PUSH
3590: LD_EXP 52
3594: PUSH
3595: LD_INT 2
3597: PLUS
3598: PUSH
3599: LD_EXP 52
3603: PUSH
3604: LD_INT 1
3606: MINUS
3607: PUSH
3608: LD_EXP 52
3612: PUSH
3613: LD_EXP 52
3617: PUSH
3618: LD_INT 1
3620: PLUS
3621: PUSH
3622: EMPTY
3623: LIST
3624: LIST
3625: LIST
3626: LIST
3627: ST_TO_ADDR
// hc_sex := sex_male ;
3628: LD_ADDR_OWVAR 27
3632: PUSH
3633: LD_INT 1
3635: ST_TO_ADDR
// hc_name := Henri Ruotz ;
3636: LD_ADDR_OWVAR 26
3640: PUSH
3641: LD_STRING Henri Ruotz
3643: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
3644: LD_ADDR_OWVAR 29
3648: PUSH
3649: LD_INT 10
3651: PUSH
3652: LD_INT 10
3654: PUSH
3655: EMPTY
3656: LIST
3657: LIST
3658: ST_TO_ADDR
// hc_class := 1 ;
3659: LD_ADDR_OWVAR 28
3663: PUSH
3664: LD_INT 1
3666: ST_TO_ADDR
// hc_importance := 100 ;
3667: LD_ADDR_OWVAR 32
3671: PUSH
3672: LD_INT 100
3674: ST_TO_ADDR
// l_cmndr := CreateHuman ;
3675: LD_ADDR_EXP 51
3679: PUSH
3680: CALL_OW 44
3684: ST_TO_ADDR
// hc_importance := 0 ;
3685: LD_ADDR_OWVAR 32
3689: PUSH
3690: LD_INT 0
3692: ST_TO_ADDR
// scout := CreateHumanWithClass ( 1 , 0 ) ;
3693: LD_ADDR_EXP 12
3697: PUSH
3698: LD_INT 1
3700: PPUSH
3701: LD_INT 0
3703: PPUSH
3704: CALL 7255 0 2
3708: ST_TO_ADDR
// for i = 1 to 4 do
3709: LD_ADDR_VAR 0 2
3713: PUSH
3714: DOUBLE
3715: LD_INT 1
3717: DEC
3718: ST_TO_ADDR
3719: LD_INT 4
3721: PUSH
3722: FOR_TO
3723: IFFALSE 3773
// for p = 1 to 6 do
3725: LD_ADDR_VAR 0 3
3729: PUSH
3730: DOUBLE
3731: LD_INT 1
3733: DEC
3734: ST_TO_ADDR
3735: LD_INT 6
3737: PUSH
3738: FOR_TO
3739: IFFALSE 3769
// filter := filter ^ CreateHumanWithClass ( i , l_skill ) ;
3741: LD_ADDR_VAR 0 4
3745: PUSH
3746: LD_VAR 0 4
3750: PUSH
3751: LD_VAR 0 2
3755: PPUSH
3756: LD_EXP 52
3760: PPUSH
3761: CALL 7255 0 2
3765: ADD
3766: ST_TO_ADDR
3767: GO 3738
3769: POP
3770: POP
3771: GO 3722
3773: POP
3774: POP
// team := CharacterSelection ( text , l_units , l_units , [ sel_change_class , l_cmndr , sel_changeable , sel_not_hired ] ^ filter , [ class_soldier , class_mechanic , class_engineer , class_scientistic , class_mortar ] ) ;
3775: LD_ADDR_VAR 0 5
3779: PUSH
3780: LD_STRING text
3782: PPUSH
3783: LD_EXP 53
3787: PPUSH
3788: LD_EXP 53
3792: PPUSH
3793: LD_INT -5
3795: PUSH
3796: LD_EXP 51
3800: PUSH
3801: LD_INT -3
3803: PUSH
3804: LD_INT -2
3806: PUSH
3807: EMPTY
3808: LIST
3809: LIST
3810: LIST
3811: LIST
3812: PUSH
3813: LD_VAR 0 4
3817: ADD
3818: PPUSH
3819: LD_INT 1
3821: PUSH
3822: LD_INT 3
3824: PUSH
3825: LD_INT 2
3827: PUSH
3828: LD_INT 4
3830: PUSH
3831: LD_INT 8
3833: PUSH
3834: EMPTY
3835: LIST
3836: LIST
3837: LIST
3838: LIST
3839: LIST
3840: PPUSH
3841: CALL_OW 42
3845: ST_TO_ADDR
// for i = 1 to l_units do
3846: LD_ADDR_VAR 0 2
3850: PUSH
3851: DOUBLE
3852: LD_INT 1
3854: DEC
3855: ST_TO_ADDR
3856: LD_EXP 53
3860: PUSH
3861: FOR_TO
3862: IFFALSE 3887
// PlaceUnitArea ( team [ i ] , legion_spawn , false ) ;
3864: LD_VAR 0 5
3868: PUSH
3869: LD_VAR 0 2
3873: ARRAY
3874: PPUSH
3875: LD_INT 1
3877: PPUSH
3878: LD_INT 0
3880: PPUSH
3881: CALL_OW 49
3885: GO 3861
3887: POP
3888: POP
// PlaceUnitArea ( l_cmndr , legion_spawn , false ) ;
3889: LD_EXP 51
3893: PPUSH
3894: LD_INT 1
3896: PPUSH
3897: LD_INT 0
3899: PPUSH
3900: CALL_OW 49
// end ;
3904: LD_VAR 0 1
3908: RET
// export function PlaceCamera ; begin
3909: LD_INT 0
3911: PPUSH
// PlaceSeeing ( 46 , 48 , 8 , 10 ) ;
3912: LD_INT 46
3914: PPUSH
3915: LD_INT 48
3917: PPUSH
3918: LD_INT 8
3920: PPUSH
3921: LD_INT 10
3923: PPUSH
3924: CALL_OW 330
// PlaceSeeing ( 58 , 66 , 8 , 10 ) ;
3928: LD_INT 58
3930: PPUSH
3931: LD_INT 66
3933: PPUSH
3934: LD_INT 8
3936: PPUSH
3937: LD_INT 10
3939: PPUSH
3940: CALL_OW 330
// PlaceSeeing ( 82 , 82 , 8 , 10 ) ;
3944: LD_INT 82
3946: PPUSH
3947: LD_INT 82
3949: PPUSH
3950: LD_INT 8
3952: PPUSH
3953: LD_INT 10
3955: PPUSH
3956: CALL_OW 330
// PlaceSeeing ( 107 , 79 , 8 , 10 ) ;
3960: LD_INT 107
3962: PPUSH
3963: LD_INT 79
3965: PPUSH
3966: LD_INT 8
3968: PPUSH
3969: LD_INT 10
3971: PPUSH
3972: CALL_OW 330
// PlaceSeeing ( 101 , 57 , 8 , 10 ) ;
3976: LD_INT 101
3978: PPUSH
3979: LD_INT 57
3981: PPUSH
3982: LD_INT 8
3984: PPUSH
3985: LD_INT 10
3987: PPUSH
3988: CALL_OW 330
// PlaceSeeing ( 85 , 32 , 8 , 10 ) ;
3992: LD_INT 85
3994: PPUSH
3995: LD_INT 32
3997: PPUSH
3998: LD_INT 8
4000: PPUSH
4001: LD_INT 10
4003: PPUSH
4004: CALL_OW 330
// PlaceSeeing ( 108 , 72 , 8 , 10 ) ;
4008: LD_INT 108
4010: PPUSH
4011: LD_INT 72
4013: PPUSH
4014: LD_INT 8
4016: PPUSH
4017: LD_INT 10
4019: PPUSH
4020: CALL_OW 330
// PlaceSeeing ( 124 , 74 , 8 , 10 ) ;
4024: LD_INT 124
4026: PPUSH
4027: LD_INT 74
4029: PPUSH
4030: LD_INT 8
4032: PPUSH
4033: LD_INT 10
4035: PPUSH
4036: CALL_OW 330
// PlaceSeeing ( 67 , 33 , 8 , 20 ) ;
4040: LD_INT 67
4042: PPUSH
4043: LD_INT 33
4045: PPUSH
4046: LD_INT 8
4048: PPUSH
4049: LD_INT 20
4051: PPUSH
4052: CALL_OW 330
// RemoveSeeing ( 67 , 33 , 8 ) ;
4056: LD_INT 67
4058: PPUSH
4059: LD_INT 33
4061: PPUSH
4062: LD_INT 8
4064: PPUSH
4065: CALL_OW 331
// PlaceSeeing ( 94 , 84 , 8 , 20 ) ;
4069: LD_INT 94
4071: PPUSH
4072: LD_INT 84
4074: PPUSH
4075: LD_INT 8
4077: PPUSH
4078: LD_INT 20
4080: PPUSH
4081: CALL_OW 330
// RemoveSeeing ( 94 , 84 , 8 ) ;
4085: LD_INT 94
4087: PPUSH
4088: LD_INT 84
4090: PPUSH
4091: LD_INT 8
4093: PPUSH
4094: CALL_OW 331
// end ;
4098: LD_VAR 0 1
4102: RET
// export function PrepareMeeting ; begin
4103: LD_INT 0
4105: PPUSH
// uc_side := 6 ;
4106: LD_ADDR_OWVAR 20
4110: PUSH
4111: LD_INT 6
4113: ST_TO_ADDR
// hc_gallery := desert ;
4114: LD_ADDR_OWVAR 33
4118: PUSH
4119: LD_STRING desert
4121: ST_TO_ADDR
// hc_face_number := 2 ;
4122: LD_ADDR_OWVAR 34
4126: PUSH
4127: LD_INT 2
4129: ST_TO_ADDR
// hc_name := Leopold Drass ;
4130: LD_ADDR_OWVAR 26
4134: PUSH
4135: LD_STRING Leopold Drass
4137: ST_TO_ADDR
// hc_class := 1 ;
4138: LD_ADDR_OWVAR 28
4142: PUSH
4143: LD_INT 1
4145: ST_TO_ADDR
// hc_sex := sex_male ;
4146: LD_ADDR_OWVAR 27
4150: PUSH
4151: LD_INT 1
4153: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
4154: LD_ADDR_OWVAR 29
4158: PUSH
4159: LD_INT 12
4161: PUSH
4162: LD_INT 12
4164: PUSH
4165: EMPTY
4166: LIST
4167: LIST
4168: ST_TO_ADDR
// Leopold := CreateHuman ;
4169: LD_ADDR_EXP 7
4173: PUSH
4174: CALL_OW 44
4178: ST_TO_ADDR
// PlaceUnitArea ( Leopold , north_spawn , false ) ;
4179: LD_EXP 7
4183: PPUSH
4184: LD_INT 3
4186: PPUSH
4187: LD_INT 0
4189: PPUSH
4190: CALL_OW 49
// end ; end_of_file
4194: LD_VAR 0 1
4198: RET
// on SailEvent ( num ) do var i , filter , un , p , area ;
4199: LD_INT 0
4201: PPUSH
4202: PPUSH
4203: PPUSH
4204: PPUSH
4205: PPUSH
// begin case num of 1 :
4206: LD_VAR 0 1
4210: PUSH
4211: LD_INT 1
4213: DOUBLE
4214: EQUAL
4215: IFTRUE 4219
4217: GO 4251
4219: POP
// begin ComMoveXY ( leopold , GetX ( l_cmndr ) , GetY ( l_cmndr ) ) ;
4220: LD_EXP 7
4224: PPUSH
4225: LD_EXP 51
4229: PPUSH
4230: CALL_OW 250
4234: PPUSH
4235: LD_EXP 51
4239: PPUSH
4240: CALL_OW 251
4244: PPUSH
4245: CALL_OW 111
// end ; 2 :
4249: GO 6620
4251: LD_INT 2
4253: DOUBLE
4254: EQUAL
4255: IFTRUE 4259
4257: GO 4368
4259: POP
// begin InGameOn ;
4260: CALL_OW 8
// meeting_start := true ;
4264: LD_ADDR_EXP 28
4268: PUSH
4269: LD_INT 1
4271: ST_TO_ADDR
// ComTurnUnit ( leopold , l_cmndr ) ;
4272: LD_EXP 7
4276: PPUSH
4277: LD_EXP 51
4281: PPUSH
4282: CALL_OW 119
// ComTurnUnit ( l_cmndr , leopold ) ;
4286: LD_EXP 51
4290: PPUSH
4291: LD_EXP 7
4295: PPUSH
4296: CALL_OW 119
// Say ( leopold , DS-DL-1 ) ;
4300: LD_EXP 7
4304: PPUSH
4305: LD_STRING DS-DL-1
4307: PPUSH
4308: CALL_OW 88
// Say ( l_cmndr , DS-DC-1 ) ;
4312: LD_EXP 51
4316: PPUSH
4317: LD_STRING DS-DC-1
4319: PPUSH
4320: CALL_OW 88
// Say ( leopold , DS-DL-2 ) ;
4324: LD_EXP 7
4328: PPUSH
4329: LD_STRING DS-DL-2
4331: PPUSH
4332: CALL_OW 88
// ComEnterUnit ( leopold , fort ) ;
4336: LD_EXP 7
4340: PPUSH
4341: LD_INT 23
4343: PPUSH
4344: CALL_OW 120
// InGameOff ;
4348: CALL_OW 9
// Wait ( 0 0$01 ) ;
4352: LD_INT 35
4354: PPUSH
4355: CALL_OW 67
// ChangeMissionObjectives ( DS-T1 ) ;
4359: LD_STRING DS-T1
4361: PPUSH
4362: CALL_OW 337
// end ; 10 :
4366: GO 6620
4368: LD_INT 10
4370: DOUBLE
4371: EQUAL
4372: IFTRUE 4376
4374: GO 4588
4376: POP
// begin uc_side := 6 ;
4377: LD_ADDR_OWVAR 20
4381: PUSH
4382: LD_INT 6
4384: ST_TO_ADDR
// uc_nation := 2 ;
4385: LD_ADDR_OWVAR 21
4389: PUSH
4390: LD_INT 2
4392: ST_TO_ADDR
// hc_gallery :=  ;
4393: LD_ADDR_OWVAR 33
4397: PUSH
4398: LD_STRING 
4400: ST_TO_ADDR
// hc_skills := [ skill + 2 , skill - 1 , skill , skill + 1 ] ;
4401: LD_ADDR_OWVAR 31
4405: PUSH
4406: LD_EXP 16
4410: PUSH
4411: LD_INT 2
4413: PLUS
4414: PUSH
4415: LD_EXP 16
4419: PUSH
4420: LD_INT 1
4422: MINUS
4423: PUSH
4424: LD_EXP 16
4428: PUSH
4429: LD_EXP 16
4433: PUSH
4434: LD_INT 1
4436: PLUS
4437: PUSH
4438: EMPTY
4439: LIST
4440: LIST
4441: LIST
4442: LIST
4443: ST_TO_ADDR
// hc_sex := sex_male ;
4444: LD_ADDR_OWVAR 27
4448: PUSH
4449: LD_INT 1
4451: ST_TO_ADDR
// hc_name := Samuel van Horn ;
4452: LD_ADDR_OWVAR 26
4456: PUSH
4457: LD_STRING Samuel van Horn
4459: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
4460: LD_ADDR_OWVAR 29
4464: PUSH
4465: LD_INT 11
4467: PUSH
4468: LD_INT 10
4470: PUSH
4471: EMPTY
4472: LIST
4473: LIST
4474: ST_TO_ADDR
// hc_class := 1 ;
4475: LD_ADDR_OWVAR 28
4479: PUSH
4480: LD_INT 1
4482: ST_TO_ADDR
// samuel := CreateHuman ;
4483: LD_ADDR_EXP 9
4487: PUSH
4488: CALL_OW 44
4492: ST_TO_ADDR
// PlaceUnitArea ( samuel , south_spawn , false ) ;
4493: LD_EXP 9
4497: PPUSH
4498: LD_INT 4
4500: PPUSH
4501: LD_INT 0
4503: PPUSH
4504: CALL_OW 49
// for i = 1 to 3 do
4508: LD_ADDR_VAR 0 2
4512: PUSH
4513: DOUBLE
4514: LD_INT 1
4516: DEC
4517: ST_TO_ADDR
4518: LD_INT 3
4520: PUSH
4521: FOR_TO
4522: IFFALSE 4549
// PlaceUnitArea ( CreateHumanWithClass ( class_mortar , skill ) , south_spawn , false ) ;
4524: LD_INT 8
4526: PPUSH
4527: LD_EXP 16
4531: PPUSH
4532: CALL 7255 0 2
4536: PPUSH
4537: LD_INT 4
4539: PPUSH
4540: LD_INT 0
4542: PPUSH
4543: CALL_OW 49
4547: GO 4521
4549: POP
4550: POP
// ComEnterUnit ( FilterAllUnits ( [ f_side , 6 ] ) diff [ leopold , fort ] , fort ) ;
4551: LD_INT 22
4553: PUSH
4554: LD_INT 6
4556: PUSH
4557: EMPTY
4558: LIST
4559: LIST
4560: PPUSH
4561: CALL_OW 69
4565: PUSH
4566: LD_EXP 7
4570: PUSH
4571: LD_INT 23
4573: PUSH
4574: EMPTY
4575: LIST
4576: LIST
4577: DIFF
4578: PPUSH
4579: LD_INT 23
4581: PPUSH
4582: CALL_OW 120
// end ; 3 :
4586: GO 6620
4588: LD_INT 3
4590: DOUBLE
4591: EQUAL
4592: IFTRUE 4596
4594: GO 4607
4596: POP
// begin arabian_attack := true ;
4597: LD_ADDR_EXP 40
4601: PUSH
4602: LD_INT 1
4604: ST_TO_ADDR
// end ; 4 :
4605: GO 6620
4607: LD_INT 4
4609: DOUBLE
4610: EQUAL
4611: IFTRUE 4615
4613: GO 4626
4615: POP
// begin american_attack := true ;
4616: LD_ADDR_EXP 42
4620: PUSH
4621: LD_INT 1
4623: ST_TO_ADDR
// end ; 5 :
4624: GO 6620
4626: LD_INT 5
4628: DOUBLE
4629: EQUAL
4630: IFTRUE 4634
4632: GO 4645
4634: POP
// begin russian_attack := true ;
4635: LD_ADDR_EXP 41
4639: PUSH
4640: LD_INT 1
4642: ST_TO_ADDR
// end ; 31 :
4643: GO 6620
4645: LD_INT 31
4647: DOUBLE
4648: EQUAL
4649: IFTRUE 4653
4651: GO 4928
4653: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
4654: LD_ADDR_VAR 0 6
4658: PUSH
4659: LD_EXP 15
4663: PUSH
4664: LD_INT 1
4666: PPUSH
4667: LD_EXP 15
4671: PPUSH
4672: CALL_OW 12
4676: ARRAY
4677: ST_TO_ADDR
// uc_side := 2 ;
4678: LD_ADDR_OWVAR 20
4682: PUSH
4683: LD_INT 2
4685: ST_TO_ADDR
// uc_nation := 2 ;
4686: LD_ADDR_OWVAR 21
4690: PUSH
4691: LD_INT 2
4693: ST_TO_ADDR
// for i = 1 to arabian_force do
4694: LD_ADDR_VAR 0 2
4698: PUSH
4699: DOUBLE
4700: LD_INT 1
4702: DEC
4703: ST_TO_ADDR
4704: LD_EXP 22
4708: PUSH
4709: FOR_TO
4710: IFFALSE 4789
// begin vc_chassis := ar_half_tracked ;
4712: LD_ADDR_OWVAR 37
4716: PUSH
4717: LD_INT 14
4719: ST_TO_ADDR
// vc_engine := engine_siberite ;
4720: LD_ADDR_OWVAR 39
4724: PUSH
4725: LD_INT 3
4727: ST_TO_ADDR
// vc_control := control_remote ;
4728: LD_ADDR_OWVAR 38
4732: PUSH
4733: LD_INT 2
4735: ST_TO_ADDR
// vc_weapon := ar_weapons [ Rand ( 1 , ar_weapons ) ] ;
4736: LD_ADDR_OWVAR 40
4740: PUSH
4741: LD_EXP 19
4745: PUSH
4746: LD_INT 1
4748: PPUSH
4749: LD_EXP 19
4753: PPUSH
4754: CALL_OW 12
4758: ARRAY
4759: ST_TO_ADDR
// un := CreateVehicle ;
4760: LD_ADDR_VAR 0 4
4764: PUSH
4765: CALL_OW 45
4769: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
4770: LD_VAR 0 4
4774: PPUSH
4775: LD_VAR 0 6
4779: PPUSH
4780: LD_INT 0
4782: PPUSH
4783: CALL_OW 49
// end ;
4787: GO 4709
4789: POP
4790: POP
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_manual ] ] ) < 2 then
4791: LD_INT 22
4793: PUSH
4794: LD_INT 2
4796: PUSH
4797: EMPTY
4798: LIST
4799: LIST
4800: PUSH
4801: LD_INT 33
4803: PUSH
4804: LD_INT 1
4806: PUSH
4807: EMPTY
4808: LIST
4809: LIST
4810: PUSH
4811: EMPTY
4812: LIST
4813: LIST
4814: PPUSH
4815: CALL_OW 69
4819: PUSH
4820: LD_INT 2
4822: LESS
4823: IFFALSE 4926
// for i = 1 to 2 do
4825: LD_ADDR_VAR 0 2
4829: PUSH
4830: DOUBLE
4831: LD_INT 1
4833: DEC
4834: ST_TO_ADDR
4835: LD_INT 2
4837: PUSH
4838: FOR_TO
4839: IFFALSE 4924
// begin vc_chassis := ar_half_tracked ;
4841: LD_ADDR_OWVAR 37
4845: PUSH
4846: LD_INT 14
4848: ST_TO_ADDR
// vc_engine := engine_siberite ;
4849: LD_ADDR_OWVAR 39
4853: PUSH
4854: LD_INT 3
4856: ST_TO_ADDR
// vc_control := control_manual ;
4857: LD_ADDR_OWVAR 38
4861: PUSH
4862: LD_INT 1
4864: ST_TO_ADDR
// vc_weapon := ar_control_tower ;
4865: LD_ADDR_OWVAR 40
4869: PUSH
4870: LD_INT 31
4872: ST_TO_ADDR
// un := CreateVehicle ;
4873: LD_ADDR_VAR 0 4
4877: PUSH
4878: CALL_OW 45
4882: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
4883: LD_VAR 0 4
4887: PPUSH
4888: LD_VAR 0 6
4892: PPUSH
4893: LD_INT 0
4895: PPUSH
4896: CALL_OW 49
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , skill ) , un ) ;
4900: LD_INT 3
4902: PPUSH
4903: LD_EXP 16
4907: PPUSH
4908: CALL 7255 0 2
4912: PPUSH
4913: LD_VAR 0 4
4917: PPUSH
4918: CALL_OW 52
// end ;
4922: GO 4838
4924: POP
4925: POP
// end ; 32 :
4926: GO 6620
4928: LD_INT 32
4930: DOUBLE
4931: EQUAL
4932: IFTRUE 4936
4934: GO 5309
4936: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
4937: LD_ADDR_VAR 0 6
4941: PUSH
4942: LD_EXP 15
4946: PUSH
4947: LD_INT 1
4949: PPUSH
4950: LD_EXP 15
4954: PPUSH
4955: CALL_OW 12
4959: ARRAY
4960: ST_TO_ADDR
// uc_side := 2 ;
4961: LD_ADDR_OWVAR 20
4965: PUSH
4966: LD_INT 2
4968: ST_TO_ADDR
// uc_nation := 2 ;
4969: LD_ADDR_OWVAR 21
4973: PUSH
4974: LD_INT 2
4976: ST_TO_ADDR
// for i = 1 to ( arabian_force - 2 ) do
4977: LD_ADDR_VAR 0 2
4981: PUSH
4982: DOUBLE
4983: LD_INT 1
4985: DEC
4986: ST_TO_ADDR
4987: LD_EXP 22
4991: PUSH
4992: LD_INT 2
4994: MINUS
4995: PUSH
4996: FOR_TO
4997: IFFALSE 5080
// begin vc_chassis := ar_half_tracked ;
4999: LD_ADDR_OWVAR 37
5003: PUSH
5004: LD_INT 14
5006: ST_TO_ADDR
// vc_engine := engine_siberite ;
5007: LD_ADDR_OWVAR 39
5011: PUSH
5012: LD_INT 3
5014: ST_TO_ADDR
// vc_control := control_remote ;
5015: LD_ADDR_OWVAR 38
5019: PUSH
5020: LD_INT 2
5022: ST_TO_ADDR
// vc_weapon := ar_weapons [ Rand ( 1 , ar_weapons - 1 ) ] ;
5023: LD_ADDR_OWVAR 40
5027: PUSH
5028: LD_EXP 19
5032: PUSH
5033: LD_INT 1
5035: PPUSH
5036: LD_EXP 19
5040: PUSH
5041: LD_INT 1
5043: MINUS
5044: PPUSH
5045: CALL_OW 12
5049: ARRAY
5050: ST_TO_ADDR
// un := CreateVehicle ;
5051: LD_ADDR_VAR 0 4
5055: PUSH
5056: CALL_OW 45
5060: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5061: LD_VAR 0 4
5065: PPUSH
5066: LD_VAR 0 6
5070: PPUSH
5071: LD_INT 0
5073: PPUSH
5074: CALL_OW 49
// end ;
5078: GO 4996
5080: POP
5081: POP
// for i = 1 to Rand ( 0 , 1 ) + [ 3 , 4 , 5 ] [ game_difficulty ] do
5082: LD_ADDR_VAR 0 2
5086: PUSH
5087: DOUBLE
5088: LD_INT 1
5090: DEC
5091: ST_TO_ADDR
5092: LD_INT 0
5094: PPUSH
5095: LD_INT 1
5097: PPUSH
5098: CALL_OW 12
5102: PUSH
5103: LD_INT 3
5105: PUSH
5106: LD_INT 4
5108: PUSH
5109: LD_INT 5
5111: PUSH
5112: EMPTY
5113: LIST
5114: LIST
5115: LIST
5116: PUSH
5117: LD_EXP 2
5121: ARRAY
5122: PLUS
5123: PUSH
5124: FOR_TO
5125: IFFALSE 5162
// begin uc_nation := 0 ;
5127: LD_ADDR_OWVAR 21
5131: PUSH
5132: LD_INT 0
5134: ST_TO_ADDR
// PlaceUnitArea ( CreateHumanWithClass ( 17 , skill ) , area , false ) ;
5135: LD_INT 17
5137: PPUSH
5138: LD_EXP 16
5142: PPUSH
5143: CALL 7255 0 2
5147: PPUSH
5148: LD_VAR 0 6
5152: PPUSH
5153: LD_INT 0
5155: PPUSH
5156: CALL_OW 49
// end ;
5160: GO 5124
5162: POP
5163: POP
// uc_nation := 2 ;
5164: LD_ADDR_OWVAR 21
5168: PUSH
5169: LD_INT 2
5171: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_manual ] ] ) < 2 then
5172: LD_INT 22
5174: PUSH
5175: LD_INT 2
5177: PUSH
5178: EMPTY
5179: LIST
5180: LIST
5181: PUSH
5182: LD_INT 33
5184: PUSH
5185: LD_INT 1
5187: PUSH
5188: EMPTY
5189: LIST
5190: LIST
5191: PUSH
5192: EMPTY
5193: LIST
5194: LIST
5195: PPUSH
5196: CALL_OW 69
5200: PUSH
5201: LD_INT 2
5203: LESS
5204: IFFALSE 5307
// for i = 1 to 2 do
5206: LD_ADDR_VAR 0 2
5210: PUSH
5211: DOUBLE
5212: LD_INT 1
5214: DEC
5215: ST_TO_ADDR
5216: LD_INT 2
5218: PUSH
5219: FOR_TO
5220: IFFALSE 5305
// begin vc_chassis := ar_half_tracked ;
5222: LD_ADDR_OWVAR 37
5226: PUSH
5227: LD_INT 14
5229: ST_TO_ADDR
// vc_engine := engine_siberite ;
5230: LD_ADDR_OWVAR 39
5234: PUSH
5235: LD_INT 3
5237: ST_TO_ADDR
// vc_control := control_manual ;
5238: LD_ADDR_OWVAR 38
5242: PUSH
5243: LD_INT 1
5245: ST_TO_ADDR
// vc_weapon := ar_control_tower ;
5246: LD_ADDR_OWVAR 40
5250: PUSH
5251: LD_INT 31
5253: ST_TO_ADDR
// un := CreateVehicle ;
5254: LD_ADDR_VAR 0 4
5258: PUSH
5259: CALL_OW 45
5263: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5264: LD_VAR 0 4
5268: PPUSH
5269: LD_VAR 0 6
5273: PPUSH
5274: LD_INT 0
5276: PPUSH
5277: CALL_OW 49
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , skill ) , un ) ;
5281: LD_INT 3
5283: PPUSH
5284: LD_EXP 16
5288: PPUSH
5289: CALL 7255 0 2
5293: PPUSH
5294: LD_VAR 0 4
5298: PPUSH
5299: CALL_OW 52
// end ;
5303: GO 5219
5305: POP
5306: POP
// end ; 33 :
5307: GO 6620
5309: LD_INT 33
5311: DOUBLE
5312: EQUAL
5313: IFTRUE 5317
5315: GO 5588
5317: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
5318: LD_ADDR_VAR 0 6
5322: PUSH
5323: LD_EXP 15
5327: PUSH
5328: LD_INT 1
5330: PPUSH
5331: LD_EXP 15
5335: PPUSH
5336: CALL_OW 12
5340: ARRAY
5341: ST_TO_ADDR
// uc_side := 2 ;
5342: LD_ADDR_OWVAR 20
5346: PUSH
5347: LD_INT 2
5349: ST_TO_ADDR
// uc_nation := 2 ;
5350: LD_ADDR_OWVAR 21
5354: PUSH
5355: LD_INT 2
5357: ST_TO_ADDR
// for i = 1 to ( arabian_force / 2 ) do
5358: LD_ADDR_VAR 0 2
5362: PUSH
5363: DOUBLE
5364: LD_INT 1
5366: DEC
5367: ST_TO_ADDR
5368: LD_EXP 22
5372: PUSH
5373: LD_INT 2
5375: DIVREAL
5376: PUSH
5377: FOR_TO
5378: IFFALSE 5483
// begin vc_chassis := ar_half_tracked ;
5380: LD_ADDR_OWVAR 37
5384: PUSH
5385: LD_INT 14
5387: ST_TO_ADDR
// vc_engine := engine_siberite ;
5388: LD_ADDR_OWVAR 39
5392: PUSH
5393: LD_INT 3
5395: ST_TO_ADDR
// vc_control := control_manual ;
5396: LD_ADDR_OWVAR 38
5400: PUSH
5401: LD_INT 1
5403: ST_TO_ADDR
// vc_weapon := ar_weapons [ Rand ( 1 , ar_weapons - 2 ) ] ;
5404: LD_ADDR_OWVAR 40
5408: PUSH
5409: LD_EXP 19
5413: PUSH
5414: LD_INT 1
5416: PPUSH
5417: LD_EXP 19
5421: PUSH
5422: LD_INT 2
5424: MINUS
5425: PPUSH
5426: CALL_OW 12
5430: ARRAY
5431: ST_TO_ADDR
// un := CreateVehicle ;
5432: LD_ADDR_VAR 0 4
5436: PUSH
5437: CALL_OW 45
5441: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5442: LD_VAR 0 4
5446: PPUSH
5447: LD_VAR 0 6
5451: PPUSH
5452: LD_INT 0
5454: PPUSH
5455: CALL_OW 49
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , skill ) , un ) ;
5459: LD_INT 3
5461: PPUSH
5462: LD_EXP 16
5466: PPUSH
5467: CALL 7255 0 2
5471: PPUSH
5472: LD_VAR 0 4
5476: PPUSH
5477: CALL_OW 52
// end ;
5481: GO 5377
5483: POP
5484: POP
// for i = 1 to ( arabian_force / 2 ) do
5485: LD_ADDR_VAR 0 2
5489: PUSH
5490: DOUBLE
5491: LD_INT 1
5493: DEC
5494: ST_TO_ADDR
5495: LD_EXP 22
5499: PUSH
5500: LD_INT 2
5502: DIVREAL
5503: PUSH
5504: FOR_TO
5505: IFFALSE 5584
// begin vc_chassis := ar_half_tracked ;
5507: LD_ADDR_OWVAR 37
5511: PUSH
5512: LD_INT 14
5514: ST_TO_ADDR
// vc_engine := engine_siberite ;
5515: LD_ADDR_OWVAR 39
5519: PUSH
5520: LD_INT 3
5522: ST_TO_ADDR
// vc_control := control_apeman ;
5523: LD_ADDR_OWVAR 38
5527: PUSH
5528: LD_INT 5
5530: ST_TO_ADDR
// vc_weapon := ar_weapons [ Rand ( 2 , ar_weapons ) ] ;
5531: LD_ADDR_OWVAR 40
5535: PUSH
5536: LD_EXP 19
5540: PUSH
5541: LD_INT 2
5543: PPUSH
5544: LD_EXP 19
5548: PPUSH
5549: CALL_OW 12
5553: ARRAY
5554: ST_TO_ADDR
// un := CreateVehicle ;
5555: LD_ADDR_VAR 0 4
5559: PUSH
5560: CALL_OW 45
5564: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5565: LD_VAR 0 4
5569: PPUSH
5570: LD_VAR 0 6
5574: PPUSH
5575: LD_INT 0
5577: PPUSH
5578: CALL_OW 49
// end ;
5582: GO 5504
5584: POP
5585: POP
// end ; 41 :
5586: GO 6620
5588: LD_INT 41
5590: DOUBLE
5591: EQUAL
5592: IFTRUE 5596
5594: GO 5740
5596: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
5597: LD_ADDR_VAR 0 6
5601: PUSH
5602: LD_EXP 15
5606: PUSH
5607: LD_INT 1
5609: PPUSH
5610: LD_EXP 15
5614: PPUSH
5615: CALL_OW 12
5619: ARRAY
5620: ST_TO_ADDR
// uc_side := 1 ;
5621: LD_ADDR_OWVAR 20
5625: PUSH
5626: LD_INT 1
5628: ST_TO_ADDR
// uc_nation := 1 ;
5629: LD_ADDR_OWVAR 21
5633: PUSH
5634: LD_INT 1
5636: ST_TO_ADDR
// for i = 1 to american_force do
5637: LD_ADDR_VAR 0 2
5641: PUSH
5642: DOUBLE
5643: LD_INT 1
5645: DEC
5646: ST_TO_ADDR
5647: LD_EXP 24
5651: PUSH
5652: FOR_TO
5653: IFFALSE 5736
// begin vc_chassis := us_morphling ;
5655: LD_ADDR_OWVAR 37
5659: PUSH
5660: LD_INT 5
5662: ST_TO_ADDR
// vc_engine := engine_siberite ;
5663: LD_ADDR_OWVAR 39
5667: PUSH
5668: LD_INT 3
5670: ST_TO_ADDR
// vc_control := control_computer ;
5671: LD_ADDR_OWVAR 38
5675: PUSH
5676: LD_INT 3
5678: ST_TO_ADDR
// vc_weapon := us_weapons [ Rand ( 1 , us_weapons - 1 ) ] ;
5679: LD_ADDR_OWVAR 40
5683: PUSH
5684: LD_EXP 21
5688: PUSH
5689: LD_INT 1
5691: PPUSH
5692: LD_EXP 21
5696: PUSH
5697: LD_INT 1
5699: MINUS
5700: PPUSH
5701: CALL_OW 12
5705: ARRAY
5706: ST_TO_ADDR
// un := CreateVehicle ;
5707: LD_ADDR_VAR 0 4
5711: PUSH
5712: CALL_OW 45
5716: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5717: LD_VAR 0 4
5721: PPUSH
5722: LD_VAR 0 6
5726: PPUSH
5727: LD_INT 0
5729: PPUSH
5730: CALL_OW 49
// end ;
5734: GO 5652
5736: POP
5737: POP
// end ; 42 :
5738: GO 6620
5740: LD_INT 42
5742: DOUBLE
5743: EQUAL
5744: IFTRUE 5748
5746: GO 5888
5748: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
5749: LD_ADDR_VAR 0 6
5753: PUSH
5754: LD_EXP 15
5758: PUSH
5759: LD_INT 1
5761: PPUSH
5762: LD_EXP 15
5766: PPUSH
5767: CALL_OW 12
5771: ARRAY
5772: ST_TO_ADDR
// uc_side := 1 ;
5773: LD_ADDR_OWVAR 20
5777: PUSH
5778: LD_INT 1
5780: ST_TO_ADDR
// uc_nation := 1 ;
5781: LD_ADDR_OWVAR 21
5785: PUSH
5786: LD_INT 1
5788: ST_TO_ADDR
// for i = 1 to american_force do
5789: LD_ADDR_VAR 0 2
5793: PUSH
5794: DOUBLE
5795: LD_INT 1
5797: DEC
5798: ST_TO_ADDR
5799: LD_EXP 24
5803: PUSH
5804: FOR_TO
5805: IFFALSE 5884
// begin vc_chassis := us_morphling ;
5807: LD_ADDR_OWVAR 37
5811: PUSH
5812: LD_INT 5
5814: ST_TO_ADDR
// vc_engine := engine_siberite ;
5815: LD_ADDR_OWVAR 39
5819: PUSH
5820: LD_INT 3
5822: ST_TO_ADDR
// vc_control := control_computer ;
5823: LD_ADDR_OWVAR 38
5827: PUSH
5828: LD_INT 3
5830: ST_TO_ADDR
// vc_weapon := us_weapons [ Rand ( 1 , us_weapons ) ] ;
5831: LD_ADDR_OWVAR 40
5835: PUSH
5836: LD_EXP 21
5840: PUSH
5841: LD_INT 1
5843: PPUSH
5844: LD_EXP 21
5848: PPUSH
5849: CALL_OW 12
5853: ARRAY
5854: ST_TO_ADDR
// un := CreateVehicle ;
5855: LD_ADDR_VAR 0 4
5859: PUSH
5860: CALL_OW 45
5864: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5865: LD_VAR 0 4
5869: PPUSH
5870: LD_VAR 0 6
5874: PPUSH
5875: LD_INT 0
5877: PPUSH
5878: CALL_OW 49
// end ;
5882: GO 5804
5884: POP
5885: POP
// end ; 51 :
5886: GO 6620
5888: LD_INT 51
5890: DOUBLE
5891: EQUAL
5892: IFTRUE 5896
5894: GO 6036
5896: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
5897: LD_ADDR_VAR 0 6
5901: PUSH
5902: LD_EXP 15
5906: PUSH
5907: LD_INT 1
5909: PPUSH
5910: LD_EXP 15
5914: PPUSH
5915: CALL_OW 12
5919: ARRAY
5920: ST_TO_ADDR
// uc_side := 3 ;
5921: LD_ADDR_OWVAR 20
5925: PUSH
5926: LD_INT 3
5928: ST_TO_ADDR
// uc_nation := 3 ;
5929: LD_ADDR_OWVAR 21
5933: PUSH
5934: LD_INT 3
5936: ST_TO_ADDR
// for i = 1 to russian_force do
5937: LD_ADDR_VAR 0 2
5941: PUSH
5942: DOUBLE
5943: LD_INT 1
5945: DEC
5946: ST_TO_ADDR
5947: LD_EXP 23
5951: PUSH
5952: FOR_TO
5953: IFFALSE 6032
// begin vc_chassis := ru_heavy_tracked ;
5955: LD_ADDR_OWVAR 37
5959: PUSH
5960: LD_INT 24
5962: ST_TO_ADDR
// vc_engine := engine_siberite ;
5963: LD_ADDR_OWVAR 39
5967: PUSH
5968: LD_INT 3
5970: ST_TO_ADDR
// vc_control := control_computer ;
5971: LD_ADDR_OWVAR 38
5975: PUSH
5976: LD_INT 3
5978: ST_TO_ADDR
// vc_weapon := ru_weapons [ Rand ( 1 , ru_weapons ) ] ;
5979: LD_ADDR_OWVAR 40
5983: PUSH
5984: LD_EXP 20
5988: PUSH
5989: LD_INT 1
5991: PPUSH
5992: LD_EXP 20
5996: PPUSH
5997: CALL_OW 12
6001: ARRAY
6002: ST_TO_ADDR
// un := CreateVehicle ;
6003: LD_ADDR_VAR 0 4
6007: PUSH
6008: CALL_OW 45
6012: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
6013: LD_VAR 0 4
6017: PPUSH
6018: LD_VAR 0 6
6022: PPUSH
6023: LD_INT 0
6025: PPUSH
6026: CALL_OW 49
// end ;
6030: GO 5952
6032: POP
6033: POP
// end ; 91 :
6034: GO 6620
6036: LD_INT 91
6038: DOUBLE
6039: EQUAL
6040: IFTRUE 6044
6042: GO 6182
6044: POP
// begin uc_side := 8 ;
6045: LD_ADDR_OWVAR 20
6049: PUSH
6050: LD_INT 8
6052: ST_TO_ADDR
// uc_nation := 1 ;
6053: LD_ADDR_OWVAR 21
6057: PUSH
6058: LD_INT 1
6060: ST_TO_ADDR
// for i = 1 to [ 5 , 4 , 3 ] [ game_difficulty ] do
6061: LD_ADDR_VAR 0 2
6065: PUSH
6066: DOUBLE
6067: LD_INT 1
6069: DEC
6070: ST_TO_ADDR
6071: LD_INT 5
6073: PUSH
6074: LD_INT 4
6076: PUSH
6077: LD_INT 3
6079: PUSH
6080: EMPTY
6081: LIST
6082: LIST
6083: LIST
6084: PUSH
6085: LD_EXP 2
6089: ARRAY
6090: PUSH
6091: FOR_TO
6092: IFFALSE 6178
// begin vc_chassis := us_heavy_tracked ;
6094: LD_ADDR_OWVAR 37
6098: PUSH
6099: LD_INT 4
6101: ST_TO_ADDR
// vc_engine := engine_siberite ;
6102: LD_ADDR_OWVAR 39
6106: PUSH
6107: LD_INT 3
6109: ST_TO_ADDR
// vc_control := control_computer ;
6110: LD_ADDR_OWVAR 38
6114: PUSH
6115: LD_INT 3
6117: ST_TO_ADDR
// vc_weapon := [ us_double_gun , us_heavy_gun ] [ Rand ( 1 , 2 ) ] ;
6118: LD_ADDR_OWVAR 40
6122: PUSH
6123: LD_INT 5
6125: PUSH
6126: LD_INT 6
6128: PUSH
6129: EMPTY
6130: LIST
6131: LIST
6132: PUSH
6133: LD_INT 1
6135: PPUSH
6136: LD_INT 2
6138: PPUSH
6139: CALL_OW 12
6143: ARRAY
6144: ST_TO_ADDR
// un := CreateVehicle ;
6145: LD_ADDR_VAR 0 4
6149: PUSH
6150: CALL_OW 45
6154: ST_TO_ADDR
// PlaceUnitArea ( un , areas [ 1 ] , false ) ;
6155: LD_VAR 0 4
6159: PPUSH
6160: LD_EXP 15
6164: PUSH
6165: LD_INT 1
6167: ARRAY
6168: PPUSH
6169: LD_INT 0
6171: PPUSH
6172: CALL_OW 49
// end ;
6176: GO 6091
6178: POP
6179: POP
// end ; 92 :
6180: GO 6620
6182: LD_INT 92
6184: DOUBLE
6185: EQUAL
6186: IFTRUE 6190
6188: GO 6495
6190: POP
// begin uc_side := 5 ;
6191: LD_ADDR_OWVAR 20
6195: PUSH
6196: LD_INT 5
6198: ST_TO_ADDR
// uc_nation := 2 ;
6199: LD_ADDR_OWVAR 21
6203: PUSH
6204: LD_INT 2
6206: ST_TO_ADDR
// filter := [ ] ;
6207: LD_ADDR_VAR 0 3
6211: PUSH
6212: EMPTY
6213: ST_TO_ADDR
// hc_sex := sex_male ;
6214: LD_ADDR_OWVAR 27
6218: PUSH
6219: LD_INT 1
6221: ST_TO_ADDR
// hc_gallery :=  ;
6222: LD_ADDR_OWVAR 33
6226: PUSH
6227: LD_STRING 
6229: ST_TO_ADDR
// hc_class := 1 ;
6230: LD_ADDR_OWVAR 28
6234: PUSH
6235: LD_INT 1
6237: ST_TO_ADDR
// hc_name :=  ;
6238: LD_ADDR_OWVAR 26
6242: PUSH
6243: LD_STRING 
6245: ST_TO_ADDR
// un := CreateHuman ;
6246: LD_ADDR_VAR 0 4
6250: PUSH
6251: CALL_OW 44
6255: ST_TO_ADDR
// filter := filter ^ un ;
6256: LD_ADDR_VAR 0 3
6260: PUSH
6261: LD_VAR 0 3
6265: PUSH
6266: LD_VAR 0 4
6270: ADD
6271: ST_TO_ADDR
// for i = 1 to [ 4 , 3 , 2 ] [ game_difficulty ] do
6272: LD_ADDR_VAR 0 2
6276: PUSH
6277: DOUBLE
6278: LD_INT 1
6280: DEC
6281: ST_TO_ADDR
6282: LD_INT 4
6284: PUSH
6285: LD_INT 3
6287: PUSH
6288: LD_INT 2
6290: PUSH
6291: EMPTY
6292: LIST
6293: LIST
6294: LIST
6295: PUSH
6296: LD_EXP 2
6300: ARRAY
6301: PUSH
6302: FOR_TO
6303: IFFALSE 6341
// begin un := CreateHumanWithClass ( 1 , l_skill ) ;
6305: LD_ADDR_VAR 0 4
6309: PUSH
6310: LD_INT 1
6312: PPUSH
6313: LD_EXP 52
6317: PPUSH
6318: CALL 7255 0 2
6322: ST_TO_ADDR
// filter := filter ^ un ;
6323: LD_ADDR_VAR 0 3
6327: PUSH
6328: LD_VAR 0 3
6332: PUSH
6333: LD_VAR 0 4
6337: ADD
6338: ST_TO_ADDR
// end ;
6339: GO 6302
6341: POP
6342: POP
// DialogueOn ;
6343: CALL_OW 6
// SayRadio ( filter [ 1 ] , DS-DF-1 ) ;
6347: LD_VAR 0 3
6351: PUSH
6352: LD_INT 1
6354: ARRAY
6355: PPUSH
6356: LD_STRING DS-DF-1
6358: PPUSH
6359: CALL_OW 94
// case Query ( DS-dezert ) of 1 :
6363: LD_STRING DS-dezert
6365: PPUSH
6366: CALL_OW 97
6370: PUSH
6371: LD_INT 1
6373: DOUBLE
6374: EQUAL
6375: IFTRUE 6379
6377: GO 6394
6379: POP
// Say ( l_cmndr , DS-DC-dis ) ; 2 :
6380: LD_EXP 51
6384: PPUSH
6385: LD_STRING DS-DC-dis
6387: PPUSH
6388: CALL_OW 88
6392: GO 6489
6394: LD_INT 2
6396: DOUBLE
6397: EQUAL
6398: IFTRUE 6402
6400: GO 6488
6402: POP
// begin Say ( l_cmndr , DS-DC-acp ) ;
6403: LD_EXP 51
6407: PPUSH
6408: LD_STRING DS-DC-acp
6410: PPUSH
6411: CALL_OW 88
// for i = 1 to filter do
6415: LD_ADDR_VAR 0 2
6419: PUSH
6420: DOUBLE
6421: LD_INT 1
6423: DEC
6424: ST_TO_ADDR
6425: LD_VAR 0 3
6429: PUSH
6430: FOR_TO
6431: IFFALSE 6484
// begin SetSide ( filter [ i ] , 8 ) ;
6433: LD_VAR 0 3
6437: PUSH
6438: LD_VAR 0 2
6442: ARRAY
6443: PPUSH
6444: LD_INT 8
6446: PPUSH
6447: CALL_OW 235
// PlaceUnitArea ( filter [ i ] , south_spawn , false ) ;
6451: LD_VAR 0 3
6455: PUSH
6456: LD_VAR 0 2
6460: ARRAY
6461: PPUSH
6462: LD_INT 4
6464: PPUSH
6465: LD_INT 0
6467: PPUSH
6468: CALL_OW 49
// CenterNowOnXY ( 111 , 121 ) ;
6472: LD_INT 111
6474: PPUSH
6475: LD_INT 121
6477: PPUSH
6478: CALL_OW 86
// end ;
6482: GO 6430
6484: POP
6485: POP
// end ; end ;
6486: GO 6489
6488: POP
// DialogueOff ;
6489: CALL_OW 7
// end ; 101 :
6493: GO 6620
6495: LD_INT 101
6497: DOUBLE
6498: EQUAL
6499: IFTRUE 6503
6501: GO 6555
6503: POP
// begin CreateCratesArea ( Rand ( 3 , 5 ) , crates_area , true ) ;
6504: LD_INT 3
6506: PPUSH
6507: LD_INT 5
6509: PPUSH
6510: CALL_OW 12
6514: PPUSH
6515: LD_INT 9
6517: PPUSH
6518: LD_INT 1
6520: PPUSH
6521: CALL_OW 55
// Wait ( 0 0$11 ) ;
6525: LD_INT 385
6527: PPUSH
6528: CALL_OW 67
// CreateCratesArea ( Rand ( 3 , 5 ) , crates_area , true ) ;
6532: LD_INT 3
6534: PPUSH
6535: LD_INT 5
6537: PPUSH
6538: CALL_OW 12
6542: PPUSH
6543: LD_INT 9
6545: PPUSH
6546: LD_INT 1
6548: PPUSH
6549: CALL_OW 55
// end ; 200 :
6553: GO 6620
6555: LD_INT 200
6557: DOUBLE
6558: EQUAL
6559: IFTRUE 6563
6561: GO 6619
6563: POP
// begin Say ( Leopold , DS-end ) ;
6564: LD_EXP 7
6568: PPUSH
6569: LD_STRING DS-end
6571: PPUSH
6572: CALL_OW 88
// AddMedal ( dsmed1 , 1 ) ;
6576: LD_STRING dsmed1
6578: PPUSH
6579: LD_INT 1
6581: PPUSH
6582: CALL_OW 101
// AddMedal ( dsmed1 , 1 ) ;
6586: LD_STRING dsmed1
6588: PPUSH
6589: LD_INT 1
6591: PPUSH
6592: CALL_OW 101
// AddMedal ( dsmed1 , 1 ) ;
6596: LD_STRING dsmed1
6598: PPUSH
6599: LD_INT 1
6601: PPUSH
6602: CALL_OW 101
// GiveMedals ( MAIN ) ;
6606: LD_STRING MAIN
6608: PPUSH
6609: CALL_OW 102
// YouWin ;
6613: CALL_OW 103
// end ; end ;
6617: GO 6620
6619: POP
// end ;
6620: PPOPN 6
6622: END
// on UnitGoesToRed ( un ) do begin if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) then
6623: LD_VAR 0 1
6627: PUSH
6628: LD_INT 22
6630: PUSH
6631: LD_INT 2
6633: PUSH
6634: EMPTY
6635: LIST
6636: LIST
6637: PUSH
6638: LD_INT 21
6640: PUSH
6641: LD_INT 2
6643: PUSH
6644: EMPTY
6645: LIST
6646: LIST
6647: PUSH
6648: EMPTY
6649: LIST
6650: LIST
6651: PPUSH
6652: CALL_OW 69
6656: IN
6657: IFFALSE 6782
// begin Wait ( Rand ( 0 0$03 , 0 0$06 ) ) ;
6659: LD_INT 105
6661: PPUSH
6662: LD_INT 210
6664: PPUSH
6665: CALL_OW 12
6669: PPUSH
6670: CALL_OW 67
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
6674: LD_VAR 0 1
6678: PPUSH
6679: CALL_OW 250
6683: PPUSH
6684: LD_VAR 0 1
6688: PPUSH
6689: CALL_OW 251
6693: PPUSH
6694: LD_INT 3
6696: PPUSH
6697: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
6701: LD_VAR 0 1
6705: PPUSH
6706: CALL_OW 250
6710: PPUSH
6711: LD_VAR 0 1
6715: PPUSH
6716: CALL_OW 251
6720: PPUSH
6721: LD_INT 3
6723: PPUSH
6724: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
6728: LD_VAR 0 1
6732: PPUSH
6733: CALL_OW 250
6737: PPUSH
6738: LD_VAR 0 1
6742: PPUSH
6743: CALL_OW 251
6747: PPUSH
6748: LD_INT 3
6750: PPUSH
6751: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
6755: LD_VAR 0 1
6759: PPUSH
6760: CALL_OW 250
6764: PPUSH
6765: LD_VAR 0 1
6769: PPUSH
6770: CALL_OW 251
6774: PPUSH
6775: LD_INT 3
6777: PPUSH
6778: CALL_OW 453
// end ; end ;
6782: PPOPN 1
6784: END
// on UnitDestroyed ( un ) do begin if un = fort then
6785: LD_VAR 0 1
6789: PUSH
6790: LD_INT 23
6792: EQUAL
6793: IFFALSE 6803
// fort_destroyed := true ;
6795: LD_ADDR_EXP 34
6799: PUSH
6800: LD_INT 1
6802: ST_TO_ADDR
// if un = l_cmndr then
6803: LD_VAR 0 1
6807: PUSH
6808: LD_EXP 51
6812: EQUAL
6813: IFFALSE 6823
// hero_died := true ;
6815: LD_ADDR_EXP 35
6819: PUSH
6820: LD_INT 1
6822: ST_TO_ADDR
// if un in FilterAllUnits ( [ f_weapon , ar_bio_bomb ] ) then
6823: LD_VAR 0 1
6827: PUSH
6828: LD_INT 34
6830: PUSH
6831: LD_EXP 17
6835: PUSH
6836: EMPTY
6837: LIST
6838: LIST
6839: PPUSH
6840: CALL_OW 69
6844: IN
6845: IFFALSE 6890
// begin if Rand ( 1 , 100 ) <= 70 then
6847: LD_INT 1
6849: PPUSH
6850: LD_INT 100
6852: PPUSH
6853: CALL_OW 12
6857: PUSH
6858: LD_INT 70
6860: LESSEQUAL
6861: IFFALSE 6890
// ArtContamination ( GetX ( un ) , GetY ( un ) , 10 ) ;
6863: LD_VAR 0 1
6867: PPUSH
6868: CALL_OW 250
6872: PPUSH
6873: LD_VAR 0 1
6877: PPUSH
6878: CALL_OW 251
6882: PPUSH
6883: LD_INT 10
6885: PPUSH
6886: CALL_OW 495
// end ; end ; end_of_file
6890: PPOPN 1
6892: END
// export function RefreshTime ( time , bool ) ; begin
6893: LD_INT 0
6895: PPUSH
// if bool then
6896: LD_VAR 0 2
6900: IFFALSE 6918
// time := time + 0 0$01 else
6902: LD_ADDR_VAR 0 1
6906: PUSH
6907: LD_VAR 0 1
6911: PUSH
6912: LD_INT 35
6914: PLUS
6915: ST_TO_ADDR
6916: GO 6932
// time := time - 0 0$01 ;
6918: LD_ADDR_VAR 0 1
6922: PUSH
6923: LD_VAR 0 1
6927: PUSH
6928: LD_INT 35
6930: MINUS
6931: ST_TO_ADDR
// result := time ;
6932: LD_ADDR_VAR 0 3
6936: PUSH
6937: LD_VAR 0 1
6941: ST_TO_ADDR
// end ;
6942: LD_VAR 0 3
6946: RET
// export function MineExist ( side ) ; begin
6947: LD_INT 0
6949: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_siberite_mine ] ] ) > 0 then
6950: LD_INT 22
6952: PUSH
6953: LD_VAR 0 1
6957: PUSH
6958: EMPTY
6959: LIST
6960: LIST
6961: PUSH
6962: LD_INT 30
6964: PUSH
6965: LD_INT 30
6967: PUSH
6968: EMPTY
6969: LIST
6970: LIST
6971: PUSH
6972: EMPTY
6973: LIST
6974: LIST
6975: PPUSH
6976: CALL_OW 69
6980: PUSH
6981: LD_INT 0
6983: GREATER
6984: IFFALSE 6996
// result := true else
6986: LD_ADDR_VAR 0 2
6990: PUSH
6991: LD_INT 1
6993: ST_TO_ADDR
6994: GO 7004
// result := false ;
6996: LD_ADDR_VAR 0 2
7000: PUSH
7001: LD_INT 0
7003: ST_TO_ADDR
// end ;
7004: LD_VAR 0 2
7008: RET
// export function FacExist ( side ) ; begin
7009: LD_INT 0
7011: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_factory ] ] ) > 0 then
7012: LD_INT 22
7014: PUSH
7015: LD_VAR 0 1
7019: PUSH
7020: EMPTY
7021: LIST
7022: LIST
7023: PUSH
7024: LD_INT 30
7026: PUSH
7027: LD_INT 3
7029: PUSH
7030: EMPTY
7031: LIST
7032: LIST
7033: PUSH
7034: EMPTY
7035: LIST
7036: LIST
7037: PPUSH
7038: CALL_OW 69
7042: PUSH
7043: LD_INT 0
7045: GREATER
7046: IFFALSE 7058
// result := true else
7048: LD_ADDR_VAR 0 2
7052: PUSH
7053: LD_INT 1
7055: ST_TO_ADDR
7056: GO 7066
// result := false ;
7058: LD_ADDR_VAR 0 2
7062: PUSH
7063: LD_INT 0
7065: ST_TO_ADDR
// end ;
7066: LD_VAR 0 2
7070: RET
// export function ConnectWithTower ( side ) ; var i , filter , tower ; begin
7071: LD_INT 0
7073: PPUSH
7074: PPUSH
7075: PPUSH
7076: PPUSH
// filter := FilterAllUnits ( [ [ f_side , side ] , [ f_control , control_remote ] , [ f_ok ] ] ) ;
7077: LD_ADDR_VAR 0 4
7081: PUSH
7082: LD_INT 22
7084: PUSH
7085: LD_VAR 0 1
7089: PUSH
7090: EMPTY
7091: LIST
7092: LIST
7093: PUSH
7094: LD_INT 33
7096: PUSH
7097: LD_INT 2
7099: PUSH
7100: EMPTY
7101: LIST
7102: LIST
7103: PUSH
7104: LD_INT 50
7106: PUSH
7107: EMPTY
7108: LIST
7109: PUSH
7110: EMPTY
7111: LIST
7112: LIST
7113: LIST
7114: PPUSH
7115: CALL_OW 69
7119: ST_TO_ADDR
// tower := FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , ar_control_tower ] ] ) ;
7120: LD_ADDR_VAR 0 5
7124: PUSH
7125: LD_INT 22
7127: PUSH
7128: LD_VAR 0 1
7132: PUSH
7133: EMPTY
7134: LIST
7135: LIST
7136: PUSH
7137: LD_INT 34
7139: PUSH
7140: LD_INT 31
7142: PUSH
7143: EMPTY
7144: LIST
7145: LIST
7146: PUSH
7147: EMPTY
7148: LIST
7149: LIST
7150: PPUSH
7151: CALL_OW 69
7155: ST_TO_ADDR
// if tower > 0 and filter > 0 then
7156: LD_VAR 0 5
7160: PUSH
7161: LD_INT 0
7163: GREATER
7164: PUSH
7165: LD_VAR 0 4
7169: PUSH
7170: LD_INT 0
7172: GREATER
7173: AND
7174: IFFALSE 7250
// for i = 1 to filter do
7176: LD_ADDR_VAR 0 3
7180: PUSH
7181: DOUBLE
7182: LD_INT 1
7184: DEC
7185: ST_TO_ADDR
7186: LD_VAR 0 4
7190: PUSH
7191: FOR_TO
7192: IFFALSE 7248
// if not IsControledBy ( filter [ i ] ) then
7194: LD_VAR 0 4
7198: PUSH
7199: LD_VAR 0 3
7203: ARRAY
7204: PPUSH
7205: CALL_OW 312
7209: NOT
7210: IFFALSE 7246
// ComLinkTo ( filter [ i ] , tower [ Rand ( 1 , tower ) ] ) ;
7212: LD_VAR 0 4
7216: PUSH
7217: LD_VAR 0 3
7221: ARRAY
7222: PPUSH
7223: LD_VAR 0 5
7227: PUSH
7228: LD_INT 1
7230: PPUSH
7231: LD_VAR 0 5
7235: PPUSH
7236: CALL_OW 12
7240: ARRAY
7241: PPUSH
7242: CALL_OW 135
7246: GO 7191
7248: POP
7249: POP
// end ;
7250: LD_VAR 0 2
7254: RET
// export function CreateHumanWithClass ( clas , lvl ) ; var skill_com , skill_eng , skill_mech , skill_sci , bonus ; begin
7255: LD_INT 0
7257: PPUSH
7258: PPUSH
7259: PPUSH
7260: PPUSH
7261: PPUSH
7262: PPUSH
// hc_class := clas ;
7263: LD_ADDR_OWVAR 28
7267: PUSH
7268: LD_VAR 0 1
7272: ST_TO_ADDR
// skill_com := ( lvl + Rand ( - 1 , 1 ) ) ;
7273: LD_ADDR_VAR 0 4
7277: PUSH
7278: LD_VAR 0 2
7282: PUSH
7283: LD_INT 1
7285: NEG
7286: PPUSH
7287: LD_INT 1
7289: PPUSH
7290: CALL_OW 12
7294: PLUS
7295: ST_TO_ADDR
// skill_eng := ( lvl + Rand ( - 1 , 1 ) ) ;
7296: LD_ADDR_VAR 0 5
7300: PUSH
7301: LD_VAR 0 2
7305: PUSH
7306: LD_INT 1
7308: NEG
7309: PPUSH
7310: LD_INT 1
7312: PPUSH
7313: CALL_OW 12
7317: PLUS
7318: ST_TO_ADDR
// skill_mech := ( lvl + Rand ( - 1 , 1 ) ) ;
7319: LD_ADDR_VAR 0 6
7323: PUSH
7324: LD_VAR 0 2
7328: PUSH
7329: LD_INT 1
7331: NEG
7332: PPUSH
7333: LD_INT 1
7335: PPUSH
7336: CALL_OW 12
7340: PLUS
7341: ST_TO_ADDR
// skill_sci := ( lvl + Rand ( - 1 , 1 ) ) ;
7342: LD_ADDR_VAR 0 7
7346: PUSH
7347: LD_VAR 0 2
7351: PUSH
7352: LD_INT 1
7354: NEG
7355: PPUSH
7356: LD_INT 1
7358: PPUSH
7359: CALL_OW 12
7363: PLUS
7364: ST_TO_ADDR
// if clas = 1 or clas = 9 or clas = class_sniper or clas = class_mortar then
7365: LD_VAR 0 1
7369: PUSH
7370: LD_INT 1
7372: EQUAL
7373: PUSH
7374: LD_VAR 0 1
7378: PUSH
7379: LD_INT 9
7381: EQUAL
7382: OR
7383: PUSH
7384: LD_VAR 0 1
7388: PUSH
7389: LD_INT 5
7391: EQUAL
7392: OR
7393: PUSH
7394: LD_VAR 0 1
7398: PUSH
7399: LD_INT 8
7401: EQUAL
7402: OR
7403: IFFALSE 7428
// bonus := [ 2 , 0 , 0 , 0 ] ;
7405: LD_ADDR_VAR 0 8
7409: PUSH
7410: LD_INT 2
7412: PUSH
7413: LD_INT 0
7415: PUSH
7416: LD_INT 0
7418: PUSH
7419: LD_INT 0
7421: PUSH
7422: EMPTY
7423: LIST
7424: LIST
7425: LIST
7426: LIST
7427: ST_TO_ADDR
// if clas = 2 then
7428: LD_VAR 0 1
7432: PUSH
7433: LD_INT 2
7435: EQUAL
7436: IFFALSE 7461
// bonus := [ 0 , 2 , 0 , 0 ] ;
7438: LD_ADDR_VAR 0 8
7442: PUSH
7443: LD_INT 0
7445: PUSH
7446: LD_INT 2
7448: PUSH
7449: LD_INT 0
7451: PUSH
7452: LD_INT 0
7454: PUSH
7455: EMPTY
7456: LIST
7457: LIST
7458: LIST
7459: LIST
7460: ST_TO_ADDR
// if clas = 3 then
7461: LD_VAR 0 1
7465: PUSH
7466: LD_INT 3
7468: EQUAL
7469: IFFALSE 7494
// bonus := [ 0 , 0 , 2 , 0 ] ;
7471: LD_ADDR_VAR 0 8
7475: PUSH
7476: LD_INT 0
7478: PUSH
7479: LD_INT 0
7481: PUSH
7482: LD_INT 2
7484: PUSH
7485: LD_INT 0
7487: PUSH
7488: EMPTY
7489: LIST
7490: LIST
7491: LIST
7492: LIST
7493: ST_TO_ADDR
// if clas = 4 then
7494: LD_VAR 0 1
7498: PUSH
7499: LD_INT 4
7501: EQUAL
7502: IFFALSE 7527
// bonus := [ 0 , 0 , 0 , 2 ] ;
7504: LD_ADDR_VAR 0 8
7508: PUSH
7509: LD_INT 0
7511: PUSH
7512: LD_INT 0
7514: PUSH
7515: LD_INT 0
7517: PUSH
7518: LD_INT 2
7520: PUSH
7521: EMPTY
7522: LIST
7523: LIST
7524: LIST
7525: LIST
7526: ST_TO_ADDR
// if clas > 4 and clas <> 9 and clas <> class_sniper and clas <> class_mortar then
7527: LD_VAR 0 1
7531: PUSH
7532: LD_INT 4
7534: GREATER
7535: PUSH
7536: LD_VAR 0 1
7540: PUSH
7541: LD_INT 9
7543: NONEQUAL
7544: AND
7545: PUSH
7546: LD_VAR 0 1
7550: PUSH
7551: LD_INT 5
7553: NONEQUAL
7554: AND
7555: PUSH
7556: LD_VAR 0 1
7560: PUSH
7561: LD_INT 8
7563: NONEQUAL
7564: AND
7565: IFFALSE 7590
// bonus := [ 0 , 0 , 0 , 0 ] ;
7567: LD_ADDR_VAR 0 8
7571: PUSH
7572: LD_INT 0
7574: PUSH
7575: LD_INT 0
7577: PUSH
7578: LD_INT 0
7580: PUSH
7581: LD_INT 0
7583: PUSH
7584: EMPTY
7585: LIST
7586: LIST
7587: LIST
7588: LIST
7589: ST_TO_ADDR
// hc_basic_skills := [ Rand ( 0 , 2 ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) ] ;
7590: LD_ADDR_OWVAR 30
7594: PUSH
7595: LD_INT 0
7597: PPUSH
7598: LD_INT 2
7600: PPUSH
7601: CALL_OW 12
7605: PUSH
7606: LD_INT 0
7608: PPUSH
7609: LD_INT 2
7611: PPUSH
7612: CALL_OW 12
7616: PUSH
7617: LD_INT 0
7619: PPUSH
7620: LD_INT 2
7622: PPUSH
7623: CALL_OW 12
7627: PUSH
7628: LD_INT 0
7630: PPUSH
7631: LD_INT 2
7633: PPUSH
7634: CALL_OW 12
7638: PUSH
7639: EMPTY
7640: LIST
7641: LIST
7642: LIST
7643: LIST
7644: ST_TO_ADDR
// hc_skills := [ skill_com + bonus [ 1 ] , skill_eng + bonus [ 2 ] , skill_mech + bonus [ 3 ] , skill_sci + bonus [ 4 ] ] ;
7645: LD_ADDR_OWVAR 31
7649: PUSH
7650: LD_VAR 0 4
7654: PUSH
7655: LD_VAR 0 8
7659: PUSH
7660: LD_INT 1
7662: ARRAY
7663: PLUS
7664: PUSH
7665: LD_VAR 0 5
7669: PUSH
7670: LD_VAR 0 8
7674: PUSH
7675: LD_INT 2
7677: ARRAY
7678: PLUS
7679: PUSH
7680: LD_VAR 0 6
7684: PUSH
7685: LD_VAR 0 8
7689: PUSH
7690: LD_INT 3
7692: ARRAY
7693: PLUS
7694: PUSH
7695: LD_VAR 0 7
7699: PUSH
7700: LD_VAR 0 8
7704: PUSH
7705: LD_INT 4
7707: ARRAY
7708: PLUS
7709: PUSH
7710: EMPTY
7711: LIST
7712: LIST
7713: LIST
7714: LIST
7715: ST_TO_ADDR
// hc_sex := Rand ( sex_male , sex_female ) ;
7716: LD_ADDR_OWVAR 27
7720: PUSH
7721: LD_INT 1
7723: PPUSH
7724: LD_INT 2
7726: PPUSH
7727: CALL_OW 12
7731: ST_TO_ADDR
// hc_gallery :=  ;
7732: LD_ADDR_OWVAR 33
7736: PUSH
7737: LD_STRING 
7739: ST_TO_ADDR
// hc_attr := [ Rand ( 8 , 12 ) , Rand ( 9 , 11 ) ] ;
7740: LD_ADDR_OWVAR 29
7744: PUSH
7745: LD_INT 8
7747: PPUSH
7748: LD_INT 12
7750: PPUSH
7751: CALL_OW 12
7755: PUSH
7756: LD_INT 9
7758: PPUSH
7759: LD_INT 11
7761: PPUSH
7762: CALL_OW 12
7766: PUSH
7767: EMPTY
7768: LIST
7769: LIST
7770: ST_TO_ADDR
// hc_name :=  ;
7771: LD_ADDR_OWVAR 26
7775: PUSH
7776: LD_STRING 
7778: ST_TO_ADDR
// result := CreateHuman ;
7779: LD_ADDR_VAR 0 3
7783: PUSH
7784: CALL_OW 44
7788: ST_TO_ADDR
// end ;
7789: LD_VAR 0 3
7793: RET
// export function GetSpeed ( unit ) ; begin
7794: LD_INT 0
7796: PPUSH
// result := GetProperties ( unit ) [ 1 ] ;
7797: LD_ADDR_VAR 0 2
7801: PUSH
7802: LD_VAR 0 1
7806: PPUSH
7807: CALL_OW 464
7811: PUSH
7812: LD_INT 1
7814: ARRAY
7815: ST_TO_ADDR
// end ;
7816: LD_VAR 0 2
7820: RET
// export function PrepareNature ( area , num1 , num2 , num3 , num4 ) ; var l , apeman , tiger , bird , horse ; begin
7821: LD_INT 0
7823: PPUSH
7824: PPUSH
7825: PPUSH
7826: PPUSH
7827: PPUSH
7828: PPUSH
// uc_nation = nation_nature ;
7829: LD_ADDR_OWVAR 21
7833: PUSH
7834: LD_INT 0
7836: ST_TO_ADDR
// uc_side = 0 ;
7837: LD_ADDR_OWVAR 20
7841: PUSH
7842: LD_INT 0
7844: ST_TO_ADDR
// l = 0 ;
7845: LD_ADDR_VAR 0 7
7849: PUSH
7850: LD_INT 0
7852: ST_TO_ADDR
// repeat begin uc_direction = Rand ( 0 , 5 ) ;
7853: LD_ADDR_OWVAR 24
7857: PUSH
7858: LD_INT 0
7860: PPUSH
7861: LD_INT 5
7863: PPUSH
7864: CALL_OW 12
7868: ST_TO_ADDR
// hc_agressivity = Rand ( - 5 , 0 ) ;
7869: LD_ADDR_OWVAR 35
7873: PUSH
7874: LD_INT 5
7876: NEG
7877: PPUSH
7878: LD_INT 0
7880: PPUSH
7881: CALL_OW 12
7885: ST_TO_ADDR
// hc_gallery =  ;
7886: LD_ADDR_OWVAR 33
7890: PUSH
7891: LD_STRING 
7893: ST_TO_ADDR
// hc_class = class_apeman ;
7894: LD_ADDR_OWVAR 28
7898: PUSH
7899: LD_INT 12
7901: ST_TO_ADDR
// hc_attr = [ Rand ( 11 , 13 ) , Rand ( 10 , 11 ) ] ;
7902: LD_ADDR_OWVAR 29
7906: PUSH
7907: LD_INT 11
7909: PPUSH
7910: LD_INT 13
7912: PPUSH
7913: CALL_OW 12
7917: PUSH
7918: LD_INT 10
7920: PPUSH
7921: LD_INT 11
7923: PPUSH
7924: CALL_OW 12
7928: PUSH
7929: EMPTY
7930: LIST
7931: LIST
7932: ST_TO_ADDR
// hc_sex = sex_male ;
7933: LD_ADDR_OWVAR 27
7937: PUSH
7938: LD_INT 1
7940: ST_TO_ADDR
// hc_skills = [ Rand ( 0 , 2 ) , 0 , 0 , 0 ] ;
7941: LD_ADDR_OWVAR 31
7945: PUSH
7946: LD_INT 0
7948: PPUSH
7949: LD_INT 2
7951: PPUSH
7952: CALL_OW 12
7956: PUSH
7957: LD_INT 0
7959: PUSH
7960: LD_INT 0
7962: PUSH
7963: LD_INT 0
7965: PUSH
7966: EMPTY
7967: LIST
7968: LIST
7969: LIST
7970: LIST
7971: ST_TO_ADDR
// apeman = CreateHuman ;
7972: LD_ADDR_VAR 0 8
7976: PUSH
7977: CALL_OW 44
7981: ST_TO_ADDR
// PlaceUnitArea ( apeman , area , false ) ;
7982: LD_VAR 0 8
7986: PPUSH
7987: LD_VAR 0 1
7991: PPUSH
7992: LD_INT 0
7994: PPUSH
7995: CALL_OW 49
// l = l + 1 ;
7999: LD_ADDR_VAR 0 7
8003: PUSH
8004: LD_VAR 0 7
8008: PUSH
8009: LD_INT 1
8011: PLUS
8012: ST_TO_ADDR
// end until l = num1 ;
8013: LD_VAR 0 7
8017: PUSH
8018: LD_VAR 0 2
8022: EQUAL
8023: IFFALSE 7853
// l = 0 ;
8025: LD_ADDR_VAR 0 7
8029: PUSH
8030: LD_INT 0
8032: ST_TO_ADDR
// repeat begin hc_agressivity = Rand ( 0 , 25 ) ;
8033: LD_ADDR_OWVAR 35
8037: PUSH
8038: LD_INT 0
8040: PPUSH
8041: LD_INT 25
8043: PPUSH
8044: CALL_OW 12
8048: ST_TO_ADDR
// hc_class = class_tiger ;
8049: LD_ADDR_OWVAR 28
8053: PUSH
8054: LD_INT 14
8056: ST_TO_ADDR
// hc_sex = sex_male ;
8057: LD_ADDR_OWVAR 27
8061: PUSH
8062: LD_INT 1
8064: ST_TO_ADDR
// hc_gallery = sandnature ;
8065: LD_ADDR_OWVAR 33
8069: PUSH
8070: LD_STRING sandnature
8072: ST_TO_ADDR
// hc_face_number = 3 ;
8073: LD_ADDR_OWVAR 34
8077: PUSH
8078: LD_INT 3
8080: ST_TO_ADDR
// tiger = CreateHuman ;
8081: LD_ADDR_VAR 0 9
8085: PUSH
8086: CALL_OW 44
8090: ST_TO_ADDR
// PlaceUnitArea ( tiger , area , false ) ;
8091: LD_VAR 0 9
8095: PPUSH
8096: LD_VAR 0 1
8100: PPUSH
8101: LD_INT 0
8103: PPUSH
8104: CALL_OW 49
// l = l + 1 ;
8108: LD_ADDR_VAR 0 7
8112: PUSH
8113: LD_VAR 0 7
8117: PUSH
8118: LD_INT 1
8120: PLUS
8121: ST_TO_ADDR
// end until l = num2 ;
8122: LD_VAR 0 7
8126: PUSH
8127: LD_VAR 0 3
8131: EQUAL
8132: IFFALSE 8033
// l = 0 ;
8134: LD_ADDR_VAR 0 7
8138: PUSH
8139: LD_INT 0
8141: ST_TO_ADDR
// repeat begin hc_class = class_phororhacos ;
8142: LD_ADDR_OWVAR 28
8146: PUSH
8147: LD_INT 18
8149: ST_TO_ADDR
// hc_gallery = sandnature ;
8150: LD_ADDR_OWVAR 33
8154: PUSH
8155: LD_STRING sandnature
8157: ST_TO_ADDR
// hc_face_number = 1 ;
8158: LD_ADDR_OWVAR 34
8162: PUSH
8163: LD_INT 1
8165: ST_TO_ADDR
// bird = CreateHuman ;
8166: LD_ADDR_VAR 0 10
8170: PUSH
8171: CALL_OW 44
8175: ST_TO_ADDR
// PlaceUnitAnywhere ( bird , false ) ;
8176: LD_VAR 0 10
8180: PPUSH
8181: LD_INT 0
8183: PPUSH
8184: CALL_OW 51
// l = l + 1 ;
8188: LD_ADDR_VAR 0 7
8192: PUSH
8193: LD_VAR 0 7
8197: PUSH
8198: LD_INT 1
8200: PLUS
8201: ST_TO_ADDR
// end until l = num3 ;
8202: LD_VAR 0 7
8206: PUSH
8207: LD_VAR 0 4
8211: EQUAL
8212: IFFALSE 8142
// l = 0 ;
8214: LD_ADDR_VAR 0 7
8218: PUSH
8219: LD_INT 0
8221: ST_TO_ADDR
// repeat begin hc_class = 21 ;
8222: LD_ADDR_OWVAR 28
8226: PUSH
8227: LD_INT 21
8229: ST_TO_ADDR
// hc_gallery = sandnature ;
8230: LD_ADDR_OWVAR 33
8234: PUSH
8235: LD_STRING sandnature
8237: ST_TO_ADDR
// hc_face_number = 5 ;
8238: LD_ADDR_OWVAR 34
8242: PUSH
8243: LD_INT 5
8245: ST_TO_ADDR
// horse := CreateHuman ;
8246: LD_ADDR_VAR 0 11
8250: PUSH
8251: CALL_OW 44
8255: ST_TO_ADDR
// PlaceUnitArea ( horse , area , false ) ;
8256: LD_VAR 0 11
8260: PPUSH
8261: LD_VAR 0 1
8265: PPUSH
8266: LD_INT 0
8268: PPUSH
8269: CALL_OW 49
// l = l + 1 ;
8273: LD_ADDR_VAR 0 7
8277: PUSH
8278: LD_VAR 0 7
8282: PUSH
8283: LD_INT 1
8285: PLUS
8286: ST_TO_ADDR
// end until l = num4 ;
8287: LD_VAR 0 7
8291: PUSH
8292: LD_VAR 0 5
8296: EQUAL
8297: IFFALSE 8222
// end ;
8299: LD_VAR 0 6
8303: RET
// export function PrepareComm ; begin
8304: LD_INT 0
8306: PPUSH
// uc_side := 1 ;
8307: LD_ADDR_OWVAR 20
8311: PUSH
8312: LD_INT 1
8314: ST_TO_ADDR
// uc_nation := 1 ;
8315: LD_ADDR_OWVAR 21
8319: PUSH
8320: LD_INT 1
8322: ST_TO_ADDR
// hc_gallery :=  ;
8323: LD_ADDR_OWVAR 33
8327: PUSH
8328: LD_STRING 
8330: ST_TO_ADDR
// hc_name :=  ;
8331: LD_ADDR_OWVAR 26
8335: PUSH
8336: LD_STRING 
8338: ST_TO_ADDR
// hc_class := 1 ;
8339: LD_ADDR_OWVAR 28
8343: PUSH
8344: LD_INT 1
8346: ST_TO_ADDR
// hc_sex := sex_male ;
8347: LD_ADDR_OWVAR 27
8351: PUSH
8352: LD_INT 1
8354: ST_TO_ADDR
// am_comander := CreateHuman ;
8355: LD_ADDR_EXP 48
8359: PUSH
8360: CALL_OW 44
8364: ST_TO_ADDR
// uc_side := 3 ;
8365: LD_ADDR_OWVAR 20
8369: PUSH
8370: LD_INT 3
8372: ST_TO_ADDR
// uc_nation := 3 ;
8373: LD_ADDR_OWVAR 21
8377: PUSH
8378: LD_INT 3
8380: ST_TO_ADDR
// ru_comander := CreateHuman ;
8381: LD_ADDR_EXP 49
8385: PUSH
8386: CALL_OW 44
8390: ST_TO_ADDR
// uc_side := 2 ;
8391: LD_ADDR_OWVAR 20
8395: PUSH
8396: LD_INT 2
8398: ST_TO_ADDR
// uc_nation := 2 ;
8399: LD_ADDR_OWVAR 21
8403: PUSH
8404: LD_INT 2
8406: ST_TO_ADDR
// hc_name := Heike Steyer ;
8407: LD_ADDR_OWVAR 26
8411: PUSH
8412: LD_STRING Heike Steyer
8414: ST_TO_ADDR
// hc_sex := sex_female ;
8415: LD_ADDR_OWVAR 27
8419: PUSH
8420: LD_INT 2
8422: ST_TO_ADDR
// hc_gallery := sandar ;
8423: LD_ADDR_OWVAR 33
8427: PUSH
8428: LD_STRING sandar
8430: ST_TO_ADDR
// hc_face_number := 2 ;
8431: LD_ADDR_OWVAR 34
8435: PUSH
8436: LD_INT 2
8438: ST_TO_ADDR
// ar_comander := CreateHuman ;
8439: LD_ADDR_EXP 50
8443: PUSH
8444: CALL_OW 44
8448: ST_TO_ADDR
// end ;
8449: LD_VAR 0 1
8453: RET
// export function SpeedFilter ( filter , speed ) ; var list , i ; begin
8454: LD_INT 0
8456: PPUSH
8457: PPUSH
8458: PPUSH
// list := [ ] ;
8459: LD_ADDR_VAR 0 4
8463: PUSH
8464: EMPTY
8465: ST_TO_ADDR
// for i = 1 to filter do
8466: LD_ADDR_VAR 0 5
8470: PUSH
8471: DOUBLE
8472: LD_INT 1
8474: DEC
8475: ST_TO_ADDR
8476: LD_VAR 0 1
8480: PUSH
8481: FOR_TO
8482: IFFALSE 8531
// if GetSpeed ( filter [ i ] ) < speed then
8484: LD_VAR 0 1
8488: PUSH
8489: LD_VAR 0 5
8493: ARRAY
8494: PPUSH
8495: CALL 7794 0 1
8499: PUSH
8500: LD_VAR 0 2
8504: LESS
8505: IFFALSE 8529
// list := list ^ filter [ i ] ;
8507: LD_ADDR_VAR 0 4
8511: PUSH
8512: LD_VAR 0 4
8516: PUSH
8517: LD_VAR 0 1
8521: PUSH
8522: LD_VAR 0 5
8526: ARRAY
8527: ADD
8528: ST_TO_ADDR
8529: GO 8481
8531: POP
8532: POP
// result := list ;
8533: LD_ADDR_VAR 0 3
8537: PUSH
8538: LD_VAR 0 4
8542: ST_TO_ADDR
// end ;
8543: LD_VAR 0 3
8547: RET
