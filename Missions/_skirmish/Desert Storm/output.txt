// starting begin PrepareMap ;
   0: CALL 13 0 0
// Main_Variables ;
   4: CALL 136 0 0
// Start_Mission ;
   8: CALL 3472 0 0
// end ;
  12: END
// function PrepareMap ; begin
  13: LD_INT 0
  15: PPUSH
// ResetFog ;
  16: CALL_OW 335
// RandomizeAll ;
  20: CALL_OW 11
// game_difficulty := GetMultiplayerSetting ( 0 ) ;
  24: LD_ADDR_EXP 2
  28: PUSH
  29: LD_INT 0
  31: PPUSH
  32: CALL_OW 426
  36: ST_TO_ADDR
// Difficulty := game_difficulty ;
  37: LD_ADDR_OWVAR 67
  41: PUSH
  42: LD_EXP 2
  46: ST_TO_ADDR
// ChangeSideFog ( 8 , 6 ) ;
  47: LD_INT 8
  49: PPUSH
  50: LD_INT 6
  52: PPUSH
  53: CALL_OW 343
// PlaceSeeing ( 1 , 1 , 8 , - 37963 ) ;
  57: LD_INT 1
  59: PPUSH
  60: LD_INT 1
  62: PPUSH
  63: LD_INT 8
  65: PPUSH
  66: LD_INT 37963
  68: NEG
  69: PPUSH
  70: CALL_OW 330
// RemoveSeeing ( 1 , 1 , 8 ) ;
  74: LD_INT 1
  76: PPUSH
  77: LD_INT 1
  79: PPUSH
  80: LD_INT 8
  82: PPUSH
  83: CALL_OW 331
// PlaceCamera ;
  87: CALL 3939 0 0
// CreateNature ( nature , 4 , 3 , 2 , 1 ) ;
  91: LD_INT 2
  93: PPUSH
  94: LD_INT 4
  96: PPUSH
  97: LD_INT 3
  99: PPUSH
 100: LD_INT 2
 102: PPUSH
 103: LD_INT 1
 105: PPUSH
 106: CALL 7889 0 5
// PrepareComm ;
 110: CALL 8372 0 0
// SetSide ( fort , 6 ) ;
 114: LD_INT 23
 116: PPUSH
 117: LD_INT 6
 119: PPUSH
 120: CALL_OW 235
// CenterNowOnUnits ( fort ) ;
 124: LD_INT 23
 126: PPUSH
 127: CALL_OW 87
// end ;
 131: LD_VAR 0 1
 135: RET
// export game_on , game_difficulty , game_time , game_option , game_end , game_strings ; export leopold , leopold_in_fort , samuel , samuel_in_fort , mortars_in_fort , scout ; export u_mine , u_fac ; export areas ; export skill ; export ar_weapons , ru_weapons , us_weapons ; export arabian_force , russian_force , american_force , arabian_timeing , russian_timeing , american_timeing ; export meeting_start , meeting_arive , meeting_break , meeting_end , meeting_time , russian_timer , fort_destroyed , hero_died , mission_time , cargo_ok , american_hchan , dezert , arabian_attack , russian_attack , american_attack , american_help , american_sib_bomb , russian_trade , heike_dialog1 , heike_dialog2 ; export am_comander , ru_comander , ar_comander ; function Main_Variables ; begin
 136: LD_INT 0
 138: PPUSH
// game_on := false ;
 139: LD_ADDR_EXP 1
 143: PUSH
 144: LD_INT 0
 146: ST_TO_ADDR
// game_time := 0 0$00 ;
 147: LD_ADDR_EXP 3
 151: PUSH
 152: LD_INT 0
 154: ST_TO_ADDR
// game_option := [ 1 ] ;
 155: LD_ADDR_EXP 4
 159: PUSH
 160: LD_INT 1
 162: PUSH
 163: EMPTY
 164: LIST
 165: ST_TO_ADDR
// game_end := false ;
 166: LD_ADDR_EXP 5
 170: PUSH
 171: LD_INT 0
 173: ST_TO_ADDR
// game_strings := [ ] ;
 174: LD_ADDR_EXP 6
 178: PUSH
 179: EMPTY
 180: ST_TO_ADDR
// game_time := 0 0$00 ;
 181: LD_ADDR_EXP 3
 185: PUSH
 186: LD_INT 0
 188: ST_TO_ADDR
// mission_time := 0 0$00 ;
 189: LD_ADDR_EXP 34
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// skill := [ 5 , 7 , 9 ] [ game_difficulty ] ;
 197: LD_ADDR_EXP 16
 201: PUSH
 202: LD_INT 5
 204: PUSH
 205: LD_INT 7
 207: PUSH
 208: LD_INT 9
 210: PUSH
 211: EMPTY
 212: LIST
 213: LIST
 214: LIST
 215: PUSH
 216: LD_EXP 2
 220: ARRAY
 221: ST_TO_ADDR
// areas := [ a_swest , a_nwest , a_neast , a_seast ] ;
 222: LD_ADDR_EXP 15
 226: PUSH
 227: LD_INT 5
 229: PUSH
 230: LD_INT 6
 232: PUSH
 233: LD_INT 7
 235: PUSH
 236: LD_INT 8
 238: PUSH
 239: EMPTY
 240: LIST
 241: LIST
 242: LIST
 243: LIST
 244: ST_TO_ADDR
// meeting_start := false ;
 245: LD_ADDR_EXP 26
 249: PUSH
 250: LD_INT 0
 252: ST_TO_ADDR
// meeting_arive := false ;
 253: LD_ADDR_EXP 27
 257: PUSH
 258: LD_INT 0
 260: ST_TO_ADDR
// meeting_break := false ;
 261: LD_ADDR_EXP 28
 265: PUSH
 266: LD_INT 0
 268: ST_TO_ADDR
// meeting_end := false ;
 269: LD_ADDR_EXP 29
 273: PUSH
 274: LD_INT 0
 276: ST_TO_ADDR
// meeting_time := [ 4 4$00 , 3 3$40 , 3 3$20 ] [ game_difficulty ] ;
 277: LD_ADDR_EXP 30
 281: PUSH
 282: LD_INT 8400
 284: PUSH
 285: LD_INT 7700
 287: PUSH
 288: LD_INT 7000
 290: PUSH
 291: EMPTY
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: LD_EXP 2
 300: ARRAY
 301: ST_TO_ADDR
// arabian_force := [ 4 , 5 , 6 ] [ game_difficulty ] ;
 302: LD_ADDR_EXP 20
 306: PUSH
 307: LD_INT 4
 309: PUSH
 310: LD_INT 5
 312: PUSH
 313: LD_INT 6
 315: PUSH
 316: EMPTY
 317: LIST
 318: LIST
 319: LIST
 320: PUSH
 321: LD_EXP 2
 325: ARRAY
 326: ST_TO_ADDR
// american_force := [ 5 , 6 , 7 ] [ game_difficulty ] ;
 327: LD_ADDR_EXP 22
 331: PUSH
 332: LD_INT 5
 334: PUSH
 335: LD_INT 6
 337: PUSH
 338: LD_INT 7
 340: PUSH
 341: EMPTY
 342: LIST
 343: LIST
 344: LIST
 345: PUSH
 346: LD_EXP 2
 350: ARRAY
 351: ST_TO_ADDR
// russian_force := [ 6 , 7 , 8 ] [ game_difficulty ] ;
 352: LD_ADDR_EXP 21
 356: PUSH
 357: LD_INT 6
 359: PUSH
 360: LD_INT 7
 362: PUSH
 363: LD_INT 8
 365: PUSH
 366: EMPTY
 367: LIST
 368: LIST
 369: LIST
 370: PUSH
 371: LD_EXP 2
 375: ARRAY
 376: ST_TO_ADDR
// u_mine := false ;
 377: LD_ADDR_EXP 13
 381: PUSH
 382: LD_INT 0
 384: ST_TO_ADDR
// u_fac := false ;
 385: LD_ADDR_EXP 14
 389: PUSH
 390: LD_INT 0
 392: ST_TO_ADDR
// leopold_in_fort := false ;
 393: LD_ADDR_EXP 8
 397: PUSH
 398: LD_INT 0
 400: ST_TO_ADDR
// samuel_in_fort := false ;
 401: LD_ADDR_EXP 10
 405: PUSH
 406: LD_INT 0
 408: ST_TO_ADDR
// mortars_in_fort := false ;
 409: LD_ADDR_EXP 11
 413: PUSH
 414: LD_INT 0
 416: ST_TO_ADDR
// fort_destroyed := false ;
 417: LD_ADDR_EXP 32
 421: PUSH
 422: LD_INT 0
 424: ST_TO_ADDR
// hero_died := false ;
 425: LD_ADDR_EXP 33
 429: PUSH
 430: LD_INT 0
 432: ST_TO_ADDR
// dezert := false ;
 433: LD_ADDR_EXP 37
 437: PUSH
 438: LD_INT 0
 440: ST_TO_ADDR
// arabian_attack := false ;
 441: LD_ADDR_EXP 38
 445: PUSH
 446: LD_INT 0
 448: ST_TO_ADDR
// russian_attack := false ;
 449: LD_ADDR_EXP 39
 453: PUSH
 454: LD_INT 0
 456: ST_TO_ADDR
// american_attack := false ;
 457: LD_ADDR_EXP 40
 461: PUSH
 462: LD_INT 0
 464: ST_TO_ADDR
// american_help := false ;
 465: LD_ADDR_EXP 41
 469: PUSH
 470: LD_INT 0
 472: ST_TO_ADDR
// american_hchan := [ 91 , 81 , 71 ] [ game_difficulty ] ;
 473: LD_ADDR_EXP 36
 477: PUSH
 478: LD_INT 91
 480: PUSH
 481: LD_INT 81
 483: PUSH
 484: LD_INT 71
 486: PUSH
 487: EMPTY
 488: LIST
 489: LIST
 490: LIST
 491: PUSH
 492: LD_EXP 2
 496: ARRAY
 497: ST_TO_ADDR
// american_sib_bomb := false ;
 498: LD_ADDR_EXP 42
 502: PUSH
 503: LD_INT 0
 505: ST_TO_ADDR
// russian_trade := false ;
 506: LD_ADDR_EXP 43
 510: PUSH
 511: LD_INT 0
 513: ST_TO_ADDR
// russian_timer := 5 5$00 ;
 514: LD_ADDR_EXP 31
 518: PUSH
 519: LD_INT 10500
 521: ST_TO_ADDR
// cargo_ok := false ;
 522: LD_ADDR_EXP 35
 526: PUSH
 527: LD_INT 0
 529: ST_TO_ADDR
// heike_dialog1 := false ;
 530: LD_ADDR_EXP 44
 534: PUSH
 535: LD_INT 0
 537: ST_TO_ADDR
// heike_dialog2 := false ;
 538: LD_ADDR_EXP 45
 542: PUSH
 543: LD_INT 0
 545: ST_TO_ADDR
// american_timeing := [ 10 10$00 , 9 9$50 , 9 9$30 ] [ game_difficulty ] ;
 546: LD_ADDR_EXP 25
 550: PUSH
 551: LD_INT 21000
 553: PUSH
 554: LD_INT 20650
 556: PUSH
 557: LD_INT 19950
 559: PUSH
 560: EMPTY
 561: LIST
 562: LIST
 563: LIST
 564: PUSH
 565: LD_EXP 2
 569: ARRAY
 570: ST_TO_ADDR
// arabian_timeing := [ 8 8$00 , 7 7$30 , 6 6$40 ] [ game_difficulty ] ;
 571: LD_ADDR_EXP 23
 575: PUSH
 576: LD_INT 16800
 578: PUSH
 579: LD_INT 15750
 581: PUSH
 582: LD_INT 14000
 584: PUSH
 585: EMPTY
 586: LIST
 587: LIST
 588: LIST
 589: PUSH
 590: LD_EXP 2
 594: ARRAY
 595: ST_TO_ADDR
// russian_timeing := [ 11 11$00 , 10 10$30 , 9 9$20 ] [ game_difficulty ] ;
 596: LD_ADDR_EXP 24
 600: PUSH
 601: LD_INT 23100
 603: PUSH
 604: LD_INT 22050
 606: PUSH
 607: LD_INT 19600
 609: PUSH
 610: EMPTY
 611: LIST
 612: LIST
 613: LIST
 614: PUSH
 615: LD_EXP 2
 619: ARRAY
 620: ST_TO_ADDR
// ar_weapons := [ ar_rocket_launcher , ar_gun , ar_flame_thrower , ar_selfpropelled_bomb , ar_bio_bomb ] ;
 621: LD_ADDR_EXP 17
 625: PUSH
 626: LD_INT 28
 628: PUSH
 629: LD_INT 27
 631: PUSH
 632: LD_INT 26
 634: PUSH
 635: LD_INT 29
 637: PUSH
 638: LD_INT 91
 640: PUSH
 641: EMPTY
 642: LIST
 643: LIST
 644: LIST
 645: LIST
 646: LIST
 647: ST_TO_ADDR
// us_weapons := [ us_rocket_launcher , us_heavy_gun , us_double_laser , us_laser ] ;
 648: LD_ADDR_EXP 19
 652: PUSH
 653: LD_INT 7
 655: PUSH
 656: LD_INT 6
 658: PUSH
 659: LD_INT 10
 661: PUSH
 662: LD_INT 9
 664: PUSH
 665: EMPTY
 666: LIST
 667: LIST
 668: LIST
 669: LIST
 670: ST_TO_ADDR
// ru_weapons := [ ru_rocket_launcher , ru_rocket , ru_heavy_gun , ru_heavy_gun ] ;
 671: LD_ADDR_EXP 18
 675: PUSH
 676: LD_INT 45
 678: PUSH
 679: LD_INT 47
 681: PUSH
 682: LD_INT 46
 684: PUSH
 685: LD_INT 46
 687: PUSH
 688: EMPTY
 689: LIST
 690: LIST
 691: LIST
 692: LIST
 693: ST_TO_ADDR
// end ;
 694: LD_VAR 0 1
 698: RET
// every 0 0$01 trigger game_on do var i , p , x , filter ;
 699: LD_EXP 1
 703: IFFALSE 3469
 705: GO 707
 707: DISABLE
 708: LD_INT 0
 710: PPUSH
 711: PPUSH
 712: PPUSH
 713: PPUSH
// begin enable ;
 714: ENABLE
// Display_Strings := [ #tick , game_time ] ^ game_strings ;
 715: LD_ADDR_OWVAR 47
 719: PUSH
 720: LD_STRING #tick
 722: PUSH
 723: LD_EXP 3
 727: PUSH
 728: EMPTY
 729: LIST
 730: LIST
 731: PUSH
 732: LD_EXP 6
 736: ADD
 737: ST_TO_ADDR
// game_time := RefreshTime ( game_time , true ) ;
 738: LD_ADDR_EXP 3
 742: PUSH
 743: LD_EXP 3
 747: PPUSH
 748: LD_INT 1
 750: PPUSH
 751: CALL 6975 0 2
 755: ST_TO_ADDR
// if meeting_start and meeting_time > 0 0$00 then
 756: LD_EXP 26
 760: PUSH
 761: LD_EXP 30
 765: PUSH
 766: LD_INT 0
 768: GREATER
 769: AND
 770: IFFALSE 807
// begin game_strings := [ #mtime , meeting_time ] ;
 772: LD_ADDR_EXP 6
 776: PUSH
 777: LD_STRING #mtime
 779: PUSH
 780: LD_EXP 30
 784: PUSH
 785: EMPTY
 786: LIST
 787: LIST
 788: ST_TO_ADDR
// meeting_time := RefreshTime ( meeting_time , false ) ;
 789: LD_ADDR_EXP 30
 793: PUSH
 794: LD_EXP 30
 798: PPUSH
 799: LD_INT 0
 801: PPUSH
 802: CALL 6975 0 2
 806: ST_TO_ADDR
// end ; if meeting_arive then
 807: LD_EXP 27
 811: IFFALSE 831
// mission_time := RefreshTime ( mission_time , true ) ;
 813: LD_ADDR_EXP 34
 817: PUSH
 818: LD_EXP 34
 822: PPUSH
 823: LD_INT 1
 825: PPUSH
 826: CALL 6975 0 2
 830: ST_TO_ADDR
// if arabian_attack and arabian_timeing > 0 0$00 and meeting_arive then
 831: LD_EXP 38
 835: PUSH
 836: LD_EXP 23
 840: PUSH
 841: LD_INT 0
 843: GREATER
 844: AND
 845: PUSH
 846: LD_EXP 27
 850: AND
 851: IFFALSE 871
// begin arabian_timeing := RefreshTime ( arabian_timeing , false ) ;
 853: LD_ADDR_EXP 23
 857: PUSH
 858: LD_EXP 23
 862: PPUSH
 863: LD_INT 0
 865: PPUSH
 866: CALL 6975 0 2
 870: ST_TO_ADDR
// end ; if russian_attack and russian_timeing > 0 0$00 and meeting_arive then
 871: LD_EXP 39
 875: PUSH
 876: LD_EXP 24
 880: PUSH
 881: LD_INT 0
 883: GREATER
 884: AND
 885: PUSH
 886: LD_EXP 27
 890: AND
 891: IFFALSE 911
// begin russian_timeing := RefreshTime ( russian_timeing , false ) ;
 893: LD_ADDR_EXP 24
 897: PUSH
 898: LD_EXP 24
 902: PPUSH
 903: LD_INT 0
 905: PPUSH
 906: CALL 6975 0 2
 910: ST_TO_ADDR
// end ; if american_attack and american_timeing > 0 0$00 and meeting_arive then
 911: LD_EXP 40
 915: PUSH
 916: LD_EXP 25
 920: PUSH
 921: LD_INT 0
 923: GREATER
 924: AND
 925: PUSH
 926: LD_EXP 27
 930: AND
 931: IFFALSE 951
// begin american_timeing := RefreshTime ( american_timeing , false ) ;
 933: LD_ADDR_EXP 25
 937: PUSH
 938: LD_EXP 25
 942: PPUSH
 943: LD_INT 0
 945: PPUSH
 946: CALL 6975 0 2
 950: ST_TO_ADDR
// end ; if russian_trade and russian_timer > 0 0$00 then
 951: LD_EXP 43
 955: PUSH
 956: LD_EXP 31
 960: PUSH
 961: LD_INT 0
 963: GREATER
 964: AND
 965: IFFALSE 1002
// begin game_strings := [ #rtime , russian_timer ] ;
 967: LD_ADDR_EXP 6
 971: PUSH
 972: LD_STRING #rtime
 974: PUSH
 975: LD_EXP 31
 979: PUSH
 980: EMPTY
 981: LIST
 982: LIST
 983: ST_TO_ADDR
// russian_timer := RefreshTime ( russian_timer , false ) ;
 984: LD_ADDR_EXP 31
 988: PUSH
 989: LD_EXP 31
 993: PPUSH
 994: LD_INT 0
 996: PPUSH
 997: CALL 6975 0 2
1001: ST_TO_ADDR
// end ; if russian_trade and russian_timer = 0 0$00 or cargo_ok then
1002: LD_EXP 43
1006: PUSH
1007: LD_EXP 31
1011: PUSH
1012: LD_INT 0
1014: EQUAL
1015: AND
1016: PUSH
1017: LD_EXP 35
1021: OR
1022: IFFALSE 1031
// game_strings := [ ] ;
1024: LD_ADDR_EXP 6
1028: PUSH
1029: EMPTY
1030: ST_TO_ADDR
// if dezert = false and tick mod 33600 = 0 then
1031: LD_EXP 37
1035: PUSH
1036: LD_INT 0
1038: EQUAL
1039: PUSH
1040: LD_OWVAR 1
1044: PUSH
1045: LD_INT 33600
1047: MOD
1048: PUSH
1049: LD_INT 0
1051: EQUAL
1052: AND
1053: IFFALSE 1113
// begin p := Rand ( 1 , 5 ) ;
1055: LD_ADDR_VAR 0 2
1059: PUSH
1060: LD_INT 1
1062: PPUSH
1063: LD_INT 5
1065: PPUSH
1066: CALL_OW 12
1070: ST_TO_ADDR
// if p <= [ 4 , 3 , 3 ] [ game_difficulty ] then
1071: LD_VAR 0 2
1075: PUSH
1076: LD_INT 4
1078: PUSH
1079: LD_INT 3
1081: PUSH
1082: LD_INT 3
1084: PUSH
1085: EMPTY
1086: LIST
1087: LIST
1088: LIST
1089: PUSH
1090: LD_EXP 2
1094: ARRAY
1095: LESSEQUAL
1096: IFFALSE 1113
// begin RaiseSailEvent ( 92 ) ;
1098: LD_INT 92
1100: PPUSH
1101: CALL_OW 427
// dezert := true ;
1105: LD_ADDR_EXP 37
1109: PUSH
1110: LD_INT 1
1112: ST_TO_ADDR
// end ; end ; if tick mod 8400 = 0 then
1113: LD_OWVAR 1
1117: PUSH
1118: LD_INT 8400
1120: MOD
1121: PUSH
1122: LD_INT 0
1124: EQUAL
1125: IFFALSE 1134
// RaiseSailEvent ( 101 ) ;
1127: LD_INT 101
1129: PPUSH
1130: CALL_OW 427
// if MineExist ( 8 ) and u_mine = false then
1134: LD_INT 8
1136: PPUSH
1137: CALL 7029 0 1
1141: PUSH
1142: LD_EXP 13
1146: PUSH
1147: LD_INT 0
1149: EQUAL
1150: AND
1151: IFFALSE 1168
// begin u_mine := true ;
1153: LD_ADDR_EXP 13
1157: PUSH
1158: LD_INT 1
1160: ST_TO_ADDR
// ChangeMissionObjectives ( DS-T1m ) ;
1161: LD_STRING DS-T1m
1163: PPUSH
1164: CALL_OW 337
// end ; if FacExist ( 8 ) and u_fac = false then
1168: LD_INT 8
1170: PPUSH
1171: CALL 7091 0 1
1175: PUSH
1176: LD_EXP 14
1180: PUSH
1181: LD_INT 0
1183: EQUAL
1184: AND
1185: IFFALSE 1202
// begin u_fac := true ;
1187: LD_ADDR_EXP 14
1191: PUSH
1192: LD_INT 1
1194: ST_TO_ADDR
// ChangeMissionObjectives ( DS-T1f ) ;
1195: LD_STRING DS-T1f
1197: PPUSH
1198: CALL_OW 337
// end ; if hero_died then
1202: LD_EXP 33
1206: IFFALSE 1215
// YouLost ( DS-h1 ) ;
1208: LD_STRING DS-h1
1210: PPUSH
1211: CALL_OW 104
// if fort_destroyed then
1215: LD_EXP 32
1219: IFFALSE 1228
// YouLost ( DS-h2 ) ;
1221: LD_STRING DS-h2
1223: PPUSH
1224: CALL_OW 104
// if GetDistUnits ( leopold , l_cmndr ) > 6 and meeting_start = false then
1228: LD_EXP 7
1232: PPUSH
1233: LD_EXP 49
1237: PPUSH
1238: CALL_OW 296
1242: PUSH
1243: LD_INT 6
1245: GREATER
1246: PUSH
1247: LD_EXP 26
1251: PUSH
1252: LD_INT 0
1254: EQUAL
1255: AND
1256: IFFALSE 1279
// begin if not HasTask ( leopold ) then
1258: LD_EXP 7
1262: PPUSH
1263: CALL_OW 314
1267: NOT
1268: IFFALSE 1277
// RaiseSailEvent ( 1 ) ;
1270: LD_INT 1
1272: PPUSH
1273: CALL_OW 427
// end else
1277: GO 1296
// if meeting_start = false then
1279: LD_EXP 26
1283: PUSH
1284: LD_INT 0
1286: EQUAL
1287: IFFALSE 1296
// begin RaiseSailEvent ( 2 ) ;
1289: LD_INT 2
1291: PPUSH
1292: CALL_OW 427
// end ; if game_time >= [ 50 50$00 , 62 62$30 , 72 72$00 ] [ game_difficulty ] and meeting_end = false then
1296: LD_EXP 3
1300: PUSH
1301: LD_INT 105000
1303: PUSH
1304: LD_INT 131250
1306: PUSH
1307: LD_INT 151200
1309: PUSH
1310: EMPTY
1311: LIST
1312: LIST
1313: LIST
1314: PUSH
1315: LD_EXP 2
1319: ARRAY
1320: GREATEREQUAL
1321: PUSH
1322: LD_EXP 29
1326: PUSH
1327: LD_INT 0
1329: EQUAL
1330: AND
1331: IFFALSE 1348
// begin meeting_end := true ;
1333: LD_ADDR_EXP 29
1337: PUSH
1338: LD_INT 1
1340: ST_TO_ADDR
// RaiseSailEvent ( 200 ) ;
1341: LD_INT 200
1343: PPUSH
1344: CALL_OW 427
// end ; if meeting_time = 0 0$00 and meeting_arive = false then
1348: LD_EXP 30
1352: PUSH
1353: LD_INT 0
1355: EQUAL
1356: PUSH
1357: LD_EXP 27
1361: PUSH
1362: LD_INT 0
1364: EQUAL
1365: AND
1366: IFFALSE 1390
// begin meeting_arive := true ;
1368: LD_ADDR_EXP 27
1372: PUSH
1373: LD_INT 1
1375: ST_TO_ADDR
// game_strings := [ ] ;
1376: LD_ADDR_EXP 6
1380: PUSH
1381: EMPTY
1382: ST_TO_ADDR
// RaiseSailEvent ( 10 ) ;
1383: LD_INT 10
1385: PPUSH
1386: CALL_OW 427
// end ; if meeting_arive then
1390: LD_EXP 27
1394: IFFALSE 2193
// begin if arabian_attack = false and tick mod 4200 = 0 then
1396: LD_EXP 38
1400: PUSH
1401: LD_INT 0
1403: EQUAL
1404: PUSH
1405: LD_OWVAR 1
1409: PUSH
1410: LD_INT 4200
1412: MOD
1413: PUSH
1414: LD_INT 0
1416: EQUAL
1417: AND
1418: IFFALSE 1471
// begin p := Rand ( 1 , 100 ) ;
1420: LD_ADDR_VAR 0 2
1424: PUSH
1425: LD_INT 1
1427: PPUSH
1428: LD_INT 100
1430: PPUSH
1431: CALL_OW 12
1435: ST_TO_ADDR
// if p <= [ 85 , 90 , 95 ] [ game_difficulty ] then
1436: LD_VAR 0 2
1440: PUSH
1441: LD_INT 85
1443: PUSH
1444: LD_INT 90
1446: PUSH
1447: LD_INT 95
1449: PUSH
1450: EMPTY
1451: LIST
1452: LIST
1453: LIST
1454: PUSH
1455: LD_EXP 2
1459: ARRAY
1460: LESSEQUAL
1461: IFFALSE 1471
// arabian_attack := true ;
1463: LD_ADDR_EXP 38
1467: PUSH
1468: LD_INT 1
1470: ST_TO_ADDR
// end ; if russian_trade = false and russian_attack = false and tick > 52500 then
1471: LD_EXP 43
1475: PUSH
1476: LD_INT 0
1478: EQUAL
1479: PUSH
1480: LD_EXP 39
1484: PUSH
1485: LD_INT 0
1487: EQUAL
1488: AND
1489: PUSH
1490: LD_OWVAR 1
1494: PUSH
1495: LD_INT 52500
1497: GREATER
1498: AND
1499: IFFALSE 1570
// begin russian_trade = true ;
1501: LD_ADDR_EXP 43
1505: PUSH
1506: LD_INT 1
1508: ST_TO_ADDR
// DialogueOn ;
1509: CALL_OW 6
// SayRadio ( ru_comander , DS-DR-RTr ) ;
1513: LD_EXP 47
1517: PPUSH
1518: LD_STRING DS-DR-RTr
1520: PPUSH
1521: CALL_OW 94
// Say ( l_cmndr , DS-DC-RTr ) ;
1525: LD_EXP 49
1529: PPUSH
1530: LD_STRING DS-DC-RTr
1532: PPUSH
1533: CALL_OW 88
// SayRadio ( ru_comander , DS-DR-RTr2 ) ;
1537: LD_EXP 47
1541: PPUSH
1542: LD_STRING DS-DR-RTr2
1544: PPUSH
1545: CALL_OW 94
// DialogueOff ;
1549: CALL_OW 7
// ChangeMissionObjectives ( DS-T2 ) ;
1553: LD_STRING DS-T2
1555: PPUSH
1556: CALL_OW 337
// SetAreaMapShow ( tree , 1 ) ;
1560: LD_INT 10
1562: PPUSH
1563: LD_INT 1
1565: PPUSH
1566: CALL_OW 424
// end ; if russian_trade and cargo_ok = false and russian_timer > 0 0$00 then
1570: LD_EXP 43
1574: PUSH
1575: LD_EXP 35
1579: PUSH
1580: LD_INT 0
1582: EQUAL
1583: AND
1584: PUSH
1585: LD_EXP 31
1589: PUSH
1590: LD_INT 0
1592: GREATER
1593: AND
1594: IFFALSE 1843
// begin if FilterUnitsInArea ( tree , ( [ [ f_empty ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] , [ f_not , [ f_control , control_remote ] ] ] ) ) > 0 then
1596: LD_INT 10
1598: PPUSH
1599: LD_INT 58
1601: PUSH
1602: EMPTY
1603: LIST
1604: PUSH
1605: LD_INT 2
1607: PUSH
1608: LD_INT 34
1610: PUSH
1611: LD_INT 32
1613: PUSH
1614: EMPTY
1615: LIST
1616: LIST
1617: PUSH
1618: LD_INT 34
1620: PUSH
1621: LD_INT 12
1623: PUSH
1624: EMPTY
1625: LIST
1626: LIST
1627: PUSH
1628: EMPTY
1629: LIST
1630: LIST
1631: LIST
1632: PUSH
1633: LD_INT 3
1635: PUSH
1636: LD_INT 33
1638: PUSH
1639: LD_INT 2
1641: PUSH
1642: EMPTY
1643: LIST
1644: LIST
1645: PUSH
1646: EMPTY
1647: LIST
1648: LIST
1649: PUSH
1650: EMPTY
1651: LIST
1652: LIST
1653: LIST
1654: PPUSH
1655: CALL_OW 70
1659: PUSH
1660: LD_INT 0
1662: GREATER
1663: IFFALSE 1843
// if GetCargo ( FilterUnitsInArea ( tree , ( [ [ f_empty ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] , [ f_not , [ f_control , control_remote ] ] ] ) ) [ 1 ] , mat_siberit ) = 100 then
1665: LD_INT 10
1667: PPUSH
1668: LD_INT 58
1670: PUSH
1671: EMPTY
1672: LIST
1673: PUSH
1674: LD_INT 2
1676: PUSH
1677: LD_INT 34
1679: PUSH
1680: LD_INT 32
1682: PUSH
1683: EMPTY
1684: LIST
1685: LIST
1686: PUSH
1687: LD_INT 34
1689: PUSH
1690: LD_INT 12
1692: PUSH
1693: EMPTY
1694: LIST
1695: LIST
1696: PUSH
1697: EMPTY
1698: LIST
1699: LIST
1700: LIST
1701: PUSH
1702: LD_INT 3
1704: PUSH
1705: LD_INT 33
1707: PUSH
1708: LD_INT 2
1710: PUSH
1711: EMPTY
1712: LIST
1713: LIST
1714: PUSH
1715: EMPTY
1716: LIST
1717: LIST
1718: PUSH
1719: EMPTY
1720: LIST
1721: LIST
1722: LIST
1723: PPUSH
1724: CALL_OW 70
1728: PUSH
1729: LD_INT 1
1731: ARRAY
1732: PPUSH
1733: LD_INT 3
1735: PPUSH
1736: CALL_OW 289
1740: PUSH
1741: LD_INT 100
1743: EQUAL
1744: IFFALSE 1843
// begin cargo_ok := true ;
1746: LD_ADDR_EXP 35
1750: PUSH
1751: LD_INT 1
1753: ST_TO_ADDR
// RemoveUnit ( FilterUnitsInArea ( tree , ( [ [ f_empty ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] , [ f_not , [ f_control , control_remote ] ] ] ) ) [ 1 ] ) ;
1754: LD_INT 10
1756: PPUSH
1757: LD_INT 58
1759: PUSH
1760: EMPTY
1761: LIST
1762: PUSH
1763: LD_INT 2
1765: PUSH
1766: LD_INT 34
1768: PUSH
1769: LD_INT 32
1771: PUSH
1772: EMPTY
1773: LIST
1774: LIST
1775: PUSH
1776: LD_INT 34
1778: PUSH
1779: LD_INT 12
1781: PUSH
1782: EMPTY
1783: LIST
1784: LIST
1785: PUSH
1786: EMPTY
1787: LIST
1788: LIST
1789: LIST
1790: PUSH
1791: LD_INT 3
1793: PUSH
1794: LD_INT 33
1796: PUSH
1797: LD_INT 2
1799: PUSH
1800: EMPTY
1801: LIST
1802: LIST
1803: PUSH
1804: EMPTY
1805: LIST
1806: LIST
1807: PUSH
1808: EMPTY
1809: LIST
1810: LIST
1811: LIST
1812: PPUSH
1813: CALL_OW 70
1817: PUSH
1818: LD_INT 1
1820: ARRAY
1821: PPUSH
1822: CALL_OW 64
// ChangeMissionObjectives ( DS-T2-out ) ;
1826: LD_STRING DS-T2-out
1828: PPUSH
1829: CALL_OW 337
// SetAreaMapShow ( tree , 0 ) ;
1833: LD_INT 10
1835: PPUSH
1836: LD_INT 0
1838: PPUSH
1839: CALL_OW 424
// end ; end ; if russian_attack = false and russian_trade and cargo_ok = false and russian_timer = 0 0$00 then
1843: LD_EXP 39
1847: PUSH
1848: LD_INT 0
1850: EQUAL
1851: PUSH
1852: LD_EXP 43
1856: AND
1857: PUSH
1858: LD_EXP 35
1862: PUSH
1863: LD_INT 0
1865: EQUAL
1866: AND
1867: PUSH
1868: LD_EXP 31
1872: PUSH
1873: LD_INT 0
1875: EQUAL
1876: AND
1877: IFFALSE 1904
// begin russian_attack := true ;
1879: LD_ADDR_EXP 39
1883: PUSH
1884: LD_INT 1
1886: ST_TO_ADDR
// ChangeMissionObjectives ( DS-T2-out ) ;
1887: LD_STRING DS-T2-out
1889: PPUSH
1890: CALL_OW 337
// SetAreaMapShow ( tree , 0 ) ;
1894: LD_INT 10
1896: PPUSH
1897: LD_INT 0
1899: PPUSH
1900: CALL_OW 424
// end ; if russian_trade = false and russian_attack = false and american_attack = false and tick mod 21000 = 0 then
1904: LD_EXP 43
1908: PUSH
1909: LD_INT 0
1911: EQUAL
1912: PUSH
1913: LD_EXP 39
1917: PUSH
1918: LD_INT 0
1920: EQUAL
1921: AND
1922: PUSH
1923: LD_EXP 40
1927: PUSH
1928: LD_INT 0
1930: EQUAL
1931: AND
1932: PUSH
1933: LD_OWVAR 1
1937: PUSH
1938: LD_INT 21000
1940: MOD
1941: PUSH
1942: LD_INT 0
1944: EQUAL
1945: AND
1946: IFFALSE 1999
// begin p := Rand ( 1 , 100 ) ;
1948: LD_ADDR_VAR 0 2
1952: PUSH
1953: LD_INT 1
1955: PPUSH
1956: LD_INT 100
1958: PPUSH
1959: CALL_OW 12
1963: ST_TO_ADDR
// if p <= [ 35 , 45 , 55 ] [ game_difficulty ] then
1964: LD_VAR 0 2
1968: PUSH
1969: LD_INT 35
1971: PUSH
1972: LD_INT 45
1974: PUSH
1975: LD_INT 55
1977: PUSH
1978: EMPTY
1979: LIST
1980: LIST
1981: LIST
1982: PUSH
1983: LD_EXP 2
1987: ARRAY
1988: LESSEQUAL
1989: IFFALSE 1999
// russian_attack := true ;
1991: LD_ADDR_EXP 39
1995: PUSH
1996: LD_INT 1
1998: ST_TO_ADDR
// end ; if american_help = false and american_attack = false and russian_attack = false and tick mod 31500 = 0 then
1999: LD_EXP 41
2003: PUSH
2004: LD_INT 0
2006: EQUAL
2007: PUSH
2008: LD_EXP 40
2012: PUSH
2013: LD_INT 0
2015: EQUAL
2016: AND
2017: PUSH
2018: LD_EXP 39
2022: PUSH
2023: LD_INT 0
2025: EQUAL
2026: AND
2027: PUSH
2028: LD_OWVAR 1
2032: PUSH
2033: LD_INT 31500
2035: MOD
2036: PUSH
2037: LD_INT 0
2039: EQUAL
2040: AND
2041: IFFALSE 2094
// begin p := Rand ( 1 , 100 ) ;
2043: LD_ADDR_VAR 0 2
2047: PUSH
2048: LD_INT 1
2050: PPUSH
2051: LD_INT 100
2053: PPUSH
2054: CALL_OW 12
2058: ST_TO_ADDR
// if p <= [ 33 , 44 , 55 ] [ game_difficulty ] then
2059: LD_VAR 0 2
2063: PUSH
2064: LD_INT 33
2066: PUSH
2067: LD_INT 44
2069: PUSH
2070: LD_INT 55
2072: PUSH
2073: EMPTY
2074: LIST
2075: LIST
2076: LIST
2077: PUSH
2078: LD_EXP 2
2082: ARRAY
2083: LESSEQUAL
2084: IFFALSE 2094
// american_attack := true ;
2086: LD_ADDR_EXP 40
2090: PUSH
2091: LD_INT 1
2093: ST_TO_ADDR
// end ; if american_attack = false and russian_attack = false and american_help = false and tick mod 21200 = 0 then
2094: LD_EXP 40
2098: PUSH
2099: LD_INT 0
2101: EQUAL
2102: PUSH
2103: LD_EXP 39
2107: PUSH
2108: LD_INT 0
2110: EQUAL
2111: AND
2112: PUSH
2113: LD_EXP 41
2117: PUSH
2118: LD_INT 0
2120: EQUAL
2121: AND
2122: PUSH
2123: LD_OWVAR 1
2127: PUSH
2128: LD_INT 21200
2130: MOD
2131: PUSH
2132: LD_INT 0
2134: EQUAL
2135: AND
2136: IFFALSE 2193
// begin p := Rand ( 1 , 100 ) ;
2138: LD_ADDR_VAR 0 2
2142: PUSH
2143: LD_INT 1
2145: PPUSH
2146: LD_INT 100
2148: PPUSH
2149: CALL_OW 12
2153: ST_TO_ADDR
// if p <= american_hchan then
2154: LD_VAR 0 2
2158: PUSH
2159: LD_EXP 36
2163: LESSEQUAL
2164: IFFALSE 2193
// begin american_help := true ;
2166: LD_ADDR_EXP 41
2170: PUSH
2171: LD_INT 1
2173: ST_TO_ADDR
// SayRadio ( am_comander , DS-amhelp ) ;
2174: LD_EXP 46
2178: PPUSH
2179: LD_STRING DS-amhelp
2181: PPUSH
2182: CALL_OW 94
// RaiseSailEvent ( 91 ) ;
2186: LD_INT 91
2188: PPUSH
2189: CALL_OW 427
// end ; end ; end ; if american_attack and american_timeing = 0 0$00 and FilterAllUnits ( [ f_side , 1 ] ) = 0 then
2193: LD_EXP 40
2197: PUSH
2198: LD_EXP 25
2202: PUSH
2203: LD_INT 0
2205: EQUAL
2206: AND
2207: PUSH
2208: LD_INT 22
2210: PUSH
2211: LD_INT 1
2213: PUSH
2214: EMPTY
2215: LIST
2216: LIST
2217: PPUSH
2218: CALL_OW 69
2222: PUSH
2223: LD_INT 0
2225: EQUAL
2226: AND
2227: IFFALSE 2329
// begin american_timeing := Rand ( 17 17$00 , 20 20$00 ) ;
2229: LD_ADDR_EXP 25
2233: PUSH
2234: LD_INT 35700
2236: PPUSH
2237: LD_INT 42000
2239: PPUSH
2240: CALL_OW 12
2244: ST_TO_ADDR
// SayRadio ( scout , DS-DZ-U ) ;
2245: LD_EXP 12
2249: PPUSH
2250: LD_STRING DS-DZ-U
2252: PPUSH
2253: CALL_OW 94
// Wait ( 0 0$33 ) ;
2257: LD_INT 1155
2259: PPUSH
2260: CALL_OW 67
// x := Rand ( 1 , 2 ) ;
2264: LD_ADDR_VAR 0 3
2268: PUSH
2269: LD_INT 1
2271: PPUSH
2272: LD_INT 2
2274: PPUSH
2275: CALL_OW 12
2279: ST_TO_ADDR
// case x of 1 :
2280: LD_VAR 0 3
2284: PUSH
2285: LD_INT 1
2287: DOUBLE
2288: EQUAL
2289: IFTRUE 2293
2291: GO 2303
2293: POP
// RaiseSailEvent ( 41 ) ; 2 :
2294: LD_INT 41
2296: PPUSH
2297: CALL_OW 427
2301: GO 2322
2303: LD_INT 2
2305: DOUBLE
2306: EQUAL
2307: IFTRUE 2311
2309: GO 2321
2311: POP
// RaiseSailEvent ( 42 ) ; end ;
2312: LD_INT 42
2314: PPUSH
2315: CALL_OW 427
2319: GO 2322
2321: POP
// RaiseSailEvent ( 42 ) ;
2322: LD_INT 42
2324: PPUSH
2325: CALL_OW 427
// end ; if russian_attack and russian_timeing = 0 0$00 and FilterAllUnits ( [ f_side , 3 ] ) = 0 then
2329: LD_EXP 39
2333: PUSH
2334: LD_EXP 24
2338: PUSH
2339: LD_INT 0
2341: EQUAL
2342: AND
2343: PUSH
2344: LD_INT 22
2346: PUSH
2347: LD_INT 3
2349: PUSH
2350: EMPTY
2351: LIST
2352: LIST
2353: PPUSH
2354: CALL_OW 69
2358: PUSH
2359: LD_INT 0
2361: EQUAL
2362: AND
2363: IFFALSE 2419
// begin russian_timeing := Rand ( 17 17$00 , 20 20$00 ) ;
2365: LD_ADDR_EXP 24
2369: PUSH
2370: LD_INT 35700
2372: PPUSH
2373: LD_INT 42000
2375: PPUSH
2376: CALL_OW 12
2380: ST_TO_ADDR
// SayRadio ( scout , DS-DZ-R ) ;
2381: LD_EXP 12
2385: PPUSH
2386: LD_STRING DS-DZ-R
2388: PPUSH
2389: CALL_OW 94
// Wait ( 0 0$45 ) ;
2393: LD_INT 1575
2395: PPUSH
2396: CALL_OW 67
// SayRadio ( ru_comander , DS-DR-R1 ) ;
2400: LD_EXP 47
2404: PPUSH
2405: LD_STRING DS-DR-R1
2407: PPUSH
2408: CALL_OW 94
// RaiseSailEvent ( 51 ) ;
2412: LD_INT 51
2414: PPUSH
2415: CALL_OW 427
// end ; if mission_time >= 25 25$00 and arabian_force < 10 then
2419: LD_EXP 34
2423: PUSH
2424: LD_INT 52500
2426: GREATEREQUAL
2427: PUSH
2428: LD_EXP 20
2432: PUSH
2433: LD_INT 10
2435: LESS
2436: AND
2437: IFFALSE 2461
// begin mission_time := 0 0$00 ;
2439: LD_ADDR_EXP 34
2443: PUSH
2444: LD_INT 0
2446: ST_TO_ADDR
// arabian_force := arabian_force + 1 ;
2447: LD_ADDR_EXP 20
2451: PUSH
2452: LD_EXP 20
2456: PUSH
2457: LD_INT 1
2459: PLUS
2460: ST_TO_ADDR
// end ; if arabian_timeing = 0 0$00 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_weapon , ar_control_tower ] ] ] ) = 0 then
2461: LD_EXP 23
2465: PUSH
2466: LD_INT 0
2468: EQUAL
2469: PUSH
2470: LD_INT 22
2472: PUSH
2473: LD_INT 2
2475: PUSH
2476: EMPTY
2477: LIST
2478: LIST
2479: PUSH
2480: LD_INT 3
2482: PUSH
2483: LD_INT 34
2485: PUSH
2486: LD_INT 31
2488: PUSH
2489: EMPTY
2490: LIST
2491: LIST
2492: PUSH
2493: EMPTY
2494: LIST
2495: LIST
2496: PUSH
2497: EMPTY
2498: LIST
2499: LIST
2500: PPUSH
2501: CALL_OW 69
2505: PUSH
2506: LD_INT 0
2508: EQUAL
2509: AND
2510: IFFALSE 2708
// begin arabian_timeing := 7 7$30 ;
2512: LD_ADDR_EXP 23
2516: PUSH
2517: LD_INT 15750
2519: ST_TO_ADDR
// x := Rand ( 1 , 3 ) ;
2520: LD_ADDR_VAR 0 3
2524: PUSH
2525: LD_INT 1
2527: PPUSH
2528: LD_INT 3
2530: PPUSH
2531: CALL_OW 12
2535: ST_TO_ADDR
// SayRadio ( scout , DS-DZ-H ) ;
2536: LD_EXP 12
2540: PPUSH
2541: LD_STRING DS-DZ-H
2543: PPUSH
2544: CALL_OW 94
// case x of 1 :
2548: LD_VAR 0 3
2552: PUSH
2553: LD_INT 1
2555: DOUBLE
2556: EQUAL
2557: IFTRUE 2561
2559: GO 2571
2561: POP
// RaiseSailEvent ( 31 ) ; 2 :
2562: LD_INT 31
2564: PPUSH
2565: CALL_OW 427
2569: GO 2608
2571: LD_INT 2
2573: DOUBLE
2574: EQUAL
2575: IFTRUE 2579
2577: GO 2589
2579: POP
// RaiseSailEvent ( 32 ) ; 3 :
2580: LD_INT 32
2582: PPUSH
2583: CALL_OW 427
2587: GO 2608
2589: LD_INT 3
2591: DOUBLE
2592: EQUAL
2593: IFTRUE 2597
2595: GO 2607
2597: POP
// RaiseSailEvent ( 33 ) ; end ;
2598: LD_INT 33
2600: PPUSH
2601: CALL_OW 427
2605: GO 2608
2607: POP
// RaiseSailEvent ( 33 ) ;
2608: LD_INT 33
2610: PPUSH
2611: CALL_OW 427
// if game_difficulty > 1 then
2615: LD_EXP 2
2619: PUSH
2620: LD_INT 1
2622: GREATER
2623: IFFALSE 2632
// RaiseSailEvent ( 33 ) ;
2625: LD_INT 33
2627: PPUSH
2628: CALL_OW 427
// if heike_dialog1 = false then
2632: LD_EXP 44
2636: PUSH
2637: LD_INT 0
2639: EQUAL
2640: IFFALSE 2671
// begin heike_dialog1 := true ;
2642: LD_ADDR_EXP 44
2646: PUSH
2647: LD_INT 1
2649: ST_TO_ADDR
// Wait ( 0 0$03 ) ;
2650: LD_INT 105
2652: PPUSH
2653: CALL_OW 67
// SayRadio ( ar_comander , heike1 ) ;
2657: LD_EXP 48
2661: PPUSH
2662: LD_STRING heike1
2664: PPUSH
2665: CALL_OW 94
// end else
2669: GO 2708
// if heike_dialog2 = false then
2671: LD_EXP 45
2675: PUSH
2676: LD_INT 0
2678: EQUAL
2679: IFFALSE 2708
// begin heike_dialog2 := true ;
2681: LD_ADDR_EXP 45
2685: PUSH
2686: LD_INT 1
2688: ST_TO_ADDR
// Wait ( 0 0$03 ) ;
2689: LD_INT 105
2691: PPUSH
2692: CALL_OW 67
// SayRadio ( ar_comander , heike2 ) ;
2696: LD_EXP 48
2700: PPUSH
2701: LD_STRING heike2
2703: PPUSH
2704: CALL_OW 94
// end ; end ; if FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) > 0 then
2708: LD_INT 22
2710: PUSH
2711: LD_INT 2
2713: PUSH
2714: EMPTY
2715: LIST
2716: LIST
2717: PUSH
2718: LD_INT 33
2720: PUSH
2721: LD_INT 2
2723: PUSH
2724: EMPTY
2725: LIST
2726: LIST
2727: PUSH
2728: EMPTY
2729: LIST
2730: LIST
2731: PPUSH
2732: CALL_OW 69
2736: PUSH
2737: LD_INT 0
2739: GREATER
2740: IFFALSE 2749
// ConnectWithTower ( 2 ) ;
2742: LD_INT 2
2744: PPUSH
2745: CALL 7139 0 1
// if FilterAllUnits ( [ [ [ f_side , 2 ] , [ f_not , [ f_weapon , ar_control_tower ] ] , [ f_not , [ f_hastask ] ] ] ] ) > 0 then
2749: LD_INT 22
2751: PUSH
2752: LD_INT 2
2754: PUSH
2755: EMPTY
2756: LIST
2757: LIST
2758: PUSH
2759: LD_INT 3
2761: PUSH
2762: LD_INT 34
2764: PUSH
2765: LD_INT 31
2767: PUSH
2768: EMPTY
2769: LIST
2770: LIST
2771: PUSH
2772: EMPTY
2773: LIST
2774: LIST
2775: PUSH
2776: LD_INT 3
2778: PUSH
2779: LD_INT 60
2781: PUSH
2782: EMPTY
2783: LIST
2784: PUSH
2785: EMPTY
2786: LIST
2787: LIST
2788: PUSH
2789: EMPTY
2790: LIST
2791: LIST
2792: LIST
2793: PUSH
2794: EMPTY
2795: LIST
2796: PPUSH
2797: CALL_OW 69
2801: PUSH
2802: LD_INT 0
2804: GREATER
2805: IFFALSE 2951
// begin filter := FilterAllUnits ( [ [ [ f_side , 2 ] , [ f_not , [ f_weapon , ar_control_tower ] ] , [ f_not , [ f_hastask ] ] ] ] ) ;
2807: LD_ADDR_VAR 0 4
2811: PUSH
2812: LD_INT 22
2814: PUSH
2815: LD_INT 2
2817: PUSH
2818: EMPTY
2819: LIST
2820: LIST
2821: PUSH
2822: LD_INT 3
2824: PUSH
2825: LD_INT 34
2827: PUSH
2828: LD_INT 31
2830: PUSH
2831: EMPTY
2832: LIST
2833: LIST
2834: PUSH
2835: EMPTY
2836: LIST
2837: LIST
2838: PUSH
2839: LD_INT 3
2841: PUSH
2842: LD_INT 60
2844: PUSH
2845: EMPTY
2846: LIST
2847: PUSH
2848: EMPTY
2849: LIST
2850: LIST
2851: PUSH
2852: EMPTY
2853: LIST
2854: LIST
2855: LIST
2856: PUSH
2857: EMPTY
2858: LIST
2859: PPUSH
2860: CALL_OW 69
2864: ST_TO_ADDR
// x := SpeedFilter ( FilterAllUnits ( [ f_enemy , 2 ] ) , 20 ) ;
2865: LD_ADDR_VAR 0 3
2869: PUSH
2870: LD_INT 81
2872: PUSH
2873: LD_INT 2
2875: PUSH
2876: EMPTY
2877: LIST
2878: LIST
2879: PPUSH
2880: CALL_OW 69
2884: PPUSH
2885: LD_INT 20
2887: PPUSH
2888: CALL 8522 0 2
2892: ST_TO_ADDR
// for i = 1 to filter do
2893: LD_ADDR_VAR 0 1
2897: PUSH
2898: DOUBLE
2899: LD_INT 1
2901: DEC
2902: ST_TO_ADDR
2903: LD_VAR 0 4
2907: PUSH
2908: FOR_TO
2909: IFFALSE 2949
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( x , filter [ i ] ) ) ;
2911: LD_VAR 0 4
2915: PUSH
2916: LD_VAR 0 1
2920: ARRAY
2921: PPUSH
2922: LD_VAR 0 3
2926: PPUSH
2927: LD_VAR 0 4
2931: PUSH
2932: LD_VAR 0 1
2936: ARRAY
2937: PPUSH
2938: CALL_OW 74
2942: PPUSH
2943: CALL_OW 115
2947: GO 2908
2949: POP
2950: POP
// end ; if FilterAllUnits ( [ [ [ f_side , 3 ] , [ f_not , [ f_hastask ] ] ] ] ) > 0 then
2951: LD_INT 22
2953: PUSH
2954: LD_INT 3
2956: PUSH
2957: EMPTY
2958: LIST
2959: LIST
2960: PUSH
2961: LD_INT 3
2963: PUSH
2964: LD_INT 60
2966: PUSH
2967: EMPTY
2968: LIST
2969: PUSH
2970: EMPTY
2971: LIST
2972: LIST
2973: PUSH
2974: EMPTY
2975: LIST
2976: LIST
2977: PUSH
2978: EMPTY
2979: LIST
2980: PPUSH
2981: CALL_OW 69
2985: PUSH
2986: LD_INT 0
2988: GREATER
2989: IFFALSE 3135
// begin filter := FilterAllUnits ( [ [ [ f_side , 3 ] , [ f_not , [ f_weapon , ar_control_tower ] ] , [ f_not , [ f_hastask ] ] ] ] ) ;
2991: LD_ADDR_VAR 0 4
2995: PUSH
2996: LD_INT 22
2998: PUSH
2999: LD_INT 3
3001: PUSH
3002: EMPTY
3003: LIST
3004: LIST
3005: PUSH
3006: LD_INT 3
3008: PUSH
3009: LD_INT 34
3011: PUSH
3012: LD_INT 31
3014: PUSH
3015: EMPTY
3016: LIST
3017: LIST
3018: PUSH
3019: EMPTY
3020: LIST
3021: LIST
3022: PUSH
3023: LD_INT 3
3025: PUSH
3026: LD_INT 60
3028: PUSH
3029: EMPTY
3030: LIST
3031: PUSH
3032: EMPTY
3033: LIST
3034: LIST
3035: PUSH
3036: EMPTY
3037: LIST
3038: LIST
3039: LIST
3040: PUSH
3041: EMPTY
3042: LIST
3043: PPUSH
3044: CALL_OW 69
3048: ST_TO_ADDR
// x := SpeedFilter ( FilterAllUnits ( [ f_enemy , 3 ] ) , 20 ) ;
3049: LD_ADDR_VAR 0 3
3053: PUSH
3054: LD_INT 81
3056: PUSH
3057: LD_INT 3
3059: PUSH
3060: EMPTY
3061: LIST
3062: LIST
3063: PPUSH
3064: CALL_OW 69
3068: PPUSH
3069: LD_INT 20
3071: PPUSH
3072: CALL 8522 0 2
3076: ST_TO_ADDR
// for i = 1 to filter do
3077: LD_ADDR_VAR 0 1
3081: PUSH
3082: DOUBLE
3083: LD_INT 1
3085: DEC
3086: ST_TO_ADDR
3087: LD_VAR 0 4
3091: PUSH
3092: FOR_TO
3093: IFFALSE 3133
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( x , filter [ i ] ) ) ;
3095: LD_VAR 0 4
3099: PUSH
3100: LD_VAR 0 1
3104: ARRAY
3105: PPUSH
3106: LD_VAR 0 3
3110: PPUSH
3111: LD_VAR 0 4
3115: PUSH
3116: LD_VAR 0 1
3120: ARRAY
3121: PPUSH
3122: CALL_OW 74
3126: PPUSH
3127: CALL_OW 115
3131: GO 3092
3133: POP
3134: POP
// end ; if FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] ] ] ) > 0 then
3135: LD_INT 22
3137: PUSH
3138: LD_INT 1
3140: PUSH
3141: EMPTY
3142: LIST
3143: LIST
3144: PUSH
3145: LD_INT 3
3147: PUSH
3148: LD_INT 60
3150: PUSH
3151: EMPTY
3152: LIST
3153: PUSH
3154: EMPTY
3155: LIST
3156: LIST
3157: PUSH
3158: EMPTY
3159: LIST
3160: LIST
3161: PUSH
3162: EMPTY
3163: LIST
3164: PPUSH
3165: CALL_OW 69
3169: PUSH
3170: LD_INT 0
3172: GREATER
3173: IFFALSE 3319
// begin filter := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_not , [ f_weapon , ar_control_tower ] ] , [ f_not , [ f_hastask ] ] ] ] ) ;
3175: LD_ADDR_VAR 0 4
3179: PUSH
3180: LD_INT 22
3182: PUSH
3183: LD_INT 1
3185: PUSH
3186: EMPTY
3187: LIST
3188: LIST
3189: PUSH
3190: LD_INT 3
3192: PUSH
3193: LD_INT 34
3195: PUSH
3196: LD_INT 31
3198: PUSH
3199: EMPTY
3200: LIST
3201: LIST
3202: PUSH
3203: EMPTY
3204: LIST
3205: LIST
3206: PUSH
3207: LD_INT 3
3209: PUSH
3210: LD_INT 60
3212: PUSH
3213: EMPTY
3214: LIST
3215: PUSH
3216: EMPTY
3217: LIST
3218: LIST
3219: PUSH
3220: EMPTY
3221: LIST
3222: LIST
3223: LIST
3224: PUSH
3225: EMPTY
3226: LIST
3227: PPUSH
3228: CALL_OW 69
3232: ST_TO_ADDR
// x := SpeedFilter ( FilterAllUnits ( [ f_enemy , 1 ] ) , 20 ) ;
3233: LD_ADDR_VAR 0 3
3237: PUSH
3238: LD_INT 81
3240: PUSH
3241: LD_INT 1
3243: PUSH
3244: EMPTY
3245: LIST
3246: LIST
3247: PPUSH
3248: CALL_OW 69
3252: PPUSH
3253: LD_INT 20
3255: PPUSH
3256: CALL 8522 0 2
3260: ST_TO_ADDR
// for i = 1 to filter do
3261: LD_ADDR_VAR 0 1
3265: PUSH
3266: DOUBLE
3267: LD_INT 1
3269: DEC
3270: ST_TO_ADDR
3271: LD_VAR 0 4
3275: PUSH
3276: FOR_TO
3277: IFFALSE 3317
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( x , filter [ i ] ) ) ;
3279: LD_VAR 0 4
3283: PUSH
3284: LD_VAR 0 1
3288: ARRAY
3289: PPUSH
3290: LD_VAR 0 3
3294: PPUSH
3295: LD_VAR 0 4
3299: PUSH
3300: LD_VAR 0 1
3304: ARRAY
3305: PPUSH
3306: CALL_OW 74
3310: PPUSH
3311: CALL_OW 115
3315: GO 3276
3317: POP
3318: POP
// end ; if FilterAllUnits ( [ [ [ f_side , 2 ] , [ f_weapon , ar_bio_bomb ] , [ f_not , [ f_lives , 700 ] ] ] ] ) > 0 then
3319: LD_INT 22
3321: PUSH
3322: LD_INT 2
3324: PUSH
3325: EMPTY
3326: LIST
3327: LIST
3328: PUSH
3329: LD_INT 34
3331: PUSH
3332: LD_INT 91
3334: PUSH
3335: EMPTY
3336: LIST
3337: LIST
3338: PUSH
3339: LD_INT 3
3341: PUSH
3342: LD_INT 24
3344: PUSH
3345: LD_INT 700
3347: PUSH
3348: EMPTY
3349: LIST
3350: LIST
3351: PUSH
3352: EMPTY
3353: LIST
3354: LIST
3355: PUSH
3356: EMPTY
3357: LIST
3358: LIST
3359: LIST
3360: PUSH
3361: EMPTY
3362: LIST
3363: PPUSH
3364: CALL_OW 69
3368: PUSH
3369: LD_INT 0
3371: GREATER
3372: IFFALSE 3469
// begin filter := FilterAllUnits ( [ [ [ f_side , 2 ] , [ f_weapon , ar_bio_bomb ] , [ f_not , [ f_lives , 700 ] ] ] ] ) ;
3374: LD_ADDR_VAR 0 4
3378: PUSH
3379: LD_INT 22
3381: PUSH
3382: LD_INT 2
3384: PUSH
3385: EMPTY
3386: LIST
3387: LIST
3388: PUSH
3389: LD_INT 34
3391: PUSH
3392: LD_INT 91
3394: PUSH
3395: EMPTY
3396: LIST
3397: LIST
3398: PUSH
3399: LD_INT 3
3401: PUSH
3402: LD_INT 24
3404: PUSH
3405: LD_INT 700
3407: PUSH
3408: EMPTY
3409: LIST
3410: LIST
3411: PUSH
3412: EMPTY
3413: LIST
3414: LIST
3415: PUSH
3416: EMPTY
3417: LIST
3418: LIST
3419: LIST
3420: PUSH
3421: EMPTY
3422: LIST
3423: PPUSH
3424: CALL_OW 69
3428: ST_TO_ADDR
// for i = 1 to filter do
3429: LD_ADDR_VAR 0 1
3433: PUSH
3434: DOUBLE
3435: LD_INT 1
3437: DEC
3438: ST_TO_ADDR
3439: LD_VAR 0 4
3443: PUSH
3444: FOR_TO
3445: IFFALSE 3467
// SetLives ( filter [ i ] , 1 ) ;
3447: LD_VAR 0 4
3451: PUSH
3452: LD_VAR 0 1
3456: ARRAY
3457: PPUSH
3458: LD_INT 1
3460: PPUSH
3461: CALL_OW 234
3465: GO 3444
3467: POP
3468: POP
// end ; end ; end_of_file
3469: PPOPN 4
3471: END
// export function Start_Mission ; begin
3472: LD_INT 0
3474: PPUSH
// PrepareLegion ;
3475: CALL 3516 0 0
// PrepareMeeting ;
3479: CALL 4133 0 0
// case Query ( DS-text-beg ) of 1 :
3483: LD_STRING DS-text-beg
3485: PPUSH
3486: CALL_OW 97
3490: PUSH
3491: LD_INT 1
3493: DOUBLE
3494: EQUAL
3495: IFTRUE 3499
3497: GO 3502
3499: POP
// ; end ;
3500: GO 3503
3502: POP
// game_on := true ;
3503: LD_ADDR_EXP 1
3507: PUSH
3508: LD_INT 1
3510: ST_TO_ADDR
// end ;
3511: LD_VAR 0 1
3515: RET
// export l_cmndr , l_skill , l_units ; function PrepareLegion ; var i , p , filter , team ; begin
3516: LD_INT 0
3518: PPUSH
3519: PPUSH
3520: PPUSH
3521: PPUSH
3522: PPUSH
// uc_side := 8 ;
3523: LD_ADDR_OWVAR 20
3527: PUSH
3528: LD_INT 8
3530: ST_TO_ADDR
// uc_nation := 2 ;
3531: LD_ADDR_OWVAR 21
3535: PUSH
3536: LD_INT 2
3538: ST_TO_ADDR
// l_skill := [ 9 , 8 , 7 ] [ difficulty ] ;
3539: LD_ADDR_EXP 50
3543: PUSH
3544: LD_INT 9
3546: PUSH
3547: LD_INT 8
3549: PUSH
3550: LD_INT 7
3552: PUSH
3553: EMPTY
3554: LIST
3555: LIST
3556: LIST
3557: PUSH
3558: LD_OWVAR 67
3562: ARRAY
3563: ST_TO_ADDR
// l_units := [ 9 , 8 , 8 ] [ difficulty ] ;
3564: LD_ADDR_EXP 51
3568: PUSH
3569: LD_INT 9
3571: PUSH
3572: LD_INT 8
3574: PUSH
3575: LD_INT 8
3577: PUSH
3578: EMPTY
3579: LIST
3580: LIST
3581: LIST
3582: PUSH
3583: LD_OWVAR 67
3587: ARRAY
3588: ST_TO_ADDR
// filter := [ ] ;
3589: LD_ADDR_VAR 0 4
3593: PUSH
3594: EMPTY
3595: ST_TO_ADDR
// hc_gallery := desert ;
3596: LD_ADDR_OWVAR 33
3600: PUSH
3601: LD_STRING desert
3603: ST_TO_ADDR
// hc_face_number := 1 ;
3604: LD_ADDR_OWVAR 34
3608: PUSH
3609: LD_INT 1
3611: ST_TO_ADDR
// hc_skills := [ l_skill + 2 , l_skill - 1 , l_skill , l_skill + 1 ] ;
3612: LD_ADDR_OWVAR 31
3616: PUSH
3617: LD_EXP 50
3621: PUSH
3622: LD_INT 2
3624: PLUS
3625: PUSH
3626: LD_EXP 50
3630: PUSH
3631: LD_INT 1
3633: MINUS
3634: PUSH
3635: LD_EXP 50
3639: PUSH
3640: LD_EXP 50
3644: PUSH
3645: LD_INT 1
3647: PLUS
3648: PUSH
3649: EMPTY
3650: LIST
3651: LIST
3652: LIST
3653: LIST
3654: ST_TO_ADDR
// hc_sex := sex_male ;
3655: LD_ADDR_OWVAR 27
3659: PUSH
3660: LD_INT 1
3662: ST_TO_ADDR
// hc_name := Henri Ruotz ;
3663: LD_ADDR_OWVAR 26
3667: PUSH
3668: LD_STRING Henri Ruotz
3670: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
3671: LD_ADDR_OWVAR 29
3675: PUSH
3676: LD_INT 10
3678: PUSH
3679: LD_INT 10
3681: PUSH
3682: EMPTY
3683: LIST
3684: LIST
3685: ST_TO_ADDR
// hc_class := 1 ;
3686: LD_ADDR_OWVAR 28
3690: PUSH
3691: LD_INT 1
3693: ST_TO_ADDR
// hc_importance := 100 ;
3694: LD_ADDR_OWVAR 32
3698: PUSH
3699: LD_INT 100
3701: ST_TO_ADDR
// l_cmndr := CreateHuman ;
3702: LD_ADDR_EXP 49
3706: PUSH
3707: CALL_OW 44
3711: ST_TO_ADDR
// hc_importance := 0 ;
3712: LD_ADDR_OWVAR 32
3716: PUSH
3717: LD_INT 0
3719: ST_TO_ADDR
// scout := PrepareHuman ( sex_male , 1 , 0 ) ;
3720: LD_ADDR_EXP 12
3724: PUSH
3725: LD_INT 1
3727: PPUSH
3728: LD_INT 1
3730: PPUSH
3731: LD_INT 0
3733: PPUSH
3734: CALL_OW 380
3738: ST_TO_ADDR
// for i = 1 to 4 do
3739: LD_ADDR_VAR 0 2
3743: PUSH
3744: DOUBLE
3745: LD_INT 1
3747: DEC
3748: ST_TO_ADDR
3749: LD_INT 4
3751: PUSH
3752: FOR_TO
3753: IFFALSE 3803
// for p = 1 to 6 do
3755: LD_ADDR_VAR 0 3
3759: PUSH
3760: DOUBLE
3761: LD_INT 1
3763: DEC
3764: ST_TO_ADDR
3765: LD_INT 6
3767: PUSH
3768: FOR_TO
3769: IFFALSE 3799
// filter := filter ^ CreateHumanWithClass ( i , l_skill ) ;
3771: LD_ADDR_VAR 0 4
3775: PUSH
3776: LD_VAR 0 4
3780: PUSH
3781: LD_VAR 0 2
3785: PPUSH
3786: LD_EXP 50
3790: PPUSH
3791: CALL 7323 0 2
3795: ADD
3796: ST_TO_ADDR
3797: GO 3768
3799: POP
3800: POP
3801: GO 3752
3803: POP
3804: POP
// team := CharacterSelection ( text , l_units , l_units , [ sel_change_class , l_cmndr , sel_changeable , sel_not_hired ] ^ filter , [ class_soldier , class_mechanic , class_engineer , class_scientistic , class_mortar ] ) ;
3805: LD_ADDR_VAR 0 5
3809: PUSH
3810: LD_STRING text
3812: PPUSH
3813: LD_EXP 51
3817: PPUSH
3818: LD_EXP 51
3822: PPUSH
3823: LD_INT -5
3825: PUSH
3826: LD_EXP 49
3830: PUSH
3831: LD_INT -3
3833: PUSH
3834: LD_INT -2
3836: PUSH
3837: EMPTY
3838: LIST
3839: LIST
3840: LIST
3841: LIST
3842: PUSH
3843: LD_VAR 0 4
3847: ADD
3848: PPUSH
3849: LD_INT 1
3851: PUSH
3852: LD_INT 3
3854: PUSH
3855: LD_INT 2
3857: PUSH
3858: LD_INT 4
3860: PUSH
3861: LD_INT 8
3863: PUSH
3864: EMPTY
3865: LIST
3866: LIST
3867: LIST
3868: LIST
3869: LIST
3870: PPUSH
3871: CALL_OW 42
3875: ST_TO_ADDR
// for i = 1 to l_units do
3876: LD_ADDR_VAR 0 2
3880: PUSH
3881: DOUBLE
3882: LD_INT 1
3884: DEC
3885: ST_TO_ADDR
3886: LD_EXP 51
3890: PUSH
3891: FOR_TO
3892: IFFALSE 3917
// PlaceUnitArea ( team [ i ] , legion_spawn , false ) ;
3894: LD_VAR 0 5
3898: PUSH
3899: LD_VAR 0 2
3903: ARRAY
3904: PPUSH
3905: LD_INT 1
3907: PPUSH
3908: LD_INT 0
3910: PPUSH
3911: CALL_OW 49
3915: GO 3891
3917: POP
3918: POP
// PlaceUnitArea ( l_cmndr , legion_spawn , false ) ;
3919: LD_EXP 49
3923: PPUSH
3924: LD_INT 1
3926: PPUSH
3927: LD_INT 0
3929: PPUSH
3930: CALL_OW 49
// end ;
3934: LD_VAR 0 1
3938: RET
// export function PlaceCamera ; begin
3939: LD_INT 0
3941: PPUSH
// PlaceSeeing ( 46 , 48 , 8 , 10 ) ;
3942: LD_INT 46
3944: PPUSH
3945: LD_INT 48
3947: PPUSH
3948: LD_INT 8
3950: PPUSH
3951: LD_INT 10
3953: PPUSH
3954: CALL_OW 330
// PlaceSeeing ( 58 , 66 , 8 , 10 ) ;
3958: LD_INT 58
3960: PPUSH
3961: LD_INT 66
3963: PPUSH
3964: LD_INT 8
3966: PPUSH
3967: LD_INT 10
3969: PPUSH
3970: CALL_OW 330
// PlaceSeeing ( 82 , 82 , 8 , 10 ) ;
3974: LD_INT 82
3976: PPUSH
3977: LD_INT 82
3979: PPUSH
3980: LD_INT 8
3982: PPUSH
3983: LD_INT 10
3985: PPUSH
3986: CALL_OW 330
// PlaceSeeing ( 107 , 79 , 8 , 10 ) ;
3990: LD_INT 107
3992: PPUSH
3993: LD_INT 79
3995: PPUSH
3996: LD_INT 8
3998: PPUSH
3999: LD_INT 10
4001: PPUSH
4002: CALL_OW 330
// PlaceSeeing ( 101 , 57 , 8 , 10 ) ;
4006: LD_INT 101
4008: PPUSH
4009: LD_INT 57
4011: PPUSH
4012: LD_INT 8
4014: PPUSH
4015: LD_INT 10
4017: PPUSH
4018: CALL_OW 330
// PlaceSeeing ( 85 , 32 , 8 , 10 ) ;
4022: LD_INT 85
4024: PPUSH
4025: LD_INT 32
4027: PPUSH
4028: LD_INT 8
4030: PPUSH
4031: LD_INT 10
4033: PPUSH
4034: CALL_OW 330
// PlaceSeeing ( 108 , 72 , 8 , 10 ) ;
4038: LD_INT 108
4040: PPUSH
4041: LD_INT 72
4043: PPUSH
4044: LD_INT 8
4046: PPUSH
4047: LD_INT 10
4049: PPUSH
4050: CALL_OW 330
// PlaceSeeing ( 124 , 74 , 8 , 10 ) ;
4054: LD_INT 124
4056: PPUSH
4057: LD_INT 74
4059: PPUSH
4060: LD_INT 8
4062: PPUSH
4063: LD_INT 10
4065: PPUSH
4066: CALL_OW 330
// PlaceSeeing ( 67 , 33 , 8 , 20 ) ;
4070: LD_INT 67
4072: PPUSH
4073: LD_INT 33
4075: PPUSH
4076: LD_INT 8
4078: PPUSH
4079: LD_INT 20
4081: PPUSH
4082: CALL_OW 330
// RemoveSeeing ( 67 , 33 , 8 ) ;
4086: LD_INT 67
4088: PPUSH
4089: LD_INT 33
4091: PPUSH
4092: LD_INT 8
4094: PPUSH
4095: CALL_OW 331
// PlaceSeeing ( 94 , 84 , 8 , 20 ) ;
4099: LD_INT 94
4101: PPUSH
4102: LD_INT 84
4104: PPUSH
4105: LD_INT 8
4107: PPUSH
4108: LD_INT 20
4110: PPUSH
4111: CALL_OW 330
// RemoveSeeing ( 94 , 84 , 8 ) ;
4115: LD_INT 94
4117: PPUSH
4118: LD_INT 84
4120: PPUSH
4121: LD_INT 8
4123: PPUSH
4124: CALL_OW 331
// end ;
4128: LD_VAR 0 1
4132: RET
// export function PrepareMeeting ; begin
4133: LD_INT 0
4135: PPUSH
// uc_side := 6 ;
4136: LD_ADDR_OWVAR 20
4140: PUSH
4141: LD_INT 6
4143: ST_TO_ADDR
// hc_gallery := desert ;
4144: LD_ADDR_OWVAR 33
4148: PUSH
4149: LD_STRING desert
4151: ST_TO_ADDR
// hc_face_number := 2 ;
4152: LD_ADDR_OWVAR 34
4156: PUSH
4157: LD_INT 2
4159: ST_TO_ADDR
// hc_name := Leopold Drass ;
4160: LD_ADDR_OWVAR 26
4164: PUSH
4165: LD_STRING Leopold Drass
4167: ST_TO_ADDR
// hc_class := 1 ;
4168: LD_ADDR_OWVAR 28
4172: PUSH
4173: LD_INT 1
4175: ST_TO_ADDR
// hc_sex := sex_male ;
4176: LD_ADDR_OWVAR 27
4180: PUSH
4181: LD_INT 1
4183: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
4184: LD_ADDR_OWVAR 29
4188: PUSH
4189: LD_INT 12
4191: PUSH
4192: LD_INT 12
4194: PUSH
4195: EMPTY
4196: LIST
4197: LIST
4198: ST_TO_ADDR
// Leopold := CreateHuman ;
4199: LD_ADDR_EXP 7
4203: PUSH
4204: CALL_OW 44
4208: ST_TO_ADDR
// PlaceUnitArea ( Leopold , north_spawn , false ) ;
4209: LD_EXP 7
4213: PPUSH
4214: LD_INT 3
4216: PPUSH
4217: LD_INT 0
4219: PPUSH
4220: CALL_OW 49
// end ; end_of_file
4224: LD_VAR 0 1
4228: RET
// on SailEvent ( num ) do var i , filter , un , p , area ;
4229: LD_INT 0
4231: PPUSH
4232: PPUSH
4233: PPUSH
4234: PPUSH
4235: PPUSH
// begin case num of 1 :
4236: LD_VAR 0 1
4240: PUSH
4241: LD_INT 1
4243: DOUBLE
4244: EQUAL
4245: IFTRUE 4249
4247: GO 4281
4249: POP
// begin ComMoveXY ( leopold , GetX ( l_cmndr ) , GetY ( l_cmndr ) ) ;
4250: LD_EXP 7
4254: PPUSH
4255: LD_EXP 49
4259: PPUSH
4260: CALL_OW 250
4264: PPUSH
4265: LD_EXP 49
4269: PPUSH
4270: CALL_OW 251
4274: PPUSH
4275: CALL_OW 111
// end ; 2 :
4279: GO 6699
4281: LD_INT 2
4283: DOUBLE
4284: EQUAL
4285: IFTRUE 4289
4287: GO 4398
4289: POP
// begin InGameOn ;
4290: CALL_OW 8
// meeting_start := true ;
4294: LD_ADDR_EXP 26
4298: PUSH
4299: LD_INT 1
4301: ST_TO_ADDR
// ComTurnUnit ( leopold , l_cmndr ) ;
4302: LD_EXP 7
4306: PPUSH
4307: LD_EXP 49
4311: PPUSH
4312: CALL_OW 119
// ComTurnUnit ( l_cmndr , leopold ) ;
4316: LD_EXP 49
4320: PPUSH
4321: LD_EXP 7
4325: PPUSH
4326: CALL_OW 119
// Say ( leopold , DS-DL-1 ) ;
4330: LD_EXP 7
4334: PPUSH
4335: LD_STRING DS-DL-1
4337: PPUSH
4338: CALL_OW 88
// Say ( l_cmndr , DS-DC-1 ) ;
4342: LD_EXP 49
4346: PPUSH
4347: LD_STRING DS-DC-1
4349: PPUSH
4350: CALL_OW 88
// Say ( leopold , DS-DL-2 ) ;
4354: LD_EXP 7
4358: PPUSH
4359: LD_STRING DS-DL-2
4361: PPUSH
4362: CALL_OW 88
// ComEnterUnit ( leopold , fort ) ;
4366: LD_EXP 7
4370: PPUSH
4371: LD_INT 23
4373: PPUSH
4374: CALL_OW 120
// InGameOff ;
4378: CALL_OW 9
// Wait ( 0 0$01 ) ;
4382: LD_INT 35
4384: PPUSH
4385: CALL_OW 67
// ChangeMissionObjectives ( DS-T1 ) ;
4389: LD_STRING DS-T1
4391: PPUSH
4392: CALL_OW 337
// end ; 10 :
4396: GO 6699
4398: LD_INT 10
4400: DOUBLE
4401: EQUAL
4402: IFTRUE 4406
4404: GO 4618
4406: POP
// begin uc_side := 6 ;
4407: LD_ADDR_OWVAR 20
4411: PUSH
4412: LD_INT 6
4414: ST_TO_ADDR
// uc_nation := 2 ;
4415: LD_ADDR_OWVAR 21
4419: PUSH
4420: LD_INT 2
4422: ST_TO_ADDR
// hc_gallery :=  ;
4423: LD_ADDR_OWVAR 33
4427: PUSH
4428: LD_STRING 
4430: ST_TO_ADDR
// hc_skills := [ skill + 2 , skill - 1 , skill , skill + 1 ] ;
4431: LD_ADDR_OWVAR 31
4435: PUSH
4436: LD_EXP 16
4440: PUSH
4441: LD_INT 2
4443: PLUS
4444: PUSH
4445: LD_EXP 16
4449: PUSH
4450: LD_INT 1
4452: MINUS
4453: PUSH
4454: LD_EXP 16
4458: PUSH
4459: LD_EXP 16
4463: PUSH
4464: LD_INT 1
4466: PLUS
4467: PUSH
4468: EMPTY
4469: LIST
4470: LIST
4471: LIST
4472: LIST
4473: ST_TO_ADDR
// hc_sex := sex_male ;
4474: LD_ADDR_OWVAR 27
4478: PUSH
4479: LD_INT 1
4481: ST_TO_ADDR
// hc_name := Samuel van Horn ;
4482: LD_ADDR_OWVAR 26
4486: PUSH
4487: LD_STRING Samuel van Horn
4489: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
4490: LD_ADDR_OWVAR 29
4494: PUSH
4495: LD_INT 11
4497: PUSH
4498: LD_INT 10
4500: PUSH
4501: EMPTY
4502: LIST
4503: LIST
4504: ST_TO_ADDR
// hc_class := 1 ;
4505: LD_ADDR_OWVAR 28
4509: PUSH
4510: LD_INT 1
4512: ST_TO_ADDR
// samuel := CreateHuman ;
4513: LD_ADDR_EXP 9
4517: PUSH
4518: CALL_OW 44
4522: ST_TO_ADDR
// PlaceUnitArea ( samuel , south_spawn , false ) ;
4523: LD_EXP 9
4527: PPUSH
4528: LD_INT 4
4530: PPUSH
4531: LD_INT 0
4533: PPUSH
4534: CALL_OW 49
// for i = 1 to 3 do
4538: LD_ADDR_VAR 0 2
4542: PUSH
4543: DOUBLE
4544: LD_INT 1
4546: DEC
4547: ST_TO_ADDR
4548: LD_INT 3
4550: PUSH
4551: FOR_TO
4552: IFFALSE 4579
// PlaceUnitArea ( CreateHumanWithClass ( class_mortar , skill ) , south_spawn , false ) ;
4554: LD_INT 8
4556: PPUSH
4557: LD_EXP 16
4561: PPUSH
4562: CALL 7323 0 2
4566: PPUSH
4567: LD_INT 4
4569: PPUSH
4570: LD_INT 0
4572: PPUSH
4573: CALL_OW 49
4577: GO 4551
4579: POP
4580: POP
// ComEnterUnit ( FilterAllUnits ( [ f_side , 6 ] ) diff [ leopold , fort ] , fort ) ;
4581: LD_INT 22
4583: PUSH
4584: LD_INT 6
4586: PUSH
4587: EMPTY
4588: LIST
4589: LIST
4590: PPUSH
4591: CALL_OW 69
4595: PUSH
4596: LD_EXP 7
4600: PUSH
4601: LD_INT 23
4603: PUSH
4604: EMPTY
4605: LIST
4606: LIST
4607: DIFF
4608: PPUSH
4609: LD_INT 23
4611: PPUSH
4612: CALL_OW 120
// end ; 3 :
4616: GO 6699
4618: LD_INT 3
4620: DOUBLE
4621: EQUAL
4622: IFTRUE 4626
4624: GO 4637
4626: POP
// begin arabian_attack := true ;
4627: LD_ADDR_EXP 38
4631: PUSH
4632: LD_INT 1
4634: ST_TO_ADDR
// end ; 4 :
4635: GO 6699
4637: LD_INT 4
4639: DOUBLE
4640: EQUAL
4641: IFTRUE 4645
4643: GO 4656
4645: POP
// begin american_attack := true ;
4646: LD_ADDR_EXP 40
4650: PUSH
4651: LD_INT 1
4653: ST_TO_ADDR
// end ; 5 :
4654: GO 6699
4656: LD_INT 5
4658: DOUBLE
4659: EQUAL
4660: IFTRUE 4664
4662: GO 4675
4664: POP
// begin russian_attack := true ;
4665: LD_ADDR_EXP 39
4669: PUSH
4670: LD_INT 1
4672: ST_TO_ADDR
// end ; 31 :
4673: GO 6699
4675: LD_INT 31
4677: DOUBLE
4678: EQUAL
4679: IFTRUE 4683
4681: GO 4958
4683: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
4684: LD_ADDR_VAR 0 6
4688: PUSH
4689: LD_EXP 15
4693: PUSH
4694: LD_INT 1
4696: PPUSH
4697: LD_EXP 15
4701: PPUSH
4702: CALL_OW 12
4706: ARRAY
4707: ST_TO_ADDR
// uc_side := 2 ;
4708: LD_ADDR_OWVAR 20
4712: PUSH
4713: LD_INT 2
4715: ST_TO_ADDR
// uc_nation := 2 ;
4716: LD_ADDR_OWVAR 21
4720: PUSH
4721: LD_INT 2
4723: ST_TO_ADDR
// for i = 1 to arabian_force do
4724: LD_ADDR_VAR 0 2
4728: PUSH
4729: DOUBLE
4730: LD_INT 1
4732: DEC
4733: ST_TO_ADDR
4734: LD_EXP 20
4738: PUSH
4739: FOR_TO
4740: IFFALSE 4819
// begin vc_chassis := ar_half_tracked ;
4742: LD_ADDR_OWVAR 37
4746: PUSH
4747: LD_INT 14
4749: ST_TO_ADDR
// vc_engine := engine_siberite ;
4750: LD_ADDR_OWVAR 39
4754: PUSH
4755: LD_INT 3
4757: ST_TO_ADDR
// vc_control := control_remote ;
4758: LD_ADDR_OWVAR 38
4762: PUSH
4763: LD_INT 2
4765: ST_TO_ADDR
// vc_weapon := ar_weapons [ Rand ( 1 , ar_weapons ) ] ;
4766: LD_ADDR_OWVAR 40
4770: PUSH
4771: LD_EXP 17
4775: PUSH
4776: LD_INT 1
4778: PPUSH
4779: LD_EXP 17
4783: PPUSH
4784: CALL_OW 12
4788: ARRAY
4789: ST_TO_ADDR
// un := CreateVehicle ;
4790: LD_ADDR_VAR 0 4
4794: PUSH
4795: CALL_OW 45
4799: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
4800: LD_VAR 0 4
4804: PPUSH
4805: LD_VAR 0 6
4809: PPUSH
4810: LD_INT 0
4812: PPUSH
4813: CALL_OW 49
// end ;
4817: GO 4739
4819: POP
4820: POP
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_manual ] ] ) < 2 then
4821: LD_INT 22
4823: PUSH
4824: LD_INT 2
4826: PUSH
4827: EMPTY
4828: LIST
4829: LIST
4830: PUSH
4831: LD_INT 33
4833: PUSH
4834: LD_INT 1
4836: PUSH
4837: EMPTY
4838: LIST
4839: LIST
4840: PUSH
4841: EMPTY
4842: LIST
4843: LIST
4844: PPUSH
4845: CALL_OW 69
4849: PUSH
4850: LD_INT 2
4852: LESS
4853: IFFALSE 4956
// for i = 1 to 2 do
4855: LD_ADDR_VAR 0 2
4859: PUSH
4860: DOUBLE
4861: LD_INT 1
4863: DEC
4864: ST_TO_ADDR
4865: LD_INT 2
4867: PUSH
4868: FOR_TO
4869: IFFALSE 4954
// begin vc_chassis := ar_half_tracked ;
4871: LD_ADDR_OWVAR 37
4875: PUSH
4876: LD_INT 14
4878: ST_TO_ADDR
// vc_engine := engine_siberite ;
4879: LD_ADDR_OWVAR 39
4883: PUSH
4884: LD_INT 3
4886: ST_TO_ADDR
// vc_control := control_manual ;
4887: LD_ADDR_OWVAR 38
4891: PUSH
4892: LD_INT 1
4894: ST_TO_ADDR
// vc_weapon := ar_control_tower ;
4895: LD_ADDR_OWVAR 40
4899: PUSH
4900: LD_INT 31
4902: ST_TO_ADDR
// un := CreateVehicle ;
4903: LD_ADDR_VAR 0 4
4907: PUSH
4908: CALL_OW 45
4912: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
4913: LD_VAR 0 4
4917: PPUSH
4918: LD_VAR 0 6
4922: PPUSH
4923: LD_INT 0
4925: PPUSH
4926: CALL_OW 49
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , skill ) , un ) ;
4930: LD_INT 3
4932: PPUSH
4933: LD_EXP 16
4937: PPUSH
4938: CALL 7323 0 2
4942: PPUSH
4943: LD_VAR 0 4
4947: PPUSH
4948: CALL_OW 52
// end ;
4952: GO 4868
4954: POP
4955: POP
// end ; 32 :
4956: GO 6699
4958: LD_INT 32
4960: DOUBLE
4961: EQUAL
4962: IFTRUE 4966
4964: GO 5339
4966: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
4967: LD_ADDR_VAR 0 6
4971: PUSH
4972: LD_EXP 15
4976: PUSH
4977: LD_INT 1
4979: PPUSH
4980: LD_EXP 15
4984: PPUSH
4985: CALL_OW 12
4989: ARRAY
4990: ST_TO_ADDR
// uc_side := 2 ;
4991: LD_ADDR_OWVAR 20
4995: PUSH
4996: LD_INT 2
4998: ST_TO_ADDR
// uc_nation := 2 ;
4999: LD_ADDR_OWVAR 21
5003: PUSH
5004: LD_INT 2
5006: ST_TO_ADDR
// for i = 1 to ( arabian_force - 2 ) do
5007: LD_ADDR_VAR 0 2
5011: PUSH
5012: DOUBLE
5013: LD_INT 1
5015: DEC
5016: ST_TO_ADDR
5017: LD_EXP 20
5021: PUSH
5022: LD_INT 2
5024: MINUS
5025: PUSH
5026: FOR_TO
5027: IFFALSE 5110
// begin vc_chassis := ar_half_tracked ;
5029: LD_ADDR_OWVAR 37
5033: PUSH
5034: LD_INT 14
5036: ST_TO_ADDR
// vc_engine := engine_siberite ;
5037: LD_ADDR_OWVAR 39
5041: PUSH
5042: LD_INT 3
5044: ST_TO_ADDR
// vc_control := control_remote ;
5045: LD_ADDR_OWVAR 38
5049: PUSH
5050: LD_INT 2
5052: ST_TO_ADDR
// vc_weapon := ar_weapons [ Rand ( 1 , ar_weapons - 1 ) ] ;
5053: LD_ADDR_OWVAR 40
5057: PUSH
5058: LD_EXP 17
5062: PUSH
5063: LD_INT 1
5065: PPUSH
5066: LD_EXP 17
5070: PUSH
5071: LD_INT 1
5073: MINUS
5074: PPUSH
5075: CALL_OW 12
5079: ARRAY
5080: ST_TO_ADDR
// un := CreateVehicle ;
5081: LD_ADDR_VAR 0 4
5085: PUSH
5086: CALL_OW 45
5090: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5091: LD_VAR 0 4
5095: PPUSH
5096: LD_VAR 0 6
5100: PPUSH
5101: LD_INT 0
5103: PPUSH
5104: CALL_OW 49
// end ;
5108: GO 5026
5110: POP
5111: POP
// for i = 1 to Rand ( 0 , 1 ) + [ 2 , 3 , 3 ] [ game_difficulty ] do
5112: LD_ADDR_VAR 0 2
5116: PUSH
5117: DOUBLE
5118: LD_INT 1
5120: DEC
5121: ST_TO_ADDR
5122: LD_INT 0
5124: PPUSH
5125: LD_INT 1
5127: PPUSH
5128: CALL_OW 12
5132: PUSH
5133: LD_INT 2
5135: PUSH
5136: LD_INT 3
5138: PUSH
5139: LD_INT 3
5141: PUSH
5142: EMPTY
5143: LIST
5144: LIST
5145: LIST
5146: PUSH
5147: LD_EXP 2
5151: ARRAY
5152: PLUS
5153: PUSH
5154: FOR_TO
5155: IFFALSE 5192
// begin uc_nation := 0 ;
5157: LD_ADDR_OWVAR 21
5161: PUSH
5162: LD_INT 0
5164: ST_TO_ADDR
// PlaceUnitArea ( CreateHumanWithClass ( 17 , skill ) , area , false ) ;
5165: LD_INT 17
5167: PPUSH
5168: LD_EXP 16
5172: PPUSH
5173: CALL 7323 0 2
5177: PPUSH
5178: LD_VAR 0 6
5182: PPUSH
5183: LD_INT 0
5185: PPUSH
5186: CALL_OW 49
// end ;
5190: GO 5154
5192: POP
5193: POP
// uc_nation := 2 ;
5194: LD_ADDR_OWVAR 21
5198: PUSH
5199: LD_INT 2
5201: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_manual ] ] ) < 2 then
5202: LD_INT 22
5204: PUSH
5205: LD_INT 2
5207: PUSH
5208: EMPTY
5209: LIST
5210: LIST
5211: PUSH
5212: LD_INT 33
5214: PUSH
5215: LD_INT 1
5217: PUSH
5218: EMPTY
5219: LIST
5220: LIST
5221: PUSH
5222: EMPTY
5223: LIST
5224: LIST
5225: PPUSH
5226: CALL_OW 69
5230: PUSH
5231: LD_INT 2
5233: LESS
5234: IFFALSE 5337
// for i = 1 to 2 do
5236: LD_ADDR_VAR 0 2
5240: PUSH
5241: DOUBLE
5242: LD_INT 1
5244: DEC
5245: ST_TO_ADDR
5246: LD_INT 2
5248: PUSH
5249: FOR_TO
5250: IFFALSE 5335
// begin vc_chassis := ar_half_tracked ;
5252: LD_ADDR_OWVAR 37
5256: PUSH
5257: LD_INT 14
5259: ST_TO_ADDR
// vc_engine := engine_siberite ;
5260: LD_ADDR_OWVAR 39
5264: PUSH
5265: LD_INT 3
5267: ST_TO_ADDR
// vc_control := control_manual ;
5268: LD_ADDR_OWVAR 38
5272: PUSH
5273: LD_INT 1
5275: ST_TO_ADDR
// vc_weapon := ar_control_tower ;
5276: LD_ADDR_OWVAR 40
5280: PUSH
5281: LD_INT 31
5283: ST_TO_ADDR
// un := CreateVehicle ;
5284: LD_ADDR_VAR 0 4
5288: PUSH
5289: CALL_OW 45
5293: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5294: LD_VAR 0 4
5298: PPUSH
5299: LD_VAR 0 6
5303: PPUSH
5304: LD_INT 0
5306: PPUSH
5307: CALL_OW 49
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , skill ) , un ) ;
5311: LD_INT 3
5313: PPUSH
5314: LD_EXP 16
5318: PPUSH
5319: CALL 7323 0 2
5323: PPUSH
5324: LD_VAR 0 4
5328: PPUSH
5329: CALL_OW 52
// end ;
5333: GO 5249
5335: POP
5336: POP
// end ; 33 :
5337: GO 6699
5339: LD_INT 33
5341: DOUBLE
5342: EQUAL
5343: IFTRUE 5347
5345: GO 5618
5347: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
5348: LD_ADDR_VAR 0 6
5352: PUSH
5353: LD_EXP 15
5357: PUSH
5358: LD_INT 1
5360: PPUSH
5361: LD_EXP 15
5365: PPUSH
5366: CALL_OW 12
5370: ARRAY
5371: ST_TO_ADDR
// uc_side := 2 ;
5372: LD_ADDR_OWVAR 20
5376: PUSH
5377: LD_INT 2
5379: ST_TO_ADDR
// uc_nation := 2 ;
5380: LD_ADDR_OWVAR 21
5384: PUSH
5385: LD_INT 2
5387: ST_TO_ADDR
// for i = 1 to ( arabian_force / 2 ) do
5388: LD_ADDR_VAR 0 2
5392: PUSH
5393: DOUBLE
5394: LD_INT 1
5396: DEC
5397: ST_TO_ADDR
5398: LD_EXP 20
5402: PUSH
5403: LD_INT 2
5405: DIVREAL
5406: PUSH
5407: FOR_TO
5408: IFFALSE 5513
// begin vc_chassis := ar_half_tracked ;
5410: LD_ADDR_OWVAR 37
5414: PUSH
5415: LD_INT 14
5417: ST_TO_ADDR
// vc_engine := engine_siberite ;
5418: LD_ADDR_OWVAR 39
5422: PUSH
5423: LD_INT 3
5425: ST_TO_ADDR
// vc_control := control_manual ;
5426: LD_ADDR_OWVAR 38
5430: PUSH
5431: LD_INT 1
5433: ST_TO_ADDR
// vc_weapon := ar_weapons [ Rand ( 1 , ar_weapons - 2 ) ] ;
5434: LD_ADDR_OWVAR 40
5438: PUSH
5439: LD_EXP 17
5443: PUSH
5444: LD_INT 1
5446: PPUSH
5447: LD_EXP 17
5451: PUSH
5452: LD_INT 2
5454: MINUS
5455: PPUSH
5456: CALL_OW 12
5460: ARRAY
5461: ST_TO_ADDR
// un := CreateVehicle ;
5462: LD_ADDR_VAR 0 4
5466: PUSH
5467: CALL_OW 45
5471: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5472: LD_VAR 0 4
5476: PPUSH
5477: LD_VAR 0 6
5481: PPUSH
5482: LD_INT 0
5484: PPUSH
5485: CALL_OW 49
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , skill ) , un ) ;
5489: LD_INT 3
5491: PPUSH
5492: LD_EXP 16
5496: PPUSH
5497: CALL 7323 0 2
5501: PPUSH
5502: LD_VAR 0 4
5506: PPUSH
5507: CALL_OW 52
// end ;
5511: GO 5407
5513: POP
5514: POP
// for i = 1 to ( arabian_force / 2 ) do
5515: LD_ADDR_VAR 0 2
5519: PUSH
5520: DOUBLE
5521: LD_INT 1
5523: DEC
5524: ST_TO_ADDR
5525: LD_EXP 20
5529: PUSH
5530: LD_INT 2
5532: DIVREAL
5533: PUSH
5534: FOR_TO
5535: IFFALSE 5614
// begin vc_chassis := ar_half_tracked ;
5537: LD_ADDR_OWVAR 37
5541: PUSH
5542: LD_INT 14
5544: ST_TO_ADDR
// vc_engine := engine_siberite ;
5545: LD_ADDR_OWVAR 39
5549: PUSH
5550: LD_INT 3
5552: ST_TO_ADDR
// vc_control := control_apeman ;
5553: LD_ADDR_OWVAR 38
5557: PUSH
5558: LD_INT 5
5560: ST_TO_ADDR
// vc_weapon := ar_weapons [ Rand ( 2 , ar_weapons ) ] ;
5561: LD_ADDR_OWVAR 40
5565: PUSH
5566: LD_EXP 17
5570: PUSH
5571: LD_INT 2
5573: PPUSH
5574: LD_EXP 17
5578: PPUSH
5579: CALL_OW 12
5583: ARRAY
5584: ST_TO_ADDR
// un := CreateVehicle ;
5585: LD_ADDR_VAR 0 4
5589: PUSH
5590: CALL_OW 45
5594: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5595: LD_VAR 0 4
5599: PPUSH
5600: LD_VAR 0 6
5604: PPUSH
5605: LD_INT 0
5607: PPUSH
5608: CALL_OW 49
// end ;
5612: GO 5534
5614: POP
5615: POP
// end ; 41 :
5616: GO 6699
5618: LD_INT 41
5620: DOUBLE
5621: EQUAL
5622: IFTRUE 5626
5624: GO 5770
5626: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
5627: LD_ADDR_VAR 0 6
5631: PUSH
5632: LD_EXP 15
5636: PUSH
5637: LD_INT 1
5639: PPUSH
5640: LD_EXP 15
5644: PPUSH
5645: CALL_OW 12
5649: ARRAY
5650: ST_TO_ADDR
// uc_side := 1 ;
5651: LD_ADDR_OWVAR 20
5655: PUSH
5656: LD_INT 1
5658: ST_TO_ADDR
// uc_nation := 1 ;
5659: LD_ADDR_OWVAR 21
5663: PUSH
5664: LD_INT 1
5666: ST_TO_ADDR
// for i = 1 to american_force do
5667: LD_ADDR_VAR 0 2
5671: PUSH
5672: DOUBLE
5673: LD_INT 1
5675: DEC
5676: ST_TO_ADDR
5677: LD_EXP 22
5681: PUSH
5682: FOR_TO
5683: IFFALSE 5766
// begin vc_chassis := us_morphling ;
5685: LD_ADDR_OWVAR 37
5689: PUSH
5690: LD_INT 5
5692: ST_TO_ADDR
// vc_engine := engine_siberite ;
5693: LD_ADDR_OWVAR 39
5697: PUSH
5698: LD_INT 3
5700: ST_TO_ADDR
// vc_control := control_computer ;
5701: LD_ADDR_OWVAR 38
5705: PUSH
5706: LD_INT 3
5708: ST_TO_ADDR
// vc_weapon := us_weapons [ Rand ( 1 , us_weapons - 1 ) ] ;
5709: LD_ADDR_OWVAR 40
5713: PUSH
5714: LD_EXP 19
5718: PUSH
5719: LD_INT 1
5721: PPUSH
5722: LD_EXP 19
5726: PUSH
5727: LD_INT 1
5729: MINUS
5730: PPUSH
5731: CALL_OW 12
5735: ARRAY
5736: ST_TO_ADDR
// un := CreateVehicle ;
5737: LD_ADDR_VAR 0 4
5741: PUSH
5742: CALL_OW 45
5746: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5747: LD_VAR 0 4
5751: PPUSH
5752: LD_VAR 0 6
5756: PPUSH
5757: LD_INT 0
5759: PPUSH
5760: CALL_OW 49
// end ;
5764: GO 5682
5766: POP
5767: POP
// end ; 42 :
5768: GO 6699
5770: LD_INT 42
5772: DOUBLE
5773: EQUAL
5774: IFTRUE 5778
5776: GO 5918
5778: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
5779: LD_ADDR_VAR 0 6
5783: PUSH
5784: LD_EXP 15
5788: PUSH
5789: LD_INT 1
5791: PPUSH
5792: LD_EXP 15
5796: PPUSH
5797: CALL_OW 12
5801: ARRAY
5802: ST_TO_ADDR
// uc_side := 1 ;
5803: LD_ADDR_OWVAR 20
5807: PUSH
5808: LD_INT 1
5810: ST_TO_ADDR
// uc_nation := 1 ;
5811: LD_ADDR_OWVAR 21
5815: PUSH
5816: LD_INT 1
5818: ST_TO_ADDR
// for i = 1 to american_force do
5819: LD_ADDR_VAR 0 2
5823: PUSH
5824: DOUBLE
5825: LD_INT 1
5827: DEC
5828: ST_TO_ADDR
5829: LD_EXP 22
5833: PUSH
5834: FOR_TO
5835: IFFALSE 5914
// begin vc_chassis := us_morphling ;
5837: LD_ADDR_OWVAR 37
5841: PUSH
5842: LD_INT 5
5844: ST_TO_ADDR
// vc_engine := engine_siberite ;
5845: LD_ADDR_OWVAR 39
5849: PUSH
5850: LD_INT 3
5852: ST_TO_ADDR
// vc_control := control_computer ;
5853: LD_ADDR_OWVAR 38
5857: PUSH
5858: LD_INT 3
5860: ST_TO_ADDR
// vc_weapon := us_weapons [ Rand ( 1 , us_weapons ) ] ;
5861: LD_ADDR_OWVAR 40
5865: PUSH
5866: LD_EXP 19
5870: PUSH
5871: LD_INT 1
5873: PPUSH
5874: LD_EXP 19
5878: PPUSH
5879: CALL_OW 12
5883: ARRAY
5884: ST_TO_ADDR
// un := CreateVehicle ;
5885: LD_ADDR_VAR 0 4
5889: PUSH
5890: CALL_OW 45
5894: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5895: LD_VAR 0 4
5899: PPUSH
5900: LD_VAR 0 6
5904: PPUSH
5905: LD_INT 0
5907: PPUSH
5908: CALL_OW 49
// end ;
5912: GO 5834
5914: POP
5915: POP
// end ; 51 :
5916: GO 6699
5918: LD_INT 51
5920: DOUBLE
5921: EQUAL
5922: IFTRUE 5926
5924: GO 6066
5926: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
5927: LD_ADDR_VAR 0 6
5931: PUSH
5932: LD_EXP 15
5936: PUSH
5937: LD_INT 1
5939: PPUSH
5940: LD_EXP 15
5944: PPUSH
5945: CALL_OW 12
5949: ARRAY
5950: ST_TO_ADDR
// uc_side := 3 ;
5951: LD_ADDR_OWVAR 20
5955: PUSH
5956: LD_INT 3
5958: ST_TO_ADDR
// uc_nation := 3 ;
5959: LD_ADDR_OWVAR 21
5963: PUSH
5964: LD_INT 3
5966: ST_TO_ADDR
// for i = 1 to russian_force do
5967: LD_ADDR_VAR 0 2
5971: PUSH
5972: DOUBLE
5973: LD_INT 1
5975: DEC
5976: ST_TO_ADDR
5977: LD_EXP 21
5981: PUSH
5982: FOR_TO
5983: IFFALSE 6062
// begin vc_chassis := ru_heavy_tracked ;
5985: LD_ADDR_OWVAR 37
5989: PUSH
5990: LD_INT 24
5992: ST_TO_ADDR
// vc_engine := engine_siberite ;
5993: LD_ADDR_OWVAR 39
5997: PUSH
5998: LD_INT 3
6000: ST_TO_ADDR
// vc_control := control_computer ;
6001: LD_ADDR_OWVAR 38
6005: PUSH
6006: LD_INT 3
6008: ST_TO_ADDR
// vc_weapon := ru_weapons [ Rand ( 1 , ru_weapons ) ] ;
6009: LD_ADDR_OWVAR 40
6013: PUSH
6014: LD_EXP 18
6018: PUSH
6019: LD_INT 1
6021: PPUSH
6022: LD_EXP 18
6026: PPUSH
6027: CALL_OW 12
6031: ARRAY
6032: ST_TO_ADDR
// un := CreateVehicle ;
6033: LD_ADDR_VAR 0 4
6037: PUSH
6038: CALL_OW 45
6042: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
6043: LD_VAR 0 4
6047: PPUSH
6048: LD_VAR 0 6
6052: PPUSH
6053: LD_INT 0
6055: PPUSH
6056: CALL_OW 49
// end ;
6060: GO 5982
6062: POP
6063: POP
// end ; 91 :
6064: GO 6699
6066: LD_INT 91
6068: DOUBLE
6069: EQUAL
6070: IFTRUE 6074
6072: GO 6212
6074: POP
// begin uc_side := 8 ;
6075: LD_ADDR_OWVAR 20
6079: PUSH
6080: LD_INT 8
6082: ST_TO_ADDR
// uc_nation := 1 ;
6083: LD_ADDR_OWVAR 21
6087: PUSH
6088: LD_INT 1
6090: ST_TO_ADDR
// for i = 1 to [ 4 , 3 , 3 ] [ game_difficulty ] do
6091: LD_ADDR_VAR 0 2
6095: PUSH
6096: DOUBLE
6097: LD_INT 1
6099: DEC
6100: ST_TO_ADDR
6101: LD_INT 4
6103: PUSH
6104: LD_INT 3
6106: PUSH
6107: LD_INT 3
6109: PUSH
6110: EMPTY
6111: LIST
6112: LIST
6113: LIST
6114: PUSH
6115: LD_EXP 2
6119: ARRAY
6120: PUSH
6121: FOR_TO
6122: IFFALSE 6208
// begin vc_chassis := us_heavy_tracked ;
6124: LD_ADDR_OWVAR 37
6128: PUSH
6129: LD_INT 4
6131: ST_TO_ADDR
// vc_engine := engine_siberite ;
6132: LD_ADDR_OWVAR 39
6136: PUSH
6137: LD_INT 3
6139: ST_TO_ADDR
// vc_control := control_computer ;
6140: LD_ADDR_OWVAR 38
6144: PUSH
6145: LD_INT 3
6147: ST_TO_ADDR
// vc_weapon := [ us_double_gun , us_heavy_gun ] [ Rand ( 1 , 2 ) ] ;
6148: LD_ADDR_OWVAR 40
6152: PUSH
6153: LD_INT 5
6155: PUSH
6156: LD_INT 6
6158: PUSH
6159: EMPTY
6160: LIST
6161: LIST
6162: PUSH
6163: LD_INT 1
6165: PPUSH
6166: LD_INT 2
6168: PPUSH
6169: CALL_OW 12
6173: ARRAY
6174: ST_TO_ADDR
// un := CreateVehicle ;
6175: LD_ADDR_VAR 0 4
6179: PUSH
6180: CALL_OW 45
6184: ST_TO_ADDR
// PlaceUnitArea ( un , areas [ 1 ] , false ) ;
6185: LD_VAR 0 4
6189: PPUSH
6190: LD_EXP 15
6194: PUSH
6195: LD_INT 1
6197: ARRAY
6198: PPUSH
6199: LD_INT 0
6201: PPUSH
6202: CALL_OW 49
// end ;
6206: GO 6121
6208: POP
6209: POP
// end ; 92 :
6210: GO 6699
6212: LD_INT 92
6214: DOUBLE
6215: EQUAL
6216: IFTRUE 6220
6218: GO 6549
6220: POP
// begin uc_side := 5 ;
6221: LD_ADDR_OWVAR 20
6225: PUSH
6226: LD_INT 5
6228: ST_TO_ADDR
// uc_nation := 2 ;
6229: LD_ADDR_OWVAR 21
6233: PUSH
6234: LD_INT 2
6236: ST_TO_ADDR
// filter := [ ] ;
6237: LD_ADDR_VAR 0 3
6241: PUSH
6242: EMPTY
6243: ST_TO_ADDR
// InitHc ;
6244: CALL_OW 19
// PrepareHuman ( false , 1 , l_skill ) ;
6248: LD_INT 0
6250: PPUSH
6251: LD_INT 1
6253: PPUSH
6254: LD_EXP 50
6258: PPUSH
6259: CALL_OW 380
// un := CreateHuman ;
6263: LD_ADDR_VAR 0 4
6267: PUSH
6268: CALL_OW 44
6272: ST_TO_ADDR
// filter := filter ^ un ;
6273: LD_ADDR_VAR 0 3
6277: PUSH
6278: LD_VAR 0 3
6282: PUSH
6283: LD_VAR 0 4
6287: ADD
6288: ST_TO_ADDR
// for i = 1 to [ 4 , 3 , 2 ] [ game_difficulty ] do
6289: LD_ADDR_VAR 0 2
6293: PUSH
6294: DOUBLE
6295: LD_INT 1
6297: DEC
6298: ST_TO_ADDR
6299: LD_INT 4
6301: PUSH
6302: LD_INT 3
6304: PUSH
6305: LD_INT 2
6307: PUSH
6308: EMPTY
6309: LIST
6310: LIST
6311: LIST
6312: PUSH
6313: LD_EXP 2
6317: ARRAY
6318: PUSH
6319: FOR_TO
6320: IFFALSE 6358
// begin un := CreateHumanWithClass ( 1 , l_skill ) ;
6322: LD_ADDR_VAR 0 4
6326: PUSH
6327: LD_INT 1
6329: PPUSH
6330: LD_EXP 50
6334: PPUSH
6335: CALL 7323 0 2
6339: ST_TO_ADDR
// filter := filter ^ un ;
6340: LD_ADDR_VAR 0 3
6344: PUSH
6345: LD_VAR 0 3
6349: PUSH
6350: LD_VAR 0 4
6354: ADD
6355: ST_TO_ADDR
// end ;
6356: GO 6319
6358: POP
6359: POP
// DialogueOn ;
6360: CALL_OW 6
// if GetSex ( filter [ 1 ] ) = sex_male then
6364: LD_VAR 0 3
6368: PUSH
6369: LD_INT 1
6371: ARRAY
6372: PPUSH
6373: CALL_OW 258
6377: PUSH
6378: LD_INT 1
6380: EQUAL
6381: IFFALSE 6401
// SayRadio ( filter [ 1 ] , DS-DF-1 ) else
6383: LD_VAR 0 3
6387: PUSH
6388: LD_INT 1
6390: ARRAY
6391: PPUSH
6392: LD_STRING DS-DF-1
6394: PPUSH
6395: CALL_OW 94
6399: GO 6417
// SayRadio ( filter [ 1 ] , DS-DF-f1 ) ;
6401: LD_VAR 0 3
6405: PUSH
6406: LD_INT 1
6408: ARRAY
6409: PPUSH
6410: LD_STRING DS-DF-f1
6412: PPUSH
6413: CALL_OW 94
// case Query ( DS-dezert ) of 1 :
6417: LD_STRING DS-dezert
6419: PPUSH
6420: CALL_OW 97
6424: PUSH
6425: LD_INT 1
6427: DOUBLE
6428: EQUAL
6429: IFTRUE 6433
6431: GO 6448
6433: POP
// Say ( l_cmndr , DS-DC-dis ) ; 2 :
6434: LD_EXP 49
6438: PPUSH
6439: LD_STRING DS-DC-dis
6441: PPUSH
6442: CALL_OW 88
6446: GO 6543
6448: LD_INT 2
6450: DOUBLE
6451: EQUAL
6452: IFTRUE 6456
6454: GO 6542
6456: POP
// begin Say ( l_cmndr , DS-DC-acp ) ;
6457: LD_EXP 49
6461: PPUSH
6462: LD_STRING DS-DC-acp
6464: PPUSH
6465: CALL_OW 88
// for i = 1 to filter do
6469: LD_ADDR_VAR 0 2
6473: PUSH
6474: DOUBLE
6475: LD_INT 1
6477: DEC
6478: ST_TO_ADDR
6479: LD_VAR 0 3
6483: PUSH
6484: FOR_TO
6485: IFFALSE 6538
// begin SetSide ( filter [ i ] , 8 ) ;
6487: LD_VAR 0 3
6491: PUSH
6492: LD_VAR 0 2
6496: ARRAY
6497: PPUSH
6498: LD_INT 8
6500: PPUSH
6501: CALL_OW 235
// PlaceUnitArea ( filter [ i ] , south_spawn , false ) ;
6505: LD_VAR 0 3
6509: PUSH
6510: LD_VAR 0 2
6514: ARRAY
6515: PPUSH
6516: LD_INT 4
6518: PPUSH
6519: LD_INT 0
6521: PPUSH
6522: CALL_OW 49
// CenterNowOnXY ( 111 , 121 ) ;
6526: LD_INT 111
6528: PPUSH
6529: LD_INT 121
6531: PPUSH
6532: CALL_OW 86
// end ;
6536: GO 6484
6538: POP
6539: POP
// end ; end ;
6540: GO 6543
6542: POP
// DialogueOff ;
6543: CALL_OW 7
// end ; 101 :
6547: GO 6699
6549: LD_INT 101
6551: DOUBLE
6552: EQUAL
6553: IFTRUE 6557
6555: GO 6609
6557: POP
// begin CreateCratesArea ( Rand ( 3 , 5 ) , crates_area , true ) ;
6558: LD_INT 3
6560: PPUSH
6561: LD_INT 5
6563: PPUSH
6564: CALL_OW 12
6568: PPUSH
6569: LD_INT 9
6571: PPUSH
6572: LD_INT 1
6574: PPUSH
6575: CALL_OW 55
// Wait ( 0 0$11 ) ;
6579: LD_INT 385
6581: PPUSH
6582: CALL_OW 67
// CreateCratesArea ( Rand ( 3 , 5 ) , crates_area , true ) ;
6586: LD_INT 3
6588: PPUSH
6589: LD_INT 5
6591: PPUSH
6592: CALL_OW 12
6596: PPUSH
6597: LD_INT 9
6599: PPUSH
6600: LD_INT 1
6602: PPUSH
6603: CALL_OW 55
// end ; 200 :
6607: GO 6699
6609: LD_INT 200
6611: DOUBLE
6612: EQUAL
6613: IFTRUE 6617
6615: GO 6698
6617: POP
// begin Say ( Leopold , DS-end ) ;
6618: LD_EXP 7
6622: PPUSH
6623: LD_STRING DS-end
6625: PPUSH
6626: CALL_OW 88
// if Difficulty = 3 then
6630: LD_OWVAR 67
6634: PUSH
6635: LD_INT 3
6637: EQUAL
6638: IFFALSE 6647
// SetAchievement ( ACH_DESERT ) ;
6640: LD_STRING ACH_DESERT
6642: PPUSH
6643: CALL_OW 543
// music_nat := 5 ;
6647: LD_ADDR_OWVAR 71
6651: PUSH
6652: LD_INT 5
6654: ST_TO_ADDR
// AddMedal ( med , 1 ) ;
6655: LD_STRING med
6657: PPUSH
6658: LD_INT 1
6660: PPUSH
6661: CALL_OW 101
// AddMedal ( med , 1 ) ;
6665: LD_STRING med
6667: PPUSH
6668: LD_INT 1
6670: PPUSH
6671: CALL_OW 101
// AddMedal ( med , 1 ) ;
6675: LD_STRING med
6677: PPUSH
6678: LD_INT 1
6680: PPUSH
6681: CALL_OW 101
// GiveMedals ( MAIN ) ;
6685: LD_STRING MAIN
6687: PPUSH
6688: CALL_OW 102
// YouWin ;
6692: CALL_OW 103
// end ; end ;
6696: GO 6699
6698: POP
// end ;
6699: PPOPN 6
6701: END
// on UnitGoesToRed ( un ) do begin if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) then
6702: LD_VAR 0 1
6706: PUSH
6707: LD_INT 22
6709: PUSH
6710: LD_INT 2
6712: PUSH
6713: EMPTY
6714: LIST
6715: LIST
6716: PUSH
6717: LD_INT 21
6719: PUSH
6720: LD_INT 2
6722: PUSH
6723: EMPTY
6724: LIST
6725: LIST
6726: PUSH
6727: EMPTY
6728: LIST
6729: LIST
6730: PPUSH
6731: CALL_OW 69
6735: IN
6736: IFFALSE 6861
// begin Wait ( Rand ( 0 0$03 , 0 0$06 ) ) ;
6738: LD_INT 105
6740: PPUSH
6741: LD_INT 210
6743: PPUSH
6744: CALL_OW 12
6748: PPUSH
6749: CALL_OW 67
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
6753: LD_VAR 0 1
6757: PPUSH
6758: CALL_OW 250
6762: PPUSH
6763: LD_VAR 0 1
6767: PPUSH
6768: CALL_OW 251
6772: PPUSH
6773: LD_INT 3
6775: PPUSH
6776: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
6780: LD_VAR 0 1
6784: PPUSH
6785: CALL_OW 250
6789: PPUSH
6790: LD_VAR 0 1
6794: PPUSH
6795: CALL_OW 251
6799: PPUSH
6800: LD_INT 3
6802: PPUSH
6803: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
6807: LD_VAR 0 1
6811: PPUSH
6812: CALL_OW 250
6816: PPUSH
6817: LD_VAR 0 1
6821: PPUSH
6822: CALL_OW 251
6826: PPUSH
6827: LD_INT 3
6829: PPUSH
6830: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
6834: LD_VAR 0 1
6838: PPUSH
6839: CALL_OW 250
6843: PPUSH
6844: LD_VAR 0 1
6848: PPUSH
6849: CALL_OW 251
6853: PPUSH
6854: LD_INT 3
6856: PPUSH
6857: CALL_OW 453
// end ; end ;
6861: PPOPN 1
6863: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
6864: LD_VAR 0 1
6868: PPUSH
6869: CALL 24418 0 1
// if un = fort then
6873: LD_VAR 0 1
6877: PUSH
6878: LD_INT 23
6880: EQUAL
6881: IFFALSE 6891
// fort_destroyed := true ;
6883: LD_ADDR_EXP 32
6887: PUSH
6888: LD_INT 1
6890: ST_TO_ADDR
// if un = l_cmndr then
6891: LD_VAR 0 1
6895: PUSH
6896: LD_EXP 49
6900: EQUAL
6901: IFFALSE 6911
// hero_died := true ;
6903: LD_ADDR_EXP 33
6907: PUSH
6908: LD_INT 1
6910: ST_TO_ADDR
// end ;
6911: PPOPN 1
6913: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin debug_strings := un ;
6914: LD_ADDR_OWVAR 48
6918: PUSH
6919: LD_VAR 0 1
6923: ST_TO_ADDR
// SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
6924: LD_VAR 0 1
6928: PPUSH
6929: LD_VAR 0 2
6933: PPUSH
6934: LD_VAR 0 3
6938: PPUSH
6939: CALL 24514 0 3
// end ;
6943: PPOPN 3
6945: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
6946: LD_VAR 0 1
6950: PPUSH
6951: CALL 24522 0 1
// end ;
6955: PPOPN 1
6957: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
6958: LD_VAR 0 1
6962: PPUSH
6963: LD_VAR 0 2
6967: PPUSH
6968: CALL 24538 0 2
// end ; end_of_file
6972: PPOPN 2
6974: END
// export function RefreshTime ( time , bool ) ; begin
6975: LD_INT 0
6977: PPUSH
// if bool then
6978: LD_VAR 0 2
6982: IFFALSE 7000
// time := time + 0 0$01 else
6984: LD_ADDR_VAR 0 1
6988: PUSH
6989: LD_VAR 0 1
6993: PUSH
6994: LD_INT 35
6996: PLUS
6997: ST_TO_ADDR
6998: GO 7014
// time := time - 0 0$01 ;
7000: LD_ADDR_VAR 0 1
7004: PUSH
7005: LD_VAR 0 1
7009: PUSH
7010: LD_INT 35
7012: MINUS
7013: ST_TO_ADDR
// result := time ;
7014: LD_ADDR_VAR 0 3
7018: PUSH
7019: LD_VAR 0 1
7023: ST_TO_ADDR
// end ;
7024: LD_VAR 0 3
7028: RET
// export function MineExist ( side ) ; begin
7029: LD_INT 0
7031: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_siberite_mine ] ] ) > 0 then
7032: LD_INT 22
7034: PUSH
7035: LD_VAR 0 1
7039: PUSH
7040: EMPTY
7041: LIST
7042: LIST
7043: PUSH
7044: LD_INT 30
7046: PUSH
7047: LD_INT 30
7049: PUSH
7050: EMPTY
7051: LIST
7052: LIST
7053: PUSH
7054: EMPTY
7055: LIST
7056: LIST
7057: PPUSH
7058: CALL_OW 69
7062: PUSH
7063: LD_INT 0
7065: GREATER
7066: IFFALSE 7078
// result := true else
7068: LD_ADDR_VAR 0 2
7072: PUSH
7073: LD_INT 1
7075: ST_TO_ADDR
7076: GO 7086
// result := false ;
7078: LD_ADDR_VAR 0 2
7082: PUSH
7083: LD_INT 0
7085: ST_TO_ADDR
// end ;
7086: LD_VAR 0 2
7090: RET
// export function FacExist ( side ) ; begin
7091: LD_INT 0
7093: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_factory ] ] ) > 0 ;
7094: LD_ADDR_VAR 0 2
7098: PUSH
7099: LD_INT 22
7101: PUSH
7102: LD_VAR 0 1
7106: PUSH
7107: EMPTY
7108: LIST
7109: LIST
7110: PUSH
7111: LD_INT 30
7113: PUSH
7114: LD_INT 3
7116: PUSH
7117: EMPTY
7118: LIST
7119: LIST
7120: PUSH
7121: EMPTY
7122: LIST
7123: LIST
7124: PPUSH
7125: CALL_OW 69
7129: PUSH
7130: LD_INT 0
7132: GREATER
7133: ST_TO_ADDR
// end ;
7134: LD_VAR 0 2
7138: RET
// export function ConnectWithTower ( side ) ; var i , filter , tower ; begin
7139: LD_INT 0
7141: PPUSH
7142: PPUSH
7143: PPUSH
7144: PPUSH
// filter := FilterAllUnits ( [ [ f_side , side ] , [ f_control , control_remote ] , [ f_ok ] ] ) ;
7145: LD_ADDR_VAR 0 4
7149: PUSH
7150: LD_INT 22
7152: PUSH
7153: LD_VAR 0 1
7157: PUSH
7158: EMPTY
7159: LIST
7160: LIST
7161: PUSH
7162: LD_INT 33
7164: PUSH
7165: LD_INT 2
7167: PUSH
7168: EMPTY
7169: LIST
7170: LIST
7171: PUSH
7172: LD_INT 50
7174: PUSH
7175: EMPTY
7176: LIST
7177: PUSH
7178: EMPTY
7179: LIST
7180: LIST
7181: LIST
7182: PPUSH
7183: CALL_OW 69
7187: ST_TO_ADDR
// tower := FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , ar_control_tower ] ] ) ;
7188: LD_ADDR_VAR 0 5
7192: PUSH
7193: LD_INT 22
7195: PUSH
7196: LD_VAR 0 1
7200: PUSH
7201: EMPTY
7202: LIST
7203: LIST
7204: PUSH
7205: LD_INT 34
7207: PUSH
7208: LD_INT 31
7210: PUSH
7211: EMPTY
7212: LIST
7213: LIST
7214: PUSH
7215: EMPTY
7216: LIST
7217: LIST
7218: PPUSH
7219: CALL_OW 69
7223: ST_TO_ADDR
// if tower > 0 and filter > 0 then
7224: LD_VAR 0 5
7228: PUSH
7229: LD_INT 0
7231: GREATER
7232: PUSH
7233: LD_VAR 0 4
7237: PUSH
7238: LD_INT 0
7240: GREATER
7241: AND
7242: IFFALSE 7318
// for i = 1 to filter do
7244: LD_ADDR_VAR 0 3
7248: PUSH
7249: DOUBLE
7250: LD_INT 1
7252: DEC
7253: ST_TO_ADDR
7254: LD_VAR 0 4
7258: PUSH
7259: FOR_TO
7260: IFFALSE 7316
// if not IsControledBy ( filter [ i ] ) then
7262: LD_VAR 0 4
7266: PUSH
7267: LD_VAR 0 3
7271: ARRAY
7272: PPUSH
7273: CALL_OW 312
7277: NOT
7278: IFFALSE 7314
// ComLinkTo ( filter [ i ] , tower [ Rand ( 1 , tower ) ] ) ;
7280: LD_VAR 0 4
7284: PUSH
7285: LD_VAR 0 3
7289: ARRAY
7290: PPUSH
7291: LD_VAR 0 5
7295: PUSH
7296: LD_INT 1
7298: PPUSH
7299: LD_VAR 0 5
7303: PPUSH
7304: CALL_OW 12
7308: ARRAY
7309: PPUSH
7310: CALL_OW 135
7314: GO 7259
7316: POP
7317: POP
// end ;
7318: LD_VAR 0 2
7322: RET
// export function CreateHumanWithClass ( clas , lvl ) ; var skill_com , skill_eng , skill_mech , skill_sci , bonus ; begin
7323: LD_INT 0
7325: PPUSH
7326: PPUSH
7327: PPUSH
7328: PPUSH
7329: PPUSH
7330: PPUSH
// hc_class := clas ;
7331: LD_ADDR_OWVAR 28
7335: PUSH
7336: LD_VAR 0 1
7340: ST_TO_ADDR
// skill_com := ( lvl + Rand ( - 1 , 1 ) ) ;
7341: LD_ADDR_VAR 0 4
7345: PUSH
7346: LD_VAR 0 2
7350: PUSH
7351: LD_INT 1
7353: NEG
7354: PPUSH
7355: LD_INT 1
7357: PPUSH
7358: CALL_OW 12
7362: PLUS
7363: ST_TO_ADDR
// skill_eng := ( lvl + Rand ( - 1 , 1 ) ) ;
7364: LD_ADDR_VAR 0 5
7368: PUSH
7369: LD_VAR 0 2
7373: PUSH
7374: LD_INT 1
7376: NEG
7377: PPUSH
7378: LD_INT 1
7380: PPUSH
7381: CALL_OW 12
7385: PLUS
7386: ST_TO_ADDR
// skill_mech := ( lvl + Rand ( - 1 , 1 ) ) ;
7387: LD_ADDR_VAR 0 6
7391: PUSH
7392: LD_VAR 0 2
7396: PUSH
7397: LD_INT 1
7399: NEG
7400: PPUSH
7401: LD_INT 1
7403: PPUSH
7404: CALL_OW 12
7408: PLUS
7409: ST_TO_ADDR
// skill_sci := ( lvl + Rand ( - 1 , 1 ) ) ;
7410: LD_ADDR_VAR 0 7
7414: PUSH
7415: LD_VAR 0 2
7419: PUSH
7420: LD_INT 1
7422: NEG
7423: PPUSH
7424: LD_INT 1
7426: PPUSH
7427: CALL_OW 12
7431: PLUS
7432: ST_TO_ADDR
// if clas = 1 or clas = 9 or clas = class_sniper or clas = class_mortar then
7433: LD_VAR 0 1
7437: PUSH
7438: LD_INT 1
7440: EQUAL
7441: PUSH
7442: LD_VAR 0 1
7446: PUSH
7447: LD_INT 9
7449: EQUAL
7450: OR
7451: PUSH
7452: LD_VAR 0 1
7456: PUSH
7457: LD_INT 5
7459: EQUAL
7460: OR
7461: PUSH
7462: LD_VAR 0 1
7466: PUSH
7467: LD_INT 8
7469: EQUAL
7470: OR
7471: IFFALSE 7496
// bonus := [ 2 , 0 , 0 , 0 ] ;
7473: LD_ADDR_VAR 0 8
7477: PUSH
7478: LD_INT 2
7480: PUSH
7481: LD_INT 0
7483: PUSH
7484: LD_INT 0
7486: PUSH
7487: LD_INT 0
7489: PUSH
7490: EMPTY
7491: LIST
7492: LIST
7493: LIST
7494: LIST
7495: ST_TO_ADDR
// if clas = 2 then
7496: LD_VAR 0 1
7500: PUSH
7501: LD_INT 2
7503: EQUAL
7504: IFFALSE 7529
// bonus := [ 0 , 2 , 0 , 0 ] ;
7506: LD_ADDR_VAR 0 8
7510: PUSH
7511: LD_INT 0
7513: PUSH
7514: LD_INT 2
7516: PUSH
7517: LD_INT 0
7519: PUSH
7520: LD_INT 0
7522: PUSH
7523: EMPTY
7524: LIST
7525: LIST
7526: LIST
7527: LIST
7528: ST_TO_ADDR
// if clas = 3 then
7529: LD_VAR 0 1
7533: PUSH
7534: LD_INT 3
7536: EQUAL
7537: IFFALSE 7562
// bonus := [ 0 , 0 , 2 , 0 ] ;
7539: LD_ADDR_VAR 0 8
7543: PUSH
7544: LD_INT 0
7546: PUSH
7547: LD_INT 0
7549: PUSH
7550: LD_INT 2
7552: PUSH
7553: LD_INT 0
7555: PUSH
7556: EMPTY
7557: LIST
7558: LIST
7559: LIST
7560: LIST
7561: ST_TO_ADDR
// if clas = 4 then
7562: LD_VAR 0 1
7566: PUSH
7567: LD_INT 4
7569: EQUAL
7570: IFFALSE 7595
// bonus := [ 0 , 0 , 0 , 2 ] ;
7572: LD_ADDR_VAR 0 8
7576: PUSH
7577: LD_INT 0
7579: PUSH
7580: LD_INT 0
7582: PUSH
7583: LD_INT 0
7585: PUSH
7586: LD_INT 2
7588: PUSH
7589: EMPTY
7590: LIST
7591: LIST
7592: LIST
7593: LIST
7594: ST_TO_ADDR
// if clas > 4 and clas <> 9 and clas <> class_sniper and clas <> class_mortar then
7595: LD_VAR 0 1
7599: PUSH
7600: LD_INT 4
7602: GREATER
7603: PUSH
7604: LD_VAR 0 1
7608: PUSH
7609: LD_INT 9
7611: NONEQUAL
7612: AND
7613: PUSH
7614: LD_VAR 0 1
7618: PUSH
7619: LD_INT 5
7621: NONEQUAL
7622: AND
7623: PUSH
7624: LD_VAR 0 1
7628: PUSH
7629: LD_INT 8
7631: NONEQUAL
7632: AND
7633: IFFALSE 7658
// bonus := [ 0 , 0 , 0 , 0 ] ;
7635: LD_ADDR_VAR 0 8
7639: PUSH
7640: LD_INT 0
7642: PUSH
7643: LD_INT 0
7645: PUSH
7646: LD_INT 0
7648: PUSH
7649: LD_INT 0
7651: PUSH
7652: EMPTY
7653: LIST
7654: LIST
7655: LIST
7656: LIST
7657: ST_TO_ADDR
// hc_basic_skills := [ Rand ( 0 , 2 ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) ] ;
7658: LD_ADDR_OWVAR 30
7662: PUSH
7663: LD_INT 0
7665: PPUSH
7666: LD_INT 2
7668: PPUSH
7669: CALL_OW 12
7673: PUSH
7674: LD_INT 0
7676: PPUSH
7677: LD_INT 2
7679: PPUSH
7680: CALL_OW 12
7684: PUSH
7685: LD_INT 0
7687: PPUSH
7688: LD_INT 2
7690: PPUSH
7691: CALL_OW 12
7695: PUSH
7696: LD_INT 0
7698: PPUSH
7699: LD_INT 2
7701: PPUSH
7702: CALL_OW 12
7706: PUSH
7707: EMPTY
7708: LIST
7709: LIST
7710: LIST
7711: LIST
7712: ST_TO_ADDR
// hc_skills := [ skill_com + bonus [ 1 ] , skill_eng + bonus [ 2 ] , skill_mech + bonus [ 3 ] , skill_sci + bonus [ 4 ] ] ;
7713: LD_ADDR_OWVAR 31
7717: PUSH
7718: LD_VAR 0 4
7722: PUSH
7723: LD_VAR 0 8
7727: PUSH
7728: LD_INT 1
7730: ARRAY
7731: PLUS
7732: PUSH
7733: LD_VAR 0 5
7737: PUSH
7738: LD_VAR 0 8
7742: PUSH
7743: LD_INT 2
7745: ARRAY
7746: PLUS
7747: PUSH
7748: LD_VAR 0 6
7752: PUSH
7753: LD_VAR 0 8
7757: PUSH
7758: LD_INT 3
7760: ARRAY
7761: PLUS
7762: PUSH
7763: LD_VAR 0 7
7767: PUSH
7768: LD_VAR 0 8
7772: PUSH
7773: LD_INT 4
7775: ARRAY
7776: PLUS
7777: PUSH
7778: EMPTY
7779: LIST
7780: LIST
7781: LIST
7782: LIST
7783: ST_TO_ADDR
// hc_sex := Rand ( sex_male , sex_female ) ;
7784: LD_ADDR_OWVAR 27
7788: PUSH
7789: LD_INT 1
7791: PPUSH
7792: LD_INT 2
7794: PPUSH
7795: CALL_OW 12
7799: ST_TO_ADDR
// hc_gallery :=  ;
7800: LD_ADDR_OWVAR 33
7804: PUSH
7805: LD_STRING 
7807: ST_TO_ADDR
// hc_attr := [ Rand ( 8 , 12 ) , Rand ( 9 , 11 ) ] ;
7808: LD_ADDR_OWVAR 29
7812: PUSH
7813: LD_INT 8
7815: PPUSH
7816: LD_INT 12
7818: PPUSH
7819: CALL_OW 12
7823: PUSH
7824: LD_INT 9
7826: PPUSH
7827: LD_INT 11
7829: PPUSH
7830: CALL_OW 12
7834: PUSH
7835: EMPTY
7836: LIST
7837: LIST
7838: ST_TO_ADDR
// hc_name :=  ;
7839: LD_ADDR_OWVAR 26
7843: PUSH
7844: LD_STRING 
7846: ST_TO_ADDR
// result := CreateHuman ;
7847: LD_ADDR_VAR 0 3
7851: PUSH
7852: CALL_OW 44
7856: ST_TO_ADDR
// end ;
7857: LD_VAR 0 3
7861: RET
// export function GetSpeed ( unit ) ; begin
7862: LD_INT 0
7864: PPUSH
// result := GetProperties ( unit ) [ 1 ] ;
7865: LD_ADDR_VAR 0 2
7869: PUSH
7870: LD_VAR 0 1
7874: PPUSH
7875: CALL_OW 464
7879: PUSH
7880: LD_INT 1
7882: ARRAY
7883: ST_TO_ADDR
// end ;
7884: LD_VAR 0 2
7888: RET
// export function CreateNature ( area , num1 , num2 , num3 , num4 ) ; var l , apeman , tiger , bird , horse ; begin
7889: LD_INT 0
7891: PPUSH
7892: PPUSH
7893: PPUSH
7894: PPUSH
7895: PPUSH
7896: PPUSH
// uc_nation = nation_nature ;
7897: LD_ADDR_OWVAR 21
7901: PUSH
7902: LD_INT 0
7904: ST_TO_ADDR
// uc_side = 0 ;
7905: LD_ADDR_OWVAR 20
7909: PUSH
7910: LD_INT 0
7912: ST_TO_ADDR
// l = 0 ;
7913: LD_ADDR_VAR 0 7
7917: PUSH
7918: LD_INT 0
7920: ST_TO_ADDR
// repeat begin uc_direction = Rand ( 0 , 5 ) ;
7921: LD_ADDR_OWVAR 24
7925: PUSH
7926: LD_INT 0
7928: PPUSH
7929: LD_INT 5
7931: PPUSH
7932: CALL_OW 12
7936: ST_TO_ADDR
// hc_agressivity = Rand ( - 5 , 0 ) ;
7937: LD_ADDR_OWVAR 35
7941: PUSH
7942: LD_INT 5
7944: NEG
7945: PPUSH
7946: LD_INT 0
7948: PPUSH
7949: CALL_OW 12
7953: ST_TO_ADDR
// hc_gallery =  ;
7954: LD_ADDR_OWVAR 33
7958: PUSH
7959: LD_STRING 
7961: ST_TO_ADDR
// hc_class = class_apeman ;
7962: LD_ADDR_OWVAR 28
7966: PUSH
7967: LD_INT 12
7969: ST_TO_ADDR
// hc_attr = [ Rand ( 11 , 13 ) , Rand ( 10 , 11 ) ] ;
7970: LD_ADDR_OWVAR 29
7974: PUSH
7975: LD_INT 11
7977: PPUSH
7978: LD_INT 13
7980: PPUSH
7981: CALL_OW 12
7985: PUSH
7986: LD_INT 10
7988: PPUSH
7989: LD_INT 11
7991: PPUSH
7992: CALL_OW 12
7996: PUSH
7997: EMPTY
7998: LIST
7999: LIST
8000: ST_TO_ADDR
// hc_sex = sex_male ;
8001: LD_ADDR_OWVAR 27
8005: PUSH
8006: LD_INT 1
8008: ST_TO_ADDR
// hc_skills = [ Rand ( 0 , 2 ) , 0 , 0 , 0 ] ;
8009: LD_ADDR_OWVAR 31
8013: PUSH
8014: LD_INT 0
8016: PPUSH
8017: LD_INT 2
8019: PPUSH
8020: CALL_OW 12
8024: PUSH
8025: LD_INT 0
8027: PUSH
8028: LD_INT 0
8030: PUSH
8031: LD_INT 0
8033: PUSH
8034: EMPTY
8035: LIST
8036: LIST
8037: LIST
8038: LIST
8039: ST_TO_ADDR
// apeman = CreateHuman ;
8040: LD_ADDR_VAR 0 8
8044: PUSH
8045: CALL_OW 44
8049: ST_TO_ADDR
// PlaceUnitArea ( apeman , area , false ) ;
8050: LD_VAR 0 8
8054: PPUSH
8055: LD_VAR 0 1
8059: PPUSH
8060: LD_INT 0
8062: PPUSH
8063: CALL_OW 49
// l = l + 1 ;
8067: LD_ADDR_VAR 0 7
8071: PUSH
8072: LD_VAR 0 7
8076: PUSH
8077: LD_INT 1
8079: PLUS
8080: ST_TO_ADDR
// end until l = num1 ;
8081: LD_VAR 0 7
8085: PUSH
8086: LD_VAR 0 2
8090: EQUAL
8091: IFFALSE 7921
// l = 0 ;
8093: LD_ADDR_VAR 0 7
8097: PUSH
8098: LD_INT 0
8100: ST_TO_ADDR
// repeat begin hc_agressivity = Rand ( 0 , 25 ) ;
8101: LD_ADDR_OWVAR 35
8105: PUSH
8106: LD_INT 0
8108: PPUSH
8109: LD_INT 25
8111: PPUSH
8112: CALL_OW 12
8116: ST_TO_ADDR
// hc_class = class_tiger ;
8117: LD_ADDR_OWVAR 28
8121: PUSH
8122: LD_INT 14
8124: ST_TO_ADDR
// hc_sex = sex_male ;
8125: LD_ADDR_OWVAR 27
8129: PUSH
8130: LD_INT 1
8132: ST_TO_ADDR
// hc_gallery = sandnature ;
8133: LD_ADDR_OWVAR 33
8137: PUSH
8138: LD_STRING sandnature
8140: ST_TO_ADDR
// hc_face_number = 3 ;
8141: LD_ADDR_OWVAR 34
8145: PUSH
8146: LD_INT 3
8148: ST_TO_ADDR
// tiger = CreateHuman ;
8149: LD_ADDR_VAR 0 9
8153: PUSH
8154: CALL_OW 44
8158: ST_TO_ADDR
// PlaceUnitArea ( tiger , area , false ) ;
8159: LD_VAR 0 9
8163: PPUSH
8164: LD_VAR 0 1
8168: PPUSH
8169: LD_INT 0
8171: PPUSH
8172: CALL_OW 49
// l = l + 1 ;
8176: LD_ADDR_VAR 0 7
8180: PUSH
8181: LD_VAR 0 7
8185: PUSH
8186: LD_INT 1
8188: PLUS
8189: ST_TO_ADDR
// end until l = num2 ;
8190: LD_VAR 0 7
8194: PUSH
8195: LD_VAR 0 3
8199: EQUAL
8200: IFFALSE 8101
// l = 0 ;
8202: LD_ADDR_VAR 0 7
8206: PUSH
8207: LD_INT 0
8209: ST_TO_ADDR
// repeat begin hc_class = class_phororhacos ;
8210: LD_ADDR_OWVAR 28
8214: PUSH
8215: LD_INT 18
8217: ST_TO_ADDR
// hc_gallery = sandnature ;
8218: LD_ADDR_OWVAR 33
8222: PUSH
8223: LD_STRING sandnature
8225: ST_TO_ADDR
// hc_face_number = 1 ;
8226: LD_ADDR_OWVAR 34
8230: PUSH
8231: LD_INT 1
8233: ST_TO_ADDR
// bird = CreateHuman ;
8234: LD_ADDR_VAR 0 10
8238: PUSH
8239: CALL_OW 44
8243: ST_TO_ADDR
// PlaceUnitAnywhere ( bird , false ) ;
8244: LD_VAR 0 10
8248: PPUSH
8249: LD_INT 0
8251: PPUSH
8252: CALL_OW 51
// l = l + 1 ;
8256: LD_ADDR_VAR 0 7
8260: PUSH
8261: LD_VAR 0 7
8265: PUSH
8266: LD_INT 1
8268: PLUS
8269: ST_TO_ADDR
// end until l = num3 ;
8270: LD_VAR 0 7
8274: PUSH
8275: LD_VAR 0 4
8279: EQUAL
8280: IFFALSE 8210
// l = 0 ;
8282: LD_ADDR_VAR 0 7
8286: PUSH
8287: LD_INT 0
8289: ST_TO_ADDR
// repeat begin hc_class = 21 ;
8290: LD_ADDR_OWVAR 28
8294: PUSH
8295: LD_INT 21
8297: ST_TO_ADDR
// hc_gallery = sandnature ;
8298: LD_ADDR_OWVAR 33
8302: PUSH
8303: LD_STRING sandnature
8305: ST_TO_ADDR
// hc_face_number = 5 ;
8306: LD_ADDR_OWVAR 34
8310: PUSH
8311: LD_INT 5
8313: ST_TO_ADDR
// horse := CreateHuman ;
8314: LD_ADDR_VAR 0 11
8318: PUSH
8319: CALL_OW 44
8323: ST_TO_ADDR
// PlaceUnitArea ( horse , area , false ) ;
8324: LD_VAR 0 11
8328: PPUSH
8329: LD_VAR 0 1
8333: PPUSH
8334: LD_INT 0
8336: PPUSH
8337: CALL_OW 49
// l = l + 1 ;
8341: LD_ADDR_VAR 0 7
8345: PUSH
8346: LD_VAR 0 7
8350: PUSH
8351: LD_INT 1
8353: PLUS
8354: ST_TO_ADDR
// end until l = num4 ;
8355: LD_VAR 0 7
8359: PUSH
8360: LD_VAR 0 5
8364: EQUAL
8365: IFFALSE 8290
// end ;
8367: LD_VAR 0 6
8371: RET
// export function PrepareComm ; begin
8372: LD_INT 0
8374: PPUSH
// uc_side := 1 ;
8375: LD_ADDR_OWVAR 20
8379: PUSH
8380: LD_INT 1
8382: ST_TO_ADDR
// uc_nation := 1 ;
8383: LD_ADDR_OWVAR 21
8387: PUSH
8388: LD_INT 1
8390: ST_TO_ADDR
// hc_gallery :=  ;
8391: LD_ADDR_OWVAR 33
8395: PUSH
8396: LD_STRING 
8398: ST_TO_ADDR
// hc_name :=  ;
8399: LD_ADDR_OWVAR 26
8403: PUSH
8404: LD_STRING 
8406: ST_TO_ADDR
// hc_class := 1 ;
8407: LD_ADDR_OWVAR 28
8411: PUSH
8412: LD_INT 1
8414: ST_TO_ADDR
// hc_sex := sex_male ;
8415: LD_ADDR_OWVAR 27
8419: PUSH
8420: LD_INT 1
8422: ST_TO_ADDR
// am_comander := CreateHuman ;
8423: LD_ADDR_EXP 46
8427: PUSH
8428: CALL_OW 44
8432: ST_TO_ADDR
// uc_side := 3 ;
8433: LD_ADDR_OWVAR 20
8437: PUSH
8438: LD_INT 3
8440: ST_TO_ADDR
// uc_nation := 3 ;
8441: LD_ADDR_OWVAR 21
8445: PUSH
8446: LD_INT 3
8448: ST_TO_ADDR
// ru_comander := CreateHuman ;
8449: LD_ADDR_EXP 47
8453: PUSH
8454: CALL_OW 44
8458: ST_TO_ADDR
// uc_side := 2 ;
8459: LD_ADDR_OWVAR 20
8463: PUSH
8464: LD_INT 2
8466: ST_TO_ADDR
// uc_nation := 2 ;
8467: LD_ADDR_OWVAR 21
8471: PUSH
8472: LD_INT 2
8474: ST_TO_ADDR
// hc_name := Heike Steyer ;
8475: LD_ADDR_OWVAR 26
8479: PUSH
8480: LD_STRING Heike Steyer
8482: ST_TO_ADDR
// hc_sex := sex_female ;
8483: LD_ADDR_OWVAR 27
8487: PUSH
8488: LD_INT 2
8490: ST_TO_ADDR
// hc_gallery := sandar ;
8491: LD_ADDR_OWVAR 33
8495: PUSH
8496: LD_STRING sandar
8498: ST_TO_ADDR
// hc_face_number := 14 ;
8499: LD_ADDR_OWVAR 34
8503: PUSH
8504: LD_INT 14
8506: ST_TO_ADDR
// ar_comander := CreateHuman ;
8507: LD_ADDR_EXP 48
8511: PUSH
8512: CALL_OW 44
8516: ST_TO_ADDR
// end ;
8517: LD_VAR 0 1
8521: RET
// export function SpeedFilter ( filter , speed ) ; var list , i ; begin
8522: LD_INT 0
8524: PPUSH
8525: PPUSH
8526: PPUSH
// list := [ ] ;
8527: LD_ADDR_VAR 0 4
8531: PUSH
8532: EMPTY
8533: ST_TO_ADDR
// for i = 1 to filter do
8534: LD_ADDR_VAR 0 5
8538: PUSH
8539: DOUBLE
8540: LD_INT 1
8542: DEC
8543: ST_TO_ADDR
8544: LD_VAR 0 1
8548: PUSH
8549: FOR_TO
8550: IFFALSE 8599
// if GetSpeed ( filter [ i ] ) < speed then
8552: LD_VAR 0 1
8556: PUSH
8557: LD_VAR 0 5
8561: ARRAY
8562: PPUSH
8563: CALL 7862 0 1
8567: PUSH
8568: LD_VAR 0 2
8572: LESS
8573: IFFALSE 8597
// list := list ^ filter [ i ] ;
8575: LD_ADDR_VAR 0 4
8579: PUSH
8580: LD_VAR 0 4
8584: PUSH
8585: LD_VAR 0 1
8589: PUSH
8590: LD_VAR 0 5
8594: ARRAY
8595: ADD
8596: ST_TO_ADDR
8597: GO 8549
8599: POP
8600: POP
// result := list ;
8601: LD_ADDR_VAR 0 3
8605: PUSH
8606: LD_VAR 0 4
8610: ST_TO_ADDR
// end ; end_of_file end_of_file
8611: LD_VAR 0 3
8615: RET
// export globalGameSaveCounter ; every 0 0$1 do
8616: GO 8618
8618: DISABLE
// begin enable ;
8619: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
8620: LD_STRING updateTimer(
8622: PUSH
8623: LD_OWVAR 1
8627: STR
8628: PUSH
8629: LD_STRING );
8631: STR
8632: PPUSH
8633: CALL_OW 559
// end ;
8637: END
// every 0 0$1 do
8638: GO 8640
8640: DISABLE
// begin globalGameSaveCounter := 0 ;
8641: LD_ADDR_EXP 52
8645: PUSH
8646: LD_INT 0
8648: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
8649: LD_STRING setGameSaveCounter(0)
8651: PPUSH
8652: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
8656: LD_STRING initStreamRollete();
8658: PPUSH
8659: CALL_OW 559
// InitStreamMode ;
8663: CALL 9989 0 0
// DefineStreamItems ( false ) ;
8667: LD_INT 0
8669: PPUSH
8670: CALL 10453 0 1
// end ;
8674: END
// export function SOS_MapStart ( ) ; begin
8675: LD_INT 0
8677: PPUSH
// if streamModeActive then
8678: LD_EXP 53
8682: IFFALSE 8691
// DefineStreamItems ( true ) ;
8684: LD_INT 1
8686: PPUSH
8687: CALL 10453 0 1
// UpdateLuaVariables ( ) ;
8691: CALL 8708 0 0
// UpdateFactoryWaypoints ( ) ;
8695: CALL 23322 0 0
// UpdateWarehouseGatheringPoints ( ) ;
8699: CALL 23579 0 0
// end ;
8703: LD_VAR 0 1
8707: RET
// function UpdateLuaVariables ( ) ; begin
8708: LD_INT 0
8710: PPUSH
// if globalGameSaveCounter then
8711: LD_EXP 52
8715: IFFALSE 8749
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
8717: LD_ADDR_EXP 52
8721: PUSH
8722: LD_EXP 52
8726: PPUSH
8727: CALL 68209 0 1
8731: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
8732: LD_STRING setGameSaveCounter(
8734: PUSH
8735: LD_EXP 52
8739: STR
8740: PUSH
8741: LD_STRING )
8743: STR
8744: PPUSH
8745: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
8749: LD_STRING setGameDifficulty(
8751: PUSH
8752: LD_OWVAR 67
8756: STR
8757: PUSH
8758: LD_STRING )
8760: STR
8761: PPUSH
8762: CALL_OW 559
// end ;
8766: LD_VAR 0 1
8770: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
8771: LD_INT 0
8773: PPUSH
// if p2 = stream_mode then
8774: LD_VAR 0 2
8778: PUSH
8779: LD_INT 100
8781: EQUAL
8782: IFFALSE 9785
// begin if not StreamModeActive then
8784: LD_EXP 53
8788: NOT
8789: IFFALSE 8799
// StreamModeActive := true ;
8791: LD_ADDR_EXP 53
8795: PUSH
8796: LD_INT 1
8798: ST_TO_ADDR
// if p3 = 0 then
8799: LD_VAR 0 3
8803: PUSH
8804: LD_INT 0
8806: EQUAL
8807: IFFALSE 8813
// InitStreamMode ;
8809: CALL 9989 0 0
// if p3 = 1 then
8813: LD_VAR 0 3
8817: PUSH
8818: LD_INT 1
8820: EQUAL
8821: IFFALSE 8831
// sRocket := true ;
8823: LD_ADDR_EXP 58
8827: PUSH
8828: LD_INT 1
8830: ST_TO_ADDR
// if p3 = 2 then
8831: LD_VAR 0 3
8835: PUSH
8836: LD_INT 2
8838: EQUAL
8839: IFFALSE 8849
// sSpeed := true ;
8841: LD_ADDR_EXP 57
8845: PUSH
8846: LD_INT 1
8848: ST_TO_ADDR
// if p3 = 3 then
8849: LD_VAR 0 3
8853: PUSH
8854: LD_INT 3
8856: EQUAL
8857: IFFALSE 8867
// sEngine := true ;
8859: LD_ADDR_EXP 59
8863: PUSH
8864: LD_INT 1
8866: ST_TO_ADDR
// if p3 = 4 then
8867: LD_VAR 0 3
8871: PUSH
8872: LD_INT 4
8874: EQUAL
8875: IFFALSE 8885
// sSpec := true ;
8877: LD_ADDR_EXP 56
8881: PUSH
8882: LD_INT 1
8884: ST_TO_ADDR
// if p3 = 5 then
8885: LD_VAR 0 3
8889: PUSH
8890: LD_INT 5
8892: EQUAL
8893: IFFALSE 8903
// sLevel := true ;
8895: LD_ADDR_EXP 60
8899: PUSH
8900: LD_INT 1
8902: ST_TO_ADDR
// if p3 = 6 then
8903: LD_VAR 0 3
8907: PUSH
8908: LD_INT 6
8910: EQUAL
8911: IFFALSE 8921
// sArmoury := true ;
8913: LD_ADDR_EXP 61
8917: PUSH
8918: LD_INT 1
8920: ST_TO_ADDR
// if p3 = 7 then
8921: LD_VAR 0 3
8925: PUSH
8926: LD_INT 7
8928: EQUAL
8929: IFFALSE 8939
// sRadar := true ;
8931: LD_ADDR_EXP 62
8935: PUSH
8936: LD_INT 1
8938: ST_TO_ADDR
// if p3 = 8 then
8939: LD_VAR 0 3
8943: PUSH
8944: LD_INT 8
8946: EQUAL
8947: IFFALSE 8957
// sBunker := true ;
8949: LD_ADDR_EXP 63
8953: PUSH
8954: LD_INT 1
8956: ST_TO_ADDR
// if p3 = 9 then
8957: LD_VAR 0 3
8961: PUSH
8962: LD_INT 9
8964: EQUAL
8965: IFFALSE 8975
// sHack := true ;
8967: LD_ADDR_EXP 64
8971: PUSH
8972: LD_INT 1
8974: ST_TO_ADDR
// if p3 = 10 then
8975: LD_VAR 0 3
8979: PUSH
8980: LD_INT 10
8982: EQUAL
8983: IFFALSE 8993
// sFire := true ;
8985: LD_ADDR_EXP 65
8989: PUSH
8990: LD_INT 1
8992: ST_TO_ADDR
// if p3 = 11 then
8993: LD_VAR 0 3
8997: PUSH
8998: LD_INT 11
9000: EQUAL
9001: IFFALSE 9011
// sRefresh := true ;
9003: LD_ADDR_EXP 66
9007: PUSH
9008: LD_INT 1
9010: ST_TO_ADDR
// if p3 = 12 then
9011: LD_VAR 0 3
9015: PUSH
9016: LD_INT 12
9018: EQUAL
9019: IFFALSE 9029
// sExp := true ;
9021: LD_ADDR_EXP 67
9025: PUSH
9026: LD_INT 1
9028: ST_TO_ADDR
// if p3 = 13 then
9029: LD_VAR 0 3
9033: PUSH
9034: LD_INT 13
9036: EQUAL
9037: IFFALSE 9047
// sDepot := true ;
9039: LD_ADDR_EXP 68
9043: PUSH
9044: LD_INT 1
9046: ST_TO_ADDR
// if p3 = 14 then
9047: LD_VAR 0 3
9051: PUSH
9052: LD_INT 14
9054: EQUAL
9055: IFFALSE 9065
// sFlag := true ;
9057: LD_ADDR_EXP 69
9061: PUSH
9062: LD_INT 1
9064: ST_TO_ADDR
// if p3 = 15 then
9065: LD_VAR 0 3
9069: PUSH
9070: LD_INT 15
9072: EQUAL
9073: IFFALSE 9083
// sKamikadze := true ;
9075: LD_ADDR_EXP 77
9079: PUSH
9080: LD_INT 1
9082: ST_TO_ADDR
// if p3 = 16 then
9083: LD_VAR 0 3
9087: PUSH
9088: LD_INT 16
9090: EQUAL
9091: IFFALSE 9101
// sTroll := true ;
9093: LD_ADDR_EXP 78
9097: PUSH
9098: LD_INT 1
9100: ST_TO_ADDR
// if p3 = 17 then
9101: LD_VAR 0 3
9105: PUSH
9106: LD_INT 17
9108: EQUAL
9109: IFFALSE 9119
// sSlow := true ;
9111: LD_ADDR_EXP 79
9115: PUSH
9116: LD_INT 1
9118: ST_TO_ADDR
// if p3 = 18 then
9119: LD_VAR 0 3
9123: PUSH
9124: LD_INT 18
9126: EQUAL
9127: IFFALSE 9137
// sLack := true ;
9129: LD_ADDR_EXP 80
9133: PUSH
9134: LD_INT 1
9136: ST_TO_ADDR
// if p3 = 19 then
9137: LD_VAR 0 3
9141: PUSH
9142: LD_INT 19
9144: EQUAL
9145: IFFALSE 9155
// sTank := true ;
9147: LD_ADDR_EXP 82
9151: PUSH
9152: LD_INT 1
9154: ST_TO_ADDR
// if p3 = 20 then
9155: LD_VAR 0 3
9159: PUSH
9160: LD_INT 20
9162: EQUAL
9163: IFFALSE 9173
// sRemote := true ;
9165: LD_ADDR_EXP 83
9169: PUSH
9170: LD_INT 1
9172: ST_TO_ADDR
// if p3 = 21 then
9173: LD_VAR 0 3
9177: PUSH
9178: LD_INT 21
9180: EQUAL
9181: IFFALSE 9191
// sPowell := true ;
9183: LD_ADDR_EXP 84
9187: PUSH
9188: LD_INT 1
9190: ST_TO_ADDR
// if p3 = 22 then
9191: LD_VAR 0 3
9195: PUSH
9196: LD_INT 22
9198: EQUAL
9199: IFFALSE 9209
// sTeleport := true ;
9201: LD_ADDR_EXP 87
9205: PUSH
9206: LD_INT 1
9208: ST_TO_ADDR
// if p3 = 23 then
9209: LD_VAR 0 3
9213: PUSH
9214: LD_INT 23
9216: EQUAL
9217: IFFALSE 9227
// sOilTower := true ;
9219: LD_ADDR_EXP 89
9223: PUSH
9224: LD_INT 1
9226: ST_TO_ADDR
// if p3 = 24 then
9227: LD_VAR 0 3
9231: PUSH
9232: LD_INT 24
9234: EQUAL
9235: IFFALSE 9245
// sShovel := true ;
9237: LD_ADDR_EXP 90
9241: PUSH
9242: LD_INT 1
9244: ST_TO_ADDR
// if p3 = 25 then
9245: LD_VAR 0 3
9249: PUSH
9250: LD_INT 25
9252: EQUAL
9253: IFFALSE 9263
// sSheik := true ;
9255: LD_ADDR_EXP 91
9259: PUSH
9260: LD_INT 1
9262: ST_TO_ADDR
// if p3 = 26 then
9263: LD_VAR 0 3
9267: PUSH
9268: LD_INT 26
9270: EQUAL
9271: IFFALSE 9281
// sEarthquake := true ;
9273: LD_ADDR_EXP 93
9277: PUSH
9278: LD_INT 1
9280: ST_TO_ADDR
// if p3 = 27 then
9281: LD_VAR 0 3
9285: PUSH
9286: LD_INT 27
9288: EQUAL
9289: IFFALSE 9299
// sAI := true ;
9291: LD_ADDR_EXP 94
9295: PUSH
9296: LD_INT 1
9298: ST_TO_ADDR
// if p3 = 28 then
9299: LD_VAR 0 3
9303: PUSH
9304: LD_INT 28
9306: EQUAL
9307: IFFALSE 9317
// sCargo := true ;
9309: LD_ADDR_EXP 97
9313: PUSH
9314: LD_INT 1
9316: ST_TO_ADDR
// if p3 = 29 then
9317: LD_VAR 0 3
9321: PUSH
9322: LD_INT 29
9324: EQUAL
9325: IFFALSE 9335
// sDLaser := true ;
9327: LD_ADDR_EXP 98
9331: PUSH
9332: LD_INT 1
9334: ST_TO_ADDR
// if p3 = 30 then
9335: LD_VAR 0 3
9339: PUSH
9340: LD_INT 30
9342: EQUAL
9343: IFFALSE 9353
// sExchange := true ;
9345: LD_ADDR_EXP 99
9349: PUSH
9350: LD_INT 1
9352: ST_TO_ADDR
// if p3 = 31 then
9353: LD_VAR 0 3
9357: PUSH
9358: LD_INT 31
9360: EQUAL
9361: IFFALSE 9371
// sFac := true ;
9363: LD_ADDR_EXP 100
9367: PUSH
9368: LD_INT 1
9370: ST_TO_ADDR
// if p3 = 32 then
9371: LD_VAR 0 3
9375: PUSH
9376: LD_INT 32
9378: EQUAL
9379: IFFALSE 9389
// sPower := true ;
9381: LD_ADDR_EXP 101
9385: PUSH
9386: LD_INT 1
9388: ST_TO_ADDR
// if p3 = 33 then
9389: LD_VAR 0 3
9393: PUSH
9394: LD_INT 33
9396: EQUAL
9397: IFFALSE 9407
// sRandom := true ;
9399: LD_ADDR_EXP 102
9403: PUSH
9404: LD_INT 1
9406: ST_TO_ADDR
// if p3 = 34 then
9407: LD_VAR 0 3
9411: PUSH
9412: LD_INT 34
9414: EQUAL
9415: IFFALSE 9425
// sShield := true ;
9417: LD_ADDR_EXP 103
9421: PUSH
9422: LD_INT 1
9424: ST_TO_ADDR
// if p3 = 35 then
9425: LD_VAR 0 3
9429: PUSH
9430: LD_INT 35
9432: EQUAL
9433: IFFALSE 9443
// sTime := true ;
9435: LD_ADDR_EXP 104
9439: PUSH
9440: LD_INT 1
9442: ST_TO_ADDR
// if p3 = 36 then
9443: LD_VAR 0 3
9447: PUSH
9448: LD_INT 36
9450: EQUAL
9451: IFFALSE 9461
// sTools := true ;
9453: LD_ADDR_EXP 105
9457: PUSH
9458: LD_INT 1
9460: ST_TO_ADDR
// if p3 = 101 then
9461: LD_VAR 0 3
9465: PUSH
9466: LD_INT 101
9468: EQUAL
9469: IFFALSE 9479
// sSold := true ;
9471: LD_ADDR_EXP 70
9475: PUSH
9476: LD_INT 1
9478: ST_TO_ADDR
// if p3 = 102 then
9479: LD_VAR 0 3
9483: PUSH
9484: LD_INT 102
9486: EQUAL
9487: IFFALSE 9497
// sDiff := true ;
9489: LD_ADDR_EXP 71
9493: PUSH
9494: LD_INT 1
9496: ST_TO_ADDR
// if p3 = 103 then
9497: LD_VAR 0 3
9501: PUSH
9502: LD_INT 103
9504: EQUAL
9505: IFFALSE 9515
// sFog := true ;
9507: LD_ADDR_EXP 74
9511: PUSH
9512: LD_INT 1
9514: ST_TO_ADDR
// if p3 = 104 then
9515: LD_VAR 0 3
9519: PUSH
9520: LD_INT 104
9522: EQUAL
9523: IFFALSE 9533
// sReset := true ;
9525: LD_ADDR_EXP 75
9529: PUSH
9530: LD_INT 1
9532: ST_TO_ADDR
// if p3 = 105 then
9533: LD_VAR 0 3
9537: PUSH
9538: LD_INT 105
9540: EQUAL
9541: IFFALSE 9551
// sSun := true ;
9543: LD_ADDR_EXP 76
9547: PUSH
9548: LD_INT 1
9550: ST_TO_ADDR
// if p3 = 106 then
9551: LD_VAR 0 3
9555: PUSH
9556: LD_INT 106
9558: EQUAL
9559: IFFALSE 9569
// sTiger := true ;
9561: LD_ADDR_EXP 72
9565: PUSH
9566: LD_INT 1
9568: ST_TO_ADDR
// if p3 = 107 then
9569: LD_VAR 0 3
9573: PUSH
9574: LD_INT 107
9576: EQUAL
9577: IFFALSE 9587
// sBomb := true ;
9579: LD_ADDR_EXP 73
9583: PUSH
9584: LD_INT 1
9586: ST_TO_ADDR
// if p3 = 108 then
9587: LD_VAR 0 3
9591: PUSH
9592: LD_INT 108
9594: EQUAL
9595: IFFALSE 9605
// sWound := true ;
9597: LD_ADDR_EXP 81
9601: PUSH
9602: LD_INT 1
9604: ST_TO_ADDR
// if p3 = 109 then
9605: LD_VAR 0 3
9609: PUSH
9610: LD_INT 109
9612: EQUAL
9613: IFFALSE 9623
// sBetray := true ;
9615: LD_ADDR_EXP 85
9619: PUSH
9620: LD_INT 1
9622: ST_TO_ADDR
// if p3 = 110 then
9623: LD_VAR 0 3
9627: PUSH
9628: LD_INT 110
9630: EQUAL
9631: IFFALSE 9641
// sContamin := true ;
9633: LD_ADDR_EXP 86
9637: PUSH
9638: LD_INT 1
9640: ST_TO_ADDR
// if p3 = 111 then
9641: LD_VAR 0 3
9645: PUSH
9646: LD_INT 111
9648: EQUAL
9649: IFFALSE 9659
// sOil := true ;
9651: LD_ADDR_EXP 88
9655: PUSH
9656: LD_INT 1
9658: ST_TO_ADDR
// if p3 = 112 then
9659: LD_VAR 0 3
9663: PUSH
9664: LD_INT 112
9666: EQUAL
9667: IFFALSE 9677
// sStu := true ;
9669: LD_ADDR_EXP 92
9673: PUSH
9674: LD_INT 1
9676: ST_TO_ADDR
// if p3 = 113 then
9677: LD_VAR 0 3
9681: PUSH
9682: LD_INT 113
9684: EQUAL
9685: IFFALSE 9695
// sBazooka := true ;
9687: LD_ADDR_EXP 95
9691: PUSH
9692: LD_INT 1
9694: ST_TO_ADDR
// if p3 = 114 then
9695: LD_VAR 0 3
9699: PUSH
9700: LD_INT 114
9702: EQUAL
9703: IFFALSE 9713
// sMortar := true ;
9705: LD_ADDR_EXP 96
9709: PUSH
9710: LD_INT 1
9712: ST_TO_ADDR
// if p3 = 115 then
9713: LD_VAR 0 3
9717: PUSH
9718: LD_INT 115
9720: EQUAL
9721: IFFALSE 9731
// sRanger := true ;
9723: LD_ADDR_EXP 106
9727: PUSH
9728: LD_INT 1
9730: ST_TO_ADDR
// if p3 = 116 then
9731: LD_VAR 0 3
9735: PUSH
9736: LD_INT 116
9738: EQUAL
9739: IFFALSE 9749
// sComputer := true ;
9741: LD_ADDR_EXP 107
9745: PUSH
9746: LD_INT 1
9748: ST_TO_ADDR
// if p3 = 117 then
9749: LD_VAR 0 3
9753: PUSH
9754: LD_INT 117
9756: EQUAL
9757: IFFALSE 9767
// s30 := true ;
9759: LD_ADDR_EXP 108
9763: PUSH
9764: LD_INT 1
9766: ST_TO_ADDR
// if p3 = 118 then
9767: LD_VAR 0 3
9771: PUSH
9772: LD_INT 118
9774: EQUAL
9775: IFFALSE 9785
// s60 := true ;
9777: LD_ADDR_EXP 109
9781: PUSH
9782: LD_INT 1
9784: ST_TO_ADDR
// end ; if p2 = hack_mode then
9785: LD_VAR 0 2
9789: PUSH
9790: LD_INT 101
9792: EQUAL
9793: IFFALSE 9921
// begin case p3 of 1 :
9795: LD_VAR 0 3
9799: PUSH
9800: LD_INT 1
9802: DOUBLE
9803: EQUAL
9804: IFTRUE 9808
9806: GO 9815
9808: POP
// hHackUnlimitedResources ; 2 :
9809: CALL 22068 0 0
9813: GO 9921
9815: LD_INT 2
9817: DOUBLE
9818: EQUAL
9819: IFTRUE 9823
9821: GO 9830
9823: POP
// hHackSetLevel10 ; 3 :
9824: CALL 22201 0 0
9828: GO 9921
9830: LD_INT 3
9832: DOUBLE
9833: EQUAL
9834: IFTRUE 9838
9836: GO 9845
9838: POP
// hHackSetLevel10YourUnits ; 4 :
9839: CALL 22286 0 0
9843: GO 9921
9845: LD_INT 4
9847: DOUBLE
9848: EQUAL
9849: IFTRUE 9853
9851: GO 9860
9853: POP
// hHackInvincible ; 5 :
9854: CALL 22734 0 0
9858: GO 9921
9860: LD_INT 5
9862: DOUBLE
9863: EQUAL
9864: IFTRUE 9868
9866: GO 9875
9868: POP
// hHackInvisible ; 6 :
9869: CALL 22845 0 0
9873: GO 9921
9875: LD_INT 6
9877: DOUBLE
9878: EQUAL
9879: IFTRUE 9883
9881: GO 9890
9883: POP
// hHackChangeYourSide ; 7 :
9884: CALL 22902 0 0
9888: GO 9921
9890: LD_INT 7
9892: DOUBLE
9893: EQUAL
9894: IFTRUE 9898
9896: GO 9905
9898: POP
// hHackChangeUnitSide ; 8 :
9899: CALL 22944 0 0
9903: GO 9921
9905: LD_INT 8
9907: DOUBLE
9908: EQUAL
9909: IFTRUE 9913
9911: GO 9920
9913: POP
// hHackFog ; end ;
9914: CALL 23045 0 0
9918: GO 9921
9920: POP
// end ; if p2 = game_save_mode then
9921: LD_VAR 0 2
9925: PUSH
9926: LD_INT 102
9928: EQUAL
9929: IFFALSE 9984
// begin if p3 = 1 then
9931: LD_VAR 0 3
9935: PUSH
9936: LD_INT 1
9938: EQUAL
9939: IFFALSE 9951
// globalGameSaveCounter := p4 ;
9941: LD_ADDR_EXP 52
9945: PUSH
9946: LD_VAR 0 4
9950: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
9951: LD_VAR 0 3
9955: PUSH
9956: LD_INT 2
9958: EQUAL
9959: PUSH
9960: LD_EXP 52
9964: AND
9965: IFFALSE 9984
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
9967: LD_STRING setGameSaveCounter(
9969: PUSH
9970: LD_EXP 52
9974: STR
9975: PUSH
9976: LD_STRING )
9978: STR
9979: PPUSH
9980: CALL_OW 559
// end ; end ;
9984: LD_VAR 0 7
9988: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
9989: LD_INT 0
9991: PPUSH
// streamModeActive := false ;
9992: LD_ADDR_EXP 53
9996: PUSH
9997: LD_INT 0
9999: ST_TO_ADDR
// normalCounter := 36 ;
10000: LD_ADDR_EXP 54
10004: PUSH
10005: LD_INT 36
10007: ST_TO_ADDR
// hardcoreCounter := 18 ;
10008: LD_ADDR_EXP 55
10012: PUSH
10013: LD_INT 18
10015: ST_TO_ADDR
// sRocket := false ;
10016: LD_ADDR_EXP 58
10020: PUSH
10021: LD_INT 0
10023: ST_TO_ADDR
// sSpeed := false ;
10024: LD_ADDR_EXP 57
10028: PUSH
10029: LD_INT 0
10031: ST_TO_ADDR
// sEngine := false ;
10032: LD_ADDR_EXP 59
10036: PUSH
10037: LD_INT 0
10039: ST_TO_ADDR
// sSpec := false ;
10040: LD_ADDR_EXP 56
10044: PUSH
10045: LD_INT 0
10047: ST_TO_ADDR
// sLevel := false ;
10048: LD_ADDR_EXP 60
10052: PUSH
10053: LD_INT 0
10055: ST_TO_ADDR
// sArmoury := false ;
10056: LD_ADDR_EXP 61
10060: PUSH
10061: LD_INT 0
10063: ST_TO_ADDR
// sRadar := false ;
10064: LD_ADDR_EXP 62
10068: PUSH
10069: LD_INT 0
10071: ST_TO_ADDR
// sBunker := false ;
10072: LD_ADDR_EXP 63
10076: PUSH
10077: LD_INT 0
10079: ST_TO_ADDR
// sHack := false ;
10080: LD_ADDR_EXP 64
10084: PUSH
10085: LD_INT 0
10087: ST_TO_ADDR
// sFire := false ;
10088: LD_ADDR_EXP 65
10092: PUSH
10093: LD_INT 0
10095: ST_TO_ADDR
// sRefresh := false ;
10096: LD_ADDR_EXP 66
10100: PUSH
10101: LD_INT 0
10103: ST_TO_ADDR
// sExp := false ;
10104: LD_ADDR_EXP 67
10108: PUSH
10109: LD_INT 0
10111: ST_TO_ADDR
// sDepot := false ;
10112: LD_ADDR_EXP 68
10116: PUSH
10117: LD_INT 0
10119: ST_TO_ADDR
// sFlag := false ;
10120: LD_ADDR_EXP 69
10124: PUSH
10125: LD_INT 0
10127: ST_TO_ADDR
// sKamikadze := false ;
10128: LD_ADDR_EXP 77
10132: PUSH
10133: LD_INT 0
10135: ST_TO_ADDR
// sTroll := false ;
10136: LD_ADDR_EXP 78
10140: PUSH
10141: LD_INT 0
10143: ST_TO_ADDR
// sSlow := false ;
10144: LD_ADDR_EXP 79
10148: PUSH
10149: LD_INT 0
10151: ST_TO_ADDR
// sLack := false ;
10152: LD_ADDR_EXP 80
10156: PUSH
10157: LD_INT 0
10159: ST_TO_ADDR
// sTank := false ;
10160: LD_ADDR_EXP 82
10164: PUSH
10165: LD_INT 0
10167: ST_TO_ADDR
// sRemote := false ;
10168: LD_ADDR_EXP 83
10172: PUSH
10173: LD_INT 0
10175: ST_TO_ADDR
// sPowell := false ;
10176: LD_ADDR_EXP 84
10180: PUSH
10181: LD_INT 0
10183: ST_TO_ADDR
// sTeleport := false ;
10184: LD_ADDR_EXP 87
10188: PUSH
10189: LD_INT 0
10191: ST_TO_ADDR
// sOilTower := false ;
10192: LD_ADDR_EXP 89
10196: PUSH
10197: LD_INT 0
10199: ST_TO_ADDR
// sShovel := false ;
10200: LD_ADDR_EXP 90
10204: PUSH
10205: LD_INT 0
10207: ST_TO_ADDR
// sSheik := false ;
10208: LD_ADDR_EXP 91
10212: PUSH
10213: LD_INT 0
10215: ST_TO_ADDR
// sEarthquake := false ;
10216: LD_ADDR_EXP 93
10220: PUSH
10221: LD_INT 0
10223: ST_TO_ADDR
// sAI := false ;
10224: LD_ADDR_EXP 94
10228: PUSH
10229: LD_INT 0
10231: ST_TO_ADDR
// sCargo := false ;
10232: LD_ADDR_EXP 97
10236: PUSH
10237: LD_INT 0
10239: ST_TO_ADDR
// sDLaser := false ;
10240: LD_ADDR_EXP 98
10244: PUSH
10245: LD_INT 0
10247: ST_TO_ADDR
// sExchange := false ;
10248: LD_ADDR_EXP 99
10252: PUSH
10253: LD_INT 0
10255: ST_TO_ADDR
// sFac := false ;
10256: LD_ADDR_EXP 100
10260: PUSH
10261: LD_INT 0
10263: ST_TO_ADDR
// sPower := false ;
10264: LD_ADDR_EXP 101
10268: PUSH
10269: LD_INT 0
10271: ST_TO_ADDR
// sRandom := false ;
10272: LD_ADDR_EXP 102
10276: PUSH
10277: LD_INT 0
10279: ST_TO_ADDR
// sShield := false ;
10280: LD_ADDR_EXP 103
10284: PUSH
10285: LD_INT 0
10287: ST_TO_ADDR
// sTime := false ;
10288: LD_ADDR_EXP 104
10292: PUSH
10293: LD_INT 0
10295: ST_TO_ADDR
// sTools := false ;
10296: LD_ADDR_EXP 105
10300: PUSH
10301: LD_INT 0
10303: ST_TO_ADDR
// sSold := false ;
10304: LD_ADDR_EXP 70
10308: PUSH
10309: LD_INT 0
10311: ST_TO_ADDR
// sDiff := false ;
10312: LD_ADDR_EXP 71
10316: PUSH
10317: LD_INT 0
10319: ST_TO_ADDR
// sFog := false ;
10320: LD_ADDR_EXP 74
10324: PUSH
10325: LD_INT 0
10327: ST_TO_ADDR
// sReset := false ;
10328: LD_ADDR_EXP 75
10332: PUSH
10333: LD_INT 0
10335: ST_TO_ADDR
// sSun := false ;
10336: LD_ADDR_EXP 76
10340: PUSH
10341: LD_INT 0
10343: ST_TO_ADDR
// sTiger := false ;
10344: LD_ADDR_EXP 72
10348: PUSH
10349: LD_INT 0
10351: ST_TO_ADDR
// sBomb := false ;
10352: LD_ADDR_EXP 73
10356: PUSH
10357: LD_INT 0
10359: ST_TO_ADDR
// sWound := false ;
10360: LD_ADDR_EXP 81
10364: PUSH
10365: LD_INT 0
10367: ST_TO_ADDR
// sBetray := false ;
10368: LD_ADDR_EXP 85
10372: PUSH
10373: LD_INT 0
10375: ST_TO_ADDR
// sContamin := false ;
10376: LD_ADDR_EXP 86
10380: PUSH
10381: LD_INT 0
10383: ST_TO_ADDR
// sOil := false ;
10384: LD_ADDR_EXP 88
10388: PUSH
10389: LD_INT 0
10391: ST_TO_ADDR
// sStu := false ;
10392: LD_ADDR_EXP 92
10396: PUSH
10397: LD_INT 0
10399: ST_TO_ADDR
// sBazooka := false ;
10400: LD_ADDR_EXP 95
10404: PUSH
10405: LD_INT 0
10407: ST_TO_ADDR
// sMortar := false ;
10408: LD_ADDR_EXP 96
10412: PUSH
10413: LD_INT 0
10415: ST_TO_ADDR
// sRanger := false ;
10416: LD_ADDR_EXP 106
10420: PUSH
10421: LD_INT 0
10423: ST_TO_ADDR
// sComputer := false ;
10424: LD_ADDR_EXP 107
10428: PUSH
10429: LD_INT 0
10431: ST_TO_ADDR
// s30 := false ;
10432: LD_ADDR_EXP 108
10436: PUSH
10437: LD_INT 0
10439: ST_TO_ADDR
// s60 := false ;
10440: LD_ADDR_EXP 109
10444: PUSH
10445: LD_INT 0
10447: ST_TO_ADDR
// end ;
10448: LD_VAR 0 1
10452: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
10453: LD_INT 0
10455: PPUSH
10456: PPUSH
10457: PPUSH
10458: PPUSH
10459: PPUSH
10460: PPUSH
10461: PPUSH
// result := [ ] ;
10462: LD_ADDR_VAR 0 2
10466: PUSH
10467: EMPTY
10468: ST_TO_ADDR
// if campaign_id = 1 then
10469: LD_OWVAR 69
10473: PUSH
10474: LD_INT 1
10476: EQUAL
10477: IFFALSE 13643
// begin case mission_number of 1 :
10479: LD_OWVAR 70
10483: PUSH
10484: LD_INT 1
10486: DOUBLE
10487: EQUAL
10488: IFTRUE 10492
10490: GO 10568
10492: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
10493: LD_ADDR_VAR 0 2
10497: PUSH
10498: LD_INT 2
10500: PUSH
10501: LD_INT 4
10503: PUSH
10504: LD_INT 11
10506: PUSH
10507: LD_INT 12
10509: PUSH
10510: LD_INT 15
10512: PUSH
10513: LD_INT 16
10515: PUSH
10516: LD_INT 22
10518: PUSH
10519: LD_INT 23
10521: PUSH
10522: LD_INT 26
10524: PUSH
10525: EMPTY
10526: LIST
10527: LIST
10528: LIST
10529: LIST
10530: LIST
10531: LIST
10532: LIST
10533: LIST
10534: LIST
10535: PUSH
10536: LD_INT 101
10538: PUSH
10539: LD_INT 102
10541: PUSH
10542: LD_INT 106
10544: PUSH
10545: LD_INT 116
10547: PUSH
10548: LD_INT 117
10550: PUSH
10551: LD_INT 118
10553: PUSH
10554: EMPTY
10555: LIST
10556: LIST
10557: LIST
10558: LIST
10559: LIST
10560: LIST
10561: PUSH
10562: EMPTY
10563: LIST
10564: LIST
10565: ST_TO_ADDR
10566: GO 13641
10568: LD_INT 2
10570: DOUBLE
10571: EQUAL
10572: IFTRUE 10576
10574: GO 10660
10576: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
10577: LD_ADDR_VAR 0 2
10581: PUSH
10582: LD_INT 2
10584: PUSH
10585: LD_INT 4
10587: PUSH
10588: LD_INT 11
10590: PUSH
10591: LD_INT 12
10593: PUSH
10594: LD_INT 15
10596: PUSH
10597: LD_INT 16
10599: PUSH
10600: LD_INT 22
10602: PUSH
10603: LD_INT 23
10605: PUSH
10606: LD_INT 26
10608: PUSH
10609: EMPTY
10610: LIST
10611: LIST
10612: LIST
10613: LIST
10614: LIST
10615: LIST
10616: LIST
10617: LIST
10618: LIST
10619: PUSH
10620: LD_INT 101
10622: PUSH
10623: LD_INT 102
10625: PUSH
10626: LD_INT 105
10628: PUSH
10629: LD_INT 106
10631: PUSH
10632: LD_INT 108
10634: PUSH
10635: LD_INT 116
10637: PUSH
10638: LD_INT 117
10640: PUSH
10641: LD_INT 118
10643: PUSH
10644: EMPTY
10645: LIST
10646: LIST
10647: LIST
10648: LIST
10649: LIST
10650: LIST
10651: LIST
10652: LIST
10653: PUSH
10654: EMPTY
10655: LIST
10656: LIST
10657: ST_TO_ADDR
10658: GO 13641
10660: LD_INT 3
10662: DOUBLE
10663: EQUAL
10664: IFTRUE 10668
10666: GO 10756
10668: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
10669: LD_ADDR_VAR 0 2
10673: PUSH
10674: LD_INT 2
10676: PUSH
10677: LD_INT 4
10679: PUSH
10680: LD_INT 5
10682: PUSH
10683: LD_INT 11
10685: PUSH
10686: LD_INT 12
10688: PUSH
10689: LD_INT 15
10691: PUSH
10692: LD_INT 16
10694: PUSH
10695: LD_INT 22
10697: PUSH
10698: LD_INT 26
10700: PUSH
10701: LD_INT 36
10703: PUSH
10704: EMPTY
10705: LIST
10706: LIST
10707: LIST
10708: LIST
10709: LIST
10710: LIST
10711: LIST
10712: LIST
10713: LIST
10714: LIST
10715: PUSH
10716: LD_INT 101
10718: PUSH
10719: LD_INT 102
10721: PUSH
10722: LD_INT 105
10724: PUSH
10725: LD_INT 106
10727: PUSH
10728: LD_INT 108
10730: PUSH
10731: LD_INT 116
10733: PUSH
10734: LD_INT 117
10736: PUSH
10737: LD_INT 118
10739: PUSH
10740: EMPTY
10741: LIST
10742: LIST
10743: LIST
10744: LIST
10745: LIST
10746: LIST
10747: LIST
10748: LIST
10749: PUSH
10750: EMPTY
10751: LIST
10752: LIST
10753: ST_TO_ADDR
10754: GO 13641
10756: LD_INT 4
10758: DOUBLE
10759: EQUAL
10760: IFTRUE 10764
10762: GO 10860
10764: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
10765: LD_ADDR_VAR 0 2
10769: PUSH
10770: LD_INT 2
10772: PUSH
10773: LD_INT 4
10775: PUSH
10776: LD_INT 5
10778: PUSH
10779: LD_INT 8
10781: PUSH
10782: LD_INT 11
10784: PUSH
10785: LD_INT 12
10787: PUSH
10788: LD_INT 15
10790: PUSH
10791: LD_INT 16
10793: PUSH
10794: LD_INT 22
10796: PUSH
10797: LD_INT 23
10799: PUSH
10800: LD_INT 26
10802: PUSH
10803: LD_INT 36
10805: PUSH
10806: EMPTY
10807: LIST
10808: LIST
10809: LIST
10810: LIST
10811: LIST
10812: LIST
10813: LIST
10814: LIST
10815: LIST
10816: LIST
10817: LIST
10818: LIST
10819: PUSH
10820: LD_INT 101
10822: PUSH
10823: LD_INT 102
10825: PUSH
10826: LD_INT 105
10828: PUSH
10829: LD_INT 106
10831: PUSH
10832: LD_INT 108
10834: PUSH
10835: LD_INT 116
10837: PUSH
10838: LD_INT 117
10840: PUSH
10841: LD_INT 118
10843: PUSH
10844: EMPTY
10845: LIST
10846: LIST
10847: LIST
10848: LIST
10849: LIST
10850: LIST
10851: LIST
10852: LIST
10853: PUSH
10854: EMPTY
10855: LIST
10856: LIST
10857: ST_TO_ADDR
10858: GO 13641
10860: LD_INT 5
10862: DOUBLE
10863: EQUAL
10864: IFTRUE 10868
10866: GO 10980
10868: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
10869: LD_ADDR_VAR 0 2
10873: PUSH
10874: LD_INT 2
10876: PUSH
10877: LD_INT 4
10879: PUSH
10880: LD_INT 5
10882: PUSH
10883: LD_INT 6
10885: PUSH
10886: LD_INT 8
10888: PUSH
10889: LD_INT 11
10891: PUSH
10892: LD_INT 12
10894: PUSH
10895: LD_INT 15
10897: PUSH
10898: LD_INT 16
10900: PUSH
10901: LD_INT 22
10903: PUSH
10904: LD_INT 23
10906: PUSH
10907: LD_INT 25
10909: PUSH
10910: LD_INT 26
10912: PUSH
10913: LD_INT 36
10915: PUSH
10916: EMPTY
10917: LIST
10918: LIST
10919: LIST
10920: LIST
10921: LIST
10922: LIST
10923: LIST
10924: LIST
10925: LIST
10926: LIST
10927: LIST
10928: LIST
10929: LIST
10930: LIST
10931: PUSH
10932: LD_INT 101
10934: PUSH
10935: LD_INT 102
10937: PUSH
10938: LD_INT 105
10940: PUSH
10941: LD_INT 106
10943: PUSH
10944: LD_INT 108
10946: PUSH
10947: LD_INT 109
10949: PUSH
10950: LD_INT 112
10952: PUSH
10953: LD_INT 116
10955: PUSH
10956: LD_INT 117
10958: PUSH
10959: LD_INT 118
10961: PUSH
10962: EMPTY
10963: LIST
10964: LIST
10965: LIST
10966: LIST
10967: LIST
10968: LIST
10969: LIST
10970: LIST
10971: LIST
10972: LIST
10973: PUSH
10974: EMPTY
10975: LIST
10976: LIST
10977: ST_TO_ADDR
10978: GO 13641
10980: LD_INT 6
10982: DOUBLE
10983: EQUAL
10984: IFTRUE 10988
10986: GO 11120
10988: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
10989: LD_ADDR_VAR 0 2
10993: PUSH
10994: LD_INT 2
10996: PUSH
10997: LD_INT 4
10999: PUSH
11000: LD_INT 5
11002: PUSH
11003: LD_INT 6
11005: PUSH
11006: LD_INT 8
11008: PUSH
11009: LD_INT 11
11011: PUSH
11012: LD_INT 12
11014: PUSH
11015: LD_INT 15
11017: PUSH
11018: LD_INT 16
11020: PUSH
11021: LD_INT 20
11023: PUSH
11024: LD_INT 21
11026: PUSH
11027: LD_INT 22
11029: PUSH
11030: LD_INT 23
11032: PUSH
11033: LD_INT 25
11035: PUSH
11036: LD_INT 26
11038: PUSH
11039: LD_INT 30
11041: PUSH
11042: LD_INT 31
11044: PUSH
11045: LD_INT 32
11047: PUSH
11048: LD_INT 36
11050: PUSH
11051: EMPTY
11052: LIST
11053: LIST
11054: LIST
11055: LIST
11056: LIST
11057: LIST
11058: LIST
11059: LIST
11060: LIST
11061: LIST
11062: LIST
11063: LIST
11064: LIST
11065: LIST
11066: LIST
11067: LIST
11068: LIST
11069: LIST
11070: LIST
11071: PUSH
11072: LD_INT 101
11074: PUSH
11075: LD_INT 102
11077: PUSH
11078: LD_INT 105
11080: PUSH
11081: LD_INT 106
11083: PUSH
11084: LD_INT 108
11086: PUSH
11087: LD_INT 109
11089: PUSH
11090: LD_INT 112
11092: PUSH
11093: LD_INT 116
11095: PUSH
11096: LD_INT 117
11098: PUSH
11099: LD_INT 118
11101: PUSH
11102: EMPTY
11103: LIST
11104: LIST
11105: LIST
11106: LIST
11107: LIST
11108: LIST
11109: LIST
11110: LIST
11111: LIST
11112: LIST
11113: PUSH
11114: EMPTY
11115: LIST
11116: LIST
11117: ST_TO_ADDR
11118: GO 13641
11120: LD_INT 7
11122: DOUBLE
11123: EQUAL
11124: IFTRUE 11128
11126: GO 11240
11128: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
11129: LD_ADDR_VAR 0 2
11133: PUSH
11134: LD_INT 2
11136: PUSH
11137: LD_INT 4
11139: PUSH
11140: LD_INT 5
11142: PUSH
11143: LD_INT 7
11145: PUSH
11146: LD_INT 11
11148: PUSH
11149: LD_INT 12
11151: PUSH
11152: LD_INT 15
11154: PUSH
11155: LD_INT 16
11157: PUSH
11158: LD_INT 20
11160: PUSH
11161: LD_INT 21
11163: PUSH
11164: LD_INT 22
11166: PUSH
11167: LD_INT 23
11169: PUSH
11170: LD_INT 25
11172: PUSH
11173: LD_INT 26
11175: PUSH
11176: EMPTY
11177: LIST
11178: LIST
11179: LIST
11180: LIST
11181: LIST
11182: LIST
11183: LIST
11184: LIST
11185: LIST
11186: LIST
11187: LIST
11188: LIST
11189: LIST
11190: LIST
11191: PUSH
11192: LD_INT 101
11194: PUSH
11195: LD_INT 102
11197: PUSH
11198: LD_INT 103
11200: PUSH
11201: LD_INT 105
11203: PUSH
11204: LD_INT 106
11206: PUSH
11207: LD_INT 108
11209: PUSH
11210: LD_INT 112
11212: PUSH
11213: LD_INT 116
11215: PUSH
11216: LD_INT 117
11218: PUSH
11219: LD_INT 118
11221: PUSH
11222: EMPTY
11223: LIST
11224: LIST
11225: LIST
11226: LIST
11227: LIST
11228: LIST
11229: LIST
11230: LIST
11231: LIST
11232: LIST
11233: PUSH
11234: EMPTY
11235: LIST
11236: LIST
11237: ST_TO_ADDR
11238: GO 13641
11240: LD_INT 8
11242: DOUBLE
11243: EQUAL
11244: IFTRUE 11248
11246: GO 11388
11248: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
11249: LD_ADDR_VAR 0 2
11253: PUSH
11254: LD_INT 2
11256: PUSH
11257: LD_INT 4
11259: PUSH
11260: LD_INT 5
11262: PUSH
11263: LD_INT 6
11265: PUSH
11266: LD_INT 7
11268: PUSH
11269: LD_INT 8
11271: PUSH
11272: LD_INT 11
11274: PUSH
11275: LD_INT 12
11277: PUSH
11278: LD_INT 15
11280: PUSH
11281: LD_INT 16
11283: PUSH
11284: LD_INT 20
11286: PUSH
11287: LD_INT 21
11289: PUSH
11290: LD_INT 22
11292: PUSH
11293: LD_INT 23
11295: PUSH
11296: LD_INT 25
11298: PUSH
11299: LD_INT 26
11301: PUSH
11302: LD_INT 30
11304: PUSH
11305: LD_INT 31
11307: PUSH
11308: LD_INT 32
11310: PUSH
11311: LD_INT 36
11313: PUSH
11314: EMPTY
11315: LIST
11316: LIST
11317: LIST
11318: LIST
11319: LIST
11320: LIST
11321: LIST
11322: LIST
11323: LIST
11324: LIST
11325: LIST
11326: LIST
11327: LIST
11328: LIST
11329: LIST
11330: LIST
11331: LIST
11332: LIST
11333: LIST
11334: LIST
11335: PUSH
11336: LD_INT 101
11338: PUSH
11339: LD_INT 102
11341: PUSH
11342: LD_INT 103
11344: PUSH
11345: LD_INT 105
11347: PUSH
11348: LD_INT 106
11350: PUSH
11351: LD_INT 108
11353: PUSH
11354: LD_INT 109
11356: PUSH
11357: LD_INT 112
11359: PUSH
11360: LD_INT 116
11362: PUSH
11363: LD_INT 117
11365: PUSH
11366: LD_INT 118
11368: PUSH
11369: EMPTY
11370: LIST
11371: LIST
11372: LIST
11373: LIST
11374: LIST
11375: LIST
11376: LIST
11377: LIST
11378: LIST
11379: LIST
11380: LIST
11381: PUSH
11382: EMPTY
11383: LIST
11384: LIST
11385: ST_TO_ADDR
11386: GO 13641
11388: LD_INT 9
11390: DOUBLE
11391: EQUAL
11392: IFTRUE 11396
11394: GO 11544
11396: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
11397: LD_ADDR_VAR 0 2
11401: PUSH
11402: LD_INT 2
11404: PUSH
11405: LD_INT 4
11407: PUSH
11408: LD_INT 5
11410: PUSH
11411: LD_INT 6
11413: PUSH
11414: LD_INT 7
11416: PUSH
11417: LD_INT 8
11419: PUSH
11420: LD_INT 11
11422: PUSH
11423: LD_INT 12
11425: PUSH
11426: LD_INT 15
11428: PUSH
11429: LD_INT 16
11431: PUSH
11432: LD_INT 20
11434: PUSH
11435: LD_INT 21
11437: PUSH
11438: LD_INT 22
11440: PUSH
11441: LD_INT 23
11443: PUSH
11444: LD_INT 25
11446: PUSH
11447: LD_INT 26
11449: PUSH
11450: LD_INT 28
11452: PUSH
11453: LD_INT 30
11455: PUSH
11456: LD_INT 31
11458: PUSH
11459: LD_INT 32
11461: PUSH
11462: LD_INT 36
11464: PUSH
11465: EMPTY
11466: LIST
11467: LIST
11468: LIST
11469: LIST
11470: LIST
11471: LIST
11472: LIST
11473: LIST
11474: LIST
11475: LIST
11476: LIST
11477: LIST
11478: LIST
11479: LIST
11480: LIST
11481: LIST
11482: LIST
11483: LIST
11484: LIST
11485: LIST
11486: LIST
11487: PUSH
11488: LD_INT 101
11490: PUSH
11491: LD_INT 102
11493: PUSH
11494: LD_INT 103
11496: PUSH
11497: LD_INT 105
11499: PUSH
11500: LD_INT 106
11502: PUSH
11503: LD_INT 108
11505: PUSH
11506: LD_INT 109
11508: PUSH
11509: LD_INT 112
11511: PUSH
11512: LD_INT 114
11514: PUSH
11515: LD_INT 116
11517: PUSH
11518: LD_INT 117
11520: PUSH
11521: LD_INT 118
11523: PUSH
11524: EMPTY
11525: LIST
11526: LIST
11527: LIST
11528: LIST
11529: LIST
11530: LIST
11531: LIST
11532: LIST
11533: LIST
11534: LIST
11535: LIST
11536: LIST
11537: PUSH
11538: EMPTY
11539: LIST
11540: LIST
11541: ST_TO_ADDR
11542: GO 13641
11544: LD_INT 10
11546: DOUBLE
11547: EQUAL
11548: IFTRUE 11552
11550: GO 11748
11552: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
11553: LD_ADDR_VAR 0 2
11557: PUSH
11558: LD_INT 2
11560: PUSH
11561: LD_INT 4
11563: PUSH
11564: LD_INT 5
11566: PUSH
11567: LD_INT 6
11569: PUSH
11570: LD_INT 7
11572: PUSH
11573: LD_INT 8
11575: PUSH
11576: LD_INT 9
11578: PUSH
11579: LD_INT 10
11581: PUSH
11582: LD_INT 11
11584: PUSH
11585: LD_INT 12
11587: PUSH
11588: LD_INT 13
11590: PUSH
11591: LD_INT 14
11593: PUSH
11594: LD_INT 15
11596: PUSH
11597: LD_INT 16
11599: PUSH
11600: LD_INT 17
11602: PUSH
11603: LD_INT 18
11605: PUSH
11606: LD_INT 19
11608: PUSH
11609: LD_INT 20
11611: PUSH
11612: LD_INT 21
11614: PUSH
11615: LD_INT 22
11617: PUSH
11618: LD_INT 23
11620: PUSH
11621: LD_INT 24
11623: PUSH
11624: LD_INT 25
11626: PUSH
11627: LD_INT 26
11629: PUSH
11630: LD_INT 28
11632: PUSH
11633: LD_INT 30
11635: PUSH
11636: LD_INT 31
11638: PUSH
11639: LD_INT 32
11641: PUSH
11642: LD_INT 36
11644: PUSH
11645: EMPTY
11646: LIST
11647: LIST
11648: LIST
11649: LIST
11650: LIST
11651: LIST
11652: LIST
11653: LIST
11654: LIST
11655: LIST
11656: LIST
11657: LIST
11658: LIST
11659: LIST
11660: LIST
11661: LIST
11662: LIST
11663: LIST
11664: LIST
11665: LIST
11666: LIST
11667: LIST
11668: LIST
11669: LIST
11670: LIST
11671: LIST
11672: LIST
11673: LIST
11674: LIST
11675: PUSH
11676: LD_INT 101
11678: PUSH
11679: LD_INT 102
11681: PUSH
11682: LD_INT 103
11684: PUSH
11685: LD_INT 104
11687: PUSH
11688: LD_INT 105
11690: PUSH
11691: LD_INT 106
11693: PUSH
11694: LD_INT 107
11696: PUSH
11697: LD_INT 108
11699: PUSH
11700: LD_INT 109
11702: PUSH
11703: LD_INT 110
11705: PUSH
11706: LD_INT 111
11708: PUSH
11709: LD_INT 112
11711: PUSH
11712: LD_INT 114
11714: PUSH
11715: LD_INT 116
11717: PUSH
11718: LD_INT 117
11720: PUSH
11721: LD_INT 118
11723: PUSH
11724: EMPTY
11725: LIST
11726: LIST
11727: LIST
11728: LIST
11729: LIST
11730: LIST
11731: LIST
11732: LIST
11733: LIST
11734: LIST
11735: LIST
11736: LIST
11737: LIST
11738: LIST
11739: LIST
11740: LIST
11741: PUSH
11742: EMPTY
11743: LIST
11744: LIST
11745: ST_TO_ADDR
11746: GO 13641
11748: LD_INT 11
11750: DOUBLE
11751: EQUAL
11752: IFTRUE 11756
11754: GO 11960
11756: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
11757: LD_ADDR_VAR 0 2
11761: PUSH
11762: LD_INT 2
11764: PUSH
11765: LD_INT 3
11767: PUSH
11768: LD_INT 4
11770: PUSH
11771: LD_INT 5
11773: PUSH
11774: LD_INT 6
11776: PUSH
11777: LD_INT 7
11779: PUSH
11780: LD_INT 8
11782: PUSH
11783: LD_INT 9
11785: PUSH
11786: LD_INT 10
11788: PUSH
11789: LD_INT 11
11791: PUSH
11792: LD_INT 12
11794: PUSH
11795: LD_INT 13
11797: PUSH
11798: LD_INT 14
11800: PUSH
11801: LD_INT 15
11803: PUSH
11804: LD_INT 16
11806: PUSH
11807: LD_INT 17
11809: PUSH
11810: LD_INT 18
11812: PUSH
11813: LD_INT 19
11815: PUSH
11816: LD_INT 20
11818: PUSH
11819: LD_INT 21
11821: PUSH
11822: LD_INT 22
11824: PUSH
11825: LD_INT 23
11827: PUSH
11828: LD_INT 24
11830: PUSH
11831: LD_INT 25
11833: PUSH
11834: LD_INT 26
11836: PUSH
11837: LD_INT 28
11839: PUSH
11840: LD_INT 30
11842: PUSH
11843: LD_INT 31
11845: PUSH
11846: LD_INT 32
11848: PUSH
11849: LD_INT 34
11851: PUSH
11852: LD_INT 36
11854: PUSH
11855: EMPTY
11856: LIST
11857: LIST
11858: LIST
11859: LIST
11860: LIST
11861: LIST
11862: LIST
11863: LIST
11864: LIST
11865: LIST
11866: LIST
11867: LIST
11868: LIST
11869: LIST
11870: LIST
11871: LIST
11872: LIST
11873: LIST
11874: LIST
11875: LIST
11876: LIST
11877: LIST
11878: LIST
11879: LIST
11880: LIST
11881: LIST
11882: LIST
11883: LIST
11884: LIST
11885: LIST
11886: LIST
11887: PUSH
11888: LD_INT 101
11890: PUSH
11891: LD_INT 102
11893: PUSH
11894: LD_INT 103
11896: PUSH
11897: LD_INT 104
11899: PUSH
11900: LD_INT 105
11902: PUSH
11903: LD_INT 106
11905: PUSH
11906: LD_INT 107
11908: PUSH
11909: LD_INT 108
11911: PUSH
11912: LD_INT 109
11914: PUSH
11915: LD_INT 110
11917: PUSH
11918: LD_INT 111
11920: PUSH
11921: LD_INT 112
11923: PUSH
11924: LD_INT 114
11926: PUSH
11927: LD_INT 116
11929: PUSH
11930: LD_INT 117
11932: PUSH
11933: LD_INT 118
11935: PUSH
11936: EMPTY
11937: LIST
11938: LIST
11939: LIST
11940: LIST
11941: LIST
11942: LIST
11943: LIST
11944: LIST
11945: LIST
11946: LIST
11947: LIST
11948: LIST
11949: LIST
11950: LIST
11951: LIST
11952: LIST
11953: PUSH
11954: EMPTY
11955: LIST
11956: LIST
11957: ST_TO_ADDR
11958: GO 13641
11960: LD_INT 12
11962: DOUBLE
11963: EQUAL
11964: IFTRUE 11968
11966: GO 12188
11968: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
11969: LD_ADDR_VAR 0 2
11973: PUSH
11974: LD_INT 1
11976: PUSH
11977: LD_INT 2
11979: PUSH
11980: LD_INT 3
11982: PUSH
11983: LD_INT 4
11985: PUSH
11986: LD_INT 5
11988: PUSH
11989: LD_INT 6
11991: PUSH
11992: LD_INT 7
11994: PUSH
11995: LD_INT 8
11997: PUSH
11998: LD_INT 9
12000: PUSH
12001: LD_INT 10
12003: PUSH
12004: LD_INT 11
12006: PUSH
12007: LD_INT 12
12009: PUSH
12010: LD_INT 13
12012: PUSH
12013: LD_INT 14
12015: PUSH
12016: LD_INT 15
12018: PUSH
12019: LD_INT 16
12021: PUSH
12022: LD_INT 17
12024: PUSH
12025: LD_INT 18
12027: PUSH
12028: LD_INT 19
12030: PUSH
12031: LD_INT 20
12033: PUSH
12034: LD_INT 21
12036: PUSH
12037: LD_INT 22
12039: PUSH
12040: LD_INT 23
12042: PUSH
12043: LD_INT 24
12045: PUSH
12046: LD_INT 25
12048: PUSH
12049: LD_INT 26
12051: PUSH
12052: LD_INT 27
12054: PUSH
12055: LD_INT 28
12057: PUSH
12058: LD_INT 30
12060: PUSH
12061: LD_INT 31
12063: PUSH
12064: LD_INT 32
12066: PUSH
12067: LD_INT 33
12069: PUSH
12070: LD_INT 34
12072: PUSH
12073: LD_INT 36
12075: PUSH
12076: EMPTY
12077: LIST
12078: LIST
12079: LIST
12080: LIST
12081: LIST
12082: LIST
12083: LIST
12084: LIST
12085: LIST
12086: LIST
12087: LIST
12088: LIST
12089: LIST
12090: LIST
12091: LIST
12092: LIST
12093: LIST
12094: LIST
12095: LIST
12096: LIST
12097: LIST
12098: LIST
12099: LIST
12100: LIST
12101: LIST
12102: LIST
12103: LIST
12104: LIST
12105: LIST
12106: LIST
12107: LIST
12108: LIST
12109: LIST
12110: LIST
12111: PUSH
12112: LD_INT 101
12114: PUSH
12115: LD_INT 102
12117: PUSH
12118: LD_INT 103
12120: PUSH
12121: LD_INT 104
12123: PUSH
12124: LD_INT 105
12126: PUSH
12127: LD_INT 106
12129: PUSH
12130: LD_INT 107
12132: PUSH
12133: LD_INT 108
12135: PUSH
12136: LD_INT 109
12138: PUSH
12139: LD_INT 110
12141: PUSH
12142: LD_INT 111
12144: PUSH
12145: LD_INT 112
12147: PUSH
12148: LD_INT 113
12150: PUSH
12151: LD_INT 114
12153: PUSH
12154: LD_INT 116
12156: PUSH
12157: LD_INT 117
12159: PUSH
12160: LD_INT 118
12162: PUSH
12163: EMPTY
12164: LIST
12165: LIST
12166: LIST
12167: LIST
12168: LIST
12169: LIST
12170: LIST
12171: LIST
12172: LIST
12173: LIST
12174: LIST
12175: LIST
12176: LIST
12177: LIST
12178: LIST
12179: LIST
12180: LIST
12181: PUSH
12182: EMPTY
12183: LIST
12184: LIST
12185: ST_TO_ADDR
12186: GO 13641
12188: LD_INT 13
12190: DOUBLE
12191: EQUAL
12192: IFTRUE 12196
12194: GO 12404
12196: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
12197: LD_ADDR_VAR 0 2
12201: PUSH
12202: LD_INT 1
12204: PUSH
12205: LD_INT 2
12207: PUSH
12208: LD_INT 3
12210: PUSH
12211: LD_INT 4
12213: PUSH
12214: LD_INT 5
12216: PUSH
12217: LD_INT 8
12219: PUSH
12220: LD_INT 9
12222: PUSH
12223: LD_INT 10
12225: PUSH
12226: LD_INT 11
12228: PUSH
12229: LD_INT 12
12231: PUSH
12232: LD_INT 14
12234: PUSH
12235: LD_INT 15
12237: PUSH
12238: LD_INT 16
12240: PUSH
12241: LD_INT 17
12243: PUSH
12244: LD_INT 18
12246: PUSH
12247: LD_INT 19
12249: PUSH
12250: LD_INT 20
12252: PUSH
12253: LD_INT 21
12255: PUSH
12256: LD_INT 22
12258: PUSH
12259: LD_INT 23
12261: PUSH
12262: LD_INT 24
12264: PUSH
12265: LD_INT 25
12267: PUSH
12268: LD_INT 26
12270: PUSH
12271: LD_INT 27
12273: PUSH
12274: LD_INT 28
12276: PUSH
12277: LD_INT 30
12279: PUSH
12280: LD_INT 31
12282: PUSH
12283: LD_INT 32
12285: PUSH
12286: LD_INT 33
12288: PUSH
12289: LD_INT 34
12291: PUSH
12292: LD_INT 36
12294: PUSH
12295: EMPTY
12296: LIST
12297: LIST
12298: LIST
12299: LIST
12300: LIST
12301: LIST
12302: LIST
12303: LIST
12304: LIST
12305: LIST
12306: LIST
12307: LIST
12308: LIST
12309: LIST
12310: LIST
12311: LIST
12312: LIST
12313: LIST
12314: LIST
12315: LIST
12316: LIST
12317: LIST
12318: LIST
12319: LIST
12320: LIST
12321: LIST
12322: LIST
12323: LIST
12324: LIST
12325: LIST
12326: LIST
12327: PUSH
12328: LD_INT 101
12330: PUSH
12331: LD_INT 102
12333: PUSH
12334: LD_INT 103
12336: PUSH
12337: LD_INT 104
12339: PUSH
12340: LD_INT 105
12342: PUSH
12343: LD_INT 106
12345: PUSH
12346: LD_INT 107
12348: PUSH
12349: LD_INT 108
12351: PUSH
12352: LD_INT 109
12354: PUSH
12355: LD_INT 110
12357: PUSH
12358: LD_INT 111
12360: PUSH
12361: LD_INT 112
12363: PUSH
12364: LD_INT 113
12366: PUSH
12367: LD_INT 114
12369: PUSH
12370: LD_INT 116
12372: PUSH
12373: LD_INT 117
12375: PUSH
12376: LD_INT 118
12378: PUSH
12379: EMPTY
12380: LIST
12381: LIST
12382: LIST
12383: LIST
12384: LIST
12385: LIST
12386: LIST
12387: LIST
12388: LIST
12389: LIST
12390: LIST
12391: LIST
12392: LIST
12393: LIST
12394: LIST
12395: LIST
12396: LIST
12397: PUSH
12398: EMPTY
12399: LIST
12400: LIST
12401: ST_TO_ADDR
12402: GO 13641
12404: LD_INT 14
12406: DOUBLE
12407: EQUAL
12408: IFTRUE 12412
12410: GO 12636
12412: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
12413: LD_ADDR_VAR 0 2
12417: PUSH
12418: LD_INT 1
12420: PUSH
12421: LD_INT 2
12423: PUSH
12424: LD_INT 3
12426: PUSH
12427: LD_INT 4
12429: PUSH
12430: LD_INT 5
12432: PUSH
12433: LD_INT 6
12435: PUSH
12436: LD_INT 7
12438: PUSH
12439: LD_INT 8
12441: PUSH
12442: LD_INT 9
12444: PUSH
12445: LD_INT 10
12447: PUSH
12448: LD_INT 11
12450: PUSH
12451: LD_INT 12
12453: PUSH
12454: LD_INT 13
12456: PUSH
12457: LD_INT 14
12459: PUSH
12460: LD_INT 15
12462: PUSH
12463: LD_INT 16
12465: PUSH
12466: LD_INT 17
12468: PUSH
12469: LD_INT 18
12471: PUSH
12472: LD_INT 19
12474: PUSH
12475: LD_INT 20
12477: PUSH
12478: LD_INT 21
12480: PUSH
12481: LD_INT 22
12483: PUSH
12484: LD_INT 23
12486: PUSH
12487: LD_INT 24
12489: PUSH
12490: LD_INT 25
12492: PUSH
12493: LD_INT 26
12495: PUSH
12496: LD_INT 27
12498: PUSH
12499: LD_INT 28
12501: PUSH
12502: LD_INT 29
12504: PUSH
12505: LD_INT 30
12507: PUSH
12508: LD_INT 31
12510: PUSH
12511: LD_INT 32
12513: PUSH
12514: LD_INT 33
12516: PUSH
12517: LD_INT 34
12519: PUSH
12520: LD_INT 36
12522: PUSH
12523: EMPTY
12524: LIST
12525: LIST
12526: LIST
12527: LIST
12528: LIST
12529: LIST
12530: LIST
12531: LIST
12532: LIST
12533: LIST
12534: LIST
12535: LIST
12536: LIST
12537: LIST
12538: LIST
12539: LIST
12540: LIST
12541: LIST
12542: LIST
12543: LIST
12544: LIST
12545: LIST
12546: LIST
12547: LIST
12548: LIST
12549: LIST
12550: LIST
12551: LIST
12552: LIST
12553: LIST
12554: LIST
12555: LIST
12556: LIST
12557: LIST
12558: LIST
12559: PUSH
12560: LD_INT 101
12562: PUSH
12563: LD_INT 102
12565: PUSH
12566: LD_INT 103
12568: PUSH
12569: LD_INT 104
12571: PUSH
12572: LD_INT 105
12574: PUSH
12575: LD_INT 106
12577: PUSH
12578: LD_INT 107
12580: PUSH
12581: LD_INT 108
12583: PUSH
12584: LD_INT 109
12586: PUSH
12587: LD_INT 110
12589: PUSH
12590: LD_INT 111
12592: PUSH
12593: LD_INT 112
12595: PUSH
12596: LD_INT 113
12598: PUSH
12599: LD_INT 114
12601: PUSH
12602: LD_INT 116
12604: PUSH
12605: LD_INT 117
12607: PUSH
12608: LD_INT 118
12610: PUSH
12611: EMPTY
12612: LIST
12613: LIST
12614: LIST
12615: LIST
12616: LIST
12617: LIST
12618: LIST
12619: LIST
12620: LIST
12621: LIST
12622: LIST
12623: LIST
12624: LIST
12625: LIST
12626: LIST
12627: LIST
12628: LIST
12629: PUSH
12630: EMPTY
12631: LIST
12632: LIST
12633: ST_TO_ADDR
12634: GO 13641
12636: LD_INT 15
12638: DOUBLE
12639: EQUAL
12640: IFTRUE 12644
12642: GO 12868
12644: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
12645: LD_ADDR_VAR 0 2
12649: PUSH
12650: LD_INT 1
12652: PUSH
12653: LD_INT 2
12655: PUSH
12656: LD_INT 3
12658: PUSH
12659: LD_INT 4
12661: PUSH
12662: LD_INT 5
12664: PUSH
12665: LD_INT 6
12667: PUSH
12668: LD_INT 7
12670: PUSH
12671: LD_INT 8
12673: PUSH
12674: LD_INT 9
12676: PUSH
12677: LD_INT 10
12679: PUSH
12680: LD_INT 11
12682: PUSH
12683: LD_INT 12
12685: PUSH
12686: LD_INT 13
12688: PUSH
12689: LD_INT 14
12691: PUSH
12692: LD_INT 15
12694: PUSH
12695: LD_INT 16
12697: PUSH
12698: LD_INT 17
12700: PUSH
12701: LD_INT 18
12703: PUSH
12704: LD_INT 19
12706: PUSH
12707: LD_INT 20
12709: PUSH
12710: LD_INT 21
12712: PUSH
12713: LD_INT 22
12715: PUSH
12716: LD_INT 23
12718: PUSH
12719: LD_INT 24
12721: PUSH
12722: LD_INT 25
12724: PUSH
12725: LD_INT 26
12727: PUSH
12728: LD_INT 27
12730: PUSH
12731: LD_INT 28
12733: PUSH
12734: LD_INT 29
12736: PUSH
12737: LD_INT 30
12739: PUSH
12740: LD_INT 31
12742: PUSH
12743: LD_INT 32
12745: PUSH
12746: LD_INT 33
12748: PUSH
12749: LD_INT 34
12751: PUSH
12752: LD_INT 36
12754: PUSH
12755: EMPTY
12756: LIST
12757: LIST
12758: LIST
12759: LIST
12760: LIST
12761: LIST
12762: LIST
12763: LIST
12764: LIST
12765: LIST
12766: LIST
12767: LIST
12768: LIST
12769: LIST
12770: LIST
12771: LIST
12772: LIST
12773: LIST
12774: LIST
12775: LIST
12776: LIST
12777: LIST
12778: LIST
12779: LIST
12780: LIST
12781: LIST
12782: LIST
12783: LIST
12784: LIST
12785: LIST
12786: LIST
12787: LIST
12788: LIST
12789: LIST
12790: LIST
12791: PUSH
12792: LD_INT 101
12794: PUSH
12795: LD_INT 102
12797: PUSH
12798: LD_INT 103
12800: PUSH
12801: LD_INT 104
12803: PUSH
12804: LD_INT 105
12806: PUSH
12807: LD_INT 106
12809: PUSH
12810: LD_INT 107
12812: PUSH
12813: LD_INT 108
12815: PUSH
12816: LD_INT 109
12818: PUSH
12819: LD_INT 110
12821: PUSH
12822: LD_INT 111
12824: PUSH
12825: LD_INT 112
12827: PUSH
12828: LD_INT 113
12830: PUSH
12831: LD_INT 114
12833: PUSH
12834: LD_INT 116
12836: PUSH
12837: LD_INT 117
12839: PUSH
12840: LD_INT 118
12842: PUSH
12843: EMPTY
12844: LIST
12845: LIST
12846: LIST
12847: LIST
12848: LIST
12849: LIST
12850: LIST
12851: LIST
12852: LIST
12853: LIST
12854: LIST
12855: LIST
12856: LIST
12857: LIST
12858: LIST
12859: LIST
12860: LIST
12861: PUSH
12862: EMPTY
12863: LIST
12864: LIST
12865: ST_TO_ADDR
12866: GO 13641
12868: LD_INT 16
12870: DOUBLE
12871: EQUAL
12872: IFTRUE 12876
12874: GO 13012
12876: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
12877: LD_ADDR_VAR 0 2
12881: PUSH
12882: LD_INT 2
12884: PUSH
12885: LD_INT 4
12887: PUSH
12888: LD_INT 5
12890: PUSH
12891: LD_INT 7
12893: PUSH
12894: LD_INT 11
12896: PUSH
12897: LD_INT 12
12899: PUSH
12900: LD_INT 15
12902: PUSH
12903: LD_INT 16
12905: PUSH
12906: LD_INT 20
12908: PUSH
12909: LD_INT 21
12911: PUSH
12912: LD_INT 22
12914: PUSH
12915: LD_INT 23
12917: PUSH
12918: LD_INT 25
12920: PUSH
12921: LD_INT 26
12923: PUSH
12924: LD_INT 30
12926: PUSH
12927: LD_INT 31
12929: PUSH
12930: LD_INT 32
12932: PUSH
12933: LD_INT 33
12935: PUSH
12936: LD_INT 34
12938: PUSH
12939: EMPTY
12940: LIST
12941: LIST
12942: LIST
12943: LIST
12944: LIST
12945: LIST
12946: LIST
12947: LIST
12948: LIST
12949: LIST
12950: LIST
12951: LIST
12952: LIST
12953: LIST
12954: LIST
12955: LIST
12956: LIST
12957: LIST
12958: LIST
12959: PUSH
12960: LD_INT 101
12962: PUSH
12963: LD_INT 102
12965: PUSH
12966: LD_INT 103
12968: PUSH
12969: LD_INT 106
12971: PUSH
12972: LD_INT 108
12974: PUSH
12975: LD_INT 112
12977: PUSH
12978: LD_INT 113
12980: PUSH
12981: LD_INT 114
12983: PUSH
12984: LD_INT 116
12986: PUSH
12987: LD_INT 117
12989: PUSH
12990: LD_INT 118
12992: PUSH
12993: EMPTY
12994: LIST
12995: LIST
12996: LIST
12997: LIST
12998: LIST
12999: LIST
13000: LIST
13001: LIST
13002: LIST
13003: LIST
13004: LIST
13005: PUSH
13006: EMPTY
13007: LIST
13008: LIST
13009: ST_TO_ADDR
13010: GO 13641
13012: LD_INT 17
13014: DOUBLE
13015: EQUAL
13016: IFTRUE 13020
13018: GO 13244
13020: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
13021: LD_ADDR_VAR 0 2
13025: PUSH
13026: LD_INT 1
13028: PUSH
13029: LD_INT 2
13031: PUSH
13032: LD_INT 3
13034: PUSH
13035: LD_INT 4
13037: PUSH
13038: LD_INT 5
13040: PUSH
13041: LD_INT 6
13043: PUSH
13044: LD_INT 7
13046: PUSH
13047: LD_INT 8
13049: PUSH
13050: LD_INT 9
13052: PUSH
13053: LD_INT 10
13055: PUSH
13056: LD_INT 11
13058: PUSH
13059: LD_INT 12
13061: PUSH
13062: LD_INT 13
13064: PUSH
13065: LD_INT 14
13067: PUSH
13068: LD_INT 15
13070: PUSH
13071: LD_INT 16
13073: PUSH
13074: LD_INT 17
13076: PUSH
13077: LD_INT 18
13079: PUSH
13080: LD_INT 19
13082: PUSH
13083: LD_INT 20
13085: PUSH
13086: LD_INT 21
13088: PUSH
13089: LD_INT 22
13091: PUSH
13092: LD_INT 23
13094: PUSH
13095: LD_INT 24
13097: PUSH
13098: LD_INT 25
13100: PUSH
13101: LD_INT 26
13103: PUSH
13104: LD_INT 27
13106: PUSH
13107: LD_INT 28
13109: PUSH
13110: LD_INT 29
13112: PUSH
13113: LD_INT 30
13115: PUSH
13116: LD_INT 31
13118: PUSH
13119: LD_INT 32
13121: PUSH
13122: LD_INT 33
13124: PUSH
13125: LD_INT 34
13127: PUSH
13128: LD_INT 36
13130: PUSH
13131: EMPTY
13132: LIST
13133: LIST
13134: LIST
13135: LIST
13136: LIST
13137: LIST
13138: LIST
13139: LIST
13140: LIST
13141: LIST
13142: LIST
13143: LIST
13144: LIST
13145: LIST
13146: LIST
13147: LIST
13148: LIST
13149: LIST
13150: LIST
13151: LIST
13152: LIST
13153: LIST
13154: LIST
13155: LIST
13156: LIST
13157: LIST
13158: LIST
13159: LIST
13160: LIST
13161: LIST
13162: LIST
13163: LIST
13164: LIST
13165: LIST
13166: LIST
13167: PUSH
13168: LD_INT 101
13170: PUSH
13171: LD_INT 102
13173: PUSH
13174: LD_INT 103
13176: PUSH
13177: LD_INT 104
13179: PUSH
13180: LD_INT 105
13182: PUSH
13183: LD_INT 106
13185: PUSH
13186: LD_INT 107
13188: PUSH
13189: LD_INT 108
13191: PUSH
13192: LD_INT 109
13194: PUSH
13195: LD_INT 110
13197: PUSH
13198: LD_INT 111
13200: PUSH
13201: LD_INT 112
13203: PUSH
13204: LD_INT 113
13206: PUSH
13207: LD_INT 114
13209: PUSH
13210: LD_INT 116
13212: PUSH
13213: LD_INT 117
13215: PUSH
13216: LD_INT 118
13218: PUSH
13219: EMPTY
13220: LIST
13221: LIST
13222: LIST
13223: LIST
13224: LIST
13225: LIST
13226: LIST
13227: LIST
13228: LIST
13229: LIST
13230: LIST
13231: LIST
13232: LIST
13233: LIST
13234: LIST
13235: LIST
13236: LIST
13237: PUSH
13238: EMPTY
13239: LIST
13240: LIST
13241: ST_TO_ADDR
13242: GO 13641
13244: LD_INT 18
13246: DOUBLE
13247: EQUAL
13248: IFTRUE 13252
13250: GO 13400
13252: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
13253: LD_ADDR_VAR 0 2
13257: PUSH
13258: LD_INT 2
13260: PUSH
13261: LD_INT 4
13263: PUSH
13264: LD_INT 5
13266: PUSH
13267: LD_INT 7
13269: PUSH
13270: LD_INT 11
13272: PUSH
13273: LD_INT 12
13275: PUSH
13276: LD_INT 15
13278: PUSH
13279: LD_INT 16
13281: PUSH
13282: LD_INT 20
13284: PUSH
13285: LD_INT 21
13287: PUSH
13288: LD_INT 22
13290: PUSH
13291: LD_INT 23
13293: PUSH
13294: LD_INT 25
13296: PUSH
13297: LD_INT 26
13299: PUSH
13300: LD_INT 30
13302: PUSH
13303: LD_INT 31
13305: PUSH
13306: LD_INT 32
13308: PUSH
13309: LD_INT 33
13311: PUSH
13312: LD_INT 34
13314: PUSH
13315: LD_INT 35
13317: PUSH
13318: LD_INT 36
13320: PUSH
13321: EMPTY
13322: LIST
13323: LIST
13324: LIST
13325: LIST
13326: LIST
13327: LIST
13328: LIST
13329: LIST
13330: LIST
13331: LIST
13332: LIST
13333: LIST
13334: LIST
13335: LIST
13336: LIST
13337: LIST
13338: LIST
13339: LIST
13340: LIST
13341: LIST
13342: LIST
13343: PUSH
13344: LD_INT 101
13346: PUSH
13347: LD_INT 102
13349: PUSH
13350: LD_INT 103
13352: PUSH
13353: LD_INT 106
13355: PUSH
13356: LD_INT 108
13358: PUSH
13359: LD_INT 112
13361: PUSH
13362: LD_INT 113
13364: PUSH
13365: LD_INT 114
13367: PUSH
13368: LD_INT 115
13370: PUSH
13371: LD_INT 116
13373: PUSH
13374: LD_INT 117
13376: PUSH
13377: LD_INT 118
13379: PUSH
13380: EMPTY
13381: LIST
13382: LIST
13383: LIST
13384: LIST
13385: LIST
13386: LIST
13387: LIST
13388: LIST
13389: LIST
13390: LIST
13391: LIST
13392: LIST
13393: PUSH
13394: EMPTY
13395: LIST
13396: LIST
13397: ST_TO_ADDR
13398: GO 13641
13400: LD_INT 19
13402: DOUBLE
13403: EQUAL
13404: IFTRUE 13408
13406: GO 13640
13408: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
13409: LD_ADDR_VAR 0 2
13413: PUSH
13414: LD_INT 1
13416: PUSH
13417: LD_INT 2
13419: PUSH
13420: LD_INT 3
13422: PUSH
13423: LD_INT 4
13425: PUSH
13426: LD_INT 5
13428: PUSH
13429: LD_INT 6
13431: PUSH
13432: LD_INT 7
13434: PUSH
13435: LD_INT 8
13437: PUSH
13438: LD_INT 9
13440: PUSH
13441: LD_INT 10
13443: PUSH
13444: LD_INT 11
13446: PUSH
13447: LD_INT 12
13449: PUSH
13450: LD_INT 13
13452: PUSH
13453: LD_INT 14
13455: PUSH
13456: LD_INT 15
13458: PUSH
13459: LD_INT 16
13461: PUSH
13462: LD_INT 17
13464: PUSH
13465: LD_INT 18
13467: PUSH
13468: LD_INT 19
13470: PUSH
13471: LD_INT 20
13473: PUSH
13474: LD_INT 21
13476: PUSH
13477: LD_INT 22
13479: PUSH
13480: LD_INT 23
13482: PUSH
13483: LD_INT 24
13485: PUSH
13486: LD_INT 25
13488: PUSH
13489: LD_INT 26
13491: PUSH
13492: LD_INT 27
13494: PUSH
13495: LD_INT 28
13497: PUSH
13498: LD_INT 29
13500: PUSH
13501: LD_INT 30
13503: PUSH
13504: LD_INT 31
13506: PUSH
13507: LD_INT 32
13509: PUSH
13510: LD_INT 33
13512: PUSH
13513: LD_INT 34
13515: PUSH
13516: LD_INT 35
13518: PUSH
13519: LD_INT 36
13521: PUSH
13522: EMPTY
13523: LIST
13524: LIST
13525: LIST
13526: LIST
13527: LIST
13528: LIST
13529: LIST
13530: LIST
13531: LIST
13532: LIST
13533: LIST
13534: LIST
13535: LIST
13536: LIST
13537: LIST
13538: LIST
13539: LIST
13540: LIST
13541: LIST
13542: LIST
13543: LIST
13544: LIST
13545: LIST
13546: LIST
13547: LIST
13548: LIST
13549: LIST
13550: LIST
13551: LIST
13552: LIST
13553: LIST
13554: LIST
13555: LIST
13556: LIST
13557: LIST
13558: LIST
13559: PUSH
13560: LD_INT 101
13562: PUSH
13563: LD_INT 102
13565: PUSH
13566: LD_INT 103
13568: PUSH
13569: LD_INT 104
13571: PUSH
13572: LD_INT 105
13574: PUSH
13575: LD_INT 106
13577: PUSH
13578: LD_INT 107
13580: PUSH
13581: LD_INT 108
13583: PUSH
13584: LD_INT 109
13586: PUSH
13587: LD_INT 110
13589: PUSH
13590: LD_INT 111
13592: PUSH
13593: LD_INT 112
13595: PUSH
13596: LD_INT 113
13598: PUSH
13599: LD_INT 114
13601: PUSH
13602: LD_INT 115
13604: PUSH
13605: LD_INT 116
13607: PUSH
13608: LD_INT 117
13610: PUSH
13611: LD_INT 118
13613: PUSH
13614: EMPTY
13615: LIST
13616: LIST
13617: LIST
13618: LIST
13619: LIST
13620: LIST
13621: LIST
13622: LIST
13623: LIST
13624: LIST
13625: LIST
13626: LIST
13627: LIST
13628: LIST
13629: LIST
13630: LIST
13631: LIST
13632: LIST
13633: PUSH
13634: EMPTY
13635: LIST
13636: LIST
13637: ST_TO_ADDR
13638: GO 13641
13640: POP
// end else
13641: GO 13872
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
13643: LD_ADDR_VAR 0 2
13647: PUSH
13648: LD_INT 1
13650: PUSH
13651: LD_INT 2
13653: PUSH
13654: LD_INT 3
13656: PUSH
13657: LD_INT 4
13659: PUSH
13660: LD_INT 5
13662: PUSH
13663: LD_INT 6
13665: PUSH
13666: LD_INT 7
13668: PUSH
13669: LD_INT 8
13671: PUSH
13672: LD_INT 9
13674: PUSH
13675: LD_INT 10
13677: PUSH
13678: LD_INT 11
13680: PUSH
13681: LD_INT 12
13683: PUSH
13684: LD_INT 13
13686: PUSH
13687: LD_INT 14
13689: PUSH
13690: LD_INT 15
13692: PUSH
13693: LD_INT 16
13695: PUSH
13696: LD_INT 17
13698: PUSH
13699: LD_INT 18
13701: PUSH
13702: LD_INT 19
13704: PUSH
13705: LD_INT 20
13707: PUSH
13708: LD_INT 21
13710: PUSH
13711: LD_INT 22
13713: PUSH
13714: LD_INT 23
13716: PUSH
13717: LD_INT 24
13719: PUSH
13720: LD_INT 25
13722: PUSH
13723: LD_INT 26
13725: PUSH
13726: LD_INT 27
13728: PUSH
13729: LD_INT 28
13731: PUSH
13732: LD_INT 29
13734: PUSH
13735: LD_INT 30
13737: PUSH
13738: LD_INT 31
13740: PUSH
13741: LD_INT 32
13743: PUSH
13744: LD_INT 33
13746: PUSH
13747: LD_INT 34
13749: PUSH
13750: LD_INT 35
13752: PUSH
13753: LD_INT 36
13755: PUSH
13756: EMPTY
13757: LIST
13758: LIST
13759: LIST
13760: LIST
13761: LIST
13762: LIST
13763: LIST
13764: LIST
13765: LIST
13766: LIST
13767: LIST
13768: LIST
13769: LIST
13770: LIST
13771: LIST
13772: LIST
13773: LIST
13774: LIST
13775: LIST
13776: LIST
13777: LIST
13778: LIST
13779: LIST
13780: LIST
13781: LIST
13782: LIST
13783: LIST
13784: LIST
13785: LIST
13786: LIST
13787: LIST
13788: LIST
13789: LIST
13790: LIST
13791: LIST
13792: LIST
13793: PUSH
13794: LD_INT 101
13796: PUSH
13797: LD_INT 102
13799: PUSH
13800: LD_INT 103
13802: PUSH
13803: LD_INT 104
13805: PUSH
13806: LD_INT 105
13808: PUSH
13809: LD_INT 106
13811: PUSH
13812: LD_INT 107
13814: PUSH
13815: LD_INT 108
13817: PUSH
13818: LD_INT 109
13820: PUSH
13821: LD_INT 110
13823: PUSH
13824: LD_INT 111
13826: PUSH
13827: LD_INT 112
13829: PUSH
13830: LD_INT 113
13832: PUSH
13833: LD_INT 114
13835: PUSH
13836: LD_INT 115
13838: PUSH
13839: LD_INT 116
13841: PUSH
13842: LD_INT 117
13844: PUSH
13845: LD_INT 118
13847: PUSH
13848: EMPTY
13849: LIST
13850: LIST
13851: LIST
13852: LIST
13853: LIST
13854: LIST
13855: LIST
13856: LIST
13857: LIST
13858: LIST
13859: LIST
13860: LIST
13861: LIST
13862: LIST
13863: LIST
13864: LIST
13865: LIST
13866: LIST
13867: PUSH
13868: EMPTY
13869: LIST
13870: LIST
13871: ST_TO_ADDR
// if result then
13872: LD_VAR 0 2
13876: IFFALSE 14662
// begin normal :=  ;
13878: LD_ADDR_VAR 0 5
13882: PUSH
13883: LD_STRING 
13885: ST_TO_ADDR
// hardcore :=  ;
13886: LD_ADDR_VAR 0 6
13890: PUSH
13891: LD_STRING 
13893: ST_TO_ADDR
// active :=  ;
13894: LD_ADDR_VAR 0 7
13898: PUSH
13899: LD_STRING 
13901: ST_TO_ADDR
// for i = 1 to normalCounter do
13902: LD_ADDR_VAR 0 8
13906: PUSH
13907: DOUBLE
13908: LD_INT 1
13910: DEC
13911: ST_TO_ADDR
13912: LD_EXP 54
13916: PUSH
13917: FOR_TO
13918: IFFALSE 14019
// begin tmp := 0 ;
13920: LD_ADDR_VAR 0 3
13924: PUSH
13925: LD_STRING 0
13927: ST_TO_ADDR
// if result [ 1 ] then
13928: LD_VAR 0 2
13932: PUSH
13933: LD_INT 1
13935: ARRAY
13936: IFFALSE 14001
// if result [ 1 ] [ 1 ] = i then
13938: LD_VAR 0 2
13942: PUSH
13943: LD_INT 1
13945: ARRAY
13946: PUSH
13947: LD_INT 1
13949: ARRAY
13950: PUSH
13951: LD_VAR 0 8
13955: EQUAL
13956: IFFALSE 14001
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
13958: LD_ADDR_VAR 0 2
13962: PUSH
13963: LD_VAR 0 2
13967: PPUSH
13968: LD_INT 1
13970: PPUSH
13971: LD_VAR 0 2
13975: PUSH
13976: LD_INT 1
13978: ARRAY
13979: PPUSH
13980: LD_INT 1
13982: PPUSH
13983: CALL_OW 3
13987: PPUSH
13988: CALL_OW 1
13992: ST_TO_ADDR
// tmp := 1 ;
13993: LD_ADDR_VAR 0 3
13997: PUSH
13998: LD_STRING 1
14000: ST_TO_ADDR
// end ; normal := normal & tmp ;
14001: LD_ADDR_VAR 0 5
14005: PUSH
14006: LD_VAR 0 5
14010: PUSH
14011: LD_VAR 0 3
14015: STR
14016: ST_TO_ADDR
// end ;
14017: GO 13917
14019: POP
14020: POP
// for i = 1 to hardcoreCounter do
14021: LD_ADDR_VAR 0 8
14025: PUSH
14026: DOUBLE
14027: LD_INT 1
14029: DEC
14030: ST_TO_ADDR
14031: LD_EXP 55
14035: PUSH
14036: FOR_TO
14037: IFFALSE 14142
// begin tmp := 0 ;
14039: LD_ADDR_VAR 0 3
14043: PUSH
14044: LD_STRING 0
14046: ST_TO_ADDR
// if result [ 2 ] then
14047: LD_VAR 0 2
14051: PUSH
14052: LD_INT 2
14054: ARRAY
14055: IFFALSE 14124
// if result [ 2 ] [ 1 ] = 100 + i then
14057: LD_VAR 0 2
14061: PUSH
14062: LD_INT 2
14064: ARRAY
14065: PUSH
14066: LD_INT 1
14068: ARRAY
14069: PUSH
14070: LD_INT 100
14072: PUSH
14073: LD_VAR 0 8
14077: PLUS
14078: EQUAL
14079: IFFALSE 14124
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
14081: LD_ADDR_VAR 0 2
14085: PUSH
14086: LD_VAR 0 2
14090: PPUSH
14091: LD_INT 2
14093: PPUSH
14094: LD_VAR 0 2
14098: PUSH
14099: LD_INT 2
14101: ARRAY
14102: PPUSH
14103: LD_INT 1
14105: PPUSH
14106: CALL_OW 3
14110: PPUSH
14111: CALL_OW 1
14115: ST_TO_ADDR
// tmp := 1 ;
14116: LD_ADDR_VAR 0 3
14120: PUSH
14121: LD_STRING 1
14123: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
14124: LD_ADDR_VAR 0 6
14128: PUSH
14129: LD_VAR 0 6
14133: PUSH
14134: LD_VAR 0 3
14138: STR
14139: ST_TO_ADDR
// end ;
14140: GO 14036
14142: POP
14143: POP
// if isGameLoad then
14144: LD_VAR 0 1
14148: IFFALSE 14623
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
14150: LD_ADDR_VAR 0 4
14154: PUSH
14155: LD_EXP 58
14159: PUSH
14160: LD_EXP 57
14164: PUSH
14165: LD_EXP 59
14169: PUSH
14170: LD_EXP 56
14174: PUSH
14175: LD_EXP 60
14179: PUSH
14180: LD_EXP 61
14184: PUSH
14185: LD_EXP 62
14189: PUSH
14190: LD_EXP 63
14194: PUSH
14195: LD_EXP 64
14199: PUSH
14200: LD_EXP 65
14204: PUSH
14205: LD_EXP 66
14209: PUSH
14210: LD_EXP 67
14214: PUSH
14215: LD_EXP 68
14219: PUSH
14220: LD_EXP 69
14224: PUSH
14225: LD_EXP 77
14229: PUSH
14230: LD_EXP 78
14234: PUSH
14235: LD_EXP 79
14239: PUSH
14240: LD_EXP 80
14244: PUSH
14245: LD_EXP 82
14249: PUSH
14250: LD_EXP 83
14254: PUSH
14255: LD_EXP 84
14259: PUSH
14260: LD_EXP 87
14264: PUSH
14265: LD_EXP 89
14269: PUSH
14270: LD_EXP 90
14274: PUSH
14275: LD_EXP 91
14279: PUSH
14280: LD_EXP 93
14284: PUSH
14285: LD_EXP 94
14289: PUSH
14290: LD_EXP 97
14294: PUSH
14295: LD_EXP 98
14299: PUSH
14300: LD_EXP 99
14304: PUSH
14305: LD_EXP 100
14309: PUSH
14310: LD_EXP 101
14314: PUSH
14315: LD_EXP 102
14319: PUSH
14320: LD_EXP 103
14324: PUSH
14325: LD_EXP 104
14329: PUSH
14330: LD_EXP 105
14334: PUSH
14335: LD_EXP 70
14339: PUSH
14340: LD_EXP 71
14344: PUSH
14345: LD_EXP 74
14349: PUSH
14350: LD_EXP 75
14354: PUSH
14355: LD_EXP 76
14359: PUSH
14360: LD_EXP 72
14364: PUSH
14365: LD_EXP 73
14369: PUSH
14370: LD_EXP 81
14374: PUSH
14375: LD_EXP 85
14379: PUSH
14380: LD_EXP 86
14384: PUSH
14385: LD_EXP 88
14389: PUSH
14390: LD_EXP 92
14394: PUSH
14395: LD_EXP 95
14399: PUSH
14400: LD_EXP 96
14404: PUSH
14405: LD_EXP 106
14409: PUSH
14410: LD_EXP 107
14414: PUSH
14415: LD_EXP 108
14419: PUSH
14420: LD_EXP 109
14424: PUSH
14425: EMPTY
14426: LIST
14427: LIST
14428: LIST
14429: LIST
14430: LIST
14431: LIST
14432: LIST
14433: LIST
14434: LIST
14435: LIST
14436: LIST
14437: LIST
14438: LIST
14439: LIST
14440: LIST
14441: LIST
14442: LIST
14443: LIST
14444: LIST
14445: LIST
14446: LIST
14447: LIST
14448: LIST
14449: LIST
14450: LIST
14451: LIST
14452: LIST
14453: LIST
14454: LIST
14455: LIST
14456: LIST
14457: LIST
14458: LIST
14459: LIST
14460: LIST
14461: LIST
14462: LIST
14463: LIST
14464: LIST
14465: LIST
14466: LIST
14467: LIST
14468: LIST
14469: LIST
14470: LIST
14471: LIST
14472: LIST
14473: LIST
14474: LIST
14475: LIST
14476: LIST
14477: LIST
14478: LIST
14479: LIST
14480: ST_TO_ADDR
// tmp :=  ;
14481: LD_ADDR_VAR 0 3
14485: PUSH
14486: LD_STRING 
14488: ST_TO_ADDR
// for i = 1 to normalCounter do
14489: LD_ADDR_VAR 0 8
14493: PUSH
14494: DOUBLE
14495: LD_INT 1
14497: DEC
14498: ST_TO_ADDR
14499: LD_EXP 54
14503: PUSH
14504: FOR_TO
14505: IFFALSE 14541
// begin if flags [ i ] then
14507: LD_VAR 0 4
14511: PUSH
14512: LD_VAR 0 8
14516: ARRAY
14517: IFFALSE 14539
// tmp := tmp & i & ; ;
14519: LD_ADDR_VAR 0 3
14523: PUSH
14524: LD_VAR 0 3
14528: PUSH
14529: LD_VAR 0 8
14533: STR
14534: PUSH
14535: LD_STRING ;
14537: STR
14538: ST_TO_ADDR
// end ;
14539: GO 14504
14541: POP
14542: POP
// for i = 1 to hardcoreCounter do
14543: LD_ADDR_VAR 0 8
14547: PUSH
14548: DOUBLE
14549: LD_INT 1
14551: DEC
14552: ST_TO_ADDR
14553: LD_EXP 55
14557: PUSH
14558: FOR_TO
14559: IFFALSE 14605
// begin if flags [ normalCounter + i ] then
14561: LD_VAR 0 4
14565: PUSH
14566: LD_EXP 54
14570: PUSH
14571: LD_VAR 0 8
14575: PLUS
14576: ARRAY
14577: IFFALSE 14603
// tmp := tmp & ( 100 + i ) & ; ;
14579: LD_ADDR_VAR 0 3
14583: PUSH
14584: LD_VAR 0 3
14588: PUSH
14589: LD_INT 100
14591: PUSH
14592: LD_VAR 0 8
14596: PLUS
14597: STR
14598: PUSH
14599: LD_STRING ;
14601: STR
14602: ST_TO_ADDR
// end ;
14603: GO 14558
14605: POP
14606: POP
// if tmp then
14607: LD_VAR 0 3
14611: IFFALSE 14623
// active := tmp ;
14613: LD_ADDR_VAR 0 7
14617: PUSH
14618: LD_VAR 0 3
14622: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
14623: LD_STRING getStreamItemsFromMission("
14625: PUSH
14626: LD_VAR 0 5
14630: STR
14631: PUSH
14632: LD_STRING ","
14634: STR
14635: PUSH
14636: LD_VAR 0 6
14640: STR
14641: PUSH
14642: LD_STRING ","
14644: STR
14645: PUSH
14646: LD_VAR 0 7
14650: STR
14651: PUSH
14652: LD_STRING ")
14654: STR
14655: PPUSH
14656: CALL_OW 559
// end else
14660: GO 14669
// ToLua ( getStreamItemsFromMission("","","") ) ;
14662: LD_STRING getStreamItemsFromMission("","","")
14664: PPUSH
14665: CALL_OW 559
// end ;
14669: LD_VAR 0 2
14673: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
14674: LD_EXP 53
14678: PUSH
14679: LD_EXP 58
14683: AND
14684: IFFALSE 14808
14686: GO 14688
14688: DISABLE
14689: LD_INT 0
14691: PPUSH
14692: PPUSH
// begin enable ;
14693: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
14694: LD_ADDR_VAR 0 2
14698: PUSH
14699: LD_INT 22
14701: PUSH
14702: LD_OWVAR 2
14706: PUSH
14707: EMPTY
14708: LIST
14709: LIST
14710: PUSH
14711: LD_INT 2
14713: PUSH
14714: LD_INT 34
14716: PUSH
14717: LD_INT 7
14719: PUSH
14720: EMPTY
14721: LIST
14722: LIST
14723: PUSH
14724: LD_INT 34
14726: PUSH
14727: LD_INT 45
14729: PUSH
14730: EMPTY
14731: LIST
14732: LIST
14733: PUSH
14734: LD_INT 34
14736: PUSH
14737: LD_INT 28
14739: PUSH
14740: EMPTY
14741: LIST
14742: LIST
14743: PUSH
14744: LD_INT 34
14746: PUSH
14747: LD_INT 47
14749: PUSH
14750: EMPTY
14751: LIST
14752: LIST
14753: PUSH
14754: EMPTY
14755: LIST
14756: LIST
14757: LIST
14758: LIST
14759: LIST
14760: PUSH
14761: EMPTY
14762: LIST
14763: LIST
14764: PPUSH
14765: CALL_OW 69
14769: ST_TO_ADDR
// if not tmp then
14770: LD_VAR 0 2
14774: NOT
14775: IFFALSE 14779
// exit ;
14777: GO 14808
// for i in tmp do
14779: LD_ADDR_VAR 0 1
14783: PUSH
14784: LD_VAR 0 2
14788: PUSH
14789: FOR_IN
14790: IFFALSE 14806
// begin SetLives ( i , 0 ) ;
14792: LD_VAR 0 1
14796: PPUSH
14797: LD_INT 0
14799: PPUSH
14800: CALL_OW 234
// end ;
14804: GO 14789
14806: POP
14807: POP
// end ;
14808: PPOPN 2
14810: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
14811: LD_EXP 53
14815: PUSH
14816: LD_EXP 59
14820: AND
14821: IFFALSE 14905
14823: GO 14825
14825: DISABLE
14826: LD_INT 0
14828: PPUSH
14829: PPUSH
// begin enable ;
14830: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
14831: LD_ADDR_VAR 0 2
14835: PUSH
14836: LD_INT 22
14838: PUSH
14839: LD_OWVAR 2
14843: PUSH
14844: EMPTY
14845: LIST
14846: LIST
14847: PUSH
14848: LD_INT 32
14850: PUSH
14851: LD_INT 3
14853: PUSH
14854: EMPTY
14855: LIST
14856: LIST
14857: PUSH
14858: EMPTY
14859: LIST
14860: LIST
14861: PPUSH
14862: CALL_OW 69
14866: ST_TO_ADDR
// if not tmp then
14867: LD_VAR 0 2
14871: NOT
14872: IFFALSE 14876
// exit ;
14874: GO 14905
// for i in tmp do
14876: LD_ADDR_VAR 0 1
14880: PUSH
14881: LD_VAR 0 2
14885: PUSH
14886: FOR_IN
14887: IFFALSE 14903
// begin SetLives ( i , 0 ) ;
14889: LD_VAR 0 1
14893: PPUSH
14894: LD_INT 0
14896: PPUSH
14897: CALL_OW 234
// end ;
14901: GO 14886
14903: POP
14904: POP
// end ;
14905: PPOPN 2
14907: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
14908: LD_EXP 53
14912: PUSH
14913: LD_EXP 56
14917: AND
14918: IFFALSE 15011
14920: GO 14922
14922: DISABLE
14923: LD_INT 0
14925: PPUSH
// begin enable ;
14926: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
14927: LD_ADDR_VAR 0 1
14931: PUSH
14932: LD_INT 22
14934: PUSH
14935: LD_OWVAR 2
14939: PUSH
14940: EMPTY
14941: LIST
14942: LIST
14943: PUSH
14944: LD_INT 2
14946: PUSH
14947: LD_INT 25
14949: PUSH
14950: LD_INT 5
14952: PUSH
14953: EMPTY
14954: LIST
14955: LIST
14956: PUSH
14957: LD_INT 25
14959: PUSH
14960: LD_INT 9
14962: PUSH
14963: EMPTY
14964: LIST
14965: LIST
14966: PUSH
14967: LD_INT 25
14969: PUSH
14970: LD_INT 8
14972: PUSH
14973: EMPTY
14974: LIST
14975: LIST
14976: PUSH
14977: EMPTY
14978: LIST
14979: LIST
14980: LIST
14981: LIST
14982: PUSH
14983: EMPTY
14984: LIST
14985: LIST
14986: PPUSH
14987: CALL_OW 69
14991: PUSH
14992: FOR_IN
14993: IFFALSE 15009
// begin SetClass ( i , 1 ) ;
14995: LD_VAR 0 1
14999: PPUSH
15000: LD_INT 1
15002: PPUSH
15003: CALL_OW 336
// end ;
15007: GO 14992
15009: POP
15010: POP
// end ;
15011: PPOPN 1
15013: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
15014: LD_EXP 53
15018: PUSH
15019: LD_EXP 57
15023: AND
15024: PUSH
15025: LD_OWVAR 65
15029: PUSH
15030: LD_INT 7
15032: LESS
15033: AND
15034: IFFALSE 15048
15036: GO 15038
15038: DISABLE
// begin enable ;
15039: ENABLE
// game_speed := 7 ;
15040: LD_ADDR_OWVAR 65
15044: PUSH
15045: LD_INT 7
15047: ST_TO_ADDR
// end ;
15048: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
15049: LD_EXP 53
15053: PUSH
15054: LD_EXP 60
15058: AND
15059: IFFALSE 15261
15061: GO 15063
15063: DISABLE
15064: LD_INT 0
15066: PPUSH
15067: PPUSH
15068: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
15069: LD_ADDR_VAR 0 3
15073: PUSH
15074: LD_INT 81
15076: PUSH
15077: LD_OWVAR 2
15081: PUSH
15082: EMPTY
15083: LIST
15084: LIST
15085: PUSH
15086: LD_INT 21
15088: PUSH
15089: LD_INT 1
15091: PUSH
15092: EMPTY
15093: LIST
15094: LIST
15095: PUSH
15096: EMPTY
15097: LIST
15098: LIST
15099: PPUSH
15100: CALL_OW 69
15104: ST_TO_ADDR
// if not tmp then
15105: LD_VAR 0 3
15109: NOT
15110: IFFALSE 15114
// exit ;
15112: GO 15261
// if tmp > 5 then
15114: LD_VAR 0 3
15118: PUSH
15119: LD_INT 5
15121: GREATER
15122: IFFALSE 15134
// k := 5 else
15124: LD_ADDR_VAR 0 2
15128: PUSH
15129: LD_INT 5
15131: ST_TO_ADDR
15132: GO 15144
// k := tmp ;
15134: LD_ADDR_VAR 0 2
15138: PUSH
15139: LD_VAR 0 3
15143: ST_TO_ADDR
// for i := 1 to k do
15144: LD_ADDR_VAR 0 1
15148: PUSH
15149: DOUBLE
15150: LD_INT 1
15152: DEC
15153: ST_TO_ADDR
15154: LD_VAR 0 2
15158: PUSH
15159: FOR_TO
15160: IFFALSE 15259
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
15162: LD_VAR 0 3
15166: PUSH
15167: LD_VAR 0 1
15171: ARRAY
15172: PPUSH
15173: LD_VAR 0 1
15177: PUSH
15178: LD_INT 4
15180: MOD
15181: PUSH
15182: LD_INT 1
15184: PLUS
15185: PPUSH
15186: CALL_OW 259
15190: PUSH
15191: LD_INT 10
15193: LESS
15194: IFFALSE 15257
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
15196: LD_VAR 0 3
15200: PUSH
15201: LD_VAR 0 1
15205: ARRAY
15206: PPUSH
15207: LD_VAR 0 1
15211: PUSH
15212: LD_INT 4
15214: MOD
15215: PUSH
15216: LD_INT 1
15218: PLUS
15219: PPUSH
15220: LD_VAR 0 3
15224: PUSH
15225: LD_VAR 0 1
15229: ARRAY
15230: PPUSH
15231: LD_VAR 0 1
15235: PUSH
15236: LD_INT 4
15238: MOD
15239: PUSH
15240: LD_INT 1
15242: PLUS
15243: PPUSH
15244: CALL_OW 259
15248: PUSH
15249: LD_INT 1
15251: PLUS
15252: PPUSH
15253: CALL_OW 237
15257: GO 15159
15259: POP
15260: POP
// end ;
15261: PPOPN 3
15263: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
15264: LD_EXP 53
15268: PUSH
15269: LD_EXP 61
15273: AND
15274: IFFALSE 15294
15276: GO 15278
15278: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
15279: LD_INT 4
15281: PPUSH
15282: LD_OWVAR 2
15286: PPUSH
15287: LD_INT 0
15289: PPUSH
15290: CALL_OW 324
15294: END
// every 0 0$1 trigger StreamModeActive and sShovel do
15295: LD_EXP 53
15299: PUSH
15300: LD_EXP 90
15304: AND
15305: IFFALSE 15325
15307: GO 15309
15309: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
15310: LD_INT 19
15312: PPUSH
15313: LD_OWVAR 2
15317: PPUSH
15318: LD_INT 0
15320: PPUSH
15321: CALL_OW 324
15325: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
15326: LD_EXP 53
15330: PUSH
15331: LD_EXP 62
15335: AND
15336: IFFALSE 15438
15338: GO 15340
15340: DISABLE
15341: LD_INT 0
15343: PPUSH
15344: PPUSH
// begin enable ;
15345: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
15346: LD_ADDR_VAR 0 2
15350: PUSH
15351: LD_INT 22
15353: PUSH
15354: LD_OWVAR 2
15358: PUSH
15359: EMPTY
15360: LIST
15361: LIST
15362: PUSH
15363: LD_INT 2
15365: PUSH
15366: LD_INT 34
15368: PUSH
15369: LD_INT 11
15371: PUSH
15372: EMPTY
15373: LIST
15374: LIST
15375: PUSH
15376: LD_INT 34
15378: PUSH
15379: LD_INT 30
15381: PUSH
15382: EMPTY
15383: LIST
15384: LIST
15385: PUSH
15386: EMPTY
15387: LIST
15388: LIST
15389: LIST
15390: PUSH
15391: EMPTY
15392: LIST
15393: LIST
15394: PPUSH
15395: CALL_OW 69
15399: ST_TO_ADDR
// if not tmp then
15400: LD_VAR 0 2
15404: NOT
15405: IFFALSE 15409
// exit ;
15407: GO 15438
// for i in tmp do
15409: LD_ADDR_VAR 0 1
15413: PUSH
15414: LD_VAR 0 2
15418: PUSH
15419: FOR_IN
15420: IFFALSE 15436
// begin SetLives ( i , 0 ) ;
15422: LD_VAR 0 1
15426: PPUSH
15427: LD_INT 0
15429: PPUSH
15430: CALL_OW 234
// end ;
15434: GO 15419
15436: POP
15437: POP
// end ;
15438: PPOPN 2
15440: END
// every 0 0$1 trigger StreamModeActive and sBunker do
15441: LD_EXP 53
15445: PUSH
15446: LD_EXP 63
15450: AND
15451: IFFALSE 15471
15453: GO 15455
15455: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
15456: LD_INT 32
15458: PPUSH
15459: LD_OWVAR 2
15463: PPUSH
15464: LD_INT 0
15466: PPUSH
15467: CALL_OW 324
15471: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
15472: LD_EXP 53
15476: PUSH
15477: LD_EXP 64
15481: AND
15482: IFFALSE 15663
15484: GO 15486
15486: DISABLE
15487: LD_INT 0
15489: PPUSH
15490: PPUSH
15491: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
15492: LD_ADDR_VAR 0 2
15496: PUSH
15497: LD_INT 22
15499: PUSH
15500: LD_OWVAR 2
15504: PUSH
15505: EMPTY
15506: LIST
15507: LIST
15508: PUSH
15509: LD_INT 33
15511: PUSH
15512: LD_INT 3
15514: PUSH
15515: EMPTY
15516: LIST
15517: LIST
15518: PUSH
15519: EMPTY
15520: LIST
15521: LIST
15522: PPUSH
15523: CALL_OW 69
15527: ST_TO_ADDR
// if not tmp then
15528: LD_VAR 0 2
15532: NOT
15533: IFFALSE 15537
// exit ;
15535: GO 15663
// side := 0 ;
15537: LD_ADDR_VAR 0 3
15541: PUSH
15542: LD_INT 0
15544: ST_TO_ADDR
// for i := 1 to 8 do
15545: LD_ADDR_VAR 0 1
15549: PUSH
15550: DOUBLE
15551: LD_INT 1
15553: DEC
15554: ST_TO_ADDR
15555: LD_INT 8
15557: PUSH
15558: FOR_TO
15559: IFFALSE 15607
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
15561: LD_OWVAR 2
15565: PUSH
15566: LD_VAR 0 1
15570: NONEQUAL
15571: PUSH
15572: LD_OWVAR 2
15576: PPUSH
15577: LD_VAR 0 1
15581: PPUSH
15582: CALL_OW 81
15586: PUSH
15587: LD_INT 2
15589: EQUAL
15590: AND
15591: IFFALSE 15605
// begin side := i ;
15593: LD_ADDR_VAR 0 3
15597: PUSH
15598: LD_VAR 0 1
15602: ST_TO_ADDR
// break ;
15603: GO 15607
// end ;
15605: GO 15558
15607: POP
15608: POP
// if not side then
15609: LD_VAR 0 3
15613: NOT
15614: IFFALSE 15618
// exit ;
15616: GO 15663
// for i := 1 to tmp do
15618: LD_ADDR_VAR 0 1
15622: PUSH
15623: DOUBLE
15624: LD_INT 1
15626: DEC
15627: ST_TO_ADDR
15628: LD_VAR 0 2
15632: PUSH
15633: FOR_TO
15634: IFFALSE 15661
// if Prob ( 60 ) then
15636: LD_INT 60
15638: PPUSH
15639: CALL_OW 13
15643: IFFALSE 15659
// SetSide ( i , side ) ;
15645: LD_VAR 0 1
15649: PPUSH
15650: LD_VAR 0 3
15654: PPUSH
15655: CALL_OW 235
15659: GO 15633
15661: POP
15662: POP
// end ;
15663: PPOPN 3
15665: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
15666: LD_EXP 53
15670: PUSH
15671: LD_EXP 66
15675: AND
15676: IFFALSE 15795
15678: GO 15680
15680: DISABLE
15681: LD_INT 0
15683: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
15684: LD_ADDR_VAR 0 1
15688: PUSH
15689: LD_INT 22
15691: PUSH
15692: LD_OWVAR 2
15696: PUSH
15697: EMPTY
15698: LIST
15699: LIST
15700: PUSH
15701: LD_INT 21
15703: PUSH
15704: LD_INT 1
15706: PUSH
15707: EMPTY
15708: LIST
15709: LIST
15710: PUSH
15711: LD_INT 3
15713: PUSH
15714: LD_INT 23
15716: PUSH
15717: LD_INT 0
15719: PUSH
15720: EMPTY
15721: LIST
15722: LIST
15723: PUSH
15724: EMPTY
15725: LIST
15726: LIST
15727: PUSH
15728: EMPTY
15729: LIST
15730: LIST
15731: LIST
15732: PPUSH
15733: CALL_OW 69
15737: PUSH
15738: FOR_IN
15739: IFFALSE 15793
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
15741: LD_VAR 0 1
15745: PPUSH
15746: CALL_OW 257
15750: PUSH
15751: LD_INT 1
15753: PUSH
15754: LD_INT 2
15756: PUSH
15757: LD_INT 3
15759: PUSH
15760: LD_INT 4
15762: PUSH
15763: EMPTY
15764: LIST
15765: LIST
15766: LIST
15767: LIST
15768: IN
15769: IFFALSE 15791
// SetClass ( un , rand ( 1 , 4 ) ) ;
15771: LD_VAR 0 1
15775: PPUSH
15776: LD_INT 1
15778: PPUSH
15779: LD_INT 4
15781: PPUSH
15782: CALL_OW 12
15786: PPUSH
15787: CALL_OW 336
15791: GO 15738
15793: POP
15794: POP
// end ;
15795: PPOPN 1
15797: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
15798: LD_EXP 53
15802: PUSH
15803: LD_EXP 65
15807: AND
15808: IFFALSE 15887
15810: GO 15812
15812: DISABLE
15813: LD_INT 0
15815: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
15816: LD_ADDR_VAR 0 1
15820: PUSH
15821: LD_INT 22
15823: PUSH
15824: LD_OWVAR 2
15828: PUSH
15829: EMPTY
15830: LIST
15831: LIST
15832: PUSH
15833: LD_INT 21
15835: PUSH
15836: LD_INT 3
15838: PUSH
15839: EMPTY
15840: LIST
15841: LIST
15842: PUSH
15843: EMPTY
15844: LIST
15845: LIST
15846: PPUSH
15847: CALL_OW 69
15851: ST_TO_ADDR
// if not tmp then
15852: LD_VAR 0 1
15856: NOT
15857: IFFALSE 15861
// exit ;
15859: GO 15887
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
15861: LD_VAR 0 1
15865: PUSH
15866: LD_INT 1
15868: PPUSH
15869: LD_VAR 0 1
15873: PPUSH
15874: CALL_OW 12
15878: ARRAY
15879: PPUSH
15880: LD_INT 100
15882: PPUSH
15883: CALL_OW 234
// end ;
15887: PPOPN 1
15889: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
15890: LD_EXP 53
15894: PUSH
15895: LD_EXP 67
15899: AND
15900: IFFALSE 15998
15902: GO 15904
15904: DISABLE
15905: LD_INT 0
15907: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15908: LD_ADDR_VAR 0 1
15912: PUSH
15913: LD_INT 22
15915: PUSH
15916: LD_OWVAR 2
15920: PUSH
15921: EMPTY
15922: LIST
15923: LIST
15924: PUSH
15925: LD_INT 21
15927: PUSH
15928: LD_INT 1
15930: PUSH
15931: EMPTY
15932: LIST
15933: LIST
15934: PUSH
15935: EMPTY
15936: LIST
15937: LIST
15938: PPUSH
15939: CALL_OW 69
15943: ST_TO_ADDR
// if not tmp then
15944: LD_VAR 0 1
15948: NOT
15949: IFFALSE 15953
// exit ;
15951: GO 15998
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
15953: LD_VAR 0 1
15957: PUSH
15958: LD_INT 1
15960: PPUSH
15961: LD_VAR 0 1
15965: PPUSH
15966: CALL_OW 12
15970: ARRAY
15971: PPUSH
15972: LD_INT 1
15974: PPUSH
15975: LD_INT 4
15977: PPUSH
15978: CALL_OW 12
15982: PPUSH
15983: LD_INT 3000
15985: PPUSH
15986: LD_INT 9000
15988: PPUSH
15989: CALL_OW 12
15993: PPUSH
15994: CALL_OW 492
// end ;
15998: PPOPN 1
16000: END
// every 0 0$1 trigger StreamModeActive and sDepot do
16001: LD_EXP 53
16005: PUSH
16006: LD_EXP 68
16010: AND
16011: IFFALSE 16031
16013: GO 16015
16015: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
16016: LD_INT 1
16018: PPUSH
16019: LD_OWVAR 2
16023: PPUSH
16024: LD_INT 0
16026: PPUSH
16027: CALL_OW 324
16031: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
16032: LD_EXP 53
16036: PUSH
16037: LD_EXP 69
16041: AND
16042: IFFALSE 16125
16044: GO 16046
16046: DISABLE
16047: LD_INT 0
16049: PPUSH
16050: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
16051: LD_ADDR_VAR 0 2
16055: PUSH
16056: LD_INT 22
16058: PUSH
16059: LD_OWVAR 2
16063: PUSH
16064: EMPTY
16065: LIST
16066: LIST
16067: PUSH
16068: LD_INT 21
16070: PUSH
16071: LD_INT 3
16073: PUSH
16074: EMPTY
16075: LIST
16076: LIST
16077: PUSH
16078: EMPTY
16079: LIST
16080: LIST
16081: PPUSH
16082: CALL_OW 69
16086: ST_TO_ADDR
// if not tmp then
16087: LD_VAR 0 2
16091: NOT
16092: IFFALSE 16096
// exit ;
16094: GO 16125
// for i in tmp do
16096: LD_ADDR_VAR 0 1
16100: PUSH
16101: LD_VAR 0 2
16105: PUSH
16106: FOR_IN
16107: IFFALSE 16123
// SetBLevel ( i , 10 ) ;
16109: LD_VAR 0 1
16113: PPUSH
16114: LD_INT 10
16116: PPUSH
16117: CALL_OW 241
16121: GO 16106
16123: POP
16124: POP
// end ;
16125: PPOPN 2
16127: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
16128: LD_EXP 53
16132: PUSH
16133: LD_EXP 70
16137: AND
16138: IFFALSE 16249
16140: GO 16142
16142: DISABLE
16143: LD_INT 0
16145: PPUSH
16146: PPUSH
16147: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16148: LD_ADDR_VAR 0 3
16152: PUSH
16153: LD_INT 22
16155: PUSH
16156: LD_OWVAR 2
16160: PUSH
16161: EMPTY
16162: LIST
16163: LIST
16164: PUSH
16165: LD_INT 25
16167: PUSH
16168: LD_INT 1
16170: PUSH
16171: EMPTY
16172: LIST
16173: LIST
16174: PUSH
16175: EMPTY
16176: LIST
16177: LIST
16178: PPUSH
16179: CALL_OW 69
16183: ST_TO_ADDR
// if not tmp then
16184: LD_VAR 0 3
16188: NOT
16189: IFFALSE 16193
// exit ;
16191: GO 16249
// un := tmp [ rand ( 1 , tmp ) ] ;
16193: LD_ADDR_VAR 0 2
16197: PUSH
16198: LD_VAR 0 3
16202: PUSH
16203: LD_INT 1
16205: PPUSH
16206: LD_VAR 0 3
16210: PPUSH
16211: CALL_OW 12
16215: ARRAY
16216: ST_TO_ADDR
// if Crawls ( un ) then
16217: LD_VAR 0 2
16221: PPUSH
16222: CALL_OW 318
16226: IFFALSE 16237
// ComWalk ( un ) ;
16228: LD_VAR 0 2
16232: PPUSH
16233: CALL_OW 138
// SetClass ( un , class_sniper ) ;
16237: LD_VAR 0 2
16241: PPUSH
16242: LD_INT 5
16244: PPUSH
16245: CALL_OW 336
// end ;
16249: PPOPN 3
16251: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
16252: LD_EXP 53
16256: PUSH
16257: LD_EXP 71
16261: AND
16262: PUSH
16263: LD_OWVAR 67
16267: PUSH
16268: LD_INT 4
16270: LESS
16271: AND
16272: IFFALSE 16291
16274: GO 16276
16276: DISABLE
// begin Difficulty := Difficulty + 1 ;
16277: LD_ADDR_OWVAR 67
16281: PUSH
16282: LD_OWVAR 67
16286: PUSH
16287: LD_INT 1
16289: PLUS
16290: ST_TO_ADDR
// end ;
16291: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
16292: LD_EXP 53
16296: PUSH
16297: LD_EXP 72
16301: AND
16302: IFFALSE 16405
16304: GO 16306
16306: DISABLE
16307: LD_INT 0
16309: PPUSH
// begin for i := 1 to 5 do
16310: LD_ADDR_VAR 0 1
16314: PUSH
16315: DOUBLE
16316: LD_INT 1
16318: DEC
16319: ST_TO_ADDR
16320: LD_INT 5
16322: PUSH
16323: FOR_TO
16324: IFFALSE 16403
// begin uc_nation := nation_nature ;
16326: LD_ADDR_OWVAR 21
16330: PUSH
16331: LD_INT 0
16333: ST_TO_ADDR
// uc_side := 0 ;
16334: LD_ADDR_OWVAR 20
16338: PUSH
16339: LD_INT 0
16341: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
16342: LD_ADDR_OWVAR 29
16346: PUSH
16347: LD_INT 12
16349: PUSH
16350: LD_INT 12
16352: PUSH
16353: EMPTY
16354: LIST
16355: LIST
16356: ST_TO_ADDR
// hc_agressivity := 20 ;
16357: LD_ADDR_OWVAR 35
16361: PUSH
16362: LD_INT 20
16364: ST_TO_ADDR
// hc_class := class_tiger ;
16365: LD_ADDR_OWVAR 28
16369: PUSH
16370: LD_INT 14
16372: ST_TO_ADDR
// hc_gallery :=  ;
16373: LD_ADDR_OWVAR 33
16377: PUSH
16378: LD_STRING 
16380: ST_TO_ADDR
// hc_name :=  ;
16381: LD_ADDR_OWVAR 26
16385: PUSH
16386: LD_STRING 
16388: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
16389: CALL_OW 44
16393: PPUSH
16394: LD_INT 0
16396: PPUSH
16397: CALL_OW 51
// end ;
16401: GO 16323
16403: POP
16404: POP
// end ;
16405: PPOPN 1
16407: END
// every 0 0$1 trigger StreamModeActive and sBomb do
16408: LD_EXP 53
16412: PUSH
16413: LD_EXP 73
16417: AND
16418: IFFALSE 16427
16420: GO 16422
16422: DISABLE
// StreamSibBomb ;
16423: CALL 16428 0 0
16427: END
// export function StreamSibBomb ; var i , x , y ; begin
16428: LD_INT 0
16430: PPUSH
16431: PPUSH
16432: PPUSH
16433: PPUSH
// result := false ;
16434: LD_ADDR_VAR 0 1
16438: PUSH
16439: LD_INT 0
16441: ST_TO_ADDR
// for i := 1 to 16 do
16442: LD_ADDR_VAR 0 2
16446: PUSH
16447: DOUBLE
16448: LD_INT 1
16450: DEC
16451: ST_TO_ADDR
16452: LD_INT 16
16454: PUSH
16455: FOR_TO
16456: IFFALSE 16655
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
16458: LD_ADDR_VAR 0 3
16462: PUSH
16463: LD_INT 10
16465: PUSH
16466: LD_INT 20
16468: PUSH
16469: LD_INT 30
16471: PUSH
16472: LD_INT 40
16474: PUSH
16475: LD_INT 50
16477: PUSH
16478: LD_INT 60
16480: PUSH
16481: LD_INT 70
16483: PUSH
16484: LD_INT 80
16486: PUSH
16487: LD_INT 90
16489: PUSH
16490: LD_INT 100
16492: PUSH
16493: LD_INT 110
16495: PUSH
16496: LD_INT 120
16498: PUSH
16499: LD_INT 130
16501: PUSH
16502: LD_INT 140
16504: PUSH
16505: LD_INT 150
16507: PUSH
16508: EMPTY
16509: LIST
16510: LIST
16511: LIST
16512: LIST
16513: LIST
16514: LIST
16515: LIST
16516: LIST
16517: LIST
16518: LIST
16519: LIST
16520: LIST
16521: LIST
16522: LIST
16523: LIST
16524: PUSH
16525: LD_INT 1
16527: PPUSH
16528: LD_INT 15
16530: PPUSH
16531: CALL_OW 12
16535: ARRAY
16536: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
16537: LD_ADDR_VAR 0 4
16541: PUSH
16542: LD_INT 10
16544: PUSH
16545: LD_INT 20
16547: PUSH
16548: LD_INT 30
16550: PUSH
16551: LD_INT 40
16553: PUSH
16554: LD_INT 50
16556: PUSH
16557: LD_INT 60
16559: PUSH
16560: LD_INT 70
16562: PUSH
16563: LD_INT 80
16565: PUSH
16566: LD_INT 90
16568: PUSH
16569: LD_INT 100
16571: PUSH
16572: LD_INT 110
16574: PUSH
16575: LD_INT 120
16577: PUSH
16578: LD_INT 130
16580: PUSH
16581: LD_INT 140
16583: PUSH
16584: LD_INT 150
16586: PUSH
16587: EMPTY
16588: LIST
16589: LIST
16590: LIST
16591: LIST
16592: LIST
16593: LIST
16594: LIST
16595: LIST
16596: LIST
16597: LIST
16598: LIST
16599: LIST
16600: LIST
16601: LIST
16602: LIST
16603: PUSH
16604: LD_INT 1
16606: PPUSH
16607: LD_INT 15
16609: PPUSH
16610: CALL_OW 12
16614: ARRAY
16615: ST_TO_ADDR
// if ValidHex ( x , y ) then
16616: LD_VAR 0 3
16620: PPUSH
16621: LD_VAR 0 4
16625: PPUSH
16626: CALL_OW 488
16630: IFFALSE 16653
// begin result := [ x , y ] ;
16632: LD_ADDR_VAR 0 1
16636: PUSH
16637: LD_VAR 0 3
16641: PUSH
16642: LD_VAR 0 4
16646: PUSH
16647: EMPTY
16648: LIST
16649: LIST
16650: ST_TO_ADDR
// break ;
16651: GO 16655
// end ; end ;
16653: GO 16455
16655: POP
16656: POP
// if result then
16657: LD_VAR 0 1
16661: IFFALSE 16721
// begin ToLua ( playSibBomb() ) ;
16663: LD_STRING playSibBomb()
16665: PPUSH
16666: CALL_OW 559
// wait ( 0 0$14 ) ;
16670: LD_INT 490
16672: PPUSH
16673: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
16677: LD_VAR 0 1
16681: PUSH
16682: LD_INT 1
16684: ARRAY
16685: PPUSH
16686: LD_VAR 0 1
16690: PUSH
16691: LD_INT 2
16693: ARRAY
16694: PPUSH
16695: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
16699: LD_VAR 0 1
16703: PUSH
16704: LD_INT 1
16706: ARRAY
16707: PPUSH
16708: LD_VAR 0 1
16712: PUSH
16713: LD_INT 2
16715: ARRAY
16716: PPUSH
16717: CALL_OW 429
// end ; end ;
16721: LD_VAR 0 1
16725: RET
// every 0 0$1 trigger StreamModeActive and sReset do
16726: LD_EXP 53
16730: PUSH
16731: LD_EXP 75
16735: AND
16736: IFFALSE 16748
16738: GO 16740
16740: DISABLE
// YouLost (  ) ;
16741: LD_STRING 
16743: PPUSH
16744: CALL_OW 104
16748: END
// every 0 0$1 trigger StreamModeActive and sFog do
16749: LD_EXP 53
16753: PUSH
16754: LD_EXP 74
16758: AND
16759: IFFALSE 16773
16761: GO 16763
16763: DISABLE
// FogOff ( your_side ) ;
16764: LD_OWVAR 2
16768: PPUSH
16769: CALL_OW 344
16773: END
// every 0 0$1 trigger StreamModeActive and sSun do
16774: LD_EXP 53
16778: PUSH
16779: LD_EXP 76
16783: AND
16784: IFFALSE 16812
16786: GO 16788
16788: DISABLE
// begin solar_recharge_percent := 0 ;
16789: LD_ADDR_OWVAR 79
16793: PUSH
16794: LD_INT 0
16796: ST_TO_ADDR
// wait ( 5 5$00 ) ;
16797: LD_INT 10500
16799: PPUSH
16800: CALL_OW 67
// solar_recharge_percent := 100 ;
16804: LD_ADDR_OWVAR 79
16808: PUSH
16809: LD_INT 100
16811: ST_TO_ADDR
// end ;
16812: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
16813: LD_EXP 53
16817: PUSH
16818: LD_EXP 77
16822: AND
16823: IFFALSE 17062
16825: GO 16827
16827: DISABLE
16828: LD_INT 0
16830: PPUSH
16831: PPUSH
16832: PPUSH
// begin tmp := [ ] ;
16833: LD_ADDR_VAR 0 3
16837: PUSH
16838: EMPTY
16839: ST_TO_ADDR
// for i := 1 to 6 do
16840: LD_ADDR_VAR 0 1
16844: PUSH
16845: DOUBLE
16846: LD_INT 1
16848: DEC
16849: ST_TO_ADDR
16850: LD_INT 6
16852: PUSH
16853: FOR_TO
16854: IFFALSE 16959
// begin uc_nation := nation_nature ;
16856: LD_ADDR_OWVAR 21
16860: PUSH
16861: LD_INT 0
16863: ST_TO_ADDR
// uc_side := 0 ;
16864: LD_ADDR_OWVAR 20
16868: PUSH
16869: LD_INT 0
16871: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
16872: LD_ADDR_OWVAR 29
16876: PUSH
16877: LD_INT 12
16879: PUSH
16880: LD_INT 12
16882: PUSH
16883: EMPTY
16884: LIST
16885: LIST
16886: ST_TO_ADDR
// hc_agressivity := 20 ;
16887: LD_ADDR_OWVAR 35
16891: PUSH
16892: LD_INT 20
16894: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
16895: LD_ADDR_OWVAR 28
16899: PUSH
16900: LD_INT 17
16902: ST_TO_ADDR
// hc_gallery :=  ;
16903: LD_ADDR_OWVAR 33
16907: PUSH
16908: LD_STRING 
16910: ST_TO_ADDR
// hc_name :=  ;
16911: LD_ADDR_OWVAR 26
16915: PUSH
16916: LD_STRING 
16918: ST_TO_ADDR
// un := CreateHuman ;
16919: LD_ADDR_VAR 0 2
16923: PUSH
16924: CALL_OW 44
16928: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
16929: LD_VAR 0 2
16933: PPUSH
16934: LD_INT 1
16936: PPUSH
16937: CALL_OW 51
// tmp := tmp ^ un ;
16941: LD_ADDR_VAR 0 3
16945: PUSH
16946: LD_VAR 0 3
16950: PUSH
16951: LD_VAR 0 2
16955: ADD
16956: ST_TO_ADDR
// end ;
16957: GO 16853
16959: POP
16960: POP
// repeat wait ( 0 0$1 ) ;
16961: LD_INT 35
16963: PPUSH
16964: CALL_OW 67
// for un in tmp do
16968: LD_ADDR_VAR 0 2
16972: PUSH
16973: LD_VAR 0 3
16977: PUSH
16978: FOR_IN
16979: IFFALSE 17053
// begin if IsDead ( un ) then
16981: LD_VAR 0 2
16985: PPUSH
16986: CALL_OW 301
16990: IFFALSE 17010
// begin tmp := tmp diff un ;
16992: LD_ADDR_VAR 0 3
16996: PUSH
16997: LD_VAR 0 3
17001: PUSH
17002: LD_VAR 0 2
17006: DIFF
17007: ST_TO_ADDR
// continue ;
17008: GO 16978
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
17010: LD_VAR 0 2
17014: PPUSH
17015: LD_INT 3
17017: PUSH
17018: LD_INT 22
17020: PUSH
17021: LD_INT 0
17023: PUSH
17024: EMPTY
17025: LIST
17026: LIST
17027: PUSH
17028: EMPTY
17029: LIST
17030: LIST
17031: PPUSH
17032: CALL_OW 69
17036: PPUSH
17037: LD_VAR 0 2
17041: PPUSH
17042: CALL_OW 74
17046: PPUSH
17047: CALL_OW 115
// end ;
17051: GO 16978
17053: POP
17054: POP
// until not tmp ;
17055: LD_VAR 0 3
17059: NOT
17060: IFFALSE 16961
// end ;
17062: PPOPN 3
17064: END
// every 0 0$1 trigger StreamModeActive and sTroll do
17065: LD_EXP 53
17069: PUSH
17070: LD_EXP 78
17074: AND
17075: IFFALSE 17129
17077: GO 17079
17079: DISABLE
// begin ToLua ( displayTroll(); ) ;
17080: LD_STRING displayTroll();
17082: PPUSH
17083: CALL_OW 559
// wait ( 3 3$00 ) ;
17087: LD_INT 6300
17089: PPUSH
17090: CALL_OW 67
// ToLua ( hideTroll(); ) ;
17094: LD_STRING hideTroll();
17096: PPUSH
17097: CALL_OW 559
// wait ( 1 1$00 ) ;
17101: LD_INT 2100
17103: PPUSH
17104: CALL_OW 67
// ToLua ( displayTroll(); ) ;
17108: LD_STRING displayTroll();
17110: PPUSH
17111: CALL_OW 559
// wait ( 1 1$00 ) ;
17115: LD_INT 2100
17117: PPUSH
17118: CALL_OW 67
// ToLua ( hideTroll(); ) ;
17122: LD_STRING hideTroll();
17124: PPUSH
17125: CALL_OW 559
// end ;
17129: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
17130: LD_EXP 53
17134: PUSH
17135: LD_EXP 79
17139: AND
17140: IFFALSE 17203
17142: GO 17144
17144: DISABLE
17145: LD_INT 0
17147: PPUSH
// begin p := 0 ;
17148: LD_ADDR_VAR 0 1
17152: PUSH
17153: LD_INT 0
17155: ST_TO_ADDR
// repeat game_speed := 1 ;
17156: LD_ADDR_OWVAR 65
17160: PUSH
17161: LD_INT 1
17163: ST_TO_ADDR
// wait ( 0 0$1 ) ;
17164: LD_INT 35
17166: PPUSH
17167: CALL_OW 67
// p := p + 1 ;
17171: LD_ADDR_VAR 0 1
17175: PUSH
17176: LD_VAR 0 1
17180: PUSH
17181: LD_INT 1
17183: PLUS
17184: ST_TO_ADDR
// until p >= 60 ;
17185: LD_VAR 0 1
17189: PUSH
17190: LD_INT 60
17192: GREATEREQUAL
17193: IFFALSE 17156
// game_speed := 4 ;
17195: LD_ADDR_OWVAR 65
17199: PUSH
17200: LD_INT 4
17202: ST_TO_ADDR
// end ;
17203: PPOPN 1
17205: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
17206: LD_EXP 53
17210: PUSH
17211: LD_EXP 80
17215: AND
17216: IFFALSE 17362
17218: GO 17220
17220: DISABLE
17221: LD_INT 0
17223: PPUSH
17224: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17225: LD_ADDR_VAR 0 1
17229: PUSH
17230: LD_INT 22
17232: PUSH
17233: LD_OWVAR 2
17237: PUSH
17238: EMPTY
17239: LIST
17240: LIST
17241: PUSH
17242: LD_INT 2
17244: PUSH
17245: LD_INT 30
17247: PUSH
17248: LD_INT 0
17250: PUSH
17251: EMPTY
17252: LIST
17253: LIST
17254: PUSH
17255: LD_INT 30
17257: PUSH
17258: LD_INT 1
17260: PUSH
17261: EMPTY
17262: LIST
17263: LIST
17264: PUSH
17265: EMPTY
17266: LIST
17267: LIST
17268: LIST
17269: PUSH
17270: EMPTY
17271: LIST
17272: LIST
17273: PPUSH
17274: CALL_OW 69
17278: ST_TO_ADDR
// if not depot then
17279: LD_VAR 0 1
17283: NOT
17284: IFFALSE 17288
// exit ;
17286: GO 17362
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
17288: LD_ADDR_VAR 0 2
17292: PUSH
17293: LD_VAR 0 1
17297: PUSH
17298: LD_INT 1
17300: PPUSH
17301: LD_VAR 0 1
17305: PPUSH
17306: CALL_OW 12
17310: ARRAY
17311: PPUSH
17312: CALL_OW 274
17316: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
17317: LD_VAR 0 2
17321: PPUSH
17322: LD_INT 1
17324: PPUSH
17325: LD_INT 0
17327: PPUSH
17328: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
17332: LD_VAR 0 2
17336: PPUSH
17337: LD_INT 2
17339: PPUSH
17340: LD_INT 0
17342: PPUSH
17343: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
17347: LD_VAR 0 2
17351: PPUSH
17352: LD_INT 3
17354: PPUSH
17355: LD_INT 0
17357: PPUSH
17358: CALL_OW 277
// end ;
17362: PPOPN 2
17364: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
17365: LD_EXP 53
17369: PUSH
17370: LD_EXP 81
17374: AND
17375: IFFALSE 17472
17377: GO 17379
17379: DISABLE
17380: LD_INT 0
17382: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17383: LD_ADDR_VAR 0 1
17387: PUSH
17388: LD_INT 22
17390: PUSH
17391: LD_OWVAR 2
17395: PUSH
17396: EMPTY
17397: LIST
17398: LIST
17399: PUSH
17400: LD_INT 21
17402: PUSH
17403: LD_INT 1
17405: PUSH
17406: EMPTY
17407: LIST
17408: LIST
17409: PUSH
17410: LD_INT 3
17412: PUSH
17413: LD_INT 23
17415: PUSH
17416: LD_INT 0
17418: PUSH
17419: EMPTY
17420: LIST
17421: LIST
17422: PUSH
17423: EMPTY
17424: LIST
17425: LIST
17426: PUSH
17427: EMPTY
17428: LIST
17429: LIST
17430: LIST
17431: PPUSH
17432: CALL_OW 69
17436: ST_TO_ADDR
// if not tmp then
17437: LD_VAR 0 1
17441: NOT
17442: IFFALSE 17446
// exit ;
17444: GO 17472
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
17446: LD_VAR 0 1
17450: PUSH
17451: LD_INT 1
17453: PPUSH
17454: LD_VAR 0 1
17458: PPUSH
17459: CALL_OW 12
17463: ARRAY
17464: PPUSH
17465: LD_INT 200
17467: PPUSH
17468: CALL_OW 234
// end ;
17472: PPOPN 1
17474: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
17475: LD_EXP 53
17479: PUSH
17480: LD_EXP 82
17484: AND
17485: IFFALSE 17564
17487: GO 17489
17489: DISABLE
17490: LD_INT 0
17492: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
17493: LD_ADDR_VAR 0 1
17497: PUSH
17498: LD_INT 22
17500: PUSH
17501: LD_OWVAR 2
17505: PUSH
17506: EMPTY
17507: LIST
17508: LIST
17509: PUSH
17510: LD_INT 21
17512: PUSH
17513: LD_INT 2
17515: PUSH
17516: EMPTY
17517: LIST
17518: LIST
17519: PUSH
17520: EMPTY
17521: LIST
17522: LIST
17523: PPUSH
17524: CALL_OW 69
17528: ST_TO_ADDR
// if not tmp then
17529: LD_VAR 0 1
17533: NOT
17534: IFFALSE 17538
// exit ;
17536: GO 17564
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
17538: LD_VAR 0 1
17542: PUSH
17543: LD_INT 1
17545: PPUSH
17546: LD_VAR 0 1
17550: PPUSH
17551: CALL_OW 12
17555: ARRAY
17556: PPUSH
17557: LD_INT 60
17559: PPUSH
17560: CALL_OW 234
// end ;
17564: PPOPN 1
17566: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
17567: LD_EXP 53
17571: PUSH
17572: LD_EXP 83
17576: AND
17577: IFFALSE 17676
17579: GO 17581
17581: DISABLE
17582: LD_INT 0
17584: PPUSH
17585: PPUSH
// begin enable ;
17586: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
17587: LD_ADDR_VAR 0 1
17591: PUSH
17592: LD_INT 22
17594: PUSH
17595: LD_OWVAR 2
17599: PUSH
17600: EMPTY
17601: LIST
17602: LIST
17603: PUSH
17604: LD_INT 61
17606: PUSH
17607: EMPTY
17608: LIST
17609: PUSH
17610: LD_INT 33
17612: PUSH
17613: LD_INT 2
17615: PUSH
17616: EMPTY
17617: LIST
17618: LIST
17619: PUSH
17620: EMPTY
17621: LIST
17622: LIST
17623: LIST
17624: PPUSH
17625: CALL_OW 69
17629: ST_TO_ADDR
// if not tmp then
17630: LD_VAR 0 1
17634: NOT
17635: IFFALSE 17639
// exit ;
17637: GO 17676
// for i in tmp do
17639: LD_ADDR_VAR 0 2
17643: PUSH
17644: LD_VAR 0 1
17648: PUSH
17649: FOR_IN
17650: IFFALSE 17674
// if IsControledBy ( i ) then
17652: LD_VAR 0 2
17656: PPUSH
17657: CALL_OW 312
17661: IFFALSE 17672
// ComUnlink ( i ) ;
17663: LD_VAR 0 2
17667: PPUSH
17668: CALL_OW 136
17672: GO 17649
17674: POP
17675: POP
// end ;
17676: PPOPN 2
17678: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
17679: LD_EXP 53
17683: PUSH
17684: LD_EXP 84
17688: AND
17689: IFFALSE 17829
17691: GO 17693
17693: DISABLE
17694: LD_INT 0
17696: PPUSH
17697: PPUSH
// begin ToLua ( displayPowell(); ) ;
17698: LD_STRING displayPowell();
17700: PPUSH
17701: CALL_OW 559
// uc_side := 0 ;
17705: LD_ADDR_OWVAR 20
17709: PUSH
17710: LD_INT 0
17712: ST_TO_ADDR
// uc_nation := 2 ;
17713: LD_ADDR_OWVAR 21
17717: PUSH
17718: LD_INT 2
17720: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
17721: LD_ADDR_OWVAR 37
17725: PUSH
17726: LD_INT 14
17728: ST_TO_ADDR
// vc_engine := engine_siberite ;
17729: LD_ADDR_OWVAR 39
17733: PUSH
17734: LD_INT 3
17736: ST_TO_ADDR
// vc_control := control_apeman ;
17737: LD_ADDR_OWVAR 38
17741: PUSH
17742: LD_INT 5
17744: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
17745: LD_ADDR_OWVAR 40
17749: PUSH
17750: LD_INT 29
17752: ST_TO_ADDR
// un := CreateVehicle ;
17753: LD_ADDR_VAR 0 2
17757: PUSH
17758: CALL_OW 45
17762: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17763: LD_VAR 0 2
17767: PPUSH
17768: LD_INT 1
17770: PPUSH
17771: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
17775: LD_INT 35
17777: PPUSH
17778: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
17782: LD_VAR 0 2
17786: PPUSH
17787: LD_INT 22
17789: PUSH
17790: LD_OWVAR 2
17794: PUSH
17795: EMPTY
17796: LIST
17797: LIST
17798: PPUSH
17799: CALL_OW 69
17803: PPUSH
17804: LD_VAR 0 2
17808: PPUSH
17809: CALL_OW 74
17813: PPUSH
17814: CALL_OW 115
// until IsDead ( un ) ;
17818: LD_VAR 0 2
17822: PPUSH
17823: CALL_OW 301
17827: IFFALSE 17775
// end ;
17829: PPOPN 2
17831: END
// every 0 0$1 trigger StreamModeActive and sStu do
17832: LD_EXP 53
17836: PUSH
17837: LD_EXP 92
17841: AND
17842: IFFALSE 17858
17844: GO 17846
17846: DISABLE
// begin ToLua ( displayStucuk(); ) ;
17847: LD_STRING displayStucuk();
17849: PPUSH
17850: CALL_OW 559
// ResetFog ;
17854: CALL_OW 335
// end ;
17858: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
17859: LD_EXP 53
17863: PUSH
17864: LD_EXP 85
17868: AND
17869: IFFALSE 18010
17871: GO 17873
17873: DISABLE
17874: LD_INT 0
17876: PPUSH
17877: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17878: LD_ADDR_VAR 0 2
17882: PUSH
17883: LD_INT 22
17885: PUSH
17886: LD_OWVAR 2
17890: PUSH
17891: EMPTY
17892: LIST
17893: LIST
17894: PUSH
17895: LD_INT 21
17897: PUSH
17898: LD_INT 1
17900: PUSH
17901: EMPTY
17902: LIST
17903: LIST
17904: PUSH
17905: EMPTY
17906: LIST
17907: LIST
17908: PPUSH
17909: CALL_OW 69
17913: ST_TO_ADDR
// if not tmp then
17914: LD_VAR 0 2
17918: NOT
17919: IFFALSE 17923
// exit ;
17921: GO 18010
// un := tmp [ rand ( 1 , tmp ) ] ;
17923: LD_ADDR_VAR 0 1
17927: PUSH
17928: LD_VAR 0 2
17932: PUSH
17933: LD_INT 1
17935: PPUSH
17936: LD_VAR 0 2
17940: PPUSH
17941: CALL_OW 12
17945: ARRAY
17946: ST_TO_ADDR
// SetSide ( un , 0 ) ;
17947: LD_VAR 0 1
17951: PPUSH
17952: LD_INT 0
17954: PPUSH
17955: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
17959: LD_VAR 0 1
17963: PPUSH
17964: LD_OWVAR 3
17968: PUSH
17969: LD_VAR 0 1
17973: DIFF
17974: PPUSH
17975: LD_VAR 0 1
17979: PPUSH
17980: CALL_OW 74
17984: PPUSH
17985: CALL_OW 115
// wait ( 0 0$20 ) ;
17989: LD_INT 700
17991: PPUSH
17992: CALL_OW 67
// SetSide ( un , your_side ) ;
17996: LD_VAR 0 1
18000: PPUSH
18001: LD_OWVAR 2
18005: PPUSH
18006: CALL_OW 235
// end ;
18010: PPOPN 2
18012: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
18013: LD_EXP 53
18017: PUSH
18018: LD_EXP 86
18022: AND
18023: IFFALSE 18129
18025: GO 18027
18027: DISABLE
18028: LD_INT 0
18030: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18031: LD_ADDR_VAR 0 1
18035: PUSH
18036: LD_INT 22
18038: PUSH
18039: LD_OWVAR 2
18043: PUSH
18044: EMPTY
18045: LIST
18046: LIST
18047: PUSH
18048: LD_INT 2
18050: PUSH
18051: LD_INT 30
18053: PUSH
18054: LD_INT 0
18056: PUSH
18057: EMPTY
18058: LIST
18059: LIST
18060: PUSH
18061: LD_INT 30
18063: PUSH
18064: LD_INT 1
18066: PUSH
18067: EMPTY
18068: LIST
18069: LIST
18070: PUSH
18071: EMPTY
18072: LIST
18073: LIST
18074: LIST
18075: PUSH
18076: EMPTY
18077: LIST
18078: LIST
18079: PPUSH
18080: CALL_OW 69
18084: ST_TO_ADDR
// if not depot then
18085: LD_VAR 0 1
18089: NOT
18090: IFFALSE 18094
// exit ;
18092: GO 18129
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
18094: LD_VAR 0 1
18098: PUSH
18099: LD_INT 1
18101: ARRAY
18102: PPUSH
18103: CALL_OW 250
18107: PPUSH
18108: LD_VAR 0 1
18112: PUSH
18113: LD_INT 1
18115: ARRAY
18116: PPUSH
18117: CALL_OW 251
18121: PPUSH
18122: LD_INT 70
18124: PPUSH
18125: CALL_OW 495
// end ;
18129: PPOPN 1
18131: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
18132: LD_EXP 53
18136: PUSH
18137: LD_EXP 87
18141: AND
18142: IFFALSE 18353
18144: GO 18146
18146: DISABLE
18147: LD_INT 0
18149: PPUSH
18150: PPUSH
18151: PPUSH
18152: PPUSH
18153: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18154: LD_ADDR_VAR 0 5
18158: PUSH
18159: LD_INT 22
18161: PUSH
18162: LD_OWVAR 2
18166: PUSH
18167: EMPTY
18168: LIST
18169: LIST
18170: PUSH
18171: LD_INT 21
18173: PUSH
18174: LD_INT 1
18176: PUSH
18177: EMPTY
18178: LIST
18179: LIST
18180: PUSH
18181: EMPTY
18182: LIST
18183: LIST
18184: PPUSH
18185: CALL_OW 69
18189: ST_TO_ADDR
// if not tmp then
18190: LD_VAR 0 5
18194: NOT
18195: IFFALSE 18199
// exit ;
18197: GO 18353
// for i in tmp do
18199: LD_ADDR_VAR 0 1
18203: PUSH
18204: LD_VAR 0 5
18208: PUSH
18209: FOR_IN
18210: IFFALSE 18351
// begin d := rand ( 0 , 5 ) ;
18212: LD_ADDR_VAR 0 4
18216: PUSH
18217: LD_INT 0
18219: PPUSH
18220: LD_INT 5
18222: PPUSH
18223: CALL_OW 12
18227: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
18228: LD_ADDR_VAR 0 2
18232: PUSH
18233: LD_VAR 0 1
18237: PPUSH
18238: CALL_OW 250
18242: PPUSH
18243: LD_VAR 0 4
18247: PPUSH
18248: LD_INT 3
18250: PPUSH
18251: LD_INT 12
18253: PPUSH
18254: CALL_OW 12
18258: PPUSH
18259: CALL_OW 272
18263: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
18264: LD_ADDR_VAR 0 3
18268: PUSH
18269: LD_VAR 0 1
18273: PPUSH
18274: CALL_OW 251
18278: PPUSH
18279: LD_VAR 0 4
18283: PPUSH
18284: LD_INT 3
18286: PPUSH
18287: LD_INT 12
18289: PPUSH
18290: CALL_OW 12
18294: PPUSH
18295: CALL_OW 273
18299: ST_TO_ADDR
// if ValidHex ( x , y ) then
18300: LD_VAR 0 2
18304: PPUSH
18305: LD_VAR 0 3
18309: PPUSH
18310: CALL_OW 488
18314: IFFALSE 18349
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
18316: LD_VAR 0 1
18320: PPUSH
18321: LD_VAR 0 2
18325: PPUSH
18326: LD_VAR 0 3
18330: PPUSH
18331: LD_INT 3
18333: PPUSH
18334: LD_INT 6
18336: PPUSH
18337: CALL_OW 12
18341: PPUSH
18342: LD_INT 1
18344: PPUSH
18345: CALL_OW 483
// end ;
18349: GO 18209
18351: POP
18352: POP
// end ;
18353: PPOPN 5
18355: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
18356: LD_EXP 53
18360: PUSH
18361: LD_EXP 88
18365: AND
18366: IFFALSE 18460
18368: GO 18370
18370: DISABLE
18371: LD_INT 0
18373: PPUSH
18374: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
18375: LD_ADDR_VAR 0 2
18379: PUSH
18380: LD_INT 22
18382: PUSH
18383: LD_OWVAR 2
18387: PUSH
18388: EMPTY
18389: LIST
18390: LIST
18391: PUSH
18392: LD_INT 32
18394: PUSH
18395: LD_INT 1
18397: PUSH
18398: EMPTY
18399: LIST
18400: LIST
18401: PUSH
18402: LD_INT 21
18404: PUSH
18405: LD_INT 2
18407: PUSH
18408: EMPTY
18409: LIST
18410: LIST
18411: PUSH
18412: EMPTY
18413: LIST
18414: LIST
18415: LIST
18416: PPUSH
18417: CALL_OW 69
18421: ST_TO_ADDR
// if not tmp then
18422: LD_VAR 0 2
18426: NOT
18427: IFFALSE 18431
// exit ;
18429: GO 18460
// for i in tmp do
18431: LD_ADDR_VAR 0 1
18435: PUSH
18436: LD_VAR 0 2
18440: PUSH
18441: FOR_IN
18442: IFFALSE 18458
// SetFuel ( i , 0 ) ;
18444: LD_VAR 0 1
18448: PPUSH
18449: LD_INT 0
18451: PPUSH
18452: CALL_OW 240
18456: GO 18441
18458: POP
18459: POP
// end ;
18460: PPOPN 2
18462: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
18463: LD_EXP 53
18467: PUSH
18468: LD_EXP 89
18472: AND
18473: IFFALSE 18539
18475: GO 18477
18477: DISABLE
18478: LD_INT 0
18480: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
18481: LD_ADDR_VAR 0 1
18485: PUSH
18486: LD_INT 22
18488: PUSH
18489: LD_OWVAR 2
18493: PUSH
18494: EMPTY
18495: LIST
18496: LIST
18497: PUSH
18498: LD_INT 30
18500: PUSH
18501: LD_INT 29
18503: PUSH
18504: EMPTY
18505: LIST
18506: LIST
18507: PUSH
18508: EMPTY
18509: LIST
18510: LIST
18511: PPUSH
18512: CALL_OW 69
18516: ST_TO_ADDR
// if not tmp then
18517: LD_VAR 0 1
18521: NOT
18522: IFFALSE 18526
// exit ;
18524: GO 18539
// DestroyUnit ( tmp [ 1 ] ) ;
18526: LD_VAR 0 1
18530: PUSH
18531: LD_INT 1
18533: ARRAY
18534: PPUSH
18535: CALL_OW 65
// end ;
18539: PPOPN 1
18541: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
18542: LD_EXP 53
18546: PUSH
18547: LD_EXP 91
18551: AND
18552: IFFALSE 18681
18554: GO 18556
18556: DISABLE
18557: LD_INT 0
18559: PPUSH
// begin uc_side := 0 ;
18560: LD_ADDR_OWVAR 20
18564: PUSH
18565: LD_INT 0
18567: ST_TO_ADDR
// uc_nation := nation_arabian ;
18568: LD_ADDR_OWVAR 21
18572: PUSH
18573: LD_INT 2
18575: ST_TO_ADDR
// hc_gallery :=  ;
18576: LD_ADDR_OWVAR 33
18580: PUSH
18581: LD_STRING 
18583: ST_TO_ADDR
// hc_name :=  ;
18584: LD_ADDR_OWVAR 26
18588: PUSH
18589: LD_STRING 
18591: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
18592: LD_INT 1
18594: PPUSH
18595: LD_INT 11
18597: PPUSH
18598: LD_INT 10
18600: PPUSH
18601: CALL_OW 380
// un := CreateHuman ;
18605: LD_ADDR_VAR 0 1
18609: PUSH
18610: CALL_OW 44
18614: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18615: LD_VAR 0 1
18619: PPUSH
18620: LD_INT 1
18622: PPUSH
18623: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
18627: LD_INT 35
18629: PPUSH
18630: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
18634: LD_VAR 0 1
18638: PPUSH
18639: LD_INT 22
18641: PUSH
18642: LD_OWVAR 2
18646: PUSH
18647: EMPTY
18648: LIST
18649: LIST
18650: PPUSH
18651: CALL_OW 69
18655: PPUSH
18656: LD_VAR 0 1
18660: PPUSH
18661: CALL_OW 74
18665: PPUSH
18666: CALL_OW 115
// until IsDead ( un ) ;
18670: LD_VAR 0 1
18674: PPUSH
18675: CALL_OW 301
18679: IFFALSE 18627
// end ;
18681: PPOPN 1
18683: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
18684: LD_EXP 53
18688: PUSH
18689: LD_EXP 93
18693: AND
18694: IFFALSE 18706
18696: GO 18698
18698: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
18699: LD_STRING earthquake(getX(game), 0, 32)
18701: PPUSH
18702: CALL_OW 559
18706: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
18707: LD_EXP 53
18711: PUSH
18712: LD_EXP 94
18716: AND
18717: IFFALSE 18808
18719: GO 18721
18721: DISABLE
18722: LD_INT 0
18724: PPUSH
// begin enable ;
18725: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
18726: LD_ADDR_VAR 0 1
18730: PUSH
18731: LD_INT 22
18733: PUSH
18734: LD_OWVAR 2
18738: PUSH
18739: EMPTY
18740: LIST
18741: LIST
18742: PUSH
18743: LD_INT 21
18745: PUSH
18746: LD_INT 2
18748: PUSH
18749: EMPTY
18750: LIST
18751: LIST
18752: PUSH
18753: LD_INT 33
18755: PUSH
18756: LD_INT 3
18758: PUSH
18759: EMPTY
18760: LIST
18761: LIST
18762: PUSH
18763: EMPTY
18764: LIST
18765: LIST
18766: LIST
18767: PPUSH
18768: CALL_OW 69
18772: ST_TO_ADDR
// if not tmp then
18773: LD_VAR 0 1
18777: NOT
18778: IFFALSE 18782
// exit ;
18780: GO 18808
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
18782: LD_VAR 0 1
18786: PUSH
18787: LD_INT 1
18789: PPUSH
18790: LD_VAR 0 1
18794: PPUSH
18795: CALL_OW 12
18799: ARRAY
18800: PPUSH
18801: LD_INT 1
18803: PPUSH
18804: CALL_OW 234
// end ;
18808: PPOPN 1
18810: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
18811: LD_EXP 53
18815: PUSH
18816: LD_EXP 95
18820: AND
18821: IFFALSE 18962
18823: GO 18825
18825: DISABLE
18826: LD_INT 0
18828: PPUSH
18829: PPUSH
18830: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18831: LD_ADDR_VAR 0 3
18835: PUSH
18836: LD_INT 22
18838: PUSH
18839: LD_OWVAR 2
18843: PUSH
18844: EMPTY
18845: LIST
18846: LIST
18847: PUSH
18848: LD_INT 25
18850: PUSH
18851: LD_INT 1
18853: PUSH
18854: EMPTY
18855: LIST
18856: LIST
18857: PUSH
18858: EMPTY
18859: LIST
18860: LIST
18861: PPUSH
18862: CALL_OW 69
18866: ST_TO_ADDR
// if not tmp then
18867: LD_VAR 0 3
18871: NOT
18872: IFFALSE 18876
// exit ;
18874: GO 18962
// un := tmp [ rand ( 1 , tmp ) ] ;
18876: LD_ADDR_VAR 0 2
18880: PUSH
18881: LD_VAR 0 3
18885: PUSH
18886: LD_INT 1
18888: PPUSH
18889: LD_VAR 0 3
18893: PPUSH
18894: CALL_OW 12
18898: ARRAY
18899: ST_TO_ADDR
// if Crawls ( un ) then
18900: LD_VAR 0 2
18904: PPUSH
18905: CALL_OW 318
18909: IFFALSE 18920
// ComWalk ( un ) ;
18911: LD_VAR 0 2
18915: PPUSH
18916: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
18920: LD_VAR 0 2
18924: PPUSH
18925: LD_INT 9
18927: PPUSH
18928: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
18932: LD_INT 28
18934: PPUSH
18935: LD_OWVAR 2
18939: PPUSH
18940: LD_INT 2
18942: PPUSH
18943: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
18947: LD_INT 29
18949: PPUSH
18950: LD_OWVAR 2
18954: PPUSH
18955: LD_INT 2
18957: PPUSH
18958: CALL_OW 322
// end ;
18962: PPOPN 3
18964: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
18965: LD_EXP 53
18969: PUSH
18970: LD_EXP 96
18974: AND
18975: IFFALSE 19086
18977: GO 18979
18979: DISABLE
18980: LD_INT 0
18982: PPUSH
18983: PPUSH
18984: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18985: LD_ADDR_VAR 0 3
18989: PUSH
18990: LD_INT 22
18992: PUSH
18993: LD_OWVAR 2
18997: PUSH
18998: EMPTY
18999: LIST
19000: LIST
19001: PUSH
19002: LD_INT 25
19004: PUSH
19005: LD_INT 1
19007: PUSH
19008: EMPTY
19009: LIST
19010: LIST
19011: PUSH
19012: EMPTY
19013: LIST
19014: LIST
19015: PPUSH
19016: CALL_OW 69
19020: ST_TO_ADDR
// if not tmp then
19021: LD_VAR 0 3
19025: NOT
19026: IFFALSE 19030
// exit ;
19028: GO 19086
// un := tmp [ rand ( 1 , tmp ) ] ;
19030: LD_ADDR_VAR 0 2
19034: PUSH
19035: LD_VAR 0 3
19039: PUSH
19040: LD_INT 1
19042: PPUSH
19043: LD_VAR 0 3
19047: PPUSH
19048: CALL_OW 12
19052: ARRAY
19053: ST_TO_ADDR
// if Crawls ( un ) then
19054: LD_VAR 0 2
19058: PPUSH
19059: CALL_OW 318
19063: IFFALSE 19074
// ComWalk ( un ) ;
19065: LD_VAR 0 2
19069: PPUSH
19070: CALL_OW 138
// SetClass ( un , class_mortar ) ;
19074: LD_VAR 0 2
19078: PPUSH
19079: LD_INT 8
19081: PPUSH
19082: CALL_OW 336
// end ;
19086: PPOPN 3
19088: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
19089: LD_EXP 53
19093: PUSH
19094: LD_EXP 97
19098: AND
19099: IFFALSE 19243
19101: GO 19103
19103: DISABLE
19104: LD_INT 0
19106: PPUSH
19107: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
19108: LD_ADDR_VAR 0 2
19112: PUSH
19113: LD_INT 22
19115: PUSH
19116: LD_OWVAR 2
19120: PUSH
19121: EMPTY
19122: LIST
19123: LIST
19124: PUSH
19125: LD_INT 21
19127: PUSH
19128: LD_INT 2
19130: PUSH
19131: EMPTY
19132: LIST
19133: LIST
19134: PUSH
19135: LD_INT 2
19137: PUSH
19138: LD_INT 34
19140: PUSH
19141: LD_INT 12
19143: PUSH
19144: EMPTY
19145: LIST
19146: LIST
19147: PUSH
19148: LD_INT 34
19150: PUSH
19151: LD_INT 51
19153: PUSH
19154: EMPTY
19155: LIST
19156: LIST
19157: PUSH
19158: LD_INT 34
19160: PUSH
19161: LD_INT 32
19163: PUSH
19164: EMPTY
19165: LIST
19166: LIST
19167: PUSH
19168: EMPTY
19169: LIST
19170: LIST
19171: LIST
19172: LIST
19173: PUSH
19174: EMPTY
19175: LIST
19176: LIST
19177: LIST
19178: PPUSH
19179: CALL_OW 69
19183: ST_TO_ADDR
// if not tmp then
19184: LD_VAR 0 2
19188: NOT
19189: IFFALSE 19193
// exit ;
19191: GO 19243
// for i in tmp do
19193: LD_ADDR_VAR 0 1
19197: PUSH
19198: LD_VAR 0 2
19202: PUSH
19203: FOR_IN
19204: IFFALSE 19241
// if GetCargo ( i , mat_artifact ) = 0 then
19206: LD_VAR 0 1
19210: PPUSH
19211: LD_INT 4
19213: PPUSH
19214: CALL_OW 289
19218: PUSH
19219: LD_INT 0
19221: EQUAL
19222: IFFALSE 19239
// SetCargo ( i , mat_siberit , 100 ) ;
19224: LD_VAR 0 1
19228: PPUSH
19229: LD_INT 3
19231: PPUSH
19232: LD_INT 100
19234: PPUSH
19235: CALL_OW 290
19239: GO 19203
19241: POP
19242: POP
// end ;
19243: PPOPN 2
19245: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
19246: LD_EXP 53
19250: PUSH
19251: LD_EXP 98
19255: AND
19256: IFFALSE 19439
19258: GO 19260
19260: DISABLE
19261: LD_INT 0
19263: PPUSH
19264: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19265: LD_ADDR_VAR 0 2
19269: PUSH
19270: LD_INT 22
19272: PUSH
19273: LD_OWVAR 2
19277: PUSH
19278: EMPTY
19279: LIST
19280: LIST
19281: PPUSH
19282: CALL_OW 69
19286: ST_TO_ADDR
// if not tmp then
19287: LD_VAR 0 2
19291: NOT
19292: IFFALSE 19296
// exit ;
19294: GO 19439
// for i := 1 to 2 do
19296: LD_ADDR_VAR 0 1
19300: PUSH
19301: DOUBLE
19302: LD_INT 1
19304: DEC
19305: ST_TO_ADDR
19306: LD_INT 2
19308: PUSH
19309: FOR_TO
19310: IFFALSE 19437
// begin uc_side := your_side ;
19312: LD_ADDR_OWVAR 20
19316: PUSH
19317: LD_OWVAR 2
19321: ST_TO_ADDR
// uc_nation := nation_american ;
19322: LD_ADDR_OWVAR 21
19326: PUSH
19327: LD_INT 1
19329: ST_TO_ADDR
// vc_chassis := us_morphling ;
19330: LD_ADDR_OWVAR 37
19334: PUSH
19335: LD_INT 5
19337: ST_TO_ADDR
// vc_engine := engine_siberite ;
19338: LD_ADDR_OWVAR 39
19342: PUSH
19343: LD_INT 3
19345: ST_TO_ADDR
// vc_control := control_computer ;
19346: LD_ADDR_OWVAR 38
19350: PUSH
19351: LD_INT 3
19353: ST_TO_ADDR
// vc_weapon := us_double_laser ;
19354: LD_ADDR_OWVAR 40
19358: PUSH
19359: LD_INT 10
19361: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
19362: LD_VAR 0 2
19366: PUSH
19367: LD_INT 1
19369: ARRAY
19370: PPUSH
19371: CALL_OW 310
19375: NOT
19376: IFFALSE 19423
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
19378: CALL_OW 45
19382: PPUSH
19383: LD_VAR 0 2
19387: PUSH
19388: LD_INT 1
19390: ARRAY
19391: PPUSH
19392: CALL_OW 250
19396: PPUSH
19397: LD_VAR 0 2
19401: PUSH
19402: LD_INT 1
19404: ARRAY
19405: PPUSH
19406: CALL_OW 251
19410: PPUSH
19411: LD_INT 12
19413: PPUSH
19414: LD_INT 1
19416: PPUSH
19417: CALL_OW 50
19421: GO 19435
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
19423: CALL_OW 45
19427: PPUSH
19428: LD_INT 1
19430: PPUSH
19431: CALL_OW 51
// end ;
19435: GO 19309
19437: POP
19438: POP
// end ;
19439: PPOPN 2
19441: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
19442: LD_EXP 53
19446: PUSH
19447: LD_EXP 99
19451: AND
19452: IFFALSE 19674
19454: GO 19456
19456: DISABLE
19457: LD_INT 0
19459: PPUSH
19460: PPUSH
19461: PPUSH
19462: PPUSH
19463: PPUSH
19464: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19465: LD_ADDR_VAR 0 6
19469: PUSH
19470: LD_INT 22
19472: PUSH
19473: LD_OWVAR 2
19477: PUSH
19478: EMPTY
19479: LIST
19480: LIST
19481: PUSH
19482: LD_INT 21
19484: PUSH
19485: LD_INT 1
19487: PUSH
19488: EMPTY
19489: LIST
19490: LIST
19491: PUSH
19492: LD_INT 3
19494: PUSH
19495: LD_INT 23
19497: PUSH
19498: LD_INT 0
19500: PUSH
19501: EMPTY
19502: LIST
19503: LIST
19504: PUSH
19505: EMPTY
19506: LIST
19507: LIST
19508: PUSH
19509: EMPTY
19510: LIST
19511: LIST
19512: LIST
19513: PPUSH
19514: CALL_OW 69
19518: ST_TO_ADDR
// if not tmp then
19519: LD_VAR 0 6
19523: NOT
19524: IFFALSE 19528
// exit ;
19526: GO 19674
// s1 := rand ( 1 , 4 ) ;
19528: LD_ADDR_VAR 0 2
19532: PUSH
19533: LD_INT 1
19535: PPUSH
19536: LD_INT 4
19538: PPUSH
19539: CALL_OW 12
19543: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
19544: LD_ADDR_VAR 0 4
19548: PUSH
19549: LD_VAR 0 6
19553: PUSH
19554: LD_INT 1
19556: ARRAY
19557: PPUSH
19558: LD_VAR 0 2
19562: PPUSH
19563: CALL_OW 259
19567: ST_TO_ADDR
// if s1 = 1 then
19568: LD_VAR 0 2
19572: PUSH
19573: LD_INT 1
19575: EQUAL
19576: IFFALSE 19596
// s2 := rand ( 2 , 4 ) else
19578: LD_ADDR_VAR 0 3
19582: PUSH
19583: LD_INT 2
19585: PPUSH
19586: LD_INT 4
19588: PPUSH
19589: CALL_OW 12
19593: ST_TO_ADDR
19594: GO 19604
// s2 := 1 ;
19596: LD_ADDR_VAR 0 3
19600: PUSH
19601: LD_INT 1
19603: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
19604: LD_ADDR_VAR 0 5
19608: PUSH
19609: LD_VAR 0 6
19613: PUSH
19614: LD_INT 1
19616: ARRAY
19617: PPUSH
19618: LD_VAR 0 3
19622: PPUSH
19623: CALL_OW 259
19627: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
19628: LD_VAR 0 6
19632: PUSH
19633: LD_INT 1
19635: ARRAY
19636: PPUSH
19637: LD_VAR 0 2
19641: PPUSH
19642: LD_VAR 0 5
19646: PPUSH
19647: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
19651: LD_VAR 0 6
19655: PUSH
19656: LD_INT 1
19658: ARRAY
19659: PPUSH
19660: LD_VAR 0 3
19664: PPUSH
19665: LD_VAR 0 4
19669: PPUSH
19670: CALL_OW 237
// end ;
19674: PPOPN 6
19676: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
19677: LD_EXP 53
19681: PUSH
19682: LD_EXP 100
19686: AND
19687: IFFALSE 19766
19689: GO 19691
19691: DISABLE
19692: LD_INT 0
19694: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
19695: LD_ADDR_VAR 0 1
19699: PUSH
19700: LD_INT 22
19702: PUSH
19703: LD_OWVAR 2
19707: PUSH
19708: EMPTY
19709: LIST
19710: LIST
19711: PUSH
19712: LD_INT 30
19714: PUSH
19715: LD_INT 3
19717: PUSH
19718: EMPTY
19719: LIST
19720: LIST
19721: PUSH
19722: EMPTY
19723: LIST
19724: LIST
19725: PPUSH
19726: CALL_OW 69
19730: ST_TO_ADDR
// if not tmp then
19731: LD_VAR 0 1
19735: NOT
19736: IFFALSE 19740
// exit ;
19738: GO 19766
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
19740: LD_VAR 0 1
19744: PUSH
19745: LD_INT 1
19747: PPUSH
19748: LD_VAR 0 1
19752: PPUSH
19753: CALL_OW 12
19757: ARRAY
19758: PPUSH
19759: LD_INT 1
19761: PPUSH
19762: CALL_OW 234
// end ;
19766: PPOPN 1
19768: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
19769: LD_EXP 53
19773: PUSH
19774: LD_EXP 101
19778: AND
19779: IFFALSE 19891
19781: GO 19783
19783: DISABLE
19784: LD_INT 0
19786: PPUSH
19787: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
19788: LD_ADDR_VAR 0 2
19792: PUSH
19793: LD_INT 22
19795: PUSH
19796: LD_OWVAR 2
19800: PUSH
19801: EMPTY
19802: LIST
19803: LIST
19804: PUSH
19805: LD_INT 2
19807: PUSH
19808: LD_INT 30
19810: PUSH
19811: LD_INT 27
19813: PUSH
19814: EMPTY
19815: LIST
19816: LIST
19817: PUSH
19818: LD_INT 30
19820: PUSH
19821: LD_INT 26
19823: PUSH
19824: EMPTY
19825: LIST
19826: LIST
19827: PUSH
19828: LD_INT 30
19830: PUSH
19831: LD_INT 28
19833: PUSH
19834: EMPTY
19835: LIST
19836: LIST
19837: PUSH
19838: EMPTY
19839: LIST
19840: LIST
19841: LIST
19842: LIST
19843: PUSH
19844: EMPTY
19845: LIST
19846: LIST
19847: PPUSH
19848: CALL_OW 69
19852: ST_TO_ADDR
// if not tmp then
19853: LD_VAR 0 2
19857: NOT
19858: IFFALSE 19862
// exit ;
19860: GO 19891
// for i in tmp do
19862: LD_ADDR_VAR 0 1
19866: PUSH
19867: LD_VAR 0 2
19871: PUSH
19872: FOR_IN
19873: IFFALSE 19889
// SetLives ( i , 1 ) ;
19875: LD_VAR 0 1
19879: PPUSH
19880: LD_INT 1
19882: PPUSH
19883: CALL_OW 234
19887: GO 19872
19889: POP
19890: POP
// end ;
19891: PPOPN 2
19893: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
19894: LD_EXP 53
19898: PUSH
19899: LD_EXP 102
19903: AND
19904: IFFALSE 20191
19906: GO 19908
19908: DISABLE
19909: LD_INT 0
19911: PPUSH
19912: PPUSH
19913: PPUSH
// begin i := rand ( 1 , 7 ) ;
19914: LD_ADDR_VAR 0 1
19918: PUSH
19919: LD_INT 1
19921: PPUSH
19922: LD_INT 7
19924: PPUSH
19925: CALL_OW 12
19929: ST_TO_ADDR
// case i of 1 :
19930: LD_VAR 0 1
19934: PUSH
19935: LD_INT 1
19937: DOUBLE
19938: EQUAL
19939: IFTRUE 19943
19941: GO 19953
19943: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
19944: LD_STRING earthquake(getX(game), 0, 32)
19946: PPUSH
19947: CALL_OW 559
19951: GO 20191
19953: LD_INT 2
19955: DOUBLE
19956: EQUAL
19957: IFTRUE 19961
19959: GO 19975
19961: POP
// begin ToLua ( displayStucuk(); ) ;
19962: LD_STRING displayStucuk();
19964: PPUSH
19965: CALL_OW 559
// ResetFog ;
19969: CALL_OW 335
// end ; 3 :
19973: GO 20191
19975: LD_INT 3
19977: DOUBLE
19978: EQUAL
19979: IFTRUE 19983
19981: GO 20087
19983: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19984: LD_ADDR_VAR 0 2
19988: PUSH
19989: LD_INT 22
19991: PUSH
19992: LD_OWVAR 2
19996: PUSH
19997: EMPTY
19998: LIST
19999: LIST
20000: PUSH
20001: LD_INT 25
20003: PUSH
20004: LD_INT 1
20006: PUSH
20007: EMPTY
20008: LIST
20009: LIST
20010: PUSH
20011: EMPTY
20012: LIST
20013: LIST
20014: PPUSH
20015: CALL_OW 69
20019: ST_TO_ADDR
// if not tmp then
20020: LD_VAR 0 2
20024: NOT
20025: IFFALSE 20029
// exit ;
20027: GO 20191
// un := tmp [ rand ( 1 , tmp ) ] ;
20029: LD_ADDR_VAR 0 3
20033: PUSH
20034: LD_VAR 0 2
20038: PUSH
20039: LD_INT 1
20041: PPUSH
20042: LD_VAR 0 2
20046: PPUSH
20047: CALL_OW 12
20051: ARRAY
20052: ST_TO_ADDR
// if Crawls ( un ) then
20053: LD_VAR 0 3
20057: PPUSH
20058: CALL_OW 318
20062: IFFALSE 20073
// ComWalk ( un ) ;
20064: LD_VAR 0 3
20068: PPUSH
20069: CALL_OW 138
// SetClass ( un , class_mortar ) ;
20073: LD_VAR 0 3
20077: PPUSH
20078: LD_INT 8
20080: PPUSH
20081: CALL_OW 336
// end ; 4 :
20085: GO 20191
20087: LD_INT 4
20089: DOUBLE
20090: EQUAL
20091: IFTRUE 20095
20093: GO 20169
20095: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
20096: LD_ADDR_VAR 0 2
20100: PUSH
20101: LD_INT 22
20103: PUSH
20104: LD_OWVAR 2
20108: PUSH
20109: EMPTY
20110: LIST
20111: LIST
20112: PUSH
20113: LD_INT 30
20115: PUSH
20116: LD_INT 29
20118: PUSH
20119: EMPTY
20120: LIST
20121: LIST
20122: PUSH
20123: EMPTY
20124: LIST
20125: LIST
20126: PPUSH
20127: CALL_OW 69
20131: ST_TO_ADDR
// if not tmp then
20132: LD_VAR 0 2
20136: NOT
20137: IFFALSE 20141
// exit ;
20139: GO 20191
// CenterNowOnUnits ( tmp [ 1 ] ) ;
20141: LD_VAR 0 2
20145: PUSH
20146: LD_INT 1
20148: ARRAY
20149: PPUSH
20150: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
20154: LD_VAR 0 2
20158: PUSH
20159: LD_INT 1
20161: ARRAY
20162: PPUSH
20163: CALL_OW 65
// end ; 5 .. 7 :
20167: GO 20191
20169: LD_INT 5
20171: DOUBLE
20172: GREATEREQUAL
20173: IFFALSE 20181
20175: LD_INT 7
20177: DOUBLE
20178: LESSEQUAL
20179: IFTRUE 20183
20181: GO 20190
20183: POP
// StreamSibBomb ; end ;
20184: CALL 16428 0 0
20188: GO 20191
20190: POP
// end ;
20191: PPOPN 3
20193: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
20194: LD_EXP 53
20198: PUSH
20199: LD_EXP 103
20203: AND
20204: IFFALSE 20360
20206: GO 20208
20208: DISABLE
20209: LD_INT 0
20211: PPUSH
20212: PPUSH
20213: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
20214: LD_ADDR_VAR 0 2
20218: PUSH
20219: LD_INT 81
20221: PUSH
20222: LD_OWVAR 2
20226: PUSH
20227: EMPTY
20228: LIST
20229: LIST
20230: PUSH
20231: LD_INT 2
20233: PUSH
20234: LD_INT 21
20236: PUSH
20237: LD_INT 1
20239: PUSH
20240: EMPTY
20241: LIST
20242: LIST
20243: PUSH
20244: LD_INT 21
20246: PUSH
20247: LD_INT 2
20249: PUSH
20250: EMPTY
20251: LIST
20252: LIST
20253: PUSH
20254: EMPTY
20255: LIST
20256: LIST
20257: LIST
20258: PUSH
20259: EMPTY
20260: LIST
20261: LIST
20262: PPUSH
20263: CALL_OW 69
20267: ST_TO_ADDR
// if not tmp then
20268: LD_VAR 0 2
20272: NOT
20273: IFFALSE 20277
// exit ;
20275: GO 20360
// p := 0 ;
20277: LD_ADDR_VAR 0 3
20281: PUSH
20282: LD_INT 0
20284: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
20285: LD_INT 35
20287: PPUSH
20288: CALL_OW 67
// p := p + 1 ;
20292: LD_ADDR_VAR 0 3
20296: PUSH
20297: LD_VAR 0 3
20301: PUSH
20302: LD_INT 1
20304: PLUS
20305: ST_TO_ADDR
// for i in tmp do
20306: LD_ADDR_VAR 0 1
20310: PUSH
20311: LD_VAR 0 2
20315: PUSH
20316: FOR_IN
20317: IFFALSE 20348
// if GetLives ( i ) < 1000 then
20319: LD_VAR 0 1
20323: PPUSH
20324: CALL_OW 256
20328: PUSH
20329: LD_INT 1000
20331: LESS
20332: IFFALSE 20346
// SetLives ( i , 1000 ) ;
20334: LD_VAR 0 1
20338: PPUSH
20339: LD_INT 1000
20341: PPUSH
20342: CALL_OW 234
20346: GO 20316
20348: POP
20349: POP
// until p > 20 ;
20350: LD_VAR 0 3
20354: PUSH
20355: LD_INT 20
20357: GREATER
20358: IFFALSE 20285
// end ;
20360: PPOPN 3
20362: END
// every 0 0$1 trigger StreamModeActive and sTime do
20363: LD_EXP 53
20367: PUSH
20368: LD_EXP 104
20372: AND
20373: IFFALSE 20408
20375: GO 20377
20377: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
20378: LD_INT 28
20380: PPUSH
20381: LD_OWVAR 2
20385: PPUSH
20386: LD_INT 2
20388: PPUSH
20389: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
20393: LD_INT 30
20395: PPUSH
20396: LD_OWVAR 2
20400: PPUSH
20401: LD_INT 2
20403: PPUSH
20404: CALL_OW 322
// end ;
20408: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
20409: LD_EXP 53
20413: PUSH
20414: LD_EXP 105
20418: AND
20419: IFFALSE 20540
20421: GO 20423
20423: DISABLE
20424: LD_INT 0
20426: PPUSH
20427: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20428: LD_ADDR_VAR 0 2
20432: PUSH
20433: LD_INT 22
20435: PUSH
20436: LD_OWVAR 2
20440: PUSH
20441: EMPTY
20442: LIST
20443: LIST
20444: PUSH
20445: LD_INT 21
20447: PUSH
20448: LD_INT 1
20450: PUSH
20451: EMPTY
20452: LIST
20453: LIST
20454: PUSH
20455: LD_INT 3
20457: PUSH
20458: LD_INT 23
20460: PUSH
20461: LD_INT 0
20463: PUSH
20464: EMPTY
20465: LIST
20466: LIST
20467: PUSH
20468: EMPTY
20469: LIST
20470: LIST
20471: PUSH
20472: EMPTY
20473: LIST
20474: LIST
20475: LIST
20476: PPUSH
20477: CALL_OW 69
20481: ST_TO_ADDR
// if not tmp then
20482: LD_VAR 0 2
20486: NOT
20487: IFFALSE 20491
// exit ;
20489: GO 20540
// for i in tmp do
20491: LD_ADDR_VAR 0 1
20495: PUSH
20496: LD_VAR 0 2
20500: PUSH
20501: FOR_IN
20502: IFFALSE 20538
// begin if Crawls ( i ) then
20504: LD_VAR 0 1
20508: PPUSH
20509: CALL_OW 318
20513: IFFALSE 20524
// ComWalk ( i ) ;
20515: LD_VAR 0 1
20519: PPUSH
20520: CALL_OW 138
// SetClass ( i , 2 ) ;
20524: LD_VAR 0 1
20528: PPUSH
20529: LD_INT 2
20531: PPUSH
20532: CALL_OW 336
// end ;
20536: GO 20501
20538: POP
20539: POP
// end ;
20540: PPOPN 2
20542: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
20543: LD_EXP 53
20547: PUSH
20548: LD_EXP 106
20552: AND
20553: IFFALSE 20841
20555: GO 20557
20557: DISABLE
20558: LD_INT 0
20560: PPUSH
20561: PPUSH
20562: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
20563: LD_OWVAR 2
20567: PPUSH
20568: LD_INT 9
20570: PPUSH
20571: LD_INT 1
20573: PPUSH
20574: LD_INT 1
20576: PPUSH
20577: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
20581: LD_INT 9
20583: PPUSH
20584: LD_OWVAR 2
20588: PPUSH
20589: CALL_OW 343
// uc_side := 9 ;
20593: LD_ADDR_OWVAR 20
20597: PUSH
20598: LD_INT 9
20600: ST_TO_ADDR
// uc_nation := 2 ;
20601: LD_ADDR_OWVAR 21
20605: PUSH
20606: LD_INT 2
20608: ST_TO_ADDR
// hc_name := Dark Warrior ;
20609: LD_ADDR_OWVAR 26
20613: PUSH
20614: LD_STRING Dark Warrior
20616: ST_TO_ADDR
// hc_gallery :=  ;
20617: LD_ADDR_OWVAR 33
20621: PUSH
20622: LD_STRING 
20624: ST_TO_ADDR
// hc_noskilllimit := true ;
20625: LD_ADDR_OWVAR 76
20629: PUSH
20630: LD_INT 1
20632: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
20633: LD_ADDR_OWVAR 31
20637: PUSH
20638: LD_INT 30
20640: PUSH
20641: LD_INT 30
20643: PUSH
20644: LD_INT 30
20646: PUSH
20647: LD_INT 30
20649: PUSH
20650: EMPTY
20651: LIST
20652: LIST
20653: LIST
20654: LIST
20655: ST_TO_ADDR
// un := CreateHuman ;
20656: LD_ADDR_VAR 0 3
20660: PUSH
20661: CALL_OW 44
20665: ST_TO_ADDR
// hc_noskilllimit := false ;
20666: LD_ADDR_OWVAR 76
20670: PUSH
20671: LD_INT 0
20673: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20674: LD_VAR 0 3
20678: PPUSH
20679: LD_INT 1
20681: PPUSH
20682: CALL_OW 51
// ToLua ( playRanger() ) ;
20686: LD_STRING playRanger()
20688: PPUSH
20689: CALL_OW 559
// p := 0 ;
20693: LD_ADDR_VAR 0 2
20697: PUSH
20698: LD_INT 0
20700: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
20701: LD_INT 35
20703: PPUSH
20704: CALL_OW 67
// p := p + 1 ;
20708: LD_ADDR_VAR 0 2
20712: PUSH
20713: LD_VAR 0 2
20717: PUSH
20718: LD_INT 1
20720: PLUS
20721: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
20722: LD_VAR 0 3
20726: PPUSH
20727: CALL_OW 256
20731: PUSH
20732: LD_INT 1000
20734: LESS
20735: IFFALSE 20749
// SetLives ( un , 1000 ) ;
20737: LD_VAR 0 3
20741: PPUSH
20742: LD_INT 1000
20744: PPUSH
20745: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
20749: LD_VAR 0 3
20753: PPUSH
20754: LD_INT 81
20756: PUSH
20757: LD_OWVAR 2
20761: PUSH
20762: EMPTY
20763: LIST
20764: LIST
20765: PUSH
20766: LD_INT 91
20768: PUSH
20769: LD_VAR 0 3
20773: PUSH
20774: LD_INT 30
20776: PUSH
20777: EMPTY
20778: LIST
20779: LIST
20780: LIST
20781: PUSH
20782: EMPTY
20783: LIST
20784: LIST
20785: PPUSH
20786: CALL_OW 69
20790: PPUSH
20791: LD_VAR 0 3
20795: PPUSH
20796: CALL_OW 74
20800: PPUSH
20801: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
20805: LD_VAR 0 2
20809: PUSH
20810: LD_INT 80
20812: GREATER
20813: PUSH
20814: LD_VAR 0 3
20818: PPUSH
20819: CALL_OW 301
20823: OR
20824: IFFALSE 20701
// if un then
20826: LD_VAR 0 3
20830: IFFALSE 20841
// RemoveUnit ( un ) ;
20832: LD_VAR 0 3
20836: PPUSH
20837: CALL_OW 64
// end ;
20841: PPOPN 3
20843: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
20844: LD_EXP 107
20848: IFFALSE 20964
20850: GO 20852
20852: DISABLE
20853: LD_INT 0
20855: PPUSH
20856: PPUSH
20857: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
20858: LD_ADDR_VAR 0 2
20862: PUSH
20863: LD_INT 81
20865: PUSH
20866: LD_OWVAR 2
20870: PUSH
20871: EMPTY
20872: LIST
20873: LIST
20874: PUSH
20875: LD_INT 21
20877: PUSH
20878: LD_INT 1
20880: PUSH
20881: EMPTY
20882: LIST
20883: LIST
20884: PUSH
20885: EMPTY
20886: LIST
20887: LIST
20888: PPUSH
20889: CALL_OW 69
20893: ST_TO_ADDR
// ToLua ( playComputer() ) ;
20894: LD_STRING playComputer()
20896: PPUSH
20897: CALL_OW 559
// if not tmp then
20901: LD_VAR 0 2
20905: NOT
20906: IFFALSE 20910
// exit ;
20908: GO 20964
// for i in tmp do
20910: LD_ADDR_VAR 0 1
20914: PUSH
20915: LD_VAR 0 2
20919: PUSH
20920: FOR_IN
20921: IFFALSE 20962
// for j := 1 to 4 do
20923: LD_ADDR_VAR 0 3
20927: PUSH
20928: DOUBLE
20929: LD_INT 1
20931: DEC
20932: ST_TO_ADDR
20933: LD_INT 4
20935: PUSH
20936: FOR_TO
20937: IFFALSE 20958
// SetSkill ( i , j , 10 ) ;
20939: LD_VAR 0 1
20943: PPUSH
20944: LD_VAR 0 3
20948: PPUSH
20949: LD_INT 10
20951: PPUSH
20952: CALL_OW 237
20956: GO 20936
20958: POP
20959: POP
20960: GO 20920
20962: POP
20963: POP
// end ;
20964: PPOPN 3
20966: END
// every 0 0$1 trigger s30 do var i , tmp ;
20967: LD_EXP 108
20971: IFFALSE 21040
20973: GO 20975
20975: DISABLE
20976: LD_INT 0
20978: PPUSH
20979: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
20980: LD_ADDR_VAR 0 2
20984: PUSH
20985: LD_INT 22
20987: PUSH
20988: LD_OWVAR 2
20992: PUSH
20993: EMPTY
20994: LIST
20995: LIST
20996: PPUSH
20997: CALL_OW 69
21001: ST_TO_ADDR
// if not tmp then
21002: LD_VAR 0 2
21006: NOT
21007: IFFALSE 21011
// exit ;
21009: GO 21040
// for i in tmp do
21011: LD_ADDR_VAR 0 1
21015: PUSH
21016: LD_VAR 0 2
21020: PUSH
21021: FOR_IN
21022: IFFALSE 21038
// SetLives ( i , 300 ) ;
21024: LD_VAR 0 1
21028: PPUSH
21029: LD_INT 300
21031: PPUSH
21032: CALL_OW 234
21036: GO 21021
21038: POP
21039: POP
// end ;
21040: PPOPN 2
21042: END
// every 0 0$1 trigger s60 do var i , tmp ;
21043: LD_EXP 109
21047: IFFALSE 21116
21049: GO 21051
21051: DISABLE
21052: LD_INT 0
21054: PPUSH
21055: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21056: LD_ADDR_VAR 0 2
21060: PUSH
21061: LD_INT 22
21063: PUSH
21064: LD_OWVAR 2
21068: PUSH
21069: EMPTY
21070: LIST
21071: LIST
21072: PPUSH
21073: CALL_OW 69
21077: ST_TO_ADDR
// if not tmp then
21078: LD_VAR 0 2
21082: NOT
21083: IFFALSE 21087
// exit ;
21085: GO 21116
// for i in tmp do
21087: LD_ADDR_VAR 0 1
21091: PUSH
21092: LD_VAR 0 2
21096: PUSH
21097: FOR_IN
21098: IFFALSE 21114
// SetLives ( i , 600 ) ;
21100: LD_VAR 0 1
21104: PPUSH
21105: LD_INT 600
21107: PPUSH
21108: CALL_OW 234
21112: GO 21097
21114: POP
21115: POP
// end ;
21116: PPOPN 2
21118: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
21119: LD_INT 0
21121: PPUSH
// case cmd of 301 :
21122: LD_VAR 0 1
21126: PUSH
21127: LD_INT 301
21129: DOUBLE
21130: EQUAL
21131: IFTRUE 21135
21133: GO 21167
21135: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
21136: LD_VAR 0 6
21140: PPUSH
21141: LD_VAR 0 7
21145: PPUSH
21146: LD_VAR 0 8
21150: PPUSH
21151: LD_VAR 0 4
21155: PPUSH
21156: LD_VAR 0 5
21160: PPUSH
21161: CALL 22376 0 5
21165: GO 21288
21167: LD_INT 302
21169: DOUBLE
21170: EQUAL
21171: IFTRUE 21175
21173: GO 21212
21175: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
21176: LD_VAR 0 6
21180: PPUSH
21181: LD_VAR 0 7
21185: PPUSH
21186: LD_VAR 0 8
21190: PPUSH
21191: LD_VAR 0 9
21195: PPUSH
21196: LD_VAR 0 4
21200: PPUSH
21201: LD_VAR 0 5
21205: PPUSH
21206: CALL 22467 0 6
21210: GO 21288
21212: LD_INT 303
21214: DOUBLE
21215: EQUAL
21216: IFTRUE 21220
21218: GO 21257
21220: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
21221: LD_VAR 0 6
21225: PPUSH
21226: LD_VAR 0 7
21230: PPUSH
21231: LD_VAR 0 8
21235: PPUSH
21236: LD_VAR 0 9
21240: PPUSH
21241: LD_VAR 0 4
21245: PPUSH
21246: LD_VAR 0 5
21250: PPUSH
21251: CALL 21293 0 6
21255: GO 21288
21257: LD_INT 304
21259: DOUBLE
21260: EQUAL
21261: IFTRUE 21265
21263: GO 21287
21265: POP
// hHackTeleport ( unit , x , y ) ; end ;
21266: LD_VAR 0 2
21270: PPUSH
21271: LD_VAR 0 4
21275: PPUSH
21276: LD_VAR 0 5
21280: PPUSH
21281: CALL 23060 0 3
21285: GO 21288
21287: POP
// end ;
21288: LD_VAR 0 12
21292: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
21293: LD_INT 0
21295: PPUSH
21296: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
21297: LD_VAR 0 1
21301: PUSH
21302: LD_INT 1
21304: LESS
21305: PUSH
21306: LD_VAR 0 1
21310: PUSH
21311: LD_INT 3
21313: GREATER
21314: OR
21315: PUSH
21316: LD_VAR 0 5
21320: PPUSH
21321: LD_VAR 0 6
21325: PPUSH
21326: CALL_OW 428
21330: OR
21331: IFFALSE 21335
// exit ;
21333: GO 22063
// uc_side := your_side ;
21335: LD_ADDR_OWVAR 20
21339: PUSH
21340: LD_OWVAR 2
21344: ST_TO_ADDR
// uc_nation := nation ;
21345: LD_ADDR_OWVAR 21
21349: PUSH
21350: LD_VAR 0 1
21354: ST_TO_ADDR
// bc_level = 1 ;
21355: LD_ADDR_OWVAR 43
21359: PUSH
21360: LD_INT 1
21362: ST_TO_ADDR
// case btype of 1 :
21363: LD_VAR 0 2
21367: PUSH
21368: LD_INT 1
21370: DOUBLE
21371: EQUAL
21372: IFTRUE 21376
21374: GO 21387
21376: POP
// bc_type := b_depot ; 2 :
21377: LD_ADDR_OWVAR 42
21381: PUSH
21382: LD_INT 0
21384: ST_TO_ADDR
21385: GO 22007
21387: LD_INT 2
21389: DOUBLE
21390: EQUAL
21391: IFTRUE 21395
21393: GO 21406
21395: POP
// bc_type := b_warehouse ; 3 :
21396: LD_ADDR_OWVAR 42
21400: PUSH
21401: LD_INT 1
21403: ST_TO_ADDR
21404: GO 22007
21406: LD_INT 3
21408: DOUBLE
21409: EQUAL
21410: IFTRUE 21414
21412: GO 21425
21414: POP
// bc_type := b_lab ; 4 .. 9 :
21415: LD_ADDR_OWVAR 42
21419: PUSH
21420: LD_INT 6
21422: ST_TO_ADDR
21423: GO 22007
21425: LD_INT 4
21427: DOUBLE
21428: GREATEREQUAL
21429: IFFALSE 21437
21431: LD_INT 9
21433: DOUBLE
21434: LESSEQUAL
21435: IFTRUE 21439
21437: GO 21499
21439: POP
// begin bc_type := b_lab_half ;
21440: LD_ADDR_OWVAR 42
21444: PUSH
21445: LD_INT 7
21447: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
21448: LD_ADDR_OWVAR 44
21452: PUSH
21453: LD_INT 10
21455: PUSH
21456: LD_INT 11
21458: PUSH
21459: LD_INT 12
21461: PUSH
21462: LD_INT 15
21464: PUSH
21465: LD_INT 14
21467: PUSH
21468: LD_INT 13
21470: PUSH
21471: EMPTY
21472: LIST
21473: LIST
21474: LIST
21475: LIST
21476: LIST
21477: LIST
21478: PUSH
21479: LD_VAR 0 2
21483: PUSH
21484: LD_INT 3
21486: MINUS
21487: ARRAY
21488: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
21489: LD_ADDR_OWVAR 45
21493: PUSH
21494: LD_INT 9
21496: ST_TO_ADDR
// end ; 10 .. 13 :
21497: GO 22007
21499: LD_INT 10
21501: DOUBLE
21502: GREATEREQUAL
21503: IFFALSE 21511
21505: LD_INT 13
21507: DOUBLE
21508: LESSEQUAL
21509: IFTRUE 21513
21511: GO 21590
21513: POP
// begin bc_type := b_lab_full ;
21514: LD_ADDR_OWVAR 42
21518: PUSH
21519: LD_INT 8
21521: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
21522: LD_ADDR_OWVAR 44
21526: PUSH
21527: LD_INT 10
21529: PUSH
21530: LD_INT 12
21532: PUSH
21533: LD_INT 14
21535: PUSH
21536: LD_INT 13
21538: PUSH
21539: EMPTY
21540: LIST
21541: LIST
21542: LIST
21543: LIST
21544: PUSH
21545: LD_VAR 0 2
21549: PUSH
21550: LD_INT 9
21552: MINUS
21553: ARRAY
21554: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
21555: LD_ADDR_OWVAR 45
21559: PUSH
21560: LD_INT 11
21562: PUSH
21563: LD_INT 15
21565: PUSH
21566: LD_INT 12
21568: PUSH
21569: LD_INT 15
21571: PUSH
21572: EMPTY
21573: LIST
21574: LIST
21575: LIST
21576: LIST
21577: PUSH
21578: LD_VAR 0 2
21582: PUSH
21583: LD_INT 9
21585: MINUS
21586: ARRAY
21587: ST_TO_ADDR
// end ; 14 :
21588: GO 22007
21590: LD_INT 14
21592: DOUBLE
21593: EQUAL
21594: IFTRUE 21598
21596: GO 21609
21598: POP
// bc_type := b_workshop ; 15 :
21599: LD_ADDR_OWVAR 42
21603: PUSH
21604: LD_INT 2
21606: ST_TO_ADDR
21607: GO 22007
21609: LD_INT 15
21611: DOUBLE
21612: EQUAL
21613: IFTRUE 21617
21615: GO 21628
21617: POP
// bc_type := b_factory ; 16 :
21618: LD_ADDR_OWVAR 42
21622: PUSH
21623: LD_INT 3
21625: ST_TO_ADDR
21626: GO 22007
21628: LD_INT 16
21630: DOUBLE
21631: EQUAL
21632: IFTRUE 21636
21634: GO 21647
21636: POP
// bc_type := b_ext_gun ; 17 :
21637: LD_ADDR_OWVAR 42
21641: PUSH
21642: LD_INT 17
21644: ST_TO_ADDR
21645: GO 22007
21647: LD_INT 17
21649: DOUBLE
21650: EQUAL
21651: IFTRUE 21655
21653: GO 21683
21655: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
21656: LD_ADDR_OWVAR 42
21660: PUSH
21661: LD_INT 19
21663: PUSH
21664: LD_INT 23
21666: PUSH
21667: LD_INT 19
21669: PUSH
21670: EMPTY
21671: LIST
21672: LIST
21673: LIST
21674: PUSH
21675: LD_VAR 0 1
21679: ARRAY
21680: ST_TO_ADDR
21681: GO 22007
21683: LD_INT 18
21685: DOUBLE
21686: EQUAL
21687: IFTRUE 21691
21689: GO 21702
21691: POP
// bc_type := b_ext_radar ; 19 :
21692: LD_ADDR_OWVAR 42
21696: PUSH
21697: LD_INT 20
21699: ST_TO_ADDR
21700: GO 22007
21702: LD_INT 19
21704: DOUBLE
21705: EQUAL
21706: IFTRUE 21710
21708: GO 21721
21710: POP
// bc_type := b_ext_radio ; 20 :
21711: LD_ADDR_OWVAR 42
21715: PUSH
21716: LD_INT 22
21718: ST_TO_ADDR
21719: GO 22007
21721: LD_INT 20
21723: DOUBLE
21724: EQUAL
21725: IFTRUE 21729
21727: GO 21740
21729: POP
// bc_type := b_ext_siberium ; 21 :
21730: LD_ADDR_OWVAR 42
21734: PUSH
21735: LD_INT 21
21737: ST_TO_ADDR
21738: GO 22007
21740: LD_INT 21
21742: DOUBLE
21743: EQUAL
21744: IFTRUE 21748
21746: GO 21759
21748: POP
// bc_type := b_ext_computer ; 22 :
21749: LD_ADDR_OWVAR 42
21753: PUSH
21754: LD_INT 24
21756: ST_TO_ADDR
21757: GO 22007
21759: LD_INT 22
21761: DOUBLE
21762: EQUAL
21763: IFTRUE 21767
21765: GO 21778
21767: POP
// bc_type := b_ext_track ; 23 :
21768: LD_ADDR_OWVAR 42
21772: PUSH
21773: LD_INT 16
21775: ST_TO_ADDR
21776: GO 22007
21778: LD_INT 23
21780: DOUBLE
21781: EQUAL
21782: IFTRUE 21786
21784: GO 21797
21786: POP
// bc_type := b_ext_laser ; 24 :
21787: LD_ADDR_OWVAR 42
21791: PUSH
21792: LD_INT 25
21794: ST_TO_ADDR
21795: GO 22007
21797: LD_INT 24
21799: DOUBLE
21800: EQUAL
21801: IFTRUE 21805
21803: GO 21816
21805: POP
// bc_type := b_control_tower ; 25 :
21806: LD_ADDR_OWVAR 42
21810: PUSH
21811: LD_INT 36
21813: ST_TO_ADDR
21814: GO 22007
21816: LD_INT 25
21818: DOUBLE
21819: EQUAL
21820: IFTRUE 21824
21822: GO 21835
21824: POP
// bc_type := b_breastwork ; 26 :
21825: LD_ADDR_OWVAR 42
21829: PUSH
21830: LD_INT 31
21832: ST_TO_ADDR
21833: GO 22007
21835: LD_INT 26
21837: DOUBLE
21838: EQUAL
21839: IFTRUE 21843
21841: GO 21854
21843: POP
// bc_type := b_bunker ; 27 :
21844: LD_ADDR_OWVAR 42
21848: PUSH
21849: LD_INT 32
21851: ST_TO_ADDR
21852: GO 22007
21854: LD_INT 27
21856: DOUBLE
21857: EQUAL
21858: IFTRUE 21862
21860: GO 21873
21862: POP
// bc_type := b_turret ; 28 :
21863: LD_ADDR_OWVAR 42
21867: PUSH
21868: LD_INT 33
21870: ST_TO_ADDR
21871: GO 22007
21873: LD_INT 28
21875: DOUBLE
21876: EQUAL
21877: IFTRUE 21881
21879: GO 21892
21881: POP
// bc_type := b_armoury ; 29 :
21882: LD_ADDR_OWVAR 42
21886: PUSH
21887: LD_INT 4
21889: ST_TO_ADDR
21890: GO 22007
21892: LD_INT 29
21894: DOUBLE
21895: EQUAL
21896: IFTRUE 21900
21898: GO 21911
21900: POP
// bc_type := b_barracks ; 30 :
21901: LD_ADDR_OWVAR 42
21905: PUSH
21906: LD_INT 5
21908: ST_TO_ADDR
21909: GO 22007
21911: LD_INT 30
21913: DOUBLE
21914: EQUAL
21915: IFTRUE 21919
21917: GO 21930
21919: POP
// bc_type := b_solar_power ; 31 :
21920: LD_ADDR_OWVAR 42
21924: PUSH
21925: LD_INT 27
21927: ST_TO_ADDR
21928: GO 22007
21930: LD_INT 31
21932: DOUBLE
21933: EQUAL
21934: IFTRUE 21938
21936: GO 21949
21938: POP
// bc_type := b_oil_power ; 32 :
21939: LD_ADDR_OWVAR 42
21943: PUSH
21944: LD_INT 26
21946: ST_TO_ADDR
21947: GO 22007
21949: LD_INT 32
21951: DOUBLE
21952: EQUAL
21953: IFTRUE 21957
21955: GO 21968
21957: POP
// bc_type := b_siberite_power ; 33 :
21958: LD_ADDR_OWVAR 42
21962: PUSH
21963: LD_INT 28
21965: ST_TO_ADDR
21966: GO 22007
21968: LD_INT 33
21970: DOUBLE
21971: EQUAL
21972: IFTRUE 21976
21974: GO 21987
21976: POP
// bc_type := b_oil_mine ; 34 :
21977: LD_ADDR_OWVAR 42
21981: PUSH
21982: LD_INT 29
21984: ST_TO_ADDR
21985: GO 22007
21987: LD_INT 34
21989: DOUBLE
21990: EQUAL
21991: IFTRUE 21995
21993: GO 22006
21995: POP
// bc_type := b_siberite_mine ; end ;
21996: LD_ADDR_OWVAR 42
22000: PUSH
22001: LD_INT 30
22003: ST_TO_ADDR
22004: GO 22007
22006: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
22007: LD_ADDR_VAR 0 8
22011: PUSH
22012: LD_VAR 0 5
22016: PPUSH
22017: LD_VAR 0 6
22021: PPUSH
22022: LD_VAR 0 3
22026: PPUSH
22027: CALL_OW 47
22031: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
22032: LD_OWVAR 42
22036: PUSH
22037: LD_INT 32
22039: PUSH
22040: LD_INT 33
22042: PUSH
22043: EMPTY
22044: LIST
22045: LIST
22046: IN
22047: IFFALSE 22063
// PlaceWeaponTurret ( b , weapon ) ;
22049: LD_VAR 0 8
22053: PPUSH
22054: LD_VAR 0 4
22058: PPUSH
22059: CALL_OW 431
// end ;
22063: LD_VAR 0 7
22067: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
22068: LD_INT 0
22070: PPUSH
22071: PPUSH
22072: PPUSH
22073: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22074: LD_ADDR_VAR 0 4
22078: PUSH
22079: LD_INT 22
22081: PUSH
22082: LD_OWVAR 2
22086: PUSH
22087: EMPTY
22088: LIST
22089: LIST
22090: PUSH
22091: LD_INT 2
22093: PUSH
22094: LD_INT 30
22096: PUSH
22097: LD_INT 0
22099: PUSH
22100: EMPTY
22101: LIST
22102: LIST
22103: PUSH
22104: LD_INT 30
22106: PUSH
22107: LD_INT 1
22109: PUSH
22110: EMPTY
22111: LIST
22112: LIST
22113: PUSH
22114: EMPTY
22115: LIST
22116: LIST
22117: LIST
22118: PUSH
22119: EMPTY
22120: LIST
22121: LIST
22122: PPUSH
22123: CALL_OW 69
22127: ST_TO_ADDR
// if not tmp then
22128: LD_VAR 0 4
22132: NOT
22133: IFFALSE 22137
// exit ;
22135: GO 22196
// for i in tmp do
22137: LD_ADDR_VAR 0 2
22141: PUSH
22142: LD_VAR 0 4
22146: PUSH
22147: FOR_IN
22148: IFFALSE 22194
// for j = 1 to 3 do
22150: LD_ADDR_VAR 0 3
22154: PUSH
22155: DOUBLE
22156: LD_INT 1
22158: DEC
22159: ST_TO_ADDR
22160: LD_INT 3
22162: PUSH
22163: FOR_TO
22164: IFFALSE 22190
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
22166: LD_VAR 0 2
22170: PPUSH
22171: CALL_OW 274
22175: PPUSH
22176: LD_VAR 0 3
22180: PPUSH
22181: LD_INT 99999
22183: PPUSH
22184: CALL_OW 277
22188: GO 22163
22190: POP
22191: POP
22192: GO 22147
22194: POP
22195: POP
// end ;
22196: LD_VAR 0 1
22200: RET
// export function hHackSetLevel10 ; var i , j ; begin
22201: LD_INT 0
22203: PPUSH
22204: PPUSH
22205: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
22206: LD_ADDR_VAR 0 2
22210: PUSH
22211: LD_INT 21
22213: PUSH
22214: LD_INT 1
22216: PUSH
22217: EMPTY
22218: LIST
22219: LIST
22220: PPUSH
22221: CALL_OW 69
22225: PUSH
22226: FOR_IN
22227: IFFALSE 22279
// if IsSelected ( i ) then
22229: LD_VAR 0 2
22233: PPUSH
22234: CALL_OW 306
22238: IFFALSE 22277
// begin for j := 1 to 4 do
22240: LD_ADDR_VAR 0 3
22244: PUSH
22245: DOUBLE
22246: LD_INT 1
22248: DEC
22249: ST_TO_ADDR
22250: LD_INT 4
22252: PUSH
22253: FOR_TO
22254: IFFALSE 22275
// SetSkill ( i , j , 10 ) ;
22256: LD_VAR 0 2
22260: PPUSH
22261: LD_VAR 0 3
22265: PPUSH
22266: LD_INT 10
22268: PPUSH
22269: CALL_OW 237
22273: GO 22253
22275: POP
22276: POP
// end ;
22277: GO 22226
22279: POP
22280: POP
// end ;
22281: LD_VAR 0 1
22285: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
22286: LD_INT 0
22288: PPUSH
22289: PPUSH
22290: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
22291: LD_ADDR_VAR 0 2
22295: PUSH
22296: LD_INT 22
22298: PUSH
22299: LD_OWVAR 2
22303: PUSH
22304: EMPTY
22305: LIST
22306: LIST
22307: PUSH
22308: LD_INT 21
22310: PUSH
22311: LD_INT 1
22313: PUSH
22314: EMPTY
22315: LIST
22316: LIST
22317: PUSH
22318: EMPTY
22319: LIST
22320: LIST
22321: PPUSH
22322: CALL_OW 69
22326: PUSH
22327: FOR_IN
22328: IFFALSE 22369
// begin for j := 1 to 4 do
22330: LD_ADDR_VAR 0 3
22334: PUSH
22335: DOUBLE
22336: LD_INT 1
22338: DEC
22339: ST_TO_ADDR
22340: LD_INT 4
22342: PUSH
22343: FOR_TO
22344: IFFALSE 22365
// SetSkill ( i , j , 10 ) ;
22346: LD_VAR 0 2
22350: PPUSH
22351: LD_VAR 0 3
22355: PPUSH
22356: LD_INT 10
22358: PPUSH
22359: CALL_OW 237
22363: GO 22343
22365: POP
22366: POP
// end ;
22367: GO 22327
22369: POP
22370: POP
// end ;
22371: LD_VAR 0 1
22375: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
22376: LD_INT 0
22378: PPUSH
// uc_side := your_side ;
22379: LD_ADDR_OWVAR 20
22383: PUSH
22384: LD_OWVAR 2
22388: ST_TO_ADDR
// uc_nation := nation ;
22389: LD_ADDR_OWVAR 21
22393: PUSH
22394: LD_VAR 0 1
22398: ST_TO_ADDR
// InitHc ;
22399: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
22403: LD_INT 0
22405: PPUSH
22406: LD_VAR 0 2
22410: PPUSH
22411: LD_VAR 0 3
22415: PPUSH
22416: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
22420: LD_VAR 0 4
22424: PPUSH
22425: LD_VAR 0 5
22429: PPUSH
22430: CALL_OW 428
22434: PUSH
22435: LD_INT 0
22437: EQUAL
22438: IFFALSE 22462
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
22440: CALL_OW 44
22444: PPUSH
22445: LD_VAR 0 4
22449: PPUSH
22450: LD_VAR 0 5
22454: PPUSH
22455: LD_INT 1
22457: PPUSH
22458: CALL_OW 48
// end ;
22462: LD_VAR 0 6
22466: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
22467: LD_INT 0
22469: PPUSH
22470: PPUSH
// uc_side := your_side ;
22471: LD_ADDR_OWVAR 20
22475: PUSH
22476: LD_OWVAR 2
22480: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
22481: LD_VAR 0 1
22485: PUSH
22486: LD_INT 1
22488: PUSH
22489: LD_INT 2
22491: PUSH
22492: LD_INT 3
22494: PUSH
22495: LD_INT 4
22497: PUSH
22498: LD_INT 5
22500: PUSH
22501: EMPTY
22502: LIST
22503: LIST
22504: LIST
22505: LIST
22506: LIST
22507: IN
22508: IFFALSE 22520
// uc_nation := nation_american else
22510: LD_ADDR_OWVAR 21
22514: PUSH
22515: LD_INT 1
22517: ST_TO_ADDR
22518: GO 22563
// if chassis in [ 11 , 12 , 13 , 14 ] then
22520: LD_VAR 0 1
22524: PUSH
22525: LD_INT 11
22527: PUSH
22528: LD_INT 12
22530: PUSH
22531: LD_INT 13
22533: PUSH
22534: LD_INT 14
22536: PUSH
22537: EMPTY
22538: LIST
22539: LIST
22540: LIST
22541: LIST
22542: IN
22543: IFFALSE 22555
// uc_nation := nation_arabian else
22545: LD_ADDR_OWVAR 21
22549: PUSH
22550: LD_INT 2
22552: ST_TO_ADDR
22553: GO 22563
// uc_nation := nation_russian ;
22555: LD_ADDR_OWVAR 21
22559: PUSH
22560: LD_INT 3
22562: ST_TO_ADDR
// vc_chassis := chassis ;
22563: LD_ADDR_OWVAR 37
22567: PUSH
22568: LD_VAR 0 1
22572: ST_TO_ADDR
// vc_engine := engine ;
22573: LD_ADDR_OWVAR 39
22577: PUSH
22578: LD_VAR 0 2
22582: ST_TO_ADDR
// vc_control := control ;
22583: LD_ADDR_OWVAR 38
22587: PUSH
22588: LD_VAR 0 3
22592: ST_TO_ADDR
// vc_weapon := weapon ;
22593: LD_ADDR_OWVAR 40
22597: PUSH
22598: LD_VAR 0 4
22602: ST_TO_ADDR
// un := CreateVehicle ;
22603: LD_ADDR_VAR 0 8
22607: PUSH
22608: CALL_OW 45
22612: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
22613: LD_VAR 0 8
22617: PPUSH
22618: LD_INT 0
22620: PPUSH
22621: LD_INT 5
22623: PPUSH
22624: CALL_OW 12
22628: PPUSH
22629: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
22633: LD_VAR 0 8
22637: PPUSH
22638: LD_VAR 0 5
22642: PPUSH
22643: LD_VAR 0 6
22647: PPUSH
22648: LD_INT 1
22650: PPUSH
22651: CALL_OW 48
// end ;
22655: LD_VAR 0 7
22659: RET
// export hInvincible ; every 1 do
22660: GO 22662
22662: DISABLE
// hInvincible := [ ] ;
22663: LD_ADDR_EXP 110
22667: PUSH
22668: EMPTY
22669: ST_TO_ADDR
22670: END
// every 10 do var i ;
22671: GO 22673
22673: DISABLE
22674: LD_INT 0
22676: PPUSH
// begin enable ;
22677: ENABLE
// if not hInvincible then
22678: LD_EXP 110
22682: NOT
22683: IFFALSE 22687
// exit ;
22685: GO 22731
// for i in hInvincible do
22687: LD_ADDR_VAR 0 1
22691: PUSH
22692: LD_EXP 110
22696: PUSH
22697: FOR_IN
22698: IFFALSE 22729
// if GetLives ( i ) < 1000 then
22700: LD_VAR 0 1
22704: PPUSH
22705: CALL_OW 256
22709: PUSH
22710: LD_INT 1000
22712: LESS
22713: IFFALSE 22727
// SetLives ( i , 1000 ) ;
22715: LD_VAR 0 1
22719: PPUSH
22720: LD_INT 1000
22722: PPUSH
22723: CALL_OW 234
22727: GO 22697
22729: POP
22730: POP
// end ;
22731: PPOPN 1
22733: END
// export function hHackInvincible ; var i ; begin
22734: LD_INT 0
22736: PPUSH
22737: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
22738: LD_ADDR_VAR 0 2
22742: PUSH
22743: LD_INT 2
22745: PUSH
22746: LD_INT 21
22748: PUSH
22749: LD_INT 1
22751: PUSH
22752: EMPTY
22753: LIST
22754: LIST
22755: PUSH
22756: LD_INT 21
22758: PUSH
22759: LD_INT 2
22761: PUSH
22762: EMPTY
22763: LIST
22764: LIST
22765: PUSH
22766: EMPTY
22767: LIST
22768: LIST
22769: LIST
22770: PPUSH
22771: CALL_OW 69
22775: PUSH
22776: FOR_IN
22777: IFFALSE 22838
// if IsSelected ( i ) then
22779: LD_VAR 0 2
22783: PPUSH
22784: CALL_OW 306
22788: IFFALSE 22836
// begin if i in hInvincible then
22790: LD_VAR 0 2
22794: PUSH
22795: LD_EXP 110
22799: IN
22800: IFFALSE 22820
// hInvincible := hInvincible diff i else
22802: LD_ADDR_EXP 110
22806: PUSH
22807: LD_EXP 110
22811: PUSH
22812: LD_VAR 0 2
22816: DIFF
22817: ST_TO_ADDR
22818: GO 22836
// hInvincible := hInvincible union i ;
22820: LD_ADDR_EXP 110
22824: PUSH
22825: LD_EXP 110
22829: PUSH
22830: LD_VAR 0 2
22834: UNION
22835: ST_TO_ADDR
// end ;
22836: GO 22776
22838: POP
22839: POP
// end ;
22840: LD_VAR 0 1
22844: RET
// export function hHackInvisible ; var i , j ; begin
22845: LD_INT 0
22847: PPUSH
22848: PPUSH
22849: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
22850: LD_ADDR_VAR 0 2
22854: PUSH
22855: LD_INT 21
22857: PUSH
22858: LD_INT 1
22860: PUSH
22861: EMPTY
22862: LIST
22863: LIST
22864: PPUSH
22865: CALL_OW 69
22869: PUSH
22870: FOR_IN
22871: IFFALSE 22895
// if IsSelected ( i ) then
22873: LD_VAR 0 2
22877: PPUSH
22878: CALL_OW 306
22882: IFFALSE 22893
// ComForceInvisible ( i ) ;
22884: LD_VAR 0 2
22888: PPUSH
22889: CALL_OW 496
22893: GO 22870
22895: POP
22896: POP
// end ;
22897: LD_VAR 0 1
22901: RET
// export function hHackChangeYourSide ; begin
22902: LD_INT 0
22904: PPUSH
// if your_side = 8 then
22905: LD_OWVAR 2
22909: PUSH
22910: LD_INT 8
22912: EQUAL
22913: IFFALSE 22925
// your_side := 0 else
22915: LD_ADDR_OWVAR 2
22919: PUSH
22920: LD_INT 0
22922: ST_TO_ADDR
22923: GO 22939
// your_side := your_side + 1 ;
22925: LD_ADDR_OWVAR 2
22929: PUSH
22930: LD_OWVAR 2
22934: PUSH
22935: LD_INT 1
22937: PLUS
22938: ST_TO_ADDR
// end ;
22939: LD_VAR 0 1
22943: RET
// export function hHackChangeUnitSide ; var i , j ; begin
22944: LD_INT 0
22946: PPUSH
22947: PPUSH
22948: PPUSH
// for i in all_units do
22949: LD_ADDR_VAR 0 2
22953: PUSH
22954: LD_OWVAR 3
22958: PUSH
22959: FOR_IN
22960: IFFALSE 23038
// if IsSelected ( i ) then
22962: LD_VAR 0 2
22966: PPUSH
22967: CALL_OW 306
22971: IFFALSE 23036
// begin j := GetSide ( i ) ;
22973: LD_ADDR_VAR 0 3
22977: PUSH
22978: LD_VAR 0 2
22982: PPUSH
22983: CALL_OW 255
22987: ST_TO_ADDR
// if j = 8 then
22988: LD_VAR 0 3
22992: PUSH
22993: LD_INT 8
22995: EQUAL
22996: IFFALSE 23008
// j := 0 else
22998: LD_ADDR_VAR 0 3
23002: PUSH
23003: LD_INT 0
23005: ST_TO_ADDR
23006: GO 23022
// j := j + 1 ;
23008: LD_ADDR_VAR 0 3
23012: PUSH
23013: LD_VAR 0 3
23017: PUSH
23018: LD_INT 1
23020: PLUS
23021: ST_TO_ADDR
// SetSide ( i , j ) ;
23022: LD_VAR 0 2
23026: PPUSH
23027: LD_VAR 0 3
23031: PPUSH
23032: CALL_OW 235
// end ;
23036: GO 22959
23038: POP
23039: POP
// end ;
23040: LD_VAR 0 1
23044: RET
// export function hHackFog ; begin
23045: LD_INT 0
23047: PPUSH
// FogOff ( true ) ;
23048: LD_INT 1
23050: PPUSH
23051: CALL_OW 344
// end ;
23055: LD_VAR 0 1
23059: RET
// export function hHackTeleport ( unit , x , y ) ; begin
23060: LD_INT 0
23062: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
23063: LD_VAR 0 1
23067: PPUSH
23068: LD_VAR 0 2
23072: PPUSH
23073: LD_VAR 0 3
23077: PPUSH
23078: LD_INT 1
23080: PPUSH
23081: LD_INT 1
23083: PPUSH
23084: CALL_OW 483
// CenterOnXY ( x , y ) ;
23088: LD_VAR 0 2
23092: PPUSH
23093: LD_VAR 0 3
23097: PPUSH
23098: CALL_OW 84
// end ;
23102: LD_VAR 0 4
23106: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
23107: LD_INT 0
23109: PPUSH
23110: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
23111: LD_VAR 0 1
23115: NOT
23116: PUSH
23117: LD_VAR 0 2
23121: PPUSH
23122: LD_VAR 0 3
23126: PPUSH
23127: CALL_OW 488
23131: NOT
23132: OR
23133: PUSH
23134: LD_VAR 0 1
23138: PPUSH
23139: CALL_OW 266
23143: PUSH
23144: LD_INT 3
23146: NONEQUAL
23147: PUSH
23148: LD_VAR 0 1
23152: PPUSH
23153: CALL_OW 247
23157: PUSH
23158: LD_INT 1
23160: EQUAL
23161: NOT
23162: AND
23163: OR
23164: IFFALSE 23168
// exit ;
23166: GO 23317
// if GetType ( factory ) = unit_human then
23168: LD_VAR 0 1
23172: PPUSH
23173: CALL_OW 247
23177: PUSH
23178: LD_INT 1
23180: EQUAL
23181: IFFALSE 23198
// factory := IsInUnit ( factory ) ;
23183: LD_ADDR_VAR 0 1
23187: PUSH
23188: LD_VAR 0 1
23192: PPUSH
23193: CALL_OW 310
23197: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
23198: LD_VAR 0 1
23202: PPUSH
23203: CALL_OW 266
23207: PUSH
23208: LD_INT 3
23210: NONEQUAL
23211: IFFALSE 23215
// exit ;
23213: GO 23317
// if HexInfo ( x , y ) = factory then
23215: LD_VAR 0 2
23219: PPUSH
23220: LD_VAR 0 3
23224: PPUSH
23225: CALL_OW 428
23229: PUSH
23230: LD_VAR 0 1
23234: EQUAL
23235: IFFALSE 23262
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
23237: LD_ADDR_EXP 111
23241: PUSH
23242: LD_EXP 111
23246: PPUSH
23247: LD_VAR 0 1
23251: PPUSH
23252: LD_INT 0
23254: PPUSH
23255: CALL_OW 1
23259: ST_TO_ADDR
23260: GO 23313
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
23262: LD_ADDR_EXP 111
23266: PUSH
23267: LD_EXP 111
23271: PPUSH
23272: LD_VAR 0 1
23276: PPUSH
23277: LD_VAR 0 1
23281: PPUSH
23282: CALL_OW 255
23286: PUSH
23287: LD_VAR 0 1
23291: PUSH
23292: LD_VAR 0 2
23296: PUSH
23297: LD_VAR 0 3
23301: PUSH
23302: EMPTY
23303: LIST
23304: LIST
23305: LIST
23306: LIST
23307: PPUSH
23308: CALL_OW 1
23312: ST_TO_ADDR
// UpdateFactoryWaypoints ;
23313: CALL 23322 0 0
// end ;
23317: LD_VAR 0 4
23321: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
23322: LD_INT 0
23324: PPUSH
23325: PPUSH
23326: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
23327: LD_STRING resetFactoryWaypoint();
23329: PPUSH
23330: CALL_OW 559
// if factoryWaypoints then
23334: LD_EXP 111
23338: IFFALSE 23464
// begin list := PrepareArray ( factoryWaypoints ) ;
23340: LD_ADDR_VAR 0 3
23344: PUSH
23345: LD_EXP 111
23349: PPUSH
23350: CALL 70606 0 1
23354: ST_TO_ADDR
// for i := 1 to list do
23355: LD_ADDR_VAR 0 2
23359: PUSH
23360: DOUBLE
23361: LD_INT 1
23363: DEC
23364: ST_TO_ADDR
23365: LD_VAR 0 3
23369: PUSH
23370: FOR_TO
23371: IFFALSE 23462
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
23373: LD_STRING setFactoryWaypointXY(
23375: PUSH
23376: LD_VAR 0 3
23380: PUSH
23381: LD_VAR 0 2
23385: ARRAY
23386: PUSH
23387: LD_INT 1
23389: ARRAY
23390: STR
23391: PUSH
23392: LD_STRING ,
23394: STR
23395: PUSH
23396: LD_VAR 0 3
23400: PUSH
23401: LD_VAR 0 2
23405: ARRAY
23406: PUSH
23407: LD_INT 2
23409: ARRAY
23410: STR
23411: PUSH
23412: LD_STRING ,
23414: STR
23415: PUSH
23416: LD_VAR 0 3
23420: PUSH
23421: LD_VAR 0 2
23425: ARRAY
23426: PUSH
23427: LD_INT 3
23429: ARRAY
23430: STR
23431: PUSH
23432: LD_STRING ,
23434: STR
23435: PUSH
23436: LD_VAR 0 3
23440: PUSH
23441: LD_VAR 0 2
23445: ARRAY
23446: PUSH
23447: LD_INT 4
23449: ARRAY
23450: STR
23451: PUSH
23452: LD_STRING )
23454: STR
23455: PPUSH
23456: CALL_OW 559
23460: GO 23370
23462: POP
23463: POP
// end ; end ;
23464: LD_VAR 0 1
23468: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
23469: LD_INT 0
23471: PPUSH
// if HexInfo ( x , y ) = warehouse then
23472: LD_VAR 0 2
23476: PPUSH
23477: LD_VAR 0 3
23481: PPUSH
23482: CALL_OW 428
23486: PUSH
23487: LD_VAR 0 1
23491: EQUAL
23492: IFFALSE 23519
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
23494: LD_ADDR_EXP 112
23498: PUSH
23499: LD_EXP 112
23503: PPUSH
23504: LD_VAR 0 1
23508: PPUSH
23509: LD_INT 0
23511: PPUSH
23512: CALL_OW 1
23516: ST_TO_ADDR
23517: GO 23570
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
23519: LD_ADDR_EXP 112
23523: PUSH
23524: LD_EXP 112
23528: PPUSH
23529: LD_VAR 0 1
23533: PPUSH
23534: LD_VAR 0 1
23538: PPUSH
23539: CALL_OW 255
23543: PUSH
23544: LD_VAR 0 1
23548: PUSH
23549: LD_VAR 0 2
23553: PUSH
23554: LD_VAR 0 3
23558: PUSH
23559: EMPTY
23560: LIST
23561: LIST
23562: LIST
23563: LIST
23564: PPUSH
23565: CALL_OW 1
23569: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
23570: CALL 23579 0 0
// end ;
23574: LD_VAR 0 4
23578: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
23579: LD_INT 0
23581: PPUSH
23582: PPUSH
23583: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
23584: LD_STRING resetWarehouseGatheringPoints();
23586: PPUSH
23587: CALL_OW 559
// if warehouseGatheringPoints then
23591: LD_EXP 112
23595: IFFALSE 23721
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
23597: LD_ADDR_VAR 0 3
23601: PUSH
23602: LD_EXP 112
23606: PPUSH
23607: CALL 70606 0 1
23611: ST_TO_ADDR
// for i := 1 to list do
23612: LD_ADDR_VAR 0 2
23616: PUSH
23617: DOUBLE
23618: LD_INT 1
23620: DEC
23621: ST_TO_ADDR
23622: LD_VAR 0 3
23626: PUSH
23627: FOR_TO
23628: IFFALSE 23719
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
23630: LD_STRING setWarehouseGatheringPointXY(
23632: PUSH
23633: LD_VAR 0 3
23637: PUSH
23638: LD_VAR 0 2
23642: ARRAY
23643: PUSH
23644: LD_INT 1
23646: ARRAY
23647: STR
23648: PUSH
23649: LD_STRING ,
23651: STR
23652: PUSH
23653: LD_VAR 0 3
23657: PUSH
23658: LD_VAR 0 2
23662: ARRAY
23663: PUSH
23664: LD_INT 2
23666: ARRAY
23667: STR
23668: PUSH
23669: LD_STRING ,
23671: STR
23672: PUSH
23673: LD_VAR 0 3
23677: PUSH
23678: LD_VAR 0 2
23682: ARRAY
23683: PUSH
23684: LD_INT 3
23686: ARRAY
23687: STR
23688: PUSH
23689: LD_STRING ,
23691: STR
23692: PUSH
23693: LD_VAR 0 3
23697: PUSH
23698: LD_VAR 0 2
23702: ARRAY
23703: PUSH
23704: LD_INT 4
23706: ARRAY
23707: STR
23708: PUSH
23709: LD_STRING )
23711: STR
23712: PPUSH
23713: CALL_OW 559
23717: GO 23627
23719: POP
23720: POP
// end ; end ;
23721: LD_VAR 0 1
23725: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
23726: LD_EXP 112
23730: IFFALSE 24415
23732: GO 23734
23734: DISABLE
23735: LD_INT 0
23737: PPUSH
23738: PPUSH
23739: PPUSH
23740: PPUSH
23741: PPUSH
23742: PPUSH
23743: PPUSH
23744: PPUSH
23745: PPUSH
// begin enable ;
23746: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
23747: LD_ADDR_VAR 0 3
23751: PUSH
23752: LD_EXP 112
23756: PPUSH
23757: CALL 70606 0 1
23761: ST_TO_ADDR
// if not list then
23762: LD_VAR 0 3
23766: NOT
23767: IFFALSE 23771
// exit ;
23769: GO 24415
// for i := 1 to list do
23771: LD_ADDR_VAR 0 1
23775: PUSH
23776: DOUBLE
23777: LD_INT 1
23779: DEC
23780: ST_TO_ADDR
23781: LD_VAR 0 3
23785: PUSH
23786: FOR_TO
23787: IFFALSE 24413
// begin depot := list [ i ] [ 2 ] ;
23789: LD_ADDR_VAR 0 8
23793: PUSH
23794: LD_VAR 0 3
23798: PUSH
23799: LD_VAR 0 1
23803: ARRAY
23804: PUSH
23805: LD_INT 2
23807: ARRAY
23808: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
23809: LD_ADDR_VAR 0 5
23813: PUSH
23814: LD_VAR 0 3
23818: PUSH
23819: LD_VAR 0 1
23823: ARRAY
23824: PUSH
23825: LD_INT 1
23827: ARRAY
23828: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
23829: LD_VAR 0 8
23833: PPUSH
23834: CALL_OW 301
23838: PUSH
23839: LD_VAR 0 5
23843: PUSH
23844: LD_VAR 0 8
23848: PPUSH
23849: CALL_OW 255
23853: NONEQUAL
23854: OR
23855: IFFALSE 23884
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
23857: LD_ADDR_EXP 112
23861: PUSH
23862: LD_EXP 112
23866: PPUSH
23867: LD_VAR 0 8
23871: PPUSH
23872: LD_INT 0
23874: PPUSH
23875: CALL_OW 1
23879: ST_TO_ADDR
// exit ;
23880: POP
23881: POP
23882: GO 24415
// end ; x := list [ i ] [ 3 ] ;
23884: LD_ADDR_VAR 0 6
23888: PUSH
23889: LD_VAR 0 3
23893: PUSH
23894: LD_VAR 0 1
23898: ARRAY
23899: PUSH
23900: LD_INT 3
23902: ARRAY
23903: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
23904: LD_ADDR_VAR 0 7
23908: PUSH
23909: LD_VAR 0 3
23913: PUSH
23914: LD_VAR 0 1
23918: ARRAY
23919: PUSH
23920: LD_INT 4
23922: ARRAY
23923: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
23924: LD_ADDR_VAR 0 9
23928: PUSH
23929: LD_VAR 0 6
23933: PPUSH
23934: LD_VAR 0 7
23938: PPUSH
23939: LD_INT 16
23941: PPUSH
23942: CALL 69194 0 3
23946: ST_TO_ADDR
// if not cratesNearbyPoint then
23947: LD_VAR 0 9
23951: NOT
23952: IFFALSE 23958
// exit ;
23954: POP
23955: POP
23956: GO 24415
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
23958: LD_ADDR_VAR 0 4
23962: PUSH
23963: LD_INT 22
23965: PUSH
23966: LD_VAR 0 5
23970: PUSH
23971: EMPTY
23972: LIST
23973: LIST
23974: PUSH
23975: LD_INT 3
23977: PUSH
23978: LD_INT 60
23980: PUSH
23981: EMPTY
23982: LIST
23983: PUSH
23984: EMPTY
23985: LIST
23986: LIST
23987: PUSH
23988: LD_INT 91
23990: PUSH
23991: LD_VAR 0 8
23995: PUSH
23996: LD_INT 6
23998: PUSH
23999: EMPTY
24000: LIST
24001: LIST
24002: LIST
24003: PUSH
24004: LD_INT 2
24006: PUSH
24007: LD_INT 25
24009: PUSH
24010: LD_INT 2
24012: PUSH
24013: EMPTY
24014: LIST
24015: LIST
24016: PUSH
24017: LD_INT 25
24019: PUSH
24020: LD_INT 16
24022: PUSH
24023: EMPTY
24024: LIST
24025: LIST
24026: PUSH
24027: EMPTY
24028: LIST
24029: LIST
24030: LIST
24031: PUSH
24032: EMPTY
24033: LIST
24034: LIST
24035: LIST
24036: LIST
24037: PPUSH
24038: CALL_OW 69
24042: PUSH
24043: LD_VAR 0 8
24047: PPUSH
24048: CALL_OW 313
24052: PPUSH
24053: LD_INT 3
24055: PUSH
24056: LD_INT 60
24058: PUSH
24059: EMPTY
24060: LIST
24061: PUSH
24062: EMPTY
24063: LIST
24064: LIST
24065: PUSH
24066: LD_INT 2
24068: PUSH
24069: LD_INT 25
24071: PUSH
24072: LD_INT 2
24074: PUSH
24075: EMPTY
24076: LIST
24077: LIST
24078: PUSH
24079: LD_INT 25
24081: PUSH
24082: LD_INT 16
24084: PUSH
24085: EMPTY
24086: LIST
24087: LIST
24088: PUSH
24089: EMPTY
24090: LIST
24091: LIST
24092: LIST
24093: PUSH
24094: EMPTY
24095: LIST
24096: LIST
24097: PPUSH
24098: CALL_OW 72
24102: UNION
24103: ST_TO_ADDR
// if tmp then
24104: LD_VAR 0 4
24108: IFFALSE 24188
// begin tmp := ShrinkArray ( tmp , 3 ) ;
24110: LD_ADDR_VAR 0 4
24114: PUSH
24115: LD_VAR 0 4
24119: PPUSH
24120: LD_INT 3
24122: PPUSH
24123: CALL 67163 0 2
24127: ST_TO_ADDR
// for j in tmp do
24128: LD_ADDR_VAR 0 2
24132: PUSH
24133: LD_VAR 0 4
24137: PUSH
24138: FOR_IN
24139: IFFALSE 24182
// begin if IsInUnit ( j ) then
24141: LD_VAR 0 2
24145: PPUSH
24146: CALL_OW 310
24150: IFFALSE 24161
// ComExit ( j ) ;
24152: LD_VAR 0 2
24156: PPUSH
24157: CALL 67246 0 1
// AddComCollect ( j , x , y ) ;
24161: LD_VAR 0 2
24165: PPUSH
24166: LD_VAR 0 6
24170: PPUSH
24171: LD_VAR 0 7
24175: PPUSH
24176: CALL_OW 177
// end ;
24180: GO 24138
24182: POP
24183: POP
// exit ;
24184: POP
24185: POP
24186: GO 24415
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
24188: LD_ADDR_VAR 0 4
24192: PUSH
24193: LD_INT 22
24195: PUSH
24196: LD_VAR 0 5
24200: PUSH
24201: EMPTY
24202: LIST
24203: LIST
24204: PUSH
24205: LD_INT 91
24207: PUSH
24208: LD_VAR 0 8
24212: PUSH
24213: LD_INT 8
24215: PUSH
24216: EMPTY
24217: LIST
24218: LIST
24219: LIST
24220: PUSH
24221: LD_INT 2
24223: PUSH
24224: LD_INT 34
24226: PUSH
24227: LD_INT 12
24229: PUSH
24230: EMPTY
24231: LIST
24232: LIST
24233: PUSH
24234: LD_INT 34
24236: PUSH
24237: LD_INT 51
24239: PUSH
24240: EMPTY
24241: LIST
24242: LIST
24243: PUSH
24244: LD_INT 34
24246: PUSH
24247: LD_INT 32
24249: PUSH
24250: EMPTY
24251: LIST
24252: LIST
24253: PUSH
24254: LD_INT 34
24256: PUSH
24257: LD_INT 89
24259: PUSH
24260: EMPTY
24261: LIST
24262: LIST
24263: PUSH
24264: EMPTY
24265: LIST
24266: LIST
24267: LIST
24268: LIST
24269: LIST
24270: PUSH
24271: EMPTY
24272: LIST
24273: LIST
24274: LIST
24275: PPUSH
24276: CALL_OW 69
24280: ST_TO_ADDR
// if tmp then
24281: LD_VAR 0 4
24285: IFFALSE 24411
// begin for j in tmp do
24287: LD_ADDR_VAR 0 2
24291: PUSH
24292: LD_VAR 0 4
24296: PUSH
24297: FOR_IN
24298: IFFALSE 24409
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
24300: LD_VAR 0 2
24304: PPUSH
24305: CALL_OW 262
24309: PUSH
24310: LD_INT 3
24312: EQUAL
24313: PUSH
24314: LD_VAR 0 2
24318: PPUSH
24319: CALL_OW 261
24323: PUSH
24324: LD_INT 20
24326: GREATER
24327: OR
24328: PUSH
24329: LD_VAR 0 2
24333: PPUSH
24334: CALL_OW 314
24338: NOT
24339: AND
24340: PUSH
24341: LD_VAR 0 2
24345: PPUSH
24346: CALL_OW 263
24350: PUSH
24351: LD_INT 1
24353: NONEQUAL
24354: PUSH
24355: LD_VAR 0 2
24359: PPUSH
24360: CALL_OW 311
24364: OR
24365: AND
24366: IFFALSE 24407
// begin ComCollect ( j , x , y ) ;
24368: LD_VAR 0 2
24372: PPUSH
24373: LD_VAR 0 6
24377: PPUSH
24378: LD_VAR 0 7
24382: PPUSH
24383: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
24387: LD_VAR 0 2
24391: PPUSH
24392: LD_VAR 0 8
24396: PPUSH
24397: CALL_OW 172
// exit ;
24401: POP
24402: POP
24403: POP
24404: POP
24405: GO 24415
// end ;
24407: GO 24297
24409: POP
24410: POP
// end ; end ;
24411: GO 23786
24413: POP
24414: POP
// end ; end_of_file
24415: PPOPN 9
24417: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
24418: LD_INT 0
24420: PPUSH
24421: PPUSH
24422: PPUSH
24423: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
24424: LD_VAR 0 1
24428: PPUSH
24429: CALL_OW 264
24433: PUSH
24434: LD_INT 91
24436: EQUAL
24437: IFFALSE 24509
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
24439: LD_INT 68
24441: PPUSH
24442: LD_VAR 0 1
24446: PPUSH
24447: CALL_OW 255
24451: PPUSH
24452: CALL_OW 321
24456: PUSH
24457: LD_INT 2
24459: EQUAL
24460: IFFALSE 24472
// eff := 70 else
24462: LD_ADDR_VAR 0 4
24466: PUSH
24467: LD_INT 70
24469: ST_TO_ADDR
24470: GO 24480
// eff := 30 ;
24472: LD_ADDR_VAR 0 4
24476: PUSH
24477: LD_INT 30
24479: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
24480: LD_VAR 0 1
24484: PPUSH
24485: CALL_OW 250
24489: PPUSH
24490: LD_VAR 0 1
24494: PPUSH
24495: CALL_OW 251
24499: PPUSH
24500: LD_VAR 0 4
24504: PPUSH
24505: CALL_OW 495
// end ; end ;
24509: LD_VAR 0 2
24513: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
24514: LD_INT 0
24516: PPUSH
// end ;
24517: LD_VAR 0 4
24521: RET
// export function SOS_Command ( cmd ) ; begin
24522: LD_INT 0
24524: PPUSH
// end ;
24525: LD_VAR 0 2
24529: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
24530: LD_INT 0
24532: PPUSH
// end ;
24533: LD_VAR 0 6
24537: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
24538: LD_INT 0
24540: PPUSH
24541: PPUSH
// if not vehicle or not factory then
24542: LD_VAR 0 1
24546: NOT
24547: PUSH
24548: LD_VAR 0 2
24552: NOT
24553: OR
24554: IFFALSE 24558
// exit ;
24556: GO 24789
// if factoryWaypoints >= factory then
24558: LD_EXP 111
24562: PUSH
24563: LD_VAR 0 2
24567: GREATEREQUAL
24568: IFFALSE 24789
// if factoryWaypoints [ factory ] then
24570: LD_EXP 111
24574: PUSH
24575: LD_VAR 0 2
24579: ARRAY
24580: IFFALSE 24789
// begin if GetControl ( vehicle ) = control_manual then
24582: LD_VAR 0 1
24586: PPUSH
24587: CALL_OW 263
24591: PUSH
24592: LD_INT 1
24594: EQUAL
24595: IFFALSE 24676
// begin driver := IsDrivenBy ( vehicle ) ;
24597: LD_ADDR_VAR 0 4
24601: PUSH
24602: LD_VAR 0 1
24606: PPUSH
24607: CALL_OW 311
24611: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
24612: LD_VAR 0 4
24616: PPUSH
24617: LD_EXP 111
24621: PUSH
24622: LD_VAR 0 2
24626: ARRAY
24627: PUSH
24628: LD_INT 3
24630: ARRAY
24631: PPUSH
24632: LD_EXP 111
24636: PUSH
24637: LD_VAR 0 2
24641: ARRAY
24642: PUSH
24643: LD_INT 4
24645: ARRAY
24646: PPUSH
24647: CALL_OW 171
// AddComExitVehicle ( driver ) ;
24651: LD_VAR 0 4
24655: PPUSH
24656: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
24660: LD_VAR 0 4
24664: PPUSH
24665: LD_VAR 0 2
24669: PPUSH
24670: CALL_OW 180
// end else
24674: GO 24789
// if GetControl ( vehicle ) = control_remote then
24676: LD_VAR 0 1
24680: PPUSH
24681: CALL_OW 263
24685: PUSH
24686: LD_INT 2
24688: EQUAL
24689: IFFALSE 24750
// begin wait ( 0 0$2 ) ;
24691: LD_INT 70
24693: PPUSH
24694: CALL_OW 67
// if Connect ( vehicle ) then
24698: LD_VAR 0 1
24702: PPUSH
24703: CALL 37454 0 1
24707: IFFALSE 24748
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
24709: LD_VAR 0 1
24713: PPUSH
24714: LD_EXP 111
24718: PUSH
24719: LD_VAR 0 2
24723: ARRAY
24724: PUSH
24725: LD_INT 3
24727: ARRAY
24728: PPUSH
24729: LD_EXP 111
24733: PUSH
24734: LD_VAR 0 2
24738: ARRAY
24739: PUSH
24740: LD_INT 4
24742: ARRAY
24743: PPUSH
24744: CALL_OW 171
// end else
24748: GO 24789
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
24750: LD_VAR 0 1
24754: PPUSH
24755: LD_EXP 111
24759: PUSH
24760: LD_VAR 0 2
24764: ARRAY
24765: PUSH
24766: LD_INT 3
24768: ARRAY
24769: PPUSH
24770: LD_EXP 111
24774: PUSH
24775: LD_VAR 0 2
24779: ARRAY
24780: PUSH
24781: LD_INT 4
24783: ARRAY
24784: PPUSH
24785: CALL_OW 171
// end ; end ;
24789: LD_VAR 0 3
24793: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
24794: LD_INT 0
24796: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
24797: LD_VAR 0 1
24801: PUSH
24802: LD_INT 250
24804: EQUAL
24805: PUSH
24806: LD_VAR 0 2
24810: PPUSH
24811: CALL_OW 264
24815: PUSH
24816: LD_INT 81
24818: EQUAL
24819: AND
24820: IFFALSE 24841
// MinerPlaceMine ( unit , x , y ) ;
24822: LD_VAR 0 2
24826: PPUSH
24827: LD_VAR 0 4
24831: PPUSH
24832: LD_VAR 0 5
24836: PPUSH
24837: CALL 27665 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
24841: LD_VAR 0 1
24845: PUSH
24846: LD_INT 251
24848: EQUAL
24849: PUSH
24850: LD_VAR 0 2
24854: PPUSH
24855: CALL_OW 264
24859: PUSH
24860: LD_INT 81
24862: EQUAL
24863: AND
24864: IFFALSE 24885
// MinerDetonateMine ( unit , x , y ) ;
24866: LD_VAR 0 2
24870: PPUSH
24871: LD_VAR 0 4
24875: PPUSH
24876: LD_VAR 0 5
24880: PPUSH
24881: CALL 27940 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
24885: LD_VAR 0 1
24889: PUSH
24890: LD_INT 252
24892: EQUAL
24893: PUSH
24894: LD_VAR 0 2
24898: PPUSH
24899: CALL_OW 264
24903: PUSH
24904: LD_INT 81
24906: EQUAL
24907: AND
24908: IFFALSE 24929
// MinerCreateMinefield ( unit , x , y ) ;
24910: LD_VAR 0 2
24914: PPUSH
24915: LD_VAR 0 4
24919: PPUSH
24920: LD_VAR 0 5
24924: PPUSH
24925: CALL 28357 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
24929: LD_VAR 0 1
24933: PUSH
24934: LD_INT 253
24936: EQUAL
24937: PUSH
24938: LD_VAR 0 2
24942: PPUSH
24943: CALL_OW 257
24947: PUSH
24948: LD_INT 5
24950: EQUAL
24951: AND
24952: IFFALSE 24973
// ComBinocular ( unit , x , y ) ;
24954: LD_VAR 0 2
24958: PPUSH
24959: LD_VAR 0 4
24963: PPUSH
24964: LD_VAR 0 5
24968: PPUSH
24969: CALL 28726 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
24973: LD_VAR 0 1
24977: PUSH
24978: LD_INT 254
24980: EQUAL
24981: PUSH
24982: LD_VAR 0 2
24986: PPUSH
24987: CALL_OW 264
24991: PUSH
24992: LD_INT 99
24994: EQUAL
24995: AND
24996: PUSH
24997: LD_VAR 0 3
25001: PPUSH
25002: CALL_OW 263
25006: PUSH
25007: LD_INT 3
25009: EQUAL
25010: AND
25011: IFFALSE 25027
// HackDestroyVehicle ( unit , selectedUnit ) ;
25013: LD_VAR 0 2
25017: PPUSH
25018: LD_VAR 0 3
25022: PPUSH
25023: CALL 27029 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
25027: LD_VAR 0 1
25031: PUSH
25032: LD_INT 255
25034: EQUAL
25035: PUSH
25036: LD_VAR 0 2
25040: PPUSH
25041: CALL_OW 264
25045: PUSH
25046: LD_INT 14
25048: PUSH
25049: LD_INT 53
25051: PUSH
25052: EMPTY
25053: LIST
25054: LIST
25055: IN
25056: AND
25057: PUSH
25058: LD_VAR 0 4
25062: PPUSH
25063: LD_VAR 0 5
25067: PPUSH
25068: CALL_OW 488
25072: AND
25073: IFFALSE 25097
// CutTreeXYR ( unit , x , y , 12 ) ;
25075: LD_VAR 0 2
25079: PPUSH
25080: LD_VAR 0 4
25084: PPUSH
25085: LD_VAR 0 5
25089: PPUSH
25090: LD_INT 12
25092: PPUSH
25093: CALL 25192 0 4
// if cmd = 256 then
25097: LD_VAR 0 1
25101: PUSH
25102: LD_INT 256
25104: EQUAL
25105: IFFALSE 25126
// SetFactoryWaypoint ( unit , x , y ) ;
25107: LD_VAR 0 2
25111: PPUSH
25112: LD_VAR 0 4
25116: PPUSH
25117: LD_VAR 0 5
25121: PPUSH
25122: CALL 23107 0 3
// if cmd = 257 then
25126: LD_VAR 0 1
25130: PUSH
25131: LD_INT 257
25133: EQUAL
25134: IFFALSE 25155
// SetWarehouseGatheringPoint ( unit , x , y ) ;
25136: LD_VAR 0 2
25140: PPUSH
25141: LD_VAR 0 4
25145: PPUSH
25146: LD_VAR 0 5
25150: PPUSH
25151: CALL 23469 0 3
// if cmd = 258 then
25155: LD_VAR 0 1
25159: PUSH
25160: LD_INT 258
25162: EQUAL
25163: IFFALSE 25187
// BurnTreeXYR ( unit , x , y , 8 ) ;
25165: LD_VAR 0 2
25169: PPUSH
25170: LD_VAR 0 4
25174: PPUSH
25175: LD_VAR 0 5
25179: PPUSH
25180: LD_INT 8
25182: PPUSH
25183: CALL 25586 0 4
// end ;
25187: LD_VAR 0 6
25191: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
25192: LD_INT 0
25194: PPUSH
25195: PPUSH
25196: PPUSH
25197: PPUSH
25198: PPUSH
25199: PPUSH
25200: PPUSH
25201: PPUSH
25202: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
25203: LD_VAR 0 1
25207: PPUSH
25208: CALL_OW 302
25212: NOT
25213: PUSH
25214: LD_VAR 0 2
25218: PPUSH
25219: LD_VAR 0 3
25223: PPUSH
25224: CALL_OW 488
25228: NOT
25229: OR
25230: PUSH
25231: LD_VAR 0 4
25235: NOT
25236: OR
25237: IFFALSE 25241
// exit ;
25239: GO 25581
// list := [ ] ;
25241: LD_ADDR_VAR 0 13
25245: PUSH
25246: EMPTY
25247: ST_TO_ADDR
// if x - r < 0 then
25248: LD_VAR 0 2
25252: PUSH
25253: LD_VAR 0 4
25257: MINUS
25258: PUSH
25259: LD_INT 0
25261: LESS
25262: IFFALSE 25274
// min_x := 0 else
25264: LD_ADDR_VAR 0 7
25268: PUSH
25269: LD_INT 0
25271: ST_TO_ADDR
25272: GO 25290
// min_x := x - r ;
25274: LD_ADDR_VAR 0 7
25278: PUSH
25279: LD_VAR 0 2
25283: PUSH
25284: LD_VAR 0 4
25288: MINUS
25289: ST_TO_ADDR
// if y - r < 0 then
25290: LD_VAR 0 3
25294: PUSH
25295: LD_VAR 0 4
25299: MINUS
25300: PUSH
25301: LD_INT 0
25303: LESS
25304: IFFALSE 25316
// min_y := 0 else
25306: LD_ADDR_VAR 0 8
25310: PUSH
25311: LD_INT 0
25313: ST_TO_ADDR
25314: GO 25332
// min_y := y - r ;
25316: LD_ADDR_VAR 0 8
25320: PUSH
25321: LD_VAR 0 3
25325: PUSH
25326: LD_VAR 0 4
25330: MINUS
25331: ST_TO_ADDR
// max_x := x + r ;
25332: LD_ADDR_VAR 0 9
25336: PUSH
25337: LD_VAR 0 2
25341: PUSH
25342: LD_VAR 0 4
25346: PLUS
25347: ST_TO_ADDR
// max_y := y + r ;
25348: LD_ADDR_VAR 0 10
25352: PUSH
25353: LD_VAR 0 3
25357: PUSH
25358: LD_VAR 0 4
25362: PLUS
25363: ST_TO_ADDR
// for _x = min_x to max_x do
25364: LD_ADDR_VAR 0 11
25368: PUSH
25369: DOUBLE
25370: LD_VAR 0 7
25374: DEC
25375: ST_TO_ADDR
25376: LD_VAR 0 9
25380: PUSH
25381: FOR_TO
25382: IFFALSE 25499
// for _y = min_y to max_y do
25384: LD_ADDR_VAR 0 12
25388: PUSH
25389: DOUBLE
25390: LD_VAR 0 8
25394: DEC
25395: ST_TO_ADDR
25396: LD_VAR 0 10
25400: PUSH
25401: FOR_TO
25402: IFFALSE 25495
// begin if not ValidHex ( _x , _y ) then
25404: LD_VAR 0 11
25408: PPUSH
25409: LD_VAR 0 12
25413: PPUSH
25414: CALL_OW 488
25418: NOT
25419: IFFALSE 25423
// continue ;
25421: GO 25401
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
25423: LD_VAR 0 11
25427: PPUSH
25428: LD_VAR 0 12
25432: PPUSH
25433: CALL_OW 351
25437: PUSH
25438: LD_VAR 0 11
25442: PPUSH
25443: LD_VAR 0 12
25447: PPUSH
25448: CALL_OW 554
25452: AND
25453: IFFALSE 25493
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
25455: LD_ADDR_VAR 0 13
25459: PUSH
25460: LD_VAR 0 13
25464: PPUSH
25465: LD_VAR 0 13
25469: PUSH
25470: LD_INT 1
25472: PLUS
25473: PPUSH
25474: LD_VAR 0 11
25478: PUSH
25479: LD_VAR 0 12
25483: PUSH
25484: EMPTY
25485: LIST
25486: LIST
25487: PPUSH
25488: CALL_OW 2
25492: ST_TO_ADDR
// end ;
25493: GO 25401
25495: POP
25496: POP
25497: GO 25381
25499: POP
25500: POP
// if not list then
25501: LD_VAR 0 13
25505: NOT
25506: IFFALSE 25510
// exit ;
25508: GO 25581
// for i in list do
25510: LD_ADDR_VAR 0 6
25514: PUSH
25515: LD_VAR 0 13
25519: PUSH
25520: FOR_IN
25521: IFFALSE 25579
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
25523: LD_VAR 0 1
25527: PPUSH
25528: LD_STRING M
25530: PUSH
25531: LD_VAR 0 6
25535: PUSH
25536: LD_INT 1
25538: ARRAY
25539: PUSH
25540: LD_VAR 0 6
25544: PUSH
25545: LD_INT 2
25547: ARRAY
25548: PUSH
25549: LD_INT 0
25551: PUSH
25552: LD_INT 0
25554: PUSH
25555: LD_INT 0
25557: PUSH
25558: LD_INT 0
25560: PUSH
25561: EMPTY
25562: LIST
25563: LIST
25564: LIST
25565: LIST
25566: LIST
25567: LIST
25568: LIST
25569: PUSH
25570: EMPTY
25571: LIST
25572: PPUSH
25573: CALL_OW 447
25577: GO 25520
25579: POP
25580: POP
// end ;
25581: LD_VAR 0 5
25585: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
25586: LD_INT 0
25588: PPUSH
25589: PPUSH
25590: PPUSH
25591: PPUSH
25592: PPUSH
25593: PPUSH
25594: PPUSH
25595: PPUSH
25596: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
25597: LD_VAR 0 1
25601: PPUSH
25602: CALL_OW 302
25606: NOT
25607: PUSH
25608: LD_VAR 0 2
25612: PPUSH
25613: LD_VAR 0 3
25617: PPUSH
25618: CALL_OW 488
25622: NOT
25623: OR
25624: PUSH
25625: LD_VAR 0 4
25629: NOT
25630: OR
25631: IFFALSE 25635
// exit ;
25633: GO 25983
// list := [ ] ;
25635: LD_ADDR_VAR 0 13
25639: PUSH
25640: EMPTY
25641: ST_TO_ADDR
// if x - r < 0 then
25642: LD_VAR 0 2
25646: PUSH
25647: LD_VAR 0 4
25651: MINUS
25652: PUSH
25653: LD_INT 0
25655: LESS
25656: IFFALSE 25668
// min_x := 0 else
25658: LD_ADDR_VAR 0 7
25662: PUSH
25663: LD_INT 0
25665: ST_TO_ADDR
25666: GO 25684
// min_x := x - r ;
25668: LD_ADDR_VAR 0 7
25672: PUSH
25673: LD_VAR 0 2
25677: PUSH
25678: LD_VAR 0 4
25682: MINUS
25683: ST_TO_ADDR
// if y - r < 0 then
25684: LD_VAR 0 3
25688: PUSH
25689: LD_VAR 0 4
25693: MINUS
25694: PUSH
25695: LD_INT 0
25697: LESS
25698: IFFALSE 25710
// min_y := 0 else
25700: LD_ADDR_VAR 0 8
25704: PUSH
25705: LD_INT 0
25707: ST_TO_ADDR
25708: GO 25726
// min_y := y - r ;
25710: LD_ADDR_VAR 0 8
25714: PUSH
25715: LD_VAR 0 3
25719: PUSH
25720: LD_VAR 0 4
25724: MINUS
25725: ST_TO_ADDR
// max_x := x + r ;
25726: LD_ADDR_VAR 0 9
25730: PUSH
25731: LD_VAR 0 2
25735: PUSH
25736: LD_VAR 0 4
25740: PLUS
25741: ST_TO_ADDR
// max_y := y + r ;
25742: LD_ADDR_VAR 0 10
25746: PUSH
25747: LD_VAR 0 3
25751: PUSH
25752: LD_VAR 0 4
25756: PLUS
25757: ST_TO_ADDR
// for _x = min_x to max_x do
25758: LD_ADDR_VAR 0 11
25762: PUSH
25763: DOUBLE
25764: LD_VAR 0 7
25768: DEC
25769: ST_TO_ADDR
25770: LD_VAR 0 9
25774: PUSH
25775: FOR_TO
25776: IFFALSE 25893
// for _y = min_y to max_y do
25778: LD_ADDR_VAR 0 12
25782: PUSH
25783: DOUBLE
25784: LD_VAR 0 8
25788: DEC
25789: ST_TO_ADDR
25790: LD_VAR 0 10
25794: PUSH
25795: FOR_TO
25796: IFFALSE 25889
// begin if not ValidHex ( _x , _y ) then
25798: LD_VAR 0 11
25802: PPUSH
25803: LD_VAR 0 12
25807: PPUSH
25808: CALL_OW 488
25812: NOT
25813: IFFALSE 25817
// continue ;
25815: GO 25795
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
25817: LD_VAR 0 11
25821: PPUSH
25822: LD_VAR 0 12
25826: PPUSH
25827: CALL_OW 351
25831: PUSH
25832: LD_VAR 0 11
25836: PPUSH
25837: LD_VAR 0 12
25841: PPUSH
25842: CALL_OW 554
25846: AND
25847: IFFALSE 25887
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
25849: LD_ADDR_VAR 0 13
25853: PUSH
25854: LD_VAR 0 13
25858: PPUSH
25859: LD_VAR 0 13
25863: PUSH
25864: LD_INT 1
25866: PLUS
25867: PPUSH
25868: LD_VAR 0 11
25872: PUSH
25873: LD_VAR 0 12
25877: PUSH
25878: EMPTY
25879: LIST
25880: LIST
25881: PPUSH
25882: CALL_OW 2
25886: ST_TO_ADDR
// end ;
25887: GO 25795
25889: POP
25890: POP
25891: GO 25775
25893: POP
25894: POP
// if not list then
25895: LD_VAR 0 13
25899: NOT
25900: IFFALSE 25904
// exit ;
25902: GO 25983
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
25904: LD_ADDR_VAR 0 13
25908: PUSH
25909: LD_VAR 0 1
25913: PPUSH
25914: LD_VAR 0 13
25918: PPUSH
25919: LD_INT 1
25921: PPUSH
25922: LD_INT 1
25924: PPUSH
25925: CALL 34596 0 4
25929: ST_TO_ADDR
// ComStop ( flame ) ;
25930: LD_VAR 0 1
25934: PPUSH
25935: CALL_OW 141
// for i in list do
25939: LD_ADDR_VAR 0 6
25943: PUSH
25944: LD_VAR 0 13
25948: PUSH
25949: FOR_IN
25950: IFFALSE 25981
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
25952: LD_VAR 0 1
25956: PPUSH
25957: LD_VAR 0 6
25961: PUSH
25962: LD_INT 1
25964: ARRAY
25965: PPUSH
25966: LD_VAR 0 6
25970: PUSH
25971: LD_INT 2
25973: ARRAY
25974: PPUSH
25975: CALL_OW 176
25979: GO 25949
25981: POP
25982: POP
// end ;
25983: LD_VAR 0 5
25987: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
25988: LD_EXP 114
25992: NOT
25993: IFFALSE 26043
25995: GO 25997
25997: DISABLE
// begin initHack := true ;
25998: LD_ADDR_EXP 114
26002: PUSH
26003: LD_INT 1
26005: ST_TO_ADDR
// hackTanks := [ ] ;
26006: LD_ADDR_EXP 115
26010: PUSH
26011: EMPTY
26012: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
26013: LD_ADDR_EXP 116
26017: PUSH
26018: EMPTY
26019: ST_TO_ADDR
// hackLimit := 3 ;
26020: LD_ADDR_EXP 117
26024: PUSH
26025: LD_INT 3
26027: ST_TO_ADDR
// hackDist := 12 ;
26028: LD_ADDR_EXP 118
26032: PUSH
26033: LD_INT 12
26035: ST_TO_ADDR
// hackCounter := [ ] ;
26036: LD_ADDR_EXP 119
26040: PUSH
26041: EMPTY
26042: ST_TO_ADDR
// end ;
26043: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
26044: LD_EXP 114
26048: PUSH
26049: LD_INT 34
26051: PUSH
26052: LD_INT 99
26054: PUSH
26055: EMPTY
26056: LIST
26057: LIST
26058: PPUSH
26059: CALL_OW 69
26063: AND
26064: IFFALSE 26317
26066: GO 26068
26068: DISABLE
26069: LD_INT 0
26071: PPUSH
26072: PPUSH
// begin enable ;
26073: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
26074: LD_ADDR_VAR 0 1
26078: PUSH
26079: LD_INT 34
26081: PUSH
26082: LD_INT 99
26084: PUSH
26085: EMPTY
26086: LIST
26087: LIST
26088: PPUSH
26089: CALL_OW 69
26093: PUSH
26094: FOR_IN
26095: IFFALSE 26315
// begin if not i in hackTanks then
26097: LD_VAR 0 1
26101: PUSH
26102: LD_EXP 115
26106: IN
26107: NOT
26108: IFFALSE 26191
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
26110: LD_ADDR_EXP 115
26114: PUSH
26115: LD_EXP 115
26119: PPUSH
26120: LD_EXP 115
26124: PUSH
26125: LD_INT 1
26127: PLUS
26128: PPUSH
26129: LD_VAR 0 1
26133: PPUSH
26134: CALL_OW 1
26138: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
26139: LD_ADDR_EXP 116
26143: PUSH
26144: LD_EXP 116
26148: PPUSH
26149: LD_EXP 116
26153: PUSH
26154: LD_INT 1
26156: PLUS
26157: PPUSH
26158: EMPTY
26159: PPUSH
26160: CALL_OW 1
26164: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
26165: LD_ADDR_EXP 119
26169: PUSH
26170: LD_EXP 119
26174: PPUSH
26175: LD_EXP 119
26179: PUSH
26180: LD_INT 1
26182: PLUS
26183: PPUSH
26184: EMPTY
26185: PPUSH
26186: CALL_OW 1
26190: ST_TO_ADDR
// end ; if not IsOk ( i ) then
26191: LD_VAR 0 1
26195: PPUSH
26196: CALL_OW 302
26200: NOT
26201: IFFALSE 26214
// begin HackUnlinkAll ( i ) ;
26203: LD_VAR 0 1
26207: PPUSH
26208: CALL 26320 0 1
// continue ;
26212: GO 26094
// end ; HackCheckCapturedStatus ( i ) ;
26214: LD_VAR 0 1
26218: PPUSH
26219: CALL 26763 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
26223: LD_ADDR_VAR 0 2
26227: PUSH
26228: LD_INT 81
26230: PUSH
26231: LD_VAR 0 1
26235: PPUSH
26236: CALL_OW 255
26240: PUSH
26241: EMPTY
26242: LIST
26243: LIST
26244: PUSH
26245: LD_INT 33
26247: PUSH
26248: LD_INT 3
26250: PUSH
26251: EMPTY
26252: LIST
26253: LIST
26254: PUSH
26255: LD_INT 91
26257: PUSH
26258: LD_VAR 0 1
26262: PUSH
26263: LD_EXP 118
26267: PUSH
26268: EMPTY
26269: LIST
26270: LIST
26271: LIST
26272: PUSH
26273: LD_INT 50
26275: PUSH
26276: EMPTY
26277: LIST
26278: PUSH
26279: EMPTY
26280: LIST
26281: LIST
26282: LIST
26283: LIST
26284: PPUSH
26285: CALL_OW 69
26289: ST_TO_ADDR
// if not tmp then
26290: LD_VAR 0 2
26294: NOT
26295: IFFALSE 26299
// continue ;
26297: GO 26094
// HackLink ( i , tmp ) ;
26299: LD_VAR 0 1
26303: PPUSH
26304: LD_VAR 0 2
26308: PPUSH
26309: CALL 26456 0 2
// end ;
26313: GO 26094
26315: POP
26316: POP
// end ;
26317: PPOPN 2
26319: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
26320: LD_INT 0
26322: PPUSH
26323: PPUSH
26324: PPUSH
// if not hack in hackTanks then
26325: LD_VAR 0 1
26329: PUSH
26330: LD_EXP 115
26334: IN
26335: NOT
26336: IFFALSE 26340
// exit ;
26338: GO 26451
// index := GetElementIndex ( hackTanks , hack ) ;
26340: LD_ADDR_VAR 0 4
26344: PUSH
26345: LD_EXP 115
26349: PPUSH
26350: LD_VAR 0 1
26354: PPUSH
26355: CALL 33893 0 2
26359: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
26360: LD_EXP 116
26364: PUSH
26365: LD_VAR 0 4
26369: ARRAY
26370: IFFALSE 26451
// begin for i in hackTanksCaptured [ index ] do
26372: LD_ADDR_VAR 0 3
26376: PUSH
26377: LD_EXP 116
26381: PUSH
26382: LD_VAR 0 4
26386: ARRAY
26387: PUSH
26388: FOR_IN
26389: IFFALSE 26415
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
26391: LD_VAR 0 3
26395: PUSH
26396: LD_INT 1
26398: ARRAY
26399: PPUSH
26400: LD_VAR 0 3
26404: PUSH
26405: LD_INT 2
26407: ARRAY
26408: PPUSH
26409: CALL_OW 235
26413: GO 26388
26415: POP
26416: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
26417: LD_ADDR_EXP 116
26421: PUSH
26422: LD_EXP 116
26426: PPUSH
26427: LD_VAR 0 4
26431: PPUSH
26432: EMPTY
26433: PPUSH
26434: CALL_OW 1
26438: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
26439: LD_VAR 0 1
26443: PPUSH
26444: LD_INT 0
26446: PPUSH
26447: CALL_OW 505
// end ; end ;
26451: LD_VAR 0 2
26455: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
26456: LD_INT 0
26458: PPUSH
26459: PPUSH
26460: PPUSH
// if not hack in hackTanks or not vehicles then
26461: LD_VAR 0 1
26465: PUSH
26466: LD_EXP 115
26470: IN
26471: NOT
26472: PUSH
26473: LD_VAR 0 2
26477: NOT
26478: OR
26479: IFFALSE 26483
// exit ;
26481: GO 26758
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
26483: LD_ADDR_VAR 0 2
26487: PUSH
26488: LD_VAR 0 1
26492: PPUSH
26493: LD_VAR 0 2
26497: PPUSH
26498: LD_INT 1
26500: PPUSH
26501: LD_INT 1
26503: PPUSH
26504: CALL 34543 0 4
26508: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
26509: LD_ADDR_VAR 0 5
26513: PUSH
26514: LD_EXP 115
26518: PPUSH
26519: LD_VAR 0 1
26523: PPUSH
26524: CALL 33893 0 2
26528: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
26529: LD_EXP 116
26533: PUSH
26534: LD_VAR 0 5
26538: ARRAY
26539: PUSH
26540: LD_EXP 117
26544: LESS
26545: IFFALSE 26734
// begin for i := 1 to vehicles do
26547: LD_ADDR_VAR 0 4
26551: PUSH
26552: DOUBLE
26553: LD_INT 1
26555: DEC
26556: ST_TO_ADDR
26557: LD_VAR 0 2
26561: PUSH
26562: FOR_TO
26563: IFFALSE 26732
// begin if hackTanksCaptured [ index ] = hackLimit then
26565: LD_EXP 116
26569: PUSH
26570: LD_VAR 0 5
26574: ARRAY
26575: PUSH
26576: LD_EXP 117
26580: EQUAL
26581: IFFALSE 26585
// break ;
26583: GO 26732
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
26585: LD_ADDR_EXP 119
26589: PUSH
26590: LD_EXP 119
26594: PPUSH
26595: LD_VAR 0 5
26599: PPUSH
26600: LD_EXP 119
26604: PUSH
26605: LD_VAR 0 5
26609: ARRAY
26610: PUSH
26611: LD_INT 1
26613: PLUS
26614: PPUSH
26615: CALL_OW 1
26619: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
26620: LD_ADDR_EXP 116
26624: PUSH
26625: LD_EXP 116
26629: PPUSH
26630: LD_VAR 0 5
26634: PUSH
26635: LD_EXP 116
26639: PUSH
26640: LD_VAR 0 5
26644: ARRAY
26645: PUSH
26646: LD_INT 1
26648: PLUS
26649: PUSH
26650: EMPTY
26651: LIST
26652: LIST
26653: PPUSH
26654: LD_VAR 0 2
26658: PUSH
26659: LD_VAR 0 4
26663: ARRAY
26664: PUSH
26665: LD_VAR 0 2
26669: PUSH
26670: LD_VAR 0 4
26674: ARRAY
26675: PPUSH
26676: CALL_OW 255
26680: PUSH
26681: EMPTY
26682: LIST
26683: LIST
26684: PPUSH
26685: CALL 34108 0 3
26689: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
26690: LD_VAR 0 2
26694: PUSH
26695: LD_VAR 0 4
26699: ARRAY
26700: PPUSH
26701: LD_VAR 0 1
26705: PPUSH
26706: CALL_OW 255
26710: PPUSH
26711: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
26715: LD_VAR 0 2
26719: PUSH
26720: LD_VAR 0 4
26724: ARRAY
26725: PPUSH
26726: CALL_OW 141
// end ;
26730: GO 26562
26732: POP
26733: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
26734: LD_VAR 0 1
26738: PPUSH
26739: LD_EXP 116
26743: PUSH
26744: LD_VAR 0 5
26748: ARRAY
26749: PUSH
26750: LD_INT 0
26752: PLUS
26753: PPUSH
26754: CALL_OW 505
// end ;
26758: LD_VAR 0 3
26762: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
26763: LD_INT 0
26765: PPUSH
26766: PPUSH
26767: PPUSH
26768: PPUSH
// if not hack in hackTanks then
26769: LD_VAR 0 1
26773: PUSH
26774: LD_EXP 115
26778: IN
26779: NOT
26780: IFFALSE 26784
// exit ;
26782: GO 27024
// index := GetElementIndex ( hackTanks , hack ) ;
26784: LD_ADDR_VAR 0 4
26788: PUSH
26789: LD_EXP 115
26793: PPUSH
26794: LD_VAR 0 1
26798: PPUSH
26799: CALL 33893 0 2
26803: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
26804: LD_ADDR_VAR 0 3
26808: PUSH
26809: DOUBLE
26810: LD_EXP 116
26814: PUSH
26815: LD_VAR 0 4
26819: ARRAY
26820: INC
26821: ST_TO_ADDR
26822: LD_INT 1
26824: PUSH
26825: FOR_DOWNTO
26826: IFFALSE 26998
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
26828: LD_ADDR_VAR 0 5
26832: PUSH
26833: LD_EXP 116
26837: PUSH
26838: LD_VAR 0 4
26842: ARRAY
26843: PUSH
26844: LD_VAR 0 3
26848: ARRAY
26849: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
26850: LD_VAR 0 5
26854: PUSH
26855: LD_INT 1
26857: ARRAY
26858: PPUSH
26859: CALL_OW 302
26863: NOT
26864: PUSH
26865: LD_VAR 0 5
26869: PUSH
26870: LD_INT 1
26872: ARRAY
26873: PPUSH
26874: CALL_OW 255
26878: PUSH
26879: LD_VAR 0 1
26883: PPUSH
26884: CALL_OW 255
26888: NONEQUAL
26889: OR
26890: IFFALSE 26996
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
26892: LD_VAR 0 5
26896: PUSH
26897: LD_INT 1
26899: ARRAY
26900: PPUSH
26901: CALL_OW 305
26905: PUSH
26906: LD_VAR 0 5
26910: PUSH
26911: LD_INT 1
26913: ARRAY
26914: PPUSH
26915: CALL_OW 255
26919: PUSH
26920: LD_VAR 0 1
26924: PPUSH
26925: CALL_OW 255
26929: EQUAL
26930: AND
26931: IFFALSE 26955
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
26933: LD_VAR 0 5
26937: PUSH
26938: LD_INT 1
26940: ARRAY
26941: PPUSH
26942: LD_VAR 0 5
26946: PUSH
26947: LD_INT 2
26949: ARRAY
26950: PPUSH
26951: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
26955: LD_ADDR_EXP 116
26959: PUSH
26960: LD_EXP 116
26964: PPUSH
26965: LD_VAR 0 4
26969: PPUSH
26970: LD_EXP 116
26974: PUSH
26975: LD_VAR 0 4
26979: ARRAY
26980: PPUSH
26981: LD_VAR 0 3
26985: PPUSH
26986: CALL_OW 3
26990: PPUSH
26991: CALL_OW 1
26995: ST_TO_ADDR
// end ; end ;
26996: GO 26825
26998: POP
26999: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
27000: LD_VAR 0 1
27004: PPUSH
27005: LD_EXP 116
27009: PUSH
27010: LD_VAR 0 4
27014: ARRAY
27015: PUSH
27016: LD_INT 0
27018: PLUS
27019: PPUSH
27020: CALL_OW 505
// end ;
27024: LD_VAR 0 2
27028: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
27029: LD_INT 0
27031: PPUSH
27032: PPUSH
27033: PPUSH
27034: PPUSH
// if not hack in hackTanks then
27035: LD_VAR 0 1
27039: PUSH
27040: LD_EXP 115
27044: IN
27045: NOT
27046: IFFALSE 27050
// exit ;
27048: GO 27135
// index := GetElementIndex ( hackTanks , hack ) ;
27050: LD_ADDR_VAR 0 5
27054: PUSH
27055: LD_EXP 115
27059: PPUSH
27060: LD_VAR 0 1
27064: PPUSH
27065: CALL 33893 0 2
27069: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
27070: LD_ADDR_VAR 0 4
27074: PUSH
27075: DOUBLE
27076: LD_INT 1
27078: DEC
27079: ST_TO_ADDR
27080: LD_EXP 116
27084: PUSH
27085: LD_VAR 0 5
27089: ARRAY
27090: PUSH
27091: FOR_TO
27092: IFFALSE 27133
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
27094: LD_EXP 116
27098: PUSH
27099: LD_VAR 0 5
27103: ARRAY
27104: PUSH
27105: LD_VAR 0 4
27109: ARRAY
27110: PUSH
27111: LD_INT 1
27113: ARRAY
27114: PUSH
27115: LD_VAR 0 2
27119: EQUAL
27120: IFFALSE 27131
// KillUnit ( vehicle ) ;
27122: LD_VAR 0 2
27126: PPUSH
27127: CALL_OW 66
27131: GO 27091
27133: POP
27134: POP
// end ;
27135: LD_VAR 0 3
27139: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
27140: LD_EXP 120
27144: NOT
27145: IFFALSE 27180
27147: GO 27149
27149: DISABLE
// begin initMiner := true ;
27150: LD_ADDR_EXP 120
27154: PUSH
27155: LD_INT 1
27157: ST_TO_ADDR
// minersList := [ ] ;
27158: LD_ADDR_EXP 121
27162: PUSH
27163: EMPTY
27164: ST_TO_ADDR
// minerMinesList := [ ] ;
27165: LD_ADDR_EXP 122
27169: PUSH
27170: EMPTY
27171: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
27172: LD_ADDR_EXP 123
27176: PUSH
27177: LD_INT 5
27179: ST_TO_ADDR
// end ;
27180: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
27181: LD_EXP 120
27185: PUSH
27186: LD_INT 34
27188: PUSH
27189: LD_INT 81
27191: PUSH
27192: EMPTY
27193: LIST
27194: LIST
27195: PPUSH
27196: CALL_OW 69
27200: AND
27201: IFFALSE 27662
27203: GO 27205
27205: DISABLE
27206: LD_INT 0
27208: PPUSH
27209: PPUSH
27210: PPUSH
27211: PPUSH
// begin enable ;
27212: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
27213: LD_ADDR_VAR 0 1
27217: PUSH
27218: LD_INT 34
27220: PUSH
27221: LD_INT 81
27223: PUSH
27224: EMPTY
27225: LIST
27226: LIST
27227: PPUSH
27228: CALL_OW 69
27232: PUSH
27233: FOR_IN
27234: IFFALSE 27306
// begin if not i in minersList then
27236: LD_VAR 0 1
27240: PUSH
27241: LD_EXP 121
27245: IN
27246: NOT
27247: IFFALSE 27304
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
27249: LD_ADDR_EXP 121
27253: PUSH
27254: LD_EXP 121
27258: PPUSH
27259: LD_EXP 121
27263: PUSH
27264: LD_INT 1
27266: PLUS
27267: PPUSH
27268: LD_VAR 0 1
27272: PPUSH
27273: CALL_OW 1
27277: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
27278: LD_ADDR_EXP 122
27282: PUSH
27283: LD_EXP 122
27287: PPUSH
27288: LD_EXP 122
27292: PUSH
27293: LD_INT 1
27295: PLUS
27296: PPUSH
27297: EMPTY
27298: PPUSH
27299: CALL_OW 1
27303: ST_TO_ADDR
// end end ;
27304: GO 27233
27306: POP
27307: POP
// for i := minerMinesList downto 1 do
27308: LD_ADDR_VAR 0 1
27312: PUSH
27313: DOUBLE
27314: LD_EXP 122
27318: INC
27319: ST_TO_ADDR
27320: LD_INT 1
27322: PUSH
27323: FOR_DOWNTO
27324: IFFALSE 27660
// begin if IsLive ( minersList [ i ] ) then
27326: LD_EXP 121
27330: PUSH
27331: LD_VAR 0 1
27335: ARRAY
27336: PPUSH
27337: CALL_OW 300
27341: IFFALSE 27369
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
27343: LD_EXP 121
27347: PUSH
27348: LD_VAR 0 1
27352: ARRAY
27353: PPUSH
27354: LD_EXP 122
27358: PUSH
27359: LD_VAR 0 1
27363: ARRAY
27364: PPUSH
27365: CALL_OW 505
// if not minerMinesList [ i ] then
27369: LD_EXP 122
27373: PUSH
27374: LD_VAR 0 1
27378: ARRAY
27379: NOT
27380: IFFALSE 27384
// continue ;
27382: GO 27323
// for j := minerMinesList [ i ] downto 1 do
27384: LD_ADDR_VAR 0 2
27388: PUSH
27389: DOUBLE
27390: LD_EXP 122
27394: PUSH
27395: LD_VAR 0 1
27399: ARRAY
27400: INC
27401: ST_TO_ADDR
27402: LD_INT 1
27404: PUSH
27405: FOR_DOWNTO
27406: IFFALSE 27656
// begin side := GetSide ( minersList [ i ] ) ;
27408: LD_ADDR_VAR 0 3
27412: PUSH
27413: LD_EXP 121
27417: PUSH
27418: LD_VAR 0 1
27422: ARRAY
27423: PPUSH
27424: CALL_OW 255
27428: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
27429: LD_ADDR_VAR 0 4
27433: PUSH
27434: LD_EXP 122
27438: PUSH
27439: LD_VAR 0 1
27443: ARRAY
27444: PUSH
27445: LD_VAR 0 2
27449: ARRAY
27450: PUSH
27451: LD_INT 1
27453: ARRAY
27454: PPUSH
27455: LD_EXP 122
27459: PUSH
27460: LD_VAR 0 1
27464: ARRAY
27465: PUSH
27466: LD_VAR 0 2
27470: ARRAY
27471: PUSH
27472: LD_INT 2
27474: ARRAY
27475: PPUSH
27476: CALL_OW 428
27480: ST_TO_ADDR
// if not tmp then
27481: LD_VAR 0 4
27485: NOT
27486: IFFALSE 27490
// continue ;
27488: GO 27405
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
27490: LD_VAR 0 4
27494: PUSH
27495: LD_INT 81
27497: PUSH
27498: LD_VAR 0 3
27502: PUSH
27503: EMPTY
27504: LIST
27505: LIST
27506: PPUSH
27507: CALL_OW 69
27511: IN
27512: PUSH
27513: LD_EXP 122
27517: PUSH
27518: LD_VAR 0 1
27522: ARRAY
27523: PUSH
27524: LD_VAR 0 2
27528: ARRAY
27529: PUSH
27530: LD_INT 1
27532: ARRAY
27533: PPUSH
27534: LD_EXP 122
27538: PUSH
27539: LD_VAR 0 1
27543: ARRAY
27544: PUSH
27545: LD_VAR 0 2
27549: ARRAY
27550: PUSH
27551: LD_INT 2
27553: ARRAY
27554: PPUSH
27555: CALL_OW 458
27559: AND
27560: IFFALSE 27654
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
27562: LD_EXP 122
27566: PUSH
27567: LD_VAR 0 1
27571: ARRAY
27572: PUSH
27573: LD_VAR 0 2
27577: ARRAY
27578: PUSH
27579: LD_INT 1
27581: ARRAY
27582: PPUSH
27583: LD_EXP 122
27587: PUSH
27588: LD_VAR 0 1
27592: ARRAY
27593: PUSH
27594: LD_VAR 0 2
27598: ARRAY
27599: PUSH
27600: LD_INT 2
27602: ARRAY
27603: PPUSH
27604: LD_VAR 0 3
27608: PPUSH
27609: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
27613: LD_ADDR_EXP 122
27617: PUSH
27618: LD_EXP 122
27622: PPUSH
27623: LD_VAR 0 1
27627: PPUSH
27628: LD_EXP 122
27632: PUSH
27633: LD_VAR 0 1
27637: ARRAY
27638: PPUSH
27639: LD_VAR 0 2
27643: PPUSH
27644: CALL_OW 3
27648: PPUSH
27649: CALL_OW 1
27653: ST_TO_ADDR
// end ; end ;
27654: GO 27405
27656: POP
27657: POP
// end ;
27658: GO 27323
27660: POP
27661: POP
// end ;
27662: PPOPN 4
27664: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
27665: LD_INT 0
27667: PPUSH
27668: PPUSH
// result := false ;
27669: LD_ADDR_VAR 0 4
27673: PUSH
27674: LD_INT 0
27676: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
27677: LD_VAR 0 1
27681: PPUSH
27682: CALL_OW 264
27686: PUSH
27687: LD_INT 81
27689: EQUAL
27690: NOT
27691: IFFALSE 27695
// exit ;
27693: GO 27935
// index := GetElementIndex ( minersList , unit ) ;
27695: LD_ADDR_VAR 0 5
27699: PUSH
27700: LD_EXP 121
27704: PPUSH
27705: LD_VAR 0 1
27709: PPUSH
27710: CALL 33893 0 2
27714: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
27715: LD_EXP 122
27719: PUSH
27720: LD_VAR 0 5
27724: ARRAY
27725: PUSH
27726: LD_EXP 123
27730: GREATEREQUAL
27731: IFFALSE 27735
// exit ;
27733: GO 27935
// ComMoveXY ( unit , x , y ) ;
27735: LD_VAR 0 1
27739: PPUSH
27740: LD_VAR 0 2
27744: PPUSH
27745: LD_VAR 0 3
27749: PPUSH
27750: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
27754: LD_INT 35
27756: PPUSH
27757: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
27761: LD_VAR 0 1
27765: PPUSH
27766: LD_VAR 0 2
27770: PPUSH
27771: LD_VAR 0 3
27775: PPUSH
27776: CALL 65645 0 3
27780: NOT
27781: PUSH
27782: LD_VAR 0 1
27786: PPUSH
27787: CALL_OW 314
27791: AND
27792: IFFALSE 27796
// exit ;
27794: GO 27935
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
27796: LD_VAR 0 2
27800: PPUSH
27801: LD_VAR 0 3
27805: PPUSH
27806: CALL_OW 428
27810: PUSH
27811: LD_VAR 0 1
27815: EQUAL
27816: PUSH
27817: LD_VAR 0 1
27821: PPUSH
27822: CALL_OW 314
27826: NOT
27827: AND
27828: IFFALSE 27754
// PlaySoundXY ( x , y , PlantMine ) ;
27830: LD_VAR 0 2
27834: PPUSH
27835: LD_VAR 0 3
27839: PPUSH
27840: LD_STRING PlantMine
27842: PPUSH
27843: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
27847: LD_VAR 0 2
27851: PPUSH
27852: LD_VAR 0 3
27856: PPUSH
27857: LD_VAR 0 1
27861: PPUSH
27862: CALL_OW 255
27866: PPUSH
27867: LD_INT 0
27869: PPUSH
27870: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
27874: LD_ADDR_EXP 122
27878: PUSH
27879: LD_EXP 122
27883: PPUSH
27884: LD_VAR 0 5
27888: PUSH
27889: LD_EXP 122
27893: PUSH
27894: LD_VAR 0 5
27898: ARRAY
27899: PUSH
27900: LD_INT 1
27902: PLUS
27903: PUSH
27904: EMPTY
27905: LIST
27906: LIST
27907: PPUSH
27908: LD_VAR 0 2
27912: PUSH
27913: LD_VAR 0 3
27917: PUSH
27918: EMPTY
27919: LIST
27920: LIST
27921: PPUSH
27922: CALL 34108 0 3
27926: ST_TO_ADDR
// result := true ;
27927: LD_ADDR_VAR 0 4
27931: PUSH
27932: LD_INT 1
27934: ST_TO_ADDR
// end ;
27935: LD_VAR 0 4
27939: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
27940: LD_INT 0
27942: PPUSH
27943: PPUSH
27944: PPUSH
// if not unit in minersList then
27945: LD_VAR 0 1
27949: PUSH
27950: LD_EXP 121
27954: IN
27955: NOT
27956: IFFALSE 27960
// exit ;
27958: GO 28352
// index := GetElementIndex ( minersList , unit ) ;
27960: LD_ADDR_VAR 0 6
27964: PUSH
27965: LD_EXP 121
27969: PPUSH
27970: LD_VAR 0 1
27974: PPUSH
27975: CALL 33893 0 2
27979: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
27980: LD_ADDR_VAR 0 5
27984: PUSH
27985: DOUBLE
27986: LD_EXP 122
27990: PUSH
27991: LD_VAR 0 6
27995: ARRAY
27996: INC
27997: ST_TO_ADDR
27998: LD_INT 1
28000: PUSH
28001: FOR_DOWNTO
28002: IFFALSE 28163
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
28004: LD_EXP 122
28008: PUSH
28009: LD_VAR 0 6
28013: ARRAY
28014: PUSH
28015: LD_VAR 0 5
28019: ARRAY
28020: PUSH
28021: LD_INT 1
28023: ARRAY
28024: PUSH
28025: LD_VAR 0 2
28029: EQUAL
28030: PUSH
28031: LD_EXP 122
28035: PUSH
28036: LD_VAR 0 6
28040: ARRAY
28041: PUSH
28042: LD_VAR 0 5
28046: ARRAY
28047: PUSH
28048: LD_INT 2
28050: ARRAY
28051: PUSH
28052: LD_VAR 0 3
28056: EQUAL
28057: AND
28058: IFFALSE 28161
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
28060: LD_EXP 122
28064: PUSH
28065: LD_VAR 0 6
28069: ARRAY
28070: PUSH
28071: LD_VAR 0 5
28075: ARRAY
28076: PUSH
28077: LD_INT 1
28079: ARRAY
28080: PPUSH
28081: LD_EXP 122
28085: PUSH
28086: LD_VAR 0 6
28090: ARRAY
28091: PUSH
28092: LD_VAR 0 5
28096: ARRAY
28097: PUSH
28098: LD_INT 2
28100: ARRAY
28101: PPUSH
28102: LD_VAR 0 1
28106: PPUSH
28107: CALL_OW 255
28111: PPUSH
28112: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
28116: LD_ADDR_EXP 122
28120: PUSH
28121: LD_EXP 122
28125: PPUSH
28126: LD_VAR 0 6
28130: PPUSH
28131: LD_EXP 122
28135: PUSH
28136: LD_VAR 0 6
28140: ARRAY
28141: PPUSH
28142: LD_VAR 0 5
28146: PPUSH
28147: CALL_OW 3
28151: PPUSH
28152: CALL_OW 1
28156: ST_TO_ADDR
// exit ;
28157: POP
28158: POP
28159: GO 28352
// end ; end ;
28161: GO 28001
28163: POP
28164: POP
// for i := minerMinesList [ index ] downto 1 do
28165: LD_ADDR_VAR 0 5
28169: PUSH
28170: DOUBLE
28171: LD_EXP 122
28175: PUSH
28176: LD_VAR 0 6
28180: ARRAY
28181: INC
28182: ST_TO_ADDR
28183: LD_INT 1
28185: PUSH
28186: FOR_DOWNTO
28187: IFFALSE 28350
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
28189: LD_EXP 122
28193: PUSH
28194: LD_VAR 0 6
28198: ARRAY
28199: PUSH
28200: LD_VAR 0 5
28204: ARRAY
28205: PUSH
28206: LD_INT 1
28208: ARRAY
28209: PPUSH
28210: LD_EXP 122
28214: PUSH
28215: LD_VAR 0 6
28219: ARRAY
28220: PUSH
28221: LD_VAR 0 5
28225: ARRAY
28226: PUSH
28227: LD_INT 2
28229: ARRAY
28230: PPUSH
28231: LD_VAR 0 2
28235: PPUSH
28236: LD_VAR 0 3
28240: PPUSH
28241: CALL_OW 298
28245: PUSH
28246: LD_INT 6
28248: LESS
28249: IFFALSE 28348
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
28251: LD_EXP 122
28255: PUSH
28256: LD_VAR 0 6
28260: ARRAY
28261: PUSH
28262: LD_VAR 0 5
28266: ARRAY
28267: PUSH
28268: LD_INT 1
28270: ARRAY
28271: PPUSH
28272: LD_EXP 122
28276: PUSH
28277: LD_VAR 0 6
28281: ARRAY
28282: PUSH
28283: LD_VAR 0 5
28287: ARRAY
28288: PUSH
28289: LD_INT 2
28291: ARRAY
28292: PPUSH
28293: LD_VAR 0 1
28297: PPUSH
28298: CALL_OW 255
28302: PPUSH
28303: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
28307: LD_ADDR_EXP 122
28311: PUSH
28312: LD_EXP 122
28316: PPUSH
28317: LD_VAR 0 6
28321: PPUSH
28322: LD_EXP 122
28326: PUSH
28327: LD_VAR 0 6
28331: ARRAY
28332: PPUSH
28333: LD_VAR 0 5
28337: PPUSH
28338: CALL_OW 3
28342: PPUSH
28343: CALL_OW 1
28347: ST_TO_ADDR
// end ; end ;
28348: GO 28186
28350: POP
28351: POP
// end ;
28352: LD_VAR 0 4
28356: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
28357: LD_INT 0
28359: PPUSH
28360: PPUSH
28361: PPUSH
28362: PPUSH
28363: PPUSH
28364: PPUSH
28365: PPUSH
28366: PPUSH
28367: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
28368: LD_VAR 0 1
28372: PPUSH
28373: CALL_OW 264
28377: PUSH
28378: LD_INT 81
28380: EQUAL
28381: NOT
28382: PUSH
28383: LD_VAR 0 1
28387: PUSH
28388: LD_EXP 121
28392: IN
28393: NOT
28394: OR
28395: IFFALSE 28399
// exit ;
28397: GO 28721
// index := GetElementIndex ( minersList , unit ) ;
28399: LD_ADDR_VAR 0 6
28403: PUSH
28404: LD_EXP 121
28408: PPUSH
28409: LD_VAR 0 1
28413: PPUSH
28414: CALL 33893 0 2
28418: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
28419: LD_ADDR_VAR 0 8
28423: PUSH
28424: LD_EXP 123
28428: PUSH
28429: LD_EXP 122
28433: PUSH
28434: LD_VAR 0 6
28438: ARRAY
28439: MINUS
28440: ST_TO_ADDR
// if not minesFreeAmount then
28441: LD_VAR 0 8
28445: NOT
28446: IFFALSE 28450
// exit ;
28448: GO 28721
// tmp := [ ] ;
28450: LD_ADDR_VAR 0 7
28454: PUSH
28455: EMPTY
28456: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
28457: LD_ADDR_VAR 0 5
28461: PUSH
28462: DOUBLE
28463: LD_INT 1
28465: DEC
28466: ST_TO_ADDR
28467: LD_VAR 0 8
28471: PUSH
28472: FOR_TO
28473: IFFALSE 28668
// begin _d := rand ( 0 , 5 ) ;
28475: LD_ADDR_VAR 0 11
28479: PUSH
28480: LD_INT 0
28482: PPUSH
28483: LD_INT 5
28485: PPUSH
28486: CALL_OW 12
28490: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
28491: LD_ADDR_VAR 0 12
28495: PUSH
28496: LD_INT 2
28498: PPUSH
28499: LD_INT 6
28501: PPUSH
28502: CALL_OW 12
28506: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
28507: LD_ADDR_VAR 0 9
28511: PUSH
28512: LD_VAR 0 2
28516: PPUSH
28517: LD_VAR 0 11
28521: PPUSH
28522: LD_VAR 0 12
28526: PPUSH
28527: CALL_OW 272
28531: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
28532: LD_ADDR_VAR 0 10
28536: PUSH
28537: LD_VAR 0 3
28541: PPUSH
28542: LD_VAR 0 11
28546: PPUSH
28547: LD_VAR 0 12
28551: PPUSH
28552: CALL_OW 273
28556: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
28557: LD_VAR 0 9
28561: PPUSH
28562: LD_VAR 0 10
28566: PPUSH
28567: CALL_OW 488
28571: PUSH
28572: LD_VAR 0 9
28576: PUSH
28577: LD_VAR 0 10
28581: PUSH
28582: EMPTY
28583: LIST
28584: LIST
28585: PUSH
28586: LD_VAR 0 7
28590: IN
28591: NOT
28592: AND
28593: PUSH
28594: LD_VAR 0 9
28598: PPUSH
28599: LD_VAR 0 10
28603: PPUSH
28604: CALL_OW 458
28608: NOT
28609: AND
28610: IFFALSE 28652
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
28612: LD_ADDR_VAR 0 7
28616: PUSH
28617: LD_VAR 0 7
28621: PPUSH
28622: LD_VAR 0 7
28626: PUSH
28627: LD_INT 1
28629: PLUS
28630: PPUSH
28631: LD_VAR 0 9
28635: PUSH
28636: LD_VAR 0 10
28640: PUSH
28641: EMPTY
28642: LIST
28643: LIST
28644: PPUSH
28645: CALL_OW 1
28649: ST_TO_ADDR
28650: GO 28666
// i := i - 1 ;
28652: LD_ADDR_VAR 0 5
28656: PUSH
28657: LD_VAR 0 5
28661: PUSH
28662: LD_INT 1
28664: MINUS
28665: ST_TO_ADDR
// end ;
28666: GO 28472
28668: POP
28669: POP
// for i in tmp do
28670: LD_ADDR_VAR 0 5
28674: PUSH
28675: LD_VAR 0 7
28679: PUSH
28680: FOR_IN
28681: IFFALSE 28719
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
28683: LD_VAR 0 1
28687: PPUSH
28688: LD_VAR 0 5
28692: PUSH
28693: LD_INT 1
28695: ARRAY
28696: PPUSH
28697: LD_VAR 0 5
28701: PUSH
28702: LD_INT 2
28704: ARRAY
28705: PPUSH
28706: CALL 27665 0 3
28710: NOT
28711: IFFALSE 28717
// exit ;
28713: POP
28714: POP
28715: GO 28721
28717: GO 28680
28719: POP
28720: POP
// end ;
28721: LD_VAR 0 4
28725: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
28726: LD_INT 0
28728: PPUSH
28729: PPUSH
28730: PPUSH
28731: PPUSH
28732: PPUSH
28733: PPUSH
28734: PPUSH
// if not GetClass ( unit ) = class_sniper then
28735: LD_VAR 0 1
28739: PPUSH
28740: CALL_OW 257
28744: PUSH
28745: LD_INT 5
28747: EQUAL
28748: NOT
28749: IFFALSE 28753
// exit ;
28751: GO 29141
// dist := 8 ;
28753: LD_ADDR_VAR 0 5
28757: PUSH
28758: LD_INT 8
28760: ST_TO_ADDR
// viewRange := 12 ;
28761: LD_ADDR_VAR 0 7
28765: PUSH
28766: LD_INT 12
28768: ST_TO_ADDR
// side := GetSide ( unit ) ;
28769: LD_ADDR_VAR 0 6
28773: PUSH
28774: LD_VAR 0 1
28778: PPUSH
28779: CALL_OW 255
28783: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
28784: LD_INT 61
28786: PPUSH
28787: LD_VAR 0 6
28791: PPUSH
28792: CALL_OW 321
28796: PUSH
28797: LD_INT 2
28799: EQUAL
28800: IFFALSE 28810
// viewRange := 16 ;
28802: LD_ADDR_VAR 0 7
28806: PUSH
28807: LD_INT 16
28809: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
28810: LD_VAR 0 1
28814: PPUSH
28815: LD_VAR 0 2
28819: PPUSH
28820: LD_VAR 0 3
28824: PPUSH
28825: CALL_OW 297
28829: PUSH
28830: LD_VAR 0 5
28834: GREATER
28835: IFFALSE 28914
// begin ComMoveXY ( unit , x , y ) ;
28837: LD_VAR 0 1
28841: PPUSH
28842: LD_VAR 0 2
28846: PPUSH
28847: LD_VAR 0 3
28851: PPUSH
28852: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
28856: LD_INT 35
28858: PPUSH
28859: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
28863: LD_VAR 0 1
28867: PPUSH
28868: LD_VAR 0 2
28872: PPUSH
28873: LD_VAR 0 3
28877: PPUSH
28878: CALL 65645 0 3
28882: NOT
28883: IFFALSE 28887
// exit ;
28885: GO 29141
// until GetDistUnitXY ( unit , x , y ) < dist ;
28887: LD_VAR 0 1
28891: PPUSH
28892: LD_VAR 0 2
28896: PPUSH
28897: LD_VAR 0 3
28901: PPUSH
28902: CALL_OW 297
28906: PUSH
28907: LD_VAR 0 5
28911: LESS
28912: IFFALSE 28856
// end ; ComTurnXY ( unit , x , y ) ;
28914: LD_VAR 0 1
28918: PPUSH
28919: LD_VAR 0 2
28923: PPUSH
28924: LD_VAR 0 3
28928: PPUSH
28929: CALL_OW 118
// wait ( 5 ) ;
28933: LD_INT 5
28935: PPUSH
28936: CALL_OW 67
// _d := GetDir ( unit ) ;
28940: LD_ADDR_VAR 0 10
28944: PUSH
28945: LD_VAR 0 1
28949: PPUSH
28950: CALL_OW 254
28954: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
28955: LD_ADDR_VAR 0 8
28959: PUSH
28960: LD_VAR 0 1
28964: PPUSH
28965: CALL_OW 250
28969: PPUSH
28970: LD_VAR 0 10
28974: PPUSH
28975: LD_VAR 0 5
28979: PPUSH
28980: CALL_OW 272
28984: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
28985: LD_ADDR_VAR 0 9
28989: PUSH
28990: LD_VAR 0 1
28994: PPUSH
28995: CALL_OW 251
28999: PPUSH
29000: LD_VAR 0 10
29004: PPUSH
29005: LD_VAR 0 5
29009: PPUSH
29010: CALL_OW 273
29014: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29015: LD_VAR 0 8
29019: PPUSH
29020: LD_VAR 0 9
29024: PPUSH
29025: CALL_OW 488
29029: NOT
29030: IFFALSE 29034
// exit ;
29032: GO 29141
// ComAnimCustom ( unit , 1 ) ;
29034: LD_VAR 0 1
29038: PPUSH
29039: LD_INT 1
29041: PPUSH
29042: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
29046: LD_VAR 0 8
29050: PPUSH
29051: LD_VAR 0 9
29055: PPUSH
29056: LD_VAR 0 6
29060: PPUSH
29061: LD_VAR 0 7
29065: PPUSH
29066: CALL_OW 330
// repeat wait ( 1 ) ;
29070: LD_INT 1
29072: PPUSH
29073: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
29077: LD_VAR 0 1
29081: PPUSH
29082: CALL_OW 316
29086: PUSH
29087: LD_VAR 0 1
29091: PPUSH
29092: CALL_OW 314
29096: OR
29097: PUSH
29098: LD_VAR 0 1
29102: PPUSH
29103: CALL_OW 302
29107: NOT
29108: OR
29109: PUSH
29110: LD_VAR 0 1
29114: PPUSH
29115: CALL_OW 301
29119: OR
29120: IFFALSE 29070
// RemoveSeeing ( _x , _y , side ) ;
29122: LD_VAR 0 8
29126: PPUSH
29127: LD_VAR 0 9
29131: PPUSH
29132: LD_VAR 0 6
29136: PPUSH
29137: CALL_OW 331
// end ; end_of_file
29141: LD_VAR 0 4
29145: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
29146: LD_INT 0
29148: PPUSH
29149: PPUSH
// if exist_mode then
29150: LD_VAR 0 2
29154: IFFALSE 29179
// unit := CreateCharacter ( prefix & ident ) else
29156: LD_ADDR_VAR 0 5
29160: PUSH
29161: LD_VAR 0 3
29165: PUSH
29166: LD_VAR 0 1
29170: STR
29171: PPUSH
29172: CALL_OW 34
29176: ST_TO_ADDR
29177: GO 29194
// unit := NewCharacter ( ident ) ;
29179: LD_ADDR_VAR 0 5
29183: PUSH
29184: LD_VAR 0 1
29188: PPUSH
29189: CALL_OW 25
29193: ST_TO_ADDR
// result := unit ;
29194: LD_ADDR_VAR 0 4
29198: PUSH
29199: LD_VAR 0 5
29203: ST_TO_ADDR
// end ;
29204: LD_VAR 0 4
29208: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
29209: LD_INT 0
29211: PPUSH
29212: PPUSH
// if not side or not nation then
29213: LD_VAR 0 1
29217: NOT
29218: PUSH
29219: LD_VAR 0 2
29223: NOT
29224: OR
29225: IFFALSE 29229
// exit ;
29227: GO 29997
// case nation of nation_american :
29229: LD_VAR 0 2
29233: PUSH
29234: LD_INT 1
29236: DOUBLE
29237: EQUAL
29238: IFTRUE 29242
29240: GO 29456
29242: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
29243: LD_ADDR_VAR 0 4
29247: PUSH
29248: LD_INT 35
29250: PUSH
29251: LD_INT 45
29253: PUSH
29254: LD_INT 46
29256: PUSH
29257: LD_INT 47
29259: PUSH
29260: LD_INT 82
29262: PUSH
29263: LD_INT 83
29265: PUSH
29266: LD_INT 84
29268: PUSH
29269: LD_INT 85
29271: PUSH
29272: LD_INT 86
29274: PUSH
29275: LD_INT 1
29277: PUSH
29278: LD_INT 2
29280: PUSH
29281: LD_INT 6
29283: PUSH
29284: LD_INT 15
29286: PUSH
29287: LD_INT 16
29289: PUSH
29290: LD_INT 7
29292: PUSH
29293: LD_INT 12
29295: PUSH
29296: LD_INT 13
29298: PUSH
29299: LD_INT 10
29301: PUSH
29302: LD_INT 14
29304: PUSH
29305: LD_INT 20
29307: PUSH
29308: LD_INT 21
29310: PUSH
29311: LD_INT 22
29313: PUSH
29314: LD_INT 25
29316: PUSH
29317: LD_INT 32
29319: PUSH
29320: LD_INT 27
29322: PUSH
29323: LD_INT 36
29325: PUSH
29326: LD_INT 69
29328: PUSH
29329: LD_INT 39
29331: PUSH
29332: LD_INT 34
29334: PUSH
29335: LD_INT 40
29337: PUSH
29338: LD_INT 48
29340: PUSH
29341: LD_INT 49
29343: PUSH
29344: LD_INT 50
29346: PUSH
29347: LD_INT 51
29349: PUSH
29350: LD_INT 52
29352: PUSH
29353: LD_INT 53
29355: PUSH
29356: LD_INT 54
29358: PUSH
29359: LD_INT 55
29361: PUSH
29362: LD_INT 56
29364: PUSH
29365: LD_INT 57
29367: PUSH
29368: LD_INT 58
29370: PUSH
29371: LD_INT 59
29373: PUSH
29374: LD_INT 60
29376: PUSH
29377: LD_INT 61
29379: PUSH
29380: LD_INT 62
29382: PUSH
29383: LD_INT 80
29385: PUSH
29386: LD_INT 82
29388: PUSH
29389: LD_INT 83
29391: PUSH
29392: LD_INT 84
29394: PUSH
29395: LD_INT 85
29397: PUSH
29398: LD_INT 86
29400: PUSH
29401: EMPTY
29402: LIST
29403: LIST
29404: LIST
29405: LIST
29406: LIST
29407: LIST
29408: LIST
29409: LIST
29410: LIST
29411: LIST
29412: LIST
29413: LIST
29414: LIST
29415: LIST
29416: LIST
29417: LIST
29418: LIST
29419: LIST
29420: LIST
29421: LIST
29422: LIST
29423: LIST
29424: LIST
29425: LIST
29426: LIST
29427: LIST
29428: LIST
29429: LIST
29430: LIST
29431: LIST
29432: LIST
29433: LIST
29434: LIST
29435: LIST
29436: LIST
29437: LIST
29438: LIST
29439: LIST
29440: LIST
29441: LIST
29442: LIST
29443: LIST
29444: LIST
29445: LIST
29446: LIST
29447: LIST
29448: LIST
29449: LIST
29450: LIST
29451: LIST
29452: LIST
29453: ST_TO_ADDR
29454: GO 29921
29456: LD_INT 2
29458: DOUBLE
29459: EQUAL
29460: IFTRUE 29464
29462: GO 29690
29464: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
29465: LD_ADDR_VAR 0 4
29469: PUSH
29470: LD_INT 35
29472: PUSH
29473: LD_INT 45
29475: PUSH
29476: LD_INT 46
29478: PUSH
29479: LD_INT 47
29481: PUSH
29482: LD_INT 82
29484: PUSH
29485: LD_INT 83
29487: PUSH
29488: LD_INT 84
29490: PUSH
29491: LD_INT 85
29493: PUSH
29494: LD_INT 87
29496: PUSH
29497: LD_INT 70
29499: PUSH
29500: LD_INT 1
29502: PUSH
29503: LD_INT 11
29505: PUSH
29506: LD_INT 3
29508: PUSH
29509: LD_INT 4
29511: PUSH
29512: LD_INT 5
29514: PUSH
29515: LD_INT 6
29517: PUSH
29518: LD_INT 15
29520: PUSH
29521: LD_INT 18
29523: PUSH
29524: LD_INT 7
29526: PUSH
29527: LD_INT 17
29529: PUSH
29530: LD_INT 8
29532: PUSH
29533: LD_INT 20
29535: PUSH
29536: LD_INT 21
29538: PUSH
29539: LD_INT 22
29541: PUSH
29542: LD_INT 72
29544: PUSH
29545: LD_INT 26
29547: PUSH
29548: LD_INT 69
29550: PUSH
29551: LD_INT 39
29553: PUSH
29554: LD_INT 40
29556: PUSH
29557: LD_INT 41
29559: PUSH
29560: LD_INT 42
29562: PUSH
29563: LD_INT 43
29565: PUSH
29566: LD_INT 48
29568: PUSH
29569: LD_INT 49
29571: PUSH
29572: LD_INT 50
29574: PUSH
29575: LD_INT 51
29577: PUSH
29578: LD_INT 52
29580: PUSH
29581: LD_INT 53
29583: PUSH
29584: LD_INT 54
29586: PUSH
29587: LD_INT 55
29589: PUSH
29590: LD_INT 56
29592: PUSH
29593: LD_INT 60
29595: PUSH
29596: LD_INT 61
29598: PUSH
29599: LD_INT 62
29601: PUSH
29602: LD_INT 66
29604: PUSH
29605: LD_INT 67
29607: PUSH
29608: LD_INT 68
29610: PUSH
29611: LD_INT 81
29613: PUSH
29614: LD_INT 82
29616: PUSH
29617: LD_INT 83
29619: PUSH
29620: LD_INT 84
29622: PUSH
29623: LD_INT 85
29625: PUSH
29626: LD_INT 87
29628: PUSH
29629: LD_INT 88
29631: PUSH
29632: EMPTY
29633: LIST
29634: LIST
29635: LIST
29636: LIST
29637: LIST
29638: LIST
29639: LIST
29640: LIST
29641: LIST
29642: LIST
29643: LIST
29644: LIST
29645: LIST
29646: LIST
29647: LIST
29648: LIST
29649: LIST
29650: LIST
29651: LIST
29652: LIST
29653: LIST
29654: LIST
29655: LIST
29656: LIST
29657: LIST
29658: LIST
29659: LIST
29660: LIST
29661: LIST
29662: LIST
29663: LIST
29664: LIST
29665: LIST
29666: LIST
29667: LIST
29668: LIST
29669: LIST
29670: LIST
29671: LIST
29672: LIST
29673: LIST
29674: LIST
29675: LIST
29676: LIST
29677: LIST
29678: LIST
29679: LIST
29680: LIST
29681: LIST
29682: LIST
29683: LIST
29684: LIST
29685: LIST
29686: LIST
29687: ST_TO_ADDR
29688: GO 29921
29690: LD_INT 3
29692: DOUBLE
29693: EQUAL
29694: IFTRUE 29698
29696: GO 29920
29698: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
29699: LD_ADDR_VAR 0 4
29703: PUSH
29704: LD_INT 46
29706: PUSH
29707: LD_INT 47
29709: PUSH
29710: LD_INT 1
29712: PUSH
29713: LD_INT 2
29715: PUSH
29716: LD_INT 82
29718: PUSH
29719: LD_INT 83
29721: PUSH
29722: LD_INT 84
29724: PUSH
29725: LD_INT 85
29727: PUSH
29728: LD_INT 86
29730: PUSH
29731: LD_INT 11
29733: PUSH
29734: LD_INT 9
29736: PUSH
29737: LD_INT 20
29739: PUSH
29740: LD_INT 19
29742: PUSH
29743: LD_INT 21
29745: PUSH
29746: LD_INT 24
29748: PUSH
29749: LD_INT 22
29751: PUSH
29752: LD_INT 25
29754: PUSH
29755: LD_INT 28
29757: PUSH
29758: LD_INT 29
29760: PUSH
29761: LD_INT 30
29763: PUSH
29764: LD_INT 31
29766: PUSH
29767: LD_INT 37
29769: PUSH
29770: LD_INT 38
29772: PUSH
29773: LD_INT 32
29775: PUSH
29776: LD_INT 27
29778: PUSH
29779: LD_INT 33
29781: PUSH
29782: LD_INT 69
29784: PUSH
29785: LD_INT 39
29787: PUSH
29788: LD_INT 34
29790: PUSH
29791: LD_INT 40
29793: PUSH
29794: LD_INT 71
29796: PUSH
29797: LD_INT 23
29799: PUSH
29800: LD_INT 44
29802: PUSH
29803: LD_INT 48
29805: PUSH
29806: LD_INT 49
29808: PUSH
29809: LD_INT 50
29811: PUSH
29812: LD_INT 51
29814: PUSH
29815: LD_INT 52
29817: PUSH
29818: LD_INT 53
29820: PUSH
29821: LD_INT 54
29823: PUSH
29824: LD_INT 55
29826: PUSH
29827: LD_INT 56
29829: PUSH
29830: LD_INT 57
29832: PUSH
29833: LD_INT 58
29835: PUSH
29836: LD_INT 59
29838: PUSH
29839: LD_INT 63
29841: PUSH
29842: LD_INT 64
29844: PUSH
29845: LD_INT 65
29847: PUSH
29848: LD_INT 82
29850: PUSH
29851: LD_INT 83
29853: PUSH
29854: LD_INT 84
29856: PUSH
29857: LD_INT 85
29859: PUSH
29860: LD_INT 86
29862: PUSH
29863: EMPTY
29864: LIST
29865: LIST
29866: LIST
29867: LIST
29868: LIST
29869: LIST
29870: LIST
29871: LIST
29872: LIST
29873: LIST
29874: LIST
29875: LIST
29876: LIST
29877: LIST
29878: LIST
29879: LIST
29880: LIST
29881: LIST
29882: LIST
29883: LIST
29884: LIST
29885: LIST
29886: LIST
29887: LIST
29888: LIST
29889: LIST
29890: LIST
29891: LIST
29892: LIST
29893: LIST
29894: LIST
29895: LIST
29896: LIST
29897: LIST
29898: LIST
29899: LIST
29900: LIST
29901: LIST
29902: LIST
29903: LIST
29904: LIST
29905: LIST
29906: LIST
29907: LIST
29908: LIST
29909: LIST
29910: LIST
29911: LIST
29912: LIST
29913: LIST
29914: LIST
29915: LIST
29916: LIST
29917: ST_TO_ADDR
29918: GO 29921
29920: POP
// if state > - 1 and state < 3 then
29921: LD_VAR 0 3
29925: PUSH
29926: LD_INT 1
29928: NEG
29929: GREATER
29930: PUSH
29931: LD_VAR 0 3
29935: PUSH
29936: LD_INT 3
29938: LESS
29939: AND
29940: IFFALSE 29997
// for i in result do
29942: LD_ADDR_VAR 0 5
29946: PUSH
29947: LD_VAR 0 4
29951: PUSH
29952: FOR_IN
29953: IFFALSE 29995
// if GetTech ( i , side ) <> state then
29955: LD_VAR 0 5
29959: PPUSH
29960: LD_VAR 0 1
29964: PPUSH
29965: CALL_OW 321
29969: PUSH
29970: LD_VAR 0 3
29974: NONEQUAL
29975: IFFALSE 29993
// result := result diff i ;
29977: LD_ADDR_VAR 0 4
29981: PUSH
29982: LD_VAR 0 4
29986: PUSH
29987: LD_VAR 0 5
29991: DIFF
29992: ST_TO_ADDR
29993: GO 29952
29995: POP
29996: POP
// end ;
29997: LD_VAR 0 4
30001: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
30002: LD_INT 0
30004: PPUSH
30005: PPUSH
30006: PPUSH
// result := true ;
30007: LD_ADDR_VAR 0 3
30011: PUSH
30012: LD_INT 1
30014: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
30015: LD_ADDR_VAR 0 5
30019: PUSH
30020: LD_VAR 0 2
30024: PPUSH
30025: CALL_OW 480
30029: ST_TO_ADDR
// if not tmp then
30030: LD_VAR 0 5
30034: NOT
30035: IFFALSE 30039
// exit ;
30037: GO 30088
// for i in tmp do
30039: LD_ADDR_VAR 0 4
30043: PUSH
30044: LD_VAR 0 5
30048: PUSH
30049: FOR_IN
30050: IFFALSE 30086
// if GetTech ( i , side ) <> state_researched then
30052: LD_VAR 0 4
30056: PPUSH
30057: LD_VAR 0 1
30061: PPUSH
30062: CALL_OW 321
30066: PUSH
30067: LD_INT 2
30069: NONEQUAL
30070: IFFALSE 30084
// begin result := false ;
30072: LD_ADDR_VAR 0 3
30076: PUSH
30077: LD_INT 0
30079: ST_TO_ADDR
// exit ;
30080: POP
30081: POP
30082: GO 30088
// end ;
30084: GO 30049
30086: POP
30087: POP
// end ;
30088: LD_VAR 0 3
30092: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
30093: LD_INT 0
30095: PPUSH
30096: PPUSH
30097: PPUSH
30098: PPUSH
30099: PPUSH
30100: PPUSH
30101: PPUSH
30102: PPUSH
30103: PPUSH
30104: PPUSH
30105: PPUSH
30106: PPUSH
30107: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
30108: LD_VAR 0 1
30112: NOT
30113: PUSH
30114: LD_VAR 0 1
30118: PPUSH
30119: CALL_OW 257
30123: PUSH
30124: LD_INT 9
30126: NONEQUAL
30127: OR
30128: IFFALSE 30132
// exit ;
30130: GO 30705
// side := GetSide ( unit ) ;
30132: LD_ADDR_VAR 0 9
30136: PUSH
30137: LD_VAR 0 1
30141: PPUSH
30142: CALL_OW 255
30146: ST_TO_ADDR
// tech_space := tech_spacanom ;
30147: LD_ADDR_VAR 0 12
30151: PUSH
30152: LD_INT 29
30154: ST_TO_ADDR
// tech_time := tech_taurad ;
30155: LD_ADDR_VAR 0 13
30159: PUSH
30160: LD_INT 28
30162: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
30163: LD_ADDR_VAR 0 11
30167: PUSH
30168: LD_VAR 0 1
30172: PPUSH
30173: CALL_OW 310
30177: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
30178: LD_VAR 0 11
30182: PPUSH
30183: CALL_OW 247
30187: PUSH
30188: LD_INT 2
30190: EQUAL
30191: IFFALSE 30195
// exit ;
30193: GO 30705
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30195: LD_ADDR_VAR 0 8
30199: PUSH
30200: LD_INT 81
30202: PUSH
30203: LD_VAR 0 9
30207: PUSH
30208: EMPTY
30209: LIST
30210: LIST
30211: PUSH
30212: LD_INT 3
30214: PUSH
30215: LD_INT 21
30217: PUSH
30218: LD_INT 3
30220: PUSH
30221: EMPTY
30222: LIST
30223: LIST
30224: PUSH
30225: EMPTY
30226: LIST
30227: LIST
30228: PUSH
30229: EMPTY
30230: LIST
30231: LIST
30232: PPUSH
30233: CALL_OW 69
30237: ST_TO_ADDR
// if not tmp then
30238: LD_VAR 0 8
30242: NOT
30243: IFFALSE 30247
// exit ;
30245: GO 30705
// if in_unit then
30247: LD_VAR 0 11
30251: IFFALSE 30275
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
30253: LD_ADDR_VAR 0 10
30257: PUSH
30258: LD_VAR 0 8
30262: PPUSH
30263: LD_VAR 0 11
30267: PPUSH
30268: CALL_OW 74
30272: ST_TO_ADDR
30273: GO 30295
// enemy := NearestUnitToUnit ( tmp , unit ) ;
30275: LD_ADDR_VAR 0 10
30279: PUSH
30280: LD_VAR 0 8
30284: PPUSH
30285: LD_VAR 0 1
30289: PPUSH
30290: CALL_OW 74
30294: ST_TO_ADDR
// if not enemy then
30295: LD_VAR 0 10
30299: NOT
30300: IFFALSE 30304
// exit ;
30302: GO 30705
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
30304: LD_VAR 0 11
30308: PUSH
30309: LD_VAR 0 11
30313: PPUSH
30314: LD_VAR 0 10
30318: PPUSH
30319: CALL_OW 296
30323: PUSH
30324: LD_INT 13
30326: GREATER
30327: AND
30328: PUSH
30329: LD_VAR 0 1
30333: PPUSH
30334: LD_VAR 0 10
30338: PPUSH
30339: CALL_OW 296
30343: PUSH
30344: LD_INT 12
30346: GREATER
30347: OR
30348: IFFALSE 30352
// exit ;
30350: GO 30705
// missile := [ 1 ] ;
30352: LD_ADDR_VAR 0 14
30356: PUSH
30357: LD_INT 1
30359: PUSH
30360: EMPTY
30361: LIST
30362: ST_TO_ADDR
// if Researched ( side , tech_space ) then
30363: LD_VAR 0 9
30367: PPUSH
30368: LD_VAR 0 12
30372: PPUSH
30373: CALL_OW 325
30377: IFFALSE 30406
// missile := Replace ( missile , missile + 1 , 2 ) ;
30379: LD_ADDR_VAR 0 14
30383: PUSH
30384: LD_VAR 0 14
30388: PPUSH
30389: LD_VAR 0 14
30393: PUSH
30394: LD_INT 1
30396: PLUS
30397: PPUSH
30398: LD_INT 2
30400: PPUSH
30401: CALL_OW 1
30405: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
30406: LD_VAR 0 9
30410: PPUSH
30411: LD_VAR 0 13
30415: PPUSH
30416: CALL_OW 325
30420: PUSH
30421: LD_VAR 0 10
30425: PPUSH
30426: CALL_OW 255
30430: PPUSH
30431: LD_VAR 0 13
30435: PPUSH
30436: CALL_OW 325
30440: NOT
30441: AND
30442: IFFALSE 30471
// missile := Replace ( missile , missile + 1 , 3 ) ;
30444: LD_ADDR_VAR 0 14
30448: PUSH
30449: LD_VAR 0 14
30453: PPUSH
30454: LD_VAR 0 14
30458: PUSH
30459: LD_INT 1
30461: PLUS
30462: PPUSH
30463: LD_INT 3
30465: PPUSH
30466: CALL_OW 1
30470: ST_TO_ADDR
// if missile < 2 then
30471: LD_VAR 0 14
30475: PUSH
30476: LD_INT 2
30478: LESS
30479: IFFALSE 30483
// exit ;
30481: GO 30705
// x := GetX ( enemy ) ;
30483: LD_ADDR_VAR 0 4
30487: PUSH
30488: LD_VAR 0 10
30492: PPUSH
30493: CALL_OW 250
30497: ST_TO_ADDR
// y := GetY ( enemy ) ;
30498: LD_ADDR_VAR 0 5
30502: PUSH
30503: LD_VAR 0 10
30507: PPUSH
30508: CALL_OW 251
30512: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
30513: LD_ADDR_VAR 0 6
30517: PUSH
30518: LD_VAR 0 4
30522: PUSH
30523: LD_INT 1
30525: NEG
30526: PPUSH
30527: LD_INT 1
30529: PPUSH
30530: CALL_OW 12
30534: PLUS
30535: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
30536: LD_ADDR_VAR 0 7
30540: PUSH
30541: LD_VAR 0 5
30545: PUSH
30546: LD_INT 1
30548: NEG
30549: PPUSH
30550: LD_INT 1
30552: PPUSH
30553: CALL_OW 12
30557: PLUS
30558: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30559: LD_VAR 0 6
30563: PPUSH
30564: LD_VAR 0 7
30568: PPUSH
30569: CALL_OW 488
30573: NOT
30574: IFFALSE 30596
// begin _x := x ;
30576: LD_ADDR_VAR 0 6
30580: PUSH
30581: LD_VAR 0 4
30585: ST_TO_ADDR
// _y := y ;
30586: LD_ADDR_VAR 0 7
30590: PUSH
30591: LD_VAR 0 5
30595: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
30596: LD_ADDR_VAR 0 3
30600: PUSH
30601: LD_INT 1
30603: PPUSH
30604: LD_VAR 0 14
30608: PPUSH
30609: CALL_OW 12
30613: ST_TO_ADDR
// case i of 1 :
30614: LD_VAR 0 3
30618: PUSH
30619: LD_INT 1
30621: DOUBLE
30622: EQUAL
30623: IFTRUE 30627
30625: GO 30644
30627: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
30628: LD_VAR 0 1
30632: PPUSH
30633: LD_VAR 0 10
30637: PPUSH
30638: CALL_OW 115
30642: GO 30705
30644: LD_INT 2
30646: DOUBLE
30647: EQUAL
30648: IFTRUE 30652
30650: GO 30674
30652: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
30653: LD_VAR 0 1
30657: PPUSH
30658: LD_VAR 0 6
30662: PPUSH
30663: LD_VAR 0 7
30667: PPUSH
30668: CALL_OW 153
30672: GO 30705
30674: LD_INT 3
30676: DOUBLE
30677: EQUAL
30678: IFTRUE 30682
30680: GO 30704
30682: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
30683: LD_VAR 0 1
30687: PPUSH
30688: LD_VAR 0 6
30692: PPUSH
30693: LD_VAR 0 7
30697: PPUSH
30698: CALL_OW 154
30702: GO 30705
30704: POP
// end ;
30705: LD_VAR 0 2
30709: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
30710: LD_INT 0
30712: PPUSH
30713: PPUSH
30714: PPUSH
30715: PPUSH
30716: PPUSH
30717: PPUSH
// if not unit or not building then
30718: LD_VAR 0 1
30722: NOT
30723: PUSH
30724: LD_VAR 0 2
30728: NOT
30729: OR
30730: IFFALSE 30734
// exit ;
30732: GO 30892
// x := GetX ( building ) ;
30734: LD_ADDR_VAR 0 5
30738: PUSH
30739: LD_VAR 0 2
30743: PPUSH
30744: CALL_OW 250
30748: ST_TO_ADDR
// y := GetY ( building ) ;
30749: LD_ADDR_VAR 0 6
30753: PUSH
30754: LD_VAR 0 2
30758: PPUSH
30759: CALL_OW 251
30763: ST_TO_ADDR
// for i = 0 to 5 do
30764: LD_ADDR_VAR 0 4
30768: PUSH
30769: DOUBLE
30770: LD_INT 0
30772: DEC
30773: ST_TO_ADDR
30774: LD_INT 5
30776: PUSH
30777: FOR_TO
30778: IFFALSE 30890
// begin _x := ShiftX ( x , i , 3 ) ;
30780: LD_ADDR_VAR 0 7
30784: PUSH
30785: LD_VAR 0 5
30789: PPUSH
30790: LD_VAR 0 4
30794: PPUSH
30795: LD_INT 3
30797: PPUSH
30798: CALL_OW 272
30802: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
30803: LD_ADDR_VAR 0 8
30807: PUSH
30808: LD_VAR 0 6
30812: PPUSH
30813: LD_VAR 0 4
30817: PPUSH
30818: LD_INT 3
30820: PPUSH
30821: CALL_OW 273
30825: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30826: LD_VAR 0 7
30830: PPUSH
30831: LD_VAR 0 8
30835: PPUSH
30836: CALL_OW 488
30840: NOT
30841: IFFALSE 30845
// continue ;
30843: GO 30777
// if HexInfo ( _x , _y ) = 0 then
30845: LD_VAR 0 7
30849: PPUSH
30850: LD_VAR 0 8
30854: PPUSH
30855: CALL_OW 428
30859: PUSH
30860: LD_INT 0
30862: EQUAL
30863: IFFALSE 30888
// begin ComMoveXY ( unit , _x , _y ) ;
30865: LD_VAR 0 1
30869: PPUSH
30870: LD_VAR 0 7
30874: PPUSH
30875: LD_VAR 0 8
30879: PPUSH
30880: CALL_OW 111
// exit ;
30884: POP
30885: POP
30886: GO 30892
// end ; end ;
30888: GO 30777
30890: POP
30891: POP
// end ;
30892: LD_VAR 0 3
30896: RET
// export function ScanBase ( side , base_area ) ; begin
30897: LD_INT 0
30899: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
30900: LD_ADDR_VAR 0 3
30904: PUSH
30905: LD_VAR 0 2
30909: PPUSH
30910: LD_INT 81
30912: PUSH
30913: LD_VAR 0 1
30917: PUSH
30918: EMPTY
30919: LIST
30920: LIST
30921: PPUSH
30922: CALL_OW 70
30926: ST_TO_ADDR
// end ;
30927: LD_VAR 0 3
30931: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
30932: LD_INT 0
30934: PPUSH
30935: PPUSH
30936: PPUSH
30937: PPUSH
// result := false ;
30938: LD_ADDR_VAR 0 2
30942: PUSH
30943: LD_INT 0
30945: ST_TO_ADDR
// side := GetSide ( unit ) ;
30946: LD_ADDR_VAR 0 3
30950: PUSH
30951: LD_VAR 0 1
30955: PPUSH
30956: CALL_OW 255
30960: ST_TO_ADDR
// nat := GetNation ( unit ) ;
30961: LD_ADDR_VAR 0 4
30965: PUSH
30966: LD_VAR 0 1
30970: PPUSH
30971: CALL_OW 248
30975: ST_TO_ADDR
// case nat of 1 :
30976: LD_VAR 0 4
30980: PUSH
30981: LD_INT 1
30983: DOUBLE
30984: EQUAL
30985: IFTRUE 30989
30987: GO 31000
30989: POP
// tech := tech_lassight ; 2 :
30990: LD_ADDR_VAR 0 5
30994: PUSH
30995: LD_INT 12
30997: ST_TO_ADDR
30998: GO 31039
31000: LD_INT 2
31002: DOUBLE
31003: EQUAL
31004: IFTRUE 31008
31006: GO 31019
31008: POP
// tech := tech_mortar ; 3 :
31009: LD_ADDR_VAR 0 5
31013: PUSH
31014: LD_INT 41
31016: ST_TO_ADDR
31017: GO 31039
31019: LD_INT 3
31021: DOUBLE
31022: EQUAL
31023: IFTRUE 31027
31025: GO 31038
31027: POP
// tech := tech_bazooka ; end ;
31028: LD_ADDR_VAR 0 5
31032: PUSH
31033: LD_INT 44
31035: ST_TO_ADDR
31036: GO 31039
31038: POP
// if Researched ( side , tech ) then
31039: LD_VAR 0 3
31043: PPUSH
31044: LD_VAR 0 5
31048: PPUSH
31049: CALL_OW 325
31053: IFFALSE 31080
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
31055: LD_ADDR_VAR 0 2
31059: PUSH
31060: LD_INT 5
31062: PUSH
31063: LD_INT 8
31065: PUSH
31066: LD_INT 9
31068: PUSH
31069: EMPTY
31070: LIST
31071: LIST
31072: LIST
31073: PUSH
31074: LD_VAR 0 4
31078: ARRAY
31079: ST_TO_ADDR
// end ;
31080: LD_VAR 0 2
31084: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
31085: LD_INT 0
31087: PPUSH
31088: PPUSH
31089: PPUSH
// if not mines then
31090: LD_VAR 0 2
31094: NOT
31095: IFFALSE 31099
// exit ;
31097: GO 31243
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31099: LD_ADDR_VAR 0 5
31103: PUSH
31104: LD_INT 81
31106: PUSH
31107: LD_VAR 0 1
31111: PUSH
31112: EMPTY
31113: LIST
31114: LIST
31115: PUSH
31116: LD_INT 3
31118: PUSH
31119: LD_INT 21
31121: PUSH
31122: LD_INT 3
31124: PUSH
31125: EMPTY
31126: LIST
31127: LIST
31128: PUSH
31129: EMPTY
31130: LIST
31131: LIST
31132: PUSH
31133: EMPTY
31134: LIST
31135: LIST
31136: PPUSH
31137: CALL_OW 69
31141: ST_TO_ADDR
// for i in mines do
31142: LD_ADDR_VAR 0 4
31146: PUSH
31147: LD_VAR 0 2
31151: PUSH
31152: FOR_IN
31153: IFFALSE 31241
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
31155: LD_VAR 0 4
31159: PUSH
31160: LD_INT 1
31162: ARRAY
31163: PPUSH
31164: LD_VAR 0 4
31168: PUSH
31169: LD_INT 2
31171: ARRAY
31172: PPUSH
31173: CALL_OW 458
31177: NOT
31178: IFFALSE 31182
// continue ;
31180: GO 31152
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
31182: LD_VAR 0 4
31186: PUSH
31187: LD_INT 1
31189: ARRAY
31190: PPUSH
31191: LD_VAR 0 4
31195: PUSH
31196: LD_INT 2
31198: ARRAY
31199: PPUSH
31200: CALL_OW 428
31204: PUSH
31205: LD_VAR 0 5
31209: IN
31210: IFFALSE 31239
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
31212: LD_VAR 0 4
31216: PUSH
31217: LD_INT 1
31219: ARRAY
31220: PPUSH
31221: LD_VAR 0 4
31225: PUSH
31226: LD_INT 2
31228: ARRAY
31229: PPUSH
31230: LD_VAR 0 1
31234: PPUSH
31235: CALL_OW 456
// end ;
31239: GO 31152
31241: POP
31242: POP
// end ;
31243: LD_VAR 0 3
31247: RET
// export function Count ( array ) ; begin
31248: LD_INT 0
31250: PPUSH
// result := array + 0 ;
31251: LD_ADDR_VAR 0 2
31255: PUSH
31256: LD_VAR 0 1
31260: PUSH
31261: LD_INT 0
31263: PLUS
31264: ST_TO_ADDR
// end ;
31265: LD_VAR 0 2
31269: RET
// export function IsEmpty ( building ) ; begin
31270: LD_INT 0
31272: PPUSH
// if not building then
31273: LD_VAR 0 1
31277: NOT
31278: IFFALSE 31282
// exit ;
31280: GO 31325
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
31282: LD_ADDR_VAR 0 2
31286: PUSH
31287: LD_VAR 0 1
31291: PUSH
31292: LD_INT 22
31294: PUSH
31295: LD_VAR 0 1
31299: PPUSH
31300: CALL_OW 255
31304: PUSH
31305: EMPTY
31306: LIST
31307: LIST
31308: PUSH
31309: LD_INT 58
31311: PUSH
31312: EMPTY
31313: LIST
31314: PUSH
31315: EMPTY
31316: LIST
31317: LIST
31318: PPUSH
31319: CALL_OW 69
31323: IN
31324: ST_TO_ADDR
// end ;
31325: LD_VAR 0 2
31329: RET
// export function IsNotFull ( building ) ; var places ; begin
31330: LD_INT 0
31332: PPUSH
31333: PPUSH
// if not building then
31334: LD_VAR 0 1
31338: NOT
31339: IFFALSE 31343
// exit ;
31341: GO 31371
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
31343: LD_ADDR_VAR 0 2
31347: PUSH
31348: LD_VAR 0 1
31352: PPUSH
31353: LD_INT 3
31355: PUSH
31356: LD_INT 62
31358: PUSH
31359: EMPTY
31360: LIST
31361: PUSH
31362: EMPTY
31363: LIST
31364: LIST
31365: PPUSH
31366: CALL_OW 72
31370: ST_TO_ADDR
// end ;
31371: LD_VAR 0 2
31375: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
31376: LD_INT 0
31378: PPUSH
31379: PPUSH
31380: PPUSH
31381: PPUSH
// tmp := [ ] ;
31382: LD_ADDR_VAR 0 3
31386: PUSH
31387: EMPTY
31388: ST_TO_ADDR
// list := [ ] ;
31389: LD_ADDR_VAR 0 5
31393: PUSH
31394: EMPTY
31395: ST_TO_ADDR
// for i = 16 to 25 do
31396: LD_ADDR_VAR 0 4
31400: PUSH
31401: DOUBLE
31402: LD_INT 16
31404: DEC
31405: ST_TO_ADDR
31406: LD_INT 25
31408: PUSH
31409: FOR_TO
31410: IFFALSE 31483
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
31412: LD_ADDR_VAR 0 3
31416: PUSH
31417: LD_VAR 0 3
31421: PUSH
31422: LD_INT 22
31424: PUSH
31425: LD_VAR 0 1
31429: PPUSH
31430: CALL_OW 255
31434: PUSH
31435: EMPTY
31436: LIST
31437: LIST
31438: PUSH
31439: LD_INT 91
31441: PUSH
31442: LD_VAR 0 1
31446: PUSH
31447: LD_INT 6
31449: PUSH
31450: EMPTY
31451: LIST
31452: LIST
31453: LIST
31454: PUSH
31455: LD_INT 30
31457: PUSH
31458: LD_VAR 0 4
31462: PUSH
31463: EMPTY
31464: LIST
31465: LIST
31466: PUSH
31467: EMPTY
31468: LIST
31469: LIST
31470: LIST
31471: PUSH
31472: EMPTY
31473: LIST
31474: PPUSH
31475: CALL_OW 69
31479: ADD
31480: ST_TO_ADDR
31481: GO 31409
31483: POP
31484: POP
// for i = 1 to tmp do
31485: LD_ADDR_VAR 0 4
31489: PUSH
31490: DOUBLE
31491: LD_INT 1
31493: DEC
31494: ST_TO_ADDR
31495: LD_VAR 0 3
31499: PUSH
31500: FOR_TO
31501: IFFALSE 31589
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
31503: LD_ADDR_VAR 0 5
31507: PUSH
31508: LD_VAR 0 5
31512: PUSH
31513: LD_VAR 0 3
31517: PUSH
31518: LD_VAR 0 4
31522: ARRAY
31523: PPUSH
31524: CALL_OW 266
31528: PUSH
31529: LD_VAR 0 3
31533: PUSH
31534: LD_VAR 0 4
31538: ARRAY
31539: PPUSH
31540: CALL_OW 250
31544: PUSH
31545: LD_VAR 0 3
31549: PUSH
31550: LD_VAR 0 4
31554: ARRAY
31555: PPUSH
31556: CALL_OW 251
31560: PUSH
31561: LD_VAR 0 3
31565: PUSH
31566: LD_VAR 0 4
31570: ARRAY
31571: PPUSH
31572: CALL_OW 254
31576: PUSH
31577: EMPTY
31578: LIST
31579: LIST
31580: LIST
31581: LIST
31582: PUSH
31583: EMPTY
31584: LIST
31585: ADD
31586: ST_TO_ADDR
31587: GO 31500
31589: POP
31590: POP
// result := list ;
31591: LD_ADDR_VAR 0 2
31595: PUSH
31596: LD_VAR 0 5
31600: ST_TO_ADDR
// end ;
31601: LD_VAR 0 2
31605: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
31606: LD_INT 0
31608: PPUSH
31609: PPUSH
31610: PPUSH
31611: PPUSH
31612: PPUSH
31613: PPUSH
31614: PPUSH
// if not factory then
31615: LD_VAR 0 1
31619: NOT
31620: IFFALSE 31624
// exit ;
31622: GO 32217
// if control = control_apeman then
31624: LD_VAR 0 4
31628: PUSH
31629: LD_INT 5
31631: EQUAL
31632: IFFALSE 31741
// begin tmp := UnitsInside ( factory ) ;
31634: LD_ADDR_VAR 0 8
31638: PUSH
31639: LD_VAR 0 1
31643: PPUSH
31644: CALL_OW 313
31648: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
31649: LD_VAR 0 8
31653: PPUSH
31654: LD_INT 25
31656: PUSH
31657: LD_INT 12
31659: PUSH
31660: EMPTY
31661: LIST
31662: LIST
31663: PPUSH
31664: CALL_OW 72
31668: NOT
31669: IFFALSE 31679
// control := control_manual ;
31671: LD_ADDR_VAR 0 4
31675: PUSH
31676: LD_INT 1
31678: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
31679: LD_ADDR_VAR 0 8
31683: PUSH
31684: LD_VAR 0 1
31688: PPUSH
31689: CALL 31376 0 1
31693: ST_TO_ADDR
// if tmp then
31694: LD_VAR 0 8
31698: IFFALSE 31741
// begin for i in tmp do
31700: LD_ADDR_VAR 0 7
31704: PUSH
31705: LD_VAR 0 8
31709: PUSH
31710: FOR_IN
31711: IFFALSE 31739
// if i [ 1 ] = b_ext_radio then
31713: LD_VAR 0 7
31717: PUSH
31718: LD_INT 1
31720: ARRAY
31721: PUSH
31722: LD_INT 22
31724: EQUAL
31725: IFFALSE 31737
// begin control := control_remote ;
31727: LD_ADDR_VAR 0 4
31731: PUSH
31732: LD_INT 2
31734: ST_TO_ADDR
// break ;
31735: GO 31739
// end ;
31737: GO 31710
31739: POP
31740: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
31741: LD_VAR 0 1
31745: PPUSH
31746: LD_VAR 0 2
31750: PPUSH
31751: LD_VAR 0 3
31755: PPUSH
31756: LD_VAR 0 4
31760: PPUSH
31761: LD_VAR 0 5
31765: PPUSH
31766: CALL_OW 448
31770: IFFALSE 31805
// begin result := [ chassis , engine , control , weapon ] ;
31772: LD_ADDR_VAR 0 6
31776: PUSH
31777: LD_VAR 0 2
31781: PUSH
31782: LD_VAR 0 3
31786: PUSH
31787: LD_VAR 0 4
31791: PUSH
31792: LD_VAR 0 5
31796: PUSH
31797: EMPTY
31798: LIST
31799: LIST
31800: LIST
31801: LIST
31802: ST_TO_ADDR
// exit ;
31803: GO 32217
// end ; _chassis := AvailableChassisList ( factory ) ;
31805: LD_ADDR_VAR 0 9
31809: PUSH
31810: LD_VAR 0 1
31814: PPUSH
31815: CALL_OW 475
31819: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
31820: LD_ADDR_VAR 0 11
31824: PUSH
31825: LD_VAR 0 1
31829: PPUSH
31830: CALL_OW 476
31834: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
31835: LD_ADDR_VAR 0 12
31839: PUSH
31840: LD_VAR 0 1
31844: PPUSH
31845: CALL_OW 477
31849: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
31850: LD_ADDR_VAR 0 10
31854: PUSH
31855: LD_VAR 0 1
31859: PPUSH
31860: CALL_OW 478
31864: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
31865: LD_VAR 0 9
31869: NOT
31870: PUSH
31871: LD_VAR 0 11
31875: NOT
31876: OR
31877: PUSH
31878: LD_VAR 0 12
31882: NOT
31883: OR
31884: PUSH
31885: LD_VAR 0 10
31889: NOT
31890: OR
31891: IFFALSE 31926
// begin result := [ chassis , engine , control , weapon ] ;
31893: LD_ADDR_VAR 0 6
31897: PUSH
31898: LD_VAR 0 2
31902: PUSH
31903: LD_VAR 0 3
31907: PUSH
31908: LD_VAR 0 4
31912: PUSH
31913: LD_VAR 0 5
31917: PUSH
31918: EMPTY
31919: LIST
31920: LIST
31921: LIST
31922: LIST
31923: ST_TO_ADDR
// exit ;
31924: GO 32217
// end ; if not chassis in _chassis then
31926: LD_VAR 0 2
31930: PUSH
31931: LD_VAR 0 9
31935: IN
31936: NOT
31937: IFFALSE 31963
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
31939: LD_ADDR_VAR 0 2
31943: PUSH
31944: LD_VAR 0 9
31948: PUSH
31949: LD_INT 1
31951: PPUSH
31952: LD_VAR 0 9
31956: PPUSH
31957: CALL_OW 12
31961: ARRAY
31962: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
31963: LD_VAR 0 2
31967: PPUSH
31968: LD_VAR 0 3
31972: PPUSH
31973: CALL 32222 0 2
31977: NOT
31978: IFFALSE 32037
// repeat engine := _engine [ 1 ] ;
31980: LD_ADDR_VAR 0 3
31984: PUSH
31985: LD_VAR 0 11
31989: PUSH
31990: LD_INT 1
31992: ARRAY
31993: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
31994: LD_ADDR_VAR 0 11
31998: PUSH
31999: LD_VAR 0 11
32003: PPUSH
32004: LD_INT 1
32006: PPUSH
32007: CALL_OW 3
32011: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
32012: LD_VAR 0 2
32016: PPUSH
32017: LD_VAR 0 3
32021: PPUSH
32022: CALL 32222 0 2
32026: PUSH
32027: LD_VAR 0 11
32031: PUSH
32032: EMPTY
32033: EQUAL
32034: OR
32035: IFFALSE 31980
// if not control in _control then
32037: LD_VAR 0 4
32041: PUSH
32042: LD_VAR 0 12
32046: IN
32047: NOT
32048: IFFALSE 32074
// control := _control [ rand ( 1 , _control ) ] ;
32050: LD_ADDR_VAR 0 4
32054: PUSH
32055: LD_VAR 0 12
32059: PUSH
32060: LD_INT 1
32062: PPUSH
32063: LD_VAR 0 12
32067: PPUSH
32068: CALL_OW 12
32072: ARRAY
32073: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
32074: LD_VAR 0 2
32078: PPUSH
32079: LD_VAR 0 5
32083: PPUSH
32084: CALL 32442 0 2
32088: NOT
32089: IFFALSE 32148
// repeat weapon := _weapon [ 1 ] ;
32091: LD_ADDR_VAR 0 5
32095: PUSH
32096: LD_VAR 0 10
32100: PUSH
32101: LD_INT 1
32103: ARRAY
32104: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
32105: LD_ADDR_VAR 0 10
32109: PUSH
32110: LD_VAR 0 10
32114: PPUSH
32115: LD_INT 1
32117: PPUSH
32118: CALL_OW 3
32122: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
32123: LD_VAR 0 2
32127: PPUSH
32128: LD_VAR 0 5
32132: PPUSH
32133: CALL 32442 0 2
32137: PUSH
32138: LD_VAR 0 10
32142: PUSH
32143: EMPTY
32144: EQUAL
32145: OR
32146: IFFALSE 32091
// result := [ ] ;
32148: LD_ADDR_VAR 0 6
32152: PUSH
32153: EMPTY
32154: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32155: LD_VAR 0 1
32159: PPUSH
32160: LD_VAR 0 2
32164: PPUSH
32165: LD_VAR 0 3
32169: PPUSH
32170: LD_VAR 0 4
32174: PPUSH
32175: LD_VAR 0 5
32179: PPUSH
32180: CALL_OW 448
32184: IFFALSE 32217
// result := [ chassis , engine , control , weapon ] ;
32186: LD_ADDR_VAR 0 6
32190: PUSH
32191: LD_VAR 0 2
32195: PUSH
32196: LD_VAR 0 3
32200: PUSH
32201: LD_VAR 0 4
32205: PUSH
32206: LD_VAR 0 5
32210: PUSH
32211: EMPTY
32212: LIST
32213: LIST
32214: LIST
32215: LIST
32216: ST_TO_ADDR
// end ;
32217: LD_VAR 0 6
32221: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
32222: LD_INT 0
32224: PPUSH
// if not chassis or not engine then
32225: LD_VAR 0 1
32229: NOT
32230: PUSH
32231: LD_VAR 0 2
32235: NOT
32236: OR
32237: IFFALSE 32241
// exit ;
32239: GO 32437
// case engine of engine_solar :
32241: LD_VAR 0 2
32245: PUSH
32246: LD_INT 2
32248: DOUBLE
32249: EQUAL
32250: IFTRUE 32254
32252: GO 32292
32254: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
32255: LD_ADDR_VAR 0 3
32259: PUSH
32260: LD_INT 11
32262: PUSH
32263: LD_INT 12
32265: PUSH
32266: LD_INT 13
32268: PUSH
32269: LD_INT 14
32271: PUSH
32272: LD_INT 1
32274: PUSH
32275: LD_INT 2
32277: PUSH
32278: LD_INT 3
32280: PUSH
32281: EMPTY
32282: LIST
32283: LIST
32284: LIST
32285: LIST
32286: LIST
32287: LIST
32288: LIST
32289: ST_TO_ADDR
32290: GO 32421
32292: LD_INT 1
32294: DOUBLE
32295: EQUAL
32296: IFTRUE 32300
32298: GO 32362
32300: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
32301: LD_ADDR_VAR 0 3
32305: PUSH
32306: LD_INT 11
32308: PUSH
32309: LD_INT 12
32311: PUSH
32312: LD_INT 13
32314: PUSH
32315: LD_INT 14
32317: PUSH
32318: LD_INT 1
32320: PUSH
32321: LD_INT 2
32323: PUSH
32324: LD_INT 3
32326: PUSH
32327: LD_INT 4
32329: PUSH
32330: LD_INT 5
32332: PUSH
32333: LD_INT 21
32335: PUSH
32336: LD_INT 23
32338: PUSH
32339: LD_INT 22
32341: PUSH
32342: LD_INT 24
32344: PUSH
32345: EMPTY
32346: LIST
32347: LIST
32348: LIST
32349: LIST
32350: LIST
32351: LIST
32352: LIST
32353: LIST
32354: LIST
32355: LIST
32356: LIST
32357: LIST
32358: LIST
32359: ST_TO_ADDR
32360: GO 32421
32362: LD_INT 3
32364: DOUBLE
32365: EQUAL
32366: IFTRUE 32370
32368: GO 32420
32370: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
32371: LD_ADDR_VAR 0 3
32375: PUSH
32376: LD_INT 13
32378: PUSH
32379: LD_INT 14
32381: PUSH
32382: LD_INT 2
32384: PUSH
32385: LD_INT 3
32387: PUSH
32388: LD_INT 4
32390: PUSH
32391: LD_INT 5
32393: PUSH
32394: LD_INT 21
32396: PUSH
32397: LD_INT 22
32399: PUSH
32400: LD_INT 23
32402: PUSH
32403: LD_INT 24
32405: PUSH
32406: EMPTY
32407: LIST
32408: LIST
32409: LIST
32410: LIST
32411: LIST
32412: LIST
32413: LIST
32414: LIST
32415: LIST
32416: LIST
32417: ST_TO_ADDR
32418: GO 32421
32420: POP
// result := ( chassis in result ) ;
32421: LD_ADDR_VAR 0 3
32425: PUSH
32426: LD_VAR 0 1
32430: PUSH
32431: LD_VAR 0 3
32435: IN
32436: ST_TO_ADDR
// end ;
32437: LD_VAR 0 3
32441: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
32442: LD_INT 0
32444: PPUSH
// if not chassis or not weapon then
32445: LD_VAR 0 1
32449: NOT
32450: PUSH
32451: LD_VAR 0 2
32455: NOT
32456: OR
32457: IFFALSE 32461
// exit ;
32459: GO 33521
// case weapon of us_machine_gun :
32461: LD_VAR 0 2
32465: PUSH
32466: LD_INT 2
32468: DOUBLE
32469: EQUAL
32470: IFTRUE 32474
32472: GO 32504
32474: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
32475: LD_ADDR_VAR 0 3
32479: PUSH
32480: LD_INT 1
32482: PUSH
32483: LD_INT 2
32485: PUSH
32486: LD_INT 3
32488: PUSH
32489: LD_INT 4
32491: PUSH
32492: LD_INT 5
32494: PUSH
32495: EMPTY
32496: LIST
32497: LIST
32498: LIST
32499: LIST
32500: LIST
32501: ST_TO_ADDR
32502: GO 33505
32504: LD_INT 3
32506: DOUBLE
32507: EQUAL
32508: IFTRUE 32512
32510: GO 32542
32512: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
32513: LD_ADDR_VAR 0 3
32517: PUSH
32518: LD_INT 1
32520: PUSH
32521: LD_INT 2
32523: PUSH
32524: LD_INT 3
32526: PUSH
32527: LD_INT 4
32529: PUSH
32530: LD_INT 5
32532: PUSH
32533: EMPTY
32534: LIST
32535: LIST
32536: LIST
32537: LIST
32538: LIST
32539: ST_TO_ADDR
32540: GO 33505
32542: LD_INT 11
32544: DOUBLE
32545: EQUAL
32546: IFTRUE 32550
32548: GO 32580
32550: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
32551: LD_ADDR_VAR 0 3
32555: PUSH
32556: LD_INT 1
32558: PUSH
32559: LD_INT 2
32561: PUSH
32562: LD_INT 3
32564: PUSH
32565: LD_INT 4
32567: PUSH
32568: LD_INT 5
32570: PUSH
32571: EMPTY
32572: LIST
32573: LIST
32574: LIST
32575: LIST
32576: LIST
32577: ST_TO_ADDR
32578: GO 33505
32580: LD_INT 4
32582: DOUBLE
32583: EQUAL
32584: IFTRUE 32588
32586: GO 32614
32588: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
32589: LD_ADDR_VAR 0 3
32593: PUSH
32594: LD_INT 2
32596: PUSH
32597: LD_INT 3
32599: PUSH
32600: LD_INT 4
32602: PUSH
32603: LD_INT 5
32605: PUSH
32606: EMPTY
32607: LIST
32608: LIST
32609: LIST
32610: LIST
32611: ST_TO_ADDR
32612: GO 33505
32614: LD_INT 5
32616: DOUBLE
32617: EQUAL
32618: IFTRUE 32622
32620: GO 32648
32622: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
32623: LD_ADDR_VAR 0 3
32627: PUSH
32628: LD_INT 2
32630: PUSH
32631: LD_INT 3
32633: PUSH
32634: LD_INT 4
32636: PUSH
32637: LD_INT 5
32639: PUSH
32640: EMPTY
32641: LIST
32642: LIST
32643: LIST
32644: LIST
32645: ST_TO_ADDR
32646: GO 33505
32648: LD_INT 9
32650: DOUBLE
32651: EQUAL
32652: IFTRUE 32656
32654: GO 32682
32656: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
32657: LD_ADDR_VAR 0 3
32661: PUSH
32662: LD_INT 2
32664: PUSH
32665: LD_INT 3
32667: PUSH
32668: LD_INT 4
32670: PUSH
32671: LD_INT 5
32673: PUSH
32674: EMPTY
32675: LIST
32676: LIST
32677: LIST
32678: LIST
32679: ST_TO_ADDR
32680: GO 33505
32682: LD_INT 7
32684: DOUBLE
32685: EQUAL
32686: IFTRUE 32690
32688: GO 32716
32690: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
32691: LD_ADDR_VAR 0 3
32695: PUSH
32696: LD_INT 2
32698: PUSH
32699: LD_INT 3
32701: PUSH
32702: LD_INT 4
32704: PUSH
32705: LD_INT 5
32707: PUSH
32708: EMPTY
32709: LIST
32710: LIST
32711: LIST
32712: LIST
32713: ST_TO_ADDR
32714: GO 33505
32716: LD_INT 12
32718: DOUBLE
32719: EQUAL
32720: IFTRUE 32724
32722: GO 32750
32724: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
32725: LD_ADDR_VAR 0 3
32729: PUSH
32730: LD_INT 2
32732: PUSH
32733: LD_INT 3
32735: PUSH
32736: LD_INT 4
32738: PUSH
32739: LD_INT 5
32741: PUSH
32742: EMPTY
32743: LIST
32744: LIST
32745: LIST
32746: LIST
32747: ST_TO_ADDR
32748: GO 33505
32750: LD_INT 13
32752: DOUBLE
32753: EQUAL
32754: IFTRUE 32758
32756: GO 32784
32758: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
32759: LD_ADDR_VAR 0 3
32763: PUSH
32764: LD_INT 2
32766: PUSH
32767: LD_INT 3
32769: PUSH
32770: LD_INT 4
32772: PUSH
32773: LD_INT 5
32775: PUSH
32776: EMPTY
32777: LIST
32778: LIST
32779: LIST
32780: LIST
32781: ST_TO_ADDR
32782: GO 33505
32784: LD_INT 14
32786: DOUBLE
32787: EQUAL
32788: IFTRUE 32792
32790: GO 32810
32792: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
32793: LD_ADDR_VAR 0 3
32797: PUSH
32798: LD_INT 4
32800: PUSH
32801: LD_INT 5
32803: PUSH
32804: EMPTY
32805: LIST
32806: LIST
32807: ST_TO_ADDR
32808: GO 33505
32810: LD_INT 6
32812: DOUBLE
32813: EQUAL
32814: IFTRUE 32818
32816: GO 32836
32818: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
32819: LD_ADDR_VAR 0 3
32823: PUSH
32824: LD_INT 4
32826: PUSH
32827: LD_INT 5
32829: PUSH
32830: EMPTY
32831: LIST
32832: LIST
32833: ST_TO_ADDR
32834: GO 33505
32836: LD_INT 10
32838: DOUBLE
32839: EQUAL
32840: IFTRUE 32844
32842: GO 32862
32844: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
32845: LD_ADDR_VAR 0 3
32849: PUSH
32850: LD_INT 4
32852: PUSH
32853: LD_INT 5
32855: PUSH
32856: EMPTY
32857: LIST
32858: LIST
32859: ST_TO_ADDR
32860: GO 33505
32862: LD_INT 22
32864: DOUBLE
32865: EQUAL
32866: IFTRUE 32870
32868: GO 32896
32870: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
32871: LD_ADDR_VAR 0 3
32875: PUSH
32876: LD_INT 11
32878: PUSH
32879: LD_INT 12
32881: PUSH
32882: LD_INT 13
32884: PUSH
32885: LD_INT 14
32887: PUSH
32888: EMPTY
32889: LIST
32890: LIST
32891: LIST
32892: LIST
32893: ST_TO_ADDR
32894: GO 33505
32896: LD_INT 23
32898: DOUBLE
32899: EQUAL
32900: IFTRUE 32904
32902: GO 32930
32904: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
32905: LD_ADDR_VAR 0 3
32909: PUSH
32910: LD_INT 11
32912: PUSH
32913: LD_INT 12
32915: PUSH
32916: LD_INT 13
32918: PUSH
32919: LD_INT 14
32921: PUSH
32922: EMPTY
32923: LIST
32924: LIST
32925: LIST
32926: LIST
32927: ST_TO_ADDR
32928: GO 33505
32930: LD_INT 24
32932: DOUBLE
32933: EQUAL
32934: IFTRUE 32938
32936: GO 32964
32938: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
32939: LD_ADDR_VAR 0 3
32943: PUSH
32944: LD_INT 11
32946: PUSH
32947: LD_INT 12
32949: PUSH
32950: LD_INT 13
32952: PUSH
32953: LD_INT 14
32955: PUSH
32956: EMPTY
32957: LIST
32958: LIST
32959: LIST
32960: LIST
32961: ST_TO_ADDR
32962: GO 33505
32964: LD_INT 30
32966: DOUBLE
32967: EQUAL
32968: IFTRUE 32972
32970: GO 32998
32972: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
32973: LD_ADDR_VAR 0 3
32977: PUSH
32978: LD_INT 11
32980: PUSH
32981: LD_INT 12
32983: PUSH
32984: LD_INT 13
32986: PUSH
32987: LD_INT 14
32989: PUSH
32990: EMPTY
32991: LIST
32992: LIST
32993: LIST
32994: LIST
32995: ST_TO_ADDR
32996: GO 33505
32998: LD_INT 25
33000: DOUBLE
33001: EQUAL
33002: IFTRUE 33006
33004: GO 33024
33006: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
33007: LD_ADDR_VAR 0 3
33011: PUSH
33012: LD_INT 13
33014: PUSH
33015: LD_INT 14
33017: PUSH
33018: EMPTY
33019: LIST
33020: LIST
33021: ST_TO_ADDR
33022: GO 33505
33024: LD_INT 27
33026: DOUBLE
33027: EQUAL
33028: IFTRUE 33032
33030: GO 33050
33032: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
33033: LD_ADDR_VAR 0 3
33037: PUSH
33038: LD_INT 13
33040: PUSH
33041: LD_INT 14
33043: PUSH
33044: EMPTY
33045: LIST
33046: LIST
33047: ST_TO_ADDR
33048: GO 33505
33050: LD_INT 92
33052: DOUBLE
33053: EQUAL
33054: IFTRUE 33058
33056: GO 33084
33058: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
33059: LD_ADDR_VAR 0 3
33063: PUSH
33064: LD_INT 11
33066: PUSH
33067: LD_INT 12
33069: PUSH
33070: LD_INT 13
33072: PUSH
33073: LD_INT 14
33075: PUSH
33076: EMPTY
33077: LIST
33078: LIST
33079: LIST
33080: LIST
33081: ST_TO_ADDR
33082: GO 33505
33084: LD_INT 28
33086: DOUBLE
33087: EQUAL
33088: IFTRUE 33092
33090: GO 33110
33092: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
33093: LD_ADDR_VAR 0 3
33097: PUSH
33098: LD_INT 13
33100: PUSH
33101: LD_INT 14
33103: PUSH
33104: EMPTY
33105: LIST
33106: LIST
33107: ST_TO_ADDR
33108: GO 33505
33110: LD_INT 29
33112: DOUBLE
33113: EQUAL
33114: IFTRUE 33118
33116: GO 33136
33118: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
33119: LD_ADDR_VAR 0 3
33123: PUSH
33124: LD_INT 13
33126: PUSH
33127: LD_INT 14
33129: PUSH
33130: EMPTY
33131: LIST
33132: LIST
33133: ST_TO_ADDR
33134: GO 33505
33136: LD_INT 31
33138: DOUBLE
33139: EQUAL
33140: IFTRUE 33144
33142: GO 33162
33144: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
33145: LD_ADDR_VAR 0 3
33149: PUSH
33150: LD_INT 13
33152: PUSH
33153: LD_INT 14
33155: PUSH
33156: EMPTY
33157: LIST
33158: LIST
33159: ST_TO_ADDR
33160: GO 33505
33162: LD_INT 26
33164: DOUBLE
33165: EQUAL
33166: IFTRUE 33170
33168: GO 33188
33170: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
33171: LD_ADDR_VAR 0 3
33175: PUSH
33176: LD_INT 13
33178: PUSH
33179: LD_INT 14
33181: PUSH
33182: EMPTY
33183: LIST
33184: LIST
33185: ST_TO_ADDR
33186: GO 33505
33188: LD_INT 42
33190: DOUBLE
33191: EQUAL
33192: IFTRUE 33196
33194: GO 33222
33196: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
33197: LD_ADDR_VAR 0 3
33201: PUSH
33202: LD_INT 21
33204: PUSH
33205: LD_INT 22
33207: PUSH
33208: LD_INT 23
33210: PUSH
33211: LD_INT 24
33213: PUSH
33214: EMPTY
33215: LIST
33216: LIST
33217: LIST
33218: LIST
33219: ST_TO_ADDR
33220: GO 33505
33222: LD_INT 43
33224: DOUBLE
33225: EQUAL
33226: IFTRUE 33230
33228: GO 33256
33230: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
33231: LD_ADDR_VAR 0 3
33235: PUSH
33236: LD_INT 21
33238: PUSH
33239: LD_INT 22
33241: PUSH
33242: LD_INT 23
33244: PUSH
33245: LD_INT 24
33247: PUSH
33248: EMPTY
33249: LIST
33250: LIST
33251: LIST
33252: LIST
33253: ST_TO_ADDR
33254: GO 33505
33256: LD_INT 44
33258: DOUBLE
33259: EQUAL
33260: IFTRUE 33264
33262: GO 33290
33264: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
33265: LD_ADDR_VAR 0 3
33269: PUSH
33270: LD_INT 21
33272: PUSH
33273: LD_INT 22
33275: PUSH
33276: LD_INT 23
33278: PUSH
33279: LD_INT 24
33281: PUSH
33282: EMPTY
33283: LIST
33284: LIST
33285: LIST
33286: LIST
33287: ST_TO_ADDR
33288: GO 33505
33290: LD_INT 45
33292: DOUBLE
33293: EQUAL
33294: IFTRUE 33298
33296: GO 33324
33298: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
33299: LD_ADDR_VAR 0 3
33303: PUSH
33304: LD_INT 21
33306: PUSH
33307: LD_INT 22
33309: PUSH
33310: LD_INT 23
33312: PUSH
33313: LD_INT 24
33315: PUSH
33316: EMPTY
33317: LIST
33318: LIST
33319: LIST
33320: LIST
33321: ST_TO_ADDR
33322: GO 33505
33324: LD_INT 49
33326: DOUBLE
33327: EQUAL
33328: IFTRUE 33332
33330: GO 33358
33332: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
33333: LD_ADDR_VAR 0 3
33337: PUSH
33338: LD_INT 21
33340: PUSH
33341: LD_INT 22
33343: PUSH
33344: LD_INT 23
33346: PUSH
33347: LD_INT 24
33349: PUSH
33350: EMPTY
33351: LIST
33352: LIST
33353: LIST
33354: LIST
33355: ST_TO_ADDR
33356: GO 33505
33358: LD_INT 51
33360: DOUBLE
33361: EQUAL
33362: IFTRUE 33366
33364: GO 33392
33366: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
33367: LD_ADDR_VAR 0 3
33371: PUSH
33372: LD_INT 21
33374: PUSH
33375: LD_INT 22
33377: PUSH
33378: LD_INT 23
33380: PUSH
33381: LD_INT 24
33383: PUSH
33384: EMPTY
33385: LIST
33386: LIST
33387: LIST
33388: LIST
33389: ST_TO_ADDR
33390: GO 33505
33392: LD_INT 52
33394: DOUBLE
33395: EQUAL
33396: IFTRUE 33400
33398: GO 33426
33400: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
33401: LD_ADDR_VAR 0 3
33405: PUSH
33406: LD_INT 21
33408: PUSH
33409: LD_INT 22
33411: PUSH
33412: LD_INT 23
33414: PUSH
33415: LD_INT 24
33417: PUSH
33418: EMPTY
33419: LIST
33420: LIST
33421: LIST
33422: LIST
33423: ST_TO_ADDR
33424: GO 33505
33426: LD_INT 53
33428: DOUBLE
33429: EQUAL
33430: IFTRUE 33434
33432: GO 33452
33434: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
33435: LD_ADDR_VAR 0 3
33439: PUSH
33440: LD_INT 23
33442: PUSH
33443: LD_INT 24
33445: PUSH
33446: EMPTY
33447: LIST
33448: LIST
33449: ST_TO_ADDR
33450: GO 33505
33452: LD_INT 46
33454: DOUBLE
33455: EQUAL
33456: IFTRUE 33460
33458: GO 33478
33460: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
33461: LD_ADDR_VAR 0 3
33465: PUSH
33466: LD_INT 23
33468: PUSH
33469: LD_INT 24
33471: PUSH
33472: EMPTY
33473: LIST
33474: LIST
33475: ST_TO_ADDR
33476: GO 33505
33478: LD_INT 47
33480: DOUBLE
33481: EQUAL
33482: IFTRUE 33486
33484: GO 33504
33486: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33487: LD_ADDR_VAR 0 3
33491: PUSH
33492: LD_INT 23
33494: PUSH
33495: LD_INT 24
33497: PUSH
33498: EMPTY
33499: LIST
33500: LIST
33501: ST_TO_ADDR
33502: GO 33505
33504: POP
// result := ( chassis in result ) ;
33505: LD_ADDR_VAR 0 3
33509: PUSH
33510: LD_VAR 0 1
33514: PUSH
33515: LD_VAR 0 3
33519: IN
33520: ST_TO_ADDR
// end ;
33521: LD_VAR 0 3
33525: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
33526: LD_INT 0
33528: PPUSH
33529: PPUSH
33530: PPUSH
33531: PPUSH
33532: PPUSH
33533: PPUSH
33534: PPUSH
// result := array ;
33535: LD_ADDR_VAR 0 5
33539: PUSH
33540: LD_VAR 0 1
33544: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
33545: LD_VAR 0 1
33549: NOT
33550: PUSH
33551: LD_VAR 0 2
33555: NOT
33556: OR
33557: PUSH
33558: LD_VAR 0 3
33562: NOT
33563: OR
33564: PUSH
33565: LD_VAR 0 2
33569: PUSH
33570: LD_VAR 0 1
33574: GREATER
33575: OR
33576: PUSH
33577: LD_VAR 0 3
33581: PUSH
33582: LD_VAR 0 1
33586: GREATER
33587: OR
33588: IFFALSE 33592
// exit ;
33590: GO 33888
// if direction then
33592: LD_VAR 0 4
33596: IFFALSE 33660
// begin d := 1 ;
33598: LD_ADDR_VAR 0 9
33602: PUSH
33603: LD_INT 1
33605: ST_TO_ADDR
// if i_from > i_to then
33606: LD_VAR 0 2
33610: PUSH
33611: LD_VAR 0 3
33615: GREATER
33616: IFFALSE 33642
// length := ( array - i_from ) + i_to else
33618: LD_ADDR_VAR 0 11
33622: PUSH
33623: LD_VAR 0 1
33627: PUSH
33628: LD_VAR 0 2
33632: MINUS
33633: PUSH
33634: LD_VAR 0 3
33638: PLUS
33639: ST_TO_ADDR
33640: GO 33658
// length := i_to - i_from ;
33642: LD_ADDR_VAR 0 11
33646: PUSH
33647: LD_VAR 0 3
33651: PUSH
33652: LD_VAR 0 2
33656: MINUS
33657: ST_TO_ADDR
// end else
33658: GO 33721
// begin d := - 1 ;
33660: LD_ADDR_VAR 0 9
33664: PUSH
33665: LD_INT 1
33667: NEG
33668: ST_TO_ADDR
// if i_from > i_to then
33669: LD_VAR 0 2
33673: PUSH
33674: LD_VAR 0 3
33678: GREATER
33679: IFFALSE 33699
// length := i_from - i_to else
33681: LD_ADDR_VAR 0 11
33685: PUSH
33686: LD_VAR 0 2
33690: PUSH
33691: LD_VAR 0 3
33695: MINUS
33696: ST_TO_ADDR
33697: GO 33721
// length := ( array - i_to ) + i_from ;
33699: LD_ADDR_VAR 0 11
33703: PUSH
33704: LD_VAR 0 1
33708: PUSH
33709: LD_VAR 0 3
33713: MINUS
33714: PUSH
33715: LD_VAR 0 2
33719: PLUS
33720: ST_TO_ADDR
// end ; if not length then
33721: LD_VAR 0 11
33725: NOT
33726: IFFALSE 33730
// exit ;
33728: GO 33888
// tmp := array ;
33730: LD_ADDR_VAR 0 10
33734: PUSH
33735: LD_VAR 0 1
33739: ST_TO_ADDR
// for i = 1 to length do
33740: LD_ADDR_VAR 0 6
33744: PUSH
33745: DOUBLE
33746: LD_INT 1
33748: DEC
33749: ST_TO_ADDR
33750: LD_VAR 0 11
33754: PUSH
33755: FOR_TO
33756: IFFALSE 33876
// begin for j = 1 to array do
33758: LD_ADDR_VAR 0 7
33762: PUSH
33763: DOUBLE
33764: LD_INT 1
33766: DEC
33767: ST_TO_ADDR
33768: LD_VAR 0 1
33772: PUSH
33773: FOR_TO
33774: IFFALSE 33862
// begin k := j + d ;
33776: LD_ADDR_VAR 0 8
33780: PUSH
33781: LD_VAR 0 7
33785: PUSH
33786: LD_VAR 0 9
33790: PLUS
33791: ST_TO_ADDR
// if k > array then
33792: LD_VAR 0 8
33796: PUSH
33797: LD_VAR 0 1
33801: GREATER
33802: IFFALSE 33812
// k := 1 ;
33804: LD_ADDR_VAR 0 8
33808: PUSH
33809: LD_INT 1
33811: ST_TO_ADDR
// if not k then
33812: LD_VAR 0 8
33816: NOT
33817: IFFALSE 33829
// k := array ;
33819: LD_ADDR_VAR 0 8
33823: PUSH
33824: LD_VAR 0 1
33828: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
33829: LD_ADDR_VAR 0 10
33833: PUSH
33834: LD_VAR 0 10
33838: PPUSH
33839: LD_VAR 0 8
33843: PPUSH
33844: LD_VAR 0 1
33848: PUSH
33849: LD_VAR 0 7
33853: ARRAY
33854: PPUSH
33855: CALL_OW 1
33859: ST_TO_ADDR
// end ;
33860: GO 33773
33862: POP
33863: POP
// array := tmp ;
33864: LD_ADDR_VAR 0 1
33868: PUSH
33869: LD_VAR 0 10
33873: ST_TO_ADDR
// end ;
33874: GO 33755
33876: POP
33877: POP
// result := array ;
33878: LD_ADDR_VAR 0 5
33882: PUSH
33883: LD_VAR 0 1
33887: ST_TO_ADDR
// end ;
33888: LD_VAR 0 5
33892: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
33893: LD_INT 0
33895: PPUSH
33896: PPUSH
// result := 0 ;
33897: LD_ADDR_VAR 0 3
33901: PUSH
33902: LD_INT 0
33904: ST_TO_ADDR
// if not array or not value in array then
33905: LD_VAR 0 1
33909: NOT
33910: PUSH
33911: LD_VAR 0 2
33915: PUSH
33916: LD_VAR 0 1
33920: IN
33921: NOT
33922: OR
33923: IFFALSE 33927
// exit ;
33925: GO 33981
// for i = 1 to array do
33927: LD_ADDR_VAR 0 4
33931: PUSH
33932: DOUBLE
33933: LD_INT 1
33935: DEC
33936: ST_TO_ADDR
33937: LD_VAR 0 1
33941: PUSH
33942: FOR_TO
33943: IFFALSE 33979
// if value = array [ i ] then
33945: LD_VAR 0 2
33949: PUSH
33950: LD_VAR 0 1
33954: PUSH
33955: LD_VAR 0 4
33959: ARRAY
33960: EQUAL
33961: IFFALSE 33977
// begin result := i ;
33963: LD_ADDR_VAR 0 3
33967: PUSH
33968: LD_VAR 0 4
33972: ST_TO_ADDR
// exit ;
33973: POP
33974: POP
33975: GO 33981
// end ;
33977: GO 33942
33979: POP
33980: POP
// end ;
33981: LD_VAR 0 3
33985: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
33986: LD_INT 0
33988: PPUSH
// vc_chassis := chassis ;
33989: LD_ADDR_OWVAR 37
33993: PUSH
33994: LD_VAR 0 1
33998: ST_TO_ADDR
// vc_engine := engine ;
33999: LD_ADDR_OWVAR 39
34003: PUSH
34004: LD_VAR 0 2
34008: ST_TO_ADDR
// vc_control := control ;
34009: LD_ADDR_OWVAR 38
34013: PUSH
34014: LD_VAR 0 3
34018: ST_TO_ADDR
// vc_weapon := weapon ;
34019: LD_ADDR_OWVAR 40
34023: PUSH
34024: LD_VAR 0 4
34028: ST_TO_ADDR
// vc_fuel_battery := fuel ;
34029: LD_ADDR_OWVAR 41
34033: PUSH
34034: LD_VAR 0 5
34038: ST_TO_ADDR
// end ;
34039: LD_VAR 0 6
34043: RET
// export function WantPlant ( unit ) ; var task ; begin
34044: LD_INT 0
34046: PPUSH
34047: PPUSH
// result := false ;
34048: LD_ADDR_VAR 0 2
34052: PUSH
34053: LD_INT 0
34055: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
34056: LD_ADDR_VAR 0 3
34060: PUSH
34061: LD_VAR 0 1
34065: PPUSH
34066: CALL_OW 437
34070: ST_TO_ADDR
// if task then
34071: LD_VAR 0 3
34075: IFFALSE 34103
// if task [ 1 ] [ 1 ] = p then
34077: LD_VAR 0 3
34081: PUSH
34082: LD_INT 1
34084: ARRAY
34085: PUSH
34086: LD_INT 1
34088: ARRAY
34089: PUSH
34090: LD_STRING p
34092: EQUAL
34093: IFFALSE 34103
// result := true ;
34095: LD_ADDR_VAR 0 2
34099: PUSH
34100: LD_INT 1
34102: ST_TO_ADDR
// end ;
34103: LD_VAR 0 2
34107: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
34108: LD_INT 0
34110: PPUSH
34111: PPUSH
34112: PPUSH
34113: PPUSH
// if pos < 1 then
34114: LD_VAR 0 2
34118: PUSH
34119: LD_INT 1
34121: LESS
34122: IFFALSE 34126
// exit ;
34124: GO 34429
// if pos = 1 then
34126: LD_VAR 0 2
34130: PUSH
34131: LD_INT 1
34133: EQUAL
34134: IFFALSE 34167
// result := Replace ( arr , pos [ 1 ] , value ) else
34136: LD_ADDR_VAR 0 4
34140: PUSH
34141: LD_VAR 0 1
34145: PPUSH
34146: LD_VAR 0 2
34150: PUSH
34151: LD_INT 1
34153: ARRAY
34154: PPUSH
34155: LD_VAR 0 3
34159: PPUSH
34160: CALL_OW 1
34164: ST_TO_ADDR
34165: GO 34429
// begin tmp := arr ;
34167: LD_ADDR_VAR 0 6
34171: PUSH
34172: LD_VAR 0 1
34176: ST_TO_ADDR
// s_arr := [ tmp ] ;
34177: LD_ADDR_VAR 0 7
34181: PUSH
34182: LD_VAR 0 6
34186: PUSH
34187: EMPTY
34188: LIST
34189: ST_TO_ADDR
// for i = 1 to pos - 1 do
34190: LD_ADDR_VAR 0 5
34194: PUSH
34195: DOUBLE
34196: LD_INT 1
34198: DEC
34199: ST_TO_ADDR
34200: LD_VAR 0 2
34204: PUSH
34205: LD_INT 1
34207: MINUS
34208: PUSH
34209: FOR_TO
34210: IFFALSE 34255
// begin tmp := tmp [ pos [ i ] ] ;
34212: LD_ADDR_VAR 0 6
34216: PUSH
34217: LD_VAR 0 6
34221: PUSH
34222: LD_VAR 0 2
34226: PUSH
34227: LD_VAR 0 5
34231: ARRAY
34232: ARRAY
34233: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
34234: LD_ADDR_VAR 0 7
34238: PUSH
34239: LD_VAR 0 7
34243: PUSH
34244: LD_VAR 0 6
34248: PUSH
34249: EMPTY
34250: LIST
34251: ADD
34252: ST_TO_ADDR
// end ;
34253: GO 34209
34255: POP
34256: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
34257: LD_ADDR_VAR 0 6
34261: PUSH
34262: LD_VAR 0 6
34266: PPUSH
34267: LD_VAR 0 2
34271: PUSH
34272: LD_VAR 0 2
34276: ARRAY
34277: PPUSH
34278: LD_VAR 0 3
34282: PPUSH
34283: CALL_OW 1
34287: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
34288: LD_ADDR_VAR 0 7
34292: PUSH
34293: LD_VAR 0 7
34297: PPUSH
34298: LD_VAR 0 7
34302: PPUSH
34303: LD_VAR 0 6
34307: PPUSH
34308: CALL_OW 1
34312: ST_TO_ADDR
// for i = s_arr downto 2 do
34313: LD_ADDR_VAR 0 5
34317: PUSH
34318: DOUBLE
34319: LD_VAR 0 7
34323: INC
34324: ST_TO_ADDR
34325: LD_INT 2
34327: PUSH
34328: FOR_DOWNTO
34329: IFFALSE 34413
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
34331: LD_ADDR_VAR 0 6
34335: PUSH
34336: LD_VAR 0 7
34340: PUSH
34341: LD_VAR 0 5
34345: PUSH
34346: LD_INT 1
34348: MINUS
34349: ARRAY
34350: PPUSH
34351: LD_VAR 0 2
34355: PUSH
34356: LD_VAR 0 5
34360: PUSH
34361: LD_INT 1
34363: MINUS
34364: ARRAY
34365: PPUSH
34366: LD_VAR 0 7
34370: PUSH
34371: LD_VAR 0 5
34375: ARRAY
34376: PPUSH
34377: CALL_OW 1
34381: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
34382: LD_ADDR_VAR 0 7
34386: PUSH
34387: LD_VAR 0 7
34391: PPUSH
34392: LD_VAR 0 5
34396: PUSH
34397: LD_INT 1
34399: MINUS
34400: PPUSH
34401: LD_VAR 0 6
34405: PPUSH
34406: CALL_OW 1
34410: ST_TO_ADDR
// end ;
34411: GO 34328
34413: POP
34414: POP
// result := s_arr [ 1 ] ;
34415: LD_ADDR_VAR 0 4
34419: PUSH
34420: LD_VAR 0 7
34424: PUSH
34425: LD_INT 1
34427: ARRAY
34428: ST_TO_ADDR
// end ; end ;
34429: LD_VAR 0 4
34433: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
34434: LD_INT 0
34436: PPUSH
34437: PPUSH
// if not list then
34438: LD_VAR 0 1
34442: NOT
34443: IFFALSE 34447
// exit ;
34445: GO 34538
// i := list [ pos1 ] ;
34447: LD_ADDR_VAR 0 5
34451: PUSH
34452: LD_VAR 0 1
34456: PUSH
34457: LD_VAR 0 2
34461: ARRAY
34462: ST_TO_ADDR
// if not i then
34463: LD_VAR 0 5
34467: NOT
34468: IFFALSE 34472
// exit ;
34470: GO 34538
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
34472: LD_ADDR_VAR 0 1
34476: PUSH
34477: LD_VAR 0 1
34481: PPUSH
34482: LD_VAR 0 2
34486: PPUSH
34487: LD_VAR 0 1
34491: PUSH
34492: LD_VAR 0 3
34496: ARRAY
34497: PPUSH
34498: CALL_OW 1
34502: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
34503: LD_ADDR_VAR 0 1
34507: PUSH
34508: LD_VAR 0 1
34512: PPUSH
34513: LD_VAR 0 3
34517: PPUSH
34518: LD_VAR 0 5
34522: PPUSH
34523: CALL_OW 1
34527: ST_TO_ADDR
// result := list ;
34528: LD_ADDR_VAR 0 4
34532: PUSH
34533: LD_VAR 0 1
34537: ST_TO_ADDR
// end ;
34538: LD_VAR 0 4
34542: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
34543: LD_INT 0
34545: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
34546: LD_ADDR_VAR 0 5
34550: PUSH
34551: LD_VAR 0 1
34555: PPUSH
34556: CALL_OW 250
34560: PPUSH
34561: LD_VAR 0 1
34565: PPUSH
34566: CALL_OW 251
34570: PPUSH
34571: LD_VAR 0 2
34575: PPUSH
34576: LD_VAR 0 3
34580: PPUSH
34581: LD_VAR 0 4
34585: PPUSH
34586: CALL 34964 0 5
34590: ST_TO_ADDR
// end ;
34591: LD_VAR 0 5
34595: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
34596: LD_INT 0
34598: PPUSH
34599: PPUSH
34600: PPUSH
34601: PPUSH
// if not list or not unit then
34602: LD_VAR 0 2
34606: NOT
34607: PUSH
34608: LD_VAR 0 1
34612: NOT
34613: OR
34614: IFFALSE 34618
// exit ;
34616: GO 34959
// result := [ ] ;
34618: LD_ADDR_VAR 0 5
34622: PUSH
34623: EMPTY
34624: ST_TO_ADDR
// for i in list do
34625: LD_ADDR_VAR 0 6
34629: PUSH
34630: LD_VAR 0 2
34634: PUSH
34635: FOR_IN
34636: IFFALSE 34854
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
34638: LD_ADDR_VAR 0 8
34642: PUSH
34643: LD_VAR 0 1
34647: PPUSH
34648: LD_VAR 0 6
34652: PUSH
34653: LD_INT 1
34655: ARRAY
34656: PPUSH
34657: LD_VAR 0 6
34661: PUSH
34662: LD_INT 2
34664: ARRAY
34665: PPUSH
34666: CALL_OW 297
34670: ST_TO_ADDR
// if not Count ( result ) then
34671: LD_VAR 0 5
34675: PPUSH
34676: CALL 31248 0 1
34680: NOT
34681: IFFALSE 34714
// begin result := Join ( result , [ i , tmp ] ) ;
34683: LD_ADDR_VAR 0 5
34687: PUSH
34688: LD_VAR 0 5
34692: PPUSH
34693: LD_VAR 0 6
34697: PUSH
34698: LD_VAR 0 8
34702: PUSH
34703: EMPTY
34704: LIST
34705: LIST
34706: PPUSH
34707: CALL 66848 0 2
34711: ST_TO_ADDR
// continue ;
34712: GO 34635
// end ; if result [ result ] [ 2 ] <= tmp then
34714: LD_VAR 0 5
34718: PUSH
34719: LD_VAR 0 5
34723: ARRAY
34724: PUSH
34725: LD_INT 2
34727: ARRAY
34728: PUSH
34729: LD_VAR 0 8
34733: LESSEQUAL
34734: IFFALSE 34767
// result := Join ( result , [ i , tmp ] ) else
34736: LD_ADDR_VAR 0 5
34740: PUSH
34741: LD_VAR 0 5
34745: PPUSH
34746: LD_VAR 0 6
34750: PUSH
34751: LD_VAR 0 8
34755: PUSH
34756: EMPTY
34757: LIST
34758: LIST
34759: PPUSH
34760: CALL 66848 0 2
34764: ST_TO_ADDR
34765: GO 34852
// begin for j := 1 to Count ( result ) do
34767: LD_ADDR_VAR 0 7
34771: PUSH
34772: DOUBLE
34773: LD_INT 1
34775: DEC
34776: ST_TO_ADDR
34777: LD_VAR 0 5
34781: PPUSH
34782: CALL 31248 0 1
34786: PUSH
34787: FOR_TO
34788: IFFALSE 34850
// begin if tmp < result [ j ] [ 2 ] then
34790: LD_VAR 0 8
34794: PUSH
34795: LD_VAR 0 5
34799: PUSH
34800: LD_VAR 0 7
34804: ARRAY
34805: PUSH
34806: LD_INT 2
34808: ARRAY
34809: LESS
34810: IFFALSE 34848
// begin result := Insert ( result , j , [ i , tmp ] ) ;
34812: LD_ADDR_VAR 0 5
34816: PUSH
34817: LD_VAR 0 5
34821: PPUSH
34822: LD_VAR 0 7
34826: PPUSH
34827: LD_VAR 0 6
34831: PUSH
34832: LD_VAR 0 8
34836: PUSH
34837: EMPTY
34838: LIST
34839: LIST
34840: PPUSH
34841: CALL_OW 2
34845: ST_TO_ADDR
// break ;
34846: GO 34850
// end ; end ;
34848: GO 34787
34850: POP
34851: POP
// end ; end ;
34852: GO 34635
34854: POP
34855: POP
// if result and not asc then
34856: LD_VAR 0 5
34860: PUSH
34861: LD_VAR 0 3
34865: NOT
34866: AND
34867: IFFALSE 34884
// result := ReverseArray ( result ) ;
34869: LD_ADDR_VAR 0 5
34873: PUSH
34874: LD_VAR 0 5
34878: PPUSH
34879: CALL 62124 0 1
34883: ST_TO_ADDR
// tmp := [ ] ;
34884: LD_ADDR_VAR 0 8
34888: PUSH
34889: EMPTY
34890: ST_TO_ADDR
// if mode then
34891: LD_VAR 0 4
34895: IFFALSE 34959
// begin for i := 1 to result do
34897: LD_ADDR_VAR 0 6
34901: PUSH
34902: DOUBLE
34903: LD_INT 1
34905: DEC
34906: ST_TO_ADDR
34907: LD_VAR 0 5
34911: PUSH
34912: FOR_TO
34913: IFFALSE 34947
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
34915: LD_ADDR_VAR 0 8
34919: PUSH
34920: LD_VAR 0 8
34924: PPUSH
34925: LD_VAR 0 5
34929: PUSH
34930: LD_VAR 0 6
34934: ARRAY
34935: PUSH
34936: LD_INT 1
34938: ARRAY
34939: PPUSH
34940: CALL 66848 0 2
34944: ST_TO_ADDR
34945: GO 34912
34947: POP
34948: POP
// result := tmp ;
34949: LD_ADDR_VAR 0 5
34953: PUSH
34954: LD_VAR 0 8
34958: ST_TO_ADDR
// end ; end ;
34959: LD_VAR 0 5
34963: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
34964: LD_INT 0
34966: PPUSH
34967: PPUSH
34968: PPUSH
34969: PPUSH
// if not list then
34970: LD_VAR 0 3
34974: NOT
34975: IFFALSE 34979
// exit ;
34977: GO 35367
// result := [ ] ;
34979: LD_ADDR_VAR 0 6
34983: PUSH
34984: EMPTY
34985: ST_TO_ADDR
// for i in list do
34986: LD_ADDR_VAR 0 7
34990: PUSH
34991: LD_VAR 0 3
34995: PUSH
34996: FOR_IN
34997: IFFALSE 35199
// begin tmp := GetDistUnitXY ( i , x , y ) ;
34999: LD_ADDR_VAR 0 9
35003: PUSH
35004: LD_VAR 0 7
35008: PPUSH
35009: LD_VAR 0 1
35013: PPUSH
35014: LD_VAR 0 2
35018: PPUSH
35019: CALL_OW 297
35023: ST_TO_ADDR
// if not result then
35024: LD_VAR 0 6
35028: NOT
35029: IFFALSE 35055
// result := [ [ i , tmp ] ] else
35031: LD_ADDR_VAR 0 6
35035: PUSH
35036: LD_VAR 0 7
35040: PUSH
35041: LD_VAR 0 9
35045: PUSH
35046: EMPTY
35047: LIST
35048: LIST
35049: PUSH
35050: EMPTY
35051: LIST
35052: ST_TO_ADDR
35053: GO 35197
// begin if result [ result ] [ 2 ] < tmp then
35055: LD_VAR 0 6
35059: PUSH
35060: LD_VAR 0 6
35064: ARRAY
35065: PUSH
35066: LD_INT 2
35068: ARRAY
35069: PUSH
35070: LD_VAR 0 9
35074: LESS
35075: IFFALSE 35117
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
35077: LD_ADDR_VAR 0 6
35081: PUSH
35082: LD_VAR 0 6
35086: PPUSH
35087: LD_VAR 0 6
35091: PUSH
35092: LD_INT 1
35094: PLUS
35095: PPUSH
35096: LD_VAR 0 7
35100: PUSH
35101: LD_VAR 0 9
35105: PUSH
35106: EMPTY
35107: LIST
35108: LIST
35109: PPUSH
35110: CALL_OW 2
35114: ST_TO_ADDR
35115: GO 35197
// for j = 1 to result do
35117: LD_ADDR_VAR 0 8
35121: PUSH
35122: DOUBLE
35123: LD_INT 1
35125: DEC
35126: ST_TO_ADDR
35127: LD_VAR 0 6
35131: PUSH
35132: FOR_TO
35133: IFFALSE 35195
// begin if tmp < result [ j ] [ 2 ] then
35135: LD_VAR 0 9
35139: PUSH
35140: LD_VAR 0 6
35144: PUSH
35145: LD_VAR 0 8
35149: ARRAY
35150: PUSH
35151: LD_INT 2
35153: ARRAY
35154: LESS
35155: IFFALSE 35193
// begin result := Insert ( result , j , [ i , tmp ] ) ;
35157: LD_ADDR_VAR 0 6
35161: PUSH
35162: LD_VAR 0 6
35166: PPUSH
35167: LD_VAR 0 8
35171: PPUSH
35172: LD_VAR 0 7
35176: PUSH
35177: LD_VAR 0 9
35181: PUSH
35182: EMPTY
35183: LIST
35184: LIST
35185: PPUSH
35186: CALL_OW 2
35190: ST_TO_ADDR
// break ;
35191: GO 35195
// end ; end ;
35193: GO 35132
35195: POP
35196: POP
// end ; end ;
35197: GO 34996
35199: POP
35200: POP
// if result and not asc then
35201: LD_VAR 0 6
35205: PUSH
35206: LD_VAR 0 4
35210: NOT
35211: AND
35212: IFFALSE 35287
// begin tmp := result ;
35214: LD_ADDR_VAR 0 9
35218: PUSH
35219: LD_VAR 0 6
35223: ST_TO_ADDR
// for i = tmp downto 1 do
35224: LD_ADDR_VAR 0 7
35228: PUSH
35229: DOUBLE
35230: LD_VAR 0 9
35234: INC
35235: ST_TO_ADDR
35236: LD_INT 1
35238: PUSH
35239: FOR_DOWNTO
35240: IFFALSE 35285
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
35242: LD_ADDR_VAR 0 6
35246: PUSH
35247: LD_VAR 0 6
35251: PPUSH
35252: LD_VAR 0 9
35256: PUSH
35257: LD_VAR 0 7
35261: MINUS
35262: PUSH
35263: LD_INT 1
35265: PLUS
35266: PPUSH
35267: LD_VAR 0 9
35271: PUSH
35272: LD_VAR 0 7
35276: ARRAY
35277: PPUSH
35278: CALL_OW 1
35282: ST_TO_ADDR
35283: GO 35239
35285: POP
35286: POP
// end ; tmp := [ ] ;
35287: LD_ADDR_VAR 0 9
35291: PUSH
35292: EMPTY
35293: ST_TO_ADDR
// if mode then
35294: LD_VAR 0 5
35298: IFFALSE 35367
// begin for i = 1 to result do
35300: LD_ADDR_VAR 0 7
35304: PUSH
35305: DOUBLE
35306: LD_INT 1
35308: DEC
35309: ST_TO_ADDR
35310: LD_VAR 0 6
35314: PUSH
35315: FOR_TO
35316: IFFALSE 35355
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
35318: LD_ADDR_VAR 0 9
35322: PUSH
35323: LD_VAR 0 9
35327: PPUSH
35328: LD_VAR 0 7
35332: PPUSH
35333: LD_VAR 0 6
35337: PUSH
35338: LD_VAR 0 7
35342: ARRAY
35343: PUSH
35344: LD_INT 1
35346: ARRAY
35347: PPUSH
35348: CALL_OW 1
35352: ST_TO_ADDR
35353: GO 35315
35355: POP
35356: POP
// result := tmp ;
35357: LD_ADDR_VAR 0 6
35361: PUSH
35362: LD_VAR 0 9
35366: ST_TO_ADDR
// end ; end ;
35367: LD_VAR 0 6
35371: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
35372: LD_INT 0
35374: PPUSH
35375: PPUSH
35376: PPUSH
35377: PPUSH
35378: PPUSH
35379: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
35380: LD_ADDR_VAR 0 5
35384: PUSH
35385: LD_INT 0
35387: PUSH
35388: LD_INT 0
35390: PUSH
35391: LD_INT 0
35393: PUSH
35394: EMPTY
35395: PUSH
35396: EMPTY
35397: LIST
35398: LIST
35399: LIST
35400: LIST
35401: ST_TO_ADDR
// if not x or not y then
35402: LD_VAR 0 2
35406: NOT
35407: PUSH
35408: LD_VAR 0 3
35412: NOT
35413: OR
35414: IFFALSE 35418
// exit ;
35416: GO 37068
// if not range then
35418: LD_VAR 0 4
35422: NOT
35423: IFFALSE 35433
// range := 10 ;
35425: LD_ADDR_VAR 0 4
35429: PUSH
35430: LD_INT 10
35432: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
35433: LD_ADDR_VAR 0 8
35437: PUSH
35438: LD_INT 81
35440: PUSH
35441: LD_VAR 0 1
35445: PUSH
35446: EMPTY
35447: LIST
35448: LIST
35449: PUSH
35450: LD_INT 92
35452: PUSH
35453: LD_VAR 0 2
35457: PUSH
35458: LD_VAR 0 3
35462: PUSH
35463: LD_VAR 0 4
35467: PUSH
35468: EMPTY
35469: LIST
35470: LIST
35471: LIST
35472: LIST
35473: PUSH
35474: LD_INT 3
35476: PUSH
35477: LD_INT 21
35479: PUSH
35480: LD_INT 3
35482: PUSH
35483: EMPTY
35484: LIST
35485: LIST
35486: PUSH
35487: EMPTY
35488: LIST
35489: LIST
35490: PUSH
35491: EMPTY
35492: LIST
35493: LIST
35494: LIST
35495: PPUSH
35496: CALL_OW 69
35500: ST_TO_ADDR
// if not tmp then
35501: LD_VAR 0 8
35505: NOT
35506: IFFALSE 35510
// exit ;
35508: GO 37068
// for i in tmp do
35510: LD_ADDR_VAR 0 6
35514: PUSH
35515: LD_VAR 0 8
35519: PUSH
35520: FOR_IN
35521: IFFALSE 37043
// begin points := [ 0 , 0 , 0 ] ;
35523: LD_ADDR_VAR 0 9
35527: PUSH
35528: LD_INT 0
35530: PUSH
35531: LD_INT 0
35533: PUSH
35534: LD_INT 0
35536: PUSH
35537: EMPTY
35538: LIST
35539: LIST
35540: LIST
35541: ST_TO_ADDR
// bpoints := 1 ;
35542: LD_ADDR_VAR 0 10
35546: PUSH
35547: LD_INT 1
35549: ST_TO_ADDR
// case GetType ( i ) of unit_human :
35550: LD_VAR 0 6
35554: PPUSH
35555: CALL_OW 247
35559: PUSH
35560: LD_INT 1
35562: DOUBLE
35563: EQUAL
35564: IFTRUE 35568
35566: GO 36146
35568: POP
// begin if GetClass ( i ) = 1 then
35569: LD_VAR 0 6
35573: PPUSH
35574: CALL_OW 257
35578: PUSH
35579: LD_INT 1
35581: EQUAL
35582: IFFALSE 35603
// points := [ 10 , 5 , 3 ] ;
35584: LD_ADDR_VAR 0 9
35588: PUSH
35589: LD_INT 10
35591: PUSH
35592: LD_INT 5
35594: PUSH
35595: LD_INT 3
35597: PUSH
35598: EMPTY
35599: LIST
35600: LIST
35601: LIST
35602: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
35603: LD_VAR 0 6
35607: PPUSH
35608: CALL_OW 257
35612: PUSH
35613: LD_INT 2
35615: PUSH
35616: LD_INT 3
35618: PUSH
35619: LD_INT 4
35621: PUSH
35622: EMPTY
35623: LIST
35624: LIST
35625: LIST
35626: IN
35627: IFFALSE 35648
// points := [ 3 , 2 , 1 ] ;
35629: LD_ADDR_VAR 0 9
35633: PUSH
35634: LD_INT 3
35636: PUSH
35637: LD_INT 2
35639: PUSH
35640: LD_INT 1
35642: PUSH
35643: EMPTY
35644: LIST
35645: LIST
35646: LIST
35647: ST_TO_ADDR
// if GetClass ( i ) = 5 then
35648: LD_VAR 0 6
35652: PPUSH
35653: CALL_OW 257
35657: PUSH
35658: LD_INT 5
35660: EQUAL
35661: IFFALSE 35682
// points := [ 130 , 5 , 2 ] ;
35663: LD_ADDR_VAR 0 9
35667: PUSH
35668: LD_INT 130
35670: PUSH
35671: LD_INT 5
35673: PUSH
35674: LD_INT 2
35676: PUSH
35677: EMPTY
35678: LIST
35679: LIST
35680: LIST
35681: ST_TO_ADDR
// if GetClass ( i ) = 8 then
35682: LD_VAR 0 6
35686: PPUSH
35687: CALL_OW 257
35691: PUSH
35692: LD_INT 8
35694: EQUAL
35695: IFFALSE 35716
// points := [ 35 , 35 , 30 ] ;
35697: LD_ADDR_VAR 0 9
35701: PUSH
35702: LD_INT 35
35704: PUSH
35705: LD_INT 35
35707: PUSH
35708: LD_INT 30
35710: PUSH
35711: EMPTY
35712: LIST
35713: LIST
35714: LIST
35715: ST_TO_ADDR
// if GetClass ( i ) = 9 then
35716: LD_VAR 0 6
35720: PPUSH
35721: CALL_OW 257
35725: PUSH
35726: LD_INT 9
35728: EQUAL
35729: IFFALSE 35750
// points := [ 20 , 55 , 40 ] ;
35731: LD_ADDR_VAR 0 9
35735: PUSH
35736: LD_INT 20
35738: PUSH
35739: LD_INT 55
35741: PUSH
35742: LD_INT 40
35744: PUSH
35745: EMPTY
35746: LIST
35747: LIST
35748: LIST
35749: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
35750: LD_VAR 0 6
35754: PPUSH
35755: CALL_OW 257
35759: PUSH
35760: LD_INT 12
35762: PUSH
35763: LD_INT 16
35765: PUSH
35766: EMPTY
35767: LIST
35768: LIST
35769: IN
35770: IFFALSE 35791
// points := [ 5 , 3 , 2 ] ;
35772: LD_ADDR_VAR 0 9
35776: PUSH
35777: LD_INT 5
35779: PUSH
35780: LD_INT 3
35782: PUSH
35783: LD_INT 2
35785: PUSH
35786: EMPTY
35787: LIST
35788: LIST
35789: LIST
35790: ST_TO_ADDR
// if GetClass ( i ) = 17 then
35791: LD_VAR 0 6
35795: PPUSH
35796: CALL_OW 257
35800: PUSH
35801: LD_INT 17
35803: EQUAL
35804: IFFALSE 35825
// points := [ 100 , 50 , 75 ] ;
35806: LD_ADDR_VAR 0 9
35810: PUSH
35811: LD_INT 100
35813: PUSH
35814: LD_INT 50
35816: PUSH
35817: LD_INT 75
35819: PUSH
35820: EMPTY
35821: LIST
35822: LIST
35823: LIST
35824: ST_TO_ADDR
// if GetClass ( i ) = 15 then
35825: LD_VAR 0 6
35829: PPUSH
35830: CALL_OW 257
35834: PUSH
35835: LD_INT 15
35837: EQUAL
35838: IFFALSE 35859
// points := [ 10 , 5 , 3 ] ;
35840: LD_ADDR_VAR 0 9
35844: PUSH
35845: LD_INT 10
35847: PUSH
35848: LD_INT 5
35850: PUSH
35851: LD_INT 3
35853: PUSH
35854: EMPTY
35855: LIST
35856: LIST
35857: LIST
35858: ST_TO_ADDR
// if GetClass ( i ) = 14 then
35859: LD_VAR 0 6
35863: PPUSH
35864: CALL_OW 257
35868: PUSH
35869: LD_INT 14
35871: EQUAL
35872: IFFALSE 35893
// points := [ 10 , 0 , 0 ] ;
35874: LD_ADDR_VAR 0 9
35878: PUSH
35879: LD_INT 10
35881: PUSH
35882: LD_INT 0
35884: PUSH
35885: LD_INT 0
35887: PUSH
35888: EMPTY
35889: LIST
35890: LIST
35891: LIST
35892: ST_TO_ADDR
// if GetClass ( i ) = 11 then
35893: LD_VAR 0 6
35897: PPUSH
35898: CALL_OW 257
35902: PUSH
35903: LD_INT 11
35905: EQUAL
35906: IFFALSE 35927
// points := [ 30 , 10 , 5 ] ;
35908: LD_ADDR_VAR 0 9
35912: PUSH
35913: LD_INT 30
35915: PUSH
35916: LD_INT 10
35918: PUSH
35919: LD_INT 5
35921: PUSH
35922: EMPTY
35923: LIST
35924: LIST
35925: LIST
35926: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
35927: LD_VAR 0 1
35931: PPUSH
35932: LD_INT 5
35934: PPUSH
35935: CALL_OW 321
35939: PUSH
35940: LD_INT 2
35942: EQUAL
35943: IFFALSE 35960
// bpoints := bpoints * 1.8 ;
35945: LD_ADDR_VAR 0 10
35949: PUSH
35950: LD_VAR 0 10
35954: PUSH
35955: LD_REAL  1.80000000000000E+0000
35958: MUL
35959: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
35960: LD_VAR 0 6
35964: PPUSH
35965: CALL_OW 257
35969: PUSH
35970: LD_INT 1
35972: PUSH
35973: LD_INT 2
35975: PUSH
35976: LD_INT 3
35978: PUSH
35979: LD_INT 4
35981: PUSH
35982: EMPTY
35983: LIST
35984: LIST
35985: LIST
35986: LIST
35987: IN
35988: PUSH
35989: LD_VAR 0 1
35993: PPUSH
35994: LD_INT 51
35996: PPUSH
35997: CALL_OW 321
36001: PUSH
36002: LD_INT 2
36004: EQUAL
36005: AND
36006: IFFALSE 36023
// bpoints := bpoints * 1.2 ;
36008: LD_ADDR_VAR 0 10
36012: PUSH
36013: LD_VAR 0 10
36017: PUSH
36018: LD_REAL  1.20000000000000E+0000
36021: MUL
36022: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
36023: LD_VAR 0 6
36027: PPUSH
36028: CALL_OW 257
36032: PUSH
36033: LD_INT 5
36035: PUSH
36036: LD_INT 7
36038: PUSH
36039: LD_INT 9
36041: PUSH
36042: EMPTY
36043: LIST
36044: LIST
36045: LIST
36046: IN
36047: PUSH
36048: LD_VAR 0 1
36052: PPUSH
36053: LD_INT 52
36055: PPUSH
36056: CALL_OW 321
36060: PUSH
36061: LD_INT 2
36063: EQUAL
36064: AND
36065: IFFALSE 36082
// bpoints := bpoints * 1.5 ;
36067: LD_ADDR_VAR 0 10
36071: PUSH
36072: LD_VAR 0 10
36076: PUSH
36077: LD_REAL  1.50000000000000E+0000
36080: MUL
36081: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
36082: LD_VAR 0 1
36086: PPUSH
36087: LD_INT 66
36089: PPUSH
36090: CALL_OW 321
36094: PUSH
36095: LD_INT 2
36097: EQUAL
36098: IFFALSE 36115
// bpoints := bpoints * 1.1 ;
36100: LD_ADDR_VAR 0 10
36104: PUSH
36105: LD_VAR 0 10
36109: PUSH
36110: LD_REAL  1.10000000000000E+0000
36113: MUL
36114: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
36115: LD_ADDR_VAR 0 10
36119: PUSH
36120: LD_VAR 0 10
36124: PUSH
36125: LD_VAR 0 6
36129: PPUSH
36130: LD_INT 1
36132: PPUSH
36133: CALL_OW 259
36137: PUSH
36138: LD_REAL  1.15000000000000E+0000
36141: MUL
36142: MUL
36143: ST_TO_ADDR
// end ; unit_vehicle :
36144: GO 36972
36146: LD_INT 2
36148: DOUBLE
36149: EQUAL
36150: IFTRUE 36154
36152: GO 36960
36154: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
36155: LD_VAR 0 6
36159: PPUSH
36160: CALL_OW 264
36164: PUSH
36165: LD_INT 2
36167: PUSH
36168: LD_INT 42
36170: PUSH
36171: LD_INT 24
36173: PUSH
36174: EMPTY
36175: LIST
36176: LIST
36177: LIST
36178: IN
36179: IFFALSE 36200
// points := [ 25 , 5 , 3 ] ;
36181: LD_ADDR_VAR 0 9
36185: PUSH
36186: LD_INT 25
36188: PUSH
36189: LD_INT 5
36191: PUSH
36192: LD_INT 3
36194: PUSH
36195: EMPTY
36196: LIST
36197: LIST
36198: LIST
36199: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
36200: LD_VAR 0 6
36204: PPUSH
36205: CALL_OW 264
36209: PUSH
36210: LD_INT 4
36212: PUSH
36213: LD_INT 43
36215: PUSH
36216: LD_INT 25
36218: PUSH
36219: EMPTY
36220: LIST
36221: LIST
36222: LIST
36223: IN
36224: IFFALSE 36245
// points := [ 40 , 15 , 5 ] ;
36226: LD_ADDR_VAR 0 9
36230: PUSH
36231: LD_INT 40
36233: PUSH
36234: LD_INT 15
36236: PUSH
36237: LD_INT 5
36239: PUSH
36240: EMPTY
36241: LIST
36242: LIST
36243: LIST
36244: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
36245: LD_VAR 0 6
36249: PPUSH
36250: CALL_OW 264
36254: PUSH
36255: LD_INT 3
36257: PUSH
36258: LD_INT 23
36260: PUSH
36261: EMPTY
36262: LIST
36263: LIST
36264: IN
36265: IFFALSE 36286
// points := [ 7 , 25 , 8 ] ;
36267: LD_ADDR_VAR 0 9
36271: PUSH
36272: LD_INT 7
36274: PUSH
36275: LD_INT 25
36277: PUSH
36278: LD_INT 8
36280: PUSH
36281: EMPTY
36282: LIST
36283: LIST
36284: LIST
36285: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
36286: LD_VAR 0 6
36290: PPUSH
36291: CALL_OW 264
36295: PUSH
36296: LD_INT 5
36298: PUSH
36299: LD_INT 27
36301: PUSH
36302: LD_INT 44
36304: PUSH
36305: EMPTY
36306: LIST
36307: LIST
36308: LIST
36309: IN
36310: IFFALSE 36331
// points := [ 14 , 50 , 16 ] ;
36312: LD_ADDR_VAR 0 9
36316: PUSH
36317: LD_INT 14
36319: PUSH
36320: LD_INT 50
36322: PUSH
36323: LD_INT 16
36325: PUSH
36326: EMPTY
36327: LIST
36328: LIST
36329: LIST
36330: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
36331: LD_VAR 0 6
36335: PPUSH
36336: CALL_OW 264
36340: PUSH
36341: LD_INT 6
36343: PUSH
36344: LD_INT 46
36346: PUSH
36347: EMPTY
36348: LIST
36349: LIST
36350: IN
36351: IFFALSE 36372
// points := [ 32 , 120 , 70 ] ;
36353: LD_ADDR_VAR 0 9
36357: PUSH
36358: LD_INT 32
36360: PUSH
36361: LD_INT 120
36363: PUSH
36364: LD_INT 70
36366: PUSH
36367: EMPTY
36368: LIST
36369: LIST
36370: LIST
36371: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
36372: LD_VAR 0 6
36376: PPUSH
36377: CALL_OW 264
36381: PUSH
36382: LD_INT 7
36384: PUSH
36385: LD_INT 28
36387: PUSH
36388: LD_INT 45
36390: PUSH
36391: LD_INT 92
36393: PUSH
36394: EMPTY
36395: LIST
36396: LIST
36397: LIST
36398: LIST
36399: IN
36400: IFFALSE 36421
// points := [ 35 , 20 , 45 ] ;
36402: LD_ADDR_VAR 0 9
36406: PUSH
36407: LD_INT 35
36409: PUSH
36410: LD_INT 20
36412: PUSH
36413: LD_INT 45
36415: PUSH
36416: EMPTY
36417: LIST
36418: LIST
36419: LIST
36420: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
36421: LD_VAR 0 6
36425: PPUSH
36426: CALL_OW 264
36430: PUSH
36431: LD_INT 47
36433: PUSH
36434: EMPTY
36435: LIST
36436: IN
36437: IFFALSE 36458
// points := [ 67 , 45 , 75 ] ;
36439: LD_ADDR_VAR 0 9
36443: PUSH
36444: LD_INT 67
36446: PUSH
36447: LD_INT 45
36449: PUSH
36450: LD_INT 75
36452: PUSH
36453: EMPTY
36454: LIST
36455: LIST
36456: LIST
36457: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
36458: LD_VAR 0 6
36462: PPUSH
36463: CALL_OW 264
36467: PUSH
36468: LD_INT 26
36470: PUSH
36471: EMPTY
36472: LIST
36473: IN
36474: IFFALSE 36495
// points := [ 120 , 30 , 80 ] ;
36476: LD_ADDR_VAR 0 9
36480: PUSH
36481: LD_INT 120
36483: PUSH
36484: LD_INT 30
36486: PUSH
36487: LD_INT 80
36489: PUSH
36490: EMPTY
36491: LIST
36492: LIST
36493: LIST
36494: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
36495: LD_VAR 0 6
36499: PPUSH
36500: CALL_OW 264
36504: PUSH
36505: LD_INT 22
36507: PUSH
36508: EMPTY
36509: LIST
36510: IN
36511: IFFALSE 36532
// points := [ 40 , 1 , 1 ] ;
36513: LD_ADDR_VAR 0 9
36517: PUSH
36518: LD_INT 40
36520: PUSH
36521: LD_INT 1
36523: PUSH
36524: LD_INT 1
36526: PUSH
36527: EMPTY
36528: LIST
36529: LIST
36530: LIST
36531: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
36532: LD_VAR 0 6
36536: PPUSH
36537: CALL_OW 264
36541: PUSH
36542: LD_INT 29
36544: PUSH
36545: EMPTY
36546: LIST
36547: IN
36548: IFFALSE 36569
// points := [ 70 , 200 , 400 ] ;
36550: LD_ADDR_VAR 0 9
36554: PUSH
36555: LD_INT 70
36557: PUSH
36558: LD_INT 200
36560: PUSH
36561: LD_INT 400
36563: PUSH
36564: EMPTY
36565: LIST
36566: LIST
36567: LIST
36568: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
36569: LD_VAR 0 6
36573: PPUSH
36574: CALL_OW 264
36578: PUSH
36579: LD_INT 14
36581: PUSH
36582: LD_INT 53
36584: PUSH
36585: EMPTY
36586: LIST
36587: LIST
36588: IN
36589: IFFALSE 36610
// points := [ 40 , 10 , 20 ] ;
36591: LD_ADDR_VAR 0 9
36595: PUSH
36596: LD_INT 40
36598: PUSH
36599: LD_INT 10
36601: PUSH
36602: LD_INT 20
36604: PUSH
36605: EMPTY
36606: LIST
36607: LIST
36608: LIST
36609: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
36610: LD_VAR 0 6
36614: PPUSH
36615: CALL_OW 264
36619: PUSH
36620: LD_INT 9
36622: PUSH
36623: EMPTY
36624: LIST
36625: IN
36626: IFFALSE 36647
// points := [ 5 , 70 , 20 ] ;
36628: LD_ADDR_VAR 0 9
36632: PUSH
36633: LD_INT 5
36635: PUSH
36636: LD_INT 70
36638: PUSH
36639: LD_INT 20
36641: PUSH
36642: EMPTY
36643: LIST
36644: LIST
36645: LIST
36646: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
36647: LD_VAR 0 6
36651: PPUSH
36652: CALL_OW 264
36656: PUSH
36657: LD_INT 10
36659: PUSH
36660: EMPTY
36661: LIST
36662: IN
36663: IFFALSE 36684
// points := [ 35 , 110 , 70 ] ;
36665: LD_ADDR_VAR 0 9
36669: PUSH
36670: LD_INT 35
36672: PUSH
36673: LD_INT 110
36675: PUSH
36676: LD_INT 70
36678: PUSH
36679: EMPTY
36680: LIST
36681: LIST
36682: LIST
36683: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
36684: LD_VAR 0 6
36688: PPUSH
36689: CALL_OW 265
36693: PUSH
36694: LD_INT 25
36696: EQUAL
36697: IFFALSE 36718
// points := [ 80 , 65 , 100 ] ;
36699: LD_ADDR_VAR 0 9
36703: PUSH
36704: LD_INT 80
36706: PUSH
36707: LD_INT 65
36709: PUSH
36710: LD_INT 100
36712: PUSH
36713: EMPTY
36714: LIST
36715: LIST
36716: LIST
36717: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
36718: LD_VAR 0 6
36722: PPUSH
36723: CALL_OW 263
36727: PUSH
36728: LD_INT 1
36730: EQUAL
36731: IFFALSE 36766
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
36733: LD_ADDR_VAR 0 10
36737: PUSH
36738: LD_VAR 0 10
36742: PUSH
36743: LD_VAR 0 6
36747: PPUSH
36748: CALL_OW 311
36752: PPUSH
36753: LD_INT 3
36755: PPUSH
36756: CALL_OW 259
36760: PUSH
36761: LD_INT 4
36763: MUL
36764: MUL
36765: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
36766: LD_VAR 0 6
36770: PPUSH
36771: CALL_OW 263
36775: PUSH
36776: LD_INT 2
36778: EQUAL
36779: IFFALSE 36830
// begin j := IsControledBy ( i ) ;
36781: LD_ADDR_VAR 0 7
36785: PUSH
36786: LD_VAR 0 6
36790: PPUSH
36791: CALL_OW 312
36795: ST_TO_ADDR
// if j then
36796: LD_VAR 0 7
36800: IFFALSE 36830
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
36802: LD_ADDR_VAR 0 10
36806: PUSH
36807: LD_VAR 0 10
36811: PUSH
36812: LD_VAR 0 7
36816: PPUSH
36817: LD_INT 3
36819: PPUSH
36820: CALL_OW 259
36824: PUSH
36825: LD_INT 3
36827: MUL
36828: MUL
36829: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
36830: LD_VAR 0 6
36834: PPUSH
36835: CALL_OW 264
36839: PUSH
36840: LD_INT 5
36842: PUSH
36843: LD_INT 6
36845: PUSH
36846: LD_INT 46
36848: PUSH
36849: LD_INT 44
36851: PUSH
36852: LD_INT 47
36854: PUSH
36855: LD_INT 45
36857: PUSH
36858: LD_INT 28
36860: PUSH
36861: LD_INT 7
36863: PUSH
36864: LD_INT 27
36866: PUSH
36867: LD_INT 29
36869: PUSH
36870: EMPTY
36871: LIST
36872: LIST
36873: LIST
36874: LIST
36875: LIST
36876: LIST
36877: LIST
36878: LIST
36879: LIST
36880: LIST
36881: IN
36882: PUSH
36883: LD_VAR 0 1
36887: PPUSH
36888: LD_INT 52
36890: PPUSH
36891: CALL_OW 321
36895: PUSH
36896: LD_INT 2
36898: EQUAL
36899: AND
36900: IFFALSE 36917
// bpoints := bpoints * 1.2 ;
36902: LD_ADDR_VAR 0 10
36906: PUSH
36907: LD_VAR 0 10
36911: PUSH
36912: LD_REAL  1.20000000000000E+0000
36915: MUL
36916: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
36917: LD_VAR 0 6
36921: PPUSH
36922: CALL_OW 264
36926: PUSH
36927: LD_INT 6
36929: PUSH
36930: LD_INT 46
36932: PUSH
36933: LD_INT 47
36935: PUSH
36936: EMPTY
36937: LIST
36938: LIST
36939: LIST
36940: IN
36941: IFFALSE 36958
// bpoints := bpoints * 1.2 ;
36943: LD_ADDR_VAR 0 10
36947: PUSH
36948: LD_VAR 0 10
36952: PUSH
36953: LD_REAL  1.20000000000000E+0000
36956: MUL
36957: ST_TO_ADDR
// end ; unit_building :
36958: GO 36972
36960: LD_INT 3
36962: DOUBLE
36963: EQUAL
36964: IFTRUE 36968
36966: GO 36971
36968: POP
// ; end ;
36969: GO 36972
36971: POP
// for j = 1 to 3 do
36972: LD_ADDR_VAR 0 7
36976: PUSH
36977: DOUBLE
36978: LD_INT 1
36980: DEC
36981: ST_TO_ADDR
36982: LD_INT 3
36984: PUSH
36985: FOR_TO
36986: IFFALSE 37039
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
36988: LD_ADDR_VAR 0 5
36992: PUSH
36993: LD_VAR 0 5
36997: PPUSH
36998: LD_VAR 0 7
37002: PPUSH
37003: LD_VAR 0 5
37007: PUSH
37008: LD_VAR 0 7
37012: ARRAY
37013: PUSH
37014: LD_VAR 0 9
37018: PUSH
37019: LD_VAR 0 7
37023: ARRAY
37024: PUSH
37025: LD_VAR 0 10
37029: MUL
37030: PLUS
37031: PPUSH
37032: CALL_OW 1
37036: ST_TO_ADDR
37037: GO 36985
37039: POP
37040: POP
// end ;
37041: GO 35520
37043: POP
37044: POP
// result := Replace ( result , 4 , tmp ) ;
37045: LD_ADDR_VAR 0 5
37049: PUSH
37050: LD_VAR 0 5
37054: PPUSH
37055: LD_INT 4
37057: PPUSH
37058: LD_VAR 0 8
37062: PPUSH
37063: CALL_OW 1
37067: ST_TO_ADDR
// end ;
37068: LD_VAR 0 5
37072: RET
// export function DangerAtRange ( unit , range ) ; begin
37073: LD_INT 0
37075: PPUSH
// if not unit then
37076: LD_VAR 0 1
37080: NOT
37081: IFFALSE 37085
// exit ;
37083: GO 37130
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
37085: LD_ADDR_VAR 0 3
37089: PUSH
37090: LD_VAR 0 1
37094: PPUSH
37095: CALL_OW 255
37099: PPUSH
37100: LD_VAR 0 1
37104: PPUSH
37105: CALL_OW 250
37109: PPUSH
37110: LD_VAR 0 1
37114: PPUSH
37115: CALL_OW 251
37119: PPUSH
37120: LD_VAR 0 2
37124: PPUSH
37125: CALL 35372 0 4
37129: ST_TO_ADDR
// end ;
37130: LD_VAR 0 3
37134: RET
// export function DangerInArea ( side , area ) ; begin
37135: LD_INT 0
37137: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
37138: LD_ADDR_VAR 0 3
37142: PUSH
37143: LD_VAR 0 2
37147: PPUSH
37148: LD_INT 81
37150: PUSH
37151: LD_VAR 0 1
37155: PUSH
37156: EMPTY
37157: LIST
37158: LIST
37159: PPUSH
37160: CALL_OW 70
37164: ST_TO_ADDR
// end ;
37165: LD_VAR 0 3
37169: RET
// export function IsExtension ( b ) ; begin
37170: LD_INT 0
37172: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
37173: LD_ADDR_VAR 0 2
37177: PUSH
37178: LD_VAR 0 1
37182: PUSH
37183: LD_INT 23
37185: PUSH
37186: LD_INT 20
37188: PUSH
37189: LD_INT 22
37191: PUSH
37192: LD_INT 17
37194: PUSH
37195: LD_INT 24
37197: PUSH
37198: LD_INT 21
37200: PUSH
37201: LD_INT 19
37203: PUSH
37204: LD_INT 16
37206: PUSH
37207: LD_INT 25
37209: PUSH
37210: LD_INT 18
37212: PUSH
37213: EMPTY
37214: LIST
37215: LIST
37216: LIST
37217: LIST
37218: LIST
37219: LIST
37220: LIST
37221: LIST
37222: LIST
37223: LIST
37224: IN
37225: ST_TO_ADDR
// end ;
37226: LD_VAR 0 2
37230: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
37231: LD_INT 0
37233: PPUSH
37234: PPUSH
37235: PPUSH
// result := [ ] ;
37236: LD_ADDR_VAR 0 4
37240: PUSH
37241: EMPTY
37242: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
37243: LD_ADDR_VAR 0 5
37247: PUSH
37248: LD_VAR 0 2
37252: PPUSH
37253: LD_INT 21
37255: PUSH
37256: LD_INT 3
37258: PUSH
37259: EMPTY
37260: LIST
37261: LIST
37262: PPUSH
37263: CALL_OW 70
37267: ST_TO_ADDR
// if not tmp then
37268: LD_VAR 0 5
37272: NOT
37273: IFFALSE 37277
// exit ;
37275: GO 37341
// if checkLink then
37277: LD_VAR 0 3
37281: IFFALSE 37331
// begin for i in tmp do
37283: LD_ADDR_VAR 0 6
37287: PUSH
37288: LD_VAR 0 5
37292: PUSH
37293: FOR_IN
37294: IFFALSE 37329
// if GetBase ( i ) <> base then
37296: LD_VAR 0 6
37300: PPUSH
37301: CALL_OW 274
37305: PUSH
37306: LD_VAR 0 1
37310: NONEQUAL
37311: IFFALSE 37327
// ComLinkToBase ( base , i ) ;
37313: LD_VAR 0 1
37317: PPUSH
37318: LD_VAR 0 6
37322: PPUSH
37323: CALL_OW 169
37327: GO 37293
37329: POP
37330: POP
// end ; result := tmp ;
37331: LD_ADDR_VAR 0 4
37335: PUSH
37336: LD_VAR 0 5
37340: ST_TO_ADDR
// end ;
37341: LD_VAR 0 4
37345: RET
// export function ComComplete ( units , b ) ; var i ; begin
37346: LD_INT 0
37348: PPUSH
37349: PPUSH
// if not units then
37350: LD_VAR 0 1
37354: NOT
37355: IFFALSE 37359
// exit ;
37357: GO 37449
// for i in units do
37359: LD_ADDR_VAR 0 4
37363: PUSH
37364: LD_VAR 0 1
37368: PUSH
37369: FOR_IN
37370: IFFALSE 37447
// if BuildingStatus ( b ) = bs_build then
37372: LD_VAR 0 2
37376: PPUSH
37377: CALL_OW 461
37381: PUSH
37382: LD_INT 1
37384: EQUAL
37385: IFFALSE 37445
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
37387: LD_VAR 0 4
37391: PPUSH
37392: LD_STRING h
37394: PUSH
37395: LD_VAR 0 2
37399: PPUSH
37400: CALL_OW 250
37404: PUSH
37405: LD_VAR 0 2
37409: PPUSH
37410: CALL_OW 251
37414: PUSH
37415: LD_VAR 0 2
37419: PUSH
37420: LD_INT 0
37422: PUSH
37423: LD_INT 0
37425: PUSH
37426: LD_INT 0
37428: PUSH
37429: EMPTY
37430: LIST
37431: LIST
37432: LIST
37433: LIST
37434: LIST
37435: LIST
37436: LIST
37437: PUSH
37438: EMPTY
37439: LIST
37440: PPUSH
37441: CALL_OW 446
37445: GO 37369
37447: POP
37448: POP
// end ;
37449: LD_VAR 0 3
37453: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
37454: LD_INT 0
37456: PPUSH
37457: PPUSH
37458: PPUSH
37459: PPUSH
37460: PPUSH
37461: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
37462: LD_VAR 0 1
37466: NOT
37467: PUSH
37468: LD_VAR 0 1
37472: PPUSH
37473: CALL_OW 263
37477: PUSH
37478: LD_INT 2
37480: NONEQUAL
37481: OR
37482: IFFALSE 37486
// exit ;
37484: GO 37802
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
37486: LD_ADDR_VAR 0 6
37490: PUSH
37491: LD_INT 22
37493: PUSH
37494: LD_VAR 0 1
37498: PPUSH
37499: CALL_OW 255
37503: PUSH
37504: EMPTY
37505: LIST
37506: LIST
37507: PUSH
37508: LD_INT 2
37510: PUSH
37511: LD_INT 30
37513: PUSH
37514: LD_INT 36
37516: PUSH
37517: EMPTY
37518: LIST
37519: LIST
37520: PUSH
37521: LD_INT 34
37523: PUSH
37524: LD_INT 31
37526: PUSH
37527: EMPTY
37528: LIST
37529: LIST
37530: PUSH
37531: EMPTY
37532: LIST
37533: LIST
37534: LIST
37535: PUSH
37536: EMPTY
37537: LIST
37538: LIST
37539: PPUSH
37540: CALL_OW 69
37544: ST_TO_ADDR
// if not tmp then
37545: LD_VAR 0 6
37549: NOT
37550: IFFALSE 37554
// exit ;
37552: GO 37802
// result := [ ] ;
37554: LD_ADDR_VAR 0 2
37558: PUSH
37559: EMPTY
37560: ST_TO_ADDR
// for i in tmp do
37561: LD_ADDR_VAR 0 3
37565: PUSH
37566: LD_VAR 0 6
37570: PUSH
37571: FOR_IN
37572: IFFALSE 37643
// begin t := UnitsInside ( i ) ;
37574: LD_ADDR_VAR 0 4
37578: PUSH
37579: LD_VAR 0 3
37583: PPUSH
37584: CALL_OW 313
37588: ST_TO_ADDR
// if t then
37589: LD_VAR 0 4
37593: IFFALSE 37641
// for j in t do
37595: LD_ADDR_VAR 0 7
37599: PUSH
37600: LD_VAR 0 4
37604: PUSH
37605: FOR_IN
37606: IFFALSE 37639
// result := Replace ( result , result + 1 , j ) ;
37608: LD_ADDR_VAR 0 2
37612: PUSH
37613: LD_VAR 0 2
37617: PPUSH
37618: LD_VAR 0 2
37622: PUSH
37623: LD_INT 1
37625: PLUS
37626: PPUSH
37627: LD_VAR 0 7
37631: PPUSH
37632: CALL_OW 1
37636: ST_TO_ADDR
37637: GO 37605
37639: POP
37640: POP
// end ;
37641: GO 37571
37643: POP
37644: POP
// if not result then
37645: LD_VAR 0 2
37649: NOT
37650: IFFALSE 37654
// exit ;
37652: GO 37802
// mech := result [ 1 ] ;
37654: LD_ADDR_VAR 0 5
37658: PUSH
37659: LD_VAR 0 2
37663: PUSH
37664: LD_INT 1
37666: ARRAY
37667: ST_TO_ADDR
// if result > 1 then
37668: LD_VAR 0 2
37672: PUSH
37673: LD_INT 1
37675: GREATER
37676: IFFALSE 37788
// begin for i = 2 to result do
37678: LD_ADDR_VAR 0 3
37682: PUSH
37683: DOUBLE
37684: LD_INT 2
37686: DEC
37687: ST_TO_ADDR
37688: LD_VAR 0 2
37692: PUSH
37693: FOR_TO
37694: IFFALSE 37786
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
37696: LD_ADDR_VAR 0 4
37700: PUSH
37701: LD_VAR 0 2
37705: PUSH
37706: LD_VAR 0 3
37710: ARRAY
37711: PPUSH
37712: LD_INT 3
37714: PPUSH
37715: CALL_OW 259
37719: PUSH
37720: LD_VAR 0 2
37724: PUSH
37725: LD_VAR 0 3
37729: ARRAY
37730: PPUSH
37731: CALL_OW 432
37735: MINUS
37736: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
37737: LD_VAR 0 4
37741: PUSH
37742: LD_VAR 0 5
37746: PPUSH
37747: LD_INT 3
37749: PPUSH
37750: CALL_OW 259
37754: PUSH
37755: LD_VAR 0 5
37759: PPUSH
37760: CALL_OW 432
37764: MINUS
37765: GREATEREQUAL
37766: IFFALSE 37784
// mech := result [ i ] ;
37768: LD_ADDR_VAR 0 5
37772: PUSH
37773: LD_VAR 0 2
37777: PUSH
37778: LD_VAR 0 3
37782: ARRAY
37783: ST_TO_ADDR
// end ;
37784: GO 37693
37786: POP
37787: POP
// end ; ComLinkTo ( vehicle , mech ) ;
37788: LD_VAR 0 1
37792: PPUSH
37793: LD_VAR 0 5
37797: PPUSH
37798: CALL_OW 135
// end ;
37802: LD_VAR 0 2
37806: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
37807: LD_INT 0
37809: PPUSH
37810: PPUSH
37811: PPUSH
37812: PPUSH
37813: PPUSH
37814: PPUSH
37815: PPUSH
37816: PPUSH
37817: PPUSH
37818: PPUSH
37819: PPUSH
37820: PPUSH
37821: PPUSH
// result := [ ] ;
37822: LD_ADDR_VAR 0 7
37826: PUSH
37827: EMPTY
37828: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
37829: LD_VAR 0 1
37833: PPUSH
37834: CALL_OW 266
37838: PUSH
37839: LD_INT 0
37841: PUSH
37842: LD_INT 1
37844: PUSH
37845: EMPTY
37846: LIST
37847: LIST
37848: IN
37849: NOT
37850: IFFALSE 37854
// exit ;
37852: GO 39488
// if name then
37854: LD_VAR 0 3
37858: IFFALSE 37874
// SetBName ( base_dep , name ) ;
37860: LD_VAR 0 1
37864: PPUSH
37865: LD_VAR 0 3
37869: PPUSH
37870: CALL_OW 500
// base := GetBase ( base_dep ) ;
37874: LD_ADDR_VAR 0 15
37878: PUSH
37879: LD_VAR 0 1
37883: PPUSH
37884: CALL_OW 274
37888: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
37889: LD_ADDR_VAR 0 16
37893: PUSH
37894: LD_VAR 0 1
37898: PPUSH
37899: CALL_OW 255
37903: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
37904: LD_ADDR_VAR 0 17
37908: PUSH
37909: LD_VAR 0 1
37913: PPUSH
37914: CALL_OW 248
37918: ST_TO_ADDR
// if sources then
37919: LD_VAR 0 5
37923: IFFALSE 37970
// for i = 1 to 3 do
37925: LD_ADDR_VAR 0 8
37929: PUSH
37930: DOUBLE
37931: LD_INT 1
37933: DEC
37934: ST_TO_ADDR
37935: LD_INT 3
37937: PUSH
37938: FOR_TO
37939: IFFALSE 37968
// AddResourceType ( base , i , sources [ i ] ) ;
37941: LD_VAR 0 15
37945: PPUSH
37946: LD_VAR 0 8
37950: PPUSH
37951: LD_VAR 0 5
37955: PUSH
37956: LD_VAR 0 8
37960: ARRAY
37961: PPUSH
37962: CALL_OW 276
37966: GO 37938
37968: POP
37969: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
37970: LD_ADDR_VAR 0 18
37974: PUSH
37975: LD_VAR 0 15
37979: PPUSH
37980: LD_VAR 0 2
37984: PPUSH
37985: LD_INT 1
37987: PPUSH
37988: CALL 37231 0 3
37992: ST_TO_ADDR
// InitHc ;
37993: CALL_OW 19
// InitUc ;
37997: CALL_OW 18
// uc_side := side ;
38001: LD_ADDR_OWVAR 20
38005: PUSH
38006: LD_VAR 0 16
38010: ST_TO_ADDR
// uc_nation := nation ;
38011: LD_ADDR_OWVAR 21
38015: PUSH
38016: LD_VAR 0 17
38020: ST_TO_ADDR
// if buildings then
38021: LD_VAR 0 18
38025: IFFALSE 39347
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
38027: LD_ADDR_VAR 0 19
38031: PUSH
38032: LD_VAR 0 18
38036: PPUSH
38037: LD_INT 2
38039: PUSH
38040: LD_INT 30
38042: PUSH
38043: LD_INT 29
38045: PUSH
38046: EMPTY
38047: LIST
38048: LIST
38049: PUSH
38050: LD_INT 30
38052: PUSH
38053: LD_INT 30
38055: PUSH
38056: EMPTY
38057: LIST
38058: LIST
38059: PUSH
38060: EMPTY
38061: LIST
38062: LIST
38063: LIST
38064: PPUSH
38065: CALL_OW 72
38069: ST_TO_ADDR
// if tmp then
38070: LD_VAR 0 19
38074: IFFALSE 38122
// for i in tmp do
38076: LD_ADDR_VAR 0 8
38080: PUSH
38081: LD_VAR 0 19
38085: PUSH
38086: FOR_IN
38087: IFFALSE 38120
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
38089: LD_VAR 0 8
38093: PPUSH
38094: CALL_OW 250
38098: PPUSH
38099: LD_VAR 0 8
38103: PPUSH
38104: CALL_OW 251
38108: PPUSH
38109: LD_VAR 0 16
38113: PPUSH
38114: CALL_OW 441
38118: GO 38086
38120: POP
38121: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
38122: LD_VAR 0 18
38126: PPUSH
38127: LD_INT 2
38129: PUSH
38130: LD_INT 30
38132: PUSH
38133: LD_INT 32
38135: PUSH
38136: EMPTY
38137: LIST
38138: LIST
38139: PUSH
38140: LD_INT 30
38142: PUSH
38143: LD_INT 33
38145: PUSH
38146: EMPTY
38147: LIST
38148: LIST
38149: PUSH
38150: EMPTY
38151: LIST
38152: LIST
38153: LIST
38154: PPUSH
38155: CALL_OW 72
38159: IFFALSE 38247
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
38161: LD_ADDR_VAR 0 8
38165: PUSH
38166: LD_VAR 0 18
38170: PPUSH
38171: LD_INT 2
38173: PUSH
38174: LD_INT 30
38176: PUSH
38177: LD_INT 32
38179: PUSH
38180: EMPTY
38181: LIST
38182: LIST
38183: PUSH
38184: LD_INT 30
38186: PUSH
38187: LD_INT 33
38189: PUSH
38190: EMPTY
38191: LIST
38192: LIST
38193: PUSH
38194: EMPTY
38195: LIST
38196: LIST
38197: LIST
38198: PPUSH
38199: CALL_OW 72
38203: PUSH
38204: FOR_IN
38205: IFFALSE 38245
// begin if not GetBWeapon ( i ) then
38207: LD_VAR 0 8
38211: PPUSH
38212: CALL_OW 269
38216: NOT
38217: IFFALSE 38243
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
38219: LD_VAR 0 8
38223: PPUSH
38224: LD_VAR 0 8
38228: PPUSH
38229: LD_VAR 0 2
38233: PPUSH
38234: CALL 39493 0 2
38238: PPUSH
38239: CALL_OW 431
// end ;
38243: GO 38204
38245: POP
38246: POP
// end ; for i = 1 to personel do
38247: LD_ADDR_VAR 0 8
38251: PUSH
38252: DOUBLE
38253: LD_INT 1
38255: DEC
38256: ST_TO_ADDR
38257: LD_VAR 0 6
38261: PUSH
38262: FOR_TO
38263: IFFALSE 39327
// begin if i > 4 then
38265: LD_VAR 0 8
38269: PUSH
38270: LD_INT 4
38272: GREATER
38273: IFFALSE 38277
// break ;
38275: GO 39327
// case i of 1 :
38277: LD_VAR 0 8
38281: PUSH
38282: LD_INT 1
38284: DOUBLE
38285: EQUAL
38286: IFTRUE 38290
38288: GO 38370
38290: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
38291: LD_ADDR_VAR 0 12
38295: PUSH
38296: LD_VAR 0 18
38300: PPUSH
38301: LD_INT 22
38303: PUSH
38304: LD_VAR 0 16
38308: PUSH
38309: EMPTY
38310: LIST
38311: LIST
38312: PUSH
38313: LD_INT 58
38315: PUSH
38316: EMPTY
38317: LIST
38318: PUSH
38319: LD_INT 2
38321: PUSH
38322: LD_INT 30
38324: PUSH
38325: LD_INT 32
38327: PUSH
38328: EMPTY
38329: LIST
38330: LIST
38331: PUSH
38332: LD_INT 30
38334: PUSH
38335: LD_INT 4
38337: PUSH
38338: EMPTY
38339: LIST
38340: LIST
38341: PUSH
38342: LD_INT 30
38344: PUSH
38345: LD_INT 5
38347: PUSH
38348: EMPTY
38349: LIST
38350: LIST
38351: PUSH
38352: EMPTY
38353: LIST
38354: LIST
38355: LIST
38356: LIST
38357: PUSH
38358: EMPTY
38359: LIST
38360: LIST
38361: LIST
38362: PPUSH
38363: CALL_OW 72
38367: ST_TO_ADDR
38368: GO 38592
38370: LD_INT 2
38372: DOUBLE
38373: EQUAL
38374: IFTRUE 38378
38376: GO 38440
38378: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
38379: LD_ADDR_VAR 0 12
38383: PUSH
38384: LD_VAR 0 18
38388: PPUSH
38389: LD_INT 22
38391: PUSH
38392: LD_VAR 0 16
38396: PUSH
38397: EMPTY
38398: LIST
38399: LIST
38400: PUSH
38401: LD_INT 2
38403: PUSH
38404: LD_INT 30
38406: PUSH
38407: LD_INT 0
38409: PUSH
38410: EMPTY
38411: LIST
38412: LIST
38413: PUSH
38414: LD_INT 30
38416: PUSH
38417: LD_INT 1
38419: PUSH
38420: EMPTY
38421: LIST
38422: LIST
38423: PUSH
38424: EMPTY
38425: LIST
38426: LIST
38427: LIST
38428: PUSH
38429: EMPTY
38430: LIST
38431: LIST
38432: PPUSH
38433: CALL_OW 72
38437: ST_TO_ADDR
38438: GO 38592
38440: LD_INT 3
38442: DOUBLE
38443: EQUAL
38444: IFTRUE 38448
38446: GO 38510
38448: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
38449: LD_ADDR_VAR 0 12
38453: PUSH
38454: LD_VAR 0 18
38458: PPUSH
38459: LD_INT 22
38461: PUSH
38462: LD_VAR 0 16
38466: PUSH
38467: EMPTY
38468: LIST
38469: LIST
38470: PUSH
38471: LD_INT 2
38473: PUSH
38474: LD_INT 30
38476: PUSH
38477: LD_INT 2
38479: PUSH
38480: EMPTY
38481: LIST
38482: LIST
38483: PUSH
38484: LD_INT 30
38486: PUSH
38487: LD_INT 3
38489: PUSH
38490: EMPTY
38491: LIST
38492: LIST
38493: PUSH
38494: EMPTY
38495: LIST
38496: LIST
38497: LIST
38498: PUSH
38499: EMPTY
38500: LIST
38501: LIST
38502: PPUSH
38503: CALL_OW 72
38507: ST_TO_ADDR
38508: GO 38592
38510: LD_INT 4
38512: DOUBLE
38513: EQUAL
38514: IFTRUE 38518
38516: GO 38591
38518: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
38519: LD_ADDR_VAR 0 12
38523: PUSH
38524: LD_VAR 0 18
38528: PPUSH
38529: LD_INT 22
38531: PUSH
38532: LD_VAR 0 16
38536: PUSH
38537: EMPTY
38538: LIST
38539: LIST
38540: PUSH
38541: LD_INT 2
38543: PUSH
38544: LD_INT 30
38546: PUSH
38547: LD_INT 6
38549: PUSH
38550: EMPTY
38551: LIST
38552: LIST
38553: PUSH
38554: LD_INT 30
38556: PUSH
38557: LD_INT 7
38559: PUSH
38560: EMPTY
38561: LIST
38562: LIST
38563: PUSH
38564: LD_INT 30
38566: PUSH
38567: LD_INT 8
38569: PUSH
38570: EMPTY
38571: LIST
38572: LIST
38573: PUSH
38574: EMPTY
38575: LIST
38576: LIST
38577: LIST
38578: LIST
38579: PUSH
38580: EMPTY
38581: LIST
38582: LIST
38583: PPUSH
38584: CALL_OW 72
38588: ST_TO_ADDR
38589: GO 38592
38591: POP
// if i = 1 then
38592: LD_VAR 0 8
38596: PUSH
38597: LD_INT 1
38599: EQUAL
38600: IFFALSE 38711
// begin tmp := [ ] ;
38602: LD_ADDR_VAR 0 19
38606: PUSH
38607: EMPTY
38608: ST_TO_ADDR
// for j in f do
38609: LD_ADDR_VAR 0 9
38613: PUSH
38614: LD_VAR 0 12
38618: PUSH
38619: FOR_IN
38620: IFFALSE 38693
// if GetBType ( j ) = b_bunker then
38622: LD_VAR 0 9
38626: PPUSH
38627: CALL_OW 266
38631: PUSH
38632: LD_INT 32
38634: EQUAL
38635: IFFALSE 38662
// tmp := Insert ( tmp , 1 , j ) else
38637: LD_ADDR_VAR 0 19
38641: PUSH
38642: LD_VAR 0 19
38646: PPUSH
38647: LD_INT 1
38649: PPUSH
38650: LD_VAR 0 9
38654: PPUSH
38655: CALL_OW 2
38659: ST_TO_ADDR
38660: GO 38691
// tmp := Insert ( tmp , tmp + 1 , j ) ;
38662: LD_ADDR_VAR 0 19
38666: PUSH
38667: LD_VAR 0 19
38671: PPUSH
38672: LD_VAR 0 19
38676: PUSH
38677: LD_INT 1
38679: PLUS
38680: PPUSH
38681: LD_VAR 0 9
38685: PPUSH
38686: CALL_OW 2
38690: ST_TO_ADDR
38691: GO 38619
38693: POP
38694: POP
// if tmp then
38695: LD_VAR 0 19
38699: IFFALSE 38711
// f := tmp ;
38701: LD_ADDR_VAR 0 12
38705: PUSH
38706: LD_VAR 0 19
38710: ST_TO_ADDR
// end ; x := personel [ i ] ;
38711: LD_ADDR_VAR 0 13
38715: PUSH
38716: LD_VAR 0 6
38720: PUSH
38721: LD_VAR 0 8
38725: ARRAY
38726: ST_TO_ADDR
// if x = - 1 then
38727: LD_VAR 0 13
38731: PUSH
38732: LD_INT 1
38734: NEG
38735: EQUAL
38736: IFFALSE 38945
// begin for j in f do
38738: LD_ADDR_VAR 0 9
38742: PUSH
38743: LD_VAR 0 12
38747: PUSH
38748: FOR_IN
38749: IFFALSE 38941
// repeat InitHc ;
38751: CALL_OW 19
// if GetBType ( j ) = b_barracks then
38755: LD_VAR 0 9
38759: PPUSH
38760: CALL_OW 266
38764: PUSH
38765: LD_INT 5
38767: EQUAL
38768: IFFALSE 38838
// begin if UnitsInside ( j ) < 3 then
38770: LD_VAR 0 9
38774: PPUSH
38775: CALL_OW 313
38779: PUSH
38780: LD_INT 3
38782: LESS
38783: IFFALSE 38819
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
38785: LD_INT 0
38787: PPUSH
38788: LD_INT 5
38790: PUSH
38791: LD_INT 8
38793: PUSH
38794: LD_INT 9
38796: PUSH
38797: EMPTY
38798: LIST
38799: LIST
38800: LIST
38801: PUSH
38802: LD_VAR 0 17
38806: ARRAY
38807: PPUSH
38808: LD_VAR 0 4
38812: PPUSH
38813: CALL_OW 380
38817: GO 38836
// PrepareHuman ( false , i , skill ) ;
38819: LD_INT 0
38821: PPUSH
38822: LD_VAR 0 8
38826: PPUSH
38827: LD_VAR 0 4
38831: PPUSH
38832: CALL_OW 380
// end else
38836: GO 38855
// PrepareHuman ( false , i , skill ) ;
38838: LD_INT 0
38840: PPUSH
38841: LD_VAR 0 8
38845: PPUSH
38846: LD_VAR 0 4
38850: PPUSH
38851: CALL_OW 380
// un := CreateHuman ;
38855: LD_ADDR_VAR 0 14
38859: PUSH
38860: CALL_OW 44
38864: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38865: LD_ADDR_VAR 0 7
38869: PUSH
38870: LD_VAR 0 7
38874: PPUSH
38875: LD_INT 1
38877: PPUSH
38878: LD_VAR 0 14
38882: PPUSH
38883: CALL_OW 2
38887: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
38888: LD_VAR 0 14
38892: PPUSH
38893: LD_VAR 0 9
38897: PPUSH
38898: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
38902: LD_VAR 0 9
38906: PPUSH
38907: CALL_OW 313
38911: PUSH
38912: LD_INT 6
38914: EQUAL
38915: PUSH
38916: LD_VAR 0 9
38920: PPUSH
38921: CALL_OW 266
38925: PUSH
38926: LD_INT 32
38928: PUSH
38929: LD_INT 31
38931: PUSH
38932: EMPTY
38933: LIST
38934: LIST
38935: IN
38936: OR
38937: IFFALSE 38751
38939: GO 38748
38941: POP
38942: POP
// end else
38943: GO 39325
// for j = 1 to x do
38945: LD_ADDR_VAR 0 9
38949: PUSH
38950: DOUBLE
38951: LD_INT 1
38953: DEC
38954: ST_TO_ADDR
38955: LD_VAR 0 13
38959: PUSH
38960: FOR_TO
38961: IFFALSE 39323
// begin InitHc ;
38963: CALL_OW 19
// if not f then
38967: LD_VAR 0 12
38971: NOT
38972: IFFALSE 39061
// begin PrepareHuman ( false , i , skill ) ;
38974: LD_INT 0
38976: PPUSH
38977: LD_VAR 0 8
38981: PPUSH
38982: LD_VAR 0 4
38986: PPUSH
38987: CALL_OW 380
// un := CreateHuman ;
38991: LD_ADDR_VAR 0 14
38995: PUSH
38996: CALL_OW 44
39000: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39001: LD_ADDR_VAR 0 7
39005: PUSH
39006: LD_VAR 0 7
39010: PPUSH
39011: LD_INT 1
39013: PPUSH
39014: LD_VAR 0 14
39018: PPUSH
39019: CALL_OW 2
39023: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39024: LD_VAR 0 14
39028: PPUSH
39029: LD_VAR 0 1
39033: PPUSH
39034: CALL_OW 250
39038: PPUSH
39039: LD_VAR 0 1
39043: PPUSH
39044: CALL_OW 251
39048: PPUSH
39049: LD_INT 10
39051: PPUSH
39052: LD_INT 0
39054: PPUSH
39055: CALL_OW 50
// continue ;
39059: GO 38960
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
39061: LD_VAR 0 12
39065: PUSH
39066: LD_INT 1
39068: ARRAY
39069: PPUSH
39070: CALL_OW 313
39074: PUSH
39075: LD_VAR 0 12
39079: PUSH
39080: LD_INT 1
39082: ARRAY
39083: PPUSH
39084: CALL_OW 266
39088: PUSH
39089: LD_INT 32
39091: PUSH
39092: LD_INT 31
39094: PUSH
39095: EMPTY
39096: LIST
39097: LIST
39098: IN
39099: AND
39100: PUSH
39101: LD_VAR 0 12
39105: PUSH
39106: LD_INT 1
39108: ARRAY
39109: PPUSH
39110: CALL_OW 313
39114: PUSH
39115: LD_INT 6
39117: EQUAL
39118: OR
39119: IFFALSE 39139
// f := Delete ( f , 1 ) ;
39121: LD_ADDR_VAR 0 12
39125: PUSH
39126: LD_VAR 0 12
39130: PPUSH
39131: LD_INT 1
39133: PPUSH
39134: CALL_OW 3
39138: ST_TO_ADDR
// if not f then
39139: LD_VAR 0 12
39143: NOT
39144: IFFALSE 39162
// begin x := x + 2 ;
39146: LD_ADDR_VAR 0 13
39150: PUSH
39151: LD_VAR 0 13
39155: PUSH
39156: LD_INT 2
39158: PLUS
39159: ST_TO_ADDR
// continue ;
39160: GO 38960
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
39162: LD_VAR 0 12
39166: PUSH
39167: LD_INT 1
39169: ARRAY
39170: PPUSH
39171: CALL_OW 266
39175: PUSH
39176: LD_INT 5
39178: EQUAL
39179: IFFALSE 39253
// begin if UnitsInside ( f [ 1 ] ) < 3 then
39181: LD_VAR 0 12
39185: PUSH
39186: LD_INT 1
39188: ARRAY
39189: PPUSH
39190: CALL_OW 313
39194: PUSH
39195: LD_INT 3
39197: LESS
39198: IFFALSE 39234
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39200: LD_INT 0
39202: PPUSH
39203: LD_INT 5
39205: PUSH
39206: LD_INT 8
39208: PUSH
39209: LD_INT 9
39211: PUSH
39212: EMPTY
39213: LIST
39214: LIST
39215: LIST
39216: PUSH
39217: LD_VAR 0 17
39221: ARRAY
39222: PPUSH
39223: LD_VAR 0 4
39227: PPUSH
39228: CALL_OW 380
39232: GO 39251
// PrepareHuman ( false , i , skill ) ;
39234: LD_INT 0
39236: PPUSH
39237: LD_VAR 0 8
39241: PPUSH
39242: LD_VAR 0 4
39246: PPUSH
39247: CALL_OW 380
// end else
39251: GO 39270
// PrepareHuman ( false , i , skill ) ;
39253: LD_INT 0
39255: PPUSH
39256: LD_VAR 0 8
39260: PPUSH
39261: LD_VAR 0 4
39265: PPUSH
39266: CALL_OW 380
// un := CreateHuman ;
39270: LD_ADDR_VAR 0 14
39274: PUSH
39275: CALL_OW 44
39279: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39280: LD_ADDR_VAR 0 7
39284: PUSH
39285: LD_VAR 0 7
39289: PPUSH
39290: LD_INT 1
39292: PPUSH
39293: LD_VAR 0 14
39297: PPUSH
39298: CALL_OW 2
39302: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
39303: LD_VAR 0 14
39307: PPUSH
39308: LD_VAR 0 12
39312: PUSH
39313: LD_INT 1
39315: ARRAY
39316: PPUSH
39317: CALL_OW 52
// end ;
39321: GO 38960
39323: POP
39324: POP
// end ;
39325: GO 38262
39327: POP
39328: POP
// result := result ^ buildings ;
39329: LD_ADDR_VAR 0 7
39333: PUSH
39334: LD_VAR 0 7
39338: PUSH
39339: LD_VAR 0 18
39343: ADD
39344: ST_TO_ADDR
// end else
39345: GO 39488
// begin for i = 1 to personel do
39347: LD_ADDR_VAR 0 8
39351: PUSH
39352: DOUBLE
39353: LD_INT 1
39355: DEC
39356: ST_TO_ADDR
39357: LD_VAR 0 6
39361: PUSH
39362: FOR_TO
39363: IFFALSE 39486
// begin if i > 4 then
39365: LD_VAR 0 8
39369: PUSH
39370: LD_INT 4
39372: GREATER
39373: IFFALSE 39377
// break ;
39375: GO 39486
// x := personel [ i ] ;
39377: LD_ADDR_VAR 0 13
39381: PUSH
39382: LD_VAR 0 6
39386: PUSH
39387: LD_VAR 0 8
39391: ARRAY
39392: ST_TO_ADDR
// if x = - 1 then
39393: LD_VAR 0 13
39397: PUSH
39398: LD_INT 1
39400: NEG
39401: EQUAL
39402: IFFALSE 39406
// continue ;
39404: GO 39362
// PrepareHuman ( false , i , skill ) ;
39406: LD_INT 0
39408: PPUSH
39409: LD_VAR 0 8
39413: PPUSH
39414: LD_VAR 0 4
39418: PPUSH
39419: CALL_OW 380
// un := CreateHuman ;
39423: LD_ADDR_VAR 0 14
39427: PUSH
39428: CALL_OW 44
39432: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39433: LD_VAR 0 14
39437: PPUSH
39438: LD_VAR 0 1
39442: PPUSH
39443: CALL_OW 250
39447: PPUSH
39448: LD_VAR 0 1
39452: PPUSH
39453: CALL_OW 251
39457: PPUSH
39458: LD_INT 10
39460: PPUSH
39461: LD_INT 0
39463: PPUSH
39464: CALL_OW 50
// result := result ^ un ;
39468: LD_ADDR_VAR 0 7
39472: PUSH
39473: LD_VAR 0 7
39477: PUSH
39478: LD_VAR 0 14
39482: ADD
39483: ST_TO_ADDR
// end ;
39484: GO 39362
39486: POP
39487: POP
// end ; end ;
39488: LD_VAR 0 7
39492: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
39493: LD_INT 0
39495: PPUSH
39496: PPUSH
39497: PPUSH
39498: PPUSH
39499: PPUSH
39500: PPUSH
39501: PPUSH
39502: PPUSH
39503: PPUSH
39504: PPUSH
39505: PPUSH
39506: PPUSH
39507: PPUSH
39508: PPUSH
39509: PPUSH
39510: PPUSH
// result := false ;
39511: LD_ADDR_VAR 0 3
39515: PUSH
39516: LD_INT 0
39518: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
39519: LD_VAR 0 1
39523: NOT
39524: PUSH
39525: LD_VAR 0 1
39529: PPUSH
39530: CALL_OW 266
39534: PUSH
39535: LD_INT 32
39537: PUSH
39538: LD_INT 33
39540: PUSH
39541: EMPTY
39542: LIST
39543: LIST
39544: IN
39545: NOT
39546: OR
39547: IFFALSE 39551
// exit ;
39549: GO 40660
// nat := GetNation ( tower ) ;
39551: LD_ADDR_VAR 0 12
39555: PUSH
39556: LD_VAR 0 1
39560: PPUSH
39561: CALL_OW 248
39565: ST_TO_ADDR
// side := GetSide ( tower ) ;
39566: LD_ADDR_VAR 0 16
39570: PUSH
39571: LD_VAR 0 1
39575: PPUSH
39576: CALL_OW 255
39580: ST_TO_ADDR
// x := GetX ( tower ) ;
39581: LD_ADDR_VAR 0 10
39585: PUSH
39586: LD_VAR 0 1
39590: PPUSH
39591: CALL_OW 250
39595: ST_TO_ADDR
// y := GetY ( tower ) ;
39596: LD_ADDR_VAR 0 11
39600: PUSH
39601: LD_VAR 0 1
39605: PPUSH
39606: CALL_OW 251
39610: ST_TO_ADDR
// if not x or not y then
39611: LD_VAR 0 10
39615: NOT
39616: PUSH
39617: LD_VAR 0 11
39621: NOT
39622: OR
39623: IFFALSE 39627
// exit ;
39625: GO 40660
// weapon := 0 ;
39627: LD_ADDR_VAR 0 18
39631: PUSH
39632: LD_INT 0
39634: ST_TO_ADDR
// fac_list := [ ] ;
39635: LD_ADDR_VAR 0 17
39639: PUSH
39640: EMPTY
39641: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
39642: LD_ADDR_VAR 0 6
39646: PUSH
39647: LD_VAR 0 1
39651: PPUSH
39652: CALL_OW 274
39656: PPUSH
39657: LD_VAR 0 2
39661: PPUSH
39662: LD_INT 0
39664: PPUSH
39665: CALL 37231 0 3
39669: PPUSH
39670: LD_INT 30
39672: PUSH
39673: LD_INT 3
39675: PUSH
39676: EMPTY
39677: LIST
39678: LIST
39679: PPUSH
39680: CALL_OW 72
39684: ST_TO_ADDR
// if not factories then
39685: LD_VAR 0 6
39689: NOT
39690: IFFALSE 39694
// exit ;
39692: GO 40660
// for i in factories do
39694: LD_ADDR_VAR 0 8
39698: PUSH
39699: LD_VAR 0 6
39703: PUSH
39704: FOR_IN
39705: IFFALSE 39730
// fac_list := fac_list union AvailableWeaponList ( i ) ;
39707: LD_ADDR_VAR 0 17
39711: PUSH
39712: LD_VAR 0 17
39716: PUSH
39717: LD_VAR 0 8
39721: PPUSH
39722: CALL_OW 478
39726: UNION
39727: ST_TO_ADDR
39728: GO 39704
39730: POP
39731: POP
// if not fac_list then
39732: LD_VAR 0 17
39736: NOT
39737: IFFALSE 39741
// exit ;
39739: GO 40660
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
39741: LD_ADDR_VAR 0 5
39745: PUSH
39746: LD_INT 4
39748: PUSH
39749: LD_INT 5
39751: PUSH
39752: LD_INT 9
39754: PUSH
39755: LD_INT 10
39757: PUSH
39758: LD_INT 6
39760: PUSH
39761: LD_INT 7
39763: PUSH
39764: LD_INT 11
39766: PUSH
39767: EMPTY
39768: LIST
39769: LIST
39770: LIST
39771: LIST
39772: LIST
39773: LIST
39774: LIST
39775: PUSH
39776: LD_INT 27
39778: PUSH
39779: LD_INT 28
39781: PUSH
39782: LD_INT 26
39784: PUSH
39785: LD_INT 30
39787: PUSH
39788: EMPTY
39789: LIST
39790: LIST
39791: LIST
39792: LIST
39793: PUSH
39794: LD_INT 43
39796: PUSH
39797: LD_INT 44
39799: PUSH
39800: LD_INT 46
39802: PUSH
39803: LD_INT 45
39805: PUSH
39806: LD_INT 47
39808: PUSH
39809: LD_INT 49
39811: PUSH
39812: EMPTY
39813: LIST
39814: LIST
39815: LIST
39816: LIST
39817: LIST
39818: LIST
39819: PUSH
39820: EMPTY
39821: LIST
39822: LIST
39823: LIST
39824: PUSH
39825: LD_VAR 0 12
39829: ARRAY
39830: ST_TO_ADDR
// list := list isect fac_list ;
39831: LD_ADDR_VAR 0 5
39835: PUSH
39836: LD_VAR 0 5
39840: PUSH
39841: LD_VAR 0 17
39845: ISECT
39846: ST_TO_ADDR
// if not list then
39847: LD_VAR 0 5
39851: NOT
39852: IFFALSE 39856
// exit ;
39854: GO 40660
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
39856: LD_VAR 0 12
39860: PUSH
39861: LD_INT 3
39863: EQUAL
39864: PUSH
39865: LD_INT 49
39867: PUSH
39868: LD_VAR 0 5
39872: IN
39873: AND
39874: PUSH
39875: LD_INT 31
39877: PPUSH
39878: LD_VAR 0 16
39882: PPUSH
39883: CALL_OW 321
39887: PUSH
39888: LD_INT 2
39890: EQUAL
39891: AND
39892: IFFALSE 39952
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
39894: LD_INT 22
39896: PUSH
39897: LD_VAR 0 16
39901: PUSH
39902: EMPTY
39903: LIST
39904: LIST
39905: PUSH
39906: LD_INT 35
39908: PUSH
39909: LD_INT 49
39911: PUSH
39912: EMPTY
39913: LIST
39914: LIST
39915: PUSH
39916: LD_INT 91
39918: PUSH
39919: LD_VAR 0 1
39923: PUSH
39924: LD_INT 10
39926: PUSH
39927: EMPTY
39928: LIST
39929: LIST
39930: LIST
39931: PUSH
39932: EMPTY
39933: LIST
39934: LIST
39935: LIST
39936: PPUSH
39937: CALL_OW 69
39941: NOT
39942: IFFALSE 39952
// weapon := ru_time_lapser ;
39944: LD_ADDR_VAR 0 18
39948: PUSH
39949: LD_INT 49
39951: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
39952: LD_VAR 0 12
39956: PUSH
39957: LD_INT 1
39959: PUSH
39960: LD_INT 2
39962: PUSH
39963: EMPTY
39964: LIST
39965: LIST
39966: IN
39967: PUSH
39968: LD_INT 11
39970: PUSH
39971: LD_VAR 0 5
39975: IN
39976: PUSH
39977: LD_INT 30
39979: PUSH
39980: LD_VAR 0 5
39984: IN
39985: OR
39986: AND
39987: PUSH
39988: LD_INT 6
39990: PPUSH
39991: LD_VAR 0 16
39995: PPUSH
39996: CALL_OW 321
40000: PUSH
40001: LD_INT 2
40003: EQUAL
40004: AND
40005: IFFALSE 40170
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
40007: LD_INT 22
40009: PUSH
40010: LD_VAR 0 16
40014: PUSH
40015: EMPTY
40016: LIST
40017: LIST
40018: PUSH
40019: LD_INT 2
40021: PUSH
40022: LD_INT 35
40024: PUSH
40025: LD_INT 11
40027: PUSH
40028: EMPTY
40029: LIST
40030: LIST
40031: PUSH
40032: LD_INT 35
40034: PUSH
40035: LD_INT 30
40037: PUSH
40038: EMPTY
40039: LIST
40040: LIST
40041: PUSH
40042: EMPTY
40043: LIST
40044: LIST
40045: LIST
40046: PUSH
40047: LD_INT 91
40049: PUSH
40050: LD_VAR 0 1
40054: PUSH
40055: LD_INT 18
40057: PUSH
40058: EMPTY
40059: LIST
40060: LIST
40061: LIST
40062: PUSH
40063: EMPTY
40064: LIST
40065: LIST
40066: LIST
40067: PPUSH
40068: CALL_OW 69
40072: NOT
40073: PUSH
40074: LD_INT 22
40076: PUSH
40077: LD_VAR 0 16
40081: PUSH
40082: EMPTY
40083: LIST
40084: LIST
40085: PUSH
40086: LD_INT 2
40088: PUSH
40089: LD_INT 30
40091: PUSH
40092: LD_INT 32
40094: PUSH
40095: EMPTY
40096: LIST
40097: LIST
40098: PUSH
40099: LD_INT 30
40101: PUSH
40102: LD_INT 33
40104: PUSH
40105: EMPTY
40106: LIST
40107: LIST
40108: PUSH
40109: EMPTY
40110: LIST
40111: LIST
40112: LIST
40113: PUSH
40114: LD_INT 91
40116: PUSH
40117: LD_VAR 0 1
40121: PUSH
40122: LD_INT 12
40124: PUSH
40125: EMPTY
40126: LIST
40127: LIST
40128: LIST
40129: PUSH
40130: EMPTY
40131: LIST
40132: LIST
40133: LIST
40134: PUSH
40135: EMPTY
40136: LIST
40137: PPUSH
40138: CALL_OW 69
40142: PUSH
40143: LD_INT 2
40145: GREATER
40146: AND
40147: IFFALSE 40170
// weapon := [ us_radar , ar_radar ] [ nat ] ;
40149: LD_ADDR_VAR 0 18
40153: PUSH
40154: LD_INT 11
40156: PUSH
40157: LD_INT 30
40159: PUSH
40160: EMPTY
40161: LIST
40162: LIST
40163: PUSH
40164: LD_VAR 0 12
40168: ARRAY
40169: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
40170: LD_VAR 0 18
40174: NOT
40175: PUSH
40176: LD_INT 40
40178: PPUSH
40179: LD_VAR 0 16
40183: PPUSH
40184: CALL_OW 321
40188: PUSH
40189: LD_INT 2
40191: EQUAL
40192: AND
40193: PUSH
40194: LD_INT 7
40196: PUSH
40197: LD_VAR 0 5
40201: IN
40202: PUSH
40203: LD_INT 28
40205: PUSH
40206: LD_VAR 0 5
40210: IN
40211: OR
40212: PUSH
40213: LD_INT 45
40215: PUSH
40216: LD_VAR 0 5
40220: IN
40221: OR
40222: AND
40223: IFFALSE 40477
// begin hex := GetHexInfo ( x , y ) ;
40225: LD_ADDR_VAR 0 4
40229: PUSH
40230: LD_VAR 0 10
40234: PPUSH
40235: LD_VAR 0 11
40239: PPUSH
40240: CALL_OW 546
40244: ST_TO_ADDR
// if hex [ 1 ] then
40245: LD_VAR 0 4
40249: PUSH
40250: LD_INT 1
40252: ARRAY
40253: IFFALSE 40257
// exit ;
40255: GO 40660
// height := hex [ 2 ] ;
40257: LD_ADDR_VAR 0 15
40261: PUSH
40262: LD_VAR 0 4
40266: PUSH
40267: LD_INT 2
40269: ARRAY
40270: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
40271: LD_ADDR_VAR 0 14
40275: PUSH
40276: LD_INT 0
40278: PUSH
40279: LD_INT 2
40281: PUSH
40282: LD_INT 3
40284: PUSH
40285: LD_INT 5
40287: PUSH
40288: EMPTY
40289: LIST
40290: LIST
40291: LIST
40292: LIST
40293: ST_TO_ADDR
// for i in tmp do
40294: LD_ADDR_VAR 0 8
40298: PUSH
40299: LD_VAR 0 14
40303: PUSH
40304: FOR_IN
40305: IFFALSE 40475
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
40307: LD_ADDR_VAR 0 9
40311: PUSH
40312: LD_VAR 0 10
40316: PPUSH
40317: LD_VAR 0 8
40321: PPUSH
40322: LD_INT 5
40324: PPUSH
40325: CALL_OW 272
40329: PUSH
40330: LD_VAR 0 11
40334: PPUSH
40335: LD_VAR 0 8
40339: PPUSH
40340: LD_INT 5
40342: PPUSH
40343: CALL_OW 273
40347: PUSH
40348: EMPTY
40349: LIST
40350: LIST
40351: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
40352: LD_VAR 0 9
40356: PUSH
40357: LD_INT 1
40359: ARRAY
40360: PPUSH
40361: LD_VAR 0 9
40365: PUSH
40366: LD_INT 2
40368: ARRAY
40369: PPUSH
40370: CALL_OW 488
40374: IFFALSE 40473
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
40376: LD_ADDR_VAR 0 4
40380: PUSH
40381: LD_VAR 0 9
40385: PUSH
40386: LD_INT 1
40388: ARRAY
40389: PPUSH
40390: LD_VAR 0 9
40394: PUSH
40395: LD_INT 2
40397: ARRAY
40398: PPUSH
40399: CALL_OW 546
40403: ST_TO_ADDR
// if hex [ 1 ] then
40404: LD_VAR 0 4
40408: PUSH
40409: LD_INT 1
40411: ARRAY
40412: IFFALSE 40416
// continue ;
40414: GO 40304
// h := hex [ 2 ] ;
40416: LD_ADDR_VAR 0 13
40420: PUSH
40421: LD_VAR 0 4
40425: PUSH
40426: LD_INT 2
40428: ARRAY
40429: ST_TO_ADDR
// if h + 7 < height then
40430: LD_VAR 0 13
40434: PUSH
40435: LD_INT 7
40437: PLUS
40438: PUSH
40439: LD_VAR 0 15
40443: LESS
40444: IFFALSE 40473
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
40446: LD_ADDR_VAR 0 18
40450: PUSH
40451: LD_INT 7
40453: PUSH
40454: LD_INT 28
40456: PUSH
40457: LD_INT 45
40459: PUSH
40460: EMPTY
40461: LIST
40462: LIST
40463: LIST
40464: PUSH
40465: LD_VAR 0 12
40469: ARRAY
40470: ST_TO_ADDR
// break ;
40471: GO 40475
// end ; end ; end ;
40473: GO 40304
40475: POP
40476: POP
// end ; if not weapon then
40477: LD_VAR 0 18
40481: NOT
40482: IFFALSE 40542
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
40484: LD_ADDR_VAR 0 5
40488: PUSH
40489: LD_VAR 0 5
40493: PUSH
40494: LD_INT 11
40496: PUSH
40497: LD_INT 30
40499: PUSH
40500: LD_INT 49
40502: PUSH
40503: EMPTY
40504: LIST
40505: LIST
40506: LIST
40507: DIFF
40508: ST_TO_ADDR
// if not list then
40509: LD_VAR 0 5
40513: NOT
40514: IFFALSE 40518
// exit ;
40516: GO 40660
// weapon := list [ rand ( 1 , list ) ] ;
40518: LD_ADDR_VAR 0 18
40522: PUSH
40523: LD_VAR 0 5
40527: PUSH
40528: LD_INT 1
40530: PPUSH
40531: LD_VAR 0 5
40535: PPUSH
40536: CALL_OW 12
40540: ARRAY
40541: ST_TO_ADDR
// end ; if weapon then
40542: LD_VAR 0 18
40546: IFFALSE 40660
// begin tmp := CostOfWeapon ( weapon ) ;
40548: LD_ADDR_VAR 0 14
40552: PUSH
40553: LD_VAR 0 18
40557: PPUSH
40558: CALL_OW 451
40562: ST_TO_ADDR
// j := GetBase ( tower ) ;
40563: LD_ADDR_VAR 0 9
40567: PUSH
40568: LD_VAR 0 1
40572: PPUSH
40573: CALL_OW 274
40577: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
40578: LD_VAR 0 9
40582: PPUSH
40583: LD_INT 1
40585: PPUSH
40586: CALL_OW 275
40590: PUSH
40591: LD_VAR 0 14
40595: PUSH
40596: LD_INT 1
40598: ARRAY
40599: GREATEREQUAL
40600: PUSH
40601: LD_VAR 0 9
40605: PPUSH
40606: LD_INT 2
40608: PPUSH
40609: CALL_OW 275
40613: PUSH
40614: LD_VAR 0 14
40618: PUSH
40619: LD_INT 2
40621: ARRAY
40622: GREATEREQUAL
40623: AND
40624: PUSH
40625: LD_VAR 0 9
40629: PPUSH
40630: LD_INT 3
40632: PPUSH
40633: CALL_OW 275
40637: PUSH
40638: LD_VAR 0 14
40642: PUSH
40643: LD_INT 3
40645: ARRAY
40646: GREATEREQUAL
40647: AND
40648: IFFALSE 40660
// result := weapon ;
40650: LD_ADDR_VAR 0 3
40654: PUSH
40655: LD_VAR 0 18
40659: ST_TO_ADDR
// end ; end ;
40660: LD_VAR 0 3
40664: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
40665: LD_INT 0
40667: PPUSH
40668: PPUSH
// result := true ;
40669: LD_ADDR_VAR 0 3
40673: PUSH
40674: LD_INT 1
40676: ST_TO_ADDR
// if array1 = array2 then
40677: LD_VAR 0 1
40681: PUSH
40682: LD_VAR 0 2
40686: EQUAL
40687: IFFALSE 40747
// begin for i = 1 to array1 do
40689: LD_ADDR_VAR 0 4
40693: PUSH
40694: DOUBLE
40695: LD_INT 1
40697: DEC
40698: ST_TO_ADDR
40699: LD_VAR 0 1
40703: PUSH
40704: FOR_TO
40705: IFFALSE 40743
// if array1 [ i ] <> array2 [ i ] then
40707: LD_VAR 0 1
40711: PUSH
40712: LD_VAR 0 4
40716: ARRAY
40717: PUSH
40718: LD_VAR 0 2
40722: PUSH
40723: LD_VAR 0 4
40727: ARRAY
40728: NONEQUAL
40729: IFFALSE 40741
// begin result := false ;
40731: LD_ADDR_VAR 0 3
40735: PUSH
40736: LD_INT 0
40738: ST_TO_ADDR
// break ;
40739: GO 40743
// end ;
40741: GO 40704
40743: POP
40744: POP
// end else
40745: GO 40755
// result := false ;
40747: LD_ADDR_VAR 0 3
40751: PUSH
40752: LD_INT 0
40754: ST_TO_ADDR
// end ;
40755: LD_VAR 0 3
40759: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
40760: LD_INT 0
40762: PPUSH
40763: PPUSH
// if not array1 or not array2 then
40764: LD_VAR 0 1
40768: NOT
40769: PUSH
40770: LD_VAR 0 2
40774: NOT
40775: OR
40776: IFFALSE 40780
// exit ;
40778: GO 40844
// result := true ;
40780: LD_ADDR_VAR 0 3
40784: PUSH
40785: LD_INT 1
40787: ST_TO_ADDR
// for i = 1 to array1 do
40788: LD_ADDR_VAR 0 4
40792: PUSH
40793: DOUBLE
40794: LD_INT 1
40796: DEC
40797: ST_TO_ADDR
40798: LD_VAR 0 1
40802: PUSH
40803: FOR_TO
40804: IFFALSE 40842
// if array1 [ i ] <> array2 [ i ] then
40806: LD_VAR 0 1
40810: PUSH
40811: LD_VAR 0 4
40815: ARRAY
40816: PUSH
40817: LD_VAR 0 2
40821: PUSH
40822: LD_VAR 0 4
40826: ARRAY
40827: NONEQUAL
40828: IFFALSE 40840
// begin result := false ;
40830: LD_ADDR_VAR 0 3
40834: PUSH
40835: LD_INT 0
40837: ST_TO_ADDR
// break ;
40838: GO 40842
// end ;
40840: GO 40803
40842: POP
40843: POP
// end ;
40844: LD_VAR 0 3
40848: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
40849: LD_INT 0
40851: PPUSH
40852: PPUSH
40853: PPUSH
// pom := GetBase ( fac ) ;
40854: LD_ADDR_VAR 0 5
40858: PUSH
40859: LD_VAR 0 1
40863: PPUSH
40864: CALL_OW 274
40868: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
40869: LD_ADDR_VAR 0 4
40873: PUSH
40874: LD_VAR 0 2
40878: PUSH
40879: LD_INT 1
40881: ARRAY
40882: PPUSH
40883: LD_VAR 0 2
40887: PUSH
40888: LD_INT 2
40890: ARRAY
40891: PPUSH
40892: LD_VAR 0 2
40896: PUSH
40897: LD_INT 3
40899: ARRAY
40900: PPUSH
40901: LD_VAR 0 2
40905: PUSH
40906: LD_INT 4
40908: ARRAY
40909: PPUSH
40910: CALL_OW 449
40914: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40915: LD_ADDR_VAR 0 3
40919: PUSH
40920: LD_VAR 0 5
40924: PPUSH
40925: LD_INT 1
40927: PPUSH
40928: CALL_OW 275
40932: PUSH
40933: LD_VAR 0 4
40937: PUSH
40938: LD_INT 1
40940: ARRAY
40941: GREATEREQUAL
40942: PUSH
40943: LD_VAR 0 5
40947: PPUSH
40948: LD_INT 2
40950: PPUSH
40951: CALL_OW 275
40955: PUSH
40956: LD_VAR 0 4
40960: PUSH
40961: LD_INT 2
40963: ARRAY
40964: GREATEREQUAL
40965: AND
40966: PUSH
40967: LD_VAR 0 5
40971: PPUSH
40972: LD_INT 3
40974: PPUSH
40975: CALL_OW 275
40979: PUSH
40980: LD_VAR 0 4
40984: PUSH
40985: LD_INT 3
40987: ARRAY
40988: GREATEREQUAL
40989: AND
40990: ST_TO_ADDR
// end ;
40991: LD_VAR 0 3
40995: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
40996: LD_INT 0
40998: PPUSH
40999: PPUSH
41000: PPUSH
41001: PPUSH
// pom := GetBase ( building ) ;
41002: LD_ADDR_VAR 0 3
41006: PUSH
41007: LD_VAR 0 1
41011: PPUSH
41012: CALL_OW 274
41016: ST_TO_ADDR
// if not pom then
41017: LD_VAR 0 3
41021: NOT
41022: IFFALSE 41026
// exit ;
41024: GO 41196
// btype := GetBType ( building ) ;
41026: LD_ADDR_VAR 0 5
41030: PUSH
41031: LD_VAR 0 1
41035: PPUSH
41036: CALL_OW 266
41040: ST_TO_ADDR
// if btype = b_armoury then
41041: LD_VAR 0 5
41045: PUSH
41046: LD_INT 4
41048: EQUAL
41049: IFFALSE 41059
// btype := b_barracks ;
41051: LD_ADDR_VAR 0 5
41055: PUSH
41056: LD_INT 5
41058: ST_TO_ADDR
// if btype = b_depot then
41059: LD_VAR 0 5
41063: PUSH
41064: LD_INT 0
41066: EQUAL
41067: IFFALSE 41077
// btype := b_warehouse ;
41069: LD_ADDR_VAR 0 5
41073: PUSH
41074: LD_INT 1
41076: ST_TO_ADDR
// if btype = b_workshop then
41077: LD_VAR 0 5
41081: PUSH
41082: LD_INT 2
41084: EQUAL
41085: IFFALSE 41095
// btype := b_factory ;
41087: LD_ADDR_VAR 0 5
41091: PUSH
41092: LD_INT 3
41094: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41095: LD_ADDR_VAR 0 4
41099: PUSH
41100: LD_VAR 0 5
41104: PPUSH
41105: LD_VAR 0 1
41109: PPUSH
41110: CALL_OW 248
41114: PPUSH
41115: CALL_OW 450
41119: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41120: LD_ADDR_VAR 0 2
41124: PUSH
41125: LD_VAR 0 3
41129: PPUSH
41130: LD_INT 1
41132: PPUSH
41133: CALL_OW 275
41137: PUSH
41138: LD_VAR 0 4
41142: PUSH
41143: LD_INT 1
41145: ARRAY
41146: GREATEREQUAL
41147: PUSH
41148: LD_VAR 0 3
41152: PPUSH
41153: LD_INT 2
41155: PPUSH
41156: CALL_OW 275
41160: PUSH
41161: LD_VAR 0 4
41165: PUSH
41166: LD_INT 2
41168: ARRAY
41169: GREATEREQUAL
41170: AND
41171: PUSH
41172: LD_VAR 0 3
41176: PPUSH
41177: LD_INT 3
41179: PPUSH
41180: CALL_OW 275
41184: PUSH
41185: LD_VAR 0 4
41189: PUSH
41190: LD_INT 3
41192: ARRAY
41193: GREATEREQUAL
41194: AND
41195: ST_TO_ADDR
// end ;
41196: LD_VAR 0 2
41200: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
41201: LD_INT 0
41203: PPUSH
41204: PPUSH
41205: PPUSH
// pom := GetBase ( building ) ;
41206: LD_ADDR_VAR 0 4
41210: PUSH
41211: LD_VAR 0 1
41215: PPUSH
41216: CALL_OW 274
41220: ST_TO_ADDR
// if not pom then
41221: LD_VAR 0 4
41225: NOT
41226: IFFALSE 41230
// exit ;
41228: GO 41331
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41230: LD_ADDR_VAR 0 5
41234: PUSH
41235: LD_VAR 0 2
41239: PPUSH
41240: LD_VAR 0 1
41244: PPUSH
41245: CALL_OW 248
41249: PPUSH
41250: CALL_OW 450
41254: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41255: LD_ADDR_VAR 0 3
41259: PUSH
41260: LD_VAR 0 4
41264: PPUSH
41265: LD_INT 1
41267: PPUSH
41268: CALL_OW 275
41272: PUSH
41273: LD_VAR 0 5
41277: PUSH
41278: LD_INT 1
41280: ARRAY
41281: GREATEREQUAL
41282: PUSH
41283: LD_VAR 0 4
41287: PPUSH
41288: LD_INT 2
41290: PPUSH
41291: CALL_OW 275
41295: PUSH
41296: LD_VAR 0 5
41300: PUSH
41301: LD_INT 2
41303: ARRAY
41304: GREATEREQUAL
41305: AND
41306: PUSH
41307: LD_VAR 0 4
41311: PPUSH
41312: LD_INT 3
41314: PPUSH
41315: CALL_OW 275
41319: PUSH
41320: LD_VAR 0 5
41324: PUSH
41325: LD_INT 3
41327: ARRAY
41328: GREATEREQUAL
41329: AND
41330: ST_TO_ADDR
// end ;
41331: LD_VAR 0 3
41335: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
41336: LD_INT 0
41338: PPUSH
41339: PPUSH
41340: PPUSH
41341: PPUSH
41342: PPUSH
41343: PPUSH
41344: PPUSH
41345: PPUSH
41346: PPUSH
41347: PPUSH
41348: PPUSH
// result := false ;
41349: LD_ADDR_VAR 0 8
41353: PUSH
41354: LD_INT 0
41356: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
41357: LD_VAR 0 5
41361: NOT
41362: PUSH
41363: LD_VAR 0 1
41367: NOT
41368: OR
41369: PUSH
41370: LD_VAR 0 2
41374: NOT
41375: OR
41376: PUSH
41377: LD_VAR 0 3
41381: NOT
41382: OR
41383: IFFALSE 41387
// exit ;
41385: GO 42201
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
41387: LD_ADDR_VAR 0 14
41391: PUSH
41392: LD_VAR 0 1
41396: PPUSH
41397: LD_VAR 0 2
41401: PPUSH
41402: LD_VAR 0 3
41406: PPUSH
41407: LD_VAR 0 4
41411: PPUSH
41412: LD_VAR 0 5
41416: PUSH
41417: LD_INT 1
41419: ARRAY
41420: PPUSH
41421: CALL_OW 248
41425: PPUSH
41426: LD_INT 0
41428: PPUSH
41429: CALL 43454 0 6
41433: ST_TO_ADDR
// if not hexes then
41434: LD_VAR 0 14
41438: NOT
41439: IFFALSE 41443
// exit ;
41441: GO 42201
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
41443: LD_ADDR_VAR 0 17
41447: PUSH
41448: LD_VAR 0 5
41452: PPUSH
41453: LD_INT 22
41455: PUSH
41456: LD_VAR 0 13
41460: PPUSH
41461: CALL_OW 255
41465: PUSH
41466: EMPTY
41467: LIST
41468: LIST
41469: PUSH
41470: LD_INT 2
41472: PUSH
41473: LD_INT 30
41475: PUSH
41476: LD_INT 0
41478: PUSH
41479: EMPTY
41480: LIST
41481: LIST
41482: PUSH
41483: LD_INT 30
41485: PUSH
41486: LD_INT 1
41488: PUSH
41489: EMPTY
41490: LIST
41491: LIST
41492: PUSH
41493: EMPTY
41494: LIST
41495: LIST
41496: LIST
41497: PUSH
41498: EMPTY
41499: LIST
41500: LIST
41501: PPUSH
41502: CALL_OW 72
41506: ST_TO_ADDR
// for i = 1 to hexes do
41507: LD_ADDR_VAR 0 9
41511: PUSH
41512: DOUBLE
41513: LD_INT 1
41515: DEC
41516: ST_TO_ADDR
41517: LD_VAR 0 14
41521: PUSH
41522: FOR_TO
41523: IFFALSE 42199
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41525: LD_ADDR_VAR 0 13
41529: PUSH
41530: LD_VAR 0 14
41534: PUSH
41535: LD_VAR 0 9
41539: ARRAY
41540: PUSH
41541: LD_INT 1
41543: ARRAY
41544: PPUSH
41545: LD_VAR 0 14
41549: PUSH
41550: LD_VAR 0 9
41554: ARRAY
41555: PUSH
41556: LD_INT 2
41558: ARRAY
41559: PPUSH
41560: CALL_OW 428
41564: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
41565: LD_VAR 0 14
41569: PUSH
41570: LD_VAR 0 9
41574: ARRAY
41575: PUSH
41576: LD_INT 1
41578: ARRAY
41579: PPUSH
41580: LD_VAR 0 14
41584: PUSH
41585: LD_VAR 0 9
41589: ARRAY
41590: PUSH
41591: LD_INT 2
41593: ARRAY
41594: PPUSH
41595: CALL_OW 351
41599: PUSH
41600: LD_VAR 0 14
41604: PUSH
41605: LD_VAR 0 9
41609: ARRAY
41610: PUSH
41611: LD_INT 1
41613: ARRAY
41614: PPUSH
41615: LD_VAR 0 14
41619: PUSH
41620: LD_VAR 0 9
41624: ARRAY
41625: PUSH
41626: LD_INT 2
41628: ARRAY
41629: PPUSH
41630: CALL_OW 488
41634: NOT
41635: OR
41636: PUSH
41637: LD_VAR 0 13
41641: PPUSH
41642: CALL_OW 247
41646: PUSH
41647: LD_INT 3
41649: EQUAL
41650: OR
41651: IFFALSE 41657
// exit ;
41653: POP
41654: POP
41655: GO 42201
// if not tmp then
41657: LD_VAR 0 13
41661: NOT
41662: IFFALSE 41666
// continue ;
41664: GO 41522
// result := true ;
41666: LD_ADDR_VAR 0 8
41670: PUSH
41671: LD_INT 1
41673: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
41674: LD_VAR 0 6
41678: PUSH
41679: LD_VAR 0 13
41683: PPUSH
41684: CALL_OW 247
41688: PUSH
41689: LD_INT 2
41691: EQUAL
41692: AND
41693: PUSH
41694: LD_VAR 0 13
41698: PPUSH
41699: CALL_OW 263
41703: PUSH
41704: LD_INT 1
41706: EQUAL
41707: AND
41708: IFFALSE 41872
// begin if IsDrivenBy ( tmp ) then
41710: LD_VAR 0 13
41714: PPUSH
41715: CALL_OW 311
41719: IFFALSE 41723
// continue ;
41721: GO 41522
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
41723: LD_VAR 0 6
41727: PPUSH
41728: LD_INT 3
41730: PUSH
41731: LD_INT 60
41733: PUSH
41734: EMPTY
41735: LIST
41736: PUSH
41737: EMPTY
41738: LIST
41739: LIST
41740: PUSH
41741: LD_INT 3
41743: PUSH
41744: LD_INT 55
41746: PUSH
41747: EMPTY
41748: LIST
41749: PUSH
41750: EMPTY
41751: LIST
41752: LIST
41753: PUSH
41754: EMPTY
41755: LIST
41756: LIST
41757: PPUSH
41758: CALL_OW 72
41762: IFFALSE 41870
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
41764: LD_ADDR_VAR 0 18
41768: PUSH
41769: LD_VAR 0 6
41773: PPUSH
41774: LD_INT 3
41776: PUSH
41777: LD_INT 60
41779: PUSH
41780: EMPTY
41781: LIST
41782: PUSH
41783: EMPTY
41784: LIST
41785: LIST
41786: PUSH
41787: LD_INT 3
41789: PUSH
41790: LD_INT 55
41792: PUSH
41793: EMPTY
41794: LIST
41795: PUSH
41796: EMPTY
41797: LIST
41798: LIST
41799: PUSH
41800: EMPTY
41801: LIST
41802: LIST
41803: PPUSH
41804: CALL_OW 72
41808: PUSH
41809: LD_INT 1
41811: ARRAY
41812: ST_TO_ADDR
// if IsInUnit ( driver ) then
41813: LD_VAR 0 18
41817: PPUSH
41818: CALL_OW 310
41822: IFFALSE 41833
// ComExit ( driver ) ;
41824: LD_VAR 0 18
41828: PPUSH
41829: CALL 67246 0 1
// AddComEnterUnit ( driver , tmp ) ;
41833: LD_VAR 0 18
41837: PPUSH
41838: LD_VAR 0 13
41842: PPUSH
41843: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
41847: LD_VAR 0 18
41851: PPUSH
41852: LD_VAR 0 7
41856: PPUSH
41857: CALL_OW 173
// AddComExitVehicle ( driver ) ;
41861: LD_VAR 0 18
41865: PPUSH
41866: CALL_OW 181
// end ; continue ;
41870: GO 41522
// end ; if not cleaners or not tmp in cleaners then
41872: LD_VAR 0 6
41876: NOT
41877: PUSH
41878: LD_VAR 0 13
41882: PUSH
41883: LD_VAR 0 6
41887: IN
41888: NOT
41889: OR
41890: IFFALSE 42197
// begin if dep then
41892: LD_VAR 0 17
41896: IFFALSE 42032
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
41898: LD_ADDR_VAR 0 16
41902: PUSH
41903: LD_VAR 0 17
41907: PUSH
41908: LD_INT 1
41910: ARRAY
41911: PPUSH
41912: CALL_OW 250
41916: PPUSH
41917: LD_VAR 0 17
41921: PUSH
41922: LD_INT 1
41924: ARRAY
41925: PPUSH
41926: CALL_OW 254
41930: PPUSH
41931: LD_INT 5
41933: PPUSH
41934: CALL_OW 272
41938: PUSH
41939: LD_VAR 0 17
41943: PUSH
41944: LD_INT 1
41946: ARRAY
41947: PPUSH
41948: CALL_OW 251
41952: PPUSH
41953: LD_VAR 0 17
41957: PUSH
41958: LD_INT 1
41960: ARRAY
41961: PPUSH
41962: CALL_OW 254
41966: PPUSH
41967: LD_INT 5
41969: PPUSH
41970: CALL_OW 273
41974: PUSH
41975: EMPTY
41976: LIST
41977: LIST
41978: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
41979: LD_VAR 0 16
41983: PUSH
41984: LD_INT 1
41986: ARRAY
41987: PPUSH
41988: LD_VAR 0 16
41992: PUSH
41993: LD_INT 2
41995: ARRAY
41996: PPUSH
41997: CALL_OW 488
42001: IFFALSE 42032
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
42003: LD_VAR 0 13
42007: PPUSH
42008: LD_VAR 0 16
42012: PUSH
42013: LD_INT 1
42015: ARRAY
42016: PPUSH
42017: LD_VAR 0 16
42021: PUSH
42022: LD_INT 2
42024: ARRAY
42025: PPUSH
42026: CALL_OW 111
// continue ;
42030: GO 41522
// end ; end ; r := GetDir ( tmp ) ;
42032: LD_ADDR_VAR 0 15
42036: PUSH
42037: LD_VAR 0 13
42041: PPUSH
42042: CALL_OW 254
42046: ST_TO_ADDR
// if r = 5 then
42047: LD_VAR 0 15
42051: PUSH
42052: LD_INT 5
42054: EQUAL
42055: IFFALSE 42065
// r := 0 ;
42057: LD_ADDR_VAR 0 15
42061: PUSH
42062: LD_INT 0
42064: ST_TO_ADDR
// for j = r to 5 do
42065: LD_ADDR_VAR 0 10
42069: PUSH
42070: DOUBLE
42071: LD_VAR 0 15
42075: DEC
42076: ST_TO_ADDR
42077: LD_INT 5
42079: PUSH
42080: FOR_TO
42081: IFFALSE 42195
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
42083: LD_ADDR_VAR 0 11
42087: PUSH
42088: LD_VAR 0 13
42092: PPUSH
42093: CALL_OW 250
42097: PPUSH
42098: LD_VAR 0 10
42102: PPUSH
42103: LD_INT 2
42105: PPUSH
42106: CALL_OW 272
42110: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
42111: LD_ADDR_VAR 0 12
42115: PUSH
42116: LD_VAR 0 13
42120: PPUSH
42121: CALL_OW 251
42125: PPUSH
42126: LD_VAR 0 10
42130: PPUSH
42131: LD_INT 2
42133: PPUSH
42134: CALL_OW 273
42138: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
42139: LD_VAR 0 11
42143: PPUSH
42144: LD_VAR 0 12
42148: PPUSH
42149: CALL_OW 488
42153: PUSH
42154: LD_VAR 0 11
42158: PPUSH
42159: LD_VAR 0 12
42163: PPUSH
42164: CALL_OW 428
42168: NOT
42169: AND
42170: IFFALSE 42193
// begin ComMoveXY ( tmp , _x , _y ) ;
42172: LD_VAR 0 13
42176: PPUSH
42177: LD_VAR 0 11
42181: PPUSH
42182: LD_VAR 0 12
42186: PPUSH
42187: CALL_OW 111
// break ;
42191: GO 42195
// end ; end ;
42193: GO 42080
42195: POP
42196: POP
// end ; end ;
42197: GO 41522
42199: POP
42200: POP
// end ;
42201: LD_VAR 0 8
42205: RET
// export function BuildingTechInvented ( side , btype ) ; begin
42206: LD_INT 0
42208: PPUSH
// result := true ;
42209: LD_ADDR_VAR 0 3
42213: PUSH
42214: LD_INT 1
42216: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
42217: LD_VAR 0 2
42221: PUSH
42222: LD_INT 24
42224: DOUBLE
42225: EQUAL
42226: IFTRUE 42236
42228: LD_INT 33
42230: DOUBLE
42231: EQUAL
42232: IFTRUE 42236
42234: GO 42261
42236: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
42237: LD_ADDR_VAR 0 3
42241: PUSH
42242: LD_INT 32
42244: PPUSH
42245: LD_VAR 0 1
42249: PPUSH
42250: CALL_OW 321
42254: PUSH
42255: LD_INT 2
42257: EQUAL
42258: ST_TO_ADDR
42259: GO 42577
42261: LD_INT 20
42263: DOUBLE
42264: EQUAL
42265: IFTRUE 42269
42267: GO 42294
42269: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
42270: LD_ADDR_VAR 0 3
42274: PUSH
42275: LD_INT 6
42277: PPUSH
42278: LD_VAR 0 1
42282: PPUSH
42283: CALL_OW 321
42287: PUSH
42288: LD_INT 2
42290: EQUAL
42291: ST_TO_ADDR
42292: GO 42577
42294: LD_INT 22
42296: DOUBLE
42297: EQUAL
42298: IFTRUE 42308
42300: LD_INT 36
42302: DOUBLE
42303: EQUAL
42304: IFTRUE 42308
42306: GO 42333
42308: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
42309: LD_ADDR_VAR 0 3
42313: PUSH
42314: LD_INT 15
42316: PPUSH
42317: LD_VAR 0 1
42321: PPUSH
42322: CALL_OW 321
42326: PUSH
42327: LD_INT 2
42329: EQUAL
42330: ST_TO_ADDR
42331: GO 42577
42333: LD_INT 30
42335: DOUBLE
42336: EQUAL
42337: IFTRUE 42341
42339: GO 42366
42341: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
42342: LD_ADDR_VAR 0 3
42346: PUSH
42347: LD_INT 20
42349: PPUSH
42350: LD_VAR 0 1
42354: PPUSH
42355: CALL_OW 321
42359: PUSH
42360: LD_INT 2
42362: EQUAL
42363: ST_TO_ADDR
42364: GO 42577
42366: LD_INT 28
42368: DOUBLE
42369: EQUAL
42370: IFTRUE 42380
42372: LD_INT 21
42374: DOUBLE
42375: EQUAL
42376: IFTRUE 42380
42378: GO 42405
42380: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
42381: LD_ADDR_VAR 0 3
42385: PUSH
42386: LD_INT 21
42388: PPUSH
42389: LD_VAR 0 1
42393: PPUSH
42394: CALL_OW 321
42398: PUSH
42399: LD_INT 2
42401: EQUAL
42402: ST_TO_ADDR
42403: GO 42577
42405: LD_INT 16
42407: DOUBLE
42408: EQUAL
42409: IFTRUE 42413
42411: GO 42438
42413: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
42414: LD_ADDR_VAR 0 3
42418: PUSH
42419: LD_INT 84
42421: PPUSH
42422: LD_VAR 0 1
42426: PPUSH
42427: CALL_OW 321
42431: PUSH
42432: LD_INT 2
42434: EQUAL
42435: ST_TO_ADDR
42436: GO 42577
42438: LD_INT 19
42440: DOUBLE
42441: EQUAL
42442: IFTRUE 42452
42444: LD_INT 23
42446: DOUBLE
42447: EQUAL
42448: IFTRUE 42452
42450: GO 42477
42452: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
42453: LD_ADDR_VAR 0 3
42457: PUSH
42458: LD_INT 83
42460: PPUSH
42461: LD_VAR 0 1
42465: PPUSH
42466: CALL_OW 321
42470: PUSH
42471: LD_INT 2
42473: EQUAL
42474: ST_TO_ADDR
42475: GO 42577
42477: LD_INT 17
42479: DOUBLE
42480: EQUAL
42481: IFTRUE 42485
42483: GO 42510
42485: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
42486: LD_ADDR_VAR 0 3
42490: PUSH
42491: LD_INT 39
42493: PPUSH
42494: LD_VAR 0 1
42498: PPUSH
42499: CALL_OW 321
42503: PUSH
42504: LD_INT 2
42506: EQUAL
42507: ST_TO_ADDR
42508: GO 42577
42510: LD_INT 18
42512: DOUBLE
42513: EQUAL
42514: IFTRUE 42518
42516: GO 42543
42518: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
42519: LD_ADDR_VAR 0 3
42523: PUSH
42524: LD_INT 40
42526: PPUSH
42527: LD_VAR 0 1
42531: PPUSH
42532: CALL_OW 321
42536: PUSH
42537: LD_INT 2
42539: EQUAL
42540: ST_TO_ADDR
42541: GO 42577
42543: LD_INT 27
42545: DOUBLE
42546: EQUAL
42547: IFTRUE 42551
42549: GO 42576
42551: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
42552: LD_ADDR_VAR 0 3
42556: PUSH
42557: LD_INT 35
42559: PPUSH
42560: LD_VAR 0 1
42564: PPUSH
42565: CALL_OW 321
42569: PUSH
42570: LD_INT 2
42572: EQUAL
42573: ST_TO_ADDR
42574: GO 42577
42576: POP
// end ;
42577: LD_VAR 0 3
42581: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
42582: LD_INT 0
42584: PPUSH
42585: PPUSH
42586: PPUSH
42587: PPUSH
42588: PPUSH
42589: PPUSH
42590: PPUSH
42591: PPUSH
42592: PPUSH
42593: PPUSH
42594: PPUSH
// result := false ;
42595: LD_ADDR_VAR 0 6
42599: PUSH
42600: LD_INT 0
42602: ST_TO_ADDR
// if btype = b_depot then
42603: LD_VAR 0 2
42607: PUSH
42608: LD_INT 0
42610: EQUAL
42611: IFFALSE 42623
// begin result := true ;
42613: LD_ADDR_VAR 0 6
42617: PUSH
42618: LD_INT 1
42620: ST_TO_ADDR
// exit ;
42621: GO 43449
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
42623: LD_VAR 0 1
42627: NOT
42628: PUSH
42629: LD_VAR 0 1
42633: PPUSH
42634: CALL_OW 266
42638: PUSH
42639: LD_INT 0
42641: PUSH
42642: LD_INT 1
42644: PUSH
42645: EMPTY
42646: LIST
42647: LIST
42648: IN
42649: NOT
42650: OR
42651: PUSH
42652: LD_VAR 0 2
42656: NOT
42657: OR
42658: PUSH
42659: LD_VAR 0 5
42663: PUSH
42664: LD_INT 0
42666: PUSH
42667: LD_INT 1
42669: PUSH
42670: LD_INT 2
42672: PUSH
42673: LD_INT 3
42675: PUSH
42676: LD_INT 4
42678: PUSH
42679: LD_INT 5
42681: PUSH
42682: EMPTY
42683: LIST
42684: LIST
42685: LIST
42686: LIST
42687: LIST
42688: LIST
42689: IN
42690: NOT
42691: OR
42692: PUSH
42693: LD_VAR 0 3
42697: PPUSH
42698: LD_VAR 0 4
42702: PPUSH
42703: CALL_OW 488
42707: NOT
42708: OR
42709: IFFALSE 42713
// exit ;
42711: GO 43449
// side := GetSide ( depot ) ;
42713: LD_ADDR_VAR 0 9
42717: PUSH
42718: LD_VAR 0 1
42722: PPUSH
42723: CALL_OW 255
42727: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
42728: LD_VAR 0 9
42732: PPUSH
42733: LD_VAR 0 2
42737: PPUSH
42738: CALL 42206 0 2
42742: NOT
42743: IFFALSE 42747
// exit ;
42745: GO 43449
// pom := GetBase ( depot ) ;
42747: LD_ADDR_VAR 0 10
42751: PUSH
42752: LD_VAR 0 1
42756: PPUSH
42757: CALL_OW 274
42761: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
42762: LD_ADDR_VAR 0 11
42766: PUSH
42767: LD_VAR 0 2
42771: PPUSH
42772: LD_VAR 0 1
42776: PPUSH
42777: CALL_OW 248
42781: PPUSH
42782: CALL_OW 450
42786: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
42787: LD_VAR 0 10
42791: PPUSH
42792: LD_INT 1
42794: PPUSH
42795: CALL_OW 275
42799: PUSH
42800: LD_VAR 0 11
42804: PUSH
42805: LD_INT 1
42807: ARRAY
42808: GREATEREQUAL
42809: PUSH
42810: LD_VAR 0 10
42814: PPUSH
42815: LD_INT 2
42817: PPUSH
42818: CALL_OW 275
42822: PUSH
42823: LD_VAR 0 11
42827: PUSH
42828: LD_INT 2
42830: ARRAY
42831: GREATEREQUAL
42832: AND
42833: PUSH
42834: LD_VAR 0 10
42838: PPUSH
42839: LD_INT 3
42841: PPUSH
42842: CALL_OW 275
42846: PUSH
42847: LD_VAR 0 11
42851: PUSH
42852: LD_INT 3
42854: ARRAY
42855: GREATEREQUAL
42856: AND
42857: NOT
42858: IFFALSE 42862
// exit ;
42860: GO 43449
// if GetBType ( depot ) = b_depot then
42862: LD_VAR 0 1
42866: PPUSH
42867: CALL_OW 266
42871: PUSH
42872: LD_INT 0
42874: EQUAL
42875: IFFALSE 42887
// dist := 28 else
42877: LD_ADDR_VAR 0 14
42881: PUSH
42882: LD_INT 28
42884: ST_TO_ADDR
42885: GO 42895
// dist := 36 ;
42887: LD_ADDR_VAR 0 14
42891: PUSH
42892: LD_INT 36
42894: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
42895: LD_VAR 0 1
42899: PPUSH
42900: LD_VAR 0 3
42904: PPUSH
42905: LD_VAR 0 4
42909: PPUSH
42910: CALL_OW 297
42914: PUSH
42915: LD_VAR 0 14
42919: GREATER
42920: IFFALSE 42924
// exit ;
42922: GO 43449
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
42924: LD_ADDR_VAR 0 12
42928: PUSH
42929: LD_VAR 0 2
42933: PPUSH
42934: LD_VAR 0 3
42938: PPUSH
42939: LD_VAR 0 4
42943: PPUSH
42944: LD_VAR 0 5
42948: PPUSH
42949: LD_VAR 0 1
42953: PPUSH
42954: CALL_OW 248
42958: PPUSH
42959: LD_INT 0
42961: PPUSH
42962: CALL 43454 0 6
42966: ST_TO_ADDR
// if not hexes then
42967: LD_VAR 0 12
42971: NOT
42972: IFFALSE 42976
// exit ;
42974: GO 43449
// hex := GetHexInfo ( x , y ) ;
42976: LD_ADDR_VAR 0 15
42980: PUSH
42981: LD_VAR 0 3
42985: PPUSH
42986: LD_VAR 0 4
42990: PPUSH
42991: CALL_OW 546
42995: ST_TO_ADDR
// if hex [ 1 ] then
42996: LD_VAR 0 15
43000: PUSH
43001: LD_INT 1
43003: ARRAY
43004: IFFALSE 43008
// exit ;
43006: GO 43449
// height := hex [ 2 ] ;
43008: LD_ADDR_VAR 0 13
43012: PUSH
43013: LD_VAR 0 15
43017: PUSH
43018: LD_INT 2
43020: ARRAY
43021: ST_TO_ADDR
// for i = 1 to hexes do
43022: LD_ADDR_VAR 0 7
43026: PUSH
43027: DOUBLE
43028: LD_INT 1
43030: DEC
43031: ST_TO_ADDR
43032: LD_VAR 0 12
43036: PUSH
43037: FOR_TO
43038: IFFALSE 43368
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
43040: LD_VAR 0 12
43044: PUSH
43045: LD_VAR 0 7
43049: ARRAY
43050: PUSH
43051: LD_INT 1
43053: ARRAY
43054: PPUSH
43055: LD_VAR 0 12
43059: PUSH
43060: LD_VAR 0 7
43064: ARRAY
43065: PUSH
43066: LD_INT 2
43068: ARRAY
43069: PPUSH
43070: CALL_OW 488
43074: NOT
43075: PUSH
43076: LD_VAR 0 12
43080: PUSH
43081: LD_VAR 0 7
43085: ARRAY
43086: PUSH
43087: LD_INT 1
43089: ARRAY
43090: PPUSH
43091: LD_VAR 0 12
43095: PUSH
43096: LD_VAR 0 7
43100: ARRAY
43101: PUSH
43102: LD_INT 2
43104: ARRAY
43105: PPUSH
43106: CALL_OW 428
43110: PUSH
43111: LD_INT 0
43113: GREATER
43114: OR
43115: PUSH
43116: LD_VAR 0 12
43120: PUSH
43121: LD_VAR 0 7
43125: ARRAY
43126: PUSH
43127: LD_INT 1
43129: ARRAY
43130: PPUSH
43131: LD_VAR 0 12
43135: PUSH
43136: LD_VAR 0 7
43140: ARRAY
43141: PUSH
43142: LD_INT 2
43144: ARRAY
43145: PPUSH
43146: CALL_OW 351
43150: OR
43151: IFFALSE 43157
// exit ;
43153: POP
43154: POP
43155: GO 43449
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43157: LD_ADDR_VAR 0 8
43161: PUSH
43162: LD_VAR 0 12
43166: PUSH
43167: LD_VAR 0 7
43171: ARRAY
43172: PUSH
43173: LD_INT 1
43175: ARRAY
43176: PPUSH
43177: LD_VAR 0 12
43181: PUSH
43182: LD_VAR 0 7
43186: ARRAY
43187: PUSH
43188: LD_INT 2
43190: ARRAY
43191: PPUSH
43192: CALL_OW 546
43196: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
43197: LD_VAR 0 8
43201: PUSH
43202: LD_INT 1
43204: ARRAY
43205: PUSH
43206: LD_VAR 0 8
43210: PUSH
43211: LD_INT 2
43213: ARRAY
43214: PUSH
43215: LD_VAR 0 13
43219: PUSH
43220: LD_INT 2
43222: PLUS
43223: GREATER
43224: OR
43225: PUSH
43226: LD_VAR 0 8
43230: PUSH
43231: LD_INT 2
43233: ARRAY
43234: PUSH
43235: LD_VAR 0 13
43239: PUSH
43240: LD_INT 2
43242: MINUS
43243: LESS
43244: OR
43245: PUSH
43246: LD_VAR 0 8
43250: PUSH
43251: LD_INT 3
43253: ARRAY
43254: PUSH
43255: LD_INT 0
43257: PUSH
43258: LD_INT 8
43260: PUSH
43261: LD_INT 9
43263: PUSH
43264: LD_INT 10
43266: PUSH
43267: LD_INT 11
43269: PUSH
43270: LD_INT 12
43272: PUSH
43273: LD_INT 13
43275: PUSH
43276: LD_INT 16
43278: PUSH
43279: LD_INT 17
43281: PUSH
43282: LD_INT 18
43284: PUSH
43285: LD_INT 19
43287: PUSH
43288: LD_INT 20
43290: PUSH
43291: LD_INT 21
43293: PUSH
43294: EMPTY
43295: LIST
43296: LIST
43297: LIST
43298: LIST
43299: LIST
43300: LIST
43301: LIST
43302: LIST
43303: LIST
43304: LIST
43305: LIST
43306: LIST
43307: LIST
43308: IN
43309: NOT
43310: OR
43311: PUSH
43312: LD_VAR 0 8
43316: PUSH
43317: LD_INT 5
43319: ARRAY
43320: NOT
43321: OR
43322: PUSH
43323: LD_VAR 0 8
43327: PUSH
43328: LD_INT 6
43330: ARRAY
43331: PUSH
43332: LD_INT 1
43334: PUSH
43335: LD_INT 2
43337: PUSH
43338: LD_INT 7
43340: PUSH
43341: LD_INT 9
43343: PUSH
43344: LD_INT 10
43346: PUSH
43347: LD_INT 11
43349: PUSH
43350: EMPTY
43351: LIST
43352: LIST
43353: LIST
43354: LIST
43355: LIST
43356: LIST
43357: IN
43358: NOT
43359: OR
43360: IFFALSE 43366
// exit ;
43362: POP
43363: POP
43364: GO 43449
// end ;
43366: GO 43037
43368: POP
43369: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
43370: LD_VAR 0 9
43374: PPUSH
43375: LD_VAR 0 3
43379: PPUSH
43380: LD_VAR 0 4
43384: PPUSH
43385: LD_INT 20
43387: PPUSH
43388: CALL 35372 0 4
43392: PUSH
43393: LD_INT 4
43395: ARRAY
43396: IFFALSE 43400
// exit ;
43398: GO 43449
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
43400: LD_VAR 0 2
43404: PUSH
43405: LD_INT 29
43407: PUSH
43408: LD_INT 30
43410: PUSH
43411: EMPTY
43412: LIST
43413: LIST
43414: IN
43415: PUSH
43416: LD_VAR 0 3
43420: PPUSH
43421: LD_VAR 0 4
43425: PPUSH
43426: LD_VAR 0 9
43430: PPUSH
43431: CALL_OW 440
43435: NOT
43436: AND
43437: IFFALSE 43441
// exit ;
43439: GO 43449
// result := true ;
43441: LD_ADDR_VAR 0 6
43445: PUSH
43446: LD_INT 1
43448: ST_TO_ADDR
// end ;
43449: LD_VAR 0 6
43453: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
43454: LD_INT 0
43456: PPUSH
43457: PPUSH
43458: PPUSH
43459: PPUSH
43460: PPUSH
43461: PPUSH
43462: PPUSH
43463: PPUSH
43464: PPUSH
43465: PPUSH
43466: PPUSH
43467: PPUSH
43468: PPUSH
43469: PPUSH
43470: PPUSH
43471: PPUSH
43472: PPUSH
43473: PPUSH
43474: PPUSH
43475: PPUSH
43476: PPUSH
43477: PPUSH
43478: PPUSH
43479: PPUSH
43480: PPUSH
43481: PPUSH
43482: PPUSH
43483: PPUSH
43484: PPUSH
43485: PPUSH
43486: PPUSH
43487: PPUSH
43488: PPUSH
43489: PPUSH
43490: PPUSH
43491: PPUSH
43492: PPUSH
43493: PPUSH
43494: PPUSH
43495: PPUSH
43496: PPUSH
43497: PPUSH
43498: PPUSH
43499: PPUSH
43500: PPUSH
43501: PPUSH
43502: PPUSH
43503: PPUSH
43504: PPUSH
43505: PPUSH
43506: PPUSH
43507: PPUSH
43508: PPUSH
43509: PPUSH
43510: PPUSH
43511: PPUSH
43512: PPUSH
43513: PPUSH
// result = [ ] ;
43514: LD_ADDR_VAR 0 7
43518: PUSH
43519: EMPTY
43520: ST_TO_ADDR
// temp_list = [ ] ;
43521: LD_ADDR_VAR 0 9
43525: PUSH
43526: EMPTY
43527: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
43528: LD_VAR 0 4
43532: PUSH
43533: LD_INT 0
43535: PUSH
43536: LD_INT 1
43538: PUSH
43539: LD_INT 2
43541: PUSH
43542: LD_INT 3
43544: PUSH
43545: LD_INT 4
43547: PUSH
43548: LD_INT 5
43550: PUSH
43551: EMPTY
43552: LIST
43553: LIST
43554: LIST
43555: LIST
43556: LIST
43557: LIST
43558: IN
43559: NOT
43560: PUSH
43561: LD_VAR 0 1
43565: PUSH
43566: LD_INT 0
43568: PUSH
43569: LD_INT 1
43571: PUSH
43572: EMPTY
43573: LIST
43574: LIST
43575: IN
43576: PUSH
43577: LD_VAR 0 5
43581: PUSH
43582: LD_INT 1
43584: PUSH
43585: LD_INT 2
43587: PUSH
43588: LD_INT 3
43590: PUSH
43591: EMPTY
43592: LIST
43593: LIST
43594: LIST
43595: IN
43596: NOT
43597: AND
43598: OR
43599: IFFALSE 43603
// exit ;
43601: GO 61994
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
43603: LD_VAR 0 1
43607: PUSH
43608: LD_INT 6
43610: PUSH
43611: LD_INT 7
43613: PUSH
43614: LD_INT 8
43616: PUSH
43617: LD_INT 13
43619: PUSH
43620: LD_INT 12
43622: PUSH
43623: LD_INT 15
43625: PUSH
43626: LD_INT 11
43628: PUSH
43629: LD_INT 14
43631: PUSH
43632: LD_INT 10
43634: PUSH
43635: EMPTY
43636: LIST
43637: LIST
43638: LIST
43639: LIST
43640: LIST
43641: LIST
43642: LIST
43643: LIST
43644: LIST
43645: IN
43646: IFFALSE 43656
// btype = b_lab ;
43648: LD_ADDR_VAR 0 1
43652: PUSH
43653: LD_INT 6
43655: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
43656: LD_VAR 0 6
43660: PUSH
43661: LD_INT 0
43663: PUSH
43664: LD_INT 1
43666: PUSH
43667: LD_INT 2
43669: PUSH
43670: EMPTY
43671: LIST
43672: LIST
43673: LIST
43674: IN
43675: NOT
43676: PUSH
43677: LD_VAR 0 1
43681: PUSH
43682: LD_INT 0
43684: PUSH
43685: LD_INT 1
43687: PUSH
43688: LD_INT 2
43690: PUSH
43691: LD_INT 3
43693: PUSH
43694: LD_INT 6
43696: PUSH
43697: LD_INT 36
43699: PUSH
43700: LD_INT 4
43702: PUSH
43703: LD_INT 5
43705: PUSH
43706: LD_INT 31
43708: PUSH
43709: LD_INT 32
43711: PUSH
43712: LD_INT 33
43714: PUSH
43715: EMPTY
43716: LIST
43717: LIST
43718: LIST
43719: LIST
43720: LIST
43721: LIST
43722: LIST
43723: LIST
43724: LIST
43725: LIST
43726: LIST
43727: IN
43728: NOT
43729: PUSH
43730: LD_VAR 0 6
43734: PUSH
43735: LD_INT 1
43737: EQUAL
43738: AND
43739: OR
43740: PUSH
43741: LD_VAR 0 1
43745: PUSH
43746: LD_INT 2
43748: PUSH
43749: LD_INT 3
43751: PUSH
43752: EMPTY
43753: LIST
43754: LIST
43755: IN
43756: NOT
43757: PUSH
43758: LD_VAR 0 6
43762: PUSH
43763: LD_INT 2
43765: EQUAL
43766: AND
43767: OR
43768: IFFALSE 43778
// mode = 0 ;
43770: LD_ADDR_VAR 0 6
43774: PUSH
43775: LD_INT 0
43777: ST_TO_ADDR
// case mode of 0 :
43778: LD_VAR 0 6
43782: PUSH
43783: LD_INT 0
43785: DOUBLE
43786: EQUAL
43787: IFTRUE 43791
43789: GO 55244
43791: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43792: LD_ADDR_VAR 0 11
43796: PUSH
43797: LD_INT 0
43799: PUSH
43800: LD_INT 0
43802: PUSH
43803: EMPTY
43804: LIST
43805: LIST
43806: PUSH
43807: LD_INT 0
43809: PUSH
43810: LD_INT 1
43812: NEG
43813: PUSH
43814: EMPTY
43815: LIST
43816: LIST
43817: PUSH
43818: LD_INT 1
43820: PUSH
43821: LD_INT 0
43823: PUSH
43824: EMPTY
43825: LIST
43826: LIST
43827: PUSH
43828: LD_INT 1
43830: PUSH
43831: LD_INT 1
43833: PUSH
43834: EMPTY
43835: LIST
43836: LIST
43837: PUSH
43838: LD_INT 0
43840: PUSH
43841: LD_INT 1
43843: PUSH
43844: EMPTY
43845: LIST
43846: LIST
43847: PUSH
43848: LD_INT 1
43850: NEG
43851: PUSH
43852: LD_INT 0
43854: PUSH
43855: EMPTY
43856: LIST
43857: LIST
43858: PUSH
43859: LD_INT 1
43861: NEG
43862: PUSH
43863: LD_INT 1
43865: NEG
43866: PUSH
43867: EMPTY
43868: LIST
43869: LIST
43870: PUSH
43871: LD_INT 1
43873: NEG
43874: PUSH
43875: LD_INT 2
43877: NEG
43878: PUSH
43879: EMPTY
43880: LIST
43881: LIST
43882: PUSH
43883: LD_INT 0
43885: PUSH
43886: LD_INT 2
43888: NEG
43889: PUSH
43890: EMPTY
43891: LIST
43892: LIST
43893: PUSH
43894: LD_INT 1
43896: PUSH
43897: LD_INT 1
43899: NEG
43900: PUSH
43901: EMPTY
43902: LIST
43903: LIST
43904: PUSH
43905: LD_INT 1
43907: PUSH
43908: LD_INT 2
43910: PUSH
43911: EMPTY
43912: LIST
43913: LIST
43914: PUSH
43915: LD_INT 0
43917: PUSH
43918: LD_INT 2
43920: PUSH
43921: EMPTY
43922: LIST
43923: LIST
43924: PUSH
43925: LD_INT 1
43927: NEG
43928: PUSH
43929: LD_INT 1
43931: PUSH
43932: EMPTY
43933: LIST
43934: LIST
43935: PUSH
43936: LD_INT 1
43938: PUSH
43939: LD_INT 3
43941: PUSH
43942: EMPTY
43943: LIST
43944: LIST
43945: PUSH
43946: LD_INT 0
43948: PUSH
43949: LD_INT 3
43951: PUSH
43952: EMPTY
43953: LIST
43954: LIST
43955: PUSH
43956: LD_INT 1
43958: NEG
43959: PUSH
43960: LD_INT 2
43962: PUSH
43963: EMPTY
43964: LIST
43965: LIST
43966: PUSH
43967: EMPTY
43968: LIST
43969: LIST
43970: LIST
43971: LIST
43972: LIST
43973: LIST
43974: LIST
43975: LIST
43976: LIST
43977: LIST
43978: LIST
43979: LIST
43980: LIST
43981: LIST
43982: LIST
43983: LIST
43984: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43985: LD_ADDR_VAR 0 12
43989: PUSH
43990: LD_INT 0
43992: PUSH
43993: LD_INT 0
43995: PUSH
43996: EMPTY
43997: LIST
43998: LIST
43999: PUSH
44000: LD_INT 0
44002: PUSH
44003: LD_INT 1
44005: NEG
44006: PUSH
44007: EMPTY
44008: LIST
44009: LIST
44010: PUSH
44011: LD_INT 1
44013: PUSH
44014: LD_INT 0
44016: PUSH
44017: EMPTY
44018: LIST
44019: LIST
44020: PUSH
44021: LD_INT 1
44023: PUSH
44024: LD_INT 1
44026: PUSH
44027: EMPTY
44028: LIST
44029: LIST
44030: PUSH
44031: LD_INT 0
44033: PUSH
44034: LD_INT 1
44036: PUSH
44037: EMPTY
44038: LIST
44039: LIST
44040: PUSH
44041: LD_INT 1
44043: NEG
44044: PUSH
44045: LD_INT 0
44047: PUSH
44048: EMPTY
44049: LIST
44050: LIST
44051: PUSH
44052: LD_INT 1
44054: NEG
44055: PUSH
44056: LD_INT 1
44058: NEG
44059: PUSH
44060: EMPTY
44061: LIST
44062: LIST
44063: PUSH
44064: LD_INT 1
44066: PUSH
44067: LD_INT 1
44069: NEG
44070: PUSH
44071: EMPTY
44072: LIST
44073: LIST
44074: PUSH
44075: LD_INT 2
44077: PUSH
44078: LD_INT 0
44080: PUSH
44081: EMPTY
44082: LIST
44083: LIST
44084: PUSH
44085: LD_INT 2
44087: PUSH
44088: LD_INT 1
44090: PUSH
44091: EMPTY
44092: LIST
44093: LIST
44094: PUSH
44095: LD_INT 1
44097: NEG
44098: PUSH
44099: LD_INT 1
44101: PUSH
44102: EMPTY
44103: LIST
44104: LIST
44105: PUSH
44106: LD_INT 2
44108: NEG
44109: PUSH
44110: LD_INT 0
44112: PUSH
44113: EMPTY
44114: LIST
44115: LIST
44116: PUSH
44117: LD_INT 2
44119: NEG
44120: PUSH
44121: LD_INT 1
44123: NEG
44124: PUSH
44125: EMPTY
44126: LIST
44127: LIST
44128: PUSH
44129: LD_INT 2
44131: NEG
44132: PUSH
44133: LD_INT 1
44135: PUSH
44136: EMPTY
44137: LIST
44138: LIST
44139: PUSH
44140: LD_INT 3
44142: NEG
44143: PUSH
44144: LD_INT 0
44146: PUSH
44147: EMPTY
44148: LIST
44149: LIST
44150: PUSH
44151: LD_INT 3
44153: NEG
44154: PUSH
44155: LD_INT 1
44157: NEG
44158: PUSH
44159: EMPTY
44160: LIST
44161: LIST
44162: PUSH
44163: EMPTY
44164: LIST
44165: LIST
44166: LIST
44167: LIST
44168: LIST
44169: LIST
44170: LIST
44171: LIST
44172: LIST
44173: LIST
44174: LIST
44175: LIST
44176: LIST
44177: LIST
44178: LIST
44179: LIST
44180: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44181: LD_ADDR_VAR 0 13
44185: PUSH
44186: LD_INT 0
44188: PUSH
44189: LD_INT 0
44191: PUSH
44192: EMPTY
44193: LIST
44194: LIST
44195: PUSH
44196: LD_INT 0
44198: PUSH
44199: LD_INT 1
44201: NEG
44202: PUSH
44203: EMPTY
44204: LIST
44205: LIST
44206: PUSH
44207: LD_INT 1
44209: PUSH
44210: LD_INT 0
44212: PUSH
44213: EMPTY
44214: LIST
44215: LIST
44216: PUSH
44217: LD_INT 1
44219: PUSH
44220: LD_INT 1
44222: PUSH
44223: EMPTY
44224: LIST
44225: LIST
44226: PUSH
44227: LD_INT 0
44229: PUSH
44230: LD_INT 1
44232: PUSH
44233: EMPTY
44234: LIST
44235: LIST
44236: PUSH
44237: LD_INT 1
44239: NEG
44240: PUSH
44241: LD_INT 0
44243: PUSH
44244: EMPTY
44245: LIST
44246: LIST
44247: PUSH
44248: LD_INT 1
44250: NEG
44251: PUSH
44252: LD_INT 1
44254: NEG
44255: PUSH
44256: EMPTY
44257: LIST
44258: LIST
44259: PUSH
44260: LD_INT 1
44262: NEG
44263: PUSH
44264: LD_INT 2
44266: NEG
44267: PUSH
44268: EMPTY
44269: LIST
44270: LIST
44271: PUSH
44272: LD_INT 2
44274: PUSH
44275: LD_INT 1
44277: PUSH
44278: EMPTY
44279: LIST
44280: LIST
44281: PUSH
44282: LD_INT 2
44284: PUSH
44285: LD_INT 2
44287: PUSH
44288: EMPTY
44289: LIST
44290: LIST
44291: PUSH
44292: LD_INT 1
44294: PUSH
44295: LD_INT 2
44297: PUSH
44298: EMPTY
44299: LIST
44300: LIST
44301: PUSH
44302: LD_INT 2
44304: NEG
44305: PUSH
44306: LD_INT 1
44308: NEG
44309: PUSH
44310: EMPTY
44311: LIST
44312: LIST
44313: PUSH
44314: LD_INT 2
44316: NEG
44317: PUSH
44318: LD_INT 2
44320: NEG
44321: PUSH
44322: EMPTY
44323: LIST
44324: LIST
44325: PUSH
44326: LD_INT 2
44328: NEG
44329: PUSH
44330: LD_INT 3
44332: NEG
44333: PUSH
44334: EMPTY
44335: LIST
44336: LIST
44337: PUSH
44338: LD_INT 3
44340: NEG
44341: PUSH
44342: LD_INT 2
44344: NEG
44345: PUSH
44346: EMPTY
44347: LIST
44348: LIST
44349: PUSH
44350: LD_INT 3
44352: NEG
44353: PUSH
44354: LD_INT 3
44356: NEG
44357: PUSH
44358: EMPTY
44359: LIST
44360: LIST
44361: PUSH
44362: EMPTY
44363: LIST
44364: LIST
44365: LIST
44366: LIST
44367: LIST
44368: LIST
44369: LIST
44370: LIST
44371: LIST
44372: LIST
44373: LIST
44374: LIST
44375: LIST
44376: LIST
44377: LIST
44378: LIST
44379: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44380: LD_ADDR_VAR 0 14
44384: PUSH
44385: LD_INT 0
44387: PUSH
44388: LD_INT 0
44390: PUSH
44391: EMPTY
44392: LIST
44393: LIST
44394: PUSH
44395: LD_INT 0
44397: PUSH
44398: LD_INT 1
44400: NEG
44401: PUSH
44402: EMPTY
44403: LIST
44404: LIST
44405: PUSH
44406: LD_INT 1
44408: PUSH
44409: LD_INT 0
44411: PUSH
44412: EMPTY
44413: LIST
44414: LIST
44415: PUSH
44416: LD_INT 1
44418: PUSH
44419: LD_INT 1
44421: PUSH
44422: EMPTY
44423: LIST
44424: LIST
44425: PUSH
44426: LD_INT 0
44428: PUSH
44429: LD_INT 1
44431: PUSH
44432: EMPTY
44433: LIST
44434: LIST
44435: PUSH
44436: LD_INT 1
44438: NEG
44439: PUSH
44440: LD_INT 0
44442: PUSH
44443: EMPTY
44444: LIST
44445: LIST
44446: PUSH
44447: LD_INT 1
44449: NEG
44450: PUSH
44451: LD_INT 1
44453: NEG
44454: PUSH
44455: EMPTY
44456: LIST
44457: LIST
44458: PUSH
44459: LD_INT 1
44461: NEG
44462: PUSH
44463: LD_INT 2
44465: NEG
44466: PUSH
44467: EMPTY
44468: LIST
44469: LIST
44470: PUSH
44471: LD_INT 0
44473: PUSH
44474: LD_INT 2
44476: NEG
44477: PUSH
44478: EMPTY
44479: LIST
44480: LIST
44481: PUSH
44482: LD_INT 1
44484: PUSH
44485: LD_INT 1
44487: NEG
44488: PUSH
44489: EMPTY
44490: LIST
44491: LIST
44492: PUSH
44493: LD_INT 1
44495: PUSH
44496: LD_INT 2
44498: PUSH
44499: EMPTY
44500: LIST
44501: LIST
44502: PUSH
44503: LD_INT 0
44505: PUSH
44506: LD_INT 2
44508: PUSH
44509: EMPTY
44510: LIST
44511: LIST
44512: PUSH
44513: LD_INT 1
44515: NEG
44516: PUSH
44517: LD_INT 1
44519: PUSH
44520: EMPTY
44521: LIST
44522: LIST
44523: PUSH
44524: LD_INT 1
44526: NEG
44527: PUSH
44528: LD_INT 3
44530: NEG
44531: PUSH
44532: EMPTY
44533: LIST
44534: LIST
44535: PUSH
44536: LD_INT 0
44538: PUSH
44539: LD_INT 3
44541: NEG
44542: PUSH
44543: EMPTY
44544: LIST
44545: LIST
44546: PUSH
44547: LD_INT 1
44549: PUSH
44550: LD_INT 2
44552: NEG
44553: PUSH
44554: EMPTY
44555: LIST
44556: LIST
44557: PUSH
44558: EMPTY
44559: LIST
44560: LIST
44561: LIST
44562: LIST
44563: LIST
44564: LIST
44565: LIST
44566: LIST
44567: LIST
44568: LIST
44569: LIST
44570: LIST
44571: LIST
44572: LIST
44573: LIST
44574: LIST
44575: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44576: LD_ADDR_VAR 0 15
44580: PUSH
44581: LD_INT 0
44583: PUSH
44584: LD_INT 0
44586: PUSH
44587: EMPTY
44588: LIST
44589: LIST
44590: PUSH
44591: LD_INT 0
44593: PUSH
44594: LD_INT 1
44596: NEG
44597: PUSH
44598: EMPTY
44599: LIST
44600: LIST
44601: PUSH
44602: LD_INT 1
44604: PUSH
44605: LD_INT 0
44607: PUSH
44608: EMPTY
44609: LIST
44610: LIST
44611: PUSH
44612: LD_INT 1
44614: PUSH
44615: LD_INT 1
44617: PUSH
44618: EMPTY
44619: LIST
44620: LIST
44621: PUSH
44622: LD_INT 0
44624: PUSH
44625: LD_INT 1
44627: PUSH
44628: EMPTY
44629: LIST
44630: LIST
44631: PUSH
44632: LD_INT 1
44634: NEG
44635: PUSH
44636: LD_INT 0
44638: PUSH
44639: EMPTY
44640: LIST
44641: LIST
44642: PUSH
44643: LD_INT 1
44645: NEG
44646: PUSH
44647: LD_INT 1
44649: NEG
44650: PUSH
44651: EMPTY
44652: LIST
44653: LIST
44654: PUSH
44655: LD_INT 1
44657: PUSH
44658: LD_INT 1
44660: NEG
44661: PUSH
44662: EMPTY
44663: LIST
44664: LIST
44665: PUSH
44666: LD_INT 2
44668: PUSH
44669: LD_INT 0
44671: PUSH
44672: EMPTY
44673: LIST
44674: LIST
44675: PUSH
44676: LD_INT 2
44678: PUSH
44679: LD_INT 1
44681: PUSH
44682: EMPTY
44683: LIST
44684: LIST
44685: PUSH
44686: LD_INT 1
44688: NEG
44689: PUSH
44690: LD_INT 1
44692: PUSH
44693: EMPTY
44694: LIST
44695: LIST
44696: PUSH
44697: LD_INT 2
44699: NEG
44700: PUSH
44701: LD_INT 0
44703: PUSH
44704: EMPTY
44705: LIST
44706: LIST
44707: PUSH
44708: LD_INT 2
44710: NEG
44711: PUSH
44712: LD_INT 1
44714: NEG
44715: PUSH
44716: EMPTY
44717: LIST
44718: LIST
44719: PUSH
44720: LD_INT 2
44722: PUSH
44723: LD_INT 1
44725: NEG
44726: PUSH
44727: EMPTY
44728: LIST
44729: LIST
44730: PUSH
44731: LD_INT 3
44733: PUSH
44734: LD_INT 0
44736: PUSH
44737: EMPTY
44738: LIST
44739: LIST
44740: PUSH
44741: LD_INT 3
44743: PUSH
44744: LD_INT 1
44746: PUSH
44747: EMPTY
44748: LIST
44749: LIST
44750: PUSH
44751: EMPTY
44752: LIST
44753: LIST
44754: LIST
44755: LIST
44756: LIST
44757: LIST
44758: LIST
44759: LIST
44760: LIST
44761: LIST
44762: LIST
44763: LIST
44764: LIST
44765: LIST
44766: LIST
44767: LIST
44768: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44769: LD_ADDR_VAR 0 16
44773: PUSH
44774: LD_INT 0
44776: PUSH
44777: LD_INT 0
44779: PUSH
44780: EMPTY
44781: LIST
44782: LIST
44783: PUSH
44784: LD_INT 0
44786: PUSH
44787: LD_INT 1
44789: NEG
44790: PUSH
44791: EMPTY
44792: LIST
44793: LIST
44794: PUSH
44795: LD_INT 1
44797: PUSH
44798: LD_INT 0
44800: PUSH
44801: EMPTY
44802: LIST
44803: LIST
44804: PUSH
44805: LD_INT 1
44807: PUSH
44808: LD_INT 1
44810: PUSH
44811: EMPTY
44812: LIST
44813: LIST
44814: PUSH
44815: LD_INT 0
44817: PUSH
44818: LD_INT 1
44820: PUSH
44821: EMPTY
44822: LIST
44823: LIST
44824: PUSH
44825: LD_INT 1
44827: NEG
44828: PUSH
44829: LD_INT 0
44831: PUSH
44832: EMPTY
44833: LIST
44834: LIST
44835: PUSH
44836: LD_INT 1
44838: NEG
44839: PUSH
44840: LD_INT 1
44842: NEG
44843: PUSH
44844: EMPTY
44845: LIST
44846: LIST
44847: PUSH
44848: LD_INT 1
44850: NEG
44851: PUSH
44852: LD_INT 2
44854: NEG
44855: PUSH
44856: EMPTY
44857: LIST
44858: LIST
44859: PUSH
44860: LD_INT 2
44862: PUSH
44863: LD_INT 1
44865: PUSH
44866: EMPTY
44867: LIST
44868: LIST
44869: PUSH
44870: LD_INT 2
44872: PUSH
44873: LD_INT 2
44875: PUSH
44876: EMPTY
44877: LIST
44878: LIST
44879: PUSH
44880: LD_INT 1
44882: PUSH
44883: LD_INT 2
44885: PUSH
44886: EMPTY
44887: LIST
44888: LIST
44889: PUSH
44890: LD_INT 2
44892: NEG
44893: PUSH
44894: LD_INT 1
44896: NEG
44897: PUSH
44898: EMPTY
44899: LIST
44900: LIST
44901: PUSH
44902: LD_INT 2
44904: NEG
44905: PUSH
44906: LD_INT 2
44908: NEG
44909: PUSH
44910: EMPTY
44911: LIST
44912: LIST
44913: PUSH
44914: LD_INT 3
44916: PUSH
44917: LD_INT 2
44919: PUSH
44920: EMPTY
44921: LIST
44922: LIST
44923: PUSH
44924: LD_INT 3
44926: PUSH
44927: LD_INT 3
44929: PUSH
44930: EMPTY
44931: LIST
44932: LIST
44933: PUSH
44934: LD_INT 2
44936: PUSH
44937: LD_INT 3
44939: PUSH
44940: EMPTY
44941: LIST
44942: LIST
44943: PUSH
44944: EMPTY
44945: LIST
44946: LIST
44947: LIST
44948: LIST
44949: LIST
44950: LIST
44951: LIST
44952: LIST
44953: LIST
44954: LIST
44955: LIST
44956: LIST
44957: LIST
44958: LIST
44959: LIST
44960: LIST
44961: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44962: LD_ADDR_VAR 0 17
44966: PUSH
44967: LD_INT 0
44969: PUSH
44970: LD_INT 0
44972: PUSH
44973: EMPTY
44974: LIST
44975: LIST
44976: PUSH
44977: LD_INT 0
44979: PUSH
44980: LD_INT 1
44982: NEG
44983: PUSH
44984: EMPTY
44985: LIST
44986: LIST
44987: PUSH
44988: LD_INT 1
44990: PUSH
44991: LD_INT 0
44993: PUSH
44994: EMPTY
44995: LIST
44996: LIST
44997: PUSH
44998: LD_INT 1
45000: PUSH
45001: LD_INT 1
45003: PUSH
45004: EMPTY
45005: LIST
45006: LIST
45007: PUSH
45008: LD_INT 0
45010: PUSH
45011: LD_INT 1
45013: PUSH
45014: EMPTY
45015: LIST
45016: LIST
45017: PUSH
45018: LD_INT 1
45020: NEG
45021: PUSH
45022: LD_INT 0
45024: PUSH
45025: EMPTY
45026: LIST
45027: LIST
45028: PUSH
45029: LD_INT 1
45031: NEG
45032: PUSH
45033: LD_INT 1
45035: NEG
45036: PUSH
45037: EMPTY
45038: LIST
45039: LIST
45040: PUSH
45041: LD_INT 1
45043: NEG
45044: PUSH
45045: LD_INT 2
45047: NEG
45048: PUSH
45049: EMPTY
45050: LIST
45051: LIST
45052: PUSH
45053: LD_INT 0
45055: PUSH
45056: LD_INT 2
45058: NEG
45059: PUSH
45060: EMPTY
45061: LIST
45062: LIST
45063: PUSH
45064: LD_INT 1
45066: PUSH
45067: LD_INT 1
45069: NEG
45070: PUSH
45071: EMPTY
45072: LIST
45073: LIST
45074: PUSH
45075: LD_INT 2
45077: PUSH
45078: LD_INT 0
45080: PUSH
45081: EMPTY
45082: LIST
45083: LIST
45084: PUSH
45085: LD_INT 2
45087: PUSH
45088: LD_INT 1
45090: PUSH
45091: EMPTY
45092: LIST
45093: LIST
45094: PUSH
45095: LD_INT 2
45097: PUSH
45098: LD_INT 2
45100: PUSH
45101: EMPTY
45102: LIST
45103: LIST
45104: PUSH
45105: LD_INT 1
45107: PUSH
45108: LD_INT 2
45110: PUSH
45111: EMPTY
45112: LIST
45113: LIST
45114: PUSH
45115: LD_INT 0
45117: PUSH
45118: LD_INT 2
45120: PUSH
45121: EMPTY
45122: LIST
45123: LIST
45124: PUSH
45125: LD_INT 1
45127: NEG
45128: PUSH
45129: LD_INT 1
45131: PUSH
45132: EMPTY
45133: LIST
45134: LIST
45135: PUSH
45136: LD_INT 2
45138: NEG
45139: PUSH
45140: LD_INT 0
45142: PUSH
45143: EMPTY
45144: LIST
45145: LIST
45146: PUSH
45147: LD_INT 2
45149: NEG
45150: PUSH
45151: LD_INT 1
45153: NEG
45154: PUSH
45155: EMPTY
45156: LIST
45157: LIST
45158: PUSH
45159: LD_INT 2
45161: NEG
45162: PUSH
45163: LD_INT 2
45165: NEG
45166: PUSH
45167: EMPTY
45168: LIST
45169: LIST
45170: PUSH
45171: EMPTY
45172: LIST
45173: LIST
45174: LIST
45175: LIST
45176: LIST
45177: LIST
45178: LIST
45179: LIST
45180: LIST
45181: LIST
45182: LIST
45183: LIST
45184: LIST
45185: LIST
45186: LIST
45187: LIST
45188: LIST
45189: LIST
45190: LIST
45191: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45192: LD_ADDR_VAR 0 18
45196: PUSH
45197: LD_INT 0
45199: PUSH
45200: LD_INT 0
45202: PUSH
45203: EMPTY
45204: LIST
45205: LIST
45206: PUSH
45207: LD_INT 0
45209: PUSH
45210: LD_INT 1
45212: NEG
45213: PUSH
45214: EMPTY
45215: LIST
45216: LIST
45217: PUSH
45218: LD_INT 1
45220: PUSH
45221: LD_INT 0
45223: PUSH
45224: EMPTY
45225: LIST
45226: LIST
45227: PUSH
45228: LD_INT 1
45230: PUSH
45231: LD_INT 1
45233: PUSH
45234: EMPTY
45235: LIST
45236: LIST
45237: PUSH
45238: LD_INT 0
45240: PUSH
45241: LD_INT 1
45243: PUSH
45244: EMPTY
45245: LIST
45246: LIST
45247: PUSH
45248: LD_INT 1
45250: NEG
45251: PUSH
45252: LD_INT 0
45254: PUSH
45255: EMPTY
45256: LIST
45257: LIST
45258: PUSH
45259: LD_INT 1
45261: NEG
45262: PUSH
45263: LD_INT 1
45265: NEG
45266: PUSH
45267: EMPTY
45268: LIST
45269: LIST
45270: PUSH
45271: LD_INT 1
45273: NEG
45274: PUSH
45275: LD_INT 2
45277: NEG
45278: PUSH
45279: EMPTY
45280: LIST
45281: LIST
45282: PUSH
45283: LD_INT 0
45285: PUSH
45286: LD_INT 2
45288: NEG
45289: PUSH
45290: EMPTY
45291: LIST
45292: LIST
45293: PUSH
45294: LD_INT 1
45296: PUSH
45297: LD_INT 1
45299: NEG
45300: PUSH
45301: EMPTY
45302: LIST
45303: LIST
45304: PUSH
45305: LD_INT 2
45307: PUSH
45308: LD_INT 0
45310: PUSH
45311: EMPTY
45312: LIST
45313: LIST
45314: PUSH
45315: LD_INT 2
45317: PUSH
45318: LD_INT 1
45320: PUSH
45321: EMPTY
45322: LIST
45323: LIST
45324: PUSH
45325: LD_INT 2
45327: PUSH
45328: LD_INT 2
45330: PUSH
45331: EMPTY
45332: LIST
45333: LIST
45334: PUSH
45335: LD_INT 1
45337: PUSH
45338: LD_INT 2
45340: PUSH
45341: EMPTY
45342: LIST
45343: LIST
45344: PUSH
45345: LD_INT 0
45347: PUSH
45348: LD_INT 2
45350: PUSH
45351: EMPTY
45352: LIST
45353: LIST
45354: PUSH
45355: LD_INT 1
45357: NEG
45358: PUSH
45359: LD_INT 1
45361: PUSH
45362: EMPTY
45363: LIST
45364: LIST
45365: PUSH
45366: LD_INT 2
45368: NEG
45369: PUSH
45370: LD_INT 0
45372: PUSH
45373: EMPTY
45374: LIST
45375: LIST
45376: PUSH
45377: LD_INT 2
45379: NEG
45380: PUSH
45381: LD_INT 1
45383: NEG
45384: PUSH
45385: EMPTY
45386: LIST
45387: LIST
45388: PUSH
45389: LD_INT 2
45391: NEG
45392: PUSH
45393: LD_INT 2
45395: NEG
45396: PUSH
45397: EMPTY
45398: LIST
45399: LIST
45400: PUSH
45401: EMPTY
45402: LIST
45403: LIST
45404: LIST
45405: LIST
45406: LIST
45407: LIST
45408: LIST
45409: LIST
45410: LIST
45411: LIST
45412: LIST
45413: LIST
45414: LIST
45415: LIST
45416: LIST
45417: LIST
45418: LIST
45419: LIST
45420: LIST
45421: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45422: LD_ADDR_VAR 0 19
45426: PUSH
45427: LD_INT 0
45429: PUSH
45430: LD_INT 0
45432: PUSH
45433: EMPTY
45434: LIST
45435: LIST
45436: PUSH
45437: LD_INT 0
45439: PUSH
45440: LD_INT 1
45442: NEG
45443: PUSH
45444: EMPTY
45445: LIST
45446: LIST
45447: PUSH
45448: LD_INT 1
45450: PUSH
45451: LD_INT 0
45453: PUSH
45454: EMPTY
45455: LIST
45456: LIST
45457: PUSH
45458: LD_INT 1
45460: PUSH
45461: LD_INT 1
45463: PUSH
45464: EMPTY
45465: LIST
45466: LIST
45467: PUSH
45468: LD_INT 0
45470: PUSH
45471: LD_INT 1
45473: PUSH
45474: EMPTY
45475: LIST
45476: LIST
45477: PUSH
45478: LD_INT 1
45480: NEG
45481: PUSH
45482: LD_INT 0
45484: PUSH
45485: EMPTY
45486: LIST
45487: LIST
45488: PUSH
45489: LD_INT 1
45491: NEG
45492: PUSH
45493: LD_INT 1
45495: NEG
45496: PUSH
45497: EMPTY
45498: LIST
45499: LIST
45500: PUSH
45501: LD_INT 1
45503: NEG
45504: PUSH
45505: LD_INT 2
45507: NEG
45508: PUSH
45509: EMPTY
45510: LIST
45511: LIST
45512: PUSH
45513: LD_INT 0
45515: PUSH
45516: LD_INT 2
45518: NEG
45519: PUSH
45520: EMPTY
45521: LIST
45522: LIST
45523: PUSH
45524: LD_INT 1
45526: PUSH
45527: LD_INT 1
45529: NEG
45530: PUSH
45531: EMPTY
45532: LIST
45533: LIST
45534: PUSH
45535: LD_INT 2
45537: PUSH
45538: LD_INT 0
45540: PUSH
45541: EMPTY
45542: LIST
45543: LIST
45544: PUSH
45545: LD_INT 2
45547: PUSH
45548: LD_INT 1
45550: PUSH
45551: EMPTY
45552: LIST
45553: LIST
45554: PUSH
45555: LD_INT 2
45557: PUSH
45558: LD_INT 2
45560: PUSH
45561: EMPTY
45562: LIST
45563: LIST
45564: PUSH
45565: LD_INT 1
45567: PUSH
45568: LD_INT 2
45570: PUSH
45571: EMPTY
45572: LIST
45573: LIST
45574: PUSH
45575: LD_INT 0
45577: PUSH
45578: LD_INT 2
45580: PUSH
45581: EMPTY
45582: LIST
45583: LIST
45584: PUSH
45585: LD_INT 1
45587: NEG
45588: PUSH
45589: LD_INT 1
45591: PUSH
45592: EMPTY
45593: LIST
45594: LIST
45595: PUSH
45596: LD_INT 2
45598: NEG
45599: PUSH
45600: LD_INT 0
45602: PUSH
45603: EMPTY
45604: LIST
45605: LIST
45606: PUSH
45607: LD_INT 2
45609: NEG
45610: PUSH
45611: LD_INT 1
45613: NEG
45614: PUSH
45615: EMPTY
45616: LIST
45617: LIST
45618: PUSH
45619: LD_INT 2
45621: NEG
45622: PUSH
45623: LD_INT 2
45625: NEG
45626: PUSH
45627: EMPTY
45628: LIST
45629: LIST
45630: PUSH
45631: EMPTY
45632: LIST
45633: LIST
45634: LIST
45635: LIST
45636: LIST
45637: LIST
45638: LIST
45639: LIST
45640: LIST
45641: LIST
45642: LIST
45643: LIST
45644: LIST
45645: LIST
45646: LIST
45647: LIST
45648: LIST
45649: LIST
45650: LIST
45651: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45652: LD_ADDR_VAR 0 20
45656: PUSH
45657: LD_INT 0
45659: PUSH
45660: LD_INT 0
45662: PUSH
45663: EMPTY
45664: LIST
45665: LIST
45666: PUSH
45667: LD_INT 0
45669: PUSH
45670: LD_INT 1
45672: NEG
45673: PUSH
45674: EMPTY
45675: LIST
45676: LIST
45677: PUSH
45678: LD_INT 1
45680: PUSH
45681: LD_INT 0
45683: PUSH
45684: EMPTY
45685: LIST
45686: LIST
45687: PUSH
45688: LD_INT 1
45690: PUSH
45691: LD_INT 1
45693: PUSH
45694: EMPTY
45695: LIST
45696: LIST
45697: PUSH
45698: LD_INT 0
45700: PUSH
45701: LD_INT 1
45703: PUSH
45704: EMPTY
45705: LIST
45706: LIST
45707: PUSH
45708: LD_INT 1
45710: NEG
45711: PUSH
45712: LD_INT 0
45714: PUSH
45715: EMPTY
45716: LIST
45717: LIST
45718: PUSH
45719: LD_INT 1
45721: NEG
45722: PUSH
45723: LD_INT 1
45725: NEG
45726: PUSH
45727: EMPTY
45728: LIST
45729: LIST
45730: PUSH
45731: LD_INT 1
45733: NEG
45734: PUSH
45735: LD_INT 2
45737: NEG
45738: PUSH
45739: EMPTY
45740: LIST
45741: LIST
45742: PUSH
45743: LD_INT 0
45745: PUSH
45746: LD_INT 2
45748: NEG
45749: PUSH
45750: EMPTY
45751: LIST
45752: LIST
45753: PUSH
45754: LD_INT 1
45756: PUSH
45757: LD_INT 1
45759: NEG
45760: PUSH
45761: EMPTY
45762: LIST
45763: LIST
45764: PUSH
45765: LD_INT 2
45767: PUSH
45768: LD_INT 0
45770: PUSH
45771: EMPTY
45772: LIST
45773: LIST
45774: PUSH
45775: LD_INT 2
45777: PUSH
45778: LD_INT 1
45780: PUSH
45781: EMPTY
45782: LIST
45783: LIST
45784: PUSH
45785: LD_INT 2
45787: PUSH
45788: LD_INT 2
45790: PUSH
45791: EMPTY
45792: LIST
45793: LIST
45794: PUSH
45795: LD_INT 1
45797: PUSH
45798: LD_INT 2
45800: PUSH
45801: EMPTY
45802: LIST
45803: LIST
45804: PUSH
45805: LD_INT 0
45807: PUSH
45808: LD_INT 2
45810: PUSH
45811: EMPTY
45812: LIST
45813: LIST
45814: PUSH
45815: LD_INT 1
45817: NEG
45818: PUSH
45819: LD_INT 1
45821: PUSH
45822: EMPTY
45823: LIST
45824: LIST
45825: PUSH
45826: LD_INT 2
45828: NEG
45829: PUSH
45830: LD_INT 0
45832: PUSH
45833: EMPTY
45834: LIST
45835: LIST
45836: PUSH
45837: LD_INT 2
45839: NEG
45840: PUSH
45841: LD_INT 1
45843: NEG
45844: PUSH
45845: EMPTY
45846: LIST
45847: LIST
45848: PUSH
45849: LD_INT 2
45851: NEG
45852: PUSH
45853: LD_INT 2
45855: NEG
45856: PUSH
45857: EMPTY
45858: LIST
45859: LIST
45860: PUSH
45861: EMPTY
45862: LIST
45863: LIST
45864: LIST
45865: LIST
45866: LIST
45867: LIST
45868: LIST
45869: LIST
45870: LIST
45871: LIST
45872: LIST
45873: LIST
45874: LIST
45875: LIST
45876: LIST
45877: LIST
45878: LIST
45879: LIST
45880: LIST
45881: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45882: LD_ADDR_VAR 0 21
45886: PUSH
45887: LD_INT 0
45889: PUSH
45890: LD_INT 0
45892: PUSH
45893: EMPTY
45894: LIST
45895: LIST
45896: PUSH
45897: LD_INT 0
45899: PUSH
45900: LD_INT 1
45902: NEG
45903: PUSH
45904: EMPTY
45905: LIST
45906: LIST
45907: PUSH
45908: LD_INT 1
45910: PUSH
45911: LD_INT 0
45913: PUSH
45914: EMPTY
45915: LIST
45916: LIST
45917: PUSH
45918: LD_INT 1
45920: PUSH
45921: LD_INT 1
45923: PUSH
45924: EMPTY
45925: LIST
45926: LIST
45927: PUSH
45928: LD_INT 0
45930: PUSH
45931: LD_INT 1
45933: PUSH
45934: EMPTY
45935: LIST
45936: LIST
45937: PUSH
45938: LD_INT 1
45940: NEG
45941: PUSH
45942: LD_INT 0
45944: PUSH
45945: EMPTY
45946: LIST
45947: LIST
45948: PUSH
45949: LD_INT 1
45951: NEG
45952: PUSH
45953: LD_INT 1
45955: NEG
45956: PUSH
45957: EMPTY
45958: LIST
45959: LIST
45960: PUSH
45961: LD_INT 1
45963: NEG
45964: PUSH
45965: LD_INT 2
45967: NEG
45968: PUSH
45969: EMPTY
45970: LIST
45971: LIST
45972: PUSH
45973: LD_INT 0
45975: PUSH
45976: LD_INT 2
45978: NEG
45979: PUSH
45980: EMPTY
45981: LIST
45982: LIST
45983: PUSH
45984: LD_INT 1
45986: PUSH
45987: LD_INT 1
45989: NEG
45990: PUSH
45991: EMPTY
45992: LIST
45993: LIST
45994: PUSH
45995: LD_INT 2
45997: PUSH
45998: LD_INT 0
46000: PUSH
46001: EMPTY
46002: LIST
46003: LIST
46004: PUSH
46005: LD_INT 2
46007: PUSH
46008: LD_INT 1
46010: PUSH
46011: EMPTY
46012: LIST
46013: LIST
46014: PUSH
46015: LD_INT 2
46017: PUSH
46018: LD_INT 2
46020: PUSH
46021: EMPTY
46022: LIST
46023: LIST
46024: PUSH
46025: LD_INT 1
46027: PUSH
46028: LD_INT 2
46030: PUSH
46031: EMPTY
46032: LIST
46033: LIST
46034: PUSH
46035: LD_INT 0
46037: PUSH
46038: LD_INT 2
46040: PUSH
46041: EMPTY
46042: LIST
46043: LIST
46044: PUSH
46045: LD_INT 1
46047: NEG
46048: PUSH
46049: LD_INT 1
46051: PUSH
46052: EMPTY
46053: LIST
46054: LIST
46055: PUSH
46056: LD_INT 2
46058: NEG
46059: PUSH
46060: LD_INT 0
46062: PUSH
46063: EMPTY
46064: LIST
46065: LIST
46066: PUSH
46067: LD_INT 2
46069: NEG
46070: PUSH
46071: LD_INT 1
46073: NEG
46074: PUSH
46075: EMPTY
46076: LIST
46077: LIST
46078: PUSH
46079: LD_INT 2
46081: NEG
46082: PUSH
46083: LD_INT 2
46085: NEG
46086: PUSH
46087: EMPTY
46088: LIST
46089: LIST
46090: PUSH
46091: EMPTY
46092: LIST
46093: LIST
46094: LIST
46095: LIST
46096: LIST
46097: LIST
46098: LIST
46099: LIST
46100: LIST
46101: LIST
46102: LIST
46103: LIST
46104: LIST
46105: LIST
46106: LIST
46107: LIST
46108: LIST
46109: LIST
46110: LIST
46111: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46112: LD_ADDR_VAR 0 22
46116: PUSH
46117: LD_INT 0
46119: PUSH
46120: LD_INT 0
46122: PUSH
46123: EMPTY
46124: LIST
46125: LIST
46126: PUSH
46127: LD_INT 0
46129: PUSH
46130: LD_INT 1
46132: NEG
46133: PUSH
46134: EMPTY
46135: LIST
46136: LIST
46137: PUSH
46138: LD_INT 1
46140: PUSH
46141: LD_INT 0
46143: PUSH
46144: EMPTY
46145: LIST
46146: LIST
46147: PUSH
46148: LD_INT 1
46150: PUSH
46151: LD_INT 1
46153: PUSH
46154: EMPTY
46155: LIST
46156: LIST
46157: PUSH
46158: LD_INT 0
46160: PUSH
46161: LD_INT 1
46163: PUSH
46164: EMPTY
46165: LIST
46166: LIST
46167: PUSH
46168: LD_INT 1
46170: NEG
46171: PUSH
46172: LD_INT 0
46174: PUSH
46175: EMPTY
46176: LIST
46177: LIST
46178: PUSH
46179: LD_INT 1
46181: NEG
46182: PUSH
46183: LD_INT 1
46185: NEG
46186: PUSH
46187: EMPTY
46188: LIST
46189: LIST
46190: PUSH
46191: LD_INT 1
46193: NEG
46194: PUSH
46195: LD_INT 2
46197: NEG
46198: PUSH
46199: EMPTY
46200: LIST
46201: LIST
46202: PUSH
46203: LD_INT 0
46205: PUSH
46206: LD_INT 2
46208: NEG
46209: PUSH
46210: EMPTY
46211: LIST
46212: LIST
46213: PUSH
46214: LD_INT 1
46216: PUSH
46217: LD_INT 1
46219: NEG
46220: PUSH
46221: EMPTY
46222: LIST
46223: LIST
46224: PUSH
46225: LD_INT 2
46227: PUSH
46228: LD_INT 0
46230: PUSH
46231: EMPTY
46232: LIST
46233: LIST
46234: PUSH
46235: LD_INT 2
46237: PUSH
46238: LD_INT 1
46240: PUSH
46241: EMPTY
46242: LIST
46243: LIST
46244: PUSH
46245: LD_INT 2
46247: PUSH
46248: LD_INT 2
46250: PUSH
46251: EMPTY
46252: LIST
46253: LIST
46254: PUSH
46255: LD_INT 1
46257: PUSH
46258: LD_INT 2
46260: PUSH
46261: EMPTY
46262: LIST
46263: LIST
46264: PUSH
46265: LD_INT 0
46267: PUSH
46268: LD_INT 2
46270: PUSH
46271: EMPTY
46272: LIST
46273: LIST
46274: PUSH
46275: LD_INT 1
46277: NEG
46278: PUSH
46279: LD_INT 1
46281: PUSH
46282: EMPTY
46283: LIST
46284: LIST
46285: PUSH
46286: LD_INT 2
46288: NEG
46289: PUSH
46290: LD_INT 0
46292: PUSH
46293: EMPTY
46294: LIST
46295: LIST
46296: PUSH
46297: LD_INT 2
46299: NEG
46300: PUSH
46301: LD_INT 1
46303: NEG
46304: PUSH
46305: EMPTY
46306: LIST
46307: LIST
46308: PUSH
46309: LD_INT 2
46311: NEG
46312: PUSH
46313: LD_INT 2
46315: NEG
46316: PUSH
46317: EMPTY
46318: LIST
46319: LIST
46320: PUSH
46321: EMPTY
46322: LIST
46323: LIST
46324: LIST
46325: LIST
46326: LIST
46327: LIST
46328: LIST
46329: LIST
46330: LIST
46331: LIST
46332: LIST
46333: LIST
46334: LIST
46335: LIST
46336: LIST
46337: LIST
46338: LIST
46339: LIST
46340: LIST
46341: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
46342: LD_ADDR_VAR 0 23
46346: PUSH
46347: LD_INT 0
46349: PUSH
46350: LD_INT 0
46352: PUSH
46353: EMPTY
46354: LIST
46355: LIST
46356: PUSH
46357: LD_INT 0
46359: PUSH
46360: LD_INT 1
46362: NEG
46363: PUSH
46364: EMPTY
46365: LIST
46366: LIST
46367: PUSH
46368: LD_INT 1
46370: PUSH
46371: LD_INT 0
46373: PUSH
46374: EMPTY
46375: LIST
46376: LIST
46377: PUSH
46378: LD_INT 1
46380: PUSH
46381: LD_INT 1
46383: PUSH
46384: EMPTY
46385: LIST
46386: LIST
46387: PUSH
46388: LD_INT 0
46390: PUSH
46391: LD_INT 1
46393: PUSH
46394: EMPTY
46395: LIST
46396: LIST
46397: PUSH
46398: LD_INT 1
46400: NEG
46401: PUSH
46402: LD_INT 0
46404: PUSH
46405: EMPTY
46406: LIST
46407: LIST
46408: PUSH
46409: LD_INT 1
46411: NEG
46412: PUSH
46413: LD_INT 1
46415: NEG
46416: PUSH
46417: EMPTY
46418: LIST
46419: LIST
46420: PUSH
46421: LD_INT 1
46423: NEG
46424: PUSH
46425: LD_INT 2
46427: NEG
46428: PUSH
46429: EMPTY
46430: LIST
46431: LIST
46432: PUSH
46433: LD_INT 0
46435: PUSH
46436: LD_INT 2
46438: NEG
46439: PUSH
46440: EMPTY
46441: LIST
46442: LIST
46443: PUSH
46444: LD_INT 1
46446: PUSH
46447: LD_INT 1
46449: NEG
46450: PUSH
46451: EMPTY
46452: LIST
46453: LIST
46454: PUSH
46455: LD_INT 2
46457: PUSH
46458: LD_INT 0
46460: PUSH
46461: EMPTY
46462: LIST
46463: LIST
46464: PUSH
46465: LD_INT 2
46467: PUSH
46468: LD_INT 1
46470: PUSH
46471: EMPTY
46472: LIST
46473: LIST
46474: PUSH
46475: LD_INT 2
46477: PUSH
46478: LD_INT 2
46480: PUSH
46481: EMPTY
46482: LIST
46483: LIST
46484: PUSH
46485: LD_INT 1
46487: PUSH
46488: LD_INT 2
46490: PUSH
46491: EMPTY
46492: LIST
46493: LIST
46494: PUSH
46495: LD_INT 0
46497: PUSH
46498: LD_INT 2
46500: PUSH
46501: EMPTY
46502: LIST
46503: LIST
46504: PUSH
46505: LD_INT 1
46507: NEG
46508: PUSH
46509: LD_INT 1
46511: PUSH
46512: EMPTY
46513: LIST
46514: LIST
46515: PUSH
46516: LD_INT 2
46518: NEG
46519: PUSH
46520: LD_INT 0
46522: PUSH
46523: EMPTY
46524: LIST
46525: LIST
46526: PUSH
46527: LD_INT 2
46529: NEG
46530: PUSH
46531: LD_INT 1
46533: NEG
46534: PUSH
46535: EMPTY
46536: LIST
46537: LIST
46538: PUSH
46539: LD_INT 2
46541: NEG
46542: PUSH
46543: LD_INT 2
46545: NEG
46546: PUSH
46547: EMPTY
46548: LIST
46549: LIST
46550: PUSH
46551: LD_INT 2
46553: NEG
46554: PUSH
46555: LD_INT 3
46557: NEG
46558: PUSH
46559: EMPTY
46560: LIST
46561: LIST
46562: PUSH
46563: LD_INT 1
46565: NEG
46566: PUSH
46567: LD_INT 3
46569: NEG
46570: PUSH
46571: EMPTY
46572: LIST
46573: LIST
46574: PUSH
46575: LD_INT 1
46577: PUSH
46578: LD_INT 2
46580: NEG
46581: PUSH
46582: EMPTY
46583: LIST
46584: LIST
46585: PUSH
46586: LD_INT 2
46588: PUSH
46589: LD_INT 1
46591: NEG
46592: PUSH
46593: EMPTY
46594: LIST
46595: LIST
46596: PUSH
46597: EMPTY
46598: LIST
46599: LIST
46600: LIST
46601: LIST
46602: LIST
46603: LIST
46604: LIST
46605: LIST
46606: LIST
46607: LIST
46608: LIST
46609: LIST
46610: LIST
46611: LIST
46612: LIST
46613: LIST
46614: LIST
46615: LIST
46616: LIST
46617: LIST
46618: LIST
46619: LIST
46620: LIST
46621: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
46622: LD_ADDR_VAR 0 24
46626: PUSH
46627: LD_INT 0
46629: PUSH
46630: LD_INT 0
46632: PUSH
46633: EMPTY
46634: LIST
46635: LIST
46636: PUSH
46637: LD_INT 0
46639: PUSH
46640: LD_INT 1
46642: NEG
46643: PUSH
46644: EMPTY
46645: LIST
46646: LIST
46647: PUSH
46648: LD_INT 1
46650: PUSH
46651: LD_INT 0
46653: PUSH
46654: EMPTY
46655: LIST
46656: LIST
46657: PUSH
46658: LD_INT 1
46660: PUSH
46661: LD_INT 1
46663: PUSH
46664: EMPTY
46665: LIST
46666: LIST
46667: PUSH
46668: LD_INT 0
46670: PUSH
46671: LD_INT 1
46673: PUSH
46674: EMPTY
46675: LIST
46676: LIST
46677: PUSH
46678: LD_INT 1
46680: NEG
46681: PUSH
46682: LD_INT 0
46684: PUSH
46685: EMPTY
46686: LIST
46687: LIST
46688: PUSH
46689: LD_INT 1
46691: NEG
46692: PUSH
46693: LD_INT 1
46695: NEG
46696: PUSH
46697: EMPTY
46698: LIST
46699: LIST
46700: PUSH
46701: LD_INT 1
46703: NEG
46704: PUSH
46705: LD_INT 2
46707: NEG
46708: PUSH
46709: EMPTY
46710: LIST
46711: LIST
46712: PUSH
46713: LD_INT 0
46715: PUSH
46716: LD_INT 2
46718: NEG
46719: PUSH
46720: EMPTY
46721: LIST
46722: LIST
46723: PUSH
46724: LD_INT 1
46726: PUSH
46727: LD_INT 1
46729: NEG
46730: PUSH
46731: EMPTY
46732: LIST
46733: LIST
46734: PUSH
46735: LD_INT 2
46737: PUSH
46738: LD_INT 0
46740: PUSH
46741: EMPTY
46742: LIST
46743: LIST
46744: PUSH
46745: LD_INT 2
46747: PUSH
46748: LD_INT 1
46750: PUSH
46751: EMPTY
46752: LIST
46753: LIST
46754: PUSH
46755: LD_INT 2
46757: PUSH
46758: LD_INT 2
46760: PUSH
46761: EMPTY
46762: LIST
46763: LIST
46764: PUSH
46765: LD_INT 1
46767: PUSH
46768: LD_INT 2
46770: PUSH
46771: EMPTY
46772: LIST
46773: LIST
46774: PUSH
46775: LD_INT 0
46777: PUSH
46778: LD_INT 2
46780: PUSH
46781: EMPTY
46782: LIST
46783: LIST
46784: PUSH
46785: LD_INT 1
46787: NEG
46788: PUSH
46789: LD_INT 1
46791: PUSH
46792: EMPTY
46793: LIST
46794: LIST
46795: PUSH
46796: LD_INT 2
46798: NEG
46799: PUSH
46800: LD_INT 0
46802: PUSH
46803: EMPTY
46804: LIST
46805: LIST
46806: PUSH
46807: LD_INT 2
46809: NEG
46810: PUSH
46811: LD_INT 1
46813: NEG
46814: PUSH
46815: EMPTY
46816: LIST
46817: LIST
46818: PUSH
46819: LD_INT 2
46821: NEG
46822: PUSH
46823: LD_INT 2
46825: NEG
46826: PUSH
46827: EMPTY
46828: LIST
46829: LIST
46830: PUSH
46831: LD_INT 1
46833: PUSH
46834: LD_INT 2
46836: NEG
46837: PUSH
46838: EMPTY
46839: LIST
46840: LIST
46841: PUSH
46842: LD_INT 2
46844: PUSH
46845: LD_INT 1
46847: NEG
46848: PUSH
46849: EMPTY
46850: LIST
46851: LIST
46852: PUSH
46853: LD_INT 3
46855: PUSH
46856: LD_INT 1
46858: PUSH
46859: EMPTY
46860: LIST
46861: LIST
46862: PUSH
46863: LD_INT 3
46865: PUSH
46866: LD_INT 2
46868: PUSH
46869: EMPTY
46870: LIST
46871: LIST
46872: PUSH
46873: EMPTY
46874: LIST
46875: LIST
46876: LIST
46877: LIST
46878: LIST
46879: LIST
46880: LIST
46881: LIST
46882: LIST
46883: LIST
46884: LIST
46885: LIST
46886: LIST
46887: LIST
46888: LIST
46889: LIST
46890: LIST
46891: LIST
46892: LIST
46893: LIST
46894: LIST
46895: LIST
46896: LIST
46897: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
46898: LD_ADDR_VAR 0 25
46902: PUSH
46903: LD_INT 0
46905: PUSH
46906: LD_INT 0
46908: PUSH
46909: EMPTY
46910: LIST
46911: LIST
46912: PUSH
46913: LD_INT 0
46915: PUSH
46916: LD_INT 1
46918: NEG
46919: PUSH
46920: EMPTY
46921: LIST
46922: LIST
46923: PUSH
46924: LD_INT 1
46926: PUSH
46927: LD_INT 0
46929: PUSH
46930: EMPTY
46931: LIST
46932: LIST
46933: PUSH
46934: LD_INT 1
46936: PUSH
46937: LD_INT 1
46939: PUSH
46940: EMPTY
46941: LIST
46942: LIST
46943: PUSH
46944: LD_INT 0
46946: PUSH
46947: LD_INT 1
46949: PUSH
46950: EMPTY
46951: LIST
46952: LIST
46953: PUSH
46954: LD_INT 1
46956: NEG
46957: PUSH
46958: LD_INT 0
46960: PUSH
46961: EMPTY
46962: LIST
46963: LIST
46964: PUSH
46965: LD_INT 1
46967: NEG
46968: PUSH
46969: LD_INT 1
46971: NEG
46972: PUSH
46973: EMPTY
46974: LIST
46975: LIST
46976: PUSH
46977: LD_INT 1
46979: NEG
46980: PUSH
46981: LD_INT 2
46983: NEG
46984: PUSH
46985: EMPTY
46986: LIST
46987: LIST
46988: PUSH
46989: LD_INT 0
46991: PUSH
46992: LD_INT 2
46994: NEG
46995: PUSH
46996: EMPTY
46997: LIST
46998: LIST
46999: PUSH
47000: LD_INT 1
47002: PUSH
47003: LD_INT 1
47005: NEG
47006: PUSH
47007: EMPTY
47008: LIST
47009: LIST
47010: PUSH
47011: LD_INT 2
47013: PUSH
47014: LD_INT 0
47016: PUSH
47017: EMPTY
47018: LIST
47019: LIST
47020: PUSH
47021: LD_INT 2
47023: PUSH
47024: LD_INT 1
47026: PUSH
47027: EMPTY
47028: LIST
47029: LIST
47030: PUSH
47031: LD_INT 2
47033: PUSH
47034: LD_INT 2
47036: PUSH
47037: EMPTY
47038: LIST
47039: LIST
47040: PUSH
47041: LD_INT 1
47043: PUSH
47044: LD_INT 2
47046: PUSH
47047: EMPTY
47048: LIST
47049: LIST
47050: PUSH
47051: LD_INT 0
47053: PUSH
47054: LD_INT 2
47056: PUSH
47057: EMPTY
47058: LIST
47059: LIST
47060: PUSH
47061: LD_INT 1
47063: NEG
47064: PUSH
47065: LD_INT 1
47067: PUSH
47068: EMPTY
47069: LIST
47070: LIST
47071: PUSH
47072: LD_INT 2
47074: NEG
47075: PUSH
47076: LD_INT 0
47078: PUSH
47079: EMPTY
47080: LIST
47081: LIST
47082: PUSH
47083: LD_INT 2
47085: NEG
47086: PUSH
47087: LD_INT 1
47089: NEG
47090: PUSH
47091: EMPTY
47092: LIST
47093: LIST
47094: PUSH
47095: LD_INT 2
47097: NEG
47098: PUSH
47099: LD_INT 2
47101: NEG
47102: PUSH
47103: EMPTY
47104: LIST
47105: LIST
47106: PUSH
47107: LD_INT 3
47109: PUSH
47110: LD_INT 1
47112: PUSH
47113: EMPTY
47114: LIST
47115: LIST
47116: PUSH
47117: LD_INT 3
47119: PUSH
47120: LD_INT 2
47122: PUSH
47123: EMPTY
47124: LIST
47125: LIST
47126: PUSH
47127: LD_INT 2
47129: PUSH
47130: LD_INT 3
47132: PUSH
47133: EMPTY
47134: LIST
47135: LIST
47136: PUSH
47137: LD_INT 1
47139: PUSH
47140: LD_INT 3
47142: PUSH
47143: EMPTY
47144: LIST
47145: LIST
47146: PUSH
47147: EMPTY
47148: LIST
47149: LIST
47150: LIST
47151: LIST
47152: LIST
47153: LIST
47154: LIST
47155: LIST
47156: LIST
47157: LIST
47158: LIST
47159: LIST
47160: LIST
47161: LIST
47162: LIST
47163: LIST
47164: LIST
47165: LIST
47166: LIST
47167: LIST
47168: LIST
47169: LIST
47170: LIST
47171: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
47172: LD_ADDR_VAR 0 26
47176: PUSH
47177: LD_INT 0
47179: PUSH
47180: LD_INT 0
47182: PUSH
47183: EMPTY
47184: LIST
47185: LIST
47186: PUSH
47187: LD_INT 0
47189: PUSH
47190: LD_INT 1
47192: NEG
47193: PUSH
47194: EMPTY
47195: LIST
47196: LIST
47197: PUSH
47198: LD_INT 1
47200: PUSH
47201: LD_INT 0
47203: PUSH
47204: EMPTY
47205: LIST
47206: LIST
47207: PUSH
47208: LD_INT 1
47210: PUSH
47211: LD_INT 1
47213: PUSH
47214: EMPTY
47215: LIST
47216: LIST
47217: PUSH
47218: LD_INT 0
47220: PUSH
47221: LD_INT 1
47223: PUSH
47224: EMPTY
47225: LIST
47226: LIST
47227: PUSH
47228: LD_INT 1
47230: NEG
47231: PUSH
47232: LD_INT 0
47234: PUSH
47235: EMPTY
47236: LIST
47237: LIST
47238: PUSH
47239: LD_INT 1
47241: NEG
47242: PUSH
47243: LD_INT 1
47245: NEG
47246: PUSH
47247: EMPTY
47248: LIST
47249: LIST
47250: PUSH
47251: LD_INT 1
47253: NEG
47254: PUSH
47255: LD_INT 2
47257: NEG
47258: PUSH
47259: EMPTY
47260: LIST
47261: LIST
47262: PUSH
47263: LD_INT 0
47265: PUSH
47266: LD_INT 2
47268: NEG
47269: PUSH
47270: EMPTY
47271: LIST
47272: LIST
47273: PUSH
47274: LD_INT 1
47276: PUSH
47277: LD_INT 1
47279: NEG
47280: PUSH
47281: EMPTY
47282: LIST
47283: LIST
47284: PUSH
47285: LD_INT 2
47287: PUSH
47288: LD_INT 0
47290: PUSH
47291: EMPTY
47292: LIST
47293: LIST
47294: PUSH
47295: LD_INT 2
47297: PUSH
47298: LD_INT 1
47300: PUSH
47301: EMPTY
47302: LIST
47303: LIST
47304: PUSH
47305: LD_INT 2
47307: PUSH
47308: LD_INT 2
47310: PUSH
47311: EMPTY
47312: LIST
47313: LIST
47314: PUSH
47315: LD_INT 1
47317: PUSH
47318: LD_INT 2
47320: PUSH
47321: EMPTY
47322: LIST
47323: LIST
47324: PUSH
47325: LD_INT 0
47327: PUSH
47328: LD_INT 2
47330: PUSH
47331: EMPTY
47332: LIST
47333: LIST
47334: PUSH
47335: LD_INT 1
47337: NEG
47338: PUSH
47339: LD_INT 1
47341: PUSH
47342: EMPTY
47343: LIST
47344: LIST
47345: PUSH
47346: LD_INT 2
47348: NEG
47349: PUSH
47350: LD_INT 0
47352: PUSH
47353: EMPTY
47354: LIST
47355: LIST
47356: PUSH
47357: LD_INT 2
47359: NEG
47360: PUSH
47361: LD_INT 1
47363: NEG
47364: PUSH
47365: EMPTY
47366: LIST
47367: LIST
47368: PUSH
47369: LD_INT 2
47371: NEG
47372: PUSH
47373: LD_INT 2
47375: NEG
47376: PUSH
47377: EMPTY
47378: LIST
47379: LIST
47380: PUSH
47381: LD_INT 2
47383: PUSH
47384: LD_INT 3
47386: PUSH
47387: EMPTY
47388: LIST
47389: LIST
47390: PUSH
47391: LD_INT 1
47393: PUSH
47394: LD_INT 3
47396: PUSH
47397: EMPTY
47398: LIST
47399: LIST
47400: PUSH
47401: LD_INT 1
47403: NEG
47404: PUSH
47405: LD_INT 2
47407: PUSH
47408: EMPTY
47409: LIST
47410: LIST
47411: PUSH
47412: LD_INT 2
47414: NEG
47415: PUSH
47416: LD_INT 1
47418: PUSH
47419: EMPTY
47420: LIST
47421: LIST
47422: PUSH
47423: EMPTY
47424: LIST
47425: LIST
47426: LIST
47427: LIST
47428: LIST
47429: LIST
47430: LIST
47431: LIST
47432: LIST
47433: LIST
47434: LIST
47435: LIST
47436: LIST
47437: LIST
47438: LIST
47439: LIST
47440: LIST
47441: LIST
47442: LIST
47443: LIST
47444: LIST
47445: LIST
47446: LIST
47447: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47448: LD_ADDR_VAR 0 27
47452: PUSH
47453: LD_INT 0
47455: PUSH
47456: LD_INT 0
47458: PUSH
47459: EMPTY
47460: LIST
47461: LIST
47462: PUSH
47463: LD_INT 0
47465: PUSH
47466: LD_INT 1
47468: NEG
47469: PUSH
47470: EMPTY
47471: LIST
47472: LIST
47473: PUSH
47474: LD_INT 1
47476: PUSH
47477: LD_INT 0
47479: PUSH
47480: EMPTY
47481: LIST
47482: LIST
47483: PUSH
47484: LD_INT 1
47486: PUSH
47487: LD_INT 1
47489: PUSH
47490: EMPTY
47491: LIST
47492: LIST
47493: PUSH
47494: LD_INT 0
47496: PUSH
47497: LD_INT 1
47499: PUSH
47500: EMPTY
47501: LIST
47502: LIST
47503: PUSH
47504: LD_INT 1
47506: NEG
47507: PUSH
47508: LD_INT 0
47510: PUSH
47511: EMPTY
47512: LIST
47513: LIST
47514: PUSH
47515: LD_INT 1
47517: NEG
47518: PUSH
47519: LD_INT 1
47521: NEG
47522: PUSH
47523: EMPTY
47524: LIST
47525: LIST
47526: PUSH
47527: LD_INT 1
47529: NEG
47530: PUSH
47531: LD_INT 2
47533: NEG
47534: PUSH
47535: EMPTY
47536: LIST
47537: LIST
47538: PUSH
47539: LD_INT 0
47541: PUSH
47542: LD_INT 2
47544: NEG
47545: PUSH
47546: EMPTY
47547: LIST
47548: LIST
47549: PUSH
47550: LD_INT 1
47552: PUSH
47553: LD_INT 1
47555: NEG
47556: PUSH
47557: EMPTY
47558: LIST
47559: LIST
47560: PUSH
47561: LD_INT 2
47563: PUSH
47564: LD_INT 0
47566: PUSH
47567: EMPTY
47568: LIST
47569: LIST
47570: PUSH
47571: LD_INT 2
47573: PUSH
47574: LD_INT 1
47576: PUSH
47577: EMPTY
47578: LIST
47579: LIST
47580: PUSH
47581: LD_INT 2
47583: PUSH
47584: LD_INT 2
47586: PUSH
47587: EMPTY
47588: LIST
47589: LIST
47590: PUSH
47591: LD_INT 1
47593: PUSH
47594: LD_INT 2
47596: PUSH
47597: EMPTY
47598: LIST
47599: LIST
47600: PUSH
47601: LD_INT 0
47603: PUSH
47604: LD_INT 2
47606: PUSH
47607: EMPTY
47608: LIST
47609: LIST
47610: PUSH
47611: LD_INT 1
47613: NEG
47614: PUSH
47615: LD_INT 1
47617: PUSH
47618: EMPTY
47619: LIST
47620: LIST
47621: PUSH
47622: LD_INT 2
47624: NEG
47625: PUSH
47626: LD_INT 0
47628: PUSH
47629: EMPTY
47630: LIST
47631: LIST
47632: PUSH
47633: LD_INT 2
47635: NEG
47636: PUSH
47637: LD_INT 1
47639: NEG
47640: PUSH
47641: EMPTY
47642: LIST
47643: LIST
47644: PUSH
47645: LD_INT 2
47647: NEG
47648: PUSH
47649: LD_INT 2
47651: NEG
47652: PUSH
47653: EMPTY
47654: LIST
47655: LIST
47656: PUSH
47657: LD_INT 1
47659: NEG
47660: PUSH
47661: LD_INT 2
47663: PUSH
47664: EMPTY
47665: LIST
47666: LIST
47667: PUSH
47668: LD_INT 2
47670: NEG
47671: PUSH
47672: LD_INT 1
47674: PUSH
47675: EMPTY
47676: LIST
47677: LIST
47678: PUSH
47679: LD_INT 3
47681: NEG
47682: PUSH
47683: LD_INT 1
47685: NEG
47686: PUSH
47687: EMPTY
47688: LIST
47689: LIST
47690: PUSH
47691: LD_INT 3
47693: NEG
47694: PUSH
47695: LD_INT 2
47697: NEG
47698: PUSH
47699: EMPTY
47700: LIST
47701: LIST
47702: PUSH
47703: EMPTY
47704: LIST
47705: LIST
47706: LIST
47707: LIST
47708: LIST
47709: LIST
47710: LIST
47711: LIST
47712: LIST
47713: LIST
47714: LIST
47715: LIST
47716: LIST
47717: LIST
47718: LIST
47719: LIST
47720: LIST
47721: LIST
47722: LIST
47723: LIST
47724: LIST
47725: LIST
47726: LIST
47727: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47728: LD_ADDR_VAR 0 28
47732: PUSH
47733: LD_INT 0
47735: PUSH
47736: LD_INT 0
47738: PUSH
47739: EMPTY
47740: LIST
47741: LIST
47742: PUSH
47743: LD_INT 0
47745: PUSH
47746: LD_INT 1
47748: NEG
47749: PUSH
47750: EMPTY
47751: LIST
47752: LIST
47753: PUSH
47754: LD_INT 1
47756: PUSH
47757: LD_INT 0
47759: PUSH
47760: EMPTY
47761: LIST
47762: LIST
47763: PUSH
47764: LD_INT 1
47766: PUSH
47767: LD_INT 1
47769: PUSH
47770: EMPTY
47771: LIST
47772: LIST
47773: PUSH
47774: LD_INT 0
47776: PUSH
47777: LD_INT 1
47779: PUSH
47780: EMPTY
47781: LIST
47782: LIST
47783: PUSH
47784: LD_INT 1
47786: NEG
47787: PUSH
47788: LD_INT 0
47790: PUSH
47791: EMPTY
47792: LIST
47793: LIST
47794: PUSH
47795: LD_INT 1
47797: NEG
47798: PUSH
47799: LD_INT 1
47801: NEG
47802: PUSH
47803: EMPTY
47804: LIST
47805: LIST
47806: PUSH
47807: LD_INT 1
47809: NEG
47810: PUSH
47811: LD_INT 2
47813: NEG
47814: PUSH
47815: EMPTY
47816: LIST
47817: LIST
47818: PUSH
47819: LD_INT 0
47821: PUSH
47822: LD_INT 2
47824: NEG
47825: PUSH
47826: EMPTY
47827: LIST
47828: LIST
47829: PUSH
47830: LD_INT 1
47832: PUSH
47833: LD_INT 1
47835: NEG
47836: PUSH
47837: EMPTY
47838: LIST
47839: LIST
47840: PUSH
47841: LD_INT 2
47843: PUSH
47844: LD_INT 0
47846: PUSH
47847: EMPTY
47848: LIST
47849: LIST
47850: PUSH
47851: LD_INT 2
47853: PUSH
47854: LD_INT 1
47856: PUSH
47857: EMPTY
47858: LIST
47859: LIST
47860: PUSH
47861: LD_INT 2
47863: PUSH
47864: LD_INT 2
47866: PUSH
47867: EMPTY
47868: LIST
47869: LIST
47870: PUSH
47871: LD_INT 1
47873: PUSH
47874: LD_INT 2
47876: PUSH
47877: EMPTY
47878: LIST
47879: LIST
47880: PUSH
47881: LD_INT 0
47883: PUSH
47884: LD_INT 2
47886: PUSH
47887: EMPTY
47888: LIST
47889: LIST
47890: PUSH
47891: LD_INT 1
47893: NEG
47894: PUSH
47895: LD_INT 1
47897: PUSH
47898: EMPTY
47899: LIST
47900: LIST
47901: PUSH
47902: LD_INT 2
47904: NEG
47905: PUSH
47906: LD_INT 0
47908: PUSH
47909: EMPTY
47910: LIST
47911: LIST
47912: PUSH
47913: LD_INT 2
47915: NEG
47916: PUSH
47917: LD_INT 1
47919: NEG
47920: PUSH
47921: EMPTY
47922: LIST
47923: LIST
47924: PUSH
47925: LD_INT 2
47927: NEG
47928: PUSH
47929: LD_INT 2
47931: NEG
47932: PUSH
47933: EMPTY
47934: LIST
47935: LIST
47936: PUSH
47937: LD_INT 2
47939: NEG
47940: PUSH
47941: LD_INT 3
47943: NEG
47944: PUSH
47945: EMPTY
47946: LIST
47947: LIST
47948: PUSH
47949: LD_INT 1
47951: NEG
47952: PUSH
47953: LD_INT 3
47955: NEG
47956: PUSH
47957: EMPTY
47958: LIST
47959: LIST
47960: PUSH
47961: LD_INT 3
47963: NEG
47964: PUSH
47965: LD_INT 1
47967: NEG
47968: PUSH
47969: EMPTY
47970: LIST
47971: LIST
47972: PUSH
47973: LD_INT 3
47975: NEG
47976: PUSH
47977: LD_INT 2
47979: NEG
47980: PUSH
47981: EMPTY
47982: LIST
47983: LIST
47984: PUSH
47985: EMPTY
47986: LIST
47987: LIST
47988: LIST
47989: LIST
47990: LIST
47991: LIST
47992: LIST
47993: LIST
47994: LIST
47995: LIST
47996: LIST
47997: LIST
47998: LIST
47999: LIST
48000: LIST
48001: LIST
48002: LIST
48003: LIST
48004: LIST
48005: LIST
48006: LIST
48007: LIST
48008: LIST
48009: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48010: LD_ADDR_VAR 0 29
48014: PUSH
48015: LD_INT 0
48017: PUSH
48018: LD_INT 0
48020: PUSH
48021: EMPTY
48022: LIST
48023: LIST
48024: PUSH
48025: LD_INT 0
48027: PUSH
48028: LD_INT 1
48030: NEG
48031: PUSH
48032: EMPTY
48033: LIST
48034: LIST
48035: PUSH
48036: LD_INT 1
48038: PUSH
48039: LD_INT 0
48041: PUSH
48042: EMPTY
48043: LIST
48044: LIST
48045: PUSH
48046: LD_INT 1
48048: PUSH
48049: LD_INT 1
48051: PUSH
48052: EMPTY
48053: LIST
48054: LIST
48055: PUSH
48056: LD_INT 0
48058: PUSH
48059: LD_INT 1
48061: PUSH
48062: EMPTY
48063: LIST
48064: LIST
48065: PUSH
48066: LD_INT 1
48068: NEG
48069: PUSH
48070: LD_INT 0
48072: PUSH
48073: EMPTY
48074: LIST
48075: LIST
48076: PUSH
48077: LD_INT 1
48079: NEG
48080: PUSH
48081: LD_INT 1
48083: NEG
48084: PUSH
48085: EMPTY
48086: LIST
48087: LIST
48088: PUSH
48089: LD_INT 1
48091: NEG
48092: PUSH
48093: LD_INT 2
48095: NEG
48096: PUSH
48097: EMPTY
48098: LIST
48099: LIST
48100: PUSH
48101: LD_INT 0
48103: PUSH
48104: LD_INT 2
48106: NEG
48107: PUSH
48108: EMPTY
48109: LIST
48110: LIST
48111: PUSH
48112: LD_INT 1
48114: PUSH
48115: LD_INT 1
48117: NEG
48118: PUSH
48119: EMPTY
48120: LIST
48121: LIST
48122: PUSH
48123: LD_INT 2
48125: PUSH
48126: LD_INT 0
48128: PUSH
48129: EMPTY
48130: LIST
48131: LIST
48132: PUSH
48133: LD_INT 2
48135: PUSH
48136: LD_INT 1
48138: PUSH
48139: EMPTY
48140: LIST
48141: LIST
48142: PUSH
48143: LD_INT 1
48145: PUSH
48146: LD_INT 2
48148: PUSH
48149: EMPTY
48150: LIST
48151: LIST
48152: PUSH
48153: LD_INT 0
48155: PUSH
48156: LD_INT 2
48158: PUSH
48159: EMPTY
48160: LIST
48161: LIST
48162: PUSH
48163: LD_INT 1
48165: NEG
48166: PUSH
48167: LD_INT 1
48169: PUSH
48170: EMPTY
48171: LIST
48172: LIST
48173: PUSH
48174: LD_INT 2
48176: NEG
48177: PUSH
48178: LD_INT 1
48180: NEG
48181: PUSH
48182: EMPTY
48183: LIST
48184: LIST
48185: PUSH
48186: LD_INT 2
48188: NEG
48189: PUSH
48190: LD_INT 2
48192: NEG
48193: PUSH
48194: EMPTY
48195: LIST
48196: LIST
48197: PUSH
48198: LD_INT 2
48200: NEG
48201: PUSH
48202: LD_INT 3
48204: NEG
48205: PUSH
48206: EMPTY
48207: LIST
48208: LIST
48209: PUSH
48210: LD_INT 2
48212: PUSH
48213: LD_INT 1
48215: NEG
48216: PUSH
48217: EMPTY
48218: LIST
48219: LIST
48220: PUSH
48221: LD_INT 3
48223: PUSH
48224: LD_INT 1
48226: PUSH
48227: EMPTY
48228: LIST
48229: LIST
48230: PUSH
48231: LD_INT 1
48233: PUSH
48234: LD_INT 3
48236: PUSH
48237: EMPTY
48238: LIST
48239: LIST
48240: PUSH
48241: LD_INT 1
48243: NEG
48244: PUSH
48245: LD_INT 2
48247: PUSH
48248: EMPTY
48249: LIST
48250: LIST
48251: PUSH
48252: LD_INT 3
48254: NEG
48255: PUSH
48256: LD_INT 2
48258: NEG
48259: PUSH
48260: EMPTY
48261: LIST
48262: LIST
48263: PUSH
48264: EMPTY
48265: LIST
48266: LIST
48267: LIST
48268: LIST
48269: LIST
48270: LIST
48271: LIST
48272: LIST
48273: LIST
48274: LIST
48275: LIST
48276: LIST
48277: LIST
48278: LIST
48279: LIST
48280: LIST
48281: LIST
48282: LIST
48283: LIST
48284: LIST
48285: LIST
48286: LIST
48287: LIST
48288: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48289: LD_ADDR_VAR 0 30
48293: PUSH
48294: LD_INT 0
48296: PUSH
48297: LD_INT 0
48299: PUSH
48300: EMPTY
48301: LIST
48302: LIST
48303: PUSH
48304: LD_INT 0
48306: PUSH
48307: LD_INT 1
48309: NEG
48310: PUSH
48311: EMPTY
48312: LIST
48313: LIST
48314: PUSH
48315: LD_INT 1
48317: PUSH
48318: LD_INT 0
48320: PUSH
48321: EMPTY
48322: LIST
48323: LIST
48324: PUSH
48325: LD_INT 1
48327: PUSH
48328: LD_INT 1
48330: PUSH
48331: EMPTY
48332: LIST
48333: LIST
48334: PUSH
48335: LD_INT 0
48337: PUSH
48338: LD_INT 1
48340: PUSH
48341: EMPTY
48342: LIST
48343: LIST
48344: PUSH
48345: LD_INT 1
48347: NEG
48348: PUSH
48349: LD_INT 0
48351: PUSH
48352: EMPTY
48353: LIST
48354: LIST
48355: PUSH
48356: LD_INT 1
48358: NEG
48359: PUSH
48360: LD_INT 1
48362: NEG
48363: PUSH
48364: EMPTY
48365: LIST
48366: LIST
48367: PUSH
48368: LD_INT 1
48370: NEG
48371: PUSH
48372: LD_INT 2
48374: NEG
48375: PUSH
48376: EMPTY
48377: LIST
48378: LIST
48379: PUSH
48380: LD_INT 0
48382: PUSH
48383: LD_INT 2
48385: NEG
48386: PUSH
48387: EMPTY
48388: LIST
48389: LIST
48390: PUSH
48391: LD_INT 1
48393: PUSH
48394: LD_INT 1
48396: NEG
48397: PUSH
48398: EMPTY
48399: LIST
48400: LIST
48401: PUSH
48402: LD_INT 2
48404: PUSH
48405: LD_INT 0
48407: PUSH
48408: EMPTY
48409: LIST
48410: LIST
48411: PUSH
48412: LD_INT 2
48414: PUSH
48415: LD_INT 1
48417: PUSH
48418: EMPTY
48419: LIST
48420: LIST
48421: PUSH
48422: LD_INT 2
48424: PUSH
48425: LD_INT 2
48427: PUSH
48428: EMPTY
48429: LIST
48430: LIST
48431: PUSH
48432: LD_INT 1
48434: PUSH
48435: LD_INT 2
48437: PUSH
48438: EMPTY
48439: LIST
48440: LIST
48441: PUSH
48442: LD_INT 1
48444: NEG
48445: PUSH
48446: LD_INT 1
48448: PUSH
48449: EMPTY
48450: LIST
48451: LIST
48452: PUSH
48453: LD_INT 2
48455: NEG
48456: PUSH
48457: LD_INT 0
48459: PUSH
48460: EMPTY
48461: LIST
48462: LIST
48463: PUSH
48464: LD_INT 2
48466: NEG
48467: PUSH
48468: LD_INT 1
48470: NEG
48471: PUSH
48472: EMPTY
48473: LIST
48474: LIST
48475: PUSH
48476: LD_INT 1
48478: NEG
48479: PUSH
48480: LD_INT 3
48482: NEG
48483: PUSH
48484: EMPTY
48485: LIST
48486: LIST
48487: PUSH
48488: LD_INT 1
48490: PUSH
48491: LD_INT 2
48493: NEG
48494: PUSH
48495: EMPTY
48496: LIST
48497: LIST
48498: PUSH
48499: LD_INT 3
48501: PUSH
48502: LD_INT 2
48504: PUSH
48505: EMPTY
48506: LIST
48507: LIST
48508: PUSH
48509: LD_INT 2
48511: PUSH
48512: LD_INT 3
48514: PUSH
48515: EMPTY
48516: LIST
48517: LIST
48518: PUSH
48519: LD_INT 2
48521: NEG
48522: PUSH
48523: LD_INT 1
48525: PUSH
48526: EMPTY
48527: LIST
48528: LIST
48529: PUSH
48530: LD_INT 3
48532: NEG
48533: PUSH
48534: LD_INT 1
48536: NEG
48537: PUSH
48538: EMPTY
48539: LIST
48540: LIST
48541: PUSH
48542: EMPTY
48543: LIST
48544: LIST
48545: LIST
48546: LIST
48547: LIST
48548: LIST
48549: LIST
48550: LIST
48551: LIST
48552: LIST
48553: LIST
48554: LIST
48555: LIST
48556: LIST
48557: LIST
48558: LIST
48559: LIST
48560: LIST
48561: LIST
48562: LIST
48563: LIST
48564: LIST
48565: LIST
48566: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48567: LD_ADDR_VAR 0 31
48571: PUSH
48572: LD_INT 0
48574: PUSH
48575: LD_INT 0
48577: PUSH
48578: EMPTY
48579: LIST
48580: LIST
48581: PUSH
48582: LD_INT 0
48584: PUSH
48585: LD_INT 1
48587: NEG
48588: PUSH
48589: EMPTY
48590: LIST
48591: LIST
48592: PUSH
48593: LD_INT 1
48595: PUSH
48596: LD_INT 0
48598: PUSH
48599: EMPTY
48600: LIST
48601: LIST
48602: PUSH
48603: LD_INT 1
48605: PUSH
48606: LD_INT 1
48608: PUSH
48609: EMPTY
48610: LIST
48611: LIST
48612: PUSH
48613: LD_INT 0
48615: PUSH
48616: LD_INT 1
48618: PUSH
48619: EMPTY
48620: LIST
48621: LIST
48622: PUSH
48623: LD_INT 1
48625: NEG
48626: PUSH
48627: LD_INT 0
48629: PUSH
48630: EMPTY
48631: LIST
48632: LIST
48633: PUSH
48634: LD_INT 1
48636: NEG
48637: PUSH
48638: LD_INT 1
48640: NEG
48641: PUSH
48642: EMPTY
48643: LIST
48644: LIST
48645: PUSH
48646: LD_INT 1
48648: NEG
48649: PUSH
48650: LD_INT 2
48652: NEG
48653: PUSH
48654: EMPTY
48655: LIST
48656: LIST
48657: PUSH
48658: LD_INT 1
48660: PUSH
48661: LD_INT 1
48663: NEG
48664: PUSH
48665: EMPTY
48666: LIST
48667: LIST
48668: PUSH
48669: LD_INT 2
48671: PUSH
48672: LD_INT 0
48674: PUSH
48675: EMPTY
48676: LIST
48677: LIST
48678: PUSH
48679: LD_INT 2
48681: PUSH
48682: LD_INT 1
48684: PUSH
48685: EMPTY
48686: LIST
48687: LIST
48688: PUSH
48689: LD_INT 2
48691: PUSH
48692: LD_INT 2
48694: PUSH
48695: EMPTY
48696: LIST
48697: LIST
48698: PUSH
48699: LD_INT 1
48701: PUSH
48702: LD_INT 2
48704: PUSH
48705: EMPTY
48706: LIST
48707: LIST
48708: PUSH
48709: LD_INT 0
48711: PUSH
48712: LD_INT 2
48714: PUSH
48715: EMPTY
48716: LIST
48717: LIST
48718: PUSH
48719: LD_INT 1
48721: NEG
48722: PUSH
48723: LD_INT 1
48725: PUSH
48726: EMPTY
48727: LIST
48728: LIST
48729: PUSH
48730: LD_INT 2
48732: NEG
48733: PUSH
48734: LD_INT 1
48736: NEG
48737: PUSH
48738: EMPTY
48739: LIST
48740: LIST
48741: PUSH
48742: LD_INT 2
48744: NEG
48745: PUSH
48746: LD_INT 2
48748: NEG
48749: PUSH
48750: EMPTY
48751: LIST
48752: LIST
48753: PUSH
48754: LD_INT 2
48756: NEG
48757: PUSH
48758: LD_INT 3
48760: NEG
48761: PUSH
48762: EMPTY
48763: LIST
48764: LIST
48765: PUSH
48766: LD_INT 2
48768: PUSH
48769: LD_INT 1
48771: NEG
48772: PUSH
48773: EMPTY
48774: LIST
48775: LIST
48776: PUSH
48777: LD_INT 3
48779: PUSH
48780: LD_INT 1
48782: PUSH
48783: EMPTY
48784: LIST
48785: LIST
48786: PUSH
48787: LD_INT 1
48789: PUSH
48790: LD_INT 3
48792: PUSH
48793: EMPTY
48794: LIST
48795: LIST
48796: PUSH
48797: LD_INT 1
48799: NEG
48800: PUSH
48801: LD_INT 2
48803: PUSH
48804: EMPTY
48805: LIST
48806: LIST
48807: PUSH
48808: LD_INT 3
48810: NEG
48811: PUSH
48812: LD_INT 2
48814: NEG
48815: PUSH
48816: EMPTY
48817: LIST
48818: LIST
48819: PUSH
48820: EMPTY
48821: LIST
48822: LIST
48823: LIST
48824: LIST
48825: LIST
48826: LIST
48827: LIST
48828: LIST
48829: LIST
48830: LIST
48831: LIST
48832: LIST
48833: LIST
48834: LIST
48835: LIST
48836: LIST
48837: LIST
48838: LIST
48839: LIST
48840: LIST
48841: LIST
48842: LIST
48843: LIST
48844: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48845: LD_ADDR_VAR 0 32
48849: PUSH
48850: LD_INT 0
48852: PUSH
48853: LD_INT 0
48855: PUSH
48856: EMPTY
48857: LIST
48858: LIST
48859: PUSH
48860: LD_INT 0
48862: PUSH
48863: LD_INT 1
48865: NEG
48866: PUSH
48867: EMPTY
48868: LIST
48869: LIST
48870: PUSH
48871: LD_INT 1
48873: PUSH
48874: LD_INT 0
48876: PUSH
48877: EMPTY
48878: LIST
48879: LIST
48880: PUSH
48881: LD_INT 1
48883: PUSH
48884: LD_INT 1
48886: PUSH
48887: EMPTY
48888: LIST
48889: LIST
48890: PUSH
48891: LD_INT 0
48893: PUSH
48894: LD_INT 1
48896: PUSH
48897: EMPTY
48898: LIST
48899: LIST
48900: PUSH
48901: LD_INT 1
48903: NEG
48904: PUSH
48905: LD_INT 0
48907: PUSH
48908: EMPTY
48909: LIST
48910: LIST
48911: PUSH
48912: LD_INT 1
48914: NEG
48915: PUSH
48916: LD_INT 1
48918: NEG
48919: PUSH
48920: EMPTY
48921: LIST
48922: LIST
48923: PUSH
48924: LD_INT 1
48926: NEG
48927: PUSH
48928: LD_INT 2
48930: NEG
48931: PUSH
48932: EMPTY
48933: LIST
48934: LIST
48935: PUSH
48936: LD_INT 0
48938: PUSH
48939: LD_INT 2
48941: NEG
48942: PUSH
48943: EMPTY
48944: LIST
48945: LIST
48946: PUSH
48947: LD_INT 1
48949: PUSH
48950: LD_INT 1
48952: NEG
48953: PUSH
48954: EMPTY
48955: LIST
48956: LIST
48957: PUSH
48958: LD_INT 2
48960: PUSH
48961: LD_INT 1
48963: PUSH
48964: EMPTY
48965: LIST
48966: LIST
48967: PUSH
48968: LD_INT 2
48970: PUSH
48971: LD_INT 2
48973: PUSH
48974: EMPTY
48975: LIST
48976: LIST
48977: PUSH
48978: LD_INT 1
48980: PUSH
48981: LD_INT 2
48983: PUSH
48984: EMPTY
48985: LIST
48986: LIST
48987: PUSH
48988: LD_INT 0
48990: PUSH
48991: LD_INT 2
48993: PUSH
48994: EMPTY
48995: LIST
48996: LIST
48997: PUSH
48998: LD_INT 1
49000: NEG
49001: PUSH
49002: LD_INT 1
49004: PUSH
49005: EMPTY
49006: LIST
49007: LIST
49008: PUSH
49009: LD_INT 2
49011: NEG
49012: PUSH
49013: LD_INT 0
49015: PUSH
49016: EMPTY
49017: LIST
49018: LIST
49019: PUSH
49020: LD_INT 2
49022: NEG
49023: PUSH
49024: LD_INT 1
49026: NEG
49027: PUSH
49028: EMPTY
49029: LIST
49030: LIST
49031: PUSH
49032: LD_INT 1
49034: NEG
49035: PUSH
49036: LD_INT 3
49038: NEG
49039: PUSH
49040: EMPTY
49041: LIST
49042: LIST
49043: PUSH
49044: LD_INT 1
49046: PUSH
49047: LD_INT 2
49049: NEG
49050: PUSH
49051: EMPTY
49052: LIST
49053: LIST
49054: PUSH
49055: LD_INT 3
49057: PUSH
49058: LD_INT 2
49060: PUSH
49061: EMPTY
49062: LIST
49063: LIST
49064: PUSH
49065: LD_INT 2
49067: PUSH
49068: LD_INT 3
49070: PUSH
49071: EMPTY
49072: LIST
49073: LIST
49074: PUSH
49075: LD_INT 2
49077: NEG
49078: PUSH
49079: LD_INT 1
49081: PUSH
49082: EMPTY
49083: LIST
49084: LIST
49085: PUSH
49086: LD_INT 3
49088: NEG
49089: PUSH
49090: LD_INT 1
49092: NEG
49093: PUSH
49094: EMPTY
49095: LIST
49096: LIST
49097: PUSH
49098: EMPTY
49099: LIST
49100: LIST
49101: LIST
49102: LIST
49103: LIST
49104: LIST
49105: LIST
49106: LIST
49107: LIST
49108: LIST
49109: LIST
49110: LIST
49111: LIST
49112: LIST
49113: LIST
49114: LIST
49115: LIST
49116: LIST
49117: LIST
49118: LIST
49119: LIST
49120: LIST
49121: LIST
49122: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49123: LD_ADDR_VAR 0 33
49127: PUSH
49128: LD_INT 0
49130: PUSH
49131: LD_INT 0
49133: PUSH
49134: EMPTY
49135: LIST
49136: LIST
49137: PUSH
49138: LD_INT 0
49140: PUSH
49141: LD_INT 1
49143: NEG
49144: PUSH
49145: EMPTY
49146: LIST
49147: LIST
49148: PUSH
49149: LD_INT 1
49151: PUSH
49152: LD_INT 0
49154: PUSH
49155: EMPTY
49156: LIST
49157: LIST
49158: PUSH
49159: LD_INT 1
49161: PUSH
49162: LD_INT 1
49164: PUSH
49165: EMPTY
49166: LIST
49167: LIST
49168: PUSH
49169: LD_INT 0
49171: PUSH
49172: LD_INT 1
49174: PUSH
49175: EMPTY
49176: LIST
49177: LIST
49178: PUSH
49179: LD_INT 1
49181: NEG
49182: PUSH
49183: LD_INT 0
49185: PUSH
49186: EMPTY
49187: LIST
49188: LIST
49189: PUSH
49190: LD_INT 1
49192: NEG
49193: PUSH
49194: LD_INT 1
49196: NEG
49197: PUSH
49198: EMPTY
49199: LIST
49200: LIST
49201: PUSH
49202: LD_INT 1
49204: NEG
49205: PUSH
49206: LD_INT 2
49208: NEG
49209: PUSH
49210: EMPTY
49211: LIST
49212: LIST
49213: PUSH
49214: LD_INT 1
49216: PUSH
49217: LD_INT 1
49219: NEG
49220: PUSH
49221: EMPTY
49222: LIST
49223: LIST
49224: PUSH
49225: LD_INT 2
49227: PUSH
49228: LD_INT 0
49230: PUSH
49231: EMPTY
49232: LIST
49233: LIST
49234: PUSH
49235: LD_INT 2
49237: PUSH
49238: LD_INT 1
49240: PUSH
49241: EMPTY
49242: LIST
49243: LIST
49244: PUSH
49245: LD_INT 1
49247: PUSH
49248: LD_INT 2
49250: PUSH
49251: EMPTY
49252: LIST
49253: LIST
49254: PUSH
49255: LD_INT 0
49257: PUSH
49258: LD_INT 2
49260: PUSH
49261: EMPTY
49262: LIST
49263: LIST
49264: PUSH
49265: LD_INT 1
49267: NEG
49268: PUSH
49269: LD_INT 1
49271: PUSH
49272: EMPTY
49273: LIST
49274: LIST
49275: PUSH
49276: LD_INT 2
49278: NEG
49279: PUSH
49280: LD_INT 0
49282: PUSH
49283: EMPTY
49284: LIST
49285: LIST
49286: PUSH
49287: LD_INT 2
49289: NEG
49290: PUSH
49291: LD_INT 1
49293: NEG
49294: PUSH
49295: EMPTY
49296: LIST
49297: LIST
49298: PUSH
49299: LD_INT 2
49301: NEG
49302: PUSH
49303: LD_INT 2
49305: NEG
49306: PUSH
49307: EMPTY
49308: LIST
49309: LIST
49310: PUSH
49311: LD_INT 2
49313: NEG
49314: PUSH
49315: LD_INT 3
49317: NEG
49318: PUSH
49319: EMPTY
49320: LIST
49321: LIST
49322: PUSH
49323: LD_INT 2
49325: PUSH
49326: LD_INT 1
49328: NEG
49329: PUSH
49330: EMPTY
49331: LIST
49332: LIST
49333: PUSH
49334: LD_INT 3
49336: PUSH
49337: LD_INT 1
49339: PUSH
49340: EMPTY
49341: LIST
49342: LIST
49343: PUSH
49344: LD_INT 1
49346: PUSH
49347: LD_INT 3
49349: PUSH
49350: EMPTY
49351: LIST
49352: LIST
49353: PUSH
49354: LD_INT 1
49356: NEG
49357: PUSH
49358: LD_INT 2
49360: PUSH
49361: EMPTY
49362: LIST
49363: LIST
49364: PUSH
49365: LD_INT 3
49367: NEG
49368: PUSH
49369: LD_INT 2
49371: NEG
49372: PUSH
49373: EMPTY
49374: LIST
49375: LIST
49376: PUSH
49377: EMPTY
49378: LIST
49379: LIST
49380: LIST
49381: LIST
49382: LIST
49383: LIST
49384: LIST
49385: LIST
49386: LIST
49387: LIST
49388: LIST
49389: LIST
49390: LIST
49391: LIST
49392: LIST
49393: LIST
49394: LIST
49395: LIST
49396: LIST
49397: LIST
49398: LIST
49399: LIST
49400: LIST
49401: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49402: LD_ADDR_VAR 0 34
49406: PUSH
49407: LD_INT 0
49409: PUSH
49410: LD_INT 0
49412: PUSH
49413: EMPTY
49414: LIST
49415: LIST
49416: PUSH
49417: LD_INT 0
49419: PUSH
49420: LD_INT 1
49422: NEG
49423: PUSH
49424: EMPTY
49425: LIST
49426: LIST
49427: PUSH
49428: LD_INT 1
49430: PUSH
49431: LD_INT 0
49433: PUSH
49434: EMPTY
49435: LIST
49436: LIST
49437: PUSH
49438: LD_INT 1
49440: PUSH
49441: LD_INT 1
49443: PUSH
49444: EMPTY
49445: LIST
49446: LIST
49447: PUSH
49448: LD_INT 0
49450: PUSH
49451: LD_INT 1
49453: PUSH
49454: EMPTY
49455: LIST
49456: LIST
49457: PUSH
49458: LD_INT 1
49460: NEG
49461: PUSH
49462: LD_INT 0
49464: PUSH
49465: EMPTY
49466: LIST
49467: LIST
49468: PUSH
49469: LD_INT 1
49471: NEG
49472: PUSH
49473: LD_INT 1
49475: NEG
49476: PUSH
49477: EMPTY
49478: LIST
49479: LIST
49480: PUSH
49481: LD_INT 1
49483: NEG
49484: PUSH
49485: LD_INT 2
49487: NEG
49488: PUSH
49489: EMPTY
49490: LIST
49491: LIST
49492: PUSH
49493: LD_INT 0
49495: PUSH
49496: LD_INT 2
49498: NEG
49499: PUSH
49500: EMPTY
49501: LIST
49502: LIST
49503: PUSH
49504: LD_INT 1
49506: PUSH
49507: LD_INT 1
49509: NEG
49510: PUSH
49511: EMPTY
49512: LIST
49513: LIST
49514: PUSH
49515: LD_INT 2
49517: PUSH
49518: LD_INT 1
49520: PUSH
49521: EMPTY
49522: LIST
49523: LIST
49524: PUSH
49525: LD_INT 2
49527: PUSH
49528: LD_INT 2
49530: PUSH
49531: EMPTY
49532: LIST
49533: LIST
49534: PUSH
49535: LD_INT 1
49537: PUSH
49538: LD_INT 2
49540: PUSH
49541: EMPTY
49542: LIST
49543: LIST
49544: PUSH
49545: LD_INT 1
49547: NEG
49548: PUSH
49549: LD_INT 1
49551: PUSH
49552: EMPTY
49553: LIST
49554: LIST
49555: PUSH
49556: LD_INT 2
49558: NEG
49559: PUSH
49560: LD_INT 0
49562: PUSH
49563: EMPTY
49564: LIST
49565: LIST
49566: PUSH
49567: LD_INT 2
49569: NEG
49570: PUSH
49571: LD_INT 1
49573: NEG
49574: PUSH
49575: EMPTY
49576: LIST
49577: LIST
49578: PUSH
49579: LD_INT 2
49581: NEG
49582: PUSH
49583: LD_INT 2
49585: NEG
49586: PUSH
49587: EMPTY
49588: LIST
49589: LIST
49590: PUSH
49591: LD_INT 1
49593: NEG
49594: PUSH
49595: LD_INT 3
49597: NEG
49598: PUSH
49599: EMPTY
49600: LIST
49601: LIST
49602: PUSH
49603: LD_INT 1
49605: PUSH
49606: LD_INT 2
49608: NEG
49609: PUSH
49610: EMPTY
49611: LIST
49612: LIST
49613: PUSH
49614: LD_INT 3
49616: PUSH
49617: LD_INT 2
49619: PUSH
49620: EMPTY
49621: LIST
49622: LIST
49623: PUSH
49624: LD_INT 2
49626: PUSH
49627: LD_INT 3
49629: PUSH
49630: EMPTY
49631: LIST
49632: LIST
49633: PUSH
49634: LD_INT 2
49636: NEG
49637: PUSH
49638: LD_INT 1
49640: PUSH
49641: EMPTY
49642: LIST
49643: LIST
49644: PUSH
49645: LD_INT 3
49647: NEG
49648: PUSH
49649: LD_INT 1
49651: NEG
49652: PUSH
49653: EMPTY
49654: LIST
49655: LIST
49656: PUSH
49657: EMPTY
49658: LIST
49659: LIST
49660: LIST
49661: LIST
49662: LIST
49663: LIST
49664: LIST
49665: LIST
49666: LIST
49667: LIST
49668: LIST
49669: LIST
49670: LIST
49671: LIST
49672: LIST
49673: LIST
49674: LIST
49675: LIST
49676: LIST
49677: LIST
49678: LIST
49679: LIST
49680: LIST
49681: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
49682: LD_ADDR_VAR 0 35
49686: PUSH
49687: LD_INT 0
49689: PUSH
49690: LD_INT 0
49692: PUSH
49693: EMPTY
49694: LIST
49695: LIST
49696: PUSH
49697: LD_INT 0
49699: PUSH
49700: LD_INT 1
49702: NEG
49703: PUSH
49704: EMPTY
49705: LIST
49706: LIST
49707: PUSH
49708: LD_INT 1
49710: PUSH
49711: LD_INT 0
49713: PUSH
49714: EMPTY
49715: LIST
49716: LIST
49717: PUSH
49718: LD_INT 1
49720: PUSH
49721: LD_INT 1
49723: PUSH
49724: EMPTY
49725: LIST
49726: LIST
49727: PUSH
49728: LD_INT 0
49730: PUSH
49731: LD_INT 1
49733: PUSH
49734: EMPTY
49735: LIST
49736: LIST
49737: PUSH
49738: LD_INT 1
49740: NEG
49741: PUSH
49742: LD_INT 0
49744: PUSH
49745: EMPTY
49746: LIST
49747: LIST
49748: PUSH
49749: LD_INT 1
49751: NEG
49752: PUSH
49753: LD_INT 1
49755: NEG
49756: PUSH
49757: EMPTY
49758: LIST
49759: LIST
49760: PUSH
49761: LD_INT 2
49763: PUSH
49764: LD_INT 1
49766: PUSH
49767: EMPTY
49768: LIST
49769: LIST
49770: PUSH
49771: LD_INT 2
49773: NEG
49774: PUSH
49775: LD_INT 1
49777: NEG
49778: PUSH
49779: EMPTY
49780: LIST
49781: LIST
49782: PUSH
49783: EMPTY
49784: LIST
49785: LIST
49786: LIST
49787: LIST
49788: LIST
49789: LIST
49790: LIST
49791: LIST
49792: LIST
49793: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
49794: LD_ADDR_VAR 0 36
49798: PUSH
49799: LD_INT 0
49801: PUSH
49802: LD_INT 0
49804: PUSH
49805: EMPTY
49806: LIST
49807: LIST
49808: PUSH
49809: LD_INT 0
49811: PUSH
49812: LD_INT 1
49814: NEG
49815: PUSH
49816: EMPTY
49817: LIST
49818: LIST
49819: PUSH
49820: LD_INT 1
49822: PUSH
49823: LD_INT 0
49825: PUSH
49826: EMPTY
49827: LIST
49828: LIST
49829: PUSH
49830: LD_INT 1
49832: PUSH
49833: LD_INT 1
49835: PUSH
49836: EMPTY
49837: LIST
49838: LIST
49839: PUSH
49840: LD_INT 0
49842: PUSH
49843: LD_INT 1
49845: PUSH
49846: EMPTY
49847: LIST
49848: LIST
49849: PUSH
49850: LD_INT 1
49852: NEG
49853: PUSH
49854: LD_INT 0
49856: PUSH
49857: EMPTY
49858: LIST
49859: LIST
49860: PUSH
49861: LD_INT 1
49863: NEG
49864: PUSH
49865: LD_INT 1
49867: NEG
49868: PUSH
49869: EMPTY
49870: LIST
49871: LIST
49872: PUSH
49873: LD_INT 1
49875: NEG
49876: PUSH
49877: LD_INT 2
49879: NEG
49880: PUSH
49881: EMPTY
49882: LIST
49883: LIST
49884: PUSH
49885: LD_INT 1
49887: PUSH
49888: LD_INT 2
49890: PUSH
49891: EMPTY
49892: LIST
49893: LIST
49894: PUSH
49895: EMPTY
49896: LIST
49897: LIST
49898: LIST
49899: LIST
49900: LIST
49901: LIST
49902: LIST
49903: LIST
49904: LIST
49905: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
49906: LD_ADDR_VAR 0 37
49910: PUSH
49911: LD_INT 0
49913: PUSH
49914: LD_INT 0
49916: PUSH
49917: EMPTY
49918: LIST
49919: LIST
49920: PUSH
49921: LD_INT 0
49923: PUSH
49924: LD_INT 1
49926: NEG
49927: PUSH
49928: EMPTY
49929: LIST
49930: LIST
49931: PUSH
49932: LD_INT 1
49934: PUSH
49935: LD_INT 0
49937: PUSH
49938: EMPTY
49939: LIST
49940: LIST
49941: PUSH
49942: LD_INT 1
49944: PUSH
49945: LD_INT 1
49947: PUSH
49948: EMPTY
49949: LIST
49950: LIST
49951: PUSH
49952: LD_INT 0
49954: PUSH
49955: LD_INT 1
49957: PUSH
49958: EMPTY
49959: LIST
49960: LIST
49961: PUSH
49962: LD_INT 1
49964: NEG
49965: PUSH
49966: LD_INT 0
49968: PUSH
49969: EMPTY
49970: LIST
49971: LIST
49972: PUSH
49973: LD_INT 1
49975: NEG
49976: PUSH
49977: LD_INT 1
49979: NEG
49980: PUSH
49981: EMPTY
49982: LIST
49983: LIST
49984: PUSH
49985: LD_INT 1
49987: PUSH
49988: LD_INT 1
49990: NEG
49991: PUSH
49992: EMPTY
49993: LIST
49994: LIST
49995: PUSH
49996: LD_INT 1
49998: NEG
49999: PUSH
50000: LD_INT 1
50002: PUSH
50003: EMPTY
50004: LIST
50005: LIST
50006: PUSH
50007: EMPTY
50008: LIST
50009: LIST
50010: LIST
50011: LIST
50012: LIST
50013: LIST
50014: LIST
50015: LIST
50016: LIST
50017: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50018: LD_ADDR_VAR 0 38
50022: PUSH
50023: LD_INT 0
50025: PUSH
50026: LD_INT 0
50028: PUSH
50029: EMPTY
50030: LIST
50031: LIST
50032: PUSH
50033: LD_INT 0
50035: PUSH
50036: LD_INT 1
50038: NEG
50039: PUSH
50040: EMPTY
50041: LIST
50042: LIST
50043: PUSH
50044: LD_INT 1
50046: PUSH
50047: LD_INT 0
50049: PUSH
50050: EMPTY
50051: LIST
50052: LIST
50053: PUSH
50054: LD_INT 1
50056: PUSH
50057: LD_INT 1
50059: PUSH
50060: EMPTY
50061: LIST
50062: LIST
50063: PUSH
50064: LD_INT 0
50066: PUSH
50067: LD_INT 1
50069: PUSH
50070: EMPTY
50071: LIST
50072: LIST
50073: PUSH
50074: LD_INT 1
50076: NEG
50077: PUSH
50078: LD_INT 0
50080: PUSH
50081: EMPTY
50082: LIST
50083: LIST
50084: PUSH
50085: LD_INT 1
50087: NEG
50088: PUSH
50089: LD_INT 1
50091: NEG
50092: PUSH
50093: EMPTY
50094: LIST
50095: LIST
50096: PUSH
50097: LD_INT 2
50099: PUSH
50100: LD_INT 1
50102: PUSH
50103: EMPTY
50104: LIST
50105: LIST
50106: PUSH
50107: LD_INT 2
50109: NEG
50110: PUSH
50111: LD_INT 1
50113: NEG
50114: PUSH
50115: EMPTY
50116: LIST
50117: LIST
50118: PUSH
50119: EMPTY
50120: LIST
50121: LIST
50122: LIST
50123: LIST
50124: LIST
50125: LIST
50126: LIST
50127: LIST
50128: LIST
50129: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50130: LD_ADDR_VAR 0 39
50134: PUSH
50135: LD_INT 0
50137: PUSH
50138: LD_INT 0
50140: PUSH
50141: EMPTY
50142: LIST
50143: LIST
50144: PUSH
50145: LD_INT 0
50147: PUSH
50148: LD_INT 1
50150: NEG
50151: PUSH
50152: EMPTY
50153: LIST
50154: LIST
50155: PUSH
50156: LD_INT 1
50158: PUSH
50159: LD_INT 0
50161: PUSH
50162: EMPTY
50163: LIST
50164: LIST
50165: PUSH
50166: LD_INT 1
50168: PUSH
50169: LD_INT 1
50171: PUSH
50172: EMPTY
50173: LIST
50174: LIST
50175: PUSH
50176: LD_INT 0
50178: PUSH
50179: LD_INT 1
50181: PUSH
50182: EMPTY
50183: LIST
50184: LIST
50185: PUSH
50186: LD_INT 1
50188: NEG
50189: PUSH
50190: LD_INT 0
50192: PUSH
50193: EMPTY
50194: LIST
50195: LIST
50196: PUSH
50197: LD_INT 1
50199: NEG
50200: PUSH
50201: LD_INT 1
50203: NEG
50204: PUSH
50205: EMPTY
50206: LIST
50207: LIST
50208: PUSH
50209: LD_INT 1
50211: NEG
50212: PUSH
50213: LD_INT 2
50215: NEG
50216: PUSH
50217: EMPTY
50218: LIST
50219: LIST
50220: PUSH
50221: LD_INT 1
50223: PUSH
50224: LD_INT 2
50226: PUSH
50227: EMPTY
50228: LIST
50229: LIST
50230: PUSH
50231: EMPTY
50232: LIST
50233: LIST
50234: LIST
50235: LIST
50236: LIST
50237: LIST
50238: LIST
50239: LIST
50240: LIST
50241: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50242: LD_ADDR_VAR 0 40
50246: PUSH
50247: LD_INT 0
50249: PUSH
50250: LD_INT 0
50252: PUSH
50253: EMPTY
50254: LIST
50255: LIST
50256: PUSH
50257: LD_INT 0
50259: PUSH
50260: LD_INT 1
50262: NEG
50263: PUSH
50264: EMPTY
50265: LIST
50266: LIST
50267: PUSH
50268: LD_INT 1
50270: PUSH
50271: LD_INT 0
50273: PUSH
50274: EMPTY
50275: LIST
50276: LIST
50277: PUSH
50278: LD_INT 1
50280: PUSH
50281: LD_INT 1
50283: PUSH
50284: EMPTY
50285: LIST
50286: LIST
50287: PUSH
50288: LD_INT 0
50290: PUSH
50291: LD_INT 1
50293: PUSH
50294: EMPTY
50295: LIST
50296: LIST
50297: PUSH
50298: LD_INT 1
50300: NEG
50301: PUSH
50302: LD_INT 0
50304: PUSH
50305: EMPTY
50306: LIST
50307: LIST
50308: PUSH
50309: LD_INT 1
50311: NEG
50312: PUSH
50313: LD_INT 1
50315: NEG
50316: PUSH
50317: EMPTY
50318: LIST
50319: LIST
50320: PUSH
50321: LD_INT 1
50323: PUSH
50324: LD_INT 1
50326: NEG
50327: PUSH
50328: EMPTY
50329: LIST
50330: LIST
50331: PUSH
50332: LD_INT 1
50334: NEG
50335: PUSH
50336: LD_INT 1
50338: PUSH
50339: EMPTY
50340: LIST
50341: LIST
50342: PUSH
50343: EMPTY
50344: LIST
50345: LIST
50346: LIST
50347: LIST
50348: LIST
50349: LIST
50350: LIST
50351: LIST
50352: LIST
50353: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50354: LD_ADDR_VAR 0 41
50358: PUSH
50359: LD_INT 0
50361: PUSH
50362: LD_INT 0
50364: PUSH
50365: EMPTY
50366: LIST
50367: LIST
50368: PUSH
50369: LD_INT 0
50371: PUSH
50372: LD_INT 1
50374: NEG
50375: PUSH
50376: EMPTY
50377: LIST
50378: LIST
50379: PUSH
50380: LD_INT 1
50382: PUSH
50383: LD_INT 0
50385: PUSH
50386: EMPTY
50387: LIST
50388: LIST
50389: PUSH
50390: LD_INT 1
50392: PUSH
50393: LD_INT 1
50395: PUSH
50396: EMPTY
50397: LIST
50398: LIST
50399: PUSH
50400: LD_INT 0
50402: PUSH
50403: LD_INT 1
50405: PUSH
50406: EMPTY
50407: LIST
50408: LIST
50409: PUSH
50410: LD_INT 1
50412: NEG
50413: PUSH
50414: LD_INT 0
50416: PUSH
50417: EMPTY
50418: LIST
50419: LIST
50420: PUSH
50421: LD_INT 1
50423: NEG
50424: PUSH
50425: LD_INT 1
50427: NEG
50428: PUSH
50429: EMPTY
50430: LIST
50431: LIST
50432: PUSH
50433: LD_INT 1
50435: NEG
50436: PUSH
50437: LD_INT 2
50439: NEG
50440: PUSH
50441: EMPTY
50442: LIST
50443: LIST
50444: PUSH
50445: LD_INT 1
50447: PUSH
50448: LD_INT 1
50450: NEG
50451: PUSH
50452: EMPTY
50453: LIST
50454: LIST
50455: PUSH
50456: LD_INT 2
50458: PUSH
50459: LD_INT 0
50461: PUSH
50462: EMPTY
50463: LIST
50464: LIST
50465: PUSH
50466: LD_INT 2
50468: PUSH
50469: LD_INT 1
50471: PUSH
50472: EMPTY
50473: LIST
50474: LIST
50475: PUSH
50476: LD_INT 2
50478: PUSH
50479: LD_INT 2
50481: PUSH
50482: EMPTY
50483: LIST
50484: LIST
50485: PUSH
50486: LD_INT 1
50488: PUSH
50489: LD_INT 2
50491: PUSH
50492: EMPTY
50493: LIST
50494: LIST
50495: PUSH
50496: LD_INT 1
50498: NEG
50499: PUSH
50500: LD_INT 1
50502: PUSH
50503: EMPTY
50504: LIST
50505: LIST
50506: PUSH
50507: LD_INT 2
50509: NEG
50510: PUSH
50511: LD_INT 0
50513: PUSH
50514: EMPTY
50515: LIST
50516: LIST
50517: PUSH
50518: LD_INT 2
50520: NEG
50521: PUSH
50522: LD_INT 1
50524: NEG
50525: PUSH
50526: EMPTY
50527: LIST
50528: LIST
50529: PUSH
50530: LD_INT 2
50532: NEG
50533: PUSH
50534: LD_INT 2
50536: NEG
50537: PUSH
50538: EMPTY
50539: LIST
50540: LIST
50541: PUSH
50542: LD_INT 2
50544: NEG
50545: PUSH
50546: LD_INT 3
50548: NEG
50549: PUSH
50550: EMPTY
50551: LIST
50552: LIST
50553: PUSH
50554: LD_INT 2
50556: PUSH
50557: LD_INT 1
50559: NEG
50560: PUSH
50561: EMPTY
50562: LIST
50563: LIST
50564: PUSH
50565: LD_INT 3
50567: PUSH
50568: LD_INT 0
50570: PUSH
50571: EMPTY
50572: LIST
50573: LIST
50574: PUSH
50575: LD_INT 3
50577: PUSH
50578: LD_INT 1
50580: PUSH
50581: EMPTY
50582: LIST
50583: LIST
50584: PUSH
50585: LD_INT 3
50587: PUSH
50588: LD_INT 2
50590: PUSH
50591: EMPTY
50592: LIST
50593: LIST
50594: PUSH
50595: LD_INT 3
50597: PUSH
50598: LD_INT 3
50600: PUSH
50601: EMPTY
50602: LIST
50603: LIST
50604: PUSH
50605: LD_INT 2
50607: PUSH
50608: LD_INT 3
50610: PUSH
50611: EMPTY
50612: LIST
50613: LIST
50614: PUSH
50615: LD_INT 2
50617: NEG
50618: PUSH
50619: LD_INT 1
50621: PUSH
50622: EMPTY
50623: LIST
50624: LIST
50625: PUSH
50626: LD_INT 3
50628: NEG
50629: PUSH
50630: LD_INT 0
50632: PUSH
50633: EMPTY
50634: LIST
50635: LIST
50636: PUSH
50637: LD_INT 3
50639: NEG
50640: PUSH
50641: LD_INT 1
50643: NEG
50644: PUSH
50645: EMPTY
50646: LIST
50647: LIST
50648: PUSH
50649: LD_INT 3
50651: NEG
50652: PUSH
50653: LD_INT 2
50655: NEG
50656: PUSH
50657: EMPTY
50658: LIST
50659: LIST
50660: PUSH
50661: LD_INT 3
50663: NEG
50664: PUSH
50665: LD_INT 3
50667: NEG
50668: PUSH
50669: EMPTY
50670: LIST
50671: LIST
50672: PUSH
50673: EMPTY
50674: LIST
50675: LIST
50676: LIST
50677: LIST
50678: LIST
50679: LIST
50680: LIST
50681: LIST
50682: LIST
50683: LIST
50684: LIST
50685: LIST
50686: LIST
50687: LIST
50688: LIST
50689: LIST
50690: LIST
50691: LIST
50692: LIST
50693: LIST
50694: LIST
50695: LIST
50696: LIST
50697: LIST
50698: LIST
50699: LIST
50700: LIST
50701: LIST
50702: LIST
50703: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50704: LD_ADDR_VAR 0 42
50708: PUSH
50709: LD_INT 0
50711: PUSH
50712: LD_INT 0
50714: PUSH
50715: EMPTY
50716: LIST
50717: LIST
50718: PUSH
50719: LD_INT 0
50721: PUSH
50722: LD_INT 1
50724: NEG
50725: PUSH
50726: EMPTY
50727: LIST
50728: LIST
50729: PUSH
50730: LD_INT 1
50732: PUSH
50733: LD_INT 0
50735: PUSH
50736: EMPTY
50737: LIST
50738: LIST
50739: PUSH
50740: LD_INT 1
50742: PUSH
50743: LD_INT 1
50745: PUSH
50746: EMPTY
50747: LIST
50748: LIST
50749: PUSH
50750: LD_INT 0
50752: PUSH
50753: LD_INT 1
50755: PUSH
50756: EMPTY
50757: LIST
50758: LIST
50759: PUSH
50760: LD_INT 1
50762: NEG
50763: PUSH
50764: LD_INT 0
50766: PUSH
50767: EMPTY
50768: LIST
50769: LIST
50770: PUSH
50771: LD_INT 1
50773: NEG
50774: PUSH
50775: LD_INT 1
50777: NEG
50778: PUSH
50779: EMPTY
50780: LIST
50781: LIST
50782: PUSH
50783: LD_INT 1
50785: NEG
50786: PUSH
50787: LD_INT 2
50789: NEG
50790: PUSH
50791: EMPTY
50792: LIST
50793: LIST
50794: PUSH
50795: LD_INT 0
50797: PUSH
50798: LD_INT 2
50800: NEG
50801: PUSH
50802: EMPTY
50803: LIST
50804: LIST
50805: PUSH
50806: LD_INT 1
50808: PUSH
50809: LD_INT 1
50811: NEG
50812: PUSH
50813: EMPTY
50814: LIST
50815: LIST
50816: PUSH
50817: LD_INT 2
50819: PUSH
50820: LD_INT 1
50822: PUSH
50823: EMPTY
50824: LIST
50825: LIST
50826: PUSH
50827: LD_INT 2
50829: PUSH
50830: LD_INT 2
50832: PUSH
50833: EMPTY
50834: LIST
50835: LIST
50836: PUSH
50837: LD_INT 1
50839: PUSH
50840: LD_INT 2
50842: PUSH
50843: EMPTY
50844: LIST
50845: LIST
50846: PUSH
50847: LD_INT 0
50849: PUSH
50850: LD_INT 2
50852: PUSH
50853: EMPTY
50854: LIST
50855: LIST
50856: PUSH
50857: LD_INT 1
50859: NEG
50860: PUSH
50861: LD_INT 1
50863: PUSH
50864: EMPTY
50865: LIST
50866: LIST
50867: PUSH
50868: LD_INT 2
50870: NEG
50871: PUSH
50872: LD_INT 1
50874: NEG
50875: PUSH
50876: EMPTY
50877: LIST
50878: LIST
50879: PUSH
50880: LD_INT 2
50882: NEG
50883: PUSH
50884: LD_INT 2
50886: NEG
50887: PUSH
50888: EMPTY
50889: LIST
50890: LIST
50891: PUSH
50892: LD_INT 2
50894: NEG
50895: PUSH
50896: LD_INT 3
50898: NEG
50899: PUSH
50900: EMPTY
50901: LIST
50902: LIST
50903: PUSH
50904: LD_INT 1
50906: NEG
50907: PUSH
50908: LD_INT 3
50910: NEG
50911: PUSH
50912: EMPTY
50913: LIST
50914: LIST
50915: PUSH
50916: LD_INT 0
50918: PUSH
50919: LD_INT 3
50921: NEG
50922: PUSH
50923: EMPTY
50924: LIST
50925: LIST
50926: PUSH
50927: LD_INT 1
50929: PUSH
50930: LD_INT 2
50932: NEG
50933: PUSH
50934: EMPTY
50935: LIST
50936: LIST
50937: PUSH
50938: LD_INT 3
50940: PUSH
50941: LD_INT 2
50943: PUSH
50944: EMPTY
50945: LIST
50946: LIST
50947: PUSH
50948: LD_INT 3
50950: PUSH
50951: LD_INT 3
50953: PUSH
50954: EMPTY
50955: LIST
50956: LIST
50957: PUSH
50958: LD_INT 2
50960: PUSH
50961: LD_INT 3
50963: PUSH
50964: EMPTY
50965: LIST
50966: LIST
50967: PUSH
50968: LD_INT 1
50970: PUSH
50971: LD_INT 3
50973: PUSH
50974: EMPTY
50975: LIST
50976: LIST
50977: PUSH
50978: LD_INT 0
50980: PUSH
50981: LD_INT 3
50983: PUSH
50984: EMPTY
50985: LIST
50986: LIST
50987: PUSH
50988: LD_INT 1
50990: NEG
50991: PUSH
50992: LD_INT 2
50994: PUSH
50995: EMPTY
50996: LIST
50997: LIST
50998: PUSH
50999: LD_INT 3
51001: NEG
51002: PUSH
51003: LD_INT 2
51005: NEG
51006: PUSH
51007: EMPTY
51008: LIST
51009: LIST
51010: PUSH
51011: LD_INT 3
51013: NEG
51014: PUSH
51015: LD_INT 3
51017: NEG
51018: PUSH
51019: EMPTY
51020: LIST
51021: LIST
51022: PUSH
51023: EMPTY
51024: LIST
51025: LIST
51026: LIST
51027: LIST
51028: LIST
51029: LIST
51030: LIST
51031: LIST
51032: LIST
51033: LIST
51034: LIST
51035: LIST
51036: LIST
51037: LIST
51038: LIST
51039: LIST
51040: LIST
51041: LIST
51042: LIST
51043: LIST
51044: LIST
51045: LIST
51046: LIST
51047: LIST
51048: LIST
51049: LIST
51050: LIST
51051: LIST
51052: LIST
51053: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51054: LD_ADDR_VAR 0 43
51058: PUSH
51059: LD_INT 0
51061: PUSH
51062: LD_INT 0
51064: PUSH
51065: EMPTY
51066: LIST
51067: LIST
51068: PUSH
51069: LD_INT 0
51071: PUSH
51072: LD_INT 1
51074: NEG
51075: PUSH
51076: EMPTY
51077: LIST
51078: LIST
51079: PUSH
51080: LD_INT 1
51082: PUSH
51083: LD_INT 0
51085: PUSH
51086: EMPTY
51087: LIST
51088: LIST
51089: PUSH
51090: LD_INT 1
51092: PUSH
51093: LD_INT 1
51095: PUSH
51096: EMPTY
51097: LIST
51098: LIST
51099: PUSH
51100: LD_INT 0
51102: PUSH
51103: LD_INT 1
51105: PUSH
51106: EMPTY
51107: LIST
51108: LIST
51109: PUSH
51110: LD_INT 1
51112: NEG
51113: PUSH
51114: LD_INT 0
51116: PUSH
51117: EMPTY
51118: LIST
51119: LIST
51120: PUSH
51121: LD_INT 1
51123: NEG
51124: PUSH
51125: LD_INT 1
51127: NEG
51128: PUSH
51129: EMPTY
51130: LIST
51131: LIST
51132: PUSH
51133: LD_INT 1
51135: NEG
51136: PUSH
51137: LD_INT 2
51139: NEG
51140: PUSH
51141: EMPTY
51142: LIST
51143: LIST
51144: PUSH
51145: LD_INT 0
51147: PUSH
51148: LD_INT 2
51150: NEG
51151: PUSH
51152: EMPTY
51153: LIST
51154: LIST
51155: PUSH
51156: LD_INT 1
51158: PUSH
51159: LD_INT 1
51161: NEG
51162: PUSH
51163: EMPTY
51164: LIST
51165: LIST
51166: PUSH
51167: LD_INT 2
51169: PUSH
51170: LD_INT 0
51172: PUSH
51173: EMPTY
51174: LIST
51175: LIST
51176: PUSH
51177: LD_INT 2
51179: PUSH
51180: LD_INT 1
51182: PUSH
51183: EMPTY
51184: LIST
51185: LIST
51186: PUSH
51187: LD_INT 1
51189: PUSH
51190: LD_INT 2
51192: PUSH
51193: EMPTY
51194: LIST
51195: LIST
51196: PUSH
51197: LD_INT 0
51199: PUSH
51200: LD_INT 2
51202: PUSH
51203: EMPTY
51204: LIST
51205: LIST
51206: PUSH
51207: LD_INT 1
51209: NEG
51210: PUSH
51211: LD_INT 1
51213: PUSH
51214: EMPTY
51215: LIST
51216: LIST
51217: PUSH
51218: LD_INT 2
51220: NEG
51221: PUSH
51222: LD_INT 0
51224: PUSH
51225: EMPTY
51226: LIST
51227: LIST
51228: PUSH
51229: LD_INT 2
51231: NEG
51232: PUSH
51233: LD_INT 1
51235: NEG
51236: PUSH
51237: EMPTY
51238: LIST
51239: LIST
51240: PUSH
51241: LD_INT 1
51243: NEG
51244: PUSH
51245: LD_INT 3
51247: NEG
51248: PUSH
51249: EMPTY
51250: LIST
51251: LIST
51252: PUSH
51253: LD_INT 0
51255: PUSH
51256: LD_INT 3
51258: NEG
51259: PUSH
51260: EMPTY
51261: LIST
51262: LIST
51263: PUSH
51264: LD_INT 1
51266: PUSH
51267: LD_INT 2
51269: NEG
51270: PUSH
51271: EMPTY
51272: LIST
51273: LIST
51274: PUSH
51275: LD_INT 2
51277: PUSH
51278: LD_INT 1
51280: NEG
51281: PUSH
51282: EMPTY
51283: LIST
51284: LIST
51285: PUSH
51286: LD_INT 3
51288: PUSH
51289: LD_INT 0
51291: PUSH
51292: EMPTY
51293: LIST
51294: LIST
51295: PUSH
51296: LD_INT 3
51298: PUSH
51299: LD_INT 1
51301: PUSH
51302: EMPTY
51303: LIST
51304: LIST
51305: PUSH
51306: LD_INT 1
51308: PUSH
51309: LD_INT 3
51311: PUSH
51312: EMPTY
51313: LIST
51314: LIST
51315: PUSH
51316: LD_INT 0
51318: PUSH
51319: LD_INT 3
51321: PUSH
51322: EMPTY
51323: LIST
51324: LIST
51325: PUSH
51326: LD_INT 1
51328: NEG
51329: PUSH
51330: LD_INT 2
51332: PUSH
51333: EMPTY
51334: LIST
51335: LIST
51336: PUSH
51337: LD_INT 2
51339: NEG
51340: PUSH
51341: LD_INT 1
51343: PUSH
51344: EMPTY
51345: LIST
51346: LIST
51347: PUSH
51348: LD_INT 3
51350: NEG
51351: PUSH
51352: LD_INT 0
51354: PUSH
51355: EMPTY
51356: LIST
51357: LIST
51358: PUSH
51359: LD_INT 3
51361: NEG
51362: PUSH
51363: LD_INT 1
51365: NEG
51366: PUSH
51367: EMPTY
51368: LIST
51369: LIST
51370: PUSH
51371: EMPTY
51372: LIST
51373: LIST
51374: LIST
51375: LIST
51376: LIST
51377: LIST
51378: LIST
51379: LIST
51380: LIST
51381: LIST
51382: LIST
51383: LIST
51384: LIST
51385: LIST
51386: LIST
51387: LIST
51388: LIST
51389: LIST
51390: LIST
51391: LIST
51392: LIST
51393: LIST
51394: LIST
51395: LIST
51396: LIST
51397: LIST
51398: LIST
51399: LIST
51400: LIST
51401: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51402: LD_ADDR_VAR 0 44
51406: PUSH
51407: LD_INT 0
51409: PUSH
51410: LD_INT 0
51412: PUSH
51413: EMPTY
51414: LIST
51415: LIST
51416: PUSH
51417: LD_INT 0
51419: PUSH
51420: LD_INT 1
51422: NEG
51423: PUSH
51424: EMPTY
51425: LIST
51426: LIST
51427: PUSH
51428: LD_INT 1
51430: PUSH
51431: LD_INT 0
51433: PUSH
51434: EMPTY
51435: LIST
51436: LIST
51437: PUSH
51438: LD_INT 1
51440: PUSH
51441: LD_INT 1
51443: PUSH
51444: EMPTY
51445: LIST
51446: LIST
51447: PUSH
51448: LD_INT 0
51450: PUSH
51451: LD_INT 1
51453: PUSH
51454: EMPTY
51455: LIST
51456: LIST
51457: PUSH
51458: LD_INT 1
51460: NEG
51461: PUSH
51462: LD_INT 0
51464: PUSH
51465: EMPTY
51466: LIST
51467: LIST
51468: PUSH
51469: LD_INT 1
51471: NEG
51472: PUSH
51473: LD_INT 1
51475: NEG
51476: PUSH
51477: EMPTY
51478: LIST
51479: LIST
51480: PUSH
51481: LD_INT 1
51483: NEG
51484: PUSH
51485: LD_INT 2
51487: NEG
51488: PUSH
51489: EMPTY
51490: LIST
51491: LIST
51492: PUSH
51493: LD_INT 1
51495: PUSH
51496: LD_INT 1
51498: NEG
51499: PUSH
51500: EMPTY
51501: LIST
51502: LIST
51503: PUSH
51504: LD_INT 2
51506: PUSH
51507: LD_INT 0
51509: PUSH
51510: EMPTY
51511: LIST
51512: LIST
51513: PUSH
51514: LD_INT 2
51516: PUSH
51517: LD_INT 1
51519: PUSH
51520: EMPTY
51521: LIST
51522: LIST
51523: PUSH
51524: LD_INT 2
51526: PUSH
51527: LD_INT 2
51529: PUSH
51530: EMPTY
51531: LIST
51532: LIST
51533: PUSH
51534: LD_INT 1
51536: PUSH
51537: LD_INT 2
51539: PUSH
51540: EMPTY
51541: LIST
51542: LIST
51543: PUSH
51544: LD_INT 1
51546: NEG
51547: PUSH
51548: LD_INT 1
51550: PUSH
51551: EMPTY
51552: LIST
51553: LIST
51554: PUSH
51555: LD_INT 2
51557: NEG
51558: PUSH
51559: LD_INT 0
51561: PUSH
51562: EMPTY
51563: LIST
51564: LIST
51565: PUSH
51566: LD_INT 2
51568: NEG
51569: PUSH
51570: LD_INT 1
51572: NEG
51573: PUSH
51574: EMPTY
51575: LIST
51576: LIST
51577: PUSH
51578: LD_INT 2
51580: NEG
51581: PUSH
51582: LD_INT 2
51584: NEG
51585: PUSH
51586: EMPTY
51587: LIST
51588: LIST
51589: PUSH
51590: LD_INT 2
51592: NEG
51593: PUSH
51594: LD_INT 3
51596: NEG
51597: PUSH
51598: EMPTY
51599: LIST
51600: LIST
51601: PUSH
51602: LD_INT 2
51604: PUSH
51605: LD_INT 1
51607: NEG
51608: PUSH
51609: EMPTY
51610: LIST
51611: LIST
51612: PUSH
51613: LD_INT 3
51615: PUSH
51616: LD_INT 0
51618: PUSH
51619: EMPTY
51620: LIST
51621: LIST
51622: PUSH
51623: LD_INT 3
51625: PUSH
51626: LD_INT 1
51628: PUSH
51629: EMPTY
51630: LIST
51631: LIST
51632: PUSH
51633: LD_INT 3
51635: PUSH
51636: LD_INT 2
51638: PUSH
51639: EMPTY
51640: LIST
51641: LIST
51642: PUSH
51643: LD_INT 3
51645: PUSH
51646: LD_INT 3
51648: PUSH
51649: EMPTY
51650: LIST
51651: LIST
51652: PUSH
51653: LD_INT 2
51655: PUSH
51656: LD_INT 3
51658: PUSH
51659: EMPTY
51660: LIST
51661: LIST
51662: PUSH
51663: LD_INT 2
51665: NEG
51666: PUSH
51667: LD_INT 1
51669: PUSH
51670: EMPTY
51671: LIST
51672: LIST
51673: PUSH
51674: LD_INT 3
51676: NEG
51677: PUSH
51678: LD_INT 0
51680: PUSH
51681: EMPTY
51682: LIST
51683: LIST
51684: PUSH
51685: LD_INT 3
51687: NEG
51688: PUSH
51689: LD_INT 1
51691: NEG
51692: PUSH
51693: EMPTY
51694: LIST
51695: LIST
51696: PUSH
51697: LD_INT 3
51699: NEG
51700: PUSH
51701: LD_INT 2
51703: NEG
51704: PUSH
51705: EMPTY
51706: LIST
51707: LIST
51708: PUSH
51709: LD_INT 3
51711: NEG
51712: PUSH
51713: LD_INT 3
51715: NEG
51716: PUSH
51717: EMPTY
51718: LIST
51719: LIST
51720: PUSH
51721: EMPTY
51722: LIST
51723: LIST
51724: LIST
51725: LIST
51726: LIST
51727: LIST
51728: LIST
51729: LIST
51730: LIST
51731: LIST
51732: LIST
51733: LIST
51734: LIST
51735: LIST
51736: LIST
51737: LIST
51738: LIST
51739: LIST
51740: LIST
51741: LIST
51742: LIST
51743: LIST
51744: LIST
51745: LIST
51746: LIST
51747: LIST
51748: LIST
51749: LIST
51750: LIST
51751: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51752: LD_ADDR_VAR 0 45
51756: PUSH
51757: LD_INT 0
51759: PUSH
51760: LD_INT 0
51762: PUSH
51763: EMPTY
51764: LIST
51765: LIST
51766: PUSH
51767: LD_INT 0
51769: PUSH
51770: LD_INT 1
51772: NEG
51773: PUSH
51774: EMPTY
51775: LIST
51776: LIST
51777: PUSH
51778: LD_INT 1
51780: PUSH
51781: LD_INT 0
51783: PUSH
51784: EMPTY
51785: LIST
51786: LIST
51787: PUSH
51788: LD_INT 1
51790: PUSH
51791: LD_INT 1
51793: PUSH
51794: EMPTY
51795: LIST
51796: LIST
51797: PUSH
51798: LD_INT 0
51800: PUSH
51801: LD_INT 1
51803: PUSH
51804: EMPTY
51805: LIST
51806: LIST
51807: PUSH
51808: LD_INT 1
51810: NEG
51811: PUSH
51812: LD_INT 0
51814: PUSH
51815: EMPTY
51816: LIST
51817: LIST
51818: PUSH
51819: LD_INT 1
51821: NEG
51822: PUSH
51823: LD_INT 1
51825: NEG
51826: PUSH
51827: EMPTY
51828: LIST
51829: LIST
51830: PUSH
51831: LD_INT 1
51833: NEG
51834: PUSH
51835: LD_INT 2
51837: NEG
51838: PUSH
51839: EMPTY
51840: LIST
51841: LIST
51842: PUSH
51843: LD_INT 0
51845: PUSH
51846: LD_INT 2
51848: NEG
51849: PUSH
51850: EMPTY
51851: LIST
51852: LIST
51853: PUSH
51854: LD_INT 1
51856: PUSH
51857: LD_INT 1
51859: NEG
51860: PUSH
51861: EMPTY
51862: LIST
51863: LIST
51864: PUSH
51865: LD_INT 2
51867: PUSH
51868: LD_INT 1
51870: PUSH
51871: EMPTY
51872: LIST
51873: LIST
51874: PUSH
51875: LD_INT 2
51877: PUSH
51878: LD_INT 2
51880: PUSH
51881: EMPTY
51882: LIST
51883: LIST
51884: PUSH
51885: LD_INT 1
51887: PUSH
51888: LD_INT 2
51890: PUSH
51891: EMPTY
51892: LIST
51893: LIST
51894: PUSH
51895: LD_INT 0
51897: PUSH
51898: LD_INT 2
51900: PUSH
51901: EMPTY
51902: LIST
51903: LIST
51904: PUSH
51905: LD_INT 1
51907: NEG
51908: PUSH
51909: LD_INT 1
51911: PUSH
51912: EMPTY
51913: LIST
51914: LIST
51915: PUSH
51916: LD_INT 2
51918: NEG
51919: PUSH
51920: LD_INT 1
51922: NEG
51923: PUSH
51924: EMPTY
51925: LIST
51926: LIST
51927: PUSH
51928: LD_INT 2
51930: NEG
51931: PUSH
51932: LD_INT 2
51934: NEG
51935: PUSH
51936: EMPTY
51937: LIST
51938: LIST
51939: PUSH
51940: LD_INT 2
51942: NEG
51943: PUSH
51944: LD_INT 3
51946: NEG
51947: PUSH
51948: EMPTY
51949: LIST
51950: LIST
51951: PUSH
51952: LD_INT 1
51954: NEG
51955: PUSH
51956: LD_INT 3
51958: NEG
51959: PUSH
51960: EMPTY
51961: LIST
51962: LIST
51963: PUSH
51964: LD_INT 0
51966: PUSH
51967: LD_INT 3
51969: NEG
51970: PUSH
51971: EMPTY
51972: LIST
51973: LIST
51974: PUSH
51975: LD_INT 1
51977: PUSH
51978: LD_INT 2
51980: NEG
51981: PUSH
51982: EMPTY
51983: LIST
51984: LIST
51985: PUSH
51986: LD_INT 3
51988: PUSH
51989: LD_INT 2
51991: PUSH
51992: EMPTY
51993: LIST
51994: LIST
51995: PUSH
51996: LD_INT 3
51998: PUSH
51999: LD_INT 3
52001: PUSH
52002: EMPTY
52003: LIST
52004: LIST
52005: PUSH
52006: LD_INT 2
52008: PUSH
52009: LD_INT 3
52011: PUSH
52012: EMPTY
52013: LIST
52014: LIST
52015: PUSH
52016: LD_INT 1
52018: PUSH
52019: LD_INT 3
52021: PUSH
52022: EMPTY
52023: LIST
52024: LIST
52025: PUSH
52026: LD_INT 0
52028: PUSH
52029: LD_INT 3
52031: PUSH
52032: EMPTY
52033: LIST
52034: LIST
52035: PUSH
52036: LD_INT 1
52038: NEG
52039: PUSH
52040: LD_INT 2
52042: PUSH
52043: EMPTY
52044: LIST
52045: LIST
52046: PUSH
52047: LD_INT 3
52049: NEG
52050: PUSH
52051: LD_INT 2
52053: NEG
52054: PUSH
52055: EMPTY
52056: LIST
52057: LIST
52058: PUSH
52059: LD_INT 3
52061: NEG
52062: PUSH
52063: LD_INT 3
52065: NEG
52066: PUSH
52067: EMPTY
52068: LIST
52069: LIST
52070: PUSH
52071: EMPTY
52072: LIST
52073: LIST
52074: LIST
52075: LIST
52076: LIST
52077: LIST
52078: LIST
52079: LIST
52080: LIST
52081: LIST
52082: LIST
52083: LIST
52084: LIST
52085: LIST
52086: LIST
52087: LIST
52088: LIST
52089: LIST
52090: LIST
52091: LIST
52092: LIST
52093: LIST
52094: LIST
52095: LIST
52096: LIST
52097: LIST
52098: LIST
52099: LIST
52100: LIST
52101: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52102: LD_ADDR_VAR 0 46
52106: PUSH
52107: LD_INT 0
52109: PUSH
52110: LD_INT 0
52112: PUSH
52113: EMPTY
52114: LIST
52115: LIST
52116: PUSH
52117: LD_INT 0
52119: PUSH
52120: LD_INT 1
52122: NEG
52123: PUSH
52124: EMPTY
52125: LIST
52126: LIST
52127: PUSH
52128: LD_INT 1
52130: PUSH
52131: LD_INT 0
52133: PUSH
52134: EMPTY
52135: LIST
52136: LIST
52137: PUSH
52138: LD_INT 1
52140: PUSH
52141: LD_INT 1
52143: PUSH
52144: EMPTY
52145: LIST
52146: LIST
52147: PUSH
52148: LD_INT 0
52150: PUSH
52151: LD_INT 1
52153: PUSH
52154: EMPTY
52155: LIST
52156: LIST
52157: PUSH
52158: LD_INT 1
52160: NEG
52161: PUSH
52162: LD_INT 0
52164: PUSH
52165: EMPTY
52166: LIST
52167: LIST
52168: PUSH
52169: LD_INT 1
52171: NEG
52172: PUSH
52173: LD_INT 1
52175: NEG
52176: PUSH
52177: EMPTY
52178: LIST
52179: LIST
52180: PUSH
52181: LD_INT 1
52183: NEG
52184: PUSH
52185: LD_INT 2
52187: NEG
52188: PUSH
52189: EMPTY
52190: LIST
52191: LIST
52192: PUSH
52193: LD_INT 0
52195: PUSH
52196: LD_INT 2
52198: NEG
52199: PUSH
52200: EMPTY
52201: LIST
52202: LIST
52203: PUSH
52204: LD_INT 1
52206: PUSH
52207: LD_INT 1
52209: NEG
52210: PUSH
52211: EMPTY
52212: LIST
52213: LIST
52214: PUSH
52215: LD_INT 2
52217: PUSH
52218: LD_INT 0
52220: PUSH
52221: EMPTY
52222: LIST
52223: LIST
52224: PUSH
52225: LD_INT 2
52227: PUSH
52228: LD_INT 1
52230: PUSH
52231: EMPTY
52232: LIST
52233: LIST
52234: PUSH
52235: LD_INT 1
52237: PUSH
52238: LD_INT 2
52240: PUSH
52241: EMPTY
52242: LIST
52243: LIST
52244: PUSH
52245: LD_INT 0
52247: PUSH
52248: LD_INT 2
52250: PUSH
52251: EMPTY
52252: LIST
52253: LIST
52254: PUSH
52255: LD_INT 1
52257: NEG
52258: PUSH
52259: LD_INT 1
52261: PUSH
52262: EMPTY
52263: LIST
52264: LIST
52265: PUSH
52266: LD_INT 2
52268: NEG
52269: PUSH
52270: LD_INT 0
52272: PUSH
52273: EMPTY
52274: LIST
52275: LIST
52276: PUSH
52277: LD_INT 2
52279: NEG
52280: PUSH
52281: LD_INT 1
52283: NEG
52284: PUSH
52285: EMPTY
52286: LIST
52287: LIST
52288: PUSH
52289: LD_INT 1
52291: NEG
52292: PUSH
52293: LD_INT 3
52295: NEG
52296: PUSH
52297: EMPTY
52298: LIST
52299: LIST
52300: PUSH
52301: LD_INT 0
52303: PUSH
52304: LD_INT 3
52306: NEG
52307: PUSH
52308: EMPTY
52309: LIST
52310: LIST
52311: PUSH
52312: LD_INT 1
52314: PUSH
52315: LD_INT 2
52317: NEG
52318: PUSH
52319: EMPTY
52320: LIST
52321: LIST
52322: PUSH
52323: LD_INT 2
52325: PUSH
52326: LD_INT 1
52328: NEG
52329: PUSH
52330: EMPTY
52331: LIST
52332: LIST
52333: PUSH
52334: LD_INT 3
52336: PUSH
52337: LD_INT 0
52339: PUSH
52340: EMPTY
52341: LIST
52342: LIST
52343: PUSH
52344: LD_INT 3
52346: PUSH
52347: LD_INT 1
52349: PUSH
52350: EMPTY
52351: LIST
52352: LIST
52353: PUSH
52354: LD_INT 1
52356: PUSH
52357: LD_INT 3
52359: PUSH
52360: EMPTY
52361: LIST
52362: LIST
52363: PUSH
52364: LD_INT 0
52366: PUSH
52367: LD_INT 3
52369: PUSH
52370: EMPTY
52371: LIST
52372: LIST
52373: PUSH
52374: LD_INT 1
52376: NEG
52377: PUSH
52378: LD_INT 2
52380: PUSH
52381: EMPTY
52382: LIST
52383: LIST
52384: PUSH
52385: LD_INT 2
52387: NEG
52388: PUSH
52389: LD_INT 1
52391: PUSH
52392: EMPTY
52393: LIST
52394: LIST
52395: PUSH
52396: LD_INT 3
52398: NEG
52399: PUSH
52400: LD_INT 0
52402: PUSH
52403: EMPTY
52404: LIST
52405: LIST
52406: PUSH
52407: LD_INT 3
52409: NEG
52410: PUSH
52411: LD_INT 1
52413: NEG
52414: PUSH
52415: EMPTY
52416: LIST
52417: LIST
52418: PUSH
52419: EMPTY
52420: LIST
52421: LIST
52422: LIST
52423: LIST
52424: LIST
52425: LIST
52426: LIST
52427: LIST
52428: LIST
52429: LIST
52430: LIST
52431: LIST
52432: LIST
52433: LIST
52434: LIST
52435: LIST
52436: LIST
52437: LIST
52438: LIST
52439: LIST
52440: LIST
52441: LIST
52442: LIST
52443: LIST
52444: LIST
52445: LIST
52446: LIST
52447: LIST
52448: LIST
52449: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52450: LD_ADDR_VAR 0 47
52454: PUSH
52455: LD_INT 0
52457: PUSH
52458: LD_INT 0
52460: PUSH
52461: EMPTY
52462: LIST
52463: LIST
52464: PUSH
52465: LD_INT 0
52467: PUSH
52468: LD_INT 1
52470: NEG
52471: PUSH
52472: EMPTY
52473: LIST
52474: LIST
52475: PUSH
52476: LD_INT 1
52478: PUSH
52479: LD_INT 0
52481: PUSH
52482: EMPTY
52483: LIST
52484: LIST
52485: PUSH
52486: LD_INT 1
52488: PUSH
52489: LD_INT 1
52491: PUSH
52492: EMPTY
52493: LIST
52494: LIST
52495: PUSH
52496: LD_INT 0
52498: PUSH
52499: LD_INT 1
52501: PUSH
52502: EMPTY
52503: LIST
52504: LIST
52505: PUSH
52506: LD_INT 1
52508: NEG
52509: PUSH
52510: LD_INT 0
52512: PUSH
52513: EMPTY
52514: LIST
52515: LIST
52516: PUSH
52517: LD_INT 1
52519: NEG
52520: PUSH
52521: LD_INT 1
52523: NEG
52524: PUSH
52525: EMPTY
52526: LIST
52527: LIST
52528: PUSH
52529: LD_INT 1
52531: NEG
52532: PUSH
52533: LD_INT 2
52535: NEG
52536: PUSH
52537: EMPTY
52538: LIST
52539: LIST
52540: PUSH
52541: LD_INT 0
52543: PUSH
52544: LD_INT 2
52546: NEG
52547: PUSH
52548: EMPTY
52549: LIST
52550: LIST
52551: PUSH
52552: LD_INT 1
52554: PUSH
52555: LD_INT 1
52557: NEG
52558: PUSH
52559: EMPTY
52560: LIST
52561: LIST
52562: PUSH
52563: LD_INT 2
52565: NEG
52566: PUSH
52567: LD_INT 1
52569: NEG
52570: PUSH
52571: EMPTY
52572: LIST
52573: LIST
52574: PUSH
52575: LD_INT 2
52577: NEG
52578: PUSH
52579: LD_INT 2
52581: NEG
52582: PUSH
52583: EMPTY
52584: LIST
52585: LIST
52586: PUSH
52587: EMPTY
52588: LIST
52589: LIST
52590: LIST
52591: LIST
52592: LIST
52593: LIST
52594: LIST
52595: LIST
52596: LIST
52597: LIST
52598: LIST
52599: LIST
52600: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
52601: LD_ADDR_VAR 0 48
52605: PUSH
52606: LD_INT 0
52608: PUSH
52609: LD_INT 0
52611: PUSH
52612: EMPTY
52613: LIST
52614: LIST
52615: PUSH
52616: LD_INT 0
52618: PUSH
52619: LD_INT 1
52621: NEG
52622: PUSH
52623: EMPTY
52624: LIST
52625: LIST
52626: PUSH
52627: LD_INT 1
52629: PUSH
52630: LD_INT 0
52632: PUSH
52633: EMPTY
52634: LIST
52635: LIST
52636: PUSH
52637: LD_INT 1
52639: PUSH
52640: LD_INT 1
52642: PUSH
52643: EMPTY
52644: LIST
52645: LIST
52646: PUSH
52647: LD_INT 0
52649: PUSH
52650: LD_INT 1
52652: PUSH
52653: EMPTY
52654: LIST
52655: LIST
52656: PUSH
52657: LD_INT 1
52659: NEG
52660: PUSH
52661: LD_INT 0
52663: PUSH
52664: EMPTY
52665: LIST
52666: LIST
52667: PUSH
52668: LD_INT 1
52670: NEG
52671: PUSH
52672: LD_INT 1
52674: NEG
52675: PUSH
52676: EMPTY
52677: LIST
52678: LIST
52679: PUSH
52680: LD_INT 1
52682: NEG
52683: PUSH
52684: LD_INT 2
52686: NEG
52687: PUSH
52688: EMPTY
52689: LIST
52690: LIST
52691: PUSH
52692: LD_INT 0
52694: PUSH
52695: LD_INT 2
52697: NEG
52698: PUSH
52699: EMPTY
52700: LIST
52701: LIST
52702: PUSH
52703: LD_INT 1
52705: PUSH
52706: LD_INT 1
52708: NEG
52709: PUSH
52710: EMPTY
52711: LIST
52712: LIST
52713: PUSH
52714: LD_INT 2
52716: PUSH
52717: LD_INT 0
52719: PUSH
52720: EMPTY
52721: LIST
52722: LIST
52723: PUSH
52724: LD_INT 2
52726: PUSH
52727: LD_INT 1
52729: PUSH
52730: EMPTY
52731: LIST
52732: LIST
52733: PUSH
52734: EMPTY
52735: LIST
52736: LIST
52737: LIST
52738: LIST
52739: LIST
52740: LIST
52741: LIST
52742: LIST
52743: LIST
52744: LIST
52745: LIST
52746: LIST
52747: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
52748: LD_ADDR_VAR 0 49
52752: PUSH
52753: LD_INT 0
52755: PUSH
52756: LD_INT 0
52758: PUSH
52759: EMPTY
52760: LIST
52761: LIST
52762: PUSH
52763: LD_INT 0
52765: PUSH
52766: LD_INT 1
52768: NEG
52769: PUSH
52770: EMPTY
52771: LIST
52772: LIST
52773: PUSH
52774: LD_INT 1
52776: PUSH
52777: LD_INT 0
52779: PUSH
52780: EMPTY
52781: LIST
52782: LIST
52783: PUSH
52784: LD_INT 1
52786: PUSH
52787: LD_INT 1
52789: PUSH
52790: EMPTY
52791: LIST
52792: LIST
52793: PUSH
52794: LD_INT 0
52796: PUSH
52797: LD_INT 1
52799: PUSH
52800: EMPTY
52801: LIST
52802: LIST
52803: PUSH
52804: LD_INT 1
52806: NEG
52807: PUSH
52808: LD_INT 0
52810: PUSH
52811: EMPTY
52812: LIST
52813: LIST
52814: PUSH
52815: LD_INT 1
52817: NEG
52818: PUSH
52819: LD_INT 1
52821: NEG
52822: PUSH
52823: EMPTY
52824: LIST
52825: LIST
52826: PUSH
52827: LD_INT 1
52829: PUSH
52830: LD_INT 1
52832: NEG
52833: PUSH
52834: EMPTY
52835: LIST
52836: LIST
52837: PUSH
52838: LD_INT 2
52840: PUSH
52841: LD_INT 0
52843: PUSH
52844: EMPTY
52845: LIST
52846: LIST
52847: PUSH
52848: LD_INT 2
52850: PUSH
52851: LD_INT 1
52853: PUSH
52854: EMPTY
52855: LIST
52856: LIST
52857: PUSH
52858: LD_INT 2
52860: PUSH
52861: LD_INT 2
52863: PUSH
52864: EMPTY
52865: LIST
52866: LIST
52867: PUSH
52868: LD_INT 1
52870: PUSH
52871: LD_INT 2
52873: PUSH
52874: EMPTY
52875: LIST
52876: LIST
52877: PUSH
52878: EMPTY
52879: LIST
52880: LIST
52881: LIST
52882: LIST
52883: LIST
52884: LIST
52885: LIST
52886: LIST
52887: LIST
52888: LIST
52889: LIST
52890: LIST
52891: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
52892: LD_ADDR_VAR 0 50
52896: PUSH
52897: LD_INT 0
52899: PUSH
52900: LD_INT 0
52902: PUSH
52903: EMPTY
52904: LIST
52905: LIST
52906: PUSH
52907: LD_INT 0
52909: PUSH
52910: LD_INT 1
52912: NEG
52913: PUSH
52914: EMPTY
52915: LIST
52916: LIST
52917: PUSH
52918: LD_INT 1
52920: PUSH
52921: LD_INT 0
52923: PUSH
52924: EMPTY
52925: LIST
52926: LIST
52927: PUSH
52928: LD_INT 1
52930: PUSH
52931: LD_INT 1
52933: PUSH
52934: EMPTY
52935: LIST
52936: LIST
52937: PUSH
52938: LD_INT 0
52940: PUSH
52941: LD_INT 1
52943: PUSH
52944: EMPTY
52945: LIST
52946: LIST
52947: PUSH
52948: LD_INT 1
52950: NEG
52951: PUSH
52952: LD_INT 0
52954: PUSH
52955: EMPTY
52956: LIST
52957: LIST
52958: PUSH
52959: LD_INT 1
52961: NEG
52962: PUSH
52963: LD_INT 1
52965: NEG
52966: PUSH
52967: EMPTY
52968: LIST
52969: LIST
52970: PUSH
52971: LD_INT 2
52973: PUSH
52974: LD_INT 1
52976: PUSH
52977: EMPTY
52978: LIST
52979: LIST
52980: PUSH
52981: LD_INT 2
52983: PUSH
52984: LD_INT 2
52986: PUSH
52987: EMPTY
52988: LIST
52989: LIST
52990: PUSH
52991: LD_INT 1
52993: PUSH
52994: LD_INT 2
52996: PUSH
52997: EMPTY
52998: LIST
52999: LIST
53000: PUSH
53001: LD_INT 0
53003: PUSH
53004: LD_INT 2
53006: PUSH
53007: EMPTY
53008: LIST
53009: LIST
53010: PUSH
53011: LD_INT 1
53013: NEG
53014: PUSH
53015: LD_INT 1
53017: PUSH
53018: EMPTY
53019: LIST
53020: LIST
53021: PUSH
53022: EMPTY
53023: LIST
53024: LIST
53025: LIST
53026: LIST
53027: LIST
53028: LIST
53029: LIST
53030: LIST
53031: LIST
53032: LIST
53033: LIST
53034: LIST
53035: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
53036: LD_ADDR_VAR 0 51
53040: PUSH
53041: LD_INT 0
53043: PUSH
53044: LD_INT 0
53046: PUSH
53047: EMPTY
53048: LIST
53049: LIST
53050: PUSH
53051: LD_INT 0
53053: PUSH
53054: LD_INT 1
53056: NEG
53057: PUSH
53058: EMPTY
53059: LIST
53060: LIST
53061: PUSH
53062: LD_INT 1
53064: PUSH
53065: LD_INT 0
53067: PUSH
53068: EMPTY
53069: LIST
53070: LIST
53071: PUSH
53072: LD_INT 1
53074: PUSH
53075: LD_INT 1
53077: PUSH
53078: EMPTY
53079: LIST
53080: LIST
53081: PUSH
53082: LD_INT 0
53084: PUSH
53085: LD_INT 1
53087: PUSH
53088: EMPTY
53089: LIST
53090: LIST
53091: PUSH
53092: LD_INT 1
53094: NEG
53095: PUSH
53096: LD_INT 0
53098: PUSH
53099: EMPTY
53100: LIST
53101: LIST
53102: PUSH
53103: LD_INT 1
53105: NEG
53106: PUSH
53107: LD_INT 1
53109: NEG
53110: PUSH
53111: EMPTY
53112: LIST
53113: LIST
53114: PUSH
53115: LD_INT 1
53117: PUSH
53118: LD_INT 2
53120: PUSH
53121: EMPTY
53122: LIST
53123: LIST
53124: PUSH
53125: LD_INT 0
53127: PUSH
53128: LD_INT 2
53130: PUSH
53131: EMPTY
53132: LIST
53133: LIST
53134: PUSH
53135: LD_INT 1
53137: NEG
53138: PUSH
53139: LD_INT 1
53141: PUSH
53142: EMPTY
53143: LIST
53144: LIST
53145: PUSH
53146: LD_INT 2
53148: NEG
53149: PUSH
53150: LD_INT 0
53152: PUSH
53153: EMPTY
53154: LIST
53155: LIST
53156: PUSH
53157: LD_INT 2
53159: NEG
53160: PUSH
53161: LD_INT 1
53163: NEG
53164: PUSH
53165: EMPTY
53166: LIST
53167: LIST
53168: PUSH
53169: EMPTY
53170: LIST
53171: LIST
53172: LIST
53173: LIST
53174: LIST
53175: LIST
53176: LIST
53177: LIST
53178: LIST
53179: LIST
53180: LIST
53181: LIST
53182: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53183: LD_ADDR_VAR 0 52
53187: PUSH
53188: LD_INT 0
53190: PUSH
53191: LD_INT 0
53193: PUSH
53194: EMPTY
53195: LIST
53196: LIST
53197: PUSH
53198: LD_INT 0
53200: PUSH
53201: LD_INT 1
53203: NEG
53204: PUSH
53205: EMPTY
53206: LIST
53207: LIST
53208: PUSH
53209: LD_INT 1
53211: PUSH
53212: LD_INT 0
53214: PUSH
53215: EMPTY
53216: LIST
53217: LIST
53218: PUSH
53219: LD_INT 1
53221: PUSH
53222: LD_INT 1
53224: PUSH
53225: EMPTY
53226: LIST
53227: LIST
53228: PUSH
53229: LD_INT 0
53231: PUSH
53232: LD_INT 1
53234: PUSH
53235: EMPTY
53236: LIST
53237: LIST
53238: PUSH
53239: LD_INT 1
53241: NEG
53242: PUSH
53243: LD_INT 0
53245: PUSH
53246: EMPTY
53247: LIST
53248: LIST
53249: PUSH
53250: LD_INT 1
53252: NEG
53253: PUSH
53254: LD_INT 1
53256: NEG
53257: PUSH
53258: EMPTY
53259: LIST
53260: LIST
53261: PUSH
53262: LD_INT 1
53264: NEG
53265: PUSH
53266: LD_INT 2
53268: NEG
53269: PUSH
53270: EMPTY
53271: LIST
53272: LIST
53273: PUSH
53274: LD_INT 1
53276: NEG
53277: PUSH
53278: LD_INT 1
53280: PUSH
53281: EMPTY
53282: LIST
53283: LIST
53284: PUSH
53285: LD_INT 2
53287: NEG
53288: PUSH
53289: LD_INT 0
53291: PUSH
53292: EMPTY
53293: LIST
53294: LIST
53295: PUSH
53296: LD_INT 2
53298: NEG
53299: PUSH
53300: LD_INT 1
53302: NEG
53303: PUSH
53304: EMPTY
53305: LIST
53306: LIST
53307: PUSH
53308: LD_INT 2
53310: NEG
53311: PUSH
53312: LD_INT 2
53314: NEG
53315: PUSH
53316: EMPTY
53317: LIST
53318: LIST
53319: PUSH
53320: EMPTY
53321: LIST
53322: LIST
53323: LIST
53324: LIST
53325: LIST
53326: LIST
53327: LIST
53328: LIST
53329: LIST
53330: LIST
53331: LIST
53332: LIST
53333: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53334: LD_ADDR_VAR 0 53
53338: PUSH
53339: LD_INT 0
53341: PUSH
53342: LD_INT 0
53344: PUSH
53345: EMPTY
53346: LIST
53347: LIST
53348: PUSH
53349: LD_INT 0
53351: PUSH
53352: LD_INT 1
53354: NEG
53355: PUSH
53356: EMPTY
53357: LIST
53358: LIST
53359: PUSH
53360: LD_INT 1
53362: PUSH
53363: LD_INT 0
53365: PUSH
53366: EMPTY
53367: LIST
53368: LIST
53369: PUSH
53370: LD_INT 1
53372: PUSH
53373: LD_INT 1
53375: PUSH
53376: EMPTY
53377: LIST
53378: LIST
53379: PUSH
53380: LD_INT 0
53382: PUSH
53383: LD_INT 1
53385: PUSH
53386: EMPTY
53387: LIST
53388: LIST
53389: PUSH
53390: LD_INT 1
53392: NEG
53393: PUSH
53394: LD_INT 0
53396: PUSH
53397: EMPTY
53398: LIST
53399: LIST
53400: PUSH
53401: LD_INT 1
53403: NEG
53404: PUSH
53405: LD_INT 1
53407: NEG
53408: PUSH
53409: EMPTY
53410: LIST
53411: LIST
53412: PUSH
53413: LD_INT 1
53415: NEG
53416: PUSH
53417: LD_INT 2
53419: NEG
53420: PUSH
53421: EMPTY
53422: LIST
53423: LIST
53424: PUSH
53425: LD_INT 0
53427: PUSH
53428: LD_INT 2
53430: NEG
53431: PUSH
53432: EMPTY
53433: LIST
53434: LIST
53435: PUSH
53436: LD_INT 1
53438: PUSH
53439: LD_INT 1
53441: NEG
53442: PUSH
53443: EMPTY
53444: LIST
53445: LIST
53446: PUSH
53447: LD_INT 2
53449: PUSH
53450: LD_INT 0
53452: PUSH
53453: EMPTY
53454: LIST
53455: LIST
53456: PUSH
53457: LD_INT 2
53459: PUSH
53460: LD_INT 1
53462: PUSH
53463: EMPTY
53464: LIST
53465: LIST
53466: PUSH
53467: LD_INT 2
53469: PUSH
53470: LD_INT 2
53472: PUSH
53473: EMPTY
53474: LIST
53475: LIST
53476: PUSH
53477: LD_INT 1
53479: PUSH
53480: LD_INT 2
53482: PUSH
53483: EMPTY
53484: LIST
53485: LIST
53486: PUSH
53487: LD_INT 0
53489: PUSH
53490: LD_INT 2
53492: PUSH
53493: EMPTY
53494: LIST
53495: LIST
53496: PUSH
53497: LD_INT 1
53499: NEG
53500: PUSH
53501: LD_INT 1
53503: PUSH
53504: EMPTY
53505: LIST
53506: LIST
53507: PUSH
53508: LD_INT 2
53510: NEG
53511: PUSH
53512: LD_INT 0
53514: PUSH
53515: EMPTY
53516: LIST
53517: LIST
53518: PUSH
53519: LD_INT 2
53521: NEG
53522: PUSH
53523: LD_INT 1
53525: NEG
53526: PUSH
53527: EMPTY
53528: LIST
53529: LIST
53530: PUSH
53531: LD_INT 2
53533: NEG
53534: PUSH
53535: LD_INT 2
53537: NEG
53538: PUSH
53539: EMPTY
53540: LIST
53541: LIST
53542: PUSH
53543: EMPTY
53544: LIST
53545: LIST
53546: LIST
53547: LIST
53548: LIST
53549: LIST
53550: LIST
53551: LIST
53552: LIST
53553: LIST
53554: LIST
53555: LIST
53556: LIST
53557: LIST
53558: LIST
53559: LIST
53560: LIST
53561: LIST
53562: LIST
53563: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53564: LD_ADDR_VAR 0 54
53568: PUSH
53569: LD_INT 0
53571: PUSH
53572: LD_INT 0
53574: PUSH
53575: EMPTY
53576: LIST
53577: LIST
53578: PUSH
53579: LD_INT 0
53581: PUSH
53582: LD_INT 1
53584: NEG
53585: PUSH
53586: EMPTY
53587: LIST
53588: LIST
53589: PUSH
53590: LD_INT 1
53592: PUSH
53593: LD_INT 0
53595: PUSH
53596: EMPTY
53597: LIST
53598: LIST
53599: PUSH
53600: LD_INT 1
53602: PUSH
53603: LD_INT 1
53605: PUSH
53606: EMPTY
53607: LIST
53608: LIST
53609: PUSH
53610: LD_INT 0
53612: PUSH
53613: LD_INT 1
53615: PUSH
53616: EMPTY
53617: LIST
53618: LIST
53619: PUSH
53620: LD_INT 1
53622: NEG
53623: PUSH
53624: LD_INT 0
53626: PUSH
53627: EMPTY
53628: LIST
53629: LIST
53630: PUSH
53631: LD_INT 1
53633: NEG
53634: PUSH
53635: LD_INT 1
53637: NEG
53638: PUSH
53639: EMPTY
53640: LIST
53641: LIST
53642: PUSH
53643: LD_INT 1
53645: NEG
53646: PUSH
53647: LD_INT 2
53649: NEG
53650: PUSH
53651: EMPTY
53652: LIST
53653: LIST
53654: PUSH
53655: LD_INT 0
53657: PUSH
53658: LD_INT 2
53660: NEG
53661: PUSH
53662: EMPTY
53663: LIST
53664: LIST
53665: PUSH
53666: LD_INT 1
53668: PUSH
53669: LD_INT 1
53671: NEG
53672: PUSH
53673: EMPTY
53674: LIST
53675: LIST
53676: PUSH
53677: LD_INT 2
53679: PUSH
53680: LD_INT 0
53682: PUSH
53683: EMPTY
53684: LIST
53685: LIST
53686: PUSH
53687: LD_INT 2
53689: PUSH
53690: LD_INT 1
53692: PUSH
53693: EMPTY
53694: LIST
53695: LIST
53696: PUSH
53697: LD_INT 2
53699: PUSH
53700: LD_INT 2
53702: PUSH
53703: EMPTY
53704: LIST
53705: LIST
53706: PUSH
53707: LD_INT 1
53709: PUSH
53710: LD_INT 2
53712: PUSH
53713: EMPTY
53714: LIST
53715: LIST
53716: PUSH
53717: LD_INT 0
53719: PUSH
53720: LD_INT 2
53722: PUSH
53723: EMPTY
53724: LIST
53725: LIST
53726: PUSH
53727: LD_INT 1
53729: NEG
53730: PUSH
53731: LD_INT 1
53733: PUSH
53734: EMPTY
53735: LIST
53736: LIST
53737: PUSH
53738: LD_INT 2
53740: NEG
53741: PUSH
53742: LD_INT 0
53744: PUSH
53745: EMPTY
53746: LIST
53747: LIST
53748: PUSH
53749: LD_INT 2
53751: NEG
53752: PUSH
53753: LD_INT 1
53755: NEG
53756: PUSH
53757: EMPTY
53758: LIST
53759: LIST
53760: PUSH
53761: LD_INT 2
53763: NEG
53764: PUSH
53765: LD_INT 2
53767: NEG
53768: PUSH
53769: EMPTY
53770: LIST
53771: LIST
53772: PUSH
53773: EMPTY
53774: LIST
53775: LIST
53776: LIST
53777: LIST
53778: LIST
53779: LIST
53780: LIST
53781: LIST
53782: LIST
53783: LIST
53784: LIST
53785: LIST
53786: LIST
53787: LIST
53788: LIST
53789: LIST
53790: LIST
53791: LIST
53792: LIST
53793: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53794: LD_ADDR_VAR 0 55
53798: PUSH
53799: LD_INT 0
53801: PUSH
53802: LD_INT 0
53804: PUSH
53805: EMPTY
53806: LIST
53807: LIST
53808: PUSH
53809: LD_INT 0
53811: PUSH
53812: LD_INT 1
53814: NEG
53815: PUSH
53816: EMPTY
53817: LIST
53818: LIST
53819: PUSH
53820: LD_INT 1
53822: PUSH
53823: LD_INT 0
53825: PUSH
53826: EMPTY
53827: LIST
53828: LIST
53829: PUSH
53830: LD_INT 1
53832: PUSH
53833: LD_INT 1
53835: PUSH
53836: EMPTY
53837: LIST
53838: LIST
53839: PUSH
53840: LD_INT 0
53842: PUSH
53843: LD_INT 1
53845: PUSH
53846: EMPTY
53847: LIST
53848: LIST
53849: PUSH
53850: LD_INT 1
53852: NEG
53853: PUSH
53854: LD_INT 0
53856: PUSH
53857: EMPTY
53858: LIST
53859: LIST
53860: PUSH
53861: LD_INT 1
53863: NEG
53864: PUSH
53865: LD_INT 1
53867: NEG
53868: PUSH
53869: EMPTY
53870: LIST
53871: LIST
53872: PUSH
53873: LD_INT 1
53875: NEG
53876: PUSH
53877: LD_INT 2
53879: NEG
53880: PUSH
53881: EMPTY
53882: LIST
53883: LIST
53884: PUSH
53885: LD_INT 0
53887: PUSH
53888: LD_INT 2
53890: NEG
53891: PUSH
53892: EMPTY
53893: LIST
53894: LIST
53895: PUSH
53896: LD_INT 1
53898: PUSH
53899: LD_INT 1
53901: NEG
53902: PUSH
53903: EMPTY
53904: LIST
53905: LIST
53906: PUSH
53907: LD_INT 2
53909: PUSH
53910: LD_INT 0
53912: PUSH
53913: EMPTY
53914: LIST
53915: LIST
53916: PUSH
53917: LD_INT 2
53919: PUSH
53920: LD_INT 1
53922: PUSH
53923: EMPTY
53924: LIST
53925: LIST
53926: PUSH
53927: LD_INT 2
53929: PUSH
53930: LD_INT 2
53932: PUSH
53933: EMPTY
53934: LIST
53935: LIST
53936: PUSH
53937: LD_INT 1
53939: PUSH
53940: LD_INT 2
53942: PUSH
53943: EMPTY
53944: LIST
53945: LIST
53946: PUSH
53947: LD_INT 0
53949: PUSH
53950: LD_INT 2
53952: PUSH
53953: EMPTY
53954: LIST
53955: LIST
53956: PUSH
53957: LD_INT 1
53959: NEG
53960: PUSH
53961: LD_INT 1
53963: PUSH
53964: EMPTY
53965: LIST
53966: LIST
53967: PUSH
53968: LD_INT 2
53970: NEG
53971: PUSH
53972: LD_INT 0
53974: PUSH
53975: EMPTY
53976: LIST
53977: LIST
53978: PUSH
53979: LD_INT 2
53981: NEG
53982: PUSH
53983: LD_INT 1
53985: NEG
53986: PUSH
53987: EMPTY
53988: LIST
53989: LIST
53990: PUSH
53991: LD_INT 2
53993: NEG
53994: PUSH
53995: LD_INT 2
53997: NEG
53998: PUSH
53999: EMPTY
54000: LIST
54001: LIST
54002: PUSH
54003: EMPTY
54004: LIST
54005: LIST
54006: LIST
54007: LIST
54008: LIST
54009: LIST
54010: LIST
54011: LIST
54012: LIST
54013: LIST
54014: LIST
54015: LIST
54016: LIST
54017: LIST
54018: LIST
54019: LIST
54020: LIST
54021: LIST
54022: LIST
54023: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54024: LD_ADDR_VAR 0 56
54028: PUSH
54029: LD_INT 0
54031: PUSH
54032: LD_INT 0
54034: PUSH
54035: EMPTY
54036: LIST
54037: LIST
54038: PUSH
54039: LD_INT 0
54041: PUSH
54042: LD_INT 1
54044: NEG
54045: PUSH
54046: EMPTY
54047: LIST
54048: LIST
54049: PUSH
54050: LD_INT 1
54052: PUSH
54053: LD_INT 0
54055: PUSH
54056: EMPTY
54057: LIST
54058: LIST
54059: PUSH
54060: LD_INT 1
54062: PUSH
54063: LD_INT 1
54065: PUSH
54066: EMPTY
54067: LIST
54068: LIST
54069: PUSH
54070: LD_INT 0
54072: PUSH
54073: LD_INT 1
54075: PUSH
54076: EMPTY
54077: LIST
54078: LIST
54079: PUSH
54080: LD_INT 1
54082: NEG
54083: PUSH
54084: LD_INT 0
54086: PUSH
54087: EMPTY
54088: LIST
54089: LIST
54090: PUSH
54091: LD_INT 1
54093: NEG
54094: PUSH
54095: LD_INT 1
54097: NEG
54098: PUSH
54099: EMPTY
54100: LIST
54101: LIST
54102: PUSH
54103: LD_INT 1
54105: NEG
54106: PUSH
54107: LD_INT 2
54109: NEG
54110: PUSH
54111: EMPTY
54112: LIST
54113: LIST
54114: PUSH
54115: LD_INT 0
54117: PUSH
54118: LD_INT 2
54120: NEG
54121: PUSH
54122: EMPTY
54123: LIST
54124: LIST
54125: PUSH
54126: LD_INT 1
54128: PUSH
54129: LD_INT 1
54131: NEG
54132: PUSH
54133: EMPTY
54134: LIST
54135: LIST
54136: PUSH
54137: LD_INT 2
54139: PUSH
54140: LD_INT 0
54142: PUSH
54143: EMPTY
54144: LIST
54145: LIST
54146: PUSH
54147: LD_INT 2
54149: PUSH
54150: LD_INT 1
54152: PUSH
54153: EMPTY
54154: LIST
54155: LIST
54156: PUSH
54157: LD_INT 2
54159: PUSH
54160: LD_INT 2
54162: PUSH
54163: EMPTY
54164: LIST
54165: LIST
54166: PUSH
54167: LD_INT 1
54169: PUSH
54170: LD_INT 2
54172: PUSH
54173: EMPTY
54174: LIST
54175: LIST
54176: PUSH
54177: LD_INT 0
54179: PUSH
54180: LD_INT 2
54182: PUSH
54183: EMPTY
54184: LIST
54185: LIST
54186: PUSH
54187: LD_INT 1
54189: NEG
54190: PUSH
54191: LD_INT 1
54193: PUSH
54194: EMPTY
54195: LIST
54196: LIST
54197: PUSH
54198: LD_INT 2
54200: NEG
54201: PUSH
54202: LD_INT 0
54204: PUSH
54205: EMPTY
54206: LIST
54207: LIST
54208: PUSH
54209: LD_INT 2
54211: NEG
54212: PUSH
54213: LD_INT 1
54215: NEG
54216: PUSH
54217: EMPTY
54218: LIST
54219: LIST
54220: PUSH
54221: LD_INT 2
54223: NEG
54224: PUSH
54225: LD_INT 2
54227: NEG
54228: PUSH
54229: EMPTY
54230: LIST
54231: LIST
54232: PUSH
54233: EMPTY
54234: LIST
54235: LIST
54236: LIST
54237: LIST
54238: LIST
54239: LIST
54240: LIST
54241: LIST
54242: LIST
54243: LIST
54244: LIST
54245: LIST
54246: LIST
54247: LIST
54248: LIST
54249: LIST
54250: LIST
54251: LIST
54252: LIST
54253: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54254: LD_ADDR_VAR 0 57
54258: PUSH
54259: LD_INT 0
54261: PUSH
54262: LD_INT 0
54264: PUSH
54265: EMPTY
54266: LIST
54267: LIST
54268: PUSH
54269: LD_INT 0
54271: PUSH
54272: LD_INT 1
54274: NEG
54275: PUSH
54276: EMPTY
54277: LIST
54278: LIST
54279: PUSH
54280: LD_INT 1
54282: PUSH
54283: LD_INT 0
54285: PUSH
54286: EMPTY
54287: LIST
54288: LIST
54289: PUSH
54290: LD_INT 1
54292: PUSH
54293: LD_INT 1
54295: PUSH
54296: EMPTY
54297: LIST
54298: LIST
54299: PUSH
54300: LD_INT 0
54302: PUSH
54303: LD_INT 1
54305: PUSH
54306: EMPTY
54307: LIST
54308: LIST
54309: PUSH
54310: LD_INT 1
54312: NEG
54313: PUSH
54314: LD_INT 0
54316: PUSH
54317: EMPTY
54318: LIST
54319: LIST
54320: PUSH
54321: LD_INT 1
54323: NEG
54324: PUSH
54325: LD_INT 1
54327: NEG
54328: PUSH
54329: EMPTY
54330: LIST
54331: LIST
54332: PUSH
54333: LD_INT 1
54335: NEG
54336: PUSH
54337: LD_INT 2
54339: NEG
54340: PUSH
54341: EMPTY
54342: LIST
54343: LIST
54344: PUSH
54345: LD_INT 0
54347: PUSH
54348: LD_INT 2
54350: NEG
54351: PUSH
54352: EMPTY
54353: LIST
54354: LIST
54355: PUSH
54356: LD_INT 1
54358: PUSH
54359: LD_INT 1
54361: NEG
54362: PUSH
54363: EMPTY
54364: LIST
54365: LIST
54366: PUSH
54367: LD_INT 2
54369: PUSH
54370: LD_INT 0
54372: PUSH
54373: EMPTY
54374: LIST
54375: LIST
54376: PUSH
54377: LD_INT 2
54379: PUSH
54380: LD_INT 1
54382: PUSH
54383: EMPTY
54384: LIST
54385: LIST
54386: PUSH
54387: LD_INT 2
54389: PUSH
54390: LD_INT 2
54392: PUSH
54393: EMPTY
54394: LIST
54395: LIST
54396: PUSH
54397: LD_INT 1
54399: PUSH
54400: LD_INT 2
54402: PUSH
54403: EMPTY
54404: LIST
54405: LIST
54406: PUSH
54407: LD_INT 0
54409: PUSH
54410: LD_INT 2
54412: PUSH
54413: EMPTY
54414: LIST
54415: LIST
54416: PUSH
54417: LD_INT 1
54419: NEG
54420: PUSH
54421: LD_INT 1
54423: PUSH
54424: EMPTY
54425: LIST
54426: LIST
54427: PUSH
54428: LD_INT 2
54430: NEG
54431: PUSH
54432: LD_INT 0
54434: PUSH
54435: EMPTY
54436: LIST
54437: LIST
54438: PUSH
54439: LD_INT 2
54441: NEG
54442: PUSH
54443: LD_INT 1
54445: NEG
54446: PUSH
54447: EMPTY
54448: LIST
54449: LIST
54450: PUSH
54451: LD_INT 2
54453: NEG
54454: PUSH
54455: LD_INT 2
54457: NEG
54458: PUSH
54459: EMPTY
54460: LIST
54461: LIST
54462: PUSH
54463: EMPTY
54464: LIST
54465: LIST
54466: LIST
54467: LIST
54468: LIST
54469: LIST
54470: LIST
54471: LIST
54472: LIST
54473: LIST
54474: LIST
54475: LIST
54476: LIST
54477: LIST
54478: LIST
54479: LIST
54480: LIST
54481: LIST
54482: LIST
54483: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54484: LD_ADDR_VAR 0 58
54488: PUSH
54489: LD_INT 0
54491: PUSH
54492: LD_INT 0
54494: PUSH
54495: EMPTY
54496: LIST
54497: LIST
54498: PUSH
54499: LD_INT 0
54501: PUSH
54502: LD_INT 1
54504: NEG
54505: PUSH
54506: EMPTY
54507: LIST
54508: LIST
54509: PUSH
54510: LD_INT 1
54512: PUSH
54513: LD_INT 0
54515: PUSH
54516: EMPTY
54517: LIST
54518: LIST
54519: PUSH
54520: LD_INT 1
54522: PUSH
54523: LD_INT 1
54525: PUSH
54526: EMPTY
54527: LIST
54528: LIST
54529: PUSH
54530: LD_INT 0
54532: PUSH
54533: LD_INT 1
54535: PUSH
54536: EMPTY
54537: LIST
54538: LIST
54539: PUSH
54540: LD_INT 1
54542: NEG
54543: PUSH
54544: LD_INT 0
54546: PUSH
54547: EMPTY
54548: LIST
54549: LIST
54550: PUSH
54551: LD_INT 1
54553: NEG
54554: PUSH
54555: LD_INT 1
54557: NEG
54558: PUSH
54559: EMPTY
54560: LIST
54561: LIST
54562: PUSH
54563: LD_INT 1
54565: NEG
54566: PUSH
54567: LD_INT 2
54569: NEG
54570: PUSH
54571: EMPTY
54572: LIST
54573: LIST
54574: PUSH
54575: LD_INT 0
54577: PUSH
54578: LD_INT 2
54580: NEG
54581: PUSH
54582: EMPTY
54583: LIST
54584: LIST
54585: PUSH
54586: LD_INT 1
54588: PUSH
54589: LD_INT 1
54591: NEG
54592: PUSH
54593: EMPTY
54594: LIST
54595: LIST
54596: PUSH
54597: LD_INT 2
54599: PUSH
54600: LD_INT 0
54602: PUSH
54603: EMPTY
54604: LIST
54605: LIST
54606: PUSH
54607: LD_INT 2
54609: PUSH
54610: LD_INT 1
54612: PUSH
54613: EMPTY
54614: LIST
54615: LIST
54616: PUSH
54617: LD_INT 2
54619: PUSH
54620: LD_INT 2
54622: PUSH
54623: EMPTY
54624: LIST
54625: LIST
54626: PUSH
54627: LD_INT 1
54629: PUSH
54630: LD_INT 2
54632: PUSH
54633: EMPTY
54634: LIST
54635: LIST
54636: PUSH
54637: LD_INT 0
54639: PUSH
54640: LD_INT 2
54642: PUSH
54643: EMPTY
54644: LIST
54645: LIST
54646: PUSH
54647: LD_INT 1
54649: NEG
54650: PUSH
54651: LD_INT 1
54653: PUSH
54654: EMPTY
54655: LIST
54656: LIST
54657: PUSH
54658: LD_INT 2
54660: NEG
54661: PUSH
54662: LD_INT 0
54664: PUSH
54665: EMPTY
54666: LIST
54667: LIST
54668: PUSH
54669: LD_INT 2
54671: NEG
54672: PUSH
54673: LD_INT 1
54675: NEG
54676: PUSH
54677: EMPTY
54678: LIST
54679: LIST
54680: PUSH
54681: LD_INT 2
54683: NEG
54684: PUSH
54685: LD_INT 2
54687: NEG
54688: PUSH
54689: EMPTY
54690: LIST
54691: LIST
54692: PUSH
54693: EMPTY
54694: LIST
54695: LIST
54696: LIST
54697: LIST
54698: LIST
54699: LIST
54700: LIST
54701: LIST
54702: LIST
54703: LIST
54704: LIST
54705: LIST
54706: LIST
54707: LIST
54708: LIST
54709: LIST
54710: LIST
54711: LIST
54712: LIST
54713: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54714: LD_ADDR_VAR 0 59
54718: PUSH
54719: LD_INT 0
54721: PUSH
54722: LD_INT 0
54724: PUSH
54725: EMPTY
54726: LIST
54727: LIST
54728: PUSH
54729: LD_INT 0
54731: PUSH
54732: LD_INT 1
54734: NEG
54735: PUSH
54736: EMPTY
54737: LIST
54738: LIST
54739: PUSH
54740: LD_INT 1
54742: PUSH
54743: LD_INT 0
54745: PUSH
54746: EMPTY
54747: LIST
54748: LIST
54749: PUSH
54750: LD_INT 1
54752: PUSH
54753: LD_INT 1
54755: PUSH
54756: EMPTY
54757: LIST
54758: LIST
54759: PUSH
54760: LD_INT 0
54762: PUSH
54763: LD_INT 1
54765: PUSH
54766: EMPTY
54767: LIST
54768: LIST
54769: PUSH
54770: LD_INT 1
54772: NEG
54773: PUSH
54774: LD_INT 0
54776: PUSH
54777: EMPTY
54778: LIST
54779: LIST
54780: PUSH
54781: LD_INT 1
54783: NEG
54784: PUSH
54785: LD_INT 1
54787: NEG
54788: PUSH
54789: EMPTY
54790: LIST
54791: LIST
54792: PUSH
54793: EMPTY
54794: LIST
54795: LIST
54796: LIST
54797: LIST
54798: LIST
54799: LIST
54800: LIST
54801: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54802: LD_ADDR_VAR 0 60
54806: PUSH
54807: LD_INT 0
54809: PUSH
54810: LD_INT 0
54812: PUSH
54813: EMPTY
54814: LIST
54815: LIST
54816: PUSH
54817: LD_INT 0
54819: PUSH
54820: LD_INT 1
54822: NEG
54823: PUSH
54824: EMPTY
54825: LIST
54826: LIST
54827: PUSH
54828: LD_INT 1
54830: PUSH
54831: LD_INT 0
54833: PUSH
54834: EMPTY
54835: LIST
54836: LIST
54837: PUSH
54838: LD_INT 1
54840: PUSH
54841: LD_INT 1
54843: PUSH
54844: EMPTY
54845: LIST
54846: LIST
54847: PUSH
54848: LD_INT 0
54850: PUSH
54851: LD_INT 1
54853: PUSH
54854: EMPTY
54855: LIST
54856: LIST
54857: PUSH
54858: LD_INT 1
54860: NEG
54861: PUSH
54862: LD_INT 0
54864: PUSH
54865: EMPTY
54866: LIST
54867: LIST
54868: PUSH
54869: LD_INT 1
54871: NEG
54872: PUSH
54873: LD_INT 1
54875: NEG
54876: PUSH
54877: EMPTY
54878: LIST
54879: LIST
54880: PUSH
54881: EMPTY
54882: LIST
54883: LIST
54884: LIST
54885: LIST
54886: LIST
54887: LIST
54888: LIST
54889: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54890: LD_ADDR_VAR 0 61
54894: PUSH
54895: LD_INT 0
54897: PUSH
54898: LD_INT 0
54900: PUSH
54901: EMPTY
54902: LIST
54903: LIST
54904: PUSH
54905: LD_INT 0
54907: PUSH
54908: LD_INT 1
54910: NEG
54911: PUSH
54912: EMPTY
54913: LIST
54914: LIST
54915: PUSH
54916: LD_INT 1
54918: PUSH
54919: LD_INT 0
54921: PUSH
54922: EMPTY
54923: LIST
54924: LIST
54925: PUSH
54926: LD_INT 1
54928: PUSH
54929: LD_INT 1
54931: PUSH
54932: EMPTY
54933: LIST
54934: LIST
54935: PUSH
54936: LD_INT 0
54938: PUSH
54939: LD_INT 1
54941: PUSH
54942: EMPTY
54943: LIST
54944: LIST
54945: PUSH
54946: LD_INT 1
54948: NEG
54949: PUSH
54950: LD_INT 0
54952: PUSH
54953: EMPTY
54954: LIST
54955: LIST
54956: PUSH
54957: LD_INT 1
54959: NEG
54960: PUSH
54961: LD_INT 1
54963: NEG
54964: PUSH
54965: EMPTY
54966: LIST
54967: LIST
54968: PUSH
54969: EMPTY
54970: LIST
54971: LIST
54972: LIST
54973: LIST
54974: LIST
54975: LIST
54976: LIST
54977: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54978: LD_ADDR_VAR 0 62
54982: PUSH
54983: LD_INT 0
54985: PUSH
54986: LD_INT 0
54988: PUSH
54989: EMPTY
54990: LIST
54991: LIST
54992: PUSH
54993: LD_INT 0
54995: PUSH
54996: LD_INT 1
54998: NEG
54999: PUSH
55000: EMPTY
55001: LIST
55002: LIST
55003: PUSH
55004: LD_INT 1
55006: PUSH
55007: LD_INT 0
55009: PUSH
55010: EMPTY
55011: LIST
55012: LIST
55013: PUSH
55014: LD_INT 1
55016: PUSH
55017: LD_INT 1
55019: PUSH
55020: EMPTY
55021: LIST
55022: LIST
55023: PUSH
55024: LD_INT 0
55026: PUSH
55027: LD_INT 1
55029: PUSH
55030: EMPTY
55031: LIST
55032: LIST
55033: PUSH
55034: LD_INT 1
55036: NEG
55037: PUSH
55038: LD_INT 0
55040: PUSH
55041: EMPTY
55042: LIST
55043: LIST
55044: PUSH
55045: LD_INT 1
55047: NEG
55048: PUSH
55049: LD_INT 1
55051: NEG
55052: PUSH
55053: EMPTY
55054: LIST
55055: LIST
55056: PUSH
55057: EMPTY
55058: LIST
55059: LIST
55060: LIST
55061: LIST
55062: LIST
55063: LIST
55064: LIST
55065: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55066: LD_ADDR_VAR 0 63
55070: PUSH
55071: LD_INT 0
55073: PUSH
55074: LD_INT 0
55076: PUSH
55077: EMPTY
55078: LIST
55079: LIST
55080: PUSH
55081: LD_INT 0
55083: PUSH
55084: LD_INT 1
55086: NEG
55087: PUSH
55088: EMPTY
55089: LIST
55090: LIST
55091: PUSH
55092: LD_INT 1
55094: PUSH
55095: LD_INT 0
55097: PUSH
55098: EMPTY
55099: LIST
55100: LIST
55101: PUSH
55102: LD_INT 1
55104: PUSH
55105: LD_INT 1
55107: PUSH
55108: EMPTY
55109: LIST
55110: LIST
55111: PUSH
55112: LD_INT 0
55114: PUSH
55115: LD_INT 1
55117: PUSH
55118: EMPTY
55119: LIST
55120: LIST
55121: PUSH
55122: LD_INT 1
55124: NEG
55125: PUSH
55126: LD_INT 0
55128: PUSH
55129: EMPTY
55130: LIST
55131: LIST
55132: PUSH
55133: LD_INT 1
55135: NEG
55136: PUSH
55137: LD_INT 1
55139: NEG
55140: PUSH
55141: EMPTY
55142: LIST
55143: LIST
55144: PUSH
55145: EMPTY
55146: LIST
55147: LIST
55148: LIST
55149: LIST
55150: LIST
55151: LIST
55152: LIST
55153: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55154: LD_ADDR_VAR 0 64
55158: PUSH
55159: LD_INT 0
55161: PUSH
55162: LD_INT 0
55164: PUSH
55165: EMPTY
55166: LIST
55167: LIST
55168: PUSH
55169: LD_INT 0
55171: PUSH
55172: LD_INT 1
55174: NEG
55175: PUSH
55176: EMPTY
55177: LIST
55178: LIST
55179: PUSH
55180: LD_INT 1
55182: PUSH
55183: LD_INT 0
55185: PUSH
55186: EMPTY
55187: LIST
55188: LIST
55189: PUSH
55190: LD_INT 1
55192: PUSH
55193: LD_INT 1
55195: PUSH
55196: EMPTY
55197: LIST
55198: LIST
55199: PUSH
55200: LD_INT 0
55202: PUSH
55203: LD_INT 1
55205: PUSH
55206: EMPTY
55207: LIST
55208: LIST
55209: PUSH
55210: LD_INT 1
55212: NEG
55213: PUSH
55214: LD_INT 0
55216: PUSH
55217: EMPTY
55218: LIST
55219: LIST
55220: PUSH
55221: LD_INT 1
55223: NEG
55224: PUSH
55225: LD_INT 1
55227: NEG
55228: PUSH
55229: EMPTY
55230: LIST
55231: LIST
55232: PUSH
55233: EMPTY
55234: LIST
55235: LIST
55236: LIST
55237: LIST
55238: LIST
55239: LIST
55240: LIST
55241: ST_TO_ADDR
// end ; 1 :
55242: GO 61139
55244: LD_INT 1
55246: DOUBLE
55247: EQUAL
55248: IFTRUE 55252
55250: GO 57875
55252: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55253: LD_ADDR_VAR 0 11
55257: PUSH
55258: LD_INT 1
55260: NEG
55261: PUSH
55262: LD_INT 3
55264: NEG
55265: PUSH
55266: EMPTY
55267: LIST
55268: LIST
55269: PUSH
55270: LD_INT 0
55272: PUSH
55273: LD_INT 3
55275: NEG
55276: PUSH
55277: EMPTY
55278: LIST
55279: LIST
55280: PUSH
55281: LD_INT 1
55283: PUSH
55284: LD_INT 2
55286: NEG
55287: PUSH
55288: EMPTY
55289: LIST
55290: LIST
55291: PUSH
55292: EMPTY
55293: LIST
55294: LIST
55295: LIST
55296: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55297: LD_ADDR_VAR 0 12
55301: PUSH
55302: LD_INT 2
55304: PUSH
55305: LD_INT 1
55307: NEG
55308: PUSH
55309: EMPTY
55310: LIST
55311: LIST
55312: PUSH
55313: LD_INT 3
55315: PUSH
55316: LD_INT 0
55318: PUSH
55319: EMPTY
55320: LIST
55321: LIST
55322: PUSH
55323: LD_INT 3
55325: PUSH
55326: LD_INT 1
55328: PUSH
55329: EMPTY
55330: LIST
55331: LIST
55332: PUSH
55333: EMPTY
55334: LIST
55335: LIST
55336: LIST
55337: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55338: LD_ADDR_VAR 0 13
55342: PUSH
55343: LD_INT 3
55345: PUSH
55346: LD_INT 2
55348: PUSH
55349: EMPTY
55350: LIST
55351: LIST
55352: PUSH
55353: LD_INT 3
55355: PUSH
55356: LD_INT 3
55358: PUSH
55359: EMPTY
55360: LIST
55361: LIST
55362: PUSH
55363: LD_INT 2
55365: PUSH
55366: LD_INT 3
55368: PUSH
55369: EMPTY
55370: LIST
55371: LIST
55372: PUSH
55373: EMPTY
55374: LIST
55375: LIST
55376: LIST
55377: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55378: LD_ADDR_VAR 0 14
55382: PUSH
55383: LD_INT 1
55385: PUSH
55386: LD_INT 3
55388: PUSH
55389: EMPTY
55390: LIST
55391: LIST
55392: PUSH
55393: LD_INT 0
55395: PUSH
55396: LD_INT 3
55398: PUSH
55399: EMPTY
55400: LIST
55401: LIST
55402: PUSH
55403: LD_INT 1
55405: NEG
55406: PUSH
55407: LD_INT 2
55409: PUSH
55410: EMPTY
55411: LIST
55412: LIST
55413: PUSH
55414: EMPTY
55415: LIST
55416: LIST
55417: LIST
55418: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55419: LD_ADDR_VAR 0 15
55423: PUSH
55424: LD_INT 2
55426: NEG
55427: PUSH
55428: LD_INT 1
55430: PUSH
55431: EMPTY
55432: LIST
55433: LIST
55434: PUSH
55435: LD_INT 3
55437: NEG
55438: PUSH
55439: LD_INT 0
55441: PUSH
55442: EMPTY
55443: LIST
55444: LIST
55445: PUSH
55446: LD_INT 3
55448: NEG
55449: PUSH
55450: LD_INT 1
55452: NEG
55453: PUSH
55454: EMPTY
55455: LIST
55456: LIST
55457: PUSH
55458: EMPTY
55459: LIST
55460: LIST
55461: LIST
55462: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55463: LD_ADDR_VAR 0 16
55467: PUSH
55468: LD_INT 2
55470: NEG
55471: PUSH
55472: LD_INT 3
55474: NEG
55475: PUSH
55476: EMPTY
55477: LIST
55478: LIST
55479: PUSH
55480: LD_INT 3
55482: NEG
55483: PUSH
55484: LD_INT 2
55486: NEG
55487: PUSH
55488: EMPTY
55489: LIST
55490: LIST
55491: PUSH
55492: LD_INT 3
55494: NEG
55495: PUSH
55496: LD_INT 3
55498: NEG
55499: PUSH
55500: EMPTY
55501: LIST
55502: LIST
55503: PUSH
55504: EMPTY
55505: LIST
55506: LIST
55507: LIST
55508: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55509: LD_ADDR_VAR 0 17
55513: PUSH
55514: LD_INT 1
55516: NEG
55517: PUSH
55518: LD_INT 3
55520: NEG
55521: PUSH
55522: EMPTY
55523: LIST
55524: LIST
55525: PUSH
55526: LD_INT 0
55528: PUSH
55529: LD_INT 3
55531: NEG
55532: PUSH
55533: EMPTY
55534: LIST
55535: LIST
55536: PUSH
55537: LD_INT 1
55539: PUSH
55540: LD_INT 2
55542: NEG
55543: PUSH
55544: EMPTY
55545: LIST
55546: LIST
55547: PUSH
55548: EMPTY
55549: LIST
55550: LIST
55551: LIST
55552: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55553: LD_ADDR_VAR 0 18
55557: PUSH
55558: LD_INT 2
55560: PUSH
55561: LD_INT 1
55563: NEG
55564: PUSH
55565: EMPTY
55566: LIST
55567: LIST
55568: PUSH
55569: LD_INT 3
55571: PUSH
55572: LD_INT 0
55574: PUSH
55575: EMPTY
55576: LIST
55577: LIST
55578: PUSH
55579: LD_INT 3
55581: PUSH
55582: LD_INT 1
55584: PUSH
55585: EMPTY
55586: LIST
55587: LIST
55588: PUSH
55589: EMPTY
55590: LIST
55591: LIST
55592: LIST
55593: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55594: LD_ADDR_VAR 0 19
55598: PUSH
55599: LD_INT 3
55601: PUSH
55602: LD_INT 2
55604: PUSH
55605: EMPTY
55606: LIST
55607: LIST
55608: PUSH
55609: LD_INT 3
55611: PUSH
55612: LD_INT 3
55614: PUSH
55615: EMPTY
55616: LIST
55617: LIST
55618: PUSH
55619: LD_INT 2
55621: PUSH
55622: LD_INT 3
55624: PUSH
55625: EMPTY
55626: LIST
55627: LIST
55628: PUSH
55629: EMPTY
55630: LIST
55631: LIST
55632: LIST
55633: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55634: LD_ADDR_VAR 0 20
55638: PUSH
55639: LD_INT 1
55641: PUSH
55642: LD_INT 3
55644: PUSH
55645: EMPTY
55646: LIST
55647: LIST
55648: PUSH
55649: LD_INT 0
55651: PUSH
55652: LD_INT 3
55654: PUSH
55655: EMPTY
55656: LIST
55657: LIST
55658: PUSH
55659: LD_INT 1
55661: NEG
55662: PUSH
55663: LD_INT 2
55665: PUSH
55666: EMPTY
55667: LIST
55668: LIST
55669: PUSH
55670: EMPTY
55671: LIST
55672: LIST
55673: LIST
55674: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55675: LD_ADDR_VAR 0 21
55679: PUSH
55680: LD_INT 2
55682: NEG
55683: PUSH
55684: LD_INT 1
55686: PUSH
55687: EMPTY
55688: LIST
55689: LIST
55690: PUSH
55691: LD_INT 3
55693: NEG
55694: PUSH
55695: LD_INT 0
55697: PUSH
55698: EMPTY
55699: LIST
55700: LIST
55701: PUSH
55702: LD_INT 3
55704: NEG
55705: PUSH
55706: LD_INT 1
55708: NEG
55709: PUSH
55710: EMPTY
55711: LIST
55712: LIST
55713: PUSH
55714: EMPTY
55715: LIST
55716: LIST
55717: LIST
55718: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55719: LD_ADDR_VAR 0 22
55723: PUSH
55724: LD_INT 2
55726: NEG
55727: PUSH
55728: LD_INT 3
55730: NEG
55731: PUSH
55732: EMPTY
55733: LIST
55734: LIST
55735: PUSH
55736: LD_INT 3
55738: NEG
55739: PUSH
55740: LD_INT 2
55742: NEG
55743: PUSH
55744: EMPTY
55745: LIST
55746: LIST
55747: PUSH
55748: LD_INT 3
55750: NEG
55751: PUSH
55752: LD_INT 3
55754: NEG
55755: PUSH
55756: EMPTY
55757: LIST
55758: LIST
55759: PUSH
55760: EMPTY
55761: LIST
55762: LIST
55763: LIST
55764: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
55765: LD_ADDR_VAR 0 23
55769: PUSH
55770: LD_INT 0
55772: PUSH
55773: LD_INT 3
55775: NEG
55776: PUSH
55777: EMPTY
55778: LIST
55779: LIST
55780: PUSH
55781: LD_INT 1
55783: NEG
55784: PUSH
55785: LD_INT 4
55787: NEG
55788: PUSH
55789: EMPTY
55790: LIST
55791: LIST
55792: PUSH
55793: LD_INT 1
55795: PUSH
55796: LD_INT 3
55798: NEG
55799: PUSH
55800: EMPTY
55801: LIST
55802: LIST
55803: PUSH
55804: EMPTY
55805: LIST
55806: LIST
55807: LIST
55808: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
55809: LD_ADDR_VAR 0 24
55813: PUSH
55814: LD_INT 3
55816: PUSH
55817: LD_INT 0
55819: PUSH
55820: EMPTY
55821: LIST
55822: LIST
55823: PUSH
55824: LD_INT 3
55826: PUSH
55827: LD_INT 1
55829: NEG
55830: PUSH
55831: EMPTY
55832: LIST
55833: LIST
55834: PUSH
55835: LD_INT 4
55837: PUSH
55838: LD_INT 1
55840: PUSH
55841: EMPTY
55842: LIST
55843: LIST
55844: PUSH
55845: EMPTY
55846: LIST
55847: LIST
55848: LIST
55849: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
55850: LD_ADDR_VAR 0 25
55854: PUSH
55855: LD_INT 3
55857: PUSH
55858: LD_INT 3
55860: PUSH
55861: EMPTY
55862: LIST
55863: LIST
55864: PUSH
55865: LD_INT 4
55867: PUSH
55868: LD_INT 3
55870: PUSH
55871: EMPTY
55872: LIST
55873: LIST
55874: PUSH
55875: LD_INT 3
55877: PUSH
55878: LD_INT 4
55880: PUSH
55881: EMPTY
55882: LIST
55883: LIST
55884: PUSH
55885: EMPTY
55886: LIST
55887: LIST
55888: LIST
55889: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
55890: LD_ADDR_VAR 0 26
55894: PUSH
55895: LD_INT 0
55897: PUSH
55898: LD_INT 3
55900: PUSH
55901: EMPTY
55902: LIST
55903: LIST
55904: PUSH
55905: LD_INT 1
55907: PUSH
55908: LD_INT 4
55910: PUSH
55911: EMPTY
55912: LIST
55913: LIST
55914: PUSH
55915: LD_INT 1
55917: NEG
55918: PUSH
55919: LD_INT 3
55921: PUSH
55922: EMPTY
55923: LIST
55924: LIST
55925: PUSH
55926: EMPTY
55927: LIST
55928: LIST
55929: LIST
55930: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
55931: LD_ADDR_VAR 0 27
55935: PUSH
55936: LD_INT 3
55938: NEG
55939: PUSH
55940: LD_INT 0
55942: PUSH
55943: EMPTY
55944: LIST
55945: LIST
55946: PUSH
55947: LD_INT 3
55949: NEG
55950: PUSH
55951: LD_INT 1
55953: PUSH
55954: EMPTY
55955: LIST
55956: LIST
55957: PUSH
55958: LD_INT 4
55960: NEG
55961: PUSH
55962: LD_INT 1
55964: NEG
55965: PUSH
55966: EMPTY
55967: LIST
55968: LIST
55969: PUSH
55970: EMPTY
55971: LIST
55972: LIST
55973: LIST
55974: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
55975: LD_ADDR_VAR 0 28
55979: PUSH
55980: LD_INT 3
55982: NEG
55983: PUSH
55984: LD_INT 3
55986: NEG
55987: PUSH
55988: EMPTY
55989: LIST
55990: LIST
55991: PUSH
55992: LD_INT 3
55994: NEG
55995: PUSH
55996: LD_INT 4
55998: NEG
55999: PUSH
56000: EMPTY
56001: LIST
56002: LIST
56003: PUSH
56004: LD_INT 4
56006: NEG
56007: PUSH
56008: LD_INT 3
56010: NEG
56011: PUSH
56012: EMPTY
56013: LIST
56014: LIST
56015: PUSH
56016: EMPTY
56017: LIST
56018: LIST
56019: LIST
56020: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
56021: LD_ADDR_VAR 0 29
56025: PUSH
56026: LD_INT 1
56028: NEG
56029: PUSH
56030: LD_INT 3
56032: NEG
56033: PUSH
56034: EMPTY
56035: LIST
56036: LIST
56037: PUSH
56038: LD_INT 0
56040: PUSH
56041: LD_INT 3
56043: NEG
56044: PUSH
56045: EMPTY
56046: LIST
56047: LIST
56048: PUSH
56049: LD_INT 1
56051: PUSH
56052: LD_INT 2
56054: NEG
56055: PUSH
56056: EMPTY
56057: LIST
56058: LIST
56059: PUSH
56060: LD_INT 1
56062: NEG
56063: PUSH
56064: LD_INT 4
56066: NEG
56067: PUSH
56068: EMPTY
56069: LIST
56070: LIST
56071: PUSH
56072: LD_INT 0
56074: PUSH
56075: LD_INT 4
56077: NEG
56078: PUSH
56079: EMPTY
56080: LIST
56081: LIST
56082: PUSH
56083: LD_INT 1
56085: PUSH
56086: LD_INT 3
56088: NEG
56089: PUSH
56090: EMPTY
56091: LIST
56092: LIST
56093: PUSH
56094: LD_INT 1
56096: NEG
56097: PUSH
56098: LD_INT 5
56100: NEG
56101: PUSH
56102: EMPTY
56103: LIST
56104: LIST
56105: PUSH
56106: LD_INT 0
56108: PUSH
56109: LD_INT 5
56111: NEG
56112: PUSH
56113: EMPTY
56114: LIST
56115: LIST
56116: PUSH
56117: LD_INT 1
56119: PUSH
56120: LD_INT 4
56122: NEG
56123: PUSH
56124: EMPTY
56125: LIST
56126: LIST
56127: PUSH
56128: LD_INT 1
56130: NEG
56131: PUSH
56132: LD_INT 6
56134: NEG
56135: PUSH
56136: EMPTY
56137: LIST
56138: LIST
56139: PUSH
56140: LD_INT 0
56142: PUSH
56143: LD_INT 6
56145: NEG
56146: PUSH
56147: EMPTY
56148: LIST
56149: LIST
56150: PUSH
56151: LD_INT 1
56153: PUSH
56154: LD_INT 5
56156: NEG
56157: PUSH
56158: EMPTY
56159: LIST
56160: LIST
56161: PUSH
56162: EMPTY
56163: LIST
56164: LIST
56165: LIST
56166: LIST
56167: LIST
56168: LIST
56169: LIST
56170: LIST
56171: LIST
56172: LIST
56173: LIST
56174: LIST
56175: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
56176: LD_ADDR_VAR 0 30
56180: PUSH
56181: LD_INT 2
56183: PUSH
56184: LD_INT 1
56186: NEG
56187: PUSH
56188: EMPTY
56189: LIST
56190: LIST
56191: PUSH
56192: LD_INT 3
56194: PUSH
56195: LD_INT 0
56197: PUSH
56198: EMPTY
56199: LIST
56200: LIST
56201: PUSH
56202: LD_INT 3
56204: PUSH
56205: LD_INT 1
56207: PUSH
56208: EMPTY
56209: LIST
56210: LIST
56211: PUSH
56212: LD_INT 3
56214: PUSH
56215: LD_INT 1
56217: NEG
56218: PUSH
56219: EMPTY
56220: LIST
56221: LIST
56222: PUSH
56223: LD_INT 4
56225: PUSH
56226: LD_INT 0
56228: PUSH
56229: EMPTY
56230: LIST
56231: LIST
56232: PUSH
56233: LD_INT 4
56235: PUSH
56236: LD_INT 1
56238: PUSH
56239: EMPTY
56240: LIST
56241: LIST
56242: PUSH
56243: LD_INT 4
56245: PUSH
56246: LD_INT 1
56248: NEG
56249: PUSH
56250: EMPTY
56251: LIST
56252: LIST
56253: PUSH
56254: LD_INT 5
56256: PUSH
56257: LD_INT 0
56259: PUSH
56260: EMPTY
56261: LIST
56262: LIST
56263: PUSH
56264: LD_INT 5
56266: PUSH
56267: LD_INT 1
56269: PUSH
56270: EMPTY
56271: LIST
56272: LIST
56273: PUSH
56274: LD_INT 5
56276: PUSH
56277: LD_INT 1
56279: NEG
56280: PUSH
56281: EMPTY
56282: LIST
56283: LIST
56284: PUSH
56285: LD_INT 6
56287: PUSH
56288: LD_INT 0
56290: PUSH
56291: EMPTY
56292: LIST
56293: LIST
56294: PUSH
56295: LD_INT 6
56297: PUSH
56298: LD_INT 1
56300: PUSH
56301: EMPTY
56302: LIST
56303: LIST
56304: PUSH
56305: EMPTY
56306: LIST
56307: LIST
56308: LIST
56309: LIST
56310: LIST
56311: LIST
56312: LIST
56313: LIST
56314: LIST
56315: LIST
56316: LIST
56317: LIST
56318: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
56319: LD_ADDR_VAR 0 31
56323: PUSH
56324: LD_INT 3
56326: PUSH
56327: LD_INT 2
56329: PUSH
56330: EMPTY
56331: LIST
56332: LIST
56333: PUSH
56334: LD_INT 3
56336: PUSH
56337: LD_INT 3
56339: PUSH
56340: EMPTY
56341: LIST
56342: LIST
56343: PUSH
56344: LD_INT 2
56346: PUSH
56347: LD_INT 3
56349: PUSH
56350: EMPTY
56351: LIST
56352: LIST
56353: PUSH
56354: LD_INT 4
56356: PUSH
56357: LD_INT 3
56359: PUSH
56360: EMPTY
56361: LIST
56362: LIST
56363: PUSH
56364: LD_INT 4
56366: PUSH
56367: LD_INT 4
56369: PUSH
56370: EMPTY
56371: LIST
56372: LIST
56373: PUSH
56374: LD_INT 3
56376: PUSH
56377: LD_INT 4
56379: PUSH
56380: EMPTY
56381: LIST
56382: LIST
56383: PUSH
56384: LD_INT 5
56386: PUSH
56387: LD_INT 4
56389: PUSH
56390: EMPTY
56391: LIST
56392: LIST
56393: PUSH
56394: LD_INT 5
56396: PUSH
56397: LD_INT 5
56399: PUSH
56400: EMPTY
56401: LIST
56402: LIST
56403: PUSH
56404: LD_INT 4
56406: PUSH
56407: LD_INT 5
56409: PUSH
56410: EMPTY
56411: LIST
56412: LIST
56413: PUSH
56414: LD_INT 6
56416: PUSH
56417: LD_INT 5
56419: PUSH
56420: EMPTY
56421: LIST
56422: LIST
56423: PUSH
56424: LD_INT 6
56426: PUSH
56427: LD_INT 6
56429: PUSH
56430: EMPTY
56431: LIST
56432: LIST
56433: PUSH
56434: LD_INT 5
56436: PUSH
56437: LD_INT 6
56439: PUSH
56440: EMPTY
56441: LIST
56442: LIST
56443: PUSH
56444: EMPTY
56445: LIST
56446: LIST
56447: LIST
56448: LIST
56449: LIST
56450: LIST
56451: LIST
56452: LIST
56453: LIST
56454: LIST
56455: LIST
56456: LIST
56457: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
56458: LD_ADDR_VAR 0 32
56462: PUSH
56463: LD_INT 1
56465: PUSH
56466: LD_INT 3
56468: PUSH
56469: EMPTY
56470: LIST
56471: LIST
56472: PUSH
56473: LD_INT 0
56475: PUSH
56476: LD_INT 3
56478: PUSH
56479: EMPTY
56480: LIST
56481: LIST
56482: PUSH
56483: LD_INT 1
56485: NEG
56486: PUSH
56487: LD_INT 2
56489: PUSH
56490: EMPTY
56491: LIST
56492: LIST
56493: PUSH
56494: LD_INT 1
56496: PUSH
56497: LD_INT 4
56499: PUSH
56500: EMPTY
56501: LIST
56502: LIST
56503: PUSH
56504: LD_INT 0
56506: PUSH
56507: LD_INT 4
56509: PUSH
56510: EMPTY
56511: LIST
56512: LIST
56513: PUSH
56514: LD_INT 1
56516: NEG
56517: PUSH
56518: LD_INT 3
56520: PUSH
56521: EMPTY
56522: LIST
56523: LIST
56524: PUSH
56525: LD_INT 1
56527: PUSH
56528: LD_INT 5
56530: PUSH
56531: EMPTY
56532: LIST
56533: LIST
56534: PUSH
56535: LD_INT 0
56537: PUSH
56538: LD_INT 5
56540: PUSH
56541: EMPTY
56542: LIST
56543: LIST
56544: PUSH
56545: LD_INT 1
56547: NEG
56548: PUSH
56549: LD_INT 4
56551: PUSH
56552: EMPTY
56553: LIST
56554: LIST
56555: PUSH
56556: LD_INT 1
56558: PUSH
56559: LD_INT 6
56561: PUSH
56562: EMPTY
56563: LIST
56564: LIST
56565: PUSH
56566: LD_INT 0
56568: PUSH
56569: LD_INT 6
56571: PUSH
56572: EMPTY
56573: LIST
56574: LIST
56575: PUSH
56576: LD_INT 1
56578: NEG
56579: PUSH
56580: LD_INT 5
56582: PUSH
56583: EMPTY
56584: LIST
56585: LIST
56586: PUSH
56587: EMPTY
56588: LIST
56589: LIST
56590: LIST
56591: LIST
56592: LIST
56593: LIST
56594: LIST
56595: LIST
56596: LIST
56597: LIST
56598: LIST
56599: LIST
56600: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
56601: LD_ADDR_VAR 0 33
56605: PUSH
56606: LD_INT 2
56608: NEG
56609: PUSH
56610: LD_INT 1
56612: PUSH
56613: EMPTY
56614: LIST
56615: LIST
56616: PUSH
56617: LD_INT 3
56619: NEG
56620: PUSH
56621: LD_INT 0
56623: PUSH
56624: EMPTY
56625: LIST
56626: LIST
56627: PUSH
56628: LD_INT 3
56630: NEG
56631: PUSH
56632: LD_INT 1
56634: NEG
56635: PUSH
56636: EMPTY
56637: LIST
56638: LIST
56639: PUSH
56640: LD_INT 3
56642: NEG
56643: PUSH
56644: LD_INT 1
56646: PUSH
56647: EMPTY
56648: LIST
56649: LIST
56650: PUSH
56651: LD_INT 4
56653: NEG
56654: PUSH
56655: LD_INT 0
56657: PUSH
56658: EMPTY
56659: LIST
56660: LIST
56661: PUSH
56662: LD_INT 4
56664: NEG
56665: PUSH
56666: LD_INT 1
56668: NEG
56669: PUSH
56670: EMPTY
56671: LIST
56672: LIST
56673: PUSH
56674: LD_INT 4
56676: NEG
56677: PUSH
56678: LD_INT 1
56680: PUSH
56681: EMPTY
56682: LIST
56683: LIST
56684: PUSH
56685: LD_INT 5
56687: NEG
56688: PUSH
56689: LD_INT 0
56691: PUSH
56692: EMPTY
56693: LIST
56694: LIST
56695: PUSH
56696: LD_INT 5
56698: NEG
56699: PUSH
56700: LD_INT 1
56702: NEG
56703: PUSH
56704: EMPTY
56705: LIST
56706: LIST
56707: PUSH
56708: LD_INT 5
56710: NEG
56711: PUSH
56712: LD_INT 1
56714: PUSH
56715: EMPTY
56716: LIST
56717: LIST
56718: PUSH
56719: LD_INT 6
56721: NEG
56722: PUSH
56723: LD_INT 0
56725: PUSH
56726: EMPTY
56727: LIST
56728: LIST
56729: PUSH
56730: LD_INT 6
56732: NEG
56733: PUSH
56734: LD_INT 1
56736: NEG
56737: PUSH
56738: EMPTY
56739: LIST
56740: LIST
56741: PUSH
56742: EMPTY
56743: LIST
56744: LIST
56745: LIST
56746: LIST
56747: LIST
56748: LIST
56749: LIST
56750: LIST
56751: LIST
56752: LIST
56753: LIST
56754: LIST
56755: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
56756: LD_ADDR_VAR 0 34
56760: PUSH
56761: LD_INT 2
56763: NEG
56764: PUSH
56765: LD_INT 3
56767: NEG
56768: PUSH
56769: EMPTY
56770: LIST
56771: LIST
56772: PUSH
56773: LD_INT 3
56775: NEG
56776: PUSH
56777: LD_INT 2
56779: NEG
56780: PUSH
56781: EMPTY
56782: LIST
56783: LIST
56784: PUSH
56785: LD_INT 3
56787: NEG
56788: PUSH
56789: LD_INT 3
56791: NEG
56792: PUSH
56793: EMPTY
56794: LIST
56795: LIST
56796: PUSH
56797: LD_INT 3
56799: NEG
56800: PUSH
56801: LD_INT 4
56803: NEG
56804: PUSH
56805: EMPTY
56806: LIST
56807: LIST
56808: PUSH
56809: LD_INT 4
56811: NEG
56812: PUSH
56813: LD_INT 3
56815: NEG
56816: PUSH
56817: EMPTY
56818: LIST
56819: LIST
56820: PUSH
56821: LD_INT 4
56823: NEG
56824: PUSH
56825: LD_INT 4
56827: NEG
56828: PUSH
56829: EMPTY
56830: LIST
56831: LIST
56832: PUSH
56833: LD_INT 4
56835: NEG
56836: PUSH
56837: LD_INT 5
56839: NEG
56840: PUSH
56841: EMPTY
56842: LIST
56843: LIST
56844: PUSH
56845: LD_INT 5
56847: NEG
56848: PUSH
56849: LD_INT 4
56851: NEG
56852: PUSH
56853: EMPTY
56854: LIST
56855: LIST
56856: PUSH
56857: LD_INT 5
56859: NEG
56860: PUSH
56861: LD_INT 5
56863: NEG
56864: PUSH
56865: EMPTY
56866: LIST
56867: LIST
56868: PUSH
56869: LD_INT 5
56871: NEG
56872: PUSH
56873: LD_INT 6
56875: NEG
56876: PUSH
56877: EMPTY
56878: LIST
56879: LIST
56880: PUSH
56881: LD_INT 6
56883: NEG
56884: PUSH
56885: LD_INT 5
56887: NEG
56888: PUSH
56889: EMPTY
56890: LIST
56891: LIST
56892: PUSH
56893: LD_INT 6
56895: NEG
56896: PUSH
56897: LD_INT 6
56899: NEG
56900: PUSH
56901: EMPTY
56902: LIST
56903: LIST
56904: PUSH
56905: EMPTY
56906: LIST
56907: LIST
56908: LIST
56909: LIST
56910: LIST
56911: LIST
56912: LIST
56913: LIST
56914: LIST
56915: LIST
56916: LIST
56917: LIST
56918: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
56919: LD_ADDR_VAR 0 41
56923: PUSH
56924: LD_INT 0
56926: PUSH
56927: LD_INT 2
56929: NEG
56930: PUSH
56931: EMPTY
56932: LIST
56933: LIST
56934: PUSH
56935: LD_INT 1
56937: NEG
56938: PUSH
56939: LD_INT 3
56941: NEG
56942: PUSH
56943: EMPTY
56944: LIST
56945: LIST
56946: PUSH
56947: LD_INT 1
56949: PUSH
56950: LD_INT 2
56952: NEG
56953: PUSH
56954: EMPTY
56955: LIST
56956: LIST
56957: PUSH
56958: EMPTY
56959: LIST
56960: LIST
56961: LIST
56962: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
56963: LD_ADDR_VAR 0 42
56967: PUSH
56968: LD_INT 2
56970: PUSH
56971: LD_INT 0
56973: PUSH
56974: EMPTY
56975: LIST
56976: LIST
56977: PUSH
56978: LD_INT 2
56980: PUSH
56981: LD_INT 1
56983: NEG
56984: PUSH
56985: EMPTY
56986: LIST
56987: LIST
56988: PUSH
56989: LD_INT 3
56991: PUSH
56992: LD_INT 1
56994: PUSH
56995: EMPTY
56996: LIST
56997: LIST
56998: PUSH
56999: EMPTY
57000: LIST
57001: LIST
57002: LIST
57003: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
57004: LD_ADDR_VAR 0 43
57008: PUSH
57009: LD_INT 2
57011: PUSH
57012: LD_INT 2
57014: PUSH
57015: EMPTY
57016: LIST
57017: LIST
57018: PUSH
57019: LD_INT 3
57021: PUSH
57022: LD_INT 2
57024: PUSH
57025: EMPTY
57026: LIST
57027: LIST
57028: PUSH
57029: LD_INT 2
57031: PUSH
57032: LD_INT 3
57034: PUSH
57035: EMPTY
57036: LIST
57037: LIST
57038: PUSH
57039: EMPTY
57040: LIST
57041: LIST
57042: LIST
57043: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
57044: LD_ADDR_VAR 0 44
57048: PUSH
57049: LD_INT 0
57051: PUSH
57052: LD_INT 2
57054: PUSH
57055: EMPTY
57056: LIST
57057: LIST
57058: PUSH
57059: LD_INT 1
57061: PUSH
57062: LD_INT 3
57064: PUSH
57065: EMPTY
57066: LIST
57067: LIST
57068: PUSH
57069: LD_INT 1
57071: NEG
57072: PUSH
57073: LD_INT 2
57075: PUSH
57076: EMPTY
57077: LIST
57078: LIST
57079: PUSH
57080: EMPTY
57081: LIST
57082: LIST
57083: LIST
57084: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57085: LD_ADDR_VAR 0 45
57089: PUSH
57090: LD_INT 2
57092: NEG
57093: PUSH
57094: LD_INT 0
57096: PUSH
57097: EMPTY
57098: LIST
57099: LIST
57100: PUSH
57101: LD_INT 2
57103: NEG
57104: PUSH
57105: LD_INT 1
57107: PUSH
57108: EMPTY
57109: LIST
57110: LIST
57111: PUSH
57112: LD_INT 3
57114: NEG
57115: PUSH
57116: LD_INT 1
57118: NEG
57119: PUSH
57120: EMPTY
57121: LIST
57122: LIST
57123: PUSH
57124: EMPTY
57125: LIST
57126: LIST
57127: LIST
57128: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
57129: LD_ADDR_VAR 0 46
57133: PUSH
57134: LD_INT 2
57136: NEG
57137: PUSH
57138: LD_INT 2
57140: NEG
57141: PUSH
57142: EMPTY
57143: LIST
57144: LIST
57145: PUSH
57146: LD_INT 2
57148: NEG
57149: PUSH
57150: LD_INT 3
57152: NEG
57153: PUSH
57154: EMPTY
57155: LIST
57156: LIST
57157: PUSH
57158: LD_INT 3
57160: NEG
57161: PUSH
57162: LD_INT 2
57164: NEG
57165: PUSH
57166: EMPTY
57167: LIST
57168: LIST
57169: PUSH
57170: EMPTY
57171: LIST
57172: LIST
57173: LIST
57174: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
57175: LD_ADDR_VAR 0 47
57179: PUSH
57180: LD_INT 2
57182: NEG
57183: PUSH
57184: LD_INT 3
57186: NEG
57187: PUSH
57188: EMPTY
57189: LIST
57190: LIST
57191: PUSH
57192: LD_INT 1
57194: NEG
57195: PUSH
57196: LD_INT 3
57198: NEG
57199: PUSH
57200: EMPTY
57201: LIST
57202: LIST
57203: PUSH
57204: EMPTY
57205: LIST
57206: LIST
57207: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
57208: LD_ADDR_VAR 0 48
57212: PUSH
57213: LD_INT 1
57215: PUSH
57216: LD_INT 2
57218: NEG
57219: PUSH
57220: EMPTY
57221: LIST
57222: LIST
57223: PUSH
57224: LD_INT 2
57226: PUSH
57227: LD_INT 1
57229: NEG
57230: PUSH
57231: EMPTY
57232: LIST
57233: LIST
57234: PUSH
57235: EMPTY
57236: LIST
57237: LIST
57238: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
57239: LD_ADDR_VAR 0 49
57243: PUSH
57244: LD_INT 3
57246: PUSH
57247: LD_INT 1
57249: PUSH
57250: EMPTY
57251: LIST
57252: LIST
57253: PUSH
57254: LD_INT 3
57256: PUSH
57257: LD_INT 2
57259: PUSH
57260: EMPTY
57261: LIST
57262: LIST
57263: PUSH
57264: EMPTY
57265: LIST
57266: LIST
57267: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
57268: LD_ADDR_VAR 0 50
57272: PUSH
57273: LD_INT 2
57275: PUSH
57276: LD_INT 3
57278: PUSH
57279: EMPTY
57280: LIST
57281: LIST
57282: PUSH
57283: LD_INT 1
57285: PUSH
57286: LD_INT 3
57288: PUSH
57289: EMPTY
57290: LIST
57291: LIST
57292: PUSH
57293: EMPTY
57294: LIST
57295: LIST
57296: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
57297: LD_ADDR_VAR 0 51
57301: PUSH
57302: LD_INT 1
57304: NEG
57305: PUSH
57306: LD_INT 2
57308: PUSH
57309: EMPTY
57310: LIST
57311: LIST
57312: PUSH
57313: LD_INT 2
57315: NEG
57316: PUSH
57317: LD_INT 1
57319: PUSH
57320: EMPTY
57321: LIST
57322: LIST
57323: PUSH
57324: EMPTY
57325: LIST
57326: LIST
57327: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57328: LD_ADDR_VAR 0 52
57332: PUSH
57333: LD_INT 3
57335: NEG
57336: PUSH
57337: LD_INT 1
57339: NEG
57340: PUSH
57341: EMPTY
57342: LIST
57343: LIST
57344: PUSH
57345: LD_INT 3
57347: NEG
57348: PUSH
57349: LD_INT 2
57351: NEG
57352: PUSH
57353: EMPTY
57354: LIST
57355: LIST
57356: PUSH
57357: EMPTY
57358: LIST
57359: LIST
57360: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57361: LD_ADDR_VAR 0 53
57365: PUSH
57366: LD_INT 1
57368: NEG
57369: PUSH
57370: LD_INT 3
57372: NEG
57373: PUSH
57374: EMPTY
57375: LIST
57376: LIST
57377: PUSH
57378: LD_INT 0
57380: PUSH
57381: LD_INT 3
57383: NEG
57384: PUSH
57385: EMPTY
57386: LIST
57387: LIST
57388: PUSH
57389: LD_INT 1
57391: PUSH
57392: LD_INT 2
57394: NEG
57395: PUSH
57396: EMPTY
57397: LIST
57398: LIST
57399: PUSH
57400: EMPTY
57401: LIST
57402: LIST
57403: LIST
57404: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57405: LD_ADDR_VAR 0 54
57409: PUSH
57410: LD_INT 2
57412: PUSH
57413: LD_INT 1
57415: NEG
57416: PUSH
57417: EMPTY
57418: LIST
57419: LIST
57420: PUSH
57421: LD_INT 3
57423: PUSH
57424: LD_INT 0
57426: PUSH
57427: EMPTY
57428: LIST
57429: LIST
57430: PUSH
57431: LD_INT 3
57433: PUSH
57434: LD_INT 1
57436: PUSH
57437: EMPTY
57438: LIST
57439: LIST
57440: PUSH
57441: EMPTY
57442: LIST
57443: LIST
57444: LIST
57445: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57446: LD_ADDR_VAR 0 55
57450: PUSH
57451: LD_INT 3
57453: PUSH
57454: LD_INT 2
57456: PUSH
57457: EMPTY
57458: LIST
57459: LIST
57460: PUSH
57461: LD_INT 3
57463: PUSH
57464: LD_INT 3
57466: PUSH
57467: EMPTY
57468: LIST
57469: LIST
57470: PUSH
57471: LD_INT 2
57473: PUSH
57474: LD_INT 3
57476: PUSH
57477: EMPTY
57478: LIST
57479: LIST
57480: PUSH
57481: EMPTY
57482: LIST
57483: LIST
57484: LIST
57485: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57486: LD_ADDR_VAR 0 56
57490: PUSH
57491: LD_INT 1
57493: PUSH
57494: LD_INT 3
57496: PUSH
57497: EMPTY
57498: LIST
57499: LIST
57500: PUSH
57501: LD_INT 0
57503: PUSH
57504: LD_INT 3
57506: PUSH
57507: EMPTY
57508: LIST
57509: LIST
57510: PUSH
57511: LD_INT 1
57513: NEG
57514: PUSH
57515: LD_INT 2
57517: PUSH
57518: EMPTY
57519: LIST
57520: LIST
57521: PUSH
57522: EMPTY
57523: LIST
57524: LIST
57525: LIST
57526: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57527: LD_ADDR_VAR 0 57
57531: PUSH
57532: LD_INT 2
57534: NEG
57535: PUSH
57536: LD_INT 1
57538: PUSH
57539: EMPTY
57540: LIST
57541: LIST
57542: PUSH
57543: LD_INT 3
57545: NEG
57546: PUSH
57547: LD_INT 0
57549: PUSH
57550: EMPTY
57551: LIST
57552: LIST
57553: PUSH
57554: LD_INT 3
57556: NEG
57557: PUSH
57558: LD_INT 1
57560: NEG
57561: PUSH
57562: EMPTY
57563: LIST
57564: LIST
57565: PUSH
57566: EMPTY
57567: LIST
57568: LIST
57569: LIST
57570: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57571: LD_ADDR_VAR 0 58
57575: PUSH
57576: LD_INT 2
57578: NEG
57579: PUSH
57580: LD_INT 3
57582: NEG
57583: PUSH
57584: EMPTY
57585: LIST
57586: LIST
57587: PUSH
57588: LD_INT 3
57590: NEG
57591: PUSH
57592: LD_INT 2
57594: NEG
57595: PUSH
57596: EMPTY
57597: LIST
57598: LIST
57599: PUSH
57600: LD_INT 3
57602: NEG
57603: PUSH
57604: LD_INT 3
57606: NEG
57607: PUSH
57608: EMPTY
57609: LIST
57610: LIST
57611: PUSH
57612: EMPTY
57613: LIST
57614: LIST
57615: LIST
57616: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
57617: LD_ADDR_VAR 0 59
57621: PUSH
57622: LD_INT 1
57624: NEG
57625: PUSH
57626: LD_INT 2
57628: NEG
57629: PUSH
57630: EMPTY
57631: LIST
57632: LIST
57633: PUSH
57634: LD_INT 0
57636: PUSH
57637: LD_INT 2
57639: NEG
57640: PUSH
57641: EMPTY
57642: LIST
57643: LIST
57644: PUSH
57645: LD_INT 1
57647: PUSH
57648: LD_INT 1
57650: NEG
57651: PUSH
57652: EMPTY
57653: LIST
57654: LIST
57655: PUSH
57656: EMPTY
57657: LIST
57658: LIST
57659: LIST
57660: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
57661: LD_ADDR_VAR 0 60
57665: PUSH
57666: LD_INT 1
57668: PUSH
57669: LD_INT 1
57671: NEG
57672: PUSH
57673: EMPTY
57674: LIST
57675: LIST
57676: PUSH
57677: LD_INT 2
57679: PUSH
57680: LD_INT 0
57682: PUSH
57683: EMPTY
57684: LIST
57685: LIST
57686: PUSH
57687: LD_INT 2
57689: PUSH
57690: LD_INT 1
57692: PUSH
57693: EMPTY
57694: LIST
57695: LIST
57696: PUSH
57697: EMPTY
57698: LIST
57699: LIST
57700: LIST
57701: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
57702: LD_ADDR_VAR 0 61
57706: PUSH
57707: LD_INT 2
57709: PUSH
57710: LD_INT 1
57712: PUSH
57713: EMPTY
57714: LIST
57715: LIST
57716: PUSH
57717: LD_INT 2
57719: PUSH
57720: LD_INT 2
57722: PUSH
57723: EMPTY
57724: LIST
57725: LIST
57726: PUSH
57727: LD_INT 1
57729: PUSH
57730: LD_INT 2
57732: PUSH
57733: EMPTY
57734: LIST
57735: LIST
57736: PUSH
57737: EMPTY
57738: LIST
57739: LIST
57740: LIST
57741: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
57742: LD_ADDR_VAR 0 62
57746: PUSH
57747: LD_INT 1
57749: PUSH
57750: LD_INT 2
57752: PUSH
57753: EMPTY
57754: LIST
57755: LIST
57756: PUSH
57757: LD_INT 0
57759: PUSH
57760: LD_INT 2
57762: PUSH
57763: EMPTY
57764: LIST
57765: LIST
57766: PUSH
57767: LD_INT 1
57769: NEG
57770: PUSH
57771: LD_INT 1
57773: PUSH
57774: EMPTY
57775: LIST
57776: LIST
57777: PUSH
57778: EMPTY
57779: LIST
57780: LIST
57781: LIST
57782: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
57783: LD_ADDR_VAR 0 63
57787: PUSH
57788: LD_INT 1
57790: NEG
57791: PUSH
57792: LD_INT 1
57794: PUSH
57795: EMPTY
57796: LIST
57797: LIST
57798: PUSH
57799: LD_INT 2
57801: NEG
57802: PUSH
57803: LD_INT 0
57805: PUSH
57806: EMPTY
57807: LIST
57808: LIST
57809: PUSH
57810: LD_INT 2
57812: NEG
57813: PUSH
57814: LD_INT 1
57816: NEG
57817: PUSH
57818: EMPTY
57819: LIST
57820: LIST
57821: PUSH
57822: EMPTY
57823: LIST
57824: LIST
57825: LIST
57826: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57827: LD_ADDR_VAR 0 64
57831: PUSH
57832: LD_INT 1
57834: NEG
57835: PUSH
57836: LD_INT 2
57838: NEG
57839: PUSH
57840: EMPTY
57841: LIST
57842: LIST
57843: PUSH
57844: LD_INT 2
57846: NEG
57847: PUSH
57848: LD_INT 1
57850: NEG
57851: PUSH
57852: EMPTY
57853: LIST
57854: LIST
57855: PUSH
57856: LD_INT 2
57858: NEG
57859: PUSH
57860: LD_INT 2
57862: NEG
57863: PUSH
57864: EMPTY
57865: LIST
57866: LIST
57867: PUSH
57868: EMPTY
57869: LIST
57870: LIST
57871: LIST
57872: ST_TO_ADDR
// end ; 2 :
57873: GO 61139
57875: LD_INT 2
57877: DOUBLE
57878: EQUAL
57879: IFTRUE 57883
57881: GO 61138
57883: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
57884: LD_ADDR_VAR 0 29
57888: PUSH
57889: LD_INT 4
57891: PUSH
57892: LD_INT 0
57894: PUSH
57895: EMPTY
57896: LIST
57897: LIST
57898: PUSH
57899: LD_INT 4
57901: PUSH
57902: LD_INT 1
57904: NEG
57905: PUSH
57906: EMPTY
57907: LIST
57908: LIST
57909: PUSH
57910: LD_INT 5
57912: PUSH
57913: LD_INT 0
57915: PUSH
57916: EMPTY
57917: LIST
57918: LIST
57919: PUSH
57920: LD_INT 5
57922: PUSH
57923: LD_INT 1
57925: PUSH
57926: EMPTY
57927: LIST
57928: LIST
57929: PUSH
57930: LD_INT 4
57932: PUSH
57933: LD_INT 1
57935: PUSH
57936: EMPTY
57937: LIST
57938: LIST
57939: PUSH
57940: LD_INT 3
57942: PUSH
57943: LD_INT 0
57945: PUSH
57946: EMPTY
57947: LIST
57948: LIST
57949: PUSH
57950: LD_INT 3
57952: PUSH
57953: LD_INT 1
57955: NEG
57956: PUSH
57957: EMPTY
57958: LIST
57959: LIST
57960: PUSH
57961: LD_INT 3
57963: PUSH
57964: LD_INT 2
57966: NEG
57967: PUSH
57968: EMPTY
57969: LIST
57970: LIST
57971: PUSH
57972: LD_INT 5
57974: PUSH
57975: LD_INT 2
57977: PUSH
57978: EMPTY
57979: LIST
57980: LIST
57981: PUSH
57982: LD_INT 3
57984: PUSH
57985: LD_INT 3
57987: PUSH
57988: EMPTY
57989: LIST
57990: LIST
57991: PUSH
57992: LD_INT 3
57994: PUSH
57995: LD_INT 2
57997: PUSH
57998: EMPTY
57999: LIST
58000: LIST
58001: PUSH
58002: LD_INT 4
58004: PUSH
58005: LD_INT 3
58007: PUSH
58008: EMPTY
58009: LIST
58010: LIST
58011: PUSH
58012: LD_INT 4
58014: PUSH
58015: LD_INT 4
58017: PUSH
58018: EMPTY
58019: LIST
58020: LIST
58021: PUSH
58022: LD_INT 3
58024: PUSH
58025: LD_INT 4
58027: PUSH
58028: EMPTY
58029: LIST
58030: LIST
58031: PUSH
58032: LD_INT 2
58034: PUSH
58035: LD_INT 3
58037: PUSH
58038: EMPTY
58039: LIST
58040: LIST
58041: PUSH
58042: LD_INT 2
58044: PUSH
58045: LD_INT 2
58047: PUSH
58048: EMPTY
58049: LIST
58050: LIST
58051: PUSH
58052: LD_INT 4
58054: PUSH
58055: LD_INT 2
58057: PUSH
58058: EMPTY
58059: LIST
58060: LIST
58061: PUSH
58062: LD_INT 2
58064: PUSH
58065: LD_INT 4
58067: PUSH
58068: EMPTY
58069: LIST
58070: LIST
58071: PUSH
58072: LD_INT 0
58074: PUSH
58075: LD_INT 4
58077: PUSH
58078: EMPTY
58079: LIST
58080: LIST
58081: PUSH
58082: LD_INT 0
58084: PUSH
58085: LD_INT 3
58087: PUSH
58088: EMPTY
58089: LIST
58090: LIST
58091: PUSH
58092: LD_INT 1
58094: PUSH
58095: LD_INT 4
58097: PUSH
58098: EMPTY
58099: LIST
58100: LIST
58101: PUSH
58102: LD_INT 1
58104: PUSH
58105: LD_INT 5
58107: PUSH
58108: EMPTY
58109: LIST
58110: LIST
58111: PUSH
58112: LD_INT 0
58114: PUSH
58115: LD_INT 5
58117: PUSH
58118: EMPTY
58119: LIST
58120: LIST
58121: PUSH
58122: LD_INT 1
58124: NEG
58125: PUSH
58126: LD_INT 4
58128: PUSH
58129: EMPTY
58130: LIST
58131: LIST
58132: PUSH
58133: LD_INT 1
58135: NEG
58136: PUSH
58137: LD_INT 3
58139: PUSH
58140: EMPTY
58141: LIST
58142: LIST
58143: PUSH
58144: LD_INT 2
58146: PUSH
58147: LD_INT 5
58149: PUSH
58150: EMPTY
58151: LIST
58152: LIST
58153: PUSH
58154: LD_INT 2
58156: NEG
58157: PUSH
58158: LD_INT 3
58160: PUSH
58161: EMPTY
58162: LIST
58163: LIST
58164: PUSH
58165: LD_INT 3
58167: NEG
58168: PUSH
58169: LD_INT 0
58171: PUSH
58172: EMPTY
58173: LIST
58174: LIST
58175: PUSH
58176: LD_INT 3
58178: NEG
58179: PUSH
58180: LD_INT 1
58182: NEG
58183: PUSH
58184: EMPTY
58185: LIST
58186: LIST
58187: PUSH
58188: LD_INT 2
58190: NEG
58191: PUSH
58192: LD_INT 0
58194: PUSH
58195: EMPTY
58196: LIST
58197: LIST
58198: PUSH
58199: LD_INT 2
58201: NEG
58202: PUSH
58203: LD_INT 1
58205: PUSH
58206: EMPTY
58207: LIST
58208: LIST
58209: PUSH
58210: LD_INT 3
58212: NEG
58213: PUSH
58214: LD_INT 1
58216: PUSH
58217: EMPTY
58218: LIST
58219: LIST
58220: PUSH
58221: LD_INT 4
58223: NEG
58224: PUSH
58225: LD_INT 0
58227: PUSH
58228: EMPTY
58229: LIST
58230: LIST
58231: PUSH
58232: LD_INT 4
58234: NEG
58235: PUSH
58236: LD_INT 1
58238: NEG
58239: PUSH
58240: EMPTY
58241: LIST
58242: LIST
58243: PUSH
58244: LD_INT 4
58246: NEG
58247: PUSH
58248: LD_INT 2
58250: NEG
58251: PUSH
58252: EMPTY
58253: LIST
58254: LIST
58255: PUSH
58256: LD_INT 2
58258: NEG
58259: PUSH
58260: LD_INT 2
58262: PUSH
58263: EMPTY
58264: LIST
58265: LIST
58266: PUSH
58267: LD_INT 4
58269: NEG
58270: PUSH
58271: LD_INT 4
58273: NEG
58274: PUSH
58275: EMPTY
58276: LIST
58277: LIST
58278: PUSH
58279: LD_INT 4
58281: NEG
58282: PUSH
58283: LD_INT 5
58285: NEG
58286: PUSH
58287: EMPTY
58288: LIST
58289: LIST
58290: PUSH
58291: LD_INT 3
58293: NEG
58294: PUSH
58295: LD_INT 4
58297: NEG
58298: PUSH
58299: EMPTY
58300: LIST
58301: LIST
58302: PUSH
58303: LD_INT 3
58305: NEG
58306: PUSH
58307: LD_INT 3
58309: NEG
58310: PUSH
58311: EMPTY
58312: LIST
58313: LIST
58314: PUSH
58315: LD_INT 4
58317: NEG
58318: PUSH
58319: LD_INT 3
58321: NEG
58322: PUSH
58323: EMPTY
58324: LIST
58325: LIST
58326: PUSH
58327: LD_INT 5
58329: NEG
58330: PUSH
58331: LD_INT 4
58333: NEG
58334: PUSH
58335: EMPTY
58336: LIST
58337: LIST
58338: PUSH
58339: LD_INT 5
58341: NEG
58342: PUSH
58343: LD_INT 5
58345: NEG
58346: PUSH
58347: EMPTY
58348: LIST
58349: LIST
58350: PUSH
58351: LD_INT 3
58353: NEG
58354: PUSH
58355: LD_INT 5
58357: NEG
58358: PUSH
58359: EMPTY
58360: LIST
58361: LIST
58362: PUSH
58363: LD_INT 5
58365: NEG
58366: PUSH
58367: LD_INT 3
58369: NEG
58370: PUSH
58371: EMPTY
58372: LIST
58373: LIST
58374: PUSH
58375: EMPTY
58376: LIST
58377: LIST
58378: LIST
58379: LIST
58380: LIST
58381: LIST
58382: LIST
58383: LIST
58384: LIST
58385: LIST
58386: LIST
58387: LIST
58388: LIST
58389: LIST
58390: LIST
58391: LIST
58392: LIST
58393: LIST
58394: LIST
58395: LIST
58396: LIST
58397: LIST
58398: LIST
58399: LIST
58400: LIST
58401: LIST
58402: LIST
58403: LIST
58404: LIST
58405: LIST
58406: LIST
58407: LIST
58408: LIST
58409: LIST
58410: LIST
58411: LIST
58412: LIST
58413: LIST
58414: LIST
58415: LIST
58416: LIST
58417: LIST
58418: LIST
58419: LIST
58420: LIST
58421: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
58422: LD_ADDR_VAR 0 30
58426: PUSH
58427: LD_INT 4
58429: PUSH
58430: LD_INT 4
58432: PUSH
58433: EMPTY
58434: LIST
58435: LIST
58436: PUSH
58437: LD_INT 4
58439: PUSH
58440: LD_INT 3
58442: PUSH
58443: EMPTY
58444: LIST
58445: LIST
58446: PUSH
58447: LD_INT 5
58449: PUSH
58450: LD_INT 4
58452: PUSH
58453: EMPTY
58454: LIST
58455: LIST
58456: PUSH
58457: LD_INT 5
58459: PUSH
58460: LD_INT 5
58462: PUSH
58463: EMPTY
58464: LIST
58465: LIST
58466: PUSH
58467: LD_INT 4
58469: PUSH
58470: LD_INT 5
58472: PUSH
58473: EMPTY
58474: LIST
58475: LIST
58476: PUSH
58477: LD_INT 3
58479: PUSH
58480: LD_INT 4
58482: PUSH
58483: EMPTY
58484: LIST
58485: LIST
58486: PUSH
58487: LD_INT 3
58489: PUSH
58490: LD_INT 3
58492: PUSH
58493: EMPTY
58494: LIST
58495: LIST
58496: PUSH
58497: LD_INT 5
58499: PUSH
58500: LD_INT 3
58502: PUSH
58503: EMPTY
58504: LIST
58505: LIST
58506: PUSH
58507: LD_INT 3
58509: PUSH
58510: LD_INT 5
58512: PUSH
58513: EMPTY
58514: LIST
58515: LIST
58516: PUSH
58517: LD_INT 0
58519: PUSH
58520: LD_INT 3
58522: PUSH
58523: EMPTY
58524: LIST
58525: LIST
58526: PUSH
58527: LD_INT 0
58529: PUSH
58530: LD_INT 2
58532: PUSH
58533: EMPTY
58534: LIST
58535: LIST
58536: PUSH
58537: LD_INT 1
58539: PUSH
58540: LD_INT 3
58542: PUSH
58543: EMPTY
58544: LIST
58545: LIST
58546: PUSH
58547: LD_INT 1
58549: PUSH
58550: LD_INT 4
58552: PUSH
58553: EMPTY
58554: LIST
58555: LIST
58556: PUSH
58557: LD_INT 0
58559: PUSH
58560: LD_INT 4
58562: PUSH
58563: EMPTY
58564: LIST
58565: LIST
58566: PUSH
58567: LD_INT 1
58569: NEG
58570: PUSH
58571: LD_INT 3
58573: PUSH
58574: EMPTY
58575: LIST
58576: LIST
58577: PUSH
58578: LD_INT 1
58580: NEG
58581: PUSH
58582: LD_INT 2
58584: PUSH
58585: EMPTY
58586: LIST
58587: LIST
58588: PUSH
58589: LD_INT 2
58591: PUSH
58592: LD_INT 4
58594: PUSH
58595: EMPTY
58596: LIST
58597: LIST
58598: PUSH
58599: LD_INT 2
58601: NEG
58602: PUSH
58603: LD_INT 2
58605: PUSH
58606: EMPTY
58607: LIST
58608: LIST
58609: PUSH
58610: LD_INT 4
58612: NEG
58613: PUSH
58614: LD_INT 0
58616: PUSH
58617: EMPTY
58618: LIST
58619: LIST
58620: PUSH
58621: LD_INT 4
58623: NEG
58624: PUSH
58625: LD_INT 1
58627: NEG
58628: PUSH
58629: EMPTY
58630: LIST
58631: LIST
58632: PUSH
58633: LD_INT 3
58635: NEG
58636: PUSH
58637: LD_INT 0
58639: PUSH
58640: EMPTY
58641: LIST
58642: LIST
58643: PUSH
58644: LD_INT 3
58646: NEG
58647: PUSH
58648: LD_INT 1
58650: PUSH
58651: EMPTY
58652: LIST
58653: LIST
58654: PUSH
58655: LD_INT 4
58657: NEG
58658: PUSH
58659: LD_INT 1
58661: PUSH
58662: EMPTY
58663: LIST
58664: LIST
58665: PUSH
58666: LD_INT 5
58668: NEG
58669: PUSH
58670: LD_INT 0
58672: PUSH
58673: EMPTY
58674: LIST
58675: LIST
58676: PUSH
58677: LD_INT 5
58679: NEG
58680: PUSH
58681: LD_INT 1
58683: NEG
58684: PUSH
58685: EMPTY
58686: LIST
58687: LIST
58688: PUSH
58689: LD_INT 5
58691: NEG
58692: PUSH
58693: LD_INT 2
58695: NEG
58696: PUSH
58697: EMPTY
58698: LIST
58699: LIST
58700: PUSH
58701: LD_INT 3
58703: NEG
58704: PUSH
58705: LD_INT 2
58707: PUSH
58708: EMPTY
58709: LIST
58710: LIST
58711: PUSH
58712: LD_INT 3
58714: NEG
58715: PUSH
58716: LD_INT 3
58718: NEG
58719: PUSH
58720: EMPTY
58721: LIST
58722: LIST
58723: PUSH
58724: LD_INT 3
58726: NEG
58727: PUSH
58728: LD_INT 4
58730: NEG
58731: PUSH
58732: EMPTY
58733: LIST
58734: LIST
58735: PUSH
58736: LD_INT 2
58738: NEG
58739: PUSH
58740: LD_INT 3
58742: NEG
58743: PUSH
58744: EMPTY
58745: LIST
58746: LIST
58747: PUSH
58748: LD_INT 2
58750: NEG
58751: PUSH
58752: LD_INT 2
58754: NEG
58755: PUSH
58756: EMPTY
58757: LIST
58758: LIST
58759: PUSH
58760: LD_INT 3
58762: NEG
58763: PUSH
58764: LD_INT 2
58766: NEG
58767: PUSH
58768: EMPTY
58769: LIST
58770: LIST
58771: PUSH
58772: LD_INT 4
58774: NEG
58775: PUSH
58776: LD_INT 3
58778: NEG
58779: PUSH
58780: EMPTY
58781: LIST
58782: LIST
58783: PUSH
58784: LD_INT 4
58786: NEG
58787: PUSH
58788: LD_INT 4
58790: NEG
58791: PUSH
58792: EMPTY
58793: LIST
58794: LIST
58795: PUSH
58796: LD_INT 2
58798: NEG
58799: PUSH
58800: LD_INT 4
58802: NEG
58803: PUSH
58804: EMPTY
58805: LIST
58806: LIST
58807: PUSH
58808: LD_INT 4
58810: NEG
58811: PUSH
58812: LD_INT 2
58814: NEG
58815: PUSH
58816: EMPTY
58817: LIST
58818: LIST
58819: PUSH
58820: LD_INT 0
58822: PUSH
58823: LD_INT 4
58825: NEG
58826: PUSH
58827: EMPTY
58828: LIST
58829: LIST
58830: PUSH
58831: LD_INT 0
58833: PUSH
58834: LD_INT 5
58836: NEG
58837: PUSH
58838: EMPTY
58839: LIST
58840: LIST
58841: PUSH
58842: LD_INT 1
58844: PUSH
58845: LD_INT 4
58847: NEG
58848: PUSH
58849: EMPTY
58850: LIST
58851: LIST
58852: PUSH
58853: LD_INT 1
58855: PUSH
58856: LD_INT 3
58858: NEG
58859: PUSH
58860: EMPTY
58861: LIST
58862: LIST
58863: PUSH
58864: LD_INT 0
58866: PUSH
58867: LD_INT 3
58869: NEG
58870: PUSH
58871: EMPTY
58872: LIST
58873: LIST
58874: PUSH
58875: LD_INT 1
58877: NEG
58878: PUSH
58879: LD_INT 4
58881: NEG
58882: PUSH
58883: EMPTY
58884: LIST
58885: LIST
58886: PUSH
58887: LD_INT 1
58889: NEG
58890: PUSH
58891: LD_INT 5
58893: NEG
58894: PUSH
58895: EMPTY
58896: LIST
58897: LIST
58898: PUSH
58899: LD_INT 2
58901: PUSH
58902: LD_INT 3
58904: NEG
58905: PUSH
58906: EMPTY
58907: LIST
58908: LIST
58909: PUSH
58910: LD_INT 2
58912: NEG
58913: PUSH
58914: LD_INT 5
58916: NEG
58917: PUSH
58918: EMPTY
58919: LIST
58920: LIST
58921: PUSH
58922: EMPTY
58923: LIST
58924: LIST
58925: LIST
58926: LIST
58927: LIST
58928: LIST
58929: LIST
58930: LIST
58931: LIST
58932: LIST
58933: LIST
58934: LIST
58935: LIST
58936: LIST
58937: LIST
58938: LIST
58939: LIST
58940: LIST
58941: LIST
58942: LIST
58943: LIST
58944: LIST
58945: LIST
58946: LIST
58947: LIST
58948: LIST
58949: LIST
58950: LIST
58951: LIST
58952: LIST
58953: LIST
58954: LIST
58955: LIST
58956: LIST
58957: LIST
58958: LIST
58959: LIST
58960: LIST
58961: LIST
58962: LIST
58963: LIST
58964: LIST
58965: LIST
58966: LIST
58967: LIST
58968: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
58969: LD_ADDR_VAR 0 31
58973: PUSH
58974: LD_INT 0
58976: PUSH
58977: LD_INT 4
58979: PUSH
58980: EMPTY
58981: LIST
58982: LIST
58983: PUSH
58984: LD_INT 0
58986: PUSH
58987: LD_INT 3
58989: PUSH
58990: EMPTY
58991: LIST
58992: LIST
58993: PUSH
58994: LD_INT 1
58996: PUSH
58997: LD_INT 4
58999: PUSH
59000: EMPTY
59001: LIST
59002: LIST
59003: PUSH
59004: LD_INT 1
59006: PUSH
59007: LD_INT 5
59009: PUSH
59010: EMPTY
59011: LIST
59012: LIST
59013: PUSH
59014: LD_INT 0
59016: PUSH
59017: LD_INT 5
59019: PUSH
59020: EMPTY
59021: LIST
59022: LIST
59023: PUSH
59024: LD_INT 1
59026: NEG
59027: PUSH
59028: LD_INT 4
59030: PUSH
59031: EMPTY
59032: LIST
59033: LIST
59034: PUSH
59035: LD_INT 1
59037: NEG
59038: PUSH
59039: LD_INT 3
59041: PUSH
59042: EMPTY
59043: LIST
59044: LIST
59045: PUSH
59046: LD_INT 2
59048: PUSH
59049: LD_INT 5
59051: PUSH
59052: EMPTY
59053: LIST
59054: LIST
59055: PUSH
59056: LD_INT 2
59058: NEG
59059: PUSH
59060: LD_INT 3
59062: PUSH
59063: EMPTY
59064: LIST
59065: LIST
59066: PUSH
59067: LD_INT 3
59069: NEG
59070: PUSH
59071: LD_INT 0
59073: PUSH
59074: EMPTY
59075: LIST
59076: LIST
59077: PUSH
59078: LD_INT 3
59080: NEG
59081: PUSH
59082: LD_INT 1
59084: NEG
59085: PUSH
59086: EMPTY
59087: LIST
59088: LIST
59089: PUSH
59090: LD_INT 2
59092: NEG
59093: PUSH
59094: LD_INT 0
59096: PUSH
59097: EMPTY
59098: LIST
59099: LIST
59100: PUSH
59101: LD_INT 2
59103: NEG
59104: PUSH
59105: LD_INT 1
59107: PUSH
59108: EMPTY
59109: LIST
59110: LIST
59111: PUSH
59112: LD_INT 3
59114: NEG
59115: PUSH
59116: LD_INT 1
59118: PUSH
59119: EMPTY
59120: LIST
59121: LIST
59122: PUSH
59123: LD_INT 4
59125: NEG
59126: PUSH
59127: LD_INT 0
59129: PUSH
59130: EMPTY
59131: LIST
59132: LIST
59133: PUSH
59134: LD_INT 4
59136: NEG
59137: PUSH
59138: LD_INT 1
59140: NEG
59141: PUSH
59142: EMPTY
59143: LIST
59144: LIST
59145: PUSH
59146: LD_INT 4
59148: NEG
59149: PUSH
59150: LD_INT 2
59152: NEG
59153: PUSH
59154: EMPTY
59155: LIST
59156: LIST
59157: PUSH
59158: LD_INT 2
59160: NEG
59161: PUSH
59162: LD_INT 2
59164: PUSH
59165: EMPTY
59166: LIST
59167: LIST
59168: PUSH
59169: LD_INT 4
59171: NEG
59172: PUSH
59173: LD_INT 4
59175: NEG
59176: PUSH
59177: EMPTY
59178: LIST
59179: LIST
59180: PUSH
59181: LD_INT 4
59183: NEG
59184: PUSH
59185: LD_INT 5
59187: NEG
59188: PUSH
59189: EMPTY
59190: LIST
59191: LIST
59192: PUSH
59193: LD_INT 3
59195: NEG
59196: PUSH
59197: LD_INT 4
59199: NEG
59200: PUSH
59201: EMPTY
59202: LIST
59203: LIST
59204: PUSH
59205: LD_INT 3
59207: NEG
59208: PUSH
59209: LD_INT 3
59211: NEG
59212: PUSH
59213: EMPTY
59214: LIST
59215: LIST
59216: PUSH
59217: LD_INT 4
59219: NEG
59220: PUSH
59221: LD_INT 3
59223: NEG
59224: PUSH
59225: EMPTY
59226: LIST
59227: LIST
59228: PUSH
59229: LD_INT 5
59231: NEG
59232: PUSH
59233: LD_INT 4
59235: NEG
59236: PUSH
59237: EMPTY
59238: LIST
59239: LIST
59240: PUSH
59241: LD_INT 5
59243: NEG
59244: PUSH
59245: LD_INT 5
59247: NEG
59248: PUSH
59249: EMPTY
59250: LIST
59251: LIST
59252: PUSH
59253: LD_INT 3
59255: NEG
59256: PUSH
59257: LD_INT 5
59259: NEG
59260: PUSH
59261: EMPTY
59262: LIST
59263: LIST
59264: PUSH
59265: LD_INT 5
59267: NEG
59268: PUSH
59269: LD_INT 3
59271: NEG
59272: PUSH
59273: EMPTY
59274: LIST
59275: LIST
59276: PUSH
59277: LD_INT 0
59279: PUSH
59280: LD_INT 3
59282: NEG
59283: PUSH
59284: EMPTY
59285: LIST
59286: LIST
59287: PUSH
59288: LD_INT 0
59290: PUSH
59291: LD_INT 4
59293: NEG
59294: PUSH
59295: EMPTY
59296: LIST
59297: LIST
59298: PUSH
59299: LD_INT 1
59301: PUSH
59302: LD_INT 3
59304: NEG
59305: PUSH
59306: EMPTY
59307: LIST
59308: LIST
59309: PUSH
59310: LD_INT 1
59312: PUSH
59313: LD_INT 2
59315: NEG
59316: PUSH
59317: EMPTY
59318: LIST
59319: LIST
59320: PUSH
59321: LD_INT 0
59323: PUSH
59324: LD_INT 2
59326: NEG
59327: PUSH
59328: EMPTY
59329: LIST
59330: LIST
59331: PUSH
59332: LD_INT 1
59334: NEG
59335: PUSH
59336: LD_INT 3
59338: NEG
59339: PUSH
59340: EMPTY
59341: LIST
59342: LIST
59343: PUSH
59344: LD_INT 1
59346: NEG
59347: PUSH
59348: LD_INT 4
59350: NEG
59351: PUSH
59352: EMPTY
59353: LIST
59354: LIST
59355: PUSH
59356: LD_INT 2
59358: PUSH
59359: LD_INT 2
59361: NEG
59362: PUSH
59363: EMPTY
59364: LIST
59365: LIST
59366: PUSH
59367: LD_INT 2
59369: NEG
59370: PUSH
59371: LD_INT 4
59373: NEG
59374: PUSH
59375: EMPTY
59376: LIST
59377: LIST
59378: PUSH
59379: LD_INT 4
59381: PUSH
59382: LD_INT 0
59384: PUSH
59385: EMPTY
59386: LIST
59387: LIST
59388: PUSH
59389: LD_INT 4
59391: PUSH
59392: LD_INT 1
59394: NEG
59395: PUSH
59396: EMPTY
59397: LIST
59398: LIST
59399: PUSH
59400: LD_INT 5
59402: PUSH
59403: LD_INT 0
59405: PUSH
59406: EMPTY
59407: LIST
59408: LIST
59409: PUSH
59410: LD_INT 5
59412: PUSH
59413: LD_INT 1
59415: PUSH
59416: EMPTY
59417: LIST
59418: LIST
59419: PUSH
59420: LD_INT 4
59422: PUSH
59423: LD_INT 1
59425: PUSH
59426: EMPTY
59427: LIST
59428: LIST
59429: PUSH
59430: LD_INT 3
59432: PUSH
59433: LD_INT 0
59435: PUSH
59436: EMPTY
59437: LIST
59438: LIST
59439: PUSH
59440: LD_INT 3
59442: PUSH
59443: LD_INT 1
59445: NEG
59446: PUSH
59447: EMPTY
59448: LIST
59449: LIST
59450: PUSH
59451: LD_INT 3
59453: PUSH
59454: LD_INT 2
59456: NEG
59457: PUSH
59458: EMPTY
59459: LIST
59460: LIST
59461: PUSH
59462: LD_INT 5
59464: PUSH
59465: LD_INT 2
59467: PUSH
59468: EMPTY
59469: LIST
59470: LIST
59471: PUSH
59472: EMPTY
59473: LIST
59474: LIST
59475: LIST
59476: LIST
59477: LIST
59478: LIST
59479: LIST
59480: LIST
59481: LIST
59482: LIST
59483: LIST
59484: LIST
59485: LIST
59486: LIST
59487: LIST
59488: LIST
59489: LIST
59490: LIST
59491: LIST
59492: LIST
59493: LIST
59494: LIST
59495: LIST
59496: LIST
59497: LIST
59498: LIST
59499: LIST
59500: LIST
59501: LIST
59502: LIST
59503: LIST
59504: LIST
59505: LIST
59506: LIST
59507: LIST
59508: LIST
59509: LIST
59510: LIST
59511: LIST
59512: LIST
59513: LIST
59514: LIST
59515: LIST
59516: LIST
59517: LIST
59518: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
59519: LD_ADDR_VAR 0 32
59523: PUSH
59524: LD_INT 4
59526: NEG
59527: PUSH
59528: LD_INT 0
59530: PUSH
59531: EMPTY
59532: LIST
59533: LIST
59534: PUSH
59535: LD_INT 4
59537: NEG
59538: PUSH
59539: LD_INT 1
59541: NEG
59542: PUSH
59543: EMPTY
59544: LIST
59545: LIST
59546: PUSH
59547: LD_INT 3
59549: NEG
59550: PUSH
59551: LD_INT 0
59553: PUSH
59554: EMPTY
59555: LIST
59556: LIST
59557: PUSH
59558: LD_INT 3
59560: NEG
59561: PUSH
59562: LD_INT 1
59564: PUSH
59565: EMPTY
59566: LIST
59567: LIST
59568: PUSH
59569: LD_INT 4
59571: NEG
59572: PUSH
59573: LD_INT 1
59575: PUSH
59576: EMPTY
59577: LIST
59578: LIST
59579: PUSH
59580: LD_INT 5
59582: NEG
59583: PUSH
59584: LD_INT 0
59586: PUSH
59587: EMPTY
59588: LIST
59589: LIST
59590: PUSH
59591: LD_INT 5
59593: NEG
59594: PUSH
59595: LD_INT 1
59597: NEG
59598: PUSH
59599: EMPTY
59600: LIST
59601: LIST
59602: PUSH
59603: LD_INT 5
59605: NEG
59606: PUSH
59607: LD_INT 2
59609: NEG
59610: PUSH
59611: EMPTY
59612: LIST
59613: LIST
59614: PUSH
59615: LD_INT 3
59617: NEG
59618: PUSH
59619: LD_INT 2
59621: PUSH
59622: EMPTY
59623: LIST
59624: LIST
59625: PUSH
59626: LD_INT 3
59628: NEG
59629: PUSH
59630: LD_INT 3
59632: NEG
59633: PUSH
59634: EMPTY
59635: LIST
59636: LIST
59637: PUSH
59638: LD_INT 3
59640: NEG
59641: PUSH
59642: LD_INT 4
59644: NEG
59645: PUSH
59646: EMPTY
59647: LIST
59648: LIST
59649: PUSH
59650: LD_INT 2
59652: NEG
59653: PUSH
59654: LD_INT 3
59656: NEG
59657: PUSH
59658: EMPTY
59659: LIST
59660: LIST
59661: PUSH
59662: LD_INT 2
59664: NEG
59665: PUSH
59666: LD_INT 2
59668: NEG
59669: PUSH
59670: EMPTY
59671: LIST
59672: LIST
59673: PUSH
59674: LD_INT 3
59676: NEG
59677: PUSH
59678: LD_INT 2
59680: NEG
59681: PUSH
59682: EMPTY
59683: LIST
59684: LIST
59685: PUSH
59686: LD_INT 4
59688: NEG
59689: PUSH
59690: LD_INT 3
59692: NEG
59693: PUSH
59694: EMPTY
59695: LIST
59696: LIST
59697: PUSH
59698: LD_INT 4
59700: NEG
59701: PUSH
59702: LD_INT 4
59704: NEG
59705: PUSH
59706: EMPTY
59707: LIST
59708: LIST
59709: PUSH
59710: LD_INT 2
59712: NEG
59713: PUSH
59714: LD_INT 4
59716: NEG
59717: PUSH
59718: EMPTY
59719: LIST
59720: LIST
59721: PUSH
59722: LD_INT 4
59724: NEG
59725: PUSH
59726: LD_INT 2
59728: NEG
59729: PUSH
59730: EMPTY
59731: LIST
59732: LIST
59733: PUSH
59734: LD_INT 0
59736: PUSH
59737: LD_INT 4
59739: NEG
59740: PUSH
59741: EMPTY
59742: LIST
59743: LIST
59744: PUSH
59745: LD_INT 0
59747: PUSH
59748: LD_INT 5
59750: NEG
59751: PUSH
59752: EMPTY
59753: LIST
59754: LIST
59755: PUSH
59756: LD_INT 1
59758: PUSH
59759: LD_INT 4
59761: NEG
59762: PUSH
59763: EMPTY
59764: LIST
59765: LIST
59766: PUSH
59767: LD_INT 1
59769: PUSH
59770: LD_INT 3
59772: NEG
59773: PUSH
59774: EMPTY
59775: LIST
59776: LIST
59777: PUSH
59778: LD_INT 0
59780: PUSH
59781: LD_INT 3
59783: NEG
59784: PUSH
59785: EMPTY
59786: LIST
59787: LIST
59788: PUSH
59789: LD_INT 1
59791: NEG
59792: PUSH
59793: LD_INT 4
59795: NEG
59796: PUSH
59797: EMPTY
59798: LIST
59799: LIST
59800: PUSH
59801: LD_INT 1
59803: NEG
59804: PUSH
59805: LD_INT 5
59807: NEG
59808: PUSH
59809: EMPTY
59810: LIST
59811: LIST
59812: PUSH
59813: LD_INT 2
59815: PUSH
59816: LD_INT 3
59818: NEG
59819: PUSH
59820: EMPTY
59821: LIST
59822: LIST
59823: PUSH
59824: LD_INT 2
59826: NEG
59827: PUSH
59828: LD_INT 5
59830: NEG
59831: PUSH
59832: EMPTY
59833: LIST
59834: LIST
59835: PUSH
59836: LD_INT 3
59838: PUSH
59839: LD_INT 0
59841: PUSH
59842: EMPTY
59843: LIST
59844: LIST
59845: PUSH
59846: LD_INT 3
59848: PUSH
59849: LD_INT 1
59851: NEG
59852: PUSH
59853: EMPTY
59854: LIST
59855: LIST
59856: PUSH
59857: LD_INT 4
59859: PUSH
59860: LD_INT 0
59862: PUSH
59863: EMPTY
59864: LIST
59865: LIST
59866: PUSH
59867: LD_INT 4
59869: PUSH
59870: LD_INT 1
59872: PUSH
59873: EMPTY
59874: LIST
59875: LIST
59876: PUSH
59877: LD_INT 3
59879: PUSH
59880: LD_INT 1
59882: PUSH
59883: EMPTY
59884: LIST
59885: LIST
59886: PUSH
59887: LD_INT 2
59889: PUSH
59890: LD_INT 0
59892: PUSH
59893: EMPTY
59894: LIST
59895: LIST
59896: PUSH
59897: LD_INT 2
59899: PUSH
59900: LD_INT 1
59902: NEG
59903: PUSH
59904: EMPTY
59905: LIST
59906: LIST
59907: PUSH
59908: LD_INT 2
59910: PUSH
59911: LD_INT 2
59913: NEG
59914: PUSH
59915: EMPTY
59916: LIST
59917: LIST
59918: PUSH
59919: LD_INT 4
59921: PUSH
59922: LD_INT 2
59924: PUSH
59925: EMPTY
59926: LIST
59927: LIST
59928: PUSH
59929: LD_INT 4
59931: PUSH
59932: LD_INT 4
59934: PUSH
59935: EMPTY
59936: LIST
59937: LIST
59938: PUSH
59939: LD_INT 4
59941: PUSH
59942: LD_INT 3
59944: PUSH
59945: EMPTY
59946: LIST
59947: LIST
59948: PUSH
59949: LD_INT 5
59951: PUSH
59952: LD_INT 4
59954: PUSH
59955: EMPTY
59956: LIST
59957: LIST
59958: PUSH
59959: LD_INT 5
59961: PUSH
59962: LD_INT 5
59964: PUSH
59965: EMPTY
59966: LIST
59967: LIST
59968: PUSH
59969: LD_INT 4
59971: PUSH
59972: LD_INT 5
59974: PUSH
59975: EMPTY
59976: LIST
59977: LIST
59978: PUSH
59979: LD_INT 3
59981: PUSH
59982: LD_INT 4
59984: PUSH
59985: EMPTY
59986: LIST
59987: LIST
59988: PUSH
59989: LD_INT 3
59991: PUSH
59992: LD_INT 3
59994: PUSH
59995: EMPTY
59996: LIST
59997: LIST
59998: PUSH
59999: LD_INT 5
60001: PUSH
60002: LD_INT 3
60004: PUSH
60005: EMPTY
60006: LIST
60007: LIST
60008: PUSH
60009: LD_INT 3
60011: PUSH
60012: LD_INT 5
60014: PUSH
60015: EMPTY
60016: LIST
60017: LIST
60018: PUSH
60019: EMPTY
60020: LIST
60021: LIST
60022: LIST
60023: LIST
60024: LIST
60025: LIST
60026: LIST
60027: LIST
60028: LIST
60029: LIST
60030: LIST
60031: LIST
60032: LIST
60033: LIST
60034: LIST
60035: LIST
60036: LIST
60037: LIST
60038: LIST
60039: LIST
60040: LIST
60041: LIST
60042: LIST
60043: LIST
60044: LIST
60045: LIST
60046: LIST
60047: LIST
60048: LIST
60049: LIST
60050: LIST
60051: LIST
60052: LIST
60053: LIST
60054: LIST
60055: LIST
60056: LIST
60057: LIST
60058: LIST
60059: LIST
60060: LIST
60061: LIST
60062: LIST
60063: LIST
60064: LIST
60065: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
60066: LD_ADDR_VAR 0 33
60070: PUSH
60071: LD_INT 4
60073: NEG
60074: PUSH
60075: LD_INT 4
60077: NEG
60078: PUSH
60079: EMPTY
60080: LIST
60081: LIST
60082: PUSH
60083: LD_INT 4
60085: NEG
60086: PUSH
60087: LD_INT 5
60089: NEG
60090: PUSH
60091: EMPTY
60092: LIST
60093: LIST
60094: PUSH
60095: LD_INT 3
60097: NEG
60098: PUSH
60099: LD_INT 4
60101: NEG
60102: PUSH
60103: EMPTY
60104: LIST
60105: LIST
60106: PUSH
60107: LD_INT 3
60109: NEG
60110: PUSH
60111: LD_INT 3
60113: NEG
60114: PUSH
60115: EMPTY
60116: LIST
60117: LIST
60118: PUSH
60119: LD_INT 4
60121: NEG
60122: PUSH
60123: LD_INT 3
60125: NEG
60126: PUSH
60127: EMPTY
60128: LIST
60129: LIST
60130: PUSH
60131: LD_INT 5
60133: NEG
60134: PUSH
60135: LD_INT 4
60137: NEG
60138: PUSH
60139: EMPTY
60140: LIST
60141: LIST
60142: PUSH
60143: LD_INT 5
60145: NEG
60146: PUSH
60147: LD_INT 5
60149: NEG
60150: PUSH
60151: EMPTY
60152: LIST
60153: LIST
60154: PUSH
60155: LD_INT 3
60157: NEG
60158: PUSH
60159: LD_INT 5
60161: NEG
60162: PUSH
60163: EMPTY
60164: LIST
60165: LIST
60166: PUSH
60167: LD_INT 5
60169: NEG
60170: PUSH
60171: LD_INT 3
60173: NEG
60174: PUSH
60175: EMPTY
60176: LIST
60177: LIST
60178: PUSH
60179: LD_INT 0
60181: PUSH
60182: LD_INT 3
60184: NEG
60185: PUSH
60186: EMPTY
60187: LIST
60188: LIST
60189: PUSH
60190: LD_INT 0
60192: PUSH
60193: LD_INT 4
60195: NEG
60196: PUSH
60197: EMPTY
60198: LIST
60199: LIST
60200: PUSH
60201: LD_INT 1
60203: PUSH
60204: LD_INT 3
60206: NEG
60207: PUSH
60208: EMPTY
60209: LIST
60210: LIST
60211: PUSH
60212: LD_INT 1
60214: PUSH
60215: LD_INT 2
60217: NEG
60218: PUSH
60219: EMPTY
60220: LIST
60221: LIST
60222: PUSH
60223: LD_INT 0
60225: PUSH
60226: LD_INT 2
60228: NEG
60229: PUSH
60230: EMPTY
60231: LIST
60232: LIST
60233: PUSH
60234: LD_INT 1
60236: NEG
60237: PUSH
60238: LD_INT 3
60240: NEG
60241: PUSH
60242: EMPTY
60243: LIST
60244: LIST
60245: PUSH
60246: LD_INT 1
60248: NEG
60249: PUSH
60250: LD_INT 4
60252: NEG
60253: PUSH
60254: EMPTY
60255: LIST
60256: LIST
60257: PUSH
60258: LD_INT 2
60260: PUSH
60261: LD_INT 2
60263: NEG
60264: PUSH
60265: EMPTY
60266: LIST
60267: LIST
60268: PUSH
60269: LD_INT 2
60271: NEG
60272: PUSH
60273: LD_INT 4
60275: NEG
60276: PUSH
60277: EMPTY
60278: LIST
60279: LIST
60280: PUSH
60281: LD_INT 4
60283: PUSH
60284: LD_INT 0
60286: PUSH
60287: EMPTY
60288: LIST
60289: LIST
60290: PUSH
60291: LD_INT 4
60293: PUSH
60294: LD_INT 1
60296: NEG
60297: PUSH
60298: EMPTY
60299: LIST
60300: LIST
60301: PUSH
60302: LD_INT 5
60304: PUSH
60305: LD_INT 0
60307: PUSH
60308: EMPTY
60309: LIST
60310: LIST
60311: PUSH
60312: LD_INT 5
60314: PUSH
60315: LD_INT 1
60317: PUSH
60318: EMPTY
60319: LIST
60320: LIST
60321: PUSH
60322: LD_INT 4
60324: PUSH
60325: LD_INT 1
60327: PUSH
60328: EMPTY
60329: LIST
60330: LIST
60331: PUSH
60332: LD_INT 3
60334: PUSH
60335: LD_INT 0
60337: PUSH
60338: EMPTY
60339: LIST
60340: LIST
60341: PUSH
60342: LD_INT 3
60344: PUSH
60345: LD_INT 1
60347: NEG
60348: PUSH
60349: EMPTY
60350: LIST
60351: LIST
60352: PUSH
60353: LD_INT 3
60355: PUSH
60356: LD_INT 2
60358: NEG
60359: PUSH
60360: EMPTY
60361: LIST
60362: LIST
60363: PUSH
60364: LD_INT 5
60366: PUSH
60367: LD_INT 2
60369: PUSH
60370: EMPTY
60371: LIST
60372: LIST
60373: PUSH
60374: LD_INT 3
60376: PUSH
60377: LD_INT 3
60379: PUSH
60380: EMPTY
60381: LIST
60382: LIST
60383: PUSH
60384: LD_INT 3
60386: PUSH
60387: LD_INT 2
60389: PUSH
60390: EMPTY
60391: LIST
60392: LIST
60393: PUSH
60394: LD_INT 4
60396: PUSH
60397: LD_INT 3
60399: PUSH
60400: EMPTY
60401: LIST
60402: LIST
60403: PUSH
60404: LD_INT 4
60406: PUSH
60407: LD_INT 4
60409: PUSH
60410: EMPTY
60411: LIST
60412: LIST
60413: PUSH
60414: LD_INT 3
60416: PUSH
60417: LD_INT 4
60419: PUSH
60420: EMPTY
60421: LIST
60422: LIST
60423: PUSH
60424: LD_INT 2
60426: PUSH
60427: LD_INT 3
60429: PUSH
60430: EMPTY
60431: LIST
60432: LIST
60433: PUSH
60434: LD_INT 2
60436: PUSH
60437: LD_INT 2
60439: PUSH
60440: EMPTY
60441: LIST
60442: LIST
60443: PUSH
60444: LD_INT 4
60446: PUSH
60447: LD_INT 2
60449: PUSH
60450: EMPTY
60451: LIST
60452: LIST
60453: PUSH
60454: LD_INT 2
60456: PUSH
60457: LD_INT 4
60459: PUSH
60460: EMPTY
60461: LIST
60462: LIST
60463: PUSH
60464: LD_INT 0
60466: PUSH
60467: LD_INT 4
60469: PUSH
60470: EMPTY
60471: LIST
60472: LIST
60473: PUSH
60474: LD_INT 0
60476: PUSH
60477: LD_INT 3
60479: PUSH
60480: EMPTY
60481: LIST
60482: LIST
60483: PUSH
60484: LD_INT 1
60486: PUSH
60487: LD_INT 4
60489: PUSH
60490: EMPTY
60491: LIST
60492: LIST
60493: PUSH
60494: LD_INT 1
60496: PUSH
60497: LD_INT 5
60499: PUSH
60500: EMPTY
60501: LIST
60502: LIST
60503: PUSH
60504: LD_INT 0
60506: PUSH
60507: LD_INT 5
60509: PUSH
60510: EMPTY
60511: LIST
60512: LIST
60513: PUSH
60514: LD_INT 1
60516: NEG
60517: PUSH
60518: LD_INT 4
60520: PUSH
60521: EMPTY
60522: LIST
60523: LIST
60524: PUSH
60525: LD_INT 1
60527: NEG
60528: PUSH
60529: LD_INT 3
60531: PUSH
60532: EMPTY
60533: LIST
60534: LIST
60535: PUSH
60536: LD_INT 2
60538: PUSH
60539: LD_INT 5
60541: PUSH
60542: EMPTY
60543: LIST
60544: LIST
60545: PUSH
60546: LD_INT 2
60548: NEG
60549: PUSH
60550: LD_INT 3
60552: PUSH
60553: EMPTY
60554: LIST
60555: LIST
60556: PUSH
60557: EMPTY
60558: LIST
60559: LIST
60560: LIST
60561: LIST
60562: LIST
60563: LIST
60564: LIST
60565: LIST
60566: LIST
60567: LIST
60568: LIST
60569: LIST
60570: LIST
60571: LIST
60572: LIST
60573: LIST
60574: LIST
60575: LIST
60576: LIST
60577: LIST
60578: LIST
60579: LIST
60580: LIST
60581: LIST
60582: LIST
60583: LIST
60584: LIST
60585: LIST
60586: LIST
60587: LIST
60588: LIST
60589: LIST
60590: LIST
60591: LIST
60592: LIST
60593: LIST
60594: LIST
60595: LIST
60596: LIST
60597: LIST
60598: LIST
60599: LIST
60600: LIST
60601: LIST
60602: LIST
60603: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
60604: LD_ADDR_VAR 0 34
60608: PUSH
60609: LD_INT 0
60611: PUSH
60612: LD_INT 4
60614: NEG
60615: PUSH
60616: EMPTY
60617: LIST
60618: LIST
60619: PUSH
60620: LD_INT 0
60622: PUSH
60623: LD_INT 5
60625: NEG
60626: PUSH
60627: EMPTY
60628: LIST
60629: LIST
60630: PUSH
60631: LD_INT 1
60633: PUSH
60634: LD_INT 4
60636: NEG
60637: PUSH
60638: EMPTY
60639: LIST
60640: LIST
60641: PUSH
60642: LD_INT 1
60644: PUSH
60645: LD_INT 3
60647: NEG
60648: PUSH
60649: EMPTY
60650: LIST
60651: LIST
60652: PUSH
60653: LD_INT 0
60655: PUSH
60656: LD_INT 3
60658: NEG
60659: PUSH
60660: EMPTY
60661: LIST
60662: LIST
60663: PUSH
60664: LD_INT 1
60666: NEG
60667: PUSH
60668: LD_INT 4
60670: NEG
60671: PUSH
60672: EMPTY
60673: LIST
60674: LIST
60675: PUSH
60676: LD_INT 1
60678: NEG
60679: PUSH
60680: LD_INT 5
60682: NEG
60683: PUSH
60684: EMPTY
60685: LIST
60686: LIST
60687: PUSH
60688: LD_INT 2
60690: PUSH
60691: LD_INT 3
60693: NEG
60694: PUSH
60695: EMPTY
60696: LIST
60697: LIST
60698: PUSH
60699: LD_INT 2
60701: NEG
60702: PUSH
60703: LD_INT 5
60705: NEG
60706: PUSH
60707: EMPTY
60708: LIST
60709: LIST
60710: PUSH
60711: LD_INT 3
60713: PUSH
60714: LD_INT 0
60716: PUSH
60717: EMPTY
60718: LIST
60719: LIST
60720: PUSH
60721: LD_INT 3
60723: PUSH
60724: LD_INT 1
60726: NEG
60727: PUSH
60728: EMPTY
60729: LIST
60730: LIST
60731: PUSH
60732: LD_INT 4
60734: PUSH
60735: LD_INT 0
60737: PUSH
60738: EMPTY
60739: LIST
60740: LIST
60741: PUSH
60742: LD_INT 4
60744: PUSH
60745: LD_INT 1
60747: PUSH
60748: EMPTY
60749: LIST
60750: LIST
60751: PUSH
60752: LD_INT 3
60754: PUSH
60755: LD_INT 1
60757: PUSH
60758: EMPTY
60759: LIST
60760: LIST
60761: PUSH
60762: LD_INT 2
60764: PUSH
60765: LD_INT 0
60767: PUSH
60768: EMPTY
60769: LIST
60770: LIST
60771: PUSH
60772: LD_INT 2
60774: PUSH
60775: LD_INT 1
60777: NEG
60778: PUSH
60779: EMPTY
60780: LIST
60781: LIST
60782: PUSH
60783: LD_INT 2
60785: PUSH
60786: LD_INT 2
60788: NEG
60789: PUSH
60790: EMPTY
60791: LIST
60792: LIST
60793: PUSH
60794: LD_INT 4
60796: PUSH
60797: LD_INT 2
60799: PUSH
60800: EMPTY
60801: LIST
60802: LIST
60803: PUSH
60804: LD_INT 4
60806: PUSH
60807: LD_INT 4
60809: PUSH
60810: EMPTY
60811: LIST
60812: LIST
60813: PUSH
60814: LD_INT 4
60816: PUSH
60817: LD_INT 3
60819: PUSH
60820: EMPTY
60821: LIST
60822: LIST
60823: PUSH
60824: LD_INT 5
60826: PUSH
60827: LD_INT 4
60829: PUSH
60830: EMPTY
60831: LIST
60832: LIST
60833: PUSH
60834: LD_INT 5
60836: PUSH
60837: LD_INT 5
60839: PUSH
60840: EMPTY
60841: LIST
60842: LIST
60843: PUSH
60844: LD_INT 4
60846: PUSH
60847: LD_INT 5
60849: PUSH
60850: EMPTY
60851: LIST
60852: LIST
60853: PUSH
60854: LD_INT 3
60856: PUSH
60857: LD_INT 4
60859: PUSH
60860: EMPTY
60861: LIST
60862: LIST
60863: PUSH
60864: LD_INT 3
60866: PUSH
60867: LD_INT 3
60869: PUSH
60870: EMPTY
60871: LIST
60872: LIST
60873: PUSH
60874: LD_INT 5
60876: PUSH
60877: LD_INT 3
60879: PUSH
60880: EMPTY
60881: LIST
60882: LIST
60883: PUSH
60884: LD_INT 3
60886: PUSH
60887: LD_INT 5
60889: PUSH
60890: EMPTY
60891: LIST
60892: LIST
60893: PUSH
60894: LD_INT 0
60896: PUSH
60897: LD_INT 3
60899: PUSH
60900: EMPTY
60901: LIST
60902: LIST
60903: PUSH
60904: LD_INT 0
60906: PUSH
60907: LD_INT 2
60909: PUSH
60910: EMPTY
60911: LIST
60912: LIST
60913: PUSH
60914: LD_INT 1
60916: PUSH
60917: LD_INT 3
60919: PUSH
60920: EMPTY
60921: LIST
60922: LIST
60923: PUSH
60924: LD_INT 1
60926: PUSH
60927: LD_INT 4
60929: PUSH
60930: EMPTY
60931: LIST
60932: LIST
60933: PUSH
60934: LD_INT 0
60936: PUSH
60937: LD_INT 4
60939: PUSH
60940: EMPTY
60941: LIST
60942: LIST
60943: PUSH
60944: LD_INT 1
60946: NEG
60947: PUSH
60948: LD_INT 3
60950: PUSH
60951: EMPTY
60952: LIST
60953: LIST
60954: PUSH
60955: LD_INT 1
60957: NEG
60958: PUSH
60959: LD_INT 2
60961: PUSH
60962: EMPTY
60963: LIST
60964: LIST
60965: PUSH
60966: LD_INT 2
60968: PUSH
60969: LD_INT 4
60971: PUSH
60972: EMPTY
60973: LIST
60974: LIST
60975: PUSH
60976: LD_INT 2
60978: NEG
60979: PUSH
60980: LD_INT 2
60982: PUSH
60983: EMPTY
60984: LIST
60985: LIST
60986: PUSH
60987: LD_INT 4
60989: NEG
60990: PUSH
60991: LD_INT 0
60993: PUSH
60994: EMPTY
60995: LIST
60996: LIST
60997: PUSH
60998: LD_INT 4
61000: NEG
61001: PUSH
61002: LD_INT 1
61004: NEG
61005: PUSH
61006: EMPTY
61007: LIST
61008: LIST
61009: PUSH
61010: LD_INT 3
61012: NEG
61013: PUSH
61014: LD_INT 0
61016: PUSH
61017: EMPTY
61018: LIST
61019: LIST
61020: PUSH
61021: LD_INT 3
61023: NEG
61024: PUSH
61025: LD_INT 1
61027: PUSH
61028: EMPTY
61029: LIST
61030: LIST
61031: PUSH
61032: LD_INT 4
61034: NEG
61035: PUSH
61036: LD_INT 1
61038: PUSH
61039: EMPTY
61040: LIST
61041: LIST
61042: PUSH
61043: LD_INT 5
61045: NEG
61046: PUSH
61047: LD_INT 0
61049: PUSH
61050: EMPTY
61051: LIST
61052: LIST
61053: PUSH
61054: LD_INT 5
61056: NEG
61057: PUSH
61058: LD_INT 1
61060: NEG
61061: PUSH
61062: EMPTY
61063: LIST
61064: LIST
61065: PUSH
61066: LD_INT 5
61068: NEG
61069: PUSH
61070: LD_INT 2
61072: NEG
61073: PUSH
61074: EMPTY
61075: LIST
61076: LIST
61077: PUSH
61078: LD_INT 3
61080: NEG
61081: PUSH
61082: LD_INT 2
61084: PUSH
61085: EMPTY
61086: LIST
61087: LIST
61088: PUSH
61089: EMPTY
61090: LIST
61091: LIST
61092: LIST
61093: LIST
61094: LIST
61095: LIST
61096: LIST
61097: LIST
61098: LIST
61099: LIST
61100: LIST
61101: LIST
61102: LIST
61103: LIST
61104: LIST
61105: LIST
61106: LIST
61107: LIST
61108: LIST
61109: LIST
61110: LIST
61111: LIST
61112: LIST
61113: LIST
61114: LIST
61115: LIST
61116: LIST
61117: LIST
61118: LIST
61119: LIST
61120: LIST
61121: LIST
61122: LIST
61123: LIST
61124: LIST
61125: LIST
61126: LIST
61127: LIST
61128: LIST
61129: LIST
61130: LIST
61131: LIST
61132: LIST
61133: LIST
61134: LIST
61135: ST_TO_ADDR
// end ; end ;
61136: GO 61139
61138: POP
// case btype of b_depot , b_warehouse :
61139: LD_VAR 0 1
61143: PUSH
61144: LD_INT 0
61146: DOUBLE
61147: EQUAL
61148: IFTRUE 61158
61150: LD_INT 1
61152: DOUBLE
61153: EQUAL
61154: IFTRUE 61158
61156: GO 61359
61158: POP
// case nation of nation_american :
61159: LD_VAR 0 5
61163: PUSH
61164: LD_INT 1
61166: DOUBLE
61167: EQUAL
61168: IFTRUE 61172
61170: GO 61228
61172: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
61173: LD_ADDR_VAR 0 9
61177: PUSH
61178: LD_VAR 0 11
61182: PUSH
61183: LD_VAR 0 12
61187: PUSH
61188: LD_VAR 0 13
61192: PUSH
61193: LD_VAR 0 14
61197: PUSH
61198: LD_VAR 0 15
61202: PUSH
61203: LD_VAR 0 16
61207: PUSH
61208: EMPTY
61209: LIST
61210: LIST
61211: LIST
61212: LIST
61213: LIST
61214: LIST
61215: PUSH
61216: LD_VAR 0 4
61220: PUSH
61221: LD_INT 1
61223: PLUS
61224: ARRAY
61225: ST_TO_ADDR
61226: GO 61357
61228: LD_INT 2
61230: DOUBLE
61231: EQUAL
61232: IFTRUE 61236
61234: GO 61292
61236: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
61237: LD_ADDR_VAR 0 9
61241: PUSH
61242: LD_VAR 0 17
61246: PUSH
61247: LD_VAR 0 18
61251: PUSH
61252: LD_VAR 0 19
61256: PUSH
61257: LD_VAR 0 20
61261: PUSH
61262: LD_VAR 0 21
61266: PUSH
61267: LD_VAR 0 22
61271: PUSH
61272: EMPTY
61273: LIST
61274: LIST
61275: LIST
61276: LIST
61277: LIST
61278: LIST
61279: PUSH
61280: LD_VAR 0 4
61284: PUSH
61285: LD_INT 1
61287: PLUS
61288: ARRAY
61289: ST_TO_ADDR
61290: GO 61357
61292: LD_INT 3
61294: DOUBLE
61295: EQUAL
61296: IFTRUE 61300
61298: GO 61356
61300: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
61301: LD_ADDR_VAR 0 9
61305: PUSH
61306: LD_VAR 0 23
61310: PUSH
61311: LD_VAR 0 24
61315: PUSH
61316: LD_VAR 0 25
61320: PUSH
61321: LD_VAR 0 26
61325: PUSH
61326: LD_VAR 0 27
61330: PUSH
61331: LD_VAR 0 28
61335: PUSH
61336: EMPTY
61337: LIST
61338: LIST
61339: LIST
61340: LIST
61341: LIST
61342: LIST
61343: PUSH
61344: LD_VAR 0 4
61348: PUSH
61349: LD_INT 1
61351: PLUS
61352: ARRAY
61353: ST_TO_ADDR
61354: GO 61357
61356: POP
61357: GO 61912
61359: LD_INT 2
61361: DOUBLE
61362: EQUAL
61363: IFTRUE 61373
61365: LD_INT 3
61367: DOUBLE
61368: EQUAL
61369: IFTRUE 61373
61371: GO 61429
61373: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
61374: LD_ADDR_VAR 0 9
61378: PUSH
61379: LD_VAR 0 29
61383: PUSH
61384: LD_VAR 0 30
61388: PUSH
61389: LD_VAR 0 31
61393: PUSH
61394: LD_VAR 0 32
61398: PUSH
61399: LD_VAR 0 33
61403: PUSH
61404: LD_VAR 0 34
61408: PUSH
61409: EMPTY
61410: LIST
61411: LIST
61412: LIST
61413: LIST
61414: LIST
61415: LIST
61416: PUSH
61417: LD_VAR 0 4
61421: PUSH
61422: LD_INT 1
61424: PLUS
61425: ARRAY
61426: ST_TO_ADDR
61427: GO 61912
61429: LD_INT 16
61431: DOUBLE
61432: EQUAL
61433: IFTRUE 61491
61435: LD_INT 17
61437: DOUBLE
61438: EQUAL
61439: IFTRUE 61491
61441: LD_INT 18
61443: DOUBLE
61444: EQUAL
61445: IFTRUE 61491
61447: LD_INT 19
61449: DOUBLE
61450: EQUAL
61451: IFTRUE 61491
61453: LD_INT 22
61455: DOUBLE
61456: EQUAL
61457: IFTRUE 61491
61459: LD_INT 20
61461: DOUBLE
61462: EQUAL
61463: IFTRUE 61491
61465: LD_INT 21
61467: DOUBLE
61468: EQUAL
61469: IFTRUE 61491
61471: LD_INT 23
61473: DOUBLE
61474: EQUAL
61475: IFTRUE 61491
61477: LD_INT 24
61479: DOUBLE
61480: EQUAL
61481: IFTRUE 61491
61483: LD_INT 25
61485: DOUBLE
61486: EQUAL
61487: IFTRUE 61491
61489: GO 61547
61491: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
61492: LD_ADDR_VAR 0 9
61496: PUSH
61497: LD_VAR 0 35
61501: PUSH
61502: LD_VAR 0 36
61506: PUSH
61507: LD_VAR 0 37
61511: PUSH
61512: LD_VAR 0 38
61516: PUSH
61517: LD_VAR 0 39
61521: PUSH
61522: LD_VAR 0 40
61526: PUSH
61527: EMPTY
61528: LIST
61529: LIST
61530: LIST
61531: LIST
61532: LIST
61533: LIST
61534: PUSH
61535: LD_VAR 0 4
61539: PUSH
61540: LD_INT 1
61542: PLUS
61543: ARRAY
61544: ST_TO_ADDR
61545: GO 61912
61547: LD_INT 6
61549: DOUBLE
61550: EQUAL
61551: IFTRUE 61603
61553: LD_INT 7
61555: DOUBLE
61556: EQUAL
61557: IFTRUE 61603
61559: LD_INT 8
61561: DOUBLE
61562: EQUAL
61563: IFTRUE 61603
61565: LD_INT 13
61567: DOUBLE
61568: EQUAL
61569: IFTRUE 61603
61571: LD_INT 12
61573: DOUBLE
61574: EQUAL
61575: IFTRUE 61603
61577: LD_INT 15
61579: DOUBLE
61580: EQUAL
61581: IFTRUE 61603
61583: LD_INT 11
61585: DOUBLE
61586: EQUAL
61587: IFTRUE 61603
61589: LD_INT 14
61591: DOUBLE
61592: EQUAL
61593: IFTRUE 61603
61595: LD_INT 10
61597: DOUBLE
61598: EQUAL
61599: IFTRUE 61603
61601: GO 61659
61603: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
61604: LD_ADDR_VAR 0 9
61608: PUSH
61609: LD_VAR 0 41
61613: PUSH
61614: LD_VAR 0 42
61618: PUSH
61619: LD_VAR 0 43
61623: PUSH
61624: LD_VAR 0 44
61628: PUSH
61629: LD_VAR 0 45
61633: PUSH
61634: LD_VAR 0 46
61638: PUSH
61639: EMPTY
61640: LIST
61641: LIST
61642: LIST
61643: LIST
61644: LIST
61645: LIST
61646: PUSH
61647: LD_VAR 0 4
61651: PUSH
61652: LD_INT 1
61654: PLUS
61655: ARRAY
61656: ST_TO_ADDR
61657: GO 61912
61659: LD_INT 36
61661: DOUBLE
61662: EQUAL
61663: IFTRUE 61667
61665: GO 61723
61667: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
61668: LD_ADDR_VAR 0 9
61672: PUSH
61673: LD_VAR 0 47
61677: PUSH
61678: LD_VAR 0 48
61682: PUSH
61683: LD_VAR 0 49
61687: PUSH
61688: LD_VAR 0 50
61692: PUSH
61693: LD_VAR 0 51
61697: PUSH
61698: LD_VAR 0 52
61702: PUSH
61703: EMPTY
61704: LIST
61705: LIST
61706: LIST
61707: LIST
61708: LIST
61709: LIST
61710: PUSH
61711: LD_VAR 0 4
61715: PUSH
61716: LD_INT 1
61718: PLUS
61719: ARRAY
61720: ST_TO_ADDR
61721: GO 61912
61723: LD_INT 4
61725: DOUBLE
61726: EQUAL
61727: IFTRUE 61749
61729: LD_INT 5
61731: DOUBLE
61732: EQUAL
61733: IFTRUE 61749
61735: LD_INT 34
61737: DOUBLE
61738: EQUAL
61739: IFTRUE 61749
61741: LD_INT 37
61743: DOUBLE
61744: EQUAL
61745: IFTRUE 61749
61747: GO 61805
61749: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
61750: LD_ADDR_VAR 0 9
61754: PUSH
61755: LD_VAR 0 53
61759: PUSH
61760: LD_VAR 0 54
61764: PUSH
61765: LD_VAR 0 55
61769: PUSH
61770: LD_VAR 0 56
61774: PUSH
61775: LD_VAR 0 57
61779: PUSH
61780: LD_VAR 0 58
61784: PUSH
61785: EMPTY
61786: LIST
61787: LIST
61788: LIST
61789: LIST
61790: LIST
61791: LIST
61792: PUSH
61793: LD_VAR 0 4
61797: PUSH
61798: LD_INT 1
61800: PLUS
61801: ARRAY
61802: ST_TO_ADDR
61803: GO 61912
61805: LD_INT 31
61807: DOUBLE
61808: EQUAL
61809: IFTRUE 61855
61811: LD_INT 32
61813: DOUBLE
61814: EQUAL
61815: IFTRUE 61855
61817: LD_INT 33
61819: DOUBLE
61820: EQUAL
61821: IFTRUE 61855
61823: LD_INT 27
61825: DOUBLE
61826: EQUAL
61827: IFTRUE 61855
61829: LD_INT 26
61831: DOUBLE
61832: EQUAL
61833: IFTRUE 61855
61835: LD_INT 28
61837: DOUBLE
61838: EQUAL
61839: IFTRUE 61855
61841: LD_INT 29
61843: DOUBLE
61844: EQUAL
61845: IFTRUE 61855
61847: LD_INT 30
61849: DOUBLE
61850: EQUAL
61851: IFTRUE 61855
61853: GO 61911
61855: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
61856: LD_ADDR_VAR 0 9
61860: PUSH
61861: LD_VAR 0 59
61865: PUSH
61866: LD_VAR 0 60
61870: PUSH
61871: LD_VAR 0 61
61875: PUSH
61876: LD_VAR 0 62
61880: PUSH
61881: LD_VAR 0 63
61885: PUSH
61886: LD_VAR 0 64
61890: PUSH
61891: EMPTY
61892: LIST
61893: LIST
61894: LIST
61895: LIST
61896: LIST
61897: LIST
61898: PUSH
61899: LD_VAR 0 4
61903: PUSH
61904: LD_INT 1
61906: PLUS
61907: ARRAY
61908: ST_TO_ADDR
61909: GO 61912
61911: POP
// temp_list2 = [ ] ;
61912: LD_ADDR_VAR 0 10
61916: PUSH
61917: EMPTY
61918: ST_TO_ADDR
// for i in temp_list do
61919: LD_ADDR_VAR 0 8
61923: PUSH
61924: LD_VAR 0 9
61928: PUSH
61929: FOR_IN
61930: IFFALSE 61982
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
61932: LD_ADDR_VAR 0 10
61936: PUSH
61937: LD_VAR 0 10
61941: PUSH
61942: LD_VAR 0 8
61946: PUSH
61947: LD_INT 1
61949: ARRAY
61950: PUSH
61951: LD_VAR 0 2
61955: PLUS
61956: PUSH
61957: LD_VAR 0 8
61961: PUSH
61962: LD_INT 2
61964: ARRAY
61965: PUSH
61966: LD_VAR 0 3
61970: PLUS
61971: PUSH
61972: EMPTY
61973: LIST
61974: LIST
61975: PUSH
61976: EMPTY
61977: LIST
61978: ADD
61979: ST_TO_ADDR
61980: GO 61929
61982: POP
61983: POP
// result = temp_list2 ;
61984: LD_ADDR_VAR 0 7
61988: PUSH
61989: LD_VAR 0 10
61993: ST_TO_ADDR
// end ;
61994: LD_VAR 0 7
61998: RET
// export function EnemyInRange ( unit , dist ) ; begin
61999: LD_INT 0
62001: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
62002: LD_ADDR_VAR 0 3
62006: PUSH
62007: LD_VAR 0 1
62011: PPUSH
62012: CALL_OW 255
62016: PPUSH
62017: LD_VAR 0 1
62021: PPUSH
62022: CALL_OW 250
62026: PPUSH
62027: LD_VAR 0 1
62031: PPUSH
62032: CALL_OW 251
62036: PPUSH
62037: LD_VAR 0 2
62041: PPUSH
62042: CALL 35372 0 4
62046: PUSH
62047: LD_INT 4
62049: ARRAY
62050: ST_TO_ADDR
// end ;
62051: LD_VAR 0 3
62055: RET
// export function PlayerSeeMe ( unit ) ; begin
62056: LD_INT 0
62058: PPUSH
// result := See ( your_side , unit ) ;
62059: LD_ADDR_VAR 0 2
62063: PUSH
62064: LD_OWVAR 2
62068: PPUSH
62069: LD_VAR 0 1
62073: PPUSH
62074: CALL_OW 292
62078: ST_TO_ADDR
// end ;
62079: LD_VAR 0 2
62083: RET
// export function ReverseDir ( unit ) ; begin
62084: LD_INT 0
62086: PPUSH
// if not unit then
62087: LD_VAR 0 1
62091: NOT
62092: IFFALSE 62096
// exit ;
62094: GO 62119
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
62096: LD_ADDR_VAR 0 2
62100: PUSH
62101: LD_VAR 0 1
62105: PPUSH
62106: CALL_OW 254
62110: PUSH
62111: LD_INT 3
62113: PLUS
62114: PUSH
62115: LD_INT 6
62117: MOD
62118: ST_TO_ADDR
// end ;
62119: LD_VAR 0 2
62123: RET
// export function ReverseArray ( array ) ; var i ; begin
62124: LD_INT 0
62126: PPUSH
62127: PPUSH
// if not array then
62128: LD_VAR 0 1
62132: NOT
62133: IFFALSE 62137
// exit ;
62135: GO 62192
// result := [ ] ;
62137: LD_ADDR_VAR 0 2
62141: PUSH
62142: EMPTY
62143: ST_TO_ADDR
// for i := array downto 1 do
62144: LD_ADDR_VAR 0 3
62148: PUSH
62149: DOUBLE
62150: LD_VAR 0 1
62154: INC
62155: ST_TO_ADDR
62156: LD_INT 1
62158: PUSH
62159: FOR_DOWNTO
62160: IFFALSE 62190
// result := Join ( result , array [ i ] ) ;
62162: LD_ADDR_VAR 0 2
62166: PUSH
62167: LD_VAR 0 2
62171: PPUSH
62172: LD_VAR 0 1
62176: PUSH
62177: LD_VAR 0 3
62181: ARRAY
62182: PPUSH
62183: CALL 66848 0 2
62187: ST_TO_ADDR
62188: GO 62159
62190: POP
62191: POP
// end ;
62192: LD_VAR 0 2
62196: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
62197: LD_INT 0
62199: PPUSH
62200: PPUSH
62201: PPUSH
62202: PPUSH
62203: PPUSH
62204: PPUSH
// if not unit or not hexes then
62205: LD_VAR 0 1
62209: NOT
62210: PUSH
62211: LD_VAR 0 2
62215: NOT
62216: OR
62217: IFFALSE 62221
// exit ;
62219: GO 62344
// dist := 9999 ;
62221: LD_ADDR_VAR 0 5
62225: PUSH
62226: LD_INT 9999
62228: ST_TO_ADDR
// for i = 1 to hexes do
62229: LD_ADDR_VAR 0 4
62233: PUSH
62234: DOUBLE
62235: LD_INT 1
62237: DEC
62238: ST_TO_ADDR
62239: LD_VAR 0 2
62243: PUSH
62244: FOR_TO
62245: IFFALSE 62332
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
62247: LD_ADDR_VAR 0 6
62251: PUSH
62252: LD_VAR 0 1
62256: PPUSH
62257: LD_VAR 0 2
62261: PUSH
62262: LD_VAR 0 4
62266: ARRAY
62267: PUSH
62268: LD_INT 1
62270: ARRAY
62271: PPUSH
62272: LD_VAR 0 2
62276: PUSH
62277: LD_VAR 0 4
62281: ARRAY
62282: PUSH
62283: LD_INT 2
62285: ARRAY
62286: PPUSH
62287: CALL_OW 297
62291: ST_TO_ADDR
// if tdist < dist then
62292: LD_VAR 0 6
62296: PUSH
62297: LD_VAR 0 5
62301: LESS
62302: IFFALSE 62330
// begin hex := hexes [ i ] ;
62304: LD_ADDR_VAR 0 8
62308: PUSH
62309: LD_VAR 0 2
62313: PUSH
62314: LD_VAR 0 4
62318: ARRAY
62319: ST_TO_ADDR
// dist := tdist ;
62320: LD_ADDR_VAR 0 5
62324: PUSH
62325: LD_VAR 0 6
62329: ST_TO_ADDR
// end ; end ;
62330: GO 62244
62332: POP
62333: POP
// result := hex ;
62334: LD_ADDR_VAR 0 3
62338: PUSH
62339: LD_VAR 0 8
62343: ST_TO_ADDR
// end ;
62344: LD_VAR 0 3
62348: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
62349: LD_INT 0
62351: PPUSH
62352: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
62353: LD_VAR 0 1
62357: NOT
62358: PUSH
62359: LD_VAR 0 1
62363: PUSH
62364: LD_INT 21
62366: PUSH
62367: LD_INT 2
62369: PUSH
62370: EMPTY
62371: LIST
62372: LIST
62373: PUSH
62374: LD_INT 23
62376: PUSH
62377: LD_INT 2
62379: PUSH
62380: EMPTY
62381: LIST
62382: LIST
62383: PUSH
62384: EMPTY
62385: LIST
62386: LIST
62387: PPUSH
62388: CALL_OW 69
62392: IN
62393: NOT
62394: OR
62395: IFFALSE 62399
// exit ;
62397: GO 62446
// for i = 1 to 3 do
62399: LD_ADDR_VAR 0 3
62403: PUSH
62404: DOUBLE
62405: LD_INT 1
62407: DEC
62408: ST_TO_ADDR
62409: LD_INT 3
62411: PUSH
62412: FOR_TO
62413: IFFALSE 62444
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
62415: LD_VAR 0 1
62419: PPUSH
62420: CALL_OW 250
62424: PPUSH
62425: LD_VAR 0 1
62429: PPUSH
62430: CALL_OW 251
62434: PPUSH
62435: LD_INT 1
62437: PPUSH
62438: CALL_OW 453
62442: GO 62412
62444: POP
62445: POP
// end ;
62446: LD_VAR 0 2
62450: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
62451: LD_INT 0
62453: PPUSH
62454: PPUSH
62455: PPUSH
62456: PPUSH
62457: PPUSH
62458: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
62459: LD_VAR 0 1
62463: NOT
62464: PUSH
62465: LD_VAR 0 2
62469: NOT
62470: OR
62471: PUSH
62472: LD_VAR 0 1
62476: PPUSH
62477: CALL_OW 314
62481: OR
62482: IFFALSE 62486
// exit ;
62484: GO 62953
// if GetLives ( i ) < 250 then
62486: LD_VAR 0 4
62490: PPUSH
62491: CALL_OW 256
62495: PUSH
62496: LD_INT 250
62498: LESS
62499: IFFALSE 62512
// begin ComAutodestruct ( i ) ;
62501: LD_VAR 0 4
62505: PPUSH
62506: CALL 62349 0 1
// exit ;
62510: GO 62953
// end ; x := GetX ( enemy_unit ) ;
62512: LD_ADDR_VAR 0 7
62516: PUSH
62517: LD_VAR 0 2
62521: PPUSH
62522: CALL_OW 250
62526: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
62527: LD_ADDR_VAR 0 8
62531: PUSH
62532: LD_VAR 0 2
62536: PPUSH
62537: CALL_OW 251
62541: ST_TO_ADDR
// if not x or not y then
62542: LD_VAR 0 7
62546: NOT
62547: PUSH
62548: LD_VAR 0 8
62552: NOT
62553: OR
62554: IFFALSE 62558
// exit ;
62556: GO 62953
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
62558: LD_ADDR_VAR 0 6
62562: PUSH
62563: LD_VAR 0 7
62567: PPUSH
62568: LD_INT 0
62570: PPUSH
62571: LD_INT 4
62573: PPUSH
62574: CALL_OW 272
62578: PUSH
62579: LD_VAR 0 8
62583: PPUSH
62584: LD_INT 0
62586: PPUSH
62587: LD_INT 4
62589: PPUSH
62590: CALL_OW 273
62594: PUSH
62595: EMPTY
62596: LIST
62597: LIST
62598: PUSH
62599: LD_VAR 0 7
62603: PPUSH
62604: LD_INT 1
62606: PPUSH
62607: LD_INT 4
62609: PPUSH
62610: CALL_OW 272
62614: PUSH
62615: LD_VAR 0 8
62619: PPUSH
62620: LD_INT 1
62622: PPUSH
62623: LD_INT 4
62625: PPUSH
62626: CALL_OW 273
62630: PUSH
62631: EMPTY
62632: LIST
62633: LIST
62634: PUSH
62635: LD_VAR 0 7
62639: PPUSH
62640: LD_INT 2
62642: PPUSH
62643: LD_INT 4
62645: PPUSH
62646: CALL_OW 272
62650: PUSH
62651: LD_VAR 0 8
62655: PPUSH
62656: LD_INT 2
62658: PPUSH
62659: LD_INT 4
62661: PPUSH
62662: CALL_OW 273
62666: PUSH
62667: EMPTY
62668: LIST
62669: LIST
62670: PUSH
62671: LD_VAR 0 7
62675: PPUSH
62676: LD_INT 3
62678: PPUSH
62679: LD_INT 4
62681: PPUSH
62682: CALL_OW 272
62686: PUSH
62687: LD_VAR 0 8
62691: PPUSH
62692: LD_INT 3
62694: PPUSH
62695: LD_INT 4
62697: PPUSH
62698: CALL_OW 273
62702: PUSH
62703: EMPTY
62704: LIST
62705: LIST
62706: PUSH
62707: LD_VAR 0 7
62711: PPUSH
62712: LD_INT 4
62714: PPUSH
62715: LD_INT 4
62717: PPUSH
62718: CALL_OW 272
62722: PUSH
62723: LD_VAR 0 8
62727: PPUSH
62728: LD_INT 4
62730: PPUSH
62731: LD_INT 4
62733: PPUSH
62734: CALL_OW 273
62738: PUSH
62739: EMPTY
62740: LIST
62741: LIST
62742: PUSH
62743: LD_VAR 0 7
62747: PPUSH
62748: LD_INT 5
62750: PPUSH
62751: LD_INT 4
62753: PPUSH
62754: CALL_OW 272
62758: PUSH
62759: LD_VAR 0 8
62763: PPUSH
62764: LD_INT 5
62766: PPUSH
62767: LD_INT 4
62769: PPUSH
62770: CALL_OW 273
62774: PUSH
62775: EMPTY
62776: LIST
62777: LIST
62778: PUSH
62779: EMPTY
62780: LIST
62781: LIST
62782: LIST
62783: LIST
62784: LIST
62785: LIST
62786: ST_TO_ADDR
// for i = tmp downto 1 do
62787: LD_ADDR_VAR 0 4
62791: PUSH
62792: DOUBLE
62793: LD_VAR 0 6
62797: INC
62798: ST_TO_ADDR
62799: LD_INT 1
62801: PUSH
62802: FOR_DOWNTO
62803: IFFALSE 62904
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
62805: LD_VAR 0 6
62809: PUSH
62810: LD_VAR 0 4
62814: ARRAY
62815: PUSH
62816: LD_INT 1
62818: ARRAY
62819: PPUSH
62820: LD_VAR 0 6
62824: PUSH
62825: LD_VAR 0 4
62829: ARRAY
62830: PUSH
62831: LD_INT 2
62833: ARRAY
62834: PPUSH
62835: CALL_OW 488
62839: NOT
62840: PUSH
62841: LD_VAR 0 6
62845: PUSH
62846: LD_VAR 0 4
62850: ARRAY
62851: PUSH
62852: LD_INT 1
62854: ARRAY
62855: PPUSH
62856: LD_VAR 0 6
62860: PUSH
62861: LD_VAR 0 4
62865: ARRAY
62866: PUSH
62867: LD_INT 2
62869: ARRAY
62870: PPUSH
62871: CALL_OW 428
62875: PUSH
62876: LD_INT 0
62878: NONEQUAL
62879: OR
62880: IFFALSE 62902
// tmp := Delete ( tmp , i ) ;
62882: LD_ADDR_VAR 0 6
62886: PUSH
62887: LD_VAR 0 6
62891: PPUSH
62892: LD_VAR 0 4
62896: PPUSH
62897: CALL_OW 3
62901: ST_TO_ADDR
62902: GO 62802
62904: POP
62905: POP
// j := GetClosestHex ( unit , tmp ) ;
62906: LD_ADDR_VAR 0 5
62910: PUSH
62911: LD_VAR 0 1
62915: PPUSH
62916: LD_VAR 0 6
62920: PPUSH
62921: CALL 62197 0 2
62925: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
62926: LD_VAR 0 1
62930: PPUSH
62931: LD_VAR 0 5
62935: PUSH
62936: LD_INT 1
62938: ARRAY
62939: PPUSH
62940: LD_VAR 0 5
62944: PUSH
62945: LD_INT 2
62947: ARRAY
62948: PPUSH
62949: CALL_OW 111
// end ;
62953: LD_VAR 0 3
62957: RET
// export function PrepareApemanSoldier ( ) ; begin
62958: LD_INT 0
62960: PPUSH
// uc_nation := 0 ;
62961: LD_ADDR_OWVAR 21
62965: PUSH
62966: LD_INT 0
62968: ST_TO_ADDR
// hc_sex := sex_male ;
62969: LD_ADDR_OWVAR 27
62973: PUSH
62974: LD_INT 1
62976: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
62977: LD_ADDR_OWVAR 28
62981: PUSH
62982: LD_INT 15
62984: ST_TO_ADDR
// hc_gallery :=  ;
62985: LD_ADDR_OWVAR 33
62989: PUSH
62990: LD_STRING 
62992: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
62993: LD_ADDR_OWVAR 31
62997: PUSH
62998: LD_INT 0
63000: PPUSH
63001: LD_INT 3
63003: PPUSH
63004: CALL_OW 12
63008: PUSH
63009: LD_INT 0
63011: PPUSH
63012: LD_INT 3
63014: PPUSH
63015: CALL_OW 12
63019: PUSH
63020: LD_INT 0
63022: PUSH
63023: LD_INT 0
63025: PUSH
63026: EMPTY
63027: LIST
63028: LIST
63029: LIST
63030: LIST
63031: ST_TO_ADDR
// end ;
63032: LD_VAR 0 1
63036: RET
// export function PrepareApemanEngineer ( ) ; begin
63037: LD_INT 0
63039: PPUSH
// uc_nation := 0 ;
63040: LD_ADDR_OWVAR 21
63044: PUSH
63045: LD_INT 0
63047: ST_TO_ADDR
// hc_sex := sex_male ;
63048: LD_ADDR_OWVAR 27
63052: PUSH
63053: LD_INT 1
63055: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
63056: LD_ADDR_OWVAR 28
63060: PUSH
63061: LD_INT 16
63063: ST_TO_ADDR
// hc_gallery :=  ;
63064: LD_ADDR_OWVAR 33
63068: PUSH
63069: LD_STRING 
63071: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
63072: LD_ADDR_OWVAR 31
63076: PUSH
63077: LD_INT 0
63079: PPUSH
63080: LD_INT 3
63082: PPUSH
63083: CALL_OW 12
63087: PUSH
63088: LD_INT 0
63090: PPUSH
63091: LD_INT 3
63093: PPUSH
63094: CALL_OW 12
63098: PUSH
63099: LD_INT 0
63101: PUSH
63102: LD_INT 0
63104: PUSH
63105: EMPTY
63106: LIST
63107: LIST
63108: LIST
63109: LIST
63110: ST_TO_ADDR
// end ;
63111: LD_VAR 0 1
63115: RET
// export function PrepareApeman ( agressivity ) ; begin
63116: LD_INT 0
63118: PPUSH
// uc_side := 0 ;
63119: LD_ADDR_OWVAR 20
63123: PUSH
63124: LD_INT 0
63126: ST_TO_ADDR
// uc_nation := 0 ;
63127: LD_ADDR_OWVAR 21
63131: PUSH
63132: LD_INT 0
63134: ST_TO_ADDR
// hc_sex := sex_male ;
63135: LD_ADDR_OWVAR 27
63139: PUSH
63140: LD_INT 1
63142: ST_TO_ADDR
// hc_class := class_apeman ;
63143: LD_ADDR_OWVAR 28
63147: PUSH
63148: LD_INT 12
63150: ST_TO_ADDR
// hc_gallery :=  ;
63151: LD_ADDR_OWVAR 33
63155: PUSH
63156: LD_STRING 
63158: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
63159: LD_ADDR_OWVAR 35
63163: PUSH
63164: LD_VAR 0 1
63168: NEG
63169: PPUSH
63170: LD_VAR 0 1
63174: PPUSH
63175: CALL_OW 12
63179: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
63180: LD_ADDR_OWVAR 31
63184: PUSH
63185: LD_INT 0
63187: PPUSH
63188: LD_INT 3
63190: PPUSH
63191: CALL_OW 12
63195: PUSH
63196: LD_INT 0
63198: PPUSH
63199: LD_INT 3
63201: PPUSH
63202: CALL_OW 12
63206: PUSH
63207: LD_INT 0
63209: PUSH
63210: LD_INT 0
63212: PUSH
63213: EMPTY
63214: LIST
63215: LIST
63216: LIST
63217: LIST
63218: ST_TO_ADDR
// end ;
63219: LD_VAR 0 2
63223: RET
// export function PrepareTiger ( agressivity ) ; begin
63224: LD_INT 0
63226: PPUSH
// uc_side := 0 ;
63227: LD_ADDR_OWVAR 20
63231: PUSH
63232: LD_INT 0
63234: ST_TO_ADDR
// uc_nation := 0 ;
63235: LD_ADDR_OWVAR 21
63239: PUSH
63240: LD_INT 0
63242: ST_TO_ADDR
// hc_class := class_tiger ;
63243: LD_ADDR_OWVAR 28
63247: PUSH
63248: LD_INT 14
63250: ST_TO_ADDR
// hc_gallery :=  ;
63251: LD_ADDR_OWVAR 33
63255: PUSH
63256: LD_STRING 
63258: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
63259: LD_ADDR_OWVAR 35
63263: PUSH
63264: LD_VAR 0 1
63268: NEG
63269: PPUSH
63270: LD_VAR 0 1
63274: PPUSH
63275: CALL_OW 12
63279: ST_TO_ADDR
// end ;
63280: LD_VAR 0 2
63284: RET
// export function PrepareEnchidna ( ) ; begin
63285: LD_INT 0
63287: PPUSH
// uc_side := 0 ;
63288: LD_ADDR_OWVAR 20
63292: PUSH
63293: LD_INT 0
63295: ST_TO_ADDR
// uc_nation := 0 ;
63296: LD_ADDR_OWVAR 21
63300: PUSH
63301: LD_INT 0
63303: ST_TO_ADDR
// hc_class := class_baggie ;
63304: LD_ADDR_OWVAR 28
63308: PUSH
63309: LD_INT 13
63311: ST_TO_ADDR
// hc_gallery :=  ;
63312: LD_ADDR_OWVAR 33
63316: PUSH
63317: LD_STRING 
63319: ST_TO_ADDR
// end ;
63320: LD_VAR 0 1
63324: RET
// export function PrepareFrog ( ) ; begin
63325: LD_INT 0
63327: PPUSH
// uc_side := 0 ;
63328: LD_ADDR_OWVAR 20
63332: PUSH
63333: LD_INT 0
63335: ST_TO_ADDR
// uc_nation := 0 ;
63336: LD_ADDR_OWVAR 21
63340: PUSH
63341: LD_INT 0
63343: ST_TO_ADDR
// hc_class := class_frog ;
63344: LD_ADDR_OWVAR 28
63348: PUSH
63349: LD_INT 19
63351: ST_TO_ADDR
// hc_gallery :=  ;
63352: LD_ADDR_OWVAR 33
63356: PUSH
63357: LD_STRING 
63359: ST_TO_ADDR
// end ;
63360: LD_VAR 0 1
63364: RET
// export function PrepareFish ( ) ; begin
63365: LD_INT 0
63367: PPUSH
// uc_side := 0 ;
63368: LD_ADDR_OWVAR 20
63372: PUSH
63373: LD_INT 0
63375: ST_TO_ADDR
// uc_nation := 0 ;
63376: LD_ADDR_OWVAR 21
63380: PUSH
63381: LD_INT 0
63383: ST_TO_ADDR
// hc_class := class_fish ;
63384: LD_ADDR_OWVAR 28
63388: PUSH
63389: LD_INT 20
63391: ST_TO_ADDR
// hc_gallery :=  ;
63392: LD_ADDR_OWVAR 33
63396: PUSH
63397: LD_STRING 
63399: ST_TO_ADDR
// end ;
63400: LD_VAR 0 1
63404: RET
// export function PrepareBird ( ) ; begin
63405: LD_INT 0
63407: PPUSH
// uc_side := 0 ;
63408: LD_ADDR_OWVAR 20
63412: PUSH
63413: LD_INT 0
63415: ST_TO_ADDR
// uc_nation := 0 ;
63416: LD_ADDR_OWVAR 21
63420: PUSH
63421: LD_INT 0
63423: ST_TO_ADDR
// hc_class := class_phororhacos ;
63424: LD_ADDR_OWVAR 28
63428: PUSH
63429: LD_INT 18
63431: ST_TO_ADDR
// hc_gallery :=  ;
63432: LD_ADDR_OWVAR 33
63436: PUSH
63437: LD_STRING 
63439: ST_TO_ADDR
// end ;
63440: LD_VAR 0 1
63444: RET
// export function PrepareHorse ( ) ; begin
63445: LD_INT 0
63447: PPUSH
// uc_side := 0 ;
63448: LD_ADDR_OWVAR 20
63452: PUSH
63453: LD_INT 0
63455: ST_TO_ADDR
// uc_nation := 0 ;
63456: LD_ADDR_OWVAR 21
63460: PUSH
63461: LD_INT 0
63463: ST_TO_ADDR
// hc_class := class_horse ;
63464: LD_ADDR_OWVAR 28
63468: PUSH
63469: LD_INT 21
63471: ST_TO_ADDR
// hc_gallery :=  ;
63472: LD_ADDR_OWVAR 33
63476: PUSH
63477: LD_STRING 
63479: ST_TO_ADDR
// end ;
63480: LD_VAR 0 1
63484: RET
// export function PrepareMastodont ( ) ; begin
63485: LD_INT 0
63487: PPUSH
// uc_side := 0 ;
63488: LD_ADDR_OWVAR 20
63492: PUSH
63493: LD_INT 0
63495: ST_TO_ADDR
// uc_nation := 0 ;
63496: LD_ADDR_OWVAR 21
63500: PUSH
63501: LD_INT 0
63503: ST_TO_ADDR
// vc_chassis := class_mastodont ;
63504: LD_ADDR_OWVAR 37
63508: PUSH
63509: LD_INT 31
63511: ST_TO_ADDR
// vc_control := control_rider ;
63512: LD_ADDR_OWVAR 38
63516: PUSH
63517: LD_INT 4
63519: ST_TO_ADDR
// end ;
63520: LD_VAR 0 1
63524: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
63525: LD_INT 0
63527: PPUSH
63528: PPUSH
63529: PPUSH
// uc_side = 0 ;
63530: LD_ADDR_OWVAR 20
63534: PUSH
63535: LD_INT 0
63537: ST_TO_ADDR
// uc_nation = 0 ;
63538: LD_ADDR_OWVAR 21
63542: PUSH
63543: LD_INT 0
63545: ST_TO_ADDR
// InitHc_All ( ) ;
63546: CALL_OW 584
// InitVc ;
63550: CALL_OW 20
// if mastodonts then
63554: LD_VAR 0 6
63558: IFFALSE 63625
// for i = 1 to mastodonts do
63560: LD_ADDR_VAR 0 11
63564: PUSH
63565: DOUBLE
63566: LD_INT 1
63568: DEC
63569: ST_TO_ADDR
63570: LD_VAR 0 6
63574: PUSH
63575: FOR_TO
63576: IFFALSE 63623
// begin vc_chassis := 31 ;
63578: LD_ADDR_OWVAR 37
63582: PUSH
63583: LD_INT 31
63585: ST_TO_ADDR
// vc_control := control_rider ;
63586: LD_ADDR_OWVAR 38
63590: PUSH
63591: LD_INT 4
63593: ST_TO_ADDR
// animal := CreateVehicle ;
63594: LD_ADDR_VAR 0 12
63598: PUSH
63599: CALL_OW 45
63603: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63604: LD_VAR 0 12
63608: PPUSH
63609: LD_VAR 0 8
63613: PPUSH
63614: LD_INT 0
63616: PPUSH
63617: CALL 65753 0 3
// end ;
63621: GO 63575
63623: POP
63624: POP
// if horses then
63625: LD_VAR 0 5
63629: IFFALSE 63696
// for i = 1 to horses do
63631: LD_ADDR_VAR 0 11
63635: PUSH
63636: DOUBLE
63637: LD_INT 1
63639: DEC
63640: ST_TO_ADDR
63641: LD_VAR 0 5
63645: PUSH
63646: FOR_TO
63647: IFFALSE 63694
// begin hc_class := 21 ;
63649: LD_ADDR_OWVAR 28
63653: PUSH
63654: LD_INT 21
63656: ST_TO_ADDR
// hc_gallery :=  ;
63657: LD_ADDR_OWVAR 33
63661: PUSH
63662: LD_STRING 
63664: ST_TO_ADDR
// animal := CreateHuman ;
63665: LD_ADDR_VAR 0 12
63669: PUSH
63670: CALL_OW 44
63674: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63675: LD_VAR 0 12
63679: PPUSH
63680: LD_VAR 0 8
63684: PPUSH
63685: LD_INT 0
63687: PPUSH
63688: CALL 65753 0 3
// end ;
63692: GO 63646
63694: POP
63695: POP
// if birds then
63696: LD_VAR 0 1
63700: IFFALSE 63767
// for i = 1 to birds do
63702: LD_ADDR_VAR 0 11
63706: PUSH
63707: DOUBLE
63708: LD_INT 1
63710: DEC
63711: ST_TO_ADDR
63712: LD_VAR 0 1
63716: PUSH
63717: FOR_TO
63718: IFFALSE 63765
// begin hc_class := 18 ;
63720: LD_ADDR_OWVAR 28
63724: PUSH
63725: LD_INT 18
63727: ST_TO_ADDR
// hc_gallery =  ;
63728: LD_ADDR_OWVAR 33
63732: PUSH
63733: LD_STRING 
63735: ST_TO_ADDR
// animal := CreateHuman ;
63736: LD_ADDR_VAR 0 12
63740: PUSH
63741: CALL_OW 44
63745: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63746: LD_VAR 0 12
63750: PPUSH
63751: LD_VAR 0 8
63755: PPUSH
63756: LD_INT 0
63758: PPUSH
63759: CALL 65753 0 3
// end ;
63763: GO 63717
63765: POP
63766: POP
// if tigers then
63767: LD_VAR 0 2
63771: IFFALSE 63855
// for i = 1 to tigers do
63773: LD_ADDR_VAR 0 11
63777: PUSH
63778: DOUBLE
63779: LD_INT 1
63781: DEC
63782: ST_TO_ADDR
63783: LD_VAR 0 2
63787: PUSH
63788: FOR_TO
63789: IFFALSE 63853
// begin hc_class = class_tiger ;
63791: LD_ADDR_OWVAR 28
63795: PUSH
63796: LD_INT 14
63798: ST_TO_ADDR
// hc_gallery =  ;
63799: LD_ADDR_OWVAR 33
63803: PUSH
63804: LD_STRING 
63806: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
63807: LD_ADDR_OWVAR 35
63811: PUSH
63812: LD_INT 7
63814: NEG
63815: PPUSH
63816: LD_INT 7
63818: PPUSH
63819: CALL_OW 12
63823: ST_TO_ADDR
// animal := CreateHuman ;
63824: LD_ADDR_VAR 0 12
63828: PUSH
63829: CALL_OW 44
63833: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63834: LD_VAR 0 12
63838: PPUSH
63839: LD_VAR 0 8
63843: PPUSH
63844: LD_INT 0
63846: PPUSH
63847: CALL 65753 0 3
// end ;
63851: GO 63788
63853: POP
63854: POP
// if apemans then
63855: LD_VAR 0 3
63859: IFFALSE 63982
// for i = 1 to apemans do
63861: LD_ADDR_VAR 0 11
63865: PUSH
63866: DOUBLE
63867: LD_INT 1
63869: DEC
63870: ST_TO_ADDR
63871: LD_VAR 0 3
63875: PUSH
63876: FOR_TO
63877: IFFALSE 63980
// begin hc_class = class_apeman ;
63879: LD_ADDR_OWVAR 28
63883: PUSH
63884: LD_INT 12
63886: ST_TO_ADDR
// hc_gallery =  ;
63887: LD_ADDR_OWVAR 33
63891: PUSH
63892: LD_STRING 
63894: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
63895: LD_ADDR_OWVAR 35
63899: PUSH
63900: LD_INT 2
63902: NEG
63903: PPUSH
63904: LD_INT 2
63906: PPUSH
63907: CALL_OW 12
63911: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
63912: LD_ADDR_OWVAR 31
63916: PUSH
63917: LD_INT 1
63919: PPUSH
63920: LD_INT 3
63922: PPUSH
63923: CALL_OW 12
63927: PUSH
63928: LD_INT 1
63930: PPUSH
63931: LD_INT 3
63933: PPUSH
63934: CALL_OW 12
63938: PUSH
63939: LD_INT 0
63941: PUSH
63942: LD_INT 0
63944: PUSH
63945: EMPTY
63946: LIST
63947: LIST
63948: LIST
63949: LIST
63950: ST_TO_ADDR
// animal := CreateHuman ;
63951: LD_ADDR_VAR 0 12
63955: PUSH
63956: CALL_OW 44
63960: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63961: LD_VAR 0 12
63965: PPUSH
63966: LD_VAR 0 8
63970: PPUSH
63971: LD_INT 0
63973: PPUSH
63974: CALL 65753 0 3
// end ;
63978: GO 63876
63980: POP
63981: POP
// if enchidnas then
63982: LD_VAR 0 4
63986: IFFALSE 64053
// for i = 1 to enchidnas do
63988: LD_ADDR_VAR 0 11
63992: PUSH
63993: DOUBLE
63994: LD_INT 1
63996: DEC
63997: ST_TO_ADDR
63998: LD_VAR 0 4
64002: PUSH
64003: FOR_TO
64004: IFFALSE 64051
// begin hc_class = 13 ;
64006: LD_ADDR_OWVAR 28
64010: PUSH
64011: LD_INT 13
64013: ST_TO_ADDR
// hc_gallery =  ;
64014: LD_ADDR_OWVAR 33
64018: PUSH
64019: LD_STRING 
64021: ST_TO_ADDR
// animal := CreateHuman ;
64022: LD_ADDR_VAR 0 12
64026: PUSH
64027: CALL_OW 44
64031: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64032: LD_VAR 0 12
64036: PPUSH
64037: LD_VAR 0 8
64041: PPUSH
64042: LD_INT 0
64044: PPUSH
64045: CALL 65753 0 3
// end ;
64049: GO 64003
64051: POP
64052: POP
// if fishes then
64053: LD_VAR 0 7
64057: IFFALSE 64124
// for i = 1 to fishes do
64059: LD_ADDR_VAR 0 11
64063: PUSH
64064: DOUBLE
64065: LD_INT 1
64067: DEC
64068: ST_TO_ADDR
64069: LD_VAR 0 7
64073: PUSH
64074: FOR_TO
64075: IFFALSE 64122
// begin hc_class = 20 ;
64077: LD_ADDR_OWVAR 28
64081: PUSH
64082: LD_INT 20
64084: ST_TO_ADDR
// hc_gallery =  ;
64085: LD_ADDR_OWVAR 33
64089: PUSH
64090: LD_STRING 
64092: ST_TO_ADDR
// animal := CreateHuman ;
64093: LD_ADDR_VAR 0 12
64097: PUSH
64098: CALL_OW 44
64102: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
64103: LD_VAR 0 12
64107: PPUSH
64108: LD_VAR 0 9
64112: PPUSH
64113: LD_INT 0
64115: PPUSH
64116: CALL 65753 0 3
// end ;
64120: GO 64074
64122: POP
64123: POP
// end ;
64124: LD_VAR 0 10
64128: RET
// export function WantHeal ( sci , unit ) ; begin
64129: LD_INT 0
64131: PPUSH
// if GetTaskList ( sci ) > 0 then
64132: LD_VAR 0 1
64136: PPUSH
64137: CALL_OW 437
64141: PUSH
64142: LD_INT 0
64144: GREATER
64145: IFFALSE 64215
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
64147: LD_VAR 0 1
64151: PPUSH
64152: CALL_OW 437
64156: PUSH
64157: LD_INT 1
64159: ARRAY
64160: PUSH
64161: LD_INT 1
64163: ARRAY
64164: PUSH
64165: LD_STRING l
64167: EQUAL
64168: PUSH
64169: LD_VAR 0 1
64173: PPUSH
64174: CALL_OW 437
64178: PUSH
64179: LD_INT 1
64181: ARRAY
64182: PUSH
64183: LD_INT 4
64185: ARRAY
64186: PUSH
64187: LD_VAR 0 2
64191: EQUAL
64192: AND
64193: IFFALSE 64205
// result := true else
64195: LD_ADDR_VAR 0 3
64199: PUSH
64200: LD_INT 1
64202: ST_TO_ADDR
64203: GO 64213
// result := false ;
64205: LD_ADDR_VAR 0 3
64209: PUSH
64210: LD_INT 0
64212: ST_TO_ADDR
// end else
64213: GO 64223
// result := false ;
64215: LD_ADDR_VAR 0 3
64219: PUSH
64220: LD_INT 0
64222: ST_TO_ADDR
// end ;
64223: LD_VAR 0 3
64227: RET
// export function HealTarget ( sci ) ; begin
64228: LD_INT 0
64230: PPUSH
// if not sci then
64231: LD_VAR 0 1
64235: NOT
64236: IFFALSE 64240
// exit ;
64238: GO 64305
// result := 0 ;
64240: LD_ADDR_VAR 0 2
64244: PUSH
64245: LD_INT 0
64247: ST_TO_ADDR
// if GetTaskList ( sci ) then
64248: LD_VAR 0 1
64252: PPUSH
64253: CALL_OW 437
64257: IFFALSE 64305
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
64259: LD_VAR 0 1
64263: PPUSH
64264: CALL_OW 437
64268: PUSH
64269: LD_INT 1
64271: ARRAY
64272: PUSH
64273: LD_INT 1
64275: ARRAY
64276: PUSH
64277: LD_STRING l
64279: EQUAL
64280: IFFALSE 64305
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
64282: LD_ADDR_VAR 0 2
64286: PUSH
64287: LD_VAR 0 1
64291: PPUSH
64292: CALL_OW 437
64296: PUSH
64297: LD_INT 1
64299: ARRAY
64300: PUSH
64301: LD_INT 4
64303: ARRAY
64304: ST_TO_ADDR
// end ;
64305: LD_VAR 0 2
64309: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
64310: LD_INT 0
64312: PPUSH
64313: PPUSH
64314: PPUSH
64315: PPUSH
// if not base_units then
64316: LD_VAR 0 1
64320: NOT
64321: IFFALSE 64325
// exit ;
64323: GO 64412
// result := false ;
64325: LD_ADDR_VAR 0 2
64329: PUSH
64330: LD_INT 0
64332: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
64333: LD_ADDR_VAR 0 5
64337: PUSH
64338: LD_VAR 0 1
64342: PPUSH
64343: LD_INT 21
64345: PUSH
64346: LD_INT 3
64348: PUSH
64349: EMPTY
64350: LIST
64351: LIST
64352: PPUSH
64353: CALL_OW 72
64357: ST_TO_ADDR
// if not tmp then
64358: LD_VAR 0 5
64362: NOT
64363: IFFALSE 64367
// exit ;
64365: GO 64412
// for i in tmp do
64367: LD_ADDR_VAR 0 3
64371: PUSH
64372: LD_VAR 0 5
64376: PUSH
64377: FOR_IN
64378: IFFALSE 64410
// begin result := EnemyInRange ( i , 22 ) ;
64380: LD_ADDR_VAR 0 2
64384: PUSH
64385: LD_VAR 0 3
64389: PPUSH
64390: LD_INT 22
64392: PPUSH
64393: CALL 61999 0 2
64397: ST_TO_ADDR
// if result then
64398: LD_VAR 0 2
64402: IFFALSE 64408
// exit ;
64404: POP
64405: POP
64406: GO 64412
// end ;
64408: GO 64377
64410: POP
64411: POP
// end ;
64412: LD_VAR 0 2
64416: RET
// export function FilterByTag ( units , tag ) ; begin
64417: LD_INT 0
64419: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
64420: LD_ADDR_VAR 0 3
64424: PUSH
64425: LD_VAR 0 1
64429: PPUSH
64430: LD_INT 120
64432: PUSH
64433: LD_VAR 0 2
64437: PUSH
64438: EMPTY
64439: LIST
64440: LIST
64441: PPUSH
64442: CALL_OW 72
64446: ST_TO_ADDR
// end ;
64447: LD_VAR 0 3
64451: RET
// export function IsDriver ( un ) ; begin
64452: LD_INT 0
64454: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
64455: LD_ADDR_VAR 0 2
64459: PUSH
64460: LD_VAR 0 1
64464: PUSH
64465: LD_INT 55
64467: PUSH
64468: EMPTY
64469: LIST
64470: PPUSH
64471: CALL_OW 69
64475: IN
64476: ST_TO_ADDR
// end ;
64477: LD_VAR 0 2
64481: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
64482: LD_INT 0
64484: PPUSH
64485: PPUSH
// list := [ ] ;
64486: LD_ADDR_VAR 0 5
64490: PUSH
64491: EMPTY
64492: ST_TO_ADDR
// case d of 0 :
64493: LD_VAR 0 3
64497: PUSH
64498: LD_INT 0
64500: DOUBLE
64501: EQUAL
64502: IFTRUE 64506
64504: GO 64639
64506: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
64507: LD_ADDR_VAR 0 5
64511: PUSH
64512: LD_VAR 0 1
64516: PUSH
64517: LD_INT 4
64519: MINUS
64520: PUSH
64521: LD_VAR 0 2
64525: PUSH
64526: LD_INT 4
64528: MINUS
64529: PUSH
64530: LD_INT 2
64532: PUSH
64533: EMPTY
64534: LIST
64535: LIST
64536: LIST
64537: PUSH
64538: LD_VAR 0 1
64542: PUSH
64543: LD_INT 3
64545: MINUS
64546: PUSH
64547: LD_VAR 0 2
64551: PUSH
64552: LD_INT 1
64554: PUSH
64555: EMPTY
64556: LIST
64557: LIST
64558: LIST
64559: PUSH
64560: LD_VAR 0 1
64564: PUSH
64565: LD_INT 4
64567: PLUS
64568: PUSH
64569: LD_VAR 0 2
64573: PUSH
64574: LD_INT 4
64576: PUSH
64577: EMPTY
64578: LIST
64579: LIST
64580: LIST
64581: PUSH
64582: LD_VAR 0 1
64586: PUSH
64587: LD_INT 3
64589: PLUS
64590: PUSH
64591: LD_VAR 0 2
64595: PUSH
64596: LD_INT 3
64598: PLUS
64599: PUSH
64600: LD_INT 5
64602: PUSH
64603: EMPTY
64604: LIST
64605: LIST
64606: LIST
64607: PUSH
64608: LD_VAR 0 1
64612: PUSH
64613: LD_VAR 0 2
64617: PUSH
64618: LD_INT 4
64620: PLUS
64621: PUSH
64622: LD_INT 0
64624: PUSH
64625: EMPTY
64626: LIST
64627: LIST
64628: LIST
64629: PUSH
64630: EMPTY
64631: LIST
64632: LIST
64633: LIST
64634: LIST
64635: LIST
64636: ST_TO_ADDR
// end ; 1 :
64637: GO 65337
64639: LD_INT 1
64641: DOUBLE
64642: EQUAL
64643: IFTRUE 64647
64645: GO 64780
64647: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
64648: LD_ADDR_VAR 0 5
64652: PUSH
64653: LD_VAR 0 1
64657: PUSH
64658: LD_VAR 0 2
64662: PUSH
64663: LD_INT 4
64665: MINUS
64666: PUSH
64667: LD_INT 3
64669: PUSH
64670: EMPTY
64671: LIST
64672: LIST
64673: LIST
64674: PUSH
64675: LD_VAR 0 1
64679: PUSH
64680: LD_INT 3
64682: MINUS
64683: PUSH
64684: LD_VAR 0 2
64688: PUSH
64689: LD_INT 3
64691: MINUS
64692: PUSH
64693: LD_INT 2
64695: PUSH
64696: EMPTY
64697: LIST
64698: LIST
64699: LIST
64700: PUSH
64701: LD_VAR 0 1
64705: PUSH
64706: LD_INT 4
64708: MINUS
64709: PUSH
64710: LD_VAR 0 2
64714: PUSH
64715: LD_INT 1
64717: PUSH
64718: EMPTY
64719: LIST
64720: LIST
64721: LIST
64722: PUSH
64723: LD_VAR 0 1
64727: PUSH
64728: LD_VAR 0 2
64732: PUSH
64733: LD_INT 3
64735: PLUS
64736: PUSH
64737: LD_INT 0
64739: PUSH
64740: EMPTY
64741: LIST
64742: LIST
64743: LIST
64744: PUSH
64745: LD_VAR 0 1
64749: PUSH
64750: LD_INT 4
64752: PLUS
64753: PUSH
64754: LD_VAR 0 2
64758: PUSH
64759: LD_INT 4
64761: PLUS
64762: PUSH
64763: LD_INT 5
64765: PUSH
64766: EMPTY
64767: LIST
64768: LIST
64769: LIST
64770: PUSH
64771: EMPTY
64772: LIST
64773: LIST
64774: LIST
64775: LIST
64776: LIST
64777: ST_TO_ADDR
// end ; 2 :
64778: GO 65337
64780: LD_INT 2
64782: DOUBLE
64783: EQUAL
64784: IFTRUE 64788
64786: GO 64917
64788: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
64789: LD_ADDR_VAR 0 5
64793: PUSH
64794: LD_VAR 0 1
64798: PUSH
64799: LD_VAR 0 2
64803: PUSH
64804: LD_INT 3
64806: MINUS
64807: PUSH
64808: LD_INT 3
64810: PUSH
64811: EMPTY
64812: LIST
64813: LIST
64814: LIST
64815: PUSH
64816: LD_VAR 0 1
64820: PUSH
64821: LD_INT 4
64823: PLUS
64824: PUSH
64825: LD_VAR 0 2
64829: PUSH
64830: LD_INT 4
64832: PUSH
64833: EMPTY
64834: LIST
64835: LIST
64836: LIST
64837: PUSH
64838: LD_VAR 0 1
64842: PUSH
64843: LD_VAR 0 2
64847: PUSH
64848: LD_INT 4
64850: PLUS
64851: PUSH
64852: LD_INT 0
64854: PUSH
64855: EMPTY
64856: LIST
64857: LIST
64858: LIST
64859: PUSH
64860: LD_VAR 0 1
64864: PUSH
64865: LD_INT 3
64867: MINUS
64868: PUSH
64869: LD_VAR 0 2
64873: PUSH
64874: LD_INT 1
64876: PUSH
64877: EMPTY
64878: LIST
64879: LIST
64880: LIST
64881: PUSH
64882: LD_VAR 0 1
64886: PUSH
64887: LD_INT 4
64889: MINUS
64890: PUSH
64891: LD_VAR 0 2
64895: PUSH
64896: LD_INT 4
64898: MINUS
64899: PUSH
64900: LD_INT 2
64902: PUSH
64903: EMPTY
64904: LIST
64905: LIST
64906: LIST
64907: PUSH
64908: EMPTY
64909: LIST
64910: LIST
64911: LIST
64912: LIST
64913: LIST
64914: ST_TO_ADDR
// end ; 3 :
64915: GO 65337
64917: LD_INT 3
64919: DOUBLE
64920: EQUAL
64921: IFTRUE 64925
64923: GO 65058
64925: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
64926: LD_ADDR_VAR 0 5
64930: PUSH
64931: LD_VAR 0 1
64935: PUSH
64936: LD_INT 3
64938: PLUS
64939: PUSH
64940: LD_VAR 0 2
64944: PUSH
64945: LD_INT 4
64947: PUSH
64948: EMPTY
64949: LIST
64950: LIST
64951: LIST
64952: PUSH
64953: LD_VAR 0 1
64957: PUSH
64958: LD_INT 4
64960: PLUS
64961: PUSH
64962: LD_VAR 0 2
64966: PUSH
64967: LD_INT 4
64969: PLUS
64970: PUSH
64971: LD_INT 5
64973: PUSH
64974: EMPTY
64975: LIST
64976: LIST
64977: LIST
64978: PUSH
64979: LD_VAR 0 1
64983: PUSH
64984: LD_INT 4
64986: MINUS
64987: PUSH
64988: LD_VAR 0 2
64992: PUSH
64993: LD_INT 1
64995: PUSH
64996: EMPTY
64997: LIST
64998: LIST
64999: LIST
65000: PUSH
65001: LD_VAR 0 1
65005: PUSH
65006: LD_VAR 0 2
65010: PUSH
65011: LD_INT 4
65013: MINUS
65014: PUSH
65015: LD_INT 3
65017: PUSH
65018: EMPTY
65019: LIST
65020: LIST
65021: LIST
65022: PUSH
65023: LD_VAR 0 1
65027: PUSH
65028: LD_INT 3
65030: MINUS
65031: PUSH
65032: LD_VAR 0 2
65036: PUSH
65037: LD_INT 3
65039: MINUS
65040: PUSH
65041: LD_INT 2
65043: PUSH
65044: EMPTY
65045: LIST
65046: LIST
65047: LIST
65048: PUSH
65049: EMPTY
65050: LIST
65051: LIST
65052: LIST
65053: LIST
65054: LIST
65055: ST_TO_ADDR
// end ; 4 :
65056: GO 65337
65058: LD_INT 4
65060: DOUBLE
65061: EQUAL
65062: IFTRUE 65066
65064: GO 65199
65066: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
65067: LD_ADDR_VAR 0 5
65071: PUSH
65072: LD_VAR 0 1
65076: PUSH
65077: LD_VAR 0 2
65081: PUSH
65082: LD_INT 4
65084: PLUS
65085: PUSH
65086: LD_INT 0
65088: PUSH
65089: EMPTY
65090: LIST
65091: LIST
65092: LIST
65093: PUSH
65094: LD_VAR 0 1
65098: PUSH
65099: LD_INT 3
65101: PLUS
65102: PUSH
65103: LD_VAR 0 2
65107: PUSH
65108: LD_INT 3
65110: PLUS
65111: PUSH
65112: LD_INT 5
65114: PUSH
65115: EMPTY
65116: LIST
65117: LIST
65118: LIST
65119: PUSH
65120: LD_VAR 0 1
65124: PUSH
65125: LD_INT 4
65127: PLUS
65128: PUSH
65129: LD_VAR 0 2
65133: PUSH
65134: LD_INT 4
65136: PUSH
65137: EMPTY
65138: LIST
65139: LIST
65140: LIST
65141: PUSH
65142: LD_VAR 0 1
65146: PUSH
65147: LD_VAR 0 2
65151: PUSH
65152: LD_INT 3
65154: MINUS
65155: PUSH
65156: LD_INT 3
65158: PUSH
65159: EMPTY
65160: LIST
65161: LIST
65162: LIST
65163: PUSH
65164: LD_VAR 0 1
65168: PUSH
65169: LD_INT 4
65171: MINUS
65172: PUSH
65173: LD_VAR 0 2
65177: PUSH
65178: LD_INT 4
65180: MINUS
65181: PUSH
65182: LD_INT 2
65184: PUSH
65185: EMPTY
65186: LIST
65187: LIST
65188: LIST
65189: PUSH
65190: EMPTY
65191: LIST
65192: LIST
65193: LIST
65194: LIST
65195: LIST
65196: ST_TO_ADDR
// end ; 5 :
65197: GO 65337
65199: LD_INT 5
65201: DOUBLE
65202: EQUAL
65203: IFTRUE 65207
65205: GO 65336
65207: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
65208: LD_ADDR_VAR 0 5
65212: PUSH
65213: LD_VAR 0 1
65217: PUSH
65218: LD_INT 4
65220: MINUS
65221: PUSH
65222: LD_VAR 0 2
65226: PUSH
65227: LD_INT 1
65229: PUSH
65230: EMPTY
65231: LIST
65232: LIST
65233: LIST
65234: PUSH
65235: LD_VAR 0 1
65239: PUSH
65240: LD_VAR 0 2
65244: PUSH
65245: LD_INT 4
65247: MINUS
65248: PUSH
65249: LD_INT 3
65251: PUSH
65252: EMPTY
65253: LIST
65254: LIST
65255: LIST
65256: PUSH
65257: LD_VAR 0 1
65261: PUSH
65262: LD_INT 4
65264: PLUS
65265: PUSH
65266: LD_VAR 0 2
65270: PUSH
65271: LD_INT 4
65273: PLUS
65274: PUSH
65275: LD_INT 5
65277: PUSH
65278: EMPTY
65279: LIST
65280: LIST
65281: LIST
65282: PUSH
65283: LD_VAR 0 1
65287: PUSH
65288: LD_INT 3
65290: PLUS
65291: PUSH
65292: LD_VAR 0 2
65296: PUSH
65297: LD_INT 4
65299: PUSH
65300: EMPTY
65301: LIST
65302: LIST
65303: LIST
65304: PUSH
65305: LD_VAR 0 1
65309: PUSH
65310: LD_VAR 0 2
65314: PUSH
65315: LD_INT 3
65317: PLUS
65318: PUSH
65319: LD_INT 0
65321: PUSH
65322: EMPTY
65323: LIST
65324: LIST
65325: LIST
65326: PUSH
65327: EMPTY
65328: LIST
65329: LIST
65330: LIST
65331: LIST
65332: LIST
65333: ST_TO_ADDR
// end ; end ;
65334: GO 65337
65336: POP
// result := list ;
65337: LD_ADDR_VAR 0 4
65341: PUSH
65342: LD_VAR 0 5
65346: ST_TO_ADDR
// end ;
65347: LD_VAR 0 4
65351: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
65352: LD_INT 0
65354: PPUSH
65355: PPUSH
65356: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
65357: LD_VAR 0 1
65361: NOT
65362: PUSH
65363: LD_VAR 0 2
65367: PUSH
65368: LD_INT 1
65370: PUSH
65371: LD_INT 2
65373: PUSH
65374: LD_INT 3
65376: PUSH
65377: LD_INT 4
65379: PUSH
65380: EMPTY
65381: LIST
65382: LIST
65383: LIST
65384: LIST
65385: IN
65386: NOT
65387: OR
65388: IFFALSE 65392
// exit ;
65390: GO 65475
// tmp := [ ] ;
65392: LD_ADDR_VAR 0 5
65396: PUSH
65397: EMPTY
65398: ST_TO_ADDR
// for i in units do
65399: LD_ADDR_VAR 0 4
65403: PUSH
65404: LD_VAR 0 1
65408: PUSH
65409: FOR_IN
65410: IFFALSE 65444
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
65412: LD_ADDR_VAR 0 5
65416: PUSH
65417: LD_VAR 0 5
65421: PPUSH
65422: LD_VAR 0 4
65426: PPUSH
65427: LD_VAR 0 2
65431: PPUSH
65432: CALL_OW 259
65436: PPUSH
65437: CALL 66848 0 2
65441: ST_TO_ADDR
65442: GO 65409
65444: POP
65445: POP
// if not tmp then
65446: LD_VAR 0 5
65450: NOT
65451: IFFALSE 65455
// exit ;
65453: GO 65475
// result := SortListByListDesc ( units , tmp ) ;
65455: LD_ADDR_VAR 0 3
65459: PUSH
65460: LD_VAR 0 1
65464: PPUSH
65465: LD_VAR 0 5
65469: PPUSH
65470: CALL_OW 77
65474: ST_TO_ADDR
// end ;
65475: LD_VAR 0 3
65479: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
65480: LD_INT 0
65482: PPUSH
65483: PPUSH
65484: PPUSH
// result := false ;
65485: LD_ADDR_VAR 0 3
65489: PUSH
65490: LD_INT 0
65492: ST_TO_ADDR
// if not building then
65493: LD_VAR 0 2
65497: NOT
65498: IFFALSE 65502
// exit ;
65500: GO 65640
// x := GetX ( building ) ;
65502: LD_ADDR_VAR 0 4
65506: PUSH
65507: LD_VAR 0 2
65511: PPUSH
65512: CALL_OW 250
65516: ST_TO_ADDR
// y := GetY ( building ) ;
65517: LD_ADDR_VAR 0 5
65521: PUSH
65522: LD_VAR 0 2
65526: PPUSH
65527: CALL_OW 251
65531: ST_TO_ADDR
// if not x or not y then
65532: LD_VAR 0 4
65536: NOT
65537: PUSH
65538: LD_VAR 0 5
65542: NOT
65543: OR
65544: IFFALSE 65548
// exit ;
65546: GO 65640
// if GetTaskList ( unit ) then
65548: LD_VAR 0 1
65552: PPUSH
65553: CALL_OW 437
65557: IFFALSE 65640
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
65559: LD_STRING e
65561: PUSH
65562: LD_VAR 0 1
65566: PPUSH
65567: CALL_OW 437
65571: PUSH
65572: LD_INT 1
65574: ARRAY
65575: PUSH
65576: LD_INT 1
65578: ARRAY
65579: EQUAL
65580: PUSH
65581: LD_VAR 0 4
65585: PUSH
65586: LD_VAR 0 1
65590: PPUSH
65591: CALL_OW 437
65595: PUSH
65596: LD_INT 1
65598: ARRAY
65599: PUSH
65600: LD_INT 2
65602: ARRAY
65603: EQUAL
65604: AND
65605: PUSH
65606: LD_VAR 0 5
65610: PUSH
65611: LD_VAR 0 1
65615: PPUSH
65616: CALL_OW 437
65620: PUSH
65621: LD_INT 1
65623: ARRAY
65624: PUSH
65625: LD_INT 3
65627: ARRAY
65628: EQUAL
65629: AND
65630: IFFALSE 65640
// result := true end ;
65632: LD_ADDR_VAR 0 3
65636: PUSH
65637: LD_INT 1
65639: ST_TO_ADDR
// end ;
65640: LD_VAR 0 3
65644: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
65645: LD_INT 0
65647: PPUSH
// result := false ;
65648: LD_ADDR_VAR 0 4
65652: PUSH
65653: LD_INT 0
65655: ST_TO_ADDR
// if GetTaskList ( unit ) then
65656: LD_VAR 0 1
65660: PPUSH
65661: CALL_OW 437
65665: IFFALSE 65748
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
65667: LD_STRING M
65669: PUSH
65670: LD_VAR 0 1
65674: PPUSH
65675: CALL_OW 437
65679: PUSH
65680: LD_INT 1
65682: ARRAY
65683: PUSH
65684: LD_INT 1
65686: ARRAY
65687: EQUAL
65688: PUSH
65689: LD_VAR 0 2
65693: PUSH
65694: LD_VAR 0 1
65698: PPUSH
65699: CALL_OW 437
65703: PUSH
65704: LD_INT 1
65706: ARRAY
65707: PUSH
65708: LD_INT 2
65710: ARRAY
65711: EQUAL
65712: AND
65713: PUSH
65714: LD_VAR 0 3
65718: PUSH
65719: LD_VAR 0 1
65723: PPUSH
65724: CALL_OW 437
65728: PUSH
65729: LD_INT 1
65731: ARRAY
65732: PUSH
65733: LD_INT 3
65735: ARRAY
65736: EQUAL
65737: AND
65738: IFFALSE 65748
// result := true ;
65740: LD_ADDR_VAR 0 4
65744: PUSH
65745: LD_INT 1
65747: ST_TO_ADDR
// end ; end ;
65748: LD_VAR 0 4
65752: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
65753: LD_INT 0
65755: PPUSH
65756: PPUSH
65757: PPUSH
65758: PPUSH
// if not unit or not area then
65759: LD_VAR 0 1
65763: NOT
65764: PUSH
65765: LD_VAR 0 2
65769: NOT
65770: OR
65771: IFFALSE 65775
// exit ;
65773: GO 65951
// tmp := AreaToList ( area , i ) ;
65775: LD_ADDR_VAR 0 6
65779: PUSH
65780: LD_VAR 0 2
65784: PPUSH
65785: LD_VAR 0 5
65789: PPUSH
65790: CALL_OW 517
65794: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
65795: LD_ADDR_VAR 0 5
65799: PUSH
65800: DOUBLE
65801: LD_INT 1
65803: DEC
65804: ST_TO_ADDR
65805: LD_VAR 0 6
65809: PUSH
65810: LD_INT 1
65812: ARRAY
65813: PUSH
65814: FOR_TO
65815: IFFALSE 65949
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
65817: LD_ADDR_VAR 0 7
65821: PUSH
65822: LD_VAR 0 6
65826: PUSH
65827: LD_INT 1
65829: ARRAY
65830: PUSH
65831: LD_VAR 0 5
65835: ARRAY
65836: PUSH
65837: LD_VAR 0 6
65841: PUSH
65842: LD_INT 2
65844: ARRAY
65845: PUSH
65846: LD_VAR 0 5
65850: ARRAY
65851: PUSH
65852: EMPTY
65853: LIST
65854: LIST
65855: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
65856: LD_INT 92
65858: PUSH
65859: LD_VAR 0 7
65863: PUSH
65864: LD_INT 1
65866: ARRAY
65867: PUSH
65868: LD_VAR 0 7
65872: PUSH
65873: LD_INT 2
65875: ARRAY
65876: PUSH
65877: LD_INT 2
65879: PUSH
65880: EMPTY
65881: LIST
65882: LIST
65883: LIST
65884: LIST
65885: PPUSH
65886: CALL_OW 69
65890: PUSH
65891: LD_INT 0
65893: EQUAL
65894: IFFALSE 65947
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
65896: LD_VAR 0 1
65900: PPUSH
65901: LD_VAR 0 7
65905: PUSH
65906: LD_INT 1
65908: ARRAY
65909: PPUSH
65910: LD_VAR 0 7
65914: PUSH
65915: LD_INT 2
65917: ARRAY
65918: PPUSH
65919: LD_VAR 0 3
65923: PPUSH
65924: CALL_OW 48
// result := IsPlaced ( unit ) ;
65928: LD_ADDR_VAR 0 4
65932: PUSH
65933: LD_VAR 0 1
65937: PPUSH
65938: CALL_OW 305
65942: ST_TO_ADDR
// exit ;
65943: POP
65944: POP
65945: GO 65951
// end ; end ;
65947: GO 65814
65949: POP
65950: POP
// end ;
65951: LD_VAR 0 4
65955: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
65956: LD_INT 0
65958: PPUSH
65959: PPUSH
65960: PPUSH
// if not side or side > 8 then
65961: LD_VAR 0 1
65965: NOT
65966: PUSH
65967: LD_VAR 0 1
65971: PUSH
65972: LD_INT 8
65974: GREATER
65975: OR
65976: IFFALSE 65980
// exit ;
65978: GO 66167
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
65980: LD_ADDR_VAR 0 4
65984: PUSH
65985: LD_INT 22
65987: PUSH
65988: LD_VAR 0 1
65992: PUSH
65993: EMPTY
65994: LIST
65995: LIST
65996: PUSH
65997: LD_INT 21
65999: PUSH
66000: LD_INT 3
66002: PUSH
66003: EMPTY
66004: LIST
66005: LIST
66006: PUSH
66007: EMPTY
66008: LIST
66009: LIST
66010: PPUSH
66011: CALL_OW 69
66015: ST_TO_ADDR
// if not tmp then
66016: LD_VAR 0 4
66020: NOT
66021: IFFALSE 66025
// exit ;
66023: GO 66167
// enable_addtolog := true ;
66025: LD_ADDR_OWVAR 81
66029: PUSH
66030: LD_INT 1
66032: ST_TO_ADDR
// AddToLog ( [ ) ;
66033: LD_STRING [
66035: PPUSH
66036: CALL_OW 561
// for i in tmp do
66040: LD_ADDR_VAR 0 3
66044: PUSH
66045: LD_VAR 0 4
66049: PUSH
66050: FOR_IN
66051: IFFALSE 66158
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
66053: LD_STRING [
66055: PUSH
66056: LD_VAR 0 3
66060: PPUSH
66061: CALL_OW 266
66065: STR
66066: PUSH
66067: LD_STRING , 
66069: STR
66070: PUSH
66071: LD_VAR 0 3
66075: PPUSH
66076: CALL_OW 250
66080: STR
66081: PUSH
66082: LD_STRING , 
66084: STR
66085: PUSH
66086: LD_VAR 0 3
66090: PPUSH
66091: CALL_OW 251
66095: STR
66096: PUSH
66097: LD_STRING , 
66099: STR
66100: PUSH
66101: LD_VAR 0 3
66105: PPUSH
66106: CALL_OW 254
66110: STR
66111: PUSH
66112: LD_STRING , 
66114: STR
66115: PUSH
66116: LD_VAR 0 3
66120: PPUSH
66121: LD_INT 1
66123: PPUSH
66124: CALL_OW 268
66128: STR
66129: PUSH
66130: LD_STRING , 
66132: STR
66133: PUSH
66134: LD_VAR 0 3
66138: PPUSH
66139: LD_INT 2
66141: PPUSH
66142: CALL_OW 268
66146: STR
66147: PUSH
66148: LD_STRING ],
66150: STR
66151: PPUSH
66152: CALL_OW 561
// end ;
66156: GO 66050
66158: POP
66159: POP
// AddToLog ( ]; ) ;
66160: LD_STRING ];
66162: PPUSH
66163: CALL_OW 561
// end ;
66167: LD_VAR 0 2
66171: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
66172: LD_INT 0
66174: PPUSH
66175: PPUSH
66176: PPUSH
66177: PPUSH
66178: PPUSH
// if not area or not rate or not max then
66179: LD_VAR 0 1
66183: NOT
66184: PUSH
66185: LD_VAR 0 2
66189: NOT
66190: OR
66191: PUSH
66192: LD_VAR 0 4
66196: NOT
66197: OR
66198: IFFALSE 66202
// exit ;
66200: GO 66391
// while 1 do
66202: LD_INT 1
66204: IFFALSE 66391
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
66206: LD_ADDR_VAR 0 9
66210: PUSH
66211: LD_VAR 0 1
66215: PPUSH
66216: LD_INT 1
66218: PPUSH
66219: CALL_OW 287
66223: PUSH
66224: LD_INT 10
66226: MUL
66227: ST_TO_ADDR
// r := rate / 10 ;
66228: LD_ADDR_VAR 0 7
66232: PUSH
66233: LD_VAR 0 2
66237: PUSH
66238: LD_INT 10
66240: DIVREAL
66241: ST_TO_ADDR
// time := 1 1$00 ;
66242: LD_ADDR_VAR 0 8
66246: PUSH
66247: LD_INT 2100
66249: ST_TO_ADDR
// if amount < min then
66250: LD_VAR 0 9
66254: PUSH
66255: LD_VAR 0 3
66259: LESS
66260: IFFALSE 66278
// r := r * 2 else
66262: LD_ADDR_VAR 0 7
66266: PUSH
66267: LD_VAR 0 7
66271: PUSH
66272: LD_INT 2
66274: MUL
66275: ST_TO_ADDR
66276: GO 66304
// if amount > max then
66278: LD_VAR 0 9
66282: PUSH
66283: LD_VAR 0 4
66287: GREATER
66288: IFFALSE 66304
// r := r / 2 ;
66290: LD_ADDR_VAR 0 7
66294: PUSH
66295: LD_VAR 0 7
66299: PUSH
66300: LD_INT 2
66302: DIVREAL
66303: ST_TO_ADDR
// time := time / r ;
66304: LD_ADDR_VAR 0 8
66308: PUSH
66309: LD_VAR 0 8
66313: PUSH
66314: LD_VAR 0 7
66318: DIVREAL
66319: ST_TO_ADDR
// if time < 0 then
66320: LD_VAR 0 8
66324: PUSH
66325: LD_INT 0
66327: LESS
66328: IFFALSE 66345
// time := time * - 1 ;
66330: LD_ADDR_VAR 0 8
66334: PUSH
66335: LD_VAR 0 8
66339: PUSH
66340: LD_INT 1
66342: NEG
66343: MUL
66344: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
66345: LD_VAR 0 8
66349: PUSH
66350: LD_INT 35
66352: PPUSH
66353: LD_INT 875
66355: PPUSH
66356: CALL_OW 12
66360: PLUS
66361: PPUSH
66362: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
66366: LD_INT 1
66368: PPUSH
66369: LD_INT 5
66371: PPUSH
66372: CALL_OW 12
66376: PPUSH
66377: LD_VAR 0 1
66381: PPUSH
66382: LD_INT 1
66384: PPUSH
66385: CALL_OW 55
// end ;
66389: GO 66202
// end ;
66391: LD_VAR 0 5
66395: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
66396: LD_INT 0
66398: PPUSH
66399: PPUSH
66400: PPUSH
66401: PPUSH
66402: PPUSH
66403: PPUSH
66404: PPUSH
66405: PPUSH
// if not turrets or not factories then
66406: LD_VAR 0 1
66410: NOT
66411: PUSH
66412: LD_VAR 0 2
66416: NOT
66417: OR
66418: IFFALSE 66422
// exit ;
66420: GO 66729
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
66422: LD_ADDR_VAR 0 10
66426: PUSH
66427: LD_INT 5
66429: PUSH
66430: LD_INT 6
66432: PUSH
66433: EMPTY
66434: LIST
66435: LIST
66436: PUSH
66437: LD_INT 2
66439: PUSH
66440: LD_INT 4
66442: PUSH
66443: EMPTY
66444: LIST
66445: LIST
66446: PUSH
66447: LD_INT 3
66449: PUSH
66450: LD_INT 5
66452: PUSH
66453: EMPTY
66454: LIST
66455: LIST
66456: PUSH
66457: EMPTY
66458: LIST
66459: LIST
66460: LIST
66461: PUSH
66462: LD_INT 24
66464: PUSH
66465: LD_INT 25
66467: PUSH
66468: EMPTY
66469: LIST
66470: LIST
66471: PUSH
66472: LD_INT 23
66474: PUSH
66475: LD_INT 27
66477: PUSH
66478: EMPTY
66479: LIST
66480: LIST
66481: PUSH
66482: EMPTY
66483: LIST
66484: LIST
66485: PUSH
66486: LD_INT 42
66488: PUSH
66489: LD_INT 43
66491: PUSH
66492: EMPTY
66493: LIST
66494: LIST
66495: PUSH
66496: LD_INT 44
66498: PUSH
66499: LD_INT 46
66501: PUSH
66502: EMPTY
66503: LIST
66504: LIST
66505: PUSH
66506: LD_INT 45
66508: PUSH
66509: LD_INT 47
66511: PUSH
66512: EMPTY
66513: LIST
66514: LIST
66515: PUSH
66516: EMPTY
66517: LIST
66518: LIST
66519: LIST
66520: PUSH
66521: EMPTY
66522: LIST
66523: LIST
66524: LIST
66525: ST_TO_ADDR
// result := [ ] ;
66526: LD_ADDR_VAR 0 3
66530: PUSH
66531: EMPTY
66532: ST_TO_ADDR
// for i in turrets do
66533: LD_ADDR_VAR 0 4
66537: PUSH
66538: LD_VAR 0 1
66542: PUSH
66543: FOR_IN
66544: IFFALSE 66727
// begin nat := GetNation ( i ) ;
66546: LD_ADDR_VAR 0 7
66550: PUSH
66551: LD_VAR 0 4
66555: PPUSH
66556: CALL_OW 248
66560: ST_TO_ADDR
// weapon := 0 ;
66561: LD_ADDR_VAR 0 8
66565: PUSH
66566: LD_INT 0
66568: ST_TO_ADDR
// if not nat then
66569: LD_VAR 0 7
66573: NOT
66574: IFFALSE 66578
// continue ;
66576: GO 66543
// for j in list [ nat ] do
66578: LD_ADDR_VAR 0 5
66582: PUSH
66583: LD_VAR 0 10
66587: PUSH
66588: LD_VAR 0 7
66592: ARRAY
66593: PUSH
66594: FOR_IN
66595: IFFALSE 66636
// if GetBWeapon ( i ) = j [ 1 ] then
66597: LD_VAR 0 4
66601: PPUSH
66602: CALL_OW 269
66606: PUSH
66607: LD_VAR 0 5
66611: PUSH
66612: LD_INT 1
66614: ARRAY
66615: EQUAL
66616: IFFALSE 66634
// begin weapon := j [ 2 ] ;
66618: LD_ADDR_VAR 0 8
66622: PUSH
66623: LD_VAR 0 5
66627: PUSH
66628: LD_INT 2
66630: ARRAY
66631: ST_TO_ADDR
// break ;
66632: GO 66636
// end ;
66634: GO 66594
66636: POP
66637: POP
// if not weapon then
66638: LD_VAR 0 8
66642: NOT
66643: IFFALSE 66647
// continue ;
66645: GO 66543
// for k in factories do
66647: LD_ADDR_VAR 0 6
66651: PUSH
66652: LD_VAR 0 2
66656: PUSH
66657: FOR_IN
66658: IFFALSE 66723
// begin weapons := AvailableWeaponList ( k ) ;
66660: LD_ADDR_VAR 0 9
66664: PUSH
66665: LD_VAR 0 6
66669: PPUSH
66670: CALL_OW 478
66674: ST_TO_ADDR
// if not weapons then
66675: LD_VAR 0 9
66679: NOT
66680: IFFALSE 66684
// continue ;
66682: GO 66657
// if weapon in weapons then
66684: LD_VAR 0 8
66688: PUSH
66689: LD_VAR 0 9
66693: IN
66694: IFFALSE 66721
// begin result := [ i , weapon ] ;
66696: LD_ADDR_VAR 0 3
66700: PUSH
66701: LD_VAR 0 4
66705: PUSH
66706: LD_VAR 0 8
66710: PUSH
66711: EMPTY
66712: LIST
66713: LIST
66714: ST_TO_ADDR
// exit ;
66715: POP
66716: POP
66717: POP
66718: POP
66719: GO 66729
// end ; end ;
66721: GO 66657
66723: POP
66724: POP
// end ;
66725: GO 66543
66727: POP
66728: POP
// end ;
66729: LD_VAR 0 3
66733: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
66734: LD_INT 0
66736: PPUSH
// if not side or side > 8 then
66737: LD_VAR 0 3
66741: NOT
66742: PUSH
66743: LD_VAR 0 3
66747: PUSH
66748: LD_INT 8
66750: GREATER
66751: OR
66752: IFFALSE 66756
// exit ;
66754: GO 66815
// if not range then
66756: LD_VAR 0 4
66760: NOT
66761: IFFALSE 66772
// range := - 12 ;
66763: LD_ADDR_VAR 0 4
66767: PUSH
66768: LD_INT 12
66770: NEG
66771: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
66772: LD_VAR 0 1
66776: PPUSH
66777: LD_VAR 0 2
66781: PPUSH
66782: LD_VAR 0 3
66786: PPUSH
66787: LD_VAR 0 4
66791: PPUSH
66792: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
66796: LD_VAR 0 1
66800: PPUSH
66801: LD_VAR 0 2
66805: PPUSH
66806: LD_VAR 0 3
66810: PPUSH
66811: CALL_OW 331
// end ;
66815: LD_VAR 0 5
66819: RET
// export function Video ( mode ) ; begin
66820: LD_INT 0
66822: PPUSH
// ingame_video = mode ;
66823: LD_ADDR_OWVAR 52
66827: PUSH
66828: LD_VAR 0 1
66832: ST_TO_ADDR
// interface_hidden = mode ;
66833: LD_ADDR_OWVAR 54
66837: PUSH
66838: LD_VAR 0 1
66842: ST_TO_ADDR
// end ;
66843: LD_VAR 0 2
66847: RET
// export function Join ( array , element ) ; begin
66848: LD_INT 0
66850: PPUSH
// result := Replace ( array , array + 1 , element ) ;
66851: LD_ADDR_VAR 0 3
66855: PUSH
66856: LD_VAR 0 1
66860: PPUSH
66861: LD_VAR 0 1
66865: PUSH
66866: LD_INT 1
66868: PLUS
66869: PPUSH
66870: LD_VAR 0 2
66874: PPUSH
66875: CALL_OW 1
66879: ST_TO_ADDR
// end ;
66880: LD_VAR 0 3
66884: RET
// export function JoinUnion ( array , element ) ; begin
66885: LD_INT 0
66887: PPUSH
// result := array union element ;
66888: LD_ADDR_VAR 0 3
66892: PUSH
66893: LD_VAR 0 1
66897: PUSH
66898: LD_VAR 0 2
66902: UNION
66903: ST_TO_ADDR
// end ;
66904: LD_VAR 0 3
66908: RET
// export function GetBehemoths ( side ) ; begin
66909: LD_INT 0
66911: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
66912: LD_ADDR_VAR 0 2
66916: PUSH
66917: LD_INT 22
66919: PUSH
66920: LD_VAR 0 1
66924: PUSH
66925: EMPTY
66926: LIST
66927: LIST
66928: PUSH
66929: LD_INT 31
66931: PUSH
66932: LD_INT 25
66934: PUSH
66935: EMPTY
66936: LIST
66937: LIST
66938: PUSH
66939: EMPTY
66940: LIST
66941: LIST
66942: PPUSH
66943: CALL_OW 69
66947: ST_TO_ADDR
// end ;
66948: LD_VAR 0 2
66952: RET
// export function Shuffle ( array ) ; var i , index ; begin
66953: LD_INT 0
66955: PPUSH
66956: PPUSH
66957: PPUSH
// result := [ ] ;
66958: LD_ADDR_VAR 0 2
66962: PUSH
66963: EMPTY
66964: ST_TO_ADDR
// if not array then
66965: LD_VAR 0 1
66969: NOT
66970: IFFALSE 66974
// exit ;
66972: GO 67073
// Randomize ;
66974: CALL_OW 10
// for i = array downto 1 do
66978: LD_ADDR_VAR 0 3
66982: PUSH
66983: DOUBLE
66984: LD_VAR 0 1
66988: INC
66989: ST_TO_ADDR
66990: LD_INT 1
66992: PUSH
66993: FOR_DOWNTO
66994: IFFALSE 67071
// begin index := rand ( 1 , array ) ;
66996: LD_ADDR_VAR 0 4
67000: PUSH
67001: LD_INT 1
67003: PPUSH
67004: LD_VAR 0 1
67008: PPUSH
67009: CALL_OW 12
67013: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
67014: LD_ADDR_VAR 0 2
67018: PUSH
67019: LD_VAR 0 2
67023: PPUSH
67024: LD_VAR 0 2
67028: PUSH
67029: LD_INT 1
67031: PLUS
67032: PPUSH
67033: LD_VAR 0 1
67037: PUSH
67038: LD_VAR 0 4
67042: ARRAY
67043: PPUSH
67044: CALL_OW 2
67048: ST_TO_ADDR
// array := Delete ( array , index ) ;
67049: LD_ADDR_VAR 0 1
67053: PUSH
67054: LD_VAR 0 1
67058: PPUSH
67059: LD_VAR 0 4
67063: PPUSH
67064: CALL_OW 3
67068: ST_TO_ADDR
// end ;
67069: GO 66993
67071: POP
67072: POP
// end ;
67073: LD_VAR 0 2
67077: RET
// export function GetBaseMaterials ( base ) ; begin
67078: LD_INT 0
67080: PPUSH
// result := [ 0 , 0 , 0 ] ;
67081: LD_ADDR_VAR 0 2
67085: PUSH
67086: LD_INT 0
67088: PUSH
67089: LD_INT 0
67091: PUSH
67092: LD_INT 0
67094: PUSH
67095: EMPTY
67096: LIST
67097: LIST
67098: LIST
67099: ST_TO_ADDR
// if not base then
67100: LD_VAR 0 1
67104: NOT
67105: IFFALSE 67109
// exit ;
67107: GO 67158
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
67109: LD_ADDR_VAR 0 2
67113: PUSH
67114: LD_VAR 0 1
67118: PPUSH
67119: LD_INT 1
67121: PPUSH
67122: CALL_OW 275
67126: PUSH
67127: LD_VAR 0 1
67131: PPUSH
67132: LD_INT 2
67134: PPUSH
67135: CALL_OW 275
67139: PUSH
67140: LD_VAR 0 1
67144: PPUSH
67145: LD_INT 3
67147: PPUSH
67148: CALL_OW 275
67152: PUSH
67153: EMPTY
67154: LIST
67155: LIST
67156: LIST
67157: ST_TO_ADDR
// end ;
67158: LD_VAR 0 2
67162: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
67163: LD_INT 0
67165: PPUSH
67166: PPUSH
// result := array ;
67167: LD_ADDR_VAR 0 3
67171: PUSH
67172: LD_VAR 0 1
67176: ST_TO_ADDR
// if size >= result then
67177: LD_VAR 0 2
67181: PUSH
67182: LD_VAR 0 3
67186: GREATEREQUAL
67187: IFFALSE 67191
// exit ;
67189: GO 67241
// if size then
67191: LD_VAR 0 2
67195: IFFALSE 67241
// for i := array downto size do
67197: LD_ADDR_VAR 0 4
67201: PUSH
67202: DOUBLE
67203: LD_VAR 0 1
67207: INC
67208: ST_TO_ADDR
67209: LD_VAR 0 2
67213: PUSH
67214: FOR_DOWNTO
67215: IFFALSE 67239
// result := Delete ( result , result ) ;
67217: LD_ADDR_VAR 0 3
67221: PUSH
67222: LD_VAR 0 3
67226: PPUSH
67227: LD_VAR 0 3
67231: PPUSH
67232: CALL_OW 3
67236: ST_TO_ADDR
67237: GO 67214
67239: POP
67240: POP
// end ;
67241: LD_VAR 0 3
67245: RET
// export function ComExit ( unit ) ; var tmp ; begin
67246: LD_INT 0
67248: PPUSH
67249: PPUSH
// if not IsInUnit ( unit ) then
67250: LD_VAR 0 1
67254: PPUSH
67255: CALL_OW 310
67259: NOT
67260: IFFALSE 67264
// exit ;
67262: GO 67324
// tmp := IsInUnit ( unit ) ;
67264: LD_ADDR_VAR 0 3
67268: PUSH
67269: LD_VAR 0 1
67273: PPUSH
67274: CALL_OW 310
67278: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
67279: LD_VAR 0 3
67283: PPUSH
67284: CALL_OW 247
67288: PUSH
67289: LD_INT 2
67291: EQUAL
67292: IFFALSE 67305
// ComExitVehicle ( unit ) else
67294: LD_VAR 0 1
67298: PPUSH
67299: CALL_OW 121
67303: GO 67314
// ComExitBuilding ( unit ) ;
67305: LD_VAR 0 1
67309: PPUSH
67310: CALL_OW 122
// result := tmp ;
67314: LD_ADDR_VAR 0 2
67318: PUSH
67319: LD_VAR 0 3
67323: ST_TO_ADDR
// end ;
67324: LD_VAR 0 2
67328: RET
// export function ComExitAll ( units ) ; var i ; begin
67329: LD_INT 0
67331: PPUSH
67332: PPUSH
// if not units then
67333: LD_VAR 0 1
67337: NOT
67338: IFFALSE 67342
// exit ;
67340: GO 67368
// for i in units do
67342: LD_ADDR_VAR 0 3
67346: PUSH
67347: LD_VAR 0 1
67351: PUSH
67352: FOR_IN
67353: IFFALSE 67366
// ComExit ( i ) ;
67355: LD_VAR 0 3
67359: PPUSH
67360: CALL 67246 0 1
67364: GO 67352
67366: POP
67367: POP
// end ;
67368: LD_VAR 0 2
67372: RET
// export function ResetHc ; begin
67373: LD_INT 0
67375: PPUSH
// InitHc ;
67376: CALL_OW 19
// hc_importance := 0 ;
67380: LD_ADDR_OWVAR 32
67384: PUSH
67385: LD_INT 0
67387: ST_TO_ADDR
// end ;
67388: LD_VAR 0 1
67392: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
67393: LD_INT 0
67395: PPUSH
67396: PPUSH
67397: PPUSH
// _x := ( x1 + x2 ) div 2 ;
67398: LD_ADDR_VAR 0 6
67402: PUSH
67403: LD_VAR 0 1
67407: PUSH
67408: LD_VAR 0 3
67412: PLUS
67413: PUSH
67414: LD_INT 2
67416: DIV
67417: ST_TO_ADDR
// if _x < 0 then
67418: LD_VAR 0 6
67422: PUSH
67423: LD_INT 0
67425: LESS
67426: IFFALSE 67443
// _x := _x * - 1 ;
67428: LD_ADDR_VAR 0 6
67432: PUSH
67433: LD_VAR 0 6
67437: PUSH
67438: LD_INT 1
67440: NEG
67441: MUL
67442: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
67443: LD_ADDR_VAR 0 7
67447: PUSH
67448: LD_VAR 0 2
67452: PUSH
67453: LD_VAR 0 4
67457: PLUS
67458: PUSH
67459: LD_INT 2
67461: DIV
67462: ST_TO_ADDR
// if _y < 0 then
67463: LD_VAR 0 7
67467: PUSH
67468: LD_INT 0
67470: LESS
67471: IFFALSE 67488
// _y := _y * - 1 ;
67473: LD_ADDR_VAR 0 7
67477: PUSH
67478: LD_VAR 0 7
67482: PUSH
67483: LD_INT 1
67485: NEG
67486: MUL
67487: ST_TO_ADDR
// result := [ _x , _y ] ;
67488: LD_ADDR_VAR 0 5
67492: PUSH
67493: LD_VAR 0 6
67497: PUSH
67498: LD_VAR 0 7
67502: PUSH
67503: EMPTY
67504: LIST
67505: LIST
67506: ST_TO_ADDR
// end ;
67507: LD_VAR 0 5
67511: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
67512: LD_INT 0
67514: PPUSH
67515: PPUSH
67516: PPUSH
67517: PPUSH
// task := GetTaskList ( unit ) ;
67518: LD_ADDR_VAR 0 7
67522: PUSH
67523: LD_VAR 0 1
67527: PPUSH
67528: CALL_OW 437
67532: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
67533: LD_VAR 0 7
67537: NOT
67538: PUSH
67539: LD_VAR 0 1
67543: PPUSH
67544: LD_VAR 0 2
67548: PPUSH
67549: CALL_OW 308
67553: NOT
67554: AND
67555: IFFALSE 67559
// exit ;
67557: GO 67677
// if IsInArea ( unit , area ) then
67559: LD_VAR 0 1
67563: PPUSH
67564: LD_VAR 0 2
67568: PPUSH
67569: CALL_OW 308
67573: IFFALSE 67591
// begin ComMoveToArea ( unit , goAway ) ;
67575: LD_VAR 0 1
67579: PPUSH
67580: LD_VAR 0 3
67584: PPUSH
67585: CALL_OW 113
// exit ;
67589: GO 67677
// end ; if task [ 1 ] [ 1 ] <> M then
67591: LD_VAR 0 7
67595: PUSH
67596: LD_INT 1
67598: ARRAY
67599: PUSH
67600: LD_INT 1
67602: ARRAY
67603: PUSH
67604: LD_STRING M
67606: NONEQUAL
67607: IFFALSE 67611
// exit ;
67609: GO 67677
// x := task [ 1 ] [ 2 ] ;
67611: LD_ADDR_VAR 0 5
67615: PUSH
67616: LD_VAR 0 7
67620: PUSH
67621: LD_INT 1
67623: ARRAY
67624: PUSH
67625: LD_INT 2
67627: ARRAY
67628: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
67629: LD_ADDR_VAR 0 6
67633: PUSH
67634: LD_VAR 0 7
67638: PUSH
67639: LD_INT 1
67641: ARRAY
67642: PUSH
67643: LD_INT 3
67645: ARRAY
67646: ST_TO_ADDR
// if InArea ( x , y , area ) then
67647: LD_VAR 0 5
67651: PPUSH
67652: LD_VAR 0 6
67656: PPUSH
67657: LD_VAR 0 2
67661: PPUSH
67662: CALL_OW 309
67666: IFFALSE 67677
// ComStop ( unit ) ;
67668: LD_VAR 0 1
67672: PPUSH
67673: CALL_OW 141
// end ;
67677: LD_VAR 0 4
67681: RET
// export function Abs ( value ) ; begin
67682: LD_INT 0
67684: PPUSH
// result := value ;
67685: LD_ADDR_VAR 0 2
67689: PUSH
67690: LD_VAR 0 1
67694: ST_TO_ADDR
// if value < 0 then
67695: LD_VAR 0 1
67699: PUSH
67700: LD_INT 0
67702: LESS
67703: IFFALSE 67720
// result := value * - 1 ;
67705: LD_ADDR_VAR 0 2
67709: PUSH
67710: LD_VAR 0 1
67714: PUSH
67715: LD_INT 1
67717: NEG
67718: MUL
67719: ST_TO_ADDR
// end ;
67720: LD_VAR 0 2
67724: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
67725: LD_INT 0
67727: PPUSH
67728: PPUSH
67729: PPUSH
67730: PPUSH
67731: PPUSH
67732: PPUSH
67733: PPUSH
67734: PPUSH
// if not unit or not building then
67735: LD_VAR 0 1
67739: NOT
67740: PUSH
67741: LD_VAR 0 2
67745: NOT
67746: OR
67747: IFFALSE 67751
// exit ;
67749: GO 67977
// x := GetX ( building ) ;
67751: LD_ADDR_VAR 0 4
67755: PUSH
67756: LD_VAR 0 2
67760: PPUSH
67761: CALL_OW 250
67765: ST_TO_ADDR
// y := GetY ( building ) ;
67766: LD_ADDR_VAR 0 6
67770: PUSH
67771: LD_VAR 0 2
67775: PPUSH
67776: CALL_OW 251
67780: ST_TO_ADDR
// d := GetDir ( building ) ;
67781: LD_ADDR_VAR 0 8
67785: PUSH
67786: LD_VAR 0 2
67790: PPUSH
67791: CALL_OW 254
67795: ST_TO_ADDR
// r := 4 ;
67796: LD_ADDR_VAR 0 9
67800: PUSH
67801: LD_INT 4
67803: ST_TO_ADDR
// for i := 1 to 5 do
67804: LD_ADDR_VAR 0 10
67808: PUSH
67809: DOUBLE
67810: LD_INT 1
67812: DEC
67813: ST_TO_ADDR
67814: LD_INT 5
67816: PUSH
67817: FOR_TO
67818: IFFALSE 67975
// begin _x := ShiftX ( x , d , r + i ) ;
67820: LD_ADDR_VAR 0 5
67824: PUSH
67825: LD_VAR 0 4
67829: PPUSH
67830: LD_VAR 0 8
67834: PPUSH
67835: LD_VAR 0 9
67839: PUSH
67840: LD_VAR 0 10
67844: PLUS
67845: PPUSH
67846: CALL_OW 272
67850: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
67851: LD_ADDR_VAR 0 7
67855: PUSH
67856: LD_VAR 0 6
67860: PPUSH
67861: LD_VAR 0 8
67865: PPUSH
67866: LD_VAR 0 9
67870: PUSH
67871: LD_VAR 0 10
67875: PLUS
67876: PPUSH
67877: CALL_OW 273
67881: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
67882: LD_VAR 0 5
67886: PPUSH
67887: LD_VAR 0 7
67891: PPUSH
67892: CALL_OW 488
67896: PUSH
67897: LD_VAR 0 5
67901: PPUSH
67902: LD_VAR 0 7
67906: PPUSH
67907: CALL_OW 428
67911: PPUSH
67912: CALL_OW 247
67916: PUSH
67917: LD_INT 3
67919: PUSH
67920: LD_INT 2
67922: PUSH
67923: EMPTY
67924: LIST
67925: LIST
67926: IN
67927: NOT
67928: AND
67929: IFFALSE 67973
// begin ComMoveXY ( unit , _x , _y ) ;
67931: LD_VAR 0 1
67935: PPUSH
67936: LD_VAR 0 5
67940: PPUSH
67941: LD_VAR 0 7
67945: PPUSH
67946: CALL_OW 111
// result := [ _x , _y ] ;
67950: LD_ADDR_VAR 0 3
67954: PUSH
67955: LD_VAR 0 5
67959: PUSH
67960: LD_VAR 0 7
67964: PUSH
67965: EMPTY
67966: LIST
67967: LIST
67968: ST_TO_ADDR
// exit ;
67969: POP
67970: POP
67971: GO 67977
// end ; end ;
67973: GO 67817
67975: POP
67976: POP
// end ;
67977: LD_VAR 0 3
67981: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
67982: LD_INT 0
67984: PPUSH
67985: PPUSH
67986: PPUSH
// result := 0 ;
67987: LD_ADDR_VAR 0 3
67991: PUSH
67992: LD_INT 0
67994: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
67995: LD_VAR 0 1
67999: PUSH
68000: LD_INT 0
68002: LESS
68003: PUSH
68004: LD_VAR 0 1
68008: PUSH
68009: LD_INT 8
68011: GREATER
68012: OR
68013: PUSH
68014: LD_VAR 0 2
68018: PUSH
68019: LD_INT 0
68021: LESS
68022: OR
68023: PUSH
68024: LD_VAR 0 2
68028: PUSH
68029: LD_INT 8
68031: GREATER
68032: OR
68033: IFFALSE 68037
// exit ;
68035: GO 68112
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
68037: LD_ADDR_VAR 0 4
68041: PUSH
68042: LD_INT 22
68044: PUSH
68045: LD_VAR 0 2
68049: PUSH
68050: EMPTY
68051: LIST
68052: LIST
68053: PPUSH
68054: CALL_OW 69
68058: PUSH
68059: FOR_IN
68060: IFFALSE 68110
// begin un := UnitShoot ( i ) ;
68062: LD_ADDR_VAR 0 5
68066: PUSH
68067: LD_VAR 0 4
68071: PPUSH
68072: CALL_OW 504
68076: ST_TO_ADDR
// if GetSide ( un ) = side1 then
68077: LD_VAR 0 5
68081: PPUSH
68082: CALL_OW 255
68086: PUSH
68087: LD_VAR 0 1
68091: EQUAL
68092: IFFALSE 68108
// begin result := un ;
68094: LD_ADDR_VAR 0 3
68098: PUSH
68099: LD_VAR 0 5
68103: ST_TO_ADDR
// exit ;
68104: POP
68105: POP
68106: GO 68112
// end ; end ;
68108: GO 68059
68110: POP
68111: POP
// end ;
68112: LD_VAR 0 3
68116: RET
// export function GetCargoBay ( units ) ; begin
68117: LD_INT 0
68119: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
68120: LD_ADDR_VAR 0 2
68124: PUSH
68125: LD_VAR 0 1
68129: PPUSH
68130: LD_INT 2
68132: PUSH
68133: LD_INT 34
68135: PUSH
68136: LD_INT 12
68138: PUSH
68139: EMPTY
68140: LIST
68141: LIST
68142: PUSH
68143: LD_INT 34
68145: PUSH
68146: LD_INT 51
68148: PUSH
68149: EMPTY
68150: LIST
68151: LIST
68152: PUSH
68153: LD_INT 34
68155: PUSH
68156: LD_INT 32
68158: PUSH
68159: EMPTY
68160: LIST
68161: LIST
68162: PUSH
68163: LD_INT 34
68165: PUSH
68166: LD_INT 89
68168: PUSH
68169: EMPTY
68170: LIST
68171: LIST
68172: PUSH
68173: EMPTY
68174: LIST
68175: LIST
68176: LIST
68177: LIST
68178: LIST
68179: PPUSH
68180: CALL_OW 72
68184: ST_TO_ADDR
// end ;
68185: LD_VAR 0 2
68189: RET
// export function Negate ( value ) ; begin
68190: LD_INT 0
68192: PPUSH
// result := not value ;
68193: LD_ADDR_VAR 0 2
68197: PUSH
68198: LD_VAR 0 1
68202: NOT
68203: ST_TO_ADDR
// end ;
68204: LD_VAR 0 2
68208: RET
// export function Inc ( value ) ; begin
68209: LD_INT 0
68211: PPUSH
// result := value + 1 ;
68212: LD_ADDR_VAR 0 2
68216: PUSH
68217: LD_VAR 0 1
68221: PUSH
68222: LD_INT 1
68224: PLUS
68225: ST_TO_ADDR
// end ;
68226: LD_VAR 0 2
68230: RET
// export function Dec ( value ) ; begin
68231: LD_INT 0
68233: PPUSH
// result := value - 1 ;
68234: LD_ADDR_VAR 0 2
68238: PUSH
68239: LD_VAR 0 1
68243: PUSH
68244: LD_INT 1
68246: MINUS
68247: ST_TO_ADDR
// end ;
68248: LD_VAR 0 2
68252: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
68253: LD_INT 0
68255: PPUSH
68256: PPUSH
68257: PPUSH
68258: PPUSH
68259: PPUSH
68260: PPUSH
68261: PPUSH
68262: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
68263: LD_VAR 0 1
68267: PPUSH
68268: LD_VAR 0 2
68272: PPUSH
68273: CALL_OW 488
68277: NOT
68278: PUSH
68279: LD_VAR 0 3
68283: PPUSH
68284: LD_VAR 0 4
68288: PPUSH
68289: CALL_OW 488
68293: NOT
68294: OR
68295: IFFALSE 68308
// begin result := - 1 ;
68297: LD_ADDR_VAR 0 5
68301: PUSH
68302: LD_INT 1
68304: NEG
68305: ST_TO_ADDR
// exit ;
68306: GO 68543
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
68308: LD_ADDR_VAR 0 12
68312: PUSH
68313: LD_VAR 0 1
68317: PPUSH
68318: LD_VAR 0 2
68322: PPUSH
68323: LD_VAR 0 3
68327: PPUSH
68328: LD_VAR 0 4
68332: PPUSH
68333: CALL 67393 0 4
68337: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
68338: LD_ADDR_VAR 0 11
68342: PUSH
68343: LD_VAR 0 1
68347: PPUSH
68348: LD_VAR 0 2
68352: PPUSH
68353: LD_VAR 0 12
68357: PUSH
68358: LD_INT 1
68360: ARRAY
68361: PPUSH
68362: LD_VAR 0 12
68366: PUSH
68367: LD_INT 2
68369: ARRAY
68370: PPUSH
68371: CALL_OW 298
68375: ST_TO_ADDR
// distance := 9999 ;
68376: LD_ADDR_VAR 0 10
68380: PUSH
68381: LD_INT 9999
68383: ST_TO_ADDR
// for i := 0 to 5 do
68384: LD_ADDR_VAR 0 6
68388: PUSH
68389: DOUBLE
68390: LD_INT 0
68392: DEC
68393: ST_TO_ADDR
68394: LD_INT 5
68396: PUSH
68397: FOR_TO
68398: IFFALSE 68541
// begin _x := ShiftX ( x1 , i , centerDist ) ;
68400: LD_ADDR_VAR 0 7
68404: PUSH
68405: LD_VAR 0 1
68409: PPUSH
68410: LD_VAR 0 6
68414: PPUSH
68415: LD_VAR 0 11
68419: PPUSH
68420: CALL_OW 272
68424: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
68425: LD_ADDR_VAR 0 8
68429: PUSH
68430: LD_VAR 0 2
68434: PPUSH
68435: LD_VAR 0 6
68439: PPUSH
68440: LD_VAR 0 11
68444: PPUSH
68445: CALL_OW 273
68449: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
68450: LD_VAR 0 7
68454: PPUSH
68455: LD_VAR 0 8
68459: PPUSH
68460: CALL_OW 488
68464: NOT
68465: IFFALSE 68469
// continue ;
68467: GO 68397
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
68469: LD_ADDR_VAR 0 9
68473: PUSH
68474: LD_VAR 0 12
68478: PUSH
68479: LD_INT 1
68481: ARRAY
68482: PPUSH
68483: LD_VAR 0 12
68487: PUSH
68488: LD_INT 2
68490: ARRAY
68491: PPUSH
68492: LD_VAR 0 7
68496: PPUSH
68497: LD_VAR 0 8
68501: PPUSH
68502: CALL_OW 298
68506: ST_TO_ADDR
// if tmp < distance then
68507: LD_VAR 0 9
68511: PUSH
68512: LD_VAR 0 10
68516: LESS
68517: IFFALSE 68539
// begin result := i ;
68519: LD_ADDR_VAR 0 5
68523: PUSH
68524: LD_VAR 0 6
68528: ST_TO_ADDR
// distance := tmp ;
68529: LD_ADDR_VAR 0 10
68533: PUSH
68534: LD_VAR 0 9
68538: ST_TO_ADDR
// end ; end ;
68539: GO 68397
68541: POP
68542: POP
// end ;
68543: LD_VAR 0 5
68547: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
68548: LD_INT 0
68550: PPUSH
68551: PPUSH
// if not driver or not IsInUnit ( driver ) then
68552: LD_VAR 0 1
68556: NOT
68557: PUSH
68558: LD_VAR 0 1
68562: PPUSH
68563: CALL_OW 310
68567: NOT
68568: OR
68569: IFFALSE 68573
// exit ;
68571: GO 68663
// vehicle := IsInUnit ( driver ) ;
68573: LD_ADDR_VAR 0 3
68577: PUSH
68578: LD_VAR 0 1
68582: PPUSH
68583: CALL_OW 310
68587: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
68588: LD_VAR 0 1
68592: PPUSH
68593: LD_STRING \
68595: PUSH
68596: LD_INT 0
68598: PUSH
68599: LD_INT 0
68601: PUSH
68602: LD_INT 0
68604: PUSH
68605: LD_INT 0
68607: PUSH
68608: LD_INT 0
68610: PUSH
68611: LD_INT 0
68613: PUSH
68614: EMPTY
68615: LIST
68616: LIST
68617: LIST
68618: LIST
68619: LIST
68620: LIST
68621: LIST
68622: PUSH
68623: LD_STRING E
68625: PUSH
68626: LD_INT 0
68628: PUSH
68629: LD_INT 0
68631: PUSH
68632: LD_VAR 0 3
68636: PUSH
68637: LD_INT 0
68639: PUSH
68640: LD_INT 0
68642: PUSH
68643: LD_INT 0
68645: PUSH
68646: EMPTY
68647: LIST
68648: LIST
68649: LIST
68650: LIST
68651: LIST
68652: LIST
68653: LIST
68654: PUSH
68655: EMPTY
68656: LIST
68657: LIST
68658: PPUSH
68659: CALL_OW 446
// end ;
68663: LD_VAR 0 2
68667: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
68668: LD_INT 0
68670: PPUSH
68671: PPUSH
// if not driver or not IsInUnit ( driver ) then
68672: LD_VAR 0 1
68676: NOT
68677: PUSH
68678: LD_VAR 0 1
68682: PPUSH
68683: CALL_OW 310
68687: NOT
68688: OR
68689: IFFALSE 68693
// exit ;
68691: GO 68783
// vehicle := IsInUnit ( driver ) ;
68693: LD_ADDR_VAR 0 3
68697: PUSH
68698: LD_VAR 0 1
68702: PPUSH
68703: CALL_OW 310
68707: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
68708: LD_VAR 0 1
68712: PPUSH
68713: LD_STRING \
68715: PUSH
68716: LD_INT 0
68718: PUSH
68719: LD_INT 0
68721: PUSH
68722: LD_INT 0
68724: PUSH
68725: LD_INT 0
68727: PUSH
68728: LD_INT 0
68730: PUSH
68731: LD_INT 0
68733: PUSH
68734: EMPTY
68735: LIST
68736: LIST
68737: LIST
68738: LIST
68739: LIST
68740: LIST
68741: LIST
68742: PUSH
68743: LD_STRING E
68745: PUSH
68746: LD_INT 0
68748: PUSH
68749: LD_INT 0
68751: PUSH
68752: LD_VAR 0 3
68756: PUSH
68757: LD_INT 0
68759: PUSH
68760: LD_INT 0
68762: PUSH
68763: LD_INT 0
68765: PUSH
68766: EMPTY
68767: LIST
68768: LIST
68769: LIST
68770: LIST
68771: LIST
68772: LIST
68773: LIST
68774: PUSH
68775: EMPTY
68776: LIST
68777: LIST
68778: PPUSH
68779: CALL_OW 447
// end ;
68783: LD_VAR 0 2
68787: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
68788: LD_INT 0
68790: PPUSH
68791: PPUSH
68792: PPUSH
// tmp := [ ] ;
68793: LD_ADDR_VAR 0 5
68797: PUSH
68798: EMPTY
68799: ST_TO_ADDR
// for i in units do
68800: LD_ADDR_VAR 0 4
68804: PUSH
68805: LD_VAR 0 1
68809: PUSH
68810: FOR_IN
68811: IFFALSE 68849
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
68813: LD_ADDR_VAR 0 5
68817: PUSH
68818: LD_VAR 0 5
68822: PPUSH
68823: LD_VAR 0 5
68827: PUSH
68828: LD_INT 1
68830: PLUS
68831: PPUSH
68832: LD_VAR 0 4
68836: PPUSH
68837: CALL_OW 256
68841: PPUSH
68842: CALL_OW 2
68846: ST_TO_ADDR
68847: GO 68810
68849: POP
68850: POP
// if not tmp then
68851: LD_VAR 0 5
68855: NOT
68856: IFFALSE 68860
// exit ;
68858: GO 68908
// if asc then
68860: LD_VAR 0 2
68864: IFFALSE 68888
// result := SortListByListAsc ( units , tmp ) else
68866: LD_ADDR_VAR 0 3
68870: PUSH
68871: LD_VAR 0 1
68875: PPUSH
68876: LD_VAR 0 5
68880: PPUSH
68881: CALL_OW 76
68885: ST_TO_ADDR
68886: GO 68908
// result := SortListByListDesc ( units , tmp ) ;
68888: LD_ADDR_VAR 0 3
68892: PUSH
68893: LD_VAR 0 1
68897: PPUSH
68898: LD_VAR 0 5
68902: PPUSH
68903: CALL_OW 77
68907: ST_TO_ADDR
// end ;
68908: LD_VAR 0 3
68912: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
68913: LD_INT 0
68915: PPUSH
68916: PPUSH
// task := GetTaskList ( mech ) ;
68917: LD_ADDR_VAR 0 4
68921: PUSH
68922: LD_VAR 0 1
68926: PPUSH
68927: CALL_OW 437
68931: ST_TO_ADDR
// if not task then
68932: LD_VAR 0 4
68936: NOT
68937: IFFALSE 68941
// exit ;
68939: GO 68983
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
68941: LD_ADDR_VAR 0 3
68945: PUSH
68946: LD_VAR 0 4
68950: PUSH
68951: LD_INT 1
68953: ARRAY
68954: PUSH
68955: LD_INT 1
68957: ARRAY
68958: PUSH
68959: LD_STRING r
68961: EQUAL
68962: PUSH
68963: LD_VAR 0 4
68967: PUSH
68968: LD_INT 1
68970: ARRAY
68971: PUSH
68972: LD_INT 4
68974: ARRAY
68975: PUSH
68976: LD_VAR 0 2
68980: EQUAL
68981: AND
68982: ST_TO_ADDR
// end ;
68983: LD_VAR 0 3
68987: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
68988: LD_INT 0
68990: PPUSH
// SetDir ( unit , d ) ;
68991: LD_VAR 0 1
68995: PPUSH
68996: LD_VAR 0 4
69000: PPUSH
69001: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
69005: LD_VAR 0 1
69009: PPUSH
69010: LD_VAR 0 2
69014: PPUSH
69015: LD_VAR 0 3
69019: PPUSH
69020: LD_VAR 0 5
69024: PPUSH
69025: CALL_OW 48
// end ;
69029: LD_VAR 0 6
69033: RET
// export function ToNaturalNumber ( number ) ; begin
69034: LD_INT 0
69036: PPUSH
// result := number div 1 ;
69037: LD_ADDR_VAR 0 2
69041: PUSH
69042: LD_VAR 0 1
69046: PUSH
69047: LD_INT 1
69049: DIV
69050: ST_TO_ADDR
// if number < 0 then
69051: LD_VAR 0 1
69055: PUSH
69056: LD_INT 0
69058: LESS
69059: IFFALSE 69069
// result := 0 ;
69061: LD_ADDR_VAR 0 2
69065: PUSH
69066: LD_INT 0
69068: ST_TO_ADDR
// end ;
69069: LD_VAR 0 2
69073: RET
// export function SortByClass ( units , class ) ; var un ; begin
69074: LD_INT 0
69076: PPUSH
69077: PPUSH
// if not units or not class then
69078: LD_VAR 0 1
69082: NOT
69083: PUSH
69084: LD_VAR 0 2
69088: NOT
69089: OR
69090: IFFALSE 69094
// exit ;
69092: GO 69189
// result := [ ] ;
69094: LD_ADDR_VAR 0 3
69098: PUSH
69099: EMPTY
69100: ST_TO_ADDR
// for un in units do
69101: LD_ADDR_VAR 0 4
69105: PUSH
69106: LD_VAR 0 1
69110: PUSH
69111: FOR_IN
69112: IFFALSE 69187
// if GetClass ( un ) = class then
69114: LD_VAR 0 4
69118: PPUSH
69119: CALL_OW 257
69123: PUSH
69124: LD_VAR 0 2
69128: EQUAL
69129: IFFALSE 69156
// result := Insert ( result , 1 , un ) else
69131: LD_ADDR_VAR 0 3
69135: PUSH
69136: LD_VAR 0 3
69140: PPUSH
69141: LD_INT 1
69143: PPUSH
69144: LD_VAR 0 4
69148: PPUSH
69149: CALL_OW 2
69153: ST_TO_ADDR
69154: GO 69185
// result := Replace ( result , result + 1 , un ) ;
69156: LD_ADDR_VAR 0 3
69160: PUSH
69161: LD_VAR 0 3
69165: PPUSH
69166: LD_VAR 0 3
69170: PUSH
69171: LD_INT 1
69173: PLUS
69174: PPUSH
69175: LD_VAR 0 4
69179: PPUSH
69180: CALL_OW 1
69184: ST_TO_ADDR
69185: GO 69111
69187: POP
69188: POP
// end ;
69189: LD_VAR 0 3
69193: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
69194: LD_INT 0
69196: PPUSH
69197: PPUSH
69198: PPUSH
69199: PPUSH
69200: PPUSH
69201: PPUSH
69202: PPUSH
// result := [ ] ;
69203: LD_ADDR_VAR 0 4
69207: PUSH
69208: EMPTY
69209: ST_TO_ADDR
// if x - r < 0 then
69210: LD_VAR 0 1
69214: PUSH
69215: LD_VAR 0 3
69219: MINUS
69220: PUSH
69221: LD_INT 0
69223: LESS
69224: IFFALSE 69236
// min_x := 0 else
69226: LD_ADDR_VAR 0 8
69230: PUSH
69231: LD_INT 0
69233: ST_TO_ADDR
69234: GO 69252
// min_x := x - r ;
69236: LD_ADDR_VAR 0 8
69240: PUSH
69241: LD_VAR 0 1
69245: PUSH
69246: LD_VAR 0 3
69250: MINUS
69251: ST_TO_ADDR
// if y - r < 0 then
69252: LD_VAR 0 2
69256: PUSH
69257: LD_VAR 0 3
69261: MINUS
69262: PUSH
69263: LD_INT 0
69265: LESS
69266: IFFALSE 69278
// min_y := 0 else
69268: LD_ADDR_VAR 0 7
69272: PUSH
69273: LD_INT 0
69275: ST_TO_ADDR
69276: GO 69294
// min_y := y - r ;
69278: LD_ADDR_VAR 0 7
69282: PUSH
69283: LD_VAR 0 2
69287: PUSH
69288: LD_VAR 0 3
69292: MINUS
69293: ST_TO_ADDR
// max_x := x + r ;
69294: LD_ADDR_VAR 0 9
69298: PUSH
69299: LD_VAR 0 1
69303: PUSH
69304: LD_VAR 0 3
69308: PLUS
69309: ST_TO_ADDR
// max_y := y + r ;
69310: LD_ADDR_VAR 0 10
69314: PUSH
69315: LD_VAR 0 2
69319: PUSH
69320: LD_VAR 0 3
69324: PLUS
69325: ST_TO_ADDR
// for _x = min_x to max_x do
69326: LD_ADDR_VAR 0 5
69330: PUSH
69331: DOUBLE
69332: LD_VAR 0 8
69336: DEC
69337: ST_TO_ADDR
69338: LD_VAR 0 9
69342: PUSH
69343: FOR_TO
69344: IFFALSE 69445
// for _y = min_y to max_y do
69346: LD_ADDR_VAR 0 6
69350: PUSH
69351: DOUBLE
69352: LD_VAR 0 7
69356: DEC
69357: ST_TO_ADDR
69358: LD_VAR 0 10
69362: PUSH
69363: FOR_TO
69364: IFFALSE 69441
// begin if not ValidHex ( _x , _y ) then
69366: LD_VAR 0 5
69370: PPUSH
69371: LD_VAR 0 6
69375: PPUSH
69376: CALL_OW 488
69380: NOT
69381: IFFALSE 69385
// continue ;
69383: GO 69363
// if GetResourceTypeXY ( _x , _y ) then
69385: LD_VAR 0 5
69389: PPUSH
69390: LD_VAR 0 6
69394: PPUSH
69395: CALL_OW 283
69399: IFFALSE 69439
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
69401: LD_ADDR_VAR 0 4
69405: PUSH
69406: LD_VAR 0 4
69410: PPUSH
69411: LD_VAR 0 4
69415: PUSH
69416: LD_INT 1
69418: PLUS
69419: PPUSH
69420: LD_VAR 0 5
69424: PUSH
69425: LD_VAR 0 6
69429: PUSH
69430: EMPTY
69431: LIST
69432: LIST
69433: PPUSH
69434: CALL_OW 1
69438: ST_TO_ADDR
// end ;
69439: GO 69363
69441: POP
69442: POP
69443: GO 69343
69445: POP
69446: POP
// end ;
69447: LD_VAR 0 4
69451: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
69452: LD_INT 0
69454: PPUSH
69455: PPUSH
69456: PPUSH
69457: PPUSH
69458: PPUSH
69459: PPUSH
69460: PPUSH
69461: PPUSH
// if not units then
69462: LD_VAR 0 1
69466: NOT
69467: IFFALSE 69471
// exit ;
69469: GO 69995
// result := UnitFilter ( units , [ f_ok ] ) ;
69471: LD_ADDR_VAR 0 3
69475: PUSH
69476: LD_VAR 0 1
69480: PPUSH
69481: LD_INT 50
69483: PUSH
69484: EMPTY
69485: LIST
69486: PPUSH
69487: CALL_OW 72
69491: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
69492: LD_ADDR_VAR 0 8
69496: PUSH
69497: LD_VAR 0 1
69501: PUSH
69502: LD_INT 1
69504: ARRAY
69505: PPUSH
69506: CALL_OW 255
69510: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
69511: LD_ADDR_VAR 0 10
69515: PUSH
69516: LD_INT 29
69518: PUSH
69519: LD_INT 91
69521: PUSH
69522: LD_INT 49
69524: PUSH
69525: EMPTY
69526: LIST
69527: LIST
69528: LIST
69529: ST_TO_ADDR
// if not result then
69530: LD_VAR 0 3
69534: NOT
69535: IFFALSE 69539
// exit ;
69537: GO 69995
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
69539: LD_ADDR_VAR 0 5
69543: PUSH
69544: LD_INT 81
69546: PUSH
69547: LD_VAR 0 8
69551: PUSH
69552: EMPTY
69553: LIST
69554: LIST
69555: PPUSH
69556: CALL_OW 69
69560: ST_TO_ADDR
// for i in result do
69561: LD_ADDR_VAR 0 4
69565: PUSH
69566: LD_VAR 0 3
69570: PUSH
69571: FOR_IN
69572: IFFALSE 69993
// begin tag := GetTag ( i ) + 1 ;
69574: LD_ADDR_VAR 0 9
69578: PUSH
69579: LD_VAR 0 4
69583: PPUSH
69584: CALL_OW 110
69588: PUSH
69589: LD_INT 1
69591: PLUS
69592: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
69593: LD_ADDR_VAR 0 7
69597: PUSH
69598: LD_VAR 0 4
69602: PPUSH
69603: CALL_OW 250
69607: PPUSH
69608: LD_VAR 0 4
69612: PPUSH
69613: CALL_OW 251
69617: PPUSH
69618: LD_INT 6
69620: PPUSH
69621: CALL 69194 0 3
69625: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
69626: LD_VAR 0 4
69630: PPUSH
69631: CALL_OW 247
69635: PUSH
69636: LD_INT 2
69638: EQUAL
69639: PUSH
69640: LD_VAR 0 7
69644: AND
69645: PUSH
69646: LD_VAR 0 4
69650: PPUSH
69651: CALL_OW 264
69655: PUSH
69656: LD_VAR 0 10
69660: IN
69661: NOT
69662: AND
69663: IFFALSE 69702
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
69665: LD_VAR 0 4
69669: PPUSH
69670: LD_VAR 0 7
69674: PUSH
69675: LD_INT 1
69677: ARRAY
69678: PUSH
69679: LD_INT 1
69681: ARRAY
69682: PPUSH
69683: LD_VAR 0 7
69687: PUSH
69688: LD_INT 1
69690: ARRAY
69691: PUSH
69692: LD_INT 2
69694: ARRAY
69695: PPUSH
69696: CALL_OW 116
69700: GO 69991
// if path > tag then
69702: LD_VAR 0 2
69706: PUSH
69707: LD_VAR 0 9
69711: GREATER
69712: IFFALSE 69920
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
69714: LD_ADDR_VAR 0 6
69718: PUSH
69719: LD_VAR 0 5
69723: PPUSH
69724: LD_INT 91
69726: PUSH
69727: LD_VAR 0 4
69731: PUSH
69732: LD_INT 8
69734: PUSH
69735: EMPTY
69736: LIST
69737: LIST
69738: LIST
69739: PPUSH
69740: CALL_OW 72
69744: ST_TO_ADDR
// if nearEnemy then
69745: LD_VAR 0 6
69749: IFFALSE 69818
// begin if GetWeapon ( i ) = ru_time_lapser then
69751: LD_VAR 0 4
69755: PPUSH
69756: CALL_OW 264
69760: PUSH
69761: LD_INT 49
69763: EQUAL
69764: IFFALSE 69792
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
69766: LD_VAR 0 4
69770: PPUSH
69771: LD_VAR 0 6
69775: PPUSH
69776: LD_VAR 0 4
69780: PPUSH
69781: CALL_OW 74
69785: PPUSH
69786: CALL_OW 112
69790: GO 69816
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
69792: LD_VAR 0 4
69796: PPUSH
69797: LD_VAR 0 6
69801: PPUSH
69802: LD_VAR 0 4
69806: PPUSH
69807: CALL_OW 74
69811: PPUSH
69812: CALL 70920 0 2
// end else
69816: GO 69918
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
69818: LD_VAR 0 4
69822: PPUSH
69823: LD_VAR 0 2
69827: PUSH
69828: LD_VAR 0 9
69832: ARRAY
69833: PUSH
69834: LD_INT 1
69836: ARRAY
69837: PPUSH
69838: LD_VAR 0 2
69842: PUSH
69843: LD_VAR 0 9
69847: ARRAY
69848: PUSH
69849: LD_INT 2
69851: ARRAY
69852: PPUSH
69853: CALL_OW 297
69857: PUSH
69858: LD_INT 6
69860: GREATER
69861: IFFALSE 69904
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
69863: LD_VAR 0 4
69867: PPUSH
69868: LD_VAR 0 2
69872: PUSH
69873: LD_VAR 0 9
69877: ARRAY
69878: PUSH
69879: LD_INT 1
69881: ARRAY
69882: PPUSH
69883: LD_VAR 0 2
69887: PUSH
69888: LD_VAR 0 9
69892: ARRAY
69893: PUSH
69894: LD_INT 2
69896: ARRAY
69897: PPUSH
69898: CALL_OW 114
69902: GO 69918
// SetTag ( i , tag ) ;
69904: LD_VAR 0 4
69908: PPUSH
69909: LD_VAR 0 9
69913: PPUSH
69914: CALL_OW 109
// end else
69918: GO 69991
// if enemy then
69920: LD_VAR 0 5
69924: IFFALSE 69991
// begin if GetWeapon ( i ) = ru_time_lapser then
69926: LD_VAR 0 4
69930: PPUSH
69931: CALL_OW 264
69935: PUSH
69936: LD_INT 49
69938: EQUAL
69939: IFFALSE 69967
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
69941: LD_VAR 0 4
69945: PPUSH
69946: LD_VAR 0 5
69950: PPUSH
69951: LD_VAR 0 4
69955: PPUSH
69956: CALL_OW 74
69960: PPUSH
69961: CALL_OW 112
69965: GO 69991
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
69967: LD_VAR 0 4
69971: PPUSH
69972: LD_VAR 0 5
69976: PPUSH
69977: LD_VAR 0 4
69981: PPUSH
69982: CALL_OW 74
69986: PPUSH
69987: CALL 70920 0 2
// end ; end ;
69991: GO 69571
69993: POP
69994: POP
// end ;
69995: LD_VAR 0 3
69999: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
70000: LD_INT 0
70002: PPUSH
70003: PPUSH
70004: PPUSH
// if not unit or IsInUnit ( unit ) then
70005: LD_VAR 0 1
70009: NOT
70010: PUSH
70011: LD_VAR 0 1
70015: PPUSH
70016: CALL_OW 310
70020: OR
70021: IFFALSE 70025
// exit ;
70023: GO 70116
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
70025: LD_ADDR_VAR 0 4
70029: PUSH
70030: LD_VAR 0 1
70034: PPUSH
70035: CALL_OW 250
70039: PPUSH
70040: LD_VAR 0 2
70044: PPUSH
70045: LD_INT 1
70047: PPUSH
70048: CALL_OW 272
70052: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
70053: LD_ADDR_VAR 0 5
70057: PUSH
70058: LD_VAR 0 1
70062: PPUSH
70063: CALL_OW 251
70067: PPUSH
70068: LD_VAR 0 2
70072: PPUSH
70073: LD_INT 1
70075: PPUSH
70076: CALL_OW 273
70080: ST_TO_ADDR
// if ValidHex ( x , y ) then
70081: LD_VAR 0 4
70085: PPUSH
70086: LD_VAR 0 5
70090: PPUSH
70091: CALL_OW 488
70095: IFFALSE 70116
// ComTurnXY ( unit , x , y ) ;
70097: LD_VAR 0 1
70101: PPUSH
70102: LD_VAR 0 4
70106: PPUSH
70107: LD_VAR 0 5
70111: PPUSH
70112: CALL_OW 118
// end ;
70116: LD_VAR 0 3
70120: RET
// export function SeeUnits ( side , units ) ; var i ; begin
70121: LD_INT 0
70123: PPUSH
70124: PPUSH
// result := false ;
70125: LD_ADDR_VAR 0 3
70129: PUSH
70130: LD_INT 0
70132: ST_TO_ADDR
// if not units then
70133: LD_VAR 0 2
70137: NOT
70138: IFFALSE 70142
// exit ;
70140: GO 70187
// for i in units do
70142: LD_ADDR_VAR 0 4
70146: PUSH
70147: LD_VAR 0 2
70151: PUSH
70152: FOR_IN
70153: IFFALSE 70185
// if See ( side , i ) then
70155: LD_VAR 0 1
70159: PPUSH
70160: LD_VAR 0 4
70164: PPUSH
70165: CALL_OW 292
70169: IFFALSE 70183
// begin result := true ;
70171: LD_ADDR_VAR 0 3
70175: PUSH
70176: LD_INT 1
70178: ST_TO_ADDR
// exit ;
70179: POP
70180: POP
70181: GO 70187
// end ;
70183: GO 70152
70185: POP
70186: POP
// end ;
70187: LD_VAR 0 3
70191: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
70192: LD_INT 0
70194: PPUSH
70195: PPUSH
70196: PPUSH
70197: PPUSH
// if not unit or not points then
70198: LD_VAR 0 1
70202: NOT
70203: PUSH
70204: LD_VAR 0 2
70208: NOT
70209: OR
70210: IFFALSE 70214
// exit ;
70212: GO 70304
// dist := 99999 ;
70214: LD_ADDR_VAR 0 5
70218: PUSH
70219: LD_INT 99999
70221: ST_TO_ADDR
// for i in points do
70222: LD_ADDR_VAR 0 4
70226: PUSH
70227: LD_VAR 0 2
70231: PUSH
70232: FOR_IN
70233: IFFALSE 70302
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
70235: LD_ADDR_VAR 0 6
70239: PUSH
70240: LD_VAR 0 1
70244: PPUSH
70245: LD_VAR 0 4
70249: PUSH
70250: LD_INT 1
70252: ARRAY
70253: PPUSH
70254: LD_VAR 0 4
70258: PUSH
70259: LD_INT 2
70261: ARRAY
70262: PPUSH
70263: CALL_OW 297
70267: ST_TO_ADDR
// if tmpDist < dist then
70268: LD_VAR 0 6
70272: PUSH
70273: LD_VAR 0 5
70277: LESS
70278: IFFALSE 70300
// begin result := i ;
70280: LD_ADDR_VAR 0 3
70284: PUSH
70285: LD_VAR 0 4
70289: ST_TO_ADDR
// dist := tmpDist ;
70290: LD_ADDR_VAR 0 5
70294: PUSH
70295: LD_VAR 0 6
70299: ST_TO_ADDR
// end ; end ;
70300: GO 70232
70302: POP
70303: POP
// end ;
70304: LD_VAR 0 3
70308: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
70309: LD_INT 0
70311: PPUSH
// uc_side := side ;
70312: LD_ADDR_OWVAR 20
70316: PUSH
70317: LD_VAR 0 1
70321: ST_TO_ADDR
// uc_nation := 3 ;
70322: LD_ADDR_OWVAR 21
70326: PUSH
70327: LD_INT 3
70329: ST_TO_ADDR
// vc_chassis := 25 ;
70330: LD_ADDR_OWVAR 37
70334: PUSH
70335: LD_INT 25
70337: ST_TO_ADDR
// vc_engine := engine_siberite ;
70338: LD_ADDR_OWVAR 39
70342: PUSH
70343: LD_INT 3
70345: ST_TO_ADDR
// vc_control := control_computer ;
70346: LD_ADDR_OWVAR 38
70350: PUSH
70351: LD_INT 3
70353: ST_TO_ADDR
// vc_weapon := 59 ;
70354: LD_ADDR_OWVAR 40
70358: PUSH
70359: LD_INT 59
70361: ST_TO_ADDR
// result := CreateVehicle ;
70362: LD_ADDR_VAR 0 5
70366: PUSH
70367: CALL_OW 45
70371: ST_TO_ADDR
// SetDir ( result , d ) ;
70372: LD_VAR 0 5
70376: PPUSH
70377: LD_VAR 0 4
70381: PPUSH
70382: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
70386: LD_VAR 0 5
70390: PPUSH
70391: LD_VAR 0 2
70395: PPUSH
70396: LD_VAR 0 3
70400: PPUSH
70401: LD_INT 0
70403: PPUSH
70404: CALL_OW 48
// end ;
70408: LD_VAR 0 5
70412: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
70413: LD_INT 0
70415: PPUSH
70416: PPUSH
70417: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
70418: LD_ADDR_VAR 0 2
70422: PUSH
70423: LD_INT 0
70425: PUSH
70426: LD_INT 0
70428: PUSH
70429: LD_INT 0
70431: PUSH
70432: LD_INT 0
70434: PUSH
70435: EMPTY
70436: LIST
70437: LIST
70438: LIST
70439: LIST
70440: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
70441: LD_VAR 0 1
70445: NOT
70446: PUSH
70447: LD_VAR 0 1
70451: PPUSH
70452: CALL_OW 264
70456: PUSH
70457: LD_INT 12
70459: PUSH
70460: LD_INT 51
70462: PUSH
70463: LD_INT 32
70465: PUSH
70466: LD_INT 89
70468: PUSH
70469: EMPTY
70470: LIST
70471: LIST
70472: LIST
70473: LIST
70474: IN
70475: NOT
70476: OR
70477: IFFALSE 70481
// exit ;
70479: GO 70579
// for i := 1 to 3 do
70481: LD_ADDR_VAR 0 3
70485: PUSH
70486: DOUBLE
70487: LD_INT 1
70489: DEC
70490: ST_TO_ADDR
70491: LD_INT 3
70493: PUSH
70494: FOR_TO
70495: IFFALSE 70577
// begin tmp := GetCargo ( cargo , i ) ;
70497: LD_ADDR_VAR 0 4
70501: PUSH
70502: LD_VAR 0 1
70506: PPUSH
70507: LD_VAR 0 3
70511: PPUSH
70512: CALL_OW 289
70516: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
70517: LD_ADDR_VAR 0 2
70521: PUSH
70522: LD_VAR 0 2
70526: PPUSH
70527: LD_VAR 0 3
70531: PPUSH
70532: LD_VAR 0 4
70536: PPUSH
70537: CALL_OW 1
70541: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
70542: LD_ADDR_VAR 0 2
70546: PUSH
70547: LD_VAR 0 2
70551: PPUSH
70552: LD_INT 4
70554: PPUSH
70555: LD_VAR 0 2
70559: PUSH
70560: LD_INT 4
70562: ARRAY
70563: PUSH
70564: LD_VAR 0 4
70568: PLUS
70569: PPUSH
70570: CALL_OW 1
70574: ST_TO_ADDR
// end ;
70575: GO 70494
70577: POP
70578: POP
// end ;
70579: LD_VAR 0 2
70583: RET
// export function Length ( array ) ; begin
70584: LD_INT 0
70586: PPUSH
// result := array + 0 ;
70587: LD_ADDR_VAR 0 2
70591: PUSH
70592: LD_VAR 0 1
70596: PUSH
70597: LD_INT 0
70599: PLUS
70600: ST_TO_ADDR
// end ;
70601: LD_VAR 0 2
70605: RET
// export function PrepareArray ( array ) ; begin
70606: LD_INT 0
70608: PPUSH
// result := array diff 0 ;
70609: LD_ADDR_VAR 0 2
70613: PUSH
70614: LD_VAR 0 1
70618: PUSH
70619: LD_INT 0
70621: DIFF
70622: ST_TO_ADDR
// if not result [ 1 ] then
70623: LD_VAR 0 2
70627: PUSH
70628: LD_INT 1
70630: ARRAY
70631: NOT
70632: IFFALSE 70652
// result := Delete ( result , 1 ) ;
70634: LD_ADDR_VAR 0 2
70638: PUSH
70639: LD_VAR 0 2
70643: PPUSH
70644: LD_INT 1
70646: PPUSH
70647: CALL_OW 3
70651: ST_TO_ADDR
// end ;
70652: LD_VAR 0 2
70656: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
70657: LD_INT 0
70659: PPUSH
70660: PPUSH
70661: PPUSH
70662: PPUSH
// sibRocketRange := 25 ;
70663: LD_ADDR_VAR 0 6
70667: PUSH
70668: LD_INT 25
70670: ST_TO_ADDR
// result := false ;
70671: LD_ADDR_VAR 0 4
70675: PUSH
70676: LD_INT 0
70678: ST_TO_ADDR
// for i := 0 to 5 do
70679: LD_ADDR_VAR 0 5
70683: PUSH
70684: DOUBLE
70685: LD_INT 0
70687: DEC
70688: ST_TO_ADDR
70689: LD_INT 5
70691: PUSH
70692: FOR_TO
70693: IFFALSE 70760
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
70695: LD_VAR 0 1
70699: PPUSH
70700: LD_VAR 0 5
70704: PPUSH
70705: LD_VAR 0 6
70709: PPUSH
70710: CALL_OW 272
70714: PPUSH
70715: LD_VAR 0 2
70719: PPUSH
70720: LD_VAR 0 5
70724: PPUSH
70725: LD_VAR 0 6
70729: PPUSH
70730: CALL_OW 273
70734: PPUSH
70735: LD_VAR 0 3
70739: PPUSH
70740: CALL_OW 309
70744: IFFALSE 70758
// begin result := true ;
70746: LD_ADDR_VAR 0 4
70750: PUSH
70751: LD_INT 1
70753: ST_TO_ADDR
// exit ;
70754: POP
70755: POP
70756: GO 70762
// end ;
70758: GO 70692
70760: POP
70761: POP
// end ;
70762: LD_VAR 0 4
70766: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
70767: LD_INT 0
70769: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
70770: LD_VAR 0 1
70774: PPUSH
70775: LD_VAR 0 2
70779: PPUSH
70780: LD_INT 0
70782: PPUSH
70783: LD_INT 0
70785: PPUSH
70786: LD_INT 1
70788: PPUSH
70789: LD_INT 0
70791: PPUSH
70792: CALL_OW 587
// end ;
70796: LD_VAR 0 3
70800: RET
// export function CenterOnNow ( unit ) ; begin
70801: LD_INT 0
70803: PPUSH
// result := IsInUnit ( unit ) ;
70804: LD_ADDR_VAR 0 2
70808: PUSH
70809: LD_VAR 0 1
70813: PPUSH
70814: CALL_OW 310
70818: ST_TO_ADDR
// if not result then
70819: LD_VAR 0 2
70823: NOT
70824: IFFALSE 70836
// result := unit ;
70826: LD_ADDR_VAR 0 2
70830: PUSH
70831: LD_VAR 0 1
70835: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
70836: LD_VAR 0 1
70840: PPUSH
70841: CALL_OW 87
// end ;
70845: LD_VAR 0 2
70849: RET
// export function ComMoveHex ( unit , hex ) ; begin
70850: LD_INT 0
70852: PPUSH
// if not hex then
70853: LD_VAR 0 2
70857: NOT
70858: IFFALSE 70862
// exit ;
70860: GO 70915
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
70862: LD_VAR 0 2
70866: PUSH
70867: LD_INT 1
70869: ARRAY
70870: PPUSH
70871: LD_VAR 0 2
70875: PUSH
70876: LD_INT 2
70878: ARRAY
70879: PPUSH
70880: CALL_OW 428
70884: IFFALSE 70888
// exit ;
70886: GO 70915
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
70888: LD_VAR 0 1
70892: PPUSH
70893: LD_VAR 0 2
70897: PUSH
70898: LD_INT 1
70900: ARRAY
70901: PPUSH
70902: LD_VAR 0 2
70906: PUSH
70907: LD_INT 2
70909: ARRAY
70910: PPUSH
70911: CALL_OW 111
// end ;
70915: LD_VAR 0 3
70919: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
70920: LD_INT 0
70922: PPUSH
70923: PPUSH
70924: PPUSH
// if not unit or not enemy then
70925: LD_VAR 0 1
70929: NOT
70930: PUSH
70931: LD_VAR 0 2
70935: NOT
70936: OR
70937: IFFALSE 70941
// exit ;
70939: GO 71065
// x := GetX ( enemy ) ;
70941: LD_ADDR_VAR 0 4
70945: PUSH
70946: LD_VAR 0 2
70950: PPUSH
70951: CALL_OW 250
70955: ST_TO_ADDR
// y := GetY ( enemy ) ;
70956: LD_ADDR_VAR 0 5
70960: PUSH
70961: LD_VAR 0 2
70965: PPUSH
70966: CALL_OW 251
70970: ST_TO_ADDR
// if ValidHex ( x , y ) then
70971: LD_VAR 0 4
70975: PPUSH
70976: LD_VAR 0 5
70980: PPUSH
70981: CALL_OW 488
70985: IFFALSE 71065
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
70987: LD_VAR 0 2
70991: PPUSH
70992: CALL_OW 247
70996: PUSH
70997: LD_INT 3
70999: PUSH
71000: LD_INT 2
71002: PUSH
71003: EMPTY
71004: LIST
71005: LIST
71006: IN
71007: PUSH
71008: LD_VAR 0 1
71012: PPUSH
71013: CALL_OW 255
71017: PPUSH
71018: LD_VAR 0 2
71022: PPUSH
71023: CALL_OW 292
71027: AND
71028: IFFALSE 71046
// ComAttackUnit ( unit , enemy ) else
71030: LD_VAR 0 1
71034: PPUSH
71035: LD_VAR 0 2
71039: PPUSH
71040: CALL_OW 115
71044: GO 71065
// ComAgressiveMove ( unit , x , y ) ;
71046: LD_VAR 0 1
71050: PPUSH
71051: LD_VAR 0 4
71055: PPUSH
71056: LD_VAR 0 5
71060: PPUSH
71061: CALL_OW 114
// end ; end_of_file
71065: LD_VAR 0 3
71069: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
71070: LD_VAR 0 1
71074: PUSH
71075: LD_INT 200
71077: DOUBLE
71078: GREATEREQUAL
71079: IFFALSE 71087
71081: LD_INT 299
71083: DOUBLE
71084: LESSEQUAL
71085: IFTRUE 71089
71087: GO 71121
71089: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
71090: LD_VAR 0 1
71094: PPUSH
71095: LD_VAR 0 2
71099: PPUSH
71100: LD_VAR 0 3
71104: PPUSH
71105: LD_VAR 0 4
71109: PPUSH
71110: LD_VAR 0 5
71114: PPUSH
71115: CALL 24794 0 5
71119: GO 71198
71121: LD_INT 300
71123: DOUBLE
71124: GREATEREQUAL
71125: IFFALSE 71133
71127: LD_INT 399
71129: DOUBLE
71130: LESSEQUAL
71131: IFTRUE 71135
71133: GO 71197
71135: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
71136: LD_VAR 0 1
71140: PPUSH
71141: LD_VAR 0 2
71145: PPUSH
71146: LD_VAR 0 3
71150: PPUSH
71151: LD_VAR 0 4
71155: PPUSH
71156: LD_VAR 0 5
71160: PPUSH
71161: LD_VAR 0 6
71165: PPUSH
71166: LD_VAR 0 7
71170: PPUSH
71171: LD_VAR 0 8
71175: PPUSH
71176: LD_VAR 0 9
71180: PPUSH
71181: LD_VAR 0 10
71185: PPUSH
71186: LD_VAR 0 11
71190: PPUSH
71191: CALL 21119 0 11
71195: GO 71198
71197: POP
// end ;
71198: PPOPN 11
71200: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
71201: LD_VAR 0 1
71205: PPUSH
71206: LD_VAR 0 2
71210: PPUSH
71211: LD_VAR 0 3
71215: PPUSH
71216: LD_VAR 0 4
71220: PPUSH
71221: LD_VAR 0 5
71225: PPUSH
71226: CALL 24530 0 5
// end ; end_of_file
71230: PPOPN 5
71232: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
71233: LD_VAR 0 1
71237: PPUSH
71238: LD_VAR 0 2
71242: PPUSH
71243: LD_VAR 0 3
71247: PPUSH
71248: LD_VAR 0 4
71252: PPUSH
71253: LD_VAR 0 5
71257: PPUSH
71258: LD_VAR 0 6
71262: PPUSH
71263: CALL 8771 0 6
// end ;
71267: PPOPN 6
71269: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
71270: LD_INT 0
71272: PPUSH
// begin if not units then
71273: LD_VAR 0 1
71277: NOT
71278: IFFALSE 71282
// exit ;
71280: GO 71282
// end ;
71282: PPOPN 7
71284: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
71285: CALL 8675 0 0
// end ;
71289: PPOPN 1
71291: END
