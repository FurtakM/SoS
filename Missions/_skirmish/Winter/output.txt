// starting begin ResetFog ;
   0: CALL_OW 335
// CenterNowOnXY ( 1 , 1 ) ;
   4: LD_INT 1
   6: PPUSH
   7: LD_INT 1
   9: PPUSH
  10: CALL_OW 86
// Settings ;
  14: CALL 34 0 0
// PrepareApeman ( 12 ) ;
  18: LD_INT 12
  20: PPUSH
  21: CALL 7002 0 1
// PreparePlayer ;
  25: CALL 5755 0 0
// PrepareComputer ;
  29: CALL 927 0 0
// end ;
  33: END
// function Settings ; begin
  34: LD_INT 0
  36: PPUSH
// case Query ( Info ) of 1 :
  37: LD_STRING Info
  39: PPUSH
  40: CALL_OW 97
  44: PUSH
  45: LD_INT 1
  47: DOUBLE
  48: EQUAL
  49: IFTRUE 53
  51: GO 56
  53: POP
// begin end ; end ;
  54: GO 57
  56: POP
// case Query ( PlayerNation ) of 1 :
  57: LD_STRING PlayerNation
  59: PPUSH
  60: CALL_OW 97
  64: PUSH
  65: LD_INT 1
  67: DOUBLE
  68: EQUAL
  69: IFTRUE 73
  71: GO 84
  73: POP
// begin player_nation = 1 ;
  74: LD_ADDR_EXP 74
  78: PUSH
  79: LD_INT 1
  81: ST_TO_ADDR
// end ; 2 :
  82: GO 123
  84: LD_INT 2
  86: DOUBLE
  87: EQUAL
  88: IFTRUE 92
  90: GO 103
  92: POP
// begin player_nation = 2 ;
  93: LD_ADDR_EXP 74
  97: PUSH
  98: LD_INT 2
 100: ST_TO_ADDR
// end ; 3 :
 101: GO 123
 103: LD_INT 3
 105: DOUBLE
 106: EQUAL
 107: IFTRUE 111
 109: GO 122
 111: POP
// begin player_nation = 3 ;
 112: LD_ADDR_EXP 74
 116: PUSH
 117: LD_INT 3
 119: ST_TO_ADDR
// end ; end ;
 120: GO 123
 122: POP
// player_side := 3 ;
 123: LD_ADDR_EXP 75
 127: PUSH
 128: LD_INT 3
 130: ST_TO_ADDR
// Your_Side = player_side ;
 131: LD_ADDR_OWVAR 2
 135: PUSH
 136: LD_EXP 75
 140: ST_TO_ADDR
// ChangeSideFog ( 5 , player_side ) ;
 141: LD_INT 5
 143: PPUSH
 144: LD_EXP 75
 148: PPUSH
 149: CALL_OW 343
// Music_Nat = player_nation ;
 153: LD_ADDR_OWVAR 71
 157: PUSH
 158: LD_EXP 74
 162: ST_TO_ADDR
// case Query ( PlayerCont ) of 1 :
 163: LD_STRING PlayerCont
 165: PPUSH
 166: CALL_OW 97
 170: PUSH
 171: LD_INT 1
 173: DOUBLE
 174: EQUAL
 175: IFTRUE 179
 177: GO 190
 179: POP
// begin player_cont = 2 ;
 180: LD_ADDR_EXP 76
 184: PUSH
 185: LD_INT 2
 187: ST_TO_ADDR
// end ; 2 :
 188: GO 248
 190: LD_INT 2
 192: DOUBLE
 193: EQUAL
 194: IFTRUE 198
 196: GO 209
 198: POP
// begin player_cont = 3 ;
 199: LD_ADDR_EXP 76
 203: PUSH
 204: LD_INT 3
 206: ST_TO_ADDR
// end ; 3 :
 207: GO 248
 209: LD_INT 3
 211: DOUBLE
 212: EQUAL
 213: IFTRUE 217
 215: GO 228
 217: POP
// begin player_cont = 4 ;
 218: LD_ADDR_EXP 76
 222: PUSH
 223: LD_INT 4
 225: ST_TO_ADDR
// end ; 4 :
 226: GO 248
 228: LD_INT 4
 230: DOUBLE
 231: EQUAL
 232: IFTRUE 236
 234: GO 247
 236: POP
// begin player_cont = 5 ;
 237: LD_ADDR_EXP 76
 241: PUSH
 242: LD_INT 5
 244: ST_TO_ADDR
// end ; end ;
 245: GO 248
 247: POP
// comp_nation := 1 ;
 248: LD_ADDR_EXP 2
 252: PUSH
 253: LD_INT 1
 255: ST_TO_ADDR
// if player_side = comp_side then
 256: LD_EXP 75
 260: PUSH
 261: LD_EXP 1
 265: EQUAL
 266: IFFALSE 282
// begin comp_side = player_side + 1 ;
 268: LD_ADDR_EXP 1
 272: PUSH
 273: LD_EXP 75
 277: PUSH
 278: LD_INT 1
 280: PLUS
 281: ST_TO_ADDR
// end ; case Query ( CompCont ) of 1 :
 282: LD_STRING CompCont
 284: PPUSH
 285: CALL_OW 97
 289: PUSH
 290: LD_INT 1
 292: DOUBLE
 293: EQUAL
 294: IFTRUE 298
 296: GO 309
 298: POP
// begin comp_cont = 4 ;
 299: LD_ADDR_EXP 3
 303: PUSH
 304: LD_INT 4
 306: ST_TO_ADDR
// end ; 2 :
 307: GO 348
 309: LD_INT 2
 311: DOUBLE
 312: EQUAL
 313: IFTRUE 317
 315: GO 328
 317: POP
// begin comp_cont = 5 ;
 318: LD_ADDR_EXP 3
 322: PUSH
 323: LD_INT 5
 325: ST_TO_ADDR
// end ; 3 :
 326: GO 348
 328: LD_INT 3
 330: DOUBLE
 331: EQUAL
 332: IFTRUE 336
 334: GO 347
 336: POP
// begin comp_cont = 6 ;
 337: LD_ADDR_EXP 3
 341: PUSH
 342: LD_INT 6
 344: ST_TO_ADDR
// end ; end ;
 345: GO 348
 347: POP
// case Query ( CompSkill ) of 1 :
 348: LD_STRING CompSkill
 350: PPUSH
 351: CALL_OW 97
 355: PUSH
 356: LD_INT 1
 358: DOUBLE
 359: EQUAL
 360: IFTRUE 364
 362: GO 399
 364: POP
// begin comp_skill1 = 3 ;
 365: LD_ADDR_EXP 12
 369: PUSH
 370: LD_INT 3
 372: ST_TO_ADDR
// comp_skill2 = 3 ;
 373: LD_ADDR_EXP 13
 377: PUSH
 378: LD_INT 3
 380: ST_TO_ADDR
// comp_skill3 = 3 ;
 381: LD_ADDR_EXP 14
 385: PUSH
 386: LD_INT 3
 388: ST_TO_ADDR
// comp_skill4 = 3 ;
 389: LD_ADDR_EXP 15
 393: PUSH
 394: LD_INT 3
 396: ST_TO_ADDR
// end ; 2 :
 397: GO 486
 399: LD_INT 2
 401: DOUBLE
 402: EQUAL
 403: IFTRUE 407
 405: GO 442
 407: POP
// begin comp_skill1 = 6 ;
 408: LD_ADDR_EXP 12
 412: PUSH
 413: LD_INT 6
 415: ST_TO_ADDR
// comp_skill2 = 6 ;
 416: LD_ADDR_EXP 13
 420: PUSH
 421: LD_INT 6
 423: ST_TO_ADDR
// comp_skill3 = 6 ;
 424: LD_ADDR_EXP 14
 428: PUSH
 429: LD_INT 6
 431: ST_TO_ADDR
// comp_skill4 = 6 ;
 432: LD_ADDR_EXP 15
 436: PUSH
 437: LD_INT 6
 439: ST_TO_ADDR
// end ; 3 :
 440: GO 486
 442: LD_INT 3
 444: DOUBLE
 445: EQUAL
 446: IFTRUE 450
 448: GO 485
 450: POP
// begin comp_skill1 = 9 ;
 451: LD_ADDR_EXP 12
 455: PUSH
 456: LD_INT 9
 458: ST_TO_ADDR
// comp_skill2 = 9 ;
 459: LD_ADDR_EXP 13
 463: PUSH
 464: LD_INT 9
 466: ST_TO_ADDR
// comp_skill3 = 9 ;
 467: LD_ADDR_EXP 14
 471: PUSH
 472: LD_INT 9
 474: ST_TO_ADDR
// comp_skill4 = 9 ;
 475: LD_ADDR_EXP 15
 479: PUSH
 480: LD_INT 9
 482: ST_TO_ADDR
// end ; end ;
 483: GO 486
 485: POP
// case Query ( CompDiff ) of 1 :
 486: LD_STRING CompDiff
 488: PPUSH
 489: CALL_OW 97
 493: PUSH
 494: LD_INT 1
 496: DOUBLE
 497: EQUAL
 498: IFTRUE 502
 500: GO 537
 502: POP
// begin Bonus = false ;
 503: LD_ADDR_EXP 19
 507: PUSH
 508: LD_INT 0
 510: ST_TO_ADDR
// diff_level = 1 ;
 511: LD_ADDR_EXP 16
 515: PUSH
 516: LD_INT 1
 518: ST_TO_ADDR
// diff_attack = 1 ;
 519: LD_ADDR_EXP 18
 523: PUSH
 524: LD_INT 1
 526: ST_TO_ADDR
// diff_def = 1 ;
 527: LD_ADDR_EXP 17
 531: PUSH
 532: LD_INT 1
 534: ST_TO_ADDR
// end ; 2 :
 535: GO 691
 537: LD_INT 2
 539: DOUBLE
 540: EQUAL
 541: IFTRUE 545
 543: GO 588
 545: POP
// begin Bonus = true ;
 546: LD_ADDR_EXP 19
 550: PUSH
 551: LD_INT 1
 553: ST_TO_ADDR
// bonus_level = 10 ;
 554: LD_ADDR_EXP 20
 558: PUSH
 559: LD_INT 10
 561: ST_TO_ADDR
// diff_level = 1 ;
 562: LD_ADDR_EXP 16
 566: PUSH
 567: LD_INT 1
 569: ST_TO_ADDR
// diff_attack = 1 ;
 570: LD_ADDR_EXP 18
 574: PUSH
 575: LD_INT 1
 577: ST_TO_ADDR
// diff_def = 1 ;
 578: LD_ADDR_EXP 17
 582: PUSH
 583: LD_INT 1
 585: ST_TO_ADDR
// end ; 3 :
 586: GO 691
 588: LD_INT 3
 590: DOUBLE
 591: EQUAL
 592: IFTRUE 596
 594: GO 639
 596: POP
// begin Bonus = true ;
 597: LD_ADDR_EXP 19
 601: PUSH
 602: LD_INT 1
 604: ST_TO_ADDR
// bonus_level = 35 ;
 605: LD_ADDR_EXP 20
 609: PUSH
 610: LD_INT 35
 612: ST_TO_ADDR
// diff_level = 2 ;
 613: LD_ADDR_EXP 16
 617: PUSH
 618: LD_INT 2
 620: ST_TO_ADDR
// diff_attack = 2 ;
 621: LD_ADDR_EXP 18
 625: PUSH
 626: LD_INT 2
 628: ST_TO_ADDR
// diff_def = 2 ;
 629: LD_ADDR_EXP 17
 633: PUSH
 634: LD_INT 2
 636: ST_TO_ADDR
// end ; 4 :
 637: GO 691
 639: LD_INT 4
 641: DOUBLE
 642: EQUAL
 643: IFTRUE 647
 645: GO 690
 647: POP
// begin Bonus = true ;
 648: LD_ADDR_EXP 19
 652: PUSH
 653: LD_INT 1
 655: ST_TO_ADDR
// bonus_level = 50 ;
 656: LD_ADDR_EXP 20
 660: PUSH
 661: LD_INT 50
 663: ST_TO_ADDR
// diff_level = 3 ;
 664: LD_ADDR_EXP 16
 668: PUSH
 669: LD_INT 3
 671: ST_TO_ADDR
// diff_attack = 3 ;
 672: LD_ADDR_EXP 18
 676: PUSH
 677: LD_INT 3
 679: ST_TO_ADDR
// diff_def = 3 ;
 680: LD_ADDR_EXP 17
 684: PUSH
 685: LD_INT 3
 687: ST_TO_ADDR
// end ; end ;
 688: GO 691
 690: POP
// case Query ( Crates ) of 1 :
 691: LD_STRING Crates
 693: PPUSH
 694: CALL_OW 97
 698: PUSH
 699: LD_INT 1
 701: DOUBLE
 702: EQUAL
 703: IFTRUE 707
 705: GO 726
 707: POP
// begin Cr1 = true ;
 708: LD_ADDR_EXP 78
 712: PUSH
 713: LD_INT 1
 715: ST_TO_ADDR
// Cr2 = false ;
 716: LD_ADDR_EXP 79
 720: PUSH
 721: LD_INT 0
 723: ST_TO_ADDR
// end ; 2 :
 724: GO 754
 726: LD_INT 2
 728: DOUBLE
 729: EQUAL
 730: IFTRUE 734
 732: GO 753
 734: POP
// begin Cr1 = false ;
 735: LD_ADDR_EXP 78
 739: PUSH
 740: LD_INT 0
 742: ST_TO_ADDR
// Cr2 = true ;
 743: LD_ADDR_EXP 79
 747: PUSH
 748: LD_INT 1
 750: ST_TO_ADDR
// end ; end ;
 751: GO 754
 753: POP
// case Query ( SibBomb ) of 1 :
 754: LD_STRING SibBomb
 756: PPUSH
 757: CALL_OW 97
 761: PUSH
 762: LD_INT 1
 764: DOUBLE
 765: EQUAL
 766: IFTRUE 770
 768: GO 803
 770: POP
// begin SetTech ( 25 , player_side , state_disabled ) ;
 771: LD_INT 25
 773: PPUSH
 774: LD_EXP 75
 778: PPUSH
 779: LD_INT 0
 781: PPUSH
 782: CALL_OW 322
// SetTech ( 25 , comp_side , state_disabled ) ;
 786: LD_INT 25
 788: PPUSH
 789: LD_EXP 1
 793: PPUSH
 794: LD_INT 0
 796: PPUSH
 797: CALL_OW 322
// end ; 2 :
 801: GO 845
 803: LD_INT 2
 805: DOUBLE
 806: EQUAL
 807: IFTRUE 811
 809: GO 844
 811: POP
// begin SetTech ( 25 , player_side , state_enabled ) ;
 812: LD_INT 25
 814: PPUSH
 815: LD_EXP 75
 819: PPUSH
 820: LD_INT 1
 822: PPUSH
 823: CALL_OW 322
// SetTech ( 25 , comp_side , state_enabled ) ;
 827: LD_INT 25
 829: PPUSH
 830: LD_EXP 1
 834: PPUSH
 835: LD_INT 1
 837: PPUSH
 838: CALL_OW 322
// end ; end ;
 842: GO 845
 844: POP
// case Query ( PlayerEvn ) of 1 :
 845: LD_STRING PlayerEvn
 847: PPUSH
 848: CALL_OW 97
 852: PUSH
 853: LD_INT 1
 855: DOUBLE
 856: EQUAL
 857: IFTRUE 861
 859: GO 872
 861: POP
// begin EventON = true ;
 862: LD_ADDR_EXP 90
 866: PUSH
 867: LD_INT 1
 869: ST_TO_ADDR
// end ; 2 :
 870: GO 892
 872: LD_INT 2
 874: DOUBLE
 875: EQUAL
 876: IFTRUE 880
 878: GO 891
 880: POP
// begin EventON = false ;
 881: LD_ADDR_EXP 90
 885: PUSH
 886: LD_INT 0
 888: ST_TO_ADDR
// end ; end ;
 889: GO 892
 891: POP
// case Query ( GoodLuck ) of 1 :
 892: LD_STRING GoodLuck
 894: PPUSH
 895: CALL_OW 97
 899: PUSH
 900: LD_INT 1
 902: DOUBLE
 903: EQUAL
 904: IFTRUE 908
 906: GO 921
 908: POP
// begin CenterNowOnXY ( 149 , 14 ) ;
 909: LD_INT 149
 911: PPUSH
 912: LD_INT 14
 914: PPUSH
 915: CALL_OW 86
// end ; end ;
 919: GO 922
 921: POP
// end ; end_of_file
 922: LD_VAR 0 1
 926: RET
// export function PrepareComputer ; begin
 927: LD_INT 0
 929: PPUSH
// CompTriggers ;
 930: CALL 2272 0 0
// PrepareUnits ;
 934: CALL 955 0 0
// PrepareFlag ;
 938: CALL 2040 0 0
// PrepareInfo ;
 942: CALL 2198 0 0
// CheckStrategy ;
 946: CALL 2260 0 0
// end ;
 950: LD_VAR 0 1
 954: RET
// export comp_side , comp_nation , comp_cont , comp_units , comp_vehs , comp_builds , comp_sold , comp_engs , comp_mechs , comp_sci , comp_rdriver , comp_skill1 , comp_skill2 , comp_skill3 , comp_skill4 , diff_level , diff_def , diff_attack , bonus , bonus_level , veh_bonus , build_bonus , comp_dep , comp_depot , comp_factory , comp_lab , comp_lab2 , comp_arm , comp_towers , comp_cargo , comp_ct , comp_attgr , limiter , climiter , dlimiter ; function PrepareUnits ; var un , veh , b , i ; begin
 955: LD_INT 0
 957: PPUSH
 958: PPUSH
 959: PPUSH
 960: PPUSH
 961: PPUSH
// comp_side = 1 ;
 962: LD_ADDR_EXP 1
 966: PUSH
 967: LD_INT 1
 969: ST_TO_ADDR
// uc_side := 1 ;
 970: LD_ADDR_OWVAR 20
 974: PUSH
 975: LD_INT 1
 977: ST_TO_ADDR
// uc_nation := comp_nation ;
 978: LD_ADDR_OWVAR 21
 982: PUSH
 983: LD_EXP 2
 987: ST_TO_ADDR
// SetAttitude ( 1 , player_side , att_enemy , true ) ;
 988: LD_INT 1
 990: PPUSH
 991: LD_EXP 75
 995: PPUSH
 996: LD_INT 2
 998: PPUSH
 999: LD_INT 1
1001: PPUSH
1002: CALL_OW 80
// Comp_Units := [ ] ;
1006: LD_ADDR_EXP 4
1010: PUSH
1011: EMPTY
1012: ST_TO_ADDR
// Comp_Sold := [ ] ;
1013: LD_ADDR_EXP 7
1017: PUSH
1018: EMPTY
1019: ST_TO_ADDR
// Comp_Engs := [ ] ;
1020: LD_ADDR_EXP 8
1024: PUSH
1025: EMPTY
1026: ST_TO_ADDR
// Comp_Sci := [ ] ;
1027: LD_ADDR_EXP 10
1031: PUSH
1032: EMPTY
1033: ST_TO_ADDR
// Comp_Mechs := [ ] ;
1034: LD_ADDR_EXP 9
1038: PUSH
1039: EMPTY
1040: ST_TO_ADDR
// Comp_RDriver := [ ] ;
1041: LD_ADDR_EXP 11
1045: PUSH
1046: EMPTY
1047: ST_TO_ADDR
// Comp_Towers := [ ] ;
1048: LD_ADDR_EXP 29
1052: PUSH
1053: EMPTY
1054: ST_TO_ADDR
// Comp_Attgr := [ ] ;
1055: LD_ADDR_EXP 32
1059: PUSH
1060: EMPTY
1061: ST_TO_ADDR
// Limiter = [ 4 , 6 , 8 ] [ diff_attack ] ;
1062: LD_ADDR_EXP 33
1066: PUSH
1067: LD_INT 4
1069: PUSH
1070: LD_INT 6
1072: PUSH
1073: LD_INT 8
1075: PUSH
1076: EMPTY
1077: LIST
1078: LIST
1079: LIST
1080: PUSH
1081: LD_EXP 18
1085: ARRAY
1086: ST_TO_ADDR
// CLimiter = 0 ;
1087: LD_ADDR_EXP 34
1091: PUSH
1092: LD_INT 0
1094: ST_TO_ADDR
// DLimiter = 0 ;
1095: LD_ADDR_EXP 35
1099: PUSH
1100: LD_INT 0
1102: ST_TO_ADDR
// for i = 1 to comp_cont do
1103: LD_ADDR_VAR 0 5
1107: PUSH
1108: DOUBLE
1109: LD_INT 1
1111: DEC
1112: ST_TO_ADDR
1113: LD_EXP 3
1117: PUSH
1118: FOR_TO
1119: IFFALSE 1333
// begin hc_sex = Rand ( sex_male , sex_female ) ;
1121: LD_ADDR_OWVAR 27
1125: PUSH
1126: LD_INT 1
1128: PPUSH
1129: LD_INT 2
1131: PPUSH
1132: CALL_OW 12
1136: ST_TO_ADDR
// hc_gallery =  ;
1137: LD_ADDR_OWVAR 33
1141: PUSH
1142: LD_STRING 
1144: ST_TO_ADDR
// hc_skills = [ comp_skill1 + Rand ( 0 , 1 ) , comp_skill2 + Rand ( - 3 , 0 ) , comp_skill3 + Rand ( - 3 , 0 ) , comp_skill4 + Rand ( - 3 , 0 ) ] ;
1145: LD_ADDR_OWVAR 31
1149: PUSH
1150: LD_EXP 12
1154: PUSH
1155: LD_INT 0
1157: PPUSH
1158: LD_INT 1
1160: PPUSH
1161: CALL_OW 12
1165: PLUS
1166: PUSH
1167: LD_EXP 13
1171: PUSH
1172: LD_INT 3
1174: NEG
1175: PPUSH
1176: LD_INT 0
1178: PPUSH
1179: CALL_OW 12
1183: PLUS
1184: PUSH
1185: LD_EXP 14
1189: PUSH
1190: LD_INT 3
1192: NEG
1193: PPUSH
1194: LD_INT 0
1196: PPUSH
1197: CALL_OW 12
1201: PLUS
1202: PUSH
1203: LD_EXP 15
1207: PUSH
1208: LD_INT 3
1210: NEG
1211: PPUSH
1212: LD_INT 0
1214: PPUSH
1215: CALL_OW 12
1219: PLUS
1220: PUSH
1221: EMPTY
1222: LIST
1223: LIST
1224: LIST
1225: LIST
1226: ST_TO_ADDR
// hc_attr = [ Rand ( 8 , 12 ) , Rand ( 9 , 11 ) ] ;
1227: LD_ADDR_OWVAR 29
1231: PUSH
1232: LD_INT 8
1234: PPUSH
1235: LD_INT 12
1237: PPUSH
1238: CALL_OW 12
1242: PUSH
1243: LD_INT 9
1245: PPUSH
1246: LD_INT 11
1248: PPUSH
1249: CALL_OW 12
1253: PUSH
1254: EMPTY
1255: LIST
1256: LIST
1257: ST_TO_ADDR
// hc_name =  ;
1258: LD_ADDR_OWVAR 26
1262: PUSH
1263: LD_STRING 
1265: ST_TO_ADDR
// hc_class = 1 ;
1266: LD_ADDR_OWVAR 28
1270: PUSH
1271: LD_INT 1
1273: ST_TO_ADDR
// un = CreateHuman ;
1274: LD_ADDR_VAR 0 2
1278: PUSH
1279: CALL_OW 44
1283: ST_TO_ADDR
// PlaceUnitArea ( un , CompResp , false ) ;
1284: LD_VAR 0 2
1288: PPUSH
1289: LD_INT 1
1291: PPUSH
1292: LD_INT 0
1294: PPUSH
1295: CALL_OW 49
// Comp_Units := Comp_Units ^ un ;
1299: LD_ADDR_EXP 4
1303: PUSH
1304: LD_EXP 4
1308: PUSH
1309: LD_VAR 0 2
1313: ADD
1314: ST_TO_ADDR
// Comp_Sold := Comp_Sold ^ un ;
1315: LD_ADDR_EXP 7
1319: PUSH
1320: LD_EXP 7
1324: PUSH
1325: LD_VAR 0 2
1329: ADD
1330: ST_TO_ADDR
// end ;
1331: GO 1118
1333: POP
1334: POP
// for i = 1 to comp_cont + 1 do
1335: LD_ADDR_VAR 0 5
1339: PUSH
1340: DOUBLE
1341: LD_INT 1
1343: DEC
1344: ST_TO_ADDR
1345: LD_EXP 3
1349: PUSH
1350: LD_INT 1
1352: PLUS
1353: PUSH
1354: FOR_TO
1355: IFFALSE 1569
// begin hc_sex = Rand ( sex_male , sex_female ) ;
1357: LD_ADDR_OWVAR 27
1361: PUSH
1362: LD_INT 1
1364: PPUSH
1365: LD_INT 2
1367: PPUSH
1368: CALL_OW 12
1372: ST_TO_ADDR
// hc_gallery =  ;
1373: LD_ADDR_OWVAR 33
1377: PUSH
1378: LD_STRING 
1380: ST_TO_ADDR
// hc_skills = [ comp_skill1 + Rand ( - 2 , 0 ) , comp_skill2 + Rand ( 0 , 1 ) , comp_skill3 + Rand ( - 3 , 0 ) , comp_skill4 + Rand ( - 3 , 0 ) ] ;
1381: LD_ADDR_OWVAR 31
1385: PUSH
1386: LD_EXP 12
1390: PUSH
1391: LD_INT 2
1393: NEG
1394: PPUSH
1395: LD_INT 0
1397: PPUSH
1398: CALL_OW 12
1402: PLUS
1403: PUSH
1404: LD_EXP 13
1408: PUSH
1409: LD_INT 0
1411: PPUSH
1412: LD_INT 1
1414: PPUSH
1415: CALL_OW 12
1419: PLUS
1420: PUSH
1421: LD_EXP 14
1425: PUSH
1426: LD_INT 3
1428: NEG
1429: PPUSH
1430: LD_INT 0
1432: PPUSH
1433: CALL_OW 12
1437: PLUS
1438: PUSH
1439: LD_EXP 15
1443: PUSH
1444: LD_INT 3
1446: NEG
1447: PPUSH
1448: LD_INT 0
1450: PPUSH
1451: CALL_OW 12
1455: PLUS
1456: PUSH
1457: EMPTY
1458: LIST
1459: LIST
1460: LIST
1461: LIST
1462: ST_TO_ADDR
// hc_attr = [ Rand ( 8 , 12 ) , Rand ( 9 , 11 ) ] ;
1463: LD_ADDR_OWVAR 29
1467: PUSH
1468: LD_INT 8
1470: PPUSH
1471: LD_INT 12
1473: PPUSH
1474: CALL_OW 12
1478: PUSH
1479: LD_INT 9
1481: PPUSH
1482: LD_INT 11
1484: PPUSH
1485: CALL_OW 12
1489: PUSH
1490: EMPTY
1491: LIST
1492: LIST
1493: ST_TO_ADDR
// hc_name =  ;
1494: LD_ADDR_OWVAR 26
1498: PUSH
1499: LD_STRING 
1501: ST_TO_ADDR
// hc_class = 2 ;
1502: LD_ADDR_OWVAR 28
1506: PUSH
1507: LD_INT 2
1509: ST_TO_ADDR
// un = CreateHuman ;
1510: LD_ADDR_VAR 0 2
1514: PUSH
1515: CALL_OW 44
1519: ST_TO_ADDR
// PlaceUnitArea ( un , CompResp , false ) ;
1520: LD_VAR 0 2
1524: PPUSH
1525: LD_INT 1
1527: PPUSH
1528: LD_INT 0
1530: PPUSH
1531: CALL_OW 49
// Comp_Units := Comp_Units ^ un ;
1535: LD_ADDR_EXP 4
1539: PUSH
1540: LD_EXP 4
1544: PUSH
1545: LD_VAR 0 2
1549: ADD
1550: ST_TO_ADDR
// Comp_Engs := Comp_Engs ^ un ;
1551: LD_ADDR_EXP 8
1555: PUSH
1556: LD_EXP 8
1560: PUSH
1561: LD_VAR 0 2
1565: ADD
1566: ST_TO_ADDR
// end ;
1567: GO 1354
1569: POP
1570: POP
// for i = 1 to comp_cont do
1571: LD_ADDR_VAR 0 5
1575: PUSH
1576: DOUBLE
1577: LD_INT 1
1579: DEC
1580: ST_TO_ADDR
1581: LD_EXP 3
1585: PUSH
1586: FOR_TO
1587: IFFALSE 1801
// begin hc_sex = Rand ( sex_male , sex_female ) ;
1589: LD_ADDR_OWVAR 27
1593: PUSH
1594: LD_INT 1
1596: PPUSH
1597: LD_INT 2
1599: PPUSH
1600: CALL_OW 12
1604: ST_TO_ADDR
// hc_gallery =  ;
1605: LD_ADDR_OWVAR 33
1609: PUSH
1610: LD_STRING 
1612: ST_TO_ADDR
// hc_skills = [ comp_skill1 + Rand ( - 3 , 1 ) , comp_skill2 + Rand ( - 3 , 0 ) , comp_skill3 + Rand ( 0 , 1 ) , comp_skill4 + Rand ( - 3 , 0 ) ] ;
1613: LD_ADDR_OWVAR 31
1617: PUSH
1618: LD_EXP 12
1622: PUSH
1623: LD_INT 3
1625: NEG
1626: PPUSH
1627: LD_INT 1
1629: PPUSH
1630: CALL_OW 12
1634: PLUS
1635: PUSH
1636: LD_EXP 13
1640: PUSH
1641: LD_INT 3
1643: NEG
1644: PPUSH
1645: LD_INT 0
1647: PPUSH
1648: CALL_OW 12
1652: PLUS
1653: PUSH
1654: LD_EXP 14
1658: PUSH
1659: LD_INT 0
1661: PPUSH
1662: LD_INT 1
1664: PPUSH
1665: CALL_OW 12
1669: PLUS
1670: PUSH
1671: LD_EXP 15
1675: PUSH
1676: LD_INT 3
1678: NEG
1679: PPUSH
1680: LD_INT 0
1682: PPUSH
1683: CALL_OW 12
1687: PLUS
1688: PUSH
1689: EMPTY
1690: LIST
1691: LIST
1692: LIST
1693: LIST
1694: ST_TO_ADDR
// hc_attr = [ Rand ( 8 , 12 ) , Rand ( 9 , 11 ) ] ;
1695: LD_ADDR_OWVAR 29
1699: PUSH
1700: LD_INT 8
1702: PPUSH
1703: LD_INT 12
1705: PPUSH
1706: CALL_OW 12
1710: PUSH
1711: LD_INT 9
1713: PPUSH
1714: LD_INT 11
1716: PPUSH
1717: CALL_OW 12
1721: PUSH
1722: EMPTY
1723: LIST
1724: LIST
1725: ST_TO_ADDR
// hc_name =  ;
1726: LD_ADDR_OWVAR 26
1730: PUSH
1731: LD_STRING 
1733: ST_TO_ADDR
// hc_class = 3 ;
1734: LD_ADDR_OWVAR 28
1738: PUSH
1739: LD_INT 3
1741: ST_TO_ADDR
// un = CreateHuman ;
1742: LD_ADDR_VAR 0 2
1746: PUSH
1747: CALL_OW 44
1751: ST_TO_ADDR
// PlaceUnitArea ( un , CompResp , false ) ;
1752: LD_VAR 0 2
1756: PPUSH
1757: LD_INT 1
1759: PPUSH
1760: LD_INT 0
1762: PPUSH
1763: CALL_OW 49
// Comp_Units := Comp_Units ^ un ;
1767: LD_ADDR_EXP 4
1771: PUSH
1772: LD_EXP 4
1776: PUSH
1777: LD_VAR 0 2
1781: ADD
1782: ST_TO_ADDR
// Comp_Mechs := Comp_Mechs ^ un ;
1783: LD_ADDR_EXP 9
1787: PUSH
1788: LD_EXP 9
1792: PUSH
1793: LD_VAR 0 2
1797: ADD
1798: ST_TO_ADDR
// end ;
1799: GO 1586
1801: POP
1802: POP
// for i = 1 to comp_cont do
1803: LD_ADDR_VAR 0 5
1807: PUSH
1808: DOUBLE
1809: LD_INT 1
1811: DEC
1812: ST_TO_ADDR
1813: LD_EXP 3
1817: PUSH
1818: FOR_TO
1819: IFFALSE 2033
// begin hc_sex = Rand ( sex_male , sex_female ) ;
1821: LD_ADDR_OWVAR 27
1825: PUSH
1826: LD_INT 1
1828: PPUSH
1829: LD_INT 2
1831: PPUSH
1832: CALL_OW 12
1836: ST_TO_ADDR
// hc_gallery =  ;
1837: LD_ADDR_OWVAR 33
1841: PUSH
1842: LD_STRING 
1844: ST_TO_ADDR
// hc_skills = [ comp_skill1 + Rand ( - 3 , 1 ) , comp_skill2 + Rand ( - 3 , 0 ) , comp_skill3 + Rand ( - 3 , 0 ) , comp_skill4 + Rand ( 0 , 1 ) ] ;
1845: LD_ADDR_OWVAR 31
1849: PUSH
1850: LD_EXP 12
1854: PUSH
1855: LD_INT 3
1857: NEG
1858: PPUSH
1859: LD_INT 1
1861: PPUSH
1862: CALL_OW 12
1866: PLUS
1867: PUSH
1868: LD_EXP 13
1872: PUSH
1873: LD_INT 3
1875: NEG
1876: PPUSH
1877: LD_INT 0
1879: PPUSH
1880: CALL_OW 12
1884: PLUS
1885: PUSH
1886: LD_EXP 14
1890: PUSH
1891: LD_INT 3
1893: NEG
1894: PPUSH
1895: LD_INT 0
1897: PPUSH
1898: CALL_OW 12
1902: PLUS
1903: PUSH
1904: LD_EXP 15
1908: PUSH
1909: LD_INT 0
1911: PPUSH
1912: LD_INT 1
1914: PPUSH
1915: CALL_OW 12
1919: PLUS
1920: PUSH
1921: EMPTY
1922: LIST
1923: LIST
1924: LIST
1925: LIST
1926: ST_TO_ADDR
// hc_attr = [ Rand ( 8 , 12 ) , Rand ( 9 , 11 ) ] ;
1927: LD_ADDR_OWVAR 29
1931: PUSH
1932: LD_INT 8
1934: PPUSH
1935: LD_INT 12
1937: PPUSH
1938: CALL_OW 12
1942: PUSH
1943: LD_INT 9
1945: PPUSH
1946: LD_INT 11
1948: PPUSH
1949: CALL_OW 12
1953: PUSH
1954: EMPTY
1955: LIST
1956: LIST
1957: ST_TO_ADDR
// hc_name =  ;
1958: LD_ADDR_OWVAR 26
1962: PUSH
1963: LD_STRING 
1965: ST_TO_ADDR
// hc_class = 4 ;
1966: LD_ADDR_OWVAR 28
1970: PUSH
1971: LD_INT 4
1973: ST_TO_ADDR
// un = CreateHuman ;
1974: LD_ADDR_VAR 0 2
1978: PUSH
1979: CALL_OW 44
1983: ST_TO_ADDR
// PlaceUnitArea ( un , CompResp , false ) ;
1984: LD_VAR 0 2
1988: PPUSH
1989: LD_INT 1
1991: PPUSH
1992: LD_INT 0
1994: PPUSH
1995: CALL_OW 49
// Comp_Units := Comp_Units ^ un ;
1999: LD_ADDR_EXP 4
2003: PUSH
2004: LD_EXP 4
2008: PUSH
2009: LD_VAR 0 2
2013: ADD
2014: ST_TO_ADDR
// Comp_Sci := Comp_Sci ^ un ;
2015: LD_ADDR_EXP 10
2019: PUSH
2020: LD_EXP 10
2024: PUSH
2025: LD_VAR 0 2
2029: ADD
2030: ST_TO_ADDR
// end ;
2031: GO 1818
2033: POP
2034: POP
// end ;
2035: LD_VAR 0 1
2039: RET
// function PrepareFlag ; begin
2040: LD_INT 0
2042: PPUSH
// veh_bonus = [ 0 , 10 , 25 ] [ diff_level ] ;
2043: LD_ADDR_EXP 21
2047: PUSH
2048: LD_INT 0
2050: PUSH
2051: LD_INT 10
2053: PUSH
2054: LD_INT 25
2056: PUSH
2057: EMPTY
2058: LIST
2059: LIST
2060: LIST
2061: PUSH
2062: LD_EXP 16
2066: ARRAY
2067: ST_TO_ADDR
// build_bonus = [ 0 , 15 , 30 ] [ diff_level ] ;
2068: LD_ADDR_EXP 22
2072: PUSH
2073: LD_INT 0
2075: PUSH
2076: LD_INT 15
2078: PUSH
2079: LD_INT 30
2081: PUSH
2082: EMPTY
2083: LIST
2084: LIST
2085: LIST
2086: PUSH
2087: LD_EXP 16
2091: ARRAY
2092: ST_TO_ADDR
// if Bonus = true then
2093: LD_EXP 19
2097: PUSH
2098: LD_INT 1
2100: EQUAL
2101: IFFALSE 2193
// SetBattleFlag ( comp_side , 59 , 93 , [ [ bfo_defend_bonus_human , bonus_level ] , [ bfo_defend_bonus_vehicle , bonus_level + veh_bonus ] , [ bfo_defend_bonus_building , bonus_level + build_bonus ] , [ bfo_range , 50 ] , [ bfo_height , 100 ] ] ) ;
2103: LD_EXP 1
2107: PPUSH
2108: LD_INT 59
2110: PPUSH
2111: LD_INT 93
2113: PPUSH
2114: LD_INT 1
2116: PUSH
2117: LD_EXP 20
2121: PUSH
2122: EMPTY
2123: LIST
2124: LIST
2125: PUSH
2126: LD_INT 2
2128: PUSH
2129: LD_EXP 20
2133: PUSH
2134: LD_EXP 21
2138: PLUS
2139: PUSH
2140: EMPTY
2141: LIST
2142: LIST
2143: PUSH
2144: LD_INT 3
2146: PUSH
2147: LD_EXP 20
2151: PUSH
2152: LD_EXP 22
2156: PLUS
2157: PUSH
2158: EMPTY
2159: LIST
2160: LIST
2161: PUSH
2162: LD_INT 10
2164: PUSH
2165: LD_INT 50
2167: PUSH
2168: EMPTY
2169: LIST
2170: LIST
2171: PUSH
2172: LD_INT 20
2174: PUSH
2175: LD_INT 100
2177: PUSH
2178: EMPTY
2179: LIST
2180: LIST
2181: PUSH
2182: EMPTY
2183: LIST
2184: LIST
2185: LIST
2186: LIST
2187: LIST
2188: PPUSH
2189: CALL_OW 418
// end ;
2193: LD_VAR 0 1
2197: RET
// export comp_oil , comp_sib ; function PrepareInfo ; begin
2198: LD_INT 0
2200: PPUSH
// comp_oil := [ 48 , 91 , 74 , 116 , 70 , 73 ] ;
2201: LD_ADDR_EXP 36
2205: PUSH
2206: LD_INT 48
2208: PUSH
2209: LD_INT 91
2211: PUSH
2212: LD_INT 74
2214: PUSH
2215: LD_INT 116
2217: PUSH
2218: LD_INT 70
2220: PUSH
2221: LD_INT 73
2223: PUSH
2224: EMPTY
2225: LIST
2226: LIST
2227: LIST
2228: LIST
2229: LIST
2230: LIST
2231: ST_TO_ADDR
// comp_sib := [ 76 , 107 , 65 , 69 ] ;
2232: LD_ADDR_EXP 37
2236: PUSH
2237: LD_INT 76
2239: PUSH
2240: LD_INT 107
2242: PUSH
2243: LD_INT 65
2245: PUSH
2246: LD_INT 69
2248: PUSH
2249: EMPTY
2250: LIST
2251: LIST
2252: LIST
2253: LIST
2254: ST_TO_ADDR
// end ;
2255: LD_VAR 0 1
2259: RET
// function CheckStrategy ; begin
2260: LD_INT 0
2262: PPUSH
// StrategyI ;
2263: CALL 2568 0 0
// end ; end_of_file
2267: LD_VAR 0 1
2271: RET
// export CanBuildBase , CanBuildFactory , CanBuildLab , CanBuildForts , CanBuildPlants , CanFactoryWork , ArmouryComplete , LabComplete , LabComplete2 , FacComplete , TowerComplete , LabFull1 , LabFull2 , labs , TechOil , TechSolar , TechApe , TechGatling , TechGun , TechHeavyGun , TechRocket , TechRadar , TechRemoteControl , TechLaser , TechAI , TechAI2 , TechAI3 , ProductionRADAR , ProductionCOMPUTER , ProductionAPEMAN , AlertOn , AlertOff , CanAttack , CanProduce , CanBuildRocket ; export function CompTriggers ; begin
2272: LD_INT 0
2274: PPUSH
// CanBuildBase = false ;
2275: LD_ADDR_EXP 38
2279: PUSH
2280: LD_INT 0
2282: ST_TO_ADDR
// CanBuildFactory = false ;
2283: LD_ADDR_EXP 39
2287: PUSH
2288: LD_INT 0
2290: ST_TO_ADDR
// CanBuildLab = false ;
2291: LD_ADDR_EXP 40
2295: PUSH
2296: LD_INT 0
2298: ST_TO_ADDR
// CanBuildForts = false ;
2299: LD_ADDR_EXP 41
2303: PUSH
2304: LD_INT 0
2306: ST_TO_ADDR
// CanBuildPlants = false ;
2307: LD_ADDR_EXP 42
2311: PUSH
2312: LD_INT 0
2314: ST_TO_ADDR
// ArmouryComplete = false ;
2315: LD_ADDR_EXP 44
2319: PUSH
2320: LD_INT 0
2322: ST_TO_ADDR
// LabComplete = false ;
2323: LD_ADDR_EXP 45
2327: PUSH
2328: LD_INT 0
2330: ST_TO_ADDR
// LabComplete2 = false ;
2331: LD_ADDR_EXP 46
2335: PUSH
2336: LD_INT 0
2338: ST_TO_ADDR
// FacComplete = false ;
2339: LD_ADDR_EXP 47
2343: PUSH
2344: LD_INT 0
2346: ST_TO_ADDR
// TowerComplete = false ;
2347: LD_ADDR_EXP 48
2351: PUSH
2352: LD_INT 0
2354: ST_TO_ADDR
// CanFactoryWork = false ;
2355: LD_ADDR_EXP 43
2359: PUSH
2360: LD_INT 0
2362: ST_TO_ADDR
// LabFull1 = false ;
2363: LD_ADDR_EXP 49
2367: PUSH
2368: LD_INT 0
2370: ST_TO_ADDR
// LabFull2 = false ;
2371: LD_ADDR_EXP 50
2375: PUSH
2376: LD_INT 0
2378: ST_TO_ADDR
// labs = 0 ;
2379: LD_ADDR_EXP 51
2383: PUSH
2384: LD_INT 0
2386: ST_TO_ADDR
// TechOil = false ;
2387: LD_ADDR_EXP 52
2391: PUSH
2392: LD_INT 0
2394: ST_TO_ADDR
// TechSolar = false ;
2395: LD_ADDR_EXP 53
2399: PUSH
2400: LD_INT 0
2402: ST_TO_ADDR
// TechApe = false ;
2403: LD_ADDR_EXP 54
2407: PUSH
2408: LD_INT 0
2410: ST_TO_ADDR
// TechGatling = false ;
2411: LD_ADDR_EXP 55
2415: PUSH
2416: LD_INT 0
2418: ST_TO_ADDR
// TechGun = false ;
2419: LD_ADDR_EXP 56
2423: PUSH
2424: LD_INT 0
2426: ST_TO_ADDR
// TechHeavyGun = false ;
2427: LD_ADDR_EXP 57
2431: PUSH
2432: LD_INT 0
2434: ST_TO_ADDR
// TechRocket = false ;
2435: LD_ADDR_EXP 58
2439: PUSH
2440: LD_INT 0
2442: ST_TO_ADDR
// TechRadar = false ;
2443: LD_ADDR_EXP 59
2447: PUSH
2448: LD_INT 0
2450: ST_TO_ADDR
// TechRemoteControl = false ;
2451: LD_ADDR_EXP 60
2455: PUSH
2456: LD_INT 0
2458: ST_TO_ADDR
// TechLaser = false ;
2459: LD_ADDR_EXP 61
2463: PUSH
2464: LD_INT 0
2466: ST_TO_ADDR
// TechAI = false ;
2467: LD_ADDR_EXP 62
2471: PUSH
2472: LD_INT 0
2474: ST_TO_ADDR
// TechAI2 = false ;
2475: LD_ADDR_EXP 63
2479: PUSH
2480: LD_INT 0
2482: ST_TO_ADDR
// TechAI3 = false ;
2483: LD_ADDR_EXP 64
2487: PUSH
2488: LD_INT 0
2490: ST_TO_ADDR
// ProductionRADAR = false ;
2491: LD_ADDR_EXP 65
2495: PUSH
2496: LD_INT 0
2498: ST_TO_ADDR
// ProductionCOMPUTER = false ;
2499: LD_ADDR_EXP 66
2503: PUSH
2504: LD_INT 0
2506: ST_TO_ADDR
// ProductionAPEMAN = false ;
2507: LD_ADDR_EXP 67
2511: PUSH
2512: LD_INT 0
2514: ST_TO_ADDR
// EnemyDetected = false ;
2515: LD_ADDR_EXP 84
2519: PUSH
2520: LD_INT 0
2522: ST_TO_ADDR
// AlertOn = false ;
2523: LD_ADDR_EXP 68
2527: PUSH
2528: LD_INT 0
2530: ST_TO_ADDR
// AlertOff = true ;
2531: LD_ADDR_EXP 69
2535: PUSH
2536: LD_INT 1
2538: ST_TO_ADDR
// CanAttack = false ;
2539: LD_ADDR_EXP 70
2543: PUSH
2544: LD_INT 0
2546: ST_TO_ADDR
// CanProduce = false ;
2547: LD_ADDR_EXP 71
2551: PUSH
2552: LD_INT 0
2554: ST_TO_ADDR
// CanBuildRocket = false ;
2555: LD_ADDR_EXP 72
2559: PUSH
2560: LD_INT 0
2562: ST_TO_ADDR
// end ; end_of_file
2563: LD_VAR 0 1
2567: RET
// export function StrategyI ; var i , un , pos_x , pos_y ; begin
2568: LD_INT 0
2570: PPUSH
2571: PPUSH
2572: PPUSH
2573: PPUSH
2574: PPUSH
// SetTech ( 20 , comp_side , state_researched ) ;
2575: LD_INT 20
2577: PPUSH
2578: LD_EXP 1
2582: PPUSH
2583: LD_INT 2
2585: PPUSH
2586: CALL_OW 322
// for i = 1 to comp_engs do
2590: LD_ADDR_VAR 0 2
2594: PUSH
2595: DOUBLE
2596: LD_INT 1
2598: DEC
2599: ST_TO_ADDR
2600: LD_EXP 8
2604: PUSH
2605: FOR_TO
2606: IFFALSE 2634
// begin BuildDepot ( comp_engs [ i ] , 61 , 106 , 0 ) ;
2608: LD_EXP 8
2612: PUSH
2613: LD_VAR 0 2
2617: ARRAY
2618: PPUSH
2619: LD_INT 61
2621: PPUSH
2622: LD_INT 106
2624: PPUSH
2625: LD_INT 0
2627: PPUSH
2628: CALL 7339 0 4
// end ;
2632: GO 2605
2634: POP
2635: POP
// Wait ( 0 0$03 ) ;
2636: LD_INT 105
2638: PPUSH
2639: CALL_OW 67
// for i = 1 to comp_mechs do
2643: LD_ADDR_VAR 0 2
2647: PUSH
2648: DOUBLE
2649: LD_INT 1
2651: DEC
2652: ST_TO_ADDR
2653: LD_EXP 9
2657: PUSH
2658: FOR_TO
2659: IFFALSE 2705
// begin ComMoveXY ( comp_mechs [ i ] , 59 , 104 ) ;
2661: LD_EXP 9
2665: PUSH
2666: LD_VAR 0 2
2670: ARRAY
2671: PPUSH
2672: LD_INT 59
2674: PPUSH
2675: LD_INT 104
2677: PPUSH
2678: CALL_OW 111
// ComMoveXY ( comp_sci [ i ] , 59 , 104 ) ;
2682: LD_EXP 10
2686: PUSH
2687: LD_VAR 0 2
2691: ARRAY
2692: PPUSH
2693: LD_INT 59
2695: PPUSH
2696: LD_INT 104
2698: PPUSH
2699: CALL_OW 111
// end ;
2703: GO 2658
2705: POP
2706: POP
// ComMoveXY ( comp_sci [ 1 ] , comp_oil [ 1 ] , comp_oil [ 2 ] ) ;
2707: LD_EXP 10
2711: PUSH
2712: LD_INT 1
2714: ARRAY
2715: PPUSH
2716: LD_EXP 36
2720: PUSH
2721: LD_INT 1
2723: ARRAY
2724: PPUSH
2725: LD_EXP 36
2729: PUSH
2730: LD_INT 2
2732: ARRAY
2733: PPUSH
2734: CALL_OW 111
// AddComMoveXY ( comp_sci [ 1 ] , GetX ( comp_sci [ 3 ] ) , GetY ( comp_sci [ 3 ] ) ) ;
2738: LD_EXP 10
2742: PUSH
2743: LD_INT 1
2745: ARRAY
2746: PPUSH
2747: LD_EXP 10
2751: PUSH
2752: LD_INT 3
2754: ARRAY
2755: PPUSH
2756: CALL_OW 250
2760: PPUSH
2761: LD_EXP 10
2765: PUSH
2766: LD_INT 3
2768: ARRAY
2769: PPUSH
2770: CALL_OW 251
2774: PPUSH
2775: CALL_OW 171
// if comp_oil > 2 then
2779: LD_EXP 36
2783: PUSH
2784: LD_INT 2
2786: GREATER
2787: IFFALSE 2861
// begin ComMoveXY ( comp_sci [ 2 ] , comp_oil [ 3 ] , comp_oil [ 4 ] ) ;
2789: LD_EXP 10
2793: PUSH
2794: LD_INT 2
2796: ARRAY
2797: PPUSH
2798: LD_EXP 36
2802: PUSH
2803: LD_INT 3
2805: ARRAY
2806: PPUSH
2807: LD_EXP 36
2811: PUSH
2812: LD_INT 4
2814: ARRAY
2815: PPUSH
2816: CALL_OW 111
// AddComMoveXY ( comp_sci [ 2 ] , GetX ( comp_sci [ 3 ] ) , GetY ( comp_sci [ 3 ] ) ) ;
2820: LD_EXP 10
2824: PUSH
2825: LD_INT 2
2827: ARRAY
2828: PPUSH
2829: LD_EXP 10
2833: PUSH
2834: LD_INT 3
2836: ARRAY
2837: PPUSH
2838: CALL_OW 250
2842: PPUSH
2843: LD_EXP 10
2847: PUSH
2848: LD_INT 3
2850: ARRAY
2851: PPUSH
2852: CALL_OW 251
2856: PPUSH
2857: CALL_OW 171
// end ; repeat begin Wait ( 0 0$01 ) ;
2861: LD_INT 35
2863: PPUSH
2864: CALL_OW 67
// end until CanBuildBase = true ;
2868: LD_EXP 38
2872: PUSH
2873: LD_INT 1
2875: EQUAL
2876: IFFALSE 2861
// Wait ( 0 0$02 ) ;
2878: LD_INT 70
2880: PPUSH
2881: CALL_OW 67
// AddComBuild ( comp_engs [ 1 ] , b_oil_mine , comp_oil [ 1 ] , comp_oil [ 2 ] , Rand ( 0 , 5 ) ) ;
2885: LD_EXP 8
2889: PUSH
2890: LD_INT 1
2892: ARRAY
2893: PPUSH
2894: LD_INT 29
2896: PPUSH
2897: LD_EXP 36
2901: PUSH
2902: LD_INT 1
2904: ARRAY
2905: PPUSH
2906: LD_EXP 36
2910: PUSH
2911: LD_INT 2
2913: ARRAY
2914: PPUSH
2915: LD_INT 0
2917: PPUSH
2918: LD_INT 5
2920: PPUSH
2921: CALL_OW 12
2925: PPUSH
2926: CALL_OW 205
// AddComBuild ( comp_engs [ 3 ] , b_siberite_mine , 53 , 102 , Rand ( 0 , 5 ) ) ;
2930: LD_EXP 8
2934: PUSH
2935: LD_INT 3
2937: ARRAY
2938: PPUSH
2939: LD_INT 30
2941: PPUSH
2942: LD_INT 53
2944: PPUSH
2945: LD_INT 102
2947: PPUSH
2948: LD_INT 0
2950: PPUSH
2951: LD_INT 5
2953: PPUSH
2954: CALL_OW 12
2958: PPUSH
2959: CALL_OW 205
// if comp_oil > 2 then
2963: LD_EXP 36
2967: PUSH
2968: LD_INT 2
2970: GREATER
2971: IFFALSE 3018
// begin AddComBuild ( comp_engs [ 2 ] , b_oil_mine , comp_oil [ 3 ] , comp_oil [ 4 ] , Rand ( 0 , 5 ) ) ;
2973: LD_EXP 8
2977: PUSH
2978: LD_INT 2
2980: ARRAY
2981: PPUSH
2982: LD_INT 29
2984: PPUSH
2985: LD_EXP 36
2989: PUSH
2990: LD_INT 3
2992: ARRAY
2993: PPUSH
2994: LD_EXP 36
2998: PUSH
2999: LD_INT 4
3001: ARRAY
3002: PPUSH
3003: LD_INT 0
3005: PPUSH
3006: LD_INT 5
3008: PPUSH
3009: CALL_OW 12
3013: PPUSH
3014: CALL_OW 205
// end ; for i = 3 to comp_engs do
3018: LD_ADDR_VAR 0 2
3022: PUSH
3023: DOUBLE
3024: LD_INT 3
3026: DEC
3027: ST_TO_ADDR
3028: LD_EXP 8
3032: PUSH
3033: FOR_TO
3034: IFFALSE 3065
// begin AddComBuild ( comp_engs [ i ] , b_armoury , 61 , 84 , 3 ) ;
3036: LD_EXP 8
3040: PUSH
3041: LD_VAR 0 2
3045: ARRAY
3046: PPUSH
3047: LD_INT 4
3049: PPUSH
3050: LD_INT 61
3052: PPUSH
3053: LD_INT 84
3055: PPUSH
3056: LD_INT 3
3058: PPUSH
3059: CALL_OW 205
// end ;
3063: GO 3033
3065: POP
3066: POP
// end ;
3067: LD_VAR 0 1
3071: RET
// every 0 0$01 trigger ArmouryComplete = true and AlertOff = true do var i ;
3072: LD_EXP 44
3076: PUSH
3077: LD_INT 1
3079: EQUAL
3080: PUSH
3081: LD_EXP 69
3085: PUSH
3086: LD_INT 1
3088: EQUAL
3089: AND
3090: IFFALSE 3347
3092: GO 3094
3094: DISABLE
3095: LD_INT 0
3097: PPUSH
// begin for i = 1 to comp_sold do
3098: LD_ADDR_VAR 0 1
3102: PUSH
3103: DOUBLE
3104: LD_INT 1
3106: DEC
3107: ST_TO_ADDR
3108: LD_EXP 7
3112: PUSH
3113: FOR_TO
3114: IFFALSE 3142
// begin ComEnterUnit ( comp_sold [ i ] , comp_arm [ 1 ] ) ;
3116: LD_EXP 7
3120: PUSH
3121: LD_VAR 0 1
3125: ARRAY
3126: PPUSH
3127: LD_EXP 28
3131: PUSH
3132: LD_INT 1
3134: ARRAY
3135: PPUSH
3136: CALL_OW 120
// end ;
3140: GO 3113
3142: POP
3143: POP
// for i = 1 to comp_mechs do
3144: LD_ADDR_VAR 0 1
3148: PUSH
3149: DOUBLE
3150: LD_INT 1
3152: DEC
3153: ST_TO_ADDR
3154: LD_EXP 9
3158: PUSH
3159: FOR_TO
3160: IFFALSE 3182
// begin SetClass ( comp_mechs [ i ] , class_engineer ) ;
3162: LD_EXP 9
3166: PUSH
3167: LD_VAR 0 1
3171: ARRAY
3172: PPUSH
3173: LD_INT 2
3175: PPUSH
3176: CALL_OW 336
// end ;
3180: GO 3159
3182: POP
3183: POP
// Wait ( 0 0$01 ) ;
3184: LD_INT 35
3186: PPUSH
3187: CALL_OW 67
// for i = 1 to comp_mechs do
3191: LD_ADDR_VAR 0 1
3195: PUSH
3196: DOUBLE
3197: LD_INT 1
3199: DEC
3200: ST_TO_ADDR
3201: LD_EXP 9
3205: PUSH
3206: FOR_TO
3207: IFFALSE 3238
// begin ComBuild ( comp_mechs [ i ] , b_lab , 53 , 97 , 1 ) ;
3209: LD_EXP 9
3213: PUSH
3214: LD_VAR 0 1
3218: ARRAY
3219: PPUSH
3220: LD_INT 6
3222: PPUSH
3223: LD_INT 53
3225: PPUSH
3226: LD_INT 97
3228: PPUSH
3229: LD_INT 1
3231: PPUSH
3232: CALL_OW 145
// end ;
3236: GO 3206
3238: POP
3239: POP
// repeat begin Wait ( 0 0$01 ) ;
3240: LD_INT 35
3242: PPUSH
3243: CALL_OW 67
// end until LabComplete = true ;
3247: LD_EXP 45
3251: PUSH
3252: LD_INT 1
3254: EQUAL
3255: IFFALSE 3240
// for i = 1 to comp_sci do
3257: LD_ADDR_VAR 0 1
3261: PUSH
3262: DOUBLE
3263: LD_INT 1
3265: DEC
3266: ST_TO_ADDR
3267: LD_EXP 10
3271: PUSH
3272: FOR_TO
3273: IFFALSE 3297
// begin ComEnterUnit ( comp_sci [ i ] , comp_lab ) ;
3275: LD_EXP 10
3279: PUSH
3280: LD_VAR 0 1
3284: ARRAY
3285: PPUSH
3286: LD_EXP 26
3290: PPUSH
3291: CALL_OW 120
// end ;
3295: GO 3272
3297: POP
3298: POP
// AddComResearch ( comp_lab , tech_oilpow ) ;
3299: LD_EXP 26
3303: PPUSH
3304: LD_INT 46
3306: PPUSH
3307: CALL_OW 184
// AddComResearch ( comp_lab , tech_oileng ) ;
3311: LD_EXP 26
3315: PPUSH
3316: LD_INT 47
3318: PPUSH
3319: CALL_OW 184
// AddComResearch ( comp_lab , tech_solpow ) ;
3323: LD_EXP 26
3327: PPUSH
3328: LD_INT 35
3330: PPUSH
3331: CALL_OW 184
// AddComResearch ( comp_lab , tech_soleng ) ;
3335: LD_EXP 26
3339: PPUSH
3340: LD_INT 45
3342: PPUSH
3343: CALL_OW 184
// end ;
3347: PPOPN 1
3349: END
// every 0 0$01 trigger AlertOff = true and CanBuildPlants = true do var i ;
3350: LD_EXP 69
3354: PUSH
3355: LD_INT 1
3357: EQUAL
3358: PUSH
3359: LD_EXP 42
3363: PUSH
3364: LD_INT 1
3366: EQUAL
3367: AND
3368: IFFALSE 3745
3370: GO 3372
3372: DISABLE
3373: LD_INT 0
3375: PPUSH
// begin for i = 1 to comp_engs do
3376: LD_ADDR_VAR 0 1
3380: PUSH
3381: DOUBLE
3382: LD_INT 1
3384: DEC
3385: ST_TO_ADDR
3386: LD_EXP 8
3390: PUSH
3391: FOR_TO
3392: IFFALSE 3619
// begin AddComBuild ( comp_engs [ i ] , b_oil_power , 57 , 110 , Rand ( 0 , 5 ) ) ;
3394: LD_EXP 8
3398: PUSH
3399: LD_VAR 0 1
3403: ARRAY
3404: PPUSH
3405: LD_INT 26
3407: PPUSH
3408: LD_INT 57
3410: PPUSH
3411: LD_INT 110
3413: PPUSH
3414: LD_INT 0
3416: PPUSH
3417: LD_INT 5
3419: PPUSH
3420: CALL_OW 12
3424: PPUSH
3425: CALL_OW 205
// AddComBuild ( comp_engs [ i ] , b_oil_power , 46 , 88 , Rand ( 0 , 5 ) ) ;
3429: LD_EXP 8
3433: PUSH
3434: LD_VAR 0 1
3438: ARRAY
3439: PPUSH
3440: LD_INT 26
3442: PPUSH
3443: LD_INT 46
3445: PPUSH
3446: LD_INT 88
3448: PPUSH
3449: LD_INT 0
3451: PPUSH
3452: LD_INT 5
3454: PPUSH
3455: CALL_OW 12
3459: PPUSH
3460: CALL_OW 205
// AddComBuild ( comp_engs [ i ] , b_solar_power , 53 , 84 , Rand ( 0 , 5 ) ) ;
3464: LD_EXP 8
3468: PUSH
3469: LD_VAR 0 1
3473: ARRAY
3474: PPUSH
3475: LD_INT 27
3477: PPUSH
3478: LD_INT 53
3480: PPUSH
3481: LD_INT 84
3483: PPUSH
3484: LD_INT 0
3486: PPUSH
3487: LD_INT 5
3489: PPUSH
3490: CALL_OW 12
3494: PPUSH
3495: CALL_OW 205
// AddComBuild ( comp_engs [ i ] , b_bunker , 71 , 86 , 2 ) ;
3499: LD_EXP 8
3503: PUSH
3504: LD_VAR 0 1
3508: ARRAY
3509: PPUSH
3510: LD_INT 32
3512: PPUSH
3513: LD_INT 71
3515: PPUSH
3516: LD_INT 86
3518: PPUSH
3519: LD_INT 2
3521: PPUSH
3522: CALL_OW 205
// AddComBuild ( comp_engs [ i ] , b_bunker , 47 , 82 , 2 ) ;
3526: LD_EXP 8
3530: PUSH
3531: LD_VAR 0 1
3535: ARRAY
3536: PPUSH
3537: LD_INT 32
3539: PPUSH
3540: LD_INT 47
3542: PPUSH
3543: LD_INT 82
3545: PPUSH
3546: LD_INT 2
3548: PPUSH
3549: CALL_OW 205
// if diff_def > 2 then
3553: LD_EXP 17
3557: PUSH
3558: LD_INT 2
3560: GREATER
3561: IFFALSE 3590
// begin AddComBuild ( comp_engs [ i ] , b_bunker , 81 , 96 , 4 ) ;
3563: LD_EXP 8
3567: PUSH
3568: LD_VAR 0 1
3572: ARRAY
3573: PPUSH
3574: LD_INT 32
3576: PPUSH
3577: LD_INT 81
3579: PPUSH
3580: LD_INT 96
3582: PPUSH
3583: LD_INT 4
3585: PPUSH
3586: CALL_OW 205
// end ; AddComBuild ( comp_mechs [ i ] , b_workshop , 68 , 100 , 5 ) ;
3590: LD_EXP 9
3594: PUSH
3595: LD_VAR 0 1
3599: ARRAY
3600: PPUSH
3601: LD_INT 2
3603: PPUSH
3604: LD_INT 68
3606: PPUSH
3607: LD_INT 100
3609: PPUSH
3610: LD_INT 5
3612: PPUSH
3613: CALL_OW 205
// end ;
3617: GO 3391
3619: POP
3620: POP
// if diff_def < 3 then
3621: LD_EXP 17
3625: PUSH
3626: LD_INT 3
3628: LESS
3629: IFFALSE 3648
// begin repeat begin Wait ( 0 0$01 ) ;
3631: LD_INT 35
3633: PPUSH
3634: CALL_OW 67
// end until comp_towers >= 2 ;
3638: LD_EXP 29
3642: PUSH
3643: LD_INT 2
3645: GREATEREQUAL
3646: IFFALSE 3631
// end ; if diff_def = 3 then
3648: LD_EXP 17
3652: PUSH
3653: LD_INT 3
3655: EQUAL
3656: IFFALSE 3675
// begin repeat begin Wait ( 0 0$01 ) ;
3658: LD_INT 35
3660: PPUSH
3661: CALL_OW 67
// end until comp_towers >= 3 ;
3665: LD_EXP 29
3669: PUSH
3670: LD_INT 3
3672: GREATEREQUAL
3673: IFFALSE 3658
// end ; for i = 1 to comp_towers do
3675: LD_ADDR_VAR 0 1
3679: PUSH
3680: DOUBLE
3681: LD_INT 1
3683: DEC
3684: ST_TO_ADDR
3685: LD_EXP 29
3689: PUSH
3690: FOR_TO
3691: IFFALSE 3743
// begin ComExitBuilding ( comp_sold [ i ] ) ;
3693: LD_EXP 7
3697: PUSH
3698: LD_VAR 0 1
3702: ARRAY
3703: PPUSH
3704: CALL_OW 122
// Wait ( 0 0$01 ) ;
3708: LD_INT 35
3710: PPUSH
3711: CALL_OW 67
// ComEnterUnit ( comp_sold [ i ] , comp_towers [ i ] ) ;
3715: LD_EXP 7
3719: PUSH
3720: LD_VAR 0 1
3724: ARRAY
3725: PPUSH
3726: LD_EXP 29
3730: PUSH
3731: LD_VAR 0 1
3735: ARRAY
3736: PPUSH
3737: CALL_OW 120
// end ;
3741: GO 3690
3743: POP
3744: POP
// end ;
3745: PPOPN 1
3747: END
// every 0 0$01 trigger FacComplete = true do var i ;
3748: LD_EXP 47
3752: PUSH
3753: LD_INT 1
3755: EQUAL
3756: IFFALSE 3832
3758: GO 3760
3760: DISABLE
3761: LD_INT 0
3763: PPUSH
// begin for i = 1 to comp_mechs do
3764: LD_ADDR_VAR 0 1
3768: PUSH
3769: DOUBLE
3770: LD_INT 1
3772: DEC
3773: ST_TO_ADDR
3774: LD_EXP 9
3778: PUSH
3779: FOR_TO
3780: IFFALSE 3822
// begin ComEnterUnit ( comp_mechs [ i ] , comp_factory ) ;
3782: LD_EXP 9
3786: PUSH
3787: LD_VAR 0 1
3791: ARRAY
3792: PPUSH
3793: LD_EXP 25
3797: PPUSH
3798: CALL_OW 120
// AddComChangeProfession ( comp_mechs [ i ] , class_mechanic ) ;
3802: LD_EXP 9
3806: PUSH
3807: LD_VAR 0 1
3811: ARRAY
3812: PPUSH
3813: LD_INT 3
3815: PPUSH
3816: CALL_OW 183
// end ;
3820: GO 3779
3822: POP
3823: POP
// CanFactoryWork = true ;
3824: LD_ADDR_EXP 43
3828: PUSH
3829: LD_INT 1
3831: ST_TO_ADDR
// end ;
3832: PPOPN 1
3834: END
// every 0 0$01 trigger Researched ( comp_side , tech_ai ) = true do var i ;
3835: LD_EXP 1
3839: PPUSH
3840: LD_INT 32
3842: PPUSH
3843: CALL_OW 325
3847: PUSH
3848: LD_INT 1
3850: EQUAL
3851: IFFALSE 3935
3853: GO 3855
3855: DISABLE
3856: LD_INT 0
3858: PPUSH
// begin for i = 1 to comp_engs do
3859: LD_ADDR_VAR 0 1
3863: PUSH
3864: DOUBLE
3865: LD_INT 1
3867: DEC
3868: ST_TO_ADDR
3869: LD_EXP 8
3873: PUSH
3874: FOR_TO
3875: IFFALSE 3933
// begin AddComBuild ( comp_engs [ i ] , b_turret , 55 , 82 , 2 ) ;
3877: LD_EXP 8
3881: PUSH
3882: LD_VAR 0 1
3886: ARRAY
3887: PPUSH
3888: LD_INT 33
3890: PPUSH
3891: LD_INT 55
3893: PPUSH
3894: LD_INT 82
3896: PPUSH
3897: LD_INT 2
3899: PPUSH
3900: CALL_OW 205
// AddComBuild ( comp_engs [ i ] , b_turret , 75 , 106 , 4 ) ;
3904: LD_EXP 8
3908: PUSH
3909: LD_VAR 0 1
3913: ARRAY
3914: PPUSH
3915: LD_INT 33
3917: PPUSH
3918: LD_INT 75
3920: PPUSH
3921: LD_INT 106
3923: PPUSH
3924: LD_INT 4
3926: PPUSH
3927: CALL_OW 205
// end ;
3931: GO 3874
3933: POP
3934: POP
// end ;
3935: PPOPN 1
3937: END
// every 0 0$30 trigger CanFactoryWork = true and comp_towers > 1 do var i ;
3938: LD_EXP 43
3942: PUSH
3943: LD_INT 1
3945: EQUAL
3946: PUSH
3947: LD_EXP 29
3951: PUSH
3952: LD_INT 1
3954: GREATER
3955: AND
3956: IFFALSE 4098
3958: GO 3960
3960: DISABLE
3961: LD_INT 0
3963: PPUSH
// begin AddComConstruct ( comp_factory , us_medium_tracked , engine_combustion , control_manual , us_cargo_bay ) ;
3964: LD_EXP 25
3968: PPUSH
3969: LD_INT 3
3971: PPUSH
3972: LD_INT 1
3974: PPUSH
3975: LD_INT 1
3977: PPUSH
3978: LD_INT 12
3980: PPUSH
3981: CALL_OW 185
// Wait ( 0 0$35 ) ;
3985: LD_INT 1225
3987: PPUSH
3988: CALL_OW 67
// for i = 1 to comp_towers do
3992: LD_ADDR_VAR 0 1
3996: PUSH
3997: DOUBLE
3998: LD_INT 1
4000: DEC
4001: ST_TO_ADDR
4002: LD_EXP 29
4006: PUSH
4007: FOR_TO
4008: IFFALSE 4096
// begin if diff_def = 1 then
4010: LD_EXP 17
4014: PUSH
4015: LD_INT 1
4017: EQUAL
4018: IFFALSE 4038
// begin AddComPlaceWeapon ( comp_towers [ i ] , us_machine_gun ) ;
4020: LD_EXP 29
4024: PUSH
4025: LD_VAR 0 1
4029: ARRAY
4030: PPUSH
4031: LD_INT 2
4033: PPUSH
4034: CALL_OW 208
// end ; if diff_def = 2 then
4038: LD_EXP 17
4042: PUSH
4043: LD_INT 2
4045: EQUAL
4046: IFFALSE 4066
// begin AddComPlaceWeapon ( comp_towers [ i ] , us_gatling_gun ) ;
4048: LD_EXP 29
4052: PUSH
4053: LD_VAR 0 1
4057: ARRAY
4058: PPUSH
4059: LD_INT 4
4061: PPUSH
4062: CALL_OW 208
// end ; if diff_def >= 3 then
4066: LD_EXP 17
4070: PUSH
4071: LD_INT 3
4073: GREATEREQUAL
4074: IFFALSE 4094
// begin AddComPlaceWeapon ( comp_towers [ i ] , us_double_gun ) ;
4076: LD_EXP 29
4080: PUSH
4081: LD_VAR 0 1
4085: ARRAY
4086: PPUSH
4087: LD_INT 5
4089: PPUSH
4090: CALL_OW 208
// end ; end ;
4094: GO 4007
4096: POP
4097: POP
// end ;
4098: PPOPN 1
4100: END
// every 0 0$02 trigger Researched ( comp_side , tech_advmet ) = true do var i ;
4101: LD_EXP 1
4105: PPUSH
4106: LD_INT 34
4108: PPUSH
4109: CALL_OW 325
4113: PUSH
4114: LD_INT 1
4116: EQUAL
4117: IFFALSE 4275
4119: GO 4121
4121: DISABLE
4122: LD_INT 0
4124: PPUSH
// begin if diff_def = 1 then
4125: LD_EXP 17
4129: PUSH
4130: LD_INT 1
4132: EQUAL
4133: IFFALSE 4175
// begin for i = 1 to comp_towers do
4135: LD_ADDR_VAR 0 1
4139: PUSH
4140: DOUBLE
4141: LD_INT 1
4143: DEC
4144: ST_TO_ADDR
4145: LD_EXP 29
4149: PUSH
4150: FOR_TO
4151: IFFALSE 4173
// begin AddComPlaceWeapon ( comp_towers [ i ] , us_double_gun ) ;
4153: LD_EXP 29
4157: PUSH
4158: LD_VAR 0 1
4162: ARRAY
4163: PPUSH
4164: LD_INT 5
4166: PPUSH
4167: CALL_OW 208
// end ;
4171: GO 4150
4173: POP
4174: POP
// end ; if diff_def = 2 then
4175: LD_EXP 17
4179: PUSH
4180: LD_INT 2
4182: EQUAL
4183: IFFALSE 4225
// begin for i = 1 to comp_towers do
4185: LD_ADDR_VAR 0 1
4189: PUSH
4190: DOUBLE
4191: LD_INT 1
4193: DEC
4194: ST_TO_ADDR
4195: LD_EXP 29
4199: PUSH
4200: FOR_TO
4201: IFFALSE 4223
// begin AddComPlaceWeapon ( comp_towers [ i ] , us_heavy_gun ) ;
4203: LD_EXP 29
4207: PUSH
4208: LD_VAR 0 1
4212: ARRAY
4213: PPUSH
4214: LD_INT 6
4216: PPUSH
4217: CALL_OW 208
// end ;
4221: GO 4200
4223: POP
4224: POP
// end ; if diff_def > 2 then
4225: LD_EXP 17
4229: PUSH
4230: LD_INT 2
4232: GREATER
4233: IFFALSE 4275
// begin for i = 1 to comp_towers do
4235: LD_ADDR_VAR 0 1
4239: PUSH
4240: DOUBLE
4241: LD_INT 1
4243: DEC
4244: ST_TO_ADDR
4245: LD_EXP 29
4249: PUSH
4250: FOR_TO
4251: IFFALSE 4273
// begin AddComPlaceWeapon ( comp_towers [ i ] , us_rocket_launcher ) ;
4253: LD_EXP 29
4257: PUSH
4258: LD_VAR 0 1
4262: ARRAY
4263: PPUSH
4264: LD_INT 7
4266: PPUSH
4267: CALL_OW 208
// end ;
4271: GO 4250
4273: POP
4274: POP
// end ; end ;
4275: PPOPN 1
4277: END
// every 0 0$30 trigger LabComplete = true do
4278: LD_EXP 45
4282: PUSH
4283: LD_INT 1
4285: EQUAL
4286: IFFALSE 4377
4288: GO 4290
4290: DISABLE
// begin if GetNation ( comp_sold [ 1 ] ) < 3 then
4291: LD_EXP 7
4295: PUSH
4296: LD_INT 1
4298: ARRAY
4299: PPUSH
4300: CALL_OW 248
4304: PUSH
4305: LD_INT 3
4307: LESS
4308: IFFALSE 4334
// begin AddComUpgradeLab ( comp_lab , b_lab_weapon ) ;
4310: LD_EXP 26
4314: PPUSH
4315: LD_INT 10
4317: PPUSH
4318: CALL_OW 207
// AddComUpgradeLab ( comp_lab , b_lab_opto ) ;
4322: LD_EXP 26
4326: PPUSH
4327: LD_INT 15
4329: PPUSH
4330: CALL_OW 207
// end ; if GetNation ( comp_sold [ 1 ] ) = 3 then
4334: LD_EXP 7
4338: PUSH
4339: LD_INT 1
4341: ARRAY
4342: PPUSH
4343: CALL_OW 248
4347: PUSH
4348: LD_INT 3
4350: EQUAL
4351: IFFALSE 4377
// begin AddComUpgradeLab ( comp_lab , b_lab_weapon ) ;
4353: LD_EXP 26
4357: PPUSH
4358: LD_INT 10
4360: PPUSH
4361: CALL_OW 207
// AddComUpgradeLab ( comp_lab , b_lab_computer ) ;
4365: LD_EXP 26
4369: PPUSH
4370: LD_INT 12
4372: PPUSH
4373: CALL_OW 207
// end ; end ;
4377: END
// every 0 0$01 trigger LabFull1 do var i ;
4378: LD_EXP 49
4382: IFFALSE 4632
4384: GO 4386
4386: DISABLE
4387: LD_INT 0
4389: PPUSH
// begin for i = 1 to comp_sci do
4390: LD_ADDR_VAR 0 1
4394: PUSH
4395: DOUBLE
4396: LD_INT 1
4398: DEC
4399: ST_TO_ADDR
4400: LD_EXP 10
4404: PUSH
4405: FOR_TO
4406: IFFALSE 4430
// begin AddComEnterUnit ( comp_sci [ i ] , comp_lab ) ;
4408: LD_EXP 10
4412: PUSH
4413: LD_VAR 0 1
4417: ARRAY
4418: PPUSH
4419: LD_EXP 26
4423: PPUSH
4424: CALL_OW 180
// end ;
4428: GO 4405
4430: POP
4431: POP
// AddComResearch ( comp_lab , tech_tech1 ) ;
4432: LD_EXP 26
4436: PPUSH
4437: LD_INT 48
4439: PPUSH
4440: CALL_OW 184
// AddComResearch ( comp_lab , tech_tech2 ) ;
4444: LD_EXP 26
4448: PPUSH
4449: LD_INT 49
4451: PPUSH
4452: CALL_OW 184
// AddComResearch ( comp_lab , tech_tech3 ) ;
4456: LD_EXP 26
4460: PPUSH
4461: LD_INT 50
4463: PPUSH
4464: CALL_OW 184
// AddComResearch ( comp_lab , tech_weap1 ) ;
4468: LD_EXP 26
4472: PPUSH
4473: LD_INT 51
4475: PPUSH
4476: CALL_OW 184
// AddComResearch ( comp_lab , tech_weap2 ) ;
4480: LD_EXP 26
4484: PPUSH
4485: LD_INT 52
4487: PPUSH
4488: CALL_OW 184
// AddComResearch ( comp_lab , tech_gatling ) ;
4492: LD_EXP 26
4496: PPUSH
4497: LD_INT 69
4499: PPUSH
4500: CALL_OW 184
// AddComResearch ( comp_lab , tech_gun ) ;
4504: LD_EXP 26
4508: PPUSH
4509: LD_INT 39
4511: PPUSH
4512: CALL_OW 184
// AddComResearch ( comp_lab , tech_opto1 ) ;
4516: LD_EXP 26
4520: PPUSH
4521: LD_INT 60
4523: PPUSH
4524: CALL_OW 184
// AddComResearch ( comp_lab , tech_radar ) ;
4528: LD_EXP 26
4532: PPUSH
4533: LD_INT 6
4535: PPUSH
4536: CALL_OW 184
// AddComResearch ( comp_lab , tech_opto2 ) ;
4540: LD_EXP 26
4544: PPUSH
4545: LD_INT 61
4547: PPUSH
4548: CALL_OW 184
// AddComResearch ( comp_lab , tech_remcont ) ;
4552: LD_EXP 26
4556: PPUSH
4557: LD_INT 15
4559: PPUSH
4560: CALL_OW 184
// if diff_attack > 1 then
4564: LD_EXP 18
4568: PUSH
4569: LD_INT 1
4571: GREATER
4572: IFFALSE 4598
// begin AddComResearch ( comp_lab , tech_advmet ) ;
4574: LD_EXP 26
4578: PPUSH
4579: LD_INT 34
4581: PPUSH
4582: CALL_OW 184
// AddComResearch ( comp_lab , tech_rocket ) ;
4586: LD_EXP 26
4590: PPUSH
4591: LD_INT 40
4593: PPUSH
4594: CALL_OW 184
// end ; if diff_attack > 2 then
4598: LD_EXP 18
4602: PUSH
4603: LD_INT 2
4605: GREATER
4606: IFFALSE 4620
// begin AddComResearch ( comp_lab , tech_weap3 ) ;
4608: LD_EXP 26
4612: PPUSH
4613: LD_INT 53
4615: PPUSH
4616: CALL_OW 184
// end ; AddComResearch ( comp_lab , tech_lassight ) ;
4620: LD_EXP 26
4624: PPUSH
4625: LD_INT 12
4627: PPUSH
4628: CALL_OW 184
// end ;
4632: PPOPN 1
4634: END
// every 0 0$01 trigger AlertOff = true and Researched ( comp_side , tech_tech3 ) = true do var i ;
4635: LD_EXP 69
4639: PUSH
4640: LD_INT 1
4642: EQUAL
4643: PUSH
4644: LD_EXP 1
4648: PPUSH
4649: LD_INT 50
4651: PPUSH
4652: CALL_OW 325
4656: PUSH
4657: LD_INT 1
4659: EQUAL
4660: AND
4661: IFFALSE 4718
4663: GO 4665
4665: DISABLE
4666: LD_INT 0
4668: PPUSH
// begin for i = 1 to comp_engs do
4669: LD_ADDR_VAR 0 1
4673: PUSH
4674: DOUBLE
4675: LD_INT 1
4677: DEC
4678: ST_TO_ADDR
4679: LD_EXP 8
4683: PUSH
4684: FOR_TO
4685: IFFALSE 4716
// begin AddComBuild ( comp_engs [ i ] , b_lab , 68 , 114 , 0 ) ;
4687: LD_EXP 8
4691: PUSH
4692: LD_VAR 0 1
4696: ARRAY
4697: PPUSH
4698: LD_INT 6
4700: PPUSH
4701: LD_INT 68
4703: PPUSH
4704: LD_INT 114
4706: PPUSH
4707: LD_INT 0
4709: PPUSH
4710: CALL_OW 205
// end ;
4714: GO 4684
4716: POP
4717: POP
// end ;
4718: PPOPN 1
4720: END
// every 0 0$01 trigger LabComplete2 = true do
4721: LD_EXP 46
4725: PUSH
4726: LD_INT 1
4728: EQUAL
4729: IFFALSE 4758
4731: GO 4733
4733: DISABLE
// begin AddComUpgradeLab ( comp_lab2 , b_lab_computer ) ;
4734: LD_EXP 27
4738: PPUSH
4739: LD_INT 12
4741: PPUSH
4742: CALL_OW 207
// AddComUpgradeLab ( comp_lab2 , b_lab_siberium ) ;
4746: LD_EXP 27
4750: PPUSH
4751: LD_INT 11
4753: PPUSH
4754: CALL_OW 207
// end ;
4758: END
// every 0 0$01 trigger LabFull2 = true do var i ;
4759: LD_EXP 50
4763: PUSH
4764: LD_INT 1
4766: EQUAL
4767: IFFALSE 4991
4769: GO 4771
4771: DISABLE
4772: LD_INT 0
4774: PPUSH
// begin Wait ( 0 0$10 ) ;
4775: LD_INT 350
4777: PPUSH
4778: CALL_OW 67
// for i = 3 to 4 do
4782: LD_ADDR_VAR 0 1
4786: PUSH
4787: DOUBLE
4788: LD_INT 3
4790: DEC
4791: ST_TO_ADDR
4792: LD_INT 4
4794: PUSH
4795: FOR_TO
4796: IFFALSE 4835
// begin AddComExitBuilding ( comp_sci [ i ] ) ;
4798: LD_EXP 10
4802: PUSH
4803: LD_VAR 0 1
4807: ARRAY
4808: PPUSH
4809: CALL_OW 182
// AddComEnterUnit ( comp_sci [ i ] , comp_lab2 ) ;
4813: LD_EXP 10
4817: PUSH
4818: LD_VAR 0 1
4822: ARRAY
4823: PPUSH
4824: LD_EXP 27
4828: PPUSH
4829: CALL_OW 180
// end ;
4833: GO 4795
4835: POP
4836: POP
// AddComResearch ( comp_lab2 , tech_comp1 ) ;
4837: LD_EXP 27
4841: PPUSH
4842: LD_INT 57
4844: PPUSH
4845: CALL_OW 184
// AddComResearch ( comp_lab2 , tech_comp2 ) ;
4849: LD_EXP 27
4853: PPUSH
4854: LD_INT 58
4856: PPUSH
4857: CALL_OW 184
// AddComResearch ( comp_lab2 , tech_comp3 ) ;
4861: LD_EXP 27
4865: PPUSH
4866: LD_INT 59
4868: PPUSH
4869: CALL_OW 184
// AddComResearch ( comp_lab2 , tech_ai ) ;
4873: LD_EXP 27
4877: PPUSH
4878: LD_INT 32
4880: PPUSH
4881: CALL_OW 184
// AddComResearch ( comp_lab2 , tech_advai ) ;
4885: LD_EXP 27
4889: PPUSH
4890: LD_INT 27
4892: PPUSH
4893: CALL_OW 184
// if diff_attack > 2 then
4897: LD_EXP 18
4901: PUSH
4902: LD_INT 2
4904: GREATER
4905: IFFALSE 4919
// AddComResearch ( comp_lab2 , tech_advchassis ) ;
4907: LD_EXP 27
4911: PPUSH
4912: LD_INT 36
4914: PPUSH
4915: CALL_OW 184
// AddComResearch ( comp_lab2 , tech_sib1 ) ;
4919: LD_EXP 27
4923: PPUSH
4924: LD_INT 54
4926: PPUSH
4927: CALL_OW 184
// AddComResearch ( comp_lab2 , tech_sib2 ) ;
4931: LD_EXP 27
4935: PPUSH
4936: LD_INT 55
4938: PPUSH
4939: CALL_OW 184
// AddComResearch ( comp_lab2 , tech_sib3 ) ;
4943: LD_EXP 27
4947: PPUSH
4948: LD_INT 56
4950: PPUSH
4951: CALL_OW 184
// AddComResearch ( comp_lab2 , tech_sibpow ) ;
4955: LD_EXP 27
4959: PPUSH
4960: LD_INT 21
4962: PPUSH
4963: CALL_OW 184
// AddComResearch ( comp_lab2 , tech_sibeng ) ;
4967: LD_EXP 27
4971: PPUSH
4972: LD_INT 22
4974: PPUSH
4975: CALL_OW 184
// AddComResearch ( comp_lab2 , tech_sibfiss ) ;
4979: LD_EXP 27
4983: PPUSH
4984: LD_INT 25
4986: PPUSH
4987: CALL_OW 184
// end ;
4991: PPOPN 1
4993: END
// every 0 0$01 trigger AlertOff = true and TechRemoteControl = true do var i ;
4994: LD_EXP 69
4998: PUSH
4999: LD_INT 1
5001: EQUAL
5002: PUSH
5003: LD_EXP 60
5007: PUSH
5008: LD_INT 1
5010: EQUAL
5011: AND
5012: IFFALSE 5104
5014: GO 5016
5016: DISABLE
5017: LD_INT 0
5019: PPUSH
// begin for i = 1 to comp_engs do
5020: LD_ADDR_VAR 0 1
5024: PUSH
5025: DOUBLE
5026: LD_INT 1
5028: DEC
5029: ST_TO_ADDR
5030: LD_EXP 8
5034: PUSH
5035: FOR_TO
5036: IFFALSE 5102
// begin AddComBuild ( comp_engs [ i ] , b_control_tower , 78 , 115 , 5 ) ;
5038: LD_EXP 8
5042: PUSH
5043: LD_VAR 0 1
5047: ARRAY
5048: PPUSH
5049: LD_INT 36
5051: PPUSH
5052: LD_INT 78
5054: PPUSH
5055: LD_INT 115
5057: PPUSH
5058: LD_INT 5
5060: PPUSH
5061: CALL_OW 205
// AddComBuild ( comp_engs [ i ] , b_solar_power , 76 , 110 , Rand ( 0 , 5 ) ) ;
5065: LD_EXP 8
5069: PUSH
5070: LD_VAR 0 1
5074: ARRAY
5075: PPUSH
5076: LD_INT 27
5078: PPUSH
5079: LD_INT 76
5081: PPUSH
5082: LD_INT 110
5084: PPUSH
5085: LD_INT 0
5087: PPUSH
5088: LD_INT 5
5090: PPUSH
5091: CALL_OW 12
5095: PPUSH
5096: CALL_OW 205
// end ;
5100: GO 5035
5102: POP
5103: POP
// end ;
5104: PPOPN 1
5106: END
// every 0 0$01 trigger AlertOff = true and dlimiter > 0 do
5107: LD_EXP 69
5111: PUSH
5112: LD_INT 1
5114: EQUAL
5115: PUSH
5116: LD_EXP 35
5120: PUSH
5121: LD_INT 0
5123: GREATER
5124: AND
5125: IFFALSE 5139
5127: GO 5129
5129: DISABLE
// begin ComUpgrade ( comp_arm ) ;
5130: LD_EXP 28
5134: PPUSH
5135: CALL_OW 146
// end ;
5139: END
// every 0 0$01 trigger AlertOff = true and TowerComplete = true do var i ;
5140: LD_EXP 69
5144: PUSH
5145: LD_INT 1
5147: EQUAL
5148: PUSH
5149: LD_EXP 48
5153: PUSH
5154: LD_INT 1
5156: EQUAL
5157: AND
5158: IFFALSE 5463
5160: GO 5162
5162: DISABLE
5163: LD_INT 0
5165: PPUSH
// begin ComMoveXY ( comp_engs , 61 , 104 ) ;
5166: LD_EXP 8
5170: PPUSH
5171: LD_INT 61
5173: PPUSH
5174: LD_INT 104
5176: PPUSH
5177: CALL_OW 111
// ComExitBuilding ( comp_mechs [ 1 ] ) ;
5181: LD_EXP 9
5185: PUSH
5186: LD_INT 1
5188: ARRAY
5189: PPUSH
5190: CALL_OW 122
// ComExitBuilding ( comp_mechs [ 2 ] ) ;
5194: LD_EXP 9
5198: PUSH
5199: LD_INT 2
5201: ARRAY
5202: PPUSH
5203: CALL_OW 122
// comp_rdriver = comp_rdriver ^ comp_mechs [ 1 ] ;
5207: LD_ADDR_EXP 11
5211: PUSH
5212: LD_EXP 11
5216: PUSH
5217: LD_EXP 9
5221: PUSH
5222: LD_INT 1
5224: ARRAY
5225: ADD
5226: ST_TO_ADDR
// comp_rdriver = comp_rdriver ^ comp_mechs [ 2 ] ;
5227: LD_ADDR_EXP 11
5231: PUSH
5232: LD_EXP 11
5236: PUSH
5237: LD_EXP 9
5241: PUSH
5242: LD_INT 2
5244: ARRAY
5245: ADD
5246: ST_TO_ADDR
// for i = 1 to 2 do
5247: LD_ADDR_VAR 0 1
5251: PUSH
5252: DOUBLE
5253: LD_INT 1
5255: DEC
5256: ST_TO_ADDR
5257: LD_INT 2
5259: PUSH
5260: FOR_TO
5261: IFFALSE 5318
// begin ComExitBuilding ( comp_sci [ i ] ) ;
5263: LD_EXP 10
5267: PUSH
5268: LD_VAR 0 1
5272: ARRAY
5273: PPUSH
5274: CALL_OW 122
// AddComEnterUnit ( comp_sci [ i ] , comp_factory ) ;
5278: LD_EXP 10
5282: PUSH
5283: LD_VAR 0 1
5287: ARRAY
5288: PPUSH
5289: LD_EXP 25
5293: PPUSH
5294: CALL_OW 180
// AddComChangeProfession ( comp_sci [ i ] , 3 ) ;
5298: LD_EXP 10
5302: PUSH
5303: LD_VAR 0 1
5307: ARRAY
5308: PPUSH
5309: LD_INT 3
5311: PPUSH
5312: CALL_OW 183
// end ;
5316: GO 5260
5318: POP
5319: POP
// Wait ( 0 0$10 ) ;
5320: LD_INT 350
5322: PPUSH
5323: CALL_OW 67
// comp_mechs = FilterAllUnits ( [ [ [ f_side , comp_side ] , [ f_class , 3 ] , [ f_inside ] ] ] ) ;
5327: LD_ADDR_EXP 9
5331: PUSH
5332: LD_INT 22
5334: PUSH
5335: LD_EXP 1
5339: PUSH
5340: EMPTY
5341: LIST
5342: LIST
5343: PUSH
5344: LD_INT 25
5346: PUSH
5347: LD_INT 3
5349: PUSH
5350: EMPTY
5351: LIST
5352: LIST
5353: PUSH
5354: LD_INT 54
5356: PUSH
5357: EMPTY
5358: LIST
5359: PUSH
5360: EMPTY
5361: LIST
5362: LIST
5363: LIST
5364: PUSH
5365: EMPTY
5366: LIST
5367: PPUSH
5368: CALL_OW 69
5372: ST_TO_ADDR
// comp_sci = FilterAllUnits ( [ [ [ f_side , comp_side ] , [ f_class , 4 ] , [ f_inside ] ] ] ) ;
5373: LD_ADDR_EXP 10
5377: PUSH
5378: LD_INT 22
5380: PUSH
5381: LD_EXP 1
5385: PUSH
5386: EMPTY
5387: LIST
5388: LIST
5389: PUSH
5390: LD_INT 25
5392: PUSH
5393: LD_INT 4
5395: PUSH
5396: EMPTY
5397: LIST
5398: LIST
5399: PUSH
5400: LD_INT 54
5402: PUSH
5403: EMPTY
5404: LIST
5405: PUSH
5406: EMPTY
5407: LIST
5408: LIST
5409: LIST
5410: PUSH
5411: EMPTY
5412: LIST
5413: PPUSH
5414: CALL_OW 69
5418: ST_TO_ADDR
// AddComEnterUnit ( comp_rdriver [ 1 ] , comp_ct ) ;
5419: LD_EXP 11
5423: PUSH
5424: LD_INT 1
5426: ARRAY
5427: PPUSH
5428: LD_EXP 31
5432: PPUSH
5433: CALL_OW 180
// AddComEnterUnit ( comp_rdriver [ 2 ] , comp_ct ) ;
5437: LD_EXP 11
5441: PUSH
5442: LD_INT 2
5444: ARRAY
5445: PPUSH
5446: LD_EXP 31
5450: PPUSH
5451: CALL_OW 180
// ProductionRADAR = true ;
5455: LD_ADDR_EXP 65
5459: PUSH
5460: LD_INT 1
5462: ST_TO_ADDR
// end ;
5463: PPOPN 1
5465: END
// export lvl ; every 0 0$10 trigger ProductionRADAR = true do var i , us_weap , ar_weap ;
5466: LD_EXP 65
5470: PUSH
5471: LD_INT 1
5473: EQUAL
5474: IFFALSE 5640
5476: GO 5478
5478: DISABLE
5479: LD_INT 0
5481: PPUSH
5482: PPUSH
5483: PPUSH
// begin us_weap = [ us_gatling_gun , us_double_gun , us_rocket_launcher ] [ diff_attack ] ;
5484: LD_ADDR_VAR 0 2
5488: PUSH
5489: LD_INT 4
5491: PUSH
5492: LD_INT 5
5494: PUSH
5495: LD_INT 7
5497: PUSH
5498: EMPTY
5499: LIST
5500: LIST
5501: LIST
5502: PUSH
5503: LD_EXP 18
5507: ARRAY
5508: ST_TO_ADDR
// ar_weap = [ ar_gatling_gun , ar_light_gun , ar_gun ] [ diff_attack ] ;
5509: LD_ADDR_VAR 0 3
5513: PUSH
5514: LD_INT 25
5516: PUSH
5517: LD_INT 23
5519: PUSH
5520: LD_INT 27
5522: PUSH
5523: EMPTY
5524: LIST
5525: LIST
5526: LIST
5527: PUSH
5528: LD_EXP 18
5532: ARRAY
5533: ST_TO_ADDR
// lvl = 0 ;
5534: LD_ADDR_EXP 73
5538: PUSH
5539: LD_INT 0
5541: ST_TO_ADDR
// for i = 1 to limiter do
5542: LD_ADDR_VAR 0 1
5546: PUSH
5547: DOUBLE
5548: LD_INT 1
5550: DEC
5551: ST_TO_ADDR
5552: LD_EXP 33
5556: PUSH
5557: FOR_TO
5558: IFFALSE 5638
// begin if GetNation ( comp_factory ) = 1 then
5560: LD_EXP 25
5564: PPUSH
5565: CALL_OW 248
5569: PUSH
5570: LD_INT 1
5572: EQUAL
5573: IFFALSE 5598
// begin AddComConstruct ( comp_factory , us_medium_tracked , engine_combustion , control_remote , us_weap ) ;
5575: LD_EXP 25
5579: PPUSH
5580: LD_INT 3
5582: PPUSH
5583: LD_INT 1
5585: PPUSH
5586: LD_INT 2
5588: PPUSH
5589: LD_VAR 0 2
5593: PPUSH
5594: CALL_OW 185
// end ; if GetNation ( comp_factory ) = 2 then
5598: LD_EXP 25
5602: PPUSH
5603: CALL_OW 248
5607: PUSH
5608: LD_INT 2
5610: EQUAL
5611: IFFALSE 5636
// begin AddComConstruct ( comp_factory , ar_half_tracked , engine_combustion , control_remote , ar_weap ) ;
5613: LD_EXP 25
5617: PPUSH
5618: LD_INT 14
5620: PPUSH
5621: LD_INT 1
5623: PPUSH
5624: LD_INT 2
5626: PPUSH
5627: LD_VAR 0 3
5631: PPUSH
5632: CALL_OW 185
// end ; end ;
5636: GO 5557
5638: POP
5639: POP
// end ;
5640: PPOPN 3
5642: END
// every 1 1$25 trigger Comp_Arm and comp_towers > 1 do var i , un ;
5643: LD_EXP 28
5647: PUSH
5648: LD_EXP 29
5652: PUSH
5653: LD_INT 1
5655: GREATER
5656: AND
5657: IFFALSE 5752
5659: GO 5661
5661: DISABLE
5662: LD_INT 0
5664: PPUSH
5665: PPUSH
// begin enable ;
5666: ENABLE
// for un in FilterAllUnits ( [ [ [ f_side , comp_side ] , [ f_or , [ f_class , 1 ] , [ f_class , class_sniper ] ] , [ f_outside ] ] ] ) do
5667: LD_ADDR_VAR 0 2
5671: PUSH
5672: LD_INT 22
5674: PUSH
5675: LD_EXP 1
5679: PUSH
5680: EMPTY
5681: LIST
5682: LIST
5683: PUSH
5684: LD_INT 2
5686: PUSH
5687: LD_INT 25
5689: PUSH
5690: LD_INT 1
5692: PUSH
5693: EMPTY
5694: LIST
5695: LIST
5696: PUSH
5697: LD_INT 25
5699: PUSH
5700: LD_INT 5
5702: PUSH
5703: EMPTY
5704: LIST
5705: LIST
5706: PUSH
5707: EMPTY
5708: LIST
5709: LIST
5710: LIST
5711: PUSH
5712: LD_INT 56
5714: PUSH
5715: EMPTY
5716: LIST
5717: PUSH
5718: EMPTY
5719: LIST
5720: LIST
5721: LIST
5722: PUSH
5723: EMPTY
5724: LIST
5725: PPUSH
5726: CALL_OW 69
5730: PUSH
5731: FOR_IN
5732: IFFALSE 5750
// begin ComEnterUnit ( un , comp_arm ) ;
5734: LD_VAR 0 2
5738: PPUSH
5739: LD_EXP 28
5743: PPUSH
5744: CALL_OW 120
// end ;
5748: GO 5731
5750: POP
5751: POP
// end ; end_of_file
5752: PPOPN 2
5754: END
// export player_nation , player_side , player_cont ; export Tester ; export function PreparePlayer ; var i , un ; begin
5755: LD_INT 0
5757: PPUSH
5758: PPUSH
5759: PPUSH
// uc_side = player_side ;
5760: LD_ADDR_OWVAR 20
5764: PUSH
5765: LD_EXP 75
5769: ST_TO_ADDR
// uc_nation = player_nation ;
5770: LD_ADDR_OWVAR 21
5774: PUSH
5775: LD_EXP 74
5779: ST_TO_ADDR
// hc_sex := Rand ( sex_male , sex_female ) ;
5780: LD_ADDR_OWVAR 27
5784: PUSH
5785: LD_INT 1
5787: PPUSH
5788: LD_INT 2
5790: PPUSH
5791: CALL_OW 12
5795: ST_TO_ADDR
// hc_importance = 100 ;
5796: LD_ADDR_OWVAR 32
5800: PUSH
5801: LD_INT 100
5803: ST_TO_ADDR
// hc_gallery :=  ;
5804: LD_ADDR_OWVAR 33
5808: PUSH
5809: LD_STRING 
5811: ST_TO_ADDR
// hc_skills = [ comp_skill1 + Rand ( 0 , 1 ) , comp_skill2 + Rand ( - 3 , 0 ) , comp_skill3 + Rand ( - 3 , 0 ) , comp_skill4 + Rand ( - 3 , 0 ) ] ;
5812: LD_ADDR_OWVAR 31
5816: PUSH
5817: LD_EXP 12
5821: PUSH
5822: LD_INT 0
5824: PPUSH
5825: LD_INT 1
5827: PPUSH
5828: CALL_OW 12
5832: PLUS
5833: PUSH
5834: LD_EXP 13
5838: PUSH
5839: LD_INT 3
5841: NEG
5842: PPUSH
5843: LD_INT 0
5845: PPUSH
5846: CALL_OW 12
5850: PLUS
5851: PUSH
5852: LD_EXP 14
5856: PUSH
5857: LD_INT 3
5859: NEG
5860: PPUSH
5861: LD_INT 0
5863: PPUSH
5864: CALL_OW 12
5868: PLUS
5869: PUSH
5870: LD_EXP 15
5874: PUSH
5875: LD_INT 3
5877: NEG
5878: PPUSH
5879: LD_INT 0
5881: PPUSH
5882: CALL_OW 12
5886: PLUS
5887: PUSH
5888: EMPTY
5889: LIST
5890: LIST
5891: LIST
5892: LIST
5893: ST_TO_ADDR
// hc_attr = [ Rand ( 8 , 12 ) , Rand ( 9 , 11 ) ] ;
5894: LD_ADDR_OWVAR 29
5898: PUSH
5899: LD_INT 8
5901: PPUSH
5902: LD_INT 12
5904: PPUSH
5905: CALL_OW 12
5909: PUSH
5910: LD_INT 9
5912: PPUSH
5913: LD_INT 11
5915: PPUSH
5916: CALL_OW 12
5920: PUSH
5921: EMPTY
5922: LIST
5923: LIST
5924: ST_TO_ADDR
// hc_name :=  ;
5925: LD_ADDR_OWVAR 26
5929: PUSH
5930: LD_STRING 
5932: ST_TO_ADDR
// hc_class = 1 ;
5933: LD_ADDR_OWVAR 28
5937: PUSH
5938: LD_INT 1
5940: ST_TO_ADDR
// un = CreateHuman ;
5941: LD_ADDR_VAR 0 3
5945: PUSH
5946: CALL_OW 44
5950: ST_TO_ADDR
// PlaceUnitArea ( un , PlayerResp , false ) ;
5951: LD_VAR 0 3
5955: PPUSH
5956: LD_INT 5
5958: PPUSH
5959: LD_INT 0
5961: PPUSH
5962: CALL_OW 49
// hc_importance = 0 ;
5966: LD_ADDR_OWVAR 32
5970: PUSH
5971: LD_INT 0
5973: ST_TO_ADDR
// for i = 1 to ( player_cont - 1 ) do
5974: LD_ADDR_VAR 0 2
5978: PUSH
5979: DOUBLE
5980: LD_INT 1
5982: DEC
5983: ST_TO_ADDR
5984: LD_EXP 76
5988: PUSH
5989: LD_INT 1
5991: MINUS
5992: PUSH
5993: FOR_TO
5994: IFFALSE 6176
// begin hc_sex = Rand ( sex_male , sex_female ) ;
5996: LD_ADDR_OWVAR 27
6000: PUSH
6001: LD_INT 1
6003: PPUSH
6004: LD_INT 2
6006: PPUSH
6007: CALL_OW 12
6011: ST_TO_ADDR
// hc_gallery =  ;
6012: LD_ADDR_OWVAR 33
6016: PUSH
6017: LD_STRING 
6019: ST_TO_ADDR
// hc_skills = [ comp_skill1 + Rand ( 0 , 1 ) , comp_skill2 + Rand ( - 3 , 0 ) , comp_skill3 + Rand ( - 3 , 0 ) , comp_skill4 + Rand ( - 3 , 0 ) ] ;
6020: LD_ADDR_OWVAR 31
6024: PUSH
6025: LD_EXP 12
6029: PUSH
6030: LD_INT 0
6032: PPUSH
6033: LD_INT 1
6035: PPUSH
6036: CALL_OW 12
6040: PLUS
6041: PUSH
6042: LD_EXP 13
6046: PUSH
6047: LD_INT 3
6049: NEG
6050: PPUSH
6051: LD_INT 0
6053: PPUSH
6054: CALL_OW 12
6058: PLUS
6059: PUSH
6060: LD_EXP 14
6064: PUSH
6065: LD_INT 3
6067: NEG
6068: PPUSH
6069: LD_INT 0
6071: PPUSH
6072: CALL_OW 12
6076: PLUS
6077: PUSH
6078: LD_EXP 15
6082: PUSH
6083: LD_INT 3
6085: NEG
6086: PPUSH
6087: LD_INT 0
6089: PPUSH
6090: CALL_OW 12
6094: PLUS
6095: PUSH
6096: EMPTY
6097: LIST
6098: LIST
6099: LIST
6100: LIST
6101: ST_TO_ADDR
// hc_attr = [ Rand ( 8 , 12 ) , Rand ( 9 , 11 ) ] ;
6102: LD_ADDR_OWVAR 29
6106: PUSH
6107: LD_INT 8
6109: PPUSH
6110: LD_INT 12
6112: PPUSH
6113: CALL_OW 12
6117: PUSH
6118: LD_INT 9
6120: PPUSH
6121: LD_INT 11
6123: PPUSH
6124: CALL_OW 12
6128: PUSH
6129: EMPTY
6130: LIST
6131: LIST
6132: ST_TO_ADDR
// hc_name =  ;
6133: LD_ADDR_OWVAR 26
6137: PUSH
6138: LD_STRING 
6140: ST_TO_ADDR
// hc_class = 1 ;
6141: LD_ADDR_OWVAR 28
6145: PUSH
6146: LD_INT 1
6148: ST_TO_ADDR
// un = CreateHuman ;
6149: LD_ADDR_VAR 0 3
6153: PUSH
6154: CALL_OW 44
6158: ST_TO_ADDR
// PlaceUnitArea ( un , PlayerResp , false ) ;
6159: LD_VAR 0 3
6163: PPUSH
6164: LD_INT 5
6166: PPUSH
6167: LD_INT 0
6169: PPUSH
6170: CALL_OW 49
// end ;
6174: GO 5993
6176: POP
6177: POP
// for i = 1 to player_cont do
6178: LD_ADDR_VAR 0 2
6182: PUSH
6183: DOUBLE
6184: LD_INT 1
6186: DEC
6187: ST_TO_ADDR
6188: LD_EXP 76
6192: PUSH
6193: FOR_TO
6194: IFFALSE 6376
// begin hc_sex = Rand ( sex_male , sex_female ) ;
6196: LD_ADDR_OWVAR 27
6200: PUSH
6201: LD_INT 1
6203: PPUSH
6204: LD_INT 2
6206: PPUSH
6207: CALL_OW 12
6211: ST_TO_ADDR
// hc_gallery =  ;
6212: LD_ADDR_OWVAR 33
6216: PUSH
6217: LD_STRING 
6219: ST_TO_ADDR
// hc_skills = [ comp_skill1 + Rand ( - 2 , 0 ) , comp_skill2 + Rand ( 0 , 1 ) , comp_skill3 + Rand ( - 3 , 0 ) , comp_skill4 + Rand ( - 3 , 0 ) ] ;
6220: LD_ADDR_OWVAR 31
6224: PUSH
6225: LD_EXP 12
6229: PUSH
6230: LD_INT 2
6232: NEG
6233: PPUSH
6234: LD_INT 0
6236: PPUSH
6237: CALL_OW 12
6241: PLUS
6242: PUSH
6243: LD_EXP 13
6247: PUSH
6248: LD_INT 0
6250: PPUSH
6251: LD_INT 1
6253: PPUSH
6254: CALL_OW 12
6258: PLUS
6259: PUSH
6260: LD_EXP 14
6264: PUSH
6265: LD_INT 3
6267: NEG
6268: PPUSH
6269: LD_INT 0
6271: PPUSH
6272: CALL_OW 12
6276: PLUS
6277: PUSH
6278: LD_EXP 15
6282: PUSH
6283: LD_INT 3
6285: NEG
6286: PPUSH
6287: LD_INT 0
6289: PPUSH
6290: CALL_OW 12
6294: PLUS
6295: PUSH
6296: EMPTY
6297: LIST
6298: LIST
6299: LIST
6300: LIST
6301: ST_TO_ADDR
// hc_attr = [ Rand ( 8 , 12 ) , Rand ( 9 , 11 ) ] ;
6302: LD_ADDR_OWVAR 29
6306: PUSH
6307: LD_INT 8
6309: PPUSH
6310: LD_INT 12
6312: PPUSH
6313: CALL_OW 12
6317: PUSH
6318: LD_INT 9
6320: PPUSH
6321: LD_INT 11
6323: PPUSH
6324: CALL_OW 12
6328: PUSH
6329: EMPTY
6330: LIST
6331: LIST
6332: ST_TO_ADDR
// hc_name =  ;
6333: LD_ADDR_OWVAR 26
6337: PUSH
6338: LD_STRING 
6340: ST_TO_ADDR
// hc_class = 2 ;
6341: LD_ADDR_OWVAR 28
6345: PUSH
6346: LD_INT 2
6348: ST_TO_ADDR
// un = CreateHuman ;
6349: LD_ADDR_VAR 0 3
6353: PUSH
6354: CALL_OW 44
6358: ST_TO_ADDR
// PlaceUnitArea ( un , PlayerResp , false ) ;
6359: LD_VAR 0 3
6363: PPUSH
6364: LD_INT 5
6366: PPUSH
6367: LD_INT 0
6369: PPUSH
6370: CALL_OW 49
// end ;
6374: GO 6193
6376: POP
6377: POP
// for i = 1 to player_cont do
6378: LD_ADDR_VAR 0 2
6382: PUSH
6383: DOUBLE
6384: LD_INT 1
6386: DEC
6387: ST_TO_ADDR
6388: LD_EXP 76
6392: PUSH
6393: FOR_TO
6394: IFFALSE 6576
// begin hc_sex = Rand ( sex_male , sex_female ) ;
6396: LD_ADDR_OWVAR 27
6400: PUSH
6401: LD_INT 1
6403: PPUSH
6404: LD_INT 2
6406: PPUSH
6407: CALL_OW 12
6411: ST_TO_ADDR
// hc_gallery =  ;
6412: LD_ADDR_OWVAR 33
6416: PUSH
6417: LD_STRING 
6419: ST_TO_ADDR
// hc_skills = [ comp_skill1 + Rand ( - 3 , 1 ) , comp_skill2 + Rand ( - 3 , 0 ) , comp_skill3 + Rand ( 0 , 1 ) , comp_skill4 + Rand ( - 3 , 0 ) ] ;
6420: LD_ADDR_OWVAR 31
6424: PUSH
6425: LD_EXP 12
6429: PUSH
6430: LD_INT 3
6432: NEG
6433: PPUSH
6434: LD_INT 1
6436: PPUSH
6437: CALL_OW 12
6441: PLUS
6442: PUSH
6443: LD_EXP 13
6447: PUSH
6448: LD_INT 3
6450: NEG
6451: PPUSH
6452: LD_INT 0
6454: PPUSH
6455: CALL_OW 12
6459: PLUS
6460: PUSH
6461: LD_EXP 14
6465: PUSH
6466: LD_INT 0
6468: PPUSH
6469: LD_INT 1
6471: PPUSH
6472: CALL_OW 12
6476: PLUS
6477: PUSH
6478: LD_EXP 15
6482: PUSH
6483: LD_INT 3
6485: NEG
6486: PPUSH
6487: LD_INT 0
6489: PPUSH
6490: CALL_OW 12
6494: PLUS
6495: PUSH
6496: EMPTY
6497: LIST
6498: LIST
6499: LIST
6500: LIST
6501: ST_TO_ADDR
// hc_attr = [ Rand ( 8 , 12 ) , Rand ( 9 , 11 ) ] ;
6502: LD_ADDR_OWVAR 29
6506: PUSH
6507: LD_INT 8
6509: PPUSH
6510: LD_INT 12
6512: PPUSH
6513: CALL_OW 12
6517: PUSH
6518: LD_INT 9
6520: PPUSH
6521: LD_INT 11
6523: PPUSH
6524: CALL_OW 12
6528: PUSH
6529: EMPTY
6530: LIST
6531: LIST
6532: ST_TO_ADDR
// hc_name =  ;
6533: LD_ADDR_OWVAR 26
6537: PUSH
6538: LD_STRING 
6540: ST_TO_ADDR
// hc_class = 3 ;
6541: LD_ADDR_OWVAR 28
6545: PUSH
6546: LD_INT 3
6548: ST_TO_ADDR
// un = CreateHuman ;
6549: LD_ADDR_VAR 0 3
6553: PUSH
6554: CALL_OW 44
6558: ST_TO_ADDR
// PlaceUnitArea ( un , PlayerResp , false ) ;
6559: LD_VAR 0 3
6563: PPUSH
6564: LD_INT 5
6566: PPUSH
6567: LD_INT 0
6569: PPUSH
6570: CALL_OW 49
// end ;
6574: GO 6393
6576: POP
6577: POP
// for i = 1 to player_cont do
6578: LD_ADDR_VAR 0 2
6582: PUSH
6583: DOUBLE
6584: LD_INT 1
6586: DEC
6587: ST_TO_ADDR
6588: LD_EXP 76
6592: PUSH
6593: FOR_TO
6594: IFFALSE 6776
// begin hc_sex = Rand ( sex_male , sex_female ) ;
6596: LD_ADDR_OWVAR 27
6600: PUSH
6601: LD_INT 1
6603: PPUSH
6604: LD_INT 2
6606: PPUSH
6607: CALL_OW 12
6611: ST_TO_ADDR
// hc_gallery =  ;
6612: LD_ADDR_OWVAR 33
6616: PUSH
6617: LD_STRING 
6619: ST_TO_ADDR
// hc_skills = [ comp_skill1 + Rand ( - 3 , 1 ) , comp_skill2 + Rand ( - 3 , 0 ) , comp_skill3 + Rand ( - 3 , 0 ) , comp_skill4 + Rand ( 0 , 1 ) ] ;
6620: LD_ADDR_OWVAR 31
6624: PUSH
6625: LD_EXP 12
6629: PUSH
6630: LD_INT 3
6632: NEG
6633: PPUSH
6634: LD_INT 1
6636: PPUSH
6637: CALL_OW 12
6641: PLUS
6642: PUSH
6643: LD_EXP 13
6647: PUSH
6648: LD_INT 3
6650: NEG
6651: PPUSH
6652: LD_INT 0
6654: PPUSH
6655: CALL_OW 12
6659: PLUS
6660: PUSH
6661: LD_EXP 14
6665: PUSH
6666: LD_INT 3
6668: NEG
6669: PPUSH
6670: LD_INT 0
6672: PPUSH
6673: CALL_OW 12
6677: PLUS
6678: PUSH
6679: LD_EXP 15
6683: PUSH
6684: LD_INT 0
6686: PPUSH
6687: LD_INT 1
6689: PPUSH
6690: CALL_OW 12
6694: PLUS
6695: PUSH
6696: EMPTY
6697: LIST
6698: LIST
6699: LIST
6700: LIST
6701: ST_TO_ADDR
// hc_attr = [ Rand ( 8 , 12 ) , Rand ( 9 , 11 ) ] ;
6702: LD_ADDR_OWVAR 29
6706: PUSH
6707: LD_INT 8
6709: PPUSH
6710: LD_INT 12
6712: PPUSH
6713: CALL_OW 12
6717: PUSH
6718: LD_INT 9
6720: PPUSH
6721: LD_INT 11
6723: PPUSH
6724: CALL_OW 12
6728: PUSH
6729: EMPTY
6730: LIST
6731: LIST
6732: ST_TO_ADDR
// hc_name =  ;
6733: LD_ADDR_OWVAR 26
6737: PUSH
6738: LD_STRING 
6740: ST_TO_ADDR
// hc_class = 4 ;
6741: LD_ADDR_OWVAR 28
6745: PUSH
6746: LD_INT 4
6748: ST_TO_ADDR
// un = CreateHuman ;
6749: LD_ADDR_VAR 0 3
6753: PUSH
6754: CALL_OW 44
6758: ST_TO_ADDR
// PlaceUnitArea ( un , PlayerResp , false ) ;
6759: LD_VAR 0 3
6763: PPUSH
6764: LD_INT 5
6766: PPUSH
6767: LD_INT 0
6769: PPUSH
6770: CALL_OW 49
// end ;
6774: GO 6593
6776: POP
6777: POP
// end ; end_of_file
6778: LD_VAR 0 1
6782: RET
// export Cr1 , Cr2 ; every 2 2$10 trigger Cr1 = true do
6783: LD_EXP 78
6787: PUSH
6788: LD_INT 1
6790: EQUAL
6791: IFFALSE 6854
6793: GO 6795
6795: DISABLE
// begin CreateCratesArea ( Rand ( 1 , 5 ) , CratesResp , true ) ;
6796: LD_INT 1
6798: PPUSH
6799: LD_INT 5
6801: PPUSH
6802: CALL_OW 12
6806: PPUSH
6807: LD_INT 4
6809: PPUSH
6810: LD_INT 1
6812: PPUSH
6813: CALL_OW 55
// Wait ( Rand ( 0 0$25 , 0 0$40 ) ) ;
6817: LD_INT 875
6819: PPUSH
6820: LD_INT 1400
6822: PPUSH
6823: CALL_OW 12
6827: PPUSH
6828: CALL_OW 67
// CreateCratesArea ( Rand ( 1 , 3 ) , CratesResp , true ) ;
6832: LD_INT 1
6834: PPUSH
6835: LD_INT 3
6837: PPUSH
6838: CALL_OW 12
6842: PPUSH
6843: LD_INT 4
6845: PPUSH
6846: LD_INT 1
6848: PPUSH
6849: CALL_OW 55
// enable ;
6853: ENABLE
// end ;
6854: END
// every 1 1$40 trigger Cr2 = true do
6855: LD_EXP 79
6859: PUSH
6860: LD_INT 1
6862: EQUAL
6863: IFFALSE 6962
6865: GO 6867
6867: DISABLE
// begin CreateCratesArea ( Rand ( 1 , 5 ) , CratesResp , true ) ;
6868: LD_INT 1
6870: PPUSH
6871: LD_INT 5
6873: PPUSH
6874: CALL_OW 12
6878: PPUSH
6879: LD_INT 4
6881: PPUSH
6882: LD_INT 1
6884: PPUSH
6885: CALL_OW 55
// Wait ( Rand ( 0 0$20 , 0 0$50 ) ) ;
6889: LD_INT 700
6891: PPUSH
6892: LD_INT 1750
6894: PPUSH
6895: CALL_OW 12
6899: PPUSH
6900: CALL_OW 67
// CreateCratesArea ( Rand ( 1 , 3 ) , CratesResp , true ) ;
6904: LD_INT 1
6906: PPUSH
6907: LD_INT 3
6909: PPUSH
6910: CALL_OW 12
6914: PPUSH
6915: LD_INT 4
6917: PPUSH
6918: LD_INT 1
6920: PPUSH
6921: CALL_OW 55
// Wait ( Rand ( 0 0$39 , 0 0$59 ) ) ;
6925: LD_INT 1365
6927: PPUSH
6928: LD_INT 2065
6930: PPUSH
6931: CALL_OW 12
6935: PPUSH
6936: CALL_OW 67
// CreateCratesArea ( Rand ( 1 , 3 ) , CratesResp , true ) ;
6940: LD_INT 1
6942: PPUSH
6943: LD_INT 3
6945: PPUSH
6946: CALL_OW 12
6950: PPUSH
6951: LD_INT 4
6953: PPUSH
6954: LD_INT 1
6956: PPUSH
6957: CALL_OW 55
// enable ;
6961: ENABLE
// end ;
6962: END
// every 0 0$35 marked 01 do
6963: GO 6965
6965: DISABLE
// begin enable ;
6966: ENABLE
// CreateCratesArea ( Rand ( 3 , 5 ) , PlayerCrResp , true ) ;
6967: LD_INT 3
6969: PPUSH
6970: LD_INT 5
6972: PPUSH
6973: CALL_OW 12
6977: PPUSH
6978: LD_INT 8
6980: PPUSH
6981: LD_INT 1
6983: PPUSH
6984: CALL_OW 55
// if Counter > 12 12$00 then
6988: LD_EXP 80
6992: PUSH
6993: LD_INT 25200
6995: GREATER
6996: IFFALSE 7001
// disable ( 01 ) ;
6998: LD_INT 1
7000: DISABLE_MARKED
// end ; end_of_file
7001: END
// export function PrepareApeman ( ap ) ; var apeman , l ; begin
7002: LD_INT 0
7004: PPUSH
7005: PPUSH
7006: PPUSH
// uc_nation = nation_nature ;
7007: LD_ADDR_OWVAR 21
7011: PUSH
7012: LD_INT 0
7014: ST_TO_ADDR
// uc_side = 0 ;
7015: LD_ADDR_OWVAR 20
7019: PUSH
7020: LD_INT 0
7022: ST_TO_ADDR
// l = 0 ;
7023: LD_ADDR_VAR 0 4
7027: PUSH
7028: LD_INT 0
7030: ST_TO_ADDR
// repeat begin hc_importance = 0 ;
7031: LD_ADDR_OWVAR 32
7035: PUSH
7036: LD_INT 0
7038: ST_TO_ADDR
// uc_direction = Rand ( 0 , 5 ) ;
7039: LD_ADDR_OWVAR 24
7043: PUSH
7044: LD_INT 0
7046: PPUSH
7047: LD_INT 5
7049: PPUSH
7050: CALL_OW 12
7054: ST_TO_ADDR
// hc_agressivity = Rand ( - 5 , 10 ) ;
7055: LD_ADDR_OWVAR 35
7059: PUSH
7060: LD_INT 5
7062: NEG
7063: PPUSH
7064: LD_INT 10
7066: PPUSH
7067: CALL_OW 12
7071: ST_TO_ADDR
// hc_gallery =  ;
7072: LD_ADDR_OWVAR 33
7076: PUSH
7077: LD_STRING 
7079: ST_TO_ADDR
// hc_class = class_apeman ;
7080: LD_ADDR_OWVAR 28
7084: PUSH
7085: LD_INT 12
7087: ST_TO_ADDR
// hc_attr = [ Rand ( 11 , 13 ) , Rand ( 10 , 11 ) ] ;
7088: LD_ADDR_OWVAR 29
7092: PUSH
7093: LD_INT 11
7095: PPUSH
7096: LD_INT 13
7098: PPUSH
7099: CALL_OW 12
7103: PUSH
7104: LD_INT 10
7106: PPUSH
7107: LD_INT 11
7109: PPUSH
7110: CALL_OW 12
7114: PUSH
7115: EMPTY
7116: LIST
7117: LIST
7118: ST_TO_ADDR
// hc_sex = sex_male ;
7119: LD_ADDR_OWVAR 27
7123: PUSH
7124: LD_INT 1
7126: ST_TO_ADDR
// hc_skills = [ Rand ( 0 , 2 ) , 0 , 0 , 0 ] ;
7127: LD_ADDR_OWVAR 31
7131: PUSH
7132: LD_INT 0
7134: PPUSH
7135: LD_INT 2
7137: PPUSH
7138: CALL_OW 12
7142: PUSH
7143: LD_INT 0
7145: PUSH
7146: LD_INT 0
7148: PUSH
7149: LD_INT 0
7151: PUSH
7152: EMPTY
7153: LIST
7154: LIST
7155: LIST
7156: LIST
7157: ST_TO_ADDR
// apeman = CreateHuman ;
7158: LD_ADDR_VAR 0 3
7162: PUSH
7163: CALL_OW 44
7167: ST_TO_ADDR
// PlaceUnitArea ( apeman , ApeResp , false ) ;
7168: LD_VAR 0 3
7172: PPUSH
7173: LD_INT 3
7175: PPUSH
7176: LD_INT 0
7178: PPUSH
7179: CALL_OW 49
// l = l + 1 ;
7183: LD_ADDR_VAR 0 4
7187: PUSH
7188: LD_VAR 0 4
7192: PUSH
7193: LD_INT 1
7195: PLUS
7196: ST_TO_ADDR
// end until l = ap ;
7197: LD_VAR 0 4
7201: PUSH
7202: LD_VAR 0 1
7206: EQUAL
7207: IFFALSE 7031
// end ; end_of_file
7209: LD_VAR 0 2
7213: RET
// export Counter , Score , Debug ; every 1 do
7214: GO 7216
7216: DISABLE
// begin Counter = 0 0$00 ;
7217: LD_ADDR_EXP 80
7221: PUSH
7222: LD_INT 0
7224: ST_TO_ADDR
// Score = 0 ;
7225: LD_ADDR_EXP 81
7229: PUSH
7230: LD_INT 0
7232: ST_TO_ADDR
// Debug = false ;
7233: LD_ADDR_EXP 82
7237: PUSH
7238: LD_INT 0
7240: ST_TO_ADDR
// end ;
7241: END
// every 0 0$01 do
7242: GO 7244
7244: DISABLE
// begin enable ;
7245: ENABLE
// Counter = Counter + 0 0$01 ;
7246: LD_ADDR_EXP 80
7250: PUSH
7251: LD_EXP 80
7255: PUSH
7256: LD_INT 35
7258: PLUS
7259: ST_TO_ADDR
// if Debug = false then
7260: LD_EXP 82
7264: PUSH
7265: LD_INT 0
7267: EQUAL
7268: IFFALSE 7297
// begin display_strings := [ #Am01-1 , counter , #Am01-2 , score ] ;
7270: LD_ADDR_OWVAR 47
7274: PUSH
7275: LD_STRING #Am01-1
7277: PUSH
7278: LD_EXP 80
7282: PUSH
7283: LD_STRING #Am01-2
7285: PUSH
7286: LD_EXP 81
7290: PUSH
7291: EMPTY
7292: LIST
7293: LIST
7294: LIST
7295: LIST
7296: ST_TO_ADDR
// end ; if Debug = true then
7297: LD_EXP 82
7301: PUSH
7302: LD_INT 1
7304: EQUAL
7305: IFFALSE 7338
// begin display_strings := [ #Am01-3 , #Am01-1 , counter , #Am01-2 , score ] ;
7307: LD_ADDR_OWVAR 47
7311: PUSH
7312: LD_STRING #Am01-3
7314: PUSH
7315: LD_STRING #Am01-1
7317: PUSH
7318: LD_EXP 80
7322: PUSH
7323: LD_STRING #Am01-2
7325: PUSH
7326: LD_EXP 81
7330: PUSH
7331: EMPTY
7332: LIST
7333: LIST
7334: LIST
7335: LIST
7336: LIST
7337: ST_TO_ADDR
// end ; end ;
7338: END
// export function BuildDepot ( eng , x , y , z ) ; begin
7339: LD_INT 0
7341: PPUSH
// if HexInfo ( x , y ) = 0 then
7342: LD_VAR 0 2
7346: PPUSH
7347: LD_VAR 0 3
7351: PPUSH
7352: CALL_OW 428
7356: PUSH
7357: LD_INT 0
7359: EQUAL
7360: IFFALSE 7391
// begin ComBuild ( eng , b_depot , x , y , z ) ;
7362: LD_VAR 0 1
7366: PPUSH
7367: LD_INT 0
7369: PPUSH
7370: LD_VAR 0 2
7374: PPUSH
7375: LD_VAR 0 3
7379: PPUSH
7380: LD_VAR 0 4
7384: PPUSH
7385: CALL_OW 145
// end else
7389: GO 7444
// begin ComBuild ( eng , b_depot , x + Rand ( - 5 , 5 ) , y + Rand ( - 5 , 5 ) , z ) ;
7391: LD_VAR 0 1
7395: PPUSH
7396: LD_INT 0
7398: PPUSH
7399: LD_VAR 0 2
7403: PUSH
7404: LD_INT 5
7406: NEG
7407: PPUSH
7408: LD_INT 5
7410: PPUSH
7411: CALL_OW 12
7415: PLUS
7416: PPUSH
7417: LD_VAR 0 3
7421: PUSH
7422: LD_INT 5
7424: NEG
7425: PPUSH
7426: LD_INT 5
7428: PPUSH
7429: CALL_OW 12
7433: PLUS
7434: PPUSH
7435: LD_VAR 0 4
7439: PPUSH
7440: CALL_OW 145
// end ; end ;
7444: LD_VAR 0 5
7448: RET
// every 0 0$10 trigger AlertOff = true and Comp_Cargo do var skr , c ;
7449: LD_EXP 69
7453: PUSH
7454: LD_INT 1
7456: EQUAL
7457: PUSH
7458: LD_EXP 30
7462: AND
7463: IFFALSE 7601
7465: GO 7467
7467: DISABLE
7468: LD_INT 0
7470: PPUSH
7471: PPUSH
// begin enable ;
7472: ENABLE
// skr = GetListOfCratesInArea ( CompCrates ) ;
7473: LD_ADDR_VAR 0 1
7477: PUSH
7478: LD_INT 6
7480: PPUSH
7481: CALL_OW 435
7485: ST_TO_ADDR
// c = 1 ;
7486: LD_ADDR_VAR 0 2
7490: PUSH
7491: LD_INT 1
7493: ST_TO_ADDR
// while c < skr do
7494: LD_VAR 0 2
7498: PUSH
7499: LD_VAR 0 1
7503: LESS
7504: IFFALSE 7557
// begin AddComCollect ( comp_cargo , skr [ c ] , skr [ c + 1 ] ) ;
7506: LD_EXP 30
7510: PPUSH
7511: LD_VAR 0 1
7515: PUSH
7516: LD_VAR 0 2
7520: ARRAY
7521: PPUSH
7522: LD_VAR 0 1
7526: PUSH
7527: LD_VAR 0 2
7531: PUSH
7532: LD_INT 1
7534: PLUS
7535: ARRAY
7536: PPUSH
7537: CALL_OW 177
// c = c + 2 ;
7541: LD_ADDR_VAR 0 2
7545: PUSH
7546: LD_VAR 0 2
7550: PUSH
7551: LD_INT 2
7553: PLUS
7554: ST_TO_ADDR
// end ;
7555: GO 7494
// if GetFuel ( comp_cargo ) < 100 then
7557: LD_EXP 30
7561: PPUSH
7562: CALL_OW 261
7566: PUSH
7567: LD_INT 100
7569: LESS
7570: IFFALSE 7601
// begin if not See ( player_side , comp_cargo ) then
7572: LD_EXP 75
7576: PPUSH
7577: LD_EXP 30
7581: PPUSH
7582: CALL_OW 292
7586: NOT
7587: IFFALSE 7601
// SetFuel ( comp_cargo , 1000 ) ;
7589: LD_EXP 30
7593: PPUSH
7594: LD_INT 1000
7596: PPUSH
7597: CALL_OW 240
// end ; end ;
7601: PPOPN 2
7603: END
// every 0 0$01 trigger ProductionRADAR = true do var v , filter ;
7604: LD_EXP 65
7608: PUSH
7609: LD_INT 1
7611: EQUAL
7612: IFFALSE 7763
7614: GO 7616
7616: DISABLE
7617: LD_INT 0
7619: PPUSH
7620: PPUSH
// begin enable ;
7621: ENABLE
// filter = FilterAllUnits ( [ [ [ f_side , comp_side ] , [ f_control , control_remote ] , [ f_ok ] ] ] ) ;
7622: LD_ADDR_VAR 0 2
7626: PUSH
7627: LD_INT 22
7629: PUSH
7630: LD_EXP 1
7634: PUSH
7635: EMPTY
7636: LIST
7637: LIST
7638: PUSH
7639: LD_INT 33
7641: PUSH
7642: LD_INT 2
7644: PUSH
7645: EMPTY
7646: LIST
7647: LIST
7648: PUSH
7649: LD_INT 50
7651: PUSH
7652: EMPTY
7653: LIST
7654: PUSH
7655: EMPTY
7656: LIST
7657: LIST
7658: LIST
7659: PUSH
7660: EMPTY
7661: LIST
7662: PPUSH
7663: CALL_OW 69
7667: ST_TO_ADDR
// for v in filter do
7668: LD_ADDR_VAR 0 1
7672: PUSH
7673: LD_VAR 0 2
7677: PUSH
7678: FOR_IN
7679: IFFALSE 7761
// begin if not IsControledBy ( v ) and IsOk ( v ) then
7681: LD_VAR 0 1
7685: PPUSH
7686: CALL_OW 312
7690: NOT
7691: PUSH
7692: LD_VAR 0 1
7696: PPUSH
7697: CALL_OW 302
7701: AND
7702: IFFALSE 7722
// ComLinkTo ( v , comp_rdriver [ 1 ] ) ;
7704: LD_VAR 0 1
7708: PPUSH
7709: LD_EXP 11
7713: PUSH
7714: LD_INT 1
7716: ARRAY
7717: PPUSH
7718: CALL_OW 135
// if UnitsLinked ( comp_rdriver [ 1 ] ) > 2 then
7722: LD_EXP 11
7726: PUSH
7727: LD_INT 1
7729: ARRAY
7730: PPUSH
7731: CALL_OW 432
7735: PUSH
7736: LD_INT 2
7738: GREATER
7739: IFFALSE 7759
// ComLinkTo ( v , comp_rdriver [ 2 ] ) ;
7741: LD_VAR 0 1
7745: PPUSH
7746: LD_EXP 11
7750: PUSH
7751: LD_INT 2
7753: ARRAY
7754: PPUSH
7755: CALL_OW 135
// end ;
7759: GO 7678
7761: POP
7762: POP
// end ;
7763: PPOPN 2
7765: END
// every 0 0$01 do var un ;
7766: GO 7768
7768: DISABLE
7769: LD_INT 0
7771: PPUSH
// begin enable ;
7772: ENABLE
// for un in FilterAllUnits ( [ f_side , player_side ] ) do
7773: LD_ADDR_VAR 0 1
7777: PUSH
7778: LD_INT 22
7780: PUSH
7781: LD_EXP 75
7785: PUSH
7786: EMPTY
7787: LIST
7788: LIST
7789: PPUSH
7790: CALL_OW 69
7794: PUSH
7795: FOR_IN
7796: IFFALSE 7831
// begin if IsInArea ( un , Area1 ) then
7798: LD_VAR 0 1
7802: PPUSH
7803: LD_INT 9
7805: PPUSH
7806: CALL_OW 308
7810: IFFALSE 7829
// begin Debug = true ;
7812: LD_ADDR_EXP 82
7816: PUSH
7817: LD_INT 1
7819: ST_TO_ADDR
// FogOff ( player_side ) ;
7820: LD_EXP 75
7824: PPUSH
7825: CALL_OW 344
// end ; end ;
7829: GO 7795
7831: POP
7832: POP
// end ; end_of_file
7833: PPOPN 1
7835: END
// on BuildingComplete ( build ) do var i ;
7836: LD_INT 0
7838: PPUSH
// begin if GetSide ( build ) = player_side then
7839: LD_VAR 0 1
7843: PPUSH
7844: CALL_OW 255
7848: PUSH
7849: LD_EXP 75
7853: EQUAL
7854: IFFALSE 7932
// begin if GetBType ( build ) = b_depot then
7856: LD_VAR 0 1
7860: PPUSH
7861: CALL_OW 266
7865: PUSH
7866: LD_INT 0
7868: EQUAL
7869: IFFALSE 7932
// begin CreateCratesArea ( 5 , PlayerResp , true ) ;
7871: LD_INT 5
7873: PPUSH
7874: LD_INT 5
7876: PPUSH
7877: LD_INT 1
7879: PPUSH
7880: CALL_OW 55
// Wait ( 0 0$06 ) ;
7884: LD_INT 210
7886: PPUSH
7887: CALL_OW 67
// CreateCratesArea ( Rand ( 2 , 4 ) , PlayerResp , true ) ;
7891: LD_INT 2
7893: PPUSH
7894: LD_INT 4
7896: PPUSH
7897: CALL_OW 12
7901: PPUSH
7902: LD_INT 5
7904: PPUSH
7905: LD_INT 1
7907: PPUSH
7908: CALL_OW 55
// Wait ( 0 0$10 ) ;
7912: LD_INT 350
7914: PPUSH
7915: CALL_OW 67
// CreateCratesArea ( 5 , PlayerResp , true ) ;
7919: LD_INT 5
7921: PPUSH
7922: LD_INT 5
7924: PPUSH
7925: LD_INT 1
7927: PPUSH
7928: CALL_OW 55
// end ; end ; if GetSide ( build ) = comp_side then
7932: LD_VAR 0 1
7936: PPUSH
7937: CALL_OW 255
7941: PUSH
7942: LD_EXP 1
7946: EQUAL
7947: IFFALSE 8456
// begin if GetBType ( build ) = b_turret then
7949: LD_VAR 0 1
7953: PPUSH
7954: CALL_OW 266
7958: PUSH
7959: LD_INT 33
7961: EQUAL
7962: IFFALSE 8009
// begin if not Researched ( comp_side , tech_rocket ) = true then
7964: LD_EXP 1
7968: PPUSH
7969: LD_INT 40
7971: PPUSH
7972: CALL_OW 325
7976: PUSH
7977: LD_INT 1
7979: EQUAL
7980: NOT
7981: IFFALSE 7997
// AddComPlaceWeapon ( build , us_heavy_gun ) else
7983: LD_VAR 0 1
7987: PPUSH
7988: LD_INT 6
7990: PPUSH
7991: CALL_OW 208
7995: GO 8009
// AddComPlaceWeapon ( build , us_rocket_launcher ) ;
7997: LD_VAR 0 1
8001: PPUSH
8002: LD_INT 7
8004: PPUSH
8005: CALL_OW 208
// end ; if GetBType ( build ) = b_depot then
8009: LD_VAR 0 1
8013: PPUSH
8014: CALL_OW 266
8018: PUSH
8019: LD_INT 0
8021: EQUAL
8022: IFFALSE 8132
// begin comp_dep = GetBase ( build ) ;
8024: LD_ADDR_EXP 23
8028: PUSH
8029: LD_VAR 0 1
8033: PPUSH
8034: CALL_OW 274
8038: ST_TO_ADDR
// CanBuildBase = true ;
8039: LD_ADDR_EXP 38
8043: PUSH
8044: LD_INT 1
8046: ST_TO_ADDR
// CanBuildLab = true ;
8047: LD_ADDR_EXP 40
8051: PUSH
8052: LD_INT 1
8054: ST_TO_ADDR
// CanBuildFactory = true ;
8055: LD_ADDR_EXP 39
8059: PUSH
8060: LD_INT 1
8062: ST_TO_ADDR
// SetResourceType ( GetBase ( build ) , mat_cans , 900000 ) ;
8063: LD_VAR 0 1
8067: PPUSH
8068: CALL_OW 274
8072: PPUSH
8073: LD_INT 1
8075: PPUSH
8076: LD_INT 900000
8078: PPUSH
8079: CALL_OW 277
// SetResourceType ( GetBase ( build ) , mat_oil , 100000 ) ;
8083: LD_VAR 0 1
8087: PPUSH
8088: CALL_OW 274
8092: PPUSH
8093: LD_INT 2
8095: PPUSH
8096: LD_INT 100000
8098: PPUSH
8099: CALL_OW 277
// SetResourceType ( GetBase ( build ) , mat_siberit , 1000 ) ;
8103: LD_VAR 0 1
8107: PPUSH
8108: CALL_OW 274
8112: PPUSH
8113: LD_INT 3
8115: PPUSH
8116: LD_INT 1000
8118: PPUSH
8119: CALL_OW 277
// AddComUpgrade ( build ) ;
8123: LD_VAR 0 1
8127: PPUSH
8128: CALL_OW 206
// end ; if GetBType ( build ) = b_armoury then
8132: LD_VAR 0 1
8136: PPUSH
8137: CALL_OW 266
8141: PUSH
8142: LD_INT 4
8144: EQUAL
8145: IFFALSE 8165
// begin comp_arm = build ;
8147: LD_ADDR_EXP 28
8151: PUSH
8152: LD_VAR 0 1
8156: ST_TO_ADDR
// ArmouryComplete = true ;
8157: LD_ADDR_EXP 44
8161: PUSH
8162: LD_INT 1
8164: ST_TO_ADDR
// end ; if GetBType ( build ) = b_lab then
8165: LD_VAR 0 1
8169: PPUSH
8170: CALL_OW 266
8174: PUSH
8175: LD_INT 6
8177: EQUAL
8178: IFFALSE 8280
// begin if Researched ( comp_side , tech_oilpow ) = false then
8180: LD_EXP 1
8184: PPUSH
8185: LD_INT 46
8187: PPUSH
8188: CALL_OW 325
8192: PUSH
8193: LD_INT 0
8195: EQUAL
8196: IFFALSE 8230
// begin comp_lab = build ;
8198: LD_ADDR_EXP 26
8202: PUSH
8203: LD_VAR 0 1
8207: ST_TO_ADDR
// labs = labs + 1 ;
8208: LD_ADDR_EXP 51
8212: PUSH
8213: LD_EXP 51
8217: PUSH
8218: LD_INT 1
8220: PLUS
8221: ST_TO_ADDR
// LabComplete = true ;
8222: LD_ADDR_EXP 45
8226: PUSH
8227: LD_INT 1
8229: ST_TO_ADDR
// end ; if Researched ( comp_side , tech_oilpow ) = true then
8230: LD_EXP 1
8234: PPUSH
8235: LD_INT 46
8237: PPUSH
8238: CALL_OW 325
8242: PUSH
8243: LD_INT 1
8245: EQUAL
8246: IFFALSE 8280
// begin comp_lab2 = build ;
8248: LD_ADDR_EXP 27
8252: PUSH
8253: LD_VAR 0 1
8257: ST_TO_ADDR
// labs = labs + 1 ;
8258: LD_ADDR_EXP 51
8262: PUSH
8263: LD_EXP 51
8267: PUSH
8268: LD_INT 1
8270: PLUS
8271: ST_TO_ADDR
// LabComplete2 = true ;
8272: LD_ADDR_EXP 46
8276: PUSH
8277: LD_INT 1
8279: ST_TO_ADDR
// end ; end ; if GetBType ( build ) = b_bunker then
8280: LD_VAR 0 1
8284: PPUSH
8285: CALL_OW 266
8289: PUSH
8290: LD_INT 32
8292: EQUAL
8293: IFFALSE 8311
// begin comp_towers = comp_towers ^ build ;
8295: LD_ADDR_EXP 29
8299: PUSH
8300: LD_EXP 29
8304: PUSH
8305: LD_VAR 0 1
8309: ADD
8310: ST_TO_ADDR
// end ; if GetBType ( build ) = b_workshop then
8311: LD_VAR 0 1
8315: PPUSH
8316: CALL_OW 266
8320: PUSH
8321: LD_INT 2
8323: EQUAL
8324: IFFALSE 8345
// begin Comp_Factory = build ;
8326: LD_ADDR_EXP 25
8330: PUSH
8331: LD_VAR 0 1
8335: ST_TO_ADDR
// ComUpgrade ( build ) ;
8336: LD_VAR 0 1
8340: PPUSH
8341: CALL_OW 146
// end ; if GetBType ( build ) = b_control_tower then
8345: LD_VAR 0 1
8349: PPUSH
8350: CALL_OW 266
8354: PUSH
8355: LD_INT 36
8357: EQUAL
8358: IFFALSE 8378
// begin Comp_CT = build ;
8360: LD_ADDR_EXP 31
8364: PUSH
8365: LD_VAR 0 1
8369: ST_TO_ADDR
// TowerComplete = true ;
8370: LD_ADDR_EXP 48
8374: PUSH
8375: LD_INT 1
8377: ST_TO_ADDR
// end ; if GetBType ( build ) = b_ext_gun then
8378: LD_VAR 0 1
8382: PPUSH
8383: CALL_OW 266
8387: PUSH
8388: LD_INT 17
8390: EQUAL
8391: IFFALSE 8433
// begin for i = 1 to comp_towers do
8393: LD_ADDR_VAR 0 2
8397: PUSH
8398: DOUBLE
8399: LD_INT 1
8401: DEC
8402: ST_TO_ADDR
8403: LD_EXP 29
8407: PUSH
8408: FOR_TO
8409: IFFALSE 8431
// begin AddComPlaceWeapon ( comp_Towers [ i ] , us_double_gun ) ;
8411: LD_EXP 29
8415: PUSH
8416: LD_VAR 0 2
8420: ARRAY
8421: PPUSH
8422: LD_INT 5
8424: PPUSH
8425: CALL_OW 208
// end ;
8429: GO 8408
8431: POP
8432: POP
// end ; if GetBType ( build ) = b_ext_rocket then
8433: LD_VAR 0 1
8437: PPUSH
8438: CALL_OW 266
8442: PUSH
8443: LD_INT 18
8445: EQUAL
8446: IFFALSE 8456
// begin CanBuildRocket = true ;
8448: LD_ADDR_EXP 72
8452: PUSH
8453: LD_INT 1
8455: ST_TO_ADDR
// end ; end ; end ;
8456: PPOPN 2
8458: END
// on UpgradeComplete ( build ) do var ext , i ;
8459: LD_INT 0
8461: PPUSH
8462: PPUSH
// begin if build = comp_arm then
8463: LD_VAR 0 1
8467: PUSH
8468: LD_EXP 28
8472: EQUAL
8473: IFFALSE 8541
// begin for i = comp_towers + 1 to comp_sold do
8475: LD_ADDR_VAR 0 3
8479: PUSH
8480: DOUBLE
8481: LD_EXP 29
8485: PUSH
8486: LD_INT 1
8488: PLUS
8489: DEC
8490: ST_TO_ADDR
8491: LD_EXP 7
8495: PUSH
8496: FOR_TO
8497: IFFALSE 8539
// begin SetClass ( comp_sold [ i ] , class_sniper ) ;
8499: LD_EXP 7
8503: PUSH
8504: LD_VAR 0 3
8508: ARRAY
8509: PPUSH
8510: LD_INT 5
8512: PPUSH
8513: CALL_OW 336
// ComEnterUnit ( comp_sold [ i ] , comp_arm ) ;
8517: LD_EXP 7
8521: PUSH
8522: LD_VAR 0 3
8526: ARRAY
8527: PPUSH
8528: LD_EXP 28
8532: PPUSH
8533: CALL_OW 120
// end ;
8537: GO 8496
8539: POP
8540: POP
// end ; if build = comp_factory then
8541: LD_VAR 0 1
8545: PUSH
8546: LD_EXP 25
8550: EQUAL
8551: IFFALSE 8912
// begin comp_factory = build ;
8553: LD_ADDR_EXP 25
8557: PUSH
8558: LD_VAR 0 1
8562: ST_TO_ADDR
// FacComplete = true ;
8563: LD_ADDR_EXP 47
8567: PUSH
8568: LD_INT 1
8570: ST_TO_ADDR
// ext = GetExtPositions ( build ) ;
8571: LD_ADDR_VAR 0 2
8575: PUSH
8576: LD_VAR 0 1
8580: PPUSH
8581: CALL_OW 270
8585: ST_TO_ADDR
// for i = 1 to comp_engs do
8586: LD_ADDR_VAR 0 3
8590: PUSH
8591: DOUBLE
8592: LD_INT 1
8594: DEC
8595: ST_TO_ADDR
8596: LD_EXP 8
8600: PUSH
8601: FOR_TO
8602: IFFALSE 8910
// begin if GetNation ( comp_sold [ 1 ] ) = 1 or GetNation ( comp_dep ) = 3 then
8604: LD_EXP 7
8608: PUSH
8609: LD_INT 1
8611: ARRAY
8612: PPUSH
8613: CALL_OW 248
8617: PUSH
8618: LD_INT 1
8620: EQUAL
8621: PUSH
8622: LD_EXP 23
8626: PPUSH
8627: CALL_OW 248
8631: PUSH
8632: LD_INT 3
8634: EQUAL
8635: OR
8636: IFFALSE 8685
// begin AddComBuild ( comp_engs [ i ] , b_ext_noncombat , ext [ 1 ] [ 1 ] , ext [ 1 ] [ 2 ] , 4 ) ;
8638: LD_EXP 8
8642: PUSH
8643: LD_VAR 0 3
8647: ARRAY
8648: PPUSH
8649: LD_INT 19
8651: PPUSH
8652: LD_VAR 0 2
8656: PUSH
8657: LD_INT 1
8659: ARRAY
8660: PUSH
8661: LD_INT 1
8663: ARRAY
8664: PPUSH
8665: LD_VAR 0 2
8669: PUSH
8670: LD_INT 1
8672: ARRAY
8673: PUSH
8674: LD_INT 2
8676: ARRAY
8677: PPUSH
8678: LD_INT 4
8680: PPUSH
8681: CALL_OW 205
// end ; if GetNation ( comp_sold [ 1 ] ) = 2 then
8685: LD_EXP 7
8689: PUSH
8690: LD_INT 1
8692: ARRAY
8693: PPUSH
8694: CALL_OW 248
8698: PUSH
8699: LD_INT 2
8701: EQUAL
8702: IFFALSE 8751
// begin AddComBuild ( comp_engs [ i ] , b_ext_stitch , ext [ 1 ] [ 1 ] , ext [ 1 ] [ 2 ] , 4 ) ;
8704: LD_EXP 8
8708: PUSH
8709: LD_VAR 0 3
8713: ARRAY
8714: PPUSH
8715: LD_INT 23
8717: PPUSH
8718: LD_VAR 0 2
8722: PUSH
8723: LD_INT 1
8725: ARRAY
8726: PUSH
8727: LD_INT 1
8729: ARRAY
8730: PPUSH
8731: LD_VAR 0 2
8735: PUSH
8736: LD_INT 1
8738: ARRAY
8739: PUSH
8740: LD_INT 2
8742: ARRAY
8743: PPUSH
8744: LD_INT 4
8746: PPUSH
8747: CALL_OW 205
// end ; AddComBuild ( comp_engs [ i ] , b_ext_gun , ext [ 2 ] [ 1 ] , ext [ 2 ] [ 2 ] , 5 ) ;
8751: LD_EXP 8
8755: PUSH
8756: LD_VAR 0 3
8760: ARRAY
8761: PPUSH
8762: LD_INT 17
8764: PPUSH
8765: LD_VAR 0 2
8769: PUSH
8770: LD_INT 2
8772: ARRAY
8773: PUSH
8774: LD_INT 1
8776: ARRAY
8777: PPUSH
8778: LD_VAR 0 2
8782: PUSH
8783: LD_INT 2
8785: ARRAY
8786: PUSH
8787: LD_INT 2
8789: ARRAY
8790: PPUSH
8791: LD_INT 5
8793: PPUSH
8794: CALL_OW 205
// AddComBuild ( comp_engs [ i ] , b_ext_track , ext [ 3 ] [ 1 ] , ext [ 3 ] [ 2 ] , 3 ) ;
8798: LD_EXP 8
8802: PUSH
8803: LD_VAR 0 3
8807: ARRAY
8808: PPUSH
8809: LD_INT 16
8811: PPUSH
8812: LD_VAR 0 2
8816: PUSH
8817: LD_INT 3
8819: ARRAY
8820: PUSH
8821: LD_INT 1
8823: ARRAY
8824: PPUSH
8825: LD_VAR 0 2
8829: PUSH
8830: LD_INT 3
8832: ARRAY
8833: PUSH
8834: LD_INT 2
8836: ARRAY
8837: PPUSH
8838: LD_INT 3
8840: PPUSH
8841: CALL_OW 205
// if not GetNation ( comp_factory ) = 3 then
8845: LD_EXP 25
8849: PPUSH
8850: CALL_OW 248
8854: PUSH
8855: LD_INT 3
8857: EQUAL
8858: NOT
8859: IFFALSE 8908
// AddComBuild ( comp_engs [ i ] , b_ext_radar , ext [ 4 ] [ 1 ] , ext [ 4 ] [ 2 ] , 1 ) ;
8861: LD_EXP 8
8865: PUSH
8866: LD_VAR 0 3
8870: ARRAY
8871: PPUSH
8872: LD_INT 20
8874: PPUSH
8875: LD_VAR 0 2
8879: PUSH
8880: LD_INT 4
8882: ARRAY
8883: PUSH
8884: LD_INT 1
8886: ARRAY
8887: PPUSH
8888: LD_VAR 0 2
8892: PUSH
8893: LD_INT 4
8895: ARRAY
8896: PUSH
8897: LD_INT 2
8899: ARRAY
8900: PPUSH
8901: LD_INT 1
8903: PPUSH
8904: CALL_OW 205
// end ;
8908: GO 8601
8910: POP
8911: POP
// end ; if build = comp_lab then
8912: LD_VAR 0 1
8916: PUSH
8917: LD_EXP 26
8921: EQUAL
8922: IFFALSE 8932
// begin LabFull1 = true ;
8924: LD_ADDR_EXP 49
8928: PUSH
8929: LD_INT 1
8931: ST_TO_ADDR
// end ; if build = comp_lab2 then
8932: LD_VAR 0 1
8936: PUSH
8937: LD_EXP 27
8941: EQUAL
8942: IFFALSE 8952
// begin LabFull2 = true ;
8944: LD_ADDR_EXP 50
8948: PUSH
8949: LD_INT 1
8951: ST_TO_ADDR
// end ; end ;
8952: PPOPN 3
8954: END
// on VehicleConstructed ( veh , fac ) do begin if GetSide ( fac ) = comp_side then
8955: LD_VAR 0 2
8959: PPUSH
8960: CALL_OW 255
8964: PUSH
8965: LD_EXP 1
8969: EQUAL
8970: IFFALSE 9319
// begin if GetNation ( veh ) = nation_american then
8972: LD_VAR 0 1
8976: PPUSH
8977: CALL_OW 248
8981: PUSH
8982: LD_INT 1
8984: EQUAL
8985: IFFALSE 9133
// begin if veh in FilterAllUnits ( [ f_weapon , us_cargo_bay ] ) then
8987: LD_VAR 0 1
8991: PUSH
8992: LD_INT 34
8994: PUSH
8995: LD_INT 12
8997: PUSH
8998: EMPTY
8999: LIST
9000: LIST
9001: PPUSH
9002: CALL_OW 69
9006: IN
9007: IFFALSE 9065
// begin comp_cargo = veh ;
9009: LD_ADDR_EXP 30
9013: PUSH
9014: LD_VAR 0 1
9018: ST_TO_ADDR
// comp_mechs = FilterAllUnits ( [ [ [ f_side , comp_side ] , [ f_class , 3 ] , [ f_inside ] ] ] ) ;
9019: LD_ADDR_EXP 9
9023: PUSH
9024: LD_INT 22
9026: PUSH
9027: LD_EXP 1
9031: PUSH
9032: EMPTY
9033: LIST
9034: LIST
9035: PUSH
9036: LD_INT 25
9038: PUSH
9039: LD_INT 3
9041: PUSH
9042: EMPTY
9043: LIST
9044: LIST
9045: PUSH
9046: LD_INT 54
9048: PUSH
9049: EMPTY
9050: LIST
9051: PUSH
9052: EMPTY
9053: LIST
9054: LIST
9055: LIST
9056: PUSH
9057: EMPTY
9058: LIST
9059: PPUSH
9060: CALL_OW 69
9064: ST_TO_ADDR
// end ; if not veh in FilterAllUnits ( [ f_weapon , us_cargo_bay ] ) then
9065: LD_VAR 0 1
9069: PUSH
9070: LD_INT 34
9072: PUSH
9073: LD_INT 12
9075: PUSH
9076: EMPTY
9077: LIST
9078: LIST
9079: PPUSH
9080: CALL_OW 69
9084: IN
9085: NOT
9086: IFFALSE 9133
// begin CLimiter = CLimiter + 1 ;
9088: LD_ADDR_EXP 34
9092: PUSH
9093: LD_EXP 34
9097: PUSH
9098: LD_INT 1
9100: PLUS
9101: ST_TO_ADDR
// comp_attgr = comp_attgr ^ veh ;
9102: LD_ADDR_EXP 32
9106: PUSH
9107: LD_EXP 32
9111: PUSH
9112: LD_VAR 0 1
9116: ADD
9117: ST_TO_ADDR
// ComMoveXY ( veh , 60 , 96 ) ;
9118: LD_VAR 0 1
9122: PPUSH
9123: LD_INT 60
9125: PPUSH
9126: LD_INT 96
9128: PPUSH
9129: CALL_OW 111
// end ; end ; if GetNation ( veh ) = nation_arabian then
9133: LD_VAR 0 1
9137: PPUSH
9138: CALL_OW 248
9142: PUSH
9143: LD_INT 2
9145: EQUAL
9146: IFFALSE 9226
// begin if veh in FilterAllUnits ( [ f_weapon , ar_cargo_bay ] ) then
9148: LD_VAR 0 1
9152: PUSH
9153: LD_INT 34
9155: PUSH
9156: LD_INT 32
9158: PUSH
9159: EMPTY
9160: LIST
9161: LIST
9162: PPUSH
9163: CALL_OW 69
9167: IN
9168: IFFALSE 9226
// begin comp_cargo = veh ;
9170: LD_ADDR_EXP 30
9174: PUSH
9175: LD_VAR 0 1
9179: ST_TO_ADDR
// comp_mechs = FilterAllUnits ( [ [ [ f_side , comp_side ] , [ f_class , 3 ] , [ f_inside ] ] ] ) ;
9180: LD_ADDR_EXP 9
9184: PUSH
9185: LD_INT 22
9187: PUSH
9188: LD_EXP 1
9192: PUSH
9193: EMPTY
9194: LIST
9195: LIST
9196: PUSH
9197: LD_INT 25
9199: PUSH
9200: LD_INT 3
9202: PUSH
9203: EMPTY
9204: LIST
9205: LIST
9206: PUSH
9207: LD_INT 54
9209: PUSH
9210: EMPTY
9211: LIST
9212: PUSH
9213: EMPTY
9214: LIST
9215: LIST
9216: LIST
9217: PUSH
9218: EMPTY
9219: LIST
9220: PPUSH
9221: CALL_OW 69
9225: ST_TO_ADDR
// end ; end ; if GetNation ( veh ) = nation_russian then
9226: LD_VAR 0 1
9230: PPUSH
9231: CALL_OW 248
9235: PUSH
9236: LD_INT 3
9238: EQUAL
9239: IFFALSE 9319
// begin if veh in FilterAllUnits ( [ f_weapon , ru_cargo_bay ] ) then
9241: LD_VAR 0 1
9245: PUSH
9246: LD_INT 34
9248: PUSH
9249: LD_INT 51
9251: PUSH
9252: EMPTY
9253: LIST
9254: LIST
9255: PPUSH
9256: CALL_OW 69
9260: IN
9261: IFFALSE 9319
// begin comp_cargo = veh ;
9263: LD_ADDR_EXP 30
9267: PUSH
9268: LD_VAR 0 1
9272: ST_TO_ADDR
// comp_mechs = FilterAllUnits ( [ [ [ f_side , comp_side ] , [ f_class , 3 ] , [ f_inside ] ] ] ) ;
9273: LD_ADDR_EXP 9
9277: PUSH
9278: LD_INT 22
9280: PUSH
9281: LD_EXP 1
9285: PUSH
9286: EMPTY
9287: LIST
9288: LIST
9289: PUSH
9290: LD_INT 25
9292: PUSH
9293: LD_INT 3
9295: PUSH
9296: EMPTY
9297: LIST
9298: LIST
9299: PUSH
9300: LD_INT 54
9302: PUSH
9303: EMPTY
9304: LIST
9305: PUSH
9306: EMPTY
9307: LIST
9308: LIST
9309: LIST
9310: PUSH
9311: EMPTY
9312: LIST
9313: PPUSH
9314: CALL_OW 69
9318: ST_TO_ADDR
// end ; end ; end ; end ;
9319: PPOPN 2
9321: END
// on UnitGoesToRed ( un ) do begin if un in FilterAllUnits ( [ [ f_side , comp_side ] , [ f_control , control_remote ] ] ) then
9322: LD_VAR 0 1
9326: PUSH
9327: LD_INT 22
9329: PUSH
9330: LD_EXP 1
9334: PUSH
9335: EMPTY
9336: LIST
9337: LIST
9338: PUSH
9339: LD_INT 33
9341: PUSH
9342: LD_INT 2
9344: PUSH
9345: EMPTY
9346: LIST
9347: LIST
9348: PUSH
9349: EMPTY
9350: LIST
9351: LIST
9352: PPUSH
9353: CALL_OW 69
9357: IN
9358: IFFALSE 9369
// begin ComUnlink ( un ) ;
9360: LD_VAR 0 1
9364: PPUSH
9365: CALL_OW 136
// end ; end ;
9369: PPOPN 1
9371: END
// on UnitDestroyed ( un ) do var r_side , r_nation , r_class ;
9372: LD_INT 0
9374: PPUSH
9375: PPUSH
9376: PPUSH
// begin if un in FilterAllUnits ( [ [ [ f_side , player_side ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , class_sniper ] , [ f_class , class_mortar ] , [ f_class , class_bazooker ] ] ] ] ) then
9377: LD_VAR 0 1
9381: PUSH
9382: LD_INT 22
9384: PUSH
9385: LD_EXP 75
9389: PUSH
9390: EMPTY
9391: LIST
9392: LIST
9393: PUSH
9394: LD_INT 21
9396: PUSH
9397: LD_INT 1
9399: PUSH
9400: EMPTY
9401: LIST
9402: LIST
9403: PUSH
9404: LD_INT 2
9406: PUSH
9407: LD_INT 25
9409: PUSH
9410: LD_INT 1
9412: PUSH
9413: EMPTY
9414: LIST
9415: LIST
9416: PUSH
9417: LD_INT 25
9419: PUSH
9420: LD_INT 2
9422: PUSH
9423: EMPTY
9424: LIST
9425: LIST
9426: PUSH
9427: LD_INT 25
9429: PUSH
9430: LD_INT 3
9432: PUSH
9433: EMPTY
9434: LIST
9435: LIST
9436: PUSH
9437: LD_INT 25
9439: PUSH
9440: LD_INT 4
9442: PUSH
9443: EMPTY
9444: LIST
9445: LIST
9446: PUSH
9447: LD_INT 25
9449: PUSH
9450: LD_INT 5
9452: PUSH
9453: EMPTY
9454: LIST
9455: LIST
9456: PUSH
9457: LD_INT 25
9459: PUSH
9460: LD_INT 8
9462: PUSH
9463: EMPTY
9464: LIST
9465: LIST
9466: PUSH
9467: LD_INT 25
9469: PUSH
9470: LD_INT 9
9472: PUSH
9473: EMPTY
9474: LIST
9475: LIST
9476: PUSH
9477: EMPTY
9478: LIST
9479: LIST
9480: LIST
9481: LIST
9482: LIST
9483: LIST
9484: LIST
9485: LIST
9486: PUSH
9487: EMPTY
9488: LIST
9489: LIST
9490: LIST
9491: PUSH
9492: EMPTY
9493: LIST
9494: PPUSH
9495: CALL_OW 69
9499: IN
9500: IFFALSE 9789
// begin if p_resp <= r_limit then
9502: LD_EXP 85
9506: PUSH
9507: LD_EXP 89
9511: LESSEQUAL
9512: IFFALSE 9789
// begin p_resp = p_resp + 1 ;
9514: LD_ADDR_EXP 85
9518: PUSH
9519: LD_EXP 85
9523: PUSH
9524: LD_INT 1
9526: PLUS
9527: ST_TO_ADDR
// r_side = GetSide ( un ) ;
9528: LD_ADDR_VAR 0 2
9532: PUSH
9533: LD_VAR 0 1
9537: PPUSH
9538: CALL_OW 255
9542: ST_TO_ADDR
// r_nation = GetNation ( un ) ;
9543: LD_ADDR_VAR 0 3
9547: PUSH
9548: LD_VAR 0 1
9552: PPUSH
9553: CALL_OW 248
9557: ST_TO_ADDR
// r_class = GetClass ( un ) ;
9558: LD_ADDR_VAR 0 4
9562: PUSH
9563: LD_VAR 0 1
9567: PPUSH
9568: CALL_OW 257
9572: ST_TO_ADDR
// Wait ( Rand ( 2 2$30 , 15 15$00 ) ) ;
9573: LD_INT 5250
9575: PPUSH
9576: LD_INT 31500
9578: PPUSH
9579: CALL_OW 12
9583: PPUSH
9584: CALL_OW 67
// uc_side = r_side ;
9588: LD_ADDR_OWVAR 20
9592: PUSH
9593: LD_VAR 0 2
9597: ST_TO_ADDR
// uc_nation = r_nation ;
9598: LD_ADDR_OWVAR 21
9602: PUSH
9603: LD_VAR 0 3
9607: ST_TO_ADDR
// hc_sex = Rand ( sex_male , sex_female ) ;
9608: LD_ADDR_OWVAR 27
9612: PUSH
9613: LD_INT 1
9615: PPUSH
9616: LD_INT 2
9618: PPUSH
9619: CALL_OW 12
9623: ST_TO_ADDR
// hc_gallery =  ;
9624: LD_ADDR_OWVAR 33
9628: PUSH
9629: LD_STRING 
9631: ST_TO_ADDR
// hc_skills = [ comp_skill1 + Rand ( - 3 , 1 ) , comp_skill2 + Rand ( - 3 , 1 ) , comp_skill3 + Rand ( - 3 , 1 ) , comp_skill4 + Rand ( - 3 , 1 ) ] ;
9632: LD_ADDR_OWVAR 31
9636: PUSH
9637: LD_EXP 12
9641: PUSH
9642: LD_INT 3
9644: NEG
9645: PPUSH
9646: LD_INT 1
9648: PPUSH
9649: CALL_OW 12
9653: PLUS
9654: PUSH
9655: LD_EXP 13
9659: PUSH
9660: LD_INT 3
9662: NEG
9663: PPUSH
9664: LD_INT 1
9666: PPUSH
9667: CALL_OW 12
9671: PLUS
9672: PUSH
9673: LD_EXP 14
9677: PUSH
9678: LD_INT 3
9680: NEG
9681: PPUSH
9682: LD_INT 1
9684: PPUSH
9685: CALL_OW 12
9689: PLUS
9690: PUSH
9691: LD_EXP 15
9695: PUSH
9696: LD_INT 3
9698: NEG
9699: PPUSH
9700: LD_INT 1
9702: PPUSH
9703: CALL_OW 12
9707: PLUS
9708: PUSH
9709: EMPTY
9710: LIST
9711: LIST
9712: LIST
9713: LIST
9714: ST_TO_ADDR
// hc_attr = [ Rand ( 8 , 12 ) , Rand ( 9 , 11 ) ] ;
9715: LD_ADDR_OWVAR 29
9719: PUSH
9720: LD_INT 8
9722: PPUSH
9723: LD_INT 12
9725: PPUSH
9726: CALL_OW 12
9730: PUSH
9731: LD_INT 9
9733: PPUSH
9734: LD_INT 11
9736: PPUSH
9737: CALL_OW 12
9741: PUSH
9742: EMPTY
9743: LIST
9744: LIST
9745: ST_TO_ADDR
// hc_name =  ;
9746: LD_ADDR_OWVAR 26
9750: PUSH
9751: LD_STRING 
9753: ST_TO_ADDR
// hc_class = r_class ;
9754: LD_ADDR_OWVAR 28
9758: PUSH
9759: LD_VAR 0 4
9763: ST_TO_ADDR
// un = CreateHuman ;
9764: LD_ADDR_VAR 0 1
9768: PUSH
9769: CALL_OW 44
9773: ST_TO_ADDR
// PlaceUnitArea ( un , ApeResp , true ) ;
9774: LD_VAR 0 1
9778: PPUSH
9779: LD_INT 3
9781: PPUSH
9782: LD_INT 1
9784: PPUSH
9785: CALL_OW 49
// end ; end ; if un in FilterAllUnits ( [ [ f_side , comp_side ] , [ f_type , unit_human ] ] ) then
9789: LD_VAR 0 1
9793: PUSH
9794: LD_INT 22
9796: PUSH
9797: LD_EXP 1
9801: PUSH
9802: EMPTY
9803: LIST
9804: LIST
9805: PUSH
9806: LD_INT 21
9808: PUSH
9809: LD_INT 1
9811: PUSH
9812: EMPTY
9813: LIST
9814: LIST
9815: PUSH
9816: EMPTY
9817: LIST
9818: LIST
9819: PPUSH
9820: CALL_OW 69
9824: IN
9825: IFFALSE 10272
// begin if c_resp <= r_limit then
9827: LD_EXP 86
9831: PUSH
9832: LD_EXP 89
9836: LESSEQUAL
9837: IFFALSE 10272
// begin c_resp = c_resp + 1 ;
9839: LD_ADDR_EXP 86
9843: PUSH
9844: LD_EXP 86
9848: PUSH
9849: LD_INT 1
9851: PLUS
9852: ST_TO_ADDR
// r_side = GetSide ( un ) ;
9853: LD_ADDR_VAR 0 2
9857: PUSH
9858: LD_VAR 0 1
9862: PPUSH
9863: CALL_OW 255
9867: ST_TO_ADDR
// r_nation = GetNation ( un ) ;
9868: LD_ADDR_VAR 0 3
9872: PUSH
9873: LD_VAR 0 1
9877: PPUSH
9878: CALL_OW 248
9882: ST_TO_ADDR
// r_class = GetClass ( un ) ;
9883: LD_ADDR_VAR 0 4
9887: PUSH
9888: LD_VAR 0 1
9892: PPUSH
9893: CALL_OW 257
9897: ST_TO_ADDR
// Wait ( Rand ( 2 2$30 , 15 15$00 ) ) ;
9898: LD_INT 5250
9900: PPUSH
9901: LD_INT 31500
9903: PPUSH
9904: CALL_OW 12
9908: PPUSH
9909: CALL_OW 67
// uc_side = r_side ;
9913: LD_ADDR_OWVAR 20
9917: PUSH
9918: LD_VAR 0 2
9922: ST_TO_ADDR
// uc_nation = r_nation ;
9923: LD_ADDR_OWVAR 21
9927: PUSH
9928: LD_VAR 0 3
9932: ST_TO_ADDR
// hc_sex = Rand ( sex_male , sex_female ) ;
9933: LD_ADDR_OWVAR 27
9937: PUSH
9938: LD_INT 1
9940: PPUSH
9941: LD_INT 2
9943: PPUSH
9944: CALL_OW 12
9948: ST_TO_ADDR
// hc_gallery =  ;
9949: LD_ADDR_OWVAR 33
9953: PUSH
9954: LD_STRING 
9956: ST_TO_ADDR
// hc_skills = [ comp_skill1 + Rand ( - 3 , 1 ) , comp_skill2 + Rand ( - 3 , 1 ) , comp_skill3 + Rand ( - 3 , 1 ) , comp_skill4 + Rand ( - 3 , 1 ) ] ;
9957: LD_ADDR_OWVAR 31
9961: PUSH
9962: LD_EXP 12
9966: PUSH
9967: LD_INT 3
9969: NEG
9970: PPUSH
9971: LD_INT 1
9973: PPUSH
9974: CALL_OW 12
9978: PLUS
9979: PUSH
9980: LD_EXP 13
9984: PUSH
9985: LD_INT 3
9987: NEG
9988: PPUSH
9989: LD_INT 1
9991: PPUSH
9992: CALL_OW 12
9996: PLUS
9997: PUSH
9998: LD_EXP 14
10002: PUSH
10003: LD_INT 3
10005: NEG
10006: PPUSH
10007: LD_INT 1
10009: PPUSH
10010: CALL_OW 12
10014: PLUS
10015: PUSH
10016: LD_EXP 15
10020: PUSH
10021: LD_INT 3
10023: NEG
10024: PPUSH
10025: LD_INT 1
10027: PPUSH
10028: CALL_OW 12
10032: PLUS
10033: PUSH
10034: EMPTY
10035: LIST
10036: LIST
10037: LIST
10038: LIST
10039: ST_TO_ADDR
// hc_attr = [ Rand ( 8 , 12 ) , Rand ( 9 , 11 ) ] ;
10040: LD_ADDR_OWVAR 29
10044: PUSH
10045: LD_INT 8
10047: PPUSH
10048: LD_INT 12
10050: PPUSH
10051: CALL_OW 12
10055: PUSH
10056: LD_INT 9
10058: PPUSH
10059: LD_INT 11
10061: PPUSH
10062: CALL_OW 12
10066: PUSH
10067: EMPTY
10068: LIST
10069: LIST
10070: ST_TO_ADDR
// hc_name =  ;
10071: LD_ADDR_OWVAR 26
10075: PUSH
10076: LD_STRING 
10078: ST_TO_ADDR
// hc_class = r_class ;
10079: LD_ADDR_OWVAR 28
10083: PUSH
10084: LD_VAR 0 4
10088: ST_TO_ADDR
// un = CreateHuman ;
10089: LD_ADDR_VAR 0 1
10093: PUSH
10094: CALL_OW 44
10098: ST_TO_ADDR
// PlaceUnitArea ( un , CompResp , true ) ;
10099: LD_VAR 0 1
10103: PPUSH
10104: LD_INT 1
10106: PPUSH
10107: LD_INT 1
10109: PPUSH
10110: CALL_OW 49
// if r_class = 1 then
10114: LD_VAR 0 4
10118: PUSH
10119: LD_INT 1
10121: EQUAL
10122: IFFALSE 10154
// begin ComEnterUnit ( un , comp_arm ) ;
10124: LD_VAR 0 1
10128: PPUSH
10129: LD_EXP 28
10133: PPUSH
10134: CALL_OW 120
// comp_sold = comp_sold ^ un ;
10138: LD_ADDR_EXP 7
10142: PUSH
10143: LD_EXP 7
10147: PUSH
10148: LD_VAR 0 1
10152: ADD
10153: ST_TO_ADDR
// end ; if r_class = 2 then
10154: LD_VAR 0 4
10158: PUSH
10159: LD_INT 2
10161: EQUAL
10162: IFFALSE 10180
// begin comp_engs = comp_engs ^ un ;
10164: LD_ADDR_EXP 8
10168: PUSH
10169: LD_EXP 8
10173: PUSH
10174: LD_VAR 0 1
10178: ADD
10179: ST_TO_ADDR
// end ; if r_class = 3 then
10180: LD_VAR 0 4
10184: PUSH
10185: LD_INT 3
10187: EQUAL
10188: IFFALSE 10220
// begin ComEnterUnit ( un , comp_factory ) ;
10190: LD_VAR 0 1
10194: PPUSH
10195: LD_EXP 25
10199: PPUSH
10200: CALL_OW 120
// comp_mechs = comp_mechs ^ un ;
10204: LD_ADDR_EXP 9
10208: PUSH
10209: LD_EXP 9
10213: PUSH
10214: LD_VAR 0 1
10218: ADD
10219: ST_TO_ADDR
// end ; if r_class = 4 then
10220: LD_VAR 0 4
10224: PUSH
10225: LD_INT 4
10227: EQUAL
10228: IFFALSE 10272
// begin SetClass ( un , 1 ) ;
10230: LD_VAR 0 1
10234: PPUSH
10235: LD_INT 1
10237: PPUSH
10238: CALL_OW 336
// ComEnterUnit ( un , comp_arm ) ;
10242: LD_VAR 0 1
10246: PPUSH
10247: LD_EXP 28
10251: PPUSH
10252: CALL_OW 120
// comp_sold = comp_sold ^ un ;
10256: LD_ADDR_EXP 7
10260: PUSH
10261: LD_EXP 7
10265: PUSH
10266: LD_VAR 0 1
10270: ADD
10271: ST_TO_ADDR
// end ; end ; end ; if un = comp_cargo or un in FilterAllUnits ( [ [ [ f_side , comp_side ] , [ f_class , 3 ] , [ f_driving ] ] ] ) then
10272: LD_VAR 0 1
10276: PUSH
10277: LD_EXP 30
10281: EQUAL
10282: PUSH
10283: LD_VAR 0 1
10287: PUSH
10288: LD_INT 22
10290: PUSH
10291: LD_EXP 1
10295: PUSH
10296: EMPTY
10297: LIST
10298: LIST
10299: PUSH
10300: LD_INT 25
10302: PUSH
10303: LD_INT 3
10305: PUSH
10306: EMPTY
10307: LIST
10308: LIST
10309: PUSH
10310: LD_INT 55
10312: PUSH
10313: EMPTY
10314: LIST
10315: PUSH
10316: EMPTY
10317: LIST
10318: LIST
10319: LIST
10320: PUSH
10321: EMPTY
10322: LIST
10323: PPUSH
10324: CALL_OW 69
10328: IN
10329: OR
10330: IFFALSE 10401
// begin comp_cargo = [ ] ;
10332: LD_ADDR_EXP 30
10336: PUSH
10337: EMPTY
10338: ST_TO_ADDR
// if Researched ( comp_side , tech_advchassis ) = true then
10339: LD_EXP 1
10343: PPUSH
10344: LD_INT 36
10346: PPUSH
10347: CALL_OW 325
10351: PUSH
10352: LD_INT 1
10354: EQUAL
10355: IFFALSE 10380
// begin AddComConstruct ( comp_factory , us_morphling , engine_combustion , control_remote , us_cargo_bay ) ;
10357: LD_EXP 25
10361: PPUSH
10362: LD_INT 5
10364: PPUSH
10365: LD_INT 1
10367: PPUSH
10368: LD_INT 2
10370: PPUSH
10371: LD_INT 12
10373: PPUSH
10374: CALL_OW 185
// end else
10378: GO 10401
// begin AddComConstruct ( comp_factory , us_medium_tracked , engine_combustion , control_remote , us_cargo_bay ) ;
10380: LD_EXP 25
10384: PPUSH
10385: LD_INT 3
10387: PPUSH
10388: LD_INT 1
10390: PPUSH
10391: LD_INT 2
10393: PPUSH
10394: LD_INT 12
10396: PPUSH
10397: CALL_OW 185
// end ; end ; if un in comp_attgr then
10401: LD_VAR 0 1
10405: PUSH
10406: LD_EXP 32
10410: IN
10411: IFFALSE 10477
// begin CLimiter = CLimiter - 1 ;
10413: LD_ADDR_EXP 34
10417: PUSH
10418: LD_EXP 34
10422: PUSH
10423: LD_INT 1
10425: MINUS
10426: ST_TO_ADDR
// comp_attgr = FilterAllUnits ( [ [ f_side , comp_side ] , [ f_control , control_remote ] ] ) ;
10427: LD_ADDR_EXP 32
10431: PUSH
10432: LD_INT 22
10434: PUSH
10435: LD_EXP 1
10439: PUSH
10440: EMPTY
10441: LIST
10442: LIST
10443: PUSH
10444: LD_INT 33
10446: PUSH
10447: LD_INT 2
10449: PUSH
10450: EMPTY
10451: LIST
10452: LIST
10453: PUSH
10454: EMPTY
10455: LIST
10456: LIST
10457: PPUSH
10458: CALL_OW 69
10462: ST_TO_ADDR
// dlimiter = dlimiter + 1 ;
10463: LD_ADDR_EXP 35
10467: PUSH
10468: LD_EXP 35
10472: PUSH
10473: LD_INT 1
10475: PLUS
10476: ST_TO_ADDR
// end ; if GetSide ( un ) = comp_side then
10477: LD_VAR 0 1
10481: PPUSH
10482: CALL_OW 255
10486: PUSH
10487: LD_EXP 1
10491: EQUAL
10492: IFFALSE 10602
// begin if un in FilterAllUnits ( [ f_type , unit_human ] ) then
10494: LD_VAR 0 1
10498: PUSH
10499: LD_INT 21
10501: PUSH
10502: LD_INT 1
10504: PUSH
10505: EMPTY
10506: LIST
10507: LIST
10508: PPUSH
10509: CALL_OW 69
10513: IN
10514: IFFALSE 10530
// begin Score = Score + 100 ;
10516: LD_ADDR_EXP 81
10520: PUSH
10521: LD_EXP 81
10525: PUSH
10526: LD_INT 100
10528: PLUS
10529: ST_TO_ADDR
// end ; if un in FilterAllUnits ( [ f_type , unit_building ] ) then
10530: LD_VAR 0 1
10534: PUSH
10535: LD_INT 21
10537: PUSH
10538: LD_INT 3
10540: PUSH
10541: EMPTY
10542: LIST
10543: LIST
10544: PPUSH
10545: CALL_OW 69
10549: IN
10550: IFFALSE 10566
// begin Score = Score + 50 ;
10552: LD_ADDR_EXP 81
10556: PUSH
10557: LD_EXP 81
10561: PUSH
10562: LD_INT 50
10564: PLUS
10565: ST_TO_ADDR
// end ; if un in FilterAllUnits ( [ f_type , unit_vehicle ] ) then
10566: LD_VAR 0 1
10570: PUSH
10571: LD_INT 21
10573: PUSH
10574: LD_INT 2
10576: PUSH
10577: EMPTY
10578: LIST
10579: LIST
10580: PPUSH
10581: CALL_OW 69
10585: IN
10586: IFFALSE 10602
// begin Score = Score + 10 ;
10588: LD_ADDR_EXP 81
10592: PUSH
10593: LD_EXP 81
10597: PUSH
10598: LD_INT 10
10600: PLUS
10601: ST_TO_ADDR
// end ; end ; if GetNation ( un ) = nation_nature then
10602: LD_VAR 0 1
10606: PPUSH
10607: CALL_OW 248
10611: PUSH
10612: LD_INT 0
10614: EQUAL
10615: IFFALSE 10639
// begin Wait ( Rand ( 0 0$30 , 4 4$00 ) ) ;
10617: LD_INT 1050
10619: PPUSH
10620: LD_INT 8400
10622: PPUSH
10623: CALL_OW 12
10627: PPUSH
10628: CALL_OW 67
// PrepareApeman ( 1 ) ;
10632: LD_INT 1
10634: PPUSH
10635: CALL 7002 0 1
// end ; end ;
10639: PPOPN 4
10641: END
// on ResearchComplete ( tech , lab ) do var i , ext ;
10642: LD_INT 0
10644: PPUSH
10645: PPUSH
// begin if lab = comp_lab or lab = comp_lab2 then
10646: LD_VAR 0 2
10650: PUSH
10651: LD_EXP 26
10655: EQUAL
10656: PUSH
10657: LD_VAR 0 2
10661: PUSH
10662: LD_EXP 27
10666: EQUAL
10667: OR
10668: IFFALSE 10928
// begin if tech = tech_oilpow then
10670: LD_VAR 0 1
10674: PUSH
10675: LD_INT 46
10677: EQUAL
10678: IFFALSE 10688
// begin CanBuildPlants = true ;
10680: LD_ADDR_EXP 42
10684: PUSH
10685: LD_INT 1
10687: ST_TO_ADDR
// end ; if tech = tech_gun then
10688: LD_VAR 0 1
10692: PUSH
10693: LD_INT 39
10695: EQUAL
10696: IFFALSE 10706
// begin TechGun = true ;
10698: LD_ADDR_EXP 56
10702: PUSH
10703: LD_INT 1
10705: ST_TO_ADDR
// end ; if tech = tech_radar then
10706: LD_VAR 0 1
10710: PUSH
10711: LD_INT 6
10713: EQUAL
10714: IFFALSE 10724
// begin TechRadar = true ;
10716: LD_ADDR_EXP 59
10720: PUSH
10721: LD_INT 1
10723: ST_TO_ADDR
// end ; if tech = tech_remcont then
10724: LD_VAR 0 1
10728: PUSH
10729: LD_INT 15
10731: EQUAL
10732: IFFALSE 10742
// begin TechRemoteControl = true ;
10734: LD_ADDR_EXP 60
10738: PUSH
10739: LD_INT 1
10741: ST_TO_ADDR
// end ; if tech = tech_ai then
10742: LD_VAR 0 1
10746: PUSH
10747: LD_INT 32
10749: EQUAL
10750: IFFALSE 10760
// begin TechAI = true ;
10752: LD_ADDR_EXP 62
10756: PUSH
10757: LD_INT 1
10759: ST_TO_ADDR
// end ; if tech = tech_rocket then
10760: LD_VAR 0 1
10764: PUSH
10765: LD_INT 40
10767: EQUAL
10768: IFFALSE 10854
// begin ext = GetExtPositions ( comp_factory ) ;
10770: LD_ADDR_VAR 0 4
10774: PUSH
10775: LD_EXP 25
10779: PPUSH
10780: CALL_OW 270
10784: ST_TO_ADDR
// for i = 1 to comp_engs do
10785: LD_ADDR_VAR 0 3
10789: PUSH
10790: DOUBLE
10791: LD_INT 1
10793: DEC
10794: ST_TO_ADDR
10795: LD_EXP 8
10799: PUSH
10800: FOR_TO
10801: IFFALSE 10852
// begin AddComBuild ( comp_engs [ i ] , b_ext_rocket , ext [ 5 ] [ 1 ] , ext [ 5 ] [ 2 ] , 5 ) ;
10803: LD_EXP 8
10807: PUSH
10808: LD_VAR 0 3
10812: ARRAY
10813: PPUSH
10814: LD_INT 18
10816: PPUSH
10817: LD_VAR 0 4
10821: PUSH
10822: LD_INT 5
10824: ARRAY
10825: PUSH
10826: LD_INT 1
10828: ARRAY
10829: PPUSH
10830: LD_VAR 0 4
10834: PUSH
10835: LD_INT 5
10837: ARRAY
10838: PUSH
10839: LD_INT 2
10841: ARRAY
10842: PPUSH
10843: LD_INT 5
10845: PPUSH
10846: CALL_OW 205
// end ;
10850: GO 10800
10852: POP
10853: POP
// end ; if tech = tech_lassight then
10854: LD_VAR 0 1
10858: PUSH
10859: LD_INT 12
10861: EQUAL
10862: IFFALSE 10928
// begin for i = 1 to comp_sci do
10864: LD_ADDR_VAR 0 3
10868: PUSH
10869: DOUBLE
10870: LD_INT 1
10872: DEC
10873: ST_TO_ADDR
10874: LD_EXP 10
10878: PUSH
10879: FOR_TO
10880: IFFALSE 10926
// begin ComExitBuilding ( comp_sci [ i ] ) ;
10882: LD_EXP 10
10886: PUSH
10887: LD_VAR 0 3
10891: ARRAY
10892: PPUSH
10893: CALL_OW 122
// Wait ( 0 0$01 ) ;
10897: LD_INT 35
10899: PPUSH
10900: CALL_OW 67
// AddComEnterUnit ( comp_sci [ i ] , comp_lab2 ) ;
10904: LD_EXP 10
10908: PUSH
10909: LD_VAR 0 3
10913: ARRAY
10914: PPUSH
10915: LD_EXP 27
10919: PPUSH
10920: CALL_OW 180
// end ;
10924: GO 10879
10926: POP
10927: POP
// end ; end ; end ;
10928: PPOPN 4
10930: END
// on EnterBuilding ( b , un ) do begin if GetSide ( b ) = comp_side then
10931: LD_VAR 0 1
10935: PPUSH
10936: CALL_OW 255
10940: PUSH
10941: LD_EXP 1
10945: EQUAL
10946: IFFALSE 11014
// begin if b = comp_arm and Researched ( comp_side , tech_lassight ) = true then
10948: LD_VAR 0 1
10952: PUSH
10953: LD_EXP 28
10957: EQUAL
10958: PUSH
10959: LD_EXP 1
10963: PPUSH
10964: LD_INT 12
10966: PPUSH
10967: CALL_OW 325
10971: PUSH
10972: LD_INT 1
10974: EQUAL
10975: AND
10976: IFFALSE 10990
// begin SetClass ( un , class_sniper ) ;
10978: LD_VAR 0 2
10982: PPUSH
10983: LD_INT 5
10985: PPUSH
10986: CALL_OW 336
// end ; if b = comp_factory then
10990: LD_VAR 0 1
10994: PUSH
10995: LD_EXP 25
10999: EQUAL
11000: IFFALSE 11014
// begin SetClass ( un , class_mechanic ) ;
11002: LD_VAR 0 2
11006: PPUSH
11007: LD_INT 3
11009: PPUSH
11010: CALL_OW 336
// end ; end ; end ; end_of_file
11014: PPOPN 2
11016: END
// every 0 0$10 trigger ProductionRADAR = true do
11017: LD_EXP 65
11021: PUSH
11022: LD_INT 1
11024: EQUAL
11025: IFFALSE 11114
11027: GO 11029
11029: DISABLE
// begin enable ;
11030: ENABLE
// if dlimiter >= limiter - 1 then
11031: LD_EXP 35
11035: PUSH
11036: LD_EXP 33
11040: PUSH
11041: LD_INT 1
11043: MINUS
11044: GREATEREQUAL
11045: IFFALSE 11063
// begin CanProduce = true ;
11047: LD_ADDR_EXP 71
11051: PUSH
11052: LD_INT 1
11054: ST_TO_ADDR
// dlimiter = 0 ;
11055: LD_ADDR_EXP 35
11059: PUSH
11060: LD_INT 0
11062: ST_TO_ADDR
// end ; if CanProduce = true then
11063: LD_EXP 71
11067: PUSH
11068: LD_INT 1
11070: EQUAL
11071: IFFALSE 11114
// begin lvl = lvl + 1 ;
11073: LD_ADDR_EXP 73
11077: PUSH
11078: LD_EXP 73
11082: PUSH
11083: LD_INT 1
11085: PLUS
11086: ST_TO_ADDR
// CanProduce = false ;
11087: LD_ADDR_EXP 71
11091: PUSH
11092: LD_INT 0
11094: ST_TO_ADDR
// Wait ( Rand ( 0 0$30 , 3 3$00 ) ) ;
11095: LD_INT 1050
11097: PPUSH
11098: LD_INT 6300
11100: PPUSH
11101: CALL_OW 12
11105: PPUSH
11106: CALL_OW 67
// PrepareAttack ;
11110: CALL 11115 0 0
// end ; end ;
11114: END
// export function PrepareAttack ; var i ; begin
11115: LD_INT 0
11117: PPUSH
11118: PPUSH
// if lvl < 3 then
11119: LD_EXP 73
11123: PUSH
11124: LD_INT 3
11126: LESS
11127: IFFALSE 11228
// begin for i = 1 to limiter do
11129: LD_ADDR_VAR 0 2
11133: PUSH
11134: DOUBLE
11135: LD_INT 1
11137: DEC
11138: ST_TO_ADDR
11139: LD_EXP 33
11143: PUSH
11144: FOR_TO
11145: IFFALSE 11226
// begin if GetNation ( comp_factory ) = 1 then
11147: LD_EXP 25
11151: PPUSH
11152: CALL_OW 248
11156: PUSH
11157: LD_INT 1
11159: EQUAL
11160: IFFALSE 11224
// begin if diff_attack = 1 then
11162: LD_EXP 18
11166: PUSH
11167: LD_INT 1
11169: EQUAL
11170: IFFALSE 11193
// begin AddComConstruct ( comp_factory , us_medium_tracked , engine_combustion , control_remote , us_gatling_gun ) ;
11172: LD_EXP 25
11176: PPUSH
11177: LD_INT 3
11179: PPUSH
11180: LD_INT 1
11182: PPUSH
11183: LD_INT 2
11185: PPUSH
11186: LD_INT 4
11188: PPUSH
11189: CALL_OW 185
// end ; if diff_attack > 2 then
11193: LD_EXP 18
11197: PUSH
11198: LD_INT 2
11200: GREATER
11201: IFFALSE 11224
// begin AddComConstruct ( comp_factory , us_medium_tracked , engine_combustion , control_remote , us_double_gun ) ;
11203: LD_EXP 25
11207: PPUSH
11208: LD_INT 3
11210: PPUSH
11211: LD_INT 1
11213: PPUSH
11214: LD_INT 2
11216: PPUSH
11217: LD_INT 5
11219: PPUSH
11220: CALL_OW 185
// end ; end ; end ;
11224: GO 11144
11226: POP
11227: POP
// end ; if lvl >= 3 then
11228: LD_EXP 73
11232: PUSH
11233: LD_INT 3
11235: GREATEREQUAL
11236: IFFALSE 11412
// begin for i = 1 to limiter do
11238: LD_ADDR_VAR 0 2
11242: PUSH
11243: DOUBLE
11244: LD_INT 1
11246: DEC
11247: ST_TO_ADDR
11248: LD_EXP 33
11252: PUSH
11253: FOR_TO
11254: IFFALSE 11410
// begin if diff_attack = 1 then
11256: LD_EXP 18
11260: PUSH
11261: LD_INT 1
11263: EQUAL
11264: IFFALSE 11287
// begin AddComConstruct ( comp_factory , us_medium_tracked , engine_combustion , control_remote , us_double_gun ) ;
11266: LD_EXP 25
11270: PPUSH
11271: LD_INT 3
11273: PPUSH
11274: LD_INT 1
11276: PPUSH
11277: LD_INT 2
11279: PPUSH
11280: LD_INT 5
11282: PPUSH
11283: CALL_OW 185
// end ; if diff_attack = 2 then
11287: LD_EXP 18
11291: PUSH
11292: LD_INT 2
11294: EQUAL
11295: IFFALSE 11318
// begin AddComConstruct ( comp_factory , us_morphling , engine_combustion , control_remote , us_heavy_gun ) ;
11297: LD_EXP 25
11301: PPUSH
11302: LD_INT 5
11304: PPUSH
11305: LD_INT 1
11307: PPUSH
11308: LD_INT 2
11310: PPUSH
11311: LD_INT 6
11313: PPUSH
11314: CALL_OW 185
// end ; if diff_attack > 2 then
11318: LD_EXP 18
11322: PUSH
11323: LD_INT 2
11325: GREATER
11326: IFFALSE 11408
// if Researched ( comp_side , tech_rocket ) = true and Researched ( comp_side , tech_advchassis ) = true then
11328: LD_EXP 1
11332: PPUSH
11333: LD_INT 40
11335: PPUSH
11336: CALL_OW 325
11340: PUSH
11341: LD_INT 1
11343: EQUAL
11344: PUSH
11345: LD_EXP 1
11349: PPUSH
11350: LD_INT 36
11352: PPUSH
11353: CALL_OW 325
11357: PUSH
11358: LD_INT 1
11360: EQUAL
11361: AND
11362: IFFALSE 11387
// begin AddComConstruct ( comp_factory , us_morphling , engine_combustion , control_remote , us_rocket_launcher ) ;
11364: LD_EXP 25
11368: PPUSH
11369: LD_INT 5
11371: PPUSH
11372: LD_INT 1
11374: PPUSH
11375: LD_INT 2
11377: PPUSH
11378: LD_INT 7
11380: PPUSH
11381: CALL_OW 185
// end else
11385: GO 11408
// begin AddComConstruct ( comp_factory , us_heavy_tracked , engine_combustion , control_remote , us_heavy_gun ) ;
11387: LD_EXP 25
11391: PPUSH
11392: LD_INT 4
11394: PPUSH
11395: LD_INT 1
11397: PPUSH
11398: LD_INT 2
11400: PPUSH
11401: LD_INT 6
11403: PPUSH
11404: CALL_OW 185
// end ; end ;
11408: GO 11253
11410: POP
11411: POP
// end ; end ;
11412: LD_VAR 0 1
11416: RET
// every 0 0$11 trigger CanAttack = false and CLimiter = Limiter do
11417: LD_EXP 70
11421: PUSH
11422: LD_INT 0
11424: EQUAL
11425: PUSH
11426: LD_EXP 34
11430: PUSH
11431: LD_EXP 33
11435: EQUAL
11436: AND
11437: IFFALSE 11451
11439: GO 11441
11441: DISABLE
// begin CanAttack = true ;
11442: LD_ADDR_EXP 70
11446: PUSH
11447: LD_INT 1
11449: ST_TO_ADDR
// enable ;
11450: ENABLE
// end ;
11451: END
// export Dir ; every 0 0$01 do
11452: GO 11454
11454: DISABLE
// Dir = 0 ;
11455: LD_ADDR_EXP 83
11459: PUSH
11460: LD_INT 0
11462: ST_TO_ADDR
11463: END
// every 5 5$00 do
11464: GO 11466
11466: DISABLE
// begin enable ;
11467: ENABLE
// Dir = Dir + 1 ;
11468: LD_ADDR_EXP 83
11472: PUSH
11473: LD_EXP 83
11477: PUSH
11478: LD_INT 1
11480: PLUS
11481: ST_TO_ADDR
// if Dir > 2 then
11482: LD_EXP 83
11486: PUSH
11487: LD_INT 2
11489: GREATER
11490: IFFALSE 11500
// Dir = 1 ;
11492: LD_ADDR_EXP 83
11496: PUSH
11497: LD_INT 1
11499: ST_TO_ADDR
// end ;
11500: END
// every 0 0$10 trigger CanAttack = true do var filter ;
11501: LD_EXP 70
11505: PUSH
11506: LD_INT 1
11508: EQUAL
11509: IFFALSE 11575
11511: GO 11513
11513: DISABLE
11514: LD_INT 0
11516: PPUSH
// begin enable ;
11517: ENABLE
// filter = UnitFilter ( comp_attgr , [ f_ok ] ) ;
11518: LD_ADDR_VAR 0 1
11522: PUSH
11523: LD_EXP 32
11527: PPUSH
11528: LD_INT 50
11530: PUSH
11531: EMPTY
11532: LIST
11533: PPUSH
11534: CALL_OW 72
11538: ST_TO_ADDR
// if filter >= limiter then
11539: LD_VAR 0 1
11543: PUSH
11544: LD_EXP 33
11548: GREATEREQUAL
11549: IFFALSE 11575
// begin CanAttack = false ;
11551: LD_ADDR_EXP 70
11555: PUSH
11556: LD_INT 0
11558: ST_TO_ADDR
// Wait ( 0 0$03 ) ;
11559: LD_INT 105
11561: PPUSH
11562: CALL_OW 67
// ComAttackPlayerBase ( filter ) ;
11566: LD_VAR 0 1
11570: PPUSH
11571: CALL 11578 0 1
// end ; end ;
11575: PPOPN 1
11577: END
// export function ComAttackPlayerBase ( attackers ) ; var un , pl_units ; begin
11578: LD_INT 0
11580: PPUSH
11581: PPUSH
11582: PPUSH
// repeat begin for un in attackers do
11583: LD_ADDR_VAR 0 3
11587: PUSH
11588: LD_VAR 0 1
11592: PUSH
11593: FOR_IN
11594: IFFALSE 11651
// begin pl_units := FilterAllUnits ( [ f_side , player_side ] ) ;
11596: LD_ADDR_VAR 0 4
11600: PUSH
11601: LD_INT 22
11603: PUSH
11604: LD_EXP 75
11608: PUSH
11609: EMPTY
11610: LIST
11611: LIST
11612: PPUSH
11613: CALL_OW 69
11617: ST_TO_ADDR
// ComAttackUnit ( un , NearestUnitToUnit ( pl_units , un ) ) ;
11618: LD_VAR 0 3
11622: PPUSH
11623: LD_VAR 0 4
11627: PPUSH
11628: LD_VAR 0 3
11632: PPUSH
11633: CALL_OW 74
11637: PPUSH
11638: CALL_OW 115
// Wait ( 0 0$01 ) ;
11642: LD_INT 35
11644: PPUSH
11645: CALL_OW 67
// end ;
11649: GO 11593
11651: POP
11652: POP
// end until attackers = 0 ;
11653: LD_VAR 0 1
11657: PUSH
11658: LD_INT 0
11660: EQUAL
11661: IFFALSE 11583
// end ; end_of_file
11663: LD_VAR 0 2
11667: RET
// export EnemyDetected ; every 0 0$01 trigger Comp_Units > 0 do var i , un ;
11668: LD_EXP 4
11672: PUSH
11673: LD_INT 0
11675: GREATER
11676: IFFALSE 11750
11678: GO 11680
11680: DISABLE
11681: LD_INT 0
11683: PPUSH
11684: PPUSH
// begin enable ;
11685: ENABLE
// if EnemyDetected = false then
11686: LD_EXP 84
11690: PUSH
11691: LD_INT 0
11693: EQUAL
11694: IFFALSE 11750
// begin if FilterAllUnits ( [ [ f_enemy , comp_side ] , [ f_inarea , compdeff ] ] ) > 0 then
11696: LD_INT 81
11698: PUSH
11699: LD_EXP 1
11703: PUSH
11704: EMPTY
11705: LIST
11706: LIST
11707: PUSH
11708: LD_INT 95
11710: PUSH
11711: LD_INT 7
11713: PUSH
11714: EMPTY
11715: LIST
11716: LIST
11717: PUSH
11718: EMPTY
11719: LIST
11720: LIST
11721: PPUSH
11722: CALL_OW 69
11726: PUSH
11727: LD_INT 0
11729: GREATER
11730: IFFALSE 11742
// EnemyDetected = true else
11732: LD_ADDR_EXP 84
11736: PUSH
11737: LD_INT 1
11739: ST_TO_ADDR
11740: GO 11750
// EnemyDetected = false ;
11742: LD_ADDR_EXP 84
11746: PUSH
11747: LD_INT 0
11749: ST_TO_ADDR
// end ; end ;
11750: PPOPN 2
11752: END
// every 0 0$01 trigger EnemyDetected = true do var i , un , b , d , repair_list , task_list , build_list ;
11753: LD_EXP 84
11757: PUSH
11758: LD_INT 1
11760: EQUAL
11761: IFFALSE 12183
11763: GO 11765
11765: DISABLE
11766: LD_INT 0
11768: PPUSH
11769: PPUSH
11770: PPUSH
11771: PPUSH
11772: PPUSH
11773: PPUSH
11774: PPUSH
// begin enable ;
11775: ENABLE
// repair_list = UnitFilter ( comp_engs , [ f_ok ] ) ;
11776: LD_ADDR_VAR 0 5
11780: PUSH
11781: LD_EXP 8
11785: PPUSH
11786: LD_INT 50
11788: PUSH
11789: EMPTY
11790: LIST
11791: PPUSH
11792: CALL_OW 72
11796: ST_TO_ADDR
// task_list = [ ] ;
11797: LD_ADDR_VAR 0 6
11801: PUSH
11802: EMPTY
11803: ST_TO_ADDR
// build_list = [ ] ;
11804: LD_ADDR_VAR 0 7
11808: PUSH
11809: EMPTY
11810: ST_TO_ADDR
// i = 1 ;
11811: LD_ADDR_VAR 0 1
11815: PUSH
11816: LD_INT 1
11818: ST_TO_ADDR
// repeat case i of 1 :
11819: LD_VAR 0 1
11823: PUSH
11824: LD_INT 1
11826: DOUBLE
11827: EQUAL
11828: IFTRUE 11832
11830: GO 11888
11832: POP
// Build_List = FilterAllUnits ( [ [ [ f_side , comp_side ] , [ f_type , unit_building ] , [ f_not , [ f_ok ] ] ] ] ) ; 2 :
11833: LD_ADDR_VAR 0 7
11837: PUSH
11838: LD_INT 22
11840: PUSH
11841: LD_EXP 1
11845: PUSH
11846: EMPTY
11847: LIST
11848: LIST
11849: PUSH
11850: LD_INT 21
11852: PUSH
11853: LD_INT 3
11855: PUSH
11856: EMPTY
11857: LIST
11858: LIST
11859: PUSH
11860: LD_INT 3
11862: PUSH
11863: LD_INT 50
11865: PUSH
11866: EMPTY
11867: LIST
11868: PUSH
11869: EMPTY
11870: LIST
11871: LIST
11872: PUSH
11873: EMPTY
11874: LIST
11875: LIST
11876: LIST
11877: PUSH
11878: EMPTY
11879: LIST
11880: PPUSH
11881: CALL_OW 69
11885: ST_TO_ADDR
11886: GO 11957
11888: LD_INT 2
11890: DOUBLE
11891: EQUAL
11892: IFTRUE 11896
11894: GO 11956
11896: POP
// Build_List = FilterAllUnits ( [ [ [ f_side , comp_side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ; end ;
11897: LD_ADDR_VAR 0 7
11901: PUSH
11902: LD_INT 22
11904: PUSH
11905: LD_EXP 1
11909: PUSH
11910: EMPTY
11911: LIST
11912: LIST
11913: PUSH
11914: LD_INT 21
11916: PUSH
11917: LD_INT 3
11919: PUSH
11920: EMPTY
11921: LIST
11922: LIST
11923: PUSH
11924: LD_INT 3
11926: PUSH
11927: LD_INT 24
11929: PUSH
11930: LD_INT 1000
11932: PUSH
11933: EMPTY
11934: LIST
11935: LIST
11936: PUSH
11937: EMPTY
11938: LIST
11939: LIST
11940: PUSH
11941: EMPTY
11942: LIST
11943: LIST
11944: LIST
11945: PUSH
11946: EMPTY
11947: LIST
11948: PPUSH
11949: CALL_OW 69
11953: ST_TO_ADDR
11954: GO 11957
11956: POP
// i = i + 1 ;
11957: LD_ADDR_VAR 0 1
11961: PUSH
11962: LD_VAR 0 1
11966: PUSH
11967: LD_INT 1
11969: PLUS
11970: ST_TO_ADDR
// until Build_List > 0 or i > 2 ;
11971: LD_VAR 0 7
11975: PUSH
11976: LD_INT 0
11978: GREATER
11979: PUSH
11980: LD_VAR 0 1
11984: PUSH
11985: LD_INT 2
11987: GREATER
11988: OR
11989: IFFALSE 11819
// if Build_List = 1 then
11991: LD_VAR 0 7
11995: PUSH
11996: LD_INT 1
11998: EQUAL
11999: IFFALSE 12045
// begin for i in repair_list do
12001: LD_ADDR_VAR 0 1
12005: PUSH
12006: LD_VAR 0 5
12010: PUSH
12011: FOR_IN
12012: IFFALSE 12043
// begin Task_List := Task_List ^ GetTaskList ( repair_list [ i ] ) ;
12014: LD_ADDR_VAR 0 6
12018: PUSH
12019: LD_VAR 0 6
12023: PUSH
12024: LD_VAR 0 5
12028: PUSH
12029: LD_VAR 0 1
12033: ARRAY
12034: PPUSH
12035: CALL_OW 437
12039: ADD
12040: ST_TO_ADDR
// ; end ;
12041: GO 12011
12043: POP
12044: POP
// end ; if Build_List > 0 then
12045: LD_VAR 0 7
12049: PUSH
12050: LD_INT 0
12052: GREATER
12053: IFFALSE 12073
// begin ComRepairBuilding ( repair_list , build_list [ 1 ] ) ;
12055: LD_VAR 0 5
12059: PPUSH
12060: LD_VAR 0 7
12064: PUSH
12065: LD_INT 1
12067: ARRAY
12068: PPUSH
12069: CALL_OW 130
// end ; if Build_List <= 0 and Task_List > 0 then
12073: LD_VAR 0 7
12077: PUSH
12078: LD_INT 0
12080: LESSEQUAL
12081: PUSH
12082: LD_VAR 0 6
12086: PUSH
12087: LD_INT 0
12089: GREATER
12090: AND
12091: IFFALSE 12136
// begin for i in repair_list do
12093: LD_ADDR_VAR 0 1
12097: PUSH
12098: LD_VAR 0 5
12102: PUSH
12103: FOR_IN
12104: IFFALSE 12134
// begin SetTaskList ( repair_list [ i ] , task_list [ i ] ) ;
12106: LD_VAR 0 5
12110: PUSH
12111: LD_VAR 0 1
12115: ARRAY
12116: PPUSH
12117: LD_VAR 0 6
12121: PUSH
12122: LD_VAR 0 1
12126: ARRAY
12127: PPUSH
12128: CALL_OW 446
// end ;
12132: GO 12103
12134: POP
12135: POP
// end ; for un in repair_list do
12136: LD_ADDR_VAR 0 2
12140: PUSH
12141: LD_VAR 0 5
12145: PUSH
12146: FOR_IN
12147: IFFALSE 12181
// begin if not IsInArea ( un , CompBase ) then
12149: LD_VAR 0 2
12153: PPUSH
12154: LD_INT 2
12156: PPUSH
12157: CALL_OW 308
12161: NOT
12162: IFFALSE 12179
// ComMoveXY ( un , 62 , 94 ) ;
12164: LD_VAR 0 2
12168: PPUSH
12169: LD_INT 62
12171: PPUSH
12172: LD_INT 94
12174: PPUSH
12175: CALL_OW 111
// end ;
12179: GO 12146
12181: POP
12182: POP
// end ;
12183: PPOPN 7
12185: END
// every 0 0$01 do var heal_list , doctor , un , i , d , lab ;
12186: GO 12188
12188: DISABLE
12189: LD_INT 0
12191: PPUSH
12192: PPUSH
12193: PPUSH
12194: PPUSH
12195: PPUSH
12196: PPUSH
// begin enable ;
12197: ENABLE
// heal_list = UnitFilter ( comp_engs , [ f_not , [ f_lives , 800 ] ] ) ;
12198: LD_ADDR_VAR 0 1
12202: PUSH
12203: LD_EXP 8
12207: PPUSH
12208: LD_INT 3
12210: PUSH
12211: LD_INT 24
12213: PUSH
12214: LD_INT 800
12216: PUSH
12217: EMPTY
12218: LIST
12219: LIST
12220: PUSH
12221: EMPTY
12222: LIST
12223: LIST
12224: PPUSH
12225: CALL_OW 72
12229: ST_TO_ADDR
// doctor = [ ] ;
12230: LD_ADDR_VAR 0 2
12234: PUSH
12235: EMPTY
12236: ST_TO_ADDR
// d = 0 ;
12237: LD_ADDR_VAR 0 5
12241: PUSH
12242: LD_INT 0
12244: ST_TO_ADDR
// if heal_list > 0 then
12245: LD_VAR 0 1
12249: PUSH
12250: LD_INT 0
12252: GREATER
12253: IFFALSE 12463
// begin for un in heal_list do
12255: LD_ADDR_VAR 0 3
12259: PUSH
12260: LD_VAR 0 1
12264: PUSH
12265: FOR_IN
12266: IFFALSE 12461
// begin ComMoveXY ( un , 64 , 103 ) ;
12268: LD_VAR 0 3
12272: PPUSH
12273: LD_INT 64
12275: PPUSH
12276: LD_INT 103
12278: PPUSH
12279: CALL_OW 111
// if IsOk ( comp_sci [ d + 1 ] ) then
12283: LD_EXP 10
12287: PUSH
12288: LD_VAR 0 5
12292: PUSH
12293: LD_INT 1
12295: PLUS
12296: ARRAY
12297: PPUSH
12298: CALL_OW 302
12302: IFFALSE 12326
// doctor := comp_sci [ d + 1 ] else
12304: LD_ADDR_VAR 0 2
12308: PUSH
12309: LD_EXP 10
12313: PUSH
12314: LD_VAR 0 5
12318: PUSH
12319: LD_INT 1
12321: PLUS
12322: ARRAY
12323: ST_TO_ADDR
12324: GO 12371
// repeat d = d + 1 ;
12326: LD_ADDR_VAR 0 5
12330: PUSH
12331: LD_VAR 0 5
12335: PUSH
12336: LD_INT 1
12338: PLUS
12339: ST_TO_ADDR
// until IsOk ( comp_sci [ d + 1 ] ) or d > 6 ;
12340: LD_EXP 10
12344: PUSH
12345: LD_VAR 0 5
12349: PUSH
12350: LD_INT 1
12352: PLUS
12353: ARRAY
12354: PPUSH
12355: CALL_OW 302
12359: PUSH
12360: LD_VAR 0 5
12364: PUSH
12365: LD_INT 6
12367: GREATER
12368: OR
12369: IFFALSE 12326
// if d <= 6 then
12371: LD_VAR 0 5
12375: PUSH
12376: LD_INT 6
12378: LESSEQUAL
12379: IFFALSE 12401
// doctor := comp_sci [ d + 1 ] ;
12381: LD_ADDR_VAR 0 2
12385: PUSH
12386: LD_EXP 10
12390: PUSH
12391: LD_VAR 0 5
12395: PUSH
12396: LD_INT 1
12398: PLUS
12399: ARRAY
12400: ST_TO_ADDR
// if doctor then
12401: LD_VAR 0 2
12405: IFFALSE 12422
// Lab := IsInUnit ( doctor ) ;
12407: LD_ADDR_VAR 0 6
12411: PUSH
12412: LD_VAR 0 2
12416: PPUSH
12417: CALL_OW 310
12421: ST_TO_ADDR
// ComExitBuilding ( doctor ) ;
12422: LD_VAR 0 2
12426: PPUSH
12427: CALL_OW 122
// AddComHeal ( doctor , un ) ;
12431: LD_VAR 0 2
12435: PPUSH
12436: LD_VAR 0 3
12440: PPUSH
12441: CALL_OW 188
// AddComEnterUnit ( doctor , lab ) ;
12445: LD_VAR 0 2
12449: PPUSH
12450: LD_VAR 0 6
12454: PPUSH
12455: CALL_OW 180
// end ;
12459: GO 12265
12461: POP
12462: POP
// end ; end ; end_of_file
12463: PPOPN 6
12465: END
// every 0 0$03 trigger Score > 0 and FilterAllUnits ( [ f_side , comp_side ] ) = 0 do
12466: LD_EXP 81
12470: PUSH
12471: LD_INT 0
12473: GREATER
12474: PUSH
12475: LD_INT 22
12477: PUSH
12478: LD_EXP 1
12482: PUSH
12483: EMPTY
12484: LIST
12485: LIST
12486: PPUSH
12487: CALL_OW 69
12491: PUSH
12492: LD_INT 0
12494: EQUAL
12495: AND
12496: IFFALSE 12542
12498: GO 12500
12500: DISABLE
// begin AddMedal (  , 1 ) ;
12501: LD_STRING 
12503: PPUSH
12504: LD_INT 1
12506: PPUSH
12507: CALL_OW 101
// AddMedal (  , 1 ) ;
12511: LD_STRING 
12513: PPUSH
12514: LD_INT 1
12516: PPUSH
12517: CALL_OW 101
// AddMedal (  , 1 ) ;
12521: LD_STRING 
12523: PPUSH
12524: LD_INT 1
12526: PPUSH
12527: CALL_OW 101
// GiveMedals (  ) ;
12531: LD_STRING 
12533: PPUSH
12534: CALL_OW 102
// YouWin ;
12538: CALL_OW 103
// end ; end_of_file
12542: END
// export p_resp , c_resp , c_list , p_list , r_limit ; every 1 do
12543: GO 12545
12545: DISABLE
// begin p_resp = 0 ;
12546: LD_ADDR_EXP 85
12550: PUSH
12551: LD_INT 0
12553: ST_TO_ADDR
// c_resp = 0 ;
12554: LD_ADDR_EXP 86
12558: PUSH
12559: LD_INT 0
12561: ST_TO_ADDR
// r_limit = 5 ;
12562: LD_ADDR_EXP 89
12566: PUSH
12567: LD_INT 5
12569: ST_TO_ADDR
// p_list = [ ] ;
12570: LD_ADDR_EXP 88
12574: PUSH
12575: EMPTY
12576: ST_TO_ADDR
// c_list = [ ] ;
12577: LD_ADDR_EXP 87
12581: PUSH
12582: EMPTY
12583: ST_TO_ADDR
// end ; end_of_file
12584: END
// export EventON ; export ChTEBazooka , ChTESabouter , ChTESib , ChTEResp , ChTESpy , ChTESibRocket , ChTENe , ChTApe ; every 0 0$01 trigger EventOn = true do
12585: LD_EXP 90
12589: PUSH
12590: LD_INT 1
12592: EQUAL
12593: IFFALSE 12662
12595: GO 12597
12597: DISABLE
// begin ChTEBazooka = 40 ;
12598: LD_ADDR_EXP 91
12602: PUSH
12603: LD_INT 40
12605: ST_TO_ADDR
// ChTESabouter = 35 ;
12606: LD_ADDR_EXP 92
12610: PUSH
12611: LD_INT 35
12613: ST_TO_ADDR
// ChTESib = 15 ;
12614: LD_ADDR_EXP 93
12618: PUSH
12619: LD_INT 15
12621: ST_TO_ADDR
// ChTEResp = 90 ;
12622: LD_ADDR_EXP 94
12626: PUSH
12627: LD_INT 90
12629: ST_TO_ADDR
// ChTEspy = 15 ;
12630: LD_ADDR_EXP 95
12634: PUSH
12635: LD_INT 15
12637: ST_TO_ADDR
// ChTESibRocket = 50 ;
12638: LD_ADDR_EXP 96
12642: PUSH
12643: LD_INT 50
12645: ST_TO_ADDR
// ChTENe = 73 ;
12646: LD_ADDR_EXP 97
12650: PUSH
12651: LD_INT 73
12653: ST_TO_ADDR
// ChTApe = 20 ;
12654: LD_ADDR_EXP 98
12658: PUSH
12659: LD_INT 20
12661: ST_TO_ADDR
// end ;
12662: END
// every 3 3$00 trigger FilterAllUnits ( [ [ f_side , player_side ] , [ f_class , class_bazooker ] ] ) > 0 and EventOn do var chance ;
12663: LD_INT 22
12665: PUSH
12666: LD_EXP 75
12670: PUSH
12671: EMPTY
12672: LIST
12673: LIST
12674: PUSH
12675: LD_INT 25
12677: PUSH
12678: LD_INT 9
12680: PUSH
12681: EMPTY
12682: LIST
12683: LIST
12684: PUSH
12685: EMPTY
12686: LIST
12687: LIST
12688: PPUSH
12689: CALL_OW 69
12693: PUSH
12694: LD_INT 0
12696: GREATER
12697: PUSH
12698: LD_EXP 90
12702: AND
12703: IFFALSE 12813
12705: GO 12707
12707: DISABLE
12708: LD_INT 0
12710: PPUSH
// begin enable ;
12711: ENABLE
// chance = Rand ( 0 , 100 ) ;
12712: LD_ADDR_VAR 0 1
12716: PUSH
12717: LD_INT 0
12719: PPUSH
12720: LD_INT 100
12722: PPUSH
12723: CALL_OW 12
12727: ST_TO_ADDR
// if chance <= ChTEBazooka then
12728: LD_VAR 0 1
12732: PUSH
12733: LD_EXP 91
12737: LESSEQUAL
12738: IFFALSE 12813
// begin case Query ( EventBazooka ) of 1 :
12740: LD_STRING EventBazooka
12742: PPUSH
12743: CALL_OW 97
12747: PUSH
12748: LD_INT 1
12750: DOUBLE
12751: EQUAL
12752: IFTRUE 12756
12754: GO 12812
12756: POP
// begin ChTEBazooka = 10 ;
12757: LD_ADDR_EXP 91
12761: PUSH
12762: LD_INT 10
12764: ST_TO_ADDR
// SetTech ( tech_bazooka , player_side , state_disabled ) ;
12765: LD_INT 44
12767: PPUSH
12768: LD_EXP 75
12772: PPUSH
12773: LD_INT 0
12775: PPUSH
12776: CALL_OW 322
// Wait ( Rand ( 1 1$00 , 2 2$30 ) ) ;
12780: LD_INT 2100
12782: PPUSH
12783: LD_INT 5250
12785: PPUSH
12786: CALL_OW 12
12790: PPUSH
12791: CALL_OW 67
// SetTech ( tech_bazooka , player_side , state_researched ) ;
12795: LD_INT 44
12797: PPUSH
12798: LD_EXP 75
12802: PPUSH
12803: LD_INT 2
12805: PPUSH
12806: CALL_OW 322
// end ; end ;
12810: GO 12813
12812: POP
// end ; end ;
12813: PPOPN 1
12815: END
// every 8 8$00 trigger FilterAllUnits ( [ [ f_side , player_side ] , [ f_type , unit_building ] ] ) > 1 and EventOn do var chance , builds , x ;
12816: LD_INT 22
12818: PUSH
12819: LD_EXP 75
12823: PUSH
12824: EMPTY
12825: LIST
12826: LIST
12827: PUSH
12828: LD_INT 21
12830: PUSH
12831: LD_INT 3
12833: PUSH
12834: EMPTY
12835: LIST
12836: LIST
12837: PUSH
12838: EMPTY
12839: LIST
12840: LIST
12841: PPUSH
12842: CALL_OW 69
12846: PUSH
12847: LD_INT 1
12849: GREATER
12850: PUSH
12851: LD_EXP 90
12855: AND
12856: IFFALSE 13002
12858: GO 12860
12860: DISABLE
12861: LD_INT 0
12863: PPUSH
12864: PPUSH
12865: PPUSH
// begin enable ;
12866: ENABLE
// builds = FilterAllUnits ( [ [ f_side , player_side ] , [ f_type , unit_building ] ] ) ;
12867: LD_ADDR_VAR 0 2
12871: PUSH
12872: LD_INT 22
12874: PUSH
12875: LD_EXP 75
12879: PUSH
12880: EMPTY
12881: LIST
12882: LIST
12883: PUSH
12884: LD_INT 21
12886: PUSH
12887: LD_INT 3
12889: PUSH
12890: EMPTY
12891: LIST
12892: LIST
12893: PUSH
12894: EMPTY
12895: LIST
12896: LIST
12897: PPUSH
12898: CALL_OW 69
12902: ST_TO_ADDR
// chance = Rand ( 0 , 100 ) ;
12903: LD_ADDR_VAR 0 1
12907: PUSH
12908: LD_INT 0
12910: PPUSH
12911: LD_INT 100
12913: PPUSH
12914: CALL_OW 12
12918: ST_TO_ADDR
// if chance <= ChTESabouter then
12919: LD_VAR 0 1
12923: PUSH
12924: LD_EXP 92
12928: LESSEQUAL
12929: IFFALSE 13002
// begin case Query ( EventSab ) of 1 :
12931: LD_STRING EventSab
12933: PPUSH
12934: CALL_OW 97
12938: PUSH
12939: LD_INT 1
12941: DOUBLE
12942: EQUAL
12943: IFTRUE 12947
12945: GO 13001
12947: POP
// begin x = Rand ( 2 , builds ) ;
12948: LD_ADDR_VAR 0 3
12952: PUSH
12953: LD_INT 2
12955: PPUSH
12956: LD_VAR 0 2
12960: PPUSH
12961: CALL_OW 12
12965: ST_TO_ADDR
// CenterNowOnUnits ( builds [ x ] ) ;
12966: LD_VAR 0 2
12970: PUSH
12971: LD_VAR 0 3
12975: ARRAY
12976: PPUSH
12977: CALL_OW 87
// SetLives ( builds [ x ] , 1 ) ;
12981: LD_VAR 0 2
12985: PUSH
12986: LD_VAR 0 3
12990: ARRAY
12991: PPUSH
12992: LD_INT 1
12994: PPUSH
12995: CALL_OW 234
// end ; end ;
12999: GO 13002
13001: POP
// end ; end ;
13002: PPOPN 3
13004: END
// every 7 7$25 trigger FilterAllUnits ( [ [ f_side , player_side ] , [ f_btype , b_siberite_mine ] ] ) > 0 and EventOn do var chance , mine ;
13005: LD_INT 22
13007: PUSH
13008: LD_EXP 75
13012: PUSH
13013: EMPTY
13014: LIST
13015: LIST
13016: PUSH
13017: LD_INT 30
13019: PUSH
13020: LD_INT 30
13022: PUSH
13023: EMPTY
13024: LIST
13025: LIST
13026: PUSH
13027: EMPTY
13028: LIST
13029: LIST
13030: PPUSH
13031: CALL_OW 69
13035: PUSH
13036: LD_INT 0
13038: GREATER
13039: PUSH
13040: LD_EXP 90
13044: AND
13045: IFFALSE 13223
13047: GO 13049
13049: DISABLE
13050: LD_INT 0
13052: PPUSH
13053: PPUSH
// begin enable ;
13054: ENABLE
// mine = FilterAllUnits ( [ [ f_side , player_side ] , [ f_btype , b_siberite_mine ] ] ) [ 1 ] ;
13055: LD_ADDR_VAR 0 2
13059: PUSH
13060: LD_INT 22
13062: PUSH
13063: LD_EXP 75
13067: PUSH
13068: EMPTY
13069: LIST
13070: LIST
13071: PUSH
13072: LD_INT 30
13074: PUSH
13075: LD_INT 30
13077: PUSH
13078: EMPTY
13079: LIST
13080: LIST
13081: PUSH
13082: EMPTY
13083: LIST
13084: LIST
13085: PPUSH
13086: CALL_OW 69
13090: PUSH
13091: LD_INT 1
13093: ARRAY
13094: ST_TO_ADDR
// chance = Rand ( 0 , 100 ) ;
13095: LD_ADDR_VAR 0 1
13099: PUSH
13100: LD_INT 0
13102: PPUSH
13103: LD_INT 100
13105: PPUSH
13106: CALL_OW 12
13110: ST_TO_ADDR
// if chance <= ChTESib then
13111: LD_VAR 0 1
13115: PUSH
13116: LD_EXP 93
13120: LESSEQUAL
13121: IFFALSE 13223
// begin case Query ( EventSib ) of 1 :
13123: LD_STRING EventSib
13125: PPUSH
13126: CALL_OW 97
13130: PUSH
13131: LD_INT 1
13133: DOUBLE
13134: EQUAL
13135: IFTRUE 13139
13137: GO 13222
13139: POP
// begin ChTESib = 5 ;
13140: LD_ADDR_EXP 93
13144: PUSH
13145: LD_INT 5
13147: ST_TO_ADDR
// Contaminate ( player_side , GetX ( mine ) , GetY ( mine ) ) ;
13148: LD_EXP 75
13152: PPUSH
13153: LD_VAR 0 2
13157: PPUSH
13158: CALL_OW 250
13162: PPUSH
13163: LD_VAR 0 2
13167: PPUSH
13168: CALL_OW 251
13172: PPUSH
13173: CALL_OW 489
// CenterNowOnXY ( GetX ( mine ) , GetY ( mine ) ) ;
13177: LD_VAR 0 2
13181: PPUSH
13182: CALL_OW 250
13186: PPUSH
13187: LD_VAR 0 2
13191: PPUSH
13192: CALL_OW 251
13196: PPUSH
13197: CALL_OW 86
// Wait ( 1 1$10 ) ;
13201: LD_INT 2450
13203: PPUSH
13204: CALL_OW 67
// SetLives ( mine , 1 ) ;
13208: LD_VAR 0 2
13212: PPUSH
13213: LD_INT 1
13215: PPUSH
13216: CALL_OW 234
// end ; end ;
13220: GO 13223
13222: POP
// end ; end ;
13223: PPOPN 2
13225: END
// every 20 20$25 trigger EventOn do var un , i , chance ;
13226: LD_EXP 90
13230: IFFALSE 13540
13232: GO 13234
13234: DISABLE
13235: LD_INT 0
13237: PPUSH
13238: PPUSH
13239: PPUSH
// begin enable ;
13240: ENABLE
// if ChTEResp < 31 then
13241: LD_EXP 94
13245: PUSH
13246: LD_INT 31
13248: LESS
13249: IFFALSE 13259
// begin ChTEResp = 5 ;
13251: LD_ADDR_EXP 94
13255: PUSH
13256: LD_INT 5
13258: ST_TO_ADDR
// end ; chance = Rand ( 0 , 100 ) ;
13259: LD_ADDR_VAR 0 3
13263: PUSH
13264: LD_INT 0
13266: PPUSH
13267: LD_INT 100
13269: PPUSH
13270: CALL_OW 12
13274: ST_TO_ADDR
// if chance <= ChTEResp then
13275: LD_VAR 0 3
13279: PUSH
13280: LD_EXP 94
13284: LESSEQUAL
13285: IFFALSE 13540
// begin case Query ( EventResp ) of 1 :
13287: LD_STRING EventResp
13289: PPUSH
13290: CALL_OW 97
13294: PUSH
13295: LD_INT 1
13297: DOUBLE
13298: EQUAL
13299: IFTRUE 13303
13301: GO 13539
13303: POP
// begin ChTEResp = ChTEResp - 30 ;
13304: LD_ADDR_EXP 94
13308: PUSH
13309: LD_EXP 94
13313: PUSH
13314: LD_INT 30
13316: MINUS
13317: ST_TO_ADDR
// uc_side = player_side ;
13318: LD_ADDR_OWVAR 20
13322: PUSH
13323: LD_EXP 75
13327: ST_TO_ADDR
// uc_nation = player_nation ;
13328: LD_ADDR_OWVAR 21
13332: PUSH
13333: LD_EXP 74
13337: ST_TO_ADDR
// hc_sex := Rand ( sex_male , sex_female ) ;
13338: LD_ADDR_OWVAR 27
13342: PUSH
13343: LD_INT 1
13345: PPUSH
13346: LD_INT 2
13348: PPUSH
13349: CALL_OW 12
13353: ST_TO_ADDR
// hc_importance = 0 ;
13354: LD_ADDR_OWVAR 32
13358: PUSH
13359: LD_INT 0
13361: ST_TO_ADDR
// hc_gallery :=  ;
13362: LD_ADDR_OWVAR 33
13366: PUSH
13367: LD_STRING 
13369: ST_TO_ADDR
// hc_skills = [ comp_skill1 + Rand ( 0 , 1 ) , comp_skill2 + Rand ( 0 , 1 ) , comp_skill3 + Rand ( - 3 , 0 ) , comp_skill4 + Rand ( - 3 , 0 ) ] ;
13370: LD_ADDR_OWVAR 31
13374: PUSH
13375: LD_EXP 12
13379: PUSH
13380: LD_INT 0
13382: PPUSH
13383: LD_INT 1
13385: PPUSH
13386: CALL_OW 12
13390: PLUS
13391: PUSH
13392: LD_EXP 13
13396: PUSH
13397: LD_INT 0
13399: PPUSH
13400: LD_INT 1
13402: PPUSH
13403: CALL_OW 12
13407: PLUS
13408: PUSH
13409: LD_EXP 14
13413: PUSH
13414: LD_INT 3
13416: NEG
13417: PPUSH
13418: LD_INT 0
13420: PPUSH
13421: CALL_OW 12
13425: PLUS
13426: PUSH
13427: LD_EXP 15
13431: PUSH
13432: LD_INT 3
13434: NEG
13435: PPUSH
13436: LD_INT 0
13438: PPUSH
13439: CALL_OW 12
13443: PLUS
13444: PUSH
13445: EMPTY
13446: LIST
13447: LIST
13448: LIST
13449: LIST
13450: ST_TO_ADDR
// hc_attr = [ Rand ( 8 , 12 ) , Rand ( 9 , 11 ) ] ;
13451: LD_ADDR_OWVAR 29
13455: PUSH
13456: LD_INT 8
13458: PPUSH
13459: LD_INT 12
13461: PPUSH
13462: CALL_OW 12
13466: PUSH
13467: LD_INT 9
13469: PPUSH
13470: LD_INT 11
13472: PPUSH
13473: CALL_OW 12
13477: PUSH
13478: EMPTY
13479: LIST
13480: LIST
13481: ST_TO_ADDR
// hc_name :=  ;
13482: LD_ADDR_OWVAR 26
13486: PUSH
13487: LD_STRING 
13489: ST_TO_ADDR
// hc_class = Rand ( 1 , 4 ) ;
13490: LD_ADDR_OWVAR 28
13494: PUSH
13495: LD_INT 1
13497: PPUSH
13498: LD_INT 4
13500: PPUSH
13501: CALL_OW 12
13505: ST_TO_ADDR
// un = CreateHuman ;
13506: LD_ADDR_VAR 0 1
13510: PUSH
13511: CALL_OW 44
13515: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13516: LD_VAR 0 1
13520: PPUSH
13521: LD_INT 1
13523: PPUSH
13524: CALL_OW 51
// CenterNowOnUnits ( un ) ;
13528: LD_VAR 0 1
13532: PPUSH
13533: CALL_OW 87
// end ; end ;
13537: GO 13540
13539: POP
// end ; end ;
13540: PPOPN 3
13542: END
// every 9 9$39 trigger comp_mechs > 0 and EventOn do var chance , time ;
13543: LD_EXP 9
13547: PUSH
13548: LD_INT 0
13550: GREATER
13551: PUSH
13552: LD_EXP 90
13556: AND
13557: IFFALSE 13673
13559: GO 13561
13561: DISABLE
13562: LD_INT 0
13564: PPUSH
13565: PPUSH
// begin enable ;
13566: ENABLE
// chance = Rand ( 0 , 100 ) ;
13567: LD_ADDR_VAR 0 1
13571: PUSH
13572: LD_INT 0
13574: PPUSH
13575: LD_INT 100
13577: PPUSH
13578: CALL_OW 12
13582: ST_TO_ADDR
// time = Rand ( 0 0$30 , 3 3$00 ) ;
13583: LD_ADDR_VAR 0 2
13587: PUSH
13588: LD_INT 1050
13590: PPUSH
13591: LD_INT 6300
13593: PPUSH
13594: CALL_OW 12
13598: ST_TO_ADDR
// if chance <= ChTESpy then
13599: LD_VAR 0 1
13603: PUSH
13604: LD_EXP 95
13608: LESSEQUAL
13609: IFFALSE 13673
// begin case Query ( EventSpy ) of 1 :
13611: LD_STRING EventSpy
13613: PPUSH
13614: CALL_OW 97
13618: PUSH
13619: LD_INT 1
13621: DOUBLE
13622: EQUAL
13623: IFTRUE 13627
13625: GO 13672
13627: POP
// begin PlaceSeeing ( 61 , 96 , player_side , 20 ) ;
13628: LD_INT 61
13630: PPUSH
13631: LD_INT 96
13633: PPUSH
13634: LD_EXP 75
13638: PPUSH
13639: LD_INT 20
13641: PPUSH
13642: CALL_OW 330
// Wait ( time ) ;
13646: LD_VAR 0 2
13650: PPUSH
13651: CALL_OW 67
// RemoveSeeing ( 61 , 96 , player_side ) ;
13655: LD_INT 61
13657: PPUSH
13658: LD_INT 96
13660: PPUSH
13661: LD_EXP 75
13665: PPUSH
13666: CALL_OW 331
// end ; end ;
13670: GO 13673
13672: POP
// end ; end ;
13673: PPOPN 2
13675: END
// every 39 39$00 trigger EventOn do var chance , x , y , d ;
13676: LD_EXP 90
13680: IFFALSE 13846
13682: GO 13684
13684: DISABLE
13685: LD_INT 0
13687: PPUSH
13688: PPUSH
13689: PPUSH
13690: PPUSH
// begin enable ;
13691: ENABLE
// chance = Rand ( 0 , 100 ) ;
13692: LD_ADDR_VAR 0 1
13696: PUSH
13697: LD_INT 0
13699: PPUSH
13700: LD_INT 100
13702: PPUSH
13703: CALL_OW 12
13707: ST_TO_ADDR
// x := [ 41 , 191 ] ;
13708: LD_ADDR_VAR 0 2
13712: PUSH
13713: LD_INT 41
13715: PUSH
13716: LD_INT 191
13718: PUSH
13719: EMPTY
13720: LIST
13721: LIST
13722: ST_TO_ADDR
// y := [ 19 , 101 ] ;
13723: LD_ADDR_VAR 0 3
13727: PUSH
13728: LD_INT 19
13730: PUSH
13731: LD_INT 101
13733: PUSH
13734: EMPTY
13735: LIST
13736: LIST
13737: ST_TO_ADDR
// d := Rand ( 1 , 2 ) ;
13738: LD_ADDR_VAR 0 4
13742: PUSH
13743: LD_INT 1
13745: PPUSH
13746: LD_INT 2
13748: PPUSH
13749: CALL_OW 12
13753: ST_TO_ADDR
// if chance <= ChTESibRocket then
13754: LD_VAR 0 1
13758: PUSH
13759: LD_EXP 96
13763: LESSEQUAL
13764: IFFALSE 13846
// begin case Query ( SibRocket ) of 1 :
13766: LD_STRING SibRocket
13768: PPUSH
13769: CALL_OW 97
13773: PUSH
13774: LD_INT 1
13776: DOUBLE
13777: EQUAL
13778: IFTRUE 13782
13780: GO 13845
13782: POP
// begin ChTESibRocket = 25 ;
13783: LD_ADDR_EXP 96
13787: PUSH
13788: LD_INT 25
13790: ST_TO_ADDR
// CenterNowOnXY ( x [ d ] , y [ d ] ) ;
13791: LD_VAR 0 2
13795: PUSH
13796: LD_VAR 0 4
13800: ARRAY
13801: PPUSH
13802: LD_VAR 0 3
13806: PUSH
13807: LD_VAR 0 4
13811: ARRAY
13812: PPUSH
13813: CALL_OW 86
// SendSiberiteRocket ( x [ d ] , y [ d ] ) ;
13817: LD_VAR 0 2
13821: PUSH
13822: LD_VAR 0 4
13826: ARRAY
13827: PPUSH
13828: LD_VAR 0 3
13832: PUSH
13833: LD_VAR 0 4
13837: ARRAY
13838: PPUSH
13839: CALL_OW 429
// end ; end ;
13843: GO 13846
13845: POP
// end ; end ;
13846: PPOPN 4
13848: END
// every 22 22$00 trigger EventOn do var chance , un ;
13849: LD_EXP 90
13853: IFFALSE 13956
13855: GO 13857
13857: DISABLE
13858: LD_INT 0
13860: PPUSH
13861: PPUSH
// begin enable ;
13862: ENABLE
// if FilterAllUnits ( [ f_side , 0 ] ) < 15 then
13863: LD_INT 22
13865: PUSH
13866: LD_INT 0
13868: PUSH
13869: EMPTY
13870: LIST
13871: LIST
13872: PPUSH
13873: CALL_OW 69
13877: PUSH
13878: LD_INT 15
13880: LESS
13881: IFFALSE 13893
// begin ChTApe = 60 ;
13883: LD_ADDR_EXP 98
13887: PUSH
13888: LD_INT 60
13890: ST_TO_ADDR
// end else
13891: GO 13901
// begin ChTApe = 15 ;
13893: LD_ADDR_EXP 98
13897: PUSH
13898: LD_INT 15
13900: ST_TO_ADDR
// end ; chance = Rand ( 0 , 100 ) ;
13901: LD_ADDR_VAR 0 1
13905: PUSH
13906: LD_INT 0
13908: PPUSH
13909: LD_INT 100
13911: PPUSH
13912: CALL_OW 12
13916: ST_TO_ADDR
// if chance <= ChTApe then
13917: LD_VAR 0 1
13921: PUSH
13922: LD_EXP 98
13926: LESSEQUAL
13927: IFFALSE 13956
// case Query ( EventApeman ) of 1 :
13929: LD_STRING EventApeman
13931: PPUSH
13932: CALL_OW 97
13936: PUSH
13937: LD_INT 1
13939: DOUBLE
13940: EQUAL
13941: IFTRUE 13945
13943: GO 13955
13945: POP
// begin PrepareApeman ( 5 ) ;
13946: LD_INT 5
13948: PPUSH
13949: CALL 7002 0 1
// end ; end ;
13953: GO 13956
13955: POP
// end ;
13956: PPOPN 2
13958: END
// export snipers ; every 10 10$00 do var side , un , veh , i , p , limit , chance , vehicles , pl_units ;
13959: GO 13961
13961: DISABLE
13962: LD_INT 0
13964: PPUSH
13965: PPUSH
13966: PPUSH
13967: PPUSH
13968: PPUSH
13969: PPUSH
13970: PPUSH
13971: PPUSH
13972: PPUSH
// begin enable ;
13973: ENABLE
// chance = Rand ( 0 , 100 ) ;
13974: LD_ADDR_VAR 0 7
13978: PUSH
13979: LD_INT 0
13981: PPUSH
13982: LD_INT 100
13984: PPUSH
13985: CALL_OW 12
13989: ST_TO_ADDR
// p = 0 ;
13990: LD_ADDR_VAR 0 5
13994: PUSH
13995: LD_INT 0
13997: ST_TO_ADDR
// side = comp_side + 1 ;
13998: LD_ADDR_VAR 0 1
14002: PUSH
14003: LD_EXP 1
14007: PUSH
14008: LD_INT 1
14010: PLUS
14011: ST_TO_ADDR
// if side = player_side then
14012: LD_VAR 0 1
14016: PUSH
14017: LD_EXP 75
14021: EQUAL
14022: IFFALSE 14038
// begin side = player_side + 1 ;
14024: LD_ADDR_VAR 0 1
14028: PUSH
14029: LD_EXP 75
14033: PUSH
14034: LD_INT 1
14036: PLUS
14037: ST_TO_ADDR
// end ; SetAttitude ( comp_side , side , att_friend , true ) ;
14038: LD_EXP 1
14042: PPUSH
14043: LD_VAR 0 1
14047: PPUSH
14048: LD_INT 1
14050: PPUSH
14051: LD_INT 1
14053: PPUSH
14054: CALL_OW 80
// if diff_attack > 0 then
14058: LD_EXP 18
14062: PUSH
14063: LD_INT 0
14065: GREATER
14066: IFFALSE 14122
// begin if diff_attack = 1 then
14068: LD_EXP 18
14072: PUSH
14073: LD_INT 1
14075: EQUAL
14076: IFFALSE 14086
// begin limit = 5 ;
14078: LD_ADDR_VAR 0 6
14082: PUSH
14083: LD_INT 5
14085: ST_TO_ADDR
// end ; if diff_attack = 2 then
14086: LD_EXP 18
14090: PUSH
14091: LD_INT 2
14093: EQUAL
14094: IFFALSE 14104
// begin limit = 8 ;
14096: LD_ADDR_VAR 0 6
14100: PUSH
14101: LD_INT 8
14103: ST_TO_ADDR
// end ; if diff_attack = 3 then
14104: LD_EXP 18
14108: PUSH
14109: LD_INT 3
14111: EQUAL
14112: IFFALSE 14122
// begin limit = 11 ;
14114: LD_ADDR_VAR 0 6
14118: PUSH
14119: LD_INT 11
14121: ST_TO_ADDR
// end ; end ; vehicles = [ ] ;
14122: LD_ADDR_VAR 0 8
14126: PUSH
14127: EMPTY
14128: ST_TO_ADDR
// snipers = [ ] ;
14129: LD_ADDR_EXP 99
14133: PUSH
14134: EMPTY
14135: ST_TO_ADDR
// if chance <= ChTENe then
14136: LD_VAR 0 7
14140: PUSH
14141: LD_EXP 97
14145: LESSEQUAL
14146: IFFALSE 14977
// begin case Query ( EventNewEnemy ) of 1 :
14148: LD_STRING EventNewEnemy
14150: PPUSH
14151: CALL_OW 97
14155: PUSH
14156: LD_INT 1
14158: DOUBLE
14159: EQUAL
14160: IFTRUE 14164
14162: GO 14167
14164: POP
// begin end ; end ;
14165: GO 14168
14167: POP
// if diff_attack > 0 then
14168: LD_EXP 18
14172: PUSH
14173: LD_INT 0
14175: GREATER
14176: IFFALSE 14288
// begin SetTech ( tech_weap1 , side , state_researched ) ;
14178: LD_INT 51
14180: PPUSH
14181: LD_VAR 0 1
14185: PPUSH
14186: LD_INT 2
14188: PPUSH
14189: CALL_OW 322
// SetTech ( tech_comp1 , side , state_researched ) ;
14193: LD_INT 57
14195: PPUSH
14196: LD_VAR 0 1
14200: PPUSH
14201: LD_INT 2
14203: PPUSH
14204: CALL_OW 322
// if diff_attack > 1 then
14208: LD_EXP 18
14212: PUSH
14213: LD_INT 1
14215: GREATER
14216: IFFALSE 14288
// begin SetTech ( tech_weap2 , side , state_researched ) ;
14218: LD_INT 52
14220: PPUSH
14221: LD_VAR 0 1
14225: PPUSH
14226: LD_INT 2
14228: PPUSH
14229: CALL_OW 322
// SetTech ( tech_comp2 , side , state_researched ) ;
14233: LD_INT 58
14235: PPUSH
14236: LD_VAR 0 1
14240: PPUSH
14241: LD_INT 2
14243: PPUSH
14244: CALL_OW 322
// if diff_attack > 2 then
14248: LD_EXP 18
14252: PUSH
14253: LD_INT 2
14255: GREATER
14256: IFFALSE 14288
// begin SetTech ( tech_weap3 , side , state_researched ) ;
14258: LD_INT 53
14260: PPUSH
14261: LD_VAR 0 1
14265: PPUSH
14266: LD_INT 2
14268: PPUSH
14269: CALL_OW 322
// SetTech ( tech_comp3 , side , state_researched ) ;
14273: LD_INT 59
14275: PPUSH
14276: LD_VAR 0 1
14280: PPUSH
14281: LD_INT 2
14283: PPUSH
14284: CALL_OW 322
// end ; end ; end ; uc_side = side ;
14288: LD_ADDR_OWVAR 20
14292: PUSH
14293: LD_VAR 0 1
14297: ST_TO_ADDR
// uc_nation = comp_nation ;
14298: LD_ADDR_OWVAR 21
14302: PUSH
14303: LD_EXP 2
14307: ST_TO_ADDR
// for i = 1 to 3 + ( Rand ( - 1 , 1 ) ) do
14308: LD_ADDR_VAR 0 4
14312: PUSH
14313: DOUBLE
14314: LD_INT 1
14316: DEC
14317: ST_TO_ADDR
14318: LD_INT 3
14320: PUSH
14321: LD_INT 1
14323: NEG
14324: PPUSH
14325: LD_INT 1
14327: PPUSH
14328: CALL_OW 12
14332: PLUS
14333: PUSH
14334: FOR_TO
14335: IFFALSE 14525
// begin hc_class = class_sniper ;
14337: LD_ADDR_OWVAR 28
14341: PUSH
14342: LD_INT 5
14344: ST_TO_ADDR
// hc_gallery =  ;
14345: LD_ADDR_OWVAR 33
14349: PUSH
14350: LD_STRING 
14352: ST_TO_ADDR
// hc_sex = sex_male ;
14353: LD_ADDR_OWVAR 27
14357: PUSH
14358: LD_INT 1
14360: ST_TO_ADDR
// hc_name =  ;
14361: LD_ADDR_OWVAR 26
14365: PUSH
14366: LD_STRING 
14368: ST_TO_ADDR
// hc_skills = [ comp_skill1 + Rand ( 0 , 1 ) , comp_skill2 + Rand ( - 3 , 0 ) , comp_skill3 + Rand ( - 3 , 0 ) , comp_skill4 + Rand ( - 3 , 0 ) ] ;
14369: LD_ADDR_OWVAR 31
14373: PUSH
14374: LD_EXP 12
14378: PUSH
14379: LD_INT 0
14381: PPUSH
14382: LD_INT 1
14384: PPUSH
14385: CALL_OW 12
14389: PLUS
14390: PUSH
14391: LD_EXP 13
14395: PUSH
14396: LD_INT 3
14398: NEG
14399: PPUSH
14400: LD_INT 0
14402: PPUSH
14403: CALL_OW 12
14407: PLUS
14408: PUSH
14409: LD_EXP 14
14413: PUSH
14414: LD_INT 3
14416: NEG
14417: PPUSH
14418: LD_INT 0
14420: PPUSH
14421: CALL_OW 12
14425: PLUS
14426: PUSH
14427: LD_EXP 15
14431: PUSH
14432: LD_INT 3
14434: NEG
14435: PPUSH
14436: LD_INT 0
14438: PPUSH
14439: CALL_OW 12
14443: PLUS
14444: PUSH
14445: EMPTY
14446: LIST
14447: LIST
14448: LIST
14449: LIST
14450: ST_TO_ADDR
// un = CreateHuman ;
14451: LD_ADDR_VAR 0 2
14455: PUSH
14456: CALL_OW 44
14460: ST_TO_ADDR
// PlaceUnitArea ( un , CompAttack , false ) ;
14461: LD_VAR 0 2
14465: PPUSH
14466: LD_INT 10
14468: PPUSH
14469: LD_INT 0
14471: PPUSH
14472: CALL_OW 49
// snipers = snipers ^ un ;
14476: LD_ADDR_EXP 99
14480: PUSH
14481: LD_EXP 99
14485: PUSH
14486: LD_VAR 0 2
14490: ADD
14491: ST_TO_ADDR
// Wait ( 1 ) ;
14492: LD_INT 1
14494: PPUSH
14495: CALL_OW 67
// ComMoveXY ( un , 142 , 55 ) ;
14499: LD_VAR 0 2
14503: PPUSH
14504: LD_INT 142
14506: PPUSH
14507: LD_INT 55
14509: PPUSH
14510: CALL_OW 111
// AddComHold ( un ) ;
14514: LD_VAR 0 2
14518: PPUSH
14519: CALL_OW 200
// end ;
14523: GO 14334
14525: POP
14526: POP
// for i = 1 to limit do
14527: LD_ADDR_VAR 0 4
14531: PUSH
14532: DOUBLE
14533: LD_INT 1
14535: DEC
14536: ST_TO_ADDR
14537: LD_VAR 0 6
14541: PUSH
14542: FOR_TO
14543: IFFALSE 14850
// begin vc_engine = engine_combustion ;
14545: LD_ADDR_OWVAR 39
14549: PUSH
14550: LD_INT 1
14552: ST_TO_ADDR
// vc_control = control_computer ;
14553: LD_ADDR_OWVAR 38
14557: PUSH
14558: LD_INT 3
14560: ST_TO_ADDR
// if diff_attack = 1 then
14561: LD_EXP 18
14565: PUSH
14566: LD_INT 1
14568: EQUAL
14569: IFFALSE 14631
// begin vc_chassis = us_medium_tracked ;
14571: LD_ADDR_OWVAR 37
14575: PUSH
14576: LD_INT 3
14578: ST_TO_ADDR
// p = Rand ( 1 , 2 ) ;
14579: LD_ADDR_VAR 0 5
14583: PUSH
14584: LD_INT 1
14586: PPUSH
14587: LD_INT 2
14589: PPUSH
14590: CALL_OW 12
14594: ST_TO_ADDR
// if p = 1 then
14595: LD_VAR 0 5
14599: PUSH
14600: LD_INT 1
14602: EQUAL
14603: IFFALSE 14613
// vc_weapon = us_gatling_gun ;
14605: LD_ADDR_OWVAR 40
14609: PUSH
14610: LD_INT 4
14612: ST_TO_ADDR
// if p = 2 then
14613: LD_VAR 0 5
14617: PUSH
14618: LD_INT 2
14620: EQUAL
14621: IFFALSE 14631
// vc_weapon = us_double_gun ;
14623: LD_ADDR_OWVAR 40
14627: PUSH
14628: LD_INT 5
14630: ST_TO_ADDR
// end ; if diff_attack = 2 then
14631: LD_EXP 18
14635: PUSH
14636: LD_INT 2
14638: EQUAL
14639: IFFALSE 14719
// begin vc_chassis = us_heavy_tracked ;
14641: LD_ADDR_OWVAR 37
14645: PUSH
14646: LD_INT 4
14648: ST_TO_ADDR
// p = Rand ( 1 , 3 ) ;
14649: LD_ADDR_VAR 0 5
14653: PUSH
14654: LD_INT 1
14656: PPUSH
14657: LD_INT 3
14659: PPUSH
14660: CALL_OW 12
14664: ST_TO_ADDR
// if p = 1 then
14665: LD_VAR 0 5
14669: PUSH
14670: LD_INT 1
14672: EQUAL
14673: IFFALSE 14683
// vc_weapon = us_laser ;
14675: LD_ADDR_OWVAR 40
14679: PUSH
14680: LD_INT 9
14682: ST_TO_ADDR
// if p = 2 then
14683: LD_VAR 0 5
14687: PUSH
14688: LD_INT 2
14690: EQUAL
14691: IFFALSE 14701
// vc_weapon = us_heavy_gun ;
14693: LD_ADDR_OWVAR 40
14697: PUSH
14698: LD_INT 6
14700: ST_TO_ADDR
// if p = 3 then
14701: LD_VAR 0 5
14705: PUSH
14706: LD_INT 3
14708: EQUAL
14709: IFFALSE 14719
// vc_weapon = us_rocket_launcher ;
14711: LD_ADDR_OWVAR 40
14715: PUSH
14716: LD_INT 7
14718: ST_TO_ADDR
// end ; if diff_attack = 3 then
14719: LD_EXP 18
14723: PUSH
14724: LD_INT 3
14726: EQUAL
14727: IFFALSE 14807
// begin vc_chassis = us_morphling ;
14729: LD_ADDR_OWVAR 37
14733: PUSH
14734: LD_INT 5
14736: ST_TO_ADDR
// p = Rand ( 1 , 3 ) ;
14737: LD_ADDR_VAR 0 5
14741: PUSH
14742: LD_INT 1
14744: PPUSH
14745: LD_INT 3
14747: PPUSH
14748: CALL_OW 12
14752: ST_TO_ADDR
// if p = 1 then
14753: LD_VAR 0 5
14757: PUSH
14758: LD_INT 1
14760: EQUAL
14761: IFFALSE 14771
// vc_weapon = us_laser ;
14763: LD_ADDR_OWVAR 40
14767: PUSH
14768: LD_INT 9
14770: ST_TO_ADDR
// if p = 2 then
14771: LD_VAR 0 5
14775: PUSH
14776: LD_INT 2
14778: EQUAL
14779: IFFALSE 14789
// vc_weapon = us_heavy_gun ;
14781: LD_ADDR_OWVAR 40
14785: PUSH
14786: LD_INT 6
14788: ST_TO_ADDR
// if p = 3 then
14789: LD_VAR 0 5
14793: PUSH
14794: LD_INT 3
14796: EQUAL
14797: IFFALSE 14807
// vc_weapon = us_rocket_launcher ;
14799: LD_ADDR_OWVAR 40
14803: PUSH
14804: LD_INT 7
14806: ST_TO_ADDR
// end ; veh = CreateVehicle ;
14807: LD_ADDR_VAR 0 3
14811: PUSH
14812: CALL_OW 45
14816: ST_TO_ADDR
// PlaceUnitArea ( veh , compattack , false ) ;
14817: LD_VAR 0 3
14821: PPUSH
14822: LD_INT 10
14824: PPUSH
14825: LD_INT 0
14827: PPUSH
14828: CALL_OW 49
// vehicles = vehicles ^ veh ;
14832: LD_ADDR_VAR 0 8
14836: PUSH
14837: LD_VAR 0 8
14841: PUSH
14842: LD_VAR 0 3
14846: ADD
14847: ST_TO_ADDR
// end ;
14848: GO 14542
14850: POP
14851: POP
// repeat begin Wait ( 0 0$01 ) ;
14852: LD_INT 35
14854: PPUSH
14855: CALL_OW 67
// end until vehicles = limit ;
14859: LD_VAR 0 8
14863: PUSH
14864: LD_VAR 0 6
14868: EQUAL
14869: IFFALSE 14852
// repeat begin for un in vehicles do
14871: LD_ADDR_VAR 0 2
14875: PUSH
14876: LD_VAR 0 8
14880: PUSH
14881: FOR_IN
14882: IFFALSE 14939
// begin pl_units := FilterAllUnits ( [ f_side , player_side ] ) ;
14884: LD_ADDR_VAR 0 9
14888: PUSH
14889: LD_INT 22
14891: PUSH
14892: LD_EXP 75
14896: PUSH
14897: EMPTY
14898: LIST
14899: LIST
14900: PPUSH
14901: CALL_OW 69
14905: ST_TO_ADDR
// ComAttackUnit ( un , NearestUnitToUnit ( pl_units , un ) ) ;
14906: LD_VAR 0 2
14910: PPUSH
14911: LD_VAR 0 9
14915: PPUSH
14916: LD_VAR 0 2
14920: PPUSH
14921: CALL_OW 74
14925: PPUSH
14926: CALL_OW 115
// Wait ( 0 0$01 ) ;
14930: LD_INT 35
14932: PPUSH
14933: CALL_OW 67
// end ;
14937: GO 14881
14939: POP
14940: POP
// end until FilterAllUnits ( [ [ f_side , side ] , [ f_control , control_computer ] ] ) = 0 ;
14941: LD_INT 22
14943: PUSH
14944: LD_VAR 0 1
14948: PUSH
14949: EMPTY
14950: LIST
14951: LIST
14952: PUSH
14953: LD_INT 33
14955: PUSH
14956: LD_INT 3
14958: PUSH
14959: EMPTY
14960: LIST
14961: LIST
14962: PUSH
14963: EMPTY
14964: LIST
14965: LIST
14966: PPUSH
14967: CALL_OW 69
14971: PUSH
14972: LD_INT 0
14974: EQUAL
14975: IFFALSE 14871
// end ; end ; end_of_file
14977: PPOPN 9
14979: END
// every 5 5$00 do
14980: GO 14982
14982: DISABLE
// begin enable ;
14983: ENABLE
// SetResourceType ( GetBase ( comp_dep ) , mat_cans , 900000 ) ;
14984: LD_EXP 23
14988: PPUSH
14989: CALL_OW 274
14993: PPUSH
14994: LD_INT 1
14996: PPUSH
14997: LD_INT 900000
14999: PPUSH
15000: CALL_OW 277
// SetResourceType ( GetBase ( comp_dep ) , mat_oil , 100000 ) ;
15004: LD_EXP 23
15008: PPUSH
15009: CALL_OW 274
15013: PPUSH
15014: LD_INT 2
15016: PPUSH
15017: LD_INT 100000
15019: PPUSH
15020: CALL_OW 277
// SetResourceType ( GetBase ( comp_dep ) , mat_siberit , 1000 ) ;
15024: LD_EXP 23
15028: PPUSH
15029: CALL_OW 274
15033: PPUSH
15034: LD_INT 3
15036: PPUSH
15037: LD_INT 1000
15039: PPUSH
15040: CALL_OW 277
// end ;
15044: END
