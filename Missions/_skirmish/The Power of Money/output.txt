// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// Init ;
  11: CALL 44 0 0
// PrepareAnimals ( 6 , 3 , 4 , apearea ) ;
  15: LD_INT 6
  17: PPUSH
  18: LD_INT 3
  20: PPUSH
  21: LD_INT 4
  23: PPUSH
  24: LD_INT 21
  26: PPUSH
  27: CALL 10803 0 4
// PrepareAmerican ;
  31: CALL 4022 0 0
// PrepareRussian ;
  35: CALL 292 0 0
// Action ;
  39: CALL 8517 0 0
// end ;
  43: END
// export conv_squad , escort , medal1 , medal2 , medal3 , path , convoy_start , dest_counter ; export riv , ar_attacks , ar_force , us_force , conv_counter , crates_counter , safeCounter ; function Init ; begin
  44: LD_INT 0
  46: PPUSH
// Difficulty := GetMultiplayerSetting ( 0 ) ;
  47: LD_ADDR_OWVAR 67
  51: PUSH
  52: LD_INT 0
  54: PPUSH
  55: CALL_OW 426
  59: ST_TO_ADDR
// medal1 := true ;
  60: LD_ADDR_EXP 3
  64: PUSH
  65: LD_INT 1
  67: ST_TO_ADDR
// medal2 := true ;
  68: LD_ADDR_EXP 4
  72: PUSH
  73: LD_INT 1
  75: ST_TO_ADDR
// medal3 := true ;
  76: LD_ADDR_EXP 5
  80: PUSH
  81: LD_INT 1
  83: ST_TO_ADDR
// path := [ pp1 , pp2 , pp3 , pp4 , conv_end ] ;
  84: LD_ADDR_EXP 6
  88: PUSH
  89: LD_INT 10
  91: PUSH
  92: LD_INT 11
  94: PUSH
  95: LD_INT 12
  97: PUSH
  98: LD_INT 13
 100: PUSH
 101: LD_INT 9
 103: PUSH
 104: EMPTY
 105: LIST
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: ST_TO_ADDR
// conv_squad := [ ] ;
 111: LD_ADDR_EXP 1
 115: PUSH
 116: EMPTY
 117: ST_TO_ADDR
// escort := [ ] ;
 118: LD_ADDR_EXP 2
 122: PUSH
 123: EMPTY
 124: ST_TO_ADDR
// riv := [ ] ;
 125: LD_ADDR_EXP 9
 129: PUSH
 130: EMPTY
 131: ST_TO_ADDR
// ar_force := [ ] ;
 132: LD_ADDR_EXP 11
 136: PUSH
 137: EMPTY
 138: ST_TO_ADDR
// ar_attacks := false ;
 139: LD_ADDR_EXP 10
 143: PUSH
 144: LD_INT 0
 146: ST_TO_ADDR
// us_force := [ ] ;
 147: LD_ADDR_EXP 12
 151: PUSH
 152: EMPTY
 153: ST_TO_ADDR
// convoy_start := false ;
 154: LD_ADDR_EXP 7
 158: PUSH
 159: LD_INT 0
 161: ST_TO_ADDR
// conv_counter := 0 ;
 162: LD_ADDR_EXP 13
 166: PUSH
 167: LD_INT 0
 169: ST_TO_ADDR
// dest_counter := 0 ;
 170: LD_ADDR_EXP 8
 174: PUSH
 175: LD_INT 0
 177: ST_TO_ADDR
// crates_counter := 1 1$10 ;
 178: LD_ADDR_EXP 14
 182: PUSH
 183: LD_INT 2450
 185: ST_TO_ADDR
// safeCounter := 0 ;
 186: LD_ADDR_EXP 15
 190: PUSH
 191: LD_INT 0
 193: ST_TO_ADDR
// end ;
 194: LD_VAR 0 1
 198: RET
// every 2 2$00 do
 199: GO 201
 201: DISABLE
// begin while ( tick <= [ 47 47$00 , 44 44$00 , 41 41$00 ] [ Difficulty ] ) do
 202: LD_OWVAR 1
 206: PUSH
 207: LD_INT 98700
 209: PUSH
 210: LD_INT 92400
 212: PUSH
 213: LD_INT 86100
 215: PUSH
 216: EMPTY
 217: LIST
 218: LIST
 219: LIST
 220: PUSH
 221: LD_OWVAR 67
 225: ARRAY
 226: LESSEQUAL
 227: IFFALSE 291
// begin Wait ( crates_counter ) ;
 229: LD_EXP 14
 233: PPUSH
 234: CALL_OW 67
// crates_counter := crates_counter + 0 0$09 ;
 238: LD_ADDR_EXP 14
 242: PUSH
 243: LD_EXP 14
 247: PUSH
 248: LD_INT 315
 250: PLUS
 251: ST_TO_ADDR
// if GetResourceArea ( crates_spawn , mat_cans ) < 30 then
 252: LD_INT 22
 254: PPUSH
 255: LD_INT 1
 257: PPUSH
 258: CALL_OW 287
 262: PUSH
 263: LD_INT 30
 265: LESS
 266: IFFALSE 289
// CreateCratesArea ( Rand ( 1 , 5 ) , crates_spawn , true ) ;
 268: LD_INT 1
 270: PPUSH
 271: LD_INT 5
 273: PPUSH
 274: CALL_OW 12
 278: PPUSH
 279: LD_INT 22
 281: PPUSH
 282: LD_INT 1
 284: PPUSH
 285: CALL_OW 55
// end ;
 289: GO 202
// end ; end_of_file
 291: END
// export Stolypin , Popov , Saseda ; export function PrepareRussian ; var un , force , i , c , skill , team ; begin
 292: LD_INT 0
 294: PPUSH
 295: PPUSH
 296: PPUSH
 297: PPUSH
 298: PPUSH
 299: PPUSH
 300: PPUSH
// uc_side := 6 ;
 301: LD_ADDR_OWVAR 20
 305: PUSH
 306: LD_INT 6
 308: ST_TO_ADDR
// uc_nation := 3 ;
 309: LD_ADDR_OWVAR 21
 313: PUSH
 314: LD_INT 3
 316: ST_TO_ADDR
// ChangeSideFog ( 3 , 6 ) ;
 317: LD_INT 3
 319: PPUSH
 320: LD_INT 6
 322: PPUSH
 323: CALL_OW 343
// Popov := NewCharacter ( Gaydar ) ;
 327: LD_ADDR_EXP 17
 331: PUSH
 332: LD_STRING Gaydar
 334: PPUSH
 335: CALL_OW 25
 339: ST_TO_ADDR
// uc_side := 7 ;
 340: LD_ADDR_OWVAR 20
 344: PUSH
 345: LD_INT 7
 347: ST_TO_ADDR
// hc_gallery := sandal ;
 348: LD_ADDR_OWVAR 33
 352: PUSH
 353: LD_STRING sandal
 355: ST_TO_ADDR
// hc_face_number := 9 ;
 356: LD_ADDR_OWVAR 34
 360: PUSH
 361: LD_INT 9
 363: ST_TO_ADDR
// hc_skills := [ 3 , 5 , 2 , 7 ] ;
 364: LD_ADDR_OWVAR 31
 368: PUSH
 369: LD_INT 3
 371: PUSH
 372: LD_INT 5
 374: PUSH
 375: LD_INT 2
 377: PUSH
 378: LD_INT 7
 380: PUSH
 381: EMPTY
 382: LIST
 383: LIST
 384: LIST
 385: LIST
 386: ST_TO_ADDR
// hc_sex := sex_male ;
 387: LD_ADDR_OWVAR 27
 391: PUSH
 392: LD_INT 1
 394: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
 395: LD_ADDR_OWVAR 29
 399: PUSH
 400: LD_INT 10
 402: PUSH
 403: LD_INT 11
 405: PUSH
 406: EMPTY
 407: LIST
 408: LIST
 409: ST_TO_ADDR
// hc_class := 4 ;
 410: LD_ADDR_OWVAR 28
 414: PUSH
 415: LD_INT 4
 417: ST_TO_ADDR
// hc_name := Fiodor Saseda ;
 418: LD_ADDR_OWVAR 26
 422: PUSH
 423: LD_STRING Fiodor Saseda
 425: ST_TO_ADDR
// Saseda := CreateHuman ;
 426: LD_ADDR_EXP 18
 430: PUSH
 431: CALL_OW 44
 435: ST_TO_ADDR
// uc_side := 3 ;
 436: LD_ADDR_OWVAR 20
 440: PUSH
 441: LD_INT 3
 443: ST_TO_ADDR
// hc_importance := 100 ;
 444: LD_ADDR_OWVAR 32
 448: PUSH
 449: LD_INT 100
 451: ST_TO_ADDR
// hc_class := 1 ;
 452: LD_ADDR_OWVAR 28
 456: PUSH
 457: LD_INT 1
 459: ST_TO_ADDR
// hc_sex := sex_male ;
 460: LD_ADDR_OWVAR 27
 464: PUSH
 465: LD_INT 1
 467: ST_TO_ADDR
// hc_skills := [ 6 , 3 , 4 , 2 ] ;
 468: LD_ADDR_OWVAR 31
 472: PUSH
 473: LD_INT 6
 475: PUSH
 476: LD_INT 3
 478: PUSH
 479: LD_INT 4
 481: PUSH
 482: LD_INT 2
 484: PUSH
 485: EMPTY
 486: LIST
 487: LIST
 488: LIST
 489: LIST
 490: ST_TO_ADDR
// hc_name := W. I. Stolypin ;
 491: LD_ADDR_OWVAR 26
 495: PUSH
 496: LD_STRING W. I. Stolypin
 498: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
 499: LD_ADDR_OWVAR 29
 503: PUSH
 504: LD_INT 10
 506: PUSH
 507: LD_INT 11
 509: PUSH
 510: EMPTY
 511: LIST
 512: LIST
 513: ST_TO_ADDR
// hc_gallery := ru ;
 514: LD_ADDR_OWVAR 33
 518: PUSH
 519: LD_STRING ru
 521: ST_TO_ADDR
// hc_face_number := 15 ;
 522: LD_ADDR_OWVAR 34
 526: PUSH
 527: LD_INT 15
 529: ST_TO_ADDR
// Stolypin := CreateHuman ;
 530: LD_ADDR_EXP 16
 534: PUSH
 535: CALL_OW 44
 539: ST_TO_ADDR
// hc_importance := 0 ;
 540: LD_ADDR_OWVAR 32
 544: PUSH
 545: LD_INT 0
 547: ST_TO_ADDR
// hc_gallery :=  ;
 548: LD_ADDR_OWVAR 33
 552: PUSH
 553: LD_STRING 
 555: ST_TO_ADDR
// hc_name :=  ;
 556: LD_ADDR_OWVAR 26
 560: PUSH
 561: LD_STRING 
 563: ST_TO_ADDR
// skill := [ 6 , 5 , 5 ] [ Difficulty ] ;
 564: LD_ADDR_VAR 0 6
 568: PUSH
 569: LD_INT 6
 571: PUSH
 572: LD_INT 5
 574: PUSH
 575: LD_INT 5
 577: PUSH
 578: EMPTY
 579: LIST
 580: LIST
 581: LIST
 582: PUSH
 583: LD_OWVAR 67
 587: ARRAY
 588: ST_TO_ADDR
// c := 1 ;
 589: LD_ADDR_VAR 0 5
 593: PUSH
 594: LD_INT 1
 596: ST_TO_ADDR
// for i = 1 to 21 do
 597: LD_ADDR_VAR 0 4
 601: PUSH
 602: DOUBLE
 603: LD_INT 1
 605: DEC
 606: ST_TO_ADDR
 607: LD_INT 21
 609: PUSH
 610: FOR_TO
 611: IFFALSE 712
// begin if i = 10 then
 613: LD_VAR 0 4
 617: PUSH
 618: LD_INT 10
 620: EQUAL
 621: IFFALSE 631
// c := 2 ;
 623: LD_ADDR_VAR 0 5
 627: PUSH
 628: LD_INT 2
 630: ST_TO_ADDR
// if i = 14 then
 631: LD_VAR 0 4
 635: PUSH
 636: LD_INT 14
 638: EQUAL
 639: IFFALSE 649
// c := 3 ;
 641: LD_ADDR_VAR 0 5
 645: PUSH
 646: LD_INT 3
 648: ST_TO_ADDR
// if i = 18 then
 649: LD_VAR 0 4
 653: PUSH
 654: LD_INT 18
 656: EQUAL
 657: IFFALSE 667
// c := 4 ;
 659: LD_ADDR_VAR 0 5
 663: PUSH
 664: LD_INT 4
 666: ST_TO_ADDR
// PrepareHuman ( false , c , skill ) ;
 667: LD_INT 0
 669: PPUSH
 670: LD_VAR 0 5
 674: PPUSH
 675: LD_VAR 0 6
 679: PPUSH
 680: CALL_OW 380
// un := CreateHuman ;
 684: LD_ADDR_VAR 0 2
 688: PUSH
 689: CALL_OW 44
 693: ST_TO_ADDR
// force := force ^ un ;
 694: LD_ADDR_VAR 0 3
 698: PUSH
 699: LD_VAR 0 3
 703: PUSH
 704: LD_VAR 0 2
 708: ADD
 709: ST_TO_ADDR
// end ;
 710: GO 610
 712: POP
 713: POP
// team := CharacterSelection ( text , [ 7 , 6 , 6 ] [ Difficulty ] , [ 7 , 6 , 6 ] [ Difficulty ] , [ sel_change_class , Stolypin , sel_changeable , sel_not_hired ] ^ force , [ [ class_soldier , 3 ] , class_mechanic , [ class_engineer , 1 ] , class_scientistic ] ) ;
 714: LD_ADDR_VAR 0 7
 718: PUSH
 719: LD_STRING text
 721: PPUSH
 722: LD_INT 7
 724: PUSH
 725: LD_INT 6
 727: PUSH
 728: LD_INT 6
 730: PUSH
 731: EMPTY
 732: LIST
 733: LIST
 734: LIST
 735: PUSH
 736: LD_OWVAR 67
 740: ARRAY
 741: PPUSH
 742: LD_INT 7
 744: PUSH
 745: LD_INT 6
 747: PUSH
 748: LD_INT 6
 750: PUSH
 751: EMPTY
 752: LIST
 753: LIST
 754: LIST
 755: PUSH
 756: LD_OWVAR 67
 760: ARRAY
 761: PPUSH
 762: LD_INT -5
 764: PUSH
 765: LD_EXP 16
 769: PUSH
 770: LD_INT -3
 772: PUSH
 773: LD_INT -2
 775: PUSH
 776: EMPTY
 777: LIST
 778: LIST
 779: LIST
 780: LIST
 781: PUSH
 782: LD_VAR 0 3
 786: ADD
 787: PPUSH
 788: LD_INT 1
 790: PUSH
 791: LD_INT 3
 793: PUSH
 794: EMPTY
 795: LIST
 796: LIST
 797: PUSH
 798: LD_INT 3
 800: PUSH
 801: LD_INT 2
 803: PUSH
 804: LD_INT 1
 806: PUSH
 807: EMPTY
 808: LIST
 809: LIST
 810: PUSH
 811: LD_INT 4
 813: PUSH
 814: EMPTY
 815: LIST
 816: LIST
 817: LIST
 818: LIST
 819: PPUSH
 820: CALL_OW 42
 824: ST_TO_ADDR
// team := team ^ Stolypin ;
 825: LD_ADDR_VAR 0 7
 829: PUSH
 830: LD_VAR 0 7
 834: PUSH
 835: LD_EXP 16
 839: ADD
 840: ST_TO_ADDR
// for i = 1 to team do
 841: LD_ADDR_VAR 0 4
 845: PUSH
 846: DOUBLE
 847: LD_INT 1
 849: DEC
 850: ST_TO_ADDR
 851: LD_VAR 0 7
 855: PUSH
 856: FOR_TO
 857: IFFALSE 882
// PlaceUnitArea ( team [ i ] , rus_start , false ) ;
 859: LD_VAR 0 7
 863: PUSH
 864: LD_VAR 0 4
 868: ARRAY
 869: PPUSH
 870: LD_INT 1
 872: PPUSH
 873: LD_INT 0
 875: PPUSH
 876: CALL_OW 49
 880: GO 856
 882: POP
 883: POP
// CenterNowOnUnits ( Stolypin ) ;
 884: LD_EXP 16
 888: PPUSH
 889: CALL_OW 87
// end ;
 893: LD_VAR 0 1
 897: RET
// export conv_ready ; export function Convoy ( type ) ; var i , veh , skill ; begin
 898: LD_INT 0
 900: PPUSH
 901: PPUSH
 902: PPUSH
 903: PPUSH
// Randomize ;
 904: CALL_OW 10
// uc_side := 6 ;
 908: LD_ADDR_OWVAR 20
 912: PUSH
 913: LD_INT 6
 915: ST_TO_ADDR
// uc_nation := 3 ;
 916: LD_ADDR_OWVAR 21
 920: PUSH
 921: LD_INT 3
 923: ST_TO_ADDR
// hc_name :=  ;
 924: LD_ADDR_OWVAR 26
 928: PUSH
 929: LD_STRING 
 931: ST_TO_ADDR
// hc_gallery :=  ;
 932: LD_ADDR_OWVAR 33
 936: PUSH
 937: LD_STRING 
 939: ST_TO_ADDR
// skill := [ 5 , 5 , 4 ] [ Difficulty ] ;
 940: LD_ADDR_VAR 0 5
 944: PUSH
 945: LD_INT 5
 947: PUSH
 948: LD_INT 5
 950: PUSH
 951: LD_INT 4
 953: PUSH
 954: EMPTY
 955: LIST
 956: LIST
 957: LIST
 958: PUSH
 959: LD_OWVAR 67
 963: ARRAY
 964: ST_TO_ADDR
// conv_ready := false ;
 965: LD_ADDR_EXP 19
 969: PUSH
 970: LD_INT 0
 972: ST_TO_ADDR
// case type of 1 :
 973: LD_VAR 0 1
 977: PUSH
 978: LD_INT 1
 980: DOUBLE
 981: EQUAL
 982: IFTRUE 986
 984: GO 1256
 986: POP
// begin if Rand ( 0 , 1 ) = 1 then
 987: LD_INT 0
 989: PPUSH
 990: LD_INT 1
 992: PPUSH
 993: CALL_OW 12
 997: PUSH
 998: LD_INT 1
1000: EQUAL
1001: IFFALSE 1007
// AddEscort ( ) ;
1003: CALL 2889 0 0
// wait ( 0 0$03 ) ;
1007: LD_INT 105
1009: PPUSH
1010: CALL_OW 67
// vc_chassis := ru_medium_wheeled ;
1014: LD_ADDR_OWVAR 37
1018: PUSH
1019: LD_INT 21
1021: ST_TO_ADDR
// vc_engine := engine_combustion ;
1022: LD_ADDR_OWVAR 39
1026: PUSH
1027: LD_INT 1
1029: ST_TO_ADDR
// vc_control := control_manual ;
1030: LD_ADDR_OWVAR 38
1034: PUSH
1035: LD_INT 1
1037: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
1038: LD_ADDR_OWVAR 40
1042: PUSH
1043: LD_INT 51
1045: ST_TO_ADDR
// vc_fuel_battery := Rand ( 50 , 99 ) ;
1046: LD_ADDR_OWVAR 41
1050: PUSH
1051: LD_INT 50
1053: PPUSH
1054: LD_INT 99
1056: PPUSH
1057: CALL_OW 12
1061: ST_TO_ADDR
// if uc_side <> 6 then
1062: LD_OWVAR 20
1066: PUSH
1067: LD_INT 6
1069: NONEQUAL
1070: IFFALSE 1080
// uc_side := 6 ;
1072: LD_ADDR_OWVAR 20
1076: PUSH
1077: LD_INT 6
1079: ST_TO_ADDR
// veh := CreateVehicle ;
1080: LD_ADDR_VAR 0 4
1084: PUSH
1085: CALL_OW 45
1089: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1090: LD_VAR 0 4
1094: PPUSH
1095: LD_INT 3
1097: PPUSH
1098: CALL_OW 233
// PlaceUnitArea ( veh , conv_start , false ) ;
1102: LD_VAR 0 4
1106: PPUSH
1107: LD_INT 8
1109: PPUSH
1110: LD_INT 0
1112: PPUSH
1113: CALL_OW 49
// PrepareHuman ( false , Rand ( 1 , 2 ) , skill ) ;
1117: LD_INT 0
1119: PPUSH
1120: LD_INT 1
1122: PPUSH
1123: LD_INT 2
1125: PPUSH
1126: CALL_OW 12
1130: PPUSH
1131: LD_VAR 0 5
1135: PPUSH
1136: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
1140: CALL_OW 44
1144: PPUSH
1145: LD_VAR 0 4
1149: PPUSH
1150: CALL_OW 52
// SetLives ( veh , Rand ( 500 , 1000 ) ) ;
1154: LD_VAR 0 4
1158: PPUSH
1159: LD_INT 500
1161: PPUSH
1162: LD_INT 1000
1164: PPUSH
1165: CALL_OW 12
1169: PPUSH
1170: CALL_OW 234
// SetCargo ( veh , Rand ( 1 , 2 ) , Rand ( 2 , 10 ) * 10 ) ;
1174: LD_VAR 0 4
1178: PPUSH
1179: LD_INT 1
1181: PPUSH
1182: LD_INT 2
1184: PPUSH
1185: CALL_OW 12
1189: PPUSH
1190: LD_INT 2
1192: PPUSH
1193: LD_INT 10
1195: PPUSH
1196: CALL_OW 12
1200: PUSH
1201: LD_INT 10
1203: MUL
1204: PPUSH
1205: CALL_OW 290
// conv_squad := Insert ( conv_squad , 1 , [ veh , 1 ] ) ;
1209: LD_ADDR_EXP 1
1213: PUSH
1214: LD_EXP 1
1218: PPUSH
1219: LD_INT 1
1221: PPUSH
1222: LD_VAR 0 4
1226: PUSH
1227: LD_INT 1
1229: PUSH
1230: EMPTY
1231: LIST
1232: LIST
1233: PPUSH
1234: CALL_OW 2
1238: ST_TO_ADDR
// Wait ( 0 0$01 ) ;
1239: LD_INT 35
1241: PPUSH
1242: CALL_OW 67
// conv_ready := true ;
1246: LD_ADDR_EXP 19
1250: PUSH
1251: LD_INT 1
1253: ST_TO_ADDR
// end ; 2 :
1254: GO 2884
1256: LD_INT 2
1258: DOUBLE
1259: EQUAL
1260: IFTRUE 1264
1262: GO 1564
1264: POP
// begin AddEscort ( ) ;
1265: CALL 2889 0 0
// wait ( 0 0$02 ) ;
1269: LD_INT 70
1271: PPUSH
1272: CALL_OW 67
// for i = 1 to 3 do
1276: LD_ADDR_VAR 0 3
1280: PUSH
1281: DOUBLE
1282: LD_INT 1
1284: DEC
1285: ST_TO_ADDR
1286: LD_INT 3
1288: PUSH
1289: FOR_TO
1290: IFFALSE 1541
// begin vc_chassis := ru_medium_wheeled ;
1292: LD_ADDR_OWVAR 37
1296: PUSH
1297: LD_INT 21
1299: ST_TO_ADDR
// vc_engine := engine_combustion ;
1300: LD_ADDR_OWVAR 39
1304: PUSH
1305: LD_INT 1
1307: ST_TO_ADDR
// vc_control := control_manual ;
1308: LD_ADDR_OWVAR 38
1312: PUSH
1313: LD_INT 1
1315: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
1316: LD_ADDR_OWVAR 40
1320: PUSH
1321: LD_INT 51
1323: ST_TO_ADDR
// vc_fuel_battery := Rand ( 50 , 99 ) ;
1324: LD_ADDR_OWVAR 41
1328: PUSH
1329: LD_INT 50
1331: PPUSH
1332: LD_INT 99
1334: PPUSH
1335: CALL_OW 12
1339: ST_TO_ADDR
// if uc_side <> 6 then
1340: LD_OWVAR 20
1344: PUSH
1345: LD_INT 6
1347: NONEQUAL
1348: IFFALSE 1358
// uc_side := 6 ;
1350: LD_ADDR_OWVAR 20
1354: PUSH
1355: LD_INT 6
1357: ST_TO_ADDR
// veh := CreateVehicle ;
1358: LD_ADDR_VAR 0 4
1362: PUSH
1363: CALL_OW 45
1367: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1368: LD_VAR 0 4
1372: PPUSH
1373: LD_INT 3
1375: PPUSH
1376: CALL_OW 233
// PlaceUnitArea ( veh , conv_start , false ) ;
1380: LD_VAR 0 4
1384: PPUSH
1385: LD_INT 8
1387: PPUSH
1388: LD_INT 0
1390: PPUSH
1391: CALL_OW 49
// PrepareHuman ( false , Rand ( 1 , 2 ) , skill ) ;
1395: LD_INT 0
1397: PPUSH
1398: LD_INT 1
1400: PPUSH
1401: LD_INT 2
1403: PPUSH
1404: CALL_OW 12
1408: PPUSH
1409: LD_VAR 0 5
1413: PPUSH
1414: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
1418: CALL_OW 44
1422: PPUSH
1423: LD_VAR 0 4
1427: PPUSH
1428: CALL_OW 52
// SetLives ( veh , Rand ( 500 , 1000 ) ) ;
1432: LD_VAR 0 4
1436: PPUSH
1437: LD_INT 500
1439: PPUSH
1440: LD_INT 1000
1442: PPUSH
1443: CALL_OW 12
1447: PPUSH
1448: CALL_OW 234
// SetCargo ( veh , Rand ( 1 , 2 ) , Rand ( 2 , 10 ) * 10 ) ;
1452: LD_VAR 0 4
1456: PPUSH
1457: LD_INT 1
1459: PPUSH
1460: LD_INT 2
1462: PPUSH
1463: CALL_OW 12
1467: PPUSH
1468: LD_INT 2
1470: PPUSH
1471: LD_INT 10
1473: PPUSH
1474: CALL_OW 12
1478: PUSH
1479: LD_INT 10
1481: MUL
1482: PPUSH
1483: CALL_OW 290
// conv_squad := Insert ( conv_squad , 1 , [ veh , 1 ] ) ;
1487: LD_ADDR_EXP 1
1491: PUSH
1492: LD_EXP 1
1496: PPUSH
1497: LD_INT 1
1499: PPUSH
1500: LD_VAR 0 4
1504: PUSH
1505: LD_INT 1
1507: PUSH
1508: EMPTY
1509: LIST
1510: LIST
1511: PPUSH
1512: CALL_OW 2
1516: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
1517: LD_VAR 0 4
1521: PPUSH
1522: LD_INT 120
1524: PPUSH
1525: LD_INT 10
1527: PPUSH
1528: CALL_OW 111
// wait ( 0 0$03 ) ;
1532: LD_INT 105
1534: PPUSH
1535: CALL_OW 67
// end ;
1539: GO 1289
1541: POP
1542: POP
// AddEscort ( ) ;
1543: CALL 2889 0 0
// wait ( 0 0$02 ) ;
1547: LD_INT 70
1549: PPUSH
1550: CALL_OW 67
// conv_ready := true ;
1554: LD_ADDR_EXP 19
1558: PUSH
1559: LD_INT 1
1561: ST_TO_ADDR
// end ; 3 :
1562: GO 2884
1564: LD_INT 3
1566: DOUBLE
1567: EQUAL
1568: IFTRUE 1572
1570: GO 1999
1572: POP
// begin AddEscort ( ) ;
1573: CALL 2889 0 0
// wait ( 0 0$02 ) ;
1577: LD_INT 70
1579: PPUSH
1580: CALL_OW 67
// for i = 1 to 3 do
1584: LD_ADDR_VAR 0 3
1588: PUSH
1589: DOUBLE
1590: LD_INT 1
1592: DEC
1593: ST_TO_ADDR
1594: LD_INT 3
1596: PUSH
1597: FOR_TO
1598: IFFALSE 1849
// begin vc_chassis := ru_medium_wheeled ;
1600: LD_ADDR_OWVAR 37
1604: PUSH
1605: LD_INT 21
1607: ST_TO_ADDR
// vc_engine := engine_combustion ;
1608: LD_ADDR_OWVAR 39
1612: PUSH
1613: LD_INT 1
1615: ST_TO_ADDR
// vc_control := control_manual ;
1616: LD_ADDR_OWVAR 38
1620: PUSH
1621: LD_INT 1
1623: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
1624: LD_ADDR_OWVAR 40
1628: PUSH
1629: LD_INT 51
1631: ST_TO_ADDR
// vc_fuel_battery := Rand ( 50 , 99 ) ;
1632: LD_ADDR_OWVAR 41
1636: PUSH
1637: LD_INT 50
1639: PPUSH
1640: LD_INT 99
1642: PPUSH
1643: CALL_OW 12
1647: ST_TO_ADDR
// if uc_side <> 6 then
1648: LD_OWVAR 20
1652: PUSH
1653: LD_INT 6
1655: NONEQUAL
1656: IFFALSE 1666
// uc_side := 6 ;
1658: LD_ADDR_OWVAR 20
1662: PUSH
1663: LD_INT 6
1665: ST_TO_ADDR
// veh := CreateVehicle ;
1666: LD_ADDR_VAR 0 4
1670: PUSH
1671: CALL_OW 45
1675: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1676: LD_VAR 0 4
1680: PPUSH
1681: LD_INT 3
1683: PPUSH
1684: CALL_OW 233
// PlaceUnitArea ( veh , conv_start , false ) ;
1688: LD_VAR 0 4
1692: PPUSH
1693: LD_INT 8
1695: PPUSH
1696: LD_INT 0
1698: PPUSH
1699: CALL_OW 49
// PrepareHuman ( false , Rand ( 1 , 2 ) , skill ) ;
1703: LD_INT 0
1705: PPUSH
1706: LD_INT 1
1708: PPUSH
1709: LD_INT 2
1711: PPUSH
1712: CALL_OW 12
1716: PPUSH
1717: LD_VAR 0 5
1721: PPUSH
1722: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
1726: CALL_OW 44
1730: PPUSH
1731: LD_VAR 0 4
1735: PPUSH
1736: CALL_OW 52
// SetLives ( veh , Rand ( 500 , 1000 ) ) ;
1740: LD_VAR 0 4
1744: PPUSH
1745: LD_INT 500
1747: PPUSH
1748: LD_INT 1000
1750: PPUSH
1751: CALL_OW 12
1755: PPUSH
1756: CALL_OW 234
// SetCargo ( veh , Rand ( 1 , 2 ) , Rand ( 2 , 10 ) * 10 ) ;
1760: LD_VAR 0 4
1764: PPUSH
1765: LD_INT 1
1767: PPUSH
1768: LD_INT 2
1770: PPUSH
1771: CALL_OW 12
1775: PPUSH
1776: LD_INT 2
1778: PPUSH
1779: LD_INT 10
1781: PPUSH
1782: CALL_OW 12
1786: PUSH
1787: LD_INT 10
1789: MUL
1790: PPUSH
1791: CALL_OW 290
// conv_squad := Insert ( conv_squad , 1 , [ veh , 1 ] ) ;
1795: LD_ADDR_EXP 1
1799: PUSH
1800: LD_EXP 1
1804: PPUSH
1805: LD_INT 1
1807: PPUSH
1808: LD_VAR 0 4
1812: PUSH
1813: LD_INT 1
1815: PUSH
1816: EMPTY
1817: LIST
1818: LIST
1819: PPUSH
1820: CALL_OW 2
1824: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
1825: LD_VAR 0 4
1829: PPUSH
1830: LD_INT 120
1832: PPUSH
1833: LD_INT 10
1835: PPUSH
1836: CALL_OW 111
// wait ( 0 0$03 ) ;
1840: LD_INT 105
1842: PPUSH
1843: CALL_OW 67
// end ;
1847: GO 1597
1849: POP
1850: POP
// for i = 1 to rand ( 2 , 4 ) do
1851: LD_ADDR_VAR 0 3
1855: PUSH
1856: DOUBLE
1857: LD_INT 1
1859: DEC
1860: ST_TO_ADDR
1861: LD_INT 2
1863: PPUSH
1864: LD_INT 4
1866: PPUSH
1867: CALL_OW 12
1871: PUSH
1872: FOR_TO
1873: IFFALSE 1980
// begin PrepareHuman ( false , 1 , skill ) ;
1875: LD_INT 0
1877: PPUSH
1878: LD_INT 1
1880: PPUSH
1881: LD_VAR 0 5
1885: PPUSH
1886: CALL_OW 380
// if uc_side <> 6 then
1890: LD_OWVAR 20
1894: PUSH
1895: LD_INT 6
1897: NONEQUAL
1898: IFFALSE 1908
// uc_side := 6 ;
1900: LD_ADDR_OWVAR 20
1904: PUSH
1905: LD_INT 6
1907: ST_TO_ADDR
// veh := CreateHuman ;
1908: LD_ADDR_VAR 0 4
1912: PUSH
1913: CALL_OW 44
1917: ST_TO_ADDR
// PlaceUnitArea ( veh , conv_start , false ) ;
1918: LD_VAR 0 4
1922: PPUSH
1923: LD_INT 8
1925: PPUSH
1926: LD_INT 0
1928: PPUSH
1929: CALL_OW 49
// escort := Insert ( escort , 1 , veh ) ;
1933: LD_ADDR_EXP 2
1937: PUSH
1938: LD_EXP 2
1942: PPUSH
1943: LD_INT 1
1945: PPUSH
1946: LD_VAR 0 4
1950: PPUSH
1951: CALL_OW 2
1955: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
1956: LD_VAR 0 4
1960: PPUSH
1961: LD_INT 120
1963: PPUSH
1964: LD_INT 10
1966: PPUSH
1967: CALL_OW 111
// Wait ( 0 0$02 ) ;
1971: LD_INT 70
1973: PPUSH
1974: CALL_OW 67
// end ;
1978: GO 1872
1980: POP
1981: POP
// Wait ( 0 0$02 ) ;
1982: LD_INT 70
1984: PPUSH
1985: CALL_OW 67
// conv_ready := true ;
1989: LD_ADDR_EXP 19
1993: PUSH
1994: LD_INT 1
1996: ST_TO_ADDR
// end ; 4 :
1997: GO 2884
1999: LD_INT 4
2001: DOUBLE
2002: EQUAL
2003: IFTRUE 2007
2005: GO 2313
2007: POP
// begin if Rand ( 0 , 1 ) = 1 then
2008: LD_INT 0
2010: PPUSH
2011: LD_INT 1
2013: PPUSH
2014: CALL_OW 12
2018: PUSH
2019: LD_INT 1
2021: EQUAL
2022: IFFALSE 2028
// AddEscort ( ) ;
2024: CALL 2889 0 0
// wait ( 0 0$02 ) ;
2028: LD_INT 70
2030: PPUSH
2031: CALL_OW 67
// for i = 1 to 5 do
2035: LD_ADDR_VAR 0 3
2039: PUSH
2040: DOUBLE
2041: LD_INT 1
2043: DEC
2044: ST_TO_ADDR
2045: LD_INT 5
2047: PUSH
2048: FOR_TO
2049: IFFALSE 2171
// begin PrepareHuman ( false , Rand ( 2 , 4 ) , skill ) ;
2051: LD_INT 0
2053: PPUSH
2054: LD_INT 2
2056: PPUSH
2057: LD_INT 4
2059: PPUSH
2060: CALL_OW 12
2064: PPUSH
2065: LD_VAR 0 5
2069: PPUSH
2070: CALL_OW 380
// if uc_side <> 6 then
2074: LD_OWVAR 20
2078: PUSH
2079: LD_INT 6
2081: NONEQUAL
2082: IFFALSE 2092
// uc_side := 6 ;
2084: LD_ADDR_OWVAR 20
2088: PUSH
2089: LD_INT 6
2091: ST_TO_ADDR
// veh := CreateHuman ;
2092: LD_ADDR_VAR 0 4
2096: PUSH
2097: CALL_OW 44
2101: ST_TO_ADDR
// PlaceUnitArea ( veh , conv_start , false ) ;
2102: LD_VAR 0 4
2106: PPUSH
2107: LD_INT 8
2109: PPUSH
2110: LD_INT 0
2112: PPUSH
2113: CALL_OW 49
// conv_squad := Insert ( conv_squad , 1 , [ veh , 1 ] ) ;
2117: LD_ADDR_EXP 1
2121: PUSH
2122: LD_EXP 1
2126: PPUSH
2127: LD_INT 1
2129: PPUSH
2130: LD_VAR 0 4
2134: PUSH
2135: LD_INT 1
2137: PUSH
2138: EMPTY
2139: LIST
2140: LIST
2141: PPUSH
2142: CALL_OW 2
2146: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
2147: LD_VAR 0 4
2151: PPUSH
2152: LD_INT 120
2154: PPUSH
2155: LD_INT 10
2157: PPUSH
2158: CALL_OW 111
// Wait ( 0 0$02 ) ;
2162: LD_INT 70
2164: PPUSH
2165: CALL_OW 67
// end ;
2169: GO 2048
2171: POP
2172: POP
// for i = 1 to 2 do
2173: LD_ADDR_VAR 0 3
2177: PUSH
2178: DOUBLE
2179: LD_INT 1
2181: DEC
2182: ST_TO_ADDR
2183: LD_INT 2
2185: PUSH
2186: FOR_TO
2187: IFFALSE 2294
// begin PrepareHuman ( false , 1 , skill ) ;
2189: LD_INT 0
2191: PPUSH
2192: LD_INT 1
2194: PPUSH
2195: LD_VAR 0 5
2199: PPUSH
2200: CALL_OW 380
// if uc_side <> 6 then
2204: LD_OWVAR 20
2208: PUSH
2209: LD_INT 6
2211: NONEQUAL
2212: IFFALSE 2222
// uc_side := 6 ;
2214: LD_ADDR_OWVAR 20
2218: PUSH
2219: LD_INT 6
2221: ST_TO_ADDR
// veh := CreateHuman ;
2222: LD_ADDR_VAR 0 4
2226: PUSH
2227: CALL_OW 44
2231: ST_TO_ADDR
// PlaceUnitArea ( veh , conv_start , false ) ;
2232: LD_VAR 0 4
2236: PPUSH
2237: LD_INT 8
2239: PPUSH
2240: LD_INT 0
2242: PPUSH
2243: CALL_OW 49
// escort := Insert ( escort , 1 , veh ) ;
2247: LD_ADDR_EXP 2
2251: PUSH
2252: LD_EXP 2
2256: PPUSH
2257: LD_INT 1
2259: PPUSH
2260: LD_VAR 0 4
2264: PPUSH
2265: CALL_OW 2
2269: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
2270: LD_VAR 0 4
2274: PPUSH
2275: LD_INT 120
2277: PPUSH
2278: LD_INT 10
2280: PPUSH
2281: CALL_OW 111
// Wait ( 0 0$02 ) ;
2285: LD_INT 70
2287: PPUSH
2288: CALL_OW 67
// end ;
2292: GO 2186
2294: POP
2295: POP
// Wait ( 0 0$02 ) ;
2296: LD_INT 70
2298: PPUSH
2299: CALL_OW 67
// conv_ready := true ;
2303: LD_ADDR_EXP 19
2307: PUSH
2308: LD_INT 1
2310: ST_TO_ADDR
// end ; 5 :
2311: GO 2884
2313: LD_INT 5
2315: DOUBLE
2316: EQUAL
2317: IFTRUE 2321
2319: GO 2883
2321: POP
// begin AddEscort ( ) ;
2322: CALL 2889 0 0
// wait ( 0 0$02 ) ;
2326: LD_INT 70
2328: PPUSH
2329: CALL_OW 67
// AddEscort ( ) ;
2333: CALL 2889 0 0
// wait ( 0 0$02 ) ;
2337: LD_INT 70
2339: PPUSH
2340: CALL_OW 67
// for i = 1 to 3 do
2344: LD_ADDR_VAR 0 3
2348: PUSH
2349: DOUBLE
2350: LD_INT 1
2352: DEC
2353: ST_TO_ADDR
2354: LD_INT 3
2356: PUSH
2357: FOR_TO
2358: IFFALSE 2609
// begin vc_chassis := ru_medium_wheeled ;
2360: LD_ADDR_OWVAR 37
2364: PUSH
2365: LD_INT 21
2367: ST_TO_ADDR
// vc_engine := engine_combustion ;
2368: LD_ADDR_OWVAR 39
2372: PUSH
2373: LD_INT 1
2375: ST_TO_ADDR
// vc_control := control_manual ;
2376: LD_ADDR_OWVAR 38
2380: PUSH
2381: LD_INT 1
2383: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
2384: LD_ADDR_OWVAR 40
2388: PUSH
2389: LD_INT 51
2391: ST_TO_ADDR
// vc_fuel_battery := Rand ( 50 , 99 ) ;
2392: LD_ADDR_OWVAR 41
2396: PUSH
2397: LD_INT 50
2399: PPUSH
2400: LD_INT 99
2402: PPUSH
2403: CALL_OW 12
2407: ST_TO_ADDR
// if uc_side <> 6 then
2408: LD_OWVAR 20
2412: PUSH
2413: LD_INT 6
2415: NONEQUAL
2416: IFFALSE 2426
// uc_side := 6 ;
2418: LD_ADDR_OWVAR 20
2422: PUSH
2423: LD_INT 6
2425: ST_TO_ADDR
// veh := CreateVehicle ;
2426: LD_ADDR_VAR 0 4
2430: PUSH
2431: CALL_OW 45
2435: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
2436: LD_VAR 0 4
2440: PPUSH
2441: LD_INT 3
2443: PPUSH
2444: CALL_OW 233
// PlaceUnitArea ( veh , conv_start , false ) ;
2448: LD_VAR 0 4
2452: PPUSH
2453: LD_INT 8
2455: PPUSH
2456: LD_INT 0
2458: PPUSH
2459: CALL_OW 49
// PrepareHuman ( false , Rand ( 1 , 2 ) , skill ) ;
2463: LD_INT 0
2465: PPUSH
2466: LD_INT 1
2468: PPUSH
2469: LD_INT 2
2471: PPUSH
2472: CALL_OW 12
2476: PPUSH
2477: LD_VAR 0 5
2481: PPUSH
2482: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
2486: CALL_OW 44
2490: PPUSH
2491: LD_VAR 0 4
2495: PPUSH
2496: CALL_OW 52
// SetLives ( veh , Rand ( 500 , 1000 ) ) ;
2500: LD_VAR 0 4
2504: PPUSH
2505: LD_INT 500
2507: PPUSH
2508: LD_INT 1000
2510: PPUSH
2511: CALL_OW 12
2515: PPUSH
2516: CALL_OW 234
// SetCargo ( veh , Rand ( 1 , 2 ) , Rand ( 2 , 10 ) * 10 ) ;
2520: LD_VAR 0 4
2524: PPUSH
2525: LD_INT 1
2527: PPUSH
2528: LD_INT 2
2530: PPUSH
2531: CALL_OW 12
2535: PPUSH
2536: LD_INT 2
2538: PPUSH
2539: LD_INT 10
2541: PPUSH
2542: CALL_OW 12
2546: PUSH
2547: LD_INT 10
2549: MUL
2550: PPUSH
2551: CALL_OW 290
// conv_squad := Insert ( conv_squad , 1 , [ veh , 1 ] ) ;
2555: LD_ADDR_EXP 1
2559: PUSH
2560: LD_EXP 1
2564: PPUSH
2565: LD_INT 1
2567: PPUSH
2568: LD_VAR 0 4
2572: PUSH
2573: LD_INT 1
2575: PUSH
2576: EMPTY
2577: LIST
2578: LIST
2579: PPUSH
2580: CALL_OW 2
2584: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
2585: LD_VAR 0 4
2589: PPUSH
2590: LD_INT 120
2592: PPUSH
2593: LD_INT 10
2595: PPUSH
2596: CALL_OW 111
// Wait ( 0 0$02 ) ;
2600: LD_INT 70
2602: PPUSH
2603: CALL_OW 67
// end ;
2607: GO 2357
2609: POP
2610: POP
// if Rand ( 0 , 1 ) = 1 then
2611: LD_INT 0
2613: PPUSH
2614: LD_INT 1
2616: PPUSH
2617: CALL_OW 12
2621: PUSH
2622: LD_INT 1
2624: EQUAL
2625: IFFALSE 2661
// begin vc_chassis := ru_medium_tracked ;
2627: LD_ADDR_OWVAR 37
2631: PUSH
2632: LD_INT 22
2634: ST_TO_ADDR
// vc_engine := engine_combustion ;
2635: LD_ADDR_OWVAR 39
2639: PUSH
2640: LD_INT 1
2642: ST_TO_ADDR
// vc_control := control_manual ;
2643: LD_ADDR_OWVAR 38
2647: PUSH
2648: LD_INT 1
2650: ST_TO_ADDR
// vc_weapon := ru_crane ;
2651: LD_ADDR_OWVAR 40
2655: PUSH
2656: LD_INT 52
2658: ST_TO_ADDR
// end else
2659: GO 2693
// begin vc_chassis := ru_heavy_wheeled ;
2661: LD_ADDR_OWVAR 37
2665: PUSH
2666: LD_INT 23
2668: ST_TO_ADDR
// vc_engine := engine_combustion ;
2669: LD_ADDR_OWVAR 39
2673: PUSH
2674: LD_INT 1
2676: ST_TO_ADDR
// vc_control := control_manual ;
2677: LD_ADDR_OWVAR 38
2681: PUSH
2682: LD_INT 1
2684: ST_TO_ADDR
// vc_weapon := ru_bulldozer ;
2685: LD_ADDR_OWVAR 40
2689: PUSH
2690: LD_INT 53
2692: ST_TO_ADDR
// end ; vc_fuel_battery := Rand ( 50 , 99 ) ;
2693: LD_ADDR_OWVAR 41
2697: PUSH
2698: LD_INT 50
2700: PPUSH
2701: LD_INT 99
2703: PPUSH
2704: CALL_OW 12
2708: ST_TO_ADDR
// if uc_side <> 6 then
2709: LD_OWVAR 20
2713: PUSH
2714: LD_INT 6
2716: NONEQUAL
2717: IFFALSE 2727
// uc_side := 6 ;
2719: LD_ADDR_OWVAR 20
2723: PUSH
2724: LD_INT 6
2726: ST_TO_ADDR
// veh := CreateVehicle ;
2727: LD_ADDR_VAR 0 4
2731: PUSH
2732: CALL_OW 45
2736: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
2737: LD_VAR 0 4
2741: PPUSH
2742: LD_INT 3
2744: PPUSH
2745: CALL_OW 233
// PlaceUnitArea ( veh , conv_start , false ) ;
2749: LD_VAR 0 4
2753: PPUSH
2754: LD_INT 8
2756: PPUSH
2757: LD_INT 0
2759: PPUSH
2760: CALL_OW 49
// PrepareHuman ( false , Rand ( 1 , 2 ) , skill ) ;
2764: LD_INT 0
2766: PPUSH
2767: LD_INT 1
2769: PPUSH
2770: LD_INT 2
2772: PPUSH
2773: CALL_OW 12
2777: PPUSH
2778: LD_VAR 0 5
2782: PPUSH
2783: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
2787: CALL_OW 44
2791: PPUSH
2792: LD_VAR 0 4
2796: PPUSH
2797: CALL_OW 52
// SetLives ( veh , Rand ( 500 , 1000 ) ) ;
2801: LD_VAR 0 4
2805: PPUSH
2806: LD_INT 500
2808: PPUSH
2809: LD_INT 1000
2811: PPUSH
2812: CALL_OW 12
2816: PPUSH
2817: CALL_OW 234
// conv_squad := Insert ( conv_squad , 1 , [ veh , 1 ] ) ;
2821: LD_ADDR_EXP 1
2825: PUSH
2826: LD_EXP 1
2830: PPUSH
2831: LD_INT 1
2833: PPUSH
2834: LD_VAR 0 4
2838: PUSH
2839: LD_INT 1
2841: PUSH
2842: EMPTY
2843: LIST
2844: LIST
2845: PPUSH
2846: CALL_OW 2
2850: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
2851: LD_VAR 0 4
2855: PPUSH
2856: LD_INT 120
2858: PPUSH
2859: LD_INT 10
2861: PPUSH
2862: CALL_OW 111
// Wait ( 0 0$02 ) ;
2866: LD_INT 70
2868: PPUSH
2869: CALL_OW 67
// conv_ready := true ;
2873: LD_ADDR_EXP 19
2877: PUSH
2878: LD_INT 1
2880: ST_TO_ADDR
// end ; end ;
2881: GO 2884
2883: POP
// end ;
2884: LD_VAR 0 2
2888: RET
// export function AddEscort ( ) ; var veh , skill ; begin
2889: LD_INT 0
2891: PPUSH
2892: PPUSH
2893: PPUSH
// skill := [ 5 , 5 , 4 ] [ Difficulty ] ;
2894: LD_ADDR_VAR 0 3
2898: PUSH
2899: LD_INT 5
2901: PUSH
2902: LD_INT 5
2904: PUSH
2905: LD_INT 4
2907: PUSH
2908: EMPTY
2909: LIST
2910: LIST
2911: LIST
2912: PUSH
2913: LD_OWVAR 67
2917: ARRAY
2918: ST_TO_ADDR
// uc_side := 6 ;
2919: LD_ADDR_OWVAR 20
2923: PUSH
2924: LD_INT 6
2926: ST_TO_ADDR
// uc_nation := 3 ;
2927: LD_ADDR_OWVAR 21
2931: PUSH
2932: LD_INT 3
2934: ST_TO_ADDR
// vc_chassis := ru_medium_wheeled ;
2935: LD_ADDR_OWVAR 37
2939: PUSH
2940: LD_INT 21
2942: ST_TO_ADDR
// vc_engine := engine_combustion ;
2943: LD_ADDR_OWVAR 39
2947: PUSH
2948: LD_INT 1
2950: ST_TO_ADDR
// vc_control := control_manual ;
2951: LD_ADDR_OWVAR 38
2955: PUSH
2956: LD_INT 1
2958: ST_TO_ADDR
// vc_weapon := [ ru_gun , ru_heavy_machine_gun ] [ Rand ( 1 , 2 ) ] ;
2959: LD_ADDR_OWVAR 40
2963: PUSH
2964: LD_INT 44
2966: PUSH
2967: LD_INT 42
2969: PUSH
2970: EMPTY
2971: LIST
2972: LIST
2973: PUSH
2974: LD_INT 1
2976: PPUSH
2977: LD_INT 2
2979: PPUSH
2980: CALL_OW 12
2984: ARRAY
2985: ST_TO_ADDR
// vc_fuel_battery := Rand ( 50 , 99 ) ;
2986: LD_ADDR_OWVAR 41
2990: PUSH
2991: LD_INT 50
2993: PPUSH
2994: LD_INT 99
2996: PPUSH
2997: CALL_OW 12
3001: ST_TO_ADDR
// veh := CreateVehicle ;
3002: LD_ADDR_VAR 0 2
3006: PUSH
3007: CALL_OW 45
3011: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3012: LD_VAR 0 2
3016: PPUSH
3017: LD_INT 3
3019: PPUSH
3020: CALL_OW 233
// PlaceUnitArea ( veh , conv_start , false ) ;
3024: LD_VAR 0 2
3028: PPUSH
3029: LD_INT 8
3031: PPUSH
3032: LD_INT 0
3034: PPUSH
3035: CALL_OW 49
// PrepareHuman ( false , 3 , skill ) ;
3039: LD_INT 0
3041: PPUSH
3042: LD_INT 3
3044: PPUSH
3045: LD_VAR 0 3
3049: PPUSH
3050: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
3054: CALL_OW 44
3058: PPUSH
3059: LD_VAR 0 2
3063: PPUSH
3064: CALL_OW 52
// SetLives ( veh , Rand ( 500 , 1000 ) ) ;
3068: LD_VAR 0 2
3072: PPUSH
3073: LD_INT 500
3075: PPUSH
3076: LD_INT 1000
3078: PPUSH
3079: CALL_OW 12
3083: PPUSH
3084: CALL_OW 234
// escort := Insert ( escort , 1 , veh ) ;
3088: LD_ADDR_EXP 2
3092: PUSH
3093: LD_EXP 2
3097: PPUSH
3098: LD_INT 1
3100: PPUSH
3101: LD_VAR 0 2
3105: PPUSH
3106: CALL_OW 2
3110: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
3111: LD_VAR 0 2
3115: PPUSH
3116: LD_INT 120
3118: PPUSH
3119: LD_INT 10
3121: PPUSH
3122: CALL_OW 111
// end ;
3126: LD_VAR 0 1
3130: RET
// every 4 trigger conv_ready and FilterAllUnits ( [ f_side , 6 ] ) do var i , j ;
3131: LD_EXP 19
3135: PUSH
3136: LD_INT 22
3138: PUSH
3139: LD_INT 6
3141: PUSH
3142: EMPTY
3143: LIST
3144: LIST
3145: PPUSH
3146: CALL_OW 69
3150: AND
3151: IFFALSE 3926
3153: GO 3155
3155: DISABLE
3156: LD_INT 0
3158: PPUSH
3159: PPUSH
// begin enable ;
3160: ENABLE
// if conv_squad then
3161: LD_EXP 1
3165: IFFALSE 3436
// for i = conv_squad downto 1 do
3167: LD_ADDR_VAR 0 1
3171: PUSH
3172: DOUBLE
3173: LD_EXP 1
3177: INC
3178: ST_TO_ADDR
3179: LD_INT 1
3181: PUSH
3182: FOR_DOWNTO
3183: IFFALSE 3434
// begin if IsInArea ( conv_squad [ i ] [ 1 ] , conv_end ) then
3185: LD_EXP 1
3189: PUSH
3190: LD_VAR 0 1
3194: ARRAY
3195: PUSH
3196: LD_INT 1
3198: ARRAY
3199: PPUSH
3200: LD_INT 9
3202: PPUSH
3203: CALL_OW 308
3207: IFFALSE 3284
// begin for j in FilterUnitsInArea ( conv_end , [ f_side , 6 ] ) do
3209: LD_ADDR_VAR 0 2
3213: PUSH
3214: LD_INT 9
3216: PPUSH
3217: LD_INT 22
3219: PUSH
3220: LD_INT 6
3222: PUSH
3223: EMPTY
3224: LIST
3225: LIST
3226: PPUSH
3227: CALL_OW 70
3231: PUSH
3232: FOR_IN
3233: IFFALSE 3260
// begin safeCounter := safeCounter + 1 ;
3235: LD_ADDR_EXP 15
3239: PUSH
3240: LD_EXP 15
3244: PUSH
3245: LD_INT 1
3247: PLUS
3248: ST_TO_ADDR
// RemoveUnit ( j ) ;
3249: LD_VAR 0 2
3253: PPUSH
3254: CALL_OW 64
// end ;
3258: GO 3232
3260: POP
3261: POP
// conv_squad := Delete ( conv_squad , i ) ;
3262: LD_ADDR_EXP 1
3266: PUSH
3267: LD_EXP 1
3271: PPUSH
3272: LD_VAR 0 1
3276: PPUSH
3277: CALL_OW 3
3281: ST_TO_ADDR
// break ;
3282: GO 3434
// end ; if IsInArea ( conv_squad [ i ] [ 1 ] , path [ conv_squad [ i ] [ 2 ] ] ) then
3284: LD_EXP 1
3288: PUSH
3289: LD_VAR 0 1
3293: ARRAY
3294: PUSH
3295: LD_INT 1
3297: ARRAY
3298: PPUSH
3299: LD_EXP 6
3303: PUSH
3304: LD_EXP 1
3308: PUSH
3309: LD_VAR 0 1
3313: ARRAY
3314: PUSH
3315: LD_INT 2
3317: ARRAY
3318: ARRAY
3319: PPUSH
3320: CALL_OW 308
3324: IFFALSE 3370
// conv_squad := Replace2 ( conv_squad , i , 2 , conv_squad [ i ] [ 2 ] + 1 ) else
3326: LD_ADDR_EXP 1
3330: PUSH
3331: LD_EXP 1
3335: PPUSH
3336: LD_VAR 0 1
3340: PPUSH
3341: LD_INT 2
3343: PPUSH
3344: LD_EXP 1
3348: PUSH
3349: LD_VAR 0 1
3353: ARRAY
3354: PUSH
3355: LD_INT 2
3357: ARRAY
3358: PUSH
3359: LD_INT 1
3361: PLUS
3362: PPUSH
3363: CALL 10422 0 4
3367: ST_TO_ADDR
3368: GO 3432
// if not HasTask ( conv_squad [ i ] [ 1 ] ) then
3370: LD_EXP 1
3374: PUSH
3375: LD_VAR 0 1
3379: ARRAY
3380: PUSH
3381: LD_INT 1
3383: ARRAY
3384: PPUSH
3385: CALL_OW 314
3389: NOT
3390: IFFALSE 3432
// ComMoveToArea ( conv_squad [ i ] [ 1 ] , path [ conv_squad [ i ] [ 2 ] ] ) ;
3392: LD_EXP 1
3396: PUSH
3397: LD_VAR 0 1
3401: ARRAY
3402: PUSH
3403: LD_INT 1
3405: ARRAY
3406: PPUSH
3407: LD_EXP 6
3411: PUSH
3412: LD_EXP 1
3416: PUSH
3417: LD_VAR 0 1
3421: ARRAY
3422: PUSH
3423: LD_INT 2
3425: ARRAY
3426: ARRAY
3427: PPUSH
3428: CALL_OW 113
// end ;
3432: GO 3182
3434: POP
3435: POP
// if escort then
3436: LD_EXP 2
3440: IFFALSE 3779
// for i = escort downto 1 do
3442: LD_ADDR_VAR 0 1
3446: PUSH
3447: DOUBLE
3448: LD_EXP 2
3452: INC
3453: ST_TO_ADDR
3454: LD_INT 1
3456: PUSH
3457: FOR_DOWNTO
3458: IFFALSE 3777
// begin if IsInArea ( escort [ i ] , conv_end ) then
3460: LD_EXP 2
3464: PUSH
3465: LD_VAR 0 1
3469: ARRAY
3470: PPUSH
3471: LD_INT 9
3473: PPUSH
3474: CALL_OW 308
3478: IFFALSE 3555
// begin for j in FilterUnitsInArea ( conv_end , [ f_side , 6 ] ) do
3480: LD_ADDR_VAR 0 2
3484: PUSH
3485: LD_INT 9
3487: PPUSH
3488: LD_INT 22
3490: PUSH
3491: LD_INT 6
3493: PUSH
3494: EMPTY
3495: LIST
3496: LIST
3497: PPUSH
3498: CALL_OW 70
3502: PUSH
3503: FOR_IN
3504: IFFALSE 3531
// begin safeCounter := safeCounter + 1 ;
3506: LD_ADDR_EXP 15
3510: PUSH
3511: LD_EXP 15
3515: PUSH
3516: LD_INT 1
3518: PLUS
3519: ST_TO_ADDR
// RemoveUnit ( j ) ;
3520: LD_VAR 0 2
3524: PPUSH
3525: CALL_OW 64
// end ;
3529: GO 3503
3531: POP
3532: POP
// escort := Delete ( escort , i ) ;
3533: LD_ADDR_EXP 2
3537: PUSH
3538: LD_EXP 2
3542: PPUSH
3543: LD_VAR 0 1
3547: PPUSH
3548: CALL_OW 3
3552: ST_TO_ADDR
// break ;
3553: GO 3777
// end ; if FindTarget ( escort [ i ] ) and GetDistUnits ( escort [ i ] , FindTarget ( escort [ i ] ) ) < 13 then
3555: LD_EXP 2
3559: PUSH
3560: LD_VAR 0 1
3564: ARRAY
3565: PPUSH
3566: CALL 10679 0 1
3570: PUSH
3571: LD_EXP 2
3575: PUSH
3576: LD_VAR 0 1
3580: ARRAY
3581: PPUSH
3582: LD_EXP 2
3586: PUSH
3587: LD_VAR 0 1
3591: ARRAY
3592: PPUSH
3593: CALL 10679 0 1
3597: PPUSH
3598: CALL_OW 296
3602: PUSH
3603: LD_INT 13
3605: LESS
3606: AND
3607: IFFALSE 3642
// ComAttackUnit ( escort [ i ] , FindTarget ( escort [ i ] ) ) else
3609: LD_EXP 2
3613: PUSH
3614: LD_VAR 0 1
3618: ARRAY
3619: PPUSH
3620: LD_EXP 2
3624: PUSH
3625: LD_VAR 0 1
3629: ARRAY
3630: PPUSH
3631: CALL 10679 0 1
3635: PPUSH
3636: CALL_OW 115
3640: GO 3775
// if conv_squad and GetDistUnitXY ( escort [ i ] , 64 , 117 ) > 35 and not HasTask ( escort [ i ] ) then
3642: LD_EXP 1
3646: PUSH
3647: LD_EXP 2
3651: PUSH
3652: LD_VAR 0 1
3656: ARRAY
3657: PPUSH
3658: LD_INT 64
3660: PPUSH
3661: LD_INT 117
3663: PPUSH
3664: CALL_OW 297
3668: PUSH
3669: LD_INT 35
3671: GREATER
3672: AND
3673: PUSH
3674: LD_EXP 2
3678: PUSH
3679: LD_VAR 0 1
3683: ARRAY
3684: PPUSH
3685: CALL_OW 314
3689: NOT
3690: AND
3691: IFFALSE 3757
// begin if GetDistUnits ( escort [ i ] , conv_squad [ 1 ] [ 1 ] ) > 6 then
3693: LD_EXP 2
3697: PUSH
3698: LD_VAR 0 1
3702: ARRAY
3703: PPUSH
3704: LD_EXP 1
3708: PUSH
3709: LD_INT 1
3711: ARRAY
3712: PUSH
3713: LD_INT 1
3715: ARRAY
3716: PPUSH
3717: CALL_OW 296
3721: PUSH
3722: LD_INT 6
3724: GREATER
3725: IFFALSE 3755
// ComMoveUnit ( escort [ i ] , conv_squad [ 1 ] [ 1 ] ) end else
3727: LD_EXP 2
3731: PUSH
3732: LD_VAR 0 1
3736: ARRAY
3737: PPUSH
3738: LD_EXP 1
3742: PUSH
3743: LD_INT 1
3745: ARRAY
3746: PUSH
3747: LD_INT 1
3749: ARRAY
3750: PPUSH
3751: CALL_OW 112
3755: GO 3775
// ComMoveToArea ( escort [ i ] , conv_end ) ;
3757: LD_EXP 2
3761: PUSH
3762: LD_VAR 0 1
3766: ARRAY
3767: PPUSH
3768: LD_INT 9
3770: PPUSH
3771: CALL_OW 113
// end ;
3775: GO 3457
3777: POP
3778: POP
// if FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) then
3779: LD_INT 22
3781: PUSH
3782: LD_INT 6
3784: PUSH
3785: EMPTY
3786: LIST
3787: LIST
3788: PUSH
3789: LD_INT 21
3791: PUSH
3792: LD_INT 1
3794: PUSH
3795: EMPTY
3796: LIST
3797: LIST
3798: PUSH
3799: EMPTY
3800: LIST
3801: LIST
3802: PPUSH
3803: CALL_OW 69
3807: IFFALSE 3926
// for j in FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) do
3809: LD_ADDR_VAR 0 2
3813: PUSH
3814: LD_INT 22
3816: PUSH
3817: LD_INT 6
3819: PUSH
3820: EMPTY
3821: LIST
3822: LIST
3823: PUSH
3824: LD_INT 21
3826: PUSH
3827: LD_INT 1
3829: PUSH
3830: EMPTY
3831: LIST
3832: LIST
3833: PUSH
3834: EMPTY
3835: LIST
3836: LIST
3837: PPUSH
3838: CALL_OW 69
3842: PUSH
3843: FOR_IN
3844: IFFALSE 3924
// begin if not HasTask ( j ) and not IsInArea ( j , conv_end ) then
3846: LD_VAR 0 2
3850: PPUSH
3851: CALL_OW 314
3855: NOT
3856: PUSH
3857: LD_VAR 0 2
3861: PPUSH
3862: LD_INT 9
3864: PPUSH
3865: CALL_OW 308
3869: NOT
3870: AND
3871: IFFALSE 3885
// ComMoveToArea ( j , conv_end ) ;
3873: LD_VAR 0 2
3877: PPUSH
3878: LD_INT 9
3880: PPUSH
3881: CALL_OW 113
// if IsInArea ( j , conv_end ) then
3885: LD_VAR 0 2
3889: PPUSH
3890: LD_INT 9
3892: PPUSH
3893: CALL_OW 308
3897: IFFALSE 3922
// begin safeCounter := safeCounter + 1 ;
3899: LD_ADDR_EXP 15
3903: PUSH
3904: LD_EXP 15
3908: PUSH
3909: LD_INT 1
3911: PLUS
3912: ST_TO_ADDR
// RemoveUnit ( j ) ;
3913: LD_VAR 0 2
3917: PPUSH
3918: CALL_OW 64
// end ; end ;
3922: GO 3843
3924: POP
3925: POP
// end ;
3926: PPOPN 2
3928: END
// every 0 0$01 trigger UnitFilter ( [ escort , conv_squad ] , [ f_side , 3 ] ) do var i ;
3929: LD_EXP 2
3933: PUSH
3934: LD_EXP 1
3938: PUSH
3939: EMPTY
3940: LIST
3941: LIST
3942: PPUSH
3943: LD_INT 22
3945: PUSH
3946: LD_INT 3
3948: PUSH
3949: EMPTY
3950: LIST
3951: LIST
3952: PPUSH
3953: CALL_OW 72
3957: IFFALSE 4019
3959: GO 3961
3961: DISABLE
3962: LD_INT 0
3964: PPUSH
// begin enable ;
3965: ENABLE
// for i in UnitFilter ( [ escort , conv_squad ] , [ f_side , 3 ] ) do
3966: LD_ADDR_VAR 0 1
3970: PUSH
3971: LD_EXP 2
3975: PUSH
3976: LD_EXP 1
3980: PUSH
3981: EMPTY
3982: LIST
3983: LIST
3984: PPUSH
3985: LD_INT 22
3987: PUSH
3988: LD_INT 3
3990: PUSH
3991: EMPTY
3992: LIST
3993: LIST
3994: PPUSH
3995: CALL_OW 72
3999: PUSH
4000: FOR_IN
4001: IFFALSE 4017
// SetSide ( i , 6 ) ;
4003: LD_VAR 0 1
4007: PPUSH
4008: LD_INT 6
4010: PPUSH
4011: CALL_OW 235
4015: GO 4000
4017: POP
4018: POP
// end ; end_of_file
4019: PPOPN 1
4021: END
// export Collins ; export us_alert , us_retreat , us_patrol , us_count ; export function PrepareAmerican ; var i , un , skill , towers ; begin
4022: LD_INT 0
4024: PPUSH
4025: PPUSH
4026: PPUSH
4027: PPUSH
4028: PPUSH
// uc_side := 1 ;
4029: LD_ADDR_OWVAR 20
4033: PUSH
4034: LD_INT 1
4036: ST_TO_ADDR
// uc_nation := 1 ;
4037: LD_ADDR_OWVAR 21
4041: PUSH
4042: LD_INT 1
4044: ST_TO_ADDR
// us_alert := false ;
4045: LD_ADDR_EXP 21
4049: PUSH
4050: LD_INT 0
4052: ST_TO_ADDR
// us_retreat := false ;
4053: LD_ADDR_EXP 22
4057: PUSH
4058: LD_INT 0
4060: ST_TO_ADDR
// us_patrol := false ;
4061: LD_ADDR_EXP 23
4065: PUSH
4066: LD_INT 0
4068: ST_TO_ADDR
// us_count := 0 ;
4069: LD_ADDR_EXP 24
4073: PUSH
4074: LD_INT 0
4076: ST_TO_ADDR
// skill := [ 5 , 6 , 7 ] [ Difficulty ] ;
4077: LD_ADDR_VAR 0 4
4081: PUSH
4082: LD_INT 5
4084: PUSH
4085: LD_INT 6
4087: PUSH
4088: LD_INT 7
4090: PUSH
4091: EMPTY
4092: LIST
4093: LIST
4094: LIST
4095: PUSH
4096: LD_OWVAR 67
4100: ARRAY
4101: ST_TO_ADDR
// hc_class := 1 ;
4102: LD_ADDR_OWVAR 28
4106: PUSH
4107: LD_INT 1
4109: ST_TO_ADDR
// hc_sex := sex_male ;
4110: LD_ADDR_OWVAR 27
4114: PUSH
4115: LD_INT 1
4117: ST_TO_ADDR
// hc_skills := [ 6 , 3 , 4 , 2 ] ;
4118: LD_ADDR_OWVAR 31
4122: PUSH
4123: LD_INT 6
4125: PUSH
4126: LD_INT 3
4128: PUSH
4129: LD_INT 4
4131: PUSH
4132: LD_INT 2
4134: PUSH
4135: EMPTY
4136: LIST
4137: LIST
4138: LIST
4139: LIST
4140: ST_TO_ADDR
// hc_name := Jack Collins ;
4141: LD_ADDR_OWVAR 26
4145: PUSH
4146: LD_STRING Jack Collins
4148: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
4149: LD_ADDR_OWVAR 29
4153: PUSH
4154: LD_INT 11
4156: PUSH
4157: LD_INT 11
4159: PUSH
4160: EMPTY
4161: LIST
4162: LIST
4163: ST_TO_ADDR
// hc_gallery :=  ;
4164: LD_ADDR_OWVAR 33
4168: PUSH
4169: LD_STRING 
4171: ST_TO_ADDR
// Collins := CreateHuman ;
4172: LD_ADDR_EXP 20
4176: PUSH
4177: CALL_OW 44
4181: ST_TO_ADDR
// PlaceHumanInUnit ( Collins , us_depot ) ;
4182: LD_EXP 20
4186: PPUSH
4187: LD_INT 50
4189: PPUSH
4190: CALL_OW 52
// hc_name :=  ;
4194: LD_ADDR_OWVAR 26
4198: PUSH
4199: LD_STRING 
4201: ST_TO_ADDR
// if Difficulty > 1 then
4202: LD_OWVAR 67
4206: PUSH
4207: LD_INT 1
4209: GREATER
4210: IFFALSE 4264
// begin bc_type := b_bunker ;
4212: LD_ADDR_OWVAR 42
4216: PUSH
4217: LD_INT 32
4219: ST_TO_ADDR
// bc_level := 5 ;
4220: LD_ADDR_OWVAR 43
4224: PUSH
4225: LD_INT 5
4227: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 40 , 33 , 2 ) ;
4228: LD_INT 40
4230: PPUSH
4231: LD_INT 33
4233: PPUSH
4234: LD_INT 2
4236: PPUSH
4237: CALL_OW 47
// if Difficulty > 2 then
4241: LD_OWVAR 67
4245: PUSH
4246: LD_INT 2
4248: GREATER
4249: IFFALSE 4264
// CreateAndPlaceBuildingXYD ( 41 , 42 , 0 ) ;
4251: LD_INT 41
4253: PPUSH
4254: LD_INT 42
4256: PPUSH
4257: LD_INT 0
4259: PPUSH
4260: CALL_OW 47
// end ; PrepareHuman ( false , 2 , skill ) ;
4264: LD_INT 0
4266: PPUSH
4267: LD_INT 2
4269: PPUSH
4270: LD_VAR 0 4
4274: PPUSH
4275: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , us_depot ) ;
4279: CALL_OW 44
4283: PPUSH
4284: LD_INT 50
4286: PPUSH
4287: CALL_OW 52
// PrepareHuman ( false , 3 , skill ) ;
4291: LD_INT 0
4293: PPUSH
4294: LD_INT 3
4296: PPUSH
4297: LD_VAR 0 4
4301: PPUSH
4302: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , us_fac ) ;
4306: CALL_OW 44
4310: PPUSH
4311: LD_INT 56
4313: PPUSH
4314: CALL_OW 52
// PlaceHumanInUnit ( CreateHuman , us_fac ) ;
4318: CALL_OW 44
4322: PPUSH
4323: LD_INT 56
4325: PPUSH
4326: CALL_OW 52
// PrepareHuman ( false , 4 , skill ) ;
4330: LD_INT 0
4332: PPUSH
4333: LD_INT 4
4335: PPUSH
4336: LD_VAR 0 4
4340: PPUSH
4341: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , us_lab ) ;
4345: CALL_OW 44
4349: PPUSH
4350: LD_INT 63
4352: PPUSH
4353: CALL_OW 52
// PrepareHuman ( false , 1 , skill ) ;
4357: LD_INT 0
4359: PPUSH
4360: LD_INT 1
4362: PPUSH
4363: LD_VAR 0 4
4367: PPUSH
4368: CALL_OW 380
// un := CreateHuman ;
4372: LD_ADDR_VAR 0 3
4376: PUSH
4377: CALL_OW 44
4381: ST_TO_ADDR
// SetDir ( un , 4 ) ;
4382: LD_VAR 0 3
4386: PPUSH
4387: LD_INT 4
4389: PPUSH
4390: CALL_OW 233
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) [ 1 ] ) ;
4394: LD_VAR 0 3
4398: PPUSH
4399: LD_INT 22
4401: PUSH
4402: LD_INT 1
4404: PUSH
4405: EMPTY
4406: LIST
4407: LIST
4408: PUSH
4409: LD_INT 30
4411: PUSH
4412: LD_INT 31
4414: PUSH
4415: EMPTY
4416: LIST
4417: LIST
4418: PUSH
4419: EMPTY
4420: LIST
4421: LIST
4422: PPUSH
4423: CALL_OW 69
4427: PUSH
4428: LD_INT 1
4430: ARRAY
4431: PPUSH
4432: CALL_OW 52
// towers := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) ;
4436: LD_ADDR_VAR 0 5
4440: PUSH
4441: LD_INT 22
4443: PUSH
4444: LD_INT 1
4446: PUSH
4447: EMPTY
4448: LIST
4449: LIST
4450: PUSH
4451: LD_INT 30
4453: PUSH
4454: LD_INT 32
4456: PUSH
4457: EMPTY
4458: LIST
4459: LIST
4460: PUSH
4461: EMPTY
4462: LIST
4463: LIST
4464: PPUSH
4465: CALL_OW 69
4469: ST_TO_ADDR
// for i in towers do
4470: LD_ADDR_VAR 0 2
4474: PUSH
4475: LD_VAR 0 5
4479: PUSH
4480: FOR_IN
4481: IFFALSE 4549
// begin PrepareHuman ( false , 1 , skill ) ;
4483: LD_INT 0
4485: PPUSH
4486: LD_INT 1
4488: PPUSH
4489: LD_VAR 0 4
4493: PPUSH
4494: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
4498: CALL_OW 44
4502: PPUSH
4503: LD_VAR 0 2
4507: PPUSH
4508: CALL_OW 52
// PlaceWeaponTurret ( i , [ us_gatling_gun , us_light_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
4512: LD_VAR 0 2
4516: PPUSH
4517: LD_INT 4
4519: PUSH
4520: LD_INT 3
4522: PUSH
4523: LD_INT 5
4525: PUSH
4526: EMPTY
4527: LIST
4528: LIST
4529: LIST
4530: PUSH
4531: LD_INT 1
4533: PPUSH
4534: LD_INT 3
4536: PPUSH
4537: CALL_OW 12
4541: ARRAY
4542: PPUSH
4543: CALL_OW 431
// end ;
4547: GO 4480
4549: POP
4550: POP
// PrepareHuman ( false , 1 , skill ) ;
4551: LD_INT 0
4553: PPUSH
4554: LD_INT 1
4556: PPUSH
4557: LD_VAR 0 4
4561: PPUSH
4562: CALL_OW 380
// us_patrol := CreateHuman ;
4566: LD_ADDR_EXP 23
4570: PUSH
4571: CALL_OW 44
4575: ST_TO_ADDR
// PlaceUnitXY ( us_patrol , 12 , 5 , false ) ;
4576: LD_EXP 23
4580: PPUSH
4581: LD_INT 12
4583: PPUSH
4584: LD_INT 5
4586: PPUSH
4587: LD_INT 0
4589: PPUSH
4590: CALL_OW 48
// end ;
4594: LD_VAR 0 1
4598: RET
// every 0 0$01 trigger us_count >= [ 3 , 4 , 5 ] [ Difficulty ] do
4599: LD_EXP 24
4603: PUSH
4604: LD_INT 3
4606: PUSH
4607: LD_INT 4
4609: PUSH
4610: LD_INT 5
4612: PUSH
4613: EMPTY
4614: LIST
4615: LIST
4616: LIST
4617: PUSH
4618: LD_OWVAR 67
4622: ARRAY
4623: GREATEREQUAL
4624: IFFALSE 4649
4626: GO 4628
4628: DISABLE
// begin Say ( Collins , DPM_C2 ) ;
4629: LD_EXP 20
4633: PPUSH
4634: LD_STRING DPM_C2
4636: PPUSH
4637: CALL_OW 88
// us_retreat := true ;
4641: LD_ADDR_EXP 22
4645: PUSH
4646: LD_INT 1
4648: ST_TO_ADDR
// end ;
4649: END
// every 10 10$00 trigger not us_alert do var R ;
4650: LD_EXP 21
4654: NOT
4655: IFFALSE 4729
4657: GO 4659
4659: DISABLE
4660: LD_INT 0
4662: PPUSH
// begin uc_side := 1 ;
4663: LD_ADDR_OWVAR 20
4667: PUSH
4668: LD_INT 1
4670: ST_TO_ADDR
// uc_nation := 1 ;
4671: LD_ADDR_OWVAR 21
4675: PUSH
4676: LD_INT 1
4678: ST_TO_ADDR
// PrepareHuman ( false , 1 , 0 ) ;
4679: LD_INT 0
4681: PPUSH
4682: LD_INT 1
4684: PPUSH
4685: LD_INT 0
4687: PPUSH
4688: CALL_OW 380
// R := CreateHuman ;
4692: LD_ADDR_VAR 0 1
4696: PUSH
4697: CALL_OW 44
4701: ST_TO_ADDR
// SayRadio ( R , DPM_R1 ) ;
4702: LD_VAR 0 1
4706: PPUSH
4707: LD_STRING DPM_R1
4709: PPUSH
4710: CALL_OW 94
// Wait ( 0 0$03 ) ;
4714: LD_INT 105
4716: PPUSH
4717: CALL_OW 67
// us_retreat := true ;
4721: LD_ADDR_EXP 22
4725: PUSH
4726: LD_INT 1
4728: ST_TO_ADDR
// end ;
4729: PPOPN 1
4731: END
// every 0 0$01 trigger us_alert do var i ;
4732: LD_EXP 21
4736: IFFALSE 4996
4738: GO 4740
4740: DISABLE
4741: LD_INT 0
4743: PPUSH
// begin Say ( Collins , DPM_C1 ) ;
4744: LD_EXP 20
4748: PPUSH
4749: LD_STRING DPM_C1
4751: PPUSH
4752: CALL_OW 88
// if UnitsInside ( us_fac ) then
4756: LD_INT 56
4758: PPUSH
4759: CALL_OW 313
4763: IFFALSE 4818
// for i in UnitsInside ( us_fac ) do
4765: LD_ADDR_VAR 0 1
4769: PUSH
4770: LD_INT 56
4772: PPUSH
4773: CALL_OW 313
4777: PUSH
4778: FOR_IN
4779: IFFALSE 4816
// begin ComExitBuilding ( i ) ;
4781: LD_VAR 0 1
4785: PPUSH
4786: CALL_OW 122
// AddComEnterUnit ( i , us_arm ) ;
4790: LD_VAR 0 1
4794: PPUSH
4795: LD_INT 69
4797: PPUSH
4798: CALL_OW 180
// AddComChangeProfession ( i , 1 ) ;
4802: LD_VAR 0 1
4806: PPUSH
4807: LD_INT 1
4809: PPUSH
4810: CALL_OW 183
// end ;
4814: GO 4778
4816: POP
4817: POP
// ComExitBuilding ( Collins ) ;
4818: LD_EXP 20
4822: PPUSH
4823: CALL_OW 122
// AddComEnterUnit ( Collins , us_arm ) ;
4827: LD_EXP 20
4831: PPUSH
4832: LD_INT 69
4834: PPUSH
4835: CALL_OW 180
// ComExitBuilding ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) [ 1 ] ) ;
4839: LD_INT 22
4841: PUSH
4842: LD_INT 1
4844: PUSH
4845: EMPTY
4846: LIST
4847: LIST
4848: PUSH
4849: LD_INT 25
4851: PUSH
4852: LD_INT 2
4854: PUSH
4855: EMPTY
4856: LIST
4857: LIST
4858: PUSH
4859: EMPTY
4860: LIST
4861: LIST
4862: PPUSH
4863: CALL_OW 69
4867: PUSH
4868: LD_INT 1
4870: ARRAY
4871: PPUSH
4872: CALL_OW 122
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) [ 1 ] , 67 , 52 ) ;
4876: LD_INT 22
4878: PUSH
4879: LD_INT 1
4881: PUSH
4882: EMPTY
4883: LIST
4884: LIST
4885: PUSH
4886: LD_INT 25
4888: PUSH
4889: LD_INT 2
4891: PUSH
4892: EMPTY
4893: LIST
4894: LIST
4895: PUSH
4896: EMPTY
4897: LIST
4898: LIST
4899: PPUSH
4900: CALL_OW 69
4904: PUSH
4905: LD_INT 1
4907: ARRAY
4908: PPUSH
4909: LD_INT 67
4911: PPUSH
4912: LD_INT 52
4914: PPUSH
4915: CALL_OW 171
// ComExitBuilding ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) [ 1 ] ) ;
4919: LD_INT 22
4921: PUSH
4922: LD_INT 1
4924: PUSH
4925: EMPTY
4926: LIST
4927: LIST
4928: PUSH
4929: LD_INT 25
4931: PUSH
4932: LD_INT 4
4934: PUSH
4935: EMPTY
4936: LIST
4937: LIST
4938: PUSH
4939: EMPTY
4940: LIST
4941: LIST
4942: PPUSH
4943: CALL_OW 69
4947: PUSH
4948: LD_INT 1
4950: ARRAY
4951: PPUSH
4952: CALL_OW 122
// AddComEnterUnit ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) [ 1 ] , us_arm ) ;
4956: LD_INT 22
4958: PUSH
4959: LD_INT 1
4961: PUSH
4962: EMPTY
4963: LIST
4964: LIST
4965: PUSH
4966: LD_INT 25
4968: PUSH
4969: LD_INT 4
4971: PUSH
4972: EMPTY
4973: LIST
4974: LIST
4975: PUSH
4976: EMPTY
4977: LIST
4978: LIST
4979: PPUSH
4980: CALL_OW 69
4984: PUSH
4985: LD_INT 1
4987: ARRAY
4988: PPUSH
4989: LD_INT 69
4991: PPUSH
4992: CALL_OW 180
// end ;
4996: PPOPN 1
4998: END
// every 3 3$00 trigger not us_alert and GetSide ( us_fac ) = 1 do
4999: LD_EXP 21
5003: NOT
5004: PUSH
5005: LD_INT 56
5007: PPUSH
5008: CALL_OW 255
5012: PUSH
5013: LD_INT 1
5015: EQUAL
5016: AND
5017: IFFALSE 5060
5019: GO 5021
5021: DISABLE
// begin AddComConstruct ( us_fac , us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun ) ;
5022: LD_INT 56
5024: PPUSH
5025: LD_INT 2
5027: PPUSH
5028: LD_INT 1
5030: PPUSH
5031: LD_INT 1
5033: PPUSH
5034: LD_INT 4
5036: PPUSH
5037: CALL_OW 185
// AddComConstruct ( us_fac , us_medium_tracked , engine_solar , control_manual , us_double_gun ) ;
5041: LD_INT 56
5043: PPUSH
5044: LD_INT 3
5046: PPUSH
5047: LD_INT 2
5049: PPUSH
5050: LD_INT 1
5052: PPUSH
5053: LD_INT 5
5055: PPUSH
5056: CALL_OW 185
// end ;
5060: END
// every 0 0$01 trigger us_patrol do
5061: LD_EXP 23
5065: IFFALSE 5113
5067: GO 5069
5069: DISABLE
// SetPatrol ( us_patrol , [ 12 , 5 , 56 , 4 , 94 , 34 , 92 , 108 ] ) ;
5070: LD_EXP 23
5074: PPUSH
5075: LD_INT 12
5077: PUSH
5078: LD_INT 5
5080: PUSH
5081: LD_INT 56
5083: PUSH
5084: LD_INT 4
5086: PUSH
5087: LD_INT 94
5089: PUSH
5090: LD_INT 34
5092: PUSH
5093: LD_INT 92
5095: PUSH
5096: LD_INT 108
5098: PUSH
5099: EMPTY
5100: LIST
5101: LIST
5102: LIST
5103: LIST
5104: LIST
5105: LIST
5106: LIST
5107: LIST
5108: PPUSH
5109: CALL 5114 0 2
5113: END
// export function SetPatrol ( un , points ) ; var s , i , turn ; begin
5114: LD_INT 0
5116: PPUSH
5117: PPUSH
5118: PPUSH
5119: PPUSH
// s = 1 ;
5120: LD_ADDR_VAR 0 4
5124: PUSH
5125: LD_INT 1
5127: ST_TO_ADDR
// turn := true ;
5128: LD_ADDR_VAR 0 6
5132: PUSH
5133: LD_INT 1
5135: ST_TO_ADDR
// while ( un and not us_alert ) do
5136: LD_VAR 0 1
5140: PUSH
5141: LD_EXP 21
5145: NOT
5146: AND
5147: IFFALSE 5326
// begin wait ( 35 ) ;
5149: LD_INT 35
5151: PPUSH
5152: CALL_OW 67
// if not HasTask ( un ) then
5156: LD_VAR 0 1
5160: PPUSH
5161: CALL_OW 314
5165: NOT
5166: IFFALSE 5285
// begin ComMoveXY ( un , points [ s ] , points [ s + 1 ] ) ;
5168: LD_VAR 0 1
5172: PPUSH
5173: LD_VAR 0 2
5177: PUSH
5178: LD_VAR 0 4
5182: ARRAY
5183: PPUSH
5184: LD_VAR 0 2
5188: PUSH
5189: LD_VAR 0 4
5193: PUSH
5194: LD_INT 1
5196: PLUS
5197: ARRAY
5198: PPUSH
5199: CALL_OW 111
// if s + 2 > points then
5203: LD_VAR 0 4
5207: PUSH
5208: LD_INT 2
5210: PLUS
5211: PUSH
5212: LD_VAR 0 2
5216: GREATER
5217: IFFALSE 5227
// turn := false ;
5219: LD_ADDR_VAR 0 6
5223: PUSH
5224: LD_INT 0
5226: ST_TO_ADDR
// if s - 2 < 1 then
5227: LD_VAR 0 4
5231: PUSH
5232: LD_INT 2
5234: MINUS
5235: PUSH
5236: LD_INT 1
5238: LESS
5239: IFFALSE 5249
// turn := true ;
5241: LD_ADDR_VAR 0 6
5245: PUSH
5246: LD_INT 1
5248: ST_TO_ADDR
// if turn then
5249: LD_VAR 0 6
5253: IFFALSE 5271
// s := s + 2 else
5255: LD_ADDR_VAR 0 4
5259: PUSH
5260: LD_VAR 0 4
5264: PUSH
5265: LD_INT 2
5267: PLUS
5268: ST_TO_ADDR
5269: GO 5285
// s := s - 2 ;
5271: LD_ADDR_VAR 0 4
5275: PUSH
5276: LD_VAR 0 4
5280: PUSH
5281: LD_INT 2
5283: MINUS
5284: ST_TO_ADDR
// end ; if GetLives ( un ) < 1000 or See ( 3 , un ) then
5285: LD_VAR 0 1
5289: PPUSH
5290: CALL_OW 256
5294: PUSH
5295: LD_INT 1000
5297: LESS
5298: PUSH
5299: LD_INT 3
5301: PPUSH
5302: LD_VAR 0 1
5306: PPUSH
5307: CALL_OW 292
5311: OR
5312: IFFALSE 5324
// begin us_alert := true ;
5314: LD_ADDR_EXP 21
5318: PUSH
5319: LD_INT 1
5321: ST_TO_ADDR
// break ;
5322: GO 5326
// end ; end ;
5324: GO 5136
// ComEnterUnit ( un , us_arm ) ;
5326: LD_VAR 0 1
5330: PPUSH
5331: LD_INT 69
5333: PPUSH
5334: CALL_OW 120
// end ;
5338: LD_VAR 0 3
5342: RET
// every 0 0$01 trigger us_retreat do var i , point ;
5343: LD_EXP 22
5347: IFFALSE 5522
5349: GO 5351
5351: DISABLE
5352: LD_INT 0
5354: PPUSH
5355: PPUSH
// begin point := false ;
5356: LD_ADDR_VAR 0 2
5360: PUSH
5361: LD_INT 0
5363: ST_TO_ADDR
// if FilterUnitsInArea ( zone1 , [ f_side , 3 ] ) = 0 then
5364: LD_INT 5
5366: PPUSH
5367: LD_INT 22
5369: PUSH
5370: LD_INT 3
5372: PUSH
5373: EMPTY
5374: LIST
5375: LIST
5376: PPUSH
5377: CALL_OW 70
5381: PUSH
5382: LD_INT 0
5384: EQUAL
5385: IFFALSE 5397
// point := us_ret1 else
5387: LD_ADDR_VAR 0 2
5391: PUSH
5392: LD_INT 3
5394: ST_TO_ADDR
5395: GO 5438
// if FilterUnitsInArea ( zone1 , [ f_side , 3 ] ) = 0 then
5397: LD_INT 5
5399: PPUSH
5400: LD_INT 22
5402: PUSH
5403: LD_INT 3
5405: PUSH
5406: EMPTY
5407: LIST
5408: LIST
5409: PPUSH
5410: CALL_OW 70
5414: PUSH
5415: LD_INT 0
5417: EQUAL
5418: IFFALSE 5430
// point := us_ret2 else
5420: LD_ADDR_VAR 0 2
5424: PUSH
5425: LD_INT 2
5427: ST_TO_ADDR
5428: GO 5438
// point := us_ret3 ;
5430: LD_ADDR_VAR 0 2
5434: PUSH
5435: LD_INT 4
5437: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
5438: LD_ADDR_VAR 0 1
5442: PUSH
5443: LD_INT 22
5445: PUSH
5446: LD_INT 1
5448: PUSH
5449: EMPTY
5450: LIST
5451: LIST
5452: PUSH
5453: LD_INT 21
5455: PUSH
5456: LD_INT 1
5458: PUSH
5459: EMPTY
5460: LIST
5461: LIST
5462: PUSH
5463: EMPTY
5464: LIST
5465: LIST
5466: PPUSH
5467: CALL_OW 69
5471: PUSH
5472: FOR_IN
5473: IFFALSE 5520
// begin if IsInUnit ( i ) then
5475: LD_VAR 0 1
5479: PPUSH
5480: CALL_OW 310
5484: IFFALSE 5504
// begin ComExitBuilding ( i ) ;
5486: LD_VAR 0 1
5490: PPUSH
5491: CALL_OW 122
// ComExitVehicle ( i ) ;
5495: LD_VAR 0 1
5499: PPUSH
5500: CALL_OW 121
// end ; AddComMoveToArea ( i , point ) ;
5504: LD_VAR 0 1
5508: PPUSH
5509: LD_VAR 0 2
5513: PPUSH
5514: CALL_OW 173
// end ;
5518: GO 5472
5520: POP
5521: POP
// end ;
5522: PPOPN 2
5524: END
// every 10 trigger us_retreat and FilterUnitsInArea ( us_ret1 , [ f_side , 1 ] ) do
5525: LD_EXP 22
5529: PUSH
5530: LD_INT 3
5532: PPUSH
5533: LD_INT 22
5535: PUSH
5536: LD_INT 1
5538: PUSH
5539: EMPTY
5540: LIST
5541: LIST
5542: PPUSH
5543: CALL_OW 70
5547: AND
5548: IFFALSE 5594
5550: GO 5552
5552: DISABLE
// begin enable ;
5553: ENABLE
// RemoveUnit ( FilterUnitsInArea ( us_ret1 , [ f_side , 1 ] ) [ 1 ] ) ;
5554: LD_INT 3
5556: PPUSH
5557: LD_INT 22
5559: PUSH
5560: LD_INT 1
5562: PUSH
5563: EMPTY
5564: LIST
5565: LIST
5566: PPUSH
5567: CALL_OW 70
5571: PUSH
5572: LD_INT 1
5574: ARRAY
5575: PPUSH
5576: CALL_OW 64
// if medal1 then
5580: LD_EXP 3
5584: IFFALSE 5594
// medal1 := false ;
5586: LD_ADDR_EXP 3
5590: PUSH
5591: LD_INT 0
5593: ST_TO_ADDR
// end ;
5594: END
// every 10 trigger us_retreat and FilterUnitsInArea ( us_ret2 , [ f_side , 1 ] ) do
5595: LD_EXP 22
5599: PUSH
5600: LD_INT 2
5602: PPUSH
5603: LD_INT 22
5605: PUSH
5606: LD_INT 1
5608: PUSH
5609: EMPTY
5610: LIST
5611: LIST
5612: PPUSH
5613: CALL_OW 70
5617: AND
5618: IFFALSE 5664
5620: GO 5622
5622: DISABLE
// begin enable ;
5623: ENABLE
// RemoveUnit ( FilterUnitsInArea ( us_ret2 , [ f_side , 1 ] ) [ 1 ] ) ;
5624: LD_INT 2
5626: PPUSH
5627: LD_INT 22
5629: PUSH
5630: LD_INT 1
5632: PUSH
5633: EMPTY
5634: LIST
5635: LIST
5636: PPUSH
5637: CALL_OW 70
5641: PUSH
5642: LD_INT 1
5644: ARRAY
5645: PPUSH
5646: CALL_OW 64
// if medal1 then
5650: LD_EXP 3
5654: IFFALSE 5664
// medal1 := false ;
5656: LD_ADDR_EXP 3
5660: PUSH
5661: LD_INT 0
5663: ST_TO_ADDR
// end ;
5664: END
// every 10 trigger us_retreat and FilterUnitsInArea ( us_ret3 , [ f_side , 1 ] ) do
5665: LD_EXP 22
5669: PUSH
5670: LD_INT 4
5672: PPUSH
5673: LD_INT 22
5675: PUSH
5676: LD_INT 1
5678: PUSH
5679: EMPTY
5680: LIST
5681: LIST
5682: PPUSH
5683: CALL_OW 70
5687: AND
5688: IFFALSE 5734
5690: GO 5692
5692: DISABLE
// begin enable ;
5693: ENABLE
// RemoveUnit ( FilterUnitsInArea ( us_ret3 , [ f_side , 1 ] ) [ 1 ] ) ;
5694: LD_INT 4
5696: PPUSH
5697: LD_INT 22
5699: PUSH
5700: LD_INT 1
5702: PUSH
5703: EMPTY
5704: LIST
5705: LIST
5706: PPUSH
5707: CALL_OW 70
5711: PUSH
5712: LD_INT 1
5714: ARRAY
5715: PPUSH
5716: CALL_OW 64
// if medal1 then
5720: LD_EXP 3
5724: IFFALSE 5734
// medal1 := false ;
5726: LD_ADDR_EXP 3
5730: PUSH
5731: LD_INT 0
5733: ST_TO_ADDR
// end ;
5734: END
// every 0 0$03 trigger FilterAllUnits ( [ f_side , 1 ] ) = 0 do
5735: LD_INT 22
5737: PUSH
5738: LD_INT 1
5740: PUSH
5741: EMPTY
5742: LIST
5743: LIST
5744: PPUSH
5745: CALL_OW 69
5749: PUSH
5750: LD_INT 0
5752: EQUAL
5753: IFFALSE 5766
5755: GO 5757
5757: DISABLE
// us_retreat := false ;
5758: LD_ADDR_EXP 22
5762: PUSH
5763: LD_INT 0
5765: ST_TO_ADDR
5766: END
// export function CounterAttack ; var i , j , un , skill ; begin
5767: LD_INT 0
5769: PPUSH
5770: PPUSH
5771: PPUSH
5772: PPUSH
5773: PPUSH
// uc_side := 1 ;
5774: LD_ADDR_OWVAR 20
5778: PUSH
5779: LD_INT 1
5781: ST_TO_ADDR
// uc_nation := 1 ;
5782: LD_ADDR_OWVAR 21
5786: PUSH
5787: LD_INT 1
5789: ST_TO_ADDR
// skill := [ 4 , 5 , 5 ] [ Difficulty ] ;
5790: LD_ADDR_VAR 0 5
5794: PUSH
5795: LD_INT 4
5797: PUSH
5798: LD_INT 5
5800: PUSH
5801: LD_INT 5
5803: PUSH
5804: EMPTY
5805: LIST
5806: LIST
5807: LIST
5808: PUSH
5809: LD_OWVAR 67
5813: ARRAY
5814: ST_TO_ADDR
// for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
5815: LD_ADDR_VAR 0 2
5819: PUSH
5820: DOUBLE
5821: LD_INT 1
5823: DEC
5824: ST_TO_ADDR
5825: LD_INT 4
5827: PUSH
5828: LD_INT 5
5830: PUSH
5831: LD_INT 6
5833: PUSH
5834: EMPTY
5835: LIST
5836: LIST
5837: LIST
5838: PUSH
5839: LD_OWVAR 67
5843: ARRAY
5844: PUSH
5845: FOR_TO
5846: IFFALSE 6062
// begin uc_side := 1 ;
5848: LD_ADDR_OWVAR 20
5852: PUSH
5853: LD_INT 1
5855: ST_TO_ADDR
// uc_nation := 1 ;
5856: LD_ADDR_OWVAR 21
5860: PUSH
5861: LD_INT 1
5863: ST_TO_ADDR
// vc_chassis := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked ] [ Rand ( 1 , 3 ) ] ;
5864: LD_ADDR_OWVAR 37
5868: PUSH
5869: LD_INT 2
5871: PUSH
5872: LD_INT 3
5874: PUSH
5875: LD_INT 4
5877: PUSH
5878: EMPTY
5879: LIST
5880: LIST
5881: LIST
5882: PUSH
5883: LD_INT 1
5885: PPUSH
5886: LD_INT 3
5888: PPUSH
5889: CALL_OW 12
5893: ARRAY
5894: ST_TO_ADDR
// vc_engine := engine_combustion ;
5895: LD_ADDR_OWVAR 39
5899: PUSH
5900: LD_INT 1
5902: ST_TO_ADDR
// vc_control := control_manual ;
5903: LD_ADDR_OWVAR 38
5907: PUSH
5908: LD_INT 1
5910: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_double_gun , us_light_gun ] [ Rand ( 1 , 3 ) ] ;
5911: LD_ADDR_OWVAR 40
5915: PUSH
5916: LD_INT 4
5918: PUSH
5919: LD_INT 5
5921: PUSH
5922: LD_INT 3
5924: PUSH
5925: EMPTY
5926: LIST
5927: LIST
5928: LIST
5929: PUSH
5930: LD_INT 1
5932: PPUSH
5933: LD_INT 3
5935: PPUSH
5936: CALL_OW 12
5940: ARRAY
5941: ST_TO_ADDR
// vc_fuel_battery := Rand ( 88 , 99 ) ;
5942: LD_ADDR_OWVAR 41
5946: PUSH
5947: LD_INT 88
5949: PPUSH
5950: LD_INT 99
5952: PPUSH
5953: CALL_OW 12
5957: ST_TO_ADDR
// un := CreateVehicle ;
5958: LD_ADDR_VAR 0 4
5962: PUSH
5963: CALL_OW 45
5967: ST_TO_ADDR
// PlaceUnitXY ( un , 64 , 117 , false ) ;
5968: LD_VAR 0 4
5972: PPUSH
5973: LD_INT 64
5975: PPUSH
5976: LD_INT 117
5978: PPUSH
5979: LD_INT 0
5981: PPUSH
5982: CALL_OW 48
// PrepareHuman ( false , 3 , skill ) ;
5986: LD_INT 0
5988: PPUSH
5989: LD_INT 3
5991: PPUSH
5992: LD_VAR 0 5
5996: PPUSH
5997: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
6001: CALL_OW 44
6005: PPUSH
6006: LD_VAR 0 4
6010: PPUSH
6011: CALL_OW 52
// us_force := Insert ( us_force , 1 , un ) ;
6015: LD_ADDR_EXP 12
6019: PUSH
6020: LD_EXP 12
6024: PPUSH
6025: LD_INT 1
6027: PPUSH
6028: LD_VAR 0 4
6032: PPUSH
6033: CALL_OW 2
6037: ST_TO_ADDR
// ComMoveXY ( un , 60 , 109 ) ;
6038: LD_VAR 0 4
6042: PPUSH
6043: LD_INT 60
6045: PPUSH
6046: LD_INT 109
6048: PPUSH
6049: CALL_OW 111
// Wait ( 0 0$02 ) ;
6053: LD_INT 70
6055: PPUSH
6056: CALL_OW 67
// end ;
6060: GO 5845
6062: POP
6063: POP
// RemoveSeeing ( 62 , 113 , 3 ) ;
6064: LD_INT 62
6066: PPUSH
6067: LD_INT 113
6069: PPUSH
6070: LD_INT 3
6072: PPUSH
6073: CALL_OW 331
// while ( FilterAllUnits ( [ f_side , 1 ] ) ) do
6077: LD_INT 22
6079: PUSH
6080: LD_INT 1
6082: PUSH
6083: EMPTY
6084: LIST
6085: LIST
6086: PPUSH
6087: CALL_OW 69
6091: IFFALSE 6292
// begin Wait ( 0 0$01 ) ;
6093: LD_INT 35
6095: PPUSH
6096: CALL_OW 67
// for i = 1 to us_force do
6100: LD_ADDR_VAR 0 2
6104: PUSH
6105: DOUBLE
6106: LD_INT 1
6108: DEC
6109: ST_TO_ADDR
6110: LD_EXP 12
6114: PUSH
6115: FOR_TO
6116: IFFALSE 6151
// ComAttackUnit ( us_force [ i ] , FindTarget ( us_force [ i ] ) ) ;
6118: LD_EXP 12
6122: PUSH
6123: LD_VAR 0 2
6127: ARRAY
6128: PPUSH
6129: LD_EXP 12
6133: PUSH
6134: LD_VAR 0 2
6138: ARRAY
6139: PPUSH
6140: CALL 10679 0 1
6144: PPUSH
6145: CALL_OW 115
6149: GO 6115
6151: POP
6152: POP
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 3 ] , [ f_not , [ f_driving ] ] ] ) then
6153: LD_INT 22
6155: PUSH
6156: LD_INT 1
6158: PUSH
6159: EMPTY
6160: LIST
6161: LIST
6162: PUSH
6163: LD_INT 25
6165: PUSH
6166: LD_INT 3
6168: PUSH
6169: EMPTY
6170: LIST
6171: LIST
6172: PUSH
6173: LD_INT 3
6175: PUSH
6176: LD_INT 55
6178: PUSH
6179: EMPTY
6180: LIST
6181: PUSH
6182: EMPTY
6183: LIST
6184: LIST
6185: PUSH
6186: EMPTY
6187: LIST
6188: LIST
6189: LIST
6190: PPUSH
6191: CALL_OW 69
6195: IFFALSE 6290
// for j in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 3 ] , [ f_not , [ f_driving ] ] ] ) do
6197: LD_ADDR_VAR 0 3
6201: PUSH
6202: LD_INT 22
6204: PUSH
6205: LD_INT 1
6207: PUSH
6208: EMPTY
6209: LIST
6210: LIST
6211: PUSH
6212: LD_INT 25
6214: PUSH
6215: LD_INT 3
6217: PUSH
6218: EMPTY
6219: LIST
6220: LIST
6221: PUSH
6222: LD_INT 3
6224: PUSH
6225: LD_INT 55
6227: PUSH
6228: EMPTY
6229: LIST
6230: PUSH
6231: EMPTY
6232: LIST
6233: LIST
6234: PUSH
6235: EMPTY
6236: LIST
6237: LIST
6238: LIST
6239: PPUSH
6240: CALL_OW 69
6244: PUSH
6245: FOR_IN
6246: IFFALSE 6288
// if not IsInArea ( j , conv_end ) then
6248: LD_VAR 0 3
6252: PPUSH
6253: LD_INT 9
6255: PPUSH
6256: CALL_OW 308
6260: NOT
6261: IFFALSE 6277
// ComMoveToArea ( j , conv_end ) else
6263: LD_VAR 0 3
6267: PPUSH
6268: LD_INT 9
6270: PPUSH
6271: CALL_OW 113
6275: GO 6286
// RemoveUnit ( j ) ;
6277: LD_VAR 0 3
6281: PPUSH
6282: CALL_OW 64
6286: GO 6245
6288: POP
6289: POP
// end ;
6290: GO 6077
// end ; end_of_file
6292: LD_VAR 0 1
6296: RET
// export function PrepareArabian ; begin
6297: LD_INT 0
6299: PPUSH
// RobertFarmer ;
6300: CALL 6321 0 0
// PrepareHovercrafts ;
6304: CALL 7318 0 0
// ar_attacks := true ;
6308: LD_ADDR_EXP 10
6312: PUSH
6313: LD_INT 1
6315: ST_TO_ADDR
// end ;
6316: LD_VAR 0 1
6320: RET
// export Farmer ; export function RobertFarmer ; begin
6321: LD_INT 0
6323: PPUSH
// uc_side := 2 ;
6324: LD_ADDR_OWVAR 20
6328: PUSH
6329: LD_INT 2
6331: ST_TO_ADDR
// uc_nation := 2 ;
6332: LD_ADDR_OWVAR 21
6336: PUSH
6337: LD_INT 2
6339: ST_TO_ADDR
// Farmer := NewCharacter ( Farmer ) ;
6340: LD_ADDR_EXP 25
6344: PUSH
6345: LD_STRING Farmer
6347: PPUSH
6348: CALL_OW 25
6352: ST_TO_ADDR
// SayRadio ( Farmer , DPM_F1 ) ;
6353: LD_EXP 25
6357: PPUSH
6358: LD_STRING DPM_F1
6360: PPUSH
6361: CALL_OW 94
// end ;
6365: LD_VAR 0 1
6369: RET
// export function PrepareAttack ( type ) ; var i , un , veh , skill ; begin
6370: LD_INT 0
6372: PPUSH
6373: PPUSH
6374: PPUSH
6375: PPUSH
6376: PPUSH
// uc_side := 2 ;
6377: LD_ADDR_OWVAR 20
6381: PUSH
6382: LD_INT 2
6384: ST_TO_ADDR
// uc_nation := 2 ;
6385: LD_ADDR_OWVAR 21
6389: PUSH
6390: LD_INT 2
6392: ST_TO_ADDR
// skill := [ 4 , 6 , 7 ] [ Difficulty ] ;
6393: LD_ADDR_VAR 0 6
6397: PUSH
6398: LD_INT 4
6400: PUSH
6401: LD_INT 6
6403: PUSH
6404: LD_INT 7
6406: PUSH
6407: EMPTY
6408: LIST
6409: LIST
6410: LIST
6411: PUSH
6412: LD_OWVAR 67
6416: ARRAY
6417: ST_TO_ADDR
// Randomize ;
6418: CALL_OW 10
// case type of 1 :
6422: LD_VAR 0 1
6426: PUSH
6427: LD_INT 1
6429: DOUBLE
6430: EQUAL
6431: IFTRUE 6435
6433: GO 6573
6435: POP
// begin for i = 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
6436: LD_ADDR_VAR 0 3
6440: PUSH
6441: DOUBLE
6442: LD_INT 1
6444: DEC
6445: ST_TO_ADDR
6446: LD_INT 3
6448: PUSH
6449: LD_INT 4
6451: PUSH
6452: LD_INT 5
6454: PUSH
6455: EMPTY
6456: LIST
6457: LIST
6458: LIST
6459: PUSH
6460: LD_OWVAR 67
6464: ARRAY
6465: PUSH
6466: FOR_TO
6467: IFFALSE 6569
// begin uc_side := 2 ;
6469: LD_ADDR_OWVAR 20
6473: PUSH
6474: LD_INT 2
6476: ST_TO_ADDR
// uc_nation := 2 ;
6477: LD_ADDR_OWVAR 21
6481: PUSH
6482: LD_INT 2
6484: ST_TO_ADDR
// PrepareHuman ( false , [ class_soldier , class_soldier , class_mortar ] [ Rand ( 1 , 3 ) ] , skill ) ;
6485: LD_INT 0
6487: PPUSH
6488: LD_INT 1
6490: PUSH
6491: LD_INT 1
6493: PUSH
6494: LD_INT 8
6496: PUSH
6497: EMPTY
6498: LIST
6499: LIST
6500: LIST
6501: PUSH
6502: LD_INT 1
6504: PPUSH
6505: LD_INT 3
6507: PPUSH
6508: CALL_OW 12
6512: ARRAY
6513: PPUSH
6514: LD_VAR 0 6
6518: PPUSH
6519: CALL_OW 380
// un := CreateHuman ;
6523: LD_ADDR_VAR 0 4
6527: PUSH
6528: CALL_OW 44
6532: ST_TO_ADDR
// PlaceUnitArea ( un , ar3 , false ) ;
6533: LD_VAR 0 4
6537: PPUSH
6538: LD_INT 18
6540: PPUSH
6541: LD_INT 0
6543: PPUSH
6544: CALL_OW 49
// ComMoveToArea ( un , spot3 ) ;
6548: LD_VAR 0 4
6552: PPUSH
6553: LD_INT 20
6555: PPUSH
6556: CALL_OW 113
// Wait ( 0 0$01 ) ;
6560: LD_INT 35
6562: PPUSH
6563: CALL_OW 67
// end ;
6567: GO 6466
6569: POP
6570: POP
// end ; 2 :
6571: GO 7313
6573: LD_INT 2
6575: DOUBLE
6576: EQUAL
6577: IFTRUE 6581
6579: GO 6907
6581: POP
// begin for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
6582: LD_ADDR_VAR 0 3
6586: PUSH
6587: DOUBLE
6588: LD_INT 1
6590: DEC
6591: ST_TO_ADDR
6592: LD_INT 4
6594: PUSH
6595: LD_INT 5
6597: PUSH
6598: LD_INT 6
6600: PUSH
6601: EMPTY
6602: LIST
6603: LIST
6604: LIST
6605: PUSH
6606: LD_OWVAR 67
6610: ARRAY
6611: PUSH
6612: FOR_TO
6613: IFFALSE 6692
// begin uc_side := 2 ;
6615: LD_ADDR_OWVAR 20
6619: PUSH
6620: LD_INT 2
6622: ST_TO_ADDR
// uc_nation := 2 ;
6623: LD_ADDR_OWVAR 21
6627: PUSH
6628: LD_INT 2
6630: ST_TO_ADDR
// PrepareHuman ( false , class_soldier , skill ) ;
6631: LD_INT 0
6633: PPUSH
6634: LD_INT 1
6636: PPUSH
6637: LD_VAR 0 6
6641: PPUSH
6642: CALL_OW 380
// un := CreateHuman ;
6646: LD_ADDR_VAR 0 4
6650: PUSH
6651: CALL_OW 44
6655: ST_TO_ADDR
// PlaceUnitArea ( un , ar2 , false ) ;
6656: LD_VAR 0 4
6660: PPUSH
6661: LD_INT 17
6663: PPUSH
6664: LD_INT 0
6666: PPUSH
6667: CALL_OW 49
// ComMoveToArea ( un , spot2 ) ;
6671: LD_VAR 0 4
6675: PPUSH
6676: LD_INT 19
6678: PPUSH
6679: CALL_OW 113
// Wait ( 0 0$01 ) ;
6683: LD_INT 35
6685: PPUSH
6686: CALL_OW 67
// end ;
6690: GO 6612
6692: POP
6693: POP
// for i = 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
6694: LD_ADDR_VAR 0 3
6698: PUSH
6699: DOUBLE
6700: LD_INT 1
6702: DEC
6703: ST_TO_ADDR
6704: LD_INT 2
6706: PUSH
6707: LD_INT 3
6709: PUSH
6710: LD_INT 4
6712: PUSH
6713: EMPTY
6714: LIST
6715: LIST
6716: LIST
6717: PUSH
6718: LD_OWVAR 67
6722: ARRAY
6723: PUSH
6724: FOR_TO
6725: IFFALSE 6903
// begin uc_side := 2 ;
6727: LD_ADDR_OWVAR 20
6731: PUSH
6732: LD_INT 2
6734: ST_TO_ADDR
// uc_nation := 2 ;
6735: LD_ADDR_OWVAR 21
6739: PUSH
6740: LD_INT 2
6742: ST_TO_ADDR
// vc_chassis := [ ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 2 ) ] ;
6743: LD_ADDR_OWVAR 37
6747: PUSH
6748: LD_INT 13
6750: PUSH
6751: LD_INT 14
6753: PUSH
6754: EMPTY
6755: LIST
6756: LIST
6757: PUSH
6758: LD_INT 1
6760: PPUSH
6761: LD_INT 2
6763: PPUSH
6764: CALL_OW 12
6768: ARRAY
6769: ST_TO_ADDR
// vc_engine := engine_combustion ;
6770: LD_ADDR_OWVAR 39
6774: PUSH
6775: LD_INT 1
6777: ST_TO_ADDR
// vc_control := control_manual ;
6778: LD_ADDR_OWVAR 38
6782: PUSH
6783: LD_INT 1
6785: ST_TO_ADDR
// vc_weapon := [ ar_double_machine_gun , ar_light_gun , ar_gun , ar_rocket_launcher , ar_gatling_gun ] [ Rand ( 1 , 5 ) ] ;
6786: LD_ADDR_OWVAR 40
6790: PUSH
6791: LD_INT 24
6793: PUSH
6794: LD_INT 23
6796: PUSH
6797: LD_INT 27
6799: PUSH
6800: LD_INT 28
6802: PUSH
6803: LD_INT 25
6805: PUSH
6806: EMPTY
6807: LIST
6808: LIST
6809: LIST
6810: LIST
6811: LIST
6812: PUSH
6813: LD_INT 1
6815: PPUSH
6816: LD_INT 5
6818: PPUSH
6819: CALL_OW 12
6823: ARRAY
6824: ST_TO_ADDR
// veh := CreateVehicle ;
6825: LD_ADDR_VAR 0 5
6829: PUSH
6830: CALL_OW 45
6834: ST_TO_ADDR
// PlaceUnitArea ( veh , ar2 , false ) ;
6835: LD_VAR 0 5
6839: PPUSH
6840: LD_INT 17
6842: PPUSH
6843: LD_INT 0
6845: PPUSH
6846: CALL_OW 49
// PrepareHuman ( false , 1 , skill ) ;
6850: LD_INT 0
6852: PPUSH
6853: LD_INT 1
6855: PPUSH
6856: LD_VAR 0 6
6860: PPUSH
6861: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
6865: CALL_OW 44
6869: PPUSH
6870: LD_VAR 0 5
6874: PPUSH
6875: CALL_OW 52
// ComMoveXY ( veh , 89 , 40 ) ;
6879: LD_VAR 0 5
6883: PPUSH
6884: LD_INT 89
6886: PPUSH
6887: LD_INT 40
6889: PPUSH
6890: CALL_OW 111
// Wait ( 0 0$02 ) ;
6894: LD_INT 70
6896: PPUSH
6897: CALL_OW 67
// end ;
6901: GO 6724
6903: POP
6904: POP
// end ; 3 :
6905: GO 7313
6907: LD_INT 3
6909: DOUBLE
6910: EQUAL
6911: IFTRUE 6915
6913: GO 7312
6915: POP
// begin for i = 1 to [ 3 , 4 , 5 ] [ Difficulty ] + ( tick div 15 15$00 ) do
6916: LD_ADDR_VAR 0 3
6920: PUSH
6921: DOUBLE
6922: LD_INT 1
6924: DEC
6925: ST_TO_ADDR
6926: LD_INT 3
6928: PUSH
6929: LD_INT 4
6931: PUSH
6932: LD_INT 5
6934: PUSH
6935: EMPTY
6936: LIST
6937: LIST
6938: LIST
6939: PUSH
6940: LD_OWVAR 67
6944: ARRAY
6945: PUSH
6946: LD_OWVAR 1
6950: PUSH
6951: LD_INT 31500
6953: DIV
6954: PLUS
6955: PUSH
6956: FOR_TO
6957: IFFALSE 7087
// begin uc_side := 2 ;
6959: LD_ADDR_OWVAR 20
6963: PUSH
6964: LD_INT 2
6966: ST_TO_ADDR
// uc_nation := 2 ;
6967: LD_ADDR_OWVAR 21
6971: PUSH
6972: LD_INT 2
6974: ST_TO_ADDR
// PrepareHuman ( false , [ class_soldier , class_mortar ] [ Rand ( 1 , 2 ) ] , skill ) ;
6975: LD_INT 0
6977: PPUSH
6978: LD_INT 1
6980: PUSH
6981: LD_INT 8
6983: PUSH
6984: EMPTY
6985: LIST
6986: LIST
6987: PUSH
6988: LD_INT 1
6990: PPUSH
6991: LD_INT 2
6993: PPUSH
6994: CALL_OW 12
6998: ARRAY
6999: PPUSH
7000: LD_VAR 0 6
7004: PPUSH
7005: CALL_OW 380
// un := CreateHuman ;
7009: LD_ADDR_VAR 0 4
7013: PUSH
7014: CALL_OW 44
7018: ST_TO_ADDR
// PlaceUnitArea ( un , ar2 , false ) ;
7019: LD_VAR 0 4
7023: PPUSH
7024: LD_INT 17
7026: PPUSH
7027: LD_INT 0
7029: PPUSH
7030: CALL_OW 49
// ar_force := Replace ( ar_force , ar_force + 1 , veh ) ;
7034: LD_ADDR_EXP 11
7038: PUSH
7039: LD_EXP 11
7043: PPUSH
7044: LD_EXP 11
7048: PUSH
7049: LD_INT 1
7051: PLUS
7052: PPUSH
7053: LD_VAR 0 5
7057: PPUSH
7058: CALL_OW 1
7062: ST_TO_ADDR
// ComMoveXY ( un , 17 , 9 ) ;
7063: LD_VAR 0 4
7067: PPUSH
7068: LD_INT 17
7070: PPUSH
7071: LD_INT 9
7073: PPUSH
7074: CALL_OW 111
// Wait ( 0 0$01 ) ;
7078: LD_INT 35
7080: PPUSH
7081: CALL_OW 67
// end ;
7085: GO 6956
7087: POP
7088: POP
// for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
7089: LD_ADDR_VAR 0 3
7093: PUSH
7094: DOUBLE
7095: LD_INT 1
7097: DEC
7098: ST_TO_ADDR
7099: LD_INT 4
7101: PUSH
7102: LD_INT 5
7104: PUSH
7105: LD_INT 6
7107: PUSH
7108: EMPTY
7109: LIST
7110: LIST
7111: LIST
7112: PUSH
7113: LD_OWVAR 67
7117: ARRAY
7118: PUSH
7119: FOR_TO
7120: IFFALSE 7308
// begin uc_side := 2 ;
7122: LD_ADDR_OWVAR 20
7126: PUSH
7127: LD_INT 2
7129: ST_TO_ADDR
// uc_nation := 2 ;
7130: LD_ADDR_OWVAR 21
7134: PUSH
7135: LD_INT 2
7137: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
7138: LD_ADDR_OWVAR 37
7142: PUSH
7143: LD_INT 14
7145: ST_TO_ADDR
// vc_engine := engine_combustion ;
7146: LD_ADDR_OWVAR 39
7150: PUSH
7151: LD_INT 1
7153: ST_TO_ADDR
// vc_control := control_manual ;
7154: LD_ADDR_OWVAR 38
7158: PUSH
7159: LD_INT 1
7161: ST_TO_ADDR
// vc_weapon := [ ar_gatling_gun , ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_mortar ] [ Rand ( 1 , 5 ) ] ;
7162: LD_ADDR_OWVAR 40
7166: PUSH
7167: LD_INT 25
7169: PUSH
7170: LD_INT 27
7172: PUSH
7173: LD_INT 28
7175: PUSH
7176: LD_INT 26
7178: PUSH
7179: LD_INT 92
7181: PUSH
7182: EMPTY
7183: LIST
7184: LIST
7185: LIST
7186: LIST
7187: LIST
7188: PUSH
7189: LD_INT 1
7191: PPUSH
7192: LD_INT 5
7194: PPUSH
7195: CALL_OW 12
7199: ARRAY
7200: ST_TO_ADDR
// veh := CreateVehicle ;
7201: LD_ADDR_VAR 0 5
7205: PUSH
7206: CALL_OW 45
7210: ST_TO_ADDR
// PlaceUnitArea ( veh , ar1 , false ) ;
7211: LD_VAR 0 5
7215: PPUSH
7216: LD_INT 16
7218: PPUSH
7219: LD_INT 0
7221: PPUSH
7222: CALL_OW 49
// PrepareHuman ( false , 3 , skill ) ;
7226: LD_INT 0
7228: PPUSH
7229: LD_INT 3
7231: PPUSH
7232: LD_VAR 0 6
7236: PPUSH
7237: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
7241: CALL_OW 44
7245: PPUSH
7246: LD_VAR 0 5
7250: PPUSH
7251: CALL_OW 52
// ar_force := Replace ( ar_force , ar_force + 1 , veh ) ;
7255: LD_ADDR_EXP 11
7259: PUSH
7260: LD_EXP 11
7264: PPUSH
7265: LD_EXP 11
7269: PUSH
7270: LD_INT 1
7272: PLUS
7273: PPUSH
7274: LD_VAR 0 5
7278: PPUSH
7279: CALL_OW 1
7283: ST_TO_ADDR
// ComMoveXY ( veh , 125 , 31 ) ;
7284: LD_VAR 0 5
7288: PPUSH
7289: LD_INT 125
7291: PPUSH
7292: LD_INT 31
7294: PPUSH
7295: CALL_OW 111
// Wait ( 0 0$02 ) ;
7299: LD_INT 70
7301: PPUSH
7302: CALL_OW 67
// end ;
7306: GO 7119
7308: POP
7309: POP
// end ; end ;
7310: GO 7313
7312: POP
// end ;
7313: LD_VAR 0 2
7317: RET
// export function PrepareHovercrafts ; var i , un , areas , skill ; begin
7318: LD_INT 0
7320: PPUSH
7321: PPUSH
7322: PPUSH
7323: PPUSH
7324: PPUSH
// areas := [ river1 , river2 ] ;
7325: LD_ADDR_VAR 0 4
7329: PUSH
7330: LD_INT 14
7332: PUSH
7333: LD_INT 15
7335: PUSH
7336: EMPTY
7337: LIST
7338: LIST
7339: ST_TO_ADDR
// skill := [ 5 , 6 , 7 ] [ Difficulty ] ;
7340: LD_ADDR_VAR 0 5
7344: PUSH
7345: LD_INT 5
7347: PUSH
7348: LD_INT 6
7350: PUSH
7351: LD_INT 7
7353: PUSH
7354: EMPTY
7355: LIST
7356: LIST
7357: LIST
7358: PUSH
7359: LD_OWVAR 67
7363: ARRAY
7364: ST_TO_ADDR
// uc_side := 2 ;
7365: LD_ADDR_OWVAR 20
7369: PUSH
7370: LD_INT 2
7372: ST_TO_ADDR
// uc_nation := 2 ;
7373: LD_ADDR_OWVAR 21
7377: PUSH
7378: LD_INT 2
7380: ST_TO_ADDR
// hc_name :=  ;
7381: LD_ADDR_OWVAR 26
7385: PUSH
7386: LD_STRING 
7388: ST_TO_ADDR
// hc_gallery :=  ;
7389: LD_ADDR_OWVAR 33
7393: PUSH
7394: LD_STRING 
7396: ST_TO_ADDR
// for i = 1 to [ 1 , 2 , 2 ] [ Difficulty ] do
7397: LD_ADDR_VAR 0 2
7401: PUSH
7402: DOUBLE
7403: LD_INT 1
7405: DEC
7406: ST_TO_ADDR
7407: LD_INT 1
7409: PUSH
7410: LD_INT 2
7412: PUSH
7413: LD_INT 2
7415: PUSH
7416: EMPTY
7417: LIST
7418: LIST
7419: LIST
7420: PUSH
7421: LD_OWVAR 67
7425: ARRAY
7426: PUSH
7427: FOR_TO
7428: IFFALSE 7580
// begin uc_side := 2 ;
7430: LD_ADDR_OWVAR 20
7434: PUSH
7435: LD_INT 2
7437: ST_TO_ADDR
// uc_nation := 2 ;
7438: LD_ADDR_OWVAR 21
7442: PUSH
7443: LD_INT 2
7445: ST_TO_ADDR
// vc_chassis := ar_hovercraft ;
7446: LD_ADDR_OWVAR 37
7450: PUSH
7451: LD_INT 11
7453: ST_TO_ADDR
// vc_engine := engine_solar ;
7454: LD_ADDR_OWVAR 39
7458: PUSH
7459: LD_INT 2
7461: ST_TO_ADDR
// vc_control := control_manual ;
7462: LD_ADDR_OWVAR 38
7466: PUSH
7467: LD_INT 1
7469: ST_TO_ADDR
// vc_weapon := ar_double_machine_gun ;
7470: LD_ADDR_OWVAR 40
7474: PUSH
7475: LD_INT 24
7477: ST_TO_ADDR
// vc_fuel_battery := 100 ;
7478: LD_ADDR_OWVAR 41
7482: PUSH
7483: LD_INT 100
7485: ST_TO_ADDR
// un := CreateVehicle ;
7486: LD_ADDR_VAR 0 3
7490: PUSH
7491: CALL_OW 45
7495: ST_TO_ADDR
// PlaceUnitXYR ( un , 121 , 69 , 4 , false ) ;
7496: LD_VAR 0 3
7500: PPUSH
7501: LD_INT 121
7503: PPUSH
7504: LD_INT 69
7506: PPUSH
7507: LD_INT 4
7509: PPUSH
7510: LD_INT 0
7512: PPUSH
7513: CALL_OW 50
// PrepareHuman ( false , 3 , skill ) ;
7517: LD_INT 0
7519: PPUSH
7520: LD_INT 3
7522: PPUSH
7523: LD_VAR 0 5
7527: PPUSH
7528: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
7532: CALL_OW 44
7536: PPUSH
7537: LD_VAR 0 3
7541: PPUSH
7542: CALL_OW 52
// riv := Insert ( riv , 1 , [ un , i ] ) ;
7546: LD_ADDR_EXP 9
7550: PUSH
7551: LD_EXP 9
7555: PPUSH
7556: LD_INT 1
7558: PPUSH
7559: LD_VAR 0 3
7563: PUSH
7564: LD_VAR 0 2
7568: PUSH
7569: EMPTY
7570: LIST
7571: LIST
7572: PPUSH
7573: CALL_OW 2
7577: ST_TO_ADDR
// end ;
7578: GO 7427
7580: POP
7581: POP
// end ;
7582: LD_VAR 0 1
7586: RET
// every 0 0$01 trigger riv do var i , c ;
7587: LD_EXP 9
7591: IFFALSE 8026
7593: GO 7595
7595: DISABLE
7596: LD_INT 0
7598: PPUSH
7599: PPUSH
// begin enable ;
7600: ENABLE
// for i = riv downto 1 do
7601: LD_ADDR_VAR 0 1
7605: PUSH
7606: DOUBLE
7607: LD_EXP 9
7611: INC
7612: ST_TO_ADDR
7613: LD_INT 1
7615: PUSH
7616: FOR_DOWNTO
7617: IFFALSE 8024
// begin if not riv [ i ] [ 1 ] then
7619: LD_EXP 9
7623: PUSH
7624: LD_VAR 0 1
7628: ARRAY
7629: PUSH
7630: LD_INT 1
7632: ARRAY
7633: NOT
7634: IFFALSE 7656
// begin riv := Delete ( riv , 1 ) ;
7636: LD_ADDR_EXP 9
7640: PUSH
7641: LD_EXP 9
7645: PPUSH
7646: LD_INT 1
7648: PPUSH
7649: CALL_OW 3
7653: ST_TO_ADDR
// break ;
7654: GO 8024
// end ; if not HasTask ( riv [ i ] [ 1 ] ) then
7656: LD_EXP 9
7660: PUSH
7661: LD_VAR 0 1
7665: ARRAY
7666: PUSH
7667: LD_INT 1
7669: ARRAY
7670: PPUSH
7671: CALL_OW 314
7675: NOT
7676: IFFALSE 7744
// begin if riv [ i ] [ 2 ] = 1 then
7678: LD_EXP 9
7682: PUSH
7683: LD_VAR 0 1
7687: ARRAY
7688: PUSH
7689: LD_INT 2
7691: ARRAY
7692: PUSH
7693: LD_INT 1
7695: EQUAL
7696: IFFALSE 7708
// c := 2 else
7698: LD_ADDR_VAR 0 2
7702: PUSH
7703: LD_INT 2
7705: ST_TO_ADDR
7706: GO 7716
// c := 1 ;
7708: LD_ADDR_VAR 0 2
7712: PUSH
7713: LD_INT 1
7715: ST_TO_ADDR
// riv := Replace2 ( riv , i , 2 , c ) ;
7716: LD_ADDR_EXP 9
7720: PUSH
7721: LD_EXP 9
7725: PPUSH
7726: LD_VAR 0 1
7730: PPUSH
7731: LD_INT 2
7733: PPUSH
7734: LD_VAR 0 2
7738: PPUSH
7739: CALL 10422 0 4
7743: ST_TO_ADDR
// end ; if not IsInArea ( riv [ i ] [ 1 ] , [ river1 , river2 ] [ riv [ i ] [ 2 ] ] ) then
7744: LD_EXP 9
7748: PUSH
7749: LD_VAR 0 1
7753: ARRAY
7754: PUSH
7755: LD_INT 1
7757: ARRAY
7758: PPUSH
7759: LD_INT 14
7761: PUSH
7762: LD_INT 15
7764: PUSH
7765: EMPTY
7766: LIST
7767: LIST
7768: PUSH
7769: LD_EXP 9
7773: PUSH
7774: LD_VAR 0 1
7778: ARRAY
7779: PUSH
7780: LD_INT 2
7782: ARRAY
7783: ARRAY
7784: PPUSH
7785: CALL_OW 308
7789: NOT
7790: IFFALSE 8022
// begin if GetFuel ( riv [ i ] [ 1 ] ) < 50 then
7792: LD_EXP 9
7796: PUSH
7797: LD_VAR 0 1
7801: ARRAY
7802: PUSH
7803: LD_INT 1
7805: ARRAY
7806: PPUSH
7807: CALL_OW 261
7811: PUSH
7812: LD_INT 50
7814: LESS
7815: IFFALSE 7839
// SetFuel ( riv [ i ] [ 1 ] , 67 ) ;
7817: LD_EXP 9
7821: PUSH
7822: LD_VAR 0 1
7826: ARRAY
7827: PUSH
7828: LD_INT 1
7830: ARRAY
7831: PPUSH
7832: LD_INT 67
7834: PPUSH
7835: CALL_OW 240
// if GetDistUnits ( riv [ i ] [ 1 ] , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 3 ] ) , riv [ i ] [ 1 ] ) ) < 9 then
7839: LD_EXP 9
7843: PUSH
7844: LD_VAR 0 1
7848: ARRAY
7849: PUSH
7850: LD_INT 1
7852: ARRAY
7853: PPUSH
7854: LD_INT 22
7856: PUSH
7857: LD_INT 3
7859: PUSH
7860: EMPTY
7861: LIST
7862: LIST
7863: PPUSH
7864: CALL_OW 69
7868: PPUSH
7869: LD_EXP 9
7873: PUSH
7874: LD_VAR 0 1
7878: ARRAY
7879: PUSH
7880: LD_INT 1
7882: ARRAY
7883: PPUSH
7884: CALL_OW 74
7888: PPUSH
7889: CALL_OW 296
7893: PUSH
7894: LD_INT 9
7896: LESS
7897: IFFALSE 7955
// ComAttackUnit ( riv [ i ] [ 1 ] , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 3 ] ) , riv [ i ] [ 1 ] ) ) else
7899: LD_EXP 9
7903: PUSH
7904: LD_VAR 0 1
7908: ARRAY
7909: PUSH
7910: LD_INT 1
7912: ARRAY
7913: PPUSH
7914: LD_INT 22
7916: PUSH
7917: LD_INT 3
7919: PUSH
7920: EMPTY
7921: LIST
7922: LIST
7923: PPUSH
7924: CALL_OW 69
7928: PPUSH
7929: LD_EXP 9
7933: PUSH
7934: LD_VAR 0 1
7938: ARRAY
7939: PUSH
7940: LD_INT 1
7942: ARRAY
7943: PPUSH
7944: CALL_OW 74
7948: PPUSH
7949: CALL_OW 115
7953: GO 8022
// begin ComMoveToArea ( riv [ i ] [ 1 ] , [ river1 , river2 ] [ riv [ i ] [ 2 ] ] ) ;
7955: LD_EXP 9
7959: PUSH
7960: LD_VAR 0 1
7964: ARRAY
7965: PUSH
7966: LD_INT 1
7968: ARRAY
7969: PPUSH
7970: LD_INT 14
7972: PUSH
7973: LD_INT 15
7975: PUSH
7976: EMPTY
7977: LIST
7978: LIST
7979: PUSH
7980: LD_EXP 9
7984: PUSH
7985: LD_VAR 0 1
7989: ARRAY
7990: PUSH
7991: LD_INT 2
7993: ARRAY
7994: ARRAY
7995: PPUSH
7996: CALL_OW 113
// AddComWait ( riv [ i ] [ 1 ] , 0 0$10 ) ;
8000: LD_EXP 9
8004: PUSH
8005: LD_VAR 0 1
8009: ARRAY
8010: PUSH
8011: LD_INT 1
8013: ARRAY
8014: PPUSH
8015: LD_INT 350
8017: PPUSH
8018: CALL_OW 202
// end ; end ; end ;
8022: GO 7616
8024: POP
8025: POP
// end ;
8026: PPOPN 2
8028: END
// every 10 10$00 trigger convoy_start do var i , un ;
8029: LD_EXP 7
8033: IFFALSE 8154
8035: GO 8037
8037: DISABLE
8038: LD_INT 0
8040: PPUSH
8041: PPUSH
// begin enable ;
8042: ENABLE
// for i = 1 to 2 do
8043: LD_ADDR_VAR 0 1
8047: PUSH
8048: DOUBLE
8049: LD_INT 1
8051: DEC
8052: ST_TO_ADDR
8053: LD_INT 2
8055: PUSH
8056: FOR_TO
8057: IFFALSE 8152
// begin uc_side := 2 ;
8059: LD_ADDR_OWVAR 20
8063: PUSH
8064: LD_INT 2
8066: ST_TO_ADDR
// uc_nation := 2 ;
8067: LD_ADDR_OWVAR 21
8071: PUSH
8072: LD_INT 2
8074: ST_TO_ADDR
// PrepareHuman ( false , 1 , 4 ) ;
8075: LD_INT 0
8077: PPUSH
8078: LD_INT 1
8080: PPUSH
8081: LD_INT 4
8083: PPUSH
8084: CALL_OW 380
// un := CreateHuman ;
8088: LD_ADDR_VAR 0 2
8092: PUSH
8093: CALL_OW 44
8097: ST_TO_ADDR
// PlaceUnitXY ( un , 10 , 2 , false ) ;
8098: LD_VAR 0 2
8102: PPUSH
8103: LD_INT 10
8105: PPUSH
8106: LD_INT 2
8108: PPUSH
8109: LD_INT 0
8111: PPUSH
8112: CALL_OW 48
// ComMoveXY ( un , 24 , 36 ) ;
8116: LD_VAR 0 2
8120: PPUSH
8121: LD_INT 24
8123: PPUSH
8124: LD_INT 36
8126: PPUSH
8127: CALL_OW 111
// AddComMoveToArea ( un , conv_end ) ;
8131: LD_VAR 0 2
8135: PPUSH
8136: LD_INT 9
8138: PPUSH
8139: CALL_OW 173
// Wait ( 0 0$02 ) ;
8143: LD_INT 70
8145: PPUSH
8146: CALL_OW 67
// end ;
8150: GO 8056
8152: POP
8153: POP
// end ;
8154: PPOPN 2
8156: END
// every 0 0$01 trigger FilterAllUnits ( [ f_side , 2 ] ) do var i , rest ;
8157: LD_INT 22
8159: PUSH
8160: LD_INT 2
8162: PUSH
8163: EMPTY
8164: LIST
8165: LIST
8166: PPUSH
8167: CALL_OW 69
8171: IFFALSE 8483
8173: GO 8175
8175: DISABLE
8176: LD_INT 0
8178: PPUSH
8179: PPUSH
// begin enable ;
8180: ENABLE
// rest := FilterAllUnits ( [ f_side , 2 ] ) diff ar_force ;
8181: LD_ADDR_VAR 0 2
8185: PUSH
8186: LD_INT 22
8188: PUSH
8189: LD_INT 2
8191: PUSH
8192: EMPTY
8193: LIST
8194: LIST
8195: PPUSH
8196: CALL_OW 69
8200: PUSH
8201: LD_EXP 11
8205: DIFF
8206: ST_TO_ADDR
// if rest then
8207: LD_VAR 0 2
8211: IFFALSE 8283
// for i in rest do
8213: LD_ADDR_VAR 0 1
8217: PUSH
8218: LD_VAR 0 2
8222: PUSH
8223: FOR_IN
8224: IFFALSE 8281
// if GetClass ( i ) = 3 then
8226: LD_VAR 0 1
8230: PPUSH
8231: CALL_OW 257
8235: PUSH
8236: LD_INT 3
8238: EQUAL
8239: IFFALSE 8279
// begin if not IsInArea ( i , ar2 ) then
8241: LD_VAR 0 1
8245: PPUSH
8246: LD_INT 17
8248: PPUSH
8249: CALL_OW 308
8253: NOT
8254: IFFALSE 8270
// ComMoveToArea ( i , ar2 ) else
8256: LD_VAR 0 1
8260: PPUSH
8261: LD_INT 17
8263: PPUSH
8264: CALL_OW 113
8268: GO 8279
// RemoveUnit ( i ) ;
8270: LD_VAR 0 1
8274: PPUSH
8275: CALL_OW 64
// end ;
8279: GO 8223
8281: POP
8282: POP
// if ar_force then
8283: LD_EXP 11
8287: IFFALSE 8483
// begin if ar_force > 15 then
8289: LD_EXP 11
8293: PUSH
8294: LD_INT 15
8296: GREATER
8297: IFFALSE 8314
// ComAgressiveMove ( ar_force , 58 , 51 ) ;
8299: LD_EXP 11
8303: PPUSH
8304: LD_INT 58
8306: PPUSH
8307: LD_INT 51
8309: PPUSH
8310: CALL_OW 114
// for i in ar_force do
8314: LD_ADDR_VAR 0 1
8318: PUSH
8319: LD_EXP 11
8323: PUSH
8324: FOR_IN
8325: IFFALSE 8481
// begin if GetClass ( i ) = class_soldier then
8327: LD_VAR 0 1
8331: PPUSH
8332: CALL_OW 257
8336: PUSH
8337: LD_INT 1
8339: EQUAL
8340: IFFALSE 8432
// if FindTarget ( i ) in FilterAllUnits ( [ f_type , unit_building ] ) then
8342: LD_VAR 0 1
8346: PPUSH
8347: CALL 10679 0 1
8351: PUSH
8352: LD_INT 21
8354: PUSH
8355: LD_INT 3
8357: PUSH
8358: EMPTY
8359: LIST
8360: LIST
8361: PPUSH
8362: CALL_OW 69
8366: IN
8367: IFFALSE 8413
// ComPlaceDelayedCharge ( i , GetX ( FindTarget ( i ) ) , GetY ( FindTarget ( i ) ) , 0 ) else
8369: LD_VAR 0 1
8373: PPUSH
8374: LD_VAR 0 1
8378: PPUSH
8379: CALL 10679 0 1
8383: PPUSH
8384: CALL_OW 250
8388: PPUSH
8389: LD_VAR 0 1
8393: PPUSH
8394: CALL 10679 0 1
8398: PPUSH
8399: CALL_OW 251
8403: PPUSH
8404: LD_INT 0
8406: PPUSH
8407: CALL_OW 132
8411: GO 8432
// ComAttackUnit ( i , FindTarget ( i ) ) ;
8413: LD_VAR 0 1
8417: PPUSH
8418: LD_VAR 0 1
8422: PPUSH
8423: CALL 10679 0 1
8427: PPUSH
8428: CALL_OW 115
// if not GetClass ( i ) = 1 and not HasTask ( i ) then
8432: LD_VAR 0 1
8436: PPUSH
8437: CALL_OW 257
8441: PUSH
8442: LD_INT 1
8444: EQUAL
8445: NOT
8446: PUSH
8447: LD_VAR 0 1
8451: PPUSH
8452: CALL_OW 314
8456: NOT
8457: AND
8458: IFFALSE 8479
// ComAttackUnit ( i , FindTarget ( i ) ) ;
8460: LD_VAR 0 1
8464: PPUSH
8465: LD_VAR 0 1
8469: PPUSH
8470: CALL 10679 0 1
8474: PPUSH
8475: CALL_OW 115
// end ;
8479: GO 8324
8481: POP
8482: POP
// end ; end ;
8483: PPOPN 2
8485: END
// every 0 0$01 trigger FilterUnitsInArea ( conv_end , [ f_side , 2 ] ) do
8486: LD_INT 9
8488: PPUSH
8489: LD_INT 22
8491: PUSH
8492: LD_INT 2
8494: PUSH
8495: EMPTY
8496: LIST
8497: LIST
8498: PPUSH
8499: CALL_OW 70
8503: IFFALSE 8516
8505: GO 8507
8507: DISABLE
// medal2 := false ; end_of_file
8508: LD_ADDR_EXP 4
8512: PUSH
8513: LD_INT 0
8515: ST_TO_ADDR
8516: END
// export function Action ; begin
8517: LD_INT 0
8519: PPUSH
// case Query ( info ) of 1 :
8520: LD_STRING info
8522: PPUSH
8523: CALL_OW 97
8527: PUSH
8528: LD_INT 1
8530: DOUBLE
8531: EQUAL
8532: IFTRUE 8536
8534: GO 8539
8536: POP
// ; end ;
8537: GO 8540
8539: POP
// ChangeMissionObjectives ( PM_1 ) ;
8540: LD_STRING PM_1
8542: PPUSH
8543: CALL_OW 337
// SaveForQuickRestart ;
8547: CALL_OW 22
// end ;
8551: LD_VAR 0 1
8555: RET
// every 0 0$01 trigger GetSide ( us_depot ) = 3 do
8556: LD_INT 50
8558: PPUSH
8559: CALL_OW 255
8563: PUSH
8564: LD_INT 3
8566: EQUAL
8567: IFFALSE 8848
8569: GO 8571
8571: DISABLE
// begin Say ( Stolypin , DPM_S1 ) ;
8572: LD_EXP 16
8576: PPUSH
8577: LD_STRING DPM_S1
8579: PPUSH
8580: CALL_OW 88
// SayRadio ( Popov , DPM_P1 ) ;
8584: LD_EXP 17
8588: PPUSH
8589: LD_STRING DPM_P1
8591: PPUSH
8592: CALL_OW 94
// Say ( Stolypin , DPM_S2 ) ;
8596: LD_EXP 16
8600: PPUSH
8601: LD_STRING DPM_S2
8603: PPUSH
8604: CALL_OW 88
// SaveForQuickRestart ;
8608: CALL_OW 22
// ChangeMissionObjectives ( PM_2 ) ;
8612: LD_STRING PM_2
8614: PPUSH
8615: CALL_OW 337
// Wait ( 2 2$30 ) ;
8619: LD_INT 5250
8621: PPUSH
8622: CALL_OW 67
// CenterOnXY ( 117 , 4 ) ;
8626: LD_INT 117
8628: PPUSH
8629: LD_INT 4
8631: PPUSH
8632: CALL_OW 84
// Convoy ( 1 ) ;
8636: LD_INT 1
8638: PPUSH
8639: CALL 898 0 1
// Wait ( 0 0$30 ) ;
8643: LD_INT 1050
8645: PPUSH
8646: CALL_OW 67
// Convoy ( 2 ) ;
8650: LD_INT 2
8652: PPUSH
8653: CALL 898 0 1
// Wait ( 1 1$30 ) ;
8657: LD_INT 3150
8659: PPUSH
8660: CALL_OW 67
// Convoy ( 3 ) ;
8664: LD_INT 3
8666: PPUSH
8667: CALL 898 0 1
// Wait ( 4 4$00 ) ;
8671: LD_INT 8400
8673: PPUSH
8674: CALL_OW 67
// convoy_start := true ;
8678: LD_ADDR_EXP 7
8682: PUSH
8683: LD_INT 1
8685: ST_TO_ADDR
// PrepareArabian ;
8686: CALL 6297 0 0
// PrepareAttack ( 1 ) ;
8690: LD_INT 1
8692: PPUSH
8693: CALL 6370 0 1
// while ( convoy_start ) do
8697: LD_EXP 7
8701: IFFALSE 8848
// begin Wait ( Rand ( 2 2$00 , 3 3$30 ) ) ;
8703: LD_INT 4200
8705: PPUSH
8706: LD_INT 7350
8708: PPUSH
8709: CALL_OW 12
8713: PPUSH
8714: CALL_OW 67
// if FilterAllUnits ( [ f_side , 2 ] ) < 20 then
8718: LD_INT 22
8720: PUSH
8721: LD_INT 2
8723: PUSH
8724: EMPTY
8725: LIST
8726: LIST
8727: PPUSH
8728: CALL_OW 69
8732: PUSH
8733: LD_INT 20
8735: LESS
8736: IFFALSE 8753
// PrepareAttack ( Rand ( 1 , 2 ) ) ;
8738: LD_INT 1
8740: PPUSH
8741: LD_INT 2
8743: PPUSH
8744: CALL_OW 12
8748: PPUSH
8749: CALL 6370 0 1
// Convoy ( Rand ( 1 , 5 ) ) ;
8753: LD_INT 1
8755: PPUSH
8756: LD_INT 5
8758: PPUSH
8759: CALL_OW 12
8763: PPUSH
8764: CALL 898 0 1
// conv_counter := conv_counter + 1 ;
8768: LD_ADDR_EXP 13
8772: PUSH
8773: LD_EXP 13
8777: PUSH
8778: LD_INT 1
8780: PLUS
8781: ST_TO_ADDR
// if conv_counter mod [ 4 , 3 , 3 ] [ Difficulty ] = 0 then
8782: LD_EXP 13
8786: PUSH
8787: LD_INT 4
8789: PUSH
8790: LD_INT 3
8792: PUSH
8793: LD_INT 3
8795: PUSH
8796: EMPTY
8797: LIST
8798: LIST
8799: LIST
8800: PUSH
8801: LD_OWVAR 67
8805: ARRAY
8806: MOD
8807: PUSH
8808: LD_INT 0
8810: EQUAL
8811: IFFALSE 8846
// begin Wait ( 1 1$20 ) ;
8813: LD_INT 2800
8815: PPUSH
8816: CALL_OW 67
// SayRadio ( Farmer , DPM_F2 ) ;
8820: LD_EXP 25
8824: PPUSH
8825: LD_STRING DPM_F2
8827: PPUSH
8828: CALL_OW 94
// PrepareAttack ( 3 ) ;
8832: LD_INT 3
8834: PPUSH
8835: CALL 6370 0 1
// Wait ( 3 3$00 ) ;
8839: LD_INT 6300
8841: PPUSH
8842: CALL_OW 67
// end ; end ;
8846: GO 8697
// end ;
8848: END
// every 0 0$1 trigger safeCounter > 30 do
8849: LD_EXP 15
8853: PUSH
8854: LD_INT 30
8856: GREATER
8857: IFFALSE 8869
8859: GO 8861
8861: DISABLE
// SetAchievement ( ACH_SAFE ) ;
8862: LD_STRING ACH_SAFE
8864: PPUSH
8865: CALL_OW 543
8869: END
// every 1 1$30 trigger conv_counter mod 3 = 0 and FilterAllUnits ( [ f_side , 2 ] ) = 0 do
8870: LD_EXP 13
8874: PUSH
8875: LD_INT 3
8877: MOD
8878: PUSH
8879: LD_INT 0
8881: EQUAL
8882: PUSH
8883: LD_INT 22
8885: PUSH
8886: LD_INT 2
8888: PUSH
8889: EMPTY
8890: LIST
8891: LIST
8892: PPUSH
8893: CALL_OW 69
8897: PUSH
8898: LD_INT 0
8900: EQUAL
8901: AND
8902: IFFALSE 8919
8904: GO 8906
8906: DISABLE
// SayRadio ( Farmer , DPM_F3 ) ;
8907: LD_EXP 25
8911: PPUSH
8912: LD_STRING DPM_F3
8914: PPUSH
8915: CALL_OW 94
8919: END
// every 1 1$30 trigger conv_counter mod 5 = 0 and FilterAllUnits ( [ f_side , 2 ] ) = 0 do
8920: LD_EXP 13
8924: PUSH
8925: LD_INT 5
8927: MOD
8928: PUSH
8929: LD_INT 0
8931: EQUAL
8932: PUSH
8933: LD_INT 22
8935: PUSH
8936: LD_INT 2
8938: PUSH
8939: EMPTY
8940: LIST
8941: LIST
8942: PPUSH
8943: CALL_OW 69
8947: PUSH
8948: LD_INT 0
8950: EQUAL
8951: AND
8952: IFFALSE 8969
8954: GO 8956
8956: DISABLE
// SayRadio ( Farmer , DPM_F4 ) ;
8957: LD_EXP 25
8961: PPUSH
8962: LD_STRING DPM_F4
8964: PPUSH
8965: CALL_OW 94
8969: END
// every 0 0$10 trigger convoy_start and conv_counter >= [ 8 , 9 , 10 ] [ Difficulty ] and FilterAllUnits ( [ f_side , 6 ] ) = 0 do
8970: LD_EXP 7
8974: PUSH
8975: LD_EXP 13
8979: PUSH
8980: LD_INT 8
8982: PUSH
8983: LD_INT 9
8985: PUSH
8986: LD_INT 10
8988: PUSH
8989: EMPTY
8990: LIST
8991: LIST
8992: LIST
8993: PUSH
8994: LD_OWVAR 67
8998: ARRAY
8999: GREATEREQUAL
9000: AND
9001: PUSH
9002: LD_INT 22
9004: PUSH
9005: LD_INT 6
9007: PUSH
9008: EMPTY
9009: LIST
9010: LIST
9011: PPUSH
9012: CALL_OW 69
9016: PUSH
9017: LD_INT 0
9019: EQUAL
9020: AND
9021: IFFALSE 9120
9023: GO 9025
9025: DISABLE
// begin SayRadio ( Popov , DPM_PEnd ) ;
9026: LD_EXP 17
9030: PPUSH
9031: LD_STRING DPM_PEnd
9033: PPUSH
9034: CALL_OW 94
// AddMedal ( med1 , medal1 ) ;
9038: LD_STRING med1
9040: PPUSH
9041: LD_EXP 3
9045: PPUSH
9046: CALL_OW 101
// AddMedal ( med2 , medal2 ) ;
9050: LD_STRING med2
9052: PPUSH
9053: LD_EXP 4
9057: PPUSH
9058: CALL_OW 101
// if dest_counter >= [ 15 , 10 , 7 ] [ Difficulty ] then
9062: LD_EXP 8
9066: PUSH
9067: LD_INT 15
9069: PUSH
9070: LD_INT 10
9072: PUSH
9073: LD_INT 7
9075: PUSH
9076: EMPTY
9077: LIST
9078: LIST
9079: LIST
9080: PUSH
9081: LD_OWVAR 67
9085: ARRAY
9086: GREATEREQUAL
9087: IFFALSE 9097
// medal3 := false ;
9089: LD_ADDR_EXP 5
9093: PUSH
9094: LD_INT 0
9096: ST_TO_ADDR
// AddMedal ( med3 , medal3 ) ;
9097: LD_STRING med3
9099: PPUSH
9100: LD_EXP 5
9104: PPUSH
9105: CALL_OW 101
// GiveMedals ( MAIN ) ;
9109: LD_STRING MAIN
9111: PPUSH
9112: CALL_OW 102
// YouWin ;
9116: CALL_OW 103
// end ;
9120: END
// every 4 4$10 trigger convoy_start do var i ;
9121: LD_EXP 7
9125: IFFALSE 9491
9127: GO 9129
9129: DISABLE
9130: LD_INT 0
9132: PPUSH
// begin DialogueOn ;
9133: CALL_OW 6
// SayRadio ( Popov , DPM_PHelp ) ;
9137: LD_EXP 17
9141: PPUSH
9142: LD_STRING DPM_PHelp
9144: PPUSH
9145: CALL_OW 94
// DialogueOff ;
9149: CALL_OW 7
// Wait ( 0 0$30 ) ;
9153: LD_INT 1050
9155: PPUSH
9156: CALL_OW 67
// Randomize ;
9160: CALL_OW 10
// uc_side := 3 ;
9164: LD_ADDR_OWVAR 20
9168: PUSH
9169: LD_INT 3
9171: ST_TO_ADDR
// uc_nation := 3 ;
9172: LD_ADDR_OWVAR 21
9176: PUSH
9177: LD_INT 3
9179: ST_TO_ADDR
// for i = 1 to [ 5 , 4 , 3 ] [ Difficulty ] do
9180: LD_ADDR_VAR 0 1
9184: PUSH
9185: DOUBLE
9186: LD_INT 1
9188: DEC
9189: ST_TO_ADDR
9190: LD_INT 5
9192: PUSH
9193: LD_INT 4
9195: PUSH
9196: LD_INT 3
9198: PUSH
9199: EMPTY
9200: LIST
9201: LIST
9202: LIST
9203: PUSH
9204: LD_OWVAR 67
9208: ARRAY
9209: PUSH
9210: FOR_TO
9211: IFFALSE 9251
// begin PrepareHuman ( false , Rand ( 1 , 3 ) , 5 ) ;
9213: LD_INT 0
9215: PPUSH
9216: LD_INT 1
9218: PPUSH
9219: LD_INT 3
9221: PPUSH
9222: CALL_OW 12
9226: PPUSH
9227: LD_INT 5
9229: PPUSH
9230: CALL_OW 380
// PlaceUnitArea ( CreateHuman , rus_start , false ) ;
9234: CALL_OW 44
9238: PPUSH
9239: LD_INT 1
9241: PPUSH
9242: LD_INT 0
9244: PPUSH
9245: CALL_OW 49
// end ;
9249: GO 9210
9251: POP
9252: POP
// vc_chassis := ru_heavy_wheeled ;
9253: LD_ADDR_OWVAR 37
9257: PUSH
9258: LD_INT 23
9260: ST_TO_ADDR
// vc_engine := engine_combustion ;
9261: LD_ADDR_OWVAR 39
9265: PUSH
9266: LD_INT 1
9268: ST_TO_ADDR
// vc_control := control_manual ;
9269: LD_ADDR_OWVAR 38
9273: PUSH
9274: LD_INT 1
9276: ST_TO_ADDR
// vc_weapon := 89 ;
9277: LD_ADDR_OWVAR 40
9281: PUSH
9282: LD_INT 89
9284: ST_TO_ADDR
// vc_fuel_battery := 88 ;
9285: LD_ADDR_OWVAR 41
9289: PUSH
9290: LD_INT 88
9292: ST_TO_ADDR
// i := CreateVehicle ;
9293: LD_ADDR_VAR 0 1
9297: PUSH
9298: CALL_OW 45
9302: ST_TO_ADDR
// SetDir ( i , 5 ) ;
9303: LD_VAR 0 1
9307: PPUSH
9308: LD_INT 5
9310: PPUSH
9311: CALL_OW 233
// PlaceUnitXY ( i , 63 , 115 , false ) ;
9315: LD_VAR 0 1
9319: PPUSH
9320: LD_INT 63
9322: PPUSH
9323: LD_INT 115
9325: PPUSH
9326: LD_INT 0
9328: PPUSH
9329: CALL_OW 48
// SetCargo ( i , mat_cans , 200 ) ;
9333: LD_VAR 0 1
9337: PPUSH
9338: LD_INT 1
9340: PPUSH
9341: LD_INT 200
9343: PPUSH
9344: CALL_OW 290
// PrepareHuman ( false , 3 , 5 ) ;
9348: LD_INT 0
9350: PPUSH
9351: LD_INT 3
9353: PPUSH
9354: LD_INT 5
9356: PPUSH
9357: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
9361: CALL_OW 44
9365: PPUSH
9366: LD_VAR 0 1
9370: PPUSH
9371: CALL_OW 52
// DialogueOn ;
9375: CALL_OW 6
// CenterNowOnXY ( 169 , 115 ) ;
9379: LD_INT 169
9381: PPUSH
9382: LD_INT 115
9384: PPUSH
9385: CALL_OW 86
// DWait ( 0 0$01 ) ;
9389: LD_INT 35
9391: PPUSH
9392: CALL_OW 68
// CenterNowOnXY ( 63 , 115 ) ;
9396: LD_INT 63
9398: PPUSH
9399: LD_INT 115
9401: PPUSH
9402: CALL_OW 86
// DWait ( 0 0$01 ) ;
9406: LD_INT 35
9408: PPUSH
9409: CALL_OW 68
// DialogueOff ;
9413: CALL_OW 7
// ComMoveXY ( i , 57 , 53 ) ;
9417: LD_VAR 0 1
9421: PPUSH
9422: LD_INT 57
9424: PPUSH
9425: LD_INT 53
9427: PPUSH
9428: CALL_OW 111
// Wait ( Rand ( 3 3$00 , 7 7$00 ) ) ;
9432: LD_INT 6300
9434: PPUSH
9435: LD_INT 14700
9437: PPUSH
9438: CALL_OW 12
9442: PPUSH
9443: CALL_OW 67
// PlaceUnitXY ( Saseda , 86 , 112 , false ) ;
9447: LD_EXP 18
9451: PPUSH
9452: LD_INT 86
9454: PPUSH
9455: LD_INT 112
9457: PPUSH
9458: LD_INT 0
9460: PPUSH
9461: CALL_OW 48
// Wait ( 0 0$0.3 ) ;
9465: LD_INT 10
9467: PPUSH
9468: CALL_OW 67
// SayRadio ( Saseda , DPM_Sa1 ) ;
9472: LD_EXP 18
9476: PPUSH
9477: LD_STRING DPM_Sa1
9479: PPUSH
9480: CALL_OW 94
// ChangeMissionObjectives ( PM_3 ) ;
9484: LD_STRING PM_3
9486: PPUSH
9487: CALL_OW 337
// end ;
9491: PPOPN 1
9493: END
// every 0 0$01 trigger See ( 3 , Saseda ) do
9494: LD_INT 3
9496: PPUSH
9497: LD_EXP 18
9501: PPUSH
9502: CALL_OW 292
9506: IFFALSE 9555
9508: GO 9510
9510: DISABLE
// begin Say ( Saseda , DPM_Sa2 ) ;
9511: LD_EXP 18
9515: PPUSH
9516: LD_STRING DPM_Sa2
9518: PPUSH
9519: CALL_OW 88
// ChangeMissionObjectives ( PM_4 ) ;
9523: LD_STRING PM_4
9525: PPUSH
9526: CALL_OW 337
// SetTech ( tech_rocket , 3 , state_enabled ) ;
9530: LD_INT 40
9532: PPUSH
9533: LD_INT 3
9535: PPUSH
9536: LD_INT 1
9538: PPUSH
9539: CALL_OW 322
// SetSide ( Saseda , 3 ) ;
9543: LD_EXP 18
9547: PPUSH
9548: LD_INT 3
9550: PPUSH
9551: CALL_OW 235
// end ;
9555: END
// every 16 16$00 trigger not medal1 and FilterAllUnits ( [ f_side , 6 ] ) = 0 do
9556: LD_EXP 3
9560: NOT
9561: PUSH
9562: LD_INT 22
9564: PUSH
9565: LD_INT 6
9567: PUSH
9568: EMPTY
9569: LIST
9570: LIST
9571: PPUSH
9572: CALL_OW 69
9576: PUSH
9577: LD_INT 0
9579: EQUAL
9580: AND
9581: IFFALSE 9643
9583: GO 9585
9585: DISABLE
// begin DialogueOn ;
9586: CALL_OW 6
// Say ( Stolypin , DPM_S3 ) ;
9590: LD_EXP 16
9594: PPUSH
9595: LD_STRING DPM_S3
9597: PPUSH
9598: CALL_OW 88
// PlaceSeeing ( 62 , 113 , 3 , 10 ) ;
9602: LD_INT 62
9604: PPUSH
9605: LD_INT 113
9607: PPUSH
9608: LD_INT 3
9610: PPUSH
9611: LD_INT 10
9613: PPUSH
9614: CALL_OW 330
// CenterOnXY ( 62 , 113 ) ;
9618: LD_INT 62
9620: PPUSH
9621: LD_INT 113
9623: PPUSH
9624: CALL_OW 84
// dwait ( 0 0$1 ) ;
9628: LD_INT 35
9630: PPUSH
9631: CALL_OW 68
// DialogueOff ;
9635: CALL_OW 7
// CounterAttack ;
9639: CALL 5767 0 0
// end ; end_of_file
9643: END
// on LeaveBuilding ( b , h ) do begin if GetSide ( b ) = 1 then
9644: LD_VAR 0 1
9648: PPUSH
9649: CALL_OW 255
9653: PUSH
9654: LD_INT 1
9656: EQUAL
9657: IFFALSE 9693
// if not us_retreat then
9659: LD_EXP 22
9663: NOT
9664: IFFALSE 9693
// if GetClass ( h ) = 1 then
9666: LD_VAR 0 2
9670: PPUSH
9671: CALL_OW 257
9675: PUSH
9676: LD_INT 1
9678: EQUAL
9679: IFFALSE 9693
// ComEnterUnit ( h , us_arm ) ;
9681: LD_VAR 0 2
9685: PPUSH
9686: LD_INT 69
9688: PPUSH
9689: CALL_OW 120
// end ;
9693: PPOPN 2
9695: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
9696: LD_VAR 0 1
9700: PPUSH
9701: CALL 27002 0 1
// if GetSide ( un ) = 1 then
9705: LD_VAR 0 1
9709: PPUSH
9710: CALL_OW 255
9714: PUSH
9715: LD_INT 1
9717: EQUAL
9718: IFFALSE 9734
// us_count := us_count + 1 ;
9720: LD_ADDR_EXP 24
9724: PUSH
9725: LD_EXP 24
9729: PUSH
9730: LD_INT 1
9732: PLUS
9733: ST_TO_ADDR
// if un in us_force then
9734: LD_VAR 0 1
9738: PUSH
9739: LD_EXP 12
9743: IN
9744: IFFALSE 9762
// us_force := us_force diff un ;
9746: LD_ADDR_EXP 12
9750: PUSH
9751: LD_EXP 12
9755: PUSH
9756: LD_VAR 0 1
9760: DIFF
9761: ST_TO_ADDR
// if un in ar_force then
9762: LD_VAR 0 1
9766: PUSH
9767: LD_EXP 11
9771: IN
9772: IFFALSE 9790
// ar_force := ar_force diff un ;
9774: LD_ADDR_EXP 11
9778: PUSH
9779: LD_EXP 11
9783: PUSH
9784: LD_VAR 0 1
9788: DIFF
9789: ST_TO_ADDR
// if un = Stolypin then
9790: LD_VAR 0 1
9794: PUSH
9795: LD_EXP 16
9799: EQUAL
9800: IFFALSE 9809
// YouLost ( dead ) ;
9802: LD_STRING dead
9804: PPUSH
9805: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) then
9809: LD_VAR 0 1
9813: PUSH
9814: LD_INT 22
9816: PUSH
9817: LD_INT 1
9819: PUSH
9820: EMPTY
9821: LIST
9822: LIST
9823: PUSH
9824: LD_INT 30
9826: PUSH
9827: LD_INT 0
9829: PUSH
9830: EMPTY
9831: LIST
9832: LIST
9833: PUSH
9834: EMPTY
9835: LIST
9836: LIST
9837: PPUSH
9838: CALL_OW 69
9842: IN
9843: IFFALSE 9852
// YouLost ( depot ) ;
9845: LD_STRING depot
9847: PPUSH
9848: CALL_OW 104
// if GetSide ( un ) = 6 then
9852: LD_VAR 0 1
9856: PPUSH
9857: CALL_OW 255
9861: PUSH
9862: LD_INT 6
9864: EQUAL
9865: IFFALSE 9881
// dest_counter := dest_counter + 1 ;
9867: LD_ADDR_EXP 8
9871: PUSH
9872: LD_EXP 8
9876: PUSH
9877: LD_INT 1
9879: PLUS
9880: ST_TO_ADDR
// end ;
9881: PPOPN 1
9883: END
// on VehicleConstructed ( un , fac ) do begin SOS_VehicleConstructed ( un , fac ) ;
9884: LD_VAR 0 1
9888: PPUSH
9889: LD_VAR 0 2
9893: PPUSH
9894: CALL 27122 0 2
// if GetSide ( un ) = 1 then
9898: LD_VAR 0 1
9902: PPUSH
9903: CALL_OW 255
9907: PUSH
9908: LD_INT 1
9910: EQUAL
9911: IFFALSE 9928
// ComMoveXY ( un , 57 , 52 ) ;
9913: LD_VAR 0 1
9917: PPUSH
9918: LD_INT 57
9920: PPUSH
9921: LD_INT 52
9923: PPUSH
9924: CALL_OW 111
// end ;
9928: PPOPN 2
9930: END
// on Contact ( s1 , s2 ) do begin if not us_alert then
9931: LD_EXP 21
9935: NOT
9936: IFFALSE 9986
// if ( s1 = 3 and s2 = 1 ) or ( s1 = 1 and s2 = 3 ) then
9938: LD_VAR 0 1
9942: PUSH
9943: LD_INT 3
9945: EQUAL
9946: PUSH
9947: LD_VAR 0 2
9951: PUSH
9952: LD_INT 1
9954: EQUAL
9955: AND
9956: PUSH
9957: LD_VAR 0 1
9961: PUSH
9962: LD_INT 1
9964: EQUAL
9965: PUSH
9966: LD_VAR 0 2
9970: PUSH
9971: LD_INT 3
9973: EQUAL
9974: AND
9975: OR
9976: IFFALSE 9986
// us_alert := true ;
9978: LD_ADDR_EXP 21
9982: PUSH
9983: LD_INT 1
9985: ST_TO_ADDR
// if ( s1 = 6 and s2 = 3 ) or ( s1 = 3 and s2 = 6 ) then
9986: LD_VAR 0 1
9990: PUSH
9991: LD_INT 6
9993: EQUAL
9994: PUSH
9995: LD_VAR 0 2
9999: PUSH
10000: LD_INT 3
10002: EQUAL
10003: AND
10004: PUSH
10005: LD_VAR 0 1
10009: PUSH
10010: LD_INT 3
10012: EQUAL
10013: PUSH
10014: LD_VAR 0 2
10018: PUSH
10019: LD_INT 6
10021: EQUAL
10022: AND
10023: OR
10024: IFFALSE 10033
// YouLost ( alat ) ;
10026: LD_STRING alat
10028: PPUSH
10029: CALL_OW 104
// end ;
10033: PPOPN 2
10035: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) = 2 and un in FilterAllUnits ( [ [ f_empty ] , [ f_type , unit_vehicle ] ] ) then
10036: LD_VAR 0 1
10040: PPUSH
10041: CALL_OW 255
10045: PUSH
10046: LD_INT 2
10048: EQUAL
10049: PUSH
10050: LD_VAR 0 1
10054: PUSH
10055: LD_INT 58
10057: PUSH
10058: EMPTY
10059: LIST
10060: PUSH
10061: LD_INT 21
10063: PUSH
10064: LD_INT 2
10066: PUSH
10067: EMPTY
10068: LIST
10069: LIST
10070: PUSH
10071: EMPTY
10072: LIST
10073: LIST
10074: PPUSH
10075: CALL_OW 69
10079: IN
10080: AND
10081: IFFALSE 10202
// if GetSide ( NearestUnitToUnit ( all_units diff un , un ) ) <> 2 then
10083: LD_OWVAR 3
10087: PUSH
10088: LD_VAR 0 1
10092: DIFF
10093: PPUSH
10094: LD_VAR 0 1
10098: PPUSH
10099: CALL_OW 74
10103: PPUSH
10104: CALL_OW 255
10108: PUSH
10109: LD_INT 2
10111: NONEQUAL
10112: IFFALSE 10202
// begin Wait ( 0 0$1.3 ) ;
10114: LD_INT 46
10116: PPUSH
10117: CALL_OW 67
// MineExplosion ( GetX ( un ) , GetY ( un ) , 1 ) ;
10121: LD_VAR 0 1
10125: PPUSH
10126: CALL_OW 250
10130: PPUSH
10131: LD_VAR 0 1
10135: PPUSH
10136: CALL_OW 251
10140: PPUSH
10141: LD_INT 1
10143: PPUSH
10144: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 1 ) ;
10148: LD_VAR 0 1
10152: PPUSH
10153: CALL_OW 250
10157: PPUSH
10158: LD_VAR 0 1
10162: PPUSH
10163: CALL_OW 251
10167: PPUSH
10168: LD_INT 1
10170: PPUSH
10171: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 1 ) ;
10175: LD_VAR 0 1
10179: PPUSH
10180: CALL_OW 250
10184: PPUSH
10185: LD_VAR 0 1
10189: PPUSH
10190: CALL_OW 251
10194: PPUSH
10195: LD_INT 1
10197: PPUSH
10198: CALL_OW 453
// end ; end ;
10202: PPOPN 1
10204: END
// on EvacuateVehicle ( driver , un , c1 , c2 ) do begin if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) and not GetSide ( NearestUnit ( un ) ) = 2 then
10205: LD_VAR 0 2
10209: PUSH
10210: LD_INT 22
10212: PUSH
10213: LD_INT 2
10215: PUSH
10216: EMPTY
10217: LIST
10218: LIST
10219: PUSH
10220: LD_INT 21
10222: PUSH
10223: LD_INT 2
10225: PUSH
10226: EMPTY
10227: LIST
10228: LIST
10229: PUSH
10230: EMPTY
10231: LIST
10232: LIST
10233: PPUSH
10234: CALL_OW 69
10238: IN
10239: PUSH
10240: LD_VAR 0 2
10244: PPUSH
10245: CALL 10724 0 1
10249: PPUSH
10250: CALL_OW 255
10254: PUSH
10255: LD_INT 2
10257: EQUAL
10258: NOT
10259: AND
10260: IFFALSE 10385
// begin Wait ( Rand ( 0 0$03 , 0 0$06 ) ) ;
10262: LD_INT 105
10264: PPUSH
10265: LD_INT 210
10267: PPUSH
10268: CALL_OW 12
10272: PPUSH
10273: CALL_OW 67
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
10277: LD_VAR 0 2
10281: PPUSH
10282: CALL_OW 250
10286: PPUSH
10287: LD_VAR 0 2
10291: PPUSH
10292: CALL_OW 251
10296: PPUSH
10297: LD_INT 3
10299: PPUSH
10300: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
10304: LD_VAR 0 2
10308: PPUSH
10309: CALL_OW 250
10313: PPUSH
10314: LD_VAR 0 2
10318: PPUSH
10319: CALL_OW 251
10323: PPUSH
10324: LD_INT 3
10326: PPUSH
10327: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
10331: LD_VAR 0 2
10335: PPUSH
10336: CALL_OW 250
10340: PPUSH
10341: LD_VAR 0 2
10345: PPUSH
10346: CALL_OW 251
10350: PPUSH
10351: LD_INT 3
10353: PPUSH
10354: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
10358: LD_VAR 0 2
10362: PPUSH
10363: CALL_OW 250
10367: PPUSH
10368: LD_VAR 0 2
10372: PPUSH
10373: CALL_OW 251
10377: PPUSH
10378: LD_INT 3
10380: PPUSH
10381: CALL_OW 453
// end ; end ;
10385: PPOPN 4
10387: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
10388: LD_VAR 0 1
10392: PPUSH
10393: LD_VAR 0 2
10397: PPUSH
10398: LD_VAR 0 3
10402: PPUSH
10403: CALL 27098 0 3
// end ;
10407: PPOPN 3
10409: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
10410: LD_VAR 0 1
10414: PPUSH
10415: CALL 27106 0 1
// end ; end_of_file
10419: PPOPN 1
10421: END
// export function Replace2 ( tab , j , k , value ) ; var i , tmp ; begin
10422: LD_INT 0
10424: PPUSH
10425: PPUSH
10426: PPUSH
// tmp := Replace ( tab [ j ] , k , value ) ;
10427: LD_ADDR_VAR 0 7
10431: PUSH
10432: LD_VAR 0 1
10436: PUSH
10437: LD_VAR 0 2
10441: ARRAY
10442: PPUSH
10443: LD_VAR 0 3
10447: PPUSH
10448: LD_VAR 0 4
10452: PPUSH
10453: CALL_OW 1
10457: ST_TO_ADDR
// tab := Replace ( tab , j , tmp ) ;
10458: LD_ADDR_VAR 0 1
10462: PUSH
10463: LD_VAR 0 1
10467: PPUSH
10468: LD_VAR 0 2
10472: PPUSH
10473: LD_VAR 0 7
10477: PPUSH
10478: CALL_OW 1
10482: ST_TO_ADDR
// result := tab ;
10483: LD_ADDR_VAR 0 5
10487: PUSH
10488: LD_VAR 0 1
10492: ST_TO_ADDR
// end ;
10493: LD_VAR 0 5
10497: RET
// export function GetDriver ( veh ) ; var i , filter ; begin
10498: LD_INT 0
10500: PPUSH
10501: PPUSH
10502: PPUSH
// if not GetControl ( veh ) = control_manual then
10503: LD_VAR 0 1
10507: PPUSH
10508: CALL_OW 263
10512: PUSH
10513: LD_INT 1
10515: EQUAL
10516: NOT
10517: IFFALSE 10529
// result := false else
10519: LD_ADDR_VAR 0 2
10523: PUSH
10524: LD_INT 0
10526: ST_TO_ADDR
10527: GO 10674
// if veh in FilterAllUnits ( [ f_empty ] ) then
10529: LD_VAR 0 1
10533: PUSH
10534: LD_INT 58
10536: PUSH
10537: EMPTY
10538: LIST
10539: PPUSH
10540: CALL_OW 69
10544: IN
10545: IFFALSE 10557
// result := false else
10547: LD_ADDR_VAR 0 2
10551: PUSH
10552: LD_INT 0
10554: ST_TO_ADDR
10555: GO 10674
// begin filter := FilterAllUnits ( [ [ f_side , GetSide ( veh ) ] , [ f_driving ] ] ) ;
10557: LD_ADDR_VAR 0 4
10561: PUSH
10562: LD_INT 22
10564: PUSH
10565: LD_VAR 0 1
10569: PPUSH
10570: CALL_OW 255
10574: PUSH
10575: EMPTY
10576: LIST
10577: LIST
10578: PUSH
10579: LD_INT 55
10581: PUSH
10582: EMPTY
10583: LIST
10584: PUSH
10585: EMPTY
10586: LIST
10587: LIST
10588: PPUSH
10589: CALL_OW 69
10593: ST_TO_ADDR
// if not filter then
10594: LD_VAR 0 4
10598: NOT
10599: IFFALSE 10611
// result := false else
10601: LD_ADDR_VAR 0 2
10605: PUSH
10606: LD_INT 0
10608: ST_TO_ADDR
10609: GO 10674
// for i = 1 to filter do
10611: LD_ADDR_VAR 0 3
10615: PUSH
10616: DOUBLE
10617: LD_INT 1
10619: DEC
10620: ST_TO_ADDR
10621: LD_VAR 0 4
10625: PUSH
10626: FOR_TO
10627: IFFALSE 10672
// if IsDriver ( filter [ i ] ) = veh then
10629: LD_VAR 0 4
10633: PUSH
10634: LD_VAR 0 3
10638: ARRAY
10639: PPUSH
10640: CALL 66229 0 1
10644: PUSH
10645: LD_VAR 0 1
10649: EQUAL
10650: IFFALSE 10670
// begin result := filter [ i ] ;
10652: LD_ADDR_VAR 0 2
10656: PUSH
10657: LD_VAR 0 4
10661: PUSH
10662: LD_VAR 0 3
10666: ARRAY
10667: ST_TO_ADDR
// break ;
10668: GO 10672
// end ;
10670: GO 10626
10672: POP
10673: POP
// end ; end ;
10674: LD_VAR 0 2
10678: RET
// export function FindTarget ( unit ) ; begin
10679: LD_INT 0
10681: PPUSH
// result := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( unit ) ] ) , unit ) ;
10682: LD_ADDR_VAR 0 2
10686: PUSH
10687: LD_INT 81
10689: PUSH
10690: LD_VAR 0 1
10694: PPUSH
10695: CALL_OW 255
10699: PUSH
10700: EMPTY
10701: LIST
10702: LIST
10703: PPUSH
10704: CALL_OW 69
10708: PPUSH
10709: LD_VAR 0 1
10713: PPUSH
10714: CALL_OW 74
10718: ST_TO_ADDR
// end ;
10719: LD_VAR 0 2
10723: RET
// export function NearestUnit ( unit ) ; begin
10724: LD_INT 0
10726: PPUSH
// result := NearestUnitToUnit ( all_units diff unit , unit ) ;
10727: LD_ADDR_VAR 0 2
10731: PUSH
10732: LD_OWVAR 3
10736: PUSH
10737: LD_VAR 0 1
10741: DIFF
10742: PPUSH
10743: LD_VAR 0 1
10747: PPUSH
10748: CALL_OW 74
10752: ST_TO_ADDR
// end ; end_of_file
10753: LD_VAR 0 2
10757: RET
// every 12 12$00 do
10758: GO 10760
10760: DISABLE
// begin SetWeather ( 1 , 570 , 350 ) ;
10761: LD_INT 1
10763: PPUSH
10764: LD_INT 570
10766: PPUSH
10767: LD_INT 350
10769: PPUSH
10770: CALL_OW 550
// Wait ( Rand ( 5 5$00 , 10 10$00 ) ) ;
10774: LD_INT 10500
10776: PPUSH
10777: LD_INT 21000
10779: PPUSH
10780: CALL_OW 12
10784: PPUSH
10785: CALL_OW 67
// SetWeather ( 0 , 570 , 350 ) ;
10789: LD_INT 0
10791: PPUSH
10792: LD_INT 570
10794: PPUSH
10795: LD_INT 350
10797: PPUSH
10798: CALL_OW 550
// end ;
10802: END
// export function PrepareAnimals ( num1 , num2 , num3 , area ) ; var l , apeman , tiger , bird ; begin
10803: LD_INT 0
10805: PPUSH
10806: PPUSH
10807: PPUSH
10808: PPUSH
10809: PPUSH
// uc_nation = nation_nature ;
10810: LD_ADDR_OWVAR 21
10814: PUSH
10815: LD_INT 0
10817: ST_TO_ADDR
// uc_side = 0 ;
10818: LD_ADDR_OWVAR 20
10822: PUSH
10823: LD_INT 0
10825: ST_TO_ADDR
// l = 0 ;
10826: LD_ADDR_VAR 0 6
10830: PUSH
10831: LD_INT 0
10833: ST_TO_ADDR
// repeat begin uc_direction = Rand ( 0 , 5 ) ;
10834: LD_ADDR_OWVAR 24
10838: PUSH
10839: LD_INT 0
10841: PPUSH
10842: LD_INT 5
10844: PPUSH
10845: CALL_OW 12
10849: ST_TO_ADDR
// hc_agressivity = Rand ( - 5 , 5 ) ;
10850: LD_ADDR_OWVAR 35
10854: PUSH
10855: LD_INT 5
10857: NEG
10858: PPUSH
10859: LD_INT 5
10861: PPUSH
10862: CALL_OW 12
10866: ST_TO_ADDR
// hc_gallery =  ;
10867: LD_ADDR_OWVAR 33
10871: PUSH
10872: LD_STRING 
10874: ST_TO_ADDR
// hc_class = class_apeman ;
10875: LD_ADDR_OWVAR 28
10879: PUSH
10880: LD_INT 12
10882: ST_TO_ADDR
// hc_attr = [ Rand ( 11 , 13 ) , Rand ( 10 , 11 ) ] ;
10883: LD_ADDR_OWVAR 29
10887: PUSH
10888: LD_INT 11
10890: PPUSH
10891: LD_INT 13
10893: PPUSH
10894: CALL_OW 12
10898: PUSH
10899: LD_INT 10
10901: PPUSH
10902: LD_INT 11
10904: PPUSH
10905: CALL_OW 12
10909: PUSH
10910: EMPTY
10911: LIST
10912: LIST
10913: ST_TO_ADDR
// hc_sex = sex_male ;
10914: LD_ADDR_OWVAR 27
10918: PUSH
10919: LD_INT 1
10921: ST_TO_ADDR
// hc_skills = [ Rand ( 0 , 2 ) , 0 , 0 , 0 ] ;
10922: LD_ADDR_OWVAR 31
10926: PUSH
10927: LD_INT 0
10929: PPUSH
10930: LD_INT 2
10932: PPUSH
10933: CALL_OW 12
10937: PUSH
10938: LD_INT 0
10940: PUSH
10941: LD_INT 0
10943: PUSH
10944: LD_INT 0
10946: PUSH
10947: EMPTY
10948: LIST
10949: LIST
10950: LIST
10951: LIST
10952: ST_TO_ADDR
// apeman = CreateHuman ;
10953: LD_ADDR_VAR 0 7
10957: PUSH
10958: CALL_OW 44
10962: ST_TO_ADDR
// PlaceUnitArea ( apeman , area , false ) ;
10963: LD_VAR 0 7
10967: PPUSH
10968: LD_VAR 0 4
10972: PPUSH
10973: LD_INT 0
10975: PPUSH
10976: CALL_OW 49
// l = l + 1 ;
10980: LD_ADDR_VAR 0 6
10984: PUSH
10985: LD_VAR 0 6
10989: PUSH
10990: LD_INT 1
10992: PLUS
10993: ST_TO_ADDR
// end until l = num1 ;
10994: LD_VAR 0 6
10998: PUSH
10999: LD_VAR 0 1
11003: EQUAL
11004: IFFALSE 10834
// l = 0 ;
11006: LD_ADDR_VAR 0 6
11010: PUSH
11011: LD_INT 0
11013: ST_TO_ADDR
// repeat begin hc_agressivity = Rand ( 0 , 25 ) ;
11014: LD_ADDR_OWVAR 35
11018: PUSH
11019: LD_INT 0
11021: PPUSH
11022: LD_INT 25
11024: PPUSH
11025: CALL_OW 12
11029: ST_TO_ADDR
// hc_class = class_tiger ;
11030: LD_ADDR_OWVAR 28
11034: PUSH
11035: LD_INT 14
11037: ST_TO_ADDR
// hc_sex = sex_male ;
11038: LD_ADDR_OWVAR 27
11042: PUSH
11043: LD_INT 1
11045: ST_TO_ADDR
// hc_gallery = sandnature ;
11046: LD_ADDR_OWVAR 33
11050: PUSH
11051: LD_STRING sandnature
11053: ST_TO_ADDR
// hc_face_number = 3 ;
11054: LD_ADDR_OWVAR 34
11058: PUSH
11059: LD_INT 3
11061: ST_TO_ADDR
// tiger = CreateHuman ;
11062: LD_ADDR_VAR 0 8
11066: PUSH
11067: CALL_OW 44
11071: ST_TO_ADDR
// PlaceUnitArea ( tiger , area , false ) ;
11072: LD_VAR 0 8
11076: PPUSH
11077: LD_VAR 0 4
11081: PPUSH
11082: LD_INT 0
11084: PPUSH
11085: CALL_OW 49
// l = l + 1 ;
11089: LD_ADDR_VAR 0 6
11093: PUSH
11094: LD_VAR 0 6
11098: PUSH
11099: LD_INT 1
11101: PLUS
11102: ST_TO_ADDR
// end until l = num2 ;
11103: LD_VAR 0 6
11107: PUSH
11108: LD_VAR 0 2
11112: EQUAL
11113: IFFALSE 11014
// l = 0 ;
11115: LD_ADDR_VAR 0 6
11119: PUSH
11120: LD_INT 0
11122: ST_TO_ADDR
// repeat begin hc_class = class_phororhacos ;
11123: LD_ADDR_OWVAR 28
11127: PUSH
11128: LD_INT 18
11130: ST_TO_ADDR
// hc_gallery = sandnature ;
11131: LD_ADDR_OWVAR 33
11135: PUSH
11136: LD_STRING sandnature
11138: ST_TO_ADDR
// hc_face_number = 1 ;
11139: LD_ADDR_OWVAR 34
11143: PUSH
11144: LD_INT 1
11146: ST_TO_ADDR
// bird = CreateHuman ;
11147: LD_ADDR_VAR 0 9
11151: PUSH
11152: CALL_OW 44
11156: ST_TO_ADDR
// PlaceUnitAnywhere ( bird , false ) ;
11157: LD_VAR 0 9
11161: PPUSH
11162: LD_INT 0
11164: PPUSH
11165: CALL_OW 51
// l = l + 1 ;
11169: LD_ADDR_VAR 0 6
11173: PUSH
11174: LD_VAR 0 6
11178: PUSH
11179: LD_INT 1
11181: PLUS
11182: ST_TO_ADDR
// end until l = num3 ;
11183: LD_VAR 0 6
11187: PUSH
11188: LD_VAR 0 3
11192: EQUAL
11193: IFFALSE 11123
// end ; end_of_file end_of_file
11195: LD_VAR 0 5
11199: RET
// export globalGameSaveCounter ; every 0 0$1 do
11200: GO 11202
11202: DISABLE
// begin enable ;
11203: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
11204: LD_STRING updateTimer(
11206: PUSH
11207: LD_OWVAR 1
11211: STR
11212: PUSH
11213: LD_STRING );
11215: STR
11216: PPUSH
11217: CALL_OW 559
// end ;
11221: END
// every 0 0$1 do
11222: GO 11224
11224: DISABLE
// begin globalGameSaveCounter := 0 ;
11225: LD_ADDR_EXP 26
11229: PUSH
11230: LD_INT 0
11232: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
11233: LD_STRING setGameSaveCounter(0)
11235: PPUSH
11236: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
11240: LD_STRING initStreamRollete();
11242: PPUSH
11243: CALL_OW 559
// InitStreamMode ;
11247: CALL 12573 0 0
// DefineStreamItems ( false ) ;
11251: LD_INT 0
11253: PPUSH
11254: CALL 13037 0 1
// end ;
11258: END
// export function SOS_MapStart ( ) ; begin
11259: LD_INT 0
11261: PPUSH
// if streamModeActive then
11262: LD_EXP 27
11266: IFFALSE 11275
// DefineStreamItems ( true ) ;
11268: LD_INT 1
11270: PPUSH
11271: CALL 13037 0 1
// UpdateLuaVariables ( ) ;
11275: CALL 11292 0 0
// UpdateFactoryWaypoints ( ) ;
11279: CALL 25906 0 0
// UpdateWarehouseGatheringPoints ( ) ;
11283: CALL 26163 0 0
// end ;
11287: LD_VAR 0 1
11291: RET
// function UpdateLuaVariables ( ) ; begin
11292: LD_INT 0
11294: PPUSH
// if globalGameSaveCounter then
11295: LD_EXP 26
11299: IFFALSE 11333
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
11301: LD_ADDR_EXP 26
11305: PUSH
11306: LD_EXP 26
11310: PPUSH
11311: CALL 69973 0 1
11315: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
11316: LD_STRING setGameSaveCounter(
11318: PUSH
11319: LD_EXP 26
11323: STR
11324: PUSH
11325: LD_STRING )
11327: STR
11328: PPUSH
11329: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
11333: LD_STRING setGameDifficulty(
11335: PUSH
11336: LD_OWVAR 67
11340: STR
11341: PUSH
11342: LD_STRING )
11344: STR
11345: PPUSH
11346: CALL_OW 559
// end ;
11350: LD_VAR 0 1
11354: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
11355: LD_INT 0
11357: PPUSH
// if p2 = stream_mode then
11358: LD_VAR 0 2
11362: PUSH
11363: LD_INT 100
11365: EQUAL
11366: IFFALSE 12369
// begin if not StreamModeActive then
11368: LD_EXP 27
11372: NOT
11373: IFFALSE 11383
// StreamModeActive := true ;
11375: LD_ADDR_EXP 27
11379: PUSH
11380: LD_INT 1
11382: ST_TO_ADDR
// if p3 = 0 then
11383: LD_VAR 0 3
11387: PUSH
11388: LD_INT 0
11390: EQUAL
11391: IFFALSE 11397
// InitStreamMode ;
11393: CALL 12573 0 0
// if p3 = 1 then
11397: LD_VAR 0 3
11401: PUSH
11402: LD_INT 1
11404: EQUAL
11405: IFFALSE 11415
// sRocket := true ;
11407: LD_ADDR_EXP 32
11411: PUSH
11412: LD_INT 1
11414: ST_TO_ADDR
// if p3 = 2 then
11415: LD_VAR 0 3
11419: PUSH
11420: LD_INT 2
11422: EQUAL
11423: IFFALSE 11433
// sSpeed := true ;
11425: LD_ADDR_EXP 31
11429: PUSH
11430: LD_INT 1
11432: ST_TO_ADDR
// if p3 = 3 then
11433: LD_VAR 0 3
11437: PUSH
11438: LD_INT 3
11440: EQUAL
11441: IFFALSE 11451
// sEngine := true ;
11443: LD_ADDR_EXP 33
11447: PUSH
11448: LD_INT 1
11450: ST_TO_ADDR
// if p3 = 4 then
11451: LD_VAR 0 3
11455: PUSH
11456: LD_INT 4
11458: EQUAL
11459: IFFALSE 11469
// sSpec := true ;
11461: LD_ADDR_EXP 30
11465: PUSH
11466: LD_INT 1
11468: ST_TO_ADDR
// if p3 = 5 then
11469: LD_VAR 0 3
11473: PUSH
11474: LD_INT 5
11476: EQUAL
11477: IFFALSE 11487
// sLevel := true ;
11479: LD_ADDR_EXP 34
11483: PUSH
11484: LD_INT 1
11486: ST_TO_ADDR
// if p3 = 6 then
11487: LD_VAR 0 3
11491: PUSH
11492: LD_INT 6
11494: EQUAL
11495: IFFALSE 11505
// sArmoury := true ;
11497: LD_ADDR_EXP 35
11501: PUSH
11502: LD_INT 1
11504: ST_TO_ADDR
// if p3 = 7 then
11505: LD_VAR 0 3
11509: PUSH
11510: LD_INT 7
11512: EQUAL
11513: IFFALSE 11523
// sRadar := true ;
11515: LD_ADDR_EXP 36
11519: PUSH
11520: LD_INT 1
11522: ST_TO_ADDR
// if p3 = 8 then
11523: LD_VAR 0 3
11527: PUSH
11528: LD_INT 8
11530: EQUAL
11531: IFFALSE 11541
// sBunker := true ;
11533: LD_ADDR_EXP 37
11537: PUSH
11538: LD_INT 1
11540: ST_TO_ADDR
// if p3 = 9 then
11541: LD_VAR 0 3
11545: PUSH
11546: LD_INT 9
11548: EQUAL
11549: IFFALSE 11559
// sHack := true ;
11551: LD_ADDR_EXP 38
11555: PUSH
11556: LD_INT 1
11558: ST_TO_ADDR
// if p3 = 10 then
11559: LD_VAR 0 3
11563: PUSH
11564: LD_INT 10
11566: EQUAL
11567: IFFALSE 11577
// sFire := true ;
11569: LD_ADDR_EXP 39
11573: PUSH
11574: LD_INT 1
11576: ST_TO_ADDR
// if p3 = 11 then
11577: LD_VAR 0 3
11581: PUSH
11582: LD_INT 11
11584: EQUAL
11585: IFFALSE 11595
// sRefresh := true ;
11587: LD_ADDR_EXP 40
11591: PUSH
11592: LD_INT 1
11594: ST_TO_ADDR
// if p3 = 12 then
11595: LD_VAR 0 3
11599: PUSH
11600: LD_INT 12
11602: EQUAL
11603: IFFALSE 11613
// sExp := true ;
11605: LD_ADDR_EXP 41
11609: PUSH
11610: LD_INT 1
11612: ST_TO_ADDR
// if p3 = 13 then
11613: LD_VAR 0 3
11617: PUSH
11618: LD_INT 13
11620: EQUAL
11621: IFFALSE 11631
// sDepot := true ;
11623: LD_ADDR_EXP 42
11627: PUSH
11628: LD_INT 1
11630: ST_TO_ADDR
// if p3 = 14 then
11631: LD_VAR 0 3
11635: PUSH
11636: LD_INT 14
11638: EQUAL
11639: IFFALSE 11649
// sFlag := true ;
11641: LD_ADDR_EXP 43
11645: PUSH
11646: LD_INT 1
11648: ST_TO_ADDR
// if p3 = 15 then
11649: LD_VAR 0 3
11653: PUSH
11654: LD_INT 15
11656: EQUAL
11657: IFFALSE 11667
// sKamikadze := true ;
11659: LD_ADDR_EXP 51
11663: PUSH
11664: LD_INT 1
11666: ST_TO_ADDR
// if p3 = 16 then
11667: LD_VAR 0 3
11671: PUSH
11672: LD_INT 16
11674: EQUAL
11675: IFFALSE 11685
// sTroll := true ;
11677: LD_ADDR_EXP 52
11681: PUSH
11682: LD_INT 1
11684: ST_TO_ADDR
// if p3 = 17 then
11685: LD_VAR 0 3
11689: PUSH
11690: LD_INT 17
11692: EQUAL
11693: IFFALSE 11703
// sSlow := true ;
11695: LD_ADDR_EXP 53
11699: PUSH
11700: LD_INT 1
11702: ST_TO_ADDR
// if p3 = 18 then
11703: LD_VAR 0 3
11707: PUSH
11708: LD_INT 18
11710: EQUAL
11711: IFFALSE 11721
// sLack := true ;
11713: LD_ADDR_EXP 54
11717: PUSH
11718: LD_INT 1
11720: ST_TO_ADDR
// if p3 = 19 then
11721: LD_VAR 0 3
11725: PUSH
11726: LD_INT 19
11728: EQUAL
11729: IFFALSE 11739
// sTank := true ;
11731: LD_ADDR_EXP 56
11735: PUSH
11736: LD_INT 1
11738: ST_TO_ADDR
// if p3 = 20 then
11739: LD_VAR 0 3
11743: PUSH
11744: LD_INT 20
11746: EQUAL
11747: IFFALSE 11757
// sRemote := true ;
11749: LD_ADDR_EXP 57
11753: PUSH
11754: LD_INT 1
11756: ST_TO_ADDR
// if p3 = 21 then
11757: LD_VAR 0 3
11761: PUSH
11762: LD_INT 21
11764: EQUAL
11765: IFFALSE 11775
// sPowell := true ;
11767: LD_ADDR_EXP 58
11771: PUSH
11772: LD_INT 1
11774: ST_TO_ADDR
// if p3 = 22 then
11775: LD_VAR 0 3
11779: PUSH
11780: LD_INT 22
11782: EQUAL
11783: IFFALSE 11793
// sTeleport := true ;
11785: LD_ADDR_EXP 61
11789: PUSH
11790: LD_INT 1
11792: ST_TO_ADDR
// if p3 = 23 then
11793: LD_VAR 0 3
11797: PUSH
11798: LD_INT 23
11800: EQUAL
11801: IFFALSE 11811
// sOilTower := true ;
11803: LD_ADDR_EXP 63
11807: PUSH
11808: LD_INT 1
11810: ST_TO_ADDR
// if p3 = 24 then
11811: LD_VAR 0 3
11815: PUSH
11816: LD_INT 24
11818: EQUAL
11819: IFFALSE 11829
// sShovel := true ;
11821: LD_ADDR_EXP 64
11825: PUSH
11826: LD_INT 1
11828: ST_TO_ADDR
// if p3 = 25 then
11829: LD_VAR 0 3
11833: PUSH
11834: LD_INT 25
11836: EQUAL
11837: IFFALSE 11847
// sSheik := true ;
11839: LD_ADDR_EXP 65
11843: PUSH
11844: LD_INT 1
11846: ST_TO_ADDR
// if p3 = 26 then
11847: LD_VAR 0 3
11851: PUSH
11852: LD_INT 26
11854: EQUAL
11855: IFFALSE 11865
// sEarthquake := true ;
11857: LD_ADDR_EXP 67
11861: PUSH
11862: LD_INT 1
11864: ST_TO_ADDR
// if p3 = 27 then
11865: LD_VAR 0 3
11869: PUSH
11870: LD_INT 27
11872: EQUAL
11873: IFFALSE 11883
// sAI := true ;
11875: LD_ADDR_EXP 68
11879: PUSH
11880: LD_INT 1
11882: ST_TO_ADDR
// if p3 = 28 then
11883: LD_VAR 0 3
11887: PUSH
11888: LD_INT 28
11890: EQUAL
11891: IFFALSE 11901
// sCargo := true ;
11893: LD_ADDR_EXP 71
11897: PUSH
11898: LD_INT 1
11900: ST_TO_ADDR
// if p3 = 29 then
11901: LD_VAR 0 3
11905: PUSH
11906: LD_INT 29
11908: EQUAL
11909: IFFALSE 11919
// sDLaser := true ;
11911: LD_ADDR_EXP 72
11915: PUSH
11916: LD_INT 1
11918: ST_TO_ADDR
// if p3 = 30 then
11919: LD_VAR 0 3
11923: PUSH
11924: LD_INT 30
11926: EQUAL
11927: IFFALSE 11937
// sExchange := true ;
11929: LD_ADDR_EXP 73
11933: PUSH
11934: LD_INT 1
11936: ST_TO_ADDR
// if p3 = 31 then
11937: LD_VAR 0 3
11941: PUSH
11942: LD_INT 31
11944: EQUAL
11945: IFFALSE 11955
// sFac := true ;
11947: LD_ADDR_EXP 74
11951: PUSH
11952: LD_INT 1
11954: ST_TO_ADDR
// if p3 = 32 then
11955: LD_VAR 0 3
11959: PUSH
11960: LD_INT 32
11962: EQUAL
11963: IFFALSE 11973
// sPower := true ;
11965: LD_ADDR_EXP 75
11969: PUSH
11970: LD_INT 1
11972: ST_TO_ADDR
// if p3 = 33 then
11973: LD_VAR 0 3
11977: PUSH
11978: LD_INT 33
11980: EQUAL
11981: IFFALSE 11991
// sRandom := true ;
11983: LD_ADDR_EXP 76
11987: PUSH
11988: LD_INT 1
11990: ST_TO_ADDR
// if p3 = 34 then
11991: LD_VAR 0 3
11995: PUSH
11996: LD_INT 34
11998: EQUAL
11999: IFFALSE 12009
// sShield := true ;
12001: LD_ADDR_EXP 77
12005: PUSH
12006: LD_INT 1
12008: ST_TO_ADDR
// if p3 = 35 then
12009: LD_VAR 0 3
12013: PUSH
12014: LD_INT 35
12016: EQUAL
12017: IFFALSE 12027
// sTime := true ;
12019: LD_ADDR_EXP 78
12023: PUSH
12024: LD_INT 1
12026: ST_TO_ADDR
// if p3 = 36 then
12027: LD_VAR 0 3
12031: PUSH
12032: LD_INT 36
12034: EQUAL
12035: IFFALSE 12045
// sTools := true ;
12037: LD_ADDR_EXP 79
12041: PUSH
12042: LD_INT 1
12044: ST_TO_ADDR
// if p3 = 101 then
12045: LD_VAR 0 3
12049: PUSH
12050: LD_INT 101
12052: EQUAL
12053: IFFALSE 12063
// sSold := true ;
12055: LD_ADDR_EXP 44
12059: PUSH
12060: LD_INT 1
12062: ST_TO_ADDR
// if p3 = 102 then
12063: LD_VAR 0 3
12067: PUSH
12068: LD_INT 102
12070: EQUAL
12071: IFFALSE 12081
// sDiff := true ;
12073: LD_ADDR_EXP 45
12077: PUSH
12078: LD_INT 1
12080: ST_TO_ADDR
// if p3 = 103 then
12081: LD_VAR 0 3
12085: PUSH
12086: LD_INT 103
12088: EQUAL
12089: IFFALSE 12099
// sFog := true ;
12091: LD_ADDR_EXP 48
12095: PUSH
12096: LD_INT 1
12098: ST_TO_ADDR
// if p3 = 104 then
12099: LD_VAR 0 3
12103: PUSH
12104: LD_INT 104
12106: EQUAL
12107: IFFALSE 12117
// sReset := true ;
12109: LD_ADDR_EXP 49
12113: PUSH
12114: LD_INT 1
12116: ST_TO_ADDR
// if p3 = 105 then
12117: LD_VAR 0 3
12121: PUSH
12122: LD_INT 105
12124: EQUAL
12125: IFFALSE 12135
// sSun := true ;
12127: LD_ADDR_EXP 50
12131: PUSH
12132: LD_INT 1
12134: ST_TO_ADDR
// if p3 = 106 then
12135: LD_VAR 0 3
12139: PUSH
12140: LD_INT 106
12142: EQUAL
12143: IFFALSE 12153
// sTiger := true ;
12145: LD_ADDR_EXP 46
12149: PUSH
12150: LD_INT 1
12152: ST_TO_ADDR
// if p3 = 107 then
12153: LD_VAR 0 3
12157: PUSH
12158: LD_INT 107
12160: EQUAL
12161: IFFALSE 12171
// sBomb := true ;
12163: LD_ADDR_EXP 47
12167: PUSH
12168: LD_INT 1
12170: ST_TO_ADDR
// if p3 = 108 then
12171: LD_VAR 0 3
12175: PUSH
12176: LD_INT 108
12178: EQUAL
12179: IFFALSE 12189
// sWound := true ;
12181: LD_ADDR_EXP 55
12185: PUSH
12186: LD_INT 1
12188: ST_TO_ADDR
// if p3 = 109 then
12189: LD_VAR 0 3
12193: PUSH
12194: LD_INT 109
12196: EQUAL
12197: IFFALSE 12207
// sBetray := true ;
12199: LD_ADDR_EXP 59
12203: PUSH
12204: LD_INT 1
12206: ST_TO_ADDR
// if p3 = 110 then
12207: LD_VAR 0 3
12211: PUSH
12212: LD_INT 110
12214: EQUAL
12215: IFFALSE 12225
// sContamin := true ;
12217: LD_ADDR_EXP 60
12221: PUSH
12222: LD_INT 1
12224: ST_TO_ADDR
// if p3 = 111 then
12225: LD_VAR 0 3
12229: PUSH
12230: LD_INT 111
12232: EQUAL
12233: IFFALSE 12243
// sOil := true ;
12235: LD_ADDR_EXP 62
12239: PUSH
12240: LD_INT 1
12242: ST_TO_ADDR
// if p3 = 112 then
12243: LD_VAR 0 3
12247: PUSH
12248: LD_INT 112
12250: EQUAL
12251: IFFALSE 12261
// sStu := true ;
12253: LD_ADDR_EXP 66
12257: PUSH
12258: LD_INT 1
12260: ST_TO_ADDR
// if p3 = 113 then
12261: LD_VAR 0 3
12265: PUSH
12266: LD_INT 113
12268: EQUAL
12269: IFFALSE 12279
// sBazooka := true ;
12271: LD_ADDR_EXP 69
12275: PUSH
12276: LD_INT 1
12278: ST_TO_ADDR
// if p3 = 114 then
12279: LD_VAR 0 3
12283: PUSH
12284: LD_INT 114
12286: EQUAL
12287: IFFALSE 12297
// sMortar := true ;
12289: LD_ADDR_EXP 70
12293: PUSH
12294: LD_INT 1
12296: ST_TO_ADDR
// if p3 = 115 then
12297: LD_VAR 0 3
12301: PUSH
12302: LD_INT 115
12304: EQUAL
12305: IFFALSE 12315
// sRanger := true ;
12307: LD_ADDR_EXP 80
12311: PUSH
12312: LD_INT 1
12314: ST_TO_ADDR
// if p3 = 116 then
12315: LD_VAR 0 3
12319: PUSH
12320: LD_INT 116
12322: EQUAL
12323: IFFALSE 12333
// sComputer := true ;
12325: LD_ADDR_EXP 81
12329: PUSH
12330: LD_INT 1
12332: ST_TO_ADDR
// if p3 = 117 then
12333: LD_VAR 0 3
12337: PUSH
12338: LD_INT 117
12340: EQUAL
12341: IFFALSE 12351
// s30 := true ;
12343: LD_ADDR_EXP 82
12347: PUSH
12348: LD_INT 1
12350: ST_TO_ADDR
// if p3 = 118 then
12351: LD_VAR 0 3
12355: PUSH
12356: LD_INT 118
12358: EQUAL
12359: IFFALSE 12369
// s60 := true ;
12361: LD_ADDR_EXP 83
12365: PUSH
12366: LD_INT 1
12368: ST_TO_ADDR
// end ; if p2 = hack_mode then
12369: LD_VAR 0 2
12373: PUSH
12374: LD_INT 101
12376: EQUAL
12377: IFFALSE 12505
// begin case p3 of 1 :
12379: LD_VAR 0 3
12383: PUSH
12384: LD_INT 1
12386: DOUBLE
12387: EQUAL
12388: IFTRUE 12392
12390: GO 12399
12392: POP
// hHackUnlimitedResources ; 2 :
12393: CALL 24652 0 0
12397: GO 12505
12399: LD_INT 2
12401: DOUBLE
12402: EQUAL
12403: IFTRUE 12407
12405: GO 12414
12407: POP
// hHackSetLevel10 ; 3 :
12408: CALL 24785 0 0
12412: GO 12505
12414: LD_INT 3
12416: DOUBLE
12417: EQUAL
12418: IFTRUE 12422
12420: GO 12429
12422: POP
// hHackSetLevel10YourUnits ; 4 :
12423: CALL 24870 0 0
12427: GO 12505
12429: LD_INT 4
12431: DOUBLE
12432: EQUAL
12433: IFTRUE 12437
12435: GO 12444
12437: POP
// hHackInvincible ; 5 :
12438: CALL 25318 0 0
12442: GO 12505
12444: LD_INT 5
12446: DOUBLE
12447: EQUAL
12448: IFTRUE 12452
12450: GO 12459
12452: POP
// hHackInvisible ; 6 :
12453: CALL 25429 0 0
12457: GO 12505
12459: LD_INT 6
12461: DOUBLE
12462: EQUAL
12463: IFTRUE 12467
12465: GO 12474
12467: POP
// hHackChangeYourSide ; 7 :
12468: CALL 25486 0 0
12472: GO 12505
12474: LD_INT 7
12476: DOUBLE
12477: EQUAL
12478: IFTRUE 12482
12480: GO 12489
12482: POP
// hHackChangeUnitSide ; 8 :
12483: CALL 25528 0 0
12487: GO 12505
12489: LD_INT 8
12491: DOUBLE
12492: EQUAL
12493: IFTRUE 12497
12495: GO 12504
12497: POP
// hHackFog ; end ;
12498: CALL 25629 0 0
12502: GO 12505
12504: POP
// end ; if p2 = game_save_mode then
12505: LD_VAR 0 2
12509: PUSH
12510: LD_INT 102
12512: EQUAL
12513: IFFALSE 12568
// begin if p3 = 1 then
12515: LD_VAR 0 3
12519: PUSH
12520: LD_INT 1
12522: EQUAL
12523: IFFALSE 12535
// globalGameSaveCounter := p4 ;
12525: LD_ADDR_EXP 26
12529: PUSH
12530: LD_VAR 0 4
12534: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
12535: LD_VAR 0 3
12539: PUSH
12540: LD_INT 2
12542: EQUAL
12543: PUSH
12544: LD_EXP 26
12548: AND
12549: IFFALSE 12568
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
12551: LD_STRING setGameSaveCounter(
12553: PUSH
12554: LD_EXP 26
12558: STR
12559: PUSH
12560: LD_STRING )
12562: STR
12563: PPUSH
12564: CALL_OW 559
// end ; end ;
12568: LD_VAR 0 7
12572: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
12573: LD_INT 0
12575: PPUSH
// streamModeActive := false ;
12576: LD_ADDR_EXP 27
12580: PUSH
12581: LD_INT 0
12583: ST_TO_ADDR
// normalCounter := 36 ;
12584: LD_ADDR_EXP 28
12588: PUSH
12589: LD_INT 36
12591: ST_TO_ADDR
// hardcoreCounter := 18 ;
12592: LD_ADDR_EXP 29
12596: PUSH
12597: LD_INT 18
12599: ST_TO_ADDR
// sRocket := false ;
12600: LD_ADDR_EXP 32
12604: PUSH
12605: LD_INT 0
12607: ST_TO_ADDR
// sSpeed := false ;
12608: LD_ADDR_EXP 31
12612: PUSH
12613: LD_INT 0
12615: ST_TO_ADDR
// sEngine := false ;
12616: LD_ADDR_EXP 33
12620: PUSH
12621: LD_INT 0
12623: ST_TO_ADDR
// sSpec := false ;
12624: LD_ADDR_EXP 30
12628: PUSH
12629: LD_INT 0
12631: ST_TO_ADDR
// sLevel := false ;
12632: LD_ADDR_EXP 34
12636: PUSH
12637: LD_INT 0
12639: ST_TO_ADDR
// sArmoury := false ;
12640: LD_ADDR_EXP 35
12644: PUSH
12645: LD_INT 0
12647: ST_TO_ADDR
// sRadar := false ;
12648: LD_ADDR_EXP 36
12652: PUSH
12653: LD_INT 0
12655: ST_TO_ADDR
// sBunker := false ;
12656: LD_ADDR_EXP 37
12660: PUSH
12661: LD_INT 0
12663: ST_TO_ADDR
// sHack := false ;
12664: LD_ADDR_EXP 38
12668: PUSH
12669: LD_INT 0
12671: ST_TO_ADDR
// sFire := false ;
12672: LD_ADDR_EXP 39
12676: PUSH
12677: LD_INT 0
12679: ST_TO_ADDR
// sRefresh := false ;
12680: LD_ADDR_EXP 40
12684: PUSH
12685: LD_INT 0
12687: ST_TO_ADDR
// sExp := false ;
12688: LD_ADDR_EXP 41
12692: PUSH
12693: LD_INT 0
12695: ST_TO_ADDR
// sDepot := false ;
12696: LD_ADDR_EXP 42
12700: PUSH
12701: LD_INT 0
12703: ST_TO_ADDR
// sFlag := false ;
12704: LD_ADDR_EXP 43
12708: PUSH
12709: LD_INT 0
12711: ST_TO_ADDR
// sKamikadze := false ;
12712: LD_ADDR_EXP 51
12716: PUSH
12717: LD_INT 0
12719: ST_TO_ADDR
// sTroll := false ;
12720: LD_ADDR_EXP 52
12724: PUSH
12725: LD_INT 0
12727: ST_TO_ADDR
// sSlow := false ;
12728: LD_ADDR_EXP 53
12732: PUSH
12733: LD_INT 0
12735: ST_TO_ADDR
// sLack := false ;
12736: LD_ADDR_EXP 54
12740: PUSH
12741: LD_INT 0
12743: ST_TO_ADDR
// sTank := false ;
12744: LD_ADDR_EXP 56
12748: PUSH
12749: LD_INT 0
12751: ST_TO_ADDR
// sRemote := false ;
12752: LD_ADDR_EXP 57
12756: PUSH
12757: LD_INT 0
12759: ST_TO_ADDR
// sPowell := false ;
12760: LD_ADDR_EXP 58
12764: PUSH
12765: LD_INT 0
12767: ST_TO_ADDR
// sTeleport := false ;
12768: LD_ADDR_EXP 61
12772: PUSH
12773: LD_INT 0
12775: ST_TO_ADDR
// sOilTower := false ;
12776: LD_ADDR_EXP 63
12780: PUSH
12781: LD_INT 0
12783: ST_TO_ADDR
// sShovel := false ;
12784: LD_ADDR_EXP 64
12788: PUSH
12789: LD_INT 0
12791: ST_TO_ADDR
// sSheik := false ;
12792: LD_ADDR_EXP 65
12796: PUSH
12797: LD_INT 0
12799: ST_TO_ADDR
// sEarthquake := false ;
12800: LD_ADDR_EXP 67
12804: PUSH
12805: LD_INT 0
12807: ST_TO_ADDR
// sAI := false ;
12808: LD_ADDR_EXP 68
12812: PUSH
12813: LD_INT 0
12815: ST_TO_ADDR
// sCargo := false ;
12816: LD_ADDR_EXP 71
12820: PUSH
12821: LD_INT 0
12823: ST_TO_ADDR
// sDLaser := false ;
12824: LD_ADDR_EXP 72
12828: PUSH
12829: LD_INT 0
12831: ST_TO_ADDR
// sExchange := false ;
12832: LD_ADDR_EXP 73
12836: PUSH
12837: LD_INT 0
12839: ST_TO_ADDR
// sFac := false ;
12840: LD_ADDR_EXP 74
12844: PUSH
12845: LD_INT 0
12847: ST_TO_ADDR
// sPower := false ;
12848: LD_ADDR_EXP 75
12852: PUSH
12853: LD_INT 0
12855: ST_TO_ADDR
// sRandom := false ;
12856: LD_ADDR_EXP 76
12860: PUSH
12861: LD_INT 0
12863: ST_TO_ADDR
// sShield := false ;
12864: LD_ADDR_EXP 77
12868: PUSH
12869: LD_INT 0
12871: ST_TO_ADDR
// sTime := false ;
12872: LD_ADDR_EXP 78
12876: PUSH
12877: LD_INT 0
12879: ST_TO_ADDR
// sTools := false ;
12880: LD_ADDR_EXP 79
12884: PUSH
12885: LD_INT 0
12887: ST_TO_ADDR
// sSold := false ;
12888: LD_ADDR_EXP 44
12892: PUSH
12893: LD_INT 0
12895: ST_TO_ADDR
// sDiff := false ;
12896: LD_ADDR_EXP 45
12900: PUSH
12901: LD_INT 0
12903: ST_TO_ADDR
// sFog := false ;
12904: LD_ADDR_EXP 48
12908: PUSH
12909: LD_INT 0
12911: ST_TO_ADDR
// sReset := false ;
12912: LD_ADDR_EXP 49
12916: PUSH
12917: LD_INT 0
12919: ST_TO_ADDR
// sSun := false ;
12920: LD_ADDR_EXP 50
12924: PUSH
12925: LD_INT 0
12927: ST_TO_ADDR
// sTiger := false ;
12928: LD_ADDR_EXP 46
12932: PUSH
12933: LD_INT 0
12935: ST_TO_ADDR
// sBomb := false ;
12936: LD_ADDR_EXP 47
12940: PUSH
12941: LD_INT 0
12943: ST_TO_ADDR
// sWound := false ;
12944: LD_ADDR_EXP 55
12948: PUSH
12949: LD_INT 0
12951: ST_TO_ADDR
// sBetray := false ;
12952: LD_ADDR_EXP 59
12956: PUSH
12957: LD_INT 0
12959: ST_TO_ADDR
// sContamin := false ;
12960: LD_ADDR_EXP 60
12964: PUSH
12965: LD_INT 0
12967: ST_TO_ADDR
// sOil := false ;
12968: LD_ADDR_EXP 62
12972: PUSH
12973: LD_INT 0
12975: ST_TO_ADDR
// sStu := false ;
12976: LD_ADDR_EXP 66
12980: PUSH
12981: LD_INT 0
12983: ST_TO_ADDR
// sBazooka := false ;
12984: LD_ADDR_EXP 69
12988: PUSH
12989: LD_INT 0
12991: ST_TO_ADDR
// sMortar := false ;
12992: LD_ADDR_EXP 70
12996: PUSH
12997: LD_INT 0
12999: ST_TO_ADDR
// sRanger := false ;
13000: LD_ADDR_EXP 80
13004: PUSH
13005: LD_INT 0
13007: ST_TO_ADDR
// sComputer := false ;
13008: LD_ADDR_EXP 81
13012: PUSH
13013: LD_INT 0
13015: ST_TO_ADDR
// s30 := false ;
13016: LD_ADDR_EXP 82
13020: PUSH
13021: LD_INT 0
13023: ST_TO_ADDR
// s60 := false ;
13024: LD_ADDR_EXP 83
13028: PUSH
13029: LD_INT 0
13031: ST_TO_ADDR
// end ;
13032: LD_VAR 0 1
13036: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
13037: LD_INT 0
13039: PPUSH
13040: PPUSH
13041: PPUSH
13042: PPUSH
13043: PPUSH
13044: PPUSH
13045: PPUSH
// result := [ ] ;
13046: LD_ADDR_VAR 0 2
13050: PUSH
13051: EMPTY
13052: ST_TO_ADDR
// if campaign_id = 1 then
13053: LD_OWVAR 69
13057: PUSH
13058: LD_INT 1
13060: EQUAL
13061: IFFALSE 16227
// begin case mission_number of 1 :
13063: LD_OWVAR 70
13067: PUSH
13068: LD_INT 1
13070: DOUBLE
13071: EQUAL
13072: IFTRUE 13076
13074: GO 13152
13076: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
13077: LD_ADDR_VAR 0 2
13081: PUSH
13082: LD_INT 2
13084: PUSH
13085: LD_INT 4
13087: PUSH
13088: LD_INT 11
13090: PUSH
13091: LD_INT 12
13093: PUSH
13094: LD_INT 15
13096: PUSH
13097: LD_INT 16
13099: PUSH
13100: LD_INT 22
13102: PUSH
13103: LD_INT 23
13105: PUSH
13106: LD_INT 26
13108: PUSH
13109: EMPTY
13110: LIST
13111: LIST
13112: LIST
13113: LIST
13114: LIST
13115: LIST
13116: LIST
13117: LIST
13118: LIST
13119: PUSH
13120: LD_INT 101
13122: PUSH
13123: LD_INT 102
13125: PUSH
13126: LD_INT 106
13128: PUSH
13129: LD_INT 116
13131: PUSH
13132: LD_INT 117
13134: PUSH
13135: LD_INT 118
13137: PUSH
13138: EMPTY
13139: LIST
13140: LIST
13141: LIST
13142: LIST
13143: LIST
13144: LIST
13145: PUSH
13146: EMPTY
13147: LIST
13148: LIST
13149: ST_TO_ADDR
13150: GO 16225
13152: LD_INT 2
13154: DOUBLE
13155: EQUAL
13156: IFTRUE 13160
13158: GO 13244
13160: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
13161: LD_ADDR_VAR 0 2
13165: PUSH
13166: LD_INT 2
13168: PUSH
13169: LD_INT 4
13171: PUSH
13172: LD_INT 11
13174: PUSH
13175: LD_INT 12
13177: PUSH
13178: LD_INT 15
13180: PUSH
13181: LD_INT 16
13183: PUSH
13184: LD_INT 22
13186: PUSH
13187: LD_INT 23
13189: PUSH
13190: LD_INT 26
13192: PUSH
13193: EMPTY
13194: LIST
13195: LIST
13196: LIST
13197: LIST
13198: LIST
13199: LIST
13200: LIST
13201: LIST
13202: LIST
13203: PUSH
13204: LD_INT 101
13206: PUSH
13207: LD_INT 102
13209: PUSH
13210: LD_INT 105
13212: PUSH
13213: LD_INT 106
13215: PUSH
13216: LD_INT 108
13218: PUSH
13219: LD_INT 116
13221: PUSH
13222: LD_INT 117
13224: PUSH
13225: LD_INT 118
13227: PUSH
13228: EMPTY
13229: LIST
13230: LIST
13231: LIST
13232: LIST
13233: LIST
13234: LIST
13235: LIST
13236: LIST
13237: PUSH
13238: EMPTY
13239: LIST
13240: LIST
13241: ST_TO_ADDR
13242: GO 16225
13244: LD_INT 3
13246: DOUBLE
13247: EQUAL
13248: IFTRUE 13252
13250: GO 13340
13252: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
13253: LD_ADDR_VAR 0 2
13257: PUSH
13258: LD_INT 2
13260: PUSH
13261: LD_INT 4
13263: PUSH
13264: LD_INT 5
13266: PUSH
13267: LD_INT 11
13269: PUSH
13270: LD_INT 12
13272: PUSH
13273: LD_INT 15
13275: PUSH
13276: LD_INT 16
13278: PUSH
13279: LD_INT 22
13281: PUSH
13282: LD_INT 26
13284: PUSH
13285: LD_INT 36
13287: PUSH
13288: EMPTY
13289: LIST
13290: LIST
13291: LIST
13292: LIST
13293: LIST
13294: LIST
13295: LIST
13296: LIST
13297: LIST
13298: LIST
13299: PUSH
13300: LD_INT 101
13302: PUSH
13303: LD_INT 102
13305: PUSH
13306: LD_INT 105
13308: PUSH
13309: LD_INT 106
13311: PUSH
13312: LD_INT 108
13314: PUSH
13315: LD_INT 116
13317: PUSH
13318: LD_INT 117
13320: PUSH
13321: LD_INT 118
13323: PUSH
13324: EMPTY
13325: LIST
13326: LIST
13327: LIST
13328: LIST
13329: LIST
13330: LIST
13331: LIST
13332: LIST
13333: PUSH
13334: EMPTY
13335: LIST
13336: LIST
13337: ST_TO_ADDR
13338: GO 16225
13340: LD_INT 4
13342: DOUBLE
13343: EQUAL
13344: IFTRUE 13348
13346: GO 13444
13348: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
13349: LD_ADDR_VAR 0 2
13353: PUSH
13354: LD_INT 2
13356: PUSH
13357: LD_INT 4
13359: PUSH
13360: LD_INT 5
13362: PUSH
13363: LD_INT 8
13365: PUSH
13366: LD_INT 11
13368: PUSH
13369: LD_INT 12
13371: PUSH
13372: LD_INT 15
13374: PUSH
13375: LD_INT 16
13377: PUSH
13378: LD_INT 22
13380: PUSH
13381: LD_INT 23
13383: PUSH
13384: LD_INT 26
13386: PUSH
13387: LD_INT 36
13389: PUSH
13390: EMPTY
13391: LIST
13392: LIST
13393: LIST
13394: LIST
13395: LIST
13396: LIST
13397: LIST
13398: LIST
13399: LIST
13400: LIST
13401: LIST
13402: LIST
13403: PUSH
13404: LD_INT 101
13406: PUSH
13407: LD_INT 102
13409: PUSH
13410: LD_INT 105
13412: PUSH
13413: LD_INT 106
13415: PUSH
13416: LD_INT 108
13418: PUSH
13419: LD_INT 116
13421: PUSH
13422: LD_INT 117
13424: PUSH
13425: LD_INT 118
13427: PUSH
13428: EMPTY
13429: LIST
13430: LIST
13431: LIST
13432: LIST
13433: LIST
13434: LIST
13435: LIST
13436: LIST
13437: PUSH
13438: EMPTY
13439: LIST
13440: LIST
13441: ST_TO_ADDR
13442: GO 16225
13444: LD_INT 5
13446: DOUBLE
13447: EQUAL
13448: IFTRUE 13452
13450: GO 13564
13452: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
13453: LD_ADDR_VAR 0 2
13457: PUSH
13458: LD_INT 2
13460: PUSH
13461: LD_INT 4
13463: PUSH
13464: LD_INT 5
13466: PUSH
13467: LD_INT 6
13469: PUSH
13470: LD_INT 8
13472: PUSH
13473: LD_INT 11
13475: PUSH
13476: LD_INT 12
13478: PUSH
13479: LD_INT 15
13481: PUSH
13482: LD_INT 16
13484: PUSH
13485: LD_INT 22
13487: PUSH
13488: LD_INT 23
13490: PUSH
13491: LD_INT 25
13493: PUSH
13494: LD_INT 26
13496: PUSH
13497: LD_INT 36
13499: PUSH
13500: EMPTY
13501: LIST
13502: LIST
13503: LIST
13504: LIST
13505: LIST
13506: LIST
13507: LIST
13508: LIST
13509: LIST
13510: LIST
13511: LIST
13512: LIST
13513: LIST
13514: LIST
13515: PUSH
13516: LD_INT 101
13518: PUSH
13519: LD_INT 102
13521: PUSH
13522: LD_INT 105
13524: PUSH
13525: LD_INT 106
13527: PUSH
13528: LD_INT 108
13530: PUSH
13531: LD_INT 109
13533: PUSH
13534: LD_INT 112
13536: PUSH
13537: LD_INT 116
13539: PUSH
13540: LD_INT 117
13542: PUSH
13543: LD_INT 118
13545: PUSH
13546: EMPTY
13547: LIST
13548: LIST
13549: LIST
13550: LIST
13551: LIST
13552: LIST
13553: LIST
13554: LIST
13555: LIST
13556: LIST
13557: PUSH
13558: EMPTY
13559: LIST
13560: LIST
13561: ST_TO_ADDR
13562: GO 16225
13564: LD_INT 6
13566: DOUBLE
13567: EQUAL
13568: IFTRUE 13572
13570: GO 13704
13572: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
13573: LD_ADDR_VAR 0 2
13577: PUSH
13578: LD_INT 2
13580: PUSH
13581: LD_INT 4
13583: PUSH
13584: LD_INT 5
13586: PUSH
13587: LD_INT 6
13589: PUSH
13590: LD_INT 8
13592: PUSH
13593: LD_INT 11
13595: PUSH
13596: LD_INT 12
13598: PUSH
13599: LD_INT 15
13601: PUSH
13602: LD_INT 16
13604: PUSH
13605: LD_INT 20
13607: PUSH
13608: LD_INT 21
13610: PUSH
13611: LD_INT 22
13613: PUSH
13614: LD_INT 23
13616: PUSH
13617: LD_INT 25
13619: PUSH
13620: LD_INT 26
13622: PUSH
13623: LD_INT 30
13625: PUSH
13626: LD_INT 31
13628: PUSH
13629: LD_INT 32
13631: PUSH
13632: LD_INT 36
13634: PUSH
13635: EMPTY
13636: LIST
13637: LIST
13638: LIST
13639: LIST
13640: LIST
13641: LIST
13642: LIST
13643: LIST
13644: LIST
13645: LIST
13646: LIST
13647: LIST
13648: LIST
13649: LIST
13650: LIST
13651: LIST
13652: LIST
13653: LIST
13654: LIST
13655: PUSH
13656: LD_INT 101
13658: PUSH
13659: LD_INT 102
13661: PUSH
13662: LD_INT 105
13664: PUSH
13665: LD_INT 106
13667: PUSH
13668: LD_INT 108
13670: PUSH
13671: LD_INT 109
13673: PUSH
13674: LD_INT 112
13676: PUSH
13677: LD_INT 116
13679: PUSH
13680: LD_INT 117
13682: PUSH
13683: LD_INT 118
13685: PUSH
13686: EMPTY
13687: LIST
13688: LIST
13689: LIST
13690: LIST
13691: LIST
13692: LIST
13693: LIST
13694: LIST
13695: LIST
13696: LIST
13697: PUSH
13698: EMPTY
13699: LIST
13700: LIST
13701: ST_TO_ADDR
13702: GO 16225
13704: LD_INT 7
13706: DOUBLE
13707: EQUAL
13708: IFTRUE 13712
13710: GO 13824
13712: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
13713: LD_ADDR_VAR 0 2
13717: PUSH
13718: LD_INT 2
13720: PUSH
13721: LD_INT 4
13723: PUSH
13724: LD_INT 5
13726: PUSH
13727: LD_INT 7
13729: PUSH
13730: LD_INT 11
13732: PUSH
13733: LD_INT 12
13735: PUSH
13736: LD_INT 15
13738: PUSH
13739: LD_INT 16
13741: PUSH
13742: LD_INT 20
13744: PUSH
13745: LD_INT 21
13747: PUSH
13748: LD_INT 22
13750: PUSH
13751: LD_INT 23
13753: PUSH
13754: LD_INT 25
13756: PUSH
13757: LD_INT 26
13759: PUSH
13760: EMPTY
13761: LIST
13762: LIST
13763: LIST
13764: LIST
13765: LIST
13766: LIST
13767: LIST
13768: LIST
13769: LIST
13770: LIST
13771: LIST
13772: LIST
13773: LIST
13774: LIST
13775: PUSH
13776: LD_INT 101
13778: PUSH
13779: LD_INT 102
13781: PUSH
13782: LD_INT 103
13784: PUSH
13785: LD_INT 105
13787: PUSH
13788: LD_INT 106
13790: PUSH
13791: LD_INT 108
13793: PUSH
13794: LD_INT 112
13796: PUSH
13797: LD_INT 116
13799: PUSH
13800: LD_INT 117
13802: PUSH
13803: LD_INT 118
13805: PUSH
13806: EMPTY
13807: LIST
13808: LIST
13809: LIST
13810: LIST
13811: LIST
13812: LIST
13813: LIST
13814: LIST
13815: LIST
13816: LIST
13817: PUSH
13818: EMPTY
13819: LIST
13820: LIST
13821: ST_TO_ADDR
13822: GO 16225
13824: LD_INT 8
13826: DOUBLE
13827: EQUAL
13828: IFTRUE 13832
13830: GO 13972
13832: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
13833: LD_ADDR_VAR 0 2
13837: PUSH
13838: LD_INT 2
13840: PUSH
13841: LD_INT 4
13843: PUSH
13844: LD_INT 5
13846: PUSH
13847: LD_INT 6
13849: PUSH
13850: LD_INT 7
13852: PUSH
13853: LD_INT 8
13855: PUSH
13856: LD_INT 11
13858: PUSH
13859: LD_INT 12
13861: PUSH
13862: LD_INT 15
13864: PUSH
13865: LD_INT 16
13867: PUSH
13868: LD_INT 20
13870: PUSH
13871: LD_INT 21
13873: PUSH
13874: LD_INT 22
13876: PUSH
13877: LD_INT 23
13879: PUSH
13880: LD_INT 25
13882: PUSH
13883: LD_INT 26
13885: PUSH
13886: LD_INT 30
13888: PUSH
13889: LD_INT 31
13891: PUSH
13892: LD_INT 32
13894: PUSH
13895: LD_INT 36
13897: PUSH
13898: EMPTY
13899: LIST
13900: LIST
13901: LIST
13902: LIST
13903: LIST
13904: LIST
13905: LIST
13906: LIST
13907: LIST
13908: LIST
13909: LIST
13910: LIST
13911: LIST
13912: LIST
13913: LIST
13914: LIST
13915: LIST
13916: LIST
13917: LIST
13918: LIST
13919: PUSH
13920: LD_INT 101
13922: PUSH
13923: LD_INT 102
13925: PUSH
13926: LD_INT 103
13928: PUSH
13929: LD_INT 105
13931: PUSH
13932: LD_INT 106
13934: PUSH
13935: LD_INT 108
13937: PUSH
13938: LD_INT 109
13940: PUSH
13941: LD_INT 112
13943: PUSH
13944: LD_INT 116
13946: PUSH
13947: LD_INT 117
13949: PUSH
13950: LD_INT 118
13952: PUSH
13953: EMPTY
13954: LIST
13955: LIST
13956: LIST
13957: LIST
13958: LIST
13959: LIST
13960: LIST
13961: LIST
13962: LIST
13963: LIST
13964: LIST
13965: PUSH
13966: EMPTY
13967: LIST
13968: LIST
13969: ST_TO_ADDR
13970: GO 16225
13972: LD_INT 9
13974: DOUBLE
13975: EQUAL
13976: IFTRUE 13980
13978: GO 14128
13980: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
13981: LD_ADDR_VAR 0 2
13985: PUSH
13986: LD_INT 2
13988: PUSH
13989: LD_INT 4
13991: PUSH
13992: LD_INT 5
13994: PUSH
13995: LD_INT 6
13997: PUSH
13998: LD_INT 7
14000: PUSH
14001: LD_INT 8
14003: PUSH
14004: LD_INT 11
14006: PUSH
14007: LD_INT 12
14009: PUSH
14010: LD_INT 15
14012: PUSH
14013: LD_INT 16
14015: PUSH
14016: LD_INT 20
14018: PUSH
14019: LD_INT 21
14021: PUSH
14022: LD_INT 22
14024: PUSH
14025: LD_INT 23
14027: PUSH
14028: LD_INT 25
14030: PUSH
14031: LD_INT 26
14033: PUSH
14034: LD_INT 28
14036: PUSH
14037: LD_INT 30
14039: PUSH
14040: LD_INT 31
14042: PUSH
14043: LD_INT 32
14045: PUSH
14046: LD_INT 36
14048: PUSH
14049: EMPTY
14050: LIST
14051: LIST
14052: LIST
14053: LIST
14054: LIST
14055: LIST
14056: LIST
14057: LIST
14058: LIST
14059: LIST
14060: LIST
14061: LIST
14062: LIST
14063: LIST
14064: LIST
14065: LIST
14066: LIST
14067: LIST
14068: LIST
14069: LIST
14070: LIST
14071: PUSH
14072: LD_INT 101
14074: PUSH
14075: LD_INT 102
14077: PUSH
14078: LD_INT 103
14080: PUSH
14081: LD_INT 105
14083: PUSH
14084: LD_INT 106
14086: PUSH
14087: LD_INT 108
14089: PUSH
14090: LD_INT 109
14092: PUSH
14093: LD_INT 112
14095: PUSH
14096: LD_INT 114
14098: PUSH
14099: LD_INT 116
14101: PUSH
14102: LD_INT 117
14104: PUSH
14105: LD_INT 118
14107: PUSH
14108: EMPTY
14109: LIST
14110: LIST
14111: LIST
14112: LIST
14113: LIST
14114: LIST
14115: LIST
14116: LIST
14117: LIST
14118: LIST
14119: LIST
14120: LIST
14121: PUSH
14122: EMPTY
14123: LIST
14124: LIST
14125: ST_TO_ADDR
14126: GO 16225
14128: LD_INT 10
14130: DOUBLE
14131: EQUAL
14132: IFTRUE 14136
14134: GO 14332
14136: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
14137: LD_ADDR_VAR 0 2
14141: PUSH
14142: LD_INT 2
14144: PUSH
14145: LD_INT 4
14147: PUSH
14148: LD_INT 5
14150: PUSH
14151: LD_INT 6
14153: PUSH
14154: LD_INT 7
14156: PUSH
14157: LD_INT 8
14159: PUSH
14160: LD_INT 9
14162: PUSH
14163: LD_INT 10
14165: PUSH
14166: LD_INT 11
14168: PUSH
14169: LD_INT 12
14171: PUSH
14172: LD_INT 13
14174: PUSH
14175: LD_INT 14
14177: PUSH
14178: LD_INT 15
14180: PUSH
14181: LD_INT 16
14183: PUSH
14184: LD_INT 17
14186: PUSH
14187: LD_INT 18
14189: PUSH
14190: LD_INT 19
14192: PUSH
14193: LD_INT 20
14195: PUSH
14196: LD_INT 21
14198: PUSH
14199: LD_INT 22
14201: PUSH
14202: LD_INT 23
14204: PUSH
14205: LD_INT 24
14207: PUSH
14208: LD_INT 25
14210: PUSH
14211: LD_INT 26
14213: PUSH
14214: LD_INT 28
14216: PUSH
14217: LD_INT 30
14219: PUSH
14220: LD_INT 31
14222: PUSH
14223: LD_INT 32
14225: PUSH
14226: LD_INT 36
14228: PUSH
14229: EMPTY
14230: LIST
14231: LIST
14232: LIST
14233: LIST
14234: LIST
14235: LIST
14236: LIST
14237: LIST
14238: LIST
14239: LIST
14240: LIST
14241: LIST
14242: LIST
14243: LIST
14244: LIST
14245: LIST
14246: LIST
14247: LIST
14248: LIST
14249: LIST
14250: LIST
14251: LIST
14252: LIST
14253: LIST
14254: LIST
14255: LIST
14256: LIST
14257: LIST
14258: LIST
14259: PUSH
14260: LD_INT 101
14262: PUSH
14263: LD_INT 102
14265: PUSH
14266: LD_INT 103
14268: PUSH
14269: LD_INT 104
14271: PUSH
14272: LD_INT 105
14274: PUSH
14275: LD_INT 106
14277: PUSH
14278: LD_INT 107
14280: PUSH
14281: LD_INT 108
14283: PUSH
14284: LD_INT 109
14286: PUSH
14287: LD_INT 110
14289: PUSH
14290: LD_INT 111
14292: PUSH
14293: LD_INT 112
14295: PUSH
14296: LD_INT 114
14298: PUSH
14299: LD_INT 116
14301: PUSH
14302: LD_INT 117
14304: PUSH
14305: LD_INT 118
14307: PUSH
14308: EMPTY
14309: LIST
14310: LIST
14311: LIST
14312: LIST
14313: LIST
14314: LIST
14315: LIST
14316: LIST
14317: LIST
14318: LIST
14319: LIST
14320: LIST
14321: LIST
14322: LIST
14323: LIST
14324: LIST
14325: PUSH
14326: EMPTY
14327: LIST
14328: LIST
14329: ST_TO_ADDR
14330: GO 16225
14332: LD_INT 11
14334: DOUBLE
14335: EQUAL
14336: IFTRUE 14340
14338: GO 14544
14340: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
14341: LD_ADDR_VAR 0 2
14345: PUSH
14346: LD_INT 2
14348: PUSH
14349: LD_INT 3
14351: PUSH
14352: LD_INT 4
14354: PUSH
14355: LD_INT 5
14357: PUSH
14358: LD_INT 6
14360: PUSH
14361: LD_INT 7
14363: PUSH
14364: LD_INT 8
14366: PUSH
14367: LD_INT 9
14369: PUSH
14370: LD_INT 10
14372: PUSH
14373: LD_INT 11
14375: PUSH
14376: LD_INT 12
14378: PUSH
14379: LD_INT 13
14381: PUSH
14382: LD_INT 14
14384: PUSH
14385: LD_INT 15
14387: PUSH
14388: LD_INT 16
14390: PUSH
14391: LD_INT 17
14393: PUSH
14394: LD_INT 18
14396: PUSH
14397: LD_INT 19
14399: PUSH
14400: LD_INT 20
14402: PUSH
14403: LD_INT 21
14405: PUSH
14406: LD_INT 22
14408: PUSH
14409: LD_INT 23
14411: PUSH
14412: LD_INT 24
14414: PUSH
14415: LD_INT 25
14417: PUSH
14418: LD_INT 26
14420: PUSH
14421: LD_INT 28
14423: PUSH
14424: LD_INT 30
14426: PUSH
14427: LD_INT 31
14429: PUSH
14430: LD_INT 32
14432: PUSH
14433: LD_INT 34
14435: PUSH
14436: LD_INT 36
14438: PUSH
14439: EMPTY
14440: LIST
14441: LIST
14442: LIST
14443: LIST
14444: LIST
14445: LIST
14446: LIST
14447: LIST
14448: LIST
14449: LIST
14450: LIST
14451: LIST
14452: LIST
14453: LIST
14454: LIST
14455: LIST
14456: LIST
14457: LIST
14458: LIST
14459: LIST
14460: LIST
14461: LIST
14462: LIST
14463: LIST
14464: LIST
14465: LIST
14466: LIST
14467: LIST
14468: LIST
14469: LIST
14470: LIST
14471: PUSH
14472: LD_INT 101
14474: PUSH
14475: LD_INT 102
14477: PUSH
14478: LD_INT 103
14480: PUSH
14481: LD_INT 104
14483: PUSH
14484: LD_INT 105
14486: PUSH
14487: LD_INT 106
14489: PUSH
14490: LD_INT 107
14492: PUSH
14493: LD_INT 108
14495: PUSH
14496: LD_INT 109
14498: PUSH
14499: LD_INT 110
14501: PUSH
14502: LD_INT 111
14504: PUSH
14505: LD_INT 112
14507: PUSH
14508: LD_INT 114
14510: PUSH
14511: LD_INT 116
14513: PUSH
14514: LD_INT 117
14516: PUSH
14517: LD_INT 118
14519: PUSH
14520: EMPTY
14521: LIST
14522: LIST
14523: LIST
14524: LIST
14525: LIST
14526: LIST
14527: LIST
14528: LIST
14529: LIST
14530: LIST
14531: LIST
14532: LIST
14533: LIST
14534: LIST
14535: LIST
14536: LIST
14537: PUSH
14538: EMPTY
14539: LIST
14540: LIST
14541: ST_TO_ADDR
14542: GO 16225
14544: LD_INT 12
14546: DOUBLE
14547: EQUAL
14548: IFTRUE 14552
14550: GO 14772
14552: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
14553: LD_ADDR_VAR 0 2
14557: PUSH
14558: LD_INT 1
14560: PUSH
14561: LD_INT 2
14563: PUSH
14564: LD_INT 3
14566: PUSH
14567: LD_INT 4
14569: PUSH
14570: LD_INT 5
14572: PUSH
14573: LD_INT 6
14575: PUSH
14576: LD_INT 7
14578: PUSH
14579: LD_INT 8
14581: PUSH
14582: LD_INT 9
14584: PUSH
14585: LD_INT 10
14587: PUSH
14588: LD_INT 11
14590: PUSH
14591: LD_INT 12
14593: PUSH
14594: LD_INT 13
14596: PUSH
14597: LD_INT 14
14599: PUSH
14600: LD_INT 15
14602: PUSH
14603: LD_INT 16
14605: PUSH
14606: LD_INT 17
14608: PUSH
14609: LD_INT 18
14611: PUSH
14612: LD_INT 19
14614: PUSH
14615: LD_INT 20
14617: PUSH
14618: LD_INT 21
14620: PUSH
14621: LD_INT 22
14623: PUSH
14624: LD_INT 23
14626: PUSH
14627: LD_INT 24
14629: PUSH
14630: LD_INT 25
14632: PUSH
14633: LD_INT 26
14635: PUSH
14636: LD_INT 27
14638: PUSH
14639: LD_INT 28
14641: PUSH
14642: LD_INT 30
14644: PUSH
14645: LD_INT 31
14647: PUSH
14648: LD_INT 32
14650: PUSH
14651: LD_INT 33
14653: PUSH
14654: LD_INT 34
14656: PUSH
14657: LD_INT 36
14659: PUSH
14660: EMPTY
14661: LIST
14662: LIST
14663: LIST
14664: LIST
14665: LIST
14666: LIST
14667: LIST
14668: LIST
14669: LIST
14670: LIST
14671: LIST
14672: LIST
14673: LIST
14674: LIST
14675: LIST
14676: LIST
14677: LIST
14678: LIST
14679: LIST
14680: LIST
14681: LIST
14682: LIST
14683: LIST
14684: LIST
14685: LIST
14686: LIST
14687: LIST
14688: LIST
14689: LIST
14690: LIST
14691: LIST
14692: LIST
14693: LIST
14694: LIST
14695: PUSH
14696: LD_INT 101
14698: PUSH
14699: LD_INT 102
14701: PUSH
14702: LD_INT 103
14704: PUSH
14705: LD_INT 104
14707: PUSH
14708: LD_INT 105
14710: PUSH
14711: LD_INT 106
14713: PUSH
14714: LD_INT 107
14716: PUSH
14717: LD_INT 108
14719: PUSH
14720: LD_INT 109
14722: PUSH
14723: LD_INT 110
14725: PUSH
14726: LD_INT 111
14728: PUSH
14729: LD_INT 112
14731: PUSH
14732: LD_INT 113
14734: PUSH
14735: LD_INT 114
14737: PUSH
14738: LD_INT 116
14740: PUSH
14741: LD_INT 117
14743: PUSH
14744: LD_INT 118
14746: PUSH
14747: EMPTY
14748: LIST
14749: LIST
14750: LIST
14751: LIST
14752: LIST
14753: LIST
14754: LIST
14755: LIST
14756: LIST
14757: LIST
14758: LIST
14759: LIST
14760: LIST
14761: LIST
14762: LIST
14763: LIST
14764: LIST
14765: PUSH
14766: EMPTY
14767: LIST
14768: LIST
14769: ST_TO_ADDR
14770: GO 16225
14772: LD_INT 13
14774: DOUBLE
14775: EQUAL
14776: IFTRUE 14780
14778: GO 14988
14780: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
14781: LD_ADDR_VAR 0 2
14785: PUSH
14786: LD_INT 1
14788: PUSH
14789: LD_INT 2
14791: PUSH
14792: LD_INT 3
14794: PUSH
14795: LD_INT 4
14797: PUSH
14798: LD_INT 5
14800: PUSH
14801: LD_INT 8
14803: PUSH
14804: LD_INT 9
14806: PUSH
14807: LD_INT 10
14809: PUSH
14810: LD_INT 11
14812: PUSH
14813: LD_INT 12
14815: PUSH
14816: LD_INT 14
14818: PUSH
14819: LD_INT 15
14821: PUSH
14822: LD_INT 16
14824: PUSH
14825: LD_INT 17
14827: PUSH
14828: LD_INT 18
14830: PUSH
14831: LD_INT 19
14833: PUSH
14834: LD_INT 20
14836: PUSH
14837: LD_INT 21
14839: PUSH
14840: LD_INT 22
14842: PUSH
14843: LD_INT 23
14845: PUSH
14846: LD_INT 24
14848: PUSH
14849: LD_INT 25
14851: PUSH
14852: LD_INT 26
14854: PUSH
14855: LD_INT 27
14857: PUSH
14858: LD_INT 28
14860: PUSH
14861: LD_INT 30
14863: PUSH
14864: LD_INT 31
14866: PUSH
14867: LD_INT 32
14869: PUSH
14870: LD_INT 33
14872: PUSH
14873: LD_INT 34
14875: PUSH
14876: LD_INT 36
14878: PUSH
14879: EMPTY
14880: LIST
14881: LIST
14882: LIST
14883: LIST
14884: LIST
14885: LIST
14886: LIST
14887: LIST
14888: LIST
14889: LIST
14890: LIST
14891: LIST
14892: LIST
14893: LIST
14894: LIST
14895: LIST
14896: LIST
14897: LIST
14898: LIST
14899: LIST
14900: LIST
14901: LIST
14902: LIST
14903: LIST
14904: LIST
14905: LIST
14906: LIST
14907: LIST
14908: LIST
14909: LIST
14910: LIST
14911: PUSH
14912: LD_INT 101
14914: PUSH
14915: LD_INT 102
14917: PUSH
14918: LD_INT 103
14920: PUSH
14921: LD_INT 104
14923: PUSH
14924: LD_INT 105
14926: PUSH
14927: LD_INT 106
14929: PUSH
14930: LD_INT 107
14932: PUSH
14933: LD_INT 108
14935: PUSH
14936: LD_INT 109
14938: PUSH
14939: LD_INT 110
14941: PUSH
14942: LD_INT 111
14944: PUSH
14945: LD_INT 112
14947: PUSH
14948: LD_INT 113
14950: PUSH
14951: LD_INT 114
14953: PUSH
14954: LD_INT 116
14956: PUSH
14957: LD_INT 117
14959: PUSH
14960: LD_INT 118
14962: PUSH
14963: EMPTY
14964: LIST
14965: LIST
14966: LIST
14967: LIST
14968: LIST
14969: LIST
14970: LIST
14971: LIST
14972: LIST
14973: LIST
14974: LIST
14975: LIST
14976: LIST
14977: LIST
14978: LIST
14979: LIST
14980: LIST
14981: PUSH
14982: EMPTY
14983: LIST
14984: LIST
14985: ST_TO_ADDR
14986: GO 16225
14988: LD_INT 14
14990: DOUBLE
14991: EQUAL
14992: IFTRUE 14996
14994: GO 15220
14996: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
14997: LD_ADDR_VAR 0 2
15001: PUSH
15002: LD_INT 1
15004: PUSH
15005: LD_INT 2
15007: PUSH
15008: LD_INT 3
15010: PUSH
15011: LD_INT 4
15013: PUSH
15014: LD_INT 5
15016: PUSH
15017: LD_INT 6
15019: PUSH
15020: LD_INT 7
15022: PUSH
15023: LD_INT 8
15025: PUSH
15026: LD_INT 9
15028: PUSH
15029: LD_INT 10
15031: PUSH
15032: LD_INT 11
15034: PUSH
15035: LD_INT 12
15037: PUSH
15038: LD_INT 13
15040: PUSH
15041: LD_INT 14
15043: PUSH
15044: LD_INT 15
15046: PUSH
15047: LD_INT 16
15049: PUSH
15050: LD_INT 17
15052: PUSH
15053: LD_INT 18
15055: PUSH
15056: LD_INT 19
15058: PUSH
15059: LD_INT 20
15061: PUSH
15062: LD_INT 21
15064: PUSH
15065: LD_INT 22
15067: PUSH
15068: LD_INT 23
15070: PUSH
15071: LD_INT 24
15073: PUSH
15074: LD_INT 25
15076: PUSH
15077: LD_INT 26
15079: PUSH
15080: LD_INT 27
15082: PUSH
15083: LD_INT 28
15085: PUSH
15086: LD_INT 29
15088: PUSH
15089: LD_INT 30
15091: PUSH
15092: LD_INT 31
15094: PUSH
15095: LD_INT 32
15097: PUSH
15098: LD_INT 33
15100: PUSH
15101: LD_INT 34
15103: PUSH
15104: LD_INT 36
15106: PUSH
15107: EMPTY
15108: LIST
15109: LIST
15110: LIST
15111: LIST
15112: LIST
15113: LIST
15114: LIST
15115: LIST
15116: LIST
15117: LIST
15118: LIST
15119: LIST
15120: LIST
15121: LIST
15122: LIST
15123: LIST
15124: LIST
15125: LIST
15126: LIST
15127: LIST
15128: LIST
15129: LIST
15130: LIST
15131: LIST
15132: LIST
15133: LIST
15134: LIST
15135: LIST
15136: LIST
15137: LIST
15138: LIST
15139: LIST
15140: LIST
15141: LIST
15142: LIST
15143: PUSH
15144: LD_INT 101
15146: PUSH
15147: LD_INT 102
15149: PUSH
15150: LD_INT 103
15152: PUSH
15153: LD_INT 104
15155: PUSH
15156: LD_INT 105
15158: PUSH
15159: LD_INT 106
15161: PUSH
15162: LD_INT 107
15164: PUSH
15165: LD_INT 108
15167: PUSH
15168: LD_INT 109
15170: PUSH
15171: LD_INT 110
15173: PUSH
15174: LD_INT 111
15176: PUSH
15177: LD_INT 112
15179: PUSH
15180: LD_INT 113
15182: PUSH
15183: LD_INT 114
15185: PUSH
15186: LD_INT 116
15188: PUSH
15189: LD_INT 117
15191: PUSH
15192: LD_INT 118
15194: PUSH
15195: EMPTY
15196: LIST
15197: LIST
15198: LIST
15199: LIST
15200: LIST
15201: LIST
15202: LIST
15203: LIST
15204: LIST
15205: LIST
15206: LIST
15207: LIST
15208: LIST
15209: LIST
15210: LIST
15211: LIST
15212: LIST
15213: PUSH
15214: EMPTY
15215: LIST
15216: LIST
15217: ST_TO_ADDR
15218: GO 16225
15220: LD_INT 15
15222: DOUBLE
15223: EQUAL
15224: IFTRUE 15228
15226: GO 15452
15228: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
15229: LD_ADDR_VAR 0 2
15233: PUSH
15234: LD_INT 1
15236: PUSH
15237: LD_INT 2
15239: PUSH
15240: LD_INT 3
15242: PUSH
15243: LD_INT 4
15245: PUSH
15246: LD_INT 5
15248: PUSH
15249: LD_INT 6
15251: PUSH
15252: LD_INT 7
15254: PUSH
15255: LD_INT 8
15257: PUSH
15258: LD_INT 9
15260: PUSH
15261: LD_INT 10
15263: PUSH
15264: LD_INT 11
15266: PUSH
15267: LD_INT 12
15269: PUSH
15270: LD_INT 13
15272: PUSH
15273: LD_INT 14
15275: PUSH
15276: LD_INT 15
15278: PUSH
15279: LD_INT 16
15281: PUSH
15282: LD_INT 17
15284: PUSH
15285: LD_INT 18
15287: PUSH
15288: LD_INT 19
15290: PUSH
15291: LD_INT 20
15293: PUSH
15294: LD_INT 21
15296: PUSH
15297: LD_INT 22
15299: PUSH
15300: LD_INT 23
15302: PUSH
15303: LD_INT 24
15305: PUSH
15306: LD_INT 25
15308: PUSH
15309: LD_INT 26
15311: PUSH
15312: LD_INT 27
15314: PUSH
15315: LD_INT 28
15317: PUSH
15318: LD_INT 29
15320: PUSH
15321: LD_INT 30
15323: PUSH
15324: LD_INT 31
15326: PUSH
15327: LD_INT 32
15329: PUSH
15330: LD_INT 33
15332: PUSH
15333: LD_INT 34
15335: PUSH
15336: LD_INT 36
15338: PUSH
15339: EMPTY
15340: LIST
15341: LIST
15342: LIST
15343: LIST
15344: LIST
15345: LIST
15346: LIST
15347: LIST
15348: LIST
15349: LIST
15350: LIST
15351: LIST
15352: LIST
15353: LIST
15354: LIST
15355: LIST
15356: LIST
15357: LIST
15358: LIST
15359: LIST
15360: LIST
15361: LIST
15362: LIST
15363: LIST
15364: LIST
15365: LIST
15366: LIST
15367: LIST
15368: LIST
15369: LIST
15370: LIST
15371: LIST
15372: LIST
15373: LIST
15374: LIST
15375: PUSH
15376: LD_INT 101
15378: PUSH
15379: LD_INT 102
15381: PUSH
15382: LD_INT 103
15384: PUSH
15385: LD_INT 104
15387: PUSH
15388: LD_INT 105
15390: PUSH
15391: LD_INT 106
15393: PUSH
15394: LD_INT 107
15396: PUSH
15397: LD_INT 108
15399: PUSH
15400: LD_INT 109
15402: PUSH
15403: LD_INT 110
15405: PUSH
15406: LD_INT 111
15408: PUSH
15409: LD_INT 112
15411: PUSH
15412: LD_INT 113
15414: PUSH
15415: LD_INT 114
15417: PUSH
15418: LD_INT 116
15420: PUSH
15421: LD_INT 117
15423: PUSH
15424: LD_INT 118
15426: PUSH
15427: EMPTY
15428: LIST
15429: LIST
15430: LIST
15431: LIST
15432: LIST
15433: LIST
15434: LIST
15435: LIST
15436: LIST
15437: LIST
15438: LIST
15439: LIST
15440: LIST
15441: LIST
15442: LIST
15443: LIST
15444: LIST
15445: PUSH
15446: EMPTY
15447: LIST
15448: LIST
15449: ST_TO_ADDR
15450: GO 16225
15452: LD_INT 16
15454: DOUBLE
15455: EQUAL
15456: IFTRUE 15460
15458: GO 15596
15460: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
15461: LD_ADDR_VAR 0 2
15465: PUSH
15466: LD_INT 2
15468: PUSH
15469: LD_INT 4
15471: PUSH
15472: LD_INT 5
15474: PUSH
15475: LD_INT 7
15477: PUSH
15478: LD_INT 11
15480: PUSH
15481: LD_INT 12
15483: PUSH
15484: LD_INT 15
15486: PUSH
15487: LD_INT 16
15489: PUSH
15490: LD_INT 20
15492: PUSH
15493: LD_INT 21
15495: PUSH
15496: LD_INT 22
15498: PUSH
15499: LD_INT 23
15501: PUSH
15502: LD_INT 25
15504: PUSH
15505: LD_INT 26
15507: PUSH
15508: LD_INT 30
15510: PUSH
15511: LD_INT 31
15513: PUSH
15514: LD_INT 32
15516: PUSH
15517: LD_INT 33
15519: PUSH
15520: LD_INT 34
15522: PUSH
15523: EMPTY
15524: LIST
15525: LIST
15526: LIST
15527: LIST
15528: LIST
15529: LIST
15530: LIST
15531: LIST
15532: LIST
15533: LIST
15534: LIST
15535: LIST
15536: LIST
15537: LIST
15538: LIST
15539: LIST
15540: LIST
15541: LIST
15542: LIST
15543: PUSH
15544: LD_INT 101
15546: PUSH
15547: LD_INT 102
15549: PUSH
15550: LD_INT 103
15552: PUSH
15553: LD_INT 106
15555: PUSH
15556: LD_INT 108
15558: PUSH
15559: LD_INT 112
15561: PUSH
15562: LD_INT 113
15564: PUSH
15565: LD_INT 114
15567: PUSH
15568: LD_INT 116
15570: PUSH
15571: LD_INT 117
15573: PUSH
15574: LD_INT 118
15576: PUSH
15577: EMPTY
15578: LIST
15579: LIST
15580: LIST
15581: LIST
15582: LIST
15583: LIST
15584: LIST
15585: LIST
15586: LIST
15587: LIST
15588: LIST
15589: PUSH
15590: EMPTY
15591: LIST
15592: LIST
15593: ST_TO_ADDR
15594: GO 16225
15596: LD_INT 17
15598: DOUBLE
15599: EQUAL
15600: IFTRUE 15604
15602: GO 15828
15604: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
15605: LD_ADDR_VAR 0 2
15609: PUSH
15610: LD_INT 1
15612: PUSH
15613: LD_INT 2
15615: PUSH
15616: LD_INT 3
15618: PUSH
15619: LD_INT 4
15621: PUSH
15622: LD_INT 5
15624: PUSH
15625: LD_INT 6
15627: PUSH
15628: LD_INT 7
15630: PUSH
15631: LD_INT 8
15633: PUSH
15634: LD_INT 9
15636: PUSH
15637: LD_INT 10
15639: PUSH
15640: LD_INT 11
15642: PUSH
15643: LD_INT 12
15645: PUSH
15646: LD_INT 13
15648: PUSH
15649: LD_INT 14
15651: PUSH
15652: LD_INT 15
15654: PUSH
15655: LD_INT 16
15657: PUSH
15658: LD_INT 17
15660: PUSH
15661: LD_INT 18
15663: PUSH
15664: LD_INT 19
15666: PUSH
15667: LD_INT 20
15669: PUSH
15670: LD_INT 21
15672: PUSH
15673: LD_INT 22
15675: PUSH
15676: LD_INT 23
15678: PUSH
15679: LD_INT 24
15681: PUSH
15682: LD_INT 25
15684: PUSH
15685: LD_INT 26
15687: PUSH
15688: LD_INT 27
15690: PUSH
15691: LD_INT 28
15693: PUSH
15694: LD_INT 29
15696: PUSH
15697: LD_INT 30
15699: PUSH
15700: LD_INT 31
15702: PUSH
15703: LD_INT 32
15705: PUSH
15706: LD_INT 33
15708: PUSH
15709: LD_INT 34
15711: PUSH
15712: LD_INT 36
15714: PUSH
15715: EMPTY
15716: LIST
15717: LIST
15718: LIST
15719: LIST
15720: LIST
15721: LIST
15722: LIST
15723: LIST
15724: LIST
15725: LIST
15726: LIST
15727: LIST
15728: LIST
15729: LIST
15730: LIST
15731: LIST
15732: LIST
15733: LIST
15734: LIST
15735: LIST
15736: LIST
15737: LIST
15738: LIST
15739: LIST
15740: LIST
15741: LIST
15742: LIST
15743: LIST
15744: LIST
15745: LIST
15746: LIST
15747: LIST
15748: LIST
15749: LIST
15750: LIST
15751: PUSH
15752: LD_INT 101
15754: PUSH
15755: LD_INT 102
15757: PUSH
15758: LD_INT 103
15760: PUSH
15761: LD_INT 104
15763: PUSH
15764: LD_INT 105
15766: PUSH
15767: LD_INT 106
15769: PUSH
15770: LD_INT 107
15772: PUSH
15773: LD_INT 108
15775: PUSH
15776: LD_INT 109
15778: PUSH
15779: LD_INT 110
15781: PUSH
15782: LD_INT 111
15784: PUSH
15785: LD_INT 112
15787: PUSH
15788: LD_INT 113
15790: PUSH
15791: LD_INT 114
15793: PUSH
15794: LD_INT 116
15796: PUSH
15797: LD_INT 117
15799: PUSH
15800: LD_INT 118
15802: PUSH
15803: EMPTY
15804: LIST
15805: LIST
15806: LIST
15807: LIST
15808: LIST
15809: LIST
15810: LIST
15811: LIST
15812: LIST
15813: LIST
15814: LIST
15815: LIST
15816: LIST
15817: LIST
15818: LIST
15819: LIST
15820: LIST
15821: PUSH
15822: EMPTY
15823: LIST
15824: LIST
15825: ST_TO_ADDR
15826: GO 16225
15828: LD_INT 18
15830: DOUBLE
15831: EQUAL
15832: IFTRUE 15836
15834: GO 15984
15836: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
15837: LD_ADDR_VAR 0 2
15841: PUSH
15842: LD_INT 2
15844: PUSH
15845: LD_INT 4
15847: PUSH
15848: LD_INT 5
15850: PUSH
15851: LD_INT 7
15853: PUSH
15854: LD_INT 11
15856: PUSH
15857: LD_INT 12
15859: PUSH
15860: LD_INT 15
15862: PUSH
15863: LD_INT 16
15865: PUSH
15866: LD_INT 20
15868: PUSH
15869: LD_INT 21
15871: PUSH
15872: LD_INT 22
15874: PUSH
15875: LD_INT 23
15877: PUSH
15878: LD_INT 25
15880: PUSH
15881: LD_INT 26
15883: PUSH
15884: LD_INT 30
15886: PUSH
15887: LD_INT 31
15889: PUSH
15890: LD_INT 32
15892: PUSH
15893: LD_INT 33
15895: PUSH
15896: LD_INT 34
15898: PUSH
15899: LD_INT 35
15901: PUSH
15902: LD_INT 36
15904: PUSH
15905: EMPTY
15906: LIST
15907: LIST
15908: LIST
15909: LIST
15910: LIST
15911: LIST
15912: LIST
15913: LIST
15914: LIST
15915: LIST
15916: LIST
15917: LIST
15918: LIST
15919: LIST
15920: LIST
15921: LIST
15922: LIST
15923: LIST
15924: LIST
15925: LIST
15926: LIST
15927: PUSH
15928: LD_INT 101
15930: PUSH
15931: LD_INT 102
15933: PUSH
15934: LD_INT 103
15936: PUSH
15937: LD_INT 106
15939: PUSH
15940: LD_INT 108
15942: PUSH
15943: LD_INT 112
15945: PUSH
15946: LD_INT 113
15948: PUSH
15949: LD_INT 114
15951: PUSH
15952: LD_INT 115
15954: PUSH
15955: LD_INT 116
15957: PUSH
15958: LD_INT 117
15960: PUSH
15961: LD_INT 118
15963: PUSH
15964: EMPTY
15965: LIST
15966: LIST
15967: LIST
15968: LIST
15969: LIST
15970: LIST
15971: LIST
15972: LIST
15973: LIST
15974: LIST
15975: LIST
15976: LIST
15977: PUSH
15978: EMPTY
15979: LIST
15980: LIST
15981: ST_TO_ADDR
15982: GO 16225
15984: LD_INT 19
15986: DOUBLE
15987: EQUAL
15988: IFTRUE 15992
15990: GO 16224
15992: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
15993: LD_ADDR_VAR 0 2
15997: PUSH
15998: LD_INT 1
16000: PUSH
16001: LD_INT 2
16003: PUSH
16004: LD_INT 3
16006: PUSH
16007: LD_INT 4
16009: PUSH
16010: LD_INT 5
16012: PUSH
16013: LD_INT 6
16015: PUSH
16016: LD_INT 7
16018: PUSH
16019: LD_INT 8
16021: PUSH
16022: LD_INT 9
16024: PUSH
16025: LD_INT 10
16027: PUSH
16028: LD_INT 11
16030: PUSH
16031: LD_INT 12
16033: PUSH
16034: LD_INT 13
16036: PUSH
16037: LD_INT 14
16039: PUSH
16040: LD_INT 15
16042: PUSH
16043: LD_INT 16
16045: PUSH
16046: LD_INT 17
16048: PUSH
16049: LD_INT 18
16051: PUSH
16052: LD_INT 19
16054: PUSH
16055: LD_INT 20
16057: PUSH
16058: LD_INT 21
16060: PUSH
16061: LD_INT 22
16063: PUSH
16064: LD_INT 23
16066: PUSH
16067: LD_INT 24
16069: PUSH
16070: LD_INT 25
16072: PUSH
16073: LD_INT 26
16075: PUSH
16076: LD_INT 27
16078: PUSH
16079: LD_INT 28
16081: PUSH
16082: LD_INT 29
16084: PUSH
16085: LD_INT 30
16087: PUSH
16088: LD_INT 31
16090: PUSH
16091: LD_INT 32
16093: PUSH
16094: LD_INT 33
16096: PUSH
16097: LD_INT 34
16099: PUSH
16100: LD_INT 35
16102: PUSH
16103: LD_INT 36
16105: PUSH
16106: EMPTY
16107: LIST
16108: LIST
16109: LIST
16110: LIST
16111: LIST
16112: LIST
16113: LIST
16114: LIST
16115: LIST
16116: LIST
16117: LIST
16118: LIST
16119: LIST
16120: LIST
16121: LIST
16122: LIST
16123: LIST
16124: LIST
16125: LIST
16126: LIST
16127: LIST
16128: LIST
16129: LIST
16130: LIST
16131: LIST
16132: LIST
16133: LIST
16134: LIST
16135: LIST
16136: LIST
16137: LIST
16138: LIST
16139: LIST
16140: LIST
16141: LIST
16142: LIST
16143: PUSH
16144: LD_INT 101
16146: PUSH
16147: LD_INT 102
16149: PUSH
16150: LD_INT 103
16152: PUSH
16153: LD_INT 104
16155: PUSH
16156: LD_INT 105
16158: PUSH
16159: LD_INT 106
16161: PUSH
16162: LD_INT 107
16164: PUSH
16165: LD_INT 108
16167: PUSH
16168: LD_INT 109
16170: PUSH
16171: LD_INT 110
16173: PUSH
16174: LD_INT 111
16176: PUSH
16177: LD_INT 112
16179: PUSH
16180: LD_INT 113
16182: PUSH
16183: LD_INT 114
16185: PUSH
16186: LD_INT 115
16188: PUSH
16189: LD_INT 116
16191: PUSH
16192: LD_INT 117
16194: PUSH
16195: LD_INT 118
16197: PUSH
16198: EMPTY
16199: LIST
16200: LIST
16201: LIST
16202: LIST
16203: LIST
16204: LIST
16205: LIST
16206: LIST
16207: LIST
16208: LIST
16209: LIST
16210: LIST
16211: LIST
16212: LIST
16213: LIST
16214: LIST
16215: LIST
16216: LIST
16217: PUSH
16218: EMPTY
16219: LIST
16220: LIST
16221: ST_TO_ADDR
16222: GO 16225
16224: POP
// end else
16225: GO 16456
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
16227: LD_ADDR_VAR 0 2
16231: PUSH
16232: LD_INT 1
16234: PUSH
16235: LD_INT 2
16237: PUSH
16238: LD_INT 3
16240: PUSH
16241: LD_INT 4
16243: PUSH
16244: LD_INT 5
16246: PUSH
16247: LD_INT 6
16249: PUSH
16250: LD_INT 7
16252: PUSH
16253: LD_INT 8
16255: PUSH
16256: LD_INT 9
16258: PUSH
16259: LD_INT 10
16261: PUSH
16262: LD_INT 11
16264: PUSH
16265: LD_INT 12
16267: PUSH
16268: LD_INT 13
16270: PUSH
16271: LD_INT 14
16273: PUSH
16274: LD_INT 15
16276: PUSH
16277: LD_INT 16
16279: PUSH
16280: LD_INT 17
16282: PUSH
16283: LD_INT 18
16285: PUSH
16286: LD_INT 19
16288: PUSH
16289: LD_INT 20
16291: PUSH
16292: LD_INT 21
16294: PUSH
16295: LD_INT 22
16297: PUSH
16298: LD_INT 23
16300: PUSH
16301: LD_INT 24
16303: PUSH
16304: LD_INT 25
16306: PUSH
16307: LD_INT 26
16309: PUSH
16310: LD_INT 27
16312: PUSH
16313: LD_INT 28
16315: PUSH
16316: LD_INT 29
16318: PUSH
16319: LD_INT 30
16321: PUSH
16322: LD_INT 31
16324: PUSH
16325: LD_INT 32
16327: PUSH
16328: LD_INT 33
16330: PUSH
16331: LD_INT 34
16333: PUSH
16334: LD_INT 35
16336: PUSH
16337: LD_INT 36
16339: PUSH
16340: EMPTY
16341: LIST
16342: LIST
16343: LIST
16344: LIST
16345: LIST
16346: LIST
16347: LIST
16348: LIST
16349: LIST
16350: LIST
16351: LIST
16352: LIST
16353: LIST
16354: LIST
16355: LIST
16356: LIST
16357: LIST
16358: LIST
16359: LIST
16360: LIST
16361: LIST
16362: LIST
16363: LIST
16364: LIST
16365: LIST
16366: LIST
16367: LIST
16368: LIST
16369: LIST
16370: LIST
16371: LIST
16372: LIST
16373: LIST
16374: LIST
16375: LIST
16376: LIST
16377: PUSH
16378: LD_INT 101
16380: PUSH
16381: LD_INT 102
16383: PUSH
16384: LD_INT 103
16386: PUSH
16387: LD_INT 104
16389: PUSH
16390: LD_INT 105
16392: PUSH
16393: LD_INT 106
16395: PUSH
16396: LD_INT 107
16398: PUSH
16399: LD_INT 108
16401: PUSH
16402: LD_INT 109
16404: PUSH
16405: LD_INT 110
16407: PUSH
16408: LD_INT 111
16410: PUSH
16411: LD_INT 112
16413: PUSH
16414: LD_INT 113
16416: PUSH
16417: LD_INT 114
16419: PUSH
16420: LD_INT 115
16422: PUSH
16423: LD_INT 116
16425: PUSH
16426: LD_INT 117
16428: PUSH
16429: LD_INT 118
16431: PUSH
16432: EMPTY
16433: LIST
16434: LIST
16435: LIST
16436: LIST
16437: LIST
16438: LIST
16439: LIST
16440: LIST
16441: LIST
16442: LIST
16443: LIST
16444: LIST
16445: LIST
16446: LIST
16447: LIST
16448: LIST
16449: LIST
16450: LIST
16451: PUSH
16452: EMPTY
16453: LIST
16454: LIST
16455: ST_TO_ADDR
// if result then
16456: LD_VAR 0 2
16460: IFFALSE 17246
// begin normal :=  ;
16462: LD_ADDR_VAR 0 5
16466: PUSH
16467: LD_STRING 
16469: ST_TO_ADDR
// hardcore :=  ;
16470: LD_ADDR_VAR 0 6
16474: PUSH
16475: LD_STRING 
16477: ST_TO_ADDR
// active :=  ;
16478: LD_ADDR_VAR 0 7
16482: PUSH
16483: LD_STRING 
16485: ST_TO_ADDR
// for i = 1 to normalCounter do
16486: LD_ADDR_VAR 0 8
16490: PUSH
16491: DOUBLE
16492: LD_INT 1
16494: DEC
16495: ST_TO_ADDR
16496: LD_EXP 28
16500: PUSH
16501: FOR_TO
16502: IFFALSE 16603
// begin tmp := 0 ;
16504: LD_ADDR_VAR 0 3
16508: PUSH
16509: LD_STRING 0
16511: ST_TO_ADDR
// if result [ 1 ] then
16512: LD_VAR 0 2
16516: PUSH
16517: LD_INT 1
16519: ARRAY
16520: IFFALSE 16585
// if result [ 1 ] [ 1 ] = i then
16522: LD_VAR 0 2
16526: PUSH
16527: LD_INT 1
16529: ARRAY
16530: PUSH
16531: LD_INT 1
16533: ARRAY
16534: PUSH
16535: LD_VAR 0 8
16539: EQUAL
16540: IFFALSE 16585
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
16542: LD_ADDR_VAR 0 2
16546: PUSH
16547: LD_VAR 0 2
16551: PPUSH
16552: LD_INT 1
16554: PPUSH
16555: LD_VAR 0 2
16559: PUSH
16560: LD_INT 1
16562: ARRAY
16563: PPUSH
16564: LD_INT 1
16566: PPUSH
16567: CALL_OW 3
16571: PPUSH
16572: CALL_OW 1
16576: ST_TO_ADDR
// tmp := 1 ;
16577: LD_ADDR_VAR 0 3
16581: PUSH
16582: LD_STRING 1
16584: ST_TO_ADDR
// end ; normal := normal & tmp ;
16585: LD_ADDR_VAR 0 5
16589: PUSH
16590: LD_VAR 0 5
16594: PUSH
16595: LD_VAR 0 3
16599: STR
16600: ST_TO_ADDR
// end ;
16601: GO 16501
16603: POP
16604: POP
// for i = 1 to hardcoreCounter do
16605: LD_ADDR_VAR 0 8
16609: PUSH
16610: DOUBLE
16611: LD_INT 1
16613: DEC
16614: ST_TO_ADDR
16615: LD_EXP 29
16619: PUSH
16620: FOR_TO
16621: IFFALSE 16726
// begin tmp := 0 ;
16623: LD_ADDR_VAR 0 3
16627: PUSH
16628: LD_STRING 0
16630: ST_TO_ADDR
// if result [ 2 ] then
16631: LD_VAR 0 2
16635: PUSH
16636: LD_INT 2
16638: ARRAY
16639: IFFALSE 16708
// if result [ 2 ] [ 1 ] = 100 + i then
16641: LD_VAR 0 2
16645: PUSH
16646: LD_INT 2
16648: ARRAY
16649: PUSH
16650: LD_INT 1
16652: ARRAY
16653: PUSH
16654: LD_INT 100
16656: PUSH
16657: LD_VAR 0 8
16661: PLUS
16662: EQUAL
16663: IFFALSE 16708
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
16665: LD_ADDR_VAR 0 2
16669: PUSH
16670: LD_VAR 0 2
16674: PPUSH
16675: LD_INT 2
16677: PPUSH
16678: LD_VAR 0 2
16682: PUSH
16683: LD_INT 2
16685: ARRAY
16686: PPUSH
16687: LD_INT 1
16689: PPUSH
16690: CALL_OW 3
16694: PPUSH
16695: CALL_OW 1
16699: ST_TO_ADDR
// tmp := 1 ;
16700: LD_ADDR_VAR 0 3
16704: PUSH
16705: LD_STRING 1
16707: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
16708: LD_ADDR_VAR 0 6
16712: PUSH
16713: LD_VAR 0 6
16717: PUSH
16718: LD_VAR 0 3
16722: STR
16723: ST_TO_ADDR
// end ;
16724: GO 16620
16726: POP
16727: POP
// if isGameLoad then
16728: LD_VAR 0 1
16732: IFFALSE 17207
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
16734: LD_ADDR_VAR 0 4
16738: PUSH
16739: LD_EXP 32
16743: PUSH
16744: LD_EXP 31
16748: PUSH
16749: LD_EXP 33
16753: PUSH
16754: LD_EXP 30
16758: PUSH
16759: LD_EXP 34
16763: PUSH
16764: LD_EXP 35
16768: PUSH
16769: LD_EXP 36
16773: PUSH
16774: LD_EXP 37
16778: PUSH
16779: LD_EXP 38
16783: PUSH
16784: LD_EXP 39
16788: PUSH
16789: LD_EXP 40
16793: PUSH
16794: LD_EXP 41
16798: PUSH
16799: LD_EXP 42
16803: PUSH
16804: LD_EXP 43
16808: PUSH
16809: LD_EXP 51
16813: PUSH
16814: LD_EXP 52
16818: PUSH
16819: LD_EXP 53
16823: PUSH
16824: LD_EXP 54
16828: PUSH
16829: LD_EXP 56
16833: PUSH
16834: LD_EXP 57
16838: PUSH
16839: LD_EXP 58
16843: PUSH
16844: LD_EXP 61
16848: PUSH
16849: LD_EXP 63
16853: PUSH
16854: LD_EXP 64
16858: PUSH
16859: LD_EXP 65
16863: PUSH
16864: LD_EXP 67
16868: PUSH
16869: LD_EXP 68
16873: PUSH
16874: LD_EXP 71
16878: PUSH
16879: LD_EXP 72
16883: PUSH
16884: LD_EXP 73
16888: PUSH
16889: LD_EXP 74
16893: PUSH
16894: LD_EXP 75
16898: PUSH
16899: LD_EXP 76
16903: PUSH
16904: LD_EXP 77
16908: PUSH
16909: LD_EXP 78
16913: PUSH
16914: LD_EXP 79
16918: PUSH
16919: LD_EXP 44
16923: PUSH
16924: LD_EXP 45
16928: PUSH
16929: LD_EXP 48
16933: PUSH
16934: LD_EXP 49
16938: PUSH
16939: LD_EXP 50
16943: PUSH
16944: LD_EXP 46
16948: PUSH
16949: LD_EXP 47
16953: PUSH
16954: LD_EXP 55
16958: PUSH
16959: LD_EXP 59
16963: PUSH
16964: LD_EXP 60
16968: PUSH
16969: LD_EXP 62
16973: PUSH
16974: LD_EXP 66
16978: PUSH
16979: LD_EXP 69
16983: PUSH
16984: LD_EXP 70
16988: PUSH
16989: LD_EXP 80
16993: PUSH
16994: LD_EXP 81
16998: PUSH
16999: LD_EXP 82
17003: PUSH
17004: LD_EXP 83
17008: PUSH
17009: EMPTY
17010: LIST
17011: LIST
17012: LIST
17013: LIST
17014: LIST
17015: LIST
17016: LIST
17017: LIST
17018: LIST
17019: LIST
17020: LIST
17021: LIST
17022: LIST
17023: LIST
17024: LIST
17025: LIST
17026: LIST
17027: LIST
17028: LIST
17029: LIST
17030: LIST
17031: LIST
17032: LIST
17033: LIST
17034: LIST
17035: LIST
17036: LIST
17037: LIST
17038: LIST
17039: LIST
17040: LIST
17041: LIST
17042: LIST
17043: LIST
17044: LIST
17045: LIST
17046: LIST
17047: LIST
17048: LIST
17049: LIST
17050: LIST
17051: LIST
17052: LIST
17053: LIST
17054: LIST
17055: LIST
17056: LIST
17057: LIST
17058: LIST
17059: LIST
17060: LIST
17061: LIST
17062: LIST
17063: LIST
17064: ST_TO_ADDR
// tmp :=  ;
17065: LD_ADDR_VAR 0 3
17069: PUSH
17070: LD_STRING 
17072: ST_TO_ADDR
// for i = 1 to normalCounter do
17073: LD_ADDR_VAR 0 8
17077: PUSH
17078: DOUBLE
17079: LD_INT 1
17081: DEC
17082: ST_TO_ADDR
17083: LD_EXP 28
17087: PUSH
17088: FOR_TO
17089: IFFALSE 17125
// begin if flags [ i ] then
17091: LD_VAR 0 4
17095: PUSH
17096: LD_VAR 0 8
17100: ARRAY
17101: IFFALSE 17123
// tmp := tmp & i & ; ;
17103: LD_ADDR_VAR 0 3
17107: PUSH
17108: LD_VAR 0 3
17112: PUSH
17113: LD_VAR 0 8
17117: STR
17118: PUSH
17119: LD_STRING ;
17121: STR
17122: ST_TO_ADDR
// end ;
17123: GO 17088
17125: POP
17126: POP
// for i = 1 to hardcoreCounter do
17127: LD_ADDR_VAR 0 8
17131: PUSH
17132: DOUBLE
17133: LD_INT 1
17135: DEC
17136: ST_TO_ADDR
17137: LD_EXP 29
17141: PUSH
17142: FOR_TO
17143: IFFALSE 17189
// begin if flags [ normalCounter + i ] then
17145: LD_VAR 0 4
17149: PUSH
17150: LD_EXP 28
17154: PUSH
17155: LD_VAR 0 8
17159: PLUS
17160: ARRAY
17161: IFFALSE 17187
// tmp := tmp & ( 100 + i ) & ; ;
17163: LD_ADDR_VAR 0 3
17167: PUSH
17168: LD_VAR 0 3
17172: PUSH
17173: LD_INT 100
17175: PUSH
17176: LD_VAR 0 8
17180: PLUS
17181: STR
17182: PUSH
17183: LD_STRING ;
17185: STR
17186: ST_TO_ADDR
// end ;
17187: GO 17142
17189: POP
17190: POP
// if tmp then
17191: LD_VAR 0 3
17195: IFFALSE 17207
// active := tmp ;
17197: LD_ADDR_VAR 0 7
17201: PUSH
17202: LD_VAR 0 3
17206: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
17207: LD_STRING getStreamItemsFromMission("
17209: PUSH
17210: LD_VAR 0 5
17214: STR
17215: PUSH
17216: LD_STRING ","
17218: STR
17219: PUSH
17220: LD_VAR 0 6
17224: STR
17225: PUSH
17226: LD_STRING ","
17228: STR
17229: PUSH
17230: LD_VAR 0 7
17234: STR
17235: PUSH
17236: LD_STRING ")
17238: STR
17239: PPUSH
17240: CALL_OW 559
// end else
17244: GO 17253
// ToLua ( getStreamItemsFromMission("","","") ) ;
17246: LD_STRING getStreamItemsFromMission("","","")
17248: PPUSH
17249: CALL_OW 559
// end ;
17253: LD_VAR 0 2
17257: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
17258: LD_EXP 27
17262: PUSH
17263: LD_EXP 32
17267: AND
17268: IFFALSE 17392
17270: GO 17272
17272: DISABLE
17273: LD_INT 0
17275: PPUSH
17276: PPUSH
// begin enable ;
17277: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
17278: LD_ADDR_VAR 0 2
17282: PUSH
17283: LD_INT 22
17285: PUSH
17286: LD_OWVAR 2
17290: PUSH
17291: EMPTY
17292: LIST
17293: LIST
17294: PUSH
17295: LD_INT 2
17297: PUSH
17298: LD_INT 34
17300: PUSH
17301: LD_INT 7
17303: PUSH
17304: EMPTY
17305: LIST
17306: LIST
17307: PUSH
17308: LD_INT 34
17310: PUSH
17311: LD_INT 45
17313: PUSH
17314: EMPTY
17315: LIST
17316: LIST
17317: PUSH
17318: LD_INT 34
17320: PUSH
17321: LD_INT 28
17323: PUSH
17324: EMPTY
17325: LIST
17326: LIST
17327: PUSH
17328: LD_INT 34
17330: PUSH
17331: LD_INT 47
17333: PUSH
17334: EMPTY
17335: LIST
17336: LIST
17337: PUSH
17338: EMPTY
17339: LIST
17340: LIST
17341: LIST
17342: LIST
17343: LIST
17344: PUSH
17345: EMPTY
17346: LIST
17347: LIST
17348: PPUSH
17349: CALL_OW 69
17353: ST_TO_ADDR
// if not tmp then
17354: LD_VAR 0 2
17358: NOT
17359: IFFALSE 17363
// exit ;
17361: GO 17392
// for i in tmp do
17363: LD_ADDR_VAR 0 1
17367: PUSH
17368: LD_VAR 0 2
17372: PUSH
17373: FOR_IN
17374: IFFALSE 17390
// begin SetLives ( i , 0 ) ;
17376: LD_VAR 0 1
17380: PPUSH
17381: LD_INT 0
17383: PPUSH
17384: CALL_OW 234
// end ;
17388: GO 17373
17390: POP
17391: POP
// end ;
17392: PPOPN 2
17394: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
17395: LD_EXP 27
17399: PUSH
17400: LD_EXP 33
17404: AND
17405: IFFALSE 17489
17407: GO 17409
17409: DISABLE
17410: LD_INT 0
17412: PPUSH
17413: PPUSH
// begin enable ;
17414: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
17415: LD_ADDR_VAR 0 2
17419: PUSH
17420: LD_INT 22
17422: PUSH
17423: LD_OWVAR 2
17427: PUSH
17428: EMPTY
17429: LIST
17430: LIST
17431: PUSH
17432: LD_INT 32
17434: PUSH
17435: LD_INT 3
17437: PUSH
17438: EMPTY
17439: LIST
17440: LIST
17441: PUSH
17442: EMPTY
17443: LIST
17444: LIST
17445: PPUSH
17446: CALL_OW 69
17450: ST_TO_ADDR
// if not tmp then
17451: LD_VAR 0 2
17455: NOT
17456: IFFALSE 17460
// exit ;
17458: GO 17489
// for i in tmp do
17460: LD_ADDR_VAR 0 1
17464: PUSH
17465: LD_VAR 0 2
17469: PUSH
17470: FOR_IN
17471: IFFALSE 17487
// begin SetLives ( i , 0 ) ;
17473: LD_VAR 0 1
17477: PPUSH
17478: LD_INT 0
17480: PPUSH
17481: CALL_OW 234
// end ;
17485: GO 17470
17487: POP
17488: POP
// end ;
17489: PPOPN 2
17491: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
17492: LD_EXP 27
17496: PUSH
17497: LD_EXP 30
17501: AND
17502: IFFALSE 17595
17504: GO 17506
17506: DISABLE
17507: LD_INT 0
17509: PPUSH
// begin enable ;
17510: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
17511: LD_ADDR_VAR 0 1
17515: PUSH
17516: LD_INT 22
17518: PUSH
17519: LD_OWVAR 2
17523: PUSH
17524: EMPTY
17525: LIST
17526: LIST
17527: PUSH
17528: LD_INT 2
17530: PUSH
17531: LD_INT 25
17533: PUSH
17534: LD_INT 5
17536: PUSH
17537: EMPTY
17538: LIST
17539: LIST
17540: PUSH
17541: LD_INT 25
17543: PUSH
17544: LD_INT 9
17546: PUSH
17547: EMPTY
17548: LIST
17549: LIST
17550: PUSH
17551: LD_INT 25
17553: PUSH
17554: LD_INT 8
17556: PUSH
17557: EMPTY
17558: LIST
17559: LIST
17560: PUSH
17561: EMPTY
17562: LIST
17563: LIST
17564: LIST
17565: LIST
17566: PUSH
17567: EMPTY
17568: LIST
17569: LIST
17570: PPUSH
17571: CALL_OW 69
17575: PUSH
17576: FOR_IN
17577: IFFALSE 17593
// begin SetClass ( i , 1 ) ;
17579: LD_VAR 0 1
17583: PPUSH
17584: LD_INT 1
17586: PPUSH
17587: CALL_OW 336
// end ;
17591: GO 17576
17593: POP
17594: POP
// end ;
17595: PPOPN 1
17597: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
17598: LD_EXP 27
17602: PUSH
17603: LD_EXP 31
17607: AND
17608: PUSH
17609: LD_OWVAR 65
17613: PUSH
17614: LD_INT 7
17616: LESS
17617: AND
17618: IFFALSE 17632
17620: GO 17622
17622: DISABLE
// begin enable ;
17623: ENABLE
// game_speed := 7 ;
17624: LD_ADDR_OWVAR 65
17628: PUSH
17629: LD_INT 7
17631: ST_TO_ADDR
// end ;
17632: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
17633: LD_EXP 27
17637: PUSH
17638: LD_EXP 34
17642: AND
17643: IFFALSE 17845
17645: GO 17647
17647: DISABLE
17648: LD_INT 0
17650: PPUSH
17651: PPUSH
17652: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
17653: LD_ADDR_VAR 0 3
17657: PUSH
17658: LD_INT 81
17660: PUSH
17661: LD_OWVAR 2
17665: PUSH
17666: EMPTY
17667: LIST
17668: LIST
17669: PUSH
17670: LD_INT 21
17672: PUSH
17673: LD_INT 1
17675: PUSH
17676: EMPTY
17677: LIST
17678: LIST
17679: PUSH
17680: EMPTY
17681: LIST
17682: LIST
17683: PPUSH
17684: CALL_OW 69
17688: ST_TO_ADDR
// if not tmp then
17689: LD_VAR 0 3
17693: NOT
17694: IFFALSE 17698
// exit ;
17696: GO 17845
// if tmp > 5 then
17698: LD_VAR 0 3
17702: PUSH
17703: LD_INT 5
17705: GREATER
17706: IFFALSE 17718
// k := 5 else
17708: LD_ADDR_VAR 0 2
17712: PUSH
17713: LD_INT 5
17715: ST_TO_ADDR
17716: GO 17728
// k := tmp ;
17718: LD_ADDR_VAR 0 2
17722: PUSH
17723: LD_VAR 0 3
17727: ST_TO_ADDR
// for i := 1 to k do
17728: LD_ADDR_VAR 0 1
17732: PUSH
17733: DOUBLE
17734: LD_INT 1
17736: DEC
17737: ST_TO_ADDR
17738: LD_VAR 0 2
17742: PUSH
17743: FOR_TO
17744: IFFALSE 17843
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
17746: LD_VAR 0 3
17750: PUSH
17751: LD_VAR 0 1
17755: ARRAY
17756: PPUSH
17757: LD_VAR 0 1
17761: PUSH
17762: LD_INT 4
17764: MOD
17765: PUSH
17766: LD_INT 1
17768: PLUS
17769: PPUSH
17770: CALL_OW 259
17774: PUSH
17775: LD_INT 10
17777: LESS
17778: IFFALSE 17841
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
17780: LD_VAR 0 3
17784: PUSH
17785: LD_VAR 0 1
17789: ARRAY
17790: PPUSH
17791: LD_VAR 0 1
17795: PUSH
17796: LD_INT 4
17798: MOD
17799: PUSH
17800: LD_INT 1
17802: PLUS
17803: PPUSH
17804: LD_VAR 0 3
17808: PUSH
17809: LD_VAR 0 1
17813: ARRAY
17814: PPUSH
17815: LD_VAR 0 1
17819: PUSH
17820: LD_INT 4
17822: MOD
17823: PUSH
17824: LD_INT 1
17826: PLUS
17827: PPUSH
17828: CALL_OW 259
17832: PUSH
17833: LD_INT 1
17835: PLUS
17836: PPUSH
17837: CALL_OW 237
17841: GO 17743
17843: POP
17844: POP
// end ;
17845: PPOPN 3
17847: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
17848: LD_EXP 27
17852: PUSH
17853: LD_EXP 35
17857: AND
17858: IFFALSE 17878
17860: GO 17862
17862: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
17863: LD_INT 4
17865: PPUSH
17866: LD_OWVAR 2
17870: PPUSH
17871: LD_INT 0
17873: PPUSH
17874: CALL_OW 324
17878: END
// every 0 0$1 trigger StreamModeActive and sShovel do
17879: LD_EXP 27
17883: PUSH
17884: LD_EXP 64
17888: AND
17889: IFFALSE 17909
17891: GO 17893
17893: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
17894: LD_INT 19
17896: PPUSH
17897: LD_OWVAR 2
17901: PPUSH
17902: LD_INT 0
17904: PPUSH
17905: CALL_OW 324
17909: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
17910: LD_EXP 27
17914: PUSH
17915: LD_EXP 36
17919: AND
17920: IFFALSE 18022
17922: GO 17924
17924: DISABLE
17925: LD_INT 0
17927: PPUSH
17928: PPUSH
// begin enable ;
17929: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
17930: LD_ADDR_VAR 0 2
17934: PUSH
17935: LD_INT 22
17937: PUSH
17938: LD_OWVAR 2
17942: PUSH
17943: EMPTY
17944: LIST
17945: LIST
17946: PUSH
17947: LD_INT 2
17949: PUSH
17950: LD_INT 34
17952: PUSH
17953: LD_INT 11
17955: PUSH
17956: EMPTY
17957: LIST
17958: LIST
17959: PUSH
17960: LD_INT 34
17962: PUSH
17963: LD_INT 30
17965: PUSH
17966: EMPTY
17967: LIST
17968: LIST
17969: PUSH
17970: EMPTY
17971: LIST
17972: LIST
17973: LIST
17974: PUSH
17975: EMPTY
17976: LIST
17977: LIST
17978: PPUSH
17979: CALL_OW 69
17983: ST_TO_ADDR
// if not tmp then
17984: LD_VAR 0 2
17988: NOT
17989: IFFALSE 17993
// exit ;
17991: GO 18022
// for i in tmp do
17993: LD_ADDR_VAR 0 1
17997: PUSH
17998: LD_VAR 0 2
18002: PUSH
18003: FOR_IN
18004: IFFALSE 18020
// begin SetLives ( i , 0 ) ;
18006: LD_VAR 0 1
18010: PPUSH
18011: LD_INT 0
18013: PPUSH
18014: CALL_OW 234
// end ;
18018: GO 18003
18020: POP
18021: POP
// end ;
18022: PPOPN 2
18024: END
// every 0 0$1 trigger StreamModeActive and sBunker do
18025: LD_EXP 27
18029: PUSH
18030: LD_EXP 37
18034: AND
18035: IFFALSE 18055
18037: GO 18039
18039: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
18040: LD_INT 32
18042: PPUSH
18043: LD_OWVAR 2
18047: PPUSH
18048: LD_INT 0
18050: PPUSH
18051: CALL_OW 324
18055: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
18056: LD_EXP 27
18060: PUSH
18061: LD_EXP 38
18065: AND
18066: IFFALSE 18247
18068: GO 18070
18070: DISABLE
18071: LD_INT 0
18073: PPUSH
18074: PPUSH
18075: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
18076: LD_ADDR_VAR 0 2
18080: PUSH
18081: LD_INT 22
18083: PUSH
18084: LD_OWVAR 2
18088: PUSH
18089: EMPTY
18090: LIST
18091: LIST
18092: PUSH
18093: LD_INT 33
18095: PUSH
18096: LD_INT 3
18098: PUSH
18099: EMPTY
18100: LIST
18101: LIST
18102: PUSH
18103: EMPTY
18104: LIST
18105: LIST
18106: PPUSH
18107: CALL_OW 69
18111: ST_TO_ADDR
// if not tmp then
18112: LD_VAR 0 2
18116: NOT
18117: IFFALSE 18121
// exit ;
18119: GO 18247
// side := 0 ;
18121: LD_ADDR_VAR 0 3
18125: PUSH
18126: LD_INT 0
18128: ST_TO_ADDR
// for i := 1 to 8 do
18129: LD_ADDR_VAR 0 1
18133: PUSH
18134: DOUBLE
18135: LD_INT 1
18137: DEC
18138: ST_TO_ADDR
18139: LD_INT 8
18141: PUSH
18142: FOR_TO
18143: IFFALSE 18191
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
18145: LD_OWVAR 2
18149: PUSH
18150: LD_VAR 0 1
18154: NONEQUAL
18155: PUSH
18156: LD_OWVAR 2
18160: PPUSH
18161: LD_VAR 0 1
18165: PPUSH
18166: CALL_OW 81
18170: PUSH
18171: LD_INT 2
18173: EQUAL
18174: AND
18175: IFFALSE 18189
// begin side := i ;
18177: LD_ADDR_VAR 0 3
18181: PUSH
18182: LD_VAR 0 1
18186: ST_TO_ADDR
// break ;
18187: GO 18191
// end ;
18189: GO 18142
18191: POP
18192: POP
// if not side then
18193: LD_VAR 0 3
18197: NOT
18198: IFFALSE 18202
// exit ;
18200: GO 18247
// for i := 1 to tmp do
18202: LD_ADDR_VAR 0 1
18206: PUSH
18207: DOUBLE
18208: LD_INT 1
18210: DEC
18211: ST_TO_ADDR
18212: LD_VAR 0 2
18216: PUSH
18217: FOR_TO
18218: IFFALSE 18245
// if Prob ( 60 ) then
18220: LD_INT 60
18222: PPUSH
18223: CALL_OW 13
18227: IFFALSE 18243
// SetSide ( i , side ) ;
18229: LD_VAR 0 1
18233: PPUSH
18234: LD_VAR 0 3
18238: PPUSH
18239: CALL_OW 235
18243: GO 18217
18245: POP
18246: POP
// end ;
18247: PPOPN 3
18249: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
18250: LD_EXP 27
18254: PUSH
18255: LD_EXP 40
18259: AND
18260: IFFALSE 18379
18262: GO 18264
18264: DISABLE
18265: LD_INT 0
18267: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
18268: LD_ADDR_VAR 0 1
18272: PUSH
18273: LD_INT 22
18275: PUSH
18276: LD_OWVAR 2
18280: PUSH
18281: EMPTY
18282: LIST
18283: LIST
18284: PUSH
18285: LD_INT 21
18287: PUSH
18288: LD_INT 1
18290: PUSH
18291: EMPTY
18292: LIST
18293: LIST
18294: PUSH
18295: LD_INT 3
18297: PUSH
18298: LD_INT 23
18300: PUSH
18301: LD_INT 0
18303: PUSH
18304: EMPTY
18305: LIST
18306: LIST
18307: PUSH
18308: EMPTY
18309: LIST
18310: LIST
18311: PUSH
18312: EMPTY
18313: LIST
18314: LIST
18315: LIST
18316: PPUSH
18317: CALL_OW 69
18321: PUSH
18322: FOR_IN
18323: IFFALSE 18377
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
18325: LD_VAR 0 1
18329: PPUSH
18330: CALL_OW 257
18334: PUSH
18335: LD_INT 1
18337: PUSH
18338: LD_INT 2
18340: PUSH
18341: LD_INT 3
18343: PUSH
18344: LD_INT 4
18346: PUSH
18347: EMPTY
18348: LIST
18349: LIST
18350: LIST
18351: LIST
18352: IN
18353: IFFALSE 18375
// SetClass ( un , rand ( 1 , 4 ) ) ;
18355: LD_VAR 0 1
18359: PPUSH
18360: LD_INT 1
18362: PPUSH
18363: LD_INT 4
18365: PPUSH
18366: CALL_OW 12
18370: PPUSH
18371: CALL_OW 336
18375: GO 18322
18377: POP
18378: POP
// end ;
18379: PPOPN 1
18381: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
18382: LD_EXP 27
18386: PUSH
18387: LD_EXP 39
18391: AND
18392: IFFALSE 18471
18394: GO 18396
18396: DISABLE
18397: LD_INT 0
18399: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18400: LD_ADDR_VAR 0 1
18404: PUSH
18405: LD_INT 22
18407: PUSH
18408: LD_OWVAR 2
18412: PUSH
18413: EMPTY
18414: LIST
18415: LIST
18416: PUSH
18417: LD_INT 21
18419: PUSH
18420: LD_INT 3
18422: PUSH
18423: EMPTY
18424: LIST
18425: LIST
18426: PUSH
18427: EMPTY
18428: LIST
18429: LIST
18430: PPUSH
18431: CALL_OW 69
18435: ST_TO_ADDR
// if not tmp then
18436: LD_VAR 0 1
18440: NOT
18441: IFFALSE 18445
// exit ;
18443: GO 18471
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
18445: LD_VAR 0 1
18449: PUSH
18450: LD_INT 1
18452: PPUSH
18453: LD_VAR 0 1
18457: PPUSH
18458: CALL_OW 12
18462: ARRAY
18463: PPUSH
18464: LD_INT 100
18466: PPUSH
18467: CALL_OW 234
// end ;
18471: PPOPN 1
18473: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
18474: LD_EXP 27
18478: PUSH
18479: LD_EXP 41
18483: AND
18484: IFFALSE 18582
18486: GO 18488
18488: DISABLE
18489: LD_INT 0
18491: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18492: LD_ADDR_VAR 0 1
18496: PUSH
18497: LD_INT 22
18499: PUSH
18500: LD_OWVAR 2
18504: PUSH
18505: EMPTY
18506: LIST
18507: LIST
18508: PUSH
18509: LD_INT 21
18511: PUSH
18512: LD_INT 1
18514: PUSH
18515: EMPTY
18516: LIST
18517: LIST
18518: PUSH
18519: EMPTY
18520: LIST
18521: LIST
18522: PPUSH
18523: CALL_OW 69
18527: ST_TO_ADDR
// if not tmp then
18528: LD_VAR 0 1
18532: NOT
18533: IFFALSE 18537
// exit ;
18535: GO 18582
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
18537: LD_VAR 0 1
18541: PUSH
18542: LD_INT 1
18544: PPUSH
18545: LD_VAR 0 1
18549: PPUSH
18550: CALL_OW 12
18554: ARRAY
18555: PPUSH
18556: LD_INT 1
18558: PPUSH
18559: LD_INT 4
18561: PPUSH
18562: CALL_OW 12
18566: PPUSH
18567: LD_INT 3000
18569: PPUSH
18570: LD_INT 9000
18572: PPUSH
18573: CALL_OW 12
18577: PPUSH
18578: CALL_OW 492
// end ;
18582: PPOPN 1
18584: END
// every 0 0$1 trigger StreamModeActive and sDepot do
18585: LD_EXP 27
18589: PUSH
18590: LD_EXP 42
18594: AND
18595: IFFALSE 18615
18597: GO 18599
18599: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
18600: LD_INT 1
18602: PPUSH
18603: LD_OWVAR 2
18607: PPUSH
18608: LD_INT 0
18610: PPUSH
18611: CALL_OW 324
18615: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
18616: LD_EXP 27
18620: PUSH
18621: LD_EXP 43
18625: AND
18626: IFFALSE 18709
18628: GO 18630
18630: DISABLE
18631: LD_INT 0
18633: PPUSH
18634: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18635: LD_ADDR_VAR 0 2
18639: PUSH
18640: LD_INT 22
18642: PUSH
18643: LD_OWVAR 2
18647: PUSH
18648: EMPTY
18649: LIST
18650: LIST
18651: PUSH
18652: LD_INT 21
18654: PUSH
18655: LD_INT 3
18657: PUSH
18658: EMPTY
18659: LIST
18660: LIST
18661: PUSH
18662: EMPTY
18663: LIST
18664: LIST
18665: PPUSH
18666: CALL_OW 69
18670: ST_TO_ADDR
// if not tmp then
18671: LD_VAR 0 2
18675: NOT
18676: IFFALSE 18680
// exit ;
18678: GO 18709
// for i in tmp do
18680: LD_ADDR_VAR 0 1
18684: PUSH
18685: LD_VAR 0 2
18689: PUSH
18690: FOR_IN
18691: IFFALSE 18707
// SetBLevel ( i , 10 ) ;
18693: LD_VAR 0 1
18697: PPUSH
18698: LD_INT 10
18700: PPUSH
18701: CALL_OW 241
18705: GO 18690
18707: POP
18708: POP
// end ;
18709: PPOPN 2
18711: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
18712: LD_EXP 27
18716: PUSH
18717: LD_EXP 44
18721: AND
18722: IFFALSE 18833
18724: GO 18726
18726: DISABLE
18727: LD_INT 0
18729: PPUSH
18730: PPUSH
18731: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18732: LD_ADDR_VAR 0 3
18736: PUSH
18737: LD_INT 22
18739: PUSH
18740: LD_OWVAR 2
18744: PUSH
18745: EMPTY
18746: LIST
18747: LIST
18748: PUSH
18749: LD_INT 25
18751: PUSH
18752: LD_INT 1
18754: PUSH
18755: EMPTY
18756: LIST
18757: LIST
18758: PUSH
18759: EMPTY
18760: LIST
18761: LIST
18762: PPUSH
18763: CALL_OW 69
18767: ST_TO_ADDR
// if not tmp then
18768: LD_VAR 0 3
18772: NOT
18773: IFFALSE 18777
// exit ;
18775: GO 18833
// un := tmp [ rand ( 1 , tmp ) ] ;
18777: LD_ADDR_VAR 0 2
18781: PUSH
18782: LD_VAR 0 3
18786: PUSH
18787: LD_INT 1
18789: PPUSH
18790: LD_VAR 0 3
18794: PPUSH
18795: CALL_OW 12
18799: ARRAY
18800: ST_TO_ADDR
// if Crawls ( un ) then
18801: LD_VAR 0 2
18805: PPUSH
18806: CALL_OW 318
18810: IFFALSE 18821
// ComWalk ( un ) ;
18812: LD_VAR 0 2
18816: PPUSH
18817: CALL_OW 138
// SetClass ( un , class_sniper ) ;
18821: LD_VAR 0 2
18825: PPUSH
18826: LD_INT 5
18828: PPUSH
18829: CALL_OW 336
// end ;
18833: PPOPN 3
18835: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
18836: LD_EXP 27
18840: PUSH
18841: LD_EXP 45
18845: AND
18846: PUSH
18847: LD_OWVAR 67
18851: PUSH
18852: LD_INT 4
18854: LESS
18855: AND
18856: IFFALSE 18875
18858: GO 18860
18860: DISABLE
// begin Difficulty := Difficulty + 1 ;
18861: LD_ADDR_OWVAR 67
18865: PUSH
18866: LD_OWVAR 67
18870: PUSH
18871: LD_INT 1
18873: PLUS
18874: ST_TO_ADDR
// end ;
18875: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
18876: LD_EXP 27
18880: PUSH
18881: LD_EXP 46
18885: AND
18886: IFFALSE 18989
18888: GO 18890
18890: DISABLE
18891: LD_INT 0
18893: PPUSH
// begin for i := 1 to 5 do
18894: LD_ADDR_VAR 0 1
18898: PUSH
18899: DOUBLE
18900: LD_INT 1
18902: DEC
18903: ST_TO_ADDR
18904: LD_INT 5
18906: PUSH
18907: FOR_TO
18908: IFFALSE 18987
// begin uc_nation := nation_nature ;
18910: LD_ADDR_OWVAR 21
18914: PUSH
18915: LD_INT 0
18917: ST_TO_ADDR
// uc_side := 0 ;
18918: LD_ADDR_OWVAR 20
18922: PUSH
18923: LD_INT 0
18925: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
18926: LD_ADDR_OWVAR 29
18930: PUSH
18931: LD_INT 12
18933: PUSH
18934: LD_INT 12
18936: PUSH
18937: EMPTY
18938: LIST
18939: LIST
18940: ST_TO_ADDR
// hc_agressivity := 20 ;
18941: LD_ADDR_OWVAR 35
18945: PUSH
18946: LD_INT 20
18948: ST_TO_ADDR
// hc_class := class_tiger ;
18949: LD_ADDR_OWVAR 28
18953: PUSH
18954: LD_INT 14
18956: ST_TO_ADDR
// hc_gallery :=  ;
18957: LD_ADDR_OWVAR 33
18961: PUSH
18962: LD_STRING 
18964: ST_TO_ADDR
// hc_name :=  ;
18965: LD_ADDR_OWVAR 26
18969: PUSH
18970: LD_STRING 
18972: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
18973: CALL_OW 44
18977: PPUSH
18978: LD_INT 0
18980: PPUSH
18981: CALL_OW 51
// end ;
18985: GO 18907
18987: POP
18988: POP
// end ;
18989: PPOPN 1
18991: END
// every 0 0$1 trigger StreamModeActive and sBomb do
18992: LD_EXP 27
18996: PUSH
18997: LD_EXP 47
19001: AND
19002: IFFALSE 19011
19004: GO 19006
19006: DISABLE
// StreamSibBomb ;
19007: CALL 19012 0 0
19011: END
// export function StreamSibBomb ; var i , x , y ; begin
19012: LD_INT 0
19014: PPUSH
19015: PPUSH
19016: PPUSH
19017: PPUSH
// result := false ;
19018: LD_ADDR_VAR 0 1
19022: PUSH
19023: LD_INT 0
19025: ST_TO_ADDR
// for i := 1 to 16 do
19026: LD_ADDR_VAR 0 2
19030: PUSH
19031: DOUBLE
19032: LD_INT 1
19034: DEC
19035: ST_TO_ADDR
19036: LD_INT 16
19038: PUSH
19039: FOR_TO
19040: IFFALSE 19239
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
19042: LD_ADDR_VAR 0 3
19046: PUSH
19047: LD_INT 10
19049: PUSH
19050: LD_INT 20
19052: PUSH
19053: LD_INT 30
19055: PUSH
19056: LD_INT 40
19058: PUSH
19059: LD_INT 50
19061: PUSH
19062: LD_INT 60
19064: PUSH
19065: LD_INT 70
19067: PUSH
19068: LD_INT 80
19070: PUSH
19071: LD_INT 90
19073: PUSH
19074: LD_INT 100
19076: PUSH
19077: LD_INT 110
19079: PUSH
19080: LD_INT 120
19082: PUSH
19083: LD_INT 130
19085: PUSH
19086: LD_INT 140
19088: PUSH
19089: LD_INT 150
19091: PUSH
19092: EMPTY
19093: LIST
19094: LIST
19095: LIST
19096: LIST
19097: LIST
19098: LIST
19099: LIST
19100: LIST
19101: LIST
19102: LIST
19103: LIST
19104: LIST
19105: LIST
19106: LIST
19107: LIST
19108: PUSH
19109: LD_INT 1
19111: PPUSH
19112: LD_INT 15
19114: PPUSH
19115: CALL_OW 12
19119: ARRAY
19120: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
19121: LD_ADDR_VAR 0 4
19125: PUSH
19126: LD_INT 10
19128: PUSH
19129: LD_INT 20
19131: PUSH
19132: LD_INT 30
19134: PUSH
19135: LD_INT 40
19137: PUSH
19138: LD_INT 50
19140: PUSH
19141: LD_INT 60
19143: PUSH
19144: LD_INT 70
19146: PUSH
19147: LD_INT 80
19149: PUSH
19150: LD_INT 90
19152: PUSH
19153: LD_INT 100
19155: PUSH
19156: LD_INT 110
19158: PUSH
19159: LD_INT 120
19161: PUSH
19162: LD_INT 130
19164: PUSH
19165: LD_INT 140
19167: PUSH
19168: LD_INT 150
19170: PUSH
19171: EMPTY
19172: LIST
19173: LIST
19174: LIST
19175: LIST
19176: LIST
19177: LIST
19178: LIST
19179: LIST
19180: LIST
19181: LIST
19182: LIST
19183: LIST
19184: LIST
19185: LIST
19186: LIST
19187: PUSH
19188: LD_INT 1
19190: PPUSH
19191: LD_INT 15
19193: PPUSH
19194: CALL_OW 12
19198: ARRAY
19199: ST_TO_ADDR
// if ValidHex ( x , y ) then
19200: LD_VAR 0 3
19204: PPUSH
19205: LD_VAR 0 4
19209: PPUSH
19210: CALL_OW 488
19214: IFFALSE 19237
// begin result := [ x , y ] ;
19216: LD_ADDR_VAR 0 1
19220: PUSH
19221: LD_VAR 0 3
19225: PUSH
19226: LD_VAR 0 4
19230: PUSH
19231: EMPTY
19232: LIST
19233: LIST
19234: ST_TO_ADDR
// break ;
19235: GO 19239
// end ; end ;
19237: GO 19039
19239: POP
19240: POP
// if result then
19241: LD_VAR 0 1
19245: IFFALSE 19305
// begin ToLua ( playSibBomb() ) ;
19247: LD_STRING playSibBomb()
19249: PPUSH
19250: CALL_OW 559
// wait ( 0 0$14 ) ;
19254: LD_INT 490
19256: PPUSH
19257: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
19261: LD_VAR 0 1
19265: PUSH
19266: LD_INT 1
19268: ARRAY
19269: PPUSH
19270: LD_VAR 0 1
19274: PUSH
19275: LD_INT 2
19277: ARRAY
19278: PPUSH
19279: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
19283: LD_VAR 0 1
19287: PUSH
19288: LD_INT 1
19290: ARRAY
19291: PPUSH
19292: LD_VAR 0 1
19296: PUSH
19297: LD_INT 2
19299: ARRAY
19300: PPUSH
19301: CALL_OW 429
// end ; end ;
19305: LD_VAR 0 1
19309: RET
// every 0 0$1 trigger StreamModeActive and sReset do
19310: LD_EXP 27
19314: PUSH
19315: LD_EXP 49
19319: AND
19320: IFFALSE 19332
19322: GO 19324
19324: DISABLE
// YouLost (  ) ;
19325: LD_STRING 
19327: PPUSH
19328: CALL_OW 104
19332: END
// every 0 0$1 trigger StreamModeActive and sFog do
19333: LD_EXP 27
19337: PUSH
19338: LD_EXP 48
19342: AND
19343: IFFALSE 19357
19345: GO 19347
19347: DISABLE
// FogOff ( your_side ) ;
19348: LD_OWVAR 2
19352: PPUSH
19353: CALL_OW 344
19357: END
// every 0 0$1 trigger StreamModeActive and sSun do
19358: LD_EXP 27
19362: PUSH
19363: LD_EXP 50
19367: AND
19368: IFFALSE 19396
19370: GO 19372
19372: DISABLE
// begin solar_recharge_percent := 0 ;
19373: LD_ADDR_OWVAR 79
19377: PUSH
19378: LD_INT 0
19380: ST_TO_ADDR
// wait ( 5 5$00 ) ;
19381: LD_INT 10500
19383: PPUSH
19384: CALL_OW 67
// solar_recharge_percent := 100 ;
19388: LD_ADDR_OWVAR 79
19392: PUSH
19393: LD_INT 100
19395: ST_TO_ADDR
// end ;
19396: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
19397: LD_EXP 27
19401: PUSH
19402: LD_EXP 51
19406: AND
19407: IFFALSE 19646
19409: GO 19411
19411: DISABLE
19412: LD_INT 0
19414: PPUSH
19415: PPUSH
19416: PPUSH
// begin tmp := [ ] ;
19417: LD_ADDR_VAR 0 3
19421: PUSH
19422: EMPTY
19423: ST_TO_ADDR
// for i := 1 to 6 do
19424: LD_ADDR_VAR 0 1
19428: PUSH
19429: DOUBLE
19430: LD_INT 1
19432: DEC
19433: ST_TO_ADDR
19434: LD_INT 6
19436: PUSH
19437: FOR_TO
19438: IFFALSE 19543
// begin uc_nation := nation_nature ;
19440: LD_ADDR_OWVAR 21
19444: PUSH
19445: LD_INT 0
19447: ST_TO_ADDR
// uc_side := 0 ;
19448: LD_ADDR_OWVAR 20
19452: PUSH
19453: LD_INT 0
19455: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19456: LD_ADDR_OWVAR 29
19460: PUSH
19461: LD_INT 12
19463: PUSH
19464: LD_INT 12
19466: PUSH
19467: EMPTY
19468: LIST
19469: LIST
19470: ST_TO_ADDR
// hc_agressivity := 20 ;
19471: LD_ADDR_OWVAR 35
19475: PUSH
19476: LD_INT 20
19478: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
19479: LD_ADDR_OWVAR 28
19483: PUSH
19484: LD_INT 17
19486: ST_TO_ADDR
// hc_gallery :=  ;
19487: LD_ADDR_OWVAR 33
19491: PUSH
19492: LD_STRING 
19494: ST_TO_ADDR
// hc_name :=  ;
19495: LD_ADDR_OWVAR 26
19499: PUSH
19500: LD_STRING 
19502: ST_TO_ADDR
// un := CreateHuman ;
19503: LD_ADDR_VAR 0 2
19507: PUSH
19508: CALL_OW 44
19512: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
19513: LD_VAR 0 2
19517: PPUSH
19518: LD_INT 1
19520: PPUSH
19521: CALL_OW 51
// tmp := tmp ^ un ;
19525: LD_ADDR_VAR 0 3
19529: PUSH
19530: LD_VAR 0 3
19534: PUSH
19535: LD_VAR 0 2
19539: ADD
19540: ST_TO_ADDR
// end ;
19541: GO 19437
19543: POP
19544: POP
// repeat wait ( 0 0$1 ) ;
19545: LD_INT 35
19547: PPUSH
19548: CALL_OW 67
// for un in tmp do
19552: LD_ADDR_VAR 0 2
19556: PUSH
19557: LD_VAR 0 3
19561: PUSH
19562: FOR_IN
19563: IFFALSE 19637
// begin if IsDead ( un ) then
19565: LD_VAR 0 2
19569: PPUSH
19570: CALL_OW 301
19574: IFFALSE 19594
// begin tmp := tmp diff un ;
19576: LD_ADDR_VAR 0 3
19580: PUSH
19581: LD_VAR 0 3
19585: PUSH
19586: LD_VAR 0 2
19590: DIFF
19591: ST_TO_ADDR
// continue ;
19592: GO 19562
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
19594: LD_VAR 0 2
19598: PPUSH
19599: LD_INT 3
19601: PUSH
19602: LD_INT 22
19604: PUSH
19605: LD_INT 0
19607: PUSH
19608: EMPTY
19609: LIST
19610: LIST
19611: PUSH
19612: EMPTY
19613: LIST
19614: LIST
19615: PPUSH
19616: CALL_OW 69
19620: PPUSH
19621: LD_VAR 0 2
19625: PPUSH
19626: CALL_OW 74
19630: PPUSH
19631: CALL_OW 115
// end ;
19635: GO 19562
19637: POP
19638: POP
// until not tmp ;
19639: LD_VAR 0 3
19643: NOT
19644: IFFALSE 19545
// end ;
19646: PPOPN 3
19648: END
// every 0 0$1 trigger StreamModeActive and sTroll do
19649: LD_EXP 27
19653: PUSH
19654: LD_EXP 52
19658: AND
19659: IFFALSE 19713
19661: GO 19663
19663: DISABLE
// begin ToLua ( displayTroll(); ) ;
19664: LD_STRING displayTroll();
19666: PPUSH
19667: CALL_OW 559
// wait ( 3 3$00 ) ;
19671: LD_INT 6300
19673: PPUSH
19674: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19678: LD_STRING hideTroll();
19680: PPUSH
19681: CALL_OW 559
// wait ( 1 1$00 ) ;
19685: LD_INT 2100
19687: PPUSH
19688: CALL_OW 67
// ToLua ( displayTroll(); ) ;
19692: LD_STRING displayTroll();
19694: PPUSH
19695: CALL_OW 559
// wait ( 1 1$00 ) ;
19699: LD_INT 2100
19701: PPUSH
19702: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19706: LD_STRING hideTroll();
19708: PPUSH
19709: CALL_OW 559
// end ;
19713: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
19714: LD_EXP 27
19718: PUSH
19719: LD_EXP 53
19723: AND
19724: IFFALSE 19787
19726: GO 19728
19728: DISABLE
19729: LD_INT 0
19731: PPUSH
// begin p := 0 ;
19732: LD_ADDR_VAR 0 1
19736: PUSH
19737: LD_INT 0
19739: ST_TO_ADDR
// repeat game_speed := 1 ;
19740: LD_ADDR_OWVAR 65
19744: PUSH
19745: LD_INT 1
19747: ST_TO_ADDR
// wait ( 0 0$1 ) ;
19748: LD_INT 35
19750: PPUSH
19751: CALL_OW 67
// p := p + 1 ;
19755: LD_ADDR_VAR 0 1
19759: PUSH
19760: LD_VAR 0 1
19764: PUSH
19765: LD_INT 1
19767: PLUS
19768: ST_TO_ADDR
// until p >= 60 ;
19769: LD_VAR 0 1
19773: PUSH
19774: LD_INT 60
19776: GREATEREQUAL
19777: IFFALSE 19740
// game_speed := 4 ;
19779: LD_ADDR_OWVAR 65
19783: PUSH
19784: LD_INT 4
19786: ST_TO_ADDR
// end ;
19787: PPOPN 1
19789: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
19790: LD_EXP 27
19794: PUSH
19795: LD_EXP 54
19799: AND
19800: IFFALSE 19946
19802: GO 19804
19804: DISABLE
19805: LD_INT 0
19807: PPUSH
19808: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19809: LD_ADDR_VAR 0 1
19813: PUSH
19814: LD_INT 22
19816: PUSH
19817: LD_OWVAR 2
19821: PUSH
19822: EMPTY
19823: LIST
19824: LIST
19825: PUSH
19826: LD_INT 2
19828: PUSH
19829: LD_INT 30
19831: PUSH
19832: LD_INT 0
19834: PUSH
19835: EMPTY
19836: LIST
19837: LIST
19838: PUSH
19839: LD_INT 30
19841: PUSH
19842: LD_INT 1
19844: PUSH
19845: EMPTY
19846: LIST
19847: LIST
19848: PUSH
19849: EMPTY
19850: LIST
19851: LIST
19852: LIST
19853: PUSH
19854: EMPTY
19855: LIST
19856: LIST
19857: PPUSH
19858: CALL_OW 69
19862: ST_TO_ADDR
// if not depot then
19863: LD_VAR 0 1
19867: NOT
19868: IFFALSE 19872
// exit ;
19870: GO 19946
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
19872: LD_ADDR_VAR 0 2
19876: PUSH
19877: LD_VAR 0 1
19881: PUSH
19882: LD_INT 1
19884: PPUSH
19885: LD_VAR 0 1
19889: PPUSH
19890: CALL_OW 12
19894: ARRAY
19895: PPUSH
19896: CALL_OW 274
19900: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
19901: LD_VAR 0 2
19905: PPUSH
19906: LD_INT 1
19908: PPUSH
19909: LD_INT 0
19911: PPUSH
19912: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
19916: LD_VAR 0 2
19920: PPUSH
19921: LD_INT 2
19923: PPUSH
19924: LD_INT 0
19926: PPUSH
19927: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
19931: LD_VAR 0 2
19935: PPUSH
19936: LD_INT 3
19938: PPUSH
19939: LD_INT 0
19941: PPUSH
19942: CALL_OW 277
// end ;
19946: PPOPN 2
19948: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
19949: LD_EXP 27
19953: PUSH
19954: LD_EXP 55
19958: AND
19959: IFFALSE 20056
19961: GO 19963
19963: DISABLE
19964: LD_INT 0
19966: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19967: LD_ADDR_VAR 0 1
19971: PUSH
19972: LD_INT 22
19974: PUSH
19975: LD_OWVAR 2
19979: PUSH
19980: EMPTY
19981: LIST
19982: LIST
19983: PUSH
19984: LD_INT 21
19986: PUSH
19987: LD_INT 1
19989: PUSH
19990: EMPTY
19991: LIST
19992: LIST
19993: PUSH
19994: LD_INT 3
19996: PUSH
19997: LD_INT 23
19999: PUSH
20000: LD_INT 0
20002: PUSH
20003: EMPTY
20004: LIST
20005: LIST
20006: PUSH
20007: EMPTY
20008: LIST
20009: LIST
20010: PUSH
20011: EMPTY
20012: LIST
20013: LIST
20014: LIST
20015: PPUSH
20016: CALL_OW 69
20020: ST_TO_ADDR
// if not tmp then
20021: LD_VAR 0 1
20025: NOT
20026: IFFALSE 20030
// exit ;
20028: GO 20056
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
20030: LD_VAR 0 1
20034: PUSH
20035: LD_INT 1
20037: PPUSH
20038: LD_VAR 0 1
20042: PPUSH
20043: CALL_OW 12
20047: ARRAY
20048: PPUSH
20049: LD_INT 200
20051: PPUSH
20052: CALL_OW 234
// end ;
20056: PPOPN 1
20058: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
20059: LD_EXP 27
20063: PUSH
20064: LD_EXP 56
20068: AND
20069: IFFALSE 20148
20071: GO 20073
20073: DISABLE
20074: LD_INT 0
20076: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
20077: LD_ADDR_VAR 0 1
20081: PUSH
20082: LD_INT 22
20084: PUSH
20085: LD_OWVAR 2
20089: PUSH
20090: EMPTY
20091: LIST
20092: LIST
20093: PUSH
20094: LD_INT 21
20096: PUSH
20097: LD_INT 2
20099: PUSH
20100: EMPTY
20101: LIST
20102: LIST
20103: PUSH
20104: EMPTY
20105: LIST
20106: LIST
20107: PPUSH
20108: CALL_OW 69
20112: ST_TO_ADDR
// if not tmp then
20113: LD_VAR 0 1
20117: NOT
20118: IFFALSE 20122
// exit ;
20120: GO 20148
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
20122: LD_VAR 0 1
20126: PUSH
20127: LD_INT 1
20129: PPUSH
20130: LD_VAR 0 1
20134: PPUSH
20135: CALL_OW 12
20139: ARRAY
20140: PPUSH
20141: LD_INT 60
20143: PPUSH
20144: CALL_OW 234
// end ;
20148: PPOPN 1
20150: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
20151: LD_EXP 27
20155: PUSH
20156: LD_EXP 57
20160: AND
20161: IFFALSE 20260
20163: GO 20165
20165: DISABLE
20166: LD_INT 0
20168: PPUSH
20169: PPUSH
// begin enable ;
20170: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
20171: LD_ADDR_VAR 0 1
20175: PUSH
20176: LD_INT 22
20178: PUSH
20179: LD_OWVAR 2
20183: PUSH
20184: EMPTY
20185: LIST
20186: LIST
20187: PUSH
20188: LD_INT 61
20190: PUSH
20191: EMPTY
20192: LIST
20193: PUSH
20194: LD_INT 33
20196: PUSH
20197: LD_INT 2
20199: PUSH
20200: EMPTY
20201: LIST
20202: LIST
20203: PUSH
20204: EMPTY
20205: LIST
20206: LIST
20207: LIST
20208: PPUSH
20209: CALL_OW 69
20213: ST_TO_ADDR
// if not tmp then
20214: LD_VAR 0 1
20218: NOT
20219: IFFALSE 20223
// exit ;
20221: GO 20260
// for i in tmp do
20223: LD_ADDR_VAR 0 2
20227: PUSH
20228: LD_VAR 0 1
20232: PUSH
20233: FOR_IN
20234: IFFALSE 20258
// if IsControledBy ( i ) then
20236: LD_VAR 0 2
20240: PPUSH
20241: CALL_OW 312
20245: IFFALSE 20256
// ComUnlink ( i ) ;
20247: LD_VAR 0 2
20251: PPUSH
20252: CALL_OW 136
20256: GO 20233
20258: POP
20259: POP
// end ;
20260: PPOPN 2
20262: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
20263: LD_EXP 27
20267: PUSH
20268: LD_EXP 58
20272: AND
20273: IFFALSE 20413
20275: GO 20277
20277: DISABLE
20278: LD_INT 0
20280: PPUSH
20281: PPUSH
// begin ToLua ( displayPowell(); ) ;
20282: LD_STRING displayPowell();
20284: PPUSH
20285: CALL_OW 559
// uc_side := 0 ;
20289: LD_ADDR_OWVAR 20
20293: PUSH
20294: LD_INT 0
20296: ST_TO_ADDR
// uc_nation := 2 ;
20297: LD_ADDR_OWVAR 21
20301: PUSH
20302: LD_INT 2
20304: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
20305: LD_ADDR_OWVAR 37
20309: PUSH
20310: LD_INT 14
20312: ST_TO_ADDR
// vc_engine := engine_siberite ;
20313: LD_ADDR_OWVAR 39
20317: PUSH
20318: LD_INT 3
20320: ST_TO_ADDR
// vc_control := control_apeman ;
20321: LD_ADDR_OWVAR 38
20325: PUSH
20326: LD_INT 5
20328: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
20329: LD_ADDR_OWVAR 40
20333: PUSH
20334: LD_INT 29
20336: ST_TO_ADDR
// un := CreateVehicle ;
20337: LD_ADDR_VAR 0 2
20341: PUSH
20342: CALL_OW 45
20346: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20347: LD_VAR 0 2
20351: PPUSH
20352: LD_INT 1
20354: PPUSH
20355: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20359: LD_INT 35
20361: PPUSH
20362: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20366: LD_VAR 0 2
20370: PPUSH
20371: LD_INT 22
20373: PUSH
20374: LD_OWVAR 2
20378: PUSH
20379: EMPTY
20380: LIST
20381: LIST
20382: PPUSH
20383: CALL_OW 69
20387: PPUSH
20388: LD_VAR 0 2
20392: PPUSH
20393: CALL_OW 74
20397: PPUSH
20398: CALL_OW 115
// until IsDead ( un ) ;
20402: LD_VAR 0 2
20406: PPUSH
20407: CALL_OW 301
20411: IFFALSE 20359
// end ;
20413: PPOPN 2
20415: END
// every 0 0$1 trigger StreamModeActive and sStu do
20416: LD_EXP 27
20420: PUSH
20421: LD_EXP 66
20425: AND
20426: IFFALSE 20442
20428: GO 20430
20430: DISABLE
// begin ToLua ( displayStucuk(); ) ;
20431: LD_STRING displayStucuk();
20433: PPUSH
20434: CALL_OW 559
// ResetFog ;
20438: CALL_OW 335
// end ;
20442: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
20443: LD_EXP 27
20447: PUSH
20448: LD_EXP 59
20452: AND
20453: IFFALSE 20594
20455: GO 20457
20457: DISABLE
20458: LD_INT 0
20460: PPUSH
20461: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20462: LD_ADDR_VAR 0 2
20466: PUSH
20467: LD_INT 22
20469: PUSH
20470: LD_OWVAR 2
20474: PUSH
20475: EMPTY
20476: LIST
20477: LIST
20478: PUSH
20479: LD_INT 21
20481: PUSH
20482: LD_INT 1
20484: PUSH
20485: EMPTY
20486: LIST
20487: LIST
20488: PUSH
20489: EMPTY
20490: LIST
20491: LIST
20492: PPUSH
20493: CALL_OW 69
20497: ST_TO_ADDR
// if not tmp then
20498: LD_VAR 0 2
20502: NOT
20503: IFFALSE 20507
// exit ;
20505: GO 20594
// un := tmp [ rand ( 1 , tmp ) ] ;
20507: LD_ADDR_VAR 0 1
20511: PUSH
20512: LD_VAR 0 2
20516: PUSH
20517: LD_INT 1
20519: PPUSH
20520: LD_VAR 0 2
20524: PPUSH
20525: CALL_OW 12
20529: ARRAY
20530: ST_TO_ADDR
// SetSide ( un , 0 ) ;
20531: LD_VAR 0 1
20535: PPUSH
20536: LD_INT 0
20538: PPUSH
20539: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
20543: LD_VAR 0 1
20547: PPUSH
20548: LD_OWVAR 3
20552: PUSH
20553: LD_VAR 0 1
20557: DIFF
20558: PPUSH
20559: LD_VAR 0 1
20563: PPUSH
20564: CALL_OW 74
20568: PPUSH
20569: CALL_OW 115
// wait ( 0 0$20 ) ;
20573: LD_INT 700
20575: PPUSH
20576: CALL_OW 67
// SetSide ( un , your_side ) ;
20580: LD_VAR 0 1
20584: PPUSH
20585: LD_OWVAR 2
20589: PPUSH
20590: CALL_OW 235
// end ;
20594: PPOPN 2
20596: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
20597: LD_EXP 27
20601: PUSH
20602: LD_EXP 60
20606: AND
20607: IFFALSE 20713
20609: GO 20611
20611: DISABLE
20612: LD_INT 0
20614: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20615: LD_ADDR_VAR 0 1
20619: PUSH
20620: LD_INT 22
20622: PUSH
20623: LD_OWVAR 2
20627: PUSH
20628: EMPTY
20629: LIST
20630: LIST
20631: PUSH
20632: LD_INT 2
20634: PUSH
20635: LD_INT 30
20637: PUSH
20638: LD_INT 0
20640: PUSH
20641: EMPTY
20642: LIST
20643: LIST
20644: PUSH
20645: LD_INT 30
20647: PUSH
20648: LD_INT 1
20650: PUSH
20651: EMPTY
20652: LIST
20653: LIST
20654: PUSH
20655: EMPTY
20656: LIST
20657: LIST
20658: LIST
20659: PUSH
20660: EMPTY
20661: LIST
20662: LIST
20663: PPUSH
20664: CALL_OW 69
20668: ST_TO_ADDR
// if not depot then
20669: LD_VAR 0 1
20673: NOT
20674: IFFALSE 20678
// exit ;
20676: GO 20713
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
20678: LD_VAR 0 1
20682: PUSH
20683: LD_INT 1
20685: ARRAY
20686: PPUSH
20687: CALL_OW 250
20691: PPUSH
20692: LD_VAR 0 1
20696: PUSH
20697: LD_INT 1
20699: ARRAY
20700: PPUSH
20701: CALL_OW 251
20705: PPUSH
20706: LD_INT 70
20708: PPUSH
20709: CALL_OW 495
// end ;
20713: PPOPN 1
20715: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
20716: LD_EXP 27
20720: PUSH
20721: LD_EXP 61
20725: AND
20726: IFFALSE 20937
20728: GO 20730
20730: DISABLE
20731: LD_INT 0
20733: PPUSH
20734: PPUSH
20735: PPUSH
20736: PPUSH
20737: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20738: LD_ADDR_VAR 0 5
20742: PUSH
20743: LD_INT 22
20745: PUSH
20746: LD_OWVAR 2
20750: PUSH
20751: EMPTY
20752: LIST
20753: LIST
20754: PUSH
20755: LD_INT 21
20757: PUSH
20758: LD_INT 1
20760: PUSH
20761: EMPTY
20762: LIST
20763: LIST
20764: PUSH
20765: EMPTY
20766: LIST
20767: LIST
20768: PPUSH
20769: CALL_OW 69
20773: ST_TO_ADDR
// if not tmp then
20774: LD_VAR 0 5
20778: NOT
20779: IFFALSE 20783
// exit ;
20781: GO 20937
// for i in tmp do
20783: LD_ADDR_VAR 0 1
20787: PUSH
20788: LD_VAR 0 5
20792: PUSH
20793: FOR_IN
20794: IFFALSE 20935
// begin d := rand ( 0 , 5 ) ;
20796: LD_ADDR_VAR 0 4
20800: PUSH
20801: LD_INT 0
20803: PPUSH
20804: LD_INT 5
20806: PPUSH
20807: CALL_OW 12
20811: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
20812: LD_ADDR_VAR 0 2
20816: PUSH
20817: LD_VAR 0 1
20821: PPUSH
20822: CALL_OW 250
20826: PPUSH
20827: LD_VAR 0 4
20831: PPUSH
20832: LD_INT 3
20834: PPUSH
20835: LD_INT 12
20837: PPUSH
20838: CALL_OW 12
20842: PPUSH
20843: CALL_OW 272
20847: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
20848: LD_ADDR_VAR 0 3
20852: PUSH
20853: LD_VAR 0 1
20857: PPUSH
20858: CALL_OW 251
20862: PPUSH
20863: LD_VAR 0 4
20867: PPUSH
20868: LD_INT 3
20870: PPUSH
20871: LD_INT 12
20873: PPUSH
20874: CALL_OW 12
20878: PPUSH
20879: CALL_OW 273
20883: ST_TO_ADDR
// if ValidHex ( x , y ) then
20884: LD_VAR 0 2
20888: PPUSH
20889: LD_VAR 0 3
20893: PPUSH
20894: CALL_OW 488
20898: IFFALSE 20933
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
20900: LD_VAR 0 1
20904: PPUSH
20905: LD_VAR 0 2
20909: PPUSH
20910: LD_VAR 0 3
20914: PPUSH
20915: LD_INT 3
20917: PPUSH
20918: LD_INT 6
20920: PPUSH
20921: CALL_OW 12
20925: PPUSH
20926: LD_INT 1
20928: PPUSH
20929: CALL_OW 483
// end ;
20933: GO 20793
20935: POP
20936: POP
// end ;
20937: PPOPN 5
20939: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
20940: LD_EXP 27
20944: PUSH
20945: LD_EXP 62
20949: AND
20950: IFFALSE 21044
20952: GO 20954
20954: DISABLE
20955: LD_INT 0
20957: PPUSH
20958: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
20959: LD_ADDR_VAR 0 2
20963: PUSH
20964: LD_INT 22
20966: PUSH
20967: LD_OWVAR 2
20971: PUSH
20972: EMPTY
20973: LIST
20974: LIST
20975: PUSH
20976: LD_INT 32
20978: PUSH
20979: LD_INT 1
20981: PUSH
20982: EMPTY
20983: LIST
20984: LIST
20985: PUSH
20986: LD_INT 21
20988: PUSH
20989: LD_INT 2
20991: PUSH
20992: EMPTY
20993: LIST
20994: LIST
20995: PUSH
20996: EMPTY
20997: LIST
20998: LIST
20999: LIST
21000: PPUSH
21001: CALL_OW 69
21005: ST_TO_ADDR
// if not tmp then
21006: LD_VAR 0 2
21010: NOT
21011: IFFALSE 21015
// exit ;
21013: GO 21044
// for i in tmp do
21015: LD_ADDR_VAR 0 1
21019: PUSH
21020: LD_VAR 0 2
21024: PUSH
21025: FOR_IN
21026: IFFALSE 21042
// SetFuel ( i , 0 ) ;
21028: LD_VAR 0 1
21032: PPUSH
21033: LD_INT 0
21035: PPUSH
21036: CALL_OW 240
21040: GO 21025
21042: POP
21043: POP
// end ;
21044: PPOPN 2
21046: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
21047: LD_EXP 27
21051: PUSH
21052: LD_EXP 63
21056: AND
21057: IFFALSE 21123
21059: GO 21061
21061: DISABLE
21062: LD_INT 0
21064: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
21065: LD_ADDR_VAR 0 1
21069: PUSH
21070: LD_INT 22
21072: PUSH
21073: LD_OWVAR 2
21077: PUSH
21078: EMPTY
21079: LIST
21080: LIST
21081: PUSH
21082: LD_INT 30
21084: PUSH
21085: LD_INT 29
21087: PUSH
21088: EMPTY
21089: LIST
21090: LIST
21091: PUSH
21092: EMPTY
21093: LIST
21094: LIST
21095: PPUSH
21096: CALL_OW 69
21100: ST_TO_ADDR
// if not tmp then
21101: LD_VAR 0 1
21105: NOT
21106: IFFALSE 21110
// exit ;
21108: GO 21123
// DestroyUnit ( tmp [ 1 ] ) ;
21110: LD_VAR 0 1
21114: PUSH
21115: LD_INT 1
21117: ARRAY
21118: PPUSH
21119: CALL_OW 65
// end ;
21123: PPOPN 1
21125: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
21126: LD_EXP 27
21130: PUSH
21131: LD_EXP 65
21135: AND
21136: IFFALSE 21265
21138: GO 21140
21140: DISABLE
21141: LD_INT 0
21143: PPUSH
// begin uc_side := 0 ;
21144: LD_ADDR_OWVAR 20
21148: PUSH
21149: LD_INT 0
21151: ST_TO_ADDR
// uc_nation := nation_arabian ;
21152: LD_ADDR_OWVAR 21
21156: PUSH
21157: LD_INT 2
21159: ST_TO_ADDR
// hc_gallery :=  ;
21160: LD_ADDR_OWVAR 33
21164: PUSH
21165: LD_STRING 
21167: ST_TO_ADDR
// hc_name :=  ;
21168: LD_ADDR_OWVAR 26
21172: PUSH
21173: LD_STRING 
21175: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
21176: LD_INT 1
21178: PPUSH
21179: LD_INT 11
21181: PPUSH
21182: LD_INT 10
21184: PPUSH
21185: CALL_OW 380
// un := CreateHuman ;
21189: LD_ADDR_VAR 0 1
21193: PUSH
21194: CALL_OW 44
21198: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21199: LD_VAR 0 1
21203: PPUSH
21204: LD_INT 1
21206: PPUSH
21207: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
21211: LD_INT 35
21213: PPUSH
21214: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
21218: LD_VAR 0 1
21222: PPUSH
21223: LD_INT 22
21225: PUSH
21226: LD_OWVAR 2
21230: PUSH
21231: EMPTY
21232: LIST
21233: LIST
21234: PPUSH
21235: CALL_OW 69
21239: PPUSH
21240: LD_VAR 0 1
21244: PPUSH
21245: CALL_OW 74
21249: PPUSH
21250: CALL_OW 115
// until IsDead ( un ) ;
21254: LD_VAR 0 1
21258: PPUSH
21259: CALL_OW 301
21263: IFFALSE 21211
// end ;
21265: PPOPN 1
21267: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
21268: LD_EXP 27
21272: PUSH
21273: LD_EXP 67
21277: AND
21278: IFFALSE 21290
21280: GO 21282
21282: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
21283: LD_STRING earthquake(getX(game), 0, 32)
21285: PPUSH
21286: CALL_OW 559
21290: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
21291: LD_EXP 27
21295: PUSH
21296: LD_EXP 68
21300: AND
21301: IFFALSE 21392
21303: GO 21305
21305: DISABLE
21306: LD_INT 0
21308: PPUSH
// begin enable ;
21309: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
21310: LD_ADDR_VAR 0 1
21314: PUSH
21315: LD_INT 22
21317: PUSH
21318: LD_OWVAR 2
21322: PUSH
21323: EMPTY
21324: LIST
21325: LIST
21326: PUSH
21327: LD_INT 21
21329: PUSH
21330: LD_INT 2
21332: PUSH
21333: EMPTY
21334: LIST
21335: LIST
21336: PUSH
21337: LD_INT 33
21339: PUSH
21340: LD_INT 3
21342: PUSH
21343: EMPTY
21344: LIST
21345: LIST
21346: PUSH
21347: EMPTY
21348: LIST
21349: LIST
21350: LIST
21351: PPUSH
21352: CALL_OW 69
21356: ST_TO_ADDR
// if not tmp then
21357: LD_VAR 0 1
21361: NOT
21362: IFFALSE 21366
// exit ;
21364: GO 21392
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21366: LD_VAR 0 1
21370: PUSH
21371: LD_INT 1
21373: PPUSH
21374: LD_VAR 0 1
21378: PPUSH
21379: CALL_OW 12
21383: ARRAY
21384: PPUSH
21385: LD_INT 1
21387: PPUSH
21388: CALL_OW 234
// end ;
21392: PPOPN 1
21394: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
21395: LD_EXP 27
21399: PUSH
21400: LD_EXP 69
21404: AND
21405: IFFALSE 21546
21407: GO 21409
21409: DISABLE
21410: LD_INT 0
21412: PPUSH
21413: PPUSH
21414: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21415: LD_ADDR_VAR 0 3
21419: PUSH
21420: LD_INT 22
21422: PUSH
21423: LD_OWVAR 2
21427: PUSH
21428: EMPTY
21429: LIST
21430: LIST
21431: PUSH
21432: LD_INT 25
21434: PUSH
21435: LD_INT 1
21437: PUSH
21438: EMPTY
21439: LIST
21440: LIST
21441: PUSH
21442: EMPTY
21443: LIST
21444: LIST
21445: PPUSH
21446: CALL_OW 69
21450: ST_TO_ADDR
// if not tmp then
21451: LD_VAR 0 3
21455: NOT
21456: IFFALSE 21460
// exit ;
21458: GO 21546
// un := tmp [ rand ( 1 , tmp ) ] ;
21460: LD_ADDR_VAR 0 2
21464: PUSH
21465: LD_VAR 0 3
21469: PUSH
21470: LD_INT 1
21472: PPUSH
21473: LD_VAR 0 3
21477: PPUSH
21478: CALL_OW 12
21482: ARRAY
21483: ST_TO_ADDR
// if Crawls ( un ) then
21484: LD_VAR 0 2
21488: PPUSH
21489: CALL_OW 318
21493: IFFALSE 21504
// ComWalk ( un ) ;
21495: LD_VAR 0 2
21499: PPUSH
21500: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
21504: LD_VAR 0 2
21508: PPUSH
21509: LD_INT 9
21511: PPUSH
21512: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
21516: LD_INT 28
21518: PPUSH
21519: LD_OWVAR 2
21523: PPUSH
21524: LD_INT 2
21526: PPUSH
21527: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
21531: LD_INT 29
21533: PPUSH
21534: LD_OWVAR 2
21538: PPUSH
21539: LD_INT 2
21541: PPUSH
21542: CALL_OW 322
// end ;
21546: PPOPN 3
21548: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
21549: LD_EXP 27
21553: PUSH
21554: LD_EXP 70
21558: AND
21559: IFFALSE 21670
21561: GO 21563
21563: DISABLE
21564: LD_INT 0
21566: PPUSH
21567: PPUSH
21568: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21569: LD_ADDR_VAR 0 3
21573: PUSH
21574: LD_INT 22
21576: PUSH
21577: LD_OWVAR 2
21581: PUSH
21582: EMPTY
21583: LIST
21584: LIST
21585: PUSH
21586: LD_INT 25
21588: PUSH
21589: LD_INT 1
21591: PUSH
21592: EMPTY
21593: LIST
21594: LIST
21595: PUSH
21596: EMPTY
21597: LIST
21598: LIST
21599: PPUSH
21600: CALL_OW 69
21604: ST_TO_ADDR
// if not tmp then
21605: LD_VAR 0 3
21609: NOT
21610: IFFALSE 21614
// exit ;
21612: GO 21670
// un := tmp [ rand ( 1 , tmp ) ] ;
21614: LD_ADDR_VAR 0 2
21618: PUSH
21619: LD_VAR 0 3
21623: PUSH
21624: LD_INT 1
21626: PPUSH
21627: LD_VAR 0 3
21631: PPUSH
21632: CALL_OW 12
21636: ARRAY
21637: ST_TO_ADDR
// if Crawls ( un ) then
21638: LD_VAR 0 2
21642: PPUSH
21643: CALL_OW 318
21647: IFFALSE 21658
// ComWalk ( un ) ;
21649: LD_VAR 0 2
21653: PPUSH
21654: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21658: LD_VAR 0 2
21662: PPUSH
21663: LD_INT 8
21665: PPUSH
21666: CALL_OW 336
// end ;
21670: PPOPN 3
21672: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
21673: LD_EXP 27
21677: PUSH
21678: LD_EXP 71
21682: AND
21683: IFFALSE 21827
21685: GO 21687
21687: DISABLE
21688: LD_INT 0
21690: PPUSH
21691: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
21692: LD_ADDR_VAR 0 2
21696: PUSH
21697: LD_INT 22
21699: PUSH
21700: LD_OWVAR 2
21704: PUSH
21705: EMPTY
21706: LIST
21707: LIST
21708: PUSH
21709: LD_INT 21
21711: PUSH
21712: LD_INT 2
21714: PUSH
21715: EMPTY
21716: LIST
21717: LIST
21718: PUSH
21719: LD_INT 2
21721: PUSH
21722: LD_INT 34
21724: PUSH
21725: LD_INT 12
21727: PUSH
21728: EMPTY
21729: LIST
21730: LIST
21731: PUSH
21732: LD_INT 34
21734: PUSH
21735: LD_INT 51
21737: PUSH
21738: EMPTY
21739: LIST
21740: LIST
21741: PUSH
21742: LD_INT 34
21744: PUSH
21745: LD_INT 32
21747: PUSH
21748: EMPTY
21749: LIST
21750: LIST
21751: PUSH
21752: EMPTY
21753: LIST
21754: LIST
21755: LIST
21756: LIST
21757: PUSH
21758: EMPTY
21759: LIST
21760: LIST
21761: LIST
21762: PPUSH
21763: CALL_OW 69
21767: ST_TO_ADDR
// if not tmp then
21768: LD_VAR 0 2
21772: NOT
21773: IFFALSE 21777
// exit ;
21775: GO 21827
// for i in tmp do
21777: LD_ADDR_VAR 0 1
21781: PUSH
21782: LD_VAR 0 2
21786: PUSH
21787: FOR_IN
21788: IFFALSE 21825
// if GetCargo ( i , mat_artifact ) = 0 then
21790: LD_VAR 0 1
21794: PPUSH
21795: LD_INT 4
21797: PPUSH
21798: CALL_OW 289
21802: PUSH
21803: LD_INT 0
21805: EQUAL
21806: IFFALSE 21823
// SetCargo ( i , mat_siberit , 100 ) ;
21808: LD_VAR 0 1
21812: PPUSH
21813: LD_INT 3
21815: PPUSH
21816: LD_INT 100
21818: PPUSH
21819: CALL_OW 290
21823: GO 21787
21825: POP
21826: POP
// end ;
21827: PPOPN 2
21829: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
21830: LD_EXP 27
21834: PUSH
21835: LD_EXP 72
21839: AND
21840: IFFALSE 22023
21842: GO 21844
21844: DISABLE
21845: LD_INT 0
21847: PPUSH
21848: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21849: LD_ADDR_VAR 0 2
21853: PUSH
21854: LD_INT 22
21856: PUSH
21857: LD_OWVAR 2
21861: PUSH
21862: EMPTY
21863: LIST
21864: LIST
21865: PPUSH
21866: CALL_OW 69
21870: ST_TO_ADDR
// if not tmp then
21871: LD_VAR 0 2
21875: NOT
21876: IFFALSE 21880
// exit ;
21878: GO 22023
// for i := 1 to 2 do
21880: LD_ADDR_VAR 0 1
21884: PUSH
21885: DOUBLE
21886: LD_INT 1
21888: DEC
21889: ST_TO_ADDR
21890: LD_INT 2
21892: PUSH
21893: FOR_TO
21894: IFFALSE 22021
// begin uc_side := your_side ;
21896: LD_ADDR_OWVAR 20
21900: PUSH
21901: LD_OWVAR 2
21905: ST_TO_ADDR
// uc_nation := nation_american ;
21906: LD_ADDR_OWVAR 21
21910: PUSH
21911: LD_INT 1
21913: ST_TO_ADDR
// vc_chassis := us_morphling ;
21914: LD_ADDR_OWVAR 37
21918: PUSH
21919: LD_INT 5
21921: ST_TO_ADDR
// vc_engine := engine_siberite ;
21922: LD_ADDR_OWVAR 39
21926: PUSH
21927: LD_INT 3
21929: ST_TO_ADDR
// vc_control := control_computer ;
21930: LD_ADDR_OWVAR 38
21934: PUSH
21935: LD_INT 3
21937: ST_TO_ADDR
// vc_weapon := us_double_laser ;
21938: LD_ADDR_OWVAR 40
21942: PUSH
21943: LD_INT 10
21945: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
21946: LD_VAR 0 2
21950: PUSH
21951: LD_INT 1
21953: ARRAY
21954: PPUSH
21955: CALL_OW 310
21959: NOT
21960: IFFALSE 22007
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
21962: CALL_OW 45
21966: PPUSH
21967: LD_VAR 0 2
21971: PUSH
21972: LD_INT 1
21974: ARRAY
21975: PPUSH
21976: CALL_OW 250
21980: PPUSH
21981: LD_VAR 0 2
21985: PUSH
21986: LD_INT 1
21988: ARRAY
21989: PPUSH
21990: CALL_OW 251
21994: PPUSH
21995: LD_INT 12
21997: PPUSH
21998: LD_INT 1
22000: PPUSH
22001: CALL_OW 50
22005: GO 22019
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
22007: CALL_OW 45
22011: PPUSH
22012: LD_INT 1
22014: PPUSH
22015: CALL_OW 51
// end ;
22019: GO 21893
22021: POP
22022: POP
// end ;
22023: PPOPN 2
22025: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
22026: LD_EXP 27
22030: PUSH
22031: LD_EXP 73
22035: AND
22036: IFFALSE 22258
22038: GO 22040
22040: DISABLE
22041: LD_INT 0
22043: PPUSH
22044: PPUSH
22045: PPUSH
22046: PPUSH
22047: PPUSH
22048: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22049: LD_ADDR_VAR 0 6
22053: PUSH
22054: LD_INT 22
22056: PUSH
22057: LD_OWVAR 2
22061: PUSH
22062: EMPTY
22063: LIST
22064: LIST
22065: PUSH
22066: LD_INT 21
22068: PUSH
22069: LD_INT 1
22071: PUSH
22072: EMPTY
22073: LIST
22074: LIST
22075: PUSH
22076: LD_INT 3
22078: PUSH
22079: LD_INT 23
22081: PUSH
22082: LD_INT 0
22084: PUSH
22085: EMPTY
22086: LIST
22087: LIST
22088: PUSH
22089: EMPTY
22090: LIST
22091: LIST
22092: PUSH
22093: EMPTY
22094: LIST
22095: LIST
22096: LIST
22097: PPUSH
22098: CALL_OW 69
22102: ST_TO_ADDR
// if not tmp then
22103: LD_VAR 0 6
22107: NOT
22108: IFFALSE 22112
// exit ;
22110: GO 22258
// s1 := rand ( 1 , 4 ) ;
22112: LD_ADDR_VAR 0 2
22116: PUSH
22117: LD_INT 1
22119: PPUSH
22120: LD_INT 4
22122: PPUSH
22123: CALL_OW 12
22127: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
22128: LD_ADDR_VAR 0 4
22132: PUSH
22133: LD_VAR 0 6
22137: PUSH
22138: LD_INT 1
22140: ARRAY
22141: PPUSH
22142: LD_VAR 0 2
22146: PPUSH
22147: CALL_OW 259
22151: ST_TO_ADDR
// if s1 = 1 then
22152: LD_VAR 0 2
22156: PUSH
22157: LD_INT 1
22159: EQUAL
22160: IFFALSE 22180
// s2 := rand ( 2 , 4 ) else
22162: LD_ADDR_VAR 0 3
22166: PUSH
22167: LD_INT 2
22169: PPUSH
22170: LD_INT 4
22172: PPUSH
22173: CALL_OW 12
22177: ST_TO_ADDR
22178: GO 22188
// s2 := 1 ;
22180: LD_ADDR_VAR 0 3
22184: PUSH
22185: LD_INT 1
22187: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
22188: LD_ADDR_VAR 0 5
22192: PUSH
22193: LD_VAR 0 6
22197: PUSH
22198: LD_INT 1
22200: ARRAY
22201: PPUSH
22202: LD_VAR 0 3
22206: PPUSH
22207: CALL_OW 259
22211: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
22212: LD_VAR 0 6
22216: PUSH
22217: LD_INT 1
22219: ARRAY
22220: PPUSH
22221: LD_VAR 0 2
22225: PPUSH
22226: LD_VAR 0 5
22230: PPUSH
22231: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
22235: LD_VAR 0 6
22239: PUSH
22240: LD_INT 1
22242: ARRAY
22243: PPUSH
22244: LD_VAR 0 3
22248: PPUSH
22249: LD_VAR 0 4
22253: PPUSH
22254: CALL_OW 237
// end ;
22258: PPOPN 6
22260: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
22261: LD_EXP 27
22265: PUSH
22266: LD_EXP 74
22270: AND
22271: IFFALSE 22350
22273: GO 22275
22275: DISABLE
22276: LD_INT 0
22278: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
22279: LD_ADDR_VAR 0 1
22283: PUSH
22284: LD_INT 22
22286: PUSH
22287: LD_OWVAR 2
22291: PUSH
22292: EMPTY
22293: LIST
22294: LIST
22295: PUSH
22296: LD_INT 30
22298: PUSH
22299: LD_INT 3
22301: PUSH
22302: EMPTY
22303: LIST
22304: LIST
22305: PUSH
22306: EMPTY
22307: LIST
22308: LIST
22309: PPUSH
22310: CALL_OW 69
22314: ST_TO_ADDR
// if not tmp then
22315: LD_VAR 0 1
22319: NOT
22320: IFFALSE 22324
// exit ;
22322: GO 22350
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
22324: LD_VAR 0 1
22328: PUSH
22329: LD_INT 1
22331: PPUSH
22332: LD_VAR 0 1
22336: PPUSH
22337: CALL_OW 12
22341: ARRAY
22342: PPUSH
22343: LD_INT 1
22345: PPUSH
22346: CALL_OW 234
// end ;
22350: PPOPN 1
22352: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
22353: LD_EXP 27
22357: PUSH
22358: LD_EXP 75
22362: AND
22363: IFFALSE 22475
22365: GO 22367
22367: DISABLE
22368: LD_INT 0
22370: PPUSH
22371: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
22372: LD_ADDR_VAR 0 2
22376: PUSH
22377: LD_INT 22
22379: PUSH
22380: LD_OWVAR 2
22384: PUSH
22385: EMPTY
22386: LIST
22387: LIST
22388: PUSH
22389: LD_INT 2
22391: PUSH
22392: LD_INT 30
22394: PUSH
22395: LD_INT 27
22397: PUSH
22398: EMPTY
22399: LIST
22400: LIST
22401: PUSH
22402: LD_INT 30
22404: PUSH
22405: LD_INT 26
22407: PUSH
22408: EMPTY
22409: LIST
22410: LIST
22411: PUSH
22412: LD_INT 30
22414: PUSH
22415: LD_INT 28
22417: PUSH
22418: EMPTY
22419: LIST
22420: LIST
22421: PUSH
22422: EMPTY
22423: LIST
22424: LIST
22425: LIST
22426: LIST
22427: PUSH
22428: EMPTY
22429: LIST
22430: LIST
22431: PPUSH
22432: CALL_OW 69
22436: ST_TO_ADDR
// if not tmp then
22437: LD_VAR 0 2
22441: NOT
22442: IFFALSE 22446
// exit ;
22444: GO 22475
// for i in tmp do
22446: LD_ADDR_VAR 0 1
22450: PUSH
22451: LD_VAR 0 2
22455: PUSH
22456: FOR_IN
22457: IFFALSE 22473
// SetLives ( i , 1 ) ;
22459: LD_VAR 0 1
22463: PPUSH
22464: LD_INT 1
22466: PPUSH
22467: CALL_OW 234
22471: GO 22456
22473: POP
22474: POP
// end ;
22475: PPOPN 2
22477: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
22478: LD_EXP 27
22482: PUSH
22483: LD_EXP 76
22487: AND
22488: IFFALSE 22775
22490: GO 22492
22492: DISABLE
22493: LD_INT 0
22495: PPUSH
22496: PPUSH
22497: PPUSH
// begin i := rand ( 1 , 7 ) ;
22498: LD_ADDR_VAR 0 1
22502: PUSH
22503: LD_INT 1
22505: PPUSH
22506: LD_INT 7
22508: PPUSH
22509: CALL_OW 12
22513: ST_TO_ADDR
// case i of 1 :
22514: LD_VAR 0 1
22518: PUSH
22519: LD_INT 1
22521: DOUBLE
22522: EQUAL
22523: IFTRUE 22527
22525: GO 22537
22527: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
22528: LD_STRING earthquake(getX(game), 0, 32)
22530: PPUSH
22531: CALL_OW 559
22535: GO 22775
22537: LD_INT 2
22539: DOUBLE
22540: EQUAL
22541: IFTRUE 22545
22543: GO 22559
22545: POP
// begin ToLua ( displayStucuk(); ) ;
22546: LD_STRING displayStucuk();
22548: PPUSH
22549: CALL_OW 559
// ResetFog ;
22553: CALL_OW 335
// end ; 3 :
22557: GO 22775
22559: LD_INT 3
22561: DOUBLE
22562: EQUAL
22563: IFTRUE 22567
22565: GO 22671
22567: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22568: LD_ADDR_VAR 0 2
22572: PUSH
22573: LD_INT 22
22575: PUSH
22576: LD_OWVAR 2
22580: PUSH
22581: EMPTY
22582: LIST
22583: LIST
22584: PUSH
22585: LD_INT 25
22587: PUSH
22588: LD_INT 1
22590: PUSH
22591: EMPTY
22592: LIST
22593: LIST
22594: PUSH
22595: EMPTY
22596: LIST
22597: LIST
22598: PPUSH
22599: CALL_OW 69
22603: ST_TO_ADDR
// if not tmp then
22604: LD_VAR 0 2
22608: NOT
22609: IFFALSE 22613
// exit ;
22611: GO 22775
// un := tmp [ rand ( 1 , tmp ) ] ;
22613: LD_ADDR_VAR 0 3
22617: PUSH
22618: LD_VAR 0 2
22622: PUSH
22623: LD_INT 1
22625: PPUSH
22626: LD_VAR 0 2
22630: PPUSH
22631: CALL_OW 12
22635: ARRAY
22636: ST_TO_ADDR
// if Crawls ( un ) then
22637: LD_VAR 0 3
22641: PPUSH
22642: CALL_OW 318
22646: IFFALSE 22657
// ComWalk ( un ) ;
22648: LD_VAR 0 3
22652: PPUSH
22653: CALL_OW 138
// SetClass ( un , class_mortar ) ;
22657: LD_VAR 0 3
22661: PPUSH
22662: LD_INT 8
22664: PPUSH
22665: CALL_OW 336
// end ; 4 :
22669: GO 22775
22671: LD_INT 4
22673: DOUBLE
22674: EQUAL
22675: IFTRUE 22679
22677: GO 22753
22679: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
22680: LD_ADDR_VAR 0 2
22684: PUSH
22685: LD_INT 22
22687: PUSH
22688: LD_OWVAR 2
22692: PUSH
22693: EMPTY
22694: LIST
22695: LIST
22696: PUSH
22697: LD_INT 30
22699: PUSH
22700: LD_INT 29
22702: PUSH
22703: EMPTY
22704: LIST
22705: LIST
22706: PUSH
22707: EMPTY
22708: LIST
22709: LIST
22710: PPUSH
22711: CALL_OW 69
22715: ST_TO_ADDR
// if not tmp then
22716: LD_VAR 0 2
22720: NOT
22721: IFFALSE 22725
// exit ;
22723: GO 22775
// CenterNowOnUnits ( tmp [ 1 ] ) ;
22725: LD_VAR 0 2
22729: PUSH
22730: LD_INT 1
22732: ARRAY
22733: PPUSH
22734: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
22738: LD_VAR 0 2
22742: PUSH
22743: LD_INT 1
22745: ARRAY
22746: PPUSH
22747: CALL_OW 65
// end ; 5 .. 7 :
22751: GO 22775
22753: LD_INT 5
22755: DOUBLE
22756: GREATEREQUAL
22757: IFFALSE 22765
22759: LD_INT 7
22761: DOUBLE
22762: LESSEQUAL
22763: IFTRUE 22767
22765: GO 22774
22767: POP
// StreamSibBomb ; end ;
22768: CALL 19012 0 0
22772: GO 22775
22774: POP
// end ;
22775: PPOPN 3
22777: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
22778: LD_EXP 27
22782: PUSH
22783: LD_EXP 77
22787: AND
22788: IFFALSE 22944
22790: GO 22792
22792: DISABLE
22793: LD_INT 0
22795: PPUSH
22796: PPUSH
22797: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
22798: LD_ADDR_VAR 0 2
22802: PUSH
22803: LD_INT 81
22805: PUSH
22806: LD_OWVAR 2
22810: PUSH
22811: EMPTY
22812: LIST
22813: LIST
22814: PUSH
22815: LD_INT 2
22817: PUSH
22818: LD_INT 21
22820: PUSH
22821: LD_INT 1
22823: PUSH
22824: EMPTY
22825: LIST
22826: LIST
22827: PUSH
22828: LD_INT 21
22830: PUSH
22831: LD_INT 2
22833: PUSH
22834: EMPTY
22835: LIST
22836: LIST
22837: PUSH
22838: EMPTY
22839: LIST
22840: LIST
22841: LIST
22842: PUSH
22843: EMPTY
22844: LIST
22845: LIST
22846: PPUSH
22847: CALL_OW 69
22851: ST_TO_ADDR
// if not tmp then
22852: LD_VAR 0 2
22856: NOT
22857: IFFALSE 22861
// exit ;
22859: GO 22944
// p := 0 ;
22861: LD_ADDR_VAR 0 3
22865: PUSH
22866: LD_INT 0
22868: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22869: LD_INT 35
22871: PPUSH
22872: CALL_OW 67
// p := p + 1 ;
22876: LD_ADDR_VAR 0 3
22880: PUSH
22881: LD_VAR 0 3
22885: PUSH
22886: LD_INT 1
22888: PLUS
22889: ST_TO_ADDR
// for i in tmp do
22890: LD_ADDR_VAR 0 1
22894: PUSH
22895: LD_VAR 0 2
22899: PUSH
22900: FOR_IN
22901: IFFALSE 22932
// if GetLives ( i ) < 1000 then
22903: LD_VAR 0 1
22907: PPUSH
22908: CALL_OW 256
22912: PUSH
22913: LD_INT 1000
22915: LESS
22916: IFFALSE 22930
// SetLives ( i , 1000 ) ;
22918: LD_VAR 0 1
22922: PPUSH
22923: LD_INT 1000
22925: PPUSH
22926: CALL_OW 234
22930: GO 22900
22932: POP
22933: POP
// until p > 20 ;
22934: LD_VAR 0 3
22938: PUSH
22939: LD_INT 20
22941: GREATER
22942: IFFALSE 22869
// end ;
22944: PPOPN 3
22946: END
// every 0 0$1 trigger StreamModeActive and sTime do
22947: LD_EXP 27
22951: PUSH
22952: LD_EXP 78
22956: AND
22957: IFFALSE 22992
22959: GO 22961
22961: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
22962: LD_INT 28
22964: PPUSH
22965: LD_OWVAR 2
22969: PPUSH
22970: LD_INT 2
22972: PPUSH
22973: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
22977: LD_INT 30
22979: PPUSH
22980: LD_OWVAR 2
22984: PPUSH
22985: LD_INT 2
22987: PPUSH
22988: CALL_OW 322
// end ;
22992: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
22993: LD_EXP 27
22997: PUSH
22998: LD_EXP 79
23002: AND
23003: IFFALSE 23124
23005: GO 23007
23007: DISABLE
23008: LD_INT 0
23010: PPUSH
23011: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
23012: LD_ADDR_VAR 0 2
23016: PUSH
23017: LD_INT 22
23019: PUSH
23020: LD_OWVAR 2
23024: PUSH
23025: EMPTY
23026: LIST
23027: LIST
23028: PUSH
23029: LD_INT 21
23031: PUSH
23032: LD_INT 1
23034: PUSH
23035: EMPTY
23036: LIST
23037: LIST
23038: PUSH
23039: LD_INT 3
23041: PUSH
23042: LD_INT 23
23044: PUSH
23045: LD_INT 0
23047: PUSH
23048: EMPTY
23049: LIST
23050: LIST
23051: PUSH
23052: EMPTY
23053: LIST
23054: LIST
23055: PUSH
23056: EMPTY
23057: LIST
23058: LIST
23059: LIST
23060: PPUSH
23061: CALL_OW 69
23065: ST_TO_ADDR
// if not tmp then
23066: LD_VAR 0 2
23070: NOT
23071: IFFALSE 23075
// exit ;
23073: GO 23124
// for i in tmp do
23075: LD_ADDR_VAR 0 1
23079: PUSH
23080: LD_VAR 0 2
23084: PUSH
23085: FOR_IN
23086: IFFALSE 23122
// begin if Crawls ( i ) then
23088: LD_VAR 0 1
23092: PPUSH
23093: CALL_OW 318
23097: IFFALSE 23108
// ComWalk ( i ) ;
23099: LD_VAR 0 1
23103: PPUSH
23104: CALL_OW 138
// SetClass ( i , 2 ) ;
23108: LD_VAR 0 1
23112: PPUSH
23113: LD_INT 2
23115: PPUSH
23116: CALL_OW 336
// end ;
23120: GO 23085
23122: POP
23123: POP
// end ;
23124: PPOPN 2
23126: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
23127: LD_EXP 27
23131: PUSH
23132: LD_EXP 80
23136: AND
23137: IFFALSE 23425
23139: GO 23141
23141: DISABLE
23142: LD_INT 0
23144: PPUSH
23145: PPUSH
23146: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
23147: LD_OWVAR 2
23151: PPUSH
23152: LD_INT 9
23154: PPUSH
23155: LD_INT 1
23157: PPUSH
23158: LD_INT 1
23160: PPUSH
23161: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
23165: LD_INT 9
23167: PPUSH
23168: LD_OWVAR 2
23172: PPUSH
23173: CALL_OW 343
// uc_side := 9 ;
23177: LD_ADDR_OWVAR 20
23181: PUSH
23182: LD_INT 9
23184: ST_TO_ADDR
// uc_nation := 2 ;
23185: LD_ADDR_OWVAR 21
23189: PUSH
23190: LD_INT 2
23192: ST_TO_ADDR
// hc_name := Dark Warrior ;
23193: LD_ADDR_OWVAR 26
23197: PUSH
23198: LD_STRING Dark Warrior
23200: ST_TO_ADDR
// hc_gallery :=  ;
23201: LD_ADDR_OWVAR 33
23205: PUSH
23206: LD_STRING 
23208: ST_TO_ADDR
// hc_noskilllimit := true ;
23209: LD_ADDR_OWVAR 76
23213: PUSH
23214: LD_INT 1
23216: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
23217: LD_ADDR_OWVAR 31
23221: PUSH
23222: LD_INT 30
23224: PUSH
23225: LD_INT 30
23227: PUSH
23228: LD_INT 30
23230: PUSH
23231: LD_INT 30
23233: PUSH
23234: EMPTY
23235: LIST
23236: LIST
23237: LIST
23238: LIST
23239: ST_TO_ADDR
// un := CreateHuman ;
23240: LD_ADDR_VAR 0 3
23244: PUSH
23245: CALL_OW 44
23249: ST_TO_ADDR
// hc_noskilllimit := false ;
23250: LD_ADDR_OWVAR 76
23254: PUSH
23255: LD_INT 0
23257: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
23258: LD_VAR 0 3
23262: PPUSH
23263: LD_INT 1
23265: PPUSH
23266: CALL_OW 51
// ToLua ( playRanger() ) ;
23270: LD_STRING playRanger()
23272: PPUSH
23273: CALL_OW 559
// p := 0 ;
23277: LD_ADDR_VAR 0 2
23281: PUSH
23282: LD_INT 0
23284: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23285: LD_INT 35
23287: PPUSH
23288: CALL_OW 67
// p := p + 1 ;
23292: LD_ADDR_VAR 0 2
23296: PUSH
23297: LD_VAR 0 2
23301: PUSH
23302: LD_INT 1
23304: PLUS
23305: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
23306: LD_VAR 0 3
23310: PPUSH
23311: CALL_OW 256
23315: PUSH
23316: LD_INT 1000
23318: LESS
23319: IFFALSE 23333
// SetLives ( un , 1000 ) ;
23321: LD_VAR 0 3
23325: PPUSH
23326: LD_INT 1000
23328: PPUSH
23329: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
23333: LD_VAR 0 3
23337: PPUSH
23338: LD_INT 81
23340: PUSH
23341: LD_OWVAR 2
23345: PUSH
23346: EMPTY
23347: LIST
23348: LIST
23349: PUSH
23350: LD_INT 91
23352: PUSH
23353: LD_VAR 0 3
23357: PUSH
23358: LD_INT 30
23360: PUSH
23361: EMPTY
23362: LIST
23363: LIST
23364: LIST
23365: PUSH
23366: EMPTY
23367: LIST
23368: LIST
23369: PPUSH
23370: CALL_OW 69
23374: PPUSH
23375: LD_VAR 0 3
23379: PPUSH
23380: CALL_OW 74
23384: PPUSH
23385: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
23389: LD_VAR 0 2
23393: PUSH
23394: LD_INT 80
23396: GREATER
23397: PUSH
23398: LD_VAR 0 3
23402: PPUSH
23403: CALL_OW 301
23407: OR
23408: IFFALSE 23285
// if un then
23410: LD_VAR 0 3
23414: IFFALSE 23425
// RemoveUnit ( un ) ;
23416: LD_VAR 0 3
23420: PPUSH
23421: CALL_OW 64
// end ;
23425: PPOPN 3
23427: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
23428: LD_EXP 81
23432: IFFALSE 23548
23434: GO 23436
23436: DISABLE
23437: LD_INT 0
23439: PPUSH
23440: PPUSH
23441: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
23442: LD_ADDR_VAR 0 2
23446: PUSH
23447: LD_INT 81
23449: PUSH
23450: LD_OWVAR 2
23454: PUSH
23455: EMPTY
23456: LIST
23457: LIST
23458: PUSH
23459: LD_INT 21
23461: PUSH
23462: LD_INT 1
23464: PUSH
23465: EMPTY
23466: LIST
23467: LIST
23468: PUSH
23469: EMPTY
23470: LIST
23471: LIST
23472: PPUSH
23473: CALL_OW 69
23477: ST_TO_ADDR
// ToLua ( playComputer() ) ;
23478: LD_STRING playComputer()
23480: PPUSH
23481: CALL_OW 559
// if not tmp then
23485: LD_VAR 0 2
23489: NOT
23490: IFFALSE 23494
// exit ;
23492: GO 23548
// for i in tmp do
23494: LD_ADDR_VAR 0 1
23498: PUSH
23499: LD_VAR 0 2
23503: PUSH
23504: FOR_IN
23505: IFFALSE 23546
// for j := 1 to 4 do
23507: LD_ADDR_VAR 0 3
23511: PUSH
23512: DOUBLE
23513: LD_INT 1
23515: DEC
23516: ST_TO_ADDR
23517: LD_INT 4
23519: PUSH
23520: FOR_TO
23521: IFFALSE 23542
// SetSkill ( i , j , 10 ) ;
23523: LD_VAR 0 1
23527: PPUSH
23528: LD_VAR 0 3
23532: PPUSH
23533: LD_INT 10
23535: PPUSH
23536: CALL_OW 237
23540: GO 23520
23542: POP
23543: POP
23544: GO 23504
23546: POP
23547: POP
// end ;
23548: PPOPN 3
23550: END
// every 0 0$1 trigger s30 do var i , tmp ;
23551: LD_EXP 82
23555: IFFALSE 23624
23557: GO 23559
23559: DISABLE
23560: LD_INT 0
23562: PPUSH
23563: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23564: LD_ADDR_VAR 0 2
23568: PUSH
23569: LD_INT 22
23571: PUSH
23572: LD_OWVAR 2
23576: PUSH
23577: EMPTY
23578: LIST
23579: LIST
23580: PPUSH
23581: CALL_OW 69
23585: ST_TO_ADDR
// if not tmp then
23586: LD_VAR 0 2
23590: NOT
23591: IFFALSE 23595
// exit ;
23593: GO 23624
// for i in tmp do
23595: LD_ADDR_VAR 0 1
23599: PUSH
23600: LD_VAR 0 2
23604: PUSH
23605: FOR_IN
23606: IFFALSE 23622
// SetLives ( i , 300 ) ;
23608: LD_VAR 0 1
23612: PPUSH
23613: LD_INT 300
23615: PPUSH
23616: CALL_OW 234
23620: GO 23605
23622: POP
23623: POP
// end ;
23624: PPOPN 2
23626: END
// every 0 0$1 trigger s60 do var i , tmp ;
23627: LD_EXP 83
23631: IFFALSE 23700
23633: GO 23635
23635: DISABLE
23636: LD_INT 0
23638: PPUSH
23639: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23640: LD_ADDR_VAR 0 2
23644: PUSH
23645: LD_INT 22
23647: PUSH
23648: LD_OWVAR 2
23652: PUSH
23653: EMPTY
23654: LIST
23655: LIST
23656: PPUSH
23657: CALL_OW 69
23661: ST_TO_ADDR
// if not tmp then
23662: LD_VAR 0 2
23666: NOT
23667: IFFALSE 23671
// exit ;
23669: GO 23700
// for i in tmp do
23671: LD_ADDR_VAR 0 1
23675: PUSH
23676: LD_VAR 0 2
23680: PUSH
23681: FOR_IN
23682: IFFALSE 23698
// SetLives ( i , 600 ) ;
23684: LD_VAR 0 1
23688: PPUSH
23689: LD_INT 600
23691: PPUSH
23692: CALL_OW 234
23696: GO 23681
23698: POP
23699: POP
// end ;
23700: PPOPN 2
23702: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
23703: LD_INT 0
23705: PPUSH
// case cmd of 301 :
23706: LD_VAR 0 1
23710: PUSH
23711: LD_INT 301
23713: DOUBLE
23714: EQUAL
23715: IFTRUE 23719
23717: GO 23751
23719: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
23720: LD_VAR 0 6
23724: PPUSH
23725: LD_VAR 0 7
23729: PPUSH
23730: LD_VAR 0 8
23734: PPUSH
23735: LD_VAR 0 4
23739: PPUSH
23740: LD_VAR 0 5
23744: PPUSH
23745: CALL 24960 0 5
23749: GO 23872
23751: LD_INT 302
23753: DOUBLE
23754: EQUAL
23755: IFTRUE 23759
23757: GO 23796
23759: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
23760: LD_VAR 0 6
23764: PPUSH
23765: LD_VAR 0 7
23769: PPUSH
23770: LD_VAR 0 8
23774: PPUSH
23775: LD_VAR 0 9
23779: PPUSH
23780: LD_VAR 0 4
23784: PPUSH
23785: LD_VAR 0 5
23789: PPUSH
23790: CALL 25051 0 6
23794: GO 23872
23796: LD_INT 303
23798: DOUBLE
23799: EQUAL
23800: IFTRUE 23804
23802: GO 23841
23804: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
23805: LD_VAR 0 6
23809: PPUSH
23810: LD_VAR 0 7
23814: PPUSH
23815: LD_VAR 0 8
23819: PPUSH
23820: LD_VAR 0 9
23824: PPUSH
23825: LD_VAR 0 4
23829: PPUSH
23830: LD_VAR 0 5
23834: PPUSH
23835: CALL 23877 0 6
23839: GO 23872
23841: LD_INT 304
23843: DOUBLE
23844: EQUAL
23845: IFTRUE 23849
23847: GO 23871
23849: POP
// hHackTeleport ( unit , x , y ) ; end ;
23850: LD_VAR 0 2
23854: PPUSH
23855: LD_VAR 0 4
23859: PPUSH
23860: LD_VAR 0 5
23864: PPUSH
23865: CALL 25644 0 3
23869: GO 23872
23871: POP
// end ;
23872: LD_VAR 0 12
23876: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
23877: LD_INT 0
23879: PPUSH
23880: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
23881: LD_VAR 0 1
23885: PUSH
23886: LD_INT 1
23888: LESS
23889: PUSH
23890: LD_VAR 0 1
23894: PUSH
23895: LD_INT 3
23897: GREATER
23898: OR
23899: PUSH
23900: LD_VAR 0 5
23904: PPUSH
23905: LD_VAR 0 6
23909: PPUSH
23910: CALL_OW 428
23914: OR
23915: IFFALSE 23919
// exit ;
23917: GO 24647
// uc_side := your_side ;
23919: LD_ADDR_OWVAR 20
23923: PUSH
23924: LD_OWVAR 2
23928: ST_TO_ADDR
// uc_nation := nation ;
23929: LD_ADDR_OWVAR 21
23933: PUSH
23934: LD_VAR 0 1
23938: ST_TO_ADDR
// bc_level = 1 ;
23939: LD_ADDR_OWVAR 43
23943: PUSH
23944: LD_INT 1
23946: ST_TO_ADDR
// case btype of 1 :
23947: LD_VAR 0 2
23951: PUSH
23952: LD_INT 1
23954: DOUBLE
23955: EQUAL
23956: IFTRUE 23960
23958: GO 23971
23960: POP
// bc_type := b_depot ; 2 :
23961: LD_ADDR_OWVAR 42
23965: PUSH
23966: LD_INT 0
23968: ST_TO_ADDR
23969: GO 24591
23971: LD_INT 2
23973: DOUBLE
23974: EQUAL
23975: IFTRUE 23979
23977: GO 23990
23979: POP
// bc_type := b_warehouse ; 3 :
23980: LD_ADDR_OWVAR 42
23984: PUSH
23985: LD_INT 1
23987: ST_TO_ADDR
23988: GO 24591
23990: LD_INT 3
23992: DOUBLE
23993: EQUAL
23994: IFTRUE 23998
23996: GO 24009
23998: POP
// bc_type := b_lab ; 4 .. 9 :
23999: LD_ADDR_OWVAR 42
24003: PUSH
24004: LD_INT 6
24006: ST_TO_ADDR
24007: GO 24591
24009: LD_INT 4
24011: DOUBLE
24012: GREATEREQUAL
24013: IFFALSE 24021
24015: LD_INT 9
24017: DOUBLE
24018: LESSEQUAL
24019: IFTRUE 24023
24021: GO 24083
24023: POP
// begin bc_type := b_lab_half ;
24024: LD_ADDR_OWVAR 42
24028: PUSH
24029: LD_INT 7
24031: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
24032: LD_ADDR_OWVAR 44
24036: PUSH
24037: LD_INT 10
24039: PUSH
24040: LD_INT 11
24042: PUSH
24043: LD_INT 12
24045: PUSH
24046: LD_INT 15
24048: PUSH
24049: LD_INT 14
24051: PUSH
24052: LD_INT 13
24054: PUSH
24055: EMPTY
24056: LIST
24057: LIST
24058: LIST
24059: LIST
24060: LIST
24061: LIST
24062: PUSH
24063: LD_VAR 0 2
24067: PUSH
24068: LD_INT 3
24070: MINUS
24071: ARRAY
24072: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
24073: LD_ADDR_OWVAR 45
24077: PUSH
24078: LD_INT 9
24080: ST_TO_ADDR
// end ; 10 .. 13 :
24081: GO 24591
24083: LD_INT 10
24085: DOUBLE
24086: GREATEREQUAL
24087: IFFALSE 24095
24089: LD_INT 13
24091: DOUBLE
24092: LESSEQUAL
24093: IFTRUE 24097
24095: GO 24174
24097: POP
// begin bc_type := b_lab_full ;
24098: LD_ADDR_OWVAR 42
24102: PUSH
24103: LD_INT 8
24105: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
24106: LD_ADDR_OWVAR 44
24110: PUSH
24111: LD_INT 10
24113: PUSH
24114: LD_INT 12
24116: PUSH
24117: LD_INT 14
24119: PUSH
24120: LD_INT 13
24122: PUSH
24123: EMPTY
24124: LIST
24125: LIST
24126: LIST
24127: LIST
24128: PUSH
24129: LD_VAR 0 2
24133: PUSH
24134: LD_INT 9
24136: MINUS
24137: ARRAY
24138: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
24139: LD_ADDR_OWVAR 45
24143: PUSH
24144: LD_INT 11
24146: PUSH
24147: LD_INT 15
24149: PUSH
24150: LD_INT 12
24152: PUSH
24153: LD_INT 15
24155: PUSH
24156: EMPTY
24157: LIST
24158: LIST
24159: LIST
24160: LIST
24161: PUSH
24162: LD_VAR 0 2
24166: PUSH
24167: LD_INT 9
24169: MINUS
24170: ARRAY
24171: ST_TO_ADDR
// end ; 14 :
24172: GO 24591
24174: LD_INT 14
24176: DOUBLE
24177: EQUAL
24178: IFTRUE 24182
24180: GO 24193
24182: POP
// bc_type := b_workshop ; 15 :
24183: LD_ADDR_OWVAR 42
24187: PUSH
24188: LD_INT 2
24190: ST_TO_ADDR
24191: GO 24591
24193: LD_INT 15
24195: DOUBLE
24196: EQUAL
24197: IFTRUE 24201
24199: GO 24212
24201: POP
// bc_type := b_factory ; 16 :
24202: LD_ADDR_OWVAR 42
24206: PUSH
24207: LD_INT 3
24209: ST_TO_ADDR
24210: GO 24591
24212: LD_INT 16
24214: DOUBLE
24215: EQUAL
24216: IFTRUE 24220
24218: GO 24231
24220: POP
// bc_type := b_ext_gun ; 17 :
24221: LD_ADDR_OWVAR 42
24225: PUSH
24226: LD_INT 17
24228: ST_TO_ADDR
24229: GO 24591
24231: LD_INT 17
24233: DOUBLE
24234: EQUAL
24235: IFTRUE 24239
24237: GO 24267
24239: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
24240: LD_ADDR_OWVAR 42
24244: PUSH
24245: LD_INT 19
24247: PUSH
24248: LD_INT 23
24250: PUSH
24251: LD_INT 19
24253: PUSH
24254: EMPTY
24255: LIST
24256: LIST
24257: LIST
24258: PUSH
24259: LD_VAR 0 1
24263: ARRAY
24264: ST_TO_ADDR
24265: GO 24591
24267: LD_INT 18
24269: DOUBLE
24270: EQUAL
24271: IFTRUE 24275
24273: GO 24286
24275: POP
// bc_type := b_ext_radar ; 19 :
24276: LD_ADDR_OWVAR 42
24280: PUSH
24281: LD_INT 20
24283: ST_TO_ADDR
24284: GO 24591
24286: LD_INT 19
24288: DOUBLE
24289: EQUAL
24290: IFTRUE 24294
24292: GO 24305
24294: POP
// bc_type := b_ext_radio ; 20 :
24295: LD_ADDR_OWVAR 42
24299: PUSH
24300: LD_INT 22
24302: ST_TO_ADDR
24303: GO 24591
24305: LD_INT 20
24307: DOUBLE
24308: EQUAL
24309: IFTRUE 24313
24311: GO 24324
24313: POP
// bc_type := b_ext_siberium ; 21 :
24314: LD_ADDR_OWVAR 42
24318: PUSH
24319: LD_INT 21
24321: ST_TO_ADDR
24322: GO 24591
24324: LD_INT 21
24326: DOUBLE
24327: EQUAL
24328: IFTRUE 24332
24330: GO 24343
24332: POP
// bc_type := b_ext_computer ; 22 :
24333: LD_ADDR_OWVAR 42
24337: PUSH
24338: LD_INT 24
24340: ST_TO_ADDR
24341: GO 24591
24343: LD_INT 22
24345: DOUBLE
24346: EQUAL
24347: IFTRUE 24351
24349: GO 24362
24351: POP
// bc_type := b_ext_track ; 23 :
24352: LD_ADDR_OWVAR 42
24356: PUSH
24357: LD_INT 16
24359: ST_TO_ADDR
24360: GO 24591
24362: LD_INT 23
24364: DOUBLE
24365: EQUAL
24366: IFTRUE 24370
24368: GO 24381
24370: POP
// bc_type := b_ext_laser ; 24 :
24371: LD_ADDR_OWVAR 42
24375: PUSH
24376: LD_INT 25
24378: ST_TO_ADDR
24379: GO 24591
24381: LD_INT 24
24383: DOUBLE
24384: EQUAL
24385: IFTRUE 24389
24387: GO 24400
24389: POP
// bc_type := b_control_tower ; 25 :
24390: LD_ADDR_OWVAR 42
24394: PUSH
24395: LD_INT 36
24397: ST_TO_ADDR
24398: GO 24591
24400: LD_INT 25
24402: DOUBLE
24403: EQUAL
24404: IFTRUE 24408
24406: GO 24419
24408: POP
// bc_type := b_breastwork ; 26 :
24409: LD_ADDR_OWVAR 42
24413: PUSH
24414: LD_INT 31
24416: ST_TO_ADDR
24417: GO 24591
24419: LD_INT 26
24421: DOUBLE
24422: EQUAL
24423: IFTRUE 24427
24425: GO 24438
24427: POP
// bc_type := b_bunker ; 27 :
24428: LD_ADDR_OWVAR 42
24432: PUSH
24433: LD_INT 32
24435: ST_TO_ADDR
24436: GO 24591
24438: LD_INT 27
24440: DOUBLE
24441: EQUAL
24442: IFTRUE 24446
24444: GO 24457
24446: POP
// bc_type := b_turret ; 28 :
24447: LD_ADDR_OWVAR 42
24451: PUSH
24452: LD_INT 33
24454: ST_TO_ADDR
24455: GO 24591
24457: LD_INT 28
24459: DOUBLE
24460: EQUAL
24461: IFTRUE 24465
24463: GO 24476
24465: POP
// bc_type := b_armoury ; 29 :
24466: LD_ADDR_OWVAR 42
24470: PUSH
24471: LD_INT 4
24473: ST_TO_ADDR
24474: GO 24591
24476: LD_INT 29
24478: DOUBLE
24479: EQUAL
24480: IFTRUE 24484
24482: GO 24495
24484: POP
// bc_type := b_barracks ; 30 :
24485: LD_ADDR_OWVAR 42
24489: PUSH
24490: LD_INT 5
24492: ST_TO_ADDR
24493: GO 24591
24495: LD_INT 30
24497: DOUBLE
24498: EQUAL
24499: IFTRUE 24503
24501: GO 24514
24503: POP
// bc_type := b_solar_power ; 31 :
24504: LD_ADDR_OWVAR 42
24508: PUSH
24509: LD_INT 27
24511: ST_TO_ADDR
24512: GO 24591
24514: LD_INT 31
24516: DOUBLE
24517: EQUAL
24518: IFTRUE 24522
24520: GO 24533
24522: POP
// bc_type := b_oil_power ; 32 :
24523: LD_ADDR_OWVAR 42
24527: PUSH
24528: LD_INT 26
24530: ST_TO_ADDR
24531: GO 24591
24533: LD_INT 32
24535: DOUBLE
24536: EQUAL
24537: IFTRUE 24541
24539: GO 24552
24541: POP
// bc_type := b_siberite_power ; 33 :
24542: LD_ADDR_OWVAR 42
24546: PUSH
24547: LD_INT 28
24549: ST_TO_ADDR
24550: GO 24591
24552: LD_INT 33
24554: DOUBLE
24555: EQUAL
24556: IFTRUE 24560
24558: GO 24571
24560: POP
// bc_type := b_oil_mine ; 34 :
24561: LD_ADDR_OWVAR 42
24565: PUSH
24566: LD_INT 29
24568: ST_TO_ADDR
24569: GO 24591
24571: LD_INT 34
24573: DOUBLE
24574: EQUAL
24575: IFTRUE 24579
24577: GO 24590
24579: POP
// bc_type := b_siberite_mine ; end ;
24580: LD_ADDR_OWVAR 42
24584: PUSH
24585: LD_INT 30
24587: ST_TO_ADDR
24588: GO 24591
24590: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
24591: LD_ADDR_VAR 0 8
24595: PUSH
24596: LD_VAR 0 5
24600: PPUSH
24601: LD_VAR 0 6
24605: PPUSH
24606: LD_VAR 0 3
24610: PPUSH
24611: CALL_OW 47
24615: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
24616: LD_OWVAR 42
24620: PUSH
24621: LD_INT 32
24623: PUSH
24624: LD_INT 33
24626: PUSH
24627: EMPTY
24628: LIST
24629: LIST
24630: IN
24631: IFFALSE 24647
// PlaceWeaponTurret ( b , weapon ) ;
24633: LD_VAR 0 8
24637: PPUSH
24638: LD_VAR 0 4
24642: PPUSH
24643: CALL_OW 431
// end ;
24647: LD_VAR 0 7
24651: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
24652: LD_INT 0
24654: PPUSH
24655: PPUSH
24656: PPUSH
24657: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24658: LD_ADDR_VAR 0 4
24662: PUSH
24663: LD_INT 22
24665: PUSH
24666: LD_OWVAR 2
24670: PUSH
24671: EMPTY
24672: LIST
24673: LIST
24674: PUSH
24675: LD_INT 2
24677: PUSH
24678: LD_INT 30
24680: PUSH
24681: LD_INT 0
24683: PUSH
24684: EMPTY
24685: LIST
24686: LIST
24687: PUSH
24688: LD_INT 30
24690: PUSH
24691: LD_INT 1
24693: PUSH
24694: EMPTY
24695: LIST
24696: LIST
24697: PUSH
24698: EMPTY
24699: LIST
24700: LIST
24701: LIST
24702: PUSH
24703: EMPTY
24704: LIST
24705: LIST
24706: PPUSH
24707: CALL_OW 69
24711: ST_TO_ADDR
// if not tmp then
24712: LD_VAR 0 4
24716: NOT
24717: IFFALSE 24721
// exit ;
24719: GO 24780
// for i in tmp do
24721: LD_ADDR_VAR 0 2
24725: PUSH
24726: LD_VAR 0 4
24730: PUSH
24731: FOR_IN
24732: IFFALSE 24778
// for j = 1 to 3 do
24734: LD_ADDR_VAR 0 3
24738: PUSH
24739: DOUBLE
24740: LD_INT 1
24742: DEC
24743: ST_TO_ADDR
24744: LD_INT 3
24746: PUSH
24747: FOR_TO
24748: IFFALSE 24774
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
24750: LD_VAR 0 2
24754: PPUSH
24755: CALL_OW 274
24759: PPUSH
24760: LD_VAR 0 3
24764: PPUSH
24765: LD_INT 99999
24767: PPUSH
24768: CALL_OW 277
24772: GO 24747
24774: POP
24775: POP
24776: GO 24731
24778: POP
24779: POP
// end ;
24780: LD_VAR 0 1
24784: RET
// export function hHackSetLevel10 ; var i , j ; begin
24785: LD_INT 0
24787: PPUSH
24788: PPUSH
24789: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
24790: LD_ADDR_VAR 0 2
24794: PUSH
24795: LD_INT 21
24797: PUSH
24798: LD_INT 1
24800: PUSH
24801: EMPTY
24802: LIST
24803: LIST
24804: PPUSH
24805: CALL_OW 69
24809: PUSH
24810: FOR_IN
24811: IFFALSE 24863
// if IsSelected ( i ) then
24813: LD_VAR 0 2
24817: PPUSH
24818: CALL_OW 306
24822: IFFALSE 24861
// begin for j := 1 to 4 do
24824: LD_ADDR_VAR 0 3
24828: PUSH
24829: DOUBLE
24830: LD_INT 1
24832: DEC
24833: ST_TO_ADDR
24834: LD_INT 4
24836: PUSH
24837: FOR_TO
24838: IFFALSE 24859
// SetSkill ( i , j , 10 ) ;
24840: LD_VAR 0 2
24844: PPUSH
24845: LD_VAR 0 3
24849: PPUSH
24850: LD_INT 10
24852: PPUSH
24853: CALL_OW 237
24857: GO 24837
24859: POP
24860: POP
// end ;
24861: GO 24810
24863: POP
24864: POP
// end ;
24865: LD_VAR 0 1
24869: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
24870: LD_INT 0
24872: PPUSH
24873: PPUSH
24874: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
24875: LD_ADDR_VAR 0 2
24879: PUSH
24880: LD_INT 22
24882: PUSH
24883: LD_OWVAR 2
24887: PUSH
24888: EMPTY
24889: LIST
24890: LIST
24891: PUSH
24892: LD_INT 21
24894: PUSH
24895: LD_INT 1
24897: PUSH
24898: EMPTY
24899: LIST
24900: LIST
24901: PUSH
24902: EMPTY
24903: LIST
24904: LIST
24905: PPUSH
24906: CALL_OW 69
24910: PUSH
24911: FOR_IN
24912: IFFALSE 24953
// begin for j := 1 to 4 do
24914: LD_ADDR_VAR 0 3
24918: PUSH
24919: DOUBLE
24920: LD_INT 1
24922: DEC
24923: ST_TO_ADDR
24924: LD_INT 4
24926: PUSH
24927: FOR_TO
24928: IFFALSE 24949
// SetSkill ( i , j , 10 ) ;
24930: LD_VAR 0 2
24934: PPUSH
24935: LD_VAR 0 3
24939: PPUSH
24940: LD_INT 10
24942: PPUSH
24943: CALL_OW 237
24947: GO 24927
24949: POP
24950: POP
// end ;
24951: GO 24911
24953: POP
24954: POP
// end ;
24955: LD_VAR 0 1
24959: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
24960: LD_INT 0
24962: PPUSH
// uc_side := your_side ;
24963: LD_ADDR_OWVAR 20
24967: PUSH
24968: LD_OWVAR 2
24972: ST_TO_ADDR
// uc_nation := nation ;
24973: LD_ADDR_OWVAR 21
24977: PUSH
24978: LD_VAR 0 1
24982: ST_TO_ADDR
// InitHc ;
24983: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
24987: LD_INT 0
24989: PPUSH
24990: LD_VAR 0 2
24994: PPUSH
24995: LD_VAR 0 3
24999: PPUSH
25000: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
25004: LD_VAR 0 4
25008: PPUSH
25009: LD_VAR 0 5
25013: PPUSH
25014: CALL_OW 428
25018: PUSH
25019: LD_INT 0
25021: EQUAL
25022: IFFALSE 25046
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
25024: CALL_OW 44
25028: PPUSH
25029: LD_VAR 0 4
25033: PPUSH
25034: LD_VAR 0 5
25038: PPUSH
25039: LD_INT 1
25041: PPUSH
25042: CALL_OW 48
// end ;
25046: LD_VAR 0 6
25050: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
25051: LD_INT 0
25053: PPUSH
25054: PPUSH
// uc_side := your_side ;
25055: LD_ADDR_OWVAR 20
25059: PUSH
25060: LD_OWVAR 2
25064: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
25065: LD_VAR 0 1
25069: PUSH
25070: LD_INT 1
25072: PUSH
25073: LD_INT 2
25075: PUSH
25076: LD_INT 3
25078: PUSH
25079: LD_INT 4
25081: PUSH
25082: LD_INT 5
25084: PUSH
25085: EMPTY
25086: LIST
25087: LIST
25088: LIST
25089: LIST
25090: LIST
25091: IN
25092: IFFALSE 25104
// uc_nation := nation_american else
25094: LD_ADDR_OWVAR 21
25098: PUSH
25099: LD_INT 1
25101: ST_TO_ADDR
25102: GO 25147
// if chassis in [ 11 , 12 , 13 , 14 ] then
25104: LD_VAR 0 1
25108: PUSH
25109: LD_INT 11
25111: PUSH
25112: LD_INT 12
25114: PUSH
25115: LD_INT 13
25117: PUSH
25118: LD_INT 14
25120: PUSH
25121: EMPTY
25122: LIST
25123: LIST
25124: LIST
25125: LIST
25126: IN
25127: IFFALSE 25139
// uc_nation := nation_arabian else
25129: LD_ADDR_OWVAR 21
25133: PUSH
25134: LD_INT 2
25136: ST_TO_ADDR
25137: GO 25147
// uc_nation := nation_russian ;
25139: LD_ADDR_OWVAR 21
25143: PUSH
25144: LD_INT 3
25146: ST_TO_ADDR
// vc_chassis := chassis ;
25147: LD_ADDR_OWVAR 37
25151: PUSH
25152: LD_VAR 0 1
25156: ST_TO_ADDR
// vc_engine := engine ;
25157: LD_ADDR_OWVAR 39
25161: PUSH
25162: LD_VAR 0 2
25166: ST_TO_ADDR
// vc_control := control ;
25167: LD_ADDR_OWVAR 38
25171: PUSH
25172: LD_VAR 0 3
25176: ST_TO_ADDR
// vc_weapon := weapon ;
25177: LD_ADDR_OWVAR 40
25181: PUSH
25182: LD_VAR 0 4
25186: ST_TO_ADDR
// un := CreateVehicle ;
25187: LD_ADDR_VAR 0 8
25191: PUSH
25192: CALL_OW 45
25196: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
25197: LD_VAR 0 8
25201: PPUSH
25202: LD_INT 0
25204: PPUSH
25205: LD_INT 5
25207: PPUSH
25208: CALL_OW 12
25212: PPUSH
25213: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
25217: LD_VAR 0 8
25221: PPUSH
25222: LD_VAR 0 5
25226: PPUSH
25227: LD_VAR 0 6
25231: PPUSH
25232: LD_INT 1
25234: PPUSH
25235: CALL_OW 48
// end ;
25239: LD_VAR 0 7
25243: RET
// export hInvincible ; every 1 do
25244: GO 25246
25246: DISABLE
// hInvincible := [ ] ;
25247: LD_ADDR_EXP 84
25251: PUSH
25252: EMPTY
25253: ST_TO_ADDR
25254: END
// every 10 do var i ;
25255: GO 25257
25257: DISABLE
25258: LD_INT 0
25260: PPUSH
// begin enable ;
25261: ENABLE
// if not hInvincible then
25262: LD_EXP 84
25266: NOT
25267: IFFALSE 25271
// exit ;
25269: GO 25315
// for i in hInvincible do
25271: LD_ADDR_VAR 0 1
25275: PUSH
25276: LD_EXP 84
25280: PUSH
25281: FOR_IN
25282: IFFALSE 25313
// if GetLives ( i ) < 1000 then
25284: LD_VAR 0 1
25288: PPUSH
25289: CALL_OW 256
25293: PUSH
25294: LD_INT 1000
25296: LESS
25297: IFFALSE 25311
// SetLives ( i , 1000 ) ;
25299: LD_VAR 0 1
25303: PPUSH
25304: LD_INT 1000
25306: PPUSH
25307: CALL_OW 234
25311: GO 25281
25313: POP
25314: POP
// end ;
25315: PPOPN 1
25317: END
// export function hHackInvincible ; var i ; begin
25318: LD_INT 0
25320: PPUSH
25321: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
25322: LD_ADDR_VAR 0 2
25326: PUSH
25327: LD_INT 2
25329: PUSH
25330: LD_INT 21
25332: PUSH
25333: LD_INT 1
25335: PUSH
25336: EMPTY
25337: LIST
25338: LIST
25339: PUSH
25340: LD_INT 21
25342: PUSH
25343: LD_INT 2
25345: PUSH
25346: EMPTY
25347: LIST
25348: LIST
25349: PUSH
25350: EMPTY
25351: LIST
25352: LIST
25353: LIST
25354: PPUSH
25355: CALL_OW 69
25359: PUSH
25360: FOR_IN
25361: IFFALSE 25422
// if IsSelected ( i ) then
25363: LD_VAR 0 2
25367: PPUSH
25368: CALL_OW 306
25372: IFFALSE 25420
// begin if i in hInvincible then
25374: LD_VAR 0 2
25378: PUSH
25379: LD_EXP 84
25383: IN
25384: IFFALSE 25404
// hInvincible := hInvincible diff i else
25386: LD_ADDR_EXP 84
25390: PUSH
25391: LD_EXP 84
25395: PUSH
25396: LD_VAR 0 2
25400: DIFF
25401: ST_TO_ADDR
25402: GO 25420
// hInvincible := hInvincible union i ;
25404: LD_ADDR_EXP 84
25408: PUSH
25409: LD_EXP 84
25413: PUSH
25414: LD_VAR 0 2
25418: UNION
25419: ST_TO_ADDR
// end ;
25420: GO 25360
25422: POP
25423: POP
// end ;
25424: LD_VAR 0 1
25428: RET
// export function hHackInvisible ; var i , j ; begin
25429: LD_INT 0
25431: PPUSH
25432: PPUSH
25433: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
25434: LD_ADDR_VAR 0 2
25438: PUSH
25439: LD_INT 21
25441: PUSH
25442: LD_INT 1
25444: PUSH
25445: EMPTY
25446: LIST
25447: LIST
25448: PPUSH
25449: CALL_OW 69
25453: PUSH
25454: FOR_IN
25455: IFFALSE 25479
// if IsSelected ( i ) then
25457: LD_VAR 0 2
25461: PPUSH
25462: CALL_OW 306
25466: IFFALSE 25477
// ComForceInvisible ( i ) ;
25468: LD_VAR 0 2
25472: PPUSH
25473: CALL_OW 496
25477: GO 25454
25479: POP
25480: POP
// end ;
25481: LD_VAR 0 1
25485: RET
// export function hHackChangeYourSide ; begin
25486: LD_INT 0
25488: PPUSH
// if your_side = 8 then
25489: LD_OWVAR 2
25493: PUSH
25494: LD_INT 8
25496: EQUAL
25497: IFFALSE 25509
// your_side := 0 else
25499: LD_ADDR_OWVAR 2
25503: PUSH
25504: LD_INT 0
25506: ST_TO_ADDR
25507: GO 25523
// your_side := your_side + 1 ;
25509: LD_ADDR_OWVAR 2
25513: PUSH
25514: LD_OWVAR 2
25518: PUSH
25519: LD_INT 1
25521: PLUS
25522: ST_TO_ADDR
// end ;
25523: LD_VAR 0 1
25527: RET
// export function hHackChangeUnitSide ; var i , j ; begin
25528: LD_INT 0
25530: PPUSH
25531: PPUSH
25532: PPUSH
// for i in all_units do
25533: LD_ADDR_VAR 0 2
25537: PUSH
25538: LD_OWVAR 3
25542: PUSH
25543: FOR_IN
25544: IFFALSE 25622
// if IsSelected ( i ) then
25546: LD_VAR 0 2
25550: PPUSH
25551: CALL_OW 306
25555: IFFALSE 25620
// begin j := GetSide ( i ) ;
25557: LD_ADDR_VAR 0 3
25561: PUSH
25562: LD_VAR 0 2
25566: PPUSH
25567: CALL_OW 255
25571: ST_TO_ADDR
// if j = 8 then
25572: LD_VAR 0 3
25576: PUSH
25577: LD_INT 8
25579: EQUAL
25580: IFFALSE 25592
// j := 0 else
25582: LD_ADDR_VAR 0 3
25586: PUSH
25587: LD_INT 0
25589: ST_TO_ADDR
25590: GO 25606
// j := j + 1 ;
25592: LD_ADDR_VAR 0 3
25596: PUSH
25597: LD_VAR 0 3
25601: PUSH
25602: LD_INT 1
25604: PLUS
25605: ST_TO_ADDR
// SetSide ( i , j ) ;
25606: LD_VAR 0 2
25610: PPUSH
25611: LD_VAR 0 3
25615: PPUSH
25616: CALL_OW 235
// end ;
25620: GO 25543
25622: POP
25623: POP
// end ;
25624: LD_VAR 0 1
25628: RET
// export function hHackFog ; begin
25629: LD_INT 0
25631: PPUSH
// FogOff ( true ) ;
25632: LD_INT 1
25634: PPUSH
25635: CALL_OW 344
// end ;
25639: LD_VAR 0 1
25643: RET
// export function hHackTeleport ( unit , x , y ) ; begin
25644: LD_INT 0
25646: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
25647: LD_VAR 0 1
25651: PPUSH
25652: LD_VAR 0 2
25656: PPUSH
25657: LD_VAR 0 3
25661: PPUSH
25662: LD_INT 1
25664: PPUSH
25665: LD_INT 1
25667: PPUSH
25668: CALL_OW 483
// CenterOnXY ( x , y ) ;
25672: LD_VAR 0 2
25676: PPUSH
25677: LD_VAR 0 3
25681: PPUSH
25682: CALL_OW 84
// end ;
25686: LD_VAR 0 4
25690: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
25691: LD_INT 0
25693: PPUSH
25694: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
25695: LD_VAR 0 1
25699: NOT
25700: PUSH
25701: LD_VAR 0 2
25705: PPUSH
25706: LD_VAR 0 3
25710: PPUSH
25711: CALL_OW 488
25715: NOT
25716: OR
25717: PUSH
25718: LD_VAR 0 1
25722: PPUSH
25723: CALL_OW 266
25727: PUSH
25728: LD_INT 3
25730: NONEQUAL
25731: PUSH
25732: LD_VAR 0 1
25736: PPUSH
25737: CALL_OW 247
25741: PUSH
25742: LD_INT 1
25744: EQUAL
25745: NOT
25746: AND
25747: OR
25748: IFFALSE 25752
// exit ;
25750: GO 25901
// if GetType ( factory ) = unit_human then
25752: LD_VAR 0 1
25756: PPUSH
25757: CALL_OW 247
25761: PUSH
25762: LD_INT 1
25764: EQUAL
25765: IFFALSE 25782
// factory := IsInUnit ( factory ) ;
25767: LD_ADDR_VAR 0 1
25771: PUSH
25772: LD_VAR 0 1
25776: PPUSH
25777: CALL_OW 310
25781: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
25782: LD_VAR 0 1
25786: PPUSH
25787: CALL_OW 266
25791: PUSH
25792: LD_INT 3
25794: NONEQUAL
25795: IFFALSE 25799
// exit ;
25797: GO 25901
// if HexInfo ( x , y ) = factory then
25799: LD_VAR 0 2
25803: PPUSH
25804: LD_VAR 0 3
25808: PPUSH
25809: CALL_OW 428
25813: PUSH
25814: LD_VAR 0 1
25818: EQUAL
25819: IFFALSE 25846
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
25821: LD_ADDR_EXP 85
25825: PUSH
25826: LD_EXP 85
25830: PPUSH
25831: LD_VAR 0 1
25835: PPUSH
25836: LD_INT 0
25838: PPUSH
25839: CALL_OW 1
25843: ST_TO_ADDR
25844: GO 25897
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
25846: LD_ADDR_EXP 85
25850: PUSH
25851: LD_EXP 85
25855: PPUSH
25856: LD_VAR 0 1
25860: PPUSH
25861: LD_VAR 0 1
25865: PPUSH
25866: CALL_OW 255
25870: PUSH
25871: LD_VAR 0 1
25875: PUSH
25876: LD_VAR 0 2
25880: PUSH
25881: LD_VAR 0 3
25885: PUSH
25886: EMPTY
25887: LIST
25888: LIST
25889: LIST
25890: LIST
25891: PPUSH
25892: CALL_OW 1
25896: ST_TO_ADDR
// UpdateFactoryWaypoints ;
25897: CALL 25906 0 0
// end ;
25901: LD_VAR 0 4
25905: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
25906: LD_INT 0
25908: PPUSH
25909: PPUSH
25910: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
25911: LD_STRING resetFactoryWaypoint();
25913: PPUSH
25914: CALL_OW 559
// if factoryWaypoints then
25918: LD_EXP 85
25922: IFFALSE 26048
// begin list := PrepareArray ( factoryWaypoints ) ;
25924: LD_ADDR_VAR 0 3
25928: PUSH
25929: LD_EXP 85
25933: PPUSH
25934: CALL 72370 0 1
25938: ST_TO_ADDR
// for i := 1 to list do
25939: LD_ADDR_VAR 0 2
25943: PUSH
25944: DOUBLE
25945: LD_INT 1
25947: DEC
25948: ST_TO_ADDR
25949: LD_VAR 0 3
25953: PUSH
25954: FOR_TO
25955: IFFALSE 26046
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
25957: LD_STRING setFactoryWaypointXY(
25959: PUSH
25960: LD_VAR 0 3
25964: PUSH
25965: LD_VAR 0 2
25969: ARRAY
25970: PUSH
25971: LD_INT 1
25973: ARRAY
25974: STR
25975: PUSH
25976: LD_STRING ,
25978: STR
25979: PUSH
25980: LD_VAR 0 3
25984: PUSH
25985: LD_VAR 0 2
25989: ARRAY
25990: PUSH
25991: LD_INT 2
25993: ARRAY
25994: STR
25995: PUSH
25996: LD_STRING ,
25998: STR
25999: PUSH
26000: LD_VAR 0 3
26004: PUSH
26005: LD_VAR 0 2
26009: ARRAY
26010: PUSH
26011: LD_INT 3
26013: ARRAY
26014: STR
26015: PUSH
26016: LD_STRING ,
26018: STR
26019: PUSH
26020: LD_VAR 0 3
26024: PUSH
26025: LD_VAR 0 2
26029: ARRAY
26030: PUSH
26031: LD_INT 4
26033: ARRAY
26034: STR
26035: PUSH
26036: LD_STRING )
26038: STR
26039: PPUSH
26040: CALL_OW 559
26044: GO 25954
26046: POP
26047: POP
// end ; end ;
26048: LD_VAR 0 1
26052: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
26053: LD_INT 0
26055: PPUSH
// if HexInfo ( x , y ) = warehouse then
26056: LD_VAR 0 2
26060: PPUSH
26061: LD_VAR 0 3
26065: PPUSH
26066: CALL_OW 428
26070: PUSH
26071: LD_VAR 0 1
26075: EQUAL
26076: IFFALSE 26103
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
26078: LD_ADDR_EXP 86
26082: PUSH
26083: LD_EXP 86
26087: PPUSH
26088: LD_VAR 0 1
26092: PPUSH
26093: LD_INT 0
26095: PPUSH
26096: CALL_OW 1
26100: ST_TO_ADDR
26101: GO 26154
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
26103: LD_ADDR_EXP 86
26107: PUSH
26108: LD_EXP 86
26112: PPUSH
26113: LD_VAR 0 1
26117: PPUSH
26118: LD_VAR 0 1
26122: PPUSH
26123: CALL_OW 255
26127: PUSH
26128: LD_VAR 0 1
26132: PUSH
26133: LD_VAR 0 2
26137: PUSH
26138: LD_VAR 0 3
26142: PUSH
26143: EMPTY
26144: LIST
26145: LIST
26146: LIST
26147: LIST
26148: PPUSH
26149: CALL_OW 1
26153: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
26154: CALL 26163 0 0
// end ;
26158: LD_VAR 0 4
26162: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
26163: LD_INT 0
26165: PPUSH
26166: PPUSH
26167: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
26168: LD_STRING resetWarehouseGatheringPoints();
26170: PPUSH
26171: CALL_OW 559
// if warehouseGatheringPoints then
26175: LD_EXP 86
26179: IFFALSE 26305
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
26181: LD_ADDR_VAR 0 3
26185: PUSH
26186: LD_EXP 86
26190: PPUSH
26191: CALL 72370 0 1
26195: ST_TO_ADDR
// for i := 1 to list do
26196: LD_ADDR_VAR 0 2
26200: PUSH
26201: DOUBLE
26202: LD_INT 1
26204: DEC
26205: ST_TO_ADDR
26206: LD_VAR 0 3
26210: PUSH
26211: FOR_TO
26212: IFFALSE 26303
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
26214: LD_STRING setWarehouseGatheringPointXY(
26216: PUSH
26217: LD_VAR 0 3
26221: PUSH
26222: LD_VAR 0 2
26226: ARRAY
26227: PUSH
26228: LD_INT 1
26230: ARRAY
26231: STR
26232: PUSH
26233: LD_STRING ,
26235: STR
26236: PUSH
26237: LD_VAR 0 3
26241: PUSH
26242: LD_VAR 0 2
26246: ARRAY
26247: PUSH
26248: LD_INT 2
26250: ARRAY
26251: STR
26252: PUSH
26253: LD_STRING ,
26255: STR
26256: PUSH
26257: LD_VAR 0 3
26261: PUSH
26262: LD_VAR 0 2
26266: ARRAY
26267: PUSH
26268: LD_INT 3
26270: ARRAY
26271: STR
26272: PUSH
26273: LD_STRING ,
26275: STR
26276: PUSH
26277: LD_VAR 0 3
26281: PUSH
26282: LD_VAR 0 2
26286: ARRAY
26287: PUSH
26288: LD_INT 4
26290: ARRAY
26291: STR
26292: PUSH
26293: LD_STRING )
26295: STR
26296: PPUSH
26297: CALL_OW 559
26301: GO 26211
26303: POP
26304: POP
// end ; end ;
26305: LD_VAR 0 1
26309: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
26310: LD_EXP 86
26314: IFFALSE 26999
26316: GO 26318
26318: DISABLE
26319: LD_INT 0
26321: PPUSH
26322: PPUSH
26323: PPUSH
26324: PPUSH
26325: PPUSH
26326: PPUSH
26327: PPUSH
26328: PPUSH
26329: PPUSH
// begin enable ;
26330: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
26331: LD_ADDR_VAR 0 3
26335: PUSH
26336: LD_EXP 86
26340: PPUSH
26341: CALL 72370 0 1
26345: ST_TO_ADDR
// if not list then
26346: LD_VAR 0 3
26350: NOT
26351: IFFALSE 26355
// exit ;
26353: GO 26999
// for i := 1 to list do
26355: LD_ADDR_VAR 0 1
26359: PUSH
26360: DOUBLE
26361: LD_INT 1
26363: DEC
26364: ST_TO_ADDR
26365: LD_VAR 0 3
26369: PUSH
26370: FOR_TO
26371: IFFALSE 26997
// begin depot := list [ i ] [ 2 ] ;
26373: LD_ADDR_VAR 0 8
26377: PUSH
26378: LD_VAR 0 3
26382: PUSH
26383: LD_VAR 0 1
26387: ARRAY
26388: PUSH
26389: LD_INT 2
26391: ARRAY
26392: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
26393: LD_ADDR_VAR 0 5
26397: PUSH
26398: LD_VAR 0 3
26402: PUSH
26403: LD_VAR 0 1
26407: ARRAY
26408: PUSH
26409: LD_INT 1
26411: ARRAY
26412: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
26413: LD_VAR 0 8
26417: PPUSH
26418: CALL_OW 301
26422: PUSH
26423: LD_VAR 0 5
26427: PUSH
26428: LD_VAR 0 8
26432: PPUSH
26433: CALL_OW 255
26437: NONEQUAL
26438: OR
26439: IFFALSE 26468
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
26441: LD_ADDR_EXP 86
26445: PUSH
26446: LD_EXP 86
26450: PPUSH
26451: LD_VAR 0 8
26455: PPUSH
26456: LD_INT 0
26458: PPUSH
26459: CALL_OW 1
26463: ST_TO_ADDR
// exit ;
26464: POP
26465: POP
26466: GO 26999
// end ; x := list [ i ] [ 3 ] ;
26468: LD_ADDR_VAR 0 6
26472: PUSH
26473: LD_VAR 0 3
26477: PUSH
26478: LD_VAR 0 1
26482: ARRAY
26483: PUSH
26484: LD_INT 3
26486: ARRAY
26487: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
26488: LD_ADDR_VAR 0 7
26492: PUSH
26493: LD_VAR 0 3
26497: PUSH
26498: LD_VAR 0 1
26502: ARRAY
26503: PUSH
26504: LD_INT 4
26506: ARRAY
26507: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
26508: LD_ADDR_VAR 0 9
26512: PUSH
26513: LD_VAR 0 6
26517: PPUSH
26518: LD_VAR 0 7
26522: PPUSH
26523: LD_INT 16
26525: PPUSH
26526: CALL 70958 0 3
26530: ST_TO_ADDR
// if not cratesNearbyPoint then
26531: LD_VAR 0 9
26535: NOT
26536: IFFALSE 26542
// exit ;
26538: POP
26539: POP
26540: GO 26999
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
26542: LD_ADDR_VAR 0 4
26546: PUSH
26547: LD_INT 22
26549: PUSH
26550: LD_VAR 0 5
26554: PUSH
26555: EMPTY
26556: LIST
26557: LIST
26558: PUSH
26559: LD_INT 3
26561: PUSH
26562: LD_INT 60
26564: PUSH
26565: EMPTY
26566: LIST
26567: PUSH
26568: EMPTY
26569: LIST
26570: LIST
26571: PUSH
26572: LD_INT 91
26574: PUSH
26575: LD_VAR 0 8
26579: PUSH
26580: LD_INT 6
26582: PUSH
26583: EMPTY
26584: LIST
26585: LIST
26586: LIST
26587: PUSH
26588: LD_INT 2
26590: PUSH
26591: LD_INT 25
26593: PUSH
26594: LD_INT 2
26596: PUSH
26597: EMPTY
26598: LIST
26599: LIST
26600: PUSH
26601: LD_INT 25
26603: PUSH
26604: LD_INT 16
26606: PUSH
26607: EMPTY
26608: LIST
26609: LIST
26610: PUSH
26611: EMPTY
26612: LIST
26613: LIST
26614: LIST
26615: PUSH
26616: EMPTY
26617: LIST
26618: LIST
26619: LIST
26620: LIST
26621: PPUSH
26622: CALL_OW 69
26626: PUSH
26627: LD_VAR 0 8
26631: PPUSH
26632: CALL_OW 313
26636: PPUSH
26637: LD_INT 3
26639: PUSH
26640: LD_INT 60
26642: PUSH
26643: EMPTY
26644: LIST
26645: PUSH
26646: EMPTY
26647: LIST
26648: LIST
26649: PUSH
26650: LD_INT 2
26652: PUSH
26653: LD_INT 25
26655: PUSH
26656: LD_INT 2
26658: PUSH
26659: EMPTY
26660: LIST
26661: LIST
26662: PUSH
26663: LD_INT 25
26665: PUSH
26666: LD_INT 16
26668: PUSH
26669: EMPTY
26670: LIST
26671: LIST
26672: PUSH
26673: EMPTY
26674: LIST
26675: LIST
26676: LIST
26677: PUSH
26678: EMPTY
26679: LIST
26680: LIST
26681: PPUSH
26682: CALL_OW 72
26686: UNION
26687: ST_TO_ADDR
// if tmp then
26688: LD_VAR 0 4
26692: IFFALSE 26772
// begin tmp := ShrinkArray ( tmp , 3 ) ;
26694: LD_ADDR_VAR 0 4
26698: PUSH
26699: LD_VAR 0 4
26703: PPUSH
26704: LD_INT 3
26706: PPUSH
26707: CALL 68927 0 2
26711: ST_TO_ADDR
// for j in tmp do
26712: LD_ADDR_VAR 0 2
26716: PUSH
26717: LD_VAR 0 4
26721: PUSH
26722: FOR_IN
26723: IFFALSE 26766
// begin if IsInUnit ( j ) then
26725: LD_VAR 0 2
26729: PPUSH
26730: CALL_OW 310
26734: IFFALSE 26745
// ComExit ( j ) ;
26736: LD_VAR 0 2
26740: PPUSH
26741: CALL 69010 0 1
// AddComCollect ( j , x , y ) ;
26745: LD_VAR 0 2
26749: PPUSH
26750: LD_VAR 0 6
26754: PPUSH
26755: LD_VAR 0 7
26759: PPUSH
26760: CALL_OW 177
// end ;
26764: GO 26722
26766: POP
26767: POP
// exit ;
26768: POP
26769: POP
26770: GO 26999
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
26772: LD_ADDR_VAR 0 4
26776: PUSH
26777: LD_INT 22
26779: PUSH
26780: LD_VAR 0 5
26784: PUSH
26785: EMPTY
26786: LIST
26787: LIST
26788: PUSH
26789: LD_INT 91
26791: PUSH
26792: LD_VAR 0 8
26796: PUSH
26797: LD_INT 8
26799: PUSH
26800: EMPTY
26801: LIST
26802: LIST
26803: LIST
26804: PUSH
26805: LD_INT 2
26807: PUSH
26808: LD_INT 34
26810: PUSH
26811: LD_INT 12
26813: PUSH
26814: EMPTY
26815: LIST
26816: LIST
26817: PUSH
26818: LD_INT 34
26820: PUSH
26821: LD_INT 51
26823: PUSH
26824: EMPTY
26825: LIST
26826: LIST
26827: PUSH
26828: LD_INT 34
26830: PUSH
26831: LD_INT 32
26833: PUSH
26834: EMPTY
26835: LIST
26836: LIST
26837: PUSH
26838: LD_INT 34
26840: PUSH
26841: LD_INT 89
26843: PUSH
26844: EMPTY
26845: LIST
26846: LIST
26847: PUSH
26848: EMPTY
26849: LIST
26850: LIST
26851: LIST
26852: LIST
26853: LIST
26854: PUSH
26855: EMPTY
26856: LIST
26857: LIST
26858: LIST
26859: PPUSH
26860: CALL_OW 69
26864: ST_TO_ADDR
// if tmp then
26865: LD_VAR 0 4
26869: IFFALSE 26995
// begin for j in tmp do
26871: LD_ADDR_VAR 0 2
26875: PUSH
26876: LD_VAR 0 4
26880: PUSH
26881: FOR_IN
26882: IFFALSE 26993
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
26884: LD_VAR 0 2
26888: PPUSH
26889: CALL_OW 262
26893: PUSH
26894: LD_INT 3
26896: EQUAL
26897: PUSH
26898: LD_VAR 0 2
26902: PPUSH
26903: CALL_OW 261
26907: PUSH
26908: LD_INT 20
26910: GREATER
26911: OR
26912: PUSH
26913: LD_VAR 0 2
26917: PPUSH
26918: CALL_OW 314
26922: NOT
26923: AND
26924: PUSH
26925: LD_VAR 0 2
26929: PPUSH
26930: CALL_OW 263
26934: PUSH
26935: LD_INT 1
26937: NONEQUAL
26938: PUSH
26939: LD_VAR 0 2
26943: PPUSH
26944: CALL_OW 311
26948: OR
26949: AND
26950: IFFALSE 26991
// begin ComCollect ( j , x , y ) ;
26952: LD_VAR 0 2
26956: PPUSH
26957: LD_VAR 0 6
26961: PPUSH
26962: LD_VAR 0 7
26966: PPUSH
26967: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
26971: LD_VAR 0 2
26975: PPUSH
26976: LD_VAR 0 8
26980: PPUSH
26981: CALL_OW 172
// exit ;
26985: POP
26986: POP
26987: POP
26988: POP
26989: GO 26999
// end ;
26991: GO 26881
26993: POP
26994: POP
// end ; end ;
26995: GO 26370
26997: POP
26998: POP
// end ; end_of_file
26999: PPOPN 9
27001: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
27002: LD_INT 0
27004: PPUSH
27005: PPUSH
27006: PPUSH
27007: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
27008: LD_VAR 0 1
27012: PPUSH
27013: CALL_OW 264
27017: PUSH
27018: LD_INT 91
27020: EQUAL
27021: IFFALSE 27093
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
27023: LD_INT 68
27025: PPUSH
27026: LD_VAR 0 1
27030: PPUSH
27031: CALL_OW 255
27035: PPUSH
27036: CALL_OW 321
27040: PUSH
27041: LD_INT 2
27043: EQUAL
27044: IFFALSE 27056
// eff := 70 else
27046: LD_ADDR_VAR 0 4
27050: PUSH
27051: LD_INT 70
27053: ST_TO_ADDR
27054: GO 27064
// eff := 30 ;
27056: LD_ADDR_VAR 0 4
27060: PUSH
27061: LD_INT 30
27063: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
27064: LD_VAR 0 1
27068: PPUSH
27069: CALL_OW 250
27073: PPUSH
27074: LD_VAR 0 1
27078: PPUSH
27079: CALL_OW 251
27083: PPUSH
27084: LD_VAR 0 4
27088: PPUSH
27089: CALL_OW 495
// end ; end ;
27093: LD_VAR 0 2
27097: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
27098: LD_INT 0
27100: PPUSH
// end ;
27101: LD_VAR 0 4
27105: RET
// export function SOS_Command ( cmd ) ; begin
27106: LD_INT 0
27108: PPUSH
// end ;
27109: LD_VAR 0 2
27113: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
27114: LD_INT 0
27116: PPUSH
// end ;
27117: LD_VAR 0 6
27121: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
27122: LD_INT 0
27124: PPUSH
27125: PPUSH
// if not vehicle or not factory then
27126: LD_VAR 0 1
27130: NOT
27131: PUSH
27132: LD_VAR 0 2
27136: NOT
27137: OR
27138: IFFALSE 27142
// exit ;
27140: GO 27373
// if factoryWaypoints >= factory then
27142: LD_EXP 85
27146: PUSH
27147: LD_VAR 0 2
27151: GREATEREQUAL
27152: IFFALSE 27373
// if factoryWaypoints [ factory ] then
27154: LD_EXP 85
27158: PUSH
27159: LD_VAR 0 2
27163: ARRAY
27164: IFFALSE 27373
// begin if GetControl ( vehicle ) = control_manual then
27166: LD_VAR 0 1
27170: PPUSH
27171: CALL_OW 263
27175: PUSH
27176: LD_INT 1
27178: EQUAL
27179: IFFALSE 27260
// begin driver := IsDrivenBy ( vehicle ) ;
27181: LD_ADDR_VAR 0 4
27185: PUSH
27186: LD_VAR 0 1
27190: PPUSH
27191: CALL_OW 311
27195: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
27196: LD_VAR 0 4
27200: PPUSH
27201: LD_EXP 85
27205: PUSH
27206: LD_VAR 0 2
27210: ARRAY
27211: PUSH
27212: LD_INT 3
27214: ARRAY
27215: PPUSH
27216: LD_EXP 85
27220: PUSH
27221: LD_VAR 0 2
27225: ARRAY
27226: PUSH
27227: LD_INT 4
27229: ARRAY
27230: PPUSH
27231: CALL_OW 171
// AddComExitVehicle ( driver ) ;
27235: LD_VAR 0 4
27239: PPUSH
27240: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
27244: LD_VAR 0 4
27248: PPUSH
27249: LD_VAR 0 2
27253: PPUSH
27254: CALL_OW 180
// end else
27258: GO 27373
// if GetControl ( vehicle ) = control_remote then
27260: LD_VAR 0 1
27264: PPUSH
27265: CALL_OW 263
27269: PUSH
27270: LD_INT 2
27272: EQUAL
27273: IFFALSE 27334
// begin wait ( 0 0$2 ) ;
27275: LD_INT 70
27277: PPUSH
27278: CALL_OW 67
// if Connect ( vehicle ) then
27282: LD_VAR 0 1
27286: PPUSH
27287: CALL 39231 0 1
27291: IFFALSE 27332
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
27293: LD_VAR 0 1
27297: PPUSH
27298: LD_EXP 85
27302: PUSH
27303: LD_VAR 0 2
27307: ARRAY
27308: PUSH
27309: LD_INT 3
27311: ARRAY
27312: PPUSH
27313: LD_EXP 85
27317: PUSH
27318: LD_VAR 0 2
27322: ARRAY
27323: PUSH
27324: LD_INT 4
27326: ARRAY
27327: PPUSH
27328: CALL_OW 171
// end else
27332: GO 27373
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
27334: LD_VAR 0 1
27338: PPUSH
27339: LD_EXP 85
27343: PUSH
27344: LD_VAR 0 2
27348: ARRAY
27349: PUSH
27350: LD_INT 3
27352: ARRAY
27353: PPUSH
27354: LD_EXP 85
27358: PUSH
27359: LD_VAR 0 2
27363: ARRAY
27364: PUSH
27365: LD_INT 4
27367: ARRAY
27368: PPUSH
27369: CALL_OW 171
// end ; end ;
27373: LD_VAR 0 3
27377: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
27378: LD_INT 0
27380: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
27381: LD_VAR 0 1
27385: PUSH
27386: LD_INT 250
27388: EQUAL
27389: PUSH
27390: LD_VAR 0 2
27394: PPUSH
27395: CALL_OW 264
27399: PUSH
27400: LD_INT 81
27402: EQUAL
27403: AND
27404: IFFALSE 27425
// MinerPlaceMine ( unit , x , y ) ;
27406: LD_VAR 0 2
27410: PPUSH
27411: LD_VAR 0 4
27415: PPUSH
27416: LD_VAR 0 5
27420: PPUSH
27421: CALL 29810 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
27425: LD_VAR 0 1
27429: PUSH
27430: LD_INT 251
27432: EQUAL
27433: PUSH
27434: LD_VAR 0 2
27438: PPUSH
27439: CALL_OW 264
27443: PUSH
27444: LD_INT 81
27446: EQUAL
27447: AND
27448: IFFALSE 27469
// MinerDetonateMine ( unit , x , y ) ;
27450: LD_VAR 0 2
27454: PPUSH
27455: LD_VAR 0 4
27459: PPUSH
27460: LD_VAR 0 5
27464: PPUSH
27465: CALL 30085 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
27469: LD_VAR 0 1
27473: PUSH
27474: LD_INT 252
27476: EQUAL
27477: PUSH
27478: LD_VAR 0 2
27482: PPUSH
27483: CALL_OW 264
27487: PUSH
27488: LD_INT 81
27490: EQUAL
27491: AND
27492: IFFALSE 27513
// MinerCreateMinefield ( unit , x , y ) ;
27494: LD_VAR 0 2
27498: PPUSH
27499: LD_VAR 0 4
27503: PPUSH
27504: LD_VAR 0 5
27508: PPUSH
27509: CALL 30502 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
27513: LD_VAR 0 1
27517: PUSH
27518: LD_INT 253
27520: EQUAL
27521: PUSH
27522: LD_VAR 0 2
27526: PPUSH
27527: CALL_OW 257
27531: PUSH
27532: LD_INT 5
27534: EQUAL
27535: AND
27536: IFFALSE 27557
// ComBinocular ( unit , x , y ) ;
27538: LD_VAR 0 2
27542: PPUSH
27543: LD_VAR 0 4
27547: PPUSH
27548: LD_VAR 0 5
27552: PPUSH
27553: CALL 30871 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
27557: LD_VAR 0 1
27561: PUSH
27562: LD_INT 254
27564: EQUAL
27565: PUSH
27566: LD_VAR 0 2
27570: PPUSH
27571: CALL_OW 264
27575: PUSH
27576: LD_INT 99
27578: EQUAL
27579: AND
27580: PUSH
27581: LD_VAR 0 3
27585: PPUSH
27586: CALL_OW 263
27590: PUSH
27591: LD_INT 3
27593: EQUAL
27594: AND
27595: IFFALSE 27611
// HackDestroyVehicle ( unit , selectedUnit ) ;
27597: LD_VAR 0 2
27601: PPUSH
27602: LD_VAR 0 3
27606: PPUSH
27607: CALL 29174 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
27611: LD_VAR 0 1
27615: PUSH
27616: LD_INT 255
27618: EQUAL
27619: PUSH
27620: LD_VAR 0 2
27624: PPUSH
27625: CALL_OW 264
27629: PUSH
27630: LD_INT 14
27632: PUSH
27633: LD_INT 53
27635: PUSH
27636: EMPTY
27637: LIST
27638: LIST
27639: IN
27640: AND
27641: PUSH
27642: LD_VAR 0 4
27646: PPUSH
27647: LD_VAR 0 5
27651: PPUSH
27652: CALL_OW 488
27656: AND
27657: IFFALSE 27681
// CutTreeXYR ( unit , x , y , 12 ) ;
27659: LD_VAR 0 2
27663: PPUSH
27664: LD_VAR 0 4
27668: PPUSH
27669: LD_VAR 0 5
27673: PPUSH
27674: LD_INT 12
27676: PPUSH
27677: CALL 27744 0 4
// if cmd = 256 then
27681: LD_VAR 0 1
27685: PUSH
27686: LD_INT 256
27688: EQUAL
27689: IFFALSE 27710
// SetFactoryWaypoint ( unit , x , y ) ;
27691: LD_VAR 0 2
27695: PPUSH
27696: LD_VAR 0 4
27700: PPUSH
27701: LD_VAR 0 5
27705: PPUSH
27706: CALL 25691 0 3
// if cmd = 257 then
27710: LD_VAR 0 1
27714: PUSH
27715: LD_INT 257
27717: EQUAL
27718: IFFALSE 27739
// SetWarehouseGatheringPoint ( unit , x , y ) ;
27720: LD_VAR 0 2
27724: PPUSH
27725: LD_VAR 0 4
27729: PPUSH
27730: LD_VAR 0 5
27734: PPUSH
27735: CALL 26053 0 3
// end ;
27739: LD_VAR 0 6
27743: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
27744: LD_INT 0
27746: PPUSH
27747: PPUSH
27748: PPUSH
27749: PPUSH
27750: PPUSH
27751: PPUSH
27752: PPUSH
27753: PPUSH
27754: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
27755: LD_VAR 0 1
27759: NOT
27760: PUSH
27761: LD_VAR 0 2
27765: PPUSH
27766: LD_VAR 0 3
27770: PPUSH
27771: CALL_OW 488
27775: NOT
27776: OR
27777: PUSH
27778: LD_VAR 0 4
27782: NOT
27783: OR
27784: IFFALSE 27788
// exit ;
27786: GO 28128
// list := [ ] ;
27788: LD_ADDR_VAR 0 13
27792: PUSH
27793: EMPTY
27794: ST_TO_ADDR
// if x - r < 0 then
27795: LD_VAR 0 2
27799: PUSH
27800: LD_VAR 0 4
27804: MINUS
27805: PUSH
27806: LD_INT 0
27808: LESS
27809: IFFALSE 27821
// min_x := 0 else
27811: LD_ADDR_VAR 0 7
27815: PUSH
27816: LD_INT 0
27818: ST_TO_ADDR
27819: GO 27837
// min_x := x - r ;
27821: LD_ADDR_VAR 0 7
27825: PUSH
27826: LD_VAR 0 2
27830: PUSH
27831: LD_VAR 0 4
27835: MINUS
27836: ST_TO_ADDR
// if y - r < 0 then
27837: LD_VAR 0 3
27841: PUSH
27842: LD_VAR 0 4
27846: MINUS
27847: PUSH
27848: LD_INT 0
27850: LESS
27851: IFFALSE 27863
// min_y := 0 else
27853: LD_ADDR_VAR 0 8
27857: PUSH
27858: LD_INT 0
27860: ST_TO_ADDR
27861: GO 27879
// min_y := y - r ;
27863: LD_ADDR_VAR 0 8
27867: PUSH
27868: LD_VAR 0 3
27872: PUSH
27873: LD_VAR 0 4
27877: MINUS
27878: ST_TO_ADDR
// max_x := x + r ;
27879: LD_ADDR_VAR 0 9
27883: PUSH
27884: LD_VAR 0 2
27888: PUSH
27889: LD_VAR 0 4
27893: PLUS
27894: ST_TO_ADDR
// max_y := y + r ;
27895: LD_ADDR_VAR 0 10
27899: PUSH
27900: LD_VAR 0 3
27904: PUSH
27905: LD_VAR 0 4
27909: PLUS
27910: ST_TO_ADDR
// for _x = min_x to max_x do
27911: LD_ADDR_VAR 0 11
27915: PUSH
27916: DOUBLE
27917: LD_VAR 0 7
27921: DEC
27922: ST_TO_ADDR
27923: LD_VAR 0 9
27927: PUSH
27928: FOR_TO
27929: IFFALSE 28046
// for _y = min_y to max_y do
27931: LD_ADDR_VAR 0 12
27935: PUSH
27936: DOUBLE
27937: LD_VAR 0 8
27941: DEC
27942: ST_TO_ADDR
27943: LD_VAR 0 10
27947: PUSH
27948: FOR_TO
27949: IFFALSE 28042
// begin if not ValidHex ( _x , _y ) then
27951: LD_VAR 0 11
27955: PPUSH
27956: LD_VAR 0 12
27960: PPUSH
27961: CALL_OW 488
27965: NOT
27966: IFFALSE 27970
// continue ;
27968: GO 27948
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
27970: LD_VAR 0 11
27974: PPUSH
27975: LD_VAR 0 12
27979: PPUSH
27980: CALL_OW 351
27984: PUSH
27985: LD_VAR 0 11
27989: PPUSH
27990: LD_VAR 0 12
27994: PPUSH
27995: CALL_OW 554
27999: AND
28000: IFFALSE 28040
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
28002: LD_ADDR_VAR 0 13
28006: PUSH
28007: LD_VAR 0 13
28011: PPUSH
28012: LD_VAR 0 13
28016: PUSH
28017: LD_INT 1
28019: PLUS
28020: PPUSH
28021: LD_VAR 0 11
28025: PUSH
28026: LD_VAR 0 12
28030: PUSH
28031: EMPTY
28032: LIST
28033: LIST
28034: PPUSH
28035: CALL_OW 2
28039: ST_TO_ADDR
// end ;
28040: GO 27948
28042: POP
28043: POP
28044: GO 27928
28046: POP
28047: POP
// if not list then
28048: LD_VAR 0 13
28052: NOT
28053: IFFALSE 28057
// exit ;
28055: GO 28128
// for i in list do
28057: LD_ADDR_VAR 0 6
28061: PUSH
28062: LD_VAR 0 13
28066: PUSH
28067: FOR_IN
28068: IFFALSE 28126
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
28070: LD_VAR 0 1
28074: PPUSH
28075: LD_STRING M
28077: PUSH
28078: LD_VAR 0 6
28082: PUSH
28083: LD_INT 1
28085: ARRAY
28086: PUSH
28087: LD_VAR 0 6
28091: PUSH
28092: LD_INT 2
28094: ARRAY
28095: PUSH
28096: LD_INT 0
28098: PUSH
28099: LD_INT 0
28101: PUSH
28102: LD_INT 0
28104: PUSH
28105: LD_INT 0
28107: PUSH
28108: EMPTY
28109: LIST
28110: LIST
28111: LIST
28112: LIST
28113: LIST
28114: LIST
28115: LIST
28116: PUSH
28117: EMPTY
28118: LIST
28119: PPUSH
28120: CALL_OW 447
28124: GO 28067
28126: POP
28127: POP
// end ;
28128: LD_VAR 0 5
28132: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
28133: LD_EXP 88
28137: NOT
28138: IFFALSE 28188
28140: GO 28142
28142: DISABLE
// begin initHack := true ;
28143: LD_ADDR_EXP 88
28147: PUSH
28148: LD_INT 1
28150: ST_TO_ADDR
// hackTanks := [ ] ;
28151: LD_ADDR_EXP 89
28155: PUSH
28156: EMPTY
28157: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
28158: LD_ADDR_EXP 90
28162: PUSH
28163: EMPTY
28164: ST_TO_ADDR
// hackLimit := 3 ;
28165: LD_ADDR_EXP 91
28169: PUSH
28170: LD_INT 3
28172: ST_TO_ADDR
// hackDist := 12 ;
28173: LD_ADDR_EXP 92
28177: PUSH
28178: LD_INT 12
28180: ST_TO_ADDR
// hackCounter := [ ] ;
28181: LD_ADDR_EXP 93
28185: PUSH
28186: EMPTY
28187: ST_TO_ADDR
// end ;
28188: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
28189: LD_EXP 88
28193: PUSH
28194: LD_INT 34
28196: PUSH
28197: LD_INT 99
28199: PUSH
28200: EMPTY
28201: LIST
28202: LIST
28203: PPUSH
28204: CALL_OW 69
28208: AND
28209: IFFALSE 28462
28211: GO 28213
28213: DISABLE
28214: LD_INT 0
28216: PPUSH
28217: PPUSH
// begin enable ;
28218: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
28219: LD_ADDR_VAR 0 1
28223: PUSH
28224: LD_INT 34
28226: PUSH
28227: LD_INT 99
28229: PUSH
28230: EMPTY
28231: LIST
28232: LIST
28233: PPUSH
28234: CALL_OW 69
28238: PUSH
28239: FOR_IN
28240: IFFALSE 28460
// begin if not i in hackTanks then
28242: LD_VAR 0 1
28246: PUSH
28247: LD_EXP 89
28251: IN
28252: NOT
28253: IFFALSE 28336
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
28255: LD_ADDR_EXP 89
28259: PUSH
28260: LD_EXP 89
28264: PPUSH
28265: LD_EXP 89
28269: PUSH
28270: LD_INT 1
28272: PLUS
28273: PPUSH
28274: LD_VAR 0 1
28278: PPUSH
28279: CALL_OW 1
28283: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
28284: LD_ADDR_EXP 90
28288: PUSH
28289: LD_EXP 90
28293: PPUSH
28294: LD_EXP 90
28298: PUSH
28299: LD_INT 1
28301: PLUS
28302: PPUSH
28303: EMPTY
28304: PPUSH
28305: CALL_OW 1
28309: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
28310: LD_ADDR_EXP 93
28314: PUSH
28315: LD_EXP 93
28319: PPUSH
28320: LD_EXP 93
28324: PUSH
28325: LD_INT 1
28327: PLUS
28328: PPUSH
28329: EMPTY
28330: PPUSH
28331: CALL_OW 1
28335: ST_TO_ADDR
// end ; if not IsOk ( i ) then
28336: LD_VAR 0 1
28340: PPUSH
28341: CALL_OW 302
28345: NOT
28346: IFFALSE 28359
// begin HackUnlinkAll ( i ) ;
28348: LD_VAR 0 1
28352: PPUSH
28353: CALL 28465 0 1
// continue ;
28357: GO 28239
// end ; HackCheckCapturedStatus ( i ) ;
28359: LD_VAR 0 1
28363: PPUSH
28364: CALL 28908 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
28368: LD_ADDR_VAR 0 2
28372: PUSH
28373: LD_INT 81
28375: PUSH
28376: LD_VAR 0 1
28380: PPUSH
28381: CALL_OW 255
28385: PUSH
28386: EMPTY
28387: LIST
28388: LIST
28389: PUSH
28390: LD_INT 33
28392: PUSH
28393: LD_INT 3
28395: PUSH
28396: EMPTY
28397: LIST
28398: LIST
28399: PUSH
28400: LD_INT 91
28402: PUSH
28403: LD_VAR 0 1
28407: PUSH
28408: LD_EXP 92
28412: PUSH
28413: EMPTY
28414: LIST
28415: LIST
28416: LIST
28417: PUSH
28418: LD_INT 50
28420: PUSH
28421: EMPTY
28422: LIST
28423: PUSH
28424: EMPTY
28425: LIST
28426: LIST
28427: LIST
28428: LIST
28429: PPUSH
28430: CALL_OW 69
28434: ST_TO_ADDR
// if not tmp then
28435: LD_VAR 0 2
28439: NOT
28440: IFFALSE 28444
// continue ;
28442: GO 28239
// HackLink ( i , tmp ) ;
28444: LD_VAR 0 1
28448: PPUSH
28449: LD_VAR 0 2
28453: PPUSH
28454: CALL 28601 0 2
// end ;
28458: GO 28239
28460: POP
28461: POP
// end ;
28462: PPOPN 2
28464: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
28465: LD_INT 0
28467: PPUSH
28468: PPUSH
28469: PPUSH
// if not hack in hackTanks then
28470: LD_VAR 0 1
28474: PUSH
28475: LD_EXP 89
28479: IN
28480: NOT
28481: IFFALSE 28485
// exit ;
28483: GO 28596
// index := GetElementIndex ( hackTanks , hack ) ;
28485: LD_ADDR_VAR 0 4
28489: PUSH
28490: LD_EXP 89
28494: PPUSH
28495: LD_VAR 0 1
28499: PPUSH
28500: CALL 36038 0 2
28504: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
28505: LD_EXP 90
28509: PUSH
28510: LD_VAR 0 4
28514: ARRAY
28515: IFFALSE 28596
// begin for i in hackTanksCaptured [ index ] do
28517: LD_ADDR_VAR 0 3
28521: PUSH
28522: LD_EXP 90
28526: PUSH
28527: LD_VAR 0 4
28531: ARRAY
28532: PUSH
28533: FOR_IN
28534: IFFALSE 28560
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
28536: LD_VAR 0 3
28540: PUSH
28541: LD_INT 1
28543: ARRAY
28544: PPUSH
28545: LD_VAR 0 3
28549: PUSH
28550: LD_INT 2
28552: ARRAY
28553: PPUSH
28554: CALL_OW 235
28558: GO 28533
28560: POP
28561: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
28562: LD_ADDR_EXP 90
28566: PUSH
28567: LD_EXP 90
28571: PPUSH
28572: LD_VAR 0 4
28576: PPUSH
28577: EMPTY
28578: PPUSH
28579: CALL_OW 1
28583: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
28584: LD_VAR 0 1
28588: PPUSH
28589: LD_INT 0
28591: PPUSH
28592: CALL_OW 505
// end ; end ;
28596: LD_VAR 0 2
28600: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
28601: LD_INT 0
28603: PPUSH
28604: PPUSH
28605: PPUSH
// if not hack in hackTanks or not vehicles then
28606: LD_VAR 0 1
28610: PUSH
28611: LD_EXP 89
28615: IN
28616: NOT
28617: PUSH
28618: LD_VAR 0 2
28622: NOT
28623: OR
28624: IFFALSE 28628
// exit ;
28626: GO 28903
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
28628: LD_ADDR_VAR 0 2
28632: PUSH
28633: LD_VAR 0 1
28637: PPUSH
28638: LD_VAR 0 2
28642: PPUSH
28643: LD_INT 1
28645: PPUSH
28646: LD_INT 1
28648: PPUSH
28649: CALL 36688 0 4
28653: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
28654: LD_ADDR_VAR 0 5
28658: PUSH
28659: LD_EXP 89
28663: PPUSH
28664: LD_VAR 0 1
28668: PPUSH
28669: CALL 36038 0 2
28673: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
28674: LD_EXP 90
28678: PUSH
28679: LD_VAR 0 5
28683: ARRAY
28684: PUSH
28685: LD_EXP 91
28689: LESS
28690: IFFALSE 28879
// begin for i := 1 to vehicles do
28692: LD_ADDR_VAR 0 4
28696: PUSH
28697: DOUBLE
28698: LD_INT 1
28700: DEC
28701: ST_TO_ADDR
28702: LD_VAR 0 2
28706: PUSH
28707: FOR_TO
28708: IFFALSE 28877
// begin if hackTanksCaptured [ index ] = hackLimit then
28710: LD_EXP 90
28714: PUSH
28715: LD_VAR 0 5
28719: ARRAY
28720: PUSH
28721: LD_EXP 91
28725: EQUAL
28726: IFFALSE 28730
// break ;
28728: GO 28877
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
28730: LD_ADDR_EXP 93
28734: PUSH
28735: LD_EXP 93
28739: PPUSH
28740: LD_VAR 0 5
28744: PPUSH
28745: LD_EXP 93
28749: PUSH
28750: LD_VAR 0 5
28754: ARRAY
28755: PUSH
28756: LD_INT 1
28758: PLUS
28759: PPUSH
28760: CALL_OW 1
28764: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
28765: LD_ADDR_EXP 90
28769: PUSH
28770: LD_EXP 90
28774: PPUSH
28775: LD_VAR 0 5
28779: PUSH
28780: LD_EXP 90
28784: PUSH
28785: LD_VAR 0 5
28789: ARRAY
28790: PUSH
28791: LD_INT 1
28793: PLUS
28794: PUSH
28795: EMPTY
28796: LIST
28797: LIST
28798: PPUSH
28799: LD_VAR 0 2
28803: PUSH
28804: LD_VAR 0 4
28808: ARRAY
28809: PUSH
28810: LD_VAR 0 2
28814: PUSH
28815: LD_VAR 0 4
28819: ARRAY
28820: PPUSH
28821: CALL_OW 255
28825: PUSH
28826: EMPTY
28827: LIST
28828: LIST
28829: PPUSH
28830: CALL 36253 0 3
28834: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
28835: LD_VAR 0 2
28839: PUSH
28840: LD_VAR 0 4
28844: ARRAY
28845: PPUSH
28846: LD_VAR 0 1
28850: PPUSH
28851: CALL_OW 255
28855: PPUSH
28856: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
28860: LD_VAR 0 2
28864: PUSH
28865: LD_VAR 0 4
28869: ARRAY
28870: PPUSH
28871: CALL_OW 141
// end ;
28875: GO 28707
28877: POP
28878: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
28879: LD_VAR 0 1
28883: PPUSH
28884: LD_EXP 90
28888: PUSH
28889: LD_VAR 0 5
28893: ARRAY
28894: PUSH
28895: LD_INT 0
28897: PLUS
28898: PPUSH
28899: CALL_OW 505
// end ;
28903: LD_VAR 0 3
28907: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
28908: LD_INT 0
28910: PPUSH
28911: PPUSH
28912: PPUSH
28913: PPUSH
// if not hack in hackTanks then
28914: LD_VAR 0 1
28918: PUSH
28919: LD_EXP 89
28923: IN
28924: NOT
28925: IFFALSE 28929
// exit ;
28927: GO 29169
// index := GetElementIndex ( hackTanks , hack ) ;
28929: LD_ADDR_VAR 0 4
28933: PUSH
28934: LD_EXP 89
28938: PPUSH
28939: LD_VAR 0 1
28943: PPUSH
28944: CALL 36038 0 2
28948: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
28949: LD_ADDR_VAR 0 3
28953: PUSH
28954: DOUBLE
28955: LD_EXP 90
28959: PUSH
28960: LD_VAR 0 4
28964: ARRAY
28965: INC
28966: ST_TO_ADDR
28967: LD_INT 1
28969: PUSH
28970: FOR_DOWNTO
28971: IFFALSE 29143
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
28973: LD_ADDR_VAR 0 5
28977: PUSH
28978: LD_EXP 90
28982: PUSH
28983: LD_VAR 0 4
28987: ARRAY
28988: PUSH
28989: LD_VAR 0 3
28993: ARRAY
28994: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
28995: LD_VAR 0 5
28999: PUSH
29000: LD_INT 1
29002: ARRAY
29003: PPUSH
29004: CALL_OW 302
29008: NOT
29009: PUSH
29010: LD_VAR 0 5
29014: PUSH
29015: LD_INT 1
29017: ARRAY
29018: PPUSH
29019: CALL_OW 255
29023: PUSH
29024: LD_VAR 0 1
29028: PPUSH
29029: CALL_OW 255
29033: NONEQUAL
29034: OR
29035: IFFALSE 29141
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
29037: LD_VAR 0 5
29041: PUSH
29042: LD_INT 1
29044: ARRAY
29045: PPUSH
29046: CALL_OW 305
29050: PUSH
29051: LD_VAR 0 5
29055: PUSH
29056: LD_INT 1
29058: ARRAY
29059: PPUSH
29060: CALL_OW 255
29064: PUSH
29065: LD_VAR 0 1
29069: PPUSH
29070: CALL_OW 255
29074: EQUAL
29075: AND
29076: IFFALSE 29100
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
29078: LD_VAR 0 5
29082: PUSH
29083: LD_INT 1
29085: ARRAY
29086: PPUSH
29087: LD_VAR 0 5
29091: PUSH
29092: LD_INT 2
29094: ARRAY
29095: PPUSH
29096: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
29100: LD_ADDR_EXP 90
29104: PUSH
29105: LD_EXP 90
29109: PPUSH
29110: LD_VAR 0 4
29114: PPUSH
29115: LD_EXP 90
29119: PUSH
29120: LD_VAR 0 4
29124: ARRAY
29125: PPUSH
29126: LD_VAR 0 3
29130: PPUSH
29131: CALL_OW 3
29135: PPUSH
29136: CALL_OW 1
29140: ST_TO_ADDR
// end ; end ;
29141: GO 28970
29143: POP
29144: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
29145: LD_VAR 0 1
29149: PPUSH
29150: LD_EXP 90
29154: PUSH
29155: LD_VAR 0 4
29159: ARRAY
29160: PUSH
29161: LD_INT 0
29163: PLUS
29164: PPUSH
29165: CALL_OW 505
// end ;
29169: LD_VAR 0 2
29173: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
29174: LD_INT 0
29176: PPUSH
29177: PPUSH
29178: PPUSH
29179: PPUSH
// if not hack in hackTanks then
29180: LD_VAR 0 1
29184: PUSH
29185: LD_EXP 89
29189: IN
29190: NOT
29191: IFFALSE 29195
// exit ;
29193: GO 29280
// index := GetElementIndex ( hackTanks , hack ) ;
29195: LD_ADDR_VAR 0 5
29199: PUSH
29200: LD_EXP 89
29204: PPUSH
29205: LD_VAR 0 1
29209: PPUSH
29210: CALL 36038 0 2
29214: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
29215: LD_ADDR_VAR 0 4
29219: PUSH
29220: DOUBLE
29221: LD_INT 1
29223: DEC
29224: ST_TO_ADDR
29225: LD_EXP 90
29229: PUSH
29230: LD_VAR 0 5
29234: ARRAY
29235: PUSH
29236: FOR_TO
29237: IFFALSE 29278
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
29239: LD_EXP 90
29243: PUSH
29244: LD_VAR 0 5
29248: ARRAY
29249: PUSH
29250: LD_VAR 0 4
29254: ARRAY
29255: PUSH
29256: LD_INT 1
29258: ARRAY
29259: PUSH
29260: LD_VAR 0 2
29264: EQUAL
29265: IFFALSE 29276
// KillUnit ( vehicle ) ;
29267: LD_VAR 0 2
29271: PPUSH
29272: CALL_OW 66
29276: GO 29236
29278: POP
29279: POP
// end ;
29280: LD_VAR 0 3
29284: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
29285: LD_EXP 94
29289: NOT
29290: IFFALSE 29325
29292: GO 29294
29294: DISABLE
// begin initMiner := true ;
29295: LD_ADDR_EXP 94
29299: PUSH
29300: LD_INT 1
29302: ST_TO_ADDR
// minersList := [ ] ;
29303: LD_ADDR_EXP 95
29307: PUSH
29308: EMPTY
29309: ST_TO_ADDR
// minerMinesList := [ ] ;
29310: LD_ADDR_EXP 96
29314: PUSH
29315: EMPTY
29316: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
29317: LD_ADDR_EXP 97
29321: PUSH
29322: LD_INT 5
29324: ST_TO_ADDR
// end ;
29325: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
29326: LD_EXP 94
29330: PUSH
29331: LD_INT 34
29333: PUSH
29334: LD_INT 81
29336: PUSH
29337: EMPTY
29338: LIST
29339: LIST
29340: PPUSH
29341: CALL_OW 69
29345: AND
29346: IFFALSE 29807
29348: GO 29350
29350: DISABLE
29351: LD_INT 0
29353: PPUSH
29354: PPUSH
29355: PPUSH
29356: PPUSH
// begin enable ;
29357: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
29358: LD_ADDR_VAR 0 1
29362: PUSH
29363: LD_INT 34
29365: PUSH
29366: LD_INT 81
29368: PUSH
29369: EMPTY
29370: LIST
29371: LIST
29372: PPUSH
29373: CALL_OW 69
29377: PUSH
29378: FOR_IN
29379: IFFALSE 29451
// begin if not i in minersList then
29381: LD_VAR 0 1
29385: PUSH
29386: LD_EXP 95
29390: IN
29391: NOT
29392: IFFALSE 29449
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
29394: LD_ADDR_EXP 95
29398: PUSH
29399: LD_EXP 95
29403: PPUSH
29404: LD_EXP 95
29408: PUSH
29409: LD_INT 1
29411: PLUS
29412: PPUSH
29413: LD_VAR 0 1
29417: PPUSH
29418: CALL_OW 1
29422: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
29423: LD_ADDR_EXP 96
29427: PUSH
29428: LD_EXP 96
29432: PPUSH
29433: LD_EXP 96
29437: PUSH
29438: LD_INT 1
29440: PLUS
29441: PPUSH
29442: EMPTY
29443: PPUSH
29444: CALL_OW 1
29448: ST_TO_ADDR
// end end ;
29449: GO 29378
29451: POP
29452: POP
// for i := minerMinesList downto 1 do
29453: LD_ADDR_VAR 0 1
29457: PUSH
29458: DOUBLE
29459: LD_EXP 96
29463: INC
29464: ST_TO_ADDR
29465: LD_INT 1
29467: PUSH
29468: FOR_DOWNTO
29469: IFFALSE 29805
// begin if IsLive ( minersList [ i ] ) then
29471: LD_EXP 95
29475: PUSH
29476: LD_VAR 0 1
29480: ARRAY
29481: PPUSH
29482: CALL_OW 300
29486: IFFALSE 29514
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
29488: LD_EXP 95
29492: PUSH
29493: LD_VAR 0 1
29497: ARRAY
29498: PPUSH
29499: LD_EXP 96
29503: PUSH
29504: LD_VAR 0 1
29508: ARRAY
29509: PPUSH
29510: CALL_OW 505
// if not minerMinesList [ i ] then
29514: LD_EXP 96
29518: PUSH
29519: LD_VAR 0 1
29523: ARRAY
29524: NOT
29525: IFFALSE 29529
// continue ;
29527: GO 29468
// for j := minerMinesList [ i ] downto 1 do
29529: LD_ADDR_VAR 0 2
29533: PUSH
29534: DOUBLE
29535: LD_EXP 96
29539: PUSH
29540: LD_VAR 0 1
29544: ARRAY
29545: INC
29546: ST_TO_ADDR
29547: LD_INT 1
29549: PUSH
29550: FOR_DOWNTO
29551: IFFALSE 29801
// begin side := GetSide ( minersList [ i ] ) ;
29553: LD_ADDR_VAR 0 3
29557: PUSH
29558: LD_EXP 95
29562: PUSH
29563: LD_VAR 0 1
29567: ARRAY
29568: PPUSH
29569: CALL_OW 255
29573: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
29574: LD_ADDR_VAR 0 4
29578: PUSH
29579: LD_EXP 96
29583: PUSH
29584: LD_VAR 0 1
29588: ARRAY
29589: PUSH
29590: LD_VAR 0 2
29594: ARRAY
29595: PUSH
29596: LD_INT 1
29598: ARRAY
29599: PPUSH
29600: LD_EXP 96
29604: PUSH
29605: LD_VAR 0 1
29609: ARRAY
29610: PUSH
29611: LD_VAR 0 2
29615: ARRAY
29616: PUSH
29617: LD_INT 2
29619: ARRAY
29620: PPUSH
29621: CALL_OW 428
29625: ST_TO_ADDR
// if not tmp then
29626: LD_VAR 0 4
29630: NOT
29631: IFFALSE 29635
// continue ;
29633: GO 29550
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
29635: LD_VAR 0 4
29639: PUSH
29640: LD_INT 81
29642: PUSH
29643: LD_VAR 0 3
29647: PUSH
29648: EMPTY
29649: LIST
29650: LIST
29651: PPUSH
29652: CALL_OW 69
29656: IN
29657: PUSH
29658: LD_EXP 96
29662: PUSH
29663: LD_VAR 0 1
29667: ARRAY
29668: PUSH
29669: LD_VAR 0 2
29673: ARRAY
29674: PUSH
29675: LD_INT 1
29677: ARRAY
29678: PPUSH
29679: LD_EXP 96
29683: PUSH
29684: LD_VAR 0 1
29688: ARRAY
29689: PUSH
29690: LD_VAR 0 2
29694: ARRAY
29695: PUSH
29696: LD_INT 2
29698: ARRAY
29699: PPUSH
29700: CALL_OW 458
29704: AND
29705: IFFALSE 29799
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
29707: LD_EXP 96
29711: PUSH
29712: LD_VAR 0 1
29716: ARRAY
29717: PUSH
29718: LD_VAR 0 2
29722: ARRAY
29723: PUSH
29724: LD_INT 1
29726: ARRAY
29727: PPUSH
29728: LD_EXP 96
29732: PUSH
29733: LD_VAR 0 1
29737: ARRAY
29738: PUSH
29739: LD_VAR 0 2
29743: ARRAY
29744: PUSH
29745: LD_INT 2
29747: ARRAY
29748: PPUSH
29749: LD_VAR 0 3
29753: PPUSH
29754: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
29758: LD_ADDR_EXP 96
29762: PUSH
29763: LD_EXP 96
29767: PPUSH
29768: LD_VAR 0 1
29772: PPUSH
29773: LD_EXP 96
29777: PUSH
29778: LD_VAR 0 1
29782: ARRAY
29783: PPUSH
29784: LD_VAR 0 2
29788: PPUSH
29789: CALL_OW 3
29793: PPUSH
29794: CALL_OW 1
29798: ST_TO_ADDR
// end ; end ;
29799: GO 29550
29801: POP
29802: POP
// end ;
29803: GO 29468
29805: POP
29806: POP
// end ;
29807: PPOPN 4
29809: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
29810: LD_INT 0
29812: PPUSH
29813: PPUSH
// result := false ;
29814: LD_ADDR_VAR 0 4
29818: PUSH
29819: LD_INT 0
29821: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
29822: LD_VAR 0 1
29826: PPUSH
29827: CALL_OW 264
29831: PUSH
29832: LD_INT 81
29834: EQUAL
29835: NOT
29836: IFFALSE 29840
// exit ;
29838: GO 30080
// index := GetElementIndex ( minersList , unit ) ;
29840: LD_ADDR_VAR 0 5
29844: PUSH
29845: LD_EXP 95
29849: PPUSH
29850: LD_VAR 0 1
29854: PPUSH
29855: CALL 36038 0 2
29859: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
29860: LD_EXP 96
29864: PUSH
29865: LD_VAR 0 5
29869: ARRAY
29870: PUSH
29871: LD_EXP 97
29875: GREATEREQUAL
29876: IFFALSE 29880
// exit ;
29878: GO 30080
// ComMoveXY ( unit , x , y ) ;
29880: LD_VAR 0 1
29884: PPUSH
29885: LD_VAR 0 2
29889: PPUSH
29890: LD_VAR 0 3
29894: PPUSH
29895: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
29899: LD_INT 35
29901: PPUSH
29902: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
29906: LD_VAR 0 1
29910: PPUSH
29911: LD_VAR 0 2
29915: PPUSH
29916: LD_VAR 0 3
29920: PPUSH
29921: CALL 67422 0 3
29925: NOT
29926: PUSH
29927: LD_VAR 0 1
29931: PPUSH
29932: CALL_OW 314
29936: AND
29937: IFFALSE 29941
// exit ;
29939: GO 30080
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
29941: LD_VAR 0 2
29945: PPUSH
29946: LD_VAR 0 3
29950: PPUSH
29951: CALL_OW 428
29955: PUSH
29956: LD_VAR 0 1
29960: EQUAL
29961: PUSH
29962: LD_VAR 0 1
29966: PPUSH
29967: CALL_OW 314
29971: NOT
29972: AND
29973: IFFALSE 29899
// PlaySoundXY ( x , y , PlantMine ) ;
29975: LD_VAR 0 2
29979: PPUSH
29980: LD_VAR 0 3
29984: PPUSH
29985: LD_STRING PlantMine
29987: PPUSH
29988: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
29992: LD_VAR 0 2
29996: PPUSH
29997: LD_VAR 0 3
30001: PPUSH
30002: LD_VAR 0 1
30006: PPUSH
30007: CALL_OW 255
30011: PPUSH
30012: LD_INT 0
30014: PPUSH
30015: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
30019: LD_ADDR_EXP 96
30023: PUSH
30024: LD_EXP 96
30028: PPUSH
30029: LD_VAR 0 5
30033: PUSH
30034: LD_EXP 96
30038: PUSH
30039: LD_VAR 0 5
30043: ARRAY
30044: PUSH
30045: LD_INT 1
30047: PLUS
30048: PUSH
30049: EMPTY
30050: LIST
30051: LIST
30052: PPUSH
30053: LD_VAR 0 2
30057: PUSH
30058: LD_VAR 0 3
30062: PUSH
30063: EMPTY
30064: LIST
30065: LIST
30066: PPUSH
30067: CALL 36253 0 3
30071: ST_TO_ADDR
// result := true ;
30072: LD_ADDR_VAR 0 4
30076: PUSH
30077: LD_INT 1
30079: ST_TO_ADDR
// end ;
30080: LD_VAR 0 4
30084: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
30085: LD_INT 0
30087: PPUSH
30088: PPUSH
30089: PPUSH
// if not unit in minersList then
30090: LD_VAR 0 1
30094: PUSH
30095: LD_EXP 95
30099: IN
30100: NOT
30101: IFFALSE 30105
// exit ;
30103: GO 30497
// index := GetElementIndex ( minersList , unit ) ;
30105: LD_ADDR_VAR 0 6
30109: PUSH
30110: LD_EXP 95
30114: PPUSH
30115: LD_VAR 0 1
30119: PPUSH
30120: CALL 36038 0 2
30124: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
30125: LD_ADDR_VAR 0 5
30129: PUSH
30130: DOUBLE
30131: LD_EXP 96
30135: PUSH
30136: LD_VAR 0 6
30140: ARRAY
30141: INC
30142: ST_TO_ADDR
30143: LD_INT 1
30145: PUSH
30146: FOR_DOWNTO
30147: IFFALSE 30308
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
30149: LD_EXP 96
30153: PUSH
30154: LD_VAR 0 6
30158: ARRAY
30159: PUSH
30160: LD_VAR 0 5
30164: ARRAY
30165: PUSH
30166: LD_INT 1
30168: ARRAY
30169: PUSH
30170: LD_VAR 0 2
30174: EQUAL
30175: PUSH
30176: LD_EXP 96
30180: PUSH
30181: LD_VAR 0 6
30185: ARRAY
30186: PUSH
30187: LD_VAR 0 5
30191: ARRAY
30192: PUSH
30193: LD_INT 2
30195: ARRAY
30196: PUSH
30197: LD_VAR 0 3
30201: EQUAL
30202: AND
30203: IFFALSE 30306
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
30205: LD_EXP 96
30209: PUSH
30210: LD_VAR 0 6
30214: ARRAY
30215: PUSH
30216: LD_VAR 0 5
30220: ARRAY
30221: PUSH
30222: LD_INT 1
30224: ARRAY
30225: PPUSH
30226: LD_EXP 96
30230: PUSH
30231: LD_VAR 0 6
30235: ARRAY
30236: PUSH
30237: LD_VAR 0 5
30241: ARRAY
30242: PUSH
30243: LD_INT 2
30245: ARRAY
30246: PPUSH
30247: LD_VAR 0 1
30251: PPUSH
30252: CALL_OW 255
30256: PPUSH
30257: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
30261: LD_ADDR_EXP 96
30265: PUSH
30266: LD_EXP 96
30270: PPUSH
30271: LD_VAR 0 6
30275: PPUSH
30276: LD_EXP 96
30280: PUSH
30281: LD_VAR 0 6
30285: ARRAY
30286: PPUSH
30287: LD_VAR 0 5
30291: PPUSH
30292: CALL_OW 3
30296: PPUSH
30297: CALL_OW 1
30301: ST_TO_ADDR
// exit ;
30302: POP
30303: POP
30304: GO 30497
// end ; end ;
30306: GO 30146
30308: POP
30309: POP
// for i := minerMinesList [ index ] downto 1 do
30310: LD_ADDR_VAR 0 5
30314: PUSH
30315: DOUBLE
30316: LD_EXP 96
30320: PUSH
30321: LD_VAR 0 6
30325: ARRAY
30326: INC
30327: ST_TO_ADDR
30328: LD_INT 1
30330: PUSH
30331: FOR_DOWNTO
30332: IFFALSE 30495
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
30334: LD_EXP 96
30338: PUSH
30339: LD_VAR 0 6
30343: ARRAY
30344: PUSH
30345: LD_VAR 0 5
30349: ARRAY
30350: PUSH
30351: LD_INT 1
30353: ARRAY
30354: PPUSH
30355: LD_EXP 96
30359: PUSH
30360: LD_VAR 0 6
30364: ARRAY
30365: PUSH
30366: LD_VAR 0 5
30370: ARRAY
30371: PUSH
30372: LD_INT 2
30374: ARRAY
30375: PPUSH
30376: LD_VAR 0 2
30380: PPUSH
30381: LD_VAR 0 3
30385: PPUSH
30386: CALL_OW 298
30390: PUSH
30391: LD_INT 6
30393: LESS
30394: IFFALSE 30493
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
30396: LD_EXP 96
30400: PUSH
30401: LD_VAR 0 6
30405: ARRAY
30406: PUSH
30407: LD_VAR 0 5
30411: ARRAY
30412: PUSH
30413: LD_INT 1
30415: ARRAY
30416: PPUSH
30417: LD_EXP 96
30421: PUSH
30422: LD_VAR 0 6
30426: ARRAY
30427: PUSH
30428: LD_VAR 0 5
30432: ARRAY
30433: PUSH
30434: LD_INT 2
30436: ARRAY
30437: PPUSH
30438: LD_VAR 0 1
30442: PPUSH
30443: CALL_OW 255
30447: PPUSH
30448: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
30452: LD_ADDR_EXP 96
30456: PUSH
30457: LD_EXP 96
30461: PPUSH
30462: LD_VAR 0 6
30466: PPUSH
30467: LD_EXP 96
30471: PUSH
30472: LD_VAR 0 6
30476: ARRAY
30477: PPUSH
30478: LD_VAR 0 5
30482: PPUSH
30483: CALL_OW 3
30487: PPUSH
30488: CALL_OW 1
30492: ST_TO_ADDR
// end ; end ;
30493: GO 30331
30495: POP
30496: POP
// end ;
30497: LD_VAR 0 4
30501: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
30502: LD_INT 0
30504: PPUSH
30505: PPUSH
30506: PPUSH
30507: PPUSH
30508: PPUSH
30509: PPUSH
30510: PPUSH
30511: PPUSH
30512: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
30513: LD_VAR 0 1
30517: PPUSH
30518: CALL_OW 264
30522: PUSH
30523: LD_INT 81
30525: EQUAL
30526: NOT
30527: PUSH
30528: LD_VAR 0 1
30532: PUSH
30533: LD_EXP 95
30537: IN
30538: NOT
30539: OR
30540: IFFALSE 30544
// exit ;
30542: GO 30866
// index := GetElementIndex ( minersList , unit ) ;
30544: LD_ADDR_VAR 0 6
30548: PUSH
30549: LD_EXP 95
30553: PPUSH
30554: LD_VAR 0 1
30558: PPUSH
30559: CALL 36038 0 2
30563: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
30564: LD_ADDR_VAR 0 8
30568: PUSH
30569: LD_EXP 97
30573: PUSH
30574: LD_EXP 96
30578: PUSH
30579: LD_VAR 0 6
30583: ARRAY
30584: MINUS
30585: ST_TO_ADDR
// if not minesFreeAmount then
30586: LD_VAR 0 8
30590: NOT
30591: IFFALSE 30595
// exit ;
30593: GO 30866
// tmp := [ ] ;
30595: LD_ADDR_VAR 0 7
30599: PUSH
30600: EMPTY
30601: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
30602: LD_ADDR_VAR 0 5
30606: PUSH
30607: DOUBLE
30608: LD_INT 1
30610: DEC
30611: ST_TO_ADDR
30612: LD_VAR 0 8
30616: PUSH
30617: FOR_TO
30618: IFFALSE 30813
// begin _d := rand ( 0 , 5 ) ;
30620: LD_ADDR_VAR 0 11
30624: PUSH
30625: LD_INT 0
30627: PPUSH
30628: LD_INT 5
30630: PPUSH
30631: CALL_OW 12
30635: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
30636: LD_ADDR_VAR 0 12
30640: PUSH
30641: LD_INT 2
30643: PPUSH
30644: LD_INT 6
30646: PPUSH
30647: CALL_OW 12
30651: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
30652: LD_ADDR_VAR 0 9
30656: PUSH
30657: LD_VAR 0 2
30661: PPUSH
30662: LD_VAR 0 11
30666: PPUSH
30667: LD_VAR 0 12
30671: PPUSH
30672: CALL_OW 272
30676: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
30677: LD_ADDR_VAR 0 10
30681: PUSH
30682: LD_VAR 0 3
30686: PPUSH
30687: LD_VAR 0 11
30691: PPUSH
30692: LD_VAR 0 12
30696: PPUSH
30697: CALL_OW 273
30701: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
30702: LD_VAR 0 9
30706: PPUSH
30707: LD_VAR 0 10
30711: PPUSH
30712: CALL_OW 488
30716: PUSH
30717: LD_VAR 0 9
30721: PUSH
30722: LD_VAR 0 10
30726: PUSH
30727: EMPTY
30728: LIST
30729: LIST
30730: PUSH
30731: LD_VAR 0 7
30735: IN
30736: NOT
30737: AND
30738: PUSH
30739: LD_VAR 0 9
30743: PPUSH
30744: LD_VAR 0 10
30748: PPUSH
30749: CALL_OW 458
30753: NOT
30754: AND
30755: IFFALSE 30797
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
30757: LD_ADDR_VAR 0 7
30761: PUSH
30762: LD_VAR 0 7
30766: PPUSH
30767: LD_VAR 0 7
30771: PUSH
30772: LD_INT 1
30774: PLUS
30775: PPUSH
30776: LD_VAR 0 9
30780: PUSH
30781: LD_VAR 0 10
30785: PUSH
30786: EMPTY
30787: LIST
30788: LIST
30789: PPUSH
30790: CALL_OW 1
30794: ST_TO_ADDR
30795: GO 30811
// i := i - 1 ;
30797: LD_ADDR_VAR 0 5
30801: PUSH
30802: LD_VAR 0 5
30806: PUSH
30807: LD_INT 1
30809: MINUS
30810: ST_TO_ADDR
// end ;
30811: GO 30617
30813: POP
30814: POP
// for i in tmp do
30815: LD_ADDR_VAR 0 5
30819: PUSH
30820: LD_VAR 0 7
30824: PUSH
30825: FOR_IN
30826: IFFALSE 30864
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
30828: LD_VAR 0 1
30832: PPUSH
30833: LD_VAR 0 5
30837: PUSH
30838: LD_INT 1
30840: ARRAY
30841: PPUSH
30842: LD_VAR 0 5
30846: PUSH
30847: LD_INT 2
30849: ARRAY
30850: PPUSH
30851: CALL 29810 0 3
30855: NOT
30856: IFFALSE 30862
// exit ;
30858: POP
30859: POP
30860: GO 30866
30862: GO 30825
30864: POP
30865: POP
// end ;
30866: LD_VAR 0 4
30870: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
30871: LD_INT 0
30873: PPUSH
30874: PPUSH
30875: PPUSH
30876: PPUSH
30877: PPUSH
30878: PPUSH
30879: PPUSH
// if not GetClass ( unit ) = class_sniper then
30880: LD_VAR 0 1
30884: PPUSH
30885: CALL_OW 257
30889: PUSH
30890: LD_INT 5
30892: EQUAL
30893: NOT
30894: IFFALSE 30898
// exit ;
30896: GO 31286
// dist := 8 ;
30898: LD_ADDR_VAR 0 5
30902: PUSH
30903: LD_INT 8
30905: ST_TO_ADDR
// viewRange := 12 ;
30906: LD_ADDR_VAR 0 7
30910: PUSH
30911: LD_INT 12
30913: ST_TO_ADDR
// side := GetSide ( unit ) ;
30914: LD_ADDR_VAR 0 6
30918: PUSH
30919: LD_VAR 0 1
30923: PPUSH
30924: CALL_OW 255
30928: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
30929: LD_INT 61
30931: PPUSH
30932: LD_VAR 0 6
30936: PPUSH
30937: CALL_OW 321
30941: PUSH
30942: LD_INT 2
30944: EQUAL
30945: IFFALSE 30955
// viewRange := 16 ;
30947: LD_ADDR_VAR 0 7
30951: PUSH
30952: LD_INT 16
30954: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
30955: LD_VAR 0 1
30959: PPUSH
30960: LD_VAR 0 2
30964: PPUSH
30965: LD_VAR 0 3
30969: PPUSH
30970: CALL_OW 297
30974: PUSH
30975: LD_VAR 0 5
30979: GREATER
30980: IFFALSE 31059
// begin ComMoveXY ( unit , x , y ) ;
30982: LD_VAR 0 1
30986: PPUSH
30987: LD_VAR 0 2
30991: PPUSH
30992: LD_VAR 0 3
30996: PPUSH
30997: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
31001: LD_INT 35
31003: PPUSH
31004: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
31008: LD_VAR 0 1
31012: PPUSH
31013: LD_VAR 0 2
31017: PPUSH
31018: LD_VAR 0 3
31022: PPUSH
31023: CALL 67422 0 3
31027: NOT
31028: IFFALSE 31032
// exit ;
31030: GO 31286
// until GetDistUnitXY ( unit , x , y ) < dist ;
31032: LD_VAR 0 1
31036: PPUSH
31037: LD_VAR 0 2
31041: PPUSH
31042: LD_VAR 0 3
31046: PPUSH
31047: CALL_OW 297
31051: PUSH
31052: LD_VAR 0 5
31056: LESS
31057: IFFALSE 31001
// end ; ComTurnXY ( unit , x , y ) ;
31059: LD_VAR 0 1
31063: PPUSH
31064: LD_VAR 0 2
31068: PPUSH
31069: LD_VAR 0 3
31073: PPUSH
31074: CALL_OW 118
// wait ( 5 ) ;
31078: LD_INT 5
31080: PPUSH
31081: CALL_OW 67
// _d := GetDir ( unit ) ;
31085: LD_ADDR_VAR 0 10
31089: PUSH
31090: LD_VAR 0 1
31094: PPUSH
31095: CALL_OW 254
31099: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
31100: LD_ADDR_VAR 0 8
31104: PUSH
31105: LD_VAR 0 1
31109: PPUSH
31110: CALL_OW 250
31114: PPUSH
31115: LD_VAR 0 10
31119: PPUSH
31120: LD_VAR 0 5
31124: PPUSH
31125: CALL_OW 272
31129: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
31130: LD_ADDR_VAR 0 9
31134: PUSH
31135: LD_VAR 0 1
31139: PPUSH
31140: CALL_OW 251
31144: PPUSH
31145: LD_VAR 0 10
31149: PPUSH
31150: LD_VAR 0 5
31154: PPUSH
31155: CALL_OW 273
31159: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31160: LD_VAR 0 8
31164: PPUSH
31165: LD_VAR 0 9
31169: PPUSH
31170: CALL_OW 488
31174: NOT
31175: IFFALSE 31179
// exit ;
31177: GO 31286
// ComAnimCustom ( unit , 1 ) ;
31179: LD_VAR 0 1
31183: PPUSH
31184: LD_INT 1
31186: PPUSH
31187: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
31191: LD_VAR 0 8
31195: PPUSH
31196: LD_VAR 0 9
31200: PPUSH
31201: LD_VAR 0 6
31205: PPUSH
31206: LD_VAR 0 7
31210: PPUSH
31211: CALL_OW 330
// repeat wait ( 1 ) ;
31215: LD_INT 1
31217: PPUSH
31218: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
31222: LD_VAR 0 1
31226: PPUSH
31227: CALL_OW 316
31231: PUSH
31232: LD_VAR 0 1
31236: PPUSH
31237: CALL_OW 314
31241: OR
31242: PUSH
31243: LD_VAR 0 1
31247: PPUSH
31248: CALL_OW 302
31252: NOT
31253: OR
31254: PUSH
31255: LD_VAR 0 1
31259: PPUSH
31260: CALL_OW 301
31264: OR
31265: IFFALSE 31215
// RemoveSeeing ( _x , _y , side ) ;
31267: LD_VAR 0 8
31271: PPUSH
31272: LD_VAR 0 9
31276: PPUSH
31277: LD_VAR 0 6
31281: PPUSH
31282: CALL_OW 331
// end ; end_of_file
31286: LD_VAR 0 4
31290: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
31291: LD_INT 0
31293: PPUSH
31294: PPUSH
// if exist_mode then
31295: LD_VAR 0 2
31299: IFFALSE 31324
// unit := CreateCharacter ( prefix & ident ) else
31301: LD_ADDR_VAR 0 5
31305: PUSH
31306: LD_VAR 0 3
31310: PUSH
31311: LD_VAR 0 1
31315: STR
31316: PPUSH
31317: CALL_OW 34
31321: ST_TO_ADDR
31322: GO 31339
// unit := NewCharacter ( ident ) ;
31324: LD_ADDR_VAR 0 5
31328: PUSH
31329: LD_VAR 0 1
31333: PPUSH
31334: CALL_OW 25
31338: ST_TO_ADDR
// result := unit ;
31339: LD_ADDR_VAR 0 4
31343: PUSH
31344: LD_VAR 0 5
31348: ST_TO_ADDR
// end ;
31349: LD_VAR 0 4
31353: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
31354: LD_INT 0
31356: PPUSH
31357: PPUSH
// if not side or not nation then
31358: LD_VAR 0 1
31362: NOT
31363: PUSH
31364: LD_VAR 0 2
31368: NOT
31369: OR
31370: IFFALSE 31374
// exit ;
31372: GO 32142
// case nation of nation_american :
31374: LD_VAR 0 2
31378: PUSH
31379: LD_INT 1
31381: DOUBLE
31382: EQUAL
31383: IFTRUE 31387
31385: GO 31601
31387: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
31388: LD_ADDR_VAR 0 4
31392: PUSH
31393: LD_INT 35
31395: PUSH
31396: LD_INT 45
31398: PUSH
31399: LD_INT 46
31401: PUSH
31402: LD_INT 47
31404: PUSH
31405: LD_INT 82
31407: PUSH
31408: LD_INT 83
31410: PUSH
31411: LD_INT 84
31413: PUSH
31414: LD_INT 85
31416: PUSH
31417: LD_INT 86
31419: PUSH
31420: LD_INT 1
31422: PUSH
31423: LD_INT 2
31425: PUSH
31426: LD_INT 6
31428: PUSH
31429: LD_INT 15
31431: PUSH
31432: LD_INT 16
31434: PUSH
31435: LD_INT 7
31437: PUSH
31438: LD_INT 12
31440: PUSH
31441: LD_INT 13
31443: PUSH
31444: LD_INT 10
31446: PUSH
31447: LD_INT 14
31449: PUSH
31450: LD_INT 20
31452: PUSH
31453: LD_INT 21
31455: PUSH
31456: LD_INT 22
31458: PUSH
31459: LD_INT 25
31461: PUSH
31462: LD_INT 32
31464: PUSH
31465: LD_INT 27
31467: PUSH
31468: LD_INT 36
31470: PUSH
31471: LD_INT 69
31473: PUSH
31474: LD_INT 39
31476: PUSH
31477: LD_INT 34
31479: PUSH
31480: LD_INT 40
31482: PUSH
31483: LD_INT 48
31485: PUSH
31486: LD_INT 49
31488: PUSH
31489: LD_INT 50
31491: PUSH
31492: LD_INT 51
31494: PUSH
31495: LD_INT 52
31497: PUSH
31498: LD_INT 53
31500: PUSH
31501: LD_INT 54
31503: PUSH
31504: LD_INT 55
31506: PUSH
31507: LD_INT 56
31509: PUSH
31510: LD_INT 57
31512: PUSH
31513: LD_INT 58
31515: PUSH
31516: LD_INT 59
31518: PUSH
31519: LD_INT 60
31521: PUSH
31522: LD_INT 61
31524: PUSH
31525: LD_INT 62
31527: PUSH
31528: LD_INT 80
31530: PUSH
31531: LD_INT 82
31533: PUSH
31534: LD_INT 83
31536: PUSH
31537: LD_INT 84
31539: PUSH
31540: LD_INT 85
31542: PUSH
31543: LD_INT 86
31545: PUSH
31546: EMPTY
31547: LIST
31548: LIST
31549: LIST
31550: LIST
31551: LIST
31552: LIST
31553: LIST
31554: LIST
31555: LIST
31556: LIST
31557: LIST
31558: LIST
31559: LIST
31560: LIST
31561: LIST
31562: LIST
31563: LIST
31564: LIST
31565: LIST
31566: LIST
31567: LIST
31568: LIST
31569: LIST
31570: LIST
31571: LIST
31572: LIST
31573: LIST
31574: LIST
31575: LIST
31576: LIST
31577: LIST
31578: LIST
31579: LIST
31580: LIST
31581: LIST
31582: LIST
31583: LIST
31584: LIST
31585: LIST
31586: LIST
31587: LIST
31588: LIST
31589: LIST
31590: LIST
31591: LIST
31592: LIST
31593: LIST
31594: LIST
31595: LIST
31596: LIST
31597: LIST
31598: ST_TO_ADDR
31599: GO 32066
31601: LD_INT 2
31603: DOUBLE
31604: EQUAL
31605: IFTRUE 31609
31607: GO 31835
31609: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
31610: LD_ADDR_VAR 0 4
31614: PUSH
31615: LD_INT 35
31617: PUSH
31618: LD_INT 45
31620: PUSH
31621: LD_INT 46
31623: PUSH
31624: LD_INT 47
31626: PUSH
31627: LD_INT 82
31629: PUSH
31630: LD_INT 83
31632: PUSH
31633: LD_INT 84
31635: PUSH
31636: LD_INT 85
31638: PUSH
31639: LD_INT 87
31641: PUSH
31642: LD_INT 70
31644: PUSH
31645: LD_INT 1
31647: PUSH
31648: LD_INT 11
31650: PUSH
31651: LD_INT 3
31653: PUSH
31654: LD_INT 4
31656: PUSH
31657: LD_INT 5
31659: PUSH
31660: LD_INT 6
31662: PUSH
31663: LD_INT 15
31665: PUSH
31666: LD_INT 18
31668: PUSH
31669: LD_INT 7
31671: PUSH
31672: LD_INT 17
31674: PUSH
31675: LD_INT 8
31677: PUSH
31678: LD_INT 20
31680: PUSH
31681: LD_INT 21
31683: PUSH
31684: LD_INT 22
31686: PUSH
31687: LD_INT 72
31689: PUSH
31690: LD_INT 26
31692: PUSH
31693: LD_INT 69
31695: PUSH
31696: LD_INT 39
31698: PUSH
31699: LD_INT 40
31701: PUSH
31702: LD_INT 41
31704: PUSH
31705: LD_INT 42
31707: PUSH
31708: LD_INT 43
31710: PUSH
31711: LD_INT 48
31713: PUSH
31714: LD_INT 49
31716: PUSH
31717: LD_INT 50
31719: PUSH
31720: LD_INT 51
31722: PUSH
31723: LD_INT 52
31725: PUSH
31726: LD_INT 53
31728: PUSH
31729: LD_INT 54
31731: PUSH
31732: LD_INT 55
31734: PUSH
31735: LD_INT 56
31737: PUSH
31738: LD_INT 60
31740: PUSH
31741: LD_INT 61
31743: PUSH
31744: LD_INT 62
31746: PUSH
31747: LD_INT 66
31749: PUSH
31750: LD_INT 67
31752: PUSH
31753: LD_INT 68
31755: PUSH
31756: LD_INT 81
31758: PUSH
31759: LD_INT 82
31761: PUSH
31762: LD_INT 83
31764: PUSH
31765: LD_INT 84
31767: PUSH
31768: LD_INT 85
31770: PUSH
31771: LD_INT 87
31773: PUSH
31774: LD_INT 88
31776: PUSH
31777: EMPTY
31778: LIST
31779: LIST
31780: LIST
31781: LIST
31782: LIST
31783: LIST
31784: LIST
31785: LIST
31786: LIST
31787: LIST
31788: LIST
31789: LIST
31790: LIST
31791: LIST
31792: LIST
31793: LIST
31794: LIST
31795: LIST
31796: LIST
31797: LIST
31798: LIST
31799: LIST
31800: LIST
31801: LIST
31802: LIST
31803: LIST
31804: LIST
31805: LIST
31806: LIST
31807: LIST
31808: LIST
31809: LIST
31810: LIST
31811: LIST
31812: LIST
31813: LIST
31814: LIST
31815: LIST
31816: LIST
31817: LIST
31818: LIST
31819: LIST
31820: LIST
31821: LIST
31822: LIST
31823: LIST
31824: LIST
31825: LIST
31826: LIST
31827: LIST
31828: LIST
31829: LIST
31830: LIST
31831: LIST
31832: ST_TO_ADDR
31833: GO 32066
31835: LD_INT 3
31837: DOUBLE
31838: EQUAL
31839: IFTRUE 31843
31841: GO 32065
31843: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
31844: LD_ADDR_VAR 0 4
31848: PUSH
31849: LD_INT 46
31851: PUSH
31852: LD_INT 47
31854: PUSH
31855: LD_INT 1
31857: PUSH
31858: LD_INT 2
31860: PUSH
31861: LD_INT 82
31863: PUSH
31864: LD_INT 83
31866: PUSH
31867: LD_INT 84
31869: PUSH
31870: LD_INT 85
31872: PUSH
31873: LD_INT 86
31875: PUSH
31876: LD_INT 11
31878: PUSH
31879: LD_INT 9
31881: PUSH
31882: LD_INT 20
31884: PUSH
31885: LD_INT 19
31887: PUSH
31888: LD_INT 21
31890: PUSH
31891: LD_INT 24
31893: PUSH
31894: LD_INT 22
31896: PUSH
31897: LD_INT 25
31899: PUSH
31900: LD_INT 28
31902: PUSH
31903: LD_INT 29
31905: PUSH
31906: LD_INT 30
31908: PUSH
31909: LD_INT 31
31911: PUSH
31912: LD_INT 37
31914: PUSH
31915: LD_INT 38
31917: PUSH
31918: LD_INT 32
31920: PUSH
31921: LD_INT 27
31923: PUSH
31924: LD_INT 33
31926: PUSH
31927: LD_INT 69
31929: PUSH
31930: LD_INT 39
31932: PUSH
31933: LD_INT 34
31935: PUSH
31936: LD_INT 40
31938: PUSH
31939: LD_INT 71
31941: PUSH
31942: LD_INT 23
31944: PUSH
31945: LD_INT 44
31947: PUSH
31948: LD_INT 48
31950: PUSH
31951: LD_INT 49
31953: PUSH
31954: LD_INT 50
31956: PUSH
31957: LD_INT 51
31959: PUSH
31960: LD_INT 52
31962: PUSH
31963: LD_INT 53
31965: PUSH
31966: LD_INT 54
31968: PUSH
31969: LD_INT 55
31971: PUSH
31972: LD_INT 56
31974: PUSH
31975: LD_INT 57
31977: PUSH
31978: LD_INT 58
31980: PUSH
31981: LD_INT 59
31983: PUSH
31984: LD_INT 63
31986: PUSH
31987: LD_INT 64
31989: PUSH
31990: LD_INT 65
31992: PUSH
31993: LD_INT 82
31995: PUSH
31996: LD_INT 83
31998: PUSH
31999: LD_INT 84
32001: PUSH
32002: LD_INT 85
32004: PUSH
32005: LD_INT 86
32007: PUSH
32008: EMPTY
32009: LIST
32010: LIST
32011: LIST
32012: LIST
32013: LIST
32014: LIST
32015: LIST
32016: LIST
32017: LIST
32018: LIST
32019: LIST
32020: LIST
32021: LIST
32022: LIST
32023: LIST
32024: LIST
32025: LIST
32026: LIST
32027: LIST
32028: LIST
32029: LIST
32030: LIST
32031: LIST
32032: LIST
32033: LIST
32034: LIST
32035: LIST
32036: LIST
32037: LIST
32038: LIST
32039: LIST
32040: LIST
32041: LIST
32042: LIST
32043: LIST
32044: LIST
32045: LIST
32046: LIST
32047: LIST
32048: LIST
32049: LIST
32050: LIST
32051: LIST
32052: LIST
32053: LIST
32054: LIST
32055: LIST
32056: LIST
32057: LIST
32058: LIST
32059: LIST
32060: LIST
32061: LIST
32062: ST_TO_ADDR
32063: GO 32066
32065: POP
// if state > - 1 and state < 3 then
32066: LD_VAR 0 3
32070: PUSH
32071: LD_INT 1
32073: NEG
32074: GREATER
32075: PUSH
32076: LD_VAR 0 3
32080: PUSH
32081: LD_INT 3
32083: LESS
32084: AND
32085: IFFALSE 32142
// for i in result do
32087: LD_ADDR_VAR 0 5
32091: PUSH
32092: LD_VAR 0 4
32096: PUSH
32097: FOR_IN
32098: IFFALSE 32140
// if GetTech ( i , side ) <> state then
32100: LD_VAR 0 5
32104: PPUSH
32105: LD_VAR 0 1
32109: PPUSH
32110: CALL_OW 321
32114: PUSH
32115: LD_VAR 0 3
32119: NONEQUAL
32120: IFFALSE 32138
// result := result diff i ;
32122: LD_ADDR_VAR 0 4
32126: PUSH
32127: LD_VAR 0 4
32131: PUSH
32132: LD_VAR 0 5
32136: DIFF
32137: ST_TO_ADDR
32138: GO 32097
32140: POP
32141: POP
// end ;
32142: LD_VAR 0 4
32146: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
32147: LD_INT 0
32149: PPUSH
32150: PPUSH
32151: PPUSH
// result := true ;
32152: LD_ADDR_VAR 0 3
32156: PUSH
32157: LD_INT 1
32159: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
32160: LD_ADDR_VAR 0 5
32164: PUSH
32165: LD_VAR 0 2
32169: PPUSH
32170: CALL_OW 480
32174: ST_TO_ADDR
// if not tmp then
32175: LD_VAR 0 5
32179: NOT
32180: IFFALSE 32184
// exit ;
32182: GO 32233
// for i in tmp do
32184: LD_ADDR_VAR 0 4
32188: PUSH
32189: LD_VAR 0 5
32193: PUSH
32194: FOR_IN
32195: IFFALSE 32231
// if GetTech ( i , side ) <> state_researched then
32197: LD_VAR 0 4
32201: PPUSH
32202: LD_VAR 0 1
32206: PPUSH
32207: CALL_OW 321
32211: PUSH
32212: LD_INT 2
32214: NONEQUAL
32215: IFFALSE 32229
// begin result := false ;
32217: LD_ADDR_VAR 0 3
32221: PUSH
32222: LD_INT 0
32224: ST_TO_ADDR
// exit ;
32225: POP
32226: POP
32227: GO 32233
// end ;
32229: GO 32194
32231: POP
32232: POP
// end ;
32233: LD_VAR 0 3
32237: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
32238: LD_INT 0
32240: PPUSH
32241: PPUSH
32242: PPUSH
32243: PPUSH
32244: PPUSH
32245: PPUSH
32246: PPUSH
32247: PPUSH
32248: PPUSH
32249: PPUSH
32250: PPUSH
32251: PPUSH
32252: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
32253: LD_VAR 0 1
32257: NOT
32258: PUSH
32259: LD_VAR 0 1
32263: PPUSH
32264: CALL_OW 257
32268: PUSH
32269: LD_INT 9
32271: NONEQUAL
32272: OR
32273: IFFALSE 32277
// exit ;
32275: GO 32850
// side := GetSide ( unit ) ;
32277: LD_ADDR_VAR 0 9
32281: PUSH
32282: LD_VAR 0 1
32286: PPUSH
32287: CALL_OW 255
32291: ST_TO_ADDR
// tech_space := tech_spacanom ;
32292: LD_ADDR_VAR 0 12
32296: PUSH
32297: LD_INT 29
32299: ST_TO_ADDR
// tech_time := tech_taurad ;
32300: LD_ADDR_VAR 0 13
32304: PUSH
32305: LD_INT 28
32307: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
32308: LD_ADDR_VAR 0 11
32312: PUSH
32313: LD_VAR 0 1
32317: PPUSH
32318: CALL_OW 310
32322: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
32323: LD_VAR 0 11
32327: PPUSH
32328: CALL_OW 247
32332: PUSH
32333: LD_INT 2
32335: EQUAL
32336: IFFALSE 32340
// exit ;
32338: GO 32850
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32340: LD_ADDR_VAR 0 8
32344: PUSH
32345: LD_INT 81
32347: PUSH
32348: LD_VAR 0 9
32352: PUSH
32353: EMPTY
32354: LIST
32355: LIST
32356: PUSH
32357: LD_INT 3
32359: PUSH
32360: LD_INT 21
32362: PUSH
32363: LD_INT 3
32365: PUSH
32366: EMPTY
32367: LIST
32368: LIST
32369: PUSH
32370: EMPTY
32371: LIST
32372: LIST
32373: PUSH
32374: EMPTY
32375: LIST
32376: LIST
32377: PPUSH
32378: CALL_OW 69
32382: ST_TO_ADDR
// if not tmp then
32383: LD_VAR 0 8
32387: NOT
32388: IFFALSE 32392
// exit ;
32390: GO 32850
// if in_unit then
32392: LD_VAR 0 11
32396: IFFALSE 32420
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
32398: LD_ADDR_VAR 0 10
32402: PUSH
32403: LD_VAR 0 8
32407: PPUSH
32408: LD_VAR 0 11
32412: PPUSH
32413: CALL_OW 74
32417: ST_TO_ADDR
32418: GO 32440
// enemy := NearestUnitToUnit ( tmp , unit ) ;
32420: LD_ADDR_VAR 0 10
32424: PUSH
32425: LD_VAR 0 8
32429: PPUSH
32430: LD_VAR 0 1
32434: PPUSH
32435: CALL_OW 74
32439: ST_TO_ADDR
// if not enemy then
32440: LD_VAR 0 10
32444: NOT
32445: IFFALSE 32449
// exit ;
32447: GO 32850
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
32449: LD_VAR 0 11
32453: PUSH
32454: LD_VAR 0 11
32458: PPUSH
32459: LD_VAR 0 10
32463: PPUSH
32464: CALL_OW 296
32468: PUSH
32469: LD_INT 13
32471: GREATER
32472: AND
32473: PUSH
32474: LD_VAR 0 1
32478: PPUSH
32479: LD_VAR 0 10
32483: PPUSH
32484: CALL_OW 296
32488: PUSH
32489: LD_INT 12
32491: GREATER
32492: OR
32493: IFFALSE 32497
// exit ;
32495: GO 32850
// missile := [ 1 ] ;
32497: LD_ADDR_VAR 0 14
32501: PUSH
32502: LD_INT 1
32504: PUSH
32505: EMPTY
32506: LIST
32507: ST_TO_ADDR
// if Researched ( side , tech_space ) then
32508: LD_VAR 0 9
32512: PPUSH
32513: LD_VAR 0 12
32517: PPUSH
32518: CALL_OW 325
32522: IFFALSE 32551
// missile := Replace ( missile , missile + 1 , 2 ) ;
32524: LD_ADDR_VAR 0 14
32528: PUSH
32529: LD_VAR 0 14
32533: PPUSH
32534: LD_VAR 0 14
32538: PUSH
32539: LD_INT 1
32541: PLUS
32542: PPUSH
32543: LD_INT 2
32545: PPUSH
32546: CALL_OW 1
32550: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
32551: LD_VAR 0 9
32555: PPUSH
32556: LD_VAR 0 13
32560: PPUSH
32561: CALL_OW 325
32565: PUSH
32566: LD_VAR 0 10
32570: PPUSH
32571: CALL_OW 255
32575: PPUSH
32576: LD_VAR 0 13
32580: PPUSH
32581: CALL_OW 325
32585: NOT
32586: AND
32587: IFFALSE 32616
// missile := Replace ( missile , missile + 1 , 3 ) ;
32589: LD_ADDR_VAR 0 14
32593: PUSH
32594: LD_VAR 0 14
32598: PPUSH
32599: LD_VAR 0 14
32603: PUSH
32604: LD_INT 1
32606: PLUS
32607: PPUSH
32608: LD_INT 3
32610: PPUSH
32611: CALL_OW 1
32615: ST_TO_ADDR
// if missile < 2 then
32616: LD_VAR 0 14
32620: PUSH
32621: LD_INT 2
32623: LESS
32624: IFFALSE 32628
// exit ;
32626: GO 32850
// x := GetX ( enemy ) ;
32628: LD_ADDR_VAR 0 4
32632: PUSH
32633: LD_VAR 0 10
32637: PPUSH
32638: CALL_OW 250
32642: ST_TO_ADDR
// y := GetY ( enemy ) ;
32643: LD_ADDR_VAR 0 5
32647: PUSH
32648: LD_VAR 0 10
32652: PPUSH
32653: CALL_OW 251
32657: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
32658: LD_ADDR_VAR 0 6
32662: PUSH
32663: LD_VAR 0 4
32667: PUSH
32668: LD_INT 1
32670: NEG
32671: PPUSH
32672: LD_INT 1
32674: PPUSH
32675: CALL_OW 12
32679: PLUS
32680: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
32681: LD_ADDR_VAR 0 7
32685: PUSH
32686: LD_VAR 0 5
32690: PUSH
32691: LD_INT 1
32693: NEG
32694: PPUSH
32695: LD_INT 1
32697: PPUSH
32698: CALL_OW 12
32702: PLUS
32703: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32704: LD_VAR 0 6
32708: PPUSH
32709: LD_VAR 0 7
32713: PPUSH
32714: CALL_OW 488
32718: NOT
32719: IFFALSE 32741
// begin _x := x ;
32721: LD_ADDR_VAR 0 6
32725: PUSH
32726: LD_VAR 0 4
32730: ST_TO_ADDR
// _y := y ;
32731: LD_ADDR_VAR 0 7
32735: PUSH
32736: LD_VAR 0 5
32740: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
32741: LD_ADDR_VAR 0 3
32745: PUSH
32746: LD_INT 1
32748: PPUSH
32749: LD_VAR 0 14
32753: PPUSH
32754: CALL_OW 12
32758: ST_TO_ADDR
// case i of 1 :
32759: LD_VAR 0 3
32763: PUSH
32764: LD_INT 1
32766: DOUBLE
32767: EQUAL
32768: IFTRUE 32772
32770: GO 32789
32772: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
32773: LD_VAR 0 1
32777: PPUSH
32778: LD_VAR 0 10
32782: PPUSH
32783: CALL_OW 115
32787: GO 32850
32789: LD_INT 2
32791: DOUBLE
32792: EQUAL
32793: IFTRUE 32797
32795: GO 32819
32797: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
32798: LD_VAR 0 1
32802: PPUSH
32803: LD_VAR 0 6
32807: PPUSH
32808: LD_VAR 0 7
32812: PPUSH
32813: CALL_OW 153
32817: GO 32850
32819: LD_INT 3
32821: DOUBLE
32822: EQUAL
32823: IFTRUE 32827
32825: GO 32849
32827: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
32828: LD_VAR 0 1
32832: PPUSH
32833: LD_VAR 0 6
32837: PPUSH
32838: LD_VAR 0 7
32842: PPUSH
32843: CALL_OW 154
32847: GO 32850
32849: POP
// end ;
32850: LD_VAR 0 2
32854: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
32855: LD_INT 0
32857: PPUSH
32858: PPUSH
32859: PPUSH
32860: PPUSH
32861: PPUSH
32862: PPUSH
// if not unit or not building then
32863: LD_VAR 0 1
32867: NOT
32868: PUSH
32869: LD_VAR 0 2
32873: NOT
32874: OR
32875: IFFALSE 32879
// exit ;
32877: GO 33037
// x := GetX ( building ) ;
32879: LD_ADDR_VAR 0 5
32883: PUSH
32884: LD_VAR 0 2
32888: PPUSH
32889: CALL_OW 250
32893: ST_TO_ADDR
// y := GetY ( building ) ;
32894: LD_ADDR_VAR 0 6
32898: PUSH
32899: LD_VAR 0 2
32903: PPUSH
32904: CALL_OW 251
32908: ST_TO_ADDR
// for i = 0 to 5 do
32909: LD_ADDR_VAR 0 4
32913: PUSH
32914: DOUBLE
32915: LD_INT 0
32917: DEC
32918: ST_TO_ADDR
32919: LD_INT 5
32921: PUSH
32922: FOR_TO
32923: IFFALSE 33035
// begin _x := ShiftX ( x , i , 3 ) ;
32925: LD_ADDR_VAR 0 7
32929: PUSH
32930: LD_VAR 0 5
32934: PPUSH
32935: LD_VAR 0 4
32939: PPUSH
32940: LD_INT 3
32942: PPUSH
32943: CALL_OW 272
32947: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
32948: LD_ADDR_VAR 0 8
32952: PUSH
32953: LD_VAR 0 6
32957: PPUSH
32958: LD_VAR 0 4
32962: PPUSH
32963: LD_INT 3
32965: PPUSH
32966: CALL_OW 273
32970: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32971: LD_VAR 0 7
32975: PPUSH
32976: LD_VAR 0 8
32980: PPUSH
32981: CALL_OW 488
32985: NOT
32986: IFFALSE 32990
// continue ;
32988: GO 32922
// if HexInfo ( _x , _y ) = 0 then
32990: LD_VAR 0 7
32994: PPUSH
32995: LD_VAR 0 8
32999: PPUSH
33000: CALL_OW 428
33004: PUSH
33005: LD_INT 0
33007: EQUAL
33008: IFFALSE 33033
// begin ComMoveXY ( unit , _x , _y ) ;
33010: LD_VAR 0 1
33014: PPUSH
33015: LD_VAR 0 7
33019: PPUSH
33020: LD_VAR 0 8
33024: PPUSH
33025: CALL_OW 111
// exit ;
33029: POP
33030: POP
33031: GO 33037
// end ; end ;
33033: GO 32922
33035: POP
33036: POP
// end ;
33037: LD_VAR 0 3
33041: RET
// export function ScanBase ( side , base_area ) ; begin
33042: LD_INT 0
33044: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
33045: LD_ADDR_VAR 0 3
33049: PUSH
33050: LD_VAR 0 2
33054: PPUSH
33055: LD_INT 81
33057: PUSH
33058: LD_VAR 0 1
33062: PUSH
33063: EMPTY
33064: LIST
33065: LIST
33066: PPUSH
33067: CALL_OW 70
33071: ST_TO_ADDR
// end ;
33072: LD_VAR 0 3
33076: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
33077: LD_INT 0
33079: PPUSH
33080: PPUSH
33081: PPUSH
33082: PPUSH
// result := false ;
33083: LD_ADDR_VAR 0 2
33087: PUSH
33088: LD_INT 0
33090: ST_TO_ADDR
// side := GetSide ( unit ) ;
33091: LD_ADDR_VAR 0 3
33095: PUSH
33096: LD_VAR 0 1
33100: PPUSH
33101: CALL_OW 255
33105: ST_TO_ADDR
// nat := GetNation ( unit ) ;
33106: LD_ADDR_VAR 0 4
33110: PUSH
33111: LD_VAR 0 1
33115: PPUSH
33116: CALL_OW 248
33120: ST_TO_ADDR
// case nat of 1 :
33121: LD_VAR 0 4
33125: PUSH
33126: LD_INT 1
33128: DOUBLE
33129: EQUAL
33130: IFTRUE 33134
33132: GO 33145
33134: POP
// tech := tech_lassight ; 2 :
33135: LD_ADDR_VAR 0 5
33139: PUSH
33140: LD_INT 12
33142: ST_TO_ADDR
33143: GO 33184
33145: LD_INT 2
33147: DOUBLE
33148: EQUAL
33149: IFTRUE 33153
33151: GO 33164
33153: POP
// tech := tech_mortar ; 3 :
33154: LD_ADDR_VAR 0 5
33158: PUSH
33159: LD_INT 41
33161: ST_TO_ADDR
33162: GO 33184
33164: LD_INT 3
33166: DOUBLE
33167: EQUAL
33168: IFTRUE 33172
33170: GO 33183
33172: POP
// tech := tech_bazooka ; end ;
33173: LD_ADDR_VAR 0 5
33177: PUSH
33178: LD_INT 44
33180: ST_TO_ADDR
33181: GO 33184
33183: POP
// if Researched ( side , tech ) then
33184: LD_VAR 0 3
33188: PPUSH
33189: LD_VAR 0 5
33193: PPUSH
33194: CALL_OW 325
33198: IFFALSE 33225
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
33200: LD_ADDR_VAR 0 2
33204: PUSH
33205: LD_INT 5
33207: PUSH
33208: LD_INT 8
33210: PUSH
33211: LD_INT 9
33213: PUSH
33214: EMPTY
33215: LIST
33216: LIST
33217: LIST
33218: PUSH
33219: LD_VAR 0 4
33223: ARRAY
33224: ST_TO_ADDR
// end ;
33225: LD_VAR 0 2
33229: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
33230: LD_INT 0
33232: PPUSH
33233: PPUSH
33234: PPUSH
// if not mines then
33235: LD_VAR 0 2
33239: NOT
33240: IFFALSE 33244
// exit ;
33242: GO 33388
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33244: LD_ADDR_VAR 0 5
33248: PUSH
33249: LD_INT 81
33251: PUSH
33252: LD_VAR 0 1
33256: PUSH
33257: EMPTY
33258: LIST
33259: LIST
33260: PUSH
33261: LD_INT 3
33263: PUSH
33264: LD_INT 21
33266: PUSH
33267: LD_INT 3
33269: PUSH
33270: EMPTY
33271: LIST
33272: LIST
33273: PUSH
33274: EMPTY
33275: LIST
33276: LIST
33277: PUSH
33278: EMPTY
33279: LIST
33280: LIST
33281: PPUSH
33282: CALL_OW 69
33286: ST_TO_ADDR
// for i in mines do
33287: LD_ADDR_VAR 0 4
33291: PUSH
33292: LD_VAR 0 2
33296: PUSH
33297: FOR_IN
33298: IFFALSE 33386
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
33300: LD_VAR 0 4
33304: PUSH
33305: LD_INT 1
33307: ARRAY
33308: PPUSH
33309: LD_VAR 0 4
33313: PUSH
33314: LD_INT 2
33316: ARRAY
33317: PPUSH
33318: CALL_OW 458
33322: NOT
33323: IFFALSE 33327
// continue ;
33325: GO 33297
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
33327: LD_VAR 0 4
33331: PUSH
33332: LD_INT 1
33334: ARRAY
33335: PPUSH
33336: LD_VAR 0 4
33340: PUSH
33341: LD_INT 2
33343: ARRAY
33344: PPUSH
33345: CALL_OW 428
33349: PUSH
33350: LD_VAR 0 5
33354: IN
33355: IFFALSE 33384
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
33357: LD_VAR 0 4
33361: PUSH
33362: LD_INT 1
33364: ARRAY
33365: PPUSH
33366: LD_VAR 0 4
33370: PUSH
33371: LD_INT 2
33373: ARRAY
33374: PPUSH
33375: LD_VAR 0 1
33379: PPUSH
33380: CALL_OW 456
// end ;
33384: GO 33297
33386: POP
33387: POP
// end ;
33388: LD_VAR 0 3
33392: RET
// export function Count ( array ) ; begin
33393: LD_INT 0
33395: PPUSH
// result := array + 0 ;
33396: LD_ADDR_VAR 0 2
33400: PUSH
33401: LD_VAR 0 1
33405: PUSH
33406: LD_INT 0
33408: PLUS
33409: ST_TO_ADDR
// end ;
33410: LD_VAR 0 2
33414: RET
// export function IsEmpty ( building ) ; begin
33415: LD_INT 0
33417: PPUSH
// if not building then
33418: LD_VAR 0 1
33422: NOT
33423: IFFALSE 33427
// exit ;
33425: GO 33470
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
33427: LD_ADDR_VAR 0 2
33431: PUSH
33432: LD_VAR 0 1
33436: PUSH
33437: LD_INT 22
33439: PUSH
33440: LD_VAR 0 1
33444: PPUSH
33445: CALL_OW 255
33449: PUSH
33450: EMPTY
33451: LIST
33452: LIST
33453: PUSH
33454: LD_INT 58
33456: PUSH
33457: EMPTY
33458: LIST
33459: PUSH
33460: EMPTY
33461: LIST
33462: LIST
33463: PPUSH
33464: CALL_OW 69
33468: IN
33469: ST_TO_ADDR
// end ;
33470: LD_VAR 0 2
33474: RET
// export function IsNotFull ( building ) ; var places ; begin
33475: LD_INT 0
33477: PPUSH
33478: PPUSH
// if not building then
33479: LD_VAR 0 1
33483: NOT
33484: IFFALSE 33488
// exit ;
33486: GO 33516
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
33488: LD_ADDR_VAR 0 2
33492: PUSH
33493: LD_VAR 0 1
33497: PPUSH
33498: LD_INT 3
33500: PUSH
33501: LD_INT 62
33503: PUSH
33504: EMPTY
33505: LIST
33506: PUSH
33507: EMPTY
33508: LIST
33509: LIST
33510: PPUSH
33511: CALL_OW 72
33515: ST_TO_ADDR
// end ;
33516: LD_VAR 0 2
33520: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
33521: LD_INT 0
33523: PPUSH
33524: PPUSH
33525: PPUSH
33526: PPUSH
// tmp := [ ] ;
33527: LD_ADDR_VAR 0 3
33531: PUSH
33532: EMPTY
33533: ST_TO_ADDR
// list := [ ] ;
33534: LD_ADDR_VAR 0 5
33538: PUSH
33539: EMPTY
33540: ST_TO_ADDR
// for i = 16 to 25 do
33541: LD_ADDR_VAR 0 4
33545: PUSH
33546: DOUBLE
33547: LD_INT 16
33549: DEC
33550: ST_TO_ADDR
33551: LD_INT 25
33553: PUSH
33554: FOR_TO
33555: IFFALSE 33628
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
33557: LD_ADDR_VAR 0 3
33561: PUSH
33562: LD_VAR 0 3
33566: PUSH
33567: LD_INT 22
33569: PUSH
33570: LD_VAR 0 1
33574: PPUSH
33575: CALL_OW 255
33579: PUSH
33580: EMPTY
33581: LIST
33582: LIST
33583: PUSH
33584: LD_INT 91
33586: PUSH
33587: LD_VAR 0 1
33591: PUSH
33592: LD_INT 6
33594: PUSH
33595: EMPTY
33596: LIST
33597: LIST
33598: LIST
33599: PUSH
33600: LD_INT 30
33602: PUSH
33603: LD_VAR 0 4
33607: PUSH
33608: EMPTY
33609: LIST
33610: LIST
33611: PUSH
33612: EMPTY
33613: LIST
33614: LIST
33615: LIST
33616: PUSH
33617: EMPTY
33618: LIST
33619: PPUSH
33620: CALL_OW 69
33624: ADD
33625: ST_TO_ADDR
33626: GO 33554
33628: POP
33629: POP
// for i = 1 to tmp do
33630: LD_ADDR_VAR 0 4
33634: PUSH
33635: DOUBLE
33636: LD_INT 1
33638: DEC
33639: ST_TO_ADDR
33640: LD_VAR 0 3
33644: PUSH
33645: FOR_TO
33646: IFFALSE 33734
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
33648: LD_ADDR_VAR 0 5
33652: PUSH
33653: LD_VAR 0 5
33657: PUSH
33658: LD_VAR 0 3
33662: PUSH
33663: LD_VAR 0 4
33667: ARRAY
33668: PPUSH
33669: CALL_OW 266
33673: PUSH
33674: LD_VAR 0 3
33678: PUSH
33679: LD_VAR 0 4
33683: ARRAY
33684: PPUSH
33685: CALL_OW 250
33689: PUSH
33690: LD_VAR 0 3
33694: PUSH
33695: LD_VAR 0 4
33699: ARRAY
33700: PPUSH
33701: CALL_OW 251
33705: PUSH
33706: LD_VAR 0 3
33710: PUSH
33711: LD_VAR 0 4
33715: ARRAY
33716: PPUSH
33717: CALL_OW 254
33721: PUSH
33722: EMPTY
33723: LIST
33724: LIST
33725: LIST
33726: LIST
33727: PUSH
33728: EMPTY
33729: LIST
33730: ADD
33731: ST_TO_ADDR
33732: GO 33645
33734: POP
33735: POP
// result := list ;
33736: LD_ADDR_VAR 0 2
33740: PUSH
33741: LD_VAR 0 5
33745: ST_TO_ADDR
// end ;
33746: LD_VAR 0 2
33750: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
33751: LD_INT 0
33753: PPUSH
33754: PPUSH
33755: PPUSH
33756: PPUSH
33757: PPUSH
33758: PPUSH
33759: PPUSH
// if not factory then
33760: LD_VAR 0 1
33764: NOT
33765: IFFALSE 33769
// exit ;
33767: GO 34362
// if control = control_apeman then
33769: LD_VAR 0 4
33773: PUSH
33774: LD_INT 5
33776: EQUAL
33777: IFFALSE 33886
// begin tmp := UnitsInside ( factory ) ;
33779: LD_ADDR_VAR 0 8
33783: PUSH
33784: LD_VAR 0 1
33788: PPUSH
33789: CALL_OW 313
33793: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
33794: LD_VAR 0 8
33798: PPUSH
33799: LD_INT 25
33801: PUSH
33802: LD_INT 12
33804: PUSH
33805: EMPTY
33806: LIST
33807: LIST
33808: PPUSH
33809: CALL_OW 72
33813: NOT
33814: IFFALSE 33824
// control := control_manual ;
33816: LD_ADDR_VAR 0 4
33820: PUSH
33821: LD_INT 1
33823: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
33824: LD_ADDR_VAR 0 8
33828: PUSH
33829: LD_VAR 0 1
33833: PPUSH
33834: CALL 33521 0 1
33838: ST_TO_ADDR
// if tmp then
33839: LD_VAR 0 8
33843: IFFALSE 33886
// begin for i in tmp do
33845: LD_ADDR_VAR 0 7
33849: PUSH
33850: LD_VAR 0 8
33854: PUSH
33855: FOR_IN
33856: IFFALSE 33884
// if i [ 1 ] = b_ext_radio then
33858: LD_VAR 0 7
33862: PUSH
33863: LD_INT 1
33865: ARRAY
33866: PUSH
33867: LD_INT 22
33869: EQUAL
33870: IFFALSE 33882
// begin control := control_remote ;
33872: LD_ADDR_VAR 0 4
33876: PUSH
33877: LD_INT 2
33879: ST_TO_ADDR
// break ;
33880: GO 33884
// end ;
33882: GO 33855
33884: POP
33885: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
33886: LD_VAR 0 1
33890: PPUSH
33891: LD_VAR 0 2
33895: PPUSH
33896: LD_VAR 0 3
33900: PPUSH
33901: LD_VAR 0 4
33905: PPUSH
33906: LD_VAR 0 5
33910: PPUSH
33911: CALL_OW 448
33915: IFFALSE 33950
// begin result := [ chassis , engine , control , weapon ] ;
33917: LD_ADDR_VAR 0 6
33921: PUSH
33922: LD_VAR 0 2
33926: PUSH
33927: LD_VAR 0 3
33931: PUSH
33932: LD_VAR 0 4
33936: PUSH
33937: LD_VAR 0 5
33941: PUSH
33942: EMPTY
33943: LIST
33944: LIST
33945: LIST
33946: LIST
33947: ST_TO_ADDR
// exit ;
33948: GO 34362
// end ; _chassis := AvailableChassisList ( factory ) ;
33950: LD_ADDR_VAR 0 9
33954: PUSH
33955: LD_VAR 0 1
33959: PPUSH
33960: CALL_OW 475
33964: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
33965: LD_ADDR_VAR 0 11
33969: PUSH
33970: LD_VAR 0 1
33974: PPUSH
33975: CALL_OW 476
33979: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
33980: LD_ADDR_VAR 0 12
33984: PUSH
33985: LD_VAR 0 1
33989: PPUSH
33990: CALL_OW 477
33994: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
33995: LD_ADDR_VAR 0 10
33999: PUSH
34000: LD_VAR 0 1
34004: PPUSH
34005: CALL_OW 478
34009: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
34010: LD_VAR 0 9
34014: NOT
34015: PUSH
34016: LD_VAR 0 11
34020: NOT
34021: OR
34022: PUSH
34023: LD_VAR 0 12
34027: NOT
34028: OR
34029: PUSH
34030: LD_VAR 0 10
34034: NOT
34035: OR
34036: IFFALSE 34071
// begin result := [ chassis , engine , control , weapon ] ;
34038: LD_ADDR_VAR 0 6
34042: PUSH
34043: LD_VAR 0 2
34047: PUSH
34048: LD_VAR 0 3
34052: PUSH
34053: LD_VAR 0 4
34057: PUSH
34058: LD_VAR 0 5
34062: PUSH
34063: EMPTY
34064: LIST
34065: LIST
34066: LIST
34067: LIST
34068: ST_TO_ADDR
// exit ;
34069: GO 34362
// end ; if not chassis in _chassis then
34071: LD_VAR 0 2
34075: PUSH
34076: LD_VAR 0 9
34080: IN
34081: NOT
34082: IFFALSE 34108
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
34084: LD_ADDR_VAR 0 2
34088: PUSH
34089: LD_VAR 0 9
34093: PUSH
34094: LD_INT 1
34096: PPUSH
34097: LD_VAR 0 9
34101: PPUSH
34102: CALL_OW 12
34106: ARRAY
34107: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
34108: LD_VAR 0 2
34112: PPUSH
34113: LD_VAR 0 3
34117: PPUSH
34118: CALL 34367 0 2
34122: NOT
34123: IFFALSE 34182
// repeat engine := _engine [ 1 ] ;
34125: LD_ADDR_VAR 0 3
34129: PUSH
34130: LD_VAR 0 11
34134: PUSH
34135: LD_INT 1
34137: ARRAY
34138: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
34139: LD_ADDR_VAR 0 11
34143: PUSH
34144: LD_VAR 0 11
34148: PPUSH
34149: LD_INT 1
34151: PPUSH
34152: CALL_OW 3
34156: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
34157: LD_VAR 0 2
34161: PPUSH
34162: LD_VAR 0 3
34166: PPUSH
34167: CALL 34367 0 2
34171: PUSH
34172: LD_VAR 0 11
34176: PUSH
34177: EMPTY
34178: EQUAL
34179: OR
34180: IFFALSE 34125
// if not control in _control then
34182: LD_VAR 0 4
34186: PUSH
34187: LD_VAR 0 12
34191: IN
34192: NOT
34193: IFFALSE 34219
// control := _control [ rand ( 1 , _control ) ] ;
34195: LD_ADDR_VAR 0 4
34199: PUSH
34200: LD_VAR 0 12
34204: PUSH
34205: LD_INT 1
34207: PPUSH
34208: LD_VAR 0 12
34212: PPUSH
34213: CALL_OW 12
34217: ARRAY
34218: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
34219: LD_VAR 0 2
34223: PPUSH
34224: LD_VAR 0 5
34228: PPUSH
34229: CALL 34587 0 2
34233: NOT
34234: IFFALSE 34293
// repeat weapon := _weapon [ 1 ] ;
34236: LD_ADDR_VAR 0 5
34240: PUSH
34241: LD_VAR 0 10
34245: PUSH
34246: LD_INT 1
34248: ARRAY
34249: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
34250: LD_ADDR_VAR 0 10
34254: PUSH
34255: LD_VAR 0 10
34259: PPUSH
34260: LD_INT 1
34262: PPUSH
34263: CALL_OW 3
34267: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
34268: LD_VAR 0 2
34272: PPUSH
34273: LD_VAR 0 5
34277: PPUSH
34278: CALL 34587 0 2
34282: PUSH
34283: LD_VAR 0 10
34287: PUSH
34288: EMPTY
34289: EQUAL
34290: OR
34291: IFFALSE 34236
// result := [ ] ;
34293: LD_ADDR_VAR 0 6
34297: PUSH
34298: EMPTY
34299: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
34300: LD_VAR 0 1
34304: PPUSH
34305: LD_VAR 0 2
34309: PPUSH
34310: LD_VAR 0 3
34314: PPUSH
34315: LD_VAR 0 4
34319: PPUSH
34320: LD_VAR 0 5
34324: PPUSH
34325: CALL_OW 448
34329: IFFALSE 34362
// result := [ chassis , engine , control , weapon ] ;
34331: LD_ADDR_VAR 0 6
34335: PUSH
34336: LD_VAR 0 2
34340: PUSH
34341: LD_VAR 0 3
34345: PUSH
34346: LD_VAR 0 4
34350: PUSH
34351: LD_VAR 0 5
34355: PUSH
34356: EMPTY
34357: LIST
34358: LIST
34359: LIST
34360: LIST
34361: ST_TO_ADDR
// end ;
34362: LD_VAR 0 6
34366: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
34367: LD_INT 0
34369: PPUSH
// if not chassis or not engine then
34370: LD_VAR 0 1
34374: NOT
34375: PUSH
34376: LD_VAR 0 2
34380: NOT
34381: OR
34382: IFFALSE 34386
// exit ;
34384: GO 34582
// case engine of engine_solar :
34386: LD_VAR 0 2
34390: PUSH
34391: LD_INT 2
34393: DOUBLE
34394: EQUAL
34395: IFTRUE 34399
34397: GO 34437
34399: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
34400: LD_ADDR_VAR 0 3
34404: PUSH
34405: LD_INT 11
34407: PUSH
34408: LD_INT 12
34410: PUSH
34411: LD_INT 13
34413: PUSH
34414: LD_INT 14
34416: PUSH
34417: LD_INT 1
34419: PUSH
34420: LD_INT 2
34422: PUSH
34423: LD_INT 3
34425: PUSH
34426: EMPTY
34427: LIST
34428: LIST
34429: LIST
34430: LIST
34431: LIST
34432: LIST
34433: LIST
34434: ST_TO_ADDR
34435: GO 34566
34437: LD_INT 1
34439: DOUBLE
34440: EQUAL
34441: IFTRUE 34445
34443: GO 34507
34445: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
34446: LD_ADDR_VAR 0 3
34450: PUSH
34451: LD_INT 11
34453: PUSH
34454: LD_INT 12
34456: PUSH
34457: LD_INT 13
34459: PUSH
34460: LD_INT 14
34462: PUSH
34463: LD_INT 1
34465: PUSH
34466: LD_INT 2
34468: PUSH
34469: LD_INT 3
34471: PUSH
34472: LD_INT 4
34474: PUSH
34475: LD_INT 5
34477: PUSH
34478: LD_INT 21
34480: PUSH
34481: LD_INT 23
34483: PUSH
34484: LD_INT 22
34486: PUSH
34487: LD_INT 24
34489: PUSH
34490: EMPTY
34491: LIST
34492: LIST
34493: LIST
34494: LIST
34495: LIST
34496: LIST
34497: LIST
34498: LIST
34499: LIST
34500: LIST
34501: LIST
34502: LIST
34503: LIST
34504: ST_TO_ADDR
34505: GO 34566
34507: LD_INT 3
34509: DOUBLE
34510: EQUAL
34511: IFTRUE 34515
34513: GO 34565
34515: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
34516: LD_ADDR_VAR 0 3
34520: PUSH
34521: LD_INT 13
34523: PUSH
34524: LD_INT 14
34526: PUSH
34527: LD_INT 2
34529: PUSH
34530: LD_INT 3
34532: PUSH
34533: LD_INT 4
34535: PUSH
34536: LD_INT 5
34538: PUSH
34539: LD_INT 21
34541: PUSH
34542: LD_INT 22
34544: PUSH
34545: LD_INT 23
34547: PUSH
34548: LD_INT 24
34550: PUSH
34551: EMPTY
34552: LIST
34553: LIST
34554: LIST
34555: LIST
34556: LIST
34557: LIST
34558: LIST
34559: LIST
34560: LIST
34561: LIST
34562: ST_TO_ADDR
34563: GO 34566
34565: POP
// result := ( chassis in result ) ;
34566: LD_ADDR_VAR 0 3
34570: PUSH
34571: LD_VAR 0 1
34575: PUSH
34576: LD_VAR 0 3
34580: IN
34581: ST_TO_ADDR
// end ;
34582: LD_VAR 0 3
34586: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
34587: LD_INT 0
34589: PPUSH
// if not chassis or not weapon then
34590: LD_VAR 0 1
34594: NOT
34595: PUSH
34596: LD_VAR 0 2
34600: NOT
34601: OR
34602: IFFALSE 34606
// exit ;
34604: GO 35666
// case weapon of us_machine_gun :
34606: LD_VAR 0 2
34610: PUSH
34611: LD_INT 2
34613: DOUBLE
34614: EQUAL
34615: IFTRUE 34619
34617: GO 34649
34619: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
34620: LD_ADDR_VAR 0 3
34624: PUSH
34625: LD_INT 1
34627: PUSH
34628: LD_INT 2
34630: PUSH
34631: LD_INT 3
34633: PUSH
34634: LD_INT 4
34636: PUSH
34637: LD_INT 5
34639: PUSH
34640: EMPTY
34641: LIST
34642: LIST
34643: LIST
34644: LIST
34645: LIST
34646: ST_TO_ADDR
34647: GO 35650
34649: LD_INT 3
34651: DOUBLE
34652: EQUAL
34653: IFTRUE 34657
34655: GO 34687
34657: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
34658: LD_ADDR_VAR 0 3
34662: PUSH
34663: LD_INT 1
34665: PUSH
34666: LD_INT 2
34668: PUSH
34669: LD_INT 3
34671: PUSH
34672: LD_INT 4
34674: PUSH
34675: LD_INT 5
34677: PUSH
34678: EMPTY
34679: LIST
34680: LIST
34681: LIST
34682: LIST
34683: LIST
34684: ST_TO_ADDR
34685: GO 35650
34687: LD_INT 11
34689: DOUBLE
34690: EQUAL
34691: IFTRUE 34695
34693: GO 34725
34695: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
34696: LD_ADDR_VAR 0 3
34700: PUSH
34701: LD_INT 1
34703: PUSH
34704: LD_INT 2
34706: PUSH
34707: LD_INT 3
34709: PUSH
34710: LD_INT 4
34712: PUSH
34713: LD_INT 5
34715: PUSH
34716: EMPTY
34717: LIST
34718: LIST
34719: LIST
34720: LIST
34721: LIST
34722: ST_TO_ADDR
34723: GO 35650
34725: LD_INT 4
34727: DOUBLE
34728: EQUAL
34729: IFTRUE 34733
34731: GO 34759
34733: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
34734: LD_ADDR_VAR 0 3
34738: PUSH
34739: LD_INT 2
34741: PUSH
34742: LD_INT 3
34744: PUSH
34745: LD_INT 4
34747: PUSH
34748: LD_INT 5
34750: PUSH
34751: EMPTY
34752: LIST
34753: LIST
34754: LIST
34755: LIST
34756: ST_TO_ADDR
34757: GO 35650
34759: LD_INT 5
34761: DOUBLE
34762: EQUAL
34763: IFTRUE 34767
34765: GO 34793
34767: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
34768: LD_ADDR_VAR 0 3
34772: PUSH
34773: LD_INT 2
34775: PUSH
34776: LD_INT 3
34778: PUSH
34779: LD_INT 4
34781: PUSH
34782: LD_INT 5
34784: PUSH
34785: EMPTY
34786: LIST
34787: LIST
34788: LIST
34789: LIST
34790: ST_TO_ADDR
34791: GO 35650
34793: LD_INT 9
34795: DOUBLE
34796: EQUAL
34797: IFTRUE 34801
34799: GO 34827
34801: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
34802: LD_ADDR_VAR 0 3
34806: PUSH
34807: LD_INT 2
34809: PUSH
34810: LD_INT 3
34812: PUSH
34813: LD_INT 4
34815: PUSH
34816: LD_INT 5
34818: PUSH
34819: EMPTY
34820: LIST
34821: LIST
34822: LIST
34823: LIST
34824: ST_TO_ADDR
34825: GO 35650
34827: LD_INT 7
34829: DOUBLE
34830: EQUAL
34831: IFTRUE 34835
34833: GO 34861
34835: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
34836: LD_ADDR_VAR 0 3
34840: PUSH
34841: LD_INT 2
34843: PUSH
34844: LD_INT 3
34846: PUSH
34847: LD_INT 4
34849: PUSH
34850: LD_INT 5
34852: PUSH
34853: EMPTY
34854: LIST
34855: LIST
34856: LIST
34857: LIST
34858: ST_TO_ADDR
34859: GO 35650
34861: LD_INT 12
34863: DOUBLE
34864: EQUAL
34865: IFTRUE 34869
34867: GO 34895
34869: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
34870: LD_ADDR_VAR 0 3
34874: PUSH
34875: LD_INT 2
34877: PUSH
34878: LD_INT 3
34880: PUSH
34881: LD_INT 4
34883: PUSH
34884: LD_INT 5
34886: PUSH
34887: EMPTY
34888: LIST
34889: LIST
34890: LIST
34891: LIST
34892: ST_TO_ADDR
34893: GO 35650
34895: LD_INT 13
34897: DOUBLE
34898: EQUAL
34899: IFTRUE 34903
34901: GO 34929
34903: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
34904: LD_ADDR_VAR 0 3
34908: PUSH
34909: LD_INT 2
34911: PUSH
34912: LD_INT 3
34914: PUSH
34915: LD_INT 4
34917: PUSH
34918: LD_INT 5
34920: PUSH
34921: EMPTY
34922: LIST
34923: LIST
34924: LIST
34925: LIST
34926: ST_TO_ADDR
34927: GO 35650
34929: LD_INT 14
34931: DOUBLE
34932: EQUAL
34933: IFTRUE 34937
34935: GO 34955
34937: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
34938: LD_ADDR_VAR 0 3
34942: PUSH
34943: LD_INT 4
34945: PUSH
34946: LD_INT 5
34948: PUSH
34949: EMPTY
34950: LIST
34951: LIST
34952: ST_TO_ADDR
34953: GO 35650
34955: LD_INT 6
34957: DOUBLE
34958: EQUAL
34959: IFTRUE 34963
34961: GO 34981
34963: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
34964: LD_ADDR_VAR 0 3
34968: PUSH
34969: LD_INT 4
34971: PUSH
34972: LD_INT 5
34974: PUSH
34975: EMPTY
34976: LIST
34977: LIST
34978: ST_TO_ADDR
34979: GO 35650
34981: LD_INT 10
34983: DOUBLE
34984: EQUAL
34985: IFTRUE 34989
34987: GO 35007
34989: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
34990: LD_ADDR_VAR 0 3
34994: PUSH
34995: LD_INT 4
34997: PUSH
34998: LD_INT 5
35000: PUSH
35001: EMPTY
35002: LIST
35003: LIST
35004: ST_TO_ADDR
35005: GO 35650
35007: LD_INT 22
35009: DOUBLE
35010: EQUAL
35011: IFTRUE 35015
35013: GO 35041
35015: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
35016: LD_ADDR_VAR 0 3
35020: PUSH
35021: LD_INT 11
35023: PUSH
35024: LD_INT 12
35026: PUSH
35027: LD_INT 13
35029: PUSH
35030: LD_INT 14
35032: PUSH
35033: EMPTY
35034: LIST
35035: LIST
35036: LIST
35037: LIST
35038: ST_TO_ADDR
35039: GO 35650
35041: LD_INT 23
35043: DOUBLE
35044: EQUAL
35045: IFTRUE 35049
35047: GO 35075
35049: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
35050: LD_ADDR_VAR 0 3
35054: PUSH
35055: LD_INT 11
35057: PUSH
35058: LD_INT 12
35060: PUSH
35061: LD_INT 13
35063: PUSH
35064: LD_INT 14
35066: PUSH
35067: EMPTY
35068: LIST
35069: LIST
35070: LIST
35071: LIST
35072: ST_TO_ADDR
35073: GO 35650
35075: LD_INT 24
35077: DOUBLE
35078: EQUAL
35079: IFTRUE 35083
35081: GO 35109
35083: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
35084: LD_ADDR_VAR 0 3
35088: PUSH
35089: LD_INT 11
35091: PUSH
35092: LD_INT 12
35094: PUSH
35095: LD_INT 13
35097: PUSH
35098: LD_INT 14
35100: PUSH
35101: EMPTY
35102: LIST
35103: LIST
35104: LIST
35105: LIST
35106: ST_TO_ADDR
35107: GO 35650
35109: LD_INT 30
35111: DOUBLE
35112: EQUAL
35113: IFTRUE 35117
35115: GO 35143
35117: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
35118: LD_ADDR_VAR 0 3
35122: PUSH
35123: LD_INT 11
35125: PUSH
35126: LD_INT 12
35128: PUSH
35129: LD_INT 13
35131: PUSH
35132: LD_INT 14
35134: PUSH
35135: EMPTY
35136: LIST
35137: LIST
35138: LIST
35139: LIST
35140: ST_TO_ADDR
35141: GO 35650
35143: LD_INT 25
35145: DOUBLE
35146: EQUAL
35147: IFTRUE 35151
35149: GO 35169
35151: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
35152: LD_ADDR_VAR 0 3
35156: PUSH
35157: LD_INT 13
35159: PUSH
35160: LD_INT 14
35162: PUSH
35163: EMPTY
35164: LIST
35165: LIST
35166: ST_TO_ADDR
35167: GO 35650
35169: LD_INT 27
35171: DOUBLE
35172: EQUAL
35173: IFTRUE 35177
35175: GO 35195
35177: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
35178: LD_ADDR_VAR 0 3
35182: PUSH
35183: LD_INT 13
35185: PUSH
35186: LD_INT 14
35188: PUSH
35189: EMPTY
35190: LIST
35191: LIST
35192: ST_TO_ADDR
35193: GO 35650
35195: LD_INT 92
35197: DOUBLE
35198: EQUAL
35199: IFTRUE 35203
35201: GO 35229
35203: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
35204: LD_ADDR_VAR 0 3
35208: PUSH
35209: LD_INT 11
35211: PUSH
35212: LD_INT 12
35214: PUSH
35215: LD_INT 13
35217: PUSH
35218: LD_INT 14
35220: PUSH
35221: EMPTY
35222: LIST
35223: LIST
35224: LIST
35225: LIST
35226: ST_TO_ADDR
35227: GO 35650
35229: LD_INT 28
35231: DOUBLE
35232: EQUAL
35233: IFTRUE 35237
35235: GO 35255
35237: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
35238: LD_ADDR_VAR 0 3
35242: PUSH
35243: LD_INT 13
35245: PUSH
35246: LD_INT 14
35248: PUSH
35249: EMPTY
35250: LIST
35251: LIST
35252: ST_TO_ADDR
35253: GO 35650
35255: LD_INT 29
35257: DOUBLE
35258: EQUAL
35259: IFTRUE 35263
35261: GO 35281
35263: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
35264: LD_ADDR_VAR 0 3
35268: PUSH
35269: LD_INT 13
35271: PUSH
35272: LD_INT 14
35274: PUSH
35275: EMPTY
35276: LIST
35277: LIST
35278: ST_TO_ADDR
35279: GO 35650
35281: LD_INT 31
35283: DOUBLE
35284: EQUAL
35285: IFTRUE 35289
35287: GO 35307
35289: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
35290: LD_ADDR_VAR 0 3
35294: PUSH
35295: LD_INT 13
35297: PUSH
35298: LD_INT 14
35300: PUSH
35301: EMPTY
35302: LIST
35303: LIST
35304: ST_TO_ADDR
35305: GO 35650
35307: LD_INT 26
35309: DOUBLE
35310: EQUAL
35311: IFTRUE 35315
35313: GO 35333
35315: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
35316: LD_ADDR_VAR 0 3
35320: PUSH
35321: LD_INT 13
35323: PUSH
35324: LD_INT 14
35326: PUSH
35327: EMPTY
35328: LIST
35329: LIST
35330: ST_TO_ADDR
35331: GO 35650
35333: LD_INT 42
35335: DOUBLE
35336: EQUAL
35337: IFTRUE 35341
35339: GO 35367
35341: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
35342: LD_ADDR_VAR 0 3
35346: PUSH
35347: LD_INT 21
35349: PUSH
35350: LD_INT 22
35352: PUSH
35353: LD_INT 23
35355: PUSH
35356: LD_INT 24
35358: PUSH
35359: EMPTY
35360: LIST
35361: LIST
35362: LIST
35363: LIST
35364: ST_TO_ADDR
35365: GO 35650
35367: LD_INT 43
35369: DOUBLE
35370: EQUAL
35371: IFTRUE 35375
35373: GO 35401
35375: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
35376: LD_ADDR_VAR 0 3
35380: PUSH
35381: LD_INT 21
35383: PUSH
35384: LD_INT 22
35386: PUSH
35387: LD_INT 23
35389: PUSH
35390: LD_INT 24
35392: PUSH
35393: EMPTY
35394: LIST
35395: LIST
35396: LIST
35397: LIST
35398: ST_TO_ADDR
35399: GO 35650
35401: LD_INT 44
35403: DOUBLE
35404: EQUAL
35405: IFTRUE 35409
35407: GO 35435
35409: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
35410: LD_ADDR_VAR 0 3
35414: PUSH
35415: LD_INT 21
35417: PUSH
35418: LD_INT 22
35420: PUSH
35421: LD_INT 23
35423: PUSH
35424: LD_INT 24
35426: PUSH
35427: EMPTY
35428: LIST
35429: LIST
35430: LIST
35431: LIST
35432: ST_TO_ADDR
35433: GO 35650
35435: LD_INT 45
35437: DOUBLE
35438: EQUAL
35439: IFTRUE 35443
35441: GO 35469
35443: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
35444: LD_ADDR_VAR 0 3
35448: PUSH
35449: LD_INT 21
35451: PUSH
35452: LD_INT 22
35454: PUSH
35455: LD_INT 23
35457: PUSH
35458: LD_INT 24
35460: PUSH
35461: EMPTY
35462: LIST
35463: LIST
35464: LIST
35465: LIST
35466: ST_TO_ADDR
35467: GO 35650
35469: LD_INT 49
35471: DOUBLE
35472: EQUAL
35473: IFTRUE 35477
35475: GO 35503
35477: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
35478: LD_ADDR_VAR 0 3
35482: PUSH
35483: LD_INT 21
35485: PUSH
35486: LD_INT 22
35488: PUSH
35489: LD_INT 23
35491: PUSH
35492: LD_INT 24
35494: PUSH
35495: EMPTY
35496: LIST
35497: LIST
35498: LIST
35499: LIST
35500: ST_TO_ADDR
35501: GO 35650
35503: LD_INT 51
35505: DOUBLE
35506: EQUAL
35507: IFTRUE 35511
35509: GO 35537
35511: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
35512: LD_ADDR_VAR 0 3
35516: PUSH
35517: LD_INT 21
35519: PUSH
35520: LD_INT 22
35522: PUSH
35523: LD_INT 23
35525: PUSH
35526: LD_INT 24
35528: PUSH
35529: EMPTY
35530: LIST
35531: LIST
35532: LIST
35533: LIST
35534: ST_TO_ADDR
35535: GO 35650
35537: LD_INT 52
35539: DOUBLE
35540: EQUAL
35541: IFTRUE 35545
35543: GO 35571
35545: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
35546: LD_ADDR_VAR 0 3
35550: PUSH
35551: LD_INT 21
35553: PUSH
35554: LD_INT 22
35556: PUSH
35557: LD_INT 23
35559: PUSH
35560: LD_INT 24
35562: PUSH
35563: EMPTY
35564: LIST
35565: LIST
35566: LIST
35567: LIST
35568: ST_TO_ADDR
35569: GO 35650
35571: LD_INT 53
35573: DOUBLE
35574: EQUAL
35575: IFTRUE 35579
35577: GO 35597
35579: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
35580: LD_ADDR_VAR 0 3
35584: PUSH
35585: LD_INT 23
35587: PUSH
35588: LD_INT 24
35590: PUSH
35591: EMPTY
35592: LIST
35593: LIST
35594: ST_TO_ADDR
35595: GO 35650
35597: LD_INT 46
35599: DOUBLE
35600: EQUAL
35601: IFTRUE 35605
35603: GO 35623
35605: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
35606: LD_ADDR_VAR 0 3
35610: PUSH
35611: LD_INT 23
35613: PUSH
35614: LD_INT 24
35616: PUSH
35617: EMPTY
35618: LIST
35619: LIST
35620: ST_TO_ADDR
35621: GO 35650
35623: LD_INT 47
35625: DOUBLE
35626: EQUAL
35627: IFTRUE 35631
35629: GO 35649
35631: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
35632: LD_ADDR_VAR 0 3
35636: PUSH
35637: LD_INT 23
35639: PUSH
35640: LD_INT 24
35642: PUSH
35643: EMPTY
35644: LIST
35645: LIST
35646: ST_TO_ADDR
35647: GO 35650
35649: POP
// result := ( chassis in result ) ;
35650: LD_ADDR_VAR 0 3
35654: PUSH
35655: LD_VAR 0 1
35659: PUSH
35660: LD_VAR 0 3
35664: IN
35665: ST_TO_ADDR
// end ;
35666: LD_VAR 0 3
35670: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
35671: LD_INT 0
35673: PPUSH
35674: PPUSH
35675: PPUSH
35676: PPUSH
35677: PPUSH
35678: PPUSH
35679: PPUSH
// result := array ;
35680: LD_ADDR_VAR 0 5
35684: PUSH
35685: LD_VAR 0 1
35689: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
35690: LD_VAR 0 1
35694: NOT
35695: PUSH
35696: LD_VAR 0 2
35700: NOT
35701: OR
35702: PUSH
35703: LD_VAR 0 3
35707: NOT
35708: OR
35709: PUSH
35710: LD_VAR 0 2
35714: PUSH
35715: LD_VAR 0 1
35719: GREATER
35720: OR
35721: PUSH
35722: LD_VAR 0 3
35726: PUSH
35727: LD_VAR 0 1
35731: GREATER
35732: OR
35733: IFFALSE 35737
// exit ;
35735: GO 36033
// if direction then
35737: LD_VAR 0 4
35741: IFFALSE 35805
// begin d := 1 ;
35743: LD_ADDR_VAR 0 9
35747: PUSH
35748: LD_INT 1
35750: ST_TO_ADDR
// if i_from > i_to then
35751: LD_VAR 0 2
35755: PUSH
35756: LD_VAR 0 3
35760: GREATER
35761: IFFALSE 35787
// length := ( array - i_from ) + i_to else
35763: LD_ADDR_VAR 0 11
35767: PUSH
35768: LD_VAR 0 1
35772: PUSH
35773: LD_VAR 0 2
35777: MINUS
35778: PUSH
35779: LD_VAR 0 3
35783: PLUS
35784: ST_TO_ADDR
35785: GO 35803
// length := i_to - i_from ;
35787: LD_ADDR_VAR 0 11
35791: PUSH
35792: LD_VAR 0 3
35796: PUSH
35797: LD_VAR 0 2
35801: MINUS
35802: ST_TO_ADDR
// end else
35803: GO 35866
// begin d := - 1 ;
35805: LD_ADDR_VAR 0 9
35809: PUSH
35810: LD_INT 1
35812: NEG
35813: ST_TO_ADDR
// if i_from > i_to then
35814: LD_VAR 0 2
35818: PUSH
35819: LD_VAR 0 3
35823: GREATER
35824: IFFALSE 35844
// length := i_from - i_to else
35826: LD_ADDR_VAR 0 11
35830: PUSH
35831: LD_VAR 0 2
35835: PUSH
35836: LD_VAR 0 3
35840: MINUS
35841: ST_TO_ADDR
35842: GO 35866
// length := ( array - i_to ) + i_from ;
35844: LD_ADDR_VAR 0 11
35848: PUSH
35849: LD_VAR 0 1
35853: PUSH
35854: LD_VAR 0 3
35858: MINUS
35859: PUSH
35860: LD_VAR 0 2
35864: PLUS
35865: ST_TO_ADDR
// end ; if not length then
35866: LD_VAR 0 11
35870: NOT
35871: IFFALSE 35875
// exit ;
35873: GO 36033
// tmp := array ;
35875: LD_ADDR_VAR 0 10
35879: PUSH
35880: LD_VAR 0 1
35884: ST_TO_ADDR
// for i = 1 to length do
35885: LD_ADDR_VAR 0 6
35889: PUSH
35890: DOUBLE
35891: LD_INT 1
35893: DEC
35894: ST_TO_ADDR
35895: LD_VAR 0 11
35899: PUSH
35900: FOR_TO
35901: IFFALSE 36021
// begin for j = 1 to array do
35903: LD_ADDR_VAR 0 7
35907: PUSH
35908: DOUBLE
35909: LD_INT 1
35911: DEC
35912: ST_TO_ADDR
35913: LD_VAR 0 1
35917: PUSH
35918: FOR_TO
35919: IFFALSE 36007
// begin k := j + d ;
35921: LD_ADDR_VAR 0 8
35925: PUSH
35926: LD_VAR 0 7
35930: PUSH
35931: LD_VAR 0 9
35935: PLUS
35936: ST_TO_ADDR
// if k > array then
35937: LD_VAR 0 8
35941: PUSH
35942: LD_VAR 0 1
35946: GREATER
35947: IFFALSE 35957
// k := 1 ;
35949: LD_ADDR_VAR 0 8
35953: PUSH
35954: LD_INT 1
35956: ST_TO_ADDR
// if not k then
35957: LD_VAR 0 8
35961: NOT
35962: IFFALSE 35974
// k := array ;
35964: LD_ADDR_VAR 0 8
35968: PUSH
35969: LD_VAR 0 1
35973: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
35974: LD_ADDR_VAR 0 10
35978: PUSH
35979: LD_VAR 0 10
35983: PPUSH
35984: LD_VAR 0 8
35988: PPUSH
35989: LD_VAR 0 1
35993: PUSH
35994: LD_VAR 0 7
35998: ARRAY
35999: PPUSH
36000: CALL_OW 1
36004: ST_TO_ADDR
// end ;
36005: GO 35918
36007: POP
36008: POP
// array := tmp ;
36009: LD_ADDR_VAR 0 1
36013: PUSH
36014: LD_VAR 0 10
36018: ST_TO_ADDR
// end ;
36019: GO 35900
36021: POP
36022: POP
// result := array ;
36023: LD_ADDR_VAR 0 5
36027: PUSH
36028: LD_VAR 0 1
36032: ST_TO_ADDR
// end ;
36033: LD_VAR 0 5
36037: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
36038: LD_INT 0
36040: PPUSH
36041: PPUSH
// result := 0 ;
36042: LD_ADDR_VAR 0 3
36046: PUSH
36047: LD_INT 0
36049: ST_TO_ADDR
// if not array or not value in array then
36050: LD_VAR 0 1
36054: NOT
36055: PUSH
36056: LD_VAR 0 2
36060: PUSH
36061: LD_VAR 0 1
36065: IN
36066: NOT
36067: OR
36068: IFFALSE 36072
// exit ;
36070: GO 36126
// for i = 1 to array do
36072: LD_ADDR_VAR 0 4
36076: PUSH
36077: DOUBLE
36078: LD_INT 1
36080: DEC
36081: ST_TO_ADDR
36082: LD_VAR 0 1
36086: PUSH
36087: FOR_TO
36088: IFFALSE 36124
// if value = array [ i ] then
36090: LD_VAR 0 2
36094: PUSH
36095: LD_VAR 0 1
36099: PUSH
36100: LD_VAR 0 4
36104: ARRAY
36105: EQUAL
36106: IFFALSE 36122
// begin result := i ;
36108: LD_ADDR_VAR 0 3
36112: PUSH
36113: LD_VAR 0 4
36117: ST_TO_ADDR
// exit ;
36118: POP
36119: POP
36120: GO 36126
// end ;
36122: GO 36087
36124: POP
36125: POP
// end ;
36126: LD_VAR 0 3
36130: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
36131: LD_INT 0
36133: PPUSH
// vc_chassis := chassis ;
36134: LD_ADDR_OWVAR 37
36138: PUSH
36139: LD_VAR 0 1
36143: ST_TO_ADDR
// vc_engine := engine ;
36144: LD_ADDR_OWVAR 39
36148: PUSH
36149: LD_VAR 0 2
36153: ST_TO_ADDR
// vc_control := control ;
36154: LD_ADDR_OWVAR 38
36158: PUSH
36159: LD_VAR 0 3
36163: ST_TO_ADDR
// vc_weapon := weapon ;
36164: LD_ADDR_OWVAR 40
36168: PUSH
36169: LD_VAR 0 4
36173: ST_TO_ADDR
// vc_fuel_battery := fuel ;
36174: LD_ADDR_OWVAR 41
36178: PUSH
36179: LD_VAR 0 5
36183: ST_TO_ADDR
// end ;
36184: LD_VAR 0 6
36188: RET
// export function WantPlant ( unit ) ; var task ; begin
36189: LD_INT 0
36191: PPUSH
36192: PPUSH
// result := false ;
36193: LD_ADDR_VAR 0 2
36197: PUSH
36198: LD_INT 0
36200: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
36201: LD_ADDR_VAR 0 3
36205: PUSH
36206: LD_VAR 0 1
36210: PPUSH
36211: CALL_OW 437
36215: ST_TO_ADDR
// if task then
36216: LD_VAR 0 3
36220: IFFALSE 36248
// if task [ 1 ] [ 1 ] = p then
36222: LD_VAR 0 3
36226: PUSH
36227: LD_INT 1
36229: ARRAY
36230: PUSH
36231: LD_INT 1
36233: ARRAY
36234: PUSH
36235: LD_STRING p
36237: EQUAL
36238: IFFALSE 36248
// result := true ;
36240: LD_ADDR_VAR 0 2
36244: PUSH
36245: LD_INT 1
36247: ST_TO_ADDR
// end ;
36248: LD_VAR 0 2
36252: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
36253: LD_INT 0
36255: PPUSH
36256: PPUSH
36257: PPUSH
36258: PPUSH
// if pos < 1 then
36259: LD_VAR 0 2
36263: PUSH
36264: LD_INT 1
36266: LESS
36267: IFFALSE 36271
// exit ;
36269: GO 36574
// if pos = 1 then
36271: LD_VAR 0 2
36275: PUSH
36276: LD_INT 1
36278: EQUAL
36279: IFFALSE 36312
// result := Replace ( arr , pos [ 1 ] , value ) else
36281: LD_ADDR_VAR 0 4
36285: PUSH
36286: LD_VAR 0 1
36290: PPUSH
36291: LD_VAR 0 2
36295: PUSH
36296: LD_INT 1
36298: ARRAY
36299: PPUSH
36300: LD_VAR 0 3
36304: PPUSH
36305: CALL_OW 1
36309: ST_TO_ADDR
36310: GO 36574
// begin tmp := arr ;
36312: LD_ADDR_VAR 0 6
36316: PUSH
36317: LD_VAR 0 1
36321: ST_TO_ADDR
// s_arr := [ tmp ] ;
36322: LD_ADDR_VAR 0 7
36326: PUSH
36327: LD_VAR 0 6
36331: PUSH
36332: EMPTY
36333: LIST
36334: ST_TO_ADDR
// for i = 1 to pos - 1 do
36335: LD_ADDR_VAR 0 5
36339: PUSH
36340: DOUBLE
36341: LD_INT 1
36343: DEC
36344: ST_TO_ADDR
36345: LD_VAR 0 2
36349: PUSH
36350: LD_INT 1
36352: MINUS
36353: PUSH
36354: FOR_TO
36355: IFFALSE 36400
// begin tmp := tmp [ pos [ i ] ] ;
36357: LD_ADDR_VAR 0 6
36361: PUSH
36362: LD_VAR 0 6
36366: PUSH
36367: LD_VAR 0 2
36371: PUSH
36372: LD_VAR 0 5
36376: ARRAY
36377: ARRAY
36378: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
36379: LD_ADDR_VAR 0 7
36383: PUSH
36384: LD_VAR 0 7
36388: PUSH
36389: LD_VAR 0 6
36393: PUSH
36394: EMPTY
36395: LIST
36396: ADD
36397: ST_TO_ADDR
// end ;
36398: GO 36354
36400: POP
36401: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
36402: LD_ADDR_VAR 0 6
36406: PUSH
36407: LD_VAR 0 6
36411: PPUSH
36412: LD_VAR 0 2
36416: PUSH
36417: LD_VAR 0 2
36421: ARRAY
36422: PPUSH
36423: LD_VAR 0 3
36427: PPUSH
36428: CALL_OW 1
36432: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
36433: LD_ADDR_VAR 0 7
36437: PUSH
36438: LD_VAR 0 7
36442: PPUSH
36443: LD_VAR 0 7
36447: PPUSH
36448: LD_VAR 0 6
36452: PPUSH
36453: CALL_OW 1
36457: ST_TO_ADDR
// for i = s_arr downto 2 do
36458: LD_ADDR_VAR 0 5
36462: PUSH
36463: DOUBLE
36464: LD_VAR 0 7
36468: INC
36469: ST_TO_ADDR
36470: LD_INT 2
36472: PUSH
36473: FOR_DOWNTO
36474: IFFALSE 36558
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
36476: LD_ADDR_VAR 0 6
36480: PUSH
36481: LD_VAR 0 7
36485: PUSH
36486: LD_VAR 0 5
36490: PUSH
36491: LD_INT 1
36493: MINUS
36494: ARRAY
36495: PPUSH
36496: LD_VAR 0 2
36500: PUSH
36501: LD_VAR 0 5
36505: PUSH
36506: LD_INT 1
36508: MINUS
36509: ARRAY
36510: PPUSH
36511: LD_VAR 0 7
36515: PUSH
36516: LD_VAR 0 5
36520: ARRAY
36521: PPUSH
36522: CALL_OW 1
36526: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
36527: LD_ADDR_VAR 0 7
36531: PUSH
36532: LD_VAR 0 7
36536: PPUSH
36537: LD_VAR 0 5
36541: PUSH
36542: LD_INT 1
36544: MINUS
36545: PPUSH
36546: LD_VAR 0 6
36550: PPUSH
36551: CALL_OW 1
36555: ST_TO_ADDR
// end ;
36556: GO 36473
36558: POP
36559: POP
// result := s_arr [ 1 ] ;
36560: LD_ADDR_VAR 0 4
36564: PUSH
36565: LD_VAR 0 7
36569: PUSH
36570: LD_INT 1
36572: ARRAY
36573: ST_TO_ADDR
// end ; end ;
36574: LD_VAR 0 4
36578: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
36579: LD_INT 0
36581: PPUSH
36582: PPUSH
// if not list then
36583: LD_VAR 0 1
36587: NOT
36588: IFFALSE 36592
// exit ;
36590: GO 36683
// i := list [ pos1 ] ;
36592: LD_ADDR_VAR 0 5
36596: PUSH
36597: LD_VAR 0 1
36601: PUSH
36602: LD_VAR 0 2
36606: ARRAY
36607: ST_TO_ADDR
// if not i then
36608: LD_VAR 0 5
36612: NOT
36613: IFFALSE 36617
// exit ;
36615: GO 36683
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
36617: LD_ADDR_VAR 0 1
36621: PUSH
36622: LD_VAR 0 1
36626: PPUSH
36627: LD_VAR 0 2
36631: PPUSH
36632: LD_VAR 0 1
36636: PUSH
36637: LD_VAR 0 3
36641: ARRAY
36642: PPUSH
36643: CALL_OW 1
36647: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
36648: LD_ADDR_VAR 0 1
36652: PUSH
36653: LD_VAR 0 1
36657: PPUSH
36658: LD_VAR 0 3
36662: PPUSH
36663: LD_VAR 0 5
36667: PPUSH
36668: CALL_OW 1
36672: ST_TO_ADDR
// result := list ;
36673: LD_ADDR_VAR 0 4
36677: PUSH
36678: LD_VAR 0 1
36682: ST_TO_ADDR
// end ;
36683: LD_VAR 0 4
36687: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
36688: LD_INT 0
36690: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
36691: LD_ADDR_VAR 0 5
36695: PUSH
36696: LD_VAR 0 1
36700: PPUSH
36701: CALL_OW 250
36705: PPUSH
36706: LD_VAR 0 1
36710: PPUSH
36711: CALL_OW 251
36715: PPUSH
36716: LD_VAR 0 2
36720: PPUSH
36721: LD_VAR 0 3
36725: PPUSH
36726: LD_VAR 0 4
36730: PPUSH
36731: CALL 36741 0 5
36735: ST_TO_ADDR
// end ;
36736: LD_VAR 0 5
36740: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
36741: LD_INT 0
36743: PPUSH
36744: PPUSH
36745: PPUSH
36746: PPUSH
// if not list then
36747: LD_VAR 0 3
36751: NOT
36752: IFFALSE 36756
// exit ;
36754: GO 37144
// result := [ ] ;
36756: LD_ADDR_VAR 0 6
36760: PUSH
36761: EMPTY
36762: ST_TO_ADDR
// for i in list do
36763: LD_ADDR_VAR 0 7
36767: PUSH
36768: LD_VAR 0 3
36772: PUSH
36773: FOR_IN
36774: IFFALSE 36976
// begin tmp := GetDistUnitXY ( i , x , y ) ;
36776: LD_ADDR_VAR 0 9
36780: PUSH
36781: LD_VAR 0 7
36785: PPUSH
36786: LD_VAR 0 1
36790: PPUSH
36791: LD_VAR 0 2
36795: PPUSH
36796: CALL_OW 297
36800: ST_TO_ADDR
// if not result then
36801: LD_VAR 0 6
36805: NOT
36806: IFFALSE 36832
// result := [ [ i , tmp ] ] else
36808: LD_ADDR_VAR 0 6
36812: PUSH
36813: LD_VAR 0 7
36817: PUSH
36818: LD_VAR 0 9
36822: PUSH
36823: EMPTY
36824: LIST
36825: LIST
36826: PUSH
36827: EMPTY
36828: LIST
36829: ST_TO_ADDR
36830: GO 36974
// begin if result [ result ] [ 2 ] < tmp then
36832: LD_VAR 0 6
36836: PUSH
36837: LD_VAR 0 6
36841: ARRAY
36842: PUSH
36843: LD_INT 2
36845: ARRAY
36846: PUSH
36847: LD_VAR 0 9
36851: LESS
36852: IFFALSE 36894
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
36854: LD_ADDR_VAR 0 6
36858: PUSH
36859: LD_VAR 0 6
36863: PPUSH
36864: LD_VAR 0 6
36868: PUSH
36869: LD_INT 1
36871: PLUS
36872: PPUSH
36873: LD_VAR 0 7
36877: PUSH
36878: LD_VAR 0 9
36882: PUSH
36883: EMPTY
36884: LIST
36885: LIST
36886: PPUSH
36887: CALL_OW 2
36891: ST_TO_ADDR
36892: GO 36974
// for j = 1 to result do
36894: LD_ADDR_VAR 0 8
36898: PUSH
36899: DOUBLE
36900: LD_INT 1
36902: DEC
36903: ST_TO_ADDR
36904: LD_VAR 0 6
36908: PUSH
36909: FOR_TO
36910: IFFALSE 36972
// begin if tmp < result [ j ] [ 2 ] then
36912: LD_VAR 0 9
36916: PUSH
36917: LD_VAR 0 6
36921: PUSH
36922: LD_VAR 0 8
36926: ARRAY
36927: PUSH
36928: LD_INT 2
36930: ARRAY
36931: LESS
36932: IFFALSE 36970
// begin result := Insert ( result , j , [ i , tmp ] ) ;
36934: LD_ADDR_VAR 0 6
36938: PUSH
36939: LD_VAR 0 6
36943: PPUSH
36944: LD_VAR 0 8
36948: PPUSH
36949: LD_VAR 0 7
36953: PUSH
36954: LD_VAR 0 9
36958: PUSH
36959: EMPTY
36960: LIST
36961: LIST
36962: PPUSH
36963: CALL_OW 2
36967: ST_TO_ADDR
// break ;
36968: GO 36972
// end ; end ;
36970: GO 36909
36972: POP
36973: POP
// end ; end ;
36974: GO 36773
36976: POP
36977: POP
// if result and not asc then
36978: LD_VAR 0 6
36982: PUSH
36983: LD_VAR 0 4
36987: NOT
36988: AND
36989: IFFALSE 37064
// begin tmp := result ;
36991: LD_ADDR_VAR 0 9
36995: PUSH
36996: LD_VAR 0 6
37000: ST_TO_ADDR
// for i = tmp downto 1 do
37001: LD_ADDR_VAR 0 7
37005: PUSH
37006: DOUBLE
37007: LD_VAR 0 9
37011: INC
37012: ST_TO_ADDR
37013: LD_INT 1
37015: PUSH
37016: FOR_DOWNTO
37017: IFFALSE 37062
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
37019: LD_ADDR_VAR 0 6
37023: PUSH
37024: LD_VAR 0 6
37028: PPUSH
37029: LD_VAR 0 9
37033: PUSH
37034: LD_VAR 0 7
37038: MINUS
37039: PUSH
37040: LD_INT 1
37042: PLUS
37043: PPUSH
37044: LD_VAR 0 9
37048: PUSH
37049: LD_VAR 0 7
37053: ARRAY
37054: PPUSH
37055: CALL_OW 1
37059: ST_TO_ADDR
37060: GO 37016
37062: POP
37063: POP
// end ; tmp := [ ] ;
37064: LD_ADDR_VAR 0 9
37068: PUSH
37069: EMPTY
37070: ST_TO_ADDR
// if mode then
37071: LD_VAR 0 5
37075: IFFALSE 37144
// begin for i = 1 to result do
37077: LD_ADDR_VAR 0 7
37081: PUSH
37082: DOUBLE
37083: LD_INT 1
37085: DEC
37086: ST_TO_ADDR
37087: LD_VAR 0 6
37091: PUSH
37092: FOR_TO
37093: IFFALSE 37132
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
37095: LD_ADDR_VAR 0 9
37099: PUSH
37100: LD_VAR 0 9
37104: PPUSH
37105: LD_VAR 0 7
37109: PPUSH
37110: LD_VAR 0 6
37114: PUSH
37115: LD_VAR 0 7
37119: ARRAY
37120: PUSH
37121: LD_INT 1
37123: ARRAY
37124: PPUSH
37125: CALL_OW 1
37129: ST_TO_ADDR
37130: GO 37092
37132: POP
37133: POP
// result := tmp ;
37134: LD_ADDR_VAR 0 6
37138: PUSH
37139: LD_VAR 0 9
37143: ST_TO_ADDR
// end ; end ;
37144: LD_VAR 0 6
37148: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
37149: LD_INT 0
37151: PPUSH
37152: PPUSH
37153: PPUSH
37154: PPUSH
37155: PPUSH
37156: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
37157: LD_ADDR_VAR 0 5
37161: PUSH
37162: LD_INT 0
37164: PUSH
37165: LD_INT 0
37167: PUSH
37168: LD_INT 0
37170: PUSH
37171: EMPTY
37172: PUSH
37173: EMPTY
37174: LIST
37175: LIST
37176: LIST
37177: LIST
37178: ST_TO_ADDR
// if not x or not y then
37179: LD_VAR 0 2
37183: NOT
37184: PUSH
37185: LD_VAR 0 3
37189: NOT
37190: OR
37191: IFFALSE 37195
// exit ;
37193: GO 38845
// if not range then
37195: LD_VAR 0 4
37199: NOT
37200: IFFALSE 37210
// range := 10 ;
37202: LD_ADDR_VAR 0 4
37206: PUSH
37207: LD_INT 10
37209: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37210: LD_ADDR_VAR 0 8
37214: PUSH
37215: LD_INT 81
37217: PUSH
37218: LD_VAR 0 1
37222: PUSH
37223: EMPTY
37224: LIST
37225: LIST
37226: PUSH
37227: LD_INT 92
37229: PUSH
37230: LD_VAR 0 2
37234: PUSH
37235: LD_VAR 0 3
37239: PUSH
37240: LD_VAR 0 4
37244: PUSH
37245: EMPTY
37246: LIST
37247: LIST
37248: LIST
37249: LIST
37250: PUSH
37251: LD_INT 3
37253: PUSH
37254: LD_INT 21
37256: PUSH
37257: LD_INT 3
37259: PUSH
37260: EMPTY
37261: LIST
37262: LIST
37263: PUSH
37264: EMPTY
37265: LIST
37266: LIST
37267: PUSH
37268: EMPTY
37269: LIST
37270: LIST
37271: LIST
37272: PPUSH
37273: CALL_OW 69
37277: ST_TO_ADDR
// if not tmp then
37278: LD_VAR 0 8
37282: NOT
37283: IFFALSE 37287
// exit ;
37285: GO 38845
// for i in tmp do
37287: LD_ADDR_VAR 0 6
37291: PUSH
37292: LD_VAR 0 8
37296: PUSH
37297: FOR_IN
37298: IFFALSE 38820
// begin points := [ 0 , 0 , 0 ] ;
37300: LD_ADDR_VAR 0 9
37304: PUSH
37305: LD_INT 0
37307: PUSH
37308: LD_INT 0
37310: PUSH
37311: LD_INT 0
37313: PUSH
37314: EMPTY
37315: LIST
37316: LIST
37317: LIST
37318: ST_TO_ADDR
// bpoints := 1 ;
37319: LD_ADDR_VAR 0 10
37323: PUSH
37324: LD_INT 1
37326: ST_TO_ADDR
// case GetType ( i ) of unit_human :
37327: LD_VAR 0 6
37331: PPUSH
37332: CALL_OW 247
37336: PUSH
37337: LD_INT 1
37339: DOUBLE
37340: EQUAL
37341: IFTRUE 37345
37343: GO 37923
37345: POP
// begin if GetClass ( i ) = 1 then
37346: LD_VAR 0 6
37350: PPUSH
37351: CALL_OW 257
37355: PUSH
37356: LD_INT 1
37358: EQUAL
37359: IFFALSE 37380
// points := [ 10 , 5 , 3 ] ;
37361: LD_ADDR_VAR 0 9
37365: PUSH
37366: LD_INT 10
37368: PUSH
37369: LD_INT 5
37371: PUSH
37372: LD_INT 3
37374: PUSH
37375: EMPTY
37376: LIST
37377: LIST
37378: LIST
37379: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
37380: LD_VAR 0 6
37384: PPUSH
37385: CALL_OW 257
37389: PUSH
37390: LD_INT 2
37392: PUSH
37393: LD_INT 3
37395: PUSH
37396: LD_INT 4
37398: PUSH
37399: EMPTY
37400: LIST
37401: LIST
37402: LIST
37403: IN
37404: IFFALSE 37425
// points := [ 3 , 2 , 1 ] ;
37406: LD_ADDR_VAR 0 9
37410: PUSH
37411: LD_INT 3
37413: PUSH
37414: LD_INT 2
37416: PUSH
37417: LD_INT 1
37419: PUSH
37420: EMPTY
37421: LIST
37422: LIST
37423: LIST
37424: ST_TO_ADDR
// if GetClass ( i ) = 5 then
37425: LD_VAR 0 6
37429: PPUSH
37430: CALL_OW 257
37434: PUSH
37435: LD_INT 5
37437: EQUAL
37438: IFFALSE 37459
// points := [ 130 , 5 , 2 ] ;
37440: LD_ADDR_VAR 0 9
37444: PUSH
37445: LD_INT 130
37447: PUSH
37448: LD_INT 5
37450: PUSH
37451: LD_INT 2
37453: PUSH
37454: EMPTY
37455: LIST
37456: LIST
37457: LIST
37458: ST_TO_ADDR
// if GetClass ( i ) = 8 then
37459: LD_VAR 0 6
37463: PPUSH
37464: CALL_OW 257
37468: PUSH
37469: LD_INT 8
37471: EQUAL
37472: IFFALSE 37493
// points := [ 35 , 35 , 30 ] ;
37474: LD_ADDR_VAR 0 9
37478: PUSH
37479: LD_INT 35
37481: PUSH
37482: LD_INT 35
37484: PUSH
37485: LD_INT 30
37487: PUSH
37488: EMPTY
37489: LIST
37490: LIST
37491: LIST
37492: ST_TO_ADDR
// if GetClass ( i ) = 9 then
37493: LD_VAR 0 6
37497: PPUSH
37498: CALL_OW 257
37502: PUSH
37503: LD_INT 9
37505: EQUAL
37506: IFFALSE 37527
// points := [ 20 , 55 , 40 ] ;
37508: LD_ADDR_VAR 0 9
37512: PUSH
37513: LD_INT 20
37515: PUSH
37516: LD_INT 55
37518: PUSH
37519: LD_INT 40
37521: PUSH
37522: EMPTY
37523: LIST
37524: LIST
37525: LIST
37526: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
37527: LD_VAR 0 6
37531: PPUSH
37532: CALL_OW 257
37536: PUSH
37537: LD_INT 12
37539: PUSH
37540: LD_INT 16
37542: PUSH
37543: EMPTY
37544: LIST
37545: LIST
37546: IN
37547: IFFALSE 37568
// points := [ 5 , 3 , 2 ] ;
37549: LD_ADDR_VAR 0 9
37553: PUSH
37554: LD_INT 5
37556: PUSH
37557: LD_INT 3
37559: PUSH
37560: LD_INT 2
37562: PUSH
37563: EMPTY
37564: LIST
37565: LIST
37566: LIST
37567: ST_TO_ADDR
// if GetClass ( i ) = 17 then
37568: LD_VAR 0 6
37572: PPUSH
37573: CALL_OW 257
37577: PUSH
37578: LD_INT 17
37580: EQUAL
37581: IFFALSE 37602
// points := [ 100 , 50 , 75 ] ;
37583: LD_ADDR_VAR 0 9
37587: PUSH
37588: LD_INT 100
37590: PUSH
37591: LD_INT 50
37593: PUSH
37594: LD_INT 75
37596: PUSH
37597: EMPTY
37598: LIST
37599: LIST
37600: LIST
37601: ST_TO_ADDR
// if GetClass ( i ) = 15 then
37602: LD_VAR 0 6
37606: PPUSH
37607: CALL_OW 257
37611: PUSH
37612: LD_INT 15
37614: EQUAL
37615: IFFALSE 37636
// points := [ 10 , 5 , 3 ] ;
37617: LD_ADDR_VAR 0 9
37621: PUSH
37622: LD_INT 10
37624: PUSH
37625: LD_INT 5
37627: PUSH
37628: LD_INT 3
37630: PUSH
37631: EMPTY
37632: LIST
37633: LIST
37634: LIST
37635: ST_TO_ADDR
// if GetClass ( i ) = 14 then
37636: LD_VAR 0 6
37640: PPUSH
37641: CALL_OW 257
37645: PUSH
37646: LD_INT 14
37648: EQUAL
37649: IFFALSE 37670
// points := [ 10 , 0 , 0 ] ;
37651: LD_ADDR_VAR 0 9
37655: PUSH
37656: LD_INT 10
37658: PUSH
37659: LD_INT 0
37661: PUSH
37662: LD_INT 0
37664: PUSH
37665: EMPTY
37666: LIST
37667: LIST
37668: LIST
37669: ST_TO_ADDR
// if GetClass ( i ) = 11 then
37670: LD_VAR 0 6
37674: PPUSH
37675: CALL_OW 257
37679: PUSH
37680: LD_INT 11
37682: EQUAL
37683: IFFALSE 37704
// points := [ 30 , 10 , 5 ] ;
37685: LD_ADDR_VAR 0 9
37689: PUSH
37690: LD_INT 30
37692: PUSH
37693: LD_INT 10
37695: PUSH
37696: LD_INT 5
37698: PUSH
37699: EMPTY
37700: LIST
37701: LIST
37702: LIST
37703: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
37704: LD_VAR 0 1
37708: PPUSH
37709: LD_INT 5
37711: PPUSH
37712: CALL_OW 321
37716: PUSH
37717: LD_INT 2
37719: EQUAL
37720: IFFALSE 37737
// bpoints := bpoints * 1.8 ;
37722: LD_ADDR_VAR 0 10
37726: PUSH
37727: LD_VAR 0 10
37731: PUSH
37732: LD_REAL  1.80000000000000E+0000
37735: MUL
37736: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
37737: LD_VAR 0 6
37741: PPUSH
37742: CALL_OW 257
37746: PUSH
37747: LD_INT 1
37749: PUSH
37750: LD_INT 2
37752: PUSH
37753: LD_INT 3
37755: PUSH
37756: LD_INT 4
37758: PUSH
37759: EMPTY
37760: LIST
37761: LIST
37762: LIST
37763: LIST
37764: IN
37765: PUSH
37766: LD_VAR 0 1
37770: PPUSH
37771: LD_INT 51
37773: PPUSH
37774: CALL_OW 321
37778: PUSH
37779: LD_INT 2
37781: EQUAL
37782: AND
37783: IFFALSE 37800
// bpoints := bpoints * 1.2 ;
37785: LD_ADDR_VAR 0 10
37789: PUSH
37790: LD_VAR 0 10
37794: PUSH
37795: LD_REAL  1.20000000000000E+0000
37798: MUL
37799: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
37800: LD_VAR 0 6
37804: PPUSH
37805: CALL_OW 257
37809: PUSH
37810: LD_INT 5
37812: PUSH
37813: LD_INT 7
37815: PUSH
37816: LD_INT 9
37818: PUSH
37819: EMPTY
37820: LIST
37821: LIST
37822: LIST
37823: IN
37824: PUSH
37825: LD_VAR 0 1
37829: PPUSH
37830: LD_INT 52
37832: PPUSH
37833: CALL_OW 321
37837: PUSH
37838: LD_INT 2
37840: EQUAL
37841: AND
37842: IFFALSE 37859
// bpoints := bpoints * 1.5 ;
37844: LD_ADDR_VAR 0 10
37848: PUSH
37849: LD_VAR 0 10
37853: PUSH
37854: LD_REAL  1.50000000000000E+0000
37857: MUL
37858: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
37859: LD_VAR 0 1
37863: PPUSH
37864: LD_INT 66
37866: PPUSH
37867: CALL_OW 321
37871: PUSH
37872: LD_INT 2
37874: EQUAL
37875: IFFALSE 37892
// bpoints := bpoints * 1.1 ;
37877: LD_ADDR_VAR 0 10
37881: PUSH
37882: LD_VAR 0 10
37886: PUSH
37887: LD_REAL  1.10000000000000E+0000
37890: MUL
37891: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
37892: LD_ADDR_VAR 0 10
37896: PUSH
37897: LD_VAR 0 10
37901: PUSH
37902: LD_VAR 0 6
37906: PPUSH
37907: LD_INT 1
37909: PPUSH
37910: CALL_OW 259
37914: PUSH
37915: LD_REAL  1.15000000000000E+0000
37918: MUL
37919: MUL
37920: ST_TO_ADDR
// end ; unit_vehicle :
37921: GO 38749
37923: LD_INT 2
37925: DOUBLE
37926: EQUAL
37927: IFTRUE 37931
37929: GO 38737
37931: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
37932: LD_VAR 0 6
37936: PPUSH
37937: CALL_OW 264
37941: PUSH
37942: LD_INT 2
37944: PUSH
37945: LD_INT 42
37947: PUSH
37948: LD_INT 24
37950: PUSH
37951: EMPTY
37952: LIST
37953: LIST
37954: LIST
37955: IN
37956: IFFALSE 37977
// points := [ 25 , 5 , 3 ] ;
37958: LD_ADDR_VAR 0 9
37962: PUSH
37963: LD_INT 25
37965: PUSH
37966: LD_INT 5
37968: PUSH
37969: LD_INT 3
37971: PUSH
37972: EMPTY
37973: LIST
37974: LIST
37975: LIST
37976: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
37977: LD_VAR 0 6
37981: PPUSH
37982: CALL_OW 264
37986: PUSH
37987: LD_INT 4
37989: PUSH
37990: LD_INT 43
37992: PUSH
37993: LD_INT 25
37995: PUSH
37996: EMPTY
37997: LIST
37998: LIST
37999: LIST
38000: IN
38001: IFFALSE 38022
// points := [ 40 , 15 , 5 ] ;
38003: LD_ADDR_VAR 0 9
38007: PUSH
38008: LD_INT 40
38010: PUSH
38011: LD_INT 15
38013: PUSH
38014: LD_INT 5
38016: PUSH
38017: EMPTY
38018: LIST
38019: LIST
38020: LIST
38021: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
38022: LD_VAR 0 6
38026: PPUSH
38027: CALL_OW 264
38031: PUSH
38032: LD_INT 3
38034: PUSH
38035: LD_INT 23
38037: PUSH
38038: EMPTY
38039: LIST
38040: LIST
38041: IN
38042: IFFALSE 38063
// points := [ 7 , 25 , 8 ] ;
38044: LD_ADDR_VAR 0 9
38048: PUSH
38049: LD_INT 7
38051: PUSH
38052: LD_INT 25
38054: PUSH
38055: LD_INT 8
38057: PUSH
38058: EMPTY
38059: LIST
38060: LIST
38061: LIST
38062: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
38063: LD_VAR 0 6
38067: PPUSH
38068: CALL_OW 264
38072: PUSH
38073: LD_INT 5
38075: PUSH
38076: LD_INT 27
38078: PUSH
38079: LD_INT 44
38081: PUSH
38082: EMPTY
38083: LIST
38084: LIST
38085: LIST
38086: IN
38087: IFFALSE 38108
// points := [ 14 , 50 , 16 ] ;
38089: LD_ADDR_VAR 0 9
38093: PUSH
38094: LD_INT 14
38096: PUSH
38097: LD_INT 50
38099: PUSH
38100: LD_INT 16
38102: PUSH
38103: EMPTY
38104: LIST
38105: LIST
38106: LIST
38107: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
38108: LD_VAR 0 6
38112: PPUSH
38113: CALL_OW 264
38117: PUSH
38118: LD_INT 6
38120: PUSH
38121: LD_INT 46
38123: PUSH
38124: EMPTY
38125: LIST
38126: LIST
38127: IN
38128: IFFALSE 38149
// points := [ 32 , 120 , 70 ] ;
38130: LD_ADDR_VAR 0 9
38134: PUSH
38135: LD_INT 32
38137: PUSH
38138: LD_INT 120
38140: PUSH
38141: LD_INT 70
38143: PUSH
38144: EMPTY
38145: LIST
38146: LIST
38147: LIST
38148: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
38149: LD_VAR 0 6
38153: PPUSH
38154: CALL_OW 264
38158: PUSH
38159: LD_INT 7
38161: PUSH
38162: LD_INT 28
38164: PUSH
38165: LD_INT 45
38167: PUSH
38168: LD_INT 92
38170: PUSH
38171: EMPTY
38172: LIST
38173: LIST
38174: LIST
38175: LIST
38176: IN
38177: IFFALSE 38198
// points := [ 35 , 20 , 45 ] ;
38179: LD_ADDR_VAR 0 9
38183: PUSH
38184: LD_INT 35
38186: PUSH
38187: LD_INT 20
38189: PUSH
38190: LD_INT 45
38192: PUSH
38193: EMPTY
38194: LIST
38195: LIST
38196: LIST
38197: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
38198: LD_VAR 0 6
38202: PPUSH
38203: CALL_OW 264
38207: PUSH
38208: LD_INT 47
38210: PUSH
38211: EMPTY
38212: LIST
38213: IN
38214: IFFALSE 38235
// points := [ 67 , 45 , 75 ] ;
38216: LD_ADDR_VAR 0 9
38220: PUSH
38221: LD_INT 67
38223: PUSH
38224: LD_INT 45
38226: PUSH
38227: LD_INT 75
38229: PUSH
38230: EMPTY
38231: LIST
38232: LIST
38233: LIST
38234: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
38235: LD_VAR 0 6
38239: PPUSH
38240: CALL_OW 264
38244: PUSH
38245: LD_INT 26
38247: PUSH
38248: EMPTY
38249: LIST
38250: IN
38251: IFFALSE 38272
// points := [ 120 , 30 , 80 ] ;
38253: LD_ADDR_VAR 0 9
38257: PUSH
38258: LD_INT 120
38260: PUSH
38261: LD_INT 30
38263: PUSH
38264: LD_INT 80
38266: PUSH
38267: EMPTY
38268: LIST
38269: LIST
38270: LIST
38271: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
38272: LD_VAR 0 6
38276: PPUSH
38277: CALL_OW 264
38281: PUSH
38282: LD_INT 22
38284: PUSH
38285: EMPTY
38286: LIST
38287: IN
38288: IFFALSE 38309
// points := [ 40 , 1 , 1 ] ;
38290: LD_ADDR_VAR 0 9
38294: PUSH
38295: LD_INT 40
38297: PUSH
38298: LD_INT 1
38300: PUSH
38301: LD_INT 1
38303: PUSH
38304: EMPTY
38305: LIST
38306: LIST
38307: LIST
38308: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
38309: LD_VAR 0 6
38313: PPUSH
38314: CALL_OW 264
38318: PUSH
38319: LD_INT 29
38321: PUSH
38322: EMPTY
38323: LIST
38324: IN
38325: IFFALSE 38346
// points := [ 70 , 200 , 400 ] ;
38327: LD_ADDR_VAR 0 9
38331: PUSH
38332: LD_INT 70
38334: PUSH
38335: LD_INT 200
38337: PUSH
38338: LD_INT 400
38340: PUSH
38341: EMPTY
38342: LIST
38343: LIST
38344: LIST
38345: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
38346: LD_VAR 0 6
38350: PPUSH
38351: CALL_OW 264
38355: PUSH
38356: LD_INT 14
38358: PUSH
38359: LD_INT 53
38361: PUSH
38362: EMPTY
38363: LIST
38364: LIST
38365: IN
38366: IFFALSE 38387
// points := [ 40 , 10 , 20 ] ;
38368: LD_ADDR_VAR 0 9
38372: PUSH
38373: LD_INT 40
38375: PUSH
38376: LD_INT 10
38378: PUSH
38379: LD_INT 20
38381: PUSH
38382: EMPTY
38383: LIST
38384: LIST
38385: LIST
38386: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
38387: LD_VAR 0 6
38391: PPUSH
38392: CALL_OW 264
38396: PUSH
38397: LD_INT 9
38399: PUSH
38400: EMPTY
38401: LIST
38402: IN
38403: IFFALSE 38424
// points := [ 5 , 70 , 20 ] ;
38405: LD_ADDR_VAR 0 9
38409: PUSH
38410: LD_INT 5
38412: PUSH
38413: LD_INT 70
38415: PUSH
38416: LD_INT 20
38418: PUSH
38419: EMPTY
38420: LIST
38421: LIST
38422: LIST
38423: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
38424: LD_VAR 0 6
38428: PPUSH
38429: CALL_OW 264
38433: PUSH
38434: LD_INT 10
38436: PUSH
38437: EMPTY
38438: LIST
38439: IN
38440: IFFALSE 38461
// points := [ 35 , 110 , 70 ] ;
38442: LD_ADDR_VAR 0 9
38446: PUSH
38447: LD_INT 35
38449: PUSH
38450: LD_INT 110
38452: PUSH
38453: LD_INT 70
38455: PUSH
38456: EMPTY
38457: LIST
38458: LIST
38459: LIST
38460: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
38461: LD_VAR 0 6
38465: PPUSH
38466: CALL_OW 265
38470: PUSH
38471: LD_INT 25
38473: EQUAL
38474: IFFALSE 38495
// points := [ 80 , 65 , 100 ] ;
38476: LD_ADDR_VAR 0 9
38480: PUSH
38481: LD_INT 80
38483: PUSH
38484: LD_INT 65
38486: PUSH
38487: LD_INT 100
38489: PUSH
38490: EMPTY
38491: LIST
38492: LIST
38493: LIST
38494: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
38495: LD_VAR 0 6
38499: PPUSH
38500: CALL_OW 263
38504: PUSH
38505: LD_INT 1
38507: EQUAL
38508: IFFALSE 38543
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
38510: LD_ADDR_VAR 0 10
38514: PUSH
38515: LD_VAR 0 10
38519: PUSH
38520: LD_VAR 0 6
38524: PPUSH
38525: CALL_OW 311
38529: PPUSH
38530: LD_INT 3
38532: PPUSH
38533: CALL_OW 259
38537: PUSH
38538: LD_INT 4
38540: MUL
38541: MUL
38542: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
38543: LD_VAR 0 6
38547: PPUSH
38548: CALL_OW 263
38552: PUSH
38553: LD_INT 2
38555: EQUAL
38556: IFFALSE 38607
// begin j := IsControledBy ( i ) ;
38558: LD_ADDR_VAR 0 7
38562: PUSH
38563: LD_VAR 0 6
38567: PPUSH
38568: CALL_OW 312
38572: ST_TO_ADDR
// if j then
38573: LD_VAR 0 7
38577: IFFALSE 38607
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
38579: LD_ADDR_VAR 0 10
38583: PUSH
38584: LD_VAR 0 10
38588: PUSH
38589: LD_VAR 0 7
38593: PPUSH
38594: LD_INT 3
38596: PPUSH
38597: CALL_OW 259
38601: PUSH
38602: LD_INT 3
38604: MUL
38605: MUL
38606: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
38607: LD_VAR 0 6
38611: PPUSH
38612: CALL_OW 264
38616: PUSH
38617: LD_INT 5
38619: PUSH
38620: LD_INT 6
38622: PUSH
38623: LD_INT 46
38625: PUSH
38626: LD_INT 44
38628: PUSH
38629: LD_INT 47
38631: PUSH
38632: LD_INT 45
38634: PUSH
38635: LD_INT 28
38637: PUSH
38638: LD_INT 7
38640: PUSH
38641: LD_INT 27
38643: PUSH
38644: LD_INT 29
38646: PUSH
38647: EMPTY
38648: LIST
38649: LIST
38650: LIST
38651: LIST
38652: LIST
38653: LIST
38654: LIST
38655: LIST
38656: LIST
38657: LIST
38658: IN
38659: PUSH
38660: LD_VAR 0 1
38664: PPUSH
38665: LD_INT 52
38667: PPUSH
38668: CALL_OW 321
38672: PUSH
38673: LD_INT 2
38675: EQUAL
38676: AND
38677: IFFALSE 38694
// bpoints := bpoints * 1.2 ;
38679: LD_ADDR_VAR 0 10
38683: PUSH
38684: LD_VAR 0 10
38688: PUSH
38689: LD_REAL  1.20000000000000E+0000
38692: MUL
38693: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
38694: LD_VAR 0 6
38698: PPUSH
38699: CALL_OW 264
38703: PUSH
38704: LD_INT 6
38706: PUSH
38707: LD_INT 46
38709: PUSH
38710: LD_INT 47
38712: PUSH
38713: EMPTY
38714: LIST
38715: LIST
38716: LIST
38717: IN
38718: IFFALSE 38735
// bpoints := bpoints * 1.2 ;
38720: LD_ADDR_VAR 0 10
38724: PUSH
38725: LD_VAR 0 10
38729: PUSH
38730: LD_REAL  1.20000000000000E+0000
38733: MUL
38734: ST_TO_ADDR
// end ; unit_building :
38735: GO 38749
38737: LD_INT 3
38739: DOUBLE
38740: EQUAL
38741: IFTRUE 38745
38743: GO 38748
38745: POP
// ; end ;
38746: GO 38749
38748: POP
// for j = 1 to 3 do
38749: LD_ADDR_VAR 0 7
38753: PUSH
38754: DOUBLE
38755: LD_INT 1
38757: DEC
38758: ST_TO_ADDR
38759: LD_INT 3
38761: PUSH
38762: FOR_TO
38763: IFFALSE 38816
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
38765: LD_ADDR_VAR 0 5
38769: PUSH
38770: LD_VAR 0 5
38774: PPUSH
38775: LD_VAR 0 7
38779: PPUSH
38780: LD_VAR 0 5
38784: PUSH
38785: LD_VAR 0 7
38789: ARRAY
38790: PUSH
38791: LD_VAR 0 9
38795: PUSH
38796: LD_VAR 0 7
38800: ARRAY
38801: PUSH
38802: LD_VAR 0 10
38806: MUL
38807: PLUS
38808: PPUSH
38809: CALL_OW 1
38813: ST_TO_ADDR
38814: GO 38762
38816: POP
38817: POP
// end ;
38818: GO 37297
38820: POP
38821: POP
// result := Replace ( result , 4 , tmp ) ;
38822: LD_ADDR_VAR 0 5
38826: PUSH
38827: LD_VAR 0 5
38831: PPUSH
38832: LD_INT 4
38834: PPUSH
38835: LD_VAR 0 8
38839: PPUSH
38840: CALL_OW 1
38844: ST_TO_ADDR
// end ;
38845: LD_VAR 0 5
38849: RET
// export function DangerAtRange ( unit , range ) ; begin
38850: LD_INT 0
38852: PPUSH
// if not unit then
38853: LD_VAR 0 1
38857: NOT
38858: IFFALSE 38862
// exit ;
38860: GO 38907
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
38862: LD_ADDR_VAR 0 3
38866: PUSH
38867: LD_VAR 0 1
38871: PPUSH
38872: CALL_OW 255
38876: PPUSH
38877: LD_VAR 0 1
38881: PPUSH
38882: CALL_OW 250
38886: PPUSH
38887: LD_VAR 0 1
38891: PPUSH
38892: CALL_OW 251
38896: PPUSH
38897: LD_VAR 0 2
38901: PPUSH
38902: CALL 37149 0 4
38906: ST_TO_ADDR
// end ;
38907: LD_VAR 0 3
38911: RET
// export function DangerInArea ( side , area ) ; begin
38912: LD_INT 0
38914: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
38915: LD_ADDR_VAR 0 3
38919: PUSH
38920: LD_VAR 0 2
38924: PPUSH
38925: LD_INT 81
38927: PUSH
38928: LD_VAR 0 1
38932: PUSH
38933: EMPTY
38934: LIST
38935: LIST
38936: PPUSH
38937: CALL_OW 70
38941: ST_TO_ADDR
// end ;
38942: LD_VAR 0 3
38946: RET
// export function IsExtension ( b ) ; begin
38947: LD_INT 0
38949: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
38950: LD_ADDR_VAR 0 2
38954: PUSH
38955: LD_VAR 0 1
38959: PUSH
38960: LD_INT 23
38962: PUSH
38963: LD_INT 20
38965: PUSH
38966: LD_INT 22
38968: PUSH
38969: LD_INT 17
38971: PUSH
38972: LD_INT 24
38974: PUSH
38975: LD_INT 21
38977: PUSH
38978: LD_INT 19
38980: PUSH
38981: LD_INT 16
38983: PUSH
38984: LD_INT 25
38986: PUSH
38987: LD_INT 18
38989: PUSH
38990: EMPTY
38991: LIST
38992: LIST
38993: LIST
38994: LIST
38995: LIST
38996: LIST
38997: LIST
38998: LIST
38999: LIST
39000: LIST
39001: IN
39002: ST_TO_ADDR
// end ;
39003: LD_VAR 0 2
39007: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
39008: LD_INT 0
39010: PPUSH
39011: PPUSH
39012: PPUSH
// result := [ ] ;
39013: LD_ADDR_VAR 0 4
39017: PUSH
39018: EMPTY
39019: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
39020: LD_ADDR_VAR 0 5
39024: PUSH
39025: LD_VAR 0 2
39029: PPUSH
39030: LD_INT 21
39032: PUSH
39033: LD_INT 3
39035: PUSH
39036: EMPTY
39037: LIST
39038: LIST
39039: PPUSH
39040: CALL_OW 70
39044: ST_TO_ADDR
// if not tmp then
39045: LD_VAR 0 5
39049: NOT
39050: IFFALSE 39054
// exit ;
39052: GO 39118
// if checkLink then
39054: LD_VAR 0 3
39058: IFFALSE 39108
// begin for i in tmp do
39060: LD_ADDR_VAR 0 6
39064: PUSH
39065: LD_VAR 0 5
39069: PUSH
39070: FOR_IN
39071: IFFALSE 39106
// if GetBase ( i ) <> base then
39073: LD_VAR 0 6
39077: PPUSH
39078: CALL_OW 274
39082: PUSH
39083: LD_VAR 0 1
39087: NONEQUAL
39088: IFFALSE 39104
// ComLinkToBase ( base , i ) ;
39090: LD_VAR 0 1
39094: PPUSH
39095: LD_VAR 0 6
39099: PPUSH
39100: CALL_OW 169
39104: GO 39070
39106: POP
39107: POP
// end ; result := tmp ;
39108: LD_ADDR_VAR 0 4
39112: PUSH
39113: LD_VAR 0 5
39117: ST_TO_ADDR
// end ;
39118: LD_VAR 0 4
39122: RET
// export function ComComplete ( units , b ) ; var i ; begin
39123: LD_INT 0
39125: PPUSH
39126: PPUSH
// if not units then
39127: LD_VAR 0 1
39131: NOT
39132: IFFALSE 39136
// exit ;
39134: GO 39226
// for i in units do
39136: LD_ADDR_VAR 0 4
39140: PUSH
39141: LD_VAR 0 1
39145: PUSH
39146: FOR_IN
39147: IFFALSE 39224
// if BuildingStatus ( b ) = bs_build then
39149: LD_VAR 0 2
39153: PPUSH
39154: CALL_OW 461
39158: PUSH
39159: LD_INT 1
39161: EQUAL
39162: IFFALSE 39222
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
39164: LD_VAR 0 4
39168: PPUSH
39169: LD_STRING h
39171: PUSH
39172: LD_VAR 0 2
39176: PPUSH
39177: CALL_OW 250
39181: PUSH
39182: LD_VAR 0 2
39186: PPUSH
39187: CALL_OW 251
39191: PUSH
39192: LD_VAR 0 2
39196: PUSH
39197: LD_INT 0
39199: PUSH
39200: LD_INT 0
39202: PUSH
39203: LD_INT 0
39205: PUSH
39206: EMPTY
39207: LIST
39208: LIST
39209: LIST
39210: LIST
39211: LIST
39212: LIST
39213: LIST
39214: PUSH
39215: EMPTY
39216: LIST
39217: PPUSH
39218: CALL_OW 446
39222: GO 39146
39224: POP
39225: POP
// end ;
39226: LD_VAR 0 3
39230: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
39231: LD_INT 0
39233: PPUSH
39234: PPUSH
39235: PPUSH
39236: PPUSH
39237: PPUSH
39238: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
39239: LD_VAR 0 1
39243: NOT
39244: PUSH
39245: LD_VAR 0 1
39249: PPUSH
39250: CALL_OW 263
39254: PUSH
39255: LD_INT 2
39257: NONEQUAL
39258: OR
39259: IFFALSE 39263
// exit ;
39261: GO 39579
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
39263: LD_ADDR_VAR 0 6
39267: PUSH
39268: LD_INT 22
39270: PUSH
39271: LD_VAR 0 1
39275: PPUSH
39276: CALL_OW 255
39280: PUSH
39281: EMPTY
39282: LIST
39283: LIST
39284: PUSH
39285: LD_INT 2
39287: PUSH
39288: LD_INT 30
39290: PUSH
39291: LD_INT 36
39293: PUSH
39294: EMPTY
39295: LIST
39296: LIST
39297: PUSH
39298: LD_INT 34
39300: PUSH
39301: LD_INT 31
39303: PUSH
39304: EMPTY
39305: LIST
39306: LIST
39307: PUSH
39308: EMPTY
39309: LIST
39310: LIST
39311: LIST
39312: PUSH
39313: EMPTY
39314: LIST
39315: LIST
39316: PPUSH
39317: CALL_OW 69
39321: ST_TO_ADDR
// if not tmp then
39322: LD_VAR 0 6
39326: NOT
39327: IFFALSE 39331
// exit ;
39329: GO 39579
// result := [ ] ;
39331: LD_ADDR_VAR 0 2
39335: PUSH
39336: EMPTY
39337: ST_TO_ADDR
// for i in tmp do
39338: LD_ADDR_VAR 0 3
39342: PUSH
39343: LD_VAR 0 6
39347: PUSH
39348: FOR_IN
39349: IFFALSE 39420
// begin t := UnitsInside ( i ) ;
39351: LD_ADDR_VAR 0 4
39355: PUSH
39356: LD_VAR 0 3
39360: PPUSH
39361: CALL_OW 313
39365: ST_TO_ADDR
// if t then
39366: LD_VAR 0 4
39370: IFFALSE 39418
// for j in t do
39372: LD_ADDR_VAR 0 7
39376: PUSH
39377: LD_VAR 0 4
39381: PUSH
39382: FOR_IN
39383: IFFALSE 39416
// result := Replace ( result , result + 1 , j ) ;
39385: LD_ADDR_VAR 0 2
39389: PUSH
39390: LD_VAR 0 2
39394: PPUSH
39395: LD_VAR 0 2
39399: PUSH
39400: LD_INT 1
39402: PLUS
39403: PPUSH
39404: LD_VAR 0 7
39408: PPUSH
39409: CALL_OW 1
39413: ST_TO_ADDR
39414: GO 39382
39416: POP
39417: POP
// end ;
39418: GO 39348
39420: POP
39421: POP
// if not result then
39422: LD_VAR 0 2
39426: NOT
39427: IFFALSE 39431
// exit ;
39429: GO 39579
// mech := result [ 1 ] ;
39431: LD_ADDR_VAR 0 5
39435: PUSH
39436: LD_VAR 0 2
39440: PUSH
39441: LD_INT 1
39443: ARRAY
39444: ST_TO_ADDR
// if result > 1 then
39445: LD_VAR 0 2
39449: PUSH
39450: LD_INT 1
39452: GREATER
39453: IFFALSE 39565
// begin for i = 2 to result do
39455: LD_ADDR_VAR 0 3
39459: PUSH
39460: DOUBLE
39461: LD_INT 2
39463: DEC
39464: ST_TO_ADDR
39465: LD_VAR 0 2
39469: PUSH
39470: FOR_TO
39471: IFFALSE 39563
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
39473: LD_ADDR_VAR 0 4
39477: PUSH
39478: LD_VAR 0 2
39482: PUSH
39483: LD_VAR 0 3
39487: ARRAY
39488: PPUSH
39489: LD_INT 3
39491: PPUSH
39492: CALL_OW 259
39496: PUSH
39497: LD_VAR 0 2
39501: PUSH
39502: LD_VAR 0 3
39506: ARRAY
39507: PPUSH
39508: CALL_OW 432
39512: MINUS
39513: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
39514: LD_VAR 0 4
39518: PUSH
39519: LD_VAR 0 5
39523: PPUSH
39524: LD_INT 3
39526: PPUSH
39527: CALL_OW 259
39531: PUSH
39532: LD_VAR 0 5
39536: PPUSH
39537: CALL_OW 432
39541: MINUS
39542: GREATEREQUAL
39543: IFFALSE 39561
// mech := result [ i ] ;
39545: LD_ADDR_VAR 0 5
39549: PUSH
39550: LD_VAR 0 2
39554: PUSH
39555: LD_VAR 0 3
39559: ARRAY
39560: ST_TO_ADDR
// end ;
39561: GO 39470
39563: POP
39564: POP
// end ; ComLinkTo ( vehicle , mech ) ;
39565: LD_VAR 0 1
39569: PPUSH
39570: LD_VAR 0 5
39574: PPUSH
39575: CALL_OW 135
// end ;
39579: LD_VAR 0 2
39583: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
39584: LD_INT 0
39586: PPUSH
39587: PPUSH
39588: PPUSH
39589: PPUSH
39590: PPUSH
39591: PPUSH
39592: PPUSH
39593: PPUSH
39594: PPUSH
39595: PPUSH
39596: PPUSH
39597: PPUSH
39598: PPUSH
// result := [ ] ;
39599: LD_ADDR_VAR 0 7
39603: PUSH
39604: EMPTY
39605: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
39606: LD_VAR 0 1
39610: PPUSH
39611: CALL_OW 266
39615: PUSH
39616: LD_INT 0
39618: PUSH
39619: LD_INT 1
39621: PUSH
39622: EMPTY
39623: LIST
39624: LIST
39625: IN
39626: NOT
39627: IFFALSE 39631
// exit ;
39629: GO 41265
// if name then
39631: LD_VAR 0 3
39635: IFFALSE 39651
// SetBName ( base_dep , name ) ;
39637: LD_VAR 0 1
39641: PPUSH
39642: LD_VAR 0 3
39646: PPUSH
39647: CALL_OW 500
// base := GetBase ( base_dep ) ;
39651: LD_ADDR_VAR 0 15
39655: PUSH
39656: LD_VAR 0 1
39660: PPUSH
39661: CALL_OW 274
39665: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
39666: LD_ADDR_VAR 0 16
39670: PUSH
39671: LD_VAR 0 1
39675: PPUSH
39676: CALL_OW 255
39680: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
39681: LD_ADDR_VAR 0 17
39685: PUSH
39686: LD_VAR 0 1
39690: PPUSH
39691: CALL_OW 248
39695: ST_TO_ADDR
// if sources then
39696: LD_VAR 0 5
39700: IFFALSE 39747
// for i = 1 to 3 do
39702: LD_ADDR_VAR 0 8
39706: PUSH
39707: DOUBLE
39708: LD_INT 1
39710: DEC
39711: ST_TO_ADDR
39712: LD_INT 3
39714: PUSH
39715: FOR_TO
39716: IFFALSE 39745
// AddResourceType ( base , i , sources [ i ] ) ;
39718: LD_VAR 0 15
39722: PPUSH
39723: LD_VAR 0 8
39727: PPUSH
39728: LD_VAR 0 5
39732: PUSH
39733: LD_VAR 0 8
39737: ARRAY
39738: PPUSH
39739: CALL_OW 276
39743: GO 39715
39745: POP
39746: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
39747: LD_ADDR_VAR 0 18
39751: PUSH
39752: LD_VAR 0 15
39756: PPUSH
39757: LD_VAR 0 2
39761: PPUSH
39762: LD_INT 1
39764: PPUSH
39765: CALL 39008 0 3
39769: ST_TO_ADDR
// InitHc ;
39770: CALL_OW 19
// InitUc ;
39774: CALL_OW 18
// uc_side := side ;
39778: LD_ADDR_OWVAR 20
39782: PUSH
39783: LD_VAR 0 16
39787: ST_TO_ADDR
// uc_nation := nation ;
39788: LD_ADDR_OWVAR 21
39792: PUSH
39793: LD_VAR 0 17
39797: ST_TO_ADDR
// if buildings then
39798: LD_VAR 0 18
39802: IFFALSE 41124
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
39804: LD_ADDR_VAR 0 19
39808: PUSH
39809: LD_VAR 0 18
39813: PPUSH
39814: LD_INT 2
39816: PUSH
39817: LD_INT 30
39819: PUSH
39820: LD_INT 29
39822: PUSH
39823: EMPTY
39824: LIST
39825: LIST
39826: PUSH
39827: LD_INT 30
39829: PUSH
39830: LD_INT 30
39832: PUSH
39833: EMPTY
39834: LIST
39835: LIST
39836: PUSH
39837: EMPTY
39838: LIST
39839: LIST
39840: LIST
39841: PPUSH
39842: CALL_OW 72
39846: ST_TO_ADDR
// if tmp then
39847: LD_VAR 0 19
39851: IFFALSE 39899
// for i in tmp do
39853: LD_ADDR_VAR 0 8
39857: PUSH
39858: LD_VAR 0 19
39862: PUSH
39863: FOR_IN
39864: IFFALSE 39897
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
39866: LD_VAR 0 8
39870: PPUSH
39871: CALL_OW 250
39875: PPUSH
39876: LD_VAR 0 8
39880: PPUSH
39881: CALL_OW 251
39885: PPUSH
39886: LD_VAR 0 16
39890: PPUSH
39891: CALL_OW 441
39895: GO 39863
39897: POP
39898: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
39899: LD_VAR 0 18
39903: PPUSH
39904: LD_INT 2
39906: PUSH
39907: LD_INT 30
39909: PUSH
39910: LD_INT 32
39912: PUSH
39913: EMPTY
39914: LIST
39915: LIST
39916: PUSH
39917: LD_INT 30
39919: PUSH
39920: LD_INT 33
39922: PUSH
39923: EMPTY
39924: LIST
39925: LIST
39926: PUSH
39927: EMPTY
39928: LIST
39929: LIST
39930: LIST
39931: PPUSH
39932: CALL_OW 72
39936: IFFALSE 40024
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
39938: LD_ADDR_VAR 0 8
39942: PUSH
39943: LD_VAR 0 18
39947: PPUSH
39948: LD_INT 2
39950: PUSH
39951: LD_INT 30
39953: PUSH
39954: LD_INT 32
39956: PUSH
39957: EMPTY
39958: LIST
39959: LIST
39960: PUSH
39961: LD_INT 30
39963: PUSH
39964: LD_INT 33
39966: PUSH
39967: EMPTY
39968: LIST
39969: LIST
39970: PUSH
39971: EMPTY
39972: LIST
39973: LIST
39974: LIST
39975: PPUSH
39976: CALL_OW 72
39980: PUSH
39981: FOR_IN
39982: IFFALSE 40022
// begin if not GetBWeapon ( i ) then
39984: LD_VAR 0 8
39988: PPUSH
39989: CALL_OW 269
39993: NOT
39994: IFFALSE 40020
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
39996: LD_VAR 0 8
40000: PPUSH
40001: LD_VAR 0 8
40005: PPUSH
40006: LD_VAR 0 2
40010: PPUSH
40011: CALL 41270 0 2
40015: PPUSH
40016: CALL_OW 431
// end ;
40020: GO 39981
40022: POP
40023: POP
// end ; for i = 1 to personel do
40024: LD_ADDR_VAR 0 8
40028: PUSH
40029: DOUBLE
40030: LD_INT 1
40032: DEC
40033: ST_TO_ADDR
40034: LD_VAR 0 6
40038: PUSH
40039: FOR_TO
40040: IFFALSE 41104
// begin if i > 4 then
40042: LD_VAR 0 8
40046: PUSH
40047: LD_INT 4
40049: GREATER
40050: IFFALSE 40054
// break ;
40052: GO 41104
// case i of 1 :
40054: LD_VAR 0 8
40058: PUSH
40059: LD_INT 1
40061: DOUBLE
40062: EQUAL
40063: IFTRUE 40067
40065: GO 40147
40067: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
40068: LD_ADDR_VAR 0 12
40072: PUSH
40073: LD_VAR 0 18
40077: PPUSH
40078: LD_INT 22
40080: PUSH
40081: LD_VAR 0 16
40085: PUSH
40086: EMPTY
40087: LIST
40088: LIST
40089: PUSH
40090: LD_INT 58
40092: PUSH
40093: EMPTY
40094: LIST
40095: PUSH
40096: LD_INT 2
40098: PUSH
40099: LD_INT 30
40101: PUSH
40102: LD_INT 32
40104: PUSH
40105: EMPTY
40106: LIST
40107: LIST
40108: PUSH
40109: LD_INT 30
40111: PUSH
40112: LD_INT 4
40114: PUSH
40115: EMPTY
40116: LIST
40117: LIST
40118: PUSH
40119: LD_INT 30
40121: PUSH
40122: LD_INT 5
40124: PUSH
40125: EMPTY
40126: LIST
40127: LIST
40128: PUSH
40129: EMPTY
40130: LIST
40131: LIST
40132: LIST
40133: LIST
40134: PUSH
40135: EMPTY
40136: LIST
40137: LIST
40138: LIST
40139: PPUSH
40140: CALL_OW 72
40144: ST_TO_ADDR
40145: GO 40369
40147: LD_INT 2
40149: DOUBLE
40150: EQUAL
40151: IFTRUE 40155
40153: GO 40217
40155: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
40156: LD_ADDR_VAR 0 12
40160: PUSH
40161: LD_VAR 0 18
40165: PPUSH
40166: LD_INT 22
40168: PUSH
40169: LD_VAR 0 16
40173: PUSH
40174: EMPTY
40175: LIST
40176: LIST
40177: PUSH
40178: LD_INT 2
40180: PUSH
40181: LD_INT 30
40183: PUSH
40184: LD_INT 0
40186: PUSH
40187: EMPTY
40188: LIST
40189: LIST
40190: PUSH
40191: LD_INT 30
40193: PUSH
40194: LD_INT 1
40196: PUSH
40197: EMPTY
40198: LIST
40199: LIST
40200: PUSH
40201: EMPTY
40202: LIST
40203: LIST
40204: LIST
40205: PUSH
40206: EMPTY
40207: LIST
40208: LIST
40209: PPUSH
40210: CALL_OW 72
40214: ST_TO_ADDR
40215: GO 40369
40217: LD_INT 3
40219: DOUBLE
40220: EQUAL
40221: IFTRUE 40225
40223: GO 40287
40225: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
40226: LD_ADDR_VAR 0 12
40230: PUSH
40231: LD_VAR 0 18
40235: PPUSH
40236: LD_INT 22
40238: PUSH
40239: LD_VAR 0 16
40243: PUSH
40244: EMPTY
40245: LIST
40246: LIST
40247: PUSH
40248: LD_INT 2
40250: PUSH
40251: LD_INT 30
40253: PUSH
40254: LD_INT 2
40256: PUSH
40257: EMPTY
40258: LIST
40259: LIST
40260: PUSH
40261: LD_INT 30
40263: PUSH
40264: LD_INT 3
40266: PUSH
40267: EMPTY
40268: LIST
40269: LIST
40270: PUSH
40271: EMPTY
40272: LIST
40273: LIST
40274: LIST
40275: PUSH
40276: EMPTY
40277: LIST
40278: LIST
40279: PPUSH
40280: CALL_OW 72
40284: ST_TO_ADDR
40285: GO 40369
40287: LD_INT 4
40289: DOUBLE
40290: EQUAL
40291: IFTRUE 40295
40293: GO 40368
40295: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
40296: LD_ADDR_VAR 0 12
40300: PUSH
40301: LD_VAR 0 18
40305: PPUSH
40306: LD_INT 22
40308: PUSH
40309: LD_VAR 0 16
40313: PUSH
40314: EMPTY
40315: LIST
40316: LIST
40317: PUSH
40318: LD_INT 2
40320: PUSH
40321: LD_INT 30
40323: PUSH
40324: LD_INT 6
40326: PUSH
40327: EMPTY
40328: LIST
40329: LIST
40330: PUSH
40331: LD_INT 30
40333: PUSH
40334: LD_INT 7
40336: PUSH
40337: EMPTY
40338: LIST
40339: LIST
40340: PUSH
40341: LD_INT 30
40343: PUSH
40344: LD_INT 8
40346: PUSH
40347: EMPTY
40348: LIST
40349: LIST
40350: PUSH
40351: EMPTY
40352: LIST
40353: LIST
40354: LIST
40355: LIST
40356: PUSH
40357: EMPTY
40358: LIST
40359: LIST
40360: PPUSH
40361: CALL_OW 72
40365: ST_TO_ADDR
40366: GO 40369
40368: POP
// if i = 1 then
40369: LD_VAR 0 8
40373: PUSH
40374: LD_INT 1
40376: EQUAL
40377: IFFALSE 40488
// begin tmp := [ ] ;
40379: LD_ADDR_VAR 0 19
40383: PUSH
40384: EMPTY
40385: ST_TO_ADDR
// for j in f do
40386: LD_ADDR_VAR 0 9
40390: PUSH
40391: LD_VAR 0 12
40395: PUSH
40396: FOR_IN
40397: IFFALSE 40470
// if GetBType ( j ) = b_bunker then
40399: LD_VAR 0 9
40403: PPUSH
40404: CALL_OW 266
40408: PUSH
40409: LD_INT 32
40411: EQUAL
40412: IFFALSE 40439
// tmp := Insert ( tmp , 1 , j ) else
40414: LD_ADDR_VAR 0 19
40418: PUSH
40419: LD_VAR 0 19
40423: PPUSH
40424: LD_INT 1
40426: PPUSH
40427: LD_VAR 0 9
40431: PPUSH
40432: CALL_OW 2
40436: ST_TO_ADDR
40437: GO 40468
// tmp := Insert ( tmp , tmp + 1 , j ) ;
40439: LD_ADDR_VAR 0 19
40443: PUSH
40444: LD_VAR 0 19
40448: PPUSH
40449: LD_VAR 0 19
40453: PUSH
40454: LD_INT 1
40456: PLUS
40457: PPUSH
40458: LD_VAR 0 9
40462: PPUSH
40463: CALL_OW 2
40467: ST_TO_ADDR
40468: GO 40396
40470: POP
40471: POP
// if tmp then
40472: LD_VAR 0 19
40476: IFFALSE 40488
// f := tmp ;
40478: LD_ADDR_VAR 0 12
40482: PUSH
40483: LD_VAR 0 19
40487: ST_TO_ADDR
// end ; x := personel [ i ] ;
40488: LD_ADDR_VAR 0 13
40492: PUSH
40493: LD_VAR 0 6
40497: PUSH
40498: LD_VAR 0 8
40502: ARRAY
40503: ST_TO_ADDR
// if x = - 1 then
40504: LD_VAR 0 13
40508: PUSH
40509: LD_INT 1
40511: NEG
40512: EQUAL
40513: IFFALSE 40722
// begin for j in f do
40515: LD_ADDR_VAR 0 9
40519: PUSH
40520: LD_VAR 0 12
40524: PUSH
40525: FOR_IN
40526: IFFALSE 40718
// repeat InitHc ;
40528: CALL_OW 19
// if GetBType ( j ) = b_barracks then
40532: LD_VAR 0 9
40536: PPUSH
40537: CALL_OW 266
40541: PUSH
40542: LD_INT 5
40544: EQUAL
40545: IFFALSE 40615
// begin if UnitsInside ( j ) < 3 then
40547: LD_VAR 0 9
40551: PPUSH
40552: CALL_OW 313
40556: PUSH
40557: LD_INT 3
40559: LESS
40560: IFFALSE 40596
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
40562: LD_INT 0
40564: PPUSH
40565: LD_INT 5
40567: PUSH
40568: LD_INT 8
40570: PUSH
40571: LD_INT 9
40573: PUSH
40574: EMPTY
40575: LIST
40576: LIST
40577: LIST
40578: PUSH
40579: LD_VAR 0 17
40583: ARRAY
40584: PPUSH
40585: LD_VAR 0 4
40589: PPUSH
40590: CALL_OW 380
40594: GO 40613
// PrepareHuman ( false , i , skill ) ;
40596: LD_INT 0
40598: PPUSH
40599: LD_VAR 0 8
40603: PPUSH
40604: LD_VAR 0 4
40608: PPUSH
40609: CALL_OW 380
// end else
40613: GO 40632
// PrepareHuman ( false , i , skill ) ;
40615: LD_INT 0
40617: PPUSH
40618: LD_VAR 0 8
40622: PPUSH
40623: LD_VAR 0 4
40627: PPUSH
40628: CALL_OW 380
// un := CreateHuman ;
40632: LD_ADDR_VAR 0 14
40636: PUSH
40637: CALL_OW 44
40641: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40642: LD_ADDR_VAR 0 7
40646: PUSH
40647: LD_VAR 0 7
40651: PPUSH
40652: LD_INT 1
40654: PPUSH
40655: LD_VAR 0 14
40659: PPUSH
40660: CALL_OW 2
40664: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
40665: LD_VAR 0 14
40669: PPUSH
40670: LD_VAR 0 9
40674: PPUSH
40675: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
40679: LD_VAR 0 9
40683: PPUSH
40684: CALL_OW 313
40688: PUSH
40689: LD_INT 6
40691: EQUAL
40692: PUSH
40693: LD_VAR 0 9
40697: PPUSH
40698: CALL_OW 266
40702: PUSH
40703: LD_INT 32
40705: PUSH
40706: LD_INT 31
40708: PUSH
40709: EMPTY
40710: LIST
40711: LIST
40712: IN
40713: OR
40714: IFFALSE 40528
40716: GO 40525
40718: POP
40719: POP
// end else
40720: GO 41102
// for j = 1 to x do
40722: LD_ADDR_VAR 0 9
40726: PUSH
40727: DOUBLE
40728: LD_INT 1
40730: DEC
40731: ST_TO_ADDR
40732: LD_VAR 0 13
40736: PUSH
40737: FOR_TO
40738: IFFALSE 41100
// begin InitHc ;
40740: CALL_OW 19
// if not f then
40744: LD_VAR 0 12
40748: NOT
40749: IFFALSE 40838
// begin PrepareHuman ( false , i , skill ) ;
40751: LD_INT 0
40753: PPUSH
40754: LD_VAR 0 8
40758: PPUSH
40759: LD_VAR 0 4
40763: PPUSH
40764: CALL_OW 380
// un := CreateHuman ;
40768: LD_ADDR_VAR 0 14
40772: PUSH
40773: CALL_OW 44
40777: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40778: LD_ADDR_VAR 0 7
40782: PUSH
40783: LD_VAR 0 7
40787: PPUSH
40788: LD_INT 1
40790: PPUSH
40791: LD_VAR 0 14
40795: PPUSH
40796: CALL_OW 2
40800: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40801: LD_VAR 0 14
40805: PPUSH
40806: LD_VAR 0 1
40810: PPUSH
40811: CALL_OW 250
40815: PPUSH
40816: LD_VAR 0 1
40820: PPUSH
40821: CALL_OW 251
40825: PPUSH
40826: LD_INT 10
40828: PPUSH
40829: LD_INT 0
40831: PPUSH
40832: CALL_OW 50
// continue ;
40836: GO 40737
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
40838: LD_VAR 0 12
40842: PUSH
40843: LD_INT 1
40845: ARRAY
40846: PPUSH
40847: CALL_OW 313
40851: PUSH
40852: LD_VAR 0 12
40856: PUSH
40857: LD_INT 1
40859: ARRAY
40860: PPUSH
40861: CALL_OW 266
40865: PUSH
40866: LD_INT 32
40868: PUSH
40869: LD_INT 31
40871: PUSH
40872: EMPTY
40873: LIST
40874: LIST
40875: IN
40876: AND
40877: PUSH
40878: LD_VAR 0 12
40882: PUSH
40883: LD_INT 1
40885: ARRAY
40886: PPUSH
40887: CALL_OW 313
40891: PUSH
40892: LD_INT 6
40894: EQUAL
40895: OR
40896: IFFALSE 40916
// f := Delete ( f , 1 ) ;
40898: LD_ADDR_VAR 0 12
40902: PUSH
40903: LD_VAR 0 12
40907: PPUSH
40908: LD_INT 1
40910: PPUSH
40911: CALL_OW 3
40915: ST_TO_ADDR
// if not f then
40916: LD_VAR 0 12
40920: NOT
40921: IFFALSE 40939
// begin x := x + 2 ;
40923: LD_ADDR_VAR 0 13
40927: PUSH
40928: LD_VAR 0 13
40932: PUSH
40933: LD_INT 2
40935: PLUS
40936: ST_TO_ADDR
// continue ;
40937: GO 40737
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
40939: LD_VAR 0 12
40943: PUSH
40944: LD_INT 1
40946: ARRAY
40947: PPUSH
40948: CALL_OW 266
40952: PUSH
40953: LD_INT 5
40955: EQUAL
40956: IFFALSE 41030
// begin if UnitsInside ( f [ 1 ] ) < 3 then
40958: LD_VAR 0 12
40962: PUSH
40963: LD_INT 1
40965: ARRAY
40966: PPUSH
40967: CALL_OW 313
40971: PUSH
40972: LD_INT 3
40974: LESS
40975: IFFALSE 41011
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
40977: LD_INT 0
40979: PPUSH
40980: LD_INT 5
40982: PUSH
40983: LD_INT 8
40985: PUSH
40986: LD_INT 9
40988: PUSH
40989: EMPTY
40990: LIST
40991: LIST
40992: LIST
40993: PUSH
40994: LD_VAR 0 17
40998: ARRAY
40999: PPUSH
41000: LD_VAR 0 4
41004: PPUSH
41005: CALL_OW 380
41009: GO 41028
// PrepareHuman ( false , i , skill ) ;
41011: LD_INT 0
41013: PPUSH
41014: LD_VAR 0 8
41018: PPUSH
41019: LD_VAR 0 4
41023: PPUSH
41024: CALL_OW 380
// end else
41028: GO 41047
// PrepareHuman ( false , i , skill ) ;
41030: LD_INT 0
41032: PPUSH
41033: LD_VAR 0 8
41037: PPUSH
41038: LD_VAR 0 4
41042: PPUSH
41043: CALL_OW 380
// un := CreateHuman ;
41047: LD_ADDR_VAR 0 14
41051: PUSH
41052: CALL_OW 44
41056: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41057: LD_ADDR_VAR 0 7
41061: PUSH
41062: LD_VAR 0 7
41066: PPUSH
41067: LD_INT 1
41069: PPUSH
41070: LD_VAR 0 14
41074: PPUSH
41075: CALL_OW 2
41079: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
41080: LD_VAR 0 14
41084: PPUSH
41085: LD_VAR 0 12
41089: PUSH
41090: LD_INT 1
41092: ARRAY
41093: PPUSH
41094: CALL_OW 52
// end ;
41098: GO 40737
41100: POP
41101: POP
// end ;
41102: GO 40039
41104: POP
41105: POP
// result := result ^ buildings ;
41106: LD_ADDR_VAR 0 7
41110: PUSH
41111: LD_VAR 0 7
41115: PUSH
41116: LD_VAR 0 18
41120: ADD
41121: ST_TO_ADDR
// end else
41122: GO 41265
// begin for i = 1 to personel do
41124: LD_ADDR_VAR 0 8
41128: PUSH
41129: DOUBLE
41130: LD_INT 1
41132: DEC
41133: ST_TO_ADDR
41134: LD_VAR 0 6
41138: PUSH
41139: FOR_TO
41140: IFFALSE 41263
// begin if i > 4 then
41142: LD_VAR 0 8
41146: PUSH
41147: LD_INT 4
41149: GREATER
41150: IFFALSE 41154
// break ;
41152: GO 41263
// x := personel [ i ] ;
41154: LD_ADDR_VAR 0 13
41158: PUSH
41159: LD_VAR 0 6
41163: PUSH
41164: LD_VAR 0 8
41168: ARRAY
41169: ST_TO_ADDR
// if x = - 1 then
41170: LD_VAR 0 13
41174: PUSH
41175: LD_INT 1
41177: NEG
41178: EQUAL
41179: IFFALSE 41183
// continue ;
41181: GO 41139
// PrepareHuman ( false , i , skill ) ;
41183: LD_INT 0
41185: PPUSH
41186: LD_VAR 0 8
41190: PPUSH
41191: LD_VAR 0 4
41195: PPUSH
41196: CALL_OW 380
// un := CreateHuman ;
41200: LD_ADDR_VAR 0 14
41204: PUSH
41205: CALL_OW 44
41209: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
41210: LD_VAR 0 14
41214: PPUSH
41215: LD_VAR 0 1
41219: PPUSH
41220: CALL_OW 250
41224: PPUSH
41225: LD_VAR 0 1
41229: PPUSH
41230: CALL_OW 251
41234: PPUSH
41235: LD_INT 10
41237: PPUSH
41238: LD_INT 0
41240: PPUSH
41241: CALL_OW 50
// result := result ^ un ;
41245: LD_ADDR_VAR 0 7
41249: PUSH
41250: LD_VAR 0 7
41254: PUSH
41255: LD_VAR 0 14
41259: ADD
41260: ST_TO_ADDR
// end ;
41261: GO 41139
41263: POP
41264: POP
// end ; end ;
41265: LD_VAR 0 7
41269: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
41270: LD_INT 0
41272: PPUSH
41273: PPUSH
41274: PPUSH
41275: PPUSH
41276: PPUSH
41277: PPUSH
41278: PPUSH
41279: PPUSH
41280: PPUSH
41281: PPUSH
41282: PPUSH
41283: PPUSH
41284: PPUSH
41285: PPUSH
41286: PPUSH
41287: PPUSH
// result := false ;
41288: LD_ADDR_VAR 0 3
41292: PUSH
41293: LD_INT 0
41295: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
41296: LD_VAR 0 1
41300: NOT
41301: PUSH
41302: LD_VAR 0 1
41306: PPUSH
41307: CALL_OW 266
41311: PUSH
41312: LD_INT 32
41314: PUSH
41315: LD_INT 33
41317: PUSH
41318: EMPTY
41319: LIST
41320: LIST
41321: IN
41322: NOT
41323: OR
41324: IFFALSE 41328
// exit ;
41326: GO 42437
// nat := GetNation ( tower ) ;
41328: LD_ADDR_VAR 0 12
41332: PUSH
41333: LD_VAR 0 1
41337: PPUSH
41338: CALL_OW 248
41342: ST_TO_ADDR
// side := GetSide ( tower ) ;
41343: LD_ADDR_VAR 0 16
41347: PUSH
41348: LD_VAR 0 1
41352: PPUSH
41353: CALL_OW 255
41357: ST_TO_ADDR
// x := GetX ( tower ) ;
41358: LD_ADDR_VAR 0 10
41362: PUSH
41363: LD_VAR 0 1
41367: PPUSH
41368: CALL_OW 250
41372: ST_TO_ADDR
// y := GetY ( tower ) ;
41373: LD_ADDR_VAR 0 11
41377: PUSH
41378: LD_VAR 0 1
41382: PPUSH
41383: CALL_OW 251
41387: ST_TO_ADDR
// if not x or not y then
41388: LD_VAR 0 10
41392: NOT
41393: PUSH
41394: LD_VAR 0 11
41398: NOT
41399: OR
41400: IFFALSE 41404
// exit ;
41402: GO 42437
// weapon := 0 ;
41404: LD_ADDR_VAR 0 18
41408: PUSH
41409: LD_INT 0
41411: ST_TO_ADDR
// fac_list := [ ] ;
41412: LD_ADDR_VAR 0 17
41416: PUSH
41417: EMPTY
41418: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
41419: LD_ADDR_VAR 0 6
41423: PUSH
41424: LD_VAR 0 1
41428: PPUSH
41429: CALL_OW 274
41433: PPUSH
41434: LD_VAR 0 2
41438: PPUSH
41439: LD_INT 0
41441: PPUSH
41442: CALL 39008 0 3
41446: PPUSH
41447: LD_INT 30
41449: PUSH
41450: LD_INT 3
41452: PUSH
41453: EMPTY
41454: LIST
41455: LIST
41456: PPUSH
41457: CALL_OW 72
41461: ST_TO_ADDR
// if not factories then
41462: LD_VAR 0 6
41466: NOT
41467: IFFALSE 41471
// exit ;
41469: GO 42437
// for i in factories do
41471: LD_ADDR_VAR 0 8
41475: PUSH
41476: LD_VAR 0 6
41480: PUSH
41481: FOR_IN
41482: IFFALSE 41507
// fac_list := fac_list union AvailableWeaponList ( i ) ;
41484: LD_ADDR_VAR 0 17
41488: PUSH
41489: LD_VAR 0 17
41493: PUSH
41494: LD_VAR 0 8
41498: PPUSH
41499: CALL_OW 478
41503: UNION
41504: ST_TO_ADDR
41505: GO 41481
41507: POP
41508: POP
// if not fac_list then
41509: LD_VAR 0 17
41513: NOT
41514: IFFALSE 41518
// exit ;
41516: GO 42437
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
41518: LD_ADDR_VAR 0 5
41522: PUSH
41523: LD_INT 4
41525: PUSH
41526: LD_INT 5
41528: PUSH
41529: LD_INT 9
41531: PUSH
41532: LD_INT 10
41534: PUSH
41535: LD_INT 6
41537: PUSH
41538: LD_INT 7
41540: PUSH
41541: LD_INT 11
41543: PUSH
41544: EMPTY
41545: LIST
41546: LIST
41547: LIST
41548: LIST
41549: LIST
41550: LIST
41551: LIST
41552: PUSH
41553: LD_INT 27
41555: PUSH
41556: LD_INT 28
41558: PUSH
41559: LD_INT 26
41561: PUSH
41562: LD_INT 30
41564: PUSH
41565: EMPTY
41566: LIST
41567: LIST
41568: LIST
41569: LIST
41570: PUSH
41571: LD_INT 43
41573: PUSH
41574: LD_INT 44
41576: PUSH
41577: LD_INT 46
41579: PUSH
41580: LD_INT 45
41582: PUSH
41583: LD_INT 47
41585: PUSH
41586: LD_INT 49
41588: PUSH
41589: EMPTY
41590: LIST
41591: LIST
41592: LIST
41593: LIST
41594: LIST
41595: LIST
41596: PUSH
41597: EMPTY
41598: LIST
41599: LIST
41600: LIST
41601: PUSH
41602: LD_VAR 0 12
41606: ARRAY
41607: ST_TO_ADDR
// list := list isect fac_list ;
41608: LD_ADDR_VAR 0 5
41612: PUSH
41613: LD_VAR 0 5
41617: PUSH
41618: LD_VAR 0 17
41622: ISECT
41623: ST_TO_ADDR
// if not list then
41624: LD_VAR 0 5
41628: NOT
41629: IFFALSE 41633
// exit ;
41631: GO 42437
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
41633: LD_VAR 0 12
41637: PUSH
41638: LD_INT 3
41640: EQUAL
41641: PUSH
41642: LD_INT 49
41644: PUSH
41645: LD_VAR 0 5
41649: IN
41650: AND
41651: PUSH
41652: LD_INT 31
41654: PPUSH
41655: LD_VAR 0 16
41659: PPUSH
41660: CALL_OW 321
41664: PUSH
41665: LD_INT 2
41667: EQUAL
41668: AND
41669: IFFALSE 41729
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
41671: LD_INT 22
41673: PUSH
41674: LD_VAR 0 16
41678: PUSH
41679: EMPTY
41680: LIST
41681: LIST
41682: PUSH
41683: LD_INT 35
41685: PUSH
41686: LD_INT 49
41688: PUSH
41689: EMPTY
41690: LIST
41691: LIST
41692: PUSH
41693: LD_INT 91
41695: PUSH
41696: LD_VAR 0 1
41700: PUSH
41701: LD_INT 10
41703: PUSH
41704: EMPTY
41705: LIST
41706: LIST
41707: LIST
41708: PUSH
41709: EMPTY
41710: LIST
41711: LIST
41712: LIST
41713: PPUSH
41714: CALL_OW 69
41718: NOT
41719: IFFALSE 41729
// weapon := ru_time_lapser ;
41721: LD_ADDR_VAR 0 18
41725: PUSH
41726: LD_INT 49
41728: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
41729: LD_VAR 0 12
41733: PUSH
41734: LD_INT 1
41736: PUSH
41737: LD_INT 2
41739: PUSH
41740: EMPTY
41741: LIST
41742: LIST
41743: IN
41744: PUSH
41745: LD_INT 11
41747: PUSH
41748: LD_VAR 0 5
41752: IN
41753: PUSH
41754: LD_INT 30
41756: PUSH
41757: LD_VAR 0 5
41761: IN
41762: OR
41763: AND
41764: PUSH
41765: LD_INT 6
41767: PPUSH
41768: LD_VAR 0 16
41772: PPUSH
41773: CALL_OW 321
41777: PUSH
41778: LD_INT 2
41780: EQUAL
41781: AND
41782: IFFALSE 41947
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
41784: LD_INT 22
41786: PUSH
41787: LD_VAR 0 16
41791: PUSH
41792: EMPTY
41793: LIST
41794: LIST
41795: PUSH
41796: LD_INT 2
41798: PUSH
41799: LD_INT 35
41801: PUSH
41802: LD_INT 11
41804: PUSH
41805: EMPTY
41806: LIST
41807: LIST
41808: PUSH
41809: LD_INT 35
41811: PUSH
41812: LD_INT 30
41814: PUSH
41815: EMPTY
41816: LIST
41817: LIST
41818: PUSH
41819: EMPTY
41820: LIST
41821: LIST
41822: LIST
41823: PUSH
41824: LD_INT 91
41826: PUSH
41827: LD_VAR 0 1
41831: PUSH
41832: LD_INT 18
41834: PUSH
41835: EMPTY
41836: LIST
41837: LIST
41838: LIST
41839: PUSH
41840: EMPTY
41841: LIST
41842: LIST
41843: LIST
41844: PPUSH
41845: CALL_OW 69
41849: NOT
41850: PUSH
41851: LD_INT 22
41853: PUSH
41854: LD_VAR 0 16
41858: PUSH
41859: EMPTY
41860: LIST
41861: LIST
41862: PUSH
41863: LD_INT 2
41865: PUSH
41866: LD_INT 30
41868: PUSH
41869: LD_INT 32
41871: PUSH
41872: EMPTY
41873: LIST
41874: LIST
41875: PUSH
41876: LD_INT 30
41878: PUSH
41879: LD_INT 33
41881: PUSH
41882: EMPTY
41883: LIST
41884: LIST
41885: PUSH
41886: EMPTY
41887: LIST
41888: LIST
41889: LIST
41890: PUSH
41891: LD_INT 91
41893: PUSH
41894: LD_VAR 0 1
41898: PUSH
41899: LD_INT 12
41901: PUSH
41902: EMPTY
41903: LIST
41904: LIST
41905: LIST
41906: PUSH
41907: EMPTY
41908: LIST
41909: LIST
41910: LIST
41911: PUSH
41912: EMPTY
41913: LIST
41914: PPUSH
41915: CALL_OW 69
41919: PUSH
41920: LD_INT 2
41922: GREATER
41923: AND
41924: IFFALSE 41947
// weapon := [ us_radar , ar_radar ] [ nat ] ;
41926: LD_ADDR_VAR 0 18
41930: PUSH
41931: LD_INT 11
41933: PUSH
41934: LD_INT 30
41936: PUSH
41937: EMPTY
41938: LIST
41939: LIST
41940: PUSH
41941: LD_VAR 0 12
41945: ARRAY
41946: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
41947: LD_VAR 0 18
41951: NOT
41952: PUSH
41953: LD_INT 40
41955: PPUSH
41956: LD_VAR 0 16
41960: PPUSH
41961: CALL_OW 321
41965: PUSH
41966: LD_INT 2
41968: EQUAL
41969: AND
41970: PUSH
41971: LD_INT 7
41973: PUSH
41974: LD_VAR 0 5
41978: IN
41979: PUSH
41980: LD_INT 28
41982: PUSH
41983: LD_VAR 0 5
41987: IN
41988: OR
41989: PUSH
41990: LD_INT 45
41992: PUSH
41993: LD_VAR 0 5
41997: IN
41998: OR
41999: AND
42000: IFFALSE 42254
// begin hex := GetHexInfo ( x , y ) ;
42002: LD_ADDR_VAR 0 4
42006: PUSH
42007: LD_VAR 0 10
42011: PPUSH
42012: LD_VAR 0 11
42016: PPUSH
42017: CALL_OW 546
42021: ST_TO_ADDR
// if hex [ 1 ] then
42022: LD_VAR 0 4
42026: PUSH
42027: LD_INT 1
42029: ARRAY
42030: IFFALSE 42034
// exit ;
42032: GO 42437
// height := hex [ 2 ] ;
42034: LD_ADDR_VAR 0 15
42038: PUSH
42039: LD_VAR 0 4
42043: PUSH
42044: LD_INT 2
42046: ARRAY
42047: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
42048: LD_ADDR_VAR 0 14
42052: PUSH
42053: LD_INT 0
42055: PUSH
42056: LD_INT 2
42058: PUSH
42059: LD_INT 3
42061: PUSH
42062: LD_INT 5
42064: PUSH
42065: EMPTY
42066: LIST
42067: LIST
42068: LIST
42069: LIST
42070: ST_TO_ADDR
// for i in tmp do
42071: LD_ADDR_VAR 0 8
42075: PUSH
42076: LD_VAR 0 14
42080: PUSH
42081: FOR_IN
42082: IFFALSE 42252
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
42084: LD_ADDR_VAR 0 9
42088: PUSH
42089: LD_VAR 0 10
42093: PPUSH
42094: LD_VAR 0 8
42098: PPUSH
42099: LD_INT 5
42101: PPUSH
42102: CALL_OW 272
42106: PUSH
42107: LD_VAR 0 11
42111: PPUSH
42112: LD_VAR 0 8
42116: PPUSH
42117: LD_INT 5
42119: PPUSH
42120: CALL_OW 273
42124: PUSH
42125: EMPTY
42126: LIST
42127: LIST
42128: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
42129: LD_VAR 0 9
42133: PUSH
42134: LD_INT 1
42136: ARRAY
42137: PPUSH
42138: LD_VAR 0 9
42142: PUSH
42143: LD_INT 2
42145: ARRAY
42146: PPUSH
42147: CALL_OW 488
42151: IFFALSE 42250
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
42153: LD_ADDR_VAR 0 4
42157: PUSH
42158: LD_VAR 0 9
42162: PUSH
42163: LD_INT 1
42165: ARRAY
42166: PPUSH
42167: LD_VAR 0 9
42171: PUSH
42172: LD_INT 2
42174: ARRAY
42175: PPUSH
42176: CALL_OW 546
42180: ST_TO_ADDR
// if hex [ 1 ] then
42181: LD_VAR 0 4
42185: PUSH
42186: LD_INT 1
42188: ARRAY
42189: IFFALSE 42193
// continue ;
42191: GO 42081
// h := hex [ 2 ] ;
42193: LD_ADDR_VAR 0 13
42197: PUSH
42198: LD_VAR 0 4
42202: PUSH
42203: LD_INT 2
42205: ARRAY
42206: ST_TO_ADDR
// if h + 7 < height then
42207: LD_VAR 0 13
42211: PUSH
42212: LD_INT 7
42214: PLUS
42215: PUSH
42216: LD_VAR 0 15
42220: LESS
42221: IFFALSE 42250
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
42223: LD_ADDR_VAR 0 18
42227: PUSH
42228: LD_INT 7
42230: PUSH
42231: LD_INT 28
42233: PUSH
42234: LD_INT 45
42236: PUSH
42237: EMPTY
42238: LIST
42239: LIST
42240: LIST
42241: PUSH
42242: LD_VAR 0 12
42246: ARRAY
42247: ST_TO_ADDR
// break ;
42248: GO 42252
// end ; end ; end ;
42250: GO 42081
42252: POP
42253: POP
// end ; if not weapon then
42254: LD_VAR 0 18
42258: NOT
42259: IFFALSE 42319
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
42261: LD_ADDR_VAR 0 5
42265: PUSH
42266: LD_VAR 0 5
42270: PUSH
42271: LD_INT 11
42273: PUSH
42274: LD_INT 30
42276: PUSH
42277: LD_INT 49
42279: PUSH
42280: EMPTY
42281: LIST
42282: LIST
42283: LIST
42284: DIFF
42285: ST_TO_ADDR
// if not list then
42286: LD_VAR 0 5
42290: NOT
42291: IFFALSE 42295
// exit ;
42293: GO 42437
// weapon := list [ rand ( 1 , list ) ] ;
42295: LD_ADDR_VAR 0 18
42299: PUSH
42300: LD_VAR 0 5
42304: PUSH
42305: LD_INT 1
42307: PPUSH
42308: LD_VAR 0 5
42312: PPUSH
42313: CALL_OW 12
42317: ARRAY
42318: ST_TO_ADDR
// end ; if weapon then
42319: LD_VAR 0 18
42323: IFFALSE 42437
// begin tmp := CostOfWeapon ( weapon ) ;
42325: LD_ADDR_VAR 0 14
42329: PUSH
42330: LD_VAR 0 18
42334: PPUSH
42335: CALL_OW 451
42339: ST_TO_ADDR
// j := GetBase ( tower ) ;
42340: LD_ADDR_VAR 0 9
42344: PUSH
42345: LD_VAR 0 1
42349: PPUSH
42350: CALL_OW 274
42354: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
42355: LD_VAR 0 9
42359: PPUSH
42360: LD_INT 1
42362: PPUSH
42363: CALL_OW 275
42367: PUSH
42368: LD_VAR 0 14
42372: PUSH
42373: LD_INT 1
42375: ARRAY
42376: GREATEREQUAL
42377: PUSH
42378: LD_VAR 0 9
42382: PPUSH
42383: LD_INT 2
42385: PPUSH
42386: CALL_OW 275
42390: PUSH
42391: LD_VAR 0 14
42395: PUSH
42396: LD_INT 2
42398: ARRAY
42399: GREATEREQUAL
42400: AND
42401: PUSH
42402: LD_VAR 0 9
42406: PPUSH
42407: LD_INT 3
42409: PPUSH
42410: CALL_OW 275
42414: PUSH
42415: LD_VAR 0 14
42419: PUSH
42420: LD_INT 3
42422: ARRAY
42423: GREATEREQUAL
42424: AND
42425: IFFALSE 42437
// result := weapon ;
42427: LD_ADDR_VAR 0 3
42431: PUSH
42432: LD_VAR 0 18
42436: ST_TO_ADDR
// end ; end ;
42437: LD_VAR 0 3
42441: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
42442: LD_INT 0
42444: PPUSH
42445: PPUSH
// result := true ;
42446: LD_ADDR_VAR 0 3
42450: PUSH
42451: LD_INT 1
42453: ST_TO_ADDR
// if array1 = array2 then
42454: LD_VAR 0 1
42458: PUSH
42459: LD_VAR 0 2
42463: EQUAL
42464: IFFALSE 42524
// begin for i = 1 to array1 do
42466: LD_ADDR_VAR 0 4
42470: PUSH
42471: DOUBLE
42472: LD_INT 1
42474: DEC
42475: ST_TO_ADDR
42476: LD_VAR 0 1
42480: PUSH
42481: FOR_TO
42482: IFFALSE 42520
// if array1 [ i ] <> array2 [ i ] then
42484: LD_VAR 0 1
42488: PUSH
42489: LD_VAR 0 4
42493: ARRAY
42494: PUSH
42495: LD_VAR 0 2
42499: PUSH
42500: LD_VAR 0 4
42504: ARRAY
42505: NONEQUAL
42506: IFFALSE 42518
// begin result := false ;
42508: LD_ADDR_VAR 0 3
42512: PUSH
42513: LD_INT 0
42515: ST_TO_ADDR
// break ;
42516: GO 42520
// end ;
42518: GO 42481
42520: POP
42521: POP
// end else
42522: GO 42532
// result := false ;
42524: LD_ADDR_VAR 0 3
42528: PUSH
42529: LD_INT 0
42531: ST_TO_ADDR
// end ;
42532: LD_VAR 0 3
42536: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
42537: LD_INT 0
42539: PPUSH
42540: PPUSH
// if not array1 or not array2 then
42541: LD_VAR 0 1
42545: NOT
42546: PUSH
42547: LD_VAR 0 2
42551: NOT
42552: OR
42553: IFFALSE 42557
// exit ;
42555: GO 42621
// result := true ;
42557: LD_ADDR_VAR 0 3
42561: PUSH
42562: LD_INT 1
42564: ST_TO_ADDR
// for i = 1 to array1 do
42565: LD_ADDR_VAR 0 4
42569: PUSH
42570: DOUBLE
42571: LD_INT 1
42573: DEC
42574: ST_TO_ADDR
42575: LD_VAR 0 1
42579: PUSH
42580: FOR_TO
42581: IFFALSE 42619
// if array1 [ i ] <> array2 [ i ] then
42583: LD_VAR 0 1
42587: PUSH
42588: LD_VAR 0 4
42592: ARRAY
42593: PUSH
42594: LD_VAR 0 2
42598: PUSH
42599: LD_VAR 0 4
42603: ARRAY
42604: NONEQUAL
42605: IFFALSE 42617
// begin result := false ;
42607: LD_ADDR_VAR 0 3
42611: PUSH
42612: LD_INT 0
42614: ST_TO_ADDR
// break ;
42615: GO 42619
// end ;
42617: GO 42580
42619: POP
42620: POP
// end ;
42621: LD_VAR 0 3
42625: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
42626: LD_INT 0
42628: PPUSH
42629: PPUSH
42630: PPUSH
// pom := GetBase ( fac ) ;
42631: LD_ADDR_VAR 0 5
42635: PUSH
42636: LD_VAR 0 1
42640: PPUSH
42641: CALL_OW 274
42645: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
42646: LD_ADDR_VAR 0 4
42650: PUSH
42651: LD_VAR 0 2
42655: PUSH
42656: LD_INT 1
42658: ARRAY
42659: PPUSH
42660: LD_VAR 0 2
42664: PUSH
42665: LD_INT 2
42667: ARRAY
42668: PPUSH
42669: LD_VAR 0 2
42673: PUSH
42674: LD_INT 3
42676: ARRAY
42677: PPUSH
42678: LD_VAR 0 2
42682: PUSH
42683: LD_INT 4
42685: ARRAY
42686: PPUSH
42687: CALL_OW 449
42691: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42692: LD_ADDR_VAR 0 3
42696: PUSH
42697: LD_VAR 0 5
42701: PPUSH
42702: LD_INT 1
42704: PPUSH
42705: CALL_OW 275
42709: PUSH
42710: LD_VAR 0 4
42714: PUSH
42715: LD_INT 1
42717: ARRAY
42718: GREATEREQUAL
42719: PUSH
42720: LD_VAR 0 5
42724: PPUSH
42725: LD_INT 2
42727: PPUSH
42728: CALL_OW 275
42732: PUSH
42733: LD_VAR 0 4
42737: PUSH
42738: LD_INT 2
42740: ARRAY
42741: GREATEREQUAL
42742: AND
42743: PUSH
42744: LD_VAR 0 5
42748: PPUSH
42749: LD_INT 3
42751: PPUSH
42752: CALL_OW 275
42756: PUSH
42757: LD_VAR 0 4
42761: PUSH
42762: LD_INT 3
42764: ARRAY
42765: GREATEREQUAL
42766: AND
42767: ST_TO_ADDR
// end ;
42768: LD_VAR 0 3
42772: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
42773: LD_INT 0
42775: PPUSH
42776: PPUSH
42777: PPUSH
42778: PPUSH
// pom := GetBase ( building ) ;
42779: LD_ADDR_VAR 0 3
42783: PUSH
42784: LD_VAR 0 1
42788: PPUSH
42789: CALL_OW 274
42793: ST_TO_ADDR
// if not pom then
42794: LD_VAR 0 3
42798: NOT
42799: IFFALSE 42803
// exit ;
42801: GO 42973
// btype := GetBType ( building ) ;
42803: LD_ADDR_VAR 0 5
42807: PUSH
42808: LD_VAR 0 1
42812: PPUSH
42813: CALL_OW 266
42817: ST_TO_ADDR
// if btype = b_armoury then
42818: LD_VAR 0 5
42822: PUSH
42823: LD_INT 4
42825: EQUAL
42826: IFFALSE 42836
// btype := b_barracks ;
42828: LD_ADDR_VAR 0 5
42832: PUSH
42833: LD_INT 5
42835: ST_TO_ADDR
// if btype = b_depot then
42836: LD_VAR 0 5
42840: PUSH
42841: LD_INT 0
42843: EQUAL
42844: IFFALSE 42854
// btype := b_warehouse ;
42846: LD_ADDR_VAR 0 5
42850: PUSH
42851: LD_INT 1
42853: ST_TO_ADDR
// if btype = b_workshop then
42854: LD_VAR 0 5
42858: PUSH
42859: LD_INT 2
42861: EQUAL
42862: IFFALSE 42872
// btype := b_factory ;
42864: LD_ADDR_VAR 0 5
42868: PUSH
42869: LD_INT 3
42871: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
42872: LD_ADDR_VAR 0 4
42876: PUSH
42877: LD_VAR 0 5
42881: PPUSH
42882: LD_VAR 0 1
42886: PPUSH
42887: CALL_OW 248
42891: PPUSH
42892: CALL_OW 450
42896: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42897: LD_ADDR_VAR 0 2
42901: PUSH
42902: LD_VAR 0 3
42906: PPUSH
42907: LD_INT 1
42909: PPUSH
42910: CALL_OW 275
42914: PUSH
42915: LD_VAR 0 4
42919: PUSH
42920: LD_INT 1
42922: ARRAY
42923: GREATEREQUAL
42924: PUSH
42925: LD_VAR 0 3
42929: PPUSH
42930: LD_INT 2
42932: PPUSH
42933: CALL_OW 275
42937: PUSH
42938: LD_VAR 0 4
42942: PUSH
42943: LD_INT 2
42945: ARRAY
42946: GREATEREQUAL
42947: AND
42948: PUSH
42949: LD_VAR 0 3
42953: PPUSH
42954: LD_INT 3
42956: PPUSH
42957: CALL_OW 275
42961: PUSH
42962: LD_VAR 0 4
42966: PUSH
42967: LD_INT 3
42969: ARRAY
42970: GREATEREQUAL
42971: AND
42972: ST_TO_ADDR
// end ;
42973: LD_VAR 0 2
42977: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
42978: LD_INT 0
42980: PPUSH
42981: PPUSH
42982: PPUSH
// pom := GetBase ( building ) ;
42983: LD_ADDR_VAR 0 4
42987: PUSH
42988: LD_VAR 0 1
42992: PPUSH
42993: CALL_OW 274
42997: ST_TO_ADDR
// if not pom then
42998: LD_VAR 0 4
43002: NOT
43003: IFFALSE 43007
// exit ;
43005: GO 43108
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
43007: LD_ADDR_VAR 0 5
43011: PUSH
43012: LD_VAR 0 2
43016: PPUSH
43017: LD_VAR 0 1
43021: PPUSH
43022: CALL_OW 248
43026: PPUSH
43027: CALL_OW 450
43031: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43032: LD_ADDR_VAR 0 3
43036: PUSH
43037: LD_VAR 0 4
43041: PPUSH
43042: LD_INT 1
43044: PPUSH
43045: CALL_OW 275
43049: PUSH
43050: LD_VAR 0 5
43054: PUSH
43055: LD_INT 1
43057: ARRAY
43058: GREATEREQUAL
43059: PUSH
43060: LD_VAR 0 4
43064: PPUSH
43065: LD_INT 2
43067: PPUSH
43068: CALL_OW 275
43072: PUSH
43073: LD_VAR 0 5
43077: PUSH
43078: LD_INT 2
43080: ARRAY
43081: GREATEREQUAL
43082: AND
43083: PUSH
43084: LD_VAR 0 4
43088: PPUSH
43089: LD_INT 3
43091: PPUSH
43092: CALL_OW 275
43096: PUSH
43097: LD_VAR 0 5
43101: PUSH
43102: LD_INT 3
43104: ARRAY
43105: GREATEREQUAL
43106: AND
43107: ST_TO_ADDR
// end ;
43108: LD_VAR 0 3
43112: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
43113: LD_INT 0
43115: PPUSH
43116: PPUSH
43117: PPUSH
43118: PPUSH
43119: PPUSH
43120: PPUSH
43121: PPUSH
43122: PPUSH
43123: PPUSH
43124: PPUSH
43125: PPUSH
// result := false ;
43126: LD_ADDR_VAR 0 8
43130: PUSH
43131: LD_INT 0
43133: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
43134: LD_VAR 0 5
43138: NOT
43139: PUSH
43140: LD_VAR 0 1
43144: NOT
43145: OR
43146: PUSH
43147: LD_VAR 0 2
43151: NOT
43152: OR
43153: PUSH
43154: LD_VAR 0 3
43158: NOT
43159: OR
43160: IFFALSE 43164
// exit ;
43162: GO 43978
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
43164: LD_ADDR_VAR 0 14
43168: PUSH
43169: LD_VAR 0 1
43173: PPUSH
43174: LD_VAR 0 2
43178: PPUSH
43179: LD_VAR 0 3
43183: PPUSH
43184: LD_VAR 0 4
43188: PPUSH
43189: LD_VAR 0 5
43193: PUSH
43194: LD_INT 1
43196: ARRAY
43197: PPUSH
43198: CALL_OW 248
43202: PPUSH
43203: LD_INT 0
43205: PPUSH
43206: CALL 45231 0 6
43210: ST_TO_ADDR
// if not hexes then
43211: LD_VAR 0 14
43215: NOT
43216: IFFALSE 43220
// exit ;
43218: GO 43978
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
43220: LD_ADDR_VAR 0 17
43224: PUSH
43225: LD_VAR 0 5
43229: PPUSH
43230: LD_INT 22
43232: PUSH
43233: LD_VAR 0 13
43237: PPUSH
43238: CALL_OW 255
43242: PUSH
43243: EMPTY
43244: LIST
43245: LIST
43246: PUSH
43247: LD_INT 2
43249: PUSH
43250: LD_INT 30
43252: PUSH
43253: LD_INT 0
43255: PUSH
43256: EMPTY
43257: LIST
43258: LIST
43259: PUSH
43260: LD_INT 30
43262: PUSH
43263: LD_INT 1
43265: PUSH
43266: EMPTY
43267: LIST
43268: LIST
43269: PUSH
43270: EMPTY
43271: LIST
43272: LIST
43273: LIST
43274: PUSH
43275: EMPTY
43276: LIST
43277: LIST
43278: PPUSH
43279: CALL_OW 72
43283: ST_TO_ADDR
// for i = 1 to hexes do
43284: LD_ADDR_VAR 0 9
43288: PUSH
43289: DOUBLE
43290: LD_INT 1
43292: DEC
43293: ST_TO_ADDR
43294: LD_VAR 0 14
43298: PUSH
43299: FOR_TO
43300: IFFALSE 43976
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43302: LD_ADDR_VAR 0 13
43306: PUSH
43307: LD_VAR 0 14
43311: PUSH
43312: LD_VAR 0 9
43316: ARRAY
43317: PUSH
43318: LD_INT 1
43320: ARRAY
43321: PPUSH
43322: LD_VAR 0 14
43326: PUSH
43327: LD_VAR 0 9
43331: ARRAY
43332: PUSH
43333: LD_INT 2
43335: ARRAY
43336: PPUSH
43337: CALL_OW 428
43341: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
43342: LD_VAR 0 14
43346: PUSH
43347: LD_VAR 0 9
43351: ARRAY
43352: PUSH
43353: LD_INT 1
43355: ARRAY
43356: PPUSH
43357: LD_VAR 0 14
43361: PUSH
43362: LD_VAR 0 9
43366: ARRAY
43367: PUSH
43368: LD_INT 2
43370: ARRAY
43371: PPUSH
43372: CALL_OW 351
43376: PUSH
43377: LD_VAR 0 14
43381: PUSH
43382: LD_VAR 0 9
43386: ARRAY
43387: PUSH
43388: LD_INT 1
43390: ARRAY
43391: PPUSH
43392: LD_VAR 0 14
43396: PUSH
43397: LD_VAR 0 9
43401: ARRAY
43402: PUSH
43403: LD_INT 2
43405: ARRAY
43406: PPUSH
43407: CALL_OW 488
43411: NOT
43412: OR
43413: PUSH
43414: LD_VAR 0 13
43418: PPUSH
43419: CALL_OW 247
43423: PUSH
43424: LD_INT 3
43426: EQUAL
43427: OR
43428: IFFALSE 43434
// exit ;
43430: POP
43431: POP
43432: GO 43978
// if not tmp then
43434: LD_VAR 0 13
43438: NOT
43439: IFFALSE 43443
// continue ;
43441: GO 43299
// result := true ;
43443: LD_ADDR_VAR 0 8
43447: PUSH
43448: LD_INT 1
43450: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
43451: LD_VAR 0 6
43455: PUSH
43456: LD_VAR 0 13
43460: PPUSH
43461: CALL_OW 247
43465: PUSH
43466: LD_INT 2
43468: EQUAL
43469: AND
43470: PUSH
43471: LD_VAR 0 13
43475: PPUSH
43476: CALL_OW 263
43480: PUSH
43481: LD_INT 1
43483: EQUAL
43484: AND
43485: IFFALSE 43649
// begin if IsDrivenBy ( tmp ) then
43487: LD_VAR 0 13
43491: PPUSH
43492: CALL_OW 311
43496: IFFALSE 43500
// continue ;
43498: GO 43299
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
43500: LD_VAR 0 6
43504: PPUSH
43505: LD_INT 3
43507: PUSH
43508: LD_INT 60
43510: PUSH
43511: EMPTY
43512: LIST
43513: PUSH
43514: EMPTY
43515: LIST
43516: LIST
43517: PUSH
43518: LD_INT 3
43520: PUSH
43521: LD_INT 55
43523: PUSH
43524: EMPTY
43525: LIST
43526: PUSH
43527: EMPTY
43528: LIST
43529: LIST
43530: PUSH
43531: EMPTY
43532: LIST
43533: LIST
43534: PPUSH
43535: CALL_OW 72
43539: IFFALSE 43647
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
43541: LD_ADDR_VAR 0 18
43545: PUSH
43546: LD_VAR 0 6
43550: PPUSH
43551: LD_INT 3
43553: PUSH
43554: LD_INT 60
43556: PUSH
43557: EMPTY
43558: LIST
43559: PUSH
43560: EMPTY
43561: LIST
43562: LIST
43563: PUSH
43564: LD_INT 3
43566: PUSH
43567: LD_INT 55
43569: PUSH
43570: EMPTY
43571: LIST
43572: PUSH
43573: EMPTY
43574: LIST
43575: LIST
43576: PUSH
43577: EMPTY
43578: LIST
43579: LIST
43580: PPUSH
43581: CALL_OW 72
43585: PUSH
43586: LD_INT 1
43588: ARRAY
43589: ST_TO_ADDR
// if IsInUnit ( driver ) then
43590: LD_VAR 0 18
43594: PPUSH
43595: CALL_OW 310
43599: IFFALSE 43610
// ComExit ( driver ) ;
43601: LD_VAR 0 18
43605: PPUSH
43606: CALL 69010 0 1
// AddComEnterUnit ( driver , tmp ) ;
43610: LD_VAR 0 18
43614: PPUSH
43615: LD_VAR 0 13
43619: PPUSH
43620: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
43624: LD_VAR 0 18
43628: PPUSH
43629: LD_VAR 0 7
43633: PPUSH
43634: CALL_OW 173
// AddComExitVehicle ( driver ) ;
43638: LD_VAR 0 18
43642: PPUSH
43643: CALL_OW 181
// end ; continue ;
43647: GO 43299
// end ; if not cleaners or not tmp in cleaners then
43649: LD_VAR 0 6
43653: NOT
43654: PUSH
43655: LD_VAR 0 13
43659: PUSH
43660: LD_VAR 0 6
43664: IN
43665: NOT
43666: OR
43667: IFFALSE 43974
// begin if dep then
43669: LD_VAR 0 17
43673: IFFALSE 43809
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
43675: LD_ADDR_VAR 0 16
43679: PUSH
43680: LD_VAR 0 17
43684: PUSH
43685: LD_INT 1
43687: ARRAY
43688: PPUSH
43689: CALL_OW 250
43693: PPUSH
43694: LD_VAR 0 17
43698: PUSH
43699: LD_INT 1
43701: ARRAY
43702: PPUSH
43703: CALL_OW 254
43707: PPUSH
43708: LD_INT 5
43710: PPUSH
43711: CALL_OW 272
43715: PUSH
43716: LD_VAR 0 17
43720: PUSH
43721: LD_INT 1
43723: ARRAY
43724: PPUSH
43725: CALL_OW 251
43729: PPUSH
43730: LD_VAR 0 17
43734: PUSH
43735: LD_INT 1
43737: ARRAY
43738: PPUSH
43739: CALL_OW 254
43743: PPUSH
43744: LD_INT 5
43746: PPUSH
43747: CALL_OW 273
43751: PUSH
43752: EMPTY
43753: LIST
43754: LIST
43755: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
43756: LD_VAR 0 16
43760: PUSH
43761: LD_INT 1
43763: ARRAY
43764: PPUSH
43765: LD_VAR 0 16
43769: PUSH
43770: LD_INT 2
43772: ARRAY
43773: PPUSH
43774: CALL_OW 488
43778: IFFALSE 43809
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
43780: LD_VAR 0 13
43784: PPUSH
43785: LD_VAR 0 16
43789: PUSH
43790: LD_INT 1
43792: ARRAY
43793: PPUSH
43794: LD_VAR 0 16
43798: PUSH
43799: LD_INT 2
43801: ARRAY
43802: PPUSH
43803: CALL_OW 111
// continue ;
43807: GO 43299
// end ; end ; r := GetDir ( tmp ) ;
43809: LD_ADDR_VAR 0 15
43813: PUSH
43814: LD_VAR 0 13
43818: PPUSH
43819: CALL_OW 254
43823: ST_TO_ADDR
// if r = 5 then
43824: LD_VAR 0 15
43828: PUSH
43829: LD_INT 5
43831: EQUAL
43832: IFFALSE 43842
// r := 0 ;
43834: LD_ADDR_VAR 0 15
43838: PUSH
43839: LD_INT 0
43841: ST_TO_ADDR
// for j = r to 5 do
43842: LD_ADDR_VAR 0 10
43846: PUSH
43847: DOUBLE
43848: LD_VAR 0 15
43852: DEC
43853: ST_TO_ADDR
43854: LD_INT 5
43856: PUSH
43857: FOR_TO
43858: IFFALSE 43972
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
43860: LD_ADDR_VAR 0 11
43864: PUSH
43865: LD_VAR 0 13
43869: PPUSH
43870: CALL_OW 250
43874: PPUSH
43875: LD_VAR 0 10
43879: PPUSH
43880: LD_INT 2
43882: PPUSH
43883: CALL_OW 272
43887: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
43888: LD_ADDR_VAR 0 12
43892: PUSH
43893: LD_VAR 0 13
43897: PPUSH
43898: CALL_OW 251
43902: PPUSH
43903: LD_VAR 0 10
43907: PPUSH
43908: LD_INT 2
43910: PPUSH
43911: CALL_OW 273
43915: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
43916: LD_VAR 0 11
43920: PPUSH
43921: LD_VAR 0 12
43925: PPUSH
43926: CALL_OW 488
43930: PUSH
43931: LD_VAR 0 11
43935: PPUSH
43936: LD_VAR 0 12
43940: PPUSH
43941: CALL_OW 428
43945: NOT
43946: AND
43947: IFFALSE 43970
// begin ComMoveXY ( tmp , _x , _y ) ;
43949: LD_VAR 0 13
43953: PPUSH
43954: LD_VAR 0 11
43958: PPUSH
43959: LD_VAR 0 12
43963: PPUSH
43964: CALL_OW 111
// break ;
43968: GO 43972
// end ; end ;
43970: GO 43857
43972: POP
43973: POP
// end ; end ;
43974: GO 43299
43976: POP
43977: POP
// end ;
43978: LD_VAR 0 8
43982: RET
// export function BuildingTechInvented ( side , btype ) ; begin
43983: LD_INT 0
43985: PPUSH
// result := true ;
43986: LD_ADDR_VAR 0 3
43990: PUSH
43991: LD_INT 1
43993: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
43994: LD_VAR 0 2
43998: PUSH
43999: LD_INT 24
44001: DOUBLE
44002: EQUAL
44003: IFTRUE 44013
44005: LD_INT 33
44007: DOUBLE
44008: EQUAL
44009: IFTRUE 44013
44011: GO 44038
44013: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
44014: LD_ADDR_VAR 0 3
44018: PUSH
44019: LD_INT 32
44021: PPUSH
44022: LD_VAR 0 1
44026: PPUSH
44027: CALL_OW 321
44031: PUSH
44032: LD_INT 2
44034: EQUAL
44035: ST_TO_ADDR
44036: GO 44354
44038: LD_INT 20
44040: DOUBLE
44041: EQUAL
44042: IFTRUE 44046
44044: GO 44071
44046: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
44047: LD_ADDR_VAR 0 3
44051: PUSH
44052: LD_INT 6
44054: PPUSH
44055: LD_VAR 0 1
44059: PPUSH
44060: CALL_OW 321
44064: PUSH
44065: LD_INT 2
44067: EQUAL
44068: ST_TO_ADDR
44069: GO 44354
44071: LD_INT 22
44073: DOUBLE
44074: EQUAL
44075: IFTRUE 44085
44077: LD_INT 36
44079: DOUBLE
44080: EQUAL
44081: IFTRUE 44085
44083: GO 44110
44085: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
44086: LD_ADDR_VAR 0 3
44090: PUSH
44091: LD_INT 15
44093: PPUSH
44094: LD_VAR 0 1
44098: PPUSH
44099: CALL_OW 321
44103: PUSH
44104: LD_INT 2
44106: EQUAL
44107: ST_TO_ADDR
44108: GO 44354
44110: LD_INT 30
44112: DOUBLE
44113: EQUAL
44114: IFTRUE 44118
44116: GO 44143
44118: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
44119: LD_ADDR_VAR 0 3
44123: PUSH
44124: LD_INT 20
44126: PPUSH
44127: LD_VAR 0 1
44131: PPUSH
44132: CALL_OW 321
44136: PUSH
44137: LD_INT 2
44139: EQUAL
44140: ST_TO_ADDR
44141: GO 44354
44143: LD_INT 28
44145: DOUBLE
44146: EQUAL
44147: IFTRUE 44157
44149: LD_INT 21
44151: DOUBLE
44152: EQUAL
44153: IFTRUE 44157
44155: GO 44182
44157: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
44158: LD_ADDR_VAR 0 3
44162: PUSH
44163: LD_INT 21
44165: PPUSH
44166: LD_VAR 0 1
44170: PPUSH
44171: CALL_OW 321
44175: PUSH
44176: LD_INT 2
44178: EQUAL
44179: ST_TO_ADDR
44180: GO 44354
44182: LD_INT 16
44184: DOUBLE
44185: EQUAL
44186: IFTRUE 44190
44188: GO 44215
44190: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
44191: LD_ADDR_VAR 0 3
44195: PUSH
44196: LD_INT 84
44198: PPUSH
44199: LD_VAR 0 1
44203: PPUSH
44204: CALL_OW 321
44208: PUSH
44209: LD_INT 2
44211: EQUAL
44212: ST_TO_ADDR
44213: GO 44354
44215: LD_INT 19
44217: DOUBLE
44218: EQUAL
44219: IFTRUE 44229
44221: LD_INT 23
44223: DOUBLE
44224: EQUAL
44225: IFTRUE 44229
44227: GO 44254
44229: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
44230: LD_ADDR_VAR 0 3
44234: PUSH
44235: LD_INT 83
44237: PPUSH
44238: LD_VAR 0 1
44242: PPUSH
44243: CALL_OW 321
44247: PUSH
44248: LD_INT 2
44250: EQUAL
44251: ST_TO_ADDR
44252: GO 44354
44254: LD_INT 17
44256: DOUBLE
44257: EQUAL
44258: IFTRUE 44262
44260: GO 44287
44262: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
44263: LD_ADDR_VAR 0 3
44267: PUSH
44268: LD_INT 39
44270: PPUSH
44271: LD_VAR 0 1
44275: PPUSH
44276: CALL_OW 321
44280: PUSH
44281: LD_INT 2
44283: EQUAL
44284: ST_TO_ADDR
44285: GO 44354
44287: LD_INT 18
44289: DOUBLE
44290: EQUAL
44291: IFTRUE 44295
44293: GO 44320
44295: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
44296: LD_ADDR_VAR 0 3
44300: PUSH
44301: LD_INT 40
44303: PPUSH
44304: LD_VAR 0 1
44308: PPUSH
44309: CALL_OW 321
44313: PUSH
44314: LD_INT 2
44316: EQUAL
44317: ST_TO_ADDR
44318: GO 44354
44320: LD_INT 27
44322: DOUBLE
44323: EQUAL
44324: IFTRUE 44328
44326: GO 44353
44328: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
44329: LD_ADDR_VAR 0 3
44333: PUSH
44334: LD_INT 35
44336: PPUSH
44337: LD_VAR 0 1
44341: PPUSH
44342: CALL_OW 321
44346: PUSH
44347: LD_INT 2
44349: EQUAL
44350: ST_TO_ADDR
44351: GO 44354
44353: POP
// end ;
44354: LD_VAR 0 3
44358: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
44359: LD_INT 0
44361: PPUSH
44362: PPUSH
44363: PPUSH
44364: PPUSH
44365: PPUSH
44366: PPUSH
44367: PPUSH
44368: PPUSH
44369: PPUSH
44370: PPUSH
44371: PPUSH
// result := false ;
44372: LD_ADDR_VAR 0 6
44376: PUSH
44377: LD_INT 0
44379: ST_TO_ADDR
// if btype = b_depot then
44380: LD_VAR 0 2
44384: PUSH
44385: LD_INT 0
44387: EQUAL
44388: IFFALSE 44400
// begin result := true ;
44390: LD_ADDR_VAR 0 6
44394: PUSH
44395: LD_INT 1
44397: ST_TO_ADDR
// exit ;
44398: GO 45226
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
44400: LD_VAR 0 1
44404: NOT
44405: PUSH
44406: LD_VAR 0 1
44410: PPUSH
44411: CALL_OW 266
44415: PUSH
44416: LD_INT 0
44418: PUSH
44419: LD_INT 1
44421: PUSH
44422: EMPTY
44423: LIST
44424: LIST
44425: IN
44426: NOT
44427: OR
44428: PUSH
44429: LD_VAR 0 2
44433: NOT
44434: OR
44435: PUSH
44436: LD_VAR 0 5
44440: PUSH
44441: LD_INT 0
44443: PUSH
44444: LD_INT 1
44446: PUSH
44447: LD_INT 2
44449: PUSH
44450: LD_INT 3
44452: PUSH
44453: LD_INT 4
44455: PUSH
44456: LD_INT 5
44458: PUSH
44459: EMPTY
44460: LIST
44461: LIST
44462: LIST
44463: LIST
44464: LIST
44465: LIST
44466: IN
44467: NOT
44468: OR
44469: PUSH
44470: LD_VAR 0 3
44474: PPUSH
44475: LD_VAR 0 4
44479: PPUSH
44480: CALL_OW 488
44484: NOT
44485: OR
44486: IFFALSE 44490
// exit ;
44488: GO 45226
// side := GetSide ( depot ) ;
44490: LD_ADDR_VAR 0 9
44494: PUSH
44495: LD_VAR 0 1
44499: PPUSH
44500: CALL_OW 255
44504: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
44505: LD_VAR 0 9
44509: PPUSH
44510: LD_VAR 0 2
44514: PPUSH
44515: CALL 43983 0 2
44519: NOT
44520: IFFALSE 44524
// exit ;
44522: GO 45226
// pom := GetBase ( depot ) ;
44524: LD_ADDR_VAR 0 10
44528: PUSH
44529: LD_VAR 0 1
44533: PPUSH
44534: CALL_OW 274
44538: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
44539: LD_ADDR_VAR 0 11
44543: PUSH
44544: LD_VAR 0 2
44548: PPUSH
44549: LD_VAR 0 1
44553: PPUSH
44554: CALL_OW 248
44558: PPUSH
44559: CALL_OW 450
44563: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
44564: LD_VAR 0 10
44568: PPUSH
44569: LD_INT 1
44571: PPUSH
44572: CALL_OW 275
44576: PUSH
44577: LD_VAR 0 11
44581: PUSH
44582: LD_INT 1
44584: ARRAY
44585: GREATEREQUAL
44586: PUSH
44587: LD_VAR 0 10
44591: PPUSH
44592: LD_INT 2
44594: PPUSH
44595: CALL_OW 275
44599: PUSH
44600: LD_VAR 0 11
44604: PUSH
44605: LD_INT 2
44607: ARRAY
44608: GREATEREQUAL
44609: AND
44610: PUSH
44611: LD_VAR 0 10
44615: PPUSH
44616: LD_INT 3
44618: PPUSH
44619: CALL_OW 275
44623: PUSH
44624: LD_VAR 0 11
44628: PUSH
44629: LD_INT 3
44631: ARRAY
44632: GREATEREQUAL
44633: AND
44634: NOT
44635: IFFALSE 44639
// exit ;
44637: GO 45226
// if GetBType ( depot ) = b_depot then
44639: LD_VAR 0 1
44643: PPUSH
44644: CALL_OW 266
44648: PUSH
44649: LD_INT 0
44651: EQUAL
44652: IFFALSE 44664
// dist := 28 else
44654: LD_ADDR_VAR 0 14
44658: PUSH
44659: LD_INT 28
44661: ST_TO_ADDR
44662: GO 44672
// dist := 36 ;
44664: LD_ADDR_VAR 0 14
44668: PUSH
44669: LD_INT 36
44671: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
44672: LD_VAR 0 1
44676: PPUSH
44677: LD_VAR 0 3
44681: PPUSH
44682: LD_VAR 0 4
44686: PPUSH
44687: CALL_OW 297
44691: PUSH
44692: LD_VAR 0 14
44696: GREATER
44697: IFFALSE 44701
// exit ;
44699: GO 45226
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
44701: LD_ADDR_VAR 0 12
44705: PUSH
44706: LD_VAR 0 2
44710: PPUSH
44711: LD_VAR 0 3
44715: PPUSH
44716: LD_VAR 0 4
44720: PPUSH
44721: LD_VAR 0 5
44725: PPUSH
44726: LD_VAR 0 1
44730: PPUSH
44731: CALL_OW 248
44735: PPUSH
44736: LD_INT 0
44738: PPUSH
44739: CALL 45231 0 6
44743: ST_TO_ADDR
// if not hexes then
44744: LD_VAR 0 12
44748: NOT
44749: IFFALSE 44753
// exit ;
44751: GO 45226
// hex := GetHexInfo ( x , y ) ;
44753: LD_ADDR_VAR 0 15
44757: PUSH
44758: LD_VAR 0 3
44762: PPUSH
44763: LD_VAR 0 4
44767: PPUSH
44768: CALL_OW 546
44772: ST_TO_ADDR
// if hex [ 1 ] then
44773: LD_VAR 0 15
44777: PUSH
44778: LD_INT 1
44780: ARRAY
44781: IFFALSE 44785
// exit ;
44783: GO 45226
// height := hex [ 2 ] ;
44785: LD_ADDR_VAR 0 13
44789: PUSH
44790: LD_VAR 0 15
44794: PUSH
44795: LD_INT 2
44797: ARRAY
44798: ST_TO_ADDR
// for i = 1 to hexes do
44799: LD_ADDR_VAR 0 7
44803: PUSH
44804: DOUBLE
44805: LD_INT 1
44807: DEC
44808: ST_TO_ADDR
44809: LD_VAR 0 12
44813: PUSH
44814: FOR_TO
44815: IFFALSE 45145
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
44817: LD_VAR 0 12
44821: PUSH
44822: LD_VAR 0 7
44826: ARRAY
44827: PUSH
44828: LD_INT 1
44830: ARRAY
44831: PPUSH
44832: LD_VAR 0 12
44836: PUSH
44837: LD_VAR 0 7
44841: ARRAY
44842: PUSH
44843: LD_INT 2
44845: ARRAY
44846: PPUSH
44847: CALL_OW 488
44851: NOT
44852: PUSH
44853: LD_VAR 0 12
44857: PUSH
44858: LD_VAR 0 7
44862: ARRAY
44863: PUSH
44864: LD_INT 1
44866: ARRAY
44867: PPUSH
44868: LD_VAR 0 12
44872: PUSH
44873: LD_VAR 0 7
44877: ARRAY
44878: PUSH
44879: LD_INT 2
44881: ARRAY
44882: PPUSH
44883: CALL_OW 428
44887: PUSH
44888: LD_INT 0
44890: GREATER
44891: OR
44892: PUSH
44893: LD_VAR 0 12
44897: PUSH
44898: LD_VAR 0 7
44902: ARRAY
44903: PUSH
44904: LD_INT 1
44906: ARRAY
44907: PPUSH
44908: LD_VAR 0 12
44912: PUSH
44913: LD_VAR 0 7
44917: ARRAY
44918: PUSH
44919: LD_INT 2
44921: ARRAY
44922: PPUSH
44923: CALL_OW 351
44927: OR
44928: IFFALSE 44934
// exit ;
44930: POP
44931: POP
44932: GO 45226
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44934: LD_ADDR_VAR 0 8
44938: PUSH
44939: LD_VAR 0 12
44943: PUSH
44944: LD_VAR 0 7
44948: ARRAY
44949: PUSH
44950: LD_INT 1
44952: ARRAY
44953: PPUSH
44954: LD_VAR 0 12
44958: PUSH
44959: LD_VAR 0 7
44963: ARRAY
44964: PUSH
44965: LD_INT 2
44967: ARRAY
44968: PPUSH
44969: CALL_OW 546
44973: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
44974: LD_VAR 0 8
44978: PUSH
44979: LD_INT 1
44981: ARRAY
44982: PUSH
44983: LD_VAR 0 8
44987: PUSH
44988: LD_INT 2
44990: ARRAY
44991: PUSH
44992: LD_VAR 0 13
44996: PUSH
44997: LD_INT 2
44999: PLUS
45000: GREATER
45001: OR
45002: PUSH
45003: LD_VAR 0 8
45007: PUSH
45008: LD_INT 2
45010: ARRAY
45011: PUSH
45012: LD_VAR 0 13
45016: PUSH
45017: LD_INT 2
45019: MINUS
45020: LESS
45021: OR
45022: PUSH
45023: LD_VAR 0 8
45027: PUSH
45028: LD_INT 3
45030: ARRAY
45031: PUSH
45032: LD_INT 0
45034: PUSH
45035: LD_INT 8
45037: PUSH
45038: LD_INT 9
45040: PUSH
45041: LD_INT 10
45043: PUSH
45044: LD_INT 11
45046: PUSH
45047: LD_INT 12
45049: PUSH
45050: LD_INT 13
45052: PUSH
45053: LD_INT 16
45055: PUSH
45056: LD_INT 17
45058: PUSH
45059: LD_INT 18
45061: PUSH
45062: LD_INT 19
45064: PUSH
45065: LD_INT 20
45067: PUSH
45068: LD_INT 21
45070: PUSH
45071: EMPTY
45072: LIST
45073: LIST
45074: LIST
45075: LIST
45076: LIST
45077: LIST
45078: LIST
45079: LIST
45080: LIST
45081: LIST
45082: LIST
45083: LIST
45084: LIST
45085: IN
45086: NOT
45087: OR
45088: PUSH
45089: LD_VAR 0 8
45093: PUSH
45094: LD_INT 5
45096: ARRAY
45097: NOT
45098: OR
45099: PUSH
45100: LD_VAR 0 8
45104: PUSH
45105: LD_INT 6
45107: ARRAY
45108: PUSH
45109: LD_INT 1
45111: PUSH
45112: LD_INT 2
45114: PUSH
45115: LD_INT 7
45117: PUSH
45118: LD_INT 9
45120: PUSH
45121: LD_INT 10
45123: PUSH
45124: LD_INT 11
45126: PUSH
45127: EMPTY
45128: LIST
45129: LIST
45130: LIST
45131: LIST
45132: LIST
45133: LIST
45134: IN
45135: NOT
45136: OR
45137: IFFALSE 45143
// exit ;
45139: POP
45140: POP
45141: GO 45226
// end ;
45143: GO 44814
45145: POP
45146: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
45147: LD_VAR 0 9
45151: PPUSH
45152: LD_VAR 0 3
45156: PPUSH
45157: LD_VAR 0 4
45161: PPUSH
45162: LD_INT 20
45164: PPUSH
45165: CALL 37149 0 4
45169: PUSH
45170: LD_INT 4
45172: ARRAY
45173: IFFALSE 45177
// exit ;
45175: GO 45226
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
45177: LD_VAR 0 2
45181: PUSH
45182: LD_INT 29
45184: PUSH
45185: LD_INT 30
45187: PUSH
45188: EMPTY
45189: LIST
45190: LIST
45191: IN
45192: PUSH
45193: LD_VAR 0 3
45197: PPUSH
45198: LD_VAR 0 4
45202: PPUSH
45203: LD_VAR 0 9
45207: PPUSH
45208: CALL_OW 440
45212: NOT
45213: AND
45214: IFFALSE 45218
// exit ;
45216: GO 45226
// result := true ;
45218: LD_ADDR_VAR 0 6
45222: PUSH
45223: LD_INT 1
45225: ST_TO_ADDR
// end ;
45226: LD_VAR 0 6
45230: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
45231: LD_INT 0
45233: PPUSH
45234: PPUSH
45235: PPUSH
45236: PPUSH
45237: PPUSH
45238: PPUSH
45239: PPUSH
45240: PPUSH
45241: PPUSH
45242: PPUSH
45243: PPUSH
45244: PPUSH
45245: PPUSH
45246: PPUSH
45247: PPUSH
45248: PPUSH
45249: PPUSH
45250: PPUSH
45251: PPUSH
45252: PPUSH
45253: PPUSH
45254: PPUSH
45255: PPUSH
45256: PPUSH
45257: PPUSH
45258: PPUSH
45259: PPUSH
45260: PPUSH
45261: PPUSH
45262: PPUSH
45263: PPUSH
45264: PPUSH
45265: PPUSH
45266: PPUSH
45267: PPUSH
45268: PPUSH
45269: PPUSH
45270: PPUSH
45271: PPUSH
45272: PPUSH
45273: PPUSH
45274: PPUSH
45275: PPUSH
45276: PPUSH
45277: PPUSH
45278: PPUSH
45279: PPUSH
45280: PPUSH
45281: PPUSH
45282: PPUSH
45283: PPUSH
45284: PPUSH
45285: PPUSH
45286: PPUSH
45287: PPUSH
45288: PPUSH
45289: PPUSH
45290: PPUSH
// result = [ ] ;
45291: LD_ADDR_VAR 0 7
45295: PUSH
45296: EMPTY
45297: ST_TO_ADDR
// temp_list = [ ] ;
45298: LD_ADDR_VAR 0 9
45302: PUSH
45303: EMPTY
45304: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
45305: LD_VAR 0 4
45309: PUSH
45310: LD_INT 0
45312: PUSH
45313: LD_INT 1
45315: PUSH
45316: LD_INT 2
45318: PUSH
45319: LD_INT 3
45321: PUSH
45322: LD_INT 4
45324: PUSH
45325: LD_INT 5
45327: PUSH
45328: EMPTY
45329: LIST
45330: LIST
45331: LIST
45332: LIST
45333: LIST
45334: LIST
45335: IN
45336: NOT
45337: PUSH
45338: LD_VAR 0 1
45342: PUSH
45343: LD_INT 0
45345: PUSH
45346: LD_INT 1
45348: PUSH
45349: EMPTY
45350: LIST
45351: LIST
45352: IN
45353: PUSH
45354: LD_VAR 0 5
45358: PUSH
45359: LD_INT 1
45361: PUSH
45362: LD_INT 2
45364: PUSH
45365: LD_INT 3
45367: PUSH
45368: EMPTY
45369: LIST
45370: LIST
45371: LIST
45372: IN
45373: NOT
45374: AND
45375: OR
45376: IFFALSE 45380
// exit ;
45378: GO 63771
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
45380: LD_VAR 0 1
45384: PUSH
45385: LD_INT 6
45387: PUSH
45388: LD_INT 7
45390: PUSH
45391: LD_INT 8
45393: PUSH
45394: LD_INT 13
45396: PUSH
45397: LD_INT 12
45399: PUSH
45400: LD_INT 15
45402: PUSH
45403: LD_INT 11
45405: PUSH
45406: LD_INT 14
45408: PUSH
45409: LD_INT 10
45411: PUSH
45412: EMPTY
45413: LIST
45414: LIST
45415: LIST
45416: LIST
45417: LIST
45418: LIST
45419: LIST
45420: LIST
45421: LIST
45422: IN
45423: IFFALSE 45433
// btype = b_lab ;
45425: LD_ADDR_VAR 0 1
45429: PUSH
45430: LD_INT 6
45432: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
45433: LD_VAR 0 6
45437: PUSH
45438: LD_INT 0
45440: PUSH
45441: LD_INT 1
45443: PUSH
45444: LD_INT 2
45446: PUSH
45447: EMPTY
45448: LIST
45449: LIST
45450: LIST
45451: IN
45452: NOT
45453: PUSH
45454: LD_VAR 0 1
45458: PUSH
45459: LD_INT 0
45461: PUSH
45462: LD_INT 1
45464: PUSH
45465: LD_INT 2
45467: PUSH
45468: LD_INT 3
45470: PUSH
45471: LD_INT 6
45473: PUSH
45474: LD_INT 36
45476: PUSH
45477: LD_INT 4
45479: PUSH
45480: LD_INT 5
45482: PUSH
45483: LD_INT 31
45485: PUSH
45486: LD_INT 32
45488: PUSH
45489: LD_INT 33
45491: PUSH
45492: EMPTY
45493: LIST
45494: LIST
45495: LIST
45496: LIST
45497: LIST
45498: LIST
45499: LIST
45500: LIST
45501: LIST
45502: LIST
45503: LIST
45504: IN
45505: NOT
45506: PUSH
45507: LD_VAR 0 6
45511: PUSH
45512: LD_INT 1
45514: EQUAL
45515: AND
45516: OR
45517: PUSH
45518: LD_VAR 0 1
45522: PUSH
45523: LD_INT 2
45525: PUSH
45526: LD_INT 3
45528: PUSH
45529: EMPTY
45530: LIST
45531: LIST
45532: IN
45533: NOT
45534: PUSH
45535: LD_VAR 0 6
45539: PUSH
45540: LD_INT 2
45542: EQUAL
45543: AND
45544: OR
45545: IFFALSE 45555
// mode = 0 ;
45547: LD_ADDR_VAR 0 6
45551: PUSH
45552: LD_INT 0
45554: ST_TO_ADDR
// case mode of 0 :
45555: LD_VAR 0 6
45559: PUSH
45560: LD_INT 0
45562: DOUBLE
45563: EQUAL
45564: IFTRUE 45568
45566: GO 57021
45568: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45569: LD_ADDR_VAR 0 11
45573: PUSH
45574: LD_INT 0
45576: PUSH
45577: LD_INT 0
45579: PUSH
45580: EMPTY
45581: LIST
45582: LIST
45583: PUSH
45584: LD_INT 0
45586: PUSH
45587: LD_INT 1
45589: NEG
45590: PUSH
45591: EMPTY
45592: LIST
45593: LIST
45594: PUSH
45595: LD_INT 1
45597: PUSH
45598: LD_INT 0
45600: PUSH
45601: EMPTY
45602: LIST
45603: LIST
45604: PUSH
45605: LD_INT 1
45607: PUSH
45608: LD_INT 1
45610: PUSH
45611: EMPTY
45612: LIST
45613: LIST
45614: PUSH
45615: LD_INT 0
45617: PUSH
45618: LD_INT 1
45620: PUSH
45621: EMPTY
45622: LIST
45623: LIST
45624: PUSH
45625: LD_INT 1
45627: NEG
45628: PUSH
45629: LD_INT 0
45631: PUSH
45632: EMPTY
45633: LIST
45634: LIST
45635: PUSH
45636: LD_INT 1
45638: NEG
45639: PUSH
45640: LD_INT 1
45642: NEG
45643: PUSH
45644: EMPTY
45645: LIST
45646: LIST
45647: PUSH
45648: LD_INT 1
45650: NEG
45651: PUSH
45652: LD_INT 2
45654: NEG
45655: PUSH
45656: EMPTY
45657: LIST
45658: LIST
45659: PUSH
45660: LD_INT 0
45662: PUSH
45663: LD_INT 2
45665: NEG
45666: PUSH
45667: EMPTY
45668: LIST
45669: LIST
45670: PUSH
45671: LD_INT 1
45673: PUSH
45674: LD_INT 1
45676: NEG
45677: PUSH
45678: EMPTY
45679: LIST
45680: LIST
45681: PUSH
45682: LD_INT 1
45684: PUSH
45685: LD_INT 2
45687: PUSH
45688: EMPTY
45689: LIST
45690: LIST
45691: PUSH
45692: LD_INT 0
45694: PUSH
45695: LD_INT 2
45697: PUSH
45698: EMPTY
45699: LIST
45700: LIST
45701: PUSH
45702: LD_INT 1
45704: NEG
45705: PUSH
45706: LD_INT 1
45708: PUSH
45709: EMPTY
45710: LIST
45711: LIST
45712: PUSH
45713: LD_INT 1
45715: PUSH
45716: LD_INT 3
45718: PUSH
45719: EMPTY
45720: LIST
45721: LIST
45722: PUSH
45723: LD_INT 0
45725: PUSH
45726: LD_INT 3
45728: PUSH
45729: EMPTY
45730: LIST
45731: LIST
45732: PUSH
45733: LD_INT 1
45735: NEG
45736: PUSH
45737: LD_INT 2
45739: PUSH
45740: EMPTY
45741: LIST
45742: LIST
45743: PUSH
45744: EMPTY
45745: LIST
45746: LIST
45747: LIST
45748: LIST
45749: LIST
45750: LIST
45751: LIST
45752: LIST
45753: LIST
45754: LIST
45755: LIST
45756: LIST
45757: LIST
45758: LIST
45759: LIST
45760: LIST
45761: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45762: LD_ADDR_VAR 0 12
45766: PUSH
45767: LD_INT 0
45769: PUSH
45770: LD_INT 0
45772: PUSH
45773: EMPTY
45774: LIST
45775: LIST
45776: PUSH
45777: LD_INT 0
45779: PUSH
45780: LD_INT 1
45782: NEG
45783: PUSH
45784: EMPTY
45785: LIST
45786: LIST
45787: PUSH
45788: LD_INT 1
45790: PUSH
45791: LD_INT 0
45793: PUSH
45794: EMPTY
45795: LIST
45796: LIST
45797: PUSH
45798: LD_INT 1
45800: PUSH
45801: LD_INT 1
45803: PUSH
45804: EMPTY
45805: LIST
45806: LIST
45807: PUSH
45808: LD_INT 0
45810: PUSH
45811: LD_INT 1
45813: PUSH
45814: EMPTY
45815: LIST
45816: LIST
45817: PUSH
45818: LD_INT 1
45820: NEG
45821: PUSH
45822: LD_INT 0
45824: PUSH
45825: EMPTY
45826: LIST
45827: LIST
45828: PUSH
45829: LD_INT 1
45831: NEG
45832: PUSH
45833: LD_INT 1
45835: NEG
45836: PUSH
45837: EMPTY
45838: LIST
45839: LIST
45840: PUSH
45841: LD_INT 1
45843: PUSH
45844: LD_INT 1
45846: NEG
45847: PUSH
45848: EMPTY
45849: LIST
45850: LIST
45851: PUSH
45852: LD_INT 2
45854: PUSH
45855: LD_INT 0
45857: PUSH
45858: EMPTY
45859: LIST
45860: LIST
45861: PUSH
45862: LD_INT 2
45864: PUSH
45865: LD_INT 1
45867: PUSH
45868: EMPTY
45869: LIST
45870: LIST
45871: PUSH
45872: LD_INT 1
45874: NEG
45875: PUSH
45876: LD_INT 1
45878: PUSH
45879: EMPTY
45880: LIST
45881: LIST
45882: PUSH
45883: LD_INT 2
45885: NEG
45886: PUSH
45887: LD_INT 0
45889: PUSH
45890: EMPTY
45891: LIST
45892: LIST
45893: PUSH
45894: LD_INT 2
45896: NEG
45897: PUSH
45898: LD_INT 1
45900: NEG
45901: PUSH
45902: EMPTY
45903: LIST
45904: LIST
45905: PUSH
45906: LD_INT 2
45908: NEG
45909: PUSH
45910: LD_INT 1
45912: PUSH
45913: EMPTY
45914: LIST
45915: LIST
45916: PUSH
45917: LD_INT 3
45919: NEG
45920: PUSH
45921: LD_INT 0
45923: PUSH
45924: EMPTY
45925: LIST
45926: LIST
45927: PUSH
45928: LD_INT 3
45930: NEG
45931: PUSH
45932: LD_INT 1
45934: NEG
45935: PUSH
45936: EMPTY
45937: LIST
45938: LIST
45939: PUSH
45940: EMPTY
45941: LIST
45942: LIST
45943: LIST
45944: LIST
45945: LIST
45946: LIST
45947: LIST
45948: LIST
45949: LIST
45950: LIST
45951: LIST
45952: LIST
45953: LIST
45954: LIST
45955: LIST
45956: LIST
45957: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45958: LD_ADDR_VAR 0 13
45962: PUSH
45963: LD_INT 0
45965: PUSH
45966: LD_INT 0
45968: PUSH
45969: EMPTY
45970: LIST
45971: LIST
45972: PUSH
45973: LD_INT 0
45975: PUSH
45976: LD_INT 1
45978: NEG
45979: PUSH
45980: EMPTY
45981: LIST
45982: LIST
45983: PUSH
45984: LD_INT 1
45986: PUSH
45987: LD_INT 0
45989: PUSH
45990: EMPTY
45991: LIST
45992: LIST
45993: PUSH
45994: LD_INT 1
45996: PUSH
45997: LD_INT 1
45999: PUSH
46000: EMPTY
46001: LIST
46002: LIST
46003: PUSH
46004: LD_INT 0
46006: PUSH
46007: LD_INT 1
46009: PUSH
46010: EMPTY
46011: LIST
46012: LIST
46013: PUSH
46014: LD_INT 1
46016: NEG
46017: PUSH
46018: LD_INT 0
46020: PUSH
46021: EMPTY
46022: LIST
46023: LIST
46024: PUSH
46025: LD_INT 1
46027: NEG
46028: PUSH
46029: LD_INT 1
46031: NEG
46032: PUSH
46033: EMPTY
46034: LIST
46035: LIST
46036: PUSH
46037: LD_INT 1
46039: NEG
46040: PUSH
46041: LD_INT 2
46043: NEG
46044: PUSH
46045: EMPTY
46046: LIST
46047: LIST
46048: PUSH
46049: LD_INT 2
46051: PUSH
46052: LD_INT 1
46054: PUSH
46055: EMPTY
46056: LIST
46057: LIST
46058: PUSH
46059: LD_INT 2
46061: PUSH
46062: LD_INT 2
46064: PUSH
46065: EMPTY
46066: LIST
46067: LIST
46068: PUSH
46069: LD_INT 1
46071: PUSH
46072: LD_INT 2
46074: PUSH
46075: EMPTY
46076: LIST
46077: LIST
46078: PUSH
46079: LD_INT 2
46081: NEG
46082: PUSH
46083: LD_INT 1
46085: NEG
46086: PUSH
46087: EMPTY
46088: LIST
46089: LIST
46090: PUSH
46091: LD_INT 2
46093: NEG
46094: PUSH
46095: LD_INT 2
46097: NEG
46098: PUSH
46099: EMPTY
46100: LIST
46101: LIST
46102: PUSH
46103: LD_INT 2
46105: NEG
46106: PUSH
46107: LD_INT 3
46109: NEG
46110: PUSH
46111: EMPTY
46112: LIST
46113: LIST
46114: PUSH
46115: LD_INT 3
46117: NEG
46118: PUSH
46119: LD_INT 2
46121: NEG
46122: PUSH
46123: EMPTY
46124: LIST
46125: LIST
46126: PUSH
46127: LD_INT 3
46129: NEG
46130: PUSH
46131: LD_INT 3
46133: NEG
46134: PUSH
46135: EMPTY
46136: LIST
46137: LIST
46138: PUSH
46139: EMPTY
46140: LIST
46141: LIST
46142: LIST
46143: LIST
46144: LIST
46145: LIST
46146: LIST
46147: LIST
46148: LIST
46149: LIST
46150: LIST
46151: LIST
46152: LIST
46153: LIST
46154: LIST
46155: LIST
46156: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46157: LD_ADDR_VAR 0 14
46161: PUSH
46162: LD_INT 0
46164: PUSH
46165: LD_INT 0
46167: PUSH
46168: EMPTY
46169: LIST
46170: LIST
46171: PUSH
46172: LD_INT 0
46174: PUSH
46175: LD_INT 1
46177: NEG
46178: PUSH
46179: EMPTY
46180: LIST
46181: LIST
46182: PUSH
46183: LD_INT 1
46185: PUSH
46186: LD_INT 0
46188: PUSH
46189: EMPTY
46190: LIST
46191: LIST
46192: PUSH
46193: LD_INT 1
46195: PUSH
46196: LD_INT 1
46198: PUSH
46199: EMPTY
46200: LIST
46201: LIST
46202: PUSH
46203: LD_INT 0
46205: PUSH
46206: LD_INT 1
46208: PUSH
46209: EMPTY
46210: LIST
46211: LIST
46212: PUSH
46213: LD_INT 1
46215: NEG
46216: PUSH
46217: LD_INT 0
46219: PUSH
46220: EMPTY
46221: LIST
46222: LIST
46223: PUSH
46224: LD_INT 1
46226: NEG
46227: PUSH
46228: LD_INT 1
46230: NEG
46231: PUSH
46232: EMPTY
46233: LIST
46234: LIST
46235: PUSH
46236: LD_INT 1
46238: NEG
46239: PUSH
46240: LD_INT 2
46242: NEG
46243: PUSH
46244: EMPTY
46245: LIST
46246: LIST
46247: PUSH
46248: LD_INT 0
46250: PUSH
46251: LD_INT 2
46253: NEG
46254: PUSH
46255: EMPTY
46256: LIST
46257: LIST
46258: PUSH
46259: LD_INT 1
46261: PUSH
46262: LD_INT 1
46264: NEG
46265: PUSH
46266: EMPTY
46267: LIST
46268: LIST
46269: PUSH
46270: LD_INT 1
46272: PUSH
46273: LD_INT 2
46275: PUSH
46276: EMPTY
46277: LIST
46278: LIST
46279: PUSH
46280: LD_INT 0
46282: PUSH
46283: LD_INT 2
46285: PUSH
46286: EMPTY
46287: LIST
46288: LIST
46289: PUSH
46290: LD_INT 1
46292: NEG
46293: PUSH
46294: LD_INT 1
46296: PUSH
46297: EMPTY
46298: LIST
46299: LIST
46300: PUSH
46301: LD_INT 1
46303: NEG
46304: PUSH
46305: LD_INT 3
46307: NEG
46308: PUSH
46309: EMPTY
46310: LIST
46311: LIST
46312: PUSH
46313: LD_INT 0
46315: PUSH
46316: LD_INT 3
46318: NEG
46319: PUSH
46320: EMPTY
46321: LIST
46322: LIST
46323: PUSH
46324: LD_INT 1
46326: PUSH
46327: LD_INT 2
46329: NEG
46330: PUSH
46331: EMPTY
46332: LIST
46333: LIST
46334: PUSH
46335: EMPTY
46336: LIST
46337: LIST
46338: LIST
46339: LIST
46340: LIST
46341: LIST
46342: LIST
46343: LIST
46344: LIST
46345: LIST
46346: LIST
46347: LIST
46348: LIST
46349: LIST
46350: LIST
46351: LIST
46352: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46353: LD_ADDR_VAR 0 15
46357: PUSH
46358: LD_INT 0
46360: PUSH
46361: LD_INT 0
46363: PUSH
46364: EMPTY
46365: LIST
46366: LIST
46367: PUSH
46368: LD_INT 0
46370: PUSH
46371: LD_INT 1
46373: NEG
46374: PUSH
46375: EMPTY
46376: LIST
46377: LIST
46378: PUSH
46379: LD_INT 1
46381: PUSH
46382: LD_INT 0
46384: PUSH
46385: EMPTY
46386: LIST
46387: LIST
46388: PUSH
46389: LD_INT 1
46391: PUSH
46392: LD_INT 1
46394: PUSH
46395: EMPTY
46396: LIST
46397: LIST
46398: PUSH
46399: LD_INT 0
46401: PUSH
46402: LD_INT 1
46404: PUSH
46405: EMPTY
46406: LIST
46407: LIST
46408: PUSH
46409: LD_INT 1
46411: NEG
46412: PUSH
46413: LD_INT 0
46415: PUSH
46416: EMPTY
46417: LIST
46418: LIST
46419: PUSH
46420: LD_INT 1
46422: NEG
46423: PUSH
46424: LD_INT 1
46426: NEG
46427: PUSH
46428: EMPTY
46429: LIST
46430: LIST
46431: PUSH
46432: LD_INT 1
46434: PUSH
46435: LD_INT 1
46437: NEG
46438: PUSH
46439: EMPTY
46440: LIST
46441: LIST
46442: PUSH
46443: LD_INT 2
46445: PUSH
46446: LD_INT 0
46448: PUSH
46449: EMPTY
46450: LIST
46451: LIST
46452: PUSH
46453: LD_INT 2
46455: PUSH
46456: LD_INT 1
46458: PUSH
46459: EMPTY
46460: LIST
46461: LIST
46462: PUSH
46463: LD_INT 1
46465: NEG
46466: PUSH
46467: LD_INT 1
46469: PUSH
46470: EMPTY
46471: LIST
46472: LIST
46473: PUSH
46474: LD_INT 2
46476: NEG
46477: PUSH
46478: LD_INT 0
46480: PUSH
46481: EMPTY
46482: LIST
46483: LIST
46484: PUSH
46485: LD_INT 2
46487: NEG
46488: PUSH
46489: LD_INT 1
46491: NEG
46492: PUSH
46493: EMPTY
46494: LIST
46495: LIST
46496: PUSH
46497: LD_INT 2
46499: PUSH
46500: LD_INT 1
46502: NEG
46503: PUSH
46504: EMPTY
46505: LIST
46506: LIST
46507: PUSH
46508: LD_INT 3
46510: PUSH
46511: LD_INT 0
46513: PUSH
46514: EMPTY
46515: LIST
46516: LIST
46517: PUSH
46518: LD_INT 3
46520: PUSH
46521: LD_INT 1
46523: PUSH
46524: EMPTY
46525: LIST
46526: LIST
46527: PUSH
46528: EMPTY
46529: LIST
46530: LIST
46531: LIST
46532: LIST
46533: LIST
46534: LIST
46535: LIST
46536: LIST
46537: LIST
46538: LIST
46539: LIST
46540: LIST
46541: LIST
46542: LIST
46543: LIST
46544: LIST
46545: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46546: LD_ADDR_VAR 0 16
46550: PUSH
46551: LD_INT 0
46553: PUSH
46554: LD_INT 0
46556: PUSH
46557: EMPTY
46558: LIST
46559: LIST
46560: PUSH
46561: LD_INT 0
46563: PUSH
46564: LD_INT 1
46566: NEG
46567: PUSH
46568: EMPTY
46569: LIST
46570: LIST
46571: PUSH
46572: LD_INT 1
46574: PUSH
46575: LD_INT 0
46577: PUSH
46578: EMPTY
46579: LIST
46580: LIST
46581: PUSH
46582: LD_INT 1
46584: PUSH
46585: LD_INT 1
46587: PUSH
46588: EMPTY
46589: LIST
46590: LIST
46591: PUSH
46592: LD_INT 0
46594: PUSH
46595: LD_INT 1
46597: PUSH
46598: EMPTY
46599: LIST
46600: LIST
46601: PUSH
46602: LD_INT 1
46604: NEG
46605: PUSH
46606: LD_INT 0
46608: PUSH
46609: EMPTY
46610: LIST
46611: LIST
46612: PUSH
46613: LD_INT 1
46615: NEG
46616: PUSH
46617: LD_INT 1
46619: NEG
46620: PUSH
46621: EMPTY
46622: LIST
46623: LIST
46624: PUSH
46625: LD_INT 1
46627: NEG
46628: PUSH
46629: LD_INT 2
46631: NEG
46632: PUSH
46633: EMPTY
46634: LIST
46635: LIST
46636: PUSH
46637: LD_INT 2
46639: PUSH
46640: LD_INT 1
46642: PUSH
46643: EMPTY
46644: LIST
46645: LIST
46646: PUSH
46647: LD_INT 2
46649: PUSH
46650: LD_INT 2
46652: PUSH
46653: EMPTY
46654: LIST
46655: LIST
46656: PUSH
46657: LD_INT 1
46659: PUSH
46660: LD_INT 2
46662: PUSH
46663: EMPTY
46664: LIST
46665: LIST
46666: PUSH
46667: LD_INT 2
46669: NEG
46670: PUSH
46671: LD_INT 1
46673: NEG
46674: PUSH
46675: EMPTY
46676: LIST
46677: LIST
46678: PUSH
46679: LD_INT 2
46681: NEG
46682: PUSH
46683: LD_INT 2
46685: NEG
46686: PUSH
46687: EMPTY
46688: LIST
46689: LIST
46690: PUSH
46691: LD_INT 3
46693: PUSH
46694: LD_INT 2
46696: PUSH
46697: EMPTY
46698: LIST
46699: LIST
46700: PUSH
46701: LD_INT 3
46703: PUSH
46704: LD_INT 3
46706: PUSH
46707: EMPTY
46708: LIST
46709: LIST
46710: PUSH
46711: LD_INT 2
46713: PUSH
46714: LD_INT 3
46716: PUSH
46717: EMPTY
46718: LIST
46719: LIST
46720: PUSH
46721: EMPTY
46722: LIST
46723: LIST
46724: LIST
46725: LIST
46726: LIST
46727: LIST
46728: LIST
46729: LIST
46730: LIST
46731: LIST
46732: LIST
46733: LIST
46734: LIST
46735: LIST
46736: LIST
46737: LIST
46738: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46739: LD_ADDR_VAR 0 17
46743: PUSH
46744: LD_INT 0
46746: PUSH
46747: LD_INT 0
46749: PUSH
46750: EMPTY
46751: LIST
46752: LIST
46753: PUSH
46754: LD_INT 0
46756: PUSH
46757: LD_INT 1
46759: NEG
46760: PUSH
46761: EMPTY
46762: LIST
46763: LIST
46764: PUSH
46765: LD_INT 1
46767: PUSH
46768: LD_INT 0
46770: PUSH
46771: EMPTY
46772: LIST
46773: LIST
46774: PUSH
46775: LD_INT 1
46777: PUSH
46778: LD_INT 1
46780: PUSH
46781: EMPTY
46782: LIST
46783: LIST
46784: PUSH
46785: LD_INT 0
46787: PUSH
46788: LD_INT 1
46790: PUSH
46791: EMPTY
46792: LIST
46793: LIST
46794: PUSH
46795: LD_INT 1
46797: NEG
46798: PUSH
46799: LD_INT 0
46801: PUSH
46802: EMPTY
46803: LIST
46804: LIST
46805: PUSH
46806: LD_INT 1
46808: NEG
46809: PUSH
46810: LD_INT 1
46812: NEG
46813: PUSH
46814: EMPTY
46815: LIST
46816: LIST
46817: PUSH
46818: LD_INT 1
46820: NEG
46821: PUSH
46822: LD_INT 2
46824: NEG
46825: PUSH
46826: EMPTY
46827: LIST
46828: LIST
46829: PUSH
46830: LD_INT 0
46832: PUSH
46833: LD_INT 2
46835: NEG
46836: PUSH
46837: EMPTY
46838: LIST
46839: LIST
46840: PUSH
46841: LD_INT 1
46843: PUSH
46844: LD_INT 1
46846: NEG
46847: PUSH
46848: EMPTY
46849: LIST
46850: LIST
46851: PUSH
46852: LD_INT 2
46854: PUSH
46855: LD_INT 0
46857: PUSH
46858: EMPTY
46859: LIST
46860: LIST
46861: PUSH
46862: LD_INT 2
46864: PUSH
46865: LD_INT 1
46867: PUSH
46868: EMPTY
46869: LIST
46870: LIST
46871: PUSH
46872: LD_INT 2
46874: PUSH
46875: LD_INT 2
46877: PUSH
46878: EMPTY
46879: LIST
46880: LIST
46881: PUSH
46882: LD_INT 1
46884: PUSH
46885: LD_INT 2
46887: PUSH
46888: EMPTY
46889: LIST
46890: LIST
46891: PUSH
46892: LD_INT 0
46894: PUSH
46895: LD_INT 2
46897: PUSH
46898: EMPTY
46899: LIST
46900: LIST
46901: PUSH
46902: LD_INT 1
46904: NEG
46905: PUSH
46906: LD_INT 1
46908: PUSH
46909: EMPTY
46910: LIST
46911: LIST
46912: PUSH
46913: LD_INT 2
46915: NEG
46916: PUSH
46917: LD_INT 0
46919: PUSH
46920: EMPTY
46921: LIST
46922: LIST
46923: PUSH
46924: LD_INT 2
46926: NEG
46927: PUSH
46928: LD_INT 1
46930: NEG
46931: PUSH
46932: EMPTY
46933: LIST
46934: LIST
46935: PUSH
46936: LD_INT 2
46938: NEG
46939: PUSH
46940: LD_INT 2
46942: NEG
46943: PUSH
46944: EMPTY
46945: LIST
46946: LIST
46947: PUSH
46948: EMPTY
46949: LIST
46950: LIST
46951: LIST
46952: LIST
46953: LIST
46954: LIST
46955: LIST
46956: LIST
46957: LIST
46958: LIST
46959: LIST
46960: LIST
46961: LIST
46962: LIST
46963: LIST
46964: LIST
46965: LIST
46966: LIST
46967: LIST
46968: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46969: LD_ADDR_VAR 0 18
46973: PUSH
46974: LD_INT 0
46976: PUSH
46977: LD_INT 0
46979: PUSH
46980: EMPTY
46981: LIST
46982: LIST
46983: PUSH
46984: LD_INT 0
46986: PUSH
46987: LD_INT 1
46989: NEG
46990: PUSH
46991: EMPTY
46992: LIST
46993: LIST
46994: PUSH
46995: LD_INT 1
46997: PUSH
46998: LD_INT 0
47000: PUSH
47001: EMPTY
47002: LIST
47003: LIST
47004: PUSH
47005: LD_INT 1
47007: PUSH
47008: LD_INT 1
47010: PUSH
47011: EMPTY
47012: LIST
47013: LIST
47014: PUSH
47015: LD_INT 0
47017: PUSH
47018: LD_INT 1
47020: PUSH
47021: EMPTY
47022: LIST
47023: LIST
47024: PUSH
47025: LD_INT 1
47027: NEG
47028: PUSH
47029: LD_INT 0
47031: PUSH
47032: EMPTY
47033: LIST
47034: LIST
47035: PUSH
47036: LD_INT 1
47038: NEG
47039: PUSH
47040: LD_INT 1
47042: NEG
47043: PUSH
47044: EMPTY
47045: LIST
47046: LIST
47047: PUSH
47048: LD_INT 1
47050: NEG
47051: PUSH
47052: LD_INT 2
47054: NEG
47055: PUSH
47056: EMPTY
47057: LIST
47058: LIST
47059: PUSH
47060: LD_INT 0
47062: PUSH
47063: LD_INT 2
47065: NEG
47066: PUSH
47067: EMPTY
47068: LIST
47069: LIST
47070: PUSH
47071: LD_INT 1
47073: PUSH
47074: LD_INT 1
47076: NEG
47077: PUSH
47078: EMPTY
47079: LIST
47080: LIST
47081: PUSH
47082: LD_INT 2
47084: PUSH
47085: LD_INT 0
47087: PUSH
47088: EMPTY
47089: LIST
47090: LIST
47091: PUSH
47092: LD_INT 2
47094: PUSH
47095: LD_INT 1
47097: PUSH
47098: EMPTY
47099: LIST
47100: LIST
47101: PUSH
47102: LD_INT 2
47104: PUSH
47105: LD_INT 2
47107: PUSH
47108: EMPTY
47109: LIST
47110: LIST
47111: PUSH
47112: LD_INT 1
47114: PUSH
47115: LD_INT 2
47117: PUSH
47118: EMPTY
47119: LIST
47120: LIST
47121: PUSH
47122: LD_INT 0
47124: PUSH
47125: LD_INT 2
47127: PUSH
47128: EMPTY
47129: LIST
47130: LIST
47131: PUSH
47132: LD_INT 1
47134: NEG
47135: PUSH
47136: LD_INT 1
47138: PUSH
47139: EMPTY
47140: LIST
47141: LIST
47142: PUSH
47143: LD_INT 2
47145: NEG
47146: PUSH
47147: LD_INT 0
47149: PUSH
47150: EMPTY
47151: LIST
47152: LIST
47153: PUSH
47154: LD_INT 2
47156: NEG
47157: PUSH
47158: LD_INT 1
47160: NEG
47161: PUSH
47162: EMPTY
47163: LIST
47164: LIST
47165: PUSH
47166: LD_INT 2
47168: NEG
47169: PUSH
47170: LD_INT 2
47172: NEG
47173: PUSH
47174: EMPTY
47175: LIST
47176: LIST
47177: PUSH
47178: EMPTY
47179: LIST
47180: LIST
47181: LIST
47182: LIST
47183: LIST
47184: LIST
47185: LIST
47186: LIST
47187: LIST
47188: LIST
47189: LIST
47190: LIST
47191: LIST
47192: LIST
47193: LIST
47194: LIST
47195: LIST
47196: LIST
47197: LIST
47198: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47199: LD_ADDR_VAR 0 19
47203: PUSH
47204: LD_INT 0
47206: PUSH
47207: LD_INT 0
47209: PUSH
47210: EMPTY
47211: LIST
47212: LIST
47213: PUSH
47214: LD_INT 0
47216: PUSH
47217: LD_INT 1
47219: NEG
47220: PUSH
47221: EMPTY
47222: LIST
47223: LIST
47224: PUSH
47225: LD_INT 1
47227: PUSH
47228: LD_INT 0
47230: PUSH
47231: EMPTY
47232: LIST
47233: LIST
47234: PUSH
47235: LD_INT 1
47237: PUSH
47238: LD_INT 1
47240: PUSH
47241: EMPTY
47242: LIST
47243: LIST
47244: PUSH
47245: LD_INT 0
47247: PUSH
47248: LD_INT 1
47250: PUSH
47251: EMPTY
47252: LIST
47253: LIST
47254: PUSH
47255: LD_INT 1
47257: NEG
47258: PUSH
47259: LD_INT 0
47261: PUSH
47262: EMPTY
47263: LIST
47264: LIST
47265: PUSH
47266: LD_INT 1
47268: NEG
47269: PUSH
47270: LD_INT 1
47272: NEG
47273: PUSH
47274: EMPTY
47275: LIST
47276: LIST
47277: PUSH
47278: LD_INT 1
47280: NEG
47281: PUSH
47282: LD_INT 2
47284: NEG
47285: PUSH
47286: EMPTY
47287: LIST
47288: LIST
47289: PUSH
47290: LD_INT 0
47292: PUSH
47293: LD_INT 2
47295: NEG
47296: PUSH
47297: EMPTY
47298: LIST
47299: LIST
47300: PUSH
47301: LD_INT 1
47303: PUSH
47304: LD_INT 1
47306: NEG
47307: PUSH
47308: EMPTY
47309: LIST
47310: LIST
47311: PUSH
47312: LD_INT 2
47314: PUSH
47315: LD_INT 0
47317: PUSH
47318: EMPTY
47319: LIST
47320: LIST
47321: PUSH
47322: LD_INT 2
47324: PUSH
47325: LD_INT 1
47327: PUSH
47328: EMPTY
47329: LIST
47330: LIST
47331: PUSH
47332: LD_INT 2
47334: PUSH
47335: LD_INT 2
47337: PUSH
47338: EMPTY
47339: LIST
47340: LIST
47341: PUSH
47342: LD_INT 1
47344: PUSH
47345: LD_INT 2
47347: PUSH
47348: EMPTY
47349: LIST
47350: LIST
47351: PUSH
47352: LD_INT 0
47354: PUSH
47355: LD_INT 2
47357: PUSH
47358: EMPTY
47359: LIST
47360: LIST
47361: PUSH
47362: LD_INT 1
47364: NEG
47365: PUSH
47366: LD_INT 1
47368: PUSH
47369: EMPTY
47370: LIST
47371: LIST
47372: PUSH
47373: LD_INT 2
47375: NEG
47376: PUSH
47377: LD_INT 0
47379: PUSH
47380: EMPTY
47381: LIST
47382: LIST
47383: PUSH
47384: LD_INT 2
47386: NEG
47387: PUSH
47388: LD_INT 1
47390: NEG
47391: PUSH
47392: EMPTY
47393: LIST
47394: LIST
47395: PUSH
47396: LD_INT 2
47398: NEG
47399: PUSH
47400: LD_INT 2
47402: NEG
47403: PUSH
47404: EMPTY
47405: LIST
47406: LIST
47407: PUSH
47408: EMPTY
47409: LIST
47410: LIST
47411: LIST
47412: LIST
47413: LIST
47414: LIST
47415: LIST
47416: LIST
47417: LIST
47418: LIST
47419: LIST
47420: LIST
47421: LIST
47422: LIST
47423: LIST
47424: LIST
47425: LIST
47426: LIST
47427: LIST
47428: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47429: LD_ADDR_VAR 0 20
47433: PUSH
47434: LD_INT 0
47436: PUSH
47437: LD_INT 0
47439: PUSH
47440: EMPTY
47441: LIST
47442: LIST
47443: PUSH
47444: LD_INT 0
47446: PUSH
47447: LD_INT 1
47449: NEG
47450: PUSH
47451: EMPTY
47452: LIST
47453: LIST
47454: PUSH
47455: LD_INT 1
47457: PUSH
47458: LD_INT 0
47460: PUSH
47461: EMPTY
47462: LIST
47463: LIST
47464: PUSH
47465: LD_INT 1
47467: PUSH
47468: LD_INT 1
47470: PUSH
47471: EMPTY
47472: LIST
47473: LIST
47474: PUSH
47475: LD_INT 0
47477: PUSH
47478: LD_INT 1
47480: PUSH
47481: EMPTY
47482: LIST
47483: LIST
47484: PUSH
47485: LD_INT 1
47487: NEG
47488: PUSH
47489: LD_INT 0
47491: PUSH
47492: EMPTY
47493: LIST
47494: LIST
47495: PUSH
47496: LD_INT 1
47498: NEG
47499: PUSH
47500: LD_INT 1
47502: NEG
47503: PUSH
47504: EMPTY
47505: LIST
47506: LIST
47507: PUSH
47508: LD_INT 1
47510: NEG
47511: PUSH
47512: LD_INT 2
47514: NEG
47515: PUSH
47516: EMPTY
47517: LIST
47518: LIST
47519: PUSH
47520: LD_INT 0
47522: PUSH
47523: LD_INT 2
47525: NEG
47526: PUSH
47527: EMPTY
47528: LIST
47529: LIST
47530: PUSH
47531: LD_INT 1
47533: PUSH
47534: LD_INT 1
47536: NEG
47537: PUSH
47538: EMPTY
47539: LIST
47540: LIST
47541: PUSH
47542: LD_INT 2
47544: PUSH
47545: LD_INT 0
47547: PUSH
47548: EMPTY
47549: LIST
47550: LIST
47551: PUSH
47552: LD_INT 2
47554: PUSH
47555: LD_INT 1
47557: PUSH
47558: EMPTY
47559: LIST
47560: LIST
47561: PUSH
47562: LD_INT 2
47564: PUSH
47565: LD_INT 2
47567: PUSH
47568: EMPTY
47569: LIST
47570: LIST
47571: PUSH
47572: LD_INT 1
47574: PUSH
47575: LD_INT 2
47577: PUSH
47578: EMPTY
47579: LIST
47580: LIST
47581: PUSH
47582: LD_INT 0
47584: PUSH
47585: LD_INT 2
47587: PUSH
47588: EMPTY
47589: LIST
47590: LIST
47591: PUSH
47592: LD_INT 1
47594: NEG
47595: PUSH
47596: LD_INT 1
47598: PUSH
47599: EMPTY
47600: LIST
47601: LIST
47602: PUSH
47603: LD_INT 2
47605: NEG
47606: PUSH
47607: LD_INT 0
47609: PUSH
47610: EMPTY
47611: LIST
47612: LIST
47613: PUSH
47614: LD_INT 2
47616: NEG
47617: PUSH
47618: LD_INT 1
47620: NEG
47621: PUSH
47622: EMPTY
47623: LIST
47624: LIST
47625: PUSH
47626: LD_INT 2
47628: NEG
47629: PUSH
47630: LD_INT 2
47632: NEG
47633: PUSH
47634: EMPTY
47635: LIST
47636: LIST
47637: PUSH
47638: EMPTY
47639: LIST
47640: LIST
47641: LIST
47642: LIST
47643: LIST
47644: LIST
47645: LIST
47646: LIST
47647: LIST
47648: LIST
47649: LIST
47650: LIST
47651: LIST
47652: LIST
47653: LIST
47654: LIST
47655: LIST
47656: LIST
47657: LIST
47658: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47659: LD_ADDR_VAR 0 21
47663: PUSH
47664: LD_INT 0
47666: PUSH
47667: LD_INT 0
47669: PUSH
47670: EMPTY
47671: LIST
47672: LIST
47673: PUSH
47674: LD_INT 0
47676: PUSH
47677: LD_INT 1
47679: NEG
47680: PUSH
47681: EMPTY
47682: LIST
47683: LIST
47684: PUSH
47685: LD_INT 1
47687: PUSH
47688: LD_INT 0
47690: PUSH
47691: EMPTY
47692: LIST
47693: LIST
47694: PUSH
47695: LD_INT 1
47697: PUSH
47698: LD_INT 1
47700: PUSH
47701: EMPTY
47702: LIST
47703: LIST
47704: PUSH
47705: LD_INT 0
47707: PUSH
47708: LD_INT 1
47710: PUSH
47711: EMPTY
47712: LIST
47713: LIST
47714: PUSH
47715: LD_INT 1
47717: NEG
47718: PUSH
47719: LD_INT 0
47721: PUSH
47722: EMPTY
47723: LIST
47724: LIST
47725: PUSH
47726: LD_INT 1
47728: NEG
47729: PUSH
47730: LD_INT 1
47732: NEG
47733: PUSH
47734: EMPTY
47735: LIST
47736: LIST
47737: PUSH
47738: LD_INT 1
47740: NEG
47741: PUSH
47742: LD_INT 2
47744: NEG
47745: PUSH
47746: EMPTY
47747: LIST
47748: LIST
47749: PUSH
47750: LD_INT 0
47752: PUSH
47753: LD_INT 2
47755: NEG
47756: PUSH
47757: EMPTY
47758: LIST
47759: LIST
47760: PUSH
47761: LD_INT 1
47763: PUSH
47764: LD_INT 1
47766: NEG
47767: PUSH
47768: EMPTY
47769: LIST
47770: LIST
47771: PUSH
47772: LD_INT 2
47774: PUSH
47775: LD_INT 0
47777: PUSH
47778: EMPTY
47779: LIST
47780: LIST
47781: PUSH
47782: LD_INT 2
47784: PUSH
47785: LD_INT 1
47787: PUSH
47788: EMPTY
47789: LIST
47790: LIST
47791: PUSH
47792: LD_INT 2
47794: PUSH
47795: LD_INT 2
47797: PUSH
47798: EMPTY
47799: LIST
47800: LIST
47801: PUSH
47802: LD_INT 1
47804: PUSH
47805: LD_INT 2
47807: PUSH
47808: EMPTY
47809: LIST
47810: LIST
47811: PUSH
47812: LD_INT 0
47814: PUSH
47815: LD_INT 2
47817: PUSH
47818: EMPTY
47819: LIST
47820: LIST
47821: PUSH
47822: LD_INT 1
47824: NEG
47825: PUSH
47826: LD_INT 1
47828: PUSH
47829: EMPTY
47830: LIST
47831: LIST
47832: PUSH
47833: LD_INT 2
47835: NEG
47836: PUSH
47837: LD_INT 0
47839: PUSH
47840: EMPTY
47841: LIST
47842: LIST
47843: PUSH
47844: LD_INT 2
47846: NEG
47847: PUSH
47848: LD_INT 1
47850: NEG
47851: PUSH
47852: EMPTY
47853: LIST
47854: LIST
47855: PUSH
47856: LD_INT 2
47858: NEG
47859: PUSH
47860: LD_INT 2
47862: NEG
47863: PUSH
47864: EMPTY
47865: LIST
47866: LIST
47867: PUSH
47868: EMPTY
47869: LIST
47870: LIST
47871: LIST
47872: LIST
47873: LIST
47874: LIST
47875: LIST
47876: LIST
47877: LIST
47878: LIST
47879: LIST
47880: LIST
47881: LIST
47882: LIST
47883: LIST
47884: LIST
47885: LIST
47886: LIST
47887: LIST
47888: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47889: LD_ADDR_VAR 0 22
47893: PUSH
47894: LD_INT 0
47896: PUSH
47897: LD_INT 0
47899: PUSH
47900: EMPTY
47901: LIST
47902: LIST
47903: PUSH
47904: LD_INT 0
47906: PUSH
47907: LD_INT 1
47909: NEG
47910: PUSH
47911: EMPTY
47912: LIST
47913: LIST
47914: PUSH
47915: LD_INT 1
47917: PUSH
47918: LD_INT 0
47920: PUSH
47921: EMPTY
47922: LIST
47923: LIST
47924: PUSH
47925: LD_INT 1
47927: PUSH
47928: LD_INT 1
47930: PUSH
47931: EMPTY
47932: LIST
47933: LIST
47934: PUSH
47935: LD_INT 0
47937: PUSH
47938: LD_INT 1
47940: PUSH
47941: EMPTY
47942: LIST
47943: LIST
47944: PUSH
47945: LD_INT 1
47947: NEG
47948: PUSH
47949: LD_INT 0
47951: PUSH
47952: EMPTY
47953: LIST
47954: LIST
47955: PUSH
47956: LD_INT 1
47958: NEG
47959: PUSH
47960: LD_INT 1
47962: NEG
47963: PUSH
47964: EMPTY
47965: LIST
47966: LIST
47967: PUSH
47968: LD_INT 1
47970: NEG
47971: PUSH
47972: LD_INT 2
47974: NEG
47975: PUSH
47976: EMPTY
47977: LIST
47978: LIST
47979: PUSH
47980: LD_INT 0
47982: PUSH
47983: LD_INT 2
47985: NEG
47986: PUSH
47987: EMPTY
47988: LIST
47989: LIST
47990: PUSH
47991: LD_INT 1
47993: PUSH
47994: LD_INT 1
47996: NEG
47997: PUSH
47998: EMPTY
47999: LIST
48000: LIST
48001: PUSH
48002: LD_INT 2
48004: PUSH
48005: LD_INT 0
48007: PUSH
48008: EMPTY
48009: LIST
48010: LIST
48011: PUSH
48012: LD_INT 2
48014: PUSH
48015: LD_INT 1
48017: PUSH
48018: EMPTY
48019: LIST
48020: LIST
48021: PUSH
48022: LD_INT 2
48024: PUSH
48025: LD_INT 2
48027: PUSH
48028: EMPTY
48029: LIST
48030: LIST
48031: PUSH
48032: LD_INT 1
48034: PUSH
48035: LD_INT 2
48037: PUSH
48038: EMPTY
48039: LIST
48040: LIST
48041: PUSH
48042: LD_INT 0
48044: PUSH
48045: LD_INT 2
48047: PUSH
48048: EMPTY
48049: LIST
48050: LIST
48051: PUSH
48052: LD_INT 1
48054: NEG
48055: PUSH
48056: LD_INT 1
48058: PUSH
48059: EMPTY
48060: LIST
48061: LIST
48062: PUSH
48063: LD_INT 2
48065: NEG
48066: PUSH
48067: LD_INT 0
48069: PUSH
48070: EMPTY
48071: LIST
48072: LIST
48073: PUSH
48074: LD_INT 2
48076: NEG
48077: PUSH
48078: LD_INT 1
48080: NEG
48081: PUSH
48082: EMPTY
48083: LIST
48084: LIST
48085: PUSH
48086: LD_INT 2
48088: NEG
48089: PUSH
48090: LD_INT 2
48092: NEG
48093: PUSH
48094: EMPTY
48095: LIST
48096: LIST
48097: PUSH
48098: EMPTY
48099: LIST
48100: LIST
48101: LIST
48102: LIST
48103: LIST
48104: LIST
48105: LIST
48106: LIST
48107: LIST
48108: LIST
48109: LIST
48110: LIST
48111: LIST
48112: LIST
48113: LIST
48114: LIST
48115: LIST
48116: LIST
48117: LIST
48118: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
48119: LD_ADDR_VAR 0 23
48123: PUSH
48124: LD_INT 0
48126: PUSH
48127: LD_INT 0
48129: PUSH
48130: EMPTY
48131: LIST
48132: LIST
48133: PUSH
48134: LD_INT 0
48136: PUSH
48137: LD_INT 1
48139: NEG
48140: PUSH
48141: EMPTY
48142: LIST
48143: LIST
48144: PUSH
48145: LD_INT 1
48147: PUSH
48148: LD_INT 0
48150: PUSH
48151: EMPTY
48152: LIST
48153: LIST
48154: PUSH
48155: LD_INT 1
48157: PUSH
48158: LD_INT 1
48160: PUSH
48161: EMPTY
48162: LIST
48163: LIST
48164: PUSH
48165: LD_INT 0
48167: PUSH
48168: LD_INT 1
48170: PUSH
48171: EMPTY
48172: LIST
48173: LIST
48174: PUSH
48175: LD_INT 1
48177: NEG
48178: PUSH
48179: LD_INT 0
48181: PUSH
48182: EMPTY
48183: LIST
48184: LIST
48185: PUSH
48186: LD_INT 1
48188: NEG
48189: PUSH
48190: LD_INT 1
48192: NEG
48193: PUSH
48194: EMPTY
48195: LIST
48196: LIST
48197: PUSH
48198: LD_INT 1
48200: NEG
48201: PUSH
48202: LD_INT 2
48204: NEG
48205: PUSH
48206: EMPTY
48207: LIST
48208: LIST
48209: PUSH
48210: LD_INT 0
48212: PUSH
48213: LD_INT 2
48215: NEG
48216: PUSH
48217: EMPTY
48218: LIST
48219: LIST
48220: PUSH
48221: LD_INT 1
48223: PUSH
48224: LD_INT 1
48226: NEG
48227: PUSH
48228: EMPTY
48229: LIST
48230: LIST
48231: PUSH
48232: LD_INT 2
48234: PUSH
48235: LD_INT 0
48237: PUSH
48238: EMPTY
48239: LIST
48240: LIST
48241: PUSH
48242: LD_INT 2
48244: PUSH
48245: LD_INT 1
48247: PUSH
48248: EMPTY
48249: LIST
48250: LIST
48251: PUSH
48252: LD_INT 2
48254: PUSH
48255: LD_INT 2
48257: PUSH
48258: EMPTY
48259: LIST
48260: LIST
48261: PUSH
48262: LD_INT 1
48264: PUSH
48265: LD_INT 2
48267: PUSH
48268: EMPTY
48269: LIST
48270: LIST
48271: PUSH
48272: LD_INT 0
48274: PUSH
48275: LD_INT 2
48277: PUSH
48278: EMPTY
48279: LIST
48280: LIST
48281: PUSH
48282: LD_INT 1
48284: NEG
48285: PUSH
48286: LD_INT 1
48288: PUSH
48289: EMPTY
48290: LIST
48291: LIST
48292: PUSH
48293: LD_INT 2
48295: NEG
48296: PUSH
48297: LD_INT 0
48299: PUSH
48300: EMPTY
48301: LIST
48302: LIST
48303: PUSH
48304: LD_INT 2
48306: NEG
48307: PUSH
48308: LD_INT 1
48310: NEG
48311: PUSH
48312: EMPTY
48313: LIST
48314: LIST
48315: PUSH
48316: LD_INT 2
48318: NEG
48319: PUSH
48320: LD_INT 2
48322: NEG
48323: PUSH
48324: EMPTY
48325: LIST
48326: LIST
48327: PUSH
48328: LD_INT 2
48330: NEG
48331: PUSH
48332: LD_INT 3
48334: NEG
48335: PUSH
48336: EMPTY
48337: LIST
48338: LIST
48339: PUSH
48340: LD_INT 1
48342: NEG
48343: PUSH
48344: LD_INT 3
48346: NEG
48347: PUSH
48348: EMPTY
48349: LIST
48350: LIST
48351: PUSH
48352: LD_INT 1
48354: PUSH
48355: LD_INT 2
48357: NEG
48358: PUSH
48359: EMPTY
48360: LIST
48361: LIST
48362: PUSH
48363: LD_INT 2
48365: PUSH
48366: LD_INT 1
48368: NEG
48369: PUSH
48370: EMPTY
48371: LIST
48372: LIST
48373: PUSH
48374: EMPTY
48375: LIST
48376: LIST
48377: LIST
48378: LIST
48379: LIST
48380: LIST
48381: LIST
48382: LIST
48383: LIST
48384: LIST
48385: LIST
48386: LIST
48387: LIST
48388: LIST
48389: LIST
48390: LIST
48391: LIST
48392: LIST
48393: LIST
48394: LIST
48395: LIST
48396: LIST
48397: LIST
48398: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
48399: LD_ADDR_VAR 0 24
48403: PUSH
48404: LD_INT 0
48406: PUSH
48407: LD_INT 0
48409: PUSH
48410: EMPTY
48411: LIST
48412: LIST
48413: PUSH
48414: LD_INT 0
48416: PUSH
48417: LD_INT 1
48419: NEG
48420: PUSH
48421: EMPTY
48422: LIST
48423: LIST
48424: PUSH
48425: LD_INT 1
48427: PUSH
48428: LD_INT 0
48430: PUSH
48431: EMPTY
48432: LIST
48433: LIST
48434: PUSH
48435: LD_INT 1
48437: PUSH
48438: LD_INT 1
48440: PUSH
48441: EMPTY
48442: LIST
48443: LIST
48444: PUSH
48445: LD_INT 0
48447: PUSH
48448: LD_INT 1
48450: PUSH
48451: EMPTY
48452: LIST
48453: LIST
48454: PUSH
48455: LD_INT 1
48457: NEG
48458: PUSH
48459: LD_INT 0
48461: PUSH
48462: EMPTY
48463: LIST
48464: LIST
48465: PUSH
48466: LD_INT 1
48468: NEG
48469: PUSH
48470: LD_INT 1
48472: NEG
48473: PUSH
48474: EMPTY
48475: LIST
48476: LIST
48477: PUSH
48478: LD_INT 1
48480: NEG
48481: PUSH
48482: LD_INT 2
48484: NEG
48485: PUSH
48486: EMPTY
48487: LIST
48488: LIST
48489: PUSH
48490: LD_INT 0
48492: PUSH
48493: LD_INT 2
48495: NEG
48496: PUSH
48497: EMPTY
48498: LIST
48499: LIST
48500: PUSH
48501: LD_INT 1
48503: PUSH
48504: LD_INT 1
48506: NEG
48507: PUSH
48508: EMPTY
48509: LIST
48510: LIST
48511: PUSH
48512: LD_INT 2
48514: PUSH
48515: LD_INT 0
48517: PUSH
48518: EMPTY
48519: LIST
48520: LIST
48521: PUSH
48522: LD_INT 2
48524: PUSH
48525: LD_INT 1
48527: PUSH
48528: EMPTY
48529: LIST
48530: LIST
48531: PUSH
48532: LD_INT 2
48534: PUSH
48535: LD_INT 2
48537: PUSH
48538: EMPTY
48539: LIST
48540: LIST
48541: PUSH
48542: LD_INT 1
48544: PUSH
48545: LD_INT 2
48547: PUSH
48548: EMPTY
48549: LIST
48550: LIST
48551: PUSH
48552: LD_INT 0
48554: PUSH
48555: LD_INT 2
48557: PUSH
48558: EMPTY
48559: LIST
48560: LIST
48561: PUSH
48562: LD_INT 1
48564: NEG
48565: PUSH
48566: LD_INT 1
48568: PUSH
48569: EMPTY
48570: LIST
48571: LIST
48572: PUSH
48573: LD_INT 2
48575: NEG
48576: PUSH
48577: LD_INT 0
48579: PUSH
48580: EMPTY
48581: LIST
48582: LIST
48583: PUSH
48584: LD_INT 2
48586: NEG
48587: PUSH
48588: LD_INT 1
48590: NEG
48591: PUSH
48592: EMPTY
48593: LIST
48594: LIST
48595: PUSH
48596: LD_INT 2
48598: NEG
48599: PUSH
48600: LD_INT 2
48602: NEG
48603: PUSH
48604: EMPTY
48605: LIST
48606: LIST
48607: PUSH
48608: LD_INT 1
48610: PUSH
48611: LD_INT 2
48613: NEG
48614: PUSH
48615: EMPTY
48616: LIST
48617: LIST
48618: PUSH
48619: LD_INT 2
48621: PUSH
48622: LD_INT 1
48624: NEG
48625: PUSH
48626: EMPTY
48627: LIST
48628: LIST
48629: PUSH
48630: LD_INT 3
48632: PUSH
48633: LD_INT 1
48635: PUSH
48636: EMPTY
48637: LIST
48638: LIST
48639: PUSH
48640: LD_INT 3
48642: PUSH
48643: LD_INT 2
48645: PUSH
48646: EMPTY
48647: LIST
48648: LIST
48649: PUSH
48650: EMPTY
48651: LIST
48652: LIST
48653: LIST
48654: LIST
48655: LIST
48656: LIST
48657: LIST
48658: LIST
48659: LIST
48660: LIST
48661: LIST
48662: LIST
48663: LIST
48664: LIST
48665: LIST
48666: LIST
48667: LIST
48668: LIST
48669: LIST
48670: LIST
48671: LIST
48672: LIST
48673: LIST
48674: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
48675: LD_ADDR_VAR 0 25
48679: PUSH
48680: LD_INT 0
48682: PUSH
48683: LD_INT 0
48685: PUSH
48686: EMPTY
48687: LIST
48688: LIST
48689: PUSH
48690: LD_INT 0
48692: PUSH
48693: LD_INT 1
48695: NEG
48696: PUSH
48697: EMPTY
48698: LIST
48699: LIST
48700: PUSH
48701: LD_INT 1
48703: PUSH
48704: LD_INT 0
48706: PUSH
48707: EMPTY
48708: LIST
48709: LIST
48710: PUSH
48711: LD_INT 1
48713: PUSH
48714: LD_INT 1
48716: PUSH
48717: EMPTY
48718: LIST
48719: LIST
48720: PUSH
48721: LD_INT 0
48723: PUSH
48724: LD_INT 1
48726: PUSH
48727: EMPTY
48728: LIST
48729: LIST
48730: PUSH
48731: LD_INT 1
48733: NEG
48734: PUSH
48735: LD_INT 0
48737: PUSH
48738: EMPTY
48739: LIST
48740: LIST
48741: PUSH
48742: LD_INT 1
48744: NEG
48745: PUSH
48746: LD_INT 1
48748: NEG
48749: PUSH
48750: EMPTY
48751: LIST
48752: LIST
48753: PUSH
48754: LD_INT 1
48756: NEG
48757: PUSH
48758: LD_INT 2
48760: NEG
48761: PUSH
48762: EMPTY
48763: LIST
48764: LIST
48765: PUSH
48766: LD_INT 0
48768: PUSH
48769: LD_INT 2
48771: NEG
48772: PUSH
48773: EMPTY
48774: LIST
48775: LIST
48776: PUSH
48777: LD_INT 1
48779: PUSH
48780: LD_INT 1
48782: NEG
48783: PUSH
48784: EMPTY
48785: LIST
48786: LIST
48787: PUSH
48788: LD_INT 2
48790: PUSH
48791: LD_INT 0
48793: PUSH
48794: EMPTY
48795: LIST
48796: LIST
48797: PUSH
48798: LD_INT 2
48800: PUSH
48801: LD_INT 1
48803: PUSH
48804: EMPTY
48805: LIST
48806: LIST
48807: PUSH
48808: LD_INT 2
48810: PUSH
48811: LD_INT 2
48813: PUSH
48814: EMPTY
48815: LIST
48816: LIST
48817: PUSH
48818: LD_INT 1
48820: PUSH
48821: LD_INT 2
48823: PUSH
48824: EMPTY
48825: LIST
48826: LIST
48827: PUSH
48828: LD_INT 0
48830: PUSH
48831: LD_INT 2
48833: PUSH
48834: EMPTY
48835: LIST
48836: LIST
48837: PUSH
48838: LD_INT 1
48840: NEG
48841: PUSH
48842: LD_INT 1
48844: PUSH
48845: EMPTY
48846: LIST
48847: LIST
48848: PUSH
48849: LD_INT 2
48851: NEG
48852: PUSH
48853: LD_INT 0
48855: PUSH
48856: EMPTY
48857: LIST
48858: LIST
48859: PUSH
48860: LD_INT 2
48862: NEG
48863: PUSH
48864: LD_INT 1
48866: NEG
48867: PUSH
48868: EMPTY
48869: LIST
48870: LIST
48871: PUSH
48872: LD_INT 2
48874: NEG
48875: PUSH
48876: LD_INT 2
48878: NEG
48879: PUSH
48880: EMPTY
48881: LIST
48882: LIST
48883: PUSH
48884: LD_INT 3
48886: PUSH
48887: LD_INT 1
48889: PUSH
48890: EMPTY
48891: LIST
48892: LIST
48893: PUSH
48894: LD_INT 3
48896: PUSH
48897: LD_INT 2
48899: PUSH
48900: EMPTY
48901: LIST
48902: LIST
48903: PUSH
48904: LD_INT 2
48906: PUSH
48907: LD_INT 3
48909: PUSH
48910: EMPTY
48911: LIST
48912: LIST
48913: PUSH
48914: LD_INT 1
48916: PUSH
48917: LD_INT 3
48919: PUSH
48920: EMPTY
48921: LIST
48922: LIST
48923: PUSH
48924: EMPTY
48925: LIST
48926: LIST
48927: LIST
48928: LIST
48929: LIST
48930: LIST
48931: LIST
48932: LIST
48933: LIST
48934: LIST
48935: LIST
48936: LIST
48937: LIST
48938: LIST
48939: LIST
48940: LIST
48941: LIST
48942: LIST
48943: LIST
48944: LIST
48945: LIST
48946: LIST
48947: LIST
48948: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
48949: LD_ADDR_VAR 0 26
48953: PUSH
48954: LD_INT 0
48956: PUSH
48957: LD_INT 0
48959: PUSH
48960: EMPTY
48961: LIST
48962: LIST
48963: PUSH
48964: LD_INT 0
48966: PUSH
48967: LD_INT 1
48969: NEG
48970: PUSH
48971: EMPTY
48972: LIST
48973: LIST
48974: PUSH
48975: LD_INT 1
48977: PUSH
48978: LD_INT 0
48980: PUSH
48981: EMPTY
48982: LIST
48983: LIST
48984: PUSH
48985: LD_INT 1
48987: PUSH
48988: LD_INT 1
48990: PUSH
48991: EMPTY
48992: LIST
48993: LIST
48994: PUSH
48995: LD_INT 0
48997: PUSH
48998: LD_INT 1
49000: PUSH
49001: EMPTY
49002: LIST
49003: LIST
49004: PUSH
49005: LD_INT 1
49007: NEG
49008: PUSH
49009: LD_INT 0
49011: PUSH
49012: EMPTY
49013: LIST
49014: LIST
49015: PUSH
49016: LD_INT 1
49018: NEG
49019: PUSH
49020: LD_INT 1
49022: NEG
49023: PUSH
49024: EMPTY
49025: LIST
49026: LIST
49027: PUSH
49028: LD_INT 1
49030: NEG
49031: PUSH
49032: LD_INT 2
49034: NEG
49035: PUSH
49036: EMPTY
49037: LIST
49038: LIST
49039: PUSH
49040: LD_INT 0
49042: PUSH
49043: LD_INT 2
49045: NEG
49046: PUSH
49047: EMPTY
49048: LIST
49049: LIST
49050: PUSH
49051: LD_INT 1
49053: PUSH
49054: LD_INT 1
49056: NEG
49057: PUSH
49058: EMPTY
49059: LIST
49060: LIST
49061: PUSH
49062: LD_INT 2
49064: PUSH
49065: LD_INT 0
49067: PUSH
49068: EMPTY
49069: LIST
49070: LIST
49071: PUSH
49072: LD_INT 2
49074: PUSH
49075: LD_INT 1
49077: PUSH
49078: EMPTY
49079: LIST
49080: LIST
49081: PUSH
49082: LD_INT 2
49084: PUSH
49085: LD_INT 2
49087: PUSH
49088: EMPTY
49089: LIST
49090: LIST
49091: PUSH
49092: LD_INT 1
49094: PUSH
49095: LD_INT 2
49097: PUSH
49098: EMPTY
49099: LIST
49100: LIST
49101: PUSH
49102: LD_INT 0
49104: PUSH
49105: LD_INT 2
49107: PUSH
49108: EMPTY
49109: LIST
49110: LIST
49111: PUSH
49112: LD_INT 1
49114: NEG
49115: PUSH
49116: LD_INT 1
49118: PUSH
49119: EMPTY
49120: LIST
49121: LIST
49122: PUSH
49123: LD_INT 2
49125: NEG
49126: PUSH
49127: LD_INT 0
49129: PUSH
49130: EMPTY
49131: LIST
49132: LIST
49133: PUSH
49134: LD_INT 2
49136: NEG
49137: PUSH
49138: LD_INT 1
49140: NEG
49141: PUSH
49142: EMPTY
49143: LIST
49144: LIST
49145: PUSH
49146: LD_INT 2
49148: NEG
49149: PUSH
49150: LD_INT 2
49152: NEG
49153: PUSH
49154: EMPTY
49155: LIST
49156: LIST
49157: PUSH
49158: LD_INT 2
49160: PUSH
49161: LD_INT 3
49163: PUSH
49164: EMPTY
49165: LIST
49166: LIST
49167: PUSH
49168: LD_INT 1
49170: PUSH
49171: LD_INT 3
49173: PUSH
49174: EMPTY
49175: LIST
49176: LIST
49177: PUSH
49178: LD_INT 1
49180: NEG
49181: PUSH
49182: LD_INT 2
49184: PUSH
49185: EMPTY
49186: LIST
49187: LIST
49188: PUSH
49189: LD_INT 2
49191: NEG
49192: PUSH
49193: LD_INT 1
49195: PUSH
49196: EMPTY
49197: LIST
49198: LIST
49199: PUSH
49200: EMPTY
49201: LIST
49202: LIST
49203: LIST
49204: LIST
49205: LIST
49206: LIST
49207: LIST
49208: LIST
49209: LIST
49210: LIST
49211: LIST
49212: LIST
49213: LIST
49214: LIST
49215: LIST
49216: LIST
49217: LIST
49218: LIST
49219: LIST
49220: LIST
49221: LIST
49222: LIST
49223: LIST
49224: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49225: LD_ADDR_VAR 0 27
49229: PUSH
49230: LD_INT 0
49232: PUSH
49233: LD_INT 0
49235: PUSH
49236: EMPTY
49237: LIST
49238: LIST
49239: PUSH
49240: LD_INT 0
49242: PUSH
49243: LD_INT 1
49245: NEG
49246: PUSH
49247: EMPTY
49248: LIST
49249: LIST
49250: PUSH
49251: LD_INT 1
49253: PUSH
49254: LD_INT 0
49256: PUSH
49257: EMPTY
49258: LIST
49259: LIST
49260: PUSH
49261: LD_INT 1
49263: PUSH
49264: LD_INT 1
49266: PUSH
49267: EMPTY
49268: LIST
49269: LIST
49270: PUSH
49271: LD_INT 0
49273: PUSH
49274: LD_INT 1
49276: PUSH
49277: EMPTY
49278: LIST
49279: LIST
49280: PUSH
49281: LD_INT 1
49283: NEG
49284: PUSH
49285: LD_INT 0
49287: PUSH
49288: EMPTY
49289: LIST
49290: LIST
49291: PUSH
49292: LD_INT 1
49294: NEG
49295: PUSH
49296: LD_INT 1
49298: NEG
49299: PUSH
49300: EMPTY
49301: LIST
49302: LIST
49303: PUSH
49304: LD_INT 1
49306: NEG
49307: PUSH
49308: LD_INT 2
49310: NEG
49311: PUSH
49312: EMPTY
49313: LIST
49314: LIST
49315: PUSH
49316: LD_INT 0
49318: PUSH
49319: LD_INT 2
49321: NEG
49322: PUSH
49323: EMPTY
49324: LIST
49325: LIST
49326: PUSH
49327: LD_INT 1
49329: PUSH
49330: LD_INT 1
49332: NEG
49333: PUSH
49334: EMPTY
49335: LIST
49336: LIST
49337: PUSH
49338: LD_INT 2
49340: PUSH
49341: LD_INT 0
49343: PUSH
49344: EMPTY
49345: LIST
49346: LIST
49347: PUSH
49348: LD_INT 2
49350: PUSH
49351: LD_INT 1
49353: PUSH
49354: EMPTY
49355: LIST
49356: LIST
49357: PUSH
49358: LD_INT 2
49360: PUSH
49361: LD_INT 2
49363: PUSH
49364: EMPTY
49365: LIST
49366: LIST
49367: PUSH
49368: LD_INT 1
49370: PUSH
49371: LD_INT 2
49373: PUSH
49374: EMPTY
49375: LIST
49376: LIST
49377: PUSH
49378: LD_INT 0
49380: PUSH
49381: LD_INT 2
49383: PUSH
49384: EMPTY
49385: LIST
49386: LIST
49387: PUSH
49388: LD_INT 1
49390: NEG
49391: PUSH
49392: LD_INT 1
49394: PUSH
49395: EMPTY
49396: LIST
49397: LIST
49398: PUSH
49399: LD_INT 2
49401: NEG
49402: PUSH
49403: LD_INT 0
49405: PUSH
49406: EMPTY
49407: LIST
49408: LIST
49409: PUSH
49410: LD_INT 2
49412: NEG
49413: PUSH
49414: LD_INT 1
49416: NEG
49417: PUSH
49418: EMPTY
49419: LIST
49420: LIST
49421: PUSH
49422: LD_INT 2
49424: NEG
49425: PUSH
49426: LD_INT 2
49428: NEG
49429: PUSH
49430: EMPTY
49431: LIST
49432: LIST
49433: PUSH
49434: LD_INT 1
49436: NEG
49437: PUSH
49438: LD_INT 2
49440: PUSH
49441: EMPTY
49442: LIST
49443: LIST
49444: PUSH
49445: LD_INT 2
49447: NEG
49448: PUSH
49449: LD_INT 1
49451: PUSH
49452: EMPTY
49453: LIST
49454: LIST
49455: PUSH
49456: LD_INT 3
49458: NEG
49459: PUSH
49460: LD_INT 1
49462: NEG
49463: PUSH
49464: EMPTY
49465: LIST
49466: LIST
49467: PUSH
49468: LD_INT 3
49470: NEG
49471: PUSH
49472: LD_INT 2
49474: NEG
49475: PUSH
49476: EMPTY
49477: LIST
49478: LIST
49479: PUSH
49480: EMPTY
49481: LIST
49482: LIST
49483: LIST
49484: LIST
49485: LIST
49486: LIST
49487: LIST
49488: LIST
49489: LIST
49490: LIST
49491: LIST
49492: LIST
49493: LIST
49494: LIST
49495: LIST
49496: LIST
49497: LIST
49498: LIST
49499: LIST
49500: LIST
49501: LIST
49502: LIST
49503: LIST
49504: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49505: LD_ADDR_VAR 0 28
49509: PUSH
49510: LD_INT 0
49512: PUSH
49513: LD_INT 0
49515: PUSH
49516: EMPTY
49517: LIST
49518: LIST
49519: PUSH
49520: LD_INT 0
49522: PUSH
49523: LD_INT 1
49525: NEG
49526: PUSH
49527: EMPTY
49528: LIST
49529: LIST
49530: PUSH
49531: LD_INT 1
49533: PUSH
49534: LD_INT 0
49536: PUSH
49537: EMPTY
49538: LIST
49539: LIST
49540: PUSH
49541: LD_INT 1
49543: PUSH
49544: LD_INT 1
49546: PUSH
49547: EMPTY
49548: LIST
49549: LIST
49550: PUSH
49551: LD_INT 0
49553: PUSH
49554: LD_INT 1
49556: PUSH
49557: EMPTY
49558: LIST
49559: LIST
49560: PUSH
49561: LD_INT 1
49563: NEG
49564: PUSH
49565: LD_INT 0
49567: PUSH
49568: EMPTY
49569: LIST
49570: LIST
49571: PUSH
49572: LD_INT 1
49574: NEG
49575: PUSH
49576: LD_INT 1
49578: NEG
49579: PUSH
49580: EMPTY
49581: LIST
49582: LIST
49583: PUSH
49584: LD_INT 1
49586: NEG
49587: PUSH
49588: LD_INT 2
49590: NEG
49591: PUSH
49592: EMPTY
49593: LIST
49594: LIST
49595: PUSH
49596: LD_INT 0
49598: PUSH
49599: LD_INT 2
49601: NEG
49602: PUSH
49603: EMPTY
49604: LIST
49605: LIST
49606: PUSH
49607: LD_INT 1
49609: PUSH
49610: LD_INT 1
49612: NEG
49613: PUSH
49614: EMPTY
49615: LIST
49616: LIST
49617: PUSH
49618: LD_INT 2
49620: PUSH
49621: LD_INT 0
49623: PUSH
49624: EMPTY
49625: LIST
49626: LIST
49627: PUSH
49628: LD_INT 2
49630: PUSH
49631: LD_INT 1
49633: PUSH
49634: EMPTY
49635: LIST
49636: LIST
49637: PUSH
49638: LD_INT 2
49640: PUSH
49641: LD_INT 2
49643: PUSH
49644: EMPTY
49645: LIST
49646: LIST
49647: PUSH
49648: LD_INT 1
49650: PUSH
49651: LD_INT 2
49653: PUSH
49654: EMPTY
49655: LIST
49656: LIST
49657: PUSH
49658: LD_INT 0
49660: PUSH
49661: LD_INT 2
49663: PUSH
49664: EMPTY
49665: LIST
49666: LIST
49667: PUSH
49668: LD_INT 1
49670: NEG
49671: PUSH
49672: LD_INT 1
49674: PUSH
49675: EMPTY
49676: LIST
49677: LIST
49678: PUSH
49679: LD_INT 2
49681: NEG
49682: PUSH
49683: LD_INT 0
49685: PUSH
49686: EMPTY
49687: LIST
49688: LIST
49689: PUSH
49690: LD_INT 2
49692: NEG
49693: PUSH
49694: LD_INT 1
49696: NEG
49697: PUSH
49698: EMPTY
49699: LIST
49700: LIST
49701: PUSH
49702: LD_INT 2
49704: NEG
49705: PUSH
49706: LD_INT 2
49708: NEG
49709: PUSH
49710: EMPTY
49711: LIST
49712: LIST
49713: PUSH
49714: LD_INT 2
49716: NEG
49717: PUSH
49718: LD_INT 3
49720: NEG
49721: PUSH
49722: EMPTY
49723: LIST
49724: LIST
49725: PUSH
49726: LD_INT 1
49728: NEG
49729: PUSH
49730: LD_INT 3
49732: NEG
49733: PUSH
49734: EMPTY
49735: LIST
49736: LIST
49737: PUSH
49738: LD_INT 3
49740: NEG
49741: PUSH
49742: LD_INT 1
49744: NEG
49745: PUSH
49746: EMPTY
49747: LIST
49748: LIST
49749: PUSH
49750: LD_INT 3
49752: NEG
49753: PUSH
49754: LD_INT 2
49756: NEG
49757: PUSH
49758: EMPTY
49759: LIST
49760: LIST
49761: PUSH
49762: EMPTY
49763: LIST
49764: LIST
49765: LIST
49766: LIST
49767: LIST
49768: LIST
49769: LIST
49770: LIST
49771: LIST
49772: LIST
49773: LIST
49774: LIST
49775: LIST
49776: LIST
49777: LIST
49778: LIST
49779: LIST
49780: LIST
49781: LIST
49782: LIST
49783: LIST
49784: LIST
49785: LIST
49786: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49787: LD_ADDR_VAR 0 29
49791: PUSH
49792: LD_INT 0
49794: PUSH
49795: LD_INT 0
49797: PUSH
49798: EMPTY
49799: LIST
49800: LIST
49801: PUSH
49802: LD_INT 0
49804: PUSH
49805: LD_INT 1
49807: NEG
49808: PUSH
49809: EMPTY
49810: LIST
49811: LIST
49812: PUSH
49813: LD_INT 1
49815: PUSH
49816: LD_INT 0
49818: PUSH
49819: EMPTY
49820: LIST
49821: LIST
49822: PUSH
49823: LD_INT 1
49825: PUSH
49826: LD_INT 1
49828: PUSH
49829: EMPTY
49830: LIST
49831: LIST
49832: PUSH
49833: LD_INT 0
49835: PUSH
49836: LD_INT 1
49838: PUSH
49839: EMPTY
49840: LIST
49841: LIST
49842: PUSH
49843: LD_INT 1
49845: NEG
49846: PUSH
49847: LD_INT 0
49849: PUSH
49850: EMPTY
49851: LIST
49852: LIST
49853: PUSH
49854: LD_INT 1
49856: NEG
49857: PUSH
49858: LD_INT 1
49860: NEG
49861: PUSH
49862: EMPTY
49863: LIST
49864: LIST
49865: PUSH
49866: LD_INT 1
49868: NEG
49869: PUSH
49870: LD_INT 2
49872: NEG
49873: PUSH
49874: EMPTY
49875: LIST
49876: LIST
49877: PUSH
49878: LD_INT 0
49880: PUSH
49881: LD_INT 2
49883: NEG
49884: PUSH
49885: EMPTY
49886: LIST
49887: LIST
49888: PUSH
49889: LD_INT 1
49891: PUSH
49892: LD_INT 1
49894: NEG
49895: PUSH
49896: EMPTY
49897: LIST
49898: LIST
49899: PUSH
49900: LD_INT 2
49902: PUSH
49903: LD_INT 0
49905: PUSH
49906: EMPTY
49907: LIST
49908: LIST
49909: PUSH
49910: LD_INT 2
49912: PUSH
49913: LD_INT 1
49915: PUSH
49916: EMPTY
49917: LIST
49918: LIST
49919: PUSH
49920: LD_INT 1
49922: PUSH
49923: LD_INT 2
49925: PUSH
49926: EMPTY
49927: LIST
49928: LIST
49929: PUSH
49930: LD_INT 0
49932: PUSH
49933: LD_INT 2
49935: PUSH
49936: EMPTY
49937: LIST
49938: LIST
49939: PUSH
49940: LD_INT 1
49942: NEG
49943: PUSH
49944: LD_INT 1
49946: PUSH
49947: EMPTY
49948: LIST
49949: LIST
49950: PUSH
49951: LD_INT 2
49953: NEG
49954: PUSH
49955: LD_INT 1
49957: NEG
49958: PUSH
49959: EMPTY
49960: LIST
49961: LIST
49962: PUSH
49963: LD_INT 2
49965: NEG
49966: PUSH
49967: LD_INT 2
49969: NEG
49970: PUSH
49971: EMPTY
49972: LIST
49973: LIST
49974: PUSH
49975: LD_INT 2
49977: NEG
49978: PUSH
49979: LD_INT 3
49981: NEG
49982: PUSH
49983: EMPTY
49984: LIST
49985: LIST
49986: PUSH
49987: LD_INT 2
49989: PUSH
49990: LD_INT 1
49992: NEG
49993: PUSH
49994: EMPTY
49995: LIST
49996: LIST
49997: PUSH
49998: LD_INT 3
50000: PUSH
50001: LD_INT 1
50003: PUSH
50004: EMPTY
50005: LIST
50006: LIST
50007: PUSH
50008: LD_INT 1
50010: PUSH
50011: LD_INT 3
50013: PUSH
50014: EMPTY
50015: LIST
50016: LIST
50017: PUSH
50018: LD_INT 1
50020: NEG
50021: PUSH
50022: LD_INT 2
50024: PUSH
50025: EMPTY
50026: LIST
50027: LIST
50028: PUSH
50029: LD_INT 3
50031: NEG
50032: PUSH
50033: LD_INT 2
50035: NEG
50036: PUSH
50037: EMPTY
50038: LIST
50039: LIST
50040: PUSH
50041: EMPTY
50042: LIST
50043: LIST
50044: LIST
50045: LIST
50046: LIST
50047: LIST
50048: LIST
50049: LIST
50050: LIST
50051: LIST
50052: LIST
50053: LIST
50054: LIST
50055: LIST
50056: LIST
50057: LIST
50058: LIST
50059: LIST
50060: LIST
50061: LIST
50062: LIST
50063: LIST
50064: LIST
50065: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50066: LD_ADDR_VAR 0 30
50070: PUSH
50071: LD_INT 0
50073: PUSH
50074: LD_INT 0
50076: PUSH
50077: EMPTY
50078: LIST
50079: LIST
50080: PUSH
50081: LD_INT 0
50083: PUSH
50084: LD_INT 1
50086: NEG
50087: PUSH
50088: EMPTY
50089: LIST
50090: LIST
50091: PUSH
50092: LD_INT 1
50094: PUSH
50095: LD_INT 0
50097: PUSH
50098: EMPTY
50099: LIST
50100: LIST
50101: PUSH
50102: LD_INT 1
50104: PUSH
50105: LD_INT 1
50107: PUSH
50108: EMPTY
50109: LIST
50110: LIST
50111: PUSH
50112: LD_INT 0
50114: PUSH
50115: LD_INT 1
50117: PUSH
50118: EMPTY
50119: LIST
50120: LIST
50121: PUSH
50122: LD_INT 1
50124: NEG
50125: PUSH
50126: LD_INT 0
50128: PUSH
50129: EMPTY
50130: LIST
50131: LIST
50132: PUSH
50133: LD_INT 1
50135: NEG
50136: PUSH
50137: LD_INT 1
50139: NEG
50140: PUSH
50141: EMPTY
50142: LIST
50143: LIST
50144: PUSH
50145: LD_INT 1
50147: NEG
50148: PUSH
50149: LD_INT 2
50151: NEG
50152: PUSH
50153: EMPTY
50154: LIST
50155: LIST
50156: PUSH
50157: LD_INT 0
50159: PUSH
50160: LD_INT 2
50162: NEG
50163: PUSH
50164: EMPTY
50165: LIST
50166: LIST
50167: PUSH
50168: LD_INT 1
50170: PUSH
50171: LD_INT 1
50173: NEG
50174: PUSH
50175: EMPTY
50176: LIST
50177: LIST
50178: PUSH
50179: LD_INT 2
50181: PUSH
50182: LD_INT 0
50184: PUSH
50185: EMPTY
50186: LIST
50187: LIST
50188: PUSH
50189: LD_INT 2
50191: PUSH
50192: LD_INT 1
50194: PUSH
50195: EMPTY
50196: LIST
50197: LIST
50198: PUSH
50199: LD_INT 2
50201: PUSH
50202: LD_INT 2
50204: PUSH
50205: EMPTY
50206: LIST
50207: LIST
50208: PUSH
50209: LD_INT 1
50211: PUSH
50212: LD_INT 2
50214: PUSH
50215: EMPTY
50216: LIST
50217: LIST
50218: PUSH
50219: LD_INT 1
50221: NEG
50222: PUSH
50223: LD_INT 1
50225: PUSH
50226: EMPTY
50227: LIST
50228: LIST
50229: PUSH
50230: LD_INT 2
50232: NEG
50233: PUSH
50234: LD_INT 0
50236: PUSH
50237: EMPTY
50238: LIST
50239: LIST
50240: PUSH
50241: LD_INT 2
50243: NEG
50244: PUSH
50245: LD_INT 1
50247: NEG
50248: PUSH
50249: EMPTY
50250: LIST
50251: LIST
50252: PUSH
50253: LD_INT 1
50255: NEG
50256: PUSH
50257: LD_INT 3
50259: NEG
50260: PUSH
50261: EMPTY
50262: LIST
50263: LIST
50264: PUSH
50265: LD_INT 1
50267: PUSH
50268: LD_INT 2
50270: NEG
50271: PUSH
50272: EMPTY
50273: LIST
50274: LIST
50275: PUSH
50276: LD_INT 3
50278: PUSH
50279: LD_INT 2
50281: PUSH
50282: EMPTY
50283: LIST
50284: LIST
50285: PUSH
50286: LD_INT 2
50288: PUSH
50289: LD_INT 3
50291: PUSH
50292: EMPTY
50293: LIST
50294: LIST
50295: PUSH
50296: LD_INT 2
50298: NEG
50299: PUSH
50300: LD_INT 1
50302: PUSH
50303: EMPTY
50304: LIST
50305: LIST
50306: PUSH
50307: LD_INT 3
50309: NEG
50310: PUSH
50311: LD_INT 1
50313: NEG
50314: PUSH
50315: EMPTY
50316: LIST
50317: LIST
50318: PUSH
50319: EMPTY
50320: LIST
50321: LIST
50322: LIST
50323: LIST
50324: LIST
50325: LIST
50326: LIST
50327: LIST
50328: LIST
50329: LIST
50330: LIST
50331: LIST
50332: LIST
50333: LIST
50334: LIST
50335: LIST
50336: LIST
50337: LIST
50338: LIST
50339: LIST
50340: LIST
50341: LIST
50342: LIST
50343: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50344: LD_ADDR_VAR 0 31
50348: PUSH
50349: LD_INT 0
50351: PUSH
50352: LD_INT 0
50354: PUSH
50355: EMPTY
50356: LIST
50357: LIST
50358: PUSH
50359: LD_INT 0
50361: PUSH
50362: LD_INT 1
50364: NEG
50365: PUSH
50366: EMPTY
50367: LIST
50368: LIST
50369: PUSH
50370: LD_INT 1
50372: PUSH
50373: LD_INT 0
50375: PUSH
50376: EMPTY
50377: LIST
50378: LIST
50379: PUSH
50380: LD_INT 1
50382: PUSH
50383: LD_INT 1
50385: PUSH
50386: EMPTY
50387: LIST
50388: LIST
50389: PUSH
50390: LD_INT 0
50392: PUSH
50393: LD_INT 1
50395: PUSH
50396: EMPTY
50397: LIST
50398: LIST
50399: PUSH
50400: LD_INT 1
50402: NEG
50403: PUSH
50404: LD_INT 0
50406: PUSH
50407: EMPTY
50408: LIST
50409: LIST
50410: PUSH
50411: LD_INT 1
50413: NEG
50414: PUSH
50415: LD_INT 1
50417: NEG
50418: PUSH
50419: EMPTY
50420: LIST
50421: LIST
50422: PUSH
50423: LD_INT 1
50425: NEG
50426: PUSH
50427: LD_INT 2
50429: NEG
50430: PUSH
50431: EMPTY
50432: LIST
50433: LIST
50434: PUSH
50435: LD_INT 1
50437: PUSH
50438: LD_INT 1
50440: NEG
50441: PUSH
50442: EMPTY
50443: LIST
50444: LIST
50445: PUSH
50446: LD_INT 2
50448: PUSH
50449: LD_INT 0
50451: PUSH
50452: EMPTY
50453: LIST
50454: LIST
50455: PUSH
50456: LD_INT 2
50458: PUSH
50459: LD_INT 1
50461: PUSH
50462: EMPTY
50463: LIST
50464: LIST
50465: PUSH
50466: LD_INT 2
50468: PUSH
50469: LD_INT 2
50471: PUSH
50472: EMPTY
50473: LIST
50474: LIST
50475: PUSH
50476: LD_INT 1
50478: PUSH
50479: LD_INT 2
50481: PUSH
50482: EMPTY
50483: LIST
50484: LIST
50485: PUSH
50486: LD_INT 0
50488: PUSH
50489: LD_INT 2
50491: PUSH
50492: EMPTY
50493: LIST
50494: LIST
50495: PUSH
50496: LD_INT 1
50498: NEG
50499: PUSH
50500: LD_INT 1
50502: PUSH
50503: EMPTY
50504: LIST
50505: LIST
50506: PUSH
50507: LD_INT 2
50509: NEG
50510: PUSH
50511: LD_INT 1
50513: NEG
50514: PUSH
50515: EMPTY
50516: LIST
50517: LIST
50518: PUSH
50519: LD_INT 2
50521: NEG
50522: PUSH
50523: LD_INT 2
50525: NEG
50526: PUSH
50527: EMPTY
50528: LIST
50529: LIST
50530: PUSH
50531: LD_INT 2
50533: NEG
50534: PUSH
50535: LD_INT 3
50537: NEG
50538: PUSH
50539: EMPTY
50540: LIST
50541: LIST
50542: PUSH
50543: LD_INT 2
50545: PUSH
50546: LD_INT 1
50548: NEG
50549: PUSH
50550: EMPTY
50551: LIST
50552: LIST
50553: PUSH
50554: LD_INT 3
50556: PUSH
50557: LD_INT 1
50559: PUSH
50560: EMPTY
50561: LIST
50562: LIST
50563: PUSH
50564: LD_INT 1
50566: PUSH
50567: LD_INT 3
50569: PUSH
50570: EMPTY
50571: LIST
50572: LIST
50573: PUSH
50574: LD_INT 1
50576: NEG
50577: PUSH
50578: LD_INT 2
50580: PUSH
50581: EMPTY
50582: LIST
50583: LIST
50584: PUSH
50585: LD_INT 3
50587: NEG
50588: PUSH
50589: LD_INT 2
50591: NEG
50592: PUSH
50593: EMPTY
50594: LIST
50595: LIST
50596: PUSH
50597: EMPTY
50598: LIST
50599: LIST
50600: LIST
50601: LIST
50602: LIST
50603: LIST
50604: LIST
50605: LIST
50606: LIST
50607: LIST
50608: LIST
50609: LIST
50610: LIST
50611: LIST
50612: LIST
50613: LIST
50614: LIST
50615: LIST
50616: LIST
50617: LIST
50618: LIST
50619: LIST
50620: LIST
50621: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50622: LD_ADDR_VAR 0 32
50626: PUSH
50627: LD_INT 0
50629: PUSH
50630: LD_INT 0
50632: PUSH
50633: EMPTY
50634: LIST
50635: LIST
50636: PUSH
50637: LD_INT 0
50639: PUSH
50640: LD_INT 1
50642: NEG
50643: PUSH
50644: EMPTY
50645: LIST
50646: LIST
50647: PUSH
50648: LD_INT 1
50650: PUSH
50651: LD_INT 0
50653: PUSH
50654: EMPTY
50655: LIST
50656: LIST
50657: PUSH
50658: LD_INT 1
50660: PUSH
50661: LD_INT 1
50663: PUSH
50664: EMPTY
50665: LIST
50666: LIST
50667: PUSH
50668: LD_INT 0
50670: PUSH
50671: LD_INT 1
50673: PUSH
50674: EMPTY
50675: LIST
50676: LIST
50677: PUSH
50678: LD_INT 1
50680: NEG
50681: PUSH
50682: LD_INT 0
50684: PUSH
50685: EMPTY
50686: LIST
50687: LIST
50688: PUSH
50689: LD_INT 1
50691: NEG
50692: PUSH
50693: LD_INT 1
50695: NEG
50696: PUSH
50697: EMPTY
50698: LIST
50699: LIST
50700: PUSH
50701: LD_INT 1
50703: NEG
50704: PUSH
50705: LD_INT 2
50707: NEG
50708: PUSH
50709: EMPTY
50710: LIST
50711: LIST
50712: PUSH
50713: LD_INT 0
50715: PUSH
50716: LD_INT 2
50718: NEG
50719: PUSH
50720: EMPTY
50721: LIST
50722: LIST
50723: PUSH
50724: LD_INT 1
50726: PUSH
50727: LD_INT 1
50729: NEG
50730: PUSH
50731: EMPTY
50732: LIST
50733: LIST
50734: PUSH
50735: LD_INT 2
50737: PUSH
50738: LD_INT 1
50740: PUSH
50741: EMPTY
50742: LIST
50743: LIST
50744: PUSH
50745: LD_INT 2
50747: PUSH
50748: LD_INT 2
50750: PUSH
50751: EMPTY
50752: LIST
50753: LIST
50754: PUSH
50755: LD_INT 1
50757: PUSH
50758: LD_INT 2
50760: PUSH
50761: EMPTY
50762: LIST
50763: LIST
50764: PUSH
50765: LD_INT 0
50767: PUSH
50768: LD_INT 2
50770: PUSH
50771: EMPTY
50772: LIST
50773: LIST
50774: PUSH
50775: LD_INT 1
50777: NEG
50778: PUSH
50779: LD_INT 1
50781: PUSH
50782: EMPTY
50783: LIST
50784: LIST
50785: PUSH
50786: LD_INT 2
50788: NEG
50789: PUSH
50790: LD_INT 0
50792: PUSH
50793: EMPTY
50794: LIST
50795: LIST
50796: PUSH
50797: LD_INT 2
50799: NEG
50800: PUSH
50801: LD_INT 1
50803: NEG
50804: PUSH
50805: EMPTY
50806: LIST
50807: LIST
50808: PUSH
50809: LD_INT 1
50811: NEG
50812: PUSH
50813: LD_INT 3
50815: NEG
50816: PUSH
50817: EMPTY
50818: LIST
50819: LIST
50820: PUSH
50821: LD_INT 1
50823: PUSH
50824: LD_INT 2
50826: NEG
50827: PUSH
50828: EMPTY
50829: LIST
50830: LIST
50831: PUSH
50832: LD_INT 3
50834: PUSH
50835: LD_INT 2
50837: PUSH
50838: EMPTY
50839: LIST
50840: LIST
50841: PUSH
50842: LD_INT 2
50844: PUSH
50845: LD_INT 3
50847: PUSH
50848: EMPTY
50849: LIST
50850: LIST
50851: PUSH
50852: LD_INT 2
50854: NEG
50855: PUSH
50856: LD_INT 1
50858: PUSH
50859: EMPTY
50860: LIST
50861: LIST
50862: PUSH
50863: LD_INT 3
50865: NEG
50866: PUSH
50867: LD_INT 1
50869: NEG
50870: PUSH
50871: EMPTY
50872: LIST
50873: LIST
50874: PUSH
50875: EMPTY
50876: LIST
50877: LIST
50878: LIST
50879: LIST
50880: LIST
50881: LIST
50882: LIST
50883: LIST
50884: LIST
50885: LIST
50886: LIST
50887: LIST
50888: LIST
50889: LIST
50890: LIST
50891: LIST
50892: LIST
50893: LIST
50894: LIST
50895: LIST
50896: LIST
50897: LIST
50898: LIST
50899: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50900: LD_ADDR_VAR 0 33
50904: PUSH
50905: LD_INT 0
50907: PUSH
50908: LD_INT 0
50910: PUSH
50911: EMPTY
50912: LIST
50913: LIST
50914: PUSH
50915: LD_INT 0
50917: PUSH
50918: LD_INT 1
50920: NEG
50921: PUSH
50922: EMPTY
50923: LIST
50924: LIST
50925: PUSH
50926: LD_INT 1
50928: PUSH
50929: LD_INT 0
50931: PUSH
50932: EMPTY
50933: LIST
50934: LIST
50935: PUSH
50936: LD_INT 1
50938: PUSH
50939: LD_INT 1
50941: PUSH
50942: EMPTY
50943: LIST
50944: LIST
50945: PUSH
50946: LD_INT 0
50948: PUSH
50949: LD_INT 1
50951: PUSH
50952: EMPTY
50953: LIST
50954: LIST
50955: PUSH
50956: LD_INT 1
50958: NEG
50959: PUSH
50960: LD_INT 0
50962: PUSH
50963: EMPTY
50964: LIST
50965: LIST
50966: PUSH
50967: LD_INT 1
50969: NEG
50970: PUSH
50971: LD_INT 1
50973: NEG
50974: PUSH
50975: EMPTY
50976: LIST
50977: LIST
50978: PUSH
50979: LD_INT 1
50981: NEG
50982: PUSH
50983: LD_INT 2
50985: NEG
50986: PUSH
50987: EMPTY
50988: LIST
50989: LIST
50990: PUSH
50991: LD_INT 1
50993: PUSH
50994: LD_INT 1
50996: NEG
50997: PUSH
50998: EMPTY
50999: LIST
51000: LIST
51001: PUSH
51002: LD_INT 2
51004: PUSH
51005: LD_INT 0
51007: PUSH
51008: EMPTY
51009: LIST
51010: LIST
51011: PUSH
51012: LD_INT 2
51014: PUSH
51015: LD_INT 1
51017: PUSH
51018: EMPTY
51019: LIST
51020: LIST
51021: PUSH
51022: LD_INT 1
51024: PUSH
51025: LD_INT 2
51027: PUSH
51028: EMPTY
51029: LIST
51030: LIST
51031: PUSH
51032: LD_INT 0
51034: PUSH
51035: LD_INT 2
51037: PUSH
51038: EMPTY
51039: LIST
51040: LIST
51041: PUSH
51042: LD_INT 1
51044: NEG
51045: PUSH
51046: LD_INT 1
51048: PUSH
51049: EMPTY
51050: LIST
51051: LIST
51052: PUSH
51053: LD_INT 2
51055: NEG
51056: PUSH
51057: LD_INT 0
51059: PUSH
51060: EMPTY
51061: LIST
51062: LIST
51063: PUSH
51064: LD_INT 2
51066: NEG
51067: PUSH
51068: LD_INT 1
51070: NEG
51071: PUSH
51072: EMPTY
51073: LIST
51074: LIST
51075: PUSH
51076: LD_INT 2
51078: NEG
51079: PUSH
51080: LD_INT 2
51082: NEG
51083: PUSH
51084: EMPTY
51085: LIST
51086: LIST
51087: PUSH
51088: LD_INT 2
51090: NEG
51091: PUSH
51092: LD_INT 3
51094: NEG
51095: PUSH
51096: EMPTY
51097: LIST
51098: LIST
51099: PUSH
51100: LD_INT 2
51102: PUSH
51103: LD_INT 1
51105: NEG
51106: PUSH
51107: EMPTY
51108: LIST
51109: LIST
51110: PUSH
51111: LD_INT 3
51113: PUSH
51114: LD_INT 1
51116: PUSH
51117: EMPTY
51118: LIST
51119: LIST
51120: PUSH
51121: LD_INT 1
51123: PUSH
51124: LD_INT 3
51126: PUSH
51127: EMPTY
51128: LIST
51129: LIST
51130: PUSH
51131: LD_INT 1
51133: NEG
51134: PUSH
51135: LD_INT 2
51137: PUSH
51138: EMPTY
51139: LIST
51140: LIST
51141: PUSH
51142: LD_INT 3
51144: NEG
51145: PUSH
51146: LD_INT 2
51148: NEG
51149: PUSH
51150: EMPTY
51151: LIST
51152: LIST
51153: PUSH
51154: EMPTY
51155: LIST
51156: LIST
51157: LIST
51158: LIST
51159: LIST
51160: LIST
51161: LIST
51162: LIST
51163: LIST
51164: LIST
51165: LIST
51166: LIST
51167: LIST
51168: LIST
51169: LIST
51170: LIST
51171: LIST
51172: LIST
51173: LIST
51174: LIST
51175: LIST
51176: LIST
51177: LIST
51178: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51179: LD_ADDR_VAR 0 34
51183: PUSH
51184: LD_INT 0
51186: PUSH
51187: LD_INT 0
51189: PUSH
51190: EMPTY
51191: LIST
51192: LIST
51193: PUSH
51194: LD_INT 0
51196: PUSH
51197: LD_INT 1
51199: NEG
51200: PUSH
51201: EMPTY
51202: LIST
51203: LIST
51204: PUSH
51205: LD_INT 1
51207: PUSH
51208: LD_INT 0
51210: PUSH
51211: EMPTY
51212: LIST
51213: LIST
51214: PUSH
51215: LD_INT 1
51217: PUSH
51218: LD_INT 1
51220: PUSH
51221: EMPTY
51222: LIST
51223: LIST
51224: PUSH
51225: LD_INT 0
51227: PUSH
51228: LD_INT 1
51230: PUSH
51231: EMPTY
51232: LIST
51233: LIST
51234: PUSH
51235: LD_INT 1
51237: NEG
51238: PUSH
51239: LD_INT 0
51241: PUSH
51242: EMPTY
51243: LIST
51244: LIST
51245: PUSH
51246: LD_INT 1
51248: NEG
51249: PUSH
51250: LD_INT 1
51252: NEG
51253: PUSH
51254: EMPTY
51255: LIST
51256: LIST
51257: PUSH
51258: LD_INT 1
51260: NEG
51261: PUSH
51262: LD_INT 2
51264: NEG
51265: PUSH
51266: EMPTY
51267: LIST
51268: LIST
51269: PUSH
51270: LD_INT 0
51272: PUSH
51273: LD_INT 2
51275: NEG
51276: PUSH
51277: EMPTY
51278: LIST
51279: LIST
51280: PUSH
51281: LD_INT 1
51283: PUSH
51284: LD_INT 1
51286: NEG
51287: PUSH
51288: EMPTY
51289: LIST
51290: LIST
51291: PUSH
51292: LD_INT 2
51294: PUSH
51295: LD_INT 1
51297: PUSH
51298: EMPTY
51299: LIST
51300: LIST
51301: PUSH
51302: LD_INT 2
51304: PUSH
51305: LD_INT 2
51307: PUSH
51308: EMPTY
51309: LIST
51310: LIST
51311: PUSH
51312: LD_INT 1
51314: PUSH
51315: LD_INT 2
51317: PUSH
51318: EMPTY
51319: LIST
51320: LIST
51321: PUSH
51322: LD_INT 1
51324: NEG
51325: PUSH
51326: LD_INT 1
51328: PUSH
51329: EMPTY
51330: LIST
51331: LIST
51332: PUSH
51333: LD_INT 2
51335: NEG
51336: PUSH
51337: LD_INT 0
51339: PUSH
51340: EMPTY
51341: LIST
51342: LIST
51343: PUSH
51344: LD_INT 2
51346: NEG
51347: PUSH
51348: LD_INT 1
51350: NEG
51351: PUSH
51352: EMPTY
51353: LIST
51354: LIST
51355: PUSH
51356: LD_INT 2
51358: NEG
51359: PUSH
51360: LD_INT 2
51362: NEG
51363: PUSH
51364: EMPTY
51365: LIST
51366: LIST
51367: PUSH
51368: LD_INT 1
51370: NEG
51371: PUSH
51372: LD_INT 3
51374: NEG
51375: PUSH
51376: EMPTY
51377: LIST
51378: LIST
51379: PUSH
51380: LD_INT 1
51382: PUSH
51383: LD_INT 2
51385: NEG
51386: PUSH
51387: EMPTY
51388: LIST
51389: LIST
51390: PUSH
51391: LD_INT 3
51393: PUSH
51394: LD_INT 2
51396: PUSH
51397: EMPTY
51398: LIST
51399: LIST
51400: PUSH
51401: LD_INT 2
51403: PUSH
51404: LD_INT 3
51406: PUSH
51407: EMPTY
51408: LIST
51409: LIST
51410: PUSH
51411: LD_INT 2
51413: NEG
51414: PUSH
51415: LD_INT 1
51417: PUSH
51418: EMPTY
51419: LIST
51420: LIST
51421: PUSH
51422: LD_INT 3
51424: NEG
51425: PUSH
51426: LD_INT 1
51428: NEG
51429: PUSH
51430: EMPTY
51431: LIST
51432: LIST
51433: PUSH
51434: EMPTY
51435: LIST
51436: LIST
51437: LIST
51438: LIST
51439: LIST
51440: LIST
51441: LIST
51442: LIST
51443: LIST
51444: LIST
51445: LIST
51446: LIST
51447: LIST
51448: LIST
51449: LIST
51450: LIST
51451: LIST
51452: LIST
51453: LIST
51454: LIST
51455: LIST
51456: LIST
51457: LIST
51458: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
51459: LD_ADDR_VAR 0 35
51463: PUSH
51464: LD_INT 0
51466: PUSH
51467: LD_INT 0
51469: PUSH
51470: EMPTY
51471: LIST
51472: LIST
51473: PUSH
51474: LD_INT 0
51476: PUSH
51477: LD_INT 1
51479: NEG
51480: PUSH
51481: EMPTY
51482: LIST
51483: LIST
51484: PUSH
51485: LD_INT 1
51487: PUSH
51488: LD_INT 0
51490: PUSH
51491: EMPTY
51492: LIST
51493: LIST
51494: PUSH
51495: LD_INT 1
51497: PUSH
51498: LD_INT 1
51500: PUSH
51501: EMPTY
51502: LIST
51503: LIST
51504: PUSH
51505: LD_INT 0
51507: PUSH
51508: LD_INT 1
51510: PUSH
51511: EMPTY
51512: LIST
51513: LIST
51514: PUSH
51515: LD_INT 1
51517: NEG
51518: PUSH
51519: LD_INT 0
51521: PUSH
51522: EMPTY
51523: LIST
51524: LIST
51525: PUSH
51526: LD_INT 1
51528: NEG
51529: PUSH
51530: LD_INT 1
51532: NEG
51533: PUSH
51534: EMPTY
51535: LIST
51536: LIST
51537: PUSH
51538: LD_INT 2
51540: PUSH
51541: LD_INT 1
51543: PUSH
51544: EMPTY
51545: LIST
51546: LIST
51547: PUSH
51548: LD_INT 2
51550: NEG
51551: PUSH
51552: LD_INT 1
51554: NEG
51555: PUSH
51556: EMPTY
51557: LIST
51558: LIST
51559: PUSH
51560: EMPTY
51561: LIST
51562: LIST
51563: LIST
51564: LIST
51565: LIST
51566: LIST
51567: LIST
51568: LIST
51569: LIST
51570: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
51571: LD_ADDR_VAR 0 36
51575: PUSH
51576: LD_INT 0
51578: PUSH
51579: LD_INT 0
51581: PUSH
51582: EMPTY
51583: LIST
51584: LIST
51585: PUSH
51586: LD_INT 0
51588: PUSH
51589: LD_INT 1
51591: NEG
51592: PUSH
51593: EMPTY
51594: LIST
51595: LIST
51596: PUSH
51597: LD_INT 1
51599: PUSH
51600: LD_INT 0
51602: PUSH
51603: EMPTY
51604: LIST
51605: LIST
51606: PUSH
51607: LD_INT 1
51609: PUSH
51610: LD_INT 1
51612: PUSH
51613: EMPTY
51614: LIST
51615: LIST
51616: PUSH
51617: LD_INT 0
51619: PUSH
51620: LD_INT 1
51622: PUSH
51623: EMPTY
51624: LIST
51625: LIST
51626: PUSH
51627: LD_INT 1
51629: NEG
51630: PUSH
51631: LD_INT 0
51633: PUSH
51634: EMPTY
51635: LIST
51636: LIST
51637: PUSH
51638: LD_INT 1
51640: NEG
51641: PUSH
51642: LD_INT 1
51644: NEG
51645: PUSH
51646: EMPTY
51647: LIST
51648: LIST
51649: PUSH
51650: LD_INT 1
51652: NEG
51653: PUSH
51654: LD_INT 2
51656: NEG
51657: PUSH
51658: EMPTY
51659: LIST
51660: LIST
51661: PUSH
51662: LD_INT 1
51664: PUSH
51665: LD_INT 2
51667: PUSH
51668: EMPTY
51669: LIST
51670: LIST
51671: PUSH
51672: EMPTY
51673: LIST
51674: LIST
51675: LIST
51676: LIST
51677: LIST
51678: LIST
51679: LIST
51680: LIST
51681: LIST
51682: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51683: LD_ADDR_VAR 0 37
51687: PUSH
51688: LD_INT 0
51690: PUSH
51691: LD_INT 0
51693: PUSH
51694: EMPTY
51695: LIST
51696: LIST
51697: PUSH
51698: LD_INT 0
51700: PUSH
51701: LD_INT 1
51703: NEG
51704: PUSH
51705: EMPTY
51706: LIST
51707: LIST
51708: PUSH
51709: LD_INT 1
51711: PUSH
51712: LD_INT 0
51714: PUSH
51715: EMPTY
51716: LIST
51717: LIST
51718: PUSH
51719: LD_INT 1
51721: PUSH
51722: LD_INT 1
51724: PUSH
51725: EMPTY
51726: LIST
51727: LIST
51728: PUSH
51729: LD_INT 0
51731: PUSH
51732: LD_INT 1
51734: PUSH
51735: EMPTY
51736: LIST
51737: LIST
51738: PUSH
51739: LD_INT 1
51741: NEG
51742: PUSH
51743: LD_INT 0
51745: PUSH
51746: EMPTY
51747: LIST
51748: LIST
51749: PUSH
51750: LD_INT 1
51752: NEG
51753: PUSH
51754: LD_INT 1
51756: NEG
51757: PUSH
51758: EMPTY
51759: LIST
51760: LIST
51761: PUSH
51762: LD_INT 1
51764: PUSH
51765: LD_INT 1
51767: NEG
51768: PUSH
51769: EMPTY
51770: LIST
51771: LIST
51772: PUSH
51773: LD_INT 1
51775: NEG
51776: PUSH
51777: LD_INT 1
51779: PUSH
51780: EMPTY
51781: LIST
51782: LIST
51783: PUSH
51784: EMPTY
51785: LIST
51786: LIST
51787: LIST
51788: LIST
51789: LIST
51790: LIST
51791: LIST
51792: LIST
51793: LIST
51794: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
51795: LD_ADDR_VAR 0 38
51799: PUSH
51800: LD_INT 0
51802: PUSH
51803: LD_INT 0
51805: PUSH
51806: EMPTY
51807: LIST
51808: LIST
51809: PUSH
51810: LD_INT 0
51812: PUSH
51813: LD_INT 1
51815: NEG
51816: PUSH
51817: EMPTY
51818: LIST
51819: LIST
51820: PUSH
51821: LD_INT 1
51823: PUSH
51824: LD_INT 0
51826: PUSH
51827: EMPTY
51828: LIST
51829: LIST
51830: PUSH
51831: LD_INT 1
51833: PUSH
51834: LD_INT 1
51836: PUSH
51837: EMPTY
51838: LIST
51839: LIST
51840: PUSH
51841: LD_INT 0
51843: PUSH
51844: LD_INT 1
51846: PUSH
51847: EMPTY
51848: LIST
51849: LIST
51850: PUSH
51851: LD_INT 1
51853: NEG
51854: PUSH
51855: LD_INT 0
51857: PUSH
51858: EMPTY
51859: LIST
51860: LIST
51861: PUSH
51862: LD_INT 1
51864: NEG
51865: PUSH
51866: LD_INT 1
51868: NEG
51869: PUSH
51870: EMPTY
51871: LIST
51872: LIST
51873: PUSH
51874: LD_INT 2
51876: PUSH
51877: LD_INT 1
51879: PUSH
51880: EMPTY
51881: LIST
51882: LIST
51883: PUSH
51884: LD_INT 2
51886: NEG
51887: PUSH
51888: LD_INT 1
51890: NEG
51891: PUSH
51892: EMPTY
51893: LIST
51894: LIST
51895: PUSH
51896: EMPTY
51897: LIST
51898: LIST
51899: LIST
51900: LIST
51901: LIST
51902: LIST
51903: LIST
51904: LIST
51905: LIST
51906: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
51907: LD_ADDR_VAR 0 39
51911: PUSH
51912: LD_INT 0
51914: PUSH
51915: LD_INT 0
51917: PUSH
51918: EMPTY
51919: LIST
51920: LIST
51921: PUSH
51922: LD_INT 0
51924: PUSH
51925: LD_INT 1
51927: NEG
51928: PUSH
51929: EMPTY
51930: LIST
51931: LIST
51932: PUSH
51933: LD_INT 1
51935: PUSH
51936: LD_INT 0
51938: PUSH
51939: EMPTY
51940: LIST
51941: LIST
51942: PUSH
51943: LD_INT 1
51945: PUSH
51946: LD_INT 1
51948: PUSH
51949: EMPTY
51950: LIST
51951: LIST
51952: PUSH
51953: LD_INT 0
51955: PUSH
51956: LD_INT 1
51958: PUSH
51959: EMPTY
51960: LIST
51961: LIST
51962: PUSH
51963: LD_INT 1
51965: NEG
51966: PUSH
51967: LD_INT 0
51969: PUSH
51970: EMPTY
51971: LIST
51972: LIST
51973: PUSH
51974: LD_INT 1
51976: NEG
51977: PUSH
51978: LD_INT 1
51980: NEG
51981: PUSH
51982: EMPTY
51983: LIST
51984: LIST
51985: PUSH
51986: LD_INT 1
51988: NEG
51989: PUSH
51990: LD_INT 2
51992: NEG
51993: PUSH
51994: EMPTY
51995: LIST
51996: LIST
51997: PUSH
51998: LD_INT 1
52000: PUSH
52001: LD_INT 2
52003: PUSH
52004: EMPTY
52005: LIST
52006: LIST
52007: PUSH
52008: EMPTY
52009: LIST
52010: LIST
52011: LIST
52012: LIST
52013: LIST
52014: LIST
52015: LIST
52016: LIST
52017: LIST
52018: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
52019: LD_ADDR_VAR 0 40
52023: PUSH
52024: LD_INT 0
52026: PUSH
52027: LD_INT 0
52029: PUSH
52030: EMPTY
52031: LIST
52032: LIST
52033: PUSH
52034: LD_INT 0
52036: PUSH
52037: LD_INT 1
52039: NEG
52040: PUSH
52041: EMPTY
52042: LIST
52043: LIST
52044: PUSH
52045: LD_INT 1
52047: PUSH
52048: LD_INT 0
52050: PUSH
52051: EMPTY
52052: LIST
52053: LIST
52054: PUSH
52055: LD_INT 1
52057: PUSH
52058: LD_INT 1
52060: PUSH
52061: EMPTY
52062: LIST
52063: LIST
52064: PUSH
52065: LD_INT 0
52067: PUSH
52068: LD_INT 1
52070: PUSH
52071: EMPTY
52072: LIST
52073: LIST
52074: PUSH
52075: LD_INT 1
52077: NEG
52078: PUSH
52079: LD_INT 0
52081: PUSH
52082: EMPTY
52083: LIST
52084: LIST
52085: PUSH
52086: LD_INT 1
52088: NEG
52089: PUSH
52090: LD_INT 1
52092: NEG
52093: PUSH
52094: EMPTY
52095: LIST
52096: LIST
52097: PUSH
52098: LD_INT 1
52100: PUSH
52101: LD_INT 1
52103: NEG
52104: PUSH
52105: EMPTY
52106: LIST
52107: LIST
52108: PUSH
52109: LD_INT 1
52111: NEG
52112: PUSH
52113: LD_INT 1
52115: PUSH
52116: EMPTY
52117: LIST
52118: LIST
52119: PUSH
52120: EMPTY
52121: LIST
52122: LIST
52123: LIST
52124: LIST
52125: LIST
52126: LIST
52127: LIST
52128: LIST
52129: LIST
52130: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52131: LD_ADDR_VAR 0 41
52135: PUSH
52136: LD_INT 0
52138: PUSH
52139: LD_INT 0
52141: PUSH
52142: EMPTY
52143: LIST
52144: LIST
52145: PUSH
52146: LD_INT 0
52148: PUSH
52149: LD_INT 1
52151: NEG
52152: PUSH
52153: EMPTY
52154: LIST
52155: LIST
52156: PUSH
52157: LD_INT 1
52159: PUSH
52160: LD_INT 0
52162: PUSH
52163: EMPTY
52164: LIST
52165: LIST
52166: PUSH
52167: LD_INT 1
52169: PUSH
52170: LD_INT 1
52172: PUSH
52173: EMPTY
52174: LIST
52175: LIST
52176: PUSH
52177: LD_INT 0
52179: PUSH
52180: LD_INT 1
52182: PUSH
52183: EMPTY
52184: LIST
52185: LIST
52186: PUSH
52187: LD_INT 1
52189: NEG
52190: PUSH
52191: LD_INT 0
52193: PUSH
52194: EMPTY
52195: LIST
52196: LIST
52197: PUSH
52198: LD_INT 1
52200: NEG
52201: PUSH
52202: LD_INT 1
52204: NEG
52205: PUSH
52206: EMPTY
52207: LIST
52208: LIST
52209: PUSH
52210: LD_INT 1
52212: NEG
52213: PUSH
52214: LD_INT 2
52216: NEG
52217: PUSH
52218: EMPTY
52219: LIST
52220: LIST
52221: PUSH
52222: LD_INT 1
52224: PUSH
52225: LD_INT 1
52227: NEG
52228: PUSH
52229: EMPTY
52230: LIST
52231: LIST
52232: PUSH
52233: LD_INT 2
52235: PUSH
52236: LD_INT 0
52238: PUSH
52239: EMPTY
52240: LIST
52241: LIST
52242: PUSH
52243: LD_INT 2
52245: PUSH
52246: LD_INT 1
52248: PUSH
52249: EMPTY
52250: LIST
52251: LIST
52252: PUSH
52253: LD_INT 2
52255: PUSH
52256: LD_INT 2
52258: PUSH
52259: EMPTY
52260: LIST
52261: LIST
52262: PUSH
52263: LD_INT 1
52265: PUSH
52266: LD_INT 2
52268: PUSH
52269: EMPTY
52270: LIST
52271: LIST
52272: PUSH
52273: LD_INT 1
52275: NEG
52276: PUSH
52277: LD_INT 1
52279: PUSH
52280: EMPTY
52281: LIST
52282: LIST
52283: PUSH
52284: LD_INT 2
52286: NEG
52287: PUSH
52288: LD_INT 0
52290: PUSH
52291: EMPTY
52292: LIST
52293: LIST
52294: PUSH
52295: LD_INT 2
52297: NEG
52298: PUSH
52299: LD_INT 1
52301: NEG
52302: PUSH
52303: EMPTY
52304: LIST
52305: LIST
52306: PUSH
52307: LD_INT 2
52309: NEG
52310: PUSH
52311: LD_INT 2
52313: NEG
52314: PUSH
52315: EMPTY
52316: LIST
52317: LIST
52318: PUSH
52319: LD_INT 2
52321: NEG
52322: PUSH
52323: LD_INT 3
52325: NEG
52326: PUSH
52327: EMPTY
52328: LIST
52329: LIST
52330: PUSH
52331: LD_INT 2
52333: PUSH
52334: LD_INT 1
52336: NEG
52337: PUSH
52338: EMPTY
52339: LIST
52340: LIST
52341: PUSH
52342: LD_INT 3
52344: PUSH
52345: LD_INT 0
52347: PUSH
52348: EMPTY
52349: LIST
52350: LIST
52351: PUSH
52352: LD_INT 3
52354: PUSH
52355: LD_INT 1
52357: PUSH
52358: EMPTY
52359: LIST
52360: LIST
52361: PUSH
52362: LD_INT 3
52364: PUSH
52365: LD_INT 2
52367: PUSH
52368: EMPTY
52369: LIST
52370: LIST
52371: PUSH
52372: LD_INT 3
52374: PUSH
52375: LD_INT 3
52377: PUSH
52378: EMPTY
52379: LIST
52380: LIST
52381: PUSH
52382: LD_INT 2
52384: PUSH
52385: LD_INT 3
52387: PUSH
52388: EMPTY
52389: LIST
52390: LIST
52391: PUSH
52392: LD_INT 2
52394: NEG
52395: PUSH
52396: LD_INT 1
52398: PUSH
52399: EMPTY
52400: LIST
52401: LIST
52402: PUSH
52403: LD_INT 3
52405: NEG
52406: PUSH
52407: LD_INT 0
52409: PUSH
52410: EMPTY
52411: LIST
52412: LIST
52413: PUSH
52414: LD_INT 3
52416: NEG
52417: PUSH
52418: LD_INT 1
52420: NEG
52421: PUSH
52422: EMPTY
52423: LIST
52424: LIST
52425: PUSH
52426: LD_INT 3
52428: NEG
52429: PUSH
52430: LD_INT 2
52432: NEG
52433: PUSH
52434: EMPTY
52435: LIST
52436: LIST
52437: PUSH
52438: LD_INT 3
52440: NEG
52441: PUSH
52442: LD_INT 3
52444: NEG
52445: PUSH
52446: EMPTY
52447: LIST
52448: LIST
52449: PUSH
52450: EMPTY
52451: LIST
52452: LIST
52453: LIST
52454: LIST
52455: LIST
52456: LIST
52457: LIST
52458: LIST
52459: LIST
52460: LIST
52461: LIST
52462: LIST
52463: LIST
52464: LIST
52465: LIST
52466: LIST
52467: LIST
52468: LIST
52469: LIST
52470: LIST
52471: LIST
52472: LIST
52473: LIST
52474: LIST
52475: LIST
52476: LIST
52477: LIST
52478: LIST
52479: LIST
52480: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52481: LD_ADDR_VAR 0 42
52485: PUSH
52486: LD_INT 0
52488: PUSH
52489: LD_INT 0
52491: PUSH
52492: EMPTY
52493: LIST
52494: LIST
52495: PUSH
52496: LD_INT 0
52498: PUSH
52499: LD_INT 1
52501: NEG
52502: PUSH
52503: EMPTY
52504: LIST
52505: LIST
52506: PUSH
52507: LD_INT 1
52509: PUSH
52510: LD_INT 0
52512: PUSH
52513: EMPTY
52514: LIST
52515: LIST
52516: PUSH
52517: LD_INT 1
52519: PUSH
52520: LD_INT 1
52522: PUSH
52523: EMPTY
52524: LIST
52525: LIST
52526: PUSH
52527: LD_INT 0
52529: PUSH
52530: LD_INT 1
52532: PUSH
52533: EMPTY
52534: LIST
52535: LIST
52536: PUSH
52537: LD_INT 1
52539: NEG
52540: PUSH
52541: LD_INT 0
52543: PUSH
52544: EMPTY
52545: LIST
52546: LIST
52547: PUSH
52548: LD_INT 1
52550: NEG
52551: PUSH
52552: LD_INT 1
52554: NEG
52555: PUSH
52556: EMPTY
52557: LIST
52558: LIST
52559: PUSH
52560: LD_INT 1
52562: NEG
52563: PUSH
52564: LD_INT 2
52566: NEG
52567: PUSH
52568: EMPTY
52569: LIST
52570: LIST
52571: PUSH
52572: LD_INT 0
52574: PUSH
52575: LD_INT 2
52577: NEG
52578: PUSH
52579: EMPTY
52580: LIST
52581: LIST
52582: PUSH
52583: LD_INT 1
52585: PUSH
52586: LD_INT 1
52588: NEG
52589: PUSH
52590: EMPTY
52591: LIST
52592: LIST
52593: PUSH
52594: LD_INT 2
52596: PUSH
52597: LD_INT 1
52599: PUSH
52600: EMPTY
52601: LIST
52602: LIST
52603: PUSH
52604: LD_INT 2
52606: PUSH
52607: LD_INT 2
52609: PUSH
52610: EMPTY
52611: LIST
52612: LIST
52613: PUSH
52614: LD_INT 1
52616: PUSH
52617: LD_INT 2
52619: PUSH
52620: EMPTY
52621: LIST
52622: LIST
52623: PUSH
52624: LD_INT 0
52626: PUSH
52627: LD_INT 2
52629: PUSH
52630: EMPTY
52631: LIST
52632: LIST
52633: PUSH
52634: LD_INT 1
52636: NEG
52637: PUSH
52638: LD_INT 1
52640: PUSH
52641: EMPTY
52642: LIST
52643: LIST
52644: PUSH
52645: LD_INT 2
52647: NEG
52648: PUSH
52649: LD_INT 1
52651: NEG
52652: PUSH
52653: EMPTY
52654: LIST
52655: LIST
52656: PUSH
52657: LD_INT 2
52659: NEG
52660: PUSH
52661: LD_INT 2
52663: NEG
52664: PUSH
52665: EMPTY
52666: LIST
52667: LIST
52668: PUSH
52669: LD_INT 2
52671: NEG
52672: PUSH
52673: LD_INT 3
52675: NEG
52676: PUSH
52677: EMPTY
52678: LIST
52679: LIST
52680: PUSH
52681: LD_INT 1
52683: NEG
52684: PUSH
52685: LD_INT 3
52687: NEG
52688: PUSH
52689: EMPTY
52690: LIST
52691: LIST
52692: PUSH
52693: LD_INT 0
52695: PUSH
52696: LD_INT 3
52698: NEG
52699: PUSH
52700: EMPTY
52701: LIST
52702: LIST
52703: PUSH
52704: LD_INT 1
52706: PUSH
52707: LD_INT 2
52709: NEG
52710: PUSH
52711: EMPTY
52712: LIST
52713: LIST
52714: PUSH
52715: LD_INT 3
52717: PUSH
52718: LD_INT 2
52720: PUSH
52721: EMPTY
52722: LIST
52723: LIST
52724: PUSH
52725: LD_INT 3
52727: PUSH
52728: LD_INT 3
52730: PUSH
52731: EMPTY
52732: LIST
52733: LIST
52734: PUSH
52735: LD_INT 2
52737: PUSH
52738: LD_INT 3
52740: PUSH
52741: EMPTY
52742: LIST
52743: LIST
52744: PUSH
52745: LD_INT 1
52747: PUSH
52748: LD_INT 3
52750: PUSH
52751: EMPTY
52752: LIST
52753: LIST
52754: PUSH
52755: LD_INT 0
52757: PUSH
52758: LD_INT 3
52760: PUSH
52761: EMPTY
52762: LIST
52763: LIST
52764: PUSH
52765: LD_INT 1
52767: NEG
52768: PUSH
52769: LD_INT 2
52771: PUSH
52772: EMPTY
52773: LIST
52774: LIST
52775: PUSH
52776: LD_INT 3
52778: NEG
52779: PUSH
52780: LD_INT 2
52782: NEG
52783: PUSH
52784: EMPTY
52785: LIST
52786: LIST
52787: PUSH
52788: LD_INT 3
52790: NEG
52791: PUSH
52792: LD_INT 3
52794: NEG
52795: PUSH
52796: EMPTY
52797: LIST
52798: LIST
52799: PUSH
52800: EMPTY
52801: LIST
52802: LIST
52803: LIST
52804: LIST
52805: LIST
52806: LIST
52807: LIST
52808: LIST
52809: LIST
52810: LIST
52811: LIST
52812: LIST
52813: LIST
52814: LIST
52815: LIST
52816: LIST
52817: LIST
52818: LIST
52819: LIST
52820: LIST
52821: LIST
52822: LIST
52823: LIST
52824: LIST
52825: LIST
52826: LIST
52827: LIST
52828: LIST
52829: LIST
52830: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52831: LD_ADDR_VAR 0 43
52835: PUSH
52836: LD_INT 0
52838: PUSH
52839: LD_INT 0
52841: PUSH
52842: EMPTY
52843: LIST
52844: LIST
52845: PUSH
52846: LD_INT 0
52848: PUSH
52849: LD_INT 1
52851: NEG
52852: PUSH
52853: EMPTY
52854: LIST
52855: LIST
52856: PUSH
52857: LD_INT 1
52859: PUSH
52860: LD_INT 0
52862: PUSH
52863: EMPTY
52864: LIST
52865: LIST
52866: PUSH
52867: LD_INT 1
52869: PUSH
52870: LD_INT 1
52872: PUSH
52873: EMPTY
52874: LIST
52875: LIST
52876: PUSH
52877: LD_INT 0
52879: PUSH
52880: LD_INT 1
52882: PUSH
52883: EMPTY
52884: LIST
52885: LIST
52886: PUSH
52887: LD_INT 1
52889: NEG
52890: PUSH
52891: LD_INT 0
52893: PUSH
52894: EMPTY
52895: LIST
52896: LIST
52897: PUSH
52898: LD_INT 1
52900: NEG
52901: PUSH
52902: LD_INT 1
52904: NEG
52905: PUSH
52906: EMPTY
52907: LIST
52908: LIST
52909: PUSH
52910: LD_INT 1
52912: NEG
52913: PUSH
52914: LD_INT 2
52916: NEG
52917: PUSH
52918: EMPTY
52919: LIST
52920: LIST
52921: PUSH
52922: LD_INT 0
52924: PUSH
52925: LD_INT 2
52927: NEG
52928: PUSH
52929: EMPTY
52930: LIST
52931: LIST
52932: PUSH
52933: LD_INT 1
52935: PUSH
52936: LD_INT 1
52938: NEG
52939: PUSH
52940: EMPTY
52941: LIST
52942: LIST
52943: PUSH
52944: LD_INT 2
52946: PUSH
52947: LD_INT 0
52949: PUSH
52950: EMPTY
52951: LIST
52952: LIST
52953: PUSH
52954: LD_INT 2
52956: PUSH
52957: LD_INT 1
52959: PUSH
52960: EMPTY
52961: LIST
52962: LIST
52963: PUSH
52964: LD_INT 1
52966: PUSH
52967: LD_INT 2
52969: PUSH
52970: EMPTY
52971: LIST
52972: LIST
52973: PUSH
52974: LD_INT 0
52976: PUSH
52977: LD_INT 2
52979: PUSH
52980: EMPTY
52981: LIST
52982: LIST
52983: PUSH
52984: LD_INT 1
52986: NEG
52987: PUSH
52988: LD_INT 1
52990: PUSH
52991: EMPTY
52992: LIST
52993: LIST
52994: PUSH
52995: LD_INT 2
52997: NEG
52998: PUSH
52999: LD_INT 0
53001: PUSH
53002: EMPTY
53003: LIST
53004: LIST
53005: PUSH
53006: LD_INT 2
53008: NEG
53009: PUSH
53010: LD_INT 1
53012: NEG
53013: PUSH
53014: EMPTY
53015: LIST
53016: LIST
53017: PUSH
53018: LD_INT 1
53020: NEG
53021: PUSH
53022: LD_INT 3
53024: NEG
53025: PUSH
53026: EMPTY
53027: LIST
53028: LIST
53029: PUSH
53030: LD_INT 0
53032: PUSH
53033: LD_INT 3
53035: NEG
53036: PUSH
53037: EMPTY
53038: LIST
53039: LIST
53040: PUSH
53041: LD_INT 1
53043: PUSH
53044: LD_INT 2
53046: NEG
53047: PUSH
53048: EMPTY
53049: LIST
53050: LIST
53051: PUSH
53052: LD_INT 2
53054: PUSH
53055: LD_INT 1
53057: NEG
53058: PUSH
53059: EMPTY
53060: LIST
53061: LIST
53062: PUSH
53063: LD_INT 3
53065: PUSH
53066: LD_INT 0
53068: PUSH
53069: EMPTY
53070: LIST
53071: LIST
53072: PUSH
53073: LD_INT 3
53075: PUSH
53076: LD_INT 1
53078: PUSH
53079: EMPTY
53080: LIST
53081: LIST
53082: PUSH
53083: LD_INT 1
53085: PUSH
53086: LD_INT 3
53088: PUSH
53089: EMPTY
53090: LIST
53091: LIST
53092: PUSH
53093: LD_INT 0
53095: PUSH
53096: LD_INT 3
53098: PUSH
53099: EMPTY
53100: LIST
53101: LIST
53102: PUSH
53103: LD_INT 1
53105: NEG
53106: PUSH
53107: LD_INT 2
53109: PUSH
53110: EMPTY
53111: LIST
53112: LIST
53113: PUSH
53114: LD_INT 2
53116: NEG
53117: PUSH
53118: LD_INT 1
53120: PUSH
53121: EMPTY
53122: LIST
53123: LIST
53124: PUSH
53125: LD_INT 3
53127: NEG
53128: PUSH
53129: LD_INT 0
53131: PUSH
53132: EMPTY
53133: LIST
53134: LIST
53135: PUSH
53136: LD_INT 3
53138: NEG
53139: PUSH
53140: LD_INT 1
53142: NEG
53143: PUSH
53144: EMPTY
53145: LIST
53146: LIST
53147: PUSH
53148: EMPTY
53149: LIST
53150: LIST
53151: LIST
53152: LIST
53153: LIST
53154: LIST
53155: LIST
53156: LIST
53157: LIST
53158: LIST
53159: LIST
53160: LIST
53161: LIST
53162: LIST
53163: LIST
53164: LIST
53165: LIST
53166: LIST
53167: LIST
53168: LIST
53169: LIST
53170: LIST
53171: LIST
53172: LIST
53173: LIST
53174: LIST
53175: LIST
53176: LIST
53177: LIST
53178: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53179: LD_ADDR_VAR 0 44
53183: PUSH
53184: LD_INT 0
53186: PUSH
53187: LD_INT 0
53189: PUSH
53190: EMPTY
53191: LIST
53192: LIST
53193: PUSH
53194: LD_INT 0
53196: PUSH
53197: LD_INT 1
53199: NEG
53200: PUSH
53201: EMPTY
53202: LIST
53203: LIST
53204: PUSH
53205: LD_INT 1
53207: PUSH
53208: LD_INT 0
53210: PUSH
53211: EMPTY
53212: LIST
53213: LIST
53214: PUSH
53215: LD_INT 1
53217: PUSH
53218: LD_INT 1
53220: PUSH
53221: EMPTY
53222: LIST
53223: LIST
53224: PUSH
53225: LD_INT 0
53227: PUSH
53228: LD_INT 1
53230: PUSH
53231: EMPTY
53232: LIST
53233: LIST
53234: PUSH
53235: LD_INT 1
53237: NEG
53238: PUSH
53239: LD_INT 0
53241: PUSH
53242: EMPTY
53243: LIST
53244: LIST
53245: PUSH
53246: LD_INT 1
53248: NEG
53249: PUSH
53250: LD_INT 1
53252: NEG
53253: PUSH
53254: EMPTY
53255: LIST
53256: LIST
53257: PUSH
53258: LD_INT 1
53260: NEG
53261: PUSH
53262: LD_INT 2
53264: NEG
53265: PUSH
53266: EMPTY
53267: LIST
53268: LIST
53269: PUSH
53270: LD_INT 1
53272: PUSH
53273: LD_INT 1
53275: NEG
53276: PUSH
53277: EMPTY
53278: LIST
53279: LIST
53280: PUSH
53281: LD_INT 2
53283: PUSH
53284: LD_INT 0
53286: PUSH
53287: EMPTY
53288: LIST
53289: LIST
53290: PUSH
53291: LD_INT 2
53293: PUSH
53294: LD_INT 1
53296: PUSH
53297: EMPTY
53298: LIST
53299: LIST
53300: PUSH
53301: LD_INT 2
53303: PUSH
53304: LD_INT 2
53306: PUSH
53307: EMPTY
53308: LIST
53309: LIST
53310: PUSH
53311: LD_INT 1
53313: PUSH
53314: LD_INT 2
53316: PUSH
53317: EMPTY
53318: LIST
53319: LIST
53320: PUSH
53321: LD_INT 1
53323: NEG
53324: PUSH
53325: LD_INT 1
53327: PUSH
53328: EMPTY
53329: LIST
53330: LIST
53331: PUSH
53332: LD_INT 2
53334: NEG
53335: PUSH
53336: LD_INT 0
53338: PUSH
53339: EMPTY
53340: LIST
53341: LIST
53342: PUSH
53343: LD_INT 2
53345: NEG
53346: PUSH
53347: LD_INT 1
53349: NEG
53350: PUSH
53351: EMPTY
53352: LIST
53353: LIST
53354: PUSH
53355: LD_INT 2
53357: NEG
53358: PUSH
53359: LD_INT 2
53361: NEG
53362: PUSH
53363: EMPTY
53364: LIST
53365: LIST
53366: PUSH
53367: LD_INT 2
53369: NEG
53370: PUSH
53371: LD_INT 3
53373: NEG
53374: PUSH
53375: EMPTY
53376: LIST
53377: LIST
53378: PUSH
53379: LD_INT 2
53381: PUSH
53382: LD_INT 1
53384: NEG
53385: PUSH
53386: EMPTY
53387: LIST
53388: LIST
53389: PUSH
53390: LD_INT 3
53392: PUSH
53393: LD_INT 0
53395: PUSH
53396: EMPTY
53397: LIST
53398: LIST
53399: PUSH
53400: LD_INT 3
53402: PUSH
53403: LD_INT 1
53405: PUSH
53406: EMPTY
53407: LIST
53408: LIST
53409: PUSH
53410: LD_INT 3
53412: PUSH
53413: LD_INT 2
53415: PUSH
53416: EMPTY
53417: LIST
53418: LIST
53419: PUSH
53420: LD_INT 3
53422: PUSH
53423: LD_INT 3
53425: PUSH
53426: EMPTY
53427: LIST
53428: LIST
53429: PUSH
53430: LD_INT 2
53432: PUSH
53433: LD_INT 3
53435: PUSH
53436: EMPTY
53437: LIST
53438: LIST
53439: PUSH
53440: LD_INT 2
53442: NEG
53443: PUSH
53444: LD_INT 1
53446: PUSH
53447: EMPTY
53448: LIST
53449: LIST
53450: PUSH
53451: LD_INT 3
53453: NEG
53454: PUSH
53455: LD_INT 0
53457: PUSH
53458: EMPTY
53459: LIST
53460: LIST
53461: PUSH
53462: LD_INT 3
53464: NEG
53465: PUSH
53466: LD_INT 1
53468: NEG
53469: PUSH
53470: EMPTY
53471: LIST
53472: LIST
53473: PUSH
53474: LD_INT 3
53476: NEG
53477: PUSH
53478: LD_INT 2
53480: NEG
53481: PUSH
53482: EMPTY
53483: LIST
53484: LIST
53485: PUSH
53486: LD_INT 3
53488: NEG
53489: PUSH
53490: LD_INT 3
53492: NEG
53493: PUSH
53494: EMPTY
53495: LIST
53496: LIST
53497: PUSH
53498: EMPTY
53499: LIST
53500: LIST
53501: LIST
53502: LIST
53503: LIST
53504: LIST
53505: LIST
53506: LIST
53507: LIST
53508: LIST
53509: LIST
53510: LIST
53511: LIST
53512: LIST
53513: LIST
53514: LIST
53515: LIST
53516: LIST
53517: LIST
53518: LIST
53519: LIST
53520: LIST
53521: LIST
53522: LIST
53523: LIST
53524: LIST
53525: LIST
53526: LIST
53527: LIST
53528: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53529: LD_ADDR_VAR 0 45
53533: PUSH
53534: LD_INT 0
53536: PUSH
53537: LD_INT 0
53539: PUSH
53540: EMPTY
53541: LIST
53542: LIST
53543: PUSH
53544: LD_INT 0
53546: PUSH
53547: LD_INT 1
53549: NEG
53550: PUSH
53551: EMPTY
53552: LIST
53553: LIST
53554: PUSH
53555: LD_INT 1
53557: PUSH
53558: LD_INT 0
53560: PUSH
53561: EMPTY
53562: LIST
53563: LIST
53564: PUSH
53565: LD_INT 1
53567: PUSH
53568: LD_INT 1
53570: PUSH
53571: EMPTY
53572: LIST
53573: LIST
53574: PUSH
53575: LD_INT 0
53577: PUSH
53578: LD_INT 1
53580: PUSH
53581: EMPTY
53582: LIST
53583: LIST
53584: PUSH
53585: LD_INT 1
53587: NEG
53588: PUSH
53589: LD_INT 0
53591: PUSH
53592: EMPTY
53593: LIST
53594: LIST
53595: PUSH
53596: LD_INT 1
53598: NEG
53599: PUSH
53600: LD_INT 1
53602: NEG
53603: PUSH
53604: EMPTY
53605: LIST
53606: LIST
53607: PUSH
53608: LD_INT 1
53610: NEG
53611: PUSH
53612: LD_INT 2
53614: NEG
53615: PUSH
53616: EMPTY
53617: LIST
53618: LIST
53619: PUSH
53620: LD_INT 0
53622: PUSH
53623: LD_INT 2
53625: NEG
53626: PUSH
53627: EMPTY
53628: LIST
53629: LIST
53630: PUSH
53631: LD_INT 1
53633: PUSH
53634: LD_INT 1
53636: NEG
53637: PUSH
53638: EMPTY
53639: LIST
53640: LIST
53641: PUSH
53642: LD_INT 2
53644: PUSH
53645: LD_INT 1
53647: PUSH
53648: EMPTY
53649: LIST
53650: LIST
53651: PUSH
53652: LD_INT 2
53654: PUSH
53655: LD_INT 2
53657: PUSH
53658: EMPTY
53659: LIST
53660: LIST
53661: PUSH
53662: LD_INT 1
53664: PUSH
53665: LD_INT 2
53667: PUSH
53668: EMPTY
53669: LIST
53670: LIST
53671: PUSH
53672: LD_INT 0
53674: PUSH
53675: LD_INT 2
53677: PUSH
53678: EMPTY
53679: LIST
53680: LIST
53681: PUSH
53682: LD_INT 1
53684: NEG
53685: PUSH
53686: LD_INT 1
53688: PUSH
53689: EMPTY
53690: LIST
53691: LIST
53692: PUSH
53693: LD_INT 2
53695: NEG
53696: PUSH
53697: LD_INT 1
53699: NEG
53700: PUSH
53701: EMPTY
53702: LIST
53703: LIST
53704: PUSH
53705: LD_INT 2
53707: NEG
53708: PUSH
53709: LD_INT 2
53711: NEG
53712: PUSH
53713: EMPTY
53714: LIST
53715: LIST
53716: PUSH
53717: LD_INT 2
53719: NEG
53720: PUSH
53721: LD_INT 3
53723: NEG
53724: PUSH
53725: EMPTY
53726: LIST
53727: LIST
53728: PUSH
53729: LD_INT 1
53731: NEG
53732: PUSH
53733: LD_INT 3
53735: NEG
53736: PUSH
53737: EMPTY
53738: LIST
53739: LIST
53740: PUSH
53741: LD_INT 0
53743: PUSH
53744: LD_INT 3
53746: NEG
53747: PUSH
53748: EMPTY
53749: LIST
53750: LIST
53751: PUSH
53752: LD_INT 1
53754: PUSH
53755: LD_INT 2
53757: NEG
53758: PUSH
53759: EMPTY
53760: LIST
53761: LIST
53762: PUSH
53763: LD_INT 3
53765: PUSH
53766: LD_INT 2
53768: PUSH
53769: EMPTY
53770: LIST
53771: LIST
53772: PUSH
53773: LD_INT 3
53775: PUSH
53776: LD_INT 3
53778: PUSH
53779: EMPTY
53780: LIST
53781: LIST
53782: PUSH
53783: LD_INT 2
53785: PUSH
53786: LD_INT 3
53788: PUSH
53789: EMPTY
53790: LIST
53791: LIST
53792: PUSH
53793: LD_INT 1
53795: PUSH
53796: LD_INT 3
53798: PUSH
53799: EMPTY
53800: LIST
53801: LIST
53802: PUSH
53803: LD_INT 0
53805: PUSH
53806: LD_INT 3
53808: PUSH
53809: EMPTY
53810: LIST
53811: LIST
53812: PUSH
53813: LD_INT 1
53815: NEG
53816: PUSH
53817: LD_INT 2
53819: PUSH
53820: EMPTY
53821: LIST
53822: LIST
53823: PUSH
53824: LD_INT 3
53826: NEG
53827: PUSH
53828: LD_INT 2
53830: NEG
53831: PUSH
53832: EMPTY
53833: LIST
53834: LIST
53835: PUSH
53836: LD_INT 3
53838: NEG
53839: PUSH
53840: LD_INT 3
53842: NEG
53843: PUSH
53844: EMPTY
53845: LIST
53846: LIST
53847: PUSH
53848: EMPTY
53849: LIST
53850: LIST
53851: LIST
53852: LIST
53853: LIST
53854: LIST
53855: LIST
53856: LIST
53857: LIST
53858: LIST
53859: LIST
53860: LIST
53861: LIST
53862: LIST
53863: LIST
53864: LIST
53865: LIST
53866: LIST
53867: LIST
53868: LIST
53869: LIST
53870: LIST
53871: LIST
53872: LIST
53873: LIST
53874: LIST
53875: LIST
53876: LIST
53877: LIST
53878: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53879: LD_ADDR_VAR 0 46
53883: PUSH
53884: LD_INT 0
53886: PUSH
53887: LD_INT 0
53889: PUSH
53890: EMPTY
53891: LIST
53892: LIST
53893: PUSH
53894: LD_INT 0
53896: PUSH
53897: LD_INT 1
53899: NEG
53900: PUSH
53901: EMPTY
53902: LIST
53903: LIST
53904: PUSH
53905: LD_INT 1
53907: PUSH
53908: LD_INT 0
53910: PUSH
53911: EMPTY
53912: LIST
53913: LIST
53914: PUSH
53915: LD_INT 1
53917: PUSH
53918: LD_INT 1
53920: PUSH
53921: EMPTY
53922: LIST
53923: LIST
53924: PUSH
53925: LD_INT 0
53927: PUSH
53928: LD_INT 1
53930: PUSH
53931: EMPTY
53932: LIST
53933: LIST
53934: PUSH
53935: LD_INT 1
53937: NEG
53938: PUSH
53939: LD_INT 0
53941: PUSH
53942: EMPTY
53943: LIST
53944: LIST
53945: PUSH
53946: LD_INT 1
53948: NEG
53949: PUSH
53950: LD_INT 1
53952: NEG
53953: PUSH
53954: EMPTY
53955: LIST
53956: LIST
53957: PUSH
53958: LD_INT 1
53960: NEG
53961: PUSH
53962: LD_INT 2
53964: NEG
53965: PUSH
53966: EMPTY
53967: LIST
53968: LIST
53969: PUSH
53970: LD_INT 0
53972: PUSH
53973: LD_INT 2
53975: NEG
53976: PUSH
53977: EMPTY
53978: LIST
53979: LIST
53980: PUSH
53981: LD_INT 1
53983: PUSH
53984: LD_INT 1
53986: NEG
53987: PUSH
53988: EMPTY
53989: LIST
53990: LIST
53991: PUSH
53992: LD_INT 2
53994: PUSH
53995: LD_INT 0
53997: PUSH
53998: EMPTY
53999: LIST
54000: LIST
54001: PUSH
54002: LD_INT 2
54004: PUSH
54005: LD_INT 1
54007: PUSH
54008: EMPTY
54009: LIST
54010: LIST
54011: PUSH
54012: LD_INT 1
54014: PUSH
54015: LD_INT 2
54017: PUSH
54018: EMPTY
54019: LIST
54020: LIST
54021: PUSH
54022: LD_INT 0
54024: PUSH
54025: LD_INT 2
54027: PUSH
54028: EMPTY
54029: LIST
54030: LIST
54031: PUSH
54032: LD_INT 1
54034: NEG
54035: PUSH
54036: LD_INT 1
54038: PUSH
54039: EMPTY
54040: LIST
54041: LIST
54042: PUSH
54043: LD_INT 2
54045: NEG
54046: PUSH
54047: LD_INT 0
54049: PUSH
54050: EMPTY
54051: LIST
54052: LIST
54053: PUSH
54054: LD_INT 2
54056: NEG
54057: PUSH
54058: LD_INT 1
54060: NEG
54061: PUSH
54062: EMPTY
54063: LIST
54064: LIST
54065: PUSH
54066: LD_INT 1
54068: NEG
54069: PUSH
54070: LD_INT 3
54072: NEG
54073: PUSH
54074: EMPTY
54075: LIST
54076: LIST
54077: PUSH
54078: LD_INT 0
54080: PUSH
54081: LD_INT 3
54083: NEG
54084: PUSH
54085: EMPTY
54086: LIST
54087: LIST
54088: PUSH
54089: LD_INT 1
54091: PUSH
54092: LD_INT 2
54094: NEG
54095: PUSH
54096: EMPTY
54097: LIST
54098: LIST
54099: PUSH
54100: LD_INT 2
54102: PUSH
54103: LD_INT 1
54105: NEG
54106: PUSH
54107: EMPTY
54108: LIST
54109: LIST
54110: PUSH
54111: LD_INT 3
54113: PUSH
54114: LD_INT 0
54116: PUSH
54117: EMPTY
54118: LIST
54119: LIST
54120: PUSH
54121: LD_INT 3
54123: PUSH
54124: LD_INT 1
54126: PUSH
54127: EMPTY
54128: LIST
54129: LIST
54130: PUSH
54131: LD_INT 1
54133: PUSH
54134: LD_INT 3
54136: PUSH
54137: EMPTY
54138: LIST
54139: LIST
54140: PUSH
54141: LD_INT 0
54143: PUSH
54144: LD_INT 3
54146: PUSH
54147: EMPTY
54148: LIST
54149: LIST
54150: PUSH
54151: LD_INT 1
54153: NEG
54154: PUSH
54155: LD_INT 2
54157: PUSH
54158: EMPTY
54159: LIST
54160: LIST
54161: PUSH
54162: LD_INT 2
54164: NEG
54165: PUSH
54166: LD_INT 1
54168: PUSH
54169: EMPTY
54170: LIST
54171: LIST
54172: PUSH
54173: LD_INT 3
54175: NEG
54176: PUSH
54177: LD_INT 0
54179: PUSH
54180: EMPTY
54181: LIST
54182: LIST
54183: PUSH
54184: LD_INT 3
54186: NEG
54187: PUSH
54188: LD_INT 1
54190: NEG
54191: PUSH
54192: EMPTY
54193: LIST
54194: LIST
54195: PUSH
54196: EMPTY
54197: LIST
54198: LIST
54199: LIST
54200: LIST
54201: LIST
54202: LIST
54203: LIST
54204: LIST
54205: LIST
54206: LIST
54207: LIST
54208: LIST
54209: LIST
54210: LIST
54211: LIST
54212: LIST
54213: LIST
54214: LIST
54215: LIST
54216: LIST
54217: LIST
54218: LIST
54219: LIST
54220: LIST
54221: LIST
54222: LIST
54223: LIST
54224: LIST
54225: LIST
54226: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54227: LD_ADDR_VAR 0 47
54231: PUSH
54232: LD_INT 0
54234: PUSH
54235: LD_INT 0
54237: PUSH
54238: EMPTY
54239: LIST
54240: LIST
54241: PUSH
54242: LD_INT 0
54244: PUSH
54245: LD_INT 1
54247: NEG
54248: PUSH
54249: EMPTY
54250: LIST
54251: LIST
54252: PUSH
54253: LD_INT 1
54255: PUSH
54256: LD_INT 0
54258: PUSH
54259: EMPTY
54260: LIST
54261: LIST
54262: PUSH
54263: LD_INT 1
54265: PUSH
54266: LD_INT 1
54268: PUSH
54269: EMPTY
54270: LIST
54271: LIST
54272: PUSH
54273: LD_INT 0
54275: PUSH
54276: LD_INT 1
54278: PUSH
54279: EMPTY
54280: LIST
54281: LIST
54282: PUSH
54283: LD_INT 1
54285: NEG
54286: PUSH
54287: LD_INT 0
54289: PUSH
54290: EMPTY
54291: LIST
54292: LIST
54293: PUSH
54294: LD_INT 1
54296: NEG
54297: PUSH
54298: LD_INT 1
54300: NEG
54301: PUSH
54302: EMPTY
54303: LIST
54304: LIST
54305: PUSH
54306: LD_INT 1
54308: NEG
54309: PUSH
54310: LD_INT 2
54312: NEG
54313: PUSH
54314: EMPTY
54315: LIST
54316: LIST
54317: PUSH
54318: LD_INT 0
54320: PUSH
54321: LD_INT 2
54323: NEG
54324: PUSH
54325: EMPTY
54326: LIST
54327: LIST
54328: PUSH
54329: LD_INT 1
54331: PUSH
54332: LD_INT 1
54334: NEG
54335: PUSH
54336: EMPTY
54337: LIST
54338: LIST
54339: PUSH
54340: LD_INT 2
54342: NEG
54343: PUSH
54344: LD_INT 1
54346: NEG
54347: PUSH
54348: EMPTY
54349: LIST
54350: LIST
54351: PUSH
54352: LD_INT 2
54354: NEG
54355: PUSH
54356: LD_INT 2
54358: NEG
54359: PUSH
54360: EMPTY
54361: LIST
54362: LIST
54363: PUSH
54364: EMPTY
54365: LIST
54366: LIST
54367: LIST
54368: LIST
54369: LIST
54370: LIST
54371: LIST
54372: LIST
54373: LIST
54374: LIST
54375: LIST
54376: LIST
54377: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
54378: LD_ADDR_VAR 0 48
54382: PUSH
54383: LD_INT 0
54385: PUSH
54386: LD_INT 0
54388: PUSH
54389: EMPTY
54390: LIST
54391: LIST
54392: PUSH
54393: LD_INT 0
54395: PUSH
54396: LD_INT 1
54398: NEG
54399: PUSH
54400: EMPTY
54401: LIST
54402: LIST
54403: PUSH
54404: LD_INT 1
54406: PUSH
54407: LD_INT 0
54409: PUSH
54410: EMPTY
54411: LIST
54412: LIST
54413: PUSH
54414: LD_INT 1
54416: PUSH
54417: LD_INT 1
54419: PUSH
54420: EMPTY
54421: LIST
54422: LIST
54423: PUSH
54424: LD_INT 0
54426: PUSH
54427: LD_INT 1
54429: PUSH
54430: EMPTY
54431: LIST
54432: LIST
54433: PUSH
54434: LD_INT 1
54436: NEG
54437: PUSH
54438: LD_INT 0
54440: PUSH
54441: EMPTY
54442: LIST
54443: LIST
54444: PUSH
54445: LD_INT 1
54447: NEG
54448: PUSH
54449: LD_INT 1
54451: NEG
54452: PUSH
54453: EMPTY
54454: LIST
54455: LIST
54456: PUSH
54457: LD_INT 1
54459: NEG
54460: PUSH
54461: LD_INT 2
54463: NEG
54464: PUSH
54465: EMPTY
54466: LIST
54467: LIST
54468: PUSH
54469: LD_INT 0
54471: PUSH
54472: LD_INT 2
54474: NEG
54475: PUSH
54476: EMPTY
54477: LIST
54478: LIST
54479: PUSH
54480: LD_INT 1
54482: PUSH
54483: LD_INT 1
54485: NEG
54486: PUSH
54487: EMPTY
54488: LIST
54489: LIST
54490: PUSH
54491: LD_INT 2
54493: PUSH
54494: LD_INT 0
54496: PUSH
54497: EMPTY
54498: LIST
54499: LIST
54500: PUSH
54501: LD_INT 2
54503: PUSH
54504: LD_INT 1
54506: PUSH
54507: EMPTY
54508: LIST
54509: LIST
54510: PUSH
54511: EMPTY
54512: LIST
54513: LIST
54514: LIST
54515: LIST
54516: LIST
54517: LIST
54518: LIST
54519: LIST
54520: LIST
54521: LIST
54522: LIST
54523: LIST
54524: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
54525: LD_ADDR_VAR 0 49
54529: PUSH
54530: LD_INT 0
54532: PUSH
54533: LD_INT 0
54535: PUSH
54536: EMPTY
54537: LIST
54538: LIST
54539: PUSH
54540: LD_INT 0
54542: PUSH
54543: LD_INT 1
54545: NEG
54546: PUSH
54547: EMPTY
54548: LIST
54549: LIST
54550: PUSH
54551: LD_INT 1
54553: PUSH
54554: LD_INT 0
54556: PUSH
54557: EMPTY
54558: LIST
54559: LIST
54560: PUSH
54561: LD_INT 1
54563: PUSH
54564: LD_INT 1
54566: PUSH
54567: EMPTY
54568: LIST
54569: LIST
54570: PUSH
54571: LD_INT 0
54573: PUSH
54574: LD_INT 1
54576: PUSH
54577: EMPTY
54578: LIST
54579: LIST
54580: PUSH
54581: LD_INT 1
54583: NEG
54584: PUSH
54585: LD_INT 0
54587: PUSH
54588: EMPTY
54589: LIST
54590: LIST
54591: PUSH
54592: LD_INT 1
54594: NEG
54595: PUSH
54596: LD_INT 1
54598: NEG
54599: PUSH
54600: EMPTY
54601: LIST
54602: LIST
54603: PUSH
54604: LD_INT 1
54606: PUSH
54607: LD_INT 1
54609: NEG
54610: PUSH
54611: EMPTY
54612: LIST
54613: LIST
54614: PUSH
54615: LD_INT 2
54617: PUSH
54618: LD_INT 0
54620: PUSH
54621: EMPTY
54622: LIST
54623: LIST
54624: PUSH
54625: LD_INT 2
54627: PUSH
54628: LD_INT 1
54630: PUSH
54631: EMPTY
54632: LIST
54633: LIST
54634: PUSH
54635: LD_INT 2
54637: PUSH
54638: LD_INT 2
54640: PUSH
54641: EMPTY
54642: LIST
54643: LIST
54644: PUSH
54645: LD_INT 1
54647: PUSH
54648: LD_INT 2
54650: PUSH
54651: EMPTY
54652: LIST
54653: LIST
54654: PUSH
54655: EMPTY
54656: LIST
54657: LIST
54658: LIST
54659: LIST
54660: LIST
54661: LIST
54662: LIST
54663: LIST
54664: LIST
54665: LIST
54666: LIST
54667: LIST
54668: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
54669: LD_ADDR_VAR 0 50
54673: PUSH
54674: LD_INT 0
54676: PUSH
54677: LD_INT 0
54679: PUSH
54680: EMPTY
54681: LIST
54682: LIST
54683: PUSH
54684: LD_INT 0
54686: PUSH
54687: LD_INT 1
54689: NEG
54690: PUSH
54691: EMPTY
54692: LIST
54693: LIST
54694: PUSH
54695: LD_INT 1
54697: PUSH
54698: LD_INT 0
54700: PUSH
54701: EMPTY
54702: LIST
54703: LIST
54704: PUSH
54705: LD_INT 1
54707: PUSH
54708: LD_INT 1
54710: PUSH
54711: EMPTY
54712: LIST
54713: LIST
54714: PUSH
54715: LD_INT 0
54717: PUSH
54718: LD_INT 1
54720: PUSH
54721: EMPTY
54722: LIST
54723: LIST
54724: PUSH
54725: LD_INT 1
54727: NEG
54728: PUSH
54729: LD_INT 0
54731: PUSH
54732: EMPTY
54733: LIST
54734: LIST
54735: PUSH
54736: LD_INT 1
54738: NEG
54739: PUSH
54740: LD_INT 1
54742: NEG
54743: PUSH
54744: EMPTY
54745: LIST
54746: LIST
54747: PUSH
54748: LD_INT 2
54750: PUSH
54751: LD_INT 1
54753: PUSH
54754: EMPTY
54755: LIST
54756: LIST
54757: PUSH
54758: LD_INT 2
54760: PUSH
54761: LD_INT 2
54763: PUSH
54764: EMPTY
54765: LIST
54766: LIST
54767: PUSH
54768: LD_INT 1
54770: PUSH
54771: LD_INT 2
54773: PUSH
54774: EMPTY
54775: LIST
54776: LIST
54777: PUSH
54778: LD_INT 0
54780: PUSH
54781: LD_INT 2
54783: PUSH
54784: EMPTY
54785: LIST
54786: LIST
54787: PUSH
54788: LD_INT 1
54790: NEG
54791: PUSH
54792: LD_INT 1
54794: PUSH
54795: EMPTY
54796: LIST
54797: LIST
54798: PUSH
54799: EMPTY
54800: LIST
54801: LIST
54802: LIST
54803: LIST
54804: LIST
54805: LIST
54806: LIST
54807: LIST
54808: LIST
54809: LIST
54810: LIST
54811: LIST
54812: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
54813: LD_ADDR_VAR 0 51
54817: PUSH
54818: LD_INT 0
54820: PUSH
54821: LD_INT 0
54823: PUSH
54824: EMPTY
54825: LIST
54826: LIST
54827: PUSH
54828: LD_INT 0
54830: PUSH
54831: LD_INT 1
54833: NEG
54834: PUSH
54835: EMPTY
54836: LIST
54837: LIST
54838: PUSH
54839: LD_INT 1
54841: PUSH
54842: LD_INT 0
54844: PUSH
54845: EMPTY
54846: LIST
54847: LIST
54848: PUSH
54849: LD_INT 1
54851: PUSH
54852: LD_INT 1
54854: PUSH
54855: EMPTY
54856: LIST
54857: LIST
54858: PUSH
54859: LD_INT 0
54861: PUSH
54862: LD_INT 1
54864: PUSH
54865: EMPTY
54866: LIST
54867: LIST
54868: PUSH
54869: LD_INT 1
54871: NEG
54872: PUSH
54873: LD_INT 0
54875: PUSH
54876: EMPTY
54877: LIST
54878: LIST
54879: PUSH
54880: LD_INT 1
54882: NEG
54883: PUSH
54884: LD_INT 1
54886: NEG
54887: PUSH
54888: EMPTY
54889: LIST
54890: LIST
54891: PUSH
54892: LD_INT 1
54894: PUSH
54895: LD_INT 2
54897: PUSH
54898: EMPTY
54899: LIST
54900: LIST
54901: PUSH
54902: LD_INT 0
54904: PUSH
54905: LD_INT 2
54907: PUSH
54908: EMPTY
54909: LIST
54910: LIST
54911: PUSH
54912: LD_INT 1
54914: NEG
54915: PUSH
54916: LD_INT 1
54918: PUSH
54919: EMPTY
54920: LIST
54921: LIST
54922: PUSH
54923: LD_INT 2
54925: NEG
54926: PUSH
54927: LD_INT 0
54929: PUSH
54930: EMPTY
54931: LIST
54932: LIST
54933: PUSH
54934: LD_INT 2
54936: NEG
54937: PUSH
54938: LD_INT 1
54940: NEG
54941: PUSH
54942: EMPTY
54943: LIST
54944: LIST
54945: PUSH
54946: EMPTY
54947: LIST
54948: LIST
54949: LIST
54950: LIST
54951: LIST
54952: LIST
54953: LIST
54954: LIST
54955: LIST
54956: LIST
54957: LIST
54958: LIST
54959: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54960: LD_ADDR_VAR 0 52
54964: PUSH
54965: LD_INT 0
54967: PUSH
54968: LD_INT 0
54970: PUSH
54971: EMPTY
54972: LIST
54973: LIST
54974: PUSH
54975: LD_INT 0
54977: PUSH
54978: LD_INT 1
54980: NEG
54981: PUSH
54982: EMPTY
54983: LIST
54984: LIST
54985: PUSH
54986: LD_INT 1
54988: PUSH
54989: LD_INT 0
54991: PUSH
54992: EMPTY
54993: LIST
54994: LIST
54995: PUSH
54996: LD_INT 1
54998: PUSH
54999: LD_INT 1
55001: PUSH
55002: EMPTY
55003: LIST
55004: LIST
55005: PUSH
55006: LD_INT 0
55008: PUSH
55009: LD_INT 1
55011: PUSH
55012: EMPTY
55013: LIST
55014: LIST
55015: PUSH
55016: LD_INT 1
55018: NEG
55019: PUSH
55020: LD_INT 0
55022: PUSH
55023: EMPTY
55024: LIST
55025: LIST
55026: PUSH
55027: LD_INT 1
55029: NEG
55030: PUSH
55031: LD_INT 1
55033: NEG
55034: PUSH
55035: EMPTY
55036: LIST
55037: LIST
55038: PUSH
55039: LD_INT 1
55041: NEG
55042: PUSH
55043: LD_INT 2
55045: NEG
55046: PUSH
55047: EMPTY
55048: LIST
55049: LIST
55050: PUSH
55051: LD_INT 1
55053: NEG
55054: PUSH
55055: LD_INT 1
55057: PUSH
55058: EMPTY
55059: LIST
55060: LIST
55061: PUSH
55062: LD_INT 2
55064: NEG
55065: PUSH
55066: LD_INT 0
55068: PUSH
55069: EMPTY
55070: LIST
55071: LIST
55072: PUSH
55073: LD_INT 2
55075: NEG
55076: PUSH
55077: LD_INT 1
55079: NEG
55080: PUSH
55081: EMPTY
55082: LIST
55083: LIST
55084: PUSH
55085: LD_INT 2
55087: NEG
55088: PUSH
55089: LD_INT 2
55091: NEG
55092: PUSH
55093: EMPTY
55094: LIST
55095: LIST
55096: PUSH
55097: EMPTY
55098: LIST
55099: LIST
55100: LIST
55101: LIST
55102: LIST
55103: LIST
55104: LIST
55105: LIST
55106: LIST
55107: LIST
55108: LIST
55109: LIST
55110: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55111: LD_ADDR_VAR 0 53
55115: PUSH
55116: LD_INT 0
55118: PUSH
55119: LD_INT 0
55121: PUSH
55122: EMPTY
55123: LIST
55124: LIST
55125: PUSH
55126: LD_INT 0
55128: PUSH
55129: LD_INT 1
55131: NEG
55132: PUSH
55133: EMPTY
55134: LIST
55135: LIST
55136: PUSH
55137: LD_INT 1
55139: PUSH
55140: LD_INT 0
55142: PUSH
55143: EMPTY
55144: LIST
55145: LIST
55146: PUSH
55147: LD_INT 1
55149: PUSH
55150: LD_INT 1
55152: PUSH
55153: EMPTY
55154: LIST
55155: LIST
55156: PUSH
55157: LD_INT 0
55159: PUSH
55160: LD_INT 1
55162: PUSH
55163: EMPTY
55164: LIST
55165: LIST
55166: PUSH
55167: LD_INT 1
55169: NEG
55170: PUSH
55171: LD_INT 0
55173: PUSH
55174: EMPTY
55175: LIST
55176: LIST
55177: PUSH
55178: LD_INT 1
55180: NEG
55181: PUSH
55182: LD_INT 1
55184: NEG
55185: PUSH
55186: EMPTY
55187: LIST
55188: LIST
55189: PUSH
55190: LD_INT 1
55192: NEG
55193: PUSH
55194: LD_INT 2
55196: NEG
55197: PUSH
55198: EMPTY
55199: LIST
55200: LIST
55201: PUSH
55202: LD_INT 0
55204: PUSH
55205: LD_INT 2
55207: NEG
55208: PUSH
55209: EMPTY
55210: LIST
55211: LIST
55212: PUSH
55213: LD_INT 1
55215: PUSH
55216: LD_INT 1
55218: NEG
55219: PUSH
55220: EMPTY
55221: LIST
55222: LIST
55223: PUSH
55224: LD_INT 2
55226: PUSH
55227: LD_INT 0
55229: PUSH
55230: EMPTY
55231: LIST
55232: LIST
55233: PUSH
55234: LD_INT 2
55236: PUSH
55237: LD_INT 1
55239: PUSH
55240: EMPTY
55241: LIST
55242: LIST
55243: PUSH
55244: LD_INT 2
55246: PUSH
55247: LD_INT 2
55249: PUSH
55250: EMPTY
55251: LIST
55252: LIST
55253: PUSH
55254: LD_INT 1
55256: PUSH
55257: LD_INT 2
55259: PUSH
55260: EMPTY
55261: LIST
55262: LIST
55263: PUSH
55264: LD_INT 0
55266: PUSH
55267: LD_INT 2
55269: PUSH
55270: EMPTY
55271: LIST
55272: LIST
55273: PUSH
55274: LD_INT 1
55276: NEG
55277: PUSH
55278: LD_INT 1
55280: PUSH
55281: EMPTY
55282: LIST
55283: LIST
55284: PUSH
55285: LD_INT 2
55287: NEG
55288: PUSH
55289: LD_INT 0
55291: PUSH
55292: EMPTY
55293: LIST
55294: LIST
55295: PUSH
55296: LD_INT 2
55298: NEG
55299: PUSH
55300: LD_INT 1
55302: NEG
55303: PUSH
55304: EMPTY
55305: LIST
55306: LIST
55307: PUSH
55308: LD_INT 2
55310: NEG
55311: PUSH
55312: LD_INT 2
55314: NEG
55315: PUSH
55316: EMPTY
55317: LIST
55318: LIST
55319: PUSH
55320: EMPTY
55321: LIST
55322: LIST
55323: LIST
55324: LIST
55325: LIST
55326: LIST
55327: LIST
55328: LIST
55329: LIST
55330: LIST
55331: LIST
55332: LIST
55333: LIST
55334: LIST
55335: LIST
55336: LIST
55337: LIST
55338: LIST
55339: LIST
55340: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55341: LD_ADDR_VAR 0 54
55345: PUSH
55346: LD_INT 0
55348: PUSH
55349: LD_INT 0
55351: PUSH
55352: EMPTY
55353: LIST
55354: LIST
55355: PUSH
55356: LD_INT 0
55358: PUSH
55359: LD_INT 1
55361: NEG
55362: PUSH
55363: EMPTY
55364: LIST
55365: LIST
55366: PUSH
55367: LD_INT 1
55369: PUSH
55370: LD_INT 0
55372: PUSH
55373: EMPTY
55374: LIST
55375: LIST
55376: PUSH
55377: LD_INT 1
55379: PUSH
55380: LD_INT 1
55382: PUSH
55383: EMPTY
55384: LIST
55385: LIST
55386: PUSH
55387: LD_INT 0
55389: PUSH
55390: LD_INT 1
55392: PUSH
55393: EMPTY
55394: LIST
55395: LIST
55396: PUSH
55397: LD_INT 1
55399: NEG
55400: PUSH
55401: LD_INT 0
55403: PUSH
55404: EMPTY
55405: LIST
55406: LIST
55407: PUSH
55408: LD_INT 1
55410: NEG
55411: PUSH
55412: LD_INT 1
55414: NEG
55415: PUSH
55416: EMPTY
55417: LIST
55418: LIST
55419: PUSH
55420: LD_INT 1
55422: NEG
55423: PUSH
55424: LD_INT 2
55426: NEG
55427: PUSH
55428: EMPTY
55429: LIST
55430: LIST
55431: PUSH
55432: LD_INT 0
55434: PUSH
55435: LD_INT 2
55437: NEG
55438: PUSH
55439: EMPTY
55440: LIST
55441: LIST
55442: PUSH
55443: LD_INT 1
55445: PUSH
55446: LD_INT 1
55448: NEG
55449: PUSH
55450: EMPTY
55451: LIST
55452: LIST
55453: PUSH
55454: LD_INT 2
55456: PUSH
55457: LD_INT 0
55459: PUSH
55460: EMPTY
55461: LIST
55462: LIST
55463: PUSH
55464: LD_INT 2
55466: PUSH
55467: LD_INT 1
55469: PUSH
55470: EMPTY
55471: LIST
55472: LIST
55473: PUSH
55474: LD_INT 2
55476: PUSH
55477: LD_INT 2
55479: PUSH
55480: EMPTY
55481: LIST
55482: LIST
55483: PUSH
55484: LD_INT 1
55486: PUSH
55487: LD_INT 2
55489: PUSH
55490: EMPTY
55491: LIST
55492: LIST
55493: PUSH
55494: LD_INT 0
55496: PUSH
55497: LD_INT 2
55499: PUSH
55500: EMPTY
55501: LIST
55502: LIST
55503: PUSH
55504: LD_INT 1
55506: NEG
55507: PUSH
55508: LD_INT 1
55510: PUSH
55511: EMPTY
55512: LIST
55513: LIST
55514: PUSH
55515: LD_INT 2
55517: NEG
55518: PUSH
55519: LD_INT 0
55521: PUSH
55522: EMPTY
55523: LIST
55524: LIST
55525: PUSH
55526: LD_INT 2
55528: NEG
55529: PUSH
55530: LD_INT 1
55532: NEG
55533: PUSH
55534: EMPTY
55535: LIST
55536: LIST
55537: PUSH
55538: LD_INT 2
55540: NEG
55541: PUSH
55542: LD_INT 2
55544: NEG
55545: PUSH
55546: EMPTY
55547: LIST
55548: LIST
55549: PUSH
55550: EMPTY
55551: LIST
55552: LIST
55553: LIST
55554: LIST
55555: LIST
55556: LIST
55557: LIST
55558: LIST
55559: LIST
55560: LIST
55561: LIST
55562: LIST
55563: LIST
55564: LIST
55565: LIST
55566: LIST
55567: LIST
55568: LIST
55569: LIST
55570: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55571: LD_ADDR_VAR 0 55
55575: PUSH
55576: LD_INT 0
55578: PUSH
55579: LD_INT 0
55581: PUSH
55582: EMPTY
55583: LIST
55584: LIST
55585: PUSH
55586: LD_INT 0
55588: PUSH
55589: LD_INT 1
55591: NEG
55592: PUSH
55593: EMPTY
55594: LIST
55595: LIST
55596: PUSH
55597: LD_INT 1
55599: PUSH
55600: LD_INT 0
55602: PUSH
55603: EMPTY
55604: LIST
55605: LIST
55606: PUSH
55607: LD_INT 1
55609: PUSH
55610: LD_INT 1
55612: PUSH
55613: EMPTY
55614: LIST
55615: LIST
55616: PUSH
55617: LD_INT 0
55619: PUSH
55620: LD_INT 1
55622: PUSH
55623: EMPTY
55624: LIST
55625: LIST
55626: PUSH
55627: LD_INT 1
55629: NEG
55630: PUSH
55631: LD_INT 0
55633: PUSH
55634: EMPTY
55635: LIST
55636: LIST
55637: PUSH
55638: LD_INT 1
55640: NEG
55641: PUSH
55642: LD_INT 1
55644: NEG
55645: PUSH
55646: EMPTY
55647: LIST
55648: LIST
55649: PUSH
55650: LD_INT 1
55652: NEG
55653: PUSH
55654: LD_INT 2
55656: NEG
55657: PUSH
55658: EMPTY
55659: LIST
55660: LIST
55661: PUSH
55662: LD_INT 0
55664: PUSH
55665: LD_INT 2
55667: NEG
55668: PUSH
55669: EMPTY
55670: LIST
55671: LIST
55672: PUSH
55673: LD_INT 1
55675: PUSH
55676: LD_INT 1
55678: NEG
55679: PUSH
55680: EMPTY
55681: LIST
55682: LIST
55683: PUSH
55684: LD_INT 2
55686: PUSH
55687: LD_INT 0
55689: PUSH
55690: EMPTY
55691: LIST
55692: LIST
55693: PUSH
55694: LD_INT 2
55696: PUSH
55697: LD_INT 1
55699: PUSH
55700: EMPTY
55701: LIST
55702: LIST
55703: PUSH
55704: LD_INT 2
55706: PUSH
55707: LD_INT 2
55709: PUSH
55710: EMPTY
55711: LIST
55712: LIST
55713: PUSH
55714: LD_INT 1
55716: PUSH
55717: LD_INT 2
55719: PUSH
55720: EMPTY
55721: LIST
55722: LIST
55723: PUSH
55724: LD_INT 0
55726: PUSH
55727: LD_INT 2
55729: PUSH
55730: EMPTY
55731: LIST
55732: LIST
55733: PUSH
55734: LD_INT 1
55736: NEG
55737: PUSH
55738: LD_INT 1
55740: PUSH
55741: EMPTY
55742: LIST
55743: LIST
55744: PUSH
55745: LD_INT 2
55747: NEG
55748: PUSH
55749: LD_INT 0
55751: PUSH
55752: EMPTY
55753: LIST
55754: LIST
55755: PUSH
55756: LD_INT 2
55758: NEG
55759: PUSH
55760: LD_INT 1
55762: NEG
55763: PUSH
55764: EMPTY
55765: LIST
55766: LIST
55767: PUSH
55768: LD_INT 2
55770: NEG
55771: PUSH
55772: LD_INT 2
55774: NEG
55775: PUSH
55776: EMPTY
55777: LIST
55778: LIST
55779: PUSH
55780: EMPTY
55781: LIST
55782: LIST
55783: LIST
55784: LIST
55785: LIST
55786: LIST
55787: LIST
55788: LIST
55789: LIST
55790: LIST
55791: LIST
55792: LIST
55793: LIST
55794: LIST
55795: LIST
55796: LIST
55797: LIST
55798: LIST
55799: LIST
55800: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55801: LD_ADDR_VAR 0 56
55805: PUSH
55806: LD_INT 0
55808: PUSH
55809: LD_INT 0
55811: PUSH
55812: EMPTY
55813: LIST
55814: LIST
55815: PUSH
55816: LD_INT 0
55818: PUSH
55819: LD_INT 1
55821: NEG
55822: PUSH
55823: EMPTY
55824: LIST
55825: LIST
55826: PUSH
55827: LD_INT 1
55829: PUSH
55830: LD_INT 0
55832: PUSH
55833: EMPTY
55834: LIST
55835: LIST
55836: PUSH
55837: LD_INT 1
55839: PUSH
55840: LD_INT 1
55842: PUSH
55843: EMPTY
55844: LIST
55845: LIST
55846: PUSH
55847: LD_INT 0
55849: PUSH
55850: LD_INT 1
55852: PUSH
55853: EMPTY
55854: LIST
55855: LIST
55856: PUSH
55857: LD_INT 1
55859: NEG
55860: PUSH
55861: LD_INT 0
55863: PUSH
55864: EMPTY
55865: LIST
55866: LIST
55867: PUSH
55868: LD_INT 1
55870: NEG
55871: PUSH
55872: LD_INT 1
55874: NEG
55875: PUSH
55876: EMPTY
55877: LIST
55878: LIST
55879: PUSH
55880: LD_INT 1
55882: NEG
55883: PUSH
55884: LD_INT 2
55886: NEG
55887: PUSH
55888: EMPTY
55889: LIST
55890: LIST
55891: PUSH
55892: LD_INT 0
55894: PUSH
55895: LD_INT 2
55897: NEG
55898: PUSH
55899: EMPTY
55900: LIST
55901: LIST
55902: PUSH
55903: LD_INT 1
55905: PUSH
55906: LD_INT 1
55908: NEG
55909: PUSH
55910: EMPTY
55911: LIST
55912: LIST
55913: PUSH
55914: LD_INT 2
55916: PUSH
55917: LD_INT 0
55919: PUSH
55920: EMPTY
55921: LIST
55922: LIST
55923: PUSH
55924: LD_INT 2
55926: PUSH
55927: LD_INT 1
55929: PUSH
55930: EMPTY
55931: LIST
55932: LIST
55933: PUSH
55934: LD_INT 2
55936: PUSH
55937: LD_INT 2
55939: PUSH
55940: EMPTY
55941: LIST
55942: LIST
55943: PUSH
55944: LD_INT 1
55946: PUSH
55947: LD_INT 2
55949: PUSH
55950: EMPTY
55951: LIST
55952: LIST
55953: PUSH
55954: LD_INT 0
55956: PUSH
55957: LD_INT 2
55959: PUSH
55960: EMPTY
55961: LIST
55962: LIST
55963: PUSH
55964: LD_INT 1
55966: NEG
55967: PUSH
55968: LD_INT 1
55970: PUSH
55971: EMPTY
55972: LIST
55973: LIST
55974: PUSH
55975: LD_INT 2
55977: NEG
55978: PUSH
55979: LD_INT 0
55981: PUSH
55982: EMPTY
55983: LIST
55984: LIST
55985: PUSH
55986: LD_INT 2
55988: NEG
55989: PUSH
55990: LD_INT 1
55992: NEG
55993: PUSH
55994: EMPTY
55995: LIST
55996: LIST
55997: PUSH
55998: LD_INT 2
56000: NEG
56001: PUSH
56002: LD_INT 2
56004: NEG
56005: PUSH
56006: EMPTY
56007: LIST
56008: LIST
56009: PUSH
56010: EMPTY
56011: LIST
56012: LIST
56013: LIST
56014: LIST
56015: LIST
56016: LIST
56017: LIST
56018: LIST
56019: LIST
56020: LIST
56021: LIST
56022: LIST
56023: LIST
56024: LIST
56025: LIST
56026: LIST
56027: LIST
56028: LIST
56029: LIST
56030: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56031: LD_ADDR_VAR 0 57
56035: PUSH
56036: LD_INT 0
56038: PUSH
56039: LD_INT 0
56041: PUSH
56042: EMPTY
56043: LIST
56044: LIST
56045: PUSH
56046: LD_INT 0
56048: PUSH
56049: LD_INT 1
56051: NEG
56052: PUSH
56053: EMPTY
56054: LIST
56055: LIST
56056: PUSH
56057: LD_INT 1
56059: PUSH
56060: LD_INT 0
56062: PUSH
56063: EMPTY
56064: LIST
56065: LIST
56066: PUSH
56067: LD_INT 1
56069: PUSH
56070: LD_INT 1
56072: PUSH
56073: EMPTY
56074: LIST
56075: LIST
56076: PUSH
56077: LD_INT 0
56079: PUSH
56080: LD_INT 1
56082: PUSH
56083: EMPTY
56084: LIST
56085: LIST
56086: PUSH
56087: LD_INT 1
56089: NEG
56090: PUSH
56091: LD_INT 0
56093: PUSH
56094: EMPTY
56095: LIST
56096: LIST
56097: PUSH
56098: LD_INT 1
56100: NEG
56101: PUSH
56102: LD_INT 1
56104: NEG
56105: PUSH
56106: EMPTY
56107: LIST
56108: LIST
56109: PUSH
56110: LD_INT 1
56112: NEG
56113: PUSH
56114: LD_INT 2
56116: NEG
56117: PUSH
56118: EMPTY
56119: LIST
56120: LIST
56121: PUSH
56122: LD_INT 0
56124: PUSH
56125: LD_INT 2
56127: NEG
56128: PUSH
56129: EMPTY
56130: LIST
56131: LIST
56132: PUSH
56133: LD_INT 1
56135: PUSH
56136: LD_INT 1
56138: NEG
56139: PUSH
56140: EMPTY
56141: LIST
56142: LIST
56143: PUSH
56144: LD_INT 2
56146: PUSH
56147: LD_INT 0
56149: PUSH
56150: EMPTY
56151: LIST
56152: LIST
56153: PUSH
56154: LD_INT 2
56156: PUSH
56157: LD_INT 1
56159: PUSH
56160: EMPTY
56161: LIST
56162: LIST
56163: PUSH
56164: LD_INT 2
56166: PUSH
56167: LD_INT 2
56169: PUSH
56170: EMPTY
56171: LIST
56172: LIST
56173: PUSH
56174: LD_INT 1
56176: PUSH
56177: LD_INT 2
56179: PUSH
56180: EMPTY
56181: LIST
56182: LIST
56183: PUSH
56184: LD_INT 0
56186: PUSH
56187: LD_INT 2
56189: PUSH
56190: EMPTY
56191: LIST
56192: LIST
56193: PUSH
56194: LD_INT 1
56196: NEG
56197: PUSH
56198: LD_INT 1
56200: PUSH
56201: EMPTY
56202: LIST
56203: LIST
56204: PUSH
56205: LD_INT 2
56207: NEG
56208: PUSH
56209: LD_INT 0
56211: PUSH
56212: EMPTY
56213: LIST
56214: LIST
56215: PUSH
56216: LD_INT 2
56218: NEG
56219: PUSH
56220: LD_INT 1
56222: NEG
56223: PUSH
56224: EMPTY
56225: LIST
56226: LIST
56227: PUSH
56228: LD_INT 2
56230: NEG
56231: PUSH
56232: LD_INT 2
56234: NEG
56235: PUSH
56236: EMPTY
56237: LIST
56238: LIST
56239: PUSH
56240: EMPTY
56241: LIST
56242: LIST
56243: LIST
56244: LIST
56245: LIST
56246: LIST
56247: LIST
56248: LIST
56249: LIST
56250: LIST
56251: LIST
56252: LIST
56253: LIST
56254: LIST
56255: LIST
56256: LIST
56257: LIST
56258: LIST
56259: LIST
56260: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56261: LD_ADDR_VAR 0 58
56265: PUSH
56266: LD_INT 0
56268: PUSH
56269: LD_INT 0
56271: PUSH
56272: EMPTY
56273: LIST
56274: LIST
56275: PUSH
56276: LD_INT 0
56278: PUSH
56279: LD_INT 1
56281: NEG
56282: PUSH
56283: EMPTY
56284: LIST
56285: LIST
56286: PUSH
56287: LD_INT 1
56289: PUSH
56290: LD_INT 0
56292: PUSH
56293: EMPTY
56294: LIST
56295: LIST
56296: PUSH
56297: LD_INT 1
56299: PUSH
56300: LD_INT 1
56302: PUSH
56303: EMPTY
56304: LIST
56305: LIST
56306: PUSH
56307: LD_INT 0
56309: PUSH
56310: LD_INT 1
56312: PUSH
56313: EMPTY
56314: LIST
56315: LIST
56316: PUSH
56317: LD_INT 1
56319: NEG
56320: PUSH
56321: LD_INT 0
56323: PUSH
56324: EMPTY
56325: LIST
56326: LIST
56327: PUSH
56328: LD_INT 1
56330: NEG
56331: PUSH
56332: LD_INT 1
56334: NEG
56335: PUSH
56336: EMPTY
56337: LIST
56338: LIST
56339: PUSH
56340: LD_INT 1
56342: NEG
56343: PUSH
56344: LD_INT 2
56346: NEG
56347: PUSH
56348: EMPTY
56349: LIST
56350: LIST
56351: PUSH
56352: LD_INT 0
56354: PUSH
56355: LD_INT 2
56357: NEG
56358: PUSH
56359: EMPTY
56360: LIST
56361: LIST
56362: PUSH
56363: LD_INT 1
56365: PUSH
56366: LD_INT 1
56368: NEG
56369: PUSH
56370: EMPTY
56371: LIST
56372: LIST
56373: PUSH
56374: LD_INT 2
56376: PUSH
56377: LD_INT 0
56379: PUSH
56380: EMPTY
56381: LIST
56382: LIST
56383: PUSH
56384: LD_INT 2
56386: PUSH
56387: LD_INT 1
56389: PUSH
56390: EMPTY
56391: LIST
56392: LIST
56393: PUSH
56394: LD_INT 2
56396: PUSH
56397: LD_INT 2
56399: PUSH
56400: EMPTY
56401: LIST
56402: LIST
56403: PUSH
56404: LD_INT 1
56406: PUSH
56407: LD_INT 2
56409: PUSH
56410: EMPTY
56411: LIST
56412: LIST
56413: PUSH
56414: LD_INT 0
56416: PUSH
56417: LD_INT 2
56419: PUSH
56420: EMPTY
56421: LIST
56422: LIST
56423: PUSH
56424: LD_INT 1
56426: NEG
56427: PUSH
56428: LD_INT 1
56430: PUSH
56431: EMPTY
56432: LIST
56433: LIST
56434: PUSH
56435: LD_INT 2
56437: NEG
56438: PUSH
56439: LD_INT 0
56441: PUSH
56442: EMPTY
56443: LIST
56444: LIST
56445: PUSH
56446: LD_INT 2
56448: NEG
56449: PUSH
56450: LD_INT 1
56452: NEG
56453: PUSH
56454: EMPTY
56455: LIST
56456: LIST
56457: PUSH
56458: LD_INT 2
56460: NEG
56461: PUSH
56462: LD_INT 2
56464: NEG
56465: PUSH
56466: EMPTY
56467: LIST
56468: LIST
56469: PUSH
56470: EMPTY
56471: LIST
56472: LIST
56473: LIST
56474: LIST
56475: LIST
56476: LIST
56477: LIST
56478: LIST
56479: LIST
56480: LIST
56481: LIST
56482: LIST
56483: LIST
56484: LIST
56485: LIST
56486: LIST
56487: LIST
56488: LIST
56489: LIST
56490: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56491: LD_ADDR_VAR 0 59
56495: PUSH
56496: LD_INT 0
56498: PUSH
56499: LD_INT 0
56501: PUSH
56502: EMPTY
56503: LIST
56504: LIST
56505: PUSH
56506: LD_INT 0
56508: PUSH
56509: LD_INT 1
56511: NEG
56512: PUSH
56513: EMPTY
56514: LIST
56515: LIST
56516: PUSH
56517: LD_INT 1
56519: PUSH
56520: LD_INT 0
56522: PUSH
56523: EMPTY
56524: LIST
56525: LIST
56526: PUSH
56527: LD_INT 1
56529: PUSH
56530: LD_INT 1
56532: PUSH
56533: EMPTY
56534: LIST
56535: LIST
56536: PUSH
56537: LD_INT 0
56539: PUSH
56540: LD_INT 1
56542: PUSH
56543: EMPTY
56544: LIST
56545: LIST
56546: PUSH
56547: LD_INT 1
56549: NEG
56550: PUSH
56551: LD_INT 0
56553: PUSH
56554: EMPTY
56555: LIST
56556: LIST
56557: PUSH
56558: LD_INT 1
56560: NEG
56561: PUSH
56562: LD_INT 1
56564: NEG
56565: PUSH
56566: EMPTY
56567: LIST
56568: LIST
56569: PUSH
56570: EMPTY
56571: LIST
56572: LIST
56573: LIST
56574: LIST
56575: LIST
56576: LIST
56577: LIST
56578: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56579: LD_ADDR_VAR 0 60
56583: PUSH
56584: LD_INT 0
56586: PUSH
56587: LD_INT 0
56589: PUSH
56590: EMPTY
56591: LIST
56592: LIST
56593: PUSH
56594: LD_INT 0
56596: PUSH
56597: LD_INT 1
56599: NEG
56600: PUSH
56601: EMPTY
56602: LIST
56603: LIST
56604: PUSH
56605: LD_INT 1
56607: PUSH
56608: LD_INT 0
56610: PUSH
56611: EMPTY
56612: LIST
56613: LIST
56614: PUSH
56615: LD_INT 1
56617: PUSH
56618: LD_INT 1
56620: PUSH
56621: EMPTY
56622: LIST
56623: LIST
56624: PUSH
56625: LD_INT 0
56627: PUSH
56628: LD_INT 1
56630: PUSH
56631: EMPTY
56632: LIST
56633: LIST
56634: PUSH
56635: LD_INT 1
56637: NEG
56638: PUSH
56639: LD_INT 0
56641: PUSH
56642: EMPTY
56643: LIST
56644: LIST
56645: PUSH
56646: LD_INT 1
56648: NEG
56649: PUSH
56650: LD_INT 1
56652: NEG
56653: PUSH
56654: EMPTY
56655: LIST
56656: LIST
56657: PUSH
56658: EMPTY
56659: LIST
56660: LIST
56661: LIST
56662: LIST
56663: LIST
56664: LIST
56665: LIST
56666: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56667: LD_ADDR_VAR 0 61
56671: PUSH
56672: LD_INT 0
56674: PUSH
56675: LD_INT 0
56677: PUSH
56678: EMPTY
56679: LIST
56680: LIST
56681: PUSH
56682: LD_INT 0
56684: PUSH
56685: LD_INT 1
56687: NEG
56688: PUSH
56689: EMPTY
56690: LIST
56691: LIST
56692: PUSH
56693: LD_INT 1
56695: PUSH
56696: LD_INT 0
56698: PUSH
56699: EMPTY
56700: LIST
56701: LIST
56702: PUSH
56703: LD_INT 1
56705: PUSH
56706: LD_INT 1
56708: PUSH
56709: EMPTY
56710: LIST
56711: LIST
56712: PUSH
56713: LD_INT 0
56715: PUSH
56716: LD_INT 1
56718: PUSH
56719: EMPTY
56720: LIST
56721: LIST
56722: PUSH
56723: LD_INT 1
56725: NEG
56726: PUSH
56727: LD_INT 0
56729: PUSH
56730: EMPTY
56731: LIST
56732: LIST
56733: PUSH
56734: LD_INT 1
56736: NEG
56737: PUSH
56738: LD_INT 1
56740: NEG
56741: PUSH
56742: EMPTY
56743: LIST
56744: LIST
56745: PUSH
56746: EMPTY
56747: LIST
56748: LIST
56749: LIST
56750: LIST
56751: LIST
56752: LIST
56753: LIST
56754: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56755: LD_ADDR_VAR 0 62
56759: PUSH
56760: LD_INT 0
56762: PUSH
56763: LD_INT 0
56765: PUSH
56766: EMPTY
56767: LIST
56768: LIST
56769: PUSH
56770: LD_INT 0
56772: PUSH
56773: LD_INT 1
56775: NEG
56776: PUSH
56777: EMPTY
56778: LIST
56779: LIST
56780: PUSH
56781: LD_INT 1
56783: PUSH
56784: LD_INT 0
56786: PUSH
56787: EMPTY
56788: LIST
56789: LIST
56790: PUSH
56791: LD_INT 1
56793: PUSH
56794: LD_INT 1
56796: PUSH
56797: EMPTY
56798: LIST
56799: LIST
56800: PUSH
56801: LD_INT 0
56803: PUSH
56804: LD_INT 1
56806: PUSH
56807: EMPTY
56808: LIST
56809: LIST
56810: PUSH
56811: LD_INT 1
56813: NEG
56814: PUSH
56815: LD_INT 0
56817: PUSH
56818: EMPTY
56819: LIST
56820: LIST
56821: PUSH
56822: LD_INT 1
56824: NEG
56825: PUSH
56826: LD_INT 1
56828: NEG
56829: PUSH
56830: EMPTY
56831: LIST
56832: LIST
56833: PUSH
56834: EMPTY
56835: LIST
56836: LIST
56837: LIST
56838: LIST
56839: LIST
56840: LIST
56841: LIST
56842: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56843: LD_ADDR_VAR 0 63
56847: PUSH
56848: LD_INT 0
56850: PUSH
56851: LD_INT 0
56853: PUSH
56854: EMPTY
56855: LIST
56856: LIST
56857: PUSH
56858: LD_INT 0
56860: PUSH
56861: LD_INT 1
56863: NEG
56864: PUSH
56865: EMPTY
56866: LIST
56867: LIST
56868: PUSH
56869: LD_INT 1
56871: PUSH
56872: LD_INT 0
56874: PUSH
56875: EMPTY
56876: LIST
56877: LIST
56878: PUSH
56879: LD_INT 1
56881: PUSH
56882: LD_INT 1
56884: PUSH
56885: EMPTY
56886: LIST
56887: LIST
56888: PUSH
56889: LD_INT 0
56891: PUSH
56892: LD_INT 1
56894: PUSH
56895: EMPTY
56896: LIST
56897: LIST
56898: PUSH
56899: LD_INT 1
56901: NEG
56902: PUSH
56903: LD_INT 0
56905: PUSH
56906: EMPTY
56907: LIST
56908: LIST
56909: PUSH
56910: LD_INT 1
56912: NEG
56913: PUSH
56914: LD_INT 1
56916: NEG
56917: PUSH
56918: EMPTY
56919: LIST
56920: LIST
56921: PUSH
56922: EMPTY
56923: LIST
56924: LIST
56925: LIST
56926: LIST
56927: LIST
56928: LIST
56929: LIST
56930: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56931: LD_ADDR_VAR 0 64
56935: PUSH
56936: LD_INT 0
56938: PUSH
56939: LD_INT 0
56941: PUSH
56942: EMPTY
56943: LIST
56944: LIST
56945: PUSH
56946: LD_INT 0
56948: PUSH
56949: LD_INT 1
56951: NEG
56952: PUSH
56953: EMPTY
56954: LIST
56955: LIST
56956: PUSH
56957: LD_INT 1
56959: PUSH
56960: LD_INT 0
56962: PUSH
56963: EMPTY
56964: LIST
56965: LIST
56966: PUSH
56967: LD_INT 1
56969: PUSH
56970: LD_INT 1
56972: PUSH
56973: EMPTY
56974: LIST
56975: LIST
56976: PUSH
56977: LD_INT 0
56979: PUSH
56980: LD_INT 1
56982: PUSH
56983: EMPTY
56984: LIST
56985: LIST
56986: PUSH
56987: LD_INT 1
56989: NEG
56990: PUSH
56991: LD_INT 0
56993: PUSH
56994: EMPTY
56995: LIST
56996: LIST
56997: PUSH
56998: LD_INT 1
57000: NEG
57001: PUSH
57002: LD_INT 1
57004: NEG
57005: PUSH
57006: EMPTY
57007: LIST
57008: LIST
57009: PUSH
57010: EMPTY
57011: LIST
57012: LIST
57013: LIST
57014: LIST
57015: LIST
57016: LIST
57017: LIST
57018: ST_TO_ADDR
// end ; 1 :
57019: GO 62916
57021: LD_INT 1
57023: DOUBLE
57024: EQUAL
57025: IFTRUE 57029
57027: GO 59652
57029: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57030: LD_ADDR_VAR 0 11
57034: PUSH
57035: LD_INT 1
57037: NEG
57038: PUSH
57039: LD_INT 3
57041: NEG
57042: PUSH
57043: EMPTY
57044: LIST
57045: LIST
57046: PUSH
57047: LD_INT 0
57049: PUSH
57050: LD_INT 3
57052: NEG
57053: PUSH
57054: EMPTY
57055: LIST
57056: LIST
57057: PUSH
57058: LD_INT 1
57060: PUSH
57061: LD_INT 2
57063: NEG
57064: PUSH
57065: EMPTY
57066: LIST
57067: LIST
57068: PUSH
57069: EMPTY
57070: LIST
57071: LIST
57072: LIST
57073: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57074: LD_ADDR_VAR 0 12
57078: PUSH
57079: LD_INT 2
57081: PUSH
57082: LD_INT 1
57084: NEG
57085: PUSH
57086: EMPTY
57087: LIST
57088: LIST
57089: PUSH
57090: LD_INT 3
57092: PUSH
57093: LD_INT 0
57095: PUSH
57096: EMPTY
57097: LIST
57098: LIST
57099: PUSH
57100: LD_INT 3
57102: PUSH
57103: LD_INT 1
57105: PUSH
57106: EMPTY
57107: LIST
57108: LIST
57109: PUSH
57110: EMPTY
57111: LIST
57112: LIST
57113: LIST
57114: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57115: LD_ADDR_VAR 0 13
57119: PUSH
57120: LD_INT 3
57122: PUSH
57123: LD_INT 2
57125: PUSH
57126: EMPTY
57127: LIST
57128: LIST
57129: PUSH
57130: LD_INT 3
57132: PUSH
57133: LD_INT 3
57135: PUSH
57136: EMPTY
57137: LIST
57138: LIST
57139: PUSH
57140: LD_INT 2
57142: PUSH
57143: LD_INT 3
57145: PUSH
57146: EMPTY
57147: LIST
57148: LIST
57149: PUSH
57150: EMPTY
57151: LIST
57152: LIST
57153: LIST
57154: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57155: LD_ADDR_VAR 0 14
57159: PUSH
57160: LD_INT 1
57162: PUSH
57163: LD_INT 3
57165: PUSH
57166: EMPTY
57167: LIST
57168: LIST
57169: PUSH
57170: LD_INT 0
57172: PUSH
57173: LD_INT 3
57175: PUSH
57176: EMPTY
57177: LIST
57178: LIST
57179: PUSH
57180: LD_INT 1
57182: NEG
57183: PUSH
57184: LD_INT 2
57186: PUSH
57187: EMPTY
57188: LIST
57189: LIST
57190: PUSH
57191: EMPTY
57192: LIST
57193: LIST
57194: LIST
57195: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57196: LD_ADDR_VAR 0 15
57200: PUSH
57201: LD_INT 2
57203: NEG
57204: PUSH
57205: LD_INT 1
57207: PUSH
57208: EMPTY
57209: LIST
57210: LIST
57211: PUSH
57212: LD_INT 3
57214: NEG
57215: PUSH
57216: LD_INT 0
57218: PUSH
57219: EMPTY
57220: LIST
57221: LIST
57222: PUSH
57223: LD_INT 3
57225: NEG
57226: PUSH
57227: LD_INT 1
57229: NEG
57230: PUSH
57231: EMPTY
57232: LIST
57233: LIST
57234: PUSH
57235: EMPTY
57236: LIST
57237: LIST
57238: LIST
57239: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57240: LD_ADDR_VAR 0 16
57244: PUSH
57245: LD_INT 2
57247: NEG
57248: PUSH
57249: LD_INT 3
57251: NEG
57252: PUSH
57253: EMPTY
57254: LIST
57255: LIST
57256: PUSH
57257: LD_INT 3
57259: NEG
57260: PUSH
57261: LD_INT 2
57263: NEG
57264: PUSH
57265: EMPTY
57266: LIST
57267: LIST
57268: PUSH
57269: LD_INT 3
57271: NEG
57272: PUSH
57273: LD_INT 3
57275: NEG
57276: PUSH
57277: EMPTY
57278: LIST
57279: LIST
57280: PUSH
57281: EMPTY
57282: LIST
57283: LIST
57284: LIST
57285: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57286: LD_ADDR_VAR 0 17
57290: PUSH
57291: LD_INT 1
57293: NEG
57294: PUSH
57295: LD_INT 3
57297: NEG
57298: PUSH
57299: EMPTY
57300: LIST
57301: LIST
57302: PUSH
57303: LD_INT 0
57305: PUSH
57306: LD_INT 3
57308: NEG
57309: PUSH
57310: EMPTY
57311: LIST
57312: LIST
57313: PUSH
57314: LD_INT 1
57316: PUSH
57317: LD_INT 2
57319: NEG
57320: PUSH
57321: EMPTY
57322: LIST
57323: LIST
57324: PUSH
57325: EMPTY
57326: LIST
57327: LIST
57328: LIST
57329: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57330: LD_ADDR_VAR 0 18
57334: PUSH
57335: LD_INT 2
57337: PUSH
57338: LD_INT 1
57340: NEG
57341: PUSH
57342: EMPTY
57343: LIST
57344: LIST
57345: PUSH
57346: LD_INT 3
57348: PUSH
57349: LD_INT 0
57351: PUSH
57352: EMPTY
57353: LIST
57354: LIST
57355: PUSH
57356: LD_INT 3
57358: PUSH
57359: LD_INT 1
57361: PUSH
57362: EMPTY
57363: LIST
57364: LIST
57365: PUSH
57366: EMPTY
57367: LIST
57368: LIST
57369: LIST
57370: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57371: LD_ADDR_VAR 0 19
57375: PUSH
57376: LD_INT 3
57378: PUSH
57379: LD_INT 2
57381: PUSH
57382: EMPTY
57383: LIST
57384: LIST
57385: PUSH
57386: LD_INT 3
57388: PUSH
57389: LD_INT 3
57391: PUSH
57392: EMPTY
57393: LIST
57394: LIST
57395: PUSH
57396: LD_INT 2
57398: PUSH
57399: LD_INT 3
57401: PUSH
57402: EMPTY
57403: LIST
57404: LIST
57405: PUSH
57406: EMPTY
57407: LIST
57408: LIST
57409: LIST
57410: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57411: LD_ADDR_VAR 0 20
57415: PUSH
57416: LD_INT 1
57418: PUSH
57419: LD_INT 3
57421: PUSH
57422: EMPTY
57423: LIST
57424: LIST
57425: PUSH
57426: LD_INT 0
57428: PUSH
57429: LD_INT 3
57431: PUSH
57432: EMPTY
57433: LIST
57434: LIST
57435: PUSH
57436: LD_INT 1
57438: NEG
57439: PUSH
57440: LD_INT 2
57442: PUSH
57443: EMPTY
57444: LIST
57445: LIST
57446: PUSH
57447: EMPTY
57448: LIST
57449: LIST
57450: LIST
57451: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57452: LD_ADDR_VAR 0 21
57456: PUSH
57457: LD_INT 2
57459: NEG
57460: PUSH
57461: LD_INT 1
57463: PUSH
57464: EMPTY
57465: LIST
57466: LIST
57467: PUSH
57468: LD_INT 3
57470: NEG
57471: PUSH
57472: LD_INT 0
57474: PUSH
57475: EMPTY
57476: LIST
57477: LIST
57478: PUSH
57479: LD_INT 3
57481: NEG
57482: PUSH
57483: LD_INT 1
57485: NEG
57486: PUSH
57487: EMPTY
57488: LIST
57489: LIST
57490: PUSH
57491: EMPTY
57492: LIST
57493: LIST
57494: LIST
57495: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57496: LD_ADDR_VAR 0 22
57500: PUSH
57501: LD_INT 2
57503: NEG
57504: PUSH
57505: LD_INT 3
57507: NEG
57508: PUSH
57509: EMPTY
57510: LIST
57511: LIST
57512: PUSH
57513: LD_INT 3
57515: NEG
57516: PUSH
57517: LD_INT 2
57519: NEG
57520: PUSH
57521: EMPTY
57522: LIST
57523: LIST
57524: PUSH
57525: LD_INT 3
57527: NEG
57528: PUSH
57529: LD_INT 3
57531: NEG
57532: PUSH
57533: EMPTY
57534: LIST
57535: LIST
57536: PUSH
57537: EMPTY
57538: LIST
57539: LIST
57540: LIST
57541: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
57542: LD_ADDR_VAR 0 23
57546: PUSH
57547: LD_INT 0
57549: PUSH
57550: LD_INT 3
57552: NEG
57553: PUSH
57554: EMPTY
57555: LIST
57556: LIST
57557: PUSH
57558: LD_INT 1
57560: NEG
57561: PUSH
57562: LD_INT 4
57564: NEG
57565: PUSH
57566: EMPTY
57567: LIST
57568: LIST
57569: PUSH
57570: LD_INT 1
57572: PUSH
57573: LD_INT 3
57575: NEG
57576: PUSH
57577: EMPTY
57578: LIST
57579: LIST
57580: PUSH
57581: EMPTY
57582: LIST
57583: LIST
57584: LIST
57585: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
57586: LD_ADDR_VAR 0 24
57590: PUSH
57591: LD_INT 3
57593: PUSH
57594: LD_INT 0
57596: PUSH
57597: EMPTY
57598: LIST
57599: LIST
57600: PUSH
57601: LD_INT 3
57603: PUSH
57604: LD_INT 1
57606: NEG
57607: PUSH
57608: EMPTY
57609: LIST
57610: LIST
57611: PUSH
57612: LD_INT 4
57614: PUSH
57615: LD_INT 1
57617: PUSH
57618: EMPTY
57619: LIST
57620: LIST
57621: PUSH
57622: EMPTY
57623: LIST
57624: LIST
57625: LIST
57626: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
57627: LD_ADDR_VAR 0 25
57631: PUSH
57632: LD_INT 3
57634: PUSH
57635: LD_INT 3
57637: PUSH
57638: EMPTY
57639: LIST
57640: LIST
57641: PUSH
57642: LD_INT 4
57644: PUSH
57645: LD_INT 3
57647: PUSH
57648: EMPTY
57649: LIST
57650: LIST
57651: PUSH
57652: LD_INT 3
57654: PUSH
57655: LD_INT 4
57657: PUSH
57658: EMPTY
57659: LIST
57660: LIST
57661: PUSH
57662: EMPTY
57663: LIST
57664: LIST
57665: LIST
57666: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
57667: LD_ADDR_VAR 0 26
57671: PUSH
57672: LD_INT 0
57674: PUSH
57675: LD_INT 3
57677: PUSH
57678: EMPTY
57679: LIST
57680: LIST
57681: PUSH
57682: LD_INT 1
57684: PUSH
57685: LD_INT 4
57687: PUSH
57688: EMPTY
57689: LIST
57690: LIST
57691: PUSH
57692: LD_INT 1
57694: NEG
57695: PUSH
57696: LD_INT 3
57698: PUSH
57699: EMPTY
57700: LIST
57701: LIST
57702: PUSH
57703: EMPTY
57704: LIST
57705: LIST
57706: LIST
57707: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
57708: LD_ADDR_VAR 0 27
57712: PUSH
57713: LD_INT 3
57715: NEG
57716: PUSH
57717: LD_INT 0
57719: PUSH
57720: EMPTY
57721: LIST
57722: LIST
57723: PUSH
57724: LD_INT 3
57726: NEG
57727: PUSH
57728: LD_INT 1
57730: PUSH
57731: EMPTY
57732: LIST
57733: LIST
57734: PUSH
57735: LD_INT 4
57737: NEG
57738: PUSH
57739: LD_INT 1
57741: NEG
57742: PUSH
57743: EMPTY
57744: LIST
57745: LIST
57746: PUSH
57747: EMPTY
57748: LIST
57749: LIST
57750: LIST
57751: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
57752: LD_ADDR_VAR 0 28
57756: PUSH
57757: LD_INT 3
57759: NEG
57760: PUSH
57761: LD_INT 3
57763: NEG
57764: PUSH
57765: EMPTY
57766: LIST
57767: LIST
57768: PUSH
57769: LD_INT 3
57771: NEG
57772: PUSH
57773: LD_INT 4
57775: NEG
57776: PUSH
57777: EMPTY
57778: LIST
57779: LIST
57780: PUSH
57781: LD_INT 4
57783: NEG
57784: PUSH
57785: LD_INT 3
57787: NEG
57788: PUSH
57789: EMPTY
57790: LIST
57791: LIST
57792: PUSH
57793: EMPTY
57794: LIST
57795: LIST
57796: LIST
57797: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
57798: LD_ADDR_VAR 0 29
57802: PUSH
57803: LD_INT 1
57805: NEG
57806: PUSH
57807: LD_INT 3
57809: NEG
57810: PUSH
57811: EMPTY
57812: LIST
57813: LIST
57814: PUSH
57815: LD_INT 0
57817: PUSH
57818: LD_INT 3
57820: NEG
57821: PUSH
57822: EMPTY
57823: LIST
57824: LIST
57825: PUSH
57826: LD_INT 1
57828: PUSH
57829: LD_INT 2
57831: NEG
57832: PUSH
57833: EMPTY
57834: LIST
57835: LIST
57836: PUSH
57837: LD_INT 1
57839: NEG
57840: PUSH
57841: LD_INT 4
57843: NEG
57844: PUSH
57845: EMPTY
57846: LIST
57847: LIST
57848: PUSH
57849: LD_INT 0
57851: PUSH
57852: LD_INT 4
57854: NEG
57855: PUSH
57856: EMPTY
57857: LIST
57858: LIST
57859: PUSH
57860: LD_INT 1
57862: PUSH
57863: LD_INT 3
57865: NEG
57866: PUSH
57867: EMPTY
57868: LIST
57869: LIST
57870: PUSH
57871: LD_INT 1
57873: NEG
57874: PUSH
57875: LD_INT 5
57877: NEG
57878: PUSH
57879: EMPTY
57880: LIST
57881: LIST
57882: PUSH
57883: LD_INT 0
57885: PUSH
57886: LD_INT 5
57888: NEG
57889: PUSH
57890: EMPTY
57891: LIST
57892: LIST
57893: PUSH
57894: LD_INT 1
57896: PUSH
57897: LD_INT 4
57899: NEG
57900: PUSH
57901: EMPTY
57902: LIST
57903: LIST
57904: PUSH
57905: LD_INT 1
57907: NEG
57908: PUSH
57909: LD_INT 6
57911: NEG
57912: PUSH
57913: EMPTY
57914: LIST
57915: LIST
57916: PUSH
57917: LD_INT 0
57919: PUSH
57920: LD_INT 6
57922: NEG
57923: PUSH
57924: EMPTY
57925: LIST
57926: LIST
57927: PUSH
57928: LD_INT 1
57930: PUSH
57931: LD_INT 5
57933: NEG
57934: PUSH
57935: EMPTY
57936: LIST
57937: LIST
57938: PUSH
57939: EMPTY
57940: LIST
57941: LIST
57942: LIST
57943: LIST
57944: LIST
57945: LIST
57946: LIST
57947: LIST
57948: LIST
57949: LIST
57950: LIST
57951: LIST
57952: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
57953: LD_ADDR_VAR 0 30
57957: PUSH
57958: LD_INT 2
57960: PUSH
57961: LD_INT 1
57963: NEG
57964: PUSH
57965: EMPTY
57966: LIST
57967: LIST
57968: PUSH
57969: LD_INT 3
57971: PUSH
57972: LD_INT 0
57974: PUSH
57975: EMPTY
57976: LIST
57977: LIST
57978: PUSH
57979: LD_INT 3
57981: PUSH
57982: LD_INT 1
57984: PUSH
57985: EMPTY
57986: LIST
57987: LIST
57988: PUSH
57989: LD_INT 3
57991: PUSH
57992: LD_INT 1
57994: NEG
57995: PUSH
57996: EMPTY
57997: LIST
57998: LIST
57999: PUSH
58000: LD_INT 4
58002: PUSH
58003: LD_INT 0
58005: PUSH
58006: EMPTY
58007: LIST
58008: LIST
58009: PUSH
58010: LD_INT 4
58012: PUSH
58013: LD_INT 1
58015: PUSH
58016: EMPTY
58017: LIST
58018: LIST
58019: PUSH
58020: LD_INT 4
58022: PUSH
58023: LD_INT 1
58025: NEG
58026: PUSH
58027: EMPTY
58028: LIST
58029: LIST
58030: PUSH
58031: LD_INT 5
58033: PUSH
58034: LD_INT 0
58036: PUSH
58037: EMPTY
58038: LIST
58039: LIST
58040: PUSH
58041: LD_INT 5
58043: PUSH
58044: LD_INT 1
58046: PUSH
58047: EMPTY
58048: LIST
58049: LIST
58050: PUSH
58051: LD_INT 5
58053: PUSH
58054: LD_INT 1
58056: NEG
58057: PUSH
58058: EMPTY
58059: LIST
58060: LIST
58061: PUSH
58062: LD_INT 6
58064: PUSH
58065: LD_INT 0
58067: PUSH
58068: EMPTY
58069: LIST
58070: LIST
58071: PUSH
58072: LD_INT 6
58074: PUSH
58075: LD_INT 1
58077: PUSH
58078: EMPTY
58079: LIST
58080: LIST
58081: PUSH
58082: EMPTY
58083: LIST
58084: LIST
58085: LIST
58086: LIST
58087: LIST
58088: LIST
58089: LIST
58090: LIST
58091: LIST
58092: LIST
58093: LIST
58094: LIST
58095: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
58096: LD_ADDR_VAR 0 31
58100: PUSH
58101: LD_INT 3
58103: PUSH
58104: LD_INT 2
58106: PUSH
58107: EMPTY
58108: LIST
58109: LIST
58110: PUSH
58111: LD_INT 3
58113: PUSH
58114: LD_INT 3
58116: PUSH
58117: EMPTY
58118: LIST
58119: LIST
58120: PUSH
58121: LD_INT 2
58123: PUSH
58124: LD_INT 3
58126: PUSH
58127: EMPTY
58128: LIST
58129: LIST
58130: PUSH
58131: LD_INT 4
58133: PUSH
58134: LD_INT 3
58136: PUSH
58137: EMPTY
58138: LIST
58139: LIST
58140: PUSH
58141: LD_INT 4
58143: PUSH
58144: LD_INT 4
58146: PUSH
58147: EMPTY
58148: LIST
58149: LIST
58150: PUSH
58151: LD_INT 3
58153: PUSH
58154: LD_INT 4
58156: PUSH
58157: EMPTY
58158: LIST
58159: LIST
58160: PUSH
58161: LD_INT 5
58163: PUSH
58164: LD_INT 4
58166: PUSH
58167: EMPTY
58168: LIST
58169: LIST
58170: PUSH
58171: LD_INT 5
58173: PUSH
58174: LD_INT 5
58176: PUSH
58177: EMPTY
58178: LIST
58179: LIST
58180: PUSH
58181: LD_INT 4
58183: PUSH
58184: LD_INT 5
58186: PUSH
58187: EMPTY
58188: LIST
58189: LIST
58190: PUSH
58191: LD_INT 6
58193: PUSH
58194: LD_INT 5
58196: PUSH
58197: EMPTY
58198: LIST
58199: LIST
58200: PUSH
58201: LD_INT 6
58203: PUSH
58204: LD_INT 6
58206: PUSH
58207: EMPTY
58208: LIST
58209: LIST
58210: PUSH
58211: LD_INT 5
58213: PUSH
58214: LD_INT 6
58216: PUSH
58217: EMPTY
58218: LIST
58219: LIST
58220: PUSH
58221: EMPTY
58222: LIST
58223: LIST
58224: LIST
58225: LIST
58226: LIST
58227: LIST
58228: LIST
58229: LIST
58230: LIST
58231: LIST
58232: LIST
58233: LIST
58234: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
58235: LD_ADDR_VAR 0 32
58239: PUSH
58240: LD_INT 1
58242: PUSH
58243: LD_INT 3
58245: PUSH
58246: EMPTY
58247: LIST
58248: LIST
58249: PUSH
58250: LD_INT 0
58252: PUSH
58253: LD_INT 3
58255: PUSH
58256: EMPTY
58257: LIST
58258: LIST
58259: PUSH
58260: LD_INT 1
58262: NEG
58263: PUSH
58264: LD_INT 2
58266: PUSH
58267: EMPTY
58268: LIST
58269: LIST
58270: PUSH
58271: LD_INT 1
58273: PUSH
58274: LD_INT 4
58276: PUSH
58277: EMPTY
58278: LIST
58279: LIST
58280: PUSH
58281: LD_INT 0
58283: PUSH
58284: LD_INT 4
58286: PUSH
58287: EMPTY
58288: LIST
58289: LIST
58290: PUSH
58291: LD_INT 1
58293: NEG
58294: PUSH
58295: LD_INT 3
58297: PUSH
58298: EMPTY
58299: LIST
58300: LIST
58301: PUSH
58302: LD_INT 1
58304: PUSH
58305: LD_INT 5
58307: PUSH
58308: EMPTY
58309: LIST
58310: LIST
58311: PUSH
58312: LD_INT 0
58314: PUSH
58315: LD_INT 5
58317: PUSH
58318: EMPTY
58319: LIST
58320: LIST
58321: PUSH
58322: LD_INT 1
58324: NEG
58325: PUSH
58326: LD_INT 4
58328: PUSH
58329: EMPTY
58330: LIST
58331: LIST
58332: PUSH
58333: LD_INT 1
58335: PUSH
58336: LD_INT 6
58338: PUSH
58339: EMPTY
58340: LIST
58341: LIST
58342: PUSH
58343: LD_INT 0
58345: PUSH
58346: LD_INT 6
58348: PUSH
58349: EMPTY
58350: LIST
58351: LIST
58352: PUSH
58353: LD_INT 1
58355: NEG
58356: PUSH
58357: LD_INT 5
58359: PUSH
58360: EMPTY
58361: LIST
58362: LIST
58363: PUSH
58364: EMPTY
58365: LIST
58366: LIST
58367: LIST
58368: LIST
58369: LIST
58370: LIST
58371: LIST
58372: LIST
58373: LIST
58374: LIST
58375: LIST
58376: LIST
58377: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
58378: LD_ADDR_VAR 0 33
58382: PUSH
58383: LD_INT 2
58385: NEG
58386: PUSH
58387: LD_INT 1
58389: PUSH
58390: EMPTY
58391: LIST
58392: LIST
58393: PUSH
58394: LD_INT 3
58396: NEG
58397: PUSH
58398: LD_INT 0
58400: PUSH
58401: EMPTY
58402: LIST
58403: LIST
58404: PUSH
58405: LD_INT 3
58407: NEG
58408: PUSH
58409: LD_INT 1
58411: NEG
58412: PUSH
58413: EMPTY
58414: LIST
58415: LIST
58416: PUSH
58417: LD_INT 3
58419: NEG
58420: PUSH
58421: LD_INT 1
58423: PUSH
58424: EMPTY
58425: LIST
58426: LIST
58427: PUSH
58428: LD_INT 4
58430: NEG
58431: PUSH
58432: LD_INT 0
58434: PUSH
58435: EMPTY
58436: LIST
58437: LIST
58438: PUSH
58439: LD_INT 4
58441: NEG
58442: PUSH
58443: LD_INT 1
58445: NEG
58446: PUSH
58447: EMPTY
58448: LIST
58449: LIST
58450: PUSH
58451: LD_INT 4
58453: NEG
58454: PUSH
58455: LD_INT 1
58457: PUSH
58458: EMPTY
58459: LIST
58460: LIST
58461: PUSH
58462: LD_INT 5
58464: NEG
58465: PUSH
58466: LD_INT 0
58468: PUSH
58469: EMPTY
58470: LIST
58471: LIST
58472: PUSH
58473: LD_INT 5
58475: NEG
58476: PUSH
58477: LD_INT 1
58479: NEG
58480: PUSH
58481: EMPTY
58482: LIST
58483: LIST
58484: PUSH
58485: LD_INT 5
58487: NEG
58488: PUSH
58489: LD_INT 1
58491: PUSH
58492: EMPTY
58493: LIST
58494: LIST
58495: PUSH
58496: LD_INT 6
58498: NEG
58499: PUSH
58500: LD_INT 0
58502: PUSH
58503: EMPTY
58504: LIST
58505: LIST
58506: PUSH
58507: LD_INT 6
58509: NEG
58510: PUSH
58511: LD_INT 1
58513: NEG
58514: PUSH
58515: EMPTY
58516: LIST
58517: LIST
58518: PUSH
58519: EMPTY
58520: LIST
58521: LIST
58522: LIST
58523: LIST
58524: LIST
58525: LIST
58526: LIST
58527: LIST
58528: LIST
58529: LIST
58530: LIST
58531: LIST
58532: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
58533: LD_ADDR_VAR 0 34
58537: PUSH
58538: LD_INT 2
58540: NEG
58541: PUSH
58542: LD_INT 3
58544: NEG
58545: PUSH
58546: EMPTY
58547: LIST
58548: LIST
58549: PUSH
58550: LD_INT 3
58552: NEG
58553: PUSH
58554: LD_INT 2
58556: NEG
58557: PUSH
58558: EMPTY
58559: LIST
58560: LIST
58561: PUSH
58562: LD_INT 3
58564: NEG
58565: PUSH
58566: LD_INT 3
58568: NEG
58569: PUSH
58570: EMPTY
58571: LIST
58572: LIST
58573: PUSH
58574: LD_INT 3
58576: NEG
58577: PUSH
58578: LD_INT 4
58580: NEG
58581: PUSH
58582: EMPTY
58583: LIST
58584: LIST
58585: PUSH
58586: LD_INT 4
58588: NEG
58589: PUSH
58590: LD_INT 3
58592: NEG
58593: PUSH
58594: EMPTY
58595: LIST
58596: LIST
58597: PUSH
58598: LD_INT 4
58600: NEG
58601: PUSH
58602: LD_INT 4
58604: NEG
58605: PUSH
58606: EMPTY
58607: LIST
58608: LIST
58609: PUSH
58610: LD_INT 4
58612: NEG
58613: PUSH
58614: LD_INT 5
58616: NEG
58617: PUSH
58618: EMPTY
58619: LIST
58620: LIST
58621: PUSH
58622: LD_INT 5
58624: NEG
58625: PUSH
58626: LD_INT 4
58628: NEG
58629: PUSH
58630: EMPTY
58631: LIST
58632: LIST
58633: PUSH
58634: LD_INT 5
58636: NEG
58637: PUSH
58638: LD_INT 5
58640: NEG
58641: PUSH
58642: EMPTY
58643: LIST
58644: LIST
58645: PUSH
58646: LD_INT 5
58648: NEG
58649: PUSH
58650: LD_INT 6
58652: NEG
58653: PUSH
58654: EMPTY
58655: LIST
58656: LIST
58657: PUSH
58658: LD_INT 6
58660: NEG
58661: PUSH
58662: LD_INT 5
58664: NEG
58665: PUSH
58666: EMPTY
58667: LIST
58668: LIST
58669: PUSH
58670: LD_INT 6
58672: NEG
58673: PUSH
58674: LD_INT 6
58676: NEG
58677: PUSH
58678: EMPTY
58679: LIST
58680: LIST
58681: PUSH
58682: EMPTY
58683: LIST
58684: LIST
58685: LIST
58686: LIST
58687: LIST
58688: LIST
58689: LIST
58690: LIST
58691: LIST
58692: LIST
58693: LIST
58694: LIST
58695: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
58696: LD_ADDR_VAR 0 41
58700: PUSH
58701: LD_INT 0
58703: PUSH
58704: LD_INT 2
58706: NEG
58707: PUSH
58708: EMPTY
58709: LIST
58710: LIST
58711: PUSH
58712: LD_INT 1
58714: NEG
58715: PUSH
58716: LD_INT 3
58718: NEG
58719: PUSH
58720: EMPTY
58721: LIST
58722: LIST
58723: PUSH
58724: LD_INT 1
58726: PUSH
58727: LD_INT 2
58729: NEG
58730: PUSH
58731: EMPTY
58732: LIST
58733: LIST
58734: PUSH
58735: EMPTY
58736: LIST
58737: LIST
58738: LIST
58739: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
58740: LD_ADDR_VAR 0 42
58744: PUSH
58745: LD_INT 2
58747: PUSH
58748: LD_INT 0
58750: PUSH
58751: EMPTY
58752: LIST
58753: LIST
58754: PUSH
58755: LD_INT 2
58757: PUSH
58758: LD_INT 1
58760: NEG
58761: PUSH
58762: EMPTY
58763: LIST
58764: LIST
58765: PUSH
58766: LD_INT 3
58768: PUSH
58769: LD_INT 1
58771: PUSH
58772: EMPTY
58773: LIST
58774: LIST
58775: PUSH
58776: EMPTY
58777: LIST
58778: LIST
58779: LIST
58780: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
58781: LD_ADDR_VAR 0 43
58785: PUSH
58786: LD_INT 2
58788: PUSH
58789: LD_INT 2
58791: PUSH
58792: EMPTY
58793: LIST
58794: LIST
58795: PUSH
58796: LD_INT 3
58798: PUSH
58799: LD_INT 2
58801: PUSH
58802: EMPTY
58803: LIST
58804: LIST
58805: PUSH
58806: LD_INT 2
58808: PUSH
58809: LD_INT 3
58811: PUSH
58812: EMPTY
58813: LIST
58814: LIST
58815: PUSH
58816: EMPTY
58817: LIST
58818: LIST
58819: LIST
58820: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
58821: LD_ADDR_VAR 0 44
58825: PUSH
58826: LD_INT 0
58828: PUSH
58829: LD_INT 2
58831: PUSH
58832: EMPTY
58833: LIST
58834: LIST
58835: PUSH
58836: LD_INT 1
58838: PUSH
58839: LD_INT 3
58841: PUSH
58842: EMPTY
58843: LIST
58844: LIST
58845: PUSH
58846: LD_INT 1
58848: NEG
58849: PUSH
58850: LD_INT 2
58852: PUSH
58853: EMPTY
58854: LIST
58855: LIST
58856: PUSH
58857: EMPTY
58858: LIST
58859: LIST
58860: LIST
58861: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58862: LD_ADDR_VAR 0 45
58866: PUSH
58867: LD_INT 2
58869: NEG
58870: PUSH
58871: LD_INT 0
58873: PUSH
58874: EMPTY
58875: LIST
58876: LIST
58877: PUSH
58878: LD_INT 2
58880: NEG
58881: PUSH
58882: LD_INT 1
58884: PUSH
58885: EMPTY
58886: LIST
58887: LIST
58888: PUSH
58889: LD_INT 3
58891: NEG
58892: PUSH
58893: LD_INT 1
58895: NEG
58896: PUSH
58897: EMPTY
58898: LIST
58899: LIST
58900: PUSH
58901: EMPTY
58902: LIST
58903: LIST
58904: LIST
58905: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
58906: LD_ADDR_VAR 0 46
58910: PUSH
58911: LD_INT 2
58913: NEG
58914: PUSH
58915: LD_INT 2
58917: NEG
58918: PUSH
58919: EMPTY
58920: LIST
58921: LIST
58922: PUSH
58923: LD_INT 2
58925: NEG
58926: PUSH
58927: LD_INT 3
58929: NEG
58930: PUSH
58931: EMPTY
58932: LIST
58933: LIST
58934: PUSH
58935: LD_INT 3
58937: NEG
58938: PUSH
58939: LD_INT 2
58941: NEG
58942: PUSH
58943: EMPTY
58944: LIST
58945: LIST
58946: PUSH
58947: EMPTY
58948: LIST
58949: LIST
58950: LIST
58951: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
58952: LD_ADDR_VAR 0 47
58956: PUSH
58957: LD_INT 2
58959: NEG
58960: PUSH
58961: LD_INT 3
58963: NEG
58964: PUSH
58965: EMPTY
58966: LIST
58967: LIST
58968: PUSH
58969: LD_INT 1
58971: NEG
58972: PUSH
58973: LD_INT 3
58975: NEG
58976: PUSH
58977: EMPTY
58978: LIST
58979: LIST
58980: PUSH
58981: EMPTY
58982: LIST
58983: LIST
58984: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
58985: LD_ADDR_VAR 0 48
58989: PUSH
58990: LD_INT 1
58992: PUSH
58993: LD_INT 2
58995: NEG
58996: PUSH
58997: EMPTY
58998: LIST
58999: LIST
59000: PUSH
59001: LD_INT 2
59003: PUSH
59004: LD_INT 1
59006: NEG
59007: PUSH
59008: EMPTY
59009: LIST
59010: LIST
59011: PUSH
59012: EMPTY
59013: LIST
59014: LIST
59015: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
59016: LD_ADDR_VAR 0 49
59020: PUSH
59021: LD_INT 3
59023: PUSH
59024: LD_INT 1
59026: PUSH
59027: EMPTY
59028: LIST
59029: LIST
59030: PUSH
59031: LD_INT 3
59033: PUSH
59034: LD_INT 2
59036: PUSH
59037: EMPTY
59038: LIST
59039: LIST
59040: PUSH
59041: EMPTY
59042: LIST
59043: LIST
59044: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
59045: LD_ADDR_VAR 0 50
59049: PUSH
59050: LD_INT 2
59052: PUSH
59053: LD_INT 3
59055: PUSH
59056: EMPTY
59057: LIST
59058: LIST
59059: PUSH
59060: LD_INT 1
59062: PUSH
59063: LD_INT 3
59065: PUSH
59066: EMPTY
59067: LIST
59068: LIST
59069: PUSH
59070: EMPTY
59071: LIST
59072: LIST
59073: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
59074: LD_ADDR_VAR 0 51
59078: PUSH
59079: LD_INT 1
59081: NEG
59082: PUSH
59083: LD_INT 2
59085: PUSH
59086: EMPTY
59087: LIST
59088: LIST
59089: PUSH
59090: LD_INT 2
59092: NEG
59093: PUSH
59094: LD_INT 1
59096: PUSH
59097: EMPTY
59098: LIST
59099: LIST
59100: PUSH
59101: EMPTY
59102: LIST
59103: LIST
59104: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
59105: LD_ADDR_VAR 0 52
59109: PUSH
59110: LD_INT 3
59112: NEG
59113: PUSH
59114: LD_INT 1
59116: NEG
59117: PUSH
59118: EMPTY
59119: LIST
59120: LIST
59121: PUSH
59122: LD_INT 3
59124: NEG
59125: PUSH
59126: LD_INT 2
59128: NEG
59129: PUSH
59130: EMPTY
59131: LIST
59132: LIST
59133: PUSH
59134: EMPTY
59135: LIST
59136: LIST
59137: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
59138: LD_ADDR_VAR 0 53
59142: PUSH
59143: LD_INT 1
59145: NEG
59146: PUSH
59147: LD_INT 3
59149: NEG
59150: PUSH
59151: EMPTY
59152: LIST
59153: LIST
59154: PUSH
59155: LD_INT 0
59157: PUSH
59158: LD_INT 3
59160: NEG
59161: PUSH
59162: EMPTY
59163: LIST
59164: LIST
59165: PUSH
59166: LD_INT 1
59168: PUSH
59169: LD_INT 2
59171: NEG
59172: PUSH
59173: EMPTY
59174: LIST
59175: LIST
59176: PUSH
59177: EMPTY
59178: LIST
59179: LIST
59180: LIST
59181: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
59182: LD_ADDR_VAR 0 54
59186: PUSH
59187: LD_INT 2
59189: PUSH
59190: LD_INT 1
59192: NEG
59193: PUSH
59194: EMPTY
59195: LIST
59196: LIST
59197: PUSH
59198: LD_INT 3
59200: PUSH
59201: LD_INT 0
59203: PUSH
59204: EMPTY
59205: LIST
59206: LIST
59207: PUSH
59208: LD_INT 3
59210: PUSH
59211: LD_INT 1
59213: PUSH
59214: EMPTY
59215: LIST
59216: LIST
59217: PUSH
59218: EMPTY
59219: LIST
59220: LIST
59221: LIST
59222: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
59223: LD_ADDR_VAR 0 55
59227: PUSH
59228: LD_INT 3
59230: PUSH
59231: LD_INT 2
59233: PUSH
59234: EMPTY
59235: LIST
59236: LIST
59237: PUSH
59238: LD_INT 3
59240: PUSH
59241: LD_INT 3
59243: PUSH
59244: EMPTY
59245: LIST
59246: LIST
59247: PUSH
59248: LD_INT 2
59250: PUSH
59251: LD_INT 3
59253: PUSH
59254: EMPTY
59255: LIST
59256: LIST
59257: PUSH
59258: EMPTY
59259: LIST
59260: LIST
59261: LIST
59262: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
59263: LD_ADDR_VAR 0 56
59267: PUSH
59268: LD_INT 1
59270: PUSH
59271: LD_INT 3
59273: PUSH
59274: EMPTY
59275: LIST
59276: LIST
59277: PUSH
59278: LD_INT 0
59280: PUSH
59281: LD_INT 3
59283: PUSH
59284: EMPTY
59285: LIST
59286: LIST
59287: PUSH
59288: LD_INT 1
59290: NEG
59291: PUSH
59292: LD_INT 2
59294: PUSH
59295: EMPTY
59296: LIST
59297: LIST
59298: PUSH
59299: EMPTY
59300: LIST
59301: LIST
59302: LIST
59303: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59304: LD_ADDR_VAR 0 57
59308: PUSH
59309: LD_INT 2
59311: NEG
59312: PUSH
59313: LD_INT 1
59315: PUSH
59316: EMPTY
59317: LIST
59318: LIST
59319: PUSH
59320: LD_INT 3
59322: NEG
59323: PUSH
59324: LD_INT 0
59326: PUSH
59327: EMPTY
59328: LIST
59329: LIST
59330: PUSH
59331: LD_INT 3
59333: NEG
59334: PUSH
59335: LD_INT 1
59337: NEG
59338: PUSH
59339: EMPTY
59340: LIST
59341: LIST
59342: PUSH
59343: EMPTY
59344: LIST
59345: LIST
59346: LIST
59347: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59348: LD_ADDR_VAR 0 58
59352: PUSH
59353: LD_INT 2
59355: NEG
59356: PUSH
59357: LD_INT 3
59359: NEG
59360: PUSH
59361: EMPTY
59362: LIST
59363: LIST
59364: PUSH
59365: LD_INT 3
59367: NEG
59368: PUSH
59369: LD_INT 2
59371: NEG
59372: PUSH
59373: EMPTY
59374: LIST
59375: LIST
59376: PUSH
59377: LD_INT 3
59379: NEG
59380: PUSH
59381: LD_INT 3
59383: NEG
59384: PUSH
59385: EMPTY
59386: LIST
59387: LIST
59388: PUSH
59389: EMPTY
59390: LIST
59391: LIST
59392: LIST
59393: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
59394: LD_ADDR_VAR 0 59
59398: PUSH
59399: LD_INT 1
59401: NEG
59402: PUSH
59403: LD_INT 2
59405: NEG
59406: PUSH
59407: EMPTY
59408: LIST
59409: LIST
59410: PUSH
59411: LD_INT 0
59413: PUSH
59414: LD_INT 2
59416: NEG
59417: PUSH
59418: EMPTY
59419: LIST
59420: LIST
59421: PUSH
59422: LD_INT 1
59424: PUSH
59425: LD_INT 1
59427: NEG
59428: PUSH
59429: EMPTY
59430: LIST
59431: LIST
59432: PUSH
59433: EMPTY
59434: LIST
59435: LIST
59436: LIST
59437: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
59438: LD_ADDR_VAR 0 60
59442: PUSH
59443: LD_INT 1
59445: PUSH
59446: LD_INT 1
59448: NEG
59449: PUSH
59450: EMPTY
59451: LIST
59452: LIST
59453: PUSH
59454: LD_INT 2
59456: PUSH
59457: LD_INT 0
59459: PUSH
59460: EMPTY
59461: LIST
59462: LIST
59463: PUSH
59464: LD_INT 2
59466: PUSH
59467: LD_INT 1
59469: PUSH
59470: EMPTY
59471: LIST
59472: LIST
59473: PUSH
59474: EMPTY
59475: LIST
59476: LIST
59477: LIST
59478: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
59479: LD_ADDR_VAR 0 61
59483: PUSH
59484: LD_INT 2
59486: PUSH
59487: LD_INT 1
59489: PUSH
59490: EMPTY
59491: LIST
59492: LIST
59493: PUSH
59494: LD_INT 2
59496: PUSH
59497: LD_INT 2
59499: PUSH
59500: EMPTY
59501: LIST
59502: LIST
59503: PUSH
59504: LD_INT 1
59506: PUSH
59507: LD_INT 2
59509: PUSH
59510: EMPTY
59511: LIST
59512: LIST
59513: PUSH
59514: EMPTY
59515: LIST
59516: LIST
59517: LIST
59518: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
59519: LD_ADDR_VAR 0 62
59523: PUSH
59524: LD_INT 1
59526: PUSH
59527: LD_INT 2
59529: PUSH
59530: EMPTY
59531: LIST
59532: LIST
59533: PUSH
59534: LD_INT 0
59536: PUSH
59537: LD_INT 2
59539: PUSH
59540: EMPTY
59541: LIST
59542: LIST
59543: PUSH
59544: LD_INT 1
59546: NEG
59547: PUSH
59548: LD_INT 1
59550: PUSH
59551: EMPTY
59552: LIST
59553: LIST
59554: PUSH
59555: EMPTY
59556: LIST
59557: LIST
59558: LIST
59559: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
59560: LD_ADDR_VAR 0 63
59564: PUSH
59565: LD_INT 1
59567: NEG
59568: PUSH
59569: LD_INT 1
59571: PUSH
59572: EMPTY
59573: LIST
59574: LIST
59575: PUSH
59576: LD_INT 2
59578: NEG
59579: PUSH
59580: LD_INT 0
59582: PUSH
59583: EMPTY
59584: LIST
59585: LIST
59586: PUSH
59587: LD_INT 2
59589: NEG
59590: PUSH
59591: LD_INT 1
59593: NEG
59594: PUSH
59595: EMPTY
59596: LIST
59597: LIST
59598: PUSH
59599: EMPTY
59600: LIST
59601: LIST
59602: LIST
59603: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59604: LD_ADDR_VAR 0 64
59608: PUSH
59609: LD_INT 1
59611: NEG
59612: PUSH
59613: LD_INT 2
59615: NEG
59616: PUSH
59617: EMPTY
59618: LIST
59619: LIST
59620: PUSH
59621: LD_INT 2
59623: NEG
59624: PUSH
59625: LD_INT 1
59627: NEG
59628: PUSH
59629: EMPTY
59630: LIST
59631: LIST
59632: PUSH
59633: LD_INT 2
59635: NEG
59636: PUSH
59637: LD_INT 2
59639: NEG
59640: PUSH
59641: EMPTY
59642: LIST
59643: LIST
59644: PUSH
59645: EMPTY
59646: LIST
59647: LIST
59648: LIST
59649: ST_TO_ADDR
// end ; 2 :
59650: GO 62916
59652: LD_INT 2
59654: DOUBLE
59655: EQUAL
59656: IFTRUE 59660
59658: GO 62915
59660: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
59661: LD_ADDR_VAR 0 29
59665: PUSH
59666: LD_INT 4
59668: PUSH
59669: LD_INT 0
59671: PUSH
59672: EMPTY
59673: LIST
59674: LIST
59675: PUSH
59676: LD_INT 4
59678: PUSH
59679: LD_INT 1
59681: NEG
59682: PUSH
59683: EMPTY
59684: LIST
59685: LIST
59686: PUSH
59687: LD_INT 5
59689: PUSH
59690: LD_INT 0
59692: PUSH
59693: EMPTY
59694: LIST
59695: LIST
59696: PUSH
59697: LD_INT 5
59699: PUSH
59700: LD_INT 1
59702: PUSH
59703: EMPTY
59704: LIST
59705: LIST
59706: PUSH
59707: LD_INT 4
59709: PUSH
59710: LD_INT 1
59712: PUSH
59713: EMPTY
59714: LIST
59715: LIST
59716: PUSH
59717: LD_INT 3
59719: PUSH
59720: LD_INT 0
59722: PUSH
59723: EMPTY
59724: LIST
59725: LIST
59726: PUSH
59727: LD_INT 3
59729: PUSH
59730: LD_INT 1
59732: NEG
59733: PUSH
59734: EMPTY
59735: LIST
59736: LIST
59737: PUSH
59738: LD_INT 3
59740: PUSH
59741: LD_INT 2
59743: NEG
59744: PUSH
59745: EMPTY
59746: LIST
59747: LIST
59748: PUSH
59749: LD_INT 5
59751: PUSH
59752: LD_INT 2
59754: PUSH
59755: EMPTY
59756: LIST
59757: LIST
59758: PUSH
59759: LD_INT 3
59761: PUSH
59762: LD_INT 3
59764: PUSH
59765: EMPTY
59766: LIST
59767: LIST
59768: PUSH
59769: LD_INT 3
59771: PUSH
59772: LD_INT 2
59774: PUSH
59775: EMPTY
59776: LIST
59777: LIST
59778: PUSH
59779: LD_INT 4
59781: PUSH
59782: LD_INT 3
59784: PUSH
59785: EMPTY
59786: LIST
59787: LIST
59788: PUSH
59789: LD_INT 4
59791: PUSH
59792: LD_INT 4
59794: PUSH
59795: EMPTY
59796: LIST
59797: LIST
59798: PUSH
59799: LD_INT 3
59801: PUSH
59802: LD_INT 4
59804: PUSH
59805: EMPTY
59806: LIST
59807: LIST
59808: PUSH
59809: LD_INT 2
59811: PUSH
59812: LD_INT 3
59814: PUSH
59815: EMPTY
59816: LIST
59817: LIST
59818: PUSH
59819: LD_INT 2
59821: PUSH
59822: LD_INT 2
59824: PUSH
59825: EMPTY
59826: LIST
59827: LIST
59828: PUSH
59829: LD_INT 4
59831: PUSH
59832: LD_INT 2
59834: PUSH
59835: EMPTY
59836: LIST
59837: LIST
59838: PUSH
59839: LD_INT 2
59841: PUSH
59842: LD_INT 4
59844: PUSH
59845: EMPTY
59846: LIST
59847: LIST
59848: PUSH
59849: LD_INT 0
59851: PUSH
59852: LD_INT 4
59854: PUSH
59855: EMPTY
59856: LIST
59857: LIST
59858: PUSH
59859: LD_INT 0
59861: PUSH
59862: LD_INT 3
59864: PUSH
59865: EMPTY
59866: LIST
59867: LIST
59868: PUSH
59869: LD_INT 1
59871: PUSH
59872: LD_INT 4
59874: PUSH
59875: EMPTY
59876: LIST
59877: LIST
59878: PUSH
59879: LD_INT 1
59881: PUSH
59882: LD_INT 5
59884: PUSH
59885: EMPTY
59886: LIST
59887: LIST
59888: PUSH
59889: LD_INT 0
59891: PUSH
59892: LD_INT 5
59894: PUSH
59895: EMPTY
59896: LIST
59897: LIST
59898: PUSH
59899: LD_INT 1
59901: NEG
59902: PUSH
59903: LD_INT 4
59905: PUSH
59906: EMPTY
59907: LIST
59908: LIST
59909: PUSH
59910: LD_INT 1
59912: NEG
59913: PUSH
59914: LD_INT 3
59916: PUSH
59917: EMPTY
59918: LIST
59919: LIST
59920: PUSH
59921: LD_INT 2
59923: PUSH
59924: LD_INT 5
59926: PUSH
59927: EMPTY
59928: LIST
59929: LIST
59930: PUSH
59931: LD_INT 2
59933: NEG
59934: PUSH
59935: LD_INT 3
59937: PUSH
59938: EMPTY
59939: LIST
59940: LIST
59941: PUSH
59942: LD_INT 3
59944: NEG
59945: PUSH
59946: LD_INT 0
59948: PUSH
59949: EMPTY
59950: LIST
59951: LIST
59952: PUSH
59953: LD_INT 3
59955: NEG
59956: PUSH
59957: LD_INT 1
59959: NEG
59960: PUSH
59961: EMPTY
59962: LIST
59963: LIST
59964: PUSH
59965: LD_INT 2
59967: NEG
59968: PUSH
59969: LD_INT 0
59971: PUSH
59972: EMPTY
59973: LIST
59974: LIST
59975: PUSH
59976: LD_INT 2
59978: NEG
59979: PUSH
59980: LD_INT 1
59982: PUSH
59983: EMPTY
59984: LIST
59985: LIST
59986: PUSH
59987: LD_INT 3
59989: NEG
59990: PUSH
59991: LD_INT 1
59993: PUSH
59994: EMPTY
59995: LIST
59996: LIST
59997: PUSH
59998: LD_INT 4
60000: NEG
60001: PUSH
60002: LD_INT 0
60004: PUSH
60005: EMPTY
60006: LIST
60007: LIST
60008: PUSH
60009: LD_INT 4
60011: NEG
60012: PUSH
60013: LD_INT 1
60015: NEG
60016: PUSH
60017: EMPTY
60018: LIST
60019: LIST
60020: PUSH
60021: LD_INT 4
60023: NEG
60024: PUSH
60025: LD_INT 2
60027: NEG
60028: PUSH
60029: EMPTY
60030: LIST
60031: LIST
60032: PUSH
60033: LD_INT 2
60035: NEG
60036: PUSH
60037: LD_INT 2
60039: PUSH
60040: EMPTY
60041: LIST
60042: LIST
60043: PUSH
60044: LD_INT 4
60046: NEG
60047: PUSH
60048: LD_INT 4
60050: NEG
60051: PUSH
60052: EMPTY
60053: LIST
60054: LIST
60055: PUSH
60056: LD_INT 4
60058: NEG
60059: PUSH
60060: LD_INT 5
60062: NEG
60063: PUSH
60064: EMPTY
60065: LIST
60066: LIST
60067: PUSH
60068: LD_INT 3
60070: NEG
60071: PUSH
60072: LD_INT 4
60074: NEG
60075: PUSH
60076: EMPTY
60077: LIST
60078: LIST
60079: PUSH
60080: LD_INT 3
60082: NEG
60083: PUSH
60084: LD_INT 3
60086: NEG
60087: PUSH
60088: EMPTY
60089: LIST
60090: LIST
60091: PUSH
60092: LD_INT 4
60094: NEG
60095: PUSH
60096: LD_INT 3
60098: NEG
60099: PUSH
60100: EMPTY
60101: LIST
60102: LIST
60103: PUSH
60104: LD_INT 5
60106: NEG
60107: PUSH
60108: LD_INT 4
60110: NEG
60111: PUSH
60112: EMPTY
60113: LIST
60114: LIST
60115: PUSH
60116: LD_INT 5
60118: NEG
60119: PUSH
60120: LD_INT 5
60122: NEG
60123: PUSH
60124: EMPTY
60125: LIST
60126: LIST
60127: PUSH
60128: LD_INT 3
60130: NEG
60131: PUSH
60132: LD_INT 5
60134: NEG
60135: PUSH
60136: EMPTY
60137: LIST
60138: LIST
60139: PUSH
60140: LD_INT 5
60142: NEG
60143: PUSH
60144: LD_INT 3
60146: NEG
60147: PUSH
60148: EMPTY
60149: LIST
60150: LIST
60151: PUSH
60152: EMPTY
60153: LIST
60154: LIST
60155: LIST
60156: LIST
60157: LIST
60158: LIST
60159: LIST
60160: LIST
60161: LIST
60162: LIST
60163: LIST
60164: LIST
60165: LIST
60166: LIST
60167: LIST
60168: LIST
60169: LIST
60170: LIST
60171: LIST
60172: LIST
60173: LIST
60174: LIST
60175: LIST
60176: LIST
60177: LIST
60178: LIST
60179: LIST
60180: LIST
60181: LIST
60182: LIST
60183: LIST
60184: LIST
60185: LIST
60186: LIST
60187: LIST
60188: LIST
60189: LIST
60190: LIST
60191: LIST
60192: LIST
60193: LIST
60194: LIST
60195: LIST
60196: LIST
60197: LIST
60198: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
60199: LD_ADDR_VAR 0 30
60203: PUSH
60204: LD_INT 4
60206: PUSH
60207: LD_INT 4
60209: PUSH
60210: EMPTY
60211: LIST
60212: LIST
60213: PUSH
60214: LD_INT 4
60216: PUSH
60217: LD_INT 3
60219: PUSH
60220: EMPTY
60221: LIST
60222: LIST
60223: PUSH
60224: LD_INT 5
60226: PUSH
60227: LD_INT 4
60229: PUSH
60230: EMPTY
60231: LIST
60232: LIST
60233: PUSH
60234: LD_INT 5
60236: PUSH
60237: LD_INT 5
60239: PUSH
60240: EMPTY
60241: LIST
60242: LIST
60243: PUSH
60244: LD_INT 4
60246: PUSH
60247: LD_INT 5
60249: PUSH
60250: EMPTY
60251: LIST
60252: LIST
60253: PUSH
60254: LD_INT 3
60256: PUSH
60257: LD_INT 4
60259: PUSH
60260: EMPTY
60261: LIST
60262: LIST
60263: PUSH
60264: LD_INT 3
60266: PUSH
60267: LD_INT 3
60269: PUSH
60270: EMPTY
60271: LIST
60272: LIST
60273: PUSH
60274: LD_INT 5
60276: PUSH
60277: LD_INT 3
60279: PUSH
60280: EMPTY
60281: LIST
60282: LIST
60283: PUSH
60284: LD_INT 3
60286: PUSH
60287: LD_INT 5
60289: PUSH
60290: EMPTY
60291: LIST
60292: LIST
60293: PUSH
60294: LD_INT 0
60296: PUSH
60297: LD_INT 3
60299: PUSH
60300: EMPTY
60301: LIST
60302: LIST
60303: PUSH
60304: LD_INT 0
60306: PUSH
60307: LD_INT 2
60309: PUSH
60310: EMPTY
60311: LIST
60312: LIST
60313: PUSH
60314: LD_INT 1
60316: PUSH
60317: LD_INT 3
60319: PUSH
60320: EMPTY
60321: LIST
60322: LIST
60323: PUSH
60324: LD_INT 1
60326: PUSH
60327: LD_INT 4
60329: PUSH
60330: EMPTY
60331: LIST
60332: LIST
60333: PUSH
60334: LD_INT 0
60336: PUSH
60337: LD_INT 4
60339: PUSH
60340: EMPTY
60341: LIST
60342: LIST
60343: PUSH
60344: LD_INT 1
60346: NEG
60347: PUSH
60348: LD_INT 3
60350: PUSH
60351: EMPTY
60352: LIST
60353: LIST
60354: PUSH
60355: LD_INT 1
60357: NEG
60358: PUSH
60359: LD_INT 2
60361: PUSH
60362: EMPTY
60363: LIST
60364: LIST
60365: PUSH
60366: LD_INT 2
60368: PUSH
60369: LD_INT 4
60371: PUSH
60372: EMPTY
60373: LIST
60374: LIST
60375: PUSH
60376: LD_INT 2
60378: NEG
60379: PUSH
60380: LD_INT 2
60382: PUSH
60383: EMPTY
60384: LIST
60385: LIST
60386: PUSH
60387: LD_INT 4
60389: NEG
60390: PUSH
60391: LD_INT 0
60393: PUSH
60394: EMPTY
60395: LIST
60396: LIST
60397: PUSH
60398: LD_INT 4
60400: NEG
60401: PUSH
60402: LD_INT 1
60404: NEG
60405: PUSH
60406: EMPTY
60407: LIST
60408: LIST
60409: PUSH
60410: LD_INT 3
60412: NEG
60413: PUSH
60414: LD_INT 0
60416: PUSH
60417: EMPTY
60418: LIST
60419: LIST
60420: PUSH
60421: LD_INT 3
60423: NEG
60424: PUSH
60425: LD_INT 1
60427: PUSH
60428: EMPTY
60429: LIST
60430: LIST
60431: PUSH
60432: LD_INT 4
60434: NEG
60435: PUSH
60436: LD_INT 1
60438: PUSH
60439: EMPTY
60440: LIST
60441: LIST
60442: PUSH
60443: LD_INT 5
60445: NEG
60446: PUSH
60447: LD_INT 0
60449: PUSH
60450: EMPTY
60451: LIST
60452: LIST
60453: PUSH
60454: LD_INT 5
60456: NEG
60457: PUSH
60458: LD_INT 1
60460: NEG
60461: PUSH
60462: EMPTY
60463: LIST
60464: LIST
60465: PUSH
60466: LD_INT 5
60468: NEG
60469: PUSH
60470: LD_INT 2
60472: NEG
60473: PUSH
60474: EMPTY
60475: LIST
60476: LIST
60477: PUSH
60478: LD_INT 3
60480: NEG
60481: PUSH
60482: LD_INT 2
60484: PUSH
60485: EMPTY
60486: LIST
60487: LIST
60488: PUSH
60489: LD_INT 3
60491: NEG
60492: PUSH
60493: LD_INT 3
60495: NEG
60496: PUSH
60497: EMPTY
60498: LIST
60499: LIST
60500: PUSH
60501: LD_INT 3
60503: NEG
60504: PUSH
60505: LD_INT 4
60507: NEG
60508: PUSH
60509: EMPTY
60510: LIST
60511: LIST
60512: PUSH
60513: LD_INT 2
60515: NEG
60516: PUSH
60517: LD_INT 3
60519: NEG
60520: PUSH
60521: EMPTY
60522: LIST
60523: LIST
60524: PUSH
60525: LD_INT 2
60527: NEG
60528: PUSH
60529: LD_INT 2
60531: NEG
60532: PUSH
60533: EMPTY
60534: LIST
60535: LIST
60536: PUSH
60537: LD_INT 3
60539: NEG
60540: PUSH
60541: LD_INT 2
60543: NEG
60544: PUSH
60545: EMPTY
60546: LIST
60547: LIST
60548: PUSH
60549: LD_INT 4
60551: NEG
60552: PUSH
60553: LD_INT 3
60555: NEG
60556: PUSH
60557: EMPTY
60558: LIST
60559: LIST
60560: PUSH
60561: LD_INT 4
60563: NEG
60564: PUSH
60565: LD_INT 4
60567: NEG
60568: PUSH
60569: EMPTY
60570: LIST
60571: LIST
60572: PUSH
60573: LD_INT 2
60575: NEG
60576: PUSH
60577: LD_INT 4
60579: NEG
60580: PUSH
60581: EMPTY
60582: LIST
60583: LIST
60584: PUSH
60585: LD_INT 4
60587: NEG
60588: PUSH
60589: LD_INT 2
60591: NEG
60592: PUSH
60593: EMPTY
60594: LIST
60595: LIST
60596: PUSH
60597: LD_INT 0
60599: PUSH
60600: LD_INT 4
60602: NEG
60603: PUSH
60604: EMPTY
60605: LIST
60606: LIST
60607: PUSH
60608: LD_INT 0
60610: PUSH
60611: LD_INT 5
60613: NEG
60614: PUSH
60615: EMPTY
60616: LIST
60617: LIST
60618: PUSH
60619: LD_INT 1
60621: PUSH
60622: LD_INT 4
60624: NEG
60625: PUSH
60626: EMPTY
60627: LIST
60628: LIST
60629: PUSH
60630: LD_INT 1
60632: PUSH
60633: LD_INT 3
60635: NEG
60636: PUSH
60637: EMPTY
60638: LIST
60639: LIST
60640: PUSH
60641: LD_INT 0
60643: PUSH
60644: LD_INT 3
60646: NEG
60647: PUSH
60648: EMPTY
60649: LIST
60650: LIST
60651: PUSH
60652: LD_INT 1
60654: NEG
60655: PUSH
60656: LD_INT 4
60658: NEG
60659: PUSH
60660: EMPTY
60661: LIST
60662: LIST
60663: PUSH
60664: LD_INT 1
60666: NEG
60667: PUSH
60668: LD_INT 5
60670: NEG
60671: PUSH
60672: EMPTY
60673: LIST
60674: LIST
60675: PUSH
60676: LD_INT 2
60678: PUSH
60679: LD_INT 3
60681: NEG
60682: PUSH
60683: EMPTY
60684: LIST
60685: LIST
60686: PUSH
60687: LD_INT 2
60689: NEG
60690: PUSH
60691: LD_INT 5
60693: NEG
60694: PUSH
60695: EMPTY
60696: LIST
60697: LIST
60698: PUSH
60699: EMPTY
60700: LIST
60701: LIST
60702: LIST
60703: LIST
60704: LIST
60705: LIST
60706: LIST
60707: LIST
60708: LIST
60709: LIST
60710: LIST
60711: LIST
60712: LIST
60713: LIST
60714: LIST
60715: LIST
60716: LIST
60717: LIST
60718: LIST
60719: LIST
60720: LIST
60721: LIST
60722: LIST
60723: LIST
60724: LIST
60725: LIST
60726: LIST
60727: LIST
60728: LIST
60729: LIST
60730: LIST
60731: LIST
60732: LIST
60733: LIST
60734: LIST
60735: LIST
60736: LIST
60737: LIST
60738: LIST
60739: LIST
60740: LIST
60741: LIST
60742: LIST
60743: LIST
60744: LIST
60745: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
60746: LD_ADDR_VAR 0 31
60750: PUSH
60751: LD_INT 0
60753: PUSH
60754: LD_INT 4
60756: PUSH
60757: EMPTY
60758: LIST
60759: LIST
60760: PUSH
60761: LD_INT 0
60763: PUSH
60764: LD_INT 3
60766: PUSH
60767: EMPTY
60768: LIST
60769: LIST
60770: PUSH
60771: LD_INT 1
60773: PUSH
60774: LD_INT 4
60776: PUSH
60777: EMPTY
60778: LIST
60779: LIST
60780: PUSH
60781: LD_INT 1
60783: PUSH
60784: LD_INT 5
60786: PUSH
60787: EMPTY
60788: LIST
60789: LIST
60790: PUSH
60791: LD_INT 0
60793: PUSH
60794: LD_INT 5
60796: PUSH
60797: EMPTY
60798: LIST
60799: LIST
60800: PUSH
60801: LD_INT 1
60803: NEG
60804: PUSH
60805: LD_INT 4
60807: PUSH
60808: EMPTY
60809: LIST
60810: LIST
60811: PUSH
60812: LD_INT 1
60814: NEG
60815: PUSH
60816: LD_INT 3
60818: PUSH
60819: EMPTY
60820: LIST
60821: LIST
60822: PUSH
60823: LD_INT 2
60825: PUSH
60826: LD_INT 5
60828: PUSH
60829: EMPTY
60830: LIST
60831: LIST
60832: PUSH
60833: LD_INT 2
60835: NEG
60836: PUSH
60837: LD_INT 3
60839: PUSH
60840: EMPTY
60841: LIST
60842: LIST
60843: PUSH
60844: LD_INT 3
60846: NEG
60847: PUSH
60848: LD_INT 0
60850: PUSH
60851: EMPTY
60852: LIST
60853: LIST
60854: PUSH
60855: LD_INT 3
60857: NEG
60858: PUSH
60859: LD_INT 1
60861: NEG
60862: PUSH
60863: EMPTY
60864: LIST
60865: LIST
60866: PUSH
60867: LD_INT 2
60869: NEG
60870: PUSH
60871: LD_INT 0
60873: PUSH
60874: EMPTY
60875: LIST
60876: LIST
60877: PUSH
60878: LD_INT 2
60880: NEG
60881: PUSH
60882: LD_INT 1
60884: PUSH
60885: EMPTY
60886: LIST
60887: LIST
60888: PUSH
60889: LD_INT 3
60891: NEG
60892: PUSH
60893: LD_INT 1
60895: PUSH
60896: EMPTY
60897: LIST
60898: LIST
60899: PUSH
60900: LD_INT 4
60902: NEG
60903: PUSH
60904: LD_INT 0
60906: PUSH
60907: EMPTY
60908: LIST
60909: LIST
60910: PUSH
60911: LD_INT 4
60913: NEG
60914: PUSH
60915: LD_INT 1
60917: NEG
60918: PUSH
60919: EMPTY
60920: LIST
60921: LIST
60922: PUSH
60923: LD_INT 4
60925: NEG
60926: PUSH
60927: LD_INT 2
60929: NEG
60930: PUSH
60931: EMPTY
60932: LIST
60933: LIST
60934: PUSH
60935: LD_INT 2
60937: NEG
60938: PUSH
60939: LD_INT 2
60941: PUSH
60942: EMPTY
60943: LIST
60944: LIST
60945: PUSH
60946: LD_INT 4
60948: NEG
60949: PUSH
60950: LD_INT 4
60952: NEG
60953: PUSH
60954: EMPTY
60955: LIST
60956: LIST
60957: PUSH
60958: LD_INT 4
60960: NEG
60961: PUSH
60962: LD_INT 5
60964: NEG
60965: PUSH
60966: EMPTY
60967: LIST
60968: LIST
60969: PUSH
60970: LD_INT 3
60972: NEG
60973: PUSH
60974: LD_INT 4
60976: NEG
60977: PUSH
60978: EMPTY
60979: LIST
60980: LIST
60981: PUSH
60982: LD_INT 3
60984: NEG
60985: PUSH
60986: LD_INT 3
60988: NEG
60989: PUSH
60990: EMPTY
60991: LIST
60992: LIST
60993: PUSH
60994: LD_INT 4
60996: NEG
60997: PUSH
60998: LD_INT 3
61000: NEG
61001: PUSH
61002: EMPTY
61003: LIST
61004: LIST
61005: PUSH
61006: LD_INT 5
61008: NEG
61009: PUSH
61010: LD_INT 4
61012: NEG
61013: PUSH
61014: EMPTY
61015: LIST
61016: LIST
61017: PUSH
61018: LD_INT 5
61020: NEG
61021: PUSH
61022: LD_INT 5
61024: NEG
61025: PUSH
61026: EMPTY
61027: LIST
61028: LIST
61029: PUSH
61030: LD_INT 3
61032: NEG
61033: PUSH
61034: LD_INT 5
61036: NEG
61037: PUSH
61038: EMPTY
61039: LIST
61040: LIST
61041: PUSH
61042: LD_INT 5
61044: NEG
61045: PUSH
61046: LD_INT 3
61048: NEG
61049: PUSH
61050: EMPTY
61051: LIST
61052: LIST
61053: PUSH
61054: LD_INT 0
61056: PUSH
61057: LD_INT 3
61059: NEG
61060: PUSH
61061: EMPTY
61062: LIST
61063: LIST
61064: PUSH
61065: LD_INT 0
61067: PUSH
61068: LD_INT 4
61070: NEG
61071: PUSH
61072: EMPTY
61073: LIST
61074: LIST
61075: PUSH
61076: LD_INT 1
61078: PUSH
61079: LD_INT 3
61081: NEG
61082: PUSH
61083: EMPTY
61084: LIST
61085: LIST
61086: PUSH
61087: LD_INT 1
61089: PUSH
61090: LD_INT 2
61092: NEG
61093: PUSH
61094: EMPTY
61095: LIST
61096: LIST
61097: PUSH
61098: LD_INT 0
61100: PUSH
61101: LD_INT 2
61103: NEG
61104: PUSH
61105: EMPTY
61106: LIST
61107: LIST
61108: PUSH
61109: LD_INT 1
61111: NEG
61112: PUSH
61113: LD_INT 3
61115: NEG
61116: PUSH
61117: EMPTY
61118: LIST
61119: LIST
61120: PUSH
61121: LD_INT 1
61123: NEG
61124: PUSH
61125: LD_INT 4
61127: NEG
61128: PUSH
61129: EMPTY
61130: LIST
61131: LIST
61132: PUSH
61133: LD_INT 2
61135: PUSH
61136: LD_INT 2
61138: NEG
61139: PUSH
61140: EMPTY
61141: LIST
61142: LIST
61143: PUSH
61144: LD_INT 2
61146: NEG
61147: PUSH
61148: LD_INT 4
61150: NEG
61151: PUSH
61152: EMPTY
61153: LIST
61154: LIST
61155: PUSH
61156: LD_INT 4
61158: PUSH
61159: LD_INT 0
61161: PUSH
61162: EMPTY
61163: LIST
61164: LIST
61165: PUSH
61166: LD_INT 4
61168: PUSH
61169: LD_INT 1
61171: NEG
61172: PUSH
61173: EMPTY
61174: LIST
61175: LIST
61176: PUSH
61177: LD_INT 5
61179: PUSH
61180: LD_INT 0
61182: PUSH
61183: EMPTY
61184: LIST
61185: LIST
61186: PUSH
61187: LD_INT 5
61189: PUSH
61190: LD_INT 1
61192: PUSH
61193: EMPTY
61194: LIST
61195: LIST
61196: PUSH
61197: LD_INT 4
61199: PUSH
61200: LD_INT 1
61202: PUSH
61203: EMPTY
61204: LIST
61205: LIST
61206: PUSH
61207: LD_INT 3
61209: PUSH
61210: LD_INT 0
61212: PUSH
61213: EMPTY
61214: LIST
61215: LIST
61216: PUSH
61217: LD_INT 3
61219: PUSH
61220: LD_INT 1
61222: NEG
61223: PUSH
61224: EMPTY
61225: LIST
61226: LIST
61227: PUSH
61228: LD_INT 3
61230: PUSH
61231: LD_INT 2
61233: NEG
61234: PUSH
61235: EMPTY
61236: LIST
61237: LIST
61238: PUSH
61239: LD_INT 5
61241: PUSH
61242: LD_INT 2
61244: PUSH
61245: EMPTY
61246: LIST
61247: LIST
61248: PUSH
61249: EMPTY
61250: LIST
61251: LIST
61252: LIST
61253: LIST
61254: LIST
61255: LIST
61256: LIST
61257: LIST
61258: LIST
61259: LIST
61260: LIST
61261: LIST
61262: LIST
61263: LIST
61264: LIST
61265: LIST
61266: LIST
61267: LIST
61268: LIST
61269: LIST
61270: LIST
61271: LIST
61272: LIST
61273: LIST
61274: LIST
61275: LIST
61276: LIST
61277: LIST
61278: LIST
61279: LIST
61280: LIST
61281: LIST
61282: LIST
61283: LIST
61284: LIST
61285: LIST
61286: LIST
61287: LIST
61288: LIST
61289: LIST
61290: LIST
61291: LIST
61292: LIST
61293: LIST
61294: LIST
61295: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
61296: LD_ADDR_VAR 0 32
61300: PUSH
61301: LD_INT 4
61303: NEG
61304: PUSH
61305: LD_INT 0
61307: PUSH
61308: EMPTY
61309: LIST
61310: LIST
61311: PUSH
61312: LD_INT 4
61314: NEG
61315: PUSH
61316: LD_INT 1
61318: NEG
61319: PUSH
61320: EMPTY
61321: LIST
61322: LIST
61323: PUSH
61324: LD_INT 3
61326: NEG
61327: PUSH
61328: LD_INT 0
61330: PUSH
61331: EMPTY
61332: LIST
61333: LIST
61334: PUSH
61335: LD_INT 3
61337: NEG
61338: PUSH
61339: LD_INT 1
61341: PUSH
61342: EMPTY
61343: LIST
61344: LIST
61345: PUSH
61346: LD_INT 4
61348: NEG
61349: PUSH
61350: LD_INT 1
61352: PUSH
61353: EMPTY
61354: LIST
61355: LIST
61356: PUSH
61357: LD_INT 5
61359: NEG
61360: PUSH
61361: LD_INT 0
61363: PUSH
61364: EMPTY
61365: LIST
61366: LIST
61367: PUSH
61368: LD_INT 5
61370: NEG
61371: PUSH
61372: LD_INT 1
61374: NEG
61375: PUSH
61376: EMPTY
61377: LIST
61378: LIST
61379: PUSH
61380: LD_INT 5
61382: NEG
61383: PUSH
61384: LD_INT 2
61386: NEG
61387: PUSH
61388: EMPTY
61389: LIST
61390: LIST
61391: PUSH
61392: LD_INT 3
61394: NEG
61395: PUSH
61396: LD_INT 2
61398: PUSH
61399: EMPTY
61400: LIST
61401: LIST
61402: PUSH
61403: LD_INT 3
61405: NEG
61406: PUSH
61407: LD_INT 3
61409: NEG
61410: PUSH
61411: EMPTY
61412: LIST
61413: LIST
61414: PUSH
61415: LD_INT 3
61417: NEG
61418: PUSH
61419: LD_INT 4
61421: NEG
61422: PUSH
61423: EMPTY
61424: LIST
61425: LIST
61426: PUSH
61427: LD_INT 2
61429: NEG
61430: PUSH
61431: LD_INT 3
61433: NEG
61434: PUSH
61435: EMPTY
61436: LIST
61437: LIST
61438: PUSH
61439: LD_INT 2
61441: NEG
61442: PUSH
61443: LD_INT 2
61445: NEG
61446: PUSH
61447: EMPTY
61448: LIST
61449: LIST
61450: PUSH
61451: LD_INT 3
61453: NEG
61454: PUSH
61455: LD_INT 2
61457: NEG
61458: PUSH
61459: EMPTY
61460: LIST
61461: LIST
61462: PUSH
61463: LD_INT 4
61465: NEG
61466: PUSH
61467: LD_INT 3
61469: NEG
61470: PUSH
61471: EMPTY
61472: LIST
61473: LIST
61474: PUSH
61475: LD_INT 4
61477: NEG
61478: PUSH
61479: LD_INT 4
61481: NEG
61482: PUSH
61483: EMPTY
61484: LIST
61485: LIST
61486: PUSH
61487: LD_INT 2
61489: NEG
61490: PUSH
61491: LD_INT 4
61493: NEG
61494: PUSH
61495: EMPTY
61496: LIST
61497: LIST
61498: PUSH
61499: LD_INT 4
61501: NEG
61502: PUSH
61503: LD_INT 2
61505: NEG
61506: PUSH
61507: EMPTY
61508: LIST
61509: LIST
61510: PUSH
61511: LD_INT 0
61513: PUSH
61514: LD_INT 4
61516: NEG
61517: PUSH
61518: EMPTY
61519: LIST
61520: LIST
61521: PUSH
61522: LD_INT 0
61524: PUSH
61525: LD_INT 5
61527: NEG
61528: PUSH
61529: EMPTY
61530: LIST
61531: LIST
61532: PUSH
61533: LD_INT 1
61535: PUSH
61536: LD_INT 4
61538: NEG
61539: PUSH
61540: EMPTY
61541: LIST
61542: LIST
61543: PUSH
61544: LD_INT 1
61546: PUSH
61547: LD_INT 3
61549: NEG
61550: PUSH
61551: EMPTY
61552: LIST
61553: LIST
61554: PUSH
61555: LD_INT 0
61557: PUSH
61558: LD_INT 3
61560: NEG
61561: PUSH
61562: EMPTY
61563: LIST
61564: LIST
61565: PUSH
61566: LD_INT 1
61568: NEG
61569: PUSH
61570: LD_INT 4
61572: NEG
61573: PUSH
61574: EMPTY
61575: LIST
61576: LIST
61577: PUSH
61578: LD_INT 1
61580: NEG
61581: PUSH
61582: LD_INT 5
61584: NEG
61585: PUSH
61586: EMPTY
61587: LIST
61588: LIST
61589: PUSH
61590: LD_INT 2
61592: PUSH
61593: LD_INT 3
61595: NEG
61596: PUSH
61597: EMPTY
61598: LIST
61599: LIST
61600: PUSH
61601: LD_INT 2
61603: NEG
61604: PUSH
61605: LD_INT 5
61607: NEG
61608: PUSH
61609: EMPTY
61610: LIST
61611: LIST
61612: PUSH
61613: LD_INT 3
61615: PUSH
61616: LD_INT 0
61618: PUSH
61619: EMPTY
61620: LIST
61621: LIST
61622: PUSH
61623: LD_INT 3
61625: PUSH
61626: LD_INT 1
61628: NEG
61629: PUSH
61630: EMPTY
61631: LIST
61632: LIST
61633: PUSH
61634: LD_INT 4
61636: PUSH
61637: LD_INT 0
61639: PUSH
61640: EMPTY
61641: LIST
61642: LIST
61643: PUSH
61644: LD_INT 4
61646: PUSH
61647: LD_INT 1
61649: PUSH
61650: EMPTY
61651: LIST
61652: LIST
61653: PUSH
61654: LD_INT 3
61656: PUSH
61657: LD_INT 1
61659: PUSH
61660: EMPTY
61661: LIST
61662: LIST
61663: PUSH
61664: LD_INT 2
61666: PUSH
61667: LD_INT 0
61669: PUSH
61670: EMPTY
61671: LIST
61672: LIST
61673: PUSH
61674: LD_INT 2
61676: PUSH
61677: LD_INT 1
61679: NEG
61680: PUSH
61681: EMPTY
61682: LIST
61683: LIST
61684: PUSH
61685: LD_INT 2
61687: PUSH
61688: LD_INT 2
61690: NEG
61691: PUSH
61692: EMPTY
61693: LIST
61694: LIST
61695: PUSH
61696: LD_INT 4
61698: PUSH
61699: LD_INT 2
61701: PUSH
61702: EMPTY
61703: LIST
61704: LIST
61705: PUSH
61706: LD_INT 4
61708: PUSH
61709: LD_INT 4
61711: PUSH
61712: EMPTY
61713: LIST
61714: LIST
61715: PUSH
61716: LD_INT 4
61718: PUSH
61719: LD_INT 3
61721: PUSH
61722: EMPTY
61723: LIST
61724: LIST
61725: PUSH
61726: LD_INT 5
61728: PUSH
61729: LD_INT 4
61731: PUSH
61732: EMPTY
61733: LIST
61734: LIST
61735: PUSH
61736: LD_INT 5
61738: PUSH
61739: LD_INT 5
61741: PUSH
61742: EMPTY
61743: LIST
61744: LIST
61745: PUSH
61746: LD_INT 4
61748: PUSH
61749: LD_INT 5
61751: PUSH
61752: EMPTY
61753: LIST
61754: LIST
61755: PUSH
61756: LD_INT 3
61758: PUSH
61759: LD_INT 4
61761: PUSH
61762: EMPTY
61763: LIST
61764: LIST
61765: PUSH
61766: LD_INT 3
61768: PUSH
61769: LD_INT 3
61771: PUSH
61772: EMPTY
61773: LIST
61774: LIST
61775: PUSH
61776: LD_INT 5
61778: PUSH
61779: LD_INT 3
61781: PUSH
61782: EMPTY
61783: LIST
61784: LIST
61785: PUSH
61786: LD_INT 3
61788: PUSH
61789: LD_INT 5
61791: PUSH
61792: EMPTY
61793: LIST
61794: LIST
61795: PUSH
61796: EMPTY
61797: LIST
61798: LIST
61799: LIST
61800: LIST
61801: LIST
61802: LIST
61803: LIST
61804: LIST
61805: LIST
61806: LIST
61807: LIST
61808: LIST
61809: LIST
61810: LIST
61811: LIST
61812: LIST
61813: LIST
61814: LIST
61815: LIST
61816: LIST
61817: LIST
61818: LIST
61819: LIST
61820: LIST
61821: LIST
61822: LIST
61823: LIST
61824: LIST
61825: LIST
61826: LIST
61827: LIST
61828: LIST
61829: LIST
61830: LIST
61831: LIST
61832: LIST
61833: LIST
61834: LIST
61835: LIST
61836: LIST
61837: LIST
61838: LIST
61839: LIST
61840: LIST
61841: LIST
61842: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
61843: LD_ADDR_VAR 0 33
61847: PUSH
61848: LD_INT 4
61850: NEG
61851: PUSH
61852: LD_INT 4
61854: NEG
61855: PUSH
61856: EMPTY
61857: LIST
61858: LIST
61859: PUSH
61860: LD_INT 4
61862: NEG
61863: PUSH
61864: LD_INT 5
61866: NEG
61867: PUSH
61868: EMPTY
61869: LIST
61870: LIST
61871: PUSH
61872: LD_INT 3
61874: NEG
61875: PUSH
61876: LD_INT 4
61878: NEG
61879: PUSH
61880: EMPTY
61881: LIST
61882: LIST
61883: PUSH
61884: LD_INT 3
61886: NEG
61887: PUSH
61888: LD_INT 3
61890: NEG
61891: PUSH
61892: EMPTY
61893: LIST
61894: LIST
61895: PUSH
61896: LD_INT 4
61898: NEG
61899: PUSH
61900: LD_INT 3
61902: NEG
61903: PUSH
61904: EMPTY
61905: LIST
61906: LIST
61907: PUSH
61908: LD_INT 5
61910: NEG
61911: PUSH
61912: LD_INT 4
61914: NEG
61915: PUSH
61916: EMPTY
61917: LIST
61918: LIST
61919: PUSH
61920: LD_INT 5
61922: NEG
61923: PUSH
61924: LD_INT 5
61926: NEG
61927: PUSH
61928: EMPTY
61929: LIST
61930: LIST
61931: PUSH
61932: LD_INT 3
61934: NEG
61935: PUSH
61936: LD_INT 5
61938: NEG
61939: PUSH
61940: EMPTY
61941: LIST
61942: LIST
61943: PUSH
61944: LD_INT 5
61946: NEG
61947: PUSH
61948: LD_INT 3
61950: NEG
61951: PUSH
61952: EMPTY
61953: LIST
61954: LIST
61955: PUSH
61956: LD_INT 0
61958: PUSH
61959: LD_INT 3
61961: NEG
61962: PUSH
61963: EMPTY
61964: LIST
61965: LIST
61966: PUSH
61967: LD_INT 0
61969: PUSH
61970: LD_INT 4
61972: NEG
61973: PUSH
61974: EMPTY
61975: LIST
61976: LIST
61977: PUSH
61978: LD_INT 1
61980: PUSH
61981: LD_INT 3
61983: NEG
61984: PUSH
61985: EMPTY
61986: LIST
61987: LIST
61988: PUSH
61989: LD_INT 1
61991: PUSH
61992: LD_INT 2
61994: NEG
61995: PUSH
61996: EMPTY
61997: LIST
61998: LIST
61999: PUSH
62000: LD_INT 0
62002: PUSH
62003: LD_INT 2
62005: NEG
62006: PUSH
62007: EMPTY
62008: LIST
62009: LIST
62010: PUSH
62011: LD_INT 1
62013: NEG
62014: PUSH
62015: LD_INT 3
62017: NEG
62018: PUSH
62019: EMPTY
62020: LIST
62021: LIST
62022: PUSH
62023: LD_INT 1
62025: NEG
62026: PUSH
62027: LD_INT 4
62029: NEG
62030: PUSH
62031: EMPTY
62032: LIST
62033: LIST
62034: PUSH
62035: LD_INT 2
62037: PUSH
62038: LD_INT 2
62040: NEG
62041: PUSH
62042: EMPTY
62043: LIST
62044: LIST
62045: PUSH
62046: LD_INT 2
62048: NEG
62049: PUSH
62050: LD_INT 4
62052: NEG
62053: PUSH
62054: EMPTY
62055: LIST
62056: LIST
62057: PUSH
62058: LD_INT 4
62060: PUSH
62061: LD_INT 0
62063: PUSH
62064: EMPTY
62065: LIST
62066: LIST
62067: PUSH
62068: LD_INT 4
62070: PUSH
62071: LD_INT 1
62073: NEG
62074: PUSH
62075: EMPTY
62076: LIST
62077: LIST
62078: PUSH
62079: LD_INT 5
62081: PUSH
62082: LD_INT 0
62084: PUSH
62085: EMPTY
62086: LIST
62087: LIST
62088: PUSH
62089: LD_INT 5
62091: PUSH
62092: LD_INT 1
62094: PUSH
62095: EMPTY
62096: LIST
62097: LIST
62098: PUSH
62099: LD_INT 4
62101: PUSH
62102: LD_INT 1
62104: PUSH
62105: EMPTY
62106: LIST
62107: LIST
62108: PUSH
62109: LD_INT 3
62111: PUSH
62112: LD_INT 0
62114: PUSH
62115: EMPTY
62116: LIST
62117: LIST
62118: PUSH
62119: LD_INT 3
62121: PUSH
62122: LD_INT 1
62124: NEG
62125: PUSH
62126: EMPTY
62127: LIST
62128: LIST
62129: PUSH
62130: LD_INT 3
62132: PUSH
62133: LD_INT 2
62135: NEG
62136: PUSH
62137: EMPTY
62138: LIST
62139: LIST
62140: PUSH
62141: LD_INT 5
62143: PUSH
62144: LD_INT 2
62146: PUSH
62147: EMPTY
62148: LIST
62149: LIST
62150: PUSH
62151: LD_INT 3
62153: PUSH
62154: LD_INT 3
62156: PUSH
62157: EMPTY
62158: LIST
62159: LIST
62160: PUSH
62161: LD_INT 3
62163: PUSH
62164: LD_INT 2
62166: PUSH
62167: EMPTY
62168: LIST
62169: LIST
62170: PUSH
62171: LD_INT 4
62173: PUSH
62174: LD_INT 3
62176: PUSH
62177: EMPTY
62178: LIST
62179: LIST
62180: PUSH
62181: LD_INT 4
62183: PUSH
62184: LD_INT 4
62186: PUSH
62187: EMPTY
62188: LIST
62189: LIST
62190: PUSH
62191: LD_INT 3
62193: PUSH
62194: LD_INT 4
62196: PUSH
62197: EMPTY
62198: LIST
62199: LIST
62200: PUSH
62201: LD_INT 2
62203: PUSH
62204: LD_INT 3
62206: PUSH
62207: EMPTY
62208: LIST
62209: LIST
62210: PUSH
62211: LD_INT 2
62213: PUSH
62214: LD_INT 2
62216: PUSH
62217: EMPTY
62218: LIST
62219: LIST
62220: PUSH
62221: LD_INT 4
62223: PUSH
62224: LD_INT 2
62226: PUSH
62227: EMPTY
62228: LIST
62229: LIST
62230: PUSH
62231: LD_INT 2
62233: PUSH
62234: LD_INT 4
62236: PUSH
62237: EMPTY
62238: LIST
62239: LIST
62240: PUSH
62241: LD_INT 0
62243: PUSH
62244: LD_INT 4
62246: PUSH
62247: EMPTY
62248: LIST
62249: LIST
62250: PUSH
62251: LD_INT 0
62253: PUSH
62254: LD_INT 3
62256: PUSH
62257: EMPTY
62258: LIST
62259: LIST
62260: PUSH
62261: LD_INT 1
62263: PUSH
62264: LD_INT 4
62266: PUSH
62267: EMPTY
62268: LIST
62269: LIST
62270: PUSH
62271: LD_INT 1
62273: PUSH
62274: LD_INT 5
62276: PUSH
62277: EMPTY
62278: LIST
62279: LIST
62280: PUSH
62281: LD_INT 0
62283: PUSH
62284: LD_INT 5
62286: PUSH
62287: EMPTY
62288: LIST
62289: LIST
62290: PUSH
62291: LD_INT 1
62293: NEG
62294: PUSH
62295: LD_INT 4
62297: PUSH
62298: EMPTY
62299: LIST
62300: LIST
62301: PUSH
62302: LD_INT 1
62304: NEG
62305: PUSH
62306: LD_INT 3
62308: PUSH
62309: EMPTY
62310: LIST
62311: LIST
62312: PUSH
62313: LD_INT 2
62315: PUSH
62316: LD_INT 5
62318: PUSH
62319: EMPTY
62320: LIST
62321: LIST
62322: PUSH
62323: LD_INT 2
62325: NEG
62326: PUSH
62327: LD_INT 3
62329: PUSH
62330: EMPTY
62331: LIST
62332: LIST
62333: PUSH
62334: EMPTY
62335: LIST
62336: LIST
62337: LIST
62338: LIST
62339: LIST
62340: LIST
62341: LIST
62342: LIST
62343: LIST
62344: LIST
62345: LIST
62346: LIST
62347: LIST
62348: LIST
62349: LIST
62350: LIST
62351: LIST
62352: LIST
62353: LIST
62354: LIST
62355: LIST
62356: LIST
62357: LIST
62358: LIST
62359: LIST
62360: LIST
62361: LIST
62362: LIST
62363: LIST
62364: LIST
62365: LIST
62366: LIST
62367: LIST
62368: LIST
62369: LIST
62370: LIST
62371: LIST
62372: LIST
62373: LIST
62374: LIST
62375: LIST
62376: LIST
62377: LIST
62378: LIST
62379: LIST
62380: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
62381: LD_ADDR_VAR 0 34
62385: PUSH
62386: LD_INT 0
62388: PUSH
62389: LD_INT 4
62391: NEG
62392: PUSH
62393: EMPTY
62394: LIST
62395: LIST
62396: PUSH
62397: LD_INT 0
62399: PUSH
62400: LD_INT 5
62402: NEG
62403: PUSH
62404: EMPTY
62405: LIST
62406: LIST
62407: PUSH
62408: LD_INT 1
62410: PUSH
62411: LD_INT 4
62413: NEG
62414: PUSH
62415: EMPTY
62416: LIST
62417: LIST
62418: PUSH
62419: LD_INT 1
62421: PUSH
62422: LD_INT 3
62424: NEG
62425: PUSH
62426: EMPTY
62427: LIST
62428: LIST
62429: PUSH
62430: LD_INT 0
62432: PUSH
62433: LD_INT 3
62435: NEG
62436: PUSH
62437: EMPTY
62438: LIST
62439: LIST
62440: PUSH
62441: LD_INT 1
62443: NEG
62444: PUSH
62445: LD_INT 4
62447: NEG
62448: PUSH
62449: EMPTY
62450: LIST
62451: LIST
62452: PUSH
62453: LD_INT 1
62455: NEG
62456: PUSH
62457: LD_INT 5
62459: NEG
62460: PUSH
62461: EMPTY
62462: LIST
62463: LIST
62464: PUSH
62465: LD_INT 2
62467: PUSH
62468: LD_INT 3
62470: NEG
62471: PUSH
62472: EMPTY
62473: LIST
62474: LIST
62475: PUSH
62476: LD_INT 2
62478: NEG
62479: PUSH
62480: LD_INT 5
62482: NEG
62483: PUSH
62484: EMPTY
62485: LIST
62486: LIST
62487: PUSH
62488: LD_INT 3
62490: PUSH
62491: LD_INT 0
62493: PUSH
62494: EMPTY
62495: LIST
62496: LIST
62497: PUSH
62498: LD_INT 3
62500: PUSH
62501: LD_INT 1
62503: NEG
62504: PUSH
62505: EMPTY
62506: LIST
62507: LIST
62508: PUSH
62509: LD_INT 4
62511: PUSH
62512: LD_INT 0
62514: PUSH
62515: EMPTY
62516: LIST
62517: LIST
62518: PUSH
62519: LD_INT 4
62521: PUSH
62522: LD_INT 1
62524: PUSH
62525: EMPTY
62526: LIST
62527: LIST
62528: PUSH
62529: LD_INT 3
62531: PUSH
62532: LD_INT 1
62534: PUSH
62535: EMPTY
62536: LIST
62537: LIST
62538: PUSH
62539: LD_INT 2
62541: PUSH
62542: LD_INT 0
62544: PUSH
62545: EMPTY
62546: LIST
62547: LIST
62548: PUSH
62549: LD_INT 2
62551: PUSH
62552: LD_INT 1
62554: NEG
62555: PUSH
62556: EMPTY
62557: LIST
62558: LIST
62559: PUSH
62560: LD_INT 2
62562: PUSH
62563: LD_INT 2
62565: NEG
62566: PUSH
62567: EMPTY
62568: LIST
62569: LIST
62570: PUSH
62571: LD_INT 4
62573: PUSH
62574: LD_INT 2
62576: PUSH
62577: EMPTY
62578: LIST
62579: LIST
62580: PUSH
62581: LD_INT 4
62583: PUSH
62584: LD_INT 4
62586: PUSH
62587: EMPTY
62588: LIST
62589: LIST
62590: PUSH
62591: LD_INT 4
62593: PUSH
62594: LD_INT 3
62596: PUSH
62597: EMPTY
62598: LIST
62599: LIST
62600: PUSH
62601: LD_INT 5
62603: PUSH
62604: LD_INT 4
62606: PUSH
62607: EMPTY
62608: LIST
62609: LIST
62610: PUSH
62611: LD_INT 5
62613: PUSH
62614: LD_INT 5
62616: PUSH
62617: EMPTY
62618: LIST
62619: LIST
62620: PUSH
62621: LD_INT 4
62623: PUSH
62624: LD_INT 5
62626: PUSH
62627: EMPTY
62628: LIST
62629: LIST
62630: PUSH
62631: LD_INT 3
62633: PUSH
62634: LD_INT 4
62636: PUSH
62637: EMPTY
62638: LIST
62639: LIST
62640: PUSH
62641: LD_INT 3
62643: PUSH
62644: LD_INT 3
62646: PUSH
62647: EMPTY
62648: LIST
62649: LIST
62650: PUSH
62651: LD_INT 5
62653: PUSH
62654: LD_INT 3
62656: PUSH
62657: EMPTY
62658: LIST
62659: LIST
62660: PUSH
62661: LD_INT 3
62663: PUSH
62664: LD_INT 5
62666: PUSH
62667: EMPTY
62668: LIST
62669: LIST
62670: PUSH
62671: LD_INT 0
62673: PUSH
62674: LD_INT 3
62676: PUSH
62677: EMPTY
62678: LIST
62679: LIST
62680: PUSH
62681: LD_INT 0
62683: PUSH
62684: LD_INT 2
62686: PUSH
62687: EMPTY
62688: LIST
62689: LIST
62690: PUSH
62691: LD_INT 1
62693: PUSH
62694: LD_INT 3
62696: PUSH
62697: EMPTY
62698: LIST
62699: LIST
62700: PUSH
62701: LD_INT 1
62703: PUSH
62704: LD_INT 4
62706: PUSH
62707: EMPTY
62708: LIST
62709: LIST
62710: PUSH
62711: LD_INT 0
62713: PUSH
62714: LD_INT 4
62716: PUSH
62717: EMPTY
62718: LIST
62719: LIST
62720: PUSH
62721: LD_INT 1
62723: NEG
62724: PUSH
62725: LD_INT 3
62727: PUSH
62728: EMPTY
62729: LIST
62730: LIST
62731: PUSH
62732: LD_INT 1
62734: NEG
62735: PUSH
62736: LD_INT 2
62738: PUSH
62739: EMPTY
62740: LIST
62741: LIST
62742: PUSH
62743: LD_INT 2
62745: PUSH
62746: LD_INT 4
62748: PUSH
62749: EMPTY
62750: LIST
62751: LIST
62752: PUSH
62753: LD_INT 2
62755: NEG
62756: PUSH
62757: LD_INT 2
62759: PUSH
62760: EMPTY
62761: LIST
62762: LIST
62763: PUSH
62764: LD_INT 4
62766: NEG
62767: PUSH
62768: LD_INT 0
62770: PUSH
62771: EMPTY
62772: LIST
62773: LIST
62774: PUSH
62775: LD_INT 4
62777: NEG
62778: PUSH
62779: LD_INT 1
62781: NEG
62782: PUSH
62783: EMPTY
62784: LIST
62785: LIST
62786: PUSH
62787: LD_INT 3
62789: NEG
62790: PUSH
62791: LD_INT 0
62793: PUSH
62794: EMPTY
62795: LIST
62796: LIST
62797: PUSH
62798: LD_INT 3
62800: NEG
62801: PUSH
62802: LD_INT 1
62804: PUSH
62805: EMPTY
62806: LIST
62807: LIST
62808: PUSH
62809: LD_INT 4
62811: NEG
62812: PUSH
62813: LD_INT 1
62815: PUSH
62816: EMPTY
62817: LIST
62818: LIST
62819: PUSH
62820: LD_INT 5
62822: NEG
62823: PUSH
62824: LD_INT 0
62826: PUSH
62827: EMPTY
62828: LIST
62829: LIST
62830: PUSH
62831: LD_INT 5
62833: NEG
62834: PUSH
62835: LD_INT 1
62837: NEG
62838: PUSH
62839: EMPTY
62840: LIST
62841: LIST
62842: PUSH
62843: LD_INT 5
62845: NEG
62846: PUSH
62847: LD_INT 2
62849: NEG
62850: PUSH
62851: EMPTY
62852: LIST
62853: LIST
62854: PUSH
62855: LD_INT 3
62857: NEG
62858: PUSH
62859: LD_INT 2
62861: PUSH
62862: EMPTY
62863: LIST
62864: LIST
62865: PUSH
62866: EMPTY
62867: LIST
62868: LIST
62869: LIST
62870: LIST
62871: LIST
62872: LIST
62873: LIST
62874: LIST
62875: LIST
62876: LIST
62877: LIST
62878: LIST
62879: LIST
62880: LIST
62881: LIST
62882: LIST
62883: LIST
62884: LIST
62885: LIST
62886: LIST
62887: LIST
62888: LIST
62889: LIST
62890: LIST
62891: LIST
62892: LIST
62893: LIST
62894: LIST
62895: LIST
62896: LIST
62897: LIST
62898: LIST
62899: LIST
62900: LIST
62901: LIST
62902: LIST
62903: LIST
62904: LIST
62905: LIST
62906: LIST
62907: LIST
62908: LIST
62909: LIST
62910: LIST
62911: LIST
62912: ST_TO_ADDR
// end ; end ;
62913: GO 62916
62915: POP
// case btype of b_depot , b_warehouse :
62916: LD_VAR 0 1
62920: PUSH
62921: LD_INT 0
62923: DOUBLE
62924: EQUAL
62925: IFTRUE 62935
62927: LD_INT 1
62929: DOUBLE
62930: EQUAL
62931: IFTRUE 62935
62933: GO 63136
62935: POP
// case nation of nation_american :
62936: LD_VAR 0 5
62940: PUSH
62941: LD_INT 1
62943: DOUBLE
62944: EQUAL
62945: IFTRUE 62949
62947: GO 63005
62949: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
62950: LD_ADDR_VAR 0 9
62954: PUSH
62955: LD_VAR 0 11
62959: PUSH
62960: LD_VAR 0 12
62964: PUSH
62965: LD_VAR 0 13
62969: PUSH
62970: LD_VAR 0 14
62974: PUSH
62975: LD_VAR 0 15
62979: PUSH
62980: LD_VAR 0 16
62984: PUSH
62985: EMPTY
62986: LIST
62987: LIST
62988: LIST
62989: LIST
62990: LIST
62991: LIST
62992: PUSH
62993: LD_VAR 0 4
62997: PUSH
62998: LD_INT 1
63000: PLUS
63001: ARRAY
63002: ST_TO_ADDR
63003: GO 63134
63005: LD_INT 2
63007: DOUBLE
63008: EQUAL
63009: IFTRUE 63013
63011: GO 63069
63013: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
63014: LD_ADDR_VAR 0 9
63018: PUSH
63019: LD_VAR 0 17
63023: PUSH
63024: LD_VAR 0 18
63028: PUSH
63029: LD_VAR 0 19
63033: PUSH
63034: LD_VAR 0 20
63038: PUSH
63039: LD_VAR 0 21
63043: PUSH
63044: LD_VAR 0 22
63048: PUSH
63049: EMPTY
63050: LIST
63051: LIST
63052: LIST
63053: LIST
63054: LIST
63055: LIST
63056: PUSH
63057: LD_VAR 0 4
63061: PUSH
63062: LD_INT 1
63064: PLUS
63065: ARRAY
63066: ST_TO_ADDR
63067: GO 63134
63069: LD_INT 3
63071: DOUBLE
63072: EQUAL
63073: IFTRUE 63077
63075: GO 63133
63077: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
63078: LD_ADDR_VAR 0 9
63082: PUSH
63083: LD_VAR 0 23
63087: PUSH
63088: LD_VAR 0 24
63092: PUSH
63093: LD_VAR 0 25
63097: PUSH
63098: LD_VAR 0 26
63102: PUSH
63103: LD_VAR 0 27
63107: PUSH
63108: LD_VAR 0 28
63112: PUSH
63113: EMPTY
63114: LIST
63115: LIST
63116: LIST
63117: LIST
63118: LIST
63119: LIST
63120: PUSH
63121: LD_VAR 0 4
63125: PUSH
63126: LD_INT 1
63128: PLUS
63129: ARRAY
63130: ST_TO_ADDR
63131: GO 63134
63133: POP
63134: GO 63689
63136: LD_INT 2
63138: DOUBLE
63139: EQUAL
63140: IFTRUE 63150
63142: LD_INT 3
63144: DOUBLE
63145: EQUAL
63146: IFTRUE 63150
63148: GO 63206
63150: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
63151: LD_ADDR_VAR 0 9
63155: PUSH
63156: LD_VAR 0 29
63160: PUSH
63161: LD_VAR 0 30
63165: PUSH
63166: LD_VAR 0 31
63170: PUSH
63171: LD_VAR 0 32
63175: PUSH
63176: LD_VAR 0 33
63180: PUSH
63181: LD_VAR 0 34
63185: PUSH
63186: EMPTY
63187: LIST
63188: LIST
63189: LIST
63190: LIST
63191: LIST
63192: LIST
63193: PUSH
63194: LD_VAR 0 4
63198: PUSH
63199: LD_INT 1
63201: PLUS
63202: ARRAY
63203: ST_TO_ADDR
63204: GO 63689
63206: LD_INT 16
63208: DOUBLE
63209: EQUAL
63210: IFTRUE 63268
63212: LD_INT 17
63214: DOUBLE
63215: EQUAL
63216: IFTRUE 63268
63218: LD_INT 18
63220: DOUBLE
63221: EQUAL
63222: IFTRUE 63268
63224: LD_INT 19
63226: DOUBLE
63227: EQUAL
63228: IFTRUE 63268
63230: LD_INT 22
63232: DOUBLE
63233: EQUAL
63234: IFTRUE 63268
63236: LD_INT 20
63238: DOUBLE
63239: EQUAL
63240: IFTRUE 63268
63242: LD_INT 21
63244: DOUBLE
63245: EQUAL
63246: IFTRUE 63268
63248: LD_INT 23
63250: DOUBLE
63251: EQUAL
63252: IFTRUE 63268
63254: LD_INT 24
63256: DOUBLE
63257: EQUAL
63258: IFTRUE 63268
63260: LD_INT 25
63262: DOUBLE
63263: EQUAL
63264: IFTRUE 63268
63266: GO 63324
63268: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
63269: LD_ADDR_VAR 0 9
63273: PUSH
63274: LD_VAR 0 35
63278: PUSH
63279: LD_VAR 0 36
63283: PUSH
63284: LD_VAR 0 37
63288: PUSH
63289: LD_VAR 0 38
63293: PUSH
63294: LD_VAR 0 39
63298: PUSH
63299: LD_VAR 0 40
63303: PUSH
63304: EMPTY
63305: LIST
63306: LIST
63307: LIST
63308: LIST
63309: LIST
63310: LIST
63311: PUSH
63312: LD_VAR 0 4
63316: PUSH
63317: LD_INT 1
63319: PLUS
63320: ARRAY
63321: ST_TO_ADDR
63322: GO 63689
63324: LD_INT 6
63326: DOUBLE
63327: EQUAL
63328: IFTRUE 63380
63330: LD_INT 7
63332: DOUBLE
63333: EQUAL
63334: IFTRUE 63380
63336: LD_INT 8
63338: DOUBLE
63339: EQUAL
63340: IFTRUE 63380
63342: LD_INT 13
63344: DOUBLE
63345: EQUAL
63346: IFTRUE 63380
63348: LD_INT 12
63350: DOUBLE
63351: EQUAL
63352: IFTRUE 63380
63354: LD_INT 15
63356: DOUBLE
63357: EQUAL
63358: IFTRUE 63380
63360: LD_INT 11
63362: DOUBLE
63363: EQUAL
63364: IFTRUE 63380
63366: LD_INT 14
63368: DOUBLE
63369: EQUAL
63370: IFTRUE 63380
63372: LD_INT 10
63374: DOUBLE
63375: EQUAL
63376: IFTRUE 63380
63378: GO 63436
63380: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
63381: LD_ADDR_VAR 0 9
63385: PUSH
63386: LD_VAR 0 41
63390: PUSH
63391: LD_VAR 0 42
63395: PUSH
63396: LD_VAR 0 43
63400: PUSH
63401: LD_VAR 0 44
63405: PUSH
63406: LD_VAR 0 45
63410: PUSH
63411: LD_VAR 0 46
63415: PUSH
63416: EMPTY
63417: LIST
63418: LIST
63419: LIST
63420: LIST
63421: LIST
63422: LIST
63423: PUSH
63424: LD_VAR 0 4
63428: PUSH
63429: LD_INT 1
63431: PLUS
63432: ARRAY
63433: ST_TO_ADDR
63434: GO 63689
63436: LD_INT 36
63438: DOUBLE
63439: EQUAL
63440: IFTRUE 63444
63442: GO 63500
63444: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
63445: LD_ADDR_VAR 0 9
63449: PUSH
63450: LD_VAR 0 47
63454: PUSH
63455: LD_VAR 0 48
63459: PUSH
63460: LD_VAR 0 49
63464: PUSH
63465: LD_VAR 0 50
63469: PUSH
63470: LD_VAR 0 51
63474: PUSH
63475: LD_VAR 0 52
63479: PUSH
63480: EMPTY
63481: LIST
63482: LIST
63483: LIST
63484: LIST
63485: LIST
63486: LIST
63487: PUSH
63488: LD_VAR 0 4
63492: PUSH
63493: LD_INT 1
63495: PLUS
63496: ARRAY
63497: ST_TO_ADDR
63498: GO 63689
63500: LD_INT 4
63502: DOUBLE
63503: EQUAL
63504: IFTRUE 63526
63506: LD_INT 5
63508: DOUBLE
63509: EQUAL
63510: IFTRUE 63526
63512: LD_INT 34
63514: DOUBLE
63515: EQUAL
63516: IFTRUE 63526
63518: LD_INT 37
63520: DOUBLE
63521: EQUAL
63522: IFTRUE 63526
63524: GO 63582
63526: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
63527: LD_ADDR_VAR 0 9
63531: PUSH
63532: LD_VAR 0 53
63536: PUSH
63537: LD_VAR 0 54
63541: PUSH
63542: LD_VAR 0 55
63546: PUSH
63547: LD_VAR 0 56
63551: PUSH
63552: LD_VAR 0 57
63556: PUSH
63557: LD_VAR 0 58
63561: PUSH
63562: EMPTY
63563: LIST
63564: LIST
63565: LIST
63566: LIST
63567: LIST
63568: LIST
63569: PUSH
63570: LD_VAR 0 4
63574: PUSH
63575: LD_INT 1
63577: PLUS
63578: ARRAY
63579: ST_TO_ADDR
63580: GO 63689
63582: LD_INT 31
63584: DOUBLE
63585: EQUAL
63586: IFTRUE 63632
63588: LD_INT 32
63590: DOUBLE
63591: EQUAL
63592: IFTRUE 63632
63594: LD_INT 33
63596: DOUBLE
63597: EQUAL
63598: IFTRUE 63632
63600: LD_INT 27
63602: DOUBLE
63603: EQUAL
63604: IFTRUE 63632
63606: LD_INT 26
63608: DOUBLE
63609: EQUAL
63610: IFTRUE 63632
63612: LD_INT 28
63614: DOUBLE
63615: EQUAL
63616: IFTRUE 63632
63618: LD_INT 29
63620: DOUBLE
63621: EQUAL
63622: IFTRUE 63632
63624: LD_INT 30
63626: DOUBLE
63627: EQUAL
63628: IFTRUE 63632
63630: GO 63688
63632: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
63633: LD_ADDR_VAR 0 9
63637: PUSH
63638: LD_VAR 0 59
63642: PUSH
63643: LD_VAR 0 60
63647: PUSH
63648: LD_VAR 0 61
63652: PUSH
63653: LD_VAR 0 62
63657: PUSH
63658: LD_VAR 0 63
63662: PUSH
63663: LD_VAR 0 64
63667: PUSH
63668: EMPTY
63669: LIST
63670: LIST
63671: LIST
63672: LIST
63673: LIST
63674: LIST
63675: PUSH
63676: LD_VAR 0 4
63680: PUSH
63681: LD_INT 1
63683: PLUS
63684: ARRAY
63685: ST_TO_ADDR
63686: GO 63689
63688: POP
// temp_list2 = [ ] ;
63689: LD_ADDR_VAR 0 10
63693: PUSH
63694: EMPTY
63695: ST_TO_ADDR
// for i in temp_list do
63696: LD_ADDR_VAR 0 8
63700: PUSH
63701: LD_VAR 0 9
63705: PUSH
63706: FOR_IN
63707: IFFALSE 63759
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
63709: LD_ADDR_VAR 0 10
63713: PUSH
63714: LD_VAR 0 10
63718: PUSH
63719: LD_VAR 0 8
63723: PUSH
63724: LD_INT 1
63726: ARRAY
63727: PUSH
63728: LD_VAR 0 2
63732: PLUS
63733: PUSH
63734: LD_VAR 0 8
63738: PUSH
63739: LD_INT 2
63741: ARRAY
63742: PUSH
63743: LD_VAR 0 3
63747: PLUS
63748: PUSH
63749: EMPTY
63750: LIST
63751: LIST
63752: PUSH
63753: EMPTY
63754: LIST
63755: ADD
63756: ST_TO_ADDR
63757: GO 63706
63759: POP
63760: POP
// result = temp_list2 ;
63761: LD_ADDR_VAR 0 7
63765: PUSH
63766: LD_VAR 0 10
63770: ST_TO_ADDR
// end ;
63771: LD_VAR 0 7
63775: RET
// export function EnemyInRange ( unit , dist ) ; begin
63776: LD_INT 0
63778: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
63779: LD_ADDR_VAR 0 3
63783: PUSH
63784: LD_VAR 0 1
63788: PPUSH
63789: CALL_OW 255
63793: PPUSH
63794: LD_VAR 0 1
63798: PPUSH
63799: CALL_OW 250
63803: PPUSH
63804: LD_VAR 0 1
63808: PPUSH
63809: CALL_OW 251
63813: PPUSH
63814: LD_VAR 0 2
63818: PPUSH
63819: CALL 37149 0 4
63823: PUSH
63824: LD_INT 4
63826: ARRAY
63827: ST_TO_ADDR
// end ;
63828: LD_VAR 0 3
63832: RET
// export function PlayerSeeMe ( unit ) ; begin
63833: LD_INT 0
63835: PPUSH
// result := See ( your_side , unit ) ;
63836: LD_ADDR_VAR 0 2
63840: PUSH
63841: LD_OWVAR 2
63845: PPUSH
63846: LD_VAR 0 1
63850: PPUSH
63851: CALL_OW 292
63855: ST_TO_ADDR
// end ;
63856: LD_VAR 0 2
63860: RET
// export function ReverseDir ( unit ) ; begin
63861: LD_INT 0
63863: PPUSH
// if not unit then
63864: LD_VAR 0 1
63868: NOT
63869: IFFALSE 63873
// exit ;
63871: GO 63896
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
63873: LD_ADDR_VAR 0 2
63877: PUSH
63878: LD_VAR 0 1
63882: PPUSH
63883: CALL_OW 254
63887: PUSH
63888: LD_INT 3
63890: PLUS
63891: PUSH
63892: LD_INT 6
63894: MOD
63895: ST_TO_ADDR
// end ;
63896: LD_VAR 0 2
63900: RET
// export function ReverseArray ( array ) ; var i ; begin
63901: LD_INT 0
63903: PPUSH
63904: PPUSH
// if not array then
63905: LD_VAR 0 1
63909: NOT
63910: IFFALSE 63914
// exit ;
63912: GO 63969
// result := [ ] ;
63914: LD_ADDR_VAR 0 2
63918: PUSH
63919: EMPTY
63920: ST_TO_ADDR
// for i := array downto 1 do
63921: LD_ADDR_VAR 0 3
63925: PUSH
63926: DOUBLE
63927: LD_VAR 0 1
63931: INC
63932: ST_TO_ADDR
63933: LD_INT 1
63935: PUSH
63936: FOR_DOWNTO
63937: IFFALSE 63967
// result := Join ( result , array [ i ] ) ;
63939: LD_ADDR_VAR 0 2
63943: PUSH
63944: LD_VAR 0 2
63948: PPUSH
63949: LD_VAR 0 1
63953: PUSH
63954: LD_VAR 0 3
63958: ARRAY
63959: PPUSH
63960: CALL 68612 0 2
63964: ST_TO_ADDR
63965: GO 63936
63967: POP
63968: POP
// end ;
63969: LD_VAR 0 2
63973: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
63974: LD_INT 0
63976: PPUSH
63977: PPUSH
63978: PPUSH
63979: PPUSH
63980: PPUSH
63981: PPUSH
// if not unit or not hexes then
63982: LD_VAR 0 1
63986: NOT
63987: PUSH
63988: LD_VAR 0 2
63992: NOT
63993: OR
63994: IFFALSE 63998
// exit ;
63996: GO 64121
// dist := 9999 ;
63998: LD_ADDR_VAR 0 5
64002: PUSH
64003: LD_INT 9999
64005: ST_TO_ADDR
// for i = 1 to hexes do
64006: LD_ADDR_VAR 0 4
64010: PUSH
64011: DOUBLE
64012: LD_INT 1
64014: DEC
64015: ST_TO_ADDR
64016: LD_VAR 0 2
64020: PUSH
64021: FOR_TO
64022: IFFALSE 64109
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
64024: LD_ADDR_VAR 0 6
64028: PUSH
64029: LD_VAR 0 1
64033: PPUSH
64034: LD_VAR 0 2
64038: PUSH
64039: LD_VAR 0 4
64043: ARRAY
64044: PUSH
64045: LD_INT 1
64047: ARRAY
64048: PPUSH
64049: LD_VAR 0 2
64053: PUSH
64054: LD_VAR 0 4
64058: ARRAY
64059: PUSH
64060: LD_INT 2
64062: ARRAY
64063: PPUSH
64064: CALL_OW 297
64068: ST_TO_ADDR
// if tdist < dist then
64069: LD_VAR 0 6
64073: PUSH
64074: LD_VAR 0 5
64078: LESS
64079: IFFALSE 64107
// begin hex := hexes [ i ] ;
64081: LD_ADDR_VAR 0 8
64085: PUSH
64086: LD_VAR 0 2
64090: PUSH
64091: LD_VAR 0 4
64095: ARRAY
64096: ST_TO_ADDR
// dist := tdist ;
64097: LD_ADDR_VAR 0 5
64101: PUSH
64102: LD_VAR 0 6
64106: ST_TO_ADDR
// end ; end ;
64107: GO 64021
64109: POP
64110: POP
// result := hex ;
64111: LD_ADDR_VAR 0 3
64115: PUSH
64116: LD_VAR 0 8
64120: ST_TO_ADDR
// end ;
64121: LD_VAR 0 3
64125: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
64126: LD_INT 0
64128: PPUSH
64129: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
64130: LD_VAR 0 1
64134: NOT
64135: PUSH
64136: LD_VAR 0 1
64140: PUSH
64141: LD_INT 21
64143: PUSH
64144: LD_INT 2
64146: PUSH
64147: EMPTY
64148: LIST
64149: LIST
64150: PUSH
64151: LD_INT 23
64153: PUSH
64154: LD_INT 2
64156: PUSH
64157: EMPTY
64158: LIST
64159: LIST
64160: PUSH
64161: EMPTY
64162: LIST
64163: LIST
64164: PPUSH
64165: CALL_OW 69
64169: IN
64170: NOT
64171: OR
64172: IFFALSE 64176
// exit ;
64174: GO 64223
// for i = 1 to 3 do
64176: LD_ADDR_VAR 0 3
64180: PUSH
64181: DOUBLE
64182: LD_INT 1
64184: DEC
64185: ST_TO_ADDR
64186: LD_INT 3
64188: PUSH
64189: FOR_TO
64190: IFFALSE 64221
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
64192: LD_VAR 0 1
64196: PPUSH
64197: CALL_OW 250
64201: PPUSH
64202: LD_VAR 0 1
64206: PPUSH
64207: CALL_OW 251
64211: PPUSH
64212: LD_INT 1
64214: PPUSH
64215: CALL_OW 453
64219: GO 64189
64221: POP
64222: POP
// end ;
64223: LD_VAR 0 2
64227: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
64228: LD_INT 0
64230: PPUSH
64231: PPUSH
64232: PPUSH
64233: PPUSH
64234: PPUSH
64235: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
64236: LD_VAR 0 1
64240: NOT
64241: PUSH
64242: LD_VAR 0 2
64246: NOT
64247: OR
64248: PUSH
64249: LD_VAR 0 1
64253: PPUSH
64254: CALL_OW 314
64258: OR
64259: IFFALSE 64263
// exit ;
64261: GO 64730
// if GetLives ( i ) < 250 then
64263: LD_VAR 0 4
64267: PPUSH
64268: CALL_OW 256
64272: PUSH
64273: LD_INT 250
64275: LESS
64276: IFFALSE 64289
// begin ComAutodestruct ( i ) ;
64278: LD_VAR 0 4
64282: PPUSH
64283: CALL 64126 0 1
// exit ;
64287: GO 64730
// end ; x := GetX ( enemy_unit ) ;
64289: LD_ADDR_VAR 0 7
64293: PUSH
64294: LD_VAR 0 2
64298: PPUSH
64299: CALL_OW 250
64303: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
64304: LD_ADDR_VAR 0 8
64308: PUSH
64309: LD_VAR 0 2
64313: PPUSH
64314: CALL_OW 251
64318: ST_TO_ADDR
// if not x or not y then
64319: LD_VAR 0 7
64323: NOT
64324: PUSH
64325: LD_VAR 0 8
64329: NOT
64330: OR
64331: IFFALSE 64335
// exit ;
64333: GO 64730
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
64335: LD_ADDR_VAR 0 6
64339: PUSH
64340: LD_VAR 0 7
64344: PPUSH
64345: LD_INT 0
64347: PPUSH
64348: LD_INT 4
64350: PPUSH
64351: CALL_OW 272
64355: PUSH
64356: LD_VAR 0 8
64360: PPUSH
64361: LD_INT 0
64363: PPUSH
64364: LD_INT 4
64366: PPUSH
64367: CALL_OW 273
64371: PUSH
64372: EMPTY
64373: LIST
64374: LIST
64375: PUSH
64376: LD_VAR 0 7
64380: PPUSH
64381: LD_INT 1
64383: PPUSH
64384: LD_INT 4
64386: PPUSH
64387: CALL_OW 272
64391: PUSH
64392: LD_VAR 0 8
64396: PPUSH
64397: LD_INT 1
64399: PPUSH
64400: LD_INT 4
64402: PPUSH
64403: CALL_OW 273
64407: PUSH
64408: EMPTY
64409: LIST
64410: LIST
64411: PUSH
64412: LD_VAR 0 7
64416: PPUSH
64417: LD_INT 2
64419: PPUSH
64420: LD_INT 4
64422: PPUSH
64423: CALL_OW 272
64427: PUSH
64428: LD_VAR 0 8
64432: PPUSH
64433: LD_INT 2
64435: PPUSH
64436: LD_INT 4
64438: PPUSH
64439: CALL_OW 273
64443: PUSH
64444: EMPTY
64445: LIST
64446: LIST
64447: PUSH
64448: LD_VAR 0 7
64452: PPUSH
64453: LD_INT 3
64455: PPUSH
64456: LD_INT 4
64458: PPUSH
64459: CALL_OW 272
64463: PUSH
64464: LD_VAR 0 8
64468: PPUSH
64469: LD_INT 3
64471: PPUSH
64472: LD_INT 4
64474: PPUSH
64475: CALL_OW 273
64479: PUSH
64480: EMPTY
64481: LIST
64482: LIST
64483: PUSH
64484: LD_VAR 0 7
64488: PPUSH
64489: LD_INT 4
64491: PPUSH
64492: LD_INT 4
64494: PPUSH
64495: CALL_OW 272
64499: PUSH
64500: LD_VAR 0 8
64504: PPUSH
64505: LD_INT 4
64507: PPUSH
64508: LD_INT 4
64510: PPUSH
64511: CALL_OW 273
64515: PUSH
64516: EMPTY
64517: LIST
64518: LIST
64519: PUSH
64520: LD_VAR 0 7
64524: PPUSH
64525: LD_INT 5
64527: PPUSH
64528: LD_INT 4
64530: PPUSH
64531: CALL_OW 272
64535: PUSH
64536: LD_VAR 0 8
64540: PPUSH
64541: LD_INT 5
64543: PPUSH
64544: LD_INT 4
64546: PPUSH
64547: CALL_OW 273
64551: PUSH
64552: EMPTY
64553: LIST
64554: LIST
64555: PUSH
64556: EMPTY
64557: LIST
64558: LIST
64559: LIST
64560: LIST
64561: LIST
64562: LIST
64563: ST_TO_ADDR
// for i = tmp downto 1 do
64564: LD_ADDR_VAR 0 4
64568: PUSH
64569: DOUBLE
64570: LD_VAR 0 6
64574: INC
64575: ST_TO_ADDR
64576: LD_INT 1
64578: PUSH
64579: FOR_DOWNTO
64580: IFFALSE 64681
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
64582: LD_VAR 0 6
64586: PUSH
64587: LD_VAR 0 4
64591: ARRAY
64592: PUSH
64593: LD_INT 1
64595: ARRAY
64596: PPUSH
64597: LD_VAR 0 6
64601: PUSH
64602: LD_VAR 0 4
64606: ARRAY
64607: PUSH
64608: LD_INT 2
64610: ARRAY
64611: PPUSH
64612: CALL_OW 488
64616: NOT
64617: PUSH
64618: LD_VAR 0 6
64622: PUSH
64623: LD_VAR 0 4
64627: ARRAY
64628: PUSH
64629: LD_INT 1
64631: ARRAY
64632: PPUSH
64633: LD_VAR 0 6
64637: PUSH
64638: LD_VAR 0 4
64642: ARRAY
64643: PUSH
64644: LD_INT 2
64646: ARRAY
64647: PPUSH
64648: CALL_OW 428
64652: PUSH
64653: LD_INT 0
64655: NONEQUAL
64656: OR
64657: IFFALSE 64679
// tmp := Delete ( tmp , i ) ;
64659: LD_ADDR_VAR 0 6
64663: PUSH
64664: LD_VAR 0 6
64668: PPUSH
64669: LD_VAR 0 4
64673: PPUSH
64674: CALL_OW 3
64678: ST_TO_ADDR
64679: GO 64579
64681: POP
64682: POP
// j := GetClosestHex ( unit , tmp ) ;
64683: LD_ADDR_VAR 0 5
64687: PUSH
64688: LD_VAR 0 1
64692: PPUSH
64693: LD_VAR 0 6
64697: PPUSH
64698: CALL 63974 0 2
64702: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
64703: LD_VAR 0 1
64707: PPUSH
64708: LD_VAR 0 5
64712: PUSH
64713: LD_INT 1
64715: ARRAY
64716: PPUSH
64717: LD_VAR 0 5
64721: PUSH
64722: LD_INT 2
64724: ARRAY
64725: PPUSH
64726: CALL_OW 111
// end ;
64730: LD_VAR 0 3
64734: RET
// export function PrepareApemanSoldier ( ) ; begin
64735: LD_INT 0
64737: PPUSH
// uc_nation := 0 ;
64738: LD_ADDR_OWVAR 21
64742: PUSH
64743: LD_INT 0
64745: ST_TO_ADDR
// hc_sex := sex_male ;
64746: LD_ADDR_OWVAR 27
64750: PUSH
64751: LD_INT 1
64753: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
64754: LD_ADDR_OWVAR 28
64758: PUSH
64759: LD_INT 15
64761: ST_TO_ADDR
// hc_gallery :=  ;
64762: LD_ADDR_OWVAR 33
64766: PUSH
64767: LD_STRING 
64769: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64770: LD_ADDR_OWVAR 31
64774: PUSH
64775: LD_INT 0
64777: PPUSH
64778: LD_INT 3
64780: PPUSH
64781: CALL_OW 12
64785: PUSH
64786: LD_INT 0
64788: PPUSH
64789: LD_INT 3
64791: PPUSH
64792: CALL_OW 12
64796: PUSH
64797: LD_INT 0
64799: PUSH
64800: LD_INT 0
64802: PUSH
64803: EMPTY
64804: LIST
64805: LIST
64806: LIST
64807: LIST
64808: ST_TO_ADDR
// end ;
64809: LD_VAR 0 1
64813: RET
// export function PrepareApemanEngineer ( ) ; begin
64814: LD_INT 0
64816: PPUSH
// uc_nation := 0 ;
64817: LD_ADDR_OWVAR 21
64821: PUSH
64822: LD_INT 0
64824: ST_TO_ADDR
// hc_sex := sex_male ;
64825: LD_ADDR_OWVAR 27
64829: PUSH
64830: LD_INT 1
64832: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
64833: LD_ADDR_OWVAR 28
64837: PUSH
64838: LD_INT 16
64840: ST_TO_ADDR
// hc_gallery :=  ;
64841: LD_ADDR_OWVAR 33
64845: PUSH
64846: LD_STRING 
64848: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64849: LD_ADDR_OWVAR 31
64853: PUSH
64854: LD_INT 0
64856: PPUSH
64857: LD_INT 3
64859: PPUSH
64860: CALL_OW 12
64864: PUSH
64865: LD_INT 0
64867: PPUSH
64868: LD_INT 3
64870: PPUSH
64871: CALL_OW 12
64875: PUSH
64876: LD_INT 0
64878: PUSH
64879: LD_INT 0
64881: PUSH
64882: EMPTY
64883: LIST
64884: LIST
64885: LIST
64886: LIST
64887: ST_TO_ADDR
// end ;
64888: LD_VAR 0 1
64892: RET
// export function PrepareApeman ( agressivity ) ; begin
64893: LD_INT 0
64895: PPUSH
// uc_side := 0 ;
64896: LD_ADDR_OWVAR 20
64900: PUSH
64901: LD_INT 0
64903: ST_TO_ADDR
// uc_nation := 0 ;
64904: LD_ADDR_OWVAR 21
64908: PUSH
64909: LD_INT 0
64911: ST_TO_ADDR
// hc_sex := sex_male ;
64912: LD_ADDR_OWVAR 27
64916: PUSH
64917: LD_INT 1
64919: ST_TO_ADDR
// hc_class := class_apeman ;
64920: LD_ADDR_OWVAR 28
64924: PUSH
64925: LD_INT 12
64927: ST_TO_ADDR
// hc_gallery :=  ;
64928: LD_ADDR_OWVAR 33
64932: PUSH
64933: LD_STRING 
64935: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
64936: LD_ADDR_OWVAR 35
64940: PUSH
64941: LD_VAR 0 1
64945: NEG
64946: PPUSH
64947: LD_VAR 0 1
64951: PPUSH
64952: CALL_OW 12
64956: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64957: LD_ADDR_OWVAR 31
64961: PUSH
64962: LD_INT 0
64964: PPUSH
64965: LD_INT 3
64967: PPUSH
64968: CALL_OW 12
64972: PUSH
64973: LD_INT 0
64975: PPUSH
64976: LD_INT 3
64978: PPUSH
64979: CALL_OW 12
64983: PUSH
64984: LD_INT 0
64986: PUSH
64987: LD_INT 0
64989: PUSH
64990: EMPTY
64991: LIST
64992: LIST
64993: LIST
64994: LIST
64995: ST_TO_ADDR
// end ;
64996: LD_VAR 0 2
65000: RET
// export function PrepareTiger ( agressivity ) ; begin
65001: LD_INT 0
65003: PPUSH
// uc_side := 0 ;
65004: LD_ADDR_OWVAR 20
65008: PUSH
65009: LD_INT 0
65011: ST_TO_ADDR
// uc_nation := 0 ;
65012: LD_ADDR_OWVAR 21
65016: PUSH
65017: LD_INT 0
65019: ST_TO_ADDR
// hc_class := class_tiger ;
65020: LD_ADDR_OWVAR 28
65024: PUSH
65025: LD_INT 14
65027: ST_TO_ADDR
// hc_gallery :=  ;
65028: LD_ADDR_OWVAR 33
65032: PUSH
65033: LD_STRING 
65035: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
65036: LD_ADDR_OWVAR 35
65040: PUSH
65041: LD_VAR 0 1
65045: NEG
65046: PPUSH
65047: LD_VAR 0 1
65051: PPUSH
65052: CALL_OW 12
65056: ST_TO_ADDR
// end ;
65057: LD_VAR 0 2
65061: RET
// export function PrepareEnchidna ( ) ; begin
65062: LD_INT 0
65064: PPUSH
// uc_side := 0 ;
65065: LD_ADDR_OWVAR 20
65069: PUSH
65070: LD_INT 0
65072: ST_TO_ADDR
// uc_nation := 0 ;
65073: LD_ADDR_OWVAR 21
65077: PUSH
65078: LD_INT 0
65080: ST_TO_ADDR
// hc_class := class_baggie ;
65081: LD_ADDR_OWVAR 28
65085: PUSH
65086: LD_INT 13
65088: ST_TO_ADDR
// hc_gallery :=  ;
65089: LD_ADDR_OWVAR 33
65093: PUSH
65094: LD_STRING 
65096: ST_TO_ADDR
// end ;
65097: LD_VAR 0 1
65101: RET
// export function PrepareFrog ( ) ; begin
65102: LD_INT 0
65104: PPUSH
// uc_side := 0 ;
65105: LD_ADDR_OWVAR 20
65109: PUSH
65110: LD_INT 0
65112: ST_TO_ADDR
// uc_nation := 0 ;
65113: LD_ADDR_OWVAR 21
65117: PUSH
65118: LD_INT 0
65120: ST_TO_ADDR
// hc_class := class_frog ;
65121: LD_ADDR_OWVAR 28
65125: PUSH
65126: LD_INT 19
65128: ST_TO_ADDR
// hc_gallery :=  ;
65129: LD_ADDR_OWVAR 33
65133: PUSH
65134: LD_STRING 
65136: ST_TO_ADDR
// end ;
65137: LD_VAR 0 1
65141: RET
// export function PrepareFish ( ) ; begin
65142: LD_INT 0
65144: PPUSH
// uc_side := 0 ;
65145: LD_ADDR_OWVAR 20
65149: PUSH
65150: LD_INT 0
65152: ST_TO_ADDR
// uc_nation := 0 ;
65153: LD_ADDR_OWVAR 21
65157: PUSH
65158: LD_INT 0
65160: ST_TO_ADDR
// hc_class := class_fish ;
65161: LD_ADDR_OWVAR 28
65165: PUSH
65166: LD_INT 20
65168: ST_TO_ADDR
// hc_gallery :=  ;
65169: LD_ADDR_OWVAR 33
65173: PUSH
65174: LD_STRING 
65176: ST_TO_ADDR
// end ;
65177: LD_VAR 0 1
65181: RET
// export function PrepareBird ( ) ; begin
65182: LD_INT 0
65184: PPUSH
// uc_side := 0 ;
65185: LD_ADDR_OWVAR 20
65189: PUSH
65190: LD_INT 0
65192: ST_TO_ADDR
// uc_nation := 0 ;
65193: LD_ADDR_OWVAR 21
65197: PUSH
65198: LD_INT 0
65200: ST_TO_ADDR
// hc_class := class_phororhacos ;
65201: LD_ADDR_OWVAR 28
65205: PUSH
65206: LD_INT 18
65208: ST_TO_ADDR
// hc_gallery :=  ;
65209: LD_ADDR_OWVAR 33
65213: PUSH
65214: LD_STRING 
65216: ST_TO_ADDR
// end ;
65217: LD_VAR 0 1
65221: RET
// export function PrepareHorse ( ) ; begin
65222: LD_INT 0
65224: PPUSH
// uc_side := 0 ;
65225: LD_ADDR_OWVAR 20
65229: PUSH
65230: LD_INT 0
65232: ST_TO_ADDR
// uc_nation := 0 ;
65233: LD_ADDR_OWVAR 21
65237: PUSH
65238: LD_INT 0
65240: ST_TO_ADDR
// hc_class := class_horse ;
65241: LD_ADDR_OWVAR 28
65245: PUSH
65246: LD_INT 21
65248: ST_TO_ADDR
// hc_gallery :=  ;
65249: LD_ADDR_OWVAR 33
65253: PUSH
65254: LD_STRING 
65256: ST_TO_ADDR
// end ;
65257: LD_VAR 0 1
65261: RET
// export function PrepareMastodont ( ) ; begin
65262: LD_INT 0
65264: PPUSH
// uc_side := 0 ;
65265: LD_ADDR_OWVAR 20
65269: PUSH
65270: LD_INT 0
65272: ST_TO_ADDR
// uc_nation := 0 ;
65273: LD_ADDR_OWVAR 21
65277: PUSH
65278: LD_INT 0
65280: ST_TO_ADDR
// vc_chassis := class_mastodont ;
65281: LD_ADDR_OWVAR 37
65285: PUSH
65286: LD_INT 31
65288: ST_TO_ADDR
// vc_control := control_rider ;
65289: LD_ADDR_OWVAR 38
65293: PUSH
65294: LD_INT 4
65296: ST_TO_ADDR
// end ;
65297: LD_VAR 0 1
65301: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
65302: LD_INT 0
65304: PPUSH
65305: PPUSH
65306: PPUSH
// uc_side = 0 ;
65307: LD_ADDR_OWVAR 20
65311: PUSH
65312: LD_INT 0
65314: ST_TO_ADDR
// uc_nation = 0 ;
65315: LD_ADDR_OWVAR 21
65319: PUSH
65320: LD_INT 0
65322: ST_TO_ADDR
// InitHc_All ( ) ;
65323: CALL_OW 584
// InitVc ;
65327: CALL_OW 20
// if mastodonts then
65331: LD_VAR 0 6
65335: IFFALSE 65402
// for i = 1 to mastodonts do
65337: LD_ADDR_VAR 0 11
65341: PUSH
65342: DOUBLE
65343: LD_INT 1
65345: DEC
65346: ST_TO_ADDR
65347: LD_VAR 0 6
65351: PUSH
65352: FOR_TO
65353: IFFALSE 65400
// begin vc_chassis := 31 ;
65355: LD_ADDR_OWVAR 37
65359: PUSH
65360: LD_INT 31
65362: ST_TO_ADDR
// vc_control := control_rider ;
65363: LD_ADDR_OWVAR 38
65367: PUSH
65368: LD_INT 4
65370: ST_TO_ADDR
// animal := CreateVehicle ;
65371: LD_ADDR_VAR 0 12
65375: PUSH
65376: CALL_OW 45
65380: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65381: LD_VAR 0 12
65385: PPUSH
65386: LD_VAR 0 8
65390: PPUSH
65391: LD_INT 0
65393: PPUSH
65394: CALL 67530 0 3
// end ;
65398: GO 65352
65400: POP
65401: POP
// if horses then
65402: LD_VAR 0 5
65406: IFFALSE 65473
// for i = 1 to horses do
65408: LD_ADDR_VAR 0 11
65412: PUSH
65413: DOUBLE
65414: LD_INT 1
65416: DEC
65417: ST_TO_ADDR
65418: LD_VAR 0 5
65422: PUSH
65423: FOR_TO
65424: IFFALSE 65471
// begin hc_class := 21 ;
65426: LD_ADDR_OWVAR 28
65430: PUSH
65431: LD_INT 21
65433: ST_TO_ADDR
// hc_gallery :=  ;
65434: LD_ADDR_OWVAR 33
65438: PUSH
65439: LD_STRING 
65441: ST_TO_ADDR
// animal := CreateHuman ;
65442: LD_ADDR_VAR 0 12
65446: PUSH
65447: CALL_OW 44
65451: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65452: LD_VAR 0 12
65456: PPUSH
65457: LD_VAR 0 8
65461: PPUSH
65462: LD_INT 0
65464: PPUSH
65465: CALL 67530 0 3
// end ;
65469: GO 65423
65471: POP
65472: POP
// if birds then
65473: LD_VAR 0 1
65477: IFFALSE 65544
// for i = 1 to birds do
65479: LD_ADDR_VAR 0 11
65483: PUSH
65484: DOUBLE
65485: LD_INT 1
65487: DEC
65488: ST_TO_ADDR
65489: LD_VAR 0 1
65493: PUSH
65494: FOR_TO
65495: IFFALSE 65542
// begin hc_class := 18 ;
65497: LD_ADDR_OWVAR 28
65501: PUSH
65502: LD_INT 18
65504: ST_TO_ADDR
// hc_gallery =  ;
65505: LD_ADDR_OWVAR 33
65509: PUSH
65510: LD_STRING 
65512: ST_TO_ADDR
// animal := CreateHuman ;
65513: LD_ADDR_VAR 0 12
65517: PUSH
65518: CALL_OW 44
65522: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65523: LD_VAR 0 12
65527: PPUSH
65528: LD_VAR 0 8
65532: PPUSH
65533: LD_INT 0
65535: PPUSH
65536: CALL 67530 0 3
// end ;
65540: GO 65494
65542: POP
65543: POP
// if tigers then
65544: LD_VAR 0 2
65548: IFFALSE 65632
// for i = 1 to tigers do
65550: LD_ADDR_VAR 0 11
65554: PUSH
65555: DOUBLE
65556: LD_INT 1
65558: DEC
65559: ST_TO_ADDR
65560: LD_VAR 0 2
65564: PUSH
65565: FOR_TO
65566: IFFALSE 65630
// begin hc_class = class_tiger ;
65568: LD_ADDR_OWVAR 28
65572: PUSH
65573: LD_INT 14
65575: ST_TO_ADDR
// hc_gallery =  ;
65576: LD_ADDR_OWVAR 33
65580: PUSH
65581: LD_STRING 
65583: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
65584: LD_ADDR_OWVAR 35
65588: PUSH
65589: LD_INT 7
65591: NEG
65592: PPUSH
65593: LD_INT 7
65595: PPUSH
65596: CALL_OW 12
65600: ST_TO_ADDR
// animal := CreateHuman ;
65601: LD_ADDR_VAR 0 12
65605: PUSH
65606: CALL_OW 44
65610: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65611: LD_VAR 0 12
65615: PPUSH
65616: LD_VAR 0 8
65620: PPUSH
65621: LD_INT 0
65623: PPUSH
65624: CALL 67530 0 3
// end ;
65628: GO 65565
65630: POP
65631: POP
// if apemans then
65632: LD_VAR 0 3
65636: IFFALSE 65759
// for i = 1 to apemans do
65638: LD_ADDR_VAR 0 11
65642: PUSH
65643: DOUBLE
65644: LD_INT 1
65646: DEC
65647: ST_TO_ADDR
65648: LD_VAR 0 3
65652: PUSH
65653: FOR_TO
65654: IFFALSE 65757
// begin hc_class = class_apeman ;
65656: LD_ADDR_OWVAR 28
65660: PUSH
65661: LD_INT 12
65663: ST_TO_ADDR
// hc_gallery =  ;
65664: LD_ADDR_OWVAR 33
65668: PUSH
65669: LD_STRING 
65671: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
65672: LD_ADDR_OWVAR 35
65676: PUSH
65677: LD_INT 2
65679: NEG
65680: PPUSH
65681: LD_INT 2
65683: PPUSH
65684: CALL_OW 12
65688: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
65689: LD_ADDR_OWVAR 31
65693: PUSH
65694: LD_INT 1
65696: PPUSH
65697: LD_INT 3
65699: PPUSH
65700: CALL_OW 12
65704: PUSH
65705: LD_INT 1
65707: PPUSH
65708: LD_INT 3
65710: PPUSH
65711: CALL_OW 12
65715: PUSH
65716: LD_INT 0
65718: PUSH
65719: LD_INT 0
65721: PUSH
65722: EMPTY
65723: LIST
65724: LIST
65725: LIST
65726: LIST
65727: ST_TO_ADDR
// animal := CreateHuman ;
65728: LD_ADDR_VAR 0 12
65732: PUSH
65733: CALL_OW 44
65737: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65738: LD_VAR 0 12
65742: PPUSH
65743: LD_VAR 0 8
65747: PPUSH
65748: LD_INT 0
65750: PPUSH
65751: CALL 67530 0 3
// end ;
65755: GO 65653
65757: POP
65758: POP
// if enchidnas then
65759: LD_VAR 0 4
65763: IFFALSE 65830
// for i = 1 to enchidnas do
65765: LD_ADDR_VAR 0 11
65769: PUSH
65770: DOUBLE
65771: LD_INT 1
65773: DEC
65774: ST_TO_ADDR
65775: LD_VAR 0 4
65779: PUSH
65780: FOR_TO
65781: IFFALSE 65828
// begin hc_class = 13 ;
65783: LD_ADDR_OWVAR 28
65787: PUSH
65788: LD_INT 13
65790: ST_TO_ADDR
// hc_gallery =  ;
65791: LD_ADDR_OWVAR 33
65795: PUSH
65796: LD_STRING 
65798: ST_TO_ADDR
// animal := CreateHuman ;
65799: LD_ADDR_VAR 0 12
65803: PUSH
65804: CALL_OW 44
65808: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65809: LD_VAR 0 12
65813: PPUSH
65814: LD_VAR 0 8
65818: PPUSH
65819: LD_INT 0
65821: PPUSH
65822: CALL 67530 0 3
// end ;
65826: GO 65780
65828: POP
65829: POP
// if fishes then
65830: LD_VAR 0 7
65834: IFFALSE 65901
// for i = 1 to fishes do
65836: LD_ADDR_VAR 0 11
65840: PUSH
65841: DOUBLE
65842: LD_INT 1
65844: DEC
65845: ST_TO_ADDR
65846: LD_VAR 0 7
65850: PUSH
65851: FOR_TO
65852: IFFALSE 65899
// begin hc_class = 20 ;
65854: LD_ADDR_OWVAR 28
65858: PUSH
65859: LD_INT 20
65861: ST_TO_ADDR
// hc_gallery =  ;
65862: LD_ADDR_OWVAR 33
65866: PUSH
65867: LD_STRING 
65869: ST_TO_ADDR
// animal := CreateHuman ;
65870: LD_ADDR_VAR 0 12
65874: PUSH
65875: CALL_OW 44
65879: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
65880: LD_VAR 0 12
65884: PPUSH
65885: LD_VAR 0 9
65889: PPUSH
65890: LD_INT 0
65892: PPUSH
65893: CALL 67530 0 3
// end ;
65897: GO 65851
65899: POP
65900: POP
// end ;
65901: LD_VAR 0 10
65905: RET
// export function WantHeal ( sci , unit ) ; begin
65906: LD_INT 0
65908: PPUSH
// if GetTaskList ( sci ) > 0 then
65909: LD_VAR 0 1
65913: PPUSH
65914: CALL_OW 437
65918: PUSH
65919: LD_INT 0
65921: GREATER
65922: IFFALSE 65992
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
65924: LD_VAR 0 1
65928: PPUSH
65929: CALL_OW 437
65933: PUSH
65934: LD_INT 1
65936: ARRAY
65937: PUSH
65938: LD_INT 1
65940: ARRAY
65941: PUSH
65942: LD_STRING l
65944: EQUAL
65945: PUSH
65946: LD_VAR 0 1
65950: PPUSH
65951: CALL_OW 437
65955: PUSH
65956: LD_INT 1
65958: ARRAY
65959: PUSH
65960: LD_INT 4
65962: ARRAY
65963: PUSH
65964: LD_VAR 0 2
65968: EQUAL
65969: AND
65970: IFFALSE 65982
// result := true else
65972: LD_ADDR_VAR 0 3
65976: PUSH
65977: LD_INT 1
65979: ST_TO_ADDR
65980: GO 65990
// result := false ;
65982: LD_ADDR_VAR 0 3
65986: PUSH
65987: LD_INT 0
65989: ST_TO_ADDR
// end else
65990: GO 66000
// result := false ;
65992: LD_ADDR_VAR 0 3
65996: PUSH
65997: LD_INT 0
65999: ST_TO_ADDR
// end ;
66000: LD_VAR 0 3
66004: RET
// export function HealTarget ( sci ) ; begin
66005: LD_INT 0
66007: PPUSH
// if not sci then
66008: LD_VAR 0 1
66012: NOT
66013: IFFALSE 66017
// exit ;
66015: GO 66082
// result := 0 ;
66017: LD_ADDR_VAR 0 2
66021: PUSH
66022: LD_INT 0
66024: ST_TO_ADDR
// if GetTaskList ( sci ) then
66025: LD_VAR 0 1
66029: PPUSH
66030: CALL_OW 437
66034: IFFALSE 66082
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
66036: LD_VAR 0 1
66040: PPUSH
66041: CALL_OW 437
66045: PUSH
66046: LD_INT 1
66048: ARRAY
66049: PUSH
66050: LD_INT 1
66052: ARRAY
66053: PUSH
66054: LD_STRING l
66056: EQUAL
66057: IFFALSE 66082
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
66059: LD_ADDR_VAR 0 2
66063: PUSH
66064: LD_VAR 0 1
66068: PPUSH
66069: CALL_OW 437
66073: PUSH
66074: LD_INT 1
66076: ARRAY
66077: PUSH
66078: LD_INT 4
66080: ARRAY
66081: ST_TO_ADDR
// end ;
66082: LD_VAR 0 2
66086: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
66087: LD_INT 0
66089: PPUSH
66090: PPUSH
66091: PPUSH
66092: PPUSH
// if not base_units then
66093: LD_VAR 0 1
66097: NOT
66098: IFFALSE 66102
// exit ;
66100: GO 66189
// result := false ;
66102: LD_ADDR_VAR 0 2
66106: PUSH
66107: LD_INT 0
66109: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
66110: LD_ADDR_VAR 0 5
66114: PUSH
66115: LD_VAR 0 1
66119: PPUSH
66120: LD_INT 21
66122: PUSH
66123: LD_INT 3
66125: PUSH
66126: EMPTY
66127: LIST
66128: LIST
66129: PPUSH
66130: CALL_OW 72
66134: ST_TO_ADDR
// if not tmp then
66135: LD_VAR 0 5
66139: NOT
66140: IFFALSE 66144
// exit ;
66142: GO 66189
// for i in tmp do
66144: LD_ADDR_VAR 0 3
66148: PUSH
66149: LD_VAR 0 5
66153: PUSH
66154: FOR_IN
66155: IFFALSE 66187
// begin result := EnemyInRange ( i , 22 ) ;
66157: LD_ADDR_VAR 0 2
66161: PUSH
66162: LD_VAR 0 3
66166: PPUSH
66167: LD_INT 22
66169: PPUSH
66170: CALL 63776 0 2
66174: ST_TO_ADDR
// if result then
66175: LD_VAR 0 2
66179: IFFALSE 66185
// exit ;
66181: POP
66182: POP
66183: GO 66189
// end ;
66185: GO 66154
66187: POP
66188: POP
// end ;
66189: LD_VAR 0 2
66193: RET
// export function FilterByTag ( units , tag ) ; begin
66194: LD_INT 0
66196: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
66197: LD_ADDR_VAR 0 3
66201: PUSH
66202: LD_VAR 0 1
66206: PPUSH
66207: LD_INT 120
66209: PUSH
66210: LD_VAR 0 2
66214: PUSH
66215: EMPTY
66216: LIST
66217: LIST
66218: PPUSH
66219: CALL_OW 72
66223: ST_TO_ADDR
// end ;
66224: LD_VAR 0 3
66228: RET
// export function IsDriver ( un ) ; begin
66229: LD_INT 0
66231: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
66232: LD_ADDR_VAR 0 2
66236: PUSH
66237: LD_VAR 0 1
66241: PUSH
66242: LD_INT 55
66244: PUSH
66245: EMPTY
66246: LIST
66247: PPUSH
66248: CALL_OW 69
66252: IN
66253: ST_TO_ADDR
// end ;
66254: LD_VAR 0 2
66258: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
66259: LD_INT 0
66261: PPUSH
66262: PPUSH
// list := [ ] ;
66263: LD_ADDR_VAR 0 5
66267: PUSH
66268: EMPTY
66269: ST_TO_ADDR
// case d of 0 :
66270: LD_VAR 0 3
66274: PUSH
66275: LD_INT 0
66277: DOUBLE
66278: EQUAL
66279: IFTRUE 66283
66281: GO 66416
66283: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
66284: LD_ADDR_VAR 0 5
66288: PUSH
66289: LD_VAR 0 1
66293: PUSH
66294: LD_INT 4
66296: MINUS
66297: PUSH
66298: LD_VAR 0 2
66302: PUSH
66303: LD_INT 4
66305: MINUS
66306: PUSH
66307: LD_INT 2
66309: PUSH
66310: EMPTY
66311: LIST
66312: LIST
66313: LIST
66314: PUSH
66315: LD_VAR 0 1
66319: PUSH
66320: LD_INT 3
66322: MINUS
66323: PUSH
66324: LD_VAR 0 2
66328: PUSH
66329: LD_INT 1
66331: PUSH
66332: EMPTY
66333: LIST
66334: LIST
66335: LIST
66336: PUSH
66337: LD_VAR 0 1
66341: PUSH
66342: LD_INT 4
66344: PLUS
66345: PUSH
66346: LD_VAR 0 2
66350: PUSH
66351: LD_INT 4
66353: PUSH
66354: EMPTY
66355: LIST
66356: LIST
66357: LIST
66358: PUSH
66359: LD_VAR 0 1
66363: PUSH
66364: LD_INT 3
66366: PLUS
66367: PUSH
66368: LD_VAR 0 2
66372: PUSH
66373: LD_INT 3
66375: PLUS
66376: PUSH
66377: LD_INT 5
66379: PUSH
66380: EMPTY
66381: LIST
66382: LIST
66383: LIST
66384: PUSH
66385: LD_VAR 0 1
66389: PUSH
66390: LD_VAR 0 2
66394: PUSH
66395: LD_INT 4
66397: PLUS
66398: PUSH
66399: LD_INT 0
66401: PUSH
66402: EMPTY
66403: LIST
66404: LIST
66405: LIST
66406: PUSH
66407: EMPTY
66408: LIST
66409: LIST
66410: LIST
66411: LIST
66412: LIST
66413: ST_TO_ADDR
// end ; 1 :
66414: GO 67114
66416: LD_INT 1
66418: DOUBLE
66419: EQUAL
66420: IFTRUE 66424
66422: GO 66557
66424: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
66425: LD_ADDR_VAR 0 5
66429: PUSH
66430: LD_VAR 0 1
66434: PUSH
66435: LD_VAR 0 2
66439: PUSH
66440: LD_INT 4
66442: MINUS
66443: PUSH
66444: LD_INT 3
66446: PUSH
66447: EMPTY
66448: LIST
66449: LIST
66450: LIST
66451: PUSH
66452: LD_VAR 0 1
66456: PUSH
66457: LD_INT 3
66459: MINUS
66460: PUSH
66461: LD_VAR 0 2
66465: PUSH
66466: LD_INT 3
66468: MINUS
66469: PUSH
66470: LD_INT 2
66472: PUSH
66473: EMPTY
66474: LIST
66475: LIST
66476: LIST
66477: PUSH
66478: LD_VAR 0 1
66482: PUSH
66483: LD_INT 4
66485: MINUS
66486: PUSH
66487: LD_VAR 0 2
66491: PUSH
66492: LD_INT 1
66494: PUSH
66495: EMPTY
66496: LIST
66497: LIST
66498: LIST
66499: PUSH
66500: LD_VAR 0 1
66504: PUSH
66505: LD_VAR 0 2
66509: PUSH
66510: LD_INT 3
66512: PLUS
66513: PUSH
66514: LD_INT 0
66516: PUSH
66517: EMPTY
66518: LIST
66519: LIST
66520: LIST
66521: PUSH
66522: LD_VAR 0 1
66526: PUSH
66527: LD_INT 4
66529: PLUS
66530: PUSH
66531: LD_VAR 0 2
66535: PUSH
66536: LD_INT 4
66538: PLUS
66539: PUSH
66540: LD_INT 5
66542: PUSH
66543: EMPTY
66544: LIST
66545: LIST
66546: LIST
66547: PUSH
66548: EMPTY
66549: LIST
66550: LIST
66551: LIST
66552: LIST
66553: LIST
66554: ST_TO_ADDR
// end ; 2 :
66555: GO 67114
66557: LD_INT 2
66559: DOUBLE
66560: EQUAL
66561: IFTRUE 66565
66563: GO 66694
66565: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
66566: LD_ADDR_VAR 0 5
66570: PUSH
66571: LD_VAR 0 1
66575: PUSH
66576: LD_VAR 0 2
66580: PUSH
66581: LD_INT 3
66583: MINUS
66584: PUSH
66585: LD_INT 3
66587: PUSH
66588: EMPTY
66589: LIST
66590: LIST
66591: LIST
66592: PUSH
66593: LD_VAR 0 1
66597: PUSH
66598: LD_INT 4
66600: PLUS
66601: PUSH
66602: LD_VAR 0 2
66606: PUSH
66607: LD_INT 4
66609: PUSH
66610: EMPTY
66611: LIST
66612: LIST
66613: LIST
66614: PUSH
66615: LD_VAR 0 1
66619: PUSH
66620: LD_VAR 0 2
66624: PUSH
66625: LD_INT 4
66627: PLUS
66628: PUSH
66629: LD_INT 0
66631: PUSH
66632: EMPTY
66633: LIST
66634: LIST
66635: LIST
66636: PUSH
66637: LD_VAR 0 1
66641: PUSH
66642: LD_INT 3
66644: MINUS
66645: PUSH
66646: LD_VAR 0 2
66650: PUSH
66651: LD_INT 1
66653: PUSH
66654: EMPTY
66655: LIST
66656: LIST
66657: LIST
66658: PUSH
66659: LD_VAR 0 1
66663: PUSH
66664: LD_INT 4
66666: MINUS
66667: PUSH
66668: LD_VAR 0 2
66672: PUSH
66673: LD_INT 4
66675: MINUS
66676: PUSH
66677: LD_INT 2
66679: PUSH
66680: EMPTY
66681: LIST
66682: LIST
66683: LIST
66684: PUSH
66685: EMPTY
66686: LIST
66687: LIST
66688: LIST
66689: LIST
66690: LIST
66691: ST_TO_ADDR
// end ; 3 :
66692: GO 67114
66694: LD_INT 3
66696: DOUBLE
66697: EQUAL
66698: IFTRUE 66702
66700: GO 66835
66702: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
66703: LD_ADDR_VAR 0 5
66707: PUSH
66708: LD_VAR 0 1
66712: PUSH
66713: LD_INT 3
66715: PLUS
66716: PUSH
66717: LD_VAR 0 2
66721: PUSH
66722: LD_INT 4
66724: PUSH
66725: EMPTY
66726: LIST
66727: LIST
66728: LIST
66729: PUSH
66730: LD_VAR 0 1
66734: PUSH
66735: LD_INT 4
66737: PLUS
66738: PUSH
66739: LD_VAR 0 2
66743: PUSH
66744: LD_INT 4
66746: PLUS
66747: PUSH
66748: LD_INT 5
66750: PUSH
66751: EMPTY
66752: LIST
66753: LIST
66754: LIST
66755: PUSH
66756: LD_VAR 0 1
66760: PUSH
66761: LD_INT 4
66763: MINUS
66764: PUSH
66765: LD_VAR 0 2
66769: PUSH
66770: LD_INT 1
66772: PUSH
66773: EMPTY
66774: LIST
66775: LIST
66776: LIST
66777: PUSH
66778: LD_VAR 0 1
66782: PUSH
66783: LD_VAR 0 2
66787: PUSH
66788: LD_INT 4
66790: MINUS
66791: PUSH
66792: LD_INT 3
66794: PUSH
66795: EMPTY
66796: LIST
66797: LIST
66798: LIST
66799: PUSH
66800: LD_VAR 0 1
66804: PUSH
66805: LD_INT 3
66807: MINUS
66808: PUSH
66809: LD_VAR 0 2
66813: PUSH
66814: LD_INT 3
66816: MINUS
66817: PUSH
66818: LD_INT 2
66820: PUSH
66821: EMPTY
66822: LIST
66823: LIST
66824: LIST
66825: PUSH
66826: EMPTY
66827: LIST
66828: LIST
66829: LIST
66830: LIST
66831: LIST
66832: ST_TO_ADDR
// end ; 4 :
66833: GO 67114
66835: LD_INT 4
66837: DOUBLE
66838: EQUAL
66839: IFTRUE 66843
66841: GO 66976
66843: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
66844: LD_ADDR_VAR 0 5
66848: PUSH
66849: LD_VAR 0 1
66853: PUSH
66854: LD_VAR 0 2
66858: PUSH
66859: LD_INT 4
66861: PLUS
66862: PUSH
66863: LD_INT 0
66865: PUSH
66866: EMPTY
66867: LIST
66868: LIST
66869: LIST
66870: PUSH
66871: LD_VAR 0 1
66875: PUSH
66876: LD_INT 3
66878: PLUS
66879: PUSH
66880: LD_VAR 0 2
66884: PUSH
66885: LD_INT 3
66887: PLUS
66888: PUSH
66889: LD_INT 5
66891: PUSH
66892: EMPTY
66893: LIST
66894: LIST
66895: LIST
66896: PUSH
66897: LD_VAR 0 1
66901: PUSH
66902: LD_INT 4
66904: PLUS
66905: PUSH
66906: LD_VAR 0 2
66910: PUSH
66911: LD_INT 4
66913: PUSH
66914: EMPTY
66915: LIST
66916: LIST
66917: LIST
66918: PUSH
66919: LD_VAR 0 1
66923: PUSH
66924: LD_VAR 0 2
66928: PUSH
66929: LD_INT 3
66931: MINUS
66932: PUSH
66933: LD_INT 3
66935: PUSH
66936: EMPTY
66937: LIST
66938: LIST
66939: LIST
66940: PUSH
66941: LD_VAR 0 1
66945: PUSH
66946: LD_INT 4
66948: MINUS
66949: PUSH
66950: LD_VAR 0 2
66954: PUSH
66955: LD_INT 4
66957: MINUS
66958: PUSH
66959: LD_INT 2
66961: PUSH
66962: EMPTY
66963: LIST
66964: LIST
66965: LIST
66966: PUSH
66967: EMPTY
66968: LIST
66969: LIST
66970: LIST
66971: LIST
66972: LIST
66973: ST_TO_ADDR
// end ; 5 :
66974: GO 67114
66976: LD_INT 5
66978: DOUBLE
66979: EQUAL
66980: IFTRUE 66984
66982: GO 67113
66984: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
66985: LD_ADDR_VAR 0 5
66989: PUSH
66990: LD_VAR 0 1
66994: PUSH
66995: LD_INT 4
66997: MINUS
66998: PUSH
66999: LD_VAR 0 2
67003: PUSH
67004: LD_INT 1
67006: PUSH
67007: EMPTY
67008: LIST
67009: LIST
67010: LIST
67011: PUSH
67012: LD_VAR 0 1
67016: PUSH
67017: LD_VAR 0 2
67021: PUSH
67022: LD_INT 4
67024: MINUS
67025: PUSH
67026: LD_INT 3
67028: PUSH
67029: EMPTY
67030: LIST
67031: LIST
67032: LIST
67033: PUSH
67034: LD_VAR 0 1
67038: PUSH
67039: LD_INT 4
67041: PLUS
67042: PUSH
67043: LD_VAR 0 2
67047: PUSH
67048: LD_INT 4
67050: PLUS
67051: PUSH
67052: LD_INT 5
67054: PUSH
67055: EMPTY
67056: LIST
67057: LIST
67058: LIST
67059: PUSH
67060: LD_VAR 0 1
67064: PUSH
67065: LD_INT 3
67067: PLUS
67068: PUSH
67069: LD_VAR 0 2
67073: PUSH
67074: LD_INT 4
67076: PUSH
67077: EMPTY
67078: LIST
67079: LIST
67080: LIST
67081: PUSH
67082: LD_VAR 0 1
67086: PUSH
67087: LD_VAR 0 2
67091: PUSH
67092: LD_INT 3
67094: PLUS
67095: PUSH
67096: LD_INT 0
67098: PUSH
67099: EMPTY
67100: LIST
67101: LIST
67102: LIST
67103: PUSH
67104: EMPTY
67105: LIST
67106: LIST
67107: LIST
67108: LIST
67109: LIST
67110: ST_TO_ADDR
// end ; end ;
67111: GO 67114
67113: POP
// result := list ;
67114: LD_ADDR_VAR 0 4
67118: PUSH
67119: LD_VAR 0 5
67123: ST_TO_ADDR
// end ;
67124: LD_VAR 0 4
67128: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
67129: LD_INT 0
67131: PPUSH
67132: PPUSH
67133: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
67134: LD_VAR 0 1
67138: NOT
67139: PUSH
67140: LD_VAR 0 2
67144: PUSH
67145: LD_INT 1
67147: PUSH
67148: LD_INT 2
67150: PUSH
67151: LD_INT 3
67153: PUSH
67154: LD_INT 4
67156: PUSH
67157: EMPTY
67158: LIST
67159: LIST
67160: LIST
67161: LIST
67162: IN
67163: NOT
67164: OR
67165: IFFALSE 67169
// exit ;
67167: GO 67252
// tmp := [ ] ;
67169: LD_ADDR_VAR 0 5
67173: PUSH
67174: EMPTY
67175: ST_TO_ADDR
// for i in units do
67176: LD_ADDR_VAR 0 4
67180: PUSH
67181: LD_VAR 0 1
67185: PUSH
67186: FOR_IN
67187: IFFALSE 67221
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
67189: LD_ADDR_VAR 0 5
67193: PUSH
67194: LD_VAR 0 5
67198: PPUSH
67199: LD_VAR 0 4
67203: PPUSH
67204: LD_VAR 0 2
67208: PPUSH
67209: CALL_OW 259
67213: PPUSH
67214: CALL 68612 0 2
67218: ST_TO_ADDR
67219: GO 67186
67221: POP
67222: POP
// if not tmp then
67223: LD_VAR 0 5
67227: NOT
67228: IFFALSE 67232
// exit ;
67230: GO 67252
// result := SortListByListDesc ( units , tmp ) ;
67232: LD_ADDR_VAR 0 3
67236: PUSH
67237: LD_VAR 0 1
67241: PPUSH
67242: LD_VAR 0 5
67246: PPUSH
67247: CALL_OW 77
67251: ST_TO_ADDR
// end ;
67252: LD_VAR 0 3
67256: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
67257: LD_INT 0
67259: PPUSH
67260: PPUSH
67261: PPUSH
// result := false ;
67262: LD_ADDR_VAR 0 3
67266: PUSH
67267: LD_INT 0
67269: ST_TO_ADDR
// if not building then
67270: LD_VAR 0 2
67274: NOT
67275: IFFALSE 67279
// exit ;
67277: GO 67417
// x := GetX ( building ) ;
67279: LD_ADDR_VAR 0 4
67283: PUSH
67284: LD_VAR 0 2
67288: PPUSH
67289: CALL_OW 250
67293: ST_TO_ADDR
// y := GetY ( building ) ;
67294: LD_ADDR_VAR 0 5
67298: PUSH
67299: LD_VAR 0 2
67303: PPUSH
67304: CALL_OW 251
67308: ST_TO_ADDR
// if not x or not y then
67309: LD_VAR 0 4
67313: NOT
67314: PUSH
67315: LD_VAR 0 5
67319: NOT
67320: OR
67321: IFFALSE 67325
// exit ;
67323: GO 67417
// if GetTaskList ( unit ) then
67325: LD_VAR 0 1
67329: PPUSH
67330: CALL_OW 437
67334: IFFALSE 67417
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
67336: LD_STRING e
67338: PUSH
67339: LD_VAR 0 1
67343: PPUSH
67344: CALL_OW 437
67348: PUSH
67349: LD_INT 1
67351: ARRAY
67352: PUSH
67353: LD_INT 1
67355: ARRAY
67356: EQUAL
67357: PUSH
67358: LD_VAR 0 4
67362: PUSH
67363: LD_VAR 0 1
67367: PPUSH
67368: CALL_OW 437
67372: PUSH
67373: LD_INT 1
67375: ARRAY
67376: PUSH
67377: LD_INT 2
67379: ARRAY
67380: EQUAL
67381: AND
67382: PUSH
67383: LD_VAR 0 5
67387: PUSH
67388: LD_VAR 0 1
67392: PPUSH
67393: CALL_OW 437
67397: PUSH
67398: LD_INT 1
67400: ARRAY
67401: PUSH
67402: LD_INT 3
67404: ARRAY
67405: EQUAL
67406: AND
67407: IFFALSE 67417
// result := true end ;
67409: LD_ADDR_VAR 0 3
67413: PUSH
67414: LD_INT 1
67416: ST_TO_ADDR
// end ;
67417: LD_VAR 0 3
67421: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
67422: LD_INT 0
67424: PPUSH
// result := false ;
67425: LD_ADDR_VAR 0 4
67429: PUSH
67430: LD_INT 0
67432: ST_TO_ADDR
// if GetTaskList ( unit ) then
67433: LD_VAR 0 1
67437: PPUSH
67438: CALL_OW 437
67442: IFFALSE 67525
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
67444: LD_STRING M
67446: PUSH
67447: LD_VAR 0 1
67451: PPUSH
67452: CALL_OW 437
67456: PUSH
67457: LD_INT 1
67459: ARRAY
67460: PUSH
67461: LD_INT 1
67463: ARRAY
67464: EQUAL
67465: PUSH
67466: LD_VAR 0 2
67470: PUSH
67471: LD_VAR 0 1
67475: PPUSH
67476: CALL_OW 437
67480: PUSH
67481: LD_INT 1
67483: ARRAY
67484: PUSH
67485: LD_INT 2
67487: ARRAY
67488: EQUAL
67489: AND
67490: PUSH
67491: LD_VAR 0 3
67495: PUSH
67496: LD_VAR 0 1
67500: PPUSH
67501: CALL_OW 437
67505: PUSH
67506: LD_INT 1
67508: ARRAY
67509: PUSH
67510: LD_INT 3
67512: ARRAY
67513: EQUAL
67514: AND
67515: IFFALSE 67525
// result := true ;
67517: LD_ADDR_VAR 0 4
67521: PUSH
67522: LD_INT 1
67524: ST_TO_ADDR
// end ; end ;
67525: LD_VAR 0 4
67529: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
67530: LD_INT 0
67532: PPUSH
67533: PPUSH
67534: PPUSH
67535: PPUSH
// if not unit or not area then
67536: LD_VAR 0 1
67540: NOT
67541: PUSH
67542: LD_VAR 0 2
67546: NOT
67547: OR
67548: IFFALSE 67552
// exit ;
67550: GO 67715
// tmp := AreaToList ( area , i ) ;
67552: LD_ADDR_VAR 0 6
67556: PUSH
67557: LD_VAR 0 2
67561: PPUSH
67562: LD_VAR 0 5
67566: PPUSH
67567: CALL_OW 517
67571: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
67572: LD_ADDR_VAR 0 5
67576: PUSH
67577: DOUBLE
67578: LD_INT 1
67580: DEC
67581: ST_TO_ADDR
67582: LD_VAR 0 6
67586: PUSH
67587: LD_INT 1
67589: ARRAY
67590: PUSH
67591: FOR_TO
67592: IFFALSE 67713
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
67594: LD_ADDR_VAR 0 7
67598: PUSH
67599: LD_VAR 0 6
67603: PUSH
67604: LD_INT 1
67606: ARRAY
67607: PUSH
67608: LD_VAR 0 5
67612: ARRAY
67613: PUSH
67614: LD_VAR 0 6
67618: PUSH
67619: LD_INT 2
67621: ARRAY
67622: PUSH
67623: LD_VAR 0 5
67627: ARRAY
67628: PUSH
67629: EMPTY
67630: LIST
67631: LIST
67632: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 3 ] ) = 0 then
67633: LD_INT 92
67635: PUSH
67636: LD_VAR 0 7
67640: PUSH
67641: LD_INT 1
67643: ARRAY
67644: PUSH
67645: LD_VAR 0 7
67649: PUSH
67650: LD_INT 2
67652: ARRAY
67653: PUSH
67654: LD_INT 3
67656: PUSH
67657: EMPTY
67658: LIST
67659: LIST
67660: LIST
67661: LIST
67662: PPUSH
67663: CALL_OW 69
67667: PUSH
67668: LD_INT 0
67670: EQUAL
67671: IFFALSE 67711
// begin PlaceUnitArea ( unit , area , mode ) ;
67673: LD_VAR 0 1
67677: PPUSH
67678: LD_VAR 0 2
67682: PPUSH
67683: LD_VAR 0 3
67687: PPUSH
67688: CALL_OW 49
// result := IsPlaced ( unit ) ;
67692: LD_ADDR_VAR 0 4
67696: PUSH
67697: LD_VAR 0 1
67701: PPUSH
67702: CALL_OW 305
67706: ST_TO_ADDR
// exit ;
67707: POP
67708: POP
67709: GO 67715
// end ; end ;
67711: GO 67591
67713: POP
67714: POP
// end ;
67715: LD_VAR 0 4
67719: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
67720: LD_INT 0
67722: PPUSH
67723: PPUSH
67724: PPUSH
// if not side or side > 8 then
67725: LD_VAR 0 1
67729: NOT
67730: PUSH
67731: LD_VAR 0 1
67735: PUSH
67736: LD_INT 8
67738: GREATER
67739: OR
67740: IFFALSE 67744
// exit ;
67742: GO 67931
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
67744: LD_ADDR_VAR 0 4
67748: PUSH
67749: LD_INT 22
67751: PUSH
67752: LD_VAR 0 1
67756: PUSH
67757: EMPTY
67758: LIST
67759: LIST
67760: PUSH
67761: LD_INT 21
67763: PUSH
67764: LD_INT 3
67766: PUSH
67767: EMPTY
67768: LIST
67769: LIST
67770: PUSH
67771: EMPTY
67772: LIST
67773: LIST
67774: PPUSH
67775: CALL_OW 69
67779: ST_TO_ADDR
// if not tmp then
67780: LD_VAR 0 4
67784: NOT
67785: IFFALSE 67789
// exit ;
67787: GO 67931
// enable_addtolog := true ;
67789: LD_ADDR_OWVAR 81
67793: PUSH
67794: LD_INT 1
67796: ST_TO_ADDR
// AddToLog ( [ ) ;
67797: LD_STRING [
67799: PPUSH
67800: CALL_OW 561
// for i in tmp do
67804: LD_ADDR_VAR 0 3
67808: PUSH
67809: LD_VAR 0 4
67813: PUSH
67814: FOR_IN
67815: IFFALSE 67922
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
67817: LD_STRING [
67819: PUSH
67820: LD_VAR 0 3
67824: PPUSH
67825: CALL_OW 266
67829: STR
67830: PUSH
67831: LD_STRING , 
67833: STR
67834: PUSH
67835: LD_VAR 0 3
67839: PPUSH
67840: CALL_OW 250
67844: STR
67845: PUSH
67846: LD_STRING , 
67848: STR
67849: PUSH
67850: LD_VAR 0 3
67854: PPUSH
67855: CALL_OW 251
67859: STR
67860: PUSH
67861: LD_STRING , 
67863: STR
67864: PUSH
67865: LD_VAR 0 3
67869: PPUSH
67870: CALL_OW 254
67874: STR
67875: PUSH
67876: LD_STRING , 
67878: STR
67879: PUSH
67880: LD_VAR 0 3
67884: PPUSH
67885: LD_INT 1
67887: PPUSH
67888: CALL_OW 268
67892: STR
67893: PUSH
67894: LD_STRING , 
67896: STR
67897: PUSH
67898: LD_VAR 0 3
67902: PPUSH
67903: LD_INT 2
67905: PPUSH
67906: CALL_OW 268
67910: STR
67911: PUSH
67912: LD_STRING ],
67914: STR
67915: PPUSH
67916: CALL_OW 561
// end ;
67920: GO 67814
67922: POP
67923: POP
// AddToLog ( ]; ) ;
67924: LD_STRING ];
67926: PPUSH
67927: CALL_OW 561
// end ;
67931: LD_VAR 0 2
67935: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
67936: LD_INT 0
67938: PPUSH
67939: PPUSH
67940: PPUSH
67941: PPUSH
67942: PPUSH
// if not area or not rate or not max then
67943: LD_VAR 0 1
67947: NOT
67948: PUSH
67949: LD_VAR 0 2
67953: NOT
67954: OR
67955: PUSH
67956: LD_VAR 0 4
67960: NOT
67961: OR
67962: IFFALSE 67966
// exit ;
67964: GO 68155
// while 1 do
67966: LD_INT 1
67968: IFFALSE 68155
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
67970: LD_ADDR_VAR 0 9
67974: PUSH
67975: LD_VAR 0 1
67979: PPUSH
67980: LD_INT 1
67982: PPUSH
67983: CALL_OW 287
67987: PUSH
67988: LD_INT 10
67990: MUL
67991: ST_TO_ADDR
// r := rate / 10 ;
67992: LD_ADDR_VAR 0 7
67996: PUSH
67997: LD_VAR 0 2
68001: PUSH
68002: LD_INT 10
68004: DIVREAL
68005: ST_TO_ADDR
// time := 1 1$00 ;
68006: LD_ADDR_VAR 0 8
68010: PUSH
68011: LD_INT 2100
68013: ST_TO_ADDR
// if amount < min then
68014: LD_VAR 0 9
68018: PUSH
68019: LD_VAR 0 3
68023: LESS
68024: IFFALSE 68042
// r := r * 2 else
68026: LD_ADDR_VAR 0 7
68030: PUSH
68031: LD_VAR 0 7
68035: PUSH
68036: LD_INT 2
68038: MUL
68039: ST_TO_ADDR
68040: GO 68068
// if amount > max then
68042: LD_VAR 0 9
68046: PUSH
68047: LD_VAR 0 4
68051: GREATER
68052: IFFALSE 68068
// r := r / 2 ;
68054: LD_ADDR_VAR 0 7
68058: PUSH
68059: LD_VAR 0 7
68063: PUSH
68064: LD_INT 2
68066: DIVREAL
68067: ST_TO_ADDR
// time := time / r ;
68068: LD_ADDR_VAR 0 8
68072: PUSH
68073: LD_VAR 0 8
68077: PUSH
68078: LD_VAR 0 7
68082: DIVREAL
68083: ST_TO_ADDR
// if time < 0 then
68084: LD_VAR 0 8
68088: PUSH
68089: LD_INT 0
68091: LESS
68092: IFFALSE 68109
// time := time * - 1 ;
68094: LD_ADDR_VAR 0 8
68098: PUSH
68099: LD_VAR 0 8
68103: PUSH
68104: LD_INT 1
68106: NEG
68107: MUL
68108: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
68109: LD_VAR 0 8
68113: PUSH
68114: LD_INT 35
68116: PPUSH
68117: LD_INT 875
68119: PPUSH
68120: CALL_OW 12
68124: PLUS
68125: PPUSH
68126: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
68130: LD_INT 1
68132: PPUSH
68133: LD_INT 5
68135: PPUSH
68136: CALL_OW 12
68140: PPUSH
68141: LD_VAR 0 1
68145: PPUSH
68146: LD_INT 1
68148: PPUSH
68149: CALL_OW 55
// end ;
68153: GO 67966
// end ;
68155: LD_VAR 0 5
68159: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
68160: LD_INT 0
68162: PPUSH
68163: PPUSH
68164: PPUSH
68165: PPUSH
68166: PPUSH
68167: PPUSH
68168: PPUSH
68169: PPUSH
// if not turrets or not factories then
68170: LD_VAR 0 1
68174: NOT
68175: PUSH
68176: LD_VAR 0 2
68180: NOT
68181: OR
68182: IFFALSE 68186
// exit ;
68184: GO 68493
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
68186: LD_ADDR_VAR 0 10
68190: PUSH
68191: LD_INT 5
68193: PUSH
68194: LD_INT 6
68196: PUSH
68197: EMPTY
68198: LIST
68199: LIST
68200: PUSH
68201: LD_INT 2
68203: PUSH
68204: LD_INT 4
68206: PUSH
68207: EMPTY
68208: LIST
68209: LIST
68210: PUSH
68211: LD_INT 3
68213: PUSH
68214: LD_INT 5
68216: PUSH
68217: EMPTY
68218: LIST
68219: LIST
68220: PUSH
68221: EMPTY
68222: LIST
68223: LIST
68224: LIST
68225: PUSH
68226: LD_INT 24
68228: PUSH
68229: LD_INT 25
68231: PUSH
68232: EMPTY
68233: LIST
68234: LIST
68235: PUSH
68236: LD_INT 23
68238: PUSH
68239: LD_INT 27
68241: PUSH
68242: EMPTY
68243: LIST
68244: LIST
68245: PUSH
68246: EMPTY
68247: LIST
68248: LIST
68249: PUSH
68250: LD_INT 42
68252: PUSH
68253: LD_INT 43
68255: PUSH
68256: EMPTY
68257: LIST
68258: LIST
68259: PUSH
68260: LD_INT 44
68262: PUSH
68263: LD_INT 46
68265: PUSH
68266: EMPTY
68267: LIST
68268: LIST
68269: PUSH
68270: LD_INT 45
68272: PUSH
68273: LD_INT 47
68275: PUSH
68276: EMPTY
68277: LIST
68278: LIST
68279: PUSH
68280: EMPTY
68281: LIST
68282: LIST
68283: LIST
68284: PUSH
68285: EMPTY
68286: LIST
68287: LIST
68288: LIST
68289: ST_TO_ADDR
// result := [ ] ;
68290: LD_ADDR_VAR 0 3
68294: PUSH
68295: EMPTY
68296: ST_TO_ADDR
// for i in turrets do
68297: LD_ADDR_VAR 0 4
68301: PUSH
68302: LD_VAR 0 1
68306: PUSH
68307: FOR_IN
68308: IFFALSE 68491
// begin nat := GetNation ( i ) ;
68310: LD_ADDR_VAR 0 7
68314: PUSH
68315: LD_VAR 0 4
68319: PPUSH
68320: CALL_OW 248
68324: ST_TO_ADDR
// weapon := 0 ;
68325: LD_ADDR_VAR 0 8
68329: PUSH
68330: LD_INT 0
68332: ST_TO_ADDR
// if not nat then
68333: LD_VAR 0 7
68337: NOT
68338: IFFALSE 68342
// continue ;
68340: GO 68307
// for j in list [ nat ] do
68342: LD_ADDR_VAR 0 5
68346: PUSH
68347: LD_VAR 0 10
68351: PUSH
68352: LD_VAR 0 7
68356: ARRAY
68357: PUSH
68358: FOR_IN
68359: IFFALSE 68400
// if GetBWeapon ( i ) = j [ 1 ] then
68361: LD_VAR 0 4
68365: PPUSH
68366: CALL_OW 269
68370: PUSH
68371: LD_VAR 0 5
68375: PUSH
68376: LD_INT 1
68378: ARRAY
68379: EQUAL
68380: IFFALSE 68398
// begin weapon := j [ 2 ] ;
68382: LD_ADDR_VAR 0 8
68386: PUSH
68387: LD_VAR 0 5
68391: PUSH
68392: LD_INT 2
68394: ARRAY
68395: ST_TO_ADDR
// break ;
68396: GO 68400
// end ;
68398: GO 68358
68400: POP
68401: POP
// if not weapon then
68402: LD_VAR 0 8
68406: NOT
68407: IFFALSE 68411
// continue ;
68409: GO 68307
// for k in factories do
68411: LD_ADDR_VAR 0 6
68415: PUSH
68416: LD_VAR 0 2
68420: PUSH
68421: FOR_IN
68422: IFFALSE 68487
// begin weapons := AvailableWeaponList ( k ) ;
68424: LD_ADDR_VAR 0 9
68428: PUSH
68429: LD_VAR 0 6
68433: PPUSH
68434: CALL_OW 478
68438: ST_TO_ADDR
// if not weapons then
68439: LD_VAR 0 9
68443: NOT
68444: IFFALSE 68448
// continue ;
68446: GO 68421
// if weapon in weapons then
68448: LD_VAR 0 8
68452: PUSH
68453: LD_VAR 0 9
68457: IN
68458: IFFALSE 68485
// begin result := [ i , weapon ] ;
68460: LD_ADDR_VAR 0 3
68464: PUSH
68465: LD_VAR 0 4
68469: PUSH
68470: LD_VAR 0 8
68474: PUSH
68475: EMPTY
68476: LIST
68477: LIST
68478: ST_TO_ADDR
// exit ;
68479: POP
68480: POP
68481: POP
68482: POP
68483: GO 68493
// end ; end ;
68485: GO 68421
68487: POP
68488: POP
// end ;
68489: GO 68307
68491: POP
68492: POP
// end ;
68493: LD_VAR 0 3
68497: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
68498: LD_INT 0
68500: PPUSH
// if not side or side > 8 then
68501: LD_VAR 0 3
68505: NOT
68506: PUSH
68507: LD_VAR 0 3
68511: PUSH
68512: LD_INT 8
68514: GREATER
68515: OR
68516: IFFALSE 68520
// exit ;
68518: GO 68579
// if not range then
68520: LD_VAR 0 4
68524: NOT
68525: IFFALSE 68536
// range := - 12 ;
68527: LD_ADDR_VAR 0 4
68531: PUSH
68532: LD_INT 12
68534: NEG
68535: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
68536: LD_VAR 0 1
68540: PPUSH
68541: LD_VAR 0 2
68545: PPUSH
68546: LD_VAR 0 3
68550: PPUSH
68551: LD_VAR 0 4
68555: PPUSH
68556: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
68560: LD_VAR 0 1
68564: PPUSH
68565: LD_VAR 0 2
68569: PPUSH
68570: LD_VAR 0 3
68574: PPUSH
68575: CALL_OW 331
// end ;
68579: LD_VAR 0 5
68583: RET
// export function Video ( mode ) ; begin
68584: LD_INT 0
68586: PPUSH
// ingame_video = mode ;
68587: LD_ADDR_OWVAR 52
68591: PUSH
68592: LD_VAR 0 1
68596: ST_TO_ADDR
// interface_hidden = mode ;
68597: LD_ADDR_OWVAR 54
68601: PUSH
68602: LD_VAR 0 1
68606: ST_TO_ADDR
// end ;
68607: LD_VAR 0 2
68611: RET
// export function Join ( array , element ) ; begin
68612: LD_INT 0
68614: PPUSH
// result := Replace ( array , array + 1 , element ) ;
68615: LD_ADDR_VAR 0 3
68619: PUSH
68620: LD_VAR 0 1
68624: PPUSH
68625: LD_VAR 0 1
68629: PUSH
68630: LD_INT 1
68632: PLUS
68633: PPUSH
68634: LD_VAR 0 2
68638: PPUSH
68639: CALL_OW 1
68643: ST_TO_ADDR
// end ;
68644: LD_VAR 0 3
68648: RET
// export function JoinUnion ( array , element ) ; begin
68649: LD_INT 0
68651: PPUSH
// result := array union element ;
68652: LD_ADDR_VAR 0 3
68656: PUSH
68657: LD_VAR 0 1
68661: PUSH
68662: LD_VAR 0 2
68666: UNION
68667: ST_TO_ADDR
// end ;
68668: LD_VAR 0 3
68672: RET
// export function GetBehemoths ( side ) ; begin
68673: LD_INT 0
68675: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
68676: LD_ADDR_VAR 0 2
68680: PUSH
68681: LD_INT 22
68683: PUSH
68684: LD_VAR 0 1
68688: PUSH
68689: EMPTY
68690: LIST
68691: LIST
68692: PUSH
68693: LD_INT 31
68695: PUSH
68696: LD_INT 25
68698: PUSH
68699: EMPTY
68700: LIST
68701: LIST
68702: PUSH
68703: EMPTY
68704: LIST
68705: LIST
68706: PPUSH
68707: CALL_OW 69
68711: ST_TO_ADDR
// end ;
68712: LD_VAR 0 2
68716: RET
// export function Shuffle ( array ) ; var i , index ; begin
68717: LD_INT 0
68719: PPUSH
68720: PPUSH
68721: PPUSH
// result := [ ] ;
68722: LD_ADDR_VAR 0 2
68726: PUSH
68727: EMPTY
68728: ST_TO_ADDR
// if not array then
68729: LD_VAR 0 1
68733: NOT
68734: IFFALSE 68738
// exit ;
68736: GO 68837
// Randomize ;
68738: CALL_OW 10
// for i = array downto 1 do
68742: LD_ADDR_VAR 0 3
68746: PUSH
68747: DOUBLE
68748: LD_VAR 0 1
68752: INC
68753: ST_TO_ADDR
68754: LD_INT 1
68756: PUSH
68757: FOR_DOWNTO
68758: IFFALSE 68835
// begin index := rand ( 1 , array ) ;
68760: LD_ADDR_VAR 0 4
68764: PUSH
68765: LD_INT 1
68767: PPUSH
68768: LD_VAR 0 1
68772: PPUSH
68773: CALL_OW 12
68777: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
68778: LD_ADDR_VAR 0 2
68782: PUSH
68783: LD_VAR 0 2
68787: PPUSH
68788: LD_VAR 0 2
68792: PUSH
68793: LD_INT 1
68795: PLUS
68796: PPUSH
68797: LD_VAR 0 1
68801: PUSH
68802: LD_VAR 0 4
68806: ARRAY
68807: PPUSH
68808: CALL_OW 2
68812: ST_TO_ADDR
// array := Delete ( array , index ) ;
68813: LD_ADDR_VAR 0 1
68817: PUSH
68818: LD_VAR 0 1
68822: PPUSH
68823: LD_VAR 0 4
68827: PPUSH
68828: CALL_OW 3
68832: ST_TO_ADDR
// end ;
68833: GO 68757
68835: POP
68836: POP
// end ;
68837: LD_VAR 0 2
68841: RET
// export function GetBaseMaterials ( base ) ; begin
68842: LD_INT 0
68844: PPUSH
// result := [ 0 , 0 , 0 ] ;
68845: LD_ADDR_VAR 0 2
68849: PUSH
68850: LD_INT 0
68852: PUSH
68853: LD_INT 0
68855: PUSH
68856: LD_INT 0
68858: PUSH
68859: EMPTY
68860: LIST
68861: LIST
68862: LIST
68863: ST_TO_ADDR
// if not base then
68864: LD_VAR 0 1
68868: NOT
68869: IFFALSE 68873
// exit ;
68871: GO 68922
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
68873: LD_ADDR_VAR 0 2
68877: PUSH
68878: LD_VAR 0 1
68882: PPUSH
68883: LD_INT 1
68885: PPUSH
68886: CALL_OW 275
68890: PUSH
68891: LD_VAR 0 1
68895: PPUSH
68896: LD_INT 2
68898: PPUSH
68899: CALL_OW 275
68903: PUSH
68904: LD_VAR 0 1
68908: PPUSH
68909: LD_INT 3
68911: PPUSH
68912: CALL_OW 275
68916: PUSH
68917: EMPTY
68918: LIST
68919: LIST
68920: LIST
68921: ST_TO_ADDR
// end ;
68922: LD_VAR 0 2
68926: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
68927: LD_INT 0
68929: PPUSH
68930: PPUSH
// result := array ;
68931: LD_ADDR_VAR 0 3
68935: PUSH
68936: LD_VAR 0 1
68940: ST_TO_ADDR
// if size >= result then
68941: LD_VAR 0 2
68945: PUSH
68946: LD_VAR 0 3
68950: GREATEREQUAL
68951: IFFALSE 68955
// exit ;
68953: GO 69005
// if size then
68955: LD_VAR 0 2
68959: IFFALSE 69005
// for i := array downto size do
68961: LD_ADDR_VAR 0 4
68965: PUSH
68966: DOUBLE
68967: LD_VAR 0 1
68971: INC
68972: ST_TO_ADDR
68973: LD_VAR 0 2
68977: PUSH
68978: FOR_DOWNTO
68979: IFFALSE 69003
// result := Delete ( result , result ) ;
68981: LD_ADDR_VAR 0 3
68985: PUSH
68986: LD_VAR 0 3
68990: PPUSH
68991: LD_VAR 0 3
68995: PPUSH
68996: CALL_OW 3
69000: ST_TO_ADDR
69001: GO 68978
69003: POP
69004: POP
// end ;
69005: LD_VAR 0 3
69009: RET
// export function ComExit ( unit ) ; var tmp ; begin
69010: LD_INT 0
69012: PPUSH
69013: PPUSH
// if not IsInUnit ( unit ) then
69014: LD_VAR 0 1
69018: PPUSH
69019: CALL_OW 310
69023: NOT
69024: IFFALSE 69028
// exit ;
69026: GO 69088
// tmp := IsInUnit ( unit ) ;
69028: LD_ADDR_VAR 0 3
69032: PUSH
69033: LD_VAR 0 1
69037: PPUSH
69038: CALL_OW 310
69042: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
69043: LD_VAR 0 3
69047: PPUSH
69048: CALL_OW 247
69052: PUSH
69053: LD_INT 2
69055: EQUAL
69056: IFFALSE 69069
// ComExitVehicle ( unit ) else
69058: LD_VAR 0 1
69062: PPUSH
69063: CALL_OW 121
69067: GO 69078
// ComExitBuilding ( unit ) ;
69069: LD_VAR 0 1
69073: PPUSH
69074: CALL_OW 122
// result := tmp ;
69078: LD_ADDR_VAR 0 2
69082: PUSH
69083: LD_VAR 0 3
69087: ST_TO_ADDR
// end ;
69088: LD_VAR 0 2
69092: RET
// export function ComExitAll ( units ) ; var i ; begin
69093: LD_INT 0
69095: PPUSH
69096: PPUSH
// if not units then
69097: LD_VAR 0 1
69101: NOT
69102: IFFALSE 69106
// exit ;
69104: GO 69132
// for i in units do
69106: LD_ADDR_VAR 0 3
69110: PUSH
69111: LD_VAR 0 1
69115: PUSH
69116: FOR_IN
69117: IFFALSE 69130
// ComExit ( i ) ;
69119: LD_VAR 0 3
69123: PPUSH
69124: CALL 69010 0 1
69128: GO 69116
69130: POP
69131: POP
// end ;
69132: LD_VAR 0 2
69136: RET
// export function ResetHc ; begin
69137: LD_INT 0
69139: PPUSH
// InitHc ;
69140: CALL_OW 19
// hc_importance := 0 ;
69144: LD_ADDR_OWVAR 32
69148: PUSH
69149: LD_INT 0
69151: ST_TO_ADDR
// end ;
69152: LD_VAR 0 1
69156: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
69157: LD_INT 0
69159: PPUSH
69160: PPUSH
69161: PPUSH
// _x := ( x1 + x2 ) div 2 ;
69162: LD_ADDR_VAR 0 6
69166: PUSH
69167: LD_VAR 0 1
69171: PUSH
69172: LD_VAR 0 3
69176: PLUS
69177: PUSH
69178: LD_INT 2
69180: DIV
69181: ST_TO_ADDR
// if _x < 0 then
69182: LD_VAR 0 6
69186: PUSH
69187: LD_INT 0
69189: LESS
69190: IFFALSE 69207
// _x := _x * - 1 ;
69192: LD_ADDR_VAR 0 6
69196: PUSH
69197: LD_VAR 0 6
69201: PUSH
69202: LD_INT 1
69204: NEG
69205: MUL
69206: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
69207: LD_ADDR_VAR 0 7
69211: PUSH
69212: LD_VAR 0 2
69216: PUSH
69217: LD_VAR 0 4
69221: PLUS
69222: PUSH
69223: LD_INT 2
69225: DIV
69226: ST_TO_ADDR
// if _y < 0 then
69227: LD_VAR 0 7
69231: PUSH
69232: LD_INT 0
69234: LESS
69235: IFFALSE 69252
// _y := _y * - 1 ;
69237: LD_ADDR_VAR 0 7
69241: PUSH
69242: LD_VAR 0 7
69246: PUSH
69247: LD_INT 1
69249: NEG
69250: MUL
69251: ST_TO_ADDR
// result := [ _x , _y ] ;
69252: LD_ADDR_VAR 0 5
69256: PUSH
69257: LD_VAR 0 6
69261: PUSH
69262: LD_VAR 0 7
69266: PUSH
69267: EMPTY
69268: LIST
69269: LIST
69270: ST_TO_ADDR
// end ;
69271: LD_VAR 0 5
69275: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
69276: LD_INT 0
69278: PPUSH
69279: PPUSH
69280: PPUSH
69281: PPUSH
// task := GetTaskList ( unit ) ;
69282: LD_ADDR_VAR 0 7
69286: PUSH
69287: LD_VAR 0 1
69291: PPUSH
69292: CALL_OW 437
69296: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
69297: LD_VAR 0 7
69301: NOT
69302: PUSH
69303: LD_VAR 0 1
69307: PPUSH
69308: LD_VAR 0 2
69312: PPUSH
69313: CALL_OW 308
69317: NOT
69318: AND
69319: IFFALSE 69323
// exit ;
69321: GO 69441
// if IsInArea ( unit , area ) then
69323: LD_VAR 0 1
69327: PPUSH
69328: LD_VAR 0 2
69332: PPUSH
69333: CALL_OW 308
69337: IFFALSE 69355
// begin ComMoveToArea ( unit , goAway ) ;
69339: LD_VAR 0 1
69343: PPUSH
69344: LD_VAR 0 3
69348: PPUSH
69349: CALL_OW 113
// exit ;
69353: GO 69441
// end ; if task [ 1 ] [ 1 ] <> M then
69355: LD_VAR 0 7
69359: PUSH
69360: LD_INT 1
69362: ARRAY
69363: PUSH
69364: LD_INT 1
69366: ARRAY
69367: PUSH
69368: LD_STRING M
69370: NONEQUAL
69371: IFFALSE 69375
// exit ;
69373: GO 69441
// x := task [ 1 ] [ 2 ] ;
69375: LD_ADDR_VAR 0 5
69379: PUSH
69380: LD_VAR 0 7
69384: PUSH
69385: LD_INT 1
69387: ARRAY
69388: PUSH
69389: LD_INT 2
69391: ARRAY
69392: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
69393: LD_ADDR_VAR 0 6
69397: PUSH
69398: LD_VAR 0 7
69402: PUSH
69403: LD_INT 1
69405: ARRAY
69406: PUSH
69407: LD_INT 3
69409: ARRAY
69410: ST_TO_ADDR
// if InArea ( x , y , area ) then
69411: LD_VAR 0 5
69415: PPUSH
69416: LD_VAR 0 6
69420: PPUSH
69421: LD_VAR 0 2
69425: PPUSH
69426: CALL_OW 309
69430: IFFALSE 69441
// ComStop ( unit ) ;
69432: LD_VAR 0 1
69436: PPUSH
69437: CALL_OW 141
// end ;
69441: LD_VAR 0 4
69445: RET
// export function Abs ( value ) ; begin
69446: LD_INT 0
69448: PPUSH
// result := value ;
69449: LD_ADDR_VAR 0 2
69453: PUSH
69454: LD_VAR 0 1
69458: ST_TO_ADDR
// if value < 0 then
69459: LD_VAR 0 1
69463: PUSH
69464: LD_INT 0
69466: LESS
69467: IFFALSE 69484
// result := value * - 1 ;
69469: LD_ADDR_VAR 0 2
69473: PUSH
69474: LD_VAR 0 1
69478: PUSH
69479: LD_INT 1
69481: NEG
69482: MUL
69483: ST_TO_ADDR
// end ;
69484: LD_VAR 0 2
69488: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
69489: LD_INT 0
69491: PPUSH
69492: PPUSH
69493: PPUSH
69494: PPUSH
69495: PPUSH
69496: PPUSH
69497: PPUSH
69498: PPUSH
// if not unit or not building then
69499: LD_VAR 0 1
69503: NOT
69504: PUSH
69505: LD_VAR 0 2
69509: NOT
69510: OR
69511: IFFALSE 69515
// exit ;
69513: GO 69741
// x := GetX ( building ) ;
69515: LD_ADDR_VAR 0 4
69519: PUSH
69520: LD_VAR 0 2
69524: PPUSH
69525: CALL_OW 250
69529: ST_TO_ADDR
// y := GetY ( building ) ;
69530: LD_ADDR_VAR 0 6
69534: PUSH
69535: LD_VAR 0 2
69539: PPUSH
69540: CALL_OW 251
69544: ST_TO_ADDR
// d := GetDir ( building ) ;
69545: LD_ADDR_VAR 0 8
69549: PUSH
69550: LD_VAR 0 2
69554: PPUSH
69555: CALL_OW 254
69559: ST_TO_ADDR
// r := 4 ;
69560: LD_ADDR_VAR 0 9
69564: PUSH
69565: LD_INT 4
69567: ST_TO_ADDR
// for i := 1 to 5 do
69568: LD_ADDR_VAR 0 10
69572: PUSH
69573: DOUBLE
69574: LD_INT 1
69576: DEC
69577: ST_TO_ADDR
69578: LD_INT 5
69580: PUSH
69581: FOR_TO
69582: IFFALSE 69739
// begin _x := ShiftX ( x , d , r + i ) ;
69584: LD_ADDR_VAR 0 5
69588: PUSH
69589: LD_VAR 0 4
69593: PPUSH
69594: LD_VAR 0 8
69598: PPUSH
69599: LD_VAR 0 9
69603: PUSH
69604: LD_VAR 0 10
69608: PLUS
69609: PPUSH
69610: CALL_OW 272
69614: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
69615: LD_ADDR_VAR 0 7
69619: PUSH
69620: LD_VAR 0 6
69624: PPUSH
69625: LD_VAR 0 8
69629: PPUSH
69630: LD_VAR 0 9
69634: PUSH
69635: LD_VAR 0 10
69639: PLUS
69640: PPUSH
69641: CALL_OW 273
69645: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
69646: LD_VAR 0 5
69650: PPUSH
69651: LD_VAR 0 7
69655: PPUSH
69656: CALL_OW 488
69660: PUSH
69661: LD_VAR 0 5
69665: PPUSH
69666: LD_VAR 0 7
69670: PPUSH
69671: CALL_OW 428
69675: PPUSH
69676: CALL_OW 247
69680: PUSH
69681: LD_INT 3
69683: PUSH
69684: LD_INT 2
69686: PUSH
69687: EMPTY
69688: LIST
69689: LIST
69690: IN
69691: NOT
69692: AND
69693: IFFALSE 69737
// begin ComMoveXY ( unit , _x , _y ) ;
69695: LD_VAR 0 1
69699: PPUSH
69700: LD_VAR 0 5
69704: PPUSH
69705: LD_VAR 0 7
69709: PPUSH
69710: CALL_OW 111
// result := [ _x , _y ] ;
69714: LD_ADDR_VAR 0 3
69718: PUSH
69719: LD_VAR 0 5
69723: PUSH
69724: LD_VAR 0 7
69728: PUSH
69729: EMPTY
69730: LIST
69731: LIST
69732: ST_TO_ADDR
// exit ;
69733: POP
69734: POP
69735: GO 69741
// end ; end ;
69737: GO 69581
69739: POP
69740: POP
// end ;
69741: LD_VAR 0 3
69745: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
69746: LD_INT 0
69748: PPUSH
69749: PPUSH
69750: PPUSH
// result := 0 ;
69751: LD_ADDR_VAR 0 3
69755: PUSH
69756: LD_INT 0
69758: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
69759: LD_VAR 0 1
69763: PUSH
69764: LD_INT 0
69766: LESS
69767: PUSH
69768: LD_VAR 0 1
69772: PUSH
69773: LD_INT 8
69775: GREATER
69776: OR
69777: PUSH
69778: LD_VAR 0 2
69782: PUSH
69783: LD_INT 0
69785: LESS
69786: OR
69787: PUSH
69788: LD_VAR 0 2
69792: PUSH
69793: LD_INT 8
69795: GREATER
69796: OR
69797: IFFALSE 69801
// exit ;
69799: GO 69876
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
69801: LD_ADDR_VAR 0 4
69805: PUSH
69806: LD_INT 22
69808: PUSH
69809: LD_VAR 0 2
69813: PUSH
69814: EMPTY
69815: LIST
69816: LIST
69817: PPUSH
69818: CALL_OW 69
69822: PUSH
69823: FOR_IN
69824: IFFALSE 69874
// begin un := UnitShoot ( i ) ;
69826: LD_ADDR_VAR 0 5
69830: PUSH
69831: LD_VAR 0 4
69835: PPUSH
69836: CALL_OW 504
69840: ST_TO_ADDR
// if GetSide ( un ) = side1 then
69841: LD_VAR 0 5
69845: PPUSH
69846: CALL_OW 255
69850: PUSH
69851: LD_VAR 0 1
69855: EQUAL
69856: IFFALSE 69872
// begin result := un ;
69858: LD_ADDR_VAR 0 3
69862: PUSH
69863: LD_VAR 0 5
69867: ST_TO_ADDR
// exit ;
69868: POP
69869: POP
69870: GO 69876
// end ; end ;
69872: GO 69823
69874: POP
69875: POP
// end ;
69876: LD_VAR 0 3
69880: RET
// export function GetCargoBay ( units ) ; begin
69881: LD_INT 0
69883: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
69884: LD_ADDR_VAR 0 2
69888: PUSH
69889: LD_VAR 0 1
69893: PPUSH
69894: LD_INT 2
69896: PUSH
69897: LD_INT 34
69899: PUSH
69900: LD_INT 12
69902: PUSH
69903: EMPTY
69904: LIST
69905: LIST
69906: PUSH
69907: LD_INT 34
69909: PUSH
69910: LD_INT 51
69912: PUSH
69913: EMPTY
69914: LIST
69915: LIST
69916: PUSH
69917: LD_INT 34
69919: PUSH
69920: LD_INT 32
69922: PUSH
69923: EMPTY
69924: LIST
69925: LIST
69926: PUSH
69927: LD_INT 34
69929: PUSH
69930: LD_INT 89
69932: PUSH
69933: EMPTY
69934: LIST
69935: LIST
69936: PUSH
69937: EMPTY
69938: LIST
69939: LIST
69940: LIST
69941: LIST
69942: LIST
69943: PPUSH
69944: CALL_OW 72
69948: ST_TO_ADDR
// end ;
69949: LD_VAR 0 2
69953: RET
// export function Negate ( value ) ; begin
69954: LD_INT 0
69956: PPUSH
// result := not value ;
69957: LD_ADDR_VAR 0 2
69961: PUSH
69962: LD_VAR 0 1
69966: NOT
69967: ST_TO_ADDR
// end ;
69968: LD_VAR 0 2
69972: RET
// export function Inc ( value ) ; begin
69973: LD_INT 0
69975: PPUSH
// result := value + 1 ;
69976: LD_ADDR_VAR 0 2
69980: PUSH
69981: LD_VAR 0 1
69985: PUSH
69986: LD_INT 1
69988: PLUS
69989: ST_TO_ADDR
// end ;
69990: LD_VAR 0 2
69994: RET
// export function Dec ( value ) ; begin
69995: LD_INT 0
69997: PPUSH
// result := value - 1 ;
69998: LD_ADDR_VAR 0 2
70002: PUSH
70003: LD_VAR 0 1
70007: PUSH
70008: LD_INT 1
70010: MINUS
70011: ST_TO_ADDR
// end ;
70012: LD_VAR 0 2
70016: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
70017: LD_INT 0
70019: PPUSH
70020: PPUSH
70021: PPUSH
70022: PPUSH
70023: PPUSH
70024: PPUSH
70025: PPUSH
70026: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
70027: LD_VAR 0 1
70031: PPUSH
70032: LD_VAR 0 2
70036: PPUSH
70037: CALL_OW 488
70041: NOT
70042: PUSH
70043: LD_VAR 0 3
70047: PPUSH
70048: LD_VAR 0 4
70052: PPUSH
70053: CALL_OW 488
70057: NOT
70058: OR
70059: IFFALSE 70072
// begin result := - 1 ;
70061: LD_ADDR_VAR 0 5
70065: PUSH
70066: LD_INT 1
70068: NEG
70069: ST_TO_ADDR
// exit ;
70070: GO 70307
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
70072: LD_ADDR_VAR 0 12
70076: PUSH
70077: LD_VAR 0 1
70081: PPUSH
70082: LD_VAR 0 2
70086: PPUSH
70087: LD_VAR 0 3
70091: PPUSH
70092: LD_VAR 0 4
70096: PPUSH
70097: CALL 69157 0 4
70101: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
70102: LD_ADDR_VAR 0 11
70106: PUSH
70107: LD_VAR 0 1
70111: PPUSH
70112: LD_VAR 0 2
70116: PPUSH
70117: LD_VAR 0 12
70121: PUSH
70122: LD_INT 1
70124: ARRAY
70125: PPUSH
70126: LD_VAR 0 12
70130: PUSH
70131: LD_INT 2
70133: ARRAY
70134: PPUSH
70135: CALL_OW 298
70139: ST_TO_ADDR
// distance := 9999 ;
70140: LD_ADDR_VAR 0 10
70144: PUSH
70145: LD_INT 9999
70147: ST_TO_ADDR
// for i := 0 to 5 do
70148: LD_ADDR_VAR 0 6
70152: PUSH
70153: DOUBLE
70154: LD_INT 0
70156: DEC
70157: ST_TO_ADDR
70158: LD_INT 5
70160: PUSH
70161: FOR_TO
70162: IFFALSE 70305
// begin _x := ShiftX ( x1 , i , centerDist ) ;
70164: LD_ADDR_VAR 0 7
70168: PUSH
70169: LD_VAR 0 1
70173: PPUSH
70174: LD_VAR 0 6
70178: PPUSH
70179: LD_VAR 0 11
70183: PPUSH
70184: CALL_OW 272
70188: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
70189: LD_ADDR_VAR 0 8
70193: PUSH
70194: LD_VAR 0 2
70198: PPUSH
70199: LD_VAR 0 6
70203: PPUSH
70204: LD_VAR 0 11
70208: PPUSH
70209: CALL_OW 273
70213: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
70214: LD_VAR 0 7
70218: PPUSH
70219: LD_VAR 0 8
70223: PPUSH
70224: CALL_OW 488
70228: NOT
70229: IFFALSE 70233
// continue ;
70231: GO 70161
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
70233: LD_ADDR_VAR 0 9
70237: PUSH
70238: LD_VAR 0 12
70242: PUSH
70243: LD_INT 1
70245: ARRAY
70246: PPUSH
70247: LD_VAR 0 12
70251: PUSH
70252: LD_INT 2
70254: ARRAY
70255: PPUSH
70256: LD_VAR 0 7
70260: PPUSH
70261: LD_VAR 0 8
70265: PPUSH
70266: CALL_OW 298
70270: ST_TO_ADDR
// if tmp < distance then
70271: LD_VAR 0 9
70275: PUSH
70276: LD_VAR 0 10
70280: LESS
70281: IFFALSE 70303
// begin result := i ;
70283: LD_ADDR_VAR 0 5
70287: PUSH
70288: LD_VAR 0 6
70292: ST_TO_ADDR
// distance := tmp ;
70293: LD_ADDR_VAR 0 10
70297: PUSH
70298: LD_VAR 0 9
70302: ST_TO_ADDR
// end ; end ;
70303: GO 70161
70305: POP
70306: POP
// end ;
70307: LD_VAR 0 5
70311: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
70312: LD_INT 0
70314: PPUSH
70315: PPUSH
// if not driver or not IsInUnit ( driver ) then
70316: LD_VAR 0 1
70320: NOT
70321: PUSH
70322: LD_VAR 0 1
70326: PPUSH
70327: CALL_OW 310
70331: NOT
70332: OR
70333: IFFALSE 70337
// exit ;
70335: GO 70427
// vehicle := IsInUnit ( driver ) ;
70337: LD_ADDR_VAR 0 3
70341: PUSH
70342: LD_VAR 0 1
70346: PPUSH
70347: CALL_OW 310
70351: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
70352: LD_VAR 0 1
70356: PPUSH
70357: LD_STRING \
70359: PUSH
70360: LD_INT 0
70362: PUSH
70363: LD_INT 0
70365: PUSH
70366: LD_INT 0
70368: PUSH
70369: LD_INT 0
70371: PUSH
70372: LD_INT 0
70374: PUSH
70375: LD_INT 0
70377: PUSH
70378: EMPTY
70379: LIST
70380: LIST
70381: LIST
70382: LIST
70383: LIST
70384: LIST
70385: LIST
70386: PUSH
70387: LD_STRING E
70389: PUSH
70390: LD_INT 0
70392: PUSH
70393: LD_INT 0
70395: PUSH
70396: LD_VAR 0 3
70400: PUSH
70401: LD_INT 0
70403: PUSH
70404: LD_INT 0
70406: PUSH
70407: LD_INT 0
70409: PUSH
70410: EMPTY
70411: LIST
70412: LIST
70413: LIST
70414: LIST
70415: LIST
70416: LIST
70417: LIST
70418: PUSH
70419: EMPTY
70420: LIST
70421: LIST
70422: PPUSH
70423: CALL_OW 446
// end ;
70427: LD_VAR 0 2
70431: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
70432: LD_INT 0
70434: PPUSH
70435: PPUSH
// if not driver or not IsInUnit ( driver ) then
70436: LD_VAR 0 1
70440: NOT
70441: PUSH
70442: LD_VAR 0 1
70446: PPUSH
70447: CALL_OW 310
70451: NOT
70452: OR
70453: IFFALSE 70457
// exit ;
70455: GO 70547
// vehicle := IsInUnit ( driver ) ;
70457: LD_ADDR_VAR 0 3
70461: PUSH
70462: LD_VAR 0 1
70466: PPUSH
70467: CALL_OW 310
70471: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
70472: LD_VAR 0 1
70476: PPUSH
70477: LD_STRING \
70479: PUSH
70480: LD_INT 0
70482: PUSH
70483: LD_INT 0
70485: PUSH
70486: LD_INT 0
70488: PUSH
70489: LD_INT 0
70491: PUSH
70492: LD_INT 0
70494: PUSH
70495: LD_INT 0
70497: PUSH
70498: EMPTY
70499: LIST
70500: LIST
70501: LIST
70502: LIST
70503: LIST
70504: LIST
70505: LIST
70506: PUSH
70507: LD_STRING E
70509: PUSH
70510: LD_INT 0
70512: PUSH
70513: LD_INT 0
70515: PUSH
70516: LD_VAR 0 3
70520: PUSH
70521: LD_INT 0
70523: PUSH
70524: LD_INT 0
70526: PUSH
70527: LD_INT 0
70529: PUSH
70530: EMPTY
70531: LIST
70532: LIST
70533: LIST
70534: LIST
70535: LIST
70536: LIST
70537: LIST
70538: PUSH
70539: EMPTY
70540: LIST
70541: LIST
70542: PPUSH
70543: CALL_OW 447
// end ;
70547: LD_VAR 0 2
70551: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
70552: LD_INT 0
70554: PPUSH
70555: PPUSH
70556: PPUSH
// tmp := [ ] ;
70557: LD_ADDR_VAR 0 5
70561: PUSH
70562: EMPTY
70563: ST_TO_ADDR
// for i in units do
70564: LD_ADDR_VAR 0 4
70568: PUSH
70569: LD_VAR 0 1
70573: PUSH
70574: FOR_IN
70575: IFFALSE 70613
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
70577: LD_ADDR_VAR 0 5
70581: PUSH
70582: LD_VAR 0 5
70586: PPUSH
70587: LD_VAR 0 5
70591: PUSH
70592: LD_INT 1
70594: PLUS
70595: PPUSH
70596: LD_VAR 0 4
70600: PPUSH
70601: CALL_OW 256
70605: PPUSH
70606: CALL_OW 2
70610: ST_TO_ADDR
70611: GO 70574
70613: POP
70614: POP
// if not tmp then
70615: LD_VAR 0 5
70619: NOT
70620: IFFALSE 70624
// exit ;
70622: GO 70672
// if asc then
70624: LD_VAR 0 2
70628: IFFALSE 70652
// result := SortListByListAsc ( units , tmp ) else
70630: LD_ADDR_VAR 0 3
70634: PUSH
70635: LD_VAR 0 1
70639: PPUSH
70640: LD_VAR 0 5
70644: PPUSH
70645: CALL_OW 76
70649: ST_TO_ADDR
70650: GO 70672
// result := SortListByListDesc ( units , tmp ) ;
70652: LD_ADDR_VAR 0 3
70656: PUSH
70657: LD_VAR 0 1
70661: PPUSH
70662: LD_VAR 0 5
70666: PPUSH
70667: CALL_OW 77
70671: ST_TO_ADDR
// end ;
70672: LD_VAR 0 3
70676: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
70677: LD_INT 0
70679: PPUSH
70680: PPUSH
// task := GetTaskList ( mech ) ;
70681: LD_ADDR_VAR 0 4
70685: PUSH
70686: LD_VAR 0 1
70690: PPUSH
70691: CALL_OW 437
70695: ST_TO_ADDR
// if not task then
70696: LD_VAR 0 4
70700: NOT
70701: IFFALSE 70705
// exit ;
70703: GO 70747
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
70705: LD_ADDR_VAR 0 3
70709: PUSH
70710: LD_VAR 0 4
70714: PUSH
70715: LD_INT 1
70717: ARRAY
70718: PUSH
70719: LD_INT 1
70721: ARRAY
70722: PUSH
70723: LD_STRING r
70725: EQUAL
70726: PUSH
70727: LD_VAR 0 4
70731: PUSH
70732: LD_INT 1
70734: ARRAY
70735: PUSH
70736: LD_INT 4
70738: ARRAY
70739: PUSH
70740: LD_VAR 0 2
70744: EQUAL
70745: AND
70746: ST_TO_ADDR
// end ;
70747: LD_VAR 0 3
70751: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
70752: LD_INT 0
70754: PPUSH
// SetDir ( unit , d ) ;
70755: LD_VAR 0 1
70759: PPUSH
70760: LD_VAR 0 4
70764: PPUSH
70765: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
70769: LD_VAR 0 1
70773: PPUSH
70774: LD_VAR 0 2
70778: PPUSH
70779: LD_VAR 0 3
70783: PPUSH
70784: LD_VAR 0 5
70788: PPUSH
70789: CALL_OW 48
// end ;
70793: LD_VAR 0 6
70797: RET
// export function ToNaturalNumber ( number ) ; begin
70798: LD_INT 0
70800: PPUSH
// result := number div 1 ;
70801: LD_ADDR_VAR 0 2
70805: PUSH
70806: LD_VAR 0 1
70810: PUSH
70811: LD_INT 1
70813: DIV
70814: ST_TO_ADDR
// if number < 0 then
70815: LD_VAR 0 1
70819: PUSH
70820: LD_INT 0
70822: LESS
70823: IFFALSE 70833
// result := 0 ;
70825: LD_ADDR_VAR 0 2
70829: PUSH
70830: LD_INT 0
70832: ST_TO_ADDR
// end ;
70833: LD_VAR 0 2
70837: RET
// export function SortByClass ( units , class ) ; var un ; begin
70838: LD_INT 0
70840: PPUSH
70841: PPUSH
// if not units or not class then
70842: LD_VAR 0 1
70846: NOT
70847: PUSH
70848: LD_VAR 0 2
70852: NOT
70853: OR
70854: IFFALSE 70858
// exit ;
70856: GO 70953
// result := [ ] ;
70858: LD_ADDR_VAR 0 3
70862: PUSH
70863: EMPTY
70864: ST_TO_ADDR
// for un in units do
70865: LD_ADDR_VAR 0 4
70869: PUSH
70870: LD_VAR 0 1
70874: PUSH
70875: FOR_IN
70876: IFFALSE 70951
// if GetClass ( un ) = class then
70878: LD_VAR 0 4
70882: PPUSH
70883: CALL_OW 257
70887: PUSH
70888: LD_VAR 0 2
70892: EQUAL
70893: IFFALSE 70920
// result := Insert ( result , 1 , un ) else
70895: LD_ADDR_VAR 0 3
70899: PUSH
70900: LD_VAR 0 3
70904: PPUSH
70905: LD_INT 1
70907: PPUSH
70908: LD_VAR 0 4
70912: PPUSH
70913: CALL_OW 2
70917: ST_TO_ADDR
70918: GO 70949
// result := Replace ( result , result + 1 , un ) ;
70920: LD_ADDR_VAR 0 3
70924: PUSH
70925: LD_VAR 0 3
70929: PPUSH
70930: LD_VAR 0 3
70934: PUSH
70935: LD_INT 1
70937: PLUS
70938: PPUSH
70939: LD_VAR 0 4
70943: PPUSH
70944: CALL_OW 1
70948: ST_TO_ADDR
70949: GO 70875
70951: POP
70952: POP
// end ;
70953: LD_VAR 0 3
70957: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
70958: LD_INT 0
70960: PPUSH
70961: PPUSH
70962: PPUSH
70963: PPUSH
70964: PPUSH
70965: PPUSH
70966: PPUSH
// result := [ ] ;
70967: LD_ADDR_VAR 0 4
70971: PUSH
70972: EMPTY
70973: ST_TO_ADDR
// if x - r < 0 then
70974: LD_VAR 0 1
70978: PUSH
70979: LD_VAR 0 3
70983: MINUS
70984: PUSH
70985: LD_INT 0
70987: LESS
70988: IFFALSE 71000
// min_x := 0 else
70990: LD_ADDR_VAR 0 8
70994: PUSH
70995: LD_INT 0
70997: ST_TO_ADDR
70998: GO 71016
// min_x := x - r ;
71000: LD_ADDR_VAR 0 8
71004: PUSH
71005: LD_VAR 0 1
71009: PUSH
71010: LD_VAR 0 3
71014: MINUS
71015: ST_TO_ADDR
// if y - r < 0 then
71016: LD_VAR 0 2
71020: PUSH
71021: LD_VAR 0 3
71025: MINUS
71026: PUSH
71027: LD_INT 0
71029: LESS
71030: IFFALSE 71042
// min_y := 0 else
71032: LD_ADDR_VAR 0 7
71036: PUSH
71037: LD_INT 0
71039: ST_TO_ADDR
71040: GO 71058
// min_y := y - r ;
71042: LD_ADDR_VAR 0 7
71046: PUSH
71047: LD_VAR 0 2
71051: PUSH
71052: LD_VAR 0 3
71056: MINUS
71057: ST_TO_ADDR
// max_x := x + r ;
71058: LD_ADDR_VAR 0 9
71062: PUSH
71063: LD_VAR 0 1
71067: PUSH
71068: LD_VAR 0 3
71072: PLUS
71073: ST_TO_ADDR
// max_y := y + r ;
71074: LD_ADDR_VAR 0 10
71078: PUSH
71079: LD_VAR 0 2
71083: PUSH
71084: LD_VAR 0 3
71088: PLUS
71089: ST_TO_ADDR
// for _x = min_x to max_x do
71090: LD_ADDR_VAR 0 5
71094: PUSH
71095: DOUBLE
71096: LD_VAR 0 8
71100: DEC
71101: ST_TO_ADDR
71102: LD_VAR 0 9
71106: PUSH
71107: FOR_TO
71108: IFFALSE 71209
// for _y = min_y to max_y do
71110: LD_ADDR_VAR 0 6
71114: PUSH
71115: DOUBLE
71116: LD_VAR 0 7
71120: DEC
71121: ST_TO_ADDR
71122: LD_VAR 0 10
71126: PUSH
71127: FOR_TO
71128: IFFALSE 71205
// begin if not ValidHex ( _x , _y ) then
71130: LD_VAR 0 5
71134: PPUSH
71135: LD_VAR 0 6
71139: PPUSH
71140: CALL_OW 488
71144: NOT
71145: IFFALSE 71149
// continue ;
71147: GO 71127
// if GetResourceTypeXY ( _x , _y ) then
71149: LD_VAR 0 5
71153: PPUSH
71154: LD_VAR 0 6
71158: PPUSH
71159: CALL_OW 283
71163: IFFALSE 71203
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
71165: LD_ADDR_VAR 0 4
71169: PUSH
71170: LD_VAR 0 4
71174: PPUSH
71175: LD_VAR 0 4
71179: PUSH
71180: LD_INT 1
71182: PLUS
71183: PPUSH
71184: LD_VAR 0 5
71188: PUSH
71189: LD_VAR 0 6
71193: PUSH
71194: EMPTY
71195: LIST
71196: LIST
71197: PPUSH
71198: CALL_OW 1
71202: ST_TO_ADDR
// end ;
71203: GO 71127
71205: POP
71206: POP
71207: GO 71107
71209: POP
71210: POP
// end ;
71211: LD_VAR 0 4
71215: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
71216: LD_INT 0
71218: PPUSH
71219: PPUSH
71220: PPUSH
71221: PPUSH
71222: PPUSH
71223: PPUSH
71224: PPUSH
71225: PPUSH
// if not units then
71226: LD_VAR 0 1
71230: NOT
71231: IFFALSE 71235
// exit ;
71233: GO 71759
// result := UnitFilter ( units , [ f_ok ] ) ;
71235: LD_ADDR_VAR 0 3
71239: PUSH
71240: LD_VAR 0 1
71244: PPUSH
71245: LD_INT 50
71247: PUSH
71248: EMPTY
71249: LIST
71250: PPUSH
71251: CALL_OW 72
71255: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
71256: LD_ADDR_VAR 0 8
71260: PUSH
71261: LD_VAR 0 1
71265: PUSH
71266: LD_INT 1
71268: ARRAY
71269: PPUSH
71270: CALL_OW 255
71274: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
71275: LD_ADDR_VAR 0 10
71279: PUSH
71280: LD_INT 29
71282: PUSH
71283: LD_INT 91
71285: PUSH
71286: LD_INT 49
71288: PUSH
71289: EMPTY
71290: LIST
71291: LIST
71292: LIST
71293: ST_TO_ADDR
// if not result then
71294: LD_VAR 0 3
71298: NOT
71299: IFFALSE 71303
// exit ;
71301: GO 71759
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
71303: LD_ADDR_VAR 0 5
71307: PUSH
71308: LD_INT 81
71310: PUSH
71311: LD_VAR 0 8
71315: PUSH
71316: EMPTY
71317: LIST
71318: LIST
71319: PPUSH
71320: CALL_OW 69
71324: ST_TO_ADDR
// for i in result do
71325: LD_ADDR_VAR 0 4
71329: PUSH
71330: LD_VAR 0 3
71334: PUSH
71335: FOR_IN
71336: IFFALSE 71757
// begin tag := GetTag ( i ) + 1 ;
71338: LD_ADDR_VAR 0 9
71342: PUSH
71343: LD_VAR 0 4
71347: PPUSH
71348: CALL_OW 110
71352: PUSH
71353: LD_INT 1
71355: PLUS
71356: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
71357: LD_ADDR_VAR 0 7
71361: PUSH
71362: LD_VAR 0 4
71366: PPUSH
71367: CALL_OW 250
71371: PPUSH
71372: LD_VAR 0 4
71376: PPUSH
71377: CALL_OW 251
71381: PPUSH
71382: LD_INT 6
71384: PPUSH
71385: CALL 70958 0 3
71389: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
71390: LD_VAR 0 4
71394: PPUSH
71395: CALL_OW 247
71399: PUSH
71400: LD_INT 2
71402: EQUAL
71403: PUSH
71404: LD_VAR 0 7
71408: AND
71409: PUSH
71410: LD_VAR 0 4
71414: PPUSH
71415: CALL_OW 264
71419: PUSH
71420: LD_VAR 0 10
71424: IN
71425: NOT
71426: AND
71427: IFFALSE 71466
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
71429: LD_VAR 0 4
71433: PPUSH
71434: LD_VAR 0 7
71438: PUSH
71439: LD_INT 1
71441: ARRAY
71442: PUSH
71443: LD_INT 1
71445: ARRAY
71446: PPUSH
71447: LD_VAR 0 7
71451: PUSH
71452: LD_INT 1
71454: ARRAY
71455: PUSH
71456: LD_INT 2
71458: ARRAY
71459: PPUSH
71460: CALL_OW 116
71464: GO 71755
// if path > tag then
71466: LD_VAR 0 2
71470: PUSH
71471: LD_VAR 0 9
71475: GREATER
71476: IFFALSE 71684
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
71478: LD_ADDR_VAR 0 6
71482: PUSH
71483: LD_VAR 0 5
71487: PPUSH
71488: LD_INT 91
71490: PUSH
71491: LD_VAR 0 4
71495: PUSH
71496: LD_INT 8
71498: PUSH
71499: EMPTY
71500: LIST
71501: LIST
71502: LIST
71503: PPUSH
71504: CALL_OW 72
71508: ST_TO_ADDR
// if nearEnemy then
71509: LD_VAR 0 6
71513: IFFALSE 71582
// begin if GetWeapon ( i ) = ru_time_lapser then
71515: LD_VAR 0 4
71519: PPUSH
71520: CALL_OW 264
71524: PUSH
71525: LD_INT 49
71527: EQUAL
71528: IFFALSE 71556
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
71530: LD_VAR 0 4
71534: PPUSH
71535: LD_VAR 0 6
71539: PPUSH
71540: LD_VAR 0 4
71544: PPUSH
71545: CALL_OW 74
71549: PPUSH
71550: CALL_OW 112
71554: GO 71580
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
71556: LD_VAR 0 4
71560: PPUSH
71561: LD_VAR 0 6
71565: PPUSH
71566: LD_VAR 0 4
71570: PPUSH
71571: CALL_OW 74
71575: PPUSH
71576: CALL 72684 0 2
// end else
71580: GO 71682
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
71582: LD_VAR 0 4
71586: PPUSH
71587: LD_VAR 0 2
71591: PUSH
71592: LD_VAR 0 9
71596: ARRAY
71597: PUSH
71598: LD_INT 1
71600: ARRAY
71601: PPUSH
71602: LD_VAR 0 2
71606: PUSH
71607: LD_VAR 0 9
71611: ARRAY
71612: PUSH
71613: LD_INT 2
71615: ARRAY
71616: PPUSH
71617: CALL_OW 297
71621: PUSH
71622: LD_INT 6
71624: GREATER
71625: IFFALSE 71668
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
71627: LD_VAR 0 4
71631: PPUSH
71632: LD_VAR 0 2
71636: PUSH
71637: LD_VAR 0 9
71641: ARRAY
71642: PUSH
71643: LD_INT 1
71645: ARRAY
71646: PPUSH
71647: LD_VAR 0 2
71651: PUSH
71652: LD_VAR 0 9
71656: ARRAY
71657: PUSH
71658: LD_INT 2
71660: ARRAY
71661: PPUSH
71662: CALL_OW 114
71666: GO 71682
// SetTag ( i , tag ) ;
71668: LD_VAR 0 4
71672: PPUSH
71673: LD_VAR 0 9
71677: PPUSH
71678: CALL_OW 109
// end else
71682: GO 71755
// if enemy then
71684: LD_VAR 0 5
71688: IFFALSE 71755
// begin if GetWeapon ( i ) = ru_time_lapser then
71690: LD_VAR 0 4
71694: PPUSH
71695: CALL_OW 264
71699: PUSH
71700: LD_INT 49
71702: EQUAL
71703: IFFALSE 71731
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
71705: LD_VAR 0 4
71709: PPUSH
71710: LD_VAR 0 5
71714: PPUSH
71715: LD_VAR 0 4
71719: PPUSH
71720: CALL_OW 74
71724: PPUSH
71725: CALL_OW 112
71729: GO 71755
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
71731: LD_VAR 0 4
71735: PPUSH
71736: LD_VAR 0 5
71740: PPUSH
71741: LD_VAR 0 4
71745: PPUSH
71746: CALL_OW 74
71750: PPUSH
71751: CALL 72684 0 2
// end ; end ;
71755: GO 71335
71757: POP
71758: POP
// end ;
71759: LD_VAR 0 3
71763: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
71764: LD_INT 0
71766: PPUSH
71767: PPUSH
71768: PPUSH
// if not unit or IsInUnit ( unit ) then
71769: LD_VAR 0 1
71773: NOT
71774: PUSH
71775: LD_VAR 0 1
71779: PPUSH
71780: CALL_OW 310
71784: OR
71785: IFFALSE 71789
// exit ;
71787: GO 71880
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
71789: LD_ADDR_VAR 0 4
71793: PUSH
71794: LD_VAR 0 1
71798: PPUSH
71799: CALL_OW 250
71803: PPUSH
71804: LD_VAR 0 2
71808: PPUSH
71809: LD_INT 1
71811: PPUSH
71812: CALL_OW 272
71816: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
71817: LD_ADDR_VAR 0 5
71821: PUSH
71822: LD_VAR 0 1
71826: PPUSH
71827: CALL_OW 251
71831: PPUSH
71832: LD_VAR 0 2
71836: PPUSH
71837: LD_INT 1
71839: PPUSH
71840: CALL_OW 273
71844: ST_TO_ADDR
// if ValidHex ( x , y ) then
71845: LD_VAR 0 4
71849: PPUSH
71850: LD_VAR 0 5
71854: PPUSH
71855: CALL_OW 488
71859: IFFALSE 71880
// ComTurnXY ( unit , x , y ) ;
71861: LD_VAR 0 1
71865: PPUSH
71866: LD_VAR 0 4
71870: PPUSH
71871: LD_VAR 0 5
71875: PPUSH
71876: CALL_OW 118
// end ;
71880: LD_VAR 0 3
71884: RET
// export function SeeUnits ( side , units ) ; var i ; begin
71885: LD_INT 0
71887: PPUSH
71888: PPUSH
// result := false ;
71889: LD_ADDR_VAR 0 3
71893: PUSH
71894: LD_INT 0
71896: ST_TO_ADDR
// if not units then
71897: LD_VAR 0 2
71901: NOT
71902: IFFALSE 71906
// exit ;
71904: GO 71951
// for i in units do
71906: LD_ADDR_VAR 0 4
71910: PUSH
71911: LD_VAR 0 2
71915: PUSH
71916: FOR_IN
71917: IFFALSE 71949
// if See ( side , i ) then
71919: LD_VAR 0 1
71923: PPUSH
71924: LD_VAR 0 4
71928: PPUSH
71929: CALL_OW 292
71933: IFFALSE 71947
// begin result := true ;
71935: LD_ADDR_VAR 0 3
71939: PUSH
71940: LD_INT 1
71942: ST_TO_ADDR
// exit ;
71943: POP
71944: POP
71945: GO 71951
// end ;
71947: GO 71916
71949: POP
71950: POP
// end ;
71951: LD_VAR 0 3
71955: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
71956: LD_INT 0
71958: PPUSH
71959: PPUSH
71960: PPUSH
71961: PPUSH
// if not unit or not points then
71962: LD_VAR 0 1
71966: NOT
71967: PUSH
71968: LD_VAR 0 2
71972: NOT
71973: OR
71974: IFFALSE 71978
// exit ;
71976: GO 72068
// dist := 99999 ;
71978: LD_ADDR_VAR 0 5
71982: PUSH
71983: LD_INT 99999
71985: ST_TO_ADDR
// for i in points do
71986: LD_ADDR_VAR 0 4
71990: PUSH
71991: LD_VAR 0 2
71995: PUSH
71996: FOR_IN
71997: IFFALSE 72066
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
71999: LD_ADDR_VAR 0 6
72003: PUSH
72004: LD_VAR 0 1
72008: PPUSH
72009: LD_VAR 0 4
72013: PUSH
72014: LD_INT 1
72016: ARRAY
72017: PPUSH
72018: LD_VAR 0 4
72022: PUSH
72023: LD_INT 2
72025: ARRAY
72026: PPUSH
72027: CALL_OW 297
72031: ST_TO_ADDR
// if tmpDist < dist then
72032: LD_VAR 0 6
72036: PUSH
72037: LD_VAR 0 5
72041: LESS
72042: IFFALSE 72064
// begin result := i ;
72044: LD_ADDR_VAR 0 3
72048: PUSH
72049: LD_VAR 0 4
72053: ST_TO_ADDR
// dist := tmpDist ;
72054: LD_ADDR_VAR 0 5
72058: PUSH
72059: LD_VAR 0 6
72063: ST_TO_ADDR
// end ; end ;
72064: GO 71996
72066: POP
72067: POP
// end ;
72068: LD_VAR 0 3
72072: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
72073: LD_INT 0
72075: PPUSH
// uc_side := side ;
72076: LD_ADDR_OWVAR 20
72080: PUSH
72081: LD_VAR 0 1
72085: ST_TO_ADDR
// uc_nation := 3 ;
72086: LD_ADDR_OWVAR 21
72090: PUSH
72091: LD_INT 3
72093: ST_TO_ADDR
// vc_chassis := 25 ;
72094: LD_ADDR_OWVAR 37
72098: PUSH
72099: LD_INT 25
72101: ST_TO_ADDR
// vc_engine := engine_siberite ;
72102: LD_ADDR_OWVAR 39
72106: PUSH
72107: LD_INT 3
72109: ST_TO_ADDR
// vc_control := control_computer ;
72110: LD_ADDR_OWVAR 38
72114: PUSH
72115: LD_INT 3
72117: ST_TO_ADDR
// vc_weapon := 59 ;
72118: LD_ADDR_OWVAR 40
72122: PUSH
72123: LD_INT 59
72125: ST_TO_ADDR
// result := CreateVehicle ;
72126: LD_ADDR_VAR 0 5
72130: PUSH
72131: CALL_OW 45
72135: ST_TO_ADDR
// SetDir ( result , d ) ;
72136: LD_VAR 0 5
72140: PPUSH
72141: LD_VAR 0 4
72145: PPUSH
72146: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
72150: LD_VAR 0 5
72154: PPUSH
72155: LD_VAR 0 2
72159: PPUSH
72160: LD_VAR 0 3
72164: PPUSH
72165: LD_INT 0
72167: PPUSH
72168: CALL_OW 48
// end ;
72172: LD_VAR 0 5
72176: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
72177: LD_INT 0
72179: PPUSH
72180: PPUSH
72181: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
72182: LD_ADDR_VAR 0 2
72186: PUSH
72187: LD_INT 0
72189: PUSH
72190: LD_INT 0
72192: PUSH
72193: LD_INT 0
72195: PUSH
72196: LD_INT 0
72198: PUSH
72199: EMPTY
72200: LIST
72201: LIST
72202: LIST
72203: LIST
72204: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
72205: LD_VAR 0 1
72209: NOT
72210: PUSH
72211: LD_VAR 0 1
72215: PPUSH
72216: CALL_OW 264
72220: PUSH
72221: LD_INT 12
72223: PUSH
72224: LD_INT 51
72226: PUSH
72227: LD_INT 32
72229: PUSH
72230: LD_INT 89
72232: PUSH
72233: EMPTY
72234: LIST
72235: LIST
72236: LIST
72237: LIST
72238: IN
72239: NOT
72240: OR
72241: IFFALSE 72245
// exit ;
72243: GO 72343
// for i := 1 to 3 do
72245: LD_ADDR_VAR 0 3
72249: PUSH
72250: DOUBLE
72251: LD_INT 1
72253: DEC
72254: ST_TO_ADDR
72255: LD_INT 3
72257: PUSH
72258: FOR_TO
72259: IFFALSE 72341
// begin tmp := GetCargo ( cargo , i ) ;
72261: LD_ADDR_VAR 0 4
72265: PUSH
72266: LD_VAR 0 1
72270: PPUSH
72271: LD_VAR 0 3
72275: PPUSH
72276: CALL_OW 289
72280: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
72281: LD_ADDR_VAR 0 2
72285: PUSH
72286: LD_VAR 0 2
72290: PPUSH
72291: LD_VAR 0 3
72295: PPUSH
72296: LD_VAR 0 4
72300: PPUSH
72301: CALL_OW 1
72305: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
72306: LD_ADDR_VAR 0 2
72310: PUSH
72311: LD_VAR 0 2
72315: PPUSH
72316: LD_INT 4
72318: PPUSH
72319: LD_VAR 0 2
72323: PUSH
72324: LD_INT 4
72326: ARRAY
72327: PUSH
72328: LD_VAR 0 4
72332: PLUS
72333: PPUSH
72334: CALL_OW 1
72338: ST_TO_ADDR
// end ;
72339: GO 72258
72341: POP
72342: POP
// end ;
72343: LD_VAR 0 2
72347: RET
// export function Length ( array ) ; begin
72348: LD_INT 0
72350: PPUSH
// result := array + 0 ;
72351: LD_ADDR_VAR 0 2
72355: PUSH
72356: LD_VAR 0 1
72360: PUSH
72361: LD_INT 0
72363: PLUS
72364: ST_TO_ADDR
// end ;
72365: LD_VAR 0 2
72369: RET
// export function PrepareArray ( array ) ; begin
72370: LD_INT 0
72372: PPUSH
// result := array diff 0 ;
72373: LD_ADDR_VAR 0 2
72377: PUSH
72378: LD_VAR 0 1
72382: PUSH
72383: LD_INT 0
72385: DIFF
72386: ST_TO_ADDR
// if not result [ 1 ] then
72387: LD_VAR 0 2
72391: PUSH
72392: LD_INT 1
72394: ARRAY
72395: NOT
72396: IFFALSE 72416
// result := Delete ( result , 1 ) ;
72398: LD_ADDR_VAR 0 2
72402: PUSH
72403: LD_VAR 0 2
72407: PPUSH
72408: LD_INT 1
72410: PPUSH
72411: CALL_OW 3
72415: ST_TO_ADDR
// end ;
72416: LD_VAR 0 2
72420: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
72421: LD_INT 0
72423: PPUSH
72424: PPUSH
72425: PPUSH
72426: PPUSH
// sibRocketRange := 25 ;
72427: LD_ADDR_VAR 0 6
72431: PUSH
72432: LD_INT 25
72434: ST_TO_ADDR
// result := false ;
72435: LD_ADDR_VAR 0 4
72439: PUSH
72440: LD_INT 0
72442: ST_TO_ADDR
// for i := 0 to 5 do
72443: LD_ADDR_VAR 0 5
72447: PUSH
72448: DOUBLE
72449: LD_INT 0
72451: DEC
72452: ST_TO_ADDR
72453: LD_INT 5
72455: PUSH
72456: FOR_TO
72457: IFFALSE 72524
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
72459: LD_VAR 0 1
72463: PPUSH
72464: LD_VAR 0 5
72468: PPUSH
72469: LD_VAR 0 6
72473: PPUSH
72474: CALL_OW 272
72478: PPUSH
72479: LD_VAR 0 2
72483: PPUSH
72484: LD_VAR 0 5
72488: PPUSH
72489: LD_VAR 0 6
72493: PPUSH
72494: CALL_OW 273
72498: PPUSH
72499: LD_VAR 0 3
72503: PPUSH
72504: CALL_OW 309
72508: IFFALSE 72522
// begin result := true ;
72510: LD_ADDR_VAR 0 4
72514: PUSH
72515: LD_INT 1
72517: ST_TO_ADDR
// exit ;
72518: POP
72519: POP
72520: GO 72526
// end ;
72522: GO 72456
72524: POP
72525: POP
// end ;
72526: LD_VAR 0 4
72530: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
72531: LD_INT 0
72533: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
72534: LD_VAR 0 1
72538: PPUSH
72539: LD_VAR 0 2
72543: PPUSH
72544: LD_INT 0
72546: PPUSH
72547: LD_INT 0
72549: PPUSH
72550: LD_INT 1
72552: PPUSH
72553: LD_INT 0
72555: PPUSH
72556: CALL_OW 587
// end ;
72560: LD_VAR 0 3
72564: RET
// export function CenterOnNow ( unit ) ; begin
72565: LD_INT 0
72567: PPUSH
// result := IsInUnit ( unit ) ;
72568: LD_ADDR_VAR 0 2
72572: PUSH
72573: LD_VAR 0 1
72577: PPUSH
72578: CALL_OW 310
72582: ST_TO_ADDR
// if not result then
72583: LD_VAR 0 2
72587: NOT
72588: IFFALSE 72600
// result := unit ;
72590: LD_ADDR_VAR 0 2
72594: PUSH
72595: LD_VAR 0 1
72599: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
72600: LD_VAR 0 1
72604: PPUSH
72605: CALL_OW 87
// end ;
72609: LD_VAR 0 2
72613: RET
// export function ComMoveHex ( unit , hex ) ; begin
72614: LD_INT 0
72616: PPUSH
// if not hex then
72617: LD_VAR 0 2
72621: NOT
72622: IFFALSE 72626
// exit ;
72624: GO 72679
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
72626: LD_VAR 0 2
72630: PUSH
72631: LD_INT 1
72633: ARRAY
72634: PPUSH
72635: LD_VAR 0 2
72639: PUSH
72640: LD_INT 2
72642: ARRAY
72643: PPUSH
72644: CALL_OW 428
72648: IFFALSE 72652
// exit ;
72650: GO 72679
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
72652: LD_VAR 0 1
72656: PPUSH
72657: LD_VAR 0 2
72661: PUSH
72662: LD_INT 1
72664: ARRAY
72665: PPUSH
72666: LD_VAR 0 2
72670: PUSH
72671: LD_INT 2
72673: ARRAY
72674: PPUSH
72675: CALL_OW 111
// end ;
72679: LD_VAR 0 3
72683: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
72684: LD_INT 0
72686: PPUSH
72687: PPUSH
72688: PPUSH
// if not unit or not enemy then
72689: LD_VAR 0 1
72693: NOT
72694: PUSH
72695: LD_VAR 0 2
72699: NOT
72700: OR
72701: IFFALSE 72705
// exit ;
72703: GO 72829
// x := GetX ( enemy ) ;
72705: LD_ADDR_VAR 0 4
72709: PUSH
72710: LD_VAR 0 2
72714: PPUSH
72715: CALL_OW 250
72719: ST_TO_ADDR
// y := GetY ( enemy ) ;
72720: LD_ADDR_VAR 0 5
72724: PUSH
72725: LD_VAR 0 2
72729: PPUSH
72730: CALL_OW 251
72734: ST_TO_ADDR
// if ValidHex ( x , y ) then
72735: LD_VAR 0 4
72739: PPUSH
72740: LD_VAR 0 5
72744: PPUSH
72745: CALL_OW 488
72749: IFFALSE 72829
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
72751: LD_VAR 0 2
72755: PPUSH
72756: CALL_OW 247
72760: PUSH
72761: LD_INT 3
72763: PUSH
72764: LD_INT 2
72766: PUSH
72767: EMPTY
72768: LIST
72769: LIST
72770: IN
72771: PUSH
72772: LD_VAR 0 1
72776: PPUSH
72777: CALL_OW 255
72781: PPUSH
72782: LD_VAR 0 2
72786: PPUSH
72787: CALL_OW 292
72791: AND
72792: IFFALSE 72810
// ComAttackUnit ( unit , enemy ) else
72794: LD_VAR 0 1
72798: PPUSH
72799: LD_VAR 0 2
72803: PPUSH
72804: CALL_OW 115
72808: GO 72829
// ComAgressiveMove ( unit , x , y ) ;
72810: LD_VAR 0 1
72814: PPUSH
72815: LD_VAR 0 4
72819: PPUSH
72820: LD_VAR 0 5
72824: PPUSH
72825: CALL_OW 114
// end ; end_of_file
72829: LD_VAR 0 3
72833: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
72834: LD_VAR 0 1
72838: PUSH
72839: LD_INT 200
72841: DOUBLE
72842: GREATEREQUAL
72843: IFFALSE 72851
72845: LD_INT 299
72847: DOUBLE
72848: LESSEQUAL
72849: IFTRUE 72853
72851: GO 72885
72853: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
72854: LD_VAR 0 1
72858: PPUSH
72859: LD_VAR 0 2
72863: PPUSH
72864: LD_VAR 0 3
72868: PPUSH
72869: LD_VAR 0 4
72873: PPUSH
72874: LD_VAR 0 5
72878: PPUSH
72879: CALL 27378 0 5
72883: GO 72962
72885: LD_INT 300
72887: DOUBLE
72888: GREATEREQUAL
72889: IFFALSE 72897
72891: LD_INT 399
72893: DOUBLE
72894: LESSEQUAL
72895: IFTRUE 72899
72897: GO 72961
72899: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
72900: LD_VAR 0 1
72904: PPUSH
72905: LD_VAR 0 2
72909: PPUSH
72910: LD_VAR 0 3
72914: PPUSH
72915: LD_VAR 0 4
72919: PPUSH
72920: LD_VAR 0 5
72924: PPUSH
72925: LD_VAR 0 6
72929: PPUSH
72930: LD_VAR 0 7
72934: PPUSH
72935: LD_VAR 0 8
72939: PPUSH
72940: LD_VAR 0 9
72944: PPUSH
72945: LD_VAR 0 10
72949: PPUSH
72950: LD_VAR 0 11
72954: PPUSH
72955: CALL 23703 0 11
72959: GO 72962
72961: POP
// end ;
72962: PPOPN 11
72964: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
72965: LD_VAR 0 1
72969: PPUSH
72970: LD_VAR 0 2
72974: PPUSH
72975: LD_VAR 0 3
72979: PPUSH
72980: LD_VAR 0 4
72984: PPUSH
72985: LD_VAR 0 5
72989: PPUSH
72990: CALL 27114 0 5
// end ; end_of_file
72994: PPOPN 5
72996: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
72997: LD_VAR 0 1
73001: PPUSH
73002: LD_VAR 0 2
73006: PPUSH
73007: LD_VAR 0 3
73011: PPUSH
73012: LD_VAR 0 4
73016: PPUSH
73017: LD_VAR 0 5
73021: PPUSH
73022: LD_VAR 0 6
73026: PPUSH
73027: CALL 11355 0 6
// end ;
73031: PPOPN 6
73033: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
73034: LD_INT 0
73036: PPUSH
// begin if not units then
73037: LD_VAR 0 1
73041: NOT
73042: IFFALSE 73046
// exit ;
73044: GO 73046
// end ;
73046: PPOPN 7
73048: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
73049: CALL 11259 0 0
// end ;
73053: PPOPN 1
73055: END
