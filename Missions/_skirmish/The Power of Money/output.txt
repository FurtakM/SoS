// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// Init ;
  11: CALL 66 0 0
// PrepareAnimals ( 6 , 3 , 4 , apearea ) ;
  15: LD_INT 6
  17: PPUSH
  18: LD_INT 3
  20: PPUSH
  21: LD_INT 4
  23: PPUSH
  24: LD_INT 21
  26: PPUSH
  27: CALL 10689 0 4
// PrepareAmerican ;
  31: CALL 4044 0 0
// PrepareRussian ;
  35: CALL 314 0 0
// Action ;
  39: CALL 8417 0 0
// end ;
  43: END
// every 0 0$01 do
  44: GO 46
  46: DISABLE
// begin enable ;
  47: ENABLE
// display_strings := [ #tick , tick ] ;
  48: LD_ADDR_OWVAR 47
  52: PUSH
  53: LD_STRING #tick
  55: PUSH
  56: LD_OWVAR 1
  60: PUSH
  61: EMPTY
  62: LIST
  63: LIST
  64: ST_TO_ADDR
// end ;
  65: END
// export conv_squad , escort , medal1 , medal2 , medal3 , path , convoy_start , dest_counter ; export riv , ar_attacks , ar_force , us_force , conv_counter , crates_counter , safeCounter ; function Init ; begin
  66: LD_INT 0
  68: PPUSH
// Difficulty := GetMultiplayerSetting ( 0 ) ;
  69: LD_ADDR_OWVAR 67
  73: PUSH
  74: LD_INT 0
  76: PPUSH
  77: CALL_OW 426
  81: ST_TO_ADDR
// medal1 := true ;
  82: LD_ADDR_EXP 3
  86: PUSH
  87: LD_INT 1
  89: ST_TO_ADDR
// medal2 := true ;
  90: LD_ADDR_EXP 4
  94: PUSH
  95: LD_INT 1
  97: ST_TO_ADDR
// medal3 := true ;
  98: LD_ADDR_EXP 5
 102: PUSH
 103: LD_INT 1
 105: ST_TO_ADDR
// path := [ pp1 , pp2 , pp3 , pp4 , conv_end ] ;
 106: LD_ADDR_EXP 6
 110: PUSH
 111: LD_INT 10
 113: PUSH
 114: LD_INT 11
 116: PUSH
 117: LD_INT 12
 119: PUSH
 120: LD_INT 13
 122: PUSH
 123: LD_INT 9
 125: PUSH
 126: EMPTY
 127: LIST
 128: LIST
 129: LIST
 130: LIST
 131: LIST
 132: ST_TO_ADDR
// conv_squad := [ ] ;
 133: LD_ADDR_EXP 1
 137: PUSH
 138: EMPTY
 139: ST_TO_ADDR
// escort := [ ] ;
 140: LD_ADDR_EXP 2
 144: PUSH
 145: EMPTY
 146: ST_TO_ADDR
// riv := [ ] ;
 147: LD_ADDR_EXP 9
 151: PUSH
 152: EMPTY
 153: ST_TO_ADDR
// ar_force := [ ] ;
 154: LD_ADDR_EXP 11
 158: PUSH
 159: EMPTY
 160: ST_TO_ADDR
// ar_attacks := false ;
 161: LD_ADDR_EXP 10
 165: PUSH
 166: LD_INT 0
 168: ST_TO_ADDR
// us_force := [ ] ;
 169: LD_ADDR_EXP 12
 173: PUSH
 174: EMPTY
 175: ST_TO_ADDR
// convoy_start := false ;
 176: LD_ADDR_EXP 7
 180: PUSH
 181: LD_INT 0
 183: ST_TO_ADDR
// conv_counter := 0 ;
 184: LD_ADDR_EXP 13
 188: PUSH
 189: LD_INT 0
 191: ST_TO_ADDR
// dest_counter := 0 ;
 192: LD_ADDR_EXP 8
 196: PUSH
 197: LD_INT 0
 199: ST_TO_ADDR
// crates_counter := 1 1$10 ;
 200: LD_ADDR_EXP 14
 204: PUSH
 205: LD_INT 2450
 207: ST_TO_ADDR
// safeCounter := 0 ;
 208: LD_ADDR_EXP 15
 212: PUSH
 213: LD_INT 0
 215: ST_TO_ADDR
// end ;
 216: LD_VAR 0 1
 220: RET
// every 2 2$00 do
 221: GO 223
 223: DISABLE
// begin while ( tick <= [ 47 47$00 , 44 44$00 , 41 41$00 ] [ Difficulty ] ) do
 224: LD_OWVAR 1
 228: PUSH
 229: LD_INT 98700
 231: PUSH
 232: LD_INT 92400
 234: PUSH
 235: LD_INT 86100
 237: PUSH
 238: EMPTY
 239: LIST
 240: LIST
 241: LIST
 242: PUSH
 243: LD_OWVAR 67
 247: ARRAY
 248: LESSEQUAL
 249: IFFALSE 313
// begin Wait ( crates_counter ) ;
 251: LD_EXP 14
 255: PPUSH
 256: CALL_OW 67
// crates_counter := crates_counter + 0 0$09 ;
 260: LD_ADDR_EXP 14
 264: PUSH
 265: LD_EXP 14
 269: PUSH
 270: LD_INT 315
 272: PLUS
 273: ST_TO_ADDR
// if GetResourceArea ( crates_spawn , mat_cans ) < 30 then
 274: LD_INT 22
 276: PPUSH
 277: LD_INT 1
 279: PPUSH
 280: CALL_OW 287
 284: PUSH
 285: LD_INT 30
 287: LESS
 288: IFFALSE 311
// CreateCratesArea ( Rand ( 1 , 5 ) , crates_spawn , true ) ;
 290: LD_INT 1
 292: PPUSH
 293: LD_INT 5
 295: PPUSH
 296: CALL_OW 12
 300: PPUSH
 301: LD_INT 22
 303: PPUSH
 304: LD_INT 1
 306: PPUSH
 307: CALL_OW 55
// end ;
 311: GO 224
// end ; end_of_file
 313: END
// export Stolypin , Popov , Saseda ; export function PrepareRussian ; var un , force , i , c , skill , team ; begin
 314: LD_INT 0
 316: PPUSH
 317: PPUSH
 318: PPUSH
 319: PPUSH
 320: PPUSH
 321: PPUSH
 322: PPUSH
// uc_side := 6 ;
 323: LD_ADDR_OWVAR 20
 327: PUSH
 328: LD_INT 6
 330: ST_TO_ADDR
// uc_nation := 3 ;
 331: LD_ADDR_OWVAR 21
 335: PUSH
 336: LD_INT 3
 338: ST_TO_ADDR
// ChangeSideFog ( 3 , 6 ) ;
 339: LD_INT 3
 341: PPUSH
 342: LD_INT 6
 344: PPUSH
 345: CALL_OW 343
// Popov := NewCharacter ( Gaydar ) ;
 349: LD_ADDR_EXP 17
 353: PUSH
 354: LD_STRING Gaydar
 356: PPUSH
 357: CALL_OW 25
 361: ST_TO_ADDR
// uc_side := 7 ;
 362: LD_ADDR_OWVAR 20
 366: PUSH
 367: LD_INT 7
 369: ST_TO_ADDR
// hc_gallery := sandal ;
 370: LD_ADDR_OWVAR 33
 374: PUSH
 375: LD_STRING sandal
 377: ST_TO_ADDR
// hc_face_number := 9 ;
 378: LD_ADDR_OWVAR 34
 382: PUSH
 383: LD_INT 9
 385: ST_TO_ADDR
// hc_skills := [ 3 , 5 , 2 , 7 ] ;
 386: LD_ADDR_OWVAR 31
 390: PUSH
 391: LD_INT 3
 393: PUSH
 394: LD_INT 5
 396: PUSH
 397: LD_INT 2
 399: PUSH
 400: LD_INT 7
 402: PUSH
 403: EMPTY
 404: LIST
 405: LIST
 406: LIST
 407: LIST
 408: ST_TO_ADDR
// hc_sex := sex_male ;
 409: LD_ADDR_OWVAR 27
 413: PUSH
 414: LD_INT 1
 416: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
 417: LD_ADDR_OWVAR 29
 421: PUSH
 422: LD_INT 10
 424: PUSH
 425: LD_INT 11
 427: PUSH
 428: EMPTY
 429: LIST
 430: LIST
 431: ST_TO_ADDR
// hc_class := 4 ;
 432: LD_ADDR_OWVAR 28
 436: PUSH
 437: LD_INT 4
 439: ST_TO_ADDR
// hc_name := Fiodor Saseda ;
 440: LD_ADDR_OWVAR 26
 444: PUSH
 445: LD_STRING Fiodor Saseda
 447: ST_TO_ADDR
// Saseda := CreateHuman ;
 448: LD_ADDR_EXP 18
 452: PUSH
 453: CALL_OW 44
 457: ST_TO_ADDR
// uc_side := 3 ;
 458: LD_ADDR_OWVAR 20
 462: PUSH
 463: LD_INT 3
 465: ST_TO_ADDR
// hc_importance := 100 ;
 466: LD_ADDR_OWVAR 32
 470: PUSH
 471: LD_INT 100
 473: ST_TO_ADDR
// hc_class := 1 ;
 474: LD_ADDR_OWVAR 28
 478: PUSH
 479: LD_INT 1
 481: ST_TO_ADDR
// hc_sex := sex_male ;
 482: LD_ADDR_OWVAR 27
 486: PUSH
 487: LD_INT 1
 489: ST_TO_ADDR
// hc_skills := [ 6 , 3 , 4 , 2 ] ;
 490: LD_ADDR_OWVAR 31
 494: PUSH
 495: LD_INT 6
 497: PUSH
 498: LD_INT 3
 500: PUSH
 501: LD_INT 4
 503: PUSH
 504: LD_INT 2
 506: PUSH
 507: EMPTY
 508: LIST
 509: LIST
 510: LIST
 511: LIST
 512: ST_TO_ADDR
// hc_name := W. I. Stolypin ;
 513: LD_ADDR_OWVAR 26
 517: PUSH
 518: LD_STRING W. I. Stolypin
 520: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
 521: LD_ADDR_OWVAR 29
 525: PUSH
 526: LD_INT 10
 528: PUSH
 529: LD_INT 11
 531: PUSH
 532: EMPTY
 533: LIST
 534: LIST
 535: ST_TO_ADDR
// hc_gallery := ru ;
 536: LD_ADDR_OWVAR 33
 540: PUSH
 541: LD_STRING ru
 543: ST_TO_ADDR
// hc_face_number := 15 ;
 544: LD_ADDR_OWVAR 34
 548: PUSH
 549: LD_INT 15
 551: ST_TO_ADDR
// Stolypin := CreateHuman ;
 552: LD_ADDR_EXP 16
 556: PUSH
 557: CALL_OW 44
 561: ST_TO_ADDR
// hc_importance := 0 ;
 562: LD_ADDR_OWVAR 32
 566: PUSH
 567: LD_INT 0
 569: ST_TO_ADDR
// hc_gallery :=  ;
 570: LD_ADDR_OWVAR 33
 574: PUSH
 575: LD_STRING 
 577: ST_TO_ADDR
// hc_name :=  ;
 578: LD_ADDR_OWVAR 26
 582: PUSH
 583: LD_STRING 
 585: ST_TO_ADDR
// skill := [ 6 , 5 , 5 ] [ Difficulty ] ;
 586: LD_ADDR_VAR 0 6
 590: PUSH
 591: LD_INT 6
 593: PUSH
 594: LD_INT 5
 596: PUSH
 597: LD_INT 5
 599: PUSH
 600: EMPTY
 601: LIST
 602: LIST
 603: LIST
 604: PUSH
 605: LD_OWVAR 67
 609: ARRAY
 610: ST_TO_ADDR
// c := 1 ;
 611: LD_ADDR_VAR 0 5
 615: PUSH
 616: LD_INT 1
 618: ST_TO_ADDR
// for i = 1 to 21 do
 619: LD_ADDR_VAR 0 4
 623: PUSH
 624: DOUBLE
 625: LD_INT 1
 627: DEC
 628: ST_TO_ADDR
 629: LD_INT 21
 631: PUSH
 632: FOR_TO
 633: IFFALSE 734
// begin if i = 10 then
 635: LD_VAR 0 4
 639: PUSH
 640: LD_INT 10
 642: EQUAL
 643: IFFALSE 653
// c := 2 ;
 645: LD_ADDR_VAR 0 5
 649: PUSH
 650: LD_INT 2
 652: ST_TO_ADDR
// if i = 14 then
 653: LD_VAR 0 4
 657: PUSH
 658: LD_INT 14
 660: EQUAL
 661: IFFALSE 671
// c := 3 ;
 663: LD_ADDR_VAR 0 5
 667: PUSH
 668: LD_INT 3
 670: ST_TO_ADDR
// if i = 18 then
 671: LD_VAR 0 4
 675: PUSH
 676: LD_INT 18
 678: EQUAL
 679: IFFALSE 689
// c := 4 ;
 681: LD_ADDR_VAR 0 5
 685: PUSH
 686: LD_INT 4
 688: ST_TO_ADDR
// PrepareHuman ( false , c , skill ) ;
 689: LD_INT 0
 691: PPUSH
 692: LD_VAR 0 5
 696: PPUSH
 697: LD_VAR 0 6
 701: PPUSH
 702: CALL_OW 380
// un := CreateHuman ;
 706: LD_ADDR_VAR 0 2
 710: PUSH
 711: CALL_OW 44
 715: ST_TO_ADDR
// force := force ^ un ;
 716: LD_ADDR_VAR 0 3
 720: PUSH
 721: LD_VAR 0 3
 725: PUSH
 726: LD_VAR 0 2
 730: ADD
 731: ST_TO_ADDR
// end ;
 732: GO 632
 734: POP
 735: POP
// team := CharacterSelection ( text , [ 7 , 6 , 6 ] [ Difficulty ] , [ 7 , 6 , 6 ] [ Difficulty ] , [ sel_change_class , Stolypin , sel_changeable , sel_not_hired ] ^ force , [ [ class_soldier , 3 ] , class_mechanic , [ class_engineer , 1 ] , class_scientistic ] ) ;
 736: LD_ADDR_VAR 0 7
 740: PUSH
 741: LD_STRING text
 743: PPUSH
 744: LD_INT 7
 746: PUSH
 747: LD_INT 6
 749: PUSH
 750: LD_INT 6
 752: PUSH
 753: EMPTY
 754: LIST
 755: LIST
 756: LIST
 757: PUSH
 758: LD_OWVAR 67
 762: ARRAY
 763: PPUSH
 764: LD_INT 7
 766: PUSH
 767: LD_INT 6
 769: PUSH
 770: LD_INT 6
 772: PUSH
 773: EMPTY
 774: LIST
 775: LIST
 776: LIST
 777: PUSH
 778: LD_OWVAR 67
 782: ARRAY
 783: PPUSH
 784: LD_INT -5
 786: PUSH
 787: LD_EXP 16
 791: PUSH
 792: LD_INT -3
 794: PUSH
 795: LD_INT -2
 797: PUSH
 798: EMPTY
 799: LIST
 800: LIST
 801: LIST
 802: LIST
 803: PUSH
 804: LD_VAR 0 3
 808: ADD
 809: PPUSH
 810: LD_INT 1
 812: PUSH
 813: LD_INT 3
 815: PUSH
 816: EMPTY
 817: LIST
 818: LIST
 819: PUSH
 820: LD_INT 3
 822: PUSH
 823: LD_INT 2
 825: PUSH
 826: LD_INT 1
 828: PUSH
 829: EMPTY
 830: LIST
 831: LIST
 832: PUSH
 833: LD_INT 4
 835: PUSH
 836: EMPTY
 837: LIST
 838: LIST
 839: LIST
 840: LIST
 841: PPUSH
 842: CALL_OW 42
 846: ST_TO_ADDR
// team := team ^ Stolypin ;
 847: LD_ADDR_VAR 0 7
 851: PUSH
 852: LD_VAR 0 7
 856: PUSH
 857: LD_EXP 16
 861: ADD
 862: ST_TO_ADDR
// for i = 1 to team do
 863: LD_ADDR_VAR 0 4
 867: PUSH
 868: DOUBLE
 869: LD_INT 1
 871: DEC
 872: ST_TO_ADDR
 873: LD_VAR 0 7
 877: PUSH
 878: FOR_TO
 879: IFFALSE 904
// PlaceUnitArea ( team [ i ] , rus_start , false ) ;
 881: LD_VAR 0 7
 885: PUSH
 886: LD_VAR 0 4
 890: ARRAY
 891: PPUSH
 892: LD_INT 1
 894: PPUSH
 895: LD_INT 0
 897: PPUSH
 898: CALL_OW 49
 902: GO 878
 904: POP
 905: POP
// CenterNowOnUnits ( Stolypin ) ;
 906: LD_EXP 16
 910: PPUSH
 911: CALL_OW 87
// end ;
 915: LD_VAR 0 1
 919: RET
// export conv_ready ; export function Convoy ( type ) ; var i , veh , skill ; begin
 920: LD_INT 0
 922: PPUSH
 923: PPUSH
 924: PPUSH
 925: PPUSH
// Randomize ;
 926: CALL_OW 10
// uc_side := 6 ;
 930: LD_ADDR_OWVAR 20
 934: PUSH
 935: LD_INT 6
 937: ST_TO_ADDR
// uc_nation := 3 ;
 938: LD_ADDR_OWVAR 21
 942: PUSH
 943: LD_INT 3
 945: ST_TO_ADDR
// hc_name :=  ;
 946: LD_ADDR_OWVAR 26
 950: PUSH
 951: LD_STRING 
 953: ST_TO_ADDR
// hc_gallery :=  ;
 954: LD_ADDR_OWVAR 33
 958: PUSH
 959: LD_STRING 
 961: ST_TO_ADDR
// skill := [ 5 , 5 , 4 ] [ Difficulty ] ;
 962: LD_ADDR_VAR 0 5
 966: PUSH
 967: LD_INT 5
 969: PUSH
 970: LD_INT 5
 972: PUSH
 973: LD_INT 4
 975: PUSH
 976: EMPTY
 977: LIST
 978: LIST
 979: LIST
 980: PUSH
 981: LD_OWVAR 67
 985: ARRAY
 986: ST_TO_ADDR
// conv_ready := false ;
 987: LD_ADDR_EXP 19
 991: PUSH
 992: LD_INT 0
 994: ST_TO_ADDR
// case type of 1 :
 995: LD_VAR 0 1
 999: PUSH
1000: LD_INT 1
1002: DOUBLE
1003: EQUAL
1004: IFTRUE 1008
1006: GO 1278
1008: POP
// begin if Rand ( 0 , 1 ) = 1 then
1009: LD_INT 0
1011: PPUSH
1012: LD_INT 1
1014: PPUSH
1015: CALL_OW 12
1019: PUSH
1020: LD_INT 1
1022: EQUAL
1023: IFFALSE 1029
// AddEscort ( ) ;
1025: CALL 2911 0 0
// Wait ( 0 0$03 ) ;
1029: LD_INT 105
1031: PPUSH
1032: CALL_OW 67
// vc_chassis := ru_medium_wheeled ;
1036: LD_ADDR_OWVAR 37
1040: PUSH
1041: LD_INT 21
1043: ST_TO_ADDR
// vc_engine := engine_combustion ;
1044: LD_ADDR_OWVAR 39
1048: PUSH
1049: LD_INT 1
1051: ST_TO_ADDR
// vc_control := control_manual ;
1052: LD_ADDR_OWVAR 38
1056: PUSH
1057: LD_INT 1
1059: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
1060: LD_ADDR_OWVAR 40
1064: PUSH
1065: LD_INT 51
1067: ST_TO_ADDR
// vc_fuel_battery := Rand ( 50 , 99 ) ;
1068: LD_ADDR_OWVAR 41
1072: PUSH
1073: LD_INT 50
1075: PPUSH
1076: LD_INT 99
1078: PPUSH
1079: CALL_OW 12
1083: ST_TO_ADDR
// if uc_side <> 6 then
1084: LD_OWVAR 20
1088: PUSH
1089: LD_INT 6
1091: NONEQUAL
1092: IFFALSE 1102
// uc_side := 6 ;
1094: LD_ADDR_OWVAR 20
1098: PUSH
1099: LD_INT 6
1101: ST_TO_ADDR
// veh := CreateVehicle ;
1102: LD_ADDR_VAR 0 4
1106: PUSH
1107: CALL_OW 45
1111: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1112: LD_VAR 0 4
1116: PPUSH
1117: LD_INT 3
1119: PPUSH
1120: CALL_OW 233
// PlaceUnitArea ( veh , conv_start , false ) ;
1124: LD_VAR 0 4
1128: PPUSH
1129: LD_INT 8
1131: PPUSH
1132: LD_INT 0
1134: PPUSH
1135: CALL_OW 49
// PrepareHuman ( false , Rand ( 1 , 2 ) , skill ) ;
1139: LD_INT 0
1141: PPUSH
1142: LD_INT 1
1144: PPUSH
1145: LD_INT 2
1147: PPUSH
1148: CALL_OW 12
1152: PPUSH
1153: LD_VAR 0 5
1157: PPUSH
1158: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
1162: CALL_OW 44
1166: PPUSH
1167: LD_VAR 0 4
1171: PPUSH
1172: CALL_OW 52
// SetLives ( veh , Rand ( 500 , 1000 ) ) ;
1176: LD_VAR 0 4
1180: PPUSH
1181: LD_INT 500
1183: PPUSH
1184: LD_INT 1000
1186: PPUSH
1187: CALL_OW 12
1191: PPUSH
1192: CALL_OW 234
// SetCargo ( veh , Rand ( 1 , 2 ) , Rand ( 2 , 10 ) * 10 ) ;
1196: LD_VAR 0 4
1200: PPUSH
1201: LD_INT 1
1203: PPUSH
1204: LD_INT 2
1206: PPUSH
1207: CALL_OW 12
1211: PPUSH
1212: LD_INT 2
1214: PPUSH
1215: LD_INT 10
1217: PPUSH
1218: CALL_OW 12
1222: PUSH
1223: LD_INT 10
1225: MUL
1226: PPUSH
1227: CALL_OW 290
// conv_squad := Insert ( conv_squad , 1 , [ veh , 1 ] ) ;
1231: LD_ADDR_EXP 1
1235: PUSH
1236: LD_EXP 1
1240: PPUSH
1241: LD_INT 1
1243: PPUSH
1244: LD_VAR 0 4
1248: PUSH
1249: LD_INT 1
1251: PUSH
1252: EMPTY
1253: LIST
1254: LIST
1255: PPUSH
1256: CALL_OW 2
1260: ST_TO_ADDR
// Wait ( 0 0$01 ) ;
1261: LD_INT 35
1263: PPUSH
1264: CALL_OW 67
// conv_ready := true ;
1268: LD_ADDR_EXP 19
1272: PUSH
1273: LD_INT 1
1275: ST_TO_ADDR
// end ; 2 :
1276: GO 2906
1278: LD_INT 2
1280: DOUBLE
1281: EQUAL
1282: IFTRUE 1286
1284: GO 1586
1286: POP
// begin AddEscort ( ) ;
1287: CALL 2911 0 0
// Wait ( 0 0$02 ) ;
1291: LD_INT 70
1293: PPUSH
1294: CALL_OW 67
// for i = 1 to 3 do
1298: LD_ADDR_VAR 0 3
1302: PUSH
1303: DOUBLE
1304: LD_INT 1
1306: DEC
1307: ST_TO_ADDR
1308: LD_INT 3
1310: PUSH
1311: FOR_TO
1312: IFFALSE 1563
// begin vc_chassis := ru_medium_wheeled ;
1314: LD_ADDR_OWVAR 37
1318: PUSH
1319: LD_INT 21
1321: ST_TO_ADDR
// vc_engine := engine_combustion ;
1322: LD_ADDR_OWVAR 39
1326: PUSH
1327: LD_INT 1
1329: ST_TO_ADDR
// vc_control := control_manual ;
1330: LD_ADDR_OWVAR 38
1334: PUSH
1335: LD_INT 1
1337: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
1338: LD_ADDR_OWVAR 40
1342: PUSH
1343: LD_INT 51
1345: ST_TO_ADDR
// vc_fuel_battery := Rand ( 50 , 99 ) ;
1346: LD_ADDR_OWVAR 41
1350: PUSH
1351: LD_INT 50
1353: PPUSH
1354: LD_INT 99
1356: PPUSH
1357: CALL_OW 12
1361: ST_TO_ADDR
// if uc_side <> 6 then
1362: LD_OWVAR 20
1366: PUSH
1367: LD_INT 6
1369: NONEQUAL
1370: IFFALSE 1380
// uc_side := 6 ;
1372: LD_ADDR_OWVAR 20
1376: PUSH
1377: LD_INT 6
1379: ST_TO_ADDR
// veh := CreateVehicle ;
1380: LD_ADDR_VAR 0 4
1384: PUSH
1385: CALL_OW 45
1389: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1390: LD_VAR 0 4
1394: PPUSH
1395: LD_INT 3
1397: PPUSH
1398: CALL_OW 233
// PlaceUnitArea ( veh , conv_start , false ) ;
1402: LD_VAR 0 4
1406: PPUSH
1407: LD_INT 8
1409: PPUSH
1410: LD_INT 0
1412: PPUSH
1413: CALL_OW 49
// PrepareHuman ( false , Rand ( 1 , 2 ) , skill ) ;
1417: LD_INT 0
1419: PPUSH
1420: LD_INT 1
1422: PPUSH
1423: LD_INT 2
1425: PPUSH
1426: CALL_OW 12
1430: PPUSH
1431: LD_VAR 0 5
1435: PPUSH
1436: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
1440: CALL_OW 44
1444: PPUSH
1445: LD_VAR 0 4
1449: PPUSH
1450: CALL_OW 52
// SetLives ( veh , Rand ( 500 , 1000 ) ) ;
1454: LD_VAR 0 4
1458: PPUSH
1459: LD_INT 500
1461: PPUSH
1462: LD_INT 1000
1464: PPUSH
1465: CALL_OW 12
1469: PPUSH
1470: CALL_OW 234
// SetCargo ( veh , Rand ( 1 , 2 ) , Rand ( 2 , 10 ) * 10 ) ;
1474: LD_VAR 0 4
1478: PPUSH
1479: LD_INT 1
1481: PPUSH
1482: LD_INT 2
1484: PPUSH
1485: CALL_OW 12
1489: PPUSH
1490: LD_INT 2
1492: PPUSH
1493: LD_INT 10
1495: PPUSH
1496: CALL_OW 12
1500: PUSH
1501: LD_INT 10
1503: MUL
1504: PPUSH
1505: CALL_OW 290
// conv_squad := Insert ( conv_squad , 1 , [ veh , 1 ] ) ;
1509: LD_ADDR_EXP 1
1513: PUSH
1514: LD_EXP 1
1518: PPUSH
1519: LD_INT 1
1521: PPUSH
1522: LD_VAR 0 4
1526: PUSH
1527: LD_INT 1
1529: PUSH
1530: EMPTY
1531: LIST
1532: LIST
1533: PPUSH
1534: CALL_OW 2
1538: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
1539: LD_VAR 0 4
1543: PPUSH
1544: LD_INT 120
1546: PPUSH
1547: LD_INT 10
1549: PPUSH
1550: CALL_OW 111
// Wait ( 0 0$03 ) ;
1554: LD_INT 105
1556: PPUSH
1557: CALL_OW 67
// end ;
1561: GO 1311
1563: POP
1564: POP
// AddEscort ( ) ;
1565: CALL 2911 0 0
// Wait ( 0 0$02 ) ;
1569: LD_INT 70
1571: PPUSH
1572: CALL_OW 67
// conv_ready := true ;
1576: LD_ADDR_EXP 19
1580: PUSH
1581: LD_INT 1
1583: ST_TO_ADDR
// end ; 3 :
1584: GO 2906
1586: LD_INT 3
1588: DOUBLE
1589: EQUAL
1590: IFTRUE 1594
1592: GO 2021
1594: POP
// begin AddEscort ( ) ;
1595: CALL 2911 0 0
// Wait ( 0 0$02 ) ;
1599: LD_INT 70
1601: PPUSH
1602: CALL_OW 67
// for i = 1 to 3 do
1606: LD_ADDR_VAR 0 3
1610: PUSH
1611: DOUBLE
1612: LD_INT 1
1614: DEC
1615: ST_TO_ADDR
1616: LD_INT 3
1618: PUSH
1619: FOR_TO
1620: IFFALSE 1871
// begin vc_chassis := ru_medium_wheeled ;
1622: LD_ADDR_OWVAR 37
1626: PUSH
1627: LD_INT 21
1629: ST_TO_ADDR
// vc_engine := engine_combustion ;
1630: LD_ADDR_OWVAR 39
1634: PUSH
1635: LD_INT 1
1637: ST_TO_ADDR
// vc_control := control_manual ;
1638: LD_ADDR_OWVAR 38
1642: PUSH
1643: LD_INT 1
1645: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
1646: LD_ADDR_OWVAR 40
1650: PUSH
1651: LD_INT 51
1653: ST_TO_ADDR
// vc_fuel_battery := Rand ( 50 , 99 ) ;
1654: LD_ADDR_OWVAR 41
1658: PUSH
1659: LD_INT 50
1661: PPUSH
1662: LD_INT 99
1664: PPUSH
1665: CALL_OW 12
1669: ST_TO_ADDR
// if uc_side <> 6 then
1670: LD_OWVAR 20
1674: PUSH
1675: LD_INT 6
1677: NONEQUAL
1678: IFFALSE 1688
// uc_side := 6 ;
1680: LD_ADDR_OWVAR 20
1684: PUSH
1685: LD_INT 6
1687: ST_TO_ADDR
// veh := CreateVehicle ;
1688: LD_ADDR_VAR 0 4
1692: PUSH
1693: CALL_OW 45
1697: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1698: LD_VAR 0 4
1702: PPUSH
1703: LD_INT 3
1705: PPUSH
1706: CALL_OW 233
// PlaceUnitArea ( veh , conv_start , false ) ;
1710: LD_VAR 0 4
1714: PPUSH
1715: LD_INT 8
1717: PPUSH
1718: LD_INT 0
1720: PPUSH
1721: CALL_OW 49
// PrepareHuman ( false , Rand ( 1 , 2 ) , skill ) ;
1725: LD_INT 0
1727: PPUSH
1728: LD_INT 1
1730: PPUSH
1731: LD_INT 2
1733: PPUSH
1734: CALL_OW 12
1738: PPUSH
1739: LD_VAR 0 5
1743: PPUSH
1744: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
1748: CALL_OW 44
1752: PPUSH
1753: LD_VAR 0 4
1757: PPUSH
1758: CALL_OW 52
// SetLives ( veh , Rand ( 500 , 1000 ) ) ;
1762: LD_VAR 0 4
1766: PPUSH
1767: LD_INT 500
1769: PPUSH
1770: LD_INT 1000
1772: PPUSH
1773: CALL_OW 12
1777: PPUSH
1778: CALL_OW 234
// SetCargo ( veh , Rand ( 1 , 2 ) , Rand ( 2 , 10 ) * 10 ) ;
1782: LD_VAR 0 4
1786: PPUSH
1787: LD_INT 1
1789: PPUSH
1790: LD_INT 2
1792: PPUSH
1793: CALL_OW 12
1797: PPUSH
1798: LD_INT 2
1800: PPUSH
1801: LD_INT 10
1803: PPUSH
1804: CALL_OW 12
1808: PUSH
1809: LD_INT 10
1811: MUL
1812: PPUSH
1813: CALL_OW 290
// conv_squad := Insert ( conv_squad , 1 , [ veh , 1 ] ) ;
1817: LD_ADDR_EXP 1
1821: PUSH
1822: LD_EXP 1
1826: PPUSH
1827: LD_INT 1
1829: PPUSH
1830: LD_VAR 0 4
1834: PUSH
1835: LD_INT 1
1837: PUSH
1838: EMPTY
1839: LIST
1840: LIST
1841: PPUSH
1842: CALL_OW 2
1846: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
1847: LD_VAR 0 4
1851: PPUSH
1852: LD_INT 120
1854: PPUSH
1855: LD_INT 10
1857: PPUSH
1858: CALL_OW 111
// Wait ( 0 0$03 ) ;
1862: LD_INT 105
1864: PPUSH
1865: CALL_OW 67
// end ;
1869: GO 1619
1871: POP
1872: POP
// for i = 1 to rand ( 2 , 4 ) do
1873: LD_ADDR_VAR 0 3
1877: PUSH
1878: DOUBLE
1879: LD_INT 1
1881: DEC
1882: ST_TO_ADDR
1883: LD_INT 2
1885: PPUSH
1886: LD_INT 4
1888: PPUSH
1889: CALL_OW 12
1893: PUSH
1894: FOR_TO
1895: IFFALSE 2002
// begin PrepareHuman ( false , 1 , skill ) ;
1897: LD_INT 0
1899: PPUSH
1900: LD_INT 1
1902: PPUSH
1903: LD_VAR 0 5
1907: PPUSH
1908: CALL_OW 380
// if uc_side <> 6 then
1912: LD_OWVAR 20
1916: PUSH
1917: LD_INT 6
1919: NONEQUAL
1920: IFFALSE 1930
// uc_side := 6 ;
1922: LD_ADDR_OWVAR 20
1926: PUSH
1927: LD_INT 6
1929: ST_TO_ADDR
// veh := CreateHuman ;
1930: LD_ADDR_VAR 0 4
1934: PUSH
1935: CALL_OW 44
1939: ST_TO_ADDR
// PlaceUnitArea ( veh , conv_start , false ) ;
1940: LD_VAR 0 4
1944: PPUSH
1945: LD_INT 8
1947: PPUSH
1948: LD_INT 0
1950: PPUSH
1951: CALL_OW 49
// escort := Insert ( escort , 1 , veh ) ;
1955: LD_ADDR_EXP 2
1959: PUSH
1960: LD_EXP 2
1964: PPUSH
1965: LD_INT 1
1967: PPUSH
1968: LD_VAR 0 4
1972: PPUSH
1973: CALL_OW 2
1977: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
1978: LD_VAR 0 4
1982: PPUSH
1983: LD_INT 120
1985: PPUSH
1986: LD_INT 10
1988: PPUSH
1989: CALL_OW 111
// Wait ( 0 0$02 ) ;
1993: LD_INT 70
1995: PPUSH
1996: CALL_OW 67
// end ;
2000: GO 1894
2002: POP
2003: POP
// Wait ( 0 0$02 ) ;
2004: LD_INT 70
2006: PPUSH
2007: CALL_OW 67
// conv_ready := true ;
2011: LD_ADDR_EXP 19
2015: PUSH
2016: LD_INT 1
2018: ST_TO_ADDR
// end ; 4 :
2019: GO 2906
2021: LD_INT 4
2023: DOUBLE
2024: EQUAL
2025: IFTRUE 2029
2027: GO 2335
2029: POP
// begin if Rand ( 0 , 1 ) = 1 then
2030: LD_INT 0
2032: PPUSH
2033: LD_INT 1
2035: PPUSH
2036: CALL_OW 12
2040: PUSH
2041: LD_INT 1
2043: EQUAL
2044: IFFALSE 2050
// AddEscort ( ) ;
2046: CALL 2911 0 0
// Wait ( 0 0$02 ) ;
2050: LD_INT 70
2052: PPUSH
2053: CALL_OW 67
// for i = 1 to 5 do
2057: LD_ADDR_VAR 0 3
2061: PUSH
2062: DOUBLE
2063: LD_INT 1
2065: DEC
2066: ST_TO_ADDR
2067: LD_INT 5
2069: PUSH
2070: FOR_TO
2071: IFFALSE 2193
// begin PrepareHuman ( false , Rand ( 2 , 4 ) , skill ) ;
2073: LD_INT 0
2075: PPUSH
2076: LD_INT 2
2078: PPUSH
2079: LD_INT 4
2081: PPUSH
2082: CALL_OW 12
2086: PPUSH
2087: LD_VAR 0 5
2091: PPUSH
2092: CALL_OW 380
// if uc_side <> 6 then
2096: LD_OWVAR 20
2100: PUSH
2101: LD_INT 6
2103: NONEQUAL
2104: IFFALSE 2114
// uc_side := 6 ;
2106: LD_ADDR_OWVAR 20
2110: PUSH
2111: LD_INT 6
2113: ST_TO_ADDR
// veh := CreateHuman ;
2114: LD_ADDR_VAR 0 4
2118: PUSH
2119: CALL_OW 44
2123: ST_TO_ADDR
// PlaceUnitArea ( veh , conv_start , false ) ;
2124: LD_VAR 0 4
2128: PPUSH
2129: LD_INT 8
2131: PPUSH
2132: LD_INT 0
2134: PPUSH
2135: CALL_OW 49
// conv_squad := Insert ( conv_squad , 1 , [ veh , 1 ] ) ;
2139: LD_ADDR_EXP 1
2143: PUSH
2144: LD_EXP 1
2148: PPUSH
2149: LD_INT 1
2151: PPUSH
2152: LD_VAR 0 4
2156: PUSH
2157: LD_INT 1
2159: PUSH
2160: EMPTY
2161: LIST
2162: LIST
2163: PPUSH
2164: CALL_OW 2
2168: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
2169: LD_VAR 0 4
2173: PPUSH
2174: LD_INT 120
2176: PPUSH
2177: LD_INT 10
2179: PPUSH
2180: CALL_OW 111
// Wait ( 0 0$02 ) ;
2184: LD_INT 70
2186: PPUSH
2187: CALL_OW 67
// end ;
2191: GO 2070
2193: POP
2194: POP
// for i = 1 to 2 do
2195: LD_ADDR_VAR 0 3
2199: PUSH
2200: DOUBLE
2201: LD_INT 1
2203: DEC
2204: ST_TO_ADDR
2205: LD_INT 2
2207: PUSH
2208: FOR_TO
2209: IFFALSE 2316
// begin PrepareHuman ( false , 1 , skill ) ;
2211: LD_INT 0
2213: PPUSH
2214: LD_INT 1
2216: PPUSH
2217: LD_VAR 0 5
2221: PPUSH
2222: CALL_OW 380
// if uc_side <> 6 then
2226: LD_OWVAR 20
2230: PUSH
2231: LD_INT 6
2233: NONEQUAL
2234: IFFALSE 2244
// uc_side := 6 ;
2236: LD_ADDR_OWVAR 20
2240: PUSH
2241: LD_INT 6
2243: ST_TO_ADDR
// veh := CreateHuman ;
2244: LD_ADDR_VAR 0 4
2248: PUSH
2249: CALL_OW 44
2253: ST_TO_ADDR
// PlaceUnitArea ( veh , conv_start , false ) ;
2254: LD_VAR 0 4
2258: PPUSH
2259: LD_INT 8
2261: PPUSH
2262: LD_INT 0
2264: PPUSH
2265: CALL_OW 49
// escort := Insert ( escort , 1 , veh ) ;
2269: LD_ADDR_EXP 2
2273: PUSH
2274: LD_EXP 2
2278: PPUSH
2279: LD_INT 1
2281: PPUSH
2282: LD_VAR 0 4
2286: PPUSH
2287: CALL_OW 2
2291: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
2292: LD_VAR 0 4
2296: PPUSH
2297: LD_INT 120
2299: PPUSH
2300: LD_INT 10
2302: PPUSH
2303: CALL_OW 111
// Wait ( 0 0$02 ) ;
2307: LD_INT 70
2309: PPUSH
2310: CALL_OW 67
// end ;
2314: GO 2208
2316: POP
2317: POP
// Wait ( 0 0$02 ) ;
2318: LD_INT 70
2320: PPUSH
2321: CALL_OW 67
// conv_ready := true ;
2325: LD_ADDR_EXP 19
2329: PUSH
2330: LD_INT 1
2332: ST_TO_ADDR
// end ; 5 :
2333: GO 2906
2335: LD_INT 5
2337: DOUBLE
2338: EQUAL
2339: IFTRUE 2343
2341: GO 2905
2343: POP
// begin AddEscort ( ) ;
2344: CALL 2911 0 0
// Wait ( 0 0$02 ) ;
2348: LD_INT 70
2350: PPUSH
2351: CALL_OW 67
// AddEscort ( ) ;
2355: CALL 2911 0 0
// Wait ( 0 0$02 ) ;
2359: LD_INT 70
2361: PPUSH
2362: CALL_OW 67
// for i = 1 to 3 do
2366: LD_ADDR_VAR 0 3
2370: PUSH
2371: DOUBLE
2372: LD_INT 1
2374: DEC
2375: ST_TO_ADDR
2376: LD_INT 3
2378: PUSH
2379: FOR_TO
2380: IFFALSE 2631
// begin vc_chassis := ru_medium_wheeled ;
2382: LD_ADDR_OWVAR 37
2386: PUSH
2387: LD_INT 21
2389: ST_TO_ADDR
// vc_engine := engine_combustion ;
2390: LD_ADDR_OWVAR 39
2394: PUSH
2395: LD_INT 1
2397: ST_TO_ADDR
// vc_control := control_manual ;
2398: LD_ADDR_OWVAR 38
2402: PUSH
2403: LD_INT 1
2405: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
2406: LD_ADDR_OWVAR 40
2410: PUSH
2411: LD_INT 51
2413: ST_TO_ADDR
// vc_fuel_battery := Rand ( 50 , 99 ) ;
2414: LD_ADDR_OWVAR 41
2418: PUSH
2419: LD_INT 50
2421: PPUSH
2422: LD_INT 99
2424: PPUSH
2425: CALL_OW 12
2429: ST_TO_ADDR
// if uc_side <> 6 then
2430: LD_OWVAR 20
2434: PUSH
2435: LD_INT 6
2437: NONEQUAL
2438: IFFALSE 2448
// uc_side := 6 ;
2440: LD_ADDR_OWVAR 20
2444: PUSH
2445: LD_INT 6
2447: ST_TO_ADDR
// veh := CreateVehicle ;
2448: LD_ADDR_VAR 0 4
2452: PUSH
2453: CALL_OW 45
2457: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
2458: LD_VAR 0 4
2462: PPUSH
2463: LD_INT 3
2465: PPUSH
2466: CALL_OW 233
// PlaceUnitArea ( veh , conv_start , false ) ;
2470: LD_VAR 0 4
2474: PPUSH
2475: LD_INT 8
2477: PPUSH
2478: LD_INT 0
2480: PPUSH
2481: CALL_OW 49
// PrepareHuman ( false , Rand ( 1 , 2 ) , skill ) ;
2485: LD_INT 0
2487: PPUSH
2488: LD_INT 1
2490: PPUSH
2491: LD_INT 2
2493: PPUSH
2494: CALL_OW 12
2498: PPUSH
2499: LD_VAR 0 5
2503: PPUSH
2504: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
2508: CALL_OW 44
2512: PPUSH
2513: LD_VAR 0 4
2517: PPUSH
2518: CALL_OW 52
// SetLives ( veh , Rand ( 500 , 1000 ) ) ;
2522: LD_VAR 0 4
2526: PPUSH
2527: LD_INT 500
2529: PPUSH
2530: LD_INT 1000
2532: PPUSH
2533: CALL_OW 12
2537: PPUSH
2538: CALL_OW 234
// SetCargo ( veh , Rand ( 1 , 2 ) , Rand ( 2 , 10 ) * 10 ) ;
2542: LD_VAR 0 4
2546: PPUSH
2547: LD_INT 1
2549: PPUSH
2550: LD_INT 2
2552: PPUSH
2553: CALL_OW 12
2557: PPUSH
2558: LD_INT 2
2560: PPUSH
2561: LD_INT 10
2563: PPUSH
2564: CALL_OW 12
2568: PUSH
2569: LD_INT 10
2571: MUL
2572: PPUSH
2573: CALL_OW 290
// conv_squad := Insert ( conv_squad , 1 , [ veh , 1 ] ) ;
2577: LD_ADDR_EXP 1
2581: PUSH
2582: LD_EXP 1
2586: PPUSH
2587: LD_INT 1
2589: PPUSH
2590: LD_VAR 0 4
2594: PUSH
2595: LD_INT 1
2597: PUSH
2598: EMPTY
2599: LIST
2600: LIST
2601: PPUSH
2602: CALL_OW 2
2606: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
2607: LD_VAR 0 4
2611: PPUSH
2612: LD_INT 120
2614: PPUSH
2615: LD_INT 10
2617: PPUSH
2618: CALL_OW 111
// Wait ( 0 0$02 ) ;
2622: LD_INT 70
2624: PPUSH
2625: CALL_OW 67
// end ;
2629: GO 2379
2631: POP
2632: POP
// if Rand ( 0 , 1 ) = 1 then
2633: LD_INT 0
2635: PPUSH
2636: LD_INT 1
2638: PPUSH
2639: CALL_OW 12
2643: PUSH
2644: LD_INT 1
2646: EQUAL
2647: IFFALSE 2683
// begin vc_chassis := ru_medium_tracked ;
2649: LD_ADDR_OWVAR 37
2653: PUSH
2654: LD_INT 22
2656: ST_TO_ADDR
// vc_engine := engine_combustion ;
2657: LD_ADDR_OWVAR 39
2661: PUSH
2662: LD_INT 1
2664: ST_TO_ADDR
// vc_control := control_manual ;
2665: LD_ADDR_OWVAR 38
2669: PUSH
2670: LD_INT 1
2672: ST_TO_ADDR
// vc_weapon := ru_crane ;
2673: LD_ADDR_OWVAR 40
2677: PUSH
2678: LD_INT 52
2680: ST_TO_ADDR
// end else
2681: GO 2715
// begin vc_chassis := ru_heavy_wheeled ;
2683: LD_ADDR_OWVAR 37
2687: PUSH
2688: LD_INT 23
2690: ST_TO_ADDR
// vc_engine := engine_combustion ;
2691: LD_ADDR_OWVAR 39
2695: PUSH
2696: LD_INT 1
2698: ST_TO_ADDR
// vc_control := control_manual ;
2699: LD_ADDR_OWVAR 38
2703: PUSH
2704: LD_INT 1
2706: ST_TO_ADDR
// vc_weapon := ru_bulldozer ;
2707: LD_ADDR_OWVAR 40
2711: PUSH
2712: LD_INT 53
2714: ST_TO_ADDR
// end ; vc_fuel_battery := Rand ( 50 , 99 ) ;
2715: LD_ADDR_OWVAR 41
2719: PUSH
2720: LD_INT 50
2722: PPUSH
2723: LD_INT 99
2725: PPUSH
2726: CALL_OW 12
2730: ST_TO_ADDR
// if uc_side <> 6 then
2731: LD_OWVAR 20
2735: PUSH
2736: LD_INT 6
2738: NONEQUAL
2739: IFFALSE 2749
// uc_side := 6 ;
2741: LD_ADDR_OWVAR 20
2745: PUSH
2746: LD_INT 6
2748: ST_TO_ADDR
// veh := CreateVehicle ;
2749: LD_ADDR_VAR 0 4
2753: PUSH
2754: CALL_OW 45
2758: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
2759: LD_VAR 0 4
2763: PPUSH
2764: LD_INT 3
2766: PPUSH
2767: CALL_OW 233
// PlaceUnitArea ( veh , conv_start , false ) ;
2771: LD_VAR 0 4
2775: PPUSH
2776: LD_INT 8
2778: PPUSH
2779: LD_INT 0
2781: PPUSH
2782: CALL_OW 49
// PrepareHuman ( false , Rand ( 1 , 2 ) , skill ) ;
2786: LD_INT 0
2788: PPUSH
2789: LD_INT 1
2791: PPUSH
2792: LD_INT 2
2794: PPUSH
2795: CALL_OW 12
2799: PPUSH
2800: LD_VAR 0 5
2804: PPUSH
2805: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
2809: CALL_OW 44
2813: PPUSH
2814: LD_VAR 0 4
2818: PPUSH
2819: CALL_OW 52
// SetLives ( veh , Rand ( 500 , 1000 ) ) ;
2823: LD_VAR 0 4
2827: PPUSH
2828: LD_INT 500
2830: PPUSH
2831: LD_INT 1000
2833: PPUSH
2834: CALL_OW 12
2838: PPUSH
2839: CALL_OW 234
// conv_squad := Insert ( conv_squad , 1 , [ veh , 1 ] ) ;
2843: LD_ADDR_EXP 1
2847: PUSH
2848: LD_EXP 1
2852: PPUSH
2853: LD_INT 1
2855: PPUSH
2856: LD_VAR 0 4
2860: PUSH
2861: LD_INT 1
2863: PUSH
2864: EMPTY
2865: LIST
2866: LIST
2867: PPUSH
2868: CALL_OW 2
2872: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
2873: LD_VAR 0 4
2877: PPUSH
2878: LD_INT 120
2880: PPUSH
2881: LD_INT 10
2883: PPUSH
2884: CALL_OW 111
// Wait ( 0 0$02 ) ;
2888: LD_INT 70
2890: PPUSH
2891: CALL_OW 67
// conv_ready := true ;
2895: LD_ADDR_EXP 19
2899: PUSH
2900: LD_INT 1
2902: ST_TO_ADDR
// end ; end ;
2903: GO 2906
2905: POP
// end ;
2906: LD_VAR 0 2
2910: RET
// export function AddEscort ( ) ; var veh , skill ; begin
2911: LD_INT 0
2913: PPUSH
2914: PPUSH
2915: PPUSH
// skill := [ 5 , 5 , 4 ] [ Difficulty ] ;
2916: LD_ADDR_VAR 0 3
2920: PUSH
2921: LD_INT 5
2923: PUSH
2924: LD_INT 5
2926: PUSH
2927: LD_INT 4
2929: PUSH
2930: EMPTY
2931: LIST
2932: LIST
2933: LIST
2934: PUSH
2935: LD_OWVAR 67
2939: ARRAY
2940: ST_TO_ADDR
// uc_side := 6 ;
2941: LD_ADDR_OWVAR 20
2945: PUSH
2946: LD_INT 6
2948: ST_TO_ADDR
// uc_nation := 3 ;
2949: LD_ADDR_OWVAR 21
2953: PUSH
2954: LD_INT 3
2956: ST_TO_ADDR
// vc_chassis := ru_medium_wheeled ;
2957: LD_ADDR_OWVAR 37
2961: PUSH
2962: LD_INT 21
2964: ST_TO_ADDR
// vc_engine := engine_combustion ;
2965: LD_ADDR_OWVAR 39
2969: PUSH
2970: LD_INT 1
2972: ST_TO_ADDR
// vc_control := control_manual ;
2973: LD_ADDR_OWVAR 38
2977: PUSH
2978: LD_INT 1
2980: ST_TO_ADDR
// vc_weapon := [ ru_gun , ru_heavy_machine_gun ] [ Rand ( 1 , 2 ) ] ;
2981: LD_ADDR_OWVAR 40
2985: PUSH
2986: LD_INT 44
2988: PUSH
2989: LD_INT 42
2991: PUSH
2992: EMPTY
2993: LIST
2994: LIST
2995: PUSH
2996: LD_INT 1
2998: PPUSH
2999: LD_INT 2
3001: PPUSH
3002: CALL_OW 12
3006: ARRAY
3007: ST_TO_ADDR
// vc_fuel_battery := Rand ( 50 , 99 ) ;
3008: LD_ADDR_OWVAR 41
3012: PUSH
3013: LD_INT 50
3015: PPUSH
3016: LD_INT 99
3018: PPUSH
3019: CALL_OW 12
3023: ST_TO_ADDR
// veh := CreateVehicle ;
3024: LD_ADDR_VAR 0 2
3028: PUSH
3029: CALL_OW 45
3033: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3034: LD_VAR 0 2
3038: PPUSH
3039: LD_INT 3
3041: PPUSH
3042: CALL_OW 233
// PlaceUnitArea ( veh , conv_start , false ) ;
3046: LD_VAR 0 2
3050: PPUSH
3051: LD_INT 8
3053: PPUSH
3054: LD_INT 0
3056: PPUSH
3057: CALL_OW 49
// PrepareHuman ( false , 3 , skill ) ;
3061: LD_INT 0
3063: PPUSH
3064: LD_INT 3
3066: PPUSH
3067: LD_VAR 0 3
3071: PPUSH
3072: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
3076: CALL_OW 44
3080: PPUSH
3081: LD_VAR 0 2
3085: PPUSH
3086: CALL_OW 52
// SetLives ( veh , Rand ( 500 , 1000 ) ) ;
3090: LD_VAR 0 2
3094: PPUSH
3095: LD_INT 500
3097: PPUSH
3098: LD_INT 1000
3100: PPUSH
3101: CALL_OW 12
3105: PPUSH
3106: CALL_OW 234
// escort := Insert ( escort , 1 , veh ) ;
3110: LD_ADDR_EXP 2
3114: PUSH
3115: LD_EXP 2
3119: PPUSH
3120: LD_INT 1
3122: PPUSH
3123: LD_VAR 0 2
3127: PPUSH
3128: CALL_OW 2
3132: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
3133: LD_VAR 0 2
3137: PPUSH
3138: LD_INT 120
3140: PPUSH
3141: LD_INT 10
3143: PPUSH
3144: CALL_OW 111
// end ;
3148: LD_VAR 0 1
3152: RET
// every 4 trigger conv_ready and FilterAllUnits ( [ f_side , 6 ] ) do var i , j ;
3153: LD_EXP 19
3157: PUSH
3158: LD_INT 22
3160: PUSH
3161: LD_INT 6
3163: PUSH
3164: EMPTY
3165: LIST
3166: LIST
3167: PPUSH
3168: CALL_OW 69
3172: AND
3173: IFFALSE 3948
3175: GO 3177
3177: DISABLE
3178: LD_INT 0
3180: PPUSH
3181: PPUSH
// begin enable ;
3182: ENABLE
// if conv_squad then
3183: LD_EXP 1
3187: IFFALSE 3458
// for i = conv_squad downto 1 do
3189: LD_ADDR_VAR 0 1
3193: PUSH
3194: DOUBLE
3195: LD_EXP 1
3199: INC
3200: ST_TO_ADDR
3201: LD_INT 1
3203: PUSH
3204: FOR_DOWNTO
3205: IFFALSE 3456
// begin if IsInArea ( conv_squad [ i ] [ 1 ] , conv_end ) then
3207: LD_EXP 1
3211: PUSH
3212: LD_VAR 0 1
3216: ARRAY
3217: PUSH
3218: LD_INT 1
3220: ARRAY
3221: PPUSH
3222: LD_INT 9
3224: PPUSH
3225: CALL_OW 308
3229: IFFALSE 3306
// begin for j in FilterUnitsInArea ( conv_end , [ f_side , 6 ] ) do
3231: LD_ADDR_VAR 0 2
3235: PUSH
3236: LD_INT 9
3238: PPUSH
3239: LD_INT 22
3241: PUSH
3242: LD_INT 6
3244: PUSH
3245: EMPTY
3246: LIST
3247: LIST
3248: PPUSH
3249: CALL_OW 70
3253: PUSH
3254: FOR_IN
3255: IFFALSE 3282
// begin safeCounter := safeCounter + 1 ;
3257: LD_ADDR_EXP 15
3261: PUSH
3262: LD_EXP 15
3266: PUSH
3267: LD_INT 1
3269: PLUS
3270: ST_TO_ADDR
// RemoveUnit ( j ) ;
3271: LD_VAR 0 2
3275: PPUSH
3276: CALL_OW 64
// end ;
3280: GO 3254
3282: POP
3283: POP
// conv_squad := Delete ( conv_squad , i ) ;
3284: LD_ADDR_EXP 1
3288: PUSH
3289: LD_EXP 1
3293: PPUSH
3294: LD_VAR 0 1
3298: PPUSH
3299: CALL_OW 3
3303: ST_TO_ADDR
// break ;
3304: GO 3456
// end ; if IsInArea ( conv_squad [ i ] [ 1 ] , path [ conv_squad [ i ] [ 2 ] ] ) then
3306: LD_EXP 1
3310: PUSH
3311: LD_VAR 0 1
3315: ARRAY
3316: PUSH
3317: LD_INT 1
3319: ARRAY
3320: PPUSH
3321: LD_EXP 6
3325: PUSH
3326: LD_EXP 1
3330: PUSH
3331: LD_VAR 0 1
3335: ARRAY
3336: PUSH
3337: LD_INT 2
3339: ARRAY
3340: ARRAY
3341: PPUSH
3342: CALL_OW 308
3346: IFFALSE 3392
// conv_squad := Replace2 ( conv_squad , i , 2 , conv_squad [ i ] [ 2 ] + 1 ) else
3348: LD_ADDR_EXP 1
3352: PUSH
3353: LD_EXP 1
3357: PPUSH
3358: LD_VAR 0 1
3362: PPUSH
3363: LD_INT 2
3365: PPUSH
3366: LD_EXP 1
3370: PUSH
3371: LD_VAR 0 1
3375: ARRAY
3376: PUSH
3377: LD_INT 2
3379: ARRAY
3380: PUSH
3381: LD_INT 1
3383: PLUS
3384: PPUSH
3385: CALL 10308 0 4
3389: ST_TO_ADDR
3390: GO 3454
// if not HasTask ( conv_squad [ i ] [ 1 ] ) then
3392: LD_EXP 1
3396: PUSH
3397: LD_VAR 0 1
3401: ARRAY
3402: PUSH
3403: LD_INT 1
3405: ARRAY
3406: PPUSH
3407: CALL_OW 314
3411: NOT
3412: IFFALSE 3454
// ComMoveToArea ( conv_squad [ i ] [ 1 ] , path [ conv_squad [ i ] [ 2 ] ] ) ;
3414: LD_EXP 1
3418: PUSH
3419: LD_VAR 0 1
3423: ARRAY
3424: PUSH
3425: LD_INT 1
3427: ARRAY
3428: PPUSH
3429: LD_EXP 6
3433: PUSH
3434: LD_EXP 1
3438: PUSH
3439: LD_VAR 0 1
3443: ARRAY
3444: PUSH
3445: LD_INT 2
3447: ARRAY
3448: ARRAY
3449: PPUSH
3450: CALL_OW 113
// end ;
3454: GO 3204
3456: POP
3457: POP
// if escort then
3458: LD_EXP 2
3462: IFFALSE 3801
// for i = escort downto 1 do
3464: LD_ADDR_VAR 0 1
3468: PUSH
3469: DOUBLE
3470: LD_EXP 2
3474: INC
3475: ST_TO_ADDR
3476: LD_INT 1
3478: PUSH
3479: FOR_DOWNTO
3480: IFFALSE 3799
// begin if IsInArea ( escort [ i ] , conv_end ) then
3482: LD_EXP 2
3486: PUSH
3487: LD_VAR 0 1
3491: ARRAY
3492: PPUSH
3493: LD_INT 9
3495: PPUSH
3496: CALL_OW 308
3500: IFFALSE 3577
// begin for j in FilterUnitsInArea ( conv_end , [ f_side , 6 ] ) do
3502: LD_ADDR_VAR 0 2
3506: PUSH
3507: LD_INT 9
3509: PPUSH
3510: LD_INT 22
3512: PUSH
3513: LD_INT 6
3515: PUSH
3516: EMPTY
3517: LIST
3518: LIST
3519: PPUSH
3520: CALL_OW 70
3524: PUSH
3525: FOR_IN
3526: IFFALSE 3553
// begin safeCounter := safeCounter + 1 ;
3528: LD_ADDR_EXP 15
3532: PUSH
3533: LD_EXP 15
3537: PUSH
3538: LD_INT 1
3540: PLUS
3541: ST_TO_ADDR
// RemoveUnit ( j ) ;
3542: LD_VAR 0 2
3546: PPUSH
3547: CALL_OW 64
// end ;
3551: GO 3525
3553: POP
3554: POP
// escort := Delete ( escort , i ) ;
3555: LD_ADDR_EXP 2
3559: PUSH
3560: LD_EXP 2
3564: PPUSH
3565: LD_VAR 0 1
3569: PPUSH
3570: CALL_OW 3
3574: ST_TO_ADDR
// break ;
3575: GO 3799
// end ; if FindTarget ( escort [ i ] ) and GetDistUnits ( escort [ i ] , FindTarget ( escort [ i ] ) ) < 13 then
3577: LD_EXP 2
3581: PUSH
3582: LD_VAR 0 1
3586: ARRAY
3587: PPUSH
3588: CALL 10565 0 1
3592: PUSH
3593: LD_EXP 2
3597: PUSH
3598: LD_VAR 0 1
3602: ARRAY
3603: PPUSH
3604: LD_EXP 2
3608: PUSH
3609: LD_VAR 0 1
3613: ARRAY
3614: PPUSH
3615: CALL 10565 0 1
3619: PPUSH
3620: CALL_OW 296
3624: PUSH
3625: LD_INT 13
3627: LESS
3628: AND
3629: IFFALSE 3664
// ComAttackUnit ( escort [ i ] , FindTarget ( escort [ i ] ) ) else
3631: LD_EXP 2
3635: PUSH
3636: LD_VAR 0 1
3640: ARRAY
3641: PPUSH
3642: LD_EXP 2
3646: PUSH
3647: LD_VAR 0 1
3651: ARRAY
3652: PPUSH
3653: CALL 10565 0 1
3657: PPUSH
3658: CALL_OW 115
3662: GO 3797
// if conv_squad and GetDistUnitXY ( escort [ i ] , 64 , 117 ) > 35 and not HasTask ( escort [ i ] ) then
3664: LD_EXP 1
3668: PUSH
3669: LD_EXP 2
3673: PUSH
3674: LD_VAR 0 1
3678: ARRAY
3679: PPUSH
3680: LD_INT 64
3682: PPUSH
3683: LD_INT 117
3685: PPUSH
3686: CALL_OW 297
3690: PUSH
3691: LD_INT 35
3693: GREATER
3694: AND
3695: PUSH
3696: LD_EXP 2
3700: PUSH
3701: LD_VAR 0 1
3705: ARRAY
3706: PPUSH
3707: CALL_OW 314
3711: NOT
3712: AND
3713: IFFALSE 3779
// begin if GetDistUnits ( escort [ i ] , conv_squad [ 1 ] [ 1 ] ) > 6 then
3715: LD_EXP 2
3719: PUSH
3720: LD_VAR 0 1
3724: ARRAY
3725: PPUSH
3726: LD_EXP 1
3730: PUSH
3731: LD_INT 1
3733: ARRAY
3734: PUSH
3735: LD_INT 1
3737: ARRAY
3738: PPUSH
3739: CALL_OW 296
3743: PUSH
3744: LD_INT 6
3746: GREATER
3747: IFFALSE 3777
// ComMoveUnit ( escort [ i ] , conv_squad [ 1 ] [ 1 ] ) end else
3749: LD_EXP 2
3753: PUSH
3754: LD_VAR 0 1
3758: ARRAY
3759: PPUSH
3760: LD_EXP 1
3764: PUSH
3765: LD_INT 1
3767: ARRAY
3768: PUSH
3769: LD_INT 1
3771: ARRAY
3772: PPUSH
3773: CALL_OW 112
3777: GO 3797
// ComMoveToArea ( escort [ i ] , conv_end ) ;
3779: LD_EXP 2
3783: PUSH
3784: LD_VAR 0 1
3788: ARRAY
3789: PPUSH
3790: LD_INT 9
3792: PPUSH
3793: CALL_OW 113
// end ;
3797: GO 3479
3799: POP
3800: POP
// if FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) then
3801: LD_INT 22
3803: PUSH
3804: LD_INT 6
3806: PUSH
3807: EMPTY
3808: LIST
3809: LIST
3810: PUSH
3811: LD_INT 21
3813: PUSH
3814: LD_INT 1
3816: PUSH
3817: EMPTY
3818: LIST
3819: LIST
3820: PUSH
3821: EMPTY
3822: LIST
3823: LIST
3824: PPUSH
3825: CALL_OW 69
3829: IFFALSE 3948
// for j in FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) do
3831: LD_ADDR_VAR 0 2
3835: PUSH
3836: LD_INT 22
3838: PUSH
3839: LD_INT 6
3841: PUSH
3842: EMPTY
3843: LIST
3844: LIST
3845: PUSH
3846: LD_INT 21
3848: PUSH
3849: LD_INT 1
3851: PUSH
3852: EMPTY
3853: LIST
3854: LIST
3855: PUSH
3856: EMPTY
3857: LIST
3858: LIST
3859: PPUSH
3860: CALL_OW 69
3864: PUSH
3865: FOR_IN
3866: IFFALSE 3946
// begin if not HasTask ( j ) and not IsInArea ( j , conv_end ) then
3868: LD_VAR 0 2
3872: PPUSH
3873: CALL_OW 314
3877: NOT
3878: PUSH
3879: LD_VAR 0 2
3883: PPUSH
3884: LD_INT 9
3886: PPUSH
3887: CALL_OW 308
3891: NOT
3892: AND
3893: IFFALSE 3907
// ComMoveToArea ( j , conv_end ) ;
3895: LD_VAR 0 2
3899: PPUSH
3900: LD_INT 9
3902: PPUSH
3903: CALL_OW 113
// if IsInArea ( j , conv_end ) then
3907: LD_VAR 0 2
3911: PPUSH
3912: LD_INT 9
3914: PPUSH
3915: CALL_OW 308
3919: IFFALSE 3944
// begin safeCounter := safeCounter + 1 ;
3921: LD_ADDR_EXP 15
3925: PUSH
3926: LD_EXP 15
3930: PUSH
3931: LD_INT 1
3933: PLUS
3934: ST_TO_ADDR
// RemoveUnit ( j ) ;
3935: LD_VAR 0 2
3939: PPUSH
3940: CALL_OW 64
// end ; end ;
3944: GO 3865
3946: POP
3947: POP
// end ;
3948: PPOPN 2
3950: END
// every 0 0$01 trigger UnitFilter ( [ escort , conv_squad ] , [ f_side , 3 ] ) do var i ;
3951: LD_EXP 2
3955: PUSH
3956: LD_EXP 1
3960: PUSH
3961: EMPTY
3962: LIST
3963: LIST
3964: PPUSH
3965: LD_INT 22
3967: PUSH
3968: LD_INT 3
3970: PUSH
3971: EMPTY
3972: LIST
3973: LIST
3974: PPUSH
3975: CALL_OW 72
3979: IFFALSE 4041
3981: GO 3983
3983: DISABLE
3984: LD_INT 0
3986: PPUSH
// begin enable ;
3987: ENABLE
// for i in UnitFilter ( [ escort , conv_squad ] , [ f_side , 3 ] ) do
3988: LD_ADDR_VAR 0 1
3992: PUSH
3993: LD_EXP 2
3997: PUSH
3998: LD_EXP 1
4002: PUSH
4003: EMPTY
4004: LIST
4005: LIST
4006: PPUSH
4007: LD_INT 22
4009: PUSH
4010: LD_INT 3
4012: PUSH
4013: EMPTY
4014: LIST
4015: LIST
4016: PPUSH
4017: CALL_OW 72
4021: PUSH
4022: FOR_IN
4023: IFFALSE 4039
// SetSide ( i , 6 ) ;
4025: LD_VAR 0 1
4029: PPUSH
4030: LD_INT 6
4032: PPUSH
4033: CALL_OW 235
4037: GO 4022
4039: POP
4040: POP
// end ; end_of_file
4041: PPOPN 1
4043: END
// export Collins ; export us_alert , us_retreat , us_patrol , us_count ; export function PrepareAmerican ; var i , un , skill , towers ; begin
4044: LD_INT 0
4046: PPUSH
4047: PPUSH
4048: PPUSH
4049: PPUSH
4050: PPUSH
// uc_side := 1 ;
4051: LD_ADDR_OWVAR 20
4055: PUSH
4056: LD_INT 1
4058: ST_TO_ADDR
// uc_nation := 1 ;
4059: LD_ADDR_OWVAR 21
4063: PUSH
4064: LD_INT 1
4066: ST_TO_ADDR
// us_alert := false ;
4067: LD_ADDR_EXP 21
4071: PUSH
4072: LD_INT 0
4074: ST_TO_ADDR
// us_retreat := false ;
4075: LD_ADDR_EXP 22
4079: PUSH
4080: LD_INT 0
4082: ST_TO_ADDR
// us_patrol := false ;
4083: LD_ADDR_EXP 23
4087: PUSH
4088: LD_INT 0
4090: ST_TO_ADDR
// us_count := 0 ;
4091: LD_ADDR_EXP 24
4095: PUSH
4096: LD_INT 0
4098: ST_TO_ADDR
// skill := [ 5 , 6 , 7 ] [ Difficulty ] ;
4099: LD_ADDR_VAR 0 4
4103: PUSH
4104: LD_INT 5
4106: PUSH
4107: LD_INT 6
4109: PUSH
4110: LD_INT 7
4112: PUSH
4113: EMPTY
4114: LIST
4115: LIST
4116: LIST
4117: PUSH
4118: LD_OWVAR 67
4122: ARRAY
4123: ST_TO_ADDR
// hc_class := 1 ;
4124: LD_ADDR_OWVAR 28
4128: PUSH
4129: LD_INT 1
4131: ST_TO_ADDR
// hc_sex := sex_male ;
4132: LD_ADDR_OWVAR 27
4136: PUSH
4137: LD_INT 1
4139: ST_TO_ADDR
// hc_skills := [ 6 , 3 , 4 , 2 ] ;
4140: LD_ADDR_OWVAR 31
4144: PUSH
4145: LD_INT 6
4147: PUSH
4148: LD_INT 3
4150: PUSH
4151: LD_INT 4
4153: PUSH
4154: LD_INT 2
4156: PUSH
4157: EMPTY
4158: LIST
4159: LIST
4160: LIST
4161: LIST
4162: ST_TO_ADDR
// hc_name := Jack Collins ;
4163: LD_ADDR_OWVAR 26
4167: PUSH
4168: LD_STRING Jack Collins
4170: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
4171: LD_ADDR_OWVAR 29
4175: PUSH
4176: LD_INT 11
4178: PUSH
4179: LD_INT 11
4181: PUSH
4182: EMPTY
4183: LIST
4184: LIST
4185: ST_TO_ADDR
// hc_gallery :=  ;
4186: LD_ADDR_OWVAR 33
4190: PUSH
4191: LD_STRING 
4193: ST_TO_ADDR
// Collins := CreateHuman ;
4194: LD_ADDR_EXP 20
4198: PUSH
4199: CALL_OW 44
4203: ST_TO_ADDR
// PlaceHumanInUnit ( Collins , us_depot ) ;
4204: LD_EXP 20
4208: PPUSH
4209: LD_INT 50
4211: PPUSH
4212: CALL_OW 52
// hc_name :=  ;
4216: LD_ADDR_OWVAR 26
4220: PUSH
4221: LD_STRING 
4223: ST_TO_ADDR
// if Difficulty > 1 then
4224: LD_OWVAR 67
4228: PUSH
4229: LD_INT 1
4231: GREATER
4232: IFFALSE 4286
// begin bc_type := b_bunker ;
4234: LD_ADDR_OWVAR 42
4238: PUSH
4239: LD_INT 32
4241: ST_TO_ADDR
// bc_level := 5 ;
4242: LD_ADDR_OWVAR 43
4246: PUSH
4247: LD_INT 5
4249: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 40 , 33 , 2 ) ;
4250: LD_INT 40
4252: PPUSH
4253: LD_INT 33
4255: PPUSH
4256: LD_INT 2
4258: PPUSH
4259: CALL_OW 47
// if Difficulty > 2 then
4263: LD_OWVAR 67
4267: PUSH
4268: LD_INT 2
4270: GREATER
4271: IFFALSE 4286
// CreateAndPlaceBuildingXYD ( 41 , 42 , 0 ) ;
4273: LD_INT 41
4275: PPUSH
4276: LD_INT 42
4278: PPUSH
4279: LD_INT 0
4281: PPUSH
4282: CALL_OW 47
// end ; PrepareHuman ( false , 2 , skill ) ;
4286: LD_INT 0
4288: PPUSH
4289: LD_INT 2
4291: PPUSH
4292: LD_VAR 0 4
4296: PPUSH
4297: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , us_depot ) ;
4301: CALL_OW 44
4305: PPUSH
4306: LD_INT 50
4308: PPUSH
4309: CALL_OW 52
// PrepareHuman ( false , 3 , skill ) ;
4313: LD_INT 0
4315: PPUSH
4316: LD_INT 3
4318: PPUSH
4319: LD_VAR 0 4
4323: PPUSH
4324: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , us_fac ) ;
4328: CALL_OW 44
4332: PPUSH
4333: LD_INT 56
4335: PPUSH
4336: CALL_OW 52
// PlaceHumanInUnit ( CreateHuman , us_fac ) ;
4340: CALL_OW 44
4344: PPUSH
4345: LD_INT 56
4347: PPUSH
4348: CALL_OW 52
// PrepareHuman ( false , 4 , skill ) ;
4352: LD_INT 0
4354: PPUSH
4355: LD_INT 4
4357: PPUSH
4358: LD_VAR 0 4
4362: PPUSH
4363: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , us_lab ) ;
4367: CALL_OW 44
4371: PPUSH
4372: LD_INT 63
4374: PPUSH
4375: CALL_OW 52
// PrepareHuman ( false , 1 , skill ) ;
4379: LD_INT 0
4381: PPUSH
4382: LD_INT 1
4384: PPUSH
4385: LD_VAR 0 4
4389: PPUSH
4390: CALL_OW 380
// un := CreateHuman ;
4394: LD_ADDR_VAR 0 3
4398: PUSH
4399: CALL_OW 44
4403: ST_TO_ADDR
// SetDir ( un , 4 ) ;
4404: LD_VAR 0 3
4408: PPUSH
4409: LD_INT 4
4411: PPUSH
4412: CALL_OW 233
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) [ 1 ] ) ;
4416: LD_VAR 0 3
4420: PPUSH
4421: LD_INT 22
4423: PUSH
4424: LD_INT 1
4426: PUSH
4427: EMPTY
4428: LIST
4429: LIST
4430: PUSH
4431: LD_INT 30
4433: PUSH
4434: LD_INT 31
4436: PUSH
4437: EMPTY
4438: LIST
4439: LIST
4440: PUSH
4441: EMPTY
4442: LIST
4443: LIST
4444: PPUSH
4445: CALL_OW 69
4449: PUSH
4450: LD_INT 1
4452: ARRAY
4453: PPUSH
4454: CALL_OW 52
// towers := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) ;
4458: LD_ADDR_VAR 0 5
4462: PUSH
4463: LD_INT 22
4465: PUSH
4466: LD_INT 1
4468: PUSH
4469: EMPTY
4470: LIST
4471: LIST
4472: PUSH
4473: LD_INT 30
4475: PUSH
4476: LD_INT 32
4478: PUSH
4479: EMPTY
4480: LIST
4481: LIST
4482: PUSH
4483: EMPTY
4484: LIST
4485: LIST
4486: PPUSH
4487: CALL_OW 69
4491: ST_TO_ADDR
// for i in towers do
4492: LD_ADDR_VAR 0 2
4496: PUSH
4497: LD_VAR 0 5
4501: PUSH
4502: FOR_IN
4503: IFFALSE 4571
// begin PrepareHuman ( false , 1 , skill ) ;
4505: LD_INT 0
4507: PPUSH
4508: LD_INT 1
4510: PPUSH
4511: LD_VAR 0 4
4515: PPUSH
4516: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
4520: CALL_OW 44
4524: PPUSH
4525: LD_VAR 0 2
4529: PPUSH
4530: CALL_OW 52
// PlaceWeaponTurret ( i , [ us_gatling_gun , us_light_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
4534: LD_VAR 0 2
4538: PPUSH
4539: LD_INT 4
4541: PUSH
4542: LD_INT 3
4544: PUSH
4545: LD_INT 5
4547: PUSH
4548: EMPTY
4549: LIST
4550: LIST
4551: LIST
4552: PUSH
4553: LD_INT 1
4555: PPUSH
4556: LD_INT 3
4558: PPUSH
4559: CALL_OW 12
4563: ARRAY
4564: PPUSH
4565: CALL_OW 431
// end ;
4569: GO 4502
4571: POP
4572: POP
// PrepareHuman ( false , 1 , skill ) ;
4573: LD_INT 0
4575: PPUSH
4576: LD_INT 1
4578: PPUSH
4579: LD_VAR 0 4
4583: PPUSH
4584: CALL_OW 380
// us_patrol := CreateHuman ;
4588: LD_ADDR_EXP 23
4592: PUSH
4593: CALL_OW 44
4597: ST_TO_ADDR
// PlaceUnitXY ( us_patrol , 12 , 5 , false ) ;
4598: LD_EXP 23
4602: PPUSH
4603: LD_INT 12
4605: PPUSH
4606: LD_INT 5
4608: PPUSH
4609: LD_INT 0
4611: PPUSH
4612: CALL_OW 48
// end ;
4616: LD_VAR 0 1
4620: RET
// every 0 0$01 trigger us_count >= [ 3 , 4 , 5 ] [ Difficulty ] do
4621: LD_EXP 24
4625: PUSH
4626: LD_INT 3
4628: PUSH
4629: LD_INT 4
4631: PUSH
4632: LD_INT 5
4634: PUSH
4635: EMPTY
4636: LIST
4637: LIST
4638: LIST
4639: PUSH
4640: LD_OWVAR 67
4644: ARRAY
4645: GREATEREQUAL
4646: IFFALSE 4671
4648: GO 4650
4650: DISABLE
// begin Say ( Collins , DPM_C2 ) ;
4651: LD_EXP 20
4655: PPUSH
4656: LD_STRING DPM_C2
4658: PPUSH
4659: CALL_OW 88
// us_retreat := true ;
4663: LD_ADDR_EXP 22
4667: PUSH
4668: LD_INT 1
4670: ST_TO_ADDR
// end ;
4671: END
// every 10 10$00 trigger not us_alert do var R ;
4672: LD_EXP 21
4676: NOT
4677: IFFALSE 4751
4679: GO 4681
4681: DISABLE
4682: LD_INT 0
4684: PPUSH
// begin uc_side := 1 ;
4685: LD_ADDR_OWVAR 20
4689: PUSH
4690: LD_INT 1
4692: ST_TO_ADDR
// uc_nation := 1 ;
4693: LD_ADDR_OWVAR 21
4697: PUSH
4698: LD_INT 1
4700: ST_TO_ADDR
// PrepareHuman ( false , 1 , 0 ) ;
4701: LD_INT 0
4703: PPUSH
4704: LD_INT 1
4706: PPUSH
4707: LD_INT 0
4709: PPUSH
4710: CALL_OW 380
// R := CreateHuman ;
4714: LD_ADDR_VAR 0 1
4718: PUSH
4719: CALL_OW 44
4723: ST_TO_ADDR
// SayRadio ( R , DPM_R1 ) ;
4724: LD_VAR 0 1
4728: PPUSH
4729: LD_STRING DPM_R1
4731: PPUSH
4732: CALL_OW 94
// Wait ( 0 0$03 ) ;
4736: LD_INT 105
4738: PPUSH
4739: CALL_OW 67
// us_retreat := true ;
4743: LD_ADDR_EXP 22
4747: PUSH
4748: LD_INT 1
4750: ST_TO_ADDR
// end ;
4751: PPOPN 1
4753: END
// every 0 0$01 trigger us_alert do var i ;
4754: LD_EXP 21
4758: IFFALSE 5018
4760: GO 4762
4762: DISABLE
4763: LD_INT 0
4765: PPUSH
// begin Say ( Collins , DPM_C1 ) ;
4766: LD_EXP 20
4770: PPUSH
4771: LD_STRING DPM_C1
4773: PPUSH
4774: CALL_OW 88
// if UnitsInside ( us_fac ) then
4778: LD_INT 56
4780: PPUSH
4781: CALL_OW 313
4785: IFFALSE 4840
// for i in UnitsInside ( us_fac ) do
4787: LD_ADDR_VAR 0 1
4791: PUSH
4792: LD_INT 56
4794: PPUSH
4795: CALL_OW 313
4799: PUSH
4800: FOR_IN
4801: IFFALSE 4838
// begin ComExitBuilding ( i ) ;
4803: LD_VAR 0 1
4807: PPUSH
4808: CALL_OW 122
// AddComEnterUnit ( i , us_arm ) ;
4812: LD_VAR 0 1
4816: PPUSH
4817: LD_INT 69
4819: PPUSH
4820: CALL_OW 180
// AddComChangeProfession ( i , 1 ) ;
4824: LD_VAR 0 1
4828: PPUSH
4829: LD_INT 1
4831: PPUSH
4832: CALL_OW 183
// end ;
4836: GO 4800
4838: POP
4839: POP
// ComExitBuilding ( Collins ) ;
4840: LD_EXP 20
4844: PPUSH
4845: CALL_OW 122
// AddComEnterUnit ( Collins , us_arm ) ;
4849: LD_EXP 20
4853: PPUSH
4854: LD_INT 69
4856: PPUSH
4857: CALL_OW 180
// ComExitBuilding ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) [ 1 ] ) ;
4861: LD_INT 22
4863: PUSH
4864: LD_INT 1
4866: PUSH
4867: EMPTY
4868: LIST
4869: LIST
4870: PUSH
4871: LD_INT 25
4873: PUSH
4874: LD_INT 2
4876: PUSH
4877: EMPTY
4878: LIST
4879: LIST
4880: PUSH
4881: EMPTY
4882: LIST
4883: LIST
4884: PPUSH
4885: CALL_OW 69
4889: PUSH
4890: LD_INT 1
4892: ARRAY
4893: PPUSH
4894: CALL_OW 122
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) [ 1 ] , 67 , 52 ) ;
4898: LD_INT 22
4900: PUSH
4901: LD_INT 1
4903: PUSH
4904: EMPTY
4905: LIST
4906: LIST
4907: PUSH
4908: LD_INT 25
4910: PUSH
4911: LD_INT 2
4913: PUSH
4914: EMPTY
4915: LIST
4916: LIST
4917: PUSH
4918: EMPTY
4919: LIST
4920: LIST
4921: PPUSH
4922: CALL_OW 69
4926: PUSH
4927: LD_INT 1
4929: ARRAY
4930: PPUSH
4931: LD_INT 67
4933: PPUSH
4934: LD_INT 52
4936: PPUSH
4937: CALL_OW 171
// ComExitBuilding ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) [ 1 ] ) ;
4941: LD_INT 22
4943: PUSH
4944: LD_INT 1
4946: PUSH
4947: EMPTY
4948: LIST
4949: LIST
4950: PUSH
4951: LD_INT 25
4953: PUSH
4954: LD_INT 4
4956: PUSH
4957: EMPTY
4958: LIST
4959: LIST
4960: PUSH
4961: EMPTY
4962: LIST
4963: LIST
4964: PPUSH
4965: CALL_OW 69
4969: PUSH
4970: LD_INT 1
4972: ARRAY
4973: PPUSH
4974: CALL_OW 122
// AddComEnterUnit ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) [ 1 ] , us_arm ) ;
4978: LD_INT 22
4980: PUSH
4981: LD_INT 1
4983: PUSH
4984: EMPTY
4985: LIST
4986: LIST
4987: PUSH
4988: LD_INT 25
4990: PUSH
4991: LD_INT 4
4993: PUSH
4994: EMPTY
4995: LIST
4996: LIST
4997: PUSH
4998: EMPTY
4999: LIST
5000: LIST
5001: PPUSH
5002: CALL_OW 69
5006: PUSH
5007: LD_INT 1
5009: ARRAY
5010: PPUSH
5011: LD_INT 69
5013: PPUSH
5014: CALL_OW 180
// end ;
5018: PPOPN 1
5020: END
// every 3 3$00 trigger not us_alert and GetSide ( us_fac ) = 1 do
5021: LD_EXP 21
5025: NOT
5026: PUSH
5027: LD_INT 56
5029: PPUSH
5030: CALL_OW 255
5034: PUSH
5035: LD_INT 1
5037: EQUAL
5038: AND
5039: IFFALSE 5082
5041: GO 5043
5043: DISABLE
// begin AddComConstruct ( us_fac , us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun ) ;
5044: LD_INT 56
5046: PPUSH
5047: LD_INT 2
5049: PPUSH
5050: LD_INT 1
5052: PPUSH
5053: LD_INT 1
5055: PPUSH
5056: LD_INT 4
5058: PPUSH
5059: CALL_OW 185
// AddComConstruct ( us_fac , us_medium_tracked , engine_solar , control_manual , us_double_gun ) ;
5063: LD_INT 56
5065: PPUSH
5066: LD_INT 3
5068: PPUSH
5069: LD_INT 2
5071: PPUSH
5072: LD_INT 1
5074: PPUSH
5075: LD_INT 5
5077: PPUSH
5078: CALL_OW 185
// end ;
5082: END
// every 0 0$01 trigger us_patrol do
5083: LD_EXP 23
5087: IFFALSE 5135
5089: GO 5091
5091: DISABLE
// SetPatrol ( us_patrol , [ 12 , 5 , 56 , 4 , 94 , 34 , 92 , 108 ] ) ;
5092: LD_EXP 23
5096: PPUSH
5097: LD_INT 12
5099: PUSH
5100: LD_INT 5
5102: PUSH
5103: LD_INT 56
5105: PUSH
5106: LD_INT 4
5108: PUSH
5109: LD_INT 94
5111: PUSH
5112: LD_INT 34
5114: PUSH
5115: LD_INT 92
5117: PUSH
5118: LD_INT 108
5120: PUSH
5121: EMPTY
5122: LIST
5123: LIST
5124: LIST
5125: LIST
5126: LIST
5127: LIST
5128: LIST
5129: LIST
5130: PPUSH
5131: CALL 5136 0 2
5135: END
// export function SetPatrol ( un , points ) ; var s , i , turn ; begin
5136: LD_INT 0
5138: PPUSH
5139: PPUSH
5140: PPUSH
5141: PPUSH
// s = 1 ;
5142: LD_ADDR_VAR 0 4
5146: PUSH
5147: LD_INT 1
5149: ST_TO_ADDR
// turn := true ;
5150: LD_ADDR_VAR 0 6
5154: PUSH
5155: LD_INT 1
5157: ST_TO_ADDR
// while ( un and not us_alert ) do
5158: LD_VAR 0 1
5162: PUSH
5163: LD_EXP 21
5167: NOT
5168: AND
5169: IFFALSE 5348
// begin wait ( 35 ) ;
5171: LD_INT 35
5173: PPUSH
5174: CALL_OW 67
// if not HasTask ( un ) then
5178: LD_VAR 0 1
5182: PPUSH
5183: CALL_OW 314
5187: NOT
5188: IFFALSE 5307
// begin ComMoveXY ( un , points [ s ] , points [ s + 1 ] ) ;
5190: LD_VAR 0 1
5194: PPUSH
5195: LD_VAR 0 2
5199: PUSH
5200: LD_VAR 0 4
5204: ARRAY
5205: PPUSH
5206: LD_VAR 0 2
5210: PUSH
5211: LD_VAR 0 4
5215: PUSH
5216: LD_INT 1
5218: PLUS
5219: ARRAY
5220: PPUSH
5221: CALL_OW 111
// if s + 2 > points then
5225: LD_VAR 0 4
5229: PUSH
5230: LD_INT 2
5232: PLUS
5233: PUSH
5234: LD_VAR 0 2
5238: GREATER
5239: IFFALSE 5249
// turn := false ;
5241: LD_ADDR_VAR 0 6
5245: PUSH
5246: LD_INT 0
5248: ST_TO_ADDR
// if s - 2 < 1 then
5249: LD_VAR 0 4
5253: PUSH
5254: LD_INT 2
5256: MINUS
5257: PUSH
5258: LD_INT 1
5260: LESS
5261: IFFALSE 5271
// turn := true ;
5263: LD_ADDR_VAR 0 6
5267: PUSH
5268: LD_INT 1
5270: ST_TO_ADDR
// if turn then
5271: LD_VAR 0 6
5275: IFFALSE 5293
// s := s + 2 else
5277: LD_ADDR_VAR 0 4
5281: PUSH
5282: LD_VAR 0 4
5286: PUSH
5287: LD_INT 2
5289: PLUS
5290: ST_TO_ADDR
5291: GO 5307
// s := s - 2 ;
5293: LD_ADDR_VAR 0 4
5297: PUSH
5298: LD_VAR 0 4
5302: PUSH
5303: LD_INT 2
5305: MINUS
5306: ST_TO_ADDR
// end ; if GetLives ( un ) < 1000 or See ( 3 , un ) then
5307: LD_VAR 0 1
5311: PPUSH
5312: CALL_OW 256
5316: PUSH
5317: LD_INT 1000
5319: LESS
5320: PUSH
5321: LD_INT 3
5323: PPUSH
5324: LD_VAR 0 1
5328: PPUSH
5329: CALL_OW 292
5333: OR
5334: IFFALSE 5346
// begin us_alert := true ;
5336: LD_ADDR_EXP 21
5340: PUSH
5341: LD_INT 1
5343: ST_TO_ADDR
// break ;
5344: GO 5348
// end ; end ;
5346: GO 5158
// ComEnterUnit ( un , us_arm ) ;
5348: LD_VAR 0 1
5352: PPUSH
5353: LD_INT 69
5355: PPUSH
5356: CALL_OW 120
// end ;
5360: LD_VAR 0 3
5364: RET
// every 0 0$01 trigger us_retreat do var i , point ;
5365: LD_EXP 22
5369: IFFALSE 5544
5371: GO 5373
5373: DISABLE
5374: LD_INT 0
5376: PPUSH
5377: PPUSH
// begin point := false ;
5378: LD_ADDR_VAR 0 2
5382: PUSH
5383: LD_INT 0
5385: ST_TO_ADDR
// if FilterUnitsInArea ( zone1 , [ f_side , 3 ] ) = 0 then
5386: LD_INT 5
5388: PPUSH
5389: LD_INT 22
5391: PUSH
5392: LD_INT 3
5394: PUSH
5395: EMPTY
5396: LIST
5397: LIST
5398: PPUSH
5399: CALL_OW 70
5403: PUSH
5404: LD_INT 0
5406: EQUAL
5407: IFFALSE 5419
// point := us_ret1 else
5409: LD_ADDR_VAR 0 2
5413: PUSH
5414: LD_INT 3
5416: ST_TO_ADDR
5417: GO 5460
// if FilterUnitsInArea ( zone1 , [ f_side , 3 ] ) = 0 then
5419: LD_INT 5
5421: PPUSH
5422: LD_INT 22
5424: PUSH
5425: LD_INT 3
5427: PUSH
5428: EMPTY
5429: LIST
5430: LIST
5431: PPUSH
5432: CALL_OW 70
5436: PUSH
5437: LD_INT 0
5439: EQUAL
5440: IFFALSE 5452
// point := us_ret2 else
5442: LD_ADDR_VAR 0 2
5446: PUSH
5447: LD_INT 2
5449: ST_TO_ADDR
5450: GO 5460
// point := us_ret3 ;
5452: LD_ADDR_VAR 0 2
5456: PUSH
5457: LD_INT 4
5459: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
5460: LD_ADDR_VAR 0 1
5464: PUSH
5465: LD_INT 22
5467: PUSH
5468: LD_INT 1
5470: PUSH
5471: EMPTY
5472: LIST
5473: LIST
5474: PUSH
5475: LD_INT 21
5477: PUSH
5478: LD_INT 1
5480: PUSH
5481: EMPTY
5482: LIST
5483: LIST
5484: PUSH
5485: EMPTY
5486: LIST
5487: LIST
5488: PPUSH
5489: CALL_OW 69
5493: PUSH
5494: FOR_IN
5495: IFFALSE 5542
// begin if IsInUnit ( i ) then
5497: LD_VAR 0 1
5501: PPUSH
5502: CALL_OW 310
5506: IFFALSE 5526
// begin ComExitBuilding ( i ) ;
5508: LD_VAR 0 1
5512: PPUSH
5513: CALL_OW 122
// ComExitVehicle ( i ) ;
5517: LD_VAR 0 1
5521: PPUSH
5522: CALL_OW 121
// end ; AddComMoveToArea ( i , point ) ;
5526: LD_VAR 0 1
5530: PPUSH
5531: LD_VAR 0 2
5535: PPUSH
5536: CALL_OW 173
// end ;
5540: GO 5494
5542: POP
5543: POP
// end ;
5544: PPOPN 2
5546: END
// every 10 trigger us_retreat and FilterUnitsInArea ( us_ret1 , [ f_side , 1 ] ) do
5547: LD_EXP 22
5551: PUSH
5552: LD_INT 3
5554: PPUSH
5555: LD_INT 22
5557: PUSH
5558: LD_INT 1
5560: PUSH
5561: EMPTY
5562: LIST
5563: LIST
5564: PPUSH
5565: CALL_OW 70
5569: AND
5570: IFFALSE 5616
5572: GO 5574
5574: DISABLE
// begin enable ;
5575: ENABLE
// RemoveUnit ( FilterUnitsInArea ( us_ret1 , [ f_side , 1 ] ) [ 1 ] ) ;
5576: LD_INT 3
5578: PPUSH
5579: LD_INT 22
5581: PUSH
5582: LD_INT 1
5584: PUSH
5585: EMPTY
5586: LIST
5587: LIST
5588: PPUSH
5589: CALL_OW 70
5593: PUSH
5594: LD_INT 1
5596: ARRAY
5597: PPUSH
5598: CALL_OW 64
// if medal1 then
5602: LD_EXP 3
5606: IFFALSE 5616
// medal1 := false ;
5608: LD_ADDR_EXP 3
5612: PUSH
5613: LD_INT 0
5615: ST_TO_ADDR
// end ;
5616: END
// every 10 trigger us_retreat and FilterUnitsInArea ( us_ret2 , [ f_side , 1 ] ) do
5617: LD_EXP 22
5621: PUSH
5622: LD_INT 2
5624: PPUSH
5625: LD_INT 22
5627: PUSH
5628: LD_INT 1
5630: PUSH
5631: EMPTY
5632: LIST
5633: LIST
5634: PPUSH
5635: CALL_OW 70
5639: AND
5640: IFFALSE 5686
5642: GO 5644
5644: DISABLE
// begin enable ;
5645: ENABLE
// RemoveUnit ( FilterUnitsInArea ( us_ret2 , [ f_side , 1 ] ) [ 1 ] ) ;
5646: LD_INT 2
5648: PPUSH
5649: LD_INT 22
5651: PUSH
5652: LD_INT 1
5654: PUSH
5655: EMPTY
5656: LIST
5657: LIST
5658: PPUSH
5659: CALL_OW 70
5663: PUSH
5664: LD_INT 1
5666: ARRAY
5667: PPUSH
5668: CALL_OW 64
// if medal1 then
5672: LD_EXP 3
5676: IFFALSE 5686
// medal1 := false ;
5678: LD_ADDR_EXP 3
5682: PUSH
5683: LD_INT 0
5685: ST_TO_ADDR
// end ;
5686: END
// every 10 trigger us_retreat and FilterUnitsInArea ( us_ret3 , [ f_side , 1 ] ) do
5687: LD_EXP 22
5691: PUSH
5692: LD_INT 4
5694: PPUSH
5695: LD_INT 22
5697: PUSH
5698: LD_INT 1
5700: PUSH
5701: EMPTY
5702: LIST
5703: LIST
5704: PPUSH
5705: CALL_OW 70
5709: AND
5710: IFFALSE 5756
5712: GO 5714
5714: DISABLE
// begin enable ;
5715: ENABLE
// RemoveUnit ( FilterUnitsInArea ( us_ret3 , [ f_side , 1 ] ) [ 1 ] ) ;
5716: LD_INT 4
5718: PPUSH
5719: LD_INT 22
5721: PUSH
5722: LD_INT 1
5724: PUSH
5725: EMPTY
5726: LIST
5727: LIST
5728: PPUSH
5729: CALL_OW 70
5733: PUSH
5734: LD_INT 1
5736: ARRAY
5737: PPUSH
5738: CALL_OW 64
// if medal1 then
5742: LD_EXP 3
5746: IFFALSE 5756
// medal1 := false ;
5748: LD_ADDR_EXP 3
5752: PUSH
5753: LD_INT 0
5755: ST_TO_ADDR
// end ;
5756: END
// every 0 0$03 trigger FilterAllUnits ( [ f_side , 1 ] ) = 0 do
5757: LD_INT 22
5759: PUSH
5760: LD_INT 1
5762: PUSH
5763: EMPTY
5764: LIST
5765: LIST
5766: PPUSH
5767: CALL_OW 69
5771: PUSH
5772: LD_INT 0
5774: EQUAL
5775: IFFALSE 5788
5777: GO 5779
5779: DISABLE
// us_retreat := false ;
5780: LD_ADDR_EXP 22
5784: PUSH
5785: LD_INT 0
5787: ST_TO_ADDR
5788: END
// export function CounterAttack ; var i , j , un , skill ; begin
5789: LD_INT 0
5791: PPUSH
5792: PPUSH
5793: PPUSH
5794: PPUSH
5795: PPUSH
// uc_side := 1 ;
5796: LD_ADDR_OWVAR 20
5800: PUSH
5801: LD_INT 1
5803: ST_TO_ADDR
// uc_nation := 1 ;
5804: LD_ADDR_OWVAR 21
5808: PUSH
5809: LD_INT 1
5811: ST_TO_ADDR
// skill := [ 4 , 5 , 5 ] [ Difficulty ] ;
5812: LD_ADDR_VAR 0 5
5816: PUSH
5817: LD_INT 4
5819: PUSH
5820: LD_INT 5
5822: PUSH
5823: LD_INT 5
5825: PUSH
5826: EMPTY
5827: LIST
5828: LIST
5829: LIST
5830: PUSH
5831: LD_OWVAR 67
5835: ARRAY
5836: ST_TO_ADDR
// for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
5837: LD_ADDR_VAR 0 2
5841: PUSH
5842: DOUBLE
5843: LD_INT 1
5845: DEC
5846: ST_TO_ADDR
5847: LD_INT 4
5849: PUSH
5850: LD_INT 5
5852: PUSH
5853: LD_INT 6
5855: PUSH
5856: EMPTY
5857: LIST
5858: LIST
5859: LIST
5860: PUSH
5861: LD_OWVAR 67
5865: ARRAY
5866: PUSH
5867: FOR_TO
5868: IFFALSE 6068
// begin vc_chassis := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked ] [ Rand ( 1 , 3 ) ] ;
5870: LD_ADDR_OWVAR 37
5874: PUSH
5875: LD_INT 2
5877: PUSH
5878: LD_INT 3
5880: PUSH
5881: LD_INT 4
5883: PUSH
5884: EMPTY
5885: LIST
5886: LIST
5887: LIST
5888: PUSH
5889: LD_INT 1
5891: PPUSH
5892: LD_INT 3
5894: PPUSH
5895: CALL_OW 12
5899: ARRAY
5900: ST_TO_ADDR
// vc_engine := engine_combustion ;
5901: LD_ADDR_OWVAR 39
5905: PUSH
5906: LD_INT 1
5908: ST_TO_ADDR
// vc_control := control_manual ;
5909: LD_ADDR_OWVAR 38
5913: PUSH
5914: LD_INT 1
5916: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_double_gun , us_light_gun ] [ Rand ( 1 , 3 ) ] ;
5917: LD_ADDR_OWVAR 40
5921: PUSH
5922: LD_INT 4
5924: PUSH
5925: LD_INT 5
5927: PUSH
5928: LD_INT 3
5930: PUSH
5931: EMPTY
5932: LIST
5933: LIST
5934: LIST
5935: PUSH
5936: LD_INT 1
5938: PPUSH
5939: LD_INT 3
5941: PPUSH
5942: CALL_OW 12
5946: ARRAY
5947: ST_TO_ADDR
// vc_fuel_battery := Rand ( 88 , 99 ) ;
5948: LD_ADDR_OWVAR 41
5952: PUSH
5953: LD_INT 88
5955: PPUSH
5956: LD_INT 99
5958: PPUSH
5959: CALL_OW 12
5963: ST_TO_ADDR
// un := CreateVehicle ;
5964: LD_ADDR_VAR 0 4
5968: PUSH
5969: CALL_OW 45
5973: ST_TO_ADDR
// PlaceUnitXY ( un , 64 , 117 , false ) ;
5974: LD_VAR 0 4
5978: PPUSH
5979: LD_INT 64
5981: PPUSH
5982: LD_INT 117
5984: PPUSH
5985: LD_INT 0
5987: PPUSH
5988: CALL_OW 48
// PrepareHuman ( false , 3 , skill ) ;
5992: LD_INT 0
5994: PPUSH
5995: LD_INT 3
5997: PPUSH
5998: LD_VAR 0 5
6002: PPUSH
6003: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
6007: CALL_OW 44
6011: PPUSH
6012: LD_VAR 0 4
6016: PPUSH
6017: CALL_OW 52
// us_force := Insert ( us_force , 1 , un ) ;
6021: LD_ADDR_EXP 12
6025: PUSH
6026: LD_EXP 12
6030: PPUSH
6031: LD_INT 1
6033: PPUSH
6034: LD_VAR 0 4
6038: PPUSH
6039: CALL_OW 2
6043: ST_TO_ADDR
// ComMoveXY ( un , 60 , 109 ) ;
6044: LD_VAR 0 4
6048: PPUSH
6049: LD_INT 60
6051: PPUSH
6052: LD_INT 109
6054: PPUSH
6055: CALL_OW 111
// Wait ( 0 0$02 ) ;
6059: LD_INT 70
6061: PPUSH
6062: CALL_OW 67
// end ;
6066: GO 5867
6068: POP
6069: POP
// RemoveSeeing ( 62 , 113 , 3 ) ;
6070: LD_INT 62
6072: PPUSH
6073: LD_INT 113
6075: PPUSH
6076: LD_INT 3
6078: PPUSH
6079: CALL_OW 331
// while ( FilterAllUnits ( [ f_side , 1 ] ) ) do
6083: LD_INT 22
6085: PUSH
6086: LD_INT 1
6088: PUSH
6089: EMPTY
6090: LIST
6091: LIST
6092: PPUSH
6093: CALL_OW 69
6097: IFFALSE 6298
// begin Wait ( 0 0$01 ) ;
6099: LD_INT 35
6101: PPUSH
6102: CALL_OW 67
// for i = 1 to us_force do
6106: LD_ADDR_VAR 0 2
6110: PUSH
6111: DOUBLE
6112: LD_INT 1
6114: DEC
6115: ST_TO_ADDR
6116: LD_EXP 12
6120: PUSH
6121: FOR_TO
6122: IFFALSE 6157
// ComAttackUnit ( us_force [ i ] , FindTarget ( us_force [ i ] ) ) ;
6124: LD_EXP 12
6128: PUSH
6129: LD_VAR 0 2
6133: ARRAY
6134: PPUSH
6135: LD_EXP 12
6139: PUSH
6140: LD_VAR 0 2
6144: ARRAY
6145: PPUSH
6146: CALL 10565 0 1
6150: PPUSH
6151: CALL_OW 115
6155: GO 6121
6157: POP
6158: POP
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 3 ] , [ f_not , [ f_driving ] ] ] ) then
6159: LD_INT 22
6161: PUSH
6162: LD_INT 1
6164: PUSH
6165: EMPTY
6166: LIST
6167: LIST
6168: PUSH
6169: LD_INT 25
6171: PUSH
6172: LD_INT 3
6174: PUSH
6175: EMPTY
6176: LIST
6177: LIST
6178: PUSH
6179: LD_INT 3
6181: PUSH
6182: LD_INT 55
6184: PUSH
6185: EMPTY
6186: LIST
6187: PUSH
6188: EMPTY
6189: LIST
6190: LIST
6191: PUSH
6192: EMPTY
6193: LIST
6194: LIST
6195: LIST
6196: PPUSH
6197: CALL_OW 69
6201: IFFALSE 6296
// for j in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 3 ] , [ f_not , [ f_driving ] ] ] ) do
6203: LD_ADDR_VAR 0 3
6207: PUSH
6208: LD_INT 22
6210: PUSH
6211: LD_INT 1
6213: PUSH
6214: EMPTY
6215: LIST
6216: LIST
6217: PUSH
6218: LD_INT 25
6220: PUSH
6221: LD_INT 3
6223: PUSH
6224: EMPTY
6225: LIST
6226: LIST
6227: PUSH
6228: LD_INT 3
6230: PUSH
6231: LD_INT 55
6233: PUSH
6234: EMPTY
6235: LIST
6236: PUSH
6237: EMPTY
6238: LIST
6239: LIST
6240: PUSH
6241: EMPTY
6242: LIST
6243: LIST
6244: LIST
6245: PPUSH
6246: CALL_OW 69
6250: PUSH
6251: FOR_IN
6252: IFFALSE 6294
// if not IsInArea ( j , conv_end ) then
6254: LD_VAR 0 3
6258: PPUSH
6259: LD_INT 9
6261: PPUSH
6262: CALL_OW 308
6266: NOT
6267: IFFALSE 6283
// ComMoveToArea ( j , conv_end ) else
6269: LD_VAR 0 3
6273: PPUSH
6274: LD_INT 9
6276: PPUSH
6277: CALL_OW 113
6281: GO 6292
// RemoveUnit ( j ) ;
6283: LD_VAR 0 3
6287: PPUSH
6288: CALL_OW 64
6292: GO 6251
6294: POP
6295: POP
// end ;
6296: GO 6083
// end ; end_of_file
6298: LD_VAR 0 1
6302: RET
// export function PrepareArabian ; begin
6303: LD_INT 0
6305: PPUSH
// RobertFarmer ;
6306: CALL 6327 0 0
// PrepareHovercrafts ;
6310: CALL 7234 0 0
// ar_attacks := true ;
6314: LD_ADDR_EXP 10
6318: PUSH
6319: LD_INT 1
6321: ST_TO_ADDR
// end ;
6322: LD_VAR 0 1
6326: RET
// export Farmer ; export function RobertFarmer ; begin
6327: LD_INT 0
6329: PPUSH
// uc_side := 2 ;
6330: LD_ADDR_OWVAR 20
6334: PUSH
6335: LD_INT 2
6337: ST_TO_ADDR
// uc_nation := 2 ;
6338: LD_ADDR_OWVAR 21
6342: PUSH
6343: LD_INT 2
6345: ST_TO_ADDR
// Farmer := NewCharacter ( Farmer ) ;
6346: LD_ADDR_EXP 25
6350: PUSH
6351: LD_STRING Farmer
6353: PPUSH
6354: CALL_OW 25
6358: ST_TO_ADDR
// SayRadio ( Farmer , DPM_F1 ) ;
6359: LD_EXP 25
6363: PPUSH
6364: LD_STRING DPM_F1
6366: PPUSH
6367: CALL_OW 94
// end ;
6371: LD_VAR 0 1
6375: RET
// export function PrepareAttack ( type ) ; var i , un , veh , skill ; begin
6376: LD_INT 0
6378: PPUSH
6379: PPUSH
6380: PPUSH
6381: PPUSH
6382: PPUSH
// uc_side := 2 ;
6383: LD_ADDR_OWVAR 20
6387: PUSH
6388: LD_INT 2
6390: ST_TO_ADDR
// uc_nation := 2 ;
6391: LD_ADDR_OWVAR 21
6395: PUSH
6396: LD_INT 2
6398: ST_TO_ADDR
// skill := [ 4 , 6 , 7 ] [ Difficulty ] ;
6399: LD_ADDR_VAR 0 6
6403: PUSH
6404: LD_INT 4
6406: PUSH
6407: LD_INT 6
6409: PUSH
6410: LD_INT 7
6412: PUSH
6413: EMPTY
6414: LIST
6415: LIST
6416: LIST
6417: PUSH
6418: LD_OWVAR 67
6422: ARRAY
6423: ST_TO_ADDR
// Randomize ;
6424: CALL_OW 10
// case type of 1 :
6428: LD_VAR 0 1
6432: PUSH
6433: LD_INT 1
6435: DOUBLE
6436: EQUAL
6437: IFTRUE 6441
6439: GO 6563
6441: POP
// begin for i = 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
6442: LD_ADDR_VAR 0 3
6446: PUSH
6447: DOUBLE
6448: LD_INT 1
6450: DEC
6451: ST_TO_ADDR
6452: LD_INT 3
6454: PUSH
6455: LD_INT 4
6457: PUSH
6458: LD_INT 5
6460: PUSH
6461: EMPTY
6462: LIST
6463: LIST
6464: LIST
6465: PUSH
6466: LD_OWVAR 67
6470: ARRAY
6471: PUSH
6472: FOR_TO
6473: IFFALSE 6559
// begin PrepareHuman ( false , [ class_soldier , class_soldier , class_mortar ] [ Rand ( 1 , 3 ) ] , skill ) ;
6475: LD_INT 0
6477: PPUSH
6478: LD_INT 1
6480: PUSH
6481: LD_INT 1
6483: PUSH
6484: LD_INT 8
6486: PUSH
6487: EMPTY
6488: LIST
6489: LIST
6490: LIST
6491: PUSH
6492: LD_INT 1
6494: PPUSH
6495: LD_INT 3
6497: PPUSH
6498: CALL_OW 12
6502: ARRAY
6503: PPUSH
6504: LD_VAR 0 6
6508: PPUSH
6509: CALL_OW 380
// un := CreateHuman ;
6513: LD_ADDR_VAR 0 4
6517: PUSH
6518: CALL_OW 44
6522: ST_TO_ADDR
// PlaceUnitArea ( un , ar3 , false ) ;
6523: LD_VAR 0 4
6527: PPUSH
6528: LD_INT 18
6530: PPUSH
6531: LD_INT 0
6533: PPUSH
6534: CALL_OW 49
// ComMoveToArea ( un , spot3 ) ;
6538: LD_VAR 0 4
6542: PPUSH
6543: LD_INT 20
6545: PPUSH
6546: CALL_OW 113
// Wait ( 0 0$01 ) ;
6550: LD_INT 35
6552: PPUSH
6553: CALL_OW 67
// end ;
6557: GO 6472
6559: POP
6560: POP
// end ; 2 :
6561: GO 7229
6563: LD_INT 2
6565: DOUBLE
6566: EQUAL
6567: IFTRUE 6571
6569: GO 6865
6571: POP
// begin for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
6572: LD_ADDR_VAR 0 3
6576: PUSH
6577: DOUBLE
6578: LD_INT 1
6580: DEC
6581: ST_TO_ADDR
6582: LD_INT 4
6584: PUSH
6585: LD_INT 5
6587: PUSH
6588: LD_INT 6
6590: PUSH
6591: EMPTY
6592: LIST
6593: LIST
6594: LIST
6595: PUSH
6596: LD_OWVAR 67
6600: ARRAY
6601: PUSH
6602: FOR_TO
6603: IFFALSE 6666
// begin PrepareHuman ( false , class_soldier , skill ) ;
6605: LD_INT 0
6607: PPUSH
6608: LD_INT 1
6610: PPUSH
6611: LD_VAR 0 6
6615: PPUSH
6616: CALL_OW 380
// un := CreateHuman ;
6620: LD_ADDR_VAR 0 4
6624: PUSH
6625: CALL_OW 44
6629: ST_TO_ADDR
// PlaceUnitArea ( un , ar2 , false ) ;
6630: LD_VAR 0 4
6634: PPUSH
6635: LD_INT 17
6637: PPUSH
6638: LD_INT 0
6640: PPUSH
6641: CALL_OW 49
// ComMoveToArea ( un , spot2 ) ;
6645: LD_VAR 0 4
6649: PPUSH
6650: LD_INT 19
6652: PPUSH
6653: CALL_OW 113
// Wait ( 0 0$01 ) ;
6657: LD_INT 35
6659: PPUSH
6660: CALL_OW 67
// end ;
6664: GO 6602
6666: POP
6667: POP
// for i = 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
6668: LD_ADDR_VAR 0 3
6672: PUSH
6673: DOUBLE
6674: LD_INT 1
6676: DEC
6677: ST_TO_ADDR
6678: LD_INT 2
6680: PUSH
6681: LD_INT 3
6683: PUSH
6684: LD_INT 4
6686: PUSH
6687: EMPTY
6688: LIST
6689: LIST
6690: LIST
6691: PUSH
6692: LD_OWVAR 67
6696: ARRAY
6697: PUSH
6698: FOR_TO
6699: IFFALSE 6861
// begin vc_chassis := [ ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 2 ) ] ;
6701: LD_ADDR_OWVAR 37
6705: PUSH
6706: LD_INT 13
6708: PUSH
6709: LD_INT 14
6711: PUSH
6712: EMPTY
6713: LIST
6714: LIST
6715: PUSH
6716: LD_INT 1
6718: PPUSH
6719: LD_INT 2
6721: PPUSH
6722: CALL_OW 12
6726: ARRAY
6727: ST_TO_ADDR
// vc_engine := engine_combustion ;
6728: LD_ADDR_OWVAR 39
6732: PUSH
6733: LD_INT 1
6735: ST_TO_ADDR
// vc_control := control_manual ;
6736: LD_ADDR_OWVAR 38
6740: PUSH
6741: LD_INT 1
6743: ST_TO_ADDR
// vc_weapon := [ ar_double_machine_gun , ar_light_gun , ar_gun , ar_rocket_launcher , ar_gatling_gun ] [ Rand ( 1 , 5 ) ] ;
6744: LD_ADDR_OWVAR 40
6748: PUSH
6749: LD_INT 24
6751: PUSH
6752: LD_INT 23
6754: PUSH
6755: LD_INT 27
6757: PUSH
6758: LD_INT 28
6760: PUSH
6761: LD_INT 25
6763: PUSH
6764: EMPTY
6765: LIST
6766: LIST
6767: LIST
6768: LIST
6769: LIST
6770: PUSH
6771: LD_INT 1
6773: PPUSH
6774: LD_INT 5
6776: PPUSH
6777: CALL_OW 12
6781: ARRAY
6782: ST_TO_ADDR
// veh := CreateVehicle ;
6783: LD_ADDR_VAR 0 5
6787: PUSH
6788: CALL_OW 45
6792: ST_TO_ADDR
// PlaceUnitArea ( veh , ar2 , false ) ;
6793: LD_VAR 0 5
6797: PPUSH
6798: LD_INT 17
6800: PPUSH
6801: LD_INT 0
6803: PPUSH
6804: CALL_OW 49
// PrepareHuman ( false , 1 , skill ) ;
6808: LD_INT 0
6810: PPUSH
6811: LD_INT 1
6813: PPUSH
6814: LD_VAR 0 6
6818: PPUSH
6819: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
6823: CALL_OW 44
6827: PPUSH
6828: LD_VAR 0 5
6832: PPUSH
6833: CALL_OW 52
// ComMoveXY ( veh , 89 , 40 ) ;
6837: LD_VAR 0 5
6841: PPUSH
6842: LD_INT 89
6844: PPUSH
6845: LD_INT 40
6847: PPUSH
6848: CALL_OW 111
// Wait ( 0 0$02 ) ;
6852: LD_INT 70
6854: PPUSH
6855: CALL_OW 67
// end ;
6859: GO 6698
6861: POP
6862: POP
// end ; 3 :
6863: GO 7229
6865: LD_INT 3
6867: DOUBLE
6868: EQUAL
6869: IFTRUE 6873
6871: GO 7228
6873: POP
// begin for i = 1 to [ 3 , 4 , 5 ] [ Difficulty ] + ( tick div 15 15$00 ) do
6874: LD_ADDR_VAR 0 3
6878: PUSH
6879: DOUBLE
6880: LD_INT 1
6882: DEC
6883: ST_TO_ADDR
6884: LD_INT 3
6886: PUSH
6887: LD_INT 4
6889: PUSH
6890: LD_INT 5
6892: PUSH
6893: EMPTY
6894: LIST
6895: LIST
6896: LIST
6897: PUSH
6898: LD_OWVAR 67
6902: ARRAY
6903: PUSH
6904: LD_OWVAR 1
6908: PUSH
6909: LD_INT 31500
6911: DIV
6912: PLUS
6913: PUSH
6914: FOR_TO
6915: IFFALSE 7023
// begin PrepareHuman ( false , [ class_soldier , class_mortar ] [ Rand ( 1 , 2 ) ] , skill ) ;
6917: LD_INT 0
6919: PPUSH
6920: LD_INT 1
6922: PUSH
6923: LD_INT 8
6925: PUSH
6926: EMPTY
6927: LIST
6928: LIST
6929: PUSH
6930: LD_INT 1
6932: PPUSH
6933: LD_INT 2
6935: PPUSH
6936: CALL_OW 12
6940: ARRAY
6941: PPUSH
6942: LD_VAR 0 6
6946: PPUSH
6947: CALL_OW 380
// un := CreateHuman ;
6951: LD_ADDR_VAR 0 4
6955: PUSH
6956: CALL_OW 44
6960: ST_TO_ADDR
// PlaceUnitArea ( un , ar2 , false ) ;
6961: LD_VAR 0 4
6965: PPUSH
6966: LD_INT 17
6968: PPUSH
6969: LD_INT 0
6971: PPUSH
6972: CALL_OW 49
// ar_force := Insert ( ar_force , 1 , un ) ;
6976: LD_ADDR_EXP 11
6980: PUSH
6981: LD_EXP 11
6985: PPUSH
6986: LD_INT 1
6988: PPUSH
6989: LD_VAR 0 4
6993: PPUSH
6994: CALL_OW 2
6998: ST_TO_ADDR
// ComMoveXY ( un , 17 , 9 ) ;
6999: LD_VAR 0 4
7003: PPUSH
7004: LD_INT 17
7006: PPUSH
7007: LD_INT 9
7009: PPUSH
7010: CALL_OW 111
// Wait ( 0 0$01 ) ;
7014: LD_INT 35
7016: PPUSH
7017: CALL_OW 67
// end ;
7021: GO 6914
7023: POP
7024: POP
// for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
7025: LD_ADDR_VAR 0 3
7029: PUSH
7030: DOUBLE
7031: LD_INT 1
7033: DEC
7034: ST_TO_ADDR
7035: LD_INT 4
7037: PUSH
7038: LD_INT 5
7040: PUSH
7041: LD_INT 6
7043: PUSH
7044: EMPTY
7045: LIST
7046: LIST
7047: LIST
7048: PUSH
7049: LD_OWVAR 67
7053: ARRAY
7054: PUSH
7055: FOR_TO
7056: IFFALSE 7224
// begin vc_chassis := ar_half_tracked ;
7058: LD_ADDR_OWVAR 37
7062: PUSH
7063: LD_INT 14
7065: ST_TO_ADDR
// vc_engine := engine_combustion ;
7066: LD_ADDR_OWVAR 39
7070: PUSH
7071: LD_INT 1
7073: ST_TO_ADDR
// vc_control := control_manual ;
7074: LD_ADDR_OWVAR 38
7078: PUSH
7079: LD_INT 1
7081: ST_TO_ADDR
// vc_weapon := [ ar_gatling_gun , ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_heavy_mortar ] [ Rand ( 1 , 5 ) ] ;
7082: LD_ADDR_OWVAR 40
7086: PUSH
7087: LD_INT 25
7089: PUSH
7090: LD_INT 27
7092: PUSH
7093: LD_INT 28
7095: PUSH
7096: LD_INT 26
7098: PUSH
7099: LD_EXP 31
7103: PUSH
7104: EMPTY
7105: LIST
7106: LIST
7107: LIST
7108: LIST
7109: LIST
7110: PUSH
7111: LD_INT 1
7113: PPUSH
7114: LD_INT 5
7116: PPUSH
7117: CALL_OW 12
7121: ARRAY
7122: ST_TO_ADDR
// veh := CreateVehicle ;
7123: LD_ADDR_VAR 0 5
7127: PUSH
7128: CALL_OW 45
7132: ST_TO_ADDR
// PlaceUnitArea ( veh , ar1 , false ) ;
7133: LD_VAR 0 5
7137: PPUSH
7138: LD_INT 16
7140: PPUSH
7141: LD_INT 0
7143: PPUSH
7144: CALL_OW 49
// PrepareHuman ( false , 3 , skill ) ;
7148: LD_INT 0
7150: PPUSH
7151: LD_INT 3
7153: PPUSH
7154: LD_VAR 0 6
7158: PPUSH
7159: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
7163: CALL_OW 44
7167: PPUSH
7168: LD_VAR 0 5
7172: PPUSH
7173: CALL_OW 52
// ar_force := Insert ( ar_force , 1 , veh ) ;
7177: LD_ADDR_EXP 11
7181: PUSH
7182: LD_EXP 11
7186: PPUSH
7187: LD_INT 1
7189: PPUSH
7190: LD_VAR 0 5
7194: PPUSH
7195: CALL_OW 2
7199: ST_TO_ADDR
// ComMoveXY ( veh , 125 , 31 ) ;
7200: LD_VAR 0 5
7204: PPUSH
7205: LD_INT 125
7207: PPUSH
7208: LD_INT 31
7210: PPUSH
7211: CALL_OW 111
// Wait ( 0 0$02 ) ;
7215: LD_INT 70
7217: PPUSH
7218: CALL_OW 67
// end ;
7222: GO 7055
7224: POP
7225: POP
// end ; end ;
7226: GO 7229
7228: POP
// end ;
7229: LD_VAR 0 2
7233: RET
// export function PrepareHovercrafts ; var i , un , areas , skill ; begin
7234: LD_INT 0
7236: PPUSH
7237: PPUSH
7238: PPUSH
7239: PPUSH
7240: PPUSH
// areas := [ river1 , river2 ] ;
7241: LD_ADDR_VAR 0 4
7245: PUSH
7246: LD_INT 14
7248: PUSH
7249: LD_INT 15
7251: PUSH
7252: EMPTY
7253: LIST
7254: LIST
7255: ST_TO_ADDR
// skill := [ 5 , 6 , 7 ] [ Difficulty ] ;
7256: LD_ADDR_VAR 0 5
7260: PUSH
7261: LD_INT 5
7263: PUSH
7264: LD_INT 6
7266: PUSH
7267: LD_INT 7
7269: PUSH
7270: EMPTY
7271: LIST
7272: LIST
7273: LIST
7274: PUSH
7275: LD_OWVAR 67
7279: ARRAY
7280: ST_TO_ADDR
// uc_side := 2 ;
7281: LD_ADDR_OWVAR 20
7285: PUSH
7286: LD_INT 2
7288: ST_TO_ADDR
// uc_nation := 2 ;
7289: LD_ADDR_OWVAR 21
7293: PUSH
7294: LD_INT 2
7296: ST_TO_ADDR
// hc_name :=  ;
7297: LD_ADDR_OWVAR 26
7301: PUSH
7302: LD_STRING 
7304: ST_TO_ADDR
// hc_gallery :=  ;
7305: LD_ADDR_OWVAR 33
7309: PUSH
7310: LD_STRING 
7312: ST_TO_ADDR
// for i = 1 to [ 1 , 2 , 2 ] [ Difficulty ] do
7313: LD_ADDR_VAR 0 2
7317: PUSH
7318: DOUBLE
7319: LD_INT 1
7321: DEC
7322: ST_TO_ADDR
7323: LD_INT 1
7325: PUSH
7326: LD_INT 2
7328: PUSH
7329: LD_INT 2
7331: PUSH
7332: EMPTY
7333: LIST
7334: LIST
7335: LIST
7336: PUSH
7337: LD_OWVAR 67
7341: ARRAY
7342: PUSH
7343: FOR_TO
7344: IFFALSE 7480
// begin vc_chassis := ar_hovercraft ;
7346: LD_ADDR_OWVAR 37
7350: PUSH
7351: LD_INT 11
7353: ST_TO_ADDR
// vc_engine := engine_solar ;
7354: LD_ADDR_OWVAR 39
7358: PUSH
7359: LD_INT 2
7361: ST_TO_ADDR
// vc_control := control_manual ;
7362: LD_ADDR_OWVAR 38
7366: PUSH
7367: LD_INT 1
7369: ST_TO_ADDR
// vc_weapon := ar_double_machine_gun ;
7370: LD_ADDR_OWVAR 40
7374: PUSH
7375: LD_INT 24
7377: ST_TO_ADDR
// vc_fuel_battery := 100 ;
7378: LD_ADDR_OWVAR 41
7382: PUSH
7383: LD_INT 100
7385: ST_TO_ADDR
// un := CreateVehicle ;
7386: LD_ADDR_VAR 0 3
7390: PUSH
7391: CALL_OW 45
7395: ST_TO_ADDR
// PlaceUnitXYR ( un , 121 , 69 , 4 , false ) ;
7396: LD_VAR 0 3
7400: PPUSH
7401: LD_INT 121
7403: PPUSH
7404: LD_INT 69
7406: PPUSH
7407: LD_INT 4
7409: PPUSH
7410: LD_INT 0
7412: PPUSH
7413: CALL_OW 50
// PrepareHuman ( false , 3 , skill ) ;
7417: LD_INT 0
7419: PPUSH
7420: LD_INT 3
7422: PPUSH
7423: LD_VAR 0 5
7427: PPUSH
7428: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
7432: CALL_OW 44
7436: PPUSH
7437: LD_VAR 0 3
7441: PPUSH
7442: CALL_OW 52
// riv := Insert ( riv , 1 , [ un , i ] ) ;
7446: LD_ADDR_EXP 9
7450: PUSH
7451: LD_EXP 9
7455: PPUSH
7456: LD_INT 1
7458: PPUSH
7459: LD_VAR 0 3
7463: PUSH
7464: LD_VAR 0 2
7468: PUSH
7469: EMPTY
7470: LIST
7471: LIST
7472: PPUSH
7473: CALL_OW 2
7477: ST_TO_ADDR
// end ;
7478: GO 7343
7480: POP
7481: POP
// end ;
7482: LD_VAR 0 1
7486: RET
// every 0 0$01 trigger riv do var i , c ;
7487: LD_EXP 9
7491: IFFALSE 7926
7493: GO 7495
7495: DISABLE
7496: LD_INT 0
7498: PPUSH
7499: PPUSH
// begin enable ;
7500: ENABLE
// for i = riv downto 1 do
7501: LD_ADDR_VAR 0 1
7505: PUSH
7506: DOUBLE
7507: LD_EXP 9
7511: INC
7512: ST_TO_ADDR
7513: LD_INT 1
7515: PUSH
7516: FOR_DOWNTO
7517: IFFALSE 7924
// begin if not riv [ i ] [ 1 ] then
7519: LD_EXP 9
7523: PUSH
7524: LD_VAR 0 1
7528: ARRAY
7529: PUSH
7530: LD_INT 1
7532: ARRAY
7533: NOT
7534: IFFALSE 7556
// begin riv := Delete ( riv , 1 ) ;
7536: LD_ADDR_EXP 9
7540: PUSH
7541: LD_EXP 9
7545: PPUSH
7546: LD_INT 1
7548: PPUSH
7549: CALL_OW 3
7553: ST_TO_ADDR
// break ;
7554: GO 7924
// end ; if not HasTask ( riv [ i ] [ 1 ] ) then
7556: LD_EXP 9
7560: PUSH
7561: LD_VAR 0 1
7565: ARRAY
7566: PUSH
7567: LD_INT 1
7569: ARRAY
7570: PPUSH
7571: CALL_OW 314
7575: NOT
7576: IFFALSE 7644
// begin if riv [ i ] [ 2 ] = 1 then
7578: LD_EXP 9
7582: PUSH
7583: LD_VAR 0 1
7587: ARRAY
7588: PUSH
7589: LD_INT 2
7591: ARRAY
7592: PUSH
7593: LD_INT 1
7595: EQUAL
7596: IFFALSE 7608
// c := 2 else
7598: LD_ADDR_VAR 0 2
7602: PUSH
7603: LD_INT 2
7605: ST_TO_ADDR
7606: GO 7616
// c := 1 ;
7608: LD_ADDR_VAR 0 2
7612: PUSH
7613: LD_INT 1
7615: ST_TO_ADDR
// riv := Replace2 ( riv , i , 2 , c ) ;
7616: LD_ADDR_EXP 9
7620: PUSH
7621: LD_EXP 9
7625: PPUSH
7626: LD_VAR 0 1
7630: PPUSH
7631: LD_INT 2
7633: PPUSH
7634: LD_VAR 0 2
7638: PPUSH
7639: CALL 10308 0 4
7643: ST_TO_ADDR
// end ; if not IsInArea ( riv [ i ] [ 1 ] , [ river1 , river2 ] [ riv [ i ] [ 2 ] ] ) then
7644: LD_EXP 9
7648: PUSH
7649: LD_VAR 0 1
7653: ARRAY
7654: PUSH
7655: LD_INT 1
7657: ARRAY
7658: PPUSH
7659: LD_INT 14
7661: PUSH
7662: LD_INT 15
7664: PUSH
7665: EMPTY
7666: LIST
7667: LIST
7668: PUSH
7669: LD_EXP 9
7673: PUSH
7674: LD_VAR 0 1
7678: ARRAY
7679: PUSH
7680: LD_INT 2
7682: ARRAY
7683: ARRAY
7684: PPUSH
7685: CALL_OW 308
7689: NOT
7690: IFFALSE 7922
// begin if GetFuel ( riv [ i ] [ 1 ] ) < 50 then
7692: LD_EXP 9
7696: PUSH
7697: LD_VAR 0 1
7701: ARRAY
7702: PUSH
7703: LD_INT 1
7705: ARRAY
7706: PPUSH
7707: CALL_OW 261
7711: PUSH
7712: LD_INT 50
7714: LESS
7715: IFFALSE 7739
// SetFuel ( riv [ i ] [ 1 ] , 67 ) ;
7717: LD_EXP 9
7721: PUSH
7722: LD_VAR 0 1
7726: ARRAY
7727: PUSH
7728: LD_INT 1
7730: ARRAY
7731: PPUSH
7732: LD_INT 67
7734: PPUSH
7735: CALL_OW 240
// if GetDistUnits ( riv [ i ] [ 1 ] , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 3 ] ) , riv [ i ] [ 1 ] ) ) < 9 then
7739: LD_EXP 9
7743: PUSH
7744: LD_VAR 0 1
7748: ARRAY
7749: PUSH
7750: LD_INT 1
7752: ARRAY
7753: PPUSH
7754: LD_INT 22
7756: PUSH
7757: LD_INT 3
7759: PUSH
7760: EMPTY
7761: LIST
7762: LIST
7763: PPUSH
7764: CALL_OW 69
7768: PPUSH
7769: LD_EXP 9
7773: PUSH
7774: LD_VAR 0 1
7778: ARRAY
7779: PUSH
7780: LD_INT 1
7782: ARRAY
7783: PPUSH
7784: CALL_OW 74
7788: PPUSH
7789: CALL_OW 296
7793: PUSH
7794: LD_INT 9
7796: LESS
7797: IFFALSE 7855
// ComAttackUnit ( riv [ i ] [ 1 ] , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 3 ] ) , riv [ i ] [ 1 ] ) ) else
7799: LD_EXP 9
7803: PUSH
7804: LD_VAR 0 1
7808: ARRAY
7809: PUSH
7810: LD_INT 1
7812: ARRAY
7813: PPUSH
7814: LD_INT 22
7816: PUSH
7817: LD_INT 3
7819: PUSH
7820: EMPTY
7821: LIST
7822: LIST
7823: PPUSH
7824: CALL_OW 69
7828: PPUSH
7829: LD_EXP 9
7833: PUSH
7834: LD_VAR 0 1
7838: ARRAY
7839: PUSH
7840: LD_INT 1
7842: ARRAY
7843: PPUSH
7844: CALL_OW 74
7848: PPUSH
7849: CALL_OW 115
7853: GO 7922
// begin ComMoveToArea ( riv [ i ] [ 1 ] , [ river1 , river2 ] [ riv [ i ] [ 2 ] ] ) ;
7855: LD_EXP 9
7859: PUSH
7860: LD_VAR 0 1
7864: ARRAY
7865: PUSH
7866: LD_INT 1
7868: ARRAY
7869: PPUSH
7870: LD_INT 14
7872: PUSH
7873: LD_INT 15
7875: PUSH
7876: EMPTY
7877: LIST
7878: LIST
7879: PUSH
7880: LD_EXP 9
7884: PUSH
7885: LD_VAR 0 1
7889: ARRAY
7890: PUSH
7891: LD_INT 2
7893: ARRAY
7894: ARRAY
7895: PPUSH
7896: CALL_OW 113
// AddComWait ( riv [ i ] [ 1 ] , 0 0$10 ) ;
7900: LD_EXP 9
7904: PUSH
7905: LD_VAR 0 1
7909: ARRAY
7910: PUSH
7911: LD_INT 1
7913: ARRAY
7914: PPUSH
7915: LD_INT 350
7917: PPUSH
7918: CALL_OW 202
// end ; end ; end ;
7922: GO 7516
7924: POP
7925: POP
// end ;
7926: PPOPN 2
7928: END
// every 10 10$00 trigger convoy_start do var i , un ;
7929: LD_EXP 7
7933: IFFALSE 8054
7935: GO 7937
7937: DISABLE
7938: LD_INT 0
7940: PPUSH
7941: PPUSH
// begin enable ;
7942: ENABLE
// for i = 1 to 2 do
7943: LD_ADDR_VAR 0 1
7947: PUSH
7948: DOUBLE
7949: LD_INT 1
7951: DEC
7952: ST_TO_ADDR
7953: LD_INT 2
7955: PUSH
7956: FOR_TO
7957: IFFALSE 8052
// begin uc_side := 2 ;
7959: LD_ADDR_OWVAR 20
7963: PUSH
7964: LD_INT 2
7966: ST_TO_ADDR
// uc_nation := 2 ;
7967: LD_ADDR_OWVAR 21
7971: PUSH
7972: LD_INT 2
7974: ST_TO_ADDR
// PrepareHuman ( false , 1 , 4 ) ;
7975: LD_INT 0
7977: PPUSH
7978: LD_INT 1
7980: PPUSH
7981: LD_INT 4
7983: PPUSH
7984: CALL_OW 380
// un := CreateHuman ;
7988: LD_ADDR_VAR 0 2
7992: PUSH
7993: CALL_OW 44
7997: ST_TO_ADDR
// PlaceUnitXY ( un , 10 , 2 , false ) ;
7998: LD_VAR 0 2
8002: PPUSH
8003: LD_INT 10
8005: PPUSH
8006: LD_INT 2
8008: PPUSH
8009: LD_INT 0
8011: PPUSH
8012: CALL_OW 48
// ComMoveXY ( un , 24 , 36 ) ;
8016: LD_VAR 0 2
8020: PPUSH
8021: LD_INT 24
8023: PPUSH
8024: LD_INT 36
8026: PPUSH
8027: CALL_OW 111
// AddComMoveToArea ( un , conv_end ) ;
8031: LD_VAR 0 2
8035: PPUSH
8036: LD_INT 9
8038: PPUSH
8039: CALL_OW 173
// Wait ( 0 0$02 ) ;
8043: LD_INT 70
8045: PPUSH
8046: CALL_OW 67
// end ;
8050: GO 7956
8052: POP
8053: POP
// end ;
8054: PPOPN 2
8056: END
// every 0 0$01 trigger FilterAllUnits ( [ f_side , 2 ] ) do var i , rest ;
8057: LD_INT 22
8059: PUSH
8060: LD_INT 2
8062: PUSH
8063: EMPTY
8064: LIST
8065: LIST
8066: PPUSH
8067: CALL_OW 69
8071: IFFALSE 8383
8073: GO 8075
8075: DISABLE
8076: LD_INT 0
8078: PPUSH
8079: PPUSH
// begin enable ;
8080: ENABLE
// rest := FilterAllUnits ( [ f_side , 2 ] ) diff ar_force ;
8081: LD_ADDR_VAR 0 2
8085: PUSH
8086: LD_INT 22
8088: PUSH
8089: LD_INT 2
8091: PUSH
8092: EMPTY
8093: LIST
8094: LIST
8095: PPUSH
8096: CALL_OW 69
8100: PUSH
8101: LD_EXP 11
8105: DIFF
8106: ST_TO_ADDR
// if rest then
8107: LD_VAR 0 2
8111: IFFALSE 8183
// for i in rest do
8113: LD_ADDR_VAR 0 1
8117: PUSH
8118: LD_VAR 0 2
8122: PUSH
8123: FOR_IN
8124: IFFALSE 8181
// if GetClass ( i ) = 3 then
8126: LD_VAR 0 1
8130: PPUSH
8131: CALL_OW 257
8135: PUSH
8136: LD_INT 3
8138: EQUAL
8139: IFFALSE 8179
// begin if not IsInArea ( i , ar2 ) then
8141: LD_VAR 0 1
8145: PPUSH
8146: LD_INT 17
8148: PPUSH
8149: CALL_OW 308
8153: NOT
8154: IFFALSE 8170
// ComMoveToArea ( i , ar2 ) else
8156: LD_VAR 0 1
8160: PPUSH
8161: LD_INT 17
8163: PPUSH
8164: CALL_OW 113
8168: GO 8179
// RemoveUnit ( i ) ;
8170: LD_VAR 0 1
8174: PPUSH
8175: CALL_OW 64
// end ;
8179: GO 8123
8181: POP
8182: POP
// if ar_force then
8183: LD_EXP 11
8187: IFFALSE 8383
// begin if ar_force > 15 then
8189: LD_EXP 11
8193: PUSH
8194: LD_INT 15
8196: GREATER
8197: IFFALSE 8214
// ComAgressiveMove ( ar_force , 58 , 51 ) ;
8199: LD_EXP 11
8203: PPUSH
8204: LD_INT 58
8206: PPUSH
8207: LD_INT 51
8209: PPUSH
8210: CALL_OW 114
// for i in ar_force do
8214: LD_ADDR_VAR 0 1
8218: PUSH
8219: LD_EXP 11
8223: PUSH
8224: FOR_IN
8225: IFFALSE 8381
// begin if GetClass ( i ) = class_soldier then
8227: LD_VAR 0 1
8231: PPUSH
8232: CALL_OW 257
8236: PUSH
8237: LD_INT 1
8239: EQUAL
8240: IFFALSE 8332
// if FindTarget ( i ) in FilterAllUnits ( [ f_type , unit_building ] ) then
8242: LD_VAR 0 1
8246: PPUSH
8247: CALL 10565 0 1
8251: PUSH
8252: LD_INT 21
8254: PUSH
8255: LD_INT 3
8257: PUSH
8258: EMPTY
8259: LIST
8260: LIST
8261: PPUSH
8262: CALL_OW 69
8266: IN
8267: IFFALSE 8313
// ComPlaceDelayedCharge ( i , GetX ( FindTarget ( i ) ) , GetY ( FindTarget ( i ) ) , 0 ) else
8269: LD_VAR 0 1
8273: PPUSH
8274: LD_VAR 0 1
8278: PPUSH
8279: CALL 10565 0 1
8283: PPUSH
8284: CALL_OW 250
8288: PPUSH
8289: LD_VAR 0 1
8293: PPUSH
8294: CALL 10565 0 1
8298: PPUSH
8299: CALL_OW 251
8303: PPUSH
8304: LD_INT 0
8306: PPUSH
8307: CALL_OW 132
8311: GO 8332
// ComAttackUnit ( i , FindTarget ( i ) ) ;
8313: LD_VAR 0 1
8317: PPUSH
8318: LD_VAR 0 1
8322: PPUSH
8323: CALL 10565 0 1
8327: PPUSH
8328: CALL_OW 115
// if not GetClass ( i ) = 1 and not HasTask ( i ) then
8332: LD_VAR 0 1
8336: PPUSH
8337: CALL_OW 257
8341: PUSH
8342: LD_INT 1
8344: EQUAL
8345: NOT
8346: PUSH
8347: LD_VAR 0 1
8351: PPUSH
8352: CALL_OW 314
8356: NOT
8357: AND
8358: IFFALSE 8379
// ComAttackUnit ( i , FindTarget ( i ) ) ;
8360: LD_VAR 0 1
8364: PPUSH
8365: LD_VAR 0 1
8369: PPUSH
8370: CALL 10565 0 1
8374: PPUSH
8375: CALL_OW 115
// end ;
8379: GO 8224
8381: POP
8382: POP
// end ; end ;
8383: PPOPN 2
8385: END
// every 0 0$01 trigger FilterUnitsInArea ( conv_end , [ f_side , 2 ] ) do
8386: LD_INT 9
8388: PPUSH
8389: LD_INT 22
8391: PUSH
8392: LD_INT 2
8394: PUSH
8395: EMPTY
8396: LIST
8397: LIST
8398: PPUSH
8399: CALL_OW 70
8403: IFFALSE 8416
8405: GO 8407
8407: DISABLE
// medal2 := false ; end_of_file
8408: LD_ADDR_EXP 4
8412: PUSH
8413: LD_INT 0
8415: ST_TO_ADDR
8416: END
// export function Action ; begin
8417: LD_INT 0
8419: PPUSH
// case Query ( info ) of 1 :
8420: LD_STRING info
8422: PPUSH
8423: CALL_OW 97
8427: PUSH
8428: LD_INT 1
8430: DOUBLE
8431: EQUAL
8432: IFTRUE 8436
8434: GO 8439
8436: POP
// ; end ;
8437: GO 8440
8439: POP
// ChangeMissionObjectives ( PM_1 ) ;
8440: LD_STRING PM_1
8442: PPUSH
8443: CALL_OW 337
// SaveForQuickRestart ;
8447: CALL_OW 22
// end ;
8451: LD_VAR 0 1
8455: RET
// every 0 0$01 trigger GetSide ( us_depot ) = 3 do
8456: LD_INT 50
8458: PPUSH
8459: CALL_OW 255
8463: PUSH
8464: LD_INT 3
8466: EQUAL
8467: IFFALSE 8748
8469: GO 8471
8471: DISABLE
// begin Say ( Stolypin , DPM_S1 ) ;
8472: LD_EXP 16
8476: PPUSH
8477: LD_STRING DPM_S1
8479: PPUSH
8480: CALL_OW 88
// SayRadio ( Popov , DPM_P1 ) ;
8484: LD_EXP 17
8488: PPUSH
8489: LD_STRING DPM_P1
8491: PPUSH
8492: CALL_OW 94
// Say ( Stolypin , DPM_S2 ) ;
8496: LD_EXP 16
8500: PPUSH
8501: LD_STRING DPM_S2
8503: PPUSH
8504: CALL_OW 88
// SaveForQuickRestart ;
8508: CALL_OW 22
// ChangeMissionObjectives ( PM_2 ) ;
8512: LD_STRING PM_2
8514: PPUSH
8515: CALL_OW 337
// Wait ( 2 2$30 ) ;
8519: LD_INT 5250
8521: PPUSH
8522: CALL_OW 67
// CenterOnXY ( 117 , 4 ) ;
8526: LD_INT 117
8528: PPUSH
8529: LD_INT 4
8531: PPUSH
8532: CALL_OW 84
// Convoy ( 1 ) ;
8536: LD_INT 1
8538: PPUSH
8539: CALL 920 0 1
// Wait ( 0 0$30 ) ;
8543: LD_INT 1050
8545: PPUSH
8546: CALL_OW 67
// Convoy ( 2 ) ;
8550: LD_INT 2
8552: PPUSH
8553: CALL 920 0 1
// Wait ( 1 1$30 ) ;
8557: LD_INT 3150
8559: PPUSH
8560: CALL_OW 67
// Convoy ( 3 ) ;
8564: LD_INT 3
8566: PPUSH
8567: CALL 920 0 1
// Wait ( 4 4$00 ) ;
8571: LD_INT 8400
8573: PPUSH
8574: CALL_OW 67
// convoy_start := true ;
8578: LD_ADDR_EXP 7
8582: PUSH
8583: LD_INT 1
8585: ST_TO_ADDR
// PrepareArabian ;
8586: CALL 6303 0 0
// PrepareAttack ( 1 ) ;
8590: LD_INT 1
8592: PPUSH
8593: CALL 6376 0 1
// while ( convoy_start ) do
8597: LD_EXP 7
8601: IFFALSE 8748
// begin Wait ( Rand ( 2 2$00 , 3 3$30 ) ) ;
8603: LD_INT 4200
8605: PPUSH
8606: LD_INT 7350
8608: PPUSH
8609: CALL_OW 12
8613: PPUSH
8614: CALL_OW 67
// if FilterAllUnits ( [ f_side , 2 ] ) < 20 then
8618: LD_INT 22
8620: PUSH
8621: LD_INT 2
8623: PUSH
8624: EMPTY
8625: LIST
8626: LIST
8627: PPUSH
8628: CALL_OW 69
8632: PUSH
8633: LD_INT 20
8635: LESS
8636: IFFALSE 8653
// PrepareAttack ( Rand ( 1 , 2 ) ) ;
8638: LD_INT 1
8640: PPUSH
8641: LD_INT 2
8643: PPUSH
8644: CALL_OW 12
8648: PPUSH
8649: CALL 6376 0 1
// Convoy ( Rand ( 1 , 5 ) ) ;
8653: LD_INT 1
8655: PPUSH
8656: LD_INT 5
8658: PPUSH
8659: CALL_OW 12
8663: PPUSH
8664: CALL 920 0 1
// conv_counter := conv_counter + 1 ;
8668: LD_ADDR_EXP 13
8672: PUSH
8673: LD_EXP 13
8677: PUSH
8678: LD_INT 1
8680: PLUS
8681: ST_TO_ADDR
// if conv_counter mod [ 4 , 3 , 3 ] [ Difficulty ] = 0 then
8682: LD_EXP 13
8686: PUSH
8687: LD_INT 4
8689: PUSH
8690: LD_INT 3
8692: PUSH
8693: LD_INT 3
8695: PUSH
8696: EMPTY
8697: LIST
8698: LIST
8699: LIST
8700: PUSH
8701: LD_OWVAR 67
8705: ARRAY
8706: MOD
8707: PUSH
8708: LD_INT 0
8710: EQUAL
8711: IFFALSE 8746
// begin Wait ( 1 1$20 ) ;
8713: LD_INT 2800
8715: PPUSH
8716: CALL_OW 67
// SayRadio ( Farmer , DPM_F2 ) ;
8720: LD_EXP 25
8724: PPUSH
8725: LD_STRING DPM_F2
8727: PPUSH
8728: CALL_OW 94
// PrepareAttack ( 3 ) ;
8732: LD_INT 3
8734: PPUSH
8735: CALL 6376 0 1
// Wait ( 3 3$00 ) ;
8739: LD_INT 6300
8741: PPUSH
8742: CALL_OW 67
// end ; end ;
8746: GO 8597
// end ;
8748: END
// every 0 0$1 trigger safeCounter > 30 do
8749: LD_EXP 15
8753: PUSH
8754: LD_INT 30
8756: GREATER
8757: IFFALSE 8769
8759: GO 8761
8761: DISABLE
// SetAchievement ( ACH_SAFE ) ;
8762: LD_STRING ACH_SAFE
8764: PPUSH
8765: CALL_OW 543
8769: END
// every 1 1$30 trigger conv_counter mod 3 = 0 and FilterAllUnits ( [ f_side , 2 ] ) = 0 do
8770: LD_EXP 13
8774: PUSH
8775: LD_INT 3
8777: MOD
8778: PUSH
8779: LD_INT 0
8781: EQUAL
8782: PUSH
8783: LD_INT 22
8785: PUSH
8786: LD_INT 2
8788: PUSH
8789: EMPTY
8790: LIST
8791: LIST
8792: PPUSH
8793: CALL_OW 69
8797: PUSH
8798: LD_INT 0
8800: EQUAL
8801: AND
8802: IFFALSE 8819
8804: GO 8806
8806: DISABLE
// SayRadio ( Farmer , DPM_F3 ) ;
8807: LD_EXP 25
8811: PPUSH
8812: LD_STRING DPM_F3
8814: PPUSH
8815: CALL_OW 94
8819: END
// every 1 1$30 trigger conv_counter mod 5 = 0 and FilterAllUnits ( [ f_side , 2 ] ) = 0 do
8820: LD_EXP 13
8824: PUSH
8825: LD_INT 5
8827: MOD
8828: PUSH
8829: LD_INT 0
8831: EQUAL
8832: PUSH
8833: LD_INT 22
8835: PUSH
8836: LD_INT 2
8838: PUSH
8839: EMPTY
8840: LIST
8841: LIST
8842: PPUSH
8843: CALL_OW 69
8847: PUSH
8848: LD_INT 0
8850: EQUAL
8851: AND
8852: IFFALSE 8869
8854: GO 8856
8856: DISABLE
// SayRadio ( Farmer , DPM_F4 ) ;
8857: LD_EXP 25
8861: PPUSH
8862: LD_STRING DPM_F4
8864: PPUSH
8865: CALL_OW 94
8869: END
// every 0 0$10 trigger convoy_start and conv_counter >= [ 8 , 9 , 10 ] [ Difficulty ] and FilterAllUnits ( [ f_side , 6 ] ) = 0 do
8870: LD_EXP 7
8874: PUSH
8875: LD_EXP 13
8879: PUSH
8880: LD_INT 8
8882: PUSH
8883: LD_INT 9
8885: PUSH
8886: LD_INT 10
8888: PUSH
8889: EMPTY
8890: LIST
8891: LIST
8892: LIST
8893: PUSH
8894: LD_OWVAR 67
8898: ARRAY
8899: GREATEREQUAL
8900: AND
8901: PUSH
8902: LD_INT 22
8904: PUSH
8905: LD_INT 6
8907: PUSH
8908: EMPTY
8909: LIST
8910: LIST
8911: PPUSH
8912: CALL_OW 69
8916: PUSH
8917: LD_INT 0
8919: EQUAL
8920: AND
8921: IFFALSE 9020
8923: GO 8925
8925: DISABLE
// begin SayRadio ( Popov , DPM_PEnd ) ;
8926: LD_EXP 17
8930: PPUSH
8931: LD_STRING DPM_PEnd
8933: PPUSH
8934: CALL_OW 94
// AddMedal ( med1 , medal1 ) ;
8938: LD_STRING med1
8940: PPUSH
8941: LD_EXP 3
8945: PPUSH
8946: CALL_OW 101
// AddMedal ( med2 , medal2 ) ;
8950: LD_STRING med2
8952: PPUSH
8953: LD_EXP 4
8957: PPUSH
8958: CALL_OW 101
// if dest_counter >= [ 15 , 10 , 7 ] [ Difficulty ] then
8962: LD_EXP 8
8966: PUSH
8967: LD_INT 15
8969: PUSH
8970: LD_INT 10
8972: PUSH
8973: LD_INT 7
8975: PUSH
8976: EMPTY
8977: LIST
8978: LIST
8979: LIST
8980: PUSH
8981: LD_OWVAR 67
8985: ARRAY
8986: GREATEREQUAL
8987: IFFALSE 8997
// medal3 := false ;
8989: LD_ADDR_EXP 5
8993: PUSH
8994: LD_INT 0
8996: ST_TO_ADDR
// AddMedal ( med3 , medal3 ) ;
8997: LD_STRING med3
8999: PPUSH
9000: LD_EXP 5
9004: PPUSH
9005: CALL_OW 101
// GiveMedals ( MAIN ) ;
9009: LD_STRING MAIN
9011: PPUSH
9012: CALL_OW 102
// YouWin ;
9016: CALL_OW 103
// end ;
9020: END
// every 4 4$10 trigger convoy_start do var i ;
9021: LD_EXP 7
9025: IFFALSE 9391
9027: GO 9029
9029: DISABLE
9030: LD_INT 0
9032: PPUSH
// begin DialogueOn ;
9033: CALL_OW 6
// SayRadio ( Popov , DPM_PHelp ) ;
9037: LD_EXP 17
9041: PPUSH
9042: LD_STRING DPM_PHelp
9044: PPUSH
9045: CALL_OW 94
// DialogueOff ;
9049: CALL_OW 7
// Wait ( 0 0$30 ) ;
9053: LD_INT 1050
9055: PPUSH
9056: CALL_OW 67
// Randomize ;
9060: CALL_OW 10
// uc_side := 3 ;
9064: LD_ADDR_OWVAR 20
9068: PUSH
9069: LD_INT 3
9071: ST_TO_ADDR
// uc_nation := 3 ;
9072: LD_ADDR_OWVAR 21
9076: PUSH
9077: LD_INT 3
9079: ST_TO_ADDR
// for i = 1 to [ 5 , 4 , 3 ] [ Difficulty ] do
9080: LD_ADDR_VAR 0 1
9084: PUSH
9085: DOUBLE
9086: LD_INT 1
9088: DEC
9089: ST_TO_ADDR
9090: LD_INT 5
9092: PUSH
9093: LD_INT 4
9095: PUSH
9096: LD_INT 3
9098: PUSH
9099: EMPTY
9100: LIST
9101: LIST
9102: LIST
9103: PUSH
9104: LD_OWVAR 67
9108: ARRAY
9109: PUSH
9110: FOR_TO
9111: IFFALSE 9151
// begin PrepareHuman ( false , Rand ( 1 , 3 ) , 5 ) ;
9113: LD_INT 0
9115: PPUSH
9116: LD_INT 1
9118: PPUSH
9119: LD_INT 3
9121: PPUSH
9122: CALL_OW 12
9126: PPUSH
9127: LD_INT 5
9129: PPUSH
9130: CALL_OW 380
// PlaceUnitArea ( CreateHuman , rus_start , false ) ;
9134: CALL_OW 44
9138: PPUSH
9139: LD_INT 1
9141: PPUSH
9142: LD_INT 0
9144: PPUSH
9145: CALL_OW 49
// end ;
9149: GO 9110
9151: POP
9152: POP
// vc_chassis := ru_heavy_wheeled ;
9153: LD_ADDR_OWVAR 37
9157: PUSH
9158: LD_INT 23
9160: ST_TO_ADDR
// vc_engine := engine_combustion ;
9161: LD_ADDR_OWVAR 39
9165: PUSH
9166: LD_INT 1
9168: ST_TO_ADDR
// vc_control := control_manual ;
9169: LD_ADDR_OWVAR 38
9173: PUSH
9174: LD_INT 1
9176: ST_TO_ADDR
// vc_weapon := 89 ;
9177: LD_ADDR_OWVAR 40
9181: PUSH
9182: LD_INT 89
9184: ST_TO_ADDR
// vc_fuel_battery := 88 ;
9185: LD_ADDR_OWVAR 41
9189: PUSH
9190: LD_INT 88
9192: ST_TO_ADDR
// i := CreateVehicle ;
9193: LD_ADDR_VAR 0 1
9197: PUSH
9198: CALL_OW 45
9202: ST_TO_ADDR
// SetDir ( i , 5 ) ;
9203: LD_VAR 0 1
9207: PPUSH
9208: LD_INT 5
9210: PPUSH
9211: CALL_OW 233
// PlaceUnitXY ( i , 63 , 115 , false ) ;
9215: LD_VAR 0 1
9219: PPUSH
9220: LD_INT 63
9222: PPUSH
9223: LD_INT 115
9225: PPUSH
9226: LD_INT 0
9228: PPUSH
9229: CALL_OW 48
// SetCargo ( i , mat_cans , 200 ) ;
9233: LD_VAR 0 1
9237: PPUSH
9238: LD_INT 1
9240: PPUSH
9241: LD_INT 200
9243: PPUSH
9244: CALL_OW 290
// PrepareHuman ( false , 3 , 5 ) ;
9248: LD_INT 0
9250: PPUSH
9251: LD_INT 3
9253: PPUSH
9254: LD_INT 5
9256: PPUSH
9257: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
9261: CALL_OW 44
9265: PPUSH
9266: LD_VAR 0 1
9270: PPUSH
9271: CALL_OW 52
// DialogueOn ;
9275: CALL_OW 6
// CenterNowOnXY ( 169 , 115 ) ;
9279: LD_INT 169
9281: PPUSH
9282: LD_INT 115
9284: PPUSH
9285: CALL_OW 86
// DWait ( 0 0$01 ) ;
9289: LD_INT 35
9291: PPUSH
9292: CALL_OW 68
// CenterNowOnXY ( 63 , 115 ) ;
9296: LD_INT 63
9298: PPUSH
9299: LD_INT 115
9301: PPUSH
9302: CALL_OW 86
// DWait ( 0 0$01 ) ;
9306: LD_INT 35
9308: PPUSH
9309: CALL_OW 68
// DialogueOff ;
9313: CALL_OW 7
// ComMoveXY ( i , 57 , 53 ) ;
9317: LD_VAR 0 1
9321: PPUSH
9322: LD_INT 57
9324: PPUSH
9325: LD_INT 53
9327: PPUSH
9328: CALL_OW 111
// Wait ( Rand ( 3 3$00 , 7 7$00 ) ) ;
9332: LD_INT 6300
9334: PPUSH
9335: LD_INT 14700
9337: PPUSH
9338: CALL_OW 12
9342: PPUSH
9343: CALL_OW 67
// PlaceUnitXY ( Saseda , 86 , 112 , false ) ;
9347: LD_EXP 18
9351: PPUSH
9352: LD_INT 86
9354: PPUSH
9355: LD_INT 112
9357: PPUSH
9358: LD_INT 0
9360: PPUSH
9361: CALL_OW 48
// Wait ( 0 0$0.3 ) ;
9365: LD_INT 10
9367: PPUSH
9368: CALL_OW 67
// SayRadio ( Saseda , DPM_Sa1 ) ;
9372: LD_EXP 18
9376: PPUSH
9377: LD_STRING DPM_Sa1
9379: PPUSH
9380: CALL_OW 94
// ChangeMissionObjectives ( PM_3 ) ;
9384: LD_STRING PM_3
9386: PPUSH
9387: CALL_OW 337
// end ;
9391: PPOPN 1
9393: END
// every 0 0$01 trigger See ( 3 , Saseda ) do
9394: LD_INT 3
9396: PPUSH
9397: LD_EXP 18
9401: PPUSH
9402: CALL_OW 292
9406: IFFALSE 9455
9408: GO 9410
9410: DISABLE
// begin Say ( Saseda , DPM_Sa2 ) ;
9411: LD_EXP 18
9415: PPUSH
9416: LD_STRING DPM_Sa2
9418: PPUSH
9419: CALL_OW 88
// ChangeMissionObjectives ( PM_4 ) ;
9423: LD_STRING PM_4
9425: PPUSH
9426: CALL_OW 337
// SetTech ( tech_rocket , 3 , state_enabled ) ;
9430: LD_INT 40
9432: PPUSH
9433: LD_INT 3
9435: PPUSH
9436: LD_INT 1
9438: PPUSH
9439: CALL_OW 322
// SetSide ( Saseda , 3 ) ;
9443: LD_EXP 18
9447: PPUSH
9448: LD_INT 3
9450: PPUSH
9451: CALL_OW 235
// end ;
9455: END
// every 16 16$00 trigger not medal1 and FilterAllUnits ( [ f_side , 6 ] ) = 0 do
9456: LD_EXP 3
9460: NOT
9461: PUSH
9462: LD_INT 22
9464: PUSH
9465: LD_INT 6
9467: PUSH
9468: EMPTY
9469: LIST
9470: LIST
9471: PPUSH
9472: CALL_OW 69
9476: PUSH
9477: LD_INT 0
9479: EQUAL
9480: AND
9481: IFFALSE 9543
9483: GO 9485
9485: DISABLE
// begin DialogueOn ;
9486: CALL_OW 6
// Say ( Stolypin , DPM_S3 ) ;
9490: LD_EXP 16
9494: PPUSH
9495: LD_STRING DPM_S3
9497: PPUSH
9498: CALL_OW 88
// PlaceSeeing ( 62 , 113 , 3 , 10 ) ;
9502: LD_INT 62
9504: PPUSH
9505: LD_INT 113
9507: PPUSH
9508: LD_INT 3
9510: PPUSH
9511: LD_INT 10
9513: PPUSH
9514: CALL_OW 330
// CenterOnXY ( 62 , 113 ) ;
9518: LD_INT 62
9520: PPUSH
9521: LD_INT 113
9523: PPUSH
9524: CALL_OW 84
// dwait ( 0 0$1 ) ;
9528: LD_INT 35
9530: PPUSH
9531: CALL_OW 68
// DialogueOff ;
9535: CALL_OW 7
// CounterAttack ;
9539: CALL 5789 0 0
// end ; end_of_file
9543: END
// on LeaveBuilding ( b , h ) do begin if GetSide ( b ) = 1 then
9544: LD_VAR 0 1
9548: PPUSH
9549: CALL_OW 255
9553: PUSH
9554: LD_INT 1
9556: EQUAL
9557: IFFALSE 9593
// if not us_retreat then
9559: LD_EXP 22
9563: NOT
9564: IFFALSE 9593
// if GetClass ( h ) = 1 then
9566: LD_VAR 0 2
9570: PPUSH
9571: CALL_OW 257
9575: PUSH
9576: LD_INT 1
9578: EQUAL
9579: IFFALSE 9593
// ComEnterUnit ( h , us_arm ) ;
9581: LD_VAR 0 2
9585: PPUSH
9586: LD_INT 69
9588: PPUSH
9589: CALL_OW 120
// end ;
9593: PPOPN 2
9595: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
9596: LD_VAR 0 1
9600: PPUSH
9601: CALL 23880 0 1
// if GetSide ( un ) = 1 then
9605: LD_VAR 0 1
9609: PPUSH
9610: CALL_OW 255
9614: PUSH
9615: LD_INT 1
9617: EQUAL
9618: IFFALSE 9634
// us_count := us_count + 1 ;
9620: LD_ADDR_EXP 24
9624: PUSH
9625: LD_EXP 24
9629: PUSH
9630: LD_INT 1
9632: PLUS
9633: ST_TO_ADDR
// if un in us_force then
9634: LD_VAR 0 1
9638: PUSH
9639: LD_EXP 12
9643: IN
9644: IFFALSE 9662
// us_force := us_force diff un ;
9646: LD_ADDR_EXP 12
9650: PUSH
9651: LD_EXP 12
9655: PUSH
9656: LD_VAR 0 1
9660: DIFF
9661: ST_TO_ADDR
// if un in ar_force then
9662: LD_VAR 0 1
9666: PUSH
9667: LD_EXP 11
9671: IN
9672: IFFALSE 9690
// ar_force := ar_force diff un ;
9674: LD_ADDR_EXP 11
9678: PUSH
9679: LD_EXP 11
9683: PUSH
9684: LD_VAR 0 1
9688: DIFF
9689: ST_TO_ADDR
// if un = Stolypin then
9690: LD_VAR 0 1
9694: PUSH
9695: LD_EXP 16
9699: EQUAL
9700: IFFALSE 9709
// YouLost ( dead ) ;
9702: LD_STRING dead
9704: PPUSH
9705: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) then
9709: LD_VAR 0 1
9713: PUSH
9714: LD_INT 22
9716: PUSH
9717: LD_INT 1
9719: PUSH
9720: EMPTY
9721: LIST
9722: LIST
9723: PUSH
9724: LD_INT 30
9726: PUSH
9727: LD_INT 0
9729: PUSH
9730: EMPTY
9731: LIST
9732: LIST
9733: PUSH
9734: EMPTY
9735: LIST
9736: LIST
9737: PPUSH
9738: CALL_OW 69
9742: IN
9743: IFFALSE 9752
// YouLost ( depot ) ;
9745: LD_STRING depot
9747: PPUSH
9748: CALL_OW 104
// if GetSide ( un ) = 6 then
9752: LD_VAR 0 1
9756: PPUSH
9757: CALL_OW 255
9761: PUSH
9762: LD_INT 6
9764: EQUAL
9765: IFFALSE 9781
// dest_counter := dest_counter + 1 ;
9767: LD_ADDR_EXP 8
9771: PUSH
9772: LD_EXP 8
9776: PUSH
9777: LD_INT 1
9779: PLUS
9780: ST_TO_ADDR
// end ;
9781: PPOPN 1
9783: END
// on VehicleConstructed ( un , fac ) do begin if GetSide ( un ) = 1 then
9784: LD_VAR 0 1
9788: PPUSH
9789: CALL_OW 255
9793: PUSH
9794: LD_INT 1
9796: EQUAL
9797: IFFALSE 9814
// ComMoveXY ( un , 57 , 52 ) ;
9799: LD_VAR 0 1
9803: PPUSH
9804: LD_INT 57
9806: PPUSH
9807: LD_INT 52
9809: PPUSH
9810: CALL_OW 111
// end ;
9814: PPOPN 2
9816: END
// on Contact ( s1 , s2 ) do begin if not us_alert then
9817: LD_EXP 21
9821: NOT
9822: IFFALSE 9872
// if ( s1 = 3 and s2 = 1 ) or ( s1 = 1 and s2 = 3 ) then
9824: LD_VAR 0 1
9828: PUSH
9829: LD_INT 3
9831: EQUAL
9832: PUSH
9833: LD_VAR 0 2
9837: PUSH
9838: LD_INT 1
9840: EQUAL
9841: AND
9842: PUSH
9843: LD_VAR 0 1
9847: PUSH
9848: LD_INT 1
9850: EQUAL
9851: PUSH
9852: LD_VAR 0 2
9856: PUSH
9857: LD_INT 3
9859: EQUAL
9860: AND
9861: OR
9862: IFFALSE 9872
// us_alert := true ;
9864: LD_ADDR_EXP 21
9868: PUSH
9869: LD_INT 1
9871: ST_TO_ADDR
// if ( s1 = 6 and s2 = 3 ) or ( s1 = 3 and s2 = 6 ) then
9872: LD_VAR 0 1
9876: PUSH
9877: LD_INT 6
9879: EQUAL
9880: PUSH
9881: LD_VAR 0 2
9885: PUSH
9886: LD_INT 3
9888: EQUAL
9889: AND
9890: PUSH
9891: LD_VAR 0 1
9895: PUSH
9896: LD_INT 3
9898: EQUAL
9899: PUSH
9900: LD_VAR 0 2
9904: PUSH
9905: LD_INT 6
9907: EQUAL
9908: AND
9909: OR
9910: IFFALSE 9919
// YouLost ( alat ) ;
9912: LD_STRING alat
9914: PPUSH
9915: CALL_OW 104
// end ;
9919: PPOPN 2
9921: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) = 2 and un in FilterAllUnits ( [ [ f_empty ] , [ f_type , unit_vehicle ] ] ) then
9922: LD_VAR 0 1
9926: PPUSH
9927: CALL_OW 255
9931: PUSH
9932: LD_INT 2
9934: EQUAL
9935: PUSH
9936: LD_VAR 0 1
9940: PUSH
9941: LD_INT 58
9943: PUSH
9944: EMPTY
9945: LIST
9946: PUSH
9947: LD_INT 21
9949: PUSH
9950: LD_INT 2
9952: PUSH
9953: EMPTY
9954: LIST
9955: LIST
9956: PUSH
9957: EMPTY
9958: LIST
9959: LIST
9960: PPUSH
9961: CALL_OW 69
9965: IN
9966: AND
9967: IFFALSE 10088
// if GetSide ( NearestUnitToUnit ( all_units diff un , un ) ) <> 2 then
9969: LD_OWVAR 3
9973: PUSH
9974: LD_VAR 0 1
9978: DIFF
9979: PPUSH
9980: LD_VAR 0 1
9984: PPUSH
9985: CALL_OW 74
9989: PPUSH
9990: CALL_OW 255
9994: PUSH
9995: LD_INT 2
9997: NONEQUAL
9998: IFFALSE 10088
// begin Wait ( 0 0$1.3 ) ;
10000: LD_INT 46
10002: PPUSH
10003: CALL_OW 67
// MineExplosion ( GetX ( un ) , GetY ( un ) , 1 ) ;
10007: LD_VAR 0 1
10011: PPUSH
10012: CALL_OW 250
10016: PPUSH
10017: LD_VAR 0 1
10021: PPUSH
10022: CALL_OW 251
10026: PPUSH
10027: LD_INT 1
10029: PPUSH
10030: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 1 ) ;
10034: LD_VAR 0 1
10038: PPUSH
10039: CALL_OW 250
10043: PPUSH
10044: LD_VAR 0 1
10048: PPUSH
10049: CALL_OW 251
10053: PPUSH
10054: LD_INT 1
10056: PPUSH
10057: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 1 ) ;
10061: LD_VAR 0 1
10065: PPUSH
10066: CALL_OW 250
10070: PPUSH
10071: LD_VAR 0 1
10075: PPUSH
10076: CALL_OW 251
10080: PPUSH
10081: LD_INT 1
10083: PPUSH
10084: CALL_OW 453
// end ; end ;
10088: PPOPN 1
10090: END
// on EvacuateVehicle ( driver , un , c1 , c2 ) do begin if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) and not GetSide ( NearestUnit ( un ) ) = 2 then
10091: LD_VAR 0 2
10095: PUSH
10096: LD_INT 22
10098: PUSH
10099: LD_INT 2
10101: PUSH
10102: EMPTY
10103: LIST
10104: LIST
10105: PUSH
10106: LD_INT 21
10108: PUSH
10109: LD_INT 2
10111: PUSH
10112: EMPTY
10113: LIST
10114: LIST
10115: PUSH
10116: EMPTY
10117: LIST
10118: LIST
10119: PPUSH
10120: CALL_OW 69
10124: IN
10125: PUSH
10126: LD_VAR 0 2
10130: PPUSH
10131: CALL 10610 0 1
10135: PPUSH
10136: CALL_OW 255
10140: PUSH
10141: LD_INT 2
10143: EQUAL
10144: NOT
10145: AND
10146: IFFALSE 10271
// begin Wait ( Rand ( 0 0$03 , 0 0$06 ) ) ;
10148: LD_INT 105
10150: PPUSH
10151: LD_INT 210
10153: PPUSH
10154: CALL_OW 12
10158: PPUSH
10159: CALL_OW 67
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
10163: LD_VAR 0 2
10167: PPUSH
10168: CALL_OW 250
10172: PPUSH
10173: LD_VAR 0 2
10177: PPUSH
10178: CALL_OW 251
10182: PPUSH
10183: LD_INT 3
10185: PPUSH
10186: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
10190: LD_VAR 0 2
10194: PPUSH
10195: CALL_OW 250
10199: PPUSH
10200: LD_VAR 0 2
10204: PPUSH
10205: CALL_OW 251
10209: PPUSH
10210: LD_INT 3
10212: PPUSH
10213: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
10217: LD_VAR 0 2
10221: PPUSH
10222: CALL_OW 250
10226: PPUSH
10227: LD_VAR 0 2
10231: PPUSH
10232: CALL_OW 251
10236: PPUSH
10237: LD_INT 3
10239: PPUSH
10240: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
10244: LD_VAR 0 2
10248: PPUSH
10249: CALL_OW 250
10253: PPUSH
10254: LD_VAR 0 2
10258: PPUSH
10259: CALL_OW 251
10263: PPUSH
10264: LD_INT 3
10266: PPUSH
10267: CALL_OW 453
// end ; end ;
10271: PPOPN 4
10273: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
10274: LD_VAR 0 1
10278: PPUSH
10279: LD_VAR 0 2
10283: PPUSH
10284: LD_VAR 0 3
10288: PPUSH
10289: CALL 23978 0 3
// end ;
10293: PPOPN 3
10295: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
10296: LD_VAR 0 1
10300: PPUSH
10301: CALL 23986 0 1
// end ; end_of_file
10305: PPOPN 1
10307: END
// export function Replace2 ( tab , j , k , value ) ; var i , tmp ; begin
10308: LD_INT 0
10310: PPUSH
10311: PPUSH
10312: PPUSH
// tmp := Replace ( tab [ j ] , k , value ) ;
10313: LD_ADDR_VAR 0 7
10317: PUSH
10318: LD_VAR 0 1
10322: PUSH
10323: LD_VAR 0 2
10327: ARRAY
10328: PPUSH
10329: LD_VAR 0 3
10333: PPUSH
10334: LD_VAR 0 4
10338: PPUSH
10339: CALL_OW 1
10343: ST_TO_ADDR
// tab := Replace ( tab , j , tmp ) ;
10344: LD_ADDR_VAR 0 1
10348: PUSH
10349: LD_VAR 0 1
10353: PPUSH
10354: LD_VAR 0 2
10358: PPUSH
10359: LD_VAR 0 7
10363: PPUSH
10364: CALL_OW 1
10368: ST_TO_ADDR
// result := tab ;
10369: LD_ADDR_VAR 0 5
10373: PUSH
10374: LD_VAR 0 1
10378: ST_TO_ADDR
// end ;
10379: LD_VAR 0 5
10383: RET
// export function GetDriver ( veh ) ; var i , filter ; begin
10384: LD_INT 0
10386: PPUSH
10387: PPUSH
10388: PPUSH
// if not GetControl ( veh ) = control_manual then
10389: LD_VAR 0 1
10393: PPUSH
10394: CALL_OW 263
10398: PUSH
10399: LD_INT 1
10401: EQUAL
10402: NOT
10403: IFFALSE 10415
// result := false else
10405: LD_ADDR_VAR 0 2
10409: PUSH
10410: LD_INT 0
10412: ST_TO_ADDR
10413: GO 10560
// if veh in FilterAllUnits ( [ f_empty ] ) then
10415: LD_VAR 0 1
10419: PUSH
10420: LD_INT 58
10422: PUSH
10423: EMPTY
10424: LIST
10425: PPUSH
10426: CALL_OW 69
10430: IN
10431: IFFALSE 10443
// result := false else
10433: LD_ADDR_VAR 0 2
10437: PUSH
10438: LD_INT 0
10440: ST_TO_ADDR
10441: GO 10560
// begin filter := FilterAllUnits ( [ [ f_side , GetSide ( veh ) ] , [ f_driving ] ] ) ;
10443: LD_ADDR_VAR 0 4
10447: PUSH
10448: LD_INT 22
10450: PUSH
10451: LD_VAR 0 1
10455: PPUSH
10456: CALL_OW 255
10460: PUSH
10461: EMPTY
10462: LIST
10463: LIST
10464: PUSH
10465: LD_INT 55
10467: PUSH
10468: EMPTY
10469: LIST
10470: PUSH
10471: EMPTY
10472: LIST
10473: LIST
10474: PPUSH
10475: CALL_OW 69
10479: ST_TO_ADDR
// if not filter then
10480: LD_VAR 0 4
10484: NOT
10485: IFFALSE 10497
// result := false else
10487: LD_ADDR_VAR 0 2
10491: PUSH
10492: LD_INT 0
10494: ST_TO_ADDR
10495: GO 10560
// for i = 1 to filter do
10497: LD_ADDR_VAR 0 3
10501: PUSH
10502: DOUBLE
10503: LD_INT 1
10505: DEC
10506: ST_TO_ADDR
10507: LD_VAR 0 4
10511: PUSH
10512: FOR_TO
10513: IFFALSE 10558
// if IsDriver ( filter [ i ] ) = veh then
10515: LD_VAR 0 4
10519: PUSH
10520: LD_VAR 0 3
10524: ARRAY
10525: PPUSH
10526: CALL 59263 0 1
10530: PUSH
10531: LD_VAR 0 1
10535: EQUAL
10536: IFFALSE 10556
// begin result := filter [ i ] ;
10538: LD_ADDR_VAR 0 2
10542: PUSH
10543: LD_VAR 0 4
10547: PUSH
10548: LD_VAR 0 3
10552: ARRAY
10553: ST_TO_ADDR
// break ;
10554: GO 10558
// end ;
10556: GO 10512
10558: POP
10559: POP
// end ; end ;
10560: LD_VAR 0 2
10564: RET
// export function FindTarget ( unit ) ; begin
10565: LD_INT 0
10567: PPUSH
// result := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( unit ) ] ) , unit ) ;
10568: LD_ADDR_VAR 0 2
10572: PUSH
10573: LD_INT 81
10575: PUSH
10576: LD_VAR 0 1
10580: PPUSH
10581: CALL_OW 255
10585: PUSH
10586: EMPTY
10587: LIST
10588: LIST
10589: PPUSH
10590: CALL_OW 69
10594: PPUSH
10595: LD_VAR 0 1
10599: PPUSH
10600: CALL_OW 74
10604: ST_TO_ADDR
// end ;
10605: LD_VAR 0 2
10609: RET
// export function NearestUnit ( unit ) ; begin
10610: LD_INT 0
10612: PPUSH
// result := NearestUnitToUnit ( all_units diff unit , unit ) ;
10613: LD_ADDR_VAR 0 2
10617: PUSH
10618: LD_OWVAR 3
10622: PUSH
10623: LD_VAR 0 1
10627: DIFF
10628: PPUSH
10629: LD_VAR 0 1
10633: PPUSH
10634: CALL_OW 74
10638: ST_TO_ADDR
// end ; end_of_file
10639: LD_VAR 0 2
10643: RET
// every 12 12$00 do
10644: GO 10646
10646: DISABLE
// begin SetWeather ( 1 , 570 , 350 ) ;
10647: LD_INT 1
10649: PPUSH
10650: LD_INT 570
10652: PPUSH
10653: LD_INT 350
10655: PPUSH
10656: CALL_OW 550
// Wait ( Rand ( 5 5$00 , 10 10$00 ) ) ;
10660: LD_INT 10500
10662: PPUSH
10663: LD_INT 21000
10665: PPUSH
10666: CALL_OW 12
10670: PPUSH
10671: CALL_OW 67
// SetWeather ( 0 , 570 , 350 ) ;
10675: LD_INT 0
10677: PPUSH
10678: LD_INT 570
10680: PPUSH
10681: LD_INT 350
10683: PPUSH
10684: CALL_OW 550
// end ;
10688: END
// export function PrepareAnimals ( num1 , num2 , num3 , area ) ; var l , apeman , tiger , bird ; begin
10689: LD_INT 0
10691: PPUSH
10692: PPUSH
10693: PPUSH
10694: PPUSH
10695: PPUSH
// uc_nation = nation_nature ;
10696: LD_ADDR_OWVAR 21
10700: PUSH
10701: LD_INT 0
10703: ST_TO_ADDR
// uc_side = 0 ;
10704: LD_ADDR_OWVAR 20
10708: PUSH
10709: LD_INT 0
10711: ST_TO_ADDR
// l = 0 ;
10712: LD_ADDR_VAR 0 6
10716: PUSH
10717: LD_INT 0
10719: ST_TO_ADDR
// repeat begin uc_direction = Rand ( 0 , 5 ) ;
10720: LD_ADDR_OWVAR 24
10724: PUSH
10725: LD_INT 0
10727: PPUSH
10728: LD_INT 5
10730: PPUSH
10731: CALL_OW 12
10735: ST_TO_ADDR
// hc_agressivity = Rand ( - 5 , 5 ) ;
10736: LD_ADDR_OWVAR 35
10740: PUSH
10741: LD_INT 5
10743: NEG
10744: PPUSH
10745: LD_INT 5
10747: PPUSH
10748: CALL_OW 12
10752: ST_TO_ADDR
// hc_gallery =  ;
10753: LD_ADDR_OWVAR 33
10757: PUSH
10758: LD_STRING 
10760: ST_TO_ADDR
// hc_class = class_apeman ;
10761: LD_ADDR_OWVAR 28
10765: PUSH
10766: LD_INT 12
10768: ST_TO_ADDR
// hc_attr = [ Rand ( 11 , 13 ) , Rand ( 10 , 11 ) ] ;
10769: LD_ADDR_OWVAR 29
10773: PUSH
10774: LD_INT 11
10776: PPUSH
10777: LD_INT 13
10779: PPUSH
10780: CALL_OW 12
10784: PUSH
10785: LD_INT 10
10787: PPUSH
10788: LD_INT 11
10790: PPUSH
10791: CALL_OW 12
10795: PUSH
10796: EMPTY
10797: LIST
10798: LIST
10799: ST_TO_ADDR
// hc_sex = sex_male ;
10800: LD_ADDR_OWVAR 27
10804: PUSH
10805: LD_INT 1
10807: ST_TO_ADDR
// hc_skills = [ Rand ( 0 , 2 ) , 0 , 0 , 0 ] ;
10808: LD_ADDR_OWVAR 31
10812: PUSH
10813: LD_INT 0
10815: PPUSH
10816: LD_INT 2
10818: PPUSH
10819: CALL_OW 12
10823: PUSH
10824: LD_INT 0
10826: PUSH
10827: LD_INT 0
10829: PUSH
10830: LD_INT 0
10832: PUSH
10833: EMPTY
10834: LIST
10835: LIST
10836: LIST
10837: LIST
10838: ST_TO_ADDR
// apeman = CreateHuman ;
10839: LD_ADDR_VAR 0 7
10843: PUSH
10844: CALL_OW 44
10848: ST_TO_ADDR
// PlaceUnitArea ( apeman , area , false ) ;
10849: LD_VAR 0 7
10853: PPUSH
10854: LD_VAR 0 4
10858: PPUSH
10859: LD_INT 0
10861: PPUSH
10862: CALL_OW 49
// l = l + 1 ;
10866: LD_ADDR_VAR 0 6
10870: PUSH
10871: LD_VAR 0 6
10875: PUSH
10876: LD_INT 1
10878: PLUS
10879: ST_TO_ADDR
// end until l = num1 ;
10880: LD_VAR 0 6
10884: PUSH
10885: LD_VAR 0 1
10889: EQUAL
10890: IFFALSE 10720
// l = 0 ;
10892: LD_ADDR_VAR 0 6
10896: PUSH
10897: LD_INT 0
10899: ST_TO_ADDR
// repeat begin hc_agressivity = Rand ( 0 , 25 ) ;
10900: LD_ADDR_OWVAR 35
10904: PUSH
10905: LD_INT 0
10907: PPUSH
10908: LD_INT 25
10910: PPUSH
10911: CALL_OW 12
10915: ST_TO_ADDR
// hc_class = class_tiger ;
10916: LD_ADDR_OWVAR 28
10920: PUSH
10921: LD_INT 14
10923: ST_TO_ADDR
// hc_sex = sex_male ;
10924: LD_ADDR_OWVAR 27
10928: PUSH
10929: LD_INT 1
10931: ST_TO_ADDR
// hc_gallery = sandnature ;
10932: LD_ADDR_OWVAR 33
10936: PUSH
10937: LD_STRING sandnature
10939: ST_TO_ADDR
// hc_face_number = 3 ;
10940: LD_ADDR_OWVAR 34
10944: PUSH
10945: LD_INT 3
10947: ST_TO_ADDR
// tiger = CreateHuman ;
10948: LD_ADDR_VAR 0 8
10952: PUSH
10953: CALL_OW 44
10957: ST_TO_ADDR
// PlaceUnitArea ( tiger , area , false ) ;
10958: LD_VAR 0 8
10962: PPUSH
10963: LD_VAR 0 4
10967: PPUSH
10968: LD_INT 0
10970: PPUSH
10971: CALL_OW 49
// l = l + 1 ;
10975: LD_ADDR_VAR 0 6
10979: PUSH
10980: LD_VAR 0 6
10984: PUSH
10985: LD_INT 1
10987: PLUS
10988: ST_TO_ADDR
// end until l = num2 ;
10989: LD_VAR 0 6
10993: PUSH
10994: LD_VAR 0 2
10998: EQUAL
10999: IFFALSE 10900
// l = 0 ;
11001: LD_ADDR_VAR 0 6
11005: PUSH
11006: LD_INT 0
11008: ST_TO_ADDR
// repeat begin hc_class = class_phororhacos ;
11009: LD_ADDR_OWVAR 28
11013: PUSH
11014: LD_INT 18
11016: ST_TO_ADDR
// hc_gallery = sandnature ;
11017: LD_ADDR_OWVAR 33
11021: PUSH
11022: LD_STRING sandnature
11024: ST_TO_ADDR
// hc_face_number = 1 ;
11025: LD_ADDR_OWVAR 34
11029: PUSH
11030: LD_INT 1
11032: ST_TO_ADDR
// bird = CreateHuman ;
11033: LD_ADDR_VAR 0 9
11037: PUSH
11038: CALL_OW 44
11042: ST_TO_ADDR
// PlaceUnitAnywhere ( bird , false ) ;
11043: LD_VAR 0 9
11047: PPUSH
11048: LD_INT 0
11050: PPUSH
11051: CALL_OW 51
// l = l + 1 ;
11055: LD_ADDR_VAR 0 6
11059: PUSH
11060: LD_VAR 0 6
11064: PUSH
11065: LD_INT 1
11067: PLUS
11068: ST_TO_ADDR
// end until l = num3 ;
11069: LD_VAR 0 6
11073: PUSH
11074: LD_VAR 0 3
11078: EQUAL
11079: IFFALSE 11009
// end ; end_of_file
11081: LD_VAR 0 5
11085: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
11086: LD_INT 0
11088: PPUSH
// ar_crane := 88 ;
11089: LD_ADDR_EXP 32
11093: PUSH
11094: LD_INT 88
11096: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
11097: LD_ADDR_EXP 27
11101: PUSH
11102: LD_INT 89
11104: ST_TO_ADDR
// us_hack := 99 ;
11105: LD_ADDR_EXP 28
11109: PUSH
11110: LD_INT 99
11112: ST_TO_ADDR
// us_artillery := 97 ;
11113: LD_ADDR_EXP 29
11117: PUSH
11118: LD_INT 97
11120: ST_TO_ADDR
// ar_bio_bomb := 91 ;
11121: LD_ADDR_EXP 30
11125: PUSH
11126: LD_INT 91
11128: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
11129: LD_ADDR_EXP 31
11133: PUSH
11134: LD_INT 92
11136: ST_TO_ADDR
// ru_radar := 98 ;
11137: LD_ADDR_EXP 26
11141: PUSH
11142: LD_INT 98
11144: ST_TO_ADDR
// tech_Artillery := 80 ;
11145: LD_ADDR_EXP 33
11149: PUSH
11150: LD_INT 80
11152: ST_TO_ADDR
// tech_RadMat := 81 ;
11153: LD_ADDR_EXP 34
11157: PUSH
11158: LD_INT 81
11160: ST_TO_ADDR
// tech_BasicTools := 82 ;
11161: LD_ADDR_EXP 35
11165: PUSH
11166: LD_INT 82
11168: ST_TO_ADDR
// tech_Cargo := 83 ;
11169: LD_ADDR_EXP 36
11173: PUSH
11174: LD_INT 83
11176: ST_TO_ADDR
// tech_Track := 84 ;
11177: LD_ADDR_EXP 37
11181: PUSH
11182: LD_INT 84
11184: ST_TO_ADDR
// tech_Crane := 85 ;
11185: LD_ADDR_EXP 38
11189: PUSH
11190: LD_INT 85
11192: ST_TO_ADDR
// tech_Bulldozer := 86 ;
11193: LD_ADDR_EXP 39
11197: PUSH
11198: LD_INT 86
11200: ST_TO_ADDR
// tech_Hovercraft := 87 ;
11201: LD_ADDR_EXP 40
11205: PUSH
11206: LD_INT 87
11208: ST_TO_ADDR
// end ;
11209: LD_VAR 0 1
11213: RET
// every 1 do
11214: GO 11216
11216: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
11217: CALL 11086 0 0
11221: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
11222: LD_VAR 0 2
11226: PUSH
11227: LD_INT 100
11229: EQUAL
11230: IFFALSE 12179
// begin if not StreamModeActive then
11232: LD_EXP 41
11236: NOT
11237: IFFALSE 11247
// StreamModeActive := true ;
11239: LD_ADDR_EXP 41
11243: PUSH
11244: LD_INT 1
11246: ST_TO_ADDR
// if p3 = 0 then
11247: LD_VAR 0 3
11251: PUSH
11252: LD_INT 0
11254: EQUAL
11255: IFFALSE 11261
// InitStreamMode ;
11257: CALL 12412 0 0
// if p3 = 1 then
11261: LD_VAR 0 3
11265: PUSH
11266: LD_INT 1
11268: EQUAL
11269: IFFALSE 11279
// sRocket := true ;
11271: LD_ADDR_EXP 46
11275: PUSH
11276: LD_INT 1
11278: ST_TO_ADDR
// if p3 = 2 then
11279: LD_VAR 0 3
11283: PUSH
11284: LD_INT 2
11286: EQUAL
11287: IFFALSE 11297
// sSpeed := true ;
11289: LD_ADDR_EXP 45
11293: PUSH
11294: LD_INT 1
11296: ST_TO_ADDR
// if p3 = 3 then
11297: LD_VAR 0 3
11301: PUSH
11302: LD_INT 3
11304: EQUAL
11305: IFFALSE 11315
// sEngine := true ;
11307: LD_ADDR_EXP 47
11311: PUSH
11312: LD_INT 1
11314: ST_TO_ADDR
// if p3 = 4 then
11315: LD_VAR 0 3
11319: PUSH
11320: LD_INT 4
11322: EQUAL
11323: IFFALSE 11333
// sSpec := true ;
11325: LD_ADDR_EXP 44
11329: PUSH
11330: LD_INT 1
11332: ST_TO_ADDR
// if p3 = 5 then
11333: LD_VAR 0 3
11337: PUSH
11338: LD_INT 5
11340: EQUAL
11341: IFFALSE 11351
// sLevel := true ;
11343: LD_ADDR_EXP 48
11347: PUSH
11348: LD_INT 1
11350: ST_TO_ADDR
// if p3 = 6 then
11351: LD_VAR 0 3
11355: PUSH
11356: LD_INT 6
11358: EQUAL
11359: IFFALSE 11369
// sArmoury := true ;
11361: LD_ADDR_EXP 49
11365: PUSH
11366: LD_INT 1
11368: ST_TO_ADDR
// if p3 = 7 then
11369: LD_VAR 0 3
11373: PUSH
11374: LD_INT 7
11376: EQUAL
11377: IFFALSE 11387
// sRadar := true ;
11379: LD_ADDR_EXP 50
11383: PUSH
11384: LD_INT 1
11386: ST_TO_ADDR
// if p3 = 8 then
11387: LD_VAR 0 3
11391: PUSH
11392: LD_INT 8
11394: EQUAL
11395: IFFALSE 11405
// sBunker := true ;
11397: LD_ADDR_EXP 51
11401: PUSH
11402: LD_INT 1
11404: ST_TO_ADDR
// if p3 = 9 then
11405: LD_VAR 0 3
11409: PUSH
11410: LD_INT 9
11412: EQUAL
11413: IFFALSE 11423
// sHack := true ;
11415: LD_ADDR_EXP 52
11419: PUSH
11420: LD_INT 1
11422: ST_TO_ADDR
// if p3 = 10 then
11423: LD_VAR 0 3
11427: PUSH
11428: LD_INT 10
11430: EQUAL
11431: IFFALSE 11441
// sFire := true ;
11433: LD_ADDR_EXP 53
11437: PUSH
11438: LD_INT 1
11440: ST_TO_ADDR
// if p3 = 11 then
11441: LD_VAR 0 3
11445: PUSH
11446: LD_INT 11
11448: EQUAL
11449: IFFALSE 11459
// sRefresh := true ;
11451: LD_ADDR_EXP 54
11455: PUSH
11456: LD_INT 1
11458: ST_TO_ADDR
// if p3 = 12 then
11459: LD_VAR 0 3
11463: PUSH
11464: LD_INT 12
11466: EQUAL
11467: IFFALSE 11477
// sExp := true ;
11469: LD_ADDR_EXP 55
11473: PUSH
11474: LD_INT 1
11476: ST_TO_ADDR
// if p3 = 13 then
11477: LD_VAR 0 3
11481: PUSH
11482: LD_INT 13
11484: EQUAL
11485: IFFALSE 11495
// sDepot := true ;
11487: LD_ADDR_EXP 56
11491: PUSH
11492: LD_INT 1
11494: ST_TO_ADDR
// if p3 = 14 then
11495: LD_VAR 0 3
11499: PUSH
11500: LD_INT 14
11502: EQUAL
11503: IFFALSE 11513
// sFlag := true ;
11505: LD_ADDR_EXP 57
11509: PUSH
11510: LD_INT 1
11512: ST_TO_ADDR
// if p3 = 15 then
11513: LD_VAR 0 3
11517: PUSH
11518: LD_INT 15
11520: EQUAL
11521: IFFALSE 11531
// sKamikadze := true ;
11523: LD_ADDR_EXP 65
11527: PUSH
11528: LD_INT 1
11530: ST_TO_ADDR
// if p3 = 16 then
11531: LD_VAR 0 3
11535: PUSH
11536: LD_INT 16
11538: EQUAL
11539: IFFALSE 11549
// sTroll := true ;
11541: LD_ADDR_EXP 66
11545: PUSH
11546: LD_INT 1
11548: ST_TO_ADDR
// if p3 = 17 then
11549: LD_VAR 0 3
11553: PUSH
11554: LD_INT 17
11556: EQUAL
11557: IFFALSE 11567
// sSlow := true ;
11559: LD_ADDR_EXP 67
11563: PUSH
11564: LD_INT 1
11566: ST_TO_ADDR
// if p3 = 18 then
11567: LD_VAR 0 3
11571: PUSH
11572: LD_INT 18
11574: EQUAL
11575: IFFALSE 11585
// sLack := true ;
11577: LD_ADDR_EXP 68
11581: PUSH
11582: LD_INT 1
11584: ST_TO_ADDR
// if p3 = 19 then
11585: LD_VAR 0 3
11589: PUSH
11590: LD_INT 19
11592: EQUAL
11593: IFFALSE 11603
// sTank := true ;
11595: LD_ADDR_EXP 70
11599: PUSH
11600: LD_INT 1
11602: ST_TO_ADDR
// if p3 = 20 then
11603: LD_VAR 0 3
11607: PUSH
11608: LD_INT 20
11610: EQUAL
11611: IFFALSE 11621
// sRemote := true ;
11613: LD_ADDR_EXP 71
11617: PUSH
11618: LD_INT 1
11620: ST_TO_ADDR
// if p3 = 21 then
11621: LD_VAR 0 3
11625: PUSH
11626: LD_INT 21
11628: EQUAL
11629: IFFALSE 11639
// sPowell := true ;
11631: LD_ADDR_EXP 72
11635: PUSH
11636: LD_INT 1
11638: ST_TO_ADDR
// if p3 = 22 then
11639: LD_VAR 0 3
11643: PUSH
11644: LD_INT 22
11646: EQUAL
11647: IFFALSE 11657
// sTeleport := true ;
11649: LD_ADDR_EXP 75
11653: PUSH
11654: LD_INT 1
11656: ST_TO_ADDR
// if p3 = 23 then
11657: LD_VAR 0 3
11661: PUSH
11662: LD_INT 23
11664: EQUAL
11665: IFFALSE 11675
// sOilTower := true ;
11667: LD_ADDR_EXP 77
11671: PUSH
11672: LD_INT 1
11674: ST_TO_ADDR
// if p3 = 24 then
11675: LD_VAR 0 3
11679: PUSH
11680: LD_INT 24
11682: EQUAL
11683: IFFALSE 11693
// sShovel := true ;
11685: LD_ADDR_EXP 78
11689: PUSH
11690: LD_INT 1
11692: ST_TO_ADDR
// if p3 = 25 then
11693: LD_VAR 0 3
11697: PUSH
11698: LD_INT 25
11700: EQUAL
11701: IFFALSE 11711
// sSheik := true ;
11703: LD_ADDR_EXP 79
11707: PUSH
11708: LD_INT 1
11710: ST_TO_ADDR
// if p3 = 26 then
11711: LD_VAR 0 3
11715: PUSH
11716: LD_INT 26
11718: EQUAL
11719: IFFALSE 11729
// sEarthquake := true ;
11721: LD_ADDR_EXP 81
11725: PUSH
11726: LD_INT 1
11728: ST_TO_ADDR
// if p3 = 27 then
11729: LD_VAR 0 3
11733: PUSH
11734: LD_INT 27
11736: EQUAL
11737: IFFALSE 11747
// sAI := true ;
11739: LD_ADDR_EXP 82
11743: PUSH
11744: LD_INT 1
11746: ST_TO_ADDR
// if p3 = 28 then
11747: LD_VAR 0 3
11751: PUSH
11752: LD_INT 28
11754: EQUAL
11755: IFFALSE 11765
// sCargo := true ;
11757: LD_ADDR_EXP 85
11761: PUSH
11762: LD_INT 1
11764: ST_TO_ADDR
// if p3 = 29 then
11765: LD_VAR 0 3
11769: PUSH
11770: LD_INT 29
11772: EQUAL
11773: IFFALSE 11783
// sDLaser := true ;
11775: LD_ADDR_EXP 86
11779: PUSH
11780: LD_INT 1
11782: ST_TO_ADDR
// if p3 = 30 then
11783: LD_VAR 0 3
11787: PUSH
11788: LD_INT 30
11790: EQUAL
11791: IFFALSE 11801
// sExchange := true ;
11793: LD_ADDR_EXP 87
11797: PUSH
11798: LD_INT 1
11800: ST_TO_ADDR
// if p3 = 31 then
11801: LD_VAR 0 3
11805: PUSH
11806: LD_INT 31
11808: EQUAL
11809: IFFALSE 11819
// sFac := true ;
11811: LD_ADDR_EXP 88
11815: PUSH
11816: LD_INT 1
11818: ST_TO_ADDR
// if p3 = 32 then
11819: LD_VAR 0 3
11823: PUSH
11824: LD_INT 32
11826: EQUAL
11827: IFFALSE 11837
// sPower := true ;
11829: LD_ADDR_EXP 89
11833: PUSH
11834: LD_INT 1
11836: ST_TO_ADDR
// if p3 = 33 then
11837: LD_VAR 0 3
11841: PUSH
11842: LD_INT 33
11844: EQUAL
11845: IFFALSE 11855
// sRandom := true ;
11847: LD_ADDR_EXP 90
11851: PUSH
11852: LD_INT 1
11854: ST_TO_ADDR
// if p3 = 34 then
11855: LD_VAR 0 3
11859: PUSH
11860: LD_INT 34
11862: EQUAL
11863: IFFALSE 11873
// sShield := true ;
11865: LD_ADDR_EXP 91
11869: PUSH
11870: LD_INT 1
11872: ST_TO_ADDR
// if p3 = 35 then
11873: LD_VAR 0 3
11877: PUSH
11878: LD_INT 35
11880: EQUAL
11881: IFFALSE 11891
// sTime := true ;
11883: LD_ADDR_EXP 92
11887: PUSH
11888: LD_INT 1
11890: ST_TO_ADDR
// if p3 = 36 then
11891: LD_VAR 0 3
11895: PUSH
11896: LD_INT 36
11898: EQUAL
11899: IFFALSE 11909
// sTools := true ;
11901: LD_ADDR_EXP 93
11905: PUSH
11906: LD_INT 1
11908: ST_TO_ADDR
// if p3 = 101 then
11909: LD_VAR 0 3
11913: PUSH
11914: LD_INT 101
11916: EQUAL
11917: IFFALSE 11927
// sSold := true ;
11919: LD_ADDR_EXP 58
11923: PUSH
11924: LD_INT 1
11926: ST_TO_ADDR
// if p3 = 102 then
11927: LD_VAR 0 3
11931: PUSH
11932: LD_INT 102
11934: EQUAL
11935: IFFALSE 11945
// sDiff := true ;
11937: LD_ADDR_EXP 59
11941: PUSH
11942: LD_INT 1
11944: ST_TO_ADDR
// if p3 = 103 then
11945: LD_VAR 0 3
11949: PUSH
11950: LD_INT 103
11952: EQUAL
11953: IFFALSE 11963
// sFog := true ;
11955: LD_ADDR_EXP 62
11959: PUSH
11960: LD_INT 1
11962: ST_TO_ADDR
// if p3 = 104 then
11963: LD_VAR 0 3
11967: PUSH
11968: LD_INT 104
11970: EQUAL
11971: IFFALSE 11981
// sReset := true ;
11973: LD_ADDR_EXP 63
11977: PUSH
11978: LD_INT 1
11980: ST_TO_ADDR
// if p3 = 105 then
11981: LD_VAR 0 3
11985: PUSH
11986: LD_INT 105
11988: EQUAL
11989: IFFALSE 11999
// sSun := true ;
11991: LD_ADDR_EXP 64
11995: PUSH
11996: LD_INT 1
11998: ST_TO_ADDR
// if p3 = 106 then
11999: LD_VAR 0 3
12003: PUSH
12004: LD_INT 106
12006: EQUAL
12007: IFFALSE 12017
// sTiger := true ;
12009: LD_ADDR_EXP 60
12013: PUSH
12014: LD_INT 1
12016: ST_TO_ADDR
// if p3 = 107 then
12017: LD_VAR 0 3
12021: PUSH
12022: LD_INT 107
12024: EQUAL
12025: IFFALSE 12035
// sBomb := true ;
12027: LD_ADDR_EXP 61
12031: PUSH
12032: LD_INT 1
12034: ST_TO_ADDR
// if p3 = 108 then
12035: LD_VAR 0 3
12039: PUSH
12040: LD_INT 108
12042: EQUAL
12043: IFFALSE 12053
// sWound := true ;
12045: LD_ADDR_EXP 69
12049: PUSH
12050: LD_INT 1
12052: ST_TO_ADDR
// if p3 = 109 then
12053: LD_VAR 0 3
12057: PUSH
12058: LD_INT 109
12060: EQUAL
12061: IFFALSE 12071
// sBetray := true ;
12063: LD_ADDR_EXP 73
12067: PUSH
12068: LD_INT 1
12070: ST_TO_ADDR
// if p3 = 110 then
12071: LD_VAR 0 3
12075: PUSH
12076: LD_INT 110
12078: EQUAL
12079: IFFALSE 12089
// sContamin := true ;
12081: LD_ADDR_EXP 74
12085: PUSH
12086: LD_INT 1
12088: ST_TO_ADDR
// if p3 = 111 then
12089: LD_VAR 0 3
12093: PUSH
12094: LD_INT 111
12096: EQUAL
12097: IFFALSE 12107
// sOil := true ;
12099: LD_ADDR_EXP 76
12103: PUSH
12104: LD_INT 1
12106: ST_TO_ADDR
// if p3 = 112 then
12107: LD_VAR 0 3
12111: PUSH
12112: LD_INT 112
12114: EQUAL
12115: IFFALSE 12125
// sStu := true ;
12117: LD_ADDR_EXP 80
12121: PUSH
12122: LD_INT 1
12124: ST_TO_ADDR
// if p3 = 113 then
12125: LD_VAR 0 3
12129: PUSH
12130: LD_INT 113
12132: EQUAL
12133: IFFALSE 12143
// sBazooka := true ;
12135: LD_ADDR_EXP 83
12139: PUSH
12140: LD_INT 1
12142: ST_TO_ADDR
// if p3 = 114 then
12143: LD_VAR 0 3
12147: PUSH
12148: LD_INT 114
12150: EQUAL
12151: IFFALSE 12161
// sMortar := true ;
12153: LD_ADDR_EXP 84
12157: PUSH
12158: LD_INT 1
12160: ST_TO_ADDR
// if p3 = 115 then
12161: LD_VAR 0 3
12165: PUSH
12166: LD_INT 115
12168: EQUAL
12169: IFFALSE 12179
// sRanger := true ;
12171: LD_ADDR_EXP 94
12175: PUSH
12176: LD_INT 1
12178: ST_TO_ADDR
// end ; if p2 = 101 then
12179: LD_VAR 0 2
12183: PUSH
12184: LD_INT 101
12186: EQUAL
12187: IFFALSE 12390
// begin case p3 of 1 :
12189: LD_VAR 0 3
12193: PUSH
12194: LD_INT 1
12196: DOUBLE
12197: EQUAL
12198: IFTRUE 12202
12200: GO 12209
12202: POP
// hHackUnlimitedResources ; 2 :
12203: CALL 22484 0 0
12207: GO 12390
12209: LD_INT 2
12211: DOUBLE
12212: EQUAL
12213: IFTRUE 12217
12215: GO 12224
12217: POP
// hHackSetLevel10 ; 3 :
12218: CALL 22617 0 0
12222: GO 12390
12224: LD_INT 3
12226: DOUBLE
12227: EQUAL
12228: IFTRUE 12232
12230: GO 12239
12232: POP
// hHackSetLevel10YourUnits ; 4 :
12233: CALL 22702 0 0
12237: GO 12390
12239: LD_INT 4
12241: DOUBLE
12242: EQUAL
12243: IFTRUE 12247
12245: GO 12269
12247: POP
// hHackSpawnHuman ( p4 , p5 , p6 ) ; 5 :
12248: LD_VAR 0 4
12252: PPUSH
12253: LD_VAR 0 5
12257: PPUSH
12258: LD_VAR 0 6
12262: PPUSH
12263: CALL 22792 0 3
12267: GO 12390
12269: LD_INT 5
12271: DOUBLE
12272: EQUAL
12273: IFTRUE 12277
12275: GO 12284
12277: POP
// hHackSpawnVehicle ; 6 :
12278: CALL 22853 0 0
12282: GO 12390
12284: LD_INT 6
12286: DOUBLE
12287: EQUAL
12288: IFTRUE 12292
12290: GO 12299
12292: POP
// hHackInvincible ; 7 :
12293: CALL 23399 0 0
12297: GO 12390
12299: LD_INT 7
12301: DOUBLE
12302: EQUAL
12303: IFTRUE 12307
12305: GO 12314
12307: POP
// hHackInvisible ; 8 :
12308: CALL 23510 0 0
12312: GO 12390
12314: LD_INT 8
12316: DOUBLE
12317: EQUAL
12318: IFTRUE 12322
12320: GO 12329
12322: POP
// hHackChangeYourSide ; 9 :
12323: CALL 23567 0 0
12327: GO 12390
12329: LD_INT 9
12331: DOUBLE
12332: EQUAL
12333: IFTRUE 12337
12335: GO 12344
12337: POP
// hHackChangeUnitSide ; 10 :
12338: CALL 23609 0 0
12342: GO 12390
12344: LD_INT 10
12346: DOUBLE
12347: EQUAL
12348: IFTRUE 12352
12350: GO 12359
12352: POP
// hHackFog ; 11 :
12353: CALL 23710 0 0
12357: GO 12390
12359: LD_INT 11
12361: DOUBLE
12362: EQUAL
12363: IFTRUE 12367
12365: GO 12374
12367: POP
// hHackApeman ; 12 :
12368: CALL 23725 0 0
12372: GO 12390
12374: LD_INT 12
12376: DOUBLE
12377: EQUAL
12378: IFTRUE 12382
12380: GO 12389
12382: POP
// hHackBoom ; end ;
12383: CALL 23810 0 0
12387: GO 12390
12389: POP
// end ; end ;
12390: PPOPN 6
12392: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
12393: GO 12395
12395: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
12396: LD_STRING initStreamRollete();
12398: PPUSH
12399: CALL_OW 559
// InitStreamMode ;
12403: CALL 12412 0 0
// DefineStreamItems ( ) ;
12407: CALL 12852 0 0
// end ;
12411: END
// function InitStreamMode ; begin
12412: LD_INT 0
12414: PPUSH
// streamModeActive := false ;
12415: LD_ADDR_EXP 41
12419: PUSH
12420: LD_INT 0
12422: ST_TO_ADDR
// normalCounter := 36 ;
12423: LD_ADDR_EXP 42
12427: PUSH
12428: LD_INT 36
12430: ST_TO_ADDR
// hardcoreCounter := 16 ;
12431: LD_ADDR_EXP 43
12435: PUSH
12436: LD_INT 16
12438: ST_TO_ADDR
// sRocket := false ;
12439: LD_ADDR_EXP 46
12443: PUSH
12444: LD_INT 0
12446: ST_TO_ADDR
// sSpeed := false ;
12447: LD_ADDR_EXP 45
12451: PUSH
12452: LD_INT 0
12454: ST_TO_ADDR
// sEngine := false ;
12455: LD_ADDR_EXP 47
12459: PUSH
12460: LD_INT 0
12462: ST_TO_ADDR
// sSpec := false ;
12463: LD_ADDR_EXP 44
12467: PUSH
12468: LD_INT 0
12470: ST_TO_ADDR
// sLevel := false ;
12471: LD_ADDR_EXP 48
12475: PUSH
12476: LD_INT 0
12478: ST_TO_ADDR
// sArmoury := false ;
12479: LD_ADDR_EXP 49
12483: PUSH
12484: LD_INT 0
12486: ST_TO_ADDR
// sRadar := false ;
12487: LD_ADDR_EXP 50
12491: PUSH
12492: LD_INT 0
12494: ST_TO_ADDR
// sBunker := false ;
12495: LD_ADDR_EXP 51
12499: PUSH
12500: LD_INT 0
12502: ST_TO_ADDR
// sHack := false ;
12503: LD_ADDR_EXP 52
12507: PUSH
12508: LD_INT 0
12510: ST_TO_ADDR
// sFire := false ;
12511: LD_ADDR_EXP 53
12515: PUSH
12516: LD_INT 0
12518: ST_TO_ADDR
// sRefresh := false ;
12519: LD_ADDR_EXP 54
12523: PUSH
12524: LD_INT 0
12526: ST_TO_ADDR
// sExp := false ;
12527: LD_ADDR_EXP 55
12531: PUSH
12532: LD_INT 0
12534: ST_TO_ADDR
// sDepot := false ;
12535: LD_ADDR_EXP 56
12539: PUSH
12540: LD_INT 0
12542: ST_TO_ADDR
// sFlag := false ;
12543: LD_ADDR_EXP 57
12547: PUSH
12548: LD_INT 0
12550: ST_TO_ADDR
// sKamikadze := false ;
12551: LD_ADDR_EXP 65
12555: PUSH
12556: LD_INT 0
12558: ST_TO_ADDR
// sTroll := false ;
12559: LD_ADDR_EXP 66
12563: PUSH
12564: LD_INT 0
12566: ST_TO_ADDR
// sSlow := false ;
12567: LD_ADDR_EXP 67
12571: PUSH
12572: LD_INT 0
12574: ST_TO_ADDR
// sLack := false ;
12575: LD_ADDR_EXP 68
12579: PUSH
12580: LD_INT 0
12582: ST_TO_ADDR
// sTank := false ;
12583: LD_ADDR_EXP 70
12587: PUSH
12588: LD_INT 0
12590: ST_TO_ADDR
// sRemote := false ;
12591: LD_ADDR_EXP 71
12595: PUSH
12596: LD_INT 0
12598: ST_TO_ADDR
// sPowell := false ;
12599: LD_ADDR_EXP 72
12603: PUSH
12604: LD_INT 0
12606: ST_TO_ADDR
// sTeleport := false ;
12607: LD_ADDR_EXP 75
12611: PUSH
12612: LD_INT 0
12614: ST_TO_ADDR
// sOilTower := false ;
12615: LD_ADDR_EXP 77
12619: PUSH
12620: LD_INT 0
12622: ST_TO_ADDR
// sShovel := false ;
12623: LD_ADDR_EXP 78
12627: PUSH
12628: LD_INT 0
12630: ST_TO_ADDR
// sSheik := false ;
12631: LD_ADDR_EXP 79
12635: PUSH
12636: LD_INT 0
12638: ST_TO_ADDR
// sEarthquake := false ;
12639: LD_ADDR_EXP 81
12643: PUSH
12644: LD_INT 0
12646: ST_TO_ADDR
// sAI := false ;
12647: LD_ADDR_EXP 82
12651: PUSH
12652: LD_INT 0
12654: ST_TO_ADDR
// sCargo := false ;
12655: LD_ADDR_EXP 85
12659: PUSH
12660: LD_INT 0
12662: ST_TO_ADDR
// sDLaser := false ;
12663: LD_ADDR_EXP 86
12667: PUSH
12668: LD_INT 0
12670: ST_TO_ADDR
// sExchange := false ;
12671: LD_ADDR_EXP 87
12675: PUSH
12676: LD_INT 0
12678: ST_TO_ADDR
// sFac := false ;
12679: LD_ADDR_EXP 88
12683: PUSH
12684: LD_INT 0
12686: ST_TO_ADDR
// sPower := false ;
12687: LD_ADDR_EXP 89
12691: PUSH
12692: LD_INT 0
12694: ST_TO_ADDR
// sRandom := false ;
12695: LD_ADDR_EXP 90
12699: PUSH
12700: LD_INT 0
12702: ST_TO_ADDR
// sShield := false ;
12703: LD_ADDR_EXP 91
12707: PUSH
12708: LD_INT 0
12710: ST_TO_ADDR
// sTime := false ;
12711: LD_ADDR_EXP 92
12715: PUSH
12716: LD_INT 0
12718: ST_TO_ADDR
// sTools := false ;
12719: LD_ADDR_EXP 93
12723: PUSH
12724: LD_INT 0
12726: ST_TO_ADDR
// sSold := false ;
12727: LD_ADDR_EXP 58
12731: PUSH
12732: LD_INT 0
12734: ST_TO_ADDR
// sDiff := false ;
12735: LD_ADDR_EXP 59
12739: PUSH
12740: LD_INT 0
12742: ST_TO_ADDR
// sFog := false ;
12743: LD_ADDR_EXP 62
12747: PUSH
12748: LD_INT 0
12750: ST_TO_ADDR
// sReset := false ;
12751: LD_ADDR_EXP 63
12755: PUSH
12756: LD_INT 0
12758: ST_TO_ADDR
// sSun := false ;
12759: LD_ADDR_EXP 64
12763: PUSH
12764: LD_INT 0
12766: ST_TO_ADDR
// sTiger := false ;
12767: LD_ADDR_EXP 60
12771: PUSH
12772: LD_INT 0
12774: ST_TO_ADDR
// sBomb := false ;
12775: LD_ADDR_EXP 61
12779: PUSH
12780: LD_INT 0
12782: ST_TO_ADDR
// sWound := false ;
12783: LD_ADDR_EXP 69
12787: PUSH
12788: LD_INT 0
12790: ST_TO_ADDR
// sBetray := false ;
12791: LD_ADDR_EXP 73
12795: PUSH
12796: LD_INT 0
12798: ST_TO_ADDR
// sContamin := false ;
12799: LD_ADDR_EXP 74
12803: PUSH
12804: LD_INT 0
12806: ST_TO_ADDR
// sOil := false ;
12807: LD_ADDR_EXP 76
12811: PUSH
12812: LD_INT 0
12814: ST_TO_ADDR
// sStu := false ;
12815: LD_ADDR_EXP 80
12819: PUSH
12820: LD_INT 0
12822: ST_TO_ADDR
// sBazooka := false ;
12823: LD_ADDR_EXP 83
12827: PUSH
12828: LD_INT 0
12830: ST_TO_ADDR
// sMortar := false ;
12831: LD_ADDR_EXP 84
12835: PUSH
12836: LD_INT 0
12838: ST_TO_ADDR
// sRanger := false ;
12839: LD_ADDR_EXP 94
12843: PUSH
12844: LD_INT 0
12846: ST_TO_ADDR
// end ;
12847: LD_VAR 0 1
12851: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
12852: LD_INT 0
12854: PPUSH
12855: PPUSH
12856: PPUSH
12857: PPUSH
12858: PPUSH
// result := [ ] ;
12859: LD_ADDR_VAR 0 1
12863: PUSH
12864: EMPTY
12865: ST_TO_ADDR
// if campaign_id = 1 then
12866: LD_OWVAR 69
12870: PUSH
12871: LD_INT 1
12873: EQUAL
12874: IFFALSE 15812
// begin case mission_number of 1 :
12876: LD_OWVAR 70
12880: PUSH
12881: LD_INT 1
12883: DOUBLE
12884: EQUAL
12885: IFTRUE 12889
12887: GO 12953
12889: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
12890: LD_ADDR_VAR 0 1
12894: PUSH
12895: LD_INT 2
12897: PUSH
12898: LD_INT 4
12900: PUSH
12901: LD_INT 11
12903: PUSH
12904: LD_INT 12
12906: PUSH
12907: LD_INT 15
12909: PUSH
12910: LD_INT 16
12912: PUSH
12913: LD_INT 22
12915: PUSH
12916: LD_INT 23
12918: PUSH
12919: LD_INT 26
12921: PUSH
12922: EMPTY
12923: LIST
12924: LIST
12925: LIST
12926: LIST
12927: LIST
12928: LIST
12929: LIST
12930: LIST
12931: LIST
12932: PUSH
12933: LD_INT 101
12935: PUSH
12936: LD_INT 102
12938: PUSH
12939: LD_INT 106
12941: PUSH
12942: EMPTY
12943: LIST
12944: LIST
12945: LIST
12946: PUSH
12947: EMPTY
12948: LIST
12949: LIST
12950: ST_TO_ADDR
12951: GO 15810
12953: LD_INT 2
12955: DOUBLE
12956: EQUAL
12957: IFTRUE 12961
12959: GO 13033
12961: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
12962: LD_ADDR_VAR 0 1
12966: PUSH
12967: LD_INT 2
12969: PUSH
12970: LD_INT 4
12972: PUSH
12973: LD_INT 11
12975: PUSH
12976: LD_INT 12
12978: PUSH
12979: LD_INT 15
12981: PUSH
12982: LD_INT 16
12984: PUSH
12985: LD_INT 22
12987: PUSH
12988: LD_INT 23
12990: PUSH
12991: LD_INT 26
12993: PUSH
12994: EMPTY
12995: LIST
12996: LIST
12997: LIST
12998: LIST
12999: LIST
13000: LIST
13001: LIST
13002: LIST
13003: LIST
13004: PUSH
13005: LD_INT 101
13007: PUSH
13008: LD_INT 102
13010: PUSH
13011: LD_INT 105
13013: PUSH
13014: LD_INT 106
13016: PUSH
13017: LD_INT 108
13019: PUSH
13020: EMPTY
13021: LIST
13022: LIST
13023: LIST
13024: LIST
13025: LIST
13026: PUSH
13027: EMPTY
13028: LIST
13029: LIST
13030: ST_TO_ADDR
13031: GO 15810
13033: LD_INT 3
13035: DOUBLE
13036: EQUAL
13037: IFTRUE 13041
13039: GO 13117
13041: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
13042: LD_ADDR_VAR 0 1
13046: PUSH
13047: LD_INT 2
13049: PUSH
13050: LD_INT 4
13052: PUSH
13053: LD_INT 5
13055: PUSH
13056: LD_INT 11
13058: PUSH
13059: LD_INT 12
13061: PUSH
13062: LD_INT 15
13064: PUSH
13065: LD_INT 16
13067: PUSH
13068: LD_INT 22
13070: PUSH
13071: LD_INT 26
13073: PUSH
13074: LD_INT 36
13076: PUSH
13077: EMPTY
13078: LIST
13079: LIST
13080: LIST
13081: LIST
13082: LIST
13083: LIST
13084: LIST
13085: LIST
13086: LIST
13087: LIST
13088: PUSH
13089: LD_INT 101
13091: PUSH
13092: LD_INT 102
13094: PUSH
13095: LD_INT 105
13097: PUSH
13098: LD_INT 106
13100: PUSH
13101: LD_INT 108
13103: PUSH
13104: EMPTY
13105: LIST
13106: LIST
13107: LIST
13108: LIST
13109: LIST
13110: PUSH
13111: EMPTY
13112: LIST
13113: LIST
13114: ST_TO_ADDR
13115: GO 15810
13117: LD_INT 4
13119: DOUBLE
13120: EQUAL
13121: IFTRUE 13125
13123: GO 13209
13125: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
13126: LD_ADDR_VAR 0 1
13130: PUSH
13131: LD_INT 2
13133: PUSH
13134: LD_INT 4
13136: PUSH
13137: LD_INT 5
13139: PUSH
13140: LD_INT 8
13142: PUSH
13143: LD_INT 11
13145: PUSH
13146: LD_INT 12
13148: PUSH
13149: LD_INT 15
13151: PUSH
13152: LD_INT 16
13154: PUSH
13155: LD_INT 22
13157: PUSH
13158: LD_INT 23
13160: PUSH
13161: LD_INT 26
13163: PUSH
13164: LD_INT 36
13166: PUSH
13167: EMPTY
13168: LIST
13169: LIST
13170: LIST
13171: LIST
13172: LIST
13173: LIST
13174: LIST
13175: LIST
13176: LIST
13177: LIST
13178: LIST
13179: LIST
13180: PUSH
13181: LD_INT 101
13183: PUSH
13184: LD_INT 102
13186: PUSH
13187: LD_INT 105
13189: PUSH
13190: LD_INT 106
13192: PUSH
13193: LD_INT 108
13195: PUSH
13196: EMPTY
13197: LIST
13198: LIST
13199: LIST
13200: LIST
13201: LIST
13202: PUSH
13203: EMPTY
13204: LIST
13205: LIST
13206: ST_TO_ADDR
13207: GO 15810
13209: LD_INT 5
13211: DOUBLE
13212: EQUAL
13213: IFTRUE 13217
13215: GO 13317
13217: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
13218: LD_ADDR_VAR 0 1
13222: PUSH
13223: LD_INT 2
13225: PUSH
13226: LD_INT 4
13228: PUSH
13229: LD_INT 5
13231: PUSH
13232: LD_INT 6
13234: PUSH
13235: LD_INT 8
13237: PUSH
13238: LD_INT 11
13240: PUSH
13241: LD_INT 12
13243: PUSH
13244: LD_INT 15
13246: PUSH
13247: LD_INT 16
13249: PUSH
13250: LD_INT 22
13252: PUSH
13253: LD_INT 23
13255: PUSH
13256: LD_INT 25
13258: PUSH
13259: LD_INT 26
13261: PUSH
13262: LD_INT 36
13264: PUSH
13265: EMPTY
13266: LIST
13267: LIST
13268: LIST
13269: LIST
13270: LIST
13271: LIST
13272: LIST
13273: LIST
13274: LIST
13275: LIST
13276: LIST
13277: LIST
13278: LIST
13279: LIST
13280: PUSH
13281: LD_INT 101
13283: PUSH
13284: LD_INT 102
13286: PUSH
13287: LD_INT 105
13289: PUSH
13290: LD_INT 106
13292: PUSH
13293: LD_INT 108
13295: PUSH
13296: LD_INT 109
13298: PUSH
13299: LD_INT 112
13301: PUSH
13302: EMPTY
13303: LIST
13304: LIST
13305: LIST
13306: LIST
13307: LIST
13308: LIST
13309: LIST
13310: PUSH
13311: EMPTY
13312: LIST
13313: LIST
13314: ST_TO_ADDR
13315: GO 15810
13317: LD_INT 6
13319: DOUBLE
13320: EQUAL
13321: IFTRUE 13325
13323: GO 13445
13325: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
13326: LD_ADDR_VAR 0 1
13330: PUSH
13331: LD_INT 2
13333: PUSH
13334: LD_INT 4
13336: PUSH
13337: LD_INT 5
13339: PUSH
13340: LD_INT 6
13342: PUSH
13343: LD_INT 8
13345: PUSH
13346: LD_INT 11
13348: PUSH
13349: LD_INT 12
13351: PUSH
13352: LD_INT 15
13354: PUSH
13355: LD_INT 16
13357: PUSH
13358: LD_INT 20
13360: PUSH
13361: LD_INT 21
13363: PUSH
13364: LD_INT 22
13366: PUSH
13367: LD_INT 23
13369: PUSH
13370: LD_INT 25
13372: PUSH
13373: LD_INT 26
13375: PUSH
13376: LD_INT 30
13378: PUSH
13379: LD_INT 31
13381: PUSH
13382: LD_INT 32
13384: PUSH
13385: LD_INT 36
13387: PUSH
13388: EMPTY
13389: LIST
13390: LIST
13391: LIST
13392: LIST
13393: LIST
13394: LIST
13395: LIST
13396: LIST
13397: LIST
13398: LIST
13399: LIST
13400: LIST
13401: LIST
13402: LIST
13403: LIST
13404: LIST
13405: LIST
13406: LIST
13407: LIST
13408: PUSH
13409: LD_INT 101
13411: PUSH
13412: LD_INT 102
13414: PUSH
13415: LD_INT 105
13417: PUSH
13418: LD_INT 106
13420: PUSH
13421: LD_INT 108
13423: PUSH
13424: LD_INT 109
13426: PUSH
13427: LD_INT 112
13429: PUSH
13430: EMPTY
13431: LIST
13432: LIST
13433: LIST
13434: LIST
13435: LIST
13436: LIST
13437: LIST
13438: PUSH
13439: EMPTY
13440: LIST
13441: LIST
13442: ST_TO_ADDR
13443: GO 15810
13445: LD_INT 7
13447: DOUBLE
13448: EQUAL
13449: IFTRUE 13453
13451: GO 13553
13453: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
13454: LD_ADDR_VAR 0 1
13458: PUSH
13459: LD_INT 2
13461: PUSH
13462: LD_INT 4
13464: PUSH
13465: LD_INT 5
13467: PUSH
13468: LD_INT 7
13470: PUSH
13471: LD_INT 11
13473: PUSH
13474: LD_INT 12
13476: PUSH
13477: LD_INT 15
13479: PUSH
13480: LD_INT 16
13482: PUSH
13483: LD_INT 20
13485: PUSH
13486: LD_INT 21
13488: PUSH
13489: LD_INT 22
13491: PUSH
13492: LD_INT 23
13494: PUSH
13495: LD_INT 25
13497: PUSH
13498: LD_INT 26
13500: PUSH
13501: EMPTY
13502: LIST
13503: LIST
13504: LIST
13505: LIST
13506: LIST
13507: LIST
13508: LIST
13509: LIST
13510: LIST
13511: LIST
13512: LIST
13513: LIST
13514: LIST
13515: LIST
13516: PUSH
13517: LD_INT 101
13519: PUSH
13520: LD_INT 102
13522: PUSH
13523: LD_INT 103
13525: PUSH
13526: LD_INT 105
13528: PUSH
13529: LD_INT 106
13531: PUSH
13532: LD_INT 108
13534: PUSH
13535: LD_INT 112
13537: PUSH
13538: EMPTY
13539: LIST
13540: LIST
13541: LIST
13542: LIST
13543: LIST
13544: LIST
13545: LIST
13546: PUSH
13547: EMPTY
13548: LIST
13549: LIST
13550: ST_TO_ADDR
13551: GO 15810
13553: LD_INT 8
13555: DOUBLE
13556: EQUAL
13557: IFTRUE 13561
13559: GO 13689
13561: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
13562: LD_ADDR_VAR 0 1
13566: PUSH
13567: LD_INT 2
13569: PUSH
13570: LD_INT 4
13572: PUSH
13573: LD_INT 5
13575: PUSH
13576: LD_INT 6
13578: PUSH
13579: LD_INT 7
13581: PUSH
13582: LD_INT 8
13584: PUSH
13585: LD_INT 11
13587: PUSH
13588: LD_INT 12
13590: PUSH
13591: LD_INT 15
13593: PUSH
13594: LD_INT 16
13596: PUSH
13597: LD_INT 20
13599: PUSH
13600: LD_INT 21
13602: PUSH
13603: LD_INT 22
13605: PUSH
13606: LD_INT 23
13608: PUSH
13609: LD_INT 25
13611: PUSH
13612: LD_INT 26
13614: PUSH
13615: LD_INT 30
13617: PUSH
13618: LD_INT 31
13620: PUSH
13621: LD_INT 32
13623: PUSH
13624: LD_INT 36
13626: PUSH
13627: EMPTY
13628: LIST
13629: LIST
13630: LIST
13631: LIST
13632: LIST
13633: LIST
13634: LIST
13635: LIST
13636: LIST
13637: LIST
13638: LIST
13639: LIST
13640: LIST
13641: LIST
13642: LIST
13643: LIST
13644: LIST
13645: LIST
13646: LIST
13647: LIST
13648: PUSH
13649: LD_INT 101
13651: PUSH
13652: LD_INT 102
13654: PUSH
13655: LD_INT 103
13657: PUSH
13658: LD_INT 105
13660: PUSH
13661: LD_INT 106
13663: PUSH
13664: LD_INT 108
13666: PUSH
13667: LD_INT 109
13669: PUSH
13670: LD_INT 112
13672: PUSH
13673: EMPTY
13674: LIST
13675: LIST
13676: LIST
13677: LIST
13678: LIST
13679: LIST
13680: LIST
13681: LIST
13682: PUSH
13683: EMPTY
13684: LIST
13685: LIST
13686: ST_TO_ADDR
13687: GO 15810
13689: LD_INT 9
13691: DOUBLE
13692: EQUAL
13693: IFTRUE 13697
13695: GO 13833
13697: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
13698: LD_ADDR_VAR 0 1
13702: PUSH
13703: LD_INT 2
13705: PUSH
13706: LD_INT 4
13708: PUSH
13709: LD_INT 5
13711: PUSH
13712: LD_INT 6
13714: PUSH
13715: LD_INT 7
13717: PUSH
13718: LD_INT 8
13720: PUSH
13721: LD_INT 11
13723: PUSH
13724: LD_INT 12
13726: PUSH
13727: LD_INT 15
13729: PUSH
13730: LD_INT 16
13732: PUSH
13733: LD_INT 20
13735: PUSH
13736: LD_INT 21
13738: PUSH
13739: LD_INT 22
13741: PUSH
13742: LD_INT 23
13744: PUSH
13745: LD_INT 25
13747: PUSH
13748: LD_INT 26
13750: PUSH
13751: LD_INT 28
13753: PUSH
13754: LD_INT 30
13756: PUSH
13757: LD_INT 31
13759: PUSH
13760: LD_INT 32
13762: PUSH
13763: LD_INT 36
13765: PUSH
13766: EMPTY
13767: LIST
13768: LIST
13769: LIST
13770: LIST
13771: LIST
13772: LIST
13773: LIST
13774: LIST
13775: LIST
13776: LIST
13777: LIST
13778: LIST
13779: LIST
13780: LIST
13781: LIST
13782: LIST
13783: LIST
13784: LIST
13785: LIST
13786: LIST
13787: LIST
13788: PUSH
13789: LD_INT 101
13791: PUSH
13792: LD_INT 102
13794: PUSH
13795: LD_INT 103
13797: PUSH
13798: LD_INT 105
13800: PUSH
13801: LD_INT 106
13803: PUSH
13804: LD_INT 108
13806: PUSH
13807: LD_INT 109
13809: PUSH
13810: LD_INT 112
13812: PUSH
13813: LD_INT 114
13815: PUSH
13816: EMPTY
13817: LIST
13818: LIST
13819: LIST
13820: LIST
13821: LIST
13822: LIST
13823: LIST
13824: LIST
13825: LIST
13826: PUSH
13827: EMPTY
13828: LIST
13829: LIST
13830: ST_TO_ADDR
13831: GO 15810
13833: LD_INT 10
13835: DOUBLE
13836: EQUAL
13837: IFTRUE 13841
13839: GO 14025
13841: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
13842: LD_ADDR_VAR 0 1
13846: PUSH
13847: LD_INT 2
13849: PUSH
13850: LD_INT 4
13852: PUSH
13853: LD_INT 5
13855: PUSH
13856: LD_INT 6
13858: PUSH
13859: LD_INT 7
13861: PUSH
13862: LD_INT 8
13864: PUSH
13865: LD_INT 9
13867: PUSH
13868: LD_INT 10
13870: PUSH
13871: LD_INT 11
13873: PUSH
13874: LD_INT 12
13876: PUSH
13877: LD_INT 13
13879: PUSH
13880: LD_INT 14
13882: PUSH
13883: LD_INT 15
13885: PUSH
13886: LD_INT 16
13888: PUSH
13889: LD_INT 17
13891: PUSH
13892: LD_INT 18
13894: PUSH
13895: LD_INT 19
13897: PUSH
13898: LD_INT 20
13900: PUSH
13901: LD_INT 21
13903: PUSH
13904: LD_INT 22
13906: PUSH
13907: LD_INT 23
13909: PUSH
13910: LD_INT 24
13912: PUSH
13913: LD_INT 25
13915: PUSH
13916: LD_INT 26
13918: PUSH
13919: LD_INT 28
13921: PUSH
13922: LD_INT 30
13924: PUSH
13925: LD_INT 31
13927: PUSH
13928: LD_INT 32
13930: PUSH
13931: LD_INT 36
13933: PUSH
13934: EMPTY
13935: LIST
13936: LIST
13937: LIST
13938: LIST
13939: LIST
13940: LIST
13941: LIST
13942: LIST
13943: LIST
13944: LIST
13945: LIST
13946: LIST
13947: LIST
13948: LIST
13949: LIST
13950: LIST
13951: LIST
13952: LIST
13953: LIST
13954: LIST
13955: LIST
13956: LIST
13957: LIST
13958: LIST
13959: LIST
13960: LIST
13961: LIST
13962: LIST
13963: LIST
13964: PUSH
13965: LD_INT 101
13967: PUSH
13968: LD_INT 102
13970: PUSH
13971: LD_INT 103
13973: PUSH
13974: LD_INT 104
13976: PUSH
13977: LD_INT 105
13979: PUSH
13980: LD_INT 106
13982: PUSH
13983: LD_INT 107
13985: PUSH
13986: LD_INT 108
13988: PUSH
13989: LD_INT 109
13991: PUSH
13992: LD_INT 110
13994: PUSH
13995: LD_INT 111
13997: PUSH
13998: LD_INT 112
14000: PUSH
14001: LD_INT 114
14003: PUSH
14004: EMPTY
14005: LIST
14006: LIST
14007: LIST
14008: LIST
14009: LIST
14010: LIST
14011: LIST
14012: LIST
14013: LIST
14014: LIST
14015: LIST
14016: LIST
14017: LIST
14018: PUSH
14019: EMPTY
14020: LIST
14021: LIST
14022: ST_TO_ADDR
14023: GO 15810
14025: LD_INT 11
14027: DOUBLE
14028: EQUAL
14029: IFTRUE 14033
14031: GO 14225
14033: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
14034: LD_ADDR_VAR 0 1
14038: PUSH
14039: LD_INT 2
14041: PUSH
14042: LD_INT 3
14044: PUSH
14045: LD_INT 4
14047: PUSH
14048: LD_INT 5
14050: PUSH
14051: LD_INT 6
14053: PUSH
14054: LD_INT 7
14056: PUSH
14057: LD_INT 8
14059: PUSH
14060: LD_INT 9
14062: PUSH
14063: LD_INT 10
14065: PUSH
14066: LD_INT 11
14068: PUSH
14069: LD_INT 12
14071: PUSH
14072: LD_INT 13
14074: PUSH
14075: LD_INT 14
14077: PUSH
14078: LD_INT 15
14080: PUSH
14081: LD_INT 16
14083: PUSH
14084: LD_INT 17
14086: PUSH
14087: LD_INT 18
14089: PUSH
14090: LD_INT 19
14092: PUSH
14093: LD_INT 20
14095: PUSH
14096: LD_INT 21
14098: PUSH
14099: LD_INT 22
14101: PUSH
14102: LD_INT 23
14104: PUSH
14105: LD_INT 24
14107: PUSH
14108: LD_INT 25
14110: PUSH
14111: LD_INT 26
14113: PUSH
14114: LD_INT 28
14116: PUSH
14117: LD_INT 30
14119: PUSH
14120: LD_INT 31
14122: PUSH
14123: LD_INT 32
14125: PUSH
14126: LD_INT 34
14128: PUSH
14129: LD_INT 36
14131: PUSH
14132: EMPTY
14133: LIST
14134: LIST
14135: LIST
14136: LIST
14137: LIST
14138: LIST
14139: LIST
14140: LIST
14141: LIST
14142: LIST
14143: LIST
14144: LIST
14145: LIST
14146: LIST
14147: LIST
14148: LIST
14149: LIST
14150: LIST
14151: LIST
14152: LIST
14153: LIST
14154: LIST
14155: LIST
14156: LIST
14157: LIST
14158: LIST
14159: LIST
14160: LIST
14161: LIST
14162: LIST
14163: LIST
14164: PUSH
14165: LD_INT 101
14167: PUSH
14168: LD_INT 102
14170: PUSH
14171: LD_INT 103
14173: PUSH
14174: LD_INT 104
14176: PUSH
14177: LD_INT 105
14179: PUSH
14180: LD_INT 106
14182: PUSH
14183: LD_INT 107
14185: PUSH
14186: LD_INT 108
14188: PUSH
14189: LD_INT 109
14191: PUSH
14192: LD_INT 110
14194: PUSH
14195: LD_INT 111
14197: PUSH
14198: LD_INT 112
14200: PUSH
14201: LD_INT 114
14203: PUSH
14204: EMPTY
14205: LIST
14206: LIST
14207: LIST
14208: LIST
14209: LIST
14210: LIST
14211: LIST
14212: LIST
14213: LIST
14214: LIST
14215: LIST
14216: LIST
14217: LIST
14218: PUSH
14219: EMPTY
14220: LIST
14221: LIST
14222: ST_TO_ADDR
14223: GO 15810
14225: LD_INT 12
14227: DOUBLE
14228: EQUAL
14229: IFTRUE 14233
14231: GO 14441
14233: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
14234: LD_ADDR_VAR 0 1
14238: PUSH
14239: LD_INT 1
14241: PUSH
14242: LD_INT 2
14244: PUSH
14245: LD_INT 3
14247: PUSH
14248: LD_INT 4
14250: PUSH
14251: LD_INT 5
14253: PUSH
14254: LD_INT 6
14256: PUSH
14257: LD_INT 7
14259: PUSH
14260: LD_INT 8
14262: PUSH
14263: LD_INT 9
14265: PUSH
14266: LD_INT 10
14268: PUSH
14269: LD_INT 11
14271: PUSH
14272: LD_INT 12
14274: PUSH
14275: LD_INT 13
14277: PUSH
14278: LD_INT 14
14280: PUSH
14281: LD_INT 15
14283: PUSH
14284: LD_INT 16
14286: PUSH
14287: LD_INT 17
14289: PUSH
14290: LD_INT 18
14292: PUSH
14293: LD_INT 19
14295: PUSH
14296: LD_INT 20
14298: PUSH
14299: LD_INT 21
14301: PUSH
14302: LD_INT 22
14304: PUSH
14305: LD_INT 23
14307: PUSH
14308: LD_INT 24
14310: PUSH
14311: LD_INT 25
14313: PUSH
14314: LD_INT 26
14316: PUSH
14317: LD_INT 27
14319: PUSH
14320: LD_INT 28
14322: PUSH
14323: LD_INT 30
14325: PUSH
14326: LD_INT 31
14328: PUSH
14329: LD_INT 32
14331: PUSH
14332: LD_INT 33
14334: PUSH
14335: LD_INT 34
14337: PUSH
14338: LD_INT 36
14340: PUSH
14341: EMPTY
14342: LIST
14343: LIST
14344: LIST
14345: LIST
14346: LIST
14347: LIST
14348: LIST
14349: LIST
14350: LIST
14351: LIST
14352: LIST
14353: LIST
14354: LIST
14355: LIST
14356: LIST
14357: LIST
14358: LIST
14359: LIST
14360: LIST
14361: LIST
14362: LIST
14363: LIST
14364: LIST
14365: LIST
14366: LIST
14367: LIST
14368: LIST
14369: LIST
14370: LIST
14371: LIST
14372: LIST
14373: LIST
14374: LIST
14375: LIST
14376: PUSH
14377: LD_INT 101
14379: PUSH
14380: LD_INT 102
14382: PUSH
14383: LD_INT 103
14385: PUSH
14386: LD_INT 104
14388: PUSH
14389: LD_INT 105
14391: PUSH
14392: LD_INT 106
14394: PUSH
14395: LD_INT 107
14397: PUSH
14398: LD_INT 108
14400: PUSH
14401: LD_INT 109
14403: PUSH
14404: LD_INT 110
14406: PUSH
14407: LD_INT 111
14409: PUSH
14410: LD_INT 112
14412: PUSH
14413: LD_INT 113
14415: PUSH
14416: LD_INT 114
14418: PUSH
14419: EMPTY
14420: LIST
14421: LIST
14422: LIST
14423: LIST
14424: LIST
14425: LIST
14426: LIST
14427: LIST
14428: LIST
14429: LIST
14430: LIST
14431: LIST
14432: LIST
14433: LIST
14434: PUSH
14435: EMPTY
14436: LIST
14437: LIST
14438: ST_TO_ADDR
14439: GO 15810
14441: LD_INT 13
14443: DOUBLE
14444: EQUAL
14445: IFTRUE 14449
14447: GO 14645
14449: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
14450: LD_ADDR_VAR 0 1
14454: PUSH
14455: LD_INT 1
14457: PUSH
14458: LD_INT 2
14460: PUSH
14461: LD_INT 3
14463: PUSH
14464: LD_INT 4
14466: PUSH
14467: LD_INT 5
14469: PUSH
14470: LD_INT 8
14472: PUSH
14473: LD_INT 9
14475: PUSH
14476: LD_INT 10
14478: PUSH
14479: LD_INT 11
14481: PUSH
14482: LD_INT 12
14484: PUSH
14485: LD_INT 14
14487: PUSH
14488: LD_INT 15
14490: PUSH
14491: LD_INT 16
14493: PUSH
14494: LD_INT 17
14496: PUSH
14497: LD_INT 18
14499: PUSH
14500: LD_INT 19
14502: PUSH
14503: LD_INT 20
14505: PUSH
14506: LD_INT 21
14508: PUSH
14509: LD_INT 22
14511: PUSH
14512: LD_INT 23
14514: PUSH
14515: LD_INT 24
14517: PUSH
14518: LD_INT 25
14520: PUSH
14521: LD_INT 26
14523: PUSH
14524: LD_INT 27
14526: PUSH
14527: LD_INT 28
14529: PUSH
14530: LD_INT 30
14532: PUSH
14533: LD_INT 31
14535: PUSH
14536: LD_INT 32
14538: PUSH
14539: LD_INT 33
14541: PUSH
14542: LD_INT 34
14544: PUSH
14545: LD_INT 36
14547: PUSH
14548: EMPTY
14549: LIST
14550: LIST
14551: LIST
14552: LIST
14553: LIST
14554: LIST
14555: LIST
14556: LIST
14557: LIST
14558: LIST
14559: LIST
14560: LIST
14561: LIST
14562: LIST
14563: LIST
14564: LIST
14565: LIST
14566: LIST
14567: LIST
14568: LIST
14569: LIST
14570: LIST
14571: LIST
14572: LIST
14573: LIST
14574: LIST
14575: LIST
14576: LIST
14577: LIST
14578: LIST
14579: LIST
14580: PUSH
14581: LD_INT 101
14583: PUSH
14584: LD_INT 102
14586: PUSH
14587: LD_INT 103
14589: PUSH
14590: LD_INT 104
14592: PUSH
14593: LD_INT 105
14595: PUSH
14596: LD_INT 106
14598: PUSH
14599: LD_INT 107
14601: PUSH
14602: LD_INT 108
14604: PUSH
14605: LD_INT 109
14607: PUSH
14608: LD_INT 110
14610: PUSH
14611: LD_INT 111
14613: PUSH
14614: LD_INT 112
14616: PUSH
14617: LD_INT 113
14619: PUSH
14620: LD_INT 114
14622: PUSH
14623: EMPTY
14624: LIST
14625: LIST
14626: LIST
14627: LIST
14628: LIST
14629: LIST
14630: LIST
14631: LIST
14632: LIST
14633: LIST
14634: LIST
14635: LIST
14636: LIST
14637: LIST
14638: PUSH
14639: EMPTY
14640: LIST
14641: LIST
14642: ST_TO_ADDR
14643: GO 15810
14645: LD_INT 14
14647: DOUBLE
14648: EQUAL
14649: IFTRUE 14653
14651: GO 14865
14653: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
14654: LD_ADDR_VAR 0 1
14658: PUSH
14659: LD_INT 1
14661: PUSH
14662: LD_INT 2
14664: PUSH
14665: LD_INT 3
14667: PUSH
14668: LD_INT 4
14670: PUSH
14671: LD_INT 5
14673: PUSH
14674: LD_INT 6
14676: PUSH
14677: LD_INT 7
14679: PUSH
14680: LD_INT 8
14682: PUSH
14683: LD_INT 9
14685: PUSH
14686: LD_INT 10
14688: PUSH
14689: LD_INT 11
14691: PUSH
14692: LD_INT 12
14694: PUSH
14695: LD_INT 13
14697: PUSH
14698: LD_INT 14
14700: PUSH
14701: LD_INT 15
14703: PUSH
14704: LD_INT 16
14706: PUSH
14707: LD_INT 17
14709: PUSH
14710: LD_INT 18
14712: PUSH
14713: LD_INT 19
14715: PUSH
14716: LD_INT 20
14718: PUSH
14719: LD_INT 21
14721: PUSH
14722: LD_INT 22
14724: PUSH
14725: LD_INT 23
14727: PUSH
14728: LD_INT 24
14730: PUSH
14731: LD_INT 25
14733: PUSH
14734: LD_INT 26
14736: PUSH
14737: LD_INT 27
14739: PUSH
14740: LD_INT 28
14742: PUSH
14743: LD_INT 29
14745: PUSH
14746: LD_INT 30
14748: PUSH
14749: LD_INT 31
14751: PUSH
14752: LD_INT 32
14754: PUSH
14755: LD_INT 33
14757: PUSH
14758: LD_INT 34
14760: PUSH
14761: LD_INT 36
14763: PUSH
14764: EMPTY
14765: LIST
14766: LIST
14767: LIST
14768: LIST
14769: LIST
14770: LIST
14771: LIST
14772: LIST
14773: LIST
14774: LIST
14775: LIST
14776: LIST
14777: LIST
14778: LIST
14779: LIST
14780: LIST
14781: LIST
14782: LIST
14783: LIST
14784: LIST
14785: LIST
14786: LIST
14787: LIST
14788: LIST
14789: LIST
14790: LIST
14791: LIST
14792: LIST
14793: LIST
14794: LIST
14795: LIST
14796: LIST
14797: LIST
14798: LIST
14799: LIST
14800: PUSH
14801: LD_INT 101
14803: PUSH
14804: LD_INT 102
14806: PUSH
14807: LD_INT 103
14809: PUSH
14810: LD_INT 104
14812: PUSH
14813: LD_INT 105
14815: PUSH
14816: LD_INT 106
14818: PUSH
14819: LD_INT 107
14821: PUSH
14822: LD_INT 108
14824: PUSH
14825: LD_INT 109
14827: PUSH
14828: LD_INT 110
14830: PUSH
14831: LD_INT 111
14833: PUSH
14834: LD_INT 112
14836: PUSH
14837: LD_INT 113
14839: PUSH
14840: LD_INT 114
14842: PUSH
14843: EMPTY
14844: LIST
14845: LIST
14846: LIST
14847: LIST
14848: LIST
14849: LIST
14850: LIST
14851: LIST
14852: LIST
14853: LIST
14854: LIST
14855: LIST
14856: LIST
14857: LIST
14858: PUSH
14859: EMPTY
14860: LIST
14861: LIST
14862: ST_TO_ADDR
14863: GO 15810
14865: LD_INT 15
14867: DOUBLE
14868: EQUAL
14869: IFTRUE 14873
14871: GO 15085
14873: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
14874: LD_ADDR_VAR 0 1
14878: PUSH
14879: LD_INT 1
14881: PUSH
14882: LD_INT 2
14884: PUSH
14885: LD_INT 3
14887: PUSH
14888: LD_INT 4
14890: PUSH
14891: LD_INT 5
14893: PUSH
14894: LD_INT 6
14896: PUSH
14897: LD_INT 7
14899: PUSH
14900: LD_INT 8
14902: PUSH
14903: LD_INT 9
14905: PUSH
14906: LD_INT 10
14908: PUSH
14909: LD_INT 11
14911: PUSH
14912: LD_INT 12
14914: PUSH
14915: LD_INT 13
14917: PUSH
14918: LD_INT 14
14920: PUSH
14921: LD_INT 15
14923: PUSH
14924: LD_INT 16
14926: PUSH
14927: LD_INT 17
14929: PUSH
14930: LD_INT 18
14932: PUSH
14933: LD_INT 19
14935: PUSH
14936: LD_INT 20
14938: PUSH
14939: LD_INT 21
14941: PUSH
14942: LD_INT 22
14944: PUSH
14945: LD_INT 23
14947: PUSH
14948: LD_INT 24
14950: PUSH
14951: LD_INT 25
14953: PUSH
14954: LD_INT 26
14956: PUSH
14957: LD_INT 27
14959: PUSH
14960: LD_INT 28
14962: PUSH
14963: LD_INT 29
14965: PUSH
14966: LD_INT 30
14968: PUSH
14969: LD_INT 31
14971: PUSH
14972: LD_INT 32
14974: PUSH
14975: LD_INT 33
14977: PUSH
14978: LD_INT 34
14980: PUSH
14981: LD_INT 36
14983: PUSH
14984: EMPTY
14985: LIST
14986: LIST
14987: LIST
14988: LIST
14989: LIST
14990: LIST
14991: LIST
14992: LIST
14993: LIST
14994: LIST
14995: LIST
14996: LIST
14997: LIST
14998: LIST
14999: LIST
15000: LIST
15001: LIST
15002: LIST
15003: LIST
15004: LIST
15005: LIST
15006: LIST
15007: LIST
15008: LIST
15009: LIST
15010: LIST
15011: LIST
15012: LIST
15013: LIST
15014: LIST
15015: LIST
15016: LIST
15017: LIST
15018: LIST
15019: LIST
15020: PUSH
15021: LD_INT 101
15023: PUSH
15024: LD_INT 102
15026: PUSH
15027: LD_INT 103
15029: PUSH
15030: LD_INT 104
15032: PUSH
15033: LD_INT 105
15035: PUSH
15036: LD_INT 106
15038: PUSH
15039: LD_INT 107
15041: PUSH
15042: LD_INT 108
15044: PUSH
15045: LD_INT 109
15047: PUSH
15048: LD_INT 110
15050: PUSH
15051: LD_INT 111
15053: PUSH
15054: LD_INT 112
15056: PUSH
15057: LD_INT 113
15059: PUSH
15060: LD_INT 114
15062: PUSH
15063: EMPTY
15064: LIST
15065: LIST
15066: LIST
15067: LIST
15068: LIST
15069: LIST
15070: LIST
15071: LIST
15072: LIST
15073: LIST
15074: LIST
15075: LIST
15076: LIST
15077: LIST
15078: PUSH
15079: EMPTY
15080: LIST
15081: LIST
15082: ST_TO_ADDR
15083: GO 15810
15085: LD_INT 16
15087: DOUBLE
15088: EQUAL
15089: IFTRUE 15093
15091: GO 15217
15093: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
15094: LD_ADDR_VAR 0 1
15098: PUSH
15099: LD_INT 2
15101: PUSH
15102: LD_INT 4
15104: PUSH
15105: LD_INT 5
15107: PUSH
15108: LD_INT 7
15110: PUSH
15111: LD_INT 11
15113: PUSH
15114: LD_INT 12
15116: PUSH
15117: LD_INT 15
15119: PUSH
15120: LD_INT 16
15122: PUSH
15123: LD_INT 20
15125: PUSH
15126: LD_INT 21
15128: PUSH
15129: LD_INT 22
15131: PUSH
15132: LD_INT 23
15134: PUSH
15135: LD_INT 25
15137: PUSH
15138: LD_INT 26
15140: PUSH
15141: LD_INT 30
15143: PUSH
15144: LD_INT 31
15146: PUSH
15147: LD_INT 32
15149: PUSH
15150: LD_INT 33
15152: PUSH
15153: LD_INT 34
15155: PUSH
15156: EMPTY
15157: LIST
15158: LIST
15159: LIST
15160: LIST
15161: LIST
15162: LIST
15163: LIST
15164: LIST
15165: LIST
15166: LIST
15167: LIST
15168: LIST
15169: LIST
15170: LIST
15171: LIST
15172: LIST
15173: LIST
15174: LIST
15175: LIST
15176: PUSH
15177: LD_INT 101
15179: PUSH
15180: LD_INT 102
15182: PUSH
15183: LD_INT 103
15185: PUSH
15186: LD_INT 106
15188: PUSH
15189: LD_INT 108
15191: PUSH
15192: LD_INT 112
15194: PUSH
15195: LD_INT 113
15197: PUSH
15198: LD_INT 114
15200: PUSH
15201: EMPTY
15202: LIST
15203: LIST
15204: LIST
15205: LIST
15206: LIST
15207: LIST
15208: LIST
15209: LIST
15210: PUSH
15211: EMPTY
15212: LIST
15213: LIST
15214: ST_TO_ADDR
15215: GO 15810
15217: LD_INT 17
15219: DOUBLE
15220: EQUAL
15221: IFTRUE 15225
15223: GO 15437
15225: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
15226: LD_ADDR_VAR 0 1
15230: PUSH
15231: LD_INT 1
15233: PUSH
15234: LD_INT 2
15236: PUSH
15237: LD_INT 3
15239: PUSH
15240: LD_INT 4
15242: PUSH
15243: LD_INT 5
15245: PUSH
15246: LD_INT 6
15248: PUSH
15249: LD_INT 7
15251: PUSH
15252: LD_INT 8
15254: PUSH
15255: LD_INT 9
15257: PUSH
15258: LD_INT 10
15260: PUSH
15261: LD_INT 11
15263: PUSH
15264: LD_INT 12
15266: PUSH
15267: LD_INT 13
15269: PUSH
15270: LD_INT 14
15272: PUSH
15273: LD_INT 15
15275: PUSH
15276: LD_INT 16
15278: PUSH
15279: LD_INT 17
15281: PUSH
15282: LD_INT 18
15284: PUSH
15285: LD_INT 19
15287: PUSH
15288: LD_INT 20
15290: PUSH
15291: LD_INT 21
15293: PUSH
15294: LD_INT 22
15296: PUSH
15297: LD_INT 23
15299: PUSH
15300: LD_INT 24
15302: PUSH
15303: LD_INT 25
15305: PUSH
15306: LD_INT 26
15308: PUSH
15309: LD_INT 27
15311: PUSH
15312: LD_INT 28
15314: PUSH
15315: LD_INT 29
15317: PUSH
15318: LD_INT 30
15320: PUSH
15321: LD_INT 31
15323: PUSH
15324: LD_INT 32
15326: PUSH
15327: LD_INT 33
15329: PUSH
15330: LD_INT 34
15332: PUSH
15333: LD_INT 36
15335: PUSH
15336: EMPTY
15337: LIST
15338: LIST
15339: LIST
15340: LIST
15341: LIST
15342: LIST
15343: LIST
15344: LIST
15345: LIST
15346: LIST
15347: LIST
15348: LIST
15349: LIST
15350: LIST
15351: LIST
15352: LIST
15353: LIST
15354: LIST
15355: LIST
15356: LIST
15357: LIST
15358: LIST
15359: LIST
15360: LIST
15361: LIST
15362: LIST
15363: LIST
15364: LIST
15365: LIST
15366: LIST
15367: LIST
15368: LIST
15369: LIST
15370: LIST
15371: LIST
15372: PUSH
15373: LD_INT 101
15375: PUSH
15376: LD_INT 102
15378: PUSH
15379: LD_INT 103
15381: PUSH
15382: LD_INT 104
15384: PUSH
15385: LD_INT 105
15387: PUSH
15388: LD_INT 106
15390: PUSH
15391: LD_INT 107
15393: PUSH
15394: LD_INT 108
15396: PUSH
15397: LD_INT 109
15399: PUSH
15400: LD_INT 110
15402: PUSH
15403: LD_INT 111
15405: PUSH
15406: LD_INT 112
15408: PUSH
15409: LD_INT 113
15411: PUSH
15412: LD_INT 114
15414: PUSH
15415: EMPTY
15416: LIST
15417: LIST
15418: LIST
15419: LIST
15420: LIST
15421: LIST
15422: LIST
15423: LIST
15424: LIST
15425: LIST
15426: LIST
15427: LIST
15428: LIST
15429: LIST
15430: PUSH
15431: EMPTY
15432: LIST
15433: LIST
15434: ST_TO_ADDR
15435: GO 15810
15437: LD_INT 18
15439: DOUBLE
15440: EQUAL
15441: IFTRUE 15445
15443: GO 15581
15445: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
15446: LD_ADDR_VAR 0 1
15450: PUSH
15451: LD_INT 2
15453: PUSH
15454: LD_INT 4
15456: PUSH
15457: LD_INT 5
15459: PUSH
15460: LD_INT 7
15462: PUSH
15463: LD_INT 11
15465: PUSH
15466: LD_INT 12
15468: PUSH
15469: LD_INT 15
15471: PUSH
15472: LD_INT 16
15474: PUSH
15475: LD_INT 20
15477: PUSH
15478: LD_INT 21
15480: PUSH
15481: LD_INT 22
15483: PUSH
15484: LD_INT 23
15486: PUSH
15487: LD_INT 25
15489: PUSH
15490: LD_INT 26
15492: PUSH
15493: LD_INT 30
15495: PUSH
15496: LD_INT 31
15498: PUSH
15499: LD_INT 32
15501: PUSH
15502: LD_INT 33
15504: PUSH
15505: LD_INT 34
15507: PUSH
15508: LD_INT 35
15510: PUSH
15511: LD_INT 36
15513: PUSH
15514: EMPTY
15515: LIST
15516: LIST
15517: LIST
15518: LIST
15519: LIST
15520: LIST
15521: LIST
15522: LIST
15523: LIST
15524: LIST
15525: LIST
15526: LIST
15527: LIST
15528: LIST
15529: LIST
15530: LIST
15531: LIST
15532: LIST
15533: LIST
15534: LIST
15535: LIST
15536: PUSH
15537: LD_INT 101
15539: PUSH
15540: LD_INT 102
15542: PUSH
15543: LD_INT 103
15545: PUSH
15546: LD_INT 106
15548: PUSH
15549: LD_INT 108
15551: PUSH
15552: LD_INT 112
15554: PUSH
15555: LD_INT 113
15557: PUSH
15558: LD_INT 114
15560: PUSH
15561: LD_INT 115
15563: PUSH
15564: EMPTY
15565: LIST
15566: LIST
15567: LIST
15568: LIST
15569: LIST
15570: LIST
15571: LIST
15572: LIST
15573: LIST
15574: PUSH
15575: EMPTY
15576: LIST
15577: LIST
15578: ST_TO_ADDR
15579: GO 15810
15581: LD_INT 19
15583: DOUBLE
15584: EQUAL
15585: IFTRUE 15589
15587: GO 15809
15589: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
15590: LD_ADDR_VAR 0 1
15594: PUSH
15595: LD_INT 1
15597: PUSH
15598: LD_INT 2
15600: PUSH
15601: LD_INT 3
15603: PUSH
15604: LD_INT 4
15606: PUSH
15607: LD_INT 5
15609: PUSH
15610: LD_INT 6
15612: PUSH
15613: LD_INT 7
15615: PUSH
15616: LD_INT 8
15618: PUSH
15619: LD_INT 9
15621: PUSH
15622: LD_INT 10
15624: PUSH
15625: LD_INT 11
15627: PUSH
15628: LD_INT 12
15630: PUSH
15631: LD_INT 13
15633: PUSH
15634: LD_INT 14
15636: PUSH
15637: LD_INT 15
15639: PUSH
15640: LD_INT 16
15642: PUSH
15643: LD_INT 17
15645: PUSH
15646: LD_INT 18
15648: PUSH
15649: LD_INT 19
15651: PUSH
15652: LD_INT 20
15654: PUSH
15655: LD_INT 21
15657: PUSH
15658: LD_INT 22
15660: PUSH
15661: LD_INT 23
15663: PUSH
15664: LD_INT 24
15666: PUSH
15667: LD_INT 25
15669: PUSH
15670: LD_INT 26
15672: PUSH
15673: LD_INT 27
15675: PUSH
15676: LD_INT 28
15678: PUSH
15679: LD_INT 29
15681: PUSH
15682: LD_INT 30
15684: PUSH
15685: LD_INT 31
15687: PUSH
15688: LD_INT 32
15690: PUSH
15691: LD_INT 33
15693: PUSH
15694: LD_INT 34
15696: PUSH
15697: LD_INT 35
15699: PUSH
15700: LD_INT 36
15702: PUSH
15703: EMPTY
15704: LIST
15705: LIST
15706: LIST
15707: LIST
15708: LIST
15709: LIST
15710: LIST
15711: LIST
15712: LIST
15713: LIST
15714: LIST
15715: LIST
15716: LIST
15717: LIST
15718: LIST
15719: LIST
15720: LIST
15721: LIST
15722: LIST
15723: LIST
15724: LIST
15725: LIST
15726: LIST
15727: LIST
15728: LIST
15729: LIST
15730: LIST
15731: LIST
15732: LIST
15733: LIST
15734: LIST
15735: LIST
15736: LIST
15737: LIST
15738: LIST
15739: LIST
15740: PUSH
15741: LD_INT 101
15743: PUSH
15744: LD_INT 102
15746: PUSH
15747: LD_INT 103
15749: PUSH
15750: LD_INT 104
15752: PUSH
15753: LD_INT 105
15755: PUSH
15756: LD_INT 106
15758: PUSH
15759: LD_INT 107
15761: PUSH
15762: LD_INT 108
15764: PUSH
15765: LD_INT 109
15767: PUSH
15768: LD_INT 110
15770: PUSH
15771: LD_INT 111
15773: PUSH
15774: LD_INT 112
15776: PUSH
15777: LD_INT 113
15779: PUSH
15780: LD_INT 114
15782: PUSH
15783: LD_INT 115
15785: PUSH
15786: EMPTY
15787: LIST
15788: LIST
15789: LIST
15790: LIST
15791: LIST
15792: LIST
15793: LIST
15794: LIST
15795: LIST
15796: LIST
15797: LIST
15798: LIST
15799: LIST
15800: LIST
15801: LIST
15802: PUSH
15803: EMPTY
15804: LIST
15805: LIST
15806: ST_TO_ADDR
15807: GO 15810
15809: POP
// end else
15810: GO 16029
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
15812: LD_ADDR_VAR 0 1
15816: PUSH
15817: LD_INT 1
15819: PUSH
15820: LD_INT 2
15822: PUSH
15823: LD_INT 3
15825: PUSH
15826: LD_INT 4
15828: PUSH
15829: LD_INT 5
15831: PUSH
15832: LD_INT 6
15834: PUSH
15835: LD_INT 7
15837: PUSH
15838: LD_INT 8
15840: PUSH
15841: LD_INT 9
15843: PUSH
15844: LD_INT 10
15846: PUSH
15847: LD_INT 11
15849: PUSH
15850: LD_INT 12
15852: PUSH
15853: LD_INT 13
15855: PUSH
15856: LD_INT 14
15858: PUSH
15859: LD_INT 15
15861: PUSH
15862: LD_INT 16
15864: PUSH
15865: LD_INT 17
15867: PUSH
15868: LD_INT 18
15870: PUSH
15871: LD_INT 19
15873: PUSH
15874: LD_INT 20
15876: PUSH
15877: LD_INT 21
15879: PUSH
15880: LD_INT 22
15882: PUSH
15883: LD_INT 23
15885: PUSH
15886: LD_INT 24
15888: PUSH
15889: LD_INT 25
15891: PUSH
15892: LD_INT 26
15894: PUSH
15895: LD_INT 27
15897: PUSH
15898: LD_INT 28
15900: PUSH
15901: LD_INT 29
15903: PUSH
15904: LD_INT 30
15906: PUSH
15907: LD_INT 31
15909: PUSH
15910: LD_INT 32
15912: PUSH
15913: LD_INT 33
15915: PUSH
15916: LD_INT 34
15918: PUSH
15919: LD_INT 35
15921: PUSH
15922: LD_INT 36
15924: PUSH
15925: EMPTY
15926: LIST
15927: LIST
15928: LIST
15929: LIST
15930: LIST
15931: LIST
15932: LIST
15933: LIST
15934: LIST
15935: LIST
15936: LIST
15937: LIST
15938: LIST
15939: LIST
15940: LIST
15941: LIST
15942: LIST
15943: LIST
15944: LIST
15945: LIST
15946: LIST
15947: LIST
15948: LIST
15949: LIST
15950: LIST
15951: LIST
15952: LIST
15953: LIST
15954: LIST
15955: LIST
15956: LIST
15957: LIST
15958: LIST
15959: LIST
15960: LIST
15961: LIST
15962: PUSH
15963: LD_INT 101
15965: PUSH
15966: LD_INT 102
15968: PUSH
15969: LD_INT 103
15971: PUSH
15972: LD_INT 104
15974: PUSH
15975: LD_INT 105
15977: PUSH
15978: LD_INT 106
15980: PUSH
15981: LD_INT 107
15983: PUSH
15984: LD_INT 108
15986: PUSH
15987: LD_INT 109
15989: PUSH
15990: LD_INT 110
15992: PUSH
15993: LD_INT 111
15995: PUSH
15996: LD_INT 112
15998: PUSH
15999: LD_INT 113
16001: PUSH
16002: LD_INT 114
16004: PUSH
16005: LD_INT 115
16007: PUSH
16008: EMPTY
16009: LIST
16010: LIST
16011: LIST
16012: LIST
16013: LIST
16014: LIST
16015: LIST
16016: LIST
16017: LIST
16018: LIST
16019: LIST
16020: LIST
16021: LIST
16022: LIST
16023: LIST
16024: PUSH
16025: EMPTY
16026: LIST
16027: LIST
16028: ST_TO_ADDR
// if result then
16029: LD_VAR 0 1
16033: IFFALSE 16322
// begin normal :=  ;
16035: LD_ADDR_VAR 0 3
16039: PUSH
16040: LD_STRING 
16042: ST_TO_ADDR
// hardcore :=  ;
16043: LD_ADDR_VAR 0 4
16047: PUSH
16048: LD_STRING 
16050: ST_TO_ADDR
// for i = 1 to normalCounter do
16051: LD_ADDR_VAR 0 5
16055: PUSH
16056: DOUBLE
16057: LD_INT 1
16059: DEC
16060: ST_TO_ADDR
16061: LD_EXP 42
16065: PUSH
16066: FOR_TO
16067: IFFALSE 16168
// begin tmp := 0 ;
16069: LD_ADDR_VAR 0 2
16073: PUSH
16074: LD_STRING 0
16076: ST_TO_ADDR
// if result [ 1 ] then
16077: LD_VAR 0 1
16081: PUSH
16082: LD_INT 1
16084: ARRAY
16085: IFFALSE 16150
// if result [ 1 ] [ 1 ] = i then
16087: LD_VAR 0 1
16091: PUSH
16092: LD_INT 1
16094: ARRAY
16095: PUSH
16096: LD_INT 1
16098: ARRAY
16099: PUSH
16100: LD_VAR 0 5
16104: EQUAL
16105: IFFALSE 16150
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
16107: LD_ADDR_VAR 0 1
16111: PUSH
16112: LD_VAR 0 1
16116: PPUSH
16117: LD_INT 1
16119: PPUSH
16120: LD_VAR 0 1
16124: PUSH
16125: LD_INT 1
16127: ARRAY
16128: PPUSH
16129: LD_INT 1
16131: PPUSH
16132: CALL_OW 3
16136: PPUSH
16137: CALL_OW 1
16141: ST_TO_ADDR
// tmp := 1 ;
16142: LD_ADDR_VAR 0 2
16146: PUSH
16147: LD_STRING 1
16149: ST_TO_ADDR
// end ; normal := normal & tmp ;
16150: LD_ADDR_VAR 0 3
16154: PUSH
16155: LD_VAR 0 3
16159: PUSH
16160: LD_VAR 0 2
16164: STR
16165: ST_TO_ADDR
// end ;
16166: GO 16066
16168: POP
16169: POP
// for i = 1 to hardcoreCounter do
16170: LD_ADDR_VAR 0 5
16174: PUSH
16175: DOUBLE
16176: LD_INT 1
16178: DEC
16179: ST_TO_ADDR
16180: LD_EXP 43
16184: PUSH
16185: FOR_TO
16186: IFFALSE 16291
// begin tmp := 0 ;
16188: LD_ADDR_VAR 0 2
16192: PUSH
16193: LD_STRING 0
16195: ST_TO_ADDR
// if result [ 2 ] then
16196: LD_VAR 0 1
16200: PUSH
16201: LD_INT 2
16203: ARRAY
16204: IFFALSE 16273
// if result [ 2 ] [ 1 ] = 100 + i then
16206: LD_VAR 0 1
16210: PUSH
16211: LD_INT 2
16213: ARRAY
16214: PUSH
16215: LD_INT 1
16217: ARRAY
16218: PUSH
16219: LD_INT 100
16221: PUSH
16222: LD_VAR 0 5
16226: PLUS
16227: EQUAL
16228: IFFALSE 16273
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
16230: LD_ADDR_VAR 0 1
16234: PUSH
16235: LD_VAR 0 1
16239: PPUSH
16240: LD_INT 2
16242: PPUSH
16243: LD_VAR 0 1
16247: PUSH
16248: LD_INT 2
16250: ARRAY
16251: PPUSH
16252: LD_INT 1
16254: PPUSH
16255: CALL_OW 3
16259: PPUSH
16260: CALL_OW 1
16264: ST_TO_ADDR
// tmp := 1 ;
16265: LD_ADDR_VAR 0 2
16269: PUSH
16270: LD_STRING 1
16272: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
16273: LD_ADDR_VAR 0 4
16277: PUSH
16278: LD_VAR 0 4
16282: PUSH
16283: LD_VAR 0 2
16287: STR
16288: ST_TO_ADDR
// end ;
16289: GO 16185
16291: POP
16292: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
16293: LD_STRING getStreamItemsFromMission("
16295: PUSH
16296: LD_VAR 0 3
16300: STR
16301: PUSH
16302: LD_STRING ","
16304: STR
16305: PUSH
16306: LD_VAR 0 4
16310: STR
16311: PUSH
16312: LD_STRING ")
16314: STR
16315: PPUSH
16316: CALL_OW 559
// end else
16320: GO 16329
// ToLua ( getStreamItemsFromMission("","") ) ;
16322: LD_STRING getStreamItemsFromMission("","")
16324: PPUSH
16325: CALL_OW 559
// end ;
16329: LD_VAR 0 1
16333: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
16334: LD_EXP 41
16338: PUSH
16339: LD_EXP 46
16343: AND
16344: IFFALSE 16468
16346: GO 16348
16348: DISABLE
16349: LD_INT 0
16351: PPUSH
16352: PPUSH
// begin enable ;
16353: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
16354: LD_ADDR_VAR 0 2
16358: PUSH
16359: LD_INT 22
16361: PUSH
16362: LD_OWVAR 2
16366: PUSH
16367: EMPTY
16368: LIST
16369: LIST
16370: PUSH
16371: LD_INT 2
16373: PUSH
16374: LD_INT 34
16376: PUSH
16377: LD_INT 7
16379: PUSH
16380: EMPTY
16381: LIST
16382: LIST
16383: PUSH
16384: LD_INT 34
16386: PUSH
16387: LD_INT 45
16389: PUSH
16390: EMPTY
16391: LIST
16392: LIST
16393: PUSH
16394: LD_INT 34
16396: PUSH
16397: LD_INT 28
16399: PUSH
16400: EMPTY
16401: LIST
16402: LIST
16403: PUSH
16404: LD_INT 34
16406: PUSH
16407: LD_INT 47
16409: PUSH
16410: EMPTY
16411: LIST
16412: LIST
16413: PUSH
16414: EMPTY
16415: LIST
16416: LIST
16417: LIST
16418: LIST
16419: LIST
16420: PUSH
16421: EMPTY
16422: LIST
16423: LIST
16424: PPUSH
16425: CALL_OW 69
16429: ST_TO_ADDR
// if not tmp then
16430: LD_VAR 0 2
16434: NOT
16435: IFFALSE 16439
// exit ;
16437: GO 16468
// for i in tmp do
16439: LD_ADDR_VAR 0 1
16443: PUSH
16444: LD_VAR 0 2
16448: PUSH
16449: FOR_IN
16450: IFFALSE 16466
// begin SetLives ( i , 0 ) ;
16452: LD_VAR 0 1
16456: PPUSH
16457: LD_INT 0
16459: PPUSH
16460: CALL_OW 234
// end ;
16464: GO 16449
16466: POP
16467: POP
// end ;
16468: PPOPN 2
16470: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
16471: LD_EXP 41
16475: PUSH
16476: LD_EXP 47
16480: AND
16481: IFFALSE 16565
16483: GO 16485
16485: DISABLE
16486: LD_INT 0
16488: PPUSH
16489: PPUSH
// begin enable ;
16490: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
16491: LD_ADDR_VAR 0 2
16495: PUSH
16496: LD_INT 22
16498: PUSH
16499: LD_OWVAR 2
16503: PUSH
16504: EMPTY
16505: LIST
16506: LIST
16507: PUSH
16508: LD_INT 32
16510: PUSH
16511: LD_INT 3
16513: PUSH
16514: EMPTY
16515: LIST
16516: LIST
16517: PUSH
16518: EMPTY
16519: LIST
16520: LIST
16521: PPUSH
16522: CALL_OW 69
16526: ST_TO_ADDR
// if not tmp then
16527: LD_VAR 0 2
16531: NOT
16532: IFFALSE 16536
// exit ;
16534: GO 16565
// for i in tmp do
16536: LD_ADDR_VAR 0 1
16540: PUSH
16541: LD_VAR 0 2
16545: PUSH
16546: FOR_IN
16547: IFFALSE 16563
// begin SetLives ( i , 0 ) ;
16549: LD_VAR 0 1
16553: PPUSH
16554: LD_INT 0
16556: PPUSH
16557: CALL_OW 234
// end ;
16561: GO 16546
16563: POP
16564: POP
// end ;
16565: PPOPN 2
16567: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
16568: LD_EXP 41
16572: PUSH
16573: LD_EXP 44
16577: AND
16578: IFFALSE 16671
16580: GO 16582
16582: DISABLE
16583: LD_INT 0
16585: PPUSH
// begin enable ;
16586: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
16587: LD_ADDR_VAR 0 1
16591: PUSH
16592: LD_INT 22
16594: PUSH
16595: LD_OWVAR 2
16599: PUSH
16600: EMPTY
16601: LIST
16602: LIST
16603: PUSH
16604: LD_INT 2
16606: PUSH
16607: LD_INT 25
16609: PUSH
16610: LD_INT 5
16612: PUSH
16613: EMPTY
16614: LIST
16615: LIST
16616: PUSH
16617: LD_INT 25
16619: PUSH
16620: LD_INT 9
16622: PUSH
16623: EMPTY
16624: LIST
16625: LIST
16626: PUSH
16627: LD_INT 25
16629: PUSH
16630: LD_INT 8
16632: PUSH
16633: EMPTY
16634: LIST
16635: LIST
16636: PUSH
16637: EMPTY
16638: LIST
16639: LIST
16640: LIST
16641: LIST
16642: PUSH
16643: EMPTY
16644: LIST
16645: LIST
16646: PPUSH
16647: CALL_OW 69
16651: PUSH
16652: FOR_IN
16653: IFFALSE 16669
// begin SetClass ( i , 1 ) ;
16655: LD_VAR 0 1
16659: PPUSH
16660: LD_INT 1
16662: PPUSH
16663: CALL_OW 336
// end ;
16667: GO 16652
16669: POP
16670: POP
// end ;
16671: PPOPN 1
16673: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
16674: LD_EXP 41
16678: PUSH
16679: LD_EXP 45
16683: AND
16684: PUSH
16685: LD_OWVAR 65
16689: PUSH
16690: LD_INT 7
16692: LESS
16693: AND
16694: IFFALSE 16708
16696: GO 16698
16698: DISABLE
// begin enable ;
16699: ENABLE
// game_speed := 7 ;
16700: LD_ADDR_OWVAR 65
16704: PUSH
16705: LD_INT 7
16707: ST_TO_ADDR
// end ;
16708: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
16709: LD_EXP 41
16713: PUSH
16714: LD_EXP 48
16718: AND
16719: IFFALSE 16921
16721: GO 16723
16723: DISABLE
16724: LD_INT 0
16726: PPUSH
16727: PPUSH
16728: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
16729: LD_ADDR_VAR 0 3
16733: PUSH
16734: LD_INT 81
16736: PUSH
16737: LD_OWVAR 2
16741: PUSH
16742: EMPTY
16743: LIST
16744: LIST
16745: PUSH
16746: LD_INT 21
16748: PUSH
16749: LD_INT 1
16751: PUSH
16752: EMPTY
16753: LIST
16754: LIST
16755: PUSH
16756: EMPTY
16757: LIST
16758: LIST
16759: PPUSH
16760: CALL_OW 69
16764: ST_TO_ADDR
// if not tmp then
16765: LD_VAR 0 3
16769: NOT
16770: IFFALSE 16774
// exit ;
16772: GO 16921
// if tmp > 5 then
16774: LD_VAR 0 3
16778: PUSH
16779: LD_INT 5
16781: GREATER
16782: IFFALSE 16794
// k := 5 else
16784: LD_ADDR_VAR 0 2
16788: PUSH
16789: LD_INT 5
16791: ST_TO_ADDR
16792: GO 16804
// k := tmp ;
16794: LD_ADDR_VAR 0 2
16798: PUSH
16799: LD_VAR 0 3
16803: ST_TO_ADDR
// for i := 1 to k do
16804: LD_ADDR_VAR 0 1
16808: PUSH
16809: DOUBLE
16810: LD_INT 1
16812: DEC
16813: ST_TO_ADDR
16814: LD_VAR 0 2
16818: PUSH
16819: FOR_TO
16820: IFFALSE 16919
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
16822: LD_VAR 0 3
16826: PUSH
16827: LD_VAR 0 1
16831: ARRAY
16832: PPUSH
16833: LD_VAR 0 1
16837: PUSH
16838: LD_INT 4
16840: MOD
16841: PUSH
16842: LD_INT 1
16844: PLUS
16845: PPUSH
16846: CALL_OW 259
16850: PUSH
16851: LD_INT 10
16853: LESS
16854: IFFALSE 16917
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
16856: LD_VAR 0 3
16860: PUSH
16861: LD_VAR 0 1
16865: ARRAY
16866: PPUSH
16867: LD_VAR 0 1
16871: PUSH
16872: LD_INT 4
16874: MOD
16875: PUSH
16876: LD_INT 1
16878: PLUS
16879: PPUSH
16880: LD_VAR 0 3
16884: PUSH
16885: LD_VAR 0 1
16889: ARRAY
16890: PPUSH
16891: LD_VAR 0 1
16895: PUSH
16896: LD_INT 4
16898: MOD
16899: PUSH
16900: LD_INT 1
16902: PLUS
16903: PPUSH
16904: CALL_OW 259
16908: PUSH
16909: LD_INT 1
16911: PLUS
16912: PPUSH
16913: CALL_OW 237
16917: GO 16819
16919: POP
16920: POP
// end ;
16921: PPOPN 3
16923: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
16924: LD_EXP 41
16928: PUSH
16929: LD_EXP 49
16933: AND
16934: IFFALSE 16954
16936: GO 16938
16938: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
16939: LD_INT 4
16941: PPUSH
16942: LD_OWVAR 2
16946: PPUSH
16947: LD_INT 0
16949: PPUSH
16950: CALL_OW 324
16954: END
// every 0 0$1 trigger StreamModeActive and sShovel do
16955: LD_EXP 41
16959: PUSH
16960: LD_EXP 78
16964: AND
16965: IFFALSE 16985
16967: GO 16969
16969: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
16970: LD_INT 19
16972: PPUSH
16973: LD_OWVAR 2
16977: PPUSH
16978: LD_INT 0
16980: PPUSH
16981: CALL_OW 324
16985: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
16986: LD_EXP 41
16990: PUSH
16991: LD_EXP 50
16995: AND
16996: IFFALSE 17098
16998: GO 17000
17000: DISABLE
17001: LD_INT 0
17003: PPUSH
17004: PPUSH
// begin enable ;
17005: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
17006: LD_ADDR_VAR 0 2
17010: PUSH
17011: LD_INT 22
17013: PUSH
17014: LD_OWVAR 2
17018: PUSH
17019: EMPTY
17020: LIST
17021: LIST
17022: PUSH
17023: LD_INT 2
17025: PUSH
17026: LD_INT 34
17028: PUSH
17029: LD_INT 11
17031: PUSH
17032: EMPTY
17033: LIST
17034: LIST
17035: PUSH
17036: LD_INT 34
17038: PUSH
17039: LD_INT 30
17041: PUSH
17042: EMPTY
17043: LIST
17044: LIST
17045: PUSH
17046: EMPTY
17047: LIST
17048: LIST
17049: LIST
17050: PUSH
17051: EMPTY
17052: LIST
17053: LIST
17054: PPUSH
17055: CALL_OW 69
17059: ST_TO_ADDR
// if not tmp then
17060: LD_VAR 0 2
17064: NOT
17065: IFFALSE 17069
// exit ;
17067: GO 17098
// for i in tmp do
17069: LD_ADDR_VAR 0 1
17073: PUSH
17074: LD_VAR 0 2
17078: PUSH
17079: FOR_IN
17080: IFFALSE 17096
// begin SetLives ( i , 0 ) ;
17082: LD_VAR 0 1
17086: PPUSH
17087: LD_INT 0
17089: PPUSH
17090: CALL_OW 234
// end ;
17094: GO 17079
17096: POP
17097: POP
// end ;
17098: PPOPN 2
17100: END
// every 0 0$1 trigger StreamModeActive and sBunker do
17101: LD_EXP 41
17105: PUSH
17106: LD_EXP 51
17110: AND
17111: IFFALSE 17131
17113: GO 17115
17115: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
17116: LD_INT 32
17118: PPUSH
17119: LD_OWVAR 2
17123: PPUSH
17124: LD_INT 0
17126: PPUSH
17127: CALL_OW 324
17131: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
17132: LD_EXP 41
17136: PUSH
17137: LD_EXP 52
17141: AND
17142: IFFALSE 17323
17144: GO 17146
17146: DISABLE
17147: LD_INT 0
17149: PPUSH
17150: PPUSH
17151: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
17152: LD_ADDR_VAR 0 2
17156: PUSH
17157: LD_INT 22
17159: PUSH
17160: LD_OWVAR 2
17164: PUSH
17165: EMPTY
17166: LIST
17167: LIST
17168: PUSH
17169: LD_INT 33
17171: PUSH
17172: LD_INT 3
17174: PUSH
17175: EMPTY
17176: LIST
17177: LIST
17178: PUSH
17179: EMPTY
17180: LIST
17181: LIST
17182: PPUSH
17183: CALL_OW 69
17187: ST_TO_ADDR
// if not tmp then
17188: LD_VAR 0 2
17192: NOT
17193: IFFALSE 17197
// exit ;
17195: GO 17323
// side := 0 ;
17197: LD_ADDR_VAR 0 3
17201: PUSH
17202: LD_INT 0
17204: ST_TO_ADDR
// for i := 1 to 8 do
17205: LD_ADDR_VAR 0 1
17209: PUSH
17210: DOUBLE
17211: LD_INT 1
17213: DEC
17214: ST_TO_ADDR
17215: LD_INT 8
17217: PUSH
17218: FOR_TO
17219: IFFALSE 17267
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
17221: LD_OWVAR 2
17225: PUSH
17226: LD_VAR 0 1
17230: NONEQUAL
17231: PUSH
17232: LD_OWVAR 2
17236: PPUSH
17237: LD_VAR 0 1
17241: PPUSH
17242: CALL_OW 81
17246: PUSH
17247: LD_INT 2
17249: EQUAL
17250: AND
17251: IFFALSE 17265
// begin side := i ;
17253: LD_ADDR_VAR 0 3
17257: PUSH
17258: LD_VAR 0 1
17262: ST_TO_ADDR
// break ;
17263: GO 17267
// end ;
17265: GO 17218
17267: POP
17268: POP
// if not side then
17269: LD_VAR 0 3
17273: NOT
17274: IFFALSE 17278
// exit ;
17276: GO 17323
// for i := 1 to tmp do
17278: LD_ADDR_VAR 0 1
17282: PUSH
17283: DOUBLE
17284: LD_INT 1
17286: DEC
17287: ST_TO_ADDR
17288: LD_VAR 0 2
17292: PUSH
17293: FOR_TO
17294: IFFALSE 17321
// if Prob ( 60 ) then
17296: LD_INT 60
17298: PPUSH
17299: CALL_OW 13
17303: IFFALSE 17319
// SetSide ( i , side ) ;
17305: LD_VAR 0 1
17309: PPUSH
17310: LD_VAR 0 3
17314: PPUSH
17315: CALL_OW 235
17319: GO 17293
17321: POP
17322: POP
// end ;
17323: PPOPN 3
17325: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
17326: LD_EXP 41
17330: PUSH
17331: LD_EXP 54
17335: AND
17336: IFFALSE 17455
17338: GO 17340
17340: DISABLE
17341: LD_INT 0
17343: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
17344: LD_ADDR_VAR 0 1
17348: PUSH
17349: LD_INT 22
17351: PUSH
17352: LD_OWVAR 2
17356: PUSH
17357: EMPTY
17358: LIST
17359: LIST
17360: PUSH
17361: LD_INT 21
17363: PUSH
17364: LD_INT 1
17366: PUSH
17367: EMPTY
17368: LIST
17369: LIST
17370: PUSH
17371: LD_INT 3
17373: PUSH
17374: LD_INT 23
17376: PUSH
17377: LD_INT 0
17379: PUSH
17380: EMPTY
17381: LIST
17382: LIST
17383: PUSH
17384: EMPTY
17385: LIST
17386: LIST
17387: PUSH
17388: EMPTY
17389: LIST
17390: LIST
17391: LIST
17392: PPUSH
17393: CALL_OW 69
17397: PUSH
17398: FOR_IN
17399: IFFALSE 17453
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
17401: LD_VAR 0 1
17405: PPUSH
17406: CALL_OW 257
17410: PUSH
17411: LD_INT 1
17413: PUSH
17414: LD_INT 2
17416: PUSH
17417: LD_INT 3
17419: PUSH
17420: LD_INT 4
17422: PUSH
17423: EMPTY
17424: LIST
17425: LIST
17426: LIST
17427: LIST
17428: IN
17429: IFFALSE 17451
// SetClass ( un , rand ( 1 , 4 ) ) ;
17431: LD_VAR 0 1
17435: PPUSH
17436: LD_INT 1
17438: PPUSH
17439: LD_INT 4
17441: PPUSH
17442: CALL_OW 12
17446: PPUSH
17447: CALL_OW 336
17451: GO 17398
17453: POP
17454: POP
// end ;
17455: PPOPN 1
17457: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
17458: LD_EXP 41
17462: PUSH
17463: LD_EXP 53
17467: AND
17468: IFFALSE 17547
17470: GO 17472
17472: DISABLE
17473: LD_INT 0
17475: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
17476: LD_ADDR_VAR 0 1
17480: PUSH
17481: LD_INT 22
17483: PUSH
17484: LD_OWVAR 2
17488: PUSH
17489: EMPTY
17490: LIST
17491: LIST
17492: PUSH
17493: LD_INT 21
17495: PUSH
17496: LD_INT 3
17498: PUSH
17499: EMPTY
17500: LIST
17501: LIST
17502: PUSH
17503: EMPTY
17504: LIST
17505: LIST
17506: PPUSH
17507: CALL_OW 69
17511: ST_TO_ADDR
// if not tmp then
17512: LD_VAR 0 1
17516: NOT
17517: IFFALSE 17521
// exit ;
17519: GO 17547
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
17521: LD_VAR 0 1
17525: PUSH
17526: LD_INT 1
17528: PPUSH
17529: LD_VAR 0 1
17533: PPUSH
17534: CALL_OW 12
17538: ARRAY
17539: PPUSH
17540: LD_INT 100
17542: PPUSH
17543: CALL_OW 234
// end ;
17547: PPOPN 1
17549: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
17550: LD_EXP 41
17554: PUSH
17555: LD_EXP 55
17559: AND
17560: IFFALSE 17658
17562: GO 17564
17564: DISABLE
17565: LD_INT 0
17567: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17568: LD_ADDR_VAR 0 1
17572: PUSH
17573: LD_INT 22
17575: PUSH
17576: LD_OWVAR 2
17580: PUSH
17581: EMPTY
17582: LIST
17583: LIST
17584: PUSH
17585: LD_INT 21
17587: PUSH
17588: LD_INT 1
17590: PUSH
17591: EMPTY
17592: LIST
17593: LIST
17594: PUSH
17595: EMPTY
17596: LIST
17597: LIST
17598: PPUSH
17599: CALL_OW 69
17603: ST_TO_ADDR
// if not tmp then
17604: LD_VAR 0 1
17608: NOT
17609: IFFALSE 17613
// exit ;
17611: GO 17658
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
17613: LD_VAR 0 1
17617: PUSH
17618: LD_INT 1
17620: PPUSH
17621: LD_VAR 0 1
17625: PPUSH
17626: CALL_OW 12
17630: ARRAY
17631: PPUSH
17632: LD_INT 1
17634: PPUSH
17635: LD_INT 4
17637: PPUSH
17638: CALL_OW 12
17642: PPUSH
17643: LD_INT 3000
17645: PPUSH
17646: LD_INT 9000
17648: PPUSH
17649: CALL_OW 12
17653: PPUSH
17654: CALL_OW 492
// end ;
17658: PPOPN 1
17660: END
// every 0 0$1 trigger StreamModeActive and sDepot do
17661: LD_EXP 41
17665: PUSH
17666: LD_EXP 56
17670: AND
17671: IFFALSE 17691
17673: GO 17675
17675: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
17676: LD_INT 1
17678: PPUSH
17679: LD_OWVAR 2
17683: PPUSH
17684: LD_INT 0
17686: PPUSH
17687: CALL_OW 324
17691: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
17692: LD_EXP 41
17696: PUSH
17697: LD_EXP 57
17701: AND
17702: IFFALSE 17785
17704: GO 17706
17706: DISABLE
17707: LD_INT 0
17709: PPUSH
17710: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
17711: LD_ADDR_VAR 0 2
17715: PUSH
17716: LD_INT 22
17718: PUSH
17719: LD_OWVAR 2
17723: PUSH
17724: EMPTY
17725: LIST
17726: LIST
17727: PUSH
17728: LD_INT 21
17730: PUSH
17731: LD_INT 3
17733: PUSH
17734: EMPTY
17735: LIST
17736: LIST
17737: PUSH
17738: EMPTY
17739: LIST
17740: LIST
17741: PPUSH
17742: CALL_OW 69
17746: ST_TO_ADDR
// if not tmp then
17747: LD_VAR 0 2
17751: NOT
17752: IFFALSE 17756
// exit ;
17754: GO 17785
// for i in tmp do
17756: LD_ADDR_VAR 0 1
17760: PUSH
17761: LD_VAR 0 2
17765: PUSH
17766: FOR_IN
17767: IFFALSE 17783
// SetBLevel ( i , 10 ) ;
17769: LD_VAR 0 1
17773: PPUSH
17774: LD_INT 10
17776: PPUSH
17777: CALL_OW 241
17781: GO 17766
17783: POP
17784: POP
// end ;
17785: PPOPN 2
17787: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
17788: LD_EXP 41
17792: PUSH
17793: LD_EXP 58
17797: AND
17798: IFFALSE 17909
17800: GO 17802
17802: DISABLE
17803: LD_INT 0
17805: PPUSH
17806: PPUSH
17807: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17808: LD_ADDR_VAR 0 3
17812: PUSH
17813: LD_INT 22
17815: PUSH
17816: LD_OWVAR 2
17820: PUSH
17821: EMPTY
17822: LIST
17823: LIST
17824: PUSH
17825: LD_INT 25
17827: PUSH
17828: LD_INT 1
17830: PUSH
17831: EMPTY
17832: LIST
17833: LIST
17834: PUSH
17835: EMPTY
17836: LIST
17837: LIST
17838: PPUSH
17839: CALL_OW 69
17843: ST_TO_ADDR
// if not tmp then
17844: LD_VAR 0 3
17848: NOT
17849: IFFALSE 17853
// exit ;
17851: GO 17909
// un := tmp [ rand ( 1 , tmp ) ] ;
17853: LD_ADDR_VAR 0 2
17857: PUSH
17858: LD_VAR 0 3
17862: PUSH
17863: LD_INT 1
17865: PPUSH
17866: LD_VAR 0 3
17870: PPUSH
17871: CALL_OW 12
17875: ARRAY
17876: ST_TO_ADDR
// if Crawls ( un ) then
17877: LD_VAR 0 2
17881: PPUSH
17882: CALL_OW 318
17886: IFFALSE 17897
// ComWalk ( un ) ;
17888: LD_VAR 0 2
17892: PPUSH
17893: CALL_OW 138
// SetClass ( un , class_sniper ) ;
17897: LD_VAR 0 2
17901: PPUSH
17902: LD_INT 5
17904: PPUSH
17905: CALL_OW 336
// end ;
17909: PPOPN 3
17911: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
17912: LD_EXP 41
17916: PUSH
17917: LD_EXP 59
17921: AND
17922: PUSH
17923: LD_OWVAR 67
17927: PUSH
17928: LD_INT 3
17930: LESS
17931: AND
17932: IFFALSE 17951
17934: GO 17936
17936: DISABLE
// Difficulty := Difficulty + 1 ;
17937: LD_ADDR_OWVAR 67
17941: PUSH
17942: LD_OWVAR 67
17946: PUSH
17947: LD_INT 1
17949: PLUS
17950: ST_TO_ADDR
17951: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
17952: LD_EXP 41
17956: PUSH
17957: LD_EXP 60
17961: AND
17962: IFFALSE 18065
17964: GO 17966
17966: DISABLE
17967: LD_INT 0
17969: PPUSH
// begin for i := 1 to 5 do
17970: LD_ADDR_VAR 0 1
17974: PUSH
17975: DOUBLE
17976: LD_INT 1
17978: DEC
17979: ST_TO_ADDR
17980: LD_INT 5
17982: PUSH
17983: FOR_TO
17984: IFFALSE 18063
// begin uc_nation := nation_nature ;
17986: LD_ADDR_OWVAR 21
17990: PUSH
17991: LD_INT 0
17993: ST_TO_ADDR
// uc_side := 0 ;
17994: LD_ADDR_OWVAR 20
17998: PUSH
17999: LD_INT 0
18001: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
18002: LD_ADDR_OWVAR 29
18006: PUSH
18007: LD_INT 12
18009: PUSH
18010: LD_INT 12
18012: PUSH
18013: EMPTY
18014: LIST
18015: LIST
18016: ST_TO_ADDR
// hc_agressivity := 20 ;
18017: LD_ADDR_OWVAR 35
18021: PUSH
18022: LD_INT 20
18024: ST_TO_ADDR
// hc_class := class_tiger ;
18025: LD_ADDR_OWVAR 28
18029: PUSH
18030: LD_INT 14
18032: ST_TO_ADDR
// hc_gallery :=  ;
18033: LD_ADDR_OWVAR 33
18037: PUSH
18038: LD_STRING 
18040: ST_TO_ADDR
// hc_name :=  ;
18041: LD_ADDR_OWVAR 26
18045: PUSH
18046: LD_STRING 
18048: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
18049: CALL_OW 44
18053: PPUSH
18054: LD_INT 0
18056: PPUSH
18057: CALL_OW 51
// end ;
18061: GO 17983
18063: POP
18064: POP
// end ;
18065: PPOPN 1
18067: END
// every 0 0$1 trigger StreamModeActive and sBomb do
18068: LD_EXP 41
18072: PUSH
18073: LD_EXP 61
18077: AND
18078: IFFALSE 18087
18080: GO 18082
18082: DISABLE
// StreamSibBomb ;
18083: CALL 18088 0 0
18087: END
// export function StreamSibBomb ; var i , x , y ; begin
18088: LD_INT 0
18090: PPUSH
18091: PPUSH
18092: PPUSH
18093: PPUSH
// result := false ;
18094: LD_ADDR_VAR 0 1
18098: PUSH
18099: LD_INT 0
18101: ST_TO_ADDR
// for i := 1 to 16 do
18102: LD_ADDR_VAR 0 2
18106: PUSH
18107: DOUBLE
18108: LD_INT 1
18110: DEC
18111: ST_TO_ADDR
18112: LD_INT 16
18114: PUSH
18115: FOR_TO
18116: IFFALSE 18315
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18118: LD_ADDR_VAR 0 3
18122: PUSH
18123: LD_INT 10
18125: PUSH
18126: LD_INT 20
18128: PUSH
18129: LD_INT 30
18131: PUSH
18132: LD_INT 40
18134: PUSH
18135: LD_INT 50
18137: PUSH
18138: LD_INT 60
18140: PUSH
18141: LD_INT 70
18143: PUSH
18144: LD_INT 80
18146: PUSH
18147: LD_INT 90
18149: PUSH
18150: LD_INT 100
18152: PUSH
18153: LD_INT 110
18155: PUSH
18156: LD_INT 120
18158: PUSH
18159: LD_INT 130
18161: PUSH
18162: LD_INT 140
18164: PUSH
18165: LD_INT 150
18167: PUSH
18168: EMPTY
18169: LIST
18170: LIST
18171: LIST
18172: LIST
18173: LIST
18174: LIST
18175: LIST
18176: LIST
18177: LIST
18178: LIST
18179: LIST
18180: LIST
18181: LIST
18182: LIST
18183: LIST
18184: PUSH
18185: LD_INT 1
18187: PPUSH
18188: LD_INT 15
18190: PPUSH
18191: CALL_OW 12
18195: ARRAY
18196: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18197: LD_ADDR_VAR 0 4
18201: PUSH
18202: LD_INT 10
18204: PUSH
18205: LD_INT 20
18207: PUSH
18208: LD_INT 30
18210: PUSH
18211: LD_INT 40
18213: PUSH
18214: LD_INT 50
18216: PUSH
18217: LD_INT 60
18219: PUSH
18220: LD_INT 70
18222: PUSH
18223: LD_INT 80
18225: PUSH
18226: LD_INT 90
18228: PUSH
18229: LD_INT 100
18231: PUSH
18232: LD_INT 110
18234: PUSH
18235: LD_INT 120
18237: PUSH
18238: LD_INT 130
18240: PUSH
18241: LD_INT 140
18243: PUSH
18244: LD_INT 150
18246: PUSH
18247: EMPTY
18248: LIST
18249: LIST
18250: LIST
18251: LIST
18252: LIST
18253: LIST
18254: LIST
18255: LIST
18256: LIST
18257: LIST
18258: LIST
18259: LIST
18260: LIST
18261: LIST
18262: LIST
18263: PUSH
18264: LD_INT 1
18266: PPUSH
18267: LD_INT 15
18269: PPUSH
18270: CALL_OW 12
18274: ARRAY
18275: ST_TO_ADDR
// if ValidHex ( x , y ) then
18276: LD_VAR 0 3
18280: PPUSH
18281: LD_VAR 0 4
18285: PPUSH
18286: CALL_OW 488
18290: IFFALSE 18313
// begin result := [ x , y ] ;
18292: LD_ADDR_VAR 0 1
18296: PUSH
18297: LD_VAR 0 3
18301: PUSH
18302: LD_VAR 0 4
18306: PUSH
18307: EMPTY
18308: LIST
18309: LIST
18310: ST_TO_ADDR
// break ;
18311: GO 18315
// end ; end ;
18313: GO 18115
18315: POP
18316: POP
// if result then
18317: LD_VAR 0 1
18321: IFFALSE 18381
// begin ToLua ( playSibBomb() ) ;
18323: LD_STRING playSibBomb()
18325: PPUSH
18326: CALL_OW 559
// wait ( 0 0$14 ) ;
18330: LD_INT 490
18332: PPUSH
18333: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
18337: LD_VAR 0 1
18341: PUSH
18342: LD_INT 1
18344: ARRAY
18345: PPUSH
18346: LD_VAR 0 1
18350: PUSH
18351: LD_INT 2
18353: ARRAY
18354: PPUSH
18355: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
18359: LD_VAR 0 1
18363: PUSH
18364: LD_INT 1
18366: ARRAY
18367: PPUSH
18368: LD_VAR 0 1
18372: PUSH
18373: LD_INT 2
18375: ARRAY
18376: PPUSH
18377: CALL_OW 429
// end ; end ;
18381: LD_VAR 0 1
18385: RET
// every 0 0$1 trigger StreamModeActive and sReset do
18386: LD_EXP 41
18390: PUSH
18391: LD_EXP 63
18395: AND
18396: IFFALSE 18408
18398: GO 18400
18400: DISABLE
// YouLost (  ) ;
18401: LD_STRING 
18403: PPUSH
18404: CALL_OW 104
18408: END
// every 0 0$1 trigger StreamModeActive and sFog do
18409: LD_EXP 41
18413: PUSH
18414: LD_EXP 62
18418: AND
18419: IFFALSE 18433
18421: GO 18423
18423: DISABLE
// FogOff ( your_side ) ;
18424: LD_OWVAR 2
18428: PPUSH
18429: CALL_OW 344
18433: END
// every 0 0$1 trigger StreamModeActive and sSun do
18434: LD_EXP 41
18438: PUSH
18439: LD_EXP 64
18443: AND
18444: IFFALSE 18472
18446: GO 18448
18448: DISABLE
// begin solar_recharge_percent := 0 ;
18449: LD_ADDR_OWVAR 79
18453: PUSH
18454: LD_INT 0
18456: ST_TO_ADDR
// wait ( 5 5$00 ) ;
18457: LD_INT 10500
18459: PPUSH
18460: CALL_OW 67
// solar_recharge_percent := 100 ;
18464: LD_ADDR_OWVAR 79
18468: PUSH
18469: LD_INT 100
18471: ST_TO_ADDR
// end ;
18472: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
18473: LD_EXP 41
18477: PUSH
18478: LD_EXP 65
18482: AND
18483: IFFALSE 18722
18485: GO 18487
18487: DISABLE
18488: LD_INT 0
18490: PPUSH
18491: PPUSH
18492: PPUSH
// begin tmp := [ ] ;
18493: LD_ADDR_VAR 0 3
18497: PUSH
18498: EMPTY
18499: ST_TO_ADDR
// for i := 1 to 6 do
18500: LD_ADDR_VAR 0 1
18504: PUSH
18505: DOUBLE
18506: LD_INT 1
18508: DEC
18509: ST_TO_ADDR
18510: LD_INT 6
18512: PUSH
18513: FOR_TO
18514: IFFALSE 18619
// begin uc_nation := nation_nature ;
18516: LD_ADDR_OWVAR 21
18520: PUSH
18521: LD_INT 0
18523: ST_TO_ADDR
// uc_side := 0 ;
18524: LD_ADDR_OWVAR 20
18528: PUSH
18529: LD_INT 0
18531: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
18532: LD_ADDR_OWVAR 29
18536: PUSH
18537: LD_INT 12
18539: PUSH
18540: LD_INT 12
18542: PUSH
18543: EMPTY
18544: LIST
18545: LIST
18546: ST_TO_ADDR
// hc_agressivity := 20 ;
18547: LD_ADDR_OWVAR 35
18551: PUSH
18552: LD_INT 20
18554: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
18555: LD_ADDR_OWVAR 28
18559: PUSH
18560: LD_INT 17
18562: ST_TO_ADDR
// hc_gallery :=  ;
18563: LD_ADDR_OWVAR 33
18567: PUSH
18568: LD_STRING 
18570: ST_TO_ADDR
// hc_name :=  ;
18571: LD_ADDR_OWVAR 26
18575: PUSH
18576: LD_STRING 
18578: ST_TO_ADDR
// un := CreateHuman ;
18579: LD_ADDR_VAR 0 2
18583: PUSH
18584: CALL_OW 44
18588: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
18589: LD_VAR 0 2
18593: PPUSH
18594: LD_INT 1
18596: PPUSH
18597: CALL_OW 51
// tmp := tmp ^ un ;
18601: LD_ADDR_VAR 0 3
18605: PUSH
18606: LD_VAR 0 3
18610: PUSH
18611: LD_VAR 0 2
18615: ADD
18616: ST_TO_ADDR
// end ;
18617: GO 18513
18619: POP
18620: POP
// repeat wait ( 0 0$1 ) ;
18621: LD_INT 35
18623: PPUSH
18624: CALL_OW 67
// for un in tmp do
18628: LD_ADDR_VAR 0 2
18632: PUSH
18633: LD_VAR 0 3
18637: PUSH
18638: FOR_IN
18639: IFFALSE 18713
// begin if IsDead ( un ) then
18641: LD_VAR 0 2
18645: PPUSH
18646: CALL_OW 301
18650: IFFALSE 18670
// begin tmp := tmp diff un ;
18652: LD_ADDR_VAR 0 3
18656: PUSH
18657: LD_VAR 0 3
18661: PUSH
18662: LD_VAR 0 2
18666: DIFF
18667: ST_TO_ADDR
// continue ;
18668: GO 18638
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
18670: LD_VAR 0 2
18674: PPUSH
18675: LD_INT 3
18677: PUSH
18678: LD_INT 22
18680: PUSH
18681: LD_INT 0
18683: PUSH
18684: EMPTY
18685: LIST
18686: LIST
18687: PUSH
18688: EMPTY
18689: LIST
18690: LIST
18691: PPUSH
18692: CALL_OW 69
18696: PPUSH
18697: LD_VAR 0 2
18701: PPUSH
18702: CALL_OW 74
18706: PPUSH
18707: CALL_OW 115
// end ;
18711: GO 18638
18713: POP
18714: POP
// until not tmp ;
18715: LD_VAR 0 3
18719: NOT
18720: IFFALSE 18621
// end ;
18722: PPOPN 3
18724: END
// every 0 0$1 trigger StreamModeActive and sTroll do
18725: LD_EXP 41
18729: PUSH
18730: LD_EXP 66
18734: AND
18735: IFFALSE 18789
18737: GO 18739
18739: DISABLE
// begin ToLua ( displayTroll(); ) ;
18740: LD_STRING displayTroll();
18742: PPUSH
18743: CALL_OW 559
// wait ( 3 3$00 ) ;
18747: LD_INT 6300
18749: PPUSH
18750: CALL_OW 67
// ToLua ( hideTroll(); ) ;
18754: LD_STRING hideTroll();
18756: PPUSH
18757: CALL_OW 559
// wait ( 1 1$00 ) ;
18761: LD_INT 2100
18763: PPUSH
18764: CALL_OW 67
// ToLua ( displayTroll(); ) ;
18768: LD_STRING displayTroll();
18770: PPUSH
18771: CALL_OW 559
// wait ( 1 1$00 ) ;
18775: LD_INT 2100
18777: PPUSH
18778: CALL_OW 67
// ToLua ( hideTroll(); ) ;
18782: LD_STRING hideTroll();
18784: PPUSH
18785: CALL_OW 559
// end ;
18789: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
18790: LD_EXP 41
18794: PUSH
18795: LD_EXP 67
18799: AND
18800: IFFALSE 18863
18802: GO 18804
18804: DISABLE
18805: LD_INT 0
18807: PPUSH
// begin p := 0 ;
18808: LD_ADDR_VAR 0 1
18812: PUSH
18813: LD_INT 0
18815: ST_TO_ADDR
// repeat game_speed := 1 ;
18816: LD_ADDR_OWVAR 65
18820: PUSH
18821: LD_INT 1
18823: ST_TO_ADDR
// wait ( 0 0$1 ) ;
18824: LD_INT 35
18826: PPUSH
18827: CALL_OW 67
// p := p + 1 ;
18831: LD_ADDR_VAR 0 1
18835: PUSH
18836: LD_VAR 0 1
18840: PUSH
18841: LD_INT 1
18843: PLUS
18844: ST_TO_ADDR
// until p >= 60 ;
18845: LD_VAR 0 1
18849: PUSH
18850: LD_INT 60
18852: GREATEREQUAL
18853: IFFALSE 18816
// game_speed := 4 ;
18855: LD_ADDR_OWVAR 65
18859: PUSH
18860: LD_INT 4
18862: ST_TO_ADDR
// end ;
18863: PPOPN 1
18865: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
18866: LD_EXP 41
18870: PUSH
18871: LD_EXP 68
18875: AND
18876: IFFALSE 19022
18878: GO 18880
18880: DISABLE
18881: LD_INT 0
18883: PPUSH
18884: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18885: LD_ADDR_VAR 0 1
18889: PUSH
18890: LD_INT 22
18892: PUSH
18893: LD_OWVAR 2
18897: PUSH
18898: EMPTY
18899: LIST
18900: LIST
18901: PUSH
18902: LD_INT 2
18904: PUSH
18905: LD_INT 30
18907: PUSH
18908: LD_INT 0
18910: PUSH
18911: EMPTY
18912: LIST
18913: LIST
18914: PUSH
18915: LD_INT 30
18917: PUSH
18918: LD_INT 1
18920: PUSH
18921: EMPTY
18922: LIST
18923: LIST
18924: PUSH
18925: EMPTY
18926: LIST
18927: LIST
18928: LIST
18929: PUSH
18930: EMPTY
18931: LIST
18932: LIST
18933: PPUSH
18934: CALL_OW 69
18938: ST_TO_ADDR
// if not depot then
18939: LD_VAR 0 1
18943: NOT
18944: IFFALSE 18948
// exit ;
18946: GO 19022
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
18948: LD_ADDR_VAR 0 2
18952: PUSH
18953: LD_VAR 0 1
18957: PUSH
18958: LD_INT 1
18960: PPUSH
18961: LD_VAR 0 1
18965: PPUSH
18966: CALL_OW 12
18970: ARRAY
18971: PPUSH
18972: CALL_OW 274
18976: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
18977: LD_VAR 0 2
18981: PPUSH
18982: LD_INT 1
18984: PPUSH
18985: LD_INT 0
18987: PPUSH
18988: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
18992: LD_VAR 0 2
18996: PPUSH
18997: LD_INT 2
18999: PPUSH
19000: LD_INT 0
19002: PPUSH
19003: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
19007: LD_VAR 0 2
19011: PPUSH
19012: LD_INT 3
19014: PPUSH
19015: LD_INT 0
19017: PPUSH
19018: CALL_OW 277
// end ;
19022: PPOPN 2
19024: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
19025: LD_EXP 41
19029: PUSH
19030: LD_EXP 69
19034: AND
19035: IFFALSE 19132
19037: GO 19039
19039: DISABLE
19040: LD_INT 0
19042: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19043: LD_ADDR_VAR 0 1
19047: PUSH
19048: LD_INT 22
19050: PUSH
19051: LD_OWVAR 2
19055: PUSH
19056: EMPTY
19057: LIST
19058: LIST
19059: PUSH
19060: LD_INT 21
19062: PUSH
19063: LD_INT 1
19065: PUSH
19066: EMPTY
19067: LIST
19068: LIST
19069: PUSH
19070: LD_INT 3
19072: PUSH
19073: LD_INT 23
19075: PUSH
19076: LD_INT 0
19078: PUSH
19079: EMPTY
19080: LIST
19081: LIST
19082: PUSH
19083: EMPTY
19084: LIST
19085: LIST
19086: PUSH
19087: EMPTY
19088: LIST
19089: LIST
19090: LIST
19091: PPUSH
19092: CALL_OW 69
19096: ST_TO_ADDR
// if not tmp then
19097: LD_VAR 0 1
19101: NOT
19102: IFFALSE 19106
// exit ;
19104: GO 19132
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
19106: LD_VAR 0 1
19110: PUSH
19111: LD_INT 1
19113: PPUSH
19114: LD_VAR 0 1
19118: PPUSH
19119: CALL_OW 12
19123: ARRAY
19124: PPUSH
19125: LD_INT 200
19127: PPUSH
19128: CALL_OW 234
// end ;
19132: PPOPN 1
19134: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
19135: LD_EXP 41
19139: PUSH
19140: LD_EXP 70
19144: AND
19145: IFFALSE 19224
19147: GO 19149
19149: DISABLE
19150: LD_INT 0
19152: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
19153: LD_ADDR_VAR 0 1
19157: PUSH
19158: LD_INT 22
19160: PUSH
19161: LD_OWVAR 2
19165: PUSH
19166: EMPTY
19167: LIST
19168: LIST
19169: PUSH
19170: LD_INT 21
19172: PUSH
19173: LD_INT 2
19175: PUSH
19176: EMPTY
19177: LIST
19178: LIST
19179: PUSH
19180: EMPTY
19181: LIST
19182: LIST
19183: PPUSH
19184: CALL_OW 69
19188: ST_TO_ADDR
// if not tmp then
19189: LD_VAR 0 1
19193: NOT
19194: IFFALSE 19198
// exit ;
19196: GO 19224
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
19198: LD_VAR 0 1
19202: PUSH
19203: LD_INT 1
19205: PPUSH
19206: LD_VAR 0 1
19210: PPUSH
19211: CALL_OW 12
19215: ARRAY
19216: PPUSH
19217: LD_INT 60
19219: PPUSH
19220: CALL_OW 234
// end ;
19224: PPOPN 1
19226: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
19227: LD_EXP 41
19231: PUSH
19232: LD_EXP 71
19236: AND
19237: IFFALSE 19336
19239: GO 19241
19241: DISABLE
19242: LD_INT 0
19244: PPUSH
19245: PPUSH
// begin enable ;
19246: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
19247: LD_ADDR_VAR 0 1
19251: PUSH
19252: LD_INT 22
19254: PUSH
19255: LD_OWVAR 2
19259: PUSH
19260: EMPTY
19261: LIST
19262: LIST
19263: PUSH
19264: LD_INT 61
19266: PUSH
19267: EMPTY
19268: LIST
19269: PUSH
19270: LD_INT 33
19272: PUSH
19273: LD_INT 2
19275: PUSH
19276: EMPTY
19277: LIST
19278: LIST
19279: PUSH
19280: EMPTY
19281: LIST
19282: LIST
19283: LIST
19284: PPUSH
19285: CALL_OW 69
19289: ST_TO_ADDR
// if not tmp then
19290: LD_VAR 0 1
19294: NOT
19295: IFFALSE 19299
// exit ;
19297: GO 19336
// for i in tmp do
19299: LD_ADDR_VAR 0 2
19303: PUSH
19304: LD_VAR 0 1
19308: PUSH
19309: FOR_IN
19310: IFFALSE 19334
// if IsControledBy ( i ) then
19312: LD_VAR 0 2
19316: PPUSH
19317: CALL_OW 312
19321: IFFALSE 19332
// ComUnlink ( i ) ;
19323: LD_VAR 0 2
19327: PPUSH
19328: CALL_OW 136
19332: GO 19309
19334: POP
19335: POP
// end ;
19336: PPOPN 2
19338: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
19339: LD_EXP 41
19343: PUSH
19344: LD_EXP 72
19348: AND
19349: IFFALSE 19489
19351: GO 19353
19353: DISABLE
19354: LD_INT 0
19356: PPUSH
19357: PPUSH
// begin ToLua ( displayPowell(); ) ;
19358: LD_STRING displayPowell();
19360: PPUSH
19361: CALL_OW 559
// uc_side := 0 ;
19365: LD_ADDR_OWVAR 20
19369: PUSH
19370: LD_INT 0
19372: ST_TO_ADDR
// uc_nation := 2 ;
19373: LD_ADDR_OWVAR 21
19377: PUSH
19378: LD_INT 2
19380: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
19381: LD_ADDR_OWVAR 37
19385: PUSH
19386: LD_INT 14
19388: ST_TO_ADDR
// vc_engine := engine_siberite ;
19389: LD_ADDR_OWVAR 39
19393: PUSH
19394: LD_INT 3
19396: ST_TO_ADDR
// vc_control := control_apeman ;
19397: LD_ADDR_OWVAR 38
19401: PUSH
19402: LD_INT 5
19404: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
19405: LD_ADDR_OWVAR 40
19409: PUSH
19410: LD_INT 29
19412: ST_TO_ADDR
// un := CreateVehicle ;
19413: LD_ADDR_VAR 0 2
19417: PUSH
19418: CALL_OW 45
19422: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19423: LD_VAR 0 2
19427: PPUSH
19428: LD_INT 1
19430: PPUSH
19431: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
19435: LD_INT 35
19437: PPUSH
19438: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
19442: LD_VAR 0 2
19446: PPUSH
19447: LD_INT 22
19449: PUSH
19450: LD_OWVAR 2
19454: PUSH
19455: EMPTY
19456: LIST
19457: LIST
19458: PPUSH
19459: CALL_OW 69
19463: PPUSH
19464: LD_VAR 0 2
19468: PPUSH
19469: CALL_OW 74
19473: PPUSH
19474: CALL_OW 115
// until IsDead ( un ) ;
19478: LD_VAR 0 2
19482: PPUSH
19483: CALL_OW 301
19487: IFFALSE 19435
// end ;
19489: PPOPN 2
19491: END
// every 0 0$1 trigger StreamModeActive and sStu do
19492: LD_EXP 41
19496: PUSH
19497: LD_EXP 80
19501: AND
19502: IFFALSE 19518
19504: GO 19506
19506: DISABLE
// begin ToLua ( displayStucuk(); ) ;
19507: LD_STRING displayStucuk();
19509: PPUSH
19510: CALL_OW 559
// ResetFog ;
19514: CALL_OW 335
// end ;
19518: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
19519: LD_EXP 41
19523: PUSH
19524: LD_EXP 73
19528: AND
19529: IFFALSE 19670
19531: GO 19533
19533: DISABLE
19534: LD_INT 0
19536: PPUSH
19537: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19538: LD_ADDR_VAR 0 2
19542: PUSH
19543: LD_INT 22
19545: PUSH
19546: LD_OWVAR 2
19550: PUSH
19551: EMPTY
19552: LIST
19553: LIST
19554: PUSH
19555: LD_INT 21
19557: PUSH
19558: LD_INT 1
19560: PUSH
19561: EMPTY
19562: LIST
19563: LIST
19564: PUSH
19565: EMPTY
19566: LIST
19567: LIST
19568: PPUSH
19569: CALL_OW 69
19573: ST_TO_ADDR
// if not tmp then
19574: LD_VAR 0 2
19578: NOT
19579: IFFALSE 19583
// exit ;
19581: GO 19670
// un := tmp [ rand ( 1 , tmp ) ] ;
19583: LD_ADDR_VAR 0 1
19587: PUSH
19588: LD_VAR 0 2
19592: PUSH
19593: LD_INT 1
19595: PPUSH
19596: LD_VAR 0 2
19600: PPUSH
19601: CALL_OW 12
19605: ARRAY
19606: ST_TO_ADDR
// SetSide ( un , 0 ) ;
19607: LD_VAR 0 1
19611: PPUSH
19612: LD_INT 0
19614: PPUSH
19615: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
19619: LD_VAR 0 1
19623: PPUSH
19624: LD_OWVAR 3
19628: PUSH
19629: LD_VAR 0 1
19633: DIFF
19634: PPUSH
19635: LD_VAR 0 1
19639: PPUSH
19640: CALL_OW 74
19644: PPUSH
19645: CALL_OW 115
// wait ( 0 0$20 ) ;
19649: LD_INT 700
19651: PPUSH
19652: CALL_OW 67
// SetSide ( un , your_side ) ;
19656: LD_VAR 0 1
19660: PPUSH
19661: LD_OWVAR 2
19665: PPUSH
19666: CALL_OW 235
// end ;
19670: PPOPN 2
19672: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
19673: LD_EXP 41
19677: PUSH
19678: LD_EXP 74
19682: AND
19683: IFFALSE 19789
19685: GO 19687
19687: DISABLE
19688: LD_INT 0
19690: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19691: LD_ADDR_VAR 0 1
19695: PUSH
19696: LD_INT 22
19698: PUSH
19699: LD_OWVAR 2
19703: PUSH
19704: EMPTY
19705: LIST
19706: LIST
19707: PUSH
19708: LD_INT 2
19710: PUSH
19711: LD_INT 30
19713: PUSH
19714: LD_INT 0
19716: PUSH
19717: EMPTY
19718: LIST
19719: LIST
19720: PUSH
19721: LD_INT 30
19723: PUSH
19724: LD_INT 1
19726: PUSH
19727: EMPTY
19728: LIST
19729: LIST
19730: PUSH
19731: EMPTY
19732: LIST
19733: LIST
19734: LIST
19735: PUSH
19736: EMPTY
19737: LIST
19738: LIST
19739: PPUSH
19740: CALL_OW 69
19744: ST_TO_ADDR
// if not depot then
19745: LD_VAR 0 1
19749: NOT
19750: IFFALSE 19754
// exit ;
19752: GO 19789
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
19754: LD_VAR 0 1
19758: PUSH
19759: LD_INT 1
19761: ARRAY
19762: PPUSH
19763: CALL_OW 250
19767: PPUSH
19768: LD_VAR 0 1
19772: PUSH
19773: LD_INT 1
19775: ARRAY
19776: PPUSH
19777: CALL_OW 251
19781: PPUSH
19782: LD_INT 70
19784: PPUSH
19785: CALL_OW 495
// end ;
19789: PPOPN 1
19791: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
19792: LD_EXP 41
19796: PUSH
19797: LD_EXP 75
19801: AND
19802: IFFALSE 20013
19804: GO 19806
19806: DISABLE
19807: LD_INT 0
19809: PPUSH
19810: PPUSH
19811: PPUSH
19812: PPUSH
19813: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19814: LD_ADDR_VAR 0 5
19818: PUSH
19819: LD_INT 22
19821: PUSH
19822: LD_OWVAR 2
19826: PUSH
19827: EMPTY
19828: LIST
19829: LIST
19830: PUSH
19831: LD_INT 21
19833: PUSH
19834: LD_INT 1
19836: PUSH
19837: EMPTY
19838: LIST
19839: LIST
19840: PUSH
19841: EMPTY
19842: LIST
19843: LIST
19844: PPUSH
19845: CALL_OW 69
19849: ST_TO_ADDR
// if not tmp then
19850: LD_VAR 0 5
19854: NOT
19855: IFFALSE 19859
// exit ;
19857: GO 20013
// for i in tmp do
19859: LD_ADDR_VAR 0 1
19863: PUSH
19864: LD_VAR 0 5
19868: PUSH
19869: FOR_IN
19870: IFFALSE 20011
// begin d := rand ( 0 , 5 ) ;
19872: LD_ADDR_VAR 0 4
19876: PUSH
19877: LD_INT 0
19879: PPUSH
19880: LD_INT 5
19882: PPUSH
19883: CALL_OW 12
19887: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
19888: LD_ADDR_VAR 0 2
19892: PUSH
19893: LD_VAR 0 1
19897: PPUSH
19898: CALL_OW 250
19902: PPUSH
19903: LD_VAR 0 4
19907: PPUSH
19908: LD_INT 3
19910: PPUSH
19911: LD_INT 12
19913: PPUSH
19914: CALL_OW 12
19918: PPUSH
19919: CALL_OW 272
19923: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
19924: LD_ADDR_VAR 0 3
19928: PUSH
19929: LD_VAR 0 1
19933: PPUSH
19934: CALL_OW 251
19938: PPUSH
19939: LD_VAR 0 4
19943: PPUSH
19944: LD_INT 3
19946: PPUSH
19947: LD_INT 12
19949: PPUSH
19950: CALL_OW 12
19954: PPUSH
19955: CALL_OW 273
19959: ST_TO_ADDR
// if ValidHex ( x , y ) then
19960: LD_VAR 0 2
19964: PPUSH
19965: LD_VAR 0 3
19969: PPUSH
19970: CALL_OW 488
19974: IFFALSE 20009
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
19976: LD_VAR 0 1
19980: PPUSH
19981: LD_VAR 0 2
19985: PPUSH
19986: LD_VAR 0 3
19990: PPUSH
19991: LD_INT 3
19993: PPUSH
19994: LD_INT 6
19996: PPUSH
19997: CALL_OW 12
20001: PPUSH
20002: LD_INT 1
20004: PPUSH
20005: CALL_OW 483
// end ;
20009: GO 19869
20011: POP
20012: POP
// end ;
20013: PPOPN 5
20015: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
20016: LD_EXP 41
20020: PUSH
20021: LD_EXP 76
20025: AND
20026: IFFALSE 20120
20028: GO 20030
20030: DISABLE
20031: LD_INT 0
20033: PPUSH
20034: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
20035: LD_ADDR_VAR 0 2
20039: PUSH
20040: LD_INT 22
20042: PUSH
20043: LD_OWVAR 2
20047: PUSH
20048: EMPTY
20049: LIST
20050: LIST
20051: PUSH
20052: LD_INT 32
20054: PUSH
20055: LD_INT 1
20057: PUSH
20058: EMPTY
20059: LIST
20060: LIST
20061: PUSH
20062: LD_INT 21
20064: PUSH
20065: LD_INT 2
20067: PUSH
20068: EMPTY
20069: LIST
20070: LIST
20071: PUSH
20072: EMPTY
20073: LIST
20074: LIST
20075: LIST
20076: PPUSH
20077: CALL_OW 69
20081: ST_TO_ADDR
// if not tmp then
20082: LD_VAR 0 2
20086: NOT
20087: IFFALSE 20091
// exit ;
20089: GO 20120
// for i in tmp do
20091: LD_ADDR_VAR 0 1
20095: PUSH
20096: LD_VAR 0 2
20100: PUSH
20101: FOR_IN
20102: IFFALSE 20118
// SetFuel ( i , 0 ) ;
20104: LD_VAR 0 1
20108: PPUSH
20109: LD_INT 0
20111: PPUSH
20112: CALL_OW 240
20116: GO 20101
20118: POP
20119: POP
// end ;
20120: PPOPN 2
20122: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
20123: LD_EXP 41
20127: PUSH
20128: LD_EXP 77
20132: AND
20133: IFFALSE 20199
20135: GO 20137
20137: DISABLE
20138: LD_INT 0
20140: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
20141: LD_ADDR_VAR 0 1
20145: PUSH
20146: LD_INT 22
20148: PUSH
20149: LD_OWVAR 2
20153: PUSH
20154: EMPTY
20155: LIST
20156: LIST
20157: PUSH
20158: LD_INT 30
20160: PUSH
20161: LD_INT 29
20163: PUSH
20164: EMPTY
20165: LIST
20166: LIST
20167: PUSH
20168: EMPTY
20169: LIST
20170: LIST
20171: PPUSH
20172: CALL_OW 69
20176: ST_TO_ADDR
// if not tmp then
20177: LD_VAR 0 1
20181: NOT
20182: IFFALSE 20186
// exit ;
20184: GO 20199
// DestroyUnit ( tmp [ 1 ] ) ;
20186: LD_VAR 0 1
20190: PUSH
20191: LD_INT 1
20193: ARRAY
20194: PPUSH
20195: CALL_OW 65
// end ;
20199: PPOPN 1
20201: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
20202: LD_EXP 41
20206: PUSH
20207: LD_EXP 79
20211: AND
20212: IFFALSE 20341
20214: GO 20216
20216: DISABLE
20217: LD_INT 0
20219: PPUSH
// begin uc_side := 0 ;
20220: LD_ADDR_OWVAR 20
20224: PUSH
20225: LD_INT 0
20227: ST_TO_ADDR
// uc_nation := nation_arabian ;
20228: LD_ADDR_OWVAR 21
20232: PUSH
20233: LD_INT 2
20235: ST_TO_ADDR
// hc_gallery :=  ;
20236: LD_ADDR_OWVAR 33
20240: PUSH
20241: LD_STRING 
20243: ST_TO_ADDR
// hc_name :=  ;
20244: LD_ADDR_OWVAR 26
20248: PUSH
20249: LD_STRING 
20251: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
20252: LD_INT 1
20254: PPUSH
20255: LD_INT 11
20257: PPUSH
20258: LD_INT 10
20260: PPUSH
20261: CALL_OW 380
// un := CreateHuman ;
20265: LD_ADDR_VAR 0 1
20269: PUSH
20270: CALL_OW 44
20274: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20275: LD_VAR 0 1
20279: PPUSH
20280: LD_INT 1
20282: PPUSH
20283: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20287: LD_INT 35
20289: PPUSH
20290: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20294: LD_VAR 0 1
20298: PPUSH
20299: LD_INT 22
20301: PUSH
20302: LD_OWVAR 2
20306: PUSH
20307: EMPTY
20308: LIST
20309: LIST
20310: PPUSH
20311: CALL_OW 69
20315: PPUSH
20316: LD_VAR 0 1
20320: PPUSH
20321: CALL_OW 74
20325: PPUSH
20326: CALL_OW 115
// until IsDead ( un ) ;
20330: LD_VAR 0 1
20334: PPUSH
20335: CALL_OW 301
20339: IFFALSE 20287
// end ;
20341: PPOPN 1
20343: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
20344: LD_EXP 41
20348: PUSH
20349: LD_EXP 81
20353: AND
20354: IFFALSE 20366
20356: GO 20358
20358: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
20359: LD_STRING earthquake(getX(game), 0, 32)
20361: PPUSH
20362: CALL_OW 559
20366: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
20367: LD_EXP 41
20371: PUSH
20372: LD_EXP 82
20376: AND
20377: IFFALSE 20468
20379: GO 20381
20381: DISABLE
20382: LD_INT 0
20384: PPUSH
// begin enable ;
20385: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
20386: LD_ADDR_VAR 0 1
20390: PUSH
20391: LD_INT 22
20393: PUSH
20394: LD_OWVAR 2
20398: PUSH
20399: EMPTY
20400: LIST
20401: LIST
20402: PUSH
20403: LD_INT 21
20405: PUSH
20406: LD_INT 2
20408: PUSH
20409: EMPTY
20410: LIST
20411: LIST
20412: PUSH
20413: LD_INT 33
20415: PUSH
20416: LD_INT 3
20418: PUSH
20419: EMPTY
20420: LIST
20421: LIST
20422: PUSH
20423: EMPTY
20424: LIST
20425: LIST
20426: LIST
20427: PPUSH
20428: CALL_OW 69
20432: ST_TO_ADDR
// if not tmp then
20433: LD_VAR 0 1
20437: NOT
20438: IFFALSE 20442
// exit ;
20440: GO 20468
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
20442: LD_VAR 0 1
20446: PUSH
20447: LD_INT 1
20449: PPUSH
20450: LD_VAR 0 1
20454: PPUSH
20455: CALL_OW 12
20459: ARRAY
20460: PPUSH
20461: LD_INT 1
20463: PPUSH
20464: CALL_OW 234
// end ;
20468: PPOPN 1
20470: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
20471: LD_EXP 41
20475: PUSH
20476: LD_EXP 83
20480: AND
20481: IFFALSE 20622
20483: GO 20485
20485: DISABLE
20486: LD_INT 0
20488: PPUSH
20489: PPUSH
20490: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20491: LD_ADDR_VAR 0 3
20495: PUSH
20496: LD_INT 22
20498: PUSH
20499: LD_OWVAR 2
20503: PUSH
20504: EMPTY
20505: LIST
20506: LIST
20507: PUSH
20508: LD_INT 25
20510: PUSH
20511: LD_INT 1
20513: PUSH
20514: EMPTY
20515: LIST
20516: LIST
20517: PUSH
20518: EMPTY
20519: LIST
20520: LIST
20521: PPUSH
20522: CALL_OW 69
20526: ST_TO_ADDR
// if not tmp then
20527: LD_VAR 0 3
20531: NOT
20532: IFFALSE 20536
// exit ;
20534: GO 20622
// un := tmp [ rand ( 1 , tmp ) ] ;
20536: LD_ADDR_VAR 0 2
20540: PUSH
20541: LD_VAR 0 3
20545: PUSH
20546: LD_INT 1
20548: PPUSH
20549: LD_VAR 0 3
20553: PPUSH
20554: CALL_OW 12
20558: ARRAY
20559: ST_TO_ADDR
// if Crawls ( un ) then
20560: LD_VAR 0 2
20564: PPUSH
20565: CALL_OW 318
20569: IFFALSE 20580
// ComWalk ( un ) ;
20571: LD_VAR 0 2
20575: PPUSH
20576: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
20580: LD_VAR 0 2
20584: PPUSH
20585: LD_INT 9
20587: PPUSH
20588: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
20592: LD_INT 28
20594: PPUSH
20595: LD_OWVAR 2
20599: PPUSH
20600: LD_INT 2
20602: PPUSH
20603: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
20607: LD_INT 29
20609: PPUSH
20610: LD_OWVAR 2
20614: PPUSH
20615: LD_INT 2
20617: PPUSH
20618: CALL_OW 322
// end ;
20622: PPOPN 3
20624: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
20625: LD_EXP 41
20629: PUSH
20630: LD_EXP 84
20634: AND
20635: IFFALSE 20746
20637: GO 20639
20639: DISABLE
20640: LD_INT 0
20642: PPUSH
20643: PPUSH
20644: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20645: LD_ADDR_VAR 0 3
20649: PUSH
20650: LD_INT 22
20652: PUSH
20653: LD_OWVAR 2
20657: PUSH
20658: EMPTY
20659: LIST
20660: LIST
20661: PUSH
20662: LD_INT 25
20664: PUSH
20665: LD_INT 1
20667: PUSH
20668: EMPTY
20669: LIST
20670: LIST
20671: PUSH
20672: EMPTY
20673: LIST
20674: LIST
20675: PPUSH
20676: CALL_OW 69
20680: ST_TO_ADDR
// if not tmp then
20681: LD_VAR 0 3
20685: NOT
20686: IFFALSE 20690
// exit ;
20688: GO 20746
// un := tmp [ rand ( 1 , tmp ) ] ;
20690: LD_ADDR_VAR 0 2
20694: PUSH
20695: LD_VAR 0 3
20699: PUSH
20700: LD_INT 1
20702: PPUSH
20703: LD_VAR 0 3
20707: PPUSH
20708: CALL_OW 12
20712: ARRAY
20713: ST_TO_ADDR
// if Crawls ( un ) then
20714: LD_VAR 0 2
20718: PPUSH
20719: CALL_OW 318
20723: IFFALSE 20734
// ComWalk ( un ) ;
20725: LD_VAR 0 2
20729: PPUSH
20730: CALL_OW 138
// SetClass ( un , class_mortar ) ;
20734: LD_VAR 0 2
20738: PPUSH
20739: LD_INT 8
20741: PPUSH
20742: CALL_OW 336
// end ;
20746: PPOPN 3
20748: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
20749: LD_EXP 41
20753: PUSH
20754: LD_EXP 85
20758: AND
20759: IFFALSE 20903
20761: GO 20763
20763: DISABLE
20764: LD_INT 0
20766: PPUSH
20767: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
20768: LD_ADDR_VAR 0 2
20772: PUSH
20773: LD_INT 22
20775: PUSH
20776: LD_OWVAR 2
20780: PUSH
20781: EMPTY
20782: LIST
20783: LIST
20784: PUSH
20785: LD_INT 21
20787: PUSH
20788: LD_INT 2
20790: PUSH
20791: EMPTY
20792: LIST
20793: LIST
20794: PUSH
20795: LD_INT 2
20797: PUSH
20798: LD_INT 34
20800: PUSH
20801: LD_INT 12
20803: PUSH
20804: EMPTY
20805: LIST
20806: LIST
20807: PUSH
20808: LD_INT 34
20810: PUSH
20811: LD_INT 51
20813: PUSH
20814: EMPTY
20815: LIST
20816: LIST
20817: PUSH
20818: LD_INT 34
20820: PUSH
20821: LD_INT 32
20823: PUSH
20824: EMPTY
20825: LIST
20826: LIST
20827: PUSH
20828: EMPTY
20829: LIST
20830: LIST
20831: LIST
20832: LIST
20833: PUSH
20834: EMPTY
20835: LIST
20836: LIST
20837: LIST
20838: PPUSH
20839: CALL_OW 69
20843: ST_TO_ADDR
// if not tmp then
20844: LD_VAR 0 2
20848: NOT
20849: IFFALSE 20853
// exit ;
20851: GO 20903
// for i in tmp do
20853: LD_ADDR_VAR 0 1
20857: PUSH
20858: LD_VAR 0 2
20862: PUSH
20863: FOR_IN
20864: IFFALSE 20901
// if GetCargo ( i , mat_artifact ) = 0 then
20866: LD_VAR 0 1
20870: PPUSH
20871: LD_INT 4
20873: PPUSH
20874: CALL_OW 289
20878: PUSH
20879: LD_INT 0
20881: EQUAL
20882: IFFALSE 20899
// SetCargo ( i , mat_siberit , 100 ) ;
20884: LD_VAR 0 1
20888: PPUSH
20889: LD_INT 3
20891: PPUSH
20892: LD_INT 100
20894: PPUSH
20895: CALL_OW 290
20899: GO 20863
20901: POP
20902: POP
// end ;
20903: PPOPN 2
20905: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
20906: LD_EXP 41
20910: PUSH
20911: LD_EXP 86
20915: AND
20916: IFFALSE 21099
20918: GO 20920
20920: DISABLE
20921: LD_INT 0
20923: PPUSH
20924: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
20925: LD_ADDR_VAR 0 2
20929: PUSH
20930: LD_INT 22
20932: PUSH
20933: LD_OWVAR 2
20937: PUSH
20938: EMPTY
20939: LIST
20940: LIST
20941: PPUSH
20942: CALL_OW 69
20946: ST_TO_ADDR
// if not tmp then
20947: LD_VAR 0 2
20951: NOT
20952: IFFALSE 20956
// exit ;
20954: GO 21099
// for i := 1 to 2 do
20956: LD_ADDR_VAR 0 1
20960: PUSH
20961: DOUBLE
20962: LD_INT 1
20964: DEC
20965: ST_TO_ADDR
20966: LD_INT 2
20968: PUSH
20969: FOR_TO
20970: IFFALSE 21097
// begin uc_side := your_side ;
20972: LD_ADDR_OWVAR 20
20976: PUSH
20977: LD_OWVAR 2
20981: ST_TO_ADDR
// uc_nation := nation_american ;
20982: LD_ADDR_OWVAR 21
20986: PUSH
20987: LD_INT 1
20989: ST_TO_ADDR
// vc_chassis := us_morphling ;
20990: LD_ADDR_OWVAR 37
20994: PUSH
20995: LD_INT 5
20997: ST_TO_ADDR
// vc_engine := engine_siberite ;
20998: LD_ADDR_OWVAR 39
21002: PUSH
21003: LD_INT 3
21005: ST_TO_ADDR
// vc_control := control_computer ;
21006: LD_ADDR_OWVAR 38
21010: PUSH
21011: LD_INT 3
21013: ST_TO_ADDR
// vc_weapon := us_double_laser ;
21014: LD_ADDR_OWVAR 40
21018: PUSH
21019: LD_INT 10
21021: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
21022: LD_VAR 0 2
21026: PUSH
21027: LD_INT 1
21029: ARRAY
21030: PPUSH
21031: CALL_OW 310
21035: NOT
21036: IFFALSE 21083
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
21038: CALL_OW 45
21042: PPUSH
21043: LD_VAR 0 2
21047: PUSH
21048: LD_INT 1
21050: ARRAY
21051: PPUSH
21052: CALL_OW 250
21056: PPUSH
21057: LD_VAR 0 2
21061: PUSH
21062: LD_INT 1
21064: ARRAY
21065: PPUSH
21066: CALL_OW 251
21070: PPUSH
21071: LD_INT 12
21073: PPUSH
21074: LD_INT 1
21076: PPUSH
21077: CALL_OW 50
21081: GO 21095
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
21083: CALL_OW 45
21087: PPUSH
21088: LD_INT 1
21090: PPUSH
21091: CALL_OW 51
// end ;
21095: GO 20969
21097: POP
21098: POP
// end ;
21099: PPOPN 2
21101: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
21102: LD_EXP 41
21106: PUSH
21107: LD_EXP 87
21111: AND
21112: IFFALSE 21334
21114: GO 21116
21116: DISABLE
21117: LD_INT 0
21119: PPUSH
21120: PPUSH
21121: PPUSH
21122: PPUSH
21123: PPUSH
21124: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21125: LD_ADDR_VAR 0 6
21129: PUSH
21130: LD_INT 22
21132: PUSH
21133: LD_OWVAR 2
21137: PUSH
21138: EMPTY
21139: LIST
21140: LIST
21141: PUSH
21142: LD_INT 21
21144: PUSH
21145: LD_INT 1
21147: PUSH
21148: EMPTY
21149: LIST
21150: LIST
21151: PUSH
21152: LD_INT 3
21154: PUSH
21155: LD_INT 23
21157: PUSH
21158: LD_INT 0
21160: PUSH
21161: EMPTY
21162: LIST
21163: LIST
21164: PUSH
21165: EMPTY
21166: LIST
21167: LIST
21168: PUSH
21169: EMPTY
21170: LIST
21171: LIST
21172: LIST
21173: PPUSH
21174: CALL_OW 69
21178: ST_TO_ADDR
// if not tmp then
21179: LD_VAR 0 6
21183: NOT
21184: IFFALSE 21188
// exit ;
21186: GO 21334
// s1 := rand ( 1 , 4 ) ;
21188: LD_ADDR_VAR 0 2
21192: PUSH
21193: LD_INT 1
21195: PPUSH
21196: LD_INT 4
21198: PPUSH
21199: CALL_OW 12
21203: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
21204: LD_ADDR_VAR 0 4
21208: PUSH
21209: LD_VAR 0 6
21213: PUSH
21214: LD_INT 1
21216: ARRAY
21217: PPUSH
21218: LD_VAR 0 2
21222: PPUSH
21223: CALL_OW 259
21227: ST_TO_ADDR
// if s1 = 1 then
21228: LD_VAR 0 2
21232: PUSH
21233: LD_INT 1
21235: EQUAL
21236: IFFALSE 21256
// s2 := rand ( 2 , 4 ) else
21238: LD_ADDR_VAR 0 3
21242: PUSH
21243: LD_INT 2
21245: PPUSH
21246: LD_INT 4
21248: PPUSH
21249: CALL_OW 12
21253: ST_TO_ADDR
21254: GO 21264
// s2 := 1 ;
21256: LD_ADDR_VAR 0 3
21260: PUSH
21261: LD_INT 1
21263: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
21264: LD_ADDR_VAR 0 5
21268: PUSH
21269: LD_VAR 0 6
21273: PUSH
21274: LD_INT 1
21276: ARRAY
21277: PPUSH
21278: LD_VAR 0 3
21282: PPUSH
21283: CALL_OW 259
21287: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
21288: LD_VAR 0 6
21292: PUSH
21293: LD_INT 1
21295: ARRAY
21296: PPUSH
21297: LD_VAR 0 2
21301: PPUSH
21302: LD_VAR 0 5
21306: PPUSH
21307: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
21311: LD_VAR 0 6
21315: PUSH
21316: LD_INT 1
21318: ARRAY
21319: PPUSH
21320: LD_VAR 0 3
21324: PPUSH
21325: LD_VAR 0 4
21329: PPUSH
21330: CALL_OW 237
// end ;
21334: PPOPN 6
21336: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
21337: LD_EXP 41
21341: PUSH
21342: LD_EXP 88
21346: AND
21347: IFFALSE 21426
21349: GO 21351
21351: DISABLE
21352: LD_INT 0
21354: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
21355: LD_ADDR_VAR 0 1
21359: PUSH
21360: LD_INT 22
21362: PUSH
21363: LD_OWVAR 2
21367: PUSH
21368: EMPTY
21369: LIST
21370: LIST
21371: PUSH
21372: LD_INT 30
21374: PUSH
21375: LD_INT 3
21377: PUSH
21378: EMPTY
21379: LIST
21380: LIST
21381: PUSH
21382: EMPTY
21383: LIST
21384: LIST
21385: PPUSH
21386: CALL_OW 69
21390: ST_TO_ADDR
// if not tmp then
21391: LD_VAR 0 1
21395: NOT
21396: IFFALSE 21400
// exit ;
21398: GO 21426
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21400: LD_VAR 0 1
21404: PUSH
21405: LD_INT 1
21407: PPUSH
21408: LD_VAR 0 1
21412: PPUSH
21413: CALL_OW 12
21417: ARRAY
21418: PPUSH
21419: LD_INT 1
21421: PPUSH
21422: CALL_OW 234
// end ;
21426: PPOPN 1
21428: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
21429: LD_EXP 41
21433: PUSH
21434: LD_EXP 89
21438: AND
21439: IFFALSE 21551
21441: GO 21443
21443: DISABLE
21444: LD_INT 0
21446: PPUSH
21447: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
21448: LD_ADDR_VAR 0 2
21452: PUSH
21453: LD_INT 22
21455: PUSH
21456: LD_OWVAR 2
21460: PUSH
21461: EMPTY
21462: LIST
21463: LIST
21464: PUSH
21465: LD_INT 2
21467: PUSH
21468: LD_INT 30
21470: PUSH
21471: LD_INT 27
21473: PUSH
21474: EMPTY
21475: LIST
21476: LIST
21477: PUSH
21478: LD_INT 30
21480: PUSH
21481: LD_INT 26
21483: PUSH
21484: EMPTY
21485: LIST
21486: LIST
21487: PUSH
21488: LD_INT 30
21490: PUSH
21491: LD_INT 28
21493: PUSH
21494: EMPTY
21495: LIST
21496: LIST
21497: PUSH
21498: EMPTY
21499: LIST
21500: LIST
21501: LIST
21502: LIST
21503: PUSH
21504: EMPTY
21505: LIST
21506: LIST
21507: PPUSH
21508: CALL_OW 69
21512: ST_TO_ADDR
// if not tmp then
21513: LD_VAR 0 2
21517: NOT
21518: IFFALSE 21522
// exit ;
21520: GO 21551
// for i in tmp do
21522: LD_ADDR_VAR 0 1
21526: PUSH
21527: LD_VAR 0 2
21531: PUSH
21532: FOR_IN
21533: IFFALSE 21549
// SetLives ( i , 1 ) ;
21535: LD_VAR 0 1
21539: PPUSH
21540: LD_INT 1
21542: PPUSH
21543: CALL_OW 234
21547: GO 21532
21549: POP
21550: POP
// end ;
21551: PPOPN 2
21553: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
21554: LD_EXP 41
21558: PUSH
21559: LD_EXP 90
21563: AND
21564: IFFALSE 21838
21566: GO 21568
21568: DISABLE
21569: LD_INT 0
21571: PPUSH
21572: PPUSH
21573: PPUSH
// begin i := rand ( 1 , 7 ) ;
21574: LD_ADDR_VAR 0 1
21578: PUSH
21579: LD_INT 1
21581: PPUSH
21582: LD_INT 7
21584: PPUSH
21585: CALL_OW 12
21589: ST_TO_ADDR
// case i of 1 :
21590: LD_VAR 0 1
21594: PUSH
21595: LD_INT 1
21597: DOUBLE
21598: EQUAL
21599: IFTRUE 21603
21601: GO 21613
21603: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
21604: LD_STRING earthquake(getX(game), 0, 32)
21606: PPUSH
21607: CALL_OW 559
21611: GO 21838
21613: LD_INT 2
21615: DOUBLE
21616: EQUAL
21617: IFTRUE 21621
21619: GO 21635
21621: POP
// begin ToLua ( displayStucuk(); ) ;
21622: LD_STRING displayStucuk();
21624: PPUSH
21625: CALL_OW 559
// ResetFog ;
21629: CALL_OW 335
// end ; 3 :
21633: GO 21838
21635: LD_INT 3
21637: DOUBLE
21638: EQUAL
21639: IFTRUE 21643
21641: GO 21747
21643: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21644: LD_ADDR_VAR 0 2
21648: PUSH
21649: LD_INT 22
21651: PUSH
21652: LD_OWVAR 2
21656: PUSH
21657: EMPTY
21658: LIST
21659: LIST
21660: PUSH
21661: LD_INT 25
21663: PUSH
21664: LD_INT 1
21666: PUSH
21667: EMPTY
21668: LIST
21669: LIST
21670: PUSH
21671: EMPTY
21672: LIST
21673: LIST
21674: PPUSH
21675: CALL_OW 69
21679: ST_TO_ADDR
// if not tmp then
21680: LD_VAR 0 2
21684: NOT
21685: IFFALSE 21689
// exit ;
21687: GO 21838
// un := tmp [ rand ( 1 , tmp ) ] ;
21689: LD_ADDR_VAR 0 3
21693: PUSH
21694: LD_VAR 0 2
21698: PUSH
21699: LD_INT 1
21701: PPUSH
21702: LD_VAR 0 2
21706: PPUSH
21707: CALL_OW 12
21711: ARRAY
21712: ST_TO_ADDR
// if Crawls ( un ) then
21713: LD_VAR 0 3
21717: PPUSH
21718: CALL_OW 318
21722: IFFALSE 21733
// ComWalk ( un ) ;
21724: LD_VAR 0 3
21728: PPUSH
21729: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21733: LD_VAR 0 3
21737: PPUSH
21738: LD_INT 8
21740: PPUSH
21741: CALL_OW 336
// end ; 4 :
21745: GO 21838
21747: LD_INT 4
21749: DOUBLE
21750: EQUAL
21751: IFTRUE 21755
21753: GO 21816
21755: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
21756: LD_ADDR_VAR 0 2
21760: PUSH
21761: LD_INT 22
21763: PUSH
21764: LD_OWVAR 2
21768: PUSH
21769: EMPTY
21770: LIST
21771: LIST
21772: PUSH
21773: LD_INT 30
21775: PUSH
21776: LD_INT 29
21778: PUSH
21779: EMPTY
21780: LIST
21781: LIST
21782: PUSH
21783: EMPTY
21784: LIST
21785: LIST
21786: PPUSH
21787: CALL_OW 69
21791: ST_TO_ADDR
// if not tmp then
21792: LD_VAR 0 2
21796: NOT
21797: IFFALSE 21801
// exit ;
21799: GO 21838
// DestroyUnit ( tmp [ 1 ] ) ;
21801: LD_VAR 0 2
21805: PUSH
21806: LD_INT 1
21808: ARRAY
21809: PPUSH
21810: CALL_OW 65
// end ; 5 .. 7 :
21814: GO 21838
21816: LD_INT 5
21818: DOUBLE
21819: GREATEREQUAL
21820: IFFALSE 21828
21822: LD_INT 7
21824: DOUBLE
21825: LESSEQUAL
21826: IFTRUE 21830
21828: GO 21837
21830: POP
// StreamSibBomb ; end ;
21831: CALL 18088 0 0
21835: GO 21838
21837: POP
// end ;
21838: PPOPN 3
21840: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
21841: LD_EXP 41
21845: PUSH
21846: LD_EXP 91
21850: AND
21851: IFFALSE 22007
21853: GO 21855
21855: DISABLE
21856: LD_INT 0
21858: PPUSH
21859: PPUSH
21860: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
21861: LD_ADDR_VAR 0 2
21865: PUSH
21866: LD_INT 81
21868: PUSH
21869: LD_OWVAR 2
21873: PUSH
21874: EMPTY
21875: LIST
21876: LIST
21877: PUSH
21878: LD_INT 2
21880: PUSH
21881: LD_INT 21
21883: PUSH
21884: LD_INT 1
21886: PUSH
21887: EMPTY
21888: LIST
21889: LIST
21890: PUSH
21891: LD_INT 21
21893: PUSH
21894: LD_INT 2
21896: PUSH
21897: EMPTY
21898: LIST
21899: LIST
21900: PUSH
21901: EMPTY
21902: LIST
21903: LIST
21904: LIST
21905: PUSH
21906: EMPTY
21907: LIST
21908: LIST
21909: PPUSH
21910: CALL_OW 69
21914: ST_TO_ADDR
// if not tmp then
21915: LD_VAR 0 2
21919: NOT
21920: IFFALSE 21924
// exit ;
21922: GO 22007
// p := 0 ;
21924: LD_ADDR_VAR 0 3
21928: PUSH
21929: LD_INT 0
21931: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
21932: LD_INT 35
21934: PPUSH
21935: CALL_OW 67
// p := p + 1 ;
21939: LD_ADDR_VAR 0 3
21943: PUSH
21944: LD_VAR 0 3
21948: PUSH
21949: LD_INT 1
21951: PLUS
21952: ST_TO_ADDR
// for i in tmp do
21953: LD_ADDR_VAR 0 1
21957: PUSH
21958: LD_VAR 0 2
21962: PUSH
21963: FOR_IN
21964: IFFALSE 21995
// if GetLives ( i ) < 1000 then
21966: LD_VAR 0 1
21970: PPUSH
21971: CALL_OW 256
21975: PUSH
21976: LD_INT 1000
21978: LESS
21979: IFFALSE 21993
// SetLives ( i , 1000 ) ;
21981: LD_VAR 0 1
21985: PPUSH
21986: LD_INT 1000
21988: PPUSH
21989: CALL_OW 234
21993: GO 21963
21995: POP
21996: POP
// until p > 20 ;
21997: LD_VAR 0 3
22001: PUSH
22002: LD_INT 20
22004: GREATER
22005: IFFALSE 21932
// end ;
22007: PPOPN 3
22009: END
// every 0 0$1 trigger StreamModeActive and sTime do
22010: LD_EXP 41
22014: PUSH
22015: LD_EXP 92
22019: AND
22020: IFFALSE 22055
22022: GO 22024
22024: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
22025: LD_INT 28
22027: PPUSH
22028: LD_OWVAR 2
22032: PPUSH
22033: LD_INT 2
22035: PPUSH
22036: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
22040: LD_INT 30
22042: PPUSH
22043: LD_OWVAR 2
22047: PPUSH
22048: LD_INT 2
22050: PPUSH
22051: CALL_OW 322
// end ;
22055: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
22056: LD_EXP 41
22060: PUSH
22061: LD_EXP 93
22065: AND
22066: IFFALSE 22187
22068: GO 22070
22070: DISABLE
22071: LD_INT 0
22073: PPUSH
22074: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22075: LD_ADDR_VAR 0 2
22079: PUSH
22080: LD_INT 22
22082: PUSH
22083: LD_OWVAR 2
22087: PUSH
22088: EMPTY
22089: LIST
22090: LIST
22091: PUSH
22092: LD_INT 21
22094: PUSH
22095: LD_INT 1
22097: PUSH
22098: EMPTY
22099: LIST
22100: LIST
22101: PUSH
22102: LD_INT 3
22104: PUSH
22105: LD_INT 23
22107: PUSH
22108: LD_INT 0
22110: PUSH
22111: EMPTY
22112: LIST
22113: LIST
22114: PUSH
22115: EMPTY
22116: LIST
22117: LIST
22118: PUSH
22119: EMPTY
22120: LIST
22121: LIST
22122: LIST
22123: PPUSH
22124: CALL_OW 69
22128: ST_TO_ADDR
// if not tmp then
22129: LD_VAR 0 2
22133: NOT
22134: IFFALSE 22138
// exit ;
22136: GO 22187
// for i in tmp do
22138: LD_ADDR_VAR 0 1
22142: PUSH
22143: LD_VAR 0 2
22147: PUSH
22148: FOR_IN
22149: IFFALSE 22185
// begin if Crawls ( i ) then
22151: LD_VAR 0 1
22155: PPUSH
22156: CALL_OW 318
22160: IFFALSE 22171
// ComWalk ( i ) ;
22162: LD_VAR 0 1
22166: PPUSH
22167: CALL_OW 138
// SetClass ( i , 2 ) ;
22171: LD_VAR 0 1
22175: PPUSH
22176: LD_INT 2
22178: PPUSH
22179: CALL_OW 336
// end ;
22183: GO 22148
22185: POP
22186: POP
// end ;
22187: PPOPN 2
22189: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
22190: LD_EXP 41
22194: PUSH
22195: LD_EXP 94
22199: AND
22200: IFFALSE 22481
22202: GO 22204
22204: DISABLE
22205: LD_INT 0
22207: PPUSH
22208: PPUSH
22209: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
22210: LD_OWVAR 2
22214: PPUSH
22215: LD_INT 9
22217: PPUSH
22218: LD_INT 1
22220: PPUSH
22221: LD_INT 1
22223: PPUSH
22224: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
22228: LD_INT 9
22230: PPUSH
22231: LD_OWVAR 2
22235: PPUSH
22236: CALL_OW 343
// uc_side := 9 ;
22240: LD_ADDR_OWVAR 20
22244: PUSH
22245: LD_INT 9
22247: ST_TO_ADDR
// uc_nation := 2 ;
22248: LD_ADDR_OWVAR 21
22252: PUSH
22253: LD_INT 2
22255: ST_TO_ADDR
// hc_name := Dark Warrior ;
22256: LD_ADDR_OWVAR 26
22260: PUSH
22261: LD_STRING Dark Warrior
22263: ST_TO_ADDR
// hc_gallery :=  ;
22264: LD_ADDR_OWVAR 33
22268: PUSH
22269: LD_STRING 
22271: ST_TO_ADDR
// hc_noskilllimit := true ;
22272: LD_ADDR_OWVAR 76
22276: PUSH
22277: LD_INT 1
22279: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
22280: LD_ADDR_OWVAR 31
22284: PUSH
22285: LD_INT 30
22287: PUSH
22288: LD_INT 30
22290: PUSH
22291: LD_INT 30
22293: PUSH
22294: LD_INT 30
22296: PUSH
22297: EMPTY
22298: LIST
22299: LIST
22300: LIST
22301: LIST
22302: ST_TO_ADDR
// un := CreateHuman ;
22303: LD_ADDR_VAR 0 3
22307: PUSH
22308: CALL_OW 44
22312: ST_TO_ADDR
// hc_noskilllimit := false ;
22313: LD_ADDR_OWVAR 76
22317: PUSH
22318: LD_INT 0
22320: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
22321: LD_VAR 0 3
22325: PPUSH
22326: LD_INT 1
22328: PPUSH
22329: CALL_OW 51
// p := 0 ;
22333: LD_ADDR_VAR 0 2
22337: PUSH
22338: LD_INT 0
22340: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22341: LD_INT 35
22343: PPUSH
22344: CALL_OW 67
// p := p + 1 ;
22348: LD_ADDR_VAR 0 2
22352: PUSH
22353: LD_VAR 0 2
22357: PUSH
22358: LD_INT 1
22360: PLUS
22361: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
22362: LD_VAR 0 3
22366: PPUSH
22367: CALL_OW 256
22371: PUSH
22372: LD_INT 1000
22374: LESS
22375: IFFALSE 22389
// SetLives ( un , 1000 ) ;
22377: LD_VAR 0 3
22381: PPUSH
22382: LD_INT 1000
22384: PPUSH
22385: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
22389: LD_VAR 0 3
22393: PPUSH
22394: LD_INT 81
22396: PUSH
22397: LD_OWVAR 2
22401: PUSH
22402: EMPTY
22403: LIST
22404: LIST
22405: PUSH
22406: LD_INT 91
22408: PUSH
22409: LD_VAR 0 3
22413: PUSH
22414: LD_INT 30
22416: PUSH
22417: EMPTY
22418: LIST
22419: LIST
22420: LIST
22421: PUSH
22422: EMPTY
22423: LIST
22424: LIST
22425: PPUSH
22426: CALL_OW 69
22430: PPUSH
22431: LD_VAR 0 3
22435: PPUSH
22436: CALL_OW 74
22440: PPUSH
22441: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
22445: LD_VAR 0 2
22449: PUSH
22450: LD_INT 60
22452: GREATER
22453: PUSH
22454: LD_VAR 0 3
22458: PPUSH
22459: CALL_OW 301
22463: OR
22464: IFFALSE 22341
// if un then
22466: LD_VAR 0 3
22470: IFFALSE 22481
// RemoveUnit ( un ) ;
22472: LD_VAR 0 3
22476: PPUSH
22477: CALL_OW 64
// end ;
22481: PPOPN 3
22483: END
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
22484: LD_INT 0
22486: PPUSH
22487: PPUSH
22488: PPUSH
22489: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22490: LD_ADDR_VAR 0 4
22494: PUSH
22495: LD_INT 22
22497: PUSH
22498: LD_OWVAR 2
22502: PUSH
22503: EMPTY
22504: LIST
22505: LIST
22506: PUSH
22507: LD_INT 2
22509: PUSH
22510: LD_INT 30
22512: PUSH
22513: LD_INT 0
22515: PUSH
22516: EMPTY
22517: LIST
22518: LIST
22519: PUSH
22520: LD_INT 30
22522: PUSH
22523: LD_INT 1
22525: PUSH
22526: EMPTY
22527: LIST
22528: LIST
22529: PUSH
22530: EMPTY
22531: LIST
22532: LIST
22533: LIST
22534: PUSH
22535: EMPTY
22536: LIST
22537: LIST
22538: PPUSH
22539: CALL_OW 69
22543: ST_TO_ADDR
// if not tmp then
22544: LD_VAR 0 4
22548: NOT
22549: IFFALSE 22553
// exit ;
22551: GO 22612
// for i in tmp do
22553: LD_ADDR_VAR 0 2
22557: PUSH
22558: LD_VAR 0 4
22562: PUSH
22563: FOR_IN
22564: IFFALSE 22610
// for j = 1 to 3 do
22566: LD_ADDR_VAR 0 3
22570: PUSH
22571: DOUBLE
22572: LD_INT 1
22574: DEC
22575: ST_TO_ADDR
22576: LD_INT 3
22578: PUSH
22579: FOR_TO
22580: IFFALSE 22606
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
22582: LD_VAR 0 2
22586: PPUSH
22587: CALL_OW 274
22591: PPUSH
22592: LD_VAR 0 3
22596: PPUSH
22597: LD_INT 99999
22599: PPUSH
22600: CALL_OW 277
22604: GO 22579
22606: POP
22607: POP
22608: GO 22563
22610: POP
22611: POP
// end ;
22612: LD_VAR 0 1
22616: RET
// export function hHackSetLevel10 ; var i , j ; begin
22617: LD_INT 0
22619: PPUSH
22620: PPUSH
22621: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
22622: LD_ADDR_VAR 0 2
22626: PUSH
22627: LD_INT 21
22629: PUSH
22630: LD_INT 1
22632: PUSH
22633: EMPTY
22634: LIST
22635: LIST
22636: PPUSH
22637: CALL_OW 69
22641: PUSH
22642: FOR_IN
22643: IFFALSE 22695
// if IsSelected ( i ) then
22645: LD_VAR 0 2
22649: PPUSH
22650: CALL_OW 306
22654: IFFALSE 22693
// begin for j := 1 to 4 do
22656: LD_ADDR_VAR 0 3
22660: PUSH
22661: DOUBLE
22662: LD_INT 1
22664: DEC
22665: ST_TO_ADDR
22666: LD_INT 4
22668: PUSH
22669: FOR_TO
22670: IFFALSE 22691
// SetSkill ( i , j , 10 ) ;
22672: LD_VAR 0 2
22676: PPUSH
22677: LD_VAR 0 3
22681: PPUSH
22682: LD_INT 10
22684: PPUSH
22685: CALL_OW 237
22689: GO 22669
22691: POP
22692: POP
// end ;
22693: GO 22642
22695: POP
22696: POP
// end ;
22697: LD_VAR 0 1
22701: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
22702: LD_INT 0
22704: PPUSH
22705: PPUSH
22706: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
22707: LD_ADDR_VAR 0 2
22711: PUSH
22712: LD_INT 22
22714: PUSH
22715: LD_OWVAR 2
22719: PUSH
22720: EMPTY
22721: LIST
22722: LIST
22723: PUSH
22724: LD_INT 21
22726: PUSH
22727: LD_INT 1
22729: PUSH
22730: EMPTY
22731: LIST
22732: LIST
22733: PUSH
22734: EMPTY
22735: LIST
22736: LIST
22737: PPUSH
22738: CALL_OW 69
22742: PUSH
22743: FOR_IN
22744: IFFALSE 22785
// begin for j := 1 to 4 do
22746: LD_ADDR_VAR 0 3
22750: PUSH
22751: DOUBLE
22752: LD_INT 1
22754: DEC
22755: ST_TO_ADDR
22756: LD_INT 4
22758: PUSH
22759: FOR_TO
22760: IFFALSE 22781
// SetSkill ( i , j , 10 ) ;
22762: LD_VAR 0 2
22766: PPUSH
22767: LD_VAR 0 3
22771: PPUSH
22772: LD_INT 10
22774: PPUSH
22775: CALL_OW 237
22779: GO 22759
22781: POP
22782: POP
// end ;
22783: GO 22743
22785: POP
22786: POP
// end ;
22787: LD_VAR 0 1
22791: RET
// export function hHackSpawnHuman ( nation , class , skill ) ; begin
22792: LD_INT 0
22794: PPUSH
// uc_side := your_side ;
22795: LD_ADDR_OWVAR 20
22799: PUSH
22800: LD_OWVAR 2
22804: ST_TO_ADDR
// uc_nation := nation ;
22805: LD_ADDR_OWVAR 21
22809: PUSH
22810: LD_VAR 0 1
22814: ST_TO_ADDR
// InitHc ;
22815: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
22819: LD_INT 0
22821: PPUSH
22822: LD_VAR 0 2
22826: PPUSH
22827: LD_VAR 0 3
22831: PPUSH
22832: CALL_OW 380
// PlaceUnitAnywhere ( CreateHuman , true ) ;
22836: CALL_OW 44
22840: PPUSH
22841: LD_INT 1
22843: PPUSH
22844: CALL_OW 51
// end ;
22848: LD_VAR 0 4
22852: RET
// export function hHackSpawnVehicle ; begin
22853: LD_INT 0
22855: PPUSH
// uc_side := your_side ;
22856: LD_ADDR_OWVAR 20
22860: PUSH
22861: LD_OWVAR 2
22865: ST_TO_ADDR
// uc_nation := rand ( 1 , 3 ) ;
22866: LD_ADDR_OWVAR 21
22870: PUSH
22871: LD_INT 1
22873: PPUSH
22874: LD_INT 3
22876: PPUSH
22877: CALL_OW 12
22881: ST_TO_ADDR
// InitVc ;
22882: CALL_OW 20
// case uc_nation of 1 :
22886: LD_OWVAR 21
22890: PUSH
22891: LD_INT 1
22893: DOUBLE
22894: EQUAL
22895: IFTRUE 22899
22897: GO 23043
22899: POP
// begin vc_chassis := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] [ rand ( 1 , 5 ) ] ;
22900: LD_ADDR_OWVAR 37
22904: PUSH
22905: LD_INT 1
22907: PUSH
22908: LD_INT 2
22910: PUSH
22911: LD_INT 3
22913: PUSH
22914: LD_INT 4
22916: PUSH
22917: LD_INT 5
22919: PUSH
22920: EMPTY
22921: LIST
22922: LIST
22923: LIST
22924: LIST
22925: LIST
22926: PUSH
22927: LD_INT 1
22929: PPUSH
22930: LD_INT 5
22932: PPUSH
22933: CALL_OW 12
22937: ARRAY
22938: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
22939: LD_ADDR_OWVAR 39
22943: PUSH
22944: LD_INT 1
22946: PPUSH
22947: LD_INT 3
22949: PPUSH
22950: CALL_OW 12
22954: ST_TO_ADDR
// vc_control := [ control_manual , control_remote , control_computer ] [ rand ( 1 , 3 ) ] ;
22955: LD_ADDR_OWVAR 38
22959: PUSH
22960: LD_INT 1
22962: PUSH
22963: LD_INT 2
22965: PUSH
22966: LD_INT 3
22968: PUSH
22969: EMPTY
22970: LIST
22971: LIST
22972: LIST
22973: PUSH
22974: LD_INT 1
22976: PPUSH
22977: LD_INT 3
22979: PPUSH
22980: CALL_OW 12
22984: ARRAY
22985: ST_TO_ADDR
// vc_weapon := [ us_machine_gun , us_gatling_gun , us_double_gun , us_light_gun , us_rocket_launcher , us_siberium_rocket , us_laser , us_double_laser , us_heavy_gun ] [ rand ( 1 , 9 ) ] ;
22986: LD_ADDR_OWVAR 40
22990: PUSH
22991: LD_INT 2
22993: PUSH
22994: LD_INT 4
22996: PUSH
22997: LD_INT 5
22999: PUSH
23000: LD_INT 3
23002: PUSH
23003: LD_INT 7
23005: PUSH
23006: LD_INT 8
23008: PUSH
23009: LD_INT 9
23011: PUSH
23012: LD_INT 10
23014: PUSH
23015: LD_INT 6
23017: PUSH
23018: EMPTY
23019: LIST
23020: LIST
23021: LIST
23022: LIST
23023: LIST
23024: LIST
23025: LIST
23026: LIST
23027: LIST
23028: PUSH
23029: LD_INT 1
23031: PPUSH
23032: LD_INT 9
23034: PPUSH
23035: CALL_OW 12
23039: ARRAY
23040: ST_TO_ADDR
// end ; 2 :
23041: GO 23308
23043: LD_INT 2
23045: DOUBLE
23046: EQUAL
23047: IFTRUE 23051
23049: GO 23175
23051: POP
// begin vc_chassis := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 4 ) ] ;
23052: LD_ADDR_OWVAR 37
23056: PUSH
23057: LD_INT 11
23059: PUSH
23060: LD_INT 12
23062: PUSH
23063: LD_INT 13
23065: PUSH
23066: LD_INT 14
23068: PUSH
23069: EMPTY
23070: LIST
23071: LIST
23072: LIST
23073: LIST
23074: PUSH
23075: LD_INT 1
23077: PPUSH
23078: LD_INT 4
23080: PPUSH
23081: CALL_OW 12
23085: ARRAY
23086: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
23087: LD_ADDR_OWVAR 39
23091: PUSH
23092: LD_INT 1
23094: PPUSH
23095: LD_INT 3
23097: PPUSH
23098: CALL_OW 12
23102: ST_TO_ADDR
// vc_control := [ control_manual , control_remote , control_apeman ] [ rand ( 1 , 3 ) ] ;
23103: LD_ADDR_OWVAR 38
23107: PUSH
23108: LD_INT 1
23110: PUSH
23111: LD_INT 2
23113: PUSH
23114: LD_INT 5
23116: PUSH
23117: EMPTY
23118: LIST
23119: LIST
23120: LIST
23121: PUSH
23122: LD_INT 1
23124: PPUSH
23125: LD_INT 3
23127: PPUSH
23128: CALL_OW 12
23132: ARRAY
23133: ST_TO_ADDR
// vc_weapon := [ ar_double_machine_gun , ar_flame_thrower , ar_gun , ar_rocket_launcher , ar_selfpropelled_bomb ] [ rand ( 1 , 5 ) ] ;
23134: LD_ADDR_OWVAR 40
23138: PUSH
23139: LD_INT 24
23141: PUSH
23142: LD_INT 26
23144: PUSH
23145: LD_INT 27
23147: PUSH
23148: LD_INT 28
23150: PUSH
23151: LD_INT 29
23153: PUSH
23154: EMPTY
23155: LIST
23156: LIST
23157: LIST
23158: LIST
23159: LIST
23160: PUSH
23161: LD_INT 1
23163: PPUSH
23164: LD_INT 5
23166: PPUSH
23167: CALL_OW 12
23171: ARRAY
23172: ST_TO_ADDR
// end ; 3 :
23173: GO 23308
23175: LD_INT 3
23177: DOUBLE
23178: EQUAL
23179: IFTRUE 23183
23181: GO 23307
23183: POP
// begin vc_chassis := [ ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
23184: LD_ADDR_OWVAR 37
23188: PUSH
23189: LD_INT 21
23191: PUSH
23192: LD_INT 23
23194: PUSH
23195: LD_INT 22
23197: PUSH
23198: LD_INT 24
23200: PUSH
23201: EMPTY
23202: LIST
23203: LIST
23204: LIST
23205: LIST
23206: PUSH
23207: LD_INT 1
23209: PPUSH
23210: LD_INT 4
23212: PPUSH
23213: CALL_OW 12
23217: ARRAY
23218: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
23219: LD_ADDR_OWVAR 39
23223: PUSH
23224: LD_INT 1
23226: PPUSH
23227: LD_INT 3
23229: PPUSH
23230: CALL_OW 12
23234: ST_TO_ADDR
// vc_control := [ control_manual , control_computer ] [ rand ( 1 , 2 ) ] ;
23235: LD_ADDR_OWVAR 38
23239: PUSH
23240: LD_INT 1
23242: PUSH
23243: LD_INT 3
23245: PUSH
23246: EMPTY
23247: LIST
23248: LIST
23249: PUSH
23250: LD_INT 1
23252: PPUSH
23253: LD_INT 2
23255: PPUSH
23256: CALL_OW 12
23260: ARRAY
23261: ST_TO_ADDR
// vc_weapon := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_siberium_rocket , ru_rocket ] [ rand ( 1 , 6 ) ] ;
23262: LD_ADDR_OWVAR 40
23266: PUSH
23267: LD_INT 42
23269: PUSH
23270: LD_INT 43
23272: PUSH
23273: LD_INT 44
23275: PUSH
23276: LD_INT 46
23278: PUSH
23279: LD_INT 48
23281: PUSH
23282: LD_INT 47
23284: PUSH
23285: EMPTY
23286: LIST
23287: LIST
23288: LIST
23289: LIST
23290: LIST
23291: LIST
23292: PUSH
23293: LD_INT 1
23295: PPUSH
23296: LD_INT 6
23298: PPUSH
23299: CALL_OW 12
23303: ARRAY
23304: ST_TO_ADDR
// end ; end ;
23305: GO 23308
23307: POP
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
23308: CALL_OW 45
23312: PPUSH
23313: LD_INT 1
23315: PPUSH
23316: CALL_OW 51
// end ;
23320: LD_VAR 0 1
23324: RET
// export hInvincible ; every 1 do
23325: GO 23327
23327: DISABLE
// hInvincible := [ ] ;
23328: LD_ADDR_EXP 95
23332: PUSH
23333: EMPTY
23334: ST_TO_ADDR
23335: END
// every 10 do var i ;
23336: GO 23338
23338: DISABLE
23339: LD_INT 0
23341: PPUSH
// begin enable ;
23342: ENABLE
// if not hInvincible then
23343: LD_EXP 95
23347: NOT
23348: IFFALSE 23352
// exit ;
23350: GO 23396
// for i in hInvincible do
23352: LD_ADDR_VAR 0 1
23356: PUSH
23357: LD_EXP 95
23361: PUSH
23362: FOR_IN
23363: IFFALSE 23394
// if GetLives ( i ) < 1000 then
23365: LD_VAR 0 1
23369: PPUSH
23370: CALL_OW 256
23374: PUSH
23375: LD_INT 1000
23377: LESS
23378: IFFALSE 23392
// SetLives ( i , 1000 ) ;
23380: LD_VAR 0 1
23384: PPUSH
23385: LD_INT 1000
23387: PPUSH
23388: CALL_OW 234
23392: GO 23362
23394: POP
23395: POP
// end ;
23396: PPOPN 1
23398: END
// export function hHackInvincible ; var i ; begin
23399: LD_INT 0
23401: PPUSH
23402: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
23403: LD_ADDR_VAR 0 2
23407: PUSH
23408: LD_INT 2
23410: PUSH
23411: LD_INT 21
23413: PUSH
23414: LD_INT 1
23416: PUSH
23417: EMPTY
23418: LIST
23419: LIST
23420: PUSH
23421: LD_INT 21
23423: PUSH
23424: LD_INT 2
23426: PUSH
23427: EMPTY
23428: LIST
23429: LIST
23430: PUSH
23431: EMPTY
23432: LIST
23433: LIST
23434: LIST
23435: PPUSH
23436: CALL_OW 69
23440: PUSH
23441: FOR_IN
23442: IFFALSE 23503
// if IsSelected ( i ) then
23444: LD_VAR 0 2
23448: PPUSH
23449: CALL_OW 306
23453: IFFALSE 23501
// begin if i in hInvincible then
23455: LD_VAR 0 2
23459: PUSH
23460: LD_EXP 95
23464: IN
23465: IFFALSE 23485
// hInvincible := hInvincible diff i else
23467: LD_ADDR_EXP 95
23471: PUSH
23472: LD_EXP 95
23476: PUSH
23477: LD_VAR 0 2
23481: DIFF
23482: ST_TO_ADDR
23483: GO 23501
// hInvincible := hInvincible union i ;
23485: LD_ADDR_EXP 95
23489: PUSH
23490: LD_EXP 95
23494: PUSH
23495: LD_VAR 0 2
23499: UNION
23500: ST_TO_ADDR
// end ;
23501: GO 23441
23503: POP
23504: POP
// end ;
23505: LD_VAR 0 1
23509: RET
// export function hHackInvisible ; var i , j ; begin
23510: LD_INT 0
23512: PPUSH
23513: PPUSH
23514: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
23515: LD_ADDR_VAR 0 2
23519: PUSH
23520: LD_INT 21
23522: PUSH
23523: LD_INT 1
23525: PUSH
23526: EMPTY
23527: LIST
23528: LIST
23529: PPUSH
23530: CALL_OW 69
23534: PUSH
23535: FOR_IN
23536: IFFALSE 23560
// if IsSelected ( i ) then
23538: LD_VAR 0 2
23542: PPUSH
23543: CALL_OW 306
23547: IFFALSE 23558
// ComForceInvisible ( i ) ;
23549: LD_VAR 0 2
23553: PPUSH
23554: CALL_OW 496
23558: GO 23535
23560: POP
23561: POP
// end ;
23562: LD_VAR 0 1
23566: RET
// export function hHackChangeYourSide ; begin
23567: LD_INT 0
23569: PPUSH
// if your_side = 8 then
23570: LD_OWVAR 2
23574: PUSH
23575: LD_INT 8
23577: EQUAL
23578: IFFALSE 23590
// your_side := 0 else
23580: LD_ADDR_OWVAR 2
23584: PUSH
23585: LD_INT 0
23587: ST_TO_ADDR
23588: GO 23604
// your_side := your_side + 1 ;
23590: LD_ADDR_OWVAR 2
23594: PUSH
23595: LD_OWVAR 2
23599: PUSH
23600: LD_INT 1
23602: PLUS
23603: ST_TO_ADDR
// end ;
23604: LD_VAR 0 1
23608: RET
// export function hHackChangeUnitSide ; var i , j ; begin
23609: LD_INT 0
23611: PPUSH
23612: PPUSH
23613: PPUSH
// for i in all_units do
23614: LD_ADDR_VAR 0 2
23618: PUSH
23619: LD_OWVAR 3
23623: PUSH
23624: FOR_IN
23625: IFFALSE 23703
// if IsSelected ( i ) then
23627: LD_VAR 0 2
23631: PPUSH
23632: CALL_OW 306
23636: IFFALSE 23701
// begin j := GetSide ( i ) ;
23638: LD_ADDR_VAR 0 3
23642: PUSH
23643: LD_VAR 0 2
23647: PPUSH
23648: CALL_OW 255
23652: ST_TO_ADDR
// if j = 8 then
23653: LD_VAR 0 3
23657: PUSH
23658: LD_INT 8
23660: EQUAL
23661: IFFALSE 23673
// j := 0 else
23663: LD_ADDR_VAR 0 3
23667: PUSH
23668: LD_INT 0
23670: ST_TO_ADDR
23671: GO 23687
// j := j + 1 ;
23673: LD_ADDR_VAR 0 3
23677: PUSH
23678: LD_VAR 0 3
23682: PUSH
23683: LD_INT 1
23685: PLUS
23686: ST_TO_ADDR
// SetSide ( i , j ) ;
23687: LD_VAR 0 2
23691: PPUSH
23692: LD_VAR 0 3
23696: PPUSH
23697: CALL_OW 235
// end ;
23701: GO 23624
23703: POP
23704: POP
// end ;
23705: LD_VAR 0 1
23709: RET
// export function hHackFog ; begin
23710: LD_INT 0
23712: PPUSH
// FogOff ( true ) ;
23713: LD_INT 1
23715: PPUSH
23716: CALL_OW 344
// end ;
23720: LD_VAR 0 1
23724: RET
// export function hHackApeman ; begin
23725: LD_INT 0
23727: PPUSH
// uc_side := your_side ;
23728: LD_ADDR_OWVAR 20
23732: PUSH
23733: LD_OWVAR 2
23737: ST_TO_ADDR
// uc_nation := 0 ;
23738: LD_ADDR_OWVAR 21
23742: PUSH
23743: LD_INT 0
23745: ST_TO_ADDR
// hc_name :=  ;
23746: LD_ADDR_OWVAR 26
23750: PUSH
23751: LD_STRING 
23753: ST_TO_ADDR
// hc_gallery :=  ;
23754: LD_ADDR_OWVAR 33
23758: PUSH
23759: LD_STRING 
23761: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
23762: LD_ADDR_OWVAR 31
23766: PUSH
23767: LD_INT 0
23769: PUSH
23770: LD_INT 0
23772: PUSH
23773: LD_INT 0
23775: PUSH
23776: LD_INT 0
23778: PUSH
23779: EMPTY
23780: LIST
23781: LIST
23782: LIST
23783: LIST
23784: ST_TO_ADDR
// hc_class := class_apeman ;
23785: LD_ADDR_OWVAR 28
23789: PUSH
23790: LD_INT 12
23792: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateHuman , true ) ;
23793: CALL_OW 44
23797: PPUSH
23798: LD_INT 1
23800: PPUSH
23801: CALL_OW 51
// end ;
23805: LD_VAR 0 1
23809: RET
// export function hHackBoom ; begin
23810: LD_INT 0
23812: PPUSH
// uc_side := your_side ;
23813: LD_ADDR_OWVAR 20
23817: PUSH
23818: LD_OWVAR 2
23822: ST_TO_ADDR
// uc_nation := 1 ;
23823: LD_ADDR_OWVAR 21
23827: PUSH
23828: LD_INT 1
23830: ST_TO_ADDR
// vc_chassis := us_morphling ;
23831: LD_ADDR_OWVAR 37
23835: PUSH
23836: LD_INT 5
23838: ST_TO_ADDR
// vc_engine := engine_siberite ;
23839: LD_ADDR_OWVAR 39
23843: PUSH
23844: LD_INT 3
23846: ST_TO_ADDR
// vc_control := control_computer ;
23847: LD_ADDR_OWVAR 38
23851: PUSH
23852: LD_INT 3
23854: ST_TO_ADDR
// vc_weapon := us_siberium_rocket ;
23855: LD_ADDR_OWVAR 40
23859: PUSH
23860: LD_INT 8
23862: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
23863: CALL_OW 45
23867: PPUSH
23868: LD_INT 1
23870: PPUSH
23871: CALL_OW 51
// end ; end_of_file
23875: LD_VAR 0 1
23879: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
23880: LD_INT 0
23882: PPUSH
23883: PPUSH
23884: PPUSH
23885: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
23886: LD_VAR 0 1
23890: PPUSH
23891: CALL_OW 264
23895: PUSH
23896: LD_EXP 30
23900: EQUAL
23901: IFFALSE 23973
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
23903: LD_INT 68
23905: PPUSH
23906: LD_VAR 0 1
23910: PPUSH
23911: CALL_OW 255
23915: PPUSH
23916: CALL_OW 321
23920: PUSH
23921: LD_INT 2
23923: EQUAL
23924: IFFALSE 23936
// eff := 70 else
23926: LD_ADDR_VAR 0 4
23930: PUSH
23931: LD_INT 70
23933: ST_TO_ADDR
23934: GO 23944
// eff := 30 ;
23936: LD_ADDR_VAR 0 4
23940: PUSH
23941: LD_INT 30
23943: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
23944: LD_VAR 0 1
23948: PPUSH
23949: CALL_OW 250
23953: PPUSH
23954: LD_VAR 0 1
23958: PPUSH
23959: CALL_OW 251
23963: PPUSH
23964: LD_VAR 0 4
23968: PPUSH
23969: CALL_OW 495
// end ; end ;
23973: LD_VAR 0 2
23977: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
23978: LD_INT 0
23980: PPUSH
// end ;
23981: LD_VAR 0 4
23985: RET
// export function SOS_Command ( cmd ) ; begin
23986: LD_INT 0
23988: PPUSH
// end ;
23989: LD_VAR 0 2
23993: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y ) do begin if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
23994: LD_VAR 0 1
23998: PUSH
23999: LD_INT 254
24001: EQUAL
24002: PUSH
24003: LD_VAR 0 2
24007: PPUSH
24008: CALL_OW 264
24012: PUSH
24013: LD_EXP 28
24017: EQUAL
24018: AND
24019: PUSH
24020: LD_VAR 0 3
24024: PPUSH
24025: CALL_OW 263
24029: PUSH
24030: LD_INT 3
24032: EQUAL
24033: AND
24034: IFFALSE 24050
// HackDestroyVehicle ( unit , selectedUnit ) ;
24036: LD_VAR 0 2
24040: PPUSH
24041: LD_VAR 0 3
24045: PPUSH
24046: CALL 25557 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
24050: LD_VAR 0 1
24054: PUSH
24055: LD_INT 255
24057: EQUAL
24058: PUSH
24059: LD_VAR 0 2
24063: PPUSH
24064: CALL_OW 264
24068: PUSH
24069: LD_INT 14
24071: PUSH
24072: LD_INT 53
24074: PUSH
24075: EMPTY
24076: LIST
24077: LIST
24078: IN
24079: AND
24080: PUSH
24081: LD_VAR 0 4
24085: PPUSH
24086: LD_VAR 0 5
24090: PPUSH
24091: CALL_OW 488
24095: AND
24096: IFFALSE 24120
// CutTreeXYR ( unit , x , y , 12 ) ;
24098: LD_VAR 0 2
24102: PPUSH
24103: LD_VAR 0 4
24107: PPUSH
24108: LD_VAR 0 5
24112: PPUSH
24113: LD_INT 12
24115: PPUSH
24116: CALL 24123 0 4
// end ;
24120: PPOPN 5
24122: END
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
24123: LD_INT 0
24125: PPUSH
24126: PPUSH
24127: PPUSH
24128: PPUSH
24129: PPUSH
24130: PPUSH
24131: PPUSH
24132: PPUSH
24133: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
24134: LD_VAR 0 1
24138: NOT
24139: PUSH
24140: LD_VAR 0 2
24144: PPUSH
24145: LD_VAR 0 3
24149: PPUSH
24150: CALL_OW 488
24154: NOT
24155: OR
24156: PUSH
24157: LD_VAR 0 4
24161: NOT
24162: OR
24163: IFFALSE 24167
// exit ;
24165: GO 24507
// list := [ ] ;
24167: LD_ADDR_VAR 0 13
24171: PUSH
24172: EMPTY
24173: ST_TO_ADDR
// if x - r < 0 then
24174: LD_VAR 0 2
24178: PUSH
24179: LD_VAR 0 4
24183: MINUS
24184: PUSH
24185: LD_INT 0
24187: LESS
24188: IFFALSE 24200
// min_x := 0 else
24190: LD_ADDR_VAR 0 7
24194: PUSH
24195: LD_INT 0
24197: ST_TO_ADDR
24198: GO 24216
// min_x := x - r ;
24200: LD_ADDR_VAR 0 7
24204: PUSH
24205: LD_VAR 0 2
24209: PUSH
24210: LD_VAR 0 4
24214: MINUS
24215: ST_TO_ADDR
// if y - r < 0 then
24216: LD_VAR 0 3
24220: PUSH
24221: LD_VAR 0 4
24225: MINUS
24226: PUSH
24227: LD_INT 0
24229: LESS
24230: IFFALSE 24242
// min_y := 0 else
24232: LD_ADDR_VAR 0 8
24236: PUSH
24237: LD_INT 0
24239: ST_TO_ADDR
24240: GO 24258
// min_y := y - r ;
24242: LD_ADDR_VAR 0 8
24246: PUSH
24247: LD_VAR 0 3
24251: PUSH
24252: LD_VAR 0 4
24256: MINUS
24257: ST_TO_ADDR
// max_x := x + r ;
24258: LD_ADDR_VAR 0 9
24262: PUSH
24263: LD_VAR 0 2
24267: PUSH
24268: LD_VAR 0 4
24272: PLUS
24273: ST_TO_ADDR
// max_y := y + r ;
24274: LD_ADDR_VAR 0 10
24278: PUSH
24279: LD_VAR 0 3
24283: PUSH
24284: LD_VAR 0 4
24288: PLUS
24289: ST_TO_ADDR
// for _x = min_x to max_x do
24290: LD_ADDR_VAR 0 11
24294: PUSH
24295: DOUBLE
24296: LD_VAR 0 7
24300: DEC
24301: ST_TO_ADDR
24302: LD_VAR 0 9
24306: PUSH
24307: FOR_TO
24308: IFFALSE 24425
// for _y = min_y to max_y do
24310: LD_ADDR_VAR 0 12
24314: PUSH
24315: DOUBLE
24316: LD_VAR 0 8
24320: DEC
24321: ST_TO_ADDR
24322: LD_VAR 0 10
24326: PUSH
24327: FOR_TO
24328: IFFALSE 24421
// begin if not ValidHex ( _x , _y ) then
24330: LD_VAR 0 11
24334: PPUSH
24335: LD_VAR 0 12
24339: PPUSH
24340: CALL_OW 488
24344: NOT
24345: IFFALSE 24349
// continue ;
24347: GO 24327
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
24349: LD_VAR 0 11
24353: PPUSH
24354: LD_VAR 0 12
24358: PPUSH
24359: CALL_OW 351
24363: PUSH
24364: LD_VAR 0 11
24368: PPUSH
24369: LD_VAR 0 12
24373: PPUSH
24374: CALL_OW 554
24378: AND
24379: IFFALSE 24419
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
24381: LD_ADDR_VAR 0 13
24385: PUSH
24386: LD_VAR 0 13
24390: PPUSH
24391: LD_VAR 0 13
24395: PUSH
24396: LD_INT 1
24398: PLUS
24399: PPUSH
24400: LD_VAR 0 11
24404: PUSH
24405: LD_VAR 0 12
24409: PUSH
24410: EMPTY
24411: LIST
24412: LIST
24413: PPUSH
24414: CALL_OW 2
24418: ST_TO_ADDR
// end ;
24419: GO 24327
24421: POP
24422: POP
24423: GO 24307
24425: POP
24426: POP
// if not list then
24427: LD_VAR 0 13
24431: NOT
24432: IFFALSE 24436
// exit ;
24434: GO 24507
// for i in list do
24436: LD_ADDR_VAR 0 6
24440: PUSH
24441: LD_VAR 0 13
24445: PUSH
24446: FOR_IN
24447: IFFALSE 24505
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
24449: LD_VAR 0 1
24453: PPUSH
24454: LD_STRING M
24456: PUSH
24457: LD_VAR 0 6
24461: PUSH
24462: LD_INT 1
24464: ARRAY
24465: PUSH
24466: LD_VAR 0 6
24470: PUSH
24471: LD_INT 2
24473: ARRAY
24474: PUSH
24475: LD_INT 0
24477: PUSH
24478: LD_INT 0
24480: PUSH
24481: LD_INT 0
24483: PUSH
24484: LD_INT 0
24486: PUSH
24487: EMPTY
24488: LIST
24489: LIST
24490: LIST
24491: LIST
24492: LIST
24493: LIST
24494: LIST
24495: PUSH
24496: EMPTY
24497: LIST
24498: PPUSH
24499: CALL_OW 447
24503: GO 24446
24505: POP
24506: POP
// end ;
24507: LD_VAR 0 5
24511: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
24512: LD_EXP 96
24516: NOT
24517: IFFALSE 24567
24519: GO 24521
24521: DISABLE
// begin initHack := true ;
24522: LD_ADDR_EXP 96
24526: PUSH
24527: LD_INT 1
24529: ST_TO_ADDR
// hackTanks := [ ] ;
24530: LD_ADDR_EXP 97
24534: PUSH
24535: EMPTY
24536: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
24537: LD_ADDR_EXP 98
24541: PUSH
24542: EMPTY
24543: ST_TO_ADDR
// hackLimit := 3 ;
24544: LD_ADDR_EXP 99
24548: PUSH
24549: LD_INT 3
24551: ST_TO_ADDR
// hackDist := 12 ;
24552: LD_ADDR_EXP 100
24556: PUSH
24557: LD_INT 12
24559: ST_TO_ADDR
// hackCounter := [ ] ;
24560: LD_ADDR_EXP 101
24564: PUSH
24565: EMPTY
24566: ST_TO_ADDR
// end ;
24567: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
24568: LD_EXP 96
24572: PUSH
24573: LD_INT 34
24575: PUSH
24576: LD_EXP 28
24580: PUSH
24581: EMPTY
24582: LIST
24583: LIST
24584: PPUSH
24585: CALL_OW 69
24589: AND
24590: IFFALSE 24845
24592: GO 24594
24594: DISABLE
24595: LD_INT 0
24597: PPUSH
24598: PPUSH
// begin enable ;
24599: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
24600: LD_ADDR_VAR 0 1
24604: PUSH
24605: LD_INT 34
24607: PUSH
24608: LD_EXP 28
24612: PUSH
24613: EMPTY
24614: LIST
24615: LIST
24616: PPUSH
24617: CALL_OW 69
24621: PUSH
24622: FOR_IN
24623: IFFALSE 24843
// begin if not i in hackTanks then
24625: LD_VAR 0 1
24629: PUSH
24630: LD_EXP 97
24634: IN
24635: NOT
24636: IFFALSE 24719
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
24638: LD_ADDR_EXP 97
24642: PUSH
24643: LD_EXP 97
24647: PPUSH
24648: LD_EXP 97
24652: PUSH
24653: LD_INT 1
24655: PLUS
24656: PPUSH
24657: LD_VAR 0 1
24661: PPUSH
24662: CALL_OW 1
24666: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
24667: LD_ADDR_EXP 98
24671: PUSH
24672: LD_EXP 98
24676: PPUSH
24677: LD_EXP 98
24681: PUSH
24682: LD_INT 1
24684: PLUS
24685: PPUSH
24686: EMPTY
24687: PPUSH
24688: CALL_OW 1
24692: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
24693: LD_ADDR_EXP 101
24697: PUSH
24698: LD_EXP 101
24702: PPUSH
24703: LD_EXP 101
24707: PUSH
24708: LD_INT 1
24710: PLUS
24711: PPUSH
24712: EMPTY
24713: PPUSH
24714: CALL_OW 1
24718: ST_TO_ADDR
// end ; if not IsOk ( i ) then
24719: LD_VAR 0 1
24723: PPUSH
24724: CALL_OW 302
24728: NOT
24729: IFFALSE 24742
// begin HackUnlinkAll ( i ) ;
24731: LD_VAR 0 1
24735: PPUSH
24736: CALL 24848 0 1
// continue ;
24740: GO 24622
// end ; HackCheckCapturedStatus ( i ) ;
24742: LD_VAR 0 1
24746: PPUSH
24747: CALL 25291 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
24751: LD_ADDR_VAR 0 2
24755: PUSH
24756: LD_INT 81
24758: PUSH
24759: LD_VAR 0 1
24763: PPUSH
24764: CALL_OW 255
24768: PUSH
24769: EMPTY
24770: LIST
24771: LIST
24772: PUSH
24773: LD_INT 33
24775: PUSH
24776: LD_INT 3
24778: PUSH
24779: EMPTY
24780: LIST
24781: LIST
24782: PUSH
24783: LD_INT 91
24785: PUSH
24786: LD_VAR 0 1
24790: PUSH
24791: LD_EXP 100
24795: PUSH
24796: EMPTY
24797: LIST
24798: LIST
24799: LIST
24800: PUSH
24801: LD_INT 50
24803: PUSH
24804: EMPTY
24805: LIST
24806: PUSH
24807: EMPTY
24808: LIST
24809: LIST
24810: LIST
24811: LIST
24812: PPUSH
24813: CALL_OW 69
24817: ST_TO_ADDR
// if not tmp then
24818: LD_VAR 0 2
24822: NOT
24823: IFFALSE 24827
// continue ;
24825: GO 24622
// HackLink ( i , tmp ) ;
24827: LD_VAR 0 1
24831: PPUSH
24832: LD_VAR 0 2
24836: PPUSH
24837: CALL 24984 0 2
// end ;
24841: GO 24622
24843: POP
24844: POP
// end ;
24845: PPOPN 2
24847: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
24848: LD_INT 0
24850: PPUSH
24851: PPUSH
24852: PPUSH
// if not hack in hackTanks then
24853: LD_VAR 0 1
24857: PUSH
24858: LD_EXP 97
24862: IN
24863: NOT
24864: IFFALSE 24868
// exit ;
24866: GO 24979
// index := GetElementIndex ( hackTanks , hack ) ;
24868: LD_ADDR_VAR 0 4
24872: PUSH
24873: LD_EXP 97
24877: PPUSH
24878: LD_VAR 0 1
24882: PPUSH
24883: CALL 30399 0 2
24887: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
24888: LD_EXP 98
24892: PUSH
24893: LD_VAR 0 4
24897: ARRAY
24898: IFFALSE 24979
// begin for i in hackTanksCaptured [ index ] do
24900: LD_ADDR_VAR 0 3
24904: PUSH
24905: LD_EXP 98
24909: PUSH
24910: LD_VAR 0 4
24914: ARRAY
24915: PUSH
24916: FOR_IN
24917: IFFALSE 24943
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
24919: LD_VAR 0 3
24923: PUSH
24924: LD_INT 1
24926: ARRAY
24927: PPUSH
24928: LD_VAR 0 3
24932: PUSH
24933: LD_INT 2
24935: ARRAY
24936: PPUSH
24937: CALL_OW 235
24941: GO 24916
24943: POP
24944: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
24945: LD_ADDR_EXP 98
24949: PUSH
24950: LD_EXP 98
24954: PPUSH
24955: LD_VAR 0 4
24959: PPUSH
24960: EMPTY
24961: PPUSH
24962: CALL_OW 1
24966: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
24967: LD_VAR 0 1
24971: PPUSH
24972: LD_INT 0
24974: PPUSH
24975: CALL_OW 505
// end ; end ;
24979: LD_VAR 0 2
24983: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
24984: LD_INT 0
24986: PPUSH
24987: PPUSH
24988: PPUSH
// if not hack in hackTanks or not vehicles then
24989: LD_VAR 0 1
24993: PUSH
24994: LD_EXP 97
24998: IN
24999: NOT
25000: PUSH
25001: LD_VAR 0 2
25005: NOT
25006: OR
25007: IFFALSE 25011
// exit ;
25009: GO 25286
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
25011: LD_ADDR_VAR 0 2
25015: PUSH
25016: LD_VAR 0 1
25020: PPUSH
25021: LD_VAR 0 2
25025: PPUSH
25026: LD_INT 1
25028: PPUSH
25029: LD_INT 1
25031: PPUSH
25032: CALL 31049 0 4
25036: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
25037: LD_ADDR_VAR 0 5
25041: PUSH
25042: LD_EXP 97
25046: PPUSH
25047: LD_VAR 0 1
25051: PPUSH
25052: CALL 30399 0 2
25056: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
25057: LD_EXP 98
25061: PUSH
25062: LD_VAR 0 5
25066: ARRAY
25067: PUSH
25068: LD_EXP 99
25072: LESS
25073: IFFALSE 25262
// begin for i := 1 to vehicles do
25075: LD_ADDR_VAR 0 4
25079: PUSH
25080: DOUBLE
25081: LD_INT 1
25083: DEC
25084: ST_TO_ADDR
25085: LD_VAR 0 2
25089: PUSH
25090: FOR_TO
25091: IFFALSE 25260
// begin if hackTanksCaptured [ index ] = hackLimit then
25093: LD_EXP 98
25097: PUSH
25098: LD_VAR 0 5
25102: ARRAY
25103: PUSH
25104: LD_EXP 99
25108: EQUAL
25109: IFFALSE 25113
// break ;
25111: GO 25260
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
25113: LD_ADDR_EXP 101
25117: PUSH
25118: LD_EXP 101
25122: PPUSH
25123: LD_VAR 0 5
25127: PPUSH
25128: LD_EXP 101
25132: PUSH
25133: LD_VAR 0 5
25137: ARRAY
25138: PUSH
25139: LD_INT 1
25141: PLUS
25142: PPUSH
25143: CALL_OW 1
25147: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
25148: LD_ADDR_EXP 98
25152: PUSH
25153: LD_EXP 98
25157: PPUSH
25158: LD_VAR 0 5
25162: PUSH
25163: LD_EXP 98
25167: PUSH
25168: LD_VAR 0 5
25172: ARRAY
25173: PUSH
25174: LD_INT 1
25176: PLUS
25177: PUSH
25178: EMPTY
25179: LIST
25180: LIST
25181: PPUSH
25182: LD_VAR 0 2
25186: PUSH
25187: LD_VAR 0 4
25191: ARRAY
25192: PUSH
25193: LD_VAR 0 2
25197: PUSH
25198: LD_VAR 0 4
25202: ARRAY
25203: PPUSH
25204: CALL_OW 255
25208: PUSH
25209: EMPTY
25210: LIST
25211: LIST
25212: PPUSH
25213: CALL 30614 0 3
25217: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
25218: LD_VAR 0 2
25222: PUSH
25223: LD_VAR 0 4
25227: ARRAY
25228: PPUSH
25229: LD_VAR 0 1
25233: PPUSH
25234: CALL_OW 255
25238: PPUSH
25239: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
25243: LD_VAR 0 2
25247: PUSH
25248: LD_VAR 0 4
25252: ARRAY
25253: PPUSH
25254: CALL_OW 141
// end ;
25258: GO 25090
25260: POP
25261: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
25262: LD_VAR 0 1
25266: PPUSH
25267: LD_EXP 98
25271: PUSH
25272: LD_VAR 0 5
25276: ARRAY
25277: PUSH
25278: LD_INT 0
25280: PLUS
25281: PPUSH
25282: CALL_OW 505
// end ;
25286: LD_VAR 0 3
25290: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
25291: LD_INT 0
25293: PPUSH
25294: PPUSH
25295: PPUSH
25296: PPUSH
// if not hack in hackTanks then
25297: LD_VAR 0 1
25301: PUSH
25302: LD_EXP 97
25306: IN
25307: NOT
25308: IFFALSE 25312
// exit ;
25310: GO 25552
// index := GetElementIndex ( hackTanks , hack ) ;
25312: LD_ADDR_VAR 0 4
25316: PUSH
25317: LD_EXP 97
25321: PPUSH
25322: LD_VAR 0 1
25326: PPUSH
25327: CALL 30399 0 2
25331: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
25332: LD_ADDR_VAR 0 3
25336: PUSH
25337: DOUBLE
25338: LD_EXP 98
25342: PUSH
25343: LD_VAR 0 4
25347: ARRAY
25348: INC
25349: ST_TO_ADDR
25350: LD_INT 1
25352: PUSH
25353: FOR_DOWNTO
25354: IFFALSE 25526
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
25356: LD_ADDR_VAR 0 5
25360: PUSH
25361: LD_EXP 98
25365: PUSH
25366: LD_VAR 0 4
25370: ARRAY
25371: PUSH
25372: LD_VAR 0 3
25376: ARRAY
25377: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
25378: LD_VAR 0 5
25382: PUSH
25383: LD_INT 1
25385: ARRAY
25386: PPUSH
25387: CALL_OW 302
25391: NOT
25392: PUSH
25393: LD_VAR 0 5
25397: PUSH
25398: LD_INT 1
25400: ARRAY
25401: PPUSH
25402: CALL_OW 255
25406: PUSH
25407: LD_VAR 0 1
25411: PPUSH
25412: CALL_OW 255
25416: NONEQUAL
25417: OR
25418: IFFALSE 25524
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
25420: LD_VAR 0 5
25424: PUSH
25425: LD_INT 1
25427: ARRAY
25428: PPUSH
25429: CALL_OW 305
25433: PUSH
25434: LD_VAR 0 5
25438: PUSH
25439: LD_INT 1
25441: ARRAY
25442: PPUSH
25443: CALL_OW 255
25447: PUSH
25448: LD_VAR 0 1
25452: PPUSH
25453: CALL_OW 255
25457: EQUAL
25458: AND
25459: IFFALSE 25483
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
25461: LD_VAR 0 5
25465: PUSH
25466: LD_INT 1
25468: ARRAY
25469: PPUSH
25470: LD_VAR 0 5
25474: PUSH
25475: LD_INT 2
25477: ARRAY
25478: PPUSH
25479: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
25483: LD_ADDR_EXP 98
25487: PUSH
25488: LD_EXP 98
25492: PPUSH
25493: LD_VAR 0 4
25497: PPUSH
25498: LD_EXP 98
25502: PUSH
25503: LD_VAR 0 4
25507: ARRAY
25508: PPUSH
25509: LD_VAR 0 3
25513: PPUSH
25514: CALL_OW 3
25518: PPUSH
25519: CALL_OW 1
25523: ST_TO_ADDR
// end ; end ;
25524: GO 25353
25526: POP
25527: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
25528: LD_VAR 0 1
25532: PPUSH
25533: LD_EXP 98
25537: PUSH
25538: LD_VAR 0 4
25542: ARRAY
25543: PUSH
25544: LD_INT 0
25546: PLUS
25547: PPUSH
25548: CALL_OW 505
// end ;
25552: LD_VAR 0 2
25556: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
25557: LD_INT 0
25559: PPUSH
25560: PPUSH
25561: PPUSH
25562: PPUSH
// if not hack in hackTanks then
25563: LD_VAR 0 1
25567: PUSH
25568: LD_EXP 97
25572: IN
25573: NOT
25574: IFFALSE 25578
// exit ;
25576: GO 25663
// index := GetElementIndex ( hackTanks , hack ) ;
25578: LD_ADDR_VAR 0 5
25582: PUSH
25583: LD_EXP 97
25587: PPUSH
25588: LD_VAR 0 1
25592: PPUSH
25593: CALL 30399 0 2
25597: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
25598: LD_ADDR_VAR 0 4
25602: PUSH
25603: DOUBLE
25604: LD_INT 1
25606: DEC
25607: ST_TO_ADDR
25608: LD_EXP 98
25612: PUSH
25613: LD_VAR 0 5
25617: ARRAY
25618: PUSH
25619: FOR_TO
25620: IFFALSE 25661
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
25622: LD_EXP 98
25626: PUSH
25627: LD_VAR 0 5
25631: ARRAY
25632: PUSH
25633: LD_VAR 0 4
25637: ARRAY
25638: PUSH
25639: LD_INT 1
25641: ARRAY
25642: PUSH
25643: LD_VAR 0 2
25647: EQUAL
25648: IFFALSE 25659
// KillUnit ( vehicle ) ;
25650: LD_VAR 0 2
25654: PPUSH
25655: CALL_OW 66
25659: GO 25619
25661: POP
25662: POP
// end ; end_of_file
25663: LD_VAR 0 3
25667: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
25668: LD_INT 0
25670: PPUSH
25671: PPUSH
// if exist_mode then
25672: LD_VAR 0 2
25676: IFFALSE 25701
// unit := CreateCharacter ( prefix & ident ) else
25678: LD_ADDR_VAR 0 5
25682: PUSH
25683: LD_VAR 0 3
25687: PUSH
25688: LD_VAR 0 1
25692: STR
25693: PPUSH
25694: CALL_OW 34
25698: ST_TO_ADDR
25699: GO 25716
// unit := NewCharacter ( ident ) ;
25701: LD_ADDR_VAR 0 5
25705: PUSH
25706: LD_VAR 0 1
25710: PPUSH
25711: CALL_OW 25
25715: ST_TO_ADDR
// result := unit ;
25716: LD_ADDR_VAR 0 4
25720: PUSH
25721: LD_VAR 0 5
25725: ST_TO_ADDR
// end ;
25726: LD_VAR 0 4
25730: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
25731: LD_INT 0
25733: PPUSH
25734: PPUSH
// if not side or not nation then
25735: LD_VAR 0 1
25739: NOT
25740: PUSH
25741: LD_VAR 0 2
25745: NOT
25746: OR
25747: IFFALSE 25751
// exit ;
25749: GO 26515
// case nation of nation_american :
25751: LD_VAR 0 2
25755: PUSH
25756: LD_INT 1
25758: DOUBLE
25759: EQUAL
25760: IFTRUE 25764
25762: GO 25978
25764: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
25765: LD_ADDR_VAR 0 4
25769: PUSH
25770: LD_INT 35
25772: PUSH
25773: LD_INT 45
25775: PUSH
25776: LD_INT 46
25778: PUSH
25779: LD_INT 47
25781: PUSH
25782: LD_INT 82
25784: PUSH
25785: LD_INT 83
25787: PUSH
25788: LD_INT 84
25790: PUSH
25791: LD_INT 85
25793: PUSH
25794: LD_INT 86
25796: PUSH
25797: LD_INT 1
25799: PUSH
25800: LD_INT 2
25802: PUSH
25803: LD_INT 6
25805: PUSH
25806: LD_INT 15
25808: PUSH
25809: LD_INT 16
25811: PUSH
25812: LD_INT 7
25814: PUSH
25815: LD_INT 12
25817: PUSH
25818: LD_INT 13
25820: PUSH
25821: LD_INT 10
25823: PUSH
25824: LD_INT 14
25826: PUSH
25827: LD_INT 20
25829: PUSH
25830: LD_INT 21
25832: PUSH
25833: LD_INT 22
25835: PUSH
25836: LD_INT 25
25838: PUSH
25839: LD_INT 32
25841: PUSH
25842: LD_INT 27
25844: PUSH
25845: LD_INT 36
25847: PUSH
25848: LD_INT 69
25850: PUSH
25851: LD_INT 39
25853: PUSH
25854: LD_INT 34
25856: PUSH
25857: LD_INT 40
25859: PUSH
25860: LD_INT 48
25862: PUSH
25863: LD_INT 49
25865: PUSH
25866: LD_INT 50
25868: PUSH
25869: LD_INT 51
25871: PUSH
25872: LD_INT 52
25874: PUSH
25875: LD_INT 53
25877: PUSH
25878: LD_INT 54
25880: PUSH
25881: LD_INT 55
25883: PUSH
25884: LD_INT 56
25886: PUSH
25887: LD_INT 57
25889: PUSH
25890: LD_INT 58
25892: PUSH
25893: LD_INT 59
25895: PUSH
25896: LD_INT 60
25898: PUSH
25899: LD_INT 61
25901: PUSH
25902: LD_INT 62
25904: PUSH
25905: LD_INT 80
25907: PUSH
25908: LD_INT 82
25910: PUSH
25911: LD_INT 83
25913: PUSH
25914: LD_INT 84
25916: PUSH
25917: LD_INT 85
25919: PUSH
25920: LD_INT 86
25922: PUSH
25923: EMPTY
25924: LIST
25925: LIST
25926: LIST
25927: LIST
25928: LIST
25929: LIST
25930: LIST
25931: LIST
25932: LIST
25933: LIST
25934: LIST
25935: LIST
25936: LIST
25937: LIST
25938: LIST
25939: LIST
25940: LIST
25941: LIST
25942: LIST
25943: LIST
25944: LIST
25945: LIST
25946: LIST
25947: LIST
25948: LIST
25949: LIST
25950: LIST
25951: LIST
25952: LIST
25953: LIST
25954: LIST
25955: LIST
25956: LIST
25957: LIST
25958: LIST
25959: LIST
25960: LIST
25961: LIST
25962: LIST
25963: LIST
25964: LIST
25965: LIST
25966: LIST
25967: LIST
25968: LIST
25969: LIST
25970: LIST
25971: LIST
25972: LIST
25973: LIST
25974: LIST
25975: ST_TO_ADDR
25976: GO 26439
25978: LD_INT 2
25980: DOUBLE
25981: EQUAL
25982: IFTRUE 25986
25984: GO 26208
25986: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
25987: LD_ADDR_VAR 0 4
25991: PUSH
25992: LD_INT 35
25994: PUSH
25995: LD_INT 45
25997: PUSH
25998: LD_INT 46
26000: PUSH
26001: LD_INT 47
26003: PUSH
26004: LD_INT 82
26006: PUSH
26007: LD_INT 83
26009: PUSH
26010: LD_INT 84
26012: PUSH
26013: LD_INT 85
26015: PUSH
26016: LD_INT 87
26018: PUSH
26019: LD_INT 70
26021: PUSH
26022: LD_INT 1
26024: PUSH
26025: LD_INT 11
26027: PUSH
26028: LD_INT 3
26030: PUSH
26031: LD_INT 4
26033: PUSH
26034: LD_INT 5
26036: PUSH
26037: LD_INT 6
26039: PUSH
26040: LD_INT 15
26042: PUSH
26043: LD_INT 18
26045: PUSH
26046: LD_INT 7
26048: PUSH
26049: LD_INT 17
26051: PUSH
26052: LD_INT 8
26054: PUSH
26055: LD_INT 20
26057: PUSH
26058: LD_INT 21
26060: PUSH
26061: LD_INT 22
26063: PUSH
26064: LD_INT 72
26066: PUSH
26067: LD_INT 26
26069: PUSH
26070: LD_INT 69
26072: PUSH
26073: LD_INT 39
26075: PUSH
26076: LD_INT 40
26078: PUSH
26079: LD_INT 41
26081: PUSH
26082: LD_INT 42
26084: PUSH
26085: LD_INT 43
26087: PUSH
26088: LD_INT 48
26090: PUSH
26091: LD_INT 49
26093: PUSH
26094: LD_INT 50
26096: PUSH
26097: LD_INT 51
26099: PUSH
26100: LD_INT 52
26102: PUSH
26103: LD_INT 53
26105: PUSH
26106: LD_INT 54
26108: PUSH
26109: LD_INT 55
26111: PUSH
26112: LD_INT 56
26114: PUSH
26115: LD_INT 60
26117: PUSH
26118: LD_INT 61
26120: PUSH
26121: LD_INT 62
26123: PUSH
26124: LD_INT 66
26126: PUSH
26127: LD_INT 67
26129: PUSH
26130: LD_INT 68
26132: PUSH
26133: LD_INT 81
26135: PUSH
26136: LD_INT 82
26138: PUSH
26139: LD_INT 83
26141: PUSH
26142: LD_INT 84
26144: PUSH
26145: LD_INT 85
26147: PUSH
26148: LD_INT 87
26150: PUSH
26151: EMPTY
26152: LIST
26153: LIST
26154: LIST
26155: LIST
26156: LIST
26157: LIST
26158: LIST
26159: LIST
26160: LIST
26161: LIST
26162: LIST
26163: LIST
26164: LIST
26165: LIST
26166: LIST
26167: LIST
26168: LIST
26169: LIST
26170: LIST
26171: LIST
26172: LIST
26173: LIST
26174: LIST
26175: LIST
26176: LIST
26177: LIST
26178: LIST
26179: LIST
26180: LIST
26181: LIST
26182: LIST
26183: LIST
26184: LIST
26185: LIST
26186: LIST
26187: LIST
26188: LIST
26189: LIST
26190: LIST
26191: LIST
26192: LIST
26193: LIST
26194: LIST
26195: LIST
26196: LIST
26197: LIST
26198: LIST
26199: LIST
26200: LIST
26201: LIST
26202: LIST
26203: LIST
26204: LIST
26205: ST_TO_ADDR
26206: GO 26439
26208: LD_INT 3
26210: DOUBLE
26211: EQUAL
26212: IFTRUE 26216
26214: GO 26438
26216: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
26217: LD_ADDR_VAR 0 4
26221: PUSH
26222: LD_INT 46
26224: PUSH
26225: LD_INT 47
26227: PUSH
26228: LD_INT 1
26230: PUSH
26231: LD_INT 2
26233: PUSH
26234: LD_INT 82
26236: PUSH
26237: LD_INT 83
26239: PUSH
26240: LD_INT 84
26242: PUSH
26243: LD_INT 85
26245: PUSH
26246: LD_INT 86
26248: PUSH
26249: LD_INT 11
26251: PUSH
26252: LD_INT 9
26254: PUSH
26255: LD_INT 20
26257: PUSH
26258: LD_INT 19
26260: PUSH
26261: LD_INT 21
26263: PUSH
26264: LD_INT 24
26266: PUSH
26267: LD_INT 22
26269: PUSH
26270: LD_INT 25
26272: PUSH
26273: LD_INT 28
26275: PUSH
26276: LD_INT 29
26278: PUSH
26279: LD_INT 30
26281: PUSH
26282: LD_INT 31
26284: PUSH
26285: LD_INT 37
26287: PUSH
26288: LD_INT 38
26290: PUSH
26291: LD_INT 32
26293: PUSH
26294: LD_INT 27
26296: PUSH
26297: LD_INT 33
26299: PUSH
26300: LD_INT 69
26302: PUSH
26303: LD_INT 39
26305: PUSH
26306: LD_INT 34
26308: PUSH
26309: LD_INT 40
26311: PUSH
26312: LD_INT 71
26314: PUSH
26315: LD_INT 23
26317: PUSH
26318: LD_INT 44
26320: PUSH
26321: LD_INT 48
26323: PUSH
26324: LD_INT 49
26326: PUSH
26327: LD_INT 50
26329: PUSH
26330: LD_INT 51
26332: PUSH
26333: LD_INT 52
26335: PUSH
26336: LD_INT 53
26338: PUSH
26339: LD_INT 54
26341: PUSH
26342: LD_INT 55
26344: PUSH
26345: LD_INT 56
26347: PUSH
26348: LD_INT 57
26350: PUSH
26351: LD_INT 58
26353: PUSH
26354: LD_INT 59
26356: PUSH
26357: LD_INT 63
26359: PUSH
26360: LD_INT 64
26362: PUSH
26363: LD_INT 65
26365: PUSH
26366: LD_INT 82
26368: PUSH
26369: LD_INT 83
26371: PUSH
26372: LD_INT 84
26374: PUSH
26375: LD_INT 85
26377: PUSH
26378: LD_INT 86
26380: PUSH
26381: EMPTY
26382: LIST
26383: LIST
26384: LIST
26385: LIST
26386: LIST
26387: LIST
26388: LIST
26389: LIST
26390: LIST
26391: LIST
26392: LIST
26393: LIST
26394: LIST
26395: LIST
26396: LIST
26397: LIST
26398: LIST
26399: LIST
26400: LIST
26401: LIST
26402: LIST
26403: LIST
26404: LIST
26405: LIST
26406: LIST
26407: LIST
26408: LIST
26409: LIST
26410: LIST
26411: LIST
26412: LIST
26413: LIST
26414: LIST
26415: LIST
26416: LIST
26417: LIST
26418: LIST
26419: LIST
26420: LIST
26421: LIST
26422: LIST
26423: LIST
26424: LIST
26425: LIST
26426: LIST
26427: LIST
26428: LIST
26429: LIST
26430: LIST
26431: LIST
26432: LIST
26433: LIST
26434: LIST
26435: ST_TO_ADDR
26436: GO 26439
26438: POP
// if state > - 1 and state < 3 then
26439: LD_VAR 0 3
26443: PUSH
26444: LD_INT 1
26446: NEG
26447: GREATER
26448: PUSH
26449: LD_VAR 0 3
26453: PUSH
26454: LD_INT 3
26456: LESS
26457: AND
26458: IFFALSE 26515
// for i in result do
26460: LD_ADDR_VAR 0 5
26464: PUSH
26465: LD_VAR 0 4
26469: PUSH
26470: FOR_IN
26471: IFFALSE 26513
// if GetTech ( i , side ) <> state then
26473: LD_VAR 0 5
26477: PPUSH
26478: LD_VAR 0 1
26482: PPUSH
26483: CALL_OW 321
26487: PUSH
26488: LD_VAR 0 3
26492: NONEQUAL
26493: IFFALSE 26511
// result := result diff i ;
26495: LD_ADDR_VAR 0 4
26499: PUSH
26500: LD_VAR 0 4
26504: PUSH
26505: LD_VAR 0 5
26509: DIFF
26510: ST_TO_ADDR
26511: GO 26470
26513: POP
26514: POP
// end ;
26515: LD_VAR 0 4
26519: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
26520: LD_INT 0
26522: PPUSH
26523: PPUSH
26524: PPUSH
// result := true ;
26525: LD_ADDR_VAR 0 3
26529: PUSH
26530: LD_INT 1
26532: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
26533: LD_ADDR_VAR 0 5
26537: PUSH
26538: LD_VAR 0 2
26542: PPUSH
26543: CALL_OW 480
26547: ST_TO_ADDR
// if not tmp then
26548: LD_VAR 0 5
26552: NOT
26553: IFFALSE 26557
// exit ;
26555: GO 26606
// for i in tmp do
26557: LD_ADDR_VAR 0 4
26561: PUSH
26562: LD_VAR 0 5
26566: PUSH
26567: FOR_IN
26568: IFFALSE 26604
// if GetTech ( i , side ) <> state_researched then
26570: LD_VAR 0 4
26574: PPUSH
26575: LD_VAR 0 1
26579: PPUSH
26580: CALL_OW 321
26584: PUSH
26585: LD_INT 2
26587: NONEQUAL
26588: IFFALSE 26602
// begin result := false ;
26590: LD_ADDR_VAR 0 3
26594: PUSH
26595: LD_INT 0
26597: ST_TO_ADDR
// exit ;
26598: POP
26599: POP
26600: GO 26606
// end ;
26602: GO 26567
26604: POP
26605: POP
// end ;
26606: LD_VAR 0 3
26610: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
26611: LD_INT 0
26613: PPUSH
26614: PPUSH
26615: PPUSH
26616: PPUSH
26617: PPUSH
26618: PPUSH
26619: PPUSH
26620: PPUSH
26621: PPUSH
26622: PPUSH
26623: PPUSH
26624: PPUSH
26625: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
26626: LD_VAR 0 1
26630: NOT
26631: PUSH
26632: LD_VAR 0 1
26636: PPUSH
26637: CALL_OW 257
26641: PUSH
26642: LD_INT 9
26644: NONEQUAL
26645: OR
26646: IFFALSE 26650
// exit ;
26648: GO 27223
// side := GetSide ( unit ) ;
26650: LD_ADDR_VAR 0 9
26654: PUSH
26655: LD_VAR 0 1
26659: PPUSH
26660: CALL_OW 255
26664: ST_TO_ADDR
// tech_space := tech_spacanom ;
26665: LD_ADDR_VAR 0 12
26669: PUSH
26670: LD_INT 29
26672: ST_TO_ADDR
// tech_time := tech_taurad ;
26673: LD_ADDR_VAR 0 13
26677: PUSH
26678: LD_INT 28
26680: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
26681: LD_ADDR_VAR 0 11
26685: PUSH
26686: LD_VAR 0 1
26690: PPUSH
26691: CALL_OW 310
26695: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
26696: LD_VAR 0 11
26700: PPUSH
26701: CALL_OW 247
26705: PUSH
26706: LD_INT 2
26708: EQUAL
26709: IFFALSE 26713
// exit ;
26711: GO 27223
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26713: LD_ADDR_VAR 0 8
26717: PUSH
26718: LD_INT 81
26720: PUSH
26721: LD_VAR 0 9
26725: PUSH
26726: EMPTY
26727: LIST
26728: LIST
26729: PUSH
26730: LD_INT 3
26732: PUSH
26733: LD_INT 21
26735: PUSH
26736: LD_INT 3
26738: PUSH
26739: EMPTY
26740: LIST
26741: LIST
26742: PUSH
26743: EMPTY
26744: LIST
26745: LIST
26746: PUSH
26747: EMPTY
26748: LIST
26749: LIST
26750: PPUSH
26751: CALL_OW 69
26755: ST_TO_ADDR
// if not tmp then
26756: LD_VAR 0 8
26760: NOT
26761: IFFALSE 26765
// exit ;
26763: GO 27223
// if in_unit then
26765: LD_VAR 0 11
26769: IFFALSE 26793
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
26771: LD_ADDR_VAR 0 10
26775: PUSH
26776: LD_VAR 0 8
26780: PPUSH
26781: LD_VAR 0 11
26785: PPUSH
26786: CALL_OW 74
26790: ST_TO_ADDR
26791: GO 26813
// enemy := NearestUnitToUnit ( tmp , unit ) ;
26793: LD_ADDR_VAR 0 10
26797: PUSH
26798: LD_VAR 0 8
26802: PPUSH
26803: LD_VAR 0 1
26807: PPUSH
26808: CALL_OW 74
26812: ST_TO_ADDR
// if not enemy then
26813: LD_VAR 0 10
26817: NOT
26818: IFFALSE 26822
// exit ;
26820: GO 27223
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
26822: LD_VAR 0 11
26826: PUSH
26827: LD_VAR 0 11
26831: PPUSH
26832: LD_VAR 0 10
26836: PPUSH
26837: CALL_OW 296
26841: PUSH
26842: LD_INT 13
26844: GREATER
26845: AND
26846: PUSH
26847: LD_VAR 0 1
26851: PPUSH
26852: LD_VAR 0 10
26856: PPUSH
26857: CALL_OW 296
26861: PUSH
26862: LD_INT 12
26864: GREATER
26865: OR
26866: IFFALSE 26870
// exit ;
26868: GO 27223
// missile := [ 1 ] ;
26870: LD_ADDR_VAR 0 14
26874: PUSH
26875: LD_INT 1
26877: PUSH
26878: EMPTY
26879: LIST
26880: ST_TO_ADDR
// if Researched ( side , tech_space ) then
26881: LD_VAR 0 9
26885: PPUSH
26886: LD_VAR 0 12
26890: PPUSH
26891: CALL_OW 325
26895: IFFALSE 26924
// missile := Insert ( missile , missile + 1 , 2 ) ;
26897: LD_ADDR_VAR 0 14
26901: PUSH
26902: LD_VAR 0 14
26906: PPUSH
26907: LD_VAR 0 14
26911: PUSH
26912: LD_INT 1
26914: PLUS
26915: PPUSH
26916: LD_INT 2
26918: PPUSH
26919: CALL_OW 2
26923: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
26924: LD_VAR 0 9
26928: PPUSH
26929: LD_VAR 0 13
26933: PPUSH
26934: CALL_OW 325
26938: PUSH
26939: LD_VAR 0 10
26943: PPUSH
26944: CALL_OW 255
26948: PPUSH
26949: LD_VAR 0 13
26953: PPUSH
26954: CALL_OW 325
26958: NOT
26959: AND
26960: IFFALSE 26989
// missile := Insert ( missile , missile + 1 , 3 ) ;
26962: LD_ADDR_VAR 0 14
26966: PUSH
26967: LD_VAR 0 14
26971: PPUSH
26972: LD_VAR 0 14
26976: PUSH
26977: LD_INT 1
26979: PLUS
26980: PPUSH
26981: LD_INT 3
26983: PPUSH
26984: CALL_OW 2
26988: ST_TO_ADDR
// if missile < 2 then
26989: LD_VAR 0 14
26993: PUSH
26994: LD_INT 2
26996: LESS
26997: IFFALSE 27001
// exit ;
26999: GO 27223
// x := GetX ( enemy ) ;
27001: LD_ADDR_VAR 0 4
27005: PUSH
27006: LD_VAR 0 10
27010: PPUSH
27011: CALL_OW 250
27015: ST_TO_ADDR
// y := GetY ( enemy ) ;
27016: LD_ADDR_VAR 0 5
27020: PUSH
27021: LD_VAR 0 10
27025: PPUSH
27026: CALL_OW 251
27030: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
27031: LD_ADDR_VAR 0 6
27035: PUSH
27036: LD_VAR 0 4
27040: PUSH
27041: LD_INT 1
27043: NEG
27044: PPUSH
27045: LD_INT 1
27047: PPUSH
27048: CALL_OW 12
27052: PLUS
27053: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
27054: LD_ADDR_VAR 0 7
27058: PUSH
27059: LD_VAR 0 5
27063: PUSH
27064: LD_INT 1
27066: NEG
27067: PPUSH
27068: LD_INT 1
27070: PPUSH
27071: CALL_OW 12
27075: PLUS
27076: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
27077: LD_VAR 0 6
27081: PPUSH
27082: LD_VAR 0 7
27086: PPUSH
27087: CALL_OW 488
27091: NOT
27092: IFFALSE 27114
// begin _x := x ;
27094: LD_ADDR_VAR 0 6
27098: PUSH
27099: LD_VAR 0 4
27103: ST_TO_ADDR
// _y := y ;
27104: LD_ADDR_VAR 0 7
27108: PUSH
27109: LD_VAR 0 5
27113: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
27114: LD_ADDR_VAR 0 3
27118: PUSH
27119: LD_INT 1
27121: PPUSH
27122: LD_VAR 0 14
27126: PPUSH
27127: CALL_OW 12
27131: ST_TO_ADDR
// case i of 1 :
27132: LD_VAR 0 3
27136: PUSH
27137: LD_INT 1
27139: DOUBLE
27140: EQUAL
27141: IFTRUE 27145
27143: GO 27162
27145: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
27146: LD_VAR 0 1
27150: PPUSH
27151: LD_VAR 0 10
27155: PPUSH
27156: CALL_OW 115
27160: GO 27223
27162: LD_INT 2
27164: DOUBLE
27165: EQUAL
27166: IFTRUE 27170
27168: GO 27192
27170: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
27171: LD_VAR 0 1
27175: PPUSH
27176: LD_VAR 0 6
27180: PPUSH
27181: LD_VAR 0 7
27185: PPUSH
27186: CALL_OW 153
27190: GO 27223
27192: LD_INT 3
27194: DOUBLE
27195: EQUAL
27196: IFTRUE 27200
27198: GO 27222
27200: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
27201: LD_VAR 0 1
27205: PPUSH
27206: LD_VAR 0 6
27210: PPUSH
27211: LD_VAR 0 7
27215: PPUSH
27216: CALL_OW 154
27220: GO 27223
27222: POP
// end ;
27223: LD_VAR 0 2
27227: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
27228: LD_INT 0
27230: PPUSH
27231: PPUSH
27232: PPUSH
27233: PPUSH
27234: PPUSH
27235: PPUSH
// if not unit or not building then
27236: LD_VAR 0 1
27240: NOT
27241: PUSH
27242: LD_VAR 0 2
27246: NOT
27247: OR
27248: IFFALSE 27252
// exit ;
27250: GO 27410
// x := GetX ( building ) ;
27252: LD_ADDR_VAR 0 5
27256: PUSH
27257: LD_VAR 0 2
27261: PPUSH
27262: CALL_OW 250
27266: ST_TO_ADDR
// y := GetY ( building ) ;
27267: LD_ADDR_VAR 0 6
27271: PUSH
27272: LD_VAR 0 2
27276: PPUSH
27277: CALL_OW 251
27281: ST_TO_ADDR
// for i = 0 to 5 do
27282: LD_ADDR_VAR 0 4
27286: PUSH
27287: DOUBLE
27288: LD_INT 0
27290: DEC
27291: ST_TO_ADDR
27292: LD_INT 5
27294: PUSH
27295: FOR_TO
27296: IFFALSE 27408
// begin _x := ShiftX ( x , i , 3 ) ;
27298: LD_ADDR_VAR 0 7
27302: PUSH
27303: LD_VAR 0 5
27307: PPUSH
27308: LD_VAR 0 4
27312: PPUSH
27313: LD_INT 3
27315: PPUSH
27316: CALL_OW 272
27320: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
27321: LD_ADDR_VAR 0 8
27325: PUSH
27326: LD_VAR 0 6
27330: PPUSH
27331: LD_VAR 0 4
27335: PPUSH
27336: LD_INT 3
27338: PPUSH
27339: CALL_OW 273
27343: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
27344: LD_VAR 0 7
27348: PPUSH
27349: LD_VAR 0 8
27353: PPUSH
27354: CALL_OW 488
27358: NOT
27359: IFFALSE 27363
// continue ;
27361: GO 27295
// if HexInfo ( _x , _y ) = 0 then
27363: LD_VAR 0 7
27367: PPUSH
27368: LD_VAR 0 8
27372: PPUSH
27373: CALL_OW 428
27377: PUSH
27378: LD_INT 0
27380: EQUAL
27381: IFFALSE 27406
// begin ComMoveXY ( unit , _x , _y ) ;
27383: LD_VAR 0 1
27387: PPUSH
27388: LD_VAR 0 7
27392: PPUSH
27393: LD_VAR 0 8
27397: PPUSH
27398: CALL_OW 111
// exit ;
27402: POP
27403: POP
27404: GO 27410
// end ; end ;
27406: GO 27295
27408: POP
27409: POP
// end ;
27410: LD_VAR 0 3
27414: RET
// export function ScanBase ( side , base_area ) ; begin
27415: LD_INT 0
27417: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
27418: LD_ADDR_VAR 0 3
27422: PUSH
27423: LD_VAR 0 2
27427: PPUSH
27428: LD_INT 81
27430: PUSH
27431: LD_VAR 0 1
27435: PUSH
27436: EMPTY
27437: LIST
27438: LIST
27439: PPUSH
27440: CALL_OW 70
27444: ST_TO_ADDR
// end ;
27445: LD_VAR 0 3
27449: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
27450: LD_INT 0
27452: PPUSH
27453: PPUSH
27454: PPUSH
27455: PPUSH
// result := false ;
27456: LD_ADDR_VAR 0 2
27460: PUSH
27461: LD_INT 0
27463: ST_TO_ADDR
// side := GetSide ( unit ) ;
27464: LD_ADDR_VAR 0 3
27468: PUSH
27469: LD_VAR 0 1
27473: PPUSH
27474: CALL_OW 255
27478: ST_TO_ADDR
// nat := GetNation ( unit ) ;
27479: LD_ADDR_VAR 0 4
27483: PUSH
27484: LD_VAR 0 1
27488: PPUSH
27489: CALL_OW 248
27493: ST_TO_ADDR
// case nat of 1 :
27494: LD_VAR 0 4
27498: PUSH
27499: LD_INT 1
27501: DOUBLE
27502: EQUAL
27503: IFTRUE 27507
27505: GO 27518
27507: POP
// tech := tech_lassight ; 2 :
27508: LD_ADDR_VAR 0 5
27512: PUSH
27513: LD_INT 12
27515: ST_TO_ADDR
27516: GO 27557
27518: LD_INT 2
27520: DOUBLE
27521: EQUAL
27522: IFTRUE 27526
27524: GO 27537
27526: POP
// tech := tech_mortar ; 3 :
27527: LD_ADDR_VAR 0 5
27531: PUSH
27532: LD_INT 41
27534: ST_TO_ADDR
27535: GO 27557
27537: LD_INT 3
27539: DOUBLE
27540: EQUAL
27541: IFTRUE 27545
27543: GO 27556
27545: POP
// tech := tech_bazooka ; end ;
27546: LD_ADDR_VAR 0 5
27550: PUSH
27551: LD_INT 44
27553: ST_TO_ADDR
27554: GO 27557
27556: POP
// if Researched ( side , tech ) then
27557: LD_VAR 0 3
27561: PPUSH
27562: LD_VAR 0 5
27566: PPUSH
27567: CALL_OW 325
27571: IFFALSE 27598
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
27573: LD_ADDR_VAR 0 2
27577: PUSH
27578: LD_INT 5
27580: PUSH
27581: LD_INT 8
27583: PUSH
27584: LD_INT 9
27586: PUSH
27587: EMPTY
27588: LIST
27589: LIST
27590: LIST
27591: PUSH
27592: LD_VAR 0 4
27596: ARRAY
27597: ST_TO_ADDR
// end ;
27598: LD_VAR 0 2
27602: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
27603: LD_INT 0
27605: PPUSH
27606: PPUSH
27607: PPUSH
// if not mines then
27608: LD_VAR 0 2
27612: NOT
27613: IFFALSE 27617
// exit ;
27615: GO 27761
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27617: LD_ADDR_VAR 0 5
27621: PUSH
27622: LD_INT 81
27624: PUSH
27625: LD_VAR 0 1
27629: PUSH
27630: EMPTY
27631: LIST
27632: LIST
27633: PUSH
27634: LD_INT 3
27636: PUSH
27637: LD_INT 21
27639: PUSH
27640: LD_INT 3
27642: PUSH
27643: EMPTY
27644: LIST
27645: LIST
27646: PUSH
27647: EMPTY
27648: LIST
27649: LIST
27650: PUSH
27651: EMPTY
27652: LIST
27653: LIST
27654: PPUSH
27655: CALL_OW 69
27659: ST_TO_ADDR
// for i in mines do
27660: LD_ADDR_VAR 0 4
27664: PUSH
27665: LD_VAR 0 2
27669: PUSH
27670: FOR_IN
27671: IFFALSE 27759
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
27673: LD_VAR 0 4
27677: PUSH
27678: LD_INT 1
27680: ARRAY
27681: PPUSH
27682: LD_VAR 0 4
27686: PUSH
27687: LD_INT 2
27689: ARRAY
27690: PPUSH
27691: CALL_OW 458
27695: NOT
27696: IFFALSE 27700
// continue ;
27698: GO 27670
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
27700: LD_VAR 0 4
27704: PUSH
27705: LD_INT 1
27707: ARRAY
27708: PPUSH
27709: LD_VAR 0 4
27713: PUSH
27714: LD_INT 2
27716: ARRAY
27717: PPUSH
27718: CALL_OW 428
27722: PUSH
27723: LD_VAR 0 5
27727: IN
27728: IFFALSE 27757
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
27730: LD_VAR 0 4
27734: PUSH
27735: LD_INT 1
27737: ARRAY
27738: PPUSH
27739: LD_VAR 0 4
27743: PUSH
27744: LD_INT 2
27746: ARRAY
27747: PPUSH
27748: LD_VAR 0 1
27752: PPUSH
27753: CALL_OW 456
// end ;
27757: GO 27670
27759: POP
27760: POP
// end ;
27761: LD_VAR 0 3
27765: RET
// export function Count ( array ) ; var i ; begin
27766: LD_INT 0
27768: PPUSH
27769: PPUSH
// result := 0 ;
27770: LD_ADDR_VAR 0 2
27774: PUSH
27775: LD_INT 0
27777: ST_TO_ADDR
// for i in array do
27778: LD_ADDR_VAR 0 3
27782: PUSH
27783: LD_VAR 0 1
27787: PUSH
27788: FOR_IN
27789: IFFALSE 27813
// if i then
27791: LD_VAR 0 3
27795: IFFALSE 27811
// result := result + 1 ;
27797: LD_ADDR_VAR 0 2
27801: PUSH
27802: LD_VAR 0 2
27806: PUSH
27807: LD_INT 1
27809: PLUS
27810: ST_TO_ADDR
27811: GO 27788
27813: POP
27814: POP
// end ;
27815: LD_VAR 0 2
27819: RET
// export function IsEmpty ( building ) ; begin
27820: LD_INT 0
27822: PPUSH
// if not building then
27823: LD_VAR 0 1
27827: NOT
27828: IFFALSE 27832
// exit ;
27830: GO 27875
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
27832: LD_ADDR_VAR 0 2
27836: PUSH
27837: LD_VAR 0 1
27841: PUSH
27842: LD_INT 22
27844: PUSH
27845: LD_VAR 0 1
27849: PPUSH
27850: CALL_OW 255
27854: PUSH
27855: EMPTY
27856: LIST
27857: LIST
27858: PUSH
27859: LD_INT 58
27861: PUSH
27862: EMPTY
27863: LIST
27864: PUSH
27865: EMPTY
27866: LIST
27867: LIST
27868: PPUSH
27869: CALL_OW 69
27873: IN
27874: ST_TO_ADDR
// end ;
27875: LD_VAR 0 2
27879: RET
// export function IsNotFull ( building ) ; begin
27880: LD_INT 0
27882: PPUSH
// if not building then
27883: LD_VAR 0 1
27887: NOT
27888: IFFALSE 27892
// exit ;
27890: GO 27911
// result := UnitsInside ( building ) < 6 ;
27892: LD_ADDR_VAR 0 2
27896: PUSH
27897: LD_VAR 0 1
27901: PPUSH
27902: CALL_OW 313
27906: PUSH
27907: LD_INT 6
27909: LESS
27910: ST_TO_ADDR
// end ;
27911: LD_VAR 0 2
27915: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
27916: LD_INT 0
27918: PPUSH
27919: PPUSH
27920: PPUSH
27921: PPUSH
// tmp := [ ] ;
27922: LD_ADDR_VAR 0 3
27926: PUSH
27927: EMPTY
27928: ST_TO_ADDR
// list := [ ] ;
27929: LD_ADDR_VAR 0 5
27933: PUSH
27934: EMPTY
27935: ST_TO_ADDR
// for i = 16 to 25 do
27936: LD_ADDR_VAR 0 4
27940: PUSH
27941: DOUBLE
27942: LD_INT 16
27944: DEC
27945: ST_TO_ADDR
27946: LD_INT 25
27948: PUSH
27949: FOR_TO
27950: IFFALSE 28023
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
27952: LD_ADDR_VAR 0 3
27956: PUSH
27957: LD_VAR 0 3
27961: PUSH
27962: LD_INT 22
27964: PUSH
27965: LD_VAR 0 1
27969: PPUSH
27970: CALL_OW 255
27974: PUSH
27975: EMPTY
27976: LIST
27977: LIST
27978: PUSH
27979: LD_INT 91
27981: PUSH
27982: LD_VAR 0 1
27986: PUSH
27987: LD_INT 6
27989: PUSH
27990: EMPTY
27991: LIST
27992: LIST
27993: LIST
27994: PUSH
27995: LD_INT 30
27997: PUSH
27998: LD_VAR 0 4
28002: PUSH
28003: EMPTY
28004: LIST
28005: LIST
28006: PUSH
28007: EMPTY
28008: LIST
28009: LIST
28010: LIST
28011: PUSH
28012: EMPTY
28013: LIST
28014: PPUSH
28015: CALL_OW 69
28019: ADD
28020: ST_TO_ADDR
28021: GO 27949
28023: POP
28024: POP
// for i = 1 to tmp do
28025: LD_ADDR_VAR 0 4
28029: PUSH
28030: DOUBLE
28031: LD_INT 1
28033: DEC
28034: ST_TO_ADDR
28035: LD_VAR 0 3
28039: PUSH
28040: FOR_TO
28041: IFFALSE 28129
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
28043: LD_ADDR_VAR 0 5
28047: PUSH
28048: LD_VAR 0 5
28052: PUSH
28053: LD_VAR 0 3
28057: PUSH
28058: LD_VAR 0 4
28062: ARRAY
28063: PPUSH
28064: CALL_OW 266
28068: PUSH
28069: LD_VAR 0 3
28073: PUSH
28074: LD_VAR 0 4
28078: ARRAY
28079: PPUSH
28080: CALL_OW 250
28084: PUSH
28085: LD_VAR 0 3
28089: PUSH
28090: LD_VAR 0 4
28094: ARRAY
28095: PPUSH
28096: CALL_OW 251
28100: PUSH
28101: LD_VAR 0 3
28105: PUSH
28106: LD_VAR 0 4
28110: ARRAY
28111: PPUSH
28112: CALL_OW 254
28116: PUSH
28117: EMPTY
28118: LIST
28119: LIST
28120: LIST
28121: LIST
28122: PUSH
28123: EMPTY
28124: LIST
28125: ADD
28126: ST_TO_ADDR
28127: GO 28040
28129: POP
28130: POP
// result := list ;
28131: LD_ADDR_VAR 0 2
28135: PUSH
28136: LD_VAR 0 5
28140: ST_TO_ADDR
// end ;
28141: LD_VAR 0 2
28145: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
28146: LD_INT 0
28148: PPUSH
28149: PPUSH
28150: PPUSH
28151: PPUSH
28152: PPUSH
28153: PPUSH
28154: PPUSH
// if not factory then
28155: LD_VAR 0 1
28159: NOT
28160: IFFALSE 28164
// exit ;
28162: GO 28757
// if control = control_apeman then
28164: LD_VAR 0 4
28168: PUSH
28169: LD_INT 5
28171: EQUAL
28172: IFFALSE 28281
// begin tmp := UnitsInside ( factory ) ;
28174: LD_ADDR_VAR 0 8
28178: PUSH
28179: LD_VAR 0 1
28183: PPUSH
28184: CALL_OW 313
28188: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
28189: LD_VAR 0 8
28193: PPUSH
28194: LD_INT 25
28196: PUSH
28197: LD_INT 12
28199: PUSH
28200: EMPTY
28201: LIST
28202: LIST
28203: PPUSH
28204: CALL_OW 72
28208: NOT
28209: IFFALSE 28219
// control := control_manual ;
28211: LD_ADDR_VAR 0 4
28215: PUSH
28216: LD_INT 1
28218: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
28219: LD_ADDR_VAR 0 8
28223: PUSH
28224: LD_VAR 0 1
28228: PPUSH
28229: CALL 27916 0 1
28233: ST_TO_ADDR
// if tmp then
28234: LD_VAR 0 8
28238: IFFALSE 28281
// begin for i in tmp do
28240: LD_ADDR_VAR 0 7
28244: PUSH
28245: LD_VAR 0 8
28249: PUSH
28250: FOR_IN
28251: IFFALSE 28279
// if i [ 1 ] = b_ext_radio then
28253: LD_VAR 0 7
28257: PUSH
28258: LD_INT 1
28260: ARRAY
28261: PUSH
28262: LD_INT 22
28264: EQUAL
28265: IFFALSE 28277
// begin control := control_remote ;
28267: LD_ADDR_VAR 0 4
28271: PUSH
28272: LD_INT 2
28274: ST_TO_ADDR
// break ;
28275: GO 28279
// end ;
28277: GO 28250
28279: POP
28280: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
28281: LD_VAR 0 1
28285: PPUSH
28286: LD_VAR 0 2
28290: PPUSH
28291: LD_VAR 0 3
28295: PPUSH
28296: LD_VAR 0 4
28300: PPUSH
28301: LD_VAR 0 5
28305: PPUSH
28306: CALL_OW 448
28310: IFFALSE 28345
// begin result := [ chassis , engine , control , weapon ] ;
28312: LD_ADDR_VAR 0 6
28316: PUSH
28317: LD_VAR 0 2
28321: PUSH
28322: LD_VAR 0 3
28326: PUSH
28327: LD_VAR 0 4
28331: PUSH
28332: LD_VAR 0 5
28336: PUSH
28337: EMPTY
28338: LIST
28339: LIST
28340: LIST
28341: LIST
28342: ST_TO_ADDR
// exit ;
28343: GO 28757
// end ; _chassis := AvailableChassisList ( factory ) ;
28345: LD_ADDR_VAR 0 9
28349: PUSH
28350: LD_VAR 0 1
28354: PPUSH
28355: CALL_OW 475
28359: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
28360: LD_ADDR_VAR 0 11
28364: PUSH
28365: LD_VAR 0 1
28369: PPUSH
28370: CALL_OW 476
28374: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
28375: LD_ADDR_VAR 0 12
28379: PUSH
28380: LD_VAR 0 1
28384: PPUSH
28385: CALL_OW 477
28389: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
28390: LD_ADDR_VAR 0 10
28394: PUSH
28395: LD_VAR 0 1
28399: PPUSH
28400: CALL_OW 478
28404: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
28405: LD_VAR 0 9
28409: NOT
28410: PUSH
28411: LD_VAR 0 11
28415: NOT
28416: OR
28417: PUSH
28418: LD_VAR 0 12
28422: NOT
28423: OR
28424: PUSH
28425: LD_VAR 0 10
28429: NOT
28430: OR
28431: IFFALSE 28466
// begin result := [ chassis , engine , control , weapon ] ;
28433: LD_ADDR_VAR 0 6
28437: PUSH
28438: LD_VAR 0 2
28442: PUSH
28443: LD_VAR 0 3
28447: PUSH
28448: LD_VAR 0 4
28452: PUSH
28453: LD_VAR 0 5
28457: PUSH
28458: EMPTY
28459: LIST
28460: LIST
28461: LIST
28462: LIST
28463: ST_TO_ADDR
// exit ;
28464: GO 28757
// end ; if not chassis in _chassis then
28466: LD_VAR 0 2
28470: PUSH
28471: LD_VAR 0 9
28475: IN
28476: NOT
28477: IFFALSE 28503
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
28479: LD_ADDR_VAR 0 2
28483: PUSH
28484: LD_VAR 0 9
28488: PUSH
28489: LD_INT 1
28491: PPUSH
28492: LD_VAR 0 9
28496: PPUSH
28497: CALL_OW 12
28501: ARRAY
28502: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
28503: LD_VAR 0 2
28507: PPUSH
28508: LD_VAR 0 3
28512: PPUSH
28513: CALL 28762 0 2
28517: NOT
28518: IFFALSE 28577
// repeat engine := _engine [ 1 ] ;
28520: LD_ADDR_VAR 0 3
28524: PUSH
28525: LD_VAR 0 11
28529: PUSH
28530: LD_INT 1
28532: ARRAY
28533: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
28534: LD_ADDR_VAR 0 11
28538: PUSH
28539: LD_VAR 0 11
28543: PPUSH
28544: LD_INT 1
28546: PPUSH
28547: CALL_OW 3
28551: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
28552: LD_VAR 0 2
28556: PPUSH
28557: LD_VAR 0 3
28561: PPUSH
28562: CALL 28762 0 2
28566: PUSH
28567: LD_VAR 0 11
28571: PUSH
28572: EMPTY
28573: EQUAL
28574: OR
28575: IFFALSE 28520
// if not control in _control then
28577: LD_VAR 0 4
28581: PUSH
28582: LD_VAR 0 12
28586: IN
28587: NOT
28588: IFFALSE 28614
// control := _control [ rand ( 1 , _control ) ] ;
28590: LD_ADDR_VAR 0 4
28594: PUSH
28595: LD_VAR 0 12
28599: PUSH
28600: LD_INT 1
28602: PPUSH
28603: LD_VAR 0 12
28607: PPUSH
28608: CALL_OW 12
28612: ARRAY
28613: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
28614: LD_VAR 0 2
28618: PPUSH
28619: LD_VAR 0 5
28623: PPUSH
28624: CALL 28982 0 2
28628: NOT
28629: IFFALSE 28688
// repeat weapon := _weapon [ 1 ] ;
28631: LD_ADDR_VAR 0 5
28635: PUSH
28636: LD_VAR 0 10
28640: PUSH
28641: LD_INT 1
28643: ARRAY
28644: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
28645: LD_ADDR_VAR 0 10
28649: PUSH
28650: LD_VAR 0 10
28654: PPUSH
28655: LD_INT 1
28657: PPUSH
28658: CALL_OW 3
28662: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
28663: LD_VAR 0 2
28667: PPUSH
28668: LD_VAR 0 5
28672: PPUSH
28673: CALL 28982 0 2
28677: PUSH
28678: LD_VAR 0 10
28682: PUSH
28683: EMPTY
28684: EQUAL
28685: OR
28686: IFFALSE 28631
// result := [ ] ;
28688: LD_ADDR_VAR 0 6
28692: PUSH
28693: EMPTY
28694: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
28695: LD_VAR 0 1
28699: PPUSH
28700: LD_VAR 0 2
28704: PPUSH
28705: LD_VAR 0 3
28709: PPUSH
28710: LD_VAR 0 4
28714: PPUSH
28715: LD_VAR 0 5
28719: PPUSH
28720: CALL_OW 448
28724: IFFALSE 28757
// result := [ chassis , engine , control , weapon ] ;
28726: LD_ADDR_VAR 0 6
28730: PUSH
28731: LD_VAR 0 2
28735: PUSH
28736: LD_VAR 0 3
28740: PUSH
28741: LD_VAR 0 4
28745: PUSH
28746: LD_VAR 0 5
28750: PUSH
28751: EMPTY
28752: LIST
28753: LIST
28754: LIST
28755: LIST
28756: ST_TO_ADDR
// end ;
28757: LD_VAR 0 6
28761: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
28762: LD_INT 0
28764: PPUSH
// if not chassis or not engine then
28765: LD_VAR 0 1
28769: NOT
28770: PUSH
28771: LD_VAR 0 2
28775: NOT
28776: OR
28777: IFFALSE 28781
// exit ;
28779: GO 28977
// case engine of engine_solar :
28781: LD_VAR 0 2
28785: PUSH
28786: LD_INT 2
28788: DOUBLE
28789: EQUAL
28790: IFTRUE 28794
28792: GO 28832
28794: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
28795: LD_ADDR_VAR 0 3
28799: PUSH
28800: LD_INT 11
28802: PUSH
28803: LD_INT 12
28805: PUSH
28806: LD_INT 13
28808: PUSH
28809: LD_INT 14
28811: PUSH
28812: LD_INT 1
28814: PUSH
28815: LD_INT 2
28817: PUSH
28818: LD_INT 3
28820: PUSH
28821: EMPTY
28822: LIST
28823: LIST
28824: LIST
28825: LIST
28826: LIST
28827: LIST
28828: LIST
28829: ST_TO_ADDR
28830: GO 28961
28832: LD_INT 1
28834: DOUBLE
28835: EQUAL
28836: IFTRUE 28840
28838: GO 28902
28840: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
28841: LD_ADDR_VAR 0 3
28845: PUSH
28846: LD_INT 11
28848: PUSH
28849: LD_INT 12
28851: PUSH
28852: LD_INT 13
28854: PUSH
28855: LD_INT 14
28857: PUSH
28858: LD_INT 1
28860: PUSH
28861: LD_INT 2
28863: PUSH
28864: LD_INT 3
28866: PUSH
28867: LD_INT 4
28869: PUSH
28870: LD_INT 5
28872: PUSH
28873: LD_INT 21
28875: PUSH
28876: LD_INT 23
28878: PUSH
28879: LD_INT 22
28881: PUSH
28882: LD_INT 24
28884: PUSH
28885: EMPTY
28886: LIST
28887: LIST
28888: LIST
28889: LIST
28890: LIST
28891: LIST
28892: LIST
28893: LIST
28894: LIST
28895: LIST
28896: LIST
28897: LIST
28898: LIST
28899: ST_TO_ADDR
28900: GO 28961
28902: LD_INT 3
28904: DOUBLE
28905: EQUAL
28906: IFTRUE 28910
28908: GO 28960
28910: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
28911: LD_ADDR_VAR 0 3
28915: PUSH
28916: LD_INT 13
28918: PUSH
28919: LD_INT 14
28921: PUSH
28922: LD_INT 2
28924: PUSH
28925: LD_INT 3
28927: PUSH
28928: LD_INT 4
28930: PUSH
28931: LD_INT 5
28933: PUSH
28934: LD_INT 21
28936: PUSH
28937: LD_INT 22
28939: PUSH
28940: LD_INT 23
28942: PUSH
28943: LD_INT 24
28945: PUSH
28946: EMPTY
28947: LIST
28948: LIST
28949: LIST
28950: LIST
28951: LIST
28952: LIST
28953: LIST
28954: LIST
28955: LIST
28956: LIST
28957: ST_TO_ADDR
28958: GO 28961
28960: POP
// result := ( chassis in result ) ;
28961: LD_ADDR_VAR 0 3
28965: PUSH
28966: LD_VAR 0 1
28970: PUSH
28971: LD_VAR 0 3
28975: IN
28976: ST_TO_ADDR
// end ;
28977: LD_VAR 0 3
28981: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
28982: LD_INT 0
28984: PPUSH
// if not chassis or not weapon then
28985: LD_VAR 0 1
28989: NOT
28990: PUSH
28991: LD_VAR 0 2
28995: NOT
28996: OR
28997: IFFALSE 29001
// exit ;
28999: GO 30027
// case weapon of us_machine_gun :
29001: LD_VAR 0 2
29005: PUSH
29006: LD_INT 2
29008: DOUBLE
29009: EQUAL
29010: IFTRUE 29014
29012: GO 29044
29014: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
29015: LD_ADDR_VAR 0 3
29019: PUSH
29020: LD_INT 1
29022: PUSH
29023: LD_INT 2
29025: PUSH
29026: LD_INT 3
29028: PUSH
29029: LD_INT 4
29031: PUSH
29032: LD_INT 5
29034: PUSH
29035: EMPTY
29036: LIST
29037: LIST
29038: LIST
29039: LIST
29040: LIST
29041: ST_TO_ADDR
29042: GO 30011
29044: LD_INT 3
29046: DOUBLE
29047: EQUAL
29048: IFTRUE 29052
29050: GO 29082
29052: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
29053: LD_ADDR_VAR 0 3
29057: PUSH
29058: LD_INT 1
29060: PUSH
29061: LD_INT 2
29063: PUSH
29064: LD_INT 3
29066: PUSH
29067: LD_INT 4
29069: PUSH
29070: LD_INT 5
29072: PUSH
29073: EMPTY
29074: LIST
29075: LIST
29076: LIST
29077: LIST
29078: LIST
29079: ST_TO_ADDR
29080: GO 30011
29082: LD_INT 11
29084: DOUBLE
29085: EQUAL
29086: IFTRUE 29090
29088: GO 29120
29090: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
29091: LD_ADDR_VAR 0 3
29095: PUSH
29096: LD_INT 1
29098: PUSH
29099: LD_INT 2
29101: PUSH
29102: LD_INT 3
29104: PUSH
29105: LD_INT 4
29107: PUSH
29108: LD_INT 5
29110: PUSH
29111: EMPTY
29112: LIST
29113: LIST
29114: LIST
29115: LIST
29116: LIST
29117: ST_TO_ADDR
29118: GO 30011
29120: LD_INT 4
29122: DOUBLE
29123: EQUAL
29124: IFTRUE 29128
29126: GO 29154
29128: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
29129: LD_ADDR_VAR 0 3
29133: PUSH
29134: LD_INT 2
29136: PUSH
29137: LD_INT 3
29139: PUSH
29140: LD_INT 4
29142: PUSH
29143: LD_INT 5
29145: PUSH
29146: EMPTY
29147: LIST
29148: LIST
29149: LIST
29150: LIST
29151: ST_TO_ADDR
29152: GO 30011
29154: LD_INT 5
29156: DOUBLE
29157: EQUAL
29158: IFTRUE 29162
29160: GO 29188
29162: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
29163: LD_ADDR_VAR 0 3
29167: PUSH
29168: LD_INT 2
29170: PUSH
29171: LD_INT 3
29173: PUSH
29174: LD_INT 4
29176: PUSH
29177: LD_INT 5
29179: PUSH
29180: EMPTY
29181: LIST
29182: LIST
29183: LIST
29184: LIST
29185: ST_TO_ADDR
29186: GO 30011
29188: LD_INT 9
29190: DOUBLE
29191: EQUAL
29192: IFTRUE 29196
29194: GO 29222
29196: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
29197: LD_ADDR_VAR 0 3
29201: PUSH
29202: LD_INT 2
29204: PUSH
29205: LD_INT 3
29207: PUSH
29208: LD_INT 4
29210: PUSH
29211: LD_INT 5
29213: PUSH
29214: EMPTY
29215: LIST
29216: LIST
29217: LIST
29218: LIST
29219: ST_TO_ADDR
29220: GO 30011
29222: LD_INT 7
29224: DOUBLE
29225: EQUAL
29226: IFTRUE 29230
29228: GO 29256
29230: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
29231: LD_ADDR_VAR 0 3
29235: PUSH
29236: LD_INT 2
29238: PUSH
29239: LD_INT 3
29241: PUSH
29242: LD_INT 4
29244: PUSH
29245: LD_INT 5
29247: PUSH
29248: EMPTY
29249: LIST
29250: LIST
29251: LIST
29252: LIST
29253: ST_TO_ADDR
29254: GO 30011
29256: LD_INT 12
29258: DOUBLE
29259: EQUAL
29260: IFTRUE 29264
29262: GO 29290
29264: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
29265: LD_ADDR_VAR 0 3
29269: PUSH
29270: LD_INT 2
29272: PUSH
29273: LD_INT 3
29275: PUSH
29276: LD_INT 4
29278: PUSH
29279: LD_INT 5
29281: PUSH
29282: EMPTY
29283: LIST
29284: LIST
29285: LIST
29286: LIST
29287: ST_TO_ADDR
29288: GO 30011
29290: LD_INT 13
29292: DOUBLE
29293: EQUAL
29294: IFTRUE 29298
29296: GO 29324
29298: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
29299: LD_ADDR_VAR 0 3
29303: PUSH
29304: LD_INT 2
29306: PUSH
29307: LD_INT 3
29309: PUSH
29310: LD_INT 4
29312: PUSH
29313: LD_INT 5
29315: PUSH
29316: EMPTY
29317: LIST
29318: LIST
29319: LIST
29320: LIST
29321: ST_TO_ADDR
29322: GO 30011
29324: LD_INT 14
29326: DOUBLE
29327: EQUAL
29328: IFTRUE 29332
29330: GO 29350
29332: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
29333: LD_ADDR_VAR 0 3
29337: PUSH
29338: LD_INT 4
29340: PUSH
29341: LD_INT 5
29343: PUSH
29344: EMPTY
29345: LIST
29346: LIST
29347: ST_TO_ADDR
29348: GO 30011
29350: LD_INT 6
29352: DOUBLE
29353: EQUAL
29354: IFTRUE 29358
29356: GO 29376
29358: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
29359: LD_ADDR_VAR 0 3
29363: PUSH
29364: LD_INT 4
29366: PUSH
29367: LD_INT 5
29369: PUSH
29370: EMPTY
29371: LIST
29372: LIST
29373: ST_TO_ADDR
29374: GO 30011
29376: LD_INT 10
29378: DOUBLE
29379: EQUAL
29380: IFTRUE 29384
29382: GO 29402
29384: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
29385: LD_ADDR_VAR 0 3
29389: PUSH
29390: LD_INT 4
29392: PUSH
29393: LD_INT 5
29395: PUSH
29396: EMPTY
29397: LIST
29398: LIST
29399: ST_TO_ADDR
29400: GO 30011
29402: LD_INT 22
29404: DOUBLE
29405: EQUAL
29406: IFTRUE 29410
29408: GO 29436
29410: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
29411: LD_ADDR_VAR 0 3
29415: PUSH
29416: LD_INT 11
29418: PUSH
29419: LD_INT 12
29421: PUSH
29422: LD_INT 13
29424: PUSH
29425: LD_INT 14
29427: PUSH
29428: EMPTY
29429: LIST
29430: LIST
29431: LIST
29432: LIST
29433: ST_TO_ADDR
29434: GO 30011
29436: LD_INT 23
29438: DOUBLE
29439: EQUAL
29440: IFTRUE 29444
29442: GO 29470
29444: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
29445: LD_ADDR_VAR 0 3
29449: PUSH
29450: LD_INT 11
29452: PUSH
29453: LD_INT 12
29455: PUSH
29456: LD_INT 13
29458: PUSH
29459: LD_INT 14
29461: PUSH
29462: EMPTY
29463: LIST
29464: LIST
29465: LIST
29466: LIST
29467: ST_TO_ADDR
29468: GO 30011
29470: LD_INT 24
29472: DOUBLE
29473: EQUAL
29474: IFTRUE 29478
29476: GO 29504
29478: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
29479: LD_ADDR_VAR 0 3
29483: PUSH
29484: LD_INT 11
29486: PUSH
29487: LD_INT 12
29489: PUSH
29490: LD_INT 13
29492: PUSH
29493: LD_INT 14
29495: PUSH
29496: EMPTY
29497: LIST
29498: LIST
29499: LIST
29500: LIST
29501: ST_TO_ADDR
29502: GO 30011
29504: LD_INT 30
29506: DOUBLE
29507: EQUAL
29508: IFTRUE 29512
29510: GO 29538
29512: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
29513: LD_ADDR_VAR 0 3
29517: PUSH
29518: LD_INT 11
29520: PUSH
29521: LD_INT 12
29523: PUSH
29524: LD_INT 13
29526: PUSH
29527: LD_INT 14
29529: PUSH
29530: EMPTY
29531: LIST
29532: LIST
29533: LIST
29534: LIST
29535: ST_TO_ADDR
29536: GO 30011
29538: LD_INT 25
29540: DOUBLE
29541: EQUAL
29542: IFTRUE 29546
29544: GO 29564
29546: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
29547: LD_ADDR_VAR 0 3
29551: PUSH
29552: LD_INT 13
29554: PUSH
29555: LD_INT 14
29557: PUSH
29558: EMPTY
29559: LIST
29560: LIST
29561: ST_TO_ADDR
29562: GO 30011
29564: LD_INT 27
29566: DOUBLE
29567: EQUAL
29568: IFTRUE 29572
29570: GO 29590
29572: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
29573: LD_ADDR_VAR 0 3
29577: PUSH
29578: LD_INT 13
29580: PUSH
29581: LD_INT 14
29583: PUSH
29584: EMPTY
29585: LIST
29586: LIST
29587: ST_TO_ADDR
29588: GO 30011
29590: LD_INT 28
29592: DOUBLE
29593: EQUAL
29594: IFTRUE 29598
29596: GO 29616
29598: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
29599: LD_ADDR_VAR 0 3
29603: PUSH
29604: LD_INT 13
29606: PUSH
29607: LD_INT 14
29609: PUSH
29610: EMPTY
29611: LIST
29612: LIST
29613: ST_TO_ADDR
29614: GO 30011
29616: LD_INT 29
29618: DOUBLE
29619: EQUAL
29620: IFTRUE 29624
29622: GO 29642
29624: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
29625: LD_ADDR_VAR 0 3
29629: PUSH
29630: LD_INT 13
29632: PUSH
29633: LD_INT 14
29635: PUSH
29636: EMPTY
29637: LIST
29638: LIST
29639: ST_TO_ADDR
29640: GO 30011
29642: LD_INT 31
29644: DOUBLE
29645: EQUAL
29646: IFTRUE 29650
29648: GO 29668
29650: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
29651: LD_ADDR_VAR 0 3
29655: PUSH
29656: LD_INT 13
29658: PUSH
29659: LD_INT 14
29661: PUSH
29662: EMPTY
29663: LIST
29664: LIST
29665: ST_TO_ADDR
29666: GO 30011
29668: LD_INT 26
29670: DOUBLE
29671: EQUAL
29672: IFTRUE 29676
29674: GO 29694
29676: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
29677: LD_ADDR_VAR 0 3
29681: PUSH
29682: LD_INT 13
29684: PUSH
29685: LD_INT 14
29687: PUSH
29688: EMPTY
29689: LIST
29690: LIST
29691: ST_TO_ADDR
29692: GO 30011
29694: LD_INT 42
29696: DOUBLE
29697: EQUAL
29698: IFTRUE 29702
29700: GO 29728
29702: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
29703: LD_ADDR_VAR 0 3
29707: PUSH
29708: LD_INT 21
29710: PUSH
29711: LD_INT 22
29713: PUSH
29714: LD_INT 23
29716: PUSH
29717: LD_INT 24
29719: PUSH
29720: EMPTY
29721: LIST
29722: LIST
29723: LIST
29724: LIST
29725: ST_TO_ADDR
29726: GO 30011
29728: LD_INT 43
29730: DOUBLE
29731: EQUAL
29732: IFTRUE 29736
29734: GO 29762
29736: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
29737: LD_ADDR_VAR 0 3
29741: PUSH
29742: LD_INT 21
29744: PUSH
29745: LD_INT 22
29747: PUSH
29748: LD_INT 23
29750: PUSH
29751: LD_INT 24
29753: PUSH
29754: EMPTY
29755: LIST
29756: LIST
29757: LIST
29758: LIST
29759: ST_TO_ADDR
29760: GO 30011
29762: LD_INT 44
29764: DOUBLE
29765: EQUAL
29766: IFTRUE 29770
29768: GO 29796
29770: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
29771: LD_ADDR_VAR 0 3
29775: PUSH
29776: LD_INT 21
29778: PUSH
29779: LD_INT 22
29781: PUSH
29782: LD_INT 23
29784: PUSH
29785: LD_INT 24
29787: PUSH
29788: EMPTY
29789: LIST
29790: LIST
29791: LIST
29792: LIST
29793: ST_TO_ADDR
29794: GO 30011
29796: LD_INT 45
29798: DOUBLE
29799: EQUAL
29800: IFTRUE 29804
29802: GO 29830
29804: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
29805: LD_ADDR_VAR 0 3
29809: PUSH
29810: LD_INT 21
29812: PUSH
29813: LD_INT 22
29815: PUSH
29816: LD_INT 23
29818: PUSH
29819: LD_INT 24
29821: PUSH
29822: EMPTY
29823: LIST
29824: LIST
29825: LIST
29826: LIST
29827: ST_TO_ADDR
29828: GO 30011
29830: LD_INT 49
29832: DOUBLE
29833: EQUAL
29834: IFTRUE 29838
29836: GO 29864
29838: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
29839: LD_ADDR_VAR 0 3
29843: PUSH
29844: LD_INT 21
29846: PUSH
29847: LD_INT 22
29849: PUSH
29850: LD_INT 23
29852: PUSH
29853: LD_INT 24
29855: PUSH
29856: EMPTY
29857: LIST
29858: LIST
29859: LIST
29860: LIST
29861: ST_TO_ADDR
29862: GO 30011
29864: LD_INT 51
29866: DOUBLE
29867: EQUAL
29868: IFTRUE 29872
29870: GO 29898
29872: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
29873: LD_ADDR_VAR 0 3
29877: PUSH
29878: LD_INT 21
29880: PUSH
29881: LD_INT 22
29883: PUSH
29884: LD_INT 23
29886: PUSH
29887: LD_INT 24
29889: PUSH
29890: EMPTY
29891: LIST
29892: LIST
29893: LIST
29894: LIST
29895: ST_TO_ADDR
29896: GO 30011
29898: LD_INT 52
29900: DOUBLE
29901: EQUAL
29902: IFTRUE 29906
29904: GO 29932
29906: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
29907: LD_ADDR_VAR 0 3
29911: PUSH
29912: LD_INT 21
29914: PUSH
29915: LD_INT 22
29917: PUSH
29918: LD_INT 23
29920: PUSH
29921: LD_INT 24
29923: PUSH
29924: EMPTY
29925: LIST
29926: LIST
29927: LIST
29928: LIST
29929: ST_TO_ADDR
29930: GO 30011
29932: LD_INT 53
29934: DOUBLE
29935: EQUAL
29936: IFTRUE 29940
29938: GO 29958
29940: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
29941: LD_ADDR_VAR 0 3
29945: PUSH
29946: LD_INT 23
29948: PUSH
29949: LD_INT 24
29951: PUSH
29952: EMPTY
29953: LIST
29954: LIST
29955: ST_TO_ADDR
29956: GO 30011
29958: LD_INT 46
29960: DOUBLE
29961: EQUAL
29962: IFTRUE 29966
29964: GO 29984
29966: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
29967: LD_ADDR_VAR 0 3
29971: PUSH
29972: LD_INT 23
29974: PUSH
29975: LD_INT 24
29977: PUSH
29978: EMPTY
29979: LIST
29980: LIST
29981: ST_TO_ADDR
29982: GO 30011
29984: LD_INT 47
29986: DOUBLE
29987: EQUAL
29988: IFTRUE 29992
29990: GO 30010
29992: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
29993: LD_ADDR_VAR 0 3
29997: PUSH
29998: LD_INT 23
30000: PUSH
30001: LD_INT 24
30003: PUSH
30004: EMPTY
30005: LIST
30006: LIST
30007: ST_TO_ADDR
30008: GO 30011
30010: POP
// result := ( chassis in result ) ;
30011: LD_ADDR_VAR 0 3
30015: PUSH
30016: LD_VAR 0 1
30020: PUSH
30021: LD_VAR 0 3
30025: IN
30026: ST_TO_ADDR
// end ;
30027: LD_VAR 0 3
30031: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
30032: LD_INT 0
30034: PPUSH
30035: PPUSH
30036: PPUSH
30037: PPUSH
30038: PPUSH
30039: PPUSH
30040: PPUSH
// result := array ;
30041: LD_ADDR_VAR 0 5
30045: PUSH
30046: LD_VAR 0 1
30050: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
30051: LD_VAR 0 1
30055: NOT
30056: PUSH
30057: LD_VAR 0 2
30061: NOT
30062: OR
30063: PUSH
30064: LD_VAR 0 3
30068: NOT
30069: OR
30070: PUSH
30071: LD_VAR 0 2
30075: PUSH
30076: LD_VAR 0 1
30080: GREATER
30081: OR
30082: PUSH
30083: LD_VAR 0 3
30087: PUSH
30088: LD_VAR 0 1
30092: GREATER
30093: OR
30094: IFFALSE 30098
// exit ;
30096: GO 30394
// if direction then
30098: LD_VAR 0 4
30102: IFFALSE 30166
// begin d := 1 ;
30104: LD_ADDR_VAR 0 9
30108: PUSH
30109: LD_INT 1
30111: ST_TO_ADDR
// if i_from > i_to then
30112: LD_VAR 0 2
30116: PUSH
30117: LD_VAR 0 3
30121: GREATER
30122: IFFALSE 30148
// length := ( array - i_from ) + i_to else
30124: LD_ADDR_VAR 0 11
30128: PUSH
30129: LD_VAR 0 1
30133: PUSH
30134: LD_VAR 0 2
30138: MINUS
30139: PUSH
30140: LD_VAR 0 3
30144: PLUS
30145: ST_TO_ADDR
30146: GO 30164
// length := i_to - i_from ;
30148: LD_ADDR_VAR 0 11
30152: PUSH
30153: LD_VAR 0 3
30157: PUSH
30158: LD_VAR 0 2
30162: MINUS
30163: ST_TO_ADDR
// end else
30164: GO 30227
// begin d := - 1 ;
30166: LD_ADDR_VAR 0 9
30170: PUSH
30171: LD_INT 1
30173: NEG
30174: ST_TO_ADDR
// if i_from > i_to then
30175: LD_VAR 0 2
30179: PUSH
30180: LD_VAR 0 3
30184: GREATER
30185: IFFALSE 30205
// length := i_from - i_to else
30187: LD_ADDR_VAR 0 11
30191: PUSH
30192: LD_VAR 0 2
30196: PUSH
30197: LD_VAR 0 3
30201: MINUS
30202: ST_TO_ADDR
30203: GO 30227
// length := ( array - i_to ) + i_from ;
30205: LD_ADDR_VAR 0 11
30209: PUSH
30210: LD_VAR 0 1
30214: PUSH
30215: LD_VAR 0 3
30219: MINUS
30220: PUSH
30221: LD_VAR 0 2
30225: PLUS
30226: ST_TO_ADDR
// end ; if not length then
30227: LD_VAR 0 11
30231: NOT
30232: IFFALSE 30236
// exit ;
30234: GO 30394
// tmp := array ;
30236: LD_ADDR_VAR 0 10
30240: PUSH
30241: LD_VAR 0 1
30245: ST_TO_ADDR
// for i = 1 to length do
30246: LD_ADDR_VAR 0 6
30250: PUSH
30251: DOUBLE
30252: LD_INT 1
30254: DEC
30255: ST_TO_ADDR
30256: LD_VAR 0 11
30260: PUSH
30261: FOR_TO
30262: IFFALSE 30382
// begin for j = 1 to array do
30264: LD_ADDR_VAR 0 7
30268: PUSH
30269: DOUBLE
30270: LD_INT 1
30272: DEC
30273: ST_TO_ADDR
30274: LD_VAR 0 1
30278: PUSH
30279: FOR_TO
30280: IFFALSE 30368
// begin k := j + d ;
30282: LD_ADDR_VAR 0 8
30286: PUSH
30287: LD_VAR 0 7
30291: PUSH
30292: LD_VAR 0 9
30296: PLUS
30297: ST_TO_ADDR
// if k > array then
30298: LD_VAR 0 8
30302: PUSH
30303: LD_VAR 0 1
30307: GREATER
30308: IFFALSE 30318
// k := 1 ;
30310: LD_ADDR_VAR 0 8
30314: PUSH
30315: LD_INT 1
30317: ST_TO_ADDR
// if not k then
30318: LD_VAR 0 8
30322: NOT
30323: IFFALSE 30335
// k := array ;
30325: LD_ADDR_VAR 0 8
30329: PUSH
30330: LD_VAR 0 1
30334: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
30335: LD_ADDR_VAR 0 10
30339: PUSH
30340: LD_VAR 0 10
30344: PPUSH
30345: LD_VAR 0 8
30349: PPUSH
30350: LD_VAR 0 1
30354: PUSH
30355: LD_VAR 0 7
30359: ARRAY
30360: PPUSH
30361: CALL_OW 1
30365: ST_TO_ADDR
// end ;
30366: GO 30279
30368: POP
30369: POP
// array := tmp ;
30370: LD_ADDR_VAR 0 1
30374: PUSH
30375: LD_VAR 0 10
30379: ST_TO_ADDR
// end ;
30380: GO 30261
30382: POP
30383: POP
// result := array ;
30384: LD_ADDR_VAR 0 5
30388: PUSH
30389: LD_VAR 0 1
30393: ST_TO_ADDR
// end ;
30394: LD_VAR 0 5
30398: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
30399: LD_INT 0
30401: PPUSH
30402: PPUSH
// result := 0 ;
30403: LD_ADDR_VAR 0 3
30407: PUSH
30408: LD_INT 0
30410: ST_TO_ADDR
// if not array or not value in array then
30411: LD_VAR 0 1
30415: NOT
30416: PUSH
30417: LD_VAR 0 2
30421: PUSH
30422: LD_VAR 0 1
30426: IN
30427: NOT
30428: OR
30429: IFFALSE 30433
// exit ;
30431: GO 30487
// for i = 1 to array do
30433: LD_ADDR_VAR 0 4
30437: PUSH
30438: DOUBLE
30439: LD_INT 1
30441: DEC
30442: ST_TO_ADDR
30443: LD_VAR 0 1
30447: PUSH
30448: FOR_TO
30449: IFFALSE 30485
// if value = array [ i ] then
30451: LD_VAR 0 2
30455: PUSH
30456: LD_VAR 0 1
30460: PUSH
30461: LD_VAR 0 4
30465: ARRAY
30466: EQUAL
30467: IFFALSE 30483
// begin result := i ;
30469: LD_ADDR_VAR 0 3
30473: PUSH
30474: LD_VAR 0 4
30478: ST_TO_ADDR
// exit ;
30479: POP
30480: POP
30481: GO 30487
// end ;
30483: GO 30448
30485: POP
30486: POP
// end ;
30487: LD_VAR 0 3
30491: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
30492: LD_INT 0
30494: PPUSH
// vc_chassis := chassis ;
30495: LD_ADDR_OWVAR 37
30499: PUSH
30500: LD_VAR 0 1
30504: ST_TO_ADDR
// vc_engine := engine ;
30505: LD_ADDR_OWVAR 39
30509: PUSH
30510: LD_VAR 0 2
30514: ST_TO_ADDR
// vc_control := control ;
30515: LD_ADDR_OWVAR 38
30519: PUSH
30520: LD_VAR 0 3
30524: ST_TO_ADDR
// vc_weapon := weapon ;
30525: LD_ADDR_OWVAR 40
30529: PUSH
30530: LD_VAR 0 4
30534: ST_TO_ADDR
// vc_fuel_battery := fuel ;
30535: LD_ADDR_OWVAR 41
30539: PUSH
30540: LD_VAR 0 5
30544: ST_TO_ADDR
// end ;
30545: LD_VAR 0 6
30549: RET
// export function WantPlant ( unit ) ; var task ; begin
30550: LD_INT 0
30552: PPUSH
30553: PPUSH
// result := false ;
30554: LD_ADDR_VAR 0 2
30558: PUSH
30559: LD_INT 0
30561: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
30562: LD_ADDR_VAR 0 3
30566: PUSH
30567: LD_VAR 0 1
30571: PPUSH
30572: CALL_OW 437
30576: ST_TO_ADDR
// if task then
30577: LD_VAR 0 3
30581: IFFALSE 30609
// if task [ 1 ] [ 1 ] = p then
30583: LD_VAR 0 3
30587: PUSH
30588: LD_INT 1
30590: ARRAY
30591: PUSH
30592: LD_INT 1
30594: ARRAY
30595: PUSH
30596: LD_STRING p
30598: EQUAL
30599: IFFALSE 30609
// result := true ;
30601: LD_ADDR_VAR 0 2
30605: PUSH
30606: LD_INT 1
30608: ST_TO_ADDR
// end ;
30609: LD_VAR 0 2
30613: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
30614: LD_INT 0
30616: PPUSH
30617: PPUSH
30618: PPUSH
30619: PPUSH
// if pos < 1 then
30620: LD_VAR 0 2
30624: PUSH
30625: LD_INT 1
30627: LESS
30628: IFFALSE 30632
// exit ;
30630: GO 30935
// if pos = 1 then
30632: LD_VAR 0 2
30636: PUSH
30637: LD_INT 1
30639: EQUAL
30640: IFFALSE 30673
// result := Replace ( arr , pos [ 1 ] , value ) else
30642: LD_ADDR_VAR 0 4
30646: PUSH
30647: LD_VAR 0 1
30651: PPUSH
30652: LD_VAR 0 2
30656: PUSH
30657: LD_INT 1
30659: ARRAY
30660: PPUSH
30661: LD_VAR 0 3
30665: PPUSH
30666: CALL_OW 1
30670: ST_TO_ADDR
30671: GO 30935
// begin tmp := arr ;
30673: LD_ADDR_VAR 0 6
30677: PUSH
30678: LD_VAR 0 1
30682: ST_TO_ADDR
// s_arr := [ tmp ] ;
30683: LD_ADDR_VAR 0 7
30687: PUSH
30688: LD_VAR 0 6
30692: PUSH
30693: EMPTY
30694: LIST
30695: ST_TO_ADDR
// for i = 1 to pos - 1 do
30696: LD_ADDR_VAR 0 5
30700: PUSH
30701: DOUBLE
30702: LD_INT 1
30704: DEC
30705: ST_TO_ADDR
30706: LD_VAR 0 2
30710: PUSH
30711: LD_INT 1
30713: MINUS
30714: PUSH
30715: FOR_TO
30716: IFFALSE 30761
// begin tmp := tmp [ pos [ i ] ] ;
30718: LD_ADDR_VAR 0 6
30722: PUSH
30723: LD_VAR 0 6
30727: PUSH
30728: LD_VAR 0 2
30732: PUSH
30733: LD_VAR 0 5
30737: ARRAY
30738: ARRAY
30739: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
30740: LD_ADDR_VAR 0 7
30744: PUSH
30745: LD_VAR 0 7
30749: PUSH
30750: LD_VAR 0 6
30754: PUSH
30755: EMPTY
30756: LIST
30757: ADD
30758: ST_TO_ADDR
// end ;
30759: GO 30715
30761: POP
30762: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
30763: LD_ADDR_VAR 0 6
30767: PUSH
30768: LD_VAR 0 6
30772: PPUSH
30773: LD_VAR 0 2
30777: PUSH
30778: LD_VAR 0 2
30782: ARRAY
30783: PPUSH
30784: LD_VAR 0 3
30788: PPUSH
30789: CALL_OW 1
30793: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
30794: LD_ADDR_VAR 0 7
30798: PUSH
30799: LD_VAR 0 7
30803: PPUSH
30804: LD_VAR 0 7
30808: PPUSH
30809: LD_VAR 0 6
30813: PPUSH
30814: CALL_OW 1
30818: ST_TO_ADDR
// for i = s_arr downto 2 do
30819: LD_ADDR_VAR 0 5
30823: PUSH
30824: DOUBLE
30825: LD_VAR 0 7
30829: INC
30830: ST_TO_ADDR
30831: LD_INT 2
30833: PUSH
30834: FOR_DOWNTO
30835: IFFALSE 30919
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
30837: LD_ADDR_VAR 0 6
30841: PUSH
30842: LD_VAR 0 7
30846: PUSH
30847: LD_VAR 0 5
30851: PUSH
30852: LD_INT 1
30854: MINUS
30855: ARRAY
30856: PPUSH
30857: LD_VAR 0 2
30861: PUSH
30862: LD_VAR 0 5
30866: PUSH
30867: LD_INT 1
30869: MINUS
30870: ARRAY
30871: PPUSH
30872: LD_VAR 0 7
30876: PUSH
30877: LD_VAR 0 5
30881: ARRAY
30882: PPUSH
30883: CALL_OW 1
30887: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
30888: LD_ADDR_VAR 0 7
30892: PUSH
30893: LD_VAR 0 7
30897: PPUSH
30898: LD_VAR 0 5
30902: PUSH
30903: LD_INT 1
30905: MINUS
30906: PPUSH
30907: LD_VAR 0 6
30911: PPUSH
30912: CALL_OW 1
30916: ST_TO_ADDR
// end ;
30917: GO 30834
30919: POP
30920: POP
// result := s_arr [ 1 ] ;
30921: LD_ADDR_VAR 0 4
30925: PUSH
30926: LD_VAR 0 7
30930: PUSH
30931: LD_INT 1
30933: ARRAY
30934: ST_TO_ADDR
// end ; end ;
30935: LD_VAR 0 4
30939: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
30940: LD_INT 0
30942: PPUSH
30943: PPUSH
// if not list then
30944: LD_VAR 0 1
30948: NOT
30949: IFFALSE 30953
// exit ;
30951: GO 31044
// i := list [ pos1 ] ;
30953: LD_ADDR_VAR 0 5
30957: PUSH
30958: LD_VAR 0 1
30962: PUSH
30963: LD_VAR 0 2
30967: ARRAY
30968: ST_TO_ADDR
// if not i then
30969: LD_VAR 0 5
30973: NOT
30974: IFFALSE 30978
// exit ;
30976: GO 31044
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
30978: LD_ADDR_VAR 0 1
30982: PUSH
30983: LD_VAR 0 1
30987: PPUSH
30988: LD_VAR 0 2
30992: PPUSH
30993: LD_VAR 0 1
30997: PUSH
30998: LD_VAR 0 3
31002: ARRAY
31003: PPUSH
31004: CALL_OW 1
31008: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
31009: LD_ADDR_VAR 0 1
31013: PUSH
31014: LD_VAR 0 1
31018: PPUSH
31019: LD_VAR 0 3
31023: PPUSH
31024: LD_VAR 0 5
31028: PPUSH
31029: CALL_OW 1
31033: ST_TO_ADDR
// result := list ;
31034: LD_ADDR_VAR 0 4
31038: PUSH
31039: LD_VAR 0 1
31043: ST_TO_ADDR
// end ;
31044: LD_VAR 0 4
31048: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
31049: LD_INT 0
31051: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
31052: LD_ADDR_VAR 0 5
31056: PUSH
31057: LD_VAR 0 1
31061: PPUSH
31062: CALL_OW 250
31066: PPUSH
31067: LD_VAR 0 1
31071: PPUSH
31072: CALL_OW 251
31076: PPUSH
31077: LD_VAR 0 2
31081: PPUSH
31082: LD_VAR 0 3
31086: PPUSH
31087: LD_VAR 0 4
31091: PPUSH
31092: CALL 31102 0 5
31096: ST_TO_ADDR
// end ;
31097: LD_VAR 0 5
31101: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
31102: LD_INT 0
31104: PPUSH
31105: PPUSH
31106: PPUSH
31107: PPUSH
// if not list then
31108: LD_VAR 0 3
31112: NOT
31113: IFFALSE 31117
// exit ;
31115: GO 31505
// result := [ ] ;
31117: LD_ADDR_VAR 0 6
31121: PUSH
31122: EMPTY
31123: ST_TO_ADDR
// for i in list do
31124: LD_ADDR_VAR 0 7
31128: PUSH
31129: LD_VAR 0 3
31133: PUSH
31134: FOR_IN
31135: IFFALSE 31337
// begin tmp := GetDistUnitXY ( i , x , y ) ;
31137: LD_ADDR_VAR 0 9
31141: PUSH
31142: LD_VAR 0 7
31146: PPUSH
31147: LD_VAR 0 1
31151: PPUSH
31152: LD_VAR 0 2
31156: PPUSH
31157: CALL_OW 297
31161: ST_TO_ADDR
// if not result then
31162: LD_VAR 0 6
31166: NOT
31167: IFFALSE 31193
// result := [ [ i , tmp ] ] else
31169: LD_ADDR_VAR 0 6
31173: PUSH
31174: LD_VAR 0 7
31178: PUSH
31179: LD_VAR 0 9
31183: PUSH
31184: EMPTY
31185: LIST
31186: LIST
31187: PUSH
31188: EMPTY
31189: LIST
31190: ST_TO_ADDR
31191: GO 31335
// begin if result [ result ] [ 2 ] < tmp then
31193: LD_VAR 0 6
31197: PUSH
31198: LD_VAR 0 6
31202: ARRAY
31203: PUSH
31204: LD_INT 2
31206: ARRAY
31207: PUSH
31208: LD_VAR 0 9
31212: LESS
31213: IFFALSE 31255
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
31215: LD_ADDR_VAR 0 6
31219: PUSH
31220: LD_VAR 0 6
31224: PPUSH
31225: LD_VAR 0 6
31229: PUSH
31230: LD_INT 1
31232: PLUS
31233: PPUSH
31234: LD_VAR 0 7
31238: PUSH
31239: LD_VAR 0 9
31243: PUSH
31244: EMPTY
31245: LIST
31246: LIST
31247: PPUSH
31248: CALL_OW 2
31252: ST_TO_ADDR
31253: GO 31335
// for j = 1 to result do
31255: LD_ADDR_VAR 0 8
31259: PUSH
31260: DOUBLE
31261: LD_INT 1
31263: DEC
31264: ST_TO_ADDR
31265: LD_VAR 0 6
31269: PUSH
31270: FOR_TO
31271: IFFALSE 31333
// begin if tmp < result [ j ] [ 2 ] then
31273: LD_VAR 0 9
31277: PUSH
31278: LD_VAR 0 6
31282: PUSH
31283: LD_VAR 0 8
31287: ARRAY
31288: PUSH
31289: LD_INT 2
31291: ARRAY
31292: LESS
31293: IFFALSE 31331
// begin result := Insert ( result , j , [ i , tmp ] ) ;
31295: LD_ADDR_VAR 0 6
31299: PUSH
31300: LD_VAR 0 6
31304: PPUSH
31305: LD_VAR 0 8
31309: PPUSH
31310: LD_VAR 0 7
31314: PUSH
31315: LD_VAR 0 9
31319: PUSH
31320: EMPTY
31321: LIST
31322: LIST
31323: PPUSH
31324: CALL_OW 2
31328: ST_TO_ADDR
// break ;
31329: GO 31333
// end ; end ;
31331: GO 31270
31333: POP
31334: POP
// end ; end ;
31335: GO 31134
31337: POP
31338: POP
// if result and not asc then
31339: LD_VAR 0 6
31343: PUSH
31344: LD_VAR 0 4
31348: NOT
31349: AND
31350: IFFALSE 31425
// begin tmp := result ;
31352: LD_ADDR_VAR 0 9
31356: PUSH
31357: LD_VAR 0 6
31361: ST_TO_ADDR
// for i = tmp downto 1 do
31362: LD_ADDR_VAR 0 7
31366: PUSH
31367: DOUBLE
31368: LD_VAR 0 9
31372: INC
31373: ST_TO_ADDR
31374: LD_INT 1
31376: PUSH
31377: FOR_DOWNTO
31378: IFFALSE 31423
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
31380: LD_ADDR_VAR 0 6
31384: PUSH
31385: LD_VAR 0 6
31389: PPUSH
31390: LD_VAR 0 9
31394: PUSH
31395: LD_VAR 0 7
31399: MINUS
31400: PUSH
31401: LD_INT 1
31403: PLUS
31404: PPUSH
31405: LD_VAR 0 9
31409: PUSH
31410: LD_VAR 0 7
31414: ARRAY
31415: PPUSH
31416: CALL_OW 1
31420: ST_TO_ADDR
31421: GO 31377
31423: POP
31424: POP
// end ; tmp := [ ] ;
31425: LD_ADDR_VAR 0 9
31429: PUSH
31430: EMPTY
31431: ST_TO_ADDR
// if mode then
31432: LD_VAR 0 5
31436: IFFALSE 31505
// begin for i = 1 to result do
31438: LD_ADDR_VAR 0 7
31442: PUSH
31443: DOUBLE
31444: LD_INT 1
31446: DEC
31447: ST_TO_ADDR
31448: LD_VAR 0 6
31452: PUSH
31453: FOR_TO
31454: IFFALSE 31493
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
31456: LD_ADDR_VAR 0 9
31460: PUSH
31461: LD_VAR 0 9
31465: PPUSH
31466: LD_VAR 0 7
31470: PPUSH
31471: LD_VAR 0 6
31475: PUSH
31476: LD_VAR 0 7
31480: ARRAY
31481: PUSH
31482: LD_INT 1
31484: ARRAY
31485: PPUSH
31486: CALL_OW 1
31490: ST_TO_ADDR
31491: GO 31453
31493: POP
31494: POP
// result := tmp ;
31495: LD_ADDR_VAR 0 6
31499: PUSH
31500: LD_VAR 0 9
31504: ST_TO_ADDR
// end ; end ;
31505: LD_VAR 0 6
31509: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
31510: LD_INT 0
31512: PPUSH
31513: PPUSH
31514: PPUSH
31515: PPUSH
31516: PPUSH
31517: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
31518: LD_ADDR_VAR 0 5
31522: PUSH
31523: LD_INT 0
31525: PUSH
31526: LD_INT 0
31528: PUSH
31529: LD_INT 0
31531: PUSH
31532: EMPTY
31533: PUSH
31534: EMPTY
31535: LIST
31536: LIST
31537: LIST
31538: LIST
31539: ST_TO_ADDR
// if not x or not y then
31540: LD_VAR 0 2
31544: NOT
31545: PUSH
31546: LD_VAR 0 3
31550: NOT
31551: OR
31552: IFFALSE 31556
// exit ;
31554: GO 33202
// if not range then
31556: LD_VAR 0 4
31560: NOT
31561: IFFALSE 31571
// range := 10 ;
31563: LD_ADDR_VAR 0 4
31567: PUSH
31568: LD_INT 10
31570: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31571: LD_ADDR_VAR 0 8
31575: PUSH
31576: LD_INT 81
31578: PUSH
31579: LD_VAR 0 1
31583: PUSH
31584: EMPTY
31585: LIST
31586: LIST
31587: PUSH
31588: LD_INT 92
31590: PUSH
31591: LD_VAR 0 2
31595: PUSH
31596: LD_VAR 0 3
31600: PUSH
31601: LD_VAR 0 4
31605: PUSH
31606: EMPTY
31607: LIST
31608: LIST
31609: LIST
31610: LIST
31611: PUSH
31612: LD_INT 3
31614: PUSH
31615: LD_INT 21
31617: PUSH
31618: LD_INT 3
31620: PUSH
31621: EMPTY
31622: LIST
31623: LIST
31624: PUSH
31625: EMPTY
31626: LIST
31627: LIST
31628: PUSH
31629: EMPTY
31630: LIST
31631: LIST
31632: LIST
31633: PPUSH
31634: CALL_OW 69
31638: ST_TO_ADDR
// if not tmp then
31639: LD_VAR 0 8
31643: NOT
31644: IFFALSE 31648
// exit ;
31646: GO 33202
// for i in tmp do
31648: LD_ADDR_VAR 0 6
31652: PUSH
31653: LD_VAR 0 8
31657: PUSH
31658: FOR_IN
31659: IFFALSE 33177
// begin points := [ 0 , 0 , 0 ] ;
31661: LD_ADDR_VAR 0 9
31665: PUSH
31666: LD_INT 0
31668: PUSH
31669: LD_INT 0
31671: PUSH
31672: LD_INT 0
31674: PUSH
31675: EMPTY
31676: LIST
31677: LIST
31678: LIST
31679: ST_TO_ADDR
// bpoints := 1 ;
31680: LD_ADDR_VAR 0 10
31684: PUSH
31685: LD_INT 1
31687: ST_TO_ADDR
// case GetType ( i ) of unit_human :
31688: LD_VAR 0 6
31692: PPUSH
31693: CALL_OW 247
31697: PUSH
31698: LD_INT 1
31700: DOUBLE
31701: EQUAL
31702: IFTRUE 31706
31704: GO 32284
31706: POP
// begin if GetClass ( i ) = 1 then
31707: LD_VAR 0 6
31711: PPUSH
31712: CALL_OW 257
31716: PUSH
31717: LD_INT 1
31719: EQUAL
31720: IFFALSE 31741
// points := [ 10 , 5 , 3 ] ;
31722: LD_ADDR_VAR 0 9
31726: PUSH
31727: LD_INT 10
31729: PUSH
31730: LD_INT 5
31732: PUSH
31733: LD_INT 3
31735: PUSH
31736: EMPTY
31737: LIST
31738: LIST
31739: LIST
31740: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
31741: LD_VAR 0 6
31745: PPUSH
31746: CALL_OW 257
31750: PUSH
31751: LD_INT 2
31753: PUSH
31754: LD_INT 3
31756: PUSH
31757: LD_INT 4
31759: PUSH
31760: EMPTY
31761: LIST
31762: LIST
31763: LIST
31764: IN
31765: IFFALSE 31786
// points := [ 3 , 2 , 1 ] ;
31767: LD_ADDR_VAR 0 9
31771: PUSH
31772: LD_INT 3
31774: PUSH
31775: LD_INT 2
31777: PUSH
31778: LD_INT 1
31780: PUSH
31781: EMPTY
31782: LIST
31783: LIST
31784: LIST
31785: ST_TO_ADDR
// if GetClass ( i ) = 5 then
31786: LD_VAR 0 6
31790: PPUSH
31791: CALL_OW 257
31795: PUSH
31796: LD_INT 5
31798: EQUAL
31799: IFFALSE 31820
// points := [ 130 , 5 , 2 ] ;
31801: LD_ADDR_VAR 0 9
31805: PUSH
31806: LD_INT 130
31808: PUSH
31809: LD_INT 5
31811: PUSH
31812: LD_INT 2
31814: PUSH
31815: EMPTY
31816: LIST
31817: LIST
31818: LIST
31819: ST_TO_ADDR
// if GetClass ( i ) = 8 then
31820: LD_VAR 0 6
31824: PPUSH
31825: CALL_OW 257
31829: PUSH
31830: LD_INT 8
31832: EQUAL
31833: IFFALSE 31854
// points := [ 35 , 35 , 30 ] ;
31835: LD_ADDR_VAR 0 9
31839: PUSH
31840: LD_INT 35
31842: PUSH
31843: LD_INT 35
31845: PUSH
31846: LD_INT 30
31848: PUSH
31849: EMPTY
31850: LIST
31851: LIST
31852: LIST
31853: ST_TO_ADDR
// if GetClass ( i ) = 9 then
31854: LD_VAR 0 6
31858: PPUSH
31859: CALL_OW 257
31863: PUSH
31864: LD_INT 9
31866: EQUAL
31867: IFFALSE 31888
// points := [ 20 , 55 , 40 ] ;
31869: LD_ADDR_VAR 0 9
31873: PUSH
31874: LD_INT 20
31876: PUSH
31877: LD_INT 55
31879: PUSH
31880: LD_INT 40
31882: PUSH
31883: EMPTY
31884: LIST
31885: LIST
31886: LIST
31887: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
31888: LD_VAR 0 6
31892: PPUSH
31893: CALL_OW 257
31897: PUSH
31898: LD_INT 12
31900: PUSH
31901: LD_INT 16
31903: PUSH
31904: EMPTY
31905: LIST
31906: LIST
31907: IN
31908: IFFALSE 31929
// points := [ 5 , 3 , 2 ] ;
31910: LD_ADDR_VAR 0 9
31914: PUSH
31915: LD_INT 5
31917: PUSH
31918: LD_INT 3
31920: PUSH
31921: LD_INT 2
31923: PUSH
31924: EMPTY
31925: LIST
31926: LIST
31927: LIST
31928: ST_TO_ADDR
// if GetClass ( i ) = 17 then
31929: LD_VAR 0 6
31933: PPUSH
31934: CALL_OW 257
31938: PUSH
31939: LD_INT 17
31941: EQUAL
31942: IFFALSE 31963
// points := [ 100 , 50 , 75 ] ;
31944: LD_ADDR_VAR 0 9
31948: PUSH
31949: LD_INT 100
31951: PUSH
31952: LD_INT 50
31954: PUSH
31955: LD_INT 75
31957: PUSH
31958: EMPTY
31959: LIST
31960: LIST
31961: LIST
31962: ST_TO_ADDR
// if GetClass ( i ) = 15 then
31963: LD_VAR 0 6
31967: PPUSH
31968: CALL_OW 257
31972: PUSH
31973: LD_INT 15
31975: EQUAL
31976: IFFALSE 31997
// points := [ 10 , 5 , 3 ] ;
31978: LD_ADDR_VAR 0 9
31982: PUSH
31983: LD_INT 10
31985: PUSH
31986: LD_INT 5
31988: PUSH
31989: LD_INT 3
31991: PUSH
31992: EMPTY
31993: LIST
31994: LIST
31995: LIST
31996: ST_TO_ADDR
// if GetClass ( i ) = 14 then
31997: LD_VAR 0 6
32001: PPUSH
32002: CALL_OW 257
32006: PUSH
32007: LD_INT 14
32009: EQUAL
32010: IFFALSE 32031
// points := [ 10 , 0 , 0 ] ;
32012: LD_ADDR_VAR 0 9
32016: PUSH
32017: LD_INT 10
32019: PUSH
32020: LD_INT 0
32022: PUSH
32023: LD_INT 0
32025: PUSH
32026: EMPTY
32027: LIST
32028: LIST
32029: LIST
32030: ST_TO_ADDR
// if GetClass ( i ) = 11 then
32031: LD_VAR 0 6
32035: PPUSH
32036: CALL_OW 257
32040: PUSH
32041: LD_INT 11
32043: EQUAL
32044: IFFALSE 32065
// points := [ 30 , 10 , 5 ] ;
32046: LD_ADDR_VAR 0 9
32050: PUSH
32051: LD_INT 30
32053: PUSH
32054: LD_INT 10
32056: PUSH
32057: LD_INT 5
32059: PUSH
32060: EMPTY
32061: LIST
32062: LIST
32063: LIST
32064: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
32065: LD_VAR 0 1
32069: PPUSH
32070: LD_INT 5
32072: PPUSH
32073: CALL_OW 321
32077: PUSH
32078: LD_INT 2
32080: EQUAL
32081: IFFALSE 32098
// bpoints := bpoints * 1.8 ;
32083: LD_ADDR_VAR 0 10
32087: PUSH
32088: LD_VAR 0 10
32092: PUSH
32093: LD_REAL  1.80000000000000E+0000
32096: MUL
32097: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
32098: LD_VAR 0 6
32102: PPUSH
32103: CALL_OW 257
32107: PUSH
32108: LD_INT 1
32110: PUSH
32111: LD_INT 2
32113: PUSH
32114: LD_INT 3
32116: PUSH
32117: LD_INT 4
32119: PUSH
32120: EMPTY
32121: LIST
32122: LIST
32123: LIST
32124: LIST
32125: IN
32126: PUSH
32127: LD_VAR 0 1
32131: PPUSH
32132: LD_INT 51
32134: PPUSH
32135: CALL_OW 321
32139: PUSH
32140: LD_INT 2
32142: EQUAL
32143: AND
32144: IFFALSE 32161
// bpoints := bpoints * 1.2 ;
32146: LD_ADDR_VAR 0 10
32150: PUSH
32151: LD_VAR 0 10
32155: PUSH
32156: LD_REAL  1.20000000000000E+0000
32159: MUL
32160: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
32161: LD_VAR 0 6
32165: PPUSH
32166: CALL_OW 257
32170: PUSH
32171: LD_INT 5
32173: PUSH
32174: LD_INT 7
32176: PUSH
32177: LD_INT 9
32179: PUSH
32180: EMPTY
32181: LIST
32182: LIST
32183: LIST
32184: IN
32185: PUSH
32186: LD_VAR 0 1
32190: PPUSH
32191: LD_INT 52
32193: PPUSH
32194: CALL_OW 321
32198: PUSH
32199: LD_INT 2
32201: EQUAL
32202: AND
32203: IFFALSE 32220
// bpoints := bpoints * 1.5 ;
32205: LD_ADDR_VAR 0 10
32209: PUSH
32210: LD_VAR 0 10
32214: PUSH
32215: LD_REAL  1.50000000000000E+0000
32218: MUL
32219: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
32220: LD_VAR 0 1
32224: PPUSH
32225: LD_INT 66
32227: PPUSH
32228: CALL_OW 321
32232: PUSH
32233: LD_INT 2
32235: EQUAL
32236: IFFALSE 32253
// bpoints := bpoints * 1.1 ;
32238: LD_ADDR_VAR 0 10
32242: PUSH
32243: LD_VAR 0 10
32247: PUSH
32248: LD_REAL  1.10000000000000E+0000
32251: MUL
32252: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
32253: LD_ADDR_VAR 0 10
32257: PUSH
32258: LD_VAR 0 10
32262: PUSH
32263: LD_VAR 0 6
32267: PPUSH
32268: LD_INT 1
32270: PPUSH
32271: CALL_OW 259
32275: PUSH
32276: LD_REAL  1.15000000000000E+0000
32279: MUL
32280: MUL
32281: ST_TO_ADDR
// end ; unit_vehicle :
32282: GO 33106
32284: LD_INT 2
32286: DOUBLE
32287: EQUAL
32288: IFTRUE 32292
32290: GO 33094
32292: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
32293: LD_VAR 0 6
32297: PPUSH
32298: CALL_OW 264
32302: PUSH
32303: LD_INT 2
32305: PUSH
32306: LD_INT 42
32308: PUSH
32309: LD_INT 24
32311: PUSH
32312: EMPTY
32313: LIST
32314: LIST
32315: LIST
32316: IN
32317: IFFALSE 32338
// points := [ 25 , 5 , 3 ] ;
32319: LD_ADDR_VAR 0 9
32323: PUSH
32324: LD_INT 25
32326: PUSH
32327: LD_INT 5
32329: PUSH
32330: LD_INT 3
32332: PUSH
32333: EMPTY
32334: LIST
32335: LIST
32336: LIST
32337: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
32338: LD_VAR 0 6
32342: PPUSH
32343: CALL_OW 264
32347: PUSH
32348: LD_INT 4
32350: PUSH
32351: LD_INT 43
32353: PUSH
32354: LD_INT 25
32356: PUSH
32357: EMPTY
32358: LIST
32359: LIST
32360: LIST
32361: IN
32362: IFFALSE 32383
// points := [ 40 , 15 , 5 ] ;
32364: LD_ADDR_VAR 0 9
32368: PUSH
32369: LD_INT 40
32371: PUSH
32372: LD_INT 15
32374: PUSH
32375: LD_INT 5
32377: PUSH
32378: EMPTY
32379: LIST
32380: LIST
32381: LIST
32382: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
32383: LD_VAR 0 6
32387: PPUSH
32388: CALL_OW 264
32392: PUSH
32393: LD_INT 3
32395: PUSH
32396: LD_INT 23
32398: PUSH
32399: EMPTY
32400: LIST
32401: LIST
32402: IN
32403: IFFALSE 32424
// points := [ 7 , 25 , 8 ] ;
32405: LD_ADDR_VAR 0 9
32409: PUSH
32410: LD_INT 7
32412: PUSH
32413: LD_INT 25
32415: PUSH
32416: LD_INT 8
32418: PUSH
32419: EMPTY
32420: LIST
32421: LIST
32422: LIST
32423: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
32424: LD_VAR 0 6
32428: PPUSH
32429: CALL_OW 264
32433: PUSH
32434: LD_INT 5
32436: PUSH
32437: LD_INT 27
32439: PUSH
32440: LD_INT 44
32442: PUSH
32443: EMPTY
32444: LIST
32445: LIST
32446: LIST
32447: IN
32448: IFFALSE 32469
// points := [ 14 , 50 , 16 ] ;
32450: LD_ADDR_VAR 0 9
32454: PUSH
32455: LD_INT 14
32457: PUSH
32458: LD_INT 50
32460: PUSH
32461: LD_INT 16
32463: PUSH
32464: EMPTY
32465: LIST
32466: LIST
32467: LIST
32468: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
32469: LD_VAR 0 6
32473: PPUSH
32474: CALL_OW 264
32478: PUSH
32479: LD_INT 6
32481: PUSH
32482: LD_INT 46
32484: PUSH
32485: EMPTY
32486: LIST
32487: LIST
32488: IN
32489: IFFALSE 32510
// points := [ 32 , 120 , 70 ] ;
32491: LD_ADDR_VAR 0 9
32495: PUSH
32496: LD_INT 32
32498: PUSH
32499: LD_INT 120
32501: PUSH
32502: LD_INT 70
32504: PUSH
32505: EMPTY
32506: LIST
32507: LIST
32508: LIST
32509: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
32510: LD_VAR 0 6
32514: PPUSH
32515: CALL_OW 264
32519: PUSH
32520: LD_INT 7
32522: PUSH
32523: LD_INT 28
32525: PUSH
32526: LD_INT 45
32528: PUSH
32529: EMPTY
32530: LIST
32531: LIST
32532: LIST
32533: IN
32534: IFFALSE 32555
// points := [ 35 , 20 , 45 ] ;
32536: LD_ADDR_VAR 0 9
32540: PUSH
32541: LD_INT 35
32543: PUSH
32544: LD_INT 20
32546: PUSH
32547: LD_INT 45
32549: PUSH
32550: EMPTY
32551: LIST
32552: LIST
32553: LIST
32554: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
32555: LD_VAR 0 6
32559: PPUSH
32560: CALL_OW 264
32564: PUSH
32565: LD_INT 47
32567: PUSH
32568: EMPTY
32569: LIST
32570: IN
32571: IFFALSE 32592
// points := [ 67 , 45 , 75 ] ;
32573: LD_ADDR_VAR 0 9
32577: PUSH
32578: LD_INT 67
32580: PUSH
32581: LD_INT 45
32583: PUSH
32584: LD_INT 75
32586: PUSH
32587: EMPTY
32588: LIST
32589: LIST
32590: LIST
32591: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
32592: LD_VAR 0 6
32596: PPUSH
32597: CALL_OW 264
32601: PUSH
32602: LD_INT 26
32604: PUSH
32605: EMPTY
32606: LIST
32607: IN
32608: IFFALSE 32629
// points := [ 120 , 30 , 80 ] ;
32610: LD_ADDR_VAR 0 9
32614: PUSH
32615: LD_INT 120
32617: PUSH
32618: LD_INT 30
32620: PUSH
32621: LD_INT 80
32623: PUSH
32624: EMPTY
32625: LIST
32626: LIST
32627: LIST
32628: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
32629: LD_VAR 0 6
32633: PPUSH
32634: CALL_OW 264
32638: PUSH
32639: LD_INT 22
32641: PUSH
32642: EMPTY
32643: LIST
32644: IN
32645: IFFALSE 32666
// points := [ 40 , 1 , 1 ] ;
32647: LD_ADDR_VAR 0 9
32651: PUSH
32652: LD_INT 40
32654: PUSH
32655: LD_INT 1
32657: PUSH
32658: LD_INT 1
32660: PUSH
32661: EMPTY
32662: LIST
32663: LIST
32664: LIST
32665: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
32666: LD_VAR 0 6
32670: PPUSH
32671: CALL_OW 264
32675: PUSH
32676: LD_INT 29
32678: PUSH
32679: EMPTY
32680: LIST
32681: IN
32682: IFFALSE 32703
// points := [ 70 , 200 , 400 ] ;
32684: LD_ADDR_VAR 0 9
32688: PUSH
32689: LD_INT 70
32691: PUSH
32692: LD_INT 200
32694: PUSH
32695: LD_INT 400
32697: PUSH
32698: EMPTY
32699: LIST
32700: LIST
32701: LIST
32702: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
32703: LD_VAR 0 6
32707: PPUSH
32708: CALL_OW 264
32712: PUSH
32713: LD_INT 14
32715: PUSH
32716: LD_INT 53
32718: PUSH
32719: EMPTY
32720: LIST
32721: LIST
32722: IN
32723: IFFALSE 32744
// points := [ 40 , 10 , 20 ] ;
32725: LD_ADDR_VAR 0 9
32729: PUSH
32730: LD_INT 40
32732: PUSH
32733: LD_INT 10
32735: PUSH
32736: LD_INT 20
32738: PUSH
32739: EMPTY
32740: LIST
32741: LIST
32742: LIST
32743: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
32744: LD_VAR 0 6
32748: PPUSH
32749: CALL_OW 264
32753: PUSH
32754: LD_INT 9
32756: PUSH
32757: EMPTY
32758: LIST
32759: IN
32760: IFFALSE 32781
// points := [ 5 , 70 , 20 ] ;
32762: LD_ADDR_VAR 0 9
32766: PUSH
32767: LD_INT 5
32769: PUSH
32770: LD_INT 70
32772: PUSH
32773: LD_INT 20
32775: PUSH
32776: EMPTY
32777: LIST
32778: LIST
32779: LIST
32780: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
32781: LD_VAR 0 6
32785: PPUSH
32786: CALL_OW 264
32790: PUSH
32791: LD_INT 10
32793: PUSH
32794: EMPTY
32795: LIST
32796: IN
32797: IFFALSE 32818
// points := [ 35 , 110 , 70 ] ;
32799: LD_ADDR_VAR 0 9
32803: PUSH
32804: LD_INT 35
32806: PUSH
32807: LD_INT 110
32809: PUSH
32810: LD_INT 70
32812: PUSH
32813: EMPTY
32814: LIST
32815: LIST
32816: LIST
32817: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
32818: LD_VAR 0 6
32822: PPUSH
32823: CALL_OW 265
32827: PUSH
32828: LD_INT 25
32830: EQUAL
32831: IFFALSE 32852
// points := [ 80 , 65 , 100 ] ;
32833: LD_ADDR_VAR 0 9
32837: PUSH
32838: LD_INT 80
32840: PUSH
32841: LD_INT 65
32843: PUSH
32844: LD_INT 100
32846: PUSH
32847: EMPTY
32848: LIST
32849: LIST
32850: LIST
32851: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
32852: LD_VAR 0 6
32856: PPUSH
32857: CALL_OW 263
32861: PUSH
32862: LD_INT 1
32864: EQUAL
32865: IFFALSE 32900
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
32867: LD_ADDR_VAR 0 10
32871: PUSH
32872: LD_VAR 0 10
32876: PUSH
32877: LD_VAR 0 6
32881: PPUSH
32882: CALL_OW 311
32886: PPUSH
32887: LD_INT 3
32889: PPUSH
32890: CALL_OW 259
32894: PUSH
32895: LD_INT 4
32897: MUL
32898: MUL
32899: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
32900: LD_VAR 0 6
32904: PPUSH
32905: CALL_OW 263
32909: PUSH
32910: LD_INT 2
32912: EQUAL
32913: IFFALSE 32964
// begin j := IsControledBy ( i ) ;
32915: LD_ADDR_VAR 0 7
32919: PUSH
32920: LD_VAR 0 6
32924: PPUSH
32925: CALL_OW 312
32929: ST_TO_ADDR
// if j then
32930: LD_VAR 0 7
32934: IFFALSE 32964
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
32936: LD_ADDR_VAR 0 10
32940: PUSH
32941: LD_VAR 0 10
32945: PUSH
32946: LD_VAR 0 7
32950: PPUSH
32951: LD_INT 3
32953: PPUSH
32954: CALL_OW 259
32958: PUSH
32959: LD_INT 3
32961: MUL
32962: MUL
32963: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
32964: LD_VAR 0 6
32968: PPUSH
32969: CALL_OW 264
32973: PUSH
32974: LD_INT 5
32976: PUSH
32977: LD_INT 6
32979: PUSH
32980: LD_INT 46
32982: PUSH
32983: LD_INT 44
32985: PUSH
32986: LD_INT 47
32988: PUSH
32989: LD_INT 45
32991: PUSH
32992: LD_INT 28
32994: PUSH
32995: LD_INT 7
32997: PUSH
32998: LD_INT 27
33000: PUSH
33001: LD_INT 29
33003: PUSH
33004: EMPTY
33005: LIST
33006: LIST
33007: LIST
33008: LIST
33009: LIST
33010: LIST
33011: LIST
33012: LIST
33013: LIST
33014: LIST
33015: IN
33016: PUSH
33017: LD_VAR 0 1
33021: PPUSH
33022: LD_INT 52
33024: PPUSH
33025: CALL_OW 321
33029: PUSH
33030: LD_INT 2
33032: EQUAL
33033: AND
33034: IFFALSE 33051
// bpoints := bpoints * 1.2 ;
33036: LD_ADDR_VAR 0 10
33040: PUSH
33041: LD_VAR 0 10
33045: PUSH
33046: LD_REAL  1.20000000000000E+0000
33049: MUL
33050: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
33051: LD_VAR 0 6
33055: PPUSH
33056: CALL_OW 264
33060: PUSH
33061: LD_INT 6
33063: PUSH
33064: LD_INT 46
33066: PUSH
33067: LD_INT 47
33069: PUSH
33070: EMPTY
33071: LIST
33072: LIST
33073: LIST
33074: IN
33075: IFFALSE 33092
// bpoints := bpoints * 1.2 ;
33077: LD_ADDR_VAR 0 10
33081: PUSH
33082: LD_VAR 0 10
33086: PUSH
33087: LD_REAL  1.20000000000000E+0000
33090: MUL
33091: ST_TO_ADDR
// end ; unit_building :
33092: GO 33106
33094: LD_INT 3
33096: DOUBLE
33097: EQUAL
33098: IFTRUE 33102
33100: GO 33105
33102: POP
// ; end ;
33103: GO 33106
33105: POP
// for j = 1 to 3 do
33106: LD_ADDR_VAR 0 7
33110: PUSH
33111: DOUBLE
33112: LD_INT 1
33114: DEC
33115: ST_TO_ADDR
33116: LD_INT 3
33118: PUSH
33119: FOR_TO
33120: IFFALSE 33173
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
33122: LD_ADDR_VAR 0 5
33126: PUSH
33127: LD_VAR 0 5
33131: PPUSH
33132: LD_VAR 0 7
33136: PPUSH
33137: LD_VAR 0 5
33141: PUSH
33142: LD_VAR 0 7
33146: ARRAY
33147: PUSH
33148: LD_VAR 0 9
33152: PUSH
33153: LD_VAR 0 7
33157: ARRAY
33158: PUSH
33159: LD_VAR 0 10
33163: MUL
33164: PLUS
33165: PPUSH
33166: CALL_OW 1
33170: ST_TO_ADDR
33171: GO 33119
33173: POP
33174: POP
// end ;
33175: GO 31658
33177: POP
33178: POP
// result := Replace ( result , 4 , tmp ) ;
33179: LD_ADDR_VAR 0 5
33183: PUSH
33184: LD_VAR 0 5
33188: PPUSH
33189: LD_INT 4
33191: PPUSH
33192: LD_VAR 0 8
33196: PPUSH
33197: CALL_OW 1
33201: ST_TO_ADDR
// end ;
33202: LD_VAR 0 5
33206: RET
// export function DangerAtRange ( unit , range ) ; begin
33207: LD_INT 0
33209: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
33210: LD_ADDR_VAR 0 3
33214: PUSH
33215: LD_VAR 0 1
33219: PPUSH
33220: CALL_OW 255
33224: PPUSH
33225: LD_VAR 0 1
33229: PPUSH
33230: CALL_OW 250
33234: PPUSH
33235: LD_VAR 0 1
33239: PPUSH
33240: CALL_OW 251
33244: PPUSH
33245: LD_VAR 0 2
33249: PPUSH
33250: CALL 31510 0 4
33254: ST_TO_ADDR
// end ;
33255: LD_VAR 0 3
33259: RET
// export function DangerInArea ( side , area ) ; begin
33260: LD_INT 0
33262: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
33263: LD_ADDR_VAR 0 3
33267: PUSH
33268: LD_VAR 0 2
33272: PPUSH
33273: LD_INT 81
33275: PUSH
33276: LD_VAR 0 1
33280: PUSH
33281: EMPTY
33282: LIST
33283: LIST
33284: PPUSH
33285: CALL_OW 70
33289: ST_TO_ADDR
// end ;
33290: LD_VAR 0 3
33294: RET
// export function IsExtension ( b ) ; begin
33295: LD_INT 0
33297: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
33298: LD_ADDR_VAR 0 2
33302: PUSH
33303: LD_VAR 0 1
33307: PUSH
33308: LD_INT 23
33310: PUSH
33311: LD_INT 20
33313: PUSH
33314: LD_INT 22
33316: PUSH
33317: LD_INT 17
33319: PUSH
33320: LD_INT 24
33322: PUSH
33323: LD_INT 21
33325: PUSH
33326: LD_INT 19
33328: PUSH
33329: LD_INT 16
33331: PUSH
33332: LD_INT 25
33334: PUSH
33335: LD_INT 18
33337: PUSH
33338: EMPTY
33339: LIST
33340: LIST
33341: LIST
33342: LIST
33343: LIST
33344: LIST
33345: LIST
33346: LIST
33347: LIST
33348: LIST
33349: IN
33350: ST_TO_ADDR
// end ;
33351: LD_VAR 0 2
33355: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
33356: LD_INT 0
33358: PPUSH
33359: PPUSH
33360: PPUSH
// result := [ ] ;
33361: LD_ADDR_VAR 0 3
33365: PUSH
33366: EMPTY
33367: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
33368: LD_ADDR_VAR 0 4
33372: PUSH
33373: LD_VAR 0 2
33377: PPUSH
33378: LD_INT 21
33380: PUSH
33381: LD_INT 3
33383: PUSH
33384: EMPTY
33385: LIST
33386: LIST
33387: PPUSH
33388: CALL_OW 70
33392: ST_TO_ADDR
// if not tmp then
33393: LD_VAR 0 4
33397: NOT
33398: IFFALSE 33402
// exit ;
33400: GO 33460
// for i in tmp do
33402: LD_ADDR_VAR 0 5
33406: PUSH
33407: LD_VAR 0 4
33411: PUSH
33412: FOR_IN
33413: IFFALSE 33448
// if GetBase ( i ) <> base then
33415: LD_VAR 0 5
33419: PPUSH
33420: CALL_OW 274
33424: PUSH
33425: LD_VAR 0 1
33429: NONEQUAL
33430: IFFALSE 33446
// ComLinkToBase ( base , i ) ;
33432: LD_VAR 0 1
33436: PPUSH
33437: LD_VAR 0 5
33441: PPUSH
33442: CALL_OW 169
33446: GO 33412
33448: POP
33449: POP
// result := tmp ;
33450: LD_ADDR_VAR 0 3
33454: PUSH
33455: LD_VAR 0 4
33459: ST_TO_ADDR
// end ;
33460: LD_VAR 0 3
33464: RET
// export function ComComplete ( unit , b ) ; var i ; begin
33465: LD_INT 0
33467: PPUSH
33468: PPUSH
// if BuildingStatus ( b ) = bs_build then
33469: LD_VAR 0 2
33473: PPUSH
33474: CALL_OW 461
33478: PUSH
33479: LD_INT 1
33481: EQUAL
33482: IFFALSE 33542
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
33484: LD_VAR 0 1
33488: PPUSH
33489: LD_STRING h
33491: PUSH
33492: LD_VAR 0 2
33496: PPUSH
33497: CALL_OW 250
33501: PUSH
33502: LD_VAR 0 2
33506: PPUSH
33507: CALL_OW 251
33511: PUSH
33512: LD_VAR 0 2
33516: PUSH
33517: LD_INT 0
33519: PUSH
33520: LD_INT 0
33522: PUSH
33523: LD_INT 0
33525: PUSH
33526: EMPTY
33527: LIST
33528: LIST
33529: LIST
33530: LIST
33531: LIST
33532: LIST
33533: LIST
33534: PUSH
33535: EMPTY
33536: LIST
33537: PPUSH
33538: CALL_OW 446
// end ;
33542: LD_VAR 0 3
33546: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
33547: LD_INT 0
33549: PPUSH
33550: PPUSH
33551: PPUSH
33552: PPUSH
33553: PPUSH
33554: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
33555: LD_VAR 0 1
33559: NOT
33560: PUSH
33561: LD_VAR 0 1
33565: PPUSH
33566: CALL_OW 263
33570: PUSH
33571: LD_INT 2
33573: EQUAL
33574: NOT
33575: OR
33576: IFFALSE 33580
// exit ;
33578: GO 33896
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
33580: LD_ADDR_VAR 0 6
33584: PUSH
33585: LD_INT 22
33587: PUSH
33588: LD_VAR 0 1
33592: PPUSH
33593: CALL_OW 255
33597: PUSH
33598: EMPTY
33599: LIST
33600: LIST
33601: PUSH
33602: LD_INT 2
33604: PUSH
33605: LD_INT 30
33607: PUSH
33608: LD_INT 36
33610: PUSH
33611: EMPTY
33612: LIST
33613: LIST
33614: PUSH
33615: LD_INT 34
33617: PUSH
33618: LD_INT 31
33620: PUSH
33621: EMPTY
33622: LIST
33623: LIST
33624: PUSH
33625: EMPTY
33626: LIST
33627: LIST
33628: LIST
33629: PUSH
33630: EMPTY
33631: LIST
33632: LIST
33633: PPUSH
33634: CALL_OW 69
33638: ST_TO_ADDR
// if not tmp then
33639: LD_VAR 0 6
33643: NOT
33644: IFFALSE 33648
// exit ;
33646: GO 33896
// result := [ ] ;
33648: LD_ADDR_VAR 0 2
33652: PUSH
33653: EMPTY
33654: ST_TO_ADDR
// for i in tmp do
33655: LD_ADDR_VAR 0 3
33659: PUSH
33660: LD_VAR 0 6
33664: PUSH
33665: FOR_IN
33666: IFFALSE 33737
// begin t := UnitsInside ( i ) ;
33668: LD_ADDR_VAR 0 4
33672: PUSH
33673: LD_VAR 0 3
33677: PPUSH
33678: CALL_OW 313
33682: ST_TO_ADDR
// if t then
33683: LD_VAR 0 4
33687: IFFALSE 33735
// for j in t do
33689: LD_ADDR_VAR 0 7
33693: PUSH
33694: LD_VAR 0 4
33698: PUSH
33699: FOR_IN
33700: IFFALSE 33733
// result := Insert ( result , result + 1 , j ) ;
33702: LD_ADDR_VAR 0 2
33706: PUSH
33707: LD_VAR 0 2
33711: PPUSH
33712: LD_VAR 0 2
33716: PUSH
33717: LD_INT 1
33719: PLUS
33720: PPUSH
33721: LD_VAR 0 7
33725: PPUSH
33726: CALL_OW 2
33730: ST_TO_ADDR
33731: GO 33699
33733: POP
33734: POP
// end ;
33735: GO 33665
33737: POP
33738: POP
// if not result then
33739: LD_VAR 0 2
33743: NOT
33744: IFFALSE 33748
// exit ;
33746: GO 33896
// mech := result [ 1 ] ;
33748: LD_ADDR_VAR 0 5
33752: PUSH
33753: LD_VAR 0 2
33757: PUSH
33758: LD_INT 1
33760: ARRAY
33761: ST_TO_ADDR
// if result > 1 then
33762: LD_VAR 0 2
33766: PUSH
33767: LD_INT 1
33769: GREATER
33770: IFFALSE 33882
// for i = 2 to result do
33772: LD_ADDR_VAR 0 3
33776: PUSH
33777: DOUBLE
33778: LD_INT 2
33780: DEC
33781: ST_TO_ADDR
33782: LD_VAR 0 2
33786: PUSH
33787: FOR_TO
33788: IFFALSE 33880
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
33790: LD_ADDR_VAR 0 4
33794: PUSH
33795: LD_VAR 0 2
33799: PUSH
33800: LD_VAR 0 3
33804: ARRAY
33805: PPUSH
33806: LD_INT 3
33808: PPUSH
33809: CALL_OW 259
33813: PUSH
33814: LD_VAR 0 2
33818: PUSH
33819: LD_VAR 0 3
33823: ARRAY
33824: PPUSH
33825: CALL_OW 432
33829: MINUS
33830: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
33831: LD_VAR 0 4
33835: PUSH
33836: LD_VAR 0 5
33840: PPUSH
33841: LD_INT 3
33843: PPUSH
33844: CALL_OW 259
33848: PUSH
33849: LD_VAR 0 5
33853: PPUSH
33854: CALL_OW 432
33858: MINUS
33859: GREATEREQUAL
33860: IFFALSE 33878
// mech := result [ i ] ;
33862: LD_ADDR_VAR 0 5
33866: PUSH
33867: LD_VAR 0 2
33871: PUSH
33872: LD_VAR 0 3
33876: ARRAY
33877: ST_TO_ADDR
// end ;
33878: GO 33787
33880: POP
33881: POP
// ComLinkTo ( vehicle , mech ) ;
33882: LD_VAR 0 1
33886: PPUSH
33887: LD_VAR 0 5
33891: PPUSH
33892: CALL_OW 135
// end ;
33896: LD_VAR 0 2
33900: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
33901: LD_INT 0
33903: PPUSH
33904: PPUSH
33905: PPUSH
33906: PPUSH
33907: PPUSH
33908: PPUSH
33909: PPUSH
33910: PPUSH
33911: PPUSH
33912: PPUSH
33913: PPUSH
33914: PPUSH
33915: PPUSH
// result := [ ] ;
33916: LD_ADDR_VAR 0 7
33920: PUSH
33921: EMPTY
33922: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
33923: LD_VAR 0 1
33927: PPUSH
33928: CALL_OW 266
33932: PUSH
33933: LD_INT 0
33935: PUSH
33936: LD_INT 1
33938: PUSH
33939: EMPTY
33940: LIST
33941: LIST
33942: IN
33943: NOT
33944: IFFALSE 33948
// exit ;
33946: GO 35579
// if name then
33948: LD_VAR 0 3
33952: IFFALSE 33968
// SetBName ( base_dep , name ) ;
33954: LD_VAR 0 1
33958: PPUSH
33959: LD_VAR 0 3
33963: PPUSH
33964: CALL_OW 500
// base := GetBase ( base_dep ) ;
33968: LD_ADDR_VAR 0 15
33972: PUSH
33973: LD_VAR 0 1
33977: PPUSH
33978: CALL_OW 274
33982: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
33983: LD_ADDR_VAR 0 16
33987: PUSH
33988: LD_VAR 0 1
33992: PPUSH
33993: CALL_OW 255
33997: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
33998: LD_ADDR_VAR 0 17
34002: PUSH
34003: LD_VAR 0 1
34007: PPUSH
34008: CALL_OW 248
34012: ST_TO_ADDR
// if sources then
34013: LD_VAR 0 5
34017: IFFALSE 34064
// for i = 1 to 3 do
34019: LD_ADDR_VAR 0 8
34023: PUSH
34024: DOUBLE
34025: LD_INT 1
34027: DEC
34028: ST_TO_ADDR
34029: LD_INT 3
34031: PUSH
34032: FOR_TO
34033: IFFALSE 34062
// AddResourceType ( base , i , sources [ i ] ) ;
34035: LD_VAR 0 15
34039: PPUSH
34040: LD_VAR 0 8
34044: PPUSH
34045: LD_VAR 0 5
34049: PUSH
34050: LD_VAR 0 8
34054: ARRAY
34055: PPUSH
34056: CALL_OW 276
34060: GO 34032
34062: POP
34063: POP
// buildings := GetBaseBuildings ( base , area ) ;
34064: LD_ADDR_VAR 0 18
34068: PUSH
34069: LD_VAR 0 15
34073: PPUSH
34074: LD_VAR 0 2
34078: PPUSH
34079: CALL 33356 0 2
34083: ST_TO_ADDR
// InitHc ;
34084: CALL_OW 19
// InitUc ;
34088: CALL_OW 18
// uc_side := side ;
34092: LD_ADDR_OWVAR 20
34096: PUSH
34097: LD_VAR 0 16
34101: ST_TO_ADDR
// uc_nation := nation ;
34102: LD_ADDR_OWVAR 21
34106: PUSH
34107: LD_VAR 0 17
34111: ST_TO_ADDR
// if buildings then
34112: LD_VAR 0 18
34116: IFFALSE 35438
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
34118: LD_ADDR_VAR 0 19
34122: PUSH
34123: LD_VAR 0 18
34127: PPUSH
34128: LD_INT 2
34130: PUSH
34131: LD_INT 30
34133: PUSH
34134: LD_INT 29
34136: PUSH
34137: EMPTY
34138: LIST
34139: LIST
34140: PUSH
34141: LD_INT 30
34143: PUSH
34144: LD_INT 30
34146: PUSH
34147: EMPTY
34148: LIST
34149: LIST
34150: PUSH
34151: EMPTY
34152: LIST
34153: LIST
34154: LIST
34155: PPUSH
34156: CALL_OW 72
34160: ST_TO_ADDR
// if tmp then
34161: LD_VAR 0 19
34165: IFFALSE 34213
// for i in tmp do
34167: LD_ADDR_VAR 0 8
34171: PUSH
34172: LD_VAR 0 19
34176: PUSH
34177: FOR_IN
34178: IFFALSE 34211
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
34180: LD_VAR 0 8
34184: PPUSH
34185: CALL_OW 250
34189: PPUSH
34190: LD_VAR 0 8
34194: PPUSH
34195: CALL_OW 251
34199: PPUSH
34200: LD_VAR 0 16
34204: PPUSH
34205: CALL_OW 441
34209: GO 34177
34211: POP
34212: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
34213: LD_VAR 0 18
34217: PPUSH
34218: LD_INT 2
34220: PUSH
34221: LD_INT 30
34223: PUSH
34224: LD_INT 32
34226: PUSH
34227: EMPTY
34228: LIST
34229: LIST
34230: PUSH
34231: LD_INT 30
34233: PUSH
34234: LD_INT 33
34236: PUSH
34237: EMPTY
34238: LIST
34239: LIST
34240: PUSH
34241: EMPTY
34242: LIST
34243: LIST
34244: LIST
34245: PPUSH
34246: CALL_OW 72
34250: IFFALSE 34338
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
34252: LD_ADDR_VAR 0 8
34256: PUSH
34257: LD_VAR 0 18
34261: PPUSH
34262: LD_INT 2
34264: PUSH
34265: LD_INT 30
34267: PUSH
34268: LD_INT 32
34270: PUSH
34271: EMPTY
34272: LIST
34273: LIST
34274: PUSH
34275: LD_INT 30
34277: PUSH
34278: LD_INT 33
34280: PUSH
34281: EMPTY
34282: LIST
34283: LIST
34284: PUSH
34285: EMPTY
34286: LIST
34287: LIST
34288: LIST
34289: PPUSH
34290: CALL_OW 72
34294: PUSH
34295: FOR_IN
34296: IFFALSE 34336
// begin if not GetBWeapon ( i ) then
34298: LD_VAR 0 8
34302: PPUSH
34303: CALL_OW 269
34307: NOT
34308: IFFALSE 34334
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
34310: LD_VAR 0 8
34314: PPUSH
34315: LD_VAR 0 8
34319: PPUSH
34320: LD_VAR 0 2
34324: PPUSH
34325: CALL 35584 0 2
34329: PPUSH
34330: CALL_OW 431
// end ;
34334: GO 34295
34336: POP
34337: POP
// end ; for i = 1 to personel do
34338: LD_ADDR_VAR 0 8
34342: PUSH
34343: DOUBLE
34344: LD_INT 1
34346: DEC
34347: ST_TO_ADDR
34348: LD_VAR 0 6
34352: PUSH
34353: FOR_TO
34354: IFFALSE 35418
// begin if i > 4 then
34356: LD_VAR 0 8
34360: PUSH
34361: LD_INT 4
34363: GREATER
34364: IFFALSE 34368
// break ;
34366: GO 35418
// case i of 1 :
34368: LD_VAR 0 8
34372: PUSH
34373: LD_INT 1
34375: DOUBLE
34376: EQUAL
34377: IFTRUE 34381
34379: GO 34461
34381: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
34382: LD_ADDR_VAR 0 12
34386: PUSH
34387: LD_VAR 0 18
34391: PPUSH
34392: LD_INT 22
34394: PUSH
34395: LD_VAR 0 16
34399: PUSH
34400: EMPTY
34401: LIST
34402: LIST
34403: PUSH
34404: LD_INT 58
34406: PUSH
34407: EMPTY
34408: LIST
34409: PUSH
34410: LD_INT 2
34412: PUSH
34413: LD_INT 30
34415: PUSH
34416: LD_INT 32
34418: PUSH
34419: EMPTY
34420: LIST
34421: LIST
34422: PUSH
34423: LD_INT 30
34425: PUSH
34426: LD_INT 4
34428: PUSH
34429: EMPTY
34430: LIST
34431: LIST
34432: PUSH
34433: LD_INT 30
34435: PUSH
34436: LD_INT 5
34438: PUSH
34439: EMPTY
34440: LIST
34441: LIST
34442: PUSH
34443: EMPTY
34444: LIST
34445: LIST
34446: LIST
34447: LIST
34448: PUSH
34449: EMPTY
34450: LIST
34451: LIST
34452: LIST
34453: PPUSH
34454: CALL_OW 72
34458: ST_TO_ADDR
34459: GO 34683
34461: LD_INT 2
34463: DOUBLE
34464: EQUAL
34465: IFTRUE 34469
34467: GO 34531
34469: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
34470: LD_ADDR_VAR 0 12
34474: PUSH
34475: LD_VAR 0 18
34479: PPUSH
34480: LD_INT 22
34482: PUSH
34483: LD_VAR 0 16
34487: PUSH
34488: EMPTY
34489: LIST
34490: LIST
34491: PUSH
34492: LD_INT 2
34494: PUSH
34495: LD_INT 30
34497: PUSH
34498: LD_INT 0
34500: PUSH
34501: EMPTY
34502: LIST
34503: LIST
34504: PUSH
34505: LD_INT 30
34507: PUSH
34508: LD_INT 1
34510: PUSH
34511: EMPTY
34512: LIST
34513: LIST
34514: PUSH
34515: EMPTY
34516: LIST
34517: LIST
34518: LIST
34519: PUSH
34520: EMPTY
34521: LIST
34522: LIST
34523: PPUSH
34524: CALL_OW 72
34528: ST_TO_ADDR
34529: GO 34683
34531: LD_INT 3
34533: DOUBLE
34534: EQUAL
34535: IFTRUE 34539
34537: GO 34601
34539: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
34540: LD_ADDR_VAR 0 12
34544: PUSH
34545: LD_VAR 0 18
34549: PPUSH
34550: LD_INT 22
34552: PUSH
34553: LD_VAR 0 16
34557: PUSH
34558: EMPTY
34559: LIST
34560: LIST
34561: PUSH
34562: LD_INT 2
34564: PUSH
34565: LD_INT 30
34567: PUSH
34568: LD_INT 2
34570: PUSH
34571: EMPTY
34572: LIST
34573: LIST
34574: PUSH
34575: LD_INT 30
34577: PUSH
34578: LD_INT 3
34580: PUSH
34581: EMPTY
34582: LIST
34583: LIST
34584: PUSH
34585: EMPTY
34586: LIST
34587: LIST
34588: LIST
34589: PUSH
34590: EMPTY
34591: LIST
34592: LIST
34593: PPUSH
34594: CALL_OW 72
34598: ST_TO_ADDR
34599: GO 34683
34601: LD_INT 4
34603: DOUBLE
34604: EQUAL
34605: IFTRUE 34609
34607: GO 34682
34609: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
34610: LD_ADDR_VAR 0 12
34614: PUSH
34615: LD_VAR 0 18
34619: PPUSH
34620: LD_INT 22
34622: PUSH
34623: LD_VAR 0 16
34627: PUSH
34628: EMPTY
34629: LIST
34630: LIST
34631: PUSH
34632: LD_INT 2
34634: PUSH
34635: LD_INT 30
34637: PUSH
34638: LD_INT 6
34640: PUSH
34641: EMPTY
34642: LIST
34643: LIST
34644: PUSH
34645: LD_INT 30
34647: PUSH
34648: LD_INT 7
34650: PUSH
34651: EMPTY
34652: LIST
34653: LIST
34654: PUSH
34655: LD_INT 30
34657: PUSH
34658: LD_INT 8
34660: PUSH
34661: EMPTY
34662: LIST
34663: LIST
34664: PUSH
34665: EMPTY
34666: LIST
34667: LIST
34668: LIST
34669: LIST
34670: PUSH
34671: EMPTY
34672: LIST
34673: LIST
34674: PPUSH
34675: CALL_OW 72
34679: ST_TO_ADDR
34680: GO 34683
34682: POP
// if i = 1 then
34683: LD_VAR 0 8
34687: PUSH
34688: LD_INT 1
34690: EQUAL
34691: IFFALSE 34802
// begin tmp := [ ] ;
34693: LD_ADDR_VAR 0 19
34697: PUSH
34698: EMPTY
34699: ST_TO_ADDR
// for j in f do
34700: LD_ADDR_VAR 0 9
34704: PUSH
34705: LD_VAR 0 12
34709: PUSH
34710: FOR_IN
34711: IFFALSE 34784
// if GetBType ( j ) = b_bunker then
34713: LD_VAR 0 9
34717: PPUSH
34718: CALL_OW 266
34722: PUSH
34723: LD_INT 32
34725: EQUAL
34726: IFFALSE 34753
// tmp := Insert ( tmp , 1 , j ) else
34728: LD_ADDR_VAR 0 19
34732: PUSH
34733: LD_VAR 0 19
34737: PPUSH
34738: LD_INT 1
34740: PPUSH
34741: LD_VAR 0 9
34745: PPUSH
34746: CALL_OW 2
34750: ST_TO_ADDR
34751: GO 34782
// tmp := Insert ( tmp , tmp + 1 , j ) ;
34753: LD_ADDR_VAR 0 19
34757: PUSH
34758: LD_VAR 0 19
34762: PPUSH
34763: LD_VAR 0 19
34767: PUSH
34768: LD_INT 1
34770: PLUS
34771: PPUSH
34772: LD_VAR 0 9
34776: PPUSH
34777: CALL_OW 2
34781: ST_TO_ADDR
34782: GO 34710
34784: POP
34785: POP
// if tmp then
34786: LD_VAR 0 19
34790: IFFALSE 34802
// f := tmp ;
34792: LD_ADDR_VAR 0 12
34796: PUSH
34797: LD_VAR 0 19
34801: ST_TO_ADDR
// end ; x := personel [ i ] ;
34802: LD_ADDR_VAR 0 13
34806: PUSH
34807: LD_VAR 0 6
34811: PUSH
34812: LD_VAR 0 8
34816: ARRAY
34817: ST_TO_ADDR
// if x = - 1 then
34818: LD_VAR 0 13
34822: PUSH
34823: LD_INT 1
34825: NEG
34826: EQUAL
34827: IFFALSE 35036
// begin for j in f do
34829: LD_ADDR_VAR 0 9
34833: PUSH
34834: LD_VAR 0 12
34838: PUSH
34839: FOR_IN
34840: IFFALSE 35032
// repeat InitHc ;
34842: CALL_OW 19
// if GetBType ( j ) = b_barracks then
34846: LD_VAR 0 9
34850: PPUSH
34851: CALL_OW 266
34855: PUSH
34856: LD_INT 5
34858: EQUAL
34859: IFFALSE 34929
// begin if UnitsInside ( j ) < 3 then
34861: LD_VAR 0 9
34865: PPUSH
34866: CALL_OW 313
34870: PUSH
34871: LD_INT 3
34873: LESS
34874: IFFALSE 34910
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
34876: LD_INT 0
34878: PPUSH
34879: LD_INT 5
34881: PUSH
34882: LD_INT 8
34884: PUSH
34885: LD_INT 9
34887: PUSH
34888: EMPTY
34889: LIST
34890: LIST
34891: LIST
34892: PUSH
34893: LD_VAR 0 17
34897: ARRAY
34898: PPUSH
34899: LD_VAR 0 4
34903: PPUSH
34904: CALL_OW 380
34908: GO 34927
// PrepareHuman ( false , i , skill ) ;
34910: LD_INT 0
34912: PPUSH
34913: LD_VAR 0 8
34917: PPUSH
34918: LD_VAR 0 4
34922: PPUSH
34923: CALL_OW 380
// end else
34927: GO 34946
// PrepareHuman ( false , i , skill ) ;
34929: LD_INT 0
34931: PPUSH
34932: LD_VAR 0 8
34936: PPUSH
34937: LD_VAR 0 4
34941: PPUSH
34942: CALL_OW 380
// un := CreateHuman ;
34946: LD_ADDR_VAR 0 14
34950: PUSH
34951: CALL_OW 44
34955: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34956: LD_ADDR_VAR 0 7
34960: PUSH
34961: LD_VAR 0 7
34965: PPUSH
34966: LD_INT 1
34968: PPUSH
34969: LD_VAR 0 14
34973: PPUSH
34974: CALL_OW 2
34978: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
34979: LD_VAR 0 14
34983: PPUSH
34984: LD_VAR 0 9
34988: PPUSH
34989: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
34993: LD_VAR 0 9
34997: PPUSH
34998: CALL_OW 313
35002: PUSH
35003: LD_INT 6
35005: EQUAL
35006: PUSH
35007: LD_VAR 0 9
35011: PPUSH
35012: CALL_OW 266
35016: PUSH
35017: LD_INT 32
35019: PUSH
35020: LD_INT 31
35022: PUSH
35023: EMPTY
35024: LIST
35025: LIST
35026: IN
35027: OR
35028: IFFALSE 34842
35030: GO 34839
35032: POP
35033: POP
// end else
35034: GO 35416
// for j = 1 to x do
35036: LD_ADDR_VAR 0 9
35040: PUSH
35041: DOUBLE
35042: LD_INT 1
35044: DEC
35045: ST_TO_ADDR
35046: LD_VAR 0 13
35050: PUSH
35051: FOR_TO
35052: IFFALSE 35414
// begin InitHc ;
35054: CALL_OW 19
// if not f then
35058: LD_VAR 0 12
35062: NOT
35063: IFFALSE 35152
// begin PrepareHuman ( false , i , skill ) ;
35065: LD_INT 0
35067: PPUSH
35068: LD_VAR 0 8
35072: PPUSH
35073: LD_VAR 0 4
35077: PPUSH
35078: CALL_OW 380
// un := CreateHuman ;
35082: LD_ADDR_VAR 0 14
35086: PUSH
35087: CALL_OW 44
35091: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
35092: LD_ADDR_VAR 0 7
35096: PUSH
35097: LD_VAR 0 7
35101: PPUSH
35102: LD_INT 1
35104: PPUSH
35105: LD_VAR 0 14
35109: PPUSH
35110: CALL_OW 2
35114: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
35115: LD_VAR 0 14
35119: PPUSH
35120: LD_VAR 0 1
35124: PPUSH
35125: CALL_OW 250
35129: PPUSH
35130: LD_VAR 0 1
35134: PPUSH
35135: CALL_OW 251
35139: PPUSH
35140: LD_INT 10
35142: PPUSH
35143: LD_INT 0
35145: PPUSH
35146: CALL_OW 50
// continue ;
35150: GO 35051
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
35152: LD_VAR 0 12
35156: PUSH
35157: LD_INT 1
35159: ARRAY
35160: PPUSH
35161: CALL_OW 313
35165: PUSH
35166: LD_VAR 0 12
35170: PUSH
35171: LD_INT 1
35173: ARRAY
35174: PPUSH
35175: CALL_OW 266
35179: PUSH
35180: LD_INT 32
35182: PUSH
35183: LD_INT 31
35185: PUSH
35186: EMPTY
35187: LIST
35188: LIST
35189: IN
35190: AND
35191: PUSH
35192: LD_VAR 0 12
35196: PUSH
35197: LD_INT 1
35199: ARRAY
35200: PPUSH
35201: CALL_OW 313
35205: PUSH
35206: LD_INT 6
35208: EQUAL
35209: OR
35210: IFFALSE 35230
// f := Delete ( f , 1 ) ;
35212: LD_ADDR_VAR 0 12
35216: PUSH
35217: LD_VAR 0 12
35221: PPUSH
35222: LD_INT 1
35224: PPUSH
35225: CALL_OW 3
35229: ST_TO_ADDR
// if not f then
35230: LD_VAR 0 12
35234: NOT
35235: IFFALSE 35253
// begin x := x + 2 ;
35237: LD_ADDR_VAR 0 13
35241: PUSH
35242: LD_VAR 0 13
35246: PUSH
35247: LD_INT 2
35249: PLUS
35250: ST_TO_ADDR
// continue ;
35251: GO 35051
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
35253: LD_VAR 0 12
35257: PUSH
35258: LD_INT 1
35260: ARRAY
35261: PPUSH
35262: CALL_OW 266
35266: PUSH
35267: LD_INT 5
35269: EQUAL
35270: IFFALSE 35344
// begin if UnitsInside ( f [ 1 ] ) < 3 then
35272: LD_VAR 0 12
35276: PUSH
35277: LD_INT 1
35279: ARRAY
35280: PPUSH
35281: CALL_OW 313
35285: PUSH
35286: LD_INT 3
35288: LESS
35289: IFFALSE 35325
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
35291: LD_INT 0
35293: PPUSH
35294: LD_INT 5
35296: PUSH
35297: LD_INT 8
35299: PUSH
35300: LD_INT 9
35302: PUSH
35303: EMPTY
35304: LIST
35305: LIST
35306: LIST
35307: PUSH
35308: LD_VAR 0 17
35312: ARRAY
35313: PPUSH
35314: LD_VAR 0 4
35318: PPUSH
35319: CALL_OW 380
35323: GO 35342
// PrepareHuman ( false , i , skill ) ;
35325: LD_INT 0
35327: PPUSH
35328: LD_VAR 0 8
35332: PPUSH
35333: LD_VAR 0 4
35337: PPUSH
35338: CALL_OW 380
// end else
35342: GO 35361
// PrepareHuman ( false , i , skill ) ;
35344: LD_INT 0
35346: PPUSH
35347: LD_VAR 0 8
35351: PPUSH
35352: LD_VAR 0 4
35356: PPUSH
35357: CALL_OW 380
// un := CreateHuman ;
35361: LD_ADDR_VAR 0 14
35365: PUSH
35366: CALL_OW 44
35370: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
35371: LD_ADDR_VAR 0 7
35375: PUSH
35376: LD_VAR 0 7
35380: PPUSH
35381: LD_INT 1
35383: PPUSH
35384: LD_VAR 0 14
35388: PPUSH
35389: CALL_OW 2
35393: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
35394: LD_VAR 0 14
35398: PPUSH
35399: LD_VAR 0 12
35403: PUSH
35404: LD_INT 1
35406: ARRAY
35407: PPUSH
35408: CALL_OW 52
// end ;
35412: GO 35051
35414: POP
35415: POP
// end ;
35416: GO 34353
35418: POP
35419: POP
// result := result ^ buildings ;
35420: LD_ADDR_VAR 0 7
35424: PUSH
35425: LD_VAR 0 7
35429: PUSH
35430: LD_VAR 0 18
35434: ADD
35435: ST_TO_ADDR
// end else
35436: GO 35579
// begin for i = 1 to personel do
35438: LD_ADDR_VAR 0 8
35442: PUSH
35443: DOUBLE
35444: LD_INT 1
35446: DEC
35447: ST_TO_ADDR
35448: LD_VAR 0 6
35452: PUSH
35453: FOR_TO
35454: IFFALSE 35577
// begin if i > 4 then
35456: LD_VAR 0 8
35460: PUSH
35461: LD_INT 4
35463: GREATER
35464: IFFALSE 35468
// break ;
35466: GO 35577
// x := personel [ i ] ;
35468: LD_ADDR_VAR 0 13
35472: PUSH
35473: LD_VAR 0 6
35477: PUSH
35478: LD_VAR 0 8
35482: ARRAY
35483: ST_TO_ADDR
// if x = - 1 then
35484: LD_VAR 0 13
35488: PUSH
35489: LD_INT 1
35491: NEG
35492: EQUAL
35493: IFFALSE 35497
// continue ;
35495: GO 35453
// PrepareHuman ( false , i , skill ) ;
35497: LD_INT 0
35499: PPUSH
35500: LD_VAR 0 8
35504: PPUSH
35505: LD_VAR 0 4
35509: PPUSH
35510: CALL_OW 380
// un := CreateHuman ;
35514: LD_ADDR_VAR 0 14
35518: PUSH
35519: CALL_OW 44
35523: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
35524: LD_VAR 0 14
35528: PPUSH
35529: LD_VAR 0 1
35533: PPUSH
35534: CALL_OW 250
35538: PPUSH
35539: LD_VAR 0 1
35543: PPUSH
35544: CALL_OW 251
35548: PPUSH
35549: LD_INT 10
35551: PPUSH
35552: LD_INT 0
35554: PPUSH
35555: CALL_OW 50
// result := result ^ un ;
35559: LD_ADDR_VAR 0 7
35563: PUSH
35564: LD_VAR 0 7
35568: PUSH
35569: LD_VAR 0 14
35573: ADD
35574: ST_TO_ADDR
// end ;
35575: GO 35453
35577: POP
35578: POP
// end ; end ;
35579: LD_VAR 0 7
35583: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
35584: LD_INT 0
35586: PPUSH
35587: PPUSH
35588: PPUSH
35589: PPUSH
35590: PPUSH
35591: PPUSH
35592: PPUSH
35593: PPUSH
35594: PPUSH
35595: PPUSH
35596: PPUSH
35597: PPUSH
35598: PPUSH
35599: PPUSH
35600: PPUSH
35601: PPUSH
// result := false ;
35602: LD_ADDR_VAR 0 3
35606: PUSH
35607: LD_INT 0
35609: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
35610: LD_VAR 0 1
35614: NOT
35615: PUSH
35616: LD_VAR 0 1
35620: PPUSH
35621: CALL_OW 266
35625: PUSH
35626: LD_INT 32
35628: PUSH
35629: LD_INT 33
35631: PUSH
35632: EMPTY
35633: LIST
35634: LIST
35635: IN
35636: NOT
35637: OR
35638: IFFALSE 35642
// exit ;
35640: GO 36778
// nat := GetNation ( tower ) ;
35642: LD_ADDR_VAR 0 12
35646: PUSH
35647: LD_VAR 0 1
35651: PPUSH
35652: CALL_OW 248
35656: ST_TO_ADDR
// side := GetSide ( tower ) ;
35657: LD_ADDR_VAR 0 16
35661: PUSH
35662: LD_VAR 0 1
35666: PPUSH
35667: CALL_OW 255
35671: ST_TO_ADDR
// x := GetX ( tower ) ;
35672: LD_ADDR_VAR 0 10
35676: PUSH
35677: LD_VAR 0 1
35681: PPUSH
35682: CALL_OW 250
35686: ST_TO_ADDR
// y := GetY ( tower ) ;
35687: LD_ADDR_VAR 0 11
35691: PUSH
35692: LD_VAR 0 1
35696: PPUSH
35697: CALL_OW 251
35701: ST_TO_ADDR
// if not x or not y then
35702: LD_VAR 0 10
35706: NOT
35707: PUSH
35708: LD_VAR 0 11
35712: NOT
35713: OR
35714: IFFALSE 35718
// exit ;
35716: GO 36778
// weapon := 0 ;
35718: LD_ADDR_VAR 0 18
35722: PUSH
35723: LD_INT 0
35725: ST_TO_ADDR
// fac_list := [ ] ;
35726: LD_ADDR_VAR 0 17
35730: PUSH
35731: EMPTY
35732: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
35733: LD_ADDR_VAR 0 6
35737: PUSH
35738: LD_VAR 0 1
35742: PPUSH
35743: CALL_OW 274
35747: PPUSH
35748: LD_VAR 0 2
35752: PPUSH
35753: CALL 33356 0 2
35757: PPUSH
35758: LD_INT 30
35760: PUSH
35761: LD_INT 3
35763: PUSH
35764: EMPTY
35765: LIST
35766: LIST
35767: PPUSH
35768: CALL_OW 72
35772: ST_TO_ADDR
// if not factories then
35773: LD_VAR 0 6
35777: NOT
35778: IFFALSE 35782
// exit ;
35780: GO 36778
// for i in factories do
35782: LD_ADDR_VAR 0 8
35786: PUSH
35787: LD_VAR 0 6
35791: PUSH
35792: FOR_IN
35793: IFFALSE 35818
// fac_list := fac_list union AvailableWeaponList ( i ) ;
35795: LD_ADDR_VAR 0 17
35799: PUSH
35800: LD_VAR 0 17
35804: PUSH
35805: LD_VAR 0 8
35809: PPUSH
35810: CALL_OW 478
35814: UNION
35815: ST_TO_ADDR
35816: GO 35792
35818: POP
35819: POP
// if not fac_list then
35820: LD_VAR 0 17
35824: NOT
35825: IFFALSE 35829
// exit ;
35827: GO 36778
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
35829: LD_ADDR_VAR 0 5
35833: PUSH
35834: LD_INT 4
35836: PUSH
35837: LD_INT 5
35839: PUSH
35840: LD_INT 9
35842: PUSH
35843: LD_INT 10
35845: PUSH
35846: LD_INT 6
35848: PUSH
35849: LD_INT 7
35851: PUSH
35852: LD_INT 11
35854: PUSH
35855: EMPTY
35856: LIST
35857: LIST
35858: LIST
35859: LIST
35860: LIST
35861: LIST
35862: LIST
35863: PUSH
35864: LD_INT 27
35866: PUSH
35867: LD_INT 28
35869: PUSH
35870: LD_INT 26
35872: PUSH
35873: LD_INT 30
35875: PUSH
35876: EMPTY
35877: LIST
35878: LIST
35879: LIST
35880: LIST
35881: PUSH
35882: LD_INT 43
35884: PUSH
35885: LD_INT 44
35887: PUSH
35888: LD_INT 46
35890: PUSH
35891: LD_INT 45
35893: PUSH
35894: LD_INT 47
35896: PUSH
35897: LD_INT 49
35899: PUSH
35900: EMPTY
35901: LIST
35902: LIST
35903: LIST
35904: LIST
35905: LIST
35906: LIST
35907: PUSH
35908: EMPTY
35909: LIST
35910: LIST
35911: LIST
35912: PUSH
35913: LD_VAR 0 12
35917: ARRAY
35918: ST_TO_ADDR
// for i in list do
35919: LD_ADDR_VAR 0 8
35923: PUSH
35924: LD_VAR 0 5
35928: PUSH
35929: FOR_IN
35930: IFFALSE 35963
// if not i in fac_list then
35932: LD_VAR 0 8
35936: PUSH
35937: LD_VAR 0 17
35941: IN
35942: NOT
35943: IFFALSE 35961
// list := list diff i ;
35945: LD_ADDR_VAR 0 5
35949: PUSH
35950: LD_VAR 0 5
35954: PUSH
35955: LD_VAR 0 8
35959: DIFF
35960: ST_TO_ADDR
35961: GO 35929
35963: POP
35964: POP
// if not list then
35965: LD_VAR 0 5
35969: NOT
35970: IFFALSE 35974
// exit ;
35972: GO 36778
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
35974: LD_VAR 0 12
35978: PUSH
35979: LD_INT 3
35981: EQUAL
35982: PUSH
35983: LD_INT 49
35985: PUSH
35986: LD_VAR 0 5
35990: IN
35991: AND
35992: PUSH
35993: LD_INT 31
35995: PPUSH
35996: LD_VAR 0 16
36000: PPUSH
36001: CALL_OW 321
36005: PUSH
36006: LD_INT 2
36008: EQUAL
36009: AND
36010: IFFALSE 36070
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
36012: LD_INT 22
36014: PUSH
36015: LD_VAR 0 16
36019: PUSH
36020: EMPTY
36021: LIST
36022: LIST
36023: PUSH
36024: LD_INT 35
36026: PUSH
36027: LD_INT 49
36029: PUSH
36030: EMPTY
36031: LIST
36032: LIST
36033: PUSH
36034: LD_INT 91
36036: PUSH
36037: LD_VAR 0 1
36041: PUSH
36042: LD_INT 10
36044: PUSH
36045: EMPTY
36046: LIST
36047: LIST
36048: LIST
36049: PUSH
36050: EMPTY
36051: LIST
36052: LIST
36053: LIST
36054: PPUSH
36055: CALL_OW 69
36059: NOT
36060: IFFALSE 36070
// weapon := ru_time_lapser ;
36062: LD_ADDR_VAR 0 18
36066: PUSH
36067: LD_INT 49
36069: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
36070: LD_VAR 0 12
36074: PUSH
36075: LD_INT 1
36077: PUSH
36078: LD_INT 2
36080: PUSH
36081: EMPTY
36082: LIST
36083: LIST
36084: IN
36085: PUSH
36086: LD_INT 11
36088: PUSH
36089: LD_VAR 0 5
36093: IN
36094: PUSH
36095: LD_INT 30
36097: PUSH
36098: LD_VAR 0 5
36102: IN
36103: OR
36104: AND
36105: PUSH
36106: LD_INT 6
36108: PPUSH
36109: LD_VAR 0 16
36113: PPUSH
36114: CALL_OW 321
36118: PUSH
36119: LD_INT 2
36121: EQUAL
36122: AND
36123: IFFALSE 36288
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
36125: LD_INT 22
36127: PUSH
36128: LD_VAR 0 16
36132: PUSH
36133: EMPTY
36134: LIST
36135: LIST
36136: PUSH
36137: LD_INT 2
36139: PUSH
36140: LD_INT 35
36142: PUSH
36143: LD_INT 11
36145: PUSH
36146: EMPTY
36147: LIST
36148: LIST
36149: PUSH
36150: LD_INT 35
36152: PUSH
36153: LD_INT 30
36155: PUSH
36156: EMPTY
36157: LIST
36158: LIST
36159: PUSH
36160: EMPTY
36161: LIST
36162: LIST
36163: LIST
36164: PUSH
36165: LD_INT 91
36167: PUSH
36168: LD_VAR 0 1
36172: PUSH
36173: LD_INT 18
36175: PUSH
36176: EMPTY
36177: LIST
36178: LIST
36179: LIST
36180: PUSH
36181: EMPTY
36182: LIST
36183: LIST
36184: LIST
36185: PPUSH
36186: CALL_OW 69
36190: NOT
36191: PUSH
36192: LD_INT 22
36194: PUSH
36195: LD_VAR 0 16
36199: PUSH
36200: EMPTY
36201: LIST
36202: LIST
36203: PUSH
36204: LD_INT 2
36206: PUSH
36207: LD_INT 30
36209: PUSH
36210: LD_INT 32
36212: PUSH
36213: EMPTY
36214: LIST
36215: LIST
36216: PUSH
36217: LD_INT 30
36219: PUSH
36220: LD_INT 33
36222: PUSH
36223: EMPTY
36224: LIST
36225: LIST
36226: PUSH
36227: EMPTY
36228: LIST
36229: LIST
36230: LIST
36231: PUSH
36232: LD_INT 91
36234: PUSH
36235: LD_VAR 0 1
36239: PUSH
36240: LD_INT 12
36242: PUSH
36243: EMPTY
36244: LIST
36245: LIST
36246: LIST
36247: PUSH
36248: EMPTY
36249: LIST
36250: LIST
36251: LIST
36252: PUSH
36253: EMPTY
36254: LIST
36255: PPUSH
36256: CALL_OW 69
36260: PUSH
36261: LD_INT 2
36263: GREATER
36264: AND
36265: IFFALSE 36288
// weapon := [ us_radar , ar_radar ] [ nat ] ;
36267: LD_ADDR_VAR 0 18
36271: PUSH
36272: LD_INT 11
36274: PUSH
36275: LD_INT 30
36277: PUSH
36278: EMPTY
36279: LIST
36280: LIST
36281: PUSH
36282: LD_VAR 0 12
36286: ARRAY
36287: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
36288: LD_VAR 0 18
36292: NOT
36293: PUSH
36294: LD_INT 40
36296: PPUSH
36297: LD_VAR 0 16
36301: PPUSH
36302: CALL_OW 321
36306: PUSH
36307: LD_INT 2
36309: EQUAL
36310: AND
36311: PUSH
36312: LD_INT 7
36314: PUSH
36315: LD_VAR 0 5
36319: IN
36320: PUSH
36321: LD_INT 28
36323: PUSH
36324: LD_VAR 0 5
36328: IN
36329: OR
36330: PUSH
36331: LD_INT 45
36333: PUSH
36334: LD_VAR 0 5
36338: IN
36339: OR
36340: AND
36341: IFFALSE 36595
// begin hex := GetHexInfo ( x , y ) ;
36343: LD_ADDR_VAR 0 4
36347: PUSH
36348: LD_VAR 0 10
36352: PPUSH
36353: LD_VAR 0 11
36357: PPUSH
36358: CALL_OW 546
36362: ST_TO_ADDR
// if hex [ 1 ] then
36363: LD_VAR 0 4
36367: PUSH
36368: LD_INT 1
36370: ARRAY
36371: IFFALSE 36375
// exit ;
36373: GO 36778
// height := hex [ 2 ] ;
36375: LD_ADDR_VAR 0 15
36379: PUSH
36380: LD_VAR 0 4
36384: PUSH
36385: LD_INT 2
36387: ARRAY
36388: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
36389: LD_ADDR_VAR 0 14
36393: PUSH
36394: LD_INT 0
36396: PUSH
36397: LD_INT 2
36399: PUSH
36400: LD_INT 3
36402: PUSH
36403: LD_INT 5
36405: PUSH
36406: EMPTY
36407: LIST
36408: LIST
36409: LIST
36410: LIST
36411: ST_TO_ADDR
// for i in tmp do
36412: LD_ADDR_VAR 0 8
36416: PUSH
36417: LD_VAR 0 14
36421: PUSH
36422: FOR_IN
36423: IFFALSE 36593
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
36425: LD_ADDR_VAR 0 9
36429: PUSH
36430: LD_VAR 0 10
36434: PPUSH
36435: LD_VAR 0 8
36439: PPUSH
36440: LD_INT 5
36442: PPUSH
36443: CALL_OW 272
36447: PUSH
36448: LD_VAR 0 11
36452: PPUSH
36453: LD_VAR 0 8
36457: PPUSH
36458: LD_INT 5
36460: PPUSH
36461: CALL_OW 273
36465: PUSH
36466: EMPTY
36467: LIST
36468: LIST
36469: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
36470: LD_VAR 0 9
36474: PUSH
36475: LD_INT 1
36477: ARRAY
36478: PPUSH
36479: LD_VAR 0 9
36483: PUSH
36484: LD_INT 2
36486: ARRAY
36487: PPUSH
36488: CALL_OW 488
36492: IFFALSE 36591
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
36494: LD_ADDR_VAR 0 4
36498: PUSH
36499: LD_VAR 0 9
36503: PUSH
36504: LD_INT 1
36506: ARRAY
36507: PPUSH
36508: LD_VAR 0 9
36512: PUSH
36513: LD_INT 2
36515: ARRAY
36516: PPUSH
36517: CALL_OW 546
36521: ST_TO_ADDR
// if hex [ 1 ] then
36522: LD_VAR 0 4
36526: PUSH
36527: LD_INT 1
36529: ARRAY
36530: IFFALSE 36534
// continue ;
36532: GO 36422
// h := hex [ 2 ] ;
36534: LD_ADDR_VAR 0 13
36538: PUSH
36539: LD_VAR 0 4
36543: PUSH
36544: LD_INT 2
36546: ARRAY
36547: ST_TO_ADDR
// if h + 7 < height then
36548: LD_VAR 0 13
36552: PUSH
36553: LD_INT 7
36555: PLUS
36556: PUSH
36557: LD_VAR 0 15
36561: LESS
36562: IFFALSE 36591
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
36564: LD_ADDR_VAR 0 18
36568: PUSH
36569: LD_INT 7
36571: PUSH
36572: LD_INT 28
36574: PUSH
36575: LD_INT 45
36577: PUSH
36578: EMPTY
36579: LIST
36580: LIST
36581: LIST
36582: PUSH
36583: LD_VAR 0 12
36587: ARRAY
36588: ST_TO_ADDR
// break ;
36589: GO 36593
// end ; end ; end ;
36591: GO 36422
36593: POP
36594: POP
// end ; if not weapon then
36595: LD_VAR 0 18
36599: NOT
36600: IFFALSE 36660
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
36602: LD_ADDR_VAR 0 5
36606: PUSH
36607: LD_VAR 0 5
36611: PUSH
36612: LD_INT 11
36614: PUSH
36615: LD_INT 30
36617: PUSH
36618: LD_INT 49
36620: PUSH
36621: EMPTY
36622: LIST
36623: LIST
36624: LIST
36625: DIFF
36626: ST_TO_ADDR
// if not list then
36627: LD_VAR 0 5
36631: NOT
36632: IFFALSE 36636
// exit ;
36634: GO 36778
// weapon := list [ rand ( 1 , list ) ] ;
36636: LD_ADDR_VAR 0 18
36640: PUSH
36641: LD_VAR 0 5
36645: PUSH
36646: LD_INT 1
36648: PPUSH
36649: LD_VAR 0 5
36653: PPUSH
36654: CALL_OW 12
36658: ARRAY
36659: ST_TO_ADDR
// end ; if weapon then
36660: LD_VAR 0 18
36664: IFFALSE 36778
// begin tmp := CostOfWeapon ( weapon ) ;
36666: LD_ADDR_VAR 0 14
36670: PUSH
36671: LD_VAR 0 18
36675: PPUSH
36676: CALL_OW 451
36680: ST_TO_ADDR
// j := GetBase ( tower ) ;
36681: LD_ADDR_VAR 0 9
36685: PUSH
36686: LD_VAR 0 1
36690: PPUSH
36691: CALL_OW 274
36695: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
36696: LD_VAR 0 9
36700: PPUSH
36701: LD_INT 1
36703: PPUSH
36704: CALL_OW 275
36708: PUSH
36709: LD_VAR 0 14
36713: PUSH
36714: LD_INT 1
36716: ARRAY
36717: GREATEREQUAL
36718: PUSH
36719: LD_VAR 0 9
36723: PPUSH
36724: LD_INT 2
36726: PPUSH
36727: CALL_OW 275
36731: PUSH
36732: LD_VAR 0 14
36736: PUSH
36737: LD_INT 2
36739: ARRAY
36740: GREATEREQUAL
36741: AND
36742: PUSH
36743: LD_VAR 0 9
36747: PPUSH
36748: LD_INT 3
36750: PPUSH
36751: CALL_OW 275
36755: PUSH
36756: LD_VAR 0 14
36760: PUSH
36761: LD_INT 3
36763: ARRAY
36764: GREATEREQUAL
36765: AND
36766: IFFALSE 36778
// result := weapon ;
36768: LD_ADDR_VAR 0 3
36772: PUSH
36773: LD_VAR 0 18
36777: ST_TO_ADDR
// end ; end ;
36778: LD_VAR 0 3
36782: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
36783: LD_INT 0
36785: PPUSH
36786: PPUSH
// result := true ;
36787: LD_ADDR_VAR 0 3
36791: PUSH
36792: LD_INT 1
36794: ST_TO_ADDR
// if array1 = array2 then
36795: LD_VAR 0 1
36799: PUSH
36800: LD_VAR 0 2
36804: EQUAL
36805: IFFALSE 36865
// begin for i = 1 to array1 do
36807: LD_ADDR_VAR 0 4
36811: PUSH
36812: DOUBLE
36813: LD_INT 1
36815: DEC
36816: ST_TO_ADDR
36817: LD_VAR 0 1
36821: PUSH
36822: FOR_TO
36823: IFFALSE 36861
// if array1 [ i ] <> array2 [ i ] then
36825: LD_VAR 0 1
36829: PUSH
36830: LD_VAR 0 4
36834: ARRAY
36835: PUSH
36836: LD_VAR 0 2
36840: PUSH
36841: LD_VAR 0 4
36845: ARRAY
36846: NONEQUAL
36847: IFFALSE 36859
// begin result := false ;
36849: LD_ADDR_VAR 0 3
36853: PUSH
36854: LD_INT 0
36856: ST_TO_ADDR
// break ;
36857: GO 36861
// end ;
36859: GO 36822
36861: POP
36862: POP
// end else
36863: GO 36873
// result := false ;
36865: LD_ADDR_VAR 0 3
36869: PUSH
36870: LD_INT 0
36872: ST_TO_ADDR
// end ;
36873: LD_VAR 0 3
36877: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
36878: LD_INT 0
36880: PPUSH
36881: PPUSH
36882: PPUSH
// pom := GetBase ( fac ) ;
36883: LD_ADDR_VAR 0 5
36887: PUSH
36888: LD_VAR 0 1
36892: PPUSH
36893: CALL_OW 274
36897: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
36898: LD_ADDR_VAR 0 4
36902: PUSH
36903: LD_VAR 0 2
36907: PUSH
36908: LD_INT 1
36910: ARRAY
36911: PPUSH
36912: LD_VAR 0 2
36916: PUSH
36917: LD_INT 2
36919: ARRAY
36920: PPUSH
36921: LD_VAR 0 2
36925: PUSH
36926: LD_INT 3
36928: ARRAY
36929: PPUSH
36930: LD_VAR 0 2
36934: PUSH
36935: LD_INT 4
36937: ARRAY
36938: PPUSH
36939: CALL_OW 449
36943: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36944: LD_ADDR_VAR 0 3
36948: PUSH
36949: LD_VAR 0 5
36953: PPUSH
36954: LD_INT 1
36956: PPUSH
36957: CALL_OW 275
36961: PUSH
36962: LD_VAR 0 4
36966: PUSH
36967: LD_INT 1
36969: ARRAY
36970: GREATEREQUAL
36971: PUSH
36972: LD_VAR 0 5
36976: PPUSH
36977: LD_INT 2
36979: PPUSH
36980: CALL_OW 275
36984: PUSH
36985: LD_VAR 0 4
36989: PUSH
36990: LD_INT 2
36992: ARRAY
36993: GREATEREQUAL
36994: AND
36995: PUSH
36996: LD_VAR 0 5
37000: PPUSH
37001: LD_INT 3
37003: PPUSH
37004: CALL_OW 275
37008: PUSH
37009: LD_VAR 0 4
37013: PUSH
37014: LD_INT 3
37016: ARRAY
37017: GREATEREQUAL
37018: AND
37019: ST_TO_ADDR
// end ;
37020: LD_VAR 0 3
37024: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
37025: LD_INT 0
37027: PPUSH
37028: PPUSH
37029: PPUSH
37030: PPUSH
// pom := GetBase ( building ) ;
37031: LD_ADDR_VAR 0 3
37035: PUSH
37036: LD_VAR 0 1
37040: PPUSH
37041: CALL_OW 274
37045: ST_TO_ADDR
// if not pom then
37046: LD_VAR 0 3
37050: NOT
37051: IFFALSE 37055
// exit ;
37053: GO 37225
// btype := GetBType ( building ) ;
37055: LD_ADDR_VAR 0 5
37059: PUSH
37060: LD_VAR 0 1
37064: PPUSH
37065: CALL_OW 266
37069: ST_TO_ADDR
// if btype = b_armoury then
37070: LD_VAR 0 5
37074: PUSH
37075: LD_INT 4
37077: EQUAL
37078: IFFALSE 37088
// btype := b_barracks ;
37080: LD_ADDR_VAR 0 5
37084: PUSH
37085: LD_INT 5
37087: ST_TO_ADDR
// if btype = b_depot then
37088: LD_VAR 0 5
37092: PUSH
37093: LD_INT 0
37095: EQUAL
37096: IFFALSE 37106
// btype := b_warehouse ;
37098: LD_ADDR_VAR 0 5
37102: PUSH
37103: LD_INT 1
37105: ST_TO_ADDR
// if btype = b_workshop then
37106: LD_VAR 0 5
37110: PUSH
37111: LD_INT 2
37113: EQUAL
37114: IFFALSE 37124
// btype := b_factory ;
37116: LD_ADDR_VAR 0 5
37120: PUSH
37121: LD_INT 3
37123: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
37124: LD_ADDR_VAR 0 4
37128: PUSH
37129: LD_VAR 0 5
37133: PPUSH
37134: LD_VAR 0 1
37138: PPUSH
37139: CALL_OW 248
37143: PPUSH
37144: CALL_OW 450
37148: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
37149: LD_ADDR_VAR 0 2
37153: PUSH
37154: LD_VAR 0 3
37158: PPUSH
37159: LD_INT 1
37161: PPUSH
37162: CALL_OW 275
37166: PUSH
37167: LD_VAR 0 4
37171: PUSH
37172: LD_INT 1
37174: ARRAY
37175: GREATEREQUAL
37176: PUSH
37177: LD_VAR 0 3
37181: PPUSH
37182: LD_INT 2
37184: PPUSH
37185: CALL_OW 275
37189: PUSH
37190: LD_VAR 0 4
37194: PUSH
37195: LD_INT 2
37197: ARRAY
37198: GREATEREQUAL
37199: AND
37200: PUSH
37201: LD_VAR 0 3
37205: PPUSH
37206: LD_INT 3
37208: PPUSH
37209: CALL_OW 275
37213: PUSH
37214: LD_VAR 0 4
37218: PUSH
37219: LD_INT 3
37221: ARRAY
37222: GREATEREQUAL
37223: AND
37224: ST_TO_ADDR
// end ;
37225: LD_VAR 0 2
37229: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
37230: LD_INT 0
37232: PPUSH
37233: PPUSH
37234: PPUSH
// pom := GetBase ( building ) ;
37235: LD_ADDR_VAR 0 4
37239: PUSH
37240: LD_VAR 0 1
37244: PPUSH
37245: CALL_OW 274
37249: ST_TO_ADDR
// if not pom then
37250: LD_VAR 0 4
37254: NOT
37255: IFFALSE 37259
// exit ;
37257: GO 37360
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
37259: LD_ADDR_VAR 0 5
37263: PUSH
37264: LD_VAR 0 2
37268: PPUSH
37269: LD_VAR 0 1
37273: PPUSH
37274: CALL_OW 248
37278: PPUSH
37279: CALL_OW 450
37283: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
37284: LD_ADDR_VAR 0 3
37288: PUSH
37289: LD_VAR 0 4
37293: PPUSH
37294: LD_INT 1
37296: PPUSH
37297: CALL_OW 275
37301: PUSH
37302: LD_VAR 0 5
37306: PUSH
37307: LD_INT 1
37309: ARRAY
37310: GREATEREQUAL
37311: PUSH
37312: LD_VAR 0 4
37316: PPUSH
37317: LD_INT 2
37319: PPUSH
37320: CALL_OW 275
37324: PUSH
37325: LD_VAR 0 5
37329: PUSH
37330: LD_INT 2
37332: ARRAY
37333: GREATEREQUAL
37334: AND
37335: PUSH
37336: LD_VAR 0 4
37340: PPUSH
37341: LD_INT 3
37343: PPUSH
37344: CALL_OW 275
37348: PUSH
37349: LD_VAR 0 5
37353: PUSH
37354: LD_INT 3
37356: ARRAY
37357: GREATEREQUAL
37358: AND
37359: ST_TO_ADDR
// end ;
37360: LD_VAR 0 3
37364: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
37365: LD_INT 0
37367: PPUSH
37368: PPUSH
37369: PPUSH
37370: PPUSH
37371: PPUSH
37372: PPUSH
37373: PPUSH
37374: PPUSH
37375: PPUSH
37376: PPUSH
// result := false ;
37377: LD_ADDR_VAR 0 6
37381: PUSH
37382: LD_INT 0
37384: ST_TO_ADDR
// if not base or not btype or not x or not y then
37385: LD_VAR 0 1
37389: NOT
37390: PUSH
37391: LD_VAR 0 2
37395: NOT
37396: OR
37397: PUSH
37398: LD_VAR 0 3
37402: NOT
37403: OR
37404: PUSH
37405: LD_VAR 0 4
37409: NOT
37410: OR
37411: IFFALSE 37415
// exit ;
37413: GO 38024
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
37415: LD_ADDR_VAR 0 12
37419: PUSH
37420: LD_VAR 0 2
37424: PPUSH
37425: LD_VAR 0 3
37429: PPUSH
37430: LD_VAR 0 4
37434: PPUSH
37435: LD_VAR 0 5
37439: PPUSH
37440: LD_VAR 0 1
37444: PUSH
37445: LD_INT 1
37447: ARRAY
37448: PPUSH
37449: CALL_OW 248
37453: PPUSH
37454: LD_INT 0
37456: PPUSH
37457: CALL 38861 0 6
37461: ST_TO_ADDR
// if not hexes then
37462: LD_VAR 0 12
37466: NOT
37467: IFFALSE 37471
// exit ;
37469: GO 38024
// for i = 1 to hexes do
37471: LD_ADDR_VAR 0 7
37475: PUSH
37476: DOUBLE
37477: LD_INT 1
37479: DEC
37480: ST_TO_ADDR
37481: LD_VAR 0 12
37485: PUSH
37486: FOR_TO
37487: IFFALSE 38022
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
37489: LD_ADDR_VAR 0 11
37493: PUSH
37494: LD_VAR 0 12
37498: PUSH
37499: LD_VAR 0 7
37503: ARRAY
37504: PUSH
37505: LD_INT 1
37507: ARRAY
37508: PPUSH
37509: LD_VAR 0 12
37513: PUSH
37514: LD_VAR 0 7
37518: ARRAY
37519: PUSH
37520: LD_INT 2
37522: ARRAY
37523: PPUSH
37524: CALL_OW 428
37528: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
37529: LD_VAR 0 12
37533: PUSH
37534: LD_VAR 0 7
37538: ARRAY
37539: PUSH
37540: LD_INT 1
37542: ARRAY
37543: PPUSH
37544: LD_VAR 0 12
37548: PUSH
37549: LD_VAR 0 7
37553: ARRAY
37554: PUSH
37555: LD_INT 2
37557: ARRAY
37558: PPUSH
37559: CALL_OW 351
37563: PUSH
37564: LD_VAR 0 12
37568: PUSH
37569: LD_VAR 0 7
37573: ARRAY
37574: PUSH
37575: LD_INT 1
37577: ARRAY
37578: PPUSH
37579: LD_VAR 0 12
37583: PUSH
37584: LD_VAR 0 7
37588: ARRAY
37589: PUSH
37590: LD_INT 2
37592: ARRAY
37593: PPUSH
37594: CALL_OW 488
37598: NOT
37599: OR
37600: PUSH
37601: LD_VAR 0 11
37605: PPUSH
37606: CALL_OW 247
37610: PUSH
37611: LD_INT 3
37613: EQUAL
37614: OR
37615: IFFALSE 37621
// exit ;
37617: POP
37618: POP
37619: GO 38024
// if not tmp or not tmp in base then
37621: LD_VAR 0 11
37625: NOT
37626: PUSH
37627: LD_VAR 0 11
37631: PUSH
37632: LD_VAR 0 1
37636: IN
37637: NOT
37638: OR
37639: IFFALSE 37643
// continue ;
37641: GO 37486
// result := true ;
37643: LD_ADDR_VAR 0 6
37647: PUSH
37648: LD_INT 1
37650: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
37651: LD_ADDR_VAR 0 15
37655: PUSH
37656: LD_VAR 0 1
37660: PPUSH
37661: LD_INT 22
37663: PUSH
37664: LD_VAR 0 11
37668: PPUSH
37669: CALL_OW 255
37673: PUSH
37674: EMPTY
37675: LIST
37676: LIST
37677: PUSH
37678: LD_INT 2
37680: PUSH
37681: LD_INT 30
37683: PUSH
37684: LD_INT 0
37686: PUSH
37687: EMPTY
37688: LIST
37689: LIST
37690: PUSH
37691: LD_INT 30
37693: PUSH
37694: LD_INT 1
37696: PUSH
37697: EMPTY
37698: LIST
37699: LIST
37700: PUSH
37701: EMPTY
37702: LIST
37703: LIST
37704: LIST
37705: PUSH
37706: EMPTY
37707: LIST
37708: LIST
37709: PPUSH
37710: CALL_OW 72
37714: ST_TO_ADDR
// if dep then
37715: LD_VAR 0 15
37719: IFFALSE 37855
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
37721: LD_ADDR_VAR 0 14
37725: PUSH
37726: LD_VAR 0 15
37730: PUSH
37731: LD_INT 1
37733: ARRAY
37734: PPUSH
37735: CALL_OW 250
37739: PPUSH
37740: LD_VAR 0 15
37744: PUSH
37745: LD_INT 1
37747: ARRAY
37748: PPUSH
37749: CALL_OW 254
37753: PPUSH
37754: LD_INT 5
37756: PPUSH
37757: CALL_OW 272
37761: PUSH
37762: LD_VAR 0 15
37766: PUSH
37767: LD_INT 1
37769: ARRAY
37770: PPUSH
37771: CALL_OW 251
37775: PPUSH
37776: LD_VAR 0 15
37780: PUSH
37781: LD_INT 1
37783: ARRAY
37784: PPUSH
37785: CALL_OW 254
37789: PPUSH
37790: LD_INT 5
37792: PPUSH
37793: CALL_OW 273
37797: PUSH
37798: EMPTY
37799: LIST
37800: LIST
37801: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
37802: LD_VAR 0 14
37806: PUSH
37807: LD_INT 1
37809: ARRAY
37810: PPUSH
37811: LD_VAR 0 14
37815: PUSH
37816: LD_INT 2
37818: ARRAY
37819: PPUSH
37820: CALL_OW 488
37824: IFFALSE 37855
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
37826: LD_VAR 0 11
37830: PPUSH
37831: LD_VAR 0 14
37835: PUSH
37836: LD_INT 1
37838: ARRAY
37839: PPUSH
37840: LD_VAR 0 14
37844: PUSH
37845: LD_INT 2
37847: ARRAY
37848: PPUSH
37849: CALL_OW 111
// continue ;
37853: GO 37486
// end ; end ; r := GetDir ( tmp ) ;
37855: LD_ADDR_VAR 0 13
37859: PUSH
37860: LD_VAR 0 11
37864: PPUSH
37865: CALL_OW 254
37869: ST_TO_ADDR
// if r = 5 then
37870: LD_VAR 0 13
37874: PUSH
37875: LD_INT 5
37877: EQUAL
37878: IFFALSE 37888
// r := 0 ;
37880: LD_ADDR_VAR 0 13
37884: PUSH
37885: LD_INT 0
37887: ST_TO_ADDR
// for j = r to 5 do
37888: LD_ADDR_VAR 0 8
37892: PUSH
37893: DOUBLE
37894: LD_VAR 0 13
37898: DEC
37899: ST_TO_ADDR
37900: LD_INT 5
37902: PUSH
37903: FOR_TO
37904: IFFALSE 38018
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
37906: LD_ADDR_VAR 0 9
37910: PUSH
37911: LD_VAR 0 11
37915: PPUSH
37916: CALL_OW 250
37920: PPUSH
37921: LD_VAR 0 8
37925: PPUSH
37926: LD_INT 2
37928: PPUSH
37929: CALL_OW 272
37933: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
37934: LD_ADDR_VAR 0 10
37938: PUSH
37939: LD_VAR 0 11
37943: PPUSH
37944: CALL_OW 251
37948: PPUSH
37949: LD_VAR 0 8
37953: PPUSH
37954: LD_INT 2
37956: PPUSH
37957: CALL_OW 273
37961: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
37962: LD_VAR 0 9
37966: PPUSH
37967: LD_VAR 0 10
37971: PPUSH
37972: CALL_OW 488
37976: PUSH
37977: LD_VAR 0 9
37981: PPUSH
37982: LD_VAR 0 10
37986: PPUSH
37987: CALL_OW 428
37991: NOT
37992: AND
37993: IFFALSE 38016
// begin ComMoveXY ( tmp , _x , _y ) ;
37995: LD_VAR 0 11
37999: PPUSH
38000: LD_VAR 0 9
38004: PPUSH
38005: LD_VAR 0 10
38009: PPUSH
38010: CALL_OW 111
// break ;
38014: GO 38018
// end ; end ;
38016: GO 37903
38018: POP
38019: POP
// end ;
38020: GO 37486
38022: POP
38023: POP
// end ;
38024: LD_VAR 0 6
38028: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
38029: LD_INT 0
38031: PPUSH
38032: PPUSH
38033: PPUSH
38034: PPUSH
38035: PPUSH
38036: PPUSH
38037: PPUSH
38038: PPUSH
38039: PPUSH
38040: PPUSH
// result := false ;
38041: LD_ADDR_VAR 0 6
38045: PUSH
38046: LD_INT 0
38048: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
38049: LD_VAR 0 1
38053: NOT
38054: PUSH
38055: LD_VAR 0 1
38059: PPUSH
38060: CALL_OW 266
38064: PUSH
38065: LD_INT 0
38067: PUSH
38068: LD_INT 1
38070: PUSH
38071: EMPTY
38072: LIST
38073: LIST
38074: IN
38075: NOT
38076: OR
38077: PUSH
38078: LD_VAR 0 2
38082: NOT
38083: OR
38084: PUSH
38085: LD_VAR 0 5
38089: PUSH
38090: LD_INT 0
38092: PUSH
38093: LD_INT 1
38095: PUSH
38096: LD_INT 2
38098: PUSH
38099: LD_INT 3
38101: PUSH
38102: LD_INT 4
38104: PUSH
38105: LD_INT 5
38107: PUSH
38108: EMPTY
38109: LIST
38110: LIST
38111: LIST
38112: LIST
38113: LIST
38114: LIST
38115: IN
38116: NOT
38117: OR
38118: PUSH
38119: LD_VAR 0 3
38123: PPUSH
38124: LD_VAR 0 4
38128: PPUSH
38129: CALL_OW 488
38133: NOT
38134: OR
38135: IFFALSE 38139
// exit ;
38137: GO 38856
// pom := GetBase ( depot ) ;
38139: LD_ADDR_VAR 0 10
38143: PUSH
38144: LD_VAR 0 1
38148: PPUSH
38149: CALL_OW 274
38153: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
38154: LD_ADDR_VAR 0 11
38158: PUSH
38159: LD_VAR 0 2
38163: PPUSH
38164: LD_VAR 0 1
38168: PPUSH
38169: CALL_OW 248
38173: PPUSH
38174: CALL_OW 450
38178: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
38179: LD_VAR 0 10
38183: PPUSH
38184: LD_INT 1
38186: PPUSH
38187: CALL_OW 275
38191: PUSH
38192: LD_VAR 0 11
38196: PUSH
38197: LD_INT 1
38199: ARRAY
38200: GREATEREQUAL
38201: PUSH
38202: LD_VAR 0 10
38206: PPUSH
38207: LD_INT 2
38209: PPUSH
38210: CALL_OW 275
38214: PUSH
38215: LD_VAR 0 11
38219: PUSH
38220: LD_INT 2
38222: ARRAY
38223: GREATEREQUAL
38224: AND
38225: PUSH
38226: LD_VAR 0 10
38230: PPUSH
38231: LD_INT 3
38233: PPUSH
38234: CALL_OW 275
38238: PUSH
38239: LD_VAR 0 11
38243: PUSH
38244: LD_INT 3
38246: ARRAY
38247: GREATEREQUAL
38248: AND
38249: NOT
38250: IFFALSE 38254
// exit ;
38252: GO 38856
// if GetBType ( depot ) = b_depot then
38254: LD_VAR 0 1
38258: PPUSH
38259: CALL_OW 266
38263: PUSH
38264: LD_INT 0
38266: EQUAL
38267: IFFALSE 38279
// dist := 28 else
38269: LD_ADDR_VAR 0 14
38273: PUSH
38274: LD_INT 28
38276: ST_TO_ADDR
38277: GO 38287
// dist := 36 ;
38279: LD_ADDR_VAR 0 14
38283: PUSH
38284: LD_INT 36
38286: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
38287: LD_VAR 0 1
38291: PPUSH
38292: LD_VAR 0 3
38296: PPUSH
38297: LD_VAR 0 4
38301: PPUSH
38302: CALL_OW 297
38306: PUSH
38307: LD_VAR 0 14
38311: GREATER
38312: IFFALSE 38316
// exit ;
38314: GO 38856
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
38316: LD_ADDR_VAR 0 12
38320: PUSH
38321: LD_VAR 0 2
38325: PPUSH
38326: LD_VAR 0 3
38330: PPUSH
38331: LD_VAR 0 4
38335: PPUSH
38336: LD_VAR 0 5
38340: PPUSH
38341: LD_VAR 0 1
38345: PPUSH
38346: CALL_OW 248
38350: PPUSH
38351: LD_INT 0
38353: PPUSH
38354: CALL 38861 0 6
38358: ST_TO_ADDR
// if not hexes then
38359: LD_VAR 0 12
38363: NOT
38364: IFFALSE 38368
// exit ;
38366: GO 38856
// hex := GetHexInfo ( x , y ) ;
38368: LD_ADDR_VAR 0 15
38372: PUSH
38373: LD_VAR 0 3
38377: PPUSH
38378: LD_VAR 0 4
38382: PPUSH
38383: CALL_OW 546
38387: ST_TO_ADDR
// if hex [ 1 ] then
38388: LD_VAR 0 15
38392: PUSH
38393: LD_INT 1
38395: ARRAY
38396: IFFALSE 38400
// exit ;
38398: GO 38856
// height := hex [ 2 ] ;
38400: LD_ADDR_VAR 0 13
38404: PUSH
38405: LD_VAR 0 15
38409: PUSH
38410: LD_INT 2
38412: ARRAY
38413: ST_TO_ADDR
// for i = 1 to hexes do
38414: LD_ADDR_VAR 0 7
38418: PUSH
38419: DOUBLE
38420: LD_INT 1
38422: DEC
38423: ST_TO_ADDR
38424: LD_VAR 0 12
38428: PUSH
38429: FOR_TO
38430: IFFALSE 38760
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
38432: LD_VAR 0 12
38436: PUSH
38437: LD_VAR 0 7
38441: ARRAY
38442: PUSH
38443: LD_INT 1
38445: ARRAY
38446: PPUSH
38447: LD_VAR 0 12
38451: PUSH
38452: LD_VAR 0 7
38456: ARRAY
38457: PUSH
38458: LD_INT 2
38460: ARRAY
38461: PPUSH
38462: CALL_OW 488
38466: NOT
38467: PUSH
38468: LD_VAR 0 12
38472: PUSH
38473: LD_VAR 0 7
38477: ARRAY
38478: PUSH
38479: LD_INT 1
38481: ARRAY
38482: PPUSH
38483: LD_VAR 0 12
38487: PUSH
38488: LD_VAR 0 7
38492: ARRAY
38493: PUSH
38494: LD_INT 2
38496: ARRAY
38497: PPUSH
38498: CALL_OW 428
38502: PUSH
38503: LD_INT 0
38505: GREATER
38506: OR
38507: PUSH
38508: LD_VAR 0 12
38512: PUSH
38513: LD_VAR 0 7
38517: ARRAY
38518: PUSH
38519: LD_INT 1
38521: ARRAY
38522: PPUSH
38523: LD_VAR 0 12
38527: PUSH
38528: LD_VAR 0 7
38532: ARRAY
38533: PUSH
38534: LD_INT 2
38536: ARRAY
38537: PPUSH
38538: CALL_OW 351
38542: OR
38543: IFFALSE 38549
// exit ;
38545: POP
38546: POP
38547: GO 38856
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
38549: LD_ADDR_VAR 0 8
38553: PUSH
38554: LD_VAR 0 12
38558: PUSH
38559: LD_VAR 0 7
38563: ARRAY
38564: PUSH
38565: LD_INT 1
38567: ARRAY
38568: PPUSH
38569: LD_VAR 0 12
38573: PUSH
38574: LD_VAR 0 7
38578: ARRAY
38579: PUSH
38580: LD_INT 2
38582: ARRAY
38583: PPUSH
38584: CALL_OW 546
38588: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
38589: LD_VAR 0 8
38593: PUSH
38594: LD_INT 1
38596: ARRAY
38597: PUSH
38598: LD_VAR 0 8
38602: PUSH
38603: LD_INT 2
38605: ARRAY
38606: PUSH
38607: LD_VAR 0 13
38611: PUSH
38612: LD_INT 2
38614: PLUS
38615: GREATER
38616: OR
38617: PUSH
38618: LD_VAR 0 8
38622: PUSH
38623: LD_INT 2
38625: ARRAY
38626: PUSH
38627: LD_VAR 0 13
38631: PUSH
38632: LD_INT 2
38634: MINUS
38635: LESS
38636: OR
38637: PUSH
38638: LD_VAR 0 8
38642: PUSH
38643: LD_INT 3
38645: ARRAY
38646: PUSH
38647: LD_INT 0
38649: PUSH
38650: LD_INT 8
38652: PUSH
38653: LD_INT 9
38655: PUSH
38656: LD_INT 10
38658: PUSH
38659: LD_INT 11
38661: PUSH
38662: LD_INT 12
38664: PUSH
38665: LD_INT 13
38667: PUSH
38668: LD_INT 16
38670: PUSH
38671: LD_INT 17
38673: PUSH
38674: LD_INT 18
38676: PUSH
38677: LD_INT 19
38679: PUSH
38680: LD_INT 20
38682: PUSH
38683: LD_INT 21
38685: PUSH
38686: EMPTY
38687: LIST
38688: LIST
38689: LIST
38690: LIST
38691: LIST
38692: LIST
38693: LIST
38694: LIST
38695: LIST
38696: LIST
38697: LIST
38698: LIST
38699: LIST
38700: IN
38701: NOT
38702: OR
38703: PUSH
38704: LD_VAR 0 8
38708: PUSH
38709: LD_INT 5
38711: ARRAY
38712: NOT
38713: OR
38714: PUSH
38715: LD_VAR 0 8
38719: PUSH
38720: LD_INT 6
38722: ARRAY
38723: PUSH
38724: LD_INT 1
38726: PUSH
38727: LD_INT 2
38729: PUSH
38730: LD_INT 7
38732: PUSH
38733: LD_INT 9
38735: PUSH
38736: LD_INT 10
38738: PUSH
38739: LD_INT 11
38741: PUSH
38742: EMPTY
38743: LIST
38744: LIST
38745: LIST
38746: LIST
38747: LIST
38748: LIST
38749: IN
38750: NOT
38751: OR
38752: IFFALSE 38758
// exit ;
38754: POP
38755: POP
38756: GO 38856
// end ;
38758: GO 38429
38760: POP
38761: POP
// side := GetSide ( depot ) ;
38762: LD_ADDR_VAR 0 9
38766: PUSH
38767: LD_VAR 0 1
38771: PPUSH
38772: CALL_OW 255
38776: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
38777: LD_VAR 0 9
38781: PPUSH
38782: LD_VAR 0 3
38786: PPUSH
38787: LD_VAR 0 4
38791: PPUSH
38792: LD_INT 20
38794: PPUSH
38795: CALL 31510 0 4
38799: PUSH
38800: LD_INT 4
38802: ARRAY
38803: IFFALSE 38807
// exit ;
38805: GO 38856
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
38807: LD_VAR 0 2
38811: PUSH
38812: LD_INT 29
38814: PUSH
38815: LD_INT 30
38817: PUSH
38818: EMPTY
38819: LIST
38820: LIST
38821: IN
38822: PUSH
38823: LD_VAR 0 3
38827: PPUSH
38828: LD_VAR 0 4
38832: PPUSH
38833: LD_VAR 0 9
38837: PPUSH
38838: CALL_OW 440
38842: NOT
38843: AND
38844: IFFALSE 38848
// exit ;
38846: GO 38856
// result := true ;
38848: LD_ADDR_VAR 0 6
38852: PUSH
38853: LD_INT 1
38855: ST_TO_ADDR
// end ;
38856: LD_VAR 0 6
38860: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
38861: LD_INT 0
38863: PPUSH
38864: PPUSH
38865: PPUSH
38866: PPUSH
38867: PPUSH
38868: PPUSH
38869: PPUSH
38870: PPUSH
38871: PPUSH
38872: PPUSH
38873: PPUSH
38874: PPUSH
38875: PPUSH
38876: PPUSH
38877: PPUSH
38878: PPUSH
38879: PPUSH
38880: PPUSH
38881: PPUSH
38882: PPUSH
38883: PPUSH
38884: PPUSH
38885: PPUSH
38886: PPUSH
38887: PPUSH
38888: PPUSH
38889: PPUSH
38890: PPUSH
38891: PPUSH
38892: PPUSH
38893: PPUSH
38894: PPUSH
38895: PPUSH
38896: PPUSH
38897: PPUSH
38898: PPUSH
38899: PPUSH
38900: PPUSH
38901: PPUSH
38902: PPUSH
38903: PPUSH
38904: PPUSH
38905: PPUSH
38906: PPUSH
38907: PPUSH
38908: PPUSH
38909: PPUSH
38910: PPUSH
38911: PPUSH
38912: PPUSH
38913: PPUSH
38914: PPUSH
38915: PPUSH
38916: PPUSH
38917: PPUSH
38918: PPUSH
38919: PPUSH
38920: PPUSH
// result = [ ] ;
38921: LD_ADDR_VAR 0 7
38925: PUSH
38926: EMPTY
38927: ST_TO_ADDR
// temp_list = [ ] ;
38928: LD_ADDR_VAR 0 9
38932: PUSH
38933: EMPTY
38934: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
38935: LD_VAR 0 4
38939: PUSH
38940: LD_INT 0
38942: PUSH
38943: LD_INT 1
38945: PUSH
38946: LD_INT 2
38948: PUSH
38949: LD_INT 3
38951: PUSH
38952: LD_INT 4
38954: PUSH
38955: LD_INT 5
38957: PUSH
38958: EMPTY
38959: LIST
38960: LIST
38961: LIST
38962: LIST
38963: LIST
38964: LIST
38965: IN
38966: NOT
38967: PUSH
38968: LD_VAR 0 1
38972: PUSH
38973: LD_INT 0
38975: PUSH
38976: LD_INT 1
38978: PUSH
38979: EMPTY
38980: LIST
38981: LIST
38982: IN
38983: PUSH
38984: LD_VAR 0 5
38988: PUSH
38989: LD_INT 1
38991: PUSH
38992: LD_INT 2
38994: PUSH
38995: LD_INT 3
38997: PUSH
38998: EMPTY
38999: LIST
39000: LIST
39001: LIST
39002: IN
39003: NOT
39004: AND
39005: OR
39006: IFFALSE 39010
// exit ;
39008: GO 57401
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
39010: LD_VAR 0 1
39014: PUSH
39015: LD_INT 6
39017: PUSH
39018: LD_INT 7
39020: PUSH
39021: LD_INT 8
39023: PUSH
39024: LD_INT 13
39026: PUSH
39027: LD_INT 12
39029: PUSH
39030: LD_INT 15
39032: PUSH
39033: LD_INT 11
39035: PUSH
39036: LD_INT 14
39038: PUSH
39039: LD_INT 10
39041: PUSH
39042: EMPTY
39043: LIST
39044: LIST
39045: LIST
39046: LIST
39047: LIST
39048: LIST
39049: LIST
39050: LIST
39051: LIST
39052: IN
39053: IFFALSE 39063
// btype = b_lab ;
39055: LD_ADDR_VAR 0 1
39059: PUSH
39060: LD_INT 6
39062: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
39063: LD_VAR 0 6
39067: PUSH
39068: LD_INT 0
39070: PUSH
39071: LD_INT 1
39073: PUSH
39074: LD_INT 2
39076: PUSH
39077: EMPTY
39078: LIST
39079: LIST
39080: LIST
39081: IN
39082: NOT
39083: PUSH
39084: LD_VAR 0 1
39088: PUSH
39089: LD_INT 0
39091: PUSH
39092: LD_INT 1
39094: PUSH
39095: LD_INT 2
39097: PUSH
39098: LD_INT 3
39100: PUSH
39101: LD_INT 6
39103: PUSH
39104: LD_INT 36
39106: PUSH
39107: LD_INT 4
39109: PUSH
39110: LD_INT 5
39112: PUSH
39113: LD_INT 31
39115: PUSH
39116: LD_INT 32
39118: PUSH
39119: LD_INT 33
39121: PUSH
39122: EMPTY
39123: LIST
39124: LIST
39125: LIST
39126: LIST
39127: LIST
39128: LIST
39129: LIST
39130: LIST
39131: LIST
39132: LIST
39133: LIST
39134: IN
39135: NOT
39136: PUSH
39137: LD_VAR 0 6
39141: PUSH
39142: LD_INT 1
39144: EQUAL
39145: AND
39146: OR
39147: PUSH
39148: LD_VAR 0 1
39152: PUSH
39153: LD_INT 2
39155: PUSH
39156: LD_INT 3
39158: PUSH
39159: EMPTY
39160: LIST
39161: LIST
39162: IN
39163: NOT
39164: PUSH
39165: LD_VAR 0 6
39169: PUSH
39170: LD_INT 2
39172: EQUAL
39173: AND
39174: OR
39175: IFFALSE 39185
// mode = 0 ;
39177: LD_ADDR_VAR 0 6
39181: PUSH
39182: LD_INT 0
39184: ST_TO_ADDR
// case mode of 0 :
39185: LD_VAR 0 6
39189: PUSH
39190: LD_INT 0
39192: DOUBLE
39193: EQUAL
39194: IFTRUE 39198
39196: GO 50651
39198: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
39199: LD_ADDR_VAR 0 11
39203: PUSH
39204: LD_INT 0
39206: PUSH
39207: LD_INT 0
39209: PUSH
39210: EMPTY
39211: LIST
39212: LIST
39213: PUSH
39214: LD_INT 0
39216: PUSH
39217: LD_INT 1
39219: NEG
39220: PUSH
39221: EMPTY
39222: LIST
39223: LIST
39224: PUSH
39225: LD_INT 1
39227: PUSH
39228: LD_INT 0
39230: PUSH
39231: EMPTY
39232: LIST
39233: LIST
39234: PUSH
39235: LD_INT 1
39237: PUSH
39238: LD_INT 1
39240: PUSH
39241: EMPTY
39242: LIST
39243: LIST
39244: PUSH
39245: LD_INT 0
39247: PUSH
39248: LD_INT 1
39250: PUSH
39251: EMPTY
39252: LIST
39253: LIST
39254: PUSH
39255: LD_INT 1
39257: NEG
39258: PUSH
39259: LD_INT 0
39261: PUSH
39262: EMPTY
39263: LIST
39264: LIST
39265: PUSH
39266: LD_INT 1
39268: NEG
39269: PUSH
39270: LD_INT 1
39272: NEG
39273: PUSH
39274: EMPTY
39275: LIST
39276: LIST
39277: PUSH
39278: LD_INT 1
39280: NEG
39281: PUSH
39282: LD_INT 2
39284: NEG
39285: PUSH
39286: EMPTY
39287: LIST
39288: LIST
39289: PUSH
39290: LD_INT 0
39292: PUSH
39293: LD_INT 2
39295: NEG
39296: PUSH
39297: EMPTY
39298: LIST
39299: LIST
39300: PUSH
39301: LD_INT 1
39303: PUSH
39304: LD_INT 1
39306: NEG
39307: PUSH
39308: EMPTY
39309: LIST
39310: LIST
39311: PUSH
39312: LD_INT 1
39314: PUSH
39315: LD_INT 2
39317: PUSH
39318: EMPTY
39319: LIST
39320: LIST
39321: PUSH
39322: LD_INT 0
39324: PUSH
39325: LD_INT 2
39327: PUSH
39328: EMPTY
39329: LIST
39330: LIST
39331: PUSH
39332: LD_INT 1
39334: NEG
39335: PUSH
39336: LD_INT 1
39338: PUSH
39339: EMPTY
39340: LIST
39341: LIST
39342: PUSH
39343: LD_INT 1
39345: PUSH
39346: LD_INT 3
39348: PUSH
39349: EMPTY
39350: LIST
39351: LIST
39352: PUSH
39353: LD_INT 0
39355: PUSH
39356: LD_INT 3
39358: PUSH
39359: EMPTY
39360: LIST
39361: LIST
39362: PUSH
39363: LD_INT 1
39365: NEG
39366: PUSH
39367: LD_INT 2
39369: PUSH
39370: EMPTY
39371: LIST
39372: LIST
39373: PUSH
39374: EMPTY
39375: LIST
39376: LIST
39377: LIST
39378: LIST
39379: LIST
39380: LIST
39381: LIST
39382: LIST
39383: LIST
39384: LIST
39385: LIST
39386: LIST
39387: LIST
39388: LIST
39389: LIST
39390: LIST
39391: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39392: LD_ADDR_VAR 0 12
39396: PUSH
39397: LD_INT 0
39399: PUSH
39400: LD_INT 0
39402: PUSH
39403: EMPTY
39404: LIST
39405: LIST
39406: PUSH
39407: LD_INT 0
39409: PUSH
39410: LD_INT 1
39412: NEG
39413: PUSH
39414: EMPTY
39415: LIST
39416: LIST
39417: PUSH
39418: LD_INT 1
39420: PUSH
39421: LD_INT 0
39423: PUSH
39424: EMPTY
39425: LIST
39426: LIST
39427: PUSH
39428: LD_INT 1
39430: PUSH
39431: LD_INT 1
39433: PUSH
39434: EMPTY
39435: LIST
39436: LIST
39437: PUSH
39438: LD_INT 0
39440: PUSH
39441: LD_INT 1
39443: PUSH
39444: EMPTY
39445: LIST
39446: LIST
39447: PUSH
39448: LD_INT 1
39450: NEG
39451: PUSH
39452: LD_INT 0
39454: PUSH
39455: EMPTY
39456: LIST
39457: LIST
39458: PUSH
39459: LD_INT 1
39461: NEG
39462: PUSH
39463: LD_INT 1
39465: NEG
39466: PUSH
39467: EMPTY
39468: LIST
39469: LIST
39470: PUSH
39471: LD_INT 1
39473: PUSH
39474: LD_INT 1
39476: NEG
39477: PUSH
39478: EMPTY
39479: LIST
39480: LIST
39481: PUSH
39482: LD_INT 2
39484: PUSH
39485: LD_INT 0
39487: PUSH
39488: EMPTY
39489: LIST
39490: LIST
39491: PUSH
39492: LD_INT 2
39494: PUSH
39495: LD_INT 1
39497: PUSH
39498: EMPTY
39499: LIST
39500: LIST
39501: PUSH
39502: LD_INT 1
39504: NEG
39505: PUSH
39506: LD_INT 1
39508: PUSH
39509: EMPTY
39510: LIST
39511: LIST
39512: PUSH
39513: LD_INT 2
39515: NEG
39516: PUSH
39517: LD_INT 0
39519: PUSH
39520: EMPTY
39521: LIST
39522: LIST
39523: PUSH
39524: LD_INT 2
39526: NEG
39527: PUSH
39528: LD_INT 1
39530: NEG
39531: PUSH
39532: EMPTY
39533: LIST
39534: LIST
39535: PUSH
39536: LD_INT 2
39538: NEG
39539: PUSH
39540: LD_INT 1
39542: PUSH
39543: EMPTY
39544: LIST
39545: LIST
39546: PUSH
39547: LD_INT 3
39549: NEG
39550: PUSH
39551: LD_INT 0
39553: PUSH
39554: EMPTY
39555: LIST
39556: LIST
39557: PUSH
39558: LD_INT 3
39560: NEG
39561: PUSH
39562: LD_INT 1
39564: NEG
39565: PUSH
39566: EMPTY
39567: LIST
39568: LIST
39569: PUSH
39570: EMPTY
39571: LIST
39572: LIST
39573: LIST
39574: LIST
39575: LIST
39576: LIST
39577: LIST
39578: LIST
39579: LIST
39580: LIST
39581: LIST
39582: LIST
39583: LIST
39584: LIST
39585: LIST
39586: LIST
39587: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39588: LD_ADDR_VAR 0 13
39592: PUSH
39593: LD_INT 0
39595: PUSH
39596: LD_INT 0
39598: PUSH
39599: EMPTY
39600: LIST
39601: LIST
39602: PUSH
39603: LD_INT 0
39605: PUSH
39606: LD_INT 1
39608: NEG
39609: PUSH
39610: EMPTY
39611: LIST
39612: LIST
39613: PUSH
39614: LD_INT 1
39616: PUSH
39617: LD_INT 0
39619: PUSH
39620: EMPTY
39621: LIST
39622: LIST
39623: PUSH
39624: LD_INT 1
39626: PUSH
39627: LD_INT 1
39629: PUSH
39630: EMPTY
39631: LIST
39632: LIST
39633: PUSH
39634: LD_INT 0
39636: PUSH
39637: LD_INT 1
39639: PUSH
39640: EMPTY
39641: LIST
39642: LIST
39643: PUSH
39644: LD_INT 1
39646: NEG
39647: PUSH
39648: LD_INT 0
39650: PUSH
39651: EMPTY
39652: LIST
39653: LIST
39654: PUSH
39655: LD_INT 1
39657: NEG
39658: PUSH
39659: LD_INT 1
39661: NEG
39662: PUSH
39663: EMPTY
39664: LIST
39665: LIST
39666: PUSH
39667: LD_INT 1
39669: NEG
39670: PUSH
39671: LD_INT 2
39673: NEG
39674: PUSH
39675: EMPTY
39676: LIST
39677: LIST
39678: PUSH
39679: LD_INT 2
39681: PUSH
39682: LD_INT 1
39684: PUSH
39685: EMPTY
39686: LIST
39687: LIST
39688: PUSH
39689: LD_INT 2
39691: PUSH
39692: LD_INT 2
39694: PUSH
39695: EMPTY
39696: LIST
39697: LIST
39698: PUSH
39699: LD_INT 1
39701: PUSH
39702: LD_INT 2
39704: PUSH
39705: EMPTY
39706: LIST
39707: LIST
39708: PUSH
39709: LD_INT 2
39711: NEG
39712: PUSH
39713: LD_INT 1
39715: NEG
39716: PUSH
39717: EMPTY
39718: LIST
39719: LIST
39720: PUSH
39721: LD_INT 2
39723: NEG
39724: PUSH
39725: LD_INT 2
39727: NEG
39728: PUSH
39729: EMPTY
39730: LIST
39731: LIST
39732: PUSH
39733: LD_INT 2
39735: NEG
39736: PUSH
39737: LD_INT 3
39739: NEG
39740: PUSH
39741: EMPTY
39742: LIST
39743: LIST
39744: PUSH
39745: LD_INT 3
39747: NEG
39748: PUSH
39749: LD_INT 2
39751: NEG
39752: PUSH
39753: EMPTY
39754: LIST
39755: LIST
39756: PUSH
39757: LD_INT 3
39759: NEG
39760: PUSH
39761: LD_INT 3
39763: NEG
39764: PUSH
39765: EMPTY
39766: LIST
39767: LIST
39768: PUSH
39769: EMPTY
39770: LIST
39771: LIST
39772: LIST
39773: LIST
39774: LIST
39775: LIST
39776: LIST
39777: LIST
39778: LIST
39779: LIST
39780: LIST
39781: LIST
39782: LIST
39783: LIST
39784: LIST
39785: LIST
39786: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
39787: LD_ADDR_VAR 0 14
39791: PUSH
39792: LD_INT 0
39794: PUSH
39795: LD_INT 0
39797: PUSH
39798: EMPTY
39799: LIST
39800: LIST
39801: PUSH
39802: LD_INT 0
39804: PUSH
39805: LD_INT 1
39807: NEG
39808: PUSH
39809: EMPTY
39810: LIST
39811: LIST
39812: PUSH
39813: LD_INT 1
39815: PUSH
39816: LD_INT 0
39818: PUSH
39819: EMPTY
39820: LIST
39821: LIST
39822: PUSH
39823: LD_INT 1
39825: PUSH
39826: LD_INT 1
39828: PUSH
39829: EMPTY
39830: LIST
39831: LIST
39832: PUSH
39833: LD_INT 0
39835: PUSH
39836: LD_INT 1
39838: PUSH
39839: EMPTY
39840: LIST
39841: LIST
39842: PUSH
39843: LD_INT 1
39845: NEG
39846: PUSH
39847: LD_INT 0
39849: PUSH
39850: EMPTY
39851: LIST
39852: LIST
39853: PUSH
39854: LD_INT 1
39856: NEG
39857: PUSH
39858: LD_INT 1
39860: NEG
39861: PUSH
39862: EMPTY
39863: LIST
39864: LIST
39865: PUSH
39866: LD_INT 1
39868: NEG
39869: PUSH
39870: LD_INT 2
39872: NEG
39873: PUSH
39874: EMPTY
39875: LIST
39876: LIST
39877: PUSH
39878: LD_INT 0
39880: PUSH
39881: LD_INT 2
39883: NEG
39884: PUSH
39885: EMPTY
39886: LIST
39887: LIST
39888: PUSH
39889: LD_INT 1
39891: PUSH
39892: LD_INT 1
39894: NEG
39895: PUSH
39896: EMPTY
39897: LIST
39898: LIST
39899: PUSH
39900: LD_INT 1
39902: PUSH
39903: LD_INT 2
39905: PUSH
39906: EMPTY
39907: LIST
39908: LIST
39909: PUSH
39910: LD_INT 0
39912: PUSH
39913: LD_INT 2
39915: PUSH
39916: EMPTY
39917: LIST
39918: LIST
39919: PUSH
39920: LD_INT 1
39922: NEG
39923: PUSH
39924: LD_INT 1
39926: PUSH
39927: EMPTY
39928: LIST
39929: LIST
39930: PUSH
39931: LD_INT 1
39933: NEG
39934: PUSH
39935: LD_INT 3
39937: NEG
39938: PUSH
39939: EMPTY
39940: LIST
39941: LIST
39942: PUSH
39943: LD_INT 0
39945: PUSH
39946: LD_INT 3
39948: NEG
39949: PUSH
39950: EMPTY
39951: LIST
39952: LIST
39953: PUSH
39954: LD_INT 1
39956: PUSH
39957: LD_INT 2
39959: NEG
39960: PUSH
39961: EMPTY
39962: LIST
39963: LIST
39964: PUSH
39965: EMPTY
39966: LIST
39967: LIST
39968: LIST
39969: LIST
39970: LIST
39971: LIST
39972: LIST
39973: LIST
39974: LIST
39975: LIST
39976: LIST
39977: LIST
39978: LIST
39979: LIST
39980: LIST
39981: LIST
39982: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
39983: LD_ADDR_VAR 0 15
39987: PUSH
39988: LD_INT 0
39990: PUSH
39991: LD_INT 0
39993: PUSH
39994: EMPTY
39995: LIST
39996: LIST
39997: PUSH
39998: LD_INT 0
40000: PUSH
40001: LD_INT 1
40003: NEG
40004: PUSH
40005: EMPTY
40006: LIST
40007: LIST
40008: PUSH
40009: LD_INT 1
40011: PUSH
40012: LD_INT 0
40014: PUSH
40015: EMPTY
40016: LIST
40017: LIST
40018: PUSH
40019: LD_INT 1
40021: PUSH
40022: LD_INT 1
40024: PUSH
40025: EMPTY
40026: LIST
40027: LIST
40028: PUSH
40029: LD_INT 0
40031: PUSH
40032: LD_INT 1
40034: PUSH
40035: EMPTY
40036: LIST
40037: LIST
40038: PUSH
40039: LD_INT 1
40041: NEG
40042: PUSH
40043: LD_INT 0
40045: PUSH
40046: EMPTY
40047: LIST
40048: LIST
40049: PUSH
40050: LD_INT 1
40052: NEG
40053: PUSH
40054: LD_INT 1
40056: NEG
40057: PUSH
40058: EMPTY
40059: LIST
40060: LIST
40061: PUSH
40062: LD_INT 1
40064: PUSH
40065: LD_INT 1
40067: NEG
40068: PUSH
40069: EMPTY
40070: LIST
40071: LIST
40072: PUSH
40073: LD_INT 2
40075: PUSH
40076: LD_INT 0
40078: PUSH
40079: EMPTY
40080: LIST
40081: LIST
40082: PUSH
40083: LD_INT 2
40085: PUSH
40086: LD_INT 1
40088: PUSH
40089: EMPTY
40090: LIST
40091: LIST
40092: PUSH
40093: LD_INT 1
40095: NEG
40096: PUSH
40097: LD_INT 1
40099: PUSH
40100: EMPTY
40101: LIST
40102: LIST
40103: PUSH
40104: LD_INT 2
40106: NEG
40107: PUSH
40108: LD_INT 0
40110: PUSH
40111: EMPTY
40112: LIST
40113: LIST
40114: PUSH
40115: LD_INT 2
40117: NEG
40118: PUSH
40119: LD_INT 1
40121: NEG
40122: PUSH
40123: EMPTY
40124: LIST
40125: LIST
40126: PUSH
40127: LD_INT 2
40129: PUSH
40130: LD_INT 1
40132: NEG
40133: PUSH
40134: EMPTY
40135: LIST
40136: LIST
40137: PUSH
40138: LD_INT 3
40140: PUSH
40141: LD_INT 0
40143: PUSH
40144: EMPTY
40145: LIST
40146: LIST
40147: PUSH
40148: LD_INT 3
40150: PUSH
40151: LD_INT 1
40153: PUSH
40154: EMPTY
40155: LIST
40156: LIST
40157: PUSH
40158: EMPTY
40159: LIST
40160: LIST
40161: LIST
40162: LIST
40163: LIST
40164: LIST
40165: LIST
40166: LIST
40167: LIST
40168: LIST
40169: LIST
40170: LIST
40171: LIST
40172: LIST
40173: LIST
40174: LIST
40175: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
40176: LD_ADDR_VAR 0 16
40180: PUSH
40181: LD_INT 0
40183: PUSH
40184: LD_INT 0
40186: PUSH
40187: EMPTY
40188: LIST
40189: LIST
40190: PUSH
40191: LD_INT 0
40193: PUSH
40194: LD_INT 1
40196: NEG
40197: PUSH
40198: EMPTY
40199: LIST
40200: LIST
40201: PUSH
40202: LD_INT 1
40204: PUSH
40205: LD_INT 0
40207: PUSH
40208: EMPTY
40209: LIST
40210: LIST
40211: PUSH
40212: LD_INT 1
40214: PUSH
40215: LD_INT 1
40217: PUSH
40218: EMPTY
40219: LIST
40220: LIST
40221: PUSH
40222: LD_INT 0
40224: PUSH
40225: LD_INT 1
40227: PUSH
40228: EMPTY
40229: LIST
40230: LIST
40231: PUSH
40232: LD_INT 1
40234: NEG
40235: PUSH
40236: LD_INT 0
40238: PUSH
40239: EMPTY
40240: LIST
40241: LIST
40242: PUSH
40243: LD_INT 1
40245: NEG
40246: PUSH
40247: LD_INT 1
40249: NEG
40250: PUSH
40251: EMPTY
40252: LIST
40253: LIST
40254: PUSH
40255: LD_INT 1
40257: NEG
40258: PUSH
40259: LD_INT 2
40261: NEG
40262: PUSH
40263: EMPTY
40264: LIST
40265: LIST
40266: PUSH
40267: LD_INT 2
40269: PUSH
40270: LD_INT 1
40272: PUSH
40273: EMPTY
40274: LIST
40275: LIST
40276: PUSH
40277: LD_INT 2
40279: PUSH
40280: LD_INT 2
40282: PUSH
40283: EMPTY
40284: LIST
40285: LIST
40286: PUSH
40287: LD_INT 1
40289: PUSH
40290: LD_INT 2
40292: PUSH
40293: EMPTY
40294: LIST
40295: LIST
40296: PUSH
40297: LD_INT 2
40299: NEG
40300: PUSH
40301: LD_INT 1
40303: NEG
40304: PUSH
40305: EMPTY
40306: LIST
40307: LIST
40308: PUSH
40309: LD_INT 2
40311: NEG
40312: PUSH
40313: LD_INT 2
40315: NEG
40316: PUSH
40317: EMPTY
40318: LIST
40319: LIST
40320: PUSH
40321: LD_INT 3
40323: PUSH
40324: LD_INT 2
40326: PUSH
40327: EMPTY
40328: LIST
40329: LIST
40330: PUSH
40331: LD_INT 3
40333: PUSH
40334: LD_INT 3
40336: PUSH
40337: EMPTY
40338: LIST
40339: LIST
40340: PUSH
40341: LD_INT 2
40343: PUSH
40344: LD_INT 3
40346: PUSH
40347: EMPTY
40348: LIST
40349: LIST
40350: PUSH
40351: EMPTY
40352: LIST
40353: LIST
40354: LIST
40355: LIST
40356: LIST
40357: LIST
40358: LIST
40359: LIST
40360: LIST
40361: LIST
40362: LIST
40363: LIST
40364: LIST
40365: LIST
40366: LIST
40367: LIST
40368: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40369: LD_ADDR_VAR 0 17
40373: PUSH
40374: LD_INT 0
40376: PUSH
40377: LD_INT 0
40379: PUSH
40380: EMPTY
40381: LIST
40382: LIST
40383: PUSH
40384: LD_INT 0
40386: PUSH
40387: LD_INT 1
40389: NEG
40390: PUSH
40391: EMPTY
40392: LIST
40393: LIST
40394: PUSH
40395: LD_INT 1
40397: PUSH
40398: LD_INT 0
40400: PUSH
40401: EMPTY
40402: LIST
40403: LIST
40404: PUSH
40405: LD_INT 1
40407: PUSH
40408: LD_INT 1
40410: PUSH
40411: EMPTY
40412: LIST
40413: LIST
40414: PUSH
40415: LD_INT 0
40417: PUSH
40418: LD_INT 1
40420: PUSH
40421: EMPTY
40422: LIST
40423: LIST
40424: PUSH
40425: LD_INT 1
40427: NEG
40428: PUSH
40429: LD_INT 0
40431: PUSH
40432: EMPTY
40433: LIST
40434: LIST
40435: PUSH
40436: LD_INT 1
40438: NEG
40439: PUSH
40440: LD_INT 1
40442: NEG
40443: PUSH
40444: EMPTY
40445: LIST
40446: LIST
40447: PUSH
40448: LD_INT 1
40450: NEG
40451: PUSH
40452: LD_INT 2
40454: NEG
40455: PUSH
40456: EMPTY
40457: LIST
40458: LIST
40459: PUSH
40460: LD_INT 0
40462: PUSH
40463: LD_INT 2
40465: NEG
40466: PUSH
40467: EMPTY
40468: LIST
40469: LIST
40470: PUSH
40471: LD_INT 1
40473: PUSH
40474: LD_INT 1
40476: NEG
40477: PUSH
40478: EMPTY
40479: LIST
40480: LIST
40481: PUSH
40482: LD_INT 2
40484: PUSH
40485: LD_INT 0
40487: PUSH
40488: EMPTY
40489: LIST
40490: LIST
40491: PUSH
40492: LD_INT 2
40494: PUSH
40495: LD_INT 1
40497: PUSH
40498: EMPTY
40499: LIST
40500: LIST
40501: PUSH
40502: LD_INT 2
40504: PUSH
40505: LD_INT 2
40507: PUSH
40508: EMPTY
40509: LIST
40510: LIST
40511: PUSH
40512: LD_INT 1
40514: PUSH
40515: LD_INT 2
40517: PUSH
40518: EMPTY
40519: LIST
40520: LIST
40521: PUSH
40522: LD_INT 0
40524: PUSH
40525: LD_INT 2
40527: PUSH
40528: EMPTY
40529: LIST
40530: LIST
40531: PUSH
40532: LD_INT 1
40534: NEG
40535: PUSH
40536: LD_INT 1
40538: PUSH
40539: EMPTY
40540: LIST
40541: LIST
40542: PUSH
40543: LD_INT 2
40545: NEG
40546: PUSH
40547: LD_INT 0
40549: PUSH
40550: EMPTY
40551: LIST
40552: LIST
40553: PUSH
40554: LD_INT 2
40556: NEG
40557: PUSH
40558: LD_INT 1
40560: NEG
40561: PUSH
40562: EMPTY
40563: LIST
40564: LIST
40565: PUSH
40566: LD_INT 2
40568: NEG
40569: PUSH
40570: LD_INT 2
40572: NEG
40573: PUSH
40574: EMPTY
40575: LIST
40576: LIST
40577: PUSH
40578: EMPTY
40579: LIST
40580: LIST
40581: LIST
40582: LIST
40583: LIST
40584: LIST
40585: LIST
40586: LIST
40587: LIST
40588: LIST
40589: LIST
40590: LIST
40591: LIST
40592: LIST
40593: LIST
40594: LIST
40595: LIST
40596: LIST
40597: LIST
40598: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40599: LD_ADDR_VAR 0 18
40603: PUSH
40604: LD_INT 0
40606: PUSH
40607: LD_INT 0
40609: PUSH
40610: EMPTY
40611: LIST
40612: LIST
40613: PUSH
40614: LD_INT 0
40616: PUSH
40617: LD_INT 1
40619: NEG
40620: PUSH
40621: EMPTY
40622: LIST
40623: LIST
40624: PUSH
40625: LD_INT 1
40627: PUSH
40628: LD_INT 0
40630: PUSH
40631: EMPTY
40632: LIST
40633: LIST
40634: PUSH
40635: LD_INT 1
40637: PUSH
40638: LD_INT 1
40640: PUSH
40641: EMPTY
40642: LIST
40643: LIST
40644: PUSH
40645: LD_INT 0
40647: PUSH
40648: LD_INT 1
40650: PUSH
40651: EMPTY
40652: LIST
40653: LIST
40654: PUSH
40655: LD_INT 1
40657: NEG
40658: PUSH
40659: LD_INT 0
40661: PUSH
40662: EMPTY
40663: LIST
40664: LIST
40665: PUSH
40666: LD_INT 1
40668: NEG
40669: PUSH
40670: LD_INT 1
40672: NEG
40673: PUSH
40674: EMPTY
40675: LIST
40676: LIST
40677: PUSH
40678: LD_INT 1
40680: NEG
40681: PUSH
40682: LD_INT 2
40684: NEG
40685: PUSH
40686: EMPTY
40687: LIST
40688: LIST
40689: PUSH
40690: LD_INT 0
40692: PUSH
40693: LD_INT 2
40695: NEG
40696: PUSH
40697: EMPTY
40698: LIST
40699: LIST
40700: PUSH
40701: LD_INT 1
40703: PUSH
40704: LD_INT 1
40706: NEG
40707: PUSH
40708: EMPTY
40709: LIST
40710: LIST
40711: PUSH
40712: LD_INT 2
40714: PUSH
40715: LD_INT 0
40717: PUSH
40718: EMPTY
40719: LIST
40720: LIST
40721: PUSH
40722: LD_INT 2
40724: PUSH
40725: LD_INT 1
40727: PUSH
40728: EMPTY
40729: LIST
40730: LIST
40731: PUSH
40732: LD_INT 2
40734: PUSH
40735: LD_INT 2
40737: PUSH
40738: EMPTY
40739: LIST
40740: LIST
40741: PUSH
40742: LD_INT 1
40744: PUSH
40745: LD_INT 2
40747: PUSH
40748: EMPTY
40749: LIST
40750: LIST
40751: PUSH
40752: LD_INT 0
40754: PUSH
40755: LD_INT 2
40757: PUSH
40758: EMPTY
40759: LIST
40760: LIST
40761: PUSH
40762: LD_INT 1
40764: NEG
40765: PUSH
40766: LD_INT 1
40768: PUSH
40769: EMPTY
40770: LIST
40771: LIST
40772: PUSH
40773: LD_INT 2
40775: NEG
40776: PUSH
40777: LD_INT 0
40779: PUSH
40780: EMPTY
40781: LIST
40782: LIST
40783: PUSH
40784: LD_INT 2
40786: NEG
40787: PUSH
40788: LD_INT 1
40790: NEG
40791: PUSH
40792: EMPTY
40793: LIST
40794: LIST
40795: PUSH
40796: LD_INT 2
40798: NEG
40799: PUSH
40800: LD_INT 2
40802: NEG
40803: PUSH
40804: EMPTY
40805: LIST
40806: LIST
40807: PUSH
40808: EMPTY
40809: LIST
40810: LIST
40811: LIST
40812: LIST
40813: LIST
40814: LIST
40815: LIST
40816: LIST
40817: LIST
40818: LIST
40819: LIST
40820: LIST
40821: LIST
40822: LIST
40823: LIST
40824: LIST
40825: LIST
40826: LIST
40827: LIST
40828: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40829: LD_ADDR_VAR 0 19
40833: PUSH
40834: LD_INT 0
40836: PUSH
40837: LD_INT 0
40839: PUSH
40840: EMPTY
40841: LIST
40842: LIST
40843: PUSH
40844: LD_INT 0
40846: PUSH
40847: LD_INT 1
40849: NEG
40850: PUSH
40851: EMPTY
40852: LIST
40853: LIST
40854: PUSH
40855: LD_INT 1
40857: PUSH
40858: LD_INT 0
40860: PUSH
40861: EMPTY
40862: LIST
40863: LIST
40864: PUSH
40865: LD_INT 1
40867: PUSH
40868: LD_INT 1
40870: PUSH
40871: EMPTY
40872: LIST
40873: LIST
40874: PUSH
40875: LD_INT 0
40877: PUSH
40878: LD_INT 1
40880: PUSH
40881: EMPTY
40882: LIST
40883: LIST
40884: PUSH
40885: LD_INT 1
40887: NEG
40888: PUSH
40889: LD_INT 0
40891: PUSH
40892: EMPTY
40893: LIST
40894: LIST
40895: PUSH
40896: LD_INT 1
40898: NEG
40899: PUSH
40900: LD_INT 1
40902: NEG
40903: PUSH
40904: EMPTY
40905: LIST
40906: LIST
40907: PUSH
40908: LD_INT 1
40910: NEG
40911: PUSH
40912: LD_INT 2
40914: NEG
40915: PUSH
40916: EMPTY
40917: LIST
40918: LIST
40919: PUSH
40920: LD_INT 0
40922: PUSH
40923: LD_INT 2
40925: NEG
40926: PUSH
40927: EMPTY
40928: LIST
40929: LIST
40930: PUSH
40931: LD_INT 1
40933: PUSH
40934: LD_INT 1
40936: NEG
40937: PUSH
40938: EMPTY
40939: LIST
40940: LIST
40941: PUSH
40942: LD_INT 2
40944: PUSH
40945: LD_INT 0
40947: PUSH
40948: EMPTY
40949: LIST
40950: LIST
40951: PUSH
40952: LD_INT 2
40954: PUSH
40955: LD_INT 1
40957: PUSH
40958: EMPTY
40959: LIST
40960: LIST
40961: PUSH
40962: LD_INT 2
40964: PUSH
40965: LD_INT 2
40967: PUSH
40968: EMPTY
40969: LIST
40970: LIST
40971: PUSH
40972: LD_INT 1
40974: PUSH
40975: LD_INT 2
40977: PUSH
40978: EMPTY
40979: LIST
40980: LIST
40981: PUSH
40982: LD_INT 0
40984: PUSH
40985: LD_INT 2
40987: PUSH
40988: EMPTY
40989: LIST
40990: LIST
40991: PUSH
40992: LD_INT 1
40994: NEG
40995: PUSH
40996: LD_INT 1
40998: PUSH
40999: EMPTY
41000: LIST
41001: LIST
41002: PUSH
41003: LD_INT 2
41005: NEG
41006: PUSH
41007: LD_INT 0
41009: PUSH
41010: EMPTY
41011: LIST
41012: LIST
41013: PUSH
41014: LD_INT 2
41016: NEG
41017: PUSH
41018: LD_INT 1
41020: NEG
41021: PUSH
41022: EMPTY
41023: LIST
41024: LIST
41025: PUSH
41026: LD_INT 2
41028: NEG
41029: PUSH
41030: LD_INT 2
41032: NEG
41033: PUSH
41034: EMPTY
41035: LIST
41036: LIST
41037: PUSH
41038: EMPTY
41039: LIST
41040: LIST
41041: LIST
41042: LIST
41043: LIST
41044: LIST
41045: LIST
41046: LIST
41047: LIST
41048: LIST
41049: LIST
41050: LIST
41051: LIST
41052: LIST
41053: LIST
41054: LIST
41055: LIST
41056: LIST
41057: LIST
41058: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41059: LD_ADDR_VAR 0 20
41063: PUSH
41064: LD_INT 0
41066: PUSH
41067: LD_INT 0
41069: PUSH
41070: EMPTY
41071: LIST
41072: LIST
41073: PUSH
41074: LD_INT 0
41076: PUSH
41077: LD_INT 1
41079: NEG
41080: PUSH
41081: EMPTY
41082: LIST
41083: LIST
41084: PUSH
41085: LD_INT 1
41087: PUSH
41088: LD_INT 0
41090: PUSH
41091: EMPTY
41092: LIST
41093: LIST
41094: PUSH
41095: LD_INT 1
41097: PUSH
41098: LD_INT 1
41100: PUSH
41101: EMPTY
41102: LIST
41103: LIST
41104: PUSH
41105: LD_INT 0
41107: PUSH
41108: LD_INT 1
41110: PUSH
41111: EMPTY
41112: LIST
41113: LIST
41114: PUSH
41115: LD_INT 1
41117: NEG
41118: PUSH
41119: LD_INT 0
41121: PUSH
41122: EMPTY
41123: LIST
41124: LIST
41125: PUSH
41126: LD_INT 1
41128: NEG
41129: PUSH
41130: LD_INT 1
41132: NEG
41133: PUSH
41134: EMPTY
41135: LIST
41136: LIST
41137: PUSH
41138: LD_INT 1
41140: NEG
41141: PUSH
41142: LD_INT 2
41144: NEG
41145: PUSH
41146: EMPTY
41147: LIST
41148: LIST
41149: PUSH
41150: LD_INT 0
41152: PUSH
41153: LD_INT 2
41155: NEG
41156: PUSH
41157: EMPTY
41158: LIST
41159: LIST
41160: PUSH
41161: LD_INT 1
41163: PUSH
41164: LD_INT 1
41166: NEG
41167: PUSH
41168: EMPTY
41169: LIST
41170: LIST
41171: PUSH
41172: LD_INT 2
41174: PUSH
41175: LD_INT 0
41177: PUSH
41178: EMPTY
41179: LIST
41180: LIST
41181: PUSH
41182: LD_INT 2
41184: PUSH
41185: LD_INT 1
41187: PUSH
41188: EMPTY
41189: LIST
41190: LIST
41191: PUSH
41192: LD_INT 2
41194: PUSH
41195: LD_INT 2
41197: PUSH
41198: EMPTY
41199: LIST
41200: LIST
41201: PUSH
41202: LD_INT 1
41204: PUSH
41205: LD_INT 2
41207: PUSH
41208: EMPTY
41209: LIST
41210: LIST
41211: PUSH
41212: LD_INT 0
41214: PUSH
41215: LD_INT 2
41217: PUSH
41218: EMPTY
41219: LIST
41220: LIST
41221: PUSH
41222: LD_INT 1
41224: NEG
41225: PUSH
41226: LD_INT 1
41228: PUSH
41229: EMPTY
41230: LIST
41231: LIST
41232: PUSH
41233: LD_INT 2
41235: NEG
41236: PUSH
41237: LD_INT 0
41239: PUSH
41240: EMPTY
41241: LIST
41242: LIST
41243: PUSH
41244: LD_INT 2
41246: NEG
41247: PUSH
41248: LD_INT 1
41250: NEG
41251: PUSH
41252: EMPTY
41253: LIST
41254: LIST
41255: PUSH
41256: LD_INT 2
41258: NEG
41259: PUSH
41260: LD_INT 2
41262: NEG
41263: PUSH
41264: EMPTY
41265: LIST
41266: LIST
41267: PUSH
41268: EMPTY
41269: LIST
41270: LIST
41271: LIST
41272: LIST
41273: LIST
41274: LIST
41275: LIST
41276: LIST
41277: LIST
41278: LIST
41279: LIST
41280: LIST
41281: LIST
41282: LIST
41283: LIST
41284: LIST
41285: LIST
41286: LIST
41287: LIST
41288: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41289: LD_ADDR_VAR 0 21
41293: PUSH
41294: LD_INT 0
41296: PUSH
41297: LD_INT 0
41299: PUSH
41300: EMPTY
41301: LIST
41302: LIST
41303: PUSH
41304: LD_INT 0
41306: PUSH
41307: LD_INT 1
41309: NEG
41310: PUSH
41311: EMPTY
41312: LIST
41313: LIST
41314: PUSH
41315: LD_INT 1
41317: PUSH
41318: LD_INT 0
41320: PUSH
41321: EMPTY
41322: LIST
41323: LIST
41324: PUSH
41325: LD_INT 1
41327: PUSH
41328: LD_INT 1
41330: PUSH
41331: EMPTY
41332: LIST
41333: LIST
41334: PUSH
41335: LD_INT 0
41337: PUSH
41338: LD_INT 1
41340: PUSH
41341: EMPTY
41342: LIST
41343: LIST
41344: PUSH
41345: LD_INT 1
41347: NEG
41348: PUSH
41349: LD_INT 0
41351: PUSH
41352: EMPTY
41353: LIST
41354: LIST
41355: PUSH
41356: LD_INT 1
41358: NEG
41359: PUSH
41360: LD_INT 1
41362: NEG
41363: PUSH
41364: EMPTY
41365: LIST
41366: LIST
41367: PUSH
41368: LD_INT 1
41370: NEG
41371: PUSH
41372: LD_INT 2
41374: NEG
41375: PUSH
41376: EMPTY
41377: LIST
41378: LIST
41379: PUSH
41380: LD_INT 0
41382: PUSH
41383: LD_INT 2
41385: NEG
41386: PUSH
41387: EMPTY
41388: LIST
41389: LIST
41390: PUSH
41391: LD_INT 1
41393: PUSH
41394: LD_INT 1
41396: NEG
41397: PUSH
41398: EMPTY
41399: LIST
41400: LIST
41401: PUSH
41402: LD_INT 2
41404: PUSH
41405: LD_INT 0
41407: PUSH
41408: EMPTY
41409: LIST
41410: LIST
41411: PUSH
41412: LD_INT 2
41414: PUSH
41415: LD_INT 1
41417: PUSH
41418: EMPTY
41419: LIST
41420: LIST
41421: PUSH
41422: LD_INT 2
41424: PUSH
41425: LD_INT 2
41427: PUSH
41428: EMPTY
41429: LIST
41430: LIST
41431: PUSH
41432: LD_INT 1
41434: PUSH
41435: LD_INT 2
41437: PUSH
41438: EMPTY
41439: LIST
41440: LIST
41441: PUSH
41442: LD_INT 0
41444: PUSH
41445: LD_INT 2
41447: PUSH
41448: EMPTY
41449: LIST
41450: LIST
41451: PUSH
41452: LD_INT 1
41454: NEG
41455: PUSH
41456: LD_INT 1
41458: PUSH
41459: EMPTY
41460: LIST
41461: LIST
41462: PUSH
41463: LD_INT 2
41465: NEG
41466: PUSH
41467: LD_INT 0
41469: PUSH
41470: EMPTY
41471: LIST
41472: LIST
41473: PUSH
41474: LD_INT 2
41476: NEG
41477: PUSH
41478: LD_INT 1
41480: NEG
41481: PUSH
41482: EMPTY
41483: LIST
41484: LIST
41485: PUSH
41486: LD_INT 2
41488: NEG
41489: PUSH
41490: LD_INT 2
41492: NEG
41493: PUSH
41494: EMPTY
41495: LIST
41496: LIST
41497: PUSH
41498: EMPTY
41499: LIST
41500: LIST
41501: LIST
41502: LIST
41503: LIST
41504: LIST
41505: LIST
41506: LIST
41507: LIST
41508: LIST
41509: LIST
41510: LIST
41511: LIST
41512: LIST
41513: LIST
41514: LIST
41515: LIST
41516: LIST
41517: LIST
41518: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41519: LD_ADDR_VAR 0 22
41523: PUSH
41524: LD_INT 0
41526: PUSH
41527: LD_INT 0
41529: PUSH
41530: EMPTY
41531: LIST
41532: LIST
41533: PUSH
41534: LD_INT 0
41536: PUSH
41537: LD_INT 1
41539: NEG
41540: PUSH
41541: EMPTY
41542: LIST
41543: LIST
41544: PUSH
41545: LD_INT 1
41547: PUSH
41548: LD_INT 0
41550: PUSH
41551: EMPTY
41552: LIST
41553: LIST
41554: PUSH
41555: LD_INT 1
41557: PUSH
41558: LD_INT 1
41560: PUSH
41561: EMPTY
41562: LIST
41563: LIST
41564: PUSH
41565: LD_INT 0
41567: PUSH
41568: LD_INT 1
41570: PUSH
41571: EMPTY
41572: LIST
41573: LIST
41574: PUSH
41575: LD_INT 1
41577: NEG
41578: PUSH
41579: LD_INT 0
41581: PUSH
41582: EMPTY
41583: LIST
41584: LIST
41585: PUSH
41586: LD_INT 1
41588: NEG
41589: PUSH
41590: LD_INT 1
41592: NEG
41593: PUSH
41594: EMPTY
41595: LIST
41596: LIST
41597: PUSH
41598: LD_INT 1
41600: NEG
41601: PUSH
41602: LD_INT 2
41604: NEG
41605: PUSH
41606: EMPTY
41607: LIST
41608: LIST
41609: PUSH
41610: LD_INT 0
41612: PUSH
41613: LD_INT 2
41615: NEG
41616: PUSH
41617: EMPTY
41618: LIST
41619: LIST
41620: PUSH
41621: LD_INT 1
41623: PUSH
41624: LD_INT 1
41626: NEG
41627: PUSH
41628: EMPTY
41629: LIST
41630: LIST
41631: PUSH
41632: LD_INT 2
41634: PUSH
41635: LD_INT 0
41637: PUSH
41638: EMPTY
41639: LIST
41640: LIST
41641: PUSH
41642: LD_INT 2
41644: PUSH
41645: LD_INT 1
41647: PUSH
41648: EMPTY
41649: LIST
41650: LIST
41651: PUSH
41652: LD_INT 2
41654: PUSH
41655: LD_INT 2
41657: PUSH
41658: EMPTY
41659: LIST
41660: LIST
41661: PUSH
41662: LD_INT 1
41664: PUSH
41665: LD_INT 2
41667: PUSH
41668: EMPTY
41669: LIST
41670: LIST
41671: PUSH
41672: LD_INT 0
41674: PUSH
41675: LD_INT 2
41677: PUSH
41678: EMPTY
41679: LIST
41680: LIST
41681: PUSH
41682: LD_INT 1
41684: NEG
41685: PUSH
41686: LD_INT 1
41688: PUSH
41689: EMPTY
41690: LIST
41691: LIST
41692: PUSH
41693: LD_INT 2
41695: NEG
41696: PUSH
41697: LD_INT 0
41699: PUSH
41700: EMPTY
41701: LIST
41702: LIST
41703: PUSH
41704: LD_INT 2
41706: NEG
41707: PUSH
41708: LD_INT 1
41710: NEG
41711: PUSH
41712: EMPTY
41713: LIST
41714: LIST
41715: PUSH
41716: LD_INT 2
41718: NEG
41719: PUSH
41720: LD_INT 2
41722: NEG
41723: PUSH
41724: EMPTY
41725: LIST
41726: LIST
41727: PUSH
41728: EMPTY
41729: LIST
41730: LIST
41731: LIST
41732: LIST
41733: LIST
41734: LIST
41735: LIST
41736: LIST
41737: LIST
41738: LIST
41739: LIST
41740: LIST
41741: LIST
41742: LIST
41743: LIST
41744: LIST
41745: LIST
41746: LIST
41747: LIST
41748: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
41749: LD_ADDR_VAR 0 23
41753: PUSH
41754: LD_INT 0
41756: PUSH
41757: LD_INT 0
41759: PUSH
41760: EMPTY
41761: LIST
41762: LIST
41763: PUSH
41764: LD_INT 0
41766: PUSH
41767: LD_INT 1
41769: NEG
41770: PUSH
41771: EMPTY
41772: LIST
41773: LIST
41774: PUSH
41775: LD_INT 1
41777: PUSH
41778: LD_INT 0
41780: PUSH
41781: EMPTY
41782: LIST
41783: LIST
41784: PUSH
41785: LD_INT 1
41787: PUSH
41788: LD_INT 1
41790: PUSH
41791: EMPTY
41792: LIST
41793: LIST
41794: PUSH
41795: LD_INT 0
41797: PUSH
41798: LD_INT 1
41800: PUSH
41801: EMPTY
41802: LIST
41803: LIST
41804: PUSH
41805: LD_INT 1
41807: NEG
41808: PUSH
41809: LD_INT 0
41811: PUSH
41812: EMPTY
41813: LIST
41814: LIST
41815: PUSH
41816: LD_INT 1
41818: NEG
41819: PUSH
41820: LD_INT 1
41822: NEG
41823: PUSH
41824: EMPTY
41825: LIST
41826: LIST
41827: PUSH
41828: LD_INT 1
41830: NEG
41831: PUSH
41832: LD_INT 2
41834: NEG
41835: PUSH
41836: EMPTY
41837: LIST
41838: LIST
41839: PUSH
41840: LD_INT 0
41842: PUSH
41843: LD_INT 2
41845: NEG
41846: PUSH
41847: EMPTY
41848: LIST
41849: LIST
41850: PUSH
41851: LD_INT 1
41853: PUSH
41854: LD_INT 1
41856: NEG
41857: PUSH
41858: EMPTY
41859: LIST
41860: LIST
41861: PUSH
41862: LD_INT 2
41864: PUSH
41865: LD_INT 0
41867: PUSH
41868: EMPTY
41869: LIST
41870: LIST
41871: PUSH
41872: LD_INT 2
41874: PUSH
41875: LD_INT 1
41877: PUSH
41878: EMPTY
41879: LIST
41880: LIST
41881: PUSH
41882: LD_INT 2
41884: PUSH
41885: LD_INT 2
41887: PUSH
41888: EMPTY
41889: LIST
41890: LIST
41891: PUSH
41892: LD_INT 1
41894: PUSH
41895: LD_INT 2
41897: PUSH
41898: EMPTY
41899: LIST
41900: LIST
41901: PUSH
41902: LD_INT 0
41904: PUSH
41905: LD_INT 2
41907: PUSH
41908: EMPTY
41909: LIST
41910: LIST
41911: PUSH
41912: LD_INT 1
41914: NEG
41915: PUSH
41916: LD_INT 1
41918: PUSH
41919: EMPTY
41920: LIST
41921: LIST
41922: PUSH
41923: LD_INT 2
41925: NEG
41926: PUSH
41927: LD_INT 0
41929: PUSH
41930: EMPTY
41931: LIST
41932: LIST
41933: PUSH
41934: LD_INT 2
41936: NEG
41937: PUSH
41938: LD_INT 1
41940: NEG
41941: PUSH
41942: EMPTY
41943: LIST
41944: LIST
41945: PUSH
41946: LD_INT 2
41948: NEG
41949: PUSH
41950: LD_INT 2
41952: NEG
41953: PUSH
41954: EMPTY
41955: LIST
41956: LIST
41957: PUSH
41958: LD_INT 2
41960: NEG
41961: PUSH
41962: LD_INT 3
41964: NEG
41965: PUSH
41966: EMPTY
41967: LIST
41968: LIST
41969: PUSH
41970: LD_INT 1
41972: NEG
41973: PUSH
41974: LD_INT 3
41976: NEG
41977: PUSH
41978: EMPTY
41979: LIST
41980: LIST
41981: PUSH
41982: LD_INT 1
41984: PUSH
41985: LD_INT 2
41987: NEG
41988: PUSH
41989: EMPTY
41990: LIST
41991: LIST
41992: PUSH
41993: LD_INT 2
41995: PUSH
41996: LD_INT 1
41998: NEG
41999: PUSH
42000: EMPTY
42001: LIST
42002: LIST
42003: PUSH
42004: EMPTY
42005: LIST
42006: LIST
42007: LIST
42008: LIST
42009: LIST
42010: LIST
42011: LIST
42012: LIST
42013: LIST
42014: LIST
42015: LIST
42016: LIST
42017: LIST
42018: LIST
42019: LIST
42020: LIST
42021: LIST
42022: LIST
42023: LIST
42024: LIST
42025: LIST
42026: LIST
42027: LIST
42028: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
42029: LD_ADDR_VAR 0 24
42033: PUSH
42034: LD_INT 0
42036: PUSH
42037: LD_INT 0
42039: PUSH
42040: EMPTY
42041: LIST
42042: LIST
42043: PUSH
42044: LD_INT 0
42046: PUSH
42047: LD_INT 1
42049: NEG
42050: PUSH
42051: EMPTY
42052: LIST
42053: LIST
42054: PUSH
42055: LD_INT 1
42057: PUSH
42058: LD_INT 0
42060: PUSH
42061: EMPTY
42062: LIST
42063: LIST
42064: PUSH
42065: LD_INT 1
42067: PUSH
42068: LD_INT 1
42070: PUSH
42071: EMPTY
42072: LIST
42073: LIST
42074: PUSH
42075: LD_INT 0
42077: PUSH
42078: LD_INT 1
42080: PUSH
42081: EMPTY
42082: LIST
42083: LIST
42084: PUSH
42085: LD_INT 1
42087: NEG
42088: PUSH
42089: LD_INT 0
42091: PUSH
42092: EMPTY
42093: LIST
42094: LIST
42095: PUSH
42096: LD_INT 1
42098: NEG
42099: PUSH
42100: LD_INT 1
42102: NEG
42103: PUSH
42104: EMPTY
42105: LIST
42106: LIST
42107: PUSH
42108: LD_INT 1
42110: NEG
42111: PUSH
42112: LD_INT 2
42114: NEG
42115: PUSH
42116: EMPTY
42117: LIST
42118: LIST
42119: PUSH
42120: LD_INT 0
42122: PUSH
42123: LD_INT 2
42125: NEG
42126: PUSH
42127: EMPTY
42128: LIST
42129: LIST
42130: PUSH
42131: LD_INT 1
42133: PUSH
42134: LD_INT 1
42136: NEG
42137: PUSH
42138: EMPTY
42139: LIST
42140: LIST
42141: PUSH
42142: LD_INT 2
42144: PUSH
42145: LD_INT 0
42147: PUSH
42148: EMPTY
42149: LIST
42150: LIST
42151: PUSH
42152: LD_INT 2
42154: PUSH
42155: LD_INT 1
42157: PUSH
42158: EMPTY
42159: LIST
42160: LIST
42161: PUSH
42162: LD_INT 2
42164: PUSH
42165: LD_INT 2
42167: PUSH
42168: EMPTY
42169: LIST
42170: LIST
42171: PUSH
42172: LD_INT 1
42174: PUSH
42175: LD_INT 2
42177: PUSH
42178: EMPTY
42179: LIST
42180: LIST
42181: PUSH
42182: LD_INT 0
42184: PUSH
42185: LD_INT 2
42187: PUSH
42188: EMPTY
42189: LIST
42190: LIST
42191: PUSH
42192: LD_INT 1
42194: NEG
42195: PUSH
42196: LD_INT 1
42198: PUSH
42199: EMPTY
42200: LIST
42201: LIST
42202: PUSH
42203: LD_INT 2
42205: NEG
42206: PUSH
42207: LD_INT 0
42209: PUSH
42210: EMPTY
42211: LIST
42212: LIST
42213: PUSH
42214: LD_INT 2
42216: NEG
42217: PUSH
42218: LD_INT 1
42220: NEG
42221: PUSH
42222: EMPTY
42223: LIST
42224: LIST
42225: PUSH
42226: LD_INT 2
42228: NEG
42229: PUSH
42230: LD_INT 2
42232: NEG
42233: PUSH
42234: EMPTY
42235: LIST
42236: LIST
42237: PUSH
42238: LD_INT 1
42240: PUSH
42241: LD_INT 2
42243: NEG
42244: PUSH
42245: EMPTY
42246: LIST
42247: LIST
42248: PUSH
42249: LD_INT 2
42251: PUSH
42252: LD_INT 1
42254: NEG
42255: PUSH
42256: EMPTY
42257: LIST
42258: LIST
42259: PUSH
42260: LD_INT 3
42262: PUSH
42263: LD_INT 1
42265: PUSH
42266: EMPTY
42267: LIST
42268: LIST
42269: PUSH
42270: LD_INT 3
42272: PUSH
42273: LD_INT 2
42275: PUSH
42276: EMPTY
42277: LIST
42278: LIST
42279: PUSH
42280: EMPTY
42281: LIST
42282: LIST
42283: LIST
42284: LIST
42285: LIST
42286: LIST
42287: LIST
42288: LIST
42289: LIST
42290: LIST
42291: LIST
42292: LIST
42293: LIST
42294: LIST
42295: LIST
42296: LIST
42297: LIST
42298: LIST
42299: LIST
42300: LIST
42301: LIST
42302: LIST
42303: LIST
42304: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
42305: LD_ADDR_VAR 0 25
42309: PUSH
42310: LD_INT 0
42312: PUSH
42313: LD_INT 0
42315: PUSH
42316: EMPTY
42317: LIST
42318: LIST
42319: PUSH
42320: LD_INT 0
42322: PUSH
42323: LD_INT 1
42325: NEG
42326: PUSH
42327: EMPTY
42328: LIST
42329: LIST
42330: PUSH
42331: LD_INT 1
42333: PUSH
42334: LD_INT 0
42336: PUSH
42337: EMPTY
42338: LIST
42339: LIST
42340: PUSH
42341: LD_INT 1
42343: PUSH
42344: LD_INT 1
42346: PUSH
42347: EMPTY
42348: LIST
42349: LIST
42350: PUSH
42351: LD_INT 0
42353: PUSH
42354: LD_INT 1
42356: PUSH
42357: EMPTY
42358: LIST
42359: LIST
42360: PUSH
42361: LD_INT 1
42363: NEG
42364: PUSH
42365: LD_INT 0
42367: PUSH
42368: EMPTY
42369: LIST
42370: LIST
42371: PUSH
42372: LD_INT 1
42374: NEG
42375: PUSH
42376: LD_INT 1
42378: NEG
42379: PUSH
42380: EMPTY
42381: LIST
42382: LIST
42383: PUSH
42384: LD_INT 1
42386: NEG
42387: PUSH
42388: LD_INT 2
42390: NEG
42391: PUSH
42392: EMPTY
42393: LIST
42394: LIST
42395: PUSH
42396: LD_INT 0
42398: PUSH
42399: LD_INT 2
42401: NEG
42402: PUSH
42403: EMPTY
42404: LIST
42405: LIST
42406: PUSH
42407: LD_INT 1
42409: PUSH
42410: LD_INT 1
42412: NEG
42413: PUSH
42414: EMPTY
42415: LIST
42416: LIST
42417: PUSH
42418: LD_INT 2
42420: PUSH
42421: LD_INT 0
42423: PUSH
42424: EMPTY
42425: LIST
42426: LIST
42427: PUSH
42428: LD_INT 2
42430: PUSH
42431: LD_INT 1
42433: PUSH
42434: EMPTY
42435: LIST
42436: LIST
42437: PUSH
42438: LD_INT 2
42440: PUSH
42441: LD_INT 2
42443: PUSH
42444: EMPTY
42445: LIST
42446: LIST
42447: PUSH
42448: LD_INT 1
42450: PUSH
42451: LD_INT 2
42453: PUSH
42454: EMPTY
42455: LIST
42456: LIST
42457: PUSH
42458: LD_INT 0
42460: PUSH
42461: LD_INT 2
42463: PUSH
42464: EMPTY
42465: LIST
42466: LIST
42467: PUSH
42468: LD_INT 1
42470: NEG
42471: PUSH
42472: LD_INT 1
42474: PUSH
42475: EMPTY
42476: LIST
42477: LIST
42478: PUSH
42479: LD_INT 2
42481: NEG
42482: PUSH
42483: LD_INT 0
42485: PUSH
42486: EMPTY
42487: LIST
42488: LIST
42489: PUSH
42490: LD_INT 2
42492: NEG
42493: PUSH
42494: LD_INT 1
42496: NEG
42497: PUSH
42498: EMPTY
42499: LIST
42500: LIST
42501: PUSH
42502: LD_INT 2
42504: NEG
42505: PUSH
42506: LD_INT 2
42508: NEG
42509: PUSH
42510: EMPTY
42511: LIST
42512: LIST
42513: PUSH
42514: LD_INT 3
42516: PUSH
42517: LD_INT 1
42519: PUSH
42520: EMPTY
42521: LIST
42522: LIST
42523: PUSH
42524: LD_INT 3
42526: PUSH
42527: LD_INT 2
42529: PUSH
42530: EMPTY
42531: LIST
42532: LIST
42533: PUSH
42534: LD_INT 2
42536: PUSH
42537: LD_INT 3
42539: PUSH
42540: EMPTY
42541: LIST
42542: LIST
42543: PUSH
42544: LD_INT 1
42546: PUSH
42547: LD_INT 3
42549: PUSH
42550: EMPTY
42551: LIST
42552: LIST
42553: PUSH
42554: EMPTY
42555: LIST
42556: LIST
42557: LIST
42558: LIST
42559: LIST
42560: LIST
42561: LIST
42562: LIST
42563: LIST
42564: LIST
42565: LIST
42566: LIST
42567: LIST
42568: LIST
42569: LIST
42570: LIST
42571: LIST
42572: LIST
42573: LIST
42574: LIST
42575: LIST
42576: LIST
42577: LIST
42578: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
42579: LD_ADDR_VAR 0 26
42583: PUSH
42584: LD_INT 0
42586: PUSH
42587: LD_INT 0
42589: PUSH
42590: EMPTY
42591: LIST
42592: LIST
42593: PUSH
42594: LD_INT 0
42596: PUSH
42597: LD_INT 1
42599: NEG
42600: PUSH
42601: EMPTY
42602: LIST
42603: LIST
42604: PUSH
42605: LD_INT 1
42607: PUSH
42608: LD_INT 0
42610: PUSH
42611: EMPTY
42612: LIST
42613: LIST
42614: PUSH
42615: LD_INT 1
42617: PUSH
42618: LD_INT 1
42620: PUSH
42621: EMPTY
42622: LIST
42623: LIST
42624: PUSH
42625: LD_INT 0
42627: PUSH
42628: LD_INT 1
42630: PUSH
42631: EMPTY
42632: LIST
42633: LIST
42634: PUSH
42635: LD_INT 1
42637: NEG
42638: PUSH
42639: LD_INT 0
42641: PUSH
42642: EMPTY
42643: LIST
42644: LIST
42645: PUSH
42646: LD_INT 1
42648: NEG
42649: PUSH
42650: LD_INT 1
42652: NEG
42653: PUSH
42654: EMPTY
42655: LIST
42656: LIST
42657: PUSH
42658: LD_INT 1
42660: NEG
42661: PUSH
42662: LD_INT 2
42664: NEG
42665: PUSH
42666: EMPTY
42667: LIST
42668: LIST
42669: PUSH
42670: LD_INT 0
42672: PUSH
42673: LD_INT 2
42675: NEG
42676: PUSH
42677: EMPTY
42678: LIST
42679: LIST
42680: PUSH
42681: LD_INT 1
42683: PUSH
42684: LD_INT 1
42686: NEG
42687: PUSH
42688: EMPTY
42689: LIST
42690: LIST
42691: PUSH
42692: LD_INT 2
42694: PUSH
42695: LD_INT 0
42697: PUSH
42698: EMPTY
42699: LIST
42700: LIST
42701: PUSH
42702: LD_INT 2
42704: PUSH
42705: LD_INT 1
42707: PUSH
42708: EMPTY
42709: LIST
42710: LIST
42711: PUSH
42712: LD_INT 2
42714: PUSH
42715: LD_INT 2
42717: PUSH
42718: EMPTY
42719: LIST
42720: LIST
42721: PUSH
42722: LD_INT 1
42724: PUSH
42725: LD_INT 2
42727: PUSH
42728: EMPTY
42729: LIST
42730: LIST
42731: PUSH
42732: LD_INT 0
42734: PUSH
42735: LD_INT 2
42737: PUSH
42738: EMPTY
42739: LIST
42740: LIST
42741: PUSH
42742: LD_INT 1
42744: NEG
42745: PUSH
42746: LD_INT 1
42748: PUSH
42749: EMPTY
42750: LIST
42751: LIST
42752: PUSH
42753: LD_INT 2
42755: NEG
42756: PUSH
42757: LD_INT 0
42759: PUSH
42760: EMPTY
42761: LIST
42762: LIST
42763: PUSH
42764: LD_INT 2
42766: NEG
42767: PUSH
42768: LD_INT 1
42770: NEG
42771: PUSH
42772: EMPTY
42773: LIST
42774: LIST
42775: PUSH
42776: LD_INT 2
42778: NEG
42779: PUSH
42780: LD_INT 2
42782: NEG
42783: PUSH
42784: EMPTY
42785: LIST
42786: LIST
42787: PUSH
42788: LD_INT 2
42790: PUSH
42791: LD_INT 3
42793: PUSH
42794: EMPTY
42795: LIST
42796: LIST
42797: PUSH
42798: LD_INT 1
42800: PUSH
42801: LD_INT 3
42803: PUSH
42804: EMPTY
42805: LIST
42806: LIST
42807: PUSH
42808: LD_INT 1
42810: NEG
42811: PUSH
42812: LD_INT 2
42814: PUSH
42815: EMPTY
42816: LIST
42817: LIST
42818: PUSH
42819: LD_INT 2
42821: NEG
42822: PUSH
42823: LD_INT 1
42825: PUSH
42826: EMPTY
42827: LIST
42828: LIST
42829: PUSH
42830: EMPTY
42831: LIST
42832: LIST
42833: LIST
42834: LIST
42835: LIST
42836: LIST
42837: LIST
42838: LIST
42839: LIST
42840: LIST
42841: LIST
42842: LIST
42843: LIST
42844: LIST
42845: LIST
42846: LIST
42847: LIST
42848: LIST
42849: LIST
42850: LIST
42851: LIST
42852: LIST
42853: LIST
42854: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
42855: LD_ADDR_VAR 0 27
42859: PUSH
42860: LD_INT 0
42862: PUSH
42863: LD_INT 0
42865: PUSH
42866: EMPTY
42867: LIST
42868: LIST
42869: PUSH
42870: LD_INT 0
42872: PUSH
42873: LD_INT 1
42875: NEG
42876: PUSH
42877: EMPTY
42878: LIST
42879: LIST
42880: PUSH
42881: LD_INT 1
42883: PUSH
42884: LD_INT 0
42886: PUSH
42887: EMPTY
42888: LIST
42889: LIST
42890: PUSH
42891: LD_INT 1
42893: PUSH
42894: LD_INT 1
42896: PUSH
42897: EMPTY
42898: LIST
42899: LIST
42900: PUSH
42901: LD_INT 0
42903: PUSH
42904: LD_INT 1
42906: PUSH
42907: EMPTY
42908: LIST
42909: LIST
42910: PUSH
42911: LD_INT 1
42913: NEG
42914: PUSH
42915: LD_INT 0
42917: PUSH
42918: EMPTY
42919: LIST
42920: LIST
42921: PUSH
42922: LD_INT 1
42924: NEG
42925: PUSH
42926: LD_INT 1
42928: NEG
42929: PUSH
42930: EMPTY
42931: LIST
42932: LIST
42933: PUSH
42934: LD_INT 1
42936: NEG
42937: PUSH
42938: LD_INT 2
42940: NEG
42941: PUSH
42942: EMPTY
42943: LIST
42944: LIST
42945: PUSH
42946: LD_INT 0
42948: PUSH
42949: LD_INT 2
42951: NEG
42952: PUSH
42953: EMPTY
42954: LIST
42955: LIST
42956: PUSH
42957: LD_INT 1
42959: PUSH
42960: LD_INT 1
42962: NEG
42963: PUSH
42964: EMPTY
42965: LIST
42966: LIST
42967: PUSH
42968: LD_INT 2
42970: PUSH
42971: LD_INT 0
42973: PUSH
42974: EMPTY
42975: LIST
42976: LIST
42977: PUSH
42978: LD_INT 2
42980: PUSH
42981: LD_INT 1
42983: PUSH
42984: EMPTY
42985: LIST
42986: LIST
42987: PUSH
42988: LD_INT 2
42990: PUSH
42991: LD_INT 2
42993: PUSH
42994: EMPTY
42995: LIST
42996: LIST
42997: PUSH
42998: LD_INT 1
43000: PUSH
43001: LD_INT 2
43003: PUSH
43004: EMPTY
43005: LIST
43006: LIST
43007: PUSH
43008: LD_INT 0
43010: PUSH
43011: LD_INT 2
43013: PUSH
43014: EMPTY
43015: LIST
43016: LIST
43017: PUSH
43018: LD_INT 1
43020: NEG
43021: PUSH
43022: LD_INT 1
43024: PUSH
43025: EMPTY
43026: LIST
43027: LIST
43028: PUSH
43029: LD_INT 2
43031: NEG
43032: PUSH
43033: LD_INT 0
43035: PUSH
43036: EMPTY
43037: LIST
43038: LIST
43039: PUSH
43040: LD_INT 2
43042: NEG
43043: PUSH
43044: LD_INT 1
43046: NEG
43047: PUSH
43048: EMPTY
43049: LIST
43050: LIST
43051: PUSH
43052: LD_INT 2
43054: NEG
43055: PUSH
43056: LD_INT 2
43058: NEG
43059: PUSH
43060: EMPTY
43061: LIST
43062: LIST
43063: PUSH
43064: LD_INT 1
43066: NEG
43067: PUSH
43068: LD_INT 2
43070: PUSH
43071: EMPTY
43072: LIST
43073: LIST
43074: PUSH
43075: LD_INT 2
43077: NEG
43078: PUSH
43079: LD_INT 1
43081: PUSH
43082: EMPTY
43083: LIST
43084: LIST
43085: PUSH
43086: LD_INT 3
43088: NEG
43089: PUSH
43090: LD_INT 1
43092: NEG
43093: PUSH
43094: EMPTY
43095: LIST
43096: LIST
43097: PUSH
43098: LD_INT 3
43100: NEG
43101: PUSH
43102: LD_INT 2
43104: NEG
43105: PUSH
43106: EMPTY
43107: LIST
43108: LIST
43109: PUSH
43110: EMPTY
43111: LIST
43112: LIST
43113: LIST
43114: LIST
43115: LIST
43116: LIST
43117: LIST
43118: LIST
43119: LIST
43120: LIST
43121: LIST
43122: LIST
43123: LIST
43124: LIST
43125: LIST
43126: LIST
43127: LIST
43128: LIST
43129: LIST
43130: LIST
43131: LIST
43132: LIST
43133: LIST
43134: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
43135: LD_ADDR_VAR 0 28
43139: PUSH
43140: LD_INT 0
43142: PUSH
43143: LD_INT 0
43145: PUSH
43146: EMPTY
43147: LIST
43148: LIST
43149: PUSH
43150: LD_INT 0
43152: PUSH
43153: LD_INT 1
43155: NEG
43156: PUSH
43157: EMPTY
43158: LIST
43159: LIST
43160: PUSH
43161: LD_INT 1
43163: PUSH
43164: LD_INT 0
43166: PUSH
43167: EMPTY
43168: LIST
43169: LIST
43170: PUSH
43171: LD_INT 1
43173: PUSH
43174: LD_INT 1
43176: PUSH
43177: EMPTY
43178: LIST
43179: LIST
43180: PUSH
43181: LD_INT 0
43183: PUSH
43184: LD_INT 1
43186: PUSH
43187: EMPTY
43188: LIST
43189: LIST
43190: PUSH
43191: LD_INT 1
43193: NEG
43194: PUSH
43195: LD_INT 0
43197: PUSH
43198: EMPTY
43199: LIST
43200: LIST
43201: PUSH
43202: LD_INT 1
43204: NEG
43205: PUSH
43206: LD_INT 1
43208: NEG
43209: PUSH
43210: EMPTY
43211: LIST
43212: LIST
43213: PUSH
43214: LD_INT 1
43216: NEG
43217: PUSH
43218: LD_INT 2
43220: NEG
43221: PUSH
43222: EMPTY
43223: LIST
43224: LIST
43225: PUSH
43226: LD_INT 0
43228: PUSH
43229: LD_INT 2
43231: NEG
43232: PUSH
43233: EMPTY
43234: LIST
43235: LIST
43236: PUSH
43237: LD_INT 1
43239: PUSH
43240: LD_INT 1
43242: NEG
43243: PUSH
43244: EMPTY
43245: LIST
43246: LIST
43247: PUSH
43248: LD_INT 2
43250: PUSH
43251: LD_INT 0
43253: PUSH
43254: EMPTY
43255: LIST
43256: LIST
43257: PUSH
43258: LD_INT 2
43260: PUSH
43261: LD_INT 1
43263: PUSH
43264: EMPTY
43265: LIST
43266: LIST
43267: PUSH
43268: LD_INT 2
43270: PUSH
43271: LD_INT 2
43273: PUSH
43274: EMPTY
43275: LIST
43276: LIST
43277: PUSH
43278: LD_INT 1
43280: PUSH
43281: LD_INT 2
43283: PUSH
43284: EMPTY
43285: LIST
43286: LIST
43287: PUSH
43288: LD_INT 0
43290: PUSH
43291: LD_INT 2
43293: PUSH
43294: EMPTY
43295: LIST
43296: LIST
43297: PUSH
43298: LD_INT 1
43300: NEG
43301: PUSH
43302: LD_INT 1
43304: PUSH
43305: EMPTY
43306: LIST
43307: LIST
43308: PUSH
43309: LD_INT 2
43311: NEG
43312: PUSH
43313: LD_INT 0
43315: PUSH
43316: EMPTY
43317: LIST
43318: LIST
43319: PUSH
43320: LD_INT 2
43322: NEG
43323: PUSH
43324: LD_INT 1
43326: NEG
43327: PUSH
43328: EMPTY
43329: LIST
43330: LIST
43331: PUSH
43332: LD_INT 2
43334: NEG
43335: PUSH
43336: LD_INT 2
43338: NEG
43339: PUSH
43340: EMPTY
43341: LIST
43342: LIST
43343: PUSH
43344: LD_INT 2
43346: NEG
43347: PUSH
43348: LD_INT 3
43350: NEG
43351: PUSH
43352: EMPTY
43353: LIST
43354: LIST
43355: PUSH
43356: LD_INT 1
43358: NEG
43359: PUSH
43360: LD_INT 3
43362: NEG
43363: PUSH
43364: EMPTY
43365: LIST
43366: LIST
43367: PUSH
43368: LD_INT 3
43370: NEG
43371: PUSH
43372: LD_INT 1
43374: NEG
43375: PUSH
43376: EMPTY
43377: LIST
43378: LIST
43379: PUSH
43380: LD_INT 3
43382: NEG
43383: PUSH
43384: LD_INT 2
43386: NEG
43387: PUSH
43388: EMPTY
43389: LIST
43390: LIST
43391: PUSH
43392: EMPTY
43393: LIST
43394: LIST
43395: LIST
43396: LIST
43397: LIST
43398: LIST
43399: LIST
43400: LIST
43401: LIST
43402: LIST
43403: LIST
43404: LIST
43405: LIST
43406: LIST
43407: LIST
43408: LIST
43409: LIST
43410: LIST
43411: LIST
43412: LIST
43413: LIST
43414: LIST
43415: LIST
43416: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
43417: LD_ADDR_VAR 0 29
43421: PUSH
43422: LD_INT 0
43424: PUSH
43425: LD_INT 0
43427: PUSH
43428: EMPTY
43429: LIST
43430: LIST
43431: PUSH
43432: LD_INT 0
43434: PUSH
43435: LD_INT 1
43437: NEG
43438: PUSH
43439: EMPTY
43440: LIST
43441: LIST
43442: PUSH
43443: LD_INT 1
43445: PUSH
43446: LD_INT 0
43448: PUSH
43449: EMPTY
43450: LIST
43451: LIST
43452: PUSH
43453: LD_INT 1
43455: PUSH
43456: LD_INT 1
43458: PUSH
43459: EMPTY
43460: LIST
43461: LIST
43462: PUSH
43463: LD_INT 0
43465: PUSH
43466: LD_INT 1
43468: PUSH
43469: EMPTY
43470: LIST
43471: LIST
43472: PUSH
43473: LD_INT 1
43475: NEG
43476: PUSH
43477: LD_INT 0
43479: PUSH
43480: EMPTY
43481: LIST
43482: LIST
43483: PUSH
43484: LD_INT 1
43486: NEG
43487: PUSH
43488: LD_INT 1
43490: NEG
43491: PUSH
43492: EMPTY
43493: LIST
43494: LIST
43495: PUSH
43496: LD_INT 1
43498: NEG
43499: PUSH
43500: LD_INT 2
43502: NEG
43503: PUSH
43504: EMPTY
43505: LIST
43506: LIST
43507: PUSH
43508: LD_INT 0
43510: PUSH
43511: LD_INT 2
43513: NEG
43514: PUSH
43515: EMPTY
43516: LIST
43517: LIST
43518: PUSH
43519: LD_INT 1
43521: PUSH
43522: LD_INT 1
43524: NEG
43525: PUSH
43526: EMPTY
43527: LIST
43528: LIST
43529: PUSH
43530: LD_INT 2
43532: PUSH
43533: LD_INT 0
43535: PUSH
43536: EMPTY
43537: LIST
43538: LIST
43539: PUSH
43540: LD_INT 2
43542: PUSH
43543: LD_INT 1
43545: PUSH
43546: EMPTY
43547: LIST
43548: LIST
43549: PUSH
43550: LD_INT 1
43552: PUSH
43553: LD_INT 2
43555: PUSH
43556: EMPTY
43557: LIST
43558: LIST
43559: PUSH
43560: LD_INT 0
43562: PUSH
43563: LD_INT 2
43565: PUSH
43566: EMPTY
43567: LIST
43568: LIST
43569: PUSH
43570: LD_INT 1
43572: NEG
43573: PUSH
43574: LD_INT 1
43576: PUSH
43577: EMPTY
43578: LIST
43579: LIST
43580: PUSH
43581: LD_INT 2
43583: NEG
43584: PUSH
43585: LD_INT 1
43587: NEG
43588: PUSH
43589: EMPTY
43590: LIST
43591: LIST
43592: PUSH
43593: LD_INT 2
43595: NEG
43596: PUSH
43597: LD_INT 2
43599: NEG
43600: PUSH
43601: EMPTY
43602: LIST
43603: LIST
43604: PUSH
43605: LD_INT 2
43607: NEG
43608: PUSH
43609: LD_INT 3
43611: NEG
43612: PUSH
43613: EMPTY
43614: LIST
43615: LIST
43616: PUSH
43617: LD_INT 2
43619: PUSH
43620: LD_INT 1
43622: NEG
43623: PUSH
43624: EMPTY
43625: LIST
43626: LIST
43627: PUSH
43628: LD_INT 3
43630: PUSH
43631: LD_INT 1
43633: PUSH
43634: EMPTY
43635: LIST
43636: LIST
43637: PUSH
43638: LD_INT 1
43640: PUSH
43641: LD_INT 3
43643: PUSH
43644: EMPTY
43645: LIST
43646: LIST
43647: PUSH
43648: LD_INT 1
43650: NEG
43651: PUSH
43652: LD_INT 2
43654: PUSH
43655: EMPTY
43656: LIST
43657: LIST
43658: PUSH
43659: LD_INT 3
43661: NEG
43662: PUSH
43663: LD_INT 2
43665: NEG
43666: PUSH
43667: EMPTY
43668: LIST
43669: LIST
43670: PUSH
43671: EMPTY
43672: LIST
43673: LIST
43674: LIST
43675: LIST
43676: LIST
43677: LIST
43678: LIST
43679: LIST
43680: LIST
43681: LIST
43682: LIST
43683: LIST
43684: LIST
43685: LIST
43686: LIST
43687: LIST
43688: LIST
43689: LIST
43690: LIST
43691: LIST
43692: LIST
43693: LIST
43694: LIST
43695: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43696: LD_ADDR_VAR 0 30
43700: PUSH
43701: LD_INT 0
43703: PUSH
43704: LD_INT 0
43706: PUSH
43707: EMPTY
43708: LIST
43709: LIST
43710: PUSH
43711: LD_INT 0
43713: PUSH
43714: LD_INT 1
43716: NEG
43717: PUSH
43718: EMPTY
43719: LIST
43720: LIST
43721: PUSH
43722: LD_INT 1
43724: PUSH
43725: LD_INT 0
43727: PUSH
43728: EMPTY
43729: LIST
43730: LIST
43731: PUSH
43732: LD_INT 1
43734: PUSH
43735: LD_INT 1
43737: PUSH
43738: EMPTY
43739: LIST
43740: LIST
43741: PUSH
43742: LD_INT 0
43744: PUSH
43745: LD_INT 1
43747: PUSH
43748: EMPTY
43749: LIST
43750: LIST
43751: PUSH
43752: LD_INT 1
43754: NEG
43755: PUSH
43756: LD_INT 0
43758: PUSH
43759: EMPTY
43760: LIST
43761: LIST
43762: PUSH
43763: LD_INT 1
43765: NEG
43766: PUSH
43767: LD_INT 1
43769: NEG
43770: PUSH
43771: EMPTY
43772: LIST
43773: LIST
43774: PUSH
43775: LD_INT 1
43777: NEG
43778: PUSH
43779: LD_INT 2
43781: NEG
43782: PUSH
43783: EMPTY
43784: LIST
43785: LIST
43786: PUSH
43787: LD_INT 0
43789: PUSH
43790: LD_INT 2
43792: NEG
43793: PUSH
43794: EMPTY
43795: LIST
43796: LIST
43797: PUSH
43798: LD_INT 1
43800: PUSH
43801: LD_INT 1
43803: NEG
43804: PUSH
43805: EMPTY
43806: LIST
43807: LIST
43808: PUSH
43809: LD_INT 2
43811: PUSH
43812: LD_INT 0
43814: PUSH
43815: EMPTY
43816: LIST
43817: LIST
43818: PUSH
43819: LD_INT 2
43821: PUSH
43822: LD_INT 1
43824: PUSH
43825: EMPTY
43826: LIST
43827: LIST
43828: PUSH
43829: LD_INT 2
43831: PUSH
43832: LD_INT 2
43834: PUSH
43835: EMPTY
43836: LIST
43837: LIST
43838: PUSH
43839: LD_INT 1
43841: PUSH
43842: LD_INT 2
43844: PUSH
43845: EMPTY
43846: LIST
43847: LIST
43848: PUSH
43849: LD_INT 1
43851: NEG
43852: PUSH
43853: LD_INT 1
43855: PUSH
43856: EMPTY
43857: LIST
43858: LIST
43859: PUSH
43860: LD_INT 2
43862: NEG
43863: PUSH
43864: LD_INT 0
43866: PUSH
43867: EMPTY
43868: LIST
43869: LIST
43870: PUSH
43871: LD_INT 2
43873: NEG
43874: PUSH
43875: LD_INT 1
43877: NEG
43878: PUSH
43879: EMPTY
43880: LIST
43881: LIST
43882: PUSH
43883: LD_INT 1
43885: NEG
43886: PUSH
43887: LD_INT 3
43889: NEG
43890: PUSH
43891: EMPTY
43892: LIST
43893: LIST
43894: PUSH
43895: LD_INT 1
43897: PUSH
43898: LD_INT 2
43900: NEG
43901: PUSH
43902: EMPTY
43903: LIST
43904: LIST
43905: PUSH
43906: LD_INT 3
43908: PUSH
43909: LD_INT 2
43911: PUSH
43912: EMPTY
43913: LIST
43914: LIST
43915: PUSH
43916: LD_INT 2
43918: PUSH
43919: LD_INT 3
43921: PUSH
43922: EMPTY
43923: LIST
43924: LIST
43925: PUSH
43926: LD_INT 2
43928: NEG
43929: PUSH
43930: LD_INT 1
43932: PUSH
43933: EMPTY
43934: LIST
43935: LIST
43936: PUSH
43937: LD_INT 3
43939: NEG
43940: PUSH
43941: LD_INT 1
43943: NEG
43944: PUSH
43945: EMPTY
43946: LIST
43947: LIST
43948: PUSH
43949: EMPTY
43950: LIST
43951: LIST
43952: LIST
43953: LIST
43954: LIST
43955: LIST
43956: LIST
43957: LIST
43958: LIST
43959: LIST
43960: LIST
43961: LIST
43962: LIST
43963: LIST
43964: LIST
43965: LIST
43966: LIST
43967: LIST
43968: LIST
43969: LIST
43970: LIST
43971: LIST
43972: LIST
43973: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
43974: LD_ADDR_VAR 0 31
43978: PUSH
43979: LD_INT 0
43981: PUSH
43982: LD_INT 0
43984: PUSH
43985: EMPTY
43986: LIST
43987: LIST
43988: PUSH
43989: LD_INT 0
43991: PUSH
43992: LD_INT 1
43994: NEG
43995: PUSH
43996: EMPTY
43997: LIST
43998: LIST
43999: PUSH
44000: LD_INT 1
44002: PUSH
44003: LD_INT 0
44005: PUSH
44006: EMPTY
44007: LIST
44008: LIST
44009: PUSH
44010: LD_INT 1
44012: PUSH
44013: LD_INT 1
44015: PUSH
44016: EMPTY
44017: LIST
44018: LIST
44019: PUSH
44020: LD_INT 0
44022: PUSH
44023: LD_INT 1
44025: PUSH
44026: EMPTY
44027: LIST
44028: LIST
44029: PUSH
44030: LD_INT 1
44032: NEG
44033: PUSH
44034: LD_INT 0
44036: PUSH
44037: EMPTY
44038: LIST
44039: LIST
44040: PUSH
44041: LD_INT 1
44043: NEG
44044: PUSH
44045: LD_INT 1
44047: NEG
44048: PUSH
44049: EMPTY
44050: LIST
44051: LIST
44052: PUSH
44053: LD_INT 1
44055: NEG
44056: PUSH
44057: LD_INT 2
44059: NEG
44060: PUSH
44061: EMPTY
44062: LIST
44063: LIST
44064: PUSH
44065: LD_INT 1
44067: PUSH
44068: LD_INT 1
44070: NEG
44071: PUSH
44072: EMPTY
44073: LIST
44074: LIST
44075: PUSH
44076: LD_INT 2
44078: PUSH
44079: LD_INT 0
44081: PUSH
44082: EMPTY
44083: LIST
44084: LIST
44085: PUSH
44086: LD_INT 2
44088: PUSH
44089: LD_INT 1
44091: PUSH
44092: EMPTY
44093: LIST
44094: LIST
44095: PUSH
44096: LD_INT 2
44098: PUSH
44099: LD_INT 2
44101: PUSH
44102: EMPTY
44103: LIST
44104: LIST
44105: PUSH
44106: LD_INT 1
44108: PUSH
44109: LD_INT 2
44111: PUSH
44112: EMPTY
44113: LIST
44114: LIST
44115: PUSH
44116: LD_INT 0
44118: PUSH
44119: LD_INT 2
44121: PUSH
44122: EMPTY
44123: LIST
44124: LIST
44125: PUSH
44126: LD_INT 1
44128: NEG
44129: PUSH
44130: LD_INT 1
44132: PUSH
44133: EMPTY
44134: LIST
44135: LIST
44136: PUSH
44137: LD_INT 2
44139: NEG
44140: PUSH
44141: LD_INT 1
44143: NEG
44144: PUSH
44145: EMPTY
44146: LIST
44147: LIST
44148: PUSH
44149: LD_INT 2
44151: NEG
44152: PUSH
44153: LD_INT 2
44155: NEG
44156: PUSH
44157: EMPTY
44158: LIST
44159: LIST
44160: PUSH
44161: LD_INT 2
44163: NEG
44164: PUSH
44165: LD_INT 3
44167: NEG
44168: PUSH
44169: EMPTY
44170: LIST
44171: LIST
44172: PUSH
44173: LD_INT 2
44175: PUSH
44176: LD_INT 1
44178: NEG
44179: PUSH
44180: EMPTY
44181: LIST
44182: LIST
44183: PUSH
44184: LD_INT 3
44186: PUSH
44187: LD_INT 1
44189: PUSH
44190: EMPTY
44191: LIST
44192: LIST
44193: PUSH
44194: LD_INT 1
44196: PUSH
44197: LD_INT 3
44199: PUSH
44200: EMPTY
44201: LIST
44202: LIST
44203: PUSH
44204: LD_INT 1
44206: NEG
44207: PUSH
44208: LD_INT 2
44210: PUSH
44211: EMPTY
44212: LIST
44213: LIST
44214: PUSH
44215: LD_INT 3
44217: NEG
44218: PUSH
44219: LD_INT 2
44221: NEG
44222: PUSH
44223: EMPTY
44224: LIST
44225: LIST
44226: PUSH
44227: EMPTY
44228: LIST
44229: LIST
44230: LIST
44231: LIST
44232: LIST
44233: LIST
44234: LIST
44235: LIST
44236: LIST
44237: LIST
44238: LIST
44239: LIST
44240: LIST
44241: LIST
44242: LIST
44243: LIST
44244: LIST
44245: LIST
44246: LIST
44247: LIST
44248: LIST
44249: LIST
44250: LIST
44251: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44252: LD_ADDR_VAR 0 32
44256: PUSH
44257: LD_INT 0
44259: PUSH
44260: LD_INT 0
44262: PUSH
44263: EMPTY
44264: LIST
44265: LIST
44266: PUSH
44267: LD_INT 0
44269: PUSH
44270: LD_INT 1
44272: NEG
44273: PUSH
44274: EMPTY
44275: LIST
44276: LIST
44277: PUSH
44278: LD_INT 1
44280: PUSH
44281: LD_INT 0
44283: PUSH
44284: EMPTY
44285: LIST
44286: LIST
44287: PUSH
44288: LD_INT 1
44290: PUSH
44291: LD_INT 1
44293: PUSH
44294: EMPTY
44295: LIST
44296: LIST
44297: PUSH
44298: LD_INT 0
44300: PUSH
44301: LD_INT 1
44303: PUSH
44304: EMPTY
44305: LIST
44306: LIST
44307: PUSH
44308: LD_INT 1
44310: NEG
44311: PUSH
44312: LD_INT 0
44314: PUSH
44315: EMPTY
44316: LIST
44317: LIST
44318: PUSH
44319: LD_INT 1
44321: NEG
44322: PUSH
44323: LD_INT 1
44325: NEG
44326: PUSH
44327: EMPTY
44328: LIST
44329: LIST
44330: PUSH
44331: LD_INT 1
44333: NEG
44334: PUSH
44335: LD_INT 2
44337: NEG
44338: PUSH
44339: EMPTY
44340: LIST
44341: LIST
44342: PUSH
44343: LD_INT 0
44345: PUSH
44346: LD_INT 2
44348: NEG
44349: PUSH
44350: EMPTY
44351: LIST
44352: LIST
44353: PUSH
44354: LD_INT 1
44356: PUSH
44357: LD_INT 1
44359: NEG
44360: PUSH
44361: EMPTY
44362: LIST
44363: LIST
44364: PUSH
44365: LD_INT 2
44367: PUSH
44368: LD_INT 1
44370: PUSH
44371: EMPTY
44372: LIST
44373: LIST
44374: PUSH
44375: LD_INT 2
44377: PUSH
44378: LD_INT 2
44380: PUSH
44381: EMPTY
44382: LIST
44383: LIST
44384: PUSH
44385: LD_INT 1
44387: PUSH
44388: LD_INT 2
44390: PUSH
44391: EMPTY
44392: LIST
44393: LIST
44394: PUSH
44395: LD_INT 0
44397: PUSH
44398: LD_INT 2
44400: PUSH
44401: EMPTY
44402: LIST
44403: LIST
44404: PUSH
44405: LD_INT 1
44407: NEG
44408: PUSH
44409: LD_INT 1
44411: PUSH
44412: EMPTY
44413: LIST
44414: LIST
44415: PUSH
44416: LD_INT 2
44418: NEG
44419: PUSH
44420: LD_INT 0
44422: PUSH
44423: EMPTY
44424: LIST
44425: LIST
44426: PUSH
44427: LD_INT 2
44429: NEG
44430: PUSH
44431: LD_INT 1
44433: NEG
44434: PUSH
44435: EMPTY
44436: LIST
44437: LIST
44438: PUSH
44439: LD_INT 1
44441: NEG
44442: PUSH
44443: LD_INT 3
44445: NEG
44446: PUSH
44447: EMPTY
44448: LIST
44449: LIST
44450: PUSH
44451: LD_INT 1
44453: PUSH
44454: LD_INT 2
44456: NEG
44457: PUSH
44458: EMPTY
44459: LIST
44460: LIST
44461: PUSH
44462: LD_INT 3
44464: PUSH
44465: LD_INT 2
44467: PUSH
44468: EMPTY
44469: LIST
44470: LIST
44471: PUSH
44472: LD_INT 2
44474: PUSH
44475: LD_INT 3
44477: PUSH
44478: EMPTY
44479: LIST
44480: LIST
44481: PUSH
44482: LD_INT 2
44484: NEG
44485: PUSH
44486: LD_INT 1
44488: PUSH
44489: EMPTY
44490: LIST
44491: LIST
44492: PUSH
44493: LD_INT 3
44495: NEG
44496: PUSH
44497: LD_INT 1
44499: NEG
44500: PUSH
44501: EMPTY
44502: LIST
44503: LIST
44504: PUSH
44505: EMPTY
44506: LIST
44507: LIST
44508: LIST
44509: LIST
44510: LIST
44511: LIST
44512: LIST
44513: LIST
44514: LIST
44515: LIST
44516: LIST
44517: LIST
44518: LIST
44519: LIST
44520: LIST
44521: LIST
44522: LIST
44523: LIST
44524: LIST
44525: LIST
44526: LIST
44527: LIST
44528: LIST
44529: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44530: LD_ADDR_VAR 0 33
44534: PUSH
44535: LD_INT 0
44537: PUSH
44538: LD_INT 0
44540: PUSH
44541: EMPTY
44542: LIST
44543: LIST
44544: PUSH
44545: LD_INT 0
44547: PUSH
44548: LD_INT 1
44550: NEG
44551: PUSH
44552: EMPTY
44553: LIST
44554: LIST
44555: PUSH
44556: LD_INT 1
44558: PUSH
44559: LD_INT 0
44561: PUSH
44562: EMPTY
44563: LIST
44564: LIST
44565: PUSH
44566: LD_INT 1
44568: PUSH
44569: LD_INT 1
44571: PUSH
44572: EMPTY
44573: LIST
44574: LIST
44575: PUSH
44576: LD_INT 0
44578: PUSH
44579: LD_INT 1
44581: PUSH
44582: EMPTY
44583: LIST
44584: LIST
44585: PUSH
44586: LD_INT 1
44588: NEG
44589: PUSH
44590: LD_INT 0
44592: PUSH
44593: EMPTY
44594: LIST
44595: LIST
44596: PUSH
44597: LD_INT 1
44599: NEG
44600: PUSH
44601: LD_INT 1
44603: NEG
44604: PUSH
44605: EMPTY
44606: LIST
44607: LIST
44608: PUSH
44609: LD_INT 1
44611: NEG
44612: PUSH
44613: LD_INT 2
44615: NEG
44616: PUSH
44617: EMPTY
44618: LIST
44619: LIST
44620: PUSH
44621: LD_INT 1
44623: PUSH
44624: LD_INT 1
44626: NEG
44627: PUSH
44628: EMPTY
44629: LIST
44630: LIST
44631: PUSH
44632: LD_INT 2
44634: PUSH
44635: LD_INT 0
44637: PUSH
44638: EMPTY
44639: LIST
44640: LIST
44641: PUSH
44642: LD_INT 2
44644: PUSH
44645: LD_INT 1
44647: PUSH
44648: EMPTY
44649: LIST
44650: LIST
44651: PUSH
44652: LD_INT 1
44654: PUSH
44655: LD_INT 2
44657: PUSH
44658: EMPTY
44659: LIST
44660: LIST
44661: PUSH
44662: LD_INT 0
44664: PUSH
44665: LD_INT 2
44667: PUSH
44668: EMPTY
44669: LIST
44670: LIST
44671: PUSH
44672: LD_INT 1
44674: NEG
44675: PUSH
44676: LD_INT 1
44678: PUSH
44679: EMPTY
44680: LIST
44681: LIST
44682: PUSH
44683: LD_INT 2
44685: NEG
44686: PUSH
44687: LD_INT 0
44689: PUSH
44690: EMPTY
44691: LIST
44692: LIST
44693: PUSH
44694: LD_INT 2
44696: NEG
44697: PUSH
44698: LD_INT 1
44700: NEG
44701: PUSH
44702: EMPTY
44703: LIST
44704: LIST
44705: PUSH
44706: LD_INT 2
44708: NEG
44709: PUSH
44710: LD_INT 2
44712: NEG
44713: PUSH
44714: EMPTY
44715: LIST
44716: LIST
44717: PUSH
44718: LD_INT 2
44720: NEG
44721: PUSH
44722: LD_INT 3
44724: NEG
44725: PUSH
44726: EMPTY
44727: LIST
44728: LIST
44729: PUSH
44730: LD_INT 2
44732: PUSH
44733: LD_INT 1
44735: NEG
44736: PUSH
44737: EMPTY
44738: LIST
44739: LIST
44740: PUSH
44741: LD_INT 3
44743: PUSH
44744: LD_INT 1
44746: PUSH
44747: EMPTY
44748: LIST
44749: LIST
44750: PUSH
44751: LD_INT 1
44753: PUSH
44754: LD_INT 3
44756: PUSH
44757: EMPTY
44758: LIST
44759: LIST
44760: PUSH
44761: LD_INT 1
44763: NEG
44764: PUSH
44765: LD_INT 2
44767: PUSH
44768: EMPTY
44769: LIST
44770: LIST
44771: PUSH
44772: LD_INT 3
44774: NEG
44775: PUSH
44776: LD_INT 2
44778: NEG
44779: PUSH
44780: EMPTY
44781: LIST
44782: LIST
44783: PUSH
44784: EMPTY
44785: LIST
44786: LIST
44787: LIST
44788: LIST
44789: LIST
44790: LIST
44791: LIST
44792: LIST
44793: LIST
44794: LIST
44795: LIST
44796: LIST
44797: LIST
44798: LIST
44799: LIST
44800: LIST
44801: LIST
44802: LIST
44803: LIST
44804: LIST
44805: LIST
44806: LIST
44807: LIST
44808: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44809: LD_ADDR_VAR 0 34
44813: PUSH
44814: LD_INT 0
44816: PUSH
44817: LD_INT 0
44819: PUSH
44820: EMPTY
44821: LIST
44822: LIST
44823: PUSH
44824: LD_INT 0
44826: PUSH
44827: LD_INT 1
44829: NEG
44830: PUSH
44831: EMPTY
44832: LIST
44833: LIST
44834: PUSH
44835: LD_INT 1
44837: PUSH
44838: LD_INT 0
44840: PUSH
44841: EMPTY
44842: LIST
44843: LIST
44844: PUSH
44845: LD_INT 1
44847: PUSH
44848: LD_INT 1
44850: PUSH
44851: EMPTY
44852: LIST
44853: LIST
44854: PUSH
44855: LD_INT 0
44857: PUSH
44858: LD_INT 1
44860: PUSH
44861: EMPTY
44862: LIST
44863: LIST
44864: PUSH
44865: LD_INT 1
44867: NEG
44868: PUSH
44869: LD_INT 0
44871: PUSH
44872: EMPTY
44873: LIST
44874: LIST
44875: PUSH
44876: LD_INT 1
44878: NEG
44879: PUSH
44880: LD_INT 1
44882: NEG
44883: PUSH
44884: EMPTY
44885: LIST
44886: LIST
44887: PUSH
44888: LD_INT 1
44890: NEG
44891: PUSH
44892: LD_INT 2
44894: NEG
44895: PUSH
44896: EMPTY
44897: LIST
44898: LIST
44899: PUSH
44900: LD_INT 0
44902: PUSH
44903: LD_INT 2
44905: NEG
44906: PUSH
44907: EMPTY
44908: LIST
44909: LIST
44910: PUSH
44911: LD_INT 1
44913: PUSH
44914: LD_INT 1
44916: NEG
44917: PUSH
44918: EMPTY
44919: LIST
44920: LIST
44921: PUSH
44922: LD_INT 2
44924: PUSH
44925: LD_INT 1
44927: PUSH
44928: EMPTY
44929: LIST
44930: LIST
44931: PUSH
44932: LD_INT 2
44934: PUSH
44935: LD_INT 2
44937: PUSH
44938: EMPTY
44939: LIST
44940: LIST
44941: PUSH
44942: LD_INT 1
44944: PUSH
44945: LD_INT 2
44947: PUSH
44948: EMPTY
44949: LIST
44950: LIST
44951: PUSH
44952: LD_INT 1
44954: NEG
44955: PUSH
44956: LD_INT 1
44958: PUSH
44959: EMPTY
44960: LIST
44961: LIST
44962: PUSH
44963: LD_INT 2
44965: NEG
44966: PUSH
44967: LD_INT 0
44969: PUSH
44970: EMPTY
44971: LIST
44972: LIST
44973: PUSH
44974: LD_INT 2
44976: NEG
44977: PUSH
44978: LD_INT 1
44980: NEG
44981: PUSH
44982: EMPTY
44983: LIST
44984: LIST
44985: PUSH
44986: LD_INT 2
44988: NEG
44989: PUSH
44990: LD_INT 2
44992: NEG
44993: PUSH
44994: EMPTY
44995: LIST
44996: LIST
44997: PUSH
44998: LD_INT 1
45000: NEG
45001: PUSH
45002: LD_INT 3
45004: NEG
45005: PUSH
45006: EMPTY
45007: LIST
45008: LIST
45009: PUSH
45010: LD_INT 1
45012: PUSH
45013: LD_INT 2
45015: NEG
45016: PUSH
45017: EMPTY
45018: LIST
45019: LIST
45020: PUSH
45021: LD_INT 3
45023: PUSH
45024: LD_INT 2
45026: PUSH
45027: EMPTY
45028: LIST
45029: LIST
45030: PUSH
45031: LD_INT 2
45033: PUSH
45034: LD_INT 3
45036: PUSH
45037: EMPTY
45038: LIST
45039: LIST
45040: PUSH
45041: LD_INT 2
45043: NEG
45044: PUSH
45045: LD_INT 1
45047: PUSH
45048: EMPTY
45049: LIST
45050: LIST
45051: PUSH
45052: LD_INT 3
45054: NEG
45055: PUSH
45056: LD_INT 1
45058: NEG
45059: PUSH
45060: EMPTY
45061: LIST
45062: LIST
45063: PUSH
45064: EMPTY
45065: LIST
45066: LIST
45067: LIST
45068: LIST
45069: LIST
45070: LIST
45071: LIST
45072: LIST
45073: LIST
45074: LIST
45075: LIST
45076: LIST
45077: LIST
45078: LIST
45079: LIST
45080: LIST
45081: LIST
45082: LIST
45083: LIST
45084: LIST
45085: LIST
45086: LIST
45087: LIST
45088: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
45089: LD_ADDR_VAR 0 35
45093: PUSH
45094: LD_INT 0
45096: PUSH
45097: LD_INT 0
45099: PUSH
45100: EMPTY
45101: LIST
45102: LIST
45103: PUSH
45104: LD_INT 0
45106: PUSH
45107: LD_INT 1
45109: NEG
45110: PUSH
45111: EMPTY
45112: LIST
45113: LIST
45114: PUSH
45115: LD_INT 1
45117: PUSH
45118: LD_INT 0
45120: PUSH
45121: EMPTY
45122: LIST
45123: LIST
45124: PUSH
45125: LD_INT 1
45127: PUSH
45128: LD_INT 1
45130: PUSH
45131: EMPTY
45132: LIST
45133: LIST
45134: PUSH
45135: LD_INT 0
45137: PUSH
45138: LD_INT 1
45140: PUSH
45141: EMPTY
45142: LIST
45143: LIST
45144: PUSH
45145: LD_INT 1
45147: NEG
45148: PUSH
45149: LD_INT 0
45151: PUSH
45152: EMPTY
45153: LIST
45154: LIST
45155: PUSH
45156: LD_INT 1
45158: NEG
45159: PUSH
45160: LD_INT 1
45162: NEG
45163: PUSH
45164: EMPTY
45165: LIST
45166: LIST
45167: PUSH
45168: LD_INT 2
45170: PUSH
45171: LD_INT 1
45173: PUSH
45174: EMPTY
45175: LIST
45176: LIST
45177: PUSH
45178: LD_INT 2
45180: NEG
45181: PUSH
45182: LD_INT 1
45184: NEG
45185: PUSH
45186: EMPTY
45187: LIST
45188: LIST
45189: PUSH
45190: EMPTY
45191: LIST
45192: LIST
45193: LIST
45194: LIST
45195: LIST
45196: LIST
45197: LIST
45198: LIST
45199: LIST
45200: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
45201: LD_ADDR_VAR 0 36
45205: PUSH
45206: LD_INT 0
45208: PUSH
45209: LD_INT 0
45211: PUSH
45212: EMPTY
45213: LIST
45214: LIST
45215: PUSH
45216: LD_INT 0
45218: PUSH
45219: LD_INT 1
45221: NEG
45222: PUSH
45223: EMPTY
45224: LIST
45225: LIST
45226: PUSH
45227: LD_INT 1
45229: PUSH
45230: LD_INT 0
45232: PUSH
45233: EMPTY
45234: LIST
45235: LIST
45236: PUSH
45237: LD_INT 1
45239: PUSH
45240: LD_INT 1
45242: PUSH
45243: EMPTY
45244: LIST
45245: LIST
45246: PUSH
45247: LD_INT 0
45249: PUSH
45250: LD_INT 1
45252: PUSH
45253: EMPTY
45254: LIST
45255: LIST
45256: PUSH
45257: LD_INT 1
45259: NEG
45260: PUSH
45261: LD_INT 0
45263: PUSH
45264: EMPTY
45265: LIST
45266: LIST
45267: PUSH
45268: LD_INT 1
45270: NEG
45271: PUSH
45272: LD_INT 1
45274: NEG
45275: PUSH
45276: EMPTY
45277: LIST
45278: LIST
45279: PUSH
45280: LD_INT 1
45282: NEG
45283: PUSH
45284: LD_INT 2
45286: NEG
45287: PUSH
45288: EMPTY
45289: LIST
45290: LIST
45291: PUSH
45292: LD_INT 1
45294: PUSH
45295: LD_INT 2
45297: PUSH
45298: EMPTY
45299: LIST
45300: LIST
45301: PUSH
45302: EMPTY
45303: LIST
45304: LIST
45305: LIST
45306: LIST
45307: LIST
45308: LIST
45309: LIST
45310: LIST
45311: LIST
45312: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
45313: LD_ADDR_VAR 0 37
45317: PUSH
45318: LD_INT 0
45320: PUSH
45321: LD_INT 0
45323: PUSH
45324: EMPTY
45325: LIST
45326: LIST
45327: PUSH
45328: LD_INT 0
45330: PUSH
45331: LD_INT 1
45333: NEG
45334: PUSH
45335: EMPTY
45336: LIST
45337: LIST
45338: PUSH
45339: LD_INT 1
45341: PUSH
45342: LD_INT 0
45344: PUSH
45345: EMPTY
45346: LIST
45347: LIST
45348: PUSH
45349: LD_INT 1
45351: PUSH
45352: LD_INT 1
45354: PUSH
45355: EMPTY
45356: LIST
45357: LIST
45358: PUSH
45359: LD_INT 0
45361: PUSH
45362: LD_INT 1
45364: PUSH
45365: EMPTY
45366: LIST
45367: LIST
45368: PUSH
45369: LD_INT 1
45371: NEG
45372: PUSH
45373: LD_INT 0
45375: PUSH
45376: EMPTY
45377: LIST
45378: LIST
45379: PUSH
45380: LD_INT 1
45382: NEG
45383: PUSH
45384: LD_INT 1
45386: NEG
45387: PUSH
45388: EMPTY
45389: LIST
45390: LIST
45391: PUSH
45392: LD_INT 1
45394: PUSH
45395: LD_INT 1
45397: NEG
45398: PUSH
45399: EMPTY
45400: LIST
45401: LIST
45402: PUSH
45403: LD_INT 1
45405: NEG
45406: PUSH
45407: LD_INT 1
45409: PUSH
45410: EMPTY
45411: LIST
45412: LIST
45413: PUSH
45414: EMPTY
45415: LIST
45416: LIST
45417: LIST
45418: LIST
45419: LIST
45420: LIST
45421: LIST
45422: LIST
45423: LIST
45424: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
45425: LD_ADDR_VAR 0 38
45429: PUSH
45430: LD_INT 0
45432: PUSH
45433: LD_INT 0
45435: PUSH
45436: EMPTY
45437: LIST
45438: LIST
45439: PUSH
45440: LD_INT 0
45442: PUSH
45443: LD_INT 1
45445: NEG
45446: PUSH
45447: EMPTY
45448: LIST
45449: LIST
45450: PUSH
45451: LD_INT 1
45453: PUSH
45454: LD_INT 0
45456: PUSH
45457: EMPTY
45458: LIST
45459: LIST
45460: PUSH
45461: LD_INT 1
45463: PUSH
45464: LD_INT 1
45466: PUSH
45467: EMPTY
45468: LIST
45469: LIST
45470: PUSH
45471: LD_INT 0
45473: PUSH
45474: LD_INT 1
45476: PUSH
45477: EMPTY
45478: LIST
45479: LIST
45480: PUSH
45481: LD_INT 1
45483: NEG
45484: PUSH
45485: LD_INT 0
45487: PUSH
45488: EMPTY
45489: LIST
45490: LIST
45491: PUSH
45492: LD_INT 1
45494: NEG
45495: PUSH
45496: LD_INT 1
45498: NEG
45499: PUSH
45500: EMPTY
45501: LIST
45502: LIST
45503: PUSH
45504: LD_INT 2
45506: PUSH
45507: LD_INT 1
45509: PUSH
45510: EMPTY
45511: LIST
45512: LIST
45513: PUSH
45514: LD_INT 2
45516: NEG
45517: PUSH
45518: LD_INT 1
45520: NEG
45521: PUSH
45522: EMPTY
45523: LIST
45524: LIST
45525: PUSH
45526: EMPTY
45527: LIST
45528: LIST
45529: LIST
45530: LIST
45531: LIST
45532: LIST
45533: LIST
45534: LIST
45535: LIST
45536: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
45537: LD_ADDR_VAR 0 39
45541: PUSH
45542: LD_INT 0
45544: PUSH
45545: LD_INT 0
45547: PUSH
45548: EMPTY
45549: LIST
45550: LIST
45551: PUSH
45552: LD_INT 0
45554: PUSH
45555: LD_INT 1
45557: NEG
45558: PUSH
45559: EMPTY
45560: LIST
45561: LIST
45562: PUSH
45563: LD_INT 1
45565: PUSH
45566: LD_INT 0
45568: PUSH
45569: EMPTY
45570: LIST
45571: LIST
45572: PUSH
45573: LD_INT 1
45575: PUSH
45576: LD_INT 1
45578: PUSH
45579: EMPTY
45580: LIST
45581: LIST
45582: PUSH
45583: LD_INT 0
45585: PUSH
45586: LD_INT 1
45588: PUSH
45589: EMPTY
45590: LIST
45591: LIST
45592: PUSH
45593: LD_INT 1
45595: NEG
45596: PUSH
45597: LD_INT 0
45599: PUSH
45600: EMPTY
45601: LIST
45602: LIST
45603: PUSH
45604: LD_INT 1
45606: NEG
45607: PUSH
45608: LD_INT 1
45610: NEG
45611: PUSH
45612: EMPTY
45613: LIST
45614: LIST
45615: PUSH
45616: LD_INT 1
45618: NEG
45619: PUSH
45620: LD_INT 2
45622: NEG
45623: PUSH
45624: EMPTY
45625: LIST
45626: LIST
45627: PUSH
45628: LD_INT 1
45630: PUSH
45631: LD_INT 2
45633: PUSH
45634: EMPTY
45635: LIST
45636: LIST
45637: PUSH
45638: EMPTY
45639: LIST
45640: LIST
45641: LIST
45642: LIST
45643: LIST
45644: LIST
45645: LIST
45646: LIST
45647: LIST
45648: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
45649: LD_ADDR_VAR 0 40
45653: PUSH
45654: LD_INT 0
45656: PUSH
45657: LD_INT 0
45659: PUSH
45660: EMPTY
45661: LIST
45662: LIST
45663: PUSH
45664: LD_INT 0
45666: PUSH
45667: LD_INT 1
45669: NEG
45670: PUSH
45671: EMPTY
45672: LIST
45673: LIST
45674: PUSH
45675: LD_INT 1
45677: PUSH
45678: LD_INT 0
45680: PUSH
45681: EMPTY
45682: LIST
45683: LIST
45684: PUSH
45685: LD_INT 1
45687: PUSH
45688: LD_INT 1
45690: PUSH
45691: EMPTY
45692: LIST
45693: LIST
45694: PUSH
45695: LD_INT 0
45697: PUSH
45698: LD_INT 1
45700: PUSH
45701: EMPTY
45702: LIST
45703: LIST
45704: PUSH
45705: LD_INT 1
45707: NEG
45708: PUSH
45709: LD_INT 0
45711: PUSH
45712: EMPTY
45713: LIST
45714: LIST
45715: PUSH
45716: LD_INT 1
45718: NEG
45719: PUSH
45720: LD_INT 1
45722: NEG
45723: PUSH
45724: EMPTY
45725: LIST
45726: LIST
45727: PUSH
45728: LD_INT 1
45730: PUSH
45731: LD_INT 1
45733: NEG
45734: PUSH
45735: EMPTY
45736: LIST
45737: LIST
45738: PUSH
45739: LD_INT 1
45741: NEG
45742: PUSH
45743: LD_INT 1
45745: PUSH
45746: EMPTY
45747: LIST
45748: LIST
45749: PUSH
45750: EMPTY
45751: LIST
45752: LIST
45753: LIST
45754: LIST
45755: LIST
45756: LIST
45757: LIST
45758: LIST
45759: LIST
45760: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45761: LD_ADDR_VAR 0 41
45765: PUSH
45766: LD_INT 0
45768: PUSH
45769: LD_INT 0
45771: PUSH
45772: EMPTY
45773: LIST
45774: LIST
45775: PUSH
45776: LD_INT 0
45778: PUSH
45779: LD_INT 1
45781: NEG
45782: PUSH
45783: EMPTY
45784: LIST
45785: LIST
45786: PUSH
45787: LD_INT 1
45789: PUSH
45790: LD_INT 0
45792: PUSH
45793: EMPTY
45794: LIST
45795: LIST
45796: PUSH
45797: LD_INT 1
45799: PUSH
45800: LD_INT 1
45802: PUSH
45803: EMPTY
45804: LIST
45805: LIST
45806: PUSH
45807: LD_INT 0
45809: PUSH
45810: LD_INT 1
45812: PUSH
45813: EMPTY
45814: LIST
45815: LIST
45816: PUSH
45817: LD_INT 1
45819: NEG
45820: PUSH
45821: LD_INT 0
45823: PUSH
45824: EMPTY
45825: LIST
45826: LIST
45827: PUSH
45828: LD_INT 1
45830: NEG
45831: PUSH
45832: LD_INT 1
45834: NEG
45835: PUSH
45836: EMPTY
45837: LIST
45838: LIST
45839: PUSH
45840: LD_INT 1
45842: NEG
45843: PUSH
45844: LD_INT 2
45846: NEG
45847: PUSH
45848: EMPTY
45849: LIST
45850: LIST
45851: PUSH
45852: LD_INT 1
45854: PUSH
45855: LD_INT 1
45857: NEG
45858: PUSH
45859: EMPTY
45860: LIST
45861: LIST
45862: PUSH
45863: LD_INT 2
45865: PUSH
45866: LD_INT 0
45868: PUSH
45869: EMPTY
45870: LIST
45871: LIST
45872: PUSH
45873: LD_INT 2
45875: PUSH
45876: LD_INT 1
45878: PUSH
45879: EMPTY
45880: LIST
45881: LIST
45882: PUSH
45883: LD_INT 2
45885: PUSH
45886: LD_INT 2
45888: PUSH
45889: EMPTY
45890: LIST
45891: LIST
45892: PUSH
45893: LD_INT 1
45895: PUSH
45896: LD_INT 2
45898: PUSH
45899: EMPTY
45900: LIST
45901: LIST
45902: PUSH
45903: LD_INT 1
45905: NEG
45906: PUSH
45907: LD_INT 1
45909: PUSH
45910: EMPTY
45911: LIST
45912: LIST
45913: PUSH
45914: LD_INT 2
45916: NEG
45917: PUSH
45918: LD_INT 0
45920: PUSH
45921: EMPTY
45922: LIST
45923: LIST
45924: PUSH
45925: LD_INT 2
45927: NEG
45928: PUSH
45929: LD_INT 1
45931: NEG
45932: PUSH
45933: EMPTY
45934: LIST
45935: LIST
45936: PUSH
45937: LD_INT 2
45939: NEG
45940: PUSH
45941: LD_INT 2
45943: NEG
45944: PUSH
45945: EMPTY
45946: LIST
45947: LIST
45948: PUSH
45949: LD_INT 2
45951: NEG
45952: PUSH
45953: LD_INT 3
45955: NEG
45956: PUSH
45957: EMPTY
45958: LIST
45959: LIST
45960: PUSH
45961: LD_INT 2
45963: PUSH
45964: LD_INT 1
45966: NEG
45967: PUSH
45968: EMPTY
45969: LIST
45970: LIST
45971: PUSH
45972: LD_INT 3
45974: PUSH
45975: LD_INT 0
45977: PUSH
45978: EMPTY
45979: LIST
45980: LIST
45981: PUSH
45982: LD_INT 3
45984: PUSH
45985: LD_INT 1
45987: PUSH
45988: EMPTY
45989: LIST
45990: LIST
45991: PUSH
45992: LD_INT 3
45994: PUSH
45995: LD_INT 2
45997: PUSH
45998: EMPTY
45999: LIST
46000: LIST
46001: PUSH
46002: LD_INT 3
46004: PUSH
46005: LD_INT 3
46007: PUSH
46008: EMPTY
46009: LIST
46010: LIST
46011: PUSH
46012: LD_INT 2
46014: PUSH
46015: LD_INT 3
46017: PUSH
46018: EMPTY
46019: LIST
46020: LIST
46021: PUSH
46022: LD_INT 2
46024: NEG
46025: PUSH
46026: LD_INT 1
46028: PUSH
46029: EMPTY
46030: LIST
46031: LIST
46032: PUSH
46033: LD_INT 3
46035: NEG
46036: PUSH
46037: LD_INT 0
46039: PUSH
46040: EMPTY
46041: LIST
46042: LIST
46043: PUSH
46044: LD_INT 3
46046: NEG
46047: PUSH
46048: LD_INT 1
46050: NEG
46051: PUSH
46052: EMPTY
46053: LIST
46054: LIST
46055: PUSH
46056: LD_INT 3
46058: NEG
46059: PUSH
46060: LD_INT 2
46062: NEG
46063: PUSH
46064: EMPTY
46065: LIST
46066: LIST
46067: PUSH
46068: LD_INT 3
46070: NEG
46071: PUSH
46072: LD_INT 3
46074: NEG
46075: PUSH
46076: EMPTY
46077: LIST
46078: LIST
46079: PUSH
46080: EMPTY
46081: LIST
46082: LIST
46083: LIST
46084: LIST
46085: LIST
46086: LIST
46087: LIST
46088: LIST
46089: LIST
46090: LIST
46091: LIST
46092: LIST
46093: LIST
46094: LIST
46095: LIST
46096: LIST
46097: LIST
46098: LIST
46099: LIST
46100: LIST
46101: LIST
46102: LIST
46103: LIST
46104: LIST
46105: LIST
46106: LIST
46107: LIST
46108: LIST
46109: LIST
46110: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46111: LD_ADDR_VAR 0 42
46115: PUSH
46116: LD_INT 0
46118: PUSH
46119: LD_INT 0
46121: PUSH
46122: EMPTY
46123: LIST
46124: LIST
46125: PUSH
46126: LD_INT 0
46128: PUSH
46129: LD_INT 1
46131: NEG
46132: PUSH
46133: EMPTY
46134: LIST
46135: LIST
46136: PUSH
46137: LD_INT 1
46139: PUSH
46140: LD_INT 0
46142: PUSH
46143: EMPTY
46144: LIST
46145: LIST
46146: PUSH
46147: LD_INT 1
46149: PUSH
46150: LD_INT 1
46152: PUSH
46153: EMPTY
46154: LIST
46155: LIST
46156: PUSH
46157: LD_INT 0
46159: PUSH
46160: LD_INT 1
46162: PUSH
46163: EMPTY
46164: LIST
46165: LIST
46166: PUSH
46167: LD_INT 1
46169: NEG
46170: PUSH
46171: LD_INT 0
46173: PUSH
46174: EMPTY
46175: LIST
46176: LIST
46177: PUSH
46178: LD_INT 1
46180: NEG
46181: PUSH
46182: LD_INT 1
46184: NEG
46185: PUSH
46186: EMPTY
46187: LIST
46188: LIST
46189: PUSH
46190: LD_INT 1
46192: NEG
46193: PUSH
46194: LD_INT 2
46196: NEG
46197: PUSH
46198: EMPTY
46199: LIST
46200: LIST
46201: PUSH
46202: LD_INT 0
46204: PUSH
46205: LD_INT 2
46207: NEG
46208: PUSH
46209: EMPTY
46210: LIST
46211: LIST
46212: PUSH
46213: LD_INT 1
46215: PUSH
46216: LD_INT 1
46218: NEG
46219: PUSH
46220: EMPTY
46221: LIST
46222: LIST
46223: PUSH
46224: LD_INT 2
46226: PUSH
46227: LD_INT 1
46229: PUSH
46230: EMPTY
46231: LIST
46232: LIST
46233: PUSH
46234: LD_INT 2
46236: PUSH
46237: LD_INT 2
46239: PUSH
46240: EMPTY
46241: LIST
46242: LIST
46243: PUSH
46244: LD_INT 1
46246: PUSH
46247: LD_INT 2
46249: PUSH
46250: EMPTY
46251: LIST
46252: LIST
46253: PUSH
46254: LD_INT 0
46256: PUSH
46257: LD_INT 2
46259: PUSH
46260: EMPTY
46261: LIST
46262: LIST
46263: PUSH
46264: LD_INT 1
46266: NEG
46267: PUSH
46268: LD_INT 1
46270: PUSH
46271: EMPTY
46272: LIST
46273: LIST
46274: PUSH
46275: LD_INT 2
46277: NEG
46278: PUSH
46279: LD_INT 1
46281: NEG
46282: PUSH
46283: EMPTY
46284: LIST
46285: LIST
46286: PUSH
46287: LD_INT 2
46289: NEG
46290: PUSH
46291: LD_INT 2
46293: NEG
46294: PUSH
46295: EMPTY
46296: LIST
46297: LIST
46298: PUSH
46299: LD_INT 2
46301: NEG
46302: PUSH
46303: LD_INT 3
46305: NEG
46306: PUSH
46307: EMPTY
46308: LIST
46309: LIST
46310: PUSH
46311: LD_INT 1
46313: NEG
46314: PUSH
46315: LD_INT 3
46317: NEG
46318: PUSH
46319: EMPTY
46320: LIST
46321: LIST
46322: PUSH
46323: LD_INT 0
46325: PUSH
46326: LD_INT 3
46328: NEG
46329: PUSH
46330: EMPTY
46331: LIST
46332: LIST
46333: PUSH
46334: LD_INT 1
46336: PUSH
46337: LD_INT 2
46339: NEG
46340: PUSH
46341: EMPTY
46342: LIST
46343: LIST
46344: PUSH
46345: LD_INT 3
46347: PUSH
46348: LD_INT 2
46350: PUSH
46351: EMPTY
46352: LIST
46353: LIST
46354: PUSH
46355: LD_INT 3
46357: PUSH
46358: LD_INT 3
46360: PUSH
46361: EMPTY
46362: LIST
46363: LIST
46364: PUSH
46365: LD_INT 2
46367: PUSH
46368: LD_INT 3
46370: PUSH
46371: EMPTY
46372: LIST
46373: LIST
46374: PUSH
46375: LD_INT 1
46377: PUSH
46378: LD_INT 3
46380: PUSH
46381: EMPTY
46382: LIST
46383: LIST
46384: PUSH
46385: LD_INT 0
46387: PUSH
46388: LD_INT 3
46390: PUSH
46391: EMPTY
46392: LIST
46393: LIST
46394: PUSH
46395: LD_INT 1
46397: NEG
46398: PUSH
46399: LD_INT 2
46401: PUSH
46402: EMPTY
46403: LIST
46404: LIST
46405: PUSH
46406: LD_INT 3
46408: NEG
46409: PUSH
46410: LD_INT 2
46412: NEG
46413: PUSH
46414: EMPTY
46415: LIST
46416: LIST
46417: PUSH
46418: LD_INT 3
46420: NEG
46421: PUSH
46422: LD_INT 3
46424: NEG
46425: PUSH
46426: EMPTY
46427: LIST
46428: LIST
46429: PUSH
46430: EMPTY
46431: LIST
46432: LIST
46433: LIST
46434: LIST
46435: LIST
46436: LIST
46437: LIST
46438: LIST
46439: LIST
46440: LIST
46441: LIST
46442: LIST
46443: LIST
46444: LIST
46445: LIST
46446: LIST
46447: LIST
46448: LIST
46449: LIST
46450: LIST
46451: LIST
46452: LIST
46453: LIST
46454: LIST
46455: LIST
46456: LIST
46457: LIST
46458: LIST
46459: LIST
46460: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46461: LD_ADDR_VAR 0 43
46465: PUSH
46466: LD_INT 0
46468: PUSH
46469: LD_INT 0
46471: PUSH
46472: EMPTY
46473: LIST
46474: LIST
46475: PUSH
46476: LD_INT 0
46478: PUSH
46479: LD_INT 1
46481: NEG
46482: PUSH
46483: EMPTY
46484: LIST
46485: LIST
46486: PUSH
46487: LD_INT 1
46489: PUSH
46490: LD_INT 0
46492: PUSH
46493: EMPTY
46494: LIST
46495: LIST
46496: PUSH
46497: LD_INT 1
46499: PUSH
46500: LD_INT 1
46502: PUSH
46503: EMPTY
46504: LIST
46505: LIST
46506: PUSH
46507: LD_INT 0
46509: PUSH
46510: LD_INT 1
46512: PUSH
46513: EMPTY
46514: LIST
46515: LIST
46516: PUSH
46517: LD_INT 1
46519: NEG
46520: PUSH
46521: LD_INT 0
46523: PUSH
46524: EMPTY
46525: LIST
46526: LIST
46527: PUSH
46528: LD_INT 1
46530: NEG
46531: PUSH
46532: LD_INT 1
46534: NEG
46535: PUSH
46536: EMPTY
46537: LIST
46538: LIST
46539: PUSH
46540: LD_INT 1
46542: NEG
46543: PUSH
46544: LD_INT 2
46546: NEG
46547: PUSH
46548: EMPTY
46549: LIST
46550: LIST
46551: PUSH
46552: LD_INT 0
46554: PUSH
46555: LD_INT 2
46557: NEG
46558: PUSH
46559: EMPTY
46560: LIST
46561: LIST
46562: PUSH
46563: LD_INT 1
46565: PUSH
46566: LD_INT 1
46568: NEG
46569: PUSH
46570: EMPTY
46571: LIST
46572: LIST
46573: PUSH
46574: LD_INT 2
46576: PUSH
46577: LD_INT 0
46579: PUSH
46580: EMPTY
46581: LIST
46582: LIST
46583: PUSH
46584: LD_INT 2
46586: PUSH
46587: LD_INT 1
46589: PUSH
46590: EMPTY
46591: LIST
46592: LIST
46593: PUSH
46594: LD_INT 1
46596: PUSH
46597: LD_INT 2
46599: PUSH
46600: EMPTY
46601: LIST
46602: LIST
46603: PUSH
46604: LD_INT 0
46606: PUSH
46607: LD_INT 2
46609: PUSH
46610: EMPTY
46611: LIST
46612: LIST
46613: PUSH
46614: LD_INT 1
46616: NEG
46617: PUSH
46618: LD_INT 1
46620: PUSH
46621: EMPTY
46622: LIST
46623: LIST
46624: PUSH
46625: LD_INT 2
46627: NEG
46628: PUSH
46629: LD_INT 0
46631: PUSH
46632: EMPTY
46633: LIST
46634: LIST
46635: PUSH
46636: LD_INT 2
46638: NEG
46639: PUSH
46640: LD_INT 1
46642: NEG
46643: PUSH
46644: EMPTY
46645: LIST
46646: LIST
46647: PUSH
46648: LD_INT 1
46650: NEG
46651: PUSH
46652: LD_INT 3
46654: NEG
46655: PUSH
46656: EMPTY
46657: LIST
46658: LIST
46659: PUSH
46660: LD_INT 0
46662: PUSH
46663: LD_INT 3
46665: NEG
46666: PUSH
46667: EMPTY
46668: LIST
46669: LIST
46670: PUSH
46671: LD_INT 1
46673: PUSH
46674: LD_INT 2
46676: NEG
46677: PUSH
46678: EMPTY
46679: LIST
46680: LIST
46681: PUSH
46682: LD_INT 2
46684: PUSH
46685: LD_INT 1
46687: NEG
46688: PUSH
46689: EMPTY
46690: LIST
46691: LIST
46692: PUSH
46693: LD_INT 3
46695: PUSH
46696: LD_INT 0
46698: PUSH
46699: EMPTY
46700: LIST
46701: LIST
46702: PUSH
46703: LD_INT 3
46705: PUSH
46706: LD_INT 1
46708: PUSH
46709: EMPTY
46710: LIST
46711: LIST
46712: PUSH
46713: LD_INT 1
46715: PUSH
46716: LD_INT 3
46718: PUSH
46719: EMPTY
46720: LIST
46721: LIST
46722: PUSH
46723: LD_INT 0
46725: PUSH
46726: LD_INT 3
46728: PUSH
46729: EMPTY
46730: LIST
46731: LIST
46732: PUSH
46733: LD_INT 1
46735: NEG
46736: PUSH
46737: LD_INT 2
46739: PUSH
46740: EMPTY
46741: LIST
46742: LIST
46743: PUSH
46744: LD_INT 2
46746: NEG
46747: PUSH
46748: LD_INT 1
46750: PUSH
46751: EMPTY
46752: LIST
46753: LIST
46754: PUSH
46755: LD_INT 3
46757: NEG
46758: PUSH
46759: LD_INT 0
46761: PUSH
46762: EMPTY
46763: LIST
46764: LIST
46765: PUSH
46766: LD_INT 3
46768: NEG
46769: PUSH
46770: LD_INT 1
46772: NEG
46773: PUSH
46774: EMPTY
46775: LIST
46776: LIST
46777: PUSH
46778: EMPTY
46779: LIST
46780: LIST
46781: LIST
46782: LIST
46783: LIST
46784: LIST
46785: LIST
46786: LIST
46787: LIST
46788: LIST
46789: LIST
46790: LIST
46791: LIST
46792: LIST
46793: LIST
46794: LIST
46795: LIST
46796: LIST
46797: LIST
46798: LIST
46799: LIST
46800: LIST
46801: LIST
46802: LIST
46803: LIST
46804: LIST
46805: LIST
46806: LIST
46807: LIST
46808: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46809: LD_ADDR_VAR 0 44
46813: PUSH
46814: LD_INT 0
46816: PUSH
46817: LD_INT 0
46819: PUSH
46820: EMPTY
46821: LIST
46822: LIST
46823: PUSH
46824: LD_INT 0
46826: PUSH
46827: LD_INT 1
46829: NEG
46830: PUSH
46831: EMPTY
46832: LIST
46833: LIST
46834: PUSH
46835: LD_INT 1
46837: PUSH
46838: LD_INT 0
46840: PUSH
46841: EMPTY
46842: LIST
46843: LIST
46844: PUSH
46845: LD_INT 1
46847: PUSH
46848: LD_INT 1
46850: PUSH
46851: EMPTY
46852: LIST
46853: LIST
46854: PUSH
46855: LD_INT 0
46857: PUSH
46858: LD_INT 1
46860: PUSH
46861: EMPTY
46862: LIST
46863: LIST
46864: PUSH
46865: LD_INT 1
46867: NEG
46868: PUSH
46869: LD_INT 0
46871: PUSH
46872: EMPTY
46873: LIST
46874: LIST
46875: PUSH
46876: LD_INT 1
46878: NEG
46879: PUSH
46880: LD_INT 1
46882: NEG
46883: PUSH
46884: EMPTY
46885: LIST
46886: LIST
46887: PUSH
46888: LD_INT 1
46890: NEG
46891: PUSH
46892: LD_INT 2
46894: NEG
46895: PUSH
46896: EMPTY
46897: LIST
46898: LIST
46899: PUSH
46900: LD_INT 1
46902: PUSH
46903: LD_INT 1
46905: NEG
46906: PUSH
46907: EMPTY
46908: LIST
46909: LIST
46910: PUSH
46911: LD_INT 2
46913: PUSH
46914: LD_INT 0
46916: PUSH
46917: EMPTY
46918: LIST
46919: LIST
46920: PUSH
46921: LD_INT 2
46923: PUSH
46924: LD_INT 1
46926: PUSH
46927: EMPTY
46928: LIST
46929: LIST
46930: PUSH
46931: LD_INT 2
46933: PUSH
46934: LD_INT 2
46936: PUSH
46937: EMPTY
46938: LIST
46939: LIST
46940: PUSH
46941: LD_INT 1
46943: PUSH
46944: LD_INT 2
46946: PUSH
46947: EMPTY
46948: LIST
46949: LIST
46950: PUSH
46951: LD_INT 1
46953: NEG
46954: PUSH
46955: LD_INT 1
46957: PUSH
46958: EMPTY
46959: LIST
46960: LIST
46961: PUSH
46962: LD_INT 2
46964: NEG
46965: PUSH
46966: LD_INT 0
46968: PUSH
46969: EMPTY
46970: LIST
46971: LIST
46972: PUSH
46973: LD_INT 2
46975: NEG
46976: PUSH
46977: LD_INT 1
46979: NEG
46980: PUSH
46981: EMPTY
46982: LIST
46983: LIST
46984: PUSH
46985: LD_INT 2
46987: NEG
46988: PUSH
46989: LD_INT 2
46991: NEG
46992: PUSH
46993: EMPTY
46994: LIST
46995: LIST
46996: PUSH
46997: LD_INT 2
46999: NEG
47000: PUSH
47001: LD_INT 3
47003: NEG
47004: PUSH
47005: EMPTY
47006: LIST
47007: LIST
47008: PUSH
47009: LD_INT 2
47011: PUSH
47012: LD_INT 1
47014: NEG
47015: PUSH
47016: EMPTY
47017: LIST
47018: LIST
47019: PUSH
47020: LD_INT 3
47022: PUSH
47023: LD_INT 0
47025: PUSH
47026: EMPTY
47027: LIST
47028: LIST
47029: PUSH
47030: LD_INT 3
47032: PUSH
47033: LD_INT 1
47035: PUSH
47036: EMPTY
47037: LIST
47038: LIST
47039: PUSH
47040: LD_INT 3
47042: PUSH
47043: LD_INT 2
47045: PUSH
47046: EMPTY
47047: LIST
47048: LIST
47049: PUSH
47050: LD_INT 3
47052: PUSH
47053: LD_INT 3
47055: PUSH
47056: EMPTY
47057: LIST
47058: LIST
47059: PUSH
47060: LD_INT 2
47062: PUSH
47063: LD_INT 3
47065: PUSH
47066: EMPTY
47067: LIST
47068: LIST
47069: PUSH
47070: LD_INT 2
47072: NEG
47073: PUSH
47074: LD_INT 1
47076: PUSH
47077: EMPTY
47078: LIST
47079: LIST
47080: PUSH
47081: LD_INT 3
47083: NEG
47084: PUSH
47085: LD_INT 0
47087: PUSH
47088: EMPTY
47089: LIST
47090: LIST
47091: PUSH
47092: LD_INT 3
47094: NEG
47095: PUSH
47096: LD_INT 1
47098: NEG
47099: PUSH
47100: EMPTY
47101: LIST
47102: LIST
47103: PUSH
47104: LD_INT 3
47106: NEG
47107: PUSH
47108: LD_INT 2
47110: NEG
47111: PUSH
47112: EMPTY
47113: LIST
47114: LIST
47115: PUSH
47116: LD_INT 3
47118: NEG
47119: PUSH
47120: LD_INT 3
47122: NEG
47123: PUSH
47124: EMPTY
47125: LIST
47126: LIST
47127: PUSH
47128: EMPTY
47129: LIST
47130: LIST
47131: LIST
47132: LIST
47133: LIST
47134: LIST
47135: LIST
47136: LIST
47137: LIST
47138: LIST
47139: LIST
47140: LIST
47141: LIST
47142: LIST
47143: LIST
47144: LIST
47145: LIST
47146: LIST
47147: LIST
47148: LIST
47149: LIST
47150: LIST
47151: LIST
47152: LIST
47153: LIST
47154: LIST
47155: LIST
47156: LIST
47157: LIST
47158: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47159: LD_ADDR_VAR 0 45
47163: PUSH
47164: LD_INT 0
47166: PUSH
47167: LD_INT 0
47169: PUSH
47170: EMPTY
47171: LIST
47172: LIST
47173: PUSH
47174: LD_INT 0
47176: PUSH
47177: LD_INT 1
47179: NEG
47180: PUSH
47181: EMPTY
47182: LIST
47183: LIST
47184: PUSH
47185: LD_INT 1
47187: PUSH
47188: LD_INT 0
47190: PUSH
47191: EMPTY
47192: LIST
47193: LIST
47194: PUSH
47195: LD_INT 1
47197: PUSH
47198: LD_INT 1
47200: PUSH
47201: EMPTY
47202: LIST
47203: LIST
47204: PUSH
47205: LD_INT 0
47207: PUSH
47208: LD_INT 1
47210: PUSH
47211: EMPTY
47212: LIST
47213: LIST
47214: PUSH
47215: LD_INT 1
47217: NEG
47218: PUSH
47219: LD_INT 0
47221: PUSH
47222: EMPTY
47223: LIST
47224: LIST
47225: PUSH
47226: LD_INT 1
47228: NEG
47229: PUSH
47230: LD_INT 1
47232: NEG
47233: PUSH
47234: EMPTY
47235: LIST
47236: LIST
47237: PUSH
47238: LD_INT 1
47240: NEG
47241: PUSH
47242: LD_INT 2
47244: NEG
47245: PUSH
47246: EMPTY
47247: LIST
47248: LIST
47249: PUSH
47250: LD_INT 0
47252: PUSH
47253: LD_INT 2
47255: NEG
47256: PUSH
47257: EMPTY
47258: LIST
47259: LIST
47260: PUSH
47261: LD_INT 1
47263: PUSH
47264: LD_INT 1
47266: NEG
47267: PUSH
47268: EMPTY
47269: LIST
47270: LIST
47271: PUSH
47272: LD_INT 2
47274: PUSH
47275: LD_INT 1
47277: PUSH
47278: EMPTY
47279: LIST
47280: LIST
47281: PUSH
47282: LD_INT 2
47284: PUSH
47285: LD_INT 2
47287: PUSH
47288: EMPTY
47289: LIST
47290: LIST
47291: PUSH
47292: LD_INT 1
47294: PUSH
47295: LD_INT 2
47297: PUSH
47298: EMPTY
47299: LIST
47300: LIST
47301: PUSH
47302: LD_INT 0
47304: PUSH
47305: LD_INT 2
47307: PUSH
47308: EMPTY
47309: LIST
47310: LIST
47311: PUSH
47312: LD_INT 1
47314: NEG
47315: PUSH
47316: LD_INT 1
47318: PUSH
47319: EMPTY
47320: LIST
47321: LIST
47322: PUSH
47323: LD_INT 2
47325: NEG
47326: PUSH
47327: LD_INT 1
47329: NEG
47330: PUSH
47331: EMPTY
47332: LIST
47333: LIST
47334: PUSH
47335: LD_INT 2
47337: NEG
47338: PUSH
47339: LD_INT 2
47341: NEG
47342: PUSH
47343: EMPTY
47344: LIST
47345: LIST
47346: PUSH
47347: LD_INT 2
47349: NEG
47350: PUSH
47351: LD_INT 3
47353: NEG
47354: PUSH
47355: EMPTY
47356: LIST
47357: LIST
47358: PUSH
47359: LD_INT 1
47361: NEG
47362: PUSH
47363: LD_INT 3
47365: NEG
47366: PUSH
47367: EMPTY
47368: LIST
47369: LIST
47370: PUSH
47371: LD_INT 0
47373: PUSH
47374: LD_INT 3
47376: NEG
47377: PUSH
47378: EMPTY
47379: LIST
47380: LIST
47381: PUSH
47382: LD_INT 1
47384: PUSH
47385: LD_INT 2
47387: NEG
47388: PUSH
47389: EMPTY
47390: LIST
47391: LIST
47392: PUSH
47393: LD_INT 3
47395: PUSH
47396: LD_INT 2
47398: PUSH
47399: EMPTY
47400: LIST
47401: LIST
47402: PUSH
47403: LD_INT 3
47405: PUSH
47406: LD_INT 3
47408: PUSH
47409: EMPTY
47410: LIST
47411: LIST
47412: PUSH
47413: LD_INT 2
47415: PUSH
47416: LD_INT 3
47418: PUSH
47419: EMPTY
47420: LIST
47421: LIST
47422: PUSH
47423: LD_INT 1
47425: PUSH
47426: LD_INT 3
47428: PUSH
47429: EMPTY
47430: LIST
47431: LIST
47432: PUSH
47433: LD_INT 0
47435: PUSH
47436: LD_INT 3
47438: PUSH
47439: EMPTY
47440: LIST
47441: LIST
47442: PUSH
47443: LD_INT 1
47445: NEG
47446: PUSH
47447: LD_INT 2
47449: PUSH
47450: EMPTY
47451: LIST
47452: LIST
47453: PUSH
47454: LD_INT 3
47456: NEG
47457: PUSH
47458: LD_INT 2
47460: NEG
47461: PUSH
47462: EMPTY
47463: LIST
47464: LIST
47465: PUSH
47466: LD_INT 3
47468: NEG
47469: PUSH
47470: LD_INT 3
47472: NEG
47473: PUSH
47474: EMPTY
47475: LIST
47476: LIST
47477: PUSH
47478: EMPTY
47479: LIST
47480: LIST
47481: LIST
47482: LIST
47483: LIST
47484: LIST
47485: LIST
47486: LIST
47487: LIST
47488: LIST
47489: LIST
47490: LIST
47491: LIST
47492: LIST
47493: LIST
47494: LIST
47495: LIST
47496: LIST
47497: LIST
47498: LIST
47499: LIST
47500: LIST
47501: LIST
47502: LIST
47503: LIST
47504: LIST
47505: LIST
47506: LIST
47507: LIST
47508: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47509: LD_ADDR_VAR 0 46
47513: PUSH
47514: LD_INT 0
47516: PUSH
47517: LD_INT 0
47519: PUSH
47520: EMPTY
47521: LIST
47522: LIST
47523: PUSH
47524: LD_INT 0
47526: PUSH
47527: LD_INT 1
47529: NEG
47530: PUSH
47531: EMPTY
47532: LIST
47533: LIST
47534: PUSH
47535: LD_INT 1
47537: PUSH
47538: LD_INT 0
47540: PUSH
47541: EMPTY
47542: LIST
47543: LIST
47544: PUSH
47545: LD_INT 1
47547: PUSH
47548: LD_INT 1
47550: PUSH
47551: EMPTY
47552: LIST
47553: LIST
47554: PUSH
47555: LD_INT 0
47557: PUSH
47558: LD_INT 1
47560: PUSH
47561: EMPTY
47562: LIST
47563: LIST
47564: PUSH
47565: LD_INT 1
47567: NEG
47568: PUSH
47569: LD_INT 0
47571: PUSH
47572: EMPTY
47573: LIST
47574: LIST
47575: PUSH
47576: LD_INT 1
47578: NEG
47579: PUSH
47580: LD_INT 1
47582: NEG
47583: PUSH
47584: EMPTY
47585: LIST
47586: LIST
47587: PUSH
47588: LD_INT 1
47590: NEG
47591: PUSH
47592: LD_INT 2
47594: NEG
47595: PUSH
47596: EMPTY
47597: LIST
47598: LIST
47599: PUSH
47600: LD_INT 0
47602: PUSH
47603: LD_INT 2
47605: NEG
47606: PUSH
47607: EMPTY
47608: LIST
47609: LIST
47610: PUSH
47611: LD_INT 1
47613: PUSH
47614: LD_INT 1
47616: NEG
47617: PUSH
47618: EMPTY
47619: LIST
47620: LIST
47621: PUSH
47622: LD_INT 2
47624: PUSH
47625: LD_INT 0
47627: PUSH
47628: EMPTY
47629: LIST
47630: LIST
47631: PUSH
47632: LD_INT 2
47634: PUSH
47635: LD_INT 1
47637: PUSH
47638: EMPTY
47639: LIST
47640: LIST
47641: PUSH
47642: LD_INT 1
47644: PUSH
47645: LD_INT 2
47647: PUSH
47648: EMPTY
47649: LIST
47650: LIST
47651: PUSH
47652: LD_INT 0
47654: PUSH
47655: LD_INT 2
47657: PUSH
47658: EMPTY
47659: LIST
47660: LIST
47661: PUSH
47662: LD_INT 1
47664: NEG
47665: PUSH
47666: LD_INT 1
47668: PUSH
47669: EMPTY
47670: LIST
47671: LIST
47672: PUSH
47673: LD_INT 2
47675: NEG
47676: PUSH
47677: LD_INT 0
47679: PUSH
47680: EMPTY
47681: LIST
47682: LIST
47683: PUSH
47684: LD_INT 2
47686: NEG
47687: PUSH
47688: LD_INT 1
47690: NEG
47691: PUSH
47692: EMPTY
47693: LIST
47694: LIST
47695: PUSH
47696: LD_INT 1
47698: NEG
47699: PUSH
47700: LD_INT 3
47702: NEG
47703: PUSH
47704: EMPTY
47705: LIST
47706: LIST
47707: PUSH
47708: LD_INT 0
47710: PUSH
47711: LD_INT 3
47713: NEG
47714: PUSH
47715: EMPTY
47716: LIST
47717: LIST
47718: PUSH
47719: LD_INT 1
47721: PUSH
47722: LD_INT 2
47724: NEG
47725: PUSH
47726: EMPTY
47727: LIST
47728: LIST
47729: PUSH
47730: LD_INT 2
47732: PUSH
47733: LD_INT 1
47735: NEG
47736: PUSH
47737: EMPTY
47738: LIST
47739: LIST
47740: PUSH
47741: LD_INT 3
47743: PUSH
47744: LD_INT 0
47746: PUSH
47747: EMPTY
47748: LIST
47749: LIST
47750: PUSH
47751: LD_INT 3
47753: PUSH
47754: LD_INT 1
47756: PUSH
47757: EMPTY
47758: LIST
47759: LIST
47760: PUSH
47761: LD_INT 1
47763: PUSH
47764: LD_INT 3
47766: PUSH
47767: EMPTY
47768: LIST
47769: LIST
47770: PUSH
47771: LD_INT 0
47773: PUSH
47774: LD_INT 3
47776: PUSH
47777: EMPTY
47778: LIST
47779: LIST
47780: PUSH
47781: LD_INT 1
47783: NEG
47784: PUSH
47785: LD_INT 2
47787: PUSH
47788: EMPTY
47789: LIST
47790: LIST
47791: PUSH
47792: LD_INT 2
47794: NEG
47795: PUSH
47796: LD_INT 1
47798: PUSH
47799: EMPTY
47800: LIST
47801: LIST
47802: PUSH
47803: LD_INT 3
47805: NEG
47806: PUSH
47807: LD_INT 0
47809: PUSH
47810: EMPTY
47811: LIST
47812: LIST
47813: PUSH
47814: LD_INT 3
47816: NEG
47817: PUSH
47818: LD_INT 1
47820: NEG
47821: PUSH
47822: EMPTY
47823: LIST
47824: LIST
47825: PUSH
47826: EMPTY
47827: LIST
47828: LIST
47829: LIST
47830: LIST
47831: LIST
47832: LIST
47833: LIST
47834: LIST
47835: LIST
47836: LIST
47837: LIST
47838: LIST
47839: LIST
47840: LIST
47841: LIST
47842: LIST
47843: LIST
47844: LIST
47845: LIST
47846: LIST
47847: LIST
47848: LIST
47849: LIST
47850: LIST
47851: LIST
47852: LIST
47853: LIST
47854: LIST
47855: LIST
47856: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47857: LD_ADDR_VAR 0 47
47861: PUSH
47862: LD_INT 0
47864: PUSH
47865: LD_INT 0
47867: PUSH
47868: EMPTY
47869: LIST
47870: LIST
47871: PUSH
47872: LD_INT 0
47874: PUSH
47875: LD_INT 1
47877: NEG
47878: PUSH
47879: EMPTY
47880: LIST
47881: LIST
47882: PUSH
47883: LD_INT 1
47885: PUSH
47886: LD_INT 0
47888: PUSH
47889: EMPTY
47890: LIST
47891: LIST
47892: PUSH
47893: LD_INT 1
47895: PUSH
47896: LD_INT 1
47898: PUSH
47899: EMPTY
47900: LIST
47901: LIST
47902: PUSH
47903: LD_INT 0
47905: PUSH
47906: LD_INT 1
47908: PUSH
47909: EMPTY
47910: LIST
47911: LIST
47912: PUSH
47913: LD_INT 1
47915: NEG
47916: PUSH
47917: LD_INT 0
47919: PUSH
47920: EMPTY
47921: LIST
47922: LIST
47923: PUSH
47924: LD_INT 1
47926: NEG
47927: PUSH
47928: LD_INT 1
47930: NEG
47931: PUSH
47932: EMPTY
47933: LIST
47934: LIST
47935: PUSH
47936: LD_INT 1
47938: NEG
47939: PUSH
47940: LD_INT 2
47942: NEG
47943: PUSH
47944: EMPTY
47945: LIST
47946: LIST
47947: PUSH
47948: LD_INT 0
47950: PUSH
47951: LD_INT 2
47953: NEG
47954: PUSH
47955: EMPTY
47956: LIST
47957: LIST
47958: PUSH
47959: LD_INT 1
47961: PUSH
47962: LD_INT 1
47964: NEG
47965: PUSH
47966: EMPTY
47967: LIST
47968: LIST
47969: PUSH
47970: LD_INT 2
47972: NEG
47973: PUSH
47974: LD_INT 1
47976: NEG
47977: PUSH
47978: EMPTY
47979: LIST
47980: LIST
47981: PUSH
47982: LD_INT 2
47984: NEG
47985: PUSH
47986: LD_INT 2
47988: NEG
47989: PUSH
47990: EMPTY
47991: LIST
47992: LIST
47993: PUSH
47994: EMPTY
47995: LIST
47996: LIST
47997: LIST
47998: LIST
47999: LIST
48000: LIST
48001: LIST
48002: LIST
48003: LIST
48004: LIST
48005: LIST
48006: LIST
48007: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
48008: LD_ADDR_VAR 0 48
48012: PUSH
48013: LD_INT 0
48015: PUSH
48016: LD_INT 0
48018: PUSH
48019: EMPTY
48020: LIST
48021: LIST
48022: PUSH
48023: LD_INT 0
48025: PUSH
48026: LD_INT 1
48028: NEG
48029: PUSH
48030: EMPTY
48031: LIST
48032: LIST
48033: PUSH
48034: LD_INT 1
48036: PUSH
48037: LD_INT 0
48039: PUSH
48040: EMPTY
48041: LIST
48042: LIST
48043: PUSH
48044: LD_INT 1
48046: PUSH
48047: LD_INT 1
48049: PUSH
48050: EMPTY
48051: LIST
48052: LIST
48053: PUSH
48054: LD_INT 0
48056: PUSH
48057: LD_INT 1
48059: PUSH
48060: EMPTY
48061: LIST
48062: LIST
48063: PUSH
48064: LD_INT 1
48066: NEG
48067: PUSH
48068: LD_INT 0
48070: PUSH
48071: EMPTY
48072: LIST
48073: LIST
48074: PUSH
48075: LD_INT 1
48077: NEG
48078: PUSH
48079: LD_INT 1
48081: NEG
48082: PUSH
48083: EMPTY
48084: LIST
48085: LIST
48086: PUSH
48087: LD_INT 1
48089: NEG
48090: PUSH
48091: LD_INT 2
48093: NEG
48094: PUSH
48095: EMPTY
48096: LIST
48097: LIST
48098: PUSH
48099: LD_INT 0
48101: PUSH
48102: LD_INT 2
48104: NEG
48105: PUSH
48106: EMPTY
48107: LIST
48108: LIST
48109: PUSH
48110: LD_INT 1
48112: PUSH
48113: LD_INT 1
48115: NEG
48116: PUSH
48117: EMPTY
48118: LIST
48119: LIST
48120: PUSH
48121: LD_INT 2
48123: PUSH
48124: LD_INT 0
48126: PUSH
48127: EMPTY
48128: LIST
48129: LIST
48130: PUSH
48131: LD_INT 2
48133: PUSH
48134: LD_INT 1
48136: PUSH
48137: EMPTY
48138: LIST
48139: LIST
48140: PUSH
48141: EMPTY
48142: LIST
48143: LIST
48144: LIST
48145: LIST
48146: LIST
48147: LIST
48148: LIST
48149: LIST
48150: LIST
48151: LIST
48152: LIST
48153: LIST
48154: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
48155: LD_ADDR_VAR 0 49
48159: PUSH
48160: LD_INT 0
48162: PUSH
48163: LD_INT 0
48165: PUSH
48166: EMPTY
48167: LIST
48168: LIST
48169: PUSH
48170: LD_INT 0
48172: PUSH
48173: LD_INT 1
48175: NEG
48176: PUSH
48177: EMPTY
48178: LIST
48179: LIST
48180: PUSH
48181: LD_INT 1
48183: PUSH
48184: LD_INT 0
48186: PUSH
48187: EMPTY
48188: LIST
48189: LIST
48190: PUSH
48191: LD_INT 1
48193: PUSH
48194: LD_INT 1
48196: PUSH
48197: EMPTY
48198: LIST
48199: LIST
48200: PUSH
48201: LD_INT 0
48203: PUSH
48204: LD_INT 1
48206: PUSH
48207: EMPTY
48208: LIST
48209: LIST
48210: PUSH
48211: LD_INT 1
48213: NEG
48214: PUSH
48215: LD_INT 0
48217: PUSH
48218: EMPTY
48219: LIST
48220: LIST
48221: PUSH
48222: LD_INT 1
48224: NEG
48225: PUSH
48226: LD_INT 1
48228: NEG
48229: PUSH
48230: EMPTY
48231: LIST
48232: LIST
48233: PUSH
48234: LD_INT 1
48236: PUSH
48237: LD_INT 1
48239: NEG
48240: PUSH
48241: EMPTY
48242: LIST
48243: LIST
48244: PUSH
48245: LD_INT 2
48247: PUSH
48248: LD_INT 0
48250: PUSH
48251: EMPTY
48252: LIST
48253: LIST
48254: PUSH
48255: LD_INT 2
48257: PUSH
48258: LD_INT 1
48260: PUSH
48261: EMPTY
48262: LIST
48263: LIST
48264: PUSH
48265: LD_INT 2
48267: PUSH
48268: LD_INT 2
48270: PUSH
48271: EMPTY
48272: LIST
48273: LIST
48274: PUSH
48275: LD_INT 1
48277: PUSH
48278: LD_INT 2
48280: PUSH
48281: EMPTY
48282: LIST
48283: LIST
48284: PUSH
48285: EMPTY
48286: LIST
48287: LIST
48288: LIST
48289: LIST
48290: LIST
48291: LIST
48292: LIST
48293: LIST
48294: LIST
48295: LIST
48296: LIST
48297: LIST
48298: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
48299: LD_ADDR_VAR 0 50
48303: PUSH
48304: LD_INT 0
48306: PUSH
48307: LD_INT 0
48309: PUSH
48310: EMPTY
48311: LIST
48312: LIST
48313: PUSH
48314: LD_INT 0
48316: PUSH
48317: LD_INT 1
48319: NEG
48320: PUSH
48321: EMPTY
48322: LIST
48323: LIST
48324: PUSH
48325: LD_INT 1
48327: PUSH
48328: LD_INT 0
48330: PUSH
48331: EMPTY
48332: LIST
48333: LIST
48334: PUSH
48335: LD_INT 1
48337: PUSH
48338: LD_INT 1
48340: PUSH
48341: EMPTY
48342: LIST
48343: LIST
48344: PUSH
48345: LD_INT 0
48347: PUSH
48348: LD_INT 1
48350: PUSH
48351: EMPTY
48352: LIST
48353: LIST
48354: PUSH
48355: LD_INT 1
48357: NEG
48358: PUSH
48359: LD_INT 0
48361: PUSH
48362: EMPTY
48363: LIST
48364: LIST
48365: PUSH
48366: LD_INT 1
48368: NEG
48369: PUSH
48370: LD_INT 1
48372: NEG
48373: PUSH
48374: EMPTY
48375: LIST
48376: LIST
48377: PUSH
48378: LD_INT 2
48380: PUSH
48381: LD_INT 1
48383: PUSH
48384: EMPTY
48385: LIST
48386: LIST
48387: PUSH
48388: LD_INT 2
48390: PUSH
48391: LD_INT 2
48393: PUSH
48394: EMPTY
48395: LIST
48396: LIST
48397: PUSH
48398: LD_INT 1
48400: PUSH
48401: LD_INT 2
48403: PUSH
48404: EMPTY
48405: LIST
48406: LIST
48407: PUSH
48408: LD_INT 0
48410: PUSH
48411: LD_INT 2
48413: PUSH
48414: EMPTY
48415: LIST
48416: LIST
48417: PUSH
48418: LD_INT 1
48420: NEG
48421: PUSH
48422: LD_INT 1
48424: PUSH
48425: EMPTY
48426: LIST
48427: LIST
48428: PUSH
48429: EMPTY
48430: LIST
48431: LIST
48432: LIST
48433: LIST
48434: LIST
48435: LIST
48436: LIST
48437: LIST
48438: LIST
48439: LIST
48440: LIST
48441: LIST
48442: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
48443: LD_ADDR_VAR 0 51
48447: PUSH
48448: LD_INT 0
48450: PUSH
48451: LD_INT 0
48453: PUSH
48454: EMPTY
48455: LIST
48456: LIST
48457: PUSH
48458: LD_INT 0
48460: PUSH
48461: LD_INT 1
48463: NEG
48464: PUSH
48465: EMPTY
48466: LIST
48467: LIST
48468: PUSH
48469: LD_INT 1
48471: PUSH
48472: LD_INT 0
48474: PUSH
48475: EMPTY
48476: LIST
48477: LIST
48478: PUSH
48479: LD_INT 1
48481: PUSH
48482: LD_INT 1
48484: PUSH
48485: EMPTY
48486: LIST
48487: LIST
48488: PUSH
48489: LD_INT 0
48491: PUSH
48492: LD_INT 1
48494: PUSH
48495: EMPTY
48496: LIST
48497: LIST
48498: PUSH
48499: LD_INT 1
48501: NEG
48502: PUSH
48503: LD_INT 0
48505: PUSH
48506: EMPTY
48507: LIST
48508: LIST
48509: PUSH
48510: LD_INT 1
48512: NEG
48513: PUSH
48514: LD_INT 1
48516: NEG
48517: PUSH
48518: EMPTY
48519: LIST
48520: LIST
48521: PUSH
48522: LD_INT 1
48524: PUSH
48525: LD_INT 2
48527: PUSH
48528: EMPTY
48529: LIST
48530: LIST
48531: PUSH
48532: LD_INT 0
48534: PUSH
48535: LD_INT 2
48537: PUSH
48538: EMPTY
48539: LIST
48540: LIST
48541: PUSH
48542: LD_INT 1
48544: NEG
48545: PUSH
48546: LD_INT 1
48548: PUSH
48549: EMPTY
48550: LIST
48551: LIST
48552: PUSH
48553: LD_INT 2
48555: NEG
48556: PUSH
48557: LD_INT 0
48559: PUSH
48560: EMPTY
48561: LIST
48562: LIST
48563: PUSH
48564: LD_INT 2
48566: NEG
48567: PUSH
48568: LD_INT 1
48570: NEG
48571: PUSH
48572: EMPTY
48573: LIST
48574: LIST
48575: PUSH
48576: EMPTY
48577: LIST
48578: LIST
48579: LIST
48580: LIST
48581: LIST
48582: LIST
48583: LIST
48584: LIST
48585: LIST
48586: LIST
48587: LIST
48588: LIST
48589: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48590: LD_ADDR_VAR 0 52
48594: PUSH
48595: LD_INT 0
48597: PUSH
48598: LD_INT 0
48600: PUSH
48601: EMPTY
48602: LIST
48603: LIST
48604: PUSH
48605: LD_INT 0
48607: PUSH
48608: LD_INT 1
48610: NEG
48611: PUSH
48612: EMPTY
48613: LIST
48614: LIST
48615: PUSH
48616: LD_INT 1
48618: PUSH
48619: LD_INT 0
48621: PUSH
48622: EMPTY
48623: LIST
48624: LIST
48625: PUSH
48626: LD_INT 1
48628: PUSH
48629: LD_INT 1
48631: PUSH
48632: EMPTY
48633: LIST
48634: LIST
48635: PUSH
48636: LD_INT 0
48638: PUSH
48639: LD_INT 1
48641: PUSH
48642: EMPTY
48643: LIST
48644: LIST
48645: PUSH
48646: LD_INT 1
48648: NEG
48649: PUSH
48650: LD_INT 0
48652: PUSH
48653: EMPTY
48654: LIST
48655: LIST
48656: PUSH
48657: LD_INT 1
48659: NEG
48660: PUSH
48661: LD_INT 1
48663: NEG
48664: PUSH
48665: EMPTY
48666: LIST
48667: LIST
48668: PUSH
48669: LD_INT 1
48671: NEG
48672: PUSH
48673: LD_INT 2
48675: NEG
48676: PUSH
48677: EMPTY
48678: LIST
48679: LIST
48680: PUSH
48681: LD_INT 1
48683: NEG
48684: PUSH
48685: LD_INT 1
48687: PUSH
48688: EMPTY
48689: LIST
48690: LIST
48691: PUSH
48692: LD_INT 2
48694: NEG
48695: PUSH
48696: LD_INT 0
48698: PUSH
48699: EMPTY
48700: LIST
48701: LIST
48702: PUSH
48703: LD_INT 2
48705: NEG
48706: PUSH
48707: LD_INT 1
48709: NEG
48710: PUSH
48711: EMPTY
48712: LIST
48713: LIST
48714: PUSH
48715: LD_INT 2
48717: NEG
48718: PUSH
48719: LD_INT 2
48721: NEG
48722: PUSH
48723: EMPTY
48724: LIST
48725: LIST
48726: PUSH
48727: EMPTY
48728: LIST
48729: LIST
48730: LIST
48731: LIST
48732: LIST
48733: LIST
48734: LIST
48735: LIST
48736: LIST
48737: LIST
48738: LIST
48739: LIST
48740: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48741: LD_ADDR_VAR 0 53
48745: PUSH
48746: LD_INT 0
48748: PUSH
48749: LD_INT 0
48751: PUSH
48752: EMPTY
48753: LIST
48754: LIST
48755: PUSH
48756: LD_INT 0
48758: PUSH
48759: LD_INT 1
48761: NEG
48762: PUSH
48763: EMPTY
48764: LIST
48765: LIST
48766: PUSH
48767: LD_INT 1
48769: PUSH
48770: LD_INT 0
48772: PUSH
48773: EMPTY
48774: LIST
48775: LIST
48776: PUSH
48777: LD_INT 1
48779: PUSH
48780: LD_INT 1
48782: PUSH
48783: EMPTY
48784: LIST
48785: LIST
48786: PUSH
48787: LD_INT 0
48789: PUSH
48790: LD_INT 1
48792: PUSH
48793: EMPTY
48794: LIST
48795: LIST
48796: PUSH
48797: LD_INT 1
48799: NEG
48800: PUSH
48801: LD_INT 0
48803: PUSH
48804: EMPTY
48805: LIST
48806: LIST
48807: PUSH
48808: LD_INT 1
48810: NEG
48811: PUSH
48812: LD_INT 1
48814: NEG
48815: PUSH
48816: EMPTY
48817: LIST
48818: LIST
48819: PUSH
48820: LD_INT 1
48822: NEG
48823: PUSH
48824: LD_INT 2
48826: NEG
48827: PUSH
48828: EMPTY
48829: LIST
48830: LIST
48831: PUSH
48832: LD_INT 0
48834: PUSH
48835: LD_INT 2
48837: NEG
48838: PUSH
48839: EMPTY
48840: LIST
48841: LIST
48842: PUSH
48843: LD_INT 1
48845: PUSH
48846: LD_INT 1
48848: NEG
48849: PUSH
48850: EMPTY
48851: LIST
48852: LIST
48853: PUSH
48854: LD_INT 2
48856: PUSH
48857: LD_INT 0
48859: PUSH
48860: EMPTY
48861: LIST
48862: LIST
48863: PUSH
48864: LD_INT 2
48866: PUSH
48867: LD_INT 1
48869: PUSH
48870: EMPTY
48871: LIST
48872: LIST
48873: PUSH
48874: LD_INT 2
48876: PUSH
48877: LD_INT 2
48879: PUSH
48880: EMPTY
48881: LIST
48882: LIST
48883: PUSH
48884: LD_INT 1
48886: PUSH
48887: LD_INT 2
48889: PUSH
48890: EMPTY
48891: LIST
48892: LIST
48893: PUSH
48894: LD_INT 0
48896: PUSH
48897: LD_INT 2
48899: PUSH
48900: EMPTY
48901: LIST
48902: LIST
48903: PUSH
48904: LD_INT 1
48906: NEG
48907: PUSH
48908: LD_INT 1
48910: PUSH
48911: EMPTY
48912: LIST
48913: LIST
48914: PUSH
48915: LD_INT 2
48917: NEG
48918: PUSH
48919: LD_INT 0
48921: PUSH
48922: EMPTY
48923: LIST
48924: LIST
48925: PUSH
48926: LD_INT 2
48928: NEG
48929: PUSH
48930: LD_INT 1
48932: NEG
48933: PUSH
48934: EMPTY
48935: LIST
48936: LIST
48937: PUSH
48938: LD_INT 2
48940: NEG
48941: PUSH
48942: LD_INT 2
48944: NEG
48945: PUSH
48946: EMPTY
48947: LIST
48948: LIST
48949: PUSH
48950: EMPTY
48951: LIST
48952: LIST
48953: LIST
48954: LIST
48955: LIST
48956: LIST
48957: LIST
48958: LIST
48959: LIST
48960: LIST
48961: LIST
48962: LIST
48963: LIST
48964: LIST
48965: LIST
48966: LIST
48967: LIST
48968: LIST
48969: LIST
48970: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48971: LD_ADDR_VAR 0 54
48975: PUSH
48976: LD_INT 0
48978: PUSH
48979: LD_INT 0
48981: PUSH
48982: EMPTY
48983: LIST
48984: LIST
48985: PUSH
48986: LD_INT 0
48988: PUSH
48989: LD_INT 1
48991: NEG
48992: PUSH
48993: EMPTY
48994: LIST
48995: LIST
48996: PUSH
48997: LD_INT 1
48999: PUSH
49000: LD_INT 0
49002: PUSH
49003: EMPTY
49004: LIST
49005: LIST
49006: PUSH
49007: LD_INT 1
49009: PUSH
49010: LD_INT 1
49012: PUSH
49013: EMPTY
49014: LIST
49015: LIST
49016: PUSH
49017: LD_INT 0
49019: PUSH
49020: LD_INT 1
49022: PUSH
49023: EMPTY
49024: LIST
49025: LIST
49026: PUSH
49027: LD_INT 1
49029: NEG
49030: PUSH
49031: LD_INT 0
49033: PUSH
49034: EMPTY
49035: LIST
49036: LIST
49037: PUSH
49038: LD_INT 1
49040: NEG
49041: PUSH
49042: LD_INT 1
49044: NEG
49045: PUSH
49046: EMPTY
49047: LIST
49048: LIST
49049: PUSH
49050: LD_INT 1
49052: NEG
49053: PUSH
49054: LD_INT 2
49056: NEG
49057: PUSH
49058: EMPTY
49059: LIST
49060: LIST
49061: PUSH
49062: LD_INT 0
49064: PUSH
49065: LD_INT 2
49067: NEG
49068: PUSH
49069: EMPTY
49070: LIST
49071: LIST
49072: PUSH
49073: LD_INT 1
49075: PUSH
49076: LD_INT 1
49078: NEG
49079: PUSH
49080: EMPTY
49081: LIST
49082: LIST
49083: PUSH
49084: LD_INT 2
49086: PUSH
49087: LD_INT 0
49089: PUSH
49090: EMPTY
49091: LIST
49092: LIST
49093: PUSH
49094: LD_INT 2
49096: PUSH
49097: LD_INT 1
49099: PUSH
49100: EMPTY
49101: LIST
49102: LIST
49103: PUSH
49104: LD_INT 2
49106: PUSH
49107: LD_INT 2
49109: PUSH
49110: EMPTY
49111: LIST
49112: LIST
49113: PUSH
49114: LD_INT 1
49116: PUSH
49117: LD_INT 2
49119: PUSH
49120: EMPTY
49121: LIST
49122: LIST
49123: PUSH
49124: LD_INT 0
49126: PUSH
49127: LD_INT 2
49129: PUSH
49130: EMPTY
49131: LIST
49132: LIST
49133: PUSH
49134: LD_INT 1
49136: NEG
49137: PUSH
49138: LD_INT 1
49140: PUSH
49141: EMPTY
49142: LIST
49143: LIST
49144: PUSH
49145: LD_INT 2
49147: NEG
49148: PUSH
49149: LD_INT 0
49151: PUSH
49152: EMPTY
49153: LIST
49154: LIST
49155: PUSH
49156: LD_INT 2
49158: NEG
49159: PUSH
49160: LD_INT 1
49162: NEG
49163: PUSH
49164: EMPTY
49165: LIST
49166: LIST
49167: PUSH
49168: LD_INT 2
49170: NEG
49171: PUSH
49172: LD_INT 2
49174: NEG
49175: PUSH
49176: EMPTY
49177: LIST
49178: LIST
49179: PUSH
49180: EMPTY
49181: LIST
49182: LIST
49183: LIST
49184: LIST
49185: LIST
49186: LIST
49187: LIST
49188: LIST
49189: LIST
49190: LIST
49191: LIST
49192: LIST
49193: LIST
49194: LIST
49195: LIST
49196: LIST
49197: LIST
49198: LIST
49199: LIST
49200: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49201: LD_ADDR_VAR 0 55
49205: PUSH
49206: LD_INT 0
49208: PUSH
49209: LD_INT 0
49211: PUSH
49212: EMPTY
49213: LIST
49214: LIST
49215: PUSH
49216: LD_INT 0
49218: PUSH
49219: LD_INT 1
49221: NEG
49222: PUSH
49223: EMPTY
49224: LIST
49225: LIST
49226: PUSH
49227: LD_INT 1
49229: PUSH
49230: LD_INT 0
49232: PUSH
49233: EMPTY
49234: LIST
49235: LIST
49236: PUSH
49237: LD_INT 1
49239: PUSH
49240: LD_INT 1
49242: PUSH
49243: EMPTY
49244: LIST
49245: LIST
49246: PUSH
49247: LD_INT 0
49249: PUSH
49250: LD_INT 1
49252: PUSH
49253: EMPTY
49254: LIST
49255: LIST
49256: PUSH
49257: LD_INT 1
49259: NEG
49260: PUSH
49261: LD_INT 0
49263: PUSH
49264: EMPTY
49265: LIST
49266: LIST
49267: PUSH
49268: LD_INT 1
49270: NEG
49271: PUSH
49272: LD_INT 1
49274: NEG
49275: PUSH
49276: EMPTY
49277: LIST
49278: LIST
49279: PUSH
49280: LD_INT 1
49282: NEG
49283: PUSH
49284: LD_INT 2
49286: NEG
49287: PUSH
49288: EMPTY
49289: LIST
49290: LIST
49291: PUSH
49292: LD_INT 0
49294: PUSH
49295: LD_INT 2
49297: NEG
49298: PUSH
49299: EMPTY
49300: LIST
49301: LIST
49302: PUSH
49303: LD_INT 1
49305: PUSH
49306: LD_INT 1
49308: NEG
49309: PUSH
49310: EMPTY
49311: LIST
49312: LIST
49313: PUSH
49314: LD_INT 2
49316: PUSH
49317: LD_INT 0
49319: PUSH
49320: EMPTY
49321: LIST
49322: LIST
49323: PUSH
49324: LD_INT 2
49326: PUSH
49327: LD_INT 1
49329: PUSH
49330: EMPTY
49331: LIST
49332: LIST
49333: PUSH
49334: LD_INT 2
49336: PUSH
49337: LD_INT 2
49339: PUSH
49340: EMPTY
49341: LIST
49342: LIST
49343: PUSH
49344: LD_INT 1
49346: PUSH
49347: LD_INT 2
49349: PUSH
49350: EMPTY
49351: LIST
49352: LIST
49353: PUSH
49354: LD_INT 0
49356: PUSH
49357: LD_INT 2
49359: PUSH
49360: EMPTY
49361: LIST
49362: LIST
49363: PUSH
49364: LD_INT 1
49366: NEG
49367: PUSH
49368: LD_INT 1
49370: PUSH
49371: EMPTY
49372: LIST
49373: LIST
49374: PUSH
49375: LD_INT 2
49377: NEG
49378: PUSH
49379: LD_INT 0
49381: PUSH
49382: EMPTY
49383: LIST
49384: LIST
49385: PUSH
49386: LD_INT 2
49388: NEG
49389: PUSH
49390: LD_INT 1
49392: NEG
49393: PUSH
49394: EMPTY
49395: LIST
49396: LIST
49397: PUSH
49398: LD_INT 2
49400: NEG
49401: PUSH
49402: LD_INT 2
49404: NEG
49405: PUSH
49406: EMPTY
49407: LIST
49408: LIST
49409: PUSH
49410: EMPTY
49411: LIST
49412: LIST
49413: LIST
49414: LIST
49415: LIST
49416: LIST
49417: LIST
49418: LIST
49419: LIST
49420: LIST
49421: LIST
49422: LIST
49423: LIST
49424: LIST
49425: LIST
49426: LIST
49427: LIST
49428: LIST
49429: LIST
49430: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49431: LD_ADDR_VAR 0 56
49435: PUSH
49436: LD_INT 0
49438: PUSH
49439: LD_INT 0
49441: PUSH
49442: EMPTY
49443: LIST
49444: LIST
49445: PUSH
49446: LD_INT 0
49448: PUSH
49449: LD_INT 1
49451: NEG
49452: PUSH
49453: EMPTY
49454: LIST
49455: LIST
49456: PUSH
49457: LD_INT 1
49459: PUSH
49460: LD_INT 0
49462: PUSH
49463: EMPTY
49464: LIST
49465: LIST
49466: PUSH
49467: LD_INT 1
49469: PUSH
49470: LD_INT 1
49472: PUSH
49473: EMPTY
49474: LIST
49475: LIST
49476: PUSH
49477: LD_INT 0
49479: PUSH
49480: LD_INT 1
49482: PUSH
49483: EMPTY
49484: LIST
49485: LIST
49486: PUSH
49487: LD_INT 1
49489: NEG
49490: PUSH
49491: LD_INT 0
49493: PUSH
49494: EMPTY
49495: LIST
49496: LIST
49497: PUSH
49498: LD_INT 1
49500: NEG
49501: PUSH
49502: LD_INT 1
49504: NEG
49505: PUSH
49506: EMPTY
49507: LIST
49508: LIST
49509: PUSH
49510: LD_INT 1
49512: NEG
49513: PUSH
49514: LD_INT 2
49516: NEG
49517: PUSH
49518: EMPTY
49519: LIST
49520: LIST
49521: PUSH
49522: LD_INT 0
49524: PUSH
49525: LD_INT 2
49527: NEG
49528: PUSH
49529: EMPTY
49530: LIST
49531: LIST
49532: PUSH
49533: LD_INT 1
49535: PUSH
49536: LD_INT 1
49538: NEG
49539: PUSH
49540: EMPTY
49541: LIST
49542: LIST
49543: PUSH
49544: LD_INT 2
49546: PUSH
49547: LD_INT 0
49549: PUSH
49550: EMPTY
49551: LIST
49552: LIST
49553: PUSH
49554: LD_INT 2
49556: PUSH
49557: LD_INT 1
49559: PUSH
49560: EMPTY
49561: LIST
49562: LIST
49563: PUSH
49564: LD_INT 2
49566: PUSH
49567: LD_INT 2
49569: PUSH
49570: EMPTY
49571: LIST
49572: LIST
49573: PUSH
49574: LD_INT 1
49576: PUSH
49577: LD_INT 2
49579: PUSH
49580: EMPTY
49581: LIST
49582: LIST
49583: PUSH
49584: LD_INT 0
49586: PUSH
49587: LD_INT 2
49589: PUSH
49590: EMPTY
49591: LIST
49592: LIST
49593: PUSH
49594: LD_INT 1
49596: NEG
49597: PUSH
49598: LD_INT 1
49600: PUSH
49601: EMPTY
49602: LIST
49603: LIST
49604: PUSH
49605: LD_INT 2
49607: NEG
49608: PUSH
49609: LD_INT 0
49611: PUSH
49612: EMPTY
49613: LIST
49614: LIST
49615: PUSH
49616: LD_INT 2
49618: NEG
49619: PUSH
49620: LD_INT 1
49622: NEG
49623: PUSH
49624: EMPTY
49625: LIST
49626: LIST
49627: PUSH
49628: LD_INT 2
49630: NEG
49631: PUSH
49632: LD_INT 2
49634: NEG
49635: PUSH
49636: EMPTY
49637: LIST
49638: LIST
49639: PUSH
49640: EMPTY
49641: LIST
49642: LIST
49643: LIST
49644: LIST
49645: LIST
49646: LIST
49647: LIST
49648: LIST
49649: LIST
49650: LIST
49651: LIST
49652: LIST
49653: LIST
49654: LIST
49655: LIST
49656: LIST
49657: LIST
49658: LIST
49659: LIST
49660: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49661: LD_ADDR_VAR 0 57
49665: PUSH
49666: LD_INT 0
49668: PUSH
49669: LD_INT 0
49671: PUSH
49672: EMPTY
49673: LIST
49674: LIST
49675: PUSH
49676: LD_INT 0
49678: PUSH
49679: LD_INT 1
49681: NEG
49682: PUSH
49683: EMPTY
49684: LIST
49685: LIST
49686: PUSH
49687: LD_INT 1
49689: PUSH
49690: LD_INT 0
49692: PUSH
49693: EMPTY
49694: LIST
49695: LIST
49696: PUSH
49697: LD_INT 1
49699: PUSH
49700: LD_INT 1
49702: PUSH
49703: EMPTY
49704: LIST
49705: LIST
49706: PUSH
49707: LD_INT 0
49709: PUSH
49710: LD_INT 1
49712: PUSH
49713: EMPTY
49714: LIST
49715: LIST
49716: PUSH
49717: LD_INT 1
49719: NEG
49720: PUSH
49721: LD_INT 0
49723: PUSH
49724: EMPTY
49725: LIST
49726: LIST
49727: PUSH
49728: LD_INT 1
49730: NEG
49731: PUSH
49732: LD_INT 1
49734: NEG
49735: PUSH
49736: EMPTY
49737: LIST
49738: LIST
49739: PUSH
49740: LD_INT 1
49742: NEG
49743: PUSH
49744: LD_INT 2
49746: NEG
49747: PUSH
49748: EMPTY
49749: LIST
49750: LIST
49751: PUSH
49752: LD_INT 0
49754: PUSH
49755: LD_INT 2
49757: NEG
49758: PUSH
49759: EMPTY
49760: LIST
49761: LIST
49762: PUSH
49763: LD_INT 1
49765: PUSH
49766: LD_INT 1
49768: NEG
49769: PUSH
49770: EMPTY
49771: LIST
49772: LIST
49773: PUSH
49774: LD_INT 2
49776: PUSH
49777: LD_INT 0
49779: PUSH
49780: EMPTY
49781: LIST
49782: LIST
49783: PUSH
49784: LD_INT 2
49786: PUSH
49787: LD_INT 1
49789: PUSH
49790: EMPTY
49791: LIST
49792: LIST
49793: PUSH
49794: LD_INT 2
49796: PUSH
49797: LD_INT 2
49799: PUSH
49800: EMPTY
49801: LIST
49802: LIST
49803: PUSH
49804: LD_INT 1
49806: PUSH
49807: LD_INT 2
49809: PUSH
49810: EMPTY
49811: LIST
49812: LIST
49813: PUSH
49814: LD_INT 0
49816: PUSH
49817: LD_INT 2
49819: PUSH
49820: EMPTY
49821: LIST
49822: LIST
49823: PUSH
49824: LD_INT 1
49826: NEG
49827: PUSH
49828: LD_INT 1
49830: PUSH
49831: EMPTY
49832: LIST
49833: LIST
49834: PUSH
49835: LD_INT 2
49837: NEG
49838: PUSH
49839: LD_INT 0
49841: PUSH
49842: EMPTY
49843: LIST
49844: LIST
49845: PUSH
49846: LD_INT 2
49848: NEG
49849: PUSH
49850: LD_INT 1
49852: NEG
49853: PUSH
49854: EMPTY
49855: LIST
49856: LIST
49857: PUSH
49858: LD_INT 2
49860: NEG
49861: PUSH
49862: LD_INT 2
49864: NEG
49865: PUSH
49866: EMPTY
49867: LIST
49868: LIST
49869: PUSH
49870: EMPTY
49871: LIST
49872: LIST
49873: LIST
49874: LIST
49875: LIST
49876: LIST
49877: LIST
49878: LIST
49879: LIST
49880: LIST
49881: LIST
49882: LIST
49883: LIST
49884: LIST
49885: LIST
49886: LIST
49887: LIST
49888: LIST
49889: LIST
49890: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49891: LD_ADDR_VAR 0 58
49895: PUSH
49896: LD_INT 0
49898: PUSH
49899: LD_INT 0
49901: PUSH
49902: EMPTY
49903: LIST
49904: LIST
49905: PUSH
49906: LD_INT 0
49908: PUSH
49909: LD_INT 1
49911: NEG
49912: PUSH
49913: EMPTY
49914: LIST
49915: LIST
49916: PUSH
49917: LD_INT 1
49919: PUSH
49920: LD_INT 0
49922: PUSH
49923: EMPTY
49924: LIST
49925: LIST
49926: PUSH
49927: LD_INT 1
49929: PUSH
49930: LD_INT 1
49932: PUSH
49933: EMPTY
49934: LIST
49935: LIST
49936: PUSH
49937: LD_INT 0
49939: PUSH
49940: LD_INT 1
49942: PUSH
49943: EMPTY
49944: LIST
49945: LIST
49946: PUSH
49947: LD_INT 1
49949: NEG
49950: PUSH
49951: LD_INT 0
49953: PUSH
49954: EMPTY
49955: LIST
49956: LIST
49957: PUSH
49958: LD_INT 1
49960: NEG
49961: PUSH
49962: LD_INT 1
49964: NEG
49965: PUSH
49966: EMPTY
49967: LIST
49968: LIST
49969: PUSH
49970: LD_INT 1
49972: NEG
49973: PUSH
49974: LD_INT 2
49976: NEG
49977: PUSH
49978: EMPTY
49979: LIST
49980: LIST
49981: PUSH
49982: LD_INT 0
49984: PUSH
49985: LD_INT 2
49987: NEG
49988: PUSH
49989: EMPTY
49990: LIST
49991: LIST
49992: PUSH
49993: LD_INT 1
49995: PUSH
49996: LD_INT 1
49998: NEG
49999: PUSH
50000: EMPTY
50001: LIST
50002: LIST
50003: PUSH
50004: LD_INT 2
50006: PUSH
50007: LD_INT 0
50009: PUSH
50010: EMPTY
50011: LIST
50012: LIST
50013: PUSH
50014: LD_INT 2
50016: PUSH
50017: LD_INT 1
50019: PUSH
50020: EMPTY
50021: LIST
50022: LIST
50023: PUSH
50024: LD_INT 2
50026: PUSH
50027: LD_INT 2
50029: PUSH
50030: EMPTY
50031: LIST
50032: LIST
50033: PUSH
50034: LD_INT 1
50036: PUSH
50037: LD_INT 2
50039: PUSH
50040: EMPTY
50041: LIST
50042: LIST
50043: PUSH
50044: LD_INT 0
50046: PUSH
50047: LD_INT 2
50049: PUSH
50050: EMPTY
50051: LIST
50052: LIST
50053: PUSH
50054: LD_INT 1
50056: NEG
50057: PUSH
50058: LD_INT 1
50060: PUSH
50061: EMPTY
50062: LIST
50063: LIST
50064: PUSH
50065: LD_INT 2
50067: NEG
50068: PUSH
50069: LD_INT 0
50071: PUSH
50072: EMPTY
50073: LIST
50074: LIST
50075: PUSH
50076: LD_INT 2
50078: NEG
50079: PUSH
50080: LD_INT 1
50082: NEG
50083: PUSH
50084: EMPTY
50085: LIST
50086: LIST
50087: PUSH
50088: LD_INT 2
50090: NEG
50091: PUSH
50092: LD_INT 2
50094: NEG
50095: PUSH
50096: EMPTY
50097: LIST
50098: LIST
50099: PUSH
50100: EMPTY
50101: LIST
50102: LIST
50103: LIST
50104: LIST
50105: LIST
50106: LIST
50107: LIST
50108: LIST
50109: LIST
50110: LIST
50111: LIST
50112: LIST
50113: LIST
50114: LIST
50115: LIST
50116: LIST
50117: LIST
50118: LIST
50119: LIST
50120: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50121: LD_ADDR_VAR 0 59
50125: PUSH
50126: LD_INT 0
50128: PUSH
50129: LD_INT 0
50131: PUSH
50132: EMPTY
50133: LIST
50134: LIST
50135: PUSH
50136: LD_INT 0
50138: PUSH
50139: LD_INT 1
50141: NEG
50142: PUSH
50143: EMPTY
50144: LIST
50145: LIST
50146: PUSH
50147: LD_INT 1
50149: PUSH
50150: LD_INT 0
50152: PUSH
50153: EMPTY
50154: LIST
50155: LIST
50156: PUSH
50157: LD_INT 1
50159: PUSH
50160: LD_INT 1
50162: PUSH
50163: EMPTY
50164: LIST
50165: LIST
50166: PUSH
50167: LD_INT 0
50169: PUSH
50170: LD_INT 1
50172: PUSH
50173: EMPTY
50174: LIST
50175: LIST
50176: PUSH
50177: LD_INT 1
50179: NEG
50180: PUSH
50181: LD_INT 0
50183: PUSH
50184: EMPTY
50185: LIST
50186: LIST
50187: PUSH
50188: LD_INT 1
50190: NEG
50191: PUSH
50192: LD_INT 1
50194: NEG
50195: PUSH
50196: EMPTY
50197: LIST
50198: LIST
50199: PUSH
50200: EMPTY
50201: LIST
50202: LIST
50203: LIST
50204: LIST
50205: LIST
50206: LIST
50207: LIST
50208: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50209: LD_ADDR_VAR 0 60
50213: PUSH
50214: LD_INT 0
50216: PUSH
50217: LD_INT 0
50219: PUSH
50220: EMPTY
50221: LIST
50222: LIST
50223: PUSH
50224: LD_INT 0
50226: PUSH
50227: LD_INT 1
50229: NEG
50230: PUSH
50231: EMPTY
50232: LIST
50233: LIST
50234: PUSH
50235: LD_INT 1
50237: PUSH
50238: LD_INT 0
50240: PUSH
50241: EMPTY
50242: LIST
50243: LIST
50244: PUSH
50245: LD_INT 1
50247: PUSH
50248: LD_INT 1
50250: PUSH
50251: EMPTY
50252: LIST
50253: LIST
50254: PUSH
50255: LD_INT 0
50257: PUSH
50258: LD_INT 1
50260: PUSH
50261: EMPTY
50262: LIST
50263: LIST
50264: PUSH
50265: LD_INT 1
50267: NEG
50268: PUSH
50269: LD_INT 0
50271: PUSH
50272: EMPTY
50273: LIST
50274: LIST
50275: PUSH
50276: LD_INT 1
50278: NEG
50279: PUSH
50280: LD_INT 1
50282: NEG
50283: PUSH
50284: EMPTY
50285: LIST
50286: LIST
50287: PUSH
50288: EMPTY
50289: LIST
50290: LIST
50291: LIST
50292: LIST
50293: LIST
50294: LIST
50295: LIST
50296: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50297: LD_ADDR_VAR 0 61
50301: PUSH
50302: LD_INT 0
50304: PUSH
50305: LD_INT 0
50307: PUSH
50308: EMPTY
50309: LIST
50310: LIST
50311: PUSH
50312: LD_INT 0
50314: PUSH
50315: LD_INT 1
50317: NEG
50318: PUSH
50319: EMPTY
50320: LIST
50321: LIST
50322: PUSH
50323: LD_INT 1
50325: PUSH
50326: LD_INT 0
50328: PUSH
50329: EMPTY
50330: LIST
50331: LIST
50332: PUSH
50333: LD_INT 1
50335: PUSH
50336: LD_INT 1
50338: PUSH
50339: EMPTY
50340: LIST
50341: LIST
50342: PUSH
50343: LD_INT 0
50345: PUSH
50346: LD_INT 1
50348: PUSH
50349: EMPTY
50350: LIST
50351: LIST
50352: PUSH
50353: LD_INT 1
50355: NEG
50356: PUSH
50357: LD_INT 0
50359: PUSH
50360: EMPTY
50361: LIST
50362: LIST
50363: PUSH
50364: LD_INT 1
50366: NEG
50367: PUSH
50368: LD_INT 1
50370: NEG
50371: PUSH
50372: EMPTY
50373: LIST
50374: LIST
50375: PUSH
50376: EMPTY
50377: LIST
50378: LIST
50379: LIST
50380: LIST
50381: LIST
50382: LIST
50383: LIST
50384: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50385: LD_ADDR_VAR 0 62
50389: PUSH
50390: LD_INT 0
50392: PUSH
50393: LD_INT 0
50395: PUSH
50396: EMPTY
50397: LIST
50398: LIST
50399: PUSH
50400: LD_INT 0
50402: PUSH
50403: LD_INT 1
50405: NEG
50406: PUSH
50407: EMPTY
50408: LIST
50409: LIST
50410: PUSH
50411: LD_INT 1
50413: PUSH
50414: LD_INT 0
50416: PUSH
50417: EMPTY
50418: LIST
50419: LIST
50420: PUSH
50421: LD_INT 1
50423: PUSH
50424: LD_INT 1
50426: PUSH
50427: EMPTY
50428: LIST
50429: LIST
50430: PUSH
50431: LD_INT 0
50433: PUSH
50434: LD_INT 1
50436: PUSH
50437: EMPTY
50438: LIST
50439: LIST
50440: PUSH
50441: LD_INT 1
50443: NEG
50444: PUSH
50445: LD_INT 0
50447: PUSH
50448: EMPTY
50449: LIST
50450: LIST
50451: PUSH
50452: LD_INT 1
50454: NEG
50455: PUSH
50456: LD_INT 1
50458: NEG
50459: PUSH
50460: EMPTY
50461: LIST
50462: LIST
50463: PUSH
50464: EMPTY
50465: LIST
50466: LIST
50467: LIST
50468: LIST
50469: LIST
50470: LIST
50471: LIST
50472: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50473: LD_ADDR_VAR 0 63
50477: PUSH
50478: LD_INT 0
50480: PUSH
50481: LD_INT 0
50483: PUSH
50484: EMPTY
50485: LIST
50486: LIST
50487: PUSH
50488: LD_INT 0
50490: PUSH
50491: LD_INT 1
50493: NEG
50494: PUSH
50495: EMPTY
50496: LIST
50497: LIST
50498: PUSH
50499: LD_INT 1
50501: PUSH
50502: LD_INT 0
50504: PUSH
50505: EMPTY
50506: LIST
50507: LIST
50508: PUSH
50509: LD_INT 1
50511: PUSH
50512: LD_INT 1
50514: PUSH
50515: EMPTY
50516: LIST
50517: LIST
50518: PUSH
50519: LD_INT 0
50521: PUSH
50522: LD_INT 1
50524: PUSH
50525: EMPTY
50526: LIST
50527: LIST
50528: PUSH
50529: LD_INT 1
50531: NEG
50532: PUSH
50533: LD_INT 0
50535: PUSH
50536: EMPTY
50537: LIST
50538: LIST
50539: PUSH
50540: LD_INT 1
50542: NEG
50543: PUSH
50544: LD_INT 1
50546: NEG
50547: PUSH
50548: EMPTY
50549: LIST
50550: LIST
50551: PUSH
50552: EMPTY
50553: LIST
50554: LIST
50555: LIST
50556: LIST
50557: LIST
50558: LIST
50559: LIST
50560: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50561: LD_ADDR_VAR 0 64
50565: PUSH
50566: LD_INT 0
50568: PUSH
50569: LD_INT 0
50571: PUSH
50572: EMPTY
50573: LIST
50574: LIST
50575: PUSH
50576: LD_INT 0
50578: PUSH
50579: LD_INT 1
50581: NEG
50582: PUSH
50583: EMPTY
50584: LIST
50585: LIST
50586: PUSH
50587: LD_INT 1
50589: PUSH
50590: LD_INT 0
50592: PUSH
50593: EMPTY
50594: LIST
50595: LIST
50596: PUSH
50597: LD_INT 1
50599: PUSH
50600: LD_INT 1
50602: PUSH
50603: EMPTY
50604: LIST
50605: LIST
50606: PUSH
50607: LD_INT 0
50609: PUSH
50610: LD_INT 1
50612: PUSH
50613: EMPTY
50614: LIST
50615: LIST
50616: PUSH
50617: LD_INT 1
50619: NEG
50620: PUSH
50621: LD_INT 0
50623: PUSH
50624: EMPTY
50625: LIST
50626: LIST
50627: PUSH
50628: LD_INT 1
50630: NEG
50631: PUSH
50632: LD_INT 1
50634: NEG
50635: PUSH
50636: EMPTY
50637: LIST
50638: LIST
50639: PUSH
50640: EMPTY
50641: LIST
50642: LIST
50643: LIST
50644: LIST
50645: LIST
50646: LIST
50647: LIST
50648: ST_TO_ADDR
// end ; 1 :
50649: GO 56546
50651: LD_INT 1
50653: DOUBLE
50654: EQUAL
50655: IFTRUE 50659
50657: GO 53282
50659: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50660: LD_ADDR_VAR 0 11
50664: PUSH
50665: LD_INT 1
50667: NEG
50668: PUSH
50669: LD_INT 3
50671: NEG
50672: PUSH
50673: EMPTY
50674: LIST
50675: LIST
50676: PUSH
50677: LD_INT 0
50679: PUSH
50680: LD_INT 3
50682: NEG
50683: PUSH
50684: EMPTY
50685: LIST
50686: LIST
50687: PUSH
50688: LD_INT 1
50690: PUSH
50691: LD_INT 2
50693: NEG
50694: PUSH
50695: EMPTY
50696: LIST
50697: LIST
50698: PUSH
50699: EMPTY
50700: LIST
50701: LIST
50702: LIST
50703: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50704: LD_ADDR_VAR 0 12
50708: PUSH
50709: LD_INT 2
50711: PUSH
50712: LD_INT 1
50714: NEG
50715: PUSH
50716: EMPTY
50717: LIST
50718: LIST
50719: PUSH
50720: LD_INT 3
50722: PUSH
50723: LD_INT 0
50725: PUSH
50726: EMPTY
50727: LIST
50728: LIST
50729: PUSH
50730: LD_INT 3
50732: PUSH
50733: LD_INT 1
50735: PUSH
50736: EMPTY
50737: LIST
50738: LIST
50739: PUSH
50740: EMPTY
50741: LIST
50742: LIST
50743: LIST
50744: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50745: LD_ADDR_VAR 0 13
50749: PUSH
50750: LD_INT 3
50752: PUSH
50753: LD_INT 2
50755: PUSH
50756: EMPTY
50757: LIST
50758: LIST
50759: PUSH
50760: LD_INT 3
50762: PUSH
50763: LD_INT 3
50765: PUSH
50766: EMPTY
50767: LIST
50768: LIST
50769: PUSH
50770: LD_INT 2
50772: PUSH
50773: LD_INT 3
50775: PUSH
50776: EMPTY
50777: LIST
50778: LIST
50779: PUSH
50780: EMPTY
50781: LIST
50782: LIST
50783: LIST
50784: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50785: LD_ADDR_VAR 0 14
50789: PUSH
50790: LD_INT 1
50792: PUSH
50793: LD_INT 3
50795: PUSH
50796: EMPTY
50797: LIST
50798: LIST
50799: PUSH
50800: LD_INT 0
50802: PUSH
50803: LD_INT 3
50805: PUSH
50806: EMPTY
50807: LIST
50808: LIST
50809: PUSH
50810: LD_INT 1
50812: NEG
50813: PUSH
50814: LD_INT 2
50816: PUSH
50817: EMPTY
50818: LIST
50819: LIST
50820: PUSH
50821: EMPTY
50822: LIST
50823: LIST
50824: LIST
50825: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50826: LD_ADDR_VAR 0 15
50830: PUSH
50831: LD_INT 2
50833: NEG
50834: PUSH
50835: LD_INT 1
50837: PUSH
50838: EMPTY
50839: LIST
50840: LIST
50841: PUSH
50842: LD_INT 3
50844: NEG
50845: PUSH
50846: LD_INT 0
50848: PUSH
50849: EMPTY
50850: LIST
50851: LIST
50852: PUSH
50853: LD_INT 3
50855: NEG
50856: PUSH
50857: LD_INT 1
50859: NEG
50860: PUSH
50861: EMPTY
50862: LIST
50863: LIST
50864: PUSH
50865: EMPTY
50866: LIST
50867: LIST
50868: LIST
50869: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50870: LD_ADDR_VAR 0 16
50874: PUSH
50875: LD_INT 2
50877: NEG
50878: PUSH
50879: LD_INT 3
50881: NEG
50882: PUSH
50883: EMPTY
50884: LIST
50885: LIST
50886: PUSH
50887: LD_INT 3
50889: NEG
50890: PUSH
50891: LD_INT 2
50893: NEG
50894: PUSH
50895: EMPTY
50896: LIST
50897: LIST
50898: PUSH
50899: LD_INT 3
50901: NEG
50902: PUSH
50903: LD_INT 3
50905: NEG
50906: PUSH
50907: EMPTY
50908: LIST
50909: LIST
50910: PUSH
50911: EMPTY
50912: LIST
50913: LIST
50914: LIST
50915: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50916: LD_ADDR_VAR 0 17
50920: PUSH
50921: LD_INT 1
50923: NEG
50924: PUSH
50925: LD_INT 3
50927: NEG
50928: PUSH
50929: EMPTY
50930: LIST
50931: LIST
50932: PUSH
50933: LD_INT 0
50935: PUSH
50936: LD_INT 3
50938: NEG
50939: PUSH
50940: EMPTY
50941: LIST
50942: LIST
50943: PUSH
50944: LD_INT 1
50946: PUSH
50947: LD_INT 2
50949: NEG
50950: PUSH
50951: EMPTY
50952: LIST
50953: LIST
50954: PUSH
50955: EMPTY
50956: LIST
50957: LIST
50958: LIST
50959: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50960: LD_ADDR_VAR 0 18
50964: PUSH
50965: LD_INT 2
50967: PUSH
50968: LD_INT 1
50970: NEG
50971: PUSH
50972: EMPTY
50973: LIST
50974: LIST
50975: PUSH
50976: LD_INT 3
50978: PUSH
50979: LD_INT 0
50981: PUSH
50982: EMPTY
50983: LIST
50984: LIST
50985: PUSH
50986: LD_INT 3
50988: PUSH
50989: LD_INT 1
50991: PUSH
50992: EMPTY
50993: LIST
50994: LIST
50995: PUSH
50996: EMPTY
50997: LIST
50998: LIST
50999: LIST
51000: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51001: LD_ADDR_VAR 0 19
51005: PUSH
51006: LD_INT 3
51008: PUSH
51009: LD_INT 2
51011: PUSH
51012: EMPTY
51013: LIST
51014: LIST
51015: PUSH
51016: LD_INT 3
51018: PUSH
51019: LD_INT 3
51021: PUSH
51022: EMPTY
51023: LIST
51024: LIST
51025: PUSH
51026: LD_INT 2
51028: PUSH
51029: LD_INT 3
51031: PUSH
51032: EMPTY
51033: LIST
51034: LIST
51035: PUSH
51036: EMPTY
51037: LIST
51038: LIST
51039: LIST
51040: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51041: LD_ADDR_VAR 0 20
51045: PUSH
51046: LD_INT 1
51048: PUSH
51049: LD_INT 3
51051: PUSH
51052: EMPTY
51053: LIST
51054: LIST
51055: PUSH
51056: LD_INT 0
51058: PUSH
51059: LD_INT 3
51061: PUSH
51062: EMPTY
51063: LIST
51064: LIST
51065: PUSH
51066: LD_INT 1
51068: NEG
51069: PUSH
51070: LD_INT 2
51072: PUSH
51073: EMPTY
51074: LIST
51075: LIST
51076: PUSH
51077: EMPTY
51078: LIST
51079: LIST
51080: LIST
51081: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51082: LD_ADDR_VAR 0 21
51086: PUSH
51087: LD_INT 2
51089: NEG
51090: PUSH
51091: LD_INT 1
51093: PUSH
51094: EMPTY
51095: LIST
51096: LIST
51097: PUSH
51098: LD_INT 3
51100: NEG
51101: PUSH
51102: LD_INT 0
51104: PUSH
51105: EMPTY
51106: LIST
51107: LIST
51108: PUSH
51109: LD_INT 3
51111: NEG
51112: PUSH
51113: LD_INT 1
51115: NEG
51116: PUSH
51117: EMPTY
51118: LIST
51119: LIST
51120: PUSH
51121: EMPTY
51122: LIST
51123: LIST
51124: LIST
51125: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51126: LD_ADDR_VAR 0 22
51130: PUSH
51131: LD_INT 2
51133: NEG
51134: PUSH
51135: LD_INT 3
51137: NEG
51138: PUSH
51139: EMPTY
51140: LIST
51141: LIST
51142: PUSH
51143: LD_INT 3
51145: NEG
51146: PUSH
51147: LD_INT 2
51149: NEG
51150: PUSH
51151: EMPTY
51152: LIST
51153: LIST
51154: PUSH
51155: LD_INT 3
51157: NEG
51158: PUSH
51159: LD_INT 3
51161: NEG
51162: PUSH
51163: EMPTY
51164: LIST
51165: LIST
51166: PUSH
51167: EMPTY
51168: LIST
51169: LIST
51170: LIST
51171: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
51172: LD_ADDR_VAR 0 23
51176: PUSH
51177: LD_INT 0
51179: PUSH
51180: LD_INT 3
51182: NEG
51183: PUSH
51184: EMPTY
51185: LIST
51186: LIST
51187: PUSH
51188: LD_INT 1
51190: NEG
51191: PUSH
51192: LD_INT 4
51194: NEG
51195: PUSH
51196: EMPTY
51197: LIST
51198: LIST
51199: PUSH
51200: LD_INT 1
51202: PUSH
51203: LD_INT 3
51205: NEG
51206: PUSH
51207: EMPTY
51208: LIST
51209: LIST
51210: PUSH
51211: EMPTY
51212: LIST
51213: LIST
51214: LIST
51215: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
51216: LD_ADDR_VAR 0 24
51220: PUSH
51221: LD_INT 3
51223: PUSH
51224: LD_INT 0
51226: PUSH
51227: EMPTY
51228: LIST
51229: LIST
51230: PUSH
51231: LD_INT 3
51233: PUSH
51234: LD_INT 1
51236: NEG
51237: PUSH
51238: EMPTY
51239: LIST
51240: LIST
51241: PUSH
51242: LD_INT 4
51244: PUSH
51245: LD_INT 1
51247: PUSH
51248: EMPTY
51249: LIST
51250: LIST
51251: PUSH
51252: EMPTY
51253: LIST
51254: LIST
51255: LIST
51256: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
51257: LD_ADDR_VAR 0 25
51261: PUSH
51262: LD_INT 3
51264: PUSH
51265: LD_INT 3
51267: PUSH
51268: EMPTY
51269: LIST
51270: LIST
51271: PUSH
51272: LD_INT 4
51274: PUSH
51275: LD_INT 3
51277: PUSH
51278: EMPTY
51279: LIST
51280: LIST
51281: PUSH
51282: LD_INT 3
51284: PUSH
51285: LD_INT 4
51287: PUSH
51288: EMPTY
51289: LIST
51290: LIST
51291: PUSH
51292: EMPTY
51293: LIST
51294: LIST
51295: LIST
51296: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
51297: LD_ADDR_VAR 0 26
51301: PUSH
51302: LD_INT 0
51304: PUSH
51305: LD_INT 3
51307: PUSH
51308: EMPTY
51309: LIST
51310: LIST
51311: PUSH
51312: LD_INT 1
51314: PUSH
51315: LD_INT 4
51317: PUSH
51318: EMPTY
51319: LIST
51320: LIST
51321: PUSH
51322: LD_INT 1
51324: NEG
51325: PUSH
51326: LD_INT 3
51328: PUSH
51329: EMPTY
51330: LIST
51331: LIST
51332: PUSH
51333: EMPTY
51334: LIST
51335: LIST
51336: LIST
51337: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
51338: LD_ADDR_VAR 0 27
51342: PUSH
51343: LD_INT 3
51345: NEG
51346: PUSH
51347: LD_INT 0
51349: PUSH
51350: EMPTY
51351: LIST
51352: LIST
51353: PUSH
51354: LD_INT 3
51356: NEG
51357: PUSH
51358: LD_INT 1
51360: PUSH
51361: EMPTY
51362: LIST
51363: LIST
51364: PUSH
51365: LD_INT 4
51367: NEG
51368: PUSH
51369: LD_INT 1
51371: NEG
51372: PUSH
51373: EMPTY
51374: LIST
51375: LIST
51376: PUSH
51377: EMPTY
51378: LIST
51379: LIST
51380: LIST
51381: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
51382: LD_ADDR_VAR 0 28
51386: PUSH
51387: LD_INT 3
51389: NEG
51390: PUSH
51391: LD_INT 3
51393: NEG
51394: PUSH
51395: EMPTY
51396: LIST
51397: LIST
51398: PUSH
51399: LD_INT 3
51401: NEG
51402: PUSH
51403: LD_INT 4
51405: NEG
51406: PUSH
51407: EMPTY
51408: LIST
51409: LIST
51410: PUSH
51411: LD_INT 4
51413: NEG
51414: PUSH
51415: LD_INT 3
51417: NEG
51418: PUSH
51419: EMPTY
51420: LIST
51421: LIST
51422: PUSH
51423: EMPTY
51424: LIST
51425: LIST
51426: LIST
51427: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
51428: LD_ADDR_VAR 0 29
51432: PUSH
51433: LD_INT 1
51435: NEG
51436: PUSH
51437: LD_INT 3
51439: NEG
51440: PUSH
51441: EMPTY
51442: LIST
51443: LIST
51444: PUSH
51445: LD_INT 0
51447: PUSH
51448: LD_INT 3
51450: NEG
51451: PUSH
51452: EMPTY
51453: LIST
51454: LIST
51455: PUSH
51456: LD_INT 1
51458: PUSH
51459: LD_INT 2
51461: NEG
51462: PUSH
51463: EMPTY
51464: LIST
51465: LIST
51466: PUSH
51467: LD_INT 1
51469: NEG
51470: PUSH
51471: LD_INT 4
51473: NEG
51474: PUSH
51475: EMPTY
51476: LIST
51477: LIST
51478: PUSH
51479: LD_INT 0
51481: PUSH
51482: LD_INT 4
51484: NEG
51485: PUSH
51486: EMPTY
51487: LIST
51488: LIST
51489: PUSH
51490: LD_INT 1
51492: PUSH
51493: LD_INT 3
51495: NEG
51496: PUSH
51497: EMPTY
51498: LIST
51499: LIST
51500: PUSH
51501: LD_INT 1
51503: NEG
51504: PUSH
51505: LD_INT 5
51507: NEG
51508: PUSH
51509: EMPTY
51510: LIST
51511: LIST
51512: PUSH
51513: LD_INT 0
51515: PUSH
51516: LD_INT 5
51518: NEG
51519: PUSH
51520: EMPTY
51521: LIST
51522: LIST
51523: PUSH
51524: LD_INT 1
51526: PUSH
51527: LD_INT 4
51529: NEG
51530: PUSH
51531: EMPTY
51532: LIST
51533: LIST
51534: PUSH
51535: LD_INT 1
51537: NEG
51538: PUSH
51539: LD_INT 6
51541: NEG
51542: PUSH
51543: EMPTY
51544: LIST
51545: LIST
51546: PUSH
51547: LD_INT 0
51549: PUSH
51550: LD_INT 6
51552: NEG
51553: PUSH
51554: EMPTY
51555: LIST
51556: LIST
51557: PUSH
51558: LD_INT 1
51560: PUSH
51561: LD_INT 5
51563: NEG
51564: PUSH
51565: EMPTY
51566: LIST
51567: LIST
51568: PUSH
51569: EMPTY
51570: LIST
51571: LIST
51572: LIST
51573: LIST
51574: LIST
51575: LIST
51576: LIST
51577: LIST
51578: LIST
51579: LIST
51580: LIST
51581: LIST
51582: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
51583: LD_ADDR_VAR 0 30
51587: PUSH
51588: LD_INT 2
51590: PUSH
51591: LD_INT 1
51593: NEG
51594: PUSH
51595: EMPTY
51596: LIST
51597: LIST
51598: PUSH
51599: LD_INT 3
51601: PUSH
51602: LD_INT 0
51604: PUSH
51605: EMPTY
51606: LIST
51607: LIST
51608: PUSH
51609: LD_INT 3
51611: PUSH
51612: LD_INT 1
51614: PUSH
51615: EMPTY
51616: LIST
51617: LIST
51618: PUSH
51619: LD_INT 3
51621: PUSH
51622: LD_INT 1
51624: NEG
51625: PUSH
51626: EMPTY
51627: LIST
51628: LIST
51629: PUSH
51630: LD_INT 4
51632: PUSH
51633: LD_INT 0
51635: PUSH
51636: EMPTY
51637: LIST
51638: LIST
51639: PUSH
51640: LD_INT 4
51642: PUSH
51643: LD_INT 1
51645: PUSH
51646: EMPTY
51647: LIST
51648: LIST
51649: PUSH
51650: LD_INT 4
51652: PUSH
51653: LD_INT 1
51655: NEG
51656: PUSH
51657: EMPTY
51658: LIST
51659: LIST
51660: PUSH
51661: LD_INT 5
51663: PUSH
51664: LD_INT 0
51666: PUSH
51667: EMPTY
51668: LIST
51669: LIST
51670: PUSH
51671: LD_INT 5
51673: PUSH
51674: LD_INT 1
51676: PUSH
51677: EMPTY
51678: LIST
51679: LIST
51680: PUSH
51681: LD_INT 5
51683: PUSH
51684: LD_INT 1
51686: NEG
51687: PUSH
51688: EMPTY
51689: LIST
51690: LIST
51691: PUSH
51692: LD_INT 6
51694: PUSH
51695: LD_INT 0
51697: PUSH
51698: EMPTY
51699: LIST
51700: LIST
51701: PUSH
51702: LD_INT 6
51704: PUSH
51705: LD_INT 1
51707: PUSH
51708: EMPTY
51709: LIST
51710: LIST
51711: PUSH
51712: EMPTY
51713: LIST
51714: LIST
51715: LIST
51716: LIST
51717: LIST
51718: LIST
51719: LIST
51720: LIST
51721: LIST
51722: LIST
51723: LIST
51724: LIST
51725: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
51726: LD_ADDR_VAR 0 31
51730: PUSH
51731: LD_INT 3
51733: PUSH
51734: LD_INT 2
51736: PUSH
51737: EMPTY
51738: LIST
51739: LIST
51740: PUSH
51741: LD_INT 3
51743: PUSH
51744: LD_INT 3
51746: PUSH
51747: EMPTY
51748: LIST
51749: LIST
51750: PUSH
51751: LD_INT 2
51753: PUSH
51754: LD_INT 3
51756: PUSH
51757: EMPTY
51758: LIST
51759: LIST
51760: PUSH
51761: LD_INT 4
51763: PUSH
51764: LD_INT 3
51766: PUSH
51767: EMPTY
51768: LIST
51769: LIST
51770: PUSH
51771: LD_INT 4
51773: PUSH
51774: LD_INT 4
51776: PUSH
51777: EMPTY
51778: LIST
51779: LIST
51780: PUSH
51781: LD_INT 3
51783: PUSH
51784: LD_INT 4
51786: PUSH
51787: EMPTY
51788: LIST
51789: LIST
51790: PUSH
51791: LD_INT 5
51793: PUSH
51794: LD_INT 4
51796: PUSH
51797: EMPTY
51798: LIST
51799: LIST
51800: PUSH
51801: LD_INT 5
51803: PUSH
51804: LD_INT 5
51806: PUSH
51807: EMPTY
51808: LIST
51809: LIST
51810: PUSH
51811: LD_INT 4
51813: PUSH
51814: LD_INT 5
51816: PUSH
51817: EMPTY
51818: LIST
51819: LIST
51820: PUSH
51821: LD_INT 6
51823: PUSH
51824: LD_INT 5
51826: PUSH
51827: EMPTY
51828: LIST
51829: LIST
51830: PUSH
51831: LD_INT 6
51833: PUSH
51834: LD_INT 6
51836: PUSH
51837: EMPTY
51838: LIST
51839: LIST
51840: PUSH
51841: LD_INT 5
51843: PUSH
51844: LD_INT 6
51846: PUSH
51847: EMPTY
51848: LIST
51849: LIST
51850: PUSH
51851: EMPTY
51852: LIST
51853: LIST
51854: LIST
51855: LIST
51856: LIST
51857: LIST
51858: LIST
51859: LIST
51860: LIST
51861: LIST
51862: LIST
51863: LIST
51864: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
51865: LD_ADDR_VAR 0 32
51869: PUSH
51870: LD_INT 1
51872: PUSH
51873: LD_INT 3
51875: PUSH
51876: EMPTY
51877: LIST
51878: LIST
51879: PUSH
51880: LD_INT 0
51882: PUSH
51883: LD_INT 3
51885: PUSH
51886: EMPTY
51887: LIST
51888: LIST
51889: PUSH
51890: LD_INT 1
51892: NEG
51893: PUSH
51894: LD_INT 2
51896: PUSH
51897: EMPTY
51898: LIST
51899: LIST
51900: PUSH
51901: LD_INT 1
51903: PUSH
51904: LD_INT 4
51906: PUSH
51907: EMPTY
51908: LIST
51909: LIST
51910: PUSH
51911: LD_INT 0
51913: PUSH
51914: LD_INT 4
51916: PUSH
51917: EMPTY
51918: LIST
51919: LIST
51920: PUSH
51921: LD_INT 1
51923: NEG
51924: PUSH
51925: LD_INT 3
51927: PUSH
51928: EMPTY
51929: LIST
51930: LIST
51931: PUSH
51932: LD_INT 1
51934: PUSH
51935: LD_INT 5
51937: PUSH
51938: EMPTY
51939: LIST
51940: LIST
51941: PUSH
51942: LD_INT 0
51944: PUSH
51945: LD_INT 5
51947: PUSH
51948: EMPTY
51949: LIST
51950: LIST
51951: PUSH
51952: LD_INT 1
51954: NEG
51955: PUSH
51956: LD_INT 4
51958: PUSH
51959: EMPTY
51960: LIST
51961: LIST
51962: PUSH
51963: LD_INT 1
51965: PUSH
51966: LD_INT 6
51968: PUSH
51969: EMPTY
51970: LIST
51971: LIST
51972: PUSH
51973: LD_INT 0
51975: PUSH
51976: LD_INT 6
51978: PUSH
51979: EMPTY
51980: LIST
51981: LIST
51982: PUSH
51983: LD_INT 1
51985: NEG
51986: PUSH
51987: LD_INT 5
51989: PUSH
51990: EMPTY
51991: LIST
51992: LIST
51993: PUSH
51994: EMPTY
51995: LIST
51996: LIST
51997: LIST
51998: LIST
51999: LIST
52000: LIST
52001: LIST
52002: LIST
52003: LIST
52004: LIST
52005: LIST
52006: LIST
52007: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
52008: LD_ADDR_VAR 0 33
52012: PUSH
52013: LD_INT 2
52015: NEG
52016: PUSH
52017: LD_INT 1
52019: PUSH
52020: EMPTY
52021: LIST
52022: LIST
52023: PUSH
52024: LD_INT 3
52026: NEG
52027: PUSH
52028: LD_INT 0
52030: PUSH
52031: EMPTY
52032: LIST
52033: LIST
52034: PUSH
52035: LD_INT 3
52037: NEG
52038: PUSH
52039: LD_INT 1
52041: NEG
52042: PUSH
52043: EMPTY
52044: LIST
52045: LIST
52046: PUSH
52047: LD_INT 3
52049: NEG
52050: PUSH
52051: LD_INT 1
52053: PUSH
52054: EMPTY
52055: LIST
52056: LIST
52057: PUSH
52058: LD_INT 4
52060: NEG
52061: PUSH
52062: LD_INT 0
52064: PUSH
52065: EMPTY
52066: LIST
52067: LIST
52068: PUSH
52069: LD_INT 4
52071: NEG
52072: PUSH
52073: LD_INT 1
52075: NEG
52076: PUSH
52077: EMPTY
52078: LIST
52079: LIST
52080: PUSH
52081: LD_INT 4
52083: NEG
52084: PUSH
52085: LD_INT 1
52087: PUSH
52088: EMPTY
52089: LIST
52090: LIST
52091: PUSH
52092: LD_INT 5
52094: NEG
52095: PUSH
52096: LD_INT 0
52098: PUSH
52099: EMPTY
52100: LIST
52101: LIST
52102: PUSH
52103: LD_INT 5
52105: NEG
52106: PUSH
52107: LD_INT 1
52109: NEG
52110: PUSH
52111: EMPTY
52112: LIST
52113: LIST
52114: PUSH
52115: LD_INT 5
52117: NEG
52118: PUSH
52119: LD_INT 1
52121: PUSH
52122: EMPTY
52123: LIST
52124: LIST
52125: PUSH
52126: LD_INT 6
52128: NEG
52129: PUSH
52130: LD_INT 0
52132: PUSH
52133: EMPTY
52134: LIST
52135: LIST
52136: PUSH
52137: LD_INT 6
52139: NEG
52140: PUSH
52141: LD_INT 1
52143: NEG
52144: PUSH
52145: EMPTY
52146: LIST
52147: LIST
52148: PUSH
52149: EMPTY
52150: LIST
52151: LIST
52152: LIST
52153: LIST
52154: LIST
52155: LIST
52156: LIST
52157: LIST
52158: LIST
52159: LIST
52160: LIST
52161: LIST
52162: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
52163: LD_ADDR_VAR 0 34
52167: PUSH
52168: LD_INT 2
52170: NEG
52171: PUSH
52172: LD_INT 3
52174: NEG
52175: PUSH
52176: EMPTY
52177: LIST
52178: LIST
52179: PUSH
52180: LD_INT 3
52182: NEG
52183: PUSH
52184: LD_INT 2
52186: NEG
52187: PUSH
52188: EMPTY
52189: LIST
52190: LIST
52191: PUSH
52192: LD_INT 3
52194: NEG
52195: PUSH
52196: LD_INT 3
52198: NEG
52199: PUSH
52200: EMPTY
52201: LIST
52202: LIST
52203: PUSH
52204: LD_INT 3
52206: NEG
52207: PUSH
52208: LD_INT 4
52210: NEG
52211: PUSH
52212: EMPTY
52213: LIST
52214: LIST
52215: PUSH
52216: LD_INT 4
52218: NEG
52219: PUSH
52220: LD_INT 3
52222: NEG
52223: PUSH
52224: EMPTY
52225: LIST
52226: LIST
52227: PUSH
52228: LD_INT 4
52230: NEG
52231: PUSH
52232: LD_INT 4
52234: NEG
52235: PUSH
52236: EMPTY
52237: LIST
52238: LIST
52239: PUSH
52240: LD_INT 4
52242: NEG
52243: PUSH
52244: LD_INT 5
52246: NEG
52247: PUSH
52248: EMPTY
52249: LIST
52250: LIST
52251: PUSH
52252: LD_INT 5
52254: NEG
52255: PUSH
52256: LD_INT 4
52258: NEG
52259: PUSH
52260: EMPTY
52261: LIST
52262: LIST
52263: PUSH
52264: LD_INT 5
52266: NEG
52267: PUSH
52268: LD_INT 5
52270: NEG
52271: PUSH
52272: EMPTY
52273: LIST
52274: LIST
52275: PUSH
52276: LD_INT 5
52278: NEG
52279: PUSH
52280: LD_INT 6
52282: NEG
52283: PUSH
52284: EMPTY
52285: LIST
52286: LIST
52287: PUSH
52288: LD_INT 6
52290: NEG
52291: PUSH
52292: LD_INT 5
52294: NEG
52295: PUSH
52296: EMPTY
52297: LIST
52298: LIST
52299: PUSH
52300: LD_INT 6
52302: NEG
52303: PUSH
52304: LD_INT 6
52306: NEG
52307: PUSH
52308: EMPTY
52309: LIST
52310: LIST
52311: PUSH
52312: EMPTY
52313: LIST
52314: LIST
52315: LIST
52316: LIST
52317: LIST
52318: LIST
52319: LIST
52320: LIST
52321: LIST
52322: LIST
52323: LIST
52324: LIST
52325: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
52326: LD_ADDR_VAR 0 41
52330: PUSH
52331: LD_INT 0
52333: PUSH
52334: LD_INT 2
52336: NEG
52337: PUSH
52338: EMPTY
52339: LIST
52340: LIST
52341: PUSH
52342: LD_INT 1
52344: NEG
52345: PUSH
52346: LD_INT 3
52348: NEG
52349: PUSH
52350: EMPTY
52351: LIST
52352: LIST
52353: PUSH
52354: LD_INT 1
52356: PUSH
52357: LD_INT 2
52359: NEG
52360: PUSH
52361: EMPTY
52362: LIST
52363: LIST
52364: PUSH
52365: EMPTY
52366: LIST
52367: LIST
52368: LIST
52369: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
52370: LD_ADDR_VAR 0 42
52374: PUSH
52375: LD_INT 2
52377: PUSH
52378: LD_INT 0
52380: PUSH
52381: EMPTY
52382: LIST
52383: LIST
52384: PUSH
52385: LD_INT 2
52387: PUSH
52388: LD_INT 1
52390: NEG
52391: PUSH
52392: EMPTY
52393: LIST
52394: LIST
52395: PUSH
52396: LD_INT 3
52398: PUSH
52399: LD_INT 1
52401: PUSH
52402: EMPTY
52403: LIST
52404: LIST
52405: PUSH
52406: EMPTY
52407: LIST
52408: LIST
52409: LIST
52410: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
52411: LD_ADDR_VAR 0 43
52415: PUSH
52416: LD_INT 2
52418: PUSH
52419: LD_INT 2
52421: PUSH
52422: EMPTY
52423: LIST
52424: LIST
52425: PUSH
52426: LD_INT 3
52428: PUSH
52429: LD_INT 2
52431: PUSH
52432: EMPTY
52433: LIST
52434: LIST
52435: PUSH
52436: LD_INT 2
52438: PUSH
52439: LD_INT 3
52441: PUSH
52442: EMPTY
52443: LIST
52444: LIST
52445: PUSH
52446: EMPTY
52447: LIST
52448: LIST
52449: LIST
52450: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
52451: LD_ADDR_VAR 0 44
52455: PUSH
52456: LD_INT 0
52458: PUSH
52459: LD_INT 2
52461: PUSH
52462: EMPTY
52463: LIST
52464: LIST
52465: PUSH
52466: LD_INT 1
52468: PUSH
52469: LD_INT 3
52471: PUSH
52472: EMPTY
52473: LIST
52474: LIST
52475: PUSH
52476: LD_INT 1
52478: NEG
52479: PUSH
52480: LD_INT 2
52482: PUSH
52483: EMPTY
52484: LIST
52485: LIST
52486: PUSH
52487: EMPTY
52488: LIST
52489: LIST
52490: LIST
52491: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52492: LD_ADDR_VAR 0 45
52496: PUSH
52497: LD_INT 2
52499: NEG
52500: PUSH
52501: LD_INT 0
52503: PUSH
52504: EMPTY
52505: LIST
52506: LIST
52507: PUSH
52508: LD_INT 2
52510: NEG
52511: PUSH
52512: LD_INT 1
52514: PUSH
52515: EMPTY
52516: LIST
52517: LIST
52518: PUSH
52519: LD_INT 3
52521: NEG
52522: PUSH
52523: LD_INT 1
52525: NEG
52526: PUSH
52527: EMPTY
52528: LIST
52529: LIST
52530: PUSH
52531: EMPTY
52532: LIST
52533: LIST
52534: LIST
52535: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
52536: LD_ADDR_VAR 0 46
52540: PUSH
52541: LD_INT 2
52543: NEG
52544: PUSH
52545: LD_INT 2
52547: NEG
52548: PUSH
52549: EMPTY
52550: LIST
52551: LIST
52552: PUSH
52553: LD_INT 2
52555: NEG
52556: PUSH
52557: LD_INT 3
52559: NEG
52560: PUSH
52561: EMPTY
52562: LIST
52563: LIST
52564: PUSH
52565: LD_INT 3
52567: NEG
52568: PUSH
52569: LD_INT 2
52571: NEG
52572: PUSH
52573: EMPTY
52574: LIST
52575: LIST
52576: PUSH
52577: EMPTY
52578: LIST
52579: LIST
52580: LIST
52581: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
52582: LD_ADDR_VAR 0 47
52586: PUSH
52587: LD_INT 2
52589: NEG
52590: PUSH
52591: LD_INT 3
52593: NEG
52594: PUSH
52595: EMPTY
52596: LIST
52597: LIST
52598: PUSH
52599: LD_INT 1
52601: NEG
52602: PUSH
52603: LD_INT 3
52605: NEG
52606: PUSH
52607: EMPTY
52608: LIST
52609: LIST
52610: PUSH
52611: EMPTY
52612: LIST
52613: LIST
52614: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
52615: LD_ADDR_VAR 0 48
52619: PUSH
52620: LD_INT 1
52622: PUSH
52623: LD_INT 2
52625: NEG
52626: PUSH
52627: EMPTY
52628: LIST
52629: LIST
52630: PUSH
52631: LD_INT 2
52633: PUSH
52634: LD_INT 1
52636: NEG
52637: PUSH
52638: EMPTY
52639: LIST
52640: LIST
52641: PUSH
52642: EMPTY
52643: LIST
52644: LIST
52645: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
52646: LD_ADDR_VAR 0 49
52650: PUSH
52651: LD_INT 3
52653: PUSH
52654: LD_INT 1
52656: PUSH
52657: EMPTY
52658: LIST
52659: LIST
52660: PUSH
52661: LD_INT 3
52663: PUSH
52664: LD_INT 2
52666: PUSH
52667: EMPTY
52668: LIST
52669: LIST
52670: PUSH
52671: EMPTY
52672: LIST
52673: LIST
52674: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
52675: LD_ADDR_VAR 0 50
52679: PUSH
52680: LD_INT 2
52682: PUSH
52683: LD_INT 3
52685: PUSH
52686: EMPTY
52687: LIST
52688: LIST
52689: PUSH
52690: LD_INT 1
52692: PUSH
52693: LD_INT 3
52695: PUSH
52696: EMPTY
52697: LIST
52698: LIST
52699: PUSH
52700: EMPTY
52701: LIST
52702: LIST
52703: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
52704: LD_ADDR_VAR 0 51
52708: PUSH
52709: LD_INT 1
52711: NEG
52712: PUSH
52713: LD_INT 2
52715: PUSH
52716: EMPTY
52717: LIST
52718: LIST
52719: PUSH
52720: LD_INT 2
52722: NEG
52723: PUSH
52724: LD_INT 1
52726: PUSH
52727: EMPTY
52728: LIST
52729: LIST
52730: PUSH
52731: EMPTY
52732: LIST
52733: LIST
52734: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
52735: LD_ADDR_VAR 0 52
52739: PUSH
52740: LD_INT 3
52742: NEG
52743: PUSH
52744: LD_INT 1
52746: NEG
52747: PUSH
52748: EMPTY
52749: LIST
52750: LIST
52751: PUSH
52752: LD_INT 3
52754: NEG
52755: PUSH
52756: LD_INT 2
52758: NEG
52759: PUSH
52760: EMPTY
52761: LIST
52762: LIST
52763: PUSH
52764: EMPTY
52765: LIST
52766: LIST
52767: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52768: LD_ADDR_VAR 0 53
52772: PUSH
52773: LD_INT 1
52775: NEG
52776: PUSH
52777: LD_INT 3
52779: NEG
52780: PUSH
52781: EMPTY
52782: LIST
52783: LIST
52784: PUSH
52785: LD_INT 0
52787: PUSH
52788: LD_INT 3
52790: NEG
52791: PUSH
52792: EMPTY
52793: LIST
52794: LIST
52795: PUSH
52796: LD_INT 1
52798: PUSH
52799: LD_INT 2
52801: NEG
52802: PUSH
52803: EMPTY
52804: LIST
52805: LIST
52806: PUSH
52807: EMPTY
52808: LIST
52809: LIST
52810: LIST
52811: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52812: LD_ADDR_VAR 0 54
52816: PUSH
52817: LD_INT 2
52819: PUSH
52820: LD_INT 1
52822: NEG
52823: PUSH
52824: EMPTY
52825: LIST
52826: LIST
52827: PUSH
52828: LD_INT 3
52830: PUSH
52831: LD_INT 0
52833: PUSH
52834: EMPTY
52835: LIST
52836: LIST
52837: PUSH
52838: LD_INT 3
52840: PUSH
52841: LD_INT 1
52843: PUSH
52844: EMPTY
52845: LIST
52846: LIST
52847: PUSH
52848: EMPTY
52849: LIST
52850: LIST
52851: LIST
52852: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52853: LD_ADDR_VAR 0 55
52857: PUSH
52858: LD_INT 3
52860: PUSH
52861: LD_INT 2
52863: PUSH
52864: EMPTY
52865: LIST
52866: LIST
52867: PUSH
52868: LD_INT 3
52870: PUSH
52871: LD_INT 3
52873: PUSH
52874: EMPTY
52875: LIST
52876: LIST
52877: PUSH
52878: LD_INT 2
52880: PUSH
52881: LD_INT 3
52883: PUSH
52884: EMPTY
52885: LIST
52886: LIST
52887: PUSH
52888: EMPTY
52889: LIST
52890: LIST
52891: LIST
52892: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52893: LD_ADDR_VAR 0 56
52897: PUSH
52898: LD_INT 1
52900: PUSH
52901: LD_INT 3
52903: PUSH
52904: EMPTY
52905: LIST
52906: LIST
52907: PUSH
52908: LD_INT 0
52910: PUSH
52911: LD_INT 3
52913: PUSH
52914: EMPTY
52915: LIST
52916: LIST
52917: PUSH
52918: LD_INT 1
52920: NEG
52921: PUSH
52922: LD_INT 2
52924: PUSH
52925: EMPTY
52926: LIST
52927: LIST
52928: PUSH
52929: EMPTY
52930: LIST
52931: LIST
52932: LIST
52933: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52934: LD_ADDR_VAR 0 57
52938: PUSH
52939: LD_INT 2
52941: NEG
52942: PUSH
52943: LD_INT 1
52945: PUSH
52946: EMPTY
52947: LIST
52948: LIST
52949: PUSH
52950: LD_INT 3
52952: NEG
52953: PUSH
52954: LD_INT 0
52956: PUSH
52957: EMPTY
52958: LIST
52959: LIST
52960: PUSH
52961: LD_INT 3
52963: NEG
52964: PUSH
52965: LD_INT 1
52967: NEG
52968: PUSH
52969: EMPTY
52970: LIST
52971: LIST
52972: PUSH
52973: EMPTY
52974: LIST
52975: LIST
52976: LIST
52977: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52978: LD_ADDR_VAR 0 58
52982: PUSH
52983: LD_INT 2
52985: NEG
52986: PUSH
52987: LD_INT 3
52989: NEG
52990: PUSH
52991: EMPTY
52992: LIST
52993: LIST
52994: PUSH
52995: LD_INT 3
52997: NEG
52998: PUSH
52999: LD_INT 2
53001: NEG
53002: PUSH
53003: EMPTY
53004: LIST
53005: LIST
53006: PUSH
53007: LD_INT 3
53009: NEG
53010: PUSH
53011: LD_INT 3
53013: NEG
53014: PUSH
53015: EMPTY
53016: LIST
53017: LIST
53018: PUSH
53019: EMPTY
53020: LIST
53021: LIST
53022: LIST
53023: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
53024: LD_ADDR_VAR 0 59
53028: PUSH
53029: LD_INT 1
53031: NEG
53032: PUSH
53033: LD_INT 2
53035: NEG
53036: PUSH
53037: EMPTY
53038: LIST
53039: LIST
53040: PUSH
53041: LD_INT 0
53043: PUSH
53044: LD_INT 2
53046: NEG
53047: PUSH
53048: EMPTY
53049: LIST
53050: LIST
53051: PUSH
53052: LD_INT 1
53054: PUSH
53055: LD_INT 1
53057: NEG
53058: PUSH
53059: EMPTY
53060: LIST
53061: LIST
53062: PUSH
53063: EMPTY
53064: LIST
53065: LIST
53066: LIST
53067: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
53068: LD_ADDR_VAR 0 60
53072: PUSH
53073: LD_INT 1
53075: PUSH
53076: LD_INT 1
53078: NEG
53079: PUSH
53080: EMPTY
53081: LIST
53082: LIST
53083: PUSH
53084: LD_INT 2
53086: PUSH
53087: LD_INT 0
53089: PUSH
53090: EMPTY
53091: LIST
53092: LIST
53093: PUSH
53094: LD_INT 2
53096: PUSH
53097: LD_INT 1
53099: PUSH
53100: EMPTY
53101: LIST
53102: LIST
53103: PUSH
53104: EMPTY
53105: LIST
53106: LIST
53107: LIST
53108: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
53109: LD_ADDR_VAR 0 61
53113: PUSH
53114: LD_INT 2
53116: PUSH
53117: LD_INT 1
53119: PUSH
53120: EMPTY
53121: LIST
53122: LIST
53123: PUSH
53124: LD_INT 2
53126: PUSH
53127: LD_INT 2
53129: PUSH
53130: EMPTY
53131: LIST
53132: LIST
53133: PUSH
53134: LD_INT 1
53136: PUSH
53137: LD_INT 2
53139: PUSH
53140: EMPTY
53141: LIST
53142: LIST
53143: PUSH
53144: EMPTY
53145: LIST
53146: LIST
53147: LIST
53148: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
53149: LD_ADDR_VAR 0 62
53153: PUSH
53154: LD_INT 1
53156: PUSH
53157: LD_INT 2
53159: PUSH
53160: EMPTY
53161: LIST
53162: LIST
53163: PUSH
53164: LD_INT 0
53166: PUSH
53167: LD_INT 2
53169: PUSH
53170: EMPTY
53171: LIST
53172: LIST
53173: PUSH
53174: LD_INT 1
53176: NEG
53177: PUSH
53178: LD_INT 1
53180: PUSH
53181: EMPTY
53182: LIST
53183: LIST
53184: PUSH
53185: EMPTY
53186: LIST
53187: LIST
53188: LIST
53189: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
53190: LD_ADDR_VAR 0 63
53194: PUSH
53195: LD_INT 1
53197: NEG
53198: PUSH
53199: LD_INT 1
53201: PUSH
53202: EMPTY
53203: LIST
53204: LIST
53205: PUSH
53206: LD_INT 2
53208: NEG
53209: PUSH
53210: LD_INT 0
53212: PUSH
53213: EMPTY
53214: LIST
53215: LIST
53216: PUSH
53217: LD_INT 2
53219: NEG
53220: PUSH
53221: LD_INT 1
53223: NEG
53224: PUSH
53225: EMPTY
53226: LIST
53227: LIST
53228: PUSH
53229: EMPTY
53230: LIST
53231: LIST
53232: LIST
53233: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53234: LD_ADDR_VAR 0 64
53238: PUSH
53239: LD_INT 1
53241: NEG
53242: PUSH
53243: LD_INT 2
53245: NEG
53246: PUSH
53247: EMPTY
53248: LIST
53249: LIST
53250: PUSH
53251: LD_INT 2
53253: NEG
53254: PUSH
53255: LD_INT 1
53257: NEG
53258: PUSH
53259: EMPTY
53260: LIST
53261: LIST
53262: PUSH
53263: LD_INT 2
53265: NEG
53266: PUSH
53267: LD_INT 2
53269: NEG
53270: PUSH
53271: EMPTY
53272: LIST
53273: LIST
53274: PUSH
53275: EMPTY
53276: LIST
53277: LIST
53278: LIST
53279: ST_TO_ADDR
// end ; 2 :
53280: GO 56546
53282: LD_INT 2
53284: DOUBLE
53285: EQUAL
53286: IFTRUE 53290
53288: GO 56545
53290: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
53291: LD_ADDR_VAR 0 29
53295: PUSH
53296: LD_INT 4
53298: PUSH
53299: LD_INT 0
53301: PUSH
53302: EMPTY
53303: LIST
53304: LIST
53305: PUSH
53306: LD_INT 4
53308: PUSH
53309: LD_INT 1
53311: NEG
53312: PUSH
53313: EMPTY
53314: LIST
53315: LIST
53316: PUSH
53317: LD_INT 5
53319: PUSH
53320: LD_INT 0
53322: PUSH
53323: EMPTY
53324: LIST
53325: LIST
53326: PUSH
53327: LD_INT 5
53329: PUSH
53330: LD_INT 1
53332: PUSH
53333: EMPTY
53334: LIST
53335: LIST
53336: PUSH
53337: LD_INT 4
53339: PUSH
53340: LD_INT 1
53342: PUSH
53343: EMPTY
53344: LIST
53345: LIST
53346: PUSH
53347: LD_INT 3
53349: PUSH
53350: LD_INT 0
53352: PUSH
53353: EMPTY
53354: LIST
53355: LIST
53356: PUSH
53357: LD_INT 3
53359: PUSH
53360: LD_INT 1
53362: NEG
53363: PUSH
53364: EMPTY
53365: LIST
53366: LIST
53367: PUSH
53368: LD_INT 3
53370: PUSH
53371: LD_INT 2
53373: NEG
53374: PUSH
53375: EMPTY
53376: LIST
53377: LIST
53378: PUSH
53379: LD_INT 5
53381: PUSH
53382: LD_INT 2
53384: PUSH
53385: EMPTY
53386: LIST
53387: LIST
53388: PUSH
53389: LD_INT 3
53391: PUSH
53392: LD_INT 3
53394: PUSH
53395: EMPTY
53396: LIST
53397: LIST
53398: PUSH
53399: LD_INT 3
53401: PUSH
53402: LD_INT 2
53404: PUSH
53405: EMPTY
53406: LIST
53407: LIST
53408: PUSH
53409: LD_INT 4
53411: PUSH
53412: LD_INT 3
53414: PUSH
53415: EMPTY
53416: LIST
53417: LIST
53418: PUSH
53419: LD_INT 4
53421: PUSH
53422: LD_INT 4
53424: PUSH
53425: EMPTY
53426: LIST
53427: LIST
53428: PUSH
53429: LD_INT 3
53431: PUSH
53432: LD_INT 4
53434: PUSH
53435: EMPTY
53436: LIST
53437: LIST
53438: PUSH
53439: LD_INT 2
53441: PUSH
53442: LD_INT 3
53444: PUSH
53445: EMPTY
53446: LIST
53447: LIST
53448: PUSH
53449: LD_INT 2
53451: PUSH
53452: LD_INT 2
53454: PUSH
53455: EMPTY
53456: LIST
53457: LIST
53458: PUSH
53459: LD_INT 4
53461: PUSH
53462: LD_INT 2
53464: PUSH
53465: EMPTY
53466: LIST
53467: LIST
53468: PUSH
53469: LD_INT 2
53471: PUSH
53472: LD_INT 4
53474: PUSH
53475: EMPTY
53476: LIST
53477: LIST
53478: PUSH
53479: LD_INT 0
53481: PUSH
53482: LD_INT 4
53484: PUSH
53485: EMPTY
53486: LIST
53487: LIST
53488: PUSH
53489: LD_INT 0
53491: PUSH
53492: LD_INT 3
53494: PUSH
53495: EMPTY
53496: LIST
53497: LIST
53498: PUSH
53499: LD_INT 1
53501: PUSH
53502: LD_INT 4
53504: PUSH
53505: EMPTY
53506: LIST
53507: LIST
53508: PUSH
53509: LD_INT 1
53511: PUSH
53512: LD_INT 5
53514: PUSH
53515: EMPTY
53516: LIST
53517: LIST
53518: PUSH
53519: LD_INT 0
53521: PUSH
53522: LD_INT 5
53524: PUSH
53525: EMPTY
53526: LIST
53527: LIST
53528: PUSH
53529: LD_INT 1
53531: NEG
53532: PUSH
53533: LD_INT 4
53535: PUSH
53536: EMPTY
53537: LIST
53538: LIST
53539: PUSH
53540: LD_INT 1
53542: NEG
53543: PUSH
53544: LD_INT 3
53546: PUSH
53547: EMPTY
53548: LIST
53549: LIST
53550: PUSH
53551: LD_INT 2
53553: PUSH
53554: LD_INT 5
53556: PUSH
53557: EMPTY
53558: LIST
53559: LIST
53560: PUSH
53561: LD_INT 2
53563: NEG
53564: PUSH
53565: LD_INT 3
53567: PUSH
53568: EMPTY
53569: LIST
53570: LIST
53571: PUSH
53572: LD_INT 3
53574: NEG
53575: PUSH
53576: LD_INT 0
53578: PUSH
53579: EMPTY
53580: LIST
53581: LIST
53582: PUSH
53583: LD_INT 3
53585: NEG
53586: PUSH
53587: LD_INT 1
53589: NEG
53590: PUSH
53591: EMPTY
53592: LIST
53593: LIST
53594: PUSH
53595: LD_INT 2
53597: NEG
53598: PUSH
53599: LD_INT 0
53601: PUSH
53602: EMPTY
53603: LIST
53604: LIST
53605: PUSH
53606: LD_INT 2
53608: NEG
53609: PUSH
53610: LD_INT 1
53612: PUSH
53613: EMPTY
53614: LIST
53615: LIST
53616: PUSH
53617: LD_INT 3
53619: NEG
53620: PUSH
53621: LD_INT 1
53623: PUSH
53624: EMPTY
53625: LIST
53626: LIST
53627: PUSH
53628: LD_INT 4
53630: NEG
53631: PUSH
53632: LD_INT 0
53634: PUSH
53635: EMPTY
53636: LIST
53637: LIST
53638: PUSH
53639: LD_INT 4
53641: NEG
53642: PUSH
53643: LD_INT 1
53645: NEG
53646: PUSH
53647: EMPTY
53648: LIST
53649: LIST
53650: PUSH
53651: LD_INT 4
53653: NEG
53654: PUSH
53655: LD_INT 2
53657: NEG
53658: PUSH
53659: EMPTY
53660: LIST
53661: LIST
53662: PUSH
53663: LD_INT 2
53665: NEG
53666: PUSH
53667: LD_INT 2
53669: PUSH
53670: EMPTY
53671: LIST
53672: LIST
53673: PUSH
53674: LD_INT 4
53676: NEG
53677: PUSH
53678: LD_INT 4
53680: NEG
53681: PUSH
53682: EMPTY
53683: LIST
53684: LIST
53685: PUSH
53686: LD_INT 4
53688: NEG
53689: PUSH
53690: LD_INT 5
53692: NEG
53693: PUSH
53694: EMPTY
53695: LIST
53696: LIST
53697: PUSH
53698: LD_INT 3
53700: NEG
53701: PUSH
53702: LD_INT 4
53704: NEG
53705: PUSH
53706: EMPTY
53707: LIST
53708: LIST
53709: PUSH
53710: LD_INT 3
53712: NEG
53713: PUSH
53714: LD_INT 3
53716: NEG
53717: PUSH
53718: EMPTY
53719: LIST
53720: LIST
53721: PUSH
53722: LD_INT 4
53724: NEG
53725: PUSH
53726: LD_INT 3
53728: NEG
53729: PUSH
53730: EMPTY
53731: LIST
53732: LIST
53733: PUSH
53734: LD_INT 5
53736: NEG
53737: PUSH
53738: LD_INT 4
53740: NEG
53741: PUSH
53742: EMPTY
53743: LIST
53744: LIST
53745: PUSH
53746: LD_INT 5
53748: NEG
53749: PUSH
53750: LD_INT 5
53752: NEG
53753: PUSH
53754: EMPTY
53755: LIST
53756: LIST
53757: PUSH
53758: LD_INT 3
53760: NEG
53761: PUSH
53762: LD_INT 5
53764: NEG
53765: PUSH
53766: EMPTY
53767: LIST
53768: LIST
53769: PUSH
53770: LD_INT 5
53772: NEG
53773: PUSH
53774: LD_INT 3
53776: NEG
53777: PUSH
53778: EMPTY
53779: LIST
53780: LIST
53781: PUSH
53782: EMPTY
53783: LIST
53784: LIST
53785: LIST
53786: LIST
53787: LIST
53788: LIST
53789: LIST
53790: LIST
53791: LIST
53792: LIST
53793: LIST
53794: LIST
53795: LIST
53796: LIST
53797: LIST
53798: LIST
53799: LIST
53800: LIST
53801: LIST
53802: LIST
53803: LIST
53804: LIST
53805: LIST
53806: LIST
53807: LIST
53808: LIST
53809: LIST
53810: LIST
53811: LIST
53812: LIST
53813: LIST
53814: LIST
53815: LIST
53816: LIST
53817: LIST
53818: LIST
53819: LIST
53820: LIST
53821: LIST
53822: LIST
53823: LIST
53824: LIST
53825: LIST
53826: LIST
53827: LIST
53828: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
53829: LD_ADDR_VAR 0 30
53833: PUSH
53834: LD_INT 4
53836: PUSH
53837: LD_INT 4
53839: PUSH
53840: EMPTY
53841: LIST
53842: LIST
53843: PUSH
53844: LD_INT 4
53846: PUSH
53847: LD_INT 3
53849: PUSH
53850: EMPTY
53851: LIST
53852: LIST
53853: PUSH
53854: LD_INT 5
53856: PUSH
53857: LD_INT 4
53859: PUSH
53860: EMPTY
53861: LIST
53862: LIST
53863: PUSH
53864: LD_INT 5
53866: PUSH
53867: LD_INT 5
53869: PUSH
53870: EMPTY
53871: LIST
53872: LIST
53873: PUSH
53874: LD_INT 4
53876: PUSH
53877: LD_INT 5
53879: PUSH
53880: EMPTY
53881: LIST
53882: LIST
53883: PUSH
53884: LD_INT 3
53886: PUSH
53887: LD_INT 4
53889: PUSH
53890: EMPTY
53891: LIST
53892: LIST
53893: PUSH
53894: LD_INT 3
53896: PUSH
53897: LD_INT 3
53899: PUSH
53900: EMPTY
53901: LIST
53902: LIST
53903: PUSH
53904: LD_INT 5
53906: PUSH
53907: LD_INT 3
53909: PUSH
53910: EMPTY
53911: LIST
53912: LIST
53913: PUSH
53914: LD_INT 3
53916: PUSH
53917: LD_INT 5
53919: PUSH
53920: EMPTY
53921: LIST
53922: LIST
53923: PUSH
53924: LD_INT 0
53926: PUSH
53927: LD_INT 3
53929: PUSH
53930: EMPTY
53931: LIST
53932: LIST
53933: PUSH
53934: LD_INT 0
53936: PUSH
53937: LD_INT 2
53939: PUSH
53940: EMPTY
53941: LIST
53942: LIST
53943: PUSH
53944: LD_INT 1
53946: PUSH
53947: LD_INT 3
53949: PUSH
53950: EMPTY
53951: LIST
53952: LIST
53953: PUSH
53954: LD_INT 1
53956: PUSH
53957: LD_INT 4
53959: PUSH
53960: EMPTY
53961: LIST
53962: LIST
53963: PUSH
53964: LD_INT 0
53966: PUSH
53967: LD_INT 4
53969: PUSH
53970: EMPTY
53971: LIST
53972: LIST
53973: PUSH
53974: LD_INT 1
53976: NEG
53977: PUSH
53978: LD_INT 3
53980: PUSH
53981: EMPTY
53982: LIST
53983: LIST
53984: PUSH
53985: LD_INT 1
53987: NEG
53988: PUSH
53989: LD_INT 2
53991: PUSH
53992: EMPTY
53993: LIST
53994: LIST
53995: PUSH
53996: LD_INT 2
53998: PUSH
53999: LD_INT 4
54001: PUSH
54002: EMPTY
54003: LIST
54004: LIST
54005: PUSH
54006: LD_INT 2
54008: NEG
54009: PUSH
54010: LD_INT 2
54012: PUSH
54013: EMPTY
54014: LIST
54015: LIST
54016: PUSH
54017: LD_INT 4
54019: NEG
54020: PUSH
54021: LD_INT 0
54023: PUSH
54024: EMPTY
54025: LIST
54026: LIST
54027: PUSH
54028: LD_INT 4
54030: NEG
54031: PUSH
54032: LD_INT 1
54034: NEG
54035: PUSH
54036: EMPTY
54037: LIST
54038: LIST
54039: PUSH
54040: LD_INT 3
54042: NEG
54043: PUSH
54044: LD_INT 0
54046: PUSH
54047: EMPTY
54048: LIST
54049: LIST
54050: PUSH
54051: LD_INT 3
54053: NEG
54054: PUSH
54055: LD_INT 1
54057: PUSH
54058: EMPTY
54059: LIST
54060: LIST
54061: PUSH
54062: LD_INT 4
54064: NEG
54065: PUSH
54066: LD_INT 1
54068: PUSH
54069: EMPTY
54070: LIST
54071: LIST
54072: PUSH
54073: LD_INT 5
54075: NEG
54076: PUSH
54077: LD_INT 0
54079: PUSH
54080: EMPTY
54081: LIST
54082: LIST
54083: PUSH
54084: LD_INT 5
54086: NEG
54087: PUSH
54088: LD_INT 1
54090: NEG
54091: PUSH
54092: EMPTY
54093: LIST
54094: LIST
54095: PUSH
54096: LD_INT 5
54098: NEG
54099: PUSH
54100: LD_INT 2
54102: NEG
54103: PUSH
54104: EMPTY
54105: LIST
54106: LIST
54107: PUSH
54108: LD_INT 3
54110: NEG
54111: PUSH
54112: LD_INT 2
54114: PUSH
54115: EMPTY
54116: LIST
54117: LIST
54118: PUSH
54119: LD_INT 3
54121: NEG
54122: PUSH
54123: LD_INT 3
54125: NEG
54126: PUSH
54127: EMPTY
54128: LIST
54129: LIST
54130: PUSH
54131: LD_INT 3
54133: NEG
54134: PUSH
54135: LD_INT 4
54137: NEG
54138: PUSH
54139: EMPTY
54140: LIST
54141: LIST
54142: PUSH
54143: LD_INT 2
54145: NEG
54146: PUSH
54147: LD_INT 3
54149: NEG
54150: PUSH
54151: EMPTY
54152: LIST
54153: LIST
54154: PUSH
54155: LD_INT 2
54157: NEG
54158: PUSH
54159: LD_INT 2
54161: NEG
54162: PUSH
54163: EMPTY
54164: LIST
54165: LIST
54166: PUSH
54167: LD_INT 3
54169: NEG
54170: PUSH
54171: LD_INT 2
54173: NEG
54174: PUSH
54175: EMPTY
54176: LIST
54177: LIST
54178: PUSH
54179: LD_INT 4
54181: NEG
54182: PUSH
54183: LD_INT 3
54185: NEG
54186: PUSH
54187: EMPTY
54188: LIST
54189: LIST
54190: PUSH
54191: LD_INT 4
54193: NEG
54194: PUSH
54195: LD_INT 4
54197: NEG
54198: PUSH
54199: EMPTY
54200: LIST
54201: LIST
54202: PUSH
54203: LD_INT 2
54205: NEG
54206: PUSH
54207: LD_INT 4
54209: NEG
54210: PUSH
54211: EMPTY
54212: LIST
54213: LIST
54214: PUSH
54215: LD_INT 4
54217: NEG
54218: PUSH
54219: LD_INT 2
54221: NEG
54222: PUSH
54223: EMPTY
54224: LIST
54225: LIST
54226: PUSH
54227: LD_INT 0
54229: PUSH
54230: LD_INT 4
54232: NEG
54233: PUSH
54234: EMPTY
54235: LIST
54236: LIST
54237: PUSH
54238: LD_INT 0
54240: PUSH
54241: LD_INT 5
54243: NEG
54244: PUSH
54245: EMPTY
54246: LIST
54247: LIST
54248: PUSH
54249: LD_INT 1
54251: PUSH
54252: LD_INT 4
54254: NEG
54255: PUSH
54256: EMPTY
54257: LIST
54258: LIST
54259: PUSH
54260: LD_INT 1
54262: PUSH
54263: LD_INT 3
54265: NEG
54266: PUSH
54267: EMPTY
54268: LIST
54269: LIST
54270: PUSH
54271: LD_INT 0
54273: PUSH
54274: LD_INT 3
54276: NEG
54277: PUSH
54278: EMPTY
54279: LIST
54280: LIST
54281: PUSH
54282: LD_INT 1
54284: NEG
54285: PUSH
54286: LD_INT 4
54288: NEG
54289: PUSH
54290: EMPTY
54291: LIST
54292: LIST
54293: PUSH
54294: LD_INT 1
54296: NEG
54297: PUSH
54298: LD_INT 5
54300: NEG
54301: PUSH
54302: EMPTY
54303: LIST
54304: LIST
54305: PUSH
54306: LD_INT 2
54308: PUSH
54309: LD_INT 3
54311: NEG
54312: PUSH
54313: EMPTY
54314: LIST
54315: LIST
54316: PUSH
54317: LD_INT 2
54319: NEG
54320: PUSH
54321: LD_INT 5
54323: NEG
54324: PUSH
54325: EMPTY
54326: LIST
54327: LIST
54328: PUSH
54329: EMPTY
54330: LIST
54331: LIST
54332: LIST
54333: LIST
54334: LIST
54335: LIST
54336: LIST
54337: LIST
54338: LIST
54339: LIST
54340: LIST
54341: LIST
54342: LIST
54343: LIST
54344: LIST
54345: LIST
54346: LIST
54347: LIST
54348: LIST
54349: LIST
54350: LIST
54351: LIST
54352: LIST
54353: LIST
54354: LIST
54355: LIST
54356: LIST
54357: LIST
54358: LIST
54359: LIST
54360: LIST
54361: LIST
54362: LIST
54363: LIST
54364: LIST
54365: LIST
54366: LIST
54367: LIST
54368: LIST
54369: LIST
54370: LIST
54371: LIST
54372: LIST
54373: LIST
54374: LIST
54375: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
54376: LD_ADDR_VAR 0 31
54380: PUSH
54381: LD_INT 0
54383: PUSH
54384: LD_INT 4
54386: PUSH
54387: EMPTY
54388: LIST
54389: LIST
54390: PUSH
54391: LD_INT 0
54393: PUSH
54394: LD_INT 3
54396: PUSH
54397: EMPTY
54398: LIST
54399: LIST
54400: PUSH
54401: LD_INT 1
54403: PUSH
54404: LD_INT 4
54406: PUSH
54407: EMPTY
54408: LIST
54409: LIST
54410: PUSH
54411: LD_INT 1
54413: PUSH
54414: LD_INT 5
54416: PUSH
54417: EMPTY
54418: LIST
54419: LIST
54420: PUSH
54421: LD_INT 0
54423: PUSH
54424: LD_INT 5
54426: PUSH
54427: EMPTY
54428: LIST
54429: LIST
54430: PUSH
54431: LD_INT 1
54433: NEG
54434: PUSH
54435: LD_INT 4
54437: PUSH
54438: EMPTY
54439: LIST
54440: LIST
54441: PUSH
54442: LD_INT 1
54444: NEG
54445: PUSH
54446: LD_INT 3
54448: PUSH
54449: EMPTY
54450: LIST
54451: LIST
54452: PUSH
54453: LD_INT 2
54455: PUSH
54456: LD_INT 5
54458: PUSH
54459: EMPTY
54460: LIST
54461: LIST
54462: PUSH
54463: LD_INT 2
54465: NEG
54466: PUSH
54467: LD_INT 3
54469: PUSH
54470: EMPTY
54471: LIST
54472: LIST
54473: PUSH
54474: LD_INT 3
54476: NEG
54477: PUSH
54478: LD_INT 0
54480: PUSH
54481: EMPTY
54482: LIST
54483: LIST
54484: PUSH
54485: LD_INT 3
54487: NEG
54488: PUSH
54489: LD_INT 1
54491: NEG
54492: PUSH
54493: EMPTY
54494: LIST
54495: LIST
54496: PUSH
54497: LD_INT 2
54499: NEG
54500: PUSH
54501: LD_INT 0
54503: PUSH
54504: EMPTY
54505: LIST
54506: LIST
54507: PUSH
54508: LD_INT 2
54510: NEG
54511: PUSH
54512: LD_INT 1
54514: PUSH
54515: EMPTY
54516: LIST
54517: LIST
54518: PUSH
54519: LD_INT 3
54521: NEG
54522: PUSH
54523: LD_INT 1
54525: PUSH
54526: EMPTY
54527: LIST
54528: LIST
54529: PUSH
54530: LD_INT 4
54532: NEG
54533: PUSH
54534: LD_INT 0
54536: PUSH
54537: EMPTY
54538: LIST
54539: LIST
54540: PUSH
54541: LD_INT 4
54543: NEG
54544: PUSH
54545: LD_INT 1
54547: NEG
54548: PUSH
54549: EMPTY
54550: LIST
54551: LIST
54552: PUSH
54553: LD_INT 4
54555: NEG
54556: PUSH
54557: LD_INT 2
54559: NEG
54560: PUSH
54561: EMPTY
54562: LIST
54563: LIST
54564: PUSH
54565: LD_INT 2
54567: NEG
54568: PUSH
54569: LD_INT 2
54571: PUSH
54572: EMPTY
54573: LIST
54574: LIST
54575: PUSH
54576: LD_INT 4
54578: NEG
54579: PUSH
54580: LD_INT 4
54582: NEG
54583: PUSH
54584: EMPTY
54585: LIST
54586: LIST
54587: PUSH
54588: LD_INT 4
54590: NEG
54591: PUSH
54592: LD_INT 5
54594: NEG
54595: PUSH
54596: EMPTY
54597: LIST
54598: LIST
54599: PUSH
54600: LD_INT 3
54602: NEG
54603: PUSH
54604: LD_INT 4
54606: NEG
54607: PUSH
54608: EMPTY
54609: LIST
54610: LIST
54611: PUSH
54612: LD_INT 3
54614: NEG
54615: PUSH
54616: LD_INT 3
54618: NEG
54619: PUSH
54620: EMPTY
54621: LIST
54622: LIST
54623: PUSH
54624: LD_INT 4
54626: NEG
54627: PUSH
54628: LD_INT 3
54630: NEG
54631: PUSH
54632: EMPTY
54633: LIST
54634: LIST
54635: PUSH
54636: LD_INT 5
54638: NEG
54639: PUSH
54640: LD_INT 4
54642: NEG
54643: PUSH
54644: EMPTY
54645: LIST
54646: LIST
54647: PUSH
54648: LD_INT 5
54650: NEG
54651: PUSH
54652: LD_INT 5
54654: NEG
54655: PUSH
54656: EMPTY
54657: LIST
54658: LIST
54659: PUSH
54660: LD_INT 3
54662: NEG
54663: PUSH
54664: LD_INT 5
54666: NEG
54667: PUSH
54668: EMPTY
54669: LIST
54670: LIST
54671: PUSH
54672: LD_INT 5
54674: NEG
54675: PUSH
54676: LD_INT 3
54678: NEG
54679: PUSH
54680: EMPTY
54681: LIST
54682: LIST
54683: PUSH
54684: LD_INT 0
54686: PUSH
54687: LD_INT 3
54689: NEG
54690: PUSH
54691: EMPTY
54692: LIST
54693: LIST
54694: PUSH
54695: LD_INT 0
54697: PUSH
54698: LD_INT 4
54700: NEG
54701: PUSH
54702: EMPTY
54703: LIST
54704: LIST
54705: PUSH
54706: LD_INT 1
54708: PUSH
54709: LD_INT 3
54711: NEG
54712: PUSH
54713: EMPTY
54714: LIST
54715: LIST
54716: PUSH
54717: LD_INT 1
54719: PUSH
54720: LD_INT 2
54722: NEG
54723: PUSH
54724: EMPTY
54725: LIST
54726: LIST
54727: PUSH
54728: LD_INT 0
54730: PUSH
54731: LD_INT 2
54733: NEG
54734: PUSH
54735: EMPTY
54736: LIST
54737: LIST
54738: PUSH
54739: LD_INT 1
54741: NEG
54742: PUSH
54743: LD_INT 3
54745: NEG
54746: PUSH
54747: EMPTY
54748: LIST
54749: LIST
54750: PUSH
54751: LD_INT 1
54753: NEG
54754: PUSH
54755: LD_INT 4
54757: NEG
54758: PUSH
54759: EMPTY
54760: LIST
54761: LIST
54762: PUSH
54763: LD_INT 2
54765: PUSH
54766: LD_INT 2
54768: NEG
54769: PUSH
54770: EMPTY
54771: LIST
54772: LIST
54773: PUSH
54774: LD_INT 2
54776: NEG
54777: PUSH
54778: LD_INT 4
54780: NEG
54781: PUSH
54782: EMPTY
54783: LIST
54784: LIST
54785: PUSH
54786: LD_INT 4
54788: PUSH
54789: LD_INT 0
54791: PUSH
54792: EMPTY
54793: LIST
54794: LIST
54795: PUSH
54796: LD_INT 4
54798: PUSH
54799: LD_INT 1
54801: NEG
54802: PUSH
54803: EMPTY
54804: LIST
54805: LIST
54806: PUSH
54807: LD_INT 5
54809: PUSH
54810: LD_INT 0
54812: PUSH
54813: EMPTY
54814: LIST
54815: LIST
54816: PUSH
54817: LD_INT 5
54819: PUSH
54820: LD_INT 1
54822: PUSH
54823: EMPTY
54824: LIST
54825: LIST
54826: PUSH
54827: LD_INT 4
54829: PUSH
54830: LD_INT 1
54832: PUSH
54833: EMPTY
54834: LIST
54835: LIST
54836: PUSH
54837: LD_INT 3
54839: PUSH
54840: LD_INT 0
54842: PUSH
54843: EMPTY
54844: LIST
54845: LIST
54846: PUSH
54847: LD_INT 3
54849: PUSH
54850: LD_INT 1
54852: NEG
54853: PUSH
54854: EMPTY
54855: LIST
54856: LIST
54857: PUSH
54858: LD_INT 3
54860: PUSH
54861: LD_INT 2
54863: NEG
54864: PUSH
54865: EMPTY
54866: LIST
54867: LIST
54868: PUSH
54869: LD_INT 5
54871: PUSH
54872: LD_INT 2
54874: PUSH
54875: EMPTY
54876: LIST
54877: LIST
54878: PUSH
54879: EMPTY
54880: LIST
54881: LIST
54882: LIST
54883: LIST
54884: LIST
54885: LIST
54886: LIST
54887: LIST
54888: LIST
54889: LIST
54890: LIST
54891: LIST
54892: LIST
54893: LIST
54894: LIST
54895: LIST
54896: LIST
54897: LIST
54898: LIST
54899: LIST
54900: LIST
54901: LIST
54902: LIST
54903: LIST
54904: LIST
54905: LIST
54906: LIST
54907: LIST
54908: LIST
54909: LIST
54910: LIST
54911: LIST
54912: LIST
54913: LIST
54914: LIST
54915: LIST
54916: LIST
54917: LIST
54918: LIST
54919: LIST
54920: LIST
54921: LIST
54922: LIST
54923: LIST
54924: LIST
54925: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
54926: LD_ADDR_VAR 0 32
54930: PUSH
54931: LD_INT 4
54933: NEG
54934: PUSH
54935: LD_INT 0
54937: PUSH
54938: EMPTY
54939: LIST
54940: LIST
54941: PUSH
54942: LD_INT 4
54944: NEG
54945: PUSH
54946: LD_INT 1
54948: NEG
54949: PUSH
54950: EMPTY
54951: LIST
54952: LIST
54953: PUSH
54954: LD_INT 3
54956: NEG
54957: PUSH
54958: LD_INT 0
54960: PUSH
54961: EMPTY
54962: LIST
54963: LIST
54964: PUSH
54965: LD_INT 3
54967: NEG
54968: PUSH
54969: LD_INT 1
54971: PUSH
54972: EMPTY
54973: LIST
54974: LIST
54975: PUSH
54976: LD_INT 4
54978: NEG
54979: PUSH
54980: LD_INT 1
54982: PUSH
54983: EMPTY
54984: LIST
54985: LIST
54986: PUSH
54987: LD_INT 5
54989: NEG
54990: PUSH
54991: LD_INT 0
54993: PUSH
54994: EMPTY
54995: LIST
54996: LIST
54997: PUSH
54998: LD_INT 5
55000: NEG
55001: PUSH
55002: LD_INT 1
55004: NEG
55005: PUSH
55006: EMPTY
55007: LIST
55008: LIST
55009: PUSH
55010: LD_INT 5
55012: NEG
55013: PUSH
55014: LD_INT 2
55016: NEG
55017: PUSH
55018: EMPTY
55019: LIST
55020: LIST
55021: PUSH
55022: LD_INT 3
55024: NEG
55025: PUSH
55026: LD_INT 2
55028: PUSH
55029: EMPTY
55030: LIST
55031: LIST
55032: PUSH
55033: LD_INT 3
55035: NEG
55036: PUSH
55037: LD_INT 3
55039: NEG
55040: PUSH
55041: EMPTY
55042: LIST
55043: LIST
55044: PUSH
55045: LD_INT 3
55047: NEG
55048: PUSH
55049: LD_INT 4
55051: NEG
55052: PUSH
55053: EMPTY
55054: LIST
55055: LIST
55056: PUSH
55057: LD_INT 2
55059: NEG
55060: PUSH
55061: LD_INT 3
55063: NEG
55064: PUSH
55065: EMPTY
55066: LIST
55067: LIST
55068: PUSH
55069: LD_INT 2
55071: NEG
55072: PUSH
55073: LD_INT 2
55075: NEG
55076: PUSH
55077: EMPTY
55078: LIST
55079: LIST
55080: PUSH
55081: LD_INT 3
55083: NEG
55084: PUSH
55085: LD_INT 2
55087: NEG
55088: PUSH
55089: EMPTY
55090: LIST
55091: LIST
55092: PUSH
55093: LD_INT 4
55095: NEG
55096: PUSH
55097: LD_INT 3
55099: NEG
55100: PUSH
55101: EMPTY
55102: LIST
55103: LIST
55104: PUSH
55105: LD_INT 4
55107: NEG
55108: PUSH
55109: LD_INT 4
55111: NEG
55112: PUSH
55113: EMPTY
55114: LIST
55115: LIST
55116: PUSH
55117: LD_INT 2
55119: NEG
55120: PUSH
55121: LD_INT 4
55123: NEG
55124: PUSH
55125: EMPTY
55126: LIST
55127: LIST
55128: PUSH
55129: LD_INT 4
55131: NEG
55132: PUSH
55133: LD_INT 2
55135: NEG
55136: PUSH
55137: EMPTY
55138: LIST
55139: LIST
55140: PUSH
55141: LD_INT 0
55143: PUSH
55144: LD_INT 4
55146: NEG
55147: PUSH
55148: EMPTY
55149: LIST
55150: LIST
55151: PUSH
55152: LD_INT 0
55154: PUSH
55155: LD_INT 5
55157: NEG
55158: PUSH
55159: EMPTY
55160: LIST
55161: LIST
55162: PUSH
55163: LD_INT 1
55165: PUSH
55166: LD_INT 4
55168: NEG
55169: PUSH
55170: EMPTY
55171: LIST
55172: LIST
55173: PUSH
55174: LD_INT 1
55176: PUSH
55177: LD_INT 3
55179: NEG
55180: PUSH
55181: EMPTY
55182: LIST
55183: LIST
55184: PUSH
55185: LD_INT 0
55187: PUSH
55188: LD_INT 3
55190: NEG
55191: PUSH
55192: EMPTY
55193: LIST
55194: LIST
55195: PUSH
55196: LD_INT 1
55198: NEG
55199: PUSH
55200: LD_INT 4
55202: NEG
55203: PUSH
55204: EMPTY
55205: LIST
55206: LIST
55207: PUSH
55208: LD_INT 1
55210: NEG
55211: PUSH
55212: LD_INT 5
55214: NEG
55215: PUSH
55216: EMPTY
55217: LIST
55218: LIST
55219: PUSH
55220: LD_INT 2
55222: PUSH
55223: LD_INT 3
55225: NEG
55226: PUSH
55227: EMPTY
55228: LIST
55229: LIST
55230: PUSH
55231: LD_INT 2
55233: NEG
55234: PUSH
55235: LD_INT 5
55237: NEG
55238: PUSH
55239: EMPTY
55240: LIST
55241: LIST
55242: PUSH
55243: LD_INT 3
55245: PUSH
55246: LD_INT 0
55248: PUSH
55249: EMPTY
55250: LIST
55251: LIST
55252: PUSH
55253: LD_INT 3
55255: PUSH
55256: LD_INT 1
55258: NEG
55259: PUSH
55260: EMPTY
55261: LIST
55262: LIST
55263: PUSH
55264: LD_INT 4
55266: PUSH
55267: LD_INT 0
55269: PUSH
55270: EMPTY
55271: LIST
55272: LIST
55273: PUSH
55274: LD_INT 4
55276: PUSH
55277: LD_INT 1
55279: PUSH
55280: EMPTY
55281: LIST
55282: LIST
55283: PUSH
55284: LD_INT 3
55286: PUSH
55287: LD_INT 1
55289: PUSH
55290: EMPTY
55291: LIST
55292: LIST
55293: PUSH
55294: LD_INT 2
55296: PUSH
55297: LD_INT 0
55299: PUSH
55300: EMPTY
55301: LIST
55302: LIST
55303: PUSH
55304: LD_INT 2
55306: PUSH
55307: LD_INT 1
55309: NEG
55310: PUSH
55311: EMPTY
55312: LIST
55313: LIST
55314: PUSH
55315: LD_INT 2
55317: PUSH
55318: LD_INT 2
55320: NEG
55321: PUSH
55322: EMPTY
55323: LIST
55324: LIST
55325: PUSH
55326: LD_INT 4
55328: PUSH
55329: LD_INT 2
55331: PUSH
55332: EMPTY
55333: LIST
55334: LIST
55335: PUSH
55336: LD_INT 4
55338: PUSH
55339: LD_INT 4
55341: PUSH
55342: EMPTY
55343: LIST
55344: LIST
55345: PUSH
55346: LD_INT 4
55348: PUSH
55349: LD_INT 3
55351: PUSH
55352: EMPTY
55353: LIST
55354: LIST
55355: PUSH
55356: LD_INT 5
55358: PUSH
55359: LD_INT 4
55361: PUSH
55362: EMPTY
55363: LIST
55364: LIST
55365: PUSH
55366: LD_INT 5
55368: PUSH
55369: LD_INT 5
55371: PUSH
55372: EMPTY
55373: LIST
55374: LIST
55375: PUSH
55376: LD_INT 4
55378: PUSH
55379: LD_INT 5
55381: PUSH
55382: EMPTY
55383: LIST
55384: LIST
55385: PUSH
55386: LD_INT 3
55388: PUSH
55389: LD_INT 4
55391: PUSH
55392: EMPTY
55393: LIST
55394: LIST
55395: PUSH
55396: LD_INT 3
55398: PUSH
55399: LD_INT 3
55401: PUSH
55402: EMPTY
55403: LIST
55404: LIST
55405: PUSH
55406: LD_INT 5
55408: PUSH
55409: LD_INT 3
55411: PUSH
55412: EMPTY
55413: LIST
55414: LIST
55415: PUSH
55416: LD_INT 3
55418: PUSH
55419: LD_INT 5
55421: PUSH
55422: EMPTY
55423: LIST
55424: LIST
55425: PUSH
55426: EMPTY
55427: LIST
55428: LIST
55429: LIST
55430: LIST
55431: LIST
55432: LIST
55433: LIST
55434: LIST
55435: LIST
55436: LIST
55437: LIST
55438: LIST
55439: LIST
55440: LIST
55441: LIST
55442: LIST
55443: LIST
55444: LIST
55445: LIST
55446: LIST
55447: LIST
55448: LIST
55449: LIST
55450: LIST
55451: LIST
55452: LIST
55453: LIST
55454: LIST
55455: LIST
55456: LIST
55457: LIST
55458: LIST
55459: LIST
55460: LIST
55461: LIST
55462: LIST
55463: LIST
55464: LIST
55465: LIST
55466: LIST
55467: LIST
55468: LIST
55469: LIST
55470: LIST
55471: LIST
55472: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
55473: LD_ADDR_VAR 0 33
55477: PUSH
55478: LD_INT 4
55480: NEG
55481: PUSH
55482: LD_INT 4
55484: NEG
55485: PUSH
55486: EMPTY
55487: LIST
55488: LIST
55489: PUSH
55490: LD_INT 4
55492: NEG
55493: PUSH
55494: LD_INT 5
55496: NEG
55497: PUSH
55498: EMPTY
55499: LIST
55500: LIST
55501: PUSH
55502: LD_INT 3
55504: NEG
55505: PUSH
55506: LD_INT 4
55508: NEG
55509: PUSH
55510: EMPTY
55511: LIST
55512: LIST
55513: PUSH
55514: LD_INT 3
55516: NEG
55517: PUSH
55518: LD_INT 3
55520: NEG
55521: PUSH
55522: EMPTY
55523: LIST
55524: LIST
55525: PUSH
55526: LD_INT 4
55528: NEG
55529: PUSH
55530: LD_INT 3
55532: NEG
55533: PUSH
55534: EMPTY
55535: LIST
55536: LIST
55537: PUSH
55538: LD_INT 5
55540: NEG
55541: PUSH
55542: LD_INT 4
55544: NEG
55545: PUSH
55546: EMPTY
55547: LIST
55548: LIST
55549: PUSH
55550: LD_INT 5
55552: NEG
55553: PUSH
55554: LD_INT 5
55556: NEG
55557: PUSH
55558: EMPTY
55559: LIST
55560: LIST
55561: PUSH
55562: LD_INT 3
55564: NEG
55565: PUSH
55566: LD_INT 5
55568: NEG
55569: PUSH
55570: EMPTY
55571: LIST
55572: LIST
55573: PUSH
55574: LD_INT 5
55576: NEG
55577: PUSH
55578: LD_INT 3
55580: NEG
55581: PUSH
55582: EMPTY
55583: LIST
55584: LIST
55585: PUSH
55586: LD_INT 0
55588: PUSH
55589: LD_INT 3
55591: NEG
55592: PUSH
55593: EMPTY
55594: LIST
55595: LIST
55596: PUSH
55597: LD_INT 0
55599: PUSH
55600: LD_INT 4
55602: NEG
55603: PUSH
55604: EMPTY
55605: LIST
55606: LIST
55607: PUSH
55608: LD_INT 1
55610: PUSH
55611: LD_INT 3
55613: NEG
55614: PUSH
55615: EMPTY
55616: LIST
55617: LIST
55618: PUSH
55619: LD_INT 1
55621: PUSH
55622: LD_INT 2
55624: NEG
55625: PUSH
55626: EMPTY
55627: LIST
55628: LIST
55629: PUSH
55630: LD_INT 0
55632: PUSH
55633: LD_INT 2
55635: NEG
55636: PUSH
55637: EMPTY
55638: LIST
55639: LIST
55640: PUSH
55641: LD_INT 1
55643: NEG
55644: PUSH
55645: LD_INT 3
55647: NEG
55648: PUSH
55649: EMPTY
55650: LIST
55651: LIST
55652: PUSH
55653: LD_INT 1
55655: NEG
55656: PUSH
55657: LD_INT 4
55659: NEG
55660: PUSH
55661: EMPTY
55662: LIST
55663: LIST
55664: PUSH
55665: LD_INT 2
55667: PUSH
55668: LD_INT 2
55670: NEG
55671: PUSH
55672: EMPTY
55673: LIST
55674: LIST
55675: PUSH
55676: LD_INT 2
55678: NEG
55679: PUSH
55680: LD_INT 4
55682: NEG
55683: PUSH
55684: EMPTY
55685: LIST
55686: LIST
55687: PUSH
55688: LD_INT 4
55690: PUSH
55691: LD_INT 0
55693: PUSH
55694: EMPTY
55695: LIST
55696: LIST
55697: PUSH
55698: LD_INT 4
55700: PUSH
55701: LD_INT 1
55703: NEG
55704: PUSH
55705: EMPTY
55706: LIST
55707: LIST
55708: PUSH
55709: LD_INT 5
55711: PUSH
55712: LD_INT 0
55714: PUSH
55715: EMPTY
55716: LIST
55717: LIST
55718: PUSH
55719: LD_INT 5
55721: PUSH
55722: LD_INT 1
55724: PUSH
55725: EMPTY
55726: LIST
55727: LIST
55728: PUSH
55729: LD_INT 4
55731: PUSH
55732: LD_INT 1
55734: PUSH
55735: EMPTY
55736: LIST
55737: LIST
55738: PUSH
55739: LD_INT 3
55741: PUSH
55742: LD_INT 0
55744: PUSH
55745: EMPTY
55746: LIST
55747: LIST
55748: PUSH
55749: LD_INT 3
55751: PUSH
55752: LD_INT 1
55754: NEG
55755: PUSH
55756: EMPTY
55757: LIST
55758: LIST
55759: PUSH
55760: LD_INT 3
55762: PUSH
55763: LD_INT 2
55765: NEG
55766: PUSH
55767: EMPTY
55768: LIST
55769: LIST
55770: PUSH
55771: LD_INT 5
55773: PUSH
55774: LD_INT 2
55776: PUSH
55777: EMPTY
55778: LIST
55779: LIST
55780: PUSH
55781: LD_INT 3
55783: PUSH
55784: LD_INT 3
55786: PUSH
55787: EMPTY
55788: LIST
55789: LIST
55790: PUSH
55791: LD_INT 3
55793: PUSH
55794: LD_INT 2
55796: PUSH
55797: EMPTY
55798: LIST
55799: LIST
55800: PUSH
55801: LD_INT 4
55803: PUSH
55804: LD_INT 3
55806: PUSH
55807: EMPTY
55808: LIST
55809: LIST
55810: PUSH
55811: LD_INT 4
55813: PUSH
55814: LD_INT 4
55816: PUSH
55817: EMPTY
55818: LIST
55819: LIST
55820: PUSH
55821: LD_INT 3
55823: PUSH
55824: LD_INT 4
55826: PUSH
55827: EMPTY
55828: LIST
55829: LIST
55830: PUSH
55831: LD_INT 2
55833: PUSH
55834: LD_INT 3
55836: PUSH
55837: EMPTY
55838: LIST
55839: LIST
55840: PUSH
55841: LD_INT 2
55843: PUSH
55844: LD_INT 2
55846: PUSH
55847: EMPTY
55848: LIST
55849: LIST
55850: PUSH
55851: LD_INT 4
55853: PUSH
55854: LD_INT 2
55856: PUSH
55857: EMPTY
55858: LIST
55859: LIST
55860: PUSH
55861: LD_INT 2
55863: PUSH
55864: LD_INT 4
55866: PUSH
55867: EMPTY
55868: LIST
55869: LIST
55870: PUSH
55871: LD_INT 0
55873: PUSH
55874: LD_INT 4
55876: PUSH
55877: EMPTY
55878: LIST
55879: LIST
55880: PUSH
55881: LD_INT 0
55883: PUSH
55884: LD_INT 3
55886: PUSH
55887: EMPTY
55888: LIST
55889: LIST
55890: PUSH
55891: LD_INT 1
55893: PUSH
55894: LD_INT 4
55896: PUSH
55897: EMPTY
55898: LIST
55899: LIST
55900: PUSH
55901: LD_INT 1
55903: PUSH
55904: LD_INT 5
55906: PUSH
55907: EMPTY
55908: LIST
55909: LIST
55910: PUSH
55911: LD_INT 0
55913: PUSH
55914: LD_INT 5
55916: PUSH
55917: EMPTY
55918: LIST
55919: LIST
55920: PUSH
55921: LD_INT 1
55923: NEG
55924: PUSH
55925: LD_INT 4
55927: PUSH
55928: EMPTY
55929: LIST
55930: LIST
55931: PUSH
55932: LD_INT 1
55934: NEG
55935: PUSH
55936: LD_INT 3
55938: PUSH
55939: EMPTY
55940: LIST
55941: LIST
55942: PUSH
55943: LD_INT 2
55945: PUSH
55946: LD_INT 5
55948: PUSH
55949: EMPTY
55950: LIST
55951: LIST
55952: PUSH
55953: LD_INT 2
55955: NEG
55956: PUSH
55957: LD_INT 3
55959: PUSH
55960: EMPTY
55961: LIST
55962: LIST
55963: PUSH
55964: EMPTY
55965: LIST
55966: LIST
55967: LIST
55968: LIST
55969: LIST
55970: LIST
55971: LIST
55972: LIST
55973: LIST
55974: LIST
55975: LIST
55976: LIST
55977: LIST
55978: LIST
55979: LIST
55980: LIST
55981: LIST
55982: LIST
55983: LIST
55984: LIST
55985: LIST
55986: LIST
55987: LIST
55988: LIST
55989: LIST
55990: LIST
55991: LIST
55992: LIST
55993: LIST
55994: LIST
55995: LIST
55996: LIST
55997: LIST
55998: LIST
55999: LIST
56000: LIST
56001: LIST
56002: LIST
56003: LIST
56004: LIST
56005: LIST
56006: LIST
56007: LIST
56008: LIST
56009: LIST
56010: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
56011: LD_ADDR_VAR 0 34
56015: PUSH
56016: LD_INT 0
56018: PUSH
56019: LD_INT 4
56021: NEG
56022: PUSH
56023: EMPTY
56024: LIST
56025: LIST
56026: PUSH
56027: LD_INT 0
56029: PUSH
56030: LD_INT 5
56032: NEG
56033: PUSH
56034: EMPTY
56035: LIST
56036: LIST
56037: PUSH
56038: LD_INT 1
56040: PUSH
56041: LD_INT 4
56043: NEG
56044: PUSH
56045: EMPTY
56046: LIST
56047: LIST
56048: PUSH
56049: LD_INT 1
56051: PUSH
56052: LD_INT 3
56054: NEG
56055: PUSH
56056: EMPTY
56057: LIST
56058: LIST
56059: PUSH
56060: LD_INT 0
56062: PUSH
56063: LD_INT 3
56065: NEG
56066: PUSH
56067: EMPTY
56068: LIST
56069: LIST
56070: PUSH
56071: LD_INT 1
56073: NEG
56074: PUSH
56075: LD_INT 4
56077: NEG
56078: PUSH
56079: EMPTY
56080: LIST
56081: LIST
56082: PUSH
56083: LD_INT 1
56085: NEG
56086: PUSH
56087: LD_INT 5
56089: NEG
56090: PUSH
56091: EMPTY
56092: LIST
56093: LIST
56094: PUSH
56095: LD_INT 2
56097: PUSH
56098: LD_INT 3
56100: NEG
56101: PUSH
56102: EMPTY
56103: LIST
56104: LIST
56105: PUSH
56106: LD_INT 2
56108: NEG
56109: PUSH
56110: LD_INT 5
56112: NEG
56113: PUSH
56114: EMPTY
56115: LIST
56116: LIST
56117: PUSH
56118: LD_INT 3
56120: PUSH
56121: LD_INT 0
56123: PUSH
56124: EMPTY
56125: LIST
56126: LIST
56127: PUSH
56128: LD_INT 3
56130: PUSH
56131: LD_INT 1
56133: NEG
56134: PUSH
56135: EMPTY
56136: LIST
56137: LIST
56138: PUSH
56139: LD_INT 4
56141: PUSH
56142: LD_INT 0
56144: PUSH
56145: EMPTY
56146: LIST
56147: LIST
56148: PUSH
56149: LD_INT 4
56151: PUSH
56152: LD_INT 1
56154: PUSH
56155: EMPTY
56156: LIST
56157: LIST
56158: PUSH
56159: LD_INT 3
56161: PUSH
56162: LD_INT 1
56164: PUSH
56165: EMPTY
56166: LIST
56167: LIST
56168: PUSH
56169: LD_INT 2
56171: PUSH
56172: LD_INT 0
56174: PUSH
56175: EMPTY
56176: LIST
56177: LIST
56178: PUSH
56179: LD_INT 2
56181: PUSH
56182: LD_INT 1
56184: NEG
56185: PUSH
56186: EMPTY
56187: LIST
56188: LIST
56189: PUSH
56190: LD_INT 2
56192: PUSH
56193: LD_INT 2
56195: NEG
56196: PUSH
56197: EMPTY
56198: LIST
56199: LIST
56200: PUSH
56201: LD_INT 4
56203: PUSH
56204: LD_INT 2
56206: PUSH
56207: EMPTY
56208: LIST
56209: LIST
56210: PUSH
56211: LD_INT 4
56213: PUSH
56214: LD_INT 4
56216: PUSH
56217: EMPTY
56218: LIST
56219: LIST
56220: PUSH
56221: LD_INT 4
56223: PUSH
56224: LD_INT 3
56226: PUSH
56227: EMPTY
56228: LIST
56229: LIST
56230: PUSH
56231: LD_INT 5
56233: PUSH
56234: LD_INT 4
56236: PUSH
56237: EMPTY
56238: LIST
56239: LIST
56240: PUSH
56241: LD_INT 5
56243: PUSH
56244: LD_INT 5
56246: PUSH
56247: EMPTY
56248: LIST
56249: LIST
56250: PUSH
56251: LD_INT 4
56253: PUSH
56254: LD_INT 5
56256: PUSH
56257: EMPTY
56258: LIST
56259: LIST
56260: PUSH
56261: LD_INT 3
56263: PUSH
56264: LD_INT 4
56266: PUSH
56267: EMPTY
56268: LIST
56269: LIST
56270: PUSH
56271: LD_INT 3
56273: PUSH
56274: LD_INT 3
56276: PUSH
56277: EMPTY
56278: LIST
56279: LIST
56280: PUSH
56281: LD_INT 5
56283: PUSH
56284: LD_INT 3
56286: PUSH
56287: EMPTY
56288: LIST
56289: LIST
56290: PUSH
56291: LD_INT 3
56293: PUSH
56294: LD_INT 5
56296: PUSH
56297: EMPTY
56298: LIST
56299: LIST
56300: PUSH
56301: LD_INT 0
56303: PUSH
56304: LD_INT 3
56306: PUSH
56307: EMPTY
56308: LIST
56309: LIST
56310: PUSH
56311: LD_INT 0
56313: PUSH
56314: LD_INT 2
56316: PUSH
56317: EMPTY
56318: LIST
56319: LIST
56320: PUSH
56321: LD_INT 1
56323: PUSH
56324: LD_INT 3
56326: PUSH
56327: EMPTY
56328: LIST
56329: LIST
56330: PUSH
56331: LD_INT 1
56333: PUSH
56334: LD_INT 4
56336: PUSH
56337: EMPTY
56338: LIST
56339: LIST
56340: PUSH
56341: LD_INT 0
56343: PUSH
56344: LD_INT 4
56346: PUSH
56347: EMPTY
56348: LIST
56349: LIST
56350: PUSH
56351: LD_INT 1
56353: NEG
56354: PUSH
56355: LD_INT 3
56357: PUSH
56358: EMPTY
56359: LIST
56360: LIST
56361: PUSH
56362: LD_INT 1
56364: NEG
56365: PUSH
56366: LD_INT 2
56368: PUSH
56369: EMPTY
56370: LIST
56371: LIST
56372: PUSH
56373: LD_INT 2
56375: PUSH
56376: LD_INT 4
56378: PUSH
56379: EMPTY
56380: LIST
56381: LIST
56382: PUSH
56383: LD_INT 2
56385: NEG
56386: PUSH
56387: LD_INT 2
56389: PUSH
56390: EMPTY
56391: LIST
56392: LIST
56393: PUSH
56394: LD_INT 4
56396: NEG
56397: PUSH
56398: LD_INT 0
56400: PUSH
56401: EMPTY
56402: LIST
56403: LIST
56404: PUSH
56405: LD_INT 4
56407: NEG
56408: PUSH
56409: LD_INT 1
56411: NEG
56412: PUSH
56413: EMPTY
56414: LIST
56415: LIST
56416: PUSH
56417: LD_INT 3
56419: NEG
56420: PUSH
56421: LD_INT 0
56423: PUSH
56424: EMPTY
56425: LIST
56426: LIST
56427: PUSH
56428: LD_INT 3
56430: NEG
56431: PUSH
56432: LD_INT 1
56434: PUSH
56435: EMPTY
56436: LIST
56437: LIST
56438: PUSH
56439: LD_INT 4
56441: NEG
56442: PUSH
56443: LD_INT 1
56445: PUSH
56446: EMPTY
56447: LIST
56448: LIST
56449: PUSH
56450: LD_INT 5
56452: NEG
56453: PUSH
56454: LD_INT 0
56456: PUSH
56457: EMPTY
56458: LIST
56459: LIST
56460: PUSH
56461: LD_INT 5
56463: NEG
56464: PUSH
56465: LD_INT 1
56467: NEG
56468: PUSH
56469: EMPTY
56470: LIST
56471: LIST
56472: PUSH
56473: LD_INT 5
56475: NEG
56476: PUSH
56477: LD_INT 2
56479: NEG
56480: PUSH
56481: EMPTY
56482: LIST
56483: LIST
56484: PUSH
56485: LD_INT 3
56487: NEG
56488: PUSH
56489: LD_INT 2
56491: PUSH
56492: EMPTY
56493: LIST
56494: LIST
56495: PUSH
56496: EMPTY
56497: LIST
56498: LIST
56499: LIST
56500: LIST
56501: LIST
56502: LIST
56503: LIST
56504: LIST
56505: LIST
56506: LIST
56507: LIST
56508: LIST
56509: LIST
56510: LIST
56511: LIST
56512: LIST
56513: LIST
56514: LIST
56515: LIST
56516: LIST
56517: LIST
56518: LIST
56519: LIST
56520: LIST
56521: LIST
56522: LIST
56523: LIST
56524: LIST
56525: LIST
56526: LIST
56527: LIST
56528: LIST
56529: LIST
56530: LIST
56531: LIST
56532: LIST
56533: LIST
56534: LIST
56535: LIST
56536: LIST
56537: LIST
56538: LIST
56539: LIST
56540: LIST
56541: LIST
56542: ST_TO_ADDR
// end ; end ;
56543: GO 56546
56545: POP
// case btype of b_depot , b_warehouse :
56546: LD_VAR 0 1
56550: PUSH
56551: LD_INT 0
56553: DOUBLE
56554: EQUAL
56555: IFTRUE 56565
56557: LD_INT 1
56559: DOUBLE
56560: EQUAL
56561: IFTRUE 56565
56563: GO 56766
56565: POP
// case nation of nation_american :
56566: LD_VAR 0 5
56570: PUSH
56571: LD_INT 1
56573: DOUBLE
56574: EQUAL
56575: IFTRUE 56579
56577: GO 56635
56579: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
56580: LD_ADDR_VAR 0 9
56584: PUSH
56585: LD_VAR 0 11
56589: PUSH
56590: LD_VAR 0 12
56594: PUSH
56595: LD_VAR 0 13
56599: PUSH
56600: LD_VAR 0 14
56604: PUSH
56605: LD_VAR 0 15
56609: PUSH
56610: LD_VAR 0 16
56614: PUSH
56615: EMPTY
56616: LIST
56617: LIST
56618: LIST
56619: LIST
56620: LIST
56621: LIST
56622: PUSH
56623: LD_VAR 0 4
56627: PUSH
56628: LD_INT 1
56630: PLUS
56631: ARRAY
56632: ST_TO_ADDR
56633: GO 56764
56635: LD_INT 2
56637: DOUBLE
56638: EQUAL
56639: IFTRUE 56643
56641: GO 56699
56643: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
56644: LD_ADDR_VAR 0 9
56648: PUSH
56649: LD_VAR 0 17
56653: PUSH
56654: LD_VAR 0 18
56658: PUSH
56659: LD_VAR 0 19
56663: PUSH
56664: LD_VAR 0 20
56668: PUSH
56669: LD_VAR 0 21
56673: PUSH
56674: LD_VAR 0 22
56678: PUSH
56679: EMPTY
56680: LIST
56681: LIST
56682: LIST
56683: LIST
56684: LIST
56685: LIST
56686: PUSH
56687: LD_VAR 0 4
56691: PUSH
56692: LD_INT 1
56694: PLUS
56695: ARRAY
56696: ST_TO_ADDR
56697: GO 56764
56699: LD_INT 3
56701: DOUBLE
56702: EQUAL
56703: IFTRUE 56707
56705: GO 56763
56707: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
56708: LD_ADDR_VAR 0 9
56712: PUSH
56713: LD_VAR 0 23
56717: PUSH
56718: LD_VAR 0 24
56722: PUSH
56723: LD_VAR 0 25
56727: PUSH
56728: LD_VAR 0 26
56732: PUSH
56733: LD_VAR 0 27
56737: PUSH
56738: LD_VAR 0 28
56742: PUSH
56743: EMPTY
56744: LIST
56745: LIST
56746: LIST
56747: LIST
56748: LIST
56749: LIST
56750: PUSH
56751: LD_VAR 0 4
56755: PUSH
56756: LD_INT 1
56758: PLUS
56759: ARRAY
56760: ST_TO_ADDR
56761: GO 56764
56763: POP
56764: GO 57319
56766: LD_INT 2
56768: DOUBLE
56769: EQUAL
56770: IFTRUE 56780
56772: LD_INT 3
56774: DOUBLE
56775: EQUAL
56776: IFTRUE 56780
56778: GO 56836
56780: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
56781: LD_ADDR_VAR 0 9
56785: PUSH
56786: LD_VAR 0 29
56790: PUSH
56791: LD_VAR 0 30
56795: PUSH
56796: LD_VAR 0 31
56800: PUSH
56801: LD_VAR 0 32
56805: PUSH
56806: LD_VAR 0 33
56810: PUSH
56811: LD_VAR 0 34
56815: PUSH
56816: EMPTY
56817: LIST
56818: LIST
56819: LIST
56820: LIST
56821: LIST
56822: LIST
56823: PUSH
56824: LD_VAR 0 4
56828: PUSH
56829: LD_INT 1
56831: PLUS
56832: ARRAY
56833: ST_TO_ADDR
56834: GO 57319
56836: LD_INT 16
56838: DOUBLE
56839: EQUAL
56840: IFTRUE 56898
56842: LD_INT 17
56844: DOUBLE
56845: EQUAL
56846: IFTRUE 56898
56848: LD_INT 18
56850: DOUBLE
56851: EQUAL
56852: IFTRUE 56898
56854: LD_INT 19
56856: DOUBLE
56857: EQUAL
56858: IFTRUE 56898
56860: LD_INT 22
56862: DOUBLE
56863: EQUAL
56864: IFTRUE 56898
56866: LD_INT 20
56868: DOUBLE
56869: EQUAL
56870: IFTRUE 56898
56872: LD_INT 21
56874: DOUBLE
56875: EQUAL
56876: IFTRUE 56898
56878: LD_INT 23
56880: DOUBLE
56881: EQUAL
56882: IFTRUE 56898
56884: LD_INT 24
56886: DOUBLE
56887: EQUAL
56888: IFTRUE 56898
56890: LD_INT 25
56892: DOUBLE
56893: EQUAL
56894: IFTRUE 56898
56896: GO 56954
56898: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
56899: LD_ADDR_VAR 0 9
56903: PUSH
56904: LD_VAR 0 35
56908: PUSH
56909: LD_VAR 0 36
56913: PUSH
56914: LD_VAR 0 37
56918: PUSH
56919: LD_VAR 0 38
56923: PUSH
56924: LD_VAR 0 39
56928: PUSH
56929: LD_VAR 0 40
56933: PUSH
56934: EMPTY
56935: LIST
56936: LIST
56937: LIST
56938: LIST
56939: LIST
56940: LIST
56941: PUSH
56942: LD_VAR 0 4
56946: PUSH
56947: LD_INT 1
56949: PLUS
56950: ARRAY
56951: ST_TO_ADDR
56952: GO 57319
56954: LD_INT 6
56956: DOUBLE
56957: EQUAL
56958: IFTRUE 57010
56960: LD_INT 7
56962: DOUBLE
56963: EQUAL
56964: IFTRUE 57010
56966: LD_INT 8
56968: DOUBLE
56969: EQUAL
56970: IFTRUE 57010
56972: LD_INT 13
56974: DOUBLE
56975: EQUAL
56976: IFTRUE 57010
56978: LD_INT 12
56980: DOUBLE
56981: EQUAL
56982: IFTRUE 57010
56984: LD_INT 15
56986: DOUBLE
56987: EQUAL
56988: IFTRUE 57010
56990: LD_INT 11
56992: DOUBLE
56993: EQUAL
56994: IFTRUE 57010
56996: LD_INT 14
56998: DOUBLE
56999: EQUAL
57000: IFTRUE 57010
57002: LD_INT 10
57004: DOUBLE
57005: EQUAL
57006: IFTRUE 57010
57008: GO 57066
57010: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
57011: LD_ADDR_VAR 0 9
57015: PUSH
57016: LD_VAR 0 41
57020: PUSH
57021: LD_VAR 0 42
57025: PUSH
57026: LD_VAR 0 43
57030: PUSH
57031: LD_VAR 0 44
57035: PUSH
57036: LD_VAR 0 45
57040: PUSH
57041: LD_VAR 0 46
57045: PUSH
57046: EMPTY
57047: LIST
57048: LIST
57049: LIST
57050: LIST
57051: LIST
57052: LIST
57053: PUSH
57054: LD_VAR 0 4
57058: PUSH
57059: LD_INT 1
57061: PLUS
57062: ARRAY
57063: ST_TO_ADDR
57064: GO 57319
57066: LD_INT 36
57068: DOUBLE
57069: EQUAL
57070: IFTRUE 57074
57072: GO 57130
57074: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
57075: LD_ADDR_VAR 0 9
57079: PUSH
57080: LD_VAR 0 47
57084: PUSH
57085: LD_VAR 0 48
57089: PUSH
57090: LD_VAR 0 49
57094: PUSH
57095: LD_VAR 0 50
57099: PUSH
57100: LD_VAR 0 51
57104: PUSH
57105: LD_VAR 0 52
57109: PUSH
57110: EMPTY
57111: LIST
57112: LIST
57113: LIST
57114: LIST
57115: LIST
57116: LIST
57117: PUSH
57118: LD_VAR 0 4
57122: PUSH
57123: LD_INT 1
57125: PLUS
57126: ARRAY
57127: ST_TO_ADDR
57128: GO 57319
57130: LD_INT 4
57132: DOUBLE
57133: EQUAL
57134: IFTRUE 57156
57136: LD_INT 5
57138: DOUBLE
57139: EQUAL
57140: IFTRUE 57156
57142: LD_INT 34
57144: DOUBLE
57145: EQUAL
57146: IFTRUE 57156
57148: LD_INT 37
57150: DOUBLE
57151: EQUAL
57152: IFTRUE 57156
57154: GO 57212
57156: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
57157: LD_ADDR_VAR 0 9
57161: PUSH
57162: LD_VAR 0 53
57166: PUSH
57167: LD_VAR 0 54
57171: PUSH
57172: LD_VAR 0 55
57176: PUSH
57177: LD_VAR 0 56
57181: PUSH
57182: LD_VAR 0 57
57186: PUSH
57187: LD_VAR 0 58
57191: PUSH
57192: EMPTY
57193: LIST
57194: LIST
57195: LIST
57196: LIST
57197: LIST
57198: LIST
57199: PUSH
57200: LD_VAR 0 4
57204: PUSH
57205: LD_INT 1
57207: PLUS
57208: ARRAY
57209: ST_TO_ADDR
57210: GO 57319
57212: LD_INT 31
57214: DOUBLE
57215: EQUAL
57216: IFTRUE 57262
57218: LD_INT 32
57220: DOUBLE
57221: EQUAL
57222: IFTRUE 57262
57224: LD_INT 33
57226: DOUBLE
57227: EQUAL
57228: IFTRUE 57262
57230: LD_INT 27
57232: DOUBLE
57233: EQUAL
57234: IFTRUE 57262
57236: LD_INT 26
57238: DOUBLE
57239: EQUAL
57240: IFTRUE 57262
57242: LD_INT 28
57244: DOUBLE
57245: EQUAL
57246: IFTRUE 57262
57248: LD_INT 29
57250: DOUBLE
57251: EQUAL
57252: IFTRUE 57262
57254: LD_INT 30
57256: DOUBLE
57257: EQUAL
57258: IFTRUE 57262
57260: GO 57318
57262: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
57263: LD_ADDR_VAR 0 9
57267: PUSH
57268: LD_VAR 0 59
57272: PUSH
57273: LD_VAR 0 60
57277: PUSH
57278: LD_VAR 0 61
57282: PUSH
57283: LD_VAR 0 62
57287: PUSH
57288: LD_VAR 0 63
57292: PUSH
57293: LD_VAR 0 64
57297: PUSH
57298: EMPTY
57299: LIST
57300: LIST
57301: LIST
57302: LIST
57303: LIST
57304: LIST
57305: PUSH
57306: LD_VAR 0 4
57310: PUSH
57311: LD_INT 1
57313: PLUS
57314: ARRAY
57315: ST_TO_ADDR
57316: GO 57319
57318: POP
// temp_list2 = [ ] ;
57319: LD_ADDR_VAR 0 10
57323: PUSH
57324: EMPTY
57325: ST_TO_ADDR
// for i in temp_list do
57326: LD_ADDR_VAR 0 8
57330: PUSH
57331: LD_VAR 0 9
57335: PUSH
57336: FOR_IN
57337: IFFALSE 57389
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
57339: LD_ADDR_VAR 0 10
57343: PUSH
57344: LD_VAR 0 10
57348: PUSH
57349: LD_VAR 0 8
57353: PUSH
57354: LD_INT 1
57356: ARRAY
57357: PUSH
57358: LD_VAR 0 2
57362: PLUS
57363: PUSH
57364: LD_VAR 0 8
57368: PUSH
57369: LD_INT 2
57371: ARRAY
57372: PUSH
57373: LD_VAR 0 3
57377: PLUS
57378: PUSH
57379: EMPTY
57380: LIST
57381: LIST
57382: PUSH
57383: EMPTY
57384: LIST
57385: ADD
57386: ST_TO_ADDR
57387: GO 57336
57389: POP
57390: POP
// result = temp_list2 ;
57391: LD_ADDR_VAR 0 7
57395: PUSH
57396: LD_VAR 0 10
57400: ST_TO_ADDR
// end ;
57401: LD_VAR 0 7
57405: RET
// export function EnemyInRange ( unit , dist ) ; begin
57406: LD_INT 0
57408: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
57409: LD_ADDR_VAR 0 3
57413: PUSH
57414: LD_VAR 0 1
57418: PPUSH
57419: CALL_OW 255
57423: PPUSH
57424: LD_VAR 0 1
57428: PPUSH
57429: CALL_OW 250
57433: PPUSH
57434: LD_VAR 0 1
57438: PPUSH
57439: CALL_OW 251
57443: PPUSH
57444: LD_VAR 0 2
57448: PPUSH
57449: CALL 31510 0 4
57453: PUSH
57454: LD_INT 4
57456: ARRAY
57457: ST_TO_ADDR
// end ;
57458: LD_VAR 0 3
57462: RET
// export function PlayerSeeMe ( unit ) ; begin
57463: LD_INT 0
57465: PPUSH
// result := See ( your_side , unit ) ;
57466: LD_ADDR_VAR 0 2
57470: PUSH
57471: LD_OWVAR 2
57475: PPUSH
57476: LD_VAR 0 1
57480: PPUSH
57481: CALL_OW 292
57485: ST_TO_ADDR
// end ;
57486: LD_VAR 0 2
57490: RET
// export function ReverseDir ( unit ) ; begin
57491: LD_INT 0
57493: PPUSH
// if not unit then
57494: LD_VAR 0 1
57498: NOT
57499: IFFALSE 57503
// exit ;
57501: GO 57526
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
57503: LD_ADDR_VAR 0 2
57507: PUSH
57508: LD_VAR 0 1
57512: PPUSH
57513: CALL_OW 254
57517: PUSH
57518: LD_INT 3
57520: PLUS
57521: PUSH
57522: LD_INT 6
57524: MOD
57525: ST_TO_ADDR
// end ;
57526: LD_VAR 0 2
57530: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
57531: LD_INT 0
57533: PPUSH
57534: PPUSH
57535: PPUSH
57536: PPUSH
57537: PPUSH
// if not hexes then
57538: LD_VAR 0 2
57542: NOT
57543: IFFALSE 57547
// exit ;
57545: GO 57695
// dist := 9999 ;
57547: LD_ADDR_VAR 0 5
57551: PUSH
57552: LD_INT 9999
57554: ST_TO_ADDR
// for i = 1 to hexes do
57555: LD_ADDR_VAR 0 4
57559: PUSH
57560: DOUBLE
57561: LD_INT 1
57563: DEC
57564: ST_TO_ADDR
57565: LD_VAR 0 2
57569: PUSH
57570: FOR_TO
57571: IFFALSE 57683
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
57573: LD_VAR 0 1
57577: PPUSH
57578: LD_VAR 0 2
57582: PUSH
57583: LD_VAR 0 4
57587: ARRAY
57588: PUSH
57589: LD_INT 1
57591: ARRAY
57592: PPUSH
57593: LD_VAR 0 2
57597: PUSH
57598: LD_VAR 0 4
57602: ARRAY
57603: PUSH
57604: LD_INT 2
57606: ARRAY
57607: PPUSH
57608: CALL_OW 297
57612: PUSH
57613: LD_VAR 0 5
57617: LESS
57618: IFFALSE 57681
// begin hex := hexes [ i ] ;
57620: LD_ADDR_VAR 0 7
57624: PUSH
57625: LD_VAR 0 2
57629: PUSH
57630: LD_VAR 0 4
57634: ARRAY
57635: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
57636: LD_ADDR_VAR 0 5
57640: PUSH
57641: LD_VAR 0 1
57645: PPUSH
57646: LD_VAR 0 2
57650: PUSH
57651: LD_VAR 0 4
57655: ARRAY
57656: PUSH
57657: LD_INT 1
57659: ARRAY
57660: PPUSH
57661: LD_VAR 0 2
57665: PUSH
57666: LD_VAR 0 4
57670: ARRAY
57671: PUSH
57672: LD_INT 2
57674: ARRAY
57675: PPUSH
57676: CALL_OW 297
57680: ST_TO_ADDR
// end ; end ;
57681: GO 57570
57683: POP
57684: POP
// result := hex ;
57685: LD_ADDR_VAR 0 3
57689: PUSH
57690: LD_VAR 0 7
57694: ST_TO_ADDR
// end ;
57695: LD_VAR 0 3
57699: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
57700: LD_INT 0
57702: PPUSH
57703: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
57704: LD_VAR 0 1
57708: NOT
57709: PUSH
57710: LD_VAR 0 1
57714: PUSH
57715: LD_INT 21
57717: PUSH
57718: LD_INT 2
57720: PUSH
57721: EMPTY
57722: LIST
57723: LIST
57724: PUSH
57725: LD_INT 23
57727: PUSH
57728: LD_INT 2
57730: PUSH
57731: EMPTY
57732: LIST
57733: LIST
57734: PUSH
57735: EMPTY
57736: LIST
57737: LIST
57738: PPUSH
57739: CALL_OW 69
57743: IN
57744: NOT
57745: OR
57746: IFFALSE 57750
// exit ;
57748: GO 57797
// for i = 1 to 3 do
57750: LD_ADDR_VAR 0 3
57754: PUSH
57755: DOUBLE
57756: LD_INT 1
57758: DEC
57759: ST_TO_ADDR
57760: LD_INT 3
57762: PUSH
57763: FOR_TO
57764: IFFALSE 57795
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
57766: LD_VAR 0 1
57770: PPUSH
57771: CALL_OW 250
57775: PPUSH
57776: LD_VAR 0 1
57780: PPUSH
57781: CALL_OW 251
57785: PPUSH
57786: LD_INT 1
57788: PPUSH
57789: CALL_OW 453
57793: GO 57763
57795: POP
57796: POP
// end ;
57797: LD_VAR 0 2
57801: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
57802: LD_INT 0
57804: PPUSH
57805: PPUSH
57806: PPUSH
57807: PPUSH
57808: PPUSH
57809: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
57810: LD_VAR 0 1
57814: NOT
57815: PUSH
57816: LD_VAR 0 2
57820: NOT
57821: OR
57822: PUSH
57823: LD_VAR 0 1
57827: PPUSH
57828: CALL_OW 314
57832: OR
57833: IFFALSE 57837
// exit ;
57835: GO 58278
// x := GetX ( enemy_unit ) ;
57837: LD_ADDR_VAR 0 7
57841: PUSH
57842: LD_VAR 0 2
57846: PPUSH
57847: CALL_OW 250
57851: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
57852: LD_ADDR_VAR 0 8
57856: PUSH
57857: LD_VAR 0 2
57861: PPUSH
57862: CALL_OW 251
57866: ST_TO_ADDR
// if not x or not y then
57867: LD_VAR 0 7
57871: NOT
57872: PUSH
57873: LD_VAR 0 8
57877: NOT
57878: OR
57879: IFFALSE 57883
// exit ;
57881: GO 58278
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
57883: LD_ADDR_VAR 0 6
57887: PUSH
57888: LD_VAR 0 7
57892: PPUSH
57893: LD_INT 0
57895: PPUSH
57896: LD_INT 4
57898: PPUSH
57899: CALL_OW 272
57903: PUSH
57904: LD_VAR 0 8
57908: PPUSH
57909: LD_INT 0
57911: PPUSH
57912: LD_INT 4
57914: PPUSH
57915: CALL_OW 273
57919: PUSH
57920: EMPTY
57921: LIST
57922: LIST
57923: PUSH
57924: LD_VAR 0 7
57928: PPUSH
57929: LD_INT 1
57931: PPUSH
57932: LD_INT 4
57934: PPUSH
57935: CALL_OW 272
57939: PUSH
57940: LD_VAR 0 8
57944: PPUSH
57945: LD_INT 1
57947: PPUSH
57948: LD_INT 4
57950: PPUSH
57951: CALL_OW 273
57955: PUSH
57956: EMPTY
57957: LIST
57958: LIST
57959: PUSH
57960: LD_VAR 0 7
57964: PPUSH
57965: LD_INT 2
57967: PPUSH
57968: LD_INT 4
57970: PPUSH
57971: CALL_OW 272
57975: PUSH
57976: LD_VAR 0 8
57980: PPUSH
57981: LD_INT 2
57983: PPUSH
57984: LD_INT 4
57986: PPUSH
57987: CALL_OW 273
57991: PUSH
57992: EMPTY
57993: LIST
57994: LIST
57995: PUSH
57996: LD_VAR 0 7
58000: PPUSH
58001: LD_INT 3
58003: PPUSH
58004: LD_INT 4
58006: PPUSH
58007: CALL_OW 272
58011: PUSH
58012: LD_VAR 0 8
58016: PPUSH
58017: LD_INT 3
58019: PPUSH
58020: LD_INT 4
58022: PPUSH
58023: CALL_OW 273
58027: PUSH
58028: EMPTY
58029: LIST
58030: LIST
58031: PUSH
58032: LD_VAR 0 7
58036: PPUSH
58037: LD_INT 4
58039: PPUSH
58040: LD_INT 4
58042: PPUSH
58043: CALL_OW 272
58047: PUSH
58048: LD_VAR 0 8
58052: PPUSH
58053: LD_INT 4
58055: PPUSH
58056: LD_INT 4
58058: PPUSH
58059: CALL_OW 273
58063: PUSH
58064: EMPTY
58065: LIST
58066: LIST
58067: PUSH
58068: LD_VAR 0 7
58072: PPUSH
58073: LD_INT 5
58075: PPUSH
58076: LD_INT 4
58078: PPUSH
58079: CALL_OW 272
58083: PUSH
58084: LD_VAR 0 8
58088: PPUSH
58089: LD_INT 5
58091: PPUSH
58092: LD_INT 4
58094: PPUSH
58095: CALL_OW 273
58099: PUSH
58100: EMPTY
58101: LIST
58102: LIST
58103: PUSH
58104: EMPTY
58105: LIST
58106: LIST
58107: LIST
58108: LIST
58109: LIST
58110: LIST
58111: ST_TO_ADDR
// for i = tmp downto 1 do
58112: LD_ADDR_VAR 0 4
58116: PUSH
58117: DOUBLE
58118: LD_VAR 0 6
58122: INC
58123: ST_TO_ADDR
58124: LD_INT 1
58126: PUSH
58127: FOR_DOWNTO
58128: IFFALSE 58229
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
58130: LD_VAR 0 6
58134: PUSH
58135: LD_VAR 0 4
58139: ARRAY
58140: PUSH
58141: LD_INT 1
58143: ARRAY
58144: PPUSH
58145: LD_VAR 0 6
58149: PUSH
58150: LD_VAR 0 4
58154: ARRAY
58155: PUSH
58156: LD_INT 2
58158: ARRAY
58159: PPUSH
58160: CALL_OW 488
58164: NOT
58165: PUSH
58166: LD_VAR 0 6
58170: PUSH
58171: LD_VAR 0 4
58175: ARRAY
58176: PUSH
58177: LD_INT 1
58179: ARRAY
58180: PPUSH
58181: LD_VAR 0 6
58185: PUSH
58186: LD_VAR 0 4
58190: ARRAY
58191: PUSH
58192: LD_INT 2
58194: ARRAY
58195: PPUSH
58196: CALL_OW 428
58200: PUSH
58201: LD_INT 0
58203: NONEQUAL
58204: OR
58205: IFFALSE 58227
// tmp := Delete ( tmp , i ) ;
58207: LD_ADDR_VAR 0 6
58211: PUSH
58212: LD_VAR 0 6
58216: PPUSH
58217: LD_VAR 0 4
58221: PPUSH
58222: CALL_OW 3
58226: ST_TO_ADDR
58227: GO 58127
58229: POP
58230: POP
// j := GetClosestHex ( unit , tmp ) ;
58231: LD_ADDR_VAR 0 5
58235: PUSH
58236: LD_VAR 0 1
58240: PPUSH
58241: LD_VAR 0 6
58245: PPUSH
58246: CALL 57531 0 2
58250: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
58251: LD_VAR 0 1
58255: PPUSH
58256: LD_VAR 0 5
58260: PUSH
58261: LD_INT 1
58263: ARRAY
58264: PPUSH
58265: LD_VAR 0 5
58269: PUSH
58270: LD_INT 2
58272: ARRAY
58273: PPUSH
58274: CALL_OW 111
// end ;
58278: LD_VAR 0 3
58282: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
58283: LD_INT 0
58285: PPUSH
58286: PPUSH
58287: PPUSH
// uc_side = 0 ;
58288: LD_ADDR_OWVAR 20
58292: PUSH
58293: LD_INT 0
58295: ST_TO_ADDR
// uc_nation = 0 ;
58296: LD_ADDR_OWVAR 21
58300: PUSH
58301: LD_INT 0
58303: ST_TO_ADDR
// InitHc ;
58304: CALL_OW 19
// InitVc ;
58308: CALL_OW 20
// if mastodonts then
58312: LD_VAR 0 6
58316: IFFALSE 58383
// for i = 1 to mastodonts do
58318: LD_ADDR_VAR 0 11
58322: PUSH
58323: DOUBLE
58324: LD_INT 1
58326: DEC
58327: ST_TO_ADDR
58328: LD_VAR 0 6
58332: PUSH
58333: FOR_TO
58334: IFFALSE 58381
// begin vc_chassis := 31 ;
58336: LD_ADDR_OWVAR 37
58340: PUSH
58341: LD_INT 31
58343: ST_TO_ADDR
// vc_control := control_rider ;
58344: LD_ADDR_OWVAR 38
58348: PUSH
58349: LD_INT 4
58351: ST_TO_ADDR
// animal := CreateVehicle ;
58352: LD_ADDR_VAR 0 12
58356: PUSH
58357: CALL_OW 45
58361: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58362: LD_VAR 0 12
58366: PPUSH
58367: LD_VAR 0 8
58371: PPUSH
58372: LD_INT 0
58374: PPUSH
58375: CALL 60452 0 3
// end ;
58379: GO 58333
58381: POP
58382: POP
// if horses then
58383: LD_VAR 0 5
58387: IFFALSE 58454
// for i = 1 to horses do
58389: LD_ADDR_VAR 0 11
58393: PUSH
58394: DOUBLE
58395: LD_INT 1
58397: DEC
58398: ST_TO_ADDR
58399: LD_VAR 0 5
58403: PUSH
58404: FOR_TO
58405: IFFALSE 58452
// begin hc_class := 21 ;
58407: LD_ADDR_OWVAR 28
58411: PUSH
58412: LD_INT 21
58414: ST_TO_ADDR
// hc_gallery :=  ;
58415: LD_ADDR_OWVAR 33
58419: PUSH
58420: LD_STRING 
58422: ST_TO_ADDR
// animal := CreateHuman ;
58423: LD_ADDR_VAR 0 12
58427: PUSH
58428: CALL_OW 44
58432: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58433: LD_VAR 0 12
58437: PPUSH
58438: LD_VAR 0 8
58442: PPUSH
58443: LD_INT 0
58445: PPUSH
58446: CALL 60452 0 3
// end ;
58450: GO 58404
58452: POP
58453: POP
// if birds then
58454: LD_VAR 0 1
58458: IFFALSE 58525
// for i = 1 to birds do
58460: LD_ADDR_VAR 0 11
58464: PUSH
58465: DOUBLE
58466: LD_INT 1
58468: DEC
58469: ST_TO_ADDR
58470: LD_VAR 0 1
58474: PUSH
58475: FOR_TO
58476: IFFALSE 58523
// begin hc_class = 18 ;
58478: LD_ADDR_OWVAR 28
58482: PUSH
58483: LD_INT 18
58485: ST_TO_ADDR
// hc_gallery =  ;
58486: LD_ADDR_OWVAR 33
58490: PUSH
58491: LD_STRING 
58493: ST_TO_ADDR
// animal := CreateHuman ;
58494: LD_ADDR_VAR 0 12
58498: PUSH
58499: CALL_OW 44
58503: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58504: LD_VAR 0 12
58508: PPUSH
58509: LD_VAR 0 8
58513: PPUSH
58514: LD_INT 0
58516: PPUSH
58517: CALL 60452 0 3
// end ;
58521: GO 58475
58523: POP
58524: POP
// if tigers then
58525: LD_VAR 0 2
58529: IFFALSE 58613
// for i = 1 to tigers do
58531: LD_ADDR_VAR 0 11
58535: PUSH
58536: DOUBLE
58537: LD_INT 1
58539: DEC
58540: ST_TO_ADDR
58541: LD_VAR 0 2
58545: PUSH
58546: FOR_TO
58547: IFFALSE 58611
// begin hc_class = class_tiger ;
58549: LD_ADDR_OWVAR 28
58553: PUSH
58554: LD_INT 14
58556: ST_TO_ADDR
// hc_gallery =  ;
58557: LD_ADDR_OWVAR 33
58561: PUSH
58562: LD_STRING 
58564: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
58565: LD_ADDR_OWVAR 35
58569: PUSH
58570: LD_INT 7
58572: NEG
58573: PPUSH
58574: LD_INT 7
58576: PPUSH
58577: CALL_OW 12
58581: ST_TO_ADDR
// animal := CreateHuman ;
58582: LD_ADDR_VAR 0 12
58586: PUSH
58587: CALL_OW 44
58591: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58592: LD_VAR 0 12
58596: PPUSH
58597: LD_VAR 0 8
58601: PPUSH
58602: LD_INT 0
58604: PPUSH
58605: CALL 60452 0 3
// end ;
58609: GO 58546
58611: POP
58612: POP
// if apemans then
58613: LD_VAR 0 3
58617: IFFALSE 58740
// for i = 1 to apemans do
58619: LD_ADDR_VAR 0 11
58623: PUSH
58624: DOUBLE
58625: LD_INT 1
58627: DEC
58628: ST_TO_ADDR
58629: LD_VAR 0 3
58633: PUSH
58634: FOR_TO
58635: IFFALSE 58738
// begin hc_class = class_apeman ;
58637: LD_ADDR_OWVAR 28
58641: PUSH
58642: LD_INT 12
58644: ST_TO_ADDR
// hc_gallery =  ;
58645: LD_ADDR_OWVAR 33
58649: PUSH
58650: LD_STRING 
58652: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
58653: LD_ADDR_OWVAR 35
58657: PUSH
58658: LD_INT 5
58660: NEG
58661: PPUSH
58662: LD_INT 5
58664: PPUSH
58665: CALL_OW 12
58669: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
58670: LD_ADDR_OWVAR 31
58674: PUSH
58675: LD_INT 1
58677: PPUSH
58678: LD_INT 3
58680: PPUSH
58681: CALL_OW 12
58685: PUSH
58686: LD_INT 1
58688: PPUSH
58689: LD_INT 3
58691: PPUSH
58692: CALL_OW 12
58696: PUSH
58697: LD_INT 0
58699: PUSH
58700: LD_INT 0
58702: PUSH
58703: EMPTY
58704: LIST
58705: LIST
58706: LIST
58707: LIST
58708: ST_TO_ADDR
// animal := CreateHuman ;
58709: LD_ADDR_VAR 0 12
58713: PUSH
58714: CALL_OW 44
58718: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58719: LD_VAR 0 12
58723: PPUSH
58724: LD_VAR 0 8
58728: PPUSH
58729: LD_INT 0
58731: PPUSH
58732: CALL 60452 0 3
// end ;
58736: GO 58634
58738: POP
58739: POP
// if enchidnas then
58740: LD_VAR 0 4
58744: IFFALSE 58811
// for i = 1 to enchidnas do
58746: LD_ADDR_VAR 0 11
58750: PUSH
58751: DOUBLE
58752: LD_INT 1
58754: DEC
58755: ST_TO_ADDR
58756: LD_VAR 0 4
58760: PUSH
58761: FOR_TO
58762: IFFALSE 58809
// begin hc_class = 13 ;
58764: LD_ADDR_OWVAR 28
58768: PUSH
58769: LD_INT 13
58771: ST_TO_ADDR
// hc_gallery =  ;
58772: LD_ADDR_OWVAR 33
58776: PUSH
58777: LD_STRING 
58779: ST_TO_ADDR
// animal := CreateHuman ;
58780: LD_ADDR_VAR 0 12
58784: PUSH
58785: CALL_OW 44
58789: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58790: LD_VAR 0 12
58794: PPUSH
58795: LD_VAR 0 8
58799: PPUSH
58800: LD_INT 0
58802: PPUSH
58803: CALL 60452 0 3
// end ;
58807: GO 58761
58809: POP
58810: POP
// if fishes then
58811: LD_VAR 0 7
58815: IFFALSE 58882
// for i = 1 to fishes do
58817: LD_ADDR_VAR 0 11
58821: PUSH
58822: DOUBLE
58823: LD_INT 1
58825: DEC
58826: ST_TO_ADDR
58827: LD_VAR 0 7
58831: PUSH
58832: FOR_TO
58833: IFFALSE 58880
// begin hc_class = 20 ;
58835: LD_ADDR_OWVAR 28
58839: PUSH
58840: LD_INT 20
58842: ST_TO_ADDR
// hc_gallery =  ;
58843: LD_ADDR_OWVAR 33
58847: PUSH
58848: LD_STRING 
58850: ST_TO_ADDR
// animal := CreateHuman ;
58851: LD_ADDR_VAR 0 12
58855: PUSH
58856: CALL_OW 44
58860: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
58861: LD_VAR 0 12
58865: PPUSH
58866: LD_VAR 0 9
58870: PPUSH
58871: LD_INT 0
58873: PPUSH
58874: CALL 60452 0 3
// end ;
58878: GO 58832
58880: POP
58881: POP
// end ;
58882: LD_VAR 0 10
58886: RET
// export function WantHeal ( sci , unit ) ; begin
58887: LD_INT 0
58889: PPUSH
// if GetTaskList ( sci ) > 0 then
58890: LD_VAR 0 1
58894: PPUSH
58895: CALL_OW 437
58899: PUSH
58900: LD_INT 0
58902: GREATER
58903: IFFALSE 58973
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
58905: LD_VAR 0 1
58909: PPUSH
58910: CALL_OW 437
58914: PUSH
58915: LD_INT 1
58917: ARRAY
58918: PUSH
58919: LD_INT 1
58921: ARRAY
58922: PUSH
58923: LD_STRING l
58925: EQUAL
58926: PUSH
58927: LD_VAR 0 1
58931: PPUSH
58932: CALL_OW 437
58936: PUSH
58937: LD_INT 1
58939: ARRAY
58940: PUSH
58941: LD_INT 4
58943: ARRAY
58944: PUSH
58945: LD_VAR 0 2
58949: EQUAL
58950: AND
58951: IFFALSE 58963
// result := true else
58953: LD_ADDR_VAR 0 3
58957: PUSH
58958: LD_INT 1
58960: ST_TO_ADDR
58961: GO 58971
// result := false ;
58963: LD_ADDR_VAR 0 3
58967: PUSH
58968: LD_INT 0
58970: ST_TO_ADDR
// end else
58971: GO 58981
// result := false ;
58973: LD_ADDR_VAR 0 3
58977: PUSH
58978: LD_INT 0
58980: ST_TO_ADDR
// end ;
58981: LD_VAR 0 3
58985: RET
// export function HealTarget ( sci ) ; begin
58986: LD_INT 0
58988: PPUSH
// if not sci then
58989: LD_VAR 0 1
58993: NOT
58994: IFFALSE 58998
// exit ;
58996: GO 59063
// result := 0 ;
58998: LD_ADDR_VAR 0 2
59002: PUSH
59003: LD_INT 0
59005: ST_TO_ADDR
// if GetTaskList ( sci ) then
59006: LD_VAR 0 1
59010: PPUSH
59011: CALL_OW 437
59015: IFFALSE 59063
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
59017: LD_VAR 0 1
59021: PPUSH
59022: CALL_OW 437
59026: PUSH
59027: LD_INT 1
59029: ARRAY
59030: PUSH
59031: LD_INT 1
59033: ARRAY
59034: PUSH
59035: LD_STRING l
59037: EQUAL
59038: IFFALSE 59063
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
59040: LD_ADDR_VAR 0 2
59044: PUSH
59045: LD_VAR 0 1
59049: PPUSH
59050: CALL_OW 437
59054: PUSH
59055: LD_INT 1
59057: ARRAY
59058: PUSH
59059: LD_INT 4
59061: ARRAY
59062: ST_TO_ADDR
// end ;
59063: LD_VAR 0 2
59067: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
59068: LD_INT 0
59070: PPUSH
59071: PPUSH
59072: PPUSH
59073: PPUSH
// if not base_units then
59074: LD_VAR 0 1
59078: NOT
59079: IFFALSE 59083
// exit ;
59081: GO 59170
// result := false ;
59083: LD_ADDR_VAR 0 2
59087: PUSH
59088: LD_INT 0
59090: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
59091: LD_ADDR_VAR 0 5
59095: PUSH
59096: LD_VAR 0 1
59100: PPUSH
59101: LD_INT 21
59103: PUSH
59104: LD_INT 3
59106: PUSH
59107: EMPTY
59108: LIST
59109: LIST
59110: PPUSH
59111: CALL_OW 72
59115: ST_TO_ADDR
// if not tmp then
59116: LD_VAR 0 5
59120: NOT
59121: IFFALSE 59125
// exit ;
59123: GO 59170
// for i in tmp do
59125: LD_ADDR_VAR 0 3
59129: PUSH
59130: LD_VAR 0 5
59134: PUSH
59135: FOR_IN
59136: IFFALSE 59168
// begin result := EnemyInRange ( i , 22 ) ;
59138: LD_ADDR_VAR 0 2
59142: PUSH
59143: LD_VAR 0 3
59147: PPUSH
59148: LD_INT 22
59150: PPUSH
59151: CALL 57406 0 2
59155: ST_TO_ADDR
// if result then
59156: LD_VAR 0 2
59160: IFFALSE 59166
// exit ;
59162: POP
59163: POP
59164: GO 59170
// end ;
59166: GO 59135
59168: POP
59169: POP
// end ;
59170: LD_VAR 0 2
59174: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
59175: LD_INT 0
59177: PPUSH
59178: PPUSH
// if not units then
59179: LD_VAR 0 1
59183: NOT
59184: IFFALSE 59188
// exit ;
59186: GO 59258
// result := [ ] ;
59188: LD_ADDR_VAR 0 3
59192: PUSH
59193: EMPTY
59194: ST_TO_ADDR
// for i in units do
59195: LD_ADDR_VAR 0 4
59199: PUSH
59200: LD_VAR 0 1
59204: PUSH
59205: FOR_IN
59206: IFFALSE 59256
// if GetTag ( i ) = tag then
59208: LD_VAR 0 4
59212: PPUSH
59213: CALL_OW 110
59217: PUSH
59218: LD_VAR 0 2
59222: EQUAL
59223: IFFALSE 59254
// result := Insert ( result , result + 1 , i ) ;
59225: LD_ADDR_VAR 0 3
59229: PUSH
59230: LD_VAR 0 3
59234: PPUSH
59235: LD_VAR 0 3
59239: PUSH
59240: LD_INT 1
59242: PLUS
59243: PPUSH
59244: LD_VAR 0 4
59248: PPUSH
59249: CALL_OW 2
59253: ST_TO_ADDR
59254: GO 59205
59256: POP
59257: POP
// end ;
59258: LD_VAR 0 3
59262: RET
// export function IsDriver ( un ) ; begin
59263: LD_INT 0
59265: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
59266: LD_ADDR_VAR 0 2
59270: PUSH
59271: LD_VAR 0 1
59275: PUSH
59276: LD_INT 55
59278: PUSH
59279: EMPTY
59280: LIST
59281: PPUSH
59282: CALL_OW 69
59286: IN
59287: ST_TO_ADDR
// end ;
59288: LD_VAR 0 2
59292: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
59293: LD_INT 0
59295: PPUSH
59296: PPUSH
// list := [ ] ;
59297: LD_ADDR_VAR 0 5
59301: PUSH
59302: EMPTY
59303: ST_TO_ADDR
// case d of 0 :
59304: LD_VAR 0 3
59308: PUSH
59309: LD_INT 0
59311: DOUBLE
59312: EQUAL
59313: IFTRUE 59317
59315: GO 59450
59317: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
59318: LD_ADDR_VAR 0 5
59322: PUSH
59323: LD_VAR 0 1
59327: PUSH
59328: LD_INT 4
59330: MINUS
59331: PUSH
59332: LD_VAR 0 2
59336: PUSH
59337: LD_INT 4
59339: MINUS
59340: PUSH
59341: LD_INT 2
59343: PUSH
59344: EMPTY
59345: LIST
59346: LIST
59347: LIST
59348: PUSH
59349: LD_VAR 0 1
59353: PUSH
59354: LD_INT 3
59356: MINUS
59357: PUSH
59358: LD_VAR 0 2
59362: PUSH
59363: LD_INT 1
59365: PUSH
59366: EMPTY
59367: LIST
59368: LIST
59369: LIST
59370: PUSH
59371: LD_VAR 0 1
59375: PUSH
59376: LD_INT 4
59378: PLUS
59379: PUSH
59380: LD_VAR 0 2
59384: PUSH
59385: LD_INT 4
59387: PUSH
59388: EMPTY
59389: LIST
59390: LIST
59391: LIST
59392: PUSH
59393: LD_VAR 0 1
59397: PUSH
59398: LD_INT 3
59400: PLUS
59401: PUSH
59402: LD_VAR 0 2
59406: PUSH
59407: LD_INT 3
59409: PLUS
59410: PUSH
59411: LD_INT 5
59413: PUSH
59414: EMPTY
59415: LIST
59416: LIST
59417: LIST
59418: PUSH
59419: LD_VAR 0 1
59423: PUSH
59424: LD_VAR 0 2
59428: PUSH
59429: LD_INT 4
59431: PLUS
59432: PUSH
59433: LD_INT 0
59435: PUSH
59436: EMPTY
59437: LIST
59438: LIST
59439: LIST
59440: PUSH
59441: EMPTY
59442: LIST
59443: LIST
59444: LIST
59445: LIST
59446: LIST
59447: ST_TO_ADDR
// end ; 1 :
59448: GO 60148
59450: LD_INT 1
59452: DOUBLE
59453: EQUAL
59454: IFTRUE 59458
59456: GO 59591
59458: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
59459: LD_ADDR_VAR 0 5
59463: PUSH
59464: LD_VAR 0 1
59468: PUSH
59469: LD_VAR 0 2
59473: PUSH
59474: LD_INT 4
59476: MINUS
59477: PUSH
59478: LD_INT 3
59480: PUSH
59481: EMPTY
59482: LIST
59483: LIST
59484: LIST
59485: PUSH
59486: LD_VAR 0 1
59490: PUSH
59491: LD_INT 3
59493: MINUS
59494: PUSH
59495: LD_VAR 0 2
59499: PUSH
59500: LD_INT 3
59502: MINUS
59503: PUSH
59504: LD_INT 2
59506: PUSH
59507: EMPTY
59508: LIST
59509: LIST
59510: LIST
59511: PUSH
59512: LD_VAR 0 1
59516: PUSH
59517: LD_INT 4
59519: MINUS
59520: PUSH
59521: LD_VAR 0 2
59525: PUSH
59526: LD_INT 1
59528: PUSH
59529: EMPTY
59530: LIST
59531: LIST
59532: LIST
59533: PUSH
59534: LD_VAR 0 1
59538: PUSH
59539: LD_VAR 0 2
59543: PUSH
59544: LD_INT 3
59546: PLUS
59547: PUSH
59548: LD_INT 0
59550: PUSH
59551: EMPTY
59552: LIST
59553: LIST
59554: LIST
59555: PUSH
59556: LD_VAR 0 1
59560: PUSH
59561: LD_INT 4
59563: PLUS
59564: PUSH
59565: LD_VAR 0 2
59569: PUSH
59570: LD_INT 4
59572: PLUS
59573: PUSH
59574: LD_INT 5
59576: PUSH
59577: EMPTY
59578: LIST
59579: LIST
59580: LIST
59581: PUSH
59582: EMPTY
59583: LIST
59584: LIST
59585: LIST
59586: LIST
59587: LIST
59588: ST_TO_ADDR
// end ; 2 :
59589: GO 60148
59591: LD_INT 2
59593: DOUBLE
59594: EQUAL
59595: IFTRUE 59599
59597: GO 59728
59599: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
59600: LD_ADDR_VAR 0 5
59604: PUSH
59605: LD_VAR 0 1
59609: PUSH
59610: LD_VAR 0 2
59614: PUSH
59615: LD_INT 3
59617: MINUS
59618: PUSH
59619: LD_INT 3
59621: PUSH
59622: EMPTY
59623: LIST
59624: LIST
59625: LIST
59626: PUSH
59627: LD_VAR 0 1
59631: PUSH
59632: LD_INT 4
59634: PLUS
59635: PUSH
59636: LD_VAR 0 2
59640: PUSH
59641: LD_INT 4
59643: PUSH
59644: EMPTY
59645: LIST
59646: LIST
59647: LIST
59648: PUSH
59649: LD_VAR 0 1
59653: PUSH
59654: LD_VAR 0 2
59658: PUSH
59659: LD_INT 4
59661: PLUS
59662: PUSH
59663: LD_INT 0
59665: PUSH
59666: EMPTY
59667: LIST
59668: LIST
59669: LIST
59670: PUSH
59671: LD_VAR 0 1
59675: PUSH
59676: LD_INT 3
59678: MINUS
59679: PUSH
59680: LD_VAR 0 2
59684: PUSH
59685: LD_INT 1
59687: PUSH
59688: EMPTY
59689: LIST
59690: LIST
59691: LIST
59692: PUSH
59693: LD_VAR 0 1
59697: PUSH
59698: LD_INT 4
59700: MINUS
59701: PUSH
59702: LD_VAR 0 2
59706: PUSH
59707: LD_INT 4
59709: MINUS
59710: PUSH
59711: LD_INT 2
59713: PUSH
59714: EMPTY
59715: LIST
59716: LIST
59717: LIST
59718: PUSH
59719: EMPTY
59720: LIST
59721: LIST
59722: LIST
59723: LIST
59724: LIST
59725: ST_TO_ADDR
// end ; 3 :
59726: GO 60148
59728: LD_INT 3
59730: DOUBLE
59731: EQUAL
59732: IFTRUE 59736
59734: GO 59869
59736: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
59737: LD_ADDR_VAR 0 5
59741: PUSH
59742: LD_VAR 0 1
59746: PUSH
59747: LD_INT 3
59749: PLUS
59750: PUSH
59751: LD_VAR 0 2
59755: PUSH
59756: LD_INT 4
59758: PUSH
59759: EMPTY
59760: LIST
59761: LIST
59762: LIST
59763: PUSH
59764: LD_VAR 0 1
59768: PUSH
59769: LD_INT 4
59771: PLUS
59772: PUSH
59773: LD_VAR 0 2
59777: PUSH
59778: LD_INT 4
59780: PLUS
59781: PUSH
59782: LD_INT 5
59784: PUSH
59785: EMPTY
59786: LIST
59787: LIST
59788: LIST
59789: PUSH
59790: LD_VAR 0 1
59794: PUSH
59795: LD_INT 4
59797: MINUS
59798: PUSH
59799: LD_VAR 0 2
59803: PUSH
59804: LD_INT 1
59806: PUSH
59807: EMPTY
59808: LIST
59809: LIST
59810: LIST
59811: PUSH
59812: LD_VAR 0 1
59816: PUSH
59817: LD_VAR 0 2
59821: PUSH
59822: LD_INT 4
59824: MINUS
59825: PUSH
59826: LD_INT 3
59828: PUSH
59829: EMPTY
59830: LIST
59831: LIST
59832: LIST
59833: PUSH
59834: LD_VAR 0 1
59838: PUSH
59839: LD_INT 3
59841: MINUS
59842: PUSH
59843: LD_VAR 0 2
59847: PUSH
59848: LD_INT 3
59850: MINUS
59851: PUSH
59852: LD_INT 2
59854: PUSH
59855: EMPTY
59856: LIST
59857: LIST
59858: LIST
59859: PUSH
59860: EMPTY
59861: LIST
59862: LIST
59863: LIST
59864: LIST
59865: LIST
59866: ST_TO_ADDR
// end ; 4 :
59867: GO 60148
59869: LD_INT 4
59871: DOUBLE
59872: EQUAL
59873: IFTRUE 59877
59875: GO 60010
59877: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
59878: LD_ADDR_VAR 0 5
59882: PUSH
59883: LD_VAR 0 1
59887: PUSH
59888: LD_VAR 0 2
59892: PUSH
59893: LD_INT 4
59895: PLUS
59896: PUSH
59897: LD_INT 0
59899: PUSH
59900: EMPTY
59901: LIST
59902: LIST
59903: LIST
59904: PUSH
59905: LD_VAR 0 1
59909: PUSH
59910: LD_INT 3
59912: PLUS
59913: PUSH
59914: LD_VAR 0 2
59918: PUSH
59919: LD_INT 3
59921: PLUS
59922: PUSH
59923: LD_INT 5
59925: PUSH
59926: EMPTY
59927: LIST
59928: LIST
59929: LIST
59930: PUSH
59931: LD_VAR 0 1
59935: PUSH
59936: LD_INT 4
59938: PLUS
59939: PUSH
59940: LD_VAR 0 2
59944: PUSH
59945: LD_INT 4
59947: PUSH
59948: EMPTY
59949: LIST
59950: LIST
59951: LIST
59952: PUSH
59953: LD_VAR 0 1
59957: PUSH
59958: LD_VAR 0 2
59962: PUSH
59963: LD_INT 3
59965: MINUS
59966: PUSH
59967: LD_INT 3
59969: PUSH
59970: EMPTY
59971: LIST
59972: LIST
59973: LIST
59974: PUSH
59975: LD_VAR 0 1
59979: PUSH
59980: LD_INT 4
59982: MINUS
59983: PUSH
59984: LD_VAR 0 2
59988: PUSH
59989: LD_INT 4
59991: MINUS
59992: PUSH
59993: LD_INT 2
59995: PUSH
59996: EMPTY
59997: LIST
59998: LIST
59999: LIST
60000: PUSH
60001: EMPTY
60002: LIST
60003: LIST
60004: LIST
60005: LIST
60006: LIST
60007: ST_TO_ADDR
// end ; 5 :
60008: GO 60148
60010: LD_INT 5
60012: DOUBLE
60013: EQUAL
60014: IFTRUE 60018
60016: GO 60147
60018: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
60019: LD_ADDR_VAR 0 5
60023: PUSH
60024: LD_VAR 0 1
60028: PUSH
60029: LD_INT 4
60031: MINUS
60032: PUSH
60033: LD_VAR 0 2
60037: PUSH
60038: LD_INT 1
60040: PUSH
60041: EMPTY
60042: LIST
60043: LIST
60044: LIST
60045: PUSH
60046: LD_VAR 0 1
60050: PUSH
60051: LD_VAR 0 2
60055: PUSH
60056: LD_INT 4
60058: MINUS
60059: PUSH
60060: LD_INT 3
60062: PUSH
60063: EMPTY
60064: LIST
60065: LIST
60066: LIST
60067: PUSH
60068: LD_VAR 0 1
60072: PUSH
60073: LD_INT 4
60075: PLUS
60076: PUSH
60077: LD_VAR 0 2
60081: PUSH
60082: LD_INT 4
60084: PLUS
60085: PUSH
60086: LD_INT 5
60088: PUSH
60089: EMPTY
60090: LIST
60091: LIST
60092: LIST
60093: PUSH
60094: LD_VAR 0 1
60098: PUSH
60099: LD_INT 3
60101: PLUS
60102: PUSH
60103: LD_VAR 0 2
60107: PUSH
60108: LD_INT 4
60110: PUSH
60111: EMPTY
60112: LIST
60113: LIST
60114: LIST
60115: PUSH
60116: LD_VAR 0 1
60120: PUSH
60121: LD_VAR 0 2
60125: PUSH
60126: LD_INT 3
60128: PLUS
60129: PUSH
60130: LD_INT 0
60132: PUSH
60133: EMPTY
60134: LIST
60135: LIST
60136: LIST
60137: PUSH
60138: EMPTY
60139: LIST
60140: LIST
60141: LIST
60142: LIST
60143: LIST
60144: ST_TO_ADDR
// end ; end ;
60145: GO 60148
60147: POP
// result := list ;
60148: LD_ADDR_VAR 0 4
60152: PUSH
60153: LD_VAR 0 5
60157: ST_TO_ADDR
// end ;
60158: LD_VAR 0 4
60162: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
60163: LD_INT 0
60165: PPUSH
60166: PPUSH
60167: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
60168: LD_VAR 0 1
60172: NOT
60173: PUSH
60174: LD_VAR 0 2
60178: PUSH
60179: LD_INT 1
60181: PUSH
60182: LD_INT 2
60184: PUSH
60185: LD_INT 3
60187: PUSH
60188: LD_INT 4
60190: PUSH
60191: EMPTY
60192: LIST
60193: LIST
60194: LIST
60195: LIST
60196: IN
60197: NOT
60198: OR
60199: IFFALSE 60203
// exit ;
60201: GO 60295
// tmp := [ ] ;
60203: LD_ADDR_VAR 0 5
60207: PUSH
60208: EMPTY
60209: ST_TO_ADDR
// for i in units do
60210: LD_ADDR_VAR 0 4
60214: PUSH
60215: LD_VAR 0 1
60219: PUSH
60220: FOR_IN
60221: IFFALSE 60264
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
60223: LD_ADDR_VAR 0 5
60227: PUSH
60228: LD_VAR 0 5
60232: PPUSH
60233: LD_VAR 0 5
60237: PUSH
60238: LD_INT 1
60240: PLUS
60241: PPUSH
60242: LD_VAR 0 4
60246: PPUSH
60247: LD_VAR 0 2
60251: PPUSH
60252: CALL_OW 259
60256: PPUSH
60257: CALL_OW 2
60261: ST_TO_ADDR
60262: GO 60220
60264: POP
60265: POP
// if not tmp then
60266: LD_VAR 0 5
60270: NOT
60271: IFFALSE 60275
// exit ;
60273: GO 60295
// result := SortListByListDesc ( units , tmp ) ;
60275: LD_ADDR_VAR 0 3
60279: PUSH
60280: LD_VAR 0 1
60284: PPUSH
60285: LD_VAR 0 5
60289: PPUSH
60290: CALL_OW 77
60294: ST_TO_ADDR
// end ;
60295: LD_VAR 0 3
60299: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
60300: LD_INT 0
60302: PPUSH
60303: PPUSH
60304: PPUSH
// x := GetX ( building ) ;
60305: LD_ADDR_VAR 0 4
60309: PUSH
60310: LD_VAR 0 2
60314: PPUSH
60315: CALL_OW 250
60319: ST_TO_ADDR
// y := GetY ( building ) ;
60320: LD_ADDR_VAR 0 5
60324: PUSH
60325: LD_VAR 0 2
60329: PPUSH
60330: CALL_OW 251
60334: ST_TO_ADDR
// if GetTaskList ( unit ) then
60335: LD_VAR 0 1
60339: PPUSH
60340: CALL_OW 437
60344: IFFALSE 60439
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
60346: LD_STRING e
60348: PUSH
60349: LD_VAR 0 1
60353: PPUSH
60354: CALL_OW 437
60358: PUSH
60359: LD_INT 1
60361: ARRAY
60362: PUSH
60363: LD_INT 1
60365: ARRAY
60366: EQUAL
60367: PUSH
60368: LD_VAR 0 4
60372: PUSH
60373: LD_VAR 0 1
60377: PPUSH
60378: CALL_OW 437
60382: PUSH
60383: LD_INT 1
60385: ARRAY
60386: PUSH
60387: LD_INT 2
60389: ARRAY
60390: EQUAL
60391: AND
60392: PUSH
60393: LD_VAR 0 5
60397: PUSH
60398: LD_VAR 0 1
60402: PPUSH
60403: CALL_OW 437
60407: PUSH
60408: LD_INT 1
60410: ARRAY
60411: PUSH
60412: LD_INT 3
60414: ARRAY
60415: EQUAL
60416: AND
60417: IFFALSE 60429
// result := true else
60419: LD_ADDR_VAR 0 3
60423: PUSH
60424: LD_INT 1
60426: ST_TO_ADDR
60427: GO 60437
// result := false ;
60429: LD_ADDR_VAR 0 3
60433: PUSH
60434: LD_INT 0
60436: ST_TO_ADDR
// end else
60437: GO 60447
// result := false ;
60439: LD_ADDR_VAR 0 3
60443: PUSH
60444: LD_INT 0
60446: ST_TO_ADDR
// end ;
60447: LD_VAR 0 3
60451: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
60452: LD_INT 0
60454: PPUSH
60455: PPUSH
60456: PPUSH
60457: PPUSH
// if not unit or not area then
60458: LD_VAR 0 1
60462: NOT
60463: PUSH
60464: LD_VAR 0 2
60468: NOT
60469: OR
60470: IFFALSE 60474
// exit ;
60472: GO 60638
// tmp := AreaToList ( area , i ) ;
60474: LD_ADDR_VAR 0 6
60478: PUSH
60479: LD_VAR 0 2
60483: PPUSH
60484: LD_VAR 0 5
60488: PPUSH
60489: CALL_OW 517
60493: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
60494: LD_ADDR_VAR 0 5
60498: PUSH
60499: DOUBLE
60500: LD_INT 1
60502: DEC
60503: ST_TO_ADDR
60504: LD_VAR 0 6
60508: PUSH
60509: LD_INT 1
60511: ARRAY
60512: PUSH
60513: FOR_TO
60514: IFFALSE 60636
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
60516: LD_ADDR_VAR 0 7
60520: PUSH
60521: LD_VAR 0 6
60525: PUSH
60526: LD_INT 1
60528: ARRAY
60529: PUSH
60530: LD_VAR 0 5
60534: ARRAY
60535: PUSH
60536: LD_VAR 0 6
60540: PUSH
60541: LD_INT 2
60543: ARRAY
60544: PUSH
60545: LD_VAR 0 5
60549: ARRAY
60550: PUSH
60551: EMPTY
60552: LIST
60553: LIST
60554: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
60555: LD_VAR 0 7
60559: PUSH
60560: LD_INT 1
60562: ARRAY
60563: PPUSH
60564: LD_VAR 0 7
60568: PUSH
60569: LD_INT 2
60571: ARRAY
60572: PPUSH
60573: CALL_OW 428
60577: PUSH
60578: LD_INT 0
60580: EQUAL
60581: IFFALSE 60634
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
60583: LD_VAR 0 1
60587: PPUSH
60588: LD_VAR 0 7
60592: PUSH
60593: LD_INT 1
60595: ARRAY
60596: PPUSH
60597: LD_VAR 0 7
60601: PUSH
60602: LD_INT 2
60604: ARRAY
60605: PPUSH
60606: LD_VAR 0 3
60610: PPUSH
60611: CALL_OW 48
// result := IsPlaced ( unit ) ;
60615: LD_ADDR_VAR 0 4
60619: PUSH
60620: LD_VAR 0 1
60624: PPUSH
60625: CALL_OW 305
60629: ST_TO_ADDR
// exit ;
60630: POP
60631: POP
60632: GO 60638
// end ; end ;
60634: GO 60513
60636: POP
60637: POP
// end ;
60638: LD_VAR 0 4
60642: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
60643: LD_INT 0
60645: PPUSH
60646: PPUSH
60647: PPUSH
// if not side or side > 8 then
60648: LD_VAR 0 1
60652: NOT
60653: PUSH
60654: LD_VAR 0 1
60658: PUSH
60659: LD_INT 8
60661: GREATER
60662: OR
60663: IFFALSE 60667
// exit ;
60665: GO 60854
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
60667: LD_ADDR_VAR 0 4
60671: PUSH
60672: LD_INT 22
60674: PUSH
60675: LD_VAR 0 1
60679: PUSH
60680: EMPTY
60681: LIST
60682: LIST
60683: PUSH
60684: LD_INT 21
60686: PUSH
60687: LD_INT 3
60689: PUSH
60690: EMPTY
60691: LIST
60692: LIST
60693: PUSH
60694: EMPTY
60695: LIST
60696: LIST
60697: PPUSH
60698: CALL_OW 69
60702: ST_TO_ADDR
// if not tmp then
60703: LD_VAR 0 4
60707: NOT
60708: IFFALSE 60712
// exit ;
60710: GO 60854
// enable_addtolog := true ;
60712: LD_ADDR_OWVAR 81
60716: PUSH
60717: LD_INT 1
60719: ST_TO_ADDR
// AddToLog ( [ ) ;
60720: LD_STRING [
60722: PPUSH
60723: CALL_OW 561
// for i in tmp do
60727: LD_ADDR_VAR 0 3
60731: PUSH
60732: LD_VAR 0 4
60736: PUSH
60737: FOR_IN
60738: IFFALSE 60845
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
60740: LD_STRING [
60742: PUSH
60743: LD_VAR 0 3
60747: PPUSH
60748: CALL_OW 266
60752: STR
60753: PUSH
60754: LD_STRING , 
60756: STR
60757: PUSH
60758: LD_VAR 0 3
60762: PPUSH
60763: CALL_OW 250
60767: STR
60768: PUSH
60769: LD_STRING , 
60771: STR
60772: PUSH
60773: LD_VAR 0 3
60777: PPUSH
60778: CALL_OW 251
60782: STR
60783: PUSH
60784: LD_STRING , 
60786: STR
60787: PUSH
60788: LD_VAR 0 3
60792: PPUSH
60793: CALL_OW 254
60797: STR
60798: PUSH
60799: LD_STRING , 
60801: STR
60802: PUSH
60803: LD_VAR 0 3
60807: PPUSH
60808: LD_INT 1
60810: PPUSH
60811: CALL_OW 268
60815: STR
60816: PUSH
60817: LD_STRING , 
60819: STR
60820: PUSH
60821: LD_VAR 0 3
60825: PPUSH
60826: LD_INT 2
60828: PPUSH
60829: CALL_OW 268
60833: STR
60834: PUSH
60835: LD_STRING ],
60837: STR
60838: PPUSH
60839: CALL_OW 561
// end ;
60843: GO 60737
60845: POP
60846: POP
// AddToLog ( ]; ) ;
60847: LD_STRING ];
60849: PPUSH
60850: CALL_OW 561
// end ;
60854: LD_VAR 0 2
60858: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
60859: LD_INT 0
60861: PPUSH
60862: PPUSH
60863: PPUSH
60864: PPUSH
60865: PPUSH
// if not area or not rate or not max then
60866: LD_VAR 0 1
60870: NOT
60871: PUSH
60872: LD_VAR 0 2
60876: NOT
60877: OR
60878: PUSH
60879: LD_VAR 0 4
60883: NOT
60884: OR
60885: IFFALSE 60889
// exit ;
60887: GO 61081
// while 1 do
60889: LD_INT 1
60891: IFFALSE 61081
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
60893: LD_ADDR_VAR 0 9
60897: PUSH
60898: LD_VAR 0 1
60902: PPUSH
60903: LD_INT 1
60905: PPUSH
60906: CALL_OW 287
60910: PUSH
60911: LD_INT 10
60913: MUL
60914: ST_TO_ADDR
// r := rate / 10 ;
60915: LD_ADDR_VAR 0 7
60919: PUSH
60920: LD_VAR 0 2
60924: PUSH
60925: LD_INT 10
60927: DIVREAL
60928: ST_TO_ADDR
// time := 1 1$00 ;
60929: LD_ADDR_VAR 0 8
60933: PUSH
60934: LD_INT 2100
60936: ST_TO_ADDR
// if amount < min then
60937: LD_VAR 0 9
60941: PUSH
60942: LD_VAR 0 3
60946: LESS
60947: IFFALSE 60965
// r := r * 2 else
60949: LD_ADDR_VAR 0 7
60953: PUSH
60954: LD_VAR 0 7
60958: PUSH
60959: LD_INT 2
60961: MUL
60962: ST_TO_ADDR
60963: GO 60991
// if amount > max then
60965: LD_VAR 0 9
60969: PUSH
60970: LD_VAR 0 4
60974: GREATER
60975: IFFALSE 60991
// r := r / 2 ;
60977: LD_ADDR_VAR 0 7
60981: PUSH
60982: LD_VAR 0 7
60986: PUSH
60987: LD_INT 2
60989: DIVREAL
60990: ST_TO_ADDR
// time := time / r ;
60991: LD_ADDR_VAR 0 8
60995: PUSH
60996: LD_VAR 0 8
61000: PUSH
61001: LD_VAR 0 7
61005: DIVREAL
61006: ST_TO_ADDR
// if time < 0 then
61007: LD_VAR 0 8
61011: PUSH
61012: LD_INT 0
61014: LESS
61015: IFFALSE 61032
// time := time * - 1 ;
61017: LD_ADDR_VAR 0 8
61021: PUSH
61022: LD_VAR 0 8
61026: PUSH
61027: LD_INT 1
61029: NEG
61030: MUL
61031: ST_TO_ADDR
// wait ( time ) ;
61032: LD_VAR 0 8
61036: PPUSH
61037: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
61041: LD_INT 35
61043: PPUSH
61044: LD_INT 875
61046: PPUSH
61047: CALL_OW 12
61051: PPUSH
61052: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
61056: LD_INT 1
61058: PPUSH
61059: LD_INT 5
61061: PPUSH
61062: CALL_OW 12
61066: PPUSH
61067: LD_VAR 0 1
61071: PPUSH
61072: LD_INT 1
61074: PPUSH
61075: CALL_OW 55
// end ;
61079: GO 60889
// end ;
61081: LD_VAR 0 5
61085: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
61086: LD_INT 0
61088: PPUSH
61089: PPUSH
61090: PPUSH
61091: PPUSH
61092: PPUSH
61093: PPUSH
61094: PPUSH
61095: PPUSH
// if not turrets or not factories then
61096: LD_VAR 0 1
61100: NOT
61101: PUSH
61102: LD_VAR 0 2
61106: NOT
61107: OR
61108: IFFALSE 61112
// exit ;
61110: GO 61419
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
61112: LD_ADDR_VAR 0 10
61116: PUSH
61117: LD_INT 5
61119: PUSH
61120: LD_INT 6
61122: PUSH
61123: EMPTY
61124: LIST
61125: LIST
61126: PUSH
61127: LD_INT 2
61129: PUSH
61130: LD_INT 4
61132: PUSH
61133: EMPTY
61134: LIST
61135: LIST
61136: PUSH
61137: LD_INT 3
61139: PUSH
61140: LD_INT 5
61142: PUSH
61143: EMPTY
61144: LIST
61145: LIST
61146: PUSH
61147: EMPTY
61148: LIST
61149: LIST
61150: LIST
61151: PUSH
61152: LD_INT 24
61154: PUSH
61155: LD_INT 25
61157: PUSH
61158: EMPTY
61159: LIST
61160: LIST
61161: PUSH
61162: LD_INT 23
61164: PUSH
61165: LD_INT 27
61167: PUSH
61168: EMPTY
61169: LIST
61170: LIST
61171: PUSH
61172: EMPTY
61173: LIST
61174: LIST
61175: PUSH
61176: LD_INT 42
61178: PUSH
61179: LD_INT 43
61181: PUSH
61182: EMPTY
61183: LIST
61184: LIST
61185: PUSH
61186: LD_INT 44
61188: PUSH
61189: LD_INT 46
61191: PUSH
61192: EMPTY
61193: LIST
61194: LIST
61195: PUSH
61196: LD_INT 45
61198: PUSH
61199: LD_INT 47
61201: PUSH
61202: EMPTY
61203: LIST
61204: LIST
61205: PUSH
61206: EMPTY
61207: LIST
61208: LIST
61209: LIST
61210: PUSH
61211: EMPTY
61212: LIST
61213: LIST
61214: LIST
61215: ST_TO_ADDR
// result := [ ] ;
61216: LD_ADDR_VAR 0 3
61220: PUSH
61221: EMPTY
61222: ST_TO_ADDR
// for i in turrets do
61223: LD_ADDR_VAR 0 4
61227: PUSH
61228: LD_VAR 0 1
61232: PUSH
61233: FOR_IN
61234: IFFALSE 61417
// begin nat := GetNation ( i ) ;
61236: LD_ADDR_VAR 0 7
61240: PUSH
61241: LD_VAR 0 4
61245: PPUSH
61246: CALL_OW 248
61250: ST_TO_ADDR
// weapon := 0 ;
61251: LD_ADDR_VAR 0 8
61255: PUSH
61256: LD_INT 0
61258: ST_TO_ADDR
// if not nat then
61259: LD_VAR 0 7
61263: NOT
61264: IFFALSE 61268
// continue ;
61266: GO 61233
// for j in list [ nat ] do
61268: LD_ADDR_VAR 0 5
61272: PUSH
61273: LD_VAR 0 10
61277: PUSH
61278: LD_VAR 0 7
61282: ARRAY
61283: PUSH
61284: FOR_IN
61285: IFFALSE 61326
// if GetBWeapon ( i ) = j [ 1 ] then
61287: LD_VAR 0 4
61291: PPUSH
61292: CALL_OW 269
61296: PUSH
61297: LD_VAR 0 5
61301: PUSH
61302: LD_INT 1
61304: ARRAY
61305: EQUAL
61306: IFFALSE 61324
// begin weapon := j [ 2 ] ;
61308: LD_ADDR_VAR 0 8
61312: PUSH
61313: LD_VAR 0 5
61317: PUSH
61318: LD_INT 2
61320: ARRAY
61321: ST_TO_ADDR
// break ;
61322: GO 61326
// end ;
61324: GO 61284
61326: POP
61327: POP
// if not weapon then
61328: LD_VAR 0 8
61332: NOT
61333: IFFALSE 61337
// continue ;
61335: GO 61233
// for k in factories do
61337: LD_ADDR_VAR 0 6
61341: PUSH
61342: LD_VAR 0 2
61346: PUSH
61347: FOR_IN
61348: IFFALSE 61413
// begin weapons := AvailableWeaponList ( k ) ;
61350: LD_ADDR_VAR 0 9
61354: PUSH
61355: LD_VAR 0 6
61359: PPUSH
61360: CALL_OW 478
61364: ST_TO_ADDR
// if not weapons then
61365: LD_VAR 0 9
61369: NOT
61370: IFFALSE 61374
// continue ;
61372: GO 61347
// if weapon in weapons then
61374: LD_VAR 0 8
61378: PUSH
61379: LD_VAR 0 9
61383: IN
61384: IFFALSE 61411
// begin result := [ i , weapon ] ;
61386: LD_ADDR_VAR 0 3
61390: PUSH
61391: LD_VAR 0 4
61395: PUSH
61396: LD_VAR 0 8
61400: PUSH
61401: EMPTY
61402: LIST
61403: LIST
61404: ST_TO_ADDR
// exit ;
61405: POP
61406: POP
61407: POP
61408: POP
61409: GO 61419
// end ; end ;
61411: GO 61347
61413: POP
61414: POP
// end ;
61415: GO 61233
61417: POP
61418: POP
// end ;
61419: LD_VAR 0 3
61423: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
61424: LD_INT 0
61426: PPUSH
// if not side or side > 8 then
61427: LD_VAR 0 3
61431: NOT
61432: PUSH
61433: LD_VAR 0 3
61437: PUSH
61438: LD_INT 8
61440: GREATER
61441: OR
61442: IFFALSE 61446
// exit ;
61444: GO 61505
// if not range then
61446: LD_VAR 0 4
61450: NOT
61451: IFFALSE 61462
// range := - 12 ;
61453: LD_ADDR_VAR 0 4
61457: PUSH
61458: LD_INT 12
61460: NEG
61461: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
61462: LD_VAR 0 1
61466: PPUSH
61467: LD_VAR 0 2
61471: PPUSH
61472: LD_VAR 0 3
61476: PPUSH
61477: LD_VAR 0 4
61481: PPUSH
61482: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
61486: LD_VAR 0 1
61490: PPUSH
61491: LD_VAR 0 2
61495: PPUSH
61496: LD_VAR 0 3
61500: PPUSH
61501: CALL_OW 331
// end ;
61505: LD_VAR 0 5
61509: RET
// export function Video ( mode ) ; begin
61510: LD_INT 0
61512: PPUSH
// ingame_video = mode ;
61513: LD_ADDR_OWVAR 52
61517: PUSH
61518: LD_VAR 0 1
61522: ST_TO_ADDR
// interface_hidden = mode ;
61523: LD_ADDR_OWVAR 54
61527: PUSH
61528: LD_VAR 0 1
61532: ST_TO_ADDR
// end ;
61533: LD_VAR 0 2
61537: RET
// export function Join ( array , element ) ; begin
61538: LD_INT 0
61540: PPUSH
// result := Replace ( array , array + 1 , element ) ;
61541: LD_ADDR_VAR 0 3
61545: PUSH
61546: LD_VAR 0 1
61550: PPUSH
61551: LD_VAR 0 1
61555: PUSH
61556: LD_INT 1
61558: PLUS
61559: PPUSH
61560: LD_VAR 0 2
61564: PPUSH
61565: CALL_OW 1
61569: ST_TO_ADDR
// end ;
61570: LD_VAR 0 3
61574: RET
// export function JoinUnion ( array , element ) ; begin
61575: LD_INT 0
61577: PPUSH
// result := array union element ;
61578: LD_ADDR_VAR 0 3
61582: PUSH
61583: LD_VAR 0 1
61587: PUSH
61588: LD_VAR 0 2
61592: UNION
61593: ST_TO_ADDR
// end ;
61594: LD_VAR 0 3
61598: RET
// export function GetBehemoths ( side ) ; begin
61599: LD_INT 0
61601: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
61602: LD_ADDR_VAR 0 2
61606: PUSH
61607: LD_INT 22
61609: PUSH
61610: LD_VAR 0 1
61614: PUSH
61615: EMPTY
61616: LIST
61617: LIST
61618: PUSH
61619: LD_INT 31
61621: PUSH
61622: LD_INT 25
61624: PUSH
61625: EMPTY
61626: LIST
61627: LIST
61628: PUSH
61629: EMPTY
61630: LIST
61631: LIST
61632: PPUSH
61633: CALL_OW 69
61637: ST_TO_ADDR
// end ;
61638: LD_VAR 0 2
61642: RET
// export function Shuffle ( array ) ; var i , index ; begin
61643: LD_INT 0
61645: PPUSH
61646: PPUSH
61647: PPUSH
// result := [ ] ;
61648: LD_ADDR_VAR 0 2
61652: PUSH
61653: EMPTY
61654: ST_TO_ADDR
// if not array then
61655: LD_VAR 0 1
61659: NOT
61660: IFFALSE 61664
// exit ;
61662: GO 61763
// Randomize ;
61664: CALL_OW 10
// for i = array downto 1 do
61668: LD_ADDR_VAR 0 3
61672: PUSH
61673: DOUBLE
61674: LD_VAR 0 1
61678: INC
61679: ST_TO_ADDR
61680: LD_INT 1
61682: PUSH
61683: FOR_DOWNTO
61684: IFFALSE 61761
// begin index := rand ( 1 , array ) ;
61686: LD_ADDR_VAR 0 4
61690: PUSH
61691: LD_INT 1
61693: PPUSH
61694: LD_VAR 0 1
61698: PPUSH
61699: CALL_OW 12
61703: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
61704: LD_ADDR_VAR 0 2
61708: PUSH
61709: LD_VAR 0 2
61713: PPUSH
61714: LD_VAR 0 2
61718: PUSH
61719: LD_INT 1
61721: PLUS
61722: PPUSH
61723: LD_VAR 0 1
61727: PUSH
61728: LD_VAR 0 4
61732: ARRAY
61733: PPUSH
61734: CALL_OW 2
61738: ST_TO_ADDR
// array := Delete ( array , index ) ;
61739: LD_ADDR_VAR 0 1
61743: PUSH
61744: LD_VAR 0 1
61748: PPUSH
61749: LD_VAR 0 4
61753: PPUSH
61754: CALL_OW 3
61758: ST_TO_ADDR
// end ;
61759: GO 61683
61761: POP
61762: POP
// end ;
61763: LD_VAR 0 2
61767: RET
// export function GetBaseMaterials ( base ) ; begin
61768: LD_INT 0
61770: PPUSH
// result := [ 0 , 0 , 0 ] ;
61771: LD_ADDR_VAR 0 2
61775: PUSH
61776: LD_INT 0
61778: PUSH
61779: LD_INT 0
61781: PUSH
61782: LD_INT 0
61784: PUSH
61785: EMPTY
61786: LIST
61787: LIST
61788: LIST
61789: ST_TO_ADDR
// if not base then
61790: LD_VAR 0 1
61794: NOT
61795: IFFALSE 61799
// exit ;
61797: GO 61848
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
61799: LD_ADDR_VAR 0 2
61803: PUSH
61804: LD_VAR 0 1
61808: PPUSH
61809: LD_INT 1
61811: PPUSH
61812: CALL_OW 275
61816: PUSH
61817: LD_VAR 0 1
61821: PPUSH
61822: LD_INT 2
61824: PPUSH
61825: CALL_OW 275
61829: PUSH
61830: LD_VAR 0 1
61834: PPUSH
61835: LD_INT 3
61837: PPUSH
61838: CALL_OW 275
61842: PUSH
61843: EMPTY
61844: LIST
61845: LIST
61846: LIST
61847: ST_TO_ADDR
// end ;
61848: LD_VAR 0 2
61852: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
61853: LD_INT 0
61855: PPUSH
61856: PPUSH
// result := array ;
61857: LD_ADDR_VAR 0 3
61861: PUSH
61862: LD_VAR 0 1
61866: ST_TO_ADDR
// if size > 0 then
61867: LD_VAR 0 2
61871: PUSH
61872: LD_INT 0
61874: GREATER
61875: IFFALSE 61921
// for i := array downto size do
61877: LD_ADDR_VAR 0 4
61881: PUSH
61882: DOUBLE
61883: LD_VAR 0 1
61887: INC
61888: ST_TO_ADDR
61889: LD_VAR 0 2
61893: PUSH
61894: FOR_DOWNTO
61895: IFFALSE 61919
// result := Delete ( result , result ) ;
61897: LD_ADDR_VAR 0 3
61901: PUSH
61902: LD_VAR 0 3
61906: PPUSH
61907: LD_VAR 0 3
61911: PPUSH
61912: CALL_OW 3
61916: ST_TO_ADDR
61917: GO 61894
61919: POP
61920: POP
// end ;
61921: LD_VAR 0 3
61925: RET
// export function ComExit ( unit ) ; var tmp ; begin
61926: LD_INT 0
61928: PPUSH
61929: PPUSH
// if not IsInUnit ( unit ) then
61930: LD_VAR 0 1
61934: PPUSH
61935: CALL_OW 310
61939: NOT
61940: IFFALSE 61944
// exit ;
61942: GO 62004
// tmp := IsInUnit ( unit ) ;
61944: LD_ADDR_VAR 0 3
61948: PUSH
61949: LD_VAR 0 1
61953: PPUSH
61954: CALL_OW 310
61958: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
61959: LD_VAR 0 3
61963: PPUSH
61964: CALL_OW 247
61968: PUSH
61969: LD_INT 2
61971: EQUAL
61972: IFFALSE 61985
// ComExitVehicle ( unit ) else
61974: LD_VAR 0 1
61978: PPUSH
61979: CALL_OW 121
61983: GO 61994
// ComExitBuilding ( unit ) ;
61985: LD_VAR 0 1
61989: PPUSH
61990: CALL_OW 122
// result := tmp ;
61994: LD_ADDR_VAR 0 2
61998: PUSH
61999: LD_VAR 0 3
62003: ST_TO_ADDR
// end ;
62004: LD_VAR 0 2
62008: RET
// export function ResetHc ; begin
62009: LD_INT 0
62011: PPUSH
// InitHc ;
62012: CALL_OW 19
// hc_importance := 0 ;
62016: LD_ADDR_OWVAR 32
62020: PUSH
62021: LD_INT 0
62023: ST_TO_ADDR
// end ;
62024: LD_VAR 0 1
62028: RET
