// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// Init ;
  11: CALL 44 0 0
// PrepareAnimals ( 6 , 3 , 4 , apearea ) ;
  15: LD_INT 6
  17: PPUSH
  18: LD_INT 3
  20: PPUSH
  21: LD_INT 4
  23: PPUSH
  24: LD_INT 21
  26: PPUSH
  27: CALL 10803 0 4
// PrepareAmerican ;
  31: CALL 4022 0 0
// PrepareRussian ;
  35: CALL 292 0 0
// Action ;
  39: CALL 8517 0 0
// end ;
  43: END
// export conv_squad , escort , medal1 , medal2 , medal3 , path , convoy_start , dest_counter ; export riv , ar_attacks , ar_force , us_force , conv_counter , crates_counter , safeCounter ; function Init ; begin
  44: LD_INT 0
  46: PPUSH
// Difficulty := GetMultiplayerSetting ( 0 ) ;
  47: LD_ADDR_OWVAR 67
  51: PUSH
  52: LD_INT 0
  54: PPUSH
  55: CALL_OW 426
  59: ST_TO_ADDR
// medal1 := true ;
  60: LD_ADDR_EXP 3
  64: PUSH
  65: LD_INT 1
  67: ST_TO_ADDR
// medal2 := true ;
  68: LD_ADDR_EXP 4
  72: PUSH
  73: LD_INT 1
  75: ST_TO_ADDR
// medal3 := true ;
  76: LD_ADDR_EXP 5
  80: PUSH
  81: LD_INT 1
  83: ST_TO_ADDR
// path := [ pp1 , pp2 , pp3 , pp4 , conv_end ] ;
  84: LD_ADDR_EXP 6
  88: PUSH
  89: LD_INT 10
  91: PUSH
  92: LD_INT 11
  94: PUSH
  95: LD_INT 12
  97: PUSH
  98: LD_INT 13
 100: PUSH
 101: LD_INT 9
 103: PUSH
 104: EMPTY
 105: LIST
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: ST_TO_ADDR
// conv_squad := [ ] ;
 111: LD_ADDR_EXP 1
 115: PUSH
 116: EMPTY
 117: ST_TO_ADDR
// escort := [ ] ;
 118: LD_ADDR_EXP 2
 122: PUSH
 123: EMPTY
 124: ST_TO_ADDR
// riv := [ ] ;
 125: LD_ADDR_EXP 9
 129: PUSH
 130: EMPTY
 131: ST_TO_ADDR
// ar_force := [ ] ;
 132: LD_ADDR_EXP 11
 136: PUSH
 137: EMPTY
 138: ST_TO_ADDR
// ar_attacks := false ;
 139: LD_ADDR_EXP 10
 143: PUSH
 144: LD_INT 0
 146: ST_TO_ADDR
// us_force := [ ] ;
 147: LD_ADDR_EXP 12
 151: PUSH
 152: EMPTY
 153: ST_TO_ADDR
// convoy_start := false ;
 154: LD_ADDR_EXP 7
 158: PUSH
 159: LD_INT 0
 161: ST_TO_ADDR
// conv_counter := 0 ;
 162: LD_ADDR_EXP 13
 166: PUSH
 167: LD_INT 0
 169: ST_TO_ADDR
// dest_counter := 0 ;
 170: LD_ADDR_EXP 8
 174: PUSH
 175: LD_INT 0
 177: ST_TO_ADDR
// crates_counter := 1 1$10 ;
 178: LD_ADDR_EXP 14
 182: PUSH
 183: LD_INT 2450
 185: ST_TO_ADDR
// safeCounter := 0 ;
 186: LD_ADDR_EXP 15
 190: PUSH
 191: LD_INT 0
 193: ST_TO_ADDR
// end ;
 194: LD_VAR 0 1
 198: RET
// every 2 2$00 do
 199: GO 201
 201: DISABLE
// begin while ( tick <= [ 47 47$00 , 44 44$00 , 41 41$00 ] [ Difficulty ] ) do
 202: LD_OWVAR 1
 206: PUSH
 207: LD_INT 98700
 209: PUSH
 210: LD_INT 92400
 212: PUSH
 213: LD_INT 86100
 215: PUSH
 216: EMPTY
 217: LIST
 218: LIST
 219: LIST
 220: PUSH
 221: LD_OWVAR 67
 225: ARRAY
 226: LESSEQUAL
 227: IFFALSE 291
// begin Wait ( crates_counter ) ;
 229: LD_EXP 14
 233: PPUSH
 234: CALL_OW 67
// crates_counter := crates_counter + 0 0$09 ;
 238: LD_ADDR_EXP 14
 242: PUSH
 243: LD_EXP 14
 247: PUSH
 248: LD_INT 315
 250: PLUS
 251: ST_TO_ADDR
// if GetResourceArea ( crates_spawn , mat_cans ) < 30 then
 252: LD_INT 22
 254: PPUSH
 255: LD_INT 1
 257: PPUSH
 258: CALL_OW 287
 262: PUSH
 263: LD_INT 30
 265: LESS
 266: IFFALSE 289
// CreateCratesArea ( Rand ( 1 , 5 ) , crates_spawn , true ) ;
 268: LD_INT 1
 270: PPUSH
 271: LD_INT 5
 273: PPUSH
 274: CALL_OW 12
 278: PPUSH
 279: LD_INT 22
 281: PPUSH
 282: LD_INT 1
 284: PPUSH
 285: CALL_OW 55
// end ;
 289: GO 202
// end ; end_of_file
 291: END
// export Stolypin , Popov , Saseda ; export function PrepareRussian ; var un , force , i , c , skill , team ; begin
 292: LD_INT 0
 294: PPUSH
 295: PPUSH
 296: PPUSH
 297: PPUSH
 298: PPUSH
 299: PPUSH
 300: PPUSH
// uc_side := 6 ;
 301: LD_ADDR_OWVAR 20
 305: PUSH
 306: LD_INT 6
 308: ST_TO_ADDR
// uc_nation := 3 ;
 309: LD_ADDR_OWVAR 21
 313: PUSH
 314: LD_INT 3
 316: ST_TO_ADDR
// ChangeSideFog ( 3 , 6 ) ;
 317: LD_INT 3
 319: PPUSH
 320: LD_INT 6
 322: PPUSH
 323: CALL_OW 343
// Popov := NewCharacter ( Gaydar ) ;
 327: LD_ADDR_EXP 17
 331: PUSH
 332: LD_STRING Gaydar
 334: PPUSH
 335: CALL_OW 25
 339: ST_TO_ADDR
// uc_side := 7 ;
 340: LD_ADDR_OWVAR 20
 344: PUSH
 345: LD_INT 7
 347: ST_TO_ADDR
// hc_gallery := sandal ;
 348: LD_ADDR_OWVAR 33
 352: PUSH
 353: LD_STRING sandal
 355: ST_TO_ADDR
// hc_face_number := 9 ;
 356: LD_ADDR_OWVAR 34
 360: PUSH
 361: LD_INT 9
 363: ST_TO_ADDR
// hc_skills := [ 3 , 5 , 2 , 7 ] ;
 364: LD_ADDR_OWVAR 31
 368: PUSH
 369: LD_INT 3
 371: PUSH
 372: LD_INT 5
 374: PUSH
 375: LD_INT 2
 377: PUSH
 378: LD_INT 7
 380: PUSH
 381: EMPTY
 382: LIST
 383: LIST
 384: LIST
 385: LIST
 386: ST_TO_ADDR
// hc_sex := sex_male ;
 387: LD_ADDR_OWVAR 27
 391: PUSH
 392: LD_INT 1
 394: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
 395: LD_ADDR_OWVAR 29
 399: PUSH
 400: LD_INT 10
 402: PUSH
 403: LD_INT 11
 405: PUSH
 406: EMPTY
 407: LIST
 408: LIST
 409: ST_TO_ADDR
// hc_class := 4 ;
 410: LD_ADDR_OWVAR 28
 414: PUSH
 415: LD_INT 4
 417: ST_TO_ADDR
// hc_name := Fiodor Saseda ;
 418: LD_ADDR_OWVAR 26
 422: PUSH
 423: LD_STRING Fiodor Saseda
 425: ST_TO_ADDR
// Saseda := CreateHuman ;
 426: LD_ADDR_EXP 18
 430: PUSH
 431: CALL_OW 44
 435: ST_TO_ADDR
// uc_side := 3 ;
 436: LD_ADDR_OWVAR 20
 440: PUSH
 441: LD_INT 3
 443: ST_TO_ADDR
// hc_importance := 100 ;
 444: LD_ADDR_OWVAR 32
 448: PUSH
 449: LD_INT 100
 451: ST_TO_ADDR
// hc_class := 1 ;
 452: LD_ADDR_OWVAR 28
 456: PUSH
 457: LD_INT 1
 459: ST_TO_ADDR
// hc_sex := sex_male ;
 460: LD_ADDR_OWVAR 27
 464: PUSH
 465: LD_INT 1
 467: ST_TO_ADDR
// hc_skills := [ 6 , 3 , 4 , 2 ] ;
 468: LD_ADDR_OWVAR 31
 472: PUSH
 473: LD_INT 6
 475: PUSH
 476: LD_INT 3
 478: PUSH
 479: LD_INT 4
 481: PUSH
 482: LD_INT 2
 484: PUSH
 485: EMPTY
 486: LIST
 487: LIST
 488: LIST
 489: LIST
 490: ST_TO_ADDR
// hc_name := W. I. Stolypin ;
 491: LD_ADDR_OWVAR 26
 495: PUSH
 496: LD_STRING W. I. Stolypin
 498: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
 499: LD_ADDR_OWVAR 29
 503: PUSH
 504: LD_INT 10
 506: PUSH
 507: LD_INT 11
 509: PUSH
 510: EMPTY
 511: LIST
 512: LIST
 513: ST_TO_ADDR
// hc_gallery := ru ;
 514: LD_ADDR_OWVAR 33
 518: PUSH
 519: LD_STRING ru
 521: ST_TO_ADDR
// hc_face_number := 15 ;
 522: LD_ADDR_OWVAR 34
 526: PUSH
 527: LD_INT 15
 529: ST_TO_ADDR
// Stolypin := CreateHuman ;
 530: LD_ADDR_EXP 16
 534: PUSH
 535: CALL_OW 44
 539: ST_TO_ADDR
// hc_importance := 0 ;
 540: LD_ADDR_OWVAR 32
 544: PUSH
 545: LD_INT 0
 547: ST_TO_ADDR
// hc_gallery :=  ;
 548: LD_ADDR_OWVAR 33
 552: PUSH
 553: LD_STRING 
 555: ST_TO_ADDR
// hc_name :=  ;
 556: LD_ADDR_OWVAR 26
 560: PUSH
 561: LD_STRING 
 563: ST_TO_ADDR
// skill := [ 6 , 5 , 5 ] [ Difficulty ] ;
 564: LD_ADDR_VAR 0 6
 568: PUSH
 569: LD_INT 6
 571: PUSH
 572: LD_INT 5
 574: PUSH
 575: LD_INT 5
 577: PUSH
 578: EMPTY
 579: LIST
 580: LIST
 581: LIST
 582: PUSH
 583: LD_OWVAR 67
 587: ARRAY
 588: ST_TO_ADDR
// c := 1 ;
 589: LD_ADDR_VAR 0 5
 593: PUSH
 594: LD_INT 1
 596: ST_TO_ADDR
// for i = 1 to 21 do
 597: LD_ADDR_VAR 0 4
 601: PUSH
 602: DOUBLE
 603: LD_INT 1
 605: DEC
 606: ST_TO_ADDR
 607: LD_INT 21
 609: PUSH
 610: FOR_TO
 611: IFFALSE 712
// begin if i = 10 then
 613: LD_VAR 0 4
 617: PUSH
 618: LD_INT 10
 620: EQUAL
 621: IFFALSE 631
// c := 2 ;
 623: LD_ADDR_VAR 0 5
 627: PUSH
 628: LD_INT 2
 630: ST_TO_ADDR
// if i = 14 then
 631: LD_VAR 0 4
 635: PUSH
 636: LD_INT 14
 638: EQUAL
 639: IFFALSE 649
// c := 3 ;
 641: LD_ADDR_VAR 0 5
 645: PUSH
 646: LD_INT 3
 648: ST_TO_ADDR
// if i = 18 then
 649: LD_VAR 0 4
 653: PUSH
 654: LD_INT 18
 656: EQUAL
 657: IFFALSE 667
// c := 4 ;
 659: LD_ADDR_VAR 0 5
 663: PUSH
 664: LD_INT 4
 666: ST_TO_ADDR
// PrepareHuman ( false , c , skill ) ;
 667: LD_INT 0
 669: PPUSH
 670: LD_VAR 0 5
 674: PPUSH
 675: LD_VAR 0 6
 679: PPUSH
 680: CALL_OW 380
// un := CreateHuman ;
 684: LD_ADDR_VAR 0 2
 688: PUSH
 689: CALL_OW 44
 693: ST_TO_ADDR
// force := force ^ un ;
 694: LD_ADDR_VAR 0 3
 698: PUSH
 699: LD_VAR 0 3
 703: PUSH
 704: LD_VAR 0 2
 708: ADD
 709: ST_TO_ADDR
// end ;
 710: GO 610
 712: POP
 713: POP
// team := CharacterSelection ( text , [ 7 , 6 , 6 ] [ Difficulty ] , [ 7 , 6 , 6 ] [ Difficulty ] , [ sel_change_class , Stolypin , sel_changeable , sel_not_hired ] ^ force , [ [ class_soldier , 3 ] , class_mechanic , [ class_engineer , 1 ] , class_scientistic ] ) ;
 714: LD_ADDR_VAR 0 7
 718: PUSH
 719: LD_STRING text
 721: PPUSH
 722: LD_INT 7
 724: PUSH
 725: LD_INT 6
 727: PUSH
 728: LD_INT 6
 730: PUSH
 731: EMPTY
 732: LIST
 733: LIST
 734: LIST
 735: PUSH
 736: LD_OWVAR 67
 740: ARRAY
 741: PPUSH
 742: LD_INT 7
 744: PUSH
 745: LD_INT 6
 747: PUSH
 748: LD_INT 6
 750: PUSH
 751: EMPTY
 752: LIST
 753: LIST
 754: LIST
 755: PUSH
 756: LD_OWVAR 67
 760: ARRAY
 761: PPUSH
 762: LD_INT -5
 764: PUSH
 765: LD_EXP 16
 769: PUSH
 770: LD_INT -3
 772: PUSH
 773: LD_INT -2
 775: PUSH
 776: EMPTY
 777: LIST
 778: LIST
 779: LIST
 780: LIST
 781: PUSH
 782: LD_VAR 0 3
 786: ADD
 787: PPUSH
 788: LD_INT 1
 790: PUSH
 791: LD_INT 3
 793: PUSH
 794: EMPTY
 795: LIST
 796: LIST
 797: PUSH
 798: LD_INT 3
 800: PUSH
 801: LD_INT 2
 803: PUSH
 804: LD_INT 1
 806: PUSH
 807: EMPTY
 808: LIST
 809: LIST
 810: PUSH
 811: LD_INT 4
 813: PUSH
 814: EMPTY
 815: LIST
 816: LIST
 817: LIST
 818: LIST
 819: PPUSH
 820: CALL_OW 42
 824: ST_TO_ADDR
// team := team ^ Stolypin ;
 825: LD_ADDR_VAR 0 7
 829: PUSH
 830: LD_VAR 0 7
 834: PUSH
 835: LD_EXP 16
 839: ADD
 840: ST_TO_ADDR
// for i = 1 to team do
 841: LD_ADDR_VAR 0 4
 845: PUSH
 846: DOUBLE
 847: LD_INT 1
 849: DEC
 850: ST_TO_ADDR
 851: LD_VAR 0 7
 855: PUSH
 856: FOR_TO
 857: IFFALSE 882
// PlaceUnitArea ( team [ i ] , rus_start , false ) ;
 859: LD_VAR 0 7
 863: PUSH
 864: LD_VAR 0 4
 868: ARRAY
 869: PPUSH
 870: LD_INT 1
 872: PPUSH
 873: LD_INT 0
 875: PPUSH
 876: CALL_OW 49
 880: GO 856
 882: POP
 883: POP
// CenterNowOnUnits ( Stolypin ) ;
 884: LD_EXP 16
 888: PPUSH
 889: CALL_OW 87
// end ;
 893: LD_VAR 0 1
 897: RET
// export conv_ready ; export function Convoy ( type ) ; var i , veh , skill ; begin
 898: LD_INT 0
 900: PPUSH
 901: PPUSH
 902: PPUSH
 903: PPUSH
// Randomize ;
 904: CALL_OW 10
// uc_side := 6 ;
 908: LD_ADDR_OWVAR 20
 912: PUSH
 913: LD_INT 6
 915: ST_TO_ADDR
// uc_nation := 3 ;
 916: LD_ADDR_OWVAR 21
 920: PUSH
 921: LD_INT 3
 923: ST_TO_ADDR
// hc_name :=  ;
 924: LD_ADDR_OWVAR 26
 928: PUSH
 929: LD_STRING 
 931: ST_TO_ADDR
// hc_gallery :=  ;
 932: LD_ADDR_OWVAR 33
 936: PUSH
 937: LD_STRING 
 939: ST_TO_ADDR
// skill := [ 5 , 5 , 4 ] [ Difficulty ] ;
 940: LD_ADDR_VAR 0 5
 944: PUSH
 945: LD_INT 5
 947: PUSH
 948: LD_INT 5
 950: PUSH
 951: LD_INT 4
 953: PUSH
 954: EMPTY
 955: LIST
 956: LIST
 957: LIST
 958: PUSH
 959: LD_OWVAR 67
 963: ARRAY
 964: ST_TO_ADDR
// conv_ready := false ;
 965: LD_ADDR_EXP 19
 969: PUSH
 970: LD_INT 0
 972: ST_TO_ADDR
// case type of 1 :
 973: LD_VAR 0 1
 977: PUSH
 978: LD_INT 1
 980: DOUBLE
 981: EQUAL
 982: IFTRUE 986
 984: GO 1256
 986: POP
// begin if Rand ( 0 , 1 ) = 1 then
 987: LD_INT 0
 989: PPUSH
 990: LD_INT 1
 992: PPUSH
 993: CALL_OW 12
 997: PUSH
 998: LD_INT 1
1000: EQUAL
1001: IFFALSE 1007
// AddEscort ( ) ;
1003: CALL 2889 0 0
// wait ( 0 0$03 ) ;
1007: LD_INT 105
1009: PPUSH
1010: CALL_OW 67
// vc_chassis := ru_medium_wheeled ;
1014: LD_ADDR_OWVAR 37
1018: PUSH
1019: LD_INT 21
1021: ST_TO_ADDR
// vc_engine := engine_combustion ;
1022: LD_ADDR_OWVAR 39
1026: PUSH
1027: LD_INT 1
1029: ST_TO_ADDR
// vc_control := control_manual ;
1030: LD_ADDR_OWVAR 38
1034: PUSH
1035: LD_INT 1
1037: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
1038: LD_ADDR_OWVAR 40
1042: PUSH
1043: LD_INT 51
1045: ST_TO_ADDR
// vc_fuel_battery := Rand ( 50 , 99 ) ;
1046: LD_ADDR_OWVAR 41
1050: PUSH
1051: LD_INT 50
1053: PPUSH
1054: LD_INT 99
1056: PPUSH
1057: CALL_OW 12
1061: ST_TO_ADDR
// if uc_side <> 6 then
1062: LD_OWVAR 20
1066: PUSH
1067: LD_INT 6
1069: NONEQUAL
1070: IFFALSE 1080
// uc_side := 6 ;
1072: LD_ADDR_OWVAR 20
1076: PUSH
1077: LD_INT 6
1079: ST_TO_ADDR
// veh := CreateVehicle ;
1080: LD_ADDR_VAR 0 4
1084: PUSH
1085: CALL_OW 45
1089: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1090: LD_VAR 0 4
1094: PPUSH
1095: LD_INT 3
1097: PPUSH
1098: CALL_OW 233
// PlaceUnitArea ( veh , conv_start , false ) ;
1102: LD_VAR 0 4
1106: PPUSH
1107: LD_INT 8
1109: PPUSH
1110: LD_INT 0
1112: PPUSH
1113: CALL_OW 49
// PrepareHuman ( false , Rand ( 1 , 2 ) , skill ) ;
1117: LD_INT 0
1119: PPUSH
1120: LD_INT 1
1122: PPUSH
1123: LD_INT 2
1125: PPUSH
1126: CALL_OW 12
1130: PPUSH
1131: LD_VAR 0 5
1135: PPUSH
1136: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
1140: CALL_OW 44
1144: PPUSH
1145: LD_VAR 0 4
1149: PPUSH
1150: CALL_OW 52
// SetLives ( veh , Rand ( 500 , 1000 ) ) ;
1154: LD_VAR 0 4
1158: PPUSH
1159: LD_INT 500
1161: PPUSH
1162: LD_INT 1000
1164: PPUSH
1165: CALL_OW 12
1169: PPUSH
1170: CALL_OW 234
// SetCargo ( veh , Rand ( 1 , 2 ) , Rand ( 2 , 10 ) * 10 ) ;
1174: LD_VAR 0 4
1178: PPUSH
1179: LD_INT 1
1181: PPUSH
1182: LD_INT 2
1184: PPUSH
1185: CALL_OW 12
1189: PPUSH
1190: LD_INT 2
1192: PPUSH
1193: LD_INT 10
1195: PPUSH
1196: CALL_OW 12
1200: PUSH
1201: LD_INT 10
1203: MUL
1204: PPUSH
1205: CALL_OW 290
// conv_squad := Insert ( conv_squad , 1 , [ veh , 1 ] ) ;
1209: LD_ADDR_EXP 1
1213: PUSH
1214: LD_EXP 1
1218: PPUSH
1219: LD_INT 1
1221: PPUSH
1222: LD_VAR 0 4
1226: PUSH
1227: LD_INT 1
1229: PUSH
1230: EMPTY
1231: LIST
1232: LIST
1233: PPUSH
1234: CALL_OW 2
1238: ST_TO_ADDR
// Wait ( 0 0$01 ) ;
1239: LD_INT 35
1241: PPUSH
1242: CALL_OW 67
// conv_ready := true ;
1246: LD_ADDR_EXP 19
1250: PUSH
1251: LD_INT 1
1253: ST_TO_ADDR
// end ; 2 :
1254: GO 2884
1256: LD_INT 2
1258: DOUBLE
1259: EQUAL
1260: IFTRUE 1264
1262: GO 1564
1264: POP
// begin AddEscort ( ) ;
1265: CALL 2889 0 0
// wait ( 0 0$02 ) ;
1269: LD_INT 70
1271: PPUSH
1272: CALL_OW 67
// for i = 1 to 3 do
1276: LD_ADDR_VAR 0 3
1280: PUSH
1281: DOUBLE
1282: LD_INT 1
1284: DEC
1285: ST_TO_ADDR
1286: LD_INT 3
1288: PUSH
1289: FOR_TO
1290: IFFALSE 1541
// begin vc_chassis := ru_medium_wheeled ;
1292: LD_ADDR_OWVAR 37
1296: PUSH
1297: LD_INT 21
1299: ST_TO_ADDR
// vc_engine := engine_combustion ;
1300: LD_ADDR_OWVAR 39
1304: PUSH
1305: LD_INT 1
1307: ST_TO_ADDR
// vc_control := control_manual ;
1308: LD_ADDR_OWVAR 38
1312: PUSH
1313: LD_INT 1
1315: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
1316: LD_ADDR_OWVAR 40
1320: PUSH
1321: LD_INT 51
1323: ST_TO_ADDR
// vc_fuel_battery := Rand ( 50 , 99 ) ;
1324: LD_ADDR_OWVAR 41
1328: PUSH
1329: LD_INT 50
1331: PPUSH
1332: LD_INT 99
1334: PPUSH
1335: CALL_OW 12
1339: ST_TO_ADDR
// if uc_side <> 6 then
1340: LD_OWVAR 20
1344: PUSH
1345: LD_INT 6
1347: NONEQUAL
1348: IFFALSE 1358
// uc_side := 6 ;
1350: LD_ADDR_OWVAR 20
1354: PUSH
1355: LD_INT 6
1357: ST_TO_ADDR
// veh := CreateVehicle ;
1358: LD_ADDR_VAR 0 4
1362: PUSH
1363: CALL_OW 45
1367: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1368: LD_VAR 0 4
1372: PPUSH
1373: LD_INT 3
1375: PPUSH
1376: CALL_OW 233
// PlaceUnitArea ( veh , conv_start , false ) ;
1380: LD_VAR 0 4
1384: PPUSH
1385: LD_INT 8
1387: PPUSH
1388: LD_INT 0
1390: PPUSH
1391: CALL_OW 49
// PrepareHuman ( false , Rand ( 1 , 2 ) , skill ) ;
1395: LD_INT 0
1397: PPUSH
1398: LD_INT 1
1400: PPUSH
1401: LD_INT 2
1403: PPUSH
1404: CALL_OW 12
1408: PPUSH
1409: LD_VAR 0 5
1413: PPUSH
1414: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
1418: CALL_OW 44
1422: PPUSH
1423: LD_VAR 0 4
1427: PPUSH
1428: CALL_OW 52
// SetLives ( veh , Rand ( 500 , 1000 ) ) ;
1432: LD_VAR 0 4
1436: PPUSH
1437: LD_INT 500
1439: PPUSH
1440: LD_INT 1000
1442: PPUSH
1443: CALL_OW 12
1447: PPUSH
1448: CALL_OW 234
// SetCargo ( veh , Rand ( 1 , 2 ) , Rand ( 2 , 10 ) * 10 ) ;
1452: LD_VAR 0 4
1456: PPUSH
1457: LD_INT 1
1459: PPUSH
1460: LD_INT 2
1462: PPUSH
1463: CALL_OW 12
1467: PPUSH
1468: LD_INT 2
1470: PPUSH
1471: LD_INT 10
1473: PPUSH
1474: CALL_OW 12
1478: PUSH
1479: LD_INT 10
1481: MUL
1482: PPUSH
1483: CALL_OW 290
// conv_squad := Insert ( conv_squad , 1 , [ veh , 1 ] ) ;
1487: LD_ADDR_EXP 1
1491: PUSH
1492: LD_EXP 1
1496: PPUSH
1497: LD_INT 1
1499: PPUSH
1500: LD_VAR 0 4
1504: PUSH
1505: LD_INT 1
1507: PUSH
1508: EMPTY
1509: LIST
1510: LIST
1511: PPUSH
1512: CALL_OW 2
1516: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
1517: LD_VAR 0 4
1521: PPUSH
1522: LD_INT 120
1524: PPUSH
1525: LD_INT 10
1527: PPUSH
1528: CALL_OW 111
// wait ( 0 0$03 ) ;
1532: LD_INT 105
1534: PPUSH
1535: CALL_OW 67
// end ;
1539: GO 1289
1541: POP
1542: POP
// AddEscort ( ) ;
1543: CALL 2889 0 0
// wait ( 0 0$02 ) ;
1547: LD_INT 70
1549: PPUSH
1550: CALL_OW 67
// conv_ready := true ;
1554: LD_ADDR_EXP 19
1558: PUSH
1559: LD_INT 1
1561: ST_TO_ADDR
// end ; 3 :
1562: GO 2884
1564: LD_INT 3
1566: DOUBLE
1567: EQUAL
1568: IFTRUE 1572
1570: GO 1999
1572: POP
// begin AddEscort ( ) ;
1573: CALL 2889 0 0
// wait ( 0 0$02 ) ;
1577: LD_INT 70
1579: PPUSH
1580: CALL_OW 67
// for i = 1 to 3 do
1584: LD_ADDR_VAR 0 3
1588: PUSH
1589: DOUBLE
1590: LD_INT 1
1592: DEC
1593: ST_TO_ADDR
1594: LD_INT 3
1596: PUSH
1597: FOR_TO
1598: IFFALSE 1849
// begin vc_chassis := ru_medium_wheeled ;
1600: LD_ADDR_OWVAR 37
1604: PUSH
1605: LD_INT 21
1607: ST_TO_ADDR
// vc_engine := engine_combustion ;
1608: LD_ADDR_OWVAR 39
1612: PUSH
1613: LD_INT 1
1615: ST_TO_ADDR
// vc_control := control_manual ;
1616: LD_ADDR_OWVAR 38
1620: PUSH
1621: LD_INT 1
1623: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
1624: LD_ADDR_OWVAR 40
1628: PUSH
1629: LD_INT 51
1631: ST_TO_ADDR
// vc_fuel_battery := Rand ( 50 , 99 ) ;
1632: LD_ADDR_OWVAR 41
1636: PUSH
1637: LD_INT 50
1639: PPUSH
1640: LD_INT 99
1642: PPUSH
1643: CALL_OW 12
1647: ST_TO_ADDR
// if uc_side <> 6 then
1648: LD_OWVAR 20
1652: PUSH
1653: LD_INT 6
1655: NONEQUAL
1656: IFFALSE 1666
// uc_side := 6 ;
1658: LD_ADDR_OWVAR 20
1662: PUSH
1663: LD_INT 6
1665: ST_TO_ADDR
// veh := CreateVehicle ;
1666: LD_ADDR_VAR 0 4
1670: PUSH
1671: CALL_OW 45
1675: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1676: LD_VAR 0 4
1680: PPUSH
1681: LD_INT 3
1683: PPUSH
1684: CALL_OW 233
// PlaceUnitArea ( veh , conv_start , false ) ;
1688: LD_VAR 0 4
1692: PPUSH
1693: LD_INT 8
1695: PPUSH
1696: LD_INT 0
1698: PPUSH
1699: CALL_OW 49
// PrepareHuman ( false , Rand ( 1 , 2 ) , skill ) ;
1703: LD_INT 0
1705: PPUSH
1706: LD_INT 1
1708: PPUSH
1709: LD_INT 2
1711: PPUSH
1712: CALL_OW 12
1716: PPUSH
1717: LD_VAR 0 5
1721: PPUSH
1722: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
1726: CALL_OW 44
1730: PPUSH
1731: LD_VAR 0 4
1735: PPUSH
1736: CALL_OW 52
// SetLives ( veh , Rand ( 500 , 1000 ) ) ;
1740: LD_VAR 0 4
1744: PPUSH
1745: LD_INT 500
1747: PPUSH
1748: LD_INT 1000
1750: PPUSH
1751: CALL_OW 12
1755: PPUSH
1756: CALL_OW 234
// SetCargo ( veh , Rand ( 1 , 2 ) , Rand ( 2 , 10 ) * 10 ) ;
1760: LD_VAR 0 4
1764: PPUSH
1765: LD_INT 1
1767: PPUSH
1768: LD_INT 2
1770: PPUSH
1771: CALL_OW 12
1775: PPUSH
1776: LD_INT 2
1778: PPUSH
1779: LD_INT 10
1781: PPUSH
1782: CALL_OW 12
1786: PUSH
1787: LD_INT 10
1789: MUL
1790: PPUSH
1791: CALL_OW 290
// conv_squad := Insert ( conv_squad , 1 , [ veh , 1 ] ) ;
1795: LD_ADDR_EXP 1
1799: PUSH
1800: LD_EXP 1
1804: PPUSH
1805: LD_INT 1
1807: PPUSH
1808: LD_VAR 0 4
1812: PUSH
1813: LD_INT 1
1815: PUSH
1816: EMPTY
1817: LIST
1818: LIST
1819: PPUSH
1820: CALL_OW 2
1824: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
1825: LD_VAR 0 4
1829: PPUSH
1830: LD_INT 120
1832: PPUSH
1833: LD_INT 10
1835: PPUSH
1836: CALL_OW 111
// wait ( 0 0$03 ) ;
1840: LD_INT 105
1842: PPUSH
1843: CALL_OW 67
// end ;
1847: GO 1597
1849: POP
1850: POP
// for i = 1 to rand ( 2 , 4 ) do
1851: LD_ADDR_VAR 0 3
1855: PUSH
1856: DOUBLE
1857: LD_INT 1
1859: DEC
1860: ST_TO_ADDR
1861: LD_INT 2
1863: PPUSH
1864: LD_INT 4
1866: PPUSH
1867: CALL_OW 12
1871: PUSH
1872: FOR_TO
1873: IFFALSE 1980
// begin PrepareHuman ( false , 1 , skill ) ;
1875: LD_INT 0
1877: PPUSH
1878: LD_INT 1
1880: PPUSH
1881: LD_VAR 0 5
1885: PPUSH
1886: CALL_OW 380
// if uc_side <> 6 then
1890: LD_OWVAR 20
1894: PUSH
1895: LD_INT 6
1897: NONEQUAL
1898: IFFALSE 1908
// uc_side := 6 ;
1900: LD_ADDR_OWVAR 20
1904: PUSH
1905: LD_INT 6
1907: ST_TO_ADDR
// veh := CreateHuman ;
1908: LD_ADDR_VAR 0 4
1912: PUSH
1913: CALL_OW 44
1917: ST_TO_ADDR
// PlaceUnitArea ( veh , conv_start , false ) ;
1918: LD_VAR 0 4
1922: PPUSH
1923: LD_INT 8
1925: PPUSH
1926: LD_INT 0
1928: PPUSH
1929: CALL_OW 49
// escort := Insert ( escort , 1 , veh ) ;
1933: LD_ADDR_EXP 2
1937: PUSH
1938: LD_EXP 2
1942: PPUSH
1943: LD_INT 1
1945: PPUSH
1946: LD_VAR 0 4
1950: PPUSH
1951: CALL_OW 2
1955: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
1956: LD_VAR 0 4
1960: PPUSH
1961: LD_INT 120
1963: PPUSH
1964: LD_INT 10
1966: PPUSH
1967: CALL_OW 111
// Wait ( 0 0$02 ) ;
1971: LD_INT 70
1973: PPUSH
1974: CALL_OW 67
// end ;
1978: GO 1872
1980: POP
1981: POP
// Wait ( 0 0$02 ) ;
1982: LD_INT 70
1984: PPUSH
1985: CALL_OW 67
// conv_ready := true ;
1989: LD_ADDR_EXP 19
1993: PUSH
1994: LD_INT 1
1996: ST_TO_ADDR
// end ; 4 :
1997: GO 2884
1999: LD_INT 4
2001: DOUBLE
2002: EQUAL
2003: IFTRUE 2007
2005: GO 2313
2007: POP
// begin if Rand ( 0 , 1 ) = 1 then
2008: LD_INT 0
2010: PPUSH
2011: LD_INT 1
2013: PPUSH
2014: CALL_OW 12
2018: PUSH
2019: LD_INT 1
2021: EQUAL
2022: IFFALSE 2028
// AddEscort ( ) ;
2024: CALL 2889 0 0
// wait ( 0 0$02 ) ;
2028: LD_INT 70
2030: PPUSH
2031: CALL_OW 67
// for i = 1 to 5 do
2035: LD_ADDR_VAR 0 3
2039: PUSH
2040: DOUBLE
2041: LD_INT 1
2043: DEC
2044: ST_TO_ADDR
2045: LD_INT 5
2047: PUSH
2048: FOR_TO
2049: IFFALSE 2171
// begin PrepareHuman ( false , Rand ( 2 , 4 ) , skill ) ;
2051: LD_INT 0
2053: PPUSH
2054: LD_INT 2
2056: PPUSH
2057: LD_INT 4
2059: PPUSH
2060: CALL_OW 12
2064: PPUSH
2065: LD_VAR 0 5
2069: PPUSH
2070: CALL_OW 380
// if uc_side <> 6 then
2074: LD_OWVAR 20
2078: PUSH
2079: LD_INT 6
2081: NONEQUAL
2082: IFFALSE 2092
// uc_side := 6 ;
2084: LD_ADDR_OWVAR 20
2088: PUSH
2089: LD_INT 6
2091: ST_TO_ADDR
// veh := CreateHuman ;
2092: LD_ADDR_VAR 0 4
2096: PUSH
2097: CALL_OW 44
2101: ST_TO_ADDR
// PlaceUnitArea ( veh , conv_start , false ) ;
2102: LD_VAR 0 4
2106: PPUSH
2107: LD_INT 8
2109: PPUSH
2110: LD_INT 0
2112: PPUSH
2113: CALL_OW 49
// conv_squad := Insert ( conv_squad , 1 , [ veh , 1 ] ) ;
2117: LD_ADDR_EXP 1
2121: PUSH
2122: LD_EXP 1
2126: PPUSH
2127: LD_INT 1
2129: PPUSH
2130: LD_VAR 0 4
2134: PUSH
2135: LD_INT 1
2137: PUSH
2138: EMPTY
2139: LIST
2140: LIST
2141: PPUSH
2142: CALL_OW 2
2146: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
2147: LD_VAR 0 4
2151: PPUSH
2152: LD_INT 120
2154: PPUSH
2155: LD_INT 10
2157: PPUSH
2158: CALL_OW 111
// Wait ( 0 0$02 ) ;
2162: LD_INT 70
2164: PPUSH
2165: CALL_OW 67
// end ;
2169: GO 2048
2171: POP
2172: POP
// for i = 1 to 2 do
2173: LD_ADDR_VAR 0 3
2177: PUSH
2178: DOUBLE
2179: LD_INT 1
2181: DEC
2182: ST_TO_ADDR
2183: LD_INT 2
2185: PUSH
2186: FOR_TO
2187: IFFALSE 2294
// begin PrepareHuman ( false , 1 , skill ) ;
2189: LD_INT 0
2191: PPUSH
2192: LD_INT 1
2194: PPUSH
2195: LD_VAR 0 5
2199: PPUSH
2200: CALL_OW 380
// if uc_side <> 6 then
2204: LD_OWVAR 20
2208: PUSH
2209: LD_INT 6
2211: NONEQUAL
2212: IFFALSE 2222
// uc_side := 6 ;
2214: LD_ADDR_OWVAR 20
2218: PUSH
2219: LD_INT 6
2221: ST_TO_ADDR
// veh := CreateHuman ;
2222: LD_ADDR_VAR 0 4
2226: PUSH
2227: CALL_OW 44
2231: ST_TO_ADDR
// PlaceUnitArea ( veh , conv_start , false ) ;
2232: LD_VAR 0 4
2236: PPUSH
2237: LD_INT 8
2239: PPUSH
2240: LD_INT 0
2242: PPUSH
2243: CALL_OW 49
// escort := Insert ( escort , 1 , veh ) ;
2247: LD_ADDR_EXP 2
2251: PUSH
2252: LD_EXP 2
2256: PPUSH
2257: LD_INT 1
2259: PPUSH
2260: LD_VAR 0 4
2264: PPUSH
2265: CALL_OW 2
2269: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
2270: LD_VAR 0 4
2274: PPUSH
2275: LD_INT 120
2277: PPUSH
2278: LD_INT 10
2280: PPUSH
2281: CALL_OW 111
// Wait ( 0 0$02 ) ;
2285: LD_INT 70
2287: PPUSH
2288: CALL_OW 67
// end ;
2292: GO 2186
2294: POP
2295: POP
// Wait ( 0 0$02 ) ;
2296: LD_INT 70
2298: PPUSH
2299: CALL_OW 67
// conv_ready := true ;
2303: LD_ADDR_EXP 19
2307: PUSH
2308: LD_INT 1
2310: ST_TO_ADDR
// end ; 5 :
2311: GO 2884
2313: LD_INT 5
2315: DOUBLE
2316: EQUAL
2317: IFTRUE 2321
2319: GO 2883
2321: POP
// begin AddEscort ( ) ;
2322: CALL 2889 0 0
// wait ( 0 0$02 ) ;
2326: LD_INT 70
2328: PPUSH
2329: CALL_OW 67
// AddEscort ( ) ;
2333: CALL 2889 0 0
// wait ( 0 0$02 ) ;
2337: LD_INT 70
2339: PPUSH
2340: CALL_OW 67
// for i = 1 to 3 do
2344: LD_ADDR_VAR 0 3
2348: PUSH
2349: DOUBLE
2350: LD_INT 1
2352: DEC
2353: ST_TO_ADDR
2354: LD_INT 3
2356: PUSH
2357: FOR_TO
2358: IFFALSE 2609
// begin vc_chassis := ru_medium_wheeled ;
2360: LD_ADDR_OWVAR 37
2364: PUSH
2365: LD_INT 21
2367: ST_TO_ADDR
// vc_engine := engine_combustion ;
2368: LD_ADDR_OWVAR 39
2372: PUSH
2373: LD_INT 1
2375: ST_TO_ADDR
// vc_control := control_manual ;
2376: LD_ADDR_OWVAR 38
2380: PUSH
2381: LD_INT 1
2383: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
2384: LD_ADDR_OWVAR 40
2388: PUSH
2389: LD_INT 51
2391: ST_TO_ADDR
// vc_fuel_battery := Rand ( 50 , 99 ) ;
2392: LD_ADDR_OWVAR 41
2396: PUSH
2397: LD_INT 50
2399: PPUSH
2400: LD_INT 99
2402: PPUSH
2403: CALL_OW 12
2407: ST_TO_ADDR
// if uc_side <> 6 then
2408: LD_OWVAR 20
2412: PUSH
2413: LD_INT 6
2415: NONEQUAL
2416: IFFALSE 2426
// uc_side := 6 ;
2418: LD_ADDR_OWVAR 20
2422: PUSH
2423: LD_INT 6
2425: ST_TO_ADDR
// veh := CreateVehicle ;
2426: LD_ADDR_VAR 0 4
2430: PUSH
2431: CALL_OW 45
2435: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
2436: LD_VAR 0 4
2440: PPUSH
2441: LD_INT 3
2443: PPUSH
2444: CALL_OW 233
// PlaceUnitArea ( veh , conv_start , false ) ;
2448: LD_VAR 0 4
2452: PPUSH
2453: LD_INT 8
2455: PPUSH
2456: LD_INT 0
2458: PPUSH
2459: CALL_OW 49
// PrepareHuman ( false , Rand ( 1 , 2 ) , skill ) ;
2463: LD_INT 0
2465: PPUSH
2466: LD_INT 1
2468: PPUSH
2469: LD_INT 2
2471: PPUSH
2472: CALL_OW 12
2476: PPUSH
2477: LD_VAR 0 5
2481: PPUSH
2482: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
2486: CALL_OW 44
2490: PPUSH
2491: LD_VAR 0 4
2495: PPUSH
2496: CALL_OW 52
// SetLives ( veh , Rand ( 500 , 1000 ) ) ;
2500: LD_VAR 0 4
2504: PPUSH
2505: LD_INT 500
2507: PPUSH
2508: LD_INT 1000
2510: PPUSH
2511: CALL_OW 12
2515: PPUSH
2516: CALL_OW 234
// SetCargo ( veh , Rand ( 1 , 2 ) , Rand ( 2 , 10 ) * 10 ) ;
2520: LD_VAR 0 4
2524: PPUSH
2525: LD_INT 1
2527: PPUSH
2528: LD_INT 2
2530: PPUSH
2531: CALL_OW 12
2535: PPUSH
2536: LD_INT 2
2538: PPUSH
2539: LD_INT 10
2541: PPUSH
2542: CALL_OW 12
2546: PUSH
2547: LD_INT 10
2549: MUL
2550: PPUSH
2551: CALL_OW 290
// conv_squad := Insert ( conv_squad , 1 , [ veh , 1 ] ) ;
2555: LD_ADDR_EXP 1
2559: PUSH
2560: LD_EXP 1
2564: PPUSH
2565: LD_INT 1
2567: PPUSH
2568: LD_VAR 0 4
2572: PUSH
2573: LD_INT 1
2575: PUSH
2576: EMPTY
2577: LIST
2578: LIST
2579: PPUSH
2580: CALL_OW 2
2584: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
2585: LD_VAR 0 4
2589: PPUSH
2590: LD_INT 120
2592: PPUSH
2593: LD_INT 10
2595: PPUSH
2596: CALL_OW 111
// Wait ( 0 0$02 ) ;
2600: LD_INT 70
2602: PPUSH
2603: CALL_OW 67
// end ;
2607: GO 2357
2609: POP
2610: POP
// if Rand ( 0 , 1 ) = 1 then
2611: LD_INT 0
2613: PPUSH
2614: LD_INT 1
2616: PPUSH
2617: CALL_OW 12
2621: PUSH
2622: LD_INT 1
2624: EQUAL
2625: IFFALSE 2661
// begin vc_chassis := ru_medium_tracked ;
2627: LD_ADDR_OWVAR 37
2631: PUSH
2632: LD_INT 22
2634: ST_TO_ADDR
// vc_engine := engine_combustion ;
2635: LD_ADDR_OWVAR 39
2639: PUSH
2640: LD_INT 1
2642: ST_TO_ADDR
// vc_control := control_manual ;
2643: LD_ADDR_OWVAR 38
2647: PUSH
2648: LD_INT 1
2650: ST_TO_ADDR
// vc_weapon := ru_crane ;
2651: LD_ADDR_OWVAR 40
2655: PUSH
2656: LD_INT 52
2658: ST_TO_ADDR
// end else
2659: GO 2693
// begin vc_chassis := ru_heavy_wheeled ;
2661: LD_ADDR_OWVAR 37
2665: PUSH
2666: LD_INT 23
2668: ST_TO_ADDR
// vc_engine := engine_combustion ;
2669: LD_ADDR_OWVAR 39
2673: PUSH
2674: LD_INT 1
2676: ST_TO_ADDR
// vc_control := control_manual ;
2677: LD_ADDR_OWVAR 38
2681: PUSH
2682: LD_INT 1
2684: ST_TO_ADDR
// vc_weapon := ru_bulldozer ;
2685: LD_ADDR_OWVAR 40
2689: PUSH
2690: LD_INT 53
2692: ST_TO_ADDR
// end ; vc_fuel_battery := Rand ( 50 , 99 ) ;
2693: LD_ADDR_OWVAR 41
2697: PUSH
2698: LD_INT 50
2700: PPUSH
2701: LD_INT 99
2703: PPUSH
2704: CALL_OW 12
2708: ST_TO_ADDR
// if uc_side <> 6 then
2709: LD_OWVAR 20
2713: PUSH
2714: LD_INT 6
2716: NONEQUAL
2717: IFFALSE 2727
// uc_side := 6 ;
2719: LD_ADDR_OWVAR 20
2723: PUSH
2724: LD_INT 6
2726: ST_TO_ADDR
// veh := CreateVehicle ;
2727: LD_ADDR_VAR 0 4
2731: PUSH
2732: CALL_OW 45
2736: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
2737: LD_VAR 0 4
2741: PPUSH
2742: LD_INT 3
2744: PPUSH
2745: CALL_OW 233
// PlaceUnitArea ( veh , conv_start , false ) ;
2749: LD_VAR 0 4
2753: PPUSH
2754: LD_INT 8
2756: PPUSH
2757: LD_INT 0
2759: PPUSH
2760: CALL_OW 49
// PrepareHuman ( false , Rand ( 1 , 2 ) , skill ) ;
2764: LD_INT 0
2766: PPUSH
2767: LD_INT 1
2769: PPUSH
2770: LD_INT 2
2772: PPUSH
2773: CALL_OW 12
2777: PPUSH
2778: LD_VAR 0 5
2782: PPUSH
2783: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
2787: CALL_OW 44
2791: PPUSH
2792: LD_VAR 0 4
2796: PPUSH
2797: CALL_OW 52
// SetLives ( veh , Rand ( 500 , 1000 ) ) ;
2801: LD_VAR 0 4
2805: PPUSH
2806: LD_INT 500
2808: PPUSH
2809: LD_INT 1000
2811: PPUSH
2812: CALL_OW 12
2816: PPUSH
2817: CALL_OW 234
// conv_squad := Insert ( conv_squad , 1 , [ veh , 1 ] ) ;
2821: LD_ADDR_EXP 1
2825: PUSH
2826: LD_EXP 1
2830: PPUSH
2831: LD_INT 1
2833: PPUSH
2834: LD_VAR 0 4
2838: PUSH
2839: LD_INT 1
2841: PUSH
2842: EMPTY
2843: LIST
2844: LIST
2845: PPUSH
2846: CALL_OW 2
2850: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
2851: LD_VAR 0 4
2855: PPUSH
2856: LD_INT 120
2858: PPUSH
2859: LD_INT 10
2861: PPUSH
2862: CALL_OW 111
// Wait ( 0 0$02 ) ;
2866: LD_INT 70
2868: PPUSH
2869: CALL_OW 67
// conv_ready := true ;
2873: LD_ADDR_EXP 19
2877: PUSH
2878: LD_INT 1
2880: ST_TO_ADDR
// end ; end ;
2881: GO 2884
2883: POP
// end ;
2884: LD_VAR 0 2
2888: RET
// export function AddEscort ( ) ; var veh , skill ; begin
2889: LD_INT 0
2891: PPUSH
2892: PPUSH
2893: PPUSH
// skill := [ 5 , 5 , 4 ] [ Difficulty ] ;
2894: LD_ADDR_VAR 0 3
2898: PUSH
2899: LD_INT 5
2901: PUSH
2902: LD_INT 5
2904: PUSH
2905: LD_INT 4
2907: PUSH
2908: EMPTY
2909: LIST
2910: LIST
2911: LIST
2912: PUSH
2913: LD_OWVAR 67
2917: ARRAY
2918: ST_TO_ADDR
// uc_side := 6 ;
2919: LD_ADDR_OWVAR 20
2923: PUSH
2924: LD_INT 6
2926: ST_TO_ADDR
// uc_nation := 3 ;
2927: LD_ADDR_OWVAR 21
2931: PUSH
2932: LD_INT 3
2934: ST_TO_ADDR
// vc_chassis := ru_medium_wheeled ;
2935: LD_ADDR_OWVAR 37
2939: PUSH
2940: LD_INT 21
2942: ST_TO_ADDR
// vc_engine := engine_combustion ;
2943: LD_ADDR_OWVAR 39
2947: PUSH
2948: LD_INT 1
2950: ST_TO_ADDR
// vc_control := control_manual ;
2951: LD_ADDR_OWVAR 38
2955: PUSH
2956: LD_INT 1
2958: ST_TO_ADDR
// vc_weapon := [ ru_gun , ru_heavy_machine_gun ] [ Rand ( 1 , 2 ) ] ;
2959: LD_ADDR_OWVAR 40
2963: PUSH
2964: LD_INT 44
2966: PUSH
2967: LD_INT 42
2969: PUSH
2970: EMPTY
2971: LIST
2972: LIST
2973: PUSH
2974: LD_INT 1
2976: PPUSH
2977: LD_INT 2
2979: PPUSH
2980: CALL_OW 12
2984: ARRAY
2985: ST_TO_ADDR
// vc_fuel_battery := Rand ( 50 , 99 ) ;
2986: LD_ADDR_OWVAR 41
2990: PUSH
2991: LD_INT 50
2993: PPUSH
2994: LD_INT 99
2996: PPUSH
2997: CALL_OW 12
3001: ST_TO_ADDR
// veh := CreateVehicle ;
3002: LD_ADDR_VAR 0 2
3006: PUSH
3007: CALL_OW 45
3011: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3012: LD_VAR 0 2
3016: PPUSH
3017: LD_INT 3
3019: PPUSH
3020: CALL_OW 233
// PlaceUnitArea ( veh , conv_start , false ) ;
3024: LD_VAR 0 2
3028: PPUSH
3029: LD_INT 8
3031: PPUSH
3032: LD_INT 0
3034: PPUSH
3035: CALL_OW 49
// PrepareHuman ( false , 3 , skill ) ;
3039: LD_INT 0
3041: PPUSH
3042: LD_INT 3
3044: PPUSH
3045: LD_VAR 0 3
3049: PPUSH
3050: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
3054: CALL_OW 44
3058: PPUSH
3059: LD_VAR 0 2
3063: PPUSH
3064: CALL_OW 52
// SetLives ( veh , Rand ( 500 , 1000 ) ) ;
3068: LD_VAR 0 2
3072: PPUSH
3073: LD_INT 500
3075: PPUSH
3076: LD_INT 1000
3078: PPUSH
3079: CALL_OW 12
3083: PPUSH
3084: CALL_OW 234
// escort := Insert ( escort , 1 , veh ) ;
3088: LD_ADDR_EXP 2
3092: PUSH
3093: LD_EXP 2
3097: PPUSH
3098: LD_INT 1
3100: PPUSH
3101: LD_VAR 0 2
3105: PPUSH
3106: CALL_OW 2
3110: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
3111: LD_VAR 0 2
3115: PPUSH
3116: LD_INT 120
3118: PPUSH
3119: LD_INT 10
3121: PPUSH
3122: CALL_OW 111
// end ;
3126: LD_VAR 0 1
3130: RET
// every 4 trigger conv_ready and FilterAllUnits ( [ f_side , 6 ] ) do var i , j ;
3131: LD_EXP 19
3135: PUSH
3136: LD_INT 22
3138: PUSH
3139: LD_INT 6
3141: PUSH
3142: EMPTY
3143: LIST
3144: LIST
3145: PPUSH
3146: CALL_OW 69
3150: AND
3151: IFFALSE 3926
3153: GO 3155
3155: DISABLE
3156: LD_INT 0
3158: PPUSH
3159: PPUSH
// begin enable ;
3160: ENABLE
// if conv_squad then
3161: LD_EXP 1
3165: IFFALSE 3436
// for i = conv_squad downto 1 do
3167: LD_ADDR_VAR 0 1
3171: PUSH
3172: DOUBLE
3173: LD_EXP 1
3177: INC
3178: ST_TO_ADDR
3179: LD_INT 1
3181: PUSH
3182: FOR_DOWNTO
3183: IFFALSE 3434
// begin if IsInArea ( conv_squad [ i ] [ 1 ] , conv_end ) then
3185: LD_EXP 1
3189: PUSH
3190: LD_VAR 0 1
3194: ARRAY
3195: PUSH
3196: LD_INT 1
3198: ARRAY
3199: PPUSH
3200: LD_INT 9
3202: PPUSH
3203: CALL_OW 308
3207: IFFALSE 3284
// begin for j in FilterUnitsInArea ( conv_end , [ f_side , 6 ] ) do
3209: LD_ADDR_VAR 0 2
3213: PUSH
3214: LD_INT 9
3216: PPUSH
3217: LD_INT 22
3219: PUSH
3220: LD_INT 6
3222: PUSH
3223: EMPTY
3224: LIST
3225: LIST
3226: PPUSH
3227: CALL_OW 70
3231: PUSH
3232: FOR_IN
3233: IFFALSE 3260
// begin safeCounter := safeCounter + 1 ;
3235: LD_ADDR_EXP 15
3239: PUSH
3240: LD_EXP 15
3244: PUSH
3245: LD_INT 1
3247: PLUS
3248: ST_TO_ADDR
// RemoveUnit ( j ) ;
3249: LD_VAR 0 2
3253: PPUSH
3254: CALL_OW 64
// end ;
3258: GO 3232
3260: POP
3261: POP
// conv_squad := Delete ( conv_squad , i ) ;
3262: LD_ADDR_EXP 1
3266: PUSH
3267: LD_EXP 1
3271: PPUSH
3272: LD_VAR 0 1
3276: PPUSH
3277: CALL_OW 3
3281: ST_TO_ADDR
// break ;
3282: GO 3434
// end ; if IsInArea ( conv_squad [ i ] [ 1 ] , path [ conv_squad [ i ] [ 2 ] ] ) then
3284: LD_EXP 1
3288: PUSH
3289: LD_VAR 0 1
3293: ARRAY
3294: PUSH
3295: LD_INT 1
3297: ARRAY
3298: PPUSH
3299: LD_EXP 6
3303: PUSH
3304: LD_EXP 1
3308: PUSH
3309: LD_VAR 0 1
3313: ARRAY
3314: PUSH
3315: LD_INT 2
3317: ARRAY
3318: ARRAY
3319: PPUSH
3320: CALL_OW 308
3324: IFFALSE 3370
// conv_squad := Replace2 ( conv_squad , i , 2 , conv_squad [ i ] [ 2 ] + 1 ) else
3326: LD_ADDR_EXP 1
3330: PUSH
3331: LD_EXP 1
3335: PPUSH
3336: LD_VAR 0 1
3340: PPUSH
3341: LD_INT 2
3343: PPUSH
3344: LD_EXP 1
3348: PUSH
3349: LD_VAR 0 1
3353: ARRAY
3354: PUSH
3355: LD_INT 2
3357: ARRAY
3358: PUSH
3359: LD_INT 1
3361: PLUS
3362: PPUSH
3363: CALL 10422 0 4
3367: ST_TO_ADDR
3368: GO 3432
// if not HasTask ( conv_squad [ i ] [ 1 ] ) then
3370: LD_EXP 1
3374: PUSH
3375: LD_VAR 0 1
3379: ARRAY
3380: PUSH
3381: LD_INT 1
3383: ARRAY
3384: PPUSH
3385: CALL_OW 314
3389: NOT
3390: IFFALSE 3432
// ComMoveToArea ( conv_squad [ i ] [ 1 ] , path [ conv_squad [ i ] [ 2 ] ] ) ;
3392: LD_EXP 1
3396: PUSH
3397: LD_VAR 0 1
3401: ARRAY
3402: PUSH
3403: LD_INT 1
3405: ARRAY
3406: PPUSH
3407: LD_EXP 6
3411: PUSH
3412: LD_EXP 1
3416: PUSH
3417: LD_VAR 0 1
3421: ARRAY
3422: PUSH
3423: LD_INT 2
3425: ARRAY
3426: ARRAY
3427: PPUSH
3428: CALL_OW 113
// end ;
3432: GO 3182
3434: POP
3435: POP
// if escort then
3436: LD_EXP 2
3440: IFFALSE 3779
// for i = escort downto 1 do
3442: LD_ADDR_VAR 0 1
3446: PUSH
3447: DOUBLE
3448: LD_EXP 2
3452: INC
3453: ST_TO_ADDR
3454: LD_INT 1
3456: PUSH
3457: FOR_DOWNTO
3458: IFFALSE 3777
// begin if IsInArea ( escort [ i ] , conv_end ) then
3460: LD_EXP 2
3464: PUSH
3465: LD_VAR 0 1
3469: ARRAY
3470: PPUSH
3471: LD_INT 9
3473: PPUSH
3474: CALL_OW 308
3478: IFFALSE 3555
// begin for j in FilterUnitsInArea ( conv_end , [ f_side , 6 ] ) do
3480: LD_ADDR_VAR 0 2
3484: PUSH
3485: LD_INT 9
3487: PPUSH
3488: LD_INT 22
3490: PUSH
3491: LD_INT 6
3493: PUSH
3494: EMPTY
3495: LIST
3496: LIST
3497: PPUSH
3498: CALL_OW 70
3502: PUSH
3503: FOR_IN
3504: IFFALSE 3531
// begin safeCounter := safeCounter + 1 ;
3506: LD_ADDR_EXP 15
3510: PUSH
3511: LD_EXP 15
3515: PUSH
3516: LD_INT 1
3518: PLUS
3519: ST_TO_ADDR
// RemoveUnit ( j ) ;
3520: LD_VAR 0 2
3524: PPUSH
3525: CALL_OW 64
// end ;
3529: GO 3503
3531: POP
3532: POP
// escort := Delete ( escort , i ) ;
3533: LD_ADDR_EXP 2
3537: PUSH
3538: LD_EXP 2
3542: PPUSH
3543: LD_VAR 0 1
3547: PPUSH
3548: CALL_OW 3
3552: ST_TO_ADDR
// break ;
3553: GO 3777
// end ; if FindTarget ( escort [ i ] ) and GetDistUnits ( escort [ i ] , FindTarget ( escort [ i ] ) ) < 13 then
3555: LD_EXP 2
3559: PUSH
3560: LD_VAR 0 1
3564: ARRAY
3565: PPUSH
3566: CALL 10679 0 1
3570: PUSH
3571: LD_EXP 2
3575: PUSH
3576: LD_VAR 0 1
3580: ARRAY
3581: PPUSH
3582: LD_EXP 2
3586: PUSH
3587: LD_VAR 0 1
3591: ARRAY
3592: PPUSH
3593: CALL 10679 0 1
3597: PPUSH
3598: CALL_OW 296
3602: PUSH
3603: LD_INT 13
3605: LESS
3606: AND
3607: IFFALSE 3642
// ComAttackUnit ( escort [ i ] , FindTarget ( escort [ i ] ) ) else
3609: LD_EXP 2
3613: PUSH
3614: LD_VAR 0 1
3618: ARRAY
3619: PPUSH
3620: LD_EXP 2
3624: PUSH
3625: LD_VAR 0 1
3629: ARRAY
3630: PPUSH
3631: CALL 10679 0 1
3635: PPUSH
3636: CALL_OW 115
3640: GO 3775
// if conv_squad and GetDistUnitXY ( escort [ i ] , 64 , 117 ) > 35 and not HasTask ( escort [ i ] ) then
3642: LD_EXP 1
3646: PUSH
3647: LD_EXP 2
3651: PUSH
3652: LD_VAR 0 1
3656: ARRAY
3657: PPUSH
3658: LD_INT 64
3660: PPUSH
3661: LD_INT 117
3663: PPUSH
3664: CALL_OW 297
3668: PUSH
3669: LD_INT 35
3671: GREATER
3672: AND
3673: PUSH
3674: LD_EXP 2
3678: PUSH
3679: LD_VAR 0 1
3683: ARRAY
3684: PPUSH
3685: CALL_OW 314
3689: NOT
3690: AND
3691: IFFALSE 3757
// begin if GetDistUnits ( escort [ i ] , conv_squad [ 1 ] [ 1 ] ) > 6 then
3693: LD_EXP 2
3697: PUSH
3698: LD_VAR 0 1
3702: ARRAY
3703: PPUSH
3704: LD_EXP 1
3708: PUSH
3709: LD_INT 1
3711: ARRAY
3712: PUSH
3713: LD_INT 1
3715: ARRAY
3716: PPUSH
3717: CALL_OW 296
3721: PUSH
3722: LD_INT 6
3724: GREATER
3725: IFFALSE 3755
// ComMoveUnit ( escort [ i ] , conv_squad [ 1 ] [ 1 ] ) end else
3727: LD_EXP 2
3731: PUSH
3732: LD_VAR 0 1
3736: ARRAY
3737: PPUSH
3738: LD_EXP 1
3742: PUSH
3743: LD_INT 1
3745: ARRAY
3746: PUSH
3747: LD_INT 1
3749: ARRAY
3750: PPUSH
3751: CALL_OW 112
3755: GO 3775
// ComMoveToArea ( escort [ i ] , conv_end ) ;
3757: LD_EXP 2
3761: PUSH
3762: LD_VAR 0 1
3766: ARRAY
3767: PPUSH
3768: LD_INT 9
3770: PPUSH
3771: CALL_OW 113
// end ;
3775: GO 3457
3777: POP
3778: POP
// if FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) then
3779: LD_INT 22
3781: PUSH
3782: LD_INT 6
3784: PUSH
3785: EMPTY
3786: LIST
3787: LIST
3788: PUSH
3789: LD_INT 21
3791: PUSH
3792: LD_INT 1
3794: PUSH
3795: EMPTY
3796: LIST
3797: LIST
3798: PUSH
3799: EMPTY
3800: LIST
3801: LIST
3802: PPUSH
3803: CALL_OW 69
3807: IFFALSE 3926
// for j in FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) do
3809: LD_ADDR_VAR 0 2
3813: PUSH
3814: LD_INT 22
3816: PUSH
3817: LD_INT 6
3819: PUSH
3820: EMPTY
3821: LIST
3822: LIST
3823: PUSH
3824: LD_INT 21
3826: PUSH
3827: LD_INT 1
3829: PUSH
3830: EMPTY
3831: LIST
3832: LIST
3833: PUSH
3834: EMPTY
3835: LIST
3836: LIST
3837: PPUSH
3838: CALL_OW 69
3842: PUSH
3843: FOR_IN
3844: IFFALSE 3924
// begin if not HasTask ( j ) and not IsInArea ( j , conv_end ) then
3846: LD_VAR 0 2
3850: PPUSH
3851: CALL_OW 314
3855: NOT
3856: PUSH
3857: LD_VAR 0 2
3861: PPUSH
3862: LD_INT 9
3864: PPUSH
3865: CALL_OW 308
3869: NOT
3870: AND
3871: IFFALSE 3885
// ComMoveToArea ( j , conv_end ) ;
3873: LD_VAR 0 2
3877: PPUSH
3878: LD_INT 9
3880: PPUSH
3881: CALL_OW 113
// if IsInArea ( j , conv_end ) then
3885: LD_VAR 0 2
3889: PPUSH
3890: LD_INT 9
3892: PPUSH
3893: CALL_OW 308
3897: IFFALSE 3922
// begin safeCounter := safeCounter + 1 ;
3899: LD_ADDR_EXP 15
3903: PUSH
3904: LD_EXP 15
3908: PUSH
3909: LD_INT 1
3911: PLUS
3912: ST_TO_ADDR
// RemoveUnit ( j ) ;
3913: LD_VAR 0 2
3917: PPUSH
3918: CALL_OW 64
// end ; end ;
3922: GO 3843
3924: POP
3925: POP
// end ;
3926: PPOPN 2
3928: END
// every 0 0$01 trigger UnitFilter ( [ escort , conv_squad ] , [ f_side , 3 ] ) do var i ;
3929: LD_EXP 2
3933: PUSH
3934: LD_EXP 1
3938: PUSH
3939: EMPTY
3940: LIST
3941: LIST
3942: PPUSH
3943: LD_INT 22
3945: PUSH
3946: LD_INT 3
3948: PUSH
3949: EMPTY
3950: LIST
3951: LIST
3952: PPUSH
3953: CALL_OW 72
3957: IFFALSE 4019
3959: GO 3961
3961: DISABLE
3962: LD_INT 0
3964: PPUSH
// begin enable ;
3965: ENABLE
// for i in UnitFilter ( [ escort , conv_squad ] , [ f_side , 3 ] ) do
3966: LD_ADDR_VAR 0 1
3970: PUSH
3971: LD_EXP 2
3975: PUSH
3976: LD_EXP 1
3980: PUSH
3981: EMPTY
3982: LIST
3983: LIST
3984: PPUSH
3985: LD_INT 22
3987: PUSH
3988: LD_INT 3
3990: PUSH
3991: EMPTY
3992: LIST
3993: LIST
3994: PPUSH
3995: CALL_OW 72
3999: PUSH
4000: FOR_IN
4001: IFFALSE 4017
// SetSide ( i , 6 ) ;
4003: LD_VAR 0 1
4007: PPUSH
4008: LD_INT 6
4010: PPUSH
4011: CALL_OW 235
4015: GO 4000
4017: POP
4018: POP
// end ; end_of_file
4019: PPOPN 1
4021: END
// export Collins ; export us_alert , us_retreat , us_patrol , us_count ; export function PrepareAmerican ; var i , un , skill , towers ; begin
4022: LD_INT 0
4024: PPUSH
4025: PPUSH
4026: PPUSH
4027: PPUSH
4028: PPUSH
// uc_side := 1 ;
4029: LD_ADDR_OWVAR 20
4033: PUSH
4034: LD_INT 1
4036: ST_TO_ADDR
// uc_nation := 1 ;
4037: LD_ADDR_OWVAR 21
4041: PUSH
4042: LD_INT 1
4044: ST_TO_ADDR
// us_alert := false ;
4045: LD_ADDR_EXP 21
4049: PUSH
4050: LD_INT 0
4052: ST_TO_ADDR
// us_retreat := false ;
4053: LD_ADDR_EXP 22
4057: PUSH
4058: LD_INT 0
4060: ST_TO_ADDR
// us_patrol := false ;
4061: LD_ADDR_EXP 23
4065: PUSH
4066: LD_INT 0
4068: ST_TO_ADDR
// us_count := 0 ;
4069: LD_ADDR_EXP 24
4073: PUSH
4074: LD_INT 0
4076: ST_TO_ADDR
// skill := [ 5 , 6 , 7 ] [ Difficulty ] ;
4077: LD_ADDR_VAR 0 4
4081: PUSH
4082: LD_INT 5
4084: PUSH
4085: LD_INT 6
4087: PUSH
4088: LD_INT 7
4090: PUSH
4091: EMPTY
4092: LIST
4093: LIST
4094: LIST
4095: PUSH
4096: LD_OWVAR 67
4100: ARRAY
4101: ST_TO_ADDR
// hc_class := 1 ;
4102: LD_ADDR_OWVAR 28
4106: PUSH
4107: LD_INT 1
4109: ST_TO_ADDR
// hc_sex := sex_male ;
4110: LD_ADDR_OWVAR 27
4114: PUSH
4115: LD_INT 1
4117: ST_TO_ADDR
// hc_skills := [ 6 , 3 , 4 , 2 ] ;
4118: LD_ADDR_OWVAR 31
4122: PUSH
4123: LD_INT 6
4125: PUSH
4126: LD_INT 3
4128: PUSH
4129: LD_INT 4
4131: PUSH
4132: LD_INT 2
4134: PUSH
4135: EMPTY
4136: LIST
4137: LIST
4138: LIST
4139: LIST
4140: ST_TO_ADDR
// hc_name := Jack Collins ;
4141: LD_ADDR_OWVAR 26
4145: PUSH
4146: LD_STRING Jack Collins
4148: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
4149: LD_ADDR_OWVAR 29
4153: PUSH
4154: LD_INT 11
4156: PUSH
4157: LD_INT 11
4159: PUSH
4160: EMPTY
4161: LIST
4162: LIST
4163: ST_TO_ADDR
// hc_gallery :=  ;
4164: LD_ADDR_OWVAR 33
4168: PUSH
4169: LD_STRING 
4171: ST_TO_ADDR
// Collins := CreateHuman ;
4172: LD_ADDR_EXP 20
4176: PUSH
4177: CALL_OW 44
4181: ST_TO_ADDR
// PlaceHumanInUnit ( Collins , us_depot ) ;
4182: LD_EXP 20
4186: PPUSH
4187: LD_INT 50
4189: PPUSH
4190: CALL_OW 52
// hc_name :=  ;
4194: LD_ADDR_OWVAR 26
4198: PUSH
4199: LD_STRING 
4201: ST_TO_ADDR
// if Difficulty > 1 then
4202: LD_OWVAR 67
4206: PUSH
4207: LD_INT 1
4209: GREATER
4210: IFFALSE 4264
// begin bc_type := b_bunker ;
4212: LD_ADDR_OWVAR 42
4216: PUSH
4217: LD_INT 32
4219: ST_TO_ADDR
// bc_level := 5 ;
4220: LD_ADDR_OWVAR 43
4224: PUSH
4225: LD_INT 5
4227: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 40 , 33 , 2 ) ;
4228: LD_INT 40
4230: PPUSH
4231: LD_INT 33
4233: PPUSH
4234: LD_INT 2
4236: PPUSH
4237: CALL_OW 47
// if Difficulty > 2 then
4241: LD_OWVAR 67
4245: PUSH
4246: LD_INT 2
4248: GREATER
4249: IFFALSE 4264
// CreateAndPlaceBuildingXYD ( 41 , 42 , 0 ) ;
4251: LD_INT 41
4253: PPUSH
4254: LD_INT 42
4256: PPUSH
4257: LD_INT 0
4259: PPUSH
4260: CALL_OW 47
// end ; PrepareHuman ( false , 2 , skill ) ;
4264: LD_INT 0
4266: PPUSH
4267: LD_INT 2
4269: PPUSH
4270: LD_VAR 0 4
4274: PPUSH
4275: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , us_depot ) ;
4279: CALL_OW 44
4283: PPUSH
4284: LD_INT 50
4286: PPUSH
4287: CALL_OW 52
// PrepareHuman ( false , 3 , skill ) ;
4291: LD_INT 0
4293: PPUSH
4294: LD_INT 3
4296: PPUSH
4297: LD_VAR 0 4
4301: PPUSH
4302: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , us_fac ) ;
4306: CALL_OW 44
4310: PPUSH
4311: LD_INT 56
4313: PPUSH
4314: CALL_OW 52
// PlaceHumanInUnit ( CreateHuman , us_fac ) ;
4318: CALL_OW 44
4322: PPUSH
4323: LD_INT 56
4325: PPUSH
4326: CALL_OW 52
// PrepareHuman ( false , 4 , skill ) ;
4330: LD_INT 0
4332: PPUSH
4333: LD_INT 4
4335: PPUSH
4336: LD_VAR 0 4
4340: PPUSH
4341: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , us_lab ) ;
4345: CALL_OW 44
4349: PPUSH
4350: LD_INT 63
4352: PPUSH
4353: CALL_OW 52
// PrepareHuman ( false , 1 , skill ) ;
4357: LD_INT 0
4359: PPUSH
4360: LD_INT 1
4362: PPUSH
4363: LD_VAR 0 4
4367: PPUSH
4368: CALL_OW 380
// un := CreateHuman ;
4372: LD_ADDR_VAR 0 3
4376: PUSH
4377: CALL_OW 44
4381: ST_TO_ADDR
// SetDir ( un , 4 ) ;
4382: LD_VAR 0 3
4386: PPUSH
4387: LD_INT 4
4389: PPUSH
4390: CALL_OW 233
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) [ 1 ] ) ;
4394: LD_VAR 0 3
4398: PPUSH
4399: LD_INT 22
4401: PUSH
4402: LD_INT 1
4404: PUSH
4405: EMPTY
4406: LIST
4407: LIST
4408: PUSH
4409: LD_INT 30
4411: PUSH
4412: LD_INT 31
4414: PUSH
4415: EMPTY
4416: LIST
4417: LIST
4418: PUSH
4419: EMPTY
4420: LIST
4421: LIST
4422: PPUSH
4423: CALL_OW 69
4427: PUSH
4428: LD_INT 1
4430: ARRAY
4431: PPUSH
4432: CALL_OW 52
// towers := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) ;
4436: LD_ADDR_VAR 0 5
4440: PUSH
4441: LD_INT 22
4443: PUSH
4444: LD_INT 1
4446: PUSH
4447: EMPTY
4448: LIST
4449: LIST
4450: PUSH
4451: LD_INT 30
4453: PUSH
4454: LD_INT 32
4456: PUSH
4457: EMPTY
4458: LIST
4459: LIST
4460: PUSH
4461: EMPTY
4462: LIST
4463: LIST
4464: PPUSH
4465: CALL_OW 69
4469: ST_TO_ADDR
// for i in towers do
4470: LD_ADDR_VAR 0 2
4474: PUSH
4475: LD_VAR 0 5
4479: PUSH
4480: FOR_IN
4481: IFFALSE 4549
// begin PrepareHuman ( false , 1 , skill ) ;
4483: LD_INT 0
4485: PPUSH
4486: LD_INT 1
4488: PPUSH
4489: LD_VAR 0 4
4493: PPUSH
4494: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
4498: CALL_OW 44
4502: PPUSH
4503: LD_VAR 0 2
4507: PPUSH
4508: CALL_OW 52
// PlaceWeaponTurret ( i , [ us_gatling_gun , us_light_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
4512: LD_VAR 0 2
4516: PPUSH
4517: LD_INT 4
4519: PUSH
4520: LD_INT 3
4522: PUSH
4523: LD_INT 5
4525: PUSH
4526: EMPTY
4527: LIST
4528: LIST
4529: LIST
4530: PUSH
4531: LD_INT 1
4533: PPUSH
4534: LD_INT 3
4536: PPUSH
4537: CALL_OW 12
4541: ARRAY
4542: PPUSH
4543: CALL_OW 431
// end ;
4547: GO 4480
4549: POP
4550: POP
// PrepareHuman ( false , 1 , skill ) ;
4551: LD_INT 0
4553: PPUSH
4554: LD_INT 1
4556: PPUSH
4557: LD_VAR 0 4
4561: PPUSH
4562: CALL_OW 380
// us_patrol := CreateHuman ;
4566: LD_ADDR_EXP 23
4570: PUSH
4571: CALL_OW 44
4575: ST_TO_ADDR
// PlaceUnitXY ( us_patrol , 12 , 5 , false ) ;
4576: LD_EXP 23
4580: PPUSH
4581: LD_INT 12
4583: PPUSH
4584: LD_INT 5
4586: PPUSH
4587: LD_INT 0
4589: PPUSH
4590: CALL_OW 48
// end ;
4594: LD_VAR 0 1
4598: RET
// every 0 0$01 trigger us_count >= [ 3 , 4 , 5 ] [ Difficulty ] do
4599: LD_EXP 24
4603: PUSH
4604: LD_INT 3
4606: PUSH
4607: LD_INT 4
4609: PUSH
4610: LD_INT 5
4612: PUSH
4613: EMPTY
4614: LIST
4615: LIST
4616: LIST
4617: PUSH
4618: LD_OWVAR 67
4622: ARRAY
4623: GREATEREQUAL
4624: IFFALSE 4649
4626: GO 4628
4628: DISABLE
// begin Say ( Collins , DPM_C2 ) ;
4629: LD_EXP 20
4633: PPUSH
4634: LD_STRING DPM_C2
4636: PPUSH
4637: CALL_OW 88
// us_retreat := true ;
4641: LD_ADDR_EXP 22
4645: PUSH
4646: LD_INT 1
4648: ST_TO_ADDR
// end ;
4649: END
// every 10 10$00 trigger not us_alert do var R ;
4650: LD_EXP 21
4654: NOT
4655: IFFALSE 4729
4657: GO 4659
4659: DISABLE
4660: LD_INT 0
4662: PPUSH
// begin uc_side := 1 ;
4663: LD_ADDR_OWVAR 20
4667: PUSH
4668: LD_INT 1
4670: ST_TO_ADDR
// uc_nation := 1 ;
4671: LD_ADDR_OWVAR 21
4675: PUSH
4676: LD_INT 1
4678: ST_TO_ADDR
// PrepareHuman ( false , 1 , 0 ) ;
4679: LD_INT 0
4681: PPUSH
4682: LD_INT 1
4684: PPUSH
4685: LD_INT 0
4687: PPUSH
4688: CALL_OW 380
// R := CreateHuman ;
4692: LD_ADDR_VAR 0 1
4696: PUSH
4697: CALL_OW 44
4701: ST_TO_ADDR
// SayRadio ( R , DPM_R1 ) ;
4702: LD_VAR 0 1
4706: PPUSH
4707: LD_STRING DPM_R1
4709: PPUSH
4710: CALL_OW 94
// Wait ( 0 0$03 ) ;
4714: LD_INT 105
4716: PPUSH
4717: CALL_OW 67
// us_retreat := true ;
4721: LD_ADDR_EXP 22
4725: PUSH
4726: LD_INT 1
4728: ST_TO_ADDR
// end ;
4729: PPOPN 1
4731: END
// every 0 0$01 trigger us_alert do var i ;
4732: LD_EXP 21
4736: IFFALSE 4996
4738: GO 4740
4740: DISABLE
4741: LD_INT 0
4743: PPUSH
// begin Say ( Collins , DPM_C1 ) ;
4744: LD_EXP 20
4748: PPUSH
4749: LD_STRING DPM_C1
4751: PPUSH
4752: CALL_OW 88
// if UnitsInside ( us_fac ) then
4756: LD_INT 56
4758: PPUSH
4759: CALL_OW 313
4763: IFFALSE 4818
// for i in UnitsInside ( us_fac ) do
4765: LD_ADDR_VAR 0 1
4769: PUSH
4770: LD_INT 56
4772: PPUSH
4773: CALL_OW 313
4777: PUSH
4778: FOR_IN
4779: IFFALSE 4816
// begin ComExitBuilding ( i ) ;
4781: LD_VAR 0 1
4785: PPUSH
4786: CALL_OW 122
// AddComEnterUnit ( i , us_arm ) ;
4790: LD_VAR 0 1
4794: PPUSH
4795: LD_INT 69
4797: PPUSH
4798: CALL_OW 180
// AddComChangeProfession ( i , 1 ) ;
4802: LD_VAR 0 1
4806: PPUSH
4807: LD_INT 1
4809: PPUSH
4810: CALL_OW 183
// end ;
4814: GO 4778
4816: POP
4817: POP
// ComExitBuilding ( Collins ) ;
4818: LD_EXP 20
4822: PPUSH
4823: CALL_OW 122
// AddComEnterUnit ( Collins , us_arm ) ;
4827: LD_EXP 20
4831: PPUSH
4832: LD_INT 69
4834: PPUSH
4835: CALL_OW 180
// ComExitBuilding ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) [ 1 ] ) ;
4839: LD_INT 22
4841: PUSH
4842: LD_INT 1
4844: PUSH
4845: EMPTY
4846: LIST
4847: LIST
4848: PUSH
4849: LD_INT 25
4851: PUSH
4852: LD_INT 2
4854: PUSH
4855: EMPTY
4856: LIST
4857: LIST
4858: PUSH
4859: EMPTY
4860: LIST
4861: LIST
4862: PPUSH
4863: CALL_OW 69
4867: PUSH
4868: LD_INT 1
4870: ARRAY
4871: PPUSH
4872: CALL_OW 122
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) [ 1 ] , 67 , 52 ) ;
4876: LD_INT 22
4878: PUSH
4879: LD_INT 1
4881: PUSH
4882: EMPTY
4883: LIST
4884: LIST
4885: PUSH
4886: LD_INT 25
4888: PUSH
4889: LD_INT 2
4891: PUSH
4892: EMPTY
4893: LIST
4894: LIST
4895: PUSH
4896: EMPTY
4897: LIST
4898: LIST
4899: PPUSH
4900: CALL_OW 69
4904: PUSH
4905: LD_INT 1
4907: ARRAY
4908: PPUSH
4909: LD_INT 67
4911: PPUSH
4912: LD_INT 52
4914: PPUSH
4915: CALL_OW 171
// ComExitBuilding ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) [ 1 ] ) ;
4919: LD_INT 22
4921: PUSH
4922: LD_INT 1
4924: PUSH
4925: EMPTY
4926: LIST
4927: LIST
4928: PUSH
4929: LD_INT 25
4931: PUSH
4932: LD_INT 4
4934: PUSH
4935: EMPTY
4936: LIST
4937: LIST
4938: PUSH
4939: EMPTY
4940: LIST
4941: LIST
4942: PPUSH
4943: CALL_OW 69
4947: PUSH
4948: LD_INT 1
4950: ARRAY
4951: PPUSH
4952: CALL_OW 122
// AddComEnterUnit ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) [ 1 ] , us_arm ) ;
4956: LD_INT 22
4958: PUSH
4959: LD_INT 1
4961: PUSH
4962: EMPTY
4963: LIST
4964: LIST
4965: PUSH
4966: LD_INT 25
4968: PUSH
4969: LD_INT 4
4971: PUSH
4972: EMPTY
4973: LIST
4974: LIST
4975: PUSH
4976: EMPTY
4977: LIST
4978: LIST
4979: PPUSH
4980: CALL_OW 69
4984: PUSH
4985: LD_INT 1
4987: ARRAY
4988: PPUSH
4989: LD_INT 69
4991: PPUSH
4992: CALL_OW 180
// end ;
4996: PPOPN 1
4998: END
// every 3 3$00 trigger not us_alert and GetSide ( us_fac ) = 1 do
4999: LD_EXP 21
5003: NOT
5004: PUSH
5005: LD_INT 56
5007: PPUSH
5008: CALL_OW 255
5012: PUSH
5013: LD_INT 1
5015: EQUAL
5016: AND
5017: IFFALSE 5060
5019: GO 5021
5021: DISABLE
// begin AddComConstruct ( us_fac , us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun ) ;
5022: LD_INT 56
5024: PPUSH
5025: LD_INT 2
5027: PPUSH
5028: LD_INT 1
5030: PPUSH
5031: LD_INT 1
5033: PPUSH
5034: LD_INT 4
5036: PPUSH
5037: CALL_OW 185
// AddComConstruct ( us_fac , us_medium_tracked , engine_solar , control_manual , us_double_gun ) ;
5041: LD_INT 56
5043: PPUSH
5044: LD_INT 3
5046: PPUSH
5047: LD_INT 2
5049: PPUSH
5050: LD_INT 1
5052: PPUSH
5053: LD_INT 5
5055: PPUSH
5056: CALL_OW 185
// end ;
5060: END
// every 0 0$01 trigger us_patrol do
5061: LD_EXP 23
5065: IFFALSE 5113
5067: GO 5069
5069: DISABLE
// SetPatrol ( us_patrol , [ 12 , 5 , 56 , 4 , 94 , 34 , 92 , 108 ] ) ;
5070: LD_EXP 23
5074: PPUSH
5075: LD_INT 12
5077: PUSH
5078: LD_INT 5
5080: PUSH
5081: LD_INT 56
5083: PUSH
5084: LD_INT 4
5086: PUSH
5087: LD_INT 94
5089: PUSH
5090: LD_INT 34
5092: PUSH
5093: LD_INT 92
5095: PUSH
5096: LD_INT 108
5098: PUSH
5099: EMPTY
5100: LIST
5101: LIST
5102: LIST
5103: LIST
5104: LIST
5105: LIST
5106: LIST
5107: LIST
5108: PPUSH
5109: CALL 5114 0 2
5113: END
// export function SetPatrol ( un , points ) ; var s , i , turn ; begin
5114: LD_INT 0
5116: PPUSH
5117: PPUSH
5118: PPUSH
5119: PPUSH
// s = 1 ;
5120: LD_ADDR_VAR 0 4
5124: PUSH
5125: LD_INT 1
5127: ST_TO_ADDR
// turn := true ;
5128: LD_ADDR_VAR 0 6
5132: PUSH
5133: LD_INT 1
5135: ST_TO_ADDR
// while ( un and not us_alert ) do
5136: LD_VAR 0 1
5140: PUSH
5141: LD_EXP 21
5145: NOT
5146: AND
5147: IFFALSE 5326
// begin wait ( 35 ) ;
5149: LD_INT 35
5151: PPUSH
5152: CALL_OW 67
// if not HasTask ( un ) then
5156: LD_VAR 0 1
5160: PPUSH
5161: CALL_OW 314
5165: NOT
5166: IFFALSE 5285
// begin ComMoveXY ( un , points [ s ] , points [ s + 1 ] ) ;
5168: LD_VAR 0 1
5172: PPUSH
5173: LD_VAR 0 2
5177: PUSH
5178: LD_VAR 0 4
5182: ARRAY
5183: PPUSH
5184: LD_VAR 0 2
5188: PUSH
5189: LD_VAR 0 4
5193: PUSH
5194: LD_INT 1
5196: PLUS
5197: ARRAY
5198: PPUSH
5199: CALL_OW 111
// if s + 2 > points then
5203: LD_VAR 0 4
5207: PUSH
5208: LD_INT 2
5210: PLUS
5211: PUSH
5212: LD_VAR 0 2
5216: GREATER
5217: IFFALSE 5227
// turn := false ;
5219: LD_ADDR_VAR 0 6
5223: PUSH
5224: LD_INT 0
5226: ST_TO_ADDR
// if s - 2 < 1 then
5227: LD_VAR 0 4
5231: PUSH
5232: LD_INT 2
5234: MINUS
5235: PUSH
5236: LD_INT 1
5238: LESS
5239: IFFALSE 5249
// turn := true ;
5241: LD_ADDR_VAR 0 6
5245: PUSH
5246: LD_INT 1
5248: ST_TO_ADDR
// if turn then
5249: LD_VAR 0 6
5253: IFFALSE 5271
// s := s + 2 else
5255: LD_ADDR_VAR 0 4
5259: PUSH
5260: LD_VAR 0 4
5264: PUSH
5265: LD_INT 2
5267: PLUS
5268: ST_TO_ADDR
5269: GO 5285
// s := s - 2 ;
5271: LD_ADDR_VAR 0 4
5275: PUSH
5276: LD_VAR 0 4
5280: PUSH
5281: LD_INT 2
5283: MINUS
5284: ST_TO_ADDR
// end ; if GetLives ( un ) < 1000 or See ( 3 , un ) then
5285: LD_VAR 0 1
5289: PPUSH
5290: CALL_OW 256
5294: PUSH
5295: LD_INT 1000
5297: LESS
5298: PUSH
5299: LD_INT 3
5301: PPUSH
5302: LD_VAR 0 1
5306: PPUSH
5307: CALL_OW 292
5311: OR
5312: IFFALSE 5324
// begin us_alert := true ;
5314: LD_ADDR_EXP 21
5318: PUSH
5319: LD_INT 1
5321: ST_TO_ADDR
// break ;
5322: GO 5326
// end ; end ;
5324: GO 5136
// ComEnterUnit ( un , us_arm ) ;
5326: LD_VAR 0 1
5330: PPUSH
5331: LD_INT 69
5333: PPUSH
5334: CALL_OW 120
// end ;
5338: LD_VAR 0 3
5342: RET
// every 0 0$01 trigger us_retreat do var i , point ;
5343: LD_EXP 22
5347: IFFALSE 5522
5349: GO 5351
5351: DISABLE
5352: LD_INT 0
5354: PPUSH
5355: PPUSH
// begin point := false ;
5356: LD_ADDR_VAR 0 2
5360: PUSH
5361: LD_INT 0
5363: ST_TO_ADDR
// if FilterUnitsInArea ( zone1 , [ f_side , 3 ] ) = 0 then
5364: LD_INT 5
5366: PPUSH
5367: LD_INT 22
5369: PUSH
5370: LD_INT 3
5372: PUSH
5373: EMPTY
5374: LIST
5375: LIST
5376: PPUSH
5377: CALL_OW 70
5381: PUSH
5382: LD_INT 0
5384: EQUAL
5385: IFFALSE 5397
// point := us_ret1 else
5387: LD_ADDR_VAR 0 2
5391: PUSH
5392: LD_INT 3
5394: ST_TO_ADDR
5395: GO 5438
// if FilterUnitsInArea ( zone1 , [ f_side , 3 ] ) = 0 then
5397: LD_INT 5
5399: PPUSH
5400: LD_INT 22
5402: PUSH
5403: LD_INT 3
5405: PUSH
5406: EMPTY
5407: LIST
5408: LIST
5409: PPUSH
5410: CALL_OW 70
5414: PUSH
5415: LD_INT 0
5417: EQUAL
5418: IFFALSE 5430
// point := us_ret2 else
5420: LD_ADDR_VAR 0 2
5424: PUSH
5425: LD_INT 2
5427: ST_TO_ADDR
5428: GO 5438
// point := us_ret3 ;
5430: LD_ADDR_VAR 0 2
5434: PUSH
5435: LD_INT 4
5437: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
5438: LD_ADDR_VAR 0 1
5442: PUSH
5443: LD_INT 22
5445: PUSH
5446: LD_INT 1
5448: PUSH
5449: EMPTY
5450: LIST
5451: LIST
5452: PUSH
5453: LD_INT 21
5455: PUSH
5456: LD_INT 1
5458: PUSH
5459: EMPTY
5460: LIST
5461: LIST
5462: PUSH
5463: EMPTY
5464: LIST
5465: LIST
5466: PPUSH
5467: CALL_OW 69
5471: PUSH
5472: FOR_IN
5473: IFFALSE 5520
// begin if IsInUnit ( i ) then
5475: LD_VAR 0 1
5479: PPUSH
5480: CALL_OW 310
5484: IFFALSE 5504
// begin ComExitBuilding ( i ) ;
5486: LD_VAR 0 1
5490: PPUSH
5491: CALL_OW 122
// ComExitVehicle ( i ) ;
5495: LD_VAR 0 1
5499: PPUSH
5500: CALL_OW 121
// end ; AddComMoveToArea ( i , point ) ;
5504: LD_VAR 0 1
5508: PPUSH
5509: LD_VAR 0 2
5513: PPUSH
5514: CALL_OW 173
// end ;
5518: GO 5472
5520: POP
5521: POP
// end ;
5522: PPOPN 2
5524: END
// every 10 trigger us_retreat and FilterUnitsInArea ( us_ret1 , [ f_side , 1 ] ) do
5525: LD_EXP 22
5529: PUSH
5530: LD_INT 3
5532: PPUSH
5533: LD_INT 22
5535: PUSH
5536: LD_INT 1
5538: PUSH
5539: EMPTY
5540: LIST
5541: LIST
5542: PPUSH
5543: CALL_OW 70
5547: AND
5548: IFFALSE 5594
5550: GO 5552
5552: DISABLE
// begin enable ;
5553: ENABLE
// RemoveUnit ( FilterUnitsInArea ( us_ret1 , [ f_side , 1 ] ) [ 1 ] ) ;
5554: LD_INT 3
5556: PPUSH
5557: LD_INT 22
5559: PUSH
5560: LD_INT 1
5562: PUSH
5563: EMPTY
5564: LIST
5565: LIST
5566: PPUSH
5567: CALL_OW 70
5571: PUSH
5572: LD_INT 1
5574: ARRAY
5575: PPUSH
5576: CALL_OW 64
// if medal1 then
5580: LD_EXP 3
5584: IFFALSE 5594
// medal1 := false ;
5586: LD_ADDR_EXP 3
5590: PUSH
5591: LD_INT 0
5593: ST_TO_ADDR
// end ;
5594: END
// every 10 trigger us_retreat and FilterUnitsInArea ( us_ret2 , [ f_side , 1 ] ) do
5595: LD_EXP 22
5599: PUSH
5600: LD_INT 2
5602: PPUSH
5603: LD_INT 22
5605: PUSH
5606: LD_INT 1
5608: PUSH
5609: EMPTY
5610: LIST
5611: LIST
5612: PPUSH
5613: CALL_OW 70
5617: AND
5618: IFFALSE 5664
5620: GO 5622
5622: DISABLE
// begin enable ;
5623: ENABLE
// RemoveUnit ( FilterUnitsInArea ( us_ret2 , [ f_side , 1 ] ) [ 1 ] ) ;
5624: LD_INT 2
5626: PPUSH
5627: LD_INT 22
5629: PUSH
5630: LD_INT 1
5632: PUSH
5633: EMPTY
5634: LIST
5635: LIST
5636: PPUSH
5637: CALL_OW 70
5641: PUSH
5642: LD_INT 1
5644: ARRAY
5645: PPUSH
5646: CALL_OW 64
// if medal1 then
5650: LD_EXP 3
5654: IFFALSE 5664
// medal1 := false ;
5656: LD_ADDR_EXP 3
5660: PUSH
5661: LD_INT 0
5663: ST_TO_ADDR
// end ;
5664: END
// every 10 trigger us_retreat and FilterUnitsInArea ( us_ret3 , [ f_side , 1 ] ) do
5665: LD_EXP 22
5669: PUSH
5670: LD_INT 4
5672: PPUSH
5673: LD_INT 22
5675: PUSH
5676: LD_INT 1
5678: PUSH
5679: EMPTY
5680: LIST
5681: LIST
5682: PPUSH
5683: CALL_OW 70
5687: AND
5688: IFFALSE 5734
5690: GO 5692
5692: DISABLE
// begin enable ;
5693: ENABLE
// RemoveUnit ( FilterUnitsInArea ( us_ret3 , [ f_side , 1 ] ) [ 1 ] ) ;
5694: LD_INT 4
5696: PPUSH
5697: LD_INT 22
5699: PUSH
5700: LD_INT 1
5702: PUSH
5703: EMPTY
5704: LIST
5705: LIST
5706: PPUSH
5707: CALL_OW 70
5711: PUSH
5712: LD_INT 1
5714: ARRAY
5715: PPUSH
5716: CALL_OW 64
// if medal1 then
5720: LD_EXP 3
5724: IFFALSE 5734
// medal1 := false ;
5726: LD_ADDR_EXP 3
5730: PUSH
5731: LD_INT 0
5733: ST_TO_ADDR
// end ;
5734: END
// every 0 0$03 trigger FilterAllUnits ( [ f_side , 1 ] ) = 0 do
5735: LD_INT 22
5737: PUSH
5738: LD_INT 1
5740: PUSH
5741: EMPTY
5742: LIST
5743: LIST
5744: PPUSH
5745: CALL_OW 69
5749: PUSH
5750: LD_INT 0
5752: EQUAL
5753: IFFALSE 5766
5755: GO 5757
5757: DISABLE
// us_retreat := false ;
5758: LD_ADDR_EXP 22
5762: PUSH
5763: LD_INT 0
5765: ST_TO_ADDR
5766: END
// export function CounterAttack ; var i , j , un , skill ; begin
5767: LD_INT 0
5769: PPUSH
5770: PPUSH
5771: PPUSH
5772: PPUSH
5773: PPUSH
// uc_side := 1 ;
5774: LD_ADDR_OWVAR 20
5778: PUSH
5779: LD_INT 1
5781: ST_TO_ADDR
// uc_nation := 1 ;
5782: LD_ADDR_OWVAR 21
5786: PUSH
5787: LD_INT 1
5789: ST_TO_ADDR
// skill := [ 4 , 5 , 5 ] [ Difficulty ] ;
5790: LD_ADDR_VAR 0 5
5794: PUSH
5795: LD_INT 4
5797: PUSH
5798: LD_INT 5
5800: PUSH
5801: LD_INT 5
5803: PUSH
5804: EMPTY
5805: LIST
5806: LIST
5807: LIST
5808: PUSH
5809: LD_OWVAR 67
5813: ARRAY
5814: ST_TO_ADDR
// for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
5815: LD_ADDR_VAR 0 2
5819: PUSH
5820: DOUBLE
5821: LD_INT 1
5823: DEC
5824: ST_TO_ADDR
5825: LD_INT 4
5827: PUSH
5828: LD_INT 5
5830: PUSH
5831: LD_INT 6
5833: PUSH
5834: EMPTY
5835: LIST
5836: LIST
5837: LIST
5838: PUSH
5839: LD_OWVAR 67
5843: ARRAY
5844: PUSH
5845: FOR_TO
5846: IFFALSE 6062
// begin uc_side := 1 ;
5848: LD_ADDR_OWVAR 20
5852: PUSH
5853: LD_INT 1
5855: ST_TO_ADDR
// uc_nation := 1 ;
5856: LD_ADDR_OWVAR 21
5860: PUSH
5861: LD_INT 1
5863: ST_TO_ADDR
// vc_chassis := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked ] [ Rand ( 1 , 3 ) ] ;
5864: LD_ADDR_OWVAR 37
5868: PUSH
5869: LD_INT 2
5871: PUSH
5872: LD_INT 3
5874: PUSH
5875: LD_INT 4
5877: PUSH
5878: EMPTY
5879: LIST
5880: LIST
5881: LIST
5882: PUSH
5883: LD_INT 1
5885: PPUSH
5886: LD_INT 3
5888: PPUSH
5889: CALL_OW 12
5893: ARRAY
5894: ST_TO_ADDR
// vc_engine := engine_combustion ;
5895: LD_ADDR_OWVAR 39
5899: PUSH
5900: LD_INT 1
5902: ST_TO_ADDR
// vc_control := control_manual ;
5903: LD_ADDR_OWVAR 38
5907: PUSH
5908: LD_INT 1
5910: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_double_gun , us_light_gun ] [ Rand ( 1 , 3 ) ] ;
5911: LD_ADDR_OWVAR 40
5915: PUSH
5916: LD_INT 4
5918: PUSH
5919: LD_INT 5
5921: PUSH
5922: LD_INT 3
5924: PUSH
5925: EMPTY
5926: LIST
5927: LIST
5928: LIST
5929: PUSH
5930: LD_INT 1
5932: PPUSH
5933: LD_INT 3
5935: PPUSH
5936: CALL_OW 12
5940: ARRAY
5941: ST_TO_ADDR
// vc_fuel_battery := Rand ( 88 , 99 ) ;
5942: LD_ADDR_OWVAR 41
5946: PUSH
5947: LD_INT 88
5949: PPUSH
5950: LD_INT 99
5952: PPUSH
5953: CALL_OW 12
5957: ST_TO_ADDR
// un := CreateVehicle ;
5958: LD_ADDR_VAR 0 4
5962: PUSH
5963: CALL_OW 45
5967: ST_TO_ADDR
// PlaceUnitXY ( un , 64 , 117 , false ) ;
5968: LD_VAR 0 4
5972: PPUSH
5973: LD_INT 64
5975: PPUSH
5976: LD_INT 117
5978: PPUSH
5979: LD_INT 0
5981: PPUSH
5982: CALL_OW 48
// PrepareHuman ( false , 3 , skill ) ;
5986: LD_INT 0
5988: PPUSH
5989: LD_INT 3
5991: PPUSH
5992: LD_VAR 0 5
5996: PPUSH
5997: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
6001: CALL_OW 44
6005: PPUSH
6006: LD_VAR 0 4
6010: PPUSH
6011: CALL_OW 52
// us_force := Insert ( us_force , 1 , un ) ;
6015: LD_ADDR_EXP 12
6019: PUSH
6020: LD_EXP 12
6024: PPUSH
6025: LD_INT 1
6027: PPUSH
6028: LD_VAR 0 4
6032: PPUSH
6033: CALL_OW 2
6037: ST_TO_ADDR
// ComMoveXY ( un , 60 , 109 ) ;
6038: LD_VAR 0 4
6042: PPUSH
6043: LD_INT 60
6045: PPUSH
6046: LD_INT 109
6048: PPUSH
6049: CALL_OW 111
// Wait ( 0 0$02 ) ;
6053: LD_INT 70
6055: PPUSH
6056: CALL_OW 67
// end ;
6060: GO 5845
6062: POP
6063: POP
// RemoveSeeing ( 62 , 113 , 3 ) ;
6064: LD_INT 62
6066: PPUSH
6067: LD_INT 113
6069: PPUSH
6070: LD_INT 3
6072: PPUSH
6073: CALL_OW 331
// while ( FilterAllUnits ( [ f_side , 1 ] ) ) do
6077: LD_INT 22
6079: PUSH
6080: LD_INT 1
6082: PUSH
6083: EMPTY
6084: LIST
6085: LIST
6086: PPUSH
6087: CALL_OW 69
6091: IFFALSE 6292
// begin Wait ( 0 0$01 ) ;
6093: LD_INT 35
6095: PPUSH
6096: CALL_OW 67
// for i = 1 to us_force do
6100: LD_ADDR_VAR 0 2
6104: PUSH
6105: DOUBLE
6106: LD_INT 1
6108: DEC
6109: ST_TO_ADDR
6110: LD_EXP 12
6114: PUSH
6115: FOR_TO
6116: IFFALSE 6151
// ComAttackUnit ( us_force [ i ] , FindTarget ( us_force [ i ] ) ) ;
6118: LD_EXP 12
6122: PUSH
6123: LD_VAR 0 2
6127: ARRAY
6128: PPUSH
6129: LD_EXP 12
6133: PUSH
6134: LD_VAR 0 2
6138: ARRAY
6139: PPUSH
6140: CALL 10679 0 1
6144: PPUSH
6145: CALL_OW 115
6149: GO 6115
6151: POP
6152: POP
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 3 ] , [ f_not , [ f_driving ] ] ] ) then
6153: LD_INT 22
6155: PUSH
6156: LD_INT 1
6158: PUSH
6159: EMPTY
6160: LIST
6161: LIST
6162: PUSH
6163: LD_INT 25
6165: PUSH
6166: LD_INT 3
6168: PUSH
6169: EMPTY
6170: LIST
6171: LIST
6172: PUSH
6173: LD_INT 3
6175: PUSH
6176: LD_INT 55
6178: PUSH
6179: EMPTY
6180: LIST
6181: PUSH
6182: EMPTY
6183: LIST
6184: LIST
6185: PUSH
6186: EMPTY
6187: LIST
6188: LIST
6189: LIST
6190: PPUSH
6191: CALL_OW 69
6195: IFFALSE 6290
// for j in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 3 ] , [ f_not , [ f_driving ] ] ] ) do
6197: LD_ADDR_VAR 0 3
6201: PUSH
6202: LD_INT 22
6204: PUSH
6205: LD_INT 1
6207: PUSH
6208: EMPTY
6209: LIST
6210: LIST
6211: PUSH
6212: LD_INT 25
6214: PUSH
6215: LD_INT 3
6217: PUSH
6218: EMPTY
6219: LIST
6220: LIST
6221: PUSH
6222: LD_INT 3
6224: PUSH
6225: LD_INT 55
6227: PUSH
6228: EMPTY
6229: LIST
6230: PUSH
6231: EMPTY
6232: LIST
6233: LIST
6234: PUSH
6235: EMPTY
6236: LIST
6237: LIST
6238: LIST
6239: PPUSH
6240: CALL_OW 69
6244: PUSH
6245: FOR_IN
6246: IFFALSE 6288
// if not IsInArea ( j , conv_end ) then
6248: LD_VAR 0 3
6252: PPUSH
6253: LD_INT 9
6255: PPUSH
6256: CALL_OW 308
6260: NOT
6261: IFFALSE 6277
// ComMoveToArea ( j , conv_end ) else
6263: LD_VAR 0 3
6267: PPUSH
6268: LD_INT 9
6270: PPUSH
6271: CALL_OW 113
6275: GO 6286
// RemoveUnit ( j ) ;
6277: LD_VAR 0 3
6281: PPUSH
6282: CALL_OW 64
6286: GO 6245
6288: POP
6289: POP
// end ;
6290: GO 6077
// end ; end_of_file
6292: LD_VAR 0 1
6296: RET
// export function PrepareArabian ; begin
6297: LD_INT 0
6299: PPUSH
// RobertFarmer ;
6300: CALL 6321 0 0
// PrepareHovercrafts ;
6304: CALL 7318 0 0
// ar_attacks := true ;
6308: LD_ADDR_EXP 10
6312: PUSH
6313: LD_INT 1
6315: ST_TO_ADDR
// end ;
6316: LD_VAR 0 1
6320: RET
// export Farmer ; export function RobertFarmer ; begin
6321: LD_INT 0
6323: PPUSH
// uc_side := 2 ;
6324: LD_ADDR_OWVAR 20
6328: PUSH
6329: LD_INT 2
6331: ST_TO_ADDR
// uc_nation := 2 ;
6332: LD_ADDR_OWVAR 21
6336: PUSH
6337: LD_INT 2
6339: ST_TO_ADDR
// Farmer := NewCharacter ( Farmer ) ;
6340: LD_ADDR_EXP 25
6344: PUSH
6345: LD_STRING Farmer
6347: PPUSH
6348: CALL_OW 25
6352: ST_TO_ADDR
// SayRadio ( Farmer , DPM_F1 ) ;
6353: LD_EXP 25
6357: PPUSH
6358: LD_STRING DPM_F1
6360: PPUSH
6361: CALL_OW 94
// end ;
6365: LD_VAR 0 1
6369: RET
// export function PrepareAttack ( type ) ; var i , un , veh , skill ; begin
6370: LD_INT 0
6372: PPUSH
6373: PPUSH
6374: PPUSH
6375: PPUSH
6376: PPUSH
// uc_side := 2 ;
6377: LD_ADDR_OWVAR 20
6381: PUSH
6382: LD_INT 2
6384: ST_TO_ADDR
// uc_nation := 2 ;
6385: LD_ADDR_OWVAR 21
6389: PUSH
6390: LD_INT 2
6392: ST_TO_ADDR
// skill := [ 4 , 6 , 7 ] [ Difficulty ] ;
6393: LD_ADDR_VAR 0 6
6397: PUSH
6398: LD_INT 4
6400: PUSH
6401: LD_INT 6
6403: PUSH
6404: LD_INT 7
6406: PUSH
6407: EMPTY
6408: LIST
6409: LIST
6410: LIST
6411: PUSH
6412: LD_OWVAR 67
6416: ARRAY
6417: ST_TO_ADDR
// Randomize ;
6418: CALL_OW 10
// case type of 1 :
6422: LD_VAR 0 1
6426: PUSH
6427: LD_INT 1
6429: DOUBLE
6430: EQUAL
6431: IFTRUE 6435
6433: GO 6573
6435: POP
// begin for i = 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
6436: LD_ADDR_VAR 0 3
6440: PUSH
6441: DOUBLE
6442: LD_INT 1
6444: DEC
6445: ST_TO_ADDR
6446: LD_INT 3
6448: PUSH
6449: LD_INT 4
6451: PUSH
6452: LD_INT 5
6454: PUSH
6455: EMPTY
6456: LIST
6457: LIST
6458: LIST
6459: PUSH
6460: LD_OWVAR 67
6464: ARRAY
6465: PUSH
6466: FOR_TO
6467: IFFALSE 6569
// begin uc_side := 2 ;
6469: LD_ADDR_OWVAR 20
6473: PUSH
6474: LD_INT 2
6476: ST_TO_ADDR
// uc_nation := 2 ;
6477: LD_ADDR_OWVAR 21
6481: PUSH
6482: LD_INT 2
6484: ST_TO_ADDR
// PrepareHuman ( false , [ class_soldier , class_soldier , class_mortar ] [ Rand ( 1 , 3 ) ] , skill ) ;
6485: LD_INT 0
6487: PPUSH
6488: LD_INT 1
6490: PUSH
6491: LD_INT 1
6493: PUSH
6494: LD_INT 8
6496: PUSH
6497: EMPTY
6498: LIST
6499: LIST
6500: LIST
6501: PUSH
6502: LD_INT 1
6504: PPUSH
6505: LD_INT 3
6507: PPUSH
6508: CALL_OW 12
6512: ARRAY
6513: PPUSH
6514: LD_VAR 0 6
6518: PPUSH
6519: CALL_OW 380
// un := CreateHuman ;
6523: LD_ADDR_VAR 0 4
6527: PUSH
6528: CALL_OW 44
6532: ST_TO_ADDR
// PlaceUnitArea ( un , ar3 , false ) ;
6533: LD_VAR 0 4
6537: PPUSH
6538: LD_INT 18
6540: PPUSH
6541: LD_INT 0
6543: PPUSH
6544: CALL_OW 49
// ComMoveToArea ( un , spot3 ) ;
6548: LD_VAR 0 4
6552: PPUSH
6553: LD_INT 20
6555: PPUSH
6556: CALL_OW 113
// Wait ( 0 0$01 ) ;
6560: LD_INT 35
6562: PPUSH
6563: CALL_OW 67
// end ;
6567: GO 6466
6569: POP
6570: POP
// end ; 2 :
6571: GO 7313
6573: LD_INT 2
6575: DOUBLE
6576: EQUAL
6577: IFTRUE 6581
6579: GO 6907
6581: POP
// begin for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
6582: LD_ADDR_VAR 0 3
6586: PUSH
6587: DOUBLE
6588: LD_INT 1
6590: DEC
6591: ST_TO_ADDR
6592: LD_INT 4
6594: PUSH
6595: LD_INT 5
6597: PUSH
6598: LD_INT 6
6600: PUSH
6601: EMPTY
6602: LIST
6603: LIST
6604: LIST
6605: PUSH
6606: LD_OWVAR 67
6610: ARRAY
6611: PUSH
6612: FOR_TO
6613: IFFALSE 6692
// begin uc_side := 2 ;
6615: LD_ADDR_OWVAR 20
6619: PUSH
6620: LD_INT 2
6622: ST_TO_ADDR
// uc_nation := 2 ;
6623: LD_ADDR_OWVAR 21
6627: PUSH
6628: LD_INT 2
6630: ST_TO_ADDR
// PrepareHuman ( false , class_soldier , skill ) ;
6631: LD_INT 0
6633: PPUSH
6634: LD_INT 1
6636: PPUSH
6637: LD_VAR 0 6
6641: PPUSH
6642: CALL_OW 380
// un := CreateHuman ;
6646: LD_ADDR_VAR 0 4
6650: PUSH
6651: CALL_OW 44
6655: ST_TO_ADDR
// PlaceUnitArea ( un , ar2 , false ) ;
6656: LD_VAR 0 4
6660: PPUSH
6661: LD_INT 17
6663: PPUSH
6664: LD_INT 0
6666: PPUSH
6667: CALL_OW 49
// ComMoveToArea ( un , spot2 ) ;
6671: LD_VAR 0 4
6675: PPUSH
6676: LD_INT 19
6678: PPUSH
6679: CALL_OW 113
// Wait ( 0 0$01 ) ;
6683: LD_INT 35
6685: PPUSH
6686: CALL_OW 67
// end ;
6690: GO 6612
6692: POP
6693: POP
// for i = 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
6694: LD_ADDR_VAR 0 3
6698: PUSH
6699: DOUBLE
6700: LD_INT 1
6702: DEC
6703: ST_TO_ADDR
6704: LD_INT 2
6706: PUSH
6707: LD_INT 3
6709: PUSH
6710: LD_INT 4
6712: PUSH
6713: EMPTY
6714: LIST
6715: LIST
6716: LIST
6717: PUSH
6718: LD_OWVAR 67
6722: ARRAY
6723: PUSH
6724: FOR_TO
6725: IFFALSE 6903
// begin uc_side := 2 ;
6727: LD_ADDR_OWVAR 20
6731: PUSH
6732: LD_INT 2
6734: ST_TO_ADDR
// uc_nation := 2 ;
6735: LD_ADDR_OWVAR 21
6739: PUSH
6740: LD_INT 2
6742: ST_TO_ADDR
// vc_chassis := [ ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 2 ) ] ;
6743: LD_ADDR_OWVAR 37
6747: PUSH
6748: LD_INT 13
6750: PUSH
6751: LD_INT 14
6753: PUSH
6754: EMPTY
6755: LIST
6756: LIST
6757: PUSH
6758: LD_INT 1
6760: PPUSH
6761: LD_INT 2
6763: PPUSH
6764: CALL_OW 12
6768: ARRAY
6769: ST_TO_ADDR
// vc_engine := engine_combustion ;
6770: LD_ADDR_OWVAR 39
6774: PUSH
6775: LD_INT 1
6777: ST_TO_ADDR
// vc_control := control_manual ;
6778: LD_ADDR_OWVAR 38
6782: PUSH
6783: LD_INT 1
6785: ST_TO_ADDR
// vc_weapon := [ ar_double_machine_gun , ar_light_gun , ar_gun , ar_rocket_launcher , ar_gatling_gun ] [ Rand ( 1 , 5 ) ] ;
6786: LD_ADDR_OWVAR 40
6790: PUSH
6791: LD_INT 24
6793: PUSH
6794: LD_INT 23
6796: PUSH
6797: LD_INT 27
6799: PUSH
6800: LD_INT 28
6802: PUSH
6803: LD_INT 25
6805: PUSH
6806: EMPTY
6807: LIST
6808: LIST
6809: LIST
6810: LIST
6811: LIST
6812: PUSH
6813: LD_INT 1
6815: PPUSH
6816: LD_INT 5
6818: PPUSH
6819: CALL_OW 12
6823: ARRAY
6824: ST_TO_ADDR
// veh := CreateVehicle ;
6825: LD_ADDR_VAR 0 5
6829: PUSH
6830: CALL_OW 45
6834: ST_TO_ADDR
// PlaceUnitArea ( veh , ar2 , false ) ;
6835: LD_VAR 0 5
6839: PPUSH
6840: LD_INT 17
6842: PPUSH
6843: LD_INT 0
6845: PPUSH
6846: CALL_OW 49
// PrepareHuman ( false , 1 , skill ) ;
6850: LD_INT 0
6852: PPUSH
6853: LD_INT 1
6855: PPUSH
6856: LD_VAR 0 6
6860: PPUSH
6861: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
6865: CALL_OW 44
6869: PPUSH
6870: LD_VAR 0 5
6874: PPUSH
6875: CALL_OW 52
// ComMoveXY ( veh , 89 , 40 ) ;
6879: LD_VAR 0 5
6883: PPUSH
6884: LD_INT 89
6886: PPUSH
6887: LD_INT 40
6889: PPUSH
6890: CALL_OW 111
// Wait ( 0 0$02 ) ;
6894: LD_INT 70
6896: PPUSH
6897: CALL_OW 67
// end ;
6901: GO 6724
6903: POP
6904: POP
// end ; 3 :
6905: GO 7313
6907: LD_INT 3
6909: DOUBLE
6910: EQUAL
6911: IFTRUE 6915
6913: GO 7312
6915: POP
// begin for i = 1 to [ 3 , 4 , 5 ] [ Difficulty ] + ( tick div 15 15$00 ) do
6916: LD_ADDR_VAR 0 3
6920: PUSH
6921: DOUBLE
6922: LD_INT 1
6924: DEC
6925: ST_TO_ADDR
6926: LD_INT 3
6928: PUSH
6929: LD_INT 4
6931: PUSH
6932: LD_INT 5
6934: PUSH
6935: EMPTY
6936: LIST
6937: LIST
6938: LIST
6939: PUSH
6940: LD_OWVAR 67
6944: ARRAY
6945: PUSH
6946: LD_OWVAR 1
6950: PUSH
6951: LD_INT 31500
6953: DIV
6954: PLUS
6955: PUSH
6956: FOR_TO
6957: IFFALSE 7087
// begin uc_side := 2 ;
6959: LD_ADDR_OWVAR 20
6963: PUSH
6964: LD_INT 2
6966: ST_TO_ADDR
// uc_nation := 2 ;
6967: LD_ADDR_OWVAR 21
6971: PUSH
6972: LD_INT 2
6974: ST_TO_ADDR
// PrepareHuman ( false , [ class_soldier , class_mortar ] [ Rand ( 1 , 2 ) ] , skill ) ;
6975: LD_INT 0
6977: PPUSH
6978: LD_INT 1
6980: PUSH
6981: LD_INT 8
6983: PUSH
6984: EMPTY
6985: LIST
6986: LIST
6987: PUSH
6988: LD_INT 1
6990: PPUSH
6991: LD_INT 2
6993: PPUSH
6994: CALL_OW 12
6998: ARRAY
6999: PPUSH
7000: LD_VAR 0 6
7004: PPUSH
7005: CALL_OW 380
// un := CreateHuman ;
7009: LD_ADDR_VAR 0 4
7013: PUSH
7014: CALL_OW 44
7018: ST_TO_ADDR
// PlaceUnitArea ( un , ar2 , false ) ;
7019: LD_VAR 0 4
7023: PPUSH
7024: LD_INT 17
7026: PPUSH
7027: LD_INT 0
7029: PPUSH
7030: CALL_OW 49
// ar_force := Replace ( ar_force , ar_force + 1 , veh ) ;
7034: LD_ADDR_EXP 11
7038: PUSH
7039: LD_EXP 11
7043: PPUSH
7044: LD_EXP 11
7048: PUSH
7049: LD_INT 1
7051: PLUS
7052: PPUSH
7053: LD_VAR 0 5
7057: PPUSH
7058: CALL_OW 1
7062: ST_TO_ADDR
// ComMoveXY ( un , 17 , 9 ) ;
7063: LD_VAR 0 4
7067: PPUSH
7068: LD_INT 17
7070: PPUSH
7071: LD_INT 9
7073: PPUSH
7074: CALL_OW 111
// Wait ( 0 0$01 ) ;
7078: LD_INT 35
7080: PPUSH
7081: CALL_OW 67
// end ;
7085: GO 6956
7087: POP
7088: POP
// for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
7089: LD_ADDR_VAR 0 3
7093: PUSH
7094: DOUBLE
7095: LD_INT 1
7097: DEC
7098: ST_TO_ADDR
7099: LD_INT 4
7101: PUSH
7102: LD_INT 5
7104: PUSH
7105: LD_INT 6
7107: PUSH
7108: EMPTY
7109: LIST
7110: LIST
7111: LIST
7112: PUSH
7113: LD_OWVAR 67
7117: ARRAY
7118: PUSH
7119: FOR_TO
7120: IFFALSE 7308
// begin uc_side := 2 ;
7122: LD_ADDR_OWVAR 20
7126: PUSH
7127: LD_INT 2
7129: ST_TO_ADDR
// uc_nation := 2 ;
7130: LD_ADDR_OWVAR 21
7134: PUSH
7135: LD_INT 2
7137: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
7138: LD_ADDR_OWVAR 37
7142: PUSH
7143: LD_INT 14
7145: ST_TO_ADDR
// vc_engine := engine_combustion ;
7146: LD_ADDR_OWVAR 39
7150: PUSH
7151: LD_INT 1
7153: ST_TO_ADDR
// vc_control := control_manual ;
7154: LD_ADDR_OWVAR 38
7158: PUSH
7159: LD_INT 1
7161: ST_TO_ADDR
// vc_weapon := [ ar_gatling_gun , ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_mortar ] [ Rand ( 1 , 5 ) ] ;
7162: LD_ADDR_OWVAR 40
7166: PUSH
7167: LD_INT 25
7169: PUSH
7170: LD_INT 27
7172: PUSH
7173: LD_INT 28
7175: PUSH
7176: LD_INT 26
7178: PUSH
7179: LD_INT 92
7181: PUSH
7182: EMPTY
7183: LIST
7184: LIST
7185: LIST
7186: LIST
7187: LIST
7188: PUSH
7189: LD_INT 1
7191: PPUSH
7192: LD_INT 5
7194: PPUSH
7195: CALL_OW 12
7199: ARRAY
7200: ST_TO_ADDR
// veh := CreateVehicle ;
7201: LD_ADDR_VAR 0 5
7205: PUSH
7206: CALL_OW 45
7210: ST_TO_ADDR
// PlaceUnitArea ( veh , ar1 , false ) ;
7211: LD_VAR 0 5
7215: PPUSH
7216: LD_INT 16
7218: PPUSH
7219: LD_INT 0
7221: PPUSH
7222: CALL_OW 49
// PrepareHuman ( false , 3 , skill ) ;
7226: LD_INT 0
7228: PPUSH
7229: LD_INT 3
7231: PPUSH
7232: LD_VAR 0 6
7236: PPUSH
7237: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
7241: CALL_OW 44
7245: PPUSH
7246: LD_VAR 0 5
7250: PPUSH
7251: CALL_OW 52
// ar_force := Replace ( ar_force , ar_force + 1 , veh ) ;
7255: LD_ADDR_EXP 11
7259: PUSH
7260: LD_EXP 11
7264: PPUSH
7265: LD_EXP 11
7269: PUSH
7270: LD_INT 1
7272: PLUS
7273: PPUSH
7274: LD_VAR 0 5
7278: PPUSH
7279: CALL_OW 1
7283: ST_TO_ADDR
// ComMoveXY ( veh , 125 , 31 ) ;
7284: LD_VAR 0 5
7288: PPUSH
7289: LD_INT 125
7291: PPUSH
7292: LD_INT 31
7294: PPUSH
7295: CALL_OW 111
// Wait ( 0 0$02 ) ;
7299: LD_INT 70
7301: PPUSH
7302: CALL_OW 67
// end ;
7306: GO 7119
7308: POP
7309: POP
// end ; end ;
7310: GO 7313
7312: POP
// end ;
7313: LD_VAR 0 2
7317: RET
// export function PrepareHovercrafts ; var i , un , areas , skill ; begin
7318: LD_INT 0
7320: PPUSH
7321: PPUSH
7322: PPUSH
7323: PPUSH
7324: PPUSH
// areas := [ river1 , river2 ] ;
7325: LD_ADDR_VAR 0 4
7329: PUSH
7330: LD_INT 14
7332: PUSH
7333: LD_INT 15
7335: PUSH
7336: EMPTY
7337: LIST
7338: LIST
7339: ST_TO_ADDR
// skill := [ 5 , 6 , 7 ] [ Difficulty ] ;
7340: LD_ADDR_VAR 0 5
7344: PUSH
7345: LD_INT 5
7347: PUSH
7348: LD_INT 6
7350: PUSH
7351: LD_INT 7
7353: PUSH
7354: EMPTY
7355: LIST
7356: LIST
7357: LIST
7358: PUSH
7359: LD_OWVAR 67
7363: ARRAY
7364: ST_TO_ADDR
// uc_side := 2 ;
7365: LD_ADDR_OWVAR 20
7369: PUSH
7370: LD_INT 2
7372: ST_TO_ADDR
// uc_nation := 2 ;
7373: LD_ADDR_OWVAR 21
7377: PUSH
7378: LD_INT 2
7380: ST_TO_ADDR
// hc_name :=  ;
7381: LD_ADDR_OWVAR 26
7385: PUSH
7386: LD_STRING 
7388: ST_TO_ADDR
// hc_gallery :=  ;
7389: LD_ADDR_OWVAR 33
7393: PUSH
7394: LD_STRING 
7396: ST_TO_ADDR
// for i = 1 to [ 1 , 2 , 2 ] [ Difficulty ] do
7397: LD_ADDR_VAR 0 2
7401: PUSH
7402: DOUBLE
7403: LD_INT 1
7405: DEC
7406: ST_TO_ADDR
7407: LD_INT 1
7409: PUSH
7410: LD_INT 2
7412: PUSH
7413: LD_INT 2
7415: PUSH
7416: EMPTY
7417: LIST
7418: LIST
7419: LIST
7420: PUSH
7421: LD_OWVAR 67
7425: ARRAY
7426: PUSH
7427: FOR_TO
7428: IFFALSE 7580
// begin uc_side := 2 ;
7430: LD_ADDR_OWVAR 20
7434: PUSH
7435: LD_INT 2
7437: ST_TO_ADDR
// uc_nation := 2 ;
7438: LD_ADDR_OWVAR 21
7442: PUSH
7443: LD_INT 2
7445: ST_TO_ADDR
// vc_chassis := ar_hovercraft ;
7446: LD_ADDR_OWVAR 37
7450: PUSH
7451: LD_INT 11
7453: ST_TO_ADDR
// vc_engine := engine_solar ;
7454: LD_ADDR_OWVAR 39
7458: PUSH
7459: LD_INT 2
7461: ST_TO_ADDR
// vc_control := control_manual ;
7462: LD_ADDR_OWVAR 38
7466: PUSH
7467: LD_INT 1
7469: ST_TO_ADDR
// vc_weapon := ar_double_machine_gun ;
7470: LD_ADDR_OWVAR 40
7474: PUSH
7475: LD_INT 24
7477: ST_TO_ADDR
// vc_fuel_battery := 100 ;
7478: LD_ADDR_OWVAR 41
7482: PUSH
7483: LD_INT 100
7485: ST_TO_ADDR
// un := CreateVehicle ;
7486: LD_ADDR_VAR 0 3
7490: PUSH
7491: CALL_OW 45
7495: ST_TO_ADDR
// PlaceUnitXYR ( un , 121 , 69 , 4 , false ) ;
7496: LD_VAR 0 3
7500: PPUSH
7501: LD_INT 121
7503: PPUSH
7504: LD_INT 69
7506: PPUSH
7507: LD_INT 4
7509: PPUSH
7510: LD_INT 0
7512: PPUSH
7513: CALL_OW 50
// PrepareHuman ( false , 3 , skill ) ;
7517: LD_INT 0
7519: PPUSH
7520: LD_INT 3
7522: PPUSH
7523: LD_VAR 0 5
7527: PPUSH
7528: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
7532: CALL_OW 44
7536: PPUSH
7537: LD_VAR 0 3
7541: PPUSH
7542: CALL_OW 52
// riv := Insert ( riv , 1 , [ un , i ] ) ;
7546: LD_ADDR_EXP 9
7550: PUSH
7551: LD_EXP 9
7555: PPUSH
7556: LD_INT 1
7558: PPUSH
7559: LD_VAR 0 3
7563: PUSH
7564: LD_VAR 0 2
7568: PUSH
7569: EMPTY
7570: LIST
7571: LIST
7572: PPUSH
7573: CALL_OW 2
7577: ST_TO_ADDR
// end ;
7578: GO 7427
7580: POP
7581: POP
// end ;
7582: LD_VAR 0 1
7586: RET
// every 0 0$01 trigger riv do var i , c ;
7587: LD_EXP 9
7591: IFFALSE 8026
7593: GO 7595
7595: DISABLE
7596: LD_INT 0
7598: PPUSH
7599: PPUSH
// begin enable ;
7600: ENABLE
// for i = riv downto 1 do
7601: LD_ADDR_VAR 0 1
7605: PUSH
7606: DOUBLE
7607: LD_EXP 9
7611: INC
7612: ST_TO_ADDR
7613: LD_INT 1
7615: PUSH
7616: FOR_DOWNTO
7617: IFFALSE 8024
// begin if not riv [ i ] [ 1 ] then
7619: LD_EXP 9
7623: PUSH
7624: LD_VAR 0 1
7628: ARRAY
7629: PUSH
7630: LD_INT 1
7632: ARRAY
7633: NOT
7634: IFFALSE 7656
// begin riv := Delete ( riv , 1 ) ;
7636: LD_ADDR_EXP 9
7640: PUSH
7641: LD_EXP 9
7645: PPUSH
7646: LD_INT 1
7648: PPUSH
7649: CALL_OW 3
7653: ST_TO_ADDR
// break ;
7654: GO 8024
// end ; if not HasTask ( riv [ i ] [ 1 ] ) then
7656: LD_EXP 9
7660: PUSH
7661: LD_VAR 0 1
7665: ARRAY
7666: PUSH
7667: LD_INT 1
7669: ARRAY
7670: PPUSH
7671: CALL_OW 314
7675: NOT
7676: IFFALSE 7744
// begin if riv [ i ] [ 2 ] = 1 then
7678: LD_EXP 9
7682: PUSH
7683: LD_VAR 0 1
7687: ARRAY
7688: PUSH
7689: LD_INT 2
7691: ARRAY
7692: PUSH
7693: LD_INT 1
7695: EQUAL
7696: IFFALSE 7708
// c := 2 else
7698: LD_ADDR_VAR 0 2
7702: PUSH
7703: LD_INT 2
7705: ST_TO_ADDR
7706: GO 7716
// c := 1 ;
7708: LD_ADDR_VAR 0 2
7712: PUSH
7713: LD_INT 1
7715: ST_TO_ADDR
// riv := Replace2 ( riv , i , 2 , c ) ;
7716: LD_ADDR_EXP 9
7720: PUSH
7721: LD_EXP 9
7725: PPUSH
7726: LD_VAR 0 1
7730: PPUSH
7731: LD_INT 2
7733: PPUSH
7734: LD_VAR 0 2
7738: PPUSH
7739: CALL 10422 0 4
7743: ST_TO_ADDR
// end ; if not IsInArea ( riv [ i ] [ 1 ] , [ river1 , river2 ] [ riv [ i ] [ 2 ] ] ) then
7744: LD_EXP 9
7748: PUSH
7749: LD_VAR 0 1
7753: ARRAY
7754: PUSH
7755: LD_INT 1
7757: ARRAY
7758: PPUSH
7759: LD_INT 14
7761: PUSH
7762: LD_INT 15
7764: PUSH
7765: EMPTY
7766: LIST
7767: LIST
7768: PUSH
7769: LD_EXP 9
7773: PUSH
7774: LD_VAR 0 1
7778: ARRAY
7779: PUSH
7780: LD_INT 2
7782: ARRAY
7783: ARRAY
7784: PPUSH
7785: CALL_OW 308
7789: NOT
7790: IFFALSE 8022
// begin if GetFuel ( riv [ i ] [ 1 ] ) < 50 then
7792: LD_EXP 9
7796: PUSH
7797: LD_VAR 0 1
7801: ARRAY
7802: PUSH
7803: LD_INT 1
7805: ARRAY
7806: PPUSH
7807: CALL_OW 261
7811: PUSH
7812: LD_INT 50
7814: LESS
7815: IFFALSE 7839
// SetFuel ( riv [ i ] [ 1 ] , 67 ) ;
7817: LD_EXP 9
7821: PUSH
7822: LD_VAR 0 1
7826: ARRAY
7827: PUSH
7828: LD_INT 1
7830: ARRAY
7831: PPUSH
7832: LD_INT 67
7834: PPUSH
7835: CALL_OW 240
// if GetDistUnits ( riv [ i ] [ 1 ] , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 3 ] ) , riv [ i ] [ 1 ] ) ) < 9 then
7839: LD_EXP 9
7843: PUSH
7844: LD_VAR 0 1
7848: ARRAY
7849: PUSH
7850: LD_INT 1
7852: ARRAY
7853: PPUSH
7854: LD_INT 22
7856: PUSH
7857: LD_INT 3
7859: PUSH
7860: EMPTY
7861: LIST
7862: LIST
7863: PPUSH
7864: CALL_OW 69
7868: PPUSH
7869: LD_EXP 9
7873: PUSH
7874: LD_VAR 0 1
7878: ARRAY
7879: PUSH
7880: LD_INT 1
7882: ARRAY
7883: PPUSH
7884: CALL_OW 74
7888: PPUSH
7889: CALL_OW 296
7893: PUSH
7894: LD_INT 9
7896: LESS
7897: IFFALSE 7955
// ComAttackUnit ( riv [ i ] [ 1 ] , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 3 ] ) , riv [ i ] [ 1 ] ) ) else
7899: LD_EXP 9
7903: PUSH
7904: LD_VAR 0 1
7908: ARRAY
7909: PUSH
7910: LD_INT 1
7912: ARRAY
7913: PPUSH
7914: LD_INT 22
7916: PUSH
7917: LD_INT 3
7919: PUSH
7920: EMPTY
7921: LIST
7922: LIST
7923: PPUSH
7924: CALL_OW 69
7928: PPUSH
7929: LD_EXP 9
7933: PUSH
7934: LD_VAR 0 1
7938: ARRAY
7939: PUSH
7940: LD_INT 1
7942: ARRAY
7943: PPUSH
7944: CALL_OW 74
7948: PPUSH
7949: CALL_OW 115
7953: GO 8022
// begin ComMoveToArea ( riv [ i ] [ 1 ] , [ river1 , river2 ] [ riv [ i ] [ 2 ] ] ) ;
7955: LD_EXP 9
7959: PUSH
7960: LD_VAR 0 1
7964: ARRAY
7965: PUSH
7966: LD_INT 1
7968: ARRAY
7969: PPUSH
7970: LD_INT 14
7972: PUSH
7973: LD_INT 15
7975: PUSH
7976: EMPTY
7977: LIST
7978: LIST
7979: PUSH
7980: LD_EXP 9
7984: PUSH
7985: LD_VAR 0 1
7989: ARRAY
7990: PUSH
7991: LD_INT 2
7993: ARRAY
7994: ARRAY
7995: PPUSH
7996: CALL_OW 113
// AddComWait ( riv [ i ] [ 1 ] , 0 0$10 ) ;
8000: LD_EXP 9
8004: PUSH
8005: LD_VAR 0 1
8009: ARRAY
8010: PUSH
8011: LD_INT 1
8013: ARRAY
8014: PPUSH
8015: LD_INT 350
8017: PPUSH
8018: CALL_OW 202
// end ; end ; end ;
8022: GO 7616
8024: POP
8025: POP
// end ;
8026: PPOPN 2
8028: END
// every 10 10$00 trigger convoy_start do var i , un ;
8029: LD_EXP 7
8033: IFFALSE 8154
8035: GO 8037
8037: DISABLE
8038: LD_INT 0
8040: PPUSH
8041: PPUSH
// begin enable ;
8042: ENABLE
// for i = 1 to 2 do
8043: LD_ADDR_VAR 0 1
8047: PUSH
8048: DOUBLE
8049: LD_INT 1
8051: DEC
8052: ST_TO_ADDR
8053: LD_INT 2
8055: PUSH
8056: FOR_TO
8057: IFFALSE 8152
// begin uc_side := 2 ;
8059: LD_ADDR_OWVAR 20
8063: PUSH
8064: LD_INT 2
8066: ST_TO_ADDR
// uc_nation := 2 ;
8067: LD_ADDR_OWVAR 21
8071: PUSH
8072: LD_INT 2
8074: ST_TO_ADDR
// PrepareHuman ( false , 1 , 4 ) ;
8075: LD_INT 0
8077: PPUSH
8078: LD_INT 1
8080: PPUSH
8081: LD_INT 4
8083: PPUSH
8084: CALL_OW 380
// un := CreateHuman ;
8088: LD_ADDR_VAR 0 2
8092: PUSH
8093: CALL_OW 44
8097: ST_TO_ADDR
// PlaceUnitXY ( un , 10 , 2 , false ) ;
8098: LD_VAR 0 2
8102: PPUSH
8103: LD_INT 10
8105: PPUSH
8106: LD_INT 2
8108: PPUSH
8109: LD_INT 0
8111: PPUSH
8112: CALL_OW 48
// ComMoveXY ( un , 24 , 36 ) ;
8116: LD_VAR 0 2
8120: PPUSH
8121: LD_INT 24
8123: PPUSH
8124: LD_INT 36
8126: PPUSH
8127: CALL_OW 111
// AddComMoveToArea ( un , conv_end ) ;
8131: LD_VAR 0 2
8135: PPUSH
8136: LD_INT 9
8138: PPUSH
8139: CALL_OW 173
// Wait ( 0 0$02 ) ;
8143: LD_INT 70
8145: PPUSH
8146: CALL_OW 67
// end ;
8150: GO 8056
8152: POP
8153: POP
// end ;
8154: PPOPN 2
8156: END
// every 0 0$01 trigger FilterAllUnits ( [ f_side , 2 ] ) do var i , rest ;
8157: LD_INT 22
8159: PUSH
8160: LD_INT 2
8162: PUSH
8163: EMPTY
8164: LIST
8165: LIST
8166: PPUSH
8167: CALL_OW 69
8171: IFFALSE 8483
8173: GO 8175
8175: DISABLE
8176: LD_INT 0
8178: PPUSH
8179: PPUSH
// begin enable ;
8180: ENABLE
// rest := FilterAllUnits ( [ f_side , 2 ] ) diff ar_force ;
8181: LD_ADDR_VAR 0 2
8185: PUSH
8186: LD_INT 22
8188: PUSH
8189: LD_INT 2
8191: PUSH
8192: EMPTY
8193: LIST
8194: LIST
8195: PPUSH
8196: CALL_OW 69
8200: PUSH
8201: LD_EXP 11
8205: DIFF
8206: ST_TO_ADDR
// if rest then
8207: LD_VAR 0 2
8211: IFFALSE 8283
// for i in rest do
8213: LD_ADDR_VAR 0 1
8217: PUSH
8218: LD_VAR 0 2
8222: PUSH
8223: FOR_IN
8224: IFFALSE 8281
// if GetClass ( i ) = 3 then
8226: LD_VAR 0 1
8230: PPUSH
8231: CALL_OW 257
8235: PUSH
8236: LD_INT 3
8238: EQUAL
8239: IFFALSE 8279
// begin if not IsInArea ( i , ar2 ) then
8241: LD_VAR 0 1
8245: PPUSH
8246: LD_INT 17
8248: PPUSH
8249: CALL_OW 308
8253: NOT
8254: IFFALSE 8270
// ComMoveToArea ( i , ar2 ) else
8256: LD_VAR 0 1
8260: PPUSH
8261: LD_INT 17
8263: PPUSH
8264: CALL_OW 113
8268: GO 8279
// RemoveUnit ( i ) ;
8270: LD_VAR 0 1
8274: PPUSH
8275: CALL_OW 64
// end ;
8279: GO 8223
8281: POP
8282: POP
// if ar_force then
8283: LD_EXP 11
8287: IFFALSE 8483
// begin if ar_force > 15 then
8289: LD_EXP 11
8293: PUSH
8294: LD_INT 15
8296: GREATER
8297: IFFALSE 8314
// ComAgressiveMove ( ar_force , 58 , 51 ) ;
8299: LD_EXP 11
8303: PPUSH
8304: LD_INT 58
8306: PPUSH
8307: LD_INT 51
8309: PPUSH
8310: CALL_OW 114
// for i in ar_force do
8314: LD_ADDR_VAR 0 1
8318: PUSH
8319: LD_EXP 11
8323: PUSH
8324: FOR_IN
8325: IFFALSE 8481
// begin if GetClass ( i ) = class_soldier then
8327: LD_VAR 0 1
8331: PPUSH
8332: CALL_OW 257
8336: PUSH
8337: LD_INT 1
8339: EQUAL
8340: IFFALSE 8432
// if FindTarget ( i ) in FilterAllUnits ( [ f_type , unit_building ] ) then
8342: LD_VAR 0 1
8346: PPUSH
8347: CALL 10679 0 1
8351: PUSH
8352: LD_INT 21
8354: PUSH
8355: LD_INT 3
8357: PUSH
8358: EMPTY
8359: LIST
8360: LIST
8361: PPUSH
8362: CALL_OW 69
8366: IN
8367: IFFALSE 8413
// ComPlaceDelayedCharge ( i , GetX ( FindTarget ( i ) ) , GetY ( FindTarget ( i ) ) , 0 ) else
8369: LD_VAR 0 1
8373: PPUSH
8374: LD_VAR 0 1
8378: PPUSH
8379: CALL 10679 0 1
8383: PPUSH
8384: CALL_OW 250
8388: PPUSH
8389: LD_VAR 0 1
8393: PPUSH
8394: CALL 10679 0 1
8398: PPUSH
8399: CALL_OW 251
8403: PPUSH
8404: LD_INT 0
8406: PPUSH
8407: CALL_OW 132
8411: GO 8432
// ComAttackUnit ( i , FindTarget ( i ) ) ;
8413: LD_VAR 0 1
8417: PPUSH
8418: LD_VAR 0 1
8422: PPUSH
8423: CALL 10679 0 1
8427: PPUSH
8428: CALL_OW 115
// if not GetClass ( i ) = 1 and not HasTask ( i ) then
8432: LD_VAR 0 1
8436: PPUSH
8437: CALL_OW 257
8441: PUSH
8442: LD_INT 1
8444: EQUAL
8445: NOT
8446: PUSH
8447: LD_VAR 0 1
8451: PPUSH
8452: CALL_OW 314
8456: NOT
8457: AND
8458: IFFALSE 8479
// ComAttackUnit ( i , FindTarget ( i ) ) ;
8460: LD_VAR 0 1
8464: PPUSH
8465: LD_VAR 0 1
8469: PPUSH
8470: CALL 10679 0 1
8474: PPUSH
8475: CALL_OW 115
// end ;
8479: GO 8324
8481: POP
8482: POP
// end ; end ;
8483: PPOPN 2
8485: END
// every 0 0$01 trigger FilterUnitsInArea ( conv_end , [ f_side , 2 ] ) do
8486: LD_INT 9
8488: PPUSH
8489: LD_INT 22
8491: PUSH
8492: LD_INT 2
8494: PUSH
8495: EMPTY
8496: LIST
8497: LIST
8498: PPUSH
8499: CALL_OW 70
8503: IFFALSE 8516
8505: GO 8507
8507: DISABLE
// medal2 := false ; end_of_file
8508: LD_ADDR_EXP 4
8512: PUSH
8513: LD_INT 0
8515: ST_TO_ADDR
8516: END
// export function Action ; begin
8517: LD_INT 0
8519: PPUSH
// case Query ( info ) of 1 :
8520: LD_STRING info
8522: PPUSH
8523: CALL_OW 97
8527: PUSH
8528: LD_INT 1
8530: DOUBLE
8531: EQUAL
8532: IFTRUE 8536
8534: GO 8539
8536: POP
// ; end ;
8537: GO 8540
8539: POP
// ChangeMissionObjectives ( PM_1 ) ;
8540: LD_STRING PM_1
8542: PPUSH
8543: CALL_OW 337
// SaveForQuickRestart ;
8547: CALL_OW 22
// end ;
8551: LD_VAR 0 1
8555: RET
// every 0 0$01 trigger GetSide ( us_depot ) = 3 do
8556: LD_INT 50
8558: PPUSH
8559: CALL_OW 255
8563: PUSH
8564: LD_INT 3
8566: EQUAL
8567: IFFALSE 8848
8569: GO 8571
8571: DISABLE
// begin Say ( Stolypin , DPM_S1 ) ;
8572: LD_EXP 16
8576: PPUSH
8577: LD_STRING DPM_S1
8579: PPUSH
8580: CALL_OW 88
// SayRadio ( Popov , DPM_P1 ) ;
8584: LD_EXP 17
8588: PPUSH
8589: LD_STRING DPM_P1
8591: PPUSH
8592: CALL_OW 94
// Say ( Stolypin , DPM_S2 ) ;
8596: LD_EXP 16
8600: PPUSH
8601: LD_STRING DPM_S2
8603: PPUSH
8604: CALL_OW 88
// SaveForQuickRestart ;
8608: CALL_OW 22
// ChangeMissionObjectives ( PM_2 ) ;
8612: LD_STRING PM_2
8614: PPUSH
8615: CALL_OW 337
// Wait ( 2 2$30 ) ;
8619: LD_INT 5250
8621: PPUSH
8622: CALL_OW 67
// CenterOnXY ( 117 , 4 ) ;
8626: LD_INT 117
8628: PPUSH
8629: LD_INT 4
8631: PPUSH
8632: CALL_OW 84
// Convoy ( 1 ) ;
8636: LD_INT 1
8638: PPUSH
8639: CALL 898 0 1
// Wait ( 0 0$30 ) ;
8643: LD_INT 1050
8645: PPUSH
8646: CALL_OW 67
// Convoy ( 2 ) ;
8650: LD_INT 2
8652: PPUSH
8653: CALL 898 0 1
// Wait ( 1 1$30 ) ;
8657: LD_INT 3150
8659: PPUSH
8660: CALL_OW 67
// Convoy ( 3 ) ;
8664: LD_INT 3
8666: PPUSH
8667: CALL 898 0 1
// Wait ( 4 4$00 ) ;
8671: LD_INT 8400
8673: PPUSH
8674: CALL_OW 67
// convoy_start := true ;
8678: LD_ADDR_EXP 7
8682: PUSH
8683: LD_INT 1
8685: ST_TO_ADDR
// PrepareArabian ;
8686: CALL 6297 0 0
// PrepareAttack ( 1 ) ;
8690: LD_INT 1
8692: PPUSH
8693: CALL 6370 0 1
// while ( convoy_start ) do
8697: LD_EXP 7
8701: IFFALSE 8848
// begin Wait ( Rand ( 2 2$00 , 3 3$30 ) ) ;
8703: LD_INT 4200
8705: PPUSH
8706: LD_INT 7350
8708: PPUSH
8709: CALL_OW 12
8713: PPUSH
8714: CALL_OW 67
// if FilterAllUnits ( [ f_side , 2 ] ) < 20 then
8718: LD_INT 22
8720: PUSH
8721: LD_INT 2
8723: PUSH
8724: EMPTY
8725: LIST
8726: LIST
8727: PPUSH
8728: CALL_OW 69
8732: PUSH
8733: LD_INT 20
8735: LESS
8736: IFFALSE 8753
// PrepareAttack ( Rand ( 1 , 2 ) ) ;
8738: LD_INT 1
8740: PPUSH
8741: LD_INT 2
8743: PPUSH
8744: CALL_OW 12
8748: PPUSH
8749: CALL 6370 0 1
// Convoy ( Rand ( 1 , 5 ) ) ;
8753: LD_INT 1
8755: PPUSH
8756: LD_INT 5
8758: PPUSH
8759: CALL_OW 12
8763: PPUSH
8764: CALL 898 0 1
// conv_counter := conv_counter + 1 ;
8768: LD_ADDR_EXP 13
8772: PUSH
8773: LD_EXP 13
8777: PUSH
8778: LD_INT 1
8780: PLUS
8781: ST_TO_ADDR
// if conv_counter mod [ 4 , 3 , 3 ] [ Difficulty ] = 0 then
8782: LD_EXP 13
8786: PUSH
8787: LD_INT 4
8789: PUSH
8790: LD_INT 3
8792: PUSH
8793: LD_INT 3
8795: PUSH
8796: EMPTY
8797: LIST
8798: LIST
8799: LIST
8800: PUSH
8801: LD_OWVAR 67
8805: ARRAY
8806: MOD
8807: PUSH
8808: LD_INT 0
8810: EQUAL
8811: IFFALSE 8846
// begin Wait ( 1 1$20 ) ;
8813: LD_INT 2800
8815: PPUSH
8816: CALL_OW 67
// SayRadio ( Farmer , DPM_F2 ) ;
8820: LD_EXP 25
8824: PPUSH
8825: LD_STRING DPM_F2
8827: PPUSH
8828: CALL_OW 94
// PrepareAttack ( 3 ) ;
8832: LD_INT 3
8834: PPUSH
8835: CALL 6370 0 1
// Wait ( 3 3$00 ) ;
8839: LD_INT 6300
8841: PPUSH
8842: CALL_OW 67
// end ; end ;
8846: GO 8697
// end ;
8848: END
// every 0 0$1 trigger safeCounter > 30 do
8849: LD_EXP 15
8853: PUSH
8854: LD_INT 30
8856: GREATER
8857: IFFALSE 8869
8859: GO 8861
8861: DISABLE
// SetAchievement ( ACH_SAFE ) ;
8862: LD_STRING ACH_SAFE
8864: PPUSH
8865: CALL_OW 543
8869: END
// every 1 1$30 trigger conv_counter mod 3 = 0 and FilterAllUnits ( [ f_side , 2 ] ) = 0 do
8870: LD_EXP 13
8874: PUSH
8875: LD_INT 3
8877: MOD
8878: PUSH
8879: LD_INT 0
8881: EQUAL
8882: PUSH
8883: LD_INT 22
8885: PUSH
8886: LD_INT 2
8888: PUSH
8889: EMPTY
8890: LIST
8891: LIST
8892: PPUSH
8893: CALL_OW 69
8897: PUSH
8898: LD_INT 0
8900: EQUAL
8901: AND
8902: IFFALSE 8919
8904: GO 8906
8906: DISABLE
// SayRadio ( Farmer , DPM_F3 ) ;
8907: LD_EXP 25
8911: PPUSH
8912: LD_STRING DPM_F3
8914: PPUSH
8915: CALL_OW 94
8919: END
// every 1 1$30 trigger conv_counter mod 5 = 0 and FilterAllUnits ( [ f_side , 2 ] ) = 0 do
8920: LD_EXP 13
8924: PUSH
8925: LD_INT 5
8927: MOD
8928: PUSH
8929: LD_INT 0
8931: EQUAL
8932: PUSH
8933: LD_INT 22
8935: PUSH
8936: LD_INT 2
8938: PUSH
8939: EMPTY
8940: LIST
8941: LIST
8942: PPUSH
8943: CALL_OW 69
8947: PUSH
8948: LD_INT 0
8950: EQUAL
8951: AND
8952: IFFALSE 8969
8954: GO 8956
8956: DISABLE
// SayRadio ( Farmer , DPM_F4 ) ;
8957: LD_EXP 25
8961: PPUSH
8962: LD_STRING DPM_F4
8964: PPUSH
8965: CALL_OW 94
8969: END
// every 0 0$10 trigger convoy_start and conv_counter >= [ 8 , 9 , 10 ] [ Difficulty ] and FilterAllUnits ( [ f_side , 6 ] ) = 0 do
8970: LD_EXP 7
8974: PUSH
8975: LD_EXP 13
8979: PUSH
8980: LD_INT 8
8982: PUSH
8983: LD_INT 9
8985: PUSH
8986: LD_INT 10
8988: PUSH
8989: EMPTY
8990: LIST
8991: LIST
8992: LIST
8993: PUSH
8994: LD_OWVAR 67
8998: ARRAY
8999: GREATEREQUAL
9000: AND
9001: PUSH
9002: LD_INT 22
9004: PUSH
9005: LD_INT 6
9007: PUSH
9008: EMPTY
9009: LIST
9010: LIST
9011: PPUSH
9012: CALL_OW 69
9016: PUSH
9017: LD_INT 0
9019: EQUAL
9020: AND
9021: IFFALSE 9120
9023: GO 9025
9025: DISABLE
// begin SayRadio ( Popov , DPM_PEnd ) ;
9026: LD_EXP 17
9030: PPUSH
9031: LD_STRING DPM_PEnd
9033: PPUSH
9034: CALL_OW 94
// AddMedal ( med1 , medal1 ) ;
9038: LD_STRING med1
9040: PPUSH
9041: LD_EXP 3
9045: PPUSH
9046: CALL_OW 101
// AddMedal ( med2 , medal2 ) ;
9050: LD_STRING med2
9052: PPUSH
9053: LD_EXP 4
9057: PPUSH
9058: CALL_OW 101
// if dest_counter >= [ 15 , 10 , 7 ] [ Difficulty ] then
9062: LD_EXP 8
9066: PUSH
9067: LD_INT 15
9069: PUSH
9070: LD_INT 10
9072: PUSH
9073: LD_INT 7
9075: PUSH
9076: EMPTY
9077: LIST
9078: LIST
9079: LIST
9080: PUSH
9081: LD_OWVAR 67
9085: ARRAY
9086: GREATEREQUAL
9087: IFFALSE 9097
// medal3 := false ;
9089: LD_ADDR_EXP 5
9093: PUSH
9094: LD_INT 0
9096: ST_TO_ADDR
// AddMedal ( med3 , medal3 ) ;
9097: LD_STRING med3
9099: PPUSH
9100: LD_EXP 5
9104: PPUSH
9105: CALL_OW 101
// GiveMedals ( MAIN ) ;
9109: LD_STRING MAIN
9111: PPUSH
9112: CALL_OW 102
// YouWin ;
9116: CALL_OW 103
// end ;
9120: END
// every 4 4$10 trigger convoy_start do var i ;
9121: LD_EXP 7
9125: IFFALSE 9491
9127: GO 9129
9129: DISABLE
9130: LD_INT 0
9132: PPUSH
// begin DialogueOn ;
9133: CALL_OW 6
// SayRadio ( Popov , DPM_PHelp ) ;
9137: LD_EXP 17
9141: PPUSH
9142: LD_STRING DPM_PHelp
9144: PPUSH
9145: CALL_OW 94
// DialogueOff ;
9149: CALL_OW 7
// Wait ( 0 0$30 ) ;
9153: LD_INT 1050
9155: PPUSH
9156: CALL_OW 67
// Randomize ;
9160: CALL_OW 10
// uc_side := 3 ;
9164: LD_ADDR_OWVAR 20
9168: PUSH
9169: LD_INT 3
9171: ST_TO_ADDR
// uc_nation := 3 ;
9172: LD_ADDR_OWVAR 21
9176: PUSH
9177: LD_INT 3
9179: ST_TO_ADDR
// for i = 1 to [ 5 , 4 , 3 ] [ Difficulty ] do
9180: LD_ADDR_VAR 0 1
9184: PUSH
9185: DOUBLE
9186: LD_INT 1
9188: DEC
9189: ST_TO_ADDR
9190: LD_INT 5
9192: PUSH
9193: LD_INT 4
9195: PUSH
9196: LD_INT 3
9198: PUSH
9199: EMPTY
9200: LIST
9201: LIST
9202: LIST
9203: PUSH
9204: LD_OWVAR 67
9208: ARRAY
9209: PUSH
9210: FOR_TO
9211: IFFALSE 9251
// begin PrepareHuman ( false , Rand ( 1 , 3 ) , 5 ) ;
9213: LD_INT 0
9215: PPUSH
9216: LD_INT 1
9218: PPUSH
9219: LD_INT 3
9221: PPUSH
9222: CALL_OW 12
9226: PPUSH
9227: LD_INT 5
9229: PPUSH
9230: CALL_OW 380
// PlaceUnitArea ( CreateHuman , rus_start , false ) ;
9234: CALL_OW 44
9238: PPUSH
9239: LD_INT 1
9241: PPUSH
9242: LD_INT 0
9244: PPUSH
9245: CALL_OW 49
// end ;
9249: GO 9210
9251: POP
9252: POP
// vc_chassis := ru_heavy_wheeled ;
9253: LD_ADDR_OWVAR 37
9257: PUSH
9258: LD_INT 23
9260: ST_TO_ADDR
// vc_engine := engine_combustion ;
9261: LD_ADDR_OWVAR 39
9265: PUSH
9266: LD_INT 1
9268: ST_TO_ADDR
// vc_control := control_manual ;
9269: LD_ADDR_OWVAR 38
9273: PUSH
9274: LD_INT 1
9276: ST_TO_ADDR
// vc_weapon := 89 ;
9277: LD_ADDR_OWVAR 40
9281: PUSH
9282: LD_INT 89
9284: ST_TO_ADDR
// vc_fuel_battery := 88 ;
9285: LD_ADDR_OWVAR 41
9289: PUSH
9290: LD_INT 88
9292: ST_TO_ADDR
// i := CreateVehicle ;
9293: LD_ADDR_VAR 0 1
9297: PUSH
9298: CALL_OW 45
9302: ST_TO_ADDR
// SetDir ( i , 5 ) ;
9303: LD_VAR 0 1
9307: PPUSH
9308: LD_INT 5
9310: PPUSH
9311: CALL_OW 233
// PlaceUnitXY ( i , 63 , 115 , false ) ;
9315: LD_VAR 0 1
9319: PPUSH
9320: LD_INT 63
9322: PPUSH
9323: LD_INT 115
9325: PPUSH
9326: LD_INT 0
9328: PPUSH
9329: CALL_OW 48
// SetCargo ( i , mat_cans , 200 ) ;
9333: LD_VAR 0 1
9337: PPUSH
9338: LD_INT 1
9340: PPUSH
9341: LD_INT 200
9343: PPUSH
9344: CALL_OW 290
// PrepareHuman ( false , 3 , 5 ) ;
9348: LD_INT 0
9350: PPUSH
9351: LD_INT 3
9353: PPUSH
9354: LD_INT 5
9356: PPUSH
9357: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
9361: CALL_OW 44
9365: PPUSH
9366: LD_VAR 0 1
9370: PPUSH
9371: CALL_OW 52
// DialogueOn ;
9375: CALL_OW 6
// CenterNowOnXY ( 169 , 115 ) ;
9379: LD_INT 169
9381: PPUSH
9382: LD_INT 115
9384: PPUSH
9385: CALL_OW 86
// DWait ( 0 0$01 ) ;
9389: LD_INT 35
9391: PPUSH
9392: CALL_OW 68
// CenterNowOnXY ( 63 , 115 ) ;
9396: LD_INT 63
9398: PPUSH
9399: LD_INT 115
9401: PPUSH
9402: CALL_OW 86
// DWait ( 0 0$01 ) ;
9406: LD_INT 35
9408: PPUSH
9409: CALL_OW 68
// DialogueOff ;
9413: CALL_OW 7
// ComMoveXY ( i , 57 , 53 ) ;
9417: LD_VAR 0 1
9421: PPUSH
9422: LD_INT 57
9424: PPUSH
9425: LD_INT 53
9427: PPUSH
9428: CALL_OW 111
// Wait ( Rand ( 3 3$00 , 7 7$00 ) ) ;
9432: LD_INT 6300
9434: PPUSH
9435: LD_INT 14700
9437: PPUSH
9438: CALL_OW 12
9442: PPUSH
9443: CALL_OW 67
// PlaceUnitXY ( Saseda , 86 , 112 , false ) ;
9447: LD_EXP 18
9451: PPUSH
9452: LD_INT 86
9454: PPUSH
9455: LD_INT 112
9457: PPUSH
9458: LD_INT 0
9460: PPUSH
9461: CALL_OW 48
// Wait ( 0 0$0.3 ) ;
9465: LD_INT 10
9467: PPUSH
9468: CALL_OW 67
// SayRadio ( Saseda , DPM_Sa1 ) ;
9472: LD_EXP 18
9476: PPUSH
9477: LD_STRING DPM_Sa1
9479: PPUSH
9480: CALL_OW 94
// ChangeMissionObjectives ( PM_3 ) ;
9484: LD_STRING PM_3
9486: PPUSH
9487: CALL_OW 337
// end ;
9491: PPOPN 1
9493: END
// every 0 0$01 trigger See ( 3 , Saseda ) do
9494: LD_INT 3
9496: PPUSH
9497: LD_EXP 18
9501: PPUSH
9502: CALL_OW 292
9506: IFFALSE 9555
9508: GO 9510
9510: DISABLE
// begin Say ( Saseda , DPM_Sa2 ) ;
9511: LD_EXP 18
9515: PPUSH
9516: LD_STRING DPM_Sa2
9518: PPUSH
9519: CALL_OW 88
// ChangeMissionObjectives ( PM_4 ) ;
9523: LD_STRING PM_4
9525: PPUSH
9526: CALL_OW 337
// SetTech ( tech_rocket , 3 , state_enabled ) ;
9530: LD_INT 40
9532: PPUSH
9533: LD_INT 3
9535: PPUSH
9536: LD_INT 1
9538: PPUSH
9539: CALL_OW 322
// SetSide ( Saseda , 3 ) ;
9543: LD_EXP 18
9547: PPUSH
9548: LD_INT 3
9550: PPUSH
9551: CALL_OW 235
// end ;
9555: END
// every 16 16$00 trigger not medal1 and FilterAllUnits ( [ f_side , 6 ] ) = 0 do
9556: LD_EXP 3
9560: NOT
9561: PUSH
9562: LD_INT 22
9564: PUSH
9565: LD_INT 6
9567: PUSH
9568: EMPTY
9569: LIST
9570: LIST
9571: PPUSH
9572: CALL_OW 69
9576: PUSH
9577: LD_INT 0
9579: EQUAL
9580: AND
9581: IFFALSE 9643
9583: GO 9585
9585: DISABLE
// begin DialogueOn ;
9586: CALL_OW 6
// Say ( Stolypin , DPM_S3 ) ;
9590: LD_EXP 16
9594: PPUSH
9595: LD_STRING DPM_S3
9597: PPUSH
9598: CALL_OW 88
// PlaceSeeing ( 62 , 113 , 3 , 10 ) ;
9602: LD_INT 62
9604: PPUSH
9605: LD_INT 113
9607: PPUSH
9608: LD_INT 3
9610: PPUSH
9611: LD_INT 10
9613: PPUSH
9614: CALL_OW 330
// CenterOnXY ( 62 , 113 ) ;
9618: LD_INT 62
9620: PPUSH
9621: LD_INT 113
9623: PPUSH
9624: CALL_OW 84
// dwait ( 0 0$1 ) ;
9628: LD_INT 35
9630: PPUSH
9631: CALL_OW 68
// DialogueOff ;
9635: CALL_OW 7
// CounterAttack ;
9639: CALL 5767 0 0
// end ; end_of_file
9643: END
// on LeaveBuilding ( b , h ) do begin if GetSide ( b ) = 1 then
9644: LD_VAR 0 1
9648: PPUSH
9649: CALL_OW 255
9653: PUSH
9654: LD_INT 1
9656: EQUAL
9657: IFFALSE 9693
// if not us_retreat then
9659: LD_EXP 22
9663: NOT
9664: IFFALSE 9693
// if GetClass ( h ) = 1 then
9666: LD_VAR 0 2
9670: PPUSH
9671: CALL_OW 257
9675: PUSH
9676: LD_INT 1
9678: EQUAL
9679: IFFALSE 9693
// ComEnterUnit ( h , us_arm ) ;
9681: LD_VAR 0 2
9685: PPUSH
9686: LD_INT 69
9688: PPUSH
9689: CALL_OW 120
// end ;
9693: PPOPN 2
9695: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
9696: LD_VAR 0 1
9700: PPUSH
9701: CALL 26849 0 1
// if GetSide ( un ) = 1 then
9705: LD_VAR 0 1
9709: PPUSH
9710: CALL_OW 255
9714: PUSH
9715: LD_INT 1
9717: EQUAL
9718: IFFALSE 9734
// us_count := us_count + 1 ;
9720: LD_ADDR_EXP 24
9724: PUSH
9725: LD_EXP 24
9729: PUSH
9730: LD_INT 1
9732: PLUS
9733: ST_TO_ADDR
// if un in us_force then
9734: LD_VAR 0 1
9738: PUSH
9739: LD_EXP 12
9743: IN
9744: IFFALSE 9762
// us_force := us_force diff un ;
9746: LD_ADDR_EXP 12
9750: PUSH
9751: LD_EXP 12
9755: PUSH
9756: LD_VAR 0 1
9760: DIFF
9761: ST_TO_ADDR
// if un in ar_force then
9762: LD_VAR 0 1
9766: PUSH
9767: LD_EXP 11
9771: IN
9772: IFFALSE 9790
// ar_force := ar_force diff un ;
9774: LD_ADDR_EXP 11
9778: PUSH
9779: LD_EXP 11
9783: PUSH
9784: LD_VAR 0 1
9788: DIFF
9789: ST_TO_ADDR
// if un = Stolypin then
9790: LD_VAR 0 1
9794: PUSH
9795: LD_EXP 16
9799: EQUAL
9800: IFFALSE 9809
// YouLost ( dead ) ;
9802: LD_STRING dead
9804: PPUSH
9805: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) then
9809: LD_VAR 0 1
9813: PUSH
9814: LD_INT 22
9816: PUSH
9817: LD_INT 1
9819: PUSH
9820: EMPTY
9821: LIST
9822: LIST
9823: PUSH
9824: LD_INT 30
9826: PUSH
9827: LD_INT 0
9829: PUSH
9830: EMPTY
9831: LIST
9832: LIST
9833: PUSH
9834: EMPTY
9835: LIST
9836: LIST
9837: PPUSH
9838: CALL_OW 69
9842: IN
9843: IFFALSE 9852
// YouLost ( depot ) ;
9845: LD_STRING depot
9847: PPUSH
9848: CALL_OW 104
// if GetSide ( un ) = 6 then
9852: LD_VAR 0 1
9856: PPUSH
9857: CALL_OW 255
9861: PUSH
9862: LD_INT 6
9864: EQUAL
9865: IFFALSE 9881
// dest_counter := dest_counter + 1 ;
9867: LD_ADDR_EXP 8
9871: PUSH
9872: LD_EXP 8
9876: PUSH
9877: LD_INT 1
9879: PLUS
9880: ST_TO_ADDR
// end ;
9881: PPOPN 1
9883: END
// on VehicleConstructed ( un , fac ) do begin SOS_VehicleConstructed ( un , fac ) ;
9884: LD_VAR 0 1
9888: PPUSH
9889: LD_VAR 0 2
9893: PPUSH
9894: CALL 26969 0 2
// if GetSide ( un ) = 1 then
9898: LD_VAR 0 1
9902: PPUSH
9903: CALL_OW 255
9907: PUSH
9908: LD_INT 1
9910: EQUAL
9911: IFFALSE 9928
// ComMoveXY ( un , 57 , 52 ) ;
9913: LD_VAR 0 1
9917: PPUSH
9918: LD_INT 57
9920: PPUSH
9921: LD_INT 52
9923: PPUSH
9924: CALL_OW 111
// end ;
9928: PPOPN 2
9930: END
// on Contact ( s1 , s2 ) do begin if not us_alert then
9931: LD_EXP 21
9935: NOT
9936: IFFALSE 9986
// if ( s1 = 3 and s2 = 1 ) or ( s1 = 1 and s2 = 3 ) then
9938: LD_VAR 0 1
9942: PUSH
9943: LD_INT 3
9945: EQUAL
9946: PUSH
9947: LD_VAR 0 2
9951: PUSH
9952: LD_INT 1
9954: EQUAL
9955: AND
9956: PUSH
9957: LD_VAR 0 1
9961: PUSH
9962: LD_INT 1
9964: EQUAL
9965: PUSH
9966: LD_VAR 0 2
9970: PUSH
9971: LD_INT 3
9973: EQUAL
9974: AND
9975: OR
9976: IFFALSE 9986
// us_alert := true ;
9978: LD_ADDR_EXP 21
9982: PUSH
9983: LD_INT 1
9985: ST_TO_ADDR
// if ( s1 = 6 and s2 = 3 ) or ( s1 = 3 and s2 = 6 ) then
9986: LD_VAR 0 1
9990: PUSH
9991: LD_INT 6
9993: EQUAL
9994: PUSH
9995: LD_VAR 0 2
9999: PUSH
10000: LD_INT 3
10002: EQUAL
10003: AND
10004: PUSH
10005: LD_VAR 0 1
10009: PUSH
10010: LD_INT 3
10012: EQUAL
10013: PUSH
10014: LD_VAR 0 2
10018: PUSH
10019: LD_INT 6
10021: EQUAL
10022: AND
10023: OR
10024: IFFALSE 10033
// YouLost ( alat ) ;
10026: LD_STRING alat
10028: PPUSH
10029: CALL_OW 104
// end ;
10033: PPOPN 2
10035: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) = 2 and un in FilterAllUnits ( [ [ f_empty ] , [ f_type , unit_vehicle ] ] ) then
10036: LD_VAR 0 1
10040: PPUSH
10041: CALL_OW 255
10045: PUSH
10046: LD_INT 2
10048: EQUAL
10049: PUSH
10050: LD_VAR 0 1
10054: PUSH
10055: LD_INT 58
10057: PUSH
10058: EMPTY
10059: LIST
10060: PUSH
10061: LD_INT 21
10063: PUSH
10064: LD_INT 2
10066: PUSH
10067: EMPTY
10068: LIST
10069: LIST
10070: PUSH
10071: EMPTY
10072: LIST
10073: LIST
10074: PPUSH
10075: CALL_OW 69
10079: IN
10080: AND
10081: IFFALSE 10202
// if GetSide ( NearestUnitToUnit ( all_units diff un , un ) ) <> 2 then
10083: LD_OWVAR 3
10087: PUSH
10088: LD_VAR 0 1
10092: DIFF
10093: PPUSH
10094: LD_VAR 0 1
10098: PPUSH
10099: CALL_OW 74
10103: PPUSH
10104: CALL_OW 255
10108: PUSH
10109: LD_INT 2
10111: NONEQUAL
10112: IFFALSE 10202
// begin Wait ( 0 0$1.3 ) ;
10114: LD_INT 46
10116: PPUSH
10117: CALL_OW 67
// MineExplosion ( GetX ( un ) , GetY ( un ) , 1 ) ;
10121: LD_VAR 0 1
10125: PPUSH
10126: CALL_OW 250
10130: PPUSH
10131: LD_VAR 0 1
10135: PPUSH
10136: CALL_OW 251
10140: PPUSH
10141: LD_INT 1
10143: PPUSH
10144: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 1 ) ;
10148: LD_VAR 0 1
10152: PPUSH
10153: CALL_OW 250
10157: PPUSH
10158: LD_VAR 0 1
10162: PPUSH
10163: CALL_OW 251
10167: PPUSH
10168: LD_INT 1
10170: PPUSH
10171: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 1 ) ;
10175: LD_VAR 0 1
10179: PPUSH
10180: CALL_OW 250
10184: PPUSH
10185: LD_VAR 0 1
10189: PPUSH
10190: CALL_OW 251
10194: PPUSH
10195: LD_INT 1
10197: PPUSH
10198: CALL_OW 453
// end ; end ;
10202: PPOPN 1
10204: END
// on EvacuateVehicle ( driver , un , c1 , c2 ) do begin if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) and not GetSide ( NearestUnit ( un ) ) = 2 then
10205: LD_VAR 0 2
10209: PUSH
10210: LD_INT 22
10212: PUSH
10213: LD_INT 2
10215: PUSH
10216: EMPTY
10217: LIST
10218: LIST
10219: PUSH
10220: LD_INT 21
10222: PUSH
10223: LD_INT 2
10225: PUSH
10226: EMPTY
10227: LIST
10228: LIST
10229: PUSH
10230: EMPTY
10231: LIST
10232: LIST
10233: PPUSH
10234: CALL_OW 69
10238: IN
10239: PUSH
10240: LD_VAR 0 2
10244: PPUSH
10245: CALL 10724 0 1
10249: PPUSH
10250: CALL_OW 255
10254: PUSH
10255: LD_INT 2
10257: EQUAL
10258: NOT
10259: AND
10260: IFFALSE 10385
// begin Wait ( Rand ( 0 0$03 , 0 0$06 ) ) ;
10262: LD_INT 105
10264: PPUSH
10265: LD_INT 210
10267: PPUSH
10268: CALL_OW 12
10272: PPUSH
10273: CALL_OW 67
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
10277: LD_VAR 0 2
10281: PPUSH
10282: CALL_OW 250
10286: PPUSH
10287: LD_VAR 0 2
10291: PPUSH
10292: CALL_OW 251
10296: PPUSH
10297: LD_INT 3
10299: PPUSH
10300: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
10304: LD_VAR 0 2
10308: PPUSH
10309: CALL_OW 250
10313: PPUSH
10314: LD_VAR 0 2
10318: PPUSH
10319: CALL_OW 251
10323: PPUSH
10324: LD_INT 3
10326: PPUSH
10327: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
10331: LD_VAR 0 2
10335: PPUSH
10336: CALL_OW 250
10340: PPUSH
10341: LD_VAR 0 2
10345: PPUSH
10346: CALL_OW 251
10350: PPUSH
10351: LD_INT 3
10353: PPUSH
10354: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
10358: LD_VAR 0 2
10362: PPUSH
10363: CALL_OW 250
10367: PPUSH
10368: LD_VAR 0 2
10372: PPUSH
10373: CALL_OW 251
10377: PPUSH
10378: LD_INT 3
10380: PPUSH
10381: CALL_OW 453
// end ; end ;
10385: PPOPN 4
10387: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
10388: LD_VAR 0 1
10392: PPUSH
10393: LD_VAR 0 2
10397: PPUSH
10398: LD_VAR 0 3
10402: PPUSH
10403: CALL 26945 0 3
// end ;
10407: PPOPN 3
10409: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
10410: LD_VAR 0 1
10414: PPUSH
10415: CALL 26953 0 1
// end ; end_of_file
10419: PPOPN 1
10421: END
// export function Replace2 ( tab , j , k , value ) ; var i , tmp ; begin
10422: LD_INT 0
10424: PPUSH
10425: PPUSH
10426: PPUSH
// tmp := Replace ( tab [ j ] , k , value ) ;
10427: LD_ADDR_VAR 0 7
10431: PUSH
10432: LD_VAR 0 1
10436: PUSH
10437: LD_VAR 0 2
10441: ARRAY
10442: PPUSH
10443: LD_VAR 0 3
10447: PPUSH
10448: LD_VAR 0 4
10452: PPUSH
10453: CALL_OW 1
10457: ST_TO_ADDR
// tab := Replace ( tab , j , tmp ) ;
10458: LD_ADDR_VAR 0 1
10462: PUSH
10463: LD_VAR 0 1
10467: PPUSH
10468: LD_VAR 0 2
10472: PPUSH
10473: LD_VAR 0 7
10477: PPUSH
10478: CALL_OW 1
10482: ST_TO_ADDR
// result := tab ;
10483: LD_ADDR_VAR 0 5
10487: PUSH
10488: LD_VAR 0 1
10492: ST_TO_ADDR
// end ;
10493: LD_VAR 0 5
10497: RET
// export function GetDriver ( veh ) ; var i , filter ; begin
10498: LD_INT 0
10500: PPUSH
10501: PPUSH
10502: PPUSH
// if not GetControl ( veh ) = control_manual then
10503: LD_VAR 0 1
10507: PPUSH
10508: CALL_OW 263
10512: PUSH
10513: LD_INT 1
10515: EQUAL
10516: NOT
10517: IFFALSE 10529
// result := false else
10519: LD_ADDR_VAR 0 2
10523: PUSH
10524: LD_INT 0
10526: ST_TO_ADDR
10527: GO 10674
// if veh in FilterAllUnits ( [ f_empty ] ) then
10529: LD_VAR 0 1
10533: PUSH
10534: LD_INT 58
10536: PUSH
10537: EMPTY
10538: LIST
10539: PPUSH
10540: CALL_OW 69
10544: IN
10545: IFFALSE 10557
// result := false else
10547: LD_ADDR_VAR 0 2
10551: PUSH
10552: LD_INT 0
10554: ST_TO_ADDR
10555: GO 10674
// begin filter := FilterAllUnits ( [ [ f_side , GetSide ( veh ) ] , [ f_driving ] ] ) ;
10557: LD_ADDR_VAR 0 4
10561: PUSH
10562: LD_INT 22
10564: PUSH
10565: LD_VAR 0 1
10569: PPUSH
10570: CALL_OW 255
10574: PUSH
10575: EMPTY
10576: LIST
10577: LIST
10578: PUSH
10579: LD_INT 55
10581: PUSH
10582: EMPTY
10583: LIST
10584: PUSH
10585: EMPTY
10586: LIST
10587: LIST
10588: PPUSH
10589: CALL_OW 69
10593: ST_TO_ADDR
// if not filter then
10594: LD_VAR 0 4
10598: NOT
10599: IFFALSE 10611
// result := false else
10601: LD_ADDR_VAR 0 2
10605: PUSH
10606: LD_INT 0
10608: ST_TO_ADDR
10609: GO 10674
// for i = 1 to filter do
10611: LD_ADDR_VAR 0 3
10615: PUSH
10616: DOUBLE
10617: LD_INT 1
10619: DEC
10620: ST_TO_ADDR
10621: LD_VAR 0 4
10625: PUSH
10626: FOR_TO
10627: IFFALSE 10672
// if IsDriver ( filter [ i ] ) = veh then
10629: LD_VAR 0 4
10633: PUSH
10634: LD_VAR 0 3
10638: ARRAY
10639: PPUSH
10640: CALL 66196 0 1
10644: PUSH
10645: LD_VAR 0 1
10649: EQUAL
10650: IFFALSE 10670
// begin result := filter [ i ] ;
10652: LD_ADDR_VAR 0 2
10656: PUSH
10657: LD_VAR 0 4
10661: PUSH
10662: LD_VAR 0 3
10666: ARRAY
10667: ST_TO_ADDR
// break ;
10668: GO 10672
// end ;
10670: GO 10626
10672: POP
10673: POP
// end ; end ;
10674: LD_VAR 0 2
10678: RET
// export function FindTarget ( unit ) ; begin
10679: LD_INT 0
10681: PPUSH
// result := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( unit ) ] ) , unit ) ;
10682: LD_ADDR_VAR 0 2
10686: PUSH
10687: LD_INT 81
10689: PUSH
10690: LD_VAR 0 1
10694: PPUSH
10695: CALL_OW 255
10699: PUSH
10700: EMPTY
10701: LIST
10702: LIST
10703: PPUSH
10704: CALL_OW 69
10708: PPUSH
10709: LD_VAR 0 1
10713: PPUSH
10714: CALL_OW 74
10718: ST_TO_ADDR
// end ;
10719: LD_VAR 0 2
10723: RET
// export function NearestUnit ( unit ) ; begin
10724: LD_INT 0
10726: PPUSH
// result := NearestUnitToUnit ( all_units diff unit , unit ) ;
10727: LD_ADDR_VAR 0 2
10731: PUSH
10732: LD_OWVAR 3
10736: PUSH
10737: LD_VAR 0 1
10741: DIFF
10742: PPUSH
10743: LD_VAR 0 1
10747: PPUSH
10748: CALL_OW 74
10752: ST_TO_ADDR
// end ; end_of_file
10753: LD_VAR 0 2
10757: RET
// every 12 12$00 do
10758: GO 10760
10760: DISABLE
// begin SetWeather ( 1 , 570 , 350 ) ;
10761: LD_INT 1
10763: PPUSH
10764: LD_INT 570
10766: PPUSH
10767: LD_INT 350
10769: PPUSH
10770: CALL_OW 550
// Wait ( Rand ( 5 5$00 , 10 10$00 ) ) ;
10774: LD_INT 10500
10776: PPUSH
10777: LD_INT 21000
10779: PPUSH
10780: CALL_OW 12
10784: PPUSH
10785: CALL_OW 67
// SetWeather ( 0 , 570 , 350 ) ;
10789: LD_INT 0
10791: PPUSH
10792: LD_INT 570
10794: PPUSH
10795: LD_INT 350
10797: PPUSH
10798: CALL_OW 550
// end ;
10802: END
// export function PrepareAnimals ( num1 , num2 , num3 , area ) ; var l , apeman , tiger , bird ; begin
10803: LD_INT 0
10805: PPUSH
10806: PPUSH
10807: PPUSH
10808: PPUSH
10809: PPUSH
// uc_nation = nation_nature ;
10810: LD_ADDR_OWVAR 21
10814: PUSH
10815: LD_INT 0
10817: ST_TO_ADDR
// uc_side = 0 ;
10818: LD_ADDR_OWVAR 20
10822: PUSH
10823: LD_INT 0
10825: ST_TO_ADDR
// l = 0 ;
10826: LD_ADDR_VAR 0 6
10830: PUSH
10831: LD_INT 0
10833: ST_TO_ADDR
// repeat begin uc_direction = Rand ( 0 , 5 ) ;
10834: LD_ADDR_OWVAR 24
10838: PUSH
10839: LD_INT 0
10841: PPUSH
10842: LD_INT 5
10844: PPUSH
10845: CALL_OW 12
10849: ST_TO_ADDR
// hc_agressivity = Rand ( - 5 , 5 ) ;
10850: LD_ADDR_OWVAR 35
10854: PUSH
10855: LD_INT 5
10857: NEG
10858: PPUSH
10859: LD_INT 5
10861: PPUSH
10862: CALL_OW 12
10866: ST_TO_ADDR
// hc_gallery =  ;
10867: LD_ADDR_OWVAR 33
10871: PUSH
10872: LD_STRING 
10874: ST_TO_ADDR
// hc_class = class_apeman ;
10875: LD_ADDR_OWVAR 28
10879: PUSH
10880: LD_INT 12
10882: ST_TO_ADDR
// hc_attr = [ Rand ( 11 , 13 ) , Rand ( 10 , 11 ) ] ;
10883: LD_ADDR_OWVAR 29
10887: PUSH
10888: LD_INT 11
10890: PPUSH
10891: LD_INT 13
10893: PPUSH
10894: CALL_OW 12
10898: PUSH
10899: LD_INT 10
10901: PPUSH
10902: LD_INT 11
10904: PPUSH
10905: CALL_OW 12
10909: PUSH
10910: EMPTY
10911: LIST
10912: LIST
10913: ST_TO_ADDR
// hc_sex = sex_male ;
10914: LD_ADDR_OWVAR 27
10918: PUSH
10919: LD_INT 1
10921: ST_TO_ADDR
// hc_skills = [ Rand ( 0 , 2 ) , 0 , 0 , 0 ] ;
10922: LD_ADDR_OWVAR 31
10926: PUSH
10927: LD_INT 0
10929: PPUSH
10930: LD_INT 2
10932: PPUSH
10933: CALL_OW 12
10937: PUSH
10938: LD_INT 0
10940: PUSH
10941: LD_INT 0
10943: PUSH
10944: LD_INT 0
10946: PUSH
10947: EMPTY
10948: LIST
10949: LIST
10950: LIST
10951: LIST
10952: ST_TO_ADDR
// apeman = CreateHuman ;
10953: LD_ADDR_VAR 0 7
10957: PUSH
10958: CALL_OW 44
10962: ST_TO_ADDR
// PlaceUnitArea ( apeman , area , false ) ;
10963: LD_VAR 0 7
10967: PPUSH
10968: LD_VAR 0 4
10972: PPUSH
10973: LD_INT 0
10975: PPUSH
10976: CALL_OW 49
// l = l + 1 ;
10980: LD_ADDR_VAR 0 6
10984: PUSH
10985: LD_VAR 0 6
10989: PUSH
10990: LD_INT 1
10992: PLUS
10993: ST_TO_ADDR
// end until l = num1 ;
10994: LD_VAR 0 6
10998: PUSH
10999: LD_VAR 0 1
11003: EQUAL
11004: IFFALSE 10834
// l = 0 ;
11006: LD_ADDR_VAR 0 6
11010: PUSH
11011: LD_INT 0
11013: ST_TO_ADDR
// repeat begin hc_agressivity = Rand ( 0 , 25 ) ;
11014: LD_ADDR_OWVAR 35
11018: PUSH
11019: LD_INT 0
11021: PPUSH
11022: LD_INT 25
11024: PPUSH
11025: CALL_OW 12
11029: ST_TO_ADDR
// hc_class = class_tiger ;
11030: LD_ADDR_OWVAR 28
11034: PUSH
11035: LD_INT 14
11037: ST_TO_ADDR
// hc_sex = sex_male ;
11038: LD_ADDR_OWVAR 27
11042: PUSH
11043: LD_INT 1
11045: ST_TO_ADDR
// hc_gallery = sandnature ;
11046: LD_ADDR_OWVAR 33
11050: PUSH
11051: LD_STRING sandnature
11053: ST_TO_ADDR
// hc_face_number = 3 ;
11054: LD_ADDR_OWVAR 34
11058: PUSH
11059: LD_INT 3
11061: ST_TO_ADDR
// tiger = CreateHuman ;
11062: LD_ADDR_VAR 0 8
11066: PUSH
11067: CALL_OW 44
11071: ST_TO_ADDR
// PlaceUnitArea ( tiger , area , false ) ;
11072: LD_VAR 0 8
11076: PPUSH
11077: LD_VAR 0 4
11081: PPUSH
11082: LD_INT 0
11084: PPUSH
11085: CALL_OW 49
// l = l + 1 ;
11089: LD_ADDR_VAR 0 6
11093: PUSH
11094: LD_VAR 0 6
11098: PUSH
11099: LD_INT 1
11101: PLUS
11102: ST_TO_ADDR
// end until l = num2 ;
11103: LD_VAR 0 6
11107: PUSH
11108: LD_VAR 0 2
11112: EQUAL
11113: IFFALSE 11014
// l = 0 ;
11115: LD_ADDR_VAR 0 6
11119: PUSH
11120: LD_INT 0
11122: ST_TO_ADDR
// repeat begin hc_class = class_phororhacos ;
11123: LD_ADDR_OWVAR 28
11127: PUSH
11128: LD_INT 18
11130: ST_TO_ADDR
// hc_gallery = sandnature ;
11131: LD_ADDR_OWVAR 33
11135: PUSH
11136: LD_STRING sandnature
11138: ST_TO_ADDR
// hc_face_number = 1 ;
11139: LD_ADDR_OWVAR 34
11143: PUSH
11144: LD_INT 1
11146: ST_TO_ADDR
// bird = CreateHuman ;
11147: LD_ADDR_VAR 0 9
11151: PUSH
11152: CALL_OW 44
11156: ST_TO_ADDR
// PlaceUnitAnywhere ( bird , false ) ;
11157: LD_VAR 0 9
11161: PPUSH
11162: LD_INT 0
11164: PPUSH
11165: CALL_OW 51
// l = l + 1 ;
11169: LD_ADDR_VAR 0 6
11173: PUSH
11174: LD_VAR 0 6
11178: PUSH
11179: LD_INT 1
11181: PLUS
11182: ST_TO_ADDR
// end until l = num3 ;
11183: LD_VAR 0 6
11187: PUSH
11188: LD_VAR 0 3
11192: EQUAL
11193: IFFALSE 11123
// end ; end_of_file end_of_file
11195: LD_VAR 0 5
11199: RET
// every 0 0$1 do
11200: GO 11202
11202: DISABLE
// begin enable ;
11203: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
11204: LD_STRING updateTimer(
11206: PUSH
11207: LD_OWVAR 1
11211: STR
11212: PUSH
11213: LD_STRING );
11215: STR
11216: PPUSH
11217: CALL_OW 559
// end ;
11221: END
// export function SOS_MapStart ( ) ; begin
11222: LD_INT 0
11224: PPUSH
// if streamModeActive then
11225: LD_EXP 26
11229: IFFALSE 11238
// DefineStreamItems ( true ) ;
11231: LD_INT 1
11233: PPUSH
11234: CALL 12892 0 1
// UpdateFactoryWaypoints ( ) ;
11238: CALL 25753 0 0
// UpdateWarehouseGatheringPoints ( ) ;
11242: CALL 26010 0 0
// end ;
11246: LD_VAR 0 1
11250: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
11251: LD_INT 0
11253: PPUSH
// if p2 = hack_mode then
11254: LD_VAR 0 2
11258: PUSH
11259: LD_INT 100
11261: EQUAL
11262: IFFALSE 12265
// begin if not StreamModeActive then
11264: LD_EXP 26
11268: NOT
11269: IFFALSE 11279
// StreamModeActive := true ;
11271: LD_ADDR_EXP 26
11275: PUSH
11276: LD_INT 1
11278: ST_TO_ADDR
// if p3 = 0 then
11279: LD_VAR 0 3
11283: PUSH
11284: LD_INT 0
11286: EQUAL
11287: IFFALSE 11293
// InitStreamMode ;
11289: CALL 12428 0 0
// if p3 = 1 then
11293: LD_VAR 0 3
11297: PUSH
11298: LD_INT 1
11300: EQUAL
11301: IFFALSE 11311
// sRocket := true ;
11303: LD_ADDR_EXP 31
11307: PUSH
11308: LD_INT 1
11310: ST_TO_ADDR
// if p3 = 2 then
11311: LD_VAR 0 3
11315: PUSH
11316: LD_INT 2
11318: EQUAL
11319: IFFALSE 11329
// sSpeed := true ;
11321: LD_ADDR_EXP 30
11325: PUSH
11326: LD_INT 1
11328: ST_TO_ADDR
// if p3 = 3 then
11329: LD_VAR 0 3
11333: PUSH
11334: LD_INT 3
11336: EQUAL
11337: IFFALSE 11347
// sEngine := true ;
11339: LD_ADDR_EXP 32
11343: PUSH
11344: LD_INT 1
11346: ST_TO_ADDR
// if p3 = 4 then
11347: LD_VAR 0 3
11351: PUSH
11352: LD_INT 4
11354: EQUAL
11355: IFFALSE 11365
// sSpec := true ;
11357: LD_ADDR_EXP 29
11361: PUSH
11362: LD_INT 1
11364: ST_TO_ADDR
// if p3 = 5 then
11365: LD_VAR 0 3
11369: PUSH
11370: LD_INT 5
11372: EQUAL
11373: IFFALSE 11383
// sLevel := true ;
11375: LD_ADDR_EXP 33
11379: PUSH
11380: LD_INT 1
11382: ST_TO_ADDR
// if p3 = 6 then
11383: LD_VAR 0 3
11387: PUSH
11388: LD_INT 6
11390: EQUAL
11391: IFFALSE 11401
// sArmoury := true ;
11393: LD_ADDR_EXP 34
11397: PUSH
11398: LD_INT 1
11400: ST_TO_ADDR
// if p3 = 7 then
11401: LD_VAR 0 3
11405: PUSH
11406: LD_INT 7
11408: EQUAL
11409: IFFALSE 11419
// sRadar := true ;
11411: LD_ADDR_EXP 35
11415: PUSH
11416: LD_INT 1
11418: ST_TO_ADDR
// if p3 = 8 then
11419: LD_VAR 0 3
11423: PUSH
11424: LD_INT 8
11426: EQUAL
11427: IFFALSE 11437
// sBunker := true ;
11429: LD_ADDR_EXP 36
11433: PUSH
11434: LD_INT 1
11436: ST_TO_ADDR
// if p3 = 9 then
11437: LD_VAR 0 3
11441: PUSH
11442: LD_INT 9
11444: EQUAL
11445: IFFALSE 11455
// sHack := true ;
11447: LD_ADDR_EXP 37
11451: PUSH
11452: LD_INT 1
11454: ST_TO_ADDR
// if p3 = 10 then
11455: LD_VAR 0 3
11459: PUSH
11460: LD_INT 10
11462: EQUAL
11463: IFFALSE 11473
// sFire := true ;
11465: LD_ADDR_EXP 38
11469: PUSH
11470: LD_INT 1
11472: ST_TO_ADDR
// if p3 = 11 then
11473: LD_VAR 0 3
11477: PUSH
11478: LD_INT 11
11480: EQUAL
11481: IFFALSE 11491
// sRefresh := true ;
11483: LD_ADDR_EXP 39
11487: PUSH
11488: LD_INT 1
11490: ST_TO_ADDR
// if p3 = 12 then
11491: LD_VAR 0 3
11495: PUSH
11496: LD_INT 12
11498: EQUAL
11499: IFFALSE 11509
// sExp := true ;
11501: LD_ADDR_EXP 40
11505: PUSH
11506: LD_INT 1
11508: ST_TO_ADDR
// if p3 = 13 then
11509: LD_VAR 0 3
11513: PUSH
11514: LD_INT 13
11516: EQUAL
11517: IFFALSE 11527
// sDepot := true ;
11519: LD_ADDR_EXP 41
11523: PUSH
11524: LD_INT 1
11526: ST_TO_ADDR
// if p3 = 14 then
11527: LD_VAR 0 3
11531: PUSH
11532: LD_INT 14
11534: EQUAL
11535: IFFALSE 11545
// sFlag := true ;
11537: LD_ADDR_EXP 42
11541: PUSH
11542: LD_INT 1
11544: ST_TO_ADDR
// if p3 = 15 then
11545: LD_VAR 0 3
11549: PUSH
11550: LD_INT 15
11552: EQUAL
11553: IFFALSE 11563
// sKamikadze := true ;
11555: LD_ADDR_EXP 50
11559: PUSH
11560: LD_INT 1
11562: ST_TO_ADDR
// if p3 = 16 then
11563: LD_VAR 0 3
11567: PUSH
11568: LD_INT 16
11570: EQUAL
11571: IFFALSE 11581
// sTroll := true ;
11573: LD_ADDR_EXP 51
11577: PUSH
11578: LD_INT 1
11580: ST_TO_ADDR
// if p3 = 17 then
11581: LD_VAR 0 3
11585: PUSH
11586: LD_INT 17
11588: EQUAL
11589: IFFALSE 11599
// sSlow := true ;
11591: LD_ADDR_EXP 52
11595: PUSH
11596: LD_INT 1
11598: ST_TO_ADDR
// if p3 = 18 then
11599: LD_VAR 0 3
11603: PUSH
11604: LD_INT 18
11606: EQUAL
11607: IFFALSE 11617
// sLack := true ;
11609: LD_ADDR_EXP 53
11613: PUSH
11614: LD_INT 1
11616: ST_TO_ADDR
// if p3 = 19 then
11617: LD_VAR 0 3
11621: PUSH
11622: LD_INT 19
11624: EQUAL
11625: IFFALSE 11635
// sTank := true ;
11627: LD_ADDR_EXP 55
11631: PUSH
11632: LD_INT 1
11634: ST_TO_ADDR
// if p3 = 20 then
11635: LD_VAR 0 3
11639: PUSH
11640: LD_INT 20
11642: EQUAL
11643: IFFALSE 11653
// sRemote := true ;
11645: LD_ADDR_EXP 56
11649: PUSH
11650: LD_INT 1
11652: ST_TO_ADDR
// if p3 = 21 then
11653: LD_VAR 0 3
11657: PUSH
11658: LD_INT 21
11660: EQUAL
11661: IFFALSE 11671
// sPowell := true ;
11663: LD_ADDR_EXP 57
11667: PUSH
11668: LD_INT 1
11670: ST_TO_ADDR
// if p3 = 22 then
11671: LD_VAR 0 3
11675: PUSH
11676: LD_INT 22
11678: EQUAL
11679: IFFALSE 11689
// sTeleport := true ;
11681: LD_ADDR_EXP 60
11685: PUSH
11686: LD_INT 1
11688: ST_TO_ADDR
// if p3 = 23 then
11689: LD_VAR 0 3
11693: PUSH
11694: LD_INT 23
11696: EQUAL
11697: IFFALSE 11707
// sOilTower := true ;
11699: LD_ADDR_EXP 62
11703: PUSH
11704: LD_INT 1
11706: ST_TO_ADDR
// if p3 = 24 then
11707: LD_VAR 0 3
11711: PUSH
11712: LD_INT 24
11714: EQUAL
11715: IFFALSE 11725
// sShovel := true ;
11717: LD_ADDR_EXP 63
11721: PUSH
11722: LD_INT 1
11724: ST_TO_ADDR
// if p3 = 25 then
11725: LD_VAR 0 3
11729: PUSH
11730: LD_INT 25
11732: EQUAL
11733: IFFALSE 11743
// sSheik := true ;
11735: LD_ADDR_EXP 64
11739: PUSH
11740: LD_INT 1
11742: ST_TO_ADDR
// if p3 = 26 then
11743: LD_VAR 0 3
11747: PUSH
11748: LD_INT 26
11750: EQUAL
11751: IFFALSE 11761
// sEarthquake := true ;
11753: LD_ADDR_EXP 66
11757: PUSH
11758: LD_INT 1
11760: ST_TO_ADDR
// if p3 = 27 then
11761: LD_VAR 0 3
11765: PUSH
11766: LD_INT 27
11768: EQUAL
11769: IFFALSE 11779
// sAI := true ;
11771: LD_ADDR_EXP 67
11775: PUSH
11776: LD_INT 1
11778: ST_TO_ADDR
// if p3 = 28 then
11779: LD_VAR 0 3
11783: PUSH
11784: LD_INT 28
11786: EQUAL
11787: IFFALSE 11797
// sCargo := true ;
11789: LD_ADDR_EXP 70
11793: PUSH
11794: LD_INT 1
11796: ST_TO_ADDR
// if p3 = 29 then
11797: LD_VAR 0 3
11801: PUSH
11802: LD_INT 29
11804: EQUAL
11805: IFFALSE 11815
// sDLaser := true ;
11807: LD_ADDR_EXP 71
11811: PUSH
11812: LD_INT 1
11814: ST_TO_ADDR
// if p3 = 30 then
11815: LD_VAR 0 3
11819: PUSH
11820: LD_INT 30
11822: EQUAL
11823: IFFALSE 11833
// sExchange := true ;
11825: LD_ADDR_EXP 72
11829: PUSH
11830: LD_INT 1
11832: ST_TO_ADDR
// if p3 = 31 then
11833: LD_VAR 0 3
11837: PUSH
11838: LD_INT 31
11840: EQUAL
11841: IFFALSE 11851
// sFac := true ;
11843: LD_ADDR_EXP 73
11847: PUSH
11848: LD_INT 1
11850: ST_TO_ADDR
// if p3 = 32 then
11851: LD_VAR 0 3
11855: PUSH
11856: LD_INT 32
11858: EQUAL
11859: IFFALSE 11869
// sPower := true ;
11861: LD_ADDR_EXP 74
11865: PUSH
11866: LD_INT 1
11868: ST_TO_ADDR
// if p3 = 33 then
11869: LD_VAR 0 3
11873: PUSH
11874: LD_INT 33
11876: EQUAL
11877: IFFALSE 11887
// sRandom := true ;
11879: LD_ADDR_EXP 75
11883: PUSH
11884: LD_INT 1
11886: ST_TO_ADDR
// if p3 = 34 then
11887: LD_VAR 0 3
11891: PUSH
11892: LD_INT 34
11894: EQUAL
11895: IFFALSE 11905
// sShield := true ;
11897: LD_ADDR_EXP 76
11901: PUSH
11902: LD_INT 1
11904: ST_TO_ADDR
// if p3 = 35 then
11905: LD_VAR 0 3
11909: PUSH
11910: LD_INT 35
11912: EQUAL
11913: IFFALSE 11923
// sTime := true ;
11915: LD_ADDR_EXP 77
11919: PUSH
11920: LD_INT 1
11922: ST_TO_ADDR
// if p3 = 36 then
11923: LD_VAR 0 3
11927: PUSH
11928: LD_INT 36
11930: EQUAL
11931: IFFALSE 11941
// sTools := true ;
11933: LD_ADDR_EXP 78
11937: PUSH
11938: LD_INT 1
11940: ST_TO_ADDR
// if p3 = 101 then
11941: LD_VAR 0 3
11945: PUSH
11946: LD_INT 101
11948: EQUAL
11949: IFFALSE 11959
// sSold := true ;
11951: LD_ADDR_EXP 43
11955: PUSH
11956: LD_INT 1
11958: ST_TO_ADDR
// if p3 = 102 then
11959: LD_VAR 0 3
11963: PUSH
11964: LD_INT 102
11966: EQUAL
11967: IFFALSE 11977
// sDiff := true ;
11969: LD_ADDR_EXP 44
11973: PUSH
11974: LD_INT 1
11976: ST_TO_ADDR
// if p3 = 103 then
11977: LD_VAR 0 3
11981: PUSH
11982: LD_INT 103
11984: EQUAL
11985: IFFALSE 11995
// sFog := true ;
11987: LD_ADDR_EXP 47
11991: PUSH
11992: LD_INT 1
11994: ST_TO_ADDR
// if p3 = 104 then
11995: LD_VAR 0 3
11999: PUSH
12000: LD_INT 104
12002: EQUAL
12003: IFFALSE 12013
// sReset := true ;
12005: LD_ADDR_EXP 48
12009: PUSH
12010: LD_INT 1
12012: ST_TO_ADDR
// if p3 = 105 then
12013: LD_VAR 0 3
12017: PUSH
12018: LD_INT 105
12020: EQUAL
12021: IFFALSE 12031
// sSun := true ;
12023: LD_ADDR_EXP 49
12027: PUSH
12028: LD_INT 1
12030: ST_TO_ADDR
// if p3 = 106 then
12031: LD_VAR 0 3
12035: PUSH
12036: LD_INT 106
12038: EQUAL
12039: IFFALSE 12049
// sTiger := true ;
12041: LD_ADDR_EXP 45
12045: PUSH
12046: LD_INT 1
12048: ST_TO_ADDR
// if p3 = 107 then
12049: LD_VAR 0 3
12053: PUSH
12054: LD_INT 107
12056: EQUAL
12057: IFFALSE 12067
// sBomb := true ;
12059: LD_ADDR_EXP 46
12063: PUSH
12064: LD_INT 1
12066: ST_TO_ADDR
// if p3 = 108 then
12067: LD_VAR 0 3
12071: PUSH
12072: LD_INT 108
12074: EQUAL
12075: IFFALSE 12085
// sWound := true ;
12077: LD_ADDR_EXP 54
12081: PUSH
12082: LD_INT 1
12084: ST_TO_ADDR
// if p3 = 109 then
12085: LD_VAR 0 3
12089: PUSH
12090: LD_INT 109
12092: EQUAL
12093: IFFALSE 12103
// sBetray := true ;
12095: LD_ADDR_EXP 58
12099: PUSH
12100: LD_INT 1
12102: ST_TO_ADDR
// if p3 = 110 then
12103: LD_VAR 0 3
12107: PUSH
12108: LD_INT 110
12110: EQUAL
12111: IFFALSE 12121
// sContamin := true ;
12113: LD_ADDR_EXP 59
12117: PUSH
12118: LD_INT 1
12120: ST_TO_ADDR
// if p3 = 111 then
12121: LD_VAR 0 3
12125: PUSH
12126: LD_INT 111
12128: EQUAL
12129: IFFALSE 12139
// sOil := true ;
12131: LD_ADDR_EXP 61
12135: PUSH
12136: LD_INT 1
12138: ST_TO_ADDR
// if p3 = 112 then
12139: LD_VAR 0 3
12143: PUSH
12144: LD_INT 112
12146: EQUAL
12147: IFFALSE 12157
// sStu := true ;
12149: LD_ADDR_EXP 65
12153: PUSH
12154: LD_INT 1
12156: ST_TO_ADDR
// if p3 = 113 then
12157: LD_VAR 0 3
12161: PUSH
12162: LD_INT 113
12164: EQUAL
12165: IFFALSE 12175
// sBazooka := true ;
12167: LD_ADDR_EXP 68
12171: PUSH
12172: LD_INT 1
12174: ST_TO_ADDR
// if p3 = 114 then
12175: LD_VAR 0 3
12179: PUSH
12180: LD_INT 114
12182: EQUAL
12183: IFFALSE 12193
// sMortar := true ;
12185: LD_ADDR_EXP 69
12189: PUSH
12190: LD_INT 1
12192: ST_TO_ADDR
// if p3 = 115 then
12193: LD_VAR 0 3
12197: PUSH
12198: LD_INT 115
12200: EQUAL
12201: IFFALSE 12211
// sRanger := true ;
12203: LD_ADDR_EXP 79
12207: PUSH
12208: LD_INT 1
12210: ST_TO_ADDR
// if p3 = 116 then
12211: LD_VAR 0 3
12215: PUSH
12216: LD_INT 116
12218: EQUAL
12219: IFFALSE 12229
// sComputer := true ;
12221: LD_ADDR_EXP 80
12225: PUSH
12226: LD_INT 1
12228: ST_TO_ADDR
// if p3 = 117 then
12229: LD_VAR 0 3
12233: PUSH
12234: LD_INT 117
12236: EQUAL
12237: IFFALSE 12247
// s30 := true ;
12239: LD_ADDR_EXP 81
12243: PUSH
12244: LD_INT 1
12246: ST_TO_ADDR
// if p3 = 118 then
12247: LD_VAR 0 3
12251: PUSH
12252: LD_INT 118
12254: EQUAL
12255: IFFALSE 12265
// s60 := true ;
12257: LD_ADDR_EXP 82
12261: PUSH
12262: LD_INT 1
12264: ST_TO_ADDR
// end ; if p2 = stream_mode then
12265: LD_VAR 0 2
12269: PUSH
12270: LD_INT 101
12272: EQUAL
12273: IFFALSE 12401
// begin case p3 of 1 :
12275: LD_VAR 0 3
12279: PUSH
12280: LD_INT 1
12282: DOUBLE
12283: EQUAL
12284: IFTRUE 12288
12286: GO 12295
12288: POP
// hHackUnlimitedResources ; 2 :
12289: CALL 24499 0 0
12293: GO 12401
12295: LD_INT 2
12297: DOUBLE
12298: EQUAL
12299: IFTRUE 12303
12301: GO 12310
12303: POP
// hHackSetLevel10 ; 3 :
12304: CALL 24632 0 0
12308: GO 12401
12310: LD_INT 3
12312: DOUBLE
12313: EQUAL
12314: IFTRUE 12318
12316: GO 12325
12318: POP
// hHackSetLevel10YourUnits ; 4 :
12319: CALL 24717 0 0
12323: GO 12401
12325: LD_INT 4
12327: DOUBLE
12328: EQUAL
12329: IFTRUE 12333
12331: GO 12340
12333: POP
// hHackInvincible ; 5 :
12334: CALL 25165 0 0
12338: GO 12401
12340: LD_INT 5
12342: DOUBLE
12343: EQUAL
12344: IFTRUE 12348
12346: GO 12355
12348: POP
// hHackInvisible ; 6 :
12349: CALL 25276 0 0
12353: GO 12401
12355: LD_INT 6
12357: DOUBLE
12358: EQUAL
12359: IFTRUE 12363
12361: GO 12370
12363: POP
// hHackChangeYourSide ; 7 :
12364: CALL 25333 0 0
12368: GO 12401
12370: LD_INT 7
12372: DOUBLE
12373: EQUAL
12374: IFTRUE 12378
12376: GO 12385
12378: POP
// hHackChangeUnitSide ; 8 :
12379: CALL 25375 0 0
12383: GO 12401
12385: LD_INT 8
12387: DOUBLE
12388: EQUAL
12389: IFTRUE 12393
12391: GO 12400
12393: POP
// hHackFog ; end ;
12394: CALL 25476 0 0
12398: GO 12401
12400: POP
// end ; end ;
12401: LD_VAR 0 7
12405: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
12406: GO 12408
12408: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
12409: LD_STRING initStreamRollete();
12411: PPUSH
12412: CALL_OW 559
// InitStreamMode ;
12416: CALL 12428 0 0
// DefineStreamItems ( false ) ;
12420: LD_INT 0
12422: PPUSH
12423: CALL 12892 0 1
// end ;
12427: END
// function InitStreamMode ; begin
12428: LD_INT 0
12430: PPUSH
// streamModeActive := false ;
12431: LD_ADDR_EXP 26
12435: PUSH
12436: LD_INT 0
12438: ST_TO_ADDR
// normalCounter := 36 ;
12439: LD_ADDR_EXP 27
12443: PUSH
12444: LD_INT 36
12446: ST_TO_ADDR
// hardcoreCounter := 18 ;
12447: LD_ADDR_EXP 28
12451: PUSH
12452: LD_INT 18
12454: ST_TO_ADDR
// sRocket := false ;
12455: LD_ADDR_EXP 31
12459: PUSH
12460: LD_INT 0
12462: ST_TO_ADDR
// sSpeed := false ;
12463: LD_ADDR_EXP 30
12467: PUSH
12468: LD_INT 0
12470: ST_TO_ADDR
// sEngine := false ;
12471: LD_ADDR_EXP 32
12475: PUSH
12476: LD_INT 0
12478: ST_TO_ADDR
// sSpec := false ;
12479: LD_ADDR_EXP 29
12483: PUSH
12484: LD_INT 0
12486: ST_TO_ADDR
// sLevel := false ;
12487: LD_ADDR_EXP 33
12491: PUSH
12492: LD_INT 0
12494: ST_TO_ADDR
// sArmoury := false ;
12495: LD_ADDR_EXP 34
12499: PUSH
12500: LD_INT 0
12502: ST_TO_ADDR
// sRadar := false ;
12503: LD_ADDR_EXP 35
12507: PUSH
12508: LD_INT 0
12510: ST_TO_ADDR
// sBunker := false ;
12511: LD_ADDR_EXP 36
12515: PUSH
12516: LD_INT 0
12518: ST_TO_ADDR
// sHack := false ;
12519: LD_ADDR_EXP 37
12523: PUSH
12524: LD_INT 0
12526: ST_TO_ADDR
// sFire := false ;
12527: LD_ADDR_EXP 38
12531: PUSH
12532: LD_INT 0
12534: ST_TO_ADDR
// sRefresh := false ;
12535: LD_ADDR_EXP 39
12539: PUSH
12540: LD_INT 0
12542: ST_TO_ADDR
// sExp := false ;
12543: LD_ADDR_EXP 40
12547: PUSH
12548: LD_INT 0
12550: ST_TO_ADDR
// sDepot := false ;
12551: LD_ADDR_EXP 41
12555: PUSH
12556: LD_INT 0
12558: ST_TO_ADDR
// sFlag := false ;
12559: LD_ADDR_EXP 42
12563: PUSH
12564: LD_INT 0
12566: ST_TO_ADDR
// sKamikadze := false ;
12567: LD_ADDR_EXP 50
12571: PUSH
12572: LD_INT 0
12574: ST_TO_ADDR
// sTroll := false ;
12575: LD_ADDR_EXP 51
12579: PUSH
12580: LD_INT 0
12582: ST_TO_ADDR
// sSlow := false ;
12583: LD_ADDR_EXP 52
12587: PUSH
12588: LD_INT 0
12590: ST_TO_ADDR
// sLack := false ;
12591: LD_ADDR_EXP 53
12595: PUSH
12596: LD_INT 0
12598: ST_TO_ADDR
// sTank := false ;
12599: LD_ADDR_EXP 55
12603: PUSH
12604: LD_INT 0
12606: ST_TO_ADDR
// sRemote := false ;
12607: LD_ADDR_EXP 56
12611: PUSH
12612: LD_INT 0
12614: ST_TO_ADDR
// sPowell := false ;
12615: LD_ADDR_EXP 57
12619: PUSH
12620: LD_INT 0
12622: ST_TO_ADDR
// sTeleport := false ;
12623: LD_ADDR_EXP 60
12627: PUSH
12628: LD_INT 0
12630: ST_TO_ADDR
// sOilTower := false ;
12631: LD_ADDR_EXP 62
12635: PUSH
12636: LD_INT 0
12638: ST_TO_ADDR
// sShovel := false ;
12639: LD_ADDR_EXP 63
12643: PUSH
12644: LD_INT 0
12646: ST_TO_ADDR
// sSheik := false ;
12647: LD_ADDR_EXP 64
12651: PUSH
12652: LD_INT 0
12654: ST_TO_ADDR
// sEarthquake := false ;
12655: LD_ADDR_EXP 66
12659: PUSH
12660: LD_INT 0
12662: ST_TO_ADDR
// sAI := false ;
12663: LD_ADDR_EXP 67
12667: PUSH
12668: LD_INT 0
12670: ST_TO_ADDR
// sCargo := false ;
12671: LD_ADDR_EXP 70
12675: PUSH
12676: LD_INT 0
12678: ST_TO_ADDR
// sDLaser := false ;
12679: LD_ADDR_EXP 71
12683: PUSH
12684: LD_INT 0
12686: ST_TO_ADDR
// sExchange := false ;
12687: LD_ADDR_EXP 72
12691: PUSH
12692: LD_INT 0
12694: ST_TO_ADDR
// sFac := false ;
12695: LD_ADDR_EXP 73
12699: PUSH
12700: LD_INT 0
12702: ST_TO_ADDR
// sPower := false ;
12703: LD_ADDR_EXP 74
12707: PUSH
12708: LD_INT 0
12710: ST_TO_ADDR
// sRandom := false ;
12711: LD_ADDR_EXP 75
12715: PUSH
12716: LD_INT 0
12718: ST_TO_ADDR
// sShield := false ;
12719: LD_ADDR_EXP 76
12723: PUSH
12724: LD_INT 0
12726: ST_TO_ADDR
// sTime := false ;
12727: LD_ADDR_EXP 77
12731: PUSH
12732: LD_INT 0
12734: ST_TO_ADDR
// sTools := false ;
12735: LD_ADDR_EXP 78
12739: PUSH
12740: LD_INT 0
12742: ST_TO_ADDR
// sSold := false ;
12743: LD_ADDR_EXP 43
12747: PUSH
12748: LD_INT 0
12750: ST_TO_ADDR
// sDiff := false ;
12751: LD_ADDR_EXP 44
12755: PUSH
12756: LD_INT 0
12758: ST_TO_ADDR
// sFog := false ;
12759: LD_ADDR_EXP 47
12763: PUSH
12764: LD_INT 0
12766: ST_TO_ADDR
// sReset := false ;
12767: LD_ADDR_EXP 48
12771: PUSH
12772: LD_INT 0
12774: ST_TO_ADDR
// sSun := false ;
12775: LD_ADDR_EXP 49
12779: PUSH
12780: LD_INT 0
12782: ST_TO_ADDR
// sTiger := false ;
12783: LD_ADDR_EXP 45
12787: PUSH
12788: LD_INT 0
12790: ST_TO_ADDR
// sBomb := false ;
12791: LD_ADDR_EXP 46
12795: PUSH
12796: LD_INT 0
12798: ST_TO_ADDR
// sWound := false ;
12799: LD_ADDR_EXP 54
12803: PUSH
12804: LD_INT 0
12806: ST_TO_ADDR
// sBetray := false ;
12807: LD_ADDR_EXP 58
12811: PUSH
12812: LD_INT 0
12814: ST_TO_ADDR
// sContamin := false ;
12815: LD_ADDR_EXP 59
12819: PUSH
12820: LD_INT 0
12822: ST_TO_ADDR
// sOil := false ;
12823: LD_ADDR_EXP 61
12827: PUSH
12828: LD_INT 0
12830: ST_TO_ADDR
// sStu := false ;
12831: LD_ADDR_EXP 65
12835: PUSH
12836: LD_INT 0
12838: ST_TO_ADDR
// sBazooka := false ;
12839: LD_ADDR_EXP 68
12843: PUSH
12844: LD_INT 0
12846: ST_TO_ADDR
// sMortar := false ;
12847: LD_ADDR_EXP 69
12851: PUSH
12852: LD_INT 0
12854: ST_TO_ADDR
// sRanger := false ;
12855: LD_ADDR_EXP 79
12859: PUSH
12860: LD_INT 0
12862: ST_TO_ADDR
// sComputer := false ;
12863: LD_ADDR_EXP 80
12867: PUSH
12868: LD_INT 0
12870: ST_TO_ADDR
// s30 := false ;
12871: LD_ADDR_EXP 81
12875: PUSH
12876: LD_INT 0
12878: ST_TO_ADDR
// s60 := false ;
12879: LD_ADDR_EXP 82
12883: PUSH
12884: LD_INT 0
12886: ST_TO_ADDR
// end ;
12887: LD_VAR 0 1
12891: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
12892: LD_INT 0
12894: PPUSH
12895: PPUSH
12896: PPUSH
12897: PPUSH
12898: PPUSH
12899: PPUSH
12900: PPUSH
// result := [ ] ;
12901: LD_ADDR_VAR 0 2
12905: PUSH
12906: EMPTY
12907: ST_TO_ADDR
// if campaign_id = 1 then
12908: LD_OWVAR 69
12912: PUSH
12913: LD_INT 1
12915: EQUAL
12916: IFFALSE 16082
// begin case mission_number of 1 :
12918: LD_OWVAR 70
12922: PUSH
12923: LD_INT 1
12925: DOUBLE
12926: EQUAL
12927: IFTRUE 12931
12929: GO 13007
12931: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
12932: LD_ADDR_VAR 0 2
12936: PUSH
12937: LD_INT 2
12939: PUSH
12940: LD_INT 4
12942: PUSH
12943: LD_INT 11
12945: PUSH
12946: LD_INT 12
12948: PUSH
12949: LD_INT 15
12951: PUSH
12952: LD_INT 16
12954: PUSH
12955: LD_INT 22
12957: PUSH
12958: LD_INT 23
12960: PUSH
12961: LD_INT 26
12963: PUSH
12964: EMPTY
12965: LIST
12966: LIST
12967: LIST
12968: LIST
12969: LIST
12970: LIST
12971: LIST
12972: LIST
12973: LIST
12974: PUSH
12975: LD_INT 101
12977: PUSH
12978: LD_INT 102
12980: PUSH
12981: LD_INT 106
12983: PUSH
12984: LD_INT 116
12986: PUSH
12987: LD_INT 117
12989: PUSH
12990: LD_INT 118
12992: PUSH
12993: EMPTY
12994: LIST
12995: LIST
12996: LIST
12997: LIST
12998: LIST
12999: LIST
13000: PUSH
13001: EMPTY
13002: LIST
13003: LIST
13004: ST_TO_ADDR
13005: GO 16080
13007: LD_INT 2
13009: DOUBLE
13010: EQUAL
13011: IFTRUE 13015
13013: GO 13099
13015: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
13016: LD_ADDR_VAR 0 2
13020: PUSH
13021: LD_INT 2
13023: PUSH
13024: LD_INT 4
13026: PUSH
13027: LD_INT 11
13029: PUSH
13030: LD_INT 12
13032: PUSH
13033: LD_INT 15
13035: PUSH
13036: LD_INT 16
13038: PUSH
13039: LD_INT 22
13041: PUSH
13042: LD_INT 23
13044: PUSH
13045: LD_INT 26
13047: PUSH
13048: EMPTY
13049: LIST
13050: LIST
13051: LIST
13052: LIST
13053: LIST
13054: LIST
13055: LIST
13056: LIST
13057: LIST
13058: PUSH
13059: LD_INT 101
13061: PUSH
13062: LD_INT 102
13064: PUSH
13065: LD_INT 105
13067: PUSH
13068: LD_INT 106
13070: PUSH
13071: LD_INT 108
13073: PUSH
13074: LD_INT 116
13076: PUSH
13077: LD_INT 117
13079: PUSH
13080: LD_INT 118
13082: PUSH
13083: EMPTY
13084: LIST
13085: LIST
13086: LIST
13087: LIST
13088: LIST
13089: LIST
13090: LIST
13091: LIST
13092: PUSH
13093: EMPTY
13094: LIST
13095: LIST
13096: ST_TO_ADDR
13097: GO 16080
13099: LD_INT 3
13101: DOUBLE
13102: EQUAL
13103: IFTRUE 13107
13105: GO 13195
13107: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
13108: LD_ADDR_VAR 0 2
13112: PUSH
13113: LD_INT 2
13115: PUSH
13116: LD_INT 4
13118: PUSH
13119: LD_INT 5
13121: PUSH
13122: LD_INT 11
13124: PUSH
13125: LD_INT 12
13127: PUSH
13128: LD_INT 15
13130: PUSH
13131: LD_INT 16
13133: PUSH
13134: LD_INT 22
13136: PUSH
13137: LD_INT 26
13139: PUSH
13140: LD_INT 36
13142: PUSH
13143: EMPTY
13144: LIST
13145: LIST
13146: LIST
13147: LIST
13148: LIST
13149: LIST
13150: LIST
13151: LIST
13152: LIST
13153: LIST
13154: PUSH
13155: LD_INT 101
13157: PUSH
13158: LD_INT 102
13160: PUSH
13161: LD_INT 105
13163: PUSH
13164: LD_INT 106
13166: PUSH
13167: LD_INT 108
13169: PUSH
13170: LD_INT 116
13172: PUSH
13173: LD_INT 117
13175: PUSH
13176: LD_INT 118
13178: PUSH
13179: EMPTY
13180: LIST
13181: LIST
13182: LIST
13183: LIST
13184: LIST
13185: LIST
13186: LIST
13187: LIST
13188: PUSH
13189: EMPTY
13190: LIST
13191: LIST
13192: ST_TO_ADDR
13193: GO 16080
13195: LD_INT 4
13197: DOUBLE
13198: EQUAL
13199: IFTRUE 13203
13201: GO 13299
13203: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
13204: LD_ADDR_VAR 0 2
13208: PUSH
13209: LD_INT 2
13211: PUSH
13212: LD_INT 4
13214: PUSH
13215: LD_INT 5
13217: PUSH
13218: LD_INT 8
13220: PUSH
13221: LD_INT 11
13223: PUSH
13224: LD_INT 12
13226: PUSH
13227: LD_INT 15
13229: PUSH
13230: LD_INT 16
13232: PUSH
13233: LD_INT 22
13235: PUSH
13236: LD_INT 23
13238: PUSH
13239: LD_INT 26
13241: PUSH
13242: LD_INT 36
13244: PUSH
13245: EMPTY
13246: LIST
13247: LIST
13248: LIST
13249: LIST
13250: LIST
13251: LIST
13252: LIST
13253: LIST
13254: LIST
13255: LIST
13256: LIST
13257: LIST
13258: PUSH
13259: LD_INT 101
13261: PUSH
13262: LD_INT 102
13264: PUSH
13265: LD_INT 105
13267: PUSH
13268: LD_INT 106
13270: PUSH
13271: LD_INT 108
13273: PUSH
13274: LD_INT 116
13276: PUSH
13277: LD_INT 117
13279: PUSH
13280: LD_INT 118
13282: PUSH
13283: EMPTY
13284: LIST
13285: LIST
13286: LIST
13287: LIST
13288: LIST
13289: LIST
13290: LIST
13291: LIST
13292: PUSH
13293: EMPTY
13294: LIST
13295: LIST
13296: ST_TO_ADDR
13297: GO 16080
13299: LD_INT 5
13301: DOUBLE
13302: EQUAL
13303: IFTRUE 13307
13305: GO 13419
13307: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
13308: LD_ADDR_VAR 0 2
13312: PUSH
13313: LD_INT 2
13315: PUSH
13316: LD_INT 4
13318: PUSH
13319: LD_INT 5
13321: PUSH
13322: LD_INT 6
13324: PUSH
13325: LD_INT 8
13327: PUSH
13328: LD_INT 11
13330: PUSH
13331: LD_INT 12
13333: PUSH
13334: LD_INT 15
13336: PUSH
13337: LD_INT 16
13339: PUSH
13340: LD_INT 22
13342: PUSH
13343: LD_INT 23
13345: PUSH
13346: LD_INT 25
13348: PUSH
13349: LD_INT 26
13351: PUSH
13352: LD_INT 36
13354: PUSH
13355: EMPTY
13356: LIST
13357: LIST
13358: LIST
13359: LIST
13360: LIST
13361: LIST
13362: LIST
13363: LIST
13364: LIST
13365: LIST
13366: LIST
13367: LIST
13368: LIST
13369: LIST
13370: PUSH
13371: LD_INT 101
13373: PUSH
13374: LD_INT 102
13376: PUSH
13377: LD_INT 105
13379: PUSH
13380: LD_INT 106
13382: PUSH
13383: LD_INT 108
13385: PUSH
13386: LD_INT 109
13388: PUSH
13389: LD_INT 112
13391: PUSH
13392: LD_INT 116
13394: PUSH
13395: LD_INT 117
13397: PUSH
13398: LD_INT 118
13400: PUSH
13401: EMPTY
13402: LIST
13403: LIST
13404: LIST
13405: LIST
13406: LIST
13407: LIST
13408: LIST
13409: LIST
13410: LIST
13411: LIST
13412: PUSH
13413: EMPTY
13414: LIST
13415: LIST
13416: ST_TO_ADDR
13417: GO 16080
13419: LD_INT 6
13421: DOUBLE
13422: EQUAL
13423: IFTRUE 13427
13425: GO 13559
13427: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
13428: LD_ADDR_VAR 0 2
13432: PUSH
13433: LD_INT 2
13435: PUSH
13436: LD_INT 4
13438: PUSH
13439: LD_INT 5
13441: PUSH
13442: LD_INT 6
13444: PUSH
13445: LD_INT 8
13447: PUSH
13448: LD_INT 11
13450: PUSH
13451: LD_INT 12
13453: PUSH
13454: LD_INT 15
13456: PUSH
13457: LD_INT 16
13459: PUSH
13460: LD_INT 20
13462: PUSH
13463: LD_INT 21
13465: PUSH
13466: LD_INT 22
13468: PUSH
13469: LD_INT 23
13471: PUSH
13472: LD_INT 25
13474: PUSH
13475: LD_INT 26
13477: PUSH
13478: LD_INT 30
13480: PUSH
13481: LD_INT 31
13483: PUSH
13484: LD_INT 32
13486: PUSH
13487: LD_INT 36
13489: PUSH
13490: EMPTY
13491: LIST
13492: LIST
13493: LIST
13494: LIST
13495: LIST
13496: LIST
13497: LIST
13498: LIST
13499: LIST
13500: LIST
13501: LIST
13502: LIST
13503: LIST
13504: LIST
13505: LIST
13506: LIST
13507: LIST
13508: LIST
13509: LIST
13510: PUSH
13511: LD_INT 101
13513: PUSH
13514: LD_INT 102
13516: PUSH
13517: LD_INT 105
13519: PUSH
13520: LD_INT 106
13522: PUSH
13523: LD_INT 108
13525: PUSH
13526: LD_INT 109
13528: PUSH
13529: LD_INT 112
13531: PUSH
13532: LD_INT 116
13534: PUSH
13535: LD_INT 117
13537: PUSH
13538: LD_INT 118
13540: PUSH
13541: EMPTY
13542: LIST
13543: LIST
13544: LIST
13545: LIST
13546: LIST
13547: LIST
13548: LIST
13549: LIST
13550: LIST
13551: LIST
13552: PUSH
13553: EMPTY
13554: LIST
13555: LIST
13556: ST_TO_ADDR
13557: GO 16080
13559: LD_INT 7
13561: DOUBLE
13562: EQUAL
13563: IFTRUE 13567
13565: GO 13679
13567: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
13568: LD_ADDR_VAR 0 2
13572: PUSH
13573: LD_INT 2
13575: PUSH
13576: LD_INT 4
13578: PUSH
13579: LD_INT 5
13581: PUSH
13582: LD_INT 7
13584: PUSH
13585: LD_INT 11
13587: PUSH
13588: LD_INT 12
13590: PUSH
13591: LD_INT 15
13593: PUSH
13594: LD_INT 16
13596: PUSH
13597: LD_INT 20
13599: PUSH
13600: LD_INT 21
13602: PUSH
13603: LD_INT 22
13605: PUSH
13606: LD_INT 23
13608: PUSH
13609: LD_INT 25
13611: PUSH
13612: LD_INT 26
13614: PUSH
13615: EMPTY
13616: LIST
13617: LIST
13618: LIST
13619: LIST
13620: LIST
13621: LIST
13622: LIST
13623: LIST
13624: LIST
13625: LIST
13626: LIST
13627: LIST
13628: LIST
13629: LIST
13630: PUSH
13631: LD_INT 101
13633: PUSH
13634: LD_INT 102
13636: PUSH
13637: LD_INT 103
13639: PUSH
13640: LD_INT 105
13642: PUSH
13643: LD_INT 106
13645: PUSH
13646: LD_INT 108
13648: PUSH
13649: LD_INT 112
13651: PUSH
13652: LD_INT 116
13654: PUSH
13655: LD_INT 117
13657: PUSH
13658: LD_INT 118
13660: PUSH
13661: EMPTY
13662: LIST
13663: LIST
13664: LIST
13665: LIST
13666: LIST
13667: LIST
13668: LIST
13669: LIST
13670: LIST
13671: LIST
13672: PUSH
13673: EMPTY
13674: LIST
13675: LIST
13676: ST_TO_ADDR
13677: GO 16080
13679: LD_INT 8
13681: DOUBLE
13682: EQUAL
13683: IFTRUE 13687
13685: GO 13827
13687: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
13688: LD_ADDR_VAR 0 2
13692: PUSH
13693: LD_INT 2
13695: PUSH
13696: LD_INT 4
13698: PUSH
13699: LD_INT 5
13701: PUSH
13702: LD_INT 6
13704: PUSH
13705: LD_INT 7
13707: PUSH
13708: LD_INT 8
13710: PUSH
13711: LD_INT 11
13713: PUSH
13714: LD_INT 12
13716: PUSH
13717: LD_INT 15
13719: PUSH
13720: LD_INT 16
13722: PUSH
13723: LD_INT 20
13725: PUSH
13726: LD_INT 21
13728: PUSH
13729: LD_INT 22
13731: PUSH
13732: LD_INT 23
13734: PUSH
13735: LD_INT 25
13737: PUSH
13738: LD_INT 26
13740: PUSH
13741: LD_INT 30
13743: PUSH
13744: LD_INT 31
13746: PUSH
13747: LD_INT 32
13749: PUSH
13750: LD_INT 36
13752: PUSH
13753: EMPTY
13754: LIST
13755: LIST
13756: LIST
13757: LIST
13758: LIST
13759: LIST
13760: LIST
13761: LIST
13762: LIST
13763: LIST
13764: LIST
13765: LIST
13766: LIST
13767: LIST
13768: LIST
13769: LIST
13770: LIST
13771: LIST
13772: LIST
13773: LIST
13774: PUSH
13775: LD_INT 101
13777: PUSH
13778: LD_INT 102
13780: PUSH
13781: LD_INT 103
13783: PUSH
13784: LD_INT 105
13786: PUSH
13787: LD_INT 106
13789: PUSH
13790: LD_INT 108
13792: PUSH
13793: LD_INT 109
13795: PUSH
13796: LD_INT 112
13798: PUSH
13799: LD_INT 116
13801: PUSH
13802: LD_INT 117
13804: PUSH
13805: LD_INT 118
13807: PUSH
13808: EMPTY
13809: LIST
13810: LIST
13811: LIST
13812: LIST
13813: LIST
13814: LIST
13815: LIST
13816: LIST
13817: LIST
13818: LIST
13819: LIST
13820: PUSH
13821: EMPTY
13822: LIST
13823: LIST
13824: ST_TO_ADDR
13825: GO 16080
13827: LD_INT 9
13829: DOUBLE
13830: EQUAL
13831: IFTRUE 13835
13833: GO 13983
13835: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
13836: LD_ADDR_VAR 0 2
13840: PUSH
13841: LD_INT 2
13843: PUSH
13844: LD_INT 4
13846: PUSH
13847: LD_INT 5
13849: PUSH
13850: LD_INT 6
13852: PUSH
13853: LD_INT 7
13855: PUSH
13856: LD_INT 8
13858: PUSH
13859: LD_INT 11
13861: PUSH
13862: LD_INT 12
13864: PUSH
13865: LD_INT 15
13867: PUSH
13868: LD_INT 16
13870: PUSH
13871: LD_INT 20
13873: PUSH
13874: LD_INT 21
13876: PUSH
13877: LD_INT 22
13879: PUSH
13880: LD_INT 23
13882: PUSH
13883: LD_INT 25
13885: PUSH
13886: LD_INT 26
13888: PUSH
13889: LD_INT 28
13891: PUSH
13892: LD_INT 30
13894: PUSH
13895: LD_INT 31
13897: PUSH
13898: LD_INT 32
13900: PUSH
13901: LD_INT 36
13903: PUSH
13904: EMPTY
13905: LIST
13906: LIST
13907: LIST
13908: LIST
13909: LIST
13910: LIST
13911: LIST
13912: LIST
13913: LIST
13914: LIST
13915: LIST
13916: LIST
13917: LIST
13918: LIST
13919: LIST
13920: LIST
13921: LIST
13922: LIST
13923: LIST
13924: LIST
13925: LIST
13926: PUSH
13927: LD_INT 101
13929: PUSH
13930: LD_INT 102
13932: PUSH
13933: LD_INT 103
13935: PUSH
13936: LD_INT 105
13938: PUSH
13939: LD_INT 106
13941: PUSH
13942: LD_INT 108
13944: PUSH
13945: LD_INT 109
13947: PUSH
13948: LD_INT 112
13950: PUSH
13951: LD_INT 114
13953: PUSH
13954: LD_INT 116
13956: PUSH
13957: LD_INT 117
13959: PUSH
13960: LD_INT 118
13962: PUSH
13963: EMPTY
13964: LIST
13965: LIST
13966: LIST
13967: LIST
13968: LIST
13969: LIST
13970: LIST
13971: LIST
13972: LIST
13973: LIST
13974: LIST
13975: LIST
13976: PUSH
13977: EMPTY
13978: LIST
13979: LIST
13980: ST_TO_ADDR
13981: GO 16080
13983: LD_INT 10
13985: DOUBLE
13986: EQUAL
13987: IFTRUE 13991
13989: GO 14187
13991: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
13992: LD_ADDR_VAR 0 2
13996: PUSH
13997: LD_INT 2
13999: PUSH
14000: LD_INT 4
14002: PUSH
14003: LD_INT 5
14005: PUSH
14006: LD_INT 6
14008: PUSH
14009: LD_INT 7
14011: PUSH
14012: LD_INT 8
14014: PUSH
14015: LD_INT 9
14017: PUSH
14018: LD_INT 10
14020: PUSH
14021: LD_INT 11
14023: PUSH
14024: LD_INT 12
14026: PUSH
14027: LD_INT 13
14029: PUSH
14030: LD_INT 14
14032: PUSH
14033: LD_INT 15
14035: PUSH
14036: LD_INT 16
14038: PUSH
14039: LD_INT 17
14041: PUSH
14042: LD_INT 18
14044: PUSH
14045: LD_INT 19
14047: PUSH
14048: LD_INT 20
14050: PUSH
14051: LD_INT 21
14053: PUSH
14054: LD_INT 22
14056: PUSH
14057: LD_INT 23
14059: PUSH
14060: LD_INT 24
14062: PUSH
14063: LD_INT 25
14065: PUSH
14066: LD_INT 26
14068: PUSH
14069: LD_INT 28
14071: PUSH
14072: LD_INT 30
14074: PUSH
14075: LD_INT 31
14077: PUSH
14078: LD_INT 32
14080: PUSH
14081: LD_INT 36
14083: PUSH
14084: EMPTY
14085: LIST
14086: LIST
14087: LIST
14088: LIST
14089: LIST
14090: LIST
14091: LIST
14092: LIST
14093: LIST
14094: LIST
14095: LIST
14096: LIST
14097: LIST
14098: LIST
14099: LIST
14100: LIST
14101: LIST
14102: LIST
14103: LIST
14104: LIST
14105: LIST
14106: LIST
14107: LIST
14108: LIST
14109: LIST
14110: LIST
14111: LIST
14112: LIST
14113: LIST
14114: PUSH
14115: LD_INT 101
14117: PUSH
14118: LD_INT 102
14120: PUSH
14121: LD_INT 103
14123: PUSH
14124: LD_INT 104
14126: PUSH
14127: LD_INT 105
14129: PUSH
14130: LD_INT 106
14132: PUSH
14133: LD_INT 107
14135: PUSH
14136: LD_INT 108
14138: PUSH
14139: LD_INT 109
14141: PUSH
14142: LD_INT 110
14144: PUSH
14145: LD_INT 111
14147: PUSH
14148: LD_INT 112
14150: PUSH
14151: LD_INT 114
14153: PUSH
14154: LD_INT 116
14156: PUSH
14157: LD_INT 117
14159: PUSH
14160: LD_INT 118
14162: PUSH
14163: EMPTY
14164: LIST
14165: LIST
14166: LIST
14167: LIST
14168: LIST
14169: LIST
14170: LIST
14171: LIST
14172: LIST
14173: LIST
14174: LIST
14175: LIST
14176: LIST
14177: LIST
14178: LIST
14179: LIST
14180: PUSH
14181: EMPTY
14182: LIST
14183: LIST
14184: ST_TO_ADDR
14185: GO 16080
14187: LD_INT 11
14189: DOUBLE
14190: EQUAL
14191: IFTRUE 14195
14193: GO 14399
14195: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
14196: LD_ADDR_VAR 0 2
14200: PUSH
14201: LD_INT 2
14203: PUSH
14204: LD_INT 3
14206: PUSH
14207: LD_INT 4
14209: PUSH
14210: LD_INT 5
14212: PUSH
14213: LD_INT 6
14215: PUSH
14216: LD_INT 7
14218: PUSH
14219: LD_INT 8
14221: PUSH
14222: LD_INT 9
14224: PUSH
14225: LD_INT 10
14227: PUSH
14228: LD_INT 11
14230: PUSH
14231: LD_INT 12
14233: PUSH
14234: LD_INT 13
14236: PUSH
14237: LD_INT 14
14239: PUSH
14240: LD_INT 15
14242: PUSH
14243: LD_INT 16
14245: PUSH
14246: LD_INT 17
14248: PUSH
14249: LD_INT 18
14251: PUSH
14252: LD_INT 19
14254: PUSH
14255: LD_INT 20
14257: PUSH
14258: LD_INT 21
14260: PUSH
14261: LD_INT 22
14263: PUSH
14264: LD_INT 23
14266: PUSH
14267: LD_INT 24
14269: PUSH
14270: LD_INT 25
14272: PUSH
14273: LD_INT 26
14275: PUSH
14276: LD_INT 28
14278: PUSH
14279: LD_INT 30
14281: PUSH
14282: LD_INT 31
14284: PUSH
14285: LD_INT 32
14287: PUSH
14288: LD_INT 34
14290: PUSH
14291: LD_INT 36
14293: PUSH
14294: EMPTY
14295: LIST
14296: LIST
14297: LIST
14298: LIST
14299: LIST
14300: LIST
14301: LIST
14302: LIST
14303: LIST
14304: LIST
14305: LIST
14306: LIST
14307: LIST
14308: LIST
14309: LIST
14310: LIST
14311: LIST
14312: LIST
14313: LIST
14314: LIST
14315: LIST
14316: LIST
14317: LIST
14318: LIST
14319: LIST
14320: LIST
14321: LIST
14322: LIST
14323: LIST
14324: LIST
14325: LIST
14326: PUSH
14327: LD_INT 101
14329: PUSH
14330: LD_INT 102
14332: PUSH
14333: LD_INT 103
14335: PUSH
14336: LD_INT 104
14338: PUSH
14339: LD_INT 105
14341: PUSH
14342: LD_INT 106
14344: PUSH
14345: LD_INT 107
14347: PUSH
14348: LD_INT 108
14350: PUSH
14351: LD_INT 109
14353: PUSH
14354: LD_INT 110
14356: PUSH
14357: LD_INT 111
14359: PUSH
14360: LD_INT 112
14362: PUSH
14363: LD_INT 114
14365: PUSH
14366: LD_INT 116
14368: PUSH
14369: LD_INT 117
14371: PUSH
14372: LD_INT 118
14374: PUSH
14375: EMPTY
14376: LIST
14377: LIST
14378: LIST
14379: LIST
14380: LIST
14381: LIST
14382: LIST
14383: LIST
14384: LIST
14385: LIST
14386: LIST
14387: LIST
14388: LIST
14389: LIST
14390: LIST
14391: LIST
14392: PUSH
14393: EMPTY
14394: LIST
14395: LIST
14396: ST_TO_ADDR
14397: GO 16080
14399: LD_INT 12
14401: DOUBLE
14402: EQUAL
14403: IFTRUE 14407
14405: GO 14627
14407: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
14408: LD_ADDR_VAR 0 2
14412: PUSH
14413: LD_INT 1
14415: PUSH
14416: LD_INT 2
14418: PUSH
14419: LD_INT 3
14421: PUSH
14422: LD_INT 4
14424: PUSH
14425: LD_INT 5
14427: PUSH
14428: LD_INT 6
14430: PUSH
14431: LD_INT 7
14433: PUSH
14434: LD_INT 8
14436: PUSH
14437: LD_INT 9
14439: PUSH
14440: LD_INT 10
14442: PUSH
14443: LD_INT 11
14445: PUSH
14446: LD_INT 12
14448: PUSH
14449: LD_INT 13
14451: PUSH
14452: LD_INT 14
14454: PUSH
14455: LD_INT 15
14457: PUSH
14458: LD_INT 16
14460: PUSH
14461: LD_INT 17
14463: PUSH
14464: LD_INT 18
14466: PUSH
14467: LD_INT 19
14469: PUSH
14470: LD_INT 20
14472: PUSH
14473: LD_INT 21
14475: PUSH
14476: LD_INT 22
14478: PUSH
14479: LD_INT 23
14481: PUSH
14482: LD_INT 24
14484: PUSH
14485: LD_INT 25
14487: PUSH
14488: LD_INT 26
14490: PUSH
14491: LD_INT 27
14493: PUSH
14494: LD_INT 28
14496: PUSH
14497: LD_INT 30
14499: PUSH
14500: LD_INT 31
14502: PUSH
14503: LD_INT 32
14505: PUSH
14506: LD_INT 33
14508: PUSH
14509: LD_INT 34
14511: PUSH
14512: LD_INT 36
14514: PUSH
14515: EMPTY
14516: LIST
14517: LIST
14518: LIST
14519: LIST
14520: LIST
14521: LIST
14522: LIST
14523: LIST
14524: LIST
14525: LIST
14526: LIST
14527: LIST
14528: LIST
14529: LIST
14530: LIST
14531: LIST
14532: LIST
14533: LIST
14534: LIST
14535: LIST
14536: LIST
14537: LIST
14538: LIST
14539: LIST
14540: LIST
14541: LIST
14542: LIST
14543: LIST
14544: LIST
14545: LIST
14546: LIST
14547: LIST
14548: LIST
14549: LIST
14550: PUSH
14551: LD_INT 101
14553: PUSH
14554: LD_INT 102
14556: PUSH
14557: LD_INT 103
14559: PUSH
14560: LD_INT 104
14562: PUSH
14563: LD_INT 105
14565: PUSH
14566: LD_INT 106
14568: PUSH
14569: LD_INT 107
14571: PUSH
14572: LD_INT 108
14574: PUSH
14575: LD_INT 109
14577: PUSH
14578: LD_INT 110
14580: PUSH
14581: LD_INT 111
14583: PUSH
14584: LD_INT 112
14586: PUSH
14587: LD_INT 113
14589: PUSH
14590: LD_INT 114
14592: PUSH
14593: LD_INT 116
14595: PUSH
14596: LD_INT 117
14598: PUSH
14599: LD_INT 118
14601: PUSH
14602: EMPTY
14603: LIST
14604: LIST
14605: LIST
14606: LIST
14607: LIST
14608: LIST
14609: LIST
14610: LIST
14611: LIST
14612: LIST
14613: LIST
14614: LIST
14615: LIST
14616: LIST
14617: LIST
14618: LIST
14619: LIST
14620: PUSH
14621: EMPTY
14622: LIST
14623: LIST
14624: ST_TO_ADDR
14625: GO 16080
14627: LD_INT 13
14629: DOUBLE
14630: EQUAL
14631: IFTRUE 14635
14633: GO 14843
14635: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
14636: LD_ADDR_VAR 0 2
14640: PUSH
14641: LD_INT 1
14643: PUSH
14644: LD_INT 2
14646: PUSH
14647: LD_INT 3
14649: PUSH
14650: LD_INT 4
14652: PUSH
14653: LD_INT 5
14655: PUSH
14656: LD_INT 8
14658: PUSH
14659: LD_INT 9
14661: PUSH
14662: LD_INT 10
14664: PUSH
14665: LD_INT 11
14667: PUSH
14668: LD_INT 12
14670: PUSH
14671: LD_INT 14
14673: PUSH
14674: LD_INT 15
14676: PUSH
14677: LD_INT 16
14679: PUSH
14680: LD_INT 17
14682: PUSH
14683: LD_INT 18
14685: PUSH
14686: LD_INT 19
14688: PUSH
14689: LD_INT 20
14691: PUSH
14692: LD_INT 21
14694: PUSH
14695: LD_INT 22
14697: PUSH
14698: LD_INT 23
14700: PUSH
14701: LD_INT 24
14703: PUSH
14704: LD_INT 25
14706: PUSH
14707: LD_INT 26
14709: PUSH
14710: LD_INT 27
14712: PUSH
14713: LD_INT 28
14715: PUSH
14716: LD_INT 30
14718: PUSH
14719: LD_INT 31
14721: PUSH
14722: LD_INT 32
14724: PUSH
14725: LD_INT 33
14727: PUSH
14728: LD_INT 34
14730: PUSH
14731: LD_INT 36
14733: PUSH
14734: EMPTY
14735: LIST
14736: LIST
14737: LIST
14738: LIST
14739: LIST
14740: LIST
14741: LIST
14742: LIST
14743: LIST
14744: LIST
14745: LIST
14746: LIST
14747: LIST
14748: LIST
14749: LIST
14750: LIST
14751: LIST
14752: LIST
14753: LIST
14754: LIST
14755: LIST
14756: LIST
14757: LIST
14758: LIST
14759: LIST
14760: LIST
14761: LIST
14762: LIST
14763: LIST
14764: LIST
14765: LIST
14766: PUSH
14767: LD_INT 101
14769: PUSH
14770: LD_INT 102
14772: PUSH
14773: LD_INT 103
14775: PUSH
14776: LD_INT 104
14778: PUSH
14779: LD_INT 105
14781: PUSH
14782: LD_INT 106
14784: PUSH
14785: LD_INT 107
14787: PUSH
14788: LD_INT 108
14790: PUSH
14791: LD_INT 109
14793: PUSH
14794: LD_INT 110
14796: PUSH
14797: LD_INT 111
14799: PUSH
14800: LD_INT 112
14802: PUSH
14803: LD_INT 113
14805: PUSH
14806: LD_INT 114
14808: PUSH
14809: LD_INT 116
14811: PUSH
14812: LD_INT 117
14814: PUSH
14815: LD_INT 118
14817: PUSH
14818: EMPTY
14819: LIST
14820: LIST
14821: LIST
14822: LIST
14823: LIST
14824: LIST
14825: LIST
14826: LIST
14827: LIST
14828: LIST
14829: LIST
14830: LIST
14831: LIST
14832: LIST
14833: LIST
14834: LIST
14835: LIST
14836: PUSH
14837: EMPTY
14838: LIST
14839: LIST
14840: ST_TO_ADDR
14841: GO 16080
14843: LD_INT 14
14845: DOUBLE
14846: EQUAL
14847: IFTRUE 14851
14849: GO 15075
14851: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
14852: LD_ADDR_VAR 0 2
14856: PUSH
14857: LD_INT 1
14859: PUSH
14860: LD_INT 2
14862: PUSH
14863: LD_INT 3
14865: PUSH
14866: LD_INT 4
14868: PUSH
14869: LD_INT 5
14871: PUSH
14872: LD_INT 6
14874: PUSH
14875: LD_INT 7
14877: PUSH
14878: LD_INT 8
14880: PUSH
14881: LD_INT 9
14883: PUSH
14884: LD_INT 10
14886: PUSH
14887: LD_INT 11
14889: PUSH
14890: LD_INT 12
14892: PUSH
14893: LD_INT 13
14895: PUSH
14896: LD_INT 14
14898: PUSH
14899: LD_INT 15
14901: PUSH
14902: LD_INT 16
14904: PUSH
14905: LD_INT 17
14907: PUSH
14908: LD_INT 18
14910: PUSH
14911: LD_INT 19
14913: PUSH
14914: LD_INT 20
14916: PUSH
14917: LD_INT 21
14919: PUSH
14920: LD_INT 22
14922: PUSH
14923: LD_INT 23
14925: PUSH
14926: LD_INT 24
14928: PUSH
14929: LD_INT 25
14931: PUSH
14932: LD_INT 26
14934: PUSH
14935: LD_INT 27
14937: PUSH
14938: LD_INT 28
14940: PUSH
14941: LD_INT 29
14943: PUSH
14944: LD_INT 30
14946: PUSH
14947: LD_INT 31
14949: PUSH
14950: LD_INT 32
14952: PUSH
14953: LD_INT 33
14955: PUSH
14956: LD_INT 34
14958: PUSH
14959: LD_INT 36
14961: PUSH
14962: EMPTY
14963: LIST
14964: LIST
14965: LIST
14966: LIST
14967: LIST
14968: LIST
14969: LIST
14970: LIST
14971: LIST
14972: LIST
14973: LIST
14974: LIST
14975: LIST
14976: LIST
14977: LIST
14978: LIST
14979: LIST
14980: LIST
14981: LIST
14982: LIST
14983: LIST
14984: LIST
14985: LIST
14986: LIST
14987: LIST
14988: LIST
14989: LIST
14990: LIST
14991: LIST
14992: LIST
14993: LIST
14994: LIST
14995: LIST
14996: LIST
14997: LIST
14998: PUSH
14999: LD_INT 101
15001: PUSH
15002: LD_INT 102
15004: PUSH
15005: LD_INT 103
15007: PUSH
15008: LD_INT 104
15010: PUSH
15011: LD_INT 105
15013: PUSH
15014: LD_INT 106
15016: PUSH
15017: LD_INT 107
15019: PUSH
15020: LD_INT 108
15022: PUSH
15023: LD_INT 109
15025: PUSH
15026: LD_INT 110
15028: PUSH
15029: LD_INT 111
15031: PUSH
15032: LD_INT 112
15034: PUSH
15035: LD_INT 113
15037: PUSH
15038: LD_INT 114
15040: PUSH
15041: LD_INT 116
15043: PUSH
15044: LD_INT 117
15046: PUSH
15047: LD_INT 118
15049: PUSH
15050: EMPTY
15051: LIST
15052: LIST
15053: LIST
15054: LIST
15055: LIST
15056: LIST
15057: LIST
15058: LIST
15059: LIST
15060: LIST
15061: LIST
15062: LIST
15063: LIST
15064: LIST
15065: LIST
15066: LIST
15067: LIST
15068: PUSH
15069: EMPTY
15070: LIST
15071: LIST
15072: ST_TO_ADDR
15073: GO 16080
15075: LD_INT 15
15077: DOUBLE
15078: EQUAL
15079: IFTRUE 15083
15081: GO 15307
15083: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
15084: LD_ADDR_VAR 0 2
15088: PUSH
15089: LD_INT 1
15091: PUSH
15092: LD_INT 2
15094: PUSH
15095: LD_INT 3
15097: PUSH
15098: LD_INT 4
15100: PUSH
15101: LD_INT 5
15103: PUSH
15104: LD_INT 6
15106: PUSH
15107: LD_INT 7
15109: PUSH
15110: LD_INT 8
15112: PUSH
15113: LD_INT 9
15115: PUSH
15116: LD_INT 10
15118: PUSH
15119: LD_INT 11
15121: PUSH
15122: LD_INT 12
15124: PUSH
15125: LD_INT 13
15127: PUSH
15128: LD_INT 14
15130: PUSH
15131: LD_INT 15
15133: PUSH
15134: LD_INT 16
15136: PUSH
15137: LD_INT 17
15139: PUSH
15140: LD_INT 18
15142: PUSH
15143: LD_INT 19
15145: PUSH
15146: LD_INT 20
15148: PUSH
15149: LD_INT 21
15151: PUSH
15152: LD_INT 22
15154: PUSH
15155: LD_INT 23
15157: PUSH
15158: LD_INT 24
15160: PUSH
15161: LD_INT 25
15163: PUSH
15164: LD_INT 26
15166: PUSH
15167: LD_INT 27
15169: PUSH
15170: LD_INT 28
15172: PUSH
15173: LD_INT 29
15175: PUSH
15176: LD_INT 30
15178: PUSH
15179: LD_INT 31
15181: PUSH
15182: LD_INT 32
15184: PUSH
15185: LD_INT 33
15187: PUSH
15188: LD_INT 34
15190: PUSH
15191: LD_INT 36
15193: PUSH
15194: EMPTY
15195: LIST
15196: LIST
15197: LIST
15198: LIST
15199: LIST
15200: LIST
15201: LIST
15202: LIST
15203: LIST
15204: LIST
15205: LIST
15206: LIST
15207: LIST
15208: LIST
15209: LIST
15210: LIST
15211: LIST
15212: LIST
15213: LIST
15214: LIST
15215: LIST
15216: LIST
15217: LIST
15218: LIST
15219: LIST
15220: LIST
15221: LIST
15222: LIST
15223: LIST
15224: LIST
15225: LIST
15226: LIST
15227: LIST
15228: LIST
15229: LIST
15230: PUSH
15231: LD_INT 101
15233: PUSH
15234: LD_INT 102
15236: PUSH
15237: LD_INT 103
15239: PUSH
15240: LD_INT 104
15242: PUSH
15243: LD_INT 105
15245: PUSH
15246: LD_INT 106
15248: PUSH
15249: LD_INT 107
15251: PUSH
15252: LD_INT 108
15254: PUSH
15255: LD_INT 109
15257: PUSH
15258: LD_INT 110
15260: PUSH
15261: LD_INT 111
15263: PUSH
15264: LD_INT 112
15266: PUSH
15267: LD_INT 113
15269: PUSH
15270: LD_INT 114
15272: PUSH
15273: LD_INT 116
15275: PUSH
15276: LD_INT 117
15278: PUSH
15279: LD_INT 118
15281: PUSH
15282: EMPTY
15283: LIST
15284: LIST
15285: LIST
15286: LIST
15287: LIST
15288: LIST
15289: LIST
15290: LIST
15291: LIST
15292: LIST
15293: LIST
15294: LIST
15295: LIST
15296: LIST
15297: LIST
15298: LIST
15299: LIST
15300: PUSH
15301: EMPTY
15302: LIST
15303: LIST
15304: ST_TO_ADDR
15305: GO 16080
15307: LD_INT 16
15309: DOUBLE
15310: EQUAL
15311: IFTRUE 15315
15313: GO 15451
15315: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
15316: LD_ADDR_VAR 0 2
15320: PUSH
15321: LD_INT 2
15323: PUSH
15324: LD_INT 4
15326: PUSH
15327: LD_INT 5
15329: PUSH
15330: LD_INT 7
15332: PUSH
15333: LD_INT 11
15335: PUSH
15336: LD_INT 12
15338: PUSH
15339: LD_INT 15
15341: PUSH
15342: LD_INT 16
15344: PUSH
15345: LD_INT 20
15347: PUSH
15348: LD_INT 21
15350: PUSH
15351: LD_INT 22
15353: PUSH
15354: LD_INT 23
15356: PUSH
15357: LD_INT 25
15359: PUSH
15360: LD_INT 26
15362: PUSH
15363: LD_INT 30
15365: PUSH
15366: LD_INT 31
15368: PUSH
15369: LD_INT 32
15371: PUSH
15372: LD_INT 33
15374: PUSH
15375: LD_INT 34
15377: PUSH
15378: EMPTY
15379: LIST
15380: LIST
15381: LIST
15382: LIST
15383: LIST
15384: LIST
15385: LIST
15386: LIST
15387: LIST
15388: LIST
15389: LIST
15390: LIST
15391: LIST
15392: LIST
15393: LIST
15394: LIST
15395: LIST
15396: LIST
15397: LIST
15398: PUSH
15399: LD_INT 101
15401: PUSH
15402: LD_INT 102
15404: PUSH
15405: LD_INT 103
15407: PUSH
15408: LD_INT 106
15410: PUSH
15411: LD_INT 108
15413: PUSH
15414: LD_INT 112
15416: PUSH
15417: LD_INT 113
15419: PUSH
15420: LD_INT 114
15422: PUSH
15423: LD_INT 116
15425: PUSH
15426: LD_INT 117
15428: PUSH
15429: LD_INT 118
15431: PUSH
15432: EMPTY
15433: LIST
15434: LIST
15435: LIST
15436: LIST
15437: LIST
15438: LIST
15439: LIST
15440: LIST
15441: LIST
15442: LIST
15443: LIST
15444: PUSH
15445: EMPTY
15446: LIST
15447: LIST
15448: ST_TO_ADDR
15449: GO 16080
15451: LD_INT 17
15453: DOUBLE
15454: EQUAL
15455: IFTRUE 15459
15457: GO 15683
15459: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
15460: LD_ADDR_VAR 0 2
15464: PUSH
15465: LD_INT 1
15467: PUSH
15468: LD_INT 2
15470: PUSH
15471: LD_INT 3
15473: PUSH
15474: LD_INT 4
15476: PUSH
15477: LD_INT 5
15479: PUSH
15480: LD_INT 6
15482: PUSH
15483: LD_INT 7
15485: PUSH
15486: LD_INT 8
15488: PUSH
15489: LD_INT 9
15491: PUSH
15492: LD_INT 10
15494: PUSH
15495: LD_INT 11
15497: PUSH
15498: LD_INT 12
15500: PUSH
15501: LD_INT 13
15503: PUSH
15504: LD_INT 14
15506: PUSH
15507: LD_INT 15
15509: PUSH
15510: LD_INT 16
15512: PUSH
15513: LD_INT 17
15515: PUSH
15516: LD_INT 18
15518: PUSH
15519: LD_INT 19
15521: PUSH
15522: LD_INT 20
15524: PUSH
15525: LD_INT 21
15527: PUSH
15528: LD_INT 22
15530: PUSH
15531: LD_INT 23
15533: PUSH
15534: LD_INT 24
15536: PUSH
15537: LD_INT 25
15539: PUSH
15540: LD_INT 26
15542: PUSH
15543: LD_INT 27
15545: PUSH
15546: LD_INT 28
15548: PUSH
15549: LD_INT 29
15551: PUSH
15552: LD_INT 30
15554: PUSH
15555: LD_INT 31
15557: PUSH
15558: LD_INT 32
15560: PUSH
15561: LD_INT 33
15563: PUSH
15564: LD_INT 34
15566: PUSH
15567: LD_INT 36
15569: PUSH
15570: EMPTY
15571: LIST
15572: LIST
15573: LIST
15574: LIST
15575: LIST
15576: LIST
15577: LIST
15578: LIST
15579: LIST
15580: LIST
15581: LIST
15582: LIST
15583: LIST
15584: LIST
15585: LIST
15586: LIST
15587: LIST
15588: LIST
15589: LIST
15590: LIST
15591: LIST
15592: LIST
15593: LIST
15594: LIST
15595: LIST
15596: LIST
15597: LIST
15598: LIST
15599: LIST
15600: LIST
15601: LIST
15602: LIST
15603: LIST
15604: LIST
15605: LIST
15606: PUSH
15607: LD_INT 101
15609: PUSH
15610: LD_INT 102
15612: PUSH
15613: LD_INT 103
15615: PUSH
15616: LD_INT 104
15618: PUSH
15619: LD_INT 105
15621: PUSH
15622: LD_INT 106
15624: PUSH
15625: LD_INT 107
15627: PUSH
15628: LD_INT 108
15630: PUSH
15631: LD_INT 109
15633: PUSH
15634: LD_INT 110
15636: PUSH
15637: LD_INT 111
15639: PUSH
15640: LD_INT 112
15642: PUSH
15643: LD_INT 113
15645: PUSH
15646: LD_INT 114
15648: PUSH
15649: LD_INT 116
15651: PUSH
15652: LD_INT 117
15654: PUSH
15655: LD_INT 118
15657: PUSH
15658: EMPTY
15659: LIST
15660: LIST
15661: LIST
15662: LIST
15663: LIST
15664: LIST
15665: LIST
15666: LIST
15667: LIST
15668: LIST
15669: LIST
15670: LIST
15671: LIST
15672: LIST
15673: LIST
15674: LIST
15675: LIST
15676: PUSH
15677: EMPTY
15678: LIST
15679: LIST
15680: ST_TO_ADDR
15681: GO 16080
15683: LD_INT 18
15685: DOUBLE
15686: EQUAL
15687: IFTRUE 15691
15689: GO 15839
15691: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
15692: LD_ADDR_VAR 0 2
15696: PUSH
15697: LD_INT 2
15699: PUSH
15700: LD_INT 4
15702: PUSH
15703: LD_INT 5
15705: PUSH
15706: LD_INT 7
15708: PUSH
15709: LD_INT 11
15711: PUSH
15712: LD_INT 12
15714: PUSH
15715: LD_INT 15
15717: PUSH
15718: LD_INT 16
15720: PUSH
15721: LD_INT 20
15723: PUSH
15724: LD_INT 21
15726: PUSH
15727: LD_INT 22
15729: PUSH
15730: LD_INT 23
15732: PUSH
15733: LD_INT 25
15735: PUSH
15736: LD_INT 26
15738: PUSH
15739: LD_INT 30
15741: PUSH
15742: LD_INT 31
15744: PUSH
15745: LD_INT 32
15747: PUSH
15748: LD_INT 33
15750: PUSH
15751: LD_INT 34
15753: PUSH
15754: LD_INT 35
15756: PUSH
15757: LD_INT 36
15759: PUSH
15760: EMPTY
15761: LIST
15762: LIST
15763: LIST
15764: LIST
15765: LIST
15766: LIST
15767: LIST
15768: LIST
15769: LIST
15770: LIST
15771: LIST
15772: LIST
15773: LIST
15774: LIST
15775: LIST
15776: LIST
15777: LIST
15778: LIST
15779: LIST
15780: LIST
15781: LIST
15782: PUSH
15783: LD_INT 101
15785: PUSH
15786: LD_INT 102
15788: PUSH
15789: LD_INT 103
15791: PUSH
15792: LD_INT 106
15794: PUSH
15795: LD_INT 108
15797: PUSH
15798: LD_INT 112
15800: PUSH
15801: LD_INT 113
15803: PUSH
15804: LD_INT 114
15806: PUSH
15807: LD_INT 115
15809: PUSH
15810: LD_INT 116
15812: PUSH
15813: LD_INT 117
15815: PUSH
15816: LD_INT 118
15818: PUSH
15819: EMPTY
15820: LIST
15821: LIST
15822: LIST
15823: LIST
15824: LIST
15825: LIST
15826: LIST
15827: LIST
15828: LIST
15829: LIST
15830: LIST
15831: LIST
15832: PUSH
15833: EMPTY
15834: LIST
15835: LIST
15836: ST_TO_ADDR
15837: GO 16080
15839: LD_INT 19
15841: DOUBLE
15842: EQUAL
15843: IFTRUE 15847
15845: GO 16079
15847: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
15848: LD_ADDR_VAR 0 2
15852: PUSH
15853: LD_INT 1
15855: PUSH
15856: LD_INT 2
15858: PUSH
15859: LD_INT 3
15861: PUSH
15862: LD_INT 4
15864: PUSH
15865: LD_INT 5
15867: PUSH
15868: LD_INT 6
15870: PUSH
15871: LD_INT 7
15873: PUSH
15874: LD_INT 8
15876: PUSH
15877: LD_INT 9
15879: PUSH
15880: LD_INT 10
15882: PUSH
15883: LD_INT 11
15885: PUSH
15886: LD_INT 12
15888: PUSH
15889: LD_INT 13
15891: PUSH
15892: LD_INT 14
15894: PUSH
15895: LD_INT 15
15897: PUSH
15898: LD_INT 16
15900: PUSH
15901: LD_INT 17
15903: PUSH
15904: LD_INT 18
15906: PUSH
15907: LD_INT 19
15909: PUSH
15910: LD_INT 20
15912: PUSH
15913: LD_INT 21
15915: PUSH
15916: LD_INT 22
15918: PUSH
15919: LD_INT 23
15921: PUSH
15922: LD_INT 24
15924: PUSH
15925: LD_INT 25
15927: PUSH
15928: LD_INT 26
15930: PUSH
15931: LD_INT 27
15933: PUSH
15934: LD_INT 28
15936: PUSH
15937: LD_INT 29
15939: PUSH
15940: LD_INT 30
15942: PUSH
15943: LD_INT 31
15945: PUSH
15946: LD_INT 32
15948: PUSH
15949: LD_INT 33
15951: PUSH
15952: LD_INT 34
15954: PUSH
15955: LD_INT 35
15957: PUSH
15958: LD_INT 36
15960: PUSH
15961: EMPTY
15962: LIST
15963: LIST
15964: LIST
15965: LIST
15966: LIST
15967: LIST
15968: LIST
15969: LIST
15970: LIST
15971: LIST
15972: LIST
15973: LIST
15974: LIST
15975: LIST
15976: LIST
15977: LIST
15978: LIST
15979: LIST
15980: LIST
15981: LIST
15982: LIST
15983: LIST
15984: LIST
15985: LIST
15986: LIST
15987: LIST
15988: LIST
15989: LIST
15990: LIST
15991: LIST
15992: LIST
15993: LIST
15994: LIST
15995: LIST
15996: LIST
15997: LIST
15998: PUSH
15999: LD_INT 101
16001: PUSH
16002: LD_INT 102
16004: PUSH
16005: LD_INT 103
16007: PUSH
16008: LD_INT 104
16010: PUSH
16011: LD_INT 105
16013: PUSH
16014: LD_INT 106
16016: PUSH
16017: LD_INT 107
16019: PUSH
16020: LD_INT 108
16022: PUSH
16023: LD_INT 109
16025: PUSH
16026: LD_INT 110
16028: PUSH
16029: LD_INT 111
16031: PUSH
16032: LD_INT 112
16034: PUSH
16035: LD_INT 113
16037: PUSH
16038: LD_INT 114
16040: PUSH
16041: LD_INT 115
16043: PUSH
16044: LD_INT 116
16046: PUSH
16047: LD_INT 117
16049: PUSH
16050: LD_INT 118
16052: PUSH
16053: EMPTY
16054: LIST
16055: LIST
16056: LIST
16057: LIST
16058: LIST
16059: LIST
16060: LIST
16061: LIST
16062: LIST
16063: LIST
16064: LIST
16065: LIST
16066: LIST
16067: LIST
16068: LIST
16069: LIST
16070: LIST
16071: LIST
16072: PUSH
16073: EMPTY
16074: LIST
16075: LIST
16076: ST_TO_ADDR
16077: GO 16080
16079: POP
// end else
16080: GO 16311
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
16082: LD_ADDR_VAR 0 2
16086: PUSH
16087: LD_INT 1
16089: PUSH
16090: LD_INT 2
16092: PUSH
16093: LD_INT 3
16095: PUSH
16096: LD_INT 4
16098: PUSH
16099: LD_INT 5
16101: PUSH
16102: LD_INT 6
16104: PUSH
16105: LD_INT 7
16107: PUSH
16108: LD_INT 8
16110: PUSH
16111: LD_INT 9
16113: PUSH
16114: LD_INT 10
16116: PUSH
16117: LD_INT 11
16119: PUSH
16120: LD_INT 12
16122: PUSH
16123: LD_INT 13
16125: PUSH
16126: LD_INT 14
16128: PUSH
16129: LD_INT 15
16131: PUSH
16132: LD_INT 16
16134: PUSH
16135: LD_INT 17
16137: PUSH
16138: LD_INT 18
16140: PUSH
16141: LD_INT 19
16143: PUSH
16144: LD_INT 20
16146: PUSH
16147: LD_INT 21
16149: PUSH
16150: LD_INT 22
16152: PUSH
16153: LD_INT 23
16155: PUSH
16156: LD_INT 24
16158: PUSH
16159: LD_INT 25
16161: PUSH
16162: LD_INT 26
16164: PUSH
16165: LD_INT 27
16167: PUSH
16168: LD_INT 28
16170: PUSH
16171: LD_INT 29
16173: PUSH
16174: LD_INT 30
16176: PUSH
16177: LD_INT 31
16179: PUSH
16180: LD_INT 32
16182: PUSH
16183: LD_INT 33
16185: PUSH
16186: LD_INT 34
16188: PUSH
16189: LD_INT 35
16191: PUSH
16192: LD_INT 36
16194: PUSH
16195: EMPTY
16196: LIST
16197: LIST
16198: LIST
16199: LIST
16200: LIST
16201: LIST
16202: LIST
16203: LIST
16204: LIST
16205: LIST
16206: LIST
16207: LIST
16208: LIST
16209: LIST
16210: LIST
16211: LIST
16212: LIST
16213: LIST
16214: LIST
16215: LIST
16216: LIST
16217: LIST
16218: LIST
16219: LIST
16220: LIST
16221: LIST
16222: LIST
16223: LIST
16224: LIST
16225: LIST
16226: LIST
16227: LIST
16228: LIST
16229: LIST
16230: LIST
16231: LIST
16232: PUSH
16233: LD_INT 101
16235: PUSH
16236: LD_INT 102
16238: PUSH
16239: LD_INT 103
16241: PUSH
16242: LD_INT 104
16244: PUSH
16245: LD_INT 105
16247: PUSH
16248: LD_INT 106
16250: PUSH
16251: LD_INT 107
16253: PUSH
16254: LD_INT 108
16256: PUSH
16257: LD_INT 109
16259: PUSH
16260: LD_INT 110
16262: PUSH
16263: LD_INT 111
16265: PUSH
16266: LD_INT 112
16268: PUSH
16269: LD_INT 113
16271: PUSH
16272: LD_INT 114
16274: PUSH
16275: LD_INT 115
16277: PUSH
16278: LD_INT 116
16280: PUSH
16281: LD_INT 117
16283: PUSH
16284: LD_INT 118
16286: PUSH
16287: EMPTY
16288: LIST
16289: LIST
16290: LIST
16291: LIST
16292: LIST
16293: LIST
16294: LIST
16295: LIST
16296: LIST
16297: LIST
16298: LIST
16299: LIST
16300: LIST
16301: LIST
16302: LIST
16303: LIST
16304: LIST
16305: LIST
16306: PUSH
16307: EMPTY
16308: LIST
16309: LIST
16310: ST_TO_ADDR
// if result then
16311: LD_VAR 0 2
16315: IFFALSE 17101
// begin normal :=  ;
16317: LD_ADDR_VAR 0 5
16321: PUSH
16322: LD_STRING 
16324: ST_TO_ADDR
// hardcore :=  ;
16325: LD_ADDR_VAR 0 6
16329: PUSH
16330: LD_STRING 
16332: ST_TO_ADDR
// active :=  ;
16333: LD_ADDR_VAR 0 7
16337: PUSH
16338: LD_STRING 
16340: ST_TO_ADDR
// for i = 1 to normalCounter do
16341: LD_ADDR_VAR 0 8
16345: PUSH
16346: DOUBLE
16347: LD_INT 1
16349: DEC
16350: ST_TO_ADDR
16351: LD_EXP 27
16355: PUSH
16356: FOR_TO
16357: IFFALSE 16458
// begin tmp := 0 ;
16359: LD_ADDR_VAR 0 3
16363: PUSH
16364: LD_STRING 0
16366: ST_TO_ADDR
// if result [ 1 ] then
16367: LD_VAR 0 2
16371: PUSH
16372: LD_INT 1
16374: ARRAY
16375: IFFALSE 16440
// if result [ 1 ] [ 1 ] = i then
16377: LD_VAR 0 2
16381: PUSH
16382: LD_INT 1
16384: ARRAY
16385: PUSH
16386: LD_INT 1
16388: ARRAY
16389: PUSH
16390: LD_VAR 0 8
16394: EQUAL
16395: IFFALSE 16440
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
16397: LD_ADDR_VAR 0 2
16401: PUSH
16402: LD_VAR 0 2
16406: PPUSH
16407: LD_INT 1
16409: PPUSH
16410: LD_VAR 0 2
16414: PUSH
16415: LD_INT 1
16417: ARRAY
16418: PPUSH
16419: LD_INT 1
16421: PPUSH
16422: CALL_OW 3
16426: PPUSH
16427: CALL_OW 1
16431: ST_TO_ADDR
// tmp := 1 ;
16432: LD_ADDR_VAR 0 3
16436: PUSH
16437: LD_STRING 1
16439: ST_TO_ADDR
// end ; normal := normal & tmp ;
16440: LD_ADDR_VAR 0 5
16444: PUSH
16445: LD_VAR 0 5
16449: PUSH
16450: LD_VAR 0 3
16454: STR
16455: ST_TO_ADDR
// end ;
16456: GO 16356
16458: POP
16459: POP
// for i = 1 to hardcoreCounter do
16460: LD_ADDR_VAR 0 8
16464: PUSH
16465: DOUBLE
16466: LD_INT 1
16468: DEC
16469: ST_TO_ADDR
16470: LD_EXP 28
16474: PUSH
16475: FOR_TO
16476: IFFALSE 16581
// begin tmp := 0 ;
16478: LD_ADDR_VAR 0 3
16482: PUSH
16483: LD_STRING 0
16485: ST_TO_ADDR
// if result [ 2 ] then
16486: LD_VAR 0 2
16490: PUSH
16491: LD_INT 2
16493: ARRAY
16494: IFFALSE 16563
// if result [ 2 ] [ 1 ] = 100 + i then
16496: LD_VAR 0 2
16500: PUSH
16501: LD_INT 2
16503: ARRAY
16504: PUSH
16505: LD_INT 1
16507: ARRAY
16508: PUSH
16509: LD_INT 100
16511: PUSH
16512: LD_VAR 0 8
16516: PLUS
16517: EQUAL
16518: IFFALSE 16563
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
16520: LD_ADDR_VAR 0 2
16524: PUSH
16525: LD_VAR 0 2
16529: PPUSH
16530: LD_INT 2
16532: PPUSH
16533: LD_VAR 0 2
16537: PUSH
16538: LD_INT 2
16540: ARRAY
16541: PPUSH
16542: LD_INT 1
16544: PPUSH
16545: CALL_OW 3
16549: PPUSH
16550: CALL_OW 1
16554: ST_TO_ADDR
// tmp := 1 ;
16555: LD_ADDR_VAR 0 3
16559: PUSH
16560: LD_STRING 1
16562: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
16563: LD_ADDR_VAR 0 6
16567: PUSH
16568: LD_VAR 0 6
16572: PUSH
16573: LD_VAR 0 3
16577: STR
16578: ST_TO_ADDR
// end ;
16579: GO 16475
16581: POP
16582: POP
// if isGameLoad then
16583: LD_VAR 0 1
16587: IFFALSE 17062
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
16589: LD_ADDR_VAR 0 4
16593: PUSH
16594: LD_EXP 31
16598: PUSH
16599: LD_EXP 30
16603: PUSH
16604: LD_EXP 32
16608: PUSH
16609: LD_EXP 29
16613: PUSH
16614: LD_EXP 33
16618: PUSH
16619: LD_EXP 34
16623: PUSH
16624: LD_EXP 35
16628: PUSH
16629: LD_EXP 36
16633: PUSH
16634: LD_EXP 37
16638: PUSH
16639: LD_EXP 38
16643: PUSH
16644: LD_EXP 39
16648: PUSH
16649: LD_EXP 40
16653: PUSH
16654: LD_EXP 41
16658: PUSH
16659: LD_EXP 42
16663: PUSH
16664: LD_EXP 50
16668: PUSH
16669: LD_EXP 51
16673: PUSH
16674: LD_EXP 52
16678: PUSH
16679: LD_EXP 53
16683: PUSH
16684: LD_EXP 55
16688: PUSH
16689: LD_EXP 56
16693: PUSH
16694: LD_EXP 57
16698: PUSH
16699: LD_EXP 60
16703: PUSH
16704: LD_EXP 62
16708: PUSH
16709: LD_EXP 63
16713: PUSH
16714: LD_EXP 64
16718: PUSH
16719: LD_EXP 66
16723: PUSH
16724: LD_EXP 67
16728: PUSH
16729: LD_EXP 70
16733: PUSH
16734: LD_EXP 71
16738: PUSH
16739: LD_EXP 72
16743: PUSH
16744: LD_EXP 73
16748: PUSH
16749: LD_EXP 74
16753: PUSH
16754: LD_EXP 75
16758: PUSH
16759: LD_EXP 76
16763: PUSH
16764: LD_EXP 77
16768: PUSH
16769: LD_EXP 78
16773: PUSH
16774: LD_EXP 43
16778: PUSH
16779: LD_EXP 44
16783: PUSH
16784: LD_EXP 47
16788: PUSH
16789: LD_EXP 48
16793: PUSH
16794: LD_EXP 49
16798: PUSH
16799: LD_EXP 45
16803: PUSH
16804: LD_EXP 46
16808: PUSH
16809: LD_EXP 54
16813: PUSH
16814: LD_EXP 58
16818: PUSH
16819: LD_EXP 59
16823: PUSH
16824: LD_EXP 61
16828: PUSH
16829: LD_EXP 65
16833: PUSH
16834: LD_EXP 68
16838: PUSH
16839: LD_EXP 69
16843: PUSH
16844: LD_EXP 79
16848: PUSH
16849: LD_EXP 80
16853: PUSH
16854: LD_EXP 81
16858: PUSH
16859: LD_EXP 82
16863: PUSH
16864: EMPTY
16865: LIST
16866: LIST
16867: LIST
16868: LIST
16869: LIST
16870: LIST
16871: LIST
16872: LIST
16873: LIST
16874: LIST
16875: LIST
16876: LIST
16877: LIST
16878: LIST
16879: LIST
16880: LIST
16881: LIST
16882: LIST
16883: LIST
16884: LIST
16885: LIST
16886: LIST
16887: LIST
16888: LIST
16889: LIST
16890: LIST
16891: LIST
16892: LIST
16893: LIST
16894: LIST
16895: LIST
16896: LIST
16897: LIST
16898: LIST
16899: LIST
16900: LIST
16901: LIST
16902: LIST
16903: LIST
16904: LIST
16905: LIST
16906: LIST
16907: LIST
16908: LIST
16909: LIST
16910: LIST
16911: LIST
16912: LIST
16913: LIST
16914: LIST
16915: LIST
16916: LIST
16917: LIST
16918: LIST
16919: ST_TO_ADDR
// tmp :=  ;
16920: LD_ADDR_VAR 0 3
16924: PUSH
16925: LD_STRING 
16927: ST_TO_ADDR
// for i = 1 to normalCounter do
16928: LD_ADDR_VAR 0 8
16932: PUSH
16933: DOUBLE
16934: LD_INT 1
16936: DEC
16937: ST_TO_ADDR
16938: LD_EXP 27
16942: PUSH
16943: FOR_TO
16944: IFFALSE 16980
// begin if flags [ i ] then
16946: LD_VAR 0 4
16950: PUSH
16951: LD_VAR 0 8
16955: ARRAY
16956: IFFALSE 16978
// tmp := tmp & i & ; ;
16958: LD_ADDR_VAR 0 3
16962: PUSH
16963: LD_VAR 0 3
16967: PUSH
16968: LD_VAR 0 8
16972: STR
16973: PUSH
16974: LD_STRING ;
16976: STR
16977: ST_TO_ADDR
// end ;
16978: GO 16943
16980: POP
16981: POP
// for i = 1 to hardcoreCounter do
16982: LD_ADDR_VAR 0 8
16986: PUSH
16987: DOUBLE
16988: LD_INT 1
16990: DEC
16991: ST_TO_ADDR
16992: LD_EXP 28
16996: PUSH
16997: FOR_TO
16998: IFFALSE 17044
// begin if flags [ normalCounter + i ] then
17000: LD_VAR 0 4
17004: PUSH
17005: LD_EXP 27
17009: PUSH
17010: LD_VAR 0 8
17014: PLUS
17015: ARRAY
17016: IFFALSE 17042
// tmp := tmp & ( 100 + i ) & ; ;
17018: LD_ADDR_VAR 0 3
17022: PUSH
17023: LD_VAR 0 3
17027: PUSH
17028: LD_INT 100
17030: PUSH
17031: LD_VAR 0 8
17035: PLUS
17036: STR
17037: PUSH
17038: LD_STRING ;
17040: STR
17041: ST_TO_ADDR
// end ;
17042: GO 16997
17044: POP
17045: POP
// if tmp then
17046: LD_VAR 0 3
17050: IFFALSE 17062
// active := tmp ;
17052: LD_ADDR_VAR 0 7
17056: PUSH
17057: LD_VAR 0 3
17061: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
17062: LD_STRING getStreamItemsFromMission("
17064: PUSH
17065: LD_VAR 0 5
17069: STR
17070: PUSH
17071: LD_STRING ","
17073: STR
17074: PUSH
17075: LD_VAR 0 6
17079: STR
17080: PUSH
17081: LD_STRING ","
17083: STR
17084: PUSH
17085: LD_VAR 0 7
17089: STR
17090: PUSH
17091: LD_STRING ")
17093: STR
17094: PPUSH
17095: CALL_OW 559
// end else
17099: GO 17108
// ToLua ( getStreamItemsFromMission("","","") ) ;
17101: LD_STRING getStreamItemsFromMission("","","")
17103: PPUSH
17104: CALL_OW 559
// end ;
17108: LD_VAR 0 2
17112: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
17113: LD_EXP 26
17117: PUSH
17118: LD_EXP 31
17122: AND
17123: IFFALSE 17247
17125: GO 17127
17127: DISABLE
17128: LD_INT 0
17130: PPUSH
17131: PPUSH
// begin enable ;
17132: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
17133: LD_ADDR_VAR 0 2
17137: PUSH
17138: LD_INT 22
17140: PUSH
17141: LD_OWVAR 2
17145: PUSH
17146: EMPTY
17147: LIST
17148: LIST
17149: PUSH
17150: LD_INT 2
17152: PUSH
17153: LD_INT 34
17155: PUSH
17156: LD_INT 7
17158: PUSH
17159: EMPTY
17160: LIST
17161: LIST
17162: PUSH
17163: LD_INT 34
17165: PUSH
17166: LD_INT 45
17168: PUSH
17169: EMPTY
17170: LIST
17171: LIST
17172: PUSH
17173: LD_INT 34
17175: PUSH
17176: LD_INT 28
17178: PUSH
17179: EMPTY
17180: LIST
17181: LIST
17182: PUSH
17183: LD_INT 34
17185: PUSH
17186: LD_INT 47
17188: PUSH
17189: EMPTY
17190: LIST
17191: LIST
17192: PUSH
17193: EMPTY
17194: LIST
17195: LIST
17196: LIST
17197: LIST
17198: LIST
17199: PUSH
17200: EMPTY
17201: LIST
17202: LIST
17203: PPUSH
17204: CALL_OW 69
17208: ST_TO_ADDR
// if not tmp then
17209: LD_VAR 0 2
17213: NOT
17214: IFFALSE 17218
// exit ;
17216: GO 17247
// for i in tmp do
17218: LD_ADDR_VAR 0 1
17222: PUSH
17223: LD_VAR 0 2
17227: PUSH
17228: FOR_IN
17229: IFFALSE 17245
// begin SetLives ( i , 0 ) ;
17231: LD_VAR 0 1
17235: PPUSH
17236: LD_INT 0
17238: PPUSH
17239: CALL_OW 234
// end ;
17243: GO 17228
17245: POP
17246: POP
// end ;
17247: PPOPN 2
17249: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
17250: LD_EXP 26
17254: PUSH
17255: LD_EXP 32
17259: AND
17260: IFFALSE 17344
17262: GO 17264
17264: DISABLE
17265: LD_INT 0
17267: PPUSH
17268: PPUSH
// begin enable ;
17269: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
17270: LD_ADDR_VAR 0 2
17274: PUSH
17275: LD_INT 22
17277: PUSH
17278: LD_OWVAR 2
17282: PUSH
17283: EMPTY
17284: LIST
17285: LIST
17286: PUSH
17287: LD_INT 32
17289: PUSH
17290: LD_INT 3
17292: PUSH
17293: EMPTY
17294: LIST
17295: LIST
17296: PUSH
17297: EMPTY
17298: LIST
17299: LIST
17300: PPUSH
17301: CALL_OW 69
17305: ST_TO_ADDR
// if not tmp then
17306: LD_VAR 0 2
17310: NOT
17311: IFFALSE 17315
// exit ;
17313: GO 17344
// for i in tmp do
17315: LD_ADDR_VAR 0 1
17319: PUSH
17320: LD_VAR 0 2
17324: PUSH
17325: FOR_IN
17326: IFFALSE 17342
// begin SetLives ( i , 0 ) ;
17328: LD_VAR 0 1
17332: PPUSH
17333: LD_INT 0
17335: PPUSH
17336: CALL_OW 234
// end ;
17340: GO 17325
17342: POP
17343: POP
// end ;
17344: PPOPN 2
17346: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
17347: LD_EXP 26
17351: PUSH
17352: LD_EXP 29
17356: AND
17357: IFFALSE 17450
17359: GO 17361
17361: DISABLE
17362: LD_INT 0
17364: PPUSH
// begin enable ;
17365: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
17366: LD_ADDR_VAR 0 1
17370: PUSH
17371: LD_INT 22
17373: PUSH
17374: LD_OWVAR 2
17378: PUSH
17379: EMPTY
17380: LIST
17381: LIST
17382: PUSH
17383: LD_INT 2
17385: PUSH
17386: LD_INT 25
17388: PUSH
17389: LD_INT 5
17391: PUSH
17392: EMPTY
17393: LIST
17394: LIST
17395: PUSH
17396: LD_INT 25
17398: PUSH
17399: LD_INT 9
17401: PUSH
17402: EMPTY
17403: LIST
17404: LIST
17405: PUSH
17406: LD_INT 25
17408: PUSH
17409: LD_INT 8
17411: PUSH
17412: EMPTY
17413: LIST
17414: LIST
17415: PUSH
17416: EMPTY
17417: LIST
17418: LIST
17419: LIST
17420: LIST
17421: PUSH
17422: EMPTY
17423: LIST
17424: LIST
17425: PPUSH
17426: CALL_OW 69
17430: PUSH
17431: FOR_IN
17432: IFFALSE 17448
// begin SetClass ( i , 1 ) ;
17434: LD_VAR 0 1
17438: PPUSH
17439: LD_INT 1
17441: PPUSH
17442: CALL_OW 336
// end ;
17446: GO 17431
17448: POP
17449: POP
// end ;
17450: PPOPN 1
17452: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
17453: LD_EXP 26
17457: PUSH
17458: LD_EXP 30
17462: AND
17463: PUSH
17464: LD_OWVAR 65
17468: PUSH
17469: LD_INT 7
17471: LESS
17472: AND
17473: IFFALSE 17487
17475: GO 17477
17477: DISABLE
// begin enable ;
17478: ENABLE
// game_speed := 7 ;
17479: LD_ADDR_OWVAR 65
17483: PUSH
17484: LD_INT 7
17486: ST_TO_ADDR
// end ;
17487: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
17488: LD_EXP 26
17492: PUSH
17493: LD_EXP 33
17497: AND
17498: IFFALSE 17700
17500: GO 17502
17502: DISABLE
17503: LD_INT 0
17505: PPUSH
17506: PPUSH
17507: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
17508: LD_ADDR_VAR 0 3
17512: PUSH
17513: LD_INT 81
17515: PUSH
17516: LD_OWVAR 2
17520: PUSH
17521: EMPTY
17522: LIST
17523: LIST
17524: PUSH
17525: LD_INT 21
17527: PUSH
17528: LD_INT 1
17530: PUSH
17531: EMPTY
17532: LIST
17533: LIST
17534: PUSH
17535: EMPTY
17536: LIST
17537: LIST
17538: PPUSH
17539: CALL_OW 69
17543: ST_TO_ADDR
// if not tmp then
17544: LD_VAR 0 3
17548: NOT
17549: IFFALSE 17553
// exit ;
17551: GO 17700
// if tmp > 5 then
17553: LD_VAR 0 3
17557: PUSH
17558: LD_INT 5
17560: GREATER
17561: IFFALSE 17573
// k := 5 else
17563: LD_ADDR_VAR 0 2
17567: PUSH
17568: LD_INT 5
17570: ST_TO_ADDR
17571: GO 17583
// k := tmp ;
17573: LD_ADDR_VAR 0 2
17577: PUSH
17578: LD_VAR 0 3
17582: ST_TO_ADDR
// for i := 1 to k do
17583: LD_ADDR_VAR 0 1
17587: PUSH
17588: DOUBLE
17589: LD_INT 1
17591: DEC
17592: ST_TO_ADDR
17593: LD_VAR 0 2
17597: PUSH
17598: FOR_TO
17599: IFFALSE 17698
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
17601: LD_VAR 0 3
17605: PUSH
17606: LD_VAR 0 1
17610: ARRAY
17611: PPUSH
17612: LD_VAR 0 1
17616: PUSH
17617: LD_INT 4
17619: MOD
17620: PUSH
17621: LD_INT 1
17623: PLUS
17624: PPUSH
17625: CALL_OW 259
17629: PUSH
17630: LD_INT 10
17632: LESS
17633: IFFALSE 17696
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
17635: LD_VAR 0 3
17639: PUSH
17640: LD_VAR 0 1
17644: ARRAY
17645: PPUSH
17646: LD_VAR 0 1
17650: PUSH
17651: LD_INT 4
17653: MOD
17654: PUSH
17655: LD_INT 1
17657: PLUS
17658: PPUSH
17659: LD_VAR 0 3
17663: PUSH
17664: LD_VAR 0 1
17668: ARRAY
17669: PPUSH
17670: LD_VAR 0 1
17674: PUSH
17675: LD_INT 4
17677: MOD
17678: PUSH
17679: LD_INT 1
17681: PLUS
17682: PPUSH
17683: CALL_OW 259
17687: PUSH
17688: LD_INT 1
17690: PLUS
17691: PPUSH
17692: CALL_OW 237
17696: GO 17598
17698: POP
17699: POP
// end ;
17700: PPOPN 3
17702: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
17703: LD_EXP 26
17707: PUSH
17708: LD_EXP 34
17712: AND
17713: IFFALSE 17733
17715: GO 17717
17717: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
17718: LD_INT 4
17720: PPUSH
17721: LD_OWVAR 2
17725: PPUSH
17726: LD_INT 0
17728: PPUSH
17729: CALL_OW 324
17733: END
// every 0 0$1 trigger StreamModeActive and sShovel do
17734: LD_EXP 26
17738: PUSH
17739: LD_EXP 63
17743: AND
17744: IFFALSE 17764
17746: GO 17748
17748: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
17749: LD_INT 19
17751: PPUSH
17752: LD_OWVAR 2
17756: PPUSH
17757: LD_INT 0
17759: PPUSH
17760: CALL_OW 324
17764: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
17765: LD_EXP 26
17769: PUSH
17770: LD_EXP 35
17774: AND
17775: IFFALSE 17877
17777: GO 17779
17779: DISABLE
17780: LD_INT 0
17782: PPUSH
17783: PPUSH
// begin enable ;
17784: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
17785: LD_ADDR_VAR 0 2
17789: PUSH
17790: LD_INT 22
17792: PUSH
17793: LD_OWVAR 2
17797: PUSH
17798: EMPTY
17799: LIST
17800: LIST
17801: PUSH
17802: LD_INT 2
17804: PUSH
17805: LD_INT 34
17807: PUSH
17808: LD_INT 11
17810: PUSH
17811: EMPTY
17812: LIST
17813: LIST
17814: PUSH
17815: LD_INT 34
17817: PUSH
17818: LD_INT 30
17820: PUSH
17821: EMPTY
17822: LIST
17823: LIST
17824: PUSH
17825: EMPTY
17826: LIST
17827: LIST
17828: LIST
17829: PUSH
17830: EMPTY
17831: LIST
17832: LIST
17833: PPUSH
17834: CALL_OW 69
17838: ST_TO_ADDR
// if not tmp then
17839: LD_VAR 0 2
17843: NOT
17844: IFFALSE 17848
// exit ;
17846: GO 17877
// for i in tmp do
17848: LD_ADDR_VAR 0 1
17852: PUSH
17853: LD_VAR 0 2
17857: PUSH
17858: FOR_IN
17859: IFFALSE 17875
// begin SetLives ( i , 0 ) ;
17861: LD_VAR 0 1
17865: PPUSH
17866: LD_INT 0
17868: PPUSH
17869: CALL_OW 234
// end ;
17873: GO 17858
17875: POP
17876: POP
// end ;
17877: PPOPN 2
17879: END
// every 0 0$1 trigger StreamModeActive and sBunker do
17880: LD_EXP 26
17884: PUSH
17885: LD_EXP 36
17889: AND
17890: IFFALSE 17910
17892: GO 17894
17894: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
17895: LD_INT 32
17897: PPUSH
17898: LD_OWVAR 2
17902: PPUSH
17903: LD_INT 0
17905: PPUSH
17906: CALL_OW 324
17910: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
17911: LD_EXP 26
17915: PUSH
17916: LD_EXP 37
17920: AND
17921: IFFALSE 18102
17923: GO 17925
17925: DISABLE
17926: LD_INT 0
17928: PPUSH
17929: PPUSH
17930: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
17931: LD_ADDR_VAR 0 2
17935: PUSH
17936: LD_INT 22
17938: PUSH
17939: LD_OWVAR 2
17943: PUSH
17944: EMPTY
17945: LIST
17946: LIST
17947: PUSH
17948: LD_INT 33
17950: PUSH
17951: LD_INT 3
17953: PUSH
17954: EMPTY
17955: LIST
17956: LIST
17957: PUSH
17958: EMPTY
17959: LIST
17960: LIST
17961: PPUSH
17962: CALL_OW 69
17966: ST_TO_ADDR
// if not tmp then
17967: LD_VAR 0 2
17971: NOT
17972: IFFALSE 17976
// exit ;
17974: GO 18102
// side := 0 ;
17976: LD_ADDR_VAR 0 3
17980: PUSH
17981: LD_INT 0
17983: ST_TO_ADDR
// for i := 1 to 8 do
17984: LD_ADDR_VAR 0 1
17988: PUSH
17989: DOUBLE
17990: LD_INT 1
17992: DEC
17993: ST_TO_ADDR
17994: LD_INT 8
17996: PUSH
17997: FOR_TO
17998: IFFALSE 18046
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
18000: LD_OWVAR 2
18004: PUSH
18005: LD_VAR 0 1
18009: NONEQUAL
18010: PUSH
18011: LD_OWVAR 2
18015: PPUSH
18016: LD_VAR 0 1
18020: PPUSH
18021: CALL_OW 81
18025: PUSH
18026: LD_INT 2
18028: EQUAL
18029: AND
18030: IFFALSE 18044
// begin side := i ;
18032: LD_ADDR_VAR 0 3
18036: PUSH
18037: LD_VAR 0 1
18041: ST_TO_ADDR
// break ;
18042: GO 18046
// end ;
18044: GO 17997
18046: POP
18047: POP
// if not side then
18048: LD_VAR 0 3
18052: NOT
18053: IFFALSE 18057
// exit ;
18055: GO 18102
// for i := 1 to tmp do
18057: LD_ADDR_VAR 0 1
18061: PUSH
18062: DOUBLE
18063: LD_INT 1
18065: DEC
18066: ST_TO_ADDR
18067: LD_VAR 0 2
18071: PUSH
18072: FOR_TO
18073: IFFALSE 18100
// if Prob ( 60 ) then
18075: LD_INT 60
18077: PPUSH
18078: CALL_OW 13
18082: IFFALSE 18098
// SetSide ( i , side ) ;
18084: LD_VAR 0 1
18088: PPUSH
18089: LD_VAR 0 3
18093: PPUSH
18094: CALL_OW 235
18098: GO 18072
18100: POP
18101: POP
// end ;
18102: PPOPN 3
18104: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
18105: LD_EXP 26
18109: PUSH
18110: LD_EXP 39
18114: AND
18115: IFFALSE 18234
18117: GO 18119
18119: DISABLE
18120: LD_INT 0
18122: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
18123: LD_ADDR_VAR 0 1
18127: PUSH
18128: LD_INT 22
18130: PUSH
18131: LD_OWVAR 2
18135: PUSH
18136: EMPTY
18137: LIST
18138: LIST
18139: PUSH
18140: LD_INT 21
18142: PUSH
18143: LD_INT 1
18145: PUSH
18146: EMPTY
18147: LIST
18148: LIST
18149: PUSH
18150: LD_INT 3
18152: PUSH
18153: LD_INT 23
18155: PUSH
18156: LD_INT 0
18158: PUSH
18159: EMPTY
18160: LIST
18161: LIST
18162: PUSH
18163: EMPTY
18164: LIST
18165: LIST
18166: PUSH
18167: EMPTY
18168: LIST
18169: LIST
18170: LIST
18171: PPUSH
18172: CALL_OW 69
18176: PUSH
18177: FOR_IN
18178: IFFALSE 18232
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
18180: LD_VAR 0 1
18184: PPUSH
18185: CALL_OW 257
18189: PUSH
18190: LD_INT 1
18192: PUSH
18193: LD_INT 2
18195: PUSH
18196: LD_INT 3
18198: PUSH
18199: LD_INT 4
18201: PUSH
18202: EMPTY
18203: LIST
18204: LIST
18205: LIST
18206: LIST
18207: IN
18208: IFFALSE 18230
// SetClass ( un , rand ( 1 , 4 ) ) ;
18210: LD_VAR 0 1
18214: PPUSH
18215: LD_INT 1
18217: PPUSH
18218: LD_INT 4
18220: PPUSH
18221: CALL_OW 12
18225: PPUSH
18226: CALL_OW 336
18230: GO 18177
18232: POP
18233: POP
// end ;
18234: PPOPN 1
18236: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
18237: LD_EXP 26
18241: PUSH
18242: LD_EXP 38
18246: AND
18247: IFFALSE 18326
18249: GO 18251
18251: DISABLE
18252: LD_INT 0
18254: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18255: LD_ADDR_VAR 0 1
18259: PUSH
18260: LD_INT 22
18262: PUSH
18263: LD_OWVAR 2
18267: PUSH
18268: EMPTY
18269: LIST
18270: LIST
18271: PUSH
18272: LD_INT 21
18274: PUSH
18275: LD_INT 3
18277: PUSH
18278: EMPTY
18279: LIST
18280: LIST
18281: PUSH
18282: EMPTY
18283: LIST
18284: LIST
18285: PPUSH
18286: CALL_OW 69
18290: ST_TO_ADDR
// if not tmp then
18291: LD_VAR 0 1
18295: NOT
18296: IFFALSE 18300
// exit ;
18298: GO 18326
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
18300: LD_VAR 0 1
18304: PUSH
18305: LD_INT 1
18307: PPUSH
18308: LD_VAR 0 1
18312: PPUSH
18313: CALL_OW 12
18317: ARRAY
18318: PPUSH
18319: LD_INT 100
18321: PPUSH
18322: CALL_OW 234
// end ;
18326: PPOPN 1
18328: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
18329: LD_EXP 26
18333: PUSH
18334: LD_EXP 40
18338: AND
18339: IFFALSE 18437
18341: GO 18343
18343: DISABLE
18344: LD_INT 0
18346: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18347: LD_ADDR_VAR 0 1
18351: PUSH
18352: LD_INT 22
18354: PUSH
18355: LD_OWVAR 2
18359: PUSH
18360: EMPTY
18361: LIST
18362: LIST
18363: PUSH
18364: LD_INT 21
18366: PUSH
18367: LD_INT 1
18369: PUSH
18370: EMPTY
18371: LIST
18372: LIST
18373: PUSH
18374: EMPTY
18375: LIST
18376: LIST
18377: PPUSH
18378: CALL_OW 69
18382: ST_TO_ADDR
// if not tmp then
18383: LD_VAR 0 1
18387: NOT
18388: IFFALSE 18392
// exit ;
18390: GO 18437
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
18392: LD_VAR 0 1
18396: PUSH
18397: LD_INT 1
18399: PPUSH
18400: LD_VAR 0 1
18404: PPUSH
18405: CALL_OW 12
18409: ARRAY
18410: PPUSH
18411: LD_INT 1
18413: PPUSH
18414: LD_INT 4
18416: PPUSH
18417: CALL_OW 12
18421: PPUSH
18422: LD_INT 3000
18424: PPUSH
18425: LD_INT 9000
18427: PPUSH
18428: CALL_OW 12
18432: PPUSH
18433: CALL_OW 492
// end ;
18437: PPOPN 1
18439: END
// every 0 0$1 trigger StreamModeActive and sDepot do
18440: LD_EXP 26
18444: PUSH
18445: LD_EXP 41
18449: AND
18450: IFFALSE 18470
18452: GO 18454
18454: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
18455: LD_INT 1
18457: PPUSH
18458: LD_OWVAR 2
18462: PPUSH
18463: LD_INT 0
18465: PPUSH
18466: CALL_OW 324
18470: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
18471: LD_EXP 26
18475: PUSH
18476: LD_EXP 42
18480: AND
18481: IFFALSE 18564
18483: GO 18485
18485: DISABLE
18486: LD_INT 0
18488: PPUSH
18489: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18490: LD_ADDR_VAR 0 2
18494: PUSH
18495: LD_INT 22
18497: PUSH
18498: LD_OWVAR 2
18502: PUSH
18503: EMPTY
18504: LIST
18505: LIST
18506: PUSH
18507: LD_INT 21
18509: PUSH
18510: LD_INT 3
18512: PUSH
18513: EMPTY
18514: LIST
18515: LIST
18516: PUSH
18517: EMPTY
18518: LIST
18519: LIST
18520: PPUSH
18521: CALL_OW 69
18525: ST_TO_ADDR
// if not tmp then
18526: LD_VAR 0 2
18530: NOT
18531: IFFALSE 18535
// exit ;
18533: GO 18564
// for i in tmp do
18535: LD_ADDR_VAR 0 1
18539: PUSH
18540: LD_VAR 0 2
18544: PUSH
18545: FOR_IN
18546: IFFALSE 18562
// SetBLevel ( i , 10 ) ;
18548: LD_VAR 0 1
18552: PPUSH
18553: LD_INT 10
18555: PPUSH
18556: CALL_OW 241
18560: GO 18545
18562: POP
18563: POP
// end ;
18564: PPOPN 2
18566: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
18567: LD_EXP 26
18571: PUSH
18572: LD_EXP 43
18576: AND
18577: IFFALSE 18688
18579: GO 18581
18581: DISABLE
18582: LD_INT 0
18584: PPUSH
18585: PPUSH
18586: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18587: LD_ADDR_VAR 0 3
18591: PUSH
18592: LD_INT 22
18594: PUSH
18595: LD_OWVAR 2
18599: PUSH
18600: EMPTY
18601: LIST
18602: LIST
18603: PUSH
18604: LD_INT 25
18606: PUSH
18607: LD_INT 1
18609: PUSH
18610: EMPTY
18611: LIST
18612: LIST
18613: PUSH
18614: EMPTY
18615: LIST
18616: LIST
18617: PPUSH
18618: CALL_OW 69
18622: ST_TO_ADDR
// if not tmp then
18623: LD_VAR 0 3
18627: NOT
18628: IFFALSE 18632
// exit ;
18630: GO 18688
// un := tmp [ rand ( 1 , tmp ) ] ;
18632: LD_ADDR_VAR 0 2
18636: PUSH
18637: LD_VAR 0 3
18641: PUSH
18642: LD_INT 1
18644: PPUSH
18645: LD_VAR 0 3
18649: PPUSH
18650: CALL_OW 12
18654: ARRAY
18655: ST_TO_ADDR
// if Crawls ( un ) then
18656: LD_VAR 0 2
18660: PPUSH
18661: CALL_OW 318
18665: IFFALSE 18676
// ComWalk ( un ) ;
18667: LD_VAR 0 2
18671: PPUSH
18672: CALL_OW 138
// SetClass ( un , class_sniper ) ;
18676: LD_VAR 0 2
18680: PPUSH
18681: LD_INT 5
18683: PPUSH
18684: CALL_OW 336
// end ;
18688: PPOPN 3
18690: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
18691: LD_EXP 26
18695: PUSH
18696: LD_EXP 44
18700: AND
18701: PUSH
18702: LD_OWVAR 67
18706: PUSH
18707: LD_INT 4
18709: LESS
18710: AND
18711: IFFALSE 18730
18713: GO 18715
18715: DISABLE
// begin Difficulty := Difficulty + 1 ;
18716: LD_ADDR_OWVAR 67
18720: PUSH
18721: LD_OWVAR 67
18725: PUSH
18726: LD_INT 1
18728: PLUS
18729: ST_TO_ADDR
// end ;
18730: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
18731: LD_EXP 26
18735: PUSH
18736: LD_EXP 45
18740: AND
18741: IFFALSE 18844
18743: GO 18745
18745: DISABLE
18746: LD_INT 0
18748: PPUSH
// begin for i := 1 to 5 do
18749: LD_ADDR_VAR 0 1
18753: PUSH
18754: DOUBLE
18755: LD_INT 1
18757: DEC
18758: ST_TO_ADDR
18759: LD_INT 5
18761: PUSH
18762: FOR_TO
18763: IFFALSE 18842
// begin uc_nation := nation_nature ;
18765: LD_ADDR_OWVAR 21
18769: PUSH
18770: LD_INT 0
18772: ST_TO_ADDR
// uc_side := 0 ;
18773: LD_ADDR_OWVAR 20
18777: PUSH
18778: LD_INT 0
18780: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
18781: LD_ADDR_OWVAR 29
18785: PUSH
18786: LD_INT 12
18788: PUSH
18789: LD_INT 12
18791: PUSH
18792: EMPTY
18793: LIST
18794: LIST
18795: ST_TO_ADDR
// hc_agressivity := 20 ;
18796: LD_ADDR_OWVAR 35
18800: PUSH
18801: LD_INT 20
18803: ST_TO_ADDR
// hc_class := class_tiger ;
18804: LD_ADDR_OWVAR 28
18808: PUSH
18809: LD_INT 14
18811: ST_TO_ADDR
// hc_gallery :=  ;
18812: LD_ADDR_OWVAR 33
18816: PUSH
18817: LD_STRING 
18819: ST_TO_ADDR
// hc_name :=  ;
18820: LD_ADDR_OWVAR 26
18824: PUSH
18825: LD_STRING 
18827: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
18828: CALL_OW 44
18832: PPUSH
18833: LD_INT 0
18835: PPUSH
18836: CALL_OW 51
// end ;
18840: GO 18762
18842: POP
18843: POP
// end ;
18844: PPOPN 1
18846: END
// every 0 0$1 trigger StreamModeActive and sBomb do
18847: LD_EXP 26
18851: PUSH
18852: LD_EXP 46
18856: AND
18857: IFFALSE 18866
18859: GO 18861
18861: DISABLE
// StreamSibBomb ;
18862: CALL 18867 0 0
18866: END
// export function StreamSibBomb ; var i , x , y ; begin
18867: LD_INT 0
18869: PPUSH
18870: PPUSH
18871: PPUSH
18872: PPUSH
// result := false ;
18873: LD_ADDR_VAR 0 1
18877: PUSH
18878: LD_INT 0
18880: ST_TO_ADDR
// for i := 1 to 16 do
18881: LD_ADDR_VAR 0 2
18885: PUSH
18886: DOUBLE
18887: LD_INT 1
18889: DEC
18890: ST_TO_ADDR
18891: LD_INT 16
18893: PUSH
18894: FOR_TO
18895: IFFALSE 19094
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18897: LD_ADDR_VAR 0 3
18901: PUSH
18902: LD_INT 10
18904: PUSH
18905: LD_INT 20
18907: PUSH
18908: LD_INT 30
18910: PUSH
18911: LD_INT 40
18913: PUSH
18914: LD_INT 50
18916: PUSH
18917: LD_INT 60
18919: PUSH
18920: LD_INT 70
18922: PUSH
18923: LD_INT 80
18925: PUSH
18926: LD_INT 90
18928: PUSH
18929: LD_INT 100
18931: PUSH
18932: LD_INT 110
18934: PUSH
18935: LD_INT 120
18937: PUSH
18938: LD_INT 130
18940: PUSH
18941: LD_INT 140
18943: PUSH
18944: LD_INT 150
18946: PUSH
18947: EMPTY
18948: LIST
18949: LIST
18950: LIST
18951: LIST
18952: LIST
18953: LIST
18954: LIST
18955: LIST
18956: LIST
18957: LIST
18958: LIST
18959: LIST
18960: LIST
18961: LIST
18962: LIST
18963: PUSH
18964: LD_INT 1
18966: PPUSH
18967: LD_INT 15
18969: PPUSH
18970: CALL_OW 12
18974: ARRAY
18975: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18976: LD_ADDR_VAR 0 4
18980: PUSH
18981: LD_INT 10
18983: PUSH
18984: LD_INT 20
18986: PUSH
18987: LD_INT 30
18989: PUSH
18990: LD_INT 40
18992: PUSH
18993: LD_INT 50
18995: PUSH
18996: LD_INT 60
18998: PUSH
18999: LD_INT 70
19001: PUSH
19002: LD_INT 80
19004: PUSH
19005: LD_INT 90
19007: PUSH
19008: LD_INT 100
19010: PUSH
19011: LD_INT 110
19013: PUSH
19014: LD_INT 120
19016: PUSH
19017: LD_INT 130
19019: PUSH
19020: LD_INT 140
19022: PUSH
19023: LD_INT 150
19025: PUSH
19026: EMPTY
19027: LIST
19028: LIST
19029: LIST
19030: LIST
19031: LIST
19032: LIST
19033: LIST
19034: LIST
19035: LIST
19036: LIST
19037: LIST
19038: LIST
19039: LIST
19040: LIST
19041: LIST
19042: PUSH
19043: LD_INT 1
19045: PPUSH
19046: LD_INT 15
19048: PPUSH
19049: CALL_OW 12
19053: ARRAY
19054: ST_TO_ADDR
// if ValidHex ( x , y ) then
19055: LD_VAR 0 3
19059: PPUSH
19060: LD_VAR 0 4
19064: PPUSH
19065: CALL_OW 488
19069: IFFALSE 19092
// begin result := [ x , y ] ;
19071: LD_ADDR_VAR 0 1
19075: PUSH
19076: LD_VAR 0 3
19080: PUSH
19081: LD_VAR 0 4
19085: PUSH
19086: EMPTY
19087: LIST
19088: LIST
19089: ST_TO_ADDR
// break ;
19090: GO 19094
// end ; end ;
19092: GO 18894
19094: POP
19095: POP
// if result then
19096: LD_VAR 0 1
19100: IFFALSE 19160
// begin ToLua ( playSibBomb() ) ;
19102: LD_STRING playSibBomb()
19104: PPUSH
19105: CALL_OW 559
// wait ( 0 0$14 ) ;
19109: LD_INT 490
19111: PPUSH
19112: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
19116: LD_VAR 0 1
19120: PUSH
19121: LD_INT 1
19123: ARRAY
19124: PPUSH
19125: LD_VAR 0 1
19129: PUSH
19130: LD_INT 2
19132: ARRAY
19133: PPUSH
19134: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
19138: LD_VAR 0 1
19142: PUSH
19143: LD_INT 1
19145: ARRAY
19146: PPUSH
19147: LD_VAR 0 1
19151: PUSH
19152: LD_INT 2
19154: ARRAY
19155: PPUSH
19156: CALL_OW 429
// end ; end ;
19160: LD_VAR 0 1
19164: RET
// every 0 0$1 trigger StreamModeActive and sReset do
19165: LD_EXP 26
19169: PUSH
19170: LD_EXP 48
19174: AND
19175: IFFALSE 19187
19177: GO 19179
19179: DISABLE
// YouLost (  ) ;
19180: LD_STRING 
19182: PPUSH
19183: CALL_OW 104
19187: END
// every 0 0$1 trigger StreamModeActive and sFog do
19188: LD_EXP 26
19192: PUSH
19193: LD_EXP 47
19197: AND
19198: IFFALSE 19212
19200: GO 19202
19202: DISABLE
// FogOff ( your_side ) ;
19203: LD_OWVAR 2
19207: PPUSH
19208: CALL_OW 344
19212: END
// every 0 0$1 trigger StreamModeActive and sSun do
19213: LD_EXP 26
19217: PUSH
19218: LD_EXP 49
19222: AND
19223: IFFALSE 19251
19225: GO 19227
19227: DISABLE
// begin solar_recharge_percent := 0 ;
19228: LD_ADDR_OWVAR 79
19232: PUSH
19233: LD_INT 0
19235: ST_TO_ADDR
// wait ( 5 5$00 ) ;
19236: LD_INT 10500
19238: PPUSH
19239: CALL_OW 67
// solar_recharge_percent := 100 ;
19243: LD_ADDR_OWVAR 79
19247: PUSH
19248: LD_INT 100
19250: ST_TO_ADDR
// end ;
19251: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
19252: LD_EXP 26
19256: PUSH
19257: LD_EXP 50
19261: AND
19262: IFFALSE 19501
19264: GO 19266
19266: DISABLE
19267: LD_INT 0
19269: PPUSH
19270: PPUSH
19271: PPUSH
// begin tmp := [ ] ;
19272: LD_ADDR_VAR 0 3
19276: PUSH
19277: EMPTY
19278: ST_TO_ADDR
// for i := 1 to 6 do
19279: LD_ADDR_VAR 0 1
19283: PUSH
19284: DOUBLE
19285: LD_INT 1
19287: DEC
19288: ST_TO_ADDR
19289: LD_INT 6
19291: PUSH
19292: FOR_TO
19293: IFFALSE 19398
// begin uc_nation := nation_nature ;
19295: LD_ADDR_OWVAR 21
19299: PUSH
19300: LD_INT 0
19302: ST_TO_ADDR
// uc_side := 0 ;
19303: LD_ADDR_OWVAR 20
19307: PUSH
19308: LD_INT 0
19310: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19311: LD_ADDR_OWVAR 29
19315: PUSH
19316: LD_INT 12
19318: PUSH
19319: LD_INT 12
19321: PUSH
19322: EMPTY
19323: LIST
19324: LIST
19325: ST_TO_ADDR
// hc_agressivity := 20 ;
19326: LD_ADDR_OWVAR 35
19330: PUSH
19331: LD_INT 20
19333: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
19334: LD_ADDR_OWVAR 28
19338: PUSH
19339: LD_INT 17
19341: ST_TO_ADDR
// hc_gallery :=  ;
19342: LD_ADDR_OWVAR 33
19346: PUSH
19347: LD_STRING 
19349: ST_TO_ADDR
// hc_name :=  ;
19350: LD_ADDR_OWVAR 26
19354: PUSH
19355: LD_STRING 
19357: ST_TO_ADDR
// un := CreateHuman ;
19358: LD_ADDR_VAR 0 2
19362: PUSH
19363: CALL_OW 44
19367: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
19368: LD_VAR 0 2
19372: PPUSH
19373: LD_INT 1
19375: PPUSH
19376: CALL_OW 51
// tmp := tmp ^ un ;
19380: LD_ADDR_VAR 0 3
19384: PUSH
19385: LD_VAR 0 3
19389: PUSH
19390: LD_VAR 0 2
19394: ADD
19395: ST_TO_ADDR
// end ;
19396: GO 19292
19398: POP
19399: POP
// repeat wait ( 0 0$1 ) ;
19400: LD_INT 35
19402: PPUSH
19403: CALL_OW 67
// for un in tmp do
19407: LD_ADDR_VAR 0 2
19411: PUSH
19412: LD_VAR 0 3
19416: PUSH
19417: FOR_IN
19418: IFFALSE 19492
// begin if IsDead ( un ) then
19420: LD_VAR 0 2
19424: PPUSH
19425: CALL_OW 301
19429: IFFALSE 19449
// begin tmp := tmp diff un ;
19431: LD_ADDR_VAR 0 3
19435: PUSH
19436: LD_VAR 0 3
19440: PUSH
19441: LD_VAR 0 2
19445: DIFF
19446: ST_TO_ADDR
// continue ;
19447: GO 19417
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
19449: LD_VAR 0 2
19453: PPUSH
19454: LD_INT 3
19456: PUSH
19457: LD_INT 22
19459: PUSH
19460: LD_INT 0
19462: PUSH
19463: EMPTY
19464: LIST
19465: LIST
19466: PUSH
19467: EMPTY
19468: LIST
19469: LIST
19470: PPUSH
19471: CALL_OW 69
19475: PPUSH
19476: LD_VAR 0 2
19480: PPUSH
19481: CALL_OW 74
19485: PPUSH
19486: CALL_OW 115
// end ;
19490: GO 19417
19492: POP
19493: POP
// until not tmp ;
19494: LD_VAR 0 3
19498: NOT
19499: IFFALSE 19400
// end ;
19501: PPOPN 3
19503: END
// every 0 0$1 trigger StreamModeActive and sTroll do
19504: LD_EXP 26
19508: PUSH
19509: LD_EXP 51
19513: AND
19514: IFFALSE 19568
19516: GO 19518
19518: DISABLE
// begin ToLua ( displayTroll(); ) ;
19519: LD_STRING displayTroll();
19521: PPUSH
19522: CALL_OW 559
// wait ( 3 3$00 ) ;
19526: LD_INT 6300
19528: PPUSH
19529: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19533: LD_STRING hideTroll();
19535: PPUSH
19536: CALL_OW 559
// wait ( 1 1$00 ) ;
19540: LD_INT 2100
19542: PPUSH
19543: CALL_OW 67
// ToLua ( displayTroll(); ) ;
19547: LD_STRING displayTroll();
19549: PPUSH
19550: CALL_OW 559
// wait ( 1 1$00 ) ;
19554: LD_INT 2100
19556: PPUSH
19557: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19561: LD_STRING hideTroll();
19563: PPUSH
19564: CALL_OW 559
// end ;
19568: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
19569: LD_EXP 26
19573: PUSH
19574: LD_EXP 52
19578: AND
19579: IFFALSE 19642
19581: GO 19583
19583: DISABLE
19584: LD_INT 0
19586: PPUSH
// begin p := 0 ;
19587: LD_ADDR_VAR 0 1
19591: PUSH
19592: LD_INT 0
19594: ST_TO_ADDR
// repeat game_speed := 1 ;
19595: LD_ADDR_OWVAR 65
19599: PUSH
19600: LD_INT 1
19602: ST_TO_ADDR
// wait ( 0 0$1 ) ;
19603: LD_INT 35
19605: PPUSH
19606: CALL_OW 67
// p := p + 1 ;
19610: LD_ADDR_VAR 0 1
19614: PUSH
19615: LD_VAR 0 1
19619: PUSH
19620: LD_INT 1
19622: PLUS
19623: ST_TO_ADDR
// until p >= 60 ;
19624: LD_VAR 0 1
19628: PUSH
19629: LD_INT 60
19631: GREATEREQUAL
19632: IFFALSE 19595
// game_speed := 4 ;
19634: LD_ADDR_OWVAR 65
19638: PUSH
19639: LD_INT 4
19641: ST_TO_ADDR
// end ;
19642: PPOPN 1
19644: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
19645: LD_EXP 26
19649: PUSH
19650: LD_EXP 53
19654: AND
19655: IFFALSE 19801
19657: GO 19659
19659: DISABLE
19660: LD_INT 0
19662: PPUSH
19663: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19664: LD_ADDR_VAR 0 1
19668: PUSH
19669: LD_INT 22
19671: PUSH
19672: LD_OWVAR 2
19676: PUSH
19677: EMPTY
19678: LIST
19679: LIST
19680: PUSH
19681: LD_INT 2
19683: PUSH
19684: LD_INT 30
19686: PUSH
19687: LD_INT 0
19689: PUSH
19690: EMPTY
19691: LIST
19692: LIST
19693: PUSH
19694: LD_INT 30
19696: PUSH
19697: LD_INT 1
19699: PUSH
19700: EMPTY
19701: LIST
19702: LIST
19703: PUSH
19704: EMPTY
19705: LIST
19706: LIST
19707: LIST
19708: PUSH
19709: EMPTY
19710: LIST
19711: LIST
19712: PPUSH
19713: CALL_OW 69
19717: ST_TO_ADDR
// if not depot then
19718: LD_VAR 0 1
19722: NOT
19723: IFFALSE 19727
// exit ;
19725: GO 19801
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
19727: LD_ADDR_VAR 0 2
19731: PUSH
19732: LD_VAR 0 1
19736: PUSH
19737: LD_INT 1
19739: PPUSH
19740: LD_VAR 0 1
19744: PPUSH
19745: CALL_OW 12
19749: ARRAY
19750: PPUSH
19751: CALL_OW 274
19755: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
19756: LD_VAR 0 2
19760: PPUSH
19761: LD_INT 1
19763: PPUSH
19764: LD_INT 0
19766: PPUSH
19767: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
19771: LD_VAR 0 2
19775: PPUSH
19776: LD_INT 2
19778: PPUSH
19779: LD_INT 0
19781: PPUSH
19782: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
19786: LD_VAR 0 2
19790: PPUSH
19791: LD_INT 3
19793: PPUSH
19794: LD_INT 0
19796: PPUSH
19797: CALL_OW 277
// end ;
19801: PPOPN 2
19803: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
19804: LD_EXP 26
19808: PUSH
19809: LD_EXP 54
19813: AND
19814: IFFALSE 19911
19816: GO 19818
19818: DISABLE
19819: LD_INT 0
19821: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19822: LD_ADDR_VAR 0 1
19826: PUSH
19827: LD_INT 22
19829: PUSH
19830: LD_OWVAR 2
19834: PUSH
19835: EMPTY
19836: LIST
19837: LIST
19838: PUSH
19839: LD_INT 21
19841: PUSH
19842: LD_INT 1
19844: PUSH
19845: EMPTY
19846: LIST
19847: LIST
19848: PUSH
19849: LD_INT 3
19851: PUSH
19852: LD_INT 23
19854: PUSH
19855: LD_INT 0
19857: PUSH
19858: EMPTY
19859: LIST
19860: LIST
19861: PUSH
19862: EMPTY
19863: LIST
19864: LIST
19865: PUSH
19866: EMPTY
19867: LIST
19868: LIST
19869: LIST
19870: PPUSH
19871: CALL_OW 69
19875: ST_TO_ADDR
// if not tmp then
19876: LD_VAR 0 1
19880: NOT
19881: IFFALSE 19885
// exit ;
19883: GO 19911
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
19885: LD_VAR 0 1
19889: PUSH
19890: LD_INT 1
19892: PPUSH
19893: LD_VAR 0 1
19897: PPUSH
19898: CALL_OW 12
19902: ARRAY
19903: PPUSH
19904: LD_INT 200
19906: PPUSH
19907: CALL_OW 234
// end ;
19911: PPOPN 1
19913: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
19914: LD_EXP 26
19918: PUSH
19919: LD_EXP 55
19923: AND
19924: IFFALSE 20003
19926: GO 19928
19928: DISABLE
19929: LD_INT 0
19931: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
19932: LD_ADDR_VAR 0 1
19936: PUSH
19937: LD_INT 22
19939: PUSH
19940: LD_OWVAR 2
19944: PUSH
19945: EMPTY
19946: LIST
19947: LIST
19948: PUSH
19949: LD_INT 21
19951: PUSH
19952: LD_INT 2
19954: PUSH
19955: EMPTY
19956: LIST
19957: LIST
19958: PUSH
19959: EMPTY
19960: LIST
19961: LIST
19962: PPUSH
19963: CALL_OW 69
19967: ST_TO_ADDR
// if not tmp then
19968: LD_VAR 0 1
19972: NOT
19973: IFFALSE 19977
// exit ;
19975: GO 20003
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
19977: LD_VAR 0 1
19981: PUSH
19982: LD_INT 1
19984: PPUSH
19985: LD_VAR 0 1
19989: PPUSH
19990: CALL_OW 12
19994: ARRAY
19995: PPUSH
19996: LD_INT 60
19998: PPUSH
19999: CALL_OW 234
// end ;
20003: PPOPN 1
20005: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
20006: LD_EXP 26
20010: PUSH
20011: LD_EXP 56
20015: AND
20016: IFFALSE 20115
20018: GO 20020
20020: DISABLE
20021: LD_INT 0
20023: PPUSH
20024: PPUSH
// begin enable ;
20025: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
20026: LD_ADDR_VAR 0 1
20030: PUSH
20031: LD_INT 22
20033: PUSH
20034: LD_OWVAR 2
20038: PUSH
20039: EMPTY
20040: LIST
20041: LIST
20042: PUSH
20043: LD_INT 61
20045: PUSH
20046: EMPTY
20047: LIST
20048: PUSH
20049: LD_INT 33
20051: PUSH
20052: LD_INT 2
20054: PUSH
20055: EMPTY
20056: LIST
20057: LIST
20058: PUSH
20059: EMPTY
20060: LIST
20061: LIST
20062: LIST
20063: PPUSH
20064: CALL_OW 69
20068: ST_TO_ADDR
// if not tmp then
20069: LD_VAR 0 1
20073: NOT
20074: IFFALSE 20078
// exit ;
20076: GO 20115
// for i in tmp do
20078: LD_ADDR_VAR 0 2
20082: PUSH
20083: LD_VAR 0 1
20087: PUSH
20088: FOR_IN
20089: IFFALSE 20113
// if IsControledBy ( i ) then
20091: LD_VAR 0 2
20095: PPUSH
20096: CALL_OW 312
20100: IFFALSE 20111
// ComUnlink ( i ) ;
20102: LD_VAR 0 2
20106: PPUSH
20107: CALL_OW 136
20111: GO 20088
20113: POP
20114: POP
// end ;
20115: PPOPN 2
20117: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
20118: LD_EXP 26
20122: PUSH
20123: LD_EXP 57
20127: AND
20128: IFFALSE 20268
20130: GO 20132
20132: DISABLE
20133: LD_INT 0
20135: PPUSH
20136: PPUSH
// begin ToLua ( displayPowell(); ) ;
20137: LD_STRING displayPowell();
20139: PPUSH
20140: CALL_OW 559
// uc_side := 0 ;
20144: LD_ADDR_OWVAR 20
20148: PUSH
20149: LD_INT 0
20151: ST_TO_ADDR
// uc_nation := 2 ;
20152: LD_ADDR_OWVAR 21
20156: PUSH
20157: LD_INT 2
20159: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
20160: LD_ADDR_OWVAR 37
20164: PUSH
20165: LD_INT 14
20167: ST_TO_ADDR
// vc_engine := engine_siberite ;
20168: LD_ADDR_OWVAR 39
20172: PUSH
20173: LD_INT 3
20175: ST_TO_ADDR
// vc_control := control_apeman ;
20176: LD_ADDR_OWVAR 38
20180: PUSH
20181: LD_INT 5
20183: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
20184: LD_ADDR_OWVAR 40
20188: PUSH
20189: LD_INT 29
20191: ST_TO_ADDR
// un := CreateVehicle ;
20192: LD_ADDR_VAR 0 2
20196: PUSH
20197: CALL_OW 45
20201: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20202: LD_VAR 0 2
20206: PPUSH
20207: LD_INT 1
20209: PPUSH
20210: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20214: LD_INT 35
20216: PPUSH
20217: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20221: LD_VAR 0 2
20225: PPUSH
20226: LD_INT 22
20228: PUSH
20229: LD_OWVAR 2
20233: PUSH
20234: EMPTY
20235: LIST
20236: LIST
20237: PPUSH
20238: CALL_OW 69
20242: PPUSH
20243: LD_VAR 0 2
20247: PPUSH
20248: CALL_OW 74
20252: PPUSH
20253: CALL_OW 115
// until IsDead ( un ) ;
20257: LD_VAR 0 2
20261: PPUSH
20262: CALL_OW 301
20266: IFFALSE 20214
// end ;
20268: PPOPN 2
20270: END
// every 0 0$1 trigger StreamModeActive and sStu do
20271: LD_EXP 26
20275: PUSH
20276: LD_EXP 65
20280: AND
20281: IFFALSE 20297
20283: GO 20285
20285: DISABLE
// begin ToLua ( displayStucuk(); ) ;
20286: LD_STRING displayStucuk();
20288: PPUSH
20289: CALL_OW 559
// ResetFog ;
20293: CALL_OW 335
// end ;
20297: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
20298: LD_EXP 26
20302: PUSH
20303: LD_EXP 58
20307: AND
20308: IFFALSE 20449
20310: GO 20312
20312: DISABLE
20313: LD_INT 0
20315: PPUSH
20316: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20317: LD_ADDR_VAR 0 2
20321: PUSH
20322: LD_INT 22
20324: PUSH
20325: LD_OWVAR 2
20329: PUSH
20330: EMPTY
20331: LIST
20332: LIST
20333: PUSH
20334: LD_INT 21
20336: PUSH
20337: LD_INT 1
20339: PUSH
20340: EMPTY
20341: LIST
20342: LIST
20343: PUSH
20344: EMPTY
20345: LIST
20346: LIST
20347: PPUSH
20348: CALL_OW 69
20352: ST_TO_ADDR
// if not tmp then
20353: LD_VAR 0 2
20357: NOT
20358: IFFALSE 20362
// exit ;
20360: GO 20449
// un := tmp [ rand ( 1 , tmp ) ] ;
20362: LD_ADDR_VAR 0 1
20366: PUSH
20367: LD_VAR 0 2
20371: PUSH
20372: LD_INT 1
20374: PPUSH
20375: LD_VAR 0 2
20379: PPUSH
20380: CALL_OW 12
20384: ARRAY
20385: ST_TO_ADDR
// SetSide ( un , 0 ) ;
20386: LD_VAR 0 1
20390: PPUSH
20391: LD_INT 0
20393: PPUSH
20394: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
20398: LD_VAR 0 1
20402: PPUSH
20403: LD_OWVAR 3
20407: PUSH
20408: LD_VAR 0 1
20412: DIFF
20413: PPUSH
20414: LD_VAR 0 1
20418: PPUSH
20419: CALL_OW 74
20423: PPUSH
20424: CALL_OW 115
// wait ( 0 0$20 ) ;
20428: LD_INT 700
20430: PPUSH
20431: CALL_OW 67
// SetSide ( un , your_side ) ;
20435: LD_VAR 0 1
20439: PPUSH
20440: LD_OWVAR 2
20444: PPUSH
20445: CALL_OW 235
// end ;
20449: PPOPN 2
20451: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
20452: LD_EXP 26
20456: PUSH
20457: LD_EXP 59
20461: AND
20462: IFFALSE 20568
20464: GO 20466
20466: DISABLE
20467: LD_INT 0
20469: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20470: LD_ADDR_VAR 0 1
20474: PUSH
20475: LD_INT 22
20477: PUSH
20478: LD_OWVAR 2
20482: PUSH
20483: EMPTY
20484: LIST
20485: LIST
20486: PUSH
20487: LD_INT 2
20489: PUSH
20490: LD_INT 30
20492: PUSH
20493: LD_INT 0
20495: PUSH
20496: EMPTY
20497: LIST
20498: LIST
20499: PUSH
20500: LD_INT 30
20502: PUSH
20503: LD_INT 1
20505: PUSH
20506: EMPTY
20507: LIST
20508: LIST
20509: PUSH
20510: EMPTY
20511: LIST
20512: LIST
20513: LIST
20514: PUSH
20515: EMPTY
20516: LIST
20517: LIST
20518: PPUSH
20519: CALL_OW 69
20523: ST_TO_ADDR
// if not depot then
20524: LD_VAR 0 1
20528: NOT
20529: IFFALSE 20533
// exit ;
20531: GO 20568
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
20533: LD_VAR 0 1
20537: PUSH
20538: LD_INT 1
20540: ARRAY
20541: PPUSH
20542: CALL_OW 250
20546: PPUSH
20547: LD_VAR 0 1
20551: PUSH
20552: LD_INT 1
20554: ARRAY
20555: PPUSH
20556: CALL_OW 251
20560: PPUSH
20561: LD_INT 70
20563: PPUSH
20564: CALL_OW 495
// end ;
20568: PPOPN 1
20570: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
20571: LD_EXP 26
20575: PUSH
20576: LD_EXP 60
20580: AND
20581: IFFALSE 20792
20583: GO 20585
20585: DISABLE
20586: LD_INT 0
20588: PPUSH
20589: PPUSH
20590: PPUSH
20591: PPUSH
20592: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20593: LD_ADDR_VAR 0 5
20597: PUSH
20598: LD_INT 22
20600: PUSH
20601: LD_OWVAR 2
20605: PUSH
20606: EMPTY
20607: LIST
20608: LIST
20609: PUSH
20610: LD_INT 21
20612: PUSH
20613: LD_INT 1
20615: PUSH
20616: EMPTY
20617: LIST
20618: LIST
20619: PUSH
20620: EMPTY
20621: LIST
20622: LIST
20623: PPUSH
20624: CALL_OW 69
20628: ST_TO_ADDR
// if not tmp then
20629: LD_VAR 0 5
20633: NOT
20634: IFFALSE 20638
// exit ;
20636: GO 20792
// for i in tmp do
20638: LD_ADDR_VAR 0 1
20642: PUSH
20643: LD_VAR 0 5
20647: PUSH
20648: FOR_IN
20649: IFFALSE 20790
// begin d := rand ( 0 , 5 ) ;
20651: LD_ADDR_VAR 0 4
20655: PUSH
20656: LD_INT 0
20658: PPUSH
20659: LD_INT 5
20661: PPUSH
20662: CALL_OW 12
20666: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
20667: LD_ADDR_VAR 0 2
20671: PUSH
20672: LD_VAR 0 1
20676: PPUSH
20677: CALL_OW 250
20681: PPUSH
20682: LD_VAR 0 4
20686: PPUSH
20687: LD_INT 3
20689: PPUSH
20690: LD_INT 12
20692: PPUSH
20693: CALL_OW 12
20697: PPUSH
20698: CALL_OW 272
20702: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
20703: LD_ADDR_VAR 0 3
20707: PUSH
20708: LD_VAR 0 1
20712: PPUSH
20713: CALL_OW 251
20717: PPUSH
20718: LD_VAR 0 4
20722: PPUSH
20723: LD_INT 3
20725: PPUSH
20726: LD_INT 12
20728: PPUSH
20729: CALL_OW 12
20733: PPUSH
20734: CALL_OW 273
20738: ST_TO_ADDR
// if ValidHex ( x , y ) then
20739: LD_VAR 0 2
20743: PPUSH
20744: LD_VAR 0 3
20748: PPUSH
20749: CALL_OW 488
20753: IFFALSE 20788
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
20755: LD_VAR 0 1
20759: PPUSH
20760: LD_VAR 0 2
20764: PPUSH
20765: LD_VAR 0 3
20769: PPUSH
20770: LD_INT 3
20772: PPUSH
20773: LD_INT 6
20775: PPUSH
20776: CALL_OW 12
20780: PPUSH
20781: LD_INT 1
20783: PPUSH
20784: CALL_OW 483
// end ;
20788: GO 20648
20790: POP
20791: POP
// end ;
20792: PPOPN 5
20794: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
20795: LD_EXP 26
20799: PUSH
20800: LD_EXP 61
20804: AND
20805: IFFALSE 20899
20807: GO 20809
20809: DISABLE
20810: LD_INT 0
20812: PPUSH
20813: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
20814: LD_ADDR_VAR 0 2
20818: PUSH
20819: LD_INT 22
20821: PUSH
20822: LD_OWVAR 2
20826: PUSH
20827: EMPTY
20828: LIST
20829: LIST
20830: PUSH
20831: LD_INT 32
20833: PUSH
20834: LD_INT 1
20836: PUSH
20837: EMPTY
20838: LIST
20839: LIST
20840: PUSH
20841: LD_INT 21
20843: PUSH
20844: LD_INT 2
20846: PUSH
20847: EMPTY
20848: LIST
20849: LIST
20850: PUSH
20851: EMPTY
20852: LIST
20853: LIST
20854: LIST
20855: PPUSH
20856: CALL_OW 69
20860: ST_TO_ADDR
// if not tmp then
20861: LD_VAR 0 2
20865: NOT
20866: IFFALSE 20870
// exit ;
20868: GO 20899
// for i in tmp do
20870: LD_ADDR_VAR 0 1
20874: PUSH
20875: LD_VAR 0 2
20879: PUSH
20880: FOR_IN
20881: IFFALSE 20897
// SetFuel ( i , 0 ) ;
20883: LD_VAR 0 1
20887: PPUSH
20888: LD_INT 0
20890: PPUSH
20891: CALL_OW 240
20895: GO 20880
20897: POP
20898: POP
// end ;
20899: PPOPN 2
20901: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
20902: LD_EXP 26
20906: PUSH
20907: LD_EXP 62
20911: AND
20912: IFFALSE 20978
20914: GO 20916
20916: DISABLE
20917: LD_INT 0
20919: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
20920: LD_ADDR_VAR 0 1
20924: PUSH
20925: LD_INT 22
20927: PUSH
20928: LD_OWVAR 2
20932: PUSH
20933: EMPTY
20934: LIST
20935: LIST
20936: PUSH
20937: LD_INT 30
20939: PUSH
20940: LD_INT 29
20942: PUSH
20943: EMPTY
20944: LIST
20945: LIST
20946: PUSH
20947: EMPTY
20948: LIST
20949: LIST
20950: PPUSH
20951: CALL_OW 69
20955: ST_TO_ADDR
// if not tmp then
20956: LD_VAR 0 1
20960: NOT
20961: IFFALSE 20965
// exit ;
20963: GO 20978
// DestroyUnit ( tmp [ 1 ] ) ;
20965: LD_VAR 0 1
20969: PUSH
20970: LD_INT 1
20972: ARRAY
20973: PPUSH
20974: CALL_OW 65
// end ;
20978: PPOPN 1
20980: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
20981: LD_EXP 26
20985: PUSH
20986: LD_EXP 64
20990: AND
20991: IFFALSE 21120
20993: GO 20995
20995: DISABLE
20996: LD_INT 0
20998: PPUSH
// begin uc_side := 0 ;
20999: LD_ADDR_OWVAR 20
21003: PUSH
21004: LD_INT 0
21006: ST_TO_ADDR
// uc_nation := nation_arabian ;
21007: LD_ADDR_OWVAR 21
21011: PUSH
21012: LD_INT 2
21014: ST_TO_ADDR
// hc_gallery :=  ;
21015: LD_ADDR_OWVAR 33
21019: PUSH
21020: LD_STRING 
21022: ST_TO_ADDR
// hc_name :=  ;
21023: LD_ADDR_OWVAR 26
21027: PUSH
21028: LD_STRING 
21030: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
21031: LD_INT 1
21033: PPUSH
21034: LD_INT 11
21036: PPUSH
21037: LD_INT 10
21039: PPUSH
21040: CALL_OW 380
// un := CreateHuman ;
21044: LD_ADDR_VAR 0 1
21048: PUSH
21049: CALL_OW 44
21053: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21054: LD_VAR 0 1
21058: PPUSH
21059: LD_INT 1
21061: PPUSH
21062: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
21066: LD_INT 35
21068: PPUSH
21069: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
21073: LD_VAR 0 1
21077: PPUSH
21078: LD_INT 22
21080: PUSH
21081: LD_OWVAR 2
21085: PUSH
21086: EMPTY
21087: LIST
21088: LIST
21089: PPUSH
21090: CALL_OW 69
21094: PPUSH
21095: LD_VAR 0 1
21099: PPUSH
21100: CALL_OW 74
21104: PPUSH
21105: CALL_OW 115
// until IsDead ( un ) ;
21109: LD_VAR 0 1
21113: PPUSH
21114: CALL_OW 301
21118: IFFALSE 21066
// end ;
21120: PPOPN 1
21122: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
21123: LD_EXP 26
21127: PUSH
21128: LD_EXP 66
21132: AND
21133: IFFALSE 21145
21135: GO 21137
21137: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
21138: LD_STRING earthquake(getX(game), 0, 32)
21140: PPUSH
21141: CALL_OW 559
21145: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
21146: LD_EXP 26
21150: PUSH
21151: LD_EXP 67
21155: AND
21156: IFFALSE 21247
21158: GO 21160
21160: DISABLE
21161: LD_INT 0
21163: PPUSH
// begin enable ;
21164: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
21165: LD_ADDR_VAR 0 1
21169: PUSH
21170: LD_INT 22
21172: PUSH
21173: LD_OWVAR 2
21177: PUSH
21178: EMPTY
21179: LIST
21180: LIST
21181: PUSH
21182: LD_INT 21
21184: PUSH
21185: LD_INT 2
21187: PUSH
21188: EMPTY
21189: LIST
21190: LIST
21191: PUSH
21192: LD_INT 33
21194: PUSH
21195: LD_INT 3
21197: PUSH
21198: EMPTY
21199: LIST
21200: LIST
21201: PUSH
21202: EMPTY
21203: LIST
21204: LIST
21205: LIST
21206: PPUSH
21207: CALL_OW 69
21211: ST_TO_ADDR
// if not tmp then
21212: LD_VAR 0 1
21216: NOT
21217: IFFALSE 21221
// exit ;
21219: GO 21247
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21221: LD_VAR 0 1
21225: PUSH
21226: LD_INT 1
21228: PPUSH
21229: LD_VAR 0 1
21233: PPUSH
21234: CALL_OW 12
21238: ARRAY
21239: PPUSH
21240: LD_INT 1
21242: PPUSH
21243: CALL_OW 234
// end ;
21247: PPOPN 1
21249: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
21250: LD_EXP 26
21254: PUSH
21255: LD_EXP 68
21259: AND
21260: IFFALSE 21401
21262: GO 21264
21264: DISABLE
21265: LD_INT 0
21267: PPUSH
21268: PPUSH
21269: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21270: LD_ADDR_VAR 0 3
21274: PUSH
21275: LD_INT 22
21277: PUSH
21278: LD_OWVAR 2
21282: PUSH
21283: EMPTY
21284: LIST
21285: LIST
21286: PUSH
21287: LD_INT 25
21289: PUSH
21290: LD_INT 1
21292: PUSH
21293: EMPTY
21294: LIST
21295: LIST
21296: PUSH
21297: EMPTY
21298: LIST
21299: LIST
21300: PPUSH
21301: CALL_OW 69
21305: ST_TO_ADDR
// if not tmp then
21306: LD_VAR 0 3
21310: NOT
21311: IFFALSE 21315
// exit ;
21313: GO 21401
// un := tmp [ rand ( 1 , tmp ) ] ;
21315: LD_ADDR_VAR 0 2
21319: PUSH
21320: LD_VAR 0 3
21324: PUSH
21325: LD_INT 1
21327: PPUSH
21328: LD_VAR 0 3
21332: PPUSH
21333: CALL_OW 12
21337: ARRAY
21338: ST_TO_ADDR
// if Crawls ( un ) then
21339: LD_VAR 0 2
21343: PPUSH
21344: CALL_OW 318
21348: IFFALSE 21359
// ComWalk ( un ) ;
21350: LD_VAR 0 2
21354: PPUSH
21355: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
21359: LD_VAR 0 2
21363: PPUSH
21364: LD_INT 9
21366: PPUSH
21367: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
21371: LD_INT 28
21373: PPUSH
21374: LD_OWVAR 2
21378: PPUSH
21379: LD_INT 2
21381: PPUSH
21382: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
21386: LD_INT 29
21388: PPUSH
21389: LD_OWVAR 2
21393: PPUSH
21394: LD_INT 2
21396: PPUSH
21397: CALL_OW 322
// end ;
21401: PPOPN 3
21403: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
21404: LD_EXP 26
21408: PUSH
21409: LD_EXP 69
21413: AND
21414: IFFALSE 21525
21416: GO 21418
21418: DISABLE
21419: LD_INT 0
21421: PPUSH
21422: PPUSH
21423: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21424: LD_ADDR_VAR 0 3
21428: PUSH
21429: LD_INT 22
21431: PUSH
21432: LD_OWVAR 2
21436: PUSH
21437: EMPTY
21438: LIST
21439: LIST
21440: PUSH
21441: LD_INT 25
21443: PUSH
21444: LD_INT 1
21446: PUSH
21447: EMPTY
21448: LIST
21449: LIST
21450: PUSH
21451: EMPTY
21452: LIST
21453: LIST
21454: PPUSH
21455: CALL_OW 69
21459: ST_TO_ADDR
// if not tmp then
21460: LD_VAR 0 3
21464: NOT
21465: IFFALSE 21469
// exit ;
21467: GO 21525
// un := tmp [ rand ( 1 , tmp ) ] ;
21469: LD_ADDR_VAR 0 2
21473: PUSH
21474: LD_VAR 0 3
21478: PUSH
21479: LD_INT 1
21481: PPUSH
21482: LD_VAR 0 3
21486: PPUSH
21487: CALL_OW 12
21491: ARRAY
21492: ST_TO_ADDR
// if Crawls ( un ) then
21493: LD_VAR 0 2
21497: PPUSH
21498: CALL_OW 318
21502: IFFALSE 21513
// ComWalk ( un ) ;
21504: LD_VAR 0 2
21508: PPUSH
21509: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21513: LD_VAR 0 2
21517: PPUSH
21518: LD_INT 8
21520: PPUSH
21521: CALL_OW 336
// end ;
21525: PPOPN 3
21527: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
21528: LD_EXP 26
21532: PUSH
21533: LD_EXP 70
21537: AND
21538: IFFALSE 21682
21540: GO 21542
21542: DISABLE
21543: LD_INT 0
21545: PPUSH
21546: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
21547: LD_ADDR_VAR 0 2
21551: PUSH
21552: LD_INT 22
21554: PUSH
21555: LD_OWVAR 2
21559: PUSH
21560: EMPTY
21561: LIST
21562: LIST
21563: PUSH
21564: LD_INT 21
21566: PUSH
21567: LD_INT 2
21569: PUSH
21570: EMPTY
21571: LIST
21572: LIST
21573: PUSH
21574: LD_INT 2
21576: PUSH
21577: LD_INT 34
21579: PUSH
21580: LD_INT 12
21582: PUSH
21583: EMPTY
21584: LIST
21585: LIST
21586: PUSH
21587: LD_INT 34
21589: PUSH
21590: LD_INT 51
21592: PUSH
21593: EMPTY
21594: LIST
21595: LIST
21596: PUSH
21597: LD_INT 34
21599: PUSH
21600: LD_INT 32
21602: PUSH
21603: EMPTY
21604: LIST
21605: LIST
21606: PUSH
21607: EMPTY
21608: LIST
21609: LIST
21610: LIST
21611: LIST
21612: PUSH
21613: EMPTY
21614: LIST
21615: LIST
21616: LIST
21617: PPUSH
21618: CALL_OW 69
21622: ST_TO_ADDR
// if not tmp then
21623: LD_VAR 0 2
21627: NOT
21628: IFFALSE 21632
// exit ;
21630: GO 21682
// for i in tmp do
21632: LD_ADDR_VAR 0 1
21636: PUSH
21637: LD_VAR 0 2
21641: PUSH
21642: FOR_IN
21643: IFFALSE 21680
// if GetCargo ( i , mat_artifact ) = 0 then
21645: LD_VAR 0 1
21649: PPUSH
21650: LD_INT 4
21652: PPUSH
21653: CALL_OW 289
21657: PUSH
21658: LD_INT 0
21660: EQUAL
21661: IFFALSE 21678
// SetCargo ( i , mat_siberit , 100 ) ;
21663: LD_VAR 0 1
21667: PPUSH
21668: LD_INT 3
21670: PPUSH
21671: LD_INT 100
21673: PPUSH
21674: CALL_OW 290
21678: GO 21642
21680: POP
21681: POP
// end ;
21682: PPOPN 2
21684: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
21685: LD_EXP 26
21689: PUSH
21690: LD_EXP 71
21694: AND
21695: IFFALSE 21878
21697: GO 21699
21699: DISABLE
21700: LD_INT 0
21702: PPUSH
21703: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21704: LD_ADDR_VAR 0 2
21708: PUSH
21709: LD_INT 22
21711: PUSH
21712: LD_OWVAR 2
21716: PUSH
21717: EMPTY
21718: LIST
21719: LIST
21720: PPUSH
21721: CALL_OW 69
21725: ST_TO_ADDR
// if not tmp then
21726: LD_VAR 0 2
21730: NOT
21731: IFFALSE 21735
// exit ;
21733: GO 21878
// for i := 1 to 2 do
21735: LD_ADDR_VAR 0 1
21739: PUSH
21740: DOUBLE
21741: LD_INT 1
21743: DEC
21744: ST_TO_ADDR
21745: LD_INT 2
21747: PUSH
21748: FOR_TO
21749: IFFALSE 21876
// begin uc_side := your_side ;
21751: LD_ADDR_OWVAR 20
21755: PUSH
21756: LD_OWVAR 2
21760: ST_TO_ADDR
// uc_nation := nation_american ;
21761: LD_ADDR_OWVAR 21
21765: PUSH
21766: LD_INT 1
21768: ST_TO_ADDR
// vc_chassis := us_morphling ;
21769: LD_ADDR_OWVAR 37
21773: PUSH
21774: LD_INT 5
21776: ST_TO_ADDR
// vc_engine := engine_siberite ;
21777: LD_ADDR_OWVAR 39
21781: PUSH
21782: LD_INT 3
21784: ST_TO_ADDR
// vc_control := control_computer ;
21785: LD_ADDR_OWVAR 38
21789: PUSH
21790: LD_INT 3
21792: ST_TO_ADDR
// vc_weapon := us_double_laser ;
21793: LD_ADDR_OWVAR 40
21797: PUSH
21798: LD_INT 10
21800: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
21801: LD_VAR 0 2
21805: PUSH
21806: LD_INT 1
21808: ARRAY
21809: PPUSH
21810: CALL_OW 310
21814: NOT
21815: IFFALSE 21862
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
21817: CALL_OW 45
21821: PPUSH
21822: LD_VAR 0 2
21826: PUSH
21827: LD_INT 1
21829: ARRAY
21830: PPUSH
21831: CALL_OW 250
21835: PPUSH
21836: LD_VAR 0 2
21840: PUSH
21841: LD_INT 1
21843: ARRAY
21844: PPUSH
21845: CALL_OW 251
21849: PPUSH
21850: LD_INT 12
21852: PPUSH
21853: LD_INT 1
21855: PPUSH
21856: CALL_OW 50
21860: GO 21874
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
21862: CALL_OW 45
21866: PPUSH
21867: LD_INT 1
21869: PPUSH
21870: CALL_OW 51
// end ;
21874: GO 21748
21876: POP
21877: POP
// end ;
21878: PPOPN 2
21880: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
21881: LD_EXP 26
21885: PUSH
21886: LD_EXP 72
21890: AND
21891: IFFALSE 22113
21893: GO 21895
21895: DISABLE
21896: LD_INT 0
21898: PPUSH
21899: PPUSH
21900: PPUSH
21901: PPUSH
21902: PPUSH
21903: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21904: LD_ADDR_VAR 0 6
21908: PUSH
21909: LD_INT 22
21911: PUSH
21912: LD_OWVAR 2
21916: PUSH
21917: EMPTY
21918: LIST
21919: LIST
21920: PUSH
21921: LD_INT 21
21923: PUSH
21924: LD_INT 1
21926: PUSH
21927: EMPTY
21928: LIST
21929: LIST
21930: PUSH
21931: LD_INT 3
21933: PUSH
21934: LD_INT 23
21936: PUSH
21937: LD_INT 0
21939: PUSH
21940: EMPTY
21941: LIST
21942: LIST
21943: PUSH
21944: EMPTY
21945: LIST
21946: LIST
21947: PUSH
21948: EMPTY
21949: LIST
21950: LIST
21951: LIST
21952: PPUSH
21953: CALL_OW 69
21957: ST_TO_ADDR
// if not tmp then
21958: LD_VAR 0 6
21962: NOT
21963: IFFALSE 21967
// exit ;
21965: GO 22113
// s1 := rand ( 1 , 4 ) ;
21967: LD_ADDR_VAR 0 2
21971: PUSH
21972: LD_INT 1
21974: PPUSH
21975: LD_INT 4
21977: PPUSH
21978: CALL_OW 12
21982: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
21983: LD_ADDR_VAR 0 4
21987: PUSH
21988: LD_VAR 0 6
21992: PUSH
21993: LD_INT 1
21995: ARRAY
21996: PPUSH
21997: LD_VAR 0 2
22001: PPUSH
22002: CALL_OW 259
22006: ST_TO_ADDR
// if s1 = 1 then
22007: LD_VAR 0 2
22011: PUSH
22012: LD_INT 1
22014: EQUAL
22015: IFFALSE 22035
// s2 := rand ( 2 , 4 ) else
22017: LD_ADDR_VAR 0 3
22021: PUSH
22022: LD_INT 2
22024: PPUSH
22025: LD_INT 4
22027: PPUSH
22028: CALL_OW 12
22032: ST_TO_ADDR
22033: GO 22043
// s2 := 1 ;
22035: LD_ADDR_VAR 0 3
22039: PUSH
22040: LD_INT 1
22042: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
22043: LD_ADDR_VAR 0 5
22047: PUSH
22048: LD_VAR 0 6
22052: PUSH
22053: LD_INT 1
22055: ARRAY
22056: PPUSH
22057: LD_VAR 0 3
22061: PPUSH
22062: CALL_OW 259
22066: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
22067: LD_VAR 0 6
22071: PUSH
22072: LD_INT 1
22074: ARRAY
22075: PPUSH
22076: LD_VAR 0 2
22080: PPUSH
22081: LD_VAR 0 5
22085: PPUSH
22086: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
22090: LD_VAR 0 6
22094: PUSH
22095: LD_INT 1
22097: ARRAY
22098: PPUSH
22099: LD_VAR 0 3
22103: PPUSH
22104: LD_VAR 0 4
22108: PPUSH
22109: CALL_OW 237
// end ;
22113: PPOPN 6
22115: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
22116: LD_EXP 26
22120: PUSH
22121: LD_EXP 73
22125: AND
22126: IFFALSE 22205
22128: GO 22130
22130: DISABLE
22131: LD_INT 0
22133: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
22134: LD_ADDR_VAR 0 1
22138: PUSH
22139: LD_INT 22
22141: PUSH
22142: LD_OWVAR 2
22146: PUSH
22147: EMPTY
22148: LIST
22149: LIST
22150: PUSH
22151: LD_INT 30
22153: PUSH
22154: LD_INT 3
22156: PUSH
22157: EMPTY
22158: LIST
22159: LIST
22160: PUSH
22161: EMPTY
22162: LIST
22163: LIST
22164: PPUSH
22165: CALL_OW 69
22169: ST_TO_ADDR
// if not tmp then
22170: LD_VAR 0 1
22174: NOT
22175: IFFALSE 22179
// exit ;
22177: GO 22205
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
22179: LD_VAR 0 1
22183: PUSH
22184: LD_INT 1
22186: PPUSH
22187: LD_VAR 0 1
22191: PPUSH
22192: CALL_OW 12
22196: ARRAY
22197: PPUSH
22198: LD_INT 1
22200: PPUSH
22201: CALL_OW 234
// end ;
22205: PPOPN 1
22207: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
22208: LD_EXP 26
22212: PUSH
22213: LD_EXP 74
22217: AND
22218: IFFALSE 22330
22220: GO 22222
22222: DISABLE
22223: LD_INT 0
22225: PPUSH
22226: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
22227: LD_ADDR_VAR 0 2
22231: PUSH
22232: LD_INT 22
22234: PUSH
22235: LD_OWVAR 2
22239: PUSH
22240: EMPTY
22241: LIST
22242: LIST
22243: PUSH
22244: LD_INT 2
22246: PUSH
22247: LD_INT 30
22249: PUSH
22250: LD_INT 27
22252: PUSH
22253: EMPTY
22254: LIST
22255: LIST
22256: PUSH
22257: LD_INT 30
22259: PUSH
22260: LD_INT 26
22262: PUSH
22263: EMPTY
22264: LIST
22265: LIST
22266: PUSH
22267: LD_INT 30
22269: PUSH
22270: LD_INT 28
22272: PUSH
22273: EMPTY
22274: LIST
22275: LIST
22276: PUSH
22277: EMPTY
22278: LIST
22279: LIST
22280: LIST
22281: LIST
22282: PUSH
22283: EMPTY
22284: LIST
22285: LIST
22286: PPUSH
22287: CALL_OW 69
22291: ST_TO_ADDR
// if not tmp then
22292: LD_VAR 0 2
22296: NOT
22297: IFFALSE 22301
// exit ;
22299: GO 22330
// for i in tmp do
22301: LD_ADDR_VAR 0 1
22305: PUSH
22306: LD_VAR 0 2
22310: PUSH
22311: FOR_IN
22312: IFFALSE 22328
// SetLives ( i , 1 ) ;
22314: LD_VAR 0 1
22318: PPUSH
22319: LD_INT 1
22321: PPUSH
22322: CALL_OW 234
22326: GO 22311
22328: POP
22329: POP
// end ;
22330: PPOPN 2
22332: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
22333: LD_EXP 26
22337: PUSH
22338: LD_EXP 75
22342: AND
22343: IFFALSE 22630
22345: GO 22347
22347: DISABLE
22348: LD_INT 0
22350: PPUSH
22351: PPUSH
22352: PPUSH
// begin i := rand ( 1 , 7 ) ;
22353: LD_ADDR_VAR 0 1
22357: PUSH
22358: LD_INT 1
22360: PPUSH
22361: LD_INT 7
22363: PPUSH
22364: CALL_OW 12
22368: ST_TO_ADDR
// case i of 1 :
22369: LD_VAR 0 1
22373: PUSH
22374: LD_INT 1
22376: DOUBLE
22377: EQUAL
22378: IFTRUE 22382
22380: GO 22392
22382: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
22383: LD_STRING earthquake(getX(game), 0, 32)
22385: PPUSH
22386: CALL_OW 559
22390: GO 22630
22392: LD_INT 2
22394: DOUBLE
22395: EQUAL
22396: IFTRUE 22400
22398: GO 22414
22400: POP
// begin ToLua ( displayStucuk(); ) ;
22401: LD_STRING displayStucuk();
22403: PPUSH
22404: CALL_OW 559
// ResetFog ;
22408: CALL_OW 335
// end ; 3 :
22412: GO 22630
22414: LD_INT 3
22416: DOUBLE
22417: EQUAL
22418: IFTRUE 22422
22420: GO 22526
22422: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22423: LD_ADDR_VAR 0 2
22427: PUSH
22428: LD_INT 22
22430: PUSH
22431: LD_OWVAR 2
22435: PUSH
22436: EMPTY
22437: LIST
22438: LIST
22439: PUSH
22440: LD_INT 25
22442: PUSH
22443: LD_INT 1
22445: PUSH
22446: EMPTY
22447: LIST
22448: LIST
22449: PUSH
22450: EMPTY
22451: LIST
22452: LIST
22453: PPUSH
22454: CALL_OW 69
22458: ST_TO_ADDR
// if not tmp then
22459: LD_VAR 0 2
22463: NOT
22464: IFFALSE 22468
// exit ;
22466: GO 22630
// un := tmp [ rand ( 1 , tmp ) ] ;
22468: LD_ADDR_VAR 0 3
22472: PUSH
22473: LD_VAR 0 2
22477: PUSH
22478: LD_INT 1
22480: PPUSH
22481: LD_VAR 0 2
22485: PPUSH
22486: CALL_OW 12
22490: ARRAY
22491: ST_TO_ADDR
// if Crawls ( un ) then
22492: LD_VAR 0 3
22496: PPUSH
22497: CALL_OW 318
22501: IFFALSE 22512
// ComWalk ( un ) ;
22503: LD_VAR 0 3
22507: PPUSH
22508: CALL_OW 138
// SetClass ( un , class_mortar ) ;
22512: LD_VAR 0 3
22516: PPUSH
22517: LD_INT 8
22519: PPUSH
22520: CALL_OW 336
// end ; 4 :
22524: GO 22630
22526: LD_INT 4
22528: DOUBLE
22529: EQUAL
22530: IFTRUE 22534
22532: GO 22608
22534: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
22535: LD_ADDR_VAR 0 2
22539: PUSH
22540: LD_INT 22
22542: PUSH
22543: LD_OWVAR 2
22547: PUSH
22548: EMPTY
22549: LIST
22550: LIST
22551: PUSH
22552: LD_INT 30
22554: PUSH
22555: LD_INT 29
22557: PUSH
22558: EMPTY
22559: LIST
22560: LIST
22561: PUSH
22562: EMPTY
22563: LIST
22564: LIST
22565: PPUSH
22566: CALL_OW 69
22570: ST_TO_ADDR
// if not tmp then
22571: LD_VAR 0 2
22575: NOT
22576: IFFALSE 22580
// exit ;
22578: GO 22630
// CenterNowOnUnits ( tmp [ 1 ] ) ;
22580: LD_VAR 0 2
22584: PUSH
22585: LD_INT 1
22587: ARRAY
22588: PPUSH
22589: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
22593: LD_VAR 0 2
22597: PUSH
22598: LD_INT 1
22600: ARRAY
22601: PPUSH
22602: CALL_OW 65
// end ; 5 .. 7 :
22606: GO 22630
22608: LD_INT 5
22610: DOUBLE
22611: GREATEREQUAL
22612: IFFALSE 22620
22614: LD_INT 7
22616: DOUBLE
22617: LESSEQUAL
22618: IFTRUE 22622
22620: GO 22629
22622: POP
// StreamSibBomb ; end ;
22623: CALL 18867 0 0
22627: GO 22630
22629: POP
// end ;
22630: PPOPN 3
22632: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
22633: LD_EXP 26
22637: PUSH
22638: LD_EXP 76
22642: AND
22643: IFFALSE 22799
22645: GO 22647
22647: DISABLE
22648: LD_INT 0
22650: PPUSH
22651: PPUSH
22652: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
22653: LD_ADDR_VAR 0 2
22657: PUSH
22658: LD_INT 81
22660: PUSH
22661: LD_OWVAR 2
22665: PUSH
22666: EMPTY
22667: LIST
22668: LIST
22669: PUSH
22670: LD_INT 2
22672: PUSH
22673: LD_INT 21
22675: PUSH
22676: LD_INT 1
22678: PUSH
22679: EMPTY
22680: LIST
22681: LIST
22682: PUSH
22683: LD_INT 21
22685: PUSH
22686: LD_INT 2
22688: PUSH
22689: EMPTY
22690: LIST
22691: LIST
22692: PUSH
22693: EMPTY
22694: LIST
22695: LIST
22696: LIST
22697: PUSH
22698: EMPTY
22699: LIST
22700: LIST
22701: PPUSH
22702: CALL_OW 69
22706: ST_TO_ADDR
// if not tmp then
22707: LD_VAR 0 2
22711: NOT
22712: IFFALSE 22716
// exit ;
22714: GO 22799
// p := 0 ;
22716: LD_ADDR_VAR 0 3
22720: PUSH
22721: LD_INT 0
22723: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22724: LD_INT 35
22726: PPUSH
22727: CALL_OW 67
// p := p + 1 ;
22731: LD_ADDR_VAR 0 3
22735: PUSH
22736: LD_VAR 0 3
22740: PUSH
22741: LD_INT 1
22743: PLUS
22744: ST_TO_ADDR
// for i in tmp do
22745: LD_ADDR_VAR 0 1
22749: PUSH
22750: LD_VAR 0 2
22754: PUSH
22755: FOR_IN
22756: IFFALSE 22787
// if GetLives ( i ) < 1000 then
22758: LD_VAR 0 1
22762: PPUSH
22763: CALL_OW 256
22767: PUSH
22768: LD_INT 1000
22770: LESS
22771: IFFALSE 22785
// SetLives ( i , 1000 ) ;
22773: LD_VAR 0 1
22777: PPUSH
22778: LD_INT 1000
22780: PPUSH
22781: CALL_OW 234
22785: GO 22755
22787: POP
22788: POP
// until p > 20 ;
22789: LD_VAR 0 3
22793: PUSH
22794: LD_INT 20
22796: GREATER
22797: IFFALSE 22724
// end ;
22799: PPOPN 3
22801: END
// every 0 0$1 trigger StreamModeActive and sTime do
22802: LD_EXP 26
22806: PUSH
22807: LD_EXP 77
22811: AND
22812: IFFALSE 22847
22814: GO 22816
22816: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
22817: LD_INT 28
22819: PPUSH
22820: LD_OWVAR 2
22824: PPUSH
22825: LD_INT 2
22827: PPUSH
22828: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
22832: LD_INT 30
22834: PPUSH
22835: LD_OWVAR 2
22839: PPUSH
22840: LD_INT 2
22842: PPUSH
22843: CALL_OW 322
// end ;
22847: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
22848: LD_EXP 26
22852: PUSH
22853: LD_EXP 78
22857: AND
22858: IFFALSE 22979
22860: GO 22862
22862: DISABLE
22863: LD_INT 0
22865: PPUSH
22866: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22867: LD_ADDR_VAR 0 2
22871: PUSH
22872: LD_INT 22
22874: PUSH
22875: LD_OWVAR 2
22879: PUSH
22880: EMPTY
22881: LIST
22882: LIST
22883: PUSH
22884: LD_INT 21
22886: PUSH
22887: LD_INT 1
22889: PUSH
22890: EMPTY
22891: LIST
22892: LIST
22893: PUSH
22894: LD_INT 3
22896: PUSH
22897: LD_INT 23
22899: PUSH
22900: LD_INT 0
22902: PUSH
22903: EMPTY
22904: LIST
22905: LIST
22906: PUSH
22907: EMPTY
22908: LIST
22909: LIST
22910: PUSH
22911: EMPTY
22912: LIST
22913: LIST
22914: LIST
22915: PPUSH
22916: CALL_OW 69
22920: ST_TO_ADDR
// if not tmp then
22921: LD_VAR 0 2
22925: NOT
22926: IFFALSE 22930
// exit ;
22928: GO 22979
// for i in tmp do
22930: LD_ADDR_VAR 0 1
22934: PUSH
22935: LD_VAR 0 2
22939: PUSH
22940: FOR_IN
22941: IFFALSE 22977
// begin if Crawls ( i ) then
22943: LD_VAR 0 1
22947: PPUSH
22948: CALL_OW 318
22952: IFFALSE 22963
// ComWalk ( i ) ;
22954: LD_VAR 0 1
22958: PPUSH
22959: CALL_OW 138
// SetClass ( i , 2 ) ;
22963: LD_VAR 0 1
22967: PPUSH
22968: LD_INT 2
22970: PPUSH
22971: CALL_OW 336
// end ;
22975: GO 22940
22977: POP
22978: POP
// end ;
22979: PPOPN 2
22981: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
22982: LD_EXP 26
22986: PUSH
22987: LD_EXP 79
22991: AND
22992: IFFALSE 23280
22994: GO 22996
22996: DISABLE
22997: LD_INT 0
22999: PPUSH
23000: PPUSH
23001: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
23002: LD_OWVAR 2
23006: PPUSH
23007: LD_INT 9
23009: PPUSH
23010: LD_INT 1
23012: PPUSH
23013: LD_INT 1
23015: PPUSH
23016: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
23020: LD_INT 9
23022: PPUSH
23023: LD_OWVAR 2
23027: PPUSH
23028: CALL_OW 343
// uc_side := 9 ;
23032: LD_ADDR_OWVAR 20
23036: PUSH
23037: LD_INT 9
23039: ST_TO_ADDR
// uc_nation := 2 ;
23040: LD_ADDR_OWVAR 21
23044: PUSH
23045: LD_INT 2
23047: ST_TO_ADDR
// hc_name := Dark Warrior ;
23048: LD_ADDR_OWVAR 26
23052: PUSH
23053: LD_STRING Dark Warrior
23055: ST_TO_ADDR
// hc_gallery :=  ;
23056: LD_ADDR_OWVAR 33
23060: PUSH
23061: LD_STRING 
23063: ST_TO_ADDR
// hc_noskilllimit := true ;
23064: LD_ADDR_OWVAR 76
23068: PUSH
23069: LD_INT 1
23071: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
23072: LD_ADDR_OWVAR 31
23076: PUSH
23077: LD_INT 30
23079: PUSH
23080: LD_INT 30
23082: PUSH
23083: LD_INT 30
23085: PUSH
23086: LD_INT 30
23088: PUSH
23089: EMPTY
23090: LIST
23091: LIST
23092: LIST
23093: LIST
23094: ST_TO_ADDR
// un := CreateHuman ;
23095: LD_ADDR_VAR 0 3
23099: PUSH
23100: CALL_OW 44
23104: ST_TO_ADDR
// hc_noskilllimit := false ;
23105: LD_ADDR_OWVAR 76
23109: PUSH
23110: LD_INT 0
23112: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
23113: LD_VAR 0 3
23117: PPUSH
23118: LD_INT 1
23120: PPUSH
23121: CALL_OW 51
// ToLua ( playRanger() ) ;
23125: LD_STRING playRanger()
23127: PPUSH
23128: CALL_OW 559
// p := 0 ;
23132: LD_ADDR_VAR 0 2
23136: PUSH
23137: LD_INT 0
23139: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23140: LD_INT 35
23142: PPUSH
23143: CALL_OW 67
// p := p + 1 ;
23147: LD_ADDR_VAR 0 2
23151: PUSH
23152: LD_VAR 0 2
23156: PUSH
23157: LD_INT 1
23159: PLUS
23160: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
23161: LD_VAR 0 3
23165: PPUSH
23166: CALL_OW 256
23170: PUSH
23171: LD_INT 1000
23173: LESS
23174: IFFALSE 23188
// SetLives ( un , 1000 ) ;
23176: LD_VAR 0 3
23180: PPUSH
23181: LD_INT 1000
23183: PPUSH
23184: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
23188: LD_VAR 0 3
23192: PPUSH
23193: LD_INT 81
23195: PUSH
23196: LD_OWVAR 2
23200: PUSH
23201: EMPTY
23202: LIST
23203: LIST
23204: PUSH
23205: LD_INT 91
23207: PUSH
23208: LD_VAR 0 3
23212: PUSH
23213: LD_INT 30
23215: PUSH
23216: EMPTY
23217: LIST
23218: LIST
23219: LIST
23220: PUSH
23221: EMPTY
23222: LIST
23223: LIST
23224: PPUSH
23225: CALL_OW 69
23229: PPUSH
23230: LD_VAR 0 3
23234: PPUSH
23235: CALL_OW 74
23239: PPUSH
23240: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
23244: LD_VAR 0 2
23248: PUSH
23249: LD_INT 80
23251: GREATER
23252: PUSH
23253: LD_VAR 0 3
23257: PPUSH
23258: CALL_OW 301
23262: OR
23263: IFFALSE 23140
// if un then
23265: LD_VAR 0 3
23269: IFFALSE 23280
// RemoveUnit ( un ) ;
23271: LD_VAR 0 3
23275: PPUSH
23276: CALL_OW 64
// end ;
23280: PPOPN 3
23282: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
23283: LD_EXP 80
23287: IFFALSE 23403
23289: GO 23291
23291: DISABLE
23292: LD_INT 0
23294: PPUSH
23295: PPUSH
23296: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
23297: LD_ADDR_VAR 0 2
23301: PUSH
23302: LD_INT 81
23304: PUSH
23305: LD_OWVAR 2
23309: PUSH
23310: EMPTY
23311: LIST
23312: LIST
23313: PUSH
23314: LD_INT 21
23316: PUSH
23317: LD_INT 1
23319: PUSH
23320: EMPTY
23321: LIST
23322: LIST
23323: PUSH
23324: EMPTY
23325: LIST
23326: LIST
23327: PPUSH
23328: CALL_OW 69
23332: ST_TO_ADDR
// ToLua ( playComputer() ) ;
23333: LD_STRING playComputer()
23335: PPUSH
23336: CALL_OW 559
// if not tmp then
23340: LD_VAR 0 2
23344: NOT
23345: IFFALSE 23349
// exit ;
23347: GO 23403
// for i in tmp do
23349: LD_ADDR_VAR 0 1
23353: PUSH
23354: LD_VAR 0 2
23358: PUSH
23359: FOR_IN
23360: IFFALSE 23401
// for j := 1 to 4 do
23362: LD_ADDR_VAR 0 3
23366: PUSH
23367: DOUBLE
23368: LD_INT 1
23370: DEC
23371: ST_TO_ADDR
23372: LD_INT 4
23374: PUSH
23375: FOR_TO
23376: IFFALSE 23397
// SetSkill ( i , j , 10 ) ;
23378: LD_VAR 0 1
23382: PPUSH
23383: LD_VAR 0 3
23387: PPUSH
23388: LD_INT 10
23390: PPUSH
23391: CALL_OW 237
23395: GO 23375
23397: POP
23398: POP
23399: GO 23359
23401: POP
23402: POP
// end ;
23403: PPOPN 3
23405: END
// every 0 0$1 trigger s30 do var i , tmp ;
23406: LD_EXP 81
23410: IFFALSE 23479
23412: GO 23414
23414: DISABLE
23415: LD_INT 0
23417: PPUSH
23418: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23419: LD_ADDR_VAR 0 2
23423: PUSH
23424: LD_INT 22
23426: PUSH
23427: LD_OWVAR 2
23431: PUSH
23432: EMPTY
23433: LIST
23434: LIST
23435: PPUSH
23436: CALL_OW 69
23440: ST_TO_ADDR
// if not tmp then
23441: LD_VAR 0 2
23445: NOT
23446: IFFALSE 23450
// exit ;
23448: GO 23479
// for i in tmp do
23450: LD_ADDR_VAR 0 1
23454: PUSH
23455: LD_VAR 0 2
23459: PUSH
23460: FOR_IN
23461: IFFALSE 23477
// SetLives ( i , 300 ) ;
23463: LD_VAR 0 1
23467: PPUSH
23468: LD_INT 300
23470: PPUSH
23471: CALL_OW 234
23475: GO 23460
23477: POP
23478: POP
// end ;
23479: PPOPN 2
23481: END
// every 0 0$1 trigger s60 do var i , tmp ;
23482: LD_EXP 82
23486: IFFALSE 23555
23488: GO 23490
23490: DISABLE
23491: LD_INT 0
23493: PPUSH
23494: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23495: LD_ADDR_VAR 0 2
23499: PUSH
23500: LD_INT 22
23502: PUSH
23503: LD_OWVAR 2
23507: PUSH
23508: EMPTY
23509: LIST
23510: LIST
23511: PPUSH
23512: CALL_OW 69
23516: ST_TO_ADDR
// if not tmp then
23517: LD_VAR 0 2
23521: NOT
23522: IFFALSE 23526
// exit ;
23524: GO 23555
// for i in tmp do
23526: LD_ADDR_VAR 0 1
23530: PUSH
23531: LD_VAR 0 2
23535: PUSH
23536: FOR_IN
23537: IFFALSE 23553
// SetLives ( i , 600 ) ;
23539: LD_VAR 0 1
23543: PPUSH
23544: LD_INT 600
23546: PPUSH
23547: CALL_OW 234
23551: GO 23536
23553: POP
23554: POP
// end ;
23555: PPOPN 2
23557: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
23558: LD_INT 0
23560: PPUSH
// case cmd of 301 :
23561: LD_VAR 0 1
23565: PUSH
23566: LD_INT 301
23568: DOUBLE
23569: EQUAL
23570: IFTRUE 23574
23572: GO 23606
23574: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
23575: LD_VAR 0 6
23579: PPUSH
23580: LD_VAR 0 7
23584: PPUSH
23585: LD_VAR 0 8
23589: PPUSH
23590: LD_VAR 0 4
23594: PPUSH
23595: LD_VAR 0 5
23599: PPUSH
23600: CALL 24807 0 5
23604: GO 23727
23606: LD_INT 302
23608: DOUBLE
23609: EQUAL
23610: IFTRUE 23614
23612: GO 23651
23614: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
23615: LD_VAR 0 6
23619: PPUSH
23620: LD_VAR 0 7
23624: PPUSH
23625: LD_VAR 0 8
23629: PPUSH
23630: LD_VAR 0 9
23634: PPUSH
23635: LD_VAR 0 4
23639: PPUSH
23640: LD_VAR 0 5
23644: PPUSH
23645: CALL 24898 0 6
23649: GO 23727
23651: LD_INT 303
23653: DOUBLE
23654: EQUAL
23655: IFTRUE 23659
23657: GO 23696
23659: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
23660: LD_VAR 0 6
23664: PPUSH
23665: LD_VAR 0 7
23669: PPUSH
23670: LD_VAR 0 8
23674: PPUSH
23675: LD_VAR 0 9
23679: PPUSH
23680: LD_VAR 0 4
23684: PPUSH
23685: LD_VAR 0 5
23689: PPUSH
23690: CALL 23732 0 6
23694: GO 23727
23696: LD_INT 304
23698: DOUBLE
23699: EQUAL
23700: IFTRUE 23704
23702: GO 23726
23704: POP
// hHackTeleport ( unit , x , y ) ; end ;
23705: LD_VAR 0 2
23709: PPUSH
23710: LD_VAR 0 4
23714: PPUSH
23715: LD_VAR 0 5
23719: PPUSH
23720: CALL 25491 0 3
23724: GO 23727
23726: POP
// end ;
23727: LD_VAR 0 12
23731: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
23732: LD_INT 0
23734: PPUSH
23735: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
23736: LD_VAR 0 1
23740: PUSH
23741: LD_INT 1
23743: LESS
23744: PUSH
23745: LD_VAR 0 1
23749: PUSH
23750: LD_INT 3
23752: GREATER
23753: OR
23754: PUSH
23755: LD_VAR 0 5
23759: PPUSH
23760: LD_VAR 0 6
23764: PPUSH
23765: CALL_OW 428
23769: OR
23770: IFFALSE 23774
// exit ;
23772: GO 24494
// uc_side := your_side ;
23774: LD_ADDR_OWVAR 20
23778: PUSH
23779: LD_OWVAR 2
23783: ST_TO_ADDR
// uc_nation := nation ;
23784: LD_ADDR_OWVAR 21
23788: PUSH
23789: LD_VAR 0 1
23793: ST_TO_ADDR
// bc_level = 1 ;
23794: LD_ADDR_OWVAR 43
23798: PUSH
23799: LD_INT 1
23801: ST_TO_ADDR
// case btype of 1 :
23802: LD_VAR 0 2
23806: PUSH
23807: LD_INT 1
23809: DOUBLE
23810: EQUAL
23811: IFTRUE 23815
23813: GO 23826
23815: POP
// bc_type := b_depot ; 2 :
23816: LD_ADDR_OWVAR 42
23820: PUSH
23821: LD_INT 0
23823: ST_TO_ADDR
23824: GO 24438
23826: LD_INT 2
23828: DOUBLE
23829: EQUAL
23830: IFTRUE 23834
23832: GO 23845
23834: POP
// bc_type := b_warehouse ; 3 :
23835: LD_ADDR_OWVAR 42
23839: PUSH
23840: LD_INT 1
23842: ST_TO_ADDR
23843: GO 24438
23845: LD_INT 3
23847: DOUBLE
23848: EQUAL
23849: IFTRUE 23853
23851: GO 23864
23853: POP
// bc_type := b_lab ; 4 .. 9 :
23854: LD_ADDR_OWVAR 42
23858: PUSH
23859: LD_INT 6
23861: ST_TO_ADDR
23862: GO 24438
23864: LD_INT 4
23866: DOUBLE
23867: GREATEREQUAL
23868: IFFALSE 23876
23870: LD_INT 9
23872: DOUBLE
23873: LESSEQUAL
23874: IFTRUE 23878
23876: GO 23930
23878: POP
// begin bc_type := b_lab_half ;
23879: LD_ADDR_OWVAR 42
23883: PUSH
23884: LD_INT 7
23886: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
23887: LD_ADDR_OWVAR 44
23891: PUSH
23892: LD_INT 10
23894: PUSH
23895: LD_INT 11
23897: PUSH
23898: LD_INT 12
23900: PUSH
23901: LD_INT 15
23903: PUSH
23904: LD_INT 14
23906: PUSH
23907: LD_INT 13
23909: PUSH
23910: EMPTY
23911: LIST
23912: LIST
23913: LIST
23914: LIST
23915: LIST
23916: LIST
23917: PUSH
23918: LD_VAR 0 2
23922: PUSH
23923: LD_INT 3
23925: MINUS
23926: ARRAY
23927: ST_TO_ADDR
// end ; 10 .. 13 :
23928: GO 24438
23930: LD_INT 10
23932: DOUBLE
23933: GREATEREQUAL
23934: IFFALSE 23942
23936: LD_INT 13
23938: DOUBLE
23939: LESSEQUAL
23940: IFTRUE 23944
23942: GO 24021
23944: POP
// begin bc_type := b_lab_full ;
23945: LD_ADDR_OWVAR 42
23949: PUSH
23950: LD_INT 8
23952: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
23953: LD_ADDR_OWVAR 44
23957: PUSH
23958: LD_INT 10
23960: PUSH
23961: LD_INT 12
23963: PUSH
23964: LD_INT 14
23966: PUSH
23967: LD_INT 13
23969: PUSH
23970: EMPTY
23971: LIST
23972: LIST
23973: LIST
23974: LIST
23975: PUSH
23976: LD_VAR 0 2
23980: PUSH
23981: LD_INT 9
23983: MINUS
23984: ARRAY
23985: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
23986: LD_ADDR_OWVAR 45
23990: PUSH
23991: LD_INT 11
23993: PUSH
23994: LD_INT 15
23996: PUSH
23997: LD_INT 12
23999: PUSH
24000: LD_INT 15
24002: PUSH
24003: EMPTY
24004: LIST
24005: LIST
24006: LIST
24007: LIST
24008: PUSH
24009: LD_VAR 0 2
24013: PUSH
24014: LD_INT 9
24016: MINUS
24017: ARRAY
24018: ST_TO_ADDR
// end ; 14 :
24019: GO 24438
24021: LD_INT 14
24023: DOUBLE
24024: EQUAL
24025: IFTRUE 24029
24027: GO 24040
24029: POP
// bc_type := b_workshop ; 15 :
24030: LD_ADDR_OWVAR 42
24034: PUSH
24035: LD_INT 2
24037: ST_TO_ADDR
24038: GO 24438
24040: LD_INT 15
24042: DOUBLE
24043: EQUAL
24044: IFTRUE 24048
24046: GO 24059
24048: POP
// bc_type := b_factory ; 16 :
24049: LD_ADDR_OWVAR 42
24053: PUSH
24054: LD_INT 3
24056: ST_TO_ADDR
24057: GO 24438
24059: LD_INT 16
24061: DOUBLE
24062: EQUAL
24063: IFTRUE 24067
24065: GO 24078
24067: POP
// bc_type := b_ext_gun ; 17 :
24068: LD_ADDR_OWVAR 42
24072: PUSH
24073: LD_INT 17
24075: ST_TO_ADDR
24076: GO 24438
24078: LD_INT 17
24080: DOUBLE
24081: EQUAL
24082: IFTRUE 24086
24084: GO 24114
24086: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
24087: LD_ADDR_OWVAR 42
24091: PUSH
24092: LD_INT 19
24094: PUSH
24095: LD_INT 23
24097: PUSH
24098: LD_INT 19
24100: PUSH
24101: EMPTY
24102: LIST
24103: LIST
24104: LIST
24105: PUSH
24106: LD_VAR 0 1
24110: ARRAY
24111: ST_TO_ADDR
24112: GO 24438
24114: LD_INT 18
24116: DOUBLE
24117: EQUAL
24118: IFTRUE 24122
24120: GO 24133
24122: POP
// bc_type := b_ext_radar ; 19 :
24123: LD_ADDR_OWVAR 42
24127: PUSH
24128: LD_INT 20
24130: ST_TO_ADDR
24131: GO 24438
24133: LD_INT 19
24135: DOUBLE
24136: EQUAL
24137: IFTRUE 24141
24139: GO 24152
24141: POP
// bc_type := b_ext_radio ; 20 :
24142: LD_ADDR_OWVAR 42
24146: PUSH
24147: LD_INT 22
24149: ST_TO_ADDR
24150: GO 24438
24152: LD_INT 20
24154: DOUBLE
24155: EQUAL
24156: IFTRUE 24160
24158: GO 24171
24160: POP
// bc_type := b_ext_siberium ; 21 :
24161: LD_ADDR_OWVAR 42
24165: PUSH
24166: LD_INT 21
24168: ST_TO_ADDR
24169: GO 24438
24171: LD_INT 21
24173: DOUBLE
24174: EQUAL
24175: IFTRUE 24179
24177: GO 24190
24179: POP
// bc_type := b_ext_computer ; 22 :
24180: LD_ADDR_OWVAR 42
24184: PUSH
24185: LD_INT 24
24187: ST_TO_ADDR
24188: GO 24438
24190: LD_INT 22
24192: DOUBLE
24193: EQUAL
24194: IFTRUE 24198
24196: GO 24209
24198: POP
// bc_type := b_ext_track ; 23 :
24199: LD_ADDR_OWVAR 42
24203: PUSH
24204: LD_INT 16
24206: ST_TO_ADDR
24207: GO 24438
24209: LD_INT 23
24211: DOUBLE
24212: EQUAL
24213: IFTRUE 24217
24215: GO 24228
24217: POP
// bc_type := b_ext_laser ; 24 :
24218: LD_ADDR_OWVAR 42
24222: PUSH
24223: LD_INT 25
24225: ST_TO_ADDR
24226: GO 24438
24228: LD_INT 24
24230: DOUBLE
24231: EQUAL
24232: IFTRUE 24236
24234: GO 24247
24236: POP
// bc_type := b_control_tower ; 25 :
24237: LD_ADDR_OWVAR 42
24241: PUSH
24242: LD_INT 36
24244: ST_TO_ADDR
24245: GO 24438
24247: LD_INT 25
24249: DOUBLE
24250: EQUAL
24251: IFTRUE 24255
24253: GO 24266
24255: POP
// bc_type := b_breastwork ; 26 :
24256: LD_ADDR_OWVAR 42
24260: PUSH
24261: LD_INT 31
24263: ST_TO_ADDR
24264: GO 24438
24266: LD_INT 26
24268: DOUBLE
24269: EQUAL
24270: IFTRUE 24274
24272: GO 24285
24274: POP
// bc_type := b_bunker ; 27 :
24275: LD_ADDR_OWVAR 42
24279: PUSH
24280: LD_INT 32
24282: ST_TO_ADDR
24283: GO 24438
24285: LD_INT 27
24287: DOUBLE
24288: EQUAL
24289: IFTRUE 24293
24291: GO 24304
24293: POP
// bc_type := b_turret ; 28 :
24294: LD_ADDR_OWVAR 42
24298: PUSH
24299: LD_INT 33
24301: ST_TO_ADDR
24302: GO 24438
24304: LD_INT 28
24306: DOUBLE
24307: EQUAL
24308: IFTRUE 24312
24310: GO 24323
24312: POP
// bc_type := b_armoury ; 29 :
24313: LD_ADDR_OWVAR 42
24317: PUSH
24318: LD_INT 4
24320: ST_TO_ADDR
24321: GO 24438
24323: LD_INT 29
24325: DOUBLE
24326: EQUAL
24327: IFTRUE 24331
24329: GO 24342
24331: POP
// bc_type := b_barracks ; 30 :
24332: LD_ADDR_OWVAR 42
24336: PUSH
24337: LD_INT 5
24339: ST_TO_ADDR
24340: GO 24438
24342: LD_INT 30
24344: DOUBLE
24345: EQUAL
24346: IFTRUE 24350
24348: GO 24361
24350: POP
// bc_type := b_solar_power ; 31 :
24351: LD_ADDR_OWVAR 42
24355: PUSH
24356: LD_INT 27
24358: ST_TO_ADDR
24359: GO 24438
24361: LD_INT 31
24363: DOUBLE
24364: EQUAL
24365: IFTRUE 24369
24367: GO 24380
24369: POP
// bc_type := b_oil_power ; 32 :
24370: LD_ADDR_OWVAR 42
24374: PUSH
24375: LD_INT 26
24377: ST_TO_ADDR
24378: GO 24438
24380: LD_INT 32
24382: DOUBLE
24383: EQUAL
24384: IFTRUE 24388
24386: GO 24399
24388: POP
// bc_type := b_siberite_power ; 33 :
24389: LD_ADDR_OWVAR 42
24393: PUSH
24394: LD_INT 28
24396: ST_TO_ADDR
24397: GO 24438
24399: LD_INT 33
24401: DOUBLE
24402: EQUAL
24403: IFTRUE 24407
24405: GO 24418
24407: POP
// bc_type := b_oil_mine ; 34 :
24408: LD_ADDR_OWVAR 42
24412: PUSH
24413: LD_INT 29
24415: ST_TO_ADDR
24416: GO 24438
24418: LD_INT 34
24420: DOUBLE
24421: EQUAL
24422: IFTRUE 24426
24424: GO 24437
24426: POP
// bc_type := b_siberite_mine ; end ;
24427: LD_ADDR_OWVAR 42
24431: PUSH
24432: LD_INT 30
24434: ST_TO_ADDR
24435: GO 24438
24437: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
24438: LD_ADDR_VAR 0 8
24442: PUSH
24443: LD_VAR 0 5
24447: PPUSH
24448: LD_VAR 0 6
24452: PPUSH
24453: LD_VAR 0 3
24457: PPUSH
24458: CALL_OW 47
24462: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
24463: LD_OWVAR 42
24467: PUSH
24468: LD_INT 32
24470: PUSH
24471: LD_INT 33
24473: PUSH
24474: EMPTY
24475: LIST
24476: LIST
24477: IN
24478: IFFALSE 24494
// PlaceWeaponTurret ( b , weapon ) ;
24480: LD_VAR 0 8
24484: PPUSH
24485: LD_VAR 0 4
24489: PPUSH
24490: CALL_OW 431
// end ;
24494: LD_VAR 0 7
24498: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
24499: LD_INT 0
24501: PPUSH
24502: PPUSH
24503: PPUSH
24504: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24505: LD_ADDR_VAR 0 4
24509: PUSH
24510: LD_INT 22
24512: PUSH
24513: LD_OWVAR 2
24517: PUSH
24518: EMPTY
24519: LIST
24520: LIST
24521: PUSH
24522: LD_INT 2
24524: PUSH
24525: LD_INT 30
24527: PUSH
24528: LD_INT 0
24530: PUSH
24531: EMPTY
24532: LIST
24533: LIST
24534: PUSH
24535: LD_INT 30
24537: PUSH
24538: LD_INT 1
24540: PUSH
24541: EMPTY
24542: LIST
24543: LIST
24544: PUSH
24545: EMPTY
24546: LIST
24547: LIST
24548: LIST
24549: PUSH
24550: EMPTY
24551: LIST
24552: LIST
24553: PPUSH
24554: CALL_OW 69
24558: ST_TO_ADDR
// if not tmp then
24559: LD_VAR 0 4
24563: NOT
24564: IFFALSE 24568
// exit ;
24566: GO 24627
// for i in tmp do
24568: LD_ADDR_VAR 0 2
24572: PUSH
24573: LD_VAR 0 4
24577: PUSH
24578: FOR_IN
24579: IFFALSE 24625
// for j = 1 to 3 do
24581: LD_ADDR_VAR 0 3
24585: PUSH
24586: DOUBLE
24587: LD_INT 1
24589: DEC
24590: ST_TO_ADDR
24591: LD_INT 3
24593: PUSH
24594: FOR_TO
24595: IFFALSE 24621
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
24597: LD_VAR 0 2
24601: PPUSH
24602: CALL_OW 274
24606: PPUSH
24607: LD_VAR 0 3
24611: PPUSH
24612: LD_INT 99999
24614: PPUSH
24615: CALL_OW 277
24619: GO 24594
24621: POP
24622: POP
24623: GO 24578
24625: POP
24626: POP
// end ;
24627: LD_VAR 0 1
24631: RET
// export function hHackSetLevel10 ; var i , j ; begin
24632: LD_INT 0
24634: PPUSH
24635: PPUSH
24636: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
24637: LD_ADDR_VAR 0 2
24641: PUSH
24642: LD_INT 21
24644: PUSH
24645: LD_INT 1
24647: PUSH
24648: EMPTY
24649: LIST
24650: LIST
24651: PPUSH
24652: CALL_OW 69
24656: PUSH
24657: FOR_IN
24658: IFFALSE 24710
// if IsSelected ( i ) then
24660: LD_VAR 0 2
24664: PPUSH
24665: CALL_OW 306
24669: IFFALSE 24708
// begin for j := 1 to 4 do
24671: LD_ADDR_VAR 0 3
24675: PUSH
24676: DOUBLE
24677: LD_INT 1
24679: DEC
24680: ST_TO_ADDR
24681: LD_INT 4
24683: PUSH
24684: FOR_TO
24685: IFFALSE 24706
// SetSkill ( i , j , 10 ) ;
24687: LD_VAR 0 2
24691: PPUSH
24692: LD_VAR 0 3
24696: PPUSH
24697: LD_INT 10
24699: PPUSH
24700: CALL_OW 237
24704: GO 24684
24706: POP
24707: POP
// end ;
24708: GO 24657
24710: POP
24711: POP
// end ;
24712: LD_VAR 0 1
24716: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
24717: LD_INT 0
24719: PPUSH
24720: PPUSH
24721: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
24722: LD_ADDR_VAR 0 2
24726: PUSH
24727: LD_INT 22
24729: PUSH
24730: LD_OWVAR 2
24734: PUSH
24735: EMPTY
24736: LIST
24737: LIST
24738: PUSH
24739: LD_INT 21
24741: PUSH
24742: LD_INT 1
24744: PUSH
24745: EMPTY
24746: LIST
24747: LIST
24748: PUSH
24749: EMPTY
24750: LIST
24751: LIST
24752: PPUSH
24753: CALL_OW 69
24757: PUSH
24758: FOR_IN
24759: IFFALSE 24800
// begin for j := 1 to 4 do
24761: LD_ADDR_VAR 0 3
24765: PUSH
24766: DOUBLE
24767: LD_INT 1
24769: DEC
24770: ST_TO_ADDR
24771: LD_INT 4
24773: PUSH
24774: FOR_TO
24775: IFFALSE 24796
// SetSkill ( i , j , 10 ) ;
24777: LD_VAR 0 2
24781: PPUSH
24782: LD_VAR 0 3
24786: PPUSH
24787: LD_INT 10
24789: PPUSH
24790: CALL_OW 237
24794: GO 24774
24796: POP
24797: POP
// end ;
24798: GO 24758
24800: POP
24801: POP
// end ;
24802: LD_VAR 0 1
24806: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
24807: LD_INT 0
24809: PPUSH
// uc_side := your_side ;
24810: LD_ADDR_OWVAR 20
24814: PUSH
24815: LD_OWVAR 2
24819: ST_TO_ADDR
// uc_nation := nation ;
24820: LD_ADDR_OWVAR 21
24824: PUSH
24825: LD_VAR 0 1
24829: ST_TO_ADDR
// InitHc ;
24830: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
24834: LD_INT 0
24836: PPUSH
24837: LD_VAR 0 2
24841: PPUSH
24842: LD_VAR 0 3
24846: PPUSH
24847: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
24851: LD_VAR 0 4
24855: PPUSH
24856: LD_VAR 0 5
24860: PPUSH
24861: CALL_OW 428
24865: PUSH
24866: LD_INT 0
24868: EQUAL
24869: IFFALSE 24893
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
24871: CALL_OW 44
24875: PPUSH
24876: LD_VAR 0 4
24880: PPUSH
24881: LD_VAR 0 5
24885: PPUSH
24886: LD_INT 1
24888: PPUSH
24889: CALL_OW 48
// end ;
24893: LD_VAR 0 6
24897: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
24898: LD_INT 0
24900: PPUSH
24901: PPUSH
// uc_side := your_side ;
24902: LD_ADDR_OWVAR 20
24906: PUSH
24907: LD_OWVAR 2
24911: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
24912: LD_VAR 0 1
24916: PUSH
24917: LD_INT 1
24919: PUSH
24920: LD_INT 2
24922: PUSH
24923: LD_INT 3
24925: PUSH
24926: LD_INT 4
24928: PUSH
24929: LD_INT 5
24931: PUSH
24932: EMPTY
24933: LIST
24934: LIST
24935: LIST
24936: LIST
24937: LIST
24938: IN
24939: IFFALSE 24951
// uc_nation := nation_american else
24941: LD_ADDR_OWVAR 21
24945: PUSH
24946: LD_INT 1
24948: ST_TO_ADDR
24949: GO 24994
// if chassis in [ 11 , 12 , 13 , 14 ] then
24951: LD_VAR 0 1
24955: PUSH
24956: LD_INT 11
24958: PUSH
24959: LD_INT 12
24961: PUSH
24962: LD_INT 13
24964: PUSH
24965: LD_INT 14
24967: PUSH
24968: EMPTY
24969: LIST
24970: LIST
24971: LIST
24972: LIST
24973: IN
24974: IFFALSE 24986
// uc_nation := nation_arabian else
24976: LD_ADDR_OWVAR 21
24980: PUSH
24981: LD_INT 2
24983: ST_TO_ADDR
24984: GO 24994
// uc_nation := nation_russian ;
24986: LD_ADDR_OWVAR 21
24990: PUSH
24991: LD_INT 3
24993: ST_TO_ADDR
// vc_chassis := chassis ;
24994: LD_ADDR_OWVAR 37
24998: PUSH
24999: LD_VAR 0 1
25003: ST_TO_ADDR
// vc_engine := engine ;
25004: LD_ADDR_OWVAR 39
25008: PUSH
25009: LD_VAR 0 2
25013: ST_TO_ADDR
// vc_control := control ;
25014: LD_ADDR_OWVAR 38
25018: PUSH
25019: LD_VAR 0 3
25023: ST_TO_ADDR
// vc_weapon := weapon ;
25024: LD_ADDR_OWVAR 40
25028: PUSH
25029: LD_VAR 0 4
25033: ST_TO_ADDR
// un := CreateVehicle ;
25034: LD_ADDR_VAR 0 8
25038: PUSH
25039: CALL_OW 45
25043: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
25044: LD_VAR 0 8
25048: PPUSH
25049: LD_INT 0
25051: PPUSH
25052: LD_INT 5
25054: PPUSH
25055: CALL_OW 12
25059: PPUSH
25060: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
25064: LD_VAR 0 8
25068: PPUSH
25069: LD_VAR 0 5
25073: PPUSH
25074: LD_VAR 0 6
25078: PPUSH
25079: LD_INT 1
25081: PPUSH
25082: CALL_OW 48
// end ;
25086: LD_VAR 0 7
25090: RET
// export hInvincible ; every 1 do
25091: GO 25093
25093: DISABLE
// hInvincible := [ ] ;
25094: LD_ADDR_EXP 83
25098: PUSH
25099: EMPTY
25100: ST_TO_ADDR
25101: END
// every 10 do var i ;
25102: GO 25104
25104: DISABLE
25105: LD_INT 0
25107: PPUSH
// begin enable ;
25108: ENABLE
// if not hInvincible then
25109: LD_EXP 83
25113: NOT
25114: IFFALSE 25118
// exit ;
25116: GO 25162
// for i in hInvincible do
25118: LD_ADDR_VAR 0 1
25122: PUSH
25123: LD_EXP 83
25127: PUSH
25128: FOR_IN
25129: IFFALSE 25160
// if GetLives ( i ) < 1000 then
25131: LD_VAR 0 1
25135: PPUSH
25136: CALL_OW 256
25140: PUSH
25141: LD_INT 1000
25143: LESS
25144: IFFALSE 25158
// SetLives ( i , 1000 ) ;
25146: LD_VAR 0 1
25150: PPUSH
25151: LD_INT 1000
25153: PPUSH
25154: CALL_OW 234
25158: GO 25128
25160: POP
25161: POP
// end ;
25162: PPOPN 1
25164: END
// export function hHackInvincible ; var i ; begin
25165: LD_INT 0
25167: PPUSH
25168: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
25169: LD_ADDR_VAR 0 2
25173: PUSH
25174: LD_INT 2
25176: PUSH
25177: LD_INT 21
25179: PUSH
25180: LD_INT 1
25182: PUSH
25183: EMPTY
25184: LIST
25185: LIST
25186: PUSH
25187: LD_INT 21
25189: PUSH
25190: LD_INT 2
25192: PUSH
25193: EMPTY
25194: LIST
25195: LIST
25196: PUSH
25197: EMPTY
25198: LIST
25199: LIST
25200: LIST
25201: PPUSH
25202: CALL_OW 69
25206: PUSH
25207: FOR_IN
25208: IFFALSE 25269
// if IsSelected ( i ) then
25210: LD_VAR 0 2
25214: PPUSH
25215: CALL_OW 306
25219: IFFALSE 25267
// begin if i in hInvincible then
25221: LD_VAR 0 2
25225: PUSH
25226: LD_EXP 83
25230: IN
25231: IFFALSE 25251
// hInvincible := hInvincible diff i else
25233: LD_ADDR_EXP 83
25237: PUSH
25238: LD_EXP 83
25242: PUSH
25243: LD_VAR 0 2
25247: DIFF
25248: ST_TO_ADDR
25249: GO 25267
// hInvincible := hInvincible union i ;
25251: LD_ADDR_EXP 83
25255: PUSH
25256: LD_EXP 83
25260: PUSH
25261: LD_VAR 0 2
25265: UNION
25266: ST_TO_ADDR
// end ;
25267: GO 25207
25269: POP
25270: POP
// end ;
25271: LD_VAR 0 1
25275: RET
// export function hHackInvisible ; var i , j ; begin
25276: LD_INT 0
25278: PPUSH
25279: PPUSH
25280: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
25281: LD_ADDR_VAR 0 2
25285: PUSH
25286: LD_INT 21
25288: PUSH
25289: LD_INT 1
25291: PUSH
25292: EMPTY
25293: LIST
25294: LIST
25295: PPUSH
25296: CALL_OW 69
25300: PUSH
25301: FOR_IN
25302: IFFALSE 25326
// if IsSelected ( i ) then
25304: LD_VAR 0 2
25308: PPUSH
25309: CALL_OW 306
25313: IFFALSE 25324
// ComForceInvisible ( i ) ;
25315: LD_VAR 0 2
25319: PPUSH
25320: CALL_OW 496
25324: GO 25301
25326: POP
25327: POP
// end ;
25328: LD_VAR 0 1
25332: RET
// export function hHackChangeYourSide ; begin
25333: LD_INT 0
25335: PPUSH
// if your_side = 8 then
25336: LD_OWVAR 2
25340: PUSH
25341: LD_INT 8
25343: EQUAL
25344: IFFALSE 25356
// your_side := 0 else
25346: LD_ADDR_OWVAR 2
25350: PUSH
25351: LD_INT 0
25353: ST_TO_ADDR
25354: GO 25370
// your_side := your_side + 1 ;
25356: LD_ADDR_OWVAR 2
25360: PUSH
25361: LD_OWVAR 2
25365: PUSH
25366: LD_INT 1
25368: PLUS
25369: ST_TO_ADDR
// end ;
25370: LD_VAR 0 1
25374: RET
// export function hHackChangeUnitSide ; var i , j ; begin
25375: LD_INT 0
25377: PPUSH
25378: PPUSH
25379: PPUSH
// for i in all_units do
25380: LD_ADDR_VAR 0 2
25384: PUSH
25385: LD_OWVAR 3
25389: PUSH
25390: FOR_IN
25391: IFFALSE 25469
// if IsSelected ( i ) then
25393: LD_VAR 0 2
25397: PPUSH
25398: CALL_OW 306
25402: IFFALSE 25467
// begin j := GetSide ( i ) ;
25404: LD_ADDR_VAR 0 3
25408: PUSH
25409: LD_VAR 0 2
25413: PPUSH
25414: CALL_OW 255
25418: ST_TO_ADDR
// if j = 8 then
25419: LD_VAR 0 3
25423: PUSH
25424: LD_INT 8
25426: EQUAL
25427: IFFALSE 25439
// j := 0 else
25429: LD_ADDR_VAR 0 3
25433: PUSH
25434: LD_INT 0
25436: ST_TO_ADDR
25437: GO 25453
// j := j + 1 ;
25439: LD_ADDR_VAR 0 3
25443: PUSH
25444: LD_VAR 0 3
25448: PUSH
25449: LD_INT 1
25451: PLUS
25452: ST_TO_ADDR
// SetSide ( i , j ) ;
25453: LD_VAR 0 2
25457: PPUSH
25458: LD_VAR 0 3
25462: PPUSH
25463: CALL_OW 235
// end ;
25467: GO 25390
25469: POP
25470: POP
// end ;
25471: LD_VAR 0 1
25475: RET
// export function hHackFog ; begin
25476: LD_INT 0
25478: PPUSH
// FogOff ( true ) ;
25479: LD_INT 1
25481: PPUSH
25482: CALL_OW 344
// end ;
25486: LD_VAR 0 1
25490: RET
// export function hHackTeleport ( unit , x , y ) ; begin
25491: LD_INT 0
25493: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
25494: LD_VAR 0 1
25498: PPUSH
25499: LD_VAR 0 2
25503: PPUSH
25504: LD_VAR 0 3
25508: PPUSH
25509: LD_INT 1
25511: PPUSH
25512: LD_INT 1
25514: PPUSH
25515: CALL_OW 483
// CenterOnXY ( x , y ) ;
25519: LD_VAR 0 2
25523: PPUSH
25524: LD_VAR 0 3
25528: PPUSH
25529: CALL_OW 84
// end ;
25533: LD_VAR 0 4
25537: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
25538: LD_INT 0
25540: PPUSH
25541: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
25542: LD_VAR 0 1
25546: NOT
25547: PUSH
25548: LD_VAR 0 2
25552: PPUSH
25553: LD_VAR 0 3
25557: PPUSH
25558: CALL_OW 488
25562: NOT
25563: OR
25564: PUSH
25565: LD_VAR 0 1
25569: PPUSH
25570: CALL_OW 266
25574: PUSH
25575: LD_INT 3
25577: NONEQUAL
25578: PUSH
25579: LD_VAR 0 1
25583: PPUSH
25584: CALL_OW 247
25588: PUSH
25589: LD_INT 1
25591: EQUAL
25592: NOT
25593: AND
25594: OR
25595: IFFALSE 25599
// exit ;
25597: GO 25748
// if GetType ( factory ) = unit_human then
25599: LD_VAR 0 1
25603: PPUSH
25604: CALL_OW 247
25608: PUSH
25609: LD_INT 1
25611: EQUAL
25612: IFFALSE 25629
// factory := IsInUnit ( factory ) ;
25614: LD_ADDR_VAR 0 1
25618: PUSH
25619: LD_VAR 0 1
25623: PPUSH
25624: CALL_OW 310
25628: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
25629: LD_VAR 0 1
25633: PPUSH
25634: CALL_OW 266
25638: PUSH
25639: LD_INT 3
25641: NONEQUAL
25642: IFFALSE 25646
// exit ;
25644: GO 25748
// if HexInfo ( x , y ) = factory then
25646: LD_VAR 0 2
25650: PPUSH
25651: LD_VAR 0 3
25655: PPUSH
25656: CALL_OW 428
25660: PUSH
25661: LD_VAR 0 1
25665: EQUAL
25666: IFFALSE 25693
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
25668: LD_ADDR_EXP 84
25672: PUSH
25673: LD_EXP 84
25677: PPUSH
25678: LD_VAR 0 1
25682: PPUSH
25683: LD_INT 0
25685: PPUSH
25686: CALL_OW 1
25690: ST_TO_ADDR
25691: GO 25744
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
25693: LD_ADDR_EXP 84
25697: PUSH
25698: LD_EXP 84
25702: PPUSH
25703: LD_VAR 0 1
25707: PPUSH
25708: LD_VAR 0 1
25712: PPUSH
25713: CALL_OW 255
25717: PUSH
25718: LD_VAR 0 1
25722: PUSH
25723: LD_VAR 0 2
25727: PUSH
25728: LD_VAR 0 3
25732: PUSH
25733: EMPTY
25734: LIST
25735: LIST
25736: LIST
25737: LIST
25738: PPUSH
25739: CALL_OW 1
25743: ST_TO_ADDR
// UpdateFactoryWaypoints ;
25744: CALL 25753 0 0
// end ;
25748: LD_VAR 0 4
25752: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
25753: LD_INT 0
25755: PPUSH
25756: PPUSH
25757: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
25758: LD_STRING resetFactoryWaypoint();
25760: PPUSH
25761: CALL_OW 559
// if factoryWaypoints then
25765: LD_EXP 84
25769: IFFALSE 25895
// begin list := PrepareArray ( factoryWaypoints ) ;
25771: LD_ADDR_VAR 0 3
25775: PUSH
25776: LD_EXP 84
25780: PPUSH
25781: CALL 72345 0 1
25785: ST_TO_ADDR
// for i := 1 to list do
25786: LD_ADDR_VAR 0 2
25790: PUSH
25791: DOUBLE
25792: LD_INT 1
25794: DEC
25795: ST_TO_ADDR
25796: LD_VAR 0 3
25800: PUSH
25801: FOR_TO
25802: IFFALSE 25893
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
25804: LD_STRING setFactoryWaypointXY(
25806: PUSH
25807: LD_VAR 0 3
25811: PUSH
25812: LD_VAR 0 2
25816: ARRAY
25817: PUSH
25818: LD_INT 1
25820: ARRAY
25821: STR
25822: PUSH
25823: LD_STRING ,
25825: STR
25826: PUSH
25827: LD_VAR 0 3
25831: PUSH
25832: LD_VAR 0 2
25836: ARRAY
25837: PUSH
25838: LD_INT 2
25840: ARRAY
25841: STR
25842: PUSH
25843: LD_STRING ,
25845: STR
25846: PUSH
25847: LD_VAR 0 3
25851: PUSH
25852: LD_VAR 0 2
25856: ARRAY
25857: PUSH
25858: LD_INT 3
25860: ARRAY
25861: STR
25862: PUSH
25863: LD_STRING ,
25865: STR
25866: PUSH
25867: LD_VAR 0 3
25871: PUSH
25872: LD_VAR 0 2
25876: ARRAY
25877: PUSH
25878: LD_INT 4
25880: ARRAY
25881: STR
25882: PUSH
25883: LD_STRING )
25885: STR
25886: PPUSH
25887: CALL_OW 559
25891: GO 25801
25893: POP
25894: POP
// end ; end ;
25895: LD_VAR 0 1
25899: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
25900: LD_INT 0
25902: PPUSH
// if HexInfo ( x , y ) = warehouse then
25903: LD_VAR 0 2
25907: PPUSH
25908: LD_VAR 0 3
25912: PPUSH
25913: CALL_OW 428
25917: PUSH
25918: LD_VAR 0 1
25922: EQUAL
25923: IFFALSE 25950
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
25925: LD_ADDR_EXP 85
25929: PUSH
25930: LD_EXP 85
25934: PPUSH
25935: LD_VAR 0 1
25939: PPUSH
25940: LD_INT 0
25942: PPUSH
25943: CALL_OW 1
25947: ST_TO_ADDR
25948: GO 26001
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
25950: LD_ADDR_EXP 85
25954: PUSH
25955: LD_EXP 85
25959: PPUSH
25960: LD_VAR 0 1
25964: PPUSH
25965: LD_VAR 0 1
25969: PPUSH
25970: CALL_OW 255
25974: PUSH
25975: LD_VAR 0 1
25979: PUSH
25980: LD_VAR 0 2
25984: PUSH
25985: LD_VAR 0 3
25989: PUSH
25990: EMPTY
25991: LIST
25992: LIST
25993: LIST
25994: LIST
25995: PPUSH
25996: CALL_OW 1
26000: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
26001: CALL 26010 0 0
// end ;
26005: LD_VAR 0 4
26009: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
26010: LD_INT 0
26012: PPUSH
26013: PPUSH
26014: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
26015: LD_STRING resetWarehouseGatheringPoints();
26017: PPUSH
26018: CALL_OW 559
// if warehouseGatheringPoints then
26022: LD_EXP 85
26026: IFFALSE 26152
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
26028: LD_ADDR_VAR 0 3
26032: PUSH
26033: LD_EXP 85
26037: PPUSH
26038: CALL 72345 0 1
26042: ST_TO_ADDR
// for i := 1 to list do
26043: LD_ADDR_VAR 0 2
26047: PUSH
26048: DOUBLE
26049: LD_INT 1
26051: DEC
26052: ST_TO_ADDR
26053: LD_VAR 0 3
26057: PUSH
26058: FOR_TO
26059: IFFALSE 26150
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
26061: LD_STRING setWarehouseGatheringPointXY(
26063: PUSH
26064: LD_VAR 0 3
26068: PUSH
26069: LD_VAR 0 2
26073: ARRAY
26074: PUSH
26075: LD_INT 1
26077: ARRAY
26078: STR
26079: PUSH
26080: LD_STRING ,
26082: STR
26083: PUSH
26084: LD_VAR 0 3
26088: PUSH
26089: LD_VAR 0 2
26093: ARRAY
26094: PUSH
26095: LD_INT 2
26097: ARRAY
26098: STR
26099: PUSH
26100: LD_STRING ,
26102: STR
26103: PUSH
26104: LD_VAR 0 3
26108: PUSH
26109: LD_VAR 0 2
26113: ARRAY
26114: PUSH
26115: LD_INT 3
26117: ARRAY
26118: STR
26119: PUSH
26120: LD_STRING ,
26122: STR
26123: PUSH
26124: LD_VAR 0 3
26128: PUSH
26129: LD_VAR 0 2
26133: ARRAY
26134: PUSH
26135: LD_INT 4
26137: ARRAY
26138: STR
26139: PUSH
26140: LD_STRING )
26142: STR
26143: PPUSH
26144: CALL_OW 559
26148: GO 26058
26150: POP
26151: POP
// end ; end ;
26152: LD_VAR 0 1
26156: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
26157: LD_EXP 85
26161: IFFALSE 26846
26163: GO 26165
26165: DISABLE
26166: LD_INT 0
26168: PPUSH
26169: PPUSH
26170: PPUSH
26171: PPUSH
26172: PPUSH
26173: PPUSH
26174: PPUSH
26175: PPUSH
26176: PPUSH
// begin enable ;
26177: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
26178: LD_ADDR_VAR 0 3
26182: PUSH
26183: LD_EXP 85
26187: PPUSH
26188: CALL 72345 0 1
26192: ST_TO_ADDR
// if not list then
26193: LD_VAR 0 3
26197: NOT
26198: IFFALSE 26202
// exit ;
26200: GO 26846
// for i := 1 to list do
26202: LD_ADDR_VAR 0 1
26206: PUSH
26207: DOUBLE
26208: LD_INT 1
26210: DEC
26211: ST_TO_ADDR
26212: LD_VAR 0 3
26216: PUSH
26217: FOR_TO
26218: IFFALSE 26844
// begin depot := list [ i ] [ 2 ] ;
26220: LD_ADDR_VAR 0 8
26224: PUSH
26225: LD_VAR 0 3
26229: PUSH
26230: LD_VAR 0 1
26234: ARRAY
26235: PUSH
26236: LD_INT 2
26238: ARRAY
26239: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
26240: LD_ADDR_VAR 0 5
26244: PUSH
26245: LD_VAR 0 3
26249: PUSH
26250: LD_VAR 0 1
26254: ARRAY
26255: PUSH
26256: LD_INT 1
26258: ARRAY
26259: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
26260: LD_VAR 0 8
26264: PPUSH
26265: CALL_OW 301
26269: PUSH
26270: LD_VAR 0 5
26274: PUSH
26275: LD_VAR 0 8
26279: PPUSH
26280: CALL_OW 255
26284: NONEQUAL
26285: OR
26286: IFFALSE 26315
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
26288: LD_ADDR_EXP 85
26292: PUSH
26293: LD_EXP 85
26297: PPUSH
26298: LD_VAR 0 8
26302: PPUSH
26303: LD_INT 0
26305: PPUSH
26306: CALL_OW 1
26310: ST_TO_ADDR
// exit ;
26311: POP
26312: POP
26313: GO 26846
// end ; x := list [ i ] [ 3 ] ;
26315: LD_ADDR_VAR 0 6
26319: PUSH
26320: LD_VAR 0 3
26324: PUSH
26325: LD_VAR 0 1
26329: ARRAY
26330: PUSH
26331: LD_INT 3
26333: ARRAY
26334: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
26335: LD_ADDR_VAR 0 7
26339: PUSH
26340: LD_VAR 0 3
26344: PUSH
26345: LD_VAR 0 1
26349: ARRAY
26350: PUSH
26351: LD_INT 4
26353: ARRAY
26354: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
26355: LD_ADDR_VAR 0 9
26359: PUSH
26360: LD_VAR 0 6
26364: PPUSH
26365: LD_VAR 0 7
26369: PPUSH
26370: LD_INT 16
26372: PPUSH
26373: CALL 70933 0 3
26377: ST_TO_ADDR
// if not cratesNearbyPoint then
26378: LD_VAR 0 9
26382: NOT
26383: IFFALSE 26389
// exit ;
26385: POP
26386: POP
26387: GO 26846
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
26389: LD_ADDR_VAR 0 4
26393: PUSH
26394: LD_INT 22
26396: PUSH
26397: LD_VAR 0 5
26401: PUSH
26402: EMPTY
26403: LIST
26404: LIST
26405: PUSH
26406: LD_INT 3
26408: PUSH
26409: LD_INT 60
26411: PUSH
26412: EMPTY
26413: LIST
26414: PUSH
26415: EMPTY
26416: LIST
26417: LIST
26418: PUSH
26419: LD_INT 91
26421: PUSH
26422: LD_VAR 0 8
26426: PUSH
26427: LD_INT 6
26429: PUSH
26430: EMPTY
26431: LIST
26432: LIST
26433: LIST
26434: PUSH
26435: LD_INT 2
26437: PUSH
26438: LD_INT 25
26440: PUSH
26441: LD_INT 2
26443: PUSH
26444: EMPTY
26445: LIST
26446: LIST
26447: PUSH
26448: LD_INT 25
26450: PUSH
26451: LD_INT 16
26453: PUSH
26454: EMPTY
26455: LIST
26456: LIST
26457: PUSH
26458: EMPTY
26459: LIST
26460: LIST
26461: LIST
26462: PUSH
26463: EMPTY
26464: LIST
26465: LIST
26466: LIST
26467: LIST
26468: PPUSH
26469: CALL_OW 69
26473: PUSH
26474: LD_VAR 0 8
26478: PPUSH
26479: CALL_OW 313
26483: PPUSH
26484: LD_INT 3
26486: PUSH
26487: LD_INT 60
26489: PUSH
26490: EMPTY
26491: LIST
26492: PUSH
26493: EMPTY
26494: LIST
26495: LIST
26496: PUSH
26497: LD_INT 2
26499: PUSH
26500: LD_INT 25
26502: PUSH
26503: LD_INT 2
26505: PUSH
26506: EMPTY
26507: LIST
26508: LIST
26509: PUSH
26510: LD_INT 25
26512: PUSH
26513: LD_INT 16
26515: PUSH
26516: EMPTY
26517: LIST
26518: LIST
26519: PUSH
26520: EMPTY
26521: LIST
26522: LIST
26523: LIST
26524: PUSH
26525: EMPTY
26526: LIST
26527: LIST
26528: PPUSH
26529: CALL_OW 72
26533: UNION
26534: ST_TO_ADDR
// if tmp then
26535: LD_VAR 0 4
26539: IFFALSE 26619
// begin tmp := ShrinkArray ( tmp , 3 ) ;
26541: LD_ADDR_VAR 0 4
26545: PUSH
26546: LD_VAR 0 4
26550: PPUSH
26551: LD_INT 3
26553: PPUSH
26554: CALL 68902 0 2
26558: ST_TO_ADDR
// for j in tmp do
26559: LD_ADDR_VAR 0 2
26563: PUSH
26564: LD_VAR 0 4
26568: PUSH
26569: FOR_IN
26570: IFFALSE 26613
// begin if IsInUnit ( j ) then
26572: LD_VAR 0 2
26576: PPUSH
26577: CALL_OW 310
26581: IFFALSE 26592
// ComExit ( j ) ;
26583: LD_VAR 0 2
26587: PPUSH
26588: CALL 68985 0 1
// AddComCollect ( j , x , y ) ;
26592: LD_VAR 0 2
26596: PPUSH
26597: LD_VAR 0 6
26601: PPUSH
26602: LD_VAR 0 7
26606: PPUSH
26607: CALL_OW 177
// end ;
26611: GO 26569
26613: POP
26614: POP
// exit ;
26615: POP
26616: POP
26617: GO 26846
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
26619: LD_ADDR_VAR 0 4
26623: PUSH
26624: LD_INT 22
26626: PUSH
26627: LD_VAR 0 5
26631: PUSH
26632: EMPTY
26633: LIST
26634: LIST
26635: PUSH
26636: LD_INT 91
26638: PUSH
26639: LD_VAR 0 8
26643: PUSH
26644: LD_INT 8
26646: PUSH
26647: EMPTY
26648: LIST
26649: LIST
26650: LIST
26651: PUSH
26652: LD_INT 2
26654: PUSH
26655: LD_INT 34
26657: PUSH
26658: LD_INT 12
26660: PUSH
26661: EMPTY
26662: LIST
26663: LIST
26664: PUSH
26665: LD_INT 34
26667: PUSH
26668: LD_INT 51
26670: PUSH
26671: EMPTY
26672: LIST
26673: LIST
26674: PUSH
26675: LD_INT 34
26677: PUSH
26678: LD_INT 32
26680: PUSH
26681: EMPTY
26682: LIST
26683: LIST
26684: PUSH
26685: LD_INT 34
26687: PUSH
26688: LD_INT 89
26690: PUSH
26691: EMPTY
26692: LIST
26693: LIST
26694: PUSH
26695: EMPTY
26696: LIST
26697: LIST
26698: LIST
26699: LIST
26700: LIST
26701: PUSH
26702: EMPTY
26703: LIST
26704: LIST
26705: LIST
26706: PPUSH
26707: CALL_OW 69
26711: ST_TO_ADDR
// if tmp then
26712: LD_VAR 0 4
26716: IFFALSE 26842
// begin for j in tmp do
26718: LD_ADDR_VAR 0 2
26722: PUSH
26723: LD_VAR 0 4
26727: PUSH
26728: FOR_IN
26729: IFFALSE 26840
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
26731: LD_VAR 0 2
26735: PPUSH
26736: CALL_OW 262
26740: PUSH
26741: LD_INT 3
26743: EQUAL
26744: PUSH
26745: LD_VAR 0 2
26749: PPUSH
26750: CALL_OW 261
26754: PUSH
26755: LD_INT 20
26757: GREATER
26758: OR
26759: PUSH
26760: LD_VAR 0 2
26764: PPUSH
26765: CALL_OW 314
26769: NOT
26770: AND
26771: PUSH
26772: LD_VAR 0 2
26776: PPUSH
26777: CALL_OW 263
26781: PUSH
26782: LD_INT 1
26784: NONEQUAL
26785: PUSH
26786: LD_VAR 0 2
26790: PPUSH
26791: CALL_OW 311
26795: OR
26796: AND
26797: IFFALSE 26838
// begin ComCollect ( j , x , y ) ;
26799: LD_VAR 0 2
26803: PPUSH
26804: LD_VAR 0 6
26808: PPUSH
26809: LD_VAR 0 7
26813: PPUSH
26814: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
26818: LD_VAR 0 2
26822: PPUSH
26823: LD_VAR 0 8
26827: PPUSH
26828: CALL_OW 172
// exit ;
26832: POP
26833: POP
26834: POP
26835: POP
26836: GO 26846
// end ;
26838: GO 26728
26840: POP
26841: POP
// end ; end ;
26842: GO 26217
26844: POP
26845: POP
// end ; end_of_file
26846: PPOPN 9
26848: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
26849: LD_INT 0
26851: PPUSH
26852: PPUSH
26853: PPUSH
26854: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
26855: LD_VAR 0 1
26859: PPUSH
26860: CALL_OW 264
26864: PUSH
26865: LD_INT 91
26867: EQUAL
26868: IFFALSE 26940
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
26870: LD_INT 68
26872: PPUSH
26873: LD_VAR 0 1
26877: PPUSH
26878: CALL_OW 255
26882: PPUSH
26883: CALL_OW 321
26887: PUSH
26888: LD_INT 2
26890: EQUAL
26891: IFFALSE 26903
// eff := 70 else
26893: LD_ADDR_VAR 0 4
26897: PUSH
26898: LD_INT 70
26900: ST_TO_ADDR
26901: GO 26911
// eff := 30 ;
26903: LD_ADDR_VAR 0 4
26907: PUSH
26908: LD_INT 30
26910: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
26911: LD_VAR 0 1
26915: PPUSH
26916: CALL_OW 250
26920: PPUSH
26921: LD_VAR 0 1
26925: PPUSH
26926: CALL_OW 251
26930: PPUSH
26931: LD_VAR 0 4
26935: PPUSH
26936: CALL_OW 495
// end ; end ;
26940: LD_VAR 0 2
26944: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
26945: LD_INT 0
26947: PPUSH
// end ;
26948: LD_VAR 0 4
26952: RET
// export function SOS_Command ( cmd ) ; begin
26953: LD_INT 0
26955: PPUSH
// end ;
26956: LD_VAR 0 2
26960: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
26961: LD_INT 0
26963: PPUSH
// end ;
26964: LD_VAR 0 6
26968: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
26969: LD_INT 0
26971: PPUSH
26972: PPUSH
// if not vehicle or not factory then
26973: LD_VAR 0 1
26977: NOT
26978: PUSH
26979: LD_VAR 0 2
26983: NOT
26984: OR
26985: IFFALSE 26989
// exit ;
26987: GO 27220
// if factoryWaypoints >= factory then
26989: LD_EXP 84
26993: PUSH
26994: LD_VAR 0 2
26998: GREATEREQUAL
26999: IFFALSE 27220
// if factoryWaypoints [ factory ] then
27001: LD_EXP 84
27005: PUSH
27006: LD_VAR 0 2
27010: ARRAY
27011: IFFALSE 27220
// begin if GetControl ( vehicle ) = control_manual then
27013: LD_VAR 0 1
27017: PPUSH
27018: CALL_OW 263
27022: PUSH
27023: LD_INT 1
27025: EQUAL
27026: IFFALSE 27107
// begin driver := IsDrivenBy ( vehicle ) ;
27028: LD_ADDR_VAR 0 4
27032: PUSH
27033: LD_VAR 0 1
27037: PPUSH
27038: CALL_OW 311
27042: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
27043: LD_VAR 0 4
27047: PPUSH
27048: LD_EXP 84
27052: PUSH
27053: LD_VAR 0 2
27057: ARRAY
27058: PUSH
27059: LD_INT 3
27061: ARRAY
27062: PPUSH
27063: LD_EXP 84
27067: PUSH
27068: LD_VAR 0 2
27072: ARRAY
27073: PUSH
27074: LD_INT 4
27076: ARRAY
27077: PPUSH
27078: CALL_OW 171
// AddComExitVehicle ( driver ) ;
27082: LD_VAR 0 4
27086: PPUSH
27087: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
27091: LD_VAR 0 4
27095: PPUSH
27096: LD_VAR 0 2
27100: PPUSH
27101: CALL_OW 180
// end else
27105: GO 27220
// if GetControl ( vehicle ) = control_remote then
27107: LD_VAR 0 1
27111: PPUSH
27112: CALL_OW 263
27116: PUSH
27117: LD_INT 2
27119: EQUAL
27120: IFFALSE 27181
// begin wait ( 0 0$2 ) ;
27122: LD_INT 70
27124: PPUSH
27125: CALL_OW 67
// if Connect ( vehicle ) then
27129: LD_VAR 0 1
27133: PPUSH
27134: CALL 39244 0 1
27138: IFFALSE 27179
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
27140: LD_VAR 0 1
27144: PPUSH
27145: LD_EXP 84
27149: PUSH
27150: LD_VAR 0 2
27154: ARRAY
27155: PUSH
27156: LD_INT 3
27158: ARRAY
27159: PPUSH
27160: LD_EXP 84
27164: PUSH
27165: LD_VAR 0 2
27169: ARRAY
27170: PUSH
27171: LD_INT 4
27173: ARRAY
27174: PPUSH
27175: CALL_OW 171
// end else
27179: GO 27220
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
27181: LD_VAR 0 1
27185: PPUSH
27186: LD_EXP 84
27190: PUSH
27191: LD_VAR 0 2
27195: ARRAY
27196: PUSH
27197: LD_INT 3
27199: ARRAY
27200: PPUSH
27201: LD_EXP 84
27205: PUSH
27206: LD_VAR 0 2
27210: ARRAY
27211: PUSH
27212: LD_INT 4
27214: ARRAY
27215: PPUSH
27216: CALL_OW 171
// end ; end ;
27220: LD_VAR 0 3
27224: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
27225: LD_INT 0
27227: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
27228: LD_VAR 0 1
27232: PUSH
27233: LD_INT 250
27235: EQUAL
27236: PUSH
27237: LD_VAR 0 2
27241: PPUSH
27242: CALL_OW 264
27246: PUSH
27247: LD_INT 81
27249: EQUAL
27250: AND
27251: IFFALSE 27272
// MinerPlaceMine ( unit , x , y ) ;
27253: LD_VAR 0 2
27257: PPUSH
27258: LD_VAR 0 4
27262: PPUSH
27263: LD_VAR 0 5
27267: PPUSH
27268: CALL 29657 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
27272: LD_VAR 0 1
27276: PUSH
27277: LD_INT 251
27279: EQUAL
27280: PUSH
27281: LD_VAR 0 2
27285: PPUSH
27286: CALL_OW 264
27290: PUSH
27291: LD_INT 81
27293: EQUAL
27294: AND
27295: IFFALSE 27316
// MinerDetonateMine ( unit , x , y ) ;
27297: LD_VAR 0 2
27301: PPUSH
27302: LD_VAR 0 4
27306: PPUSH
27307: LD_VAR 0 5
27311: PPUSH
27312: CALL 29932 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
27316: LD_VAR 0 1
27320: PUSH
27321: LD_INT 252
27323: EQUAL
27324: PUSH
27325: LD_VAR 0 2
27329: PPUSH
27330: CALL_OW 264
27334: PUSH
27335: LD_INT 81
27337: EQUAL
27338: AND
27339: IFFALSE 27360
// MinerCreateMinefield ( unit , x , y ) ;
27341: LD_VAR 0 2
27345: PPUSH
27346: LD_VAR 0 4
27350: PPUSH
27351: LD_VAR 0 5
27355: PPUSH
27356: CALL 30349 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
27360: LD_VAR 0 1
27364: PUSH
27365: LD_INT 253
27367: EQUAL
27368: PUSH
27369: LD_VAR 0 2
27373: PPUSH
27374: CALL_OW 257
27378: PUSH
27379: LD_INT 5
27381: EQUAL
27382: AND
27383: IFFALSE 27404
// ComBinocular ( unit , x , y ) ;
27385: LD_VAR 0 2
27389: PPUSH
27390: LD_VAR 0 4
27394: PPUSH
27395: LD_VAR 0 5
27399: PPUSH
27400: CALL 30718 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
27404: LD_VAR 0 1
27408: PUSH
27409: LD_INT 254
27411: EQUAL
27412: PUSH
27413: LD_VAR 0 2
27417: PPUSH
27418: CALL_OW 264
27422: PUSH
27423: LD_INT 99
27425: EQUAL
27426: AND
27427: PUSH
27428: LD_VAR 0 3
27432: PPUSH
27433: CALL_OW 263
27437: PUSH
27438: LD_INT 3
27440: EQUAL
27441: AND
27442: IFFALSE 27458
// HackDestroyVehicle ( unit , selectedUnit ) ;
27444: LD_VAR 0 2
27448: PPUSH
27449: LD_VAR 0 3
27453: PPUSH
27454: CALL 29021 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
27458: LD_VAR 0 1
27462: PUSH
27463: LD_INT 255
27465: EQUAL
27466: PUSH
27467: LD_VAR 0 2
27471: PPUSH
27472: CALL_OW 264
27476: PUSH
27477: LD_INT 14
27479: PUSH
27480: LD_INT 53
27482: PUSH
27483: EMPTY
27484: LIST
27485: LIST
27486: IN
27487: AND
27488: PUSH
27489: LD_VAR 0 4
27493: PPUSH
27494: LD_VAR 0 5
27498: PPUSH
27499: CALL_OW 488
27503: AND
27504: IFFALSE 27528
// CutTreeXYR ( unit , x , y , 12 ) ;
27506: LD_VAR 0 2
27510: PPUSH
27511: LD_VAR 0 4
27515: PPUSH
27516: LD_VAR 0 5
27520: PPUSH
27521: LD_INT 12
27523: PPUSH
27524: CALL 27591 0 4
// if cmd = 256 then
27528: LD_VAR 0 1
27532: PUSH
27533: LD_INT 256
27535: EQUAL
27536: IFFALSE 27557
// SetFactoryWaypoint ( unit , x , y ) ;
27538: LD_VAR 0 2
27542: PPUSH
27543: LD_VAR 0 4
27547: PPUSH
27548: LD_VAR 0 5
27552: PPUSH
27553: CALL 25538 0 3
// if cmd = 257 then
27557: LD_VAR 0 1
27561: PUSH
27562: LD_INT 257
27564: EQUAL
27565: IFFALSE 27586
// SetWarehouseGatheringPoint ( unit , x , y ) ;
27567: LD_VAR 0 2
27571: PPUSH
27572: LD_VAR 0 4
27576: PPUSH
27577: LD_VAR 0 5
27581: PPUSH
27582: CALL 25900 0 3
// end ;
27586: LD_VAR 0 6
27590: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
27591: LD_INT 0
27593: PPUSH
27594: PPUSH
27595: PPUSH
27596: PPUSH
27597: PPUSH
27598: PPUSH
27599: PPUSH
27600: PPUSH
27601: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
27602: LD_VAR 0 1
27606: NOT
27607: PUSH
27608: LD_VAR 0 2
27612: PPUSH
27613: LD_VAR 0 3
27617: PPUSH
27618: CALL_OW 488
27622: NOT
27623: OR
27624: PUSH
27625: LD_VAR 0 4
27629: NOT
27630: OR
27631: IFFALSE 27635
// exit ;
27633: GO 27975
// list := [ ] ;
27635: LD_ADDR_VAR 0 13
27639: PUSH
27640: EMPTY
27641: ST_TO_ADDR
// if x - r < 0 then
27642: LD_VAR 0 2
27646: PUSH
27647: LD_VAR 0 4
27651: MINUS
27652: PUSH
27653: LD_INT 0
27655: LESS
27656: IFFALSE 27668
// min_x := 0 else
27658: LD_ADDR_VAR 0 7
27662: PUSH
27663: LD_INT 0
27665: ST_TO_ADDR
27666: GO 27684
// min_x := x - r ;
27668: LD_ADDR_VAR 0 7
27672: PUSH
27673: LD_VAR 0 2
27677: PUSH
27678: LD_VAR 0 4
27682: MINUS
27683: ST_TO_ADDR
// if y - r < 0 then
27684: LD_VAR 0 3
27688: PUSH
27689: LD_VAR 0 4
27693: MINUS
27694: PUSH
27695: LD_INT 0
27697: LESS
27698: IFFALSE 27710
// min_y := 0 else
27700: LD_ADDR_VAR 0 8
27704: PUSH
27705: LD_INT 0
27707: ST_TO_ADDR
27708: GO 27726
// min_y := y - r ;
27710: LD_ADDR_VAR 0 8
27714: PUSH
27715: LD_VAR 0 3
27719: PUSH
27720: LD_VAR 0 4
27724: MINUS
27725: ST_TO_ADDR
// max_x := x + r ;
27726: LD_ADDR_VAR 0 9
27730: PUSH
27731: LD_VAR 0 2
27735: PUSH
27736: LD_VAR 0 4
27740: PLUS
27741: ST_TO_ADDR
// max_y := y + r ;
27742: LD_ADDR_VAR 0 10
27746: PUSH
27747: LD_VAR 0 3
27751: PUSH
27752: LD_VAR 0 4
27756: PLUS
27757: ST_TO_ADDR
// for _x = min_x to max_x do
27758: LD_ADDR_VAR 0 11
27762: PUSH
27763: DOUBLE
27764: LD_VAR 0 7
27768: DEC
27769: ST_TO_ADDR
27770: LD_VAR 0 9
27774: PUSH
27775: FOR_TO
27776: IFFALSE 27893
// for _y = min_y to max_y do
27778: LD_ADDR_VAR 0 12
27782: PUSH
27783: DOUBLE
27784: LD_VAR 0 8
27788: DEC
27789: ST_TO_ADDR
27790: LD_VAR 0 10
27794: PUSH
27795: FOR_TO
27796: IFFALSE 27889
// begin if not ValidHex ( _x , _y ) then
27798: LD_VAR 0 11
27802: PPUSH
27803: LD_VAR 0 12
27807: PPUSH
27808: CALL_OW 488
27812: NOT
27813: IFFALSE 27817
// continue ;
27815: GO 27795
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
27817: LD_VAR 0 11
27821: PPUSH
27822: LD_VAR 0 12
27826: PPUSH
27827: CALL_OW 351
27831: PUSH
27832: LD_VAR 0 11
27836: PPUSH
27837: LD_VAR 0 12
27841: PPUSH
27842: CALL_OW 554
27846: AND
27847: IFFALSE 27887
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
27849: LD_ADDR_VAR 0 13
27853: PUSH
27854: LD_VAR 0 13
27858: PPUSH
27859: LD_VAR 0 13
27863: PUSH
27864: LD_INT 1
27866: PLUS
27867: PPUSH
27868: LD_VAR 0 11
27872: PUSH
27873: LD_VAR 0 12
27877: PUSH
27878: EMPTY
27879: LIST
27880: LIST
27881: PPUSH
27882: CALL_OW 2
27886: ST_TO_ADDR
// end ;
27887: GO 27795
27889: POP
27890: POP
27891: GO 27775
27893: POP
27894: POP
// if not list then
27895: LD_VAR 0 13
27899: NOT
27900: IFFALSE 27904
// exit ;
27902: GO 27975
// for i in list do
27904: LD_ADDR_VAR 0 6
27908: PUSH
27909: LD_VAR 0 13
27913: PUSH
27914: FOR_IN
27915: IFFALSE 27973
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
27917: LD_VAR 0 1
27921: PPUSH
27922: LD_STRING M
27924: PUSH
27925: LD_VAR 0 6
27929: PUSH
27930: LD_INT 1
27932: ARRAY
27933: PUSH
27934: LD_VAR 0 6
27938: PUSH
27939: LD_INT 2
27941: ARRAY
27942: PUSH
27943: LD_INT 0
27945: PUSH
27946: LD_INT 0
27948: PUSH
27949: LD_INT 0
27951: PUSH
27952: LD_INT 0
27954: PUSH
27955: EMPTY
27956: LIST
27957: LIST
27958: LIST
27959: LIST
27960: LIST
27961: LIST
27962: LIST
27963: PUSH
27964: EMPTY
27965: LIST
27966: PPUSH
27967: CALL_OW 447
27971: GO 27914
27973: POP
27974: POP
// end ;
27975: LD_VAR 0 5
27979: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
27980: LD_EXP 87
27984: NOT
27985: IFFALSE 28035
27987: GO 27989
27989: DISABLE
// begin initHack := true ;
27990: LD_ADDR_EXP 87
27994: PUSH
27995: LD_INT 1
27997: ST_TO_ADDR
// hackTanks := [ ] ;
27998: LD_ADDR_EXP 88
28002: PUSH
28003: EMPTY
28004: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
28005: LD_ADDR_EXP 89
28009: PUSH
28010: EMPTY
28011: ST_TO_ADDR
// hackLimit := 3 ;
28012: LD_ADDR_EXP 90
28016: PUSH
28017: LD_INT 3
28019: ST_TO_ADDR
// hackDist := 12 ;
28020: LD_ADDR_EXP 91
28024: PUSH
28025: LD_INT 12
28027: ST_TO_ADDR
// hackCounter := [ ] ;
28028: LD_ADDR_EXP 92
28032: PUSH
28033: EMPTY
28034: ST_TO_ADDR
// end ;
28035: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
28036: LD_EXP 87
28040: PUSH
28041: LD_INT 34
28043: PUSH
28044: LD_INT 99
28046: PUSH
28047: EMPTY
28048: LIST
28049: LIST
28050: PPUSH
28051: CALL_OW 69
28055: AND
28056: IFFALSE 28309
28058: GO 28060
28060: DISABLE
28061: LD_INT 0
28063: PPUSH
28064: PPUSH
// begin enable ;
28065: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
28066: LD_ADDR_VAR 0 1
28070: PUSH
28071: LD_INT 34
28073: PUSH
28074: LD_INT 99
28076: PUSH
28077: EMPTY
28078: LIST
28079: LIST
28080: PPUSH
28081: CALL_OW 69
28085: PUSH
28086: FOR_IN
28087: IFFALSE 28307
// begin if not i in hackTanks then
28089: LD_VAR 0 1
28093: PUSH
28094: LD_EXP 88
28098: IN
28099: NOT
28100: IFFALSE 28183
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
28102: LD_ADDR_EXP 88
28106: PUSH
28107: LD_EXP 88
28111: PPUSH
28112: LD_EXP 88
28116: PUSH
28117: LD_INT 1
28119: PLUS
28120: PPUSH
28121: LD_VAR 0 1
28125: PPUSH
28126: CALL_OW 1
28130: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
28131: LD_ADDR_EXP 89
28135: PUSH
28136: LD_EXP 89
28140: PPUSH
28141: LD_EXP 89
28145: PUSH
28146: LD_INT 1
28148: PLUS
28149: PPUSH
28150: EMPTY
28151: PPUSH
28152: CALL_OW 1
28156: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
28157: LD_ADDR_EXP 92
28161: PUSH
28162: LD_EXP 92
28166: PPUSH
28167: LD_EXP 92
28171: PUSH
28172: LD_INT 1
28174: PLUS
28175: PPUSH
28176: EMPTY
28177: PPUSH
28178: CALL_OW 1
28182: ST_TO_ADDR
// end ; if not IsOk ( i ) then
28183: LD_VAR 0 1
28187: PPUSH
28188: CALL_OW 302
28192: NOT
28193: IFFALSE 28206
// begin HackUnlinkAll ( i ) ;
28195: LD_VAR 0 1
28199: PPUSH
28200: CALL 28312 0 1
// continue ;
28204: GO 28086
// end ; HackCheckCapturedStatus ( i ) ;
28206: LD_VAR 0 1
28210: PPUSH
28211: CALL 28755 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
28215: LD_ADDR_VAR 0 2
28219: PUSH
28220: LD_INT 81
28222: PUSH
28223: LD_VAR 0 1
28227: PPUSH
28228: CALL_OW 255
28232: PUSH
28233: EMPTY
28234: LIST
28235: LIST
28236: PUSH
28237: LD_INT 33
28239: PUSH
28240: LD_INT 3
28242: PUSH
28243: EMPTY
28244: LIST
28245: LIST
28246: PUSH
28247: LD_INT 91
28249: PUSH
28250: LD_VAR 0 1
28254: PUSH
28255: LD_EXP 91
28259: PUSH
28260: EMPTY
28261: LIST
28262: LIST
28263: LIST
28264: PUSH
28265: LD_INT 50
28267: PUSH
28268: EMPTY
28269: LIST
28270: PUSH
28271: EMPTY
28272: LIST
28273: LIST
28274: LIST
28275: LIST
28276: PPUSH
28277: CALL_OW 69
28281: ST_TO_ADDR
// if not tmp then
28282: LD_VAR 0 2
28286: NOT
28287: IFFALSE 28291
// continue ;
28289: GO 28086
// HackLink ( i , tmp ) ;
28291: LD_VAR 0 1
28295: PPUSH
28296: LD_VAR 0 2
28300: PPUSH
28301: CALL 28448 0 2
// end ;
28305: GO 28086
28307: POP
28308: POP
// end ;
28309: PPOPN 2
28311: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
28312: LD_INT 0
28314: PPUSH
28315: PPUSH
28316: PPUSH
// if not hack in hackTanks then
28317: LD_VAR 0 1
28321: PUSH
28322: LD_EXP 88
28326: IN
28327: NOT
28328: IFFALSE 28332
// exit ;
28330: GO 28443
// index := GetElementIndex ( hackTanks , hack ) ;
28332: LD_ADDR_VAR 0 4
28336: PUSH
28337: LD_EXP 88
28341: PPUSH
28342: LD_VAR 0 1
28346: PPUSH
28347: CALL 36060 0 2
28351: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
28352: LD_EXP 89
28356: PUSH
28357: LD_VAR 0 4
28361: ARRAY
28362: IFFALSE 28443
// begin for i in hackTanksCaptured [ index ] do
28364: LD_ADDR_VAR 0 3
28368: PUSH
28369: LD_EXP 89
28373: PUSH
28374: LD_VAR 0 4
28378: ARRAY
28379: PUSH
28380: FOR_IN
28381: IFFALSE 28407
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
28383: LD_VAR 0 3
28387: PUSH
28388: LD_INT 1
28390: ARRAY
28391: PPUSH
28392: LD_VAR 0 3
28396: PUSH
28397: LD_INT 2
28399: ARRAY
28400: PPUSH
28401: CALL_OW 235
28405: GO 28380
28407: POP
28408: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
28409: LD_ADDR_EXP 89
28413: PUSH
28414: LD_EXP 89
28418: PPUSH
28419: LD_VAR 0 4
28423: PPUSH
28424: EMPTY
28425: PPUSH
28426: CALL_OW 1
28430: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
28431: LD_VAR 0 1
28435: PPUSH
28436: LD_INT 0
28438: PPUSH
28439: CALL_OW 505
// end ; end ;
28443: LD_VAR 0 2
28447: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
28448: LD_INT 0
28450: PPUSH
28451: PPUSH
28452: PPUSH
// if not hack in hackTanks or not vehicles then
28453: LD_VAR 0 1
28457: PUSH
28458: LD_EXP 88
28462: IN
28463: NOT
28464: PUSH
28465: LD_VAR 0 2
28469: NOT
28470: OR
28471: IFFALSE 28475
// exit ;
28473: GO 28750
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
28475: LD_ADDR_VAR 0 2
28479: PUSH
28480: LD_VAR 0 1
28484: PPUSH
28485: LD_VAR 0 2
28489: PPUSH
28490: LD_INT 1
28492: PPUSH
28493: LD_INT 1
28495: PPUSH
28496: CALL 36710 0 4
28500: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
28501: LD_ADDR_VAR 0 5
28505: PUSH
28506: LD_EXP 88
28510: PPUSH
28511: LD_VAR 0 1
28515: PPUSH
28516: CALL 36060 0 2
28520: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
28521: LD_EXP 89
28525: PUSH
28526: LD_VAR 0 5
28530: ARRAY
28531: PUSH
28532: LD_EXP 90
28536: LESS
28537: IFFALSE 28726
// begin for i := 1 to vehicles do
28539: LD_ADDR_VAR 0 4
28543: PUSH
28544: DOUBLE
28545: LD_INT 1
28547: DEC
28548: ST_TO_ADDR
28549: LD_VAR 0 2
28553: PUSH
28554: FOR_TO
28555: IFFALSE 28724
// begin if hackTanksCaptured [ index ] = hackLimit then
28557: LD_EXP 89
28561: PUSH
28562: LD_VAR 0 5
28566: ARRAY
28567: PUSH
28568: LD_EXP 90
28572: EQUAL
28573: IFFALSE 28577
// break ;
28575: GO 28724
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
28577: LD_ADDR_EXP 92
28581: PUSH
28582: LD_EXP 92
28586: PPUSH
28587: LD_VAR 0 5
28591: PPUSH
28592: LD_EXP 92
28596: PUSH
28597: LD_VAR 0 5
28601: ARRAY
28602: PUSH
28603: LD_INT 1
28605: PLUS
28606: PPUSH
28607: CALL_OW 1
28611: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
28612: LD_ADDR_EXP 89
28616: PUSH
28617: LD_EXP 89
28621: PPUSH
28622: LD_VAR 0 5
28626: PUSH
28627: LD_EXP 89
28631: PUSH
28632: LD_VAR 0 5
28636: ARRAY
28637: PUSH
28638: LD_INT 1
28640: PLUS
28641: PUSH
28642: EMPTY
28643: LIST
28644: LIST
28645: PPUSH
28646: LD_VAR 0 2
28650: PUSH
28651: LD_VAR 0 4
28655: ARRAY
28656: PUSH
28657: LD_VAR 0 2
28661: PUSH
28662: LD_VAR 0 4
28666: ARRAY
28667: PPUSH
28668: CALL_OW 255
28672: PUSH
28673: EMPTY
28674: LIST
28675: LIST
28676: PPUSH
28677: CALL 36275 0 3
28681: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
28682: LD_VAR 0 2
28686: PUSH
28687: LD_VAR 0 4
28691: ARRAY
28692: PPUSH
28693: LD_VAR 0 1
28697: PPUSH
28698: CALL_OW 255
28702: PPUSH
28703: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
28707: LD_VAR 0 2
28711: PUSH
28712: LD_VAR 0 4
28716: ARRAY
28717: PPUSH
28718: CALL_OW 141
// end ;
28722: GO 28554
28724: POP
28725: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
28726: LD_VAR 0 1
28730: PPUSH
28731: LD_EXP 89
28735: PUSH
28736: LD_VAR 0 5
28740: ARRAY
28741: PUSH
28742: LD_INT 0
28744: PLUS
28745: PPUSH
28746: CALL_OW 505
// end ;
28750: LD_VAR 0 3
28754: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
28755: LD_INT 0
28757: PPUSH
28758: PPUSH
28759: PPUSH
28760: PPUSH
// if not hack in hackTanks then
28761: LD_VAR 0 1
28765: PUSH
28766: LD_EXP 88
28770: IN
28771: NOT
28772: IFFALSE 28776
// exit ;
28774: GO 29016
// index := GetElementIndex ( hackTanks , hack ) ;
28776: LD_ADDR_VAR 0 4
28780: PUSH
28781: LD_EXP 88
28785: PPUSH
28786: LD_VAR 0 1
28790: PPUSH
28791: CALL 36060 0 2
28795: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
28796: LD_ADDR_VAR 0 3
28800: PUSH
28801: DOUBLE
28802: LD_EXP 89
28806: PUSH
28807: LD_VAR 0 4
28811: ARRAY
28812: INC
28813: ST_TO_ADDR
28814: LD_INT 1
28816: PUSH
28817: FOR_DOWNTO
28818: IFFALSE 28990
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
28820: LD_ADDR_VAR 0 5
28824: PUSH
28825: LD_EXP 89
28829: PUSH
28830: LD_VAR 0 4
28834: ARRAY
28835: PUSH
28836: LD_VAR 0 3
28840: ARRAY
28841: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
28842: LD_VAR 0 5
28846: PUSH
28847: LD_INT 1
28849: ARRAY
28850: PPUSH
28851: CALL_OW 302
28855: NOT
28856: PUSH
28857: LD_VAR 0 5
28861: PUSH
28862: LD_INT 1
28864: ARRAY
28865: PPUSH
28866: CALL_OW 255
28870: PUSH
28871: LD_VAR 0 1
28875: PPUSH
28876: CALL_OW 255
28880: NONEQUAL
28881: OR
28882: IFFALSE 28988
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
28884: LD_VAR 0 5
28888: PUSH
28889: LD_INT 1
28891: ARRAY
28892: PPUSH
28893: CALL_OW 305
28897: PUSH
28898: LD_VAR 0 5
28902: PUSH
28903: LD_INT 1
28905: ARRAY
28906: PPUSH
28907: CALL_OW 255
28911: PUSH
28912: LD_VAR 0 1
28916: PPUSH
28917: CALL_OW 255
28921: EQUAL
28922: AND
28923: IFFALSE 28947
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
28925: LD_VAR 0 5
28929: PUSH
28930: LD_INT 1
28932: ARRAY
28933: PPUSH
28934: LD_VAR 0 5
28938: PUSH
28939: LD_INT 2
28941: ARRAY
28942: PPUSH
28943: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
28947: LD_ADDR_EXP 89
28951: PUSH
28952: LD_EXP 89
28956: PPUSH
28957: LD_VAR 0 4
28961: PPUSH
28962: LD_EXP 89
28966: PUSH
28967: LD_VAR 0 4
28971: ARRAY
28972: PPUSH
28973: LD_VAR 0 3
28977: PPUSH
28978: CALL_OW 3
28982: PPUSH
28983: CALL_OW 1
28987: ST_TO_ADDR
// end ; end ;
28988: GO 28817
28990: POP
28991: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
28992: LD_VAR 0 1
28996: PPUSH
28997: LD_EXP 89
29001: PUSH
29002: LD_VAR 0 4
29006: ARRAY
29007: PUSH
29008: LD_INT 0
29010: PLUS
29011: PPUSH
29012: CALL_OW 505
// end ;
29016: LD_VAR 0 2
29020: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
29021: LD_INT 0
29023: PPUSH
29024: PPUSH
29025: PPUSH
29026: PPUSH
// if not hack in hackTanks then
29027: LD_VAR 0 1
29031: PUSH
29032: LD_EXP 88
29036: IN
29037: NOT
29038: IFFALSE 29042
// exit ;
29040: GO 29127
// index := GetElementIndex ( hackTanks , hack ) ;
29042: LD_ADDR_VAR 0 5
29046: PUSH
29047: LD_EXP 88
29051: PPUSH
29052: LD_VAR 0 1
29056: PPUSH
29057: CALL 36060 0 2
29061: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
29062: LD_ADDR_VAR 0 4
29066: PUSH
29067: DOUBLE
29068: LD_INT 1
29070: DEC
29071: ST_TO_ADDR
29072: LD_EXP 89
29076: PUSH
29077: LD_VAR 0 5
29081: ARRAY
29082: PUSH
29083: FOR_TO
29084: IFFALSE 29125
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
29086: LD_EXP 89
29090: PUSH
29091: LD_VAR 0 5
29095: ARRAY
29096: PUSH
29097: LD_VAR 0 4
29101: ARRAY
29102: PUSH
29103: LD_INT 1
29105: ARRAY
29106: PUSH
29107: LD_VAR 0 2
29111: EQUAL
29112: IFFALSE 29123
// KillUnit ( vehicle ) ;
29114: LD_VAR 0 2
29118: PPUSH
29119: CALL_OW 66
29123: GO 29083
29125: POP
29126: POP
// end ;
29127: LD_VAR 0 3
29131: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
29132: LD_EXP 93
29136: NOT
29137: IFFALSE 29172
29139: GO 29141
29141: DISABLE
// begin initMiner := true ;
29142: LD_ADDR_EXP 93
29146: PUSH
29147: LD_INT 1
29149: ST_TO_ADDR
// minersList := [ ] ;
29150: LD_ADDR_EXP 94
29154: PUSH
29155: EMPTY
29156: ST_TO_ADDR
// minerMinesList := [ ] ;
29157: LD_ADDR_EXP 95
29161: PUSH
29162: EMPTY
29163: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
29164: LD_ADDR_EXP 96
29168: PUSH
29169: LD_INT 5
29171: ST_TO_ADDR
// end ;
29172: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
29173: LD_EXP 93
29177: PUSH
29178: LD_INT 34
29180: PUSH
29181: LD_INT 81
29183: PUSH
29184: EMPTY
29185: LIST
29186: LIST
29187: PPUSH
29188: CALL_OW 69
29192: AND
29193: IFFALSE 29654
29195: GO 29197
29197: DISABLE
29198: LD_INT 0
29200: PPUSH
29201: PPUSH
29202: PPUSH
29203: PPUSH
// begin enable ;
29204: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
29205: LD_ADDR_VAR 0 1
29209: PUSH
29210: LD_INT 34
29212: PUSH
29213: LD_INT 81
29215: PUSH
29216: EMPTY
29217: LIST
29218: LIST
29219: PPUSH
29220: CALL_OW 69
29224: PUSH
29225: FOR_IN
29226: IFFALSE 29298
// begin if not i in minersList then
29228: LD_VAR 0 1
29232: PUSH
29233: LD_EXP 94
29237: IN
29238: NOT
29239: IFFALSE 29296
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
29241: LD_ADDR_EXP 94
29245: PUSH
29246: LD_EXP 94
29250: PPUSH
29251: LD_EXP 94
29255: PUSH
29256: LD_INT 1
29258: PLUS
29259: PPUSH
29260: LD_VAR 0 1
29264: PPUSH
29265: CALL_OW 1
29269: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
29270: LD_ADDR_EXP 95
29274: PUSH
29275: LD_EXP 95
29279: PPUSH
29280: LD_EXP 95
29284: PUSH
29285: LD_INT 1
29287: PLUS
29288: PPUSH
29289: EMPTY
29290: PPUSH
29291: CALL_OW 1
29295: ST_TO_ADDR
// end end ;
29296: GO 29225
29298: POP
29299: POP
// for i := minerMinesList downto 1 do
29300: LD_ADDR_VAR 0 1
29304: PUSH
29305: DOUBLE
29306: LD_EXP 95
29310: INC
29311: ST_TO_ADDR
29312: LD_INT 1
29314: PUSH
29315: FOR_DOWNTO
29316: IFFALSE 29652
// begin if IsLive ( minersList [ i ] ) then
29318: LD_EXP 94
29322: PUSH
29323: LD_VAR 0 1
29327: ARRAY
29328: PPUSH
29329: CALL_OW 300
29333: IFFALSE 29361
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
29335: LD_EXP 94
29339: PUSH
29340: LD_VAR 0 1
29344: ARRAY
29345: PPUSH
29346: LD_EXP 95
29350: PUSH
29351: LD_VAR 0 1
29355: ARRAY
29356: PPUSH
29357: CALL_OW 505
// if not minerMinesList [ i ] then
29361: LD_EXP 95
29365: PUSH
29366: LD_VAR 0 1
29370: ARRAY
29371: NOT
29372: IFFALSE 29376
// continue ;
29374: GO 29315
// for j := minerMinesList [ i ] downto 1 do
29376: LD_ADDR_VAR 0 2
29380: PUSH
29381: DOUBLE
29382: LD_EXP 95
29386: PUSH
29387: LD_VAR 0 1
29391: ARRAY
29392: INC
29393: ST_TO_ADDR
29394: LD_INT 1
29396: PUSH
29397: FOR_DOWNTO
29398: IFFALSE 29648
// begin side := GetSide ( minersList [ i ] ) ;
29400: LD_ADDR_VAR 0 3
29404: PUSH
29405: LD_EXP 94
29409: PUSH
29410: LD_VAR 0 1
29414: ARRAY
29415: PPUSH
29416: CALL_OW 255
29420: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
29421: LD_ADDR_VAR 0 4
29425: PUSH
29426: LD_EXP 95
29430: PUSH
29431: LD_VAR 0 1
29435: ARRAY
29436: PUSH
29437: LD_VAR 0 2
29441: ARRAY
29442: PUSH
29443: LD_INT 1
29445: ARRAY
29446: PPUSH
29447: LD_EXP 95
29451: PUSH
29452: LD_VAR 0 1
29456: ARRAY
29457: PUSH
29458: LD_VAR 0 2
29462: ARRAY
29463: PUSH
29464: LD_INT 2
29466: ARRAY
29467: PPUSH
29468: CALL_OW 428
29472: ST_TO_ADDR
// if not tmp then
29473: LD_VAR 0 4
29477: NOT
29478: IFFALSE 29482
// continue ;
29480: GO 29397
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
29482: LD_VAR 0 4
29486: PUSH
29487: LD_INT 81
29489: PUSH
29490: LD_VAR 0 3
29494: PUSH
29495: EMPTY
29496: LIST
29497: LIST
29498: PPUSH
29499: CALL_OW 69
29503: IN
29504: PUSH
29505: LD_EXP 95
29509: PUSH
29510: LD_VAR 0 1
29514: ARRAY
29515: PUSH
29516: LD_VAR 0 2
29520: ARRAY
29521: PUSH
29522: LD_INT 1
29524: ARRAY
29525: PPUSH
29526: LD_EXP 95
29530: PUSH
29531: LD_VAR 0 1
29535: ARRAY
29536: PUSH
29537: LD_VAR 0 2
29541: ARRAY
29542: PUSH
29543: LD_INT 2
29545: ARRAY
29546: PPUSH
29547: CALL_OW 458
29551: AND
29552: IFFALSE 29646
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
29554: LD_EXP 95
29558: PUSH
29559: LD_VAR 0 1
29563: ARRAY
29564: PUSH
29565: LD_VAR 0 2
29569: ARRAY
29570: PUSH
29571: LD_INT 1
29573: ARRAY
29574: PPUSH
29575: LD_EXP 95
29579: PUSH
29580: LD_VAR 0 1
29584: ARRAY
29585: PUSH
29586: LD_VAR 0 2
29590: ARRAY
29591: PUSH
29592: LD_INT 2
29594: ARRAY
29595: PPUSH
29596: LD_VAR 0 3
29600: PPUSH
29601: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
29605: LD_ADDR_EXP 95
29609: PUSH
29610: LD_EXP 95
29614: PPUSH
29615: LD_VAR 0 1
29619: PPUSH
29620: LD_EXP 95
29624: PUSH
29625: LD_VAR 0 1
29629: ARRAY
29630: PPUSH
29631: LD_VAR 0 2
29635: PPUSH
29636: CALL_OW 3
29640: PPUSH
29641: CALL_OW 1
29645: ST_TO_ADDR
// end ; end ;
29646: GO 29397
29648: POP
29649: POP
// end ;
29650: GO 29315
29652: POP
29653: POP
// end ;
29654: PPOPN 4
29656: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
29657: LD_INT 0
29659: PPUSH
29660: PPUSH
// result := false ;
29661: LD_ADDR_VAR 0 4
29665: PUSH
29666: LD_INT 0
29668: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
29669: LD_VAR 0 1
29673: PPUSH
29674: CALL_OW 264
29678: PUSH
29679: LD_INT 81
29681: EQUAL
29682: NOT
29683: IFFALSE 29687
// exit ;
29685: GO 29927
// index := GetElementIndex ( minersList , unit ) ;
29687: LD_ADDR_VAR 0 5
29691: PUSH
29692: LD_EXP 94
29696: PPUSH
29697: LD_VAR 0 1
29701: PPUSH
29702: CALL 36060 0 2
29706: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
29707: LD_EXP 95
29711: PUSH
29712: LD_VAR 0 5
29716: ARRAY
29717: PUSH
29718: LD_EXP 96
29722: GREATEREQUAL
29723: IFFALSE 29727
// exit ;
29725: GO 29927
// ComMoveXY ( unit , x , y ) ;
29727: LD_VAR 0 1
29731: PPUSH
29732: LD_VAR 0 2
29736: PPUSH
29737: LD_VAR 0 3
29741: PPUSH
29742: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
29746: LD_INT 35
29748: PPUSH
29749: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
29753: LD_VAR 0 1
29757: PPUSH
29758: LD_VAR 0 2
29762: PPUSH
29763: LD_VAR 0 3
29767: PPUSH
29768: CALL 67396 0 3
29772: NOT
29773: PUSH
29774: LD_VAR 0 1
29778: PPUSH
29779: CALL_OW 314
29783: AND
29784: IFFALSE 29788
// exit ;
29786: GO 29927
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
29788: LD_VAR 0 2
29792: PPUSH
29793: LD_VAR 0 3
29797: PPUSH
29798: CALL_OW 428
29802: PUSH
29803: LD_VAR 0 1
29807: EQUAL
29808: PUSH
29809: LD_VAR 0 1
29813: PPUSH
29814: CALL_OW 314
29818: NOT
29819: AND
29820: IFFALSE 29746
// PlaySoundXY ( x , y , PlantMine ) ;
29822: LD_VAR 0 2
29826: PPUSH
29827: LD_VAR 0 3
29831: PPUSH
29832: LD_STRING PlantMine
29834: PPUSH
29835: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
29839: LD_VAR 0 2
29843: PPUSH
29844: LD_VAR 0 3
29848: PPUSH
29849: LD_VAR 0 1
29853: PPUSH
29854: CALL_OW 255
29858: PPUSH
29859: LD_INT 0
29861: PPUSH
29862: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
29866: LD_ADDR_EXP 95
29870: PUSH
29871: LD_EXP 95
29875: PPUSH
29876: LD_VAR 0 5
29880: PUSH
29881: LD_EXP 95
29885: PUSH
29886: LD_VAR 0 5
29890: ARRAY
29891: PUSH
29892: LD_INT 1
29894: PLUS
29895: PUSH
29896: EMPTY
29897: LIST
29898: LIST
29899: PPUSH
29900: LD_VAR 0 2
29904: PUSH
29905: LD_VAR 0 3
29909: PUSH
29910: EMPTY
29911: LIST
29912: LIST
29913: PPUSH
29914: CALL 36275 0 3
29918: ST_TO_ADDR
// result := true ;
29919: LD_ADDR_VAR 0 4
29923: PUSH
29924: LD_INT 1
29926: ST_TO_ADDR
// end ;
29927: LD_VAR 0 4
29931: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
29932: LD_INT 0
29934: PPUSH
29935: PPUSH
29936: PPUSH
// if not unit in minersList then
29937: LD_VAR 0 1
29941: PUSH
29942: LD_EXP 94
29946: IN
29947: NOT
29948: IFFALSE 29952
// exit ;
29950: GO 30344
// index := GetElementIndex ( minersList , unit ) ;
29952: LD_ADDR_VAR 0 6
29956: PUSH
29957: LD_EXP 94
29961: PPUSH
29962: LD_VAR 0 1
29966: PPUSH
29967: CALL 36060 0 2
29971: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
29972: LD_ADDR_VAR 0 5
29976: PUSH
29977: DOUBLE
29978: LD_EXP 95
29982: PUSH
29983: LD_VAR 0 6
29987: ARRAY
29988: INC
29989: ST_TO_ADDR
29990: LD_INT 1
29992: PUSH
29993: FOR_DOWNTO
29994: IFFALSE 30155
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
29996: LD_EXP 95
30000: PUSH
30001: LD_VAR 0 6
30005: ARRAY
30006: PUSH
30007: LD_VAR 0 5
30011: ARRAY
30012: PUSH
30013: LD_INT 1
30015: ARRAY
30016: PUSH
30017: LD_VAR 0 2
30021: EQUAL
30022: PUSH
30023: LD_EXP 95
30027: PUSH
30028: LD_VAR 0 6
30032: ARRAY
30033: PUSH
30034: LD_VAR 0 5
30038: ARRAY
30039: PUSH
30040: LD_INT 2
30042: ARRAY
30043: PUSH
30044: LD_VAR 0 3
30048: EQUAL
30049: AND
30050: IFFALSE 30153
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
30052: LD_EXP 95
30056: PUSH
30057: LD_VAR 0 6
30061: ARRAY
30062: PUSH
30063: LD_VAR 0 5
30067: ARRAY
30068: PUSH
30069: LD_INT 1
30071: ARRAY
30072: PPUSH
30073: LD_EXP 95
30077: PUSH
30078: LD_VAR 0 6
30082: ARRAY
30083: PUSH
30084: LD_VAR 0 5
30088: ARRAY
30089: PUSH
30090: LD_INT 2
30092: ARRAY
30093: PPUSH
30094: LD_VAR 0 1
30098: PPUSH
30099: CALL_OW 255
30103: PPUSH
30104: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
30108: LD_ADDR_EXP 95
30112: PUSH
30113: LD_EXP 95
30117: PPUSH
30118: LD_VAR 0 6
30122: PPUSH
30123: LD_EXP 95
30127: PUSH
30128: LD_VAR 0 6
30132: ARRAY
30133: PPUSH
30134: LD_VAR 0 5
30138: PPUSH
30139: CALL_OW 3
30143: PPUSH
30144: CALL_OW 1
30148: ST_TO_ADDR
// exit ;
30149: POP
30150: POP
30151: GO 30344
// end ; end ;
30153: GO 29993
30155: POP
30156: POP
// for i := minerMinesList [ index ] downto 1 do
30157: LD_ADDR_VAR 0 5
30161: PUSH
30162: DOUBLE
30163: LD_EXP 95
30167: PUSH
30168: LD_VAR 0 6
30172: ARRAY
30173: INC
30174: ST_TO_ADDR
30175: LD_INT 1
30177: PUSH
30178: FOR_DOWNTO
30179: IFFALSE 30342
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
30181: LD_EXP 95
30185: PUSH
30186: LD_VAR 0 6
30190: ARRAY
30191: PUSH
30192: LD_VAR 0 5
30196: ARRAY
30197: PUSH
30198: LD_INT 1
30200: ARRAY
30201: PPUSH
30202: LD_EXP 95
30206: PUSH
30207: LD_VAR 0 6
30211: ARRAY
30212: PUSH
30213: LD_VAR 0 5
30217: ARRAY
30218: PUSH
30219: LD_INT 2
30221: ARRAY
30222: PPUSH
30223: LD_VAR 0 2
30227: PPUSH
30228: LD_VAR 0 3
30232: PPUSH
30233: CALL_OW 298
30237: PUSH
30238: LD_INT 6
30240: LESS
30241: IFFALSE 30340
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
30243: LD_EXP 95
30247: PUSH
30248: LD_VAR 0 6
30252: ARRAY
30253: PUSH
30254: LD_VAR 0 5
30258: ARRAY
30259: PUSH
30260: LD_INT 1
30262: ARRAY
30263: PPUSH
30264: LD_EXP 95
30268: PUSH
30269: LD_VAR 0 6
30273: ARRAY
30274: PUSH
30275: LD_VAR 0 5
30279: ARRAY
30280: PUSH
30281: LD_INT 2
30283: ARRAY
30284: PPUSH
30285: LD_VAR 0 1
30289: PPUSH
30290: CALL_OW 255
30294: PPUSH
30295: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
30299: LD_ADDR_EXP 95
30303: PUSH
30304: LD_EXP 95
30308: PPUSH
30309: LD_VAR 0 6
30313: PPUSH
30314: LD_EXP 95
30318: PUSH
30319: LD_VAR 0 6
30323: ARRAY
30324: PPUSH
30325: LD_VAR 0 5
30329: PPUSH
30330: CALL_OW 3
30334: PPUSH
30335: CALL_OW 1
30339: ST_TO_ADDR
// end ; end ;
30340: GO 30178
30342: POP
30343: POP
// end ;
30344: LD_VAR 0 4
30348: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
30349: LD_INT 0
30351: PPUSH
30352: PPUSH
30353: PPUSH
30354: PPUSH
30355: PPUSH
30356: PPUSH
30357: PPUSH
30358: PPUSH
30359: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
30360: LD_VAR 0 1
30364: PPUSH
30365: CALL_OW 264
30369: PUSH
30370: LD_INT 81
30372: EQUAL
30373: NOT
30374: PUSH
30375: LD_VAR 0 1
30379: PUSH
30380: LD_EXP 94
30384: IN
30385: NOT
30386: OR
30387: IFFALSE 30391
// exit ;
30389: GO 30713
// index := GetElementIndex ( minersList , unit ) ;
30391: LD_ADDR_VAR 0 6
30395: PUSH
30396: LD_EXP 94
30400: PPUSH
30401: LD_VAR 0 1
30405: PPUSH
30406: CALL 36060 0 2
30410: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
30411: LD_ADDR_VAR 0 8
30415: PUSH
30416: LD_EXP 96
30420: PUSH
30421: LD_EXP 95
30425: PUSH
30426: LD_VAR 0 6
30430: ARRAY
30431: MINUS
30432: ST_TO_ADDR
// if not minesFreeAmount then
30433: LD_VAR 0 8
30437: NOT
30438: IFFALSE 30442
// exit ;
30440: GO 30713
// tmp := [ ] ;
30442: LD_ADDR_VAR 0 7
30446: PUSH
30447: EMPTY
30448: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
30449: LD_ADDR_VAR 0 5
30453: PUSH
30454: DOUBLE
30455: LD_INT 1
30457: DEC
30458: ST_TO_ADDR
30459: LD_VAR 0 8
30463: PUSH
30464: FOR_TO
30465: IFFALSE 30660
// begin _d := rand ( 0 , 5 ) ;
30467: LD_ADDR_VAR 0 11
30471: PUSH
30472: LD_INT 0
30474: PPUSH
30475: LD_INT 5
30477: PPUSH
30478: CALL_OW 12
30482: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
30483: LD_ADDR_VAR 0 12
30487: PUSH
30488: LD_INT 2
30490: PPUSH
30491: LD_INT 6
30493: PPUSH
30494: CALL_OW 12
30498: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
30499: LD_ADDR_VAR 0 9
30503: PUSH
30504: LD_VAR 0 2
30508: PPUSH
30509: LD_VAR 0 11
30513: PPUSH
30514: LD_VAR 0 12
30518: PPUSH
30519: CALL_OW 272
30523: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
30524: LD_ADDR_VAR 0 10
30528: PUSH
30529: LD_VAR 0 3
30533: PPUSH
30534: LD_VAR 0 11
30538: PPUSH
30539: LD_VAR 0 12
30543: PPUSH
30544: CALL_OW 273
30548: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
30549: LD_VAR 0 9
30553: PPUSH
30554: LD_VAR 0 10
30558: PPUSH
30559: CALL_OW 488
30563: PUSH
30564: LD_VAR 0 9
30568: PUSH
30569: LD_VAR 0 10
30573: PUSH
30574: EMPTY
30575: LIST
30576: LIST
30577: PUSH
30578: LD_VAR 0 7
30582: IN
30583: NOT
30584: AND
30585: PUSH
30586: LD_VAR 0 9
30590: PPUSH
30591: LD_VAR 0 10
30595: PPUSH
30596: CALL_OW 458
30600: NOT
30601: AND
30602: IFFALSE 30644
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
30604: LD_ADDR_VAR 0 7
30608: PUSH
30609: LD_VAR 0 7
30613: PPUSH
30614: LD_VAR 0 7
30618: PUSH
30619: LD_INT 1
30621: PLUS
30622: PPUSH
30623: LD_VAR 0 9
30627: PUSH
30628: LD_VAR 0 10
30632: PUSH
30633: EMPTY
30634: LIST
30635: LIST
30636: PPUSH
30637: CALL_OW 1
30641: ST_TO_ADDR
30642: GO 30658
// i := i - 1 ;
30644: LD_ADDR_VAR 0 5
30648: PUSH
30649: LD_VAR 0 5
30653: PUSH
30654: LD_INT 1
30656: MINUS
30657: ST_TO_ADDR
// end ;
30658: GO 30464
30660: POP
30661: POP
// for i in tmp do
30662: LD_ADDR_VAR 0 5
30666: PUSH
30667: LD_VAR 0 7
30671: PUSH
30672: FOR_IN
30673: IFFALSE 30711
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
30675: LD_VAR 0 1
30679: PPUSH
30680: LD_VAR 0 5
30684: PUSH
30685: LD_INT 1
30687: ARRAY
30688: PPUSH
30689: LD_VAR 0 5
30693: PUSH
30694: LD_INT 2
30696: ARRAY
30697: PPUSH
30698: CALL 29657 0 3
30702: NOT
30703: IFFALSE 30709
// exit ;
30705: POP
30706: POP
30707: GO 30713
30709: GO 30672
30711: POP
30712: POP
// end ;
30713: LD_VAR 0 4
30717: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
30718: LD_INT 0
30720: PPUSH
30721: PPUSH
30722: PPUSH
30723: PPUSH
30724: PPUSH
30725: PPUSH
30726: PPUSH
// if not GetClass ( unit ) = class_sniper then
30727: LD_VAR 0 1
30731: PPUSH
30732: CALL_OW 257
30736: PUSH
30737: LD_INT 5
30739: EQUAL
30740: NOT
30741: IFFALSE 30745
// exit ;
30743: GO 31133
// dist := 8 ;
30745: LD_ADDR_VAR 0 5
30749: PUSH
30750: LD_INT 8
30752: ST_TO_ADDR
// viewRange := 12 ;
30753: LD_ADDR_VAR 0 7
30757: PUSH
30758: LD_INT 12
30760: ST_TO_ADDR
// side := GetSide ( unit ) ;
30761: LD_ADDR_VAR 0 6
30765: PUSH
30766: LD_VAR 0 1
30770: PPUSH
30771: CALL_OW 255
30775: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
30776: LD_INT 61
30778: PPUSH
30779: LD_VAR 0 6
30783: PPUSH
30784: CALL_OW 321
30788: PUSH
30789: LD_INT 2
30791: EQUAL
30792: IFFALSE 30802
// viewRange := 16 ;
30794: LD_ADDR_VAR 0 7
30798: PUSH
30799: LD_INT 16
30801: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
30802: LD_VAR 0 1
30806: PPUSH
30807: LD_VAR 0 2
30811: PPUSH
30812: LD_VAR 0 3
30816: PPUSH
30817: CALL_OW 297
30821: PUSH
30822: LD_VAR 0 5
30826: GREATER
30827: IFFALSE 30906
// begin ComMoveXY ( unit , x , y ) ;
30829: LD_VAR 0 1
30833: PPUSH
30834: LD_VAR 0 2
30838: PPUSH
30839: LD_VAR 0 3
30843: PPUSH
30844: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
30848: LD_INT 35
30850: PPUSH
30851: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
30855: LD_VAR 0 1
30859: PPUSH
30860: LD_VAR 0 2
30864: PPUSH
30865: LD_VAR 0 3
30869: PPUSH
30870: CALL 67396 0 3
30874: NOT
30875: IFFALSE 30879
// exit ;
30877: GO 31133
// until GetDistUnitXY ( unit , x , y ) < dist ;
30879: LD_VAR 0 1
30883: PPUSH
30884: LD_VAR 0 2
30888: PPUSH
30889: LD_VAR 0 3
30893: PPUSH
30894: CALL_OW 297
30898: PUSH
30899: LD_VAR 0 5
30903: LESS
30904: IFFALSE 30848
// end ; ComTurnXY ( unit , x , y ) ;
30906: LD_VAR 0 1
30910: PPUSH
30911: LD_VAR 0 2
30915: PPUSH
30916: LD_VAR 0 3
30920: PPUSH
30921: CALL_OW 118
// wait ( 5 ) ;
30925: LD_INT 5
30927: PPUSH
30928: CALL_OW 67
// _d := GetDir ( unit ) ;
30932: LD_ADDR_VAR 0 10
30936: PUSH
30937: LD_VAR 0 1
30941: PPUSH
30942: CALL_OW 254
30946: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
30947: LD_ADDR_VAR 0 8
30951: PUSH
30952: LD_VAR 0 1
30956: PPUSH
30957: CALL_OW 250
30961: PPUSH
30962: LD_VAR 0 10
30966: PPUSH
30967: LD_VAR 0 5
30971: PPUSH
30972: CALL_OW 272
30976: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
30977: LD_ADDR_VAR 0 9
30981: PUSH
30982: LD_VAR 0 1
30986: PPUSH
30987: CALL_OW 251
30991: PPUSH
30992: LD_VAR 0 10
30996: PPUSH
30997: LD_VAR 0 5
31001: PPUSH
31002: CALL_OW 273
31006: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31007: LD_VAR 0 8
31011: PPUSH
31012: LD_VAR 0 9
31016: PPUSH
31017: CALL_OW 488
31021: NOT
31022: IFFALSE 31026
// exit ;
31024: GO 31133
// ComAnimCustom ( unit , 1 ) ;
31026: LD_VAR 0 1
31030: PPUSH
31031: LD_INT 1
31033: PPUSH
31034: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
31038: LD_VAR 0 8
31042: PPUSH
31043: LD_VAR 0 9
31047: PPUSH
31048: LD_VAR 0 6
31052: PPUSH
31053: LD_VAR 0 7
31057: PPUSH
31058: CALL_OW 330
// repeat wait ( 1 ) ;
31062: LD_INT 1
31064: PPUSH
31065: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
31069: LD_VAR 0 1
31073: PPUSH
31074: CALL_OW 316
31078: PUSH
31079: LD_VAR 0 1
31083: PPUSH
31084: CALL_OW 314
31088: OR
31089: PUSH
31090: LD_VAR 0 1
31094: PPUSH
31095: CALL_OW 302
31099: NOT
31100: OR
31101: PUSH
31102: LD_VAR 0 1
31106: PPUSH
31107: CALL_OW 301
31111: OR
31112: IFFALSE 31062
// RemoveSeeing ( _x , _y , side ) ;
31114: LD_VAR 0 8
31118: PPUSH
31119: LD_VAR 0 9
31123: PPUSH
31124: LD_VAR 0 6
31128: PPUSH
31129: CALL_OW 331
// end ; end_of_file
31133: LD_VAR 0 4
31137: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
31138: LD_INT 0
31140: PPUSH
31141: PPUSH
// if exist_mode then
31142: LD_VAR 0 2
31146: IFFALSE 31171
// unit := CreateCharacter ( prefix & ident ) else
31148: LD_ADDR_VAR 0 5
31152: PUSH
31153: LD_VAR 0 3
31157: PUSH
31158: LD_VAR 0 1
31162: STR
31163: PPUSH
31164: CALL_OW 34
31168: ST_TO_ADDR
31169: GO 31186
// unit := NewCharacter ( ident ) ;
31171: LD_ADDR_VAR 0 5
31175: PUSH
31176: LD_VAR 0 1
31180: PPUSH
31181: CALL_OW 25
31185: ST_TO_ADDR
// result := unit ;
31186: LD_ADDR_VAR 0 4
31190: PUSH
31191: LD_VAR 0 5
31195: ST_TO_ADDR
// end ;
31196: LD_VAR 0 4
31200: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
31201: LD_INT 0
31203: PPUSH
31204: PPUSH
// if not side or not nation then
31205: LD_VAR 0 1
31209: NOT
31210: PUSH
31211: LD_VAR 0 2
31215: NOT
31216: OR
31217: IFFALSE 31221
// exit ;
31219: GO 31989
// case nation of nation_american :
31221: LD_VAR 0 2
31225: PUSH
31226: LD_INT 1
31228: DOUBLE
31229: EQUAL
31230: IFTRUE 31234
31232: GO 31448
31234: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
31235: LD_ADDR_VAR 0 4
31239: PUSH
31240: LD_INT 35
31242: PUSH
31243: LD_INT 45
31245: PUSH
31246: LD_INT 46
31248: PUSH
31249: LD_INT 47
31251: PUSH
31252: LD_INT 82
31254: PUSH
31255: LD_INT 83
31257: PUSH
31258: LD_INT 84
31260: PUSH
31261: LD_INT 85
31263: PUSH
31264: LD_INT 86
31266: PUSH
31267: LD_INT 1
31269: PUSH
31270: LD_INT 2
31272: PUSH
31273: LD_INT 6
31275: PUSH
31276: LD_INT 15
31278: PUSH
31279: LD_INT 16
31281: PUSH
31282: LD_INT 7
31284: PUSH
31285: LD_INT 12
31287: PUSH
31288: LD_INT 13
31290: PUSH
31291: LD_INT 10
31293: PUSH
31294: LD_INT 14
31296: PUSH
31297: LD_INT 20
31299: PUSH
31300: LD_INT 21
31302: PUSH
31303: LD_INT 22
31305: PUSH
31306: LD_INT 25
31308: PUSH
31309: LD_INT 32
31311: PUSH
31312: LD_INT 27
31314: PUSH
31315: LD_INT 36
31317: PUSH
31318: LD_INT 69
31320: PUSH
31321: LD_INT 39
31323: PUSH
31324: LD_INT 34
31326: PUSH
31327: LD_INT 40
31329: PUSH
31330: LD_INT 48
31332: PUSH
31333: LD_INT 49
31335: PUSH
31336: LD_INT 50
31338: PUSH
31339: LD_INT 51
31341: PUSH
31342: LD_INT 52
31344: PUSH
31345: LD_INT 53
31347: PUSH
31348: LD_INT 54
31350: PUSH
31351: LD_INT 55
31353: PUSH
31354: LD_INT 56
31356: PUSH
31357: LD_INT 57
31359: PUSH
31360: LD_INT 58
31362: PUSH
31363: LD_INT 59
31365: PUSH
31366: LD_INT 60
31368: PUSH
31369: LD_INT 61
31371: PUSH
31372: LD_INT 62
31374: PUSH
31375: LD_INT 80
31377: PUSH
31378: LD_INT 82
31380: PUSH
31381: LD_INT 83
31383: PUSH
31384: LD_INT 84
31386: PUSH
31387: LD_INT 85
31389: PUSH
31390: LD_INT 86
31392: PUSH
31393: EMPTY
31394: LIST
31395: LIST
31396: LIST
31397: LIST
31398: LIST
31399: LIST
31400: LIST
31401: LIST
31402: LIST
31403: LIST
31404: LIST
31405: LIST
31406: LIST
31407: LIST
31408: LIST
31409: LIST
31410: LIST
31411: LIST
31412: LIST
31413: LIST
31414: LIST
31415: LIST
31416: LIST
31417: LIST
31418: LIST
31419: LIST
31420: LIST
31421: LIST
31422: LIST
31423: LIST
31424: LIST
31425: LIST
31426: LIST
31427: LIST
31428: LIST
31429: LIST
31430: LIST
31431: LIST
31432: LIST
31433: LIST
31434: LIST
31435: LIST
31436: LIST
31437: LIST
31438: LIST
31439: LIST
31440: LIST
31441: LIST
31442: LIST
31443: LIST
31444: LIST
31445: ST_TO_ADDR
31446: GO 31913
31448: LD_INT 2
31450: DOUBLE
31451: EQUAL
31452: IFTRUE 31456
31454: GO 31682
31456: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
31457: LD_ADDR_VAR 0 4
31461: PUSH
31462: LD_INT 35
31464: PUSH
31465: LD_INT 45
31467: PUSH
31468: LD_INT 46
31470: PUSH
31471: LD_INT 47
31473: PUSH
31474: LD_INT 82
31476: PUSH
31477: LD_INT 83
31479: PUSH
31480: LD_INT 84
31482: PUSH
31483: LD_INT 85
31485: PUSH
31486: LD_INT 87
31488: PUSH
31489: LD_INT 70
31491: PUSH
31492: LD_INT 1
31494: PUSH
31495: LD_INT 11
31497: PUSH
31498: LD_INT 3
31500: PUSH
31501: LD_INT 4
31503: PUSH
31504: LD_INT 5
31506: PUSH
31507: LD_INT 6
31509: PUSH
31510: LD_INT 15
31512: PUSH
31513: LD_INT 18
31515: PUSH
31516: LD_INT 7
31518: PUSH
31519: LD_INT 17
31521: PUSH
31522: LD_INT 8
31524: PUSH
31525: LD_INT 20
31527: PUSH
31528: LD_INT 21
31530: PUSH
31531: LD_INT 22
31533: PUSH
31534: LD_INT 72
31536: PUSH
31537: LD_INT 26
31539: PUSH
31540: LD_INT 69
31542: PUSH
31543: LD_INT 39
31545: PUSH
31546: LD_INT 40
31548: PUSH
31549: LD_INT 41
31551: PUSH
31552: LD_INT 42
31554: PUSH
31555: LD_INT 43
31557: PUSH
31558: LD_INT 48
31560: PUSH
31561: LD_INT 49
31563: PUSH
31564: LD_INT 50
31566: PUSH
31567: LD_INT 51
31569: PUSH
31570: LD_INT 52
31572: PUSH
31573: LD_INT 53
31575: PUSH
31576: LD_INT 54
31578: PUSH
31579: LD_INT 55
31581: PUSH
31582: LD_INT 56
31584: PUSH
31585: LD_INT 60
31587: PUSH
31588: LD_INT 61
31590: PUSH
31591: LD_INT 62
31593: PUSH
31594: LD_INT 66
31596: PUSH
31597: LD_INT 67
31599: PUSH
31600: LD_INT 68
31602: PUSH
31603: LD_INT 81
31605: PUSH
31606: LD_INT 82
31608: PUSH
31609: LD_INT 83
31611: PUSH
31612: LD_INT 84
31614: PUSH
31615: LD_INT 85
31617: PUSH
31618: LD_INT 87
31620: PUSH
31621: LD_INT 88
31623: PUSH
31624: EMPTY
31625: LIST
31626: LIST
31627: LIST
31628: LIST
31629: LIST
31630: LIST
31631: LIST
31632: LIST
31633: LIST
31634: LIST
31635: LIST
31636: LIST
31637: LIST
31638: LIST
31639: LIST
31640: LIST
31641: LIST
31642: LIST
31643: LIST
31644: LIST
31645: LIST
31646: LIST
31647: LIST
31648: LIST
31649: LIST
31650: LIST
31651: LIST
31652: LIST
31653: LIST
31654: LIST
31655: LIST
31656: LIST
31657: LIST
31658: LIST
31659: LIST
31660: LIST
31661: LIST
31662: LIST
31663: LIST
31664: LIST
31665: LIST
31666: LIST
31667: LIST
31668: LIST
31669: LIST
31670: LIST
31671: LIST
31672: LIST
31673: LIST
31674: LIST
31675: LIST
31676: LIST
31677: LIST
31678: LIST
31679: ST_TO_ADDR
31680: GO 31913
31682: LD_INT 3
31684: DOUBLE
31685: EQUAL
31686: IFTRUE 31690
31688: GO 31912
31690: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
31691: LD_ADDR_VAR 0 4
31695: PUSH
31696: LD_INT 46
31698: PUSH
31699: LD_INT 47
31701: PUSH
31702: LD_INT 1
31704: PUSH
31705: LD_INT 2
31707: PUSH
31708: LD_INT 82
31710: PUSH
31711: LD_INT 83
31713: PUSH
31714: LD_INT 84
31716: PUSH
31717: LD_INT 85
31719: PUSH
31720: LD_INT 86
31722: PUSH
31723: LD_INT 11
31725: PUSH
31726: LD_INT 9
31728: PUSH
31729: LD_INT 20
31731: PUSH
31732: LD_INT 19
31734: PUSH
31735: LD_INT 21
31737: PUSH
31738: LD_INT 24
31740: PUSH
31741: LD_INT 22
31743: PUSH
31744: LD_INT 25
31746: PUSH
31747: LD_INT 28
31749: PUSH
31750: LD_INT 29
31752: PUSH
31753: LD_INT 30
31755: PUSH
31756: LD_INT 31
31758: PUSH
31759: LD_INT 37
31761: PUSH
31762: LD_INT 38
31764: PUSH
31765: LD_INT 32
31767: PUSH
31768: LD_INT 27
31770: PUSH
31771: LD_INT 33
31773: PUSH
31774: LD_INT 69
31776: PUSH
31777: LD_INT 39
31779: PUSH
31780: LD_INT 34
31782: PUSH
31783: LD_INT 40
31785: PUSH
31786: LD_INT 71
31788: PUSH
31789: LD_INT 23
31791: PUSH
31792: LD_INT 44
31794: PUSH
31795: LD_INT 48
31797: PUSH
31798: LD_INT 49
31800: PUSH
31801: LD_INT 50
31803: PUSH
31804: LD_INT 51
31806: PUSH
31807: LD_INT 52
31809: PUSH
31810: LD_INT 53
31812: PUSH
31813: LD_INT 54
31815: PUSH
31816: LD_INT 55
31818: PUSH
31819: LD_INT 56
31821: PUSH
31822: LD_INT 57
31824: PUSH
31825: LD_INT 58
31827: PUSH
31828: LD_INT 59
31830: PUSH
31831: LD_INT 63
31833: PUSH
31834: LD_INT 64
31836: PUSH
31837: LD_INT 65
31839: PUSH
31840: LD_INT 82
31842: PUSH
31843: LD_INT 83
31845: PUSH
31846: LD_INT 84
31848: PUSH
31849: LD_INT 85
31851: PUSH
31852: LD_INT 86
31854: PUSH
31855: EMPTY
31856: LIST
31857: LIST
31858: LIST
31859: LIST
31860: LIST
31861: LIST
31862: LIST
31863: LIST
31864: LIST
31865: LIST
31866: LIST
31867: LIST
31868: LIST
31869: LIST
31870: LIST
31871: LIST
31872: LIST
31873: LIST
31874: LIST
31875: LIST
31876: LIST
31877: LIST
31878: LIST
31879: LIST
31880: LIST
31881: LIST
31882: LIST
31883: LIST
31884: LIST
31885: LIST
31886: LIST
31887: LIST
31888: LIST
31889: LIST
31890: LIST
31891: LIST
31892: LIST
31893: LIST
31894: LIST
31895: LIST
31896: LIST
31897: LIST
31898: LIST
31899: LIST
31900: LIST
31901: LIST
31902: LIST
31903: LIST
31904: LIST
31905: LIST
31906: LIST
31907: LIST
31908: LIST
31909: ST_TO_ADDR
31910: GO 31913
31912: POP
// if state > - 1 and state < 3 then
31913: LD_VAR 0 3
31917: PUSH
31918: LD_INT 1
31920: NEG
31921: GREATER
31922: PUSH
31923: LD_VAR 0 3
31927: PUSH
31928: LD_INT 3
31930: LESS
31931: AND
31932: IFFALSE 31989
// for i in result do
31934: LD_ADDR_VAR 0 5
31938: PUSH
31939: LD_VAR 0 4
31943: PUSH
31944: FOR_IN
31945: IFFALSE 31987
// if GetTech ( i , side ) <> state then
31947: LD_VAR 0 5
31951: PPUSH
31952: LD_VAR 0 1
31956: PPUSH
31957: CALL_OW 321
31961: PUSH
31962: LD_VAR 0 3
31966: NONEQUAL
31967: IFFALSE 31985
// result := result diff i ;
31969: LD_ADDR_VAR 0 4
31973: PUSH
31974: LD_VAR 0 4
31978: PUSH
31979: LD_VAR 0 5
31983: DIFF
31984: ST_TO_ADDR
31985: GO 31944
31987: POP
31988: POP
// end ;
31989: LD_VAR 0 4
31993: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
31994: LD_INT 0
31996: PPUSH
31997: PPUSH
31998: PPUSH
// result := true ;
31999: LD_ADDR_VAR 0 3
32003: PUSH
32004: LD_INT 1
32006: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
32007: LD_ADDR_VAR 0 5
32011: PUSH
32012: LD_VAR 0 2
32016: PPUSH
32017: CALL_OW 480
32021: ST_TO_ADDR
// if not tmp then
32022: LD_VAR 0 5
32026: NOT
32027: IFFALSE 32031
// exit ;
32029: GO 32080
// for i in tmp do
32031: LD_ADDR_VAR 0 4
32035: PUSH
32036: LD_VAR 0 5
32040: PUSH
32041: FOR_IN
32042: IFFALSE 32078
// if GetTech ( i , side ) <> state_researched then
32044: LD_VAR 0 4
32048: PPUSH
32049: LD_VAR 0 1
32053: PPUSH
32054: CALL_OW 321
32058: PUSH
32059: LD_INT 2
32061: NONEQUAL
32062: IFFALSE 32076
// begin result := false ;
32064: LD_ADDR_VAR 0 3
32068: PUSH
32069: LD_INT 0
32071: ST_TO_ADDR
// exit ;
32072: POP
32073: POP
32074: GO 32080
// end ;
32076: GO 32041
32078: POP
32079: POP
// end ;
32080: LD_VAR 0 3
32084: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
32085: LD_INT 0
32087: PPUSH
32088: PPUSH
32089: PPUSH
32090: PPUSH
32091: PPUSH
32092: PPUSH
32093: PPUSH
32094: PPUSH
32095: PPUSH
32096: PPUSH
32097: PPUSH
32098: PPUSH
32099: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
32100: LD_VAR 0 1
32104: NOT
32105: PUSH
32106: LD_VAR 0 1
32110: PPUSH
32111: CALL_OW 257
32115: PUSH
32116: LD_INT 9
32118: NONEQUAL
32119: OR
32120: IFFALSE 32124
// exit ;
32122: GO 32697
// side := GetSide ( unit ) ;
32124: LD_ADDR_VAR 0 9
32128: PUSH
32129: LD_VAR 0 1
32133: PPUSH
32134: CALL_OW 255
32138: ST_TO_ADDR
// tech_space := tech_spacanom ;
32139: LD_ADDR_VAR 0 12
32143: PUSH
32144: LD_INT 29
32146: ST_TO_ADDR
// tech_time := tech_taurad ;
32147: LD_ADDR_VAR 0 13
32151: PUSH
32152: LD_INT 28
32154: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
32155: LD_ADDR_VAR 0 11
32159: PUSH
32160: LD_VAR 0 1
32164: PPUSH
32165: CALL_OW 310
32169: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
32170: LD_VAR 0 11
32174: PPUSH
32175: CALL_OW 247
32179: PUSH
32180: LD_INT 2
32182: EQUAL
32183: IFFALSE 32187
// exit ;
32185: GO 32697
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32187: LD_ADDR_VAR 0 8
32191: PUSH
32192: LD_INT 81
32194: PUSH
32195: LD_VAR 0 9
32199: PUSH
32200: EMPTY
32201: LIST
32202: LIST
32203: PUSH
32204: LD_INT 3
32206: PUSH
32207: LD_INT 21
32209: PUSH
32210: LD_INT 3
32212: PUSH
32213: EMPTY
32214: LIST
32215: LIST
32216: PUSH
32217: EMPTY
32218: LIST
32219: LIST
32220: PUSH
32221: EMPTY
32222: LIST
32223: LIST
32224: PPUSH
32225: CALL_OW 69
32229: ST_TO_ADDR
// if not tmp then
32230: LD_VAR 0 8
32234: NOT
32235: IFFALSE 32239
// exit ;
32237: GO 32697
// if in_unit then
32239: LD_VAR 0 11
32243: IFFALSE 32267
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
32245: LD_ADDR_VAR 0 10
32249: PUSH
32250: LD_VAR 0 8
32254: PPUSH
32255: LD_VAR 0 11
32259: PPUSH
32260: CALL_OW 74
32264: ST_TO_ADDR
32265: GO 32287
// enemy := NearestUnitToUnit ( tmp , unit ) ;
32267: LD_ADDR_VAR 0 10
32271: PUSH
32272: LD_VAR 0 8
32276: PPUSH
32277: LD_VAR 0 1
32281: PPUSH
32282: CALL_OW 74
32286: ST_TO_ADDR
// if not enemy then
32287: LD_VAR 0 10
32291: NOT
32292: IFFALSE 32296
// exit ;
32294: GO 32697
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
32296: LD_VAR 0 11
32300: PUSH
32301: LD_VAR 0 11
32305: PPUSH
32306: LD_VAR 0 10
32310: PPUSH
32311: CALL_OW 296
32315: PUSH
32316: LD_INT 13
32318: GREATER
32319: AND
32320: PUSH
32321: LD_VAR 0 1
32325: PPUSH
32326: LD_VAR 0 10
32330: PPUSH
32331: CALL_OW 296
32335: PUSH
32336: LD_INT 12
32338: GREATER
32339: OR
32340: IFFALSE 32344
// exit ;
32342: GO 32697
// missile := [ 1 ] ;
32344: LD_ADDR_VAR 0 14
32348: PUSH
32349: LD_INT 1
32351: PUSH
32352: EMPTY
32353: LIST
32354: ST_TO_ADDR
// if Researched ( side , tech_space ) then
32355: LD_VAR 0 9
32359: PPUSH
32360: LD_VAR 0 12
32364: PPUSH
32365: CALL_OW 325
32369: IFFALSE 32398
// missile := Replace ( missile , missile + 1 , 2 ) ;
32371: LD_ADDR_VAR 0 14
32375: PUSH
32376: LD_VAR 0 14
32380: PPUSH
32381: LD_VAR 0 14
32385: PUSH
32386: LD_INT 1
32388: PLUS
32389: PPUSH
32390: LD_INT 2
32392: PPUSH
32393: CALL_OW 1
32397: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
32398: LD_VAR 0 9
32402: PPUSH
32403: LD_VAR 0 13
32407: PPUSH
32408: CALL_OW 325
32412: PUSH
32413: LD_VAR 0 10
32417: PPUSH
32418: CALL_OW 255
32422: PPUSH
32423: LD_VAR 0 13
32427: PPUSH
32428: CALL_OW 325
32432: NOT
32433: AND
32434: IFFALSE 32463
// missile := Replace ( missile , missile + 1 , 3 ) ;
32436: LD_ADDR_VAR 0 14
32440: PUSH
32441: LD_VAR 0 14
32445: PPUSH
32446: LD_VAR 0 14
32450: PUSH
32451: LD_INT 1
32453: PLUS
32454: PPUSH
32455: LD_INT 3
32457: PPUSH
32458: CALL_OW 1
32462: ST_TO_ADDR
// if missile < 2 then
32463: LD_VAR 0 14
32467: PUSH
32468: LD_INT 2
32470: LESS
32471: IFFALSE 32475
// exit ;
32473: GO 32697
// x := GetX ( enemy ) ;
32475: LD_ADDR_VAR 0 4
32479: PUSH
32480: LD_VAR 0 10
32484: PPUSH
32485: CALL_OW 250
32489: ST_TO_ADDR
// y := GetY ( enemy ) ;
32490: LD_ADDR_VAR 0 5
32494: PUSH
32495: LD_VAR 0 10
32499: PPUSH
32500: CALL_OW 251
32504: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
32505: LD_ADDR_VAR 0 6
32509: PUSH
32510: LD_VAR 0 4
32514: PUSH
32515: LD_INT 1
32517: NEG
32518: PPUSH
32519: LD_INT 1
32521: PPUSH
32522: CALL_OW 12
32526: PLUS
32527: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
32528: LD_ADDR_VAR 0 7
32532: PUSH
32533: LD_VAR 0 5
32537: PUSH
32538: LD_INT 1
32540: NEG
32541: PPUSH
32542: LD_INT 1
32544: PPUSH
32545: CALL_OW 12
32549: PLUS
32550: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32551: LD_VAR 0 6
32555: PPUSH
32556: LD_VAR 0 7
32560: PPUSH
32561: CALL_OW 488
32565: NOT
32566: IFFALSE 32588
// begin _x := x ;
32568: LD_ADDR_VAR 0 6
32572: PUSH
32573: LD_VAR 0 4
32577: ST_TO_ADDR
// _y := y ;
32578: LD_ADDR_VAR 0 7
32582: PUSH
32583: LD_VAR 0 5
32587: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
32588: LD_ADDR_VAR 0 3
32592: PUSH
32593: LD_INT 1
32595: PPUSH
32596: LD_VAR 0 14
32600: PPUSH
32601: CALL_OW 12
32605: ST_TO_ADDR
// case i of 1 :
32606: LD_VAR 0 3
32610: PUSH
32611: LD_INT 1
32613: DOUBLE
32614: EQUAL
32615: IFTRUE 32619
32617: GO 32636
32619: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
32620: LD_VAR 0 1
32624: PPUSH
32625: LD_VAR 0 10
32629: PPUSH
32630: CALL_OW 115
32634: GO 32697
32636: LD_INT 2
32638: DOUBLE
32639: EQUAL
32640: IFTRUE 32644
32642: GO 32666
32644: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
32645: LD_VAR 0 1
32649: PPUSH
32650: LD_VAR 0 6
32654: PPUSH
32655: LD_VAR 0 7
32659: PPUSH
32660: CALL_OW 153
32664: GO 32697
32666: LD_INT 3
32668: DOUBLE
32669: EQUAL
32670: IFTRUE 32674
32672: GO 32696
32674: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
32675: LD_VAR 0 1
32679: PPUSH
32680: LD_VAR 0 6
32684: PPUSH
32685: LD_VAR 0 7
32689: PPUSH
32690: CALL_OW 154
32694: GO 32697
32696: POP
// end ;
32697: LD_VAR 0 2
32701: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
32702: LD_INT 0
32704: PPUSH
32705: PPUSH
32706: PPUSH
32707: PPUSH
32708: PPUSH
32709: PPUSH
// if not unit or not building then
32710: LD_VAR 0 1
32714: NOT
32715: PUSH
32716: LD_VAR 0 2
32720: NOT
32721: OR
32722: IFFALSE 32726
// exit ;
32724: GO 32884
// x := GetX ( building ) ;
32726: LD_ADDR_VAR 0 5
32730: PUSH
32731: LD_VAR 0 2
32735: PPUSH
32736: CALL_OW 250
32740: ST_TO_ADDR
// y := GetY ( building ) ;
32741: LD_ADDR_VAR 0 6
32745: PUSH
32746: LD_VAR 0 2
32750: PPUSH
32751: CALL_OW 251
32755: ST_TO_ADDR
// for i = 0 to 5 do
32756: LD_ADDR_VAR 0 4
32760: PUSH
32761: DOUBLE
32762: LD_INT 0
32764: DEC
32765: ST_TO_ADDR
32766: LD_INT 5
32768: PUSH
32769: FOR_TO
32770: IFFALSE 32882
// begin _x := ShiftX ( x , i , 3 ) ;
32772: LD_ADDR_VAR 0 7
32776: PUSH
32777: LD_VAR 0 5
32781: PPUSH
32782: LD_VAR 0 4
32786: PPUSH
32787: LD_INT 3
32789: PPUSH
32790: CALL_OW 272
32794: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
32795: LD_ADDR_VAR 0 8
32799: PUSH
32800: LD_VAR 0 6
32804: PPUSH
32805: LD_VAR 0 4
32809: PPUSH
32810: LD_INT 3
32812: PPUSH
32813: CALL_OW 273
32817: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32818: LD_VAR 0 7
32822: PPUSH
32823: LD_VAR 0 8
32827: PPUSH
32828: CALL_OW 488
32832: NOT
32833: IFFALSE 32837
// continue ;
32835: GO 32769
// if HexInfo ( _x , _y ) = 0 then
32837: LD_VAR 0 7
32841: PPUSH
32842: LD_VAR 0 8
32846: PPUSH
32847: CALL_OW 428
32851: PUSH
32852: LD_INT 0
32854: EQUAL
32855: IFFALSE 32880
// begin ComMoveXY ( unit , _x , _y ) ;
32857: LD_VAR 0 1
32861: PPUSH
32862: LD_VAR 0 7
32866: PPUSH
32867: LD_VAR 0 8
32871: PPUSH
32872: CALL_OW 111
// exit ;
32876: POP
32877: POP
32878: GO 32884
// end ; end ;
32880: GO 32769
32882: POP
32883: POP
// end ;
32884: LD_VAR 0 3
32888: RET
// export function ScanBase ( side , base_area ) ; begin
32889: LD_INT 0
32891: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
32892: LD_ADDR_VAR 0 3
32896: PUSH
32897: LD_VAR 0 2
32901: PPUSH
32902: LD_INT 81
32904: PUSH
32905: LD_VAR 0 1
32909: PUSH
32910: EMPTY
32911: LIST
32912: LIST
32913: PPUSH
32914: CALL_OW 70
32918: ST_TO_ADDR
// end ;
32919: LD_VAR 0 3
32923: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
32924: LD_INT 0
32926: PPUSH
32927: PPUSH
32928: PPUSH
32929: PPUSH
// result := false ;
32930: LD_ADDR_VAR 0 2
32934: PUSH
32935: LD_INT 0
32937: ST_TO_ADDR
// side := GetSide ( unit ) ;
32938: LD_ADDR_VAR 0 3
32942: PUSH
32943: LD_VAR 0 1
32947: PPUSH
32948: CALL_OW 255
32952: ST_TO_ADDR
// nat := GetNation ( unit ) ;
32953: LD_ADDR_VAR 0 4
32957: PUSH
32958: LD_VAR 0 1
32962: PPUSH
32963: CALL_OW 248
32967: ST_TO_ADDR
// case nat of 1 :
32968: LD_VAR 0 4
32972: PUSH
32973: LD_INT 1
32975: DOUBLE
32976: EQUAL
32977: IFTRUE 32981
32979: GO 32992
32981: POP
// tech := tech_lassight ; 2 :
32982: LD_ADDR_VAR 0 5
32986: PUSH
32987: LD_INT 12
32989: ST_TO_ADDR
32990: GO 33031
32992: LD_INT 2
32994: DOUBLE
32995: EQUAL
32996: IFTRUE 33000
32998: GO 33011
33000: POP
// tech := tech_mortar ; 3 :
33001: LD_ADDR_VAR 0 5
33005: PUSH
33006: LD_INT 41
33008: ST_TO_ADDR
33009: GO 33031
33011: LD_INT 3
33013: DOUBLE
33014: EQUAL
33015: IFTRUE 33019
33017: GO 33030
33019: POP
// tech := tech_bazooka ; end ;
33020: LD_ADDR_VAR 0 5
33024: PUSH
33025: LD_INT 44
33027: ST_TO_ADDR
33028: GO 33031
33030: POP
// if Researched ( side , tech ) then
33031: LD_VAR 0 3
33035: PPUSH
33036: LD_VAR 0 5
33040: PPUSH
33041: CALL_OW 325
33045: IFFALSE 33072
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
33047: LD_ADDR_VAR 0 2
33051: PUSH
33052: LD_INT 5
33054: PUSH
33055: LD_INT 8
33057: PUSH
33058: LD_INT 9
33060: PUSH
33061: EMPTY
33062: LIST
33063: LIST
33064: LIST
33065: PUSH
33066: LD_VAR 0 4
33070: ARRAY
33071: ST_TO_ADDR
// end ;
33072: LD_VAR 0 2
33076: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
33077: LD_INT 0
33079: PPUSH
33080: PPUSH
33081: PPUSH
// if not mines then
33082: LD_VAR 0 2
33086: NOT
33087: IFFALSE 33091
// exit ;
33089: GO 33235
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33091: LD_ADDR_VAR 0 5
33095: PUSH
33096: LD_INT 81
33098: PUSH
33099: LD_VAR 0 1
33103: PUSH
33104: EMPTY
33105: LIST
33106: LIST
33107: PUSH
33108: LD_INT 3
33110: PUSH
33111: LD_INT 21
33113: PUSH
33114: LD_INT 3
33116: PUSH
33117: EMPTY
33118: LIST
33119: LIST
33120: PUSH
33121: EMPTY
33122: LIST
33123: LIST
33124: PUSH
33125: EMPTY
33126: LIST
33127: LIST
33128: PPUSH
33129: CALL_OW 69
33133: ST_TO_ADDR
// for i in mines do
33134: LD_ADDR_VAR 0 4
33138: PUSH
33139: LD_VAR 0 2
33143: PUSH
33144: FOR_IN
33145: IFFALSE 33233
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
33147: LD_VAR 0 4
33151: PUSH
33152: LD_INT 1
33154: ARRAY
33155: PPUSH
33156: LD_VAR 0 4
33160: PUSH
33161: LD_INT 2
33163: ARRAY
33164: PPUSH
33165: CALL_OW 458
33169: NOT
33170: IFFALSE 33174
// continue ;
33172: GO 33144
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
33174: LD_VAR 0 4
33178: PUSH
33179: LD_INT 1
33181: ARRAY
33182: PPUSH
33183: LD_VAR 0 4
33187: PUSH
33188: LD_INT 2
33190: ARRAY
33191: PPUSH
33192: CALL_OW 428
33196: PUSH
33197: LD_VAR 0 5
33201: IN
33202: IFFALSE 33231
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
33204: LD_VAR 0 4
33208: PUSH
33209: LD_INT 1
33211: ARRAY
33212: PPUSH
33213: LD_VAR 0 4
33217: PUSH
33218: LD_INT 2
33220: ARRAY
33221: PPUSH
33222: LD_VAR 0 1
33226: PPUSH
33227: CALL_OW 456
// end ;
33231: GO 33144
33233: POP
33234: POP
// end ;
33235: LD_VAR 0 3
33239: RET
// export function Count ( array ) ; var i ; begin
33240: LD_INT 0
33242: PPUSH
33243: PPUSH
// result := 0 ;
33244: LD_ADDR_VAR 0 2
33248: PUSH
33249: LD_INT 0
33251: ST_TO_ADDR
// for i in array do
33252: LD_ADDR_VAR 0 3
33256: PUSH
33257: LD_VAR 0 1
33261: PUSH
33262: FOR_IN
33263: IFFALSE 33287
// if i then
33265: LD_VAR 0 3
33269: IFFALSE 33285
// result := result + 1 ;
33271: LD_ADDR_VAR 0 2
33275: PUSH
33276: LD_VAR 0 2
33280: PUSH
33281: LD_INT 1
33283: PLUS
33284: ST_TO_ADDR
33285: GO 33262
33287: POP
33288: POP
// end ;
33289: LD_VAR 0 2
33293: RET
// export function IsEmpty ( building ) ; begin
33294: LD_INT 0
33296: PPUSH
// if not building then
33297: LD_VAR 0 1
33301: NOT
33302: IFFALSE 33306
// exit ;
33304: GO 33349
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
33306: LD_ADDR_VAR 0 2
33310: PUSH
33311: LD_VAR 0 1
33315: PUSH
33316: LD_INT 22
33318: PUSH
33319: LD_VAR 0 1
33323: PPUSH
33324: CALL_OW 255
33328: PUSH
33329: EMPTY
33330: LIST
33331: LIST
33332: PUSH
33333: LD_INT 58
33335: PUSH
33336: EMPTY
33337: LIST
33338: PUSH
33339: EMPTY
33340: LIST
33341: LIST
33342: PPUSH
33343: CALL_OW 69
33347: IN
33348: ST_TO_ADDR
// end ;
33349: LD_VAR 0 2
33353: RET
// export function IsNotFull ( building ) ; var places ; begin
33354: LD_INT 0
33356: PPUSH
33357: PPUSH
// if not building then
33358: LD_VAR 0 1
33362: NOT
33363: IFFALSE 33367
// exit ;
33365: GO 33538
// result := false ;
33367: LD_ADDR_VAR 0 2
33371: PUSH
33372: LD_INT 0
33374: ST_TO_ADDR
// places := 0 ;
33375: LD_ADDR_VAR 0 3
33379: PUSH
33380: LD_INT 0
33382: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
33383: LD_VAR 0 1
33387: PPUSH
33388: CALL_OW 266
33392: PUSH
33393: LD_INT 0
33395: DOUBLE
33396: EQUAL
33397: IFTRUE 33455
33399: LD_INT 1
33401: DOUBLE
33402: EQUAL
33403: IFTRUE 33455
33405: LD_INT 6
33407: DOUBLE
33408: EQUAL
33409: IFTRUE 33455
33411: LD_INT 7
33413: DOUBLE
33414: EQUAL
33415: IFTRUE 33455
33417: LD_INT 8
33419: DOUBLE
33420: EQUAL
33421: IFTRUE 33455
33423: LD_INT 4
33425: DOUBLE
33426: EQUAL
33427: IFTRUE 33455
33429: LD_INT 5
33431: DOUBLE
33432: EQUAL
33433: IFTRUE 33455
33435: LD_INT 2
33437: DOUBLE
33438: EQUAL
33439: IFTRUE 33455
33441: LD_INT 3
33443: DOUBLE
33444: EQUAL
33445: IFTRUE 33455
33447: LD_INT 35
33449: DOUBLE
33450: EQUAL
33451: IFTRUE 33455
33453: GO 33466
33455: POP
// places := 6 ; b_bunker , b_breastwork :
33456: LD_ADDR_VAR 0 3
33460: PUSH
33461: LD_INT 6
33463: ST_TO_ADDR
33464: GO 33511
33466: LD_INT 32
33468: DOUBLE
33469: EQUAL
33470: IFTRUE 33480
33472: LD_INT 31
33474: DOUBLE
33475: EQUAL
33476: IFTRUE 33480
33478: GO 33491
33480: POP
// places := 1 ; b_control_tower :
33481: LD_ADDR_VAR 0 3
33485: PUSH
33486: LD_INT 1
33488: ST_TO_ADDR
33489: GO 33511
33491: LD_INT 36
33493: DOUBLE
33494: EQUAL
33495: IFTRUE 33499
33497: GO 33510
33499: POP
// places := 3 ; end ;
33500: LD_ADDR_VAR 0 3
33504: PUSH
33505: LD_INT 3
33507: ST_TO_ADDR
33508: GO 33511
33510: POP
// if places then
33511: LD_VAR 0 3
33515: IFFALSE 33538
// result := UnitsInside ( building ) < places ;
33517: LD_ADDR_VAR 0 2
33521: PUSH
33522: LD_VAR 0 1
33526: PPUSH
33527: CALL_OW 313
33531: PUSH
33532: LD_VAR 0 3
33536: LESS
33537: ST_TO_ADDR
// end ;
33538: LD_VAR 0 2
33542: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
33543: LD_INT 0
33545: PPUSH
33546: PPUSH
33547: PPUSH
33548: PPUSH
// tmp := [ ] ;
33549: LD_ADDR_VAR 0 3
33553: PUSH
33554: EMPTY
33555: ST_TO_ADDR
// list := [ ] ;
33556: LD_ADDR_VAR 0 5
33560: PUSH
33561: EMPTY
33562: ST_TO_ADDR
// for i = 16 to 25 do
33563: LD_ADDR_VAR 0 4
33567: PUSH
33568: DOUBLE
33569: LD_INT 16
33571: DEC
33572: ST_TO_ADDR
33573: LD_INT 25
33575: PUSH
33576: FOR_TO
33577: IFFALSE 33650
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
33579: LD_ADDR_VAR 0 3
33583: PUSH
33584: LD_VAR 0 3
33588: PUSH
33589: LD_INT 22
33591: PUSH
33592: LD_VAR 0 1
33596: PPUSH
33597: CALL_OW 255
33601: PUSH
33602: EMPTY
33603: LIST
33604: LIST
33605: PUSH
33606: LD_INT 91
33608: PUSH
33609: LD_VAR 0 1
33613: PUSH
33614: LD_INT 6
33616: PUSH
33617: EMPTY
33618: LIST
33619: LIST
33620: LIST
33621: PUSH
33622: LD_INT 30
33624: PUSH
33625: LD_VAR 0 4
33629: PUSH
33630: EMPTY
33631: LIST
33632: LIST
33633: PUSH
33634: EMPTY
33635: LIST
33636: LIST
33637: LIST
33638: PUSH
33639: EMPTY
33640: LIST
33641: PPUSH
33642: CALL_OW 69
33646: ADD
33647: ST_TO_ADDR
33648: GO 33576
33650: POP
33651: POP
// for i = 1 to tmp do
33652: LD_ADDR_VAR 0 4
33656: PUSH
33657: DOUBLE
33658: LD_INT 1
33660: DEC
33661: ST_TO_ADDR
33662: LD_VAR 0 3
33666: PUSH
33667: FOR_TO
33668: IFFALSE 33756
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
33670: LD_ADDR_VAR 0 5
33674: PUSH
33675: LD_VAR 0 5
33679: PUSH
33680: LD_VAR 0 3
33684: PUSH
33685: LD_VAR 0 4
33689: ARRAY
33690: PPUSH
33691: CALL_OW 266
33695: PUSH
33696: LD_VAR 0 3
33700: PUSH
33701: LD_VAR 0 4
33705: ARRAY
33706: PPUSH
33707: CALL_OW 250
33711: PUSH
33712: LD_VAR 0 3
33716: PUSH
33717: LD_VAR 0 4
33721: ARRAY
33722: PPUSH
33723: CALL_OW 251
33727: PUSH
33728: LD_VAR 0 3
33732: PUSH
33733: LD_VAR 0 4
33737: ARRAY
33738: PPUSH
33739: CALL_OW 254
33743: PUSH
33744: EMPTY
33745: LIST
33746: LIST
33747: LIST
33748: LIST
33749: PUSH
33750: EMPTY
33751: LIST
33752: ADD
33753: ST_TO_ADDR
33754: GO 33667
33756: POP
33757: POP
// result := list ;
33758: LD_ADDR_VAR 0 2
33762: PUSH
33763: LD_VAR 0 5
33767: ST_TO_ADDR
// end ;
33768: LD_VAR 0 2
33772: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
33773: LD_INT 0
33775: PPUSH
33776: PPUSH
33777: PPUSH
33778: PPUSH
33779: PPUSH
33780: PPUSH
33781: PPUSH
// if not factory then
33782: LD_VAR 0 1
33786: NOT
33787: IFFALSE 33791
// exit ;
33789: GO 34384
// if control = control_apeman then
33791: LD_VAR 0 4
33795: PUSH
33796: LD_INT 5
33798: EQUAL
33799: IFFALSE 33908
// begin tmp := UnitsInside ( factory ) ;
33801: LD_ADDR_VAR 0 8
33805: PUSH
33806: LD_VAR 0 1
33810: PPUSH
33811: CALL_OW 313
33815: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
33816: LD_VAR 0 8
33820: PPUSH
33821: LD_INT 25
33823: PUSH
33824: LD_INT 12
33826: PUSH
33827: EMPTY
33828: LIST
33829: LIST
33830: PPUSH
33831: CALL_OW 72
33835: NOT
33836: IFFALSE 33846
// control := control_manual ;
33838: LD_ADDR_VAR 0 4
33842: PUSH
33843: LD_INT 1
33845: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
33846: LD_ADDR_VAR 0 8
33850: PUSH
33851: LD_VAR 0 1
33855: PPUSH
33856: CALL 33543 0 1
33860: ST_TO_ADDR
// if tmp then
33861: LD_VAR 0 8
33865: IFFALSE 33908
// begin for i in tmp do
33867: LD_ADDR_VAR 0 7
33871: PUSH
33872: LD_VAR 0 8
33876: PUSH
33877: FOR_IN
33878: IFFALSE 33906
// if i [ 1 ] = b_ext_radio then
33880: LD_VAR 0 7
33884: PUSH
33885: LD_INT 1
33887: ARRAY
33888: PUSH
33889: LD_INT 22
33891: EQUAL
33892: IFFALSE 33904
// begin control := control_remote ;
33894: LD_ADDR_VAR 0 4
33898: PUSH
33899: LD_INT 2
33901: ST_TO_ADDR
// break ;
33902: GO 33906
// end ;
33904: GO 33877
33906: POP
33907: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
33908: LD_VAR 0 1
33912: PPUSH
33913: LD_VAR 0 2
33917: PPUSH
33918: LD_VAR 0 3
33922: PPUSH
33923: LD_VAR 0 4
33927: PPUSH
33928: LD_VAR 0 5
33932: PPUSH
33933: CALL_OW 448
33937: IFFALSE 33972
// begin result := [ chassis , engine , control , weapon ] ;
33939: LD_ADDR_VAR 0 6
33943: PUSH
33944: LD_VAR 0 2
33948: PUSH
33949: LD_VAR 0 3
33953: PUSH
33954: LD_VAR 0 4
33958: PUSH
33959: LD_VAR 0 5
33963: PUSH
33964: EMPTY
33965: LIST
33966: LIST
33967: LIST
33968: LIST
33969: ST_TO_ADDR
// exit ;
33970: GO 34384
// end ; _chassis := AvailableChassisList ( factory ) ;
33972: LD_ADDR_VAR 0 9
33976: PUSH
33977: LD_VAR 0 1
33981: PPUSH
33982: CALL_OW 475
33986: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
33987: LD_ADDR_VAR 0 11
33991: PUSH
33992: LD_VAR 0 1
33996: PPUSH
33997: CALL_OW 476
34001: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
34002: LD_ADDR_VAR 0 12
34006: PUSH
34007: LD_VAR 0 1
34011: PPUSH
34012: CALL_OW 477
34016: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
34017: LD_ADDR_VAR 0 10
34021: PUSH
34022: LD_VAR 0 1
34026: PPUSH
34027: CALL_OW 478
34031: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
34032: LD_VAR 0 9
34036: NOT
34037: PUSH
34038: LD_VAR 0 11
34042: NOT
34043: OR
34044: PUSH
34045: LD_VAR 0 12
34049: NOT
34050: OR
34051: PUSH
34052: LD_VAR 0 10
34056: NOT
34057: OR
34058: IFFALSE 34093
// begin result := [ chassis , engine , control , weapon ] ;
34060: LD_ADDR_VAR 0 6
34064: PUSH
34065: LD_VAR 0 2
34069: PUSH
34070: LD_VAR 0 3
34074: PUSH
34075: LD_VAR 0 4
34079: PUSH
34080: LD_VAR 0 5
34084: PUSH
34085: EMPTY
34086: LIST
34087: LIST
34088: LIST
34089: LIST
34090: ST_TO_ADDR
// exit ;
34091: GO 34384
// end ; if not chassis in _chassis then
34093: LD_VAR 0 2
34097: PUSH
34098: LD_VAR 0 9
34102: IN
34103: NOT
34104: IFFALSE 34130
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
34106: LD_ADDR_VAR 0 2
34110: PUSH
34111: LD_VAR 0 9
34115: PUSH
34116: LD_INT 1
34118: PPUSH
34119: LD_VAR 0 9
34123: PPUSH
34124: CALL_OW 12
34128: ARRAY
34129: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
34130: LD_VAR 0 2
34134: PPUSH
34135: LD_VAR 0 3
34139: PPUSH
34140: CALL 34389 0 2
34144: NOT
34145: IFFALSE 34204
// repeat engine := _engine [ 1 ] ;
34147: LD_ADDR_VAR 0 3
34151: PUSH
34152: LD_VAR 0 11
34156: PUSH
34157: LD_INT 1
34159: ARRAY
34160: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
34161: LD_ADDR_VAR 0 11
34165: PUSH
34166: LD_VAR 0 11
34170: PPUSH
34171: LD_INT 1
34173: PPUSH
34174: CALL_OW 3
34178: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
34179: LD_VAR 0 2
34183: PPUSH
34184: LD_VAR 0 3
34188: PPUSH
34189: CALL 34389 0 2
34193: PUSH
34194: LD_VAR 0 11
34198: PUSH
34199: EMPTY
34200: EQUAL
34201: OR
34202: IFFALSE 34147
// if not control in _control then
34204: LD_VAR 0 4
34208: PUSH
34209: LD_VAR 0 12
34213: IN
34214: NOT
34215: IFFALSE 34241
// control := _control [ rand ( 1 , _control ) ] ;
34217: LD_ADDR_VAR 0 4
34221: PUSH
34222: LD_VAR 0 12
34226: PUSH
34227: LD_INT 1
34229: PPUSH
34230: LD_VAR 0 12
34234: PPUSH
34235: CALL_OW 12
34239: ARRAY
34240: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
34241: LD_VAR 0 2
34245: PPUSH
34246: LD_VAR 0 5
34250: PPUSH
34251: CALL 34609 0 2
34255: NOT
34256: IFFALSE 34315
// repeat weapon := _weapon [ 1 ] ;
34258: LD_ADDR_VAR 0 5
34262: PUSH
34263: LD_VAR 0 10
34267: PUSH
34268: LD_INT 1
34270: ARRAY
34271: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
34272: LD_ADDR_VAR 0 10
34276: PUSH
34277: LD_VAR 0 10
34281: PPUSH
34282: LD_INT 1
34284: PPUSH
34285: CALL_OW 3
34289: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
34290: LD_VAR 0 2
34294: PPUSH
34295: LD_VAR 0 5
34299: PPUSH
34300: CALL 34609 0 2
34304: PUSH
34305: LD_VAR 0 10
34309: PUSH
34310: EMPTY
34311: EQUAL
34312: OR
34313: IFFALSE 34258
// result := [ ] ;
34315: LD_ADDR_VAR 0 6
34319: PUSH
34320: EMPTY
34321: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
34322: LD_VAR 0 1
34326: PPUSH
34327: LD_VAR 0 2
34331: PPUSH
34332: LD_VAR 0 3
34336: PPUSH
34337: LD_VAR 0 4
34341: PPUSH
34342: LD_VAR 0 5
34346: PPUSH
34347: CALL_OW 448
34351: IFFALSE 34384
// result := [ chassis , engine , control , weapon ] ;
34353: LD_ADDR_VAR 0 6
34357: PUSH
34358: LD_VAR 0 2
34362: PUSH
34363: LD_VAR 0 3
34367: PUSH
34368: LD_VAR 0 4
34372: PUSH
34373: LD_VAR 0 5
34377: PUSH
34378: EMPTY
34379: LIST
34380: LIST
34381: LIST
34382: LIST
34383: ST_TO_ADDR
// end ;
34384: LD_VAR 0 6
34388: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
34389: LD_INT 0
34391: PPUSH
// if not chassis or not engine then
34392: LD_VAR 0 1
34396: NOT
34397: PUSH
34398: LD_VAR 0 2
34402: NOT
34403: OR
34404: IFFALSE 34408
// exit ;
34406: GO 34604
// case engine of engine_solar :
34408: LD_VAR 0 2
34412: PUSH
34413: LD_INT 2
34415: DOUBLE
34416: EQUAL
34417: IFTRUE 34421
34419: GO 34459
34421: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
34422: LD_ADDR_VAR 0 3
34426: PUSH
34427: LD_INT 11
34429: PUSH
34430: LD_INT 12
34432: PUSH
34433: LD_INT 13
34435: PUSH
34436: LD_INT 14
34438: PUSH
34439: LD_INT 1
34441: PUSH
34442: LD_INT 2
34444: PUSH
34445: LD_INT 3
34447: PUSH
34448: EMPTY
34449: LIST
34450: LIST
34451: LIST
34452: LIST
34453: LIST
34454: LIST
34455: LIST
34456: ST_TO_ADDR
34457: GO 34588
34459: LD_INT 1
34461: DOUBLE
34462: EQUAL
34463: IFTRUE 34467
34465: GO 34529
34467: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
34468: LD_ADDR_VAR 0 3
34472: PUSH
34473: LD_INT 11
34475: PUSH
34476: LD_INT 12
34478: PUSH
34479: LD_INT 13
34481: PUSH
34482: LD_INT 14
34484: PUSH
34485: LD_INT 1
34487: PUSH
34488: LD_INT 2
34490: PUSH
34491: LD_INT 3
34493: PUSH
34494: LD_INT 4
34496: PUSH
34497: LD_INT 5
34499: PUSH
34500: LD_INT 21
34502: PUSH
34503: LD_INT 23
34505: PUSH
34506: LD_INT 22
34508: PUSH
34509: LD_INT 24
34511: PUSH
34512: EMPTY
34513: LIST
34514: LIST
34515: LIST
34516: LIST
34517: LIST
34518: LIST
34519: LIST
34520: LIST
34521: LIST
34522: LIST
34523: LIST
34524: LIST
34525: LIST
34526: ST_TO_ADDR
34527: GO 34588
34529: LD_INT 3
34531: DOUBLE
34532: EQUAL
34533: IFTRUE 34537
34535: GO 34587
34537: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
34538: LD_ADDR_VAR 0 3
34542: PUSH
34543: LD_INT 13
34545: PUSH
34546: LD_INT 14
34548: PUSH
34549: LD_INT 2
34551: PUSH
34552: LD_INT 3
34554: PUSH
34555: LD_INT 4
34557: PUSH
34558: LD_INT 5
34560: PUSH
34561: LD_INT 21
34563: PUSH
34564: LD_INT 22
34566: PUSH
34567: LD_INT 23
34569: PUSH
34570: LD_INT 24
34572: PUSH
34573: EMPTY
34574: LIST
34575: LIST
34576: LIST
34577: LIST
34578: LIST
34579: LIST
34580: LIST
34581: LIST
34582: LIST
34583: LIST
34584: ST_TO_ADDR
34585: GO 34588
34587: POP
// result := ( chassis in result ) ;
34588: LD_ADDR_VAR 0 3
34592: PUSH
34593: LD_VAR 0 1
34597: PUSH
34598: LD_VAR 0 3
34602: IN
34603: ST_TO_ADDR
// end ;
34604: LD_VAR 0 3
34608: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
34609: LD_INT 0
34611: PPUSH
// if not chassis or not weapon then
34612: LD_VAR 0 1
34616: NOT
34617: PUSH
34618: LD_VAR 0 2
34622: NOT
34623: OR
34624: IFFALSE 34628
// exit ;
34626: GO 35688
// case weapon of us_machine_gun :
34628: LD_VAR 0 2
34632: PUSH
34633: LD_INT 2
34635: DOUBLE
34636: EQUAL
34637: IFTRUE 34641
34639: GO 34671
34641: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
34642: LD_ADDR_VAR 0 3
34646: PUSH
34647: LD_INT 1
34649: PUSH
34650: LD_INT 2
34652: PUSH
34653: LD_INT 3
34655: PUSH
34656: LD_INT 4
34658: PUSH
34659: LD_INT 5
34661: PUSH
34662: EMPTY
34663: LIST
34664: LIST
34665: LIST
34666: LIST
34667: LIST
34668: ST_TO_ADDR
34669: GO 35672
34671: LD_INT 3
34673: DOUBLE
34674: EQUAL
34675: IFTRUE 34679
34677: GO 34709
34679: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
34680: LD_ADDR_VAR 0 3
34684: PUSH
34685: LD_INT 1
34687: PUSH
34688: LD_INT 2
34690: PUSH
34691: LD_INT 3
34693: PUSH
34694: LD_INT 4
34696: PUSH
34697: LD_INT 5
34699: PUSH
34700: EMPTY
34701: LIST
34702: LIST
34703: LIST
34704: LIST
34705: LIST
34706: ST_TO_ADDR
34707: GO 35672
34709: LD_INT 11
34711: DOUBLE
34712: EQUAL
34713: IFTRUE 34717
34715: GO 34747
34717: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
34718: LD_ADDR_VAR 0 3
34722: PUSH
34723: LD_INT 1
34725: PUSH
34726: LD_INT 2
34728: PUSH
34729: LD_INT 3
34731: PUSH
34732: LD_INT 4
34734: PUSH
34735: LD_INT 5
34737: PUSH
34738: EMPTY
34739: LIST
34740: LIST
34741: LIST
34742: LIST
34743: LIST
34744: ST_TO_ADDR
34745: GO 35672
34747: LD_INT 4
34749: DOUBLE
34750: EQUAL
34751: IFTRUE 34755
34753: GO 34781
34755: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
34756: LD_ADDR_VAR 0 3
34760: PUSH
34761: LD_INT 2
34763: PUSH
34764: LD_INT 3
34766: PUSH
34767: LD_INT 4
34769: PUSH
34770: LD_INT 5
34772: PUSH
34773: EMPTY
34774: LIST
34775: LIST
34776: LIST
34777: LIST
34778: ST_TO_ADDR
34779: GO 35672
34781: LD_INT 5
34783: DOUBLE
34784: EQUAL
34785: IFTRUE 34789
34787: GO 34815
34789: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
34790: LD_ADDR_VAR 0 3
34794: PUSH
34795: LD_INT 2
34797: PUSH
34798: LD_INT 3
34800: PUSH
34801: LD_INT 4
34803: PUSH
34804: LD_INT 5
34806: PUSH
34807: EMPTY
34808: LIST
34809: LIST
34810: LIST
34811: LIST
34812: ST_TO_ADDR
34813: GO 35672
34815: LD_INT 9
34817: DOUBLE
34818: EQUAL
34819: IFTRUE 34823
34821: GO 34849
34823: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
34824: LD_ADDR_VAR 0 3
34828: PUSH
34829: LD_INT 2
34831: PUSH
34832: LD_INT 3
34834: PUSH
34835: LD_INT 4
34837: PUSH
34838: LD_INT 5
34840: PUSH
34841: EMPTY
34842: LIST
34843: LIST
34844: LIST
34845: LIST
34846: ST_TO_ADDR
34847: GO 35672
34849: LD_INT 7
34851: DOUBLE
34852: EQUAL
34853: IFTRUE 34857
34855: GO 34883
34857: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
34858: LD_ADDR_VAR 0 3
34862: PUSH
34863: LD_INT 2
34865: PUSH
34866: LD_INT 3
34868: PUSH
34869: LD_INT 4
34871: PUSH
34872: LD_INT 5
34874: PUSH
34875: EMPTY
34876: LIST
34877: LIST
34878: LIST
34879: LIST
34880: ST_TO_ADDR
34881: GO 35672
34883: LD_INT 12
34885: DOUBLE
34886: EQUAL
34887: IFTRUE 34891
34889: GO 34917
34891: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
34892: LD_ADDR_VAR 0 3
34896: PUSH
34897: LD_INT 2
34899: PUSH
34900: LD_INT 3
34902: PUSH
34903: LD_INT 4
34905: PUSH
34906: LD_INT 5
34908: PUSH
34909: EMPTY
34910: LIST
34911: LIST
34912: LIST
34913: LIST
34914: ST_TO_ADDR
34915: GO 35672
34917: LD_INT 13
34919: DOUBLE
34920: EQUAL
34921: IFTRUE 34925
34923: GO 34951
34925: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
34926: LD_ADDR_VAR 0 3
34930: PUSH
34931: LD_INT 2
34933: PUSH
34934: LD_INT 3
34936: PUSH
34937: LD_INT 4
34939: PUSH
34940: LD_INT 5
34942: PUSH
34943: EMPTY
34944: LIST
34945: LIST
34946: LIST
34947: LIST
34948: ST_TO_ADDR
34949: GO 35672
34951: LD_INT 14
34953: DOUBLE
34954: EQUAL
34955: IFTRUE 34959
34957: GO 34977
34959: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
34960: LD_ADDR_VAR 0 3
34964: PUSH
34965: LD_INT 4
34967: PUSH
34968: LD_INT 5
34970: PUSH
34971: EMPTY
34972: LIST
34973: LIST
34974: ST_TO_ADDR
34975: GO 35672
34977: LD_INT 6
34979: DOUBLE
34980: EQUAL
34981: IFTRUE 34985
34983: GO 35003
34985: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
34986: LD_ADDR_VAR 0 3
34990: PUSH
34991: LD_INT 4
34993: PUSH
34994: LD_INT 5
34996: PUSH
34997: EMPTY
34998: LIST
34999: LIST
35000: ST_TO_ADDR
35001: GO 35672
35003: LD_INT 10
35005: DOUBLE
35006: EQUAL
35007: IFTRUE 35011
35009: GO 35029
35011: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
35012: LD_ADDR_VAR 0 3
35016: PUSH
35017: LD_INT 4
35019: PUSH
35020: LD_INT 5
35022: PUSH
35023: EMPTY
35024: LIST
35025: LIST
35026: ST_TO_ADDR
35027: GO 35672
35029: LD_INT 22
35031: DOUBLE
35032: EQUAL
35033: IFTRUE 35037
35035: GO 35063
35037: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
35038: LD_ADDR_VAR 0 3
35042: PUSH
35043: LD_INT 11
35045: PUSH
35046: LD_INT 12
35048: PUSH
35049: LD_INT 13
35051: PUSH
35052: LD_INT 14
35054: PUSH
35055: EMPTY
35056: LIST
35057: LIST
35058: LIST
35059: LIST
35060: ST_TO_ADDR
35061: GO 35672
35063: LD_INT 23
35065: DOUBLE
35066: EQUAL
35067: IFTRUE 35071
35069: GO 35097
35071: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
35072: LD_ADDR_VAR 0 3
35076: PUSH
35077: LD_INT 11
35079: PUSH
35080: LD_INT 12
35082: PUSH
35083: LD_INT 13
35085: PUSH
35086: LD_INT 14
35088: PUSH
35089: EMPTY
35090: LIST
35091: LIST
35092: LIST
35093: LIST
35094: ST_TO_ADDR
35095: GO 35672
35097: LD_INT 24
35099: DOUBLE
35100: EQUAL
35101: IFTRUE 35105
35103: GO 35131
35105: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
35106: LD_ADDR_VAR 0 3
35110: PUSH
35111: LD_INT 11
35113: PUSH
35114: LD_INT 12
35116: PUSH
35117: LD_INT 13
35119: PUSH
35120: LD_INT 14
35122: PUSH
35123: EMPTY
35124: LIST
35125: LIST
35126: LIST
35127: LIST
35128: ST_TO_ADDR
35129: GO 35672
35131: LD_INT 30
35133: DOUBLE
35134: EQUAL
35135: IFTRUE 35139
35137: GO 35165
35139: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
35140: LD_ADDR_VAR 0 3
35144: PUSH
35145: LD_INT 11
35147: PUSH
35148: LD_INT 12
35150: PUSH
35151: LD_INT 13
35153: PUSH
35154: LD_INT 14
35156: PUSH
35157: EMPTY
35158: LIST
35159: LIST
35160: LIST
35161: LIST
35162: ST_TO_ADDR
35163: GO 35672
35165: LD_INT 25
35167: DOUBLE
35168: EQUAL
35169: IFTRUE 35173
35171: GO 35191
35173: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
35174: LD_ADDR_VAR 0 3
35178: PUSH
35179: LD_INT 13
35181: PUSH
35182: LD_INT 14
35184: PUSH
35185: EMPTY
35186: LIST
35187: LIST
35188: ST_TO_ADDR
35189: GO 35672
35191: LD_INT 27
35193: DOUBLE
35194: EQUAL
35195: IFTRUE 35199
35197: GO 35217
35199: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
35200: LD_ADDR_VAR 0 3
35204: PUSH
35205: LD_INT 13
35207: PUSH
35208: LD_INT 14
35210: PUSH
35211: EMPTY
35212: LIST
35213: LIST
35214: ST_TO_ADDR
35215: GO 35672
35217: LD_INT 92
35219: DOUBLE
35220: EQUAL
35221: IFTRUE 35225
35223: GO 35251
35225: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
35226: LD_ADDR_VAR 0 3
35230: PUSH
35231: LD_INT 11
35233: PUSH
35234: LD_INT 12
35236: PUSH
35237: LD_INT 13
35239: PUSH
35240: LD_INT 14
35242: PUSH
35243: EMPTY
35244: LIST
35245: LIST
35246: LIST
35247: LIST
35248: ST_TO_ADDR
35249: GO 35672
35251: LD_INT 28
35253: DOUBLE
35254: EQUAL
35255: IFTRUE 35259
35257: GO 35277
35259: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
35260: LD_ADDR_VAR 0 3
35264: PUSH
35265: LD_INT 13
35267: PUSH
35268: LD_INT 14
35270: PUSH
35271: EMPTY
35272: LIST
35273: LIST
35274: ST_TO_ADDR
35275: GO 35672
35277: LD_INT 29
35279: DOUBLE
35280: EQUAL
35281: IFTRUE 35285
35283: GO 35303
35285: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
35286: LD_ADDR_VAR 0 3
35290: PUSH
35291: LD_INT 13
35293: PUSH
35294: LD_INT 14
35296: PUSH
35297: EMPTY
35298: LIST
35299: LIST
35300: ST_TO_ADDR
35301: GO 35672
35303: LD_INT 31
35305: DOUBLE
35306: EQUAL
35307: IFTRUE 35311
35309: GO 35329
35311: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
35312: LD_ADDR_VAR 0 3
35316: PUSH
35317: LD_INT 13
35319: PUSH
35320: LD_INT 14
35322: PUSH
35323: EMPTY
35324: LIST
35325: LIST
35326: ST_TO_ADDR
35327: GO 35672
35329: LD_INT 26
35331: DOUBLE
35332: EQUAL
35333: IFTRUE 35337
35335: GO 35355
35337: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
35338: LD_ADDR_VAR 0 3
35342: PUSH
35343: LD_INT 13
35345: PUSH
35346: LD_INT 14
35348: PUSH
35349: EMPTY
35350: LIST
35351: LIST
35352: ST_TO_ADDR
35353: GO 35672
35355: LD_INT 42
35357: DOUBLE
35358: EQUAL
35359: IFTRUE 35363
35361: GO 35389
35363: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
35364: LD_ADDR_VAR 0 3
35368: PUSH
35369: LD_INT 21
35371: PUSH
35372: LD_INT 22
35374: PUSH
35375: LD_INT 23
35377: PUSH
35378: LD_INT 24
35380: PUSH
35381: EMPTY
35382: LIST
35383: LIST
35384: LIST
35385: LIST
35386: ST_TO_ADDR
35387: GO 35672
35389: LD_INT 43
35391: DOUBLE
35392: EQUAL
35393: IFTRUE 35397
35395: GO 35423
35397: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
35398: LD_ADDR_VAR 0 3
35402: PUSH
35403: LD_INT 21
35405: PUSH
35406: LD_INT 22
35408: PUSH
35409: LD_INT 23
35411: PUSH
35412: LD_INT 24
35414: PUSH
35415: EMPTY
35416: LIST
35417: LIST
35418: LIST
35419: LIST
35420: ST_TO_ADDR
35421: GO 35672
35423: LD_INT 44
35425: DOUBLE
35426: EQUAL
35427: IFTRUE 35431
35429: GO 35457
35431: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
35432: LD_ADDR_VAR 0 3
35436: PUSH
35437: LD_INT 21
35439: PUSH
35440: LD_INT 22
35442: PUSH
35443: LD_INT 23
35445: PUSH
35446: LD_INT 24
35448: PUSH
35449: EMPTY
35450: LIST
35451: LIST
35452: LIST
35453: LIST
35454: ST_TO_ADDR
35455: GO 35672
35457: LD_INT 45
35459: DOUBLE
35460: EQUAL
35461: IFTRUE 35465
35463: GO 35491
35465: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
35466: LD_ADDR_VAR 0 3
35470: PUSH
35471: LD_INT 21
35473: PUSH
35474: LD_INT 22
35476: PUSH
35477: LD_INT 23
35479: PUSH
35480: LD_INT 24
35482: PUSH
35483: EMPTY
35484: LIST
35485: LIST
35486: LIST
35487: LIST
35488: ST_TO_ADDR
35489: GO 35672
35491: LD_INT 49
35493: DOUBLE
35494: EQUAL
35495: IFTRUE 35499
35497: GO 35525
35499: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
35500: LD_ADDR_VAR 0 3
35504: PUSH
35505: LD_INT 21
35507: PUSH
35508: LD_INT 22
35510: PUSH
35511: LD_INT 23
35513: PUSH
35514: LD_INT 24
35516: PUSH
35517: EMPTY
35518: LIST
35519: LIST
35520: LIST
35521: LIST
35522: ST_TO_ADDR
35523: GO 35672
35525: LD_INT 51
35527: DOUBLE
35528: EQUAL
35529: IFTRUE 35533
35531: GO 35559
35533: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
35534: LD_ADDR_VAR 0 3
35538: PUSH
35539: LD_INT 21
35541: PUSH
35542: LD_INT 22
35544: PUSH
35545: LD_INT 23
35547: PUSH
35548: LD_INT 24
35550: PUSH
35551: EMPTY
35552: LIST
35553: LIST
35554: LIST
35555: LIST
35556: ST_TO_ADDR
35557: GO 35672
35559: LD_INT 52
35561: DOUBLE
35562: EQUAL
35563: IFTRUE 35567
35565: GO 35593
35567: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
35568: LD_ADDR_VAR 0 3
35572: PUSH
35573: LD_INT 21
35575: PUSH
35576: LD_INT 22
35578: PUSH
35579: LD_INT 23
35581: PUSH
35582: LD_INT 24
35584: PUSH
35585: EMPTY
35586: LIST
35587: LIST
35588: LIST
35589: LIST
35590: ST_TO_ADDR
35591: GO 35672
35593: LD_INT 53
35595: DOUBLE
35596: EQUAL
35597: IFTRUE 35601
35599: GO 35619
35601: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
35602: LD_ADDR_VAR 0 3
35606: PUSH
35607: LD_INT 23
35609: PUSH
35610: LD_INT 24
35612: PUSH
35613: EMPTY
35614: LIST
35615: LIST
35616: ST_TO_ADDR
35617: GO 35672
35619: LD_INT 46
35621: DOUBLE
35622: EQUAL
35623: IFTRUE 35627
35625: GO 35645
35627: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
35628: LD_ADDR_VAR 0 3
35632: PUSH
35633: LD_INT 23
35635: PUSH
35636: LD_INT 24
35638: PUSH
35639: EMPTY
35640: LIST
35641: LIST
35642: ST_TO_ADDR
35643: GO 35672
35645: LD_INT 47
35647: DOUBLE
35648: EQUAL
35649: IFTRUE 35653
35651: GO 35671
35653: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
35654: LD_ADDR_VAR 0 3
35658: PUSH
35659: LD_INT 23
35661: PUSH
35662: LD_INT 24
35664: PUSH
35665: EMPTY
35666: LIST
35667: LIST
35668: ST_TO_ADDR
35669: GO 35672
35671: POP
// result := ( chassis in result ) ;
35672: LD_ADDR_VAR 0 3
35676: PUSH
35677: LD_VAR 0 1
35681: PUSH
35682: LD_VAR 0 3
35686: IN
35687: ST_TO_ADDR
// end ;
35688: LD_VAR 0 3
35692: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
35693: LD_INT 0
35695: PPUSH
35696: PPUSH
35697: PPUSH
35698: PPUSH
35699: PPUSH
35700: PPUSH
35701: PPUSH
// result := array ;
35702: LD_ADDR_VAR 0 5
35706: PUSH
35707: LD_VAR 0 1
35711: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
35712: LD_VAR 0 1
35716: NOT
35717: PUSH
35718: LD_VAR 0 2
35722: NOT
35723: OR
35724: PUSH
35725: LD_VAR 0 3
35729: NOT
35730: OR
35731: PUSH
35732: LD_VAR 0 2
35736: PUSH
35737: LD_VAR 0 1
35741: GREATER
35742: OR
35743: PUSH
35744: LD_VAR 0 3
35748: PUSH
35749: LD_VAR 0 1
35753: GREATER
35754: OR
35755: IFFALSE 35759
// exit ;
35757: GO 36055
// if direction then
35759: LD_VAR 0 4
35763: IFFALSE 35827
// begin d := 1 ;
35765: LD_ADDR_VAR 0 9
35769: PUSH
35770: LD_INT 1
35772: ST_TO_ADDR
// if i_from > i_to then
35773: LD_VAR 0 2
35777: PUSH
35778: LD_VAR 0 3
35782: GREATER
35783: IFFALSE 35809
// length := ( array - i_from ) + i_to else
35785: LD_ADDR_VAR 0 11
35789: PUSH
35790: LD_VAR 0 1
35794: PUSH
35795: LD_VAR 0 2
35799: MINUS
35800: PUSH
35801: LD_VAR 0 3
35805: PLUS
35806: ST_TO_ADDR
35807: GO 35825
// length := i_to - i_from ;
35809: LD_ADDR_VAR 0 11
35813: PUSH
35814: LD_VAR 0 3
35818: PUSH
35819: LD_VAR 0 2
35823: MINUS
35824: ST_TO_ADDR
// end else
35825: GO 35888
// begin d := - 1 ;
35827: LD_ADDR_VAR 0 9
35831: PUSH
35832: LD_INT 1
35834: NEG
35835: ST_TO_ADDR
// if i_from > i_to then
35836: LD_VAR 0 2
35840: PUSH
35841: LD_VAR 0 3
35845: GREATER
35846: IFFALSE 35866
// length := i_from - i_to else
35848: LD_ADDR_VAR 0 11
35852: PUSH
35853: LD_VAR 0 2
35857: PUSH
35858: LD_VAR 0 3
35862: MINUS
35863: ST_TO_ADDR
35864: GO 35888
// length := ( array - i_to ) + i_from ;
35866: LD_ADDR_VAR 0 11
35870: PUSH
35871: LD_VAR 0 1
35875: PUSH
35876: LD_VAR 0 3
35880: MINUS
35881: PUSH
35882: LD_VAR 0 2
35886: PLUS
35887: ST_TO_ADDR
// end ; if not length then
35888: LD_VAR 0 11
35892: NOT
35893: IFFALSE 35897
// exit ;
35895: GO 36055
// tmp := array ;
35897: LD_ADDR_VAR 0 10
35901: PUSH
35902: LD_VAR 0 1
35906: ST_TO_ADDR
// for i = 1 to length do
35907: LD_ADDR_VAR 0 6
35911: PUSH
35912: DOUBLE
35913: LD_INT 1
35915: DEC
35916: ST_TO_ADDR
35917: LD_VAR 0 11
35921: PUSH
35922: FOR_TO
35923: IFFALSE 36043
// begin for j = 1 to array do
35925: LD_ADDR_VAR 0 7
35929: PUSH
35930: DOUBLE
35931: LD_INT 1
35933: DEC
35934: ST_TO_ADDR
35935: LD_VAR 0 1
35939: PUSH
35940: FOR_TO
35941: IFFALSE 36029
// begin k := j + d ;
35943: LD_ADDR_VAR 0 8
35947: PUSH
35948: LD_VAR 0 7
35952: PUSH
35953: LD_VAR 0 9
35957: PLUS
35958: ST_TO_ADDR
// if k > array then
35959: LD_VAR 0 8
35963: PUSH
35964: LD_VAR 0 1
35968: GREATER
35969: IFFALSE 35979
// k := 1 ;
35971: LD_ADDR_VAR 0 8
35975: PUSH
35976: LD_INT 1
35978: ST_TO_ADDR
// if not k then
35979: LD_VAR 0 8
35983: NOT
35984: IFFALSE 35996
// k := array ;
35986: LD_ADDR_VAR 0 8
35990: PUSH
35991: LD_VAR 0 1
35995: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
35996: LD_ADDR_VAR 0 10
36000: PUSH
36001: LD_VAR 0 10
36005: PPUSH
36006: LD_VAR 0 8
36010: PPUSH
36011: LD_VAR 0 1
36015: PUSH
36016: LD_VAR 0 7
36020: ARRAY
36021: PPUSH
36022: CALL_OW 1
36026: ST_TO_ADDR
// end ;
36027: GO 35940
36029: POP
36030: POP
// array := tmp ;
36031: LD_ADDR_VAR 0 1
36035: PUSH
36036: LD_VAR 0 10
36040: ST_TO_ADDR
// end ;
36041: GO 35922
36043: POP
36044: POP
// result := array ;
36045: LD_ADDR_VAR 0 5
36049: PUSH
36050: LD_VAR 0 1
36054: ST_TO_ADDR
// end ;
36055: LD_VAR 0 5
36059: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
36060: LD_INT 0
36062: PPUSH
36063: PPUSH
// result := 0 ;
36064: LD_ADDR_VAR 0 3
36068: PUSH
36069: LD_INT 0
36071: ST_TO_ADDR
// if not array or not value in array then
36072: LD_VAR 0 1
36076: NOT
36077: PUSH
36078: LD_VAR 0 2
36082: PUSH
36083: LD_VAR 0 1
36087: IN
36088: NOT
36089: OR
36090: IFFALSE 36094
// exit ;
36092: GO 36148
// for i = 1 to array do
36094: LD_ADDR_VAR 0 4
36098: PUSH
36099: DOUBLE
36100: LD_INT 1
36102: DEC
36103: ST_TO_ADDR
36104: LD_VAR 0 1
36108: PUSH
36109: FOR_TO
36110: IFFALSE 36146
// if value = array [ i ] then
36112: LD_VAR 0 2
36116: PUSH
36117: LD_VAR 0 1
36121: PUSH
36122: LD_VAR 0 4
36126: ARRAY
36127: EQUAL
36128: IFFALSE 36144
// begin result := i ;
36130: LD_ADDR_VAR 0 3
36134: PUSH
36135: LD_VAR 0 4
36139: ST_TO_ADDR
// exit ;
36140: POP
36141: POP
36142: GO 36148
// end ;
36144: GO 36109
36146: POP
36147: POP
// end ;
36148: LD_VAR 0 3
36152: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
36153: LD_INT 0
36155: PPUSH
// vc_chassis := chassis ;
36156: LD_ADDR_OWVAR 37
36160: PUSH
36161: LD_VAR 0 1
36165: ST_TO_ADDR
// vc_engine := engine ;
36166: LD_ADDR_OWVAR 39
36170: PUSH
36171: LD_VAR 0 2
36175: ST_TO_ADDR
// vc_control := control ;
36176: LD_ADDR_OWVAR 38
36180: PUSH
36181: LD_VAR 0 3
36185: ST_TO_ADDR
// vc_weapon := weapon ;
36186: LD_ADDR_OWVAR 40
36190: PUSH
36191: LD_VAR 0 4
36195: ST_TO_ADDR
// vc_fuel_battery := fuel ;
36196: LD_ADDR_OWVAR 41
36200: PUSH
36201: LD_VAR 0 5
36205: ST_TO_ADDR
// end ;
36206: LD_VAR 0 6
36210: RET
// export function WantPlant ( unit ) ; var task ; begin
36211: LD_INT 0
36213: PPUSH
36214: PPUSH
// result := false ;
36215: LD_ADDR_VAR 0 2
36219: PUSH
36220: LD_INT 0
36222: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
36223: LD_ADDR_VAR 0 3
36227: PUSH
36228: LD_VAR 0 1
36232: PPUSH
36233: CALL_OW 437
36237: ST_TO_ADDR
// if task then
36238: LD_VAR 0 3
36242: IFFALSE 36270
// if task [ 1 ] [ 1 ] = p then
36244: LD_VAR 0 3
36248: PUSH
36249: LD_INT 1
36251: ARRAY
36252: PUSH
36253: LD_INT 1
36255: ARRAY
36256: PUSH
36257: LD_STRING p
36259: EQUAL
36260: IFFALSE 36270
// result := true ;
36262: LD_ADDR_VAR 0 2
36266: PUSH
36267: LD_INT 1
36269: ST_TO_ADDR
// end ;
36270: LD_VAR 0 2
36274: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
36275: LD_INT 0
36277: PPUSH
36278: PPUSH
36279: PPUSH
36280: PPUSH
// if pos < 1 then
36281: LD_VAR 0 2
36285: PUSH
36286: LD_INT 1
36288: LESS
36289: IFFALSE 36293
// exit ;
36291: GO 36596
// if pos = 1 then
36293: LD_VAR 0 2
36297: PUSH
36298: LD_INT 1
36300: EQUAL
36301: IFFALSE 36334
// result := Replace ( arr , pos [ 1 ] , value ) else
36303: LD_ADDR_VAR 0 4
36307: PUSH
36308: LD_VAR 0 1
36312: PPUSH
36313: LD_VAR 0 2
36317: PUSH
36318: LD_INT 1
36320: ARRAY
36321: PPUSH
36322: LD_VAR 0 3
36326: PPUSH
36327: CALL_OW 1
36331: ST_TO_ADDR
36332: GO 36596
// begin tmp := arr ;
36334: LD_ADDR_VAR 0 6
36338: PUSH
36339: LD_VAR 0 1
36343: ST_TO_ADDR
// s_arr := [ tmp ] ;
36344: LD_ADDR_VAR 0 7
36348: PUSH
36349: LD_VAR 0 6
36353: PUSH
36354: EMPTY
36355: LIST
36356: ST_TO_ADDR
// for i = 1 to pos - 1 do
36357: LD_ADDR_VAR 0 5
36361: PUSH
36362: DOUBLE
36363: LD_INT 1
36365: DEC
36366: ST_TO_ADDR
36367: LD_VAR 0 2
36371: PUSH
36372: LD_INT 1
36374: MINUS
36375: PUSH
36376: FOR_TO
36377: IFFALSE 36422
// begin tmp := tmp [ pos [ i ] ] ;
36379: LD_ADDR_VAR 0 6
36383: PUSH
36384: LD_VAR 0 6
36388: PUSH
36389: LD_VAR 0 2
36393: PUSH
36394: LD_VAR 0 5
36398: ARRAY
36399: ARRAY
36400: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
36401: LD_ADDR_VAR 0 7
36405: PUSH
36406: LD_VAR 0 7
36410: PUSH
36411: LD_VAR 0 6
36415: PUSH
36416: EMPTY
36417: LIST
36418: ADD
36419: ST_TO_ADDR
// end ;
36420: GO 36376
36422: POP
36423: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
36424: LD_ADDR_VAR 0 6
36428: PUSH
36429: LD_VAR 0 6
36433: PPUSH
36434: LD_VAR 0 2
36438: PUSH
36439: LD_VAR 0 2
36443: ARRAY
36444: PPUSH
36445: LD_VAR 0 3
36449: PPUSH
36450: CALL_OW 1
36454: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
36455: LD_ADDR_VAR 0 7
36459: PUSH
36460: LD_VAR 0 7
36464: PPUSH
36465: LD_VAR 0 7
36469: PPUSH
36470: LD_VAR 0 6
36474: PPUSH
36475: CALL_OW 1
36479: ST_TO_ADDR
// for i = s_arr downto 2 do
36480: LD_ADDR_VAR 0 5
36484: PUSH
36485: DOUBLE
36486: LD_VAR 0 7
36490: INC
36491: ST_TO_ADDR
36492: LD_INT 2
36494: PUSH
36495: FOR_DOWNTO
36496: IFFALSE 36580
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
36498: LD_ADDR_VAR 0 6
36502: PUSH
36503: LD_VAR 0 7
36507: PUSH
36508: LD_VAR 0 5
36512: PUSH
36513: LD_INT 1
36515: MINUS
36516: ARRAY
36517: PPUSH
36518: LD_VAR 0 2
36522: PUSH
36523: LD_VAR 0 5
36527: PUSH
36528: LD_INT 1
36530: MINUS
36531: ARRAY
36532: PPUSH
36533: LD_VAR 0 7
36537: PUSH
36538: LD_VAR 0 5
36542: ARRAY
36543: PPUSH
36544: CALL_OW 1
36548: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
36549: LD_ADDR_VAR 0 7
36553: PUSH
36554: LD_VAR 0 7
36558: PPUSH
36559: LD_VAR 0 5
36563: PUSH
36564: LD_INT 1
36566: MINUS
36567: PPUSH
36568: LD_VAR 0 6
36572: PPUSH
36573: CALL_OW 1
36577: ST_TO_ADDR
// end ;
36578: GO 36495
36580: POP
36581: POP
// result := s_arr [ 1 ] ;
36582: LD_ADDR_VAR 0 4
36586: PUSH
36587: LD_VAR 0 7
36591: PUSH
36592: LD_INT 1
36594: ARRAY
36595: ST_TO_ADDR
// end ; end ;
36596: LD_VAR 0 4
36600: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
36601: LD_INT 0
36603: PPUSH
36604: PPUSH
// if not list then
36605: LD_VAR 0 1
36609: NOT
36610: IFFALSE 36614
// exit ;
36612: GO 36705
// i := list [ pos1 ] ;
36614: LD_ADDR_VAR 0 5
36618: PUSH
36619: LD_VAR 0 1
36623: PUSH
36624: LD_VAR 0 2
36628: ARRAY
36629: ST_TO_ADDR
// if not i then
36630: LD_VAR 0 5
36634: NOT
36635: IFFALSE 36639
// exit ;
36637: GO 36705
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
36639: LD_ADDR_VAR 0 1
36643: PUSH
36644: LD_VAR 0 1
36648: PPUSH
36649: LD_VAR 0 2
36653: PPUSH
36654: LD_VAR 0 1
36658: PUSH
36659: LD_VAR 0 3
36663: ARRAY
36664: PPUSH
36665: CALL_OW 1
36669: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
36670: LD_ADDR_VAR 0 1
36674: PUSH
36675: LD_VAR 0 1
36679: PPUSH
36680: LD_VAR 0 3
36684: PPUSH
36685: LD_VAR 0 5
36689: PPUSH
36690: CALL_OW 1
36694: ST_TO_ADDR
// result := list ;
36695: LD_ADDR_VAR 0 4
36699: PUSH
36700: LD_VAR 0 1
36704: ST_TO_ADDR
// end ;
36705: LD_VAR 0 4
36709: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
36710: LD_INT 0
36712: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
36713: LD_ADDR_VAR 0 5
36717: PUSH
36718: LD_VAR 0 1
36722: PPUSH
36723: CALL_OW 250
36727: PPUSH
36728: LD_VAR 0 1
36732: PPUSH
36733: CALL_OW 251
36737: PPUSH
36738: LD_VAR 0 2
36742: PPUSH
36743: LD_VAR 0 3
36747: PPUSH
36748: LD_VAR 0 4
36752: PPUSH
36753: CALL 36763 0 5
36757: ST_TO_ADDR
// end ;
36758: LD_VAR 0 5
36762: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
36763: LD_INT 0
36765: PPUSH
36766: PPUSH
36767: PPUSH
36768: PPUSH
// if not list then
36769: LD_VAR 0 3
36773: NOT
36774: IFFALSE 36778
// exit ;
36776: GO 37166
// result := [ ] ;
36778: LD_ADDR_VAR 0 6
36782: PUSH
36783: EMPTY
36784: ST_TO_ADDR
// for i in list do
36785: LD_ADDR_VAR 0 7
36789: PUSH
36790: LD_VAR 0 3
36794: PUSH
36795: FOR_IN
36796: IFFALSE 36998
// begin tmp := GetDistUnitXY ( i , x , y ) ;
36798: LD_ADDR_VAR 0 9
36802: PUSH
36803: LD_VAR 0 7
36807: PPUSH
36808: LD_VAR 0 1
36812: PPUSH
36813: LD_VAR 0 2
36817: PPUSH
36818: CALL_OW 297
36822: ST_TO_ADDR
// if not result then
36823: LD_VAR 0 6
36827: NOT
36828: IFFALSE 36854
// result := [ [ i , tmp ] ] else
36830: LD_ADDR_VAR 0 6
36834: PUSH
36835: LD_VAR 0 7
36839: PUSH
36840: LD_VAR 0 9
36844: PUSH
36845: EMPTY
36846: LIST
36847: LIST
36848: PUSH
36849: EMPTY
36850: LIST
36851: ST_TO_ADDR
36852: GO 36996
// begin if result [ result ] [ 2 ] < tmp then
36854: LD_VAR 0 6
36858: PUSH
36859: LD_VAR 0 6
36863: ARRAY
36864: PUSH
36865: LD_INT 2
36867: ARRAY
36868: PUSH
36869: LD_VAR 0 9
36873: LESS
36874: IFFALSE 36916
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
36876: LD_ADDR_VAR 0 6
36880: PUSH
36881: LD_VAR 0 6
36885: PPUSH
36886: LD_VAR 0 6
36890: PUSH
36891: LD_INT 1
36893: PLUS
36894: PPUSH
36895: LD_VAR 0 7
36899: PUSH
36900: LD_VAR 0 9
36904: PUSH
36905: EMPTY
36906: LIST
36907: LIST
36908: PPUSH
36909: CALL_OW 2
36913: ST_TO_ADDR
36914: GO 36996
// for j = 1 to result do
36916: LD_ADDR_VAR 0 8
36920: PUSH
36921: DOUBLE
36922: LD_INT 1
36924: DEC
36925: ST_TO_ADDR
36926: LD_VAR 0 6
36930: PUSH
36931: FOR_TO
36932: IFFALSE 36994
// begin if tmp < result [ j ] [ 2 ] then
36934: LD_VAR 0 9
36938: PUSH
36939: LD_VAR 0 6
36943: PUSH
36944: LD_VAR 0 8
36948: ARRAY
36949: PUSH
36950: LD_INT 2
36952: ARRAY
36953: LESS
36954: IFFALSE 36992
// begin result := Insert ( result , j , [ i , tmp ] ) ;
36956: LD_ADDR_VAR 0 6
36960: PUSH
36961: LD_VAR 0 6
36965: PPUSH
36966: LD_VAR 0 8
36970: PPUSH
36971: LD_VAR 0 7
36975: PUSH
36976: LD_VAR 0 9
36980: PUSH
36981: EMPTY
36982: LIST
36983: LIST
36984: PPUSH
36985: CALL_OW 2
36989: ST_TO_ADDR
// break ;
36990: GO 36994
// end ; end ;
36992: GO 36931
36994: POP
36995: POP
// end ; end ;
36996: GO 36795
36998: POP
36999: POP
// if result and not asc then
37000: LD_VAR 0 6
37004: PUSH
37005: LD_VAR 0 4
37009: NOT
37010: AND
37011: IFFALSE 37086
// begin tmp := result ;
37013: LD_ADDR_VAR 0 9
37017: PUSH
37018: LD_VAR 0 6
37022: ST_TO_ADDR
// for i = tmp downto 1 do
37023: LD_ADDR_VAR 0 7
37027: PUSH
37028: DOUBLE
37029: LD_VAR 0 9
37033: INC
37034: ST_TO_ADDR
37035: LD_INT 1
37037: PUSH
37038: FOR_DOWNTO
37039: IFFALSE 37084
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
37041: LD_ADDR_VAR 0 6
37045: PUSH
37046: LD_VAR 0 6
37050: PPUSH
37051: LD_VAR 0 9
37055: PUSH
37056: LD_VAR 0 7
37060: MINUS
37061: PUSH
37062: LD_INT 1
37064: PLUS
37065: PPUSH
37066: LD_VAR 0 9
37070: PUSH
37071: LD_VAR 0 7
37075: ARRAY
37076: PPUSH
37077: CALL_OW 1
37081: ST_TO_ADDR
37082: GO 37038
37084: POP
37085: POP
// end ; tmp := [ ] ;
37086: LD_ADDR_VAR 0 9
37090: PUSH
37091: EMPTY
37092: ST_TO_ADDR
// if mode then
37093: LD_VAR 0 5
37097: IFFALSE 37166
// begin for i = 1 to result do
37099: LD_ADDR_VAR 0 7
37103: PUSH
37104: DOUBLE
37105: LD_INT 1
37107: DEC
37108: ST_TO_ADDR
37109: LD_VAR 0 6
37113: PUSH
37114: FOR_TO
37115: IFFALSE 37154
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
37117: LD_ADDR_VAR 0 9
37121: PUSH
37122: LD_VAR 0 9
37126: PPUSH
37127: LD_VAR 0 7
37131: PPUSH
37132: LD_VAR 0 6
37136: PUSH
37137: LD_VAR 0 7
37141: ARRAY
37142: PUSH
37143: LD_INT 1
37145: ARRAY
37146: PPUSH
37147: CALL_OW 1
37151: ST_TO_ADDR
37152: GO 37114
37154: POP
37155: POP
// result := tmp ;
37156: LD_ADDR_VAR 0 6
37160: PUSH
37161: LD_VAR 0 9
37165: ST_TO_ADDR
// end ; end ;
37166: LD_VAR 0 6
37170: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
37171: LD_INT 0
37173: PPUSH
37174: PPUSH
37175: PPUSH
37176: PPUSH
37177: PPUSH
37178: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
37179: LD_ADDR_VAR 0 5
37183: PUSH
37184: LD_INT 0
37186: PUSH
37187: LD_INT 0
37189: PUSH
37190: LD_INT 0
37192: PUSH
37193: EMPTY
37194: PUSH
37195: EMPTY
37196: LIST
37197: LIST
37198: LIST
37199: LIST
37200: ST_TO_ADDR
// if not x or not y then
37201: LD_VAR 0 2
37205: NOT
37206: PUSH
37207: LD_VAR 0 3
37211: NOT
37212: OR
37213: IFFALSE 37217
// exit ;
37215: GO 38867
// if not range then
37217: LD_VAR 0 4
37221: NOT
37222: IFFALSE 37232
// range := 10 ;
37224: LD_ADDR_VAR 0 4
37228: PUSH
37229: LD_INT 10
37231: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37232: LD_ADDR_VAR 0 8
37236: PUSH
37237: LD_INT 81
37239: PUSH
37240: LD_VAR 0 1
37244: PUSH
37245: EMPTY
37246: LIST
37247: LIST
37248: PUSH
37249: LD_INT 92
37251: PUSH
37252: LD_VAR 0 2
37256: PUSH
37257: LD_VAR 0 3
37261: PUSH
37262: LD_VAR 0 4
37266: PUSH
37267: EMPTY
37268: LIST
37269: LIST
37270: LIST
37271: LIST
37272: PUSH
37273: LD_INT 3
37275: PUSH
37276: LD_INT 21
37278: PUSH
37279: LD_INT 3
37281: PUSH
37282: EMPTY
37283: LIST
37284: LIST
37285: PUSH
37286: EMPTY
37287: LIST
37288: LIST
37289: PUSH
37290: EMPTY
37291: LIST
37292: LIST
37293: LIST
37294: PPUSH
37295: CALL_OW 69
37299: ST_TO_ADDR
// if not tmp then
37300: LD_VAR 0 8
37304: NOT
37305: IFFALSE 37309
// exit ;
37307: GO 38867
// for i in tmp do
37309: LD_ADDR_VAR 0 6
37313: PUSH
37314: LD_VAR 0 8
37318: PUSH
37319: FOR_IN
37320: IFFALSE 38842
// begin points := [ 0 , 0 , 0 ] ;
37322: LD_ADDR_VAR 0 9
37326: PUSH
37327: LD_INT 0
37329: PUSH
37330: LD_INT 0
37332: PUSH
37333: LD_INT 0
37335: PUSH
37336: EMPTY
37337: LIST
37338: LIST
37339: LIST
37340: ST_TO_ADDR
// bpoints := 1 ;
37341: LD_ADDR_VAR 0 10
37345: PUSH
37346: LD_INT 1
37348: ST_TO_ADDR
// case GetType ( i ) of unit_human :
37349: LD_VAR 0 6
37353: PPUSH
37354: CALL_OW 247
37358: PUSH
37359: LD_INT 1
37361: DOUBLE
37362: EQUAL
37363: IFTRUE 37367
37365: GO 37945
37367: POP
// begin if GetClass ( i ) = 1 then
37368: LD_VAR 0 6
37372: PPUSH
37373: CALL_OW 257
37377: PUSH
37378: LD_INT 1
37380: EQUAL
37381: IFFALSE 37402
// points := [ 10 , 5 , 3 ] ;
37383: LD_ADDR_VAR 0 9
37387: PUSH
37388: LD_INT 10
37390: PUSH
37391: LD_INT 5
37393: PUSH
37394: LD_INT 3
37396: PUSH
37397: EMPTY
37398: LIST
37399: LIST
37400: LIST
37401: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
37402: LD_VAR 0 6
37406: PPUSH
37407: CALL_OW 257
37411: PUSH
37412: LD_INT 2
37414: PUSH
37415: LD_INT 3
37417: PUSH
37418: LD_INT 4
37420: PUSH
37421: EMPTY
37422: LIST
37423: LIST
37424: LIST
37425: IN
37426: IFFALSE 37447
// points := [ 3 , 2 , 1 ] ;
37428: LD_ADDR_VAR 0 9
37432: PUSH
37433: LD_INT 3
37435: PUSH
37436: LD_INT 2
37438: PUSH
37439: LD_INT 1
37441: PUSH
37442: EMPTY
37443: LIST
37444: LIST
37445: LIST
37446: ST_TO_ADDR
// if GetClass ( i ) = 5 then
37447: LD_VAR 0 6
37451: PPUSH
37452: CALL_OW 257
37456: PUSH
37457: LD_INT 5
37459: EQUAL
37460: IFFALSE 37481
// points := [ 130 , 5 , 2 ] ;
37462: LD_ADDR_VAR 0 9
37466: PUSH
37467: LD_INT 130
37469: PUSH
37470: LD_INT 5
37472: PUSH
37473: LD_INT 2
37475: PUSH
37476: EMPTY
37477: LIST
37478: LIST
37479: LIST
37480: ST_TO_ADDR
// if GetClass ( i ) = 8 then
37481: LD_VAR 0 6
37485: PPUSH
37486: CALL_OW 257
37490: PUSH
37491: LD_INT 8
37493: EQUAL
37494: IFFALSE 37515
// points := [ 35 , 35 , 30 ] ;
37496: LD_ADDR_VAR 0 9
37500: PUSH
37501: LD_INT 35
37503: PUSH
37504: LD_INT 35
37506: PUSH
37507: LD_INT 30
37509: PUSH
37510: EMPTY
37511: LIST
37512: LIST
37513: LIST
37514: ST_TO_ADDR
// if GetClass ( i ) = 9 then
37515: LD_VAR 0 6
37519: PPUSH
37520: CALL_OW 257
37524: PUSH
37525: LD_INT 9
37527: EQUAL
37528: IFFALSE 37549
// points := [ 20 , 55 , 40 ] ;
37530: LD_ADDR_VAR 0 9
37534: PUSH
37535: LD_INT 20
37537: PUSH
37538: LD_INT 55
37540: PUSH
37541: LD_INT 40
37543: PUSH
37544: EMPTY
37545: LIST
37546: LIST
37547: LIST
37548: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
37549: LD_VAR 0 6
37553: PPUSH
37554: CALL_OW 257
37558: PUSH
37559: LD_INT 12
37561: PUSH
37562: LD_INT 16
37564: PUSH
37565: EMPTY
37566: LIST
37567: LIST
37568: IN
37569: IFFALSE 37590
// points := [ 5 , 3 , 2 ] ;
37571: LD_ADDR_VAR 0 9
37575: PUSH
37576: LD_INT 5
37578: PUSH
37579: LD_INT 3
37581: PUSH
37582: LD_INT 2
37584: PUSH
37585: EMPTY
37586: LIST
37587: LIST
37588: LIST
37589: ST_TO_ADDR
// if GetClass ( i ) = 17 then
37590: LD_VAR 0 6
37594: PPUSH
37595: CALL_OW 257
37599: PUSH
37600: LD_INT 17
37602: EQUAL
37603: IFFALSE 37624
// points := [ 100 , 50 , 75 ] ;
37605: LD_ADDR_VAR 0 9
37609: PUSH
37610: LD_INT 100
37612: PUSH
37613: LD_INT 50
37615: PUSH
37616: LD_INT 75
37618: PUSH
37619: EMPTY
37620: LIST
37621: LIST
37622: LIST
37623: ST_TO_ADDR
// if GetClass ( i ) = 15 then
37624: LD_VAR 0 6
37628: PPUSH
37629: CALL_OW 257
37633: PUSH
37634: LD_INT 15
37636: EQUAL
37637: IFFALSE 37658
// points := [ 10 , 5 , 3 ] ;
37639: LD_ADDR_VAR 0 9
37643: PUSH
37644: LD_INT 10
37646: PUSH
37647: LD_INT 5
37649: PUSH
37650: LD_INT 3
37652: PUSH
37653: EMPTY
37654: LIST
37655: LIST
37656: LIST
37657: ST_TO_ADDR
// if GetClass ( i ) = 14 then
37658: LD_VAR 0 6
37662: PPUSH
37663: CALL_OW 257
37667: PUSH
37668: LD_INT 14
37670: EQUAL
37671: IFFALSE 37692
// points := [ 10 , 0 , 0 ] ;
37673: LD_ADDR_VAR 0 9
37677: PUSH
37678: LD_INT 10
37680: PUSH
37681: LD_INT 0
37683: PUSH
37684: LD_INT 0
37686: PUSH
37687: EMPTY
37688: LIST
37689: LIST
37690: LIST
37691: ST_TO_ADDR
// if GetClass ( i ) = 11 then
37692: LD_VAR 0 6
37696: PPUSH
37697: CALL_OW 257
37701: PUSH
37702: LD_INT 11
37704: EQUAL
37705: IFFALSE 37726
// points := [ 30 , 10 , 5 ] ;
37707: LD_ADDR_VAR 0 9
37711: PUSH
37712: LD_INT 30
37714: PUSH
37715: LD_INT 10
37717: PUSH
37718: LD_INT 5
37720: PUSH
37721: EMPTY
37722: LIST
37723: LIST
37724: LIST
37725: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
37726: LD_VAR 0 1
37730: PPUSH
37731: LD_INT 5
37733: PPUSH
37734: CALL_OW 321
37738: PUSH
37739: LD_INT 2
37741: EQUAL
37742: IFFALSE 37759
// bpoints := bpoints * 1.8 ;
37744: LD_ADDR_VAR 0 10
37748: PUSH
37749: LD_VAR 0 10
37753: PUSH
37754: LD_REAL  1.80000000000000E+0000
37757: MUL
37758: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
37759: LD_VAR 0 6
37763: PPUSH
37764: CALL_OW 257
37768: PUSH
37769: LD_INT 1
37771: PUSH
37772: LD_INT 2
37774: PUSH
37775: LD_INT 3
37777: PUSH
37778: LD_INT 4
37780: PUSH
37781: EMPTY
37782: LIST
37783: LIST
37784: LIST
37785: LIST
37786: IN
37787: PUSH
37788: LD_VAR 0 1
37792: PPUSH
37793: LD_INT 51
37795: PPUSH
37796: CALL_OW 321
37800: PUSH
37801: LD_INT 2
37803: EQUAL
37804: AND
37805: IFFALSE 37822
// bpoints := bpoints * 1.2 ;
37807: LD_ADDR_VAR 0 10
37811: PUSH
37812: LD_VAR 0 10
37816: PUSH
37817: LD_REAL  1.20000000000000E+0000
37820: MUL
37821: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
37822: LD_VAR 0 6
37826: PPUSH
37827: CALL_OW 257
37831: PUSH
37832: LD_INT 5
37834: PUSH
37835: LD_INT 7
37837: PUSH
37838: LD_INT 9
37840: PUSH
37841: EMPTY
37842: LIST
37843: LIST
37844: LIST
37845: IN
37846: PUSH
37847: LD_VAR 0 1
37851: PPUSH
37852: LD_INT 52
37854: PPUSH
37855: CALL_OW 321
37859: PUSH
37860: LD_INT 2
37862: EQUAL
37863: AND
37864: IFFALSE 37881
// bpoints := bpoints * 1.5 ;
37866: LD_ADDR_VAR 0 10
37870: PUSH
37871: LD_VAR 0 10
37875: PUSH
37876: LD_REAL  1.50000000000000E+0000
37879: MUL
37880: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
37881: LD_VAR 0 1
37885: PPUSH
37886: LD_INT 66
37888: PPUSH
37889: CALL_OW 321
37893: PUSH
37894: LD_INT 2
37896: EQUAL
37897: IFFALSE 37914
// bpoints := bpoints * 1.1 ;
37899: LD_ADDR_VAR 0 10
37903: PUSH
37904: LD_VAR 0 10
37908: PUSH
37909: LD_REAL  1.10000000000000E+0000
37912: MUL
37913: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
37914: LD_ADDR_VAR 0 10
37918: PUSH
37919: LD_VAR 0 10
37923: PUSH
37924: LD_VAR 0 6
37928: PPUSH
37929: LD_INT 1
37931: PPUSH
37932: CALL_OW 259
37936: PUSH
37937: LD_REAL  1.15000000000000E+0000
37940: MUL
37941: MUL
37942: ST_TO_ADDR
// end ; unit_vehicle :
37943: GO 38771
37945: LD_INT 2
37947: DOUBLE
37948: EQUAL
37949: IFTRUE 37953
37951: GO 38759
37953: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
37954: LD_VAR 0 6
37958: PPUSH
37959: CALL_OW 264
37963: PUSH
37964: LD_INT 2
37966: PUSH
37967: LD_INT 42
37969: PUSH
37970: LD_INT 24
37972: PUSH
37973: EMPTY
37974: LIST
37975: LIST
37976: LIST
37977: IN
37978: IFFALSE 37999
// points := [ 25 , 5 , 3 ] ;
37980: LD_ADDR_VAR 0 9
37984: PUSH
37985: LD_INT 25
37987: PUSH
37988: LD_INT 5
37990: PUSH
37991: LD_INT 3
37993: PUSH
37994: EMPTY
37995: LIST
37996: LIST
37997: LIST
37998: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
37999: LD_VAR 0 6
38003: PPUSH
38004: CALL_OW 264
38008: PUSH
38009: LD_INT 4
38011: PUSH
38012: LD_INT 43
38014: PUSH
38015: LD_INT 25
38017: PUSH
38018: EMPTY
38019: LIST
38020: LIST
38021: LIST
38022: IN
38023: IFFALSE 38044
// points := [ 40 , 15 , 5 ] ;
38025: LD_ADDR_VAR 0 9
38029: PUSH
38030: LD_INT 40
38032: PUSH
38033: LD_INT 15
38035: PUSH
38036: LD_INT 5
38038: PUSH
38039: EMPTY
38040: LIST
38041: LIST
38042: LIST
38043: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
38044: LD_VAR 0 6
38048: PPUSH
38049: CALL_OW 264
38053: PUSH
38054: LD_INT 3
38056: PUSH
38057: LD_INT 23
38059: PUSH
38060: EMPTY
38061: LIST
38062: LIST
38063: IN
38064: IFFALSE 38085
// points := [ 7 , 25 , 8 ] ;
38066: LD_ADDR_VAR 0 9
38070: PUSH
38071: LD_INT 7
38073: PUSH
38074: LD_INT 25
38076: PUSH
38077: LD_INT 8
38079: PUSH
38080: EMPTY
38081: LIST
38082: LIST
38083: LIST
38084: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
38085: LD_VAR 0 6
38089: PPUSH
38090: CALL_OW 264
38094: PUSH
38095: LD_INT 5
38097: PUSH
38098: LD_INT 27
38100: PUSH
38101: LD_INT 44
38103: PUSH
38104: EMPTY
38105: LIST
38106: LIST
38107: LIST
38108: IN
38109: IFFALSE 38130
// points := [ 14 , 50 , 16 ] ;
38111: LD_ADDR_VAR 0 9
38115: PUSH
38116: LD_INT 14
38118: PUSH
38119: LD_INT 50
38121: PUSH
38122: LD_INT 16
38124: PUSH
38125: EMPTY
38126: LIST
38127: LIST
38128: LIST
38129: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
38130: LD_VAR 0 6
38134: PPUSH
38135: CALL_OW 264
38139: PUSH
38140: LD_INT 6
38142: PUSH
38143: LD_INT 46
38145: PUSH
38146: EMPTY
38147: LIST
38148: LIST
38149: IN
38150: IFFALSE 38171
// points := [ 32 , 120 , 70 ] ;
38152: LD_ADDR_VAR 0 9
38156: PUSH
38157: LD_INT 32
38159: PUSH
38160: LD_INT 120
38162: PUSH
38163: LD_INT 70
38165: PUSH
38166: EMPTY
38167: LIST
38168: LIST
38169: LIST
38170: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
38171: LD_VAR 0 6
38175: PPUSH
38176: CALL_OW 264
38180: PUSH
38181: LD_INT 7
38183: PUSH
38184: LD_INT 28
38186: PUSH
38187: LD_INT 45
38189: PUSH
38190: LD_INT 92
38192: PUSH
38193: EMPTY
38194: LIST
38195: LIST
38196: LIST
38197: LIST
38198: IN
38199: IFFALSE 38220
// points := [ 35 , 20 , 45 ] ;
38201: LD_ADDR_VAR 0 9
38205: PUSH
38206: LD_INT 35
38208: PUSH
38209: LD_INT 20
38211: PUSH
38212: LD_INT 45
38214: PUSH
38215: EMPTY
38216: LIST
38217: LIST
38218: LIST
38219: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
38220: LD_VAR 0 6
38224: PPUSH
38225: CALL_OW 264
38229: PUSH
38230: LD_INT 47
38232: PUSH
38233: EMPTY
38234: LIST
38235: IN
38236: IFFALSE 38257
// points := [ 67 , 45 , 75 ] ;
38238: LD_ADDR_VAR 0 9
38242: PUSH
38243: LD_INT 67
38245: PUSH
38246: LD_INT 45
38248: PUSH
38249: LD_INT 75
38251: PUSH
38252: EMPTY
38253: LIST
38254: LIST
38255: LIST
38256: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
38257: LD_VAR 0 6
38261: PPUSH
38262: CALL_OW 264
38266: PUSH
38267: LD_INT 26
38269: PUSH
38270: EMPTY
38271: LIST
38272: IN
38273: IFFALSE 38294
// points := [ 120 , 30 , 80 ] ;
38275: LD_ADDR_VAR 0 9
38279: PUSH
38280: LD_INT 120
38282: PUSH
38283: LD_INT 30
38285: PUSH
38286: LD_INT 80
38288: PUSH
38289: EMPTY
38290: LIST
38291: LIST
38292: LIST
38293: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
38294: LD_VAR 0 6
38298: PPUSH
38299: CALL_OW 264
38303: PUSH
38304: LD_INT 22
38306: PUSH
38307: EMPTY
38308: LIST
38309: IN
38310: IFFALSE 38331
// points := [ 40 , 1 , 1 ] ;
38312: LD_ADDR_VAR 0 9
38316: PUSH
38317: LD_INT 40
38319: PUSH
38320: LD_INT 1
38322: PUSH
38323: LD_INT 1
38325: PUSH
38326: EMPTY
38327: LIST
38328: LIST
38329: LIST
38330: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
38331: LD_VAR 0 6
38335: PPUSH
38336: CALL_OW 264
38340: PUSH
38341: LD_INT 29
38343: PUSH
38344: EMPTY
38345: LIST
38346: IN
38347: IFFALSE 38368
// points := [ 70 , 200 , 400 ] ;
38349: LD_ADDR_VAR 0 9
38353: PUSH
38354: LD_INT 70
38356: PUSH
38357: LD_INT 200
38359: PUSH
38360: LD_INT 400
38362: PUSH
38363: EMPTY
38364: LIST
38365: LIST
38366: LIST
38367: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
38368: LD_VAR 0 6
38372: PPUSH
38373: CALL_OW 264
38377: PUSH
38378: LD_INT 14
38380: PUSH
38381: LD_INT 53
38383: PUSH
38384: EMPTY
38385: LIST
38386: LIST
38387: IN
38388: IFFALSE 38409
// points := [ 40 , 10 , 20 ] ;
38390: LD_ADDR_VAR 0 9
38394: PUSH
38395: LD_INT 40
38397: PUSH
38398: LD_INT 10
38400: PUSH
38401: LD_INT 20
38403: PUSH
38404: EMPTY
38405: LIST
38406: LIST
38407: LIST
38408: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
38409: LD_VAR 0 6
38413: PPUSH
38414: CALL_OW 264
38418: PUSH
38419: LD_INT 9
38421: PUSH
38422: EMPTY
38423: LIST
38424: IN
38425: IFFALSE 38446
// points := [ 5 , 70 , 20 ] ;
38427: LD_ADDR_VAR 0 9
38431: PUSH
38432: LD_INT 5
38434: PUSH
38435: LD_INT 70
38437: PUSH
38438: LD_INT 20
38440: PUSH
38441: EMPTY
38442: LIST
38443: LIST
38444: LIST
38445: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
38446: LD_VAR 0 6
38450: PPUSH
38451: CALL_OW 264
38455: PUSH
38456: LD_INT 10
38458: PUSH
38459: EMPTY
38460: LIST
38461: IN
38462: IFFALSE 38483
// points := [ 35 , 110 , 70 ] ;
38464: LD_ADDR_VAR 0 9
38468: PUSH
38469: LD_INT 35
38471: PUSH
38472: LD_INT 110
38474: PUSH
38475: LD_INT 70
38477: PUSH
38478: EMPTY
38479: LIST
38480: LIST
38481: LIST
38482: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
38483: LD_VAR 0 6
38487: PPUSH
38488: CALL_OW 265
38492: PUSH
38493: LD_INT 25
38495: EQUAL
38496: IFFALSE 38517
// points := [ 80 , 65 , 100 ] ;
38498: LD_ADDR_VAR 0 9
38502: PUSH
38503: LD_INT 80
38505: PUSH
38506: LD_INT 65
38508: PUSH
38509: LD_INT 100
38511: PUSH
38512: EMPTY
38513: LIST
38514: LIST
38515: LIST
38516: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
38517: LD_VAR 0 6
38521: PPUSH
38522: CALL_OW 263
38526: PUSH
38527: LD_INT 1
38529: EQUAL
38530: IFFALSE 38565
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
38532: LD_ADDR_VAR 0 10
38536: PUSH
38537: LD_VAR 0 10
38541: PUSH
38542: LD_VAR 0 6
38546: PPUSH
38547: CALL_OW 311
38551: PPUSH
38552: LD_INT 3
38554: PPUSH
38555: CALL_OW 259
38559: PUSH
38560: LD_INT 4
38562: MUL
38563: MUL
38564: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
38565: LD_VAR 0 6
38569: PPUSH
38570: CALL_OW 263
38574: PUSH
38575: LD_INT 2
38577: EQUAL
38578: IFFALSE 38629
// begin j := IsControledBy ( i ) ;
38580: LD_ADDR_VAR 0 7
38584: PUSH
38585: LD_VAR 0 6
38589: PPUSH
38590: CALL_OW 312
38594: ST_TO_ADDR
// if j then
38595: LD_VAR 0 7
38599: IFFALSE 38629
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
38601: LD_ADDR_VAR 0 10
38605: PUSH
38606: LD_VAR 0 10
38610: PUSH
38611: LD_VAR 0 7
38615: PPUSH
38616: LD_INT 3
38618: PPUSH
38619: CALL_OW 259
38623: PUSH
38624: LD_INT 3
38626: MUL
38627: MUL
38628: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
38629: LD_VAR 0 6
38633: PPUSH
38634: CALL_OW 264
38638: PUSH
38639: LD_INT 5
38641: PUSH
38642: LD_INT 6
38644: PUSH
38645: LD_INT 46
38647: PUSH
38648: LD_INT 44
38650: PUSH
38651: LD_INT 47
38653: PUSH
38654: LD_INT 45
38656: PUSH
38657: LD_INT 28
38659: PUSH
38660: LD_INT 7
38662: PUSH
38663: LD_INT 27
38665: PUSH
38666: LD_INT 29
38668: PUSH
38669: EMPTY
38670: LIST
38671: LIST
38672: LIST
38673: LIST
38674: LIST
38675: LIST
38676: LIST
38677: LIST
38678: LIST
38679: LIST
38680: IN
38681: PUSH
38682: LD_VAR 0 1
38686: PPUSH
38687: LD_INT 52
38689: PPUSH
38690: CALL_OW 321
38694: PUSH
38695: LD_INT 2
38697: EQUAL
38698: AND
38699: IFFALSE 38716
// bpoints := bpoints * 1.2 ;
38701: LD_ADDR_VAR 0 10
38705: PUSH
38706: LD_VAR 0 10
38710: PUSH
38711: LD_REAL  1.20000000000000E+0000
38714: MUL
38715: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
38716: LD_VAR 0 6
38720: PPUSH
38721: CALL_OW 264
38725: PUSH
38726: LD_INT 6
38728: PUSH
38729: LD_INT 46
38731: PUSH
38732: LD_INT 47
38734: PUSH
38735: EMPTY
38736: LIST
38737: LIST
38738: LIST
38739: IN
38740: IFFALSE 38757
// bpoints := bpoints * 1.2 ;
38742: LD_ADDR_VAR 0 10
38746: PUSH
38747: LD_VAR 0 10
38751: PUSH
38752: LD_REAL  1.20000000000000E+0000
38755: MUL
38756: ST_TO_ADDR
// end ; unit_building :
38757: GO 38771
38759: LD_INT 3
38761: DOUBLE
38762: EQUAL
38763: IFTRUE 38767
38765: GO 38770
38767: POP
// ; end ;
38768: GO 38771
38770: POP
// for j = 1 to 3 do
38771: LD_ADDR_VAR 0 7
38775: PUSH
38776: DOUBLE
38777: LD_INT 1
38779: DEC
38780: ST_TO_ADDR
38781: LD_INT 3
38783: PUSH
38784: FOR_TO
38785: IFFALSE 38838
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
38787: LD_ADDR_VAR 0 5
38791: PUSH
38792: LD_VAR 0 5
38796: PPUSH
38797: LD_VAR 0 7
38801: PPUSH
38802: LD_VAR 0 5
38806: PUSH
38807: LD_VAR 0 7
38811: ARRAY
38812: PUSH
38813: LD_VAR 0 9
38817: PUSH
38818: LD_VAR 0 7
38822: ARRAY
38823: PUSH
38824: LD_VAR 0 10
38828: MUL
38829: PLUS
38830: PPUSH
38831: CALL_OW 1
38835: ST_TO_ADDR
38836: GO 38784
38838: POP
38839: POP
// end ;
38840: GO 37319
38842: POP
38843: POP
// result := Replace ( result , 4 , tmp ) ;
38844: LD_ADDR_VAR 0 5
38848: PUSH
38849: LD_VAR 0 5
38853: PPUSH
38854: LD_INT 4
38856: PPUSH
38857: LD_VAR 0 8
38861: PPUSH
38862: CALL_OW 1
38866: ST_TO_ADDR
// end ;
38867: LD_VAR 0 5
38871: RET
// export function DangerAtRange ( unit , range ) ; begin
38872: LD_INT 0
38874: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
38875: LD_ADDR_VAR 0 3
38879: PUSH
38880: LD_VAR 0 1
38884: PPUSH
38885: CALL_OW 255
38889: PPUSH
38890: LD_VAR 0 1
38894: PPUSH
38895: CALL_OW 250
38899: PPUSH
38900: LD_VAR 0 1
38904: PPUSH
38905: CALL_OW 251
38909: PPUSH
38910: LD_VAR 0 2
38914: PPUSH
38915: CALL 37171 0 4
38919: ST_TO_ADDR
// end ;
38920: LD_VAR 0 3
38924: RET
// export function DangerInArea ( side , area ) ; begin
38925: LD_INT 0
38927: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
38928: LD_ADDR_VAR 0 3
38932: PUSH
38933: LD_VAR 0 2
38937: PPUSH
38938: LD_INT 81
38940: PUSH
38941: LD_VAR 0 1
38945: PUSH
38946: EMPTY
38947: LIST
38948: LIST
38949: PPUSH
38950: CALL_OW 70
38954: ST_TO_ADDR
// end ;
38955: LD_VAR 0 3
38959: RET
// export function IsExtension ( b ) ; begin
38960: LD_INT 0
38962: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
38963: LD_ADDR_VAR 0 2
38967: PUSH
38968: LD_VAR 0 1
38972: PUSH
38973: LD_INT 23
38975: PUSH
38976: LD_INT 20
38978: PUSH
38979: LD_INT 22
38981: PUSH
38982: LD_INT 17
38984: PUSH
38985: LD_INT 24
38987: PUSH
38988: LD_INT 21
38990: PUSH
38991: LD_INT 19
38993: PUSH
38994: LD_INT 16
38996: PUSH
38997: LD_INT 25
38999: PUSH
39000: LD_INT 18
39002: PUSH
39003: EMPTY
39004: LIST
39005: LIST
39006: LIST
39007: LIST
39008: LIST
39009: LIST
39010: LIST
39011: LIST
39012: LIST
39013: LIST
39014: IN
39015: ST_TO_ADDR
// end ;
39016: LD_VAR 0 2
39020: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
39021: LD_INT 0
39023: PPUSH
39024: PPUSH
39025: PPUSH
// result := [ ] ;
39026: LD_ADDR_VAR 0 4
39030: PUSH
39031: EMPTY
39032: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
39033: LD_ADDR_VAR 0 5
39037: PUSH
39038: LD_VAR 0 2
39042: PPUSH
39043: LD_INT 21
39045: PUSH
39046: LD_INT 3
39048: PUSH
39049: EMPTY
39050: LIST
39051: LIST
39052: PPUSH
39053: CALL_OW 70
39057: ST_TO_ADDR
// if not tmp then
39058: LD_VAR 0 5
39062: NOT
39063: IFFALSE 39067
// exit ;
39065: GO 39131
// if checkLink then
39067: LD_VAR 0 3
39071: IFFALSE 39121
// begin for i in tmp do
39073: LD_ADDR_VAR 0 6
39077: PUSH
39078: LD_VAR 0 5
39082: PUSH
39083: FOR_IN
39084: IFFALSE 39119
// if GetBase ( i ) <> base then
39086: LD_VAR 0 6
39090: PPUSH
39091: CALL_OW 274
39095: PUSH
39096: LD_VAR 0 1
39100: NONEQUAL
39101: IFFALSE 39117
// ComLinkToBase ( base , i ) ;
39103: LD_VAR 0 1
39107: PPUSH
39108: LD_VAR 0 6
39112: PPUSH
39113: CALL_OW 169
39117: GO 39083
39119: POP
39120: POP
// end ; result := tmp ;
39121: LD_ADDR_VAR 0 4
39125: PUSH
39126: LD_VAR 0 5
39130: ST_TO_ADDR
// end ;
39131: LD_VAR 0 4
39135: RET
// export function ComComplete ( units , b ) ; var i ; begin
39136: LD_INT 0
39138: PPUSH
39139: PPUSH
// if not units then
39140: LD_VAR 0 1
39144: NOT
39145: IFFALSE 39149
// exit ;
39147: GO 39239
// for i in units do
39149: LD_ADDR_VAR 0 4
39153: PUSH
39154: LD_VAR 0 1
39158: PUSH
39159: FOR_IN
39160: IFFALSE 39237
// if BuildingStatus ( b ) = bs_build then
39162: LD_VAR 0 2
39166: PPUSH
39167: CALL_OW 461
39171: PUSH
39172: LD_INT 1
39174: EQUAL
39175: IFFALSE 39235
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
39177: LD_VAR 0 4
39181: PPUSH
39182: LD_STRING h
39184: PUSH
39185: LD_VAR 0 2
39189: PPUSH
39190: CALL_OW 250
39194: PUSH
39195: LD_VAR 0 2
39199: PPUSH
39200: CALL_OW 251
39204: PUSH
39205: LD_VAR 0 2
39209: PUSH
39210: LD_INT 0
39212: PUSH
39213: LD_INT 0
39215: PUSH
39216: LD_INT 0
39218: PUSH
39219: EMPTY
39220: LIST
39221: LIST
39222: LIST
39223: LIST
39224: LIST
39225: LIST
39226: LIST
39227: PUSH
39228: EMPTY
39229: LIST
39230: PPUSH
39231: CALL_OW 446
39235: GO 39159
39237: POP
39238: POP
// end ;
39239: LD_VAR 0 3
39243: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
39244: LD_INT 0
39246: PPUSH
39247: PPUSH
39248: PPUSH
39249: PPUSH
39250: PPUSH
39251: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
39252: LD_VAR 0 1
39256: NOT
39257: PUSH
39258: LD_VAR 0 1
39262: PPUSH
39263: CALL_OW 263
39267: PUSH
39268: LD_INT 2
39270: NONEQUAL
39271: OR
39272: IFFALSE 39276
// exit ;
39274: GO 39592
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
39276: LD_ADDR_VAR 0 6
39280: PUSH
39281: LD_INT 22
39283: PUSH
39284: LD_VAR 0 1
39288: PPUSH
39289: CALL_OW 255
39293: PUSH
39294: EMPTY
39295: LIST
39296: LIST
39297: PUSH
39298: LD_INT 2
39300: PUSH
39301: LD_INT 30
39303: PUSH
39304: LD_INT 36
39306: PUSH
39307: EMPTY
39308: LIST
39309: LIST
39310: PUSH
39311: LD_INT 34
39313: PUSH
39314: LD_INT 31
39316: PUSH
39317: EMPTY
39318: LIST
39319: LIST
39320: PUSH
39321: EMPTY
39322: LIST
39323: LIST
39324: LIST
39325: PUSH
39326: EMPTY
39327: LIST
39328: LIST
39329: PPUSH
39330: CALL_OW 69
39334: ST_TO_ADDR
// if not tmp then
39335: LD_VAR 0 6
39339: NOT
39340: IFFALSE 39344
// exit ;
39342: GO 39592
// result := [ ] ;
39344: LD_ADDR_VAR 0 2
39348: PUSH
39349: EMPTY
39350: ST_TO_ADDR
// for i in tmp do
39351: LD_ADDR_VAR 0 3
39355: PUSH
39356: LD_VAR 0 6
39360: PUSH
39361: FOR_IN
39362: IFFALSE 39433
// begin t := UnitsInside ( i ) ;
39364: LD_ADDR_VAR 0 4
39368: PUSH
39369: LD_VAR 0 3
39373: PPUSH
39374: CALL_OW 313
39378: ST_TO_ADDR
// if t then
39379: LD_VAR 0 4
39383: IFFALSE 39431
// for j in t do
39385: LD_ADDR_VAR 0 7
39389: PUSH
39390: LD_VAR 0 4
39394: PUSH
39395: FOR_IN
39396: IFFALSE 39429
// result := Replace ( result , result + 1 , j ) ;
39398: LD_ADDR_VAR 0 2
39402: PUSH
39403: LD_VAR 0 2
39407: PPUSH
39408: LD_VAR 0 2
39412: PUSH
39413: LD_INT 1
39415: PLUS
39416: PPUSH
39417: LD_VAR 0 7
39421: PPUSH
39422: CALL_OW 1
39426: ST_TO_ADDR
39427: GO 39395
39429: POP
39430: POP
// end ;
39431: GO 39361
39433: POP
39434: POP
// if not result then
39435: LD_VAR 0 2
39439: NOT
39440: IFFALSE 39444
// exit ;
39442: GO 39592
// mech := result [ 1 ] ;
39444: LD_ADDR_VAR 0 5
39448: PUSH
39449: LD_VAR 0 2
39453: PUSH
39454: LD_INT 1
39456: ARRAY
39457: ST_TO_ADDR
// if result > 1 then
39458: LD_VAR 0 2
39462: PUSH
39463: LD_INT 1
39465: GREATER
39466: IFFALSE 39578
// begin for i = 2 to result do
39468: LD_ADDR_VAR 0 3
39472: PUSH
39473: DOUBLE
39474: LD_INT 2
39476: DEC
39477: ST_TO_ADDR
39478: LD_VAR 0 2
39482: PUSH
39483: FOR_TO
39484: IFFALSE 39576
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
39486: LD_ADDR_VAR 0 4
39490: PUSH
39491: LD_VAR 0 2
39495: PUSH
39496: LD_VAR 0 3
39500: ARRAY
39501: PPUSH
39502: LD_INT 3
39504: PPUSH
39505: CALL_OW 259
39509: PUSH
39510: LD_VAR 0 2
39514: PUSH
39515: LD_VAR 0 3
39519: ARRAY
39520: PPUSH
39521: CALL_OW 432
39525: MINUS
39526: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
39527: LD_VAR 0 4
39531: PUSH
39532: LD_VAR 0 5
39536: PPUSH
39537: LD_INT 3
39539: PPUSH
39540: CALL_OW 259
39544: PUSH
39545: LD_VAR 0 5
39549: PPUSH
39550: CALL_OW 432
39554: MINUS
39555: GREATEREQUAL
39556: IFFALSE 39574
// mech := result [ i ] ;
39558: LD_ADDR_VAR 0 5
39562: PUSH
39563: LD_VAR 0 2
39567: PUSH
39568: LD_VAR 0 3
39572: ARRAY
39573: ST_TO_ADDR
// end ;
39574: GO 39483
39576: POP
39577: POP
// end ; ComLinkTo ( vehicle , mech ) ;
39578: LD_VAR 0 1
39582: PPUSH
39583: LD_VAR 0 5
39587: PPUSH
39588: CALL_OW 135
// end ;
39592: LD_VAR 0 2
39596: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
39597: LD_INT 0
39599: PPUSH
39600: PPUSH
39601: PPUSH
39602: PPUSH
39603: PPUSH
39604: PPUSH
39605: PPUSH
39606: PPUSH
39607: PPUSH
39608: PPUSH
39609: PPUSH
39610: PPUSH
39611: PPUSH
// result := [ ] ;
39612: LD_ADDR_VAR 0 7
39616: PUSH
39617: EMPTY
39618: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
39619: LD_VAR 0 1
39623: PPUSH
39624: CALL_OW 266
39628: PUSH
39629: LD_INT 0
39631: PUSH
39632: LD_INT 1
39634: PUSH
39635: EMPTY
39636: LIST
39637: LIST
39638: IN
39639: NOT
39640: IFFALSE 39644
// exit ;
39642: GO 41278
// if name then
39644: LD_VAR 0 3
39648: IFFALSE 39664
// SetBName ( base_dep , name ) ;
39650: LD_VAR 0 1
39654: PPUSH
39655: LD_VAR 0 3
39659: PPUSH
39660: CALL_OW 500
// base := GetBase ( base_dep ) ;
39664: LD_ADDR_VAR 0 15
39668: PUSH
39669: LD_VAR 0 1
39673: PPUSH
39674: CALL_OW 274
39678: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
39679: LD_ADDR_VAR 0 16
39683: PUSH
39684: LD_VAR 0 1
39688: PPUSH
39689: CALL_OW 255
39693: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
39694: LD_ADDR_VAR 0 17
39698: PUSH
39699: LD_VAR 0 1
39703: PPUSH
39704: CALL_OW 248
39708: ST_TO_ADDR
// if sources then
39709: LD_VAR 0 5
39713: IFFALSE 39760
// for i = 1 to 3 do
39715: LD_ADDR_VAR 0 8
39719: PUSH
39720: DOUBLE
39721: LD_INT 1
39723: DEC
39724: ST_TO_ADDR
39725: LD_INT 3
39727: PUSH
39728: FOR_TO
39729: IFFALSE 39758
// AddResourceType ( base , i , sources [ i ] ) ;
39731: LD_VAR 0 15
39735: PPUSH
39736: LD_VAR 0 8
39740: PPUSH
39741: LD_VAR 0 5
39745: PUSH
39746: LD_VAR 0 8
39750: ARRAY
39751: PPUSH
39752: CALL_OW 276
39756: GO 39728
39758: POP
39759: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
39760: LD_ADDR_VAR 0 18
39764: PUSH
39765: LD_VAR 0 15
39769: PPUSH
39770: LD_VAR 0 2
39774: PPUSH
39775: LD_INT 1
39777: PPUSH
39778: CALL 39021 0 3
39782: ST_TO_ADDR
// InitHc ;
39783: CALL_OW 19
// InitUc ;
39787: CALL_OW 18
// uc_side := side ;
39791: LD_ADDR_OWVAR 20
39795: PUSH
39796: LD_VAR 0 16
39800: ST_TO_ADDR
// uc_nation := nation ;
39801: LD_ADDR_OWVAR 21
39805: PUSH
39806: LD_VAR 0 17
39810: ST_TO_ADDR
// if buildings then
39811: LD_VAR 0 18
39815: IFFALSE 41137
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
39817: LD_ADDR_VAR 0 19
39821: PUSH
39822: LD_VAR 0 18
39826: PPUSH
39827: LD_INT 2
39829: PUSH
39830: LD_INT 30
39832: PUSH
39833: LD_INT 29
39835: PUSH
39836: EMPTY
39837: LIST
39838: LIST
39839: PUSH
39840: LD_INT 30
39842: PUSH
39843: LD_INT 30
39845: PUSH
39846: EMPTY
39847: LIST
39848: LIST
39849: PUSH
39850: EMPTY
39851: LIST
39852: LIST
39853: LIST
39854: PPUSH
39855: CALL_OW 72
39859: ST_TO_ADDR
// if tmp then
39860: LD_VAR 0 19
39864: IFFALSE 39912
// for i in tmp do
39866: LD_ADDR_VAR 0 8
39870: PUSH
39871: LD_VAR 0 19
39875: PUSH
39876: FOR_IN
39877: IFFALSE 39910
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
39879: LD_VAR 0 8
39883: PPUSH
39884: CALL_OW 250
39888: PPUSH
39889: LD_VAR 0 8
39893: PPUSH
39894: CALL_OW 251
39898: PPUSH
39899: LD_VAR 0 16
39903: PPUSH
39904: CALL_OW 441
39908: GO 39876
39910: POP
39911: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
39912: LD_VAR 0 18
39916: PPUSH
39917: LD_INT 2
39919: PUSH
39920: LD_INT 30
39922: PUSH
39923: LD_INT 32
39925: PUSH
39926: EMPTY
39927: LIST
39928: LIST
39929: PUSH
39930: LD_INT 30
39932: PUSH
39933: LD_INT 33
39935: PUSH
39936: EMPTY
39937: LIST
39938: LIST
39939: PUSH
39940: EMPTY
39941: LIST
39942: LIST
39943: LIST
39944: PPUSH
39945: CALL_OW 72
39949: IFFALSE 40037
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
39951: LD_ADDR_VAR 0 8
39955: PUSH
39956: LD_VAR 0 18
39960: PPUSH
39961: LD_INT 2
39963: PUSH
39964: LD_INT 30
39966: PUSH
39967: LD_INT 32
39969: PUSH
39970: EMPTY
39971: LIST
39972: LIST
39973: PUSH
39974: LD_INT 30
39976: PUSH
39977: LD_INT 33
39979: PUSH
39980: EMPTY
39981: LIST
39982: LIST
39983: PUSH
39984: EMPTY
39985: LIST
39986: LIST
39987: LIST
39988: PPUSH
39989: CALL_OW 72
39993: PUSH
39994: FOR_IN
39995: IFFALSE 40035
// begin if not GetBWeapon ( i ) then
39997: LD_VAR 0 8
40001: PPUSH
40002: CALL_OW 269
40006: NOT
40007: IFFALSE 40033
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
40009: LD_VAR 0 8
40013: PPUSH
40014: LD_VAR 0 8
40018: PPUSH
40019: LD_VAR 0 2
40023: PPUSH
40024: CALL 41283 0 2
40028: PPUSH
40029: CALL_OW 431
// end ;
40033: GO 39994
40035: POP
40036: POP
// end ; for i = 1 to personel do
40037: LD_ADDR_VAR 0 8
40041: PUSH
40042: DOUBLE
40043: LD_INT 1
40045: DEC
40046: ST_TO_ADDR
40047: LD_VAR 0 6
40051: PUSH
40052: FOR_TO
40053: IFFALSE 41117
// begin if i > 4 then
40055: LD_VAR 0 8
40059: PUSH
40060: LD_INT 4
40062: GREATER
40063: IFFALSE 40067
// break ;
40065: GO 41117
// case i of 1 :
40067: LD_VAR 0 8
40071: PUSH
40072: LD_INT 1
40074: DOUBLE
40075: EQUAL
40076: IFTRUE 40080
40078: GO 40160
40080: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
40081: LD_ADDR_VAR 0 12
40085: PUSH
40086: LD_VAR 0 18
40090: PPUSH
40091: LD_INT 22
40093: PUSH
40094: LD_VAR 0 16
40098: PUSH
40099: EMPTY
40100: LIST
40101: LIST
40102: PUSH
40103: LD_INT 58
40105: PUSH
40106: EMPTY
40107: LIST
40108: PUSH
40109: LD_INT 2
40111: PUSH
40112: LD_INT 30
40114: PUSH
40115: LD_INT 32
40117: PUSH
40118: EMPTY
40119: LIST
40120: LIST
40121: PUSH
40122: LD_INT 30
40124: PUSH
40125: LD_INT 4
40127: PUSH
40128: EMPTY
40129: LIST
40130: LIST
40131: PUSH
40132: LD_INT 30
40134: PUSH
40135: LD_INT 5
40137: PUSH
40138: EMPTY
40139: LIST
40140: LIST
40141: PUSH
40142: EMPTY
40143: LIST
40144: LIST
40145: LIST
40146: LIST
40147: PUSH
40148: EMPTY
40149: LIST
40150: LIST
40151: LIST
40152: PPUSH
40153: CALL_OW 72
40157: ST_TO_ADDR
40158: GO 40382
40160: LD_INT 2
40162: DOUBLE
40163: EQUAL
40164: IFTRUE 40168
40166: GO 40230
40168: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
40169: LD_ADDR_VAR 0 12
40173: PUSH
40174: LD_VAR 0 18
40178: PPUSH
40179: LD_INT 22
40181: PUSH
40182: LD_VAR 0 16
40186: PUSH
40187: EMPTY
40188: LIST
40189: LIST
40190: PUSH
40191: LD_INT 2
40193: PUSH
40194: LD_INT 30
40196: PUSH
40197: LD_INT 0
40199: PUSH
40200: EMPTY
40201: LIST
40202: LIST
40203: PUSH
40204: LD_INT 30
40206: PUSH
40207: LD_INT 1
40209: PUSH
40210: EMPTY
40211: LIST
40212: LIST
40213: PUSH
40214: EMPTY
40215: LIST
40216: LIST
40217: LIST
40218: PUSH
40219: EMPTY
40220: LIST
40221: LIST
40222: PPUSH
40223: CALL_OW 72
40227: ST_TO_ADDR
40228: GO 40382
40230: LD_INT 3
40232: DOUBLE
40233: EQUAL
40234: IFTRUE 40238
40236: GO 40300
40238: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
40239: LD_ADDR_VAR 0 12
40243: PUSH
40244: LD_VAR 0 18
40248: PPUSH
40249: LD_INT 22
40251: PUSH
40252: LD_VAR 0 16
40256: PUSH
40257: EMPTY
40258: LIST
40259: LIST
40260: PUSH
40261: LD_INT 2
40263: PUSH
40264: LD_INT 30
40266: PUSH
40267: LD_INT 2
40269: PUSH
40270: EMPTY
40271: LIST
40272: LIST
40273: PUSH
40274: LD_INT 30
40276: PUSH
40277: LD_INT 3
40279: PUSH
40280: EMPTY
40281: LIST
40282: LIST
40283: PUSH
40284: EMPTY
40285: LIST
40286: LIST
40287: LIST
40288: PUSH
40289: EMPTY
40290: LIST
40291: LIST
40292: PPUSH
40293: CALL_OW 72
40297: ST_TO_ADDR
40298: GO 40382
40300: LD_INT 4
40302: DOUBLE
40303: EQUAL
40304: IFTRUE 40308
40306: GO 40381
40308: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
40309: LD_ADDR_VAR 0 12
40313: PUSH
40314: LD_VAR 0 18
40318: PPUSH
40319: LD_INT 22
40321: PUSH
40322: LD_VAR 0 16
40326: PUSH
40327: EMPTY
40328: LIST
40329: LIST
40330: PUSH
40331: LD_INT 2
40333: PUSH
40334: LD_INT 30
40336: PUSH
40337: LD_INT 6
40339: PUSH
40340: EMPTY
40341: LIST
40342: LIST
40343: PUSH
40344: LD_INT 30
40346: PUSH
40347: LD_INT 7
40349: PUSH
40350: EMPTY
40351: LIST
40352: LIST
40353: PUSH
40354: LD_INT 30
40356: PUSH
40357: LD_INT 8
40359: PUSH
40360: EMPTY
40361: LIST
40362: LIST
40363: PUSH
40364: EMPTY
40365: LIST
40366: LIST
40367: LIST
40368: LIST
40369: PUSH
40370: EMPTY
40371: LIST
40372: LIST
40373: PPUSH
40374: CALL_OW 72
40378: ST_TO_ADDR
40379: GO 40382
40381: POP
// if i = 1 then
40382: LD_VAR 0 8
40386: PUSH
40387: LD_INT 1
40389: EQUAL
40390: IFFALSE 40501
// begin tmp := [ ] ;
40392: LD_ADDR_VAR 0 19
40396: PUSH
40397: EMPTY
40398: ST_TO_ADDR
// for j in f do
40399: LD_ADDR_VAR 0 9
40403: PUSH
40404: LD_VAR 0 12
40408: PUSH
40409: FOR_IN
40410: IFFALSE 40483
// if GetBType ( j ) = b_bunker then
40412: LD_VAR 0 9
40416: PPUSH
40417: CALL_OW 266
40421: PUSH
40422: LD_INT 32
40424: EQUAL
40425: IFFALSE 40452
// tmp := Insert ( tmp , 1 , j ) else
40427: LD_ADDR_VAR 0 19
40431: PUSH
40432: LD_VAR 0 19
40436: PPUSH
40437: LD_INT 1
40439: PPUSH
40440: LD_VAR 0 9
40444: PPUSH
40445: CALL_OW 2
40449: ST_TO_ADDR
40450: GO 40481
// tmp := Insert ( tmp , tmp + 1 , j ) ;
40452: LD_ADDR_VAR 0 19
40456: PUSH
40457: LD_VAR 0 19
40461: PPUSH
40462: LD_VAR 0 19
40466: PUSH
40467: LD_INT 1
40469: PLUS
40470: PPUSH
40471: LD_VAR 0 9
40475: PPUSH
40476: CALL_OW 2
40480: ST_TO_ADDR
40481: GO 40409
40483: POP
40484: POP
// if tmp then
40485: LD_VAR 0 19
40489: IFFALSE 40501
// f := tmp ;
40491: LD_ADDR_VAR 0 12
40495: PUSH
40496: LD_VAR 0 19
40500: ST_TO_ADDR
// end ; x := personel [ i ] ;
40501: LD_ADDR_VAR 0 13
40505: PUSH
40506: LD_VAR 0 6
40510: PUSH
40511: LD_VAR 0 8
40515: ARRAY
40516: ST_TO_ADDR
// if x = - 1 then
40517: LD_VAR 0 13
40521: PUSH
40522: LD_INT 1
40524: NEG
40525: EQUAL
40526: IFFALSE 40735
// begin for j in f do
40528: LD_ADDR_VAR 0 9
40532: PUSH
40533: LD_VAR 0 12
40537: PUSH
40538: FOR_IN
40539: IFFALSE 40731
// repeat InitHc ;
40541: CALL_OW 19
// if GetBType ( j ) = b_barracks then
40545: LD_VAR 0 9
40549: PPUSH
40550: CALL_OW 266
40554: PUSH
40555: LD_INT 5
40557: EQUAL
40558: IFFALSE 40628
// begin if UnitsInside ( j ) < 3 then
40560: LD_VAR 0 9
40564: PPUSH
40565: CALL_OW 313
40569: PUSH
40570: LD_INT 3
40572: LESS
40573: IFFALSE 40609
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
40575: LD_INT 0
40577: PPUSH
40578: LD_INT 5
40580: PUSH
40581: LD_INT 8
40583: PUSH
40584: LD_INT 9
40586: PUSH
40587: EMPTY
40588: LIST
40589: LIST
40590: LIST
40591: PUSH
40592: LD_VAR 0 17
40596: ARRAY
40597: PPUSH
40598: LD_VAR 0 4
40602: PPUSH
40603: CALL_OW 380
40607: GO 40626
// PrepareHuman ( false , i , skill ) ;
40609: LD_INT 0
40611: PPUSH
40612: LD_VAR 0 8
40616: PPUSH
40617: LD_VAR 0 4
40621: PPUSH
40622: CALL_OW 380
// end else
40626: GO 40645
// PrepareHuman ( false , i , skill ) ;
40628: LD_INT 0
40630: PPUSH
40631: LD_VAR 0 8
40635: PPUSH
40636: LD_VAR 0 4
40640: PPUSH
40641: CALL_OW 380
// un := CreateHuman ;
40645: LD_ADDR_VAR 0 14
40649: PUSH
40650: CALL_OW 44
40654: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40655: LD_ADDR_VAR 0 7
40659: PUSH
40660: LD_VAR 0 7
40664: PPUSH
40665: LD_INT 1
40667: PPUSH
40668: LD_VAR 0 14
40672: PPUSH
40673: CALL_OW 2
40677: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
40678: LD_VAR 0 14
40682: PPUSH
40683: LD_VAR 0 9
40687: PPUSH
40688: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
40692: LD_VAR 0 9
40696: PPUSH
40697: CALL_OW 313
40701: PUSH
40702: LD_INT 6
40704: EQUAL
40705: PUSH
40706: LD_VAR 0 9
40710: PPUSH
40711: CALL_OW 266
40715: PUSH
40716: LD_INT 32
40718: PUSH
40719: LD_INT 31
40721: PUSH
40722: EMPTY
40723: LIST
40724: LIST
40725: IN
40726: OR
40727: IFFALSE 40541
40729: GO 40538
40731: POP
40732: POP
// end else
40733: GO 41115
// for j = 1 to x do
40735: LD_ADDR_VAR 0 9
40739: PUSH
40740: DOUBLE
40741: LD_INT 1
40743: DEC
40744: ST_TO_ADDR
40745: LD_VAR 0 13
40749: PUSH
40750: FOR_TO
40751: IFFALSE 41113
// begin InitHc ;
40753: CALL_OW 19
// if not f then
40757: LD_VAR 0 12
40761: NOT
40762: IFFALSE 40851
// begin PrepareHuman ( false , i , skill ) ;
40764: LD_INT 0
40766: PPUSH
40767: LD_VAR 0 8
40771: PPUSH
40772: LD_VAR 0 4
40776: PPUSH
40777: CALL_OW 380
// un := CreateHuman ;
40781: LD_ADDR_VAR 0 14
40785: PUSH
40786: CALL_OW 44
40790: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40791: LD_ADDR_VAR 0 7
40795: PUSH
40796: LD_VAR 0 7
40800: PPUSH
40801: LD_INT 1
40803: PPUSH
40804: LD_VAR 0 14
40808: PPUSH
40809: CALL_OW 2
40813: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40814: LD_VAR 0 14
40818: PPUSH
40819: LD_VAR 0 1
40823: PPUSH
40824: CALL_OW 250
40828: PPUSH
40829: LD_VAR 0 1
40833: PPUSH
40834: CALL_OW 251
40838: PPUSH
40839: LD_INT 10
40841: PPUSH
40842: LD_INT 0
40844: PPUSH
40845: CALL_OW 50
// continue ;
40849: GO 40750
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
40851: LD_VAR 0 12
40855: PUSH
40856: LD_INT 1
40858: ARRAY
40859: PPUSH
40860: CALL_OW 313
40864: PUSH
40865: LD_VAR 0 12
40869: PUSH
40870: LD_INT 1
40872: ARRAY
40873: PPUSH
40874: CALL_OW 266
40878: PUSH
40879: LD_INT 32
40881: PUSH
40882: LD_INT 31
40884: PUSH
40885: EMPTY
40886: LIST
40887: LIST
40888: IN
40889: AND
40890: PUSH
40891: LD_VAR 0 12
40895: PUSH
40896: LD_INT 1
40898: ARRAY
40899: PPUSH
40900: CALL_OW 313
40904: PUSH
40905: LD_INT 6
40907: EQUAL
40908: OR
40909: IFFALSE 40929
// f := Delete ( f , 1 ) ;
40911: LD_ADDR_VAR 0 12
40915: PUSH
40916: LD_VAR 0 12
40920: PPUSH
40921: LD_INT 1
40923: PPUSH
40924: CALL_OW 3
40928: ST_TO_ADDR
// if not f then
40929: LD_VAR 0 12
40933: NOT
40934: IFFALSE 40952
// begin x := x + 2 ;
40936: LD_ADDR_VAR 0 13
40940: PUSH
40941: LD_VAR 0 13
40945: PUSH
40946: LD_INT 2
40948: PLUS
40949: ST_TO_ADDR
// continue ;
40950: GO 40750
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
40952: LD_VAR 0 12
40956: PUSH
40957: LD_INT 1
40959: ARRAY
40960: PPUSH
40961: CALL_OW 266
40965: PUSH
40966: LD_INT 5
40968: EQUAL
40969: IFFALSE 41043
// begin if UnitsInside ( f [ 1 ] ) < 3 then
40971: LD_VAR 0 12
40975: PUSH
40976: LD_INT 1
40978: ARRAY
40979: PPUSH
40980: CALL_OW 313
40984: PUSH
40985: LD_INT 3
40987: LESS
40988: IFFALSE 41024
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
40990: LD_INT 0
40992: PPUSH
40993: LD_INT 5
40995: PUSH
40996: LD_INT 8
40998: PUSH
40999: LD_INT 9
41001: PUSH
41002: EMPTY
41003: LIST
41004: LIST
41005: LIST
41006: PUSH
41007: LD_VAR 0 17
41011: ARRAY
41012: PPUSH
41013: LD_VAR 0 4
41017: PPUSH
41018: CALL_OW 380
41022: GO 41041
// PrepareHuman ( false , i , skill ) ;
41024: LD_INT 0
41026: PPUSH
41027: LD_VAR 0 8
41031: PPUSH
41032: LD_VAR 0 4
41036: PPUSH
41037: CALL_OW 380
// end else
41041: GO 41060
// PrepareHuman ( false , i , skill ) ;
41043: LD_INT 0
41045: PPUSH
41046: LD_VAR 0 8
41050: PPUSH
41051: LD_VAR 0 4
41055: PPUSH
41056: CALL_OW 380
// un := CreateHuman ;
41060: LD_ADDR_VAR 0 14
41064: PUSH
41065: CALL_OW 44
41069: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41070: LD_ADDR_VAR 0 7
41074: PUSH
41075: LD_VAR 0 7
41079: PPUSH
41080: LD_INT 1
41082: PPUSH
41083: LD_VAR 0 14
41087: PPUSH
41088: CALL_OW 2
41092: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
41093: LD_VAR 0 14
41097: PPUSH
41098: LD_VAR 0 12
41102: PUSH
41103: LD_INT 1
41105: ARRAY
41106: PPUSH
41107: CALL_OW 52
// end ;
41111: GO 40750
41113: POP
41114: POP
// end ;
41115: GO 40052
41117: POP
41118: POP
// result := result ^ buildings ;
41119: LD_ADDR_VAR 0 7
41123: PUSH
41124: LD_VAR 0 7
41128: PUSH
41129: LD_VAR 0 18
41133: ADD
41134: ST_TO_ADDR
// end else
41135: GO 41278
// begin for i = 1 to personel do
41137: LD_ADDR_VAR 0 8
41141: PUSH
41142: DOUBLE
41143: LD_INT 1
41145: DEC
41146: ST_TO_ADDR
41147: LD_VAR 0 6
41151: PUSH
41152: FOR_TO
41153: IFFALSE 41276
// begin if i > 4 then
41155: LD_VAR 0 8
41159: PUSH
41160: LD_INT 4
41162: GREATER
41163: IFFALSE 41167
// break ;
41165: GO 41276
// x := personel [ i ] ;
41167: LD_ADDR_VAR 0 13
41171: PUSH
41172: LD_VAR 0 6
41176: PUSH
41177: LD_VAR 0 8
41181: ARRAY
41182: ST_TO_ADDR
// if x = - 1 then
41183: LD_VAR 0 13
41187: PUSH
41188: LD_INT 1
41190: NEG
41191: EQUAL
41192: IFFALSE 41196
// continue ;
41194: GO 41152
// PrepareHuman ( false , i , skill ) ;
41196: LD_INT 0
41198: PPUSH
41199: LD_VAR 0 8
41203: PPUSH
41204: LD_VAR 0 4
41208: PPUSH
41209: CALL_OW 380
// un := CreateHuman ;
41213: LD_ADDR_VAR 0 14
41217: PUSH
41218: CALL_OW 44
41222: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
41223: LD_VAR 0 14
41227: PPUSH
41228: LD_VAR 0 1
41232: PPUSH
41233: CALL_OW 250
41237: PPUSH
41238: LD_VAR 0 1
41242: PPUSH
41243: CALL_OW 251
41247: PPUSH
41248: LD_INT 10
41250: PPUSH
41251: LD_INT 0
41253: PPUSH
41254: CALL_OW 50
// result := result ^ un ;
41258: LD_ADDR_VAR 0 7
41262: PUSH
41263: LD_VAR 0 7
41267: PUSH
41268: LD_VAR 0 14
41272: ADD
41273: ST_TO_ADDR
// end ;
41274: GO 41152
41276: POP
41277: POP
// end ; end ;
41278: LD_VAR 0 7
41282: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
41283: LD_INT 0
41285: PPUSH
41286: PPUSH
41287: PPUSH
41288: PPUSH
41289: PPUSH
41290: PPUSH
41291: PPUSH
41292: PPUSH
41293: PPUSH
41294: PPUSH
41295: PPUSH
41296: PPUSH
41297: PPUSH
41298: PPUSH
41299: PPUSH
41300: PPUSH
// result := false ;
41301: LD_ADDR_VAR 0 3
41305: PUSH
41306: LD_INT 0
41308: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
41309: LD_VAR 0 1
41313: NOT
41314: PUSH
41315: LD_VAR 0 1
41319: PPUSH
41320: CALL_OW 266
41324: PUSH
41325: LD_INT 32
41327: PUSH
41328: LD_INT 33
41330: PUSH
41331: EMPTY
41332: LIST
41333: LIST
41334: IN
41335: NOT
41336: OR
41337: IFFALSE 41341
// exit ;
41339: GO 42450
// nat := GetNation ( tower ) ;
41341: LD_ADDR_VAR 0 12
41345: PUSH
41346: LD_VAR 0 1
41350: PPUSH
41351: CALL_OW 248
41355: ST_TO_ADDR
// side := GetSide ( tower ) ;
41356: LD_ADDR_VAR 0 16
41360: PUSH
41361: LD_VAR 0 1
41365: PPUSH
41366: CALL_OW 255
41370: ST_TO_ADDR
// x := GetX ( tower ) ;
41371: LD_ADDR_VAR 0 10
41375: PUSH
41376: LD_VAR 0 1
41380: PPUSH
41381: CALL_OW 250
41385: ST_TO_ADDR
// y := GetY ( tower ) ;
41386: LD_ADDR_VAR 0 11
41390: PUSH
41391: LD_VAR 0 1
41395: PPUSH
41396: CALL_OW 251
41400: ST_TO_ADDR
// if not x or not y then
41401: LD_VAR 0 10
41405: NOT
41406: PUSH
41407: LD_VAR 0 11
41411: NOT
41412: OR
41413: IFFALSE 41417
// exit ;
41415: GO 42450
// weapon := 0 ;
41417: LD_ADDR_VAR 0 18
41421: PUSH
41422: LD_INT 0
41424: ST_TO_ADDR
// fac_list := [ ] ;
41425: LD_ADDR_VAR 0 17
41429: PUSH
41430: EMPTY
41431: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
41432: LD_ADDR_VAR 0 6
41436: PUSH
41437: LD_VAR 0 1
41441: PPUSH
41442: CALL_OW 274
41446: PPUSH
41447: LD_VAR 0 2
41451: PPUSH
41452: LD_INT 0
41454: PPUSH
41455: CALL 39021 0 3
41459: PPUSH
41460: LD_INT 30
41462: PUSH
41463: LD_INT 3
41465: PUSH
41466: EMPTY
41467: LIST
41468: LIST
41469: PPUSH
41470: CALL_OW 72
41474: ST_TO_ADDR
// if not factories then
41475: LD_VAR 0 6
41479: NOT
41480: IFFALSE 41484
// exit ;
41482: GO 42450
// for i in factories do
41484: LD_ADDR_VAR 0 8
41488: PUSH
41489: LD_VAR 0 6
41493: PUSH
41494: FOR_IN
41495: IFFALSE 41520
// fac_list := fac_list union AvailableWeaponList ( i ) ;
41497: LD_ADDR_VAR 0 17
41501: PUSH
41502: LD_VAR 0 17
41506: PUSH
41507: LD_VAR 0 8
41511: PPUSH
41512: CALL_OW 478
41516: UNION
41517: ST_TO_ADDR
41518: GO 41494
41520: POP
41521: POP
// if not fac_list then
41522: LD_VAR 0 17
41526: NOT
41527: IFFALSE 41531
// exit ;
41529: GO 42450
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
41531: LD_ADDR_VAR 0 5
41535: PUSH
41536: LD_INT 4
41538: PUSH
41539: LD_INT 5
41541: PUSH
41542: LD_INT 9
41544: PUSH
41545: LD_INT 10
41547: PUSH
41548: LD_INT 6
41550: PUSH
41551: LD_INT 7
41553: PUSH
41554: LD_INT 11
41556: PUSH
41557: EMPTY
41558: LIST
41559: LIST
41560: LIST
41561: LIST
41562: LIST
41563: LIST
41564: LIST
41565: PUSH
41566: LD_INT 27
41568: PUSH
41569: LD_INT 28
41571: PUSH
41572: LD_INT 26
41574: PUSH
41575: LD_INT 30
41577: PUSH
41578: EMPTY
41579: LIST
41580: LIST
41581: LIST
41582: LIST
41583: PUSH
41584: LD_INT 43
41586: PUSH
41587: LD_INT 44
41589: PUSH
41590: LD_INT 46
41592: PUSH
41593: LD_INT 45
41595: PUSH
41596: LD_INT 47
41598: PUSH
41599: LD_INT 49
41601: PUSH
41602: EMPTY
41603: LIST
41604: LIST
41605: LIST
41606: LIST
41607: LIST
41608: LIST
41609: PUSH
41610: EMPTY
41611: LIST
41612: LIST
41613: LIST
41614: PUSH
41615: LD_VAR 0 12
41619: ARRAY
41620: ST_TO_ADDR
// list := list isect fac_list ;
41621: LD_ADDR_VAR 0 5
41625: PUSH
41626: LD_VAR 0 5
41630: PUSH
41631: LD_VAR 0 17
41635: ISECT
41636: ST_TO_ADDR
// if not list then
41637: LD_VAR 0 5
41641: NOT
41642: IFFALSE 41646
// exit ;
41644: GO 42450
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
41646: LD_VAR 0 12
41650: PUSH
41651: LD_INT 3
41653: EQUAL
41654: PUSH
41655: LD_INT 49
41657: PUSH
41658: LD_VAR 0 5
41662: IN
41663: AND
41664: PUSH
41665: LD_INT 31
41667: PPUSH
41668: LD_VAR 0 16
41672: PPUSH
41673: CALL_OW 321
41677: PUSH
41678: LD_INT 2
41680: EQUAL
41681: AND
41682: IFFALSE 41742
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
41684: LD_INT 22
41686: PUSH
41687: LD_VAR 0 16
41691: PUSH
41692: EMPTY
41693: LIST
41694: LIST
41695: PUSH
41696: LD_INT 35
41698: PUSH
41699: LD_INT 49
41701: PUSH
41702: EMPTY
41703: LIST
41704: LIST
41705: PUSH
41706: LD_INT 91
41708: PUSH
41709: LD_VAR 0 1
41713: PUSH
41714: LD_INT 10
41716: PUSH
41717: EMPTY
41718: LIST
41719: LIST
41720: LIST
41721: PUSH
41722: EMPTY
41723: LIST
41724: LIST
41725: LIST
41726: PPUSH
41727: CALL_OW 69
41731: NOT
41732: IFFALSE 41742
// weapon := ru_time_lapser ;
41734: LD_ADDR_VAR 0 18
41738: PUSH
41739: LD_INT 49
41741: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
41742: LD_VAR 0 12
41746: PUSH
41747: LD_INT 1
41749: PUSH
41750: LD_INT 2
41752: PUSH
41753: EMPTY
41754: LIST
41755: LIST
41756: IN
41757: PUSH
41758: LD_INT 11
41760: PUSH
41761: LD_VAR 0 5
41765: IN
41766: PUSH
41767: LD_INT 30
41769: PUSH
41770: LD_VAR 0 5
41774: IN
41775: OR
41776: AND
41777: PUSH
41778: LD_INT 6
41780: PPUSH
41781: LD_VAR 0 16
41785: PPUSH
41786: CALL_OW 321
41790: PUSH
41791: LD_INT 2
41793: EQUAL
41794: AND
41795: IFFALSE 41960
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
41797: LD_INT 22
41799: PUSH
41800: LD_VAR 0 16
41804: PUSH
41805: EMPTY
41806: LIST
41807: LIST
41808: PUSH
41809: LD_INT 2
41811: PUSH
41812: LD_INT 35
41814: PUSH
41815: LD_INT 11
41817: PUSH
41818: EMPTY
41819: LIST
41820: LIST
41821: PUSH
41822: LD_INT 35
41824: PUSH
41825: LD_INT 30
41827: PUSH
41828: EMPTY
41829: LIST
41830: LIST
41831: PUSH
41832: EMPTY
41833: LIST
41834: LIST
41835: LIST
41836: PUSH
41837: LD_INT 91
41839: PUSH
41840: LD_VAR 0 1
41844: PUSH
41845: LD_INT 18
41847: PUSH
41848: EMPTY
41849: LIST
41850: LIST
41851: LIST
41852: PUSH
41853: EMPTY
41854: LIST
41855: LIST
41856: LIST
41857: PPUSH
41858: CALL_OW 69
41862: NOT
41863: PUSH
41864: LD_INT 22
41866: PUSH
41867: LD_VAR 0 16
41871: PUSH
41872: EMPTY
41873: LIST
41874: LIST
41875: PUSH
41876: LD_INT 2
41878: PUSH
41879: LD_INT 30
41881: PUSH
41882: LD_INT 32
41884: PUSH
41885: EMPTY
41886: LIST
41887: LIST
41888: PUSH
41889: LD_INT 30
41891: PUSH
41892: LD_INT 33
41894: PUSH
41895: EMPTY
41896: LIST
41897: LIST
41898: PUSH
41899: EMPTY
41900: LIST
41901: LIST
41902: LIST
41903: PUSH
41904: LD_INT 91
41906: PUSH
41907: LD_VAR 0 1
41911: PUSH
41912: LD_INT 12
41914: PUSH
41915: EMPTY
41916: LIST
41917: LIST
41918: LIST
41919: PUSH
41920: EMPTY
41921: LIST
41922: LIST
41923: LIST
41924: PUSH
41925: EMPTY
41926: LIST
41927: PPUSH
41928: CALL_OW 69
41932: PUSH
41933: LD_INT 2
41935: GREATER
41936: AND
41937: IFFALSE 41960
// weapon := [ us_radar , ar_radar ] [ nat ] ;
41939: LD_ADDR_VAR 0 18
41943: PUSH
41944: LD_INT 11
41946: PUSH
41947: LD_INT 30
41949: PUSH
41950: EMPTY
41951: LIST
41952: LIST
41953: PUSH
41954: LD_VAR 0 12
41958: ARRAY
41959: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
41960: LD_VAR 0 18
41964: NOT
41965: PUSH
41966: LD_INT 40
41968: PPUSH
41969: LD_VAR 0 16
41973: PPUSH
41974: CALL_OW 321
41978: PUSH
41979: LD_INT 2
41981: EQUAL
41982: AND
41983: PUSH
41984: LD_INT 7
41986: PUSH
41987: LD_VAR 0 5
41991: IN
41992: PUSH
41993: LD_INT 28
41995: PUSH
41996: LD_VAR 0 5
42000: IN
42001: OR
42002: PUSH
42003: LD_INT 45
42005: PUSH
42006: LD_VAR 0 5
42010: IN
42011: OR
42012: AND
42013: IFFALSE 42267
// begin hex := GetHexInfo ( x , y ) ;
42015: LD_ADDR_VAR 0 4
42019: PUSH
42020: LD_VAR 0 10
42024: PPUSH
42025: LD_VAR 0 11
42029: PPUSH
42030: CALL_OW 546
42034: ST_TO_ADDR
// if hex [ 1 ] then
42035: LD_VAR 0 4
42039: PUSH
42040: LD_INT 1
42042: ARRAY
42043: IFFALSE 42047
// exit ;
42045: GO 42450
// height := hex [ 2 ] ;
42047: LD_ADDR_VAR 0 15
42051: PUSH
42052: LD_VAR 0 4
42056: PUSH
42057: LD_INT 2
42059: ARRAY
42060: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
42061: LD_ADDR_VAR 0 14
42065: PUSH
42066: LD_INT 0
42068: PUSH
42069: LD_INT 2
42071: PUSH
42072: LD_INT 3
42074: PUSH
42075: LD_INT 5
42077: PUSH
42078: EMPTY
42079: LIST
42080: LIST
42081: LIST
42082: LIST
42083: ST_TO_ADDR
// for i in tmp do
42084: LD_ADDR_VAR 0 8
42088: PUSH
42089: LD_VAR 0 14
42093: PUSH
42094: FOR_IN
42095: IFFALSE 42265
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
42097: LD_ADDR_VAR 0 9
42101: PUSH
42102: LD_VAR 0 10
42106: PPUSH
42107: LD_VAR 0 8
42111: PPUSH
42112: LD_INT 5
42114: PPUSH
42115: CALL_OW 272
42119: PUSH
42120: LD_VAR 0 11
42124: PPUSH
42125: LD_VAR 0 8
42129: PPUSH
42130: LD_INT 5
42132: PPUSH
42133: CALL_OW 273
42137: PUSH
42138: EMPTY
42139: LIST
42140: LIST
42141: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
42142: LD_VAR 0 9
42146: PUSH
42147: LD_INT 1
42149: ARRAY
42150: PPUSH
42151: LD_VAR 0 9
42155: PUSH
42156: LD_INT 2
42158: ARRAY
42159: PPUSH
42160: CALL_OW 488
42164: IFFALSE 42263
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
42166: LD_ADDR_VAR 0 4
42170: PUSH
42171: LD_VAR 0 9
42175: PUSH
42176: LD_INT 1
42178: ARRAY
42179: PPUSH
42180: LD_VAR 0 9
42184: PUSH
42185: LD_INT 2
42187: ARRAY
42188: PPUSH
42189: CALL_OW 546
42193: ST_TO_ADDR
// if hex [ 1 ] then
42194: LD_VAR 0 4
42198: PUSH
42199: LD_INT 1
42201: ARRAY
42202: IFFALSE 42206
// continue ;
42204: GO 42094
// h := hex [ 2 ] ;
42206: LD_ADDR_VAR 0 13
42210: PUSH
42211: LD_VAR 0 4
42215: PUSH
42216: LD_INT 2
42218: ARRAY
42219: ST_TO_ADDR
// if h + 7 < height then
42220: LD_VAR 0 13
42224: PUSH
42225: LD_INT 7
42227: PLUS
42228: PUSH
42229: LD_VAR 0 15
42233: LESS
42234: IFFALSE 42263
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
42236: LD_ADDR_VAR 0 18
42240: PUSH
42241: LD_INT 7
42243: PUSH
42244: LD_INT 28
42246: PUSH
42247: LD_INT 45
42249: PUSH
42250: EMPTY
42251: LIST
42252: LIST
42253: LIST
42254: PUSH
42255: LD_VAR 0 12
42259: ARRAY
42260: ST_TO_ADDR
// break ;
42261: GO 42265
// end ; end ; end ;
42263: GO 42094
42265: POP
42266: POP
// end ; if not weapon then
42267: LD_VAR 0 18
42271: NOT
42272: IFFALSE 42332
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
42274: LD_ADDR_VAR 0 5
42278: PUSH
42279: LD_VAR 0 5
42283: PUSH
42284: LD_INT 11
42286: PUSH
42287: LD_INT 30
42289: PUSH
42290: LD_INT 49
42292: PUSH
42293: EMPTY
42294: LIST
42295: LIST
42296: LIST
42297: DIFF
42298: ST_TO_ADDR
// if not list then
42299: LD_VAR 0 5
42303: NOT
42304: IFFALSE 42308
// exit ;
42306: GO 42450
// weapon := list [ rand ( 1 , list ) ] ;
42308: LD_ADDR_VAR 0 18
42312: PUSH
42313: LD_VAR 0 5
42317: PUSH
42318: LD_INT 1
42320: PPUSH
42321: LD_VAR 0 5
42325: PPUSH
42326: CALL_OW 12
42330: ARRAY
42331: ST_TO_ADDR
// end ; if weapon then
42332: LD_VAR 0 18
42336: IFFALSE 42450
// begin tmp := CostOfWeapon ( weapon ) ;
42338: LD_ADDR_VAR 0 14
42342: PUSH
42343: LD_VAR 0 18
42347: PPUSH
42348: CALL_OW 451
42352: ST_TO_ADDR
// j := GetBase ( tower ) ;
42353: LD_ADDR_VAR 0 9
42357: PUSH
42358: LD_VAR 0 1
42362: PPUSH
42363: CALL_OW 274
42367: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
42368: LD_VAR 0 9
42372: PPUSH
42373: LD_INT 1
42375: PPUSH
42376: CALL_OW 275
42380: PUSH
42381: LD_VAR 0 14
42385: PUSH
42386: LD_INT 1
42388: ARRAY
42389: GREATEREQUAL
42390: PUSH
42391: LD_VAR 0 9
42395: PPUSH
42396: LD_INT 2
42398: PPUSH
42399: CALL_OW 275
42403: PUSH
42404: LD_VAR 0 14
42408: PUSH
42409: LD_INT 2
42411: ARRAY
42412: GREATEREQUAL
42413: AND
42414: PUSH
42415: LD_VAR 0 9
42419: PPUSH
42420: LD_INT 3
42422: PPUSH
42423: CALL_OW 275
42427: PUSH
42428: LD_VAR 0 14
42432: PUSH
42433: LD_INT 3
42435: ARRAY
42436: GREATEREQUAL
42437: AND
42438: IFFALSE 42450
// result := weapon ;
42440: LD_ADDR_VAR 0 3
42444: PUSH
42445: LD_VAR 0 18
42449: ST_TO_ADDR
// end ; end ;
42450: LD_VAR 0 3
42454: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
42455: LD_INT 0
42457: PPUSH
42458: PPUSH
// result := true ;
42459: LD_ADDR_VAR 0 3
42463: PUSH
42464: LD_INT 1
42466: ST_TO_ADDR
// if array1 = array2 then
42467: LD_VAR 0 1
42471: PUSH
42472: LD_VAR 0 2
42476: EQUAL
42477: IFFALSE 42537
// begin for i = 1 to array1 do
42479: LD_ADDR_VAR 0 4
42483: PUSH
42484: DOUBLE
42485: LD_INT 1
42487: DEC
42488: ST_TO_ADDR
42489: LD_VAR 0 1
42493: PUSH
42494: FOR_TO
42495: IFFALSE 42533
// if array1 [ i ] <> array2 [ i ] then
42497: LD_VAR 0 1
42501: PUSH
42502: LD_VAR 0 4
42506: ARRAY
42507: PUSH
42508: LD_VAR 0 2
42512: PUSH
42513: LD_VAR 0 4
42517: ARRAY
42518: NONEQUAL
42519: IFFALSE 42531
// begin result := false ;
42521: LD_ADDR_VAR 0 3
42525: PUSH
42526: LD_INT 0
42528: ST_TO_ADDR
// break ;
42529: GO 42533
// end ;
42531: GO 42494
42533: POP
42534: POP
// end else
42535: GO 42545
// result := false ;
42537: LD_ADDR_VAR 0 3
42541: PUSH
42542: LD_INT 0
42544: ST_TO_ADDR
// end ;
42545: LD_VAR 0 3
42549: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
42550: LD_INT 0
42552: PPUSH
42553: PPUSH
// if not array1 or not array2 then
42554: LD_VAR 0 1
42558: NOT
42559: PUSH
42560: LD_VAR 0 2
42564: NOT
42565: OR
42566: IFFALSE 42570
// exit ;
42568: GO 42634
// result := true ;
42570: LD_ADDR_VAR 0 3
42574: PUSH
42575: LD_INT 1
42577: ST_TO_ADDR
// for i = 1 to array1 do
42578: LD_ADDR_VAR 0 4
42582: PUSH
42583: DOUBLE
42584: LD_INT 1
42586: DEC
42587: ST_TO_ADDR
42588: LD_VAR 0 1
42592: PUSH
42593: FOR_TO
42594: IFFALSE 42632
// if array1 [ i ] <> array2 [ i ] then
42596: LD_VAR 0 1
42600: PUSH
42601: LD_VAR 0 4
42605: ARRAY
42606: PUSH
42607: LD_VAR 0 2
42611: PUSH
42612: LD_VAR 0 4
42616: ARRAY
42617: NONEQUAL
42618: IFFALSE 42630
// begin result := false ;
42620: LD_ADDR_VAR 0 3
42624: PUSH
42625: LD_INT 0
42627: ST_TO_ADDR
// break ;
42628: GO 42632
// end ;
42630: GO 42593
42632: POP
42633: POP
// end ;
42634: LD_VAR 0 3
42638: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
42639: LD_INT 0
42641: PPUSH
42642: PPUSH
42643: PPUSH
// pom := GetBase ( fac ) ;
42644: LD_ADDR_VAR 0 5
42648: PUSH
42649: LD_VAR 0 1
42653: PPUSH
42654: CALL_OW 274
42658: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
42659: LD_ADDR_VAR 0 4
42663: PUSH
42664: LD_VAR 0 2
42668: PUSH
42669: LD_INT 1
42671: ARRAY
42672: PPUSH
42673: LD_VAR 0 2
42677: PUSH
42678: LD_INT 2
42680: ARRAY
42681: PPUSH
42682: LD_VAR 0 2
42686: PUSH
42687: LD_INT 3
42689: ARRAY
42690: PPUSH
42691: LD_VAR 0 2
42695: PUSH
42696: LD_INT 4
42698: ARRAY
42699: PPUSH
42700: CALL_OW 449
42704: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42705: LD_ADDR_VAR 0 3
42709: PUSH
42710: LD_VAR 0 5
42714: PPUSH
42715: LD_INT 1
42717: PPUSH
42718: CALL_OW 275
42722: PUSH
42723: LD_VAR 0 4
42727: PUSH
42728: LD_INT 1
42730: ARRAY
42731: GREATEREQUAL
42732: PUSH
42733: LD_VAR 0 5
42737: PPUSH
42738: LD_INT 2
42740: PPUSH
42741: CALL_OW 275
42745: PUSH
42746: LD_VAR 0 4
42750: PUSH
42751: LD_INT 2
42753: ARRAY
42754: GREATEREQUAL
42755: AND
42756: PUSH
42757: LD_VAR 0 5
42761: PPUSH
42762: LD_INT 3
42764: PPUSH
42765: CALL_OW 275
42769: PUSH
42770: LD_VAR 0 4
42774: PUSH
42775: LD_INT 3
42777: ARRAY
42778: GREATEREQUAL
42779: AND
42780: ST_TO_ADDR
// end ;
42781: LD_VAR 0 3
42785: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
42786: LD_INT 0
42788: PPUSH
42789: PPUSH
42790: PPUSH
42791: PPUSH
// pom := GetBase ( building ) ;
42792: LD_ADDR_VAR 0 3
42796: PUSH
42797: LD_VAR 0 1
42801: PPUSH
42802: CALL_OW 274
42806: ST_TO_ADDR
// if not pom then
42807: LD_VAR 0 3
42811: NOT
42812: IFFALSE 42816
// exit ;
42814: GO 42986
// btype := GetBType ( building ) ;
42816: LD_ADDR_VAR 0 5
42820: PUSH
42821: LD_VAR 0 1
42825: PPUSH
42826: CALL_OW 266
42830: ST_TO_ADDR
// if btype = b_armoury then
42831: LD_VAR 0 5
42835: PUSH
42836: LD_INT 4
42838: EQUAL
42839: IFFALSE 42849
// btype := b_barracks ;
42841: LD_ADDR_VAR 0 5
42845: PUSH
42846: LD_INT 5
42848: ST_TO_ADDR
// if btype = b_depot then
42849: LD_VAR 0 5
42853: PUSH
42854: LD_INT 0
42856: EQUAL
42857: IFFALSE 42867
// btype := b_warehouse ;
42859: LD_ADDR_VAR 0 5
42863: PUSH
42864: LD_INT 1
42866: ST_TO_ADDR
// if btype = b_workshop then
42867: LD_VAR 0 5
42871: PUSH
42872: LD_INT 2
42874: EQUAL
42875: IFFALSE 42885
// btype := b_factory ;
42877: LD_ADDR_VAR 0 5
42881: PUSH
42882: LD_INT 3
42884: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
42885: LD_ADDR_VAR 0 4
42889: PUSH
42890: LD_VAR 0 5
42894: PPUSH
42895: LD_VAR 0 1
42899: PPUSH
42900: CALL_OW 248
42904: PPUSH
42905: CALL_OW 450
42909: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42910: LD_ADDR_VAR 0 2
42914: PUSH
42915: LD_VAR 0 3
42919: PPUSH
42920: LD_INT 1
42922: PPUSH
42923: CALL_OW 275
42927: PUSH
42928: LD_VAR 0 4
42932: PUSH
42933: LD_INT 1
42935: ARRAY
42936: GREATEREQUAL
42937: PUSH
42938: LD_VAR 0 3
42942: PPUSH
42943: LD_INT 2
42945: PPUSH
42946: CALL_OW 275
42950: PUSH
42951: LD_VAR 0 4
42955: PUSH
42956: LD_INT 2
42958: ARRAY
42959: GREATEREQUAL
42960: AND
42961: PUSH
42962: LD_VAR 0 3
42966: PPUSH
42967: LD_INT 3
42969: PPUSH
42970: CALL_OW 275
42974: PUSH
42975: LD_VAR 0 4
42979: PUSH
42980: LD_INT 3
42982: ARRAY
42983: GREATEREQUAL
42984: AND
42985: ST_TO_ADDR
// end ;
42986: LD_VAR 0 2
42990: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
42991: LD_INT 0
42993: PPUSH
42994: PPUSH
42995: PPUSH
// pom := GetBase ( building ) ;
42996: LD_ADDR_VAR 0 4
43000: PUSH
43001: LD_VAR 0 1
43005: PPUSH
43006: CALL_OW 274
43010: ST_TO_ADDR
// if not pom then
43011: LD_VAR 0 4
43015: NOT
43016: IFFALSE 43020
// exit ;
43018: GO 43121
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
43020: LD_ADDR_VAR 0 5
43024: PUSH
43025: LD_VAR 0 2
43029: PPUSH
43030: LD_VAR 0 1
43034: PPUSH
43035: CALL_OW 248
43039: PPUSH
43040: CALL_OW 450
43044: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43045: LD_ADDR_VAR 0 3
43049: PUSH
43050: LD_VAR 0 4
43054: PPUSH
43055: LD_INT 1
43057: PPUSH
43058: CALL_OW 275
43062: PUSH
43063: LD_VAR 0 5
43067: PUSH
43068: LD_INT 1
43070: ARRAY
43071: GREATEREQUAL
43072: PUSH
43073: LD_VAR 0 4
43077: PPUSH
43078: LD_INT 2
43080: PPUSH
43081: CALL_OW 275
43085: PUSH
43086: LD_VAR 0 5
43090: PUSH
43091: LD_INT 2
43093: ARRAY
43094: GREATEREQUAL
43095: AND
43096: PUSH
43097: LD_VAR 0 4
43101: PPUSH
43102: LD_INT 3
43104: PPUSH
43105: CALL_OW 275
43109: PUSH
43110: LD_VAR 0 5
43114: PUSH
43115: LD_INT 3
43117: ARRAY
43118: GREATEREQUAL
43119: AND
43120: ST_TO_ADDR
// end ;
43121: LD_VAR 0 3
43125: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
43126: LD_INT 0
43128: PPUSH
43129: PPUSH
43130: PPUSH
43131: PPUSH
43132: PPUSH
43133: PPUSH
43134: PPUSH
43135: PPUSH
43136: PPUSH
43137: PPUSH
43138: PPUSH
// result := false ;
43139: LD_ADDR_VAR 0 8
43143: PUSH
43144: LD_INT 0
43146: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
43147: LD_VAR 0 5
43151: NOT
43152: PUSH
43153: LD_VAR 0 1
43157: NOT
43158: OR
43159: PUSH
43160: LD_VAR 0 2
43164: NOT
43165: OR
43166: PUSH
43167: LD_VAR 0 3
43171: NOT
43172: OR
43173: IFFALSE 43177
// exit ;
43175: GO 43991
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
43177: LD_ADDR_VAR 0 14
43181: PUSH
43182: LD_VAR 0 1
43186: PPUSH
43187: LD_VAR 0 2
43191: PPUSH
43192: LD_VAR 0 3
43196: PPUSH
43197: LD_VAR 0 4
43201: PPUSH
43202: LD_VAR 0 5
43206: PUSH
43207: LD_INT 1
43209: ARRAY
43210: PPUSH
43211: CALL_OW 248
43215: PPUSH
43216: LD_INT 0
43218: PPUSH
43219: CALL 45224 0 6
43223: ST_TO_ADDR
// if not hexes then
43224: LD_VAR 0 14
43228: NOT
43229: IFFALSE 43233
// exit ;
43231: GO 43991
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
43233: LD_ADDR_VAR 0 17
43237: PUSH
43238: LD_VAR 0 5
43242: PPUSH
43243: LD_INT 22
43245: PUSH
43246: LD_VAR 0 13
43250: PPUSH
43251: CALL_OW 255
43255: PUSH
43256: EMPTY
43257: LIST
43258: LIST
43259: PUSH
43260: LD_INT 2
43262: PUSH
43263: LD_INT 30
43265: PUSH
43266: LD_INT 0
43268: PUSH
43269: EMPTY
43270: LIST
43271: LIST
43272: PUSH
43273: LD_INT 30
43275: PUSH
43276: LD_INT 1
43278: PUSH
43279: EMPTY
43280: LIST
43281: LIST
43282: PUSH
43283: EMPTY
43284: LIST
43285: LIST
43286: LIST
43287: PUSH
43288: EMPTY
43289: LIST
43290: LIST
43291: PPUSH
43292: CALL_OW 72
43296: ST_TO_ADDR
// for i = 1 to hexes do
43297: LD_ADDR_VAR 0 9
43301: PUSH
43302: DOUBLE
43303: LD_INT 1
43305: DEC
43306: ST_TO_ADDR
43307: LD_VAR 0 14
43311: PUSH
43312: FOR_TO
43313: IFFALSE 43989
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43315: LD_ADDR_VAR 0 13
43319: PUSH
43320: LD_VAR 0 14
43324: PUSH
43325: LD_VAR 0 9
43329: ARRAY
43330: PUSH
43331: LD_INT 1
43333: ARRAY
43334: PPUSH
43335: LD_VAR 0 14
43339: PUSH
43340: LD_VAR 0 9
43344: ARRAY
43345: PUSH
43346: LD_INT 2
43348: ARRAY
43349: PPUSH
43350: CALL_OW 428
43354: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
43355: LD_VAR 0 14
43359: PUSH
43360: LD_VAR 0 9
43364: ARRAY
43365: PUSH
43366: LD_INT 1
43368: ARRAY
43369: PPUSH
43370: LD_VAR 0 14
43374: PUSH
43375: LD_VAR 0 9
43379: ARRAY
43380: PUSH
43381: LD_INT 2
43383: ARRAY
43384: PPUSH
43385: CALL_OW 351
43389: PUSH
43390: LD_VAR 0 14
43394: PUSH
43395: LD_VAR 0 9
43399: ARRAY
43400: PUSH
43401: LD_INT 1
43403: ARRAY
43404: PPUSH
43405: LD_VAR 0 14
43409: PUSH
43410: LD_VAR 0 9
43414: ARRAY
43415: PUSH
43416: LD_INT 2
43418: ARRAY
43419: PPUSH
43420: CALL_OW 488
43424: NOT
43425: OR
43426: PUSH
43427: LD_VAR 0 13
43431: PPUSH
43432: CALL_OW 247
43436: PUSH
43437: LD_INT 3
43439: EQUAL
43440: OR
43441: IFFALSE 43447
// exit ;
43443: POP
43444: POP
43445: GO 43991
// if not tmp then
43447: LD_VAR 0 13
43451: NOT
43452: IFFALSE 43456
// continue ;
43454: GO 43312
// result := true ;
43456: LD_ADDR_VAR 0 8
43460: PUSH
43461: LD_INT 1
43463: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
43464: LD_VAR 0 6
43468: PUSH
43469: LD_VAR 0 13
43473: PPUSH
43474: CALL_OW 247
43478: PUSH
43479: LD_INT 2
43481: EQUAL
43482: AND
43483: PUSH
43484: LD_VAR 0 13
43488: PPUSH
43489: CALL_OW 263
43493: PUSH
43494: LD_INT 1
43496: EQUAL
43497: AND
43498: IFFALSE 43662
// begin if IsDrivenBy ( tmp ) then
43500: LD_VAR 0 13
43504: PPUSH
43505: CALL_OW 311
43509: IFFALSE 43513
// continue ;
43511: GO 43312
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
43513: LD_VAR 0 6
43517: PPUSH
43518: LD_INT 3
43520: PUSH
43521: LD_INT 60
43523: PUSH
43524: EMPTY
43525: LIST
43526: PUSH
43527: EMPTY
43528: LIST
43529: LIST
43530: PUSH
43531: LD_INT 3
43533: PUSH
43534: LD_INT 55
43536: PUSH
43537: EMPTY
43538: LIST
43539: PUSH
43540: EMPTY
43541: LIST
43542: LIST
43543: PUSH
43544: EMPTY
43545: LIST
43546: LIST
43547: PPUSH
43548: CALL_OW 72
43552: IFFALSE 43660
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
43554: LD_ADDR_VAR 0 18
43558: PUSH
43559: LD_VAR 0 6
43563: PPUSH
43564: LD_INT 3
43566: PUSH
43567: LD_INT 60
43569: PUSH
43570: EMPTY
43571: LIST
43572: PUSH
43573: EMPTY
43574: LIST
43575: LIST
43576: PUSH
43577: LD_INT 3
43579: PUSH
43580: LD_INT 55
43582: PUSH
43583: EMPTY
43584: LIST
43585: PUSH
43586: EMPTY
43587: LIST
43588: LIST
43589: PUSH
43590: EMPTY
43591: LIST
43592: LIST
43593: PPUSH
43594: CALL_OW 72
43598: PUSH
43599: LD_INT 1
43601: ARRAY
43602: ST_TO_ADDR
// if IsInUnit ( driver ) then
43603: LD_VAR 0 18
43607: PPUSH
43608: CALL_OW 310
43612: IFFALSE 43623
// ComExit ( driver ) ;
43614: LD_VAR 0 18
43618: PPUSH
43619: CALL 68985 0 1
// AddComEnterUnit ( driver , tmp ) ;
43623: LD_VAR 0 18
43627: PPUSH
43628: LD_VAR 0 13
43632: PPUSH
43633: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
43637: LD_VAR 0 18
43641: PPUSH
43642: LD_VAR 0 7
43646: PPUSH
43647: CALL_OW 173
// AddComExitVehicle ( driver ) ;
43651: LD_VAR 0 18
43655: PPUSH
43656: CALL_OW 181
// end ; continue ;
43660: GO 43312
// end ; if not cleaners or not tmp in cleaners then
43662: LD_VAR 0 6
43666: NOT
43667: PUSH
43668: LD_VAR 0 13
43672: PUSH
43673: LD_VAR 0 6
43677: IN
43678: NOT
43679: OR
43680: IFFALSE 43987
// begin if dep then
43682: LD_VAR 0 17
43686: IFFALSE 43822
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
43688: LD_ADDR_VAR 0 16
43692: PUSH
43693: LD_VAR 0 17
43697: PUSH
43698: LD_INT 1
43700: ARRAY
43701: PPUSH
43702: CALL_OW 250
43706: PPUSH
43707: LD_VAR 0 17
43711: PUSH
43712: LD_INT 1
43714: ARRAY
43715: PPUSH
43716: CALL_OW 254
43720: PPUSH
43721: LD_INT 5
43723: PPUSH
43724: CALL_OW 272
43728: PUSH
43729: LD_VAR 0 17
43733: PUSH
43734: LD_INT 1
43736: ARRAY
43737: PPUSH
43738: CALL_OW 251
43742: PPUSH
43743: LD_VAR 0 17
43747: PUSH
43748: LD_INT 1
43750: ARRAY
43751: PPUSH
43752: CALL_OW 254
43756: PPUSH
43757: LD_INT 5
43759: PPUSH
43760: CALL_OW 273
43764: PUSH
43765: EMPTY
43766: LIST
43767: LIST
43768: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
43769: LD_VAR 0 16
43773: PUSH
43774: LD_INT 1
43776: ARRAY
43777: PPUSH
43778: LD_VAR 0 16
43782: PUSH
43783: LD_INT 2
43785: ARRAY
43786: PPUSH
43787: CALL_OW 488
43791: IFFALSE 43822
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
43793: LD_VAR 0 13
43797: PPUSH
43798: LD_VAR 0 16
43802: PUSH
43803: LD_INT 1
43805: ARRAY
43806: PPUSH
43807: LD_VAR 0 16
43811: PUSH
43812: LD_INT 2
43814: ARRAY
43815: PPUSH
43816: CALL_OW 111
// continue ;
43820: GO 43312
// end ; end ; r := GetDir ( tmp ) ;
43822: LD_ADDR_VAR 0 15
43826: PUSH
43827: LD_VAR 0 13
43831: PPUSH
43832: CALL_OW 254
43836: ST_TO_ADDR
// if r = 5 then
43837: LD_VAR 0 15
43841: PUSH
43842: LD_INT 5
43844: EQUAL
43845: IFFALSE 43855
// r := 0 ;
43847: LD_ADDR_VAR 0 15
43851: PUSH
43852: LD_INT 0
43854: ST_TO_ADDR
// for j = r to 5 do
43855: LD_ADDR_VAR 0 10
43859: PUSH
43860: DOUBLE
43861: LD_VAR 0 15
43865: DEC
43866: ST_TO_ADDR
43867: LD_INT 5
43869: PUSH
43870: FOR_TO
43871: IFFALSE 43985
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
43873: LD_ADDR_VAR 0 11
43877: PUSH
43878: LD_VAR 0 13
43882: PPUSH
43883: CALL_OW 250
43887: PPUSH
43888: LD_VAR 0 10
43892: PPUSH
43893: LD_INT 2
43895: PPUSH
43896: CALL_OW 272
43900: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
43901: LD_ADDR_VAR 0 12
43905: PUSH
43906: LD_VAR 0 13
43910: PPUSH
43911: CALL_OW 251
43915: PPUSH
43916: LD_VAR 0 10
43920: PPUSH
43921: LD_INT 2
43923: PPUSH
43924: CALL_OW 273
43928: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
43929: LD_VAR 0 11
43933: PPUSH
43934: LD_VAR 0 12
43938: PPUSH
43939: CALL_OW 488
43943: PUSH
43944: LD_VAR 0 11
43948: PPUSH
43949: LD_VAR 0 12
43953: PPUSH
43954: CALL_OW 428
43958: NOT
43959: AND
43960: IFFALSE 43983
// begin ComMoveXY ( tmp , _x , _y ) ;
43962: LD_VAR 0 13
43966: PPUSH
43967: LD_VAR 0 11
43971: PPUSH
43972: LD_VAR 0 12
43976: PPUSH
43977: CALL_OW 111
// break ;
43981: GO 43985
// end ; end ;
43983: GO 43870
43985: POP
43986: POP
// end ; end ;
43987: GO 43312
43989: POP
43990: POP
// end ;
43991: LD_VAR 0 8
43995: RET
// export function BuildingTechInvented ( side , btype ) ; begin
43996: LD_INT 0
43998: PPUSH
// result := true ;
43999: LD_ADDR_VAR 0 3
44003: PUSH
44004: LD_INT 1
44006: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
44007: LD_VAR 0 2
44011: PUSH
44012: LD_INT 24
44014: DOUBLE
44015: EQUAL
44016: IFTRUE 44026
44018: LD_INT 33
44020: DOUBLE
44021: EQUAL
44022: IFTRUE 44026
44024: GO 44051
44026: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
44027: LD_ADDR_VAR 0 3
44031: PUSH
44032: LD_INT 32
44034: PPUSH
44035: LD_VAR 0 1
44039: PPUSH
44040: CALL_OW 321
44044: PUSH
44045: LD_INT 2
44047: EQUAL
44048: ST_TO_ADDR
44049: GO 44367
44051: LD_INT 20
44053: DOUBLE
44054: EQUAL
44055: IFTRUE 44059
44057: GO 44084
44059: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
44060: LD_ADDR_VAR 0 3
44064: PUSH
44065: LD_INT 6
44067: PPUSH
44068: LD_VAR 0 1
44072: PPUSH
44073: CALL_OW 321
44077: PUSH
44078: LD_INT 2
44080: EQUAL
44081: ST_TO_ADDR
44082: GO 44367
44084: LD_INT 22
44086: DOUBLE
44087: EQUAL
44088: IFTRUE 44098
44090: LD_INT 36
44092: DOUBLE
44093: EQUAL
44094: IFTRUE 44098
44096: GO 44123
44098: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
44099: LD_ADDR_VAR 0 3
44103: PUSH
44104: LD_INT 15
44106: PPUSH
44107: LD_VAR 0 1
44111: PPUSH
44112: CALL_OW 321
44116: PUSH
44117: LD_INT 2
44119: EQUAL
44120: ST_TO_ADDR
44121: GO 44367
44123: LD_INT 30
44125: DOUBLE
44126: EQUAL
44127: IFTRUE 44131
44129: GO 44156
44131: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
44132: LD_ADDR_VAR 0 3
44136: PUSH
44137: LD_INT 20
44139: PPUSH
44140: LD_VAR 0 1
44144: PPUSH
44145: CALL_OW 321
44149: PUSH
44150: LD_INT 2
44152: EQUAL
44153: ST_TO_ADDR
44154: GO 44367
44156: LD_INT 28
44158: DOUBLE
44159: EQUAL
44160: IFTRUE 44170
44162: LD_INT 21
44164: DOUBLE
44165: EQUAL
44166: IFTRUE 44170
44168: GO 44195
44170: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
44171: LD_ADDR_VAR 0 3
44175: PUSH
44176: LD_INT 21
44178: PPUSH
44179: LD_VAR 0 1
44183: PPUSH
44184: CALL_OW 321
44188: PUSH
44189: LD_INT 2
44191: EQUAL
44192: ST_TO_ADDR
44193: GO 44367
44195: LD_INT 16
44197: DOUBLE
44198: EQUAL
44199: IFTRUE 44203
44201: GO 44228
44203: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
44204: LD_ADDR_VAR 0 3
44208: PUSH
44209: LD_INT 84
44211: PPUSH
44212: LD_VAR 0 1
44216: PPUSH
44217: CALL_OW 321
44221: PUSH
44222: LD_INT 2
44224: EQUAL
44225: ST_TO_ADDR
44226: GO 44367
44228: LD_INT 19
44230: DOUBLE
44231: EQUAL
44232: IFTRUE 44242
44234: LD_INT 23
44236: DOUBLE
44237: EQUAL
44238: IFTRUE 44242
44240: GO 44267
44242: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
44243: LD_ADDR_VAR 0 3
44247: PUSH
44248: LD_INT 83
44250: PPUSH
44251: LD_VAR 0 1
44255: PPUSH
44256: CALL_OW 321
44260: PUSH
44261: LD_INT 2
44263: EQUAL
44264: ST_TO_ADDR
44265: GO 44367
44267: LD_INT 17
44269: DOUBLE
44270: EQUAL
44271: IFTRUE 44275
44273: GO 44300
44275: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
44276: LD_ADDR_VAR 0 3
44280: PUSH
44281: LD_INT 39
44283: PPUSH
44284: LD_VAR 0 1
44288: PPUSH
44289: CALL_OW 321
44293: PUSH
44294: LD_INT 2
44296: EQUAL
44297: ST_TO_ADDR
44298: GO 44367
44300: LD_INT 18
44302: DOUBLE
44303: EQUAL
44304: IFTRUE 44308
44306: GO 44333
44308: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
44309: LD_ADDR_VAR 0 3
44313: PUSH
44314: LD_INT 40
44316: PPUSH
44317: LD_VAR 0 1
44321: PPUSH
44322: CALL_OW 321
44326: PUSH
44327: LD_INT 2
44329: EQUAL
44330: ST_TO_ADDR
44331: GO 44367
44333: LD_INT 27
44335: DOUBLE
44336: EQUAL
44337: IFTRUE 44341
44339: GO 44366
44341: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
44342: LD_ADDR_VAR 0 3
44346: PUSH
44347: LD_INT 35
44349: PPUSH
44350: LD_VAR 0 1
44354: PPUSH
44355: CALL_OW 321
44359: PUSH
44360: LD_INT 2
44362: EQUAL
44363: ST_TO_ADDR
44364: GO 44367
44366: POP
// end ;
44367: LD_VAR 0 3
44371: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
44372: LD_INT 0
44374: PPUSH
44375: PPUSH
44376: PPUSH
44377: PPUSH
44378: PPUSH
44379: PPUSH
44380: PPUSH
44381: PPUSH
44382: PPUSH
44383: PPUSH
44384: PPUSH
// result := false ;
44385: LD_ADDR_VAR 0 6
44389: PUSH
44390: LD_INT 0
44392: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
44393: LD_VAR 0 1
44397: NOT
44398: PUSH
44399: LD_VAR 0 1
44403: PPUSH
44404: CALL_OW 266
44408: PUSH
44409: LD_INT 0
44411: PUSH
44412: LD_INT 1
44414: PUSH
44415: EMPTY
44416: LIST
44417: LIST
44418: IN
44419: NOT
44420: OR
44421: PUSH
44422: LD_VAR 0 2
44426: NOT
44427: OR
44428: PUSH
44429: LD_VAR 0 5
44433: PUSH
44434: LD_INT 0
44436: PUSH
44437: LD_INT 1
44439: PUSH
44440: LD_INT 2
44442: PUSH
44443: LD_INT 3
44445: PUSH
44446: LD_INT 4
44448: PUSH
44449: LD_INT 5
44451: PUSH
44452: EMPTY
44453: LIST
44454: LIST
44455: LIST
44456: LIST
44457: LIST
44458: LIST
44459: IN
44460: NOT
44461: OR
44462: PUSH
44463: LD_VAR 0 3
44467: PPUSH
44468: LD_VAR 0 4
44472: PPUSH
44473: CALL_OW 488
44477: NOT
44478: OR
44479: IFFALSE 44483
// exit ;
44481: GO 45219
// side := GetSide ( depot ) ;
44483: LD_ADDR_VAR 0 9
44487: PUSH
44488: LD_VAR 0 1
44492: PPUSH
44493: CALL_OW 255
44497: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
44498: LD_VAR 0 9
44502: PPUSH
44503: LD_VAR 0 2
44507: PPUSH
44508: CALL 43996 0 2
44512: NOT
44513: IFFALSE 44517
// exit ;
44515: GO 45219
// pom := GetBase ( depot ) ;
44517: LD_ADDR_VAR 0 10
44521: PUSH
44522: LD_VAR 0 1
44526: PPUSH
44527: CALL_OW 274
44531: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
44532: LD_ADDR_VAR 0 11
44536: PUSH
44537: LD_VAR 0 2
44541: PPUSH
44542: LD_VAR 0 1
44546: PPUSH
44547: CALL_OW 248
44551: PPUSH
44552: CALL_OW 450
44556: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
44557: LD_VAR 0 10
44561: PPUSH
44562: LD_INT 1
44564: PPUSH
44565: CALL_OW 275
44569: PUSH
44570: LD_VAR 0 11
44574: PUSH
44575: LD_INT 1
44577: ARRAY
44578: GREATEREQUAL
44579: PUSH
44580: LD_VAR 0 10
44584: PPUSH
44585: LD_INT 2
44587: PPUSH
44588: CALL_OW 275
44592: PUSH
44593: LD_VAR 0 11
44597: PUSH
44598: LD_INT 2
44600: ARRAY
44601: GREATEREQUAL
44602: AND
44603: PUSH
44604: LD_VAR 0 10
44608: PPUSH
44609: LD_INT 3
44611: PPUSH
44612: CALL_OW 275
44616: PUSH
44617: LD_VAR 0 11
44621: PUSH
44622: LD_INT 3
44624: ARRAY
44625: GREATEREQUAL
44626: AND
44627: NOT
44628: IFFALSE 44632
// exit ;
44630: GO 45219
// if GetBType ( depot ) = b_depot then
44632: LD_VAR 0 1
44636: PPUSH
44637: CALL_OW 266
44641: PUSH
44642: LD_INT 0
44644: EQUAL
44645: IFFALSE 44657
// dist := 28 else
44647: LD_ADDR_VAR 0 14
44651: PUSH
44652: LD_INT 28
44654: ST_TO_ADDR
44655: GO 44665
// dist := 36 ;
44657: LD_ADDR_VAR 0 14
44661: PUSH
44662: LD_INT 36
44664: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
44665: LD_VAR 0 1
44669: PPUSH
44670: LD_VAR 0 3
44674: PPUSH
44675: LD_VAR 0 4
44679: PPUSH
44680: CALL_OW 297
44684: PUSH
44685: LD_VAR 0 14
44689: GREATER
44690: IFFALSE 44694
// exit ;
44692: GO 45219
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
44694: LD_ADDR_VAR 0 12
44698: PUSH
44699: LD_VAR 0 2
44703: PPUSH
44704: LD_VAR 0 3
44708: PPUSH
44709: LD_VAR 0 4
44713: PPUSH
44714: LD_VAR 0 5
44718: PPUSH
44719: LD_VAR 0 1
44723: PPUSH
44724: CALL_OW 248
44728: PPUSH
44729: LD_INT 0
44731: PPUSH
44732: CALL 45224 0 6
44736: ST_TO_ADDR
// if not hexes then
44737: LD_VAR 0 12
44741: NOT
44742: IFFALSE 44746
// exit ;
44744: GO 45219
// hex := GetHexInfo ( x , y ) ;
44746: LD_ADDR_VAR 0 15
44750: PUSH
44751: LD_VAR 0 3
44755: PPUSH
44756: LD_VAR 0 4
44760: PPUSH
44761: CALL_OW 546
44765: ST_TO_ADDR
// if hex [ 1 ] then
44766: LD_VAR 0 15
44770: PUSH
44771: LD_INT 1
44773: ARRAY
44774: IFFALSE 44778
// exit ;
44776: GO 45219
// height := hex [ 2 ] ;
44778: LD_ADDR_VAR 0 13
44782: PUSH
44783: LD_VAR 0 15
44787: PUSH
44788: LD_INT 2
44790: ARRAY
44791: ST_TO_ADDR
// for i = 1 to hexes do
44792: LD_ADDR_VAR 0 7
44796: PUSH
44797: DOUBLE
44798: LD_INT 1
44800: DEC
44801: ST_TO_ADDR
44802: LD_VAR 0 12
44806: PUSH
44807: FOR_TO
44808: IFFALSE 45138
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
44810: LD_VAR 0 12
44814: PUSH
44815: LD_VAR 0 7
44819: ARRAY
44820: PUSH
44821: LD_INT 1
44823: ARRAY
44824: PPUSH
44825: LD_VAR 0 12
44829: PUSH
44830: LD_VAR 0 7
44834: ARRAY
44835: PUSH
44836: LD_INT 2
44838: ARRAY
44839: PPUSH
44840: CALL_OW 488
44844: NOT
44845: PUSH
44846: LD_VAR 0 12
44850: PUSH
44851: LD_VAR 0 7
44855: ARRAY
44856: PUSH
44857: LD_INT 1
44859: ARRAY
44860: PPUSH
44861: LD_VAR 0 12
44865: PUSH
44866: LD_VAR 0 7
44870: ARRAY
44871: PUSH
44872: LD_INT 2
44874: ARRAY
44875: PPUSH
44876: CALL_OW 428
44880: PUSH
44881: LD_INT 0
44883: GREATER
44884: OR
44885: PUSH
44886: LD_VAR 0 12
44890: PUSH
44891: LD_VAR 0 7
44895: ARRAY
44896: PUSH
44897: LD_INT 1
44899: ARRAY
44900: PPUSH
44901: LD_VAR 0 12
44905: PUSH
44906: LD_VAR 0 7
44910: ARRAY
44911: PUSH
44912: LD_INT 2
44914: ARRAY
44915: PPUSH
44916: CALL_OW 351
44920: OR
44921: IFFALSE 44927
// exit ;
44923: POP
44924: POP
44925: GO 45219
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44927: LD_ADDR_VAR 0 8
44931: PUSH
44932: LD_VAR 0 12
44936: PUSH
44937: LD_VAR 0 7
44941: ARRAY
44942: PUSH
44943: LD_INT 1
44945: ARRAY
44946: PPUSH
44947: LD_VAR 0 12
44951: PUSH
44952: LD_VAR 0 7
44956: ARRAY
44957: PUSH
44958: LD_INT 2
44960: ARRAY
44961: PPUSH
44962: CALL_OW 546
44966: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
44967: LD_VAR 0 8
44971: PUSH
44972: LD_INT 1
44974: ARRAY
44975: PUSH
44976: LD_VAR 0 8
44980: PUSH
44981: LD_INT 2
44983: ARRAY
44984: PUSH
44985: LD_VAR 0 13
44989: PUSH
44990: LD_INT 2
44992: PLUS
44993: GREATER
44994: OR
44995: PUSH
44996: LD_VAR 0 8
45000: PUSH
45001: LD_INT 2
45003: ARRAY
45004: PUSH
45005: LD_VAR 0 13
45009: PUSH
45010: LD_INT 2
45012: MINUS
45013: LESS
45014: OR
45015: PUSH
45016: LD_VAR 0 8
45020: PUSH
45021: LD_INT 3
45023: ARRAY
45024: PUSH
45025: LD_INT 0
45027: PUSH
45028: LD_INT 8
45030: PUSH
45031: LD_INT 9
45033: PUSH
45034: LD_INT 10
45036: PUSH
45037: LD_INT 11
45039: PUSH
45040: LD_INT 12
45042: PUSH
45043: LD_INT 13
45045: PUSH
45046: LD_INT 16
45048: PUSH
45049: LD_INT 17
45051: PUSH
45052: LD_INT 18
45054: PUSH
45055: LD_INT 19
45057: PUSH
45058: LD_INT 20
45060: PUSH
45061: LD_INT 21
45063: PUSH
45064: EMPTY
45065: LIST
45066: LIST
45067: LIST
45068: LIST
45069: LIST
45070: LIST
45071: LIST
45072: LIST
45073: LIST
45074: LIST
45075: LIST
45076: LIST
45077: LIST
45078: IN
45079: NOT
45080: OR
45081: PUSH
45082: LD_VAR 0 8
45086: PUSH
45087: LD_INT 5
45089: ARRAY
45090: NOT
45091: OR
45092: PUSH
45093: LD_VAR 0 8
45097: PUSH
45098: LD_INT 6
45100: ARRAY
45101: PUSH
45102: LD_INT 1
45104: PUSH
45105: LD_INT 2
45107: PUSH
45108: LD_INT 7
45110: PUSH
45111: LD_INT 9
45113: PUSH
45114: LD_INT 10
45116: PUSH
45117: LD_INT 11
45119: PUSH
45120: EMPTY
45121: LIST
45122: LIST
45123: LIST
45124: LIST
45125: LIST
45126: LIST
45127: IN
45128: NOT
45129: OR
45130: IFFALSE 45136
// exit ;
45132: POP
45133: POP
45134: GO 45219
// end ;
45136: GO 44807
45138: POP
45139: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
45140: LD_VAR 0 9
45144: PPUSH
45145: LD_VAR 0 3
45149: PPUSH
45150: LD_VAR 0 4
45154: PPUSH
45155: LD_INT 20
45157: PPUSH
45158: CALL 37171 0 4
45162: PUSH
45163: LD_INT 4
45165: ARRAY
45166: IFFALSE 45170
// exit ;
45168: GO 45219
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
45170: LD_VAR 0 2
45174: PUSH
45175: LD_INT 29
45177: PUSH
45178: LD_INT 30
45180: PUSH
45181: EMPTY
45182: LIST
45183: LIST
45184: IN
45185: PUSH
45186: LD_VAR 0 3
45190: PPUSH
45191: LD_VAR 0 4
45195: PPUSH
45196: LD_VAR 0 9
45200: PPUSH
45201: CALL_OW 440
45205: NOT
45206: AND
45207: IFFALSE 45211
// exit ;
45209: GO 45219
// result := true ;
45211: LD_ADDR_VAR 0 6
45215: PUSH
45216: LD_INT 1
45218: ST_TO_ADDR
// end ;
45219: LD_VAR 0 6
45223: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
45224: LD_INT 0
45226: PPUSH
45227: PPUSH
45228: PPUSH
45229: PPUSH
45230: PPUSH
45231: PPUSH
45232: PPUSH
45233: PPUSH
45234: PPUSH
45235: PPUSH
45236: PPUSH
45237: PPUSH
45238: PPUSH
45239: PPUSH
45240: PPUSH
45241: PPUSH
45242: PPUSH
45243: PPUSH
45244: PPUSH
45245: PPUSH
45246: PPUSH
45247: PPUSH
45248: PPUSH
45249: PPUSH
45250: PPUSH
45251: PPUSH
45252: PPUSH
45253: PPUSH
45254: PPUSH
45255: PPUSH
45256: PPUSH
45257: PPUSH
45258: PPUSH
45259: PPUSH
45260: PPUSH
45261: PPUSH
45262: PPUSH
45263: PPUSH
45264: PPUSH
45265: PPUSH
45266: PPUSH
45267: PPUSH
45268: PPUSH
45269: PPUSH
45270: PPUSH
45271: PPUSH
45272: PPUSH
45273: PPUSH
45274: PPUSH
45275: PPUSH
45276: PPUSH
45277: PPUSH
45278: PPUSH
45279: PPUSH
45280: PPUSH
45281: PPUSH
45282: PPUSH
45283: PPUSH
// result = [ ] ;
45284: LD_ADDR_VAR 0 7
45288: PUSH
45289: EMPTY
45290: ST_TO_ADDR
// temp_list = [ ] ;
45291: LD_ADDR_VAR 0 9
45295: PUSH
45296: EMPTY
45297: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
45298: LD_VAR 0 4
45302: PUSH
45303: LD_INT 0
45305: PUSH
45306: LD_INT 1
45308: PUSH
45309: LD_INT 2
45311: PUSH
45312: LD_INT 3
45314: PUSH
45315: LD_INT 4
45317: PUSH
45318: LD_INT 5
45320: PUSH
45321: EMPTY
45322: LIST
45323: LIST
45324: LIST
45325: LIST
45326: LIST
45327: LIST
45328: IN
45329: NOT
45330: PUSH
45331: LD_VAR 0 1
45335: PUSH
45336: LD_INT 0
45338: PUSH
45339: LD_INT 1
45341: PUSH
45342: EMPTY
45343: LIST
45344: LIST
45345: IN
45346: PUSH
45347: LD_VAR 0 5
45351: PUSH
45352: LD_INT 1
45354: PUSH
45355: LD_INT 2
45357: PUSH
45358: LD_INT 3
45360: PUSH
45361: EMPTY
45362: LIST
45363: LIST
45364: LIST
45365: IN
45366: NOT
45367: AND
45368: OR
45369: IFFALSE 45373
// exit ;
45371: GO 63764
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
45373: LD_VAR 0 1
45377: PUSH
45378: LD_INT 6
45380: PUSH
45381: LD_INT 7
45383: PUSH
45384: LD_INT 8
45386: PUSH
45387: LD_INT 13
45389: PUSH
45390: LD_INT 12
45392: PUSH
45393: LD_INT 15
45395: PUSH
45396: LD_INT 11
45398: PUSH
45399: LD_INT 14
45401: PUSH
45402: LD_INT 10
45404: PUSH
45405: EMPTY
45406: LIST
45407: LIST
45408: LIST
45409: LIST
45410: LIST
45411: LIST
45412: LIST
45413: LIST
45414: LIST
45415: IN
45416: IFFALSE 45426
// btype = b_lab ;
45418: LD_ADDR_VAR 0 1
45422: PUSH
45423: LD_INT 6
45425: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
45426: LD_VAR 0 6
45430: PUSH
45431: LD_INT 0
45433: PUSH
45434: LD_INT 1
45436: PUSH
45437: LD_INT 2
45439: PUSH
45440: EMPTY
45441: LIST
45442: LIST
45443: LIST
45444: IN
45445: NOT
45446: PUSH
45447: LD_VAR 0 1
45451: PUSH
45452: LD_INT 0
45454: PUSH
45455: LD_INT 1
45457: PUSH
45458: LD_INT 2
45460: PUSH
45461: LD_INT 3
45463: PUSH
45464: LD_INT 6
45466: PUSH
45467: LD_INT 36
45469: PUSH
45470: LD_INT 4
45472: PUSH
45473: LD_INT 5
45475: PUSH
45476: LD_INT 31
45478: PUSH
45479: LD_INT 32
45481: PUSH
45482: LD_INT 33
45484: PUSH
45485: EMPTY
45486: LIST
45487: LIST
45488: LIST
45489: LIST
45490: LIST
45491: LIST
45492: LIST
45493: LIST
45494: LIST
45495: LIST
45496: LIST
45497: IN
45498: NOT
45499: PUSH
45500: LD_VAR 0 6
45504: PUSH
45505: LD_INT 1
45507: EQUAL
45508: AND
45509: OR
45510: PUSH
45511: LD_VAR 0 1
45515: PUSH
45516: LD_INT 2
45518: PUSH
45519: LD_INT 3
45521: PUSH
45522: EMPTY
45523: LIST
45524: LIST
45525: IN
45526: NOT
45527: PUSH
45528: LD_VAR 0 6
45532: PUSH
45533: LD_INT 2
45535: EQUAL
45536: AND
45537: OR
45538: IFFALSE 45548
// mode = 0 ;
45540: LD_ADDR_VAR 0 6
45544: PUSH
45545: LD_INT 0
45547: ST_TO_ADDR
// case mode of 0 :
45548: LD_VAR 0 6
45552: PUSH
45553: LD_INT 0
45555: DOUBLE
45556: EQUAL
45557: IFTRUE 45561
45559: GO 57014
45561: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45562: LD_ADDR_VAR 0 11
45566: PUSH
45567: LD_INT 0
45569: PUSH
45570: LD_INT 0
45572: PUSH
45573: EMPTY
45574: LIST
45575: LIST
45576: PUSH
45577: LD_INT 0
45579: PUSH
45580: LD_INT 1
45582: NEG
45583: PUSH
45584: EMPTY
45585: LIST
45586: LIST
45587: PUSH
45588: LD_INT 1
45590: PUSH
45591: LD_INT 0
45593: PUSH
45594: EMPTY
45595: LIST
45596: LIST
45597: PUSH
45598: LD_INT 1
45600: PUSH
45601: LD_INT 1
45603: PUSH
45604: EMPTY
45605: LIST
45606: LIST
45607: PUSH
45608: LD_INT 0
45610: PUSH
45611: LD_INT 1
45613: PUSH
45614: EMPTY
45615: LIST
45616: LIST
45617: PUSH
45618: LD_INT 1
45620: NEG
45621: PUSH
45622: LD_INT 0
45624: PUSH
45625: EMPTY
45626: LIST
45627: LIST
45628: PUSH
45629: LD_INT 1
45631: NEG
45632: PUSH
45633: LD_INT 1
45635: NEG
45636: PUSH
45637: EMPTY
45638: LIST
45639: LIST
45640: PUSH
45641: LD_INT 1
45643: NEG
45644: PUSH
45645: LD_INT 2
45647: NEG
45648: PUSH
45649: EMPTY
45650: LIST
45651: LIST
45652: PUSH
45653: LD_INT 0
45655: PUSH
45656: LD_INT 2
45658: NEG
45659: PUSH
45660: EMPTY
45661: LIST
45662: LIST
45663: PUSH
45664: LD_INT 1
45666: PUSH
45667: LD_INT 1
45669: NEG
45670: PUSH
45671: EMPTY
45672: LIST
45673: LIST
45674: PUSH
45675: LD_INT 1
45677: PUSH
45678: LD_INT 2
45680: PUSH
45681: EMPTY
45682: LIST
45683: LIST
45684: PUSH
45685: LD_INT 0
45687: PUSH
45688: LD_INT 2
45690: PUSH
45691: EMPTY
45692: LIST
45693: LIST
45694: PUSH
45695: LD_INT 1
45697: NEG
45698: PUSH
45699: LD_INT 1
45701: PUSH
45702: EMPTY
45703: LIST
45704: LIST
45705: PUSH
45706: LD_INT 1
45708: PUSH
45709: LD_INT 3
45711: PUSH
45712: EMPTY
45713: LIST
45714: LIST
45715: PUSH
45716: LD_INT 0
45718: PUSH
45719: LD_INT 3
45721: PUSH
45722: EMPTY
45723: LIST
45724: LIST
45725: PUSH
45726: LD_INT 1
45728: NEG
45729: PUSH
45730: LD_INT 2
45732: PUSH
45733: EMPTY
45734: LIST
45735: LIST
45736: PUSH
45737: EMPTY
45738: LIST
45739: LIST
45740: LIST
45741: LIST
45742: LIST
45743: LIST
45744: LIST
45745: LIST
45746: LIST
45747: LIST
45748: LIST
45749: LIST
45750: LIST
45751: LIST
45752: LIST
45753: LIST
45754: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45755: LD_ADDR_VAR 0 12
45759: PUSH
45760: LD_INT 0
45762: PUSH
45763: LD_INT 0
45765: PUSH
45766: EMPTY
45767: LIST
45768: LIST
45769: PUSH
45770: LD_INT 0
45772: PUSH
45773: LD_INT 1
45775: NEG
45776: PUSH
45777: EMPTY
45778: LIST
45779: LIST
45780: PUSH
45781: LD_INT 1
45783: PUSH
45784: LD_INT 0
45786: PUSH
45787: EMPTY
45788: LIST
45789: LIST
45790: PUSH
45791: LD_INT 1
45793: PUSH
45794: LD_INT 1
45796: PUSH
45797: EMPTY
45798: LIST
45799: LIST
45800: PUSH
45801: LD_INT 0
45803: PUSH
45804: LD_INT 1
45806: PUSH
45807: EMPTY
45808: LIST
45809: LIST
45810: PUSH
45811: LD_INT 1
45813: NEG
45814: PUSH
45815: LD_INT 0
45817: PUSH
45818: EMPTY
45819: LIST
45820: LIST
45821: PUSH
45822: LD_INT 1
45824: NEG
45825: PUSH
45826: LD_INT 1
45828: NEG
45829: PUSH
45830: EMPTY
45831: LIST
45832: LIST
45833: PUSH
45834: LD_INT 1
45836: PUSH
45837: LD_INT 1
45839: NEG
45840: PUSH
45841: EMPTY
45842: LIST
45843: LIST
45844: PUSH
45845: LD_INT 2
45847: PUSH
45848: LD_INT 0
45850: PUSH
45851: EMPTY
45852: LIST
45853: LIST
45854: PUSH
45855: LD_INT 2
45857: PUSH
45858: LD_INT 1
45860: PUSH
45861: EMPTY
45862: LIST
45863: LIST
45864: PUSH
45865: LD_INT 1
45867: NEG
45868: PUSH
45869: LD_INT 1
45871: PUSH
45872: EMPTY
45873: LIST
45874: LIST
45875: PUSH
45876: LD_INT 2
45878: NEG
45879: PUSH
45880: LD_INT 0
45882: PUSH
45883: EMPTY
45884: LIST
45885: LIST
45886: PUSH
45887: LD_INT 2
45889: NEG
45890: PUSH
45891: LD_INT 1
45893: NEG
45894: PUSH
45895: EMPTY
45896: LIST
45897: LIST
45898: PUSH
45899: LD_INT 2
45901: NEG
45902: PUSH
45903: LD_INT 1
45905: PUSH
45906: EMPTY
45907: LIST
45908: LIST
45909: PUSH
45910: LD_INT 3
45912: NEG
45913: PUSH
45914: LD_INT 0
45916: PUSH
45917: EMPTY
45918: LIST
45919: LIST
45920: PUSH
45921: LD_INT 3
45923: NEG
45924: PUSH
45925: LD_INT 1
45927: NEG
45928: PUSH
45929: EMPTY
45930: LIST
45931: LIST
45932: PUSH
45933: EMPTY
45934: LIST
45935: LIST
45936: LIST
45937: LIST
45938: LIST
45939: LIST
45940: LIST
45941: LIST
45942: LIST
45943: LIST
45944: LIST
45945: LIST
45946: LIST
45947: LIST
45948: LIST
45949: LIST
45950: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45951: LD_ADDR_VAR 0 13
45955: PUSH
45956: LD_INT 0
45958: PUSH
45959: LD_INT 0
45961: PUSH
45962: EMPTY
45963: LIST
45964: LIST
45965: PUSH
45966: LD_INT 0
45968: PUSH
45969: LD_INT 1
45971: NEG
45972: PUSH
45973: EMPTY
45974: LIST
45975: LIST
45976: PUSH
45977: LD_INT 1
45979: PUSH
45980: LD_INT 0
45982: PUSH
45983: EMPTY
45984: LIST
45985: LIST
45986: PUSH
45987: LD_INT 1
45989: PUSH
45990: LD_INT 1
45992: PUSH
45993: EMPTY
45994: LIST
45995: LIST
45996: PUSH
45997: LD_INT 0
45999: PUSH
46000: LD_INT 1
46002: PUSH
46003: EMPTY
46004: LIST
46005: LIST
46006: PUSH
46007: LD_INT 1
46009: NEG
46010: PUSH
46011: LD_INT 0
46013: PUSH
46014: EMPTY
46015: LIST
46016: LIST
46017: PUSH
46018: LD_INT 1
46020: NEG
46021: PUSH
46022: LD_INT 1
46024: NEG
46025: PUSH
46026: EMPTY
46027: LIST
46028: LIST
46029: PUSH
46030: LD_INT 1
46032: NEG
46033: PUSH
46034: LD_INT 2
46036: NEG
46037: PUSH
46038: EMPTY
46039: LIST
46040: LIST
46041: PUSH
46042: LD_INT 2
46044: PUSH
46045: LD_INT 1
46047: PUSH
46048: EMPTY
46049: LIST
46050: LIST
46051: PUSH
46052: LD_INT 2
46054: PUSH
46055: LD_INT 2
46057: PUSH
46058: EMPTY
46059: LIST
46060: LIST
46061: PUSH
46062: LD_INT 1
46064: PUSH
46065: LD_INT 2
46067: PUSH
46068: EMPTY
46069: LIST
46070: LIST
46071: PUSH
46072: LD_INT 2
46074: NEG
46075: PUSH
46076: LD_INT 1
46078: NEG
46079: PUSH
46080: EMPTY
46081: LIST
46082: LIST
46083: PUSH
46084: LD_INT 2
46086: NEG
46087: PUSH
46088: LD_INT 2
46090: NEG
46091: PUSH
46092: EMPTY
46093: LIST
46094: LIST
46095: PUSH
46096: LD_INT 2
46098: NEG
46099: PUSH
46100: LD_INT 3
46102: NEG
46103: PUSH
46104: EMPTY
46105: LIST
46106: LIST
46107: PUSH
46108: LD_INT 3
46110: NEG
46111: PUSH
46112: LD_INT 2
46114: NEG
46115: PUSH
46116: EMPTY
46117: LIST
46118: LIST
46119: PUSH
46120: LD_INT 3
46122: NEG
46123: PUSH
46124: LD_INT 3
46126: NEG
46127: PUSH
46128: EMPTY
46129: LIST
46130: LIST
46131: PUSH
46132: EMPTY
46133: LIST
46134: LIST
46135: LIST
46136: LIST
46137: LIST
46138: LIST
46139: LIST
46140: LIST
46141: LIST
46142: LIST
46143: LIST
46144: LIST
46145: LIST
46146: LIST
46147: LIST
46148: LIST
46149: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46150: LD_ADDR_VAR 0 14
46154: PUSH
46155: LD_INT 0
46157: PUSH
46158: LD_INT 0
46160: PUSH
46161: EMPTY
46162: LIST
46163: LIST
46164: PUSH
46165: LD_INT 0
46167: PUSH
46168: LD_INT 1
46170: NEG
46171: PUSH
46172: EMPTY
46173: LIST
46174: LIST
46175: PUSH
46176: LD_INT 1
46178: PUSH
46179: LD_INT 0
46181: PUSH
46182: EMPTY
46183: LIST
46184: LIST
46185: PUSH
46186: LD_INT 1
46188: PUSH
46189: LD_INT 1
46191: PUSH
46192: EMPTY
46193: LIST
46194: LIST
46195: PUSH
46196: LD_INT 0
46198: PUSH
46199: LD_INT 1
46201: PUSH
46202: EMPTY
46203: LIST
46204: LIST
46205: PUSH
46206: LD_INT 1
46208: NEG
46209: PUSH
46210: LD_INT 0
46212: PUSH
46213: EMPTY
46214: LIST
46215: LIST
46216: PUSH
46217: LD_INT 1
46219: NEG
46220: PUSH
46221: LD_INT 1
46223: NEG
46224: PUSH
46225: EMPTY
46226: LIST
46227: LIST
46228: PUSH
46229: LD_INT 1
46231: NEG
46232: PUSH
46233: LD_INT 2
46235: NEG
46236: PUSH
46237: EMPTY
46238: LIST
46239: LIST
46240: PUSH
46241: LD_INT 0
46243: PUSH
46244: LD_INT 2
46246: NEG
46247: PUSH
46248: EMPTY
46249: LIST
46250: LIST
46251: PUSH
46252: LD_INT 1
46254: PUSH
46255: LD_INT 1
46257: NEG
46258: PUSH
46259: EMPTY
46260: LIST
46261: LIST
46262: PUSH
46263: LD_INT 1
46265: PUSH
46266: LD_INT 2
46268: PUSH
46269: EMPTY
46270: LIST
46271: LIST
46272: PUSH
46273: LD_INT 0
46275: PUSH
46276: LD_INT 2
46278: PUSH
46279: EMPTY
46280: LIST
46281: LIST
46282: PUSH
46283: LD_INT 1
46285: NEG
46286: PUSH
46287: LD_INT 1
46289: PUSH
46290: EMPTY
46291: LIST
46292: LIST
46293: PUSH
46294: LD_INT 1
46296: NEG
46297: PUSH
46298: LD_INT 3
46300: NEG
46301: PUSH
46302: EMPTY
46303: LIST
46304: LIST
46305: PUSH
46306: LD_INT 0
46308: PUSH
46309: LD_INT 3
46311: NEG
46312: PUSH
46313: EMPTY
46314: LIST
46315: LIST
46316: PUSH
46317: LD_INT 1
46319: PUSH
46320: LD_INT 2
46322: NEG
46323: PUSH
46324: EMPTY
46325: LIST
46326: LIST
46327: PUSH
46328: EMPTY
46329: LIST
46330: LIST
46331: LIST
46332: LIST
46333: LIST
46334: LIST
46335: LIST
46336: LIST
46337: LIST
46338: LIST
46339: LIST
46340: LIST
46341: LIST
46342: LIST
46343: LIST
46344: LIST
46345: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46346: LD_ADDR_VAR 0 15
46350: PUSH
46351: LD_INT 0
46353: PUSH
46354: LD_INT 0
46356: PUSH
46357: EMPTY
46358: LIST
46359: LIST
46360: PUSH
46361: LD_INT 0
46363: PUSH
46364: LD_INT 1
46366: NEG
46367: PUSH
46368: EMPTY
46369: LIST
46370: LIST
46371: PUSH
46372: LD_INT 1
46374: PUSH
46375: LD_INT 0
46377: PUSH
46378: EMPTY
46379: LIST
46380: LIST
46381: PUSH
46382: LD_INT 1
46384: PUSH
46385: LD_INT 1
46387: PUSH
46388: EMPTY
46389: LIST
46390: LIST
46391: PUSH
46392: LD_INT 0
46394: PUSH
46395: LD_INT 1
46397: PUSH
46398: EMPTY
46399: LIST
46400: LIST
46401: PUSH
46402: LD_INT 1
46404: NEG
46405: PUSH
46406: LD_INT 0
46408: PUSH
46409: EMPTY
46410: LIST
46411: LIST
46412: PUSH
46413: LD_INT 1
46415: NEG
46416: PUSH
46417: LD_INT 1
46419: NEG
46420: PUSH
46421: EMPTY
46422: LIST
46423: LIST
46424: PUSH
46425: LD_INT 1
46427: PUSH
46428: LD_INT 1
46430: NEG
46431: PUSH
46432: EMPTY
46433: LIST
46434: LIST
46435: PUSH
46436: LD_INT 2
46438: PUSH
46439: LD_INT 0
46441: PUSH
46442: EMPTY
46443: LIST
46444: LIST
46445: PUSH
46446: LD_INT 2
46448: PUSH
46449: LD_INT 1
46451: PUSH
46452: EMPTY
46453: LIST
46454: LIST
46455: PUSH
46456: LD_INT 1
46458: NEG
46459: PUSH
46460: LD_INT 1
46462: PUSH
46463: EMPTY
46464: LIST
46465: LIST
46466: PUSH
46467: LD_INT 2
46469: NEG
46470: PUSH
46471: LD_INT 0
46473: PUSH
46474: EMPTY
46475: LIST
46476: LIST
46477: PUSH
46478: LD_INT 2
46480: NEG
46481: PUSH
46482: LD_INT 1
46484: NEG
46485: PUSH
46486: EMPTY
46487: LIST
46488: LIST
46489: PUSH
46490: LD_INT 2
46492: PUSH
46493: LD_INT 1
46495: NEG
46496: PUSH
46497: EMPTY
46498: LIST
46499: LIST
46500: PUSH
46501: LD_INT 3
46503: PUSH
46504: LD_INT 0
46506: PUSH
46507: EMPTY
46508: LIST
46509: LIST
46510: PUSH
46511: LD_INT 3
46513: PUSH
46514: LD_INT 1
46516: PUSH
46517: EMPTY
46518: LIST
46519: LIST
46520: PUSH
46521: EMPTY
46522: LIST
46523: LIST
46524: LIST
46525: LIST
46526: LIST
46527: LIST
46528: LIST
46529: LIST
46530: LIST
46531: LIST
46532: LIST
46533: LIST
46534: LIST
46535: LIST
46536: LIST
46537: LIST
46538: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46539: LD_ADDR_VAR 0 16
46543: PUSH
46544: LD_INT 0
46546: PUSH
46547: LD_INT 0
46549: PUSH
46550: EMPTY
46551: LIST
46552: LIST
46553: PUSH
46554: LD_INT 0
46556: PUSH
46557: LD_INT 1
46559: NEG
46560: PUSH
46561: EMPTY
46562: LIST
46563: LIST
46564: PUSH
46565: LD_INT 1
46567: PUSH
46568: LD_INT 0
46570: PUSH
46571: EMPTY
46572: LIST
46573: LIST
46574: PUSH
46575: LD_INT 1
46577: PUSH
46578: LD_INT 1
46580: PUSH
46581: EMPTY
46582: LIST
46583: LIST
46584: PUSH
46585: LD_INT 0
46587: PUSH
46588: LD_INT 1
46590: PUSH
46591: EMPTY
46592: LIST
46593: LIST
46594: PUSH
46595: LD_INT 1
46597: NEG
46598: PUSH
46599: LD_INT 0
46601: PUSH
46602: EMPTY
46603: LIST
46604: LIST
46605: PUSH
46606: LD_INT 1
46608: NEG
46609: PUSH
46610: LD_INT 1
46612: NEG
46613: PUSH
46614: EMPTY
46615: LIST
46616: LIST
46617: PUSH
46618: LD_INT 1
46620: NEG
46621: PUSH
46622: LD_INT 2
46624: NEG
46625: PUSH
46626: EMPTY
46627: LIST
46628: LIST
46629: PUSH
46630: LD_INT 2
46632: PUSH
46633: LD_INT 1
46635: PUSH
46636: EMPTY
46637: LIST
46638: LIST
46639: PUSH
46640: LD_INT 2
46642: PUSH
46643: LD_INT 2
46645: PUSH
46646: EMPTY
46647: LIST
46648: LIST
46649: PUSH
46650: LD_INT 1
46652: PUSH
46653: LD_INT 2
46655: PUSH
46656: EMPTY
46657: LIST
46658: LIST
46659: PUSH
46660: LD_INT 2
46662: NEG
46663: PUSH
46664: LD_INT 1
46666: NEG
46667: PUSH
46668: EMPTY
46669: LIST
46670: LIST
46671: PUSH
46672: LD_INT 2
46674: NEG
46675: PUSH
46676: LD_INT 2
46678: NEG
46679: PUSH
46680: EMPTY
46681: LIST
46682: LIST
46683: PUSH
46684: LD_INT 3
46686: PUSH
46687: LD_INT 2
46689: PUSH
46690: EMPTY
46691: LIST
46692: LIST
46693: PUSH
46694: LD_INT 3
46696: PUSH
46697: LD_INT 3
46699: PUSH
46700: EMPTY
46701: LIST
46702: LIST
46703: PUSH
46704: LD_INT 2
46706: PUSH
46707: LD_INT 3
46709: PUSH
46710: EMPTY
46711: LIST
46712: LIST
46713: PUSH
46714: EMPTY
46715: LIST
46716: LIST
46717: LIST
46718: LIST
46719: LIST
46720: LIST
46721: LIST
46722: LIST
46723: LIST
46724: LIST
46725: LIST
46726: LIST
46727: LIST
46728: LIST
46729: LIST
46730: LIST
46731: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46732: LD_ADDR_VAR 0 17
46736: PUSH
46737: LD_INT 0
46739: PUSH
46740: LD_INT 0
46742: PUSH
46743: EMPTY
46744: LIST
46745: LIST
46746: PUSH
46747: LD_INT 0
46749: PUSH
46750: LD_INT 1
46752: NEG
46753: PUSH
46754: EMPTY
46755: LIST
46756: LIST
46757: PUSH
46758: LD_INT 1
46760: PUSH
46761: LD_INT 0
46763: PUSH
46764: EMPTY
46765: LIST
46766: LIST
46767: PUSH
46768: LD_INT 1
46770: PUSH
46771: LD_INT 1
46773: PUSH
46774: EMPTY
46775: LIST
46776: LIST
46777: PUSH
46778: LD_INT 0
46780: PUSH
46781: LD_INT 1
46783: PUSH
46784: EMPTY
46785: LIST
46786: LIST
46787: PUSH
46788: LD_INT 1
46790: NEG
46791: PUSH
46792: LD_INT 0
46794: PUSH
46795: EMPTY
46796: LIST
46797: LIST
46798: PUSH
46799: LD_INT 1
46801: NEG
46802: PUSH
46803: LD_INT 1
46805: NEG
46806: PUSH
46807: EMPTY
46808: LIST
46809: LIST
46810: PUSH
46811: LD_INT 1
46813: NEG
46814: PUSH
46815: LD_INT 2
46817: NEG
46818: PUSH
46819: EMPTY
46820: LIST
46821: LIST
46822: PUSH
46823: LD_INT 0
46825: PUSH
46826: LD_INT 2
46828: NEG
46829: PUSH
46830: EMPTY
46831: LIST
46832: LIST
46833: PUSH
46834: LD_INT 1
46836: PUSH
46837: LD_INT 1
46839: NEG
46840: PUSH
46841: EMPTY
46842: LIST
46843: LIST
46844: PUSH
46845: LD_INT 2
46847: PUSH
46848: LD_INT 0
46850: PUSH
46851: EMPTY
46852: LIST
46853: LIST
46854: PUSH
46855: LD_INT 2
46857: PUSH
46858: LD_INT 1
46860: PUSH
46861: EMPTY
46862: LIST
46863: LIST
46864: PUSH
46865: LD_INT 2
46867: PUSH
46868: LD_INT 2
46870: PUSH
46871: EMPTY
46872: LIST
46873: LIST
46874: PUSH
46875: LD_INT 1
46877: PUSH
46878: LD_INT 2
46880: PUSH
46881: EMPTY
46882: LIST
46883: LIST
46884: PUSH
46885: LD_INT 0
46887: PUSH
46888: LD_INT 2
46890: PUSH
46891: EMPTY
46892: LIST
46893: LIST
46894: PUSH
46895: LD_INT 1
46897: NEG
46898: PUSH
46899: LD_INT 1
46901: PUSH
46902: EMPTY
46903: LIST
46904: LIST
46905: PUSH
46906: LD_INT 2
46908: NEG
46909: PUSH
46910: LD_INT 0
46912: PUSH
46913: EMPTY
46914: LIST
46915: LIST
46916: PUSH
46917: LD_INT 2
46919: NEG
46920: PUSH
46921: LD_INT 1
46923: NEG
46924: PUSH
46925: EMPTY
46926: LIST
46927: LIST
46928: PUSH
46929: LD_INT 2
46931: NEG
46932: PUSH
46933: LD_INT 2
46935: NEG
46936: PUSH
46937: EMPTY
46938: LIST
46939: LIST
46940: PUSH
46941: EMPTY
46942: LIST
46943: LIST
46944: LIST
46945: LIST
46946: LIST
46947: LIST
46948: LIST
46949: LIST
46950: LIST
46951: LIST
46952: LIST
46953: LIST
46954: LIST
46955: LIST
46956: LIST
46957: LIST
46958: LIST
46959: LIST
46960: LIST
46961: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46962: LD_ADDR_VAR 0 18
46966: PUSH
46967: LD_INT 0
46969: PUSH
46970: LD_INT 0
46972: PUSH
46973: EMPTY
46974: LIST
46975: LIST
46976: PUSH
46977: LD_INT 0
46979: PUSH
46980: LD_INT 1
46982: NEG
46983: PUSH
46984: EMPTY
46985: LIST
46986: LIST
46987: PUSH
46988: LD_INT 1
46990: PUSH
46991: LD_INT 0
46993: PUSH
46994: EMPTY
46995: LIST
46996: LIST
46997: PUSH
46998: LD_INT 1
47000: PUSH
47001: LD_INT 1
47003: PUSH
47004: EMPTY
47005: LIST
47006: LIST
47007: PUSH
47008: LD_INT 0
47010: PUSH
47011: LD_INT 1
47013: PUSH
47014: EMPTY
47015: LIST
47016: LIST
47017: PUSH
47018: LD_INT 1
47020: NEG
47021: PUSH
47022: LD_INT 0
47024: PUSH
47025: EMPTY
47026: LIST
47027: LIST
47028: PUSH
47029: LD_INT 1
47031: NEG
47032: PUSH
47033: LD_INT 1
47035: NEG
47036: PUSH
47037: EMPTY
47038: LIST
47039: LIST
47040: PUSH
47041: LD_INT 1
47043: NEG
47044: PUSH
47045: LD_INT 2
47047: NEG
47048: PUSH
47049: EMPTY
47050: LIST
47051: LIST
47052: PUSH
47053: LD_INT 0
47055: PUSH
47056: LD_INT 2
47058: NEG
47059: PUSH
47060: EMPTY
47061: LIST
47062: LIST
47063: PUSH
47064: LD_INT 1
47066: PUSH
47067: LD_INT 1
47069: NEG
47070: PUSH
47071: EMPTY
47072: LIST
47073: LIST
47074: PUSH
47075: LD_INT 2
47077: PUSH
47078: LD_INT 0
47080: PUSH
47081: EMPTY
47082: LIST
47083: LIST
47084: PUSH
47085: LD_INT 2
47087: PUSH
47088: LD_INT 1
47090: PUSH
47091: EMPTY
47092: LIST
47093: LIST
47094: PUSH
47095: LD_INT 2
47097: PUSH
47098: LD_INT 2
47100: PUSH
47101: EMPTY
47102: LIST
47103: LIST
47104: PUSH
47105: LD_INT 1
47107: PUSH
47108: LD_INT 2
47110: PUSH
47111: EMPTY
47112: LIST
47113: LIST
47114: PUSH
47115: LD_INT 0
47117: PUSH
47118: LD_INT 2
47120: PUSH
47121: EMPTY
47122: LIST
47123: LIST
47124: PUSH
47125: LD_INT 1
47127: NEG
47128: PUSH
47129: LD_INT 1
47131: PUSH
47132: EMPTY
47133: LIST
47134: LIST
47135: PUSH
47136: LD_INT 2
47138: NEG
47139: PUSH
47140: LD_INT 0
47142: PUSH
47143: EMPTY
47144: LIST
47145: LIST
47146: PUSH
47147: LD_INT 2
47149: NEG
47150: PUSH
47151: LD_INT 1
47153: NEG
47154: PUSH
47155: EMPTY
47156: LIST
47157: LIST
47158: PUSH
47159: LD_INT 2
47161: NEG
47162: PUSH
47163: LD_INT 2
47165: NEG
47166: PUSH
47167: EMPTY
47168: LIST
47169: LIST
47170: PUSH
47171: EMPTY
47172: LIST
47173: LIST
47174: LIST
47175: LIST
47176: LIST
47177: LIST
47178: LIST
47179: LIST
47180: LIST
47181: LIST
47182: LIST
47183: LIST
47184: LIST
47185: LIST
47186: LIST
47187: LIST
47188: LIST
47189: LIST
47190: LIST
47191: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47192: LD_ADDR_VAR 0 19
47196: PUSH
47197: LD_INT 0
47199: PUSH
47200: LD_INT 0
47202: PUSH
47203: EMPTY
47204: LIST
47205: LIST
47206: PUSH
47207: LD_INT 0
47209: PUSH
47210: LD_INT 1
47212: NEG
47213: PUSH
47214: EMPTY
47215: LIST
47216: LIST
47217: PUSH
47218: LD_INT 1
47220: PUSH
47221: LD_INT 0
47223: PUSH
47224: EMPTY
47225: LIST
47226: LIST
47227: PUSH
47228: LD_INT 1
47230: PUSH
47231: LD_INT 1
47233: PUSH
47234: EMPTY
47235: LIST
47236: LIST
47237: PUSH
47238: LD_INT 0
47240: PUSH
47241: LD_INT 1
47243: PUSH
47244: EMPTY
47245: LIST
47246: LIST
47247: PUSH
47248: LD_INT 1
47250: NEG
47251: PUSH
47252: LD_INT 0
47254: PUSH
47255: EMPTY
47256: LIST
47257: LIST
47258: PUSH
47259: LD_INT 1
47261: NEG
47262: PUSH
47263: LD_INT 1
47265: NEG
47266: PUSH
47267: EMPTY
47268: LIST
47269: LIST
47270: PUSH
47271: LD_INT 1
47273: NEG
47274: PUSH
47275: LD_INT 2
47277: NEG
47278: PUSH
47279: EMPTY
47280: LIST
47281: LIST
47282: PUSH
47283: LD_INT 0
47285: PUSH
47286: LD_INT 2
47288: NEG
47289: PUSH
47290: EMPTY
47291: LIST
47292: LIST
47293: PUSH
47294: LD_INT 1
47296: PUSH
47297: LD_INT 1
47299: NEG
47300: PUSH
47301: EMPTY
47302: LIST
47303: LIST
47304: PUSH
47305: LD_INT 2
47307: PUSH
47308: LD_INT 0
47310: PUSH
47311: EMPTY
47312: LIST
47313: LIST
47314: PUSH
47315: LD_INT 2
47317: PUSH
47318: LD_INT 1
47320: PUSH
47321: EMPTY
47322: LIST
47323: LIST
47324: PUSH
47325: LD_INT 2
47327: PUSH
47328: LD_INT 2
47330: PUSH
47331: EMPTY
47332: LIST
47333: LIST
47334: PUSH
47335: LD_INT 1
47337: PUSH
47338: LD_INT 2
47340: PUSH
47341: EMPTY
47342: LIST
47343: LIST
47344: PUSH
47345: LD_INT 0
47347: PUSH
47348: LD_INT 2
47350: PUSH
47351: EMPTY
47352: LIST
47353: LIST
47354: PUSH
47355: LD_INT 1
47357: NEG
47358: PUSH
47359: LD_INT 1
47361: PUSH
47362: EMPTY
47363: LIST
47364: LIST
47365: PUSH
47366: LD_INT 2
47368: NEG
47369: PUSH
47370: LD_INT 0
47372: PUSH
47373: EMPTY
47374: LIST
47375: LIST
47376: PUSH
47377: LD_INT 2
47379: NEG
47380: PUSH
47381: LD_INT 1
47383: NEG
47384: PUSH
47385: EMPTY
47386: LIST
47387: LIST
47388: PUSH
47389: LD_INT 2
47391: NEG
47392: PUSH
47393: LD_INT 2
47395: NEG
47396: PUSH
47397: EMPTY
47398: LIST
47399: LIST
47400: PUSH
47401: EMPTY
47402: LIST
47403: LIST
47404: LIST
47405: LIST
47406: LIST
47407: LIST
47408: LIST
47409: LIST
47410: LIST
47411: LIST
47412: LIST
47413: LIST
47414: LIST
47415: LIST
47416: LIST
47417: LIST
47418: LIST
47419: LIST
47420: LIST
47421: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47422: LD_ADDR_VAR 0 20
47426: PUSH
47427: LD_INT 0
47429: PUSH
47430: LD_INT 0
47432: PUSH
47433: EMPTY
47434: LIST
47435: LIST
47436: PUSH
47437: LD_INT 0
47439: PUSH
47440: LD_INT 1
47442: NEG
47443: PUSH
47444: EMPTY
47445: LIST
47446: LIST
47447: PUSH
47448: LD_INT 1
47450: PUSH
47451: LD_INT 0
47453: PUSH
47454: EMPTY
47455: LIST
47456: LIST
47457: PUSH
47458: LD_INT 1
47460: PUSH
47461: LD_INT 1
47463: PUSH
47464: EMPTY
47465: LIST
47466: LIST
47467: PUSH
47468: LD_INT 0
47470: PUSH
47471: LD_INT 1
47473: PUSH
47474: EMPTY
47475: LIST
47476: LIST
47477: PUSH
47478: LD_INT 1
47480: NEG
47481: PUSH
47482: LD_INT 0
47484: PUSH
47485: EMPTY
47486: LIST
47487: LIST
47488: PUSH
47489: LD_INT 1
47491: NEG
47492: PUSH
47493: LD_INT 1
47495: NEG
47496: PUSH
47497: EMPTY
47498: LIST
47499: LIST
47500: PUSH
47501: LD_INT 1
47503: NEG
47504: PUSH
47505: LD_INT 2
47507: NEG
47508: PUSH
47509: EMPTY
47510: LIST
47511: LIST
47512: PUSH
47513: LD_INT 0
47515: PUSH
47516: LD_INT 2
47518: NEG
47519: PUSH
47520: EMPTY
47521: LIST
47522: LIST
47523: PUSH
47524: LD_INT 1
47526: PUSH
47527: LD_INT 1
47529: NEG
47530: PUSH
47531: EMPTY
47532: LIST
47533: LIST
47534: PUSH
47535: LD_INT 2
47537: PUSH
47538: LD_INT 0
47540: PUSH
47541: EMPTY
47542: LIST
47543: LIST
47544: PUSH
47545: LD_INT 2
47547: PUSH
47548: LD_INT 1
47550: PUSH
47551: EMPTY
47552: LIST
47553: LIST
47554: PUSH
47555: LD_INT 2
47557: PUSH
47558: LD_INT 2
47560: PUSH
47561: EMPTY
47562: LIST
47563: LIST
47564: PUSH
47565: LD_INT 1
47567: PUSH
47568: LD_INT 2
47570: PUSH
47571: EMPTY
47572: LIST
47573: LIST
47574: PUSH
47575: LD_INT 0
47577: PUSH
47578: LD_INT 2
47580: PUSH
47581: EMPTY
47582: LIST
47583: LIST
47584: PUSH
47585: LD_INT 1
47587: NEG
47588: PUSH
47589: LD_INT 1
47591: PUSH
47592: EMPTY
47593: LIST
47594: LIST
47595: PUSH
47596: LD_INT 2
47598: NEG
47599: PUSH
47600: LD_INT 0
47602: PUSH
47603: EMPTY
47604: LIST
47605: LIST
47606: PUSH
47607: LD_INT 2
47609: NEG
47610: PUSH
47611: LD_INT 1
47613: NEG
47614: PUSH
47615: EMPTY
47616: LIST
47617: LIST
47618: PUSH
47619: LD_INT 2
47621: NEG
47622: PUSH
47623: LD_INT 2
47625: NEG
47626: PUSH
47627: EMPTY
47628: LIST
47629: LIST
47630: PUSH
47631: EMPTY
47632: LIST
47633: LIST
47634: LIST
47635: LIST
47636: LIST
47637: LIST
47638: LIST
47639: LIST
47640: LIST
47641: LIST
47642: LIST
47643: LIST
47644: LIST
47645: LIST
47646: LIST
47647: LIST
47648: LIST
47649: LIST
47650: LIST
47651: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47652: LD_ADDR_VAR 0 21
47656: PUSH
47657: LD_INT 0
47659: PUSH
47660: LD_INT 0
47662: PUSH
47663: EMPTY
47664: LIST
47665: LIST
47666: PUSH
47667: LD_INT 0
47669: PUSH
47670: LD_INT 1
47672: NEG
47673: PUSH
47674: EMPTY
47675: LIST
47676: LIST
47677: PUSH
47678: LD_INT 1
47680: PUSH
47681: LD_INT 0
47683: PUSH
47684: EMPTY
47685: LIST
47686: LIST
47687: PUSH
47688: LD_INT 1
47690: PUSH
47691: LD_INT 1
47693: PUSH
47694: EMPTY
47695: LIST
47696: LIST
47697: PUSH
47698: LD_INT 0
47700: PUSH
47701: LD_INT 1
47703: PUSH
47704: EMPTY
47705: LIST
47706: LIST
47707: PUSH
47708: LD_INT 1
47710: NEG
47711: PUSH
47712: LD_INT 0
47714: PUSH
47715: EMPTY
47716: LIST
47717: LIST
47718: PUSH
47719: LD_INT 1
47721: NEG
47722: PUSH
47723: LD_INT 1
47725: NEG
47726: PUSH
47727: EMPTY
47728: LIST
47729: LIST
47730: PUSH
47731: LD_INT 1
47733: NEG
47734: PUSH
47735: LD_INT 2
47737: NEG
47738: PUSH
47739: EMPTY
47740: LIST
47741: LIST
47742: PUSH
47743: LD_INT 0
47745: PUSH
47746: LD_INT 2
47748: NEG
47749: PUSH
47750: EMPTY
47751: LIST
47752: LIST
47753: PUSH
47754: LD_INT 1
47756: PUSH
47757: LD_INT 1
47759: NEG
47760: PUSH
47761: EMPTY
47762: LIST
47763: LIST
47764: PUSH
47765: LD_INT 2
47767: PUSH
47768: LD_INT 0
47770: PUSH
47771: EMPTY
47772: LIST
47773: LIST
47774: PUSH
47775: LD_INT 2
47777: PUSH
47778: LD_INT 1
47780: PUSH
47781: EMPTY
47782: LIST
47783: LIST
47784: PUSH
47785: LD_INT 2
47787: PUSH
47788: LD_INT 2
47790: PUSH
47791: EMPTY
47792: LIST
47793: LIST
47794: PUSH
47795: LD_INT 1
47797: PUSH
47798: LD_INT 2
47800: PUSH
47801: EMPTY
47802: LIST
47803: LIST
47804: PUSH
47805: LD_INT 0
47807: PUSH
47808: LD_INT 2
47810: PUSH
47811: EMPTY
47812: LIST
47813: LIST
47814: PUSH
47815: LD_INT 1
47817: NEG
47818: PUSH
47819: LD_INT 1
47821: PUSH
47822: EMPTY
47823: LIST
47824: LIST
47825: PUSH
47826: LD_INT 2
47828: NEG
47829: PUSH
47830: LD_INT 0
47832: PUSH
47833: EMPTY
47834: LIST
47835: LIST
47836: PUSH
47837: LD_INT 2
47839: NEG
47840: PUSH
47841: LD_INT 1
47843: NEG
47844: PUSH
47845: EMPTY
47846: LIST
47847: LIST
47848: PUSH
47849: LD_INT 2
47851: NEG
47852: PUSH
47853: LD_INT 2
47855: NEG
47856: PUSH
47857: EMPTY
47858: LIST
47859: LIST
47860: PUSH
47861: EMPTY
47862: LIST
47863: LIST
47864: LIST
47865: LIST
47866: LIST
47867: LIST
47868: LIST
47869: LIST
47870: LIST
47871: LIST
47872: LIST
47873: LIST
47874: LIST
47875: LIST
47876: LIST
47877: LIST
47878: LIST
47879: LIST
47880: LIST
47881: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47882: LD_ADDR_VAR 0 22
47886: PUSH
47887: LD_INT 0
47889: PUSH
47890: LD_INT 0
47892: PUSH
47893: EMPTY
47894: LIST
47895: LIST
47896: PUSH
47897: LD_INT 0
47899: PUSH
47900: LD_INT 1
47902: NEG
47903: PUSH
47904: EMPTY
47905: LIST
47906: LIST
47907: PUSH
47908: LD_INT 1
47910: PUSH
47911: LD_INT 0
47913: PUSH
47914: EMPTY
47915: LIST
47916: LIST
47917: PUSH
47918: LD_INT 1
47920: PUSH
47921: LD_INT 1
47923: PUSH
47924: EMPTY
47925: LIST
47926: LIST
47927: PUSH
47928: LD_INT 0
47930: PUSH
47931: LD_INT 1
47933: PUSH
47934: EMPTY
47935: LIST
47936: LIST
47937: PUSH
47938: LD_INT 1
47940: NEG
47941: PUSH
47942: LD_INT 0
47944: PUSH
47945: EMPTY
47946: LIST
47947: LIST
47948: PUSH
47949: LD_INT 1
47951: NEG
47952: PUSH
47953: LD_INT 1
47955: NEG
47956: PUSH
47957: EMPTY
47958: LIST
47959: LIST
47960: PUSH
47961: LD_INT 1
47963: NEG
47964: PUSH
47965: LD_INT 2
47967: NEG
47968: PUSH
47969: EMPTY
47970: LIST
47971: LIST
47972: PUSH
47973: LD_INT 0
47975: PUSH
47976: LD_INT 2
47978: NEG
47979: PUSH
47980: EMPTY
47981: LIST
47982: LIST
47983: PUSH
47984: LD_INT 1
47986: PUSH
47987: LD_INT 1
47989: NEG
47990: PUSH
47991: EMPTY
47992: LIST
47993: LIST
47994: PUSH
47995: LD_INT 2
47997: PUSH
47998: LD_INT 0
48000: PUSH
48001: EMPTY
48002: LIST
48003: LIST
48004: PUSH
48005: LD_INT 2
48007: PUSH
48008: LD_INT 1
48010: PUSH
48011: EMPTY
48012: LIST
48013: LIST
48014: PUSH
48015: LD_INT 2
48017: PUSH
48018: LD_INT 2
48020: PUSH
48021: EMPTY
48022: LIST
48023: LIST
48024: PUSH
48025: LD_INT 1
48027: PUSH
48028: LD_INT 2
48030: PUSH
48031: EMPTY
48032: LIST
48033: LIST
48034: PUSH
48035: LD_INT 0
48037: PUSH
48038: LD_INT 2
48040: PUSH
48041: EMPTY
48042: LIST
48043: LIST
48044: PUSH
48045: LD_INT 1
48047: NEG
48048: PUSH
48049: LD_INT 1
48051: PUSH
48052: EMPTY
48053: LIST
48054: LIST
48055: PUSH
48056: LD_INT 2
48058: NEG
48059: PUSH
48060: LD_INT 0
48062: PUSH
48063: EMPTY
48064: LIST
48065: LIST
48066: PUSH
48067: LD_INT 2
48069: NEG
48070: PUSH
48071: LD_INT 1
48073: NEG
48074: PUSH
48075: EMPTY
48076: LIST
48077: LIST
48078: PUSH
48079: LD_INT 2
48081: NEG
48082: PUSH
48083: LD_INT 2
48085: NEG
48086: PUSH
48087: EMPTY
48088: LIST
48089: LIST
48090: PUSH
48091: EMPTY
48092: LIST
48093: LIST
48094: LIST
48095: LIST
48096: LIST
48097: LIST
48098: LIST
48099: LIST
48100: LIST
48101: LIST
48102: LIST
48103: LIST
48104: LIST
48105: LIST
48106: LIST
48107: LIST
48108: LIST
48109: LIST
48110: LIST
48111: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
48112: LD_ADDR_VAR 0 23
48116: PUSH
48117: LD_INT 0
48119: PUSH
48120: LD_INT 0
48122: PUSH
48123: EMPTY
48124: LIST
48125: LIST
48126: PUSH
48127: LD_INT 0
48129: PUSH
48130: LD_INT 1
48132: NEG
48133: PUSH
48134: EMPTY
48135: LIST
48136: LIST
48137: PUSH
48138: LD_INT 1
48140: PUSH
48141: LD_INT 0
48143: PUSH
48144: EMPTY
48145: LIST
48146: LIST
48147: PUSH
48148: LD_INT 1
48150: PUSH
48151: LD_INT 1
48153: PUSH
48154: EMPTY
48155: LIST
48156: LIST
48157: PUSH
48158: LD_INT 0
48160: PUSH
48161: LD_INT 1
48163: PUSH
48164: EMPTY
48165: LIST
48166: LIST
48167: PUSH
48168: LD_INT 1
48170: NEG
48171: PUSH
48172: LD_INT 0
48174: PUSH
48175: EMPTY
48176: LIST
48177: LIST
48178: PUSH
48179: LD_INT 1
48181: NEG
48182: PUSH
48183: LD_INT 1
48185: NEG
48186: PUSH
48187: EMPTY
48188: LIST
48189: LIST
48190: PUSH
48191: LD_INT 1
48193: NEG
48194: PUSH
48195: LD_INT 2
48197: NEG
48198: PUSH
48199: EMPTY
48200: LIST
48201: LIST
48202: PUSH
48203: LD_INT 0
48205: PUSH
48206: LD_INT 2
48208: NEG
48209: PUSH
48210: EMPTY
48211: LIST
48212: LIST
48213: PUSH
48214: LD_INT 1
48216: PUSH
48217: LD_INT 1
48219: NEG
48220: PUSH
48221: EMPTY
48222: LIST
48223: LIST
48224: PUSH
48225: LD_INT 2
48227: PUSH
48228: LD_INT 0
48230: PUSH
48231: EMPTY
48232: LIST
48233: LIST
48234: PUSH
48235: LD_INT 2
48237: PUSH
48238: LD_INT 1
48240: PUSH
48241: EMPTY
48242: LIST
48243: LIST
48244: PUSH
48245: LD_INT 2
48247: PUSH
48248: LD_INT 2
48250: PUSH
48251: EMPTY
48252: LIST
48253: LIST
48254: PUSH
48255: LD_INT 1
48257: PUSH
48258: LD_INT 2
48260: PUSH
48261: EMPTY
48262: LIST
48263: LIST
48264: PUSH
48265: LD_INT 0
48267: PUSH
48268: LD_INT 2
48270: PUSH
48271: EMPTY
48272: LIST
48273: LIST
48274: PUSH
48275: LD_INT 1
48277: NEG
48278: PUSH
48279: LD_INT 1
48281: PUSH
48282: EMPTY
48283: LIST
48284: LIST
48285: PUSH
48286: LD_INT 2
48288: NEG
48289: PUSH
48290: LD_INT 0
48292: PUSH
48293: EMPTY
48294: LIST
48295: LIST
48296: PUSH
48297: LD_INT 2
48299: NEG
48300: PUSH
48301: LD_INT 1
48303: NEG
48304: PUSH
48305: EMPTY
48306: LIST
48307: LIST
48308: PUSH
48309: LD_INT 2
48311: NEG
48312: PUSH
48313: LD_INT 2
48315: NEG
48316: PUSH
48317: EMPTY
48318: LIST
48319: LIST
48320: PUSH
48321: LD_INT 2
48323: NEG
48324: PUSH
48325: LD_INT 3
48327: NEG
48328: PUSH
48329: EMPTY
48330: LIST
48331: LIST
48332: PUSH
48333: LD_INT 1
48335: NEG
48336: PUSH
48337: LD_INT 3
48339: NEG
48340: PUSH
48341: EMPTY
48342: LIST
48343: LIST
48344: PUSH
48345: LD_INT 1
48347: PUSH
48348: LD_INT 2
48350: NEG
48351: PUSH
48352: EMPTY
48353: LIST
48354: LIST
48355: PUSH
48356: LD_INT 2
48358: PUSH
48359: LD_INT 1
48361: NEG
48362: PUSH
48363: EMPTY
48364: LIST
48365: LIST
48366: PUSH
48367: EMPTY
48368: LIST
48369: LIST
48370: LIST
48371: LIST
48372: LIST
48373: LIST
48374: LIST
48375: LIST
48376: LIST
48377: LIST
48378: LIST
48379: LIST
48380: LIST
48381: LIST
48382: LIST
48383: LIST
48384: LIST
48385: LIST
48386: LIST
48387: LIST
48388: LIST
48389: LIST
48390: LIST
48391: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
48392: LD_ADDR_VAR 0 24
48396: PUSH
48397: LD_INT 0
48399: PUSH
48400: LD_INT 0
48402: PUSH
48403: EMPTY
48404: LIST
48405: LIST
48406: PUSH
48407: LD_INT 0
48409: PUSH
48410: LD_INT 1
48412: NEG
48413: PUSH
48414: EMPTY
48415: LIST
48416: LIST
48417: PUSH
48418: LD_INT 1
48420: PUSH
48421: LD_INT 0
48423: PUSH
48424: EMPTY
48425: LIST
48426: LIST
48427: PUSH
48428: LD_INT 1
48430: PUSH
48431: LD_INT 1
48433: PUSH
48434: EMPTY
48435: LIST
48436: LIST
48437: PUSH
48438: LD_INT 0
48440: PUSH
48441: LD_INT 1
48443: PUSH
48444: EMPTY
48445: LIST
48446: LIST
48447: PUSH
48448: LD_INT 1
48450: NEG
48451: PUSH
48452: LD_INT 0
48454: PUSH
48455: EMPTY
48456: LIST
48457: LIST
48458: PUSH
48459: LD_INT 1
48461: NEG
48462: PUSH
48463: LD_INT 1
48465: NEG
48466: PUSH
48467: EMPTY
48468: LIST
48469: LIST
48470: PUSH
48471: LD_INT 1
48473: NEG
48474: PUSH
48475: LD_INT 2
48477: NEG
48478: PUSH
48479: EMPTY
48480: LIST
48481: LIST
48482: PUSH
48483: LD_INT 0
48485: PUSH
48486: LD_INT 2
48488: NEG
48489: PUSH
48490: EMPTY
48491: LIST
48492: LIST
48493: PUSH
48494: LD_INT 1
48496: PUSH
48497: LD_INT 1
48499: NEG
48500: PUSH
48501: EMPTY
48502: LIST
48503: LIST
48504: PUSH
48505: LD_INT 2
48507: PUSH
48508: LD_INT 0
48510: PUSH
48511: EMPTY
48512: LIST
48513: LIST
48514: PUSH
48515: LD_INT 2
48517: PUSH
48518: LD_INT 1
48520: PUSH
48521: EMPTY
48522: LIST
48523: LIST
48524: PUSH
48525: LD_INT 2
48527: PUSH
48528: LD_INT 2
48530: PUSH
48531: EMPTY
48532: LIST
48533: LIST
48534: PUSH
48535: LD_INT 1
48537: PUSH
48538: LD_INT 2
48540: PUSH
48541: EMPTY
48542: LIST
48543: LIST
48544: PUSH
48545: LD_INT 0
48547: PUSH
48548: LD_INT 2
48550: PUSH
48551: EMPTY
48552: LIST
48553: LIST
48554: PUSH
48555: LD_INT 1
48557: NEG
48558: PUSH
48559: LD_INT 1
48561: PUSH
48562: EMPTY
48563: LIST
48564: LIST
48565: PUSH
48566: LD_INT 2
48568: NEG
48569: PUSH
48570: LD_INT 0
48572: PUSH
48573: EMPTY
48574: LIST
48575: LIST
48576: PUSH
48577: LD_INT 2
48579: NEG
48580: PUSH
48581: LD_INT 1
48583: NEG
48584: PUSH
48585: EMPTY
48586: LIST
48587: LIST
48588: PUSH
48589: LD_INT 2
48591: NEG
48592: PUSH
48593: LD_INT 2
48595: NEG
48596: PUSH
48597: EMPTY
48598: LIST
48599: LIST
48600: PUSH
48601: LD_INT 1
48603: PUSH
48604: LD_INT 2
48606: NEG
48607: PUSH
48608: EMPTY
48609: LIST
48610: LIST
48611: PUSH
48612: LD_INT 2
48614: PUSH
48615: LD_INT 1
48617: NEG
48618: PUSH
48619: EMPTY
48620: LIST
48621: LIST
48622: PUSH
48623: LD_INT 3
48625: PUSH
48626: LD_INT 1
48628: PUSH
48629: EMPTY
48630: LIST
48631: LIST
48632: PUSH
48633: LD_INT 3
48635: PUSH
48636: LD_INT 2
48638: PUSH
48639: EMPTY
48640: LIST
48641: LIST
48642: PUSH
48643: EMPTY
48644: LIST
48645: LIST
48646: LIST
48647: LIST
48648: LIST
48649: LIST
48650: LIST
48651: LIST
48652: LIST
48653: LIST
48654: LIST
48655: LIST
48656: LIST
48657: LIST
48658: LIST
48659: LIST
48660: LIST
48661: LIST
48662: LIST
48663: LIST
48664: LIST
48665: LIST
48666: LIST
48667: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
48668: LD_ADDR_VAR 0 25
48672: PUSH
48673: LD_INT 0
48675: PUSH
48676: LD_INT 0
48678: PUSH
48679: EMPTY
48680: LIST
48681: LIST
48682: PUSH
48683: LD_INT 0
48685: PUSH
48686: LD_INT 1
48688: NEG
48689: PUSH
48690: EMPTY
48691: LIST
48692: LIST
48693: PUSH
48694: LD_INT 1
48696: PUSH
48697: LD_INT 0
48699: PUSH
48700: EMPTY
48701: LIST
48702: LIST
48703: PUSH
48704: LD_INT 1
48706: PUSH
48707: LD_INT 1
48709: PUSH
48710: EMPTY
48711: LIST
48712: LIST
48713: PUSH
48714: LD_INT 0
48716: PUSH
48717: LD_INT 1
48719: PUSH
48720: EMPTY
48721: LIST
48722: LIST
48723: PUSH
48724: LD_INT 1
48726: NEG
48727: PUSH
48728: LD_INT 0
48730: PUSH
48731: EMPTY
48732: LIST
48733: LIST
48734: PUSH
48735: LD_INT 1
48737: NEG
48738: PUSH
48739: LD_INT 1
48741: NEG
48742: PUSH
48743: EMPTY
48744: LIST
48745: LIST
48746: PUSH
48747: LD_INT 1
48749: NEG
48750: PUSH
48751: LD_INT 2
48753: NEG
48754: PUSH
48755: EMPTY
48756: LIST
48757: LIST
48758: PUSH
48759: LD_INT 0
48761: PUSH
48762: LD_INT 2
48764: NEG
48765: PUSH
48766: EMPTY
48767: LIST
48768: LIST
48769: PUSH
48770: LD_INT 1
48772: PUSH
48773: LD_INT 1
48775: NEG
48776: PUSH
48777: EMPTY
48778: LIST
48779: LIST
48780: PUSH
48781: LD_INT 2
48783: PUSH
48784: LD_INT 0
48786: PUSH
48787: EMPTY
48788: LIST
48789: LIST
48790: PUSH
48791: LD_INT 2
48793: PUSH
48794: LD_INT 1
48796: PUSH
48797: EMPTY
48798: LIST
48799: LIST
48800: PUSH
48801: LD_INT 2
48803: PUSH
48804: LD_INT 2
48806: PUSH
48807: EMPTY
48808: LIST
48809: LIST
48810: PUSH
48811: LD_INT 1
48813: PUSH
48814: LD_INT 2
48816: PUSH
48817: EMPTY
48818: LIST
48819: LIST
48820: PUSH
48821: LD_INT 0
48823: PUSH
48824: LD_INT 2
48826: PUSH
48827: EMPTY
48828: LIST
48829: LIST
48830: PUSH
48831: LD_INT 1
48833: NEG
48834: PUSH
48835: LD_INT 1
48837: PUSH
48838: EMPTY
48839: LIST
48840: LIST
48841: PUSH
48842: LD_INT 2
48844: NEG
48845: PUSH
48846: LD_INT 0
48848: PUSH
48849: EMPTY
48850: LIST
48851: LIST
48852: PUSH
48853: LD_INT 2
48855: NEG
48856: PUSH
48857: LD_INT 1
48859: NEG
48860: PUSH
48861: EMPTY
48862: LIST
48863: LIST
48864: PUSH
48865: LD_INT 2
48867: NEG
48868: PUSH
48869: LD_INT 2
48871: NEG
48872: PUSH
48873: EMPTY
48874: LIST
48875: LIST
48876: PUSH
48877: LD_INT 3
48879: PUSH
48880: LD_INT 1
48882: PUSH
48883: EMPTY
48884: LIST
48885: LIST
48886: PUSH
48887: LD_INT 3
48889: PUSH
48890: LD_INT 2
48892: PUSH
48893: EMPTY
48894: LIST
48895: LIST
48896: PUSH
48897: LD_INT 2
48899: PUSH
48900: LD_INT 3
48902: PUSH
48903: EMPTY
48904: LIST
48905: LIST
48906: PUSH
48907: LD_INT 1
48909: PUSH
48910: LD_INT 3
48912: PUSH
48913: EMPTY
48914: LIST
48915: LIST
48916: PUSH
48917: EMPTY
48918: LIST
48919: LIST
48920: LIST
48921: LIST
48922: LIST
48923: LIST
48924: LIST
48925: LIST
48926: LIST
48927: LIST
48928: LIST
48929: LIST
48930: LIST
48931: LIST
48932: LIST
48933: LIST
48934: LIST
48935: LIST
48936: LIST
48937: LIST
48938: LIST
48939: LIST
48940: LIST
48941: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
48942: LD_ADDR_VAR 0 26
48946: PUSH
48947: LD_INT 0
48949: PUSH
48950: LD_INT 0
48952: PUSH
48953: EMPTY
48954: LIST
48955: LIST
48956: PUSH
48957: LD_INT 0
48959: PUSH
48960: LD_INT 1
48962: NEG
48963: PUSH
48964: EMPTY
48965: LIST
48966: LIST
48967: PUSH
48968: LD_INT 1
48970: PUSH
48971: LD_INT 0
48973: PUSH
48974: EMPTY
48975: LIST
48976: LIST
48977: PUSH
48978: LD_INT 1
48980: PUSH
48981: LD_INT 1
48983: PUSH
48984: EMPTY
48985: LIST
48986: LIST
48987: PUSH
48988: LD_INT 0
48990: PUSH
48991: LD_INT 1
48993: PUSH
48994: EMPTY
48995: LIST
48996: LIST
48997: PUSH
48998: LD_INT 1
49000: NEG
49001: PUSH
49002: LD_INT 0
49004: PUSH
49005: EMPTY
49006: LIST
49007: LIST
49008: PUSH
49009: LD_INT 1
49011: NEG
49012: PUSH
49013: LD_INT 1
49015: NEG
49016: PUSH
49017: EMPTY
49018: LIST
49019: LIST
49020: PUSH
49021: LD_INT 1
49023: NEG
49024: PUSH
49025: LD_INT 2
49027: NEG
49028: PUSH
49029: EMPTY
49030: LIST
49031: LIST
49032: PUSH
49033: LD_INT 0
49035: PUSH
49036: LD_INT 2
49038: NEG
49039: PUSH
49040: EMPTY
49041: LIST
49042: LIST
49043: PUSH
49044: LD_INT 1
49046: PUSH
49047: LD_INT 1
49049: NEG
49050: PUSH
49051: EMPTY
49052: LIST
49053: LIST
49054: PUSH
49055: LD_INT 2
49057: PUSH
49058: LD_INT 0
49060: PUSH
49061: EMPTY
49062: LIST
49063: LIST
49064: PUSH
49065: LD_INT 2
49067: PUSH
49068: LD_INT 1
49070: PUSH
49071: EMPTY
49072: LIST
49073: LIST
49074: PUSH
49075: LD_INT 2
49077: PUSH
49078: LD_INT 2
49080: PUSH
49081: EMPTY
49082: LIST
49083: LIST
49084: PUSH
49085: LD_INT 1
49087: PUSH
49088: LD_INT 2
49090: PUSH
49091: EMPTY
49092: LIST
49093: LIST
49094: PUSH
49095: LD_INT 0
49097: PUSH
49098: LD_INT 2
49100: PUSH
49101: EMPTY
49102: LIST
49103: LIST
49104: PUSH
49105: LD_INT 1
49107: NEG
49108: PUSH
49109: LD_INT 1
49111: PUSH
49112: EMPTY
49113: LIST
49114: LIST
49115: PUSH
49116: LD_INT 2
49118: NEG
49119: PUSH
49120: LD_INT 0
49122: PUSH
49123: EMPTY
49124: LIST
49125: LIST
49126: PUSH
49127: LD_INT 2
49129: NEG
49130: PUSH
49131: LD_INT 1
49133: NEG
49134: PUSH
49135: EMPTY
49136: LIST
49137: LIST
49138: PUSH
49139: LD_INT 2
49141: NEG
49142: PUSH
49143: LD_INT 2
49145: NEG
49146: PUSH
49147: EMPTY
49148: LIST
49149: LIST
49150: PUSH
49151: LD_INT 2
49153: PUSH
49154: LD_INT 3
49156: PUSH
49157: EMPTY
49158: LIST
49159: LIST
49160: PUSH
49161: LD_INT 1
49163: PUSH
49164: LD_INT 3
49166: PUSH
49167: EMPTY
49168: LIST
49169: LIST
49170: PUSH
49171: LD_INT 1
49173: NEG
49174: PUSH
49175: LD_INT 2
49177: PUSH
49178: EMPTY
49179: LIST
49180: LIST
49181: PUSH
49182: LD_INT 2
49184: NEG
49185: PUSH
49186: LD_INT 1
49188: PUSH
49189: EMPTY
49190: LIST
49191: LIST
49192: PUSH
49193: EMPTY
49194: LIST
49195: LIST
49196: LIST
49197: LIST
49198: LIST
49199: LIST
49200: LIST
49201: LIST
49202: LIST
49203: LIST
49204: LIST
49205: LIST
49206: LIST
49207: LIST
49208: LIST
49209: LIST
49210: LIST
49211: LIST
49212: LIST
49213: LIST
49214: LIST
49215: LIST
49216: LIST
49217: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49218: LD_ADDR_VAR 0 27
49222: PUSH
49223: LD_INT 0
49225: PUSH
49226: LD_INT 0
49228: PUSH
49229: EMPTY
49230: LIST
49231: LIST
49232: PUSH
49233: LD_INT 0
49235: PUSH
49236: LD_INT 1
49238: NEG
49239: PUSH
49240: EMPTY
49241: LIST
49242: LIST
49243: PUSH
49244: LD_INT 1
49246: PUSH
49247: LD_INT 0
49249: PUSH
49250: EMPTY
49251: LIST
49252: LIST
49253: PUSH
49254: LD_INT 1
49256: PUSH
49257: LD_INT 1
49259: PUSH
49260: EMPTY
49261: LIST
49262: LIST
49263: PUSH
49264: LD_INT 0
49266: PUSH
49267: LD_INT 1
49269: PUSH
49270: EMPTY
49271: LIST
49272: LIST
49273: PUSH
49274: LD_INT 1
49276: NEG
49277: PUSH
49278: LD_INT 0
49280: PUSH
49281: EMPTY
49282: LIST
49283: LIST
49284: PUSH
49285: LD_INT 1
49287: NEG
49288: PUSH
49289: LD_INT 1
49291: NEG
49292: PUSH
49293: EMPTY
49294: LIST
49295: LIST
49296: PUSH
49297: LD_INT 1
49299: NEG
49300: PUSH
49301: LD_INT 2
49303: NEG
49304: PUSH
49305: EMPTY
49306: LIST
49307: LIST
49308: PUSH
49309: LD_INT 0
49311: PUSH
49312: LD_INT 2
49314: NEG
49315: PUSH
49316: EMPTY
49317: LIST
49318: LIST
49319: PUSH
49320: LD_INT 1
49322: PUSH
49323: LD_INT 1
49325: NEG
49326: PUSH
49327: EMPTY
49328: LIST
49329: LIST
49330: PUSH
49331: LD_INT 2
49333: PUSH
49334: LD_INT 0
49336: PUSH
49337: EMPTY
49338: LIST
49339: LIST
49340: PUSH
49341: LD_INT 2
49343: PUSH
49344: LD_INT 1
49346: PUSH
49347: EMPTY
49348: LIST
49349: LIST
49350: PUSH
49351: LD_INT 2
49353: PUSH
49354: LD_INT 2
49356: PUSH
49357: EMPTY
49358: LIST
49359: LIST
49360: PUSH
49361: LD_INT 1
49363: PUSH
49364: LD_INT 2
49366: PUSH
49367: EMPTY
49368: LIST
49369: LIST
49370: PUSH
49371: LD_INT 0
49373: PUSH
49374: LD_INT 2
49376: PUSH
49377: EMPTY
49378: LIST
49379: LIST
49380: PUSH
49381: LD_INT 1
49383: NEG
49384: PUSH
49385: LD_INT 1
49387: PUSH
49388: EMPTY
49389: LIST
49390: LIST
49391: PUSH
49392: LD_INT 2
49394: NEG
49395: PUSH
49396: LD_INT 0
49398: PUSH
49399: EMPTY
49400: LIST
49401: LIST
49402: PUSH
49403: LD_INT 2
49405: NEG
49406: PUSH
49407: LD_INT 1
49409: NEG
49410: PUSH
49411: EMPTY
49412: LIST
49413: LIST
49414: PUSH
49415: LD_INT 2
49417: NEG
49418: PUSH
49419: LD_INT 2
49421: NEG
49422: PUSH
49423: EMPTY
49424: LIST
49425: LIST
49426: PUSH
49427: LD_INT 1
49429: NEG
49430: PUSH
49431: LD_INT 2
49433: PUSH
49434: EMPTY
49435: LIST
49436: LIST
49437: PUSH
49438: LD_INT 2
49440: NEG
49441: PUSH
49442: LD_INT 1
49444: PUSH
49445: EMPTY
49446: LIST
49447: LIST
49448: PUSH
49449: LD_INT 3
49451: NEG
49452: PUSH
49453: LD_INT 1
49455: NEG
49456: PUSH
49457: EMPTY
49458: LIST
49459: LIST
49460: PUSH
49461: LD_INT 3
49463: NEG
49464: PUSH
49465: LD_INT 2
49467: NEG
49468: PUSH
49469: EMPTY
49470: LIST
49471: LIST
49472: PUSH
49473: EMPTY
49474: LIST
49475: LIST
49476: LIST
49477: LIST
49478: LIST
49479: LIST
49480: LIST
49481: LIST
49482: LIST
49483: LIST
49484: LIST
49485: LIST
49486: LIST
49487: LIST
49488: LIST
49489: LIST
49490: LIST
49491: LIST
49492: LIST
49493: LIST
49494: LIST
49495: LIST
49496: LIST
49497: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49498: LD_ADDR_VAR 0 28
49502: PUSH
49503: LD_INT 0
49505: PUSH
49506: LD_INT 0
49508: PUSH
49509: EMPTY
49510: LIST
49511: LIST
49512: PUSH
49513: LD_INT 0
49515: PUSH
49516: LD_INT 1
49518: NEG
49519: PUSH
49520: EMPTY
49521: LIST
49522: LIST
49523: PUSH
49524: LD_INT 1
49526: PUSH
49527: LD_INT 0
49529: PUSH
49530: EMPTY
49531: LIST
49532: LIST
49533: PUSH
49534: LD_INT 1
49536: PUSH
49537: LD_INT 1
49539: PUSH
49540: EMPTY
49541: LIST
49542: LIST
49543: PUSH
49544: LD_INT 0
49546: PUSH
49547: LD_INT 1
49549: PUSH
49550: EMPTY
49551: LIST
49552: LIST
49553: PUSH
49554: LD_INT 1
49556: NEG
49557: PUSH
49558: LD_INT 0
49560: PUSH
49561: EMPTY
49562: LIST
49563: LIST
49564: PUSH
49565: LD_INT 1
49567: NEG
49568: PUSH
49569: LD_INT 1
49571: NEG
49572: PUSH
49573: EMPTY
49574: LIST
49575: LIST
49576: PUSH
49577: LD_INT 1
49579: NEG
49580: PUSH
49581: LD_INT 2
49583: NEG
49584: PUSH
49585: EMPTY
49586: LIST
49587: LIST
49588: PUSH
49589: LD_INT 0
49591: PUSH
49592: LD_INT 2
49594: NEG
49595: PUSH
49596: EMPTY
49597: LIST
49598: LIST
49599: PUSH
49600: LD_INT 1
49602: PUSH
49603: LD_INT 1
49605: NEG
49606: PUSH
49607: EMPTY
49608: LIST
49609: LIST
49610: PUSH
49611: LD_INT 2
49613: PUSH
49614: LD_INT 0
49616: PUSH
49617: EMPTY
49618: LIST
49619: LIST
49620: PUSH
49621: LD_INT 2
49623: PUSH
49624: LD_INT 1
49626: PUSH
49627: EMPTY
49628: LIST
49629: LIST
49630: PUSH
49631: LD_INT 2
49633: PUSH
49634: LD_INT 2
49636: PUSH
49637: EMPTY
49638: LIST
49639: LIST
49640: PUSH
49641: LD_INT 1
49643: PUSH
49644: LD_INT 2
49646: PUSH
49647: EMPTY
49648: LIST
49649: LIST
49650: PUSH
49651: LD_INT 0
49653: PUSH
49654: LD_INT 2
49656: PUSH
49657: EMPTY
49658: LIST
49659: LIST
49660: PUSH
49661: LD_INT 1
49663: NEG
49664: PUSH
49665: LD_INT 1
49667: PUSH
49668: EMPTY
49669: LIST
49670: LIST
49671: PUSH
49672: LD_INT 2
49674: NEG
49675: PUSH
49676: LD_INT 0
49678: PUSH
49679: EMPTY
49680: LIST
49681: LIST
49682: PUSH
49683: LD_INT 2
49685: NEG
49686: PUSH
49687: LD_INT 1
49689: NEG
49690: PUSH
49691: EMPTY
49692: LIST
49693: LIST
49694: PUSH
49695: LD_INT 2
49697: NEG
49698: PUSH
49699: LD_INT 2
49701: NEG
49702: PUSH
49703: EMPTY
49704: LIST
49705: LIST
49706: PUSH
49707: LD_INT 2
49709: NEG
49710: PUSH
49711: LD_INT 3
49713: NEG
49714: PUSH
49715: EMPTY
49716: LIST
49717: LIST
49718: PUSH
49719: LD_INT 1
49721: NEG
49722: PUSH
49723: LD_INT 3
49725: NEG
49726: PUSH
49727: EMPTY
49728: LIST
49729: LIST
49730: PUSH
49731: LD_INT 3
49733: NEG
49734: PUSH
49735: LD_INT 1
49737: NEG
49738: PUSH
49739: EMPTY
49740: LIST
49741: LIST
49742: PUSH
49743: LD_INT 3
49745: NEG
49746: PUSH
49747: LD_INT 2
49749: NEG
49750: PUSH
49751: EMPTY
49752: LIST
49753: LIST
49754: PUSH
49755: EMPTY
49756: LIST
49757: LIST
49758: LIST
49759: LIST
49760: LIST
49761: LIST
49762: LIST
49763: LIST
49764: LIST
49765: LIST
49766: LIST
49767: LIST
49768: LIST
49769: LIST
49770: LIST
49771: LIST
49772: LIST
49773: LIST
49774: LIST
49775: LIST
49776: LIST
49777: LIST
49778: LIST
49779: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49780: LD_ADDR_VAR 0 29
49784: PUSH
49785: LD_INT 0
49787: PUSH
49788: LD_INT 0
49790: PUSH
49791: EMPTY
49792: LIST
49793: LIST
49794: PUSH
49795: LD_INT 0
49797: PUSH
49798: LD_INT 1
49800: NEG
49801: PUSH
49802: EMPTY
49803: LIST
49804: LIST
49805: PUSH
49806: LD_INT 1
49808: PUSH
49809: LD_INT 0
49811: PUSH
49812: EMPTY
49813: LIST
49814: LIST
49815: PUSH
49816: LD_INT 1
49818: PUSH
49819: LD_INT 1
49821: PUSH
49822: EMPTY
49823: LIST
49824: LIST
49825: PUSH
49826: LD_INT 0
49828: PUSH
49829: LD_INT 1
49831: PUSH
49832: EMPTY
49833: LIST
49834: LIST
49835: PUSH
49836: LD_INT 1
49838: NEG
49839: PUSH
49840: LD_INT 0
49842: PUSH
49843: EMPTY
49844: LIST
49845: LIST
49846: PUSH
49847: LD_INT 1
49849: NEG
49850: PUSH
49851: LD_INT 1
49853: NEG
49854: PUSH
49855: EMPTY
49856: LIST
49857: LIST
49858: PUSH
49859: LD_INT 1
49861: NEG
49862: PUSH
49863: LD_INT 2
49865: NEG
49866: PUSH
49867: EMPTY
49868: LIST
49869: LIST
49870: PUSH
49871: LD_INT 0
49873: PUSH
49874: LD_INT 2
49876: NEG
49877: PUSH
49878: EMPTY
49879: LIST
49880: LIST
49881: PUSH
49882: LD_INT 1
49884: PUSH
49885: LD_INT 1
49887: NEG
49888: PUSH
49889: EMPTY
49890: LIST
49891: LIST
49892: PUSH
49893: LD_INT 2
49895: PUSH
49896: LD_INT 0
49898: PUSH
49899: EMPTY
49900: LIST
49901: LIST
49902: PUSH
49903: LD_INT 2
49905: PUSH
49906: LD_INT 1
49908: PUSH
49909: EMPTY
49910: LIST
49911: LIST
49912: PUSH
49913: LD_INT 1
49915: PUSH
49916: LD_INT 2
49918: PUSH
49919: EMPTY
49920: LIST
49921: LIST
49922: PUSH
49923: LD_INT 0
49925: PUSH
49926: LD_INT 2
49928: PUSH
49929: EMPTY
49930: LIST
49931: LIST
49932: PUSH
49933: LD_INT 1
49935: NEG
49936: PUSH
49937: LD_INT 1
49939: PUSH
49940: EMPTY
49941: LIST
49942: LIST
49943: PUSH
49944: LD_INT 2
49946: NEG
49947: PUSH
49948: LD_INT 1
49950: NEG
49951: PUSH
49952: EMPTY
49953: LIST
49954: LIST
49955: PUSH
49956: LD_INT 2
49958: NEG
49959: PUSH
49960: LD_INT 2
49962: NEG
49963: PUSH
49964: EMPTY
49965: LIST
49966: LIST
49967: PUSH
49968: LD_INT 2
49970: NEG
49971: PUSH
49972: LD_INT 3
49974: NEG
49975: PUSH
49976: EMPTY
49977: LIST
49978: LIST
49979: PUSH
49980: LD_INT 2
49982: PUSH
49983: LD_INT 1
49985: NEG
49986: PUSH
49987: EMPTY
49988: LIST
49989: LIST
49990: PUSH
49991: LD_INT 3
49993: PUSH
49994: LD_INT 1
49996: PUSH
49997: EMPTY
49998: LIST
49999: LIST
50000: PUSH
50001: LD_INT 1
50003: PUSH
50004: LD_INT 3
50006: PUSH
50007: EMPTY
50008: LIST
50009: LIST
50010: PUSH
50011: LD_INT 1
50013: NEG
50014: PUSH
50015: LD_INT 2
50017: PUSH
50018: EMPTY
50019: LIST
50020: LIST
50021: PUSH
50022: LD_INT 3
50024: NEG
50025: PUSH
50026: LD_INT 2
50028: NEG
50029: PUSH
50030: EMPTY
50031: LIST
50032: LIST
50033: PUSH
50034: EMPTY
50035: LIST
50036: LIST
50037: LIST
50038: LIST
50039: LIST
50040: LIST
50041: LIST
50042: LIST
50043: LIST
50044: LIST
50045: LIST
50046: LIST
50047: LIST
50048: LIST
50049: LIST
50050: LIST
50051: LIST
50052: LIST
50053: LIST
50054: LIST
50055: LIST
50056: LIST
50057: LIST
50058: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50059: LD_ADDR_VAR 0 30
50063: PUSH
50064: LD_INT 0
50066: PUSH
50067: LD_INT 0
50069: PUSH
50070: EMPTY
50071: LIST
50072: LIST
50073: PUSH
50074: LD_INT 0
50076: PUSH
50077: LD_INT 1
50079: NEG
50080: PUSH
50081: EMPTY
50082: LIST
50083: LIST
50084: PUSH
50085: LD_INT 1
50087: PUSH
50088: LD_INT 0
50090: PUSH
50091: EMPTY
50092: LIST
50093: LIST
50094: PUSH
50095: LD_INT 1
50097: PUSH
50098: LD_INT 1
50100: PUSH
50101: EMPTY
50102: LIST
50103: LIST
50104: PUSH
50105: LD_INT 0
50107: PUSH
50108: LD_INT 1
50110: PUSH
50111: EMPTY
50112: LIST
50113: LIST
50114: PUSH
50115: LD_INT 1
50117: NEG
50118: PUSH
50119: LD_INT 0
50121: PUSH
50122: EMPTY
50123: LIST
50124: LIST
50125: PUSH
50126: LD_INT 1
50128: NEG
50129: PUSH
50130: LD_INT 1
50132: NEG
50133: PUSH
50134: EMPTY
50135: LIST
50136: LIST
50137: PUSH
50138: LD_INT 1
50140: NEG
50141: PUSH
50142: LD_INT 2
50144: NEG
50145: PUSH
50146: EMPTY
50147: LIST
50148: LIST
50149: PUSH
50150: LD_INT 0
50152: PUSH
50153: LD_INT 2
50155: NEG
50156: PUSH
50157: EMPTY
50158: LIST
50159: LIST
50160: PUSH
50161: LD_INT 1
50163: PUSH
50164: LD_INT 1
50166: NEG
50167: PUSH
50168: EMPTY
50169: LIST
50170: LIST
50171: PUSH
50172: LD_INT 2
50174: PUSH
50175: LD_INT 0
50177: PUSH
50178: EMPTY
50179: LIST
50180: LIST
50181: PUSH
50182: LD_INT 2
50184: PUSH
50185: LD_INT 1
50187: PUSH
50188: EMPTY
50189: LIST
50190: LIST
50191: PUSH
50192: LD_INT 2
50194: PUSH
50195: LD_INT 2
50197: PUSH
50198: EMPTY
50199: LIST
50200: LIST
50201: PUSH
50202: LD_INT 1
50204: PUSH
50205: LD_INT 2
50207: PUSH
50208: EMPTY
50209: LIST
50210: LIST
50211: PUSH
50212: LD_INT 1
50214: NEG
50215: PUSH
50216: LD_INT 1
50218: PUSH
50219: EMPTY
50220: LIST
50221: LIST
50222: PUSH
50223: LD_INT 2
50225: NEG
50226: PUSH
50227: LD_INT 0
50229: PUSH
50230: EMPTY
50231: LIST
50232: LIST
50233: PUSH
50234: LD_INT 2
50236: NEG
50237: PUSH
50238: LD_INT 1
50240: NEG
50241: PUSH
50242: EMPTY
50243: LIST
50244: LIST
50245: PUSH
50246: LD_INT 1
50248: NEG
50249: PUSH
50250: LD_INT 3
50252: NEG
50253: PUSH
50254: EMPTY
50255: LIST
50256: LIST
50257: PUSH
50258: LD_INT 1
50260: PUSH
50261: LD_INT 2
50263: NEG
50264: PUSH
50265: EMPTY
50266: LIST
50267: LIST
50268: PUSH
50269: LD_INT 3
50271: PUSH
50272: LD_INT 2
50274: PUSH
50275: EMPTY
50276: LIST
50277: LIST
50278: PUSH
50279: LD_INT 2
50281: PUSH
50282: LD_INT 3
50284: PUSH
50285: EMPTY
50286: LIST
50287: LIST
50288: PUSH
50289: LD_INT 2
50291: NEG
50292: PUSH
50293: LD_INT 1
50295: PUSH
50296: EMPTY
50297: LIST
50298: LIST
50299: PUSH
50300: LD_INT 3
50302: NEG
50303: PUSH
50304: LD_INT 1
50306: NEG
50307: PUSH
50308: EMPTY
50309: LIST
50310: LIST
50311: PUSH
50312: EMPTY
50313: LIST
50314: LIST
50315: LIST
50316: LIST
50317: LIST
50318: LIST
50319: LIST
50320: LIST
50321: LIST
50322: LIST
50323: LIST
50324: LIST
50325: LIST
50326: LIST
50327: LIST
50328: LIST
50329: LIST
50330: LIST
50331: LIST
50332: LIST
50333: LIST
50334: LIST
50335: LIST
50336: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50337: LD_ADDR_VAR 0 31
50341: PUSH
50342: LD_INT 0
50344: PUSH
50345: LD_INT 0
50347: PUSH
50348: EMPTY
50349: LIST
50350: LIST
50351: PUSH
50352: LD_INT 0
50354: PUSH
50355: LD_INT 1
50357: NEG
50358: PUSH
50359: EMPTY
50360: LIST
50361: LIST
50362: PUSH
50363: LD_INT 1
50365: PUSH
50366: LD_INT 0
50368: PUSH
50369: EMPTY
50370: LIST
50371: LIST
50372: PUSH
50373: LD_INT 1
50375: PUSH
50376: LD_INT 1
50378: PUSH
50379: EMPTY
50380: LIST
50381: LIST
50382: PUSH
50383: LD_INT 0
50385: PUSH
50386: LD_INT 1
50388: PUSH
50389: EMPTY
50390: LIST
50391: LIST
50392: PUSH
50393: LD_INT 1
50395: NEG
50396: PUSH
50397: LD_INT 0
50399: PUSH
50400: EMPTY
50401: LIST
50402: LIST
50403: PUSH
50404: LD_INT 1
50406: NEG
50407: PUSH
50408: LD_INT 1
50410: NEG
50411: PUSH
50412: EMPTY
50413: LIST
50414: LIST
50415: PUSH
50416: LD_INT 1
50418: NEG
50419: PUSH
50420: LD_INT 2
50422: NEG
50423: PUSH
50424: EMPTY
50425: LIST
50426: LIST
50427: PUSH
50428: LD_INT 1
50430: PUSH
50431: LD_INT 1
50433: NEG
50434: PUSH
50435: EMPTY
50436: LIST
50437: LIST
50438: PUSH
50439: LD_INT 2
50441: PUSH
50442: LD_INT 0
50444: PUSH
50445: EMPTY
50446: LIST
50447: LIST
50448: PUSH
50449: LD_INT 2
50451: PUSH
50452: LD_INT 1
50454: PUSH
50455: EMPTY
50456: LIST
50457: LIST
50458: PUSH
50459: LD_INT 2
50461: PUSH
50462: LD_INT 2
50464: PUSH
50465: EMPTY
50466: LIST
50467: LIST
50468: PUSH
50469: LD_INT 1
50471: PUSH
50472: LD_INT 2
50474: PUSH
50475: EMPTY
50476: LIST
50477: LIST
50478: PUSH
50479: LD_INT 0
50481: PUSH
50482: LD_INT 2
50484: PUSH
50485: EMPTY
50486: LIST
50487: LIST
50488: PUSH
50489: LD_INT 1
50491: NEG
50492: PUSH
50493: LD_INT 1
50495: PUSH
50496: EMPTY
50497: LIST
50498: LIST
50499: PUSH
50500: LD_INT 2
50502: NEG
50503: PUSH
50504: LD_INT 1
50506: NEG
50507: PUSH
50508: EMPTY
50509: LIST
50510: LIST
50511: PUSH
50512: LD_INT 2
50514: NEG
50515: PUSH
50516: LD_INT 2
50518: NEG
50519: PUSH
50520: EMPTY
50521: LIST
50522: LIST
50523: PUSH
50524: LD_INT 2
50526: NEG
50527: PUSH
50528: LD_INT 3
50530: NEG
50531: PUSH
50532: EMPTY
50533: LIST
50534: LIST
50535: PUSH
50536: LD_INT 2
50538: PUSH
50539: LD_INT 1
50541: NEG
50542: PUSH
50543: EMPTY
50544: LIST
50545: LIST
50546: PUSH
50547: LD_INT 3
50549: PUSH
50550: LD_INT 1
50552: PUSH
50553: EMPTY
50554: LIST
50555: LIST
50556: PUSH
50557: LD_INT 1
50559: PUSH
50560: LD_INT 3
50562: PUSH
50563: EMPTY
50564: LIST
50565: LIST
50566: PUSH
50567: LD_INT 1
50569: NEG
50570: PUSH
50571: LD_INT 2
50573: PUSH
50574: EMPTY
50575: LIST
50576: LIST
50577: PUSH
50578: LD_INT 3
50580: NEG
50581: PUSH
50582: LD_INT 2
50584: NEG
50585: PUSH
50586: EMPTY
50587: LIST
50588: LIST
50589: PUSH
50590: EMPTY
50591: LIST
50592: LIST
50593: LIST
50594: LIST
50595: LIST
50596: LIST
50597: LIST
50598: LIST
50599: LIST
50600: LIST
50601: LIST
50602: LIST
50603: LIST
50604: LIST
50605: LIST
50606: LIST
50607: LIST
50608: LIST
50609: LIST
50610: LIST
50611: LIST
50612: LIST
50613: LIST
50614: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50615: LD_ADDR_VAR 0 32
50619: PUSH
50620: LD_INT 0
50622: PUSH
50623: LD_INT 0
50625: PUSH
50626: EMPTY
50627: LIST
50628: LIST
50629: PUSH
50630: LD_INT 0
50632: PUSH
50633: LD_INT 1
50635: NEG
50636: PUSH
50637: EMPTY
50638: LIST
50639: LIST
50640: PUSH
50641: LD_INT 1
50643: PUSH
50644: LD_INT 0
50646: PUSH
50647: EMPTY
50648: LIST
50649: LIST
50650: PUSH
50651: LD_INT 1
50653: PUSH
50654: LD_INT 1
50656: PUSH
50657: EMPTY
50658: LIST
50659: LIST
50660: PUSH
50661: LD_INT 0
50663: PUSH
50664: LD_INT 1
50666: PUSH
50667: EMPTY
50668: LIST
50669: LIST
50670: PUSH
50671: LD_INT 1
50673: NEG
50674: PUSH
50675: LD_INT 0
50677: PUSH
50678: EMPTY
50679: LIST
50680: LIST
50681: PUSH
50682: LD_INT 1
50684: NEG
50685: PUSH
50686: LD_INT 1
50688: NEG
50689: PUSH
50690: EMPTY
50691: LIST
50692: LIST
50693: PUSH
50694: LD_INT 1
50696: NEG
50697: PUSH
50698: LD_INT 2
50700: NEG
50701: PUSH
50702: EMPTY
50703: LIST
50704: LIST
50705: PUSH
50706: LD_INT 0
50708: PUSH
50709: LD_INT 2
50711: NEG
50712: PUSH
50713: EMPTY
50714: LIST
50715: LIST
50716: PUSH
50717: LD_INT 1
50719: PUSH
50720: LD_INT 1
50722: NEG
50723: PUSH
50724: EMPTY
50725: LIST
50726: LIST
50727: PUSH
50728: LD_INT 2
50730: PUSH
50731: LD_INT 1
50733: PUSH
50734: EMPTY
50735: LIST
50736: LIST
50737: PUSH
50738: LD_INT 2
50740: PUSH
50741: LD_INT 2
50743: PUSH
50744: EMPTY
50745: LIST
50746: LIST
50747: PUSH
50748: LD_INT 1
50750: PUSH
50751: LD_INT 2
50753: PUSH
50754: EMPTY
50755: LIST
50756: LIST
50757: PUSH
50758: LD_INT 0
50760: PUSH
50761: LD_INT 2
50763: PUSH
50764: EMPTY
50765: LIST
50766: LIST
50767: PUSH
50768: LD_INT 1
50770: NEG
50771: PUSH
50772: LD_INT 1
50774: PUSH
50775: EMPTY
50776: LIST
50777: LIST
50778: PUSH
50779: LD_INT 2
50781: NEG
50782: PUSH
50783: LD_INT 0
50785: PUSH
50786: EMPTY
50787: LIST
50788: LIST
50789: PUSH
50790: LD_INT 2
50792: NEG
50793: PUSH
50794: LD_INT 1
50796: NEG
50797: PUSH
50798: EMPTY
50799: LIST
50800: LIST
50801: PUSH
50802: LD_INT 1
50804: NEG
50805: PUSH
50806: LD_INT 3
50808: NEG
50809: PUSH
50810: EMPTY
50811: LIST
50812: LIST
50813: PUSH
50814: LD_INT 1
50816: PUSH
50817: LD_INT 2
50819: NEG
50820: PUSH
50821: EMPTY
50822: LIST
50823: LIST
50824: PUSH
50825: LD_INT 3
50827: PUSH
50828: LD_INT 2
50830: PUSH
50831: EMPTY
50832: LIST
50833: LIST
50834: PUSH
50835: LD_INT 2
50837: PUSH
50838: LD_INT 3
50840: PUSH
50841: EMPTY
50842: LIST
50843: LIST
50844: PUSH
50845: LD_INT 2
50847: NEG
50848: PUSH
50849: LD_INT 1
50851: PUSH
50852: EMPTY
50853: LIST
50854: LIST
50855: PUSH
50856: LD_INT 3
50858: NEG
50859: PUSH
50860: LD_INT 1
50862: NEG
50863: PUSH
50864: EMPTY
50865: LIST
50866: LIST
50867: PUSH
50868: EMPTY
50869: LIST
50870: LIST
50871: LIST
50872: LIST
50873: LIST
50874: LIST
50875: LIST
50876: LIST
50877: LIST
50878: LIST
50879: LIST
50880: LIST
50881: LIST
50882: LIST
50883: LIST
50884: LIST
50885: LIST
50886: LIST
50887: LIST
50888: LIST
50889: LIST
50890: LIST
50891: LIST
50892: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50893: LD_ADDR_VAR 0 33
50897: PUSH
50898: LD_INT 0
50900: PUSH
50901: LD_INT 0
50903: PUSH
50904: EMPTY
50905: LIST
50906: LIST
50907: PUSH
50908: LD_INT 0
50910: PUSH
50911: LD_INT 1
50913: NEG
50914: PUSH
50915: EMPTY
50916: LIST
50917: LIST
50918: PUSH
50919: LD_INT 1
50921: PUSH
50922: LD_INT 0
50924: PUSH
50925: EMPTY
50926: LIST
50927: LIST
50928: PUSH
50929: LD_INT 1
50931: PUSH
50932: LD_INT 1
50934: PUSH
50935: EMPTY
50936: LIST
50937: LIST
50938: PUSH
50939: LD_INT 0
50941: PUSH
50942: LD_INT 1
50944: PUSH
50945: EMPTY
50946: LIST
50947: LIST
50948: PUSH
50949: LD_INT 1
50951: NEG
50952: PUSH
50953: LD_INT 0
50955: PUSH
50956: EMPTY
50957: LIST
50958: LIST
50959: PUSH
50960: LD_INT 1
50962: NEG
50963: PUSH
50964: LD_INT 1
50966: NEG
50967: PUSH
50968: EMPTY
50969: LIST
50970: LIST
50971: PUSH
50972: LD_INT 1
50974: NEG
50975: PUSH
50976: LD_INT 2
50978: NEG
50979: PUSH
50980: EMPTY
50981: LIST
50982: LIST
50983: PUSH
50984: LD_INT 1
50986: PUSH
50987: LD_INT 1
50989: NEG
50990: PUSH
50991: EMPTY
50992: LIST
50993: LIST
50994: PUSH
50995: LD_INT 2
50997: PUSH
50998: LD_INT 0
51000: PUSH
51001: EMPTY
51002: LIST
51003: LIST
51004: PUSH
51005: LD_INT 2
51007: PUSH
51008: LD_INT 1
51010: PUSH
51011: EMPTY
51012: LIST
51013: LIST
51014: PUSH
51015: LD_INT 1
51017: PUSH
51018: LD_INT 2
51020: PUSH
51021: EMPTY
51022: LIST
51023: LIST
51024: PUSH
51025: LD_INT 0
51027: PUSH
51028: LD_INT 2
51030: PUSH
51031: EMPTY
51032: LIST
51033: LIST
51034: PUSH
51035: LD_INT 1
51037: NEG
51038: PUSH
51039: LD_INT 1
51041: PUSH
51042: EMPTY
51043: LIST
51044: LIST
51045: PUSH
51046: LD_INT 2
51048: NEG
51049: PUSH
51050: LD_INT 0
51052: PUSH
51053: EMPTY
51054: LIST
51055: LIST
51056: PUSH
51057: LD_INT 2
51059: NEG
51060: PUSH
51061: LD_INT 1
51063: NEG
51064: PUSH
51065: EMPTY
51066: LIST
51067: LIST
51068: PUSH
51069: LD_INT 2
51071: NEG
51072: PUSH
51073: LD_INT 2
51075: NEG
51076: PUSH
51077: EMPTY
51078: LIST
51079: LIST
51080: PUSH
51081: LD_INT 2
51083: NEG
51084: PUSH
51085: LD_INT 3
51087: NEG
51088: PUSH
51089: EMPTY
51090: LIST
51091: LIST
51092: PUSH
51093: LD_INT 2
51095: PUSH
51096: LD_INT 1
51098: NEG
51099: PUSH
51100: EMPTY
51101: LIST
51102: LIST
51103: PUSH
51104: LD_INT 3
51106: PUSH
51107: LD_INT 1
51109: PUSH
51110: EMPTY
51111: LIST
51112: LIST
51113: PUSH
51114: LD_INT 1
51116: PUSH
51117: LD_INT 3
51119: PUSH
51120: EMPTY
51121: LIST
51122: LIST
51123: PUSH
51124: LD_INT 1
51126: NEG
51127: PUSH
51128: LD_INT 2
51130: PUSH
51131: EMPTY
51132: LIST
51133: LIST
51134: PUSH
51135: LD_INT 3
51137: NEG
51138: PUSH
51139: LD_INT 2
51141: NEG
51142: PUSH
51143: EMPTY
51144: LIST
51145: LIST
51146: PUSH
51147: EMPTY
51148: LIST
51149: LIST
51150: LIST
51151: LIST
51152: LIST
51153: LIST
51154: LIST
51155: LIST
51156: LIST
51157: LIST
51158: LIST
51159: LIST
51160: LIST
51161: LIST
51162: LIST
51163: LIST
51164: LIST
51165: LIST
51166: LIST
51167: LIST
51168: LIST
51169: LIST
51170: LIST
51171: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51172: LD_ADDR_VAR 0 34
51176: PUSH
51177: LD_INT 0
51179: PUSH
51180: LD_INT 0
51182: PUSH
51183: EMPTY
51184: LIST
51185: LIST
51186: PUSH
51187: LD_INT 0
51189: PUSH
51190: LD_INT 1
51192: NEG
51193: PUSH
51194: EMPTY
51195: LIST
51196: LIST
51197: PUSH
51198: LD_INT 1
51200: PUSH
51201: LD_INT 0
51203: PUSH
51204: EMPTY
51205: LIST
51206: LIST
51207: PUSH
51208: LD_INT 1
51210: PUSH
51211: LD_INT 1
51213: PUSH
51214: EMPTY
51215: LIST
51216: LIST
51217: PUSH
51218: LD_INT 0
51220: PUSH
51221: LD_INT 1
51223: PUSH
51224: EMPTY
51225: LIST
51226: LIST
51227: PUSH
51228: LD_INT 1
51230: NEG
51231: PUSH
51232: LD_INT 0
51234: PUSH
51235: EMPTY
51236: LIST
51237: LIST
51238: PUSH
51239: LD_INT 1
51241: NEG
51242: PUSH
51243: LD_INT 1
51245: NEG
51246: PUSH
51247: EMPTY
51248: LIST
51249: LIST
51250: PUSH
51251: LD_INT 1
51253: NEG
51254: PUSH
51255: LD_INT 2
51257: NEG
51258: PUSH
51259: EMPTY
51260: LIST
51261: LIST
51262: PUSH
51263: LD_INT 0
51265: PUSH
51266: LD_INT 2
51268: NEG
51269: PUSH
51270: EMPTY
51271: LIST
51272: LIST
51273: PUSH
51274: LD_INT 1
51276: PUSH
51277: LD_INT 1
51279: NEG
51280: PUSH
51281: EMPTY
51282: LIST
51283: LIST
51284: PUSH
51285: LD_INT 2
51287: PUSH
51288: LD_INT 1
51290: PUSH
51291: EMPTY
51292: LIST
51293: LIST
51294: PUSH
51295: LD_INT 2
51297: PUSH
51298: LD_INT 2
51300: PUSH
51301: EMPTY
51302: LIST
51303: LIST
51304: PUSH
51305: LD_INT 1
51307: PUSH
51308: LD_INT 2
51310: PUSH
51311: EMPTY
51312: LIST
51313: LIST
51314: PUSH
51315: LD_INT 1
51317: NEG
51318: PUSH
51319: LD_INT 1
51321: PUSH
51322: EMPTY
51323: LIST
51324: LIST
51325: PUSH
51326: LD_INT 2
51328: NEG
51329: PUSH
51330: LD_INT 0
51332: PUSH
51333: EMPTY
51334: LIST
51335: LIST
51336: PUSH
51337: LD_INT 2
51339: NEG
51340: PUSH
51341: LD_INT 1
51343: NEG
51344: PUSH
51345: EMPTY
51346: LIST
51347: LIST
51348: PUSH
51349: LD_INT 2
51351: NEG
51352: PUSH
51353: LD_INT 2
51355: NEG
51356: PUSH
51357: EMPTY
51358: LIST
51359: LIST
51360: PUSH
51361: LD_INT 1
51363: NEG
51364: PUSH
51365: LD_INT 3
51367: NEG
51368: PUSH
51369: EMPTY
51370: LIST
51371: LIST
51372: PUSH
51373: LD_INT 1
51375: PUSH
51376: LD_INT 2
51378: NEG
51379: PUSH
51380: EMPTY
51381: LIST
51382: LIST
51383: PUSH
51384: LD_INT 3
51386: PUSH
51387: LD_INT 2
51389: PUSH
51390: EMPTY
51391: LIST
51392: LIST
51393: PUSH
51394: LD_INT 2
51396: PUSH
51397: LD_INT 3
51399: PUSH
51400: EMPTY
51401: LIST
51402: LIST
51403: PUSH
51404: LD_INT 2
51406: NEG
51407: PUSH
51408: LD_INT 1
51410: PUSH
51411: EMPTY
51412: LIST
51413: LIST
51414: PUSH
51415: LD_INT 3
51417: NEG
51418: PUSH
51419: LD_INT 1
51421: NEG
51422: PUSH
51423: EMPTY
51424: LIST
51425: LIST
51426: PUSH
51427: EMPTY
51428: LIST
51429: LIST
51430: LIST
51431: LIST
51432: LIST
51433: LIST
51434: LIST
51435: LIST
51436: LIST
51437: LIST
51438: LIST
51439: LIST
51440: LIST
51441: LIST
51442: LIST
51443: LIST
51444: LIST
51445: LIST
51446: LIST
51447: LIST
51448: LIST
51449: LIST
51450: LIST
51451: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
51452: LD_ADDR_VAR 0 35
51456: PUSH
51457: LD_INT 0
51459: PUSH
51460: LD_INT 0
51462: PUSH
51463: EMPTY
51464: LIST
51465: LIST
51466: PUSH
51467: LD_INT 0
51469: PUSH
51470: LD_INT 1
51472: NEG
51473: PUSH
51474: EMPTY
51475: LIST
51476: LIST
51477: PUSH
51478: LD_INT 1
51480: PUSH
51481: LD_INT 0
51483: PUSH
51484: EMPTY
51485: LIST
51486: LIST
51487: PUSH
51488: LD_INT 1
51490: PUSH
51491: LD_INT 1
51493: PUSH
51494: EMPTY
51495: LIST
51496: LIST
51497: PUSH
51498: LD_INT 0
51500: PUSH
51501: LD_INT 1
51503: PUSH
51504: EMPTY
51505: LIST
51506: LIST
51507: PUSH
51508: LD_INT 1
51510: NEG
51511: PUSH
51512: LD_INT 0
51514: PUSH
51515: EMPTY
51516: LIST
51517: LIST
51518: PUSH
51519: LD_INT 1
51521: NEG
51522: PUSH
51523: LD_INT 1
51525: NEG
51526: PUSH
51527: EMPTY
51528: LIST
51529: LIST
51530: PUSH
51531: LD_INT 2
51533: PUSH
51534: LD_INT 1
51536: PUSH
51537: EMPTY
51538: LIST
51539: LIST
51540: PUSH
51541: LD_INT 2
51543: NEG
51544: PUSH
51545: LD_INT 1
51547: NEG
51548: PUSH
51549: EMPTY
51550: LIST
51551: LIST
51552: PUSH
51553: EMPTY
51554: LIST
51555: LIST
51556: LIST
51557: LIST
51558: LIST
51559: LIST
51560: LIST
51561: LIST
51562: LIST
51563: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
51564: LD_ADDR_VAR 0 36
51568: PUSH
51569: LD_INT 0
51571: PUSH
51572: LD_INT 0
51574: PUSH
51575: EMPTY
51576: LIST
51577: LIST
51578: PUSH
51579: LD_INT 0
51581: PUSH
51582: LD_INT 1
51584: NEG
51585: PUSH
51586: EMPTY
51587: LIST
51588: LIST
51589: PUSH
51590: LD_INT 1
51592: PUSH
51593: LD_INT 0
51595: PUSH
51596: EMPTY
51597: LIST
51598: LIST
51599: PUSH
51600: LD_INT 1
51602: PUSH
51603: LD_INT 1
51605: PUSH
51606: EMPTY
51607: LIST
51608: LIST
51609: PUSH
51610: LD_INT 0
51612: PUSH
51613: LD_INT 1
51615: PUSH
51616: EMPTY
51617: LIST
51618: LIST
51619: PUSH
51620: LD_INT 1
51622: NEG
51623: PUSH
51624: LD_INT 0
51626: PUSH
51627: EMPTY
51628: LIST
51629: LIST
51630: PUSH
51631: LD_INT 1
51633: NEG
51634: PUSH
51635: LD_INT 1
51637: NEG
51638: PUSH
51639: EMPTY
51640: LIST
51641: LIST
51642: PUSH
51643: LD_INT 1
51645: NEG
51646: PUSH
51647: LD_INT 2
51649: NEG
51650: PUSH
51651: EMPTY
51652: LIST
51653: LIST
51654: PUSH
51655: LD_INT 1
51657: PUSH
51658: LD_INT 2
51660: PUSH
51661: EMPTY
51662: LIST
51663: LIST
51664: PUSH
51665: EMPTY
51666: LIST
51667: LIST
51668: LIST
51669: LIST
51670: LIST
51671: LIST
51672: LIST
51673: LIST
51674: LIST
51675: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51676: LD_ADDR_VAR 0 37
51680: PUSH
51681: LD_INT 0
51683: PUSH
51684: LD_INT 0
51686: PUSH
51687: EMPTY
51688: LIST
51689: LIST
51690: PUSH
51691: LD_INT 0
51693: PUSH
51694: LD_INT 1
51696: NEG
51697: PUSH
51698: EMPTY
51699: LIST
51700: LIST
51701: PUSH
51702: LD_INT 1
51704: PUSH
51705: LD_INT 0
51707: PUSH
51708: EMPTY
51709: LIST
51710: LIST
51711: PUSH
51712: LD_INT 1
51714: PUSH
51715: LD_INT 1
51717: PUSH
51718: EMPTY
51719: LIST
51720: LIST
51721: PUSH
51722: LD_INT 0
51724: PUSH
51725: LD_INT 1
51727: PUSH
51728: EMPTY
51729: LIST
51730: LIST
51731: PUSH
51732: LD_INT 1
51734: NEG
51735: PUSH
51736: LD_INT 0
51738: PUSH
51739: EMPTY
51740: LIST
51741: LIST
51742: PUSH
51743: LD_INT 1
51745: NEG
51746: PUSH
51747: LD_INT 1
51749: NEG
51750: PUSH
51751: EMPTY
51752: LIST
51753: LIST
51754: PUSH
51755: LD_INT 1
51757: PUSH
51758: LD_INT 1
51760: NEG
51761: PUSH
51762: EMPTY
51763: LIST
51764: LIST
51765: PUSH
51766: LD_INT 1
51768: NEG
51769: PUSH
51770: LD_INT 1
51772: PUSH
51773: EMPTY
51774: LIST
51775: LIST
51776: PUSH
51777: EMPTY
51778: LIST
51779: LIST
51780: LIST
51781: LIST
51782: LIST
51783: LIST
51784: LIST
51785: LIST
51786: LIST
51787: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
51788: LD_ADDR_VAR 0 38
51792: PUSH
51793: LD_INT 0
51795: PUSH
51796: LD_INT 0
51798: PUSH
51799: EMPTY
51800: LIST
51801: LIST
51802: PUSH
51803: LD_INT 0
51805: PUSH
51806: LD_INT 1
51808: NEG
51809: PUSH
51810: EMPTY
51811: LIST
51812: LIST
51813: PUSH
51814: LD_INT 1
51816: PUSH
51817: LD_INT 0
51819: PUSH
51820: EMPTY
51821: LIST
51822: LIST
51823: PUSH
51824: LD_INT 1
51826: PUSH
51827: LD_INT 1
51829: PUSH
51830: EMPTY
51831: LIST
51832: LIST
51833: PUSH
51834: LD_INT 0
51836: PUSH
51837: LD_INT 1
51839: PUSH
51840: EMPTY
51841: LIST
51842: LIST
51843: PUSH
51844: LD_INT 1
51846: NEG
51847: PUSH
51848: LD_INT 0
51850: PUSH
51851: EMPTY
51852: LIST
51853: LIST
51854: PUSH
51855: LD_INT 1
51857: NEG
51858: PUSH
51859: LD_INT 1
51861: NEG
51862: PUSH
51863: EMPTY
51864: LIST
51865: LIST
51866: PUSH
51867: LD_INT 2
51869: PUSH
51870: LD_INT 1
51872: PUSH
51873: EMPTY
51874: LIST
51875: LIST
51876: PUSH
51877: LD_INT 2
51879: NEG
51880: PUSH
51881: LD_INT 1
51883: NEG
51884: PUSH
51885: EMPTY
51886: LIST
51887: LIST
51888: PUSH
51889: EMPTY
51890: LIST
51891: LIST
51892: LIST
51893: LIST
51894: LIST
51895: LIST
51896: LIST
51897: LIST
51898: LIST
51899: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
51900: LD_ADDR_VAR 0 39
51904: PUSH
51905: LD_INT 0
51907: PUSH
51908: LD_INT 0
51910: PUSH
51911: EMPTY
51912: LIST
51913: LIST
51914: PUSH
51915: LD_INT 0
51917: PUSH
51918: LD_INT 1
51920: NEG
51921: PUSH
51922: EMPTY
51923: LIST
51924: LIST
51925: PUSH
51926: LD_INT 1
51928: PUSH
51929: LD_INT 0
51931: PUSH
51932: EMPTY
51933: LIST
51934: LIST
51935: PUSH
51936: LD_INT 1
51938: PUSH
51939: LD_INT 1
51941: PUSH
51942: EMPTY
51943: LIST
51944: LIST
51945: PUSH
51946: LD_INT 0
51948: PUSH
51949: LD_INT 1
51951: PUSH
51952: EMPTY
51953: LIST
51954: LIST
51955: PUSH
51956: LD_INT 1
51958: NEG
51959: PUSH
51960: LD_INT 0
51962: PUSH
51963: EMPTY
51964: LIST
51965: LIST
51966: PUSH
51967: LD_INT 1
51969: NEG
51970: PUSH
51971: LD_INT 1
51973: NEG
51974: PUSH
51975: EMPTY
51976: LIST
51977: LIST
51978: PUSH
51979: LD_INT 1
51981: NEG
51982: PUSH
51983: LD_INT 2
51985: NEG
51986: PUSH
51987: EMPTY
51988: LIST
51989: LIST
51990: PUSH
51991: LD_INT 1
51993: PUSH
51994: LD_INT 2
51996: PUSH
51997: EMPTY
51998: LIST
51999: LIST
52000: PUSH
52001: EMPTY
52002: LIST
52003: LIST
52004: LIST
52005: LIST
52006: LIST
52007: LIST
52008: LIST
52009: LIST
52010: LIST
52011: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
52012: LD_ADDR_VAR 0 40
52016: PUSH
52017: LD_INT 0
52019: PUSH
52020: LD_INT 0
52022: PUSH
52023: EMPTY
52024: LIST
52025: LIST
52026: PUSH
52027: LD_INT 0
52029: PUSH
52030: LD_INT 1
52032: NEG
52033: PUSH
52034: EMPTY
52035: LIST
52036: LIST
52037: PUSH
52038: LD_INT 1
52040: PUSH
52041: LD_INT 0
52043: PUSH
52044: EMPTY
52045: LIST
52046: LIST
52047: PUSH
52048: LD_INT 1
52050: PUSH
52051: LD_INT 1
52053: PUSH
52054: EMPTY
52055: LIST
52056: LIST
52057: PUSH
52058: LD_INT 0
52060: PUSH
52061: LD_INT 1
52063: PUSH
52064: EMPTY
52065: LIST
52066: LIST
52067: PUSH
52068: LD_INT 1
52070: NEG
52071: PUSH
52072: LD_INT 0
52074: PUSH
52075: EMPTY
52076: LIST
52077: LIST
52078: PUSH
52079: LD_INT 1
52081: NEG
52082: PUSH
52083: LD_INT 1
52085: NEG
52086: PUSH
52087: EMPTY
52088: LIST
52089: LIST
52090: PUSH
52091: LD_INT 1
52093: PUSH
52094: LD_INT 1
52096: NEG
52097: PUSH
52098: EMPTY
52099: LIST
52100: LIST
52101: PUSH
52102: LD_INT 1
52104: NEG
52105: PUSH
52106: LD_INT 1
52108: PUSH
52109: EMPTY
52110: LIST
52111: LIST
52112: PUSH
52113: EMPTY
52114: LIST
52115: LIST
52116: LIST
52117: LIST
52118: LIST
52119: LIST
52120: LIST
52121: LIST
52122: LIST
52123: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52124: LD_ADDR_VAR 0 41
52128: PUSH
52129: LD_INT 0
52131: PUSH
52132: LD_INT 0
52134: PUSH
52135: EMPTY
52136: LIST
52137: LIST
52138: PUSH
52139: LD_INT 0
52141: PUSH
52142: LD_INT 1
52144: NEG
52145: PUSH
52146: EMPTY
52147: LIST
52148: LIST
52149: PUSH
52150: LD_INT 1
52152: PUSH
52153: LD_INT 0
52155: PUSH
52156: EMPTY
52157: LIST
52158: LIST
52159: PUSH
52160: LD_INT 1
52162: PUSH
52163: LD_INT 1
52165: PUSH
52166: EMPTY
52167: LIST
52168: LIST
52169: PUSH
52170: LD_INT 0
52172: PUSH
52173: LD_INT 1
52175: PUSH
52176: EMPTY
52177: LIST
52178: LIST
52179: PUSH
52180: LD_INT 1
52182: NEG
52183: PUSH
52184: LD_INT 0
52186: PUSH
52187: EMPTY
52188: LIST
52189: LIST
52190: PUSH
52191: LD_INT 1
52193: NEG
52194: PUSH
52195: LD_INT 1
52197: NEG
52198: PUSH
52199: EMPTY
52200: LIST
52201: LIST
52202: PUSH
52203: LD_INT 1
52205: NEG
52206: PUSH
52207: LD_INT 2
52209: NEG
52210: PUSH
52211: EMPTY
52212: LIST
52213: LIST
52214: PUSH
52215: LD_INT 1
52217: PUSH
52218: LD_INT 1
52220: NEG
52221: PUSH
52222: EMPTY
52223: LIST
52224: LIST
52225: PUSH
52226: LD_INT 2
52228: PUSH
52229: LD_INT 0
52231: PUSH
52232: EMPTY
52233: LIST
52234: LIST
52235: PUSH
52236: LD_INT 2
52238: PUSH
52239: LD_INT 1
52241: PUSH
52242: EMPTY
52243: LIST
52244: LIST
52245: PUSH
52246: LD_INT 2
52248: PUSH
52249: LD_INT 2
52251: PUSH
52252: EMPTY
52253: LIST
52254: LIST
52255: PUSH
52256: LD_INT 1
52258: PUSH
52259: LD_INT 2
52261: PUSH
52262: EMPTY
52263: LIST
52264: LIST
52265: PUSH
52266: LD_INT 1
52268: NEG
52269: PUSH
52270: LD_INT 1
52272: PUSH
52273: EMPTY
52274: LIST
52275: LIST
52276: PUSH
52277: LD_INT 2
52279: NEG
52280: PUSH
52281: LD_INT 0
52283: PUSH
52284: EMPTY
52285: LIST
52286: LIST
52287: PUSH
52288: LD_INT 2
52290: NEG
52291: PUSH
52292: LD_INT 1
52294: NEG
52295: PUSH
52296: EMPTY
52297: LIST
52298: LIST
52299: PUSH
52300: LD_INT 2
52302: NEG
52303: PUSH
52304: LD_INT 2
52306: NEG
52307: PUSH
52308: EMPTY
52309: LIST
52310: LIST
52311: PUSH
52312: LD_INT 2
52314: NEG
52315: PUSH
52316: LD_INT 3
52318: NEG
52319: PUSH
52320: EMPTY
52321: LIST
52322: LIST
52323: PUSH
52324: LD_INT 2
52326: PUSH
52327: LD_INT 1
52329: NEG
52330: PUSH
52331: EMPTY
52332: LIST
52333: LIST
52334: PUSH
52335: LD_INT 3
52337: PUSH
52338: LD_INT 0
52340: PUSH
52341: EMPTY
52342: LIST
52343: LIST
52344: PUSH
52345: LD_INT 3
52347: PUSH
52348: LD_INT 1
52350: PUSH
52351: EMPTY
52352: LIST
52353: LIST
52354: PUSH
52355: LD_INT 3
52357: PUSH
52358: LD_INT 2
52360: PUSH
52361: EMPTY
52362: LIST
52363: LIST
52364: PUSH
52365: LD_INT 3
52367: PUSH
52368: LD_INT 3
52370: PUSH
52371: EMPTY
52372: LIST
52373: LIST
52374: PUSH
52375: LD_INT 2
52377: PUSH
52378: LD_INT 3
52380: PUSH
52381: EMPTY
52382: LIST
52383: LIST
52384: PUSH
52385: LD_INT 2
52387: NEG
52388: PUSH
52389: LD_INT 1
52391: PUSH
52392: EMPTY
52393: LIST
52394: LIST
52395: PUSH
52396: LD_INT 3
52398: NEG
52399: PUSH
52400: LD_INT 0
52402: PUSH
52403: EMPTY
52404: LIST
52405: LIST
52406: PUSH
52407: LD_INT 3
52409: NEG
52410: PUSH
52411: LD_INT 1
52413: NEG
52414: PUSH
52415: EMPTY
52416: LIST
52417: LIST
52418: PUSH
52419: LD_INT 3
52421: NEG
52422: PUSH
52423: LD_INT 2
52425: NEG
52426: PUSH
52427: EMPTY
52428: LIST
52429: LIST
52430: PUSH
52431: LD_INT 3
52433: NEG
52434: PUSH
52435: LD_INT 3
52437: NEG
52438: PUSH
52439: EMPTY
52440: LIST
52441: LIST
52442: PUSH
52443: EMPTY
52444: LIST
52445: LIST
52446: LIST
52447: LIST
52448: LIST
52449: LIST
52450: LIST
52451: LIST
52452: LIST
52453: LIST
52454: LIST
52455: LIST
52456: LIST
52457: LIST
52458: LIST
52459: LIST
52460: LIST
52461: LIST
52462: LIST
52463: LIST
52464: LIST
52465: LIST
52466: LIST
52467: LIST
52468: LIST
52469: LIST
52470: LIST
52471: LIST
52472: LIST
52473: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52474: LD_ADDR_VAR 0 42
52478: PUSH
52479: LD_INT 0
52481: PUSH
52482: LD_INT 0
52484: PUSH
52485: EMPTY
52486: LIST
52487: LIST
52488: PUSH
52489: LD_INT 0
52491: PUSH
52492: LD_INT 1
52494: NEG
52495: PUSH
52496: EMPTY
52497: LIST
52498: LIST
52499: PUSH
52500: LD_INT 1
52502: PUSH
52503: LD_INT 0
52505: PUSH
52506: EMPTY
52507: LIST
52508: LIST
52509: PUSH
52510: LD_INT 1
52512: PUSH
52513: LD_INT 1
52515: PUSH
52516: EMPTY
52517: LIST
52518: LIST
52519: PUSH
52520: LD_INT 0
52522: PUSH
52523: LD_INT 1
52525: PUSH
52526: EMPTY
52527: LIST
52528: LIST
52529: PUSH
52530: LD_INT 1
52532: NEG
52533: PUSH
52534: LD_INT 0
52536: PUSH
52537: EMPTY
52538: LIST
52539: LIST
52540: PUSH
52541: LD_INT 1
52543: NEG
52544: PUSH
52545: LD_INT 1
52547: NEG
52548: PUSH
52549: EMPTY
52550: LIST
52551: LIST
52552: PUSH
52553: LD_INT 1
52555: NEG
52556: PUSH
52557: LD_INT 2
52559: NEG
52560: PUSH
52561: EMPTY
52562: LIST
52563: LIST
52564: PUSH
52565: LD_INT 0
52567: PUSH
52568: LD_INT 2
52570: NEG
52571: PUSH
52572: EMPTY
52573: LIST
52574: LIST
52575: PUSH
52576: LD_INT 1
52578: PUSH
52579: LD_INT 1
52581: NEG
52582: PUSH
52583: EMPTY
52584: LIST
52585: LIST
52586: PUSH
52587: LD_INT 2
52589: PUSH
52590: LD_INT 1
52592: PUSH
52593: EMPTY
52594: LIST
52595: LIST
52596: PUSH
52597: LD_INT 2
52599: PUSH
52600: LD_INT 2
52602: PUSH
52603: EMPTY
52604: LIST
52605: LIST
52606: PUSH
52607: LD_INT 1
52609: PUSH
52610: LD_INT 2
52612: PUSH
52613: EMPTY
52614: LIST
52615: LIST
52616: PUSH
52617: LD_INT 0
52619: PUSH
52620: LD_INT 2
52622: PUSH
52623: EMPTY
52624: LIST
52625: LIST
52626: PUSH
52627: LD_INT 1
52629: NEG
52630: PUSH
52631: LD_INT 1
52633: PUSH
52634: EMPTY
52635: LIST
52636: LIST
52637: PUSH
52638: LD_INT 2
52640: NEG
52641: PUSH
52642: LD_INT 1
52644: NEG
52645: PUSH
52646: EMPTY
52647: LIST
52648: LIST
52649: PUSH
52650: LD_INT 2
52652: NEG
52653: PUSH
52654: LD_INT 2
52656: NEG
52657: PUSH
52658: EMPTY
52659: LIST
52660: LIST
52661: PUSH
52662: LD_INT 2
52664: NEG
52665: PUSH
52666: LD_INT 3
52668: NEG
52669: PUSH
52670: EMPTY
52671: LIST
52672: LIST
52673: PUSH
52674: LD_INT 1
52676: NEG
52677: PUSH
52678: LD_INT 3
52680: NEG
52681: PUSH
52682: EMPTY
52683: LIST
52684: LIST
52685: PUSH
52686: LD_INT 0
52688: PUSH
52689: LD_INT 3
52691: NEG
52692: PUSH
52693: EMPTY
52694: LIST
52695: LIST
52696: PUSH
52697: LD_INT 1
52699: PUSH
52700: LD_INT 2
52702: NEG
52703: PUSH
52704: EMPTY
52705: LIST
52706: LIST
52707: PUSH
52708: LD_INT 3
52710: PUSH
52711: LD_INT 2
52713: PUSH
52714: EMPTY
52715: LIST
52716: LIST
52717: PUSH
52718: LD_INT 3
52720: PUSH
52721: LD_INT 3
52723: PUSH
52724: EMPTY
52725: LIST
52726: LIST
52727: PUSH
52728: LD_INT 2
52730: PUSH
52731: LD_INT 3
52733: PUSH
52734: EMPTY
52735: LIST
52736: LIST
52737: PUSH
52738: LD_INT 1
52740: PUSH
52741: LD_INT 3
52743: PUSH
52744: EMPTY
52745: LIST
52746: LIST
52747: PUSH
52748: LD_INT 0
52750: PUSH
52751: LD_INT 3
52753: PUSH
52754: EMPTY
52755: LIST
52756: LIST
52757: PUSH
52758: LD_INT 1
52760: NEG
52761: PUSH
52762: LD_INT 2
52764: PUSH
52765: EMPTY
52766: LIST
52767: LIST
52768: PUSH
52769: LD_INT 3
52771: NEG
52772: PUSH
52773: LD_INT 2
52775: NEG
52776: PUSH
52777: EMPTY
52778: LIST
52779: LIST
52780: PUSH
52781: LD_INT 3
52783: NEG
52784: PUSH
52785: LD_INT 3
52787: NEG
52788: PUSH
52789: EMPTY
52790: LIST
52791: LIST
52792: PUSH
52793: EMPTY
52794: LIST
52795: LIST
52796: LIST
52797: LIST
52798: LIST
52799: LIST
52800: LIST
52801: LIST
52802: LIST
52803: LIST
52804: LIST
52805: LIST
52806: LIST
52807: LIST
52808: LIST
52809: LIST
52810: LIST
52811: LIST
52812: LIST
52813: LIST
52814: LIST
52815: LIST
52816: LIST
52817: LIST
52818: LIST
52819: LIST
52820: LIST
52821: LIST
52822: LIST
52823: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52824: LD_ADDR_VAR 0 43
52828: PUSH
52829: LD_INT 0
52831: PUSH
52832: LD_INT 0
52834: PUSH
52835: EMPTY
52836: LIST
52837: LIST
52838: PUSH
52839: LD_INT 0
52841: PUSH
52842: LD_INT 1
52844: NEG
52845: PUSH
52846: EMPTY
52847: LIST
52848: LIST
52849: PUSH
52850: LD_INT 1
52852: PUSH
52853: LD_INT 0
52855: PUSH
52856: EMPTY
52857: LIST
52858: LIST
52859: PUSH
52860: LD_INT 1
52862: PUSH
52863: LD_INT 1
52865: PUSH
52866: EMPTY
52867: LIST
52868: LIST
52869: PUSH
52870: LD_INT 0
52872: PUSH
52873: LD_INT 1
52875: PUSH
52876: EMPTY
52877: LIST
52878: LIST
52879: PUSH
52880: LD_INT 1
52882: NEG
52883: PUSH
52884: LD_INT 0
52886: PUSH
52887: EMPTY
52888: LIST
52889: LIST
52890: PUSH
52891: LD_INT 1
52893: NEG
52894: PUSH
52895: LD_INT 1
52897: NEG
52898: PUSH
52899: EMPTY
52900: LIST
52901: LIST
52902: PUSH
52903: LD_INT 1
52905: NEG
52906: PUSH
52907: LD_INT 2
52909: NEG
52910: PUSH
52911: EMPTY
52912: LIST
52913: LIST
52914: PUSH
52915: LD_INT 0
52917: PUSH
52918: LD_INT 2
52920: NEG
52921: PUSH
52922: EMPTY
52923: LIST
52924: LIST
52925: PUSH
52926: LD_INT 1
52928: PUSH
52929: LD_INT 1
52931: NEG
52932: PUSH
52933: EMPTY
52934: LIST
52935: LIST
52936: PUSH
52937: LD_INT 2
52939: PUSH
52940: LD_INT 0
52942: PUSH
52943: EMPTY
52944: LIST
52945: LIST
52946: PUSH
52947: LD_INT 2
52949: PUSH
52950: LD_INT 1
52952: PUSH
52953: EMPTY
52954: LIST
52955: LIST
52956: PUSH
52957: LD_INT 1
52959: PUSH
52960: LD_INT 2
52962: PUSH
52963: EMPTY
52964: LIST
52965: LIST
52966: PUSH
52967: LD_INT 0
52969: PUSH
52970: LD_INT 2
52972: PUSH
52973: EMPTY
52974: LIST
52975: LIST
52976: PUSH
52977: LD_INT 1
52979: NEG
52980: PUSH
52981: LD_INT 1
52983: PUSH
52984: EMPTY
52985: LIST
52986: LIST
52987: PUSH
52988: LD_INT 2
52990: NEG
52991: PUSH
52992: LD_INT 0
52994: PUSH
52995: EMPTY
52996: LIST
52997: LIST
52998: PUSH
52999: LD_INT 2
53001: NEG
53002: PUSH
53003: LD_INT 1
53005: NEG
53006: PUSH
53007: EMPTY
53008: LIST
53009: LIST
53010: PUSH
53011: LD_INT 1
53013: NEG
53014: PUSH
53015: LD_INT 3
53017: NEG
53018: PUSH
53019: EMPTY
53020: LIST
53021: LIST
53022: PUSH
53023: LD_INT 0
53025: PUSH
53026: LD_INT 3
53028: NEG
53029: PUSH
53030: EMPTY
53031: LIST
53032: LIST
53033: PUSH
53034: LD_INT 1
53036: PUSH
53037: LD_INT 2
53039: NEG
53040: PUSH
53041: EMPTY
53042: LIST
53043: LIST
53044: PUSH
53045: LD_INT 2
53047: PUSH
53048: LD_INT 1
53050: NEG
53051: PUSH
53052: EMPTY
53053: LIST
53054: LIST
53055: PUSH
53056: LD_INT 3
53058: PUSH
53059: LD_INT 0
53061: PUSH
53062: EMPTY
53063: LIST
53064: LIST
53065: PUSH
53066: LD_INT 3
53068: PUSH
53069: LD_INT 1
53071: PUSH
53072: EMPTY
53073: LIST
53074: LIST
53075: PUSH
53076: LD_INT 1
53078: PUSH
53079: LD_INT 3
53081: PUSH
53082: EMPTY
53083: LIST
53084: LIST
53085: PUSH
53086: LD_INT 0
53088: PUSH
53089: LD_INT 3
53091: PUSH
53092: EMPTY
53093: LIST
53094: LIST
53095: PUSH
53096: LD_INT 1
53098: NEG
53099: PUSH
53100: LD_INT 2
53102: PUSH
53103: EMPTY
53104: LIST
53105: LIST
53106: PUSH
53107: LD_INT 2
53109: NEG
53110: PUSH
53111: LD_INT 1
53113: PUSH
53114: EMPTY
53115: LIST
53116: LIST
53117: PUSH
53118: LD_INT 3
53120: NEG
53121: PUSH
53122: LD_INT 0
53124: PUSH
53125: EMPTY
53126: LIST
53127: LIST
53128: PUSH
53129: LD_INT 3
53131: NEG
53132: PUSH
53133: LD_INT 1
53135: NEG
53136: PUSH
53137: EMPTY
53138: LIST
53139: LIST
53140: PUSH
53141: EMPTY
53142: LIST
53143: LIST
53144: LIST
53145: LIST
53146: LIST
53147: LIST
53148: LIST
53149: LIST
53150: LIST
53151: LIST
53152: LIST
53153: LIST
53154: LIST
53155: LIST
53156: LIST
53157: LIST
53158: LIST
53159: LIST
53160: LIST
53161: LIST
53162: LIST
53163: LIST
53164: LIST
53165: LIST
53166: LIST
53167: LIST
53168: LIST
53169: LIST
53170: LIST
53171: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53172: LD_ADDR_VAR 0 44
53176: PUSH
53177: LD_INT 0
53179: PUSH
53180: LD_INT 0
53182: PUSH
53183: EMPTY
53184: LIST
53185: LIST
53186: PUSH
53187: LD_INT 0
53189: PUSH
53190: LD_INT 1
53192: NEG
53193: PUSH
53194: EMPTY
53195: LIST
53196: LIST
53197: PUSH
53198: LD_INT 1
53200: PUSH
53201: LD_INT 0
53203: PUSH
53204: EMPTY
53205: LIST
53206: LIST
53207: PUSH
53208: LD_INT 1
53210: PUSH
53211: LD_INT 1
53213: PUSH
53214: EMPTY
53215: LIST
53216: LIST
53217: PUSH
53218: LD_INT 0
53220: PUSH
53221: LD_INT 1
53223: PUSH
53224: EMPTY
53225: LIST
53226: LIST
53227: PUSH
53228: LD_INT 1
53230: NEG
53231: PUSH
53232: LD_INT 0
53234: PUSH
53235: EMPTY
53236: LIST
53237: LIST
53238: PUSH
53239: LD_INT 1
53241: NEG
53242: PUSH
53243: LD_INT 1
53245: NEG
53246: PUSH
53247: EMPTY
53248: LIST
53249: LIST
53250: PUSH
53251: LD_INT 1
53253: NEG
53254: PUSH
53255: LD_INT 2
53257: NEG
53258: PUSH
53259: EMPTY
53260: LIST
53261: LIST
53262: PUSH
53263: LD_INT 1
53265: PUSH
53266: LD_INT 1
53268: NEG
53269: PUSH
53270: EMPTY
53271: LIST
53272: LIST
53273: PUSH
53274: LD_INT 2
53276: PUSH
53277: LD_INT 0
53279: PUSH
53280: EMPTY
53281: LIST
53282: LIST
53283: PUSH
53284: LD_INT 2
53286: PUSH
53287: LD_INT 1
53289: PUSH
53290: EMPTY
53291: LIST
53292: LIST
53293: PUSH
53294: LD_INT 2
53296: PUSH
53297: LD_INT 2
53299: PUSH
53300: EMPTY
53301: LIST
53302: LIST
53303: PUSH
53304: LD_INT 1
53306: PUSH
53307: LD_INT 2
53309: PUSH
53310: EMPTY
53311: LIST
53312: LIST
53313: PUSH
53314: LD_INT 1
53316: NEG
53317: PUSH
53318: LD_INT 1
53320: PUSH
53321: EMPTY
53322: LIST
53323: LIST
53324: PUSH
53325: LD_INT 2
53327: NEG
53328: PUSH
53329: LD_INT 0
53331: PUSH
53332: EMPTY
53333: LIST
53334: LIST
53335: PUSH
53336: LD_INT 2
53338: NEG
53339: PUSH
53340: LD_INT 1
53342: NEG
53343: PUSH
53344: EMPTY
53345: LIST
53346: LIST
53347: PUSH
53348: LD_INT 2
53350: NEG
53351: PUSH
53352: LD_INT 2
53354: NEG
53355: PUSH
53356: EMPTY
53357: LIST
53358: LIST
53359: PUSH
53360: LD_INT 2
53362: NEG
53363: PUSH
53364: LD_INT 3
53366: NEG
53367: PUSH
53368: EMPTY
53369: LIST
53370: LIST
53371: PUSH
53372: LD_INT 2
53374: PUSH
53375: LD_INT 1
53377: NEG
53378: PUSH
53379: EMPTY
53380: LIST
53381: LIST
53382: PUSH
53383: LD_INT 3
53385: PUSH
53386: LD_INT 0
53388: PUSH
53389: EMPTY
53390: LIST
53391: LIST
53392: PUSH
53393: LD_INT 3
53395: PUSH
53396: LD_INT 1
53398: PUSH
53399: EMPTY
53400: LIST
53401: LIST
53402: PUSH
53403: LD_INT 3
53405: PUSH
53406: LD_INT 2
53408: PUSH
53409: EMPTY
53410: LIST
53411: LIST
53412: PUSH
53413: LD_INT 3
53415: PUSH
53416: LD_INT 3
53418: PUSH
53419: EMPTY
53420: LIST
53421: LIST
53422: PUSH
53423: LD_INT 2
53425: PUSH
53426: LD_INT 3
53428: PUSH
53429: EMPTY
53430: LIST
53431: LIST
53432: PUSH
53433: LD_INT 2
53435: NEG
53436: PUSH
53437: LD_INT 1
53439: PUSH
53440: EMPTY
53441: LIST
53442: LIST
53443: PUSH
53444: LD_INT 3
53446: NEG
53447: PUSH
53448: LD_INT 0
53450: PUSH
53451: EMPTY
53452: LIST
53453: LIST
53454: PUSH
53455: LD_INT 3
53457: NEG
53458: PUSH
53459: LD_INT 1
53461: NEG
53462: PUSH
53463: EMPTY
53464: LIST
53465: LIST
53466: PUSH
53467: LD_INT 3
53469: NEG
53470: PUSH
53471: LD_INT 2
53473: NEG
53474: PUSH
53475: EMPTY
53476: LIST
53477: LIST
53478: PUSH
53479: LD_INT 3
53481: NEG
53482: PUSH
53483: LD_INT 3
53485: NEG
53486: PUSH
53487: EMPTY
53488: LIST
53489: LIST
53490: PUSH
53491: EMPTY
53492: LIST
53493: LIST
53494: LIST
53495: LIST
53496: LIST
53497: LIST
53498: LIST
53499: LIST
53500: LIST
53501: LIST
53502: LIST
53503: LIST
53504: LIST
53505: LIST
53506: LIST
53507: LIST
53508: LIST
53509: LIST
53510: LIST
53511: LIST
53512: LIST
53513: LIST
53514: LIST
53515: LIST
53516: LIST
53517: LIST
53518: LIST
53519: LIST
53520: LIST
53521: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53522: LD_ADDR_VAR 0 45
53526: PUSH
53527: LD_INT 0
53529: PUSH
53530: LD_INT 0
53532: PUSH
53533: EMPTY
53534: LIST
53535: LIST
53536: PUSH
53537: LD_INT 0
53539: PUSH
53540: LD_INT 1
53542: NEG
53543: PUSH
53544: EMPTY
53545: LIST
53546: LIST
53547: PUSH
53548: LD_INT 1
53550: PUSH
53551: LD_INT 0
53553: PUSH
53554: EMPTY
53555: LIST
53556: LIST
53557: PUSH
53558: LD_INT 1
53560: PUSH
53561: LD_INT 1
53563: PUSH
53564: EMPTY
53565: LIST
53566: LIST
53567: PUSH
53568: LD_INT 0
53570: PUSH
53571: LD_INT 1
53573: PUSH
53574: EMPTY
53575: LIST
53576: LIST
53577: PUSH
53578: LD_INT 1
53580: NEG
53581: PUSH
53582: LD_INT 0
53584: PUSH
53585: EMPTY
53586: LIST
53587: LIST
53588: PUSH
53589: LD_INT 1
53591: NEG
53592: PUSH
53593: LD_INT 1
53595: NEG
53596: PUSH
53597: EMPTY
53598: LIST
53599: LIST
53600: PUSH
53601: LD_INT 1
53603: NEG
53604: PUSH
53605: LD_INT 2
53607: NEG
53608: PUSH
53609: EMPTY
53610: LIST
53611: LIST
53612: PUSH
53613: LD_INT 0
53615: PUSH
53616: LD_INT 2
53618: NEG
53619: PUSH
53620: EMPTY
53621: LIST
53622: LIST
53623: PUSH
53624: LD_INT 1
53626: PUSH
53627: LD_INT 1
53629: NEG
53630: PUSH
53631: EMPTY
53632: LIST
53633: LIST
53634: PUSH
53635: LD_INT 2
53637: PUSH
53638: LD_INT 1
53640: PUSH
53641: EMPTY
53642: LIST
53643: LIST
53644: PUSH
53645: LD_INT 2
53647: PUSH
53648: LD_INT 2
53650: PUSH
53651: EMPTY
53652: LIST
53653: LIST
53654: PUSH
53655: LD_INT 1
53657: PUSH
53658: LD_INT 2
53660: PUSH
53661: EMPTY
53662: LIST
53663: LIST
53664: PUSH
53665: LD_INT 0
53667: PUSH
53668: LD_INT 2
53670: PUSH
53671: EMPTY
53672: LIST
53673: LIST
53674: PUSH
53675: LD_INT 1
53677: NEG
53678: PUSH
53679: LD_INT 1
53681: PUSH
53682: EMPTY
53683: LIST
53684: LIST
53685: PUSH
53686: LD_INT 2
53688: NEG
53689: PUSH
53690: LD_INT 1
53692: NEG
53693: PUSH
53694: EMPTY
53695: LIST
53696: LIST
53697: PUSH
53698: LD_INT 2
53700: NEG
53701: PUSH
53702: LD_INT 2
53704: NEG
53705: PUSH
53706: EMPTY
53707: LIST
53708: LIST
53709: PUSH
53710: LD_INT 2
53712: NEG
53713: PUSH
53714: LD_INT 3
53716: NEG
53717: PUSH
53718: EMPTY
53719: LIST
53720: LIST
53721: PUSH
53722: LD_INT 1
53724: NEG
53725: PUSH
53726: LD_INT 3
53728: NEG
53729: PUSH
53730: EMPTY
53731: LIST
53732: LIST
53733: PUSH
53734: LD_INT 0
53736: PUSH
53737: LD_INT 3
53739: NEG
53740: PUSH
53741: EMPTY
53742: LIST
53743: LIST
53744: PUSH
53745: LD_INT 1
53747: PUSH
53748: LD_INT 2
53750: NEG
53751: PUSH
53752: EMPTY
53753: LIST
53754: LIST
53755: PUSH
53756: LD_INT 3
53758: PUSH
53759: LD_INT 2
53761: PUSH
53762: EMPTY
53763: LIST
53764: LIST
53765: PUSH
53766: LD_INT 3
53768: PUSH
53769: LD_INT 3
53771: PUSH
53772: EMPTY
53773: LIST
53774: LIST
53775: PUSH
53776: LD_INT 2
53778: PUSH
53779: LD_INT 3
53781: PUSH
53782: EMPTY
53783: LIST
53784: LIST
53785: PUSH
53786: LD_INT 1
53788: PUSH
53789: LD_INT 3
53791: PUSH
53792: EMPTY
53793: LIST
53794: LIST
53795: PUSH
53796: LD_INT 0
53798: PUSH
53799: LD_INT 3
53801: PUSH
53802: EMPTY
53803: LIST
53804: LIST
53805: PUSH
53806: LD_INT 1
53808: NEG
53809: PUSH
53810: LD_INT 2
53812: PUSH
53813: EMPTY
53814: LIST
53815: LIST
53816: PUSH
53817: LD_INT 3
53819: NEG
53820: PUSH
53821: LD_INT 2
53823: NEG
53824: PUSH
53825: EMPTY
53826: LIST
53827: LIST
53828: PUSH
53829: LD_INT 3
53831: NEG
53832: PUSH
53833: LD_INT 3
53835: NEG
53836: PUSH
53837: EMPTY
53838: LIST
53839: LIST
53840: PUSH
53841: EMPTY
53842: LIST
53843: LIST
53844: LIST
53845: LIST
53846: LIST
53847: LIST
53848: LIST
53849: LIST
53850: LIST
53851: LIST
53852: LIST
53853: LIST
53854: LIST
53855: LIST
53856: LIST
53857: LIST
53858: LIST
53859: LIST
53860: LIST
53861: LIST
53862: LIST
53863: LIST
53864: LIST
53865: LIST
53866: LIST
53867: LIST
53868: LIST
53869: LIST
53870: LIST
53871: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53872: LD_ADDR_VAR 0 46
53876: PUSH
53877: LD_INT 0
53879: PUSH
53880: LD_INT 0
53882: PUSH
53883: EMPTY
53884: LIST
53885: LIST
53886: PUSH
53887: LD_INT 0
53889: PUSH
53890: LD_INT 1
53892: NEG
53893: PUSH
53894: EMPTY
53895: LIST
53896: LIST
53897: PUSH
53898: LD_INT 1
53900: PUSH
53901: LD_INT 0
53903: PUSH
53904: EMPTY
53905: LIST
53906: LIST
53907: PUSH
53908: LD_INT 1
53910: PUSH
53911: LD_INT 1
53913: PUSH
53914: EMPTY
53915: LIST
53916: LIST
53917: PUSH
53918: LD_INT 0
53920: PUSH
53921: LD_INT 1
53923: PUSH
53924: EMPTY
53925: LIST
53926: LIST
53927: PUSH
53928: LD_INT 1
53930: NEG
53931: PUSH
53932: LD_INT 0
53934: PUSH
53935: EMPTY
53936: LIST
53937: LIST
53938: PUSH
53939: LD_INT 1
53941: NEG
53942: PUSH
53943: LD_INT 1
53945: NEG
53946: PUSH
53947: EMPTY
53948: LIST
53949: LIST
53950: PUSH
53951: LD_INT 1
53953: NEG
53954: PUSH
53955: LD_INT 2
53957: NEG
53958: PUSH
53959: EMPTY
53960: LIST
53961: LIST
53962: PUSH
53963: LD_INT 0
53965: PUSH
53966: LD_INT 2
53968: NEG
53969: PUSH
53970: EMPTY
53971: LIST
53972: LIST
53973: PUSH
53974: LD_INT 1
53976: PUSH
53977: LD_INT 1
53979: NEG
53980: PUSH
53981: EMPTY
53982: LIST
53983: LIST
53984: PUSH
53985: LD_INT 2
53987: PUSH
53988: LD_INT 0
53990: PUSH
53991: EMPTY
53992: LIST
53993: LIST
53994: PUSH
53995: LD_INT 2
53997: PUSH
53998: LD_INT 1
54000: PUSH
54001: EMPTY
54002: LIST
54003: LIST
54004: PUSH
54005: LD_INT 1
54007: PUSH
54008: LD_INT 2
54010: PUSH
54011: EMPTY
54012: LIST
54013: LIST
54014: PUSH
54015: LD_INT 0
54017: PUSH
54018: LD_INT 2
54020: PUSH
54021: EMPTY
54022: LIST
54023: LIST
54024: PUSH
54025: LD_INT 1
54027: NEG
54028: PUSH
54029: LD_INT 1
54031: PUSH
54032: EMPTY
54033: LIST
54034: LIST
54035: PUSH
54036: LD_INT 2
54038: NEG
54039: PUSH
54040: LD_INT 0
54042: PUSH
54043: EMPTY
54044: LIST
54045: LIST
54046: PUSH
54047: LD_INT 2
54049: NEG
54050: PUSH
54051: LD_INT 1
54053: NEG
54054: PUSH
54055: EMPTY
54056: LIST
54057: LIST
54058: PUSH
54059: LD_INT 1
54061: NEG
54062: PUSH
54063: LD_INT 3
54065: NEG
54066: PUSH
54067: EMPTY
54068: LIST
54069: LIST
54070: PUSH
54071: LD_INT 0
54073: PUSH
54074: LD_INT 3
54076: NEG
54077: PUSH
54078: EMPTY
54079: LIST
54080: LIST
54081: PUSH
54082: LD_INT 1
54084: PUSH
54085: LD_INT 2
54087: NEG
54088: PUSH
54089: EMPTY
54090: LIST
54091: LIST
54092: PUSH
54093: LD_INT 2
54095: PUSH
54096: LD_INT 1
54098: NEG
54099: PUSH
54100: EMPTY
54101: LIST
54102: LIST
54103: PUSH
54104: LD_INT 3
54106: PUSH
54107: LD_INT 0
54109: PUSH
54110: EMPTY
54111: LIST
54112: LIST
54113: PUSH
54114: LD_INT 3
54116: PUSH
54117: LD_INT 1
54119: PUSH
54120: EMPTY
54121: LIST
54122: LIST
54123: PUSH
54124: LD_INT 1
54126: PUSH
54127: LD_INT 3
54129: PUSH
54130: EMPTY
54131: LIST
54132: LIST
54133: PUSH
54134: LD_INT 0
54136: PUSH
54137: LD_INT 3
54139: PUSH
54140: EMPTY
54141: LIST
54142: LIST
54143: PUSH
54144: LD_INT 1
54146: NEG
54147: PUSH
54148: LD_INT 2
54150: PUSH
54151: EMPTY
54152: LIST
54153: LIST
54154: PUSH
54155: LD_INT 2
54157: NEG
54158: PUSH
54159: LD_INT 1
54161: PUSH
54162: EMPTY
54163: LIST
54164: LIST
54165: PUSH
54166: LD_INT 3
54168: NEG
54169: PUSH
54170: LD_INT 0
54172: PUSH
54173: EMPTY
54174: LIST
54175: LIST
54176: PUSH
54177: LD_INT 3
54179: NEG
54180: PUSH
54181: LD_INT 1
54183: NEG
54184: PUSH
54185: EMPTY
54186: LIST
54187: LIST
54188: PUSH
54189: EMPTY
54190: LIST
54191: LIST
54192: LIST
54193: LIST
54194: LIST
54195: LIST
54196: LIST
54197: LIST
54198: LIST
54199: LIST
54200: LIST
54201: LIST
54202: LIST
54203: LIST
54204: LIST
54205: LIST
54206: LIST
54207: LIST
54208: LIST
54209: LIST
54210: LIST
54211: LIST
54212: LIST
54213: LIST
54214: LIST
54215: LIST
54216: LIST
54217: LIST
54218: LIST
54219: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54220: LD_ADDR_VAR 0 47
54224: PUSH
54225: LD_INT 0
54227: PUSH
54228: LD_INT 0
54230: PUSH
54231: EMPTY
54232: LIST
54233: LIST
54234: PUSH
54235: LD_INT 0
54237: PUSH
54238: LD_INT 1
54240: NEG
54241: PUSH
54242: EMPTY
54243: LIST
54244: LIST
54245: PUSH
54246: LD_INT 1
54248: PUSH
54249: LD_INT 0
54251: PUSH
54252: EMPTY
54253: LIST
54254: LIST
54255: PUSH
54256: LD_INT 1
54258: PUSH
54259: LD_INT 1
54261: PUSH
54262: EMPTY
54263: LIST
54264: LIST
54265: PUSH
54266: LD_INT 0
54268: PUSH
54269: LD_INT 1
54271: PUSH
54272: EMPTY
54273: LIST
54274: LIST
54275: PUSH
54276: LD_INT 1
54278: NEG
54279: PUSH
54280: LD_INT 0
54282: PUSH
54283: EMPTY
54284: LIST
54285: LIST
54286: PUSH
54287: LD_INT 1
54289: NEG
54290: PUSH
54291: LD_INT 1
54293: NEG
54294: PUSH
54295: EMPTY
54296: LIST
54297: LIST
54298: PUSH
54299: LD_INT 1
54301: NEG
54302: PUSH
54303: LD_INT 2
54305: NEG
54306: PUSH
54307: EMPTY
54308: LIST
54309: LIST
54310: PUSH
54311: LD_INT 0
54313: PUSH
54314: LD_INT 2
54316: NEG
54317: PUSH
54318: EMPTY
54319: LIST
54320: LIST
54321: PUSH
54322: LD_INT 1
54324: PUSH
54325: LD_INT 1
54327: NEG
54328: PUSH
54329: EMPTY
54330: LIST
54331: LIST
54332: PUSH
54333: LD_INT 2
54335: NEG
54336: PUSH
54337: LD_INT 1
54339: NEG
54340: PUSH
54341: EMPTY
54342: LIST
54343: LIST
54344: PUSH
54345: LD_INT 2
54347: NEG
54348: PUSH
54349: LD_INT 2
54351: NEG
54352: PUSH
54353: EMPTY
54354: LIST
54355: LIST
54356: PUSH
54357: EMPTY
54358: LIST
54359: LIST
54360: LIST
54361: LIST
54362: LIST
54363: LIST
54364: LIST
54365: LIST
54366: LIST
54367: LIST
54368: LIST
54369: LIST
54370: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
54371: LD_ADDR_VAR 0 48
54375: PUSH
54376: LD_INT 0
54378: PUSH
54379: LD_INT 0
54381: PUSH
54382: EMPTY
54383: LIST
54384: LIST
54385: PUSH
54386: LD_INT 0
54388: PUSH
54389: LD_INT 1
54391: NEG
54392: PUSH
54393: EMPTY
54394: LIST
54395: LIST
54396: PUSH
54397: LD_INT 1
54399: PUSH
54400: LD_INT 0
54402: PUSH
54403: EMPTY
54404: LIST
54405: LIST
54406: PUSH
54407: LD_INT 1
54409: PUSH
54410: LD_INT 1
54412: PUSH
54413: EMPTY
54414: LIST
54415: LIST
54416: PUSH
54417: LD_INT 0
54419: PUSH
54420: LD_INT 1
54422: PUSH
54423: EMPTY
54424: LIST
54425: LIST
54426: PUSH
54427: LD_INT 1
54429: NEG
54430: PUSH
54431: LD_INT 0
54433: PUSH
54434: EMPTY
54435: LIST
54436: LIST
54437: PUSH
54438: LD_INT 1
54440: NEG
54441: PUSH
54442: LD_INT 1
54444: NEG
54445: PUSH
54446: EMPTY
54447: LIST
54448: LIST
54449: PUSH
54450: LD_INT 1
54452: NEG
54453: PUSH
54454: LD_INT 2
54456: NEG
54457: PUSH
54458: EMPTY
54459: LIST
54460: LIST
54461: PUSH
54462: LD_INT 0
54464: PUSH
54465: LD_INT 2
54467: NEG
54468: PUSH
54469: EMPTY
54470: LIST
54471: LIST
54472: PUSH
54473: LD_INT 1
54475: PUSH
54476: LD_INT 1
54478: NEG
54479: PUSH
54480: EMPTY
54481: LIST
54482: LIST
54483: PUSH
54484: LD_INT 2
54486: PUSH
54487: LD_INT 0
54489: PUSH
54490: EMPTY
54491: LIST
54492: LIST
54493: PUSH
54494: LD_INT 2
54496: PUSH
54497: LD_INT 1
54499: PUSH
54500: EMPTY
54501: LIST
54502: LIST
54503: PUSH
54504: EMPTY
54505: LIST
54506: LIST
54507: LIST
54508: LIST
54509: LIST
54510: LIST
54511: LIST
54512: LIST
54513: LIST
54514: LIST
54515: LIST
54516: LIST
54517: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
54518: LD_ADDR_VAR 0 49
54522: PUSH
54523: LD_INT 0
54525: PUSH
54526: LD_INT 0
54528: PUSH
54529: EMPTY
54530: LIST
54531: LIST
54532: PUSH
54533: LD_INT 0
54535: PUSH
54536: LD_INT 1
54538: NEG
54539: PUSH
54540: EMPTY
54541: LIST
54542: LIST
54543: PUSH
54544: LD_INT 1
54546: PUSH
54547: LD_INT 0
54549: PUSH
54550: EMPTY
54551: LIST
54552: LIST
54553: PUSH
54554: LD_INT 1
54556: PUSH
54557: LD_INT 1
54559: PUSH
54560: EMPTY
54561: LIST
54562: LIST
54563: PUSH
54564: LD_INT 0
54566: PUSH
54567: LD_INT 1
54569: PUSH
54570: EMPTY
54571: LIST
54572: LIST
54573: PUSH
54574: LD_INT 1
54576: NEG
54577: PUSH
54578: LD_INT 0
54580: PUSH
54581: EMPTY
54582: LIST
54583: LIST
54584: PUSH
54585: LD_INT 1
54587: NEG
54588: PUSH
54589: LD_INT 1
54591: NEG
54592: PUSH
54593: EMPTY
54594: LIST
54595: LIST
54596: PUSH
54597: LD_INT 1
54599: PUSH
54600: LD_INT 1
54602: NEG
54603: PUSH
54604: EMPTY
54605: LIST
54606: LIST
54607: PUSH
54608: LD_INT 2
54610: PUSH
54611: LD_INT 0
54613: PUSH
54614: EMPTY
54615: LIST
54616: LIST
54617: PUSH
54618: LD_INT 2
54620: PUSH
54621: LD_INT 1
54623: PUSH
54624: EMPTY
54625: LIST
54626: LIST
54627: PUSH
54628: LD_INT 2
54630: PUSH
54631: LD_INT 2
54633: PUSH
54634: EMPTY
54635: LIST
54636: LIST
54637: PUSH
54638: LD_INT 1
54640: PUSH
54641: LD_INT 2
54643: PUSH
54644: EMPTY
54645: LIST
54646: LIST
54647: PUSH
54648: EMPTY
54649: LIST
54650: LIST
54651: LIST
54652: LIST
54653: LIST
54654: LIST
54655: LIST
54656: LIST
54657: LIST
54658: LIST
54659: LIST
54660: LIST
54661: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
54662: LD_ADDR_VAR 0 50
54666: PUSH
54667: LD_INT 0
54669: PUSH
54670: LD_INT 0
54672: PUSH
54673: EMPTY
54674: LIST
54675: LIST
54676: PUSH
54677: LD_INT 0
54679: PUSH
54680: LD_INT 1
54682: NEG
54683: PUSH
54684: EMPTY
54685: LIST
54686: LIST
54687: PUSH
54688: LD_INT 1
54690: PUSH
54691: LD_INT 0
54693: PUSH
54694: EMPTY
54695: LIST
54696: LIST
54697: PUSH
54698: LD_INT 1
54700: PUSH
54701: LD_INT 1
54703: PUSH
54704: EMPTY
54705: LIST
54706: LIST
54707: PUSH
54708: LD_INT 0
54710: PUSH
54711: LD_INT 1
54713: PUSH
54714: EMPTY
54715: LIST
54716: LIST
54717: PUSH
54718: LD_INT 1
54720: NEG
54721: PUSH
54722: LD_INT 0
54724: PUSH
54725: EMPTY
54726: LIST
54727: LIST
54728: PUSH
54729: LD_INT 1
54731: NEG
54732: PUSH
54733: LD_INT 1
54735: NEG
54736: PUSH
54737: EMPTY
54738: LIST
54739: LIST
54740: PUSH
54741: LD_INT 2
54743: PUSH
54744: LD_INT 1
54746: PUSH
54747: EMPTY
54748: LIST
54749: LIST
54750: PUSH
54751: LD_INT 2
54753: PUSH
54754: LD_INT 2
54756: PUSH
54757: EMPTY
54758: LIST
54759: LIST
54760: PUSH
54761: LD_INT 1
54763: PUSH
54764: LD_INT 2
54766: PUSH
54767: EMPTY
54768: LIST
54769: LIST
54770: PUSH
54771: LD_INT 0
54773: PUSH
54774: LD_INT 2
54776: PUSH
54777: EMPTY
54778: LIST
54779: LIST
54780: PUSH
54781: LD_INT 1
54783: NEG
54784: PUSH
54785: LD_INT 1
54787: PUSH
54788: EMPTY
54789: LIST
54790: LIST
54791: PUSH
54792: EMPTY
54793: LIST
54794: LIST
54795: LIST
54796: LIST
54797: LIST
54798: LIST
54799: LIST
54800: LIST
54801: LIST
54802: LIST
54803: LIST
54804: LIST
54805: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
54806: LD_ADDR_VAR 0 51
54810: PUSH
54811: LD_INT 0
54813: PUSH
54814: LD_INT 0
54816: PUSH
54817: EMPTY
54818: LIST
54819: LIST
54820: PUSH
54821: LD_INT 0
54823: PUSH
54824: LD_INT 1
54826: NEG
54827: PUSH
54828: EMPTY
54829: LIST
54830: LIST
54831: PUSH
54832: LD_INT 1
54834: PUSH
54835: LD_INT 0
54837: PUSH
54838: EMPTY
54839: LIST
54840: LIST
54841: PUSH
54842: LD_INT 1
54844: PUSH
54845: LD_INT 1
54847: PUSH
54848: EMPTY
54849: LIST
54850: LIST
54851: PUSH
54852: LD_INT 0
54854: PUSH
54855: LD_INT 1
54857: PUSH
54858: EMPTY
54859: LIST
54860: LIST
54861: PUSH
54862: LD_INT 1
54864: NEG
54865: PUSH
54866: LD_INT 0
54868: PUSH
54869: EMPTY
54870: LIST
54871: LIST
54872: PUSH
54873: LD_INT 1
54875: NEG
54876: PUSH
54877: LD_INT 1
54879: NEG
54880: PUSH
54881: EMPTY
54882: LIST
54883: LIST
54884: PUSH
54885: LD_INT 1
54887: PUSH
54888: LD_INT 2
54890: PUSH
54891: EMPTY
54892: LIST
54893: LIST
54894: PUSH
54895: LD_INT 0
54897: PUSH
54898: LD_INT 2
54900: PUSH
54901: EMPTY
54902: LIST
54903: LIST
54904: PUSH
54905: LD_INT 1
54907: NEG
54908: PUSH
54909: LD_INT 1
54911: PUSH
54912: EMPTY
54913: LIST
54914: LIST
54915: PUSH
54916: LD_INT 2
54918: NEG
54919: PUSH
54920: LD_INT 0
54922: PUSH
54923: EMPTY
54924: LIST
54925: LIST
54926: PUSH
54927: LD_INT 2
54929: NEG
54930: PUSH
54931: LD_INT 1
54933: NEG
54934: PUSH
54935: EMPTY
54936: LIST
54937: LIST
54938: PUSH
54939: EMPTY
54940: LIST
54941: LIST
54942: LIST
54943: LIST
54944: LIST
54945: LIST
54946: LIST
54947: LIST
54948: LIST
54949: LIST
54950: LIST
54951: LIST
54952: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54953: LD_ADDR_VAR 0 52
54957: PUSH
54958: LD_INT 0
54960: PUSH
54961: LD_INT 0
54963: PUSH
54964: EMPTY
54965: LIST
54966: LIST
54967: PUSH
54968: LD_INT 0
54970: PUSH
54971: LD_INT 1
54973: NEG
54974: PUSH
54975: EMPTY
54976: LIST
54977: LIST
54978: PUSH
54979: LD_INT 1
54981: PUSH
54982: LD_INT 0
54984: PUSH
54985: EMPTY
54986: LIST
54987: LIST
54988: PUSH
54989: LD_INT 1
54991: PUSH
54992: LD_INT 1
54994: PUSH
54995: EMPTY
54996: LIST
54997: LIST
54998: PUSH
54999: LD_INT 0
55001: PUSH
55002: LD_INT 1
55004: PUSH
55005: EMPTY
55006: LIST
55007: LIST
55008: PUSH
55009: LD_INT 1
55011: NEG
55012: PUSH
55013: LD_INT 0
55015: PUSH
55016: EMPTY
55017: LIST
55018: LIST
55019: PUSH
55020: LD_INT 1
55022: NEG
55023: PUSH
55024: LD_INT 1
55026: NEG
55027: PUSH
55028: EMPTY
55029: LIST
55030: LIST
55031: PUSH
55032: LD_INT 1
55034: NEG
55035: PUSH
55036: LD_INT 2
55038: NEG
55039: PUSH
55040: EMPTY
55041: LIST
55042: LIST
55043: PUSH
55044: LD_INT 1
55046: NEG
55047: PUSH
55048: LD_INT 1
55050: PUSH
55051: EMPTY
55052: LIST
55053: LIST
55054: PUSH
55055: LD_INT 2
55057: NEG
55058: PUSH
55059: LD_INT 0
55061: PUSH
55062: EMPTY
55063: LIST
55064: LIST
55065: PUSH
55066: LD_INT 2
55068: NEG
55069: PUSH
55070: LD_INT 1
55072: NEG
55073: PUSH
55074: EMPTY
55075: LIST
55076: LIST
55077: PUSH
55078: LD_INT 2
55080: NEG
55081: PUSH
55082: LD_INT 2
55084: NEG
55085: PUSH
55086: EMPTY
55087: LIST
55088: LIST
55089: PUSH
55090: EMPTY
55091: LIST
55092: LIST
55093: LIST
55094: LIST
55095: LIST
55096: LIST
55097: LIST
55098: LIST
55099: LIST
55100: LIST
55101: LIST
55102: LIST
55103: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55104: LD_ADDR_VAR 0 53
55108: PUSH
55109: LD_INT 0
55111: PUSH
55112: LD_INT 0
55114: PUSH
55115: EMPTY
55116: LIST
55117: LIST
55118: PUSH
55119: LD_INT 0
55121: PUSH
55122: LD_INT 1
55124: NEG
55125: PUSH
55126: EMPTY
55127: LIST
55128: LIST
55129: PUSH
55130: LD_INT 1
55132: PUSH
55133: LD_INT 0
55135: PUSH
55136: EMPTY
55137: LIST
55138: LIST
55139: PUSH
55140: LD_INT 1
55142: PUSH
55143: LD_INT 1
55145: PUSH
55146: EMPTY
55147: LIST
55148: LIST
55149: PUSH
55150: LD_INT 0
55152: PUSH
55153: LD_INT 1
55155: PUSH
55156: EMPTY
55157: LIST
55158: LIST
55159: PUSH
55160: LD_INT 1
55162: NEG
55163: PUSH
55164: LD_INT 0
55166: PUSH
55167: EMPTY
55168: LIST
55169: LIST
55170: PUSH
55171: LD_INT 1
55173: NEG
55174: PUSH
55175: LD_INT 1
55177: NEG
55178: PUSH
55179: EMPTY
55180: LIST
55181: LIST
55182: PUSH
55183: LD_INT 1
55185: NEG
55186: PUSH
55187: LD_INT 2
55189: NEG
55190: PUSH
55191: EMPTY
55192: LIST
55193: LIST
55194: PUSH
55195: LD_INT 0
55197: PUSH
55198: LD_INT 2
55200: NEG
55201: PUSH
55202: EMPTY
55203: LIST
55204: LIST
55205: PUSH
55206: LD_INT 1
55208: PUSH
55209: LD_INT 1
55211: NEG
55212: PUSH
55213: EMPTY
55214: LIST
55215: LIST
55216: PUSH
55217: LD_INT 2
55219: PUSH
55220: LD_INT 0
55222: PUSH
55223: EMPTY
55224: LIST
55225: LIST
55226: PUSH
55227: LD_INT 2
55229: PUSH
55230: LD_INT 1
55232: PUSH
55233: EMPTY
55234: LIST
55235: LIST
55236: PUSH
55237: LD_INT 2
55239: PUSH
55240: LD_INT 2
55242: PUSH
55243: EMPTY
55244: LIST
55245: LIST
55246: PUSH
55247: LD_INT 1
55249: PUSH
55250: LD_INT 2
55252: PUSH
55253: EMPTY
55254: LIST
55255: LIST
55256: PUSH
55257: LD_INT 0
55259: PUSH
55260: LD_INT 2
55262: PUSH
55263: EMPTY
55264: LIST
55265: LIST
55266: PUSH
55267: LD_INT 1
55269: NEG
55270: PUSH
55271: LD_INT 1
55273: PUSH
55274: EMPTY
55275: LIST
55276: LIST
55277: PUSH
55278: LD_INT 2
55280: NEG
55281: PUSH
55282: LD_INT 0
55284: PUSH
55285: EMPTY
55286: LIST
55287: LIST
55288: PUSH
55289: LD_INT 2
55291: NEG
55292: PUSH
55293: LD_INT 1
55295: NEG
55296: PUSH
55297: EMPTY
55298: LIST
55299: LIST
55300: PUSH
55301: LD_INT 2
55303: NEG
55304: PUSH
55305: LD_INT 2
55307: NEG
55308: PUSH
55309: EMPTY
55310: LIST
55311: LIST
55312: PUSH
55313: EMPTY
55314: LIST
55315: LIST
55316: LIST
55317: LIST
55318: LIST
55319: LIST
55320: LIST
55321: LIST
55322: LIST
55323: LIST
55324: LIST
55325: LIST
55326: LIST
55327: LIST
55328: LIST
55329: LIST
55330: LIST
55331: LIST
55332: LIST
55333: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55334: LD_ADDR_VAR 0 54
55338: PUSH
55339: LD_INT 0
55341: PUSH
55342: LD_INT 0
55344: PUSH
55345: EMPTY
55346: LIST
55347: LIST
55348: PUSH
55349: LD_INT 0
55351: PUSH
55352: LD_INT 1
55354: NEG
55355: PUSH
55356: EMPTY
55357: LIST
55358: LIST
55359: PUSH
55360: LD_INT 1
55362: PUSH
55363: LD_INT 0
55365: PUSH
55366: EMPTY
55367: LIST
55368: LIST
55369: PUSH
55370: LD_INT 1
55372: PUSH
55373: LD_INT 1
55375: PUSH
55376: EMPTY
55377: LIST
55378: LIST
55379: PUSH
55380: LD_INT 0
55382: PUSH
55383: LD_INT 1
55385: PUSH
55386: EMPTY
55387: LIST
55388: LIST
55389: PUSH
55390: LD_INT 1
55392: NEG
55393: PUSH
55394: LD_INT 0
55396: PUSH
55397: EMPTY
55398: LIST
55399: LIST
55400: PUSH
55401: LD_INT 1
55403: NEG
55404: PUSH
55405: LD_INT 1
55407: NEG
55408: PUSH
55409: EMPTY
55410: LIST
55411: LIST
55412: PUSH
55413: LD_INT 1
55415: NEG
55416: PUSH
55417: LD_INT 2
55419: NEG
55420: PUSH
55421: EMPTY
55422: LIST
55423: LIST
55424: PUSH
55425: LD_INT 0
55427: PUSH
55428: LD_INT 2
55430: NEG
55431: PUSH
55432: EMPTY
55433: LIST
55434: LIST
55435: PUSH
55436: LD_INT 1
55438: PUSH
55439: LD_INT 1
55441: NEG
55442: PUSH
55443: EMPTY
55444: LIST
55445: LIST
55446: PUSH
55447: LD_INT 2
55449: PUSH
55450: LD_INT 0
55452: PUSH
55453: EMPTY
55454: LIST
55455: LIST
55456: PUSH
55457: LD_INT 2
55459: PUSH
55460: LD_INT 1
55462: PUSH
55463: EMPTY
55464: LIST
55465: LIST
55466: PUSH
55467: LD_INT 2
55469: PUSH
55470: LD_INT 2
55472: PUSH
55473: EMPTY
55474: LIST
55475: LIST
55476: PUSH
55477: LD_INT 1
55479: PUSH
55480: LD_INT 2
55482: PUSH
55483: EMPTY
55484: LIST
55485: LIST
55486: PUSH
55487: LD_INT 0
55489: PUSH
55490: LD_INT 2
55492: PUSH
55493: EMPTY
55494: LIST
55495: LIST
55496: PUSH
55497: LD_INT 1
55499: NEG
55500: PUSH
55501: LD_INT 1
55503: PUSH
55504: EMPTY
55505: LIST
55506: LIST
55507: PUSH
55508: LD_INT 2
55510: NEG
55511: PUSH
55512: LD_INT 0
55514: PUSH
55515: EMPTY
55516: LIST
55517: LIST
55518: PUSH
55519: LD_INT 2
55521: NEG
55522: PUSH
55523: LD_INT 1
55525: NEG
55526: PUSH
55527: EMPTY
55528: LIST
55529: LIST
55530: PUSH
55531: LD_INT 2
55533: NEG
55534: PUSH
55535: LD_INT 2
55537: NEG
55538: PUSH
55539: EMPTY
55540: LIST
55541: LIST
55542: PUSH
55543: EMPTY
55544: LIST
55545: LIST
55546: LIST
55547: LIST
55548: LIST
55549: LIST
55550: LIST
55551: LIST
55552: LIST
55553: LIST
55554: LIST
55555: LIST
55556: LIST
55557: LIST
55558: LIST
55559: LIST
55560: LIST
55561: LIST
55562: LIST
55563: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55564: LD_ADDR_VAR 0 55
55568: PUSH
55569: LD_INT 0
55571: PUSH
55572: LD_INT 0
55574: PUSH
55575: EMPTY
55576: LIST
55577: LIST
55578: PUSH
55579: LD_INT 0
55581: PUSH
55582: LD_INT 1
55584: NEG
55585: PUSH
55586: EMPTY
55587: LIST
55588: LIST
55589: PUSH
55590: LD_INT 1
55592: PUSH
55593: LD_INT 0
55595: PUSH
55596: EMPTY
55597: LIST
55598: LIST
55599: PUSH
55600: LD_INT 1
55602: PUSH
55603: LD_INT 1
55605: PUSH
55606: EMPTY
55607: LIST
55608: LIST
55609: PUSH
55610: LD_INT 0
55612: PUSH
55613: LD_INT 1
55615: PUSH
55616: EMPTY
55617: LIST
55618: LIST
55619: PUSH
55620: LD_INT 1
55622: NEG
55623: PUSH
55624: LD_INT 0
55626: PUSH
55627: EMPTY
55628: LIST
55629: LIST
55630: PUSH
55631: LD_INT 1
55633: NEG
55634: PUSH
55635: LD_INT 1
55637: NEG
55638: PUSH
55639: EMPTY
55640: LIST
55641: LIST
55642: PUSH
55643: LD_INT 1
55645: NEG
55646: PUSH
55647: LD_INT 2
55649: NEG
55650: PUSH
55651: EMPTY
55652: LIST
55653: LIST
55654: PUSH
55655: LD_INT 0
55657: PUSH
55658: LD_INT 2
55660: NEG
55661: PUSH
55662: EMPTY
55663: LIST
55664: LIST
55665: PUSH
55666: LD_INT 1
55668: PUSH
55669: LD_INT 1
55671: NEG
55672: PUSH
55673: EMPTY
55674: LIST
55675: LIST
55676: PUSH
55677: LD_INT 2
55679: PUSH
55680: LD_INT 0
55682: PUSH
55683: EMPTY
55684: LIST
55685: LIST
55686: PUSH
55687: LD_INT 2
55689: PUSH
55690: LD_INT 1
55692: PUSH
55693: EMPTY
55694: LIST
55695: LIST
55696: PUSH
55697: LD_INT 2
55699: PUSH
55700: LD_INT 2
55702: PUSH
55703: EMPTY
55704: LIST
55705: LIST
55706: PUSH
55707: LD_INT 1
55709: PUSH
55710: LD_INT 2
55712: PUSH
55713: EMPTY
55714: LIST
55715: LIST
55716: PUSH
55717: LD_INT 0
55719: PUSH
55720: LD_INT 2
55722: PUSH
55723: EMPTY
55724: LIST
55725: LIST
55726: PUSH
55727: LD_INT 1
55729: NEG
55730: PUSH
55731: LD_INT 1
55733: PUSH
55734: EMPTY
55735: LIST
55736: LIST
55737: PUSH
55738: LD_INT 2
55740: NEG
55741: PUSH
55742: LD_INT 0
55744: PUSH
55745: EMPTY
55746: LIST
55747: LIST
55748: PUSH
55749: LD_INT 2
55751: NEG
55752: PUSH
55753: LD_INT 1
55755: NEG
55756: PUSH
55757: EMPTY
55758: LIST
55759: LIST
55760: PUSH
55761: LD_INT 2
55763: NEG
55764: PUSH
55765: LD_INT 2
55767: NEG
55768: PUSH
55769: EMPTY
55770: LIST
55771: LIST
55772: PUSH
55773: EMPTY
55774: LIST
55775: LIST
55776: LIST
55777: LIST
55778: LIST
55779: LIST
55780: LIST
55781: LIST
55782: LIST
55783: LIST
55784: LIST
55785: LIST
55786: LIST
55787: LIST
55788: LIST
55789: LIST
55790: LIST
55791: LIST
55792: LIST
55793: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55794: LD_ADDR_VAR 0 56
55798: PUSH
55799: LD_INT 0
55801: PUSH
55802: LD_INT 0
55804: PUSH
55805: EMPTY
55806: LIST
55807: LIST
55808: PUSH
55809: LD_INT 0
55811: PUSH
55812: LD_INT 1
55814: NEG
55815: PUSH
55816: EMPTY
55817: LIST
55818: LIST
55819: PUSH
55820: LD_INT 1
55822: PUSH
55823: LD_INT 0
55825: PUSH
55826: EMPTY
55827: LIST
55828: LIST
55829: PUSH
55830: LD_INT 1
55832: PUSH
55833: LD_INT 1
55835: PUSH
55836: EMPTY
55837: LIST
55838: LIST
55839: PUSH
55840: LD_INT 0
55842: PUSH
55843: LD_INT 1
55845: PUSH
55846: EMPTY
55847: LIST
55848: LIST
55849: PUSH
55850: LD_INT 1
55852: NEG
55853: PUSH
55854: LD_INT 0
55856: PUSH
55857: EMPTY
55858: LIST
55859: LIST
55860: PUSH
55861: LD_INT 1
55863: NEG
55864: PUSH
55865: LD_INT 1
55867: NEG
55868: PUSH
55869: EMPTY
55870: LIST
55871: LIST
55872: PUSH
55873: LD_INT 1
55875: NEG
55876: PUSH
55877: LD_INT 2
55879: NEG
55880: PUSH
55881: EMPTY
55882: LIST
55883: LIST
55884: PUSH
55885: LD_INT 0
55887: PUSH
55888: LD_INT 2
55890: NEG
55891: PUSH
55892: EMPTY
55893: LIST
55894: LIST
55895: PUSH
55896: LD_INT 1
55898: PUSH
55899: LD_INT 1
55901: NEG
55902: PUSH
55903: EMPTY
55904: LIST
55905: LIST
55906: PUSH
55907: LD_INT 2
55909: PUSH
55910: LD_INT 0
55912: PUSH
55913: EMPTY
55914: LIST
55915: LIST
55916: PUSH
55917: LD_INT 2
55919: PUSH
55920: LD_INT 1
55922: PUSH
55923: EMPTY
55924: LIST
55925: LIST
55926: PUSH
55927: LD_INT 2
55929: PUSH
55930: LD_INT 2
55932: PUSH
55933: EMPTY
55934: LIST
55935: LIST
55936: PUSH
55937: LD_INT 1
55939: PUSH
55940: LD_INT 2
55942: PUSH
55943: EMPTY
55944: LIST
55945: LIST
55946: PUSH
55947: LD_INT 0
55949: PUSH
55950: LD_INT 2
55952: PUSH
55953: EMPTY
55954: LIST
55955: LIST
55956: PUSH
55957: LD_INT 1
55959: NEG
55960: PUSH
55961: LD_INT 1
55963: PUSH
55964: EMPTY
55965: LIST
55966: LIST
55967: PUSH
55968: LD_INT 2
55970: NEG
55971: PUSH
55972: LD_INT 0
55974: PUSH
55975: EMPTY
55976: LIST
55977: LIST
55978: PUSH
55979: LD_INT 2
55981: NEG
55982: PUSH
55983: LD_INT 1
55985: NEG
55986: PUSH
55987: EMPTY
55988: LIST
55989: LIST
55990: PUSH
55991: LD_INT 2
55993: NEG
55994: PUSH
55995: LD_INT 2
55997: NEG
55998: PUSH
55999: EMPTY
56000: LIST
56001: LIST
56002: PUSH
56003: EMPTY
56004: LIST
56005: LIST
56006: LIST
56007: LIST
56008: LIST
56009: LIST
56010: LIST
56011: LIST
56012: LIST
56013: LIST
56014: LIST
56015: LIST
56016: LIST
56017: LIST
56018: LIST
56019: LIST
56020: LIST
56021: LIST
56022: LIST
56023: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56024: LD_ADDR_VAR 0 57
56028: PUSH
56029: LD_INT 0
56031: PUSH
56032: LD_INT 0
56034: PUSH
56035: EMPTY
56036: LIST
56037: LIST
56038: PUSH
56039: LD_INT 0
56041: PUSH
56042: LD_INT 1
56044: NEG
56045: PUSH
56046: EMPTY
56047: LIST
56048: LIST
56049: PUSH
56050: LD_INT 1
56052: PUSH
56053: LD_INT 0
56055: PUSH
56056: EMPTY
56057: LIST
56058: LIST
56059: PUSH
56060: LD_INT 1
56062: PUSH
56063: LD_INT 1
56065: PUSH
56066: EMPTY
56067: LIST
56068: LIST
56069: PUSH
56070: LD_INT 0
56072: PUSH
56073: LD_INT 1
56075: PUSH
56076: EMPTY
56077: LIST
56078: LIST
56079: PUSH
56080: LD_INT 1
56082: NEG
56083: PUSH
56084: LD_INT 0
56086: PUSH
56087: EMPTY
56088: LIST
56089: LIST
56090: PUSH
56091: LD_INT 1
56093: NEG
56094: PUSH
56095: LD_INT 1
56097: NEG
56098: PUSH
56099: EMPTY
56100: LIST
56101: LIST
56102: PUSH
56103: LD_INT 1
56105: NEG
56106: PUSH
56107: LD_INT 2
56109: NEG
56110: PUSH
56111: EMPTY
56112: LIST
56113: LIST
56114: PUSH
56115: LD_INT 0
56117: PUSH
56118: LD_INT 2
56120: NEG
56121: PUSH
56122: EMPTY
56123: LIST
56124: LIST
56125: PUSH
56126: LD_INT 1
56128: PUSH
56129: LD_INT 1
56131: NEG
56132: PUSH
56133: EMPTY
56134: LIST
56135: LIST
56136: PUSH
56137: LD_INT 2
56139: PUSH
56140: LD_INT 0
56142: PUSH
56143: EMPTY
56144: LIST
56145: LIST
56146: PUSH
56147: LD_INT 2
56149: PUSH
56150: LD_INT 1
56152: PUSH
56153: EMPTY
56154: LIST
56155: LIST
56156: PUSH
56157: LD_INT 2
56159: PUSH
56160: LD_INT 2
56162: PUSH
56163: EMPTY
56164: LIST
56165: LIST
56166: PUSH
56167: LD_INT 1
56169: PUSH
56170: LD_INT 2
56172: PUSH
56173: EMPTY
56174: LIST
56175: LIST
56176: PUSH
56177: LD_INT 0
56179: PUSH
56180: LD_INT 2
56182: PUSH
56183: EMPTY
56184: LIST
56185: LIST
56186: PUSH
56187: LD_INT 1
56189: NEG
56190: PUSH
56191: LD_INT 1
56193: PUSH
56194: EMPTY
56195: LIST
56196: LIST
56197: PUSH
56198: LD_INT 2
56200: NEG
56201: PUSH
56202: LD_INT 0
56204: PUSH
56205: EMPTY
56206: LIST
56207: LIST
56208: PUSH
56209: LD_INT 2
56211: NEG
56212: PUSH
56213: LD_INT 1
56215: NEG
56216: PUSH
56217: EMPTY
56218: LIST
56219: LIST
56220: PUSH
56221: LD_INT 2
56223: NEG
56224: PUSH
56225: LD_INT 2
56227: NEG
56228: PUSH
56229: EMPTY
56230: LIST
56231: LIST
56232: PUSH
56233: EMPTY
56234: LIST
56235: LIST
56236: LIST
56237: LIST
56238: LIST
56239: LIST
56240: LIST
56241: LIST
56242: LIST
56243: LIST
56244: LIST
56245: LIST
56246: LIST
56247: LIST
56248: LIST
56249: LIST
56250: LIST
56251: LIST
56252: LIST
56253: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56254: LD_ADDR_VAR 0 58
56258: PUSH
56259: LD_INT 0
56261: PUSH
56262: LD_INT 0
56264: PUSH
56265: EMPTY
56266: LIST
56267: LIST
56268: PUSH
56269: LD_INT 0
56271: PUSH
56272: LD_INT 1
56274: NEG
56275: PUSH
56276: EMPTY
56277: LIST
56278: LIST
56279: PUSH
56280: LD_INT 1
56282: PUSH
56283: LD_INT 0
56285: PUSH
56286: EMPTY
56287: LIST
56288: LIST
56289: PUSH
56290: LD_INT 1
56292: PUSH
56293: LD_INT 1
56295: PUSH
56296: EMPTY
56297: LIST
56298: LIST
56299: PUSH
56300: LD_INT 0
56302: PUSH
56303: LD_INT 1
56305: PUSH
56306: EMPTY
56307: LIST
56308: LIST
56309: PUSH
56310: LD_INT 1
56312: NEG
56313: PUSH
56314: LD_INT 0
56316: PUSH
56317: EMPTY
56318: LIST
56319: LIST
56320: PUSH
56321: LD_INT 1
56323: NEG
56324: PUSH
56325: LD_INT 1
56327: NEG
56328: PUSH
56329: EMPTY
56330: LIST
56331: LIST
56332: PUSH
56333: LD_INT 1
56335: NEG
56336: PUSH
56337: LD_INT 2
56339: NEG
56340: PUSH
56341: EMPTY
56342: LIST
56343: LIST
56344: PUSH
56345: LD_INT 0
56347: PUSH
56348: LD_INT 2
56350: NEG
56351: PUSH
56352: EMPTY
56353: LIST
56354: LIST
56355: PUSH
56356: LD_INT 1
56358: PUSH
56359: LD_INT 1
56361: NEG
56362: PUSH
56363: EMPTY
56364: LIST
56365: LIST
56366: PUSH
56367: LD_INT 2
56369: PUSH
56370: LD_INT 0
56372: PUSH
56373: EMPTY
56374: LIST
56375: LIST
56376: PUSH
56377: LD_INT 2
56379: PUSH
56380: LD_INT 1
56382: PUSH
56383: EMPTY
56384: LIST
56385: LIST
56386: PUSH
56387: LD_INT 2
56389: PUSH
56390: LD_INT 2
56392: PUSH
56393: EMPTY
56394: LIST
56395: LIST
56396: PUSH
56397: LD_INT 1
56399: PUSH
56400: LD_INT 2
56402: PUSH
56403: EMPTY
56404: LIST
56405: LIST
56406: PUSH
56407: LD_INT 0
56409: PUSH
56410: LD_INT 2
56412: PUSH
56413: EMPTY
56414: LIST
56415: LIST
56416: PUSH
56417: LD_INT 1
56419: NEG
56420: PUSH
56421: LD_INT 1
56423: PUSH
56424: EMPTY
56425: LIST
56426: LIST
56427: PUSH
56428: LD_INT 2
56430: NEG
56431: PUSH
56432: LD_INT 0
56434: PUSH
56435: EMPTY
56436: LIST
56437: LIST
56438: PUSH
56439: LD_INT 2
56441: NEG
56442: PUSH
56443: LD_INT 1
56445: NEG
56446: PUSH
56447: EMPTY
56448: LIST
56449: LIST
56450: PUSH
56451: LD_INT 2
56453: NEG
56454: PUSH
56455: LD_INT 2
56457: NEG
56458: PUSH
56459: EMPTY
56460: LIST
56461: LIST
56462: PUSH
56463: EMPTY
56464: LIST
56465: LIST
56466: LIST
56467: LIST
56468: LIST
56469: LIST
56470: LIST
56471: LIST
56472: LIST
56473: LIST
56474: LIST
56475: LIST
56476: LIST
56477: LIST
56478: LIST
56479: LIST
56480: LIST
56481: LIST
56482: LIST
56483: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56484: LD_ADDR_VAR 0 59
56488: PUSH
56489: LD_INT 0
56491: PUSH
56492: LD_INT 0
56494: PUSH
56495: EMPTY
56496: LIST
56497: LIST
56498: PUSH
56499: LD_INT 0
56501: PUSH
56502: LD_INT 1
56504: NEG
56505: PUSH
56506: EMPTY
56507: LIST
56508: LIST
56509: PUSH
56510: LD_INT 1
56512: PUSH
56513: LD_INT 0
56515: PUSH
56516: EMPTY
56517: LIST
56518: LIST
56519: PUSH
56520: LD_INT 1
56522: PUSH
56523: LD_INT 1
56525: PUSH
56526: EMPTY
56527: LIST
56528: LIST
56529: PUSH
56530: LD_INT 0
56532: PUSH
56533: LD_INT 1
56535: PUSH
56536: EMPTY
56537: LIST
56538: LIST
56539: PUSH
56540: LD_INT 1
56542: NEG
56543: PUSH
56544: LD_INT 0
56546: PUSH
56547: EMPTY
56548: LIST
56549: LIST
56550: PUSH
56551: LD_INT 1
56553: NEG
56554: PUSH
56555: LD_INT 1
56557: NEG
56558: PUSH
56559: EMPTY
56560: LIST
56561: LIST
56562: PUSH
56563: EMPTY
56564: LIST
56565: LIST
56566: LIST
56567: LIST
56568: LIST
56569: LIST
56570: LIST
56571: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56572: LD_ADDR_VAR 0 60
56576: PUSH
56577: LD_INT 0
56579: PUSH
56580: LD_INT 0
56582: PUSH
56583: EMPTY
56584: LIST
56585: LIST
56586: PUSH
56587: LD_INT 0
56589: PUSH
56590: LD_INT 1
56592: NEG
56593: PUSH
56594: EMPTY
56595: LIST
56596: LIST
56597: PUSH
56598: LD_INT 1
56600: PUSH
56601: LD_INT 0
56603: PUSH
56604: EMPTY
56605: LIST
56606: LIST
56607: PUSH
56608: LD_INT 1
56610: PUSH
56611: LD_INT 1
56613: PUSH
56614: EMPTY
56615: LIST
56616: LIST
56617: PUSH
56618: LD_INT 0
56620: PUSH
56621: LD_INT 1
56623: PUSH
56624: EMPTY
56625: LIST
56626: LIST
56627: PUSH
56628: LD_INT 1
56630: NEG
56631: PUSH
56632: LD_INT 0
56634: PUSH
56635: EMPTY
56636: LIST
56637: LIST
56638: PUSH
56639: LD_INT 1
56641: NEG
56642: PUSH
56643: LD_INT 1
56645: NEG
56646: PUSH
56647: EMPTY
56648: LIST
56649: LIST
56650: PUSH
56651: EMPTY
56652: LIST
56653: LIST
56654: LIST
56655: LIST
56656: LIST
56657: LIST
56658: LIST
56659: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56660: LD_ADDR_VAR 0 61
56664: PUSH
56665: LD_INT 0
56667: PUSH
56668: LD_INT 0
56670: PUSH
56671: EMPTY
56672: LIST
56673: LIST
56674: PUSH
56675: LD_INT 0
56677: PUSH
56678: LD_INT 1
56680: NEG
56681: PUSH
56682: EMPTY
56683: LIST
56684: LIST
56685: PUSH
56686: LD_INT 1
56688: PUSH
56689: LD_INT 0
56691: PUSH
56692: EMPTY
56693: LIST
56694: LIST
56695: PUSH
56696: LD_INT 1
56698: PUSH
56699: LD_INT 1
56701: PUSH
56702: EMPTY
56703: LIST
56704: LIST
56705: PUSH
56706: LD_INT 0
56708: PUSH
56709: LD_INT 1
56711: PUSH
56712: EMPTY
56713: LIST
56714: LIST
56715: PUSH
56716: LD_INT 1
56718: NEG
56719: PUSH
56720: LD_INT 0
56722: PUSH
56723: EMPTY
56724: LIST
56725: LIST
56726: PUSH
56727: LD_INT 1
56729: NEG
56730: PUSH
56731: LD_INT 1
56733: NEG
56734: PUSH
56735: EMPTY
56736: LIST
56737: LIST
56738: PUSH
56739: EMPTY
56740: LIST
56741: LIST
56742: LIST
56743: LIST
56744: LIST
56745: LIST
56746: LIST
56747: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56748: LD_ADDR_VAR 0 62
56752: PUSH
56753: LD_INT 0
56755: PUSH
56756: LD_INT 0
56758: PUSH
56759: EMPTY
56760: LIST
56761: LIST
56762: PUSH
56763: LD_INT 0
56765: PUSH
56766: LD_INT 1
56768: NEG
56769: PUSH
56770: EMPTY
56771: LIST
56772: LIST
56773: PUSH
56774: LD_INT 1
56776: PUSH
56777: LD_INT 0
56779: PUSH
56780: EMPTY
56781: LIST
56782: LIST
56783: PUSH
56784: LD_INT 1
56786: PUSH
56787: LD_INT 1
56789: PUSH
56790: EMPTY
56791: LIST
56792: LIST
56793: PUSH
56794: LD_INT 0
56796: PUSH
56797: LD_INT 1
56799: PUSH
56800: EMPTY
56801: LIST
56802: LIST
56803: PUSH
56804: LD_INT 1
56806: NEG
56807: PUSH
56808: LD_INT 0
56810: PUSH
56811: EMPTY
56812: LIST
56813: LIST
56814: PUSH
56815: LD_INT 1
56817: NEG
56818: PUSH
56819: LD_INT 1
56821: NEG
56822: PUSH
56823: EMPTY
56824: LIST
56825: LIST
56826: PUSH
56827: EMPTY
56828: LIST
56829: LIST
56830: LIST
56831: LIST
56832: LIST
56833: LIST
56834: LIST
56835: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56836: LD_ADDR_VAR 0 63
56840: PUSH
56841: LD_INT 0
56843: PUSH
56844: LD_INT 0
56846: PUSH
56847: EMPTY
56848: LIST
56849: LIST
56850: PUSH
56851: LD_INT 0
56853: PUSH
56854: LD_INT 1
56856: NEG
56857: PUSH
56858: EMPTY
56859: LIST
56860: LIST
56861: PUSH
56862: LD_INT 1
56864: PUSH
56865: LD_INT 0
56867: PUSH
56868: EMPTY
56869: LIST
56870: LIST
56871: PUSH
56872: LD_INT 1
56874: PUSH
56875: LD_INT 1
56877: PUSH
56878: EMPTY
56879: LIST
56880: LIST
56881: PUSH
56882: LD_INT 0
56884: PUSH
56885: LD_INT 1
56887: PUSH
56888: EMPTY
56889: LIST
56890: LIST
56891: PUSH
56892: LD_INT 1
56894: NEG
56895: PUSH
56896: LD_INT 0
56898: PUSH
56899: EMPTY
56900: LIST
56901: LIST
56902: PUSH
56903: LD_INT 1
56905: NEG
56906: PUSH
56907: LD_INT 1
56909: NEG
56910: PUSH
56911: EMPTY
56912: LIST
56913: LIST
56914: PUSH
56915: EMPTY
56916: LIST
56917: LIST
56918: LIST
56919: LIST
56920: LIST
56921: LIST
56922: LIST
56923: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56924: LD_ADDR_VAR 0 64
56928: PUSH
56929: LD_INT 0
56931: PUSH
56932: LD_INT 0
56934: PUSH
56935: EMPTY
56936: LIST
56937: LIST
56938: PUSH
56939: LD_INT 0
56941: PUSH
56942: LD_INT 1
56944: NEG
56945: PUSH
56946: EMPTY
56947: LIST
56948: LIST
56949: PUSH
56950: LD_INT 1
56952: PUSH
56953: LD_INT 0
56955: PUSH
56956: EMPTY
56957: LIST
56958: LIST
56959: PUSH
56960: LD_INT 1
56962: PUSH
56963: LD_INT 1
56965: PUSH
56966: EMPTY
56967: LIST
56968: LIST
56969: PUSH
56970: LD_INT 0
56972: PUSH
56973: LD_INT 1
56975: PUSH
56976: EMPTY
56977: LIST
56978: LIST
56979: PUSH
56980: LD_INT 1
56982: NEG
56983: PUSH
56984: LD_INT 0
56986: PUSH
56987: EMPTY
56988: LIST
56989: LIST
56990: PUSH
56991: LD_INT 1
56993: NEG
56994: PUSH
56995: LD_INT 1
56997: NEG
56998: PUSH
56999: EMPTY
57000: LIST
57001: LIST
57002: PUSH
57003: EMPTY
57004: LIST
57005: LIST
57006: LIST
57007: LIST
57008: LIST
57009: LIST
57010: LIST
57011: ST_TO_ADDR
// end ; 1 :
57012: GO 62909
57014: LD_INT 1
57016: DOUBLE
57017: EQUAL
57018: IFTRUE 57022
57020: GO 59645
57022: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57023: LD_ADDR_VAR 0 11
57027: PUSH
57028: LD_INT 1
57030: NEG
57031: PUSH
57032: LD_INT 3
57034: NEG
57035: PUSH
57036: EMPTY
57037: LIST
57038: LIST
57039: PUSH
57040: LD_INT 0
57042: PUSH
57043: LD_INT 3
57045: NEG
57046: PUSH
57047: EMPTY
57048: LIST
57049: LIST
57050: PUSH
57051: LD_INT 1
57053: PUSH
57054: LD_INT 2
57056: NEG
57057: PUSH
57058: EMPTY
57059: LIST
57060: LIST
57061: PUSH
57062: EMPTY
57063: LIST
57064: LIST
57065: LIST
57066: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57067: LD_ADDR_VAR 0 12
57071: PUSH
57072: LD_INT 2
57074: PUSH
57075: LD_INT 1
57077: NEG
57078: PUSH
57079: EMPTY
57080: LIST
57081: LIST
57082: PUSH
57083: LD_INT 3
57085: PUSH
57086: LD_INT 0
57088: PUSH
57089: EMPTY
57090: LIST
57091: LIST
57092: PUSH
57093: LD_INT 3
57095: PUSH
57096: LD_INT 1
57098: PUSH
57099: EMPTY
57100: LIST
57101: LIST
57102: PUSH
57103: EMPTY
57104: LIST
57105: LIST
57106: LIST
57107: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57108: LD_ADDR_VAR 0 13
57112: PUSH
57113: LD_INT 3
57115: PUSH
57116: LD_INT 2
57118: PUSH
57119: EMPTY
57120: LIST
57121: LIST
57122: PUSH
57123: LD_INT 3
57125: PUSH
57126: LD_INT 3
57128: PUSH
57129: EMPTY
57130: LIST
57131: LIST
57132: PUSH
57133: LD_INT 2
57135: PUSH
57136: LD_INT 3
57138: PUSH
57139: EMPTY
57140: LIST
57141: LIST
57142: PUSH
57143: EMPTY
57144: LIST
57145: LIST
57146: LIST
57147: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57148: LD_ADDR_VAR 0 14
57152: PUSH
57153: LD_INT 1
57155: PUSH
57156: LD_INT 3
57158: PUSH
57159: EMPTY
57160: LIST
57161: LIST
57162: PUSH
57163: LD_INT 0
57165: PUSH
57166: LD_INT 3
57168: PUSH
57169: EMPTY
57170: LIST
57171: LIST
57172: PUSH
57173: LD_INT 1
57175: NEG
57176: PUSH
57177: LD_INT 2
57179: PUSH
57180: EMPTY
57181: LIST
57182: LIST
57183: PUSH
57184: EMPTY
57185: LIST
57186: LIST
57187: LIST
57188: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57189: LD_ADDR_VAR 0 15
57193: PUSH
57194: LD_INT 2
57196: NEG
57197: PUSH
57198: LD_INT 1
57200: PUSH
57201: EMPTY
57202: LIST
57203: LIST
57204: PUSH
57205: LD_INT 3
57207: NEG
57208: PUSH
57209: LD_INT 0
57211: PUSH
57212: EMPTY
57213: LIST
57214: LIST
57215: PUSH
57216: LD_INT 3
57218: NEG
57219: PUSH
57220: LD_INT 1
57222: NEG
57223: PUSH
57224: EMPTY
57225: LIST
57226: LIST
57227: PUSH
57228: EMPTY
57229: LIST
57230: LIST
57231: LIST
57232: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57233: LD_ADDR_VAR 0 16
57237: PUSH
57238: LD_INT 2
57240: NEG
57241: PUSH
57242: LD_INT 3
57244: NEG
57245: PUSH
57246: EMPTY
57247: LIST
57248: LIST
57249: PUSH
57250: LD_INT 3
57252: NEG
57253: PUSH
57254: LD_INT 2
57256: NEG
57257: PUSH
57258: EMPTY
57259: LIST
57260: LIST
57261: PUSH
57262: LD_INT 3
57264: NEG
57265: PUSH
57266: LD_INT 3
57268: NEG
57269: PUSH
57270: EMPTY
57271: LIST
57272: LIST
57273: PUSH
57274: EMPTY
57275: LIST
57276: LIST
57277: LIST
57278: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57279: LD_ADDR_VAR 0 17
57283: PUSH
57284: LD_INT 1
57286: NEG
57287: PUSH
57288: LD_INT 3
57290: NEG
57291: PUSH
57292: EMPTY
57293: LIST
57294: LIST
57295: PUSH
57296: LD_INT 0
57298: PUSH
57299: LD_INT 3
57301: NEG
57302: PUSH
57303: EMPTY
57304: LIST
57305: LIST
57306: PUSH
57307: LD_INT 1
57309: PUSH
57310: LD_INT 2
57312: NEG
57313: PUSH
57314: EMPTY
57315: LIST
57316: LIST
57317: PUSH
57318: EMPTY
57319: LIST
57320: LIST
57321: LIST
57322: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57323: LD_ADDR_VAR 0 18
57327: PUSH
57328: LD_INT 2
57330: PUSH
57331: LD_INT 1
57333: NEG
57334: PUSH
57335: EMPTY
57336: LIST
57337: LIST
57338: PUSH
57339: LD_INT 3
57341: PUSH
57342: LD_INT 0
57344: PUSH
57345: EMPTY
57346: LIST
57347: LIST
57348: PUSH
57349: LD_INT 3
57351: PUSH
57352: LD_INT 1
57354: PUSH
57355: EMPTY
57356: LIST
57357: LIST
57358: PUSH
57359: EMPTY
57360: LIST
57361: LIST
57362: LIST
57363: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57364: LD_ADDR_VAR 0 19
57368: PUSH
57369: LD_INT 3
57371: PUSH
57372: LD_INT 2
57374: PUSH
57375: EMPTY
57376: LIST
57377: LIST
57378: PUSH
57379: LD_INT 3
57381: PUSH
57382: LD_INT 3
57384: PUSH
57385: EMPTY
57386: LIST
57387: LIST
57388: PUSH
57389: LD_INT 2
57391: PUSH
57392: LD_INT 3
57394: PUSH
57395: EMPTY
57396: LIST
57397: LIST
57398: PUSH
57399: EMPTY
57400: LIST
57401: LIST
57402: LIST
57403: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57404: LD_ADDR_VAR 0 20
57408: PUSH
57409: LD_INT 1
57411: PUSH
57412: LD_INT 3
57414: PUSH
57415: EMPTY
57416: LIST
57417: LIST
57418: PUSH
57419: LD_INT 0
57421: PUSH
57422: LD_INT 3
57424: PUSH
57425: EMPTY
57426: LIST
57427: LIST
57428: PUSH
57429: LD_INT 1
57431: NEG
57432: PUSH
57433: LD_INT 2
57435: PUSH
57436: EMPTY
57437: LIST
57438: LIST
57439: PUSH
57440: EMPTY
57441: LIST
57442: LIST
57443: LIST
57444: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57445: LD_ADDR_VAR 0 21
57449: PUSH
57450: LD_INT 2
57452: NEG
57453: PUSH
57454: LD_INT 1
57456: PUSH
57457: EMPTY
57458: LIST
57459: LIST
57460: PUSH
57461: LD_INT 3
57463: NEG
57464: PUSH
57465: LD_INT 0
57467: PUSH
57468: EMPTY
57469: LIST
57470: LIST
57471: PUSH
57472: LD_INT 3
57474: NEG
57475: PUSH
57476: LD_INT 1
57478: NEG
57479: PUSH
57480: EMPTY
57481: LIST
57482: LIST
57483: PUSH
57484: EMPTY
57485: LIST
57486: LIST
57487: LIST
57488: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57489: LD_ADDR_VAR 0 22
57493: PUSH
57494: LD_INT 2
57496: NEG
57497: PUSH
57498: LD_INT 3
57500: NEG
57501: PUSH
57502: EMPTY
57503: LIST
57504: LIST
57505: PUSH
57506: LD_INT 3
57508: NEG
57509: PUSH
57510: LD_INT 2
57512: NEG
57513: PUSH
57514: EMPTY
57515: LIST
57516: LIST
57517: PUSH
57518: LD_INT 3
57520: NEG
57521: PUSH
57522: LD_INT 3
57524: NEG
57525: PUSH
57526: EMPTY
57527: LIST
57528: LIST
57529: PUSH
57530: EMPTY
57531: LIST
57532: LIST
57533: LIST
57534: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
57535: LD_ADDR_VAR 0 23
57539: PUSH
57540: LD_INT 0
57542: PUSH
57543: LD_INT 3
57545: NEG
57546: PUSH
57547: EMPTY
57548: LIST
57549: LIST
57550: PUSH
57551: LD_INT 1
57553: NEG
57554: PUSH
57555: LD_INT 4
57557: NEG
57558: PUSH
57559: EMPTY
57560: LIST
57561: LIST
57562: PUSH
57563: LD_INT 1
57565: PUSH
57566: LD_INT 3
57568: NEG
57569: PUSH
57570: EMPTY
57571: LIST
57572: LIST
57573: PUSH
57574: EMPTY
57575: LIST
57576: LIST
57577: LIST
57578: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
57579: LD_ADDR_VAR 0 24
57583: PUSH
57584: LD_INT 3
57586: PUSH
57587: LD_INT 0
57589: PUSH
57590: EMPTY
57591: LIST
57592: LIST
57593: PUSH
57594: LD_INT 3
57596: PUSH
57597: LD_INT 1
57599: NEG
57600: PUSH
57601: EMPTY
57602: LIST
57603: LIST
57604: PUSH
57605: LD_INT 4
57607: PUSH
57608: LD_INT 1
57610: PUSH
57611: EMPTY
57612: LIST
57613: LIST
57614: PUSH
57615: EMPTY
57616: LIST
57617: LIST
57618: LIST
57619: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
57620: LD_ADDR_VAR 0 25
57624: PUSH
57625: LD_INT 3
57627: PUSH
57628: LD_INT 3
57630: PUSH
57631: EMPTY
57632: LIST
57633: LIST
57634: PUSH
57635: LD_INT 4
57637: PUSH
57638: LD_INT 3
57640: PUSH
57641: EMPTY
57642: LIST
57643: LIST
57644: PUSH
57645: LD_INT 3
57647: PUSH
57648: LD_INT 4
57650: PUSH
57651: EMPTY
57652: LIST
57653: LIST
57654: PUSH
57655: EMPTY
57656: LIST
57657: LIST
57658: LIST
57659: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
57660: LD_ADDR_VAR 0 26
57664: PUSH
57665: LD_INT 0
57667: PUSH
57668: LD_INT 3
57670: PUSH
57671: EMPTY
57672: LIST
57673: LIST
57674: PUSH
57675: LD_INT 1
57677: PUSH
57678: LD_INT 4
57680: PUSH
57681: EMPTY
57682: LIST
57683: LIST
57684: PUSH
57685: LD_INT 1
57687: NEG
57688: PUSH
57689: LD_INT 3
57691: PUSH
57692: EMPTY
57693: LIST
57694: LIST
57695: PUSH
57696: EMPTY
57697: LIST
57698: LIST
57699: LIST
57700: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
57701: LD_ADDR_VAR 0 27
57705: PUSH
57706: LD_INT 3
57708: NEG
57709: PUSH
57710: LD_INT 0
57712: PUSH
57713: EMPTY
57714: LIST
57715: LIST
57716: PUSH
57717: LD_INT 3
57719: NEG
57720: PUSH
57721: LD_INT 1
57723: PUSH
57724: EMPTY
57725: LIST
57726: LIST
57727: PUSH
57728: LD_INT 4
57730: NEG
57731: PUSH
57732: LD_INT 1
57734: NEG
57735: PUSH
57736: EMPTY
57737: LIST
57738: LIST
57739: PUSH
57740: EMPTY
57741: LIST
57742: LIST
57743: LIST
57744: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
57745: LD_ADDR_VAR 0 28
57749: PUSH
57750: LD_INT 3
57752: NEG
57753: PUSH
57754: LD_INT 3
57756: NEG
57757: PUSH
57758: EMPTY
57759: LIST
57760: LIST
57761: PUSH
57762: LD_INT 3
57764: NEG
57765: PUSH
57766: LD_INT 4
57768: NEG
57769: PUSH
57770: EMPTY
57771: LIST
57772: LIST
57773: PUSH
57774: LD_INT 4
57776: NEG
57777: PUSH
57778: LD_INT 3
57780: NEG
57781: PUSH
57782: EMPTY
57783: LIST
57784: LIST
57785: PUSH
57786: EMPTY
57787: LIST
57788: LIST
57789: LIST
57790: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
57791: LD_ADDR_VAR 0 29
57795: PUSH
57796: LD_INT 1
57798: NEG
57799: PUSH
57800: LD_INT 3
57802: NEG
57803: PUSH
57804: EMPTY
57805: LIST
57806: LIST
57807: PUSH
57808: LD_INT 0
57810: PUSH
57811: LD_INT 3
57813: NEG
57814: PUSH
57815: EMPTY
57816: LIST
57817: LIST
57818: PUSH
57819: LD_INT 1
57821: PUSH
57822: LD_INT 2
57824: NEG
57825: PUSH
57826: EMPTY
57827: LIST
57828: LIST
57829: PUSH
57830: LD_INT 1
57832: NEG
57833: PUSH
57834: LD_INT 4
57836: NEG
57837: PUSH
57838: EMPTY
57839: LIST
57840: LIST
57841: PUSH
57842: LD_INT 0
57844: PUSH
57845: LD_INT 4
57847: NEG
57848: PUSH
57849: EMPTY
57850: LIST
57851: LIST
57852: PUSH
57853: LD_INT 1
57855: PUSH
57856: LD_INT 3
57858: NEG
57859: PUSH
57860: EMPTY
57861: LIST
57862: LIST
57863: PUSH
57864: LD_INT 1
57866: NEG
57867: PUSH
57868: LD_INT 5
57870: NEG
57871: PUSH
57872: EMPTY
57873: LIST
57874: LIST
57875: PUSH
57876: LD_INT 0
57878: PUSH
57879: LD_INT 5
57881: NEG
57882: PUSH
57883: EMPTY
57884: LIST
57885: LIST
57886: PUSH
57887: LD_INT 1
57889: PUSH
57890: LD_INT 4
57892: NEG
57893: PUSH
57894: EMPTY
57895: LIST
57896: LIST
57897: PUSH
57898: LD_INT 1
57900: NEG
57901: PUSH
57902: LD_INT 6
57904: NEG
57905: PUSH
57906: EMPTY
57907: LIST
57908: LIST
57909: PUSH
57910: LD_INT 0
57912: PUSH
57913: LD_INT 6
57915: NEG
57916: PUSH
57917: EMPTY
57918: LIST
57919: LIST
57920: PUSH
57921: LD_INT 1
57923: PUSH
57924: LD_INT 5
57926: NEG
57927: PUSH
57928: EMPTY
57929: LIST
57930: LIST
57931: PUSH
57932: EMPTY
57933: LIST
57934: LIST
57935: LIST
57936: LIST
57937: LIST
57938: LIST
57939: LIST
57940: LIST
57941: LIST
57942: LIST
57943: LIST
57944: LIST
57945: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
57946: LD_ADDR_VAR 0 30
57950: PUSH
57951: LD_INT 2
57953: PUSH
57954: LD_INT 1
57956: NEG
57957: PUSH
57958: EMPTY
57959: LIST
57960: LIST
57961: PUSH
57962: LD_INT 3
57964: PUSH
57965: LD_INT 0
57967: PUSH
57968: EMPTY
57969: LIST
57970: LIST
57971: PUSH
57972: LD_INT 3
57974: PUSH
57975: LD_INT 1
57977: PUSH
57978: EMPTY
57979: LIST
57980: LIST
57981: PUSH
57982: LD_INT 3
57984: PUSH
57985: LD_INT 1
57987: NEG
57988: PUSH
57989: EMPTY
57990: LIST
57991: LIST
57992: PUSH
57993: LD_INT 4
57995: PUSH
57996: LD_INT 0
57998: PUSH
57999: EMPTY
58000: LIST
58001: LIST
58002: PUSH
58003: LD_INT 4
58005: PUSH
58006: LD_INT 1
58008: PUSH
58009: EMPTY
58010: LIST
58011: LIST
58012: PUSH
58013: LD_INT 4
58015: PUSH
58016: LD_INT 1
58018: NEG
58019: PUSH
58020: EMPTY
58021: LIST
58022: LIST
58023: PUSH
58024: LD_INT 5
58026: PUSH
58027: LD_INT 0
58029: PUSH
58030: EMPTY
58031: LIST
58032: LIST
58033: PUSH
58034: LD_INT 5
58036: PUSH
58037: LD_INT 1
58039: PUSH
58040: EMPTY
58041: LIST
58042: LIST
58043: PUSH
58044: LD_INT 5
58046: PUSH
58047: LD_INT 1
58049: NEG
58050: PUSH
58051: EMPTY
58052: LIST
58053: LIST
58054: PUSH
58055: LD_INT 6
58057: PUSH
58058: LD_INT 0
58060: PUSH
58061: EMPTY
58062: LIST
58063: LIST
58064: PUSH
58065: LD_INT 6
58067: PUSH
58068: LD_INT 1
58070: PUSH
58071: EMPTY
58072: LIST
58073: LIST
58074: PUSH
58075: EMPTY
58076: LIST
58077: LIST
58078: LIST
58079: LIST
58080: LIST
58081: LIST
58082: LIST
58083: LIST
58084: LIST
58085: LIST
58086: LIST
58087: LIST
58088: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
58089: LD_ADDR_VAR 0 31
58093: PUSH
58094: LD_INT 3
58096: PUSH
58097: LD_INT 2
58099: PUSH
58100: EMPTY
58101: LIST
58102: LIST
58103: PUSH
58104: LD_INT 3
58106: PUSH
58107: LD_INT 3
58109: PUSH
58110: EMPTY
58111: LIST
58112: LIST
58113: PUSH
58114: LD_INT 2
58116: PUSH
58117: LD_INT 3
58119: PUSH
58120: EMPTY
58121: LIST
58122: LIST
58123: PUSH
58124: LD_INT 4
58126: PUSH
58127: LD_INT 3
58129: PUSH
58130: EMPTY
58131: LIST
58132: LIST
58133: PUSH
58134: LD_INT 4
58136: PUSH
58137: LD_INT 4
58139: PUSH
58140: EMPTY
58141: LIST
58142: LIST
58143: PUSH
58144: LD_INT 3
58146: PUSH
58147: LD_INT 4
58149: PUSH
58150: EMPTY
58151: LIST
58152: LIST
58153: PUSH
58154: LD_INT 5
58156: PUSH
58157: LD_INT 4
58159: PUSH
58160: EMPTY
58161: LIST
58162: LIST
58163: PUSH
58164: LD_INT 5
58166: PUSH
58167: LD_INT 5
58169: PUSH
58170: EMPTY
58171: LIST
58172: LIST
58173: PUSH
58174: LD_INT 4
58176: PUSH
58177: LD_INT 5
58179: PUSH
58180: EMPTY
58181: LIST
58182: LIST
58183: PUSH
58184: LD_INT 6
58186: PUSH
58187: LD_INT 5
58189: PUSH
58190: EMPTY
58191: LIST
58192: LIST
58193: PUSH
58194: LD_INT 6
58196: PUSH
58197: LD_INT 6
58199: PUSH
58200: EMPTY
58201: LIST
58202: LIST
58203: PUSH
58204: LD_INT 5
58206: PUSH
58207: LD_INT 6
58209: PUSH
58210: EMPTY
58211: LIST
58212: LIST
58213: PUSH
58214: EMPTY
58215: LIST
58216: LIST
58217: LIST
58218: LIST
58219: LIST
58220: LIST
58221: LIST
58222: LIST
58223: LIST
58224: LIST
58225: LIST
58226: LIST
58227: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
58228: LD_ADDR_VAR 0 32
58232: PUSH
58233: LD_INT 1
58235: PUSH
58236: LD_INT 3
58238: PUSH
58239: EMPTY
58240: LIST
58241: LIST
58242: PUSH
58243: LD_INT 0
58245: PUSH
58246: LD_INT 3
58248: PUSH
58249: EMPTY
58250: LIST
58251: LIST
58252: PUSH
58253: LD_INT 1
58255: NEG
58256: PUSH
58257: LD_INT 2
58259: PUSH
58260: EMPTY
58261: LIST
58262: LIST
58263: PUSH
58264: LD_INT 1
58266: PUSH
58267: LD_INT 4
58269: PUSH
58270: EMPTY
58271: LIST
58272: LIST
58273: PUSH
58274: LD_INT 0
58276: PUSH
58277: LD_INT 4
58279: PUSH
58280: EMPTY
58281: LIST
58282: LIST
58283: PUSH
58284: LD_INT 1
58286: NEG
58287: PUSH
58288: LD_INT 3
58290: PUSH
58291: EMPTY
58292: LIST
58293: LIST
58294: PUSH
58295: LD_INT 1
58297: PUSH
58298: LD_INT 5
58300: PUSH
58301: EMPTY
58302: LIST
58303: LIST
58304: PUSH
58305: LD_INT 0
58307: PUSH
58308: LD_INT 5
58310: PUSH
58311: EMPTY
58312: LIST
58313: LIST
58314: PUSH
58315: LD_INT 1
58317: NEG
58318: PUSH
58319: LD_INT 4
58321: PUSH
58322: EMPTY
58323: LIST
58324: LIST
58325: PUSH
58326: LD_INT 1
58328: PUSH
58329: LD_INT 6
58331: PUSH
58332: EMPTY
58333: LIST
58334: LIST
58335: PUSH
58336: LD_INT 0
58338: PUSH
58339: LD_INT 6
58341: PUSH
58342: EMPTY
58343: LIST
58344: LIST
58345: PUSH
58346: LD_INT 1
58348: NEG
58349: PUSH
58350: LD_INT 5
58352: PUSH
58353: EMPTY
58354: LIST
58355: LIST
58356: PUSH
58357: EMPTY
58358: LIST
58359: LIST
58360: LIST
58361: LIST
58362: LIST
58363: LIST
58364: LIST
58365: LIST
58366: LIST
58367: LIST
58368: LIST
58369: LIST
58370: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
58371: LD_ADDR_VAR 0 33
58375: PUSH
58376: LD_INT 2
58378: NEG
58379: PUSH
58380: LD_INT 1
58382: PUSH
58383: EMPTY
58384: LIST
58385: LIST
58386: PUSH
58387: LD_INT 3
58389: NEG
58390: PUSH
58391: LD_INT 0
58393: PUSH
58394: EMPTY
58395: LIST
58396: LIST
58397: PUSH
58398: LD_INT 3
58400: NEG
58401: PUSH
58402: LD_INT 1
58404: NEG
58405: PUSH
58406: EMPTY
58407: LIST
58408: LIST
58409: PUSH
58410: LD_INT 3
58412: NEG
58413: PUSH
58414: LD_INT 1
58416: PUSH
58417: EMPTY
58418: LIST
58419: LIST
58420: PUSH
58421: LD_INT 4
58423: NEG
58424: PUSH
58425: LD_INT 0
58427: PUSH
58428: EMPTY
58429: LIST
58430: LIST
58431: PUSH
58432: LD_INT 4
58434: NEG
58435: PUSH
58436: LD_INT 1
58438: NEG
58439: PUSH
58440: EMPTY
58441: LIST
58442: LIST
58443: PUSH
58444: LD_INT 4
58446: NEG
58447: PUSH
58448: LD_INT 1
58450: PUSH
58451: EMPTY
58452: LIST
58453: LIST
58454: PUSH
58455: LD_INT 5
58457: NEG
58458: PUSH
58459: LD_INT 0
58461: PUSH
58462: EMPTY
58463: LIST
58464: LIST
58465: PUSH
58466: LD_INT 5
58468: NEG
58469: PUSH
58470: LD_INT 1
58472: NEG
58473: PUSH
58474: EMPTY
58475: LIST
58476: LIST
58477: PUSH
58478: LD_INT 5
58480: NEG
58481: PUSH
58482: LD_INT 1
58484: PUSH
58485: EMPTY
58486: LIST
58487: LIST
58488: PUSH
58489: LD_INT 6
58491: NEG
58492: PUSH
58493: LD_INT 0
58495: PUSH
58496: EMPTY
58497: LIST
58498: LIST
58499: PUSH
58500: LD_INT 6
58502: NEG
58503: PUSH
58504: LD_INT 1
58506: NEG
58507: PUSH
58508: EMPTY
58509: LIST
58510: LIST
58511: PUSH
58512: EMPTY
58513: LIST
58514: LIST
58515: LIST
58516: LIST
58517: LIST
58518: LIST
58519: LIST
58520: LIST
58521: LIST
58522: LIST
58523: LIST
58524: LIST
58525: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
58526: LD_ADDR_VAR 0 34
58530: PUSH
58531: LD_INT 2
58533: NEG
58534: PUSH
58535: LD_INT 3
58537: NEG
58538: PUSH
58539: EMPTY
58540: LIST
58541: LIST
58542: PUSH
58543: LD_INT 3
58545: NEG
58546: PUSH
58547: LD_INT 2
58549: NEG
58550: PUSH
58551: EMPTY
58552: LIST
58553: LIST
58554: PUSH
58555: LD_INT 3
58557: NEG
58558: PUSH
58559: LD_INT 3
58561: NEG
58562: PUSH
58563: EMPTY
58564: LIST
58565: LIST
58566: PUSH
58567: LD_INT 3
58569: NEG
58570: PUSH
58571: LD_INT 4
58573: NEG
58574: PUSH
58575: EMPTY
58576: LIST
58577: LIST
58578: PUSH
58579: LD_INT 4
58581: NEG
58582: PUSH
58583: LD_INT 3
58585: NEG
58586: PUSH
58587: EMPTY
58588: LIST
58589: LIST
58590: PUSH
58591: LD_INT 4
58593: NEG
58594: PUSH
58595: LD_INT 4
58597: NEG
58598: PUSH
58599: EMPTY
58600: LIST
58601: LIST
58602: PUSH
58603: LD_INT 4
58605: NEG
58606: PUSH
58607: LD_INT 5
58609: NEG
58610: PUSH
58611: EMPTY
58612: LIST
58613: LIST
58614: PUSH
58615: LD_INT 5
58617: NEG
58618: PUSH
58619: LD_INT 4
58621: NEG
58622: PUSH
58623: EMPTY
58624: LIST
58625: LIST
58626: PUSH
58627: LD_INT 5
58629: NEG
58630: PUSH
58631: LD_INT 5
58633: NEG
58634: PUSH
58635: EMPTY
58636: LIST
58637: LIST
58638: PUSH
58639: LD_INT 5
58641: NEG
58642: PUSH
58643: LD_INT 6
58645: NEG
58646: PUSH
58647: EMPTY
58648: LIST
58649: LIST
58650: PUSH
58651: LD_INT 6
58653: NEG
58654: PUSH
58655: LD_INT 5
58657: NEG
58658: PUSH
58659: EMPTY
58660: LIST
58661: LIST
58662: PUSH
58663: LD_INT 6
58665: NEG
58666: PUSH
58667: LD_INT 6
58669: NEG
58670: PUSH
58671: EMPTY
58672: LIST
58673: LIST
58674: PUSH
58675: EMPTY
58676: LIST
58677: LIST
58678: LIST
58679: LIST
58680: LIST
58681: LIST
58682: LIST
58683: LIST
58684: LIST
58685: LIST
58686: LIST
58687: LIST
58688: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
58689: LD_ADDR_VAR 0 41
58693: PUSH
58694: LD_INT 0
58696: PUSH
58697: LD_INT 2
58699: NEG
58700: PUSH
58701: EMPTY
58702: LIST
58703: LIST
58704: PUSH
58705: LD_INT 1
58707: NEG
58708: PUSH
58709: LD_INT 3
58711: NEG
58712: PUSH
58713: EMPTY
58714: LIST
58715: LIST
58716: PUSH
58717: LD_INT 1
58719: PUSH
58720: LD_INT 2
58722: NEG
58723: PUSH
58724: EMPTY
58725: LIST
58726: LIST
58727: PUSH
58728: EMPTY
58729: LIST
58730: LIST
58731: LIST
58732: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
58733: LD_ADDR_VAR 0 42
58737: PUSH
58738: LD_INT 2
58740: PUSH
58741: LD_INT 0
58743: PUSH
58744: EMPTY
58745: LIST
58746: LIST
58747: PUSH
58748: LD_INT 2
58750: PUSH
58751: LD_INT 1
58753: NEG
58754: PUSH
58755: EMPTY
58756: LIST
58757: LIST
58758: PUSH
58759: LD_INT 3
58761: PUSH
58762: LD_INT 1
58764: PUSH
58765: EMPTY
58766: LIST
58767: LIST
58768: PUSH
58769: EMPTY
58770: LIST
58771: LIST
58772: LIST
58773: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
58774: LD_ADDR_VAR 0 43
58778: PUSH
58779: LD_INT 2
58781: PUSH
58782: LD_INT 2
58784: PUSH
58785: EMPTY
58786: LIST
58787: LIST
58788: PUSH
58789: LD_INT 3
58791: PUSH
58792: LD_INT 2
58794: PUSH
58795: EMPTY
58796: LIST
58797: LIST
58798: PUSH
58799: LD_INT 2
58801: PUSH
58802: LD_INT 3
58804: PUSH
58805: EMPTY
58806: LIST
58807: LIST
58808: PUSH
58809: EMPTY
58810: LIST
58811: LIST
58812: LIST
58813: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
58814: LD_ADDR_VAR 0 44
58818: PUSH
58819: LD_INT 0
58821: PUSH
58822: LD_INT 2
58824: PUSH
58825: EMPTY
58826: LIST
58827: LIST
58828: PUSH
58829: LD_INT 1
58831: PUSH
58832: LD_INT 3
58834: PUSH
58835: EMPTY
58836: LIST
58837: LIST
58838: PUSH
58839: LD_INT 1
58841: NEG
58842: PUSH
58843: LD_INT 2
58845: PUSH
58846: EMPTY
58847: LIST
58848: LIST
58849: PUSH
58850: EMPTY
58851: LIST
58852: LIST
58853: LIST
58854: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58855: LD_ADDR_VAR 0 45
58859: PUSH
58860: LD_INT 2
58862: NEG
58863: PUSH
58864: LD_INT 0
58866: PUSH
58867: EMPTY
58868: LIST
58869: LIST
58870: PUSH
58871: LD_INT 2
58873: NEG
58874: PUSH
58875: LD_INT 1
58877: PUSH
58878: EMPTY
58879: LIST
58880: LIST
58881: PUSH
58882: LD_INT 3
58884: NEG
58885: PUSH
58886: LD_INT 1
58888: NEG
58889: PUSH
58890: EMPTY
58891: LIST
58892: LIST
58893: PUSH
58894: EMPTY
58895: LIST
58896: LIST
58897: LIST
58898: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
58899: LD_ADDR_VAR 0 46
58903: PUSH
58904: LD_INT 2
58906: NEG
58907: PUSH
58908: LD_INT 2
58910: NEG
58911: PUSH
58912: EMPTY
58913: LIST
58914: LIST
58915: PUSH
58916: LD_INT 2
58918: NEG
58919: PUSH
58920: LD_INT 3
58922: NEG
58923: PUSH
58924: EMPTY
58925: LIST
58926: LIST
58927: PUSH
58928: LD_INT 3
58930: NEG
58931: PUSH
58932: LD_INT 2
58934: NEG
58935: PUSH
58936: EMPTY
58937: LIST
58938: LIST
58939: PUSH
58940: EMPTY
58941: LIST
58942: LIST
58943: LIST
58944: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
58945: LD_ADDR_VAR 0 47
58949: PUSH
58950: LD_INT 2
58952: NEG
58953: PUSH
58954: LD_INT 3
58956: NEG
58957: PUSH
58958: EMPTY
58959: LIST
58960: LIST
58961: PUSH
58962: LD_INT 1
58964: NEG
58965: PUSH
58966: LD_INT 3
58968: NEG
58969: PUSH
58970: EMPTY
58971: LIST
58972: LIST
58973: PUSH
58974: EMPTY
58975: LIST
58976: LIST
58977: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
58978: LD_ADDR_VAR 0 48
58982: PUSH
58983: LD_INT 1
58985: PUSH
58986: LD_INT 2
58988: NEG
58989: PUSH
58990: EMPTY
58991: LIST
58992: LIST
58993: PUSH
58994: LD_INT 2
58996: PUSH
58997: LD_INT 1
58999: NEG
59000: PUSH
59001: EMPTY
59002: LIST
59003: LIST
59004: PUSH
59005: EMPTY
59006: LIST
59007: LIST
59008: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
59009: LD_ADDR_VAR 0 49
59013: PUSH
59014: LD_INT 3
59016: PUSH
59017: LD_INT 1
59019: PUSH
59020: EMPTY
59021: LIST
59022: LIST
59023: PUSH
59024: LD_INT 3
59026: PUSH
59027: LD_INT 2
59029: PUSH
59030: EMPTY
59031: LIST
59032: LIST
59033: PUSH
59034: EMPTY
59035: LIST
59036: LIST
59037: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
59038: LD_ADDR_VAR 0 50
59042: PUSH
59043: LD_INT 2
59045: PUSH
59046: LD_INT 3
59048: PUSH
59049: EMPTY
59050: LIST
59051: LIST
59052: PUSH
59053: LD_INT 1
59055: PUSH
59056: LD_INT 3
59058: PUSH
59059: EMPTY
59060: LIST
59061: LIST
59062: PUSH
59063: EMPTY
59064: LIST
59065: LIST
59066: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
59067: LD_ADDR_VAR 0 51
59071: PUSH
59072: LD_INT 1
59074: NEG
59075: PUSH
59076: LD_INT 2
59078: PUSH
59079: EMPTY
59080: LIST
59081: LIST
59082: PUSH
59083: LD_INT 2
59085: NEG
59086: PUSH
59087: LD_INT 1
59089: PUSH
59090: EMPTY
59091: LIST
59092: LIST
59093: PUSH
59094: EMPTY
59095: LIST
59096: LIST
59097: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
59098: LD_ADDR_VAR 0 52
59102: PUSH
59103: LD_INT 3
59105: NEG
59106: PUSH
59107: LD_INT 1
59109: NEG
59110: PUSH
59111: EMPTY
59112: LIST
59113: LIST
59114: PUSH
59115: LD_INT 3
59117: NEG
59118: PUSH
59119: LD_INT 2
59121: NEG
59122: PUSH
59123: EMPTY
59124: LIST
59125: LIST
59126: PUSH
59127: EMPTY
59128: LIST
59129: LIST
59130: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
59131: LD_ADDR_VAR 0 53
59135: PUSH
59136: LD_INT 1
59138: NEG
59139: PUSH
59140: LD_INT 3
59142: NEG
59143: PUSH
59144: EMPTY
59145: LIST
59146: LIST
59147: PUSH
59148: LD_INT 0
59150: PUSH
59151: LD_INT 3
59153: NEG
59154: PUSH
59155: EMPTY
59156: LIST
59157: LIST
59158: PUSH
59159: LD_INT 1
59161: PUSH
59162: LD_INT 2
59164: NEG
59165: PUSH
59166: EMPTY
59167: LIST
59168: LIST
59169: PUSH
59170: EMPTY
59171: LIST
59172: LIST
59173: LIST
59174: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
59175: LD_ADDR_VAR 0 54
59179: PUSH
59180: LD_INT 2
59182: PUSH
59183: LD_INT 1
59185: NEG
59186: PUSH
59187: EMPTY
59188: LIST
59189: LIST
59190: PUSH
59191: LD_INT 3
59193: PUSH
59194: LD_INT 0
59196: PUSH
59197: EMPTY
59198: LIST
59199: LIST
59200: PUSH
59201: LD_INT 3
59203: PUSH
59204: LD_INT 1
59206: PUSH
59207: EMPTY
59208: LIST
59209: LIST
59210: PUSH
59211: EMPTY
59212: LIST
59213: LIST
59214: LIST
59215: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
59216: LD_ADDR_VAR 0 55
59220: PUSH
59221: LD_INT 3
59223: PUSH
59224: LD_INT 2
59226: PUSH
59227: EMPTY
59228: LIST
59229: LIST
59230: PUSH
59231: LD_INT 3
59233: PUSH
59234: LD_INT 3
59236: PUSH
59237: EMPTY
59238: LIST
59239: LIST
59240: PUSH
59241: LD_INT 2
59243: PUSH
59244: LD_INT 3
59246: PUSH
59247: EMPTY
59248: LIST
59249: LIST
59250: PUSH
59251: EMPTY
59252: LIST
59253: LIST
59254: LIST
59255: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
59256: LD_ADDR_VAR 0 56
59260: PUSH
59261: LD_INT 1
59263: PUSH
59264: LD_INT 3
59266: PUSH
59267: EMPTY
59268: LIST
59269: LIST
59270: PUSH
59271: LD_INT 0
59273: PUSH
59274: LD_INT 3
59276: PUSH
59277: EMPTY
59278: LIST
59279: LIST
59280: PUSH
59281: LD_INT 1
59283: NEG
59284: PUSH
59285: LD_INT 2
59287: PUSH
59288: EMPTY
59289: LIST
59290: LIST
59291: PUSH
59292: EMPTY
59293: LIST
59294: LIST
59295: LIST
59296: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59297: LD_ADDR_VAR 0 57
59301: PUSH
59302: LD_INT 2
59304: NEG
59305: PUSH
59306: LD_INT 1
59308: PUSH
59309: EMPTY
59310: LIST
59311: LIST
59312: PUSH
59313: LD_INT 3
59315: NEG
59316: PUSH
59317: LD_INT 0
59319: PUSH
59320: EMPTY
59321: LIST
59322: LIST
59323: PUSH
59324: LD_INT 3
59326: NEG
59327: PUSH
59328: LD_INT 1
59330: NEG
59331: PUSH
59332: EMPTY
59333: LIST
59334: LIST
59335: PUSH
59336: EMPTY
59337: LIST
59338: LIST
59339: LIST
59340: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59341: LD_ADDR_VAR 0 58
59345: PUSH
59346: LD_INT 2
59348: NEG
59349: PUSH
59350: LD_INT 3
59352: NEG
59353: PUSH
59354: EMPTY
59355: LIST
59356: LIST
59357: PUSH
59358: LD_INT 3
59360: NEG
59361: PUSH
59362: LD_INT 2
59364: NEG
59365: PUSH
59366: EMPTY
59367: LIST
59368: LIST
59369: PUSH
59370: LD_INT 3
59372: NEG
59373: PUSH
59374: LD_INT 3
59376: NEG
59377: PUSH
59378: EMPTY
59379: LIST
59380: LIST
59381: PUSH
59382: EMPTY
59383: LIST
59384: LIST
59385: LIST
59386: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
59387: LD_ADDR_VAR 0 59
59391: PUSH
59392: LD_INT 1
59394: NEG
59395: PUSH
59396: LD_INT 2
59398: NEG
59399: PUSH
59400: EMPTY
59401: LIST
59402: LIST
59403: PUSH
59404: LD_INT 0
59406: PUSH
59407: LD_INT 2
59409: NEG
59410: PUSH
59411: EMPTY
59412: LIST
59413: LIST
59414: PUSH
59415: LD_INT 1
59417: PUSH
59418: LD_INT 1
59420: NEG
59421: PUSH
59422: EMPTY
59423: LIST
59424: LIST
59425: PUSH
59426: EMPTY
59427: LIST
59428: LIST
59429: LIST
59430: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
59431: LD_ADDR_VAR 0 60
59435: PUSH
59436: LD_INT 1
59438: PUSH
59439: LD_INT 1
59441: NEG
59442: PUSH
59443: EMPTY
59444: LIST
59445: LIST
59446: PUSH
59447: LD_INT 2
59449: PUSH
59450: LD_INT 0
59452: PUSH
59453: EMPTY
59454: LIST
59455: LIST
59456: PUSH
59457: LD_INT 2
59459: PUSH
59460: LD_INT 1
59462: PUSH
59463: EMPTY
59464: LIST
59465: LIST
59466: PUSH
59467: EMPTY
59468: LIST
59469: LIST
59470: LIST
59471: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
59472: LD_ADDR_VAR 0 61
59476: PUSH
59477: LD_INT 2
59479: PUSH
59480: LD_INT 1
59482: PUSH
59483: EMPTY
59484: LIST
59485: LIST
59486: PUSH
59487: LD_INT 2
59489: PUSH
59490: LD_INT 2
59492: PUSH
59493: EMPTY
59494: LIST
59495: LIST
59496: PUSH
59497: LD_INT 1
59499: PUSH
59500: LD_INT 2
59502: PUSH
59503: EMPTY
59504: LIST
59505: LIST
59506: PUSH
59507: EMPTY
59508: LIST
59509: LIST
59510: LIST
59511: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
59512: LD_ADDR_VAR 0 62
59516: PUSH
59517: LD_INT 1
59519: PUSH
59520: LD_INT 2
59522: PUSH
59523: EMPTY
59524: LIST
59525: LIST
59526: PUSH
59527: LD_INT 0
59529: PUSH
59530: LD_INT 2
59532: PUSH
59533: EMPTY
59534: LIST
59535: LIST
59536: PUSH
59537: LD_INT 1
59539: NEG
59540: PUSH
59541: LD_INT 1
59543: PUSH
59544: EMPTY
59545: LIST
59546: LIST
59547: PUSH
59548: EMPTY
59549: LIST
59550: LIST
59551: LIST
59552: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
59553: LD_ADDR_VAR 0 63
59557: PUSH
59558: LD_INT 1
59560: NEG
59561: PUSH
59562: LD_INT 1
59564: PUSH
59565: EMPTY
59566: LIST
59567: LIST
59568: PUSH
59569: LD_INT 2
59571: NEG
59572: PUSH
59573: LD_INT 0
59575: PUSH
59576: EMPTY
59577: LIST
59578: LIST
59579: PUSH
59580: LD_INT 2
59582: NEG
59583: PUSH
59584: LD_INT 1
59586: NEG
59587: PUSH
59588: EMPTY
59589: LIST
59590: LIST
59591: PUSH
59592: EMPTY
59593: LIST
59594: LIST
59595: LIST
59596: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59597: LD_ADDR_VAR 0 64
59601: PUSH
59602: LD_INT 1
59604: NEG
59605: PUSH
59606: LD_INT 2
59608: NEG
59609: PUSH
59610: EMPTY
59611: LIST
59612: LIST
59613: PUSH
59614: LD_INT 2
59616: NEG
59617: PUSH
59618: LD_INT 1
59620: NEG
59621: PUSH
59622: EMPTY
59623: LIST
59624: LIST
59625: PUSH
59626: LD_INT 2
59628: NEG
59629: PUSH
59630: LD_INT 2
59632: NEG
59633: PUSH
59634: EMPTY
59635: LIST
59636: LIST
59637: PUSH
59638: EMPTY
59639: LIST
59640: LIST
59641: LIST
59642: ST_TO_ADDR
// end ; 2 :
59643: GO 62909
59645: LD_INT 2
59647: DOUBLE
59648: EQUAL
59649: IFTRUE 59653
59651: GO 62908
59653: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
59654: LD_ADDR_VAR 0 29
59658: PUSH
59659: LD_INT 4
59661: PUSH
59662: LD_INT 0
59664: PUSH
59665: EMPTY
59666: LIST
59667: LIST
59668: PUSH
59669: LD_INT 4
59671: PUSH
59672: LD_INT 1
59674: NEG
59675: PUSH
59676: EMPTY
59677: LIST
59678: LIST
59679: PUSH
59680: LD_INT 5
59682: PUSH
59683: LD_INT 0
59685: PUSH
59686: EMPTY
59687: LIST
59688: LIST
59689: PUSH
59690: LD_INT 5
59692: PUSH
59693: LD_INT 1
59695: PUSH
59696: EMPTY
59697: LIST
59698: LIST
59699: PUSH
59700: LD_INT 4
59702: PUSH
59703: LD_INT 1
59705: PUSH
59706: EMPTY
59707: LIST
59708: LIST
59709: PUSH
59710: LD_INT 3
59712: PUSH
59713: LD_INT 0
59715: PUSH
59716: EMPTY
59717: LIST
59718: LIST
59719: PUSH
59720: LD_INT 3
59722: PUSH
59723: LD_INT 1
59725: NEG
59726: PUSH
59727: EMPTY
59728: LIST
59729: LIST
59730: PUSH
59731: LD_INT 3
59733: PUSH
59734: LD_INT 2
59736: NEG
59737: PUSH
59738: EMPTY
59739: LIST
59740: LIST
59741: PUSH
59742: LD_INT 5
59744: PUSH
59745: LD_INT 2
59747: PUSH
59748: EMPTY
59749: LIST
59750: LIST
59751: PUSH
59752: LD_INT 3
59754: PUSH
59755: LD_INT 3
59757: PUSH
59758: EMPTY
59759: LIST
59760: LIST
59761: PUSH
59762: LD_INT 3
59764: PUSH
59765: LD_INT 2
59767: PUSH
59768: EMPTY
59769: LIST
59770: LIST
59771: PUSH
59772: LD_INT 4
59774: PUSH
59775: LD_INT 3
59777: PUSH
59778: EMPTY
59779: LIST
59780: LIST
59781: PUSH
59782: LD_INT 4
59784: PUSH
59785: LD_INT 4
59787: PUSH
59788: EMPTY
59789: LIST
59790: LIST
59791: PUSH
59792: LD_INT 3
59794: PUSH
59795: LD_INT 4
59797: PUSH
59798: EMPTY
59799: LIST
59800: LIST
59801: PUSH
59802: LD_INT 2
59804: PUSH
59805: LD_INT 3
59807: PUSH
59808: EMPTY
59809: LIST
59810: LIST
59811: PUSH
59812: LD_INT 2
59814: PUSH
59815: LD_INT 2
59817: PUSH
59818: EMPTY
59819: LIST
59820: LIST
59821: PUSH
59822: LD_INT 4
59824: PUSH
59825: LD_INT 2
59827: PUSH
59828: EMPTY
59829: LIST
59830: LIST
59831: PUSH
59832: LD_INT 2
59834: PUSH
59835: LD_INT 4
59837: PUSH
59838: EMPTY
59839: LIST
59840: LIST
59841: PUSH
59842: LD_INT 0
59844: PUSH
59845: LD_INT 4
59847: PUSH
59848: EMPTY
59849: LIST
59850: LIST
59851: PUSH
59852: LD_INT 0
59854: PUSH
59855: LD_INT 3
59857: PUSH
59858: EMPTY
59859: LIST
59860: LIST
59861: PUSH
59862: LD_INT 1
59864: PUSH
59865: LD_INT 4
59867: PUSH
59868: EMPTY
59869: LIST
59870: LIST
59871: PUSH
59872: LD_INT 1
59874: PUSH
59875: LD_INT 5
59877: PUSH
59878: EMPTY
59879: LIST
59880: LIST
59881: PUSH
59882: LD_INT 0
59884: PUSH
59885: LD_INT 5
59887: PUSH
59888: EMPTY
59889: LIST
59890: LIST
59891: PUSH
59892: LD_INT 1
59894: NEG
59895: PUSH
59896: LD_INT 4
59898: PUSH
59899: EMPTY
59900: LIST
59901: LIST
59902: PUSH
59903: LD_INT 1
59905: NEG
59906: PUSH
59907: LD_INT 3
59909: PUSH
59910: EMPTY
59911: LIST
59912: LIST
59913: PUSH
59914: LD_INT 2
59916: PUSH
59917: LD_INT 5
59919: PUSH
59920: EMPTY
59921: LIST
59922: LIST
59923: PUSH
59924: LD_INT 2
59926: NEG
59927: PUSH
59928: LD_INT 3
59930: PUSH
59931: EMPTY
59932: LIST
59933: LIST
59934: PUSH
59935: LD_INT 3
59937: NEG
59938: PUSH
59939: LD_INT 0
59941: PUSH
59942: EMPTY
59943: LIST
59944: LIST
59945: PUSH
59946: LD_INT 3
59948: NEG
59949: PUSH
59950: LD_INT 1
59952: NEG
59953: PUSH
59954: EMPTY
59955: LIST
59956: LIST
59957: PUSH
59958: LD_INT 2
59960: NEG
59961: PUSH
59962: LD_INT 0
59964: PUSH
59965: EMPTY
59966: LIST
59967: LIST
59968: PUSH
59969: LD_INT 2
59971: NEG
59972: PUSH
59973: LD_INT 1
59975: PUSH
59976: EMPTY
59977: LIST
59978: LIST
59979: PUSH
59980: LD_INT 3
59982: NEG
59983: PUSH
59984: LD_INT 1
59986: PUSH
59987: EMPTY
59988: LIST
59989: LIST
59990: PUSH
59991: LD_INT 4
59993: NEG
59994: PUSH
59995: LD_INT 0
59997: PUSH
59998: EMPTY
59999: LIST
60000: LIST
60001: PUSH
60002: LD_INT 4
60004: NEG
60005: PUSH
60006: LD_INT 1
60008: NEG
60009: PUSH
60010: EMPTY
60011: LIST
60012: LIST
60013: PUSH
60014: LD_INT 4
60016: NEG
60017: PUSH
60018: LD_INT 2
60020: NEG
60021: PUSH
60022: EMPTY
60023: LIST
60024: LIST
60025: PUSH
60026: LD_INT 2
60028: NEG
60029: PUSH
60030: LD_INT 2
60032: PUSH
60033: EMPTY
60034: LIST
60035: LIST
60036: PUSH
60037: LD_INT 4
60039: NEG
60040: PUSH
60041: LD_INT 4
60043: NEG
60044: PUSH
60045: EMPTY
60046: LIST
60047: LIST
60048: PUSH
60049: LD_INT 4
60051: NEG
60052: PUSH
60053: LD_INT 5
60055: NEG
60056: PUSH
60057: EMPTY
60058: LIST
60059: LIST
60060: PUSH
60061: LD_INT 3
60063: NEG
60064: PUSH
60065: LD_INT 4
60067: NEG
60068: PUSH
60069: EMPTY
60070: LIST
60071: LIST
60072: PUSH
60073: LD_INT 3
60075: NEG
60076: PUSH
60077: LD_INT 3
60079: NEG
60080: PUSH
60081: EMPTY
60082: LIST
60083: LIST
60084: PUSH
60085: LD_INT 4
60087: NEG
60088: PUSH
60089: LD_INT 3
60091: NEG
60092: PUSH
60093: EMPTY
60094: LIST
60095: LIST
60096: PUSH
60097: LD_INT 5
60099: NEG
60100: PUSH
60101: LD_INT 4
60103: NEG
60104: PUSH
60105: EMPTY
60106: LIST
60107: LIST
60108: PUSH
60109: LD_INT 5
60111: NEG
60112: PUSH
60113: LD_INT 5
60115: NEG
60116: PUSH
60117: EMPTY
60118: LIST
60119: LIST
60120: PUSH
60121: LD_INT 3
60123: NEG
60124: PUSH
60125: LD_INT 5
60127: NEG
60128: PUSH
60129: EMPTY
60130: LIST
60131: LIST
60132: PUSH
60133: LD_INT 5
60135: NEG
60136: PUSH
60137: LD_INT 3
60139: NEG
60140: PUSH
60141: EMPTY
60142: LIST
60143: LIST
60144: PUSH
60145: EMPTY
60146: LIST
60147: LIST
60148: LIST
60149: LIST
60150: LIST
60151: LIST
60152: LIST
60153: LIST
60154: LIST
60155: LIST
60156: LIST
60157: LIST
60158: LIST
60159: LIST
60160: LIST
60161: LIST
60162: LIST
60163: LIST
60164: LIST
60165: LIST
60166: LIST
60167: LIST
60168: LIST
60169: LIST
60170: LIST
60171: LIST
60172: LIST
60173: LIST
60174: LIST
60175: LIST
60176: LIST
60177: LIST
60178: LIST
60179: LIST
60180: LIST
60181: LIST
60182: LIST
60183: LIST
60184: LIST
60185: LIST
60186: LIST
60187: LIST
60188: LIST
60189: LIST
60190: LIST
60191: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
60192: LD_ADDR_VAR 0 30
60196: PUSH
60197: LD_INT 4
60199: PUSH
60200: LD_INT 4
60202: PUSH
60203: EMPTY
60204: LIST
60205: LIST
60206: PUSH
60207: LD_INT 4
60209: PUSH
60210: LD_INT 3
60212: PUSH
60213: EMPTY
60214: LIST
60215: LIST
60216: PUSH
60217: LD_INT 5
60219: PUSH
60220: LD_INT 4
60222: PUSH
60223: EMPTY
60224: LIST
60225: LIST
60226: PUSH
60227: LD_INT 5
60229: PUSH
60230: LD_INT 5
60232: PUSH
60233: EMPTY
60234: LIST
60235: LIST
60236: PUSH
60237: LD_INT 4
60239: PUSH
60240: LD_INT 5
60242: PUSH
60243: EMPTY
60244: LIST
60245: LIST
60246: PUSH
60247: LD_INT 3
60249: PUSH
60250: LD_INT 4
60252: PUSH
60253: EMPTY
60254: LIST
60255: LIST
60256: PUSH
60257: LD_INT 3
60259: PUSH
60260: LD_INT 3
60262: PUSH
60263: EMPTY
60264: LIST
60265: LIST
60266: PUSH
60267: LD_INT 5
60269: PUSH
60270: LD_INT 3
60272: PUSH
60273: EMPTY
60274: LIST
60275: LIST
60276: PUSH
60277: LD_INT 3
60279: PUSH
60280: LD_INT 5
60282: PUSH
60283: EMPTY
60284: LIST
60285: LIST
60286: PUSH
60287: LD_INT 0
60289: PUSH
60290: LD_INT 3
60292: PUSH
60293: EMPTY
60294: LIST
60295: LIST
60296: PUSH
60297: LD_INT 0
60299: PUSH
60300: LD_INT 2
60302: PUSH
60303: EMPTY
60304: LIST
60305: LIST
60306: PUSH
60307: LD_INT 1
60309: PUSH
60310: LD_INT 3
60312: PUSH
60313: EMPTY
60314: LIST
60315: LIST
60316: PUSH
60317: LD_INT 1
60319: PUSH
60320: LD_INT 4
60322: PUSH
60323: EMPTY
60324: LIST
60325: LIST
60326: PUSH
60327: LD_INT 0
60329: PUSH
60330: LD_INT 4
60332: PUSH
60333: EMPTY
60334: LIST
60335: LIST
60336: PUSH
60337: LD_INT 1
60339: NEG
60340: PUSH
60341: LD_INT 3
60343: PUSH
60344: EMPTY
60345: LIST
60346: LIST
60347: PUSH
60348: LD_INT 1
60350: NEG
60351: PUSH
60352: LD_INT 2
60354: PUSH
60355: EMPTY
60356: LIST
60357: LIST
60358: PUSH
60359: LD_INT 2
60361: PUSH
60362: LD_INT 4
60364: PUSH
60365: EMPTY
60366: LIST
60367: LIST
60368: PUSH
60369: LD_INT 2
60371: NEG
60372: PUSH
60373: LD_INT 2
60375: PUSH
60376: EMPTY
60377: LIST
60378: LIST
60379: PUSH
60380: LD_INT 4
60382: NEG
60383: PUSH
60384: LD_INT 0
60386: PUSH
60387: EMPTY
60388: LIST
60389: LIST
60390: PUSH
60391: LD_INT 4
60393: NEG
60394: PUSH
60395: LD_INT 1
60397: NEG
60398: PUSH
60399: EMPTY
60400: LIST
60401: LIST
60402: PUSH
60403: LD_INT 3
60405: NEG
60406: PUSH
60407: LD_INT 0
60409: PUSH
60410: EMPTY
60411: LIST
60412: LIST
60413: PUSH
60414: LD_INT 3
60416: NEG
60417: PUSH
60418: LD_INT 1
60420: PUSH
60421: EMPTY
60422: LIST
60423: LIST
60424: PUSH
60425: LD_INT 4
60427: NEG
60428: PUSH
60429: LD_INT 1
60431: PUSH
60432: EMPTY
60433: LIST
60434: LIST
60435: PUSH
60436: LD_INT 5
60438: NEG
60439: PUSH
60440: LD_INT 0
60442: PUSH
60443: EMPTY
60444: LIST
60445: LIST
60446: PUSH
60447: LD_INT 5
60449: NEG
60450: PUSH
60451: LD_INT 1
60453: NEG
60454: PUSH
60455: EMPTY
60456: LIST
60457: LIST
60458: PUSH
60459: LD_INT 5
60461: NEG
60462: PUSH
60463: LD_INT 2
60465: NEG
60466: PUSH
60467: EMPTY
60468: LIST
60469: LIST
60470: PUSH
60471: LD_INT 3
60473: NEG
60474: PUSH
60475: LD_INT 2
60477: PUSH
60478: EMPTY
60479: LIST
60480: LIST
60481: PUSH
60482: LD_INT 3
60484: NEG
60485: PUSH
60486: LD_INT 3
60488: NEG
60489: PUSH
60490: EMPTY
60491: LIST
60492: LIST
60493: PUSH
60494: LD_INT 3
60496: NEG
60497: PUSH
60498: LD_INT 4
60500: NEG
60501: PUSH
60502: EMPTY
60503: LIST
60504: LIST
60505: PUSH
60506: LD_INT 2
60508: NEG
60509: PUSH
60510: LD_INT 3
60512: NEG
60513: PUSH
60514: EMPTY
60515: LIST
60516: LIST
60517: PUSH
60518: LD_INT 2
60520: NEG
60521: PUSH
60522: LD_INT 2
60524: NEG
60525: PUSH
60526: EMPTY
60527: LIST
60528: LIST
60529: PUSH
60530: LD_INT 3
60532: NEG
60533: PUSH
60534: LD_INT 2
60536: NEG
60537: PUSH
60538: EMPTY
60539: LIST
60540: LIST
60541: PUSH
60542: LD_INT 4
60544: NEG
60545: PUSH
60546: LD_INT 3
60548: NEG
60549: PUSH
60550: EMPTY
60551: LIST
60552: LIST
60553: PUSH
60554: LD_INT 4
60556: NEG
60557: PUSH
60558: LD_INT 4
60560: NEG
60561: PUSH
60562: EMPTY
60563: LIST
60564: LIST
60565: PUSH
60566: LD_INT 2
60568: NEG
60569: PUSH
60570: LD_INT 4
60572: NEG
60573: PUSH
60574: EMPTY
60575: LIST
60576: LIST
60577: PUSH
60578: LD_INT 4
60580: NEG
60581: PUSH
60582: LD_INT 2
60584: NEG
60585: PUSH
60586: EMPTY
60587: LIST
60588: LIST
60589: PUSH
60590: LD_INT 0
60592: PUSH
60593: LD_INT 4
60595: NEG
60596: PUSH
60597: EMPTY
60598: LIST
60599: LIST
60600: PUSH
60601: LD_INT 0
60603: PUSH
60604: LD_INT 5
60606: NEG
60607: PUSH
60608: EMPTY
60609: LIST
60610: LIST
60611: PUSH
60612: LD_INT 1
60614: PUSH
60615: LD_INT 4
60617: NEG
60618: PUSH
60619: EMPTY
60620: LIST
60621: LIST
60622: PUSH
60623: LD_INT 1
60625: PUSH
60626: LD_INT 3
60628: NEG
60629: PUSH
60630: EMPTY
60631: LIST
60632: LIST
60633: PUSH
60634: LD_INT 0
60636: PUSH
60637: LD_INT 3
60639: NEG
60640: PUSH
60641: EMPTY
60642: LIST
60643: LIST
60644: PUSH
60645: LD_INT 1
60647: NEG
60648: PUSH
60649: LD_INT 4
60651: NEG
60652: PUSH
60653: EMPTY
60654: LIST
60655: LIST
60656: PUSH
60657: LD_INT 1
60659: NEG
60660: PUSH
60661: LD_INT 5
60663: NEG
60664: PUSH
60665: EMPTY
60666: LIST
60667: LIST
60668: PUSH
60669: LD_INT 2
60671: PUSH
60672: LD_INT 3
60674: NEG
60675: PUSH
60676: EMPTY
60677: LIST
60678: LIST
60679: PUSH
60680: LD_INT 2
60682: NEG
60683: PUSH
60684: LD_INT 5
60686: NEG
60687: PUSH
60688: EMPTY
60689: LIST
60690: LIST
60691: PUSH
60692: EMPTY
60693: LIST
60694: LIST
60695: LIST
60696: LIST
60697: LIST
60698: LIST
60699: LIST
60700: LIST
60701: LIST
60702: LIST
60703: LIST
60704: LIST
60705: LIST
60706: LIST
60707: LIST
60708: LIST
60709: LIST
60710: LIST
60711: LIST
60712: LIST
60713: LIST
60714: LIST
60715: LIST
60716: LIST
60717: LIST
60718: LIST
60719: LIST
60720: LIST
60721: LIST
60722: LIST
60723: LIST
60724: LIST
60725: LIST
60726: LIST
60727: LIST
60728: LIST
60729: LIST
60730: LIST
60731: LIST
60732: LIST
60733: LIST
60734: LIST
60735: LIST
60736: LIST
60737: LIST
60738: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
60739: LD_ADDR_VAR 0 31
60743: PUSH
60744: LD_INT 0
60746: PUSH
60747: LD_INT 4
60749: PUSH
60750: EMPTY
60751: LIST
60752: LIST
60753: PUSH
60754: LD_INT 0
60756: PUSH
60757: LD_INT 3
60759: PUSH
60760: EMPTY
60761: LIST
60762: LIST
60763: PUSH
60764: LD_INT 1
60766: PUSH
60767: LD_INT 4
60769: PUSH
60770: EMPTY
60771: LIST
60772: LIST
60773: PUSH
60774: LD_INT 1
60776: PUSH
60777: LD_INT 5
60779: PUSH
60780: EMPTY
60781: LIST
60782: LIST
60783: PUSH
60784: LD_INT 0
60786: PUSH
60787: LD_INT 5
60789: PUSH
60790: EMPTY
60791: LIST
60792: LIST
60793: PUSH
60794: LD_INT 1
60796: NEG
60797: PUSH
60798: LD_INT 4
60800: PUSH
60801: EMPTY
60802: LIST
60803: LIST
60804: PUSH
60805: LD_INT 1
60807: NEG
60808: PUSH
60809: LD_INT 3
60811: PUSH
60812: EMPTY
60813: LIST
60814: LIST
60815: PUSH
60816: LD_INT 2
60818: PUSH
60819: LD_INT 5
60821: PUSH
60822: EMPTY
60823: LIST
60824: LIST
60825: PUSH
60826: LD_INT 2
60828: NEG
60829: PUSH
60830: LD_INT 3
60832: PUSH
60833: EMPTY
60834: LIST
60835: LIST
60836: PUSH
60837: LD_INT 3
60839: NEG
60840: PUSH
60841: LD_INT 0
60843: PUSH
60844: EMPTY
60845: LIST
60846: LIST
60847: PUSH
60848: LD_INT 3
60850: NEG
60851: PUSH
60852: LD_INT 1
60854: NEG
60855: PUSH
60856: EMPTY
60857: LIST
60858: LIST
60859: PUSH
60860: LD_INT 2
60862: NEG
60863: PUSH
60864: LD_INT 0
60866: PUSH
60867: EMPTY
60868: LIST
60869: LIST
60870: PUSH
60871: LD_INT 2
60873: NEG
60874: PUSH
60875: LD_INT 1
60877: PUSH
60878: EMPTY
60879: LIST
60880: LIST
60881: PUSH
60882: LD_INT 3
60884: NEG
60885: PUSH
60886: LD_INT 1
60888: PUSH
60889: EMPTY
60890: LIST
60891: LIST
60892: PUSH
60893: LD_INT 4
60895: NEG
60896: PUSH
60897: LD_INT 0
60899: PUSH
60900: EMPTY
60901: LIST
60902: LIST
60903: PUSH
60904: LD_INT 4
60906: NEG
60907: PUSH
60908: LD_INT 1
60910: NEG
60911: PUSH
60912: EMPTY
60913: LIST
60914: LIST
60915: PUSH
60916: LD_INT 4
60918: NEG
60919: PUSH
60920: LD_INT 2
60922: NEG
60923: PUSH
60924: EMPTY
60925: LIST
60926: LIST
60927: PUSH
60928: LD_INT 2
60930: NEG
60931: PUSH
60932: LD_INT 2
60934: PUSH
60935: EMPTY
60936: LIST
60937: LIST
60938: PUSH
60939: LD_INT 4
60941: NEG
60942: PUSH
60943: LD_INT 4
60945: NEG
60946: PUSH
60947: EMPTY
60948: LIST
60949: LIST
60950: PUSH
60951: LD_INT 4
60953: NEG
60954: PUSH
60955: LD_INT 5
60957: NEG
60958: PUSH
60959: EMPTY
60960: LIST
60961: LIST
60962: PUSH
60963: LD_INT 3
60965: NEG
60966: PUSH
60967: LD_INT 4
60969: NEG
60970: PUSH
60971: EMPTY
60972: LIST
60973: LIST
60974: PUSH
60975: LD_INT 3
60977: NEG
60978: PUSH
60979: LD_INT 3
60981: NEG
60982: PUSH
60983: EMPTY
60984: LIST
60985: LIST
60986: PUSH
60987: LD_INT 4
60989: NEG
60990: PUSH
60991: LD_INT 3
60993: NEG
60994: PUSH
60995: EMPTY
60996: LIST
60997: LIST
60998: PUSH
60999: LD_INT 5
61001: NEG
61002: PUSH
61003: LD_INT 4
61005: NEG
61006: PUSH
61007: EMPTY
61008: LIST
61009: LIST
61010: PUSH
61011: LD_INT 5
61013: NEG
61014: PUSH
61015: LD_INT 5
61017: NEG
61018: PUSH
61019: EMPTY
61020: LIST
61021: LIST
61022: PUSH
61023: LD_INT 3
61025: NEG
61026: PUSH
61027: LD_INT 5
61029: NEG
61030: PUSH
61031: EMPTY
61032: LIST
61033: LIST
61034: PUSH
61035: LD_INT 5
61037: NEG
61038: PUSH
61039: LD_INT 3
61041: NEG
61042: PUSH
61043: EMPTY
61044: LIST
61045: LIST
61046: PUSH
61047: LD_INT 0
61049: PUSH
61050: LD_INT 3
61052: NEG
61053: PUSH
61054: EMPTY
61055: LIST
61056: LIST
61057: PUSH
61058: LD_INT 0
61060: PUSH
61061: LD_INT 4
61063: NEG
61064: PUSH
61065: EMPTY
61066: LIST
61067: LIST
61068: PUSH
61069: LD_INT 1
61071: PUSH
61072: LD_INT 3
61074: NEG
61075: PUSH
61076: EMPTY
61077: LIST
61078: LIST
61079: PUSH
61080: LD_INT 1
61082: PUSH
61083: LD_INT 2
61085: NEG
61086: PUSH
61087: EMPTY
61088: LIST
61089: LIST
61090: PUSH
61091: LD_INT 0
61093: PUSH
61094: LD_INT 2
61096: NEG
61097: PUSH
61098: EMPTY
61099: LIST
61100: LIST
61101: PUSH
61102: LD_INT 1
61104: NEG
61105: PUSH
61106: LD_INT 3
61108: NEG
61109: PUSH
61110: EMPTY
61111: LIST
61112: LIST
61113: PUSH
61114: LD_INT 1
61116: NEG
61117: PUSH
61118: LD_INT 4
61120: NEG
61121: PUSH
61122: EMPTY
61123: LIST
61124: LIST
61125: PUSH
61126: LD_INT 2
61128: PUSH
61129: LD_INT 2
61131: NEG
61132: PUSH
61133: EMPTY
61134: LIST
61135: LIST
61136: PUSH
61137: LD_INT 2
61139: NEG
61140: PUSH
61141: LD_INT 4
61143: NEG
61144: PUSH
61145: EMPTY
61146: LIST
61147: LIST
61148: PUSH
61149: LD_INT 4
61151: PUSH
61152: LD_INT 0
61154: PUSH
61155: EMPTY
61156: LIST
61157: LIST
61158: PUSH
61159: LD_INT 4
61161: PUSH
61162: LD_INT 1
61164: NEG
61165: PUSH
61166: EMPTY
61167: LIST
61168: LIST
61169: PUSH
61170: LD_INT 5
61172: PUSH
61173: LD_INT 0
61175: PUSH
61176: EMPTY
61177: LIST
61178: LIST
61179: PUSH
61180: LD_INT 5
61182: PUSH
61183: LD_INT 1
61185: PUSH
61186: EMPTY
61187: LIST
61188: LIST
61189: PUSH
61190: LD_INT 4
61192: PUSH
61193: LD_INT 1
61195: PUSH
61196: EMPTY
61197: LIST
61198: LIST
61199: PUSH
61200: LD_INT 3
61202: PUSH
61203: LD_INT 0
61205: PUSH
61206: EMPTY
61207: LIST
61208: LIST
61209: PUSH
61210: LD_INT 3
61212: PUSH
61213: LD_INT 1
61215: NEG
61216: PUSH
61217: EMPTY
61218: LIST
61219: LIST
61220: PUSH
61221: LD_INT 3
61223: PUSH
61224: LD_INT 2
61226: NEG
61227: PUSH
61228: EMPTY
61229: LIST
61230: LIST
61231: PUSH
61232: LD_INT 5
61234: PUSH
61235: LD_INT 2
61237: PUSH
61238: EMPTY
61239: LIST
61240: LIST
61241: PUSH
61242: EMPTY
61243: LIST
61244: LIST
61245: LIST
61246: LIST
61247: LIST
61248: LIST
61249: LIST
61250: LIST
61251: LIST
61252: LIST
61253: LIST
61254: LIST
61255: LIST
61256: LIST
61257: LIST
61258: LIST
61259: LIST
61260: LIST
61261: LIST
61262: LIST
61263: LIST
61264: LIST
61265: LIST
61266: LIST
61267: LIST
61268: LIST
61269: LIST
61270: LIST
61271: LIST
61272: LIST
61273: LIST
61274: LIST
61275: LIST
61276: LIST
61277: LIST
61278: LIST
61279: LIST
61280: LIST
61281: LIST
61282: LIST
61283: LIST
61284: LIST
61285: LIST
61286: LIST
61287: LIST
61288: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
61289: LD_ADDR_VAR 0 32
61293: PUSH
61294: LD_INT 4
61296: NEG
61297: PUSH
61298: LD_INT 0
61300: PUSH
61301: EMPTY
61302: LIST
61303: LIST
61304: PUSH
61305: LD_INT 4
61307: NEG
61308: PUSH
61309: LD_INT 1
61311: NEG
61312: PUSH
61313: EMPTY
61314: LIST
61315: LIST
61316: PUSH
61317: LD_INT 3
61319: NEG
61320: PUSH
61321: LD_INT 0
61323: PUSH
61324: EMPTY
61325: LIST
61326: LIST
61327: PUSH
61328: LD_INT 3
61330: NEG
61331: PUSH
61332: LD_INT 1
61334: PUSH
61335: EMPTY
61336: LIST
61337: LIST
61338: PUSH
61339: LD_INT 4
61341: NEG
61342: PUSH
61343: LD_INT 1
61345: PUSH
61346: EMPTY
61347: LIST
61348: LIST
61349: PUSH
61350: LD_INT 5
61352: NEG
61353: PUSH
61354: LD_INT 0
61356: PUSH
61357: EMPTY
61358: LIST
61359: LIST
61360: PUSH
61361: LD_INT 5
61363: NEG
61364: PUSH
61365: LD_INT 1
61367: NEG
61368: PUSH
61369: EMPTY
61370: LIST
61371: LIST
61372: PUSH
61373: LD_INT 5
61375: NEG
61376: PUSH
61377: LD_INT 2
61379: NEG
61380: PUSH
61381: EMPTY
61382: LIST
61383: LIST
61384: PUSH
61385: LD_INT 3
61387: NEG
61388: PUSH
61389: LD_INT 2
61391: PUSH
61392: EMPTY
61393: LIST
61394: LIST
61395: PUSH
61396: LD_INT 3
61398: NEG
61399: PUSH
61400: LD_INT 3
61402: NEG
61403: PUSH
61404: EMPTY
61405: LIST
61406: LIST
61407: PUSH
61408: LD_INT 3
61410: NEG
61411: PUSH
61412: LD_INT 4
61414: NEG
61415: PUSH
61416: EMPTY
61417: LIST
61418: LIST
61419: PUSH
61420: LD_INT 2
61422: NEG
61423: PUSH
61424: LD_INT 3
61426: NEG
61427: PUSH
61428: EMPTY
61429: LIST
61430: LIST
61431: PUSH
61432: LD_INT 2
61434: NEG
61435: PUSH
61436: LD_INT 2
61438: NEG
61439: PUSH
61440: EMPTY
61441: LIST
61442: LIST
61443: PUSH
61444: LD_INT 3
61446: NEG
61447: PUSH
61448: LD_INT 2
61450: NEG
61451: PUSH
61452: EMPTY
61453: LIST
61454: LIST
61455: PUSH
61456: LD_INT 4
61458: NEG
61459: PUSH
61460: LD_INT 3
61462: NEG
61463: PUSH
61464: EMPTY
61465: LIST
61466: LIST
61467: PUSH
61468: LD_INT 4
61470: NEG
61471: PUSH
61472: LD_INT 4
61474: NEG
61475: PUSH
61476: EMPTY
61477: LIST
61478: LIST
61479: PUSH
61480: LD_INT 2
61482: NEG
61483: PUSH
61484: LD_INT 4
61486: NEG
61487: PUSH
61488: EMPTY
61489: LIST
61490: LIST
61491: PUSH
61492: LD_INT 4
61494: NEG
61495: PUSH
61496: LD_INT 2
61498: NEG
61499: PUSH
61500: EMPTY
61501: LIST
61502: LIST
61503: PUSH
61504: LD_INT 0
61506: PUSH
61507: LD_INT 4
61509: NEG
61510: PUSH
61511: EMPTY
61512: LIST
61513: LIST
61514: PUSH
61515: LD_INT 0
61517: PUSH
61518: LD_INT 5
61520: NEG
61521: PUSH
61522: EMPTY
61523: LIST
61524: LIST
61525: PUSH
61526: LD_INT 1
61528: PUSH
61529: LD_INT 4
61531: NEG
61532: PUSH
61533: EMPTY
61534: LIST
61535: LIST
61536: PUSH
61537: LD_INT 1
61539: PUSH
61540: LD_INT 3
61542: NEG
61543: PUSH
61544: EMPTY
61545: LIST
61546: LIST
61547: PUSH
61548: LD_INT 0
61550: PUSH
61551: LD_INT 3
61553: NEG
61554: PUSH
61555: EMPTY
61556: LIST
61557: LIST
61558: PUSH
61559: LD_INT 1
61561: NEG
61562: PUSH
61563: LD_INT 4
61565: NEG
61566: PUSH
61567: EMPTY
61568: LIST
61569: LIST
61570: PUSH
61571: LD_INT 1
61573: NEG
61574: PUSH
61575: LD_INT 5
61577: NEG
61578: PUSH
61579: EMPTY
61580: LIST
61581: LIST
61582: PUSH
61583: LD_INT 2
61585: PUSH
61586: LD_INT 3
61588: NEG
61589: PUSH
61590: EMPTY
61591: LIST
61592: LIST
61593: PUSH
61594: LD_INT 2
61596: NEG
61597: PUSH
61598: LD_INT 5
61600: NEG
61601: PUSH
61602: EMPTY
61603: LIST
61604: LIST
61605: PUSH
61606: LD_INT 3
61608: PUSH
61609: LD_INT 0
61611: PUSH
61612: EMPTY
61613: LIST
61614: LIST
61615: PUSH
61616: LD_INT 3
61618: PUSH
61619: LD_INT 1
61621: NEG
61622: PUSH
61623: EMPTY
61624: LIST
61625: LIST
61626: PUSH
61627: LD_INT 4
61629: PUSH
61630: LD_INT 0
61632: PUSH
61633: EMPTY
61634: LIST
61635: LIST
61636: PUSH
61637: LD_INT 4
61639: PUSH
61640: LD_INT 1
61642: PUSH
61643: EMPTY
61644: LIST
61645: LIST
61646: PUSH
61647: LD_INT 3
61649: PUSH
61650: LD_INT 1
61652: PUSH
61653: EMPTY
61654: LIST
61655: LIST
61656: PUSH
61657: LD_INT 2
61659: PUSH
61660: LD_INT 0
61662: PUSH
61663: EMPTY
61664: LIST
61665: LIST
61666: PUSH
61667: LD_INT 2
61669: PUSH
61670: LD_INT 1
61672: NEG
61673: PUSH
61674: EMPTY
61675: LIST
61676: LIST
61677: PUSH
61678: LD_INT 2
61680: PUSH
61681: LD_INT 2
61683: NEG
61684: PUSH
61685: EMPTY
61686: LIST
61687: LIST
61688: PUSH
61689: LD_INT 4
61691: PUSH
61692: LD_INT 2
61694: PUSH
61695: EMPTY
61696: LIST
61697: LIST
61698: PUSH
61699: LD_INT 4
61701: PUSH
61702: LD_INT 4
61704: PUSH
61705: EMPTY
61706: LIST
61707: LIST
61708: PUSH
61709: LD_INT 4
61711: PUSH
61712: LD_INT 3
61714: PUSH
61715: EMPTY
61716: LIST
61717: LIST
61718: PUSH
61719: LD_INT 5
61721: PUSH
61722: LD_INT 4
61724: PUSH
61725: EMPTY
61726: LIST
61727: LIST
61728: PUSH
61729: LD_INT 5
61731: PUSH
61732: LD_INT 5
61734: PUSH
61735: EMPTY
61736: LIST
61737: LIST
61738: PUSH
61739: LD_INT 4
61741: PUSH
61742: LD_INT 5
61744: PUSH
61745: EMPTY
61746: LIST
61747: LIST
61748: PUSH
61749: LD_INT 3
61751: PUSH
61752: LD_INT 4
61754: PUSH
61755: EMPTY
61756: LIST
61757: LIST
61758: PUSH
61759: LD_INT 3
61761: PUSH
61762: LD_INT 3
61764: PUSH
61765: EMPTY
61766: LIST
61767: LIST
61768: PUSH
61769: LD_INT 5
61771: PUSH
61772: LD_INT 3
61774: PUSH
61775: EMPTY
61776: LIST
61777: LIST
61778: PUSH
61779: LD_INT 3
61781: PUSH
61782: LD_INT 5
61784: PUSH
61785: EMPTY
61786: LIST
61787: LIST
61788: PUSH
61789: EMPTY
61790: LIST
61791: LIST
61792: LIST
61793: LIST
61794: LIST
61795: LIST
61796: LIST
61797: LIST
61798: LIST
61799: LIST
61800: LIST
61801: LIST
61802: LIST
61803: LIST
61804: LIST
61805: LIST
61806: LIST
61807: LIST
61808: LIST
61809: LIST
61810: LIST
61811: LIST
61812: LIST
61813: LIST
61814: LIST
61815: LIST
61816: LIST
61817: LIST
61818: LIST
61819: LIST
61820: LIST
61821: LIST
61822: LIST
61823: LIST
61824: LIST
61825: LIST
61826: LIST
61827: LIST
61828: LIST
61829: LIST
61830: LIST
61831: LIST
61832: LIST
61833: LIST
61834: LIST
61835: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
61836: LD_ADDR_VAR 0 33
61840: PUSH
61841: LD_INT 4
61843: NEG
61844: PUSH
61845: LD_INT 4
61847: NEG
61848: PUSH
61849: EMPTY
61850: LIST
61851: LIST
61852: PUSH
61853: LD_INT 4
61855: NEG
61856: PUSH
61857: LD_INT 5
61859: NEG
61860: PUSH
61861: EMPTY
61862: LIST
61863: LIST
61864: PUSH
61865: LD_INT 3
61867: NEG
61868: PUSH
61869: LD_INT 4
61871: NEG
61872: PUSH
61873: EMPTY
61874: LIST
61875: LIST
61876: PUSH
61877: LD_INT 3
61879: NEG
61880: PUSH
61881: LD_INT 3
61883: NEG
61884: PUSH
61885: EMPTY
61886: LIST
61887: LIST
61888: PUSH
61889: LD_INT 4
61891: NEG
61892: PUSH
61893: LD_INT 3
61895: NEG
61896: PUSH
61897: EMPTY
61898: LIST
61899: LIST
61900: PUSH
61901: LD_INT 5
61903: NEG
61904: PUSH
61905: LD_INT 4
61907: NEG
61908: PUSH
61909: EMPTY
61910: LIST
61911: LIST
61912: PUSH
61913: LD_INT 5
61915: NEG
61916: PUSH
61917: LD_INT 5
61919: NEG
61920: PUSH
61921: EMPTY
61922: LIST
61923: LIST
61924: PUSH
61925: LD_INT 3
61927: NEG
61928: PUSH
61929: LD_INT 5
61931: NEG
61932: PUSH
61933: EMPTY
61934: LIST
61935: LIST
61936: PUSH
61937: LD_INT 5
61939: NEG
61940: PUSH
61941: LD_INT 3
61943: NEG
61944: PUSH
61945: EMPTY
61946: LIST
61947: LIST
61948: PUSH
61949: LD_INT 0
61951: PUSH
61952: LD_INT 3
61954: NEG
61955: PUSH
61956: EMPTY
61957: LIST
61958: LIST
61959: PUSH
61960: LD_INT 0
61962: PUSH
61963: LD_INT 4
61965: NEG
61966: PUSH
61967: EMPTY
61968: LIST
61969: LIST
61970: PUSH
61971: LD_INT 1
61973: PUSH
61974: LD_INT 3
61976: NEG
61977: PUSH
61978: EMPTY
61979: LIST
61980: LIST
61981: PUSH
61982: LD_INT 1
61984: PUSH
61985: LD_INT 2
61987: NEG
61988: PUSH
61989: EMPTY
61990: LIST
61991: LIST
61992: PUSH
61993: LD_INT 0
61995: PUSH
61996: LD_INT 2
61998: NEG
61999: PUSH
62000: EMPTY
62001: LIST
62002: LIST
62003: PUSH
62004: LD_INT 1
62006: NEG
62007: PUSH
62008: LD_INT 3
62010: NEG
62011: PUSH
62012: EMPTY
62013: LIST
62014: LIST
62015: PUSH
62016: LD_INT 1
62018: NEG
62019: PUSH
62020: LD_INT 4
62022: NEG
62023: PUSH
62024: EMPTY
62025: LIST
62026: LIST
62027: PUSH
62028: LD_INT 2
62030: PUSH
62031: LD_INT 2
62033: NEG
62034: PUSH
62035: EMPTY
62036: LIST
62037: LIST
62038: PUSH
62039: LD_INT 2
62041: NEG
62042: PUSH
62043: LD_INT 4
62045: NEG
62046: PUSH
62047: EMPTY
62048: LIST
62049: LIST
62050: PUSH
62051: LD_INT 4
62053: PUSH
62054: LD_INT 0
62056: PUSH
62057: EMPTY
62058: LIST
62059: LIST
62060: PUSH
62061: LD_INT 4
62063: PUSH
62064: LD_INT 1
62066: NEG
62067: PUSH
62068: EMPTY
62069: LIST
62070: LIST
62071: PUSH
62072: LD_INT 5
62074: PUSH
62075: LD_INT 0
62077: PUSH
62078: EMPTY
62079: LIST
62080: LIST
62081: PUSH
62082: LD_INT 5
62084: PUSH
62085: LD_INT 1
62087: PUSH
62088: EMPTY
62089: LIST
62090: LIST
62091: PUSH
62092: LD_INT 4
62094: PUSH
62095: LD_INT 1
62097: PUSH
62098: EMPTY
62099: LIST
62100: LIST
62101: PUSH
62102: LD_INT 3
62104: PUSH
62105: LD_INT 0
62107: PUSH
62108: EMPTY
62109: LIST
62110: LIST
62111: PUSH
62112: LD_INT 3
62114: PUSH
62115: LD_INT 1
62117: NEG
62118: PUSH
62119: EMPTY
62120: LIST
62121: LIST
62122: PUSH
62123: LD_INT 3
62125: PUSH
62126: LD_INT 2
62128: NEG
62129: PUSH
62130: EMPTY
62131: LIST
62132: LIST
62133: PUSH
62134: LD_INT 5
62136: PUSH
62137: LD_INT 2
62139: PUSH
62140: EMPTY
62141: LIST
62142: LIST
62143: PUSH
62144: LD_INT 3
62146: PUSH
62147: LD_INT 3
62149: PUSH
62150: EMPTY
62151: LIST
62152: LIST
62153: PUSH
62154: LD_INT 3
62156: PUSH
62157: LD_INT 2
62159: PUSH
62160: EMPTY
62161: LIST
62162: LIST
62163: PUSH
62164: LD_INT 4
62166: PUSH
62167: LD_INT 3
62169: PUSH
62170: EMPTY
62171: LIST
62172: LIST
62173: PUSH
62174: LD_INT 4
62176: PUSH
62177: LD_INT 4
62179: PUSH
62180: EMPTY
62181: LIST
62182: LIST
62183: PUSH
62184: LD_INT 3
62186: PUSH
62187: LD_INT 4
62189: PUSH
62190: EMPTY
62191: LIST
62192: LIST
62193: PUSH
62194: LD_INT 2
62196: PUSH
62197: LD_INT 3
62199: PUSH
62200: EMPTY
62201: LIST
62202: LIST
62203: PUSH
62204: LD_INT 2
62206: PUSH
62207: LD_INT 2
62209: PUSH
62210: EMPTY
62211: LIST
62212: LIST
62213: PUSH
62214: LD_INT 4
62216: PUSH
62217: LD_INT 2
62219: PUSH
62220: EMPTY
62221: LIST
62222: LIST
62223: PUSH
62224: LD_INT 2
62226: PUSH
62227: LD_INT 4
62229: PUSH
62230: EMPTY
62231: LIST
62232: LIST
62233: PUSH
62234: LD_INT 0
62236: PUSH
62237: LD_INT 4
62239: PUSH
62240: EMPTY
62241: LIST
62242: LIST
62243: PUSH
62244: LD_INT 0
62246: PUSH
62247: LD_INT 3
62249: PUSH
62250: EMPTY
62251: LIST
62252: LIST
62253: PUSH
62254: LD_INT 1
62256: PUSH
62257: LD_INT 4
62259: PUSH
62260: EMPTY
62261: LIST
62262: LIST
62263: PUSH
62264: LD_INT 1
62266: PUSH
62267: LD_INT 5
62269: PUSH
62270: EMPTY
62271: LIST
62272: LIST
62273: PUSH
62274: LD_INT 0
62276: PUSH
62277: LD_INT 5
62279: PUSH
62280: EMPTY
62281: LIST
62282: LIST
62283: PUSH
62284: LD_INT 1
62286: NEG
62287: PUSH
62288: LD_INT 4
62290: PUSH
62291: EMPTY
62292: LIST
62293: LIST
62294: PUSH
62295: LD_INT 1
62297: NEG
62298: PUSH
62299: LD_INT 3
62301: PUSH
62302: EMPTY
62303: LIST
62304: LIST
62305: PUSH
62306: LD_INT 2
62308: PUSH
62309: LD_INT 5
62311: PUSH
62312: EMPTY
62313: LIST
62314: LIST
62315: PUSH
62316: LD_INT 2
62318: NEG
62319: PUSH
62320: LD_INT 3
62322: PUSH
62323: EMPTY
62324: LIST
62325: LIST
62326: PUSH
62327: EMPTY
62328: LIST
62329: LIST
62330: LIST
62331: LIST
62332: LIST
62333: LIST
62334: LIST
62335: LIST
62336: LIST
62337: LIST
62338: LIST
62339: LIST
62340: LIST
62341: LIST
62342: LIST
62343: LIST
62344: LIST
62345: LIST
62346: LIST
62347: LIST
62348: LIST
62349: LIST
62350: LIST
62351: LIST
62352: LIST
62353: LIST
62354: LIST
62355: LIST
62356: LIST
62357: LIST
62358: LIST
62359: LIST
62360: LIST
62361: LIST
62362: LIST
62363: LIST
62364: LIST
62365: LIST
62366: LIST
62367: LIST
62368: LIST
62369: LIST
62370: LIST
62371: LIST
62372: LIST
62373: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
62374: LD_ADDR_VAR 0 34
62378: PUSH
62379: LD_INT 0
62381: PUSH
62382: LD_INT 4
62384: NEG
62385: PUSH
62386: EMPTY
62387: LIST
62388: LIST
62389: PUSH
62390: LD_INT 0
62392: PUSH
62393: LD_INT 5
62395: NEG
62396: PUSH
62397: EMPTY
62398: LIST
62399: LIST
62400: PUSH
62401: LD_INT 1
62403: PUSH
62404: LD_INT 4
62406: NEG
62407: PUSH
62408: EMPTY
62409: LIST
62410: LIST
62411: PUSH
62412: LD_INT 1
62414: PUSH
62415: LD_INT 3
62417: NEG
62418: PUSH
62419: EMPTY
62420: LIST
62421: LIST
62422: PUSH
62423: LD_INT 0
62425: PUSH
62426: LD_INT 3
62428: NEG
62429: PUSH
62430: EMPTY
62431: LIST
62432: LIST
62433: PUSH
62434: LD_INT 1
62436: NEG
62437: PUSH
62438: LD_INT 4
62440: NEG
62441: PUSH
62442: EMPTY
62443: LIST
62444: LIST
62445: PUSH
62446: LD_INT 1
62448: NEG
62449: PUSH
62450: LD_INT 5
62452: NEG
62453: PUSH
62454: EMPTY
62455: LIST
62456: LIST
62457: PUSH
62458: LD_INT 2
62460: PUSH
62461: LD_INT 3
62463: NEG
62464: PUSH
62465: EMPTY
62466: LIST
62467: LIST
62468: PUSH
62469: LD_INT 2
62471: NEG
62472: PUSH
62473: LD_INT 5
62475: NEG
62476: PUSH
62477: EMPTY
62478: LIST
62479: LIST
62480: PUSH
62481: LD_INT 3
62483: PUSH
62484: LD_INT 0
62486: PUSH
62487: EMPTY
62488: LIST
62489: LIST
62490: PUSH
62491: LD_INT 3
62493: PUSH
62494: LD_INT 1
62496: NEG
62497: PUSH
62498: EMPTY
62499: LIST
62500: LIST
62501: PUSH
62502: LD_INT 4
62504: PUSH
62505: LD_INT 0
62507: PUSH
62508: EMPTY
62509: LIST
62510: LIST
62511: PUSH
62512: LD_INT 4
62514: PUSH
62515: LD_INT 1
62517: PUSH
62518: EMPTY
62519: LIST
62520: LIST
62521: PUSH
62522: LD_INT 3
62524: PUSH
62525: LD_INT 1
62527: PUSH
62528: EMPTY
62529: LIST
62530: LIST
62531: PUSH
62532: LD_INT 2
62534: PUSH
62535: LD_INT 0
62537: PUSH
62538: EMPTY
62539: LIST
62540: LIST
62541: PUSH
62542: LD_INT 2
62544: PUSH
62545: LD_INT 1
62547: NEG
62548: PUSH
62549: EMPTY
62550: LIST
62551: LIST
62552: PUSH
62553: LD_INT 2
62555: PUSH
62556: LD_INT 2
62558: NEG
62559: PUSH
62560: EMPTY
62561: LIST
62562: LIST
62563: PUSH
62564: LD_INT 4
62566: PUSH
62567: LD_INT 2
62569: PUSH
62570: EMPTY
62571: LIST
62572: LIST
62573: PUSH
62574: LD_INT 4
62576: PUSH
62577: LD_INT 4
62579: PUSH
62580: EMPTY
62581: LIST
62582: LIST
62583: PUSH
62584: LD_INT 4
62586: PUSH
62587: LD_INT 3
62589: PUSH
62590: EMPTY
62591: LIST
62592: LIST
62593: PUSH
62594: LD_INT 5
62596: PUSH
62597: LD_INT 4
62599: PUSH
62600: EMPTY
62601: LIST
62602: LIST
62603: PUSH
62604: LD_INT 5
62606: PUSH
62607: LD_INT 5
62609: PUSH
62610: EMPTY
62611: LIST
62612: LIST
62613: PUSH
62614: LD_INT 4
62616: PUSH
62617: LD_INT 5
62619: PUSH
62620: EMPTY
62621: LIST
62622: LIST
62623: PUSH
62624: LD_INT 3
62626: PUSH
62627: LD_INT 4
62629: PUSH
62630: EMPTY
62631: LIST
62632: LIST
62633: PUSH
62634: LD_INT 3
62636: PUSH
62637: LD_INT 3
62639: PUSH
62640: EMPTY
62641: LIST
62642: LIST
62643: PUSH
62644: LD_INT 5
62646: PUSH
62647: LD_INT 3
62649: PUSH
62650: EMPTY
62651: LIST
62652: LIST
62653: PUSH
62654: LD_INT 3
62656: PUSH
62657: LD_INT 5
62659: PUSH
62660: EMPTY
62661: LIST
62662: LIST
62663: PUSH
62664: LD_INT 0
62666: PUSH
62667: LD_INT 3
62669: PUSH
62670: EMPTY
62671: LIST
62672: LIST
62673: PUSH
62674: LD_INT 0
62676: PUSH
62677: LD_INT 2
62679: PUSH
62680: EMPTY
62681: LIST
62682: LIST
62683: PUSH
62684: LD_INT 1
62686: PUSH
62687: LD_INT 3
62689: PUSH
62690: EMPTY
62691: LIST
62692: LIST
62693: PUSH
62694: LD_INT 1
62696: PUSH
62697: LD_INT 4
62699: PUSH
62700: EMPTY
62701: LIST
62702: LIST
62703: PUSH
62704: LD_INT 0
62706: PUSH
62707: LD_INT 4
62709: PUSH
62710: EMPTY
62711: LIST
62712: LIST
62713: PUSH
62714: LD_INT 1
62716: NEG
62717: PUSH
62718: LD_INT 3
62720: PUSH
62721: EMPTY
62722: LIST
62723: LIST
62724: PUSH
62725: LD_INT 1
62727: NEG
62728: PUSH
62729: LD_INT 2
62731: PUSH
62732: EMPTY
62733: LIST
62734: LIST
62735: PUSH
62736: LD_INT 2
62738: PUSH
62739: LD_INT 4
62741: PUSH
62742: EMPTY
62743: LIST
62744: LIST
62745: PUSH
62746: LD_INT 2
62748: NEG
62749: PUSH
62750: LD_INT 2
62752: PUSH
62753: EMPTY
62754: LIST
62755: LIST
62756: PUSH
62757: LD_INT 4
62759: NEG
62760: PUSH
62761: LD_INT 0
62763: PUSH
62764: EMPTY
62765: LIST
62766: LIST
62767: PUSH
62768: LD_INT 4
62770: NEG
62771: PUSH
62772: LD_INT 1
62774: NEG
62775: PUSH
62776: EMPTY
62777: LIST
62778: LIST
62779: PUSH
62780: LD_INT 3
62782: NEG
62783: PUSH
62784: LD_INT 0
62786: PUSH
62787: EMPTY
62788: LIST
62789: LIST
62790: PUSH
62791: LD_INT 3
62793: NEG
62794: PUSH
62795: LD_INT 1
62797: PUSH
62798: EMPTY
62799: LIST
62800: LIST
62801: PUSH
62802: LD_INT 4
62804: NEG
62805: PUSH
62806: LD_INT 1
62808: PUSH
62809: EMPTY
62810: LIST
62811: LIST
62812: PUSH
62813: LD_INT 5
62815: NEG
62816: PUSH
62817: LD_INT 0
62819: PUSH
62820: EMPTY
62821: LIST
62822: LIST
62823: PUSH
62824: LD_INT 5
62826: NEG
62827: PUSH
62828: LD_INT 1
62830: NEG
62831: PUSH
62832: EMPTY
62833: LIST
62834: LIST
62835: PUSH
62836: LD_INT 5
62838: NEG
62839: PUSH
62840: LD_INT 2
62842: NEG
62843: PUSH
62844: EMPTY
62845: LIST
62846: LIST
62847: PUSH
62848: LD_INT 3
62850: NEG
62851: PUSH
62852: LD_INT 2
62854: PUSH
62855: EMPTY
62856: LIST
62857: LIST
62858: PUSH
62859: EMPTY
62860: LIST
62861: LIST
62862: LIST
62863: LIST
62864: LIST
62865: LIST
62866: LIST
62867: LIST
62868: LIST
62869: LIST
62870: LIST
62871: LIST
62872: LIST
62873: LIST
62874: LIST
62875: LIST
62876: LIST
62877: LIST
62878: LIST
62879: LIST
62880: LIST
62881: LIST
62882: LIST
62883: LIST
62884: LIST
62885: LIST
62886: LIST
62887: LIST
62888: LIST
62889: LIST
62890: LIST
62891: LIST
62892: LIST
62893: LIST
62894: LIST
62895: LIST
62896: LIST
62897: LIST
62898: LIST
62899: LIST
62900: LIST
62901: LIST
62902: LIST
62903: LIST
62904: LIST
62905: ST_TO_ADDR
// end ; end ;
62906: GO 62909
62908: POP
// case btype of b_depot , b_warehouse :
62909: LD_VAR 0 1
62913: PUSH
62914: LD_INT 0
62916: DOUBLE
62917: EQUAL
62918: IFTRUE 62928
62920: LD_INT 1
62922: DOUBLE
62923: EQUAL
62924: IFTRUE 62928
62926: GO 63129
62928: POP
// case nation of nation_american :
62929: LD_VAR 0 5
62933: PUSH
62934: LD_INT 1
62936: DOUBLE
62937: EQUAL
62938: IFTRUE 62942
62940: GO 62998
62942: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
62943: LD_ADDR_VAR 0 9
62947: PUSH
62948: LD_VAR 0 11
62952: PUSH
62953: LD_VAR 0 12
62957: PUSH
62958: LD_VAR 0 13
62962: PUSH
62963: LD_VAR 0 14
62967: PUSH
62968: LD_VAR 0 15
62972: PUSH
62973: LD_VAR 0 16
62977: PUSH
62978: EMPTY
62979: LIST
62980: LIST
62981: LIST
62982: LIST
62983: LIST
62984: LIST
62985: PUSH
62986: LD_VAR 0 4
62990: PUSH
62991: LD_INT 1
62993: PLUS
62994: ARRAY
62995: ST_TO_ADDR
62996: GO 63127
62998: LD_INT 2
63000: DOUBLE
63001: EQUAL
63002: IFTRUE 63006
63004: GO 63062
63006: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
63007: LD_ADDR_VAR 0 9
63011: PUSH
63012: LD_VAR 0 17
63016: PUSH
63017: LD_VAR 0 18
63021: PUSH
63022: LD_VAR 0 19
63026: PUSH
63027: LD_VAR 0 20
63031: PUSH
63032: LD_VAR 0 21
63036: PUSH
63037: LD_VAR 0 22
63041: PUSH
63042: EMPTY
63043: LIST
63044: LIST
63045: LIST
63046: LIST
63047: LIST
63048: LIST
63049: PUSH
63050: LD_VAR 0 4
63054: PUSH
63055: LD_INT 1
63057: PLUS
63058: ARRAY
63059: ST_TO_ADDR
63060: GO 63127
63062: LD_INT 3
63064: DOUBLE
63065: EQUAL
63066: IFTRUE 63070
63068: GO 63126
63070: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
63071: LD_ADDR_VAR 0 9
63075: PUSH
63076: LD_VAR 0 23
63080: PUSH
63081: LD_VAR 0 24
63085: PUSH
63086: LD_VAR 0 25
63090: PUSH
63091: LD_VAR 0 26
63095: PUSH
63096: LD_VAR 0 27
63100: PUSH
63101: LD_VAR 0 28
63105: PUSH
63106: EMPTY
63107: LIST
63108: LIST
63109: LIST
63110: LIST
63111: LIST
63112: LIST
63113: PUSH
63114: LD_VAR 0 4
63118: PUSH
63119: LD_INT 1
63121: PLUS
63122: ARRAY
63123: ST_TO_ADDR
63124: GO 63127
63126: POP
63127: GO 63682
63129: LD_INT 2
63131: DOUBLE
63132: EQUAL
63133: IFTRUE 63143
63135: LD_INT 3
63137: DOUBLE
63138: EQUAL
63139: IFTRUE 63143
63141: GO 63199
63143: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
63144: LD_ADDR_VAR 0 9
63148: PUSH
63149: LD_VAR 0 29
63153: PUSH
63154: LD_VAR 0 30
63158: PUSH
63159: LD_VAR 0 31
63163: PUSH
63164: LD_VAR 0 32
63168: PUSH
63169: LD_VAR 0 33
63173: PUSH
63174: LD_VAR 0 34
63178: PUSH
63179: EMPTY
63180: LIST
63181: LIST
63182: LIST
63183: LIST
63184: LIST
63185: LIST
63186: PUSH
63187: LD_VAR 0 4
63191: PUSH
63192: LD_INT 1
63194: PLUS
63195: ARRAY
63196: ST_TO_ADDR
63197: GO 63682
63199: LD_INT 16
63201: DOUBLE
63202: EQUAL
63203: IFTRUE 63261
63205: LD_INT 17
63207: DOUBLE
63208: EQUAL
63209: IFTRUE 63261
63211: LD_INT 18
63213: DOUBLE
63214: EQUAL
63215: IFTRUE 63261
63217: LD_INT 19
63219: DOUBLE
63220: EQUAL
63221: IFTRUE 63261
63223: LD_INT 22
63225: DOUBLE
63226: EQUAL
63227: IFTRUE 63261
63229: LD_INT 20
63231: DOUBLE
63232: EQUAL
63233: IFTRUE 63261
63235: LD_INT 21
63237: DOUBLE
63238: EQUAL
63239: IFTRUE 63261
63241: LD_INT 23
63243: DOUBLE
63244: EQUAL
63245: IFTRUE 63261
63247: LD_INT 24
63249: DOUBLE
63250: EQUAL
63251: IFTRUE 63261
63253: LD_INT 25
63255: DOUBLE
63256: EQUAL
63257: IFTRUE 63261
63259: GO 63317
63261: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
63262: LD_ADDR_VAR 0 9
63266: PUSH
63267: LD_VAR 0 35
63271: PUSH
63272: LD_VAR 0 36
63276: PUSH
63277: LD_VAR 0 37
63281: PUSH
63282: LD_VAR 0 38
63286: PUSH
63287: LD_VAR 0 39
63291: PUSH
63292: LD_VAR 0 40
63296: PUSH
63297: EMPTY
63298: LIST
63299: LIST
63300: LIST
63301: LIST
63302: LIST
63303: LIST
63304: PUSH
63305: LD_VAR 0 4
63309: PUSH
63310: LD_INT 1
63312: PLUS
63313: ARRAY
63314: ST_TO_ADDR
63315: GO 63682
63317: LD_INT 6
63319: DOUBLE
63320: EQUAL
63321: IFTRUE 63373
63323: LD_INT 7
63325: DOUBLE
63326: EQUAL
63327: IFTRUE 63373
63329: LD_INT 8
63331: DOUBLE
63332: EQUAL
63333: IFTRUE 63373
63335: LD_INT 13
63337: DOUBLE
63338: EQUAL
63339: IFTRUE 63373
63341: LD_INT 12
63343: DOUBLE
63344: EQUAL
63345: IFTRUE 63373
63347: LD_INT 15
63349: DOUBLE
63350: EQUAL
63351: IFTRUE 63373
63353: LD_INT 11
63355: DOUBLE
63356: EQUAL
63357: IFTRUE 63373
63359: LD_INT 14
63361: DOUBLE
63362: EQUAL
63363: IFTRUE 63373
63365: LD_INT 10
63367: DOUBLE
63368: EQUAL
63369: IFTRUE 63373
63371: GO 63429
63373: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
63374: LD_ADDR_VAR 0 9
63378: PUSH
63379: LD_VAR 0 41
63383: PUSH
63384: LD_VAR 0 42
63388: PUSH
63389: LD_VAR 0 43
63393: PUSH
63394: LD_VAR 0 44
63398: PUSH
63399: LD_VAR 0 45
63403: PUSH
63404: LD_VAR 0 46
63408: PUSH
63409: EMPTY
63410: LIST
63411: LIST
63412: LIST
63413: LIST
63414: LIST
63415: LIST
63416: PUSH
63417: LD_VAR 0 4
63421: PUSH
63422: LD_INT 1
63424: PLUS
63425: ARRAY
63426: ST_TO_ADDR
63427: GO 63682
63429: LD_INT 36
63431: DOUBLE
63432: EQUAL
63433: IFTRUE 63437
63435: GO 63493
63437: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
63438: LD_ADDR_VAR 0 9
63442: PUSH
63443: LD_VAR 0 47
63447: PUSH
63448: LD_VAR 0 48
63452: PUSH
63453: LD_VAR 0 49
63457: PUSH
63458: LD_VAR 0 50
63462: PUSH
63463: LD_VAR 0 51
63467: PUSH
63468: LD_VAR 0 52
63472: PUSH
63473: EMPTY
63474: LIST
63475: LIST
63476: LIST
63477: LIST
63478: LIST
63479: LIST
63480: PUSH
63481: LD_VAR 0 4
63485: PUSH
63486: LD_INT 1
63488: PLUS
63489: ARRAY
63490: ST_TO_ADDR
63491: GO 63682
63493: LD_INT 4
63495: DOUBLE
63496: EQUAL
63497: IFTRUE 63519
63499: LD_INT 5
63501: DOUBLE
63502: EQUAL
63503: IFTRUE 63519
63505: LD_INT 34
63507: DOUBLE
63508: EQUAL
63509: IFTRUE 63519
63511: LD_INT 37
63513: DOUBLE
63514: EQUAL
63515: IFTRUE 63519
63517: GO 63575
63519: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
63520: LD_ADDR_VAR 0 9
63524: PUSH
63525: LD_VAR 0 53
63529: PUSH
63530: LD_VAR 0 54
63534: PUSH
63535: LD_VAR 0 55
63539: PUSH
63540: LD_VAR 0 56
63544: PUSH
63545: LD_VAR 0 57
63549: PUSH
63550: LD_VAR 0 58
63554: PUSH
63555: EMPTY
63556: LIST
63557: LIST
63558: LIST
63559: LIST
63560: LIST
63561: LIST
63562: PUSH
63563: LD_VAR 0 4
63567: PUSH
63568: LD_INT 1
63570: PLUS
63571: ARRAY
63572: ST_TO_ADDR
63573: GO 63682
63575: LD_INT 31
63577: DOUBLE
63578: EQUAL
63579: IFTRUE 63625
63581: LD_INT 32
63583: DOUBLE
63584: EQUAL
63585: IFTRUE 63625
63587: LD_INT 33
63589: DOUBLE
63590: EQUAL
63591: IFTRUE 63625
63593: LD_INT 27
63595: DOUBLE
63596: EQUAL
63597: IFTRUE 63625
63599: LD_INT 26
63601: DOUBLE
63602: EQUAL
63603: IFTRUE 63625
63605: LD_INT 28
63607: DOUBLE
63608: EQUAL
63609: IFTRUE 63625
63611: LD_INT 29
63613: DOUBLE
63614: EQUAL
63615: IFTRUE 63625
63617: LD_INT 30
63619: DOUBLE
63620: EQUAL
63621: IFTRUE 63625
63623: GO 63681
63625: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
63626: LD_ADDR_VAR 0 9
63630: PUSH
63631: LD_VAR 0 59
63635: PUSH
63636: LD_VAR 0 60
63640: PUSH
63641: LD_VAR 0 61
63645: PUSH
63646: LD_VAR 0 62
63650: PUSH
63651: LD_VAR 0 63
63655: PUSH
63656: LD_VAR 0 64
63660: PUSH
63661: EMPTY
63662: LIST
63663: LIST
63664: LIST
63665: LIST
63666: LIST
63667: LIST
63668: PUSH
63669: LD_VAR 0 4
63673: PUSH
63674: LD_INT 1
63676: PLUS
63677: ARRAY
63678: ST_TO_ADDR
63679: GO 63682
63681: POP
// temp_list2 = [ ] ;
63682: LD_ADDR_VAR 0 10
63686: PUSH
63687: EMPTY
63688: ST_TO_ADDR
// for i in temp_list do
63689: LD_ADDR_VAR 0 8
63693: PUSH
63694: LD_VAR 0 9
63698: PUSH
63699: FOR_IN
63700: IFFALSE 63752
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
63702: LD_ADDR_VAR 0 10
63706: PUSH
63707: LD_VAR 0 10
63711: PUSH
63712: LD_VAR 0 8
63716: PUSH
63717: LD_INT 1
63719: ARRAY
63720: PUSH
63721: LD_VAR 0 2
63725: PLUS
63726: PUSH
63727: LD_VAR 0 8
63731: PUSH
63732: LD_INT 2
63734: ARRAY
63735: PUSH
63736: LD_VAR 0 3
63740: PLUS
63741: PUSH
63742: EMPTY
63743: LIST
63744: LIST
63745: PUSH
63746: EMPTY
63747: LIST
63748: ADD
63749: ST_TO_ADDR
63750: GO 63699
63752: POP
63753: POP
// result = temp_list2 ;
63754: LD_ADDR_VAR 0 7
63758: PUSH
63759: LD_VAR 0 10
63763: ST_TO_ADDR
// end ;
63764: LD_VAR 0 7
63768: RET
// export function EnemyInRange ( unit , dist ) ; begin
63769: LD_INT 0
63771: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
63772: LD_ADDR_VAR 0 3
63776: PUSH
63777: LD_VAR 0 1
63781: PPUSH
63782: CALL_OW 255
63786: PPUSH
63787: LD_VAR 0 1
63791: PPUSH
63792: CALL_OW 250
63796: PPUSH
63797: LD_VAR 0 1
63801: PPUSH
63802: CALL_OW 251
63806: PPUSH
63807: LD_VAR 0 2
63811: PPUSH
63812: CALL 37171 0 4
63816: PUSH
63817: LD_INT 4
63819: ARRAY
63820: ST_TO_ADDR
// end ;
63821: LD_VAR 0 3
63825: RET
// export function PlayerSeeMe ( unit ) ; begin
63826: LD_INT 0
63828: PPUSH
// result := See ( your_side , unit ) ;
63829: LD_ADDR_VAR 0 2
63833: PUSH
63834: LD_OWVAR 2
63838: PPUSH
63839: LD_VAR 0 1
63843: PPUSH
63844: CALL_OW 292
63848: ST_TO_ADDR
// end ;
63849: LD_VAR 0 2
63853: RET
// export function ReverseDir ( unit ) ; begin
63854: LD_INT 0
63856: PPUSH
// if not unit then
63857: LD_VAR 0 1
63861: NOT
63862: IFFALSE 63866
// exit ;
63864: GO 63889
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
63866: LD_ADDR_VAR 0 2
63870: PUSH
63871: LD_VAR 0 1
63875: PPUSH
63876: CALL_OW 254
63880: PUSH
63881: LD_INT 3
63883: PLUS
63884: PUSH
63885: LD_INT 6
63887: MOD
63888: ST_TO_ADDR
// end ;
63889: LD_VAR 0 2
63893: RET
// export function ReverseArray ( array ) ; var i ; begin
63894: LD_INT 0
63896: PPUSH
63897: PPUSH
// if not array then
63898: LD_VAR 0 1
63902: NOT
63903: IFFALSE 63907
// exit ;
63905: GO 63962
// result := [ ] ;
63907: LD_ADDR_VAR 0 2
63911: PUSH
63912: EMPTY
63913: ST_TO_ADDR
// for i := array downto 1 do
63914: LD_ADDR_VAR 0 3
63918: PUSH
63919: DOUBLE
63920: LD_VAR 0 1
63924: INC
63925: ST_TO_ADDR
63926: LD_INT 1
63928: PUSH
63929: FOR_DOWNTO
63930: IFFALSE 63960
// result := Join ( result , array [ i ] ) ;
63932: LD_ADDR_VAR 0 2
63936: PUSH
63937: LD_VAR 0 2
63941: PPUSH
63942: LD_VAR 0 1
63946: PUSH
63947: LD_VAR 0 3
63951: ARRAY
63952: PPUSH
63953: CALL 68587 0 2
63957: ST_TO_ADDR
63958: GO 63929
63960: POP
63961: POP
// end ;
63962: LD_VAR 0 2
63966: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
63967: LD_INT 0
63969: PPUSH
63970: PPUSH
63971: PPUSH
63972: PPUSH
63973: PPUSH
63974: PPUSH
// if not unit or not hexes then
63975: LD_VAR 0 1
63979: NOT
63980: PUSH
63981: LD_VAR 0 2
63985: NOT
63986: OR
63987: IFFALSE 63991
// exit ;
63989: GO 64114
// dist := 9999 ;
63991: LD_ADDR_VAR 0 5
63995: PUSH
63996: LD_INT 9999
63998: ST_TO_ADDR
// for i = 1 to hexes do
63999: LD_ADDR_VAR 0 4
64003: PUSH
64004: DOUBLE
64005: LD_INT 1
64007: DEC
64008: ST_TO_ADDR
64009: LD_VAR 0 2
64013: PUSH
64014: FOR_TO
64015: IFFALSE 64102
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
64017: LD_ADDR_VAR 0 6
64021: PUSH
64022: LD_VAR 0 1
64026: PPUSH
64027: LD_VAR 0 2
64031: PUSH
64032: LD_VAR 0 4
64036: ARRAY
64037: PUSH
64038: LD_INT 1
64040: ARRAY
64041: PPUSH
64042: LD_VAR 0 2
64046: PUSH
64047: LD_VAR 0 4
64051: ARRAY
64052: PUSH
64053: LD_INT 2
64055: ARRAY
64056: PPUSH
64057: CALL_OW 297
64061: ST_TO_ADDR
// if tdist < dist then
64062: LD_VAR 0 6
64066: PUSH
64067: LD_VAR 0 5
64071: LESS
64072: IFFALSE 64100
// begin hex := hexes [ i ] ;
64074: LD_ADDR_VAR 0 8
64078: PUSH
64079: LD_VAR 0 2
64083: PUSH
64084: LD_VAR 0 4
64088: ARRAY
64089: ST_TO_ADDR
// dist := tdist ;
64090: LD_ADDR_VAR 0 5
64094: PUSH
64095: LD_VAR 0 6
64099: ST_TO_ADDR
// end ; end ;
64100: GO 64014
64102: POP
64103: POP
// result := hex ;
64104: LD_ADDR_VAR 0 3
64108: PUSH
64109: LD_VAR 0 8
64113: ST_TO_ADDR
// end ;
64114: LD_VAR 0 3
64118: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
64119: LD_INT 0
64121: PPUSH
64122: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
64123: LD_VAR 0 1
64127: NOT
64128: PUSH
64129: LD_VAR 0 1
64133: PUSH
64134: LD_INT 21
64136: PUSH
64137: LD_INT 2
64139: PUSH
64140: EMPTY
64141: LIST
64142: LIST
64143: PUSH
64144: LD_INT 23
64146: PUSH
64147: LD_INT 2
64149: PUSH
64150: EMPTY
64151: LIST
64152: LIST
64153: PUSH
64154: EMPTY
64155: LIST
64156: LIST
64157: PPUSH
64158: CALL_OW 69
64162: IN
64163: NOT
64164: OR
64165: IFFALSE 64169
// exit ;
64167: GO 64216
// for i = 1 to 3 do
64169: LD_ADDR_VAR 0 3
64173: PUSH
64174: DOUBLE
64175: LD_INT 1
64177: DEC
64178: ST_TO_ADDR
64179: LD_INT 3
64181: PUSH
64182: FOR_TO
64183: IFFALSE 64214
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
64185: LD_VAR 0 1
64189: PPUSH
64190: CALL_OW 250
64194: PPUSH
64195: LD_VAR 0 1
64199: PPUSH
64200: CALL_OW 251
64204: PPUSH
64205: LD_INT 1
64207: PPUSH
64208: CALL_OW 453
64212: GO 64182
64214: POP
64215: POP
// end ;
64216: LD_VAR 0 2
64220: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
64221: LD_INT 0
64223: PPUSH
64224: PPUSH
64225: PPUSH
64226: PPUSH
64227: PPUSH
64228: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
64229: LD_VAR 0 1
64233: NOT
64234: PUSH
64235: LD_VAR 0 2
64239: NOT
64240: OR
64241: PUSH
64242: LD_VAR 0 1
64246: PPUSH
64247: CALL_OW 314
64251: OR
64252: IFFALSE 64256
// exit ;
64254: GO 64697
// x := GetX ( enemy_unit ) ;
64256: LD_ADDR_VAR 0 7
64260: PUSH
64261: LD_VAR 0 2
64265: PPUSH
64266: CALL_OW 250
64270: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
64271: LD_ADDR_VAR 0 8
64275: PUSH
64276: LD_VAR 0 2
64280: PPUSH
64281: CALL_OW 251
64285: ST_TO_ADDR
// if not x or not y then
64286: LD_VAR 0 7
64290: NOT
64291: PUSH
64292: LD_VAR 0 8
64296: NOT
64297: OR
64298: IFFALSE 64302
// exit ;
64300: GO 64697
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
64302: LD_ADDR_VAR 0 6
64306: PUSH
64307: LD_VAR 0 7
64311: PPUSH
64312: LD_INT 0
64314: PPUSH
64315: LD_INT 4
64317: PPUSH
64318: CALL_OW 272
64322: PUSH
64323: LD_VAR 0 8
64327: PPUSH
64328: LD_INT 0
64330: PPUSH
64331: LD_INT 4
64333: PPUSH
64334: CALL_OW 273
64338: PUSH
64339: EMPTY
64340: LIST
64341: LIST
64342: PUSH
64343: LD_VAR 0 7
64347: PPUSH
64348: LD_INT 1
64350: PPUSH
64351: LD_INT 4
64353: PPUSH
64354: CALL_OW 272
64358: PUSH
64359: LD_VAR 0 8
64363: PPUSH
64364: LD_INT 1
64366: PPUSH
64367: LD_INT 4
64369: PPUSH
64370: CALL_OW 273
64374: PUSH
64375: EMPTY
64376: LIST
64377: LIST
64378: PUSH
64379: LD_VAR 0 7
64383: PPUSH
64384: LD_INT 2
64386: PPUSH
64387: LD_INT 4
64389: PPUSH
64390: CALL_OW 272
64394: PUSH
64395: LD_VAR 0 8
64399: PPUSH
64400: LD_INT 2
64402: PPUSH
64403: LD_INT 4
64405: PPUSH
64406: CALL_OW 273
64410: PUSH
64411: EMPTY
64412: LIST
64413: LIST
64414: PUSH
64415: LD_VAR 0 7
64419: PPUSH
64420: LD_INT 3
64422: PPUSH
64423: LD_INT 4
64425: PPUSH
64426: CALL_OW 272
64430: PUSH
64431: LD_VAR 0 8
64435: PPUSH
64436: LD_INT 3
64438: PPUSH
64439: LD_INT 4
64441: PPUSH
64442: CALL_OW 273
64446: PUSH
64447: EMPTY
64448: LIST
64449: LIST
64450: PUSH
64451: LD_VAR 0 7
64455: PPUSH
64456: LD_INT 4
64458: PPUSH
64459: LD_INT 4
64461: PPUSH
64462: CALL_OW 272
64466: PUSH
64467: LD_VAR 0 8
64471: PPUSH
64472: LD_INT 4
64474: PPUSH
64475: LD_INT 4
64477: PPUSH
64478: CALL_OW 273
64482: PUSH
64483: EMPTY
64484: LIST
64485: LIST
64486: PUSH
64487: LD_VAR 0 7
64491: PPUSH
64492: LD_INT 5
64494: PPUSH
64495: LD_INT 4
64497: PPUSH
64498: CALL_OW 272
64502: PUSH
64503: LD_VAR 0 8
64507: PPUSH
64508: LD_INT 5
64510: PPUSH
64511: LD_INT 4
64513: PPUSH
64514: CALL_OW 273
64518: PUSH
64519: EMPTY
64520: LIST
64521: LIST
64522: PUSH
64523: EMPTY
64524: LIST
64525: LIST
64526: LIST
64527: LIST
64528: LIST
64529: LIST
64530: ST_TO_ADDR
// for i = tmp downto 1 do
64531: LD_ADDR_VAR 0 4
64535: PUSH
64536: DOUBLE
64537: LD_VAR 0 6
64541: INC
64542: ST_TO_ADDR
64543: LD_INT 1
64545: PUSH
64546: FOR_DOWNTO
64547: IFFALSE 64648
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
64549: LD_VAR 0 6
64553: PUSH
64554: LD_VAR 0 4
64558: ARRAY
64559: PUSH
64560: LD_INT 1
64562: ARRAY
64563: PPUSH
64564: LD_VAR 0 6
64568: PUSH
64569: LD_VAR 0 4
64573: ARRAY
64574: PUSH
64575: LD_INT 2
64577: ARRAY
64578: PPUSH
64579: CALL_OW 488
64583: NOT
64584: PUSH
64585: LD_VAR 0 6
64589: PUSH
64590: LD_VAR 0 4
64594: ARRAY
64595: PUSH
64596: LD_INT 1
64598: ARRAY
64599: PPUSH
64600: LD_VAR 0 6
64604: PUSH
64605: LD_VAR 0 4
64609: ARRAY
64610: PUSH
64611: LD_INT 2
64613: ARRAY
64614: PPUSH
64615: CALL_OW 428
64619: PUSH
64620: LD_INT 0
64622: NONEQUAL
64623: OR
64624: IFFALSE 64646
// tmp := Delete ( tmp , i ) ;
64626: LD_ADDR_VAR 0 6
64630: PUSH
64631: LD_VAR 0 6
64635: PPUSH
64636: LD_VAR 0 4
64640: PPUSH
64641: CALL_OW 3
64645: ST_TO_ADDR
64646: GO 64546
64648: POP
64649: POP
// j := GetClosestHex ( unit , tmp ) ;
64650: LD_ADDR_VAR 0 5
64654: PUSH
64655: LD_VAR 0 1
64659: PPUSH
64660: LD_VAR 0 6
64664: PPUSH
64665: CALL 63967 0 2
64669: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
64670: LD_VAR 0 1
64674: PPUSH
64675: LD_VAR 0 5
64679: PUSH
64680: LD_INT 1
64682: ARRAY
64683: PPUSH
64684: LD_VAR 0 5
64688: PUSH
64689: LD_INT 2
64691: ARRAY
64692: PPUSH
64693: CALL_OW 111
// end ;
64697: LD_VAR 0 3
64701: RET
// export function PrepareApemanSoldier ( ) ; begin
64702: LD_INT 0
64704: PPUSH
// uc_nation := 0 ;
64705: LD_ADDR_OWVAR 21
64709: PUSH
64710: LD_INT 0
64712: ST_TO_ADDR
// hc_sex := sex_male ;
64713: LD_ADDR_OWVAR 27
64717: PUSH
64718: LD_INT 1
64720: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
64721: LD_ADDR_OWVAR 28
64725: PUSH
64726: LD_INT 15
64728: ST_TO_ADDR
// hc_gallery :=  ;
64729: LD_ADDR_OWVAR 33
64733: PUSH
64734: LD_STRING 
64736: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64737: LD_ADDR_OWVAR 31
64741: PUSH
64742: LD_INT 0
64744: PPUSH
64745: LD_INT 3
64747: PPUSH
64748: CALL_OW 12
64752: PUSH
64753: LD_INT 0
64755: PPUSH
64756: LD_INT 3
64758: PPUSH
64759: CALL_OW 12
64763: PUSH
64764: LD_INT 0
64766: PUSH
64767: LD_INT 0
64769: PUSH
64770: EMPTY
64771: LIST
64772: LIST
64773: LIST
64774: LIST
64775: ST_TO_ADDR
// end ;
64776: LD_VAR 0 1
64780: RET
// export function PrepareApemanEngineer ( ) ; begin
64781: LD_INT 0
64783: PPUSH
// uc_nation := 0 ;
64784: LD_ADDR_OWVAR 21
64788: PUSH
64789: LD_INT 0
64791: ST_TO_ADDR
// hc_sex := sex_male ;
64792: LD_ADDR_OWVAR 27
64796: PUSH
64797: LD_INT 1
64799: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
64800: LD_ADDR_OWVAR 28
64804: PUSH
64805: LD_INT 16
64807: ST_TO_ADDR
// hc_gallery :=  ;
64808: LD_ADDR_OWVAR 33
64812: PUSH
64813: LD_STRING 
64815: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64816: LD_ADDR_OWVAR 31
64820: PUSH
64821: LD_INT 0
64823: PPUSH
64824: LD_INT 3
64826: PPUSH
64827: CALL_OW 12
64831: PUSH
64832: LD_INT 0
64834: PPUSH
64835: LD_INT 3
64837: PPUSH
64838: CALL_OW 12
64842: PUSH
64843: LD_INT 0
64845: PUSH
64846: LD_INT 0
64848: PUSH
64849: EMPTY
64850: LIST
64851: LIST
64852: LIST
64853: LIST
64854: ST_TO_ADDR
// end ;
64855: LD_VAR 0 1
64859: RET
// export function PrepareApeman ( agressivity ) ; begin
64860: LD_INT 0
64862: PPUSH
// uc_side := 0 ;
64863: LD_ADDR_OWVAR 20
64867: PUSH
64868: LD_INT 0
64870: ST_TO_ADDR
// uc_nation := 0 ;
64871: LD_ADDR_OWVAR 21
64875: PUSH
64876: LD_INT 0
64878: ST_TO_ADDR
// hc_sex := sex_male ;
64879: LD_ADDR_OWVAR 27
64883: PUSH
64884: LD_INT 1
64886: ST_TO_ADDR
// hc_class := class_apeman ;
64887: LD_ADDR_OWVAR 28
64891: PUSH
64892: LD_INT 12
64894: ST_TO_ADDR
// hc_gallery :=  ;
64895: LD_ADDR_OWVAR 33
64899: PUSH
64900: LD_STRING 
64902: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
64903: LD_ADDR_OWVAR 35
64907: PUSH
64908: LD_VAR 0 1
64912: NEG
64913: PPUSH
64914: LD_VAR 0 1
64918: PPUSH
64919: CALL_OW 12
64923: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64924: LD_ADDR_OWVAR 31
64928: PUSH
64929: LD_INT 0
64931: PPUSH
64932: LD_INT 3
64934: PPUSH
64935: CALL_OW 12
64939: PUSH
64940: LD_INT 0
64942: PPUSH
64943: LD_INT 3
64945: PPUSH
64946: CALL_OW 12
64950: PUSH
64951: LD_INT 0
64953: PUSH
64954: LD_INT 0
64956: PUSH
64957: EMPTY
64958: LIST
64959: LIST
64960: LIST
64961: LIST
64962: ST_TO_ADDR
// end ;
64963: LD_VAR 0 2
64967: RET
// export function PrepareTiger ( agressivity ) ; begin
64968: LD_INT 0
64970: PPUSH
// uc_side := 0 ;
64971: LD_ADDR_OWVAR 20
64975: PUSH
64976: LD_INT 0
64978: ST_TO_ADDR
// uc_nation := 0 ;
64979: LD_ADDR_OWVAR 21
64983: PUSH
64984: LD_INT 0
64986: ST_TO_ADDR
// hc_class := class_tiger ;
64987: LD_ADDR_OWVAR 28
64991: PUSH
64992: LD_INT 14
64994: ST_TO_ADDR
// hc_gallery :=  ;
64995: LD_ADDR_OWVAR 33
64999: PUSH
65000: LD_STRING 
65002: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
65003: LD_ADDR_OWVAR 35
65007: PUSH
65008: LD_VAR 0 1
65012: NEG
65013: PPUSH
65014: LD_VAR 0 1
65018: PPUSH
65019: CALL_OW 12
65023: ST_TO_ADDR
// end ;
65024: LD_VAR 0 2
65028: RET
// export function PrepareEnchidna ( ) ; begin
65029: LD_INT 0
65031: PPUSH
// uc_side := 0 ;
65032: LD_ADDR_OWVAR 20
65036: PUSH
65037: LD_INT 0
65039: ST_TO_ADDR
// uc_nation := 0 ;
65040: LD_ADDR_OWVAR 21
65044: PUSH
65045: LD_INT 0
65047: ST_TO_ADDR
// hc_class := class_baggie ;
65048: LD_ADDR_OWVAR 28
65052: PUSH
65053: LD_INT 13
65055: ST_TO_ADDR
// hc_gallery :=  ;
65056: LD_ADDR_OWVAR 33
65060: PUSH
65061: LD_STRING 
65063: ST_TO_ADDR
// end ;
65064: LD_VAR 0 1
65068: RET
// export function PrepareFrog ( ) ; begin
65069: LD_INT 0
65071: PPUSH
// uc_side := 0 ;
65072: LD_ADDR_OWVAR 20
65076: PUSH
65077: LD_INT 0
65079: ST_TO_ADDR
// uc_nation := 0 ;
65080: LD_ADDR_OWVAR 21
65084: PUSH
65085: LD_INT 0
65087: ST_TO_ADDR
// hc_class := class_frog ;
65088: LD_ADDR_OWVAR 28
65092: PUSH
65093: LD_INT 19
65095: ST_TO_ADDR
// hc_gallery :=  ;
65096: LD_ADDR_OWVAR 33
65100: PUSH
65101: LD_STRING 
65103: ST_TO_ADDR
// end ;
65104: LD_VAR 0 1
65108: RET
// export function PrepareFish ( ) ; begin
65109: LD_INT 0
65111: PPUSH
// uc_side := 0 ;
65112: LD_ADDR_OWVAR 20
65116: PUSH
65117: LD_INT 0
65119: ST_TO_ADDR
// uc_nation := 0 ;
65120: LD_ADDR_OWVAR 21
65124: PUSH
65125: LD_INT 0
65127: ST_TO_ADDR
// hc_class := class_fish ;
65128: LD_ADDR_OWVAR 28
65132: PUSH
65133: LD_INT 20
65135: ST_TO_ADDR
// hc_gallery :=  ;
65136: LD_ADDR_OWVAR 33
65140: PUSH
65141: LD_STRING 
65143: ST_TO_ADDR
// end ;
65144: LD_VAR 0 1
65148: RET
// export function PrepareBird ( ) ; begin
65149: LD_INT 0
65151: PPUSH
// uc_side := 0 ;
65152: LD_ADDR_OWVAR 20
65156: PUSH
65157: LD_INT 0
65159: ST_TO_ADDR
// uc_nation := 0 ;
65160: LD_ADDR_OWVAR 21
65164: PUSH
65165: LD_INT 0
65167: ST_TO_ADDR
// hc_class := class_phororhacos ;
65168: LD_ADDR_OWVAR 28
65172: PUSH
65173: LD_INT 18
65175: ST_TO_ADDR
// hc_gallery :=  ;
65176: LD_ADDR_OWVAR 33
65180: PUSH
65181: LD_STRING 
65183: ST_TO_ADDR
// end ;
65184: LD_VAR 0 1
65188: RET
// export function PrepareHorse ( ) ; begin
65189: LD_INT 0
65191: PPUSH
// uc_side := 0 ;
65192: LD_ADDR_OWVAR 20
65196: PUSH
65197: LD_INT 0
65199: ST_TO_ADDR
// uc_nation := 0 ;
65200: LD_ADDR_OWVAR 21
65204: PUSH
65205: LD_INT 0
65207: ST_TO_ADDR
// hc_class := class_horse ;
65208: LD_ADDR_OWVAR 28
65212: PUSH
65213: LD_INT 21
65215: ST_TO_ADDR
// hc_gallery :=  ;
65216: LD_ADDR_OWVAR 33
65220: PUSH
65221: LD_STRING 
65223: ST_TO_ADDR
// end ;
65224: LD_VAR 0 1
65228: RET
// export function PrepareMastodont ( ) ; begin
65229: LD_INT 0
65231: PPUSH
// uc_side := 0 ;
65232: LD_ADDR_OWVAR 20
65236: PUSH
65237: LD_INT 0
65239: ST_TO_ADDR
// uc_nation := 0 ;
65240: LD_ADDR_OWVAR 21
65244: PUSH
65245: LD_INT 0
65247: ST_TO_ADDR
// vc_chassis := class_mastodont ;
65248: LD_ADDR_OWVAR 37
65252: PUSH
65253: LD_INT 31
65255: ST_TO_ADDR
// vc_control := control_rider ;
65256: LD_ADDR_OWVAR 38
65260: PUSH
65261: LD_INT 4
65263: ST_TO_ADDR
// end ;
65264: LD_VAR 0 1
65268: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
65269: LD_INT 0
65271: PPUSH
65272: PPUSH
65273: PPUSH
// uc_side = 0 ;
65274: LD_ADDR_OWVAR 20
65278: PUSH
65279: LD_INT 0
65281: ST_TO_ADDR
// uc_nation = 0 ;
65282: LD_ADDR_OWVAR 21
65286: PUSH
65287: LD_INT 0
65289: ST_TO_ADDR
// InitHc_All ( ) ;
65290: CALL_OW 584
// InitVc ;
65294: CALL_OW 20
// if mastodonts then
65298: LD_VAR 0 6
65302: IFFALSE 65369
// for i = 1 to mastodonts do
65304: LD_ADDR_VAR 0 11
65308: PUSH
65309: DOUBLE
65310: LD_INT 1
65312: DEC
65313: ST_TO_ADDR
65314: LD_VAR 0 6
65318: PUSH
65319: FOR_TO
65320: IFFALSE 65367
// begin vc_chassis := 31 ;
65322: LD_ADDR_OWVAR 37
65326: PUSH
65327: LD_INT 31
65329: ST_TO_ADDR
// vc_control := control_rider ;
65330: LD_ADDR_OWVAR 38
65334: PUSH
65335: LD_INT 4
65337: ST_TO_ADDR
// animal := CreateVehicle ;
65338: LD_ADDR_VAR 0 12
65342: PUSH
65343: CALL_OW 45
65347: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65348: LD_VAR 0 12
65352: PPUSH
65353: LD_VAR 0 8
65357: PPUSH
65358: LD_INT 0
65360: PPUSH
65361: CALL 67504 0 3
// end ;
65365: GO 65319
65367: POP
65368: POP
// if horses then
65369: LD_VAR 0 5
65373: IFFALSE 65440
// for i = 1 to horses do
65375: LD_ADDR_VAR 0 11
65379: PUSH
65380: DOUBLE
65381: LD_INT 1
65383: DEC
65384: ST_TO_ADDR
65385: LD_VAR 0 5
65389: PUSH
65390: FOR_TO
65391: IFFALSE 65438
// begin hc_class := 21 ;
65393: LD_ADDR_OWVAR 28
65397: PUSH
65398: LD_INT 21
65400: ST_TO_ADDR
// hc_gallery :=  ;
65401: LD_ADDR_OWVAR 33
65405: PUSH
65406: LD_STRING 
65408: ST_TO_ADDR
// animal := CreateHuman ;
65409: LD_ADDR_VAR 0 12
65413: PUSH
65414: CALL_OW 44
65418: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65419: LD_VAR 0 12
65423: PPUSH
65424: LD_VAR 0 8
65428: PPUSH
65429: LD_INT 0
65431: PPUSH
65432: CALL 67504 0 3
// end ;
65436: GO 65390
65438: POP
65439: POP
// if birds then
65440: LD_VAR 0 1
65444: IFFALSE 65511
// for i = 1 to birds do
65446: LD_ADDR_VAR 0 11
65450: PUSH
65451: DOUBLE
65452: LD_INT 1
65454: DEC
65455: ST_TO_ADDR
65456: LD_VAR 0 1
65460: PUSH
65461: FOR_TO
65462: IFFALSE 65509
// begin hc_class = 18 ;
65464: LD_ADDR_OWVAR 28
65468: PUSH
65469: LD_INT 18
65471: ST_TO_ADDR
// hc_gallery =  ;
65472: LD_ADDR_OWVAR 33
65476: PUSH
65477: LD_STRING 
65479: ST_TO_ADDR
// animal := CreateHuman ;
65480: LD_ADDR_VAR 0 12
65484: PUSH
65485: CALL_OW 44
65489: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65490: LD_VAR 0 12
65494: PPUSH
65495: LD_VAR 0 8
65499: PPUSH
65500: LD_INT 0
65502: PPUSH
65503: CALL 67504 0 3
// end ;
65507: GO 65461
65509: POP
65510: POP
// if tigers then
65511: LD_VAR 0 2
65515: IFFALSE 65599
// for i = 1 to tigers do
65517: LD_ADDR_VAR 0 11
65521: PUSH
65522: DOUBLE
65523: LD_INT 1
65525: DEC
65526: ST_TO_ADDR
65527: LD_VAR 0 2
65531: PUSH
65532: FOR_TO
65533: IFFALSE 65597
// begin hc_class = class_tiger ;
65535: LD_ADDR_OWVAR 28
65539: PUSH
65540: LD_INT 14
65542: ST_TO_ADDR
// hc_gallery =  ;
65543: LD_ADDR_OWVAR 33
65547: PUSH
65548: LD_STRING 
65550: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
65551: LD_ADDR_OWVAR 35
65555: PUSH
65556: LD_INT 7
65558: NEG
65559: PPUSH
65560: LD_INT 7
65562: PPUSH
65563: CALL_OW 12
65567: ST_TO_ADDR
// animal := CreateHuman ;
65568: LD_ADDR_VAR 0 12
65572: PUSH
65573: CALL_OW 44
65577: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65578: LD_VAR 0 12
65582: PPUSH
65583: LD_VAR 0 8
65587: PPUSH
65588: LD_INT 0
65590: PPUSH
65591: CALL 67504 0 3
// end ;
65595: GO 65532
65597: POP
65598: POP
// if apemans then
65599: LD_VAR 0 3
65603: IFFALSE 65726
// for i = 1 to apemans do
65605: LD_ADDR_VAR 0 11
65609: PUSH
65610: DOUBLE
65611: LD_INT 1
65613: DEC
65614: ST_TO_ADDR
65615: LD_VAR 0 3
65619: PUSH
65620: FOR_TO
65621: IFFALSE 65724
// begin hc_class = class_apeman ;
65623: LD_ADDR_OWVAR 28
65627: PUSH
65628: LD_INT 12
65630: ST_TO_ADDR
// hc_gallery =  ;
65631: LD_ADDR_OWVAR 33
65635: PUSH
65636: LD_STRING 
65638: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
65639: LD_ADDR_OWVAR 35
65643: PUSH
65644: LD_INT 2
65646: NEG
65647: PPUSH
65648: LD_INT 2
65650: PPUSH
65651: CALL_OW 12
65655: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
65656: LD_ADDR_OWVAR 31
65660: PUSH
65661: LD_INT 1
65663: PPUSH
65664: LD_INT 3
65666: PPUSH
65667: CALL_OW 12
65671: PUSH
65672: LD_INT 1
65674: PPUSH
65675: LD_INT 3
65677: PPUSH
65678: CALL_OW 12
65682: PUSH
65683: LD_INT 0
65685: PUSH
65686: LD_INT 0
65688: PUSH
65689: EMPTY
65690: LIST
65691: LIST
65692: LIST
65693: LIST
65694: ST_TO_ADDR
// animal := CreateHuman ;
65695: LD_ADDR_VAR 0 12
65699: PUSH
65700: CALL_OW 44
65704: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65705: LD_VAR 0 12
65709: PPUSH
65710: LD_VAR 0 8
65714: PPUSH
65715: LD_INT 0
65717: PPUSH
65718: CALL 67504 0 3
// end ;
65722: GO 65620
65724: POP
65725: POP
// if enchidnas then
65726: LD_VAR 0 4
65730: IFFALSE 65797
// for i = 1 to enchidnas do
65732: LD_ADDR_VAR 0 11
65736: PUSH
65737: DOUBLE
65738: LD_INT 1
65740: DEC
65741: ST_TO_ADDR
65742: LD_VAR 0 4
65746: PUSH
65747: FOR_TO
65748: IFFALSE 65795
// begin hc_class = 13 ;
65750: LD_ADDR_OWVAR 28
65754: PUSH
65755: LD_INT 13
65757: ST_TO_ADDR
// hc_gallery =  ;
65758: LD_ADDR_OWVAR 33
65762: PUSH
65763: LD_STRING 
65765: ST_TO_ADDR
// animal := CreateHuman ;
65766: LD_ADDR_VAR 0 12
65770: PUSH
65771: CALL_OW 44
65775: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65776: LD_VAR 0 12
65780: PPUSH
65781: LD_VAR 0 8
65785: PPUSH
65786: LD_INT 0
65788: PPUSH
65789: CALL 67504 0 3
// end ;
65793: GO 65747
65795: POP
65796: POP
// if fishes then
65797: LD_VAR 0 7
65801: IFFALSE 65868
// for i = 1 to fishes do
65803: LD_ADDR_VAR 0 11
65807: PUSH
65808: DOUBLE
65809: LD_INT 1
65811: DEC
65812: ST_TO_ADDR
65813: LD_VAR 0 7
65817: PUSH
65818: FOR_TO
65819: IFFALSE 65866
// begin hc_class = 20 ;
65821: LD_ADDR_OWVAR 28
65825: PUSH
65826: LD_INT 20
65828: ST_TO_ADDR
// hc_gallery =  ;
65829: LD_ADDR_OWVAR 33
65833: PUSH
65834: LD_STRING 
65836: ST_TO_ADDR
// animal := CreateHuman ;
65837: LD_ADDR_VAR 0 12
65841: PUSH
65842: CALL_OW 44
65846: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
65847: LD_VAR 0 12
65851: PPUSH
65852: LD_VAR 0 9
65856: PPUSH
65857: LD_INT 0
65859: PPUSH
65860: CALL 67504 0 3
// end ;
65864: GO 65818
65866: POP
65867: POP
// end ;
65868: LD_VAR 0 10
65872: RET
// export function WantHeal ( sci , unit ) ; begin
65873: LD_INT 0
65875: PPUSH
// if GetTaskList ( sci ) > 0 then
65876: LD_VAR 0 1
65880: PPUSH
65881: CALL_OW 437
65885: PUSH
65886: LD_INT 0
65888: GREATER
65889: IFFALSE 65959
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
65891: LD_VAR 0 1
65895: PPUSH
65896: CALL_OW 437
65900: PUSH
65901: LD_INT 1
65903: ARRAY
65904: PUSH
65905: LD_INT 1
65907: ARRAY
65908: PUSH
65909: LD_STRING l
65911: EQUAL
65912: PUSH
65913: LD_VAR 0 1
65917: PPUSH
65918: CALL_OW 437
65922: PUSH
65923: LD_INT 1
65925: ARRAY
65926: PUSH
65927: LD_INT 4
65929: ARRAY
65930: PUSH
65931: LD_VAR 0 2
65935: EQUAL
65936: AND
65937: IFFALSE 65949
// result := true else
65939: LD_ADDR_VAR 0 3
65943: PUSH
65944: LD_INT 1
65946: ST_TO_ADDR
65947: GO 65957
// result := false ;
65949: LD_ADDR_VAR 0 3
65953: PUSH
65954: LD_INT 0
65956: ST_TO_ADDR
// end else
65957: GO 65967
// result := false ;
65959: LD_ADDR_VAR 0 3
65963: PUSH
65964: LD_INT 0
65966: ST_TO_ADDR
// end ;
65967: LD_VAR 0 3
65971: RET
// export function HealTarget ( sci ) ; begin
65972: LD_INT 0
65974: PPUSH
// if not sci then
65975: LD_VAR 0 1
65979: NOT
65980: IFFALSE 65984
// exit ;
65982: GO 66049
// result := 0 ;
65984: LD_ADDR_VAR 0 2
65988: PUSH
65989: LD_INT 0
65991: ST_TO_ADDR
// if GetTaskList ( sci ) then
65992: LD_VAR 0 1
65996: PPUSH
65997: CALL_OW 437
66001: IFFALSE 66049
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
66003: LD_VAR 0 1
66007: PPUSH
66008: CALL_OW 437
66012: PUSH
66013: LD_INT 1
66015: ARRAY
66016: PUSH
66017: LD_INT 1
66019: ARRAY
66020: PUSH
66021: LD_STRING l
66023: EQUAL
66024: IFFALSE 66049
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
66026: LD_ADDR_VAR 0 2
66030: PUSH
66031: LD_VAR 0 1
66035: PPUSH
66036: CALL_OW 437
66040: PUSH
66041: LD_INT 1
66043: ARRAY
66044: PUSH
66045: LD_INT 4
66047: ARRAY
66048: ST_TO_ADDR
// end ;
66049: LD_VAR 0 2
66053: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
66054: LD_INT 0
66056: PPUSH
66057: PPUSH
66058: PPUSH
66059: PPUSH
// if not base_units then
66060: LD_VAR 0 1
66064: NOT
66065: IFFALSE 66069
// exit ;
66067: GO 66156
// result := false ;
66069: LD_ADDR_VAR 0 2
66073: PUSH
66074: LD_INT 0
66076: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
66077: LD_ADDR_VAR 0 5
66081: PUSH
66082: LD_VAR 0 1
66086: PPUSH
66087: LD_INT 21
66089: PUSH
66090: LD_INT 3
66092: PUSH
66093: EMPTY
66094: LIST
66095: LIST
66096: PPUSH
66097: CALL_OW 72
66101: ST_TO_ADDR
// if not tmp then
66102: LD_VAR 0 5
66106: NOT
66107: IFFALSE 66111
// exit ;
66109: GO 66156
// for i in tmp do
66111: LD_ADDR_VAR 0 3
66115: PUSH
66116: LD_VAR 0 5
66120: PUSH
66121: FOR_IN
66122: IFFALSE 66154
// begin result := EnemyInRange ( i , 22 ) ;
66124: LD_ADDR_VAR 0 2
66128: PUSH
66129: LD_VAR 0 3
66133: PPUSH
66134: LD_INT 22
66136: PPUSH
66137: CALL 63769 0 2
66141: ST_TO_ADDR
// if result then
66142: LD_VAR 0 2
66146: IFFALSE 66152
// exit ;
66148: POP
66149: POP
66150: GO 66156
// end ;
66152: GO 66121
66154: POP
66155: POP
// end ;
66156: LD_VAR 0 2
66160: RET
// export function FilterByTag ( units , tag ) ; begin
66161: LD_INT 0
66163: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
66164: LD_ADDR_VAR 0 3
66168: PUSH
66169: LD_VAR 0 1
66173: PPUSH
66174: LD_INT 120
66176: PUSH
66177: LD_VAR 0 2
66181: PUSH
66182: EMPTY
66183: LIST
66184: LIST
66185: PPUSH
66186: CALL_OW 72
66190: ST_TO_ADDR
// end ;
66191: LD_VAR 0 3
66195: RET
// export function IsDriver ( un ) ; begin
66196: LD_INT 0
66198: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
66199: LD_ADDR_VAR 0 2
66203: PUSH
66204: LD_VAR 0 1
66208: PUSH
66209: LD_INT 55
66211: PUSH
66212: EMPTY
66213: LIST
66214: PPUSH
66215: CALL_OW 69
66219: IN
66220: ST_TO_ADDR
// end ;
66221: LD_VAR 0 2
66225: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
66226: LD_INT 0
66228: PPUSH
66229: PPUSH
// list := [ ] ;
66230: LD_ADDR_VAR 0 5
66234: PUSH
66235: EMPTY
66236: ST_TO_ADDR
// case d of 0 :
66237: LD_VAR 0 3
66241: PUSH
66242: LD_INT 0
66244: DOUBLE
66245: EQUAL
66246: IFTRUE 66250
66248: GO 66383
66250: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
66251: LD_ADDR_VAR 0 5
66255: PUSH
66256: LD_VAR 0 1
66260: PUSH
66261: LD_INT 4
66263: MINUS
66264: PUSH
66265: LD_VAR 0 2
66269: PUSH
66270: LD_INT 4
66272: MINUS
66273: PUSH
66274: LD_INT 2
66276: PUSH
66277: EMPTY
66278: LIST
66279: LIST
66280: LIST
66281: PUSH
66282: LD_VAR 0 1
66286: PUSH
66287: LD_INT 3
66289: MINUS
66290: PUSH
66291: LD_VAR 0 2
66295: PUSH
66296: LD_INT 1
66298: PUSH
66299: EMPTY
66300: LIST
66301: LIST
66302: LIST
66303: PUSH
66304: LD_VAR 0 1
66308: PUSH
66309: LD_INT 4
66311: PLUS
66312: PUSH
66313: LD_VAR 0 2
66317: PUSH
66318: LD_INT 4
66320: PUSH
66321: EMPTY
66322: LIST
66323: LIST
66324: LIST
66325: PUSH
66326: LD_VAR 0 1
66330: PUSH
66331: LD_INT 3
66333: PLUS
66334: PUSH
66335: LD_VAR 0 2
66339: PUSH
66340: LD_INT 3
66342: PLUS
66343: PUSH
66344: LD_INT 5
66346: PUSH
66347: EMPTY
66348: LIST
66349: LIST
66350: LIST
66351: PUSH
66352: LD_VAR 0 1
66356: PUSH
66357: LD_VAR 0 2
66361: PUSH
66362: LD_INT 4
66364: PLUS
66365: PUSH
66366: LD_INT 0
66368: PUSH
66369: EMPTY
66370: LIST
66371: LIST
66372: LIST
66373: PUSH
66374: EMPTY
66375: LIST
66376: LIST
66377: LIST
66378: LIST
66379: LIST
66380: ST_TO_ADDR
// end ; 1 :
66381: GO 67081
66383: LD_INT 1
66385: DOUBLE
66386: EQUAL
66387: IFTRUE 66391
66389: GO 66524
66391: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
66392: LD_ADDR_VAR 0 5
66396: PUSH
66397: LD_VAR 0 1
66401: PUSH
66402: LD_VAR 0 2
66406: PUSH
66407: LD_INT 4
66409: MINUS
66410: PUSH
66411: LD_INT 3
66413: PUSH
66414: EMPTY
66415: LIST
66416: LIST
66417: LIST
66418: PUSH
66419: LD_VAR 0 1
66423: PUSH
66424: LD_INT 3
66426: MINUS
66427: PUSH
66428: LD_VAR 0 2
66432: PUSH
66433: LD_INT 3
66435: MINUS
66436: PUSH
66437: LD_INT 2
66439: PUSH
66440: EMPTY
66441: LIST
66442: LIST
66443: LIST
66444: PUSH
66445: LD_VAR 0 1
66449: PUSH
66450: LD_INT 4
66452: MINUS
66453: PUSH
66454: LD_VAR 0 2
66458: PUSH
66459: LD_INT 1
66461: PUSH
66462: EMPTY
66463: LIST
66464: LIST
66465: LIST
66466: PUSH
66467: LD_VAR 0 1
66471: PUSH
66472: LD_VAR 0 2
66476: PUSH
66477: LD_INT 3
66479: PLUS
66480: PUSH
66481: LD_INT 0
66483: PUSH
66484: EMPTY
66485: LIST
66486: LIST
66487: LIST
66488: PUSH
66489: LD_VAR 0 1
66493: PUSH
66494: LD_INT 4
66496: PLUS
66497: PUSH
66498: LD_VAR 0 2
66502: PUSH
66503: LD_INT 4
66505: PLUS
66506: PUSH
66507: LD_INT 5
66509: PUSH
66510: EMPTY
66511: LIST
66512: LIST
66513: LIST
66514: PUSH
66515: EMPTY
66516: LIST
66517: LIST
66518: LIST
66519: LIST
66520: LIST
66521: ST_TO_ADDR
// end ; 2 :
66522: GO 67081
66524: LD_INT 2
66526: DOUBLE
66527: EQUAL
66528: IFTRUE 66532
66530: GO 66661
66532: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
66533: LD_ADDR_VAR 0 5
66537: PUSH
66538: LD_VAR 0 1
66542: PUSH
66543: LD_VAR 0 2
66547: PUSH
66548: LD_INT 3
66550: MINUS
66551: PUSH
66552: LD_INT 3
66554: PUSH
66555: EMPTY
66556: LIST
66557: LIST
66558: LIST
66559: PUSH
66560: LD_VAR 0 1
66564: PUSH
66565: LD_INT 4
66567: PLUS
66568: PUSH
66569: LD_VAR 0 2
66573: PUSH
66574: LD_INT 4
66576: PUSH
66577: EMPTY
66578: LIST
66579: LIST
66580: LIST
66581: PUSH
66582: LD_VAR 0 1
66586: PUSH
66587: LD_VAR 0 2
66591: PUSH
66592: LD_INT 4
66594: PLUS
66595: PUSH
66596: LD_INT 0
66598: PUSH
66599: EMPTY
66600: LIST
66601: LIST
66602: LIST
66603: PUSH
66604: LD_VAR 0 1
66608: PUSH
66609: LD_INT 3
66611: MINUS
66612: PUSH
66613: LD_VAR 0 2
66617: PUSH
66618: LD_INT 1
66620: PUSH
66621: EMPTY
66622: LIST
66623: LIST
66624: LIST
66625: PUSH
66626: LD_VAR 0 1
66630: PUSH
66631: LD_INT 4
66633: MINUS
66634: PUSH
66635: LD_VAR 0 2
66639: PUSH
66640: LD_INT 4
66642: MINUS
66643: PUSH
66644: LD_INT 2
66646: PUSH
66647: EMPTY
66648: LIST
66649: LIST
66650: LIST
66651: PUSH
66652: EMPTY
66653: LIST
66654: LIST
66655: LIST
66656: LIST
66657: LIST
66658: ST_TO_ADDR
// end ; 3 :
66659: GO 67081
66661: LD_INT 3
66663: DOUBLE
66664: EQUAL
66665: IFTRUE 66669
66667: GO 66802
66669: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
66670: LD_ADDR_VAR 0 5
66674: PUSH
66675: LD_VAR 0 1
66679: PUSH
66680: LD_INT 3
66682: PLUS
66683: PUSH
66684: LD_VAR 0 2
66688: PUSH
66689: LD_INT 4
66691: PUSH
66692: EMPTY
66693: LIST
66694: LIST
66695: LIST
66696: PUSH
66697: LD_VAR 0 1
66701: PUSH
66702: LD_INT 4
66704: PLUS
66705: PUSH
66706: LD_VAR 0 2
66710: PUSH
66711: LD_INT 4
66713: PLUS
66714: PUSH
66715: LD_INT 5
66717: PUSH
66718: EMPTY
66719: LIST
66720: LIST
66721: LIST
66722: PUSH
66723: LD_VAR 0 1
66727: PUSH
66728: LD_INT 4
66730: MINUS
66731: PUSH
66732: LD_VAR 0 2
66736: PUSH
66737: LD_INT 1
66739: PUSH
66740: EMPTY
66741: LIST
66742: LIST
66743: LIST
66744: PUSH
66745: LD_VAR 0 1
66749: PUSH
66750: LD_VAR 0 2
66754: PUSH
66755: LD_INT 4
66757: MINUS
66758: PUSH
66759: LD_INT 3
66761: PUSH
66762: EMPTY
66763: LIST
66764: LIST
66765: LIST
66766: PUSH
66767: LD_VAR 0 1
66771: PUSH
66772: LD_INT 3
66774: MINUS
66775: PUSH
66776: LD_VAR 0 2
66780: PUSH
66781: LD_INT 3
66783: MINUS
66784: PUSH
66785: LD_INT 2
66787: PUSH
66788: EMPTY
66789: LIST
66790: LIST
66791: LIST
66792: PUSH
66793: EMPTY
66794: LIST
66795: LIST
66796: LIST
66797: LIST
66798: LIST
66799: ST_TO_ADDR
// end ; 4 :
66800: GO 67081
66802: LD_INT 4
66804: DOUBLE
66805: EQUAL
66806: IFTRUE 66810
66808: GO 66943
66810: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
66811: LD_ADDR_VAR 0 5
66815: PUSH
66816: LD_VAR 0 1
66820: PUSH
66821: LD_VAR 0 2
66825: PUSH
66826: LD_INT 4
66828: PLUS
66829: PUSH
66830: LD_INT 0
66832: PUSH
66833: EMPTY
66834: LIST
66835: LIST
66836: LIST
66837: PUSH
66838: LD_VAR 0 1
66842: PUSH
66843: LD_INT 3
66845: PLUS
66846: PUSH
66847: LD_VAR 0 2
66851: PUSH
66852: LD_INT 3
66854: PLUS
66855: PUSH
66856: LD_INT 5
66858: PUSH
66859: EMPTY
66860: LIST
66861: LIST
66862: LIST
66863: PUSH
66864: LD_VAR 0 1
66868: PUSH
66869: LD_INT 4
66871: PLUS
66872: PUSH
66873: LD_VAR 0 2
66877: PUSH
66878: LD_INT 4
66880: PUSH
66881: EMPTY
66882: LIST
66883: LIST
66884: LIST
66885: PUSH
66886: LD_VAR 0 1
66890: PUSH
66891: LD_VAR 0 2
66895: PUSH
66896: LD_INT 3
66898: MINUS
66899: PUSH
66900: LD_INT 3
66902: PUSH
66903: EMPTY
66904: LIST
66905: LIST
66906: LIST
66907: PUSH
66908: LD_VAR 0 1
66912: PUSH
66913: LD_INT 4
66915: MINUS
66916: PUSH
66917: LD_VAR 0 2
66921: PUSH
66922: LD_INT 4
66924: MINUS
66925: PUSH
66926: LD_INT 2
66928: PUSH
66929: EMPTY
66930: LIST
66931: LIST
66932: LIST
66933: PUSH
66934: EMPTY
66935: LIST
66936: LIST
66937: LIST
66938: LIST
66939: LIST
66940: ST_TO_ADDR
// end ; 5 :
66941: GO 67081
66943: LD_INT 5
66945: DOUBLE
66946: EQUAL
66947: IFTRUE 66951
66949: GO 67080
66951: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
66952: LD_ADDR_VAR 0 5
66956: PUSH
66957: LD_VAR 0 1
66961: PUSH
66962: LD_INT 4
66964: MINUS
66965: PUSH
66966: LD_VAR 0 2
66970: PUSH
66971: LD_INT 1
66973: PUSH
66974: EMPTY
66975: LIST
66976: LIST
66977: LIST
66978: PUSH
66979: LD_VAR 0 1
66983: PUSH
66984: LD_VAR 0 2
66988: PUSH
66989: LD_INT 4
66991: MINUS
66992: PUSH
66993: LD_INT 3
66995: PUSH
66996: EMPTY
66997: LIST
66998: LIST
66999: LIST
67000: PUSH
67001: LD_VAR 0 1
67005: PUSH
67006: LD_INT 4
67008: PLUS
67009: PUSH
67010: LD_VAR 0 2
67014: PUSH
67015: LD_INT 4
67017: PLUS
67018: PUSH
67019: LD_INT 5
67021: PUSH
67022: EMPTY
67023: LIST
67024: LIST
67025: LIST
67026: PUSH
67027: LD_VAR 0 1
67031: PUSH
67032: LD_INT 3
67034: PLUS
67035: PUSH
67036: LD_VAR 0 2
67040: PUSH
67041: LD_INT 4
67043: PUSH
67044: EMPTY
67045: LIST
67046: LIST
67047: LIST
67048: PUSH
67049: LD_VAR 0 1
67053: PUSH
67054: LD_VAR 0 2
67058: PUSH
67059: LD_INT 3
67061: PLUS
67062: PUSH
67063: LD_INT 0
67065: PUSH
67066: EMPTY
67067: LIST
67068: LIST
67069: LIST
67070: PUSH
67071: EMPTY
67072: LIST
67073: LIST
67074: LIST
67075: LIST
67076: LIST
67077: ST_TO_ADDR
// end ; end ;
67078: GO 67081
67080: POP
// result := list ;
67081: LD_ADDR_VAR 0 4
67085: PUSH
67086: LD_VAR 0 5
67090: ST_TO_ADDR
// end ;
67091: LD_VAR 0 4
67095: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
67096: LD_INT 0
67098: PPUSH
67099: PPUSH
67100: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
67101: LD_VAR 0 1
67105: NOT
67106: PUSH
67107: LD_VAR 0 2
67111: PUSH
67112: LD_INT 1
67114: PUSH
67115: LD_INT 2
67117: PUSH
67118: LD_INT 3
67120: PUSH
67121: LD_INT 4
67123: PUSH
67124: EMPTY
67125: LIST
67126: LIST
67127: LIST
67128: LIST
67129: IN
67130: NOT
67131: OR
67132: IFFALSE 67136
// exit ;
67134: GO 67228
// tmp := [ ] ;
67136: LD_ADDR_VAR 0 5
67140: PUSH
67141: EMPTY
67142: ST_TO_ADDR
// for i in units do
67143: LD_ADDR_VAR 0 4
67147: PUSH
67148: LD_VAR 0 1
67152: PUSH
67153: FOR_IN
67154: IFFALSE 67197
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
67156: LD_ADDR_VAR 0 5
67160: PUSH
67161: LD_VAR 0 5
67165: PPUSH
67166: LD_VAR 0 5
67170: PUSH
67171: LD_INT 1
67173: PLUS
67174: PPUSH
67175: LD_VAR 0 4
67179: PPUSH
67180: LD_VAR 0 2
67184: PPUSH
67185: CALL_OW 259
67189: PPUSH
67190: CALL_OW 2
67194: ST_TO_ADDR
67195: GO 67153
67197: POP
67198: POP
// if not tmp then
67199: LD_VAR 0 5
67203: NOT
67204: IFFALSE 67208
// exit ;
67206: GO 67228
// result := SortListByListDesc ( units , tmp ) ;
67208: LD_ADDR_VAR 0 3
67212: PUSH
67213: LD_VAR 0 1
67217: PPUSH
67218: LD_VAR 0 5
67222: PPUSH
67223: CALL_OW 77
67227: ST_TO_ADDR
// end ;
67228: LD_VAR 0 3
67232: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
67233: LD_INT 0
67235: PPUSH
67236: PPUSH
67237: PPUSH
// result := false ;
67238: LD_ADDR_VAR 0 3
67242: PUSH
67243: LD_INT 0
67245: ST_TO_ADDR
// x := GetX ( building ) ;
67246: LD_ADDR_VAR 0 4
67250: PUSH
67251: LD_VAR 0 2
67255: PPUSH
67256: CALL_OW 250
67260: ST_TO_ADDR
// y := GetY ( building ) ;
67261: LD_ADDR_VAR 0 5
67265: PUSH
67266: LD_VAR 0 2
67270: PPUSH
67271: CALL_OW 251
67275: ST_TO_ADDR
// if not building or not x or not y then
67276: LD_VAR 0 2
67280: NOT
67281: PUSH
67282: LD_VAR 0 4
67286: NOT
67287: OR
67288: PUSH
67289: LD_VAR 0 5
67293: NOT
67294: OR
67295: IFFALSE 67299
// exit ;
67297: GO 67391
// if GetTaskList ( unit ) then
67299: LD_VAR 0 1
67303: PPUSH
67304: CALL_OW 437
67308: IFFALSE 67391
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
67310: LD_STRING e
67312: PUSH
67313: LD_VAR 0 1
67317: PPUSH
67318: CALL_OW 437
67322: PUSH
67323: LD_INT 1
67325: ARRAY
67326: PUSH
67327: LD_INT 1
67329: ARRAY
67330: EQUAL
67331: PUSH
67332: LD_VAR 0 4
67336: PUSH
67337: LD_VAR 0 1
67341: PPUSH
67342: CALL_OW 437
67346: PUSH
67347: LD_INT 1
67349: ARRAY
67350: PUSH
67351: LD_INT 2
67353: ARRAY
67354: EQUAL
67355: AND
67356: PUSH
67357: LD_VAR 0 5
67361: PUSH
67362: LD_VAR 0 1
67366: PPUSH
67367: CALL_OW 437
67371: PUSH
67372: LD_INT 1
67374: ARRAY
67375: PUSH
67376: LD_INT 3
67378: ARRAY
67379: EQUAL
67380: AND
67381: IFFALSE 67391
// result := true end ;
67383: LD_ADDR_VAR 0 3
67387: PUSH
67388: LD_INT 1
67390: ST_TO_ADDR
// end ;
67391: LD_VAR 0 3
67395: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
67396: LD_INT 0
67398: PPUSH
// result := false ;
67399: LD_ADDR_VAR 0 4
67403: PUSH
67404: LD_INT 0
67406: ST_TO_ADDR
// if GetTaskList ( unit ) then
67407: LD_VAR 0 1
67411: PPUSH
67412: CALL_OW 437
67416: IFFALSE 67499
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
67418: LD_STRING M
67420: PUSH
67421: LD_VAR 0 1
67425: PPUSH
67426: CALL_OW 437
67430: PUSH
67431: LD_INT 1
67433: ARRAY
67434: PUSH
67435: LD_INT 1
67437: ARRAY
67438: EQUAL
67439: PUSH
67440: LD_VAR 0 2
67444: PUSH
67445: LD_VAR 0 1
67449: PPUSH
67450: CALL_OW 437
67454: PUSH
67455: LD_INT 1
67457: ARRAY
67458: PUSH
67459: LD_INT 2
67461: ARRAY
67462: EQUAL
67463: AND
67464: PUSH
67465: LD_VAR 0 3
67469: PUSH
67470: LD_VAR 0 1
67474: PPUSH
67475: CALL_OW 437
67479: PUSH
67480: LD_INT 1
67482: ARRAY
67483: PUSH
67484: LD_INT 3
67486: ARRAY
67487: EQUAL
67488: AND
67489: IFFALSE 67499
// result := true ;
67491: LD_ADDR_VAR 0 4
67495: PUSH
67496: LD_INT 1
67498: ST_TO_ADDR
// end ; end ;
67499: LD_VAR 0 4
67503: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
67504: LD_INT 0
67506: PPUSH
67507: PPUSH
67508: PPUSH
67509: PPUSH
// if not unit or not area then
67510: LD_VAR 0 1
67514: NOT
67515: PUSH
67516: LD_VAR 0 2
67520: NOT
67521: OR
67522: IFFALSE 67526
// exit ;
67524: GO 67690
// tmp := AreaToList ( area , i ) ;
67526: LD_ADDR_VAR 0 6
67530: PUSH
67531: LD_VAR 0 2
67535: PPUSH
67536: LD_VAR 0 5
67540: PPUSH
67541: CALL_OW 517
67545: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
67546: LD_ADDR_VAR 0 5
67550: PUSH
67551: DOUBLE
67552: LD_INT 1
67554: DEC
67555: ST_TO_ADDR
67556: LD_VAR 0 6
67560: PUSH
67561: LD_INT 1
67563: ARRAY
67564: PUSH
67565: FOR_TO
67566: IFFALSE 67688
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
67568: LD_ADDR_VAR 0 7
67572: PUSH
67573: LD_VAR 0 6
67577: PUSH
67578: LD_INT 1
67580: ARRAY
67581: PUSH
67582: LD_VAR 0 5
67586: ARRAY
67587: PUSH
67588: LD_VAR 0 6
67592: PUSH
67593: LD_INT 2
67595: ARRAY
67596: PUSH
67597: LD_VAR 0 5
67601: ARRAY
67602: PUSH
67603: EMPTY
67604: LIST
67605: LIST
67606: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
67607: LD_VAR 0 7
67611: PUSH
67612: LD_INT 1
67614: ARRAY
67615: PPUSH
67616: LD_VAR 0 7
67620: PUSH
67621: LD_INT 2
67623: ARRAY
67624: PPUSH
67625: CALL_OW 428
67629: PUSH
67630: LD_INT 0
67632: EQUAL
67633: IFFALSE 67686
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
67635: LD_VAR 0 1
67639: PPUSH
67640: LD_VAR 0 7
67644: PUSH
67645: LD_INT 1
67647: ARRAY
67648: PPUSH
67649: LD_VAR 0 7
67653: PUSH
67654: LD_INT 2
67656: ARRAY
67657: PPUSH
67658: LD_VAR 0 3
67662: PPUSH
67663: CALL_OW 48
// result := IsPlaced ( unit ) ;
67667: LD_ADDR_VAR 0 4
67671: PUSH
67672: LD_VAR 0 1
67676: PPUSH
67677: CALL_OW 305
67681: ST_TO_ADDR
// exit ;
67682: POP
67683: POP
67684: GO 67690
// end ; end ;
67686: GO 67565
67688: POP
67689: POP
// end ;
67690: LD_VAR 0 4
67694: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
67695: LD_INT 0
67697: PPUSH
67698: PPUSH
67699: PPUSH
// if not side or side > 8 then
67700: LD_VAR 0 1
67704: NOT
67705: PUSH
67706: LD_VAR 0 1
67710: PUSH
67711: LD_INT 8
67713: GREATER
67714: OR
67715: IFFALSE 67719
// exit ;
67717: GO 67906
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
67719: LD_ADDR_VAR 0 4
67723: PUSH
67724: LD_INT 22
67726: PUSH
67727: LD_VAR 0 1
67731: PUSH
67732: EMPTY
67733: LIST
67734: LIST
67735: PUSH
67736: LD_INT 21
67738: PUSH
67739: LD_INT 3
67741: PUSH
67742: EMPTY
67743: LIST
67744: LIST
67745: PUSH
67746: EMPTY
67747: LIST
67748: LIST
67749: PPUSH
67750: CALL_OW 69
67754: ST_TO_ADDR
// if not tmp then
67755: LD_VAR 0 4
67759: NOT
67760: IFFALSE 67764
// exit ;
67762: GO 67906
// enable_addtolog := true ;
67764: LD_ADDR_OWVAR 81
67768: PUSH
67769: LD_INT 1
67771: ST_TO_ADDR
// AddToLog ( [ ) ;
67772: LD_STRING [
67774: PPUSH
67775: CALL_OW 561
// for i in tmp do
67779: LD_ADDR_VAR 0 3
67783: PUSH
67784: LD_VAR 0 4
67788: PUSH
67789: FOR_IN
67790: IFFALSE 67897
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
67792: LD_STRING [
67794: PUSH
67795: LD_VAR 0 3
67799: PPUSH
67800: CALL_OW 266
67804: STR
67805: PUSH
67806: LD_STRING , 
67808: STR
67809: PUSH
67810: LD_VAR 0 3
67814: PPUSH
67815: CALL_OW 250
67819: STR
67820: PUSH
67821: LD_STRING , 
67823: STR
67824: PUSH
67825: LD_VAR 0 3
67829: PPUSH
67830: CALL_OW 251
67834: STR
67835: PUSH
67836: LD_STRING , 
67838: STR
67839: PUSH
67840: LD_VAR 0 3
67844: PPUSH
67845: CALL_OW 254
67849: STR
67850: PUSH
67851: LD_STRING , 
67853: STR
67854: PUSH
67855: LD_VAR 0 3
67859: PPUSH
67860: LD_INT 1
67862: PPUSH
67863: CALL_OW 268
67867: STR
67868: PUSH
67869: LD_STRING , 
67871: STR
67872: PUSH
67873: LD_VAR 0 3
67877: PPUSH
67878: LD_INT 2
67880: PPUSH
67881: CALL_OW 268
67885: STR
67886: PUSH
67887: LD_STRING ],
67889: STR
67890: PPUSH
67891: CALL_OW 561
// end ;
67895: GO 67789
67897: POP
67898: POP
// AddToLog ( ]; ) ;
67899: LD_STRING ];
67901: PPUSH
67902: CALL_OW 561
// end ;
67906: LD_VAR 0 2
67910: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
67911: LD_INT 0
67913: PPUSH
67914: PPUSH
67915: PPUSH
67916: PPUSH
67917: PPUSH
// if not area or not rate or not max then
67918: LD_VAR 0 1
67922: NOT
67923: PUSH
67924: LD_VAR 0 2
67928: NOT
67929: OR
67930: PUSH
67931: LD_VAR 0 4
67935: NOT
67936: OR
67937: IFFALSE 67941
// exit ;
67939: GO 68130
// while 1 do
67941: LD_INT 1
67943: IFFALSE 68130
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
67945: LD_ADDR_VAR 0 9
67949: PUSH
67950: LD_VAR 0 1
67954: PPUSH
67955: LD_INT 1
67957: PPUSH
67958: CALL_OW 287
67962: PUSH
67963: LD_INT 10
67965: MUL
67966: ST_TO_ADDR
// r := rate / 10 ;
67967: LD_ADDR_VAR 0 7
67971: PUSH
67972: LD_VAR 0 2
67976: PUSH
67977: LD_INT 10
67979: DIVREAL
67980: ST_TO_ADDR
// time := 1 1$00 ;
67981: LD_ADDR_VAR 0 8
67985: PUSH
67986: LD_INT 2100
67988: ST_TO_ADDR
// if amount < min then
67989: LD_VAR 0 9
67993: PUSH
67994: LD_VAR 0 3
67998: LESS
67999: IFFALSE 68017
// r := r * 2 else
68001: LD_ADDR_VAR 0 7
68005: PUSH
68006: LD_VAR 0 7
68010: PUSH
68011: LD_INT 2
68013: MUL
68014: ST_TO_ADDR
68015: GO 68043
// if amount > max then
68017: LD_VAR 0 9
68021: PUSH
68022: LD_VAR 0 4
68026: GREATER
68027: IFFALSE 68043
// r := r / 2 ;
68029: LD_ADDR_VAR 0 7
68033: PUSH
68034: LD_VAR 0 7
68038: PUSH
68039: LD_INT 2
68041: DIVREAL
68042: ST_TO_ADDR
// time := time / r ;
68043: LD_ADDR_VAR 0 8
68047: PUSH
68048: LD_VAR 0 8
68052: PUSH
68053: LD_VAR 0 7
68057: DIVREAL
68058: ST_TO_ADDR
// if time < 0 then
68059: LD_VAR 0 8
68063: PUSH
68064: LD_INT 0
68066: LESS
68067: IFFALSE 68084
// time := time * - 1 ;
68069: LD_ADDR_VAR 0 8
68073: PUSH
68074: LD_VAR 0 8
68078: PUSH
68079: LD_INT 1
68081: NEG
68082: MUL
68083: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
68084: LD_VAR 0 8
68088: PUSH
68089: LD_INT 35
68091: PPUSH
68092: LD_INT 875
68094: PPUSH
68095: CALL_OW 12
68099: PLUS
68100: PPUSH
68101: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
68105: LD_INT 1
68107: PPUSH
68108: LD_INT 5
68110: PPUSH
68111: CALL_OW 12
68115: PPUSH
68116: LD_VAR 0 1
68120: PPUSH
68121: LD_INT 1
68123: PPUSH
68124: CALL_OW 55
// end ;
68128: GO 67941
// end ;
68130: LD_VAR 0 5
68134: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
68135: LD_INT 0
68137: PPUSH
68138: PPUSH
68139: PPUSH
68140: PPUSH
68141: PPUSH
68142: PPUSH
68143: PPUSH
68144: PPUSH
// if not turrets or not factories then
68145: LD_VAR 0 1
68149: NOT
68150: PUSH
68151: LD_VAR 0 2
68155: NOT
68156: OR
68157: IFFALSE 68161
// exit ;
68159: GO 68468
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
68161: LD_ADDR_VAR 0 10
68165: PUSH
68166: LD_INT 5
68168: PUSH
68169: LD_INT 6
68171: PUSH
68172: EMPTY
68173: LIST
68174: LIST
68175: PUSH
68176: LD_INT 2
68178: PUSH
68179: LD_INT 4
68181: PUSH
68182: EMPTY
68183: LIST
68184: LIST
68185: PUSH
68186: LD_INT 3
68188: PUSH
68189: LD_INT 5
68191: PUSH
68192: EMPTY
68193: LIST
68194: LIST
68195: PUSH
68196: EMPTY
68197: LIST
68198: LIST
68199: LIST
68200: PUSH
68201: LD_INT 24
68203: PUSH
68204: LD_INT 25
68206: PUSH
68207: EMPTY
68208: LIST
68209: LIST
68210: PUSH
68211: LD_INT 23
68213: PUSH
68214: LD_INT 27
68216: PUSH
68217: EMPTY
68218: LIST
68219: LIST
68220: PUSH
68221: EMPTY
68222: LIST
68223: LIST
68224: PUSH
68225: LD_INT 42
68227: PUSH
68228: LD_INT 43
68230: PUSH
68231: EMPTY
68232: LIST
68233: LIST
68234: PUSH
68235: LD_INT 44
68237: PUSH
68238: LD_INT 46
68240: PUSH
68241: EMPTY
68242: LIST
68243: LIST
68244: PUSH
68245: LD_INT 45
68247: PUSH
68248: LD_INT 47
68250: PUSH
68251: EMPTY
68252: LIST
68253: LIST
68254: PUSH
68255: EMPTY
68256: LIST
68257: LIST
68258: LIST
68259: PUSH
68260: EMPTY
68261: LIST
68262: LIST
68263: LIST
68264: ST_TO_ADDR
// result := [ ] ;
68265: LD_ADDR_VAR 0 3
68269: PUSH
68270: EMPTY
68271: ST_TO_ADDR
// for i in turrets do
68272: LD_ADDR_VAR 0 4
68276: PUSH
68277: LD_VAR 0 1
68281: PUSH
68282: FOR_IN
68283: IFFALSE 68466
// begin nat := GetNation ( i ) ;
68285: LD_ADDR_VAR 0 7
68289: PUSH
68290: LD_VAR 0 4
68294: PPUSH
68295: CALL_OW 248
68299: ST_TO_ADDR
// weapon := 0 ;
68300: LD_ADDR_VAR 0 8
68304: PUSH
68305: LD_INT 0
68307: ST_TO_ADDR
// if not nat then
68308: LD_VAR 0 7
68312: NOT
68313: IFFALSE 68317
// continue ;
68315: GO 68282
// for j in list [ nat ] do
68317: LD_ADDR_VAR 0 5
68321: PUSH
68322: LD_VAR 0 10
68326: PUSH
68327: LD_VAR 0 7
68331: ARRAY
68332: PUSH
68333: FOR_IN
68334: IFFALSE 68375
// if GetBWeapon ( i ) = j [ 1 ] then
68336: LD_VAR 0 4
68340: PPUSH
68341: CALL_OW 269
68345: PUSH
68346: LD_VAR 0 5
68350: PUSH
68351: LD_INT 1
68353: ARRAY
68354: EQUAL
68355: IFFALSE 68373
// begin weapon := j [ 2 ] ;
68357: LD_ADDR_VAR 0 8
68361: PUSH
68362: LD_VAR 0 5
68366: PUSH
68367: LD_INT 2
68369: ARRAY
68370: ST_TO_ADDR
// break ;
68371: GO 68375
// end ;
68373: GO 68333
68375: POP
68376: POP
// if not weapon then
68377: LD_VAR 0 8
68381: NOT
68382: IFFALSE 68386
// continue ;
68384: GO 68282
// for k in factories do
68386: LD_ADDR_VAR 0 6
68390: PUSH
68391: LD_VAR 0 2
68395: PUSH
68396: FOR_IN
68397: IFFALSE 68462
// begin weapons := AvailableWeaponList ( k ) ;
68399: LD_ADDR_VAR 0 9
68403: PUSH
68404: LD_VAR 0 6
68408: PPUSH
68409: CALL_OW 478
68413: ST_TO_ADDR
// if not weapons then
68414: LD_VAR 0 9
68418: NOT
68419: IFFALSE 68423
// continue ;
68421: GO 68396
// if weapon in weapons then
68423: LD_VAR 0 8
68427: PUSH
68428: LD_VAR 0 9
68432: IN
68433: IFFALSE 68460
// begin result := [ i , weapon ] ;
68435: LD_ADDR_VAR 0 3
68439: PUSH
68440: LD_VAR 0 4
68444: PUSH
68445: LD_VAR 0 8
68449: PUSH
68450: EMPTY
68451: LIST
68452: LIST
68453: ST_TO_ADDR
// exit ;
68454: POP
68455: POP
68456: POP
68457: POP
68458: GO 68468
// end ; end ;
68460: GO 68396
68462: POP
68463: POP
// end ;
68464: GO 68282
68466: POP
68467: POP
// end ;
68468: LD_VAR 0 3
68472: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
68473: LD_INT 0
68475: PPUSH
// if not side or side > 8 then
68476: LD_VAR 0 3
68480: NOT
68481: PUSH
68482: LD_VAR 0 3
68486: PUSH
68487: LD_INT 8
68489: GREATER
68490: OR
68491: IFFALSE 68495
// exit ;
68493: GO 68554
// if not range then
68495: LD_VAR 0 4
68499: NOT
68500: IFFALSE 68511
// range := - 12 ;
68502: LD_ADDR_VAR 0 4
68506: PUSH
68507: LD_INT 12
68509: NEG
68510: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
68511: LD_VAR 0 1
68515: PPUSH
68516: LD_VAR 0 2
68520: PPUSH
68521: LD_VAR 0 3
68525: PPUSH
68526: LD_VAR 0 4
68530: PPUSH
68531: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
68535: LD_VAR 0 1
68539: PPUSH
68540: LD_VAR 0 2
68544: PPUSH
68545: LD_VAR 0 3
68549: PPUSH
68550: CALL_OW 331
// end ;
68554: LD_VAR 0 5
68558: RET
// export function Video ( mode ) ; begin
68559: LD_INT 0
68561: PPUSH
// ingame_video = mode ;
68562: LD_ADDR_OWVAR 52
68566: PUSH
68567: LD_VAR 0 1
68571: ST_TO_ADDR
// interface_hidden = mode ;
68572: LD_ADDR_OWVAR 54
68576: PUSH
68577: LD_VAR 0 1
68581: ST_TO_ADDR
// end ;
68582: LD_VAR 0 2
68586: RET
// export function Join ( array , element ) ; begin
68587: LD_INT 0
68589: PPUSH
// result := Replace ( array , array + 1 , element ) ;
68590: LD_ADDR_VAR 0 3
68594: PUSH
68595: LD_VAR 0 1
68599: PPUSH
68600: LD_VAR 0 1
68604: PUSH
68605: LD_INT 1
68607: PLUS
68608: PPUSH
68609: LD_VAR 0 2
68613: PPUSH
68614: CALL_OW 1
68618: ST_TO_ADDR
// end ;
68619: LD_VAR 0 3
68623: RET
// export function JoinUnion ( array , element ) ; begin
68624: LD_INT 0
68626: PPUSH
// result := array union element ;
68627: LD_ADDR_VAR 0 3
68631: PUSH
68632: LD_VAR 0 1
68636: PUSH
68637: LD_VAR 0 2
68641: UNION
68642: ST_TO_ADDR
// end ;
68643: LD_VAR 0 3
68647: RET
// export function GetBehemoths ( side ) ; begin
68648: LD_INT 0
68650: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
68651: LD_ADDR_VAR 0 2
68655: PUSH
68656: LD_INT 22
68658: PUSH
68659: LD_VAR 0 1
68663: PUSH
68664: EMPTY
68665: LIST
68666: LIST
68667: PUSH
68668: LD_INT 31
68670: PUSH
68671: LD_INT 25
68673: PUSH
68674: EMPTY
68675: LIST
68676: LIST
68677: PUSH
68678: EMPTY
68679: LIST
68680: LIST
68681: PPUSH
68682: CALL_OW 69
68686: ST_TO_ADDR
// end ;
68687: LD_VAR 0 2
68691: RET
// export function Shuffle ( array ) ; var i , index ; begin
68692: LD_INT 0
68694: PPUSH
68695: PPUSH
68696: PPUSH
// result := [ ] ;
68697: LD_ADDR_VAR 0 2
68701: PUSH
68702: EMPTY
68703: ST_TO_ADDR
// if not array then
68704: LD_VAR 0 1
68708: NOT
68709: IFFALSE 68713
// exit ;
68711: GO 68812
// Randomize ;
68713: CALL_OW 10
// for i = array downto 1 do
68717: LD_ADDR_VAR 0 3
68721: PUSH
68722: DOUBLE
68723: LD_VAR 0 1
68727: INC
68728: ST_TO_ADDR
68729: LD_INT 1
68731: PUSH
68732: FOR_DOWNTO
68733: IFFALSE 68810
// begin index := rand ( 1 , array ) ;
68735: LD_ADDR_VAR 0 4
68739: PUSH
68740: LD_INT 1
68742: PPUSH
68743: LD_VAR 0 1
68747: PPUSH
68748: CALL_OW 12
68752: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
68753: LD_ADDR_VAR 0 2
68757: PUSH
68758: LD_VAR 0 2
68762: PPUSH
68763: LD_VAR 0 2
68767: PUSH
68768: LD_INT 1
68770: PLUS
68771: PPUSH
68772: LD_VAR 0 1
68776: PUSH
68777: LD_VAR 0 4
68781: ARRAY
68782: PPUSH
68783: CALL_OW 2
68787: ST_TO_ADDR
// array := Delete ( array , index ) ;
68788: LD_ADDR_VAR 0 1
68792: PUSH
68793: LD_VAR 0 1
68797: PPUSH
68798: LD_VAR 0 4
68802: PPUSH
68803: CALL_OW 3
68807: ST_TO_ADDR
// end ;
68808: GO 68732
68810: POP
68811: POP
// end ;
68812: LD_VAR 0 2
68816: RET
// export function GetBaseMaterials ( base ) ; begin
68817: LD_INT 0
68819: PPUSH
// result := [ 0 , 0 , 0 ] ;
68820: LD_ADDR_VAR 0 2
68824: PUSH
68825: LD_INT 0
68827: PUSH
68828: LD_INT 0
68830: PUSH
68831: LD_INT 0
68833: PUSH
68834: EMPTY
68835: LIST
68836: LIST
68837: LIST
68838: ST_TO_ADDR
// if not base then
68839: LD_VAR 0 1
68843: NOT
68844: IFFALSE 68848
// exit ;
68846: GO 68897
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
68848: LD_ADDR_VAR 0 2
68852: PUSH
68853: LD_VAR 0 1
68857: PPUSH
68858: LD_INT 1
68860: PPUSH
68861: CALL_OW 275
68865: PUSH
68866: LD_VAR 0 1
68870: PPUSH
68871: LD_INT 2
68873: PPUSH
68874: CALL_OW 275
68878: PUSH
68879: LD_VAR 0 1
68883: PPUSH
68884: LD_INT 3
68886: PPUSH
68887: CALL_OW 275
68891: PUSH
68892: EMPTY
68893: LIST
68894: LIST
68895: LIST
68896: ST_TO_ADDR
// end ;
68897: LD_VAR 0 2
68901: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
68902: LD_INT 0
68904: PPUSH
68905: PPUSH
// result := array ;
68906: LD_ADDR_VAR 0 3
68910: PUSH
68911: LD_VAR 0 1
68915: ST_TO_ADDR
// if size >= result then
68916: LD_VAR 0 2
68920: PUSH
68921: LD_VAR 0 3
68925: GREATEREQUAL
68926: IFFALSE 68930
// exit ;
68928: GO 68980
// if size then
68930: LD_VAR 0 2
68934: IFFALSE 68980
// for i := array downto size do
68936: LD_ADDR_VAR 0 4
68940: PUSH
68941: DOUBLE
68942: LD_VAR 0 1
68946: INC
68947: ST_TO_ADDR
68948: LD_VAR 0 2
68952: PUSH
68953: FOR_DOWNTO
68954: IFFALSE 68978
// result := Delete ( result , result ) ;
68956: LD_ADDR_VAR 0 3
68960: PUSH
68961: LD_VAR 0 3
68965: PPUSH
68966: LD_VAR 0 3
68970: PPUSH
68971: CALL_OW 3
68975: ST_TO_ADDR
68976: GO 68953
68978: POP
68979: POP
// end ;
68980: LD_VAR 0 3
68984: RET
// export function ComExit ( unit ) ; var tmp ; begin
68985: LD_INT 0
68987: PPUSH
68988: PPUSH
// if not IsInUnit ( unit ) then
68989: LD_VAR 0 1
68993: PPUSH
68994: CALL_OW 310
68998: NOT
68999: IFFALSE 69003
// exit ;
69001: GO 69063
// tmp := IsInUnit ( unit ) ;
69003: LD_ADDR_VAR 0 3
69007: PUSH
69008: LD_VAR 0 1
69012: PPUSH
69013: CALL_OW 310
69017: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
69018: LD_VAR 0 3
69022: PPUSH
69023: CALL_OW 247
69027: PUSH
69028: LD_INT 2
69030: EQUAL
69031: IFFALSE 69044
// ComExitVehicle ( unit ) else
69033: LD_VAR 0 1
69037: PPUSH
69038: CALL_OW 121
69042: GO 69053
// ComExitBuilding ( unit ) ;
69044: LD_VAR 0 1
69048: PPUSH
69049: CALL_OW 122
// result := tmp ;
69053: LD_ADDR_VAR 0 2
69057: PUSH
69058: LD_VAR 0 3
69062: ST_TO_ADDR
// end ;
69063: LD_VAR 0 2
69067: RET
// export function ComExitAll ( units ) ; var i ; begin
69068: LD_INT 0
69070: PPUSH
69071: PPUSH
// if not units then
69072: LD_VAR 0 1
69076: NOT
69077: IFFALSE 69081
// exit ;
69079: GO 69107
// for i in units do
69081: LD_ADDR_VAR 0 3
69085: PUSH
69086: LD_VAR 0 1
69090: PUSH
69091: FOR_IN
69092: IFFALSE 69105
// ComExit ( i ) ;
69094: LD_VAR 0 3
69098: PPUSH
69099: CALL 68985 0 1
69103: GO 69091
69105: POP
69106: POP
// end ;
69107: LD_VAR 0 2
69111: RET
// export function ResetHc ; begin
69112: LD_INT 0
69114: PPUSH
// InitHc ;
69115: CALL_OW 19
// hc_importance := 0 ;
69119: LD_ADDR_OWVAR 32
69123: PUSH
69124: LD_INT 0
69126: ST_TO_ADDR
// end ;
69127: LD_VAR 0 1
69131: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
69132: LD_INT 0
69134: PPUSH
69135: PPUSH
69136: PPUSH
// _x := ( x1 + x2 ) div 2 ;
69137: LD_ADDR_VAR 0 6
69141: PUSH
69142: LD_VAR 0 1
69146: PUSH
69147: LD_VAR 0 3
69151: PLUS
69152: PUSH
69153: LD_INT 2
69155: DIV
69156: ST_TO_ADDR
// if _x < 0 then
69157: LD_VAR 0 6
69161: PUSH
69162: LD_INT 0
69164: LESS
69165: IFFALSE 69182
// _x := _x * - 1 ;
69167: LD_ADDR_VAR 0 6
69171: PUSH
69172: LD_VAR 0 6
69176: PUSH
69177: LD_INT 1
69179: NEG
69180: MUL
69181: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
69182: LD_ADDR_VAR 0 7
69186: PUSH
69187: LD_VAR 0 2
69191: PUSH
69192: LD_VAR 0 4
69196: PLUS
69197: PUSH
69198: LD_INT 2
69200: DIV
69201: ST_TO_ADDR
// if _y < 0 then
69202: LD_VAR 0 7
69206: PUSH
69207: LD_INT 0
69209: LESS
69210: IFFALSE 69227
// _y := _y * - 1 ;
69212: LD_ADDR_VAR 0 7
69216: PUSH
69217: LD_VAR 0 7
69221: PUSH
69222: LD_INT 1
69224: NEG
69225: MUL
69226: ST_TO_ADDR
// result := [ _x , _y ] ;
69227: LD_ADDR_VAR 0 5
69231: PUSH
69232: LD_VAR 0 6
69236: PUSH
69237: LD_VAR 0 7
69241: PUSH
69242: EMPTY
69243: LIST
69244: LIST
69245: ST_TO_ADDR
// end ;
69246: LD_VAR 0 5
69250: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
69251: LD_INT 0
69253: PPUSH
69254: PPUSH
69255: PPUSH
69256: PPUSH
// task := GetTaskList ( unit ) ;
69257: LD_ADDR_VAR 0 7
69261: PUSH
69262: LD_VAR 0 1
69266: PPUSH
69267: CALL_OW 437
69271: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
69272: LD_VAR 0 7
69276: NOT
69277: PUSH
69278: LD_VAR 0 1
69282: PPUSH
69283: LD_VAR 0 2
69287: PPUSH
69288: CALL_OW 308
69292: NOT
69293: AND
69294: IFFALSE 69298
// exit ;
69296: GO 69416
// if IsInArea ( unit , area ) then
69298: LD_VAR 0 1
69302: PPUSH
69303: LD_VAR 0 2
69307: PPUSH
69308: CALL_OW 308
69312: IFFALSE 69330
// begin ComMoveToArea ( unit , goAway ) ;
69314: LD_VAR 0 1
69318: PPUSH
69319: LD_VAR 0 3
69323: PPUSH
69324: CALL_OW 113
// exit ;
69328: GO 69416
// end ; if task [ 1 ] [ 1 ] <> M then
69330: LD_VAR 0 7
69334: PUSH
69335: LD_INT 1
69337: ARRAY
69338: PUSH
69339: LD_INT 1
69341: ARRAY
69342: PUSH
69343: LD_STRING M
69345: NONEQUAL
69346: IFFALSE 69350
// exit ;
69348: GO 69416
// x := task [ 1 ] [ 2 ] ;
69350: LD_ADDR_VAR 0 5
69354: PUSH
69355: LD_VAR 0 7
69359: PUSH
69360: LD_INT 1
69362: ARRAY
69363: PUSH
69364: LD_INT 2
69366: ARRAY
69367: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
69368: LD_ADDR_VAR 0 6
69372: PUSH
69373: LD_VAR 0 7
69377: PUSH
69378: LD_INT 1
69380: ARRAY
69381: PUSH
69382: LD_INT 3
69384: ARRAY
69385: ST_TO_ADDR
// if InArea ( x , y , area ) then
69386: LD_VAR 0 5
69390: PPUSH
69391: LD_VAR 0 6
69395: PPUSH
69396: LD_VAR 0 2
69400: PPUSH
69401: CALL_OW 309
69405: IFFALSE 69416
// ComStop ( unit ) ;
69407: LD_VAR 0 1
69411: PPUSH
69412: CALL_OW 141
// end ;
69416: LD_VAR 0 4
69420: RET
// export function Abs ( value ) ; begin
69421: LD_INT 0
69423: PPUSH
// result := value ;
69424: LD_ADDR_VAR 0 2
69428: PUSH
69429: LD_VAR 0 1
69433: ST_TO_ADDR
// if value < 0 then
69434: LD_VAR 0 1
69438: PUSH
69439: LD_INT 0
69441: LESS
69442: IFFALSE 69459
// result := value * - 1 ;
69444: LD_ADDR_VAR 0 2
69448: PUSH
69449: LD_VAR 0 1
69453: PUSH
69454: LD_INT 1
69456: NEG
69457: MUL
69458: ST_TO_ADDR
// end ;
69459: LD_VAR 0 2
69463: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
69464: LD_INT 0
69466: PPUSH
69467: PPUSH
69468: PPUSH
69469: PPUSH
69470: PPUSH
69471: PPUSH
69472: PPUSH
69473: PPUSH
// if not unit or not building then
69474: LD_VAR 0 1
69478: NOT
69479: PUSH
69480: LD_VAR 0 2
69484: NOT
69485: OR
69486: IFFALSE 69490
// exit ;
69488: GO 69716
// x := GetX ( building ) ;
69490: LD_ADDR_VAR 0 4
69494: PUSH
69495: LD_VAR 0 2
69499: PPUSH
69500: CALL_OW 250
69504: ST_TO_ADDR
// y := GetY ( building ) ;
69505: LD_ADDR_VAR 0 6
69509: PUSH
69510: LD_VAR 0 2
69514: PPUSH
69515: CALL_OW 251
69519: ST_TO_ADDR
// d := GetDir ( building ) ;
69520: LD_ADDR_VAR 0 8
69524: PUSH
69525: LD_VAR 0 2
69529: PPUSH
69530: CALL_OW 254
69534: ST_TO_ADDR
// r := 4 ;
69535: LD_ADDR_VAR 0 9
69539: PUSH
69540: LD_INT 4
69542: ST_TO_ADDR
// for i := 1 to 5 do
69543: LD_ADDR_VAR 0 10
69547: PUSH
69548: DOUBLE
69549: LD_INT 1
69551: DEC
69552: ST_TO_ADDR
69553: LD_INT 5
69555: PUSH
69556: FOR_TO
69557: IFFALSE 69714
// begin _x := ShiftX ( x , d , r + i ) ;
69559: LD_ADDR_VAR 0 5
69563: PUSH
69564: LD_VAR 0 4
69568: PPUSH
69569: LD_VAR 0 8
69573: PPUSH
69574: LD_VAR 0 9
69578: PUSH
69579: LD_VAR 0 10
69583: PLUS
69584: PPUSH
69585: CALL_OW 272
69589: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
69590: LD_ADDR_VAR 0 7
69594: PUSH
69595: LD_VAR 0 6
69599: PPUSH
69600: LD_VAR 0 8
69604: PPUSH
69605: LD_VAR 0 9
69609: PUSH
69610: LD_VAR 0 10
69614: PLUS
69615: PPUSH
69616: CALL_OW 273
69620: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
69621: LD_VAR 0 5
69625: PPUSH
69626: LD_VAR 0 7
69630: PPUSH
69631: CALL_OW 488
69635: PUSH
69636: LD_VAR 0 5
69640: PPUSH
69641: LD_VAR 0 7
69645: PPUSH
69646: CALL_OW 428
69650: PPUSH
69651: CALL_OW 247
69655: PUSH
69656: LD_INT 3
69658: PUSH
69659: LD_INT 2
69661: PUSH
69662: EMPTY
69663: LIST
69664: LIST
69665: IN
69666: NOT
69667: AND
69668: IFFALSE 69712
// begin ComMoveXY ( unit , _x , _y ) ;
69670: LD_VAR 0 1
69674: PPUSH
69675: LD_VAR 0 5
69679: PPUSH
69680: LD_VAR 0 7
69684: PPUSH
69685: CALL_OW 111
// result := [ _x , _y ] ;
69689: LD_ADDR_VAR 0 3
69693: PUSH
69694: LD_VAR 0 5
69698: PUSH
69699: LD_VAR 0 7
69703: PUSH
69704: EMPTY
69705: LIST
69706: LIST
69707: ST_TO_ADDR
// exit ;
69708: POP
69709: POP
69710: GO 69716
// end ; end ;
69712: GO 69556
69714: POP
69715: POP
// end ;
69716: LD_VAR 0 3
69720: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
69721: LD_INT 0
69723: PPUSH
69724: PPUSH
69725: PPUSH
// result := 0 ;
69726: LD_ADDR_VAR 0 3
69730: PUSH
69731: LD_INT 0
69733: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
69734: LD_VAR 0 1
69738: PUSH
69739: LD_INT 0
69741: LESS
69742: PUSH
69743: LD_VAR 0 1
69747: PUSH
69748: LD_INT 8
69750: GREATER
69751: OR
69752: PUSH
69753: LD_VAR 0 2
69757: PUSH
69758: LD_INT 0
69760: LESS
69761: OR
69762: PUSH
69763: LD_VAR 0 2
69767: PUSH
69768: LD_INT 8
69770: GREATER
69771: OR
69772: IFFALSE 69776
// exit ;
69774: GO 69851
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
69776: LD_ADDR_VAR 0 4
69780: PUSH
69781: LD_INT 22
69783: PUSH
69784: LD_VAR 0 2
69788: PUSH
69789: EMPTY
69790: LIST
69791: LIST
69792: PPUSH
69793: CALL_OW 69
69797: PUSH
69798: FOR_IN
69799: IFFALSE 69849
// begin un := UnitShoot ( i ) ;
69801: LD_ADDR_VAR 0 5
69805: PUSH
69806: LD_VAR 0 4
69810: PPUSH
69811: CALL_OW 504
69815: ST_TO_ADDR
// if GetSide ( un ) = side1 then
69816: LD_VAR 0 5
69820: PPUSH
69821: CALL_OW 255
69825: PUSH
69826: LD_VAR 0 1
69830: EQUAL
69831: IFFALSE 69847
// begin result := un ;
69833: LD_ADDR_VAR 0 3
69837: PUSH
69838: LD_VAR 0 5
69842: ST_TO_ADDR
// exit ;
69843: POP
69844: POP
69845: GO 69851
// end ; end ;
69847: GO 69798
69849: POP
69850: POP
// end ;
69851: LD_VAR 0 3
69855: RET
// export function GetCargoBay ( units ) ; begin
69856: LD_INT 0
69858: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
69859: LD_ADDR_VAR 0 2
69863: PUSH
69864: LD_VAR 0 1
69868: PPUSH
69869: LD_INT 2
69871: PUSH
69872: LD_INT 34
69874: PUSH
69875: LD_INT 12
69877: PUSH
69878: EMPTY
69879: LIST
69880: LIST
69881: PUSH
69882: LD_INT 34
69884: PUSH
69885: LD_INT 51
69887: PUSH
69888: EMPTY
69889: LIST
69890: LIST
69891: PUSH
69892: LD_INT 34
69894: PUSH
69895: LD_INT 32
69897: PUSH
69898: EMPTY
69899: LIST
69900: LIST
69901: PUSH
69902: LD_INT 34
69904: PUSH
69905: LD_INT 89
69907: PUSH
69908: EMPTY
69909: LIST
69910: LIST
69911: PUSH
69912: EMPTY
69913: LIST
69914: LIST
69915: LIST
69916: LIST
69917: LIST
69918: PPUSH
69919: CALL_OW 72
69923: ST_TO_ADDR
// end ;
69924: LD_VAR 0 2
69928: RET
// export function Negate ( value ) ; begin
69929: LD_INT 0
69931: PPUSH
// result := not value ;
69932: LD_ADDR_VAR 0 2
69936: PUSH
69937: LD_VAR 0 1
69941: NOT
69942: ST_TO_ADDR
// end ;
69943: LD_VAR 0 2
69947: RET
// export function Inc ( value ) ; begin
69948: LD_INT 0
69950: PPUSH
// result := value + 1 ;
69951: LD_ADDR_VAR 0 2
69955: PUSH
69956: LD_VAR 0 1
69960: PUSH
69961: LD_INT 1
69963: PLUS
69964: ST_TO_ADDR
// end ;
69965: LD_VAR 0 2
69969: RET
// export function Dec ( value ) ; begin
69970: LD_INT 0
69972: PPUSH
// result := value - 1 ;
69973: LD_ADDR_VAR 0 2
69977: PUSH
69978: LD_VAR 0 1
69982: PUSH
69983: LD_INT 1
69985: MINUS
69986: ST_TO_ADDR
// end ;
69987: LD_VAR 0 2
69991: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
69992: LD_INT 0
69994: PPUSH
69995: PPUSH
69996: PPUSH
69997: PPUSH
69998: PPUSH
69999: PPUSH
70000: PPUSH
70001: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
70002: LD_VAR 0 1
70006: PPUSH
70007: LD_VAR 0 2
70011: PPUSH
70012: CALL_OW 488
70016: NOT
70017: PUSH
70018: LD_VAR 0 3
70022: PPUSH
70023: LD_VAR 0 4
70027: PPUSH
70028: CALL_OW 488
70032: NOT
70033: OR
70034: IFFALSE 70047
// begin result := - 1 ;
70036: LD_ADDR_VAR 0 5
70040: PUSH
70041: LD_INT 1
70043: NEG
70044: ST_TO_ADDR
// exit ;
70045: GO 70282
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
70047: LD_ADDR_VAR 0 12
70051: PUSH
70052: LD_VAR 0 1
70056: PPUSH
70057: LD_VAR 0 2
70061: PPUSH
70062: LD_VAR 0 3
70066: PPUSH
70067: LD_VAR 0 4
70071: PPUSH
70072: CALL 69132 0 4
70076: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
70077: LD_ADDR_VAR 0 11
70081: PUSH
70082: LD_VAR 0 1
70086: PPUSH
70087: LD_VAR 0 2
70091: PPUSH
70092: LD_VAR 0 12
70096: PUSH
70097: LD_INT 1
70099: ARRAY
70100: PPUSH
70101: LD_VAR 0 12
70105: PUSH
70106: LD_INT 2
70108: ARRAY
70109: PPUSH
70110: CALL_OW 298
70114: ST_TO_ADDR
// distance := 9999 ;
70115: LD_ADDR_VAR 0 10
70119: PUSH
70120: LD_INT 9999
70122: ST_TO_ADDR
// for i := 0 to 5 do
70123: LD_ADDR_VAR 0 6
70127: PUSH
70128: DOUBLE
70129: LD_INT 0
70131: DEC
70132: ST_TO_ADDR
70133: LD_INT 5
70135: PUSH
70136: FOR_TO
70137: IFFALSE 70280
// begin _x := ShiftX ( x1 , i , centerDist ) ;
70139: LD_ADDR_VAR 0 7
70143: PUSH
70144: LD_VAR 0 1
70148: PPUSH
70149: LD_VAR 0 6
70153: PPUSH
70154: LD_VAR 0 11
70158: PPUSH
70159: CALL_OW 272
70163: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
70164: LD_ADDR_VAR 0 8
70168: PUSH
70169: LD_VAR 0 2
70173: PPUSH
70174: LD_VAR 0 6
70178: PPUSH
70179: LD_VAR 0 11
70183: PPUSH
70184: CALL_OW 273
70188: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
70189: LD_VAR 0 7
70193: PPUSH
70194: LD_VAR 0 8
70198: PPUSH
70199: CALL_OW 488
70203: NOT
70204: IFFALSE 70208
// continue ;
70206: GO 70136
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
70208: LD_ADDR_VAR 0 9
70212: PUSH
70213: LD_VAR 0 12
70217: PUSH
70218: LD_INT 1
70220: ARRAY
70221: PPUSH
70222: LD_VAR 0 12
70226: PUSH
70227: LD_INT 2
70229: ARRAY
70230: PPUSH
70231: LD_VAR 0 7
70235: PPUSH
70236: LD_VAR 0 8
70240: PPUSH
70241: CALL_OW 298
70245: ST_TO_ADDR
// if tmp < distance then
70246: LD_VAR 0 9
70250: PUSH
70251: LD_VAR 0 10
70255: LESS
70256: IFFALSE 70278
// begin result := i ;
70258: LD_ADDR_VAR 0 5
70262: PUSH
70263: LD_VAR 0 6
70267: ST_TO_ADDR
// distance := tmp ;
70268: LD_ADDR_VAR 0 10
70272: PUSH
70273: LD_VAR 0 9
70277: ST_TO_ADDR
// end ; end ;
70278: GO 70136
70280: POP
70281: POP
// end ;
70282: LD_VAR 0 5
70286: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
70287: LD_INT 0
70289: PPUSH
70290: PPUSH
// if not driver or not IsInUnit ( driver ) then
70291: LD_VAR 0 1
70295: NOT
70296: PUSH
70297: LD_VAR 0 1
70301: PPUSH
70302: CALL_OW 310
70306: NOT
70307: OR
70308: IFFALSE 70312
// exit ;
70310: GO 70402
// vehicle := IsInUnit ( driver ) ;
70312: LD_ADDR_VAR 0 3
70316: PUSH
70317: LD_VAR 0 1
70321: PPUSH
70322: CALL_OW 310
70326: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
70327: LD_VAR 0 1
70331: PPUSH
70332: LD_STRING \
70334: PUSH
70335: LD_INT 0
70337: PUSH
70338: LD_INT 0
70340: PUSH
70341: LD_INT 0
70343: PUSH
70344: LD_INT 0
70346: PUSH
70347: LD_INT 0
70349: PUSH
70350: LD_INT 0
70352: PUSH
70353: EMPTY
70354: LIST
70355: LIST
70356: LIST
70357: LIST
70358: LIST
70359: LIST
70360: LIST
70361: PUSH
70362: LD_STRING E
70364: PUSH
70365: LD_INT 0
70367: PUSH
70368: LD_INT 0
70370: PUSH
70371: LD_VAR 0 3
70375: PUSH
70376: LD_INT 0
70378: PUSH
70379: LD_INT 0
70381: PUSH
70382: LD_INT 0
70384: PUSH
70385: EMPTY
70386: LIST
70387: LIST
70388: LIST
70389: LIST
70390: LIST
70391: LIST
70392: LIST
70393: PUSH
70394: EMPTY
70395: LIST
70396: LIST
70397: PPUSH
70398: CALL_OW 446
// end ;
70402: LD_VAR 0 2
70406: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
70407: LD_INT 0
70409: PPUSH
70410: PPUSH
// if not driver or not IsInUnit ( driver ) then
70411: LD_VAR 0 1
70415: NOT
70416: PUSH
70417: LD_VAR 0 1
70421: PPUSH
70422: CALL_OW 310
70426: NOT
70427: OR
70428: IFFALSE 70432
// exit ;
70430: GO 70522
// vehicle := IsInUnit ( driver ) ;
70432: LD_ADDR_VAR 0 3
70436: PUSH
70437: LD_VAR 0 1
70441: PPUSH
70442: CALL_OW 310
70446: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
70447: LD_VAR 0 1
70451: PPUSH
70452: LD_STRING \
70454: PUSH
70455: LD_INT 0
70457: PUSH
70458: LD_INT 0
70460: PUSH
70461: LD_INT 0
70463: PUSH
70464: LD_INT 0
70466: PUSH
70467: LD_INT 0
70469: PUSH
70470: LD_INT 0
70472: PUSH
70473: EMPTY
70474: LIST
70475: LIST
70476: LIST
70477: LIST
70478: LIST
70479: LIST
70480: LIST
70481: PUSH
70482: LD_STRING E
70484: PUSH
70485: LD_INT 0
70487: PUSH
70488: LD_INT 0
70490: PUSH
70491: LD_VAR 0 3
70495: PUSH
70496: LD_INT 0
70498: PUSH
70499: LD_INT 0
70501: PUSH
70502: LD_INT 0
70504: PUSH
70505: EMPTY
70506: LIST
70507: LIST
70508: LIST
70509: LIST
70510: LIST
70511: LIST
70512: LIST
70513: PUSH
70514: EMPTY
70515: LIST
70516: LIST
70517: PPUSH
70518: CALL_OW 447
// end ;
70522: LD_VAR 0 2
70526: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
70527: LD_INT 0
70529: PPUSH
70530: PPUSH
70531: PPUSH
// tmp := [ ] ;
70532: LD_ADDR_VAR 0 5
70536: PUSH
70537: EMPTY
70538: ST_TO_ADDR
// for i in units do
70539: LD_ADDR_VAR 0 4
70543: PUSH
70544: LD_VAR 0 1
70548: PUSH
70549: FOR_IN
70550: IFFALSE 70588
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
70552: LD_ADDR_VAR 0 5
70556: PUSH
70557: LD_VAR 0 5
70561: PPUSH
70562: LD_VAR 0 5
70566: PUSH
70567: LD_INT 1
70569: PLUS
70570: PPUSH
70571: LD_VAR 0 4
70575: PPUSH
70576: CALL_OW 256
70580: PPUSH
70581: CALL_OW 2
70585: ST_TO_ADDR
70586: GO 70549
70588: POP
70589: POP
// if not tmp then
70590: LD_VAR 0 5
70594: NOT
70595: IFFALSE 70599
// exit ;
70597: GO 70647
// if asc then
70599: LD_VAR 0 2
70603: IFFALSE 70627
// result := SortListByListAsc ( units , tmp ) else
70605: LD_ADDR_VAR 0 3
70609: PUSH
70610: LD_VAR 0 1
70614: PPUSH
70615: LD_VAR 0 5
70619: PPUSH
70620: CALL_OW 76
70624: ST_TO_ADDR
70625: GO 70647
// result := SortListByListDesc ( units , tmp ) ;
70627: LD_ADDR_VAR 0 3
70631: PUSH
70632: LD_VAR 0 1
70636: PPUSH
70637: LD_VAR 0 5
70641: PPUSH
70642: CALL_OW 77
70646: ST_TO_ADDR
// end ;
70647: LD_VAR 0 3
70651: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
70652: LD_INT 0
70654: PPUSH
70655: PPUSH
// task := GetTaskList ( mech ) ;
70656: LD_ADDR_VAR 0 4
70660: PUSH
70661: LD_VAR 0 1
70665: PPUSH
70666: CALL_OW 437
70670: ST_TO_ADDR
// if not task then
70671: LD_VAR 0 4
70675: NOT
70676: IFFALSE 70680
// exit ;
70678: GO 70722
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
70680: LD_ADDR_VAR 0 3
70684: PUSH
70685: LD_VAR 0 4
70689: PUSH
70690: LD_INT 1
70692: ARRAY
70693: PUSH
70694: LD_INT 1
70696: ARRAY
70697: PUSH
70698: LD_STRING r
70700: EQUAL
70701: PUSH
70702: LD_VAR 0 4
70706: PUSH
70707: LD_INT 1
70709: ARRAY
70710: PUSH
70711: LD_INT 4
70713: ARRAY
70714: PUSH
70715: LD_VAR 0 2
70719: EQUAL
70720: AND
70721: ST_TO_ADDR
// end ;
70722: LD_VAR 0 3
70726: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
70727: LD_INT 0
70729: PPUSH
// SetDir ( unit , d ) ;
70730: LD_VAR 0 1
70734: PPUSH
70735: LD_VAR 0 4
70739: PPUSH
70740: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
70744: LD_VAR 0 1
70748: PPUSH
70749: LD_VAR 0 2
70753: PPUSH
70754: LD_VAR 0 3
70758: PPUSH
70759: LD_VAR 0 5
70763: PPUSH
70764: CALL_OW 48
// end ;
70768: LD_VAR 0 6
70772: RET
// export function ToNaturalNumber ( number ) ; begin
70773: LD_INT 0
70775: PPUSH
// result := number div 1 ;
70776: LD_ADDR_VAR 0 2
70780: PUSH
70781: LD_VAR 0 1
70785: PUSH
70786: LD_INT 1
70788: DIV
70789: ST_TO_ADDR
// if number < 0 then
70790: LD_VAR 0 1
70794: PUSH
70795: LD_INT 0
70797: LESS
70798: IFFALSE 70808
// result := 0 ;
70800: LD_ADDR_VAR 0 2
70804: PUSH
70805: LD_INT 0
70807: ST_TO_ADDR
// end ;
70808: LD_VAR 0 2
70812: RET
// export function SortByClass ( units , class ) ; var un ; begin
70813: LD_INT 0
70815: PPUSH
70816: PPUSH
// if not units or not class then
70817: LD_VAR 0 1
70821: NOT
70822: PUSH
70823: LD_VAR 0 2
70827: NOT
70828: OR
70829: IFFALSE 70833
// exit ;
70831: GO 70928
// result := [ ] ;
70833: LD_ADDR_VAR 0 3
70837: PUSH
70838: EMPTY
70839: ST_TO_ADDR
// for un in units do
70840: LD_ADDR_VAR 0 4
70844: PUSH
70845: LD_VAR 0 1
70849: PUSH
70850: FOR_IN
70851: IFFALSE 70926
// if GetClass ( un ) = class then
70853: LD_VAR 0 4
70857: PPUSH
70858: CALL_OW 257
70862: PUSH
70863: LD_VAR 0 2
70867: EQUAL
70868: IFFALSE 70895
// result := Insert ( result , 1 , un ) else
70870: LD_ADDR_VAR 0 3
70874: PUSH
70875: LD_VAR 0 3
70879: PPUSH
70880: LD_INT 1
70882: PPUSH
70883: LD_VAR 0 4
70887: PPUSH
70888: CALL_OW 2
70892: ST_TO_ADDR
70893: GO 70924
// result := Replace ( result , result + 1 , un ) ;
70895: LD_ADDR_VAR 0 3
70899: PUSH
70900: LD_VAR 0 3
70904: PPUSH
70905: LD_VAR 0 3
70909: PUSH
70910: LD_INT 1
70912: PLUS
70913: PPUSH
70914: LD_VAR 0 4
70918: PPUSH
70919: CALL_OW 1
70923: ST_TO_ADDR
70924: GO 70850
70926: POP
70927: POP
// end ;
70928: LD_VAR 0 3
70932: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
70933: LD_INT 0
70935: PPUSH
70936: PPUSH
70937: PPUSH
70938: PPUSH
70939: PPUSH
70940: PPUSH
70941: PPUSH
// result := [ ] ;
70942: LD_ADDR_VAR 0 4
70946: PUSH
70947: EMPTY
70948: ST_TO_ADDR
// if x - r < 0 then
70949: LD_VAR 0 1
70953: PUSH
70954: LD_VAR 0 3
70958: MINUS
70959: PUSH
70960: LD_INT 0
70962: LESS
70963: IFFALSE 70975
// min_x := 0 else
70965: LD_ADDR_VAR 0 8
70969: PUSH
70970: LD_INT 0
70972: ST_TO_ADDR
70973: GO 70991
// min_x := x - r ;
70975: LD_ADDR_VAR 0 8
70979: PUSH
70980: LD_VAR 0 1
70984: PUSH
70985: LD_VAR 0 3
70989: MINUS
70990: ST_TO_ADDR
// if y - r < 0 then
70991: LD_VAR 0 2
70995: PUSH
70996: LD_VAR 0 3
71000: MINUS
71001: PUSH
71002: LD_INT 0
71004: LESS
71005: IFFALSE 71017
// min_y := 0 else
71007: LD_ADDR_VAR 0 7
71011: PUSH
71012: LD_INT 0
71014: ST_TO_ADDR
71015: GO 71033
// min_y := y - r ;
71017: LD_ADDR_VAR 0 7
71021: PUSH
71022: LD_VAR 0 2
71026: PUSH
71027: LD_VAR 0 3
71031: MINUS
71032: ST_TO_ADDR
// max_x := x + r ;
71033: LD_ADDR_VAR 0 9
71037: PUSH
71038: LD_VAR 0 1
71042: PUSH
71043: LD_VAR 0 3
71047: PLUS
71048: ST_TO_ADDR
// max_y := y + r ;
71049: LD_ADDR_VAR 0 10
71053: PUSH
71054: LD_VAR 0 2
71058: PUSH
71059: LD_VAR 0 3
71063: PLUS
71064: ST_TO_ADDR
// for _x = min_x to max_x do
71065: LD_ADDR_VAR 0 5
71069: PUSH
71070: DOUBLE
71071: LD_VAR 0 8
71075: DEC
71076: ST_TO_ADDR
71077: LD_VAR 0 9
71081: PUSH
71082: FOR_TO
71083: IFFALSE 71184
// for _y = min_y to max_y do
71085: LD_ADDR_VAR 0 6
71089: PUSH
71090: DOUBLE
71091: LD_VAR 0 7
71095: DEC
71096: ST_TO_ADDR
71097: LD_VAR 0 10
71101: PUSH
71102: FOR_TO
71103: IFFALSE 71180
// begin if not ValidHex ( _x , _y ) then
71105: LD_VAR 0 5
71109: PPUSH
71110: LD_VAR 0 6
71114: PPUSH
71115: CALL_OW 488
71119: NOT
71120: IFFALSE 71124
// continue ;
71122: GO 71102
// if GetResourceTypeXY ( _x , _y ) then
71124: LD_VAR 0 5
71128: PPUSH
71129: LD_VAR 0 6
71133: PPUSH
71134: CALL_OW 283
71138: IFFALSE 71178
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
71140: LD_ADDR_VAR 0 4
71144: PUSH
71145: LD_VAR 0 4
71149: PPUSH
71150: LD_VAR 0 4
71154: PUSH
71155: LD_INT 1
71157: PLUS
71158: PPUSH
71159: LD_VAR 0 5
71163: PUSH
71164: LD_VAR 0 6
71168: PUSH
71169: EMPTY
71170: LIST
71171: LIST
71172: PPUSH
71173: CALL_OW 1
71177: ST_TO_ADDR
// end ;
71178: GO 71102
71180: POP
71181: POP
71182: GO 71082
71184: POP
71185: POP
// end ;
71186: LD_VAR 0 4
71190: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
71191: LD_INT 0
71193: PPUSH
71194: PPUSH
71195: PPUSH
71196: PPUSH
71197: PPUSH
71198: PPUSH
71199: PPUSH
71200: PPUSH
// if not units then
71201: LD_VAR 0 1
71205: NOT
71206: IFFALSE 71210
// exit ;
71208: GO 71734
// result := UnitFilter ( units , [ f_ok ] ) ;
71210: LD_ADDR_VAR 0 3
71214: PUSH
71215: LD_VAR 0 1
71219: PPUSH
71220: LD_INT 50
71222: PUSH
71223: EMPTY
71224: LIST
71225: PPUSH
71226: CALL_OW 72
71230: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
71231: LD_ADDR_VAR 0 8
71235: PUSH
71236: LD_VAR 0 1
71240: PUSH
71241: LD_INT 1
71243: ARRAY
71244: PPUSH
71245: CALL_OW 255
71249: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
71250: LD_ADDR_VAR 0 10
71254: PUSH
71255: LD_INT 29
71257: PUSH
71258: LD_INT 91
71260: PUSH
71261: LD_INT 49
71263: PUSH
71264: EMPTY
71265: LIST
71266: LIST
71267: LIST
71268: ST_TO_ADDR
// if not result then
71269: LD_VAR 0 3
71273: NOT
71274: IFFALSE 71278
// exit ;
71276: GO 71734
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
71278: LD_ADDR_VAR 0 5
71282: PUSH
71283: LD_INT 81
71285: PUSH
71286: LD_VAR 0 8
71290: PUSH
71291: EMPTY
71292: LIST
71293: LIST
71294: PPUSH
71295: CALL_OW 69
71299: ST_TO_ADDR
// for i in result do
71300: LD_ADDR_VAR 0 4
71304: PUSH
71305: LD_VAR 0 3
71309: PUSH
71310: FOR_IN
71311: IFFALSE 71732
// begin tag := GetTag ( i ) + 1 ;
71313: LD_ADDR_VAR 0 9
71317: PUSH
71318: LD_VAR 0 4
71322: PPUSH
71323: CALL_OW 110
71327: PUSH
71328: LD_INT 1
71330: PLUS
71331: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
71332: LD_ADDR_VAR 0 7
71336: PUSH
71337: LD_VAR 0 4
71341: PPUSH
71342: CALL_OW 250
71346: PPUSH
71347: LD_VAR 0 4
71351: PPUSH
71352: CALL_OW 251
71356: PPUSH
71357: LD_INT 6
71359: PPUSH
71360: CALL 70933 0 3
71364: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
71365: LD_VAR 0 4
71369: PPUSH
71370: CALL_OW 247
71374: PUSH
71375: LD_INT 2
71377: EQUAL
71378: PUSH
71379: LD_VAR 0 7
71383: AND
71384: PUSH
71385: LD_VAR 0 4
71389: PPUSH
71390: CALL_OW 264
71394: PUSH
71395: LD_VAR 0 10
71399: IN
71400: NOT
71401: AND
71402: IFFALSE 71441
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
71404: LD_VAR 0 4
71408: PPUSH
71409: LD_VAR 0 7
71413: PUSH
71414: LD_INT 1
71416: ARRAY
71417: PUSH
71418: LD_INT 1
71420: ARRAY
71421: PPUSH
71422: LD_VAR 0 7
71426: PUSH
71427: LD_INT 1
71429: ARRAY
71430: PUSH
71431: LD_INT 2
71433: ARRAY
71434: PPUSH
71435: CALL_OW 116
71439: GO 71730
// if path > tag then
71441: LD_VAR 0 2
71445: PUSH
71446: LD_VAR 0 9
71450: GREATER
71451: IFFALSE 71659
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
71453: LD_ADDR_VAR 0 6
71457: PUSH
71458: LD_VAR 0 5
71462: PPUSH
71463: LD_INT 91
71465: PUSH
71466: LD_VAR 0 4
71470: PUSH
71471: LD_INT 8
71473: PUSH
71474: EMPTY
71475: LIST
71476: LIST
71477: LIST
71478: PPUSH
71479: CALL_OW 72
71483: ST_TO_ADDR
// if nearEnemy then
71484: LD_VAR 0 6
71488: IFFALSE 71557
// begin if GetWeapon ( i ) = ru_time_lapser then
71490: LD_VAR 0 4
71494: PPUSH
71495: CALL_OW 264
71499: PUSH
71500: LD_INT 49
71502: EQUAL
71503: IFFALSE 71531
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
71505: LD_VAR 0 4
71509: PPUSH
71510: LD_VAR 0 6
71514: PPUSH
71515: LD_VAR 0 4
71519: PPUSH
71520: CALL_OW 74
71524: PPUSH
71525: CALL_OW 112
71529: GO 71555
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
71531: LD_VAR 0 4
71535: PPUSH
71536: LD_VAR 0 6
71540: PPUSH
71541: LD_VAR 0 4
71545: PPUSH
71546: CALL_OW 74
71550: PPUSH
71551: CALL_OW 115
// end else
71555: GO 71657
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
71557: LD_VAR 0 4
71561: PPUSH
71562: LD_VAR 0 2
71566: PUSH
71567: LD_VAR 0 9
71571: ARRAY
71572: PUSH
71573: LD_INT 1
71575: ARRAY
71576: PPUSH
71577: LD_VAR 0 2
71581: PUSH
71582: LD_VAR 0 9
71586: ARRAY
71587: PUSH
71588: LD_INT 2
71590: ARRAY
71591: PPUSH
71592: CALL_OW 297
71596: PUSH
71597: LD_INT 6
71599: GREATER
71600: IFFALSE 71643
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
71602: LD_VAR 0 4
71606: PPUSH
71607: LD_VAR 0 2
71611: PUSH
71612: LD_VAR 0 9
71616: ARRAY
71617: PUSH
71618: LD_INT 1
71620: ARRAY
71621: PPUSH
71622: LD_VAR 0 2
71626: PUSH
71627: LD_VAR 0 9
71631: ARRAY
71632: PUSH
71633: LD_INT 2
71635: ARRAY
71636: PPUSH
71637: CALL_OW 114
71641: GO 71657
// SetTag ( i , tag ) ;
71643: LD_VAR 0 4
71647: PPUSH
71648: LD_VAR 0 9
71652: PPUSH
71653: CALL_OW 109
// end else
71657: GO 71730
// if enemy then
71659: LD_VAR 0 5
71663: IFFALSE 71730
// begin if GetWeapon ( i ) = ru_time_lapser then
71665: LD_VAR 0 4
71669: PPUSH
71670: CALL_OW 264
71674: PUSH
71675: LD_INT 49
71677: EQUAL
71678: IFFALSE 71706
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
71680: LD_VAR 0 4
71684: PPUSH
71685: LD_VAR 0 5
71689: PPUSH
71690: LD_VAR 0 4
71694: PPUSH
71695: CALL_OW 74
71699: PPUSH
71700: CALL_OW 112
71704: GO 71730
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
71706: LD_VAR 0 4
71710: PPUSH
71711: LD_VAR 0 5
71715: PPUSH
71716: LD_VAR 0 4
71720: PPUSH
71721: CALL_OW 74
71725: PPUSH
71726: CALL_OW 115
// end ; end ;
71730: GO 71310
71732: POP
71733: POP
// end ;
71734: LD_VAR 0 3
71738: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
71739: LD_INT 0
71741: PPUSH
71742: PPUSH
71743: PPUSH
// if not unit or IsInUnit ( unit ) then
71744: LD_VAR 0 1
71748: NOT
71749: PUSH
71750: LD_VAR 0 1
71754: PPUSH
71755: CALL_OW 310
71759: OR
71760: IFFALSE 71764
// exit ;
71762: GO 71855
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
71764: LD_ADDR_VAR 0 4
71768: PUSH
71769: LD_VAR 0 1
71773: PPUSH
71774: CALL_OW 250
71778: PPUSH
71779: LD_VAR 0 2
71783: PPUSH
71784: LD_INT 1
71786: PPUSH
71787: CALL_OW 272
71791: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
71792: LD_ADDR_VAR 0 5
71796: PUSH
71797: LD_VAR 0 1
71801: PPUSH
71802: CALL_OW 251
71806: PPUSH
71807: LD_VAR 0 2
71811: PPUSH
71812: LD_INT 1
71814: PPUSH
71815: CALL_OW 273
71819: ST_TO_ADDR
// if ValidHex ( x , y ) then
71820: LD_VAR 0 4
71824: PPUSH
71825: LD_VAR 0 5
71829: PPUSH
71830: CALL_OW 488
71834: IFFALSE 71855
// ComTurnXY ( unit , x , y ) ;
71836: LD_VAR 0 1
71840: PPUSH
71841: LD_VAR 0 4
71845: PPUSH
71846: LD_VAR 0 5
71850: PPUSH
71851: CALL_OW 118
// end ;
71855: LD_VAR 0 3
71859: RET
// export function SeeUnits ( side , units ) ; var i ; begin
71860: LD_INT 0
71862: PPUSH
71863: PPUSH
// result := false ;
71864: LD_ADDR_VAR 0 3
71868: PUSH
71869: LD_INT 0
71871: ST_TO_ADDR
// if not units then
71872: LD_VAR 0 2
71876: NOT
71877: IFFALSE 71881
// exit ;
71879: GO 71926
// for i in units do
71881: LD_ADDR_VAR 0 4
71885: PUSH
71886: LD_VAR 0 2
71890: PUSH
71891: FOR_IN
71892: IFFALSE 71924
// if See ( side , i ) then
71894: LD_VAR 0 1
71898: PPUSH
71899: LD_VAR 0 4
71903: PPUSH
71904: CALL_OW 292
71908: IFFALSE 71922
// begin result := true ;
71910: LD_ADDR_VAR 0 3
71914: PUSH
71915: LD_INT 1
71917: ST_TO_ADDR
// exit ;
71918: POP
71919: POP
71920: GO 71926
// end ;
71922: GO 71891
71924: POP
71925: POP
// end ;
71926: LD_VAR 0 3
71930: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
71931: LD_INT 0
71933: PPUSH
71934: PPUSH
71935: PPUSH
71936: PPUSH
// if not unit or not points then
71937: LD_VAR 0 1
71941: NOT
71942: PUSH
71943: LD_VAR 0 2
71947: NOT
71948: OR
71949: IFFALSE 71953
// exit ;
71951: GO 72043
// dist := 99999 ;
71953: LD_ADDR_VAR 0 5
71957: PUSH
71958: LD_INT 99999
71960: ST_TO_ADDR
// for i in points do
71961: LD_ADDR_VAR 0 4
71965: PUSH
71966: LD_VAR 0 2
71970: PUSH
71971: FOR_IN
71972: IFFALSE 72041
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
71974: LD_ADDR_VAR 0 6
71978: PUSH
71979: LD_VAR 0 1
71983: PPUSH
71984: LD_VAR 0 4
71988: PUSH
71989: LD_INT 1
71991: ARRAY
71992: PPUSH
71993: LD_VAR 0 4
71997: PUSH
71998: LD_INT 2
72000: ARRAY
72001: PPUSH
72002: CALL_OW 297
72006: ST_TO_ADDR
// if tmpDist < dist then
72007: LD_VAR 0 6
72011: PUSH
72012: LD_VAR 0 5
72016: LESS
72017: IFFALSE 72039
// begin result := i ;
72019: LD_ADDR_VAR 0 3
72023: PUSH
72024: LD_VAR 0 4
72028: ST_TO_ADDR
// dist := tmpDist ;
72029: LD_ADDR_VAR 0 5
72033: PUSH
72034: LD_VAR 0 6
72038: ST_TO_ADDR
// end ; end ;
72039: GO 71971
72041: POP
72042: POP
// end ;
72043: LD_VAR 0 3
72047: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
72048: LD_INT 0
72050: PPUSH
// uc_side := side ;
72051: LD_ADDR_OWVAR 20
72055: PUSH
72056: LD_VAR 0 1
72060: ST_TO_ADDR
// uc_nation := 3 ;
72061: LD_ADDR_OWVAR 21
72065: PUSH
72066: LD_INT 3
72068: ST_TO_ADDR
// vc_chassis := 25 ;
72069: LD_ADDR_OWVAR 37
72073: PUSH
72074: LD_INT 25
72076: ST_TO_ADDR
// vc_engine := engine_siberite ;
72077: LD_ADDR_OWVAR 39
72081: PUSH
72082: LD_INT 3
72084: ST_TO_ADDR
// vc_control := control_computer ;
72085: LD_ADDR_OWVAR 38
72089: PUSH
72090: LD_INT 3
72092: ST_TO_ADDR
// vc_weapon := 59 ;
72093: LD_ADDR_OWVAR 40
72097: PUSH
72098: LD_INT 59
72100: ST_TO_ADDR
// result := CreateVehicle ;
72101: LD_ADDR_VAR 0 5
72105: PUSH
72106: CALL_OW 45
72110: ST_TO_ADDR
// SetDir ( result , d ) ;
72111: LD_VAR 0 5
72115: PPUSH
72116: LD_VAR 0 4
72120: PPUSH
72121: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
72125: LD_VAR 0 5
72129: PPUSH
72130: LD_VAR 0 2
72134: PPUSH
72135: LD_VAR 0 3
72139: PPUSH
72140: LD_INT 0
72142: PPUSH
72143: CALL_OW 48
// end ;
72147: LD_VAR 0 5
72151: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
72152: LD_INT 0
72154: PPUSH
72155: PPUSH
72156: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
72157: LD_ADDR_VAR 0 2
72161: PUSH
72162: LD_INT 0
72164: PUSH
72165: LD_INT 0
72167: PUSH
72168: LD_INT 0
72170: PUSH
72171: LD_INT 0
72173: PUSH
72174: EMPTY
72175: LIST
72176: LIST
72177: LIST
72178: LIST
72179: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
72180: LD_VAR 0 1
72184: NOT
72185: PUSH
72186: LD_VAR 0 1
72190: PPUSH
72191: CALL_OW 264
72195: PUSH
72196: LD_INT 12
72198: PUSH
72199: LD_INT 51
72201: PUSH
72202: LD_INT 32
72204: PUSH
72205: LD_INT 89
72207: PUSH
72208: EMPTY
72209: LIST
72210: LIST
72211: LIST
72212: LIST
72213: IN
72214: NOT
72215: OR
72216: IFFALSE 72220
// exit ;
72218: GO 72318
// for i := 1 to 3 do
72220: LD_ADDR_VAR 0 3
72224: PUSH
72225: DOUBLE
72226: LD_INT 1
72228: DEC
72229: ST_TO_ADDR
72230: LD_INT 3
72232: PUSH
72233: FOR_TO
72234: IFFALSE 72316
// begin tmp := GetCargo ( cargo , i ) ;
72236: LD_ADDR_VAR 0 4
72240: PUSH
72241: LD_VAR 0 1
72245: PPUSH
72246: LD_VAR 0 3
72250: PPUSH
72251: CALL_OW 289
72255: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
72256: LD_ADDR_VAR 0 2
72260: PUSH
72261: LD_VAR 0 2
72265: PPUSH
72266: LD_VAR 0 3
72270: PPUSH
72271: LD_VAR 0 4
72275: PPUSH
72276: CALL_OW 1
72280: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
72281: LD_ADDR_VAR 0 2
72285: PUSH
72286: LD_VAR 0 2
72290: PPUSH
72291: LD_INT 4
72293: PPUSH
72294: LD_VAR 0 2
72298: PUSH
72299: LD_INT 4
72301: ARRAY
72302: PUSH
72303: LD_VAR 0 4
72307: PLUS
72308: PPUSH
72309: CALL_OW 1
72313: ST_TO_ADDR
// end ;
72314: GO 72233
72316: POP
72317: POP
// end ;
72318: LD_VAR 0 2
72322: RET
// export function Length ( array ) ; begin
72323: LD_INT 0
72325: PPUSH
// result := array + 0 ;
72326: LD_ADDR_VAR 0 2
72330: PUSH
72331: LD_VAR 0 1
72335: PUSH
72336: LD_INT 0
72338: PLUS
72339: ST_TO_ADDR
// end ;
72340: LD_VAR 0 2
72344: RET
// export function PrepareArray ( array ) ; begin
72345: LD_INT 0
72347: PPUSH
// result := array diff 0 ;
72348: LD_ADDR_VAR 0 2
72352: PUSH
72353: LD_VAR 0 1
72357: PUSH
72358: LD_INT 0
72360: DIFF
72361: ST_TO_ADDR
// if not result [ 1 ] then
72362: LD_VAR 0 2
72366: PUSH
72367: LD_INT 1
72369: ARRAY
72370: NOT
72371: IFFALSE 72391
// result := Delete ( result , 1 ) ;
72373: LD_ADDR_VAR 0 2
72377: PUSH
72378: LD_VAR 0 2
72382: PPUSH
72383: LD_INT 1
72385: PPUSH
72386: CALL_OW 3
72390: ST_TO_ADDR
// end ;
72391: LD_VAR 0 2
72395: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
72396: LD_INT 0
72398: PPUSH
72399: PPUSH
72400: PPUSH
72401: PPUSH
// sibRocketRange := 25 ;
72402: LD_ADDR_VAR 0 6
72406: PUSH
72407: LD_INT 25
72409: ST_TO_ADDR
// result := false ;
72410: LD_ADDR_VAR 0 4
72414: PUSH
72415: LD_INT 0
72417: ST_TO_ADDR
// for i := 0 to 5 do
72418: LD_ADDR_VAR 0 5
72422: PUSH
72423: DOUBLE
72424: LD_INT 0
72426: DEC
72427: ST_TO_ADDR
72428: LD_INT 5
72430: PUSH
72431: FOR_TO
72432: IFFALSE 72499
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
72434: LD_VAR 0 1
72438: PPUSH
72439: LD_VAR 0 5
72443: PPUSH
72444: LD_VAR 0 6
72448: PPUSH
72449: CALL_OW 272
72453: PPUSH
72454: LD_VAR 0 2
72458: PPUSH
72459: LD_VAR 0 5
72463: PPUSH
72464: LD_VAR 0 6
72468: PPUSH
72469: CALL_OW 273
72473: PPUSH
72474: LD_VAR 0 3
72478: PPUSH
72479: CALL_OW 309
72483: IFFALSE 72497
// begin result := true ;
72485: LD_ADDR_VAR 0 4
72489: PUSH
72490: LD_INT 1
72492: ST_TO_ADDR
// exit ;
72493: POP
72494: POP
72495: GO 72501
// end ;
72497: GO 72431
72499: POP
72500: POP
// end ; end_of_file
72501: LD_VAR 0 4
72505: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
72506: LD_VAR 0 1
72510: PUSH
72511: LD_INT 200
72513: DOUBLE
72514: GREATEREQUAL
72515: IFFALSE 72523
72517: LD_INT 299
72519: DOUBLE
72520: LESSEQUAL
72521: IFTRUE 72525
72523: GO 72557
72525: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
72526: LD_VAR 0 1
72530: PPUSH
72531: LD_VAR 0 2
72535: PPUSH
72536: LD_VAR 0 3
72540: PPUSH
72541: LD_VAR 0 4
72545: PPUSH
72546: LD_VAR 0 5
72550: PPUSH
72551: CALL 27225 0 5
72555: GO 72634
72557: LD_INT 300
72559: DOUBLE
72560: GREATEREQUAL
72561: IFFALSE 72569
72563: LD_INT 399
72565: DOUBLE
72566: LESSEQUAL
72567: IFTRUE 72571
72569: GO 72633
72571: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
72572: LD_VAR 0 1
72576: PPUSH
72577: LD_VAR 0 2
72581: PPUSH
72582: LD_VAR 0 3
72586: PPUSH
72587: LD_VAR 0 4
72591: PPUSH
72592: LD_VAR 0 5
72596: PPUSH
72597: LD_VAR 0 6
72601: PPUSH
72602: LD_VAR 0 7
72606: PPUSH
72607: LD_VAR 0 8
72611: PPUSH
72612: LD_VAR 0 9
72616: PPUSH
72617: LD_VAR 0 10
72621: PPUSH
72622: LD_VAR 0 11
72626: PPUSH
72627: CALL 23558 0 11
72631: GO 72634
72633: POP
// end ;
72634: PPOPN 11
72636: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
72637: LD_VAR 0 1
72641: PPUSH
72642: LD_VAR 0 2
72646: PPUSH
72647: LD_VAR 0 3
72651: PPUSH
72652: LD_VAR 0 4
72656: PPUSH
72657: LD_VAR 0 5
72661: PPUSH
72662: CALL 26961 0 5
// end ; end_of_file
72666: PPOPN 5
72668: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
72669: LD_VAR 0 1
72673: PPUSH
72674: LD_VAR 0 2
72678: PPUSH
72679: LD_VAR 0 3
72683: PPUSH
72684: LD_VAR 0 4
72688: PPUSH
72689: LD_VAR 0 5
72693: PPUSH
72694: LD_VAR 0 6
72698: PPUSH
72699: CALL 11251 0 6
// end ;
72703: PPOPN 6
72705: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
72706: LD_INT 0
72708: PPUSH
// begin if not units then
72709: LD_VAR 0 1
72713: NOT
72714: IFFALSE 72718
// exit ;
72716: GO 72718
// end ;
72718: PPOPN 7
72720: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
72721: CALL 11222 0 0
// end ;
72725: PPOPN 1
72727: END
