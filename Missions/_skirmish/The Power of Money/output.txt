// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// Init ;
  11: CALL 66 0 0
// PrepareAnimals ( 6 , 3 , 4 , apearea ) ;
  15: LD_INT 6
  17: PPUSH
  18: LD_INT 3
  20: PPUSH
  21: LD_INT 4
  23: PPUSH
  24: LD_INT 21
  26: PPUSH
  27: CALL 10624 0 4
// PrepareAmerican ;
  31: CALL 3993 0 0
// PrepareRussian ;
  35: CALL 285 0 0
// Action ;
  39: CALL 8334 0 0
// end ;
  43: END
// every 0 0$01 do
  44: GO 46
  46: DISABLE
// begin enable ;
  47: ENABLE
// display_strings := [ #tick , tick ] ;
  48: LD_ADDR_OWVAR 47
  52: PUSH
  53: LD_STRING #tick
  55: PUSH
  56: LD_OWVAR 1
  60: PUSH
  61: EMPTY
  62: LIST
  63: LIST
  64: ST_TO_ADDR
// end ;
  65: END
// export conv_squad , escort , medal1 , medal2 , medal3 , path , convoy_start , dest_counter ; export riv , ar_attacks , ar_force , us_force , conv_counter , crates_counter , safeCounter ; function Init ; begin
  66: LD_INT 0
  68: PPUSH
// medal1 := true ;
  69: LD_ADDR_EXP 3
  73: PUSH
  74: LD_INT 1
  76: ST_TO_ADDR
// medal2 := true ;
  77: LD_ADDR_EXP 4
  81: PUSH
  82: LD_INT 1
  84: ST_TO_ADDR
// medal3 := true ;
  85: LD_ADDR_EXP 5
  89: PUSH
  90: LD_INT 1
  92: ST_TO_ADDR
// path := [ pp1 , pp2 , pp3 , pp4 , conv_end ] ;
  93: LD_ADDR_EXP 6
  97: PUSH
  98: LD_INT 10
 100: PUSH
 101: LD_INT 11
 103: PUSH
 104: LD_INT 12
 106: PUSH
 107: LD_INT 13
 109: PUSH
 110: LD_INT 9
 112: PUSH
 113: EMPTY
 114: LIST
 115: LIST
 116: LIST
 117: LIST
 118: LIST
 119: ST_TO_ADDR
// conv_squad := [ ] ;
 120: LD_ADDR_EXP 1
 124: PUSH
 125: EMPTY
 126: ST_TO_ADDR
// escort := [ ] ;
 127: LD_ADDR_EXP 2
 131: PUSH
 132: EMPTY
 133: ST_TO_ADDR
// riv := [ ] ;
 134: LD_ADDR_EXP 9
 138: PUSH
 139: EMPTY
 140: ST_TO_ADDR
// ar_force := [ ] ;
 141: LD_ADDR_EXP 11
 145: PUSH
 146: EMPTY
 147: ST_TO_ADDR
// ar_attacks := false ;
 148: LD_ADDR_EXP 10
 152: PUSH
 153: LD_INT 0
 155: ST_TO_ADDR
// us_force := [ ] ;
 156: LD_ADDR_EXP 12
 160: PUSH
 161: EMPTY
 162: ST_TO_ADDR
// convoy_start := false ;
 163: LD_ADDR_EXP 7
 167: PUSH
 168: LD_INT 0
 170: ST_TO_ADDR
// conv_counter := 0 ;
 171: LD_ADDR_EXP 13
 175: PUSH
 176: LD_INT 0
 178: ST_TO_ADDR
// dest_counter := 0 ;
 179: LD_ADDR_EXP 8
 183: PUSH
 184: LD_INT 0
 186: ST_TO_ADDR
// crates_counter := 0 0$40 ;
 187: LD_ADDR_EXP 14
 191: PUSH
 192: LD_INT 1400
 194: ST_TO_ADDR
// safeCounter := 0 ;
 195: LD_ADDR_EXP 15
 199: PUSH
 200: LD_INT 0
 202: ST_TO_ADDR
// end ;
 203: LD_VAR 0 1
 207: RET
// every 2 2$00 do
 208: GO 210
 210: DISABLE
// begin while ( tick <= [ 47 47$00 , 44 44$00 , 41 41$00 ] [ Difficulty ] ) do
 211: LD_OWVAR 1
 215: PUSH
 216: LD_INT 98700
 218: PUSH
 219: LD_INT 92400
 221: PUSH
 222: LD_INT 86100
 224: PUSH
 225: EMPTY
 226: LIST
 227: LIST
 228: LIST
 229: PUSH
 230: LD_OWVAR 67
 234: ARRAY
 235: LESSEQUAL
 236: IFFALSE 284
// begin Wait ( crates_counter ) ;
 238: LD_EXP 14
 242: PPUSH
 243: CALL_OW 67
// crates_counter := crates_counter + 0 0$09 ;
 247: LD_ADDR_EXP 14
 251: PUSH
 252: LD_EXP 14
 256: PUSH
 257: LD_INT 315
 259: PLUS
 260: ST_TO_ADDR
// CreateCratesArea ( Rand ( 1 , 5 ) , crates_spawn , true ) ;
 261: LD_INT 1
 263: PPUSH
 264: LD_INT 5
 266: PPUSH
 267: CALL_OW 12
 271: PPUSH
 272: LD_INT 22
 274: PPUSH
 275: LD_INT 1
 277: PPUSH
 278: CALL_OW 55
// end ;
 282: GO 211
// end ; end_of_file
 284: END
// export Stolypin , Popov , Saseda ; export function PrepareRussian ; var un , force , i , c , skill , team ; begin
 285: LD_INT 0
 287: PPUSH
 288: PPUSH
 289: PPUSH
 290: PPUSH
 291: PPUSH
 292: PPUSH
 293: PPUSH
// uc_side := 6 ;
 294: LD_ADDR_OWVAR 20
 298: PUSH
 299: LD_INT 6
 301: ST_TO_ADDR
// uc_nation := 3 ;
 302: LD_ADDR_OWVAR 21
 306: PUSH
 307: LD_INT 3
 309: ST_TO_ADDR
// ChangeSideFog ( 3 , 6 ) ;
 310: LD_INT 3
 312: PPUSH
 313: LD_INT 6
 315: PPUSH
 316: CALL_OW 343
// Popov := NewCharacter ( Gaydar ) ;
 320: LD_ADDR_EXP 17
 324: PUSH
 325: LD_STRING Gaydar
 327: PPUSH
 328: CALL_OW 25
 332: ST_TO_ADDR
// uc_side := 7 ;
 333: LD_ADDR_OWVAR 20
 337: PUSH
 338: LD_INT 7
 340: ST_TO_ADDR
// hc_gallery := sandal ;
 341: LD_ADDR_OWVAR 33
 345: PUSH
 346: LD_STRING sandal
 348: ST_TO_ADDR
// hc_face_number := 9 ;
 349: LD_ADDR_OWVAR 34
 353: PUSH
 354: LD_INT 9
 356: ST_TO_ADDR
// hc_skills := [ 3 , 5 , 2 , 7 ] ;
 357: LD_ADDR_OWVAR 31
 361: PUSH
 362: LD_INT 3
 364: PUSH
 365: LD_INT 5
 367: PUSH
 368: LD_INT 2
 370: PUSH
 371: LD_INT 7
 373: PUSH
 374: EMPTY
 375: LIST
 376: LIST
 377: LIST
 378: LIST
 379: ST_TO_ADDR
// hc_sex := sex_male ;
 380: LD_ADDR_OWVAR 27
 384: PUSH
 385: LD_INT 1
 387: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
 388: LD_ADDR_OWVAR 29
 392: PUSH
 393: LD_INT 10
 395: PUSH
 396: LD_INT 11
 398: PUSH
 399: EMPTY
 400: LIST
 401: LIST
 402: ST_TO_ADDR
// hc_class := 4 ;
 403: LD_ADDR_OWVAR 28
 407: PUSH
 408: LD_INT 4
 410: ST_TO_ADDR
// hc_name := Fiodor Saseda ;
 411: LD_ADDR_OWVAR 26
 415: PUSH
 416: LD_STRING Fiodor Saseda
 418: ST_TO_ADDR
// Saseda := CreateHuman ;
 419: LD_ADDR_EXP 18
 423: PUSH
 424: CALL_OW 44
 428: ST_TO_ADDR
// uc_side := 3 ;
 429: LD_ADDR_OWVAR 20
 433: PUSH
 434: LD_INT 3
 436: ST_TO_ADDR
// hc_importance := 100 ;
 437: LD_ADDR_OWVAR 32
 441: PUSH
 442: LD_INT 100
 444: ST_TO_ADDR
// hc_class := 1 ;
 445: LD_ADDR_OWVAR 28
 449: PUSH
 450: LD_INT 1
 452: ST_TO_ADDR
// hc_sex := sex_male ;
 453: LD_ADDR_OWVAR 27
 457: PUSH
 458: LD_INT 1
 460: ST_TO_ADDR
// hc_skills := [ 6 , 3 , 4 , 2 ] ;
 461: LD_ADDR_OWVAR 31
 465: PUSH
 466: LD_INT 6
 468: PUSH
 469: LD_INT 3
 471: PUSH
 472: LD_INT 4
 474: PUSH
 475: LD_INT 2
 477: PUSH
 478: EMPTY
 479: LIST
 480: LIST
 481: LIST
 482: LIST
 483: ST_TO_ADDR
// hc_name := W. I. Stolypin ;
 484: LD_ADDR_OWVAR 26
 488: PUSH
 489: LD_STRING W. I. Stolypin
 491: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
 492: LD_ADDR_OWVAR 29
 496: PUSH
 497: LD_INT 10
 499: PUSH
 500: LD_INT 11
 502: PUSH
 503: EMPTY
 504: LIST
 505: LIST
 506: ST_TO_ADDR
// hc_gallery := ru ;
 507: LD_ADDR_OWVAR 33
 511: PUSH
 512: LD_STRING ru
 514: ST_TO_ADDR
// hc_face_number := 15 ;
 515: LD_ADDR_OWVAR 34
 519: PUSH
 520: LD_INT 15
 522: ST_TO_ADDR
// Stolypin := CreateHuman ;
 523: LD_ADDR_EXP 16
 527: PUSH
 528: CALL_OW 44
 532: ST_TO_ADDR
// hc_importance := 0 ;
 533: LD_ADDR_OWVAR 32
 537: PUSH
 538: LD_INT 0
 540: ST_TO_ADDR
// hc_gallery :=  ;
 541: LD_ADDR_OWVAR 33
 545: PUSH
 546: LD_STRING 
 548: ST_TO_ADDR
// hc_name :=  ;
 549: LD_ADDR_OWVAR 26
 553: PUSH
 554: LD_STRING 
 556: ST_TO_ADDR
// skill := [ 6 , 5 , 5 ] [ Difficulty ] ;
 557: LD_ADDR_VAR 0 6
 561: PUSH
 562: LD_INT 6
 564: PUSH
 565: LD_INT 5
 567: PUSH
 568: LD_INT 5
 570: PUSH
 571: EMPTY
 572: LIST
 573: LIST
 574: LIST
 575: PUSH
 576: LD_OWVAR 67
 580: ARRAY
 581: ST_TO_ADDR
// c := 1 ;
 582: LD_ADDR_VAR 0 5
 586: PUSH
 587: LD_INT 1
 589: ST_TO_ADDR
// for i = 1 to 21 do
 590: LD_ADDR_VAR 0 4
 594: PUSH
 595: DOUBLE
 596: LD_INT 1
 598: DEC
 599: ST_TO_ADDR
 600: LD_INT 21
 602: PUSH
 603: FOR_TO
 604: IFFALSE 705
// begin if i = 10 then
 606: LD_VAR 0 4
 610: PUSH
 611: LD_INT 10
 613: EQUAL
 614: IFFALSE 624
// c := 2 ;
 616: LD_ADDR_VAR 0 5
 620: PUSH
 621: LD_INT 2
 623: ST_TO_ADDR
// if i = 14 then
 624: LD_VAR 0 4
 628: PUSH
 629: LD_INT 14
 631: EQUAL
 632: IFFALSE 642
// c := 3 ;
 634: LD_ADDR_VAR 0 5
 638: PUSH
 639: LD_INT 3
 641: ST_TO_ADDR
// if i = 18 then
 642: LD_VAR 0 4
 646: PUSH
 647: LD_INT 18
 649: EQUAL
 650: IFFALSE 660
// c := 4 ;
 652: LD_ADDR_VAR 0 5
 656: PUSH
 657: LD_INT 4
 659: ST_TO_ADDR
// PrepareHuman ( false , c , skill ) ;
 660: LD_INT 0
 662: PPUSH
 663: LD_VAR 0 5
 667: PPUSH
 668: LD_VAR 0 6
 672: PPUSH
 673: CALL_OW 380
// un := CreateHuman ;
 677: LD_ADDR_VAR 0 2
 681: PUSH
 682: CALL_OW 44
 686: ST_TO_ADDR
// force := force ^ un ;
 687: LD_ADDR_VAR 0 3
 691: PUSH
 692: LD_VAR 0 3
 696: PUSH
 697: LD_VAR 0 2
 701: ADD
 702: ST_TO_ADDR
// end ;
 703: GO 603
 705: POP
 706: POP
// team := CharacterSelection ( text , [ 8 , 7 , 7 ] [ Difficulty ] , [ 8 , 7 , 7 ] [ Difficulty ] , [ sel_change_class , Stolypin , sel_changeable , sel_not_hired ] ^ force , [ [ class_soldier , 3 ] , class_mechanic , [ class_engineer , 1 ] , class_scientistic ] ) ;
 707: LD_ADDR_VAR 0 7
 711: PUSH
 712: LD_STRING text
 714: PPUSH
 715: LD_INT 8
 717: PUSH
 718: LD_INT 7
 720: PUSH
 721: LD_INT 7
 723: PUSH
 724: EMPTY
 725: LIST
 726: LIST
 727: LIST
 728: PUSH
 729: LD_OWVAR 67
 733: ARRAY
 734: PPUSH
 735: LD_INT 8
 737: PUSH
 738: LD_INT 7
 740: PUSH
 741: LD_INT 7
 743: PUSH
 744: EMPTY
 745: LIST
 746: LIST
 747: LIST
 748: PUSH
 749: LD_OWVAR 67
 753: ARRAY
 754: PPUSH
 755: LD_INT -5
 757: PUSH
 758: LD_EXP 16
 762: PUSH
 763: LD_INT -3
 765: PUSH
 766: LD_INT -2
 768: PUSH
 769: EMPTY
 770: LIST
 771: LIST
 772: LIST
 773: LIST
 774: PUSH
 775: LD_VAR 0 3
 779: ADD
 780: PPUSH
 781: LD_INT 1
 783: PUSH
 784: LD_INT 3
 786: PUSH
 787: EMPTY
 788: LIST
 789: LIST
 790: PUSH
 791: LD_INT 3
 793: PUSH
 794: LD_INT 2
 796: PUSH
 797: LD_INT 1
 799: PUSH
 800: EMPTY
 801: LIST
 802: LIST
 803: PUSH
 804: LD_INT 4
 806: PUSH
 807: EMPTY
 808: LIST
 809: LIST
 810: LIST
 811: LIST
 812: PPUSH
 813: CALL_OW 42
 817: ST_TO_ADDR
// team := team ^ Stolypin ;
 818: LD_ADDR_VAR 0 7
 822: PUSH
 823: LD_VAR 0 7
 827: PUSH
 828: LD_EXP 16
 832: ADD
 833: ST_TO_ADDR
// for i = 1 to team do
 834: LD_ADDR_VAR 0 4
 838: PUSH
 839: DOUBLE
 840: LD_INT 1
 842: DEC
 843: ST_TO_ADDR
 844: LD_VAR 0 7
 848: PUSH
 849: FOR_TO
 850: IFFALSE 875
// PlaceUnitArea ( team [ i ] , rus_start , false ) ;
 852: LD_VAR 0 7
 856: PUSH
 857: LD_VAR 0 4
 861: ARRAY
 862: PPUSH
 863: LD_INT 1
 865: PPUSH
 866: LD_INT 0
 868: PPUSH
 869: CALL_OW 49
 873: GO 849
 875: POP
 876: POP
// CenterNowOnUnits ( Stolypin ) ;
 877: LD_EXP 16
 881: PPUSH
 882: CALL_OW 87
// end ;
 886: LD_VAR 0 1
 890: RET
// export conv_ready ; export function Convoy ( type ) ; var i , veh , skill ; begin
 891: LD_INT 0
 893: PPUSH
 894: PPUSH
 895: PPUSH
 896: PPUSH
// Randomize ;
 897: CALL_OW 10
// uc_side := 6 ;
 901: LD_ADDR_OWVAR 20
 905: PUSH
 906: LD_INT 6
 908: ST_TO_ADDR
// uc_nation := 3 ;
 909: LD_ADDR_OWVAR 21
 913: PUSH
 914: LD_INT 3
 916: ST_TO_ADDR
// hc_name :=  ;
 917: LD_ADDR_OWVAR 26
 921: PUSH
 922: LD_STRING 
 924: ST_TO_ADDR
// hc_gallery :=  ;
 925: LD_ADDR_OWVAR 33
 929: PUSH
 930: LD_STRING 
 932: ST_TO_ADDR
// skill := [ 5 , 5 , 4 ] [ Difficulty ] ;
 933: LD_ADDR_VAR 0 5
 937: PUSH
 938: LD_INT 5
 940: PUSH
 941: LD_INT 5
 943: PUSH
 944: LD_INT 4
 946: PUSH
 947: EMPTY
 948: LIST
 949: LIST
 950: LIST
 951: PUSH
 952: LD_OWVAR 67
 956: ARRAY
 957: ST_TO_ADDR
// conv_ready := false ;
 958: LD_ADDR_EXP 19
 962: PUSH
 963: LD_INT 0
 965: ST_TO_ADDR
// case type of 1 :
 966: LD_VAR 0 1
 970: PUSH
 971: LD_INT 1
 973: DOUBLE
 974: EQUAL
 975: IFTRUE 979
 977: GO 1249
 979: POP
// begin if Rand ( 0 , 1 ) = 1 then
 980: LD_INT 0
 982: PPUSH
 983: LD_INT 1
 985: PPUSH
 986: CALL_OW 12
 990: PUSH
 991: LD_INT 1
 993: EQUAL
 994: IFFALSE 1000
// AddEscort ( ) ;
 996: CALL 2874 0 0
// Wait ( 0 0$02 ) ;
1000: LD_INT 70
1002: PPUSH
1003: CALL_OW 67
// vc_chassis := ru_medium_wheeled ;
1007: LD_ADDR_OWVAR 37
1011: PUSH
1012: LD_INT 21
1014: ST_TO_ADDR
// vc_engine := engine_combustion ;
1015: LD_ADDR_OWVAR 39
1019: PUSH
1020: LD_INT 1
1022: ST_TO_ADDR
// vc_control := control_manual ;
1023: LD_ADDR_OWVAR 38
1027: PUSH
1028: LD_INT 1
1030: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
1031: LD_ADDR_OWVAR 40
1035: PUSH
1036: LD_INT 51
1038: ST_TO_ADDR
// vc_fuel_battery := Rand ( 50 , 99 ) ;
1039: LD_ADDR_OWVAR 41
1043: PUSH
1044: LD_INT 50
1046: PPUSH
1047: LD_INT 99
1049: PPUSH
1050: CALL_OW 12
1054: ST_TO_ADDR
// if uc_side <> 6 then
1055: LD_OWVAR 20
1059: PUSH
1060: LD_INT 6
1062: NONEQUAL
1063: IFFALSE 1073
// uc_side := 6 ;
1065: LD_ADDR_OWVAR 20
1069: PUSH
1070: LD_INT 6
1072: ST_TO_ADDR
// veh := CreateVehicle ;
1073: LD_ADDR_VAR 0 4
1077: PUSH
1078: CALL_OW 45
1082: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1083: LD_VAR 0 4
1087: PPUSH
1088: LD_INT 3
1090: PPUSH
1091: CALL_OW 233
// PlaceUnitArea ( veh , conv_start , false ) ;
1095: LD_VAR 0 4
1099: PPUSH
1100: LD_INT 8
1102: PPUSH
1103: LD_INT 0
1105: PPUSH
1106: CALL_OW 49
// PrepareHuman ( false , Rand ( 1 , 2 ) , skill ) ;
1110: LD_INT 0
1112: PPUSH
1113: LD_INT 1
1115: PPUSH
1116: LD_INT 2
1118: PPUSH
1119: CALL_OW 12
1123: PPUSH
1124: LD_VAR 0 5
1128: PPUSH
1129: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
1133: CALL_OW 44
1137: PPUSH
1138: LD_VAR 0 4
1142: PPUSH
1143: CALL_OW 52
// SetLives ( veh , Rand ( 500 , 1000 ) ) ;
1147: LD_VAR 0 4
1151: PPUSH
1152: LD_INT 500
1154: PPUSH
1155: LD_INT 1000
1157: PPUSH
1158: CALL_OW 12
1162: PPUSH
1163: CALL_OW 234
// SetCargo ( veh , Rand ( 1 , 2 ) , Rand ( 2 , 10 ) * 10 ) ;
1167: LD_VAR 0 4
1171: PPUSH
1172: LD_INT 1
1174: PPUSH
1175: LD_INT 2
1177: PPUSH
1178: CALL_OW 12
1182: PPUSH
1183: LD_INT 2
1185: PPUSH
1186: LD_INT 10
1188: PPUSH
1189: CALL_OW 12
1193: PUSH
1194: LD_INT 10
1196: MUL
1197: PPUSH
1198: CALL_OW 290
// conv_squad := Insert ( conv_squad , 1 , [ veh , 1 ] ) ;
1202: LD_ADDR_EXP 1
1206: PUSH
1207: LD_EXP 1
1211: PPUSH
1212: LD_INT 1
1214: PPUSH
1215: LD_VAR 0 4
1219: PUSH
1220: LD_INT 1
1222: PUSH
1223: EMPTY
1224: LIST
1225: LIST
1226: PPUSH
1227: CALL_OW 2
1231: ST_TO_ADDR
// Wait ( 0 0$01 ) ;
1232: LD_INT 35
1234: PPUSH
1235: CALL_OW 67
// conv_ready := true ;
1239: LD_ADDR_EXP 19
1243: PUSH
1244: LD_INT 1
1246: ST_TO_ADDR
// end ; 2 :
1247: GO 2869
1249: LD_INT 2
1251: DOUBLE
1252: EQUAL
1253: IFTRUE 1257
1255: GO 1557
1257: POP
// begin AddEscort ( ) ;
1258: CALL 2874 0 0
// Wait ( 0 0$02 ) ;
1262: LD_INT 70
1264: PPUSH
1265: CALL_OW 67
// for i = 1 to 2 do
1269: LD_ADDR_VAR 0 3
1273: PUSH
1274: DOUBLE
1275: LD_INT 1
1277: DEC
1278: ST_TO_ADDR
1279: LD_INT 2
1281: PUSH
1282: FOR_TO
1283: IFFALSE 1534
// begin vc_chassis := ru_medium_wheeled ;
1285: LD_ADDR_OWVAR 37
1289: PUSH
1290: LD_INT 21
1292: ST_TO_ADDR
// vc_engine := engine_combustion ;
1293: LD_ADDR_OWVAR 39
1297: PUSH
1298: LD_INT 1
1300: ST_TO_ADDR
// vc_control := control_manual ;
1301: LD_ADDR_OWVAR 38
1305: PUSH
1306: LD_INT 1
1308: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
1309: LD_ADDR_OWVAR 40
1313: PUSH
1314: LD_INT 51
1316: ST_TO_ADDR
// vc_fuel_battery := Rand ( 50 , 99 ) ;
1317: LD_ADDR_OWVAR 41
1321: PUSH
1322: LD_INT 50
1324: PPUSH
1325: LD_INT 99
1327: PPUSH
1328: CALL_OW 12
1332: ST_TO_ADDR
// if uc_side <> 6 then
1333: LD_OWVAR 20
1337: PUSH
1338: LD_INT 6
1340: NONEQUAL
1341: IFFALSE 1351
// uc_side := 6 ;
1343: LD_ADDR_OWVAR 20
1347: PUSH
1348: LD_INT 6
1350: ST_TO_ADDR
// veh := CreateVehicle ;
1351: LD_ADDR_VAR 0 4
1355: PUSH
1356: CALL_OW 45
1360: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1361: LD_VAR 0 4
1365: PPUSH
1366: LD_INT 3
1368: PPUSH
1369: CALL_OW 233
// PlaceUnitArea ( veh , conv_start , false ) ;
1373: LD_VAR 0 4
1377: PPUSH
1378: LD_INT 8
1380: PPUSH
1381: LD_INT 0
1383: PPUSH
1384: CALL_OW 49
// PrepareHuman ( false , Rand ( 1 , 2 ) , skill ) ;
1388: LD_INT 0
1390: PPUSH
1391: LD_INT 1
1393: PPUSH
1394: LD_INT 2
1396: PPUSH
1397: CALL_OW 12
1401: PPUSH
1402: LD_VAR 0 5
1406: PPUSH
1407: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
1411: CALL_OW 44
1415: PPUSH
1416: LD_VAR 0 4
1420: PPUSH
1421: CALL_OW 52
// SetLives ( veh , Rand ( 500 , 1000 ) ) ;
1425: LD_VAR 0 4
1429: PPUSH
1430: LD_INT 500
1432: PPUSH
1433: LD_INT 1000
1435: PPUSH
1436: CALL_OW 12
1440: PPUSH
1441: CALL_OW 234
// SetCargo ( veh , Rand ( 1 , 2 ) , Rand ( 2 , 10 ) * 10 ) ;
1445: LD_VAR 0 4
1449: PPUSH
1450: LD_INT 1
1452: PPUSH
1453: LD_INT 2
1455: PPUSH
1456: CALL_OW 12
1460: PPUSH
1461: LD_INT 2
1463: PPUSH
1464: LD_INT 10
1466: PPUSH
1467: CALL_OW 12
1471: PUSH
1472: LD_INT 10
1474: MUL
1475: PPUSH
1476: CALL_OW 290
// conv_squad := Insert ( conv_squad , 1 , [ veh , 1 ] ) ;
1480: LD_ADDR_EXP 1
1484: PUSH
1485: LD_EXP 1
1489: PPUSH
1490: LD_INT 1
1492: PPUSH
1493: LD_VAR 0 4
1497: PUSH
1498: LD_INT 1
1500: PUSH
1501: EMPTY
1502: LIST
1503: LIST
1504: PPUSH
1505: CALL_OW 2
1509: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
1510: LD_VAR 0 4
1514: PPUSH
1515: LD_INT 120
1517: PPUSH
1518: LD_INT 10
1520: PPUSH
1521: CALL_OW 111
// Wait ( 0 0$02 ) ;
1525: LD_INT 70
1527: PPUSH
1528: CALL_OW 67
// end ;
1532: GO 1282
1534: POP
1535: POP
// AddEscort ( ) ;
1536: CALL 2874 0 0
// Wait ( 0 0$02 ) ;
1540: LD_INT 70
1542: PPUSH
1543: CALL_OW 67
// conv_ready := true ;
1547: LD_ADDR_EXP 19
1551: PUSH
1552: LD_INT 1
1554: ST_TO_ADDR
// end ; 3 :
1555: GO 2869
1557: LD_INT 3
1559: DOUBLE
1560: EQUAL
1561: IFTRUE 1565
1563: GO 1984
1565: POP
// begin AddEscort ( ) ;
1566: CALL 2874 0 0
// Wait ( 0 0$02 ) ;
1570: LD_INT 70
1572: PPUSH
1573: CALL_OW 67
// for i = 1 to 2 do
1577: LD_ADDR_VAR 0 3
1581: PUSH
1582: DOUBLE
1583: LD_INT 1
1585: DEC
1586: ST_TO_ADDR
1587: LD_INT 2
1589: PUSH
1590: FOR_TO
1591: IFFALSE 1842
// begin vc_chassis := ru_medium_wheeled ;
1593: LD_ADDR_OWVAR 37
1597: PUSH
1598: LD_INT 21
1600: ST_TO_ADDR
// vc_engine := engine_combustion ;
1601: LD_ADDR_OWVAR 39
1605: PUSH
1606: LD_INT 1
1608: ST_TO_ADDR
// vc_control := control_manual ;
1609: LD_ADDR_OWVAR 38
1613: PUSH
1614: LD_INT 1
1616: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
1617: LD_ADDR_OWVAR 40
1621: PUSH
1622: LD_INT 51
1624: ST_TO_ADDR
// vc_fuel_battery := Rand ( 50 , 99 ) ;
1625: LD_ADDR_OWVAR 41
1629: PUSH
1630: LD_INT 50
1632: PPUSH
1633: LD_INT 99
1635: PPUSH
1636: CALL_OW 12
1640: ST_TO_ADDR
// if uc_side <> 6 then
1641: LD_OWVAR 20
1645: PUSH
1646: LD_INT 6
1648: NONEQUAL
1649: IFFALSE 1659
// uc_side := 6 ;
1651: LD_ADDR_OWVAR 20
1655: PUSH
1656: LD_INT 6
1658: ST_TO_ADDR
// veh := CreateVehicle ;
1659: LD_ADDR_VAR 0 4
1663: PUSH
1664: CALL_OW 45
1668: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1669: LD_VAR 0 4
1673: PPUSH
1674: LD_INT 3
1676: PPUSH
1677: CALL_OW 233
// PlaceUnitArea ( veh , conv_start , false ) ;
1681: LD_VAR 0 4
1685: PPUSH
1686: LD_INT 8
1688: PPUSH
1689: LD_INT 0
1691: PPUSH
1692: CALL_OW 49
// PrepareHuman ( false , Rand ( 1 , 2 ) , skill ) ;
1696: LD_INT 0
1698: PPUSH
1699: LD_INT 1
1701: PPUSH
1702: LD_INT 2
1704: PPUSH
1705: CALL_OW 12
1709: PPUSH
1710: LD_VAR 0 5
1714: PPUSH
1715: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
1719: CALL_OW 44
1723: PPUSH
1724: LD_VAR 0 4
1728: PPUSH
1729: CALL_OW 52
// SetLives ( veh , Rand ( 500 , 1000 ) ) ;
1733: LD_VAR 0 4
1737: PPUSH
1738: LD_INT 500
1740: PPUSH
1741: LD_INT 1000
1743: PPUSH
1744: CALL_OW 12
1748: PPUSH
1749: CALL_OW 234
// SetCargo ( veh , Rand ( 1 , 2 ) , Rand ( 2 , 10 ) * 10 ) ;
1753: LD_VAR 0 4
1757: PPUSH
1758: LD_INT 1
1760: PPUSH
1761: LD_INT 2
1763: PPUSH
1764: CALL_OW 12
1768: PPUSH
1769: LD_INT 2
1771: PPUSH
1772: LD_INT 10
1774: PPUSH
1775: CALL_OW 12
1779: PUSH
1780: LD_INT 10
1782: MUL
1783: PPUSH
1784: CALL_OW 290
// conv_squad := Insert ( conv_squad , 1 , [ veh , 1 ] ) ;
1788: LD_ADDR_EXP 1
1792: PUSH
1793: LD_EXP 1
1797: PPUSH
1798: LD_INT 1
1800: PPUSH
1801: LD_VAR 0 4
1805: PUSH
1806: LD_INT 1
1808: PUSH
1809: EMPTY
1810: LIST
1811: LIST
1812: PPUSH
1813: CALL_OW 2
1817: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
1818: LD_VAR 0 4
1822: PPUSH
1823: LD_INT 120
1825: PPUSH
1826: LD_INT 10
1828: PPUSH
1829: CALL_OW 111
// Wait ( 0 0$02 ) ;
1833: LD_INT 70
1835: PPUSH
1836: CALL_OW 67
// end ;
1840: GO 1590
1842: POP
1843: POP
// for i = 1 to 2 do
1844: LD_ADDR_VAR 0 3
1848: PUSH
1849: DOUBLE
1850: LD_INT 1
1852: DEC
1853: ST_TO_ADDR
1854: LD_INT 2
1856: PUSH
1857: FOR_TO
1858: IFFALSE 1965
// begin PrepareHuman ( false , 1 , skill ) ;
1860: LD_INT 0
1862: PPUSH
1863: LD_INT 1
1865: PPUSH
1866: LD_VAR 0 5
1870: PPUSH
1871: CALL_OW 380
// if uc_side <> 6 then
1875: LD_OWVAR 20
1879: PUSH
1880: LD_INT 6
1882: NONEQUAL
1883: IFFALSE 1893
// uc_side := 6 ;
1885: LD_ADDR_OWVAR 20
1889: PUSH
1890: LD_INT 6
1892: ST_TO_ADDR
// veh := CreateHuman ;
1893: LD_ADDR_VAR 0 4
1897: PUSH
1898: CALL_OW 44
1902: ST_TO_ADDR
// PlaceUnitArea ( veh , conv_start , false ) ;
1903: LD_VAR 0 4
1907: PPUSH
1908: LD_INT 8
1910: PPUSH
1911: LD_INT 0
1913: PPUSH
1914: CALL_OW 49
// escort := Insert ( escort , 1 , veh ) ;
1918: LD_ADDR_EXP 2
1922: PUSH
1923: LD_EXP 2
1927: PPUSH
1928: LD_INT 1
1930: PPUSH
1931: LD_VAR 0 4
1935: PPUSH
1936: CALL_OW 2
1940: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
1941: LD_VAR 0 4
1945: PPUSH
1946: LD_INT 120
1948: PPUSH
1949: LD_INT 10
1951: PPUSH
1952: CALL_OW 111
// Wait ( 0 0$02 ) ;
1956: LD_INT 70
1958: PPUSH
1959: CALL_OW 67
// end ;
1963: GO 1857
1965: POP
1966: POP
// Wait ( 0 0$02 ) ;
1967: LD_INT 70
1969: PPUSH
1970: CALL_OW 67
// conv_ready := true ;
1974: LD_ADDR_EXP 19
1978: PUSH
1979: LD_INT 1
1981: ST_TO_ADDR
// end ; 4 :
1982: GO 2869
1984: LD_INT 4
1986: DOUBLE
1987: EQUAL
1988: IFTRUE 1992
1990: GO 2298
1992: POP
// begin if Rand ( 0 , 1 ) = 1 then
1993: LD_INT 0
1995: PPUSH
1996: LD_INT 1
1998: PPUSH
1999: CALL_OW 12
2003: PUSH
2004: LD_INT 1
2006: EQUAL
2007: IFFALSE 2013
// AddEscort ( ) ;
2009: CALL 2874 0 0
// Wait ( 0 0$02 ) ;
2013: LD_INT 70
2015: PPUSH
2016: CALL_OW 67
// for i = 1 to 5 do
2020: LD_ADDR_VAR 0 3
2024: PUSH
2025: DOUBLE
2026: LD_INT 1
2028: DEC
2029: ST_TO_ADDR
2030: LD_INT 5
2032: PUSH
2033: FOR_TO
2034: IFFALSE 2156
// begin PrepareHuman ( false , Rand ( 2 , 4 ) , skill ) ;
2036: LD_INT 0
2038: PPUSH
2039: LD_INT 2
2041: PPUSH
2042: LD_INT 4
2044: PPUSH
2045: CALL_OW 12
2049: PPUSH
2050: LD_VAR 0 5
2054: PPUSH
2055: CALL_OW 380
// if uc_side <> 6 then
2059: LD_OWVAR 20
2063: PUSH
2064: LD_INT 6
2066: NONEQUAL
2067: IFFALSE 2077
// uc_side := 6 ;
2069: LD_ADDR_OWVAR 20
2073: PUSH
2074: LD_INT 6
2076: ST_TO_ADDR
// veh := CreateHuman ;
2077: LD_ADDR_VAR 0 4
2081: PUSH
2082: CALL_OW 44
2086: ST_TO_ADDR
// PlaceUnitArea ( veh , conv_start , false ) ;
2087: LD_VAR 0 4
2091: PPUSH
2092: LD_INT 8
2094: PPUSH
2095: LD_INT 0
2097: PPUSH
2098: CALL_OW 49
// conv_squad := Insert ( conv_squad , 1 , [ veh , 1 ] ) ;
2102: LD_ADDR_EXP 1
2106: PUSH
2107: LD_EXP 1
2111: PPUSH
2112: LD_INT 1
2114: PPUSH
2115: LD_VAR 0 4
2119: PUSH
2120: LD_INT 1
2122: PUSH
2123: EMPTY
2124: LIST
2125: LIST
2126: PPUSH
2127: CALL_OW 2
2131: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
2132: LD_VAR 0 4
2136: PPUSH
2137: LD_INT 120
2139: PPUSH
2140: LD_INT 10
2142: PPUSH
2143: CALL_OW 111
// Wait ( 0 0$02 ) ;
2147: LD_INT 70
2149: PPUSH
2150: CALL_OW 67
// end ;
2154: GO 2033
2156: POP
2157: POP
// for i = 1 to 2 do
2158: LD_ADDR_VAR 0 3
2162: PUSH
2163: DOUBLE
2164: LD_INT 1
2166: DEC
2167: ST_TO_ADDR
2168: LD_INT 2
2170: PUSH
2171: FOR_TO
2172: IFFALSE 2279
// begin PrepareHuman ( false , 1 , skill ) ;
2174: LD_INT 0
2176: PPUSH
2177: LD_INT 1
2179: PPUSH
2180: LD_VAR 0 5
2184: PPUSH
2185: CALL_OW 380
// if uc_side <> 6 then
2189: LD_OWVAR 20
2193: PUSH
2194: LD_INT 6
2196: NONEQUAL
2197: IFFALSE 2207
// uc_side := 6 ;
2199: LD_ADDR_OWVAR 20
2203: PUSH
2204: LD_INT 6
2206: ST_TO_ADDR
// veh := CreateHuman ;
2207: LD_ADDR_VAR 0 4
2211: PUSH
2212: CALL_OW 44
2216: ST_TO_ADDR
// PlaceUnitArea ( veh , conv_start , false ) ;
2217: LD_VAR 0 4
2221: PPUSH
2222: LD_INT 8
2224: PPUSH
2225: LD_INT 0
2227: PPUSH
2228: CALL_OW 49
// escort := Insert ( escort , 1 , veh ) ;
2232: LD_ADDR_EXP 2
2236: PUSH
2237: LD_EXP 2
2241: PPUSH
2242: LD_INT 1
2244: PPUSH
2245: LD_VAR 0 4
2249: PPUSH
2250: CALL_OW 2
2254: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
2255: LD_VAR 0 4
2259: PPUSH
2260: LD_INT 120
2262: PPUSH
2263: LD_INT 10
2265: PPUSH
2266: CALL_OW 111
// Wait ( 0 0$02 ) ;
2270: LD_INT 70
2272: PPUSH
2273: CALL_OW 67
// end ;
2277: GO 2171
2279: POP
2280: POP
// Wait ( 0 0$02 ) ;
2281: LD_INT 70
2283: PPUSH
2284: CALL_OW 67
// conv_ready := true ;
2288: LD_ADDR_EXP 19
2292: PUSH
2293: LD_INT 1
2295: ST_TO_ADDR
// end ; 5 :
2296: GO 2869
2298: LD_INT 5
2300: DOUBLE
2301: EQUAL
2302: IFTRUE 2306
2304: GO 2868
2306: POP
// begin AddEscort ( ) ;
2307: CALL 2874 0 0
// Wait ( 0 0$02 ) ;
2311: LD_INT 70
2313: PPUSH
2314: CALL_OW 67
// AddEscort ( ) ;
2318: CALL 2874 0 0
// Wait ( 0 0$02 ) ;
2322: LD_INT 70
2324: PPUSH
2325: CALL_OW 67
// for i = 1 to 2 do
2329: LD_ADDR_VAR 0 3
2333: PUSH
2334: DOUBLE
2335: LD_INT 1
2337: DEC
2338: ST_TO_ADDR
2339: LD_INT 2
2341: PUSH
2342: FOR_TO
2343: IFFALSE 2594
// begin vc_chassis := ru_medium_wheeled ;
2345: LD_ADDR_OWVAR 37
2349: PUSH
2350: LD_INT 21
2352: ST_TO_ADDR
// vc_engine := engine_combustion ;
2353: LD_ADDR_OWVAR 39
2357: PUSH
2358: LD_INT 1
2360: ST_TO_ADDR
// vc_control := control_manual ;
2361: LD_ADDR_OWVAR 38
2365: PUSH
2366: LD_INT 1
2368: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
2369: LD_ADDR_OWVAR 40
2373: PUSH
2374: LD_INT 51
2376: ST_TO_ADDR
// vc_fuel_battery := Rand ( 50 , 99 ) ;
2377: LD_ADDR_OWVAR 41
2381: PUSH
2382: LD_INT 50
2384: PPUSH
2385: LD_INT 99
2387: PPUSH
2388: CALL_OW 12
2392: ST_TO_ADDR
// if uc_side <> 6 then
2393: LD_OWVAR 20
2397: PUSH
2398: LD_INT 6
2400: NONEQUAL
2401: IFFALSE 2411
// uc_side := 6 ;
2403: LD_ADDR_OWVAR 20
2407: PUSH
2408: LD_INT 6
2410: ST_TO_ADDR
// veh := CreateVehicle ;
2411: LD_ADDR_VAR 0 4
2415: PUSH
2416: CALL_OW 45
2420: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
2421: LD_VAR 0 4
2425: PPUSH
2426: LD_INT 3
2428: PPUSH
2429: CALL_OW 233
// PlaceUnitArea ( veh , conv_start , false ) ;
2433: LD_VAR 0 4
2437: PPUSH
2438: LD_INT 8
2440: PPUSH
2441: LD_INT 0
2443: PPUSH
2444: CALL_OW 49
// PrepareHuman ( false , Rand ( 1 , 2 ) , skill ) ;
2448: LD_INT 0
2450: PPUSH
2451: LD_INT 1
2453: PPUSH
2454: LD_INT 2
2456: PPUSH
2457: CALL_OW 12
2461: PPUSH
2462: LD_VAR 0 5
2466: PPUSH
2467: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
2471: CALL_OW 44
2475: PPUSH
2476: LD_VAR 0 4
2480: PPUSH
2481: CALL_OW 52
// SetLives ( veh , Rand ( 500 , 1000 ) ) ;
2485: LD_VAR 0 4
2489: PPUSH
2490: LD_INT 500
2492: PPUSH
2493: LD_INT 1000
2495: PPUSH
2496: CALL_OW 12
2500: PPUSH
2501: CALL_OW 234
// SetCargo ( veh , Rand ( 1 , 2 ) , Rand ( 2 , 10 ) * 10 ) ;
2505: LD_VAR 0 4
2509: PPUSH
2510: LD_INT 1
2512: PPUSH
2513: LD_INT 2
2515: PPUSH
2516: CALL_OW 12
2520: PPUSH
2521: LD_INT 2
2523: PPUSH
2524: LD_INT 10
2526: PPUSH
2527: CALL_OW 12
2531: PUSH
2532: LD_INT 10
2534: MUL
2535: PPUSH
2536: CALL_OW 290
// conv_squad := Insert ( conv_squad , 1 , [ veh , 1 ] ) ;
2540: LD_ADDR_EXP 1
2544: PUSH
2545: LD_EXP 1
2549: PPUSH
2550: LD_INT 1
2552: PPUSH
2553: LD_VAR 0 4
2557: PUSH
2558: LD_INT 1
2560: PUSH
2561: EMPTY
2562: LIST
2563: LIST
2564: PPUSH
2565: CALL_OW 2
2569: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
2570: LD_VAR 0 4
2574: PPUSH
2575: LD_INT 120
2577: PPUSH
2578: LD_INT 10
2580: PPUSH
2581: CALL_OW 111
// Wait ( 0 0$02 ) ;
2585: LD_INT 70
2587: PPUSH
2588: CALL_OW 67
// end ;
2592: GO 2342
2594: POP
2595: POP
// if Rand ( 0 , 1 ) = 1 then
2596: LD_INT 0
2598: PPUSH
2599: LD_INT 1
2601: PPUSH
2602: CALL_OW 12
2606: PUSH
2607: LD_INT 1
2609: EQUAL
2610: IFFALSE 2646
// begin vc_chassis := ru_medium_tracked ;
2612: LD_ADDR_OWVAR 37
2616: PUSH
2617: LD_INT 22
2619: ST_TO_ADDR
// vc_engine := engine_combustion ;
2620: LD_ADDR_OWVAR 39
2624: PUSH
2625: LD_INT 1
2627: ST_TO_ADDR
// vc_control := control_manual ;
2628: LD_ADDR_OWVAR 38
2632: PUSH
2633: LD_INT 1
2635: ST_TO_ADDR
// vc_weapon := ru_crane ;
2636: LD_ADDR_OWVAR 40
2640: PUSH
2641: LD_INT 52
2643: ST_TO_ADDR
// end else
2644: GO 2678
// begin vc_chassis := ru_heavy_wheeled ;
2646: LD_ADDR_OWVAR 37
2650: PUSH
2651: LD_INT 23
2653: ST_TO_ADDR
// vc_engine := engine_combustion ;
2654: LD_ADDR_OWVAR 39
2658: PUSH
2659: LD_INT 1
2661: ST_TO_ADDR
// vc_control := control_manual ;
2662: LD_ADDR_OWVAR 38
2666: PUSH
2667: LD_INT 1
2669: ST_TO_ADDR
// vc_weapon := ru_bulldozer ;
2670: LD_ADDR_OWVAR 40
2674: PUSH
2675: LD_INT 53
2677: ST_TO_ADDR
// end ; vc_fuel_battery := Rand ( 50 , 99 ) ;
2678: LD_ADDR_OWVAR 41
2682: PUSH
2683: LD_INT 50
2685: PPUSH
2686: LD_INT 99
2688: PPUSH
2689: CALL_OW 12
2693: ST_TO_ADDR
// if uc_side <> 6 then
2694: LD_OWVAR 20
2698: PUSH
2699: LD_INT 6
2701: NONEQUAL
2702: IFFALSE 2712
// uc_side := 6 ;
2704: LD_ADDR_OWVAR 20
2708: PUSH
2709: LD_INT 6
2711: ST_TO_ADDR
// veh := CreateVehicle ;
2712: LD_ADDR_VAR 0 4
2716: PUSH
2717: CALL_OW 45
2721: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
2722: LD_VAR 0 4
2726: PPUSH
2727: LD_INT 3
2729: PPUSH
2730: CALL_OW 233
// PlaceUnitArea ( veh , conv_start , false ) ;
2734: LD_VAR 0 4
2738: PPUSH
2739: LD_INT 8
2741: PPUSH
2742: LD_INT 0
2744: PPUSH
2745: CALL_OW 49
// PrepareHuman ( false , Rand ( 1 , 2 ) , skill ) ;
2749: LD_INT 0
2751: PPUSH
2752: LD_INT 1
2754: PPUSH
2755: LD_INT 2
2757: PPUSH
2758: CALL_OW 12
2762: PPUSH
2763: LD_VAR 0 5
2767: PPUSH
2768: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
2772: CALL_OW 44
2776: PPUSH
2777: LD_VAR 0 4
2781: PPUSH
2782: CALL_OW 52
// SetLives ( veh , Rand ( 500 , 1000 ) ) ;
2786: LD_VAR 0 4
2790: PPUSH
2791: LD_INT 500
2793: PPUSH
2794: LD_INT 1000
2796: PPUSH
2797: CALL_OW 12
2801: PPUSH
2802: CALL_OW 234
// conv_squad := Insert ( conv_squad , 1 , [ veh , 1 ] ) ;
2806: LD_ADDR_EXP 1
2810: PUSH
2811: LD_EXP 1
2815: PPUSH
2816: LD_INT 1
2818: PPUSH
2819: LD_VAR 0 4
2823: PUSH
2824: LD_INT 1
2826: PUSH
2827: EMPTY
2828: LIST
2829: LIST
2830: PPUSH
2831: CALL_OW 2
2835: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
2836: LD_VAR 0 4
2840: PPUSH
2841: LD_INT 120
2843: PPUSH
2844: LD_INT 10
2846: PPUSH
2847: CALL_OW 111
// Wait ( 0 0$02 ) ;
2851: LD_INT 70
2853: PPUSH
2854: CALL_OW 67
// conv_ready := true ;
2858: LD_ADDR_EXP 19
2862: PUSH
2863: LD_INT 1
2865: ST_TO_ADDR
// end ; end ;
2866: GO 2869
2868: POP
// end ;
2869: LD_VAR 0 2
2873: RET
// export function AddEscort ( ) ; var veh , skill ; begin
2874: LD_INT 0
2876: PPUSH
2877: PPUSH
2878: PPUSH
// skill := [ 5 , 5 , 4 ] [ Difficulty ] ;
2879: LD_ADDR_VAR 0 3
2883: PUSH
2884: LD_INT 5
2886: PUSH
2887: LD_INT 5
2889: PUSH
2890: LD_INT 4
2892: PUSH
2893: EMPTY
2894: LIST
2895: LIST
2896: LIST
2897: PUSH
2898: LD_OWVAR 67
2902: ARRAY
2903: ST_TO_ADDR
// uc_side := 6 ;
2904: LD_ADDR_OWVAR 20
2908: PUSH
2909: LD_INT 6
2911: ST_TO_ADDR
// uc_nation := 3 ;
2912: LD_ADDR_OWVAR 21
2916: PUSH
2917: LD_INT 3
2919: ST_TO_ADDR
// vc_chassis := ru_medium_wheeled ;
2920: LD_ADDR_OWVAR 37
2924: PUSH
2925: LD_INT 21
2927: ST_TO_ADDR
// vc_engine := engine_combustion ;
2928: LD_ADDR_OWVAR 39
2932: PUSH
2933: LD_INT 1
2935: ST_TO_ADDR
// vc_control := control_manual ;
2936: LD_ADDR_OWVAR 38
2940: PUSH
2941: LD_INT 1
2943: ST_TO_ADDR
// vc_weapon := [ ru_gun , ru_heavy_machine_gun ] [ Rand ( 1 , 2 ) ] ;
2944: LD_ADDR_OWVAR 40
2948: PUSH
2949: LD_INT 44
2951: PUSH
2952: LD_INT 42
2954: PUSH
2955: EMPTY
2956: LIST
2957: LIST
2958: PUSH
2959: LD_INT 1
2961: PPUSH
2962: LD_INT 2
2964: PPUSH
2965: CALL_OW 12
2969: ARRAY
2970: ST_TO_ADDR
// vc_fuel_battery := Rand ( 50 , 99 ) ;
2971: LD_ADDR_OWVAR 41
2975: PUSH
2976: LD_INT 50
2978: PPUSH
2979: LD_INT 99
2981: PPUSH
2982: CALL_OW 12
2986: ST_TO_ADDR
// veh := CreateVehicle ;
2987: LD_ADDR_VAR 0 2
2991: PUSH
2992: CALL_OW 45
2996: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
2997: LD_VAR 0 2
3001: PPUSH
3002: LD_INT 3
3004: PPUSH
3005: CALL_OW 233
// PlaceUnitArea ( veh , conv_start , false ) ;
3009: LD_VAR 0 2
3013: PPUSH
3014: LD_INT 8
3016: PPUSH
3017: LD_INT 0
3019: PPUSH
3020: CALL_OW 49
// PrepareHuman ( false , 3 , skill ) ;
3024: LD_INT 0
3026: PPUSH
3027: LD_INT 3
3029: PPUSH
3030: LD_VAR 0 3
3034: PPUSH
3035: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
3039: CALL_OW 44
3043: PPUSH
3044: LD_VAR 0 2
3048: PPUSH
3049: CALL_OW 52
// SetLives ( veh , Rand ( 500 , 1000 ) ) ;
3053: LD_VAR 0 2
3057: PPUSH
3058: LD_INT 500
3060: PPUSH
3061: LD_INT 1000
3063: PPUSH
3064: CALL_OW 12
3068: PPUSH
3069: CALL_OW 234
// escort := Insert ( escort , 1 , veh ) ;
3073: LD_ADDR_EXP 2
3077: PUSH
3078: LD_EXP 2
3082: PPUSH
3083: LD_INT 1
3085: PPUSH
3086: LD_VAR 0 2
3090: PPUSH
3091: CALL_OW 2
3095: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
3096: LD_VAR 0 2
3100: PPUSH
3101: LD_INT 120
3103: PPUSH
3104: LD_INT 10
3106: PPUSH
3107: CALL_OW 111
// end ;
3111: LD_VAR 0 1
3115: RET
// every 4 trigger conv_ready and FilterAllUnits ( [ f_side , 6 ] ) do var i , j ;
3116: LD_EXP 19
3120: PUSH
3121: LD_INT 22
3123: PUSH
3124: LD_INT 6
3126: PUSH
3127: EMPTY
3128: LIST
3129: LIST
3130: PPUSH
3131: CALL_OW 69
3135: AND
3136: IFFALSE 3897
3138: GO 3140
3140: DISABLE
3141: LD_INT 0
3143: PPUSH
3144: PPUSH
// begin enable ;
3145: ENABLE
// if conv_squad then
3146: LD_EXP 1
3150: IFFALSE 3407
// for i = conv_squad downto 1 do
3152: LD_ADDR_VAR 0 1
3156: PUSH
3157: DOUBLE
3158: LD_EXP 1
3162: INC
3163: ST_TO_ADDR
3164: LD_INT 1
3166: PUSH
3167: FOR_DOWNTO
3168: IFFALSE 3405
// begin if IsInArea ( conv_squad [ i ] [ 1 ] , conv_end ) then
3170: LD_EXP 1
3174: PUSH
3175: LD_VAR 0 1
3179: ARRAY
3180: PUSH
3181: LD_INT 1
3183: ARRAY
3184: PPUSH
3185: LD_INT 9
3187: PPUSH
3188: CALL_OW 308
3192: IFFALSE 3255
// begin for j in FilterUnitsInArea ( conv_end , [ f_side , 6 ] ) do
3194: LD_ADDR_VAR 0 2
3198: PUSH
3199: LD_INT 9
3201: PPUSH
3202: LD_INT 22
3204: PUSH
3205: LD_INT 6
3207: PUSH
3208: EMPTY
3209: LIST
3210: LIST
3211: PPUSH
3212: CALL_OW 70
3216: PUSH
3217: FOR_IN
3218: IFFALSE 3231
// RemoveUnit ( j ) ;
3220: LD_VAR 0 2
3224: PPUSH
3225: CALL_OW 64
3229: GO 3217
3231: POP
3232: POP
// conv_squad := Delete ( conv_squad , i ) ;
3233: LD_ADDR_EXP 1
3237: PUSH
3238: LD_EXP 1
3242: PPUSH
3243: LD_VAR 0 1
3247: PPUSH
3248: CALL_OW 3
3252: ST_TO_ADDR
// break ;
3253: GO 3405
// end ; if IsInArea ( conv_squad [ i ] [ 1 ] , path [ conv_squad [ i ] [ 2 ] ] ) then
3255: LD_EXP 1
3259: PUSH
3260: LD_VAR 0 1
3264: ARRAY
3265: PUSH
3266: LD_INT 1
3268: ARRAY
3269: PPUSH
3270: LD_EXP 6
3274: PUSH
3275: LD_EXP 1
3279: PUSH
3280: LD_VAR 0 1
3284: ARRAY
3285: PUSH
3286: LD_INT 2
3288: ARRAY
3289: ARRAY
3290: PPUSH
3291: CALL_OW 308
3295: IFFALSE 3341
// conv_squad := Replace2 ( conv_squad , i , 2 , conv_squad [ i ] [ 2 ] + 1 ) else
3297: LD_ADDR_EXP 1
3301: PUSH
3302: LD_EXP 1
3306: PPUSH
3307: LD_VAR 0 1
3311: PPUSH
3312: LD_INT 2
3314: PPUSH
3315: LD_EXP 1
3319: PUSH
3320: LD_VAR 0 1
3324: ARRAY
3325: PUSH
3326: LD_INT 2
3328: ARRAY
3329: PUSH
3330: LD_INT 1
3332: PLUS
3333: PPUSH
3334: CALL 10192 0 4
3338: ST_TO_ADDR
3339: GO 3403
// if not HasTask ( conv_squad [ i ] [ 1 ] ) then
3341: LD_EXP 1
3345: PUSH
3346: LD_VAR 0 1
3350: ARRAY
3351: PUSH
3352: LD_INT 1
3354: ARRAY
3355: PPUSH
3356: CALL_OW 314
3360: NOT
3361: IFFALSE 3403
// ComMoveToArea ( conv_squad [ i ] [ 1 ] , path [ conv_squad [ i ] [ 2 ] ] ) ;
3363: LD_EXP 1
3367: PUSH
3368: LD_VAR 0 1
3372: ARRAY
3373: PUSH
3374: LD_INT 1
3376: ARRAY
3377: PPUSH
3378: LD_EXP 6
3382: PUSH
3383: LD_EXP 1
3387: PUSH
3388: LD_VAR 0 1
3392: ARRAY
3393: PUSH
3394: LD_INT 2
3396: ARRAY
3397: ARRAY
3398: PPUSH
3399: CALL_OW 113
// end ;
3403: GO 3167
3405: POP
3406: POP
// if escort then
3407: LD_EXP 2
3411: IFFALSE 3750
// for i = escort downto 1 do
3413: LD_ADDR_VAR 0 1
3417: PUSH
3418: DOUBLE
3419: LD_EXP 2
3423: INC
3424: ST_TO_ADDR
3425: LD_INT 1
3427: PUSH
3428: FOR_DOWNTO
3429: IFFALSE 3748
// begin if IsInArea ( escort [ i ] , conv_end ) then
3431: LD_EXP 2
3435: PUSH
3436: LD_VAR 0 1
3440: ARRAY
3441: PPUSH
3442: LD_INT 9
3444: PPUSH
3445: CALL_OW 308
3449: IFFALSE 3526
// begin for j in FilterUnitsInArea ( conv_end , [ f_side , 6 ] ) do
3451: LD_ADDR_VAR 0 2
3455: PUSH
3456: LD_INT 9
3458: PPUSH
3459: LD_INT 22
3461: PUSH
3462: LD_INT 6
3464: PUSH
3465: EMPTY
3466: LIST
3467: LIST
3468: PPUSH
3469: CALL_OW 70
3473: PUSH
3474: FOR_IN
3475: IFFALSE 3502
// begin safeCounter := safeCounter + 1 ;
3477: LD_ADDR_EXP 15
3481: PUSH
3482: LD_EXP 15
3486: PUSH
3487: LD_INT 1
3489: PLUS
3490: ST_TO_ADDR
// RemoveUnit ( j ) ;
3491: LD_VAR 0 2
3495: PPUSH
3496: CALL_OW 64
// end ;
3500: GO 3474
3502: POP
3503: POP
// escort := Delete ( escort , i ) ;
3504: LD_ADDR_EXP 2
3508: PUSH
3509: LD_EXP 2
3513: PPUSH
3514: LD_VAR 0 1
3518: PPUSH
3519: CALL_OW 3
3523: ST_TO_ADDR
// break ;
3524: GO 3748
// end ; if FindTarget ( escort [ i ] ) and GetDistUnits ( escort [ i ] , FindTarget ( escort [ i ] ) ) < 13 then
3526: LD_EXP 2
3530: PUSH
3531: LD_VAR 0 1
3535: ARRAY
3536: PPUSH
3537: CALL 10500 0 1
3541: PUSH
3542: LD_EXP 2
3546: PUSH
3547: LD_VAR 0 1
3551: ARRAY
3552: PPUSH
3553: LD_EXP 2
3557: PUSH
3558: LD_VAR 0 1
3562: ARRAY
3563: PPUSH
3564: CALL 10500 0 1
3568: PPUSH
3569: CALL_OW 296
3573: PUSH
3574: LD_INT 13
3576: LESS
3577: AND
3578: IFFALSE 3613
// ComAttackUnit ( escort [ i ] , FindTarget ( escort [ i ] ) ) else
3580: LD_EXP 2
3584: PUSH
3585: LD_VAR 0 1
3589: ARRAY
3590: PPUSH
3591: LD_EXP 2
3595: PUSH
3596: LD_VAR 0 1
3600: ARRAY
3601: PPUSH
3602: CALL 10500 0 1
3606: PPUSH
3607: CALL_OW 115
3611: GO 3746
// if conv_squad and GetDistUnitXY ( escort [ i ] , 64 , 117 ) > 35 and not HasTask ( escort [ i ] ) then
3613: LD_EXP 1
3617: PUSH
3618: LD_EXP 2
3622: PUSH
3623: LD_VAR 0 1
3627: ARRAY
3628: PPUSH
3629: LD_INT 64
3631: PPUSH
3632: LD_INT 117
3634: PPUSH
3635: CALL_OW 297
3639: PUSH
3640: LD_INT 35
3642: GREATER
3643: AND
3644: PUSH
3645: LD_EXP 2
3649: PUSH
3650: LD_VAR 0 1
3654: ARRAY
3655: PPUSH
3656: CALL_OW 314
3660: NOT
3661: AND
3662: IFFALSE 3728
// begin if GetDistUnits ( escort [ i ] , conv_squad [ 1 ] [ 1 ] ) > 6 then
3664: LD_EXP 2
3668: PUSH
3669: LD_VAR 0 1
3673: ARRAY
3674: PPUSH
3675: LD_EXP 1
3679: PUSH
3680: LD_INT 1
3682: ARRAY
3683: PUSH
3684: LD_INT 1
3686: ARRAY
3687: PPUSH
3688: CALL_OW 296
3692: PUSH
3693: LD_INT 6
3695: GREATER
3696: IFFALSE 3726
// ComMoveUnit ( escort [ i ] , conv_squad [ 1 ] [ 1 ] ) end else
3698: LD_EXP 2
3702: PUSH
3703: LD_VAR 0 1
3707: ARRAY
3708: PPUSH
3709: LD_EXP 1
3713: PUSH
3714: LD_INT 1
3716: ARRAY
3717: PUSH
3718: LD_INT 1
3720: ARRAY
3721: PPUSH
3722: CALL_OW 112
3726: GO 3746
// ComMoveToArea ( escort [ i ] , conv_end ) ;
3728: LD_EXP 2
3732: PUSH
3733: LD_VAR 0 1
3737: ARRAY
3738: PPUSH
3739: LD_INT 9
3741: PPUSH
3742: CALL_OW 113
// end ;
3746: GO 3428
3748: POP
3749: POP
// if FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) then
3750: LD_INT 22
3752: PUSH
3753: LD_INT 6
3755: PUSH
3756: EMPTY
3757: LIST
3758: LIST
3759: PUSH
3760: LD_INT 21
3762: PUSH
3763: LD_INT 1
3765: PUSH
3766: EMPTY
3767: LIST
3768: LIST
3769: PUSH
3770: EMPTY
3771: LIST
3772: LIST
3773: PPUSH
3774: CALL_OW 69
3778: IFFALSE 3897
// for j in FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) do
3780: LD_ADDR_VAR 0 2
3784: PUSH
3785: LD_INT 22
3787: PUSH
3788: LD_INT 6
3790: PUSH
3791: EMPTY
3792: LIST
3793: LIST
3794: PUSH
3795: LD_INT 21
3797: PUSH
3798: LD_INT 1
3800: PUSH
3801: EMPTY
3802: LIST
3803: LIST
3804: PUSH
3805: EMPTY
3806: LIST
3807: LIST
3808: PPUSH
3809: CALL_OW 69
3813: PUSH
3814: FOR_IN
3815: IFFALSE 3895
// begin if not HasTask ( j ) and not IsInArea ( j , conv_end ) then
3817: LD_VAR 0 2
3821: PPUSH
3822: CALL_OW 314
3826: NOT
3827: PUSH
3828: LD_VAR 0 2
3832: PPUSH
3833: LD_INT 9
3835: PPUSH
3836: CALL_OW 308
3840: NOT
3841: AND
3842: IFFALSE 3856
// ComMoveToArea ( j , conv_end ) ;
3844: LD_VAR 0 2
3848: PPUSH
3849: LD_INT 9
3851: PPUSH
3852: CALL_OW 113
// if IsInArea ( j , conv_end ) then
3856: LD_VAR 0 2
3860: PPUSH
3861: LD_INT 9
3863: PPUSH
3864: CALL_OW 308
3868: IFFALSE 3893
// begin safeCounter := safeCounter + 1 ;
3870: LD_ADDR_EXP 15
3874: PUSH
3875: LD_EXP 15
3879: PUSH
3880: LD_INT 1
3882: PLUS
3883: ST_TO_ADDR
// RemoveUnit ( j ) ;
3884: LD_VAR 0 2
3888: PPUSH
3889: CALL_OW 64
// end ; end ;
3893: GO 3814
3895: POP
3896: POP
// end ;
3897: PPOPN 2
3899: END
// every 0 0$01 trigger UnitFilter ( [ escort , conv_squad ] , [ f_side , 3 ] ) do var i ;
3900: LD_EXP 2
3904: PUSH
3905: LD_EXP 1
3909: PUSH
3910: EMPTY
3911: LIST
3912: LIST
3913: PPUSH
3914: LD_INT 22
3916: PUSH
3917: LD_INT 3
3919: PUSH
3920: EMPTY
3921: LIST
3922: LIST
3923: PPUSH
3924: CALL_OW 72
3928: IFFALSE 3990
3930: GO 3932
3932: DISABLE
3933: LD_INT 0
3935: PPUSH
// begin enable ;
3936: ENABLE
// for i in UnitFilter ( [ escort , conv_squad ] , [ f_side , 3 ] ) do
3937: LD_ADDR_VAR 0 1
3941: PUSH
3942: LD_EXP 2
3946: PUSH
3947: LD_EXP 1
3951: PUSH
3952: EMPTY
3953: LIST
3954: LIST
3955: PPUSH
3956: LD_INT 22
3958: PUSH
3959: LD_INT 3
3961: PUSH
3962: EMPTY
3963: LIST
3964: LIST
3965: PPUSH
3966: CALL_OW 72
3970: PUSH
3971: FOR_IN
3972: IFFALSE 3988
// SetSide ( i , 6 ) ;
3974: LD_VAR 0 1
3978: PPUSH
3979: LD_INT 6
3981: PPUSH
3982: CALL_OW 235
3986: GO 3971
3988: POP
3989: POP
// end ; end_of_file
3990: PPOPN 1
3992: END
// export Collins ; export us_alert , us_retreat , us_patrol , us_count ; export function PrepareAmerican ; var i , un , skill , towers ; begin
3993: LD_INT 0
3995: PPUSH
3996: PPUSH
3997: PPUSH
3998: PPUSH
3999: PPUSH
// uc_side := 1 ;
4000: LD_ADDR_OWVAR 20
4004: PUSH
4005: LD_INT 1
4007: ST_TO_ADDR
// uc_nation := 1 ;
4008: LD_ADDR_OWVAR 21
4012: PUSH
4013: LD_INT 1
4015: ST_TO_ADDR
// us_alert := false ;
4016: LD_ADDR_EXP 21
4020: PUSH
4021: LD_INT 0
4023: ST_TO_ADDR
// us_retreat := false ;
4024: LD_ADDR_EXP 22
4028: PUSH
4029: LD_INT 0
4031: ST_TO_ADDR
// us_patrol := false ;
4032: LD_ADDR_EXP 23
4036: PUSH
4037: LD_INT 0
4039: ST_TO_ADDR
// us_count := 0 ;
4040: LD_ADDR_EXP 24
4044: PUSH
4045: LD_INT 0
4047: ST_TO_ADDR
// skill := [ 5 , 6 , 7 ] [ Difficulty ] ;
4048: LD_ADDR_VAR 0 4
4052: PUSH
4053: LD_INT 5
4055: PUSH
4056: LD_INT 6
4058: PUSH
4059: LD_INT 7
4061: PUSH
4062: EMPTY
4063: LIST
4064: LIST
4065: LIST
4066: PUSH
4067: LD_OWVAR 67
4071: ARRAY
4072: ST_TO_ADDR
// hc_class := 1 ;
4073: LD_ADDR_OWVAR 28
4077: PUSH
4078: LD_INT 1
4080: ST_TO_ADDR
// hc_sex := sex_male ;
4081: LD_ADDR_OWVAR 27
4085: PUSH
4086: LD_INT 1
4088: ST_TO_ADDR
// hc_skills := [ 6 , 3 , 4 , 2 ] ;
4089: LD_ADDR_OWVAR 31
4093: PUSH
4094: LD_INT 6
4096: PUSH
4097: LD_INT 3
4099: PUSH
4100: LD_INT 4
4102: PUSH
4103: LD_INT 2
4105: PUSH
4106: EMPTY
4107: LIST
4108: LIST
4109: LIST
4110: LIST
4111: ST_TO_ADDR
// hc_name := Jack Collins ;
4112: LD_ADDR_OWVAR 26
4116: PUSH
4117: LD_STRING Jack Collins
4119: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
4120: LD_ADDR_OWVAR 29
4124: PUSH
4125: LD_INT 11
4127: PUSH
4128: LD_INT 11
4130: PUSH
4131: EMPTY
4132: LIST
4133: LIST
4134: ST_TO_ADDR
// hc_gallery :=  ;
4135: LD_ADDR_OWVAR 33
4139: PUSH
4140: LD_STRING 
4142: ST_TO_ADDR
// Collins := CreateHuman ;
4143: LD_ADDR_EXP 20
4147: PUSH
4148: CALL_OW 44
4152: ST_TO_ADDR
// PlaceHumanInUnit ( Collins , us_depot ) ;
4153: LD_EXP 20
4157: PPUSH
4158: LD_INT 50
4160: PPUSH
4161: CALL_OW 52
// hc_name :=  ;
4165: LD_ADDR_OWVAR 26
4169: PUSH
4170: LD_STRING 
4172: ST_TO_ADDR
// if Difficulty > 1 then
4173: LD_OWVAR 67
4177: PUSH
4178: LD_INT 1
4180: GREATER
4181: IFFALSE 4235
// begin bc_type := b_bunker ;
4183: LD_ADDR_OWVAR 42
4187: PUSH
4188: LD_INT 32
4190: ST_TO_ADDR
// bc_level := 5 ;
4191: LD_ADDR_OWVAR 43
4195: PUSH
4196: LD_INT 5
4198: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 40 , 33 , 2 ) ;
4199: LD_INT 40
4201: PPUSH
4202: LD_INT 33
4204: PPUSH
4205: LD_INT 2
4207: PPUSH
4208: CALL_OW 47
// if Difficulty > 2 then
4212: LD_OWVAR 67
4216: PUSH
4217: LD_INT 2
4219: GREATER
4220: IFFALSE 4235
// CreateAndPlaceBuildingXYD ( 41 , 42 , 0 ) ;
4222: LD_INT 41
4224: PPUSH
4225: LD_INT 42
4227: PPUSH
4228: LD_INT 0
4230: PPUSH
4231: CALL_OW 47
// end ; PrepareHuman ( false , 2 , skill ) ;
4235: LD_INT 0
4237: PPUSH
4238: LD_INT 2
4240: PPUSH
4241: LD_VAR 0 4
4245: PPUSH
4246: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , us_depot ) ;
4250: CALL_OW 44
4254: PPUSH
4255: LD_INT 50
4257: PPUSH
4258: CALL_OW 52
// PrepareHuman ( false , 3 , skill ) ;
4262: LD_INT 0
4264: PPUSH
4265: LD_INT 3
4267: PPUSH
4268: LD_VAR 0 4
4272: PPUSH
4273: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , us_fac ) ;
4277: CALL_OW 44
4281: PPUSH
4282: LD_INT 56
4284: PPUSH
4285: CALL_OW 52
// PlaceHumanInUnit ( CreateHuman , us_fac ) ;
4289: CALL_OW 44
4293: PPUSH
4294: LD_INT 56
4296: PPUSH
4297: CALL_OW 52
// PrepareHuman ( false , 4 , skill ) ;
4301: LD_INT 0
4303: PPUSH
4304: LD_INT 4
4306: PPUSH
4307: LD_VAR 0 4
4311: PPUSH
4312: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , us_lab ) ;
4316: CALL_OW 44
4320: PPUSH
4321: LD_INT 63
4323: PPUSH
4324: CALL_OW 52
// PrepareHuman ( false , 1 , skill ) ;
4328: LD_INT 0
4330: PPUSH
4331: LD_INT 1
4333: PPUSH
4334: LD_VAR 0 4
4338: PPUSH
4339: CALL_OW 380
// un := CreateHuman ;
4343: LD_ADDR_VAR 0 3
4347: PUSH
4348: CALL_OW 44
4352: ST_TO_ADDR
// SetDir ( un , 4 ) ;
4353: LD_VAR 0 3
4357: PPUSH
4358: LD_INT 4
4360: PPUSH
4361: CALL_OW 233
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) [ 1 ] ) ;
4365: LD_VAR 0 3
4369: PPUSH
4370: LD_INT 22
4372: PUSH
4373: LD_INT 1
4375: PUSH
4376: EMPTY
4377: LIST
4378: LIST
4379: PUSH
4380: LD_INT 30
4382: PUSH
4383: LD_INT 31
4385: PUSH
4386: EMPTY
4387: LIST
4388: LIST
4389: PUSH
4390: EMPTY
4391: LIST
4392: LIST
4393: PPUSH
4394: CALL_OW 69
4398: PUSH
4399: LD_INT 1
4401: ARRAY
4402: PPUSH
4403: CALL_OW 52
// towers := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) ;
4407: LD_ADDR_VAR 0 5
4411: PUSH
4412: LD_INT 22
4414: PUSH
4415: LD_INT 1
4417: PUSH
4418: EMPTY
4419: LIST
4420: LIST
4421: PUSH
4422: LD_INT 30
4424: PUSH
4425: LD_INT 32
4427: PUSH
4428: EMPTY
4429: LIST
4430: LIST
4431: PUSH
4432: EMPTY
4433: LIST
4434: LIST
4435: PPUSH
4436: CALL_OW 69
4440: ST_TO_ADDR
// for i in towers do
4441: LD_ADDR_VAR 0 2
4445: PUSH
4446: LD_VAR 0 5
4450: PUSH
4451: FOR_IN
4452: IFFALSE 4520
// begin PrepareHuman ( false , 1 , skill ) ;
4454: LD_INT 0
4456: PPUSH
4457: LD_INT 1
4459: PPUSH
4460: LD_VAR 0 4
4464: PPUSH
4465: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
4469: CALL_OW 44
4473: PPUSH
4474: LD_VAR 0 2
4478: PPUSH
4479: CALL_OW 52
// PlaceWeaponTurret ( i , [ us_gatling_gun , us_light_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
4483: LD_VAR 0 2
4487: PPUSH
4488: LD_INT 4
4490: PUSH
4491: LD_INT 3
4493: PUSH
4494: LD_INT 5
4496: PUSH
4497: EMPTY
4498: LIST
4499: LIST
4500: LIST
4501: PUSH
4502: LD_INT 1
4504: PPUSH
4505: LD_INT 3
4507: PPUSH
4508: CALL_OW 12
4512: ARRAY
4513: PPUSH
4514: CALL_OW 431
// end ;
4518: GO 4451
4520: POP
4521: POP
// PrepareHuman ( false , 1 , skill ) ;
4522: LD_INT 0
4524: PPUSH
4525: LD_INT 1
4527: PPUSH
4528: LD_VAR 0 4
4532: PPUSH
4533: CALL_OW 380
// us_patrol := CreateHuman ;
4537: LD_ADDR_EXP 23
4541: PUSH
4542: CALL_OW 44
4546: ST_TO_ADDR
// PlaceUnitXY ( us_patrol , 12 , 5 , false ) ;
4547: LD_EXP 23
4551: PPUSH
4552: LD_INT 12
4554: PPUSH
4555: LD_INT 5
4557: PPUSH
4558: LD_INT 0
4560: PPUSH
4561: CALL_OW 48
// end ;
4565: LD_VAR 0 1
4569: RET
// every 0 0$01 trigger us_count >= [ 3 , 4 , 5 ] [ Difficulty ] do
4570: LD_EXP 24
4574: PUSH
4575: LD_INT 3
4577: PUSH
4578: LD_INT 4
4580: PUSH
4581: LD_INT 5
4583: PUSH
4584: EMPTY
4585: LIST
4586: LIST
4587: LIST
4588: PUSH
4589: LD_OWVAR 67
4593: ARRAY
4594: GREATEREQUAL
4595: IFFALSE 4620
4597: GO 4599
4599: DISABLE
// begin Say ( Collins , DPM_C2 ) ;
4600: LD_EXP 20
4604: PPUSH
4605: LD_STRING DPM_C2
4607: PPUSH
4608: CALL_OW 88
// us_retreat := true ;
4612: LD_ADDR_EXP 22
4616: PUSH
4617: LD_INT 1
4619: ST_TO_ADDR
// end ;
4620: END
// every 10 10$00 trigger not us_alert do var R ;
4621: LD_EXP 21
4625: NOT
4626: IFFALSE 4700
4628: GO 4630
4630: DISABLE
4631: LD_INT 0
4633: PPUSH
// begin uc_side := 1 ;
4634: LD_ADDR_OWVAR 20
4638: PUSH
4639: LD_INT 1
4641: ST_TO_ADDR
// uc_nation := 1 ;
4642: LD_ADDR_OWVAR 21
4646: PUSH
4647: LD_INT 1
4649: ST_TO_ADDR
// PrepareHuman ( false , 1 , 0 ) ;
4650: LD_INT 0
4652: PPUSH
4653: LD_INT 1
4655: PPUSH
4656: LD_INT 0
4658: PPUSH
4659: CALL_OW 380
// R := CreateHuman ;
4663: LD_ADDR_VAR 0 1
4667: PUSH
4668: CALL_OW 44
4672: ST_TO_ADDR
// SayRadio ( R , DPM_R1 ) ;
4673: LD_VAR 0 1
4677: PPUSH
4678: LD_STRING DPM_R1
4680: PPUSH
4681: CALL_OW 94
// Wait ( 0 0$03 ) ;
4685: LD_INT 105
4687: PPUSH
4688: CALL_OW 67
// us_retreat := true ;
4692: LD_ADDR_EXP 22
4696: PUSH
4697: LD_INT 1
4699: ST_TO_ADDR
// end ;
4700: PPOPN 1
4702: END
// every 0 0$01 trigger us_alert do var i ;
4703: LD_EXP 21
4707: IFFALSE 4967
4709: GO 4711
4711: DISABLE
4712: LD_INT 0
4714: PPUSH
// begin Say ( Collins , DPM_C1 ) ;
4715: LD_EXP 20
4719: PPUSH
4720: LD_STRING DPM_C1
4722: PPUSH
4723: CALL_OW 88
// if UnitsInside ( us_fac ) then
4727: LD_INT 56
4729: PPUSH
4730: CALL_OW 313
4734: IFFALSE 4789
// for i in UnitsInside ( us_fac ) do
4736: LD_ADDR_VAR 0 1
4740: PUSH
4741: LD_INT 56
4743: PPUSH
4744: CALL_OW 313
4748: PUSH
4749: FOR_IN
4750: IFFALSE 4787
// begin ComExitBuilding ( i ) ;
4752: LD_VAR 0 1
4756: PPUSH
4757: CALL_OW 122
// AddComEnterUnit ( i , us_arm ) ;
4761: LD_VAR 0 1
4765: PPUSH
4766: LD_INT 69
4768: PPUSH
4769: CALL_OW 180
// AddComChangeProfession ( i , 1 ) ;
4773: LD_VAR 0 1
4777: PPUSH
4778: LD_INT 1
4780: PPUSH
4781: CALL_OW 183
// end ;
4785: GO 4749
4787: POP
4788: POP
// ComExitBuilding ( Collins ) ;
4789: LD_EXP 20
4793: PPUSH
4794: CALL_OW 122
// AddComEnterUnit ( Collins , us_arm ) ;
4798: LD_EXP 20
4802: PPUSH
4803: LD_INT 69
4805: PPUSH
4806: CALL_OW 180
// ComExitBuilding ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) [ 1 ] ) ;
4810: LD_INT 22
4812: PUSH
4813: LD_INT 1
4815: PUSH
4816: EMPTY
4817: LIST
4818: LIST
4819: PUSH
4820: LD_INT 25
4822: PUSH
4823: LD_INT 2
4825: PUSH
4826: EMPTY
4827: LIST
4828: LIST
4829: PUSH
4830: EMPTY
4831: LIST
4832: LIST
4833: PPUSH
4834: CALL_OW 69
4838: PUSH
4839: LD_INT 1
4841: ARRAY
4842: PPUSH
4843: CALL_OW 122
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) [ 1 ] , 67 , 52 ) ;
4847: LD_INT 22
4849: PUSH
4850: LD_INT 1
4852: PUSH
4853: EMPTY
4854: LIST
4855: LIST
4856: PUSH
4857: LD_INT 25
4859: PUSH
4860: LD_INT 2
4862: PUSH
4863: EMPTY
4864: LIST
4865: LIST
4866: PUSH
4867: EMPTY
4868: LIST
4869: LIST
4870: PPUSH
4871: CALL_OW 69
4875: PUSH
4876: LD_INT 1
4878: ARRAY
4879: PPUSH
4880: LD_INT 67
4882: PPUSH
4883: LD_INT 52
4885: PPUSH
4886: CALL_OW 171
// ComExitBuilding ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) [ 1 ] ) ;
4890: LD_INT 22
4892: PUSH
4893: LD_INT 1
4895: PUSH
4896: EMPTY
4897: LIST
4898: LIST
4899: PUSH
4900: LD_INT 25
4902: PUSH
4903: LD_INT 4
4905: PUSH
4906: EMPTY
4907: LIST
4908: LIST
4909: PUSH
4910: EMPTY
4911: LIST
4912: LIST
4913: PPUSH
4914: CALL_OW 69
4918: PUSH
4919: LD_INT 1
4921: ARRAY
4922: PPUSH
4923: CALL_OW 122
// AddComEnterUnit ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) [ 1 ] , us_arm ) ;
4927: LD_INT 22
4929: PUSH
4930: LD_INT 1
4932: PUSH
4933: EMPTY
4934: LIST
4935: LIST
4936: PUSH
4937: LD_INT 25
4939: PUSH
4940: LD_INT 4
4942: PUSH
4943: EMPTY
4944: LIST
4945: LIST
4946: PUSH
4947: EMPTY
4948: LIST
4949: LIST
4950: PPUSH
4951: CALL_OW 69
4955: PUSH
4956: LD_INT 1
4958: ARRAY
4959: PPUSH
4960: LD_INT 69
4962: PPUSH
4963: CALL_OW 180
// end ;
4967: PPOPN 1
4969: END
// every 3 3$00 trigger not us_alert and GetSide ( us_fac ) = 1 do
4970: LD_EXP 21
4974: NOT
4975: PUSH
4976: LD_INT 56
4978: PPUSH
4979: CALL_OW 255
4983: PUSH
4984: LD_INT 1
4986: EQUAL
4987: AND
4988: IFFALSE 5031
4990: GO 4992
4992: DISABLE
// begin AddComConstruct ( us_fac , us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun ) ;
4993: LD_INT 56
4995: PPUSH
4996: LD_INT 2
4998: PPUSH
4999: LD_INT 1
5001: PPUSH
5002: LD_INT 1
5004: PPUSH
5005: LD_INT 4
5007: PPUSH
5008: CALL_OW 185
// AddComConstruct ( us_fac , us_medium_tracked , engine_solar , control_manual , us_double_gun ) ;
5012: LD_INT 56
5014: PPUSH
5015: LD_INT 3
5017: PPUSH
5018: LD_INT 2
5020: PPUSH
5021: LD_INT 1
5023: PPUSH
5024: LD_INT 5
5026: PPUSH
5027: CALL_OW 185
// end ;
5031: END
// every 0 0$01 trigger us_patrol do
5032: LD_EXP 23
5036: IFFALSE 5084
5038: GO 5040
5040: DISABLE
// SetPatrol ( us_patrol , [ 12 , 5 , 56 , 4 , 94 , 34 , 92 , 108 ] ) ;
5041: LD_EXP 23
5045: PPUSH
5046: LD_INT 12
5048: PUSH
5049: LD_INT 5
5051: PUSH
5052: LD_INT 56
5054: PUSH
5055: LD_INT 4
5057: PUSH
5058: LD_INT 94
5060: PUSH
5061: LD_INT 34
5063: PUSH
5064: LD_INT 92
5066: PUSH
5067: LD_INT 108
5069: PUSH
5070: EMPTY
5071: LIST
5072: LIST
5073: LIST
5074: LIST
5075: LIST
5076: LIST
5077: LIST
5078: LIST
5079: PPUSH
5080: CALL 5085 0 2
5084: END
// export function SetPatrol ( un , points ) ; var s , i , turn ; begin
5085: LD_INT 0
5087: PPUSH
5088: PPUSH
5089: PPUSH
5090: PPUSH
// s = 1 ;
5091: LD_ADDR_VAR 0 4
5095: PUSH
5096: LD_INT 1
5098: ST_TO_ADDR
// turn := true ;
5099: LD_ADDR_VAR 0 6
5103: PUSH
5104: LD_INT 1
5106: ST_TO_ADDR
// while ( un and not us_alert ) do
5107: LD_VAR 0 1
5111: PUSH
5112: LD_EXP 21
5116: NOT
5117: AND
5118: IFFALSE 5297
// begin wait ( 35 ) ;
5120: LD_INT 35
5122: PPUSH
5123: CALL_OW 67
// if not HasTask ( un ) then
5127: LD_VAR 0 1
5131: PPUSH
5132: CALL_OW 314
5136: NOT
5137: IFFALSE 5256
// begin ComMoveXY ( un , points [ s ] , points [ s + 1 ] ) ;
5139: LD_VAR 0 1
5143: PPUSH
5144: LD_VAR 0 2
5148: PUSH
5149: LD_VAR 0 4
5153: ARRAY
5154: PPUSH
5155: LD_VAR 0 2
5159: PUSH
5160: LD_VAR 0 4
5164: PUSH
5165: LD_INT 1
5167: PLUS
5168: ARRAY
5169: PPUSH
5170: CALL_OW 111
// if s + 2 > points then
5174: LD_VAR 0 4
5178: PUSH
5179: LD_INT 2
5181: PLUS
5182: PUSH
5183: LD_VAR 0 2
5187: GREATER
5188: IFFALSE 5198
// turn := false ;
5190: LD_ADDR_VAR 0 6
5194: PUSH
5195: LD_INT 0
5197: ST_TO_ADDR
// if s - 2 < 1 then
5198: LD_VAR 0 4
5202: PUSH
5203: LD_INT 2
5205: MINUS
5206: PUSH
5207: LD_INT 1
5209: LESS
5210: IFFALSE 5220
// turn := true ;
5212: LD_ADDR_VAR 0 6
5216: PUSH
5217: LD_INT 1
5219: ST_TO_ADDR
// if turn then
5220: LD_VAR 0 6
5224: IFFALSE 5242
// s := s + 2 else
5226: LD_ADDR_VAR 0 4
5230: PUSH
5231: LD_VAR 0 4
5235: PUSH
5236: LD_INT 2
5238: PLUS
5239: ST_TO_ADDR
5240: GO 5256
// s := s - 2 ;
5242: LD_ADDR_VAR 0 4
5246: PUSH
5247: LD_VAR 0 4
5251: PUSH
5252: LD_INT 2
5254: MINUS
5255: ST_TO_ADDR
// end ; if GetLives ( un ) < 1000 or See ( 3 , un ) then
5256: LD_VAR 0 1
5260: PPUSH
5261: CALL_OW 256
5265: PUSH
5266: LD_INT 1000
5268: LESS
5269: PUSH
5270: LD_INT 3
5272: PPUSH
5273: LD_VAR 0 1
5277: PPUSH
5278: CALL_OW 292
5282: OR
5283: IFFALSE 5295
// begin us_alert := true ;
5285: LD_ADDR_EXP 21
5289: PUSH
5290: LD_INT 1
5292: ST_TO_ADDR
// break ;
5293: GO 5297
// end ; end ;
5295: GO 5107
// ComEnterUnit ( un , us_arm ) ;
5297: LD_VAR 0 1
5301: PPUSH
5302: LD_INT 69
5304: PPUSH
5305: CALL_OW 120
// end ;
5309: LD_VAR 0 3
5313: RET
// every 0 0$01 trigger us_retreat do var i , point ;
5314: LD_EXP 22
5318: IFFALSE 5493
5320: GO 5322
5322: DISABLE
5323: LD_INT 0
5325: PPUSH
5326: PPUSH
// begin point := false ;
5327: LD_ADDR_VAR 0 2
5331: PUSH
5332: LD_INT 0
5334: ST_TO_ADDR
// if FilterUnitsInArea ( zone1 , [ f_side , 3 ] ) = 0 then
5335: LD_INT 5
5337: PPUSH
5338: LD_INT 22
5340: PUSH
5341: LD_INT 3
5343: PUSH
5344: EMPTY
5345: LIST
5346: LIST
5347: PPUSH
5348: CALL_OW 70
5352: PUSH
5353: LD_INT 0
5355: EQUAL
5356: IFFALSE 5368
// point := us_ret1 else
5358: LD_ADDR_VAR 0 2
5362: PUSH
5363: LD_INT 3
5365: ST_TO_ADDR
5366: GO 5409
// if FilterUnitsInArea ( zone1 , [ f_side , 3 ] ) = 0 then
5368: LD_INT 5
5370: PPUSH
5371: LD_INT 22
5373: PUSH
5374: LD_INT 3
5376: PUSH
5377: EMPTY
5378: LIST
5379: LIST
5380: PPUSH
5381: CALL_OW 70
5385: PUSH
5386: LD_INT 0
5388: EQUAL
5389: IFFALSE 5401
// point := us_ret2 else
5391: LD_ADDR_VAR 0 2
5395: PUSH
5396: LD_INT 2
5398: ST_TO_ADDR
5399: GO 5409
// point := us_ret3 ;
5401: LD_ADDR_VAR 0 2
5405: PUSH
5406: LD_INT 4
5408: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
5409: LD_ADDR_VAR 0 1
5413: PUSH
5414: LD_INT 22
5416: PUSH
5417: LD_INT 1
5419: PUSH
5420: EMPTY
5421: LIST
5422: LIST
5423: PUSH
5424: LD_INT 21
5426: PUSH
5427: LD_INT 1
5429: PUSH
5430: EMPTY
5431: LIST
5432: LIST
5433: PUSH
5434: EMPTY
5435: LIST
5436: LIST
5437: PPUSH
5438: CALL_OW 69
5442: PUSH
5443: FOR_IN
5444: IFFALSE 5491
// begin if IsInUnit ( i ) then
5446: LD_VAR 0 1
5450: PPUSH
5451: CALL_OW 310
5455: IFFALSE 5475
// begin ComExitBuilding ( i ) ;
5457: LD_VAR 0 1
5461: PPUSH
5462: CALL_OW 122
// ComExitVehicle ( i ) ;
5466: LD_VAR 0 1
5470: PPUSH
5471: CALL_OW 121
// end ; AddComMoveToArea ( i , point ) ;
5475: LD_VAR 0 1
5479: PPUSH
5480: LD_VAR 0 2
5484: PPUSH
5485: CALL_OW 173
// end ;
5489: GO 5443
5491: POP
5492: POP
// end ;
5493: PPOPN 2
5495: END
// every 10 trigger us_retreat and FilterUnitsInArea ( us_ret1 , [ f_side , 1 ] ) do
5496: LD_EXP 22
5500: PUSH
5501: LD_INT 3
5503: PPUSH
5504: LD_INT 22
5506: PUSH
5507: LD_INT 1
5509: PUSH
5510: EMPTY
5511: LIST
5512: LIST
5513: PPUSH
5514: CALL_OW 70
5518: AND
5519: IFFALSE 5565
5521: GO 5523
5523: DISABLE
// begin enable ;
5524: ENABLE
// RemoveUnit ( FilterUnitsInArea ( us_ret1 , [ f_side , 1 ] ) [ 1 ] ) ;
5525: LD_INT 3
5527: PPUSH
5528: LD_INT 22
5530: PUSH
5531: LD_INT 1
5533: PUSH
5534: EMPTY
5535: LIST
5536: LIST
5537: PPUSH
5538: CALL_OW 70
5542: PUSH
5543: LD_INT 1
5545: ARRAY
5546: PPUSH
5547: CALL_OW 64
// if medal1 then
5551: LD_EXP 3
5555: IFFALSE 5565
// medal1 := false ;
5557: LD_ADDR_EXP 3
5561: PUSH
5562: LD_INT 0
5564: ST_TO_ADDR
// end ;
5565: END
// every 10 trigger us_retreat and FilterUnitsInArea ( us_ret2 , [ f_side , 1 ] ) do
5566: LD_EXP 22
5570: PUSH
5571: LD_INT 2
5573: PPUSH
5574: LD_INT 22
5576: PUSH
5577: LD_INT 1
5579: PUSH
5580: EMPTY
5581: LIST
5582: LIST
5583: PPUSH
5584: CALL_OW 70
5588: AND
5589: IFFALSE 5635
5591: GO 5593
5593: DISABLE
// begin enable ;
5594: ENABLE
// RemoveUnit ( FilterUnitsInArea ( us_ret2 , [ f_side , 1 ] ) [ 1 ] ) ;
5595: LD_INT 2
5597: PPUSH
5598: LD_INT 22
5600: PUSH
5601: LD_INT 1
5603: PUSH
5604: EMPTY
5605: LIST
5606: LIST
5607: PPUSH
5608: CALL_OW 70
5612: PUSH
5613: LD_INT 1
5615: ARRAY
5616: PPUSH
5617: CALL_OW 64
// if medal1 then
5621: LD_EXP 3
5625: IFFALSE 5635
// medal1 := false ;
5627: LD_ADDR_EXP 3
5631: PUSH
5632: LD_INT 0
5634: ST_TO_ADDR
// end ;
5635: END
// every 10 trigger us_retreat and FilterUnitsInArea ( us_ret3 , [ f_side , 1 ] ) do
5636: LD_EXP 22
5640: PUSH
5641: LD_INT 4
5643: PPUSH
5644: LD_INT 22
5646: PUSH
5647: LD_INT 1
5649: PUSH
5650: EMPTY
5651: LIST
5652: LIST
5653: PPUSH
5654: CALL_OW 70
5658: AND
5659: IFFALSE 5705
5661: GO 5663
5663: DISABLE
// begin enable ;
5664: ENABLE
// RemoveUnit ( FilterUnitsInArea ( us_ret3 , [ f_side , 1 ] ) [ 1 ] ) ;
5665: LD_INT 4
5667: PPUSH
5668: LD_INT 22
5670: PUSH
5671: LD_INT 1
5673: PUSH
5674: EMPTY
5675: LIST
5676: LIST
5677: PPUSH
5678: CALL_OW 70
5682: PUSH
5683: LD_INT 1
5685: ARRAY
5686: PPUSH
5687: CALL_OW 64
// if medal1 then
5691: LD_EXP 3
5695: IFFALSE 5705
// medal1 := false ;
5697: LD_ADDR_EXP 3
5701: PUSH
5702: LD_INT 0
5704: ST_TO_ADDR
// end ;
5705: END
// every 0 0$03 trigger FilterAllUnits ( [ f_side , 1 ] ) = 0 do
5706: LD_INT 22
5708: PUSH
5709: LD_INT 1
5711: PUSH
5712: EMPTY
5713: LIST
5714: LIST
5715: PPUSH
5716: CALL_OW 69
5720: PUSH
5721: LD_INT 0
5723: EQUAL
5724: IFFALSE 5737
5726: GO 5728
5728: DISABLE
// us_retreat := false ;
5729: LD_ADDR_EXP 22
5733: PUSH
5734: LD_INT 0
5736: ST_TO_ADDR
5737: END
// export function CounterAttack ; var i , j , un , skill ; begin
5738: LD_INT 0
5740: PPUSH
5741: PPUSH
5742: PPUSH
5743: PPUSH
5744: PPUSH
// uc_side := 1 ;
5745: LD_ADDR_OWVAR 20
5749: PUSH
5750: LD_INT 1
5752: ST_TO_ADDR
// uc_nation := 1 ;
5753: LD_ADDR_OWVAR 21
5757: PUSH
5758: LD_INT 1
5760: ST_TO_ADDR
// skill := [ 4 , 5 , 5 ] [ Difficulty ] ;
5761: LD_ADDR_VAR 0 5
5765: PUSH
5766: LD_INT 4
5768: PUSH
5769: LD_INT 5
5771: PUSH
5772: LD_INT 5
5774: PUSH
5775: EMPTY
5776: LIST
5777: LIST
5778: LIST
5779: PUSH
5780: LD_OWVAR 67
5784: ARRAY
5785: ST_TO_ADDR
// for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
5786: LD_ADDR_VAR 0 2
5790: PUSH
5791: DOUBLE
5792: LD_INT 1
5794: DEC
5795: ST_TO_ADDR
5796: LD_INT 4
5798: PUSH
5799: LD_INT 5
5801: PUSH
5802: LD_INT 6
5804: PUSH
5805: EMPTY
5806: LIST
5807: LIST
5808: LIST
5809: PUSH
5810: LD_OWVAR 67
5814: ARRAY
5815: PUSH
5816: FOR_TO
5817: IFFALSE 6017
// begin vc_chassis := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked ] [ Rand ( 1 , 3 ) ] ;
5819: LD_ADDR_OWVAR 37
5823: PUSH
5824: LD_INT 2
5826: PUSH
5827: LD_INT 3
5829: PUSH
5830: LD_INT 4
5832: PUSH
5833: EMPTY
5834: LIST
5835: LIST
5836: LIST
5837: PUSH
5838: LD_INT 1
5840: PPUSH
5841: LD_INT 3
5843: PPUSH
5844: CALL_OW 12
5848: ARRAY
5849: ST_TO_ADDR
// vc_engine := engine_combustion ;
5850: LD_ADDR_OWVAR 39
5854: PUSH
5855: LD_INT 1
5857: ST_TO_ADDR
// vc_control := control_manual ;
5858: LD_ADDR_OWVAR 38
5862: PUSH
5863: LD_INT 1
5865: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_double_gun , us_light_gun ] [ Rand ( 1 , 3 ) ] ;
5866: LD_ADDR_OWVAR 40
5870: PUSH
5871: LD_INT 4
5873: PUSH
5874: LD_INT 5
5876: PUSH
5877: LD_INT 3
5879: PUSH
5880: EMPTY
5881: LIST
5882: LIST
5883: LIST
5884: PUSH
5885: LD_INT 1
5887: PPUSH
5888: LD_INT 3
5890: PPUSH
5891: CALL_OW 12
5895: ARRAY
5896: ST_TO_ADDR
// vc_fuel_battery := Rand ( 88 , 99 ) ;
5897: LD_ADDR_OWVAR 41
5901: PUSH
5902: LD_INT 88
5904: PPUSH
5905: LD_INT 99
5907: PPUSH
5908: CALL_OW 12
5912: ST_TO_ADDR
// un := CreateVehicle ;
5913: LD_ADDR_VAR 0 4
5917: PUSH
5918: CALL_OW 45
5922: ST_TO_ADDR
// PlaceUnitXY ( un , 64 , 117 , false ) ;
5923: LD_VAR 0 4
5927: PPUSH
5928: LD_INT 64
5930: PPUSH
5931: LD_INT 117
5933: PPUSH
5934: LD_INT 0
5936: PPUSH
5937: CALL_OW 48
// PrepareHuman ( false , 3 , skill ) ;
5941: LD_INT 0
5943: PPUSH
5944: LD_INT 3
5946: PPUSH
5947: LD_VAR 0 5
5951: PPUSH
5952: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
5956: CALL_OW 44
5960: PPUSH
5961: LD_VAR 0 4
5965: PPUSH
5966: CALL_OW 52
// us_force := Insert ( us_force , 1 , un ) ;
5970: LD_ADDR_EXP 12
5974: PUSH
5975: LD_EXP 12
5979: PPUSH
5980: LD_INT 1
5982: PPUSH
5983: LD_VAR 0 4
5987: PPUSH
5988: CALL_OW 2
5992: ST_TO_ADDR
// ComMoveXY ( un , 60 , 109 ) ;
5993: LD_VAR 0 4
5997: PPUSH
5998: LD_INT 60
6000: PPUSH
6001: LD_INT 109
6003: PPUSH
6004: CALL_OW 111
// Wait ( 0 0$02 ) ;
6008: LD_INT 70
6010: PPUSH
6011: CALL_OW 67
// end ;
6015: GO 5816
6017: POP
6018: POP
// RemoveSeeing ( 62 , 113 , 3 ) ;
6019: LD_INT 62
6021: PPUSH
6022: LD_INT 113
6024: PPUSH
6025: LD_INT 3
6027: PPUSH
6028: CALL_OW 331
// while ( FilterAllUnits ( [ f_side , 1 ] ) ) do
6032: LD_INT 22
6034: PUSH
6035: LD_INT 1
6037: PUSH
6038: EMPTY
6039: LIST
6040: LIST
6041: PPUSH
6042: CALL_OW 69
6046: IFFALSE 6247
// begin Wait ( 0 0$01 ) ;
6048: LD_INT 35
6050: PPUSH
6051: CALL_OW 67
// for i = 1 to us_force do
6055: LD_ADDR_VAR 0 2
6059: PUSH
6060: DOUBLE
6061: LD_INT 1
6063: DEC
6064: ST_TO_ADDR
6065: LD_EXP 12
6069: PUSH
6070: FOR_TO
6071: IFFALSE 6106
// ComAttackUnit ( us_force [ i ] , FindTarget ( us_force [ i ] ) ) ;
6073: LD_EXP 12
6077: PUSH
6078: LD_VAR 0 2
6082: ARRAY
6083: PPUSH
6084: LD_EXP 12
6088: PUSH
6089: LD_VAR 0 2
6093: ARRAY
6094: PPUSH
6095: CALL 10500 0 1
6099: PPUSH
6100: CALL_OW 115
6104: GO 6070
6106: POP
6107: POP
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 3 ] , [ f_not , [ f_driving ] ] ] ) then
6108: LD_INT 22
6110: PUSH
6111: LD_INT 1
6113: PUSH
6114: EMPTY
6115: LIST
6116: LIST
6117: PUSH
6118: LD_INT 25
6120: PUSH
6121: LD_INT 3
6123: PUSH
6124: EMPTY
6125: LIST
6126: LIST
6127: PUSH
6128: LD_INT 3
6130: PUSH
6131: LD_INT 55
6133: PUSH
6134: EMPTY
6135: LIST
6136: PUSH
6137: EMPTY
6138: LIST
6139: LIST
6140: PUSH
6141: EMPTY
6142: LIST
6143: LIST
6144: LIST
6145: PPUSH
6146: CALL_OW 69
6150: IFFALSE 6245
// for j in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 3 ] , [ f_not , [ f_driving ] ] ] ) do
6152: LD_ADDR_VAR 0 3
6156: PUSH
6157: LD_INT 22
6159: PUSH
6160: LD_INT 1
6162: PUSH
6163: EMPTY
6164: LIST
6165: LIST
6166: PUSH
6167: LD_INT 25
6169: PUSH
6170: LD_INT 3
6172: PUSH
6173: EMPTY
6174: LIST
6175: LIST
6176: PUSH
6177: LD_INT 3
6179: PUSH
6180: LD_INT 55
6182: PUSH
6183: EMPTY
6184: LIST
6185: PUSH
6186: EMPTY
6187: LIST
6188: LIST
6189: PUSH
6190: EMPTY
6191: LIST
6192: LIST
6193: LIST
6194: PPUSH
6195: CALL_OW 69
6199: PUSH
6200: FOR_IN
6201: IFFALSE 6243
// if not IsInArea ( j , conv_end ) then
6203: LD_VAR 0 3
6207: PPUSH
6208: LD_INT 9
6210: PPUSH
6211: CALL_OW 308
6215: NOT
6216: IFFALSE 6232
// ComMoveToArea ( j , conv_end ) else
6218: LD_VAR 0 3
6222: PPUSH
6223: LD_INT 9
6225: PPUSH
6226: CALL_OW 113
6230: GO 6241
// RemoveUnit ( j ) ;
6232: LD_VAR 0 3
6236: PPUSH
6237: CALL_OW 64
6241: GO 6200
6243: POP
6244: POP
// end ;
6245: GO 6032
// end ; end_of_file
6247: LD_VAR 0 1
6251: RET
// export function PrepareArabian ; begin
6252: LD_INT 0
6254: PPUSH
// RobertFarmer ;
6255: CALL 6276 0 0
// PrepareHovercrafts ;
6259: CALL 7150 0 0
// ar_attacks := true ;
6263: LD_ADDR_EXP 10
6267: PUSH
6268: LD_INT 1
6270: ST_TO_ADDR
// end ;
6271: LD_VAR 0 1
6275: RET
// export Farmer ; export function RobertFarmer ; begin
6276: LD_INT 0
6278: PPUSH
// uc_side := 2 ;
6279: LD_ADDR_OWVAR 20
6283: PUSH
6284: LD_INT 2
6286: ST_TO_ADDR
// uc_nation := 2 ;
6287: LD_ADDR_OWVAR 21
6291: PUSH
6292: LD_INT 2
6294: ST_TO_ADDR
// Farmer := NewCharacter ( Farmer ) ;
6295: LD_ADDR_EXP 25
6299: PUSH
6300: LD_STRING Farmer
6302: PPUSH
6303: CALL_OW 25
6307: ST_TO_ADDR
// SayRadio ( Farmer , DPM_F1 ) ;
6308: LD_EXP 25
6312: PPUSH
6313: LD_STRING DPM_F1
6315: PPUSH
6316: CALL_OW 94
// end ;
6320: LD_VAR 0 1
6324: RET
// export function PrepareAttack ( type ) ; var i , un , veh , skill ; begin
6325: LD_INT 0
6327: PPUSH
6328: PPUSH
6329: PPUSH
6330: PPUSH
6331: PPUSH
// uc_side := 2 ;
6332: LD_ADDR_OWVAR 20
6336: PUSH
6337: LD_INT 2
6339: ST_TO_ADDR
// uc_nation := 2 ;
6340: LD_ADDR_OWVAR 21
6344: PUSH
6345: LD_INT 2
6347: ST_TO_ADDR
// skill := [ 4 , 6 , 7 ] [ Difficulty ] ;
6348: LD_ADDR_VAR 0 6
6352: PUSH
6353: LD_INT 4
6355: PUSH
6356: LD_INT 6
6358: PUSH
6359: LD_INT 7
6361: PUSH
6362: EMPTY
6363: LIST
6364: LIST
6365: LIST
6366: PUSH
6367: LD_OWVAR 67
6371: ARRAY
6372: ST_TO_ADDR
// Randomize ;
6373: CALL_OW 10
// case type of 1 :
6377: LD_VAR 0 1
6381: PUSH
6382: LD_INT 1
6384: DOUBLE
6385: EQUAL
6386: IFTRUE 6390
6388: GO 6512
6390: POP
// begin for i = 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
6391: LD_ADDR_VAR 0 3
6395: PUSH
6396: DOUBLE
6397: LD_INT 1
6399: DEC
6400: ST_TO_ADDR
6401: LD_INT 3
6403: PUSH
6404: LD_INT 4
6406: PUSH
6407: LD_INT 5
6409: PUSH
6410: EMPTY
6411: LIST
6412: LIST
6413: LIST
6414: PUSH
6415: LD_OWVAR 67
6419: ARRAY
6420: PUSH
6421: FOR_TO
6422: IFFALSE 6508
// begin PrepareHuman ( false , [ class_soldier , class_soldier , class_mortar ] [ Rand ( 1 , 3 ) ] , skill ) ;
6424: LD_INT 0
6426: PPUSH
6427: LD_INT 1
6429: PUSH
6430: LD_INT 1
6432: PUSH
6433: LD_INT 8
6435: PUSH
6436: EMPTY
6437: LIST
6438: LIST
6439: LIST
6440: PUSH
6441: LD_INT 1
6443: PPUSH
6444: LD_INT 3
6446: PPUSH
6447: CALL_OW 12
6451: ARRAY
6452: PPUSH
6453: LD_VAR 0 6
6457: PPUSH
6458: CALL_OW 380
// un := CreateHuman ;
6462: LD_ADDR_VAR 0 4
6466: PUSH
6467: CALL_OW 44
6471: ST_TO_ADDR
// PlaceUnitArea ( un , ar3 , false ) ;
6472: LD_VAR 0 4
6476: PPUSH
6477: LD_INT 18
6479: PPUSH
6480: LD_INT 0
6482: PPUSH
6483: CALL_OW 49
// ComMoveToArea ( un , spot3 ) ;
6487: LD_VAR 0 4
6491: PPUSH
6492: LD_INT 20
6494: PPUSH
6495: CALL_OW 113
// Wait ( 0 0$01 ) ;
6499: LD_INT 35
6501: PPUSH
6502: CALL_OW 67
// end ;
6506: GO 6421
6508: POP
6509: POP
// end ; 2 :
6510: GO 7145
6512: LD_INT 2
6514: DOUBLE
6515: EQUAL
6516: IFTRUE 6520
6518: GO 6787
6520: POP
// begin for i = 1 to [ 4 , 5 , 5 ] [ Difficulty ] do
6521: LD_ADDR_VAR 0 3
6525: PUSH
6526: DOUBLE
6527: LD_INT 1
6529: DEC
6530: ST_TO_ADDR
6531: LD_INT 4
6533: PUSH
6534: LD_INT 5
6536: PUSH
6537: LD_INT 5
6539: PUSH
6540: EMPTY
6541: LIST
6542: LIST
6543: LIST
6544: PUSH
6545: LD_OWVAR 67
6549: ARRAY
6550: PUSH
6551: FOR_TO
6552: IFFALSE 6615
// begin PrepareHuman ( false , class_soldier , skill ) ;
6554: LD_INT 0
6556: PPUSH
6557: LD_INT 1
6559: PPUSH
6560: LD_VAR 0 6
6564: PPUSH
6565: CALL_OW 380
// un := CreateHuman ;
6569: LD_ADDR_VAR 0 4
6573: PUSH
6574: CALL_OW 44
6578: ST_TO_ADDR
// PlaceUnitArea ( un , ar2 , false ) ;
6579: LD_VAR 0 4
6583: PPUSH
6584: LD_INT 17
6586: PPUSH
6587: LD_INT 0
6589: PPUSH
6590: CALL_OW 49
// ComMoveToArea ( un , spot2 ) ;
6594: LD_VAR 0 4
6598: PPUSH
6599: LD_INT 19
6601: PPUSH
6602: CALL_OW 113
// Wait ( 0 0$01 ) ;
6606: LD_INT 35
6608: PPUSH
6609: CALL_OW 67
// end ;
6613: GO 6551
6615: POP
6616: POP
// for i = 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
6617: LD_ADDR_VAR 0 3
6621: PUSH
6622: DOUBLE
6623: LD_INT 1
6625: DEC
6626: ST_TO_ADDR
6627: LD_INT 2
6629: PUSH
6630: LD_INT 3
6632: PUSH
6633: LD_INT 4
6635: PUSH
6636: EMPTY
6637: LIST
6638: LIST
6639: LIST
6640: PUSH
6641: LD_OWVAR 67
6645: ARRAY
6646: PUSH
6647: FOR_TO
6648: IFFALSE 6783
// begin vc_chassis := ar_medium_trike ;
6650: LD_ADDR_OWVAR 37
6654: PUSH
6655: LD_INT 13
6657: ST_TO_ADDR
// vc_engine := engine_combustion ;
6658: LD_ADDR_OWVAR 39
6662: PUSH
6663: LD_INT 1
6665: ST_TO_ADDR
// vc_control := control_manual ;
6666: LD_ADDR_OWVAR 38
6670: PUSH
6671: LD_INT 1
6673: ST_TO_ADDR
// vc_weapon := [ ar_double_machine_gun , ar_light_gun , ar_gun ] [ Rand ( 1 , 3 ) ] ;
6674: LD_ADDR_OWVAR 40
6678: PUSH
6679: LD_INT 24
6681: PUSH
6682: LD_INT 23
6684: PUSH
6685: LD_INT 27
6687: PUSH
6688: EMPTY
6689: LIST
6690: LIST
6691: LIST
6692: PUSH
6693: LD_INT 1
6695: PPUSH
6696: LD_INT 3
6698: PPUSH
6699: CALL_OW 12
6703: ARRAY
6704: ST_TO_ADDR
// veh := CreateVehicle ;
6705: LD_ADDR_VAR 0 5
6709: PUSH
6710: CALL_OW 45
6714: ST_TO_ADDR
// PlaceUnitArea ( veh , ar2 , false ) ;
6715: LD_VAR 0 5
6719: PPUSH
6720: LD_INT 17
6722: PPUSH
6723: LD_INT 0
6725: PPUSH
6726: CALL_OW 49
// PrepareHuman ( false , 1 , skill ) ;
6730: LD_INT 0
6732: PPUSH
6733: LD_INT 1
6735: PPUSH
6736: LD_VAR 0 6
6740: PPUSH
6741: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
6745: CALL_OW 44
6749: PPUSH
6750: LD_VAR 0 5
6754: PPUSH
6755: CALL_OW 52
// ComMoveXY ( veh , 89 , 40 ) ;
6759: LD_VAR 0 5
6763: PPUSH
6764: LD_INT 89
6766: PPUSH
6767: LD_INT 40
6769: PPUSH
6770: CALL_OW 111
// Wait ( 0 0$02 ) ;
6774: LD_INT 70
6776: PPUSH
6777: CALL_OW 67
// end ;
6781: GO 6647
6783: POP
6784: POP
// end ; 3 :
6785: GO 7145
6787: LD_INT 3
6789: DOUBLE
6790: EQUAL
6791: IFTRUE 6795
6793: GO 7144
6795: POP
// begin for i = 1 to [ 3 , 4 , 5 ] [ Difficulty ] + ( tick div 15 15$00 ) do
6796: LD_ADDR_VAR 0 3
6800: PUSH
6801: DOUBLE
6802: LD_INT 1
6804: DEC
6805: ST_TO_ADDR
6806: LD_INT 3
6808: PUSH
6809: LD_INT 4
6811: PUSH
6812: LD_INT 5
6814: PUSH
6815: EMPTY
6816: LIST
6817: LIST
6818: LIST
6819: PUSH
6820: LD_OWVAR 67
6824: ARRAY
6825: PUSH
6826: LD_OWVAR 1
6830: PUSH
6831: LD_INT 31500
6833: DIV
6834: PLUS
6835: PUSH
6836: FOR_TO
6837: IFFALSE 6945
// begin PrepareHuman ( false , [ class_soldier , class_mortar ] [ Rand ( 1 , 2 ) ] , skill ) ;
6839: LD_INT 0
6841: PPUSH
6842: LD_INT 1
6844: PUSH
6845: LD_INT 8
6847: PUSH
6848: EMPTY
6849: LIST
6850: LIST
6851: PUSH
6852: LD_INT 1
6854: PPUSH
6855: LD_INT 2
6857: PPUSH
6858: CALL_OW 12
6862: ARRAY
6863: PPUSH
6864: LD_VAR 0 6
6868: PPUSH
6869: CALL_OW 380
// un := CreateHuman ;
6873: LD_ADDR_VAR 0 4
6877: PUSH
6878: CALL_OW 44
6882: ST_TO_ADDR
// PlaceUnitArea ( un , ar2 , false ) ;
6883: LD_VAR 0 4
6887: PPUSH
6888: LD_INT 17
6890: PPUSH
6891: LD_INT 0
6893: PPUSH
6894: CALL_OW 49
// ar_force := Insert ( ar_force , 1 , un ) ;
6898: LD_ADDR_EXP 11
6902: PUSH
6903: LD_EXP 11
6907: PPUSH
6908: LD_INT 1
6910: PPUSH
6911: LD_VAR 0 4
6915: PPUSH
6916: CALL_OW 2
6920: ST_TO_ADDR
// ComMoveXY ( un , 17 , 9 ) ;
6921: LD_VAR 0 4
6925: PPUSH
6926: LD_INT 17
6928: PPUSH
6929: LD_INT 9
6931: PPUSH
6932: CALL_OW 111
// Wait ( 0 0$01 ) ;
6936: LD_INT 35
6938: PPUSH
6939: CALL_OW 67
// end ;
6943: GO 6836
6945: POP
6946: POP
// for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
6947: LD_ADDR_VAR 0 3
6951: PUSH
6952: DOUBLE
6953: LD_INT 1
6955: DEC
6956: ST_TO_ADDR
6957: LD_INT 4
6959: PUSH
6960: LD_INT 5
6962: PUSH
6963: LD_INT 6
6965: PUSH
6966: EMPTY
6967: LIST
6968: LIST
6969: LIST
6970: PUSH
6971: LD_OWVAR 67
6975: ARRAY
6976: PUSH
6977: FOR_TO
6978: IFFALSE 7140
// begin vc_chassis := ar_half_tracked ;
6980: LD_ADDR_OWVAR 37
6984: PUSH
6985: LD_INT 14
6987: ST_TO_ADDR
// vc_engine := engine_combustion ;
6988: LD_ADDR_OWVAR 39
6992: PUSH
6993: LD_INT 1
6995: ST_TO_ADDR
// vc_control := control_manual ;
6996: LD_ADDR_OWVAR 38
7000: PUSH
7001: LD_INT 1
7003: ST_TO_ADDR
// vc_weapon := [ ar_gatling_gun , ar_gun , ar_rocket_launcher , ar_flame_thrower ] [ Rand ( 1 , 4 ) ] ;
7004: LD_ADDR_OWVAR 40
7008: PUSH
7009: LD_INT 25
7011: PUSH
7012: LD_INT 27
7014: PUSH
7015: LD_INT 28
7017: PUSH
7018: LD_INT 26
7020: PUSH
7021: EMPTY
7022: LIST
7023: LIST
7024: LIST
7025: LIST
7026: PUSH
7027: LD_INT 1
7029: PPUSH
7030: LD_INT 4
7032: PPUSH
7033: CALL_OW 12
7037: ARRAY
7038: ST_TO_ADDR
// veh := CreateVehicle ;
7039: LD_ADDR_VAR 0 5
7043: PUSH
7044: CALL_OW 45
7048: ST_TO_ADDR
// PlaceUnitArea ( veh , ar1 , false ) ;
7049: LD_VAR 0 5
7053: PPUSH
7054: LD_INT 16
7056: PPUSH
7057: LD_INT 0
7059: PPUSH
7060: CALL_OW 49
// PrepareHuman ( false , 3 , skill ) ;
7064: LD_INT 0
7066: PPUSH
7067: LD_INT 3
7069: PPUSH
7070: LD_VAR 0 6
7074: PPUSH
7075: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
7079: CALL_OW 44
7083: PPUSH
7084: LD_VAR 0 5
7088: PPUSH
7089: CALL_OW 52
// ar_force := Insert ( ar_force , 1 , veh ) ;
7093: LD_ADDR_EXP 11
7097: PUSH
7098: LD_EXP 11
7102: PPUSH
7103: LD_INT 1
7105: PPUSH
7106: LD_VAR 0 5
7110: PPUSH
7111: CALL_OW 2
7115: ST_TO_ADDR
// ComMoveXY ( veh , 125 , 31 ) ;
7116: LD_VAR 0 5
7120: PPUSH
7121: LD_INT 125
7123: PPUSH
7124: LD_INT 31
7126: PPUSH
7127: CALL_OW 111
// Wait ( 0 0$02 ) ;
7131: LD_INT 70
7133: PPUSH
7134: CALL_OW 67
// end ;
7138: GO 6977
7140: POP
7141: POP
// end ; end ;
7142: GO 7145
7144: POP
// end ;
7145: LD_VAR 0 2
7149: RET
// export function PrepareHovercrafts ; var i , un , areas , skill ; begin
7150: LD_INT 0
7152: PPUSH
7153: PPUSH
7154: PPUSH
7155: PPUSH
7156: PPUSH
// areas := [ river1 , river2 ] ;
7157: LD_ADDR_VAR 0 4
7161: PUSH
7162: LD_INT 14
7164: PUSH
7165: LD_INT 15
7167: PUSH
7168: EMPTY
7169: LIST
7170: LIST
7171: ST_TO_ADDR
// skill := [ 5 , 6 , 7 ] [ Difficulty ] ;
7172: LD_ADDR_VAR 0 5
7176: PUSH
7177: LD_INT 5
7179: PUSH
7180: LD_INT 6
7182: PUSH
7183: LD_INT 7
7185: PUSH
7186: EMPTY
7187: LIST
7188: LIST
7189: LIST
7190: PUSH
7191: LD_OWVAR 67
7195: ARRAY
7196: ST_TO_ADDR
// uc_side := 2 ;
7197: LD_ADDR_OWVAR 20
7201: PUSH
7202: LD_INT 2
7204: ST_TO_ADDR
// uc_nation := 2 ;
7205: LD_ADDR_OWVAR 21
7209: PUSH
7210: LD_INT 2
7212: ST_TO_ADDR
// hc_name :=  ;
7213: LD_ADDR_OWVAR 26
7217: PUSH
7218: LD_STRING 
7220: ST_TO_ADDR
// hc_gallery :=  ;
7221: LD_ADDR_OWVAR 33
7225: PUSH
7226: LD_STRING 
7228: ST_TO_ADDR
// for i = 1 to [ 1 , 2 , 2 ] [ Difficulty ] do
7229: LD_ADDR_VAR 0 2
7233: PUSH
7234: DOUBLE
7235: LD_INT 1
7237: DEC
7238: ST_TO_ADDR
7239: LD_INT 1
7241: PUSH
7242: LD_INT 2
7244: PUSH
7245: LD_INT 2
7247: PUSH
7248: EMPTY
7249: LIST
7250: LIST
7251: LIST
7252: PUSH
7253: LD_OWVAR 67
7257: ARRAY
7258: PUSH
7259: FOR_TO
7260: IFFALSE 7398
// begin vc_chassis := ar_hovercraft ;
7262: LD_ADDR_OWVAR 37
7266: PUSH
7267: LD_INT 11
7269: ST_TO_ADDR
// vc_engine := engine_solar ;
7270: LD_ADDR_OWVAR 39
7274: PUSH
7275: LD_INT 2
7277: ST_TO_ADDR
// vc_control := control_manual ;
7278: LD_ADDR_OWVAR 38
7282: PUSH
7283: LD_INT 1
7285: ST_TO_ADDR
// vc_weapon := ar_double_machine_gun ;
7286: LD_ADDR_OWVAR 40
7290: PUSH
7291: LD_INT 24
7293: ST_TO_ADDR
// vc_fuel_battery := 100 ;
7294: LD_ADDR_OWVAR 41
7298: PUSH
7299: LD_INT 100
7301: ST_TO_ADDR
// un := CreateVehicle ;
7302: LD_ADDR_VAR 0 3
7306: PUSH
7307: CALL_OW 45
7311: ST_TO_ADDR
// PlaceUnitArea ( un , areas [ i ] , false ) ;
7312: LD_VAR 0 3
7316: PPUSH
7317: LD_VAR 0 4
7321: PUSH
7322: LD_VAR 0 2
7326: ARRAY
7327: PPUSH
7328: LD_INT 0
7330: PPUSH
7331: CALL_OW 49
// PrepareHuman ( false , 3 , skill ) ;
7335: LD_INT 0
7337: PPUSH
7338: LD_INT 3
7340: PPUSH
7341: LD_VAR 0 5
7345: PPUSH
7346: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
7350: CALL_OW 44
7354: PPUSH
7355: LD_VAR 0 3
7359: PPUSH
7360: CALL_OW 52
// riv := Insert ( riv , 1 , [ un , i ] ) ;
7364: LD_ADDR_EXP 9
7368: PUSH
7369: LD_EXP 9
7373: PPUSH
7374: LD_INT 1
7376: PPUSH
7377: LD_VAR 0 3
7381: PUSH
7382: LD_VAR 0 2
7386: PUSH
7387: EMPTY
7388: LIST
7389: LIST
7390: PPUSH
7391: CALL_OW 2
7395: ST_TO_ADDR
// end ;
7396: GO 7259
7398: POP
7399: POP
// end ;
7400: LD_VAR 0 1
7404: RET
// every 0 0$01 trigger riv do var i , c ;
7405: LD_EXP 9
7409: IFFALSE 7844
7411: GO 7413
7413: DISABLE
7414: LD_INT 0
7416: PPUSH
7417: PPUSH
// begin enable ;
7418: ENABLE
// for i = riv downto 1 do
7419: LD_ADDR_VAR 0 1
7423: PUSH
7424: DOUBLE
7425: LD_EXP 9
7429: INC
7430: ST_TO_ADDR
7431: LD_INT 1
7433: PUSH
7434: FOR_DOWNTO
7435: IFFALSE 7842
// begin if not riv [ i ] [ 1 ] then
7437: LD_EXP 9
7441: PUSH
7442: LD_VAR 0 1
7446: ARRAY
7447: PUSH
7448: LD_INT 1
7450: ARRAY
7451: NOT
7452: IFFALSE 7474
// begin riv := Delete ( riv , 1 ) ;
7454: LD_ADDR_EXP 9
7458: PUSH
7459: LD_EXP 9
7463: PPUSH
7464: LD_INT 1
7466: PPUSH
7467: CALL_OW 3
7471: ST_TO_ADDR
// break ;
7472: GO 7842
// end ; if not HasTask ( riv [ i ] [ 1 ] ) then
7474: LD_EXP 9
7478: PUSH
7479: LD_VAR 0 1
7483: ARRAY
7484: PUSH
7485: LD_INT 1
7487: ARRAY
7488: PPUSH
7489: CALL_OW 314
7493: NOT
7494: IFFALSE 7562
// begin if riv [ i ] [ 2 ] = 1 then
7496: LD_EXP 9
7500: PUSH
7501: LD_VAR 0 1
7505: ARRAY
7506: PUSH
7507: LD_INT 2
7509: ARRAY
7510: PUSH
7511: LD_INT 1
7513: EQUAL
7514: IFFALSE 7526
// c := 2 else
7516: LD_ADDR_VAR 0 2
7520: PUSH
7521: LD_INT 2
7523: ST_TO_ADDR
7524: GO 7534
// c := 1 ;
7526: LD_ADDR_VAR 0 2
7530: PUSH
7531: LD_INT 1
7533: ST_TO_ADDR
// riv := Replace2 ( riv , i , 2 , c ) ;
7534: LD_ADDR_EXP 9
7538: PUSH
7539: LD_EXP 9
7543: PPUSH
7544: LD_VAR 0 1
7548: PPUSH
7549: LD_INT 2
7551: PPUSH
7552: LD_VAR 0 2
7556: PPUSH
7557: CALL 10192 0 4
7561: ST_TO_ADDR
// end ; if not IsInArea ( riv [ i ] [ 1 ] , [ river1 , river2 ] [ riv [ i ] [ 2 ] ] ) then
7562: LD_EXP 9
7566: PUSH
7567: LD_VAR 0 1
7571: ARRAY
7572: PUSH
7573: LD_INT 1
7575: ARRAY
7576: PPUSH
7577: LD_INT 14
7579: PUSH
7580: LD_INT 15
7582: PUSH
7583: EMPTY
7584: LIST
7585: LIST
7586: PUSH
7587: LD_EXP 9
7591: PUSH
7592: LD_VAR 0 1
7596: ARRAY
7597: PUSH
7598: LD_INT 2
7600: ARRAY
7601: ARRAY
7602: PPUSH
7603: CALL_OW 308
7607: NOT
7608: IFFALSE 7840
// begin if GetFuel ( riv [ i ] [ 1 ] ) < 50 then
7610: LD_EXP 9
7614: PUSH
7615: LD_VAR 0 1
7619: ARRAY
7620: PUSH
7621: LD_INT 1
7623: ARRAY
7624: PPUSH
7625: CALL_OW 261
7629: PUSH
7630: LD_INT 50
7632: LESS
7633: IFFALSE 7657
// SetFuel ( riv [ i ] [ 1 ] , 67 ) ;
7635: LD_EXP 9
7639: PUSH
7640: LD_VAR 0 1
7644: ARRAY
7645: PUSH
7646: LD_INT 1
7648: ARRAY
7649: PPUSH
7650: LD_INT 67
7652: PPUSH
7653: CALL_OW 240
// if GetDistUnits ( riv [ i ] [ 1 ] , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 3 ] ) , riv [ i ] [ 1 ] ) ) < 9 then
7657: LD_EXP 9
7661: PUSH
7662: LD_VAR 0 1
7666: ARRAY
7667: PUSH
7668: LD_INT 1
7670: ARRAY
7671: PPUSH
7672: LD_INT 22
7674: PUSH
7675: LD_INT 3
7677: PUSH
7678: EMPTY
7679: LIST
7680: LIST
7681: PPUSH
7682: CALL_OW 69
7686: PPUSH
7687: LD_EXP 9
7691: PUSH
7692: LD_VAR 0 1
7696: ARRAY
7697: PUSH
7698: LD_INT 1
7700: ARRAY
7701: PPUSH
7702: CALL_OW 74
7706: PPUSH
7707: CALL_OW 296
7711: PUSH
7712: LD_INT 9
7714: LESS
7715: IFFALSE 7773
// ComAttackUnit ( riv [ i ] [ 1 ] , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 3 ] ) , riv [ i ] [ 1 ] ) ) else
7717: LD_EXP 9
7721: PUSH
7722: LD_VAR 0 1
7726: ARRAY
7727: PUSH
7728: LD_INT 1
7730: ARRAY
7731: PPUSH
7732: LD_INT 22
7734: PUSH
7735: LD_INT 3
7737: PUSH
7738: EMPTY
7739: LIST
7740: LIST
7741: PPUSH
7742: CALL_OW 69
7746: PPUSH
7747: LD_EXP 9
7751: PUSH
7752: LD_VAR 0 1
7756: ARRAY
7757: PUSH
7758: LD_INT 1
7760: ARRAY
7761: PPUSH
7762: CALL_OW 74
7766: PPUSH
7767: CALL_OW 115
7771: GO 7840
// begin ComMoveToArea ( riv [ i ] [ 1 ] , [ river1 , river2 ] [ riv [ i ] [ 2 ] ] ) ;
7773: LD_EXP 9
7777: PUSH
7778: LD_VAR 0 1
7782: ARRAY
7783: PUSH
7784: LD_INT 1
7786: ARRAY
7787: PPUSH
7788: LD_INT 14
7790: PUSH
7791: LD_INT 15
7793: PUSH
7794: EMPTY
7795: LIST
7796: LIST
7797: PUSH
7798: LD_EXP 9
7802: PUSH
7803: LD_VAR 0 1
7807: ARRAY
7808: PUSH
7809: LD_INT 2
7811: ARRAY
7812: ARRAY
7813: PPUSH
7814: CALL_OW 113
// AddComWait ( riv [ i ] [ 1 ] , 0 0$10 ) ;
7818: LD_EXP 9
7822: PUSH
7823: LD_VAR 0 1
7827: ARRAY
7828: PUSH
7829: LD_INT 1
7831: ARRAY
7832: PPUSH
7833: LD_INT 350
7835: PPUSH
7836: CALL_OW 202
// end ; end ; end ;
7840: GO 7434
7842: POP
7843: POP
// end ;
7844: PPOPN 2
7846: END
// every 10 10$00 trigger convoy_start do var i , un ;
7847: LD_EXP 7
7851: IFFALSE 7972
7853: GO 7855
7855: DISABLE
7856: LD_INT 0
7858: PPUSH
7859: PPUSH
// begin enable ;
7860: ENABLE
// for i = 1 to 2 do
7861: LD_ADDR_VAR 0 1
7865: PUSH
7866: DOUBLE
7867: LD_INT 1
7869: DEC
7870: ST_TO_ADDR
7871: LD_INT 2
7873: PUSH
7874: FOR_TO
7875: IFFALSE 7970
// begin uc_side := 2 ;
7877: LD_ADDR_OWVAR 20
7881: PUSH
7882: LD_INT 2
7884: ST_TO_ADDR
// uc_nation := 2 ;
7885: LD_ADDR_OWVAR 21
7889: PUSH
7890: LD_INT 2
7892: ST_TO_ADDR
// PrepareHuman ( false , 1 , 4 ) ;
7893: LD_INT 0
7895: PPUSH
7896: LD_INT 1
7898: PPUSH
7899: LD_INT 4
7901: PPUSH
7902: CALL_OW 380
// un := CreateHuman ;
7906: LD_ADDR_VAR 0 2
7910: PUSH
7911: CALL_OW 44
7915: ST_TO_ADDR
// PlaceUnitXY ( un , 10 , 2 , false ) ;
7916: LD_VAR 0 2
7920: PPUSH
7921: LD_INT 10
7923: PPUSH
7924: LD_INT 2
7926: PPUSH
7927: LD_INT 0
7929: PPUSH
7930: CALL_OW 48
// ComMoveXY ( un , 24 , 36 ) ;
7934: LD_VAR 0 2
7938: PPUSH
7939: LD_INT 24
7941: PPUSH
7942: LD_INT 36
7944: PPUSH
7945: CALL_OW 111
// AddComMoveToArea ( un , conv_end ) ;
7949: LD_VAR 0 2
7953: PPUSH
7954: LD_INT 9
7956: PPUSH
7957: CALL_OW 173
// Wait ( 0 0$02 ) ;
7961: LD_INT 70
7963: PPUSH
7964: CALL_OW 67
// end ;
7968: GO 7874
7970: POP
7971: POP
// end ;
7972: PPOPN 2
7974: END
// every 0 0$01 trigger FilterAllUnits ( [ f_side , 2 ] ) do var i , rest ;
7975: LD_INT 22
7977: PUSH
7978: LD_INT 2
7980: PUSH
7981: EMPTY
7982: LIST
7983: LIST
7984: PPUSH
7985: CALL_OW 69
7989: IFFALSE 8300
7991: GO 7993
7993: DISABLE
7994: LD_INT 0
7996: PPUSH
7997: PPUSH
// begin enable ;
7998: ENABLE
// rest := FilterAllUnits ( [ f_side , 2 ] ) diff ar_force ;
7999: LD_ADDR_VAR 0 2
8003: PUSH
8004: LD_INT 22
8006: PUSH
8007: LD_INT 2
8009: PUSH
8010: EMPTY
8011: LIST
8012: LIST
8013: PPUSH
8014: CALL_OW 69
8018: PUSH
8019: LD_EXP 11
8023: DIFF
8024: ST_TO_ADDR
// if rest then
8025: LD_VAR 0 2
8029: IFFALSE 8101
// for i in rest do
8031: LD_ADDR_VAR 0 1
8035: PUSH
8036: LD_VAR 0 2
8040: PUSH
8041: FOR_IN
8042: IFFALSE 8099
// if GetClass ( i ) = 3 then
8044: LD_VAR 0 1
8048: PPUSH
8049: CALL_OW 257
8053: PUSH
8054: LD_INT 3
8056: EQUAL
8057: IFFALSE 8097
// begin if not IsInArea ( i , ar2 ) then
8059: LD_VAR 0 1
8063: PPUSH
8064: LD_INT 17
8066: PPUSH
8067: CALL_OW 308
8071: NOT
8072: IFFALSE 8088
// ComMoveToArea ( i , ar2 ) else
8074: LD_VAR 0 1
8078: PPUSH
8079: LD_INT 17
8081: PPUSH
8082: CALL_OW 113
8086: GO 8097
// RemoveUnit ( i ) ;
8088: LD_VAR 0 1
8092: PPUSH
8093: CALL_OW 64
// end ;
8097: GO 8041
8099: POP
8100: POP
// if ar_force then
8101: LD_EXP 11
8105: IFFALSE 8300
// for i in ar_force do
8107: LD_ADDR_VAR 0 1
8111: PUSH
8112: LD_EXP 11
8116: PUSH
8117: FOR_IN
8118: IFFALSE 8298
// begin if GetClass ( i ) = class_soldier then
8120: LD_VAR 0 1
8124: PPUSH
8125: CALL_OW 257
8129: PUSH
8130: LD_INT 1
8132: EQUAL
8133: IFFALSE 8225
// if FindTarget ( i ) in FilterAllUnits ( [ f_type , unit_building ] ) then
8135: LD_VAR 0 1
8139: PPUSH
8140: CALL 10500 0 1
8144: PUSH
8145: LD_INT 21
8147: PUSH
8148: LD_INT 3
8150: PUSH
8151: EMPTY
8152: LIST
8153: LIST
8154: PPUSH
8155: CALL_OW 69
8159: IN
8160: IFFALSE 8206
// ComPlaceDelayedCharge ( i , GetX ( FindTarget ( i ) ) , GetY ( FindTarget ( i ) ) , 0 ) else
8162: LD_VAR 0 1
8166: PPUSH
8167: LD_VAR 0 1
8171: PPUSH
8172: CALL 10500 0 1
8176: PPUSH
8177: CALL_OW 250
8181: PPUSH
8182: LD_VAR 0 1
8186: PPUSH
8187: CALL 10500 0 1
8191: PPUSH
8192: CALL_OW 251
8196: PPUSH
8197: LD_INT 0
8199: PPUSH
8200: CALL_OW 132
8204: GO 8225
// ComAttackUnit ( i , FindTarget ( i ) ) ;
8206: LD_VAR 0 1
8210: PPUSH
8211: LD_VAR 0 1
8215: PPUSH
8216: CALL 10500 0 1
8220: PPUSH
8221: CALL_OW 115
// if not GetClass ( i ) = 1 then
8225: LD_VAR 0 1
8229: PPUSH
8230: CALL_OW 257
8234: PUSH
8235: LD_INT 1
8237: EQUAL
8238: NOT
8239: IFFALSE 8260
// ComAttackUnit ( i , FindTarget ( i ) ) ;
8241: LD_VAR 0 1
8245: PPUSH
8246: LD_VAR 0 1
8250: PPUSH
8251: CALL 10500 0 1
8255: PPUSH
8256: CALL_OW 115
// if GetDistUnitXY ( i , 65 , 118 ) < 40 then
8260: LD_VAR 0 1
8264: PPUSH
8265: LD_INT 65
8267: PPUSH
8268: LD_INT 118
8270: PPUSH
8271: CALL_OW 297
8275: PUSH
8276: LD_INT 40
8278: LESS
8279: IFFALSE 8296
// ComMoveXY ( i , 65 , 118 ) ;
8281: LD_VAR 0 1
8285: PPUSH
8286: LD_INT 65
8288: PPUSH
8289: LD_INT 118
8291: PPUSH
8292: CALL_OW 111
// end ;
8296: GO 8117
8298: POP
8299: POP
// end ;
8300: PPOPN 2
8302: END
// every 0 0$01 trigger FilterUnitsInArea ( conv_end , [ f_side , 2 ] ) do
8303: LD_INT 9
8305: PPUSH
8306: LD_INT 22
8308: PUSH
8309: LD_INT 2
8311: PUSH
8312: EMPTY
8313: LIST
8314: LIST
8315: PPUSH
8316: CALL_OW 70
8320: IFFALSE 8333
8322: GO 8324
8324: DISABLE
// medal2 := false ; end_of_file
8325: LD_ADDR_EXP 4
8329: PUSH
8330: LD_INT 0
8332: ST_TO_ADDR
8333: END
// export function Action ; begin
8334: LD_INT 0
8336: PPUSH
// Difficulty := GetMultiplayerSetting ( 0 ) ;
8337: LD_ADDR_OWVAR 67
8341: PUSH
8342: LD_INT 0
8344: PPUSH
8345: CALL_OW 426
8349: ST_TO_ADDR
// case Query ( info ) of 1 :
8350: LD_STRING info
8352: PPUSH
8353: CALL_OW 97
8357: PUSH
8358: LD_INT 1
8360: DOUBLE
8361: EQUAL
8362: IFTRUE 8366
8364: GO 8369
8366: POP
// ; end ;
8367: GO 8370
8369: POP
// ChangeMissionObjectives ( PM_1 ) ;
8370: LD_STRING PM_1
8372: PPUSH
8373: CALL_OW 337
// SaveForQuickRestart ;
8377: CALL_OW 22
// end ;
8381: LD_VAR 0 1
8385: RET
// every 0 0$01 trigger GetSide ( us_depot ) = 3 do
8386: LD_INT 50
8388: PPUSH
8389: CALL_OW 255
8393: PUSH
8394: LD_INT 3
8396: EQUAL
8397: IFFALSE 8678
8399: GO 8401
8401: DISABLE
// begin Say ( Stolypin , DPM_S1 ) ;
8402: LD_EXP 16
8406: PPUSH
8407: LD_STRING DPM_S1
8409: PPUSH
8410: CALL_OW 88
// SayRadio ( Popov , DPM_P1 ) ;
8414: LD_EXP 17
8418: PPUSH
8419: LD_STRING DPM_P1
8421: PPUSH
8422: CALL_OW 94
// Say ( Stolypin , DPM_S2 ) ;
8426: LD_EXP 16
8430: PPUSH
8431: LD_STRING DPM_S2
8433: PPUSH
8434: CALL_OW 88
// SaveForQuickRestart ;
8438: CALL_OW 22
// ChangeMissionObjectives ( PM_2 ) ;
8442: LD_STRING PM_2
8444: PPUSH
8445: CALL_OW 337
// Wait ( 2 2$30 ) ;
8449: LD_INT 5250
8451: PPUSH
8452: CALL_OW 67
// CenterOnXY ( 117 , 4 ) ;
8456: LD_INT 117
8458: PPUSH
8459: LD_INT 4
8461: PPUSH
8462: CALL_OW 84
// Convoy ( 1 ) ;
8466: LD_INT 1
8468: PPUSH
8469: CALL 891 0 1
// Wait ( 0 0$30 ) ;
8473: LD_INT 1050
8475: PPUSH
8476: CALL_OW 67
// Convoy ( 2 ) ;
8480: LD_INT 2
8482: PPUSH
8483: CALL 891 0 1
// Wait ( 1 1$30 ) ;
8487: LD_INT 3150
8489: PPUSH
8490: CALL_OW 67
// Convoy ( 3 ) ;
8494: LD_INT 3
8496: PPUSH
8497: CALL 891 0 1
// Wait ( 5 5$00 ) ;
8501: LD_INT 10500
8503: PPUSH
8504: CALL_OW 67
// convoy_start := true ;
8508: LD_ADDR_EXP 7
8512: PUSH
8513: LD_INT 1
8515: ST_TO_ADDR
// PrepareArabian ;
8516: CALL 6252 0 0
// PrepareAttack ( 1 ) ;
8520: LD_INT 1
8522: PPUSH
8523: CALL 6325 0 1
// while ( convoy_start ) do
8527: LD_EXP 7
8531: IFFALSE 8678
// begin Wait ( Rand ( 2 2$00 , 4 4$00 ) ) ;
8533: LD_INT 4200
8535: PPUSH
8536: LD_INT 8400
8538: PPUSH
8539: CALL_OW 12
8543: PPUSH
8544: CALL_OW 67
// if FilterAllUnits ( [ f_side , 2 ] ) < 20 then
8548: LD_INT 22
8550: PUSH
8551: LD_INT 2
8553: PUSH
8554: EMPTY
8555: LIST
8556: LIST
8557: PPUSH
8558: CALL_OW 69
8562: PUSH
8563: LD_INT 20
8565: LESS
8566: IFFALSE 8583
// PrepareAttack ( Rand ( 1 , 2 ) ) ;
8568: LD_INT 1
8570: PPUSH
8571: LD_INT 2
8573: PPUSH
8574: CALL_OW 12
8578: PPUSH
8579: CALL 6325 0 1
// Convoy ( Rand ( 1 , 5 ) ) ;
8583: LD_INT 1
8585: PPUSH
8586: LD_INT 5
8588: PPUSH
8589: CALL_OW 12
8593: PPUSH
8594: CALL 891 0 1
// conv_counter := conv_counter + 1 ;
8598: LD_ADDR_EXP 13
8602: PUSH
8603: LD_EXP 13
8607: PUSH
8608: LD_INT 1
8610: PLUS
8611: ST_TO_ADDR
// if conv_counter mod [ 5 , 4 , 3 ] [ Difficulty ] = 0 then
8612: LD_EXP 13
8616: PUSH
8617: LD_INT 5
8619: PUSH
8620: LD_INT 4
8622: PUSH
8623: LD_INT 3
8625: PUSH
8626: EMPTY
8627: LIST
8628: LIST
8629: LIST
8630: PUSH
8631: LD_OWVAR 67
8635: ARRAY
8636: MOD
8637: PUSH
8638: LD_INT 0
8640: EQUAL
8641: IFFALSE 8676
// begin Wait ( 1 1$20 ) ;
8643: LD_INT 2800
8645: PPUSH
8646: CALL_OW 67
// SayRadio ( Farmer , DPM_F2 ) ;
8650: LD_EXP 25
8654: PPUSH
8655: LD_STRING DPM_F2
8657: PPUSH
8658: CALL_OW 94
// PrepareAttack ( 3 ) ;
8662: LD_INT 3
8664: PPUSH
8665: CALL 6325 0 1
// Wait ( 4 4$00 ) ;
8669: LD_INT 8400
8671: PPUSH
8672: CALL_OW 67
// end ; end ;
8676: GO 8527
// end ;
8678: END
// every 0 0$1 trigger safeCounter > 30 do
8679: LD_EXP 15
8683: PUSH
8684: LD_INT 30
8686: GREATER
8687: IFFALSE 8699
8689: GO 8691
8691: DISABLE
// SetAchievement ( ACH_SAFE ) ;
8692: LD_STRING ACH_SAFE
8694: PPUSH
8695: CALL_OW 543
8699: END
// every 1 1$30 trigger conv_counter mod 3 = 0 and FilterAllUnits ( [ f_side , 2 ] ) = 0 do
8700: LD_EXP 13
8704: PUSH
8705: LD_INT 3
8707: MOD
8708: PUSH
8709: LD_INT 0
8711: EQUAL
8712: PUSH
8713: LD_INT 22
8715: PUSH
8716: LD_INT 2
8718: PUSH
8719: EMPTY
8720: LIST
8721: LIST
8722: PPUSH
8723: CALL_OW 69
8727: PUSH
8728: LD_INT 0
8730: EQUAL
8731: AND
8732: IFFALSE 8749
8734: GO 8736
8736: DISABLE
// SayRadio ( Farmer , DPM_F3 ) ;
8737: LD_EXP 25
8741: PPUSH
8742: LD_STRING DPM_F3
8744: PPUSH
8745: CALL_OW 94
8749: END
// every 1 1$30 trigger conv_counter mod 5 = 0 and FilterAllUnits ( [ f_side , 2 ] ) = 0 do
8750: LD_EXP 13
8754: PUSH
8755: LD_INT 5
8757: MOD
8758: PUSH
8759: LD_INT 0
8761: EQUAL
8762: PUSH
8763: LD_INT 22
8765: PUSH
8766: LD_INT 2
8768: PUSH
8769: EMPTY
8770: LIST
8771: LIST
8772: PPUSH
8773: CALL_OW 69
8777: PUSH
8778: LD_INT 0
8780: EQUAL
8781: AND
8782: IFFALSE 8799
8784: GO 8786
8786: DISABLE
// SayRadio ( Farmer , DPM_F4 ) ;
8787: LD_EXP 25
8791: PPUSH
8792: LD_STRING DPM_F4
8794: PPUSH
8795: CALL_OW 94
8799: END
// every 0 0$10 trigger conv_counter >= 8 and FilterAllUnits ( [ f_side , 6 ] ) = 0 do
8800: LD_EXP 13
8804: PUSH
8805: LD_INT 8
8807: GREATEREQUAL
8808: PUSH
8809: LD_INT 22
8811: PUSH
8812: LD_INT 6
8814: PUSH
8815: EMPTY
8816: LIST
8817: LIST
8818: PPUSH
8819: CALL_OW 69
8823: PUSH
8824: LD_INT 0
8826: EQUAL
8827: AND
8828: IFFALSE 8927
8830: GO 8832
8832: DISABLE
// begin SayRadio ( Popov , DPM_PEnd ) ;
8833: LD_EXP 17
8837: PPUSH
8838: LD_STRING DPM_PEnd
8840: PPUSH
8841: CALL_OW 94
// AddMedal ( med1 , medal1 ) ;
8845: LD_STRING med1
8847: PPUSH
8848: LD_EXP 3
8852: PPUSH
8853: CALL_OW 101
// AddMedal ( med2 , medal2 ) ;
8857: LD_STRING med2
8859: PPUSH
8860: LD_EXP 4
8864: PPUSH
8865: CALL_OW 101
// if dest_counter >= [ 15 , 10 , 7 ] [ Difficulty ] then
8869: LD_EXP 8
8873: PUSH
8874: LD_INT 15
8876: PUSH
8877: LD_INT 10
8879: PUSH
8880: LD_INT 7
8882: PUSH
8883: EMPTY
8884: LIST
8885: LIST
8886: LIST
8887: PUSH
8888: LD_OWVAR 67
8892: ARRAY
8893: GREATEREQUAL
8894: IFFALSE 8904
// medal3 := false ;
8896: LD_ADDR_EXP 5
8900: PUSH
8901: LD_INT 0
8903: ST_TO_ADDR
// AddMedal ( med3 , medal3 ) ;
8904: LD_STRING med3
8906: PPUSH
8907: LD_EXP 5
8911: PPUSH
8912: CALL_OW 101
// GiveMedals ( MAIN ) ;
8916: LD_STRING MAIN
8918: PPUSH
8919: CALL_OW 102
// YouWin ;
8923: CALL_OW 103
// end ;
8927: END
// every 4 4$00 trigger convoy_start do var i ;
8928: LD_EXP 7
8932: IFFALSE 9290
8934: GO 8936
8936: DISABLE
8937: LD_INT 0
8939: PPUSH
// begin SayRadio ( Popov , DPM_PHelp ) ;
8940: LD_EXP 17
8944: PPUSH
8945: LD_STRING DPM_PHelp
8947: PPUSH
8948: CALL_OW 94
// Wait ( 0 0$30 ) ;
8952: LD_INT 1050
8954: PPUSH
8955: CALL_OW 67
// Randomize ;
8959: CALL_OW 10
// uc_side := 3 ;
8963: LD_ADDR_OWVAR 20
8967: PUSH
8968: LD_INT 3
8970: ST_TO_ADDR
// uc_nation := 3 ;
8971: LD_ADDR_OWVAR 21
8975: PUSH
8976: LD_INT 3
8978: ST_TO_ADDR
// for i = 1 to [ 5 , 4 , 3 ] [ Difficulty ] do
8979: LD_ADDR_VAR 0 1
8983: PUSH
8984: DOUBLE
8985: LD_INT 1
8987: DEC
8988: ST_TO_ADDR
8989: LD_INT 5
8991: PUSH
8992: LD_INT 4
8994: PUSH
8995: LD_INT 3
8997: PUSH
8998: EMPTY
8999: LIST
9000: LIST
9001: LIST
9002: PUSH
9003: LD_OWVAR 67
9007: ARRAY
9008: PUSH
9009: FOR_TO
9010: IFFALSE 9050
// begin PrepareHuman ( false , Rand ( 1 , 3 ) , 5 ) ;
9012: LD_INT 0
9014: PPUSH
9015: LD_INT 1
9017: PPUSH
9018: LD_INT 3
9020: PPUSH
9021: CALL_OW 12
9025: PPUSH
9026: LD_INT 5
9028: PPUSH
9029: CALL_OW 380
// PlaceUnitArea ( CreateHuman , rus_start , false ) ;
9033: CALL_OW 44
9037: PPUSH
9038: LD_INT 1
9040: PPUSH
9041: LD_INT 0
9043: PPUSH
9044: CALL_OW 49
// end ;
9048: GO 9009
9050: POP
9051: POP
// vc_chassis := ru_heavy_wheeled ;
9052: LD_ADDR_OWVAR 37
9056: PUSH
9057: LD_INT 23
9059: ST_TO_ADDR
// vc_engine := engine_combustion ;
9060: LD_ADDR_OWVAR 39
9064: PUSH
9065: LD_INT 1
9067: ST_TO_ADDR
// vc_control := control_manual ;
9068: LD_ADDR_OWVAR 38
9072: PUSH
9073: LD_INT 1
9075: ST_TO_ADDR
// vc_weapon := 89 ;
9076: LD_ADDR_OWVAR 40
9080: PUSH
9081: LD_INT 89
9083: ST_TO_ADDR
// vc_fuel_battery := 88 ;
9084: LD_ADDR_OWVAR 41
9088: PUSH
9089: LD_INT 88
9091: ST_TO_ADDR
// i := CreateVehicle ;
9092: LD_ADDR_VAR 0 1
9096: PUSH
9097: CALL_OW 45
9101: ST_TO_ADDR
// SetDir ( i , 5 ) ;
9102: LD_VAR 0 1
9106: PPUSH
9107: LD_INT 5
9109: PPUSH
9110: CALL_OW 233
// PlaceUnitXY ( i , 63 , 115 , false ) ;
9114: LD_VAR 0 1
9118: PPUSH
9119: LD_INT 63
9121: PPUSH
9122: LD_INT 115
9124: PPUSH
9125: LD_INT 0
9127: PPUSH
9128: CALL_OW 48
// SetCargo ( i , mat_cans , 200 ) ;
9132: LD_VAR 0 1
9136: PPUSH
9137: LD_INT 1
9139: PPUSH
9140: LD_INT 200
9142: PPUSH
9143: CALL_OW 290
// PrepareHuman ( false , 3 , 5 ) ;
9147: LD_INT 0
9149: PPUSH
9150: LD_INT 3
9152: PPUSH
9153: LD_INT 5
9155: PPUSH
9156: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
9160: CALL_OW 44
9164: PPUSH
9165: LD_VAR 0 1
9169: PPUSH
9170: CALL_OW 52
// DialogueOn ;
9174: CALL_OW 6
// CenterNowOnXY ( 169 , 115 ) ;
9178: LD_INT 169
9180: PPUSH
9181: LD_INT 115
9183: PPUSH
9184: CALL_OW 86
// DWait ( 0 0$01 ) ;
9188: LD_INT 35
9190: PPUSH
9191: CALL_OW 68
// CenterNowOnXY ( 63 , 115 ) ;
9195: LD_INT 63
9197: PPUSH
9198: LD_INT 115
9200: PPUSH
9201: CALL_OW 86
// DWait ( 0 0$01 ) ;
9205: LD_INT 35
9207: PPUSH
9208: CALL_OW 68
// DialogueOff ;
9212: CALL_OW 7
// ComMoveXY ( i , 57 , 53 ) ;
9216: LD_VAR 0 1
9220: PPUSH
9221: LD_INT 57
9223: PPUSH
9224: LD_INT 53
9226: PPUSH
9227: CALL_OW 111
// Wait ( Rand ( 3 3$00 , 7 7$00 ) ) ;
9231: LD_INT 6300
9233: PPUSH
9234: LD_INT 14700
9236: PPUSH
9237: CALL_OW 12
9241: PPUSH
9242: CALL_OW 67
// PlaceUnitXY ( Saseda , 86 , 112 , false ) ;
9246: LD_EXP 18
9250: PPUSH
9251: LD_INT 86
9253: PPUSH
9254: LD_INT 112
9256: PPUSH
9257: LD_INT 0
9259: PPUSH
9260: CALL_OW 48
// Wait ( 0 0$0.3 ) ;
9264: LD_INT 10
9266: PPUSH
9267: CALL_OW 67
// SayRadio ( Saseda , DPM_Sa1 ) ;
9271: LD_EXP 18
9275: PPUSH
9276: LD_STRING DPM_Sa1
9278: PPUSH
9279: CALL_OW 94
// ChangeMissionObjectives ( PM_3 ) ;
9283: LD_STRING PM_3
9285: PPUSH
9286: CALL_OW 337
// end ;
9290: PPOPN 1
9292: END
// every 0 0$01 trigger See ( 3 , Saseda ) do
9293: LD_INT 3
9295: PPUSH
9296: LD_EXP 18
9300: PPUSH
9301: CALL_OW 292
9305: IFFALSE 9354
9307: GO 9309
9309: DISABLE
// begin Say ( Saseda , DPM_Sa2 ) ;
9310: LD_EXP 18
9314: PPUSH
9315: LD_STRING DPM_Sa2
9317: PPUSH
9318: CALL_OW 88
// ChangeMissionObjectives ( PM_4 ) ;
9322: LD_STRING PM_4
9324: PPUSH
9325: CALL_OW 337
// SetTech ( tech_rocket , 3 , state_enabled ) ;
9329: LD_INT 40
9331: PPUSH
9332: LD_INT 3
9334: PPUSH
9335: LD_INT 1
9337: PPUSH
9338: CALL_OW 322
// SetSide ( Saseda , 3 ) ;
9342: LD_EXP 18
9346: PPUSH
9347: LD_INT 3
9349: PPUSH
9350: CALL_OW 235
// end ;
9354: END
// every 16 16$00 trigger not medal1 and FilterAllUnits ( [ f_side , 6 ] ) = 0 do
9355: LD_EXP 3
9359: NOT
9360: PUSH
9361: LD_INT 22
9363: PUSH
9364: LD_INT 6
9366: PUSH
9367: EMPTY
9368: LIST
9369: LIST
9370: PPUSH
9371: CALL_OW 69
9375: PUSH
9376: LD_INT 0
9378: EQUAL
9379: AND
9380: IFFALSE 9427
9382: GO 9384
9384: DISABLE
// begin Say ( Stolypin , DPM_S3 ) ;
9385: LD_EXP 16
9389: PPUSH
9390: LD_STRING DPM_S3
9392: PPUSH
9393: CALL_OW 88
// PlaceSeeing ( 62 , 113 , 3 , 10 ) ;
9397: LD_INT 62
9399: PPUSH
9400: LD_INT 113
9402: PPUSH
9403: LD_INT 3
9405: PPUSH
9406: LD_INT 10
9408: PPUSH
9409: CALL_OW 330
// CenterOnXY ( 62 , 113 ) ;
9413: LD_INT 62
9415: PPUSH
9416: LD_INT 113
9418: PPUSH
9419: CALL_OW 84
// CounterAttack ;
9423: CALL 5738 0 0
// end ; end_of_file
9427: END
// on LeaveBuilding ( b , h ) do begin if GetSide ( b ) = 1 then
9428: LD_VAR 0 1
9432: PPUSH
9433: CALL_OW 255
9437: PUSH
9438: LD_INT 1
9440: EQUAL
9441: IFFALSE 9477
// if not us_retreat then
9443: LD_EXP 22
9447: NOT
9448: IFFALSE 9477
// if GetClass ( h ) = 1 then
9450: LD_VAR 0 2
9454: PPUSH
9455: CALL_OW 257
9459: PUSH
9460: LD_INT 1
9462: EQUAL
9463: IFFALSE 9477
// ComEnterUnit ( h , us_arm ) ;
9465: LD_VAR 0 2
9469: PPUSH
9470: LD_INT 69
9472: PPUSH
9473: CALL_OW 120
// end ;
9477: PPOPN 2
9479: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
9480: LD_VAR 0 1
9484: PPUSH
9485: CALL 22180 0 1
// if GetSide ( un ) = 1 then
9489: LD_VAR 0 1
9493: PPUSH
9494: CALL_OW 255
9498: PUSH
9499: LD_INT 1
9501: EQUAL
9502: IFFALSE 9518
// us_count := us_count + 1 ;
9504: LD_ADDR_EXP 24
9508: PUSH
9509: LD_EXP 24
9513: PUSH
9514: LD_INT 1
9516: PLUS
9517: ST_TO_ADDR
// if un in us_force then
9518: LD_VAR 0 1
9522: PUSH
9523: LD_EXP 12
9527: IN
9528: IFFALSE 9546
// us_force := us_force diff un ;
9530: LD_ADDR_EXP 12
9534: PUSH
9535: LD_EXP 12
9539: PUSH
9540: LD_VAR 0 1
9544: DIFF
9545: ST_TO_ADDR
// if un in ar_force then
9546: LD_VAR 0 1
9550: PUSH
9551: LD_EXP 11
9555: IN
9556: IFFALSE 9574
// ar_force := ar_force diff un ;
9558: LD_ADDR_EXP 11
9562: PUSH
9563: LD_EXP 11
9567: PUSH
9568: LD_VAR 0 1
9572: DIFF
9573: ST_TO_ADDR
// if un = Stolypin then
9574: LD_VAR 0 1
9578: PUSH
9579: LD_EXP 16
9583: EQUAL
9584: IFFALSE 9593
// YouLost ( dead ) ;
9586: LD_STRING dead
9588: PPUSH
9589: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) then
9593: LD_VAR 0 1
9597: PUSH
9598: LD_INT 22
9600: PUSH
9601: LD_INT 1
9603: PUSH
9604: EMPTY
9605: LIST
9606: LIST
9607: PUSH
9608: LD_INT 30
9610: PUSH
9611: LD_INT 0
9613: PUSH
9614: EMPTY
9615: LIST
9616: LIST
9617: PUSH
9618: EMPTY
9619: LIST
9620: LIST
9621: PPUSH
9622: CALL_OW 69
9626: IN
9627: IFFALSE 9636
// YouLost ( depot ) ;
9629: LD_STRING depot
9631: PPUSH
9632: CALL_OW 104
// if GetSide ( un ) = 6 then
9636: LD_VAR 0 1
9640: PPUSH
9641: CALL_OW 255
9645: PUSH
9646: LD_INT 6
9648: EQUAL
9649: IFFALSE 9665
// dest_counter := dest_counter + 1 ;
9651: LD_ADDR_EXP 8
9655: PUSH
9656: LD_EXP 8
9660: PUSH
9661: LD_INT 1
9663: PLUS
9664: ST_TO_ADDR
// end ;
9665: PPOPN 1
9667: END
// on VehicleConstructed ( un , fac ) do begin if GetSide ( un ) = 1 then
9668: LD_VAR 0 1
9672: PPUSH
9673: CALL_OW 255
9677: PUSH
9678: LD_INT 1
9680: EQUAL
9681: IFFALSE 9698
// ComMoveXY ( un , 57 , 52 ) ;
9683: LD_VAR 0 1
9687: PPUSH
9688: LD_INT 57
9690: PPUSH
9691: LD_INT 52
9693: PPUSH
9694: CALL_OW 111
// end ;
9698: PPOPN 2
9700: END
// on Contact ( s1 , s2 ) do begin if not us_alert then
9701: LD_EXP 21
9705: NOT
9706: IFFALSE 9756
// if ( s1 = 3 and s2 = 1 ) or ( s1 = 1 and s2 = 3 ) then
9708: LD_VAR 0 1
9712: PUSH
9713: LD_INT 3
9715: EQUAL
9716: PUSH
9717: LD_VAR 0 2
9721: PUSH
9722: LD_INT 1
9724: EQUAL
9725: AND
9726: PUSH
9727: LD_VAR 0 1
9731: PUSH
9732: LD_INT 1
9734: EQUAL
9735: PUSH
9736: LD_VAR 0 2
9740: PUSH
9741: LD_INT 3
9743: EQUAL
9744: AND
9745: OR
9746: IFFALSE 9756
// us_alert := true ;
9748: LD_ADDR_EXP 21
9752: PUSH
9753: LD_INT 1
9755: ST_TO_ADDR
// if ( s1 = 6 and s2 = 3 ) or ( s1 = 3 and s2 = 6 ) then
9756: LD_VAR 0 1
9760: PUSH
9761: LD_INT 6
9763: EQUAL
9764: PUSH
9765: LD_VAR 0 2
9769: PUSH
9770: LD_INT 3
9772: EQUAL
9773: AND
9774: PUSH
9775: LD_VAR 0 1
9779: PUSH
9780: LD_INT 3
9782: EQUAL
9783: PUSH
9784: LD_VAR 0 2
9788: PUSH
9789: LD_INT 6
9791: EQUAL
9792: AND
9793: OR
9794: IFFALSE 9803
// YouLost ( alat ) ;
9796: LD_STRING alat
9798: PPUSH
9799: CALL_OW 104
// end ;
9803: PPOPN 2
9805: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) = 2 and un in FilterAllUnits ( [ [ f_empty ] , [ f_type , unit_vehicle ] ] ) then
9806: LD_VAR 0 1
9810: PPUSH
9811: CALL_OW 255
9815: PUSH
9816: LD_INT 2
9818: EQUAL
9819: PUSH
9820: LD_VAR 0 1
9824: PUSH
9825: LD_INT 58
9827: PUSH
9828: EMPTY
9829: LIST
9830: PUSH
9831: LD_INT 21
9833: PUSH
9834: LD_INT 2
9836: PUSH
9837: EMPTY
9838: LIST
9839: LIST
9840: PUSH
9841: EMPTY
9842: LIST
9843: LIST
9844: PPUSH
9845: CALL_OW 69
9849: IN
9850: AND
9851: IFFALSE 9972
// if GetSide ( NearestUnitToUnit ( all_units diff un , un ) ) <> 2 then
9853: LD_OWVAR 3
9857: PUSH
9858: LD_VAR 0 1
9862: DIFF
9863: PPUSH
9864: LD_VAR 0 1
9868: PPUSH
9869: CALL_OW 74
9873: PPUSH
9874: CALL_OW 255
9878: PUSH
9879: LD_INT 2
9881: NONEQUAL
9882: IFFALSE 9972
// begin Wait ( 0 0$1.3 ) ;
9884: LD_INT 46
9886: PPUSH
9887: CALL_OW 67
// MineExplosion ( GetX ( un ) , GetY ( un ) , 1 ) ;
9891: LD_VAR 0 1
9895: PPUSH
9896: CALL_OW 250
9900: PPUSH
9901: LD_VAR 0 1
9905: PPUSH
9906: CALL_OW 251
9910: PPUSH
9911: LD_INT 1
9913: PPUSH
9914: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 1 ) ;
9918: LD_VAR 0 1
9922: PPUSH
9923: CALL_OW 250
9927: PPUSH
9928: LD_VAR 0 1
9932: PPUSH
9933: CALL_OW 251
9937: PPUSH
9938: LD_INT 1
9940: PPUSH
9941: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 1 ) ;
9945: LD_VAR 0 1
9949: PPUSH
9950: CALL_OW 250
9954: PPUSH
9955: LD_VAR 0 1
9959: PPUSH
9960: CALL_OW 251
9964: PPUSH
9965: LD_INT 1
9967: PPUSH
9968: CALL_OW 453
// end ; end ;
9972: PPOPN 1
9974: END
// on EvacuateVehicle ( driver , un , c1 , c2 ) do begin if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) and not GetSide ( NearestUnit ( un ) ) = 2 then
9975: LD_VAR 0 2
9979: PUSH
9980: LD_INT 22
9982: PUSH
9983: LD_INT 2
9985: PUSH
9986: EMPTY
9987: LIST
9988: LIST
9989: PUSH
9990: LD_INT 21
9992: PUSH
9993: LD_INT 2
9995: PUSH
9996: EMPTY
9997: LIST
9998: LIST
9999: PUSH
10000: EMPTY
10001: LIST
10002: LIST
10003: PPUSH
10004: CALL_OW 69
10008: IN
10009: PUSH
10010: LD_VAR 0 2
10014: PPUSH
10015: CALL 10545 0 1
10019: PPUSH
10020: CALL_OW 255
10024: PUSH
10025: LD_INT 2
10027: EQUAL
10028: NOT
10029: AND
10030: IFFALSE 10155
// begin Wait ( Rand ( 0 0$03 , 0 0$06 ) ) ;
10032: LD_INT 105
10034: PPUSH
10035: LD_INT 210
10037: PPUSH
10038: CALL_OW 12
10042: PPUSH
10043: CALL_OW 67
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
10047: LD_VAR 0 2
10051: PPUSH
10052: CALL_OW 250
10056: PPUSH
10057: LD_VAR 0 2
10061: PPUSH
10062: CALL_OW 251
10066: PPUSH
10067: LD_INT 3
10069: PPUSH
10070: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
10074: LD_VAR 0 2
10078: PPUSH
10079: CALL_OW 250
10083: PPUSH
10084: LD_VAR 0 2
10088: PPUSH
10089: CALL_OW 251
10093: PPUSH
10094: LD_INT 3
10096: PPUSH
10097: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
10101: LD_VAR 0 2
10105: PPUSH
10106: CALL_OW 250
10110: PPUSH
10111: LD_VAR 0 2
10115: PPUSH
10116: CALL_OW 251
10120: PPUSH
10121: LD_INT 3
10123: PPUSH
10124: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
10128: LD_VAR 0 2
10132: PPUSH
10133: CALL_OW 250
10137: PPUSH
10138: LD_VAR 0 2
10142: PPUSH
10143: CALL_OW 251
10147: PPUSH
10148: LD_INT 3
10150: PPUSH
10151: CALL_OW 453
// end ; end ;
10155: PPOPN 4
10157: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
10158: LD_VAR 0 1
10162: PPUSH
10163: LD_VAR 0 2
10167: PPUSH
10168: LD_VAR 0 3
10172: PPUSH
10173: CALL 22278 0 3
// end ;
10177: PPOPN 3
10179: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
10180: LD_VAR 0 1
10184: PPUSH
10185: CALL 22286 0 1
// end ; end_of_file
10189: PPOPN 1
10191: END
// export function Replace2 ( tab , j , k , value ) ; var i , tmp ; begin
10192: LD_INT 0
10194: PPUSH
10195: PPUSH
10196: PPUSH
// tmp := Replace ( tab [ j ] , k , value ) ;
10197: LD_ADDR_VAR 0 7
10201: PUSH
10202: LD_VAR 0 1
10206: PUSH
10207: LD_VAR 0 2
10211: ARRAY
10212: PPUSH
10213: LD_VAR 0 3
10217: PPUSH
10218: LD_VAR 0 4
10222: PPUSH
10223: CALL_OW 1
10227: ST_TO_ADDR
// tab := Replace ( tab , j , tmp ) ;
10228: LD_ADDR_VAR 0 1
10232: PUSH
10233: LD_VAR 0 1
10237: PPUSH
10238: LD_VAR 0 2
10242: PPUSH
10243: LD_VAR 0 7
10247: PPUSH
10248: CALL_OW 1
10252: ST_TO_ADDR
// result := tab ;
10253: LD_ADDR_VAR 0 5
10257: PUSH
10258: LD_VAR 0 1
10262: ST_TO_ADDR
// end ;
10263: LD_VAR 0 5
10267: RET
// export function IsDriver ( unit ) ; begin
10268: LD_INT 0
10270: PPUSH
// if unit in FilterAllUnits ( [ f_driving ] ) then
10271: LD_VAR 0 1
10275: PUSH
10276: LD_INT 55
10278: PUSH
10279: EMPTY
10280: LIST
10281: PPUSH
10282: CALL_OW 69
10286: IN
10287: IFFALSE 10306
// result := IsInUnit ( unit ) else
10289: LD_ADDR_VAR 0 2
10293: PUSH
10294: LD_VAR 0 1
10298: PPUSH
10299: CALL_OW 310
10303: ST_TO_ADDR
10304: GO 10314
// result := false ;
10306: LD_ADDR_VAR 0 2
10310: PUSH
10311: LD_INT 0
10313: ST_TO_ADDR
// end ;
10314: LD_VAR 0 2
10318: RET
// export function GetDriver ( veh ) ; var i , filter ; begin
10319: LD_INT 0
10321: PPUSH
10322: PPUSH
10323: PPUSH
// if not GetControl ( veh ) = control_manual then
10324: LD_VAR 0 1
10328: PPUSH
10329: CALL_OW 263
10333: PUSH
10334: LD_INT 1
10336: EQUAL
10337: NOT
10338: IFFALSE 10350
// result := false else
10340: LD_ADDR_VAR 0 2
10344: PUSH
10345: LD_INT 0
10347: ST_TO_ADDR
10348: GO 10495
// if veh in FilterAllUnits ( [ f_empty ] ) then
10350: LD_VAR 0 1
10354: PUSH
10355: LD_INT 58
10357: PUSH
10358: EMPTY
10359: LIST
10360: PPUSH
10361: CALL_OW 69
10365: IN
10366: IFFALSE 10378
// result := false else
10368: LD_ADDR_VAR 0 2
10372: PUSH
10373: LD_INT 0
10375: ST_TO_ADDR
10376: GO 10495
// begin filter := FilterAllUnits ( [ [ f_side , GetSide ( veh ) ] , [ f_driving ] ] ) ;
10378: LD_ADDR_VAR 0 4
10382: PUSH
10383: LD_INT 22
10385: PUSH
10386: LD_VAR 0 1
10390: PPUSH
10391: CALL_OW 255
10395: PUSH
10396: EMPTY
10397: LIST
10398: LIST
10399: PUSH
10400: LD_INT 55
10402: PUSH
10403: EMPTY
10404: LIST
10405: PUSH
10406: EMPTY
10407: LIST
10408: LIST
10409: PPUSH
10410: CALL_OW 69
10414: ST_TO_ADDR
// if not filter then
10415: LD_VAR 0 4
10419: NOT
10420: IFFALSE 10432
// result := false else
10422: LD_ADDR_VAR 0 2
10426: PUSH
10427: LD_INT 0
10429: ST_TO_ADDR
10430: GO 10495
// for i = 1 to filter do
10432: LD_ADDR_VAR 0 3
10436: PUSH
10437: DOUBLE
10438: LD_INT 1
10440: DEC
10441: ST_TO_ADDR
10442: LD_VAR 0 4
10446: PUSH
10447: FOR_TO
10448: IFFALSE 10493
// if IsDriver ( filter [ i ] ) = veh then
10450: LD_VAR 0 4
10454: PUSH
10455: LD_VAR 0 3
10459: ARRAY
10460: PPUSH
10461: CALL 10268 0 1
10465: PUSH
10466: LD_VAR 0 1
10470: EQUAL
10471: IFFALSE 10491
// begin result := filter [ i ] ;
10473: LD_ADDR_VAR 0 2
10477: PUSH
10478: LD_VAR 0 4
10482: PUSH
10483: LD_VAR 0 3
10487: ARRAY
10488: ST_TO_ADDR
// break ;
10489: GO 10493
// end ;
10491: GO 10447
10493: POP
10494: POP
// end ; end ;
10495: LD_VAR 0 2
10499: RET
// export function FindTarget ( unit ) ; begin
10500: LD_INT 0
10502: PPUSH
// result := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( unit ) ] ) , unit ) ;
10503: LD_ADDR_VAR 0 2
10507: PUSH
10508: LD_INT 81
10510: PUSH
10511: LD_VAR 0 1
10515: PPUSH
10516: CALL_OW 255
10520: PUSH
10521: EMPTY
10522: LIST
10523: LIST
10524: PPUSH
10525: CALL_OW 69
10529: PPUSH
10530: LD_VAR 0 1
10534: PPUSH
10535: CALL_OW 74
10539: ST_TO_ADDR
// end ;
10540: LD_VAR 0 2
10544: RET
// export function NearestUnit ( unit ) ; begin
10545: LD_INT 0
10547: PPUSH
// result := NearestUnitToUnit ( all_units diff unit , unit ) ;
10548: LD_ADDR_VAR 0 2
10552: PUSH
10553: LD_OWVAR 3
10557: PUSH
10558: LD_VAR 0 1
10562: DIFF
10563: PPUSH
10564: LD_VAR 0 1
10568: PPUSH
10569: CALL_OW 74
10573: ST_TO_ADDR
// end ; end_of_file
10574: LD_VAR 0 2
10578: RET
// every 12 12$00 do
10579: GO 10581
10581: DISABLE
// begin SetWeather ( 1 , 570 , 350 ) ;
10582: LD_INT 1
10584: PPUSH
10585: LD_INT 570
10587: PPUSH
10588: LD_INT 350
10590: PPUSH
10591: CALL_OW 550
// Wait ( Rand ( 5 5$00 , 10 10$00 ) ) ;
10595: LD_INT 10500
10597: PPUSH
10598: LD_INT 21000
10600: PPUSH
10601: CALL_OW 12
10605: PPUSH
10606: CALL_OW 67
// SetWeather ( 0 , 570 , 350 ) ;
10610: LD_INT 0
10612: PPUSH
10613: LD_INT 570
10615: PPUSH
10616: LD_INT 350
10618: PPUSH
10619: CALL_OW 550
// end ;
10623: END
// export function PrepareAnimals ( num1 , num2 , num3 , area ) ; var l , apeman , tiger , bird ; begin
10624: LD_INT 0
10626: PPUSH
10627: PPUSH
10628: PPUSH
10629: PPUSH
10630: PPUSH
// uc_nation = nation_nature ;
10631: LD_ADDR_OWVAR 21
10635: PUSH
10636: LD_INT 0
10638: ST_TO_ADDR
// uc_side = 0 ;
10639: LD_ADDR_OWVAR 20
10643: PUSH
10644: LD_INT 0
10646: ST_TO_ADDR
// l = 0 ;
10647: LD_ADDR_VAR 0 6
10651: PUSH
10652: LD_INT 0
10654: ST_TO_ADDR
// repeat begin uc_direction = Rand ( 0 , 5 ) ;
10655: LD_ADDR_OWVAR 24
10659: PUSH
10660: LD_INT 0
10662: PPUSH
10663: LD_INT 5
10665: PPUSH
10666: CALL_OW 12
10670: ST_TO_ADDR
// hc_agressivity = Rand ( - 5 , 5 ) ;
10671: LD_ADDR_OWVAR 35
10675: PUSH
10676: LD_INT 5
10678: NEG
10679: PPUSH
10680: LD_INT 5
10682: PPUSH
10683: CALL_OW 12
10687: ST_TO_ADDR
// hc_gallery =  ;
10688: LD_ADDR_OWVAR 33
10692: PUSH
10693: LD_STRING 
10695: ST_TO_ADDR
// hc_class = class_apeman ;
10696: LD_ADDR_OWVAR 28
10700: PUSH
10701: LD_INT 12
10703: ST_TO_ADDR
// hc_attr = [ Rand ( 11 , 13 ) , Rand ( 10 , 11 ) ] ;
10704: LD_ADDR_OWVAR 29
10708: PUSH
10709: LD_INT 11
10711: PPUSH
10712: LD_INT 13
10714: PPUSH
10715: CALL_OW 12
10719: PUSH
10720: LD_INT 10
10722: PPUSH
10723: LD_INT 11
10725: PPUSH
10726: CALL_OW 12
10730: PUSH
10731: EMPTY
10732: LIST
10733: LIST
10734: ST_TO_ADDR
// hc_sex = sex_male ;
10735: LD_ADDR_OWVAR 27
10739: PUSH
10740: LD_INT 1
10742: ST_TO_ADDR
// hc_skills = [ Rand ( 0 , 2 ) , 0 , 0 , 0 ] ;
10743: LD_ADDR_OWVAR 31
10747: PUSH
10748: LD_INT 0
10750: PPUSH
10751: LD_INT 2
10753: PPUSH
10754: CALL_OW 12
10758: PUSH
10759: LD_INT 0
10761: PUSH
10762: LD_INT 0
10764: PUSH
10765: LD_INT 0
10767: PUSH
10768: EMPTY
10769: LIST
10770: LIST
10771: LIST
10772: LIST
10773: ST_TO_ADDR
// apeman = CreateHuman ;
10774: LD_ADDR_VAR 0 7
10778: PUSH
10779: CALL_OW 44
10783: ST_TO_ADDR
// PlaceUnitArea ( apeman , area , false ) ;
10784: LD_VAR 0 7
10788: PPUSH
10789: LD_VAR 0 4
10793: PPUSH
10794: LD_INT 0
10796: PPUSH
10797: CALL_OW 49
// l = l + 1 ;
10801: LD_ADDR_VAR 0 6
10805: PUSH
10806: LD_VAR 0 6
10810: PUSH
10811: LD_INT 1
10813: PLUS
10814: ST_TO_ADDR
// end until l = num1 ;
10815: LD_VAR 0 6
10819: PUSH
10820: LD_VAR 0 1
10824: EQUAL
10825: IFFALSE 10655
// l = 0 ;
10827: LD_ADDR_VAR 0 6
10831: PUSH
10832: LD_INT 0
10834: ST_TO_ADDR
// repeat begin hc_agressivity = Rand ( 0 , 25 ) ;
10835: LD_ADDR_OWVAR 35
10839: PUSH
10840: LD_INT 0
10842: PPUSH
10843: LD_INT 25
10845: PPUSH
10846: CALL_OW 12
10850: ST_TO_ADDR
// hc_class = class_tiger ;
10851: LD_ADDR_OWVAR 28
10855: PUSH
10856: LD_INT 14
10858: ST_TO_ADDR
// hc_sex = sex_male ;
10859: LD_ADDR_OWVAR 27
10863: PUSH
10864: LD_INT 1
10866: ST_TO_ADDR
// hc_gallery = sandnature ;
10867: LD_ADDR_OWVAR 33
10871: PUSH
10872: LD_STRING sandnature
10874: ST_TO_ADDR
// hc_face_number = 3 ;
10875: LD_ADDR_OWVAR 34
10879: PUSH
10880: LD_INT 3
10882: ST_TO_ADDR
// tiger = CreateHuman ;
10883: LD_ADDR_VAR 0 8
10887: PUSH
10888: CALL_OW 44
10892: ST_TO_ADDR
// PlaceUnitArea ( tiger , area , false ) ;
10893: LD_VAR 0 8
10897: PPUSH
10898: LD_VAR 0 4
10902: PPUSH
10903: LD_INT 0
10905: PPUSH
10906: CALL_OW 49
// l = l + 1 ;
10910: LD_ADDR_VAR 0 6
10914: PUSH
10915: LD_VAR 0 6
10919: PUSH
10920: LD_INT 1
10922: PLUS
10923: ST_TO_ADDR
// end until l = num2 ;
10924: LD_VAR 0 6
10928: PUSH
10929: LD_VAR 0 2
10933: EQUAL
10934: IFFALSE 10835
// l = 0 ;
10936: LD_ADDR_VAR 0 6
10940: PUSH
10941: LD_INT 0
10943: ST_TO_ADDR
// repeat begin hc_class = class_phororhacos ;
10944: LD_ADDR_OWVAR 28
10948: PUSH
10949: LD_INT 18
10951: ST_TO_ADDR
// hc_gallery = sandnature ;
10952: LD_ADDR_OWVAR 33
10956: PUSH
10957: LD_STRING sandnature
10959: ST_TO_ADDR
// hc_face_number = 1 ;
10960: LD_ADDR_OWVAR 34
10964: PUSH
10965: LD_INT 1
10967: ST_TO_ADDR
// bird = CreateHuman ;
10968: LD_ADDR_VAR 0 9
10972: PUSH
10973: CALL_OW 44
10977: ST_TO_ADDR
// PlaceUnitAnywhere ( bird , false ) ;
10978: LD_VAR 0 9
10982: PPUSH
10983: LD_INT 0
10985: PPUSH
10986: CALL_OW 51
// l = l + 1 ;
10990: LD_ADDR_VAR 0 6
10994: PUSH
10995: LD_VAR 0 6
10999: PUSH
11000: LD_INT 1
11002: PLUS
11003: ST_TO_ADDR
// end until l = num3 ;
11004: LD_VAR 0 6
11008: PUSH
11009: LD_VAR 0 3
11013: EQUAL
11014: IFFALSE 10944
// end ; end_of_file
11016: LD_VAR 0 5
11020: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; every 1 do
11021: GO 11023
11023: DISABLE
// begin ru_radar := 98 ;
11024: LD_ADDR_EXP 26
11028: PUSH
11029: LD_INT 98
11031: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
11032: LD_ADDR_EXP 27
11036: PUSH
11037: LD_INT 89
11039: ST_TO_ADDR
// us_hack := 99 ;
11040: LD_ADDR_EXP 28
11044: PUSH
11045: LD_INT 99
11047: ST_TO_ADDR
// us_artillery := 97 ;
11048: LD_ADDR_EXP 29
11052: PUSH
11053: LD_INT 97
11055: ST_TO_ADDR
// ar_bio_bomb := 91 ;
11056: LD_ADDR_EXP 30
11060: PUSH
11061: LD_INT 91
11063: ST_TO_ADDR
// tech_Artillery := 80 ;
11064: LD_ADDR_EXP 31
11068: PUSH
11069: LD_INT 80
11071: ST_TO_ADDR
// tech_RadMat := 81 ;
11072: LD_ADDR_EXP 32
11076: PUSH
11077: LD_INT 81
11079: ST_TO_ADDR
// tech_BasicTools := 82 ;
11080: LD_ADDR_EXP 33
11084: PUSH
11085: LD_INT 82
11087: ST_TO_ADDR
// tech_Cargo := 83 ;
11088: LD_ADDR_EXP 34
11092: PUSH
11093: LD_INT 83
11095: ST_TO_ADDR
// tech_Track := 84 ;
11096: LD_ADDR_EXP 35
11100: PUSH
11101: LD_INT 84
11103: ST_TO_ADDR
// tech_Crane := 85 ;
11104: LD_ADDR_EXP 36
11108: PUSH
11109: LD_INT 85
11111: ST_TO_ADDR
// tech_Bulldozer := 86 ;
11112: LD_ADDR_EXP 37
11116: PUSH
11117: LD_INT 86
11119: ST_TO_ADDR
// tech_Hovercraft := 87 ;
11120: LD_ADDR_EXP 38
11124: PUSH
11125: LD_INT 87
11127: ST_TO_ADDR
// end ; end_of_file end_of_file
11128: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
11129: GO 11131
11131: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
11132: LD_STRING initStreamRollete();
11134: PPUSH
11135: CALL_OW 559
// InitStreamMode ;
11139: CALL 11148 0 0
// DefineStreamItems ( ) ;
11143: CALL 11588 0 0
// end ;
11147: END
// function InitStreamMode ; begin
11148: LD_INT 0
11150: PPUSH
// streamModeActive := false ;
11151: LD_ADDR_EXP 39
11155: PUSH
11156: LD_INT 0
11158: ST_TO_ADDR
// normalCounter := 36 ;
11159: LD_ADDR_EXP 40
11163: PUSH
11164: LD_INT 36
11166: ST_TO_ADDR
// hardcoreCounter := 16 ;
11167: LD_ADDR_EXP 41
11171: PUSH
11172: LD_INT 16
11174: ST_TO_ADDR
// sRocket := false ;
11175: LD_ADDR_EXP 44
11179: PUSH
11180: LD_INT 0
11182: ST_TO_ADDR
// sSpeed := false ;
11183: LD_ADDR_EXP 43
11187: PUSH
11188: LD_INT 0
11190: ST_TO_ADDR
// sEngine := false ;
11191: LD_ADDR_EXP 45
11195: PUSH
11196: LD_INT 0
11198: ST_TO_ADDR
// sSpec := false ;
11199: LD_ADDR_EXP 42
11203: PUSH
11204: LD_INT 0
11206: ST_TO_ADDR
// sLevel := false ;
11207: LD_ADDR_EXP 46
11211: PUSH
11212: LD_INT 0
11214: ST_TO_ADDR
// sArmoury := false ;
11215: LD_ADDR_EXP 47
11219: PUSH
11220: LD_INT 0
11222: ST_TO_ADDR
// sRadar := false ;
11223: LD_ADDR_EXP 48
11227: PUSH
11228: LD_INT 0
11230: ST_TO_ADDR
// sBunker := false ;
11231: LD_ADDR_EXP 49
11235: PUSH
11236: LD_INT 0
11238: ST_TO_ADDR
// sHack := false ;
11239: LD_ADDR_EXP 50
11243: PUSH
11244: LD_INT 0
11246: ST_TO_ADDR
// sFire := false ;
11247: LD_ADDR_EXP 51
11251: PUSH
11252: LD_INT 0
11254: ST_TO_ADDR
// sRefresh := false ;
11255: LD_ADDR_EXP 52
11259: PUSH
11260: LD_INT 0
11262: ST_TO_ADDR
// sExp := false ;
11263: LD_ADDR_EXP 53
11267: PUSH
11268: LD_INT 0
11270: ST_TO_ADDR
// sDepot := false ;
11271: LD_ADDR_EXP 54
11275: PUSH
11276: LD_INT 0
11278: ST_TO_ADDR
// sFlag := false ;
11279: LD_ADDR_EXP 55
11283: PUSH
11284: LD_INT 0
11286: ST_TO_ADDR
// sKamikadze := false ;
11287: LD_ADDR_EXP 63
11291: PUSH
11292: LD_INT 0
11294: ST_TO_ADDR
// sTroll := false ;
11295: LD_ADDR_EXP 64
11299: PUSH
11300: LD_INT 0
11302: ST_TO_ADDR
// sSlow := false ;
11303: LD_ADDR_EXP 65
11307: PUSH
11308: LD_INT 0
11310: ST_TO_ADDR
// sLack := false ;
11311: LD_ADDR_EXP 66
11315: PUSH
11316: LD_INT 0
11318: ST_TO_ADDR
// sTank := false ;
11319: LD_ADDR_EXP 68
11323: PUSH
11324: LD_INT 0
11326: ST_TO_ADDR
// sRemote := false ;
11327: LD_ADDR_EXP 69
11331: PUSH
11332: LD_INT 0
11334: ST_TO_ADDR
// sPowell := false ;
11335: LD_ADDR_EXP 70
11339: PUSH
11340: LD_INT 0
11342: ST_TO_ADDR
// sTeleport := false ;
11343: LD_ADDR_EXP 73
11347: PUSH
11348: LD_INT 0
11350: ST_TO_ADDR
// sOilTower := false ;
11351: LD_ADDR_EXP 75
11355: PUSH
11356: LD_INT 0
11358: ST_TO_ADDR
// sShovel := false ;
11359: LD_ADDR_EXP 76
11363: PUSH
11364: LD_INT 0
11366: ST_TO_ADDR
// sSheik := false ;
11367: LD_ADDR_EXP 77
11371: PUSH
11372: LD_INT 0
11374: ST_TO_ADDR
// sEarthquake := false ;
11375: LD_ADDR_EXP 79
11379: PUSH
11380: LD_INT 0
11382: ST_TO_ADDR
// sAI := false ;
11383: LD_ADDR_EXP 80
11387: PUSH
11388: LD_INT 0
11390: ST_TO_ADDR
// sCargo := false ;
11391: LD_ADDR_EXP 83
11395: PUSH
11396: LD_INT 0
11398: ST_TO_ADDR
// sDLaser := false ;
11399: LD_ADDR_EXP 84
11403: PUSH
11404: LD_INT 0
11406: ST_TO_ADDR
// sExchange := false ;
11407: LD_ADDR_EXP 85
11411: PUSH
11412: LD_INT 0
11414: ST_TO_ADDR
// sFac := false ;
11415: LD_ADDR_EXP 86
11419: PUSH
11420: LD_INT 0
11422: ST_TO_ADDR
// sPower := false ;
11423: LD_ADDR_EXP 87
11427: PUSH
11428: LD_INT 0
11430: ST_TO_ADDR
// sRandom := false ;
11431: LD_ADDR_EXP 88
11435: PUSH
11436: LD_INT 0
11438: ST_TO_ADDR
// sShield := false ;
11439: LD_ADDR_EXP 89
11443: PUSH
11444: LD_INT 0
11446: ST_TO_ADDR
// sTime := false ;
11447: LD_ADDR_EXP 90
11451: PUSH
11452: LD_INT 0
11454: ST_TO_ADDR
// sTools := false ;
11455: LD_ADDR_EXP 91
11459: PUSH
11460: LD_INT 0
11462: ST_TO_ADDR
// sSold := false ;
11463: LD_ADDR_EXP 56
11467: PUSH
11468: LD_INT 0
11470: ST_TO_ADDR
// sDiff := false ;
11471: LD_ADDR_EXP 57
11475: PUSH
11476: LD_INT 0
11478: ST_TO_ADDR
// sFog := false ;
11479: LD_ADDR_EXP 60
11483: PUSH
11484: LD_INT 0
11486: ST_TO_ADDR
// sReset := false ;
11487: LD_ADDR_EXP 61
11491: PUSH
11492: LD_INT 0
11494: ST_TO_ADDR
// sSun := false ;
11495: LD_ADDR_EXP 62
11499: PUSH
11500: LD_INT 0
11502: ST_TO_ADDR
// sTiger := false ;
11503: LD_ADDR_EXP 58
11507: PUSH
11508: LD_INT 0
11510: ST_TO_ADDR
// sBomb := false ;
11511: LD_ADDR_EXP 59
11515: PUSH
11516: LD_INT 0
11518: ST_TO_ADDR
// sWound := false ;
11519: LD_ADDR_EXP 67
11523: PUSH
11524: LD_INT 0
11526: ST_TO_ADDR
// sBetray := false ;
11527: LD_ADDR_EXP 71
11531: PUSH
11532: LD_INT 0
11534: ST_TO_ADDR
// sContamin := false ;
11535: LD_ADDR_EXP 72
11539: PUSH
11540: LD_INT 0
11542: ST_TO_ADDR
// sOil := false ;
11543: LD_ADDR_EXP 74
11547: PUSH
11548: LD_INT 0
11550: ST_TO_ADDR
// sStu := false ;
11551: LD_ADDR_EXP 78
11555: PUSH
11556: LD_INT 0
11558: ST_TO_ADDR
// sBazooka := false ;
11559: LD_ADDR_EXP 81
11563: PUSH
11564: LD_INT 0
11566: ST_TO_ADDR
// sMortar := false ;
11567: LD_ADDR_EXP 82
11571: PUSH
11572: LD_INT 0
11574: ST_TO_ADDR
// sRanger := false ;
11575: LD_ADDR_EXP 92
11579: PUSH
11580: LD_INT 0
11582: ST_TO_ADDR
// end ;
11583: LD_VAR 0 1
11587: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
11588: LD_INT 0
11590: PPUSH
11591: PPUSH
11592: PPUSH
11593: PPUSH
11594: PPUSH
// result := [ ] ;
11595: LD_ADDR_VAR 0 1
11599: PUSH
11600: EMPTY
11601: ST_TO_ADDR
// if campaign_id = 1 then
11602: LD_OWVAR 69
11606: PUSH
11607: LD_INT 1
11609: EQUAL
11610: IFFALSE 14548
// begin case mission_number of 1 :
11612: LD_OWVAR 70
11616: PUSH
11617: LD_INT 1
11619: DOUBLE
11620: EQUAL
11621: IFTRUE 11625
11623: GO 11689
11625: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
11626: LD_ADDR_VAR 0 1
11630: PUSH
11631: LD_INT 2
11633: PUSH
11634: LD_INT 4
11636: PUSH
11637: LD_INT 11
11639: PUSH
11640: LD_INT 12
11642: PUSH
11643: LD_INT 15
11645: PUSH
11646: LD_INT 16
11648: PUSH
11649: LD_INT 22
11651: PUSH
11652: LD_INT 23
11654: PUSH
11655: LD_INT 26
11657: PUSH
11658: EMPTY
11659: LIST
11660: LIST
11661: LIST
11662: LIST
11663: LIST
11664: LIST
11665: LIST
11666: LIST
11667: LIST
11668: PUSH
11669: LD_INT 101
11671: PUSH
11672: LD_INT 102
11674: PUSH
11675: LD_INT 106
11677: PUSH
11678: EMPTY
11679: LIST
11680: LIST
11681: LIST
11682: PUSH
11683: EMPTY
11684: LIST
11685: LIST
11686: ST_TO_ADDR
11687: GO 14546
11689: LD_INT 2
11691: DOUBLE
11692: EQUAL
11693: IFTRUE 11697
11695: GO 11769
11697: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
11698: LD_ADDR_VAR 0 1
11702: PUSH
11703: LD_INT 2
11705: PUSH
11706: LD_INT 4
11708: PUSH
11709: LD_INT 11
11711: PUSH
11712: LD_INT 12
11714: PUSH
11715: LD_INT 15
11717: PUSH
11718: LD_INT 16
11720: PUSH
11721: LD_INT 22
11723: PUSH
11724: LD_INT 23
11726: PUSH
11727: LD_INT 26
11729: PUSH
11730: EMPTY
11731: LIST
11732: LIST
11733: LIST
11734: LIST
11735: LIST
11736: LIST
11737: LIST
11738: LIST
11739: LIST
11740: PUSH
11741: LD_INT 101
11743: PUSH
11744: LD_INT 102
11746: PUSH
11747: LD_INT 105
11749: PUSH
11750: LD_INT 106
11752: PUSH
11753: LD_INT 108
11755: PUSH
11756: EMPTY
11757: LIST
11758: LIST
11759: LIST
11760: LIST
11761: LIST
11762: PUSH
11763: EMPTY
11764: LIST
11765: LIST
11766: ST_TO_ADDR
11767: GO 14546
11769: LD_INT 3
11771: DOUBLE
11772: EQUAL
11773: IFTRUE 11777
11775: GO 11853
11777: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
11778: LD_ADDR_VAR 0 1
11782: PUSH
11783: LD_INT 2
11785: PUSH
11786: LD_INT 4
11788: PUSH
11789: LD_INT 5
11791: PUSH
11792: LD_INT 11
11794: PUSH
11795: LD_INT 12
11797: PUSH
11798: LD_INT 15
11800: PUSH
11801: LD_INT 16
11803: PUSH
11804: LD_INT 22
11806: PUSH
11807: LD_INT 26
11809: PUSH
11810: LD_INT 36
11812: PUSH
11813: EMPTY
11814: LIST
11815: LIST
11816: LIST
11817: LIST
11818: LIST
11819: LIST
11820: LIST
11821: LIST
11822: LIST
11823: LIST
11824: PUSH
11825: LD_INT 101
11827: PUSH
11828: LD_INT 102
11830: PUSH
11831: LD_INT 105
11833: PUSH
11834: LD_INT 106
11836: PUSH
11837: LD_INT 108
11839: PUSH
11840: EMPTY
11841: LIST
11842: LIST
11843: LIST
11844: LIST
11845: LIST
11846: PUSH
11847: EMPTY
11848: LIST
11849: LIST
11850: ST_TO_ADDR
11851: GO 14546
11853: LD_INT 4
11855: DOUBLE
11856: EQUAL
11857: IFTRUE 11861
11859: GO 11945
11861: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
11862: LD_ADDR_VAR 0 1
11866: PUSH
11867: LD_INT 2
11869: PUSH
11870: LD_INT 4
11872: PUSH
11873: LD_INT 5
11875: PUSH
11876: LD_INT 8
11878: PUSH
11879: LD_INT 11
11881: PUSH
11882: LD_INT 12
11884: PUSH
11885: LD_INT 15
11887: PUSH
11888: LD_INT 16
11890: PUSH
11891: LD_INT 22
11893: PUSH
11894: LD_INT 23
11896: PUSH
11897: LD_INT 26
11899: PUSH
11900: LD_INT 36
11902: PUSH
11903: EMPTY
11904: LIST
11905: LIST
11906: LIST
11907: LIST
11908: LIST
11909: LIST
11910: LIST
11911: LIST
11912: LIST
11913: LIST
11914: LIST
11915: LIST
11916: PUSH
11917: LD_INT 101
11919: PUSH
11920: LD_INT 102
11922: PUSH
11923: LD_INT 105
11925: PUSH
11926: LD_INT 106
11928: PUSH
11929: LD_INT 108
11931: PUSH
11932: EMPTY
11933: LIST
11934: LIST
11935: LIST
11936: LIST
11937: LIST
11938: PUSH
11939: EMPTY
11940: LIST
11941: LIST
11942: ST_TO_ADDR
11943: GO 14546
11945: LD_INT 5
11947: DOUBLE
11948: EQUAL
11949: IFTRUE 11953
11951: GO 12053
11953: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
11954: LD_ADDR_VAR 0 1
11958: PUSH
11959: LD_INT 2
11961: PUSH
11962: LD_INT 4
11964: PUSH
11965: LD_INT 5
11967: PUSH
11968: LD_INT 6
11970: PUSH
11971: LD_INT 8
11973: PUSH
11974: LD_INT 11
11976: PUSH
11977: LD_INT 12
11979: PUSH
11980: LD_INT 15
11982: PUSH
11983: LD_INT 16
11985: PUSH
11986: LD_INT 22
11988: PUSH
11989: LD_INT 23
11991: PUSH
11992: LD_INT 25
11994: PUSH
11995: LD_INT 26
11997: PUSH
11998: LD_INT 36
12000: PUSH
12001: EMPTY
12002: LIST
12003: LIST
12004: LIST
12005: LIST
12006: LIST
12007: LIST
12008: LIST
12009: LIST
12010: LIST
12011: LIST
12012: LIST
12013: LIST
12014: LIST
12015: LIST
12016: PUSH
12017: LD_INT 101
12019: PUSH
12020: LD_INT 102
12022: PUSH
12023: LD_INT 105
12025: PUSH
12026: LD_INT 106
12028: PUSH
12029: LD_INT 108
12031: PUSH
12032: LD_INT 109
12034: PUSH
12035: LD_INT 112
12037: PUSH
12038: EMPTY
12039: LIST
12040: LIST
12041: LIST
12042: LIST
12043: LIST
12044: LIST
12045: LIST
12046: PUSH
12047: EMPTY
12048: LIST
12049: LIST
12050: ST_TO_ADDR
12051: GO 14546
12053: LD_INT 6
12055: DOUBLE
12056: EQUAL
12057: IFTRUE 12061
12059: GO 12181
12061: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
12062: LD_ADDR_VAR 0 1
12066: PUSH
12067: LD_INT 2
12069: PUSH
12070: LD_INT 4
12072: PUSH
12073: LD_INT 5
12075: PUSH
12076: LD_INT 6
12078: PUSH
12079: LD_INT 8
12081: PUSH
12082: LD_INT 11
12084: PUSH
12085: LD_INT 12
12087: PUSH
12088: LD_INT 15
12090: PUSH
12091: LD_INT 16
12093: PUSH
12094: LD_INT 20
12096: PUSH
12097: LD_INT 21
12099: PUSH
12100: LD_INT 22
12102: PUSH
12103: LD_INT 23
12105: PUSH
12106: LD_INT 25
12108: PUSH
12109: LD_INT 26
12111: PUSH
12112: LD_INT 30
12114: PUSH
12115: LD_INT 31
12117: PUSH
12118: LD_INT 32
12120: PUSH
12121: LD_INT 36
12123: PUSH
12124: EMPTY
12125: LIST
12126: LIST
12127: LIST
12128: LIST
12129: LIST
12130: LIST
12131: LIST
12132: LIST
12133: LIST
12134: LIST
12135: LIST
12136: LIST
12137: LIST
12138: LIST
12139: LIST
12140: LIST
12141: LIST
12142: LIST
12143: LIST
12144: PUSH
12145: LD_INT 101
12147: PUSH
12148: LD_INT 102
12150: PUSH
12151: LD_INT 105
12153: PUSH
12154: LD_INT 106
12156: PUSH
12157: LD_INT 108
12159: PUSH
12160: LD_INT 109
12162: PUSH
12163: LD_INT 112
12165: PUSH
12166: EMPTY
12167: LIST
12168: LIST
12169: LIST
12170: LIST
12171: LIST
12172: LIST
12173: LIST
12174: PUSH
12175: EMPTY
12176: LIST
12177: LIST
12178: ST_TO_ADDR
12179: GO 14546
12181: LD_INT 7
12183: DOUBLE
12184: EQUAL
12185: IFTRUE 12189
12187: GO 12289
12189: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
12190: LD_ADDR_VAR 0 1
12194: PUSH
12195: LD_INT 2
12197: PUSH
12198: LD_INT 4
12200: PUSH
12201: LD_INT 5
12203: PUSH
12204: LD_INT 7
12206: PUSH
12207: LD_INT 11
12209: PUSH
12210: LD_INT 12
12212: PUSH
12213: LD_INT 15
12215: PUSH
12216: LD_INT 16
12218: PUSH
12219: LD_INT 20
12221: PUSH
12222: LD_INT 21
12224: PUSH
12225: LD_INT 22
12227: PUSH
12228: LD_INT 23
12230: PUSH
12231: LD_INT 25
12233: PUSH
12234: LD_INT 26
12236: PUSH
12237: EMPTY
12238: LIST
12239: LIST
12240: LIST
12241: LIST
12242: LIST
12243: LIST
12244: LIST
12245: LIST
12246: LIST
12247: LIST
12248: LIST
12249: LIST
12250: LIST
12251: LIST
12252: PUSH
12253: LD_INT 101
12255: PUSH
12256: LD_INT 102
12258: PUSH
12259: LD_INT 103
12261: PUSH
12262: LD_INT 105
12264: PUSH
12265: LD_INT 106
12267: PUSH
12268: LD_INT 108
12270: PUSH
12271: LD_INT 112
12273: PUSH
12274: EMPTY
12275: LIST
12276: LIST
12277: LIST
12278: LIST
12279: LIST
12280: LIST
12281: LIST
12282: PUSH
12283: EMPTY
12284: LIST
12285: LIST
12286: ST_TO_ADDR
12287: GO 14546
12289: LD_INT 8
12291: DOUBLE
12292: EQUAL
12293: IFTRUE 12297
12295: GO 12425
12297: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
12298: LD_ADDR_VAR 0 1
12302: PUSH
12303: LD_INT 2
12305: PUSH
12306: LD_INT 4
12308: PUSH
12309: LD_INT 5
12311: PUSH
12312: LD_INT 6
12314: PUSH
12315: LD_INT 7
12317: PUSH
12318: LD_INT 8
12320: PUSH
12321: LD_INT 11
12323: PUSH
12324: LD_INT 12
12326: PUSH
12327: LD_INT 15
12329: PUSH
12330: LD_INT 16
12332: PUSH
12333: LD_INT 20
12335: PUSH
12336: LD_INT 21
12338: PUSH
12339: LD_INT 22
12341: PUSH
12342: LD_INT 23
12344: PUSH
12345: LD_INT 25
12347: PUSH
12348: LD_INT 26
12350: PUSH
12351: LD_INT 30
12353: PUSH
12354: LD_INT 31
12356: PUSH
12357: LD_INT 32
12359: PUSH
12360: LD_INT 36
12362: PUSH
12363: EMPTY
12364: LIST
12365: LIST
12366: LIST
12367: LIST
12368: LIST
12369: LIST
12370: LIST
12371: LIST
12372: LIST
12373: LIST
12374: LIST
12375: LIST
12376: LIST
12377: LIST
12378: LIST
12379: LIST
12380: LIST
12381: LIST
12382: LIST
12383: LIST
12384: PUSH
12385: LD_INT 101
12387: PUSH
12388: LD_INT 102
12390: PUSH
12391: LD_INT 103
12393: PUSH
12394: LD_INT 105
12396: PUSH
12397: LD_INT 106
12399: PUSH
12400: LD_INT 108
12402: PUSH
12403: LD_INT 109
12405: PUSH
12406: LD_INT 112
12408: PUSH
12409: EMPTY
12410: LIST
12411: LIST
12412: LIST
12413: LIST
12414: LIST
12415: LIST
12416: LIST
12417: LIST
12418: PUSH
12419: EMPTY
12420: LIST
12421: LIST
12422: ST_TO_ADDR
12423: GO 14546
12425: LD_INT 9
12427: DOUBLE
12428: EQUAL
12429: IFTRUE 12433
12431: GO 12569
12433: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
12434: LD_ADDR_VAR 0 1
12438: PUSH
12439: LD_INT 2
12441: PUSH
12442: LD_INT 4
12444: PUSH
12445: LD_INT 5
12447: PUSH
12448: LD_INT 6
12450: PUSH
12451: LD_INT 7
12453: PUSH
12454: LD_INT 8
12456: PUSH
12457: LD_INT 11
12459: PUSH
12460: LD_INT 12
12462: PUSH
12463: LD_INT 15
12465: PUSH
12466: LD_INT 16
12468: PUSH
12469: LD_INT 20
12471: PUSH
12472: LD_INT 21
12474: PUSH
12475: LD_INT 22
12477: PUSH
12478: LD_INT 23
12480: PUSH
12481: LD_INT 25
12483: PUSH
12484: LD_INT 26
12486: PUSH
12487: LD_INT 28
12489: PUSH
12490: LD_INT 30
12492: PUSH
12493: LD_INT 31
12495: PUSH
12496: LD_INT 32
12498: PUSH
12499: LD_INT 36
12501: PUSH
12502: EMPTY
12503: LIST
12504: LIST
12505: LIST
12506: LIST
12507: LIST
12508: LIST
12509: LIST
12510: LIST
12511: LIST
12512: LIST
12513: LIST
12514: LIST
12515: LIST
12516: LIST
12517: LIST
12518: LIST
12519: LIST
12520: LIST
12521: LIST
12522: LIST
12523: LIST
12524: PUSH
12525: LD_INT 101
12527: PUSH
12528: LD_INT 102
12530: PUSH
12531: LD_INT 103
12533: PUSH
12534: LD_INT 105
12536: PUSH
12537: LD_INT 106
12539: PUSH
12540: LD_INT 108
12542: PUSH
12543: LD_INT 109
12545: PUSH
12546: LD_INT 112
12548: PUSH
12549: LD_INT 114
12551: PUSH
12552: EMPTY
12553: LIST
12554: LIST
12555: LIST
12556: LIST
12557: LIST
12558: LIST
12559: LIST
12560: LIST
12561: LIST
12562: PUSH
12563: EMPTY
12564: LIST
12565: LIST
12566: ST_TO_ADDR
12567: GO 14546
12569: LD_INT 10
12571: DOUBLE
12572: EQUAL
12573: IFTRUE 12577
12575: GO 12761
12577: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
12578: LD_ADDR_VAR 0 1
12582: PUSH
12583: LD_INT 2
12585: PUSH
12586: LD_INT 4
12588: PUSH
12589: LD_INT 5
12591: PUSH
12592: LD_INT 6
12594: PUSH
12595: LD_INT 7
12597: PUSH
12598: LD_INT 8
12600: PUSH
12601: LD_INT 9
12603: PUSH
12604: LD_INT 10
12606: PUSH
12607: LD_INT 11
12609: PUSH
12610: LD_INT 12
12612: PUSH
12613: LD_INT 13
12615: PUSH
12616: LD_INT 14
12618: PUSH
12619: LD_INT 15
12621: PUSH
12622: LD_INT 16
12624: PUSH
12625: LD_INT 17
12627: PUSH
12628: LD_INT 18
12630: PUSH
12631: LD_INT 19
12633: PUSH
12634: LD_INT 20
12636: PUSH
12637: LD_INT 21
12639: PUSH
12640: LD_INT 22
12642: PUSH
12643: LD_INT 23
12645: PUSH
12646: LD_INT 24
12648: PUSH
12649: LD_INT 25
12651: PUSH
12652: LD_INT 26
12654: PUSH
12655: LD_INT 28
12657: PUSH
12658: LD_INT 30
12660: PUSH
12661: LD_INT 31
12663: PUSH
12664: LD_INT 32
12666: PUSH
12667: LD_INT 36
12669: PUSH
12670: EMPTY
12671: LIST
12672: LIST
12673: LIST
12674: LIST
12675: LIST
12676: LIST
12677: LIST
12678: LIST
12679: LIST
12680: LIST
12681: LIST
12682: LIST
12683: LIST
12684: LIST
12685: LIST
12686: LIST
12687: LIST
12688: LIST
12689: LIST
12690: LIST
12691: LIST
12692: LIST
12693: LIST
12694: LIST
12695: LIST
12696: LIST
12697: LIST
12698: LIST
12699: LIST
12700: PUSH
12701: LD_INT 101
12703: PUSH
12704: LD_INT 102
12706: PUSH
12707: LD_INT 103
12709: PUSH
12710: LD_INT 104
12712: PUSH
12713: LD_INT 105
12715: PUSH
12716: LD_INT 106
12718: PUSH
12719: LD_INT 107
12721: PUSH
12722: LD_INT 108
12724: PUSH
12725: LD_INT 109
12727: PUSH
12728: LD_INT 110
12730: PUSH
12731: LD_INT 111
12733: PUSH
12734: LD_INT 112
12736: PUSH
12737: LD_INT 114
12739: PUSH
12740: EMPTY
12741: LIST
12742: LIST
12743: LIST
12744: LIST
12745: LIST
12746: LIST
12747: LIST
12748: LIST
12749: LIST
12750: LIST
12751: LIST
12752: LIST
12753: LIST
12754: PUSH
12755: EMPTY
12756: LIST
12757: LIST
12758: ST_TO_ADDR
12759: GO 14546
12761: LD_INT 11
12763: DOUBLE
12764: EQUAL
12765: IFTRUE 12769
12767: GO 12961
12769: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
12770: LD_ADDR_VAR 0 1
12774: PUSH
12775: LD_INT 2
12777: PUSH
12778: LD_INT 3
12780: PUSH
12781: LD_INT 4
12783: PUSH
12784: LD_INT 5
12786: PUSH
12787: LD_INT 6
12789: PUSH
12790: LD_INT 7
12792: PUSH
12793: LD_INT 8
12795: PUSH
12796: LD_INT 9
12798: PUSH
12799: LD_INT 10
12801: PUSH
12802: LD_INT 11
12804: PUSH
12805: LD_INT 12
12807: PUSH
12808: LD_INT 13
12810: PUSH
12811: LD_INT 14
12813: PUSH
12814: LD_INT 15
12816: PUSH
12817: LD_INT 16
12819: PUSH
12820: LD_INT 17
12822: PUSH
12823: LD_INT 18
12825: PUSH
12826: LD_INT 19
12828: PUSH
12829: LD_INT 20
12831: PUSH
12832: LD_INT 21
12834: PUSH
12835: LD_INT 22
12837: PUSH
12838: LD_INT 23
12840: PUSH
12841: LD_INT 24
12843: PUSH
12844: LD_INT 25
12846: PUSH
12847: LD_INT 26
12849: PUSH
12850: LD_INT 28
12852: PUSH
12853: LD_INT 30
12855: PUSH
12856: LD_INT 31
12858: PUSH
12859: LD_INT 32
12861: PUSH
12862: LD_INT 34
12864: PUSH
12865: LD_INT 36
12867: PUSH
12868: EMPTY
12869: LIST
12870: LIST
12871: LIST
12872: LIST
12873: LIST
12874: LIST
12875: LIST
12876: LIST
12877: LIST
12878: LIST
12879: LIST
12880: LIST
12881: LIST
12882: LIST
12883: LIST
12884: LIST
12885: LIST
12886: LIST
12887: LIST
12888: LIST
12889: LIST
12890: LIST
12891: LIST
12892: LIST
12893: LIST
12894: LIST
12895: LIST
12896: LIST
12897: LIST
12898: LIST
12899: LIST
12900: PUSH
12901: LD_INT 101
12903: PUSH
12904: LD_INT 102
12906: PUSH
12907: LD_INT 103
12909: PUSH
12910: LD_INT 104
12912: PUSH
12913: LD_INT 105
12915: PUSH
12916: LD_INT 106
12918: PUSH
12919: LD_INT 107
12921: PUSH
12922: LD_INT 108
12924: PUSH
12925: LD_INT 109
12927: PUSH
12928: LD_INT 110
12930: PUSH
12931: LD_INT 111
12933: PUSH
12934: LD_INT 112
12936: PUSH
12937: LD_INT 114
12939: PUSH
12940: EMPTY
12941: LIST
12942: LIST
12943: LIST
12944: LIST
12945: LIST
12946: LIST
12947: LIST
12948: LIST
12949: LIST
12950: LIST
12951: LIST
12952: LIST
12953: LIST
12954: PUSH
12955: EMPTY
12956: LIST
12957: LIST
12958: ST_TO_ADDR
12959: GO 14546
12961: LD_INT 12
12963: DOUBLE
12964: EQUAL
12965: IFTRUE 12969
12967: GO 13177
12969: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
12970: LD_ADDR_VAR 0 1
12974: PUSH
12975: LD_INT 1
12977: PUSH
12978: LD_INT 2
12980: PUSH
12981: LD_INT 3
12983: PUSH
12984: LD_INT 4
12986: PUSH
12987: LD_INT 5
12989: PUSH
12990: LD_INT 6
12992: PUSH
12993: LD_INT 7
12995: PUSH
12996: LD_INT 8
12998: PUSH
12999: LD_INT 9
13001: PUSH
13002: LD_INT 10
13004: PUSH
13005: LD_INT 11
13007: PUSH
13008: LD_INT 12
13010: PUSH
13011: LD_INT 13
13013: PUSH
13014: LD_INT 14
13016: PUSH
13017: LD_INT 15
13019: PUSH
13020: LD_INT 16
13022: PUSH
13023: LD_INT 17
13025: PUSH
13026: LD_INT 18
13028: PUSH
13029: LD_INT 19
13031: PUSH
13032: LD_INT 20
13034: PUSH
13035: LD_INT 21
13037: PUSH
13038: LD_INT 22
13040: PUSH
13041: LD_INT 23
13043: PUSH
13044: LD_INT 24
13046: PUSH
13047: LD_INT 25
13049: PUSH
13050: LD_INT 26
13052: PUSH
13053: LD_INT 27
13055: PUSH
13056: LD_INT 28
13058: PUSH
13059: LD_INT 30
13061: PUSH
13062: LD_INT 31
13064: PUSH
13065: LD_INT 32
13067: PUSH
13068: LD_INT 33
13070: PUSH
13071: LD_INT 34
13073: PUSH
13074: LD_INT 36
13076: PUSH
13077: EMPTY
13078: LIST
13079: LIST
13080: LIST
13081: LIST
13082: LIST
13083: LIST
13084: LIST
13085: LIST
13086: LIST
13087: LIST
13088: LIST
13089: LIST
13090: LIST
13091: LIST
13092: LIST
13093: LIST
13094: LIST
13095: LIST
13096: LIST
13097: LIST
13098: LIST
13099: LIST
13100: LIST
13101: LIST
13102: LIST
13103: LIST
13104: LIST
13105: LIST
13106: LIST
13107: LIST
13108: LIST
13109: LIST
13110: LIST
13111: LIST
13112: PUSH
13113: LD_INT 101
13115: PUSH
13116: LD_INT 102
13118: PUSH
13119: LD_INT 103
13121: PUSH
13122: LD_INT 104
13124: PUSH
13125: LD_INT 105
13127: PUSH
13128: LD_INT 106
13130: PUSH
13131: LD_INT 107
13133: PUSH
13134: LD_INT 108
13136: PUSH
13137: LD_INT 109
13139: PUSH
13140: LD_INT 110
13142: PUSH
13143: LD_INT 111
13145: PUSH
13146: LD_INT 112
13148: PUSH
13149: LD_INT 113
13151: PUSH
13152: LD_INT 114
13154: PUSH
13155: EMPTY
13156: LIST
13157: LIST
13158: LIST
13159: LIST
13160: LIST
13161: LIST
13162: LIST
13163: LIST
13164: LIST
13165: LIST
13166: LIST
13167: LIST
13168: LIST
13169: LIST
13170: PUSH
13171: EMPTY
13172: LIST
13173: LIST
13174: ST_TO_ADDR
13175: GO 14546
13177: LD_INT 13
13179: DOUBLE
13180: EQUAL
13181: IFTRUE 13185
13183: GO 13381
13185: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
13186: LD_ADDR_VAR 0 1
13190: PUSH
13191: LD_INT 1
13193: PUSH
13194: LD_INT 2
13196: PUSH
13197: LD_INT 3
13199: PUSH
13200: LD_INT 4
13202: PUSH
13203: LD_INT 5
13205: PUSH
13206: LD_INT 8
13208: PUSH
13209: LD_INT 9
13211: PUSH
13212: LD_INT 10
13214: PUSH
13215: LD_INT 11
13217: PUSH
13218: LD_INT 12
13220: PUSH
13221: LD_INT 14
13223: PUSH
13224: LD_INT 15
13226: PUSH
13227: LD_INT 16
13229: PUSH
13230: LD_INT 17
13232: PUSH
13233: LD_INT 18
13235: PUSH
13236: LD_INT 19
13238: PUSH
13239: LD_INT 20
13241: PUSH
13242: LD_INT 21
13244: PUSH
13245: LD_INT 22
13247: PUSH
13248: LD_INT 23
13250: PUSH
13251: LD_INT 24
13253: PUSH
13254: LD_INT 25
13256: PUSH
13257: LD_INT 26
13259: PUSH
13260: LD_INT 27
13262: PUSH
13263: LD_INT 28
13265: PUSH
13266: LD_INT 30
13268: PUSH
13269: LD_INT 31
13271: PUSH
13272: LD_INT 32
13274: PUSH
13275: LD_INT 33
13277: PUSH
13278: LD_INT 34
13280: PUSH
13281: LD_INT 36
13283: PUSH
13284: EMPTY
13285: LIST
13286: LIST
13287: LIST
13288: LIST
13289: LIST
13290: LIST
13291: LIST
13292: LIST
13293: LIST
13294: LIST
13295: LIST
13296: LIST
13297: LIST
13298: LIST
13299: LIST
13300: LIST
13301: LIST
13302: LIST
13303: LIST
13304: LIST
13305: LIST
13306: LIST
13307: LIST
13308: LIST
13309: LIST
13310: LIST
13311: LIST
13312: LIST
13313: LIST
13314: LIST
13315: LIST
13316: PUSH
13317: LD_INT 101
13319: PUSH
13320: LD_INT 102
13322: PUSH
13323: LD_INT 103
13325: PUSH
13326: LD_INT 104
13328: PUSH
13329: LD_INT 105
13331: PUSH
13332: LD_INT 106
13334: PUSH
13335: LD_INT 107
13337: PUSH
13338: LD_INT 108
13340: PUSH
13341: LD_INT 109
13343: PUSH
13344: LD_INT 110
13346: PUSH
13347: LD_INT 111
13349: PUSH
13350: LD_INT 112
13352: PUSH
13353: LD_INT 113
13355: PUSH
13356: LD_INT 114
13358: PUSH
13359: EMPTY
13360: LIST
13361: LIST
13362: LIST
13363: LIST
13364: LIST
13365: LIST
13366: LIST
13367: LIST
13368: LIST
13369: LIST
13370: LIST
13371: LIST
13372: LIST
13373: LIST
13374: PUSH
13375: EMPTY
13376: LIST
13377: LIST
13378: ST_TO_ADDR
13379: GO 14546
13381: LD_INT 14
13383: DOUBLE
13384: EQUAL
13385: IFTRUE 13389
13387: GO 13601
13389: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
13390: LD_ADDR_VAR 0 1
13394: PUSH
13395: LD_INT 1
13397: PUSH
13398: LD_INT 2
13400: PUSH
13401: LD_INT 3
13403: PUSH
13404: LD_INT 4
13406: PUSH
13407: LD_INT 5
13409: PUSH
13410: LD_INT 6
13412: PUSH
13413: LD_INT 7
13415: PUSH
13416: LD_INT 8
13418: PUSH
13419: LD_INT 9
13421: PUSH
13422: LD_INT 10
13424: PUSH
13425: LD_INT 11
13427: PUSH
13428: LD_INT 12
13430: PUSH
13431: LD_INT 13
13433: PUSH
13434: LD_INT 14
13436: PUSH
13437: LD_INT 15
13439: PUSH
13440: LD_INT 16
13442: PUSH
13443: LD_INT 17
13445: PUSH
13446: LD_INT 18
13448: PUSH
13449: LD_INT 19
13451: PUSH
13452: LD_INT 20
13454: PUSH
13455: LD_INT 21
13457: PUSH
13458: LD_INT 22
13460: PUSH
13461: LD_INT 23
13463: PUSH
13464: LD_INT 24
13466: PUSH
13467: LD_INT 25
13469: PUSH
13470: LD_INT 26
13472: PUSH
13473: LD_INT 27
13475: PUSH
13476: LD_INT 28
13478: PUSH
13479: LD_INT 29
13481: PUSH
13482: LD_INT 30
13484: PUSH
13485: LD_INT 31
13487: PUSH
13488: LD_INT 32
13490: PUSH
13491: LD_INT 33
13493: PUSH
13494: LD_INT 34
13496: PUSH
13497: LD_INT 36
13499: PUSH
13500: EMPTY
13501: LIST
13502: LIST
13503: LIST
13504: LIST
13505: LIST
13506: LIST
13507: LIST
13508: LIST
13509: LIST
13510: LIST
13511: LIST
13512: LIST
13513: LIST
13514: LIST
13515: LIST
13516: LIST
13517: LIST
13518: LIST
13519: LIST
13520: LIST
13521: LIST
13522: LIST
13523: LIST
13524: LIST
13525: LIST
13526: LIST
13527: LIST
13528: LIST
13529: LIST
13530: LIST
13531: LIST
13532: LIST
13533: LIST
13534: LIST
13535: LIST
13536: PUSH
13537: LD_INT 101
13539: PUSH
13540: LD_INT 102
13542: PUSH
13543: LD_INT 103
13545: PUSH
13546: LD_INT 104
13548: PUSH
13549: LD_INT 105
13551: PUSH
13552: LD_INT 106
13554: PUSH
13555: LD_INT 107
13557: PUSH
13558: LD_INT 108
13560: PUSH
13561: LD_INT 109
13563: PUSH
13564: LD_INT 110
13566: PUSH
13567: LD_INT 111
13569: PUSH
13570: LD_INT 112
13572: PUSH
13573: LD_INT 113
13575: PUSH
13576: LD_INT 114
13578: PUSH
13579: EMPTY
13580: LIST
13581: LIST
13582: LIST
13583: LIST
13584: LIST
13585: LIST
13586: LIST
13587: LIST
13588: LIST
13589: LIST
13590: LIST
13591: LIST
13592: LIST
13593: LIST
13594: PUSH
13595: EMPTY
13596: LIST
13597: LIST
13598: ST_TO_ADDR
13599: GO 14546
13601: LD_INT 15
13603: DOUBLE
13604: EQUAL
13605: IFTRUE 13609
13607: GO 13821
13609: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
13610: LD_ADDR_VAR 0 1
13614: PUSH
13615: LD_INT 1
13617: PUSH
13618: LD_INT 2
13620: PUSH
13621: LD_INT 3
13623: PUSH
13624: LD_INT 4
13626: PUSH
13627: LD_INT 5
13629: PUSH
13630: LD_INT 6
13632: PUSH
13633: LD_INT 7
13635: PUSH
13636: LD_INT 8
13638: PUSH
13639: LD_INT 9
13641: PUSH
13642: LD_INT 10
13644: PUSH
13645: LD_INT 11
13647: PUSH
13648: LD_INT 12
13650: PUSH
13651: LD_INT 13
13653: PUSH
13654: LD_INT 14
13656: PUSH
13657: LD_INT 15
13659: PUSH
13660: LD_INT 16
13662: PUSH
13663: LD_INT 17
13665: PUSH
13666: LD_INT 18
13668: PUSH
13669: LD_INT 19
13671: PUSH
13672: LD_INT 20
13674: PUSH
13675: LD_INT 21
13677: PUSH
13678: LD_INT 22
13680: PUSH
13681: LD_INT 23
13683: PUSH
13684: LD_INT 24
13686: PUSH
13687: LD_INT 25
13689: PUSH
13690: LD_INT 26
13692: PUSH
13693: LD_INT 27
13695: PUSH
13696: LD_INT 28
13698: PUSH
13699: LD_INT 29
13701: PUSH
13702: LD_INT 30
13704: PUSH
13705: LD_INT 31
13707: PUSH
13708: LD_INT 32
13710: PUSH
13711: LD_INT 33
13713: PUSH
13714: LD_INT 34
13716: PUSH
13717: LD_INT 36
13719: PUSH
13720: EMPTY
13721: LIST
13722: LIST
13723: LIST
13724: LIST
13725: LIST
13726: LIST
13727: LIST
13728: LIST
13729: LIST
13730: LIST
13731: LIST
13732: LIST
13733: LIST
13734: LIST
13735: LIST
13736: LIST
13737: LIST
13738: LIST
13739: LIST
13740: LIST
13741: LIST
13742: LIST
13743: LIST
13744: LIST
13745: LIST
13746: LIST
13747: LIST
13748: LIST
13749: LIST
13750: LIST
13751: LIST
13752: LIST
13753: LIST
13754: LIST
13755: LIST
13756: PUSH
13757: LD_INT 101
13759: PUSH
13760: LD_INT 102
13762: PUSH
13763: LD_INT 103
13765: PUSH
13766: LD_INT 104
13768: PUSH
13769: LD_INT 105
13771: PUSH
13772: LD_INT 106
13774: PUSH
13775: LD_INT 107
13777: PUSH
13778: LD_INT 108
13780: PUSH
13781: LD_INT 109
13783: PUSH
13784: LD_INT 110
13786: PUSH
13787: LD_INT 111
13789: PUSH
13790: LD_INT 112
13792: PUSH
13793: LD_INT 113
13795: PUSH
13796: LD_INT 114
13798: PUSH
13799: EMPTY
13800: LIST
13801: LIST
13802: LIST
13803: LIST
13804: LIST
13805: LIST
13806: LIST
13807: LIST
13808: LIST
13809: LIST
13810: LIST
13811: LIST
13812: LIST
13813: LIST
13814: PUSH
13815: EMPTY
13816: LIST
13817: LIST
13818: ST_TO_ADDR
13819: GO 14546
13821: LD_INT 16
13823: DOUBLE
13824: EQUAL
13825: IFTRUE 13829
13827: GO 13953
13829: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
13830: LD_ADDR_VAR 0 1
13834: PUSH
13835: LD_INT 2
13837: PUSH
13838: LD_INT 4
13840: PUSH
13841: LD_INT 5
13843: PUSH
13844: LD_INT 7
13846: PUSH
13847: LD_INT 11
13849: PUSH
13850: LD_INT 12
13852: PUSH
13853: LD_INT 15
13855: PUSH
13856: LD_INT 16
13858: PUSH
13859: LD_INT 20
13861: PUSH
13862: LD_INT 21
13864: PUSH
13865: LD_INT 22
13867: PUSH
13868: LD_INT 23
13870: PUSH
13871: LD_INT 25
13873: PUSH
13874: LD_INT 26
13876: PUSH
13877: LD_INT 30
13879: PUSH
13880: LD_INT 31
13882: PUSH
13883: LD_INT 32
13885: PUSH
13886: LD_INT 33
13888: PUSH
13889: LD_INT 34
13891: PUSH
13892: EMPTY
13893: LIST
13894: LIST
13895: LIST
13896: LIST
13897: LIST
13898: LIST
13899: LIST
13900: LIST
13901: LIST
13902: LIST
13903: LIST
13904: LIST
13905: LIST
13906: LIST
13907: LIST
13908: LIST
13909: LIST
13910: LIST
13911: LIST
13912: PUSH
13913: LD_INT 101
13915: PUSH
13916: LD_INT 102
13918: PUSH
13919: LD_INT 103
13921: PUSH
13922: LD_INT 106
13924: PUSH
13925: LD_INT 108
13927: PUSH
13928: LD_INT 112
13930: PUSH
13931: LD_INT 113
13933: PUSH
13934: LD_INT 114
13936: PUSH
13937: EMPTY
13938: LIST
13939: LIST
13940: LIST
13941: LIST
13942: LIST
13943: LIST
13944: LIST
13945: LIST
13946: PUSH
13947: EMPTY
13948: LIST
13949: LIST
13950: ST_TO_ADDR
13951: GO 14546
13953: LD_INT 17
13955: DOUBLE
13956: EQUAL
13957: IFTRUE 13961
13959: GO 14173
13961: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
13962: LD_ADDR_VAR 0 1
13966: PUSH
13967: LD_INT 1
13969: PUSH
13970: LD_INT 2
13972: PUSH
13973: LD_INT 3
13975: PUSH
13976: LD_INT 4
13978: PUSH
13979: LD_INT 5
13981: PUSH
13982: LD_INT 6
13984: PUSH
13985: LD_INT 7
13987: PUSH
13988: LD_INT 8
13990: PUSH
13991: LD_INT 9
13993: PUSH
13994: LD_INT 10
13996: PUSH
13997: LD_INT 11
13999: PUSH
14000: LD_INT 12
14002: PUSH
14003: LD_INT 13
14005: PUSH
14006: LD_INT 14
14008: PUSH
14009: LD_INT 15
14011: PUSH
14012: LD_INT 16
14014: PUSH
14015: LD_INT 17
14017: PUSH
14018: LD_INT 18
14020: PUSH
14021: LD_INT 19
14023: PUSH
14024: LD_INT 20
14026: PUSH
14027: LD_INT 21
14029: PUSH
14030: LD_INT 22
14032: PUSH
14033: LD_INT 23
14035: PUSH
14036: LD_INT 24
14038: PUSH
14039: LD_INT 25
14041: PUSH
14042: LD_INT 26
14044: PUSH
14045: LD_INT 27
14047: PUSH
14048: LD_INT 28
14050: PUSH
14051: LD_INT 29
14053: PUSH
14054: LD_INT 30
14056: PUSH
14057: LD_INT 31
14059: PUSH
14060: LD_INT 32
14062: PUSH
14063: LD_INT 33
14065: PUSH
14066: LD_INT 34
14068: PUSH
14069: LD_INT 36
14071: PUSH
14072: EMPTY
14073: LIST
14074: LIST
14075: LIST
14076: LIST
14077: LIST
14078: LIST
14079: LIST
14080: LIST
14081: LIST
14082: LIST
14083: LIST
14084: LIST
14085: LIST
14086: LIST
14087: LIST
14088: LIST
14089: LIST
14090: LIST
14091: LIST
14092: LIST
14093: LIST
14094: LIST
14095: LIST
14096: LIST
14097: LIST
14098: LIST
14099: LIST
14100: LIST
14101: LIST
14102: LIST
14103: LIST
14104: LIST
14105: LIST
14106: LIST
14107: LIST
14108: PUSH
14109: LD_INT 101
14111: PUSH
14112: LD_INT 102
14114: PUSH
14115: LD_INT 103
14117: PUSH
14118: LD_INT 104
14120: PUSH
14121: LD_INT 105
14123: PUSH
14124: LD_INT 106
14126: PUSH
14127: LD_INT 107
14129: PUSH
14130: LD_INT 108
14132: PUSH
14133: LD_INT 109
14135: PUSH
14136: LD_INT 110
14138: PUSH
14139: LD_INT 111
14141: PUSH
14142: LD_INT 112
14144: PUSH
14145: LD_INT 113
14147: PUSH
14148: LD_INT 114
14150: PUSH
14151: EMPTY
14152: LIST
14153: LIST
14154: LIST
14155: LIST
14156: LIST
14157: LIST
14158: LIST
14159: LIST
14160: LIST
14161: LIST
14162: LIST
14163: LIST
14164: LIST
14165: LIST
14166: PUSH
14167: EMPTY
14168: LIST
14169: LIST
14170: ST_TO_ADDR
14171: GO 14546
14173: LD_INT 18
14175: DOUBLE
14176: EQUAL
14177: IFTRUE 14181
14179: GO 14317
14181: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
14182: LD_ADDR_VAR 0 1
14186: PUSH
14187: LD_INT 2
14189: PUSH
14190: LD_INT 4
14192: PUSH
14193: LD_INT 5
14195: PUSH
14196: LD_INT 7
14198: PUSH
14199: LD_INT 11
14201: PUSH
14202: LD_INT 12
14204: PUSH
14205: LD_INT 15
14207: PUSH
14208: LD_INT 16
14210: PUSH
14211: LD_INT 20
14213: PUSH
14214: LD_INT 21
14216: PUSH
14217: LD_INT 22
14219: PUSH
14220: LD_INT 23
14222: PUSH
14223: LD_INT 25
14225: PUSH
14226: LD_INT 26
14228: PUSH
14229: LD_INT 30
14231: PUSH
14232: LD_INT 31
14234: PUSH
14235: LD_INT 32
14237: PUSH
14238: LD_INT 33
14240: PUSH
14241: LD_INT 34
14243: PUSH
14244: LD_INT 35
14246: PUSH
14247: LD_INT 36
14249: PUSH
14250: EMPTY
14251: LIST
14252: LIST
14253: LIST
14254: LIST
14255: LIST
14256: LIST
14257: LIST
14258: LIST
14259: LIST
14260: LIST
14261: LIST
14262: LIST
14263: LIST
14264: LIST
14265: LIST
14266: LIST
14267: LIST
14268: LIST
14269: LIST
14270: LIST
14271: LIST
14272: PUSH
14273: LD_INT 101
14275: PUSH
14276: LD_INT 102
14278: PUSH
14279: LD_INT 103
14281: PUSH
14282: LD_INT 106
14284: PUSH
14285: LD_INT 108
14287: PUSH
14288: LD_INT 112
14290: PUSH
14291: LD_INT 113
14293: PUSH
14294: LD_INT 114
14296: PUSH
14297: LD_INT 115
14299: PUSH
14300: EMPTY
14301: LIST
14302: LIST
14303: LIST
14304: LIST
14305: LIST
14306: LIST
14307: LIST
14308: LIST
14309: LIST
14310: PUSH
14311: EMPTY
14312: LIST
14313: LIST
14314: ST_TO_ADDR
14315: GO 14546
14317: LD_INT 19
14319: DOUBLE
14320: EQUAL
14321: IFTRUE 14325
14323: GO 14545
14325: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
14326: LD_ADDR_VAR 0 1
14330: PUSH
14331: LD_INT 1
14333: PUSH
14334: LD_INT 2
14336: PUSH
14337: LD_INT 3
14339: PUSH
14340: LD_INT 4
14342: PUSH
14343: LD_INT 5
14345: PUSH
14346: LD_INT 6
14348: PUSH
14349: LD_INT 7
14351: PUSH
14352: LD_INT 8
14354: PUSH
14355: LD_INT 9
14357: PUSH
14358: LD_INT 10
14360: PUSH
14361: LD_INT 11
14363: PUSH
14364: LD_INT 12
14366: PUSH
14367: LD_INT 13
14369: PUSH
14370: LD_INT 14
14372: PUSH
14373: LD_INT 15
14375: PUSH
14376: LD_INT 16
14378: PUSH
14379: LD_INT 17
14381: PUSH
14382: LD_INT 18
14384: PUSH
14385: LD_INT 19
14387: PUSH
14388: LD_INT 20
14390: PUSH
14391: LD_INT 21
14393: PUSH
14394: LD_INT 22
14396: PUSH
14397: LD_INT 23
14399: PUSH
14400: LD_INT 24
14402: PUSH
14403: LD_INT 25
14405: PUSH
14406: LD_INT 26
14408: PUSH
14409: LD_INT 27
14411: PUSH
14412: LD_INT 28
14414: PUSH
14415: LD_INT 29
14417: PUSH
14418: LD_INT 30
14420: PUSH
14421: LD_INT 31
14423: PUSH
14424: LD_INT 32
14426: PUSH
14427: LD_INT 33
14429: PUSH
14430: LD_INT 34
14432: PUSH
14433: LD_INT 35
14435: PUSH
14436: LD_INT 36
14438: PUSH
14439: EMPTY
14440: LIST
14441: LIST
14442: LIST
14443: LIST
14444: LIST
14445: LIST
14446: LIST
14447: LIST
14448: LIST
14449: LIST
14450: LIST
14451: LIST
14452: LIST
14453: LIST
14454: LIST
14455: LIST
14456: LIST
14457: LIST
14458: LIST
14459: LIST
14460: LIST
14461: LIST
14462: LIST
14463: LIST
14464: LIST
14465: LIST
14466: LIST
14467: LIST
14468: LIST
14469: LIST
14470: LIST
14471: LIST
14472: LIST
14473: LIST
14474: LIST
14475: LIST
14476: PUSH
14477: LD_INT 101
14479: PUSH
14480: LD_INT 102
14482: PUSH
14483: LD_INT 103
14485: PUSH
14486: LD_INT 104
14488: PUSH
14489: LD_INT 105
14491: PUSH
14492: LD_INT 106
14494: PUSH
14495: LD_INT 107
14497: PUSH
14498: LD_INT 108
14500: PUSH
14501: LD_INT 109
14503: PUSH
14504: LD_INT 110
14506: PUSH
14507: LD_INT 111
14509: PUSH
14510: LD_INT 112
14512: PUSH
14513: LD_INT 113
14515: PUSH
14516: LD_INT 114
14518: PUSH
14519: LD_INT 115
14521: PUSH
14522: EMPTY
14523: LIST
14524: LIST
14525: LIST
14526: LIST
14527: LIST
14528: LIST
14529: LIST
14530: LIST
14531: LIST
14532: LIST
14533: LIST
14534: LIST
14535: LIST
14536: LIST
14537: LIST
14538: PUSH
14539: EMPTY
14540: LIST
14541: LIST
14542: ST_TO_ADDR
14543: GO 14546
14545: POP
// end else
14546: GO 14765
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
14548: LD_ADDR_VAR 0 1
14552: PUSH
14553: LD_INT 1
14555: PUSH
14556: LD_INT 2
14558: PUSH
14559: LD_INT 3
14561: PUSH
14562: LD_INT 4
14564: PUSH
14565: LD_INT 5
14567: PUSH
14568: LD_INT 6
14570: PUSH
14571: LD_INT 7
14573: PUSH
14574: LD_INT 8
14576: PUSH
14577: LD_INT 9
14579: PUSH
14580: LD_INT 10
14582: PUSH
14583: LD_INT 11
14585: PUSH
14586: LD_INT 12
14588: PUSH
14589: LD_INT 13
14591: PUSH
14592: LD_INT 14
14594: PUSH
14595: LD_INT 15
14597: PUSH
14598: LD_INT 16
14600: PUSH
14601: LD_INT 17
14603: PUSH
14604: LD_INT 18
14606: PUSH
14607: LD_INT 19
14609: PUSH
14610: LD_INT 20
14612: PUSH
14613: LD_INT 21
14615: PUSH
14616: LD_INT 22
14618: PUSH
14619: LD_INT 23
14621: PUSH
14622: LD_INT 24
14624: PUSH
14625: LD_INT 25
14627: PUSH
14628: LD_INT 26
14630: PUSH
14631: LD_INT 27
14633: PUSH
14634: LD_INT 28
14636: PUSH
14637: LD_INT 29
14639: PUSH
14640: LD_INT 30
14642: PUSH
14643: LD_INT 31
14645: PUSH
14646: LD_INT 32
14648: PUSH
14649: LD_INT 33
14651: PUSH
14652: LD_INT 34
14654: PUSH
14655: LD_INT 35
14657: PUSH
14658: LD_INT 36
14660: PUSH
14661: EMPTY
14662: LIST
14663: LIST
14664: LIST
14665: LIST
14666: LIST
14667: LIST
14668: LIST
14669: LIST
14670: LIST
14671: LIST
14672: LIST
14673: LIST
14674: LIST
14675: LIST
14676: LIST
14677: LIST
14678: LIST
14679: LIST
14680: LIST
14681: LIST
14682: LIST
14683: LIST
14684: LIST
14685: LIST
14686: LIST
14687: LIST
14688: LIST
14689: LIST
14690: LIST
14691: LIST
14692: LIST
14693: LIST
14694: LIST
14695: LIST
14696: LIST
14697: LIST
14698: PUSH
14699: LD_INT 101
14701: PUSH
14702: LD_INT 102
14704: PUSH
14705: LD_INT 103
14707: PUSH
14708: LD_INT 104
14710: PUSH
14711: LD_INT 105
14713: PUSH
14714: LD_INT 106
14716: PUSH
14717: LD_INT 107
14719: PUSH
14720: LD_INT 108
14722: PUSH
14723: LD_INT 109
14725: PUSH
14726: LD_INT 110
14728: PUSH
14729: LD_INT 111
14731: PUSH
14732: LD_INT 112
14734: PUSH
14735: LD_INT 113
14737: PUSH
14738: LD_INT 114
14740: PUSH
14741: LD_INT 115
14743: PUSH
14744: EMPTY
14745: LIST
14746: LIST
14747: LIST
14748: LIST
14749: LIST
14750: LIST
14751: LIST
14752: LIST
14753: LIST
14754: LIST
14755: LIST
14756: LIST
14757: LIST
14758: LIST
14759: LIST
14760: PUSH
14761: EMPTY
14762: LIST
14763: LIST
14764: ST_TO_ADDR
// if result then
14765: LD_VAR 0 1
14769: IFFALSE 15058
// begin normal :=  ;
14771: LD_ADDR_VAR 0 3
14775: PUSH
14776: LD_STRING 
14778: ST_TO_ADDR
// hardcore :=  ;
14779: LD_ADDR_VAR 0 4
14783: PUSH
14784: LD_STRING 
14786: ST_TO_ADDR
// for i = 1 to normalCounter do
14787: LD_ADDR_VAR 0 5
14791: PUSH
14792: DOUBLE
14793: LD_INT 1
14795: DEC
14796: ST_TO_ADDR
14797: LD_EXP 40
14801: PUSH
14802: FOR_TO
14803: IFFALSE 14904
// begin tmp := 0 ;
14805: LD_ADDR_VAR 0 2
14809: PUSH
14810: LD_STRING 0
14812: ST_TO_ADDR
// if result [ 1 ] then
14813: LD_VAR 0 1
14817: PUSH
14818: LD_INT 1
14820: ARRAY
14821: IFFALSE 14886
// if result [ 1 ] [ 1 ] = i then
14823: LD_VAR 0 1
14827: PUSH
14828: LD_INT 1
14830: ARRAY
14831: PUSH
14832: LD_INT 1
14834: ARRAY
14835: PUSH
14836: LD_VAR 0 5
14840: EQUAL
14841: IFFALSE 14886
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
14843: LD_ADDR_VAR 0 1
14847: PUSH
14848: LD_VAR 0 1
14852: PPUSH
14853: LD_INT 1
14855: PPUSH
14856: LD_VAR 0 1
14860: PUSH
14861: LD_INT 1
14863: ARRAY
14864: PPUSH
14865: LD_INT 1
14867: PPUSH
14868: CALL_OW 3
14872: PPUSH
14873: CALL_OW 1
14877: ST_TO_ADDR
// tmp := 1 ;
14878: LD_ADDR_VAR 0 2
14882: PUSH
14883: LD_STRING 1
14885: ST_TO_ADDR
// end ; normal := normal & tmp ;
14886: LD_ADDR_VAR 0 3
14890: PUSH
14891: LD_VAR 0 3
14895: PUSH
14896: LD_VAR 0 2
14900: STR
14901: ST_TO_ADDR
// end ;
14902: GO 14802
14904: POP
14905: POP
// for i = 1 to hardcoreCounter do
14906: LD_ADDR_VAR 0 5
14910: PUSH
14911: DOUBLE
14912: LD_INT 1
14914: DEC
14915: ST_TO_ADDR
14916: LD_EXP 41
14920: PUSH
14921: FOR_TO
14922: IFFALSE 15027
// begin tmp := 0 ;
14924: LD_ADDR_VAR 0 2
14928: PUSH
14929: LD_STRING 0
14931: ST_TO_ADDR
// if result [ 2 ] then
14932: LD_VAR 0 1
14936: PUSH
14937: LD_INT 2
14939: ARRAY
14940: IFFALSE 15009
// if result [ 2 ] [ 1 ] = 100 + i then
14942: LD_VAR 0 1
14946: PUSH
14947: LD_INT 2
14949: ARRAY
14950: PUSH
14951: LD_INT 1
14953: ARRAY
14954: PUSH
14955: LD_INT 100
14957: PUSH
14958: LD_VAR 0 5
14962: PLUS
14963: EQUAL
14964: IFFALSE 15009
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
14966: LD_ADDR_VAR 0 1
14970: PUSH
14971: LD_VAR 0 1
14975: PPUSH
14976: LD_INT 2
14978: PPUSH
14979: LD_VAR 0 1
14983: PUSH
14984: LD_INT 2
14986: ARRAY
14987: PPUSH
14988: LD_INT 1
14990: PPUSH
14991: CALL_OW 3
14995: PPUSH
14996: CALL_OW 1
15000: ST_TO_ADDR
// tmp := 1 ;
15001: LD_ADDR_VAR 0 2
15005: PUSH
15006: LD_STRING 1
15008: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
15009: LD_ADDR_VAR 0 4
15013: PUSH
15014: LD_VAR 0 4
15018: PUSH
15019: LD_VAR 0 2
15023: STR
15024: ST_TO_ADDR
// end ;
15025: GO 14921
15027: POP
15028: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
15029: LD_STRING getStreamItemsFromMission("
15031: PUSH
15032: LD_VAR 0 3
15036: STR
15037: PUSH
15038: LD_STRING ","
15040: STR
15041: PUSH
15042: LD_VAR 0 4
15046: STR
15047: PUSH
15048: LD_STRING ")
15050: STR
15051: PPUSH
15052: CALL_OW 559
// end else
15056: GO 15065
// ToLua ( getStreamItemsFromMission("","") ) ;
15058: LD_STRING getStreamItemsFromMission("","")
15060: PPUSH
15061: CALL_OW 559
// end ;
15065: LD_VAR 0 1
15069: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
15070: LD_VAR 0 2
15074: PUSH
15075: LD_INT 100
15077: EQUAL
15078: IFFALSE 16027
// begin if not StreamModeActive then
15080: LD_EXP 39
15084: NOT
15085: IFFALSE 15095
// StreamModeActive := true ;
15087: LD_ADDR_EXP 39
15091: PUSH
15092: LD_INT 1
15094: ST_TO_ADDR
// if p3 = 0 then
15095: LD_VAR 0 3
15099: PUSH
15100: LD_INT 0
15102: EQUAL
15103: IFFALSE 15109
// InitStreamMode ;
15105: CALL 11148 0 0
// if p3 = 1 then
15109: LD_VAR 0 3
15113: PUSH
15114: LD_INT 1
15116: EQUAL
15117: IFFALSE 15127
// sRocket := true ;
15119: LD_ADDR_EXP 44
15123: PUSH
15124: LD_INT 1
15126: ST_TO_ADDR
// if p3 = 2 then
15127: LD_VAR 0 3
15131: PUSH
15132: LD_INT 2
15134: EQUAL
15135: IFFALSE 15145
// sSpeed := true ;
15137: LD_ADDR_EXP 43
15141: PUSH
15142: LD_INT 1
15144: ST_TO_ADDR
// if p3 = 3 then
15145: LD_VAR 0 3
15149: PUSH
15150: LD_INT 3
15152: EQUAL
15153: IFFALSE 15163
// sEngine := true ;
15155: LD_ADDR_EXP 45
15159: PUSH
15160: LD_INT 1
15162: ST_TO_ADDR
// if p3 = 4 then
15163: LD_VAR 0 3
15167: PUSH
15168: LD_INT 4
15170: EQUAL
15171: IFFALSE 15181
// sSpec := true ;
15173: LD_ADDR_EXP 42
15177: PUSH
15178: LD_INT 1
15180: ST_TO_ADDR
// if p3 = 5 then
15181: LD_VAR 0 3
15185: PUSH
15186: LD_INT 5
15188: EQUAL
15189: IFFALSE 15199
// sLevel := true ;
15191: LD_ADDR_EXP 46
15195: PUSH
15196: LD_INT 1
15198: ST_TO_ADDR
// if p3 = 6 then
15199: LD_VAR 0 3
15203: PUSH
15204: LD_INT 6
15206: EQUAL
15207: IFFALSE 15217
// sArmoury := true ;
15209: LD_ADDR_EXP 47
15213: PUSH
15214: LD_INT 1
15216: ST_TO_ADDR
// if p3 = 7 then
15217: LD_VAR 0 3
15221: PUSH
15222: LD_INT 7
15224: EQUAL
15225: IFFALSE 15235
// sRadar := true ;
15227: LD_ADDR_EXP 48
15231: PUSH
15232: LD_INT 1
15234: ST_TO_ADDR
// if p3 = 8 then
15235: LD_VAR 0 3
15239: PUSH
15240: LD_INT 8
15242: EQUAL
15243: IFFALSE 15253
// sBunker := true ;
15245: LD_ADDR_EXP 49
15249: PUSH
15250: LD_INT 1
15252: ST_TO_ADDR
// if p3 = 9 then
15253: LD_VAR 0 3
15257: PUSH
15258: LD_INT 9
15260: EQUAL
15261: IFFALSE 15271
// sHack := true ;
15263: LD_ADDR_EXP 50
15267: PUSH
15268: LD_INT 1
15270: ST_TO_ADDR
// if p3 = 10 then
15271: LD_VAR 0 3
15275: PUSH
15276: LD_INT 10
15278: EQUAL
15279: IFFALSE 15289
// sFire := true ;
15281: LD_ADDR_EXP 51
15285: PUSH
15286: LD_INT 1
15288: ST_TO_ADDR
// if p3 = 11 then
15289: LD_VAR 0 3
15293: PUSH
15294: LD_INT 11
15296: EQUAL
15297: IFFALSE 15307
// sRefresh := true ;
15299: LD_ADDR_EXP 52
15303: PUSH
15304: LD_INT 1
15306: ST_TO_ADDR
// if p3 = 12 then
15307: LD_VAR 0 3
15311: PUSH
15312: LD_INT 12
15314: EQUAL
15315: IFFALSE 15325
// sExp := true ;
15317: LD_ADDR_EXP 53
15321: PUSH
15322: LD_INT 1
15324: ST_TO_ADDR
// if p3 = 13 then
15325: LD_VAR 0 3
15329: PUSH
15330: LD_INT 13
15332: EQUAL
15333: IFFALSE 15343
// sDepot := true ;
15335: LD_ADDR_EXP 54
15339: PUSH
15340: LD_INT 1
15342: ST_TO_ADDR
// if p3 = 14 then
15343: LD_VAR 0 3
15347: PUSH
15348: LD_INT 14
15350: EQUAL
15351: IFFALSE 15361
// sFlag := true ;
15353: LD_ADDR_EXP 55
15357: PUSH
15358: LD_INT 1
15360: ST_TO_ADDR
// if p3 = 15 then
15361: LD_VAR 0 3
15365: PUSH
15366: LD_INT 15
15368: EQUAL
15369: IFFALSE 15379
// sKamikadze := true ;
15371: LD_ADDR_EXP 63
15375: PUSH
15376: LD_INT 1
15378: ST_TO_ADDR
// if p3 = 16 then
15379: LD_VAR 0 3
15383: PUSH
15384: LD_INT 16
15386: EQUAL
15387: IFFALSE 15397
// sTroll := true ;
15389: LD_ADDR_EXP 64
15393: PUSH
15394: LD_INT 1
15396: ST_TO_ADDR
// if p3 = 17 then
15397: LD_VAR 0 3
15401: PUSH
15402: LD_INT 17
15404: EQUAL
15405: IFFALSE 15415
// sSlow := true ;
15407: LD_ADDR_EXP 65
15411: PUSH
15412: LD_INT 1
15414: ST_TO_ADDR
// if p3 = 18 then
15415: LD_VAR 0 3
15419: PUSH
15420: LD_INT 18
15422: EQUAL
15423: IFFALSE 15433
// sLack := true ;
15425: LD_ADDR_EXP 66
15429: PUSH
15430: LD_INT 1
15432: ST_TO_ADDR
// if p3 = 19 then
15433: LD_VAR 0 3
15437: PUSH
15438: LD_INT 19
15440: EQUAL
15441: IFFALSE 15451
// sTank := true ;
15443: LD_ADDR_EXP 68
15447: PUSH
15448: LD_INT 1
15450: ST_TO_ADDR
// if p3 = 20 then
15451: LD_VAR 0 3
15455: PUSH
15456: LD_INT 20
15458: EQUAL
15459: IFFALSE 15469
// sRemote := true ;
15461: LD_ADDR_EXP 69
15465: PUSH
15466: LD_INT 1
15468: ST_TO_ADDR
// if p3 = 21 then
15469: LD_VAR 0 3
15473: PUSH
15474: LD_INT 21
15476: EQUAL
15477: IFFALSE 15487
// sPowell := true ;
15479: LD_ADDR_EXP 70
15483: PUSH
15484: LD_INT 1
15486: ST_TO_ADDR
// if p3 = 22 then
15487: LD_VAR 0 3
15491: PUSH
15492: LD_INT 22
15494: EQUAL
15495: IFFALSE 15505
// sTeleport := true ;
15497: LD_ADDR_EXP 73
15501: PUSH
15502: LD_INT 1
15504: ST_TO_ADDR
// if p3 = 23 then
15505: LD_VAR 0 3
15509: PUSH
15510: LD_INT 23
15512: EQUAL
15513: IFFALSE 15523
// sOilTower := true ;
15515: LD_ADDR_EXP 75
15519: PUSH
15520: LD_INT 1
15522: ST_TO_ADDR
// if p3 = 24 then
15523: LD_VAR 0 3
15527: PUSH
15528: LD_INT 24
15530: EQUAL
15531: IFFALSE 15541
// sShovel := true ;
15533: LD_ADDR_EXP 76
15537: PUSH
15538: LD_INT 1
15540: ST_TO_ADDR
// if p3 = 25 then
15541: LD_VAR 0 3
15545: PUSH
15546: LD_INT 25
15548: EQUAL
15549: IFFALSE 15559
// sSheik := true ;
15551: LD_ADDR_EXP 77
15555: PUSH
15556: LD_INT 1
15558: ST_TO_ADDR
// if p3 = 26 then
15559: LD_VAR 0 3
15563: PUSH
15564: LD_INT 26
15566: EQUAL
15567: IFFALSE 15577
// sEarthquake := true ;
15569: LD_ADDR_EXP 79
15573: PUSH
15574: LD_INT 1
15576: ST_TO_ADDR
// if p3 = 27 then
15577: LD_VAR 0 3
15581: PUSH
15582: LD_INT 27
15584: EQUAL
15585: IFFALSE 15595
// sAI := true ;
15587: LD_ADDR_EXP 80
15591: PUSH
15592: LD_INT 1
15594: ST_TO_ADDR
// if p3 = 28 then
15595: LD_VAR 0 3
15599: PUSH
15600: LD_INT 28
15602: EQUAL
15603: IFFALSE 15613
// sCargo := true ;
15605: LD_ADDR_EXP 83
15609: PUSH
15610: LD_INT 1
15612: ST_TO_ADDR
// if p3 = 29 then
15613: LD_VAR 0 3
15617: PUSH
15618: LD_INT 29
15620: EQUAL
15621: IFFALSE 15631
// sDLaser := true ;
15623: LD_ADDR_EXP 84
15627: PUSH
15628: LD_INT 1
15630: ST_TO_ADDR
// if p3 = 30 then
15631: LD_VAR 0 3
15635: PUSH
15636: LD_INT 30
15638: EQUAL
15639: IFFALSE 15649
// sExchange := true ;
15641: LD_ADDR_EXP 85
15645: PUSH
15646: LD_INT 1
15648: ST_TO_ADDR
// if p3 = 31 then
15649: LD_VAR 0 3
15653: PUSH
15654: LD_INT 31
15656: EQUAL
15657: IFFALSE 15667
// sFac := true ;
15659: LD_ADDR_EXP 86
15663: PUSH
15664: LD_INT 1
15666: ST_TO_ADDR
// if p3 = 32 then
15667: LD_VAR 0 3
15671: PUSH
15672: LD_INT 32
15674: EQUAL
15675: IFFALSE 15685
// sPower := true ;
15677: LD_ADDR_EXP 87
15681: PUSH
15682: LD_INT 1
15684: ST_TO_ADDR
// if p3 = 33 then
15685: LD_VAR 0 3
15689: PUSH
15690: LD_INT 33
15692: EQUAL
15693: IFFALSE 15703
// sRandom := true ;
15695: LD_ADDR_EXP 88
15699: PUSH
15700: LD_INT 1
15702: ST_TO_ADDR
// if p3 = 34 then
15703: LD_VAR 0 3
15707: PUSH
15708: LD_INT 34
15710: EQUAL
15711: IFFALSE 15721
// sShield := true ;
15713: LD_ADDR_EXP 89
15717: PUSH
15718: LD_INT 1
15720: ST_TO_ADDR
// if p3 = 35 then
15721: LD_VAR 0 3
15725: PUSH
15726: LD_INT 35
15728: EQUAL
15729: IFFALSE 15739
// sTime := true ;
15731: LD_ADDR_EXP 90
15735: PUSH
15736: LD_INT 1
15738: ST_TO_ADDR
// if p3 = 36 then
15739: LD_VAR 0 3
15743: PUSH
15744: LD_INT 36
15746: EQUAL
15747: IFFALSE 15757
// sTools := true ;
15749: LD_ADDR_EXP 91
15753: PUSH
15754: LD_INT 1
15756: ST_TO_ADDR
// if p3 = 101 then
15757: LD_VAR 0 3
15761: PUSH
15762: LD_INT 101
15764: EQUAL
15765: IFFALSE 15775
// sSold := true ;
15767: LD_ADDR_EXP 56
15771: PUSH
15772: LD_INT 1
15774: ST_TO_ADDR
// if p3 = 102 then
15775: LD_VAR 0 3
15779: PUSH
15780: LD_INT 102
15782: EQUAL
15783: IFFALSE 15793
// sDiff := true ;
15785: LD_ADDR_EXP 57
15789: PUSH
15790: LD_INT 1
15792: ST_TO_ADDR
// if p3 = 103 then
15793: LD_VAR 0 3
15797: PUSH
15798: LD_INT 103
15800: EQUAL
15801: IFFALSE 15811
// sFog := true ;
15803: LD_ADDR_EXP 60
15807: PUSH
15808: LD_INT 1
15810: ST_TO_ADDR
// if p3 = 104 then
15811: LD_VAR 0 3
15815: PUSH
15816: LD_INT 104
15818: EQUAL
15819: IFFALSE 15829
// sReset := true ;
15821: LD_ADDR_EXP 61
15825: PUSH
15826: LD_INT 1
15828: ST_TO_ADDR
// if p3 = 105 then
15829: LD_VAR 0 3
15833: PUSH
15834: LD_INT 105
15836: EQUAL
15837: IFFALSE 15847
// sSun := true ;
15839: LD_ADDR_EXP 62
15843: PUSH
15844: LD_INT 1
15846: ST_TO_ADDR
// if p3 = 106 then
15847: LD_VAR 0 3
15851: PUSH
15852: LD_INT 106
15854: EQUAL
15855: IFFALSE 15865
// sTiger := true ;
15857: LD_ADDR_EXP 58
15861: PUSH
15862: LD_INT 1
15864: ST_TO_ADDR
// if p3 = 107 then
15865: LD_VAR 0 3
15869: PUSH
15870: LD_INT 107
15872: EQUAL
15873: IFFALSE 15883
// sBomb := true ;
15875: LD_ADDR_EXP 59
15879: PUSH
15880: LD_INT 1
15882: ST_TO_ADDR
// if p3 = 108 then
15883: LD_VAR 0 3
15887: PUSH
15888: LD_INT 108
15890: EQUAL
15891: IFFALSE 15901
// sWound := true ;
15893: LD_ADDR_EXP 67
15897: PUSH
15898: LD_INT 1
15900: ST_TO_ADDR
// if p3 = 109 then
15901: LD_VAR 0 3
15905: PUSH
15906: LD_INT 109
15908: EQUAL
15909: IFFALSE 15919
// sBetray := true ;
15911: LD_ADDR_EXP 71
15915: PUSH
15916: LD_INT 1
15918: ST_TO_ADDR
// if p3 = 110 then
15919: LD_VAR 0 3
15923: PUSH
15924: LD_INT 110
15926: EQUAL
15927: IFFALSE 15937
// sContamin := true ;
15929: LD_ADDR_EXP 72
15933: PUSH
15934: LD_INT 1
15936: ST_TO_ADDR
// if p3 = 111 then
15937: LD_VAR 0 3
15941: PUSH
15942: LD_INT 111
15944: EQUAL
15945: IFFALSE 15955
// sOil := true ;
15947: LD_ADDR_EXP 74
15951: PUSH
15952: LD_INT 1
15954: ST_TO_ADDR
// if p3 = 112 then
15955: LD_VAR 0 3
15959: PUSH
15960: LD_INT 112
15962: EQUAL
15963: IFFALSE 15973
// sStu := true ;
15965: LD_ADDR_EXP 78
15969: PUSH
15970: LD_INT 1
15972: ST_TO_ADDR
// if p3 = 113 then
15973: LD_VAR 0 3
15977: PUSH
15978: LD_INT 113
15980: EQUAL
15981: IFFALSE 15991
// sBazooka := true ;
15983: LD_ADDR_EXP 81
15987: PUSH
15988: LD_INT 1
15990: ST_TO_ADDR
// if p3 = 114 then
15991: LD_VAR 0 3
15995: PUSH
15996: LD_INT 114
15998: EQUAL
15999: IFFALSE 16009
// sMortar := true ;
16001: LD_ADDR_EXP 82
16005: PUSH
16006: LD_INT 1
16008: ST_TO_ADDR
// if p3 = 115 then
16009: LD_VAR 0 3
16013: PUSH
16014: LD_INT 115
16016: EQUAL
16017: IFFALSE 16027
// sRanger := true ;
16019: LD_ADDR_EXP 92
16023: PUSH
16024: LD_INT 1
16026: ST_TO_ADDR
// end ; end ;
16027: PPOPN 6
16029: END
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
16030: LD_EXP 39
16034: PUSH
16035: LD_EXP 44
16039: AND
16040: IFFALSE 16164
16042: GO 16044
16044: DISABLE
16045: LD_INT 0
16047: PPUSH
16048: PPUSH
// begin enable ;
16049: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
16050: LD_ADDR_VAR 0 2
16054: PUSH
16055: LD_INT 22
16057: PUSH
16058: LD_OWVAR 2
16062: PUSH
16063: EMPTY
16064: LIST
16065: LIST
16066: PUSH
16067: LD_INT 2
16069: PUSH
16070: LD_INT 34
16072: PUSH
16073: LD_INT 7
16075: PUSH
16076: EMPTY
16077: LIST
16078: LIST
16079: PUSH
16080: LD_INT 34
16082: PUSH
16083: LD_INT 45
16085: PUSH
16086: EMPTY
16087: LIST
16088: LIST
16089: PUSH
16090: LD_INT 34
16092: PUSH
16093: LD_INT 28
16095: PUSH
16096: EMPTY
16097: LIST
16098: LIST
16099: PUSH
16100: LD_INT 34
16102: PUSH
16103: LD_INT 47
16105: PUSH
16106: EMPTY
16107: LIST
16108: LIST
16109: PUSH
16110: EMPTY
16111: LIST
16112: LIST
16113: LIST
16114: LIST
16115: LIST
16116: PUSH
16117: EMPTY
16118: LIST
16119: LIST
16120: PPUSH
16121: CALL_OW 69
16125: ST_TO_ADDR
// if not tmp then
16126: LD_VAR 0 2
16130: NOT
16131: IFFALSE 16135
// exit ;
16133: GO 16164
// for i in tmp do
16135: LD_ADDR_VAR 0 1
16139: PUSH
16140: LD_VAR 0 2
16144: PUSH
16145: FOR_IN
16146: IFFALSE 16162
// begin SetLives ( i , 0 ) ;
16148: LD_VAR 0 1
16152: PPUSH
16153: LD_INT 0
16155: PPUSH
16156: CALL_OW 234
// end ;
16160: GO 16145
16162: POP
16163: POP
// end ;
16164: PPOPN 2
16166: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
16167: LD_EXP 39
16171: PUSH
16172: LD_EXP 45
16176: AND
16177: IFFALSE 16261
16179: GO 16181
16181: DISABLE
16182: LD_INT 0
16184: PPUSH
16185: PPUSH
// begin enable ;
16186: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
16187: LD_ADDR_VAR 0 2
16191: PUSH
16192: LD_INT 22
16194: PUSH
16195: LD_OWVAR 2
16199: PUSH
16200: EMPTY
16201: LIST
16202: LIST
16203: PUSH
16204: LD_INT 32
16206: PUSH
16207: LD_INT 3
16209: PUSH
16210: EMPTY
16211: LIST
16212: LIST
16213: PUSH
16214: EMPTY
16215: LIST
16216: LIST
16217: PPUSH
16218: CALL_OW 69
16222: ST_TO_ADDR
// if not tmp then
16223: LD_VAR 0 2
16227: NOT
16228: IFFALSE 16232
// exit ;
16230: GO 16261
// for i in tmp do
16232: LD_ADDR_VAR 0 1
16236: PUSH
16237: LD_VAR 0 2
16241: PUSH
16242: FOR_IN
16243: IFFALSE 16259
// begin SetLives ( i , 0 ) ;
16245: LD_VAR 0 1
16249: PPUSH
16250: LD_INT 0
16252: PPUSH
16253: CALL_OW 234
// end ;
16257: GO 16242
16259: POP
16260: POP
// end ;
16261: PPOPN 2
16263: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
16264: LD_EXP 39
16268: PUSH
16269: LD_EXP 42
16273: AND
16274: IFFALSE 16367
16276: GO 16278
16278: DISABLE
16279: LD_INT 0
16281: PPUSH
// begin enable ;
16282: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
16283: LD_ADDR_VAR 0 1
16287: PUSH
16288: LD_INT 22
16290: PUSH
16291: LD_OWVAR 2
16295: PUSH
16296: EMPTY
16297: LIST
16298: LIST
16299: PUSH
16300: LD_INT 2
16302: PUSH
16303: LD_INT 25
16305: PUSH
16306: LD_INT 5
16308: PUSH
16309: EMPTY
16310: LIST
16311: LIST
16312: PUSH
16313: LD_INT 25
16315: PUSH
16316: LD_INT 9
16318: PUSH
16319: EMPTY
16320: LIST
16321: LIST
16322: PUSH
16323: LD_INT 25
16325: PUSH
16326: LD_INT 8
16328: PUSH
16329: EMPTY
16330: LIST
16331: LIST
16332: PUSH
16333: EMPTY
16334: LIST
16335: LIST
16336: LIST
16337: LIST
16338: PUSH
16339: EMPTY
16340: LIST
16341: LIST
16342: PPUSH
16343: CALL_OW 69
16347: PUSH
16348: FOR_IN
16349: IFFALSE 16365
// begin SetClass ( i , 1 ) ;
16351: LD_VAR 0 1
16355: PPUSH
16356: LD_INT 1
16358: PPUSH
16359: CALL_OW 336
// end ;
16363: GO 16348
16365: POP
16366: POP
// end ;
16367: PPOPN 1
16369: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
16370: LD_EXP 39
16374: PUSH
16375: LD_EXP 43
16379: AND
16380: PUSH
16381: LD_OWVAR 65
16385: PUSH
16386: LD_INT 7
16388: LESS
16389: AND
16390: IFFALSE 16404
16392: GO 16394
16394: DISABLE
// begin enable ;
16395: ENABLE
// game_speed := 7 ;
16396: LD_ADDR_OWVAR 65
16400: PUSH
16401: LD_INT 7
16403: ST_TO_ADDR
// end ;
16404: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
16405: LD_EXP 39
16409: PUSH
16410: LD_EXP 46
16414: AND
16415: IFFALSE 16617
16417: GO 16419
16419: DISABLE
16420: LD_INT 0
16422: PPUSH
16423: PPUSH
16424: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
16425: LD_ADDR_VAR 0 3
16429: PUSH
16430: LD_INT 81
16432: PUSH
16433: LD_OWVAR 2
16437: PUSH
16438: EMPTY
16439: LIST
16440: LIST
16441: PUSH
16442: LD_INT 21
16444: PUSH
16445: LD_INT 1
16447: PUSH
16448: EMPTY
16449: LIST
16450: LIST
16451: PUSH
16452: EMPTY
16453: LIST
16454: LIST
16455: PPUSH
16456: CALL_OW 69
16460: ST_TO_ADDR
// if not tmp then
16461: LD_VAR 0 3
16465: NOT
16466: IFFALSE 16470
// exit ;
16468: GO 16617
// if tmp > 5 then
16470: LD_VAR 0 3
16474: PUSH
16475: LD_INT 5
16477: GREATER
16478: IFFALSE 16490
// k := 5 else
16480: LD_ADDR_VAR 0 2
16484: PUSH
16485: LD_INT 5
16487: ST_TO_ADDR
16488: GO 16500
// k := tmp ;
16490: LD_ADDR_VAR 0 2
16494: PUSH
16495: LD_VAR 0 3
16499: ST_TO_ADDR
// for i := 1 to k do
16500: LD_ADDR_VAR 0 1
16504: PUSH
16505: DOUBLE
16506: LD_INT 1
16508: DEC
16509: ST_TO_ADDR
16510: LD_VAR 0 2
16514: PUSH
16515: FOR_TO
16516: IFFALSE 16615
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
16518: LD_VAR 0 3
16522: PUSH
16523: LD_VAR 0 1
16527: ARRAY
16528: PPUSH
16529: LD_VAR 0 1
16533: PUSH
16534: LD_INT 4
16536: MOD
16537: PUSH
16538: LD_INT 1
16540: PLUS
16541: PPUSH
16542: CALL_OW 259
16546: PUSH
16547: LD_INT 10
16549: LESS
16550: IFFALSE 16613
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
16552: LD_VAR 0 3
16556: PUSH
16557: LD_VAR 0 1
16561: ARRAY
16562: PPUSH
16563: LD_VAR 0 1
16567: PUSH
16568: LD_INT 4
16570: MOD
16571: PUSH
16572: LD_INT 1
16574: PLUS
16575: PPUSH
16576: LD_VAR 0 3
16580: PUSH
16581: LD_VAR 0 1
16585: ARRAY
16586: PPUSH
16587: LD_VAR 0 1
16591: PUSH
16592: LD_INT 4
16594: MOD
16595: PUSH
16596: LD_INT 1
16598: PLUS
16599: PPUSH
16600: CALL_OW 259
16604: PUSH
16605: LD_INT 1
16607: PLUS
16608: PPUSH
16609: CALL_OW 237
16613: GO 16515
16615: POP
16616: POP
// end ;
16617: PPOPN 3
16619: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
16620: LD_EXP 39
16624: PUSH
16625: LD_EXP 47
16629: AND
16630: IFFALSE 16650
16632: GO 16634
16634: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
16635: LD_INT 4
16637: PPUSH
16638: LD_OWVAR 2
16642: PPUSH
16643: LD_INT 0
16645: PPUSH
16646: CALL_OW 324
16650: END
// every 0 0$1 trigger StreamModeActive and sShovel do
16651: LD_EXP 39
16655: PUSH
16656: LD_EXP 76
16660: AND
16661: IFFALSE 16681
16663: GO 16665
16665: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
16666: LD_INT 19
16668: PPUSH
16669: LD_OWVAR 2
16673: PPUSH
16674: LD_INT 0
16676: PPUSH
16677: CALL_OW 324
16681: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
16682: LD_EXP 39
16686: PUSH
16687: LD_EXP 48
16691: AND
16692: IFFALSE 16794
16694: GO 16696
16696: DISABLE
16697: LD_INT 0
16699: PPUSH
16700: PPUSH
// begin enable ;
16701: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
16702: LD_ADDR_VAR 0 2
16706: PUSH
16707: LD_INT 22
16709: PUSH
16710: LD_OWVAR 2
16714: PUSH
16715: EMPTY
16716: LIST
16717: LIST
16718: PUSH
16719: LD_INT 2
16721: PUSH
16722: LD_INT 34
16724: PUSH
16725: LD_INT 11
16727: PUSH
16728: EMPTY
16729: LIST
16730: LIST
16731: PUSH
16732: LD_INT 34
16734: PUSH
16735: LD_INT 30
16737: PUSH
16738: EMPTY
16739: LIST
16740: LIST
16741: PUSH
16742: EMPTY
16743: LIST
16744: LIST
16745: LIST
16746: PUSH
16747: EMPTY
16748: LIST
16749: LIST
16750: PPUSH
16751: CALL_OW 69
16755: ST_TO_ADDR
// if not tmp then
16756: LD_VAR 0 2
16760: NOT
16761: IFFALSE 16765
// exit ;
16763: GO 16794
// for i in tmp do
16765: LD_ADDR_VAR 0 1
16769: PUSH
16770: LD_VAR 0 2
16774: PUSH
16775: FOR_IN
16776: IFFALSE 16792
// begin SetLives ( i , 0 ) ;
16778: LD_VAR 0 1
16782: PPUSH
16783: LD_INT 0
16785: PPUSH
16786: CALL_OW 234
// end ;
16790: GO 16775
16792: POP
16793: POP
// end ;
16794: PPOPN 2
16796: END
// every 0 0$1 trigger StreamModeActive and sBunker do
16797: LD_EXP 39
16801: PUSH
16802: LD_EXP 49
16806: AND
16807: IFFALSE 16827
16809: GO 16811
16811: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
16812: LD_INT 32
16814: PPUSH
16815: LD_OWVAR 2
16819: PPUSH
16820: LD_INT 0
16822: PPUSH
16823: CALL_OW 324
16827: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
16828: LD_EXP 39
16832: PUSH
16833: LD_EXP 50
16837: AND
16838: IFFALSE 17019
16840: GO 16842
16842: DISABLE
16843: LD_INT 0
16845: PPUSH
16846: PPUSH
16847: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
16848: LD_ADDR_VAR 0 2
16852: PUSH
16853: LD_INT 22
16855: PUSH
16856: LD_OWVAR 2
16860: PUSH
16861: EMPTY
16862: LIST
16863: LIST
16864: PUSH
16865: LD_INT 33
16867: PUSH
16868: LD_INT 3
16870: PUSH
16871: EMPTY
16872: LIST
16873: LIST
16874: PUSH
16875: EMPTY
16876: LIST
16877: LIST
16878: PPUSH
16879: CALL_OW 69
16883: ST_TO_ADDR
// if not tmp then
16884: LD_VAR 0 2
16888: NOT
16889: IFFALSE 16893
// exit ;
16891: GO 17019
// side := 0 ;
16893: LD_ADDR_VAR 0 3
16897: PUSH
16898: LD_INT 0
16900: ST_TO_ADDR
// for i := 1 to 8 do
16901: LD_ADDR_VAR 0 1
16905: PUSH
16906: DOUBLE
16907: LD_INT 1
16909: DEC
16910: ST_TO_ADDR
16911: LD_INT 8
16913: PUSH
16914: FOR_TO
16915: IFFALSE 16963
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
16917: LD_OWVAR 2
16921: PUSH
16922: LD_VAR 0 1
16926: NONEQUAL
16927: PUSH
16928: LD_OWVAR 2
16932: PPUSH
16933: LD_VAR 0 1
16937: PPUSH
16938: CALL_OW 81
16942: PUSH
16943: LD_INT 2
16945: EQUAL
16946: AND
16947: IFFALSE 16961
// begin side := i ;
16949: LD_ADDR_VAR 0 3
16953: PUSH
16954: LD_VAR 0 1
16958: ST_TO_ADDR
// break ;
16959: GO 16963
// end ;
16961: GO 16914
16963: POP
16964: POP
// if not side then
16965: LD_VAR 0 3
16969: NOT
16970: IFFALSE 16974
// exit ;
16972: GO 17019
// for i := 1 to tmp do
16974: LD_ADDR_VAR 0 1
16978: PUSH
16979: DOUBLE
16980: LD_INT 1
16982: DEC
16983: ST_TO_ADDR
16984: LD_VAR 0 2
16988: PUSH
16989: FOR_TO
16990: IFFALSE 17017
// if Prob ( 60 ) then
16992: LD_INT 60
16994: PPUSH
16995: CALL_OW 13
16999: IFFALSE 17015
// SetSide ( i , side ) ;
17001: LD_VAR 0 1
17005: PPUSH
17006: LD_VAR 0 3
17010: PPUSH
17011: CALL_OW 235
17015: GO 16989
17017: POP
17018: POP
// end ;
17019: PPOPN 3
17021: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
17022: LD_EXP 39
17026: PUSH
17027: LD_EXP 52
17031: AND
17032: IFFALSE 17151
17034: GO 17036
17036: DISABLE
17037: LD_INT 0
17039: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
17040: LD_ADDR_VAR 0 1
17044: PUSH
17045: LD_INT 22
17047: PUSH
17048: LD_OWVAR 2
17052: PUSH
17053: EMPTY
17054: LIST
17055: LIST
17056: PUSH
17057: LD_INT 21
17059: PUSH
17060: LD_INT 1
17062: PUSH
17063: EMPTY
17064: LIST
17065: LIST
17066: PUSH
17067: LD_INT 3
17069: PUSH
17070: LD_INT 23
17072: PUSH
17073: LD_INT 0
17075: PUSH
17076: EMPTY
17077: LIST
17078: LIST
17079: PUSH
17080: EMPTY
17081: LIST
17082: LIST
17083: PUSH
17084: EMPTY
17085: LIST
17086: LIST
17087: LIST
17088: PPUSH
17089: CALL_OW 69
17093: PUSH
17094: FOR_IN
17095: IFFALSE 17149
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
17097: LD_VAR 0 1
17101: PPUSH
17102: CALL_OW 257
17106: PUSH
17107: LD_INT 1
17109: PUSH
17110: LD_INT 2
17112: PUSH
17113: LD_INT 3
17115: PUSH
17116: LD_INT 4
17118: PUSH
17119: EMPTY
17120: LIST
17121: LIST
17122: LIST
17123: LIST
17124: IN
17125: IFFALSE 17147
// SetClass ( un , rand ( 1 , 4 ) ) ;
17127: LD_VAR 0 1
17131: PPUSH
17132: LD_INT 1
17134: PPUSH
17135: LD_INT 4
17137: PPUSH
17138: CALL_OW 12
17142: PPUSH
17143: CALL_OW 336
17147: GO 17094
17149: POP
17150: POP
// end ;
17151: PPOPN 1
17153: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
17154: LD_EXP 39
17158: PUSH
17159: LD_EXP 51
17163: AND
17164: IFFALSE 17243
17166: GO 17168
17168: DISABLE
17169: LD_INT 0
17171: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
17172: LD_ADDR_VAR 0 1
17176: PUSH
17177: LD_INT 22
17179: PUSH
17180: LD_OWVAR 2
17184: PUSH
17185: EMPTY
17186: LIST
17187: LIST
17188: PUSH
17189: LD_INT 21
17191: PUSH
17192: LD_INT 3
17194: PUSH
17195: EMPTY
17196: LIST
17197: LIST
17198: PUSH
17199: EMPTY
17200: LIST
17201: LIST
17202: PPUSH
17203: CALL_OW 69
17207: ST_TO_ADDR
// if not tmp then
17208: LD_VAR 0 1
17212: NOT
17213: IFFALSE 17217
// exit ;
17215: GO 17243
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
17217: LD_VAR 0 1
17221: PUSH
17222: LD_INT 1
17224: PPUSH
17225: LD_VAR 0 1
17229: PPUSH
17230: CALL_OW 12
17234: ARRAY
17235: PPUSH
17236: LD_INT 100
17238: PPUSH
17239: CALL_OW 234
// end ;
17243: PPOPN 1
17245: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
17246: LD_EXP 39
17250: PUSH
17251: LD_EXP 53
17255: AND
17256: IFFALSE 17354
17258: GO 17260
17260: DISABLE
17261: LD_INT 0
17263: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17264: LD_ADDR_VAR 0 1
17268: PUSH
17269: LD_INT 22
17271: PUSH
17272: LD_OWVAR 2
17276: PUSH
17277: EMPTY
17278: LIST
17279: LIST
17280: PUSH
17281: LD_INT 21
17283: PUSH
17284: LD_INT 1
17286: PUSH
17287: EMPTY
17288: LIST
17289: LIST
17290: PUSH
17291: EMPTY
17292: LIST
17293: LIST
17294: PPUSH
17295: CALL_OW 69
17299: ST_TO_ADDR
// if not tmp then
17300: LD_VAR 0 1
17304: NOT
17305: IFFALSE 17309
// exit ;
17307: GO 17354
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
17309: LD_VAR 0 1
17313: PUSH
17314: LD_INT 1
17316: PPUSH
17317: LD_VAR 0 1
17321: PPUSH
17322: CALL_OW 12
17326: ARRAY
17327: PPUSH
17328: LD_INT 1
17330: PPUSH
17331: LD_INT 4
17333: PPUSH
17334: CALL_OW 12
17338: PPUSH
17339: LD_INT 3000
17341: PPUSH
17342: LD_INT 9000
17344: PPUSH
17345: CALL_OW 12
17349: PPUSH
17350: CALL_OW 492
// end ;
17354: PPOPN 1
17356: END
// every 0 0$1 trigger StreamModeActive and sDepot do
17357: LD_EXP 39
17361: PUSH
17362: LD_EXP 54
17366: AND
17367: IFFALSE 17387
17369: GO 17371
17371: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
17372: LD_INT 1
17374: PPUSH
17375: LD_OWVAR 2
17379: PPUSH
17380: LD_INT 0
17382: PPUSH
17383: CALL_OW 324
17387: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
17388: LD_EXP 39
17392: PUSH
17393: LD_EXP 55
17397: AND
17398: IFFALSE 17481
17400: GO 17402
17402: DISABLE
17403: LD_INT 0
17405: PPUSH
17406: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
17407: LD_ADDR_VAR 0 2
17411: PUSH
17412: LD_INT 22
17414: PUSH
17415: LD_OWVAR 2
17419: PUSH
17420: EMPTY
17421: LIST
17422: LIST
17423: PUSH
17424: LD_INT 21
17426: PUSH
17427: LD_INT 3
17429: PUSH
17430: EMPTY
17431: LIST
17432: LIST
17433: PUSH
17434: EMPTY
17435: LIST
17436: LIST
17437: PPUSH
17438: CALL_OW 69
17442: ST_TO_ADDR
// if not tmp then
17443: LD_VAR 0 2
17447: NOT
17448: IFFALSE 17452
// exit ;
17450: GO 17481
// for i in tmp do
17452: LD_ADDR_VAR 0 1
17456: PUSH
17457: LD_VAR 0 2
17461: PUSH
17462: FOR_IN
17463: IFFALSE 17479
// SetBLevel ( i , 10 ) ;
17465: LD_VAR 0 1
17469: PPUSH
17470: LD_INT 10
17472: PPUSH
17473: CALL_OW 241
17477: GO 17462
17479: POP
17480: POP
// end ;
17481: PPOPN 2
17483: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
17484: LD_EXP 39
17488: PUSH
17489: LD_EXP 56
17493: AND
17494: IFFALSE 17605
17496: GO 17498
17498: DISABLE
17499: LD_INT 0
17501: PPUSH
17502: PPUSH
17503: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17504: LD_ADDR_VAR 0 3
17508: PUSH
17509: LD_INT 22
17511: PUSH
17512: LD_OWVAR 2
17516: PUSH
17517: EMPTY
17518: LIST
17519: LIST
17520: PUSH
17521: LD_INT 25
17523: PUSH
17524: LD_INT 1
17526: PUSH
17527: EMPTY
17528: LIST
17529: LIST
17530: PUSH
17531: EMPTY
17532: LIST
17533: LIST
17534: PPUSH
17535: CALL_OW 69
17539: ST_TO_ADDR
// if not tmp then
17540: LD_VAR 0 3
17544: NOT
17545: IFFALSE 17549
// exit ;
17547: GO 17605
// un := tmp [ rand ( 1 , tmp ) ] ;
17549: LD_ADDR_VAR 0 2
17553: PUSH
17554: LD_VAR 0 3
17558: PUSH
17559: LD_INT 1
17561: PPUSH
17562: LD_VAR 0 3
17566: PPUSH
17567: CALL_OW 12
17571: ARRAY
17572: ST_TO_ADDR
// if Crawls ( un ) then
17573: LD_VAR 0 2
17577: PPUSH
17578: CALL_OW 318
17582: IFFALSE 17593
// ComWalk ( un ) ;
17584: LD_VAR 0 2
17588: PPUSH
17589: CALL_OW 138
// SetClass ( un , class_sniper ) ;
17593: LD_VAR 0 2
17597: PPUSH
17598: LD_INT 5
17600: PPUSH
17601: CALL_OW 336
// end ;
17605: PPOPN 3
17607: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
17608: LD_EXP 39
17612: PUSH
17613: LD_EXP 57
17617: AND
17618: PUSH
17619: LD_OWVAR 67
17623: PUSH
17624: LD_INT 3
17626: LESS
17627: AND
17628: IFFALSE 17647
17630: GO 17632
17632: DISABLE
// Difficulty := Difficulty + 1 ;
17633: LD_ADDR_OWVAR 67
17637: PUSH
17638: LD_OWVAR 67
17642: PUSH
17643: LD_INT 1
17645: PLUS
17646: ST_TO_ADDR
17647: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
17648: LD_EXP 39
17652: PUSH
17653: LD_EXP 58
17657: AND
17658: IFFALSE 17761
17660: GO 17662
17662: DISABLE
17663: LD_INT 0
17665: PPUSH
// begin for i := 1 to 5 do
17666: LD_ADDR_VAR 0 1
17670: PUSH
17671: DOUBLE
17672: LD_INT 1
17674: DEC
17675: ST_TO_ADDR
17676: LD_INT 5
17678: PUSH
17679: FOR_TO
17680: IFFALSE 17759
// begin uc_nation := nation_nature ;
17682: LD_ADDR_OWVAR 21
17686: PUSH
17687: LD_INT 0
17689: ST_TO_ADDR
// uc_side := 0 ;
17690: LD_ADDR_OWVAR 20
17694: PUSH
17695: LD_INT 0
17697: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
17698: LD_ADDR_OWVAR 29
17702: PUSH
17703: LD_INT 12
17705: PUSH
17706: LD_INT 12
17708: PUSH
17709: EMPTY
17710: LIST
17711: LIST
17712: ST_TO_ADDR
// hc_agressivity := 20 ;
17713: LD_ADDR_OWVAR 35
17717: PUSH
17718: LD_INT 20
17720: ST_TO_ADDR
// hc_class := class_tiger ;
17721: LD_ADDR_OWVAR 28
17725: PUSH
17726: LD_INT 14
17728: ST_TO_ADDR
// hc_gallery :=  ;
17729: LD_ADDR_OWVAR 33
17733: PUSH
17734: LD_STRING 
17736: ST_TO_ADDR
// hc_name :=  ;
17737: LD_ADDR_OWVAR 26
17741: PUSH
17742: LD_STRING 
17744: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
17745: CALL_OW 44
17749: PPUSH
17750: LD_INT 0
17752: PPUSH
17753: CALL_OW 51
// end ;
17757: GO 17679
17759: POP
17760: POP
// end ;
17761: PPOPN 1
17763: END
// every 0 0$1 trigger StreamModeActive and sBomb do
17764: LD_EXP 39
17768: PUSH
17769: LD_EXP 59
17773: AND
17774: IFFALSE 17783
17776: GO 17778
17778: DISABLE
// StreamSibBomb ;
17779: CALL 17784 0 0
17783: END
// export function StreamSibBomb ; var i , x , y ; begin
17784: LD_INT 0
17786: PPUSH
17787: PPUSH
17788: PPUSH
17789: PPUSH
// result := false ;
17790: LD_ADDR_VAR 0 1
17794: PUSH
17795: LD_INT 0
17797: ST_TO_ADDR
// for i := 1 to 16 do
17798: LD_ADDR_VAR 0 2
17802: PUSH
17803: DOUBLE
17804: LD_INT 1
17806: DEC
17807: ST_TO_ADDR
17808: LD_INT 16
17810: PUSH
17811: FOR_TO
17812: IFFALSE 18011
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
17814: LD_ADDR_VAR 0 3
17818: PUSH
17819: LD_INT 10
17821: PUSH
17822: LD_INT 20
17824: PUSH
17825: LD_INT 30
17827: PUSH
17828: LD_INT 40
17830: PUSH
17831: LD_INT 50
17833: PUSH
17834: LD_INT 60
17836: PUSH
17837: LD_INT 70
17839: PUSH
17840: LD_INT 80
17842: PUSH
17843: LD_INT 90
17845: PUSH
17846: LD_INT 100
17848: PUSH
17849: LD_INT 110
17851: PUSH
17852: LD_INT 120
17854: PUSH
17855: LD_INT 130
17857: PUSH
17858: LD_INT 140
17860: PUSH
17861: LD_INT 150
17863: PUSH
17864: EMPTY
17865: LIST
17866: LIST
17867: LIST
17868: LIST
17869: LIST
17870: LIST
17871: LIST
17872: LIST
17873: LIST
17874: LIST
17875: LIST
17876: LIST
17877: LIST
17878: LIST
17879: LIST
17880: PUSH
17881: LD_INT 1
17883: PPUSH
17884: LD_INT 15
17886: PPUSH
17887: CALL_OW 12
17891: ARRAY
17892: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
17893: LD_ADDR_VAR 0 4
17897: PUSH
17898: LD_INT 10
17900: PUSH
17901: LD_INT 20
17903: PUSH
17904: LD_INT 30
17906: PUSH
17907: LD_INT 40
17909: PUSH
17910: LD_INT 50
17912: PUSH
17913: LD_INT 60
17915: PUSH
17916: LD_INT 70
17918: PUSH
17919: LD_INT 80
17921: PUSH
17922: LD_INT 90
17924: PUSH
17925: LD_INT 100
17927: PUSH
17928: LD_INT 110
17930: PUSH
17931: LD_INT 120
17933: PUSH
17934: LD_INT 130
17936: PUSH
17937: LD_INT 140
17939: PUSH
17940: LD_INT 150
17942: PUSH
17943: EMPTY
17944: LIST
17945: LIST
17946: LIST
17947: LIST
17948: LIST
17949: LIST
17950: LIST
17951: LIST
17952: LIST
17953: LIST
17954: LIST
17955: LIST
17956: LIST
17957: LIST
17958: LIST
17959: PUSH
17960: LD_INT 1
17962: PPUSH
17963: LD_INT 15
17965: PPUSH
17966: CALL_OW 12
17970: ARRAY
17971: ST_TO_ADDR
// if ValidHex ( x , y ) then
17972: LD_VAR 0 3
17976: PPUSH
17977: LD_VAR 0 4
17981: PPUSH
17982: CALL_OW 488
17986: IFFALSE 18009
// begin result := [ x , y ] ;
17988: LD_ADDR_VAR 0 1
17992: PUSH
17993: LD_VAR 0 3
17997: PUSH
17998: LD_VAR 0 4
18002: PUSH
18003: EMPTY
18004: LIST
18005: LIST
18006: ST_TO_ADDR
// break ;
18007: GO 18011
// end ; end ;
18009: GO 17811
18011: POP
18012: POP
// if result then
18013: LD_VAR 0 1
18017: IFFALSE 18077
// begin ToLua ( playSibBomb() ) ;
18019: LD_STRING playSibBomb()
18021: PPUSH
18022: CALL_OW 559
// wait ( 0 0$14 ) ;
18026: LD_INT 490
18028: PPUSH
18029: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
18033: LD_VAR 0 1
18037: PUSH
18038: LD_INT 1
18040: ARRAY
18041: PPUSH
18042: LD_VAR 0 1
18046: PUSH
18047: LD_INT 2
18049: ARRAY
18050: PPUSH
18051: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
18055: LD_VAR 0 1
18059: PUSH
18060: LD_INT 1
18062: ARRAY
18063: PPUSH
18064: LD_VAR 0 1
18068: PUSH
18069: LD_INT 2
18071: ARRAY
18072: PPUSH
18073: CALL_OW 429
// end ; end ;
18077: LD_VAR 0 1
18081: RET
// every 0 0$1 trigger StreamModeActive and sReset do
18082: LD_EXP 39
18086: PUSH
18087: LD_EXP 61
18091: AND
18092: IFFALSE 18104
18094: GO 18096
18096: DISABLE
// YouLost (  ) ;
18097: LD_STRING 
18099: PPUSH
18100: CALL_OW 104
18104: END
// every 0 0$1 trigger StreamModeActive and sFog do
18105: LD_EXP 39
18109: PUSH
18110: LD_EXP 60
18114: AND
18115: IFFALSE 18129
18117: GO 18119
18119: DISABLE
// FogOff ( your_side ) ;
18120: LD_OWVAR 2
18124: PPUSH
18125: CALL_OW 344
18129: END
// every 0 0$1 trigger StreamModeActive and sSun do
18130: LD_EXP 39
18134: PUSH
18135: LD_EXP 62
18139: AND
18140: IFFALSE 18168
18142: GO 18144
18144: DISABLE
// begin solar_recharge_percent := 0 ;
18145: LD_ADDR_OWVAR 79
18149: PUSH
18150: LD_INT 0
18152: ST_TO_ADDR
// wait ( 5 5$00 ) ;
18153: LD_INT 10500
18155: PPUSH
18156: CALL_OW 67
// solar_recharge_percent := 100 ;
18160: LD_ADDR_OWVAR 79
18164: PUSH
18165: LD_INT 100
18167: ST_TO_ADDR
// end ;
18168: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
18169: LD_EXP 39
18173: PUSH
18174: LD_EXP 63
18178: AND
18179: IFFALSE 18418
18181: GO 18183
18183: DISABLE
18184: LD_INT 0
18186: PPUSH
18187: PPUSH
18188: PPUSH
// begin tmp := [ ] ;
18189: LD_ADDR_VAR 0 3
18193: PUSH
18194: EMPTY
18195: ST_TO_ADDR
// for i := 1 to 6 do
18196: LD_ADDR_VAR 0 1
18200: PUSH
18201: DOUBLE
18202: LD_INT 1
18204: DEC
18205: ST_TO_ADDR
18206: LD_INT 6
18208: PUSH
18209: FOR_TO
18210: IFFALSE 18315
// begin uc_nation := nation_nature ;
18212: LD_ADDR_OWVAR 21
18216: PUSH
18217: LD_INT 0
18219: ST_TO_ADDR
// uc_side := 0 ;
18220: LD_ADDR_OWVAR 20
18224: PUSH
18225: LD_INT 0
18227: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
18228: LD_ADDR_OWVAR 29
18232: PUSH
18233: LD_INT 12
18235: PUSH
18236: LD_INT 12
18238: PUSH
18239: EMPTY
18240: LIST
18241: LIST
18242: ST_TO_ADDR
// hc_agressivity := 20 ;
18243: LD_ADDR_OWVAR 35
18247: PUSH
18248: LD_INT 20
18250: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
18251: LD_ADDR_OWVAR 28
18255: PUSH
18256: LD_INT 17
18258: ST_TO_ADDR
// hc_gallery :=  ;
18259: LD_ADDR_OWVAR 33
18263: PUSH
18264: LD_STRING 
18266: ST_TO_ADDR
// hc_name :=  ;
18267: LD_ADDR_OWVAR 26
18271: PUSH
18272: LD_STRING 
18274: ST_TO_ADDR
// un := CreateHuman ;
18275: LD_ADDR_VAR 0 2
18279: PUSH
18280: CALL_OW 44
18284: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
18285: LD_VAR 0 2
18289: PPUSH
18290: LD_INT 1
18292: PPUSH
18293: CALL_OW 51
// tmp := tmp ^ un ;
18297: LD_ADDR_VAR 0 3
18301: PUSH
18302: LD_VAR 0 3
18306: PUSH
18307: LD_VAR 0 2
18311: ADD
18312: ST_TO_ADDR
// end ;
18313: GO 18209
18315: POP
18316: POP
// repeat wait ( 0 0$1 ) ;
18317: LD_INT 35
18319: PPUSH
18320: CALL_OW 67
// for un in tmp do
18324: LD_ADDR_VAR 0 2
18328: PUSH
18329: LD_VAR 0 3
18333: PUSH
18334: FOR_IN
18335: IFFALSE 18409
// begin if IsDead ( un ) then
18337: LD_VAR 0 2
18341: PPUSH
18342: CALL_OW 301
18346: IFFALSE 18366
// begin tmp := tmp diff un ;
18348: LD_ADDR_VAR 0 3
18352: PUSH
18353: LD_VAR 0 3
18357: PUSH
18358: LD_VAR 0 2
18362: DIFF
18363: ST_TO_ADDR
// continue ;
18364: GO 18334
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
18366: LD_VAR 0 2
18370: PPUSH
18371: LD_INT 3
18373: PUSH
18374: LD_INT 22
18376: PUSH
18377: LD_INT 0
18379: PUSH
18380: EMPTY
18381: LIST
18382: LIST
18383: PUSH
18384: EMPTY
18385: LIST
18386: LIST
18387: PPUSH
18388: CALL_OW 69
18392: PPUSH
18393: LD_VAR 0 2
18397: PPUSH
18398: CALL_OW 74
18402: PPUSH
18403: CALL_OW 115
// end ;
18407: GO 18334
18409: POP
18410: POP
// until not tmp ;
18411: LD_VAR 0 3
18415: NOT
18416: IFFALSE 18317
// end ;
18418: PPOPN 3
18420: END
// every 0 0$1 trigger StreamModeActive and sTroll do
18421: LD_EXP 39
18425: PUSH
18426: LD_EXP 64
18430: AND
18431: IFFALSE 18485
18433: GO 18435
18435: DISABLE
// begin ToLua ( displayTroll(); ) ;
18436: LD_STRING displayTroll();
18438: PPUSH
18439: CALL_OW 559
// wait ( 3 3$00 ) ;
18443: LD_INT 6300
18445: PPUSH
18446: CALL_OW 67
// ToLua ( hideTroll(); ) ;
18450: LD_STRING hideTroll();
18452: PPUSH
18453: CALL_OW 559
// wait ( 1 1$00 ) ;
18457: LD_INT 2100
18459: PPUSH
18460: CALL_OW 67
// ToLua ( displayTroll(); ) ;
18464: LD_STRING displayTroll();
18466: PPUSH
18467: CALL_OW 559
// wait ( 1 1$00 ) ;
18471: LD_INT 2100
18473: PPUSH
18474: CALL_OW 67
// ToLua ( hideTroll(); ) ;
18478: LD_STRING hideTroll();
18480: PPUSH
18481: CALL_OW 559
// end ;
18485: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
18486: LD_EXP 39
18490: PUSH
18491: LD_EXP 65
18495: AND
18496: IFFALSE 18559
18498: GO 18500
18500: DISABLE
18501: LD_INT 0
18503: PPUSH
// begin p := 0 ;
18504: LD_ADDR_VAR 0 1
18508: PUSH
18509: LD_INT 0
18511: ST_TO_ADDR
// repeat game_speed := 1 ;
18512: LD_ADDR_OWVAR 65
18516: PUSH
18517: LD_INT 1
18519: ST_TO_ADDR
// wait ( 0 0$1 ) ;
18520: LD_INT 35
18522: PPUSH
18523: CALL_OW 67
// p := p + 1 ;
18527: LD_ADDR_VAR 0 1
18531: PUSH
18532: LD_VAR 0 1
18536: PUSH
18537: LD_INT 1
18539: PLUS
18540: ST_TO_ADDR
// until p >= 60 ;
18541: LD_VAR 0 1
18545: PUSH
18546: LD_INT 60
18548: GREATEREQUAL
18549: IFFALSE 18512
// game_speed := 4 ;
18551: LD_ADDR_OWVAR 65
18555: PUSH
18556: LD_INT 4
18558: ST_TO_ADDR
// end ;
18559: PPOPN 1
18561: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
18562: LD_EXP 39
18566: PUSH
18567: LD_EXP 66
18571: AND
18572: IFFALSE 18718
18574: GO 18576
18576: DISABLE
18577: LD_INT 0
18579: PPUSH
18580: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18581: LD_ADDR_VAR 0 1
18585: PUSH
18586: LD_INT 22
18588: PUSH
18589: LD_OWVAR 2
18593: PUSH
18594: EMPTY
18595: LIST
18596: LIST
18597: PUSH
18598: LD_INT 2
18600: PUSH
18601: LD_INT 30
18603: PUSH
18604: LD_INT 0
18606: PUSH
18607: EMPTY
18608: LIST
18609: LIST
18610: PUSH
18611: LD_INT 30
18613: PUSH
18614: LD_INT 1
18616: PUSH
18617: EMPTY
18618: LIST
18619: LIST
18620: PUSH
18621: EMPTY
18622: LIST
18623: LIST
18624: LIST
18625: PUSH
18626: EMPTY
18627: LIST
18628: LIST
18629: PPUSH
18630: CALL_OW 69
18634: ST_TO_ADDR
// if not depot then
18635: LD_VAR 0 1
18639: NOT
18640: IFFALSE 18644
// exit ;
18642: GO 18718
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
18644: LD_ADDR_VAR 0 2
18648: PUSH
18649: LD_VAR 0 1
18653: PUSH
18654: LD_INT 1
18656: PPUSH
18657: LD_VAR 0 1
18661: PPUSH
18662: CALL_OW 12
18666: ARRAY
18667: PPUSH
18668: CALL_OW 274
18672: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
18673: LD_VAR 0 2
18677: PPUSH
18678: LD_INT 1
18680: PPUSH
18681: LD_INT 0
18683: PPUSH
18684: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
18688: LD_VAR 0 2
18692: PPUSH
18693: LD_INT 2
18695: PPUSH
18696: LD_INT 0
18698: PPUSH
18699: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
18703: LD_VAR 0 2
18707: PPUSH
18708: LD_INT 3
18710: PPUSH
18711: LD_INT 0
18713: PPUSH
18714: CALL_OW 277
// end ;
18718: PPOPN 2
18720: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
18721: LD_EXP 39
18725: PUSH
18726: LD_EXP 67
18730: AND
18731: IFFALSE 18828
18733: GO 18735
18735: DISABLE
18736: LD_INT 0
18738: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18739: LD_ADDR_VAR 0 1
18743: PUSH
18744: LD_INT 22
18746: PUSH
18747: LD_OWVAR 2
18751: PUSH
18752: EMPTY
18753: LIST
18754: LIST
18755: PUSH
18756: LD_INT 21
18758: PUSH
18759: LD_INT 1
18761: PUSH
18762: EMPTY
18763: LIST
18764: LIST
18765: PUSH
18766: LD_INT 3
18768: PUSH
18769: LD_INT 23
18771: PUSH
18772: LD_INT 0
18774: PUSH
18775: EMPTY
18776: LIST
18777: LIST
18778: PUSH
18779: EMPTY
18780: LIST
18781: LIST
18782: PUSH
18783: EMPTY
18784: LIST
18785: LIST
18786: LIST
18787: PPUSH
18788: CALL_OW 69
18792: ST_TO_ADDR
// if not tmp then
18793: LD_VAR 0 1
18797: NOT
18798: IFFALSE 18802
// exit ;
18800: GO 18828
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
18802: LD_VAR 0 1
18806: PUSH
18807: LD_INT 1
18809: PPUSH
18810: LD_VAR 0 1
18814: PPUSH
18815: CALL_OW 12
18819: ARRAY
18820: PPUSH
18821: LD_INT 200
18823: PPUSH
18824: CALL_OW 234
// end ;
18828: PPOPN 1
18830: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
18831: LD_EXP 39
18835: PUSH
18836: LD_EXP 68
18840: AND
18841: IFFALSE 18920
18843: GO 18845
18845: DISABLE
18846: LD_INT 0
18848: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
18849: LD_ADDR_VAR 0 1
18853: PUSH
18854: LD_INT 22
18856: PUSH
18857: LD_OWVAR 2
18861: PUSH
18862: EMPTY
18863: LIST
18864: LIST
18865: PUSH
18866: LD_INT 21
18868: PUSH
18869: LD_INT 2
18871: PUSH
18872: EMPTY
18873: LIST
18874: LIST
18875: PUSH
18876: EMPTY
18877: LIST
18878: LIST
18879: PPUSH
18880: CALL_OW 69
18884: ST_TO_ADDR
// if not tmp then
18885: LD_VAR 0 1
18889: NOT
18890: IFFALSE 18894
// exit ;
18892: GO 18920
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
18894: LD_VAR 0 1
18898: PUSH
18899: LD_INT 1
18901: PPUSH
18902: LD_VAR 0 1
18906: PPUSH
18907: CALL_OW 12
18911: ARRAY
18912: PPUSH
18913: LD_INT 60
18915: PPUSH
18916: CALL_OW 234
// end ;
18920: PPOPN 1
18922: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
18923: LD_EXP 39
18927: PUSH
18928: LD_EXP 69
18932: AND
18933: IFFALSE 19032
18935: GO 18937
18937: DISABLE
18938: LD_INT 0
18940: PPUSH
18941: PPUSH
// begin enable ;
18942: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
18943: LD_ADDR_VAR 0 1
18947: PUSH
18948: LD_INT 22
18950: PUSH
18951: LD_OWVAR 2
18955: PUSH
18956: EMPTY
18957: LIST
18958: LIST
18959: PUSH
18960: LD_INT 61
18962: PUSH
18963: EMPTY
18964: LIST
18965: PUSH
18966: LD_INT 33
18968: PUSH
18969: LD_INT 2
18971: PUSH
18972: EMPTY
18973: LIST
18974: LIST
18975: PUSH
18976: EMPTY
18977: LIST
18978: LIST
18979: LIST
18980: PPUSH
18981: CALL_OW 69
18985: ST_TO_ADDR
// if not tmp then
18986: LD_VAR 0 1
18990: NOT
18991: IFFALSE 18995
// exit ;
18993: GO 19032
// for i in tmp do
18995: LD_ADDR_VAR 0 2
18999: PUSH
19000: LD_VAR 0 1
19004: PUSH
19005: FOR_IN
19006: IFFALSE 19030
// if IsControledBy ( i ) then
19008: LD_VAR 0 2
19012: PPUSH
19013: CALL_OW 312
19017: IFFALSE 19028
// ComUnlink ( i ) ;
19019: LD_VAR 0 2
19023: PPUSH
19024: CALL_OW 136
19028: GO 19005
19030: POP
19031: POP
// end ;
19032: PPOPN 2
19034: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
19035: LD_EXP 39
19039: PUSH
19040: LD_EXP 70
19044: AND
19045: IFFALSE 19185
19047: GO 19049
19049: DISABLE
19050: LD_INT 0
19052: PPUSH
19053: PPUSH
// begin ToLua ( displayPowell(); ) ;
19054: LD_STRING displayPowell();
19056: PPUSH
19057: CALL_OW 559
// uc_side := 0 ;
19061: LD_ADDR_OWVAR 20
19065: PUSH
19066: LD_INT 0
19068: ST_TO_ADDR
// uc_nation := 2 ;
19069: LD_ADDR_OWVAR 21
19073: PUSH
19074: LD_INT 2
19076: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
19077: LD_ADDR_OWVAR 37
19081: PUSH
19082: LD_INT 14
19084: ST_TO_ADDR
// vc_engine := engine_siberite ;
19085: LD_ADDR_OWVAR 39
19089: PUSH
19090: LD_INT 3
19092: ST_TO_ADDR
// vc_control := control_apeman ;
19093: LD_ADDR_OWVAR 38
19097: PUSH
19098: LD_INT 5
19100: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
19101: LD_ADDR_OWVAR 40
19105: PUSH
19106: LD_INT 29
19108: ST_TO_ADDR
// un := CreateVehicle ;
19109: LD_ADDR_VAR 0 2
19113: PUSH
19114: CALL_OW 45
19118: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19119: LD_VAR 0 2
19123: PPUSH
19124: LD_INT 1
19126: PPUSH
19127: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
19131: LD_INT 35
19133: PPUSH
19134: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
19138: LD_VAR 0 2
19142: PPUSH
19143: LD_INT 22
19145: PUSH
19146: LD_OWVAR 2
19150: PUSH
19151: EMPTY
19152: LIST
19153: LIST
19154: PPUSH
19155: CALL_OW 69
19159: PPUSH
19160: LD_VAR 0 2
19164: PPUSH
19165: CALL_OW 74
19169: PPUSH
19170: CALL_OW 115
// until IsDead ( un ) ;
19174: LD_VAR 0 2
19178: PPUSH
19179: CALL_OW 301
19183: IFFALSE 19131
// end ;
19185: PPOPN 2
19187: END
// every 0 0$1 trigger StreamModeActive and sStu do
19188: LD_EXP 39
19192: PUSH
19193: LD_EXP 78
19197: AND
19198: IFFALSE 19214
19200: GO 19202
19202: DISABLE
// begin ToLua ( displayStucuk(); ) ;
19203: LD_STRING displayStucuk();
19205: PPUSH
19206: CALL_OW 559
// ResetFog ;
19210: CALL_OW 335
// end ;
19214: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
19215: LD_EXP 39
19219: PUSH
19220: LD_EXP 71
19224: AND
19225: IFFALSE 19366
19227: GO 19229
19229: DISABLE
19230: LD_INT 0
19232: PPUSH
19233: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19234: LD_ADDR_VAR 0 2
19238: PUSH
19239: LD_INT 22
19241: PUSH
19242: LD_OWVAR 2
19246: PUSH
19247: EMPTY
19248: LIST
19249: LIST
19250: PUSH
19251: LD_INT 21
19253: PUSH
19254: LD_INT 1
19256: PUSH
19257: EMPTY
19258: LIST
19259: LIST
19260: PUSH
19261: EMPTY
19262: LIST
19263: LIST
19264: PPUSH
19265: CALL_OW 69
19269: ST_TO_ADDR
// if not tmp then
19270: LD_VAR 0 2
19274: NOT
19275: IFFALSE 19279
// exit ;
19277: GO 19366
// un := tmp [ rand ( 1 , tmp ) ] ;
19279: LD_ADDR_VAR 0 1
19283: PUSH
19284: LD_VAR 0 2
19288: PUSH
19289: LD_INT 1
19291: PPUSH
19292: LD_VAR 0 2
19296: PPUSH
19297: CALL_OW 12
19301: ARRAY
19302: ST_TO_ADDR
// SetSide ( un , 0 ) ;
19303: LD_VAR 0 1
19307: PPUSH
19308: LD_INT 0
19310: PPUSH
19311: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
19315: LD_VAR 0 1
19319: PPUSH
19320: LD_OWVAR 3
19324: PUSH
19325: LD_VAR 0 1
19329: DIFF
19330: PPUSH
19331: LD_VAR 0 1
19335: PPUSH
19336: CALL_OW 74
19340: PPUSH
19341: CALL_OW 115
// wait ( 0 0$20 ) ;
19345: LD_INT 700
19347: PPUSH
19348: CALL_OW 67
// SetSide ( un , your_side ) ;
19352: LD_VAR 0 1
19356: PPUSH
19357: LD_OWVAR 2
19361: PPUSH
19362: CALL_OW 235
// end ;
19366: PPOPN 2
19368: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
19369: LD_EXP 39
19373: PUSH
19374: LD_EXP 72
19378: AND
19379: IFFALSE 19485
19381: GO 19383
19383: DISABLE
19384: LD_INT 0
19386: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19387: LD_ADDR_VAR 0 1
19391: PUSH
19392: LD_INT 22
19394: PUSH
19395: LD_OWVAR 2
19399: PUSH
19400: EMPTY
19401: LIST
19402: LIST
19403: PUSH
19404: LD_INT 2
19406: PUSH
19407: LD_INT 30
19409: PUSH
19410: LD_INT 0
19412: PUSH
19413: EMPTY
19414: LIST
19415: LIST
19416: PUSH
19417: LD_INT 30
19419: PUSH
19420: LD_INT 1
19422: PUSH
19423: EMPTY
19424: LIST
19425: LIST
19426: PUSH
19427: EMPTY
19428: LIST
19429: LIST
19430: LIST
19431: PUSH
19432: EMPTY
19433: LIST
19434: LIST
19435: PPUSH
19436: CALL_OW 69
19440: ST_TO_ADDR
// if not depot then
19441: LD_VAR 0 1
19445: NOT
19446: IFFALSE 19450
// exit ;
19448: GO 19485
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
19450: LD_VAR 0 1
19454: PUSH
19455: LD_INT 1
19457: ARRAY
19458: PPUSH
19459: CALL_OW 250
19463: PPUSH
19464: LD_VAR 0 1
19468: PUSH
19469: LD_INT 1
19471: ARRAY
19472: PPUSH
19473: CALL_OW 251
19477: PPUSH
19478: LD_INT 70
19480: PPUSH
19481: CALL_OW 495
// end ;
19485: PPOPN 1
19487: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
19488: LD_EXP 39
19492: PUSH
19493: LD_EXP 73
19497: AND
19498: IFFALSE 19709
19500: GO 19502
19502: DISABLE
19503: LD_INT 0
19505: PPUSH
19506: PPUSH
19507: PPUSH
19508: PPUSH
19509: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19510: LD_ADDR_VAR 0 5
19514: PUSH
19515: LD_INT 22
19517: PUSH
19518: LD_OWVAR 2
19522: PUSH
19523: EMPTY
19524: LIST
19525: LIST
19526: PUSH
19527: LD_INT 21
19529: PUSH
19530: LD_INT 1
19532: PUSH
19533: EMPTY
19534: LIST
19535: LIST
19536: PUSH
19537: EMPTY
19538: LIST
19539: LIST
19540: PPUSH
19541: CALL_OW 69
19545: ST_TO_ADDR
// if not tmp then
19546: LD_VAR 0 5
19550: NOT
19551: IFFALSE 19555
// exit ;
19553: GO 19709
// for i in tmp do
19555: LD_ADDR_VAR 0 1
19559: PUSH
19560: LD_VAR 0 5
19564: PUSH
19565: FOR_IN
19566: IFFALSE 19707
// begin d := rand ( 0 , 5 ) ;
19568: LD_ADDR_VAR 0 4
19572: PUSH
19573: LD_INT 0
19575: PPUSH
19576: LD_INT 5
19578: PPUSH
19579: CALL_OW 12
19583: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
19584: LD_ADDR_VAR 0 2
19588: PUSH
19589: LD_VAR 0 1
19593: PPUSH
19594: CALL_OW 250
19598: PPUSH
19599: LD_VAR 0 4
19603: PPUSH
19604: LD_INT 3
19606: PPUSH
19607: LD_INT 12
19609: PPUSH
19610: CALL_OW 12
19614: PPUSH
19615: CALL_OW 272
19619: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
19620: LD_ADDR_VAR 0 3
19624: PUSH
19625: LD_VAR 0 1
19629: PPUSH
19630: CALL_OW 251
19634: PPUSH
19635: LD_VAR 0 4
19639: PPUSH
19640: LD_INT 3
19642: PPUSH
19643: LD_INT 12
19645: PPUSH
19646: CALL_OW 12
19650: PPUSH
19651: CALL_OW 273
19655: ST_TO_ADDR
// if ValidHex ( x , y ) then
19656: LD_VAR 0 2
19660: PPUSH
19661: LD_VAR 0 3
19665: PPUSH
19666: CALL_OW 488
19670: IFFALSE 19705
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
19672: LD_VAR 0 1
19676: PPUSH
19677: LD_VAR 0 2
19681: PPUSH
19682: LD_VAR 0 3
19686: PPUSH
19687: LD_INT 3
19689: PPUSH
19690: LD_INT 6
19692: PPUSH
19693: CALL_OW 12
19697: PPUSH
19698: LD_INT 1
19700: PPUSH
19701: CALL_OW 483
// end ;
19705: GO 19565
19707: POP
19708: POP
// end ;
19709: PPOPN 5
19711: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
19712: LD_EXP 39
19716: PUSH
19717: LD_EXP 74
19721: AND
19722: IFFALSE 19816
19724: GO 19726
19726: DISABLE
19727: LD_INT 0
19729: PPUSH
19730: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
19731: LD_ADDR_VAR 0 2
19735: PUSH
19736: LD_INT 22
19738: PUSH
19739: LD_OWVAR 2
19743: PUSH
19744: EMPTY
19745: LIST
19746: LIST
19747: PUSH
19748: LD_INT 32
19750: PUSH
19751: LD_INT 1
19753: PUSH
19754: EMPTY
19755: LIST
19756: LIST
19757: PUSH
19758: LD_INT 21
19760: PUSH
19761: LD_INT 2
19763: PUSH
19764: EMPTY
19765: LIST
19766: LIST
19767: PUSH
19768: EMPTY
19769: LIST
19770: LIST
19771: LIST
19772: PPUSH
19773: CALL_OW 69
19777: ST_TO_ADDR
// if not tmp then
19778: LD_VAR 0 2
19782: NOT
19783: IFFALSE 19787
// exit ;
19785: GO 19816
// for i in tmp do
19787: LD_ADDR_VAR 0 1
19791: PUSH
19792: LD_VAR 0 2
19796: PUSH
19797: FOR_IN
19798: IFFALSE 19814
// SetFuel ( i , 0 ) ;
19800: LD_VAR 0 1
19804: PPUSH
19805: LD_INT 0
19807: PPUSH
19808: CALL_OW 240
19812: GO 19797
19814: POP
19815: POP
// end ;
19816: PPOPN 2
19818: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
19819: LD_EXP 39
19823: PUSH
19824: LD_EXP 75
19828: AND
19829: IFFALSE 19895
19831: GO 19833
19833: DISABLE
19834: LD_INT 0
19836: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
19837: LD_ADDR_VAR 0 1
19841: PUSH
19842: LD_INT 22
19844: PUSH
19845: LD_OWVAR 2
19849: PUSH
19850: EMPTY
19851: LIST
19852: LIST
19853: PUSH
19854: LD_INT 30
19856: PUSH
19857: LD_INT 29
19859: PUSH
19860: EMPTY
19861: LIST
19862: LIST
19863: PUSH
19864: EMPTY
19865: LIST
19866: LIST
19867: PPUSH
19868: CALL_OW 69
19872: ST_TO_ADDR
// if not tmp then
19873: LD_VAR 0 1
19877: NOT
19878: IFFALSE 19882
// exit ;
19880: GO 19895
// DestroyUnit ( tmp [ 1 ] ) ;
19882: LD_VAR 0 1
19886: PUSH
19887: LD_INT 1
19889: ARRAY
19890: PPUSH
19891: CALL_OW 65
// end ;
19895: PPOPN 1
19897: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
19898: LD_EXP 39
19902: PUSH
19903: LD_EXP 77
19907: AND
19908: IFFALSE 20037
19910: GO 19912
19912: DISABLE
19913: LD_INT 0
19915: PPUSH
// begin uc_side := 0 ;
19916: LD_ADDR_OWVAR 20
19920: PUSH
19921: LD_INT 0
19923: ST_TO_ADDR
// uc_nation := nation_arabian ;
19924: LD_ADDR_OWVAR 21
19928: PUSH
19929: LD_INT 2
19931: ST_TO_ADDR
// hc_gallery :=  ;
19932: LD_ADDR_OWVAR 33
19936: PUSH
19937: LD_STRING 
19939: ST_TO_ADDR
// hc_name :=  ;
19940: LD_ADDR_OWVAR 26
19944: PUSH
19945: LD_STRING 
19947: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
19948: LD_INT 1
19950: PPUSH
19951: LD_INT 11
19953: PPUSH
19954: LD_INT 10
19956: PPUSH
19957: CALL_OW 380
// un := CreateHuman ;
19961: LD_ADDR_VAR 0 1
19965: PUSH
19966: CALL_OW 44
19970: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19971: LD_VAR 0 1
19975: PPUSH
19976: LD_INT 1
19978: PPUSH
19979: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
19983: LD_INT 35
19985: PPUSH
19986: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
19990: LD_VAR 0 1
19994: PPUSH
19995: LD_INT 22
19997: PUSH
19998: LD_OWVAR 2
20002: PUSH
20003: EMPTY
20004: LIST
20005: LIST
20006: PPUSH
20007: CALL_OW 69
20011: PPUSH
20012: LD_VAR 0 1
20016: PPUSH
20017: CALL_OW 74
20021: PPUSH
20022: CALL_OW 115
// until IsDead ( un ) ;
20026: LD_VAR 0 1
20030: PPUSH
20031: CALL_OW 301
20035: IFFALSE 19983
// end ;
20037: PPOPN 1
20039: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
20040: LD_EXP 39
20044: PUSH
20045: LD_EXP 79
20049: AND
20050: IFFALSE 20062
20052: GO 20054
20054: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
20055: LD_STRING earthquake(getX(game), 0, 32)
20057: PPUSH
20058: CALL_OW 559
20062: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
20063: LD_EXP 39
20067: PUSH
20068: LD_EXP 80
20072: AND
20073: IFFALSE 20164
20075: GO 20077
20077: DISABLE
20078: LD_INT 0
20080: PPUSH
// begin enable ;
20081: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
20082: LD_ADDR_VAR 0 1
20086: PUSH
20087: LD_INT 22
20089: PUSH
20090: LD_OWVAR 2
20094: PUSH
20095: EMPTY
20096: LIST
20097: LIST
20098: PUSH
20099: LD_INT 21
20101: PUSH
20102: LD_INT 2
20104: PUSH
20105: EMPTY
20106: LIST
20107: LIST
20108: PUSH
20109: LD_INT 33
20111: PUSH
20112: LD_INT 3
20114: PUSH
20115: EMPTY
20116: LIST
20117: LIST
20118: PUSH
20119: EMPTY
20120: LIST
20121: LIST
20122: LIST
20123: PPUSH
20124: CALL_OW 69
20128: ST_TO_ADDR
// if not tmp then
20129: LD_VAR 0 1
20133: NOT
20134: IFFALSE 20138
// exit ;
20136: GO 20164
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
20138: LD_VAR 0 1
20142: PUSH
20143: LD_INT 1
20145: PPUSH
20146: LD_VAR 0 1
20150: PPUSH
20151: CALL_OW 12
20155: ARRAY
20156: PPUSH
20157: LD_INT 1
20159: PPUSH
20160: CALL_OW 234
// end ;
20164: PPOPN 1
20166: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
20167: LD_EXP 39
20171: PUSH
20172: LD_EXP 81
20176: AND
20177: IFFALSE 20318
20179: GO 20181
20181: DISABLE
20182: LD_INT 0
20184: PPUSH
20185: PPUSH
20186: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20187: LD_ADDR_VAR 0 3
20191: PUSH
20192: LD_INT 22
20194: PUSH
20195: LD_OWVAR 2
20199: PUSH
20200: EMPTY
20201: LIST
20202: LIST
20203: PUSH
20204: LD_INT 25
20206: PUSH
20207: LD_INT 1
20209: PUSH
20210: EMPTY
20211: LIST
20212: LIST
20213: PUSH
20214: EMPTY
20215: LIST
20216: LIST
20217: PPUSH
20218: CALL_OW 69
20222: ST_TO_ADDR
// if not tmp then
20223: LD_VAR 0 3
20227: NOT
20228: IFFALSE 20232
// exit ;
20230: GO 20318
// un := tmp [ rand ( 1 , tmp ) ] ;
20232: LD_ADDR_VAR 0 2
20236: PUSH
20237: LD_VAR 0 3
20241: PUSH
20242: LD_INT 1
20244: PPUSH
20245: LD_VAR 0 3
20249: PPUSH
20250: CALL_OW 12
20254: ARRAY
20255: ST_TO_ADDR
// if Crawls ( un ) then
20256: LD_VAR 0 2
20260: PPUSH
20261: CALL_OW 318
20265: IFFALSE 20276
// ComWalk ( un ) ;
20267: LD_VAR 0 2
20271: PPUSH
20272: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
20276: LD_VAR 0 2
20280: PPUSH
20281: LD_INT 9
20283: PPUSH
20284: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
20288: LD_INT 28
20290: PPUSH
20291: LD_OWVAR 2
20295: PPUSH
20296: LD_INT 2
20298: PPUSH
20299: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
20303: LD_INT 29
20305: PPUSH
20306: LD_OWVAR 2
20310: PPUSH
20311: LD_INT 2
20313: PPUSH
20314: CALL_OW 322
// end ;
20318: PPOPN 3
20320: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
20321: LD_EXP 39
20325: PUSH
20326: LD_EXP 82
20330: AND
20331: IFFALSE 20442
20333: GO 20335
20335: DISABLE
20336: LD_INT 0
20338: PPUSH
20339: PPUSH
20340: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20341: LD_ADDR_VAR 0 3
20345: PUSH
20346: LD_INT 22
20348: PUSH
20349: LD_OWVAR 2
20353: PUSH
20354: EMPTY
20355: LIST
20356: LIST
20357: PUSH
20358: LD_INT 25
20360: PUSH
20361: LD_INT 1
20363: PUSH
20364: EMPTY
20365: LIST
20366: LIST
20367: PUSH
20368: EMPTY
20369: LIST
20370: LIST
20371: PPUSH
20372: CALL_OW 69
20376: ST_TO_ADDR
// if not tmp then
20377: LD_VAR 0 3
20381: NOT
20382: IFFALSE 20386
// exit ;
20384: GO 20442
// un := tmp [ rand ( 1 , tmp ) ] ;
20386: LD_ADDR_VAR 0 2
20390: PUSH
20391: LD_VAR 0 3
20395: PUSH
20396: LD_INT 1
20398: PPUSH
20399: LD_VAR 0 3
20403: PPUSH
20404: CALL_OW 12
20408: ARRAY
20409: ST_TO_ADDR
// if Crawls ( un ) then
20410: LD_VAR 0 2
20414: PPUSH
20415: CALL_OW 318
20419: IFFALSE 20430
// ComWalk ( un ) ;
20421: LD_VAR 0 2
20425: PPUSH
20426: CALL_OW 138
// SetClass ( un , class_mortar ) ;
20430: LD_VAR 0 2
20434: PPUSH
20435: LD_INT 8
20437: PPUSH
20438: CALL_OW 336
// end ;
20442: PPOPN 3
20444: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
20445: LD_EXP 39
20449: PUSH
20450: LD_EXP 83
20454: AND
20455: IFFALSE 20599
20457: GO 20459
20459: DISABLE
20460: LD_INT 0
20462: PPUSH
20463: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
20464: LD_ADDR_VAR 0 2
20468: PUSH
20469: LD_INT 22
20471: PUSH
20472: LD_OWVAR 2
20476: PUSH
20477: EMPTY
20478: LIST
20479: LIST
20480: PUSH
20481: LD_INT 21
20483: PUSH
20484: LD_INT 2
20486: PUSH
20487: EMPTY
20488: LIST
20489: LIST
20490: PUSH
20491: LD_INT 2
20493: PUSH
20494: LD_INT 34
20496: PUSH
20497: LD_INT 12
20499: PUSH
20500: EMPTY
20501: LIST
20502: LIST
20503: PUSH
20504: LD_INT 34
20506: PUSH
20507: LD_INT 51
20509: PUSH
20510: EMPTY
20511: LIST
20512: LIST
20513: PUSH
20514: LD_INT 34
20516: PUSH
20517: LD_INT 32
20519: PUSH
20520: EMPTY
20521: LIST
20522: LIST
20523: PUSH
20524: EMPTY
20525: LIST
20526: LIST
20527: LIST
20528: LIST
20529: PUSH
20530: EMPTY
20531: LIST
20532: LIST
20533: LIST
20534: PPUSH
20535: CALL_OW 69
20539: ST_TO_ADDR
// if not tmp then
20540: LD_VAR 0 2
20544: NOT
20545: IFFALSE 20549
// exit ;
20547: GO 20599
// for i in tmp do
20549: LD_ADDR_VAR 0 1
20553: PUSH
20554: LD_VAR 0 2
20558: PUSH
20559: FOR_IN
20560: IFFALSE 20597
// if GetCargo ( i , mat_artifact ) = 0 then
20562: LD_VAR 0 1
20566: PPUSH
20567: LD_INT 4
20569: PPUSH
20570: CALL_OW 289
20574: PUSH
20575: LD_INT 0
20577: EQUAL
20578: IFFALSE 20595
// SetCargo ( i , mat_siberit , 100 ) ;
20580: LD_VAR 0 1
20584: PPUSH
20585: LD_INT 3
20587: PPUSH
20588: LD_INT 100
20590: PPUSH
20591: CALL_OW 290
20595: GO 20559
20597: POP
20598: POP
// end ;
20599: PPOPN 2
20601: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
20602: LD_EXP 39
20606: PUSH
20607: LD_EXP 84
20611: AND
20612: IFFALSE 20795
20614: GO 20616
20616: DISABLE
20617: LD_INT 0
20619: PPUSH
20620: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
20621: LD_ADDR_VAR 0 2
20625: PUSH
20626: LD_INT 22
20628: PUSH
20629: LD_OWVAR 2
20633: PUSH
20634: EMPTY
20635: LIST
20636: LIST
20637: PPUSH
20638: CALL_OW 69
20642: ST_TO_ADDR
// if not tmp then
20643: LD_VAR 0 2
20647: NOT
20648: IFFALSE 20652
// exit ;
20650: GO 20795
// for i := 1 to 2 do
20652: LD_ADDR_VAR 0 1
20656: PUSH
20657: DOUBLE
20658: LD_INT 1
20660: DEC
20661: ST_TO_ADDR
20662: LD_INT 2
20664: PUSH
20665: FOR_TO
20666: IFFALSE 20793
// begin uc_side := your_side ;
20668: LD_ADDR_OWVAR 20
20672: PUSH
20673: LD_OWVAR 2
20677: ST_TO_ADDR
// uc_nation := nation_american ;
20678: LD_ADDR_OWVAR 21
20682: PUSH
20683: LD_INT 1
20685: ST_TO_ADDR
// vc_chassis := us_morphling ;
20686: LD_ADDR_OWVAR 37
20690: PUSH
20691: LD_INT 5
20693: ST_TO_ADDR
// vc_engine := engine_siberite ;
20694: LD_ADDR_OWVAR 39
20698: PUSH
20699: LD_INT 3
20701: ST_TO_ADDR
// vc_control := control_computer ;
20702: LD_ADDR_OWVAR 38
20706: PUSH
20707: LD_INT 3
20709: ST_TO_ADDR
// vc_weapon := us_double_laser ;
20710: LD_ADDR_OWVAR 40
20714: PUSH
20715: LD_INT 10
20717: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
20718: LD_VAR 0 2
20722: PUSH
20723: LD_INT 1
20725: ARRAY
20726: PPUSH
20727: CALL_OW 310
20731: NOT
20732: IFFALSE 20779
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
20734: CALL_OW 45
20738: PPUSH
20739: LD_VAR 0 2
20743: PUSH
20744: LD_INT 1
20746: ARRAY
20747: PPUSH
20748: CALL_OW 250
20752: PPUSH
20753: LD_VAR 0 2
20757: PUSH
20758: LD_INT 1
20760: ARRAY
20761: PPUSH
20762: CALL_OW 251
20766: PPUSH
20767: LD_INT 12
20769: PPUSH
20770: LD_INT 1
20772: PPUSH
20773: CALL_OW 50
20777: GO 20791
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
20779: CALL_OW 45
20783: PPUSH
20784: LD_INT 1
20786: PPUSH
20787: CALL_OW 51
// end ;
20791: GO 20665
20793: POP
20794: POP
// end ;
20795: PPOPN 2
20797: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
20798: LD_EXP 39
20802: PUSH
20803: LD_EXP 85
20807: AND
20808: IFFALSE 21030
20810: GO 20812
20812: DISABLE
20813: LD_INT 0
20815: PPUSH
20816: PPUSH
20817: PPUSH
20818: PPUSH
20819: PPUSH
20820: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20821: LD_ADDR_VAR 0 6
20825: PUSH
20826: LD_INT 22
20828: PUSH
20829: LD_OWVAR 2
20833: PUSH
20834: EMPTY
20835: LIST
20836: LIST
20837: PUSH
20838: LD_INT 21
20840: PUSH
20841: LD_INT 1
20843: PUSH
20844: EMPTY
20845: LIST
20846: LIST
20847: PUSH
20848: LD_INT 3
20850: PUSH
20851: LD_INT 23
20853: PUSH
20854: LD_INT 0
20856: PUSH
20857: EMPTY
20858: LIST
20859: LIST
20860: PUSH
20861: EMPTY
20862: LIST
20863: LIST
20864: PUSH
20865: EMPTY
20866: LIST
20867: LIST
20868: LIST
20869: PPUSH
20870: CALL_OW 69
20874: ST_TO_ADDR
// if not tmp then
20875: LD_VAR 0 6
20879: NOT
20880: IFFALSE 20884
// exit ;
20882: GO 21030
// s1 := rand ( 1 , 4 ) ;
20884: LD_ADDR_VAR 0 2
20888: PUSH
20889: LD_INT 1
20891: PPUSH
20892: LD_INT 4
20894: PPUSH
20895: CALL_OW 12
20899: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
20900: LD_ADDR_VAR 0 4
20904: PUSH
20905: LD_VAR 0 6
20909: PUSH
20910: LD_INT 1
20912: ARRAY
20913: PPUSH
20914: LD_VAR 0 2
20918: PPUSH
20919: CALL_OW 259
20923: ST_TO_ADDR
// if s1 = 1 then
20924: LD_VAR 0 2
20928: PUSH
20929: LD_INT 1
20931: EQUAL
20932: IFFALSE 20952
// s2 := rand ( 2 , 4 ) else
20934: LD_ADDR_VAR 0 3
20938: PUSH
20939: LD_INT 2
20941: PPUSH
20942: LD_INT 4
20944: PPUSH
20945: CALL_OW 12
20949: ST_TO_ADDR
20950: GO 20960
// s2 := 1 ;
20952: LD_ADDR_VAR 0 3
20956: PUSH
20957: LD_INT 1
20959: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
20960: LD_ADDR_VAR 0 5
20964: PUSH
20965: LD_VAR 0 6
20969: PUSH
20970: LD_INT 1
20972: ARRAY
20973: PPUSH
20974: LD_VAR 0 3
20978: PPUSH
20979: CALL_OW 259
20983: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
20984: LD_VAR 0 6
20988: PUSH
20989: LD_INT 1
20991: ARRAY
20992: PPUSH
20993: LD_VAR 0 2
20997: PPUSH
20998: LD_VAR 0 5
21002: PPUSH
21003: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
21007: LD_VAR 0 6
21011: PUSH
21012: LD_INT 1
21014: ARRAY
21015: PPUSH
21016: LD_VAR 0 3
21020: PPUSH
21021: LD_VAR 0 4
21025: PPUSH
21026: CALL_OW 237
// end ;
21030: PPOPN 6
21032: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
21033: LD_EXP 39
21037: PUSH
21038: LD_EXP 86
21042: AND
21043: IFFALSE 21122
21045: GO 21047
21047: DISABLE
21048: LD_INT 0
21050: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
21051: LD_ADDR_VAR 0 1
21055: PUSH
21056: LD_INT 22
21058: PUSH
21059: LD_OWVAR 2
21063: PUSH
21064: EMPTY
21065: LIST
21066: LIST
21067: PUSH
21068: LD_INT 30
21070: PUSH
21071: LD_INT 3
21073: PUSH
21074: EMPTY
21075: LIST
21076: LIST
21077: PUSH
21078: EMPTY
21079: LIST
21080: LIST
21081: PPUSH
21082: CALL_OW 69
21086: ST_TO_ADDR
// if not tmp then
21087: LD_VAR 0 1
21091: NOT
21092: IFFALSE 21096
// exit ;
21094: GO 21122
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21096: LD_VAR 0 1
21100: PUSH
21101: LD_INT 1
21103: PPUSH
21104: LD_VAR 0 1
21108: PPUSH
21109: CALL_OW 12
21113: ARRAY
21114: PPUSH
21115: LD_INT 1
21117: PPUSH
21118: CALL_OW 234
// end ;
21122: PPOPN 1
21124: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
21125: LD_EXP 39
21129: PUSH
21130: LD_EXP 87
21134: AND
21135: IFFALSE 21247
21137: GO 21139
21139: DISABLE
21140: LD_INT 0
21142: PPUSH
21143: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
21144: LD_ADDR_VAR 0 2
21148: PUSH
21149: LD_INT 22
21151: PUSH
21152: LD_OWVAR 2
21156: PUSH
21157: EMPTY
21158: LIST
21159: LIST
21160: PUSH
21161: LD_INT 2
21163: PUSH
21164: LD_INT 30
21166: PUSH
21167: LD_INT 27
21169: PUSH
21170: EMPTY
21171: LIST
21172: LIST
21173: PUSH
21174: LD_INT 30
21176: PUSH
21177: LD_INT 26
21179: PUSH
21180: EMPTY
21181: LIST
21182: LIST
21183: PUSH
21184: LD_INT 30
21186: PUSH
21187: LD_INT 28
21189: PUSH
21190: EMPTY
21191: LIST
21192: LIST
21193: PUSH
21194: EMPTY
21195: LIST
21196: LIST
21197: LIST
21198: LIST
21199: PUSH
21200: EMPTY
21201: LIST
21202: LIST
21203: PPUSH
21204: CALL_OW 69
21208: ST_TO_ADDR
// if not tmp then
21209: LD_VAR 0 2
21213: NOT
21214: IFFALSE 21218
// exit ;
21216: GO 21247
// for i in tmp do
21218: LD_ADDR_VAR 0 1
21222: PUSH
21223: LD_VAR 0 2
21227: PUSH
21228: FOR_IN
21229: IFFALSE 21245
// SetLives ( i , 1 ) ;
21231: LD_VAR 0 1
21235: PPUSH
21236: LD_INT 1
21238: PPUSH
21239: CALL_OW 234
21243: GO 21228
21245: POP
21246: POP
// end ;
21247: PPOPN 2
21249: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
21250: LD_EXP 39
21254: PUSH
21255: LD_EXP 88
21259: AND
21260: IFFALSE 21534
21262: GO 21264
21264: DISABLE
21265: LD_INT 0
21267: PPUSH
21268: PPUSH
21269: PPUSH
// begin i := rand ( 1 , 7 ) ;
21270: LD_ADDR_VAR 0 1
21274: PUSH
21275: LD_INT 1
21277: PPUSH
21278: LD_INT 7
21280: PPUSH
21281: CALL_OW 12
21285: ST_TO_ADDR
// case i of 1 :
21286: LD_VAR 0 1
21290: PUSH
21291: LD_INT 1
21293: DOUBLE
21294: EQUAL
21295: IFTRUE 21299
21297: GO 21309
21299: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
21300: LD_STRING earthquake(getX(game), 0, 32)
21302: PPUSH
21303: CALL_OW 559
21307: GO 21534
21309: LD_INT 2
21311: DOUBLE
21312: EQUAL
21313: IFTRUE 21317
21315: GO 21331
21317: POP
// begin ToLua ( displayStucuk(); ) ;
21318: LD_STRING displayStucuk();
21320: PPUSH
21321: CALL_OW 559
// ResetFog ;
21325: CALL_OW 335
// end ; 3 :
21329: GO 21534
21331: LD_INT 3
21333: DOUBLE
21334: EQUAL
21335: IFTRUE 21339
21337: GO 21443
21339: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21340: LD_ADDR_VAR 0 2
21344: PUSH
21345: LD_INT 22
21347: PUSH
21348: LD_OWVAR 2
21352: PUSH
21353: EMPTY
21354: LIST
21355: LIST
21356: PUSH
21357: LD_INT 25
21359: PUSH
21360: LD_INT 1
21362: PUSH
21363: EMPTY
21364: LIST
21365: LIST
21366: PUSH
21367: EMPTY
21368: LIST
21369: LIST
21370: PPUSH
21371: CALL_OW 69
21375: ST_TO_ADDR
// if not tmp then
21376: LD_VAR 0 2
21380: NOT
21381: IFFALSE 21385
// exit ;
21383: GO 21534
// un := tmp [ rand ( 1 , tmp ) ] ;
21385: LD_ADDR_VAR 0 3
21389: PUSH
21390: LD_VAR 0 2
21394: PUSH
21395: LD_INT 1
21397: PPUSH
21398: LD_VAR 0 2
21402: PPUSH
21403: CALL_OW 12
21407: ARRAY
21408: ST_TO_ADDR
// if Crawls ( un ) then
21409: LD_VAR 0 3
21413: PPUSH
21414: CALL_OW 318
21418: IFFALSE 21429
// ComWalk ( un ) ;
21420: LD_VAR 0 3
21424: PPUSH
21425: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21429: LD_VAR 0 3
21433: PPUSH
21434: LD_INT 8
21436: PPUSH
21437: CALL_OW 336
// end ; 4 :
21441: GO 21534
21443: LD_INT 4
21445: DOUBLE
21446: EQUAL
21447: IFTRUE 21451
21449: GO 21512
21451: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
21452: LD_ADDR_VAR 0 2
21456: PUSH
21457: LD_INT 22
21459: PUSH
21460: LD_OWVAR 2
21464: PUSH
21465: EMPTY
21466: LIST
21467: LIST
21468: PUSH
21469: LD_INT 30
21471: PUSH
21472: LD_INT 29
21474: PUSH
21475: EMPTY
21476: LIST
21477: LIST
21478: PUSH
21479: EMPTY
21480: LIST
21481: LIST
21482: PPUSH
21483: CALL_OW 69
21487: ST_TO_ADDR
// if not tmp then
21488: LD_VAR 0 2
21492: NOT
21493: IFFALSE 21497
// exit ;
21495: GO 21534
// DestroyUnit ( tmp [ 1 ] ) ;
21497: LD_VAR 0 2
21501: PUSH
21502: LD_INT 1
21504: ARRAY
21505: PPUSH
21506: CALL_OW 65
// end ; 5 .. 7 :
21510: GO 21534
21512: LD_INT 5
21514: DOUBLE
21515: GREATEREQUAL
21516: IFFALSE 21524
21518: LD_INT 7
21520: DOUBLE
21521: LESSEQUAL
21522: IFTRUE 21526
21524: GO 21533
21526: POP
// StreamSibBomb ; end ;
21527: CALL 17784 0 0
21531: GO 21534
21533: POP
// end ;
21534: PPOPN 3
21536: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
21537: LD_EXP 39
21541: PUSH
21542: LD_EXP 89
21546: AND
21547: IFFALSE 21703
21549: GO 21551
21551: DISABLE
21552: LD_INT 0
21554: PPUSH
21555: PPUSH
21556: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
21557: LD_ADDR_VAR 0 2
21561: PUSH
21562: LD_INT 81
21564: PUSH
21565: LD_OWVAR 2
21569: PUSH
21570: EMPTY
21571: LIST
21572: LIST
21573: PUSH
21574: LD_INT 2
21576: PUSH
21577: LD_INT 21
21579: PUSH
21580: LD_INT 1
21582: PUSH
21583: EMPTY
21584: LIST
21585: LIST
21586: PUSH
21587: LD_INT 21
21589: PUSH
21590: LD_INT 2
21592: PUSH
21593: EMPTY
21594: LIST
21595: LIST
21596: PUSH
21597: EMPTY
21598: LIST
21599: LIST
21600: LIST
21601: PUSH
21602: EMPTY
21603: LIST
21604: LIST
21605: PPUSH
21606: CALL_OW 69
21610: ST_TO_ADDR
// if not tmp then
21611: LD_VAR 0 2
21615: NOT
21616: IFFALSE 21620
// exit ;
21618: GO 21703
// p := 0 ;
21620: LD_ADDR_VAR 0 3
21624: PUSH
21625: LD_INT 0
21627: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
21628: LD_INT 35
21630: PPUSH
21631: CALL_OW 67
// p := p + 1 ;
21635: LD_ADDR_VAR 0 3
21639: PUSH
21640: LD_VAR 0 3
21644: PUSH
21645: LD_INT 1
21647: PLUS
21648: ST_TO_ADDR
// for i in tmp do
21649: LD_ADDR_VAR 0 1
21653: PUSH
21654: LD_VAR 0 2
21658: PUSH
21659: FOR_IN
21660: IFFALSE 21691
// if GetLives ( i ) < 1000 then
21662: LD_VAR 0 1
21666: PPUSH
21667: CALL_OW 256
21671: PUSH
21672: LD_INT 1000
21674: LESS
21675: IFFALSE 21689
// SetLives ( i , 1000 ) ;
21677: LD_VAR 0 1
21681: PPUSH
21682: LD_INT 1000
21684: PPUSH
21685: CALL_OW 234
21689: GO 21659
21691: POP
21692: POP
// until p > 20 ;
21693: LD_VAR 0 3
21697: PUSH
21698: LD_INT 20
21700: GREATER
21701: IFFALSE 21628
// end ;
21703: PPOPN 3
21705: END
// every 0 0$1 trigger StreamModeActive and sTime do
21706: LD_EXP 39
21710: PUSH
21711: LD_EXP 90
21715: AND
21716: IFFALSE 21751
21718: GO 21720
21720: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
21721: LD_INT 28
21723: PPUSH
21724: LD_OWVAR 2
21728: PPUSH
21729: LD_INT 2
21731: PPUSH
21732: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
21736: LD_INT 30
21738: PPUSH
21739: LD_OWVAR 2
21743: PPUSH
21744: LD_INT 2
21746: PPUSH
21747: CALL_OW 322
// end ;
21751: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
21752: LD_EXP 39
21756: PUSH
21757: LD_EXP 91
21761: AND
21762: IFFALSE 21883
21764: GO 21766
21766: DISABLE
21767: LD_INT 0
21769: PPUSH
21770: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21771: LD_ADDR_VAR 0 2
21775: PUSH
21776: LD_INT 22
21778: PUSH
21779: LD_OWVAR 2
21783: PUSH
21784: EMPTY
21785: LIST
21786: LIST
21787: PUSH
21788: LD_INT 21
21790: PUSH
21791: LD_INT 1
21793: PUSH
21794: EMPTY
21795: LIST
21796: LIST
21797: PUSH
21798: LD_INT 3
21800: PUSH
21801: LD_INT 23
21803: PUSH
21804: LD_INT 0
21806: PUSH
21807: EMPTY
21808: LIST
21809: LIST
21810: PUSH
21811: EMPTY
21812: LIST
21813: LIST
21814: PUSH
21815: EMPTY
21816: LIST
21817: LIST
21818: LIST
21819: PPUSH
21820: CALL_OW 69
21824: ST_TO_ADDR
// if not tmp then
21825: LD_VAR 0 2
21829: NOT
21830: IFFALSE 21834
// exit ;
21832: GO 21883
// for i in tmp do
21834: LD_ADDR_VAR 0 1
21838: PUSH
21839: LD_VAR 0 2
21843: PUSH
21844: FOR_IN
21845: IFFALSE 21881
// begin if Crawls ( i ) then
21847: LD_VAR 0 1
21851: PPUSH
21852: CALL_OW 318
21856: IFFALSE 21867
// ComWalk ( i ) ;
21858: LD_VAR 0 1
21862: PPUSH
21863: CALL_OW 138
// SetClass ( i , 2 ) ;
21867: LD_VAR 0 1
21871: PPUSH
21872: LD_INT 2
21874: PPUSH
21875: CALL_OW 336
// end ;
21879: GO 21844
21881: POP
21882: POP
// end ;
21883: PPOPN 2
21885: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
21886: LD_EXP 39
21890: PUSH
21891: LD_EXP 92
21895: AND
21896: IFFALSE 22177
21898: GO 21900
21900: DISABLE
21901: LD_INT 0
21903: PPUSH
21904: PPUSH
21905: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
21906: LD_OWVAR 2
21910: PPUSH
21911: LD_INT 9
21913: PPUSH
21914: LD_INT 1
21916: PPUSH
21917: LD_INT 1
21919: PPUSH
21920: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
21924: LD_INT 9
21926: PPUSH
21927: LD_OWVAR 2
21931: PPUSH
21932: CALL_OW 343
// uc_side := 9 ;
21936: LD_ADDR_OWVAR 20
21940: PUSH
21941: LD_INT 9
21943: ST_TO_ADDR
// uc_nation := 2 ;
21944: LD_ADDR_OWVAR 21
21948: PUSH
21949: LD_INT 2
21951: ST_TO_ADDR
// hc_name := Dark Warrior ;
21952: LD_ADDR_OWVAR 26
21956: PUSH
21957: LD_STRING Dark Warrior
21959: ST_TO_ADDR
// hc_gallery :=  ;
21960: LD_ADDR_OWVAR 33
21964: PUSH
21965: LD_STRING 
21967: ST_TO_ADDR
// hc_noskilllimit := true ;
21968: LD_ADDR_OWVAR 76
21972: PUSH
21973: LD_INT 1
21975: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
21976: LD_ADDR_OWVAR 31
21980: PUSH
21981: LD_INT 30
21983: PUSH
21984: LD_INT 30
21986: PUSH
21987: LD_INT 30
21989: PUSH
21990: LD_INT 30
21992: PUSH
21993: EMPTY
21994: LIST
21995: LIST
21996: LIST
21997: LIST
21998: ST_TO_ADDR
// un := CreateHuman ;
21999: LD_ADDR_VAR 0 3
22003: PUSH
22004: CALL_OW 44
22008: ST_TO_ADDR
// hc_noskilllimit := false ;
22009: LD_ADDR_OWVAR 76
22013: PUSH
22014: LD_INT 0
22016: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
22017: LD_VAR 0 3
22021: PPUSH
22022: LD_INT 1
22024: PPUSH
22025: CALL_OW 51
// p := 0 ;
22029: LD_ADDR_VAR 0 2
22033: PUSH
22034: LD_INT 0
22036: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22037: LD_INT 35
22039: PPUSH
22040: CALL_OW 67
// p := p + 1 ;
22044: LD_ADDR_VAR 0 2
22048: PUSH
22049: LD_VAR 0 2
22053: PUSH
22054: LD_INT 1
22056: PLUS
22057: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
22058: LD_VAR 0 3
22062: PPUSH
22063: CALL_OW 256
22067: PUSH
22068: LD_INT 1000
22070: LESS
22071: IFFALSE 22085
// SetLives ( un , 1000 ) ;
22073: LD_VAR 0 3
22077: PPUSH
22078: LD_INT 1000
22080: PPUSH
22081: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
22085: LD_VAR 0 3
22089: PPUSH
22090: LD_INT 81
22092: PUSH
22093: LD_OWVAR 2
22097: PUSH
22098: EMPTY
22099: LIST
22100: LIST
22101: PUSH
22102: LD_INT 91
22104: PUSH
22105: LD_VAR 0 3
22109: PUSH
22110: LD_INT 30
22112: PUSH
22113: EMPTY
22114: LIST
22115: LIST
22116: LIST
22117: PUSH
22118: EMPTY
22119: LIST
22120: LIST
22121: PPUSH
22122: CALL_OW 69
22126: PPUSH
22127: LD_VAR 0 3
22131: PPUSH
22132: CALL_OW 74
22136: PPUSH
22137: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
22141: LD_VAR 0 2
22145: PUSH
22146: LD_INT 60
22148: GREATER
22149: PUSH
22150: LD_VAR 0 3
22154: PPUSH
22155: CALL_OW 301
22159: OR
22160: IFFALSE 22037
// if un then
22162: LD_VAR 0 3
22166: IFFALSE 22177
// RemoveUnit ( un ) ;
22168: LD_VAR 0 3
22172: PPUSH
22173: CALL_OW 64
// end ; end_of_file
22177: PPOPN 3
22179: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
22180: LD_INT 0
22182: PPUSH
22183: PPUSH
22184: PPUSH
22185: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
22186: LD_VAR 0 1
22190: PPUSH
22191: CALL_OW 264
22195: PUSH
22196: LD_EXP 30
22200: EQUAL
22201: IFFALSE 22273
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
22203: LD_INT 68
22205: PPUSH
22206: LD_VAR 0 1
22210: PPUSH
22211: CALL_OW 255
22215: PPUSH
22216: CALL_OW 321
22220: PUSH
22221: LD_INT 2
22223: EQUAL
22224: IFFALSE 22236
// eff := 70 else
22226: LD_ADDR_VAR 0 4
22230: PUSH
22231: LD_INT 70
22233: ST_TO_ADDR
22234: GO 22244
// eff := 30 ;
22236: LD_ADDR_VAR 0 4
22240: PUSH
22241: LD_INT 30
22243: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
22244: LD_VAR 0 1
22248: PPUSH
22249: CALL_OW 250
22253: PPUSH
22254: LD_VAR 0 1
22258: PPUSH
22259: CALL_OW 251
22263: PPUSH
22264: LD_VAR 0 4
22268: PPUSH
22269: CALL_OW 495
// end ; end ;
22273: LD_VAR 0 2
22277: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
22278: LD_INT 0
22280: PPUSH
// end ;
22281: LD_VAR 0 4
22285: RET
// export function SOS_Command ( cmd ) ; begin
22286: LD_INT 0
22288: PPUSH
// end ;
22289: LD_VAR 0 2
22293: RET
// on TargetableSAIL ( cmd , unit , selectedunit , x , y ) do begin if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
22294: LD_VAR 0 1
22298: PUSH
22299: LD_INT 255
22301: EQUAL
22302: PUSH
22303: LD_VAR 0 2
22307: PPUSH
22308: CALL_OW 264
22312: PUSH
22313: LD_INT 14
22315: PUSH
22316: LD_INT 53
22318: PUSH
22319: EMPTY
22320: LIST
22321: LIST
22322: IN
22323: AND
22324: PUSH
22325: LD_VAR 0 4
22329: PPUSH
22330: LD_VAR 0 5
22334: PPUSH
22335: CALL_OW 488
22339: AND
22340: IFFALSE 22364
// CutTreeXYR ( unit , x , y , 12 ) ;
22342: LD_VAR 0 2
22346: PPUSH
22347: LD_VAR 0 4
22351: PPUSH
22352: LD_VAR 0 5
22356: PPUSH
22357: LD_INT 12
22359: PPUSH
22360: CALL 22367 0 4
// end ;
22364: PPOPN 5
22366: END
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
22367: LD_INT 0
22369: PPUSH
22370: PPUSH
22371: PPUSH
22372: PPUSH
22373: PPUSH
22374: PPUSH
22375: PPUSH
22376: PPUSH
22377: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
22378: LD_VAR 0 1
22382: NOT
22383: PUSH
22384: LD_VAR 0 2
22388: PPUSH
22389: LD_VAR 0 3
22393: PPUSH
22394: CALL_OW 488
22398: NOT
22399: OR
22400: PUSH
22401: LD_VAR 0 4
22405: NOT
22406: OR
22407: IFFALSE 22411
// exit ;
22409: GO 22751
// list := [ ] ;
22411: LD_ADDR_VAR 0 13
22415: PUSH
22416: EMPTY
22417: ST_TO_ADDR
// if x - r < 0 then
22418: LD_VAR 0 2
22422: PUSH
22423: LD_VAR 0 4
22427: MINUS
22428: PUSH
22429: LD_INT 0
22431: LESS
22432: IFFALSE 22444
// min_x := 0 else
22434: LD_ADDR_VAR 0 7
22438: PUSH
22439: LD_INT 0
22441: ST_TO_ADDR
22442: GO 22460
// min_x := x - r ;
22444: LD_ADDR_VAR 0 7
22448: PUSH
22449: LD_VAR 0 2
22453: PUSH
22454: LD_VAR 0 4
22458: MINUS
22459: ST_TO_ADDR
// if y - r < 0 then
22460: LD_VAR 0 3
22464: PUSH
22465: LD_VAR 0 4
22469: MINUS
22470: PUSH
22471: LD_INT 0
22473: LESS
22474: IFFALSE 22486
// min_y := 0 else
22476: LD_ADDR_VAR 0 8
22480: PUSH
22481: LD_INT 0
22483: ST_TO_ADDR
22484: GO 22502
// min_y := y - r ;
22486: LD_ADDR_VAR 0 8
22490: PUSH
22491: LD_VAR 0 3
22495: PUSH
22496: LD_VAR 0 4
22500: MINUS
22501: ST_TO_ADDR
// max_x := x + r ;
22502: LD_ADDR_VAR 0 9
22506: PUSH
22507: LD_VAR 0 2
22511: PUSH
22512: LD_VAR 0 4
22516: PLUS
22517: ST_TO_ADDR
// max_y := y + r ;
22518: LD_ADDR_VAR 0 10
22522: PUSH
22523: LD_VAR 0 3
22527: PUSH
22528: LD_VAR 0 4
22532: PLUS
22533: ST_TO_ADDR
// for _x = min_x to max_x do
22534: LD_ADDR_VAR 0 11
22538: PUSH
22539: DOUBLE
22540: LD_VAR 0 7
22544: DEC
22545: ST_TO_ADDR
22546: LD_VAR 0 9
22550: PUSH
22551: FOR_TO
22552: IFFALSE 22669
// for _y = min_y to max_y do
22554: LD_ADDR_VAR 0 12
22558: PUSH
22559: DOUBLE
22560: LD_VAR 0 8
22564: DEC
22565: ST_TO_ADDR
22566: LD_VAR 0 10
22570: PUSH
22571: FOR_TO
22572: IFFALSE 22665
// begin if not ValidHex ( _x , _y ) then
22574: LD_VAR 0 11
22578: PPUSH
22579: LD_VAR 0 12
22583: PPUSH
22584: CALL_OW 488
22588: NOT
22589: IFFALSE 22593
// continue ;
22591: GO 22571
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
22593: LD_VAR 0 11
22597: PPUSH
22598: LD_VAR 0 12
22602: PPUSH
22603: CALL_OW 351
22607: PUSH
22608: LD_VAR 0 11
22612: PPUSH
22613: LD_VAR 0 12
22617: PPUSH
22618: CALL_OW 554
22622: AND
22623: IFFALSE 22663
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
22625: LD_ADDR_VAR 0 13
22629: PUSH
22630: LD_VAR 0 13
22634: PPUSH
22635: LD_VAR 0 13
22639: PUSH
22640: LD_INT 1
22642: PLUS
22643: PPUSH
22644: LD_VAR 0 11
22648: PUSH
22649: LD_VAR 0 12
22653: PUSH
22654: EMPTY
22655: LIST
22656: LIST
22657: PPUSH
22658: CALL_OW 2
22662: ST_TO_ADDR
// end ;
22663: GO 22571
22665: POP
22666: POP
22667: GO 22551
22669: POP
22670: POP
// if not list then
22671: LD_VAR 0 13
22675: NOT
22676: IFFALSE 22680
// exit ;
22678: GO 22751
// for i in list do
22680: LD_ADDR_VAR 0 6
22684: PUSH
22685: LD_VAR 0 13
22689: PUSH
22690: FOR_IN
22691: IFFALSE 22749
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
22693: LD_VAR 0 1
22697: PPUSH
22698: LD_STRING M
22700: PUSH
22701: LD_VAR 0 6
22705: PUSH
22706: LD_INT 1
22708: ARRAY
22709: PUSH
22710: LD_VAR 0 6
22714: PUSH
22715: LD_INT 2
22717: ARRAY
22718: PUSH
22719: LD_INT 0
22721: PUSH
22722: LD_INT 0
22724: PUSH
22725: LD_INT 0
22727: PUSH
22728: LD_INT 0
22730: PUSH
22731: EMPTY
22732: LIST
22733: LIST
22734: LIST
22735: LIST
22736: LIST
22737: LIST
22738: LIST
22739: PUSH
22740: EMPTY
22741: LIST
22742: PPUSH
22743: CALL_OW 447
22747: GO 22690
22749: POP
22750: POP
// end ;
22751: LD_VAR 0 5
22755: RET
