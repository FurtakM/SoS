// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// Init ;
  11: CALL 66 0 0
// PrepareAnimals ( 6 , 3 , 4 , apearea ) ;
  15: LD_INT 6
  17: PPUSH
  18: LD_INT 3
  20: PPUSH
  21: LD_INT 4
  23: PPUSH
  24: LD_INT 21
  26: PPUSH
  27: CALL 10715 0 4
// PrepareAmerican ;
  31: CALL 4044 0 0
// PrepareRussian ;
  35: CALL 314 0 0
// Action ;
  39: CALL 8429 0 0
// end ;
  43: END
// every 0 0$01 do
  44: GO 46
  46: DISABLE
// begin enable ;
  47: ENABLE
// display_strings := [ #tick , tick ] ;
  48: LD_ADDR_OWVAR 47
  52: PUSH
  53: LD_STRING #tick
  55: PUSH
  56: LD_OWVAR 1
  60: PUSH
  61: EMPTY
  62: LIST
  63: LIST
  64: ST_TO_ADDR
// end ;
  65: END
// export conv_squad , escort , medal1 , medal2 , medal3 , path , convoy_start , dest_counter ; export riv , ar_attacks , ar_force , us_force , conv_counter , crates_counter , safeCounter ; function Init ; begin
  66: LD_INT 0
  68: PPUSH
// Difficulty := GetMultiplayerSetting ( 0 ) ;
  69: LD_ADDR_OWVAR 67
  73: PUSH
  74: LD_INT 0
  76: PPUSH
  77: CALL_OW 426
  81: ST_TO_ADDR
// medal1 := true ;
  82: LD_ADDR_EXP 3
  86: PUSH
  87: LD_INT 1
  89: ST_TO_ADDR
// medal2 := true ;
  90: LD_ADDR_EXP 4
  94: PUSH
  95: LD_INT 1
  97: ST_TO_ADDR
// medal3 := true ;
  98: LD_ADDR_EXP 5
 102: PUSH
 103: LD_INT 1
 105: ST_TO_ADDR
// path := [ pp1 , pp2 , pp3 , pp4 , conv_end ] ;
 106: LD_ADDR_EXP 6
 110: PUSH
 111: LD_INT 10
 113: PUSH
 114: LD_INT 11
 116: PUSH
 117: LD_INT 12
 119: PUSH
 120: LD_INT 13
 122: PUSH
 123: LD_INT 9
 125: PUSH
 126: EMPTY
 127: LIST
 128: LIST
 129: LIST
 130: LIST
 131: LIST
 132: ST_TO_ADDR
// conv_squad := [ ] ;
 133: LD_ADDR_EXP 1
 137: PUSH
 138: EMPTY
 139: ST_TO_ADDR
// escort := [ ] ;
 140: LD_ADDR_EXP 2
 144: PUSH
 145: EMPTY
 146: ST_TO_ADDR
// riv := [ ] ;
 147: LD_ADDR_EXP 9
 151: PUSH
 152: EMPTY
 153: ST_TO_ADDR
// ar_force := [ ] ;
 154: LD_ADDR_EXP 11
 158: PUSH
 159: EMPTY
 160: ST_TO_ADDR
// ar_attacks := false ;
 161: LD_ADDR_EXP 10
 165: PUSH
 166: LD_INT 0
 168: ST_TO_ADDR
// us_force := [ ] ;
 169: LD_ADDR_EXP 12
 173: PUSH
 174: EMPTY
 175: ST_TO_ADDR
// convoy_start := false ;
 176: LD_ADDR_EXP 7
 180: PUSH
 181: LD_INT 0
 183: ST_TO_ADDR
// conv_counter := 0 ;
 184: LD_ADDR_EXP 13
 188: PUSH
 189: LD_INT 0
 191: ST_TO_ADDR
// dest_counter := 0 ;
 192: LD_ADDR_EXP 8
 196: PUSH
 197: LD_INT 0
 199: ST_TO_ADDR
// crates_counter := 1 1$10 ;
 200: LD_ADDR_EXP 14
 204: PUSH
 205: LD_INT 2450
 207: ST_TO_ADDR
// safeCounter := 0 ;
 208: LD_ADDR_EXP 15
 212: PUSH
 213: LD_INT 0
 215: ST_TO_ADDR
// end ;
 216: LD_VAR 0 1
 220: RET
// every 2 2$00 do
 221: GO 223
 223: DISABLE
// begin while ( tick <= [ 47 47$00 , 44 44$00 , 41 41$00 ] [ Difficulty ] ) do
 224: LD_OWVAR 1
 228: PUSH
 229: LD_INT 98700
 231: PUSH
 232: LD_INT 92400
 234: PUSH
 235: LD_INT 86100
 237: PUSH
 238: EMPTY
 239: LIST
 240: LIST
 241: LIST
 242: PUSH
 243: LD_OWVAR 67
 247: ARRAY
 248: LESSEQUAL
 249: IFFALSE 313
// begin Wait ( crates_counter ) ;
 251: LD_EXP 14
 255: PPUSH
 256: CALL_OW 67
// crates_counter := crates_counter + 0 0$09 ;
 260: LD_ADDR_EXP 14
 264: PUSH
 265: LD_EXP 14
 269: PUSH
 270: LD_INT 315
 272: PLUS
 273: ST_TO_ADDR
// if GetResourceArea ( crates_spawn , mat_cans ) < 30 then
 274: LD_INT 22
 276: PPUSH
 277: LD_INT 1
 279: PPUSH
 280: CALL_OW 287
 284: PUSH
 285: LD_INT 30
 287: LESS
 288: IFFALSE 311
// CreateCratesArea ( Rand ( 1 , 5 ) , crates_spawn , true ) ;
 290: LD_INT 1
 292: PPUSH
 293: LD_INT 5
 295: PPUSH
 296: CALL_OW 12
 300: PPUSH
 301: LD_INT 22
 303: PPUSH
 304: LD_INT 1
 306: PPUSH
 307: CALL_OW 55
// end ;
 311: GO 224
// end ; end_of_file
 313: END
// export Stolypin , Popov , Saseda ; export function PrepareRussian ; var un , force , i , c , skill , team ; begin
 314: LD_INT 0
 316: PPUSH
 317: PPUSH
 318: PPUSH
 319: PPUSH
 320: PPUSH
 321: PPUSH
 322: PPUSH
// uc_side := 6 ;
 323: LD_ADDR_OWVAR 20
 327: PUSH
 328: LD_INT 6
 330: ST_TO_ADDR
// uc_nation := 3 ;
 331: LD_ADDR_OWVAR 21
 335: PUSH
 336: LD_INT 3
 338: ST_TO_ADDR
// ChangeSideFog ( 3 , 6 ) ;
 339: LD_INT 3
 341: PPUSH
 342: LD_INT 6
 344: PPUSH
 345: CALL_OW 343
// Popov := NewCharacter ( Gaydar ) ;
 349: LD_ADDR_EXP 17
 353: PUSH
 354: LD_STRING Gaydar
 356: PPUSH
 357: CALL_OW 25
 361: ST_TO_ADDR
// uc_side := 7 ;
 362: LD_ADDR_OWVAR 20
 366: PUSH
 367: LD_INT 7
 369: ST_TO_ADDR
// hc_gallery := sandal ;
 370: LD_ADDR_OWVAR 33
 374: PUSH
 375: LD_STRING sandal
 377: ST_TO_ADDR
// hc_face_number := 9 ;
 378: LD_ADDR_OWVAR 34
 382: PUSH
 383: LD_INT 9
 385: ST_TO_ADDR
// hc_skills := [ 3 , 5 , 2 , 7 ] ;
 386: LD_ADDR_OWVAR 31
 390: PUSH
 391: LD_INT 3
 393: PUSH
 394: LD_INT 5
 396: PUSH
 397: LD_INT 2
 399: PUSH
 400: LD_INT 7
 402: PUSH
 403: EMPTY
 404: LIST
 405: LIST
 406: LIST
 407: LIST
 408: ST_TO_ADDR
// hc_sex := sex_male ;
 409: LD_ADDR_OWVAR 27
 413: PUSH
 414: LD_INT 1
 416: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
 417: LD_ADDR_OWVAR 29
 421: PUSH
 422: LD_INT 10
 424: PUSH
 425: LD_INT 11
 427: PUSH
 428: EMPTY
 429: LIST
 430: LIST
 431: ST_TO_ADDR
// hc_class := 4 ;
 432: LD_ADDR_OWVAR 28
 436: PUSH
 437: LD_INT 4
 439: ST_TO_ADDR
// hc_name := Fiodor Saseda ;
 440: LD_ADDR_OWVAR 26
 444: PUSH
 445: LD_STRING Fiodor Saseda
 447: ST_TO_ADDR
// Saseda := CreateHuman ;
 448: LD_ADDR_EXP 18
 452: PUSH
 453: CALL_OW 44
 457: ST_TO_ADDR
// uc_side := 3 ;
 458: LD_ADDR_OWVAR 20
 462: PUSH
 463: LD_INT 3
 465: ST_TO_ADDR
// hc_importance := 100 ;
 466: LD_ADDR_OWVAR 32
 470: PUSH
 471: LD_INT 100
 473: ST_TO_ADDR
// hc_class := 1 ;
 474: LD_ADDR_OWVAR 28
 478: PUSH
 479: LD_INT 1
 481: ST_TO_ADDR
// hc_sex := sex_male ;
 482: LD_ADDR_OWVAR 27
 486: PUSH
 487: LD_INT 1
 489: ST_TO_ADDR
// hc_skills := [ 6 , 3 , 4 , 2 ] ;
 490: LD_ADDR_OWVAR 31
 494: PUSH
 495: LD_INT 6
 497: PUSH
 498: LD_INT 3
 500: PUSH
 501: LD_INT 4
 503: PUSH
 504: LD_INT 2
 506: PUSH
 507: EMPTY
 508: LIST
 509: LIST
 510: LIST
 511: LIST
 512: ST_TO_ADDR
// hc_name := W. I. Stolypin ;
 513: LD_ADDR_OWVAR 26
 517: PUSH
 518: LD_STRING W. I. Stolypin
 520: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
 521: LD_ADDR_OWVAR 29
 525: PUSH
 526: LD_INT 10
 528: PUSH
 529: LD_INT 11
 531: PUSH
 532: EMPTY
 533: LIST
 534: LIST
 535: ST_TO_ADDR
// hc_gallery := ru ;
 536: LD_ADDR_OWVAR 33
 540: PUSH
 541: LD_STRING ru
 543: ST_TO_ADDR
// hc_face_number := 15 ;
 544: LD_ADDR_OWVAR 34
 548: PUSH
 549: LD_INT 15
 551: ST_TO_ADDR
// Stolypin := CreateHuman ;
 552: LD_ADDR_EXP 16
 556: PUSH
 557: CALL_OW 44
 561: ST_TO_ADDR
// hc_importance := 0 ;
 562: LD_ADDR_OWVAR 32
 566: PUSH
 567: LD_INT 0
 569: ST_TO_ADDR
// hc_gallery :=  ;
 570: LD_ADDR_OWVAR 33
 574: PUSH
 575: LD_STRING 
 577: ST_TO_ADDR
// hc_name :=  ;
 578: LD_ADDR_OWVAR 26
 582: PUSH
 583: LD_STRING 
 585: ST_TO_ADDR
// skill := [ 6 , 5 , 5 ] [ Difficulty ] ;
 586: LD_ADDR_VAR 0 6
 590: PUSH
 591: LD_INT 6
 593: PUSH
 594: LD_INT 5
 596: PUSH
 597: LD_INT 5
 599: PUSH
 600: EMPTY
 601: LIST
 602: LIST
 603: LIST
 604: PUSH
 605: LD_OWVAR 67
 609: ARRAY
 610: ST_TO_ADDR
// c := 1 ;
 611: LD_ADDR_VAR 0 5
 615: PUSH
 616: LD_INT 1
 618: ST_TO_ADDR
// for i = 1 to 21 do
 619: LD_ADDR_VAR 0 4
 623: PUSH
 624: DOUBLE
 625: LD_INT 1
 627: DEC
 628: ST_TO_ADDR
 629: LD_INT 21
 631: PUSH
 632: FOR_TO
 633: IFFALSE 734
// begin if i = 10 then
 635: LD_VAR 0 4
 639: PUSH
 640: LD_INT 10
 642: EQUAL
 643: IFFALSE 653
// c := 2 ;
 645: LD_ADDR_VAR 0 5
 649: PUSH
 650: LD_INT 2
 652: ST_TO_ADDR
// if i = 14 then
 653: LD_VAR 0 4
 657: PUSH
 658: LD_INT 14
 660: EQUAL
 661: IFFALSE 671
// c := 3 ;
 663: LD_ADDR_VAR 0 5
 667: PUSH
 668: LD_INT 3
 670: ST_TO_ADDR
// if i = 18 then
 671: LD_VAR 0 4
 675: PUSH
 676: LD_INT 18
 678: EQUAL
 679: IFFALSE 689
// c := 4 ;
 681: LD_ADDR_VAR 0 5
 685: PUSH
 686: LD_INT 4
 688: ST_TO_ADDR
// PrepareHuman ( false , c , skill ) ;
 689: LD_INT 0
 691: PPUSH
 692: LD_VAR 0 5
 696: PPUSH
 697: LD_VAR 0 6
 701: PPUSH
 702: CALL_OW 380
// un := CreateHuman ;
 706: LD_ADDR_VAR 0 2
 710: PUSH
 711: CALL_OW 44
 715: ST_TO_ADDR
// force := force ^ un ;
 716: LD_ADDR_VAR 0 3
 720: PUSH
 721: LD_VAR 0 3
 725: PUSH
 726: LD_VAR 0 2
 730: ADD
 731: ST_TO_ADDR
// end ;
 732: GO 632
 734: POP
 735: POP
// team := CharacterSelection ( text , [ 7 , 6 , 6 ] [ Difficulty ] , [ 7 , 6 , 6 ] [ Difficulty ] , [ sel_change_class , Stolypin , sel_changeable , sel_not_hired ] ^ force , [ [ class_soldier , 3 ] , class_mechanic , [ class_engineer , 1 ] , class_scientistic ] ) ;
 736: LD_ADDR_VAR 0 7
 740: PUSH
 741: LD_STRING text
 743: PPUSH
 744: LD_INT 7
 746: PUSH
 747: LD_INT 6
 749: PUSH
 750: LD_INT 6
 752: PUSH
 753: EMPTY
 754: LIST
 755: LIST
 756: LIST
 757: PUSH
 758: LD_OWVAR 67
 762: ARRAY
 763: PPUSH
 764: LD_INT 7
 766: PUSH
 767: LD_INT 6
 769: PUSH
 770: LD_INT 6
 772: PUSH
 773: EMPTY
 774: LIST
 775: LIST
 776: LIST
 777: PUSH
 778: LD_OWVAR 67
 782: ARRAY
 783: PPUSH
 784: LD_INT -5
 786: PUSH
 787: LD_EXP 16
 791: PUSH
 792: LD_INT -3
 794: PUSH
 795: LD_INT -2
 797: PUSH
 798: EMPTY
 799: LIST
 800: LIST
 801: LIST
 802: LIST
 803: PUSH
 804: LD_VAR 0 3
 808: ADD
 809: PPUSH
 810: LD_INT 1
 812: PUSH
 813: LD_INT 3
 815: PUSH
 816: EMPTY
 817: LIST
 818: LIST
 819: PUSH
 820: LD_INT 3
 822: PUSH
 823: LD_INT 2
 825: PUSH
 826: LD_INT 1
 828: PUSH
 829: EMPTY
 830: LIST
 831: LIST
 832: PUSH
 833: LD_INT 4
 835: PUSH
 836: EMPTY
 837: LIST
 838: LIST
 839: LIST
 840: LIST
 841: PPUSH
 842: CALL_OW 42
 846: ST_TO_ADDR
// team := team ^ Stolypin ;
 847: LD_ADDR_VAR 0 7
 851: PUSH
 852: LD_VAR 0 7
 856: PUSH
 857: LD_EXP 16
 861: ADD
 862: ST_TO_ADDR
// for i = 1 to team do
 863: LD_ADDR_VAR 0 4
 867: PUSH
 868: DOUBLE
 869: LD_INT 1
 871: DEC
 872: ST_TO_ADDR
 873: LD_VAR 0 7
 877: PUSH
 878: FOR_TO
 879: IFFALSE 904
// PlaceUnitArea ( team [ i ] , rus_start , false ) ;
 881: LD_VAR 0 7
 885: PUSH
 886: LD_VAR 0 4
 890: ARRAY
 891: PPUSH
 892: LD_INT 1
 894: PPUSH
 895: LD_INT 0
 897: PPUSH
 898: CALL_OW 49
 902: GO 878
 904: POP
 905: POP
// CenterNowOnUnits ( Stolypin ) ;
 906: LD_EXP 16
 910: PPUSH
 911: CALL_OW 87
// end ;
 915: LD_VAR 0 1
 919: RET
// export conv_ready ; export function Convoy ( type ) ; var i , veh , skill ; begin
 920: LD_INT 0
 922: PPUSH
 923: PPUSH
 924: PPUSH
 925: PPUSH
// Randomize ;
 926: CALL_OW 10
// uc_side := 6 ;
 930: LD_ADDR_OWVAR 20
 934: PUSH
 935: LD_INT 6
 937: ST_TO_ADDR
// uc_nation := 3 ;
 938: LD_ADDR_OWVAR 21
 942: PUSH
 943: LD_INT 3
 945: ST_TO_ADDR
// hc_name :=  ;
 946: LD_ADDR_OWVAR 26
 950: PUSH
 951: LD_STRING 
 953: ST_TO_ADDR
// hc_gallery :=  ;
 954: LD_ADDR_OWVAR 33
 958: PUSH
 959: LD_STRING 
 961: ST_TO_ADDR
// skill := [ 5 , 5 , 4 ] [ Difficulty ] ;
 962: LD_ADDR_VAR 0 5
 966: PUSH
 967: LD_INT 5
 969: PUSH
 970: LD_INT 5
 972: PUSH
 973: LD_INT 4
 975: PUSH
 976: EMPTY
 977: LIST
 978: LIST
 979: LIST
 980: PUSH
 981: LD_OWVAR 67
 985: ARRAY
 986: ST_TO_ADDR
// conv_ready := false ;
 987: LD_ADDR_EXP 19
 991: PUSH
 992: LD_INT 0
 994: ST_TO_ADDR
// case type of 1 :
 995: LD_VAR 0 1
 999: PUSH
1000: LD_INT 1
1002: DOUBLE
1003: EQUAL
1004: IFTRUE 1008
1006: GO 1278
1008: POP
// begin if Rand ( 0 , 1 ) = 1 then
1009: LD_INT 0
1011: PPUSH
1012: LD_INT 1
1014: PPUSH
1015: CALL_OW 12
1019: PUSH
1020: LD_INT 1
1022: EQUAL
1023: IFFALSE 1029
// AddEscort ( ) ;
1025: CALL 2911 0 0
// Wait ( 0 0$03 ) ;
1029: LD_INT 105
1031: PPUSH
1032: CALL_OW 67
// vc_chassis := ru_medium_wheeled ;
1036: LD_ADDR_OWVAR 37
1040: PUSH
1041: LD_INT 21
1043: ST_TO_ADDR
// vc_engine := engine_combustion ;
1044: LD_ADDR_OWVAR 39
1048: PUSH
1049: LD_INT 1
1051: ST_TO_ADDR
// vc_control := control_manual ;
1052: LD_ADDR_OWVAR 38
1056: PUSH
1057: LD_INT 1
1059: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
1060: LD_ADDR_OWVAR 40
1064: PUSH
1065: LD_INT 51
1067: ST_TO_ADDR
// vc_fuel_battery := Rand ( 50 , 99 ) ;
1068: LD_ADDR_OWVAR 41
1072: PUSH
1073: LD_INT 50
1075: PPUSH
1076: LD_INT 99
1078: PPUSH
1079: CALL_OW 12
1083: ST_TO_ADDR
// if uc_side <> 6 then
1084: LD_OWVAR 20
1088: PUSH
1089: LD_INT 6
1091: NONEQUAL
1092: IFFALSE 1102
// uc_side := 6 ;
1094: LD_ADDR_OWVAR 20
1098: PUSH
1099: LD_INT 6
1101: ST_TO_ADDR
// veh := CreateVehicle ;
1102: LD_ADDR_VAR 0 4
1106: PUSH
1107: CALL_OW 45
1111: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1112: LD_VAR 0 4
1116: PPUSH
1117: LD_INT 3
1119: PPUSH
1120: CALL_OW 233
// PlaceUnitArea ( veh , conv_start , false ) ;
1124: LD_VAR 0 4
1128: PPUSH
1129: LD_INT 8
1131: PPUSH
1132: LD_INT 0
1134: PPUSH
1135: CALL_OW 49
// PrepareHuman ( false , Rand ( 1 , 2 ) , skill ) ;
1139: LD_INT 0
1141: PPUSH
1142: LD_INT 1
1144: PPUSH
1145: LD_INT 2
1147: PPUSH
1148: CALL_OW 12
1152: PPUSH
1153: LD_VAR 0 5
1157: PPUSH
1158: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
1162: CALL_OW 44
1166: PPUSH
1167: LD_VAR 0 4
1171: PPUSH
1172: CALL_OW 52
// SetLives ( veh , Rand ( 500 , 1000 ) ) ;
1176: LD_VAR 0 4
1180: PPUSH
1181: LD_INT 500
1183: PPUSH
1184: LD_INT 1000
1186: PPUSH
1187: CALL_OW 12
1191: PPUSH
1192: CALL_OW 234
// SetCargo ( veh , Rand ( 1 , 2 ) , Rand ( 2 , 10 ) * 10 ) ;
1196: LD_VAR 0 4
1200: PPUSH
1201: LD_INT 1
1203: PPUSH
1204: LD_INT 2
1206: PPUSH
1207: CALL_OW 12
1211: PPUSH
1212: LD_INT 2
1214: PPUSH
1215: LD_INT 10
1217: PPUSH
1218: CALL_OW 12
1222: PUSH
1223: LD_INT 10
1225: MUL
1226: PPUSH
1227: CALL_OW 290
// conv_squad := Insert ( conv_squad , 1 , [ veh , 1 ] ) ;
1231: LD_ADDR_EXP 1
1235: PUSH
1236: LD_EXP 1
1240: PPUSH
1241: LD_INT 1
1243: PPUSH
1244: LD_VAR 0 4
1248: PUSH
1249: LD_INT 1
1251: PUSH
1252: EMPTY
1253: LIST
1254: LIST
1255: PPUSH
1256: CALL_OW 2
1260: ST_TO_ADDR
// Wait ( 0 0$01 ) ;
1261: LD_INT 35
1263: PPUSH
1264: CALL_OW 67
// conv_ready := true ;
1268: LD_ADDR_EXP 19
1272: PUSH
1273: LD_INT 1
1275: ST_TO_ADDR
// end ; 2 :
1276: GO 2906
1278: LD_INT 2
1280: DOUBLE
1281: EQUAL
1282: IFTRUE 1286
1284: GO 1586
1286: POP
// begin AddEscort ( ) ;
1287: CALL 2911 0 0
// Wait ( 0 0$02 ) ;
1291: LD_INT 70
1293: PPUSH
1294: CALL_OW 67
// for i = 1 to 3 do
1298: LD_ADDR_VAR 0 3
1302: PUSH
1303: DOUBLE
1304: LD_INT 1
1306: DEC
1307: ST_TO_ADDR
1308: LD_INT 3
1310: PUSH
1311: FOR_TO
1312: IFFALSE 1563
// begin vc_chassis := ru_medium_wheeled ;
1314: LD_ADDR_OWVAR 37
1318: PUSH
1319: LD_INT 21
1321: ST_TO_ADDR
// vc_engine := engine_combustion ;
1322: LD_ADDR_OWVAR 39
1326: PUSH
1327: LD_INT 1
1329: ST_TO_ADDR
// vc_control := control_manual ;
1330: LD_ADDR_OWVAR 38
1334: PUSH
1335: LD_INT 1
1337: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
1338: LD_ADDR_OWVAR 40
1342: PUSH
1343: LD_INT 51
1345: ST_TO_ADDR
// vc_fuel_battery := Rand ( 50 , 99 ) ;
1346: LD_ADDR_OWVAR 41
1350: PUSH
1351: LD_INT 50
1353: PPUSH
1354: LD_INT 99
1356: PPUSH
1357: CALL_OW 12
1361: ST_TO_ADDR
// if uc_side <> 6 then
1362: LD_OWVAR 20
1366: PUSH
1367: LD_INT 6
1369: NONEQUAL
1370: IFFALSE 1380
// uc_side := 6 ;
1372: LD_ADDR_OWVAR 20
1376: PUSH
1377: LD_INT 6
1379: ST_TO_ADDR
// veh := CreateVehicle ;
1380: LD_ADDR_VAR 0 4
1384: PUSH
1385: CALL_OW 45
1389: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1390: LD_VAR 0 4
1394: PPUSH
1395: LD_INT 3
1397: PPUSH
1398: CALL_OW 233
// PlaceUnitArea ( veh , conv_start , false ) ;
1402: LD_VAR 0 4
1406: PPUSH
1407: LD_INT 8
1409: PPUSH
1410: LD_INT 0
1412: PPUSH
1413: CALL_OW 49
// PrepareHuman ( false , Rand ( 1 , 2 ) , skill ) ;
1417: LD_INT 0
1419: PPUSH
1420: LD_INT 1
1422: PPUSH
1423: LD_INT 2
1425: PPUSH
1426: CALL_OW 12
1430: PPUSH
1431: LD_VAR 0 5
1435: PPUSH
1436: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
1440: CALL_OW 44
1444: PPUSH
1445: LD_VAR 0 4
1449: PPUSH
1450: CALL_OW 52
// SetLives ( veh , Rand ( 500 , 1000 ) ) ;
1454: LD_VAR 0 4
1458: PPUSH
1459: LD_INT 500
1461: PPUSH
1462: LD_INT 1000
1464: PPUSH
1465: CALL_OW 12
1469: PPUSH
1470: CALL_OW 234
// SetCargo ( veh , Rand ( 1 , 2 ) , Rand ( 2 , 10 ) * 10 ) ;
1474: LD_VAR 0 4
1478: PPUSH
1479: LD_INT 1
1481: PPUSH
1482: LD_INT 2
1484: PPUSH
1485: CALL_OW 12
1489: PPUSH
1490: LD_INT 2
1492: PPUSH
1493: LD_INT 10
1495: PPUSH
1496: CALL_OW 12
1500: PUSH
1501: LD_INT 10
1503: MUL
1504: PPUSH
1505: CALL_OW 290
// conv_squad := Insert ( conv_squad , 1 , [ veh , 1 ] ) ;
1509: LD_ADDR_EXP 1
1513: PUSH
1514: LD_EXP 1
1518: PPUSH
1519: LD_INT 1
1521: PPUSH
1522: LD_VAR 0 4
1526: PUSH
1527: LD_INT 1
1529: PUSH
1530: EMPTY
1531: LIST
1532: LIST
1533: PPUSH
1534: CALL_OW 2
1538: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
1539: LD_VAR 0 4
1543: PPUSH
1544: LD_INT 120
1546: PPUSH
1547: LD_INT 10
1549: PPUSH
1550: CALL_OW 111
// Wait ( 0 0$03 ) ;
1554: LD_INT 105
1556: PPUSH
1557: CALL_OW 67
// end ;
1561: GO 1311
1563: POP
1564: POP
// AddEscort ( ) ;
1565: CALL 2911 0 0
// Wait ( 0 0$02 ) ;
1569: LD_INT 70
1571: PPUSH
1572: CALL_OW 67
// conv_ready := true ;
1576: LD_ADDR_EXP 19
1580: PUSH
1581: LD_INT 1
1583: ST_TO_ADDR
// end ; 3 :
1584: GO 2906
1586: LD_INT 3
1588: DOUBLE
1589: EQUAL
1590: IFTRUE 1594
1592: GO 2021
1594: POP
// begin AddEscort ( ) ;
1595: CALL 2911 0 0
// Wait ( 0 0$02 ) ;
1599: LD_INT 70
1601: PPUSH
1602: CALL_OW 67
// for i = 1 to 3 do
1606: LD_ADDR_VAR 0 3
1610: PUSH
1611: DOUBLE
1612: LD_INT 1
1614: DEC
1615: ST_TO_ADDR
1616: LD_INT 3
1618: PUSH
1619: FOR_TO
1620: IFFALSE 1871
// begin vc_chassis := ru_medium_wheeled ;
1622: LD_ADDR_OWVAR 37
1626: PUSH
1627: LD_INT 21
1629: ST_TO_ADDR
// vc_engine := engine_combustion ;
1630: LD_ADDR_OWVAR 39
1634: PUSH
1635: LD_INT 1
1637: ST_TO_ADDR
// vc_control := control_manual ;
1638: LD_ADDR_OWVAR 38
1642: PUSH
1643: LD_INT 1
1645: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
1646: LD_ADDR_OWVAR 40
1650: PUSH
1651: LD_INT 51
1653: ST_TO_ADDR
// vc_fuel_battery := Rand ( 50 , 99 ) ;
1654: LD_ADDR_OWVAR 41
1658: PUSH
1659: LD_INT 50
1661: PPUSH
1662: LD_INT 99
1664: PPUSH
1665: CALL_OW 12
1669: ST_TO_ADDR
// if uc_side <> 6 then
1670: LD_OWVAR 20
1674: PUSH
1675: LD_INT 6
1677: NONEQUAL
1678: IFFALSE 1688
// uc_side := 6 ;
1680: LD_ADDR_OWVAR 20
1684: PUSH
1685: LD_INT 6
1687: ST_TO_ADDR
// veh := CreateVehicle ;
1688: LD_ADDR_VAR 0 4
1692: PUSH
1693: CALL_OW 45
1697: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1698: LD_VAR 0 4
1702: PPUSH
1703: LD_INT 3
1705: PPUSH
1706: CALL_OW 233
// PlaceUnitArea ( veh , conv_start , false ) ;
1710: LD_VAR 0 4
1714: PPUSH
1715: LD_INT 8
1717: PPUSH
1718: LD_INT 0
1720: PPUSH
1721: CALL_OW 49
// PrepareHuman ( false , Rand ( 1 , 2 ) , skill ) ;
1725: LD_INT 0
1727: PPUSH
1728: LD_INT 1
1730: PPUSH
1731: LD_INT 2
1733: PPUSH
1734: CALL_OW 12
1738: PPUSH
1739: LD_VAR 0 5
1743: PPUSH
1744: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
1748: CALL_OW 44
1752: PPUSH
1753: LD_VAR 0 4
1757: PPUSH
1758: CALL_OW 52
// SetLives ( veh , Rand ( 500 , 1000 ) ) ;
1762: LD_VAR 0 4
1766: PPUSH
1767: LD_INT 500
1769: PPUSH
1770: LD_INT 1000
1772: PPUSH
1773: CALL_OW 12
1777: PPUSH
1778: CALL_OW 234
// SetCargo ( veh , Rand ( 1 , 2 ) , Rand ( 2 , 10 ) * 10 ) ;
1782: LD_VAR 0 4
1786: PPUSH
1787: LD_INT 1
1789: PPUSH
1790: LD_INT 2
1792: PPUSH
1793: CALL_OW 12
1797: PPUSH
1798: LD_INT 2
1800: PPUSH
1801: LD_INT 10
1803: PPUSH
1804: CALL_OW 12
1808: PUSH
1809: LD_INT 10
1811: MUL
1812: PPUSH
1813: CALL_OW 290
// conv_squad := Insert ( conv_squad , 1 , [ veh , 1 ] ) ;
1817: LD_ADDR_EXP 1
1821: PUSH
1822: LD_EXP 1
1826: PPUSH
1827: LD_INT 1
1829: PPUSH
1830: LD_VAR 0 4
1834: PUSH
1835: LD_INT 1
1837: PUSH
1838: EMPTY
1839: LIST
1840: LIST
1841: PPUSH
1842: CALL_OW 2
1846: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
1847: LD_VAR 0 4
1851: PPUSH
1852: LD_INT 120
1854: PPUSH
1855: LD_INT 10
1857: PPUSH
1858: CALL_OW 111
// Wait ( 0 0$03 ) ;
1862: LD_INT 105
1864: PPUSH
1865: CALL_OW 67
// end ;
1869: GO 1619
1871: POP
1872: POP
// for i = 1 to rand ( 2 , 4 ) do
1873: LD_ADDR_VAR 0 3
1877: PUSH
1878: DOUBLE
1879: LD_INT 1
1881: DEC
1882: ST_TO_ADDR
1883: LD_INT 2
1885: PPUSH
1886: LD_INT 4
1888: PPUSH
1889: CALL_OW 12
1893: PUSH
1894: FOR_TO
1895: IFFALSE 2002
// begin PrepareHuman ( false , 1 , skill ) ;
1897: LD_INT 0
1899: PPUSH
1900: LD_INT 1
1902: PPUSH
1903: LD_VAR 0 5
1907: PPUSH
1908: CALL_OW 380
// if uc_side <> 6 then
1912: LD_OWVAR 20
1916: PUSH
1917: LD_INT 6
1919: NONEQUAL
1920: IFFALSE 1930
// uc_side := 6 ;
1922: LD_ADDR_OWVAR 20
1926: PUSH
1927: LD_INT 6
1929: ST_TO_ADDR
// veh := CreateHuman ;
1930: LD_ADDR_VAR 0 4
1934: PUSH
1935: CALL_OW 44
1939: ST_TO_ADDR
// PlaceUnitArea ( veh , conv_start , false ) ;
1940: LD_VAR 0 4
1944: PPUSH
1945: LD_INT 8
1947: PPUSH
1948: LD_INT 0
1950: PPUSH
1951: CALL_OW 49
// escort := Insert ( escort , 1 , veh ) ;
1955: LD_ADDR_EXP 2
1959: PUSH
1960: LD_EXP 2
1964: PPUSH
1965: LD_INT 1
1967: PPUSH
1968: LD_VAR 0 4
1972: PPUSH
1973: CALL_OW 2
1977: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
1978: LD_VAR 0 4
1982: PPUSH
1983: LD_INT 120
1985: PPUSH
1986: LD_INT 10
1988: PPUSH
1989: CALL_OW 111
// Wait ( 0 0$02 ) ;
1993: LD_INT 70
1995: PPUSH
1996: CALL_OW 67
// end ;
2000: GO 1894
2002: POP
2003: POP
// Wait ( 0 0$02 ) ;
2004: LD_INT 70
2006: PPUSH
2007: CALL_OW 67
// conv_ready := true ;
2011: LD_ADDR_EXP 19
2015: PUSH
2016: LD_INT 1
2018: ST_TO_ADDR
// end ; 4 :
2019: GO 2906
2021: LD_INT 4
2023: DOUBLE
2024: EQUAL
2025: IFTRUE 2029
2027: GO 2335
2029: POP
// begin if Rand ( 0 , 1 ) = 1 then
2030: LD_INT 0
2032: PPUSH
2033: LD_INT 1
2035: PPUSH
2036: CALL_OW 12
2040: PUSH
2041: LD_INT 1
2043: EQUAL
2044: IFFALSE 2050
// AddEscort ( ) ;
2046: CALL 2911 0 0
// Wait ( 0 0$02 ) ;
2050: LD_INT 70
2052: PPUSH
2053: CALL_OW 67
// for i = 1 to 5 do
2057: LD_ADDR_VAR 0 3
2061: PUSH
2062: DOUBLE
2063: LD_INT 1
2065: DEC
2066: ST_TO_ADDR
2067: LD_INT 5
2069: PUSH
2070: FOR_TO
2071: IFFALSE 2193
// begin PrepareHuman ( false , Rand ( 2 , 4 ) , skill ) ;
2073: LD_INT 0
2075: PPUSH
2076: LD_INT 2
2078: PPUSH
2079: LD_INT 4
2081: PPUSH
2082: CALL_OW 12
2086: PPUSH
2087: LD_VAR 0 5
2091: PPUSH
2092: CALL_OW 380
// if uc_side <> 6 then
2096: LD_OWVAR 20
2100: PUSH
2101: LD_INT 6
2103: NONEQUAL
2104: IFFALSE 2114
// uc_side := 6 ;
2106: LD_ADDR_OWVAR 20
2110: PUSH
2111: LD_INT 6
2113: ST_TO_ADDR
// veh := CreateHuman ;
2114: LD_ADDR_VAR 0 4
2118: PUSH
2119: CALL_OW 44
2123: ST_TO_ADDR
// PlaceUnitArea ( veh , conv_start , false ) ;
2124: LD_VAR 0 4
2128: PPUSH
2129: LD_INT 8
2131: PPUSH
2132: LD_INT 0
2134: PPUSH
2135: CALL_OW 49
// conv_squad := Insert ( conv_squad , 1 , [ veh , 1 ] ) ;
2139: LD_ADDR_EXP 1
2143: PUSH
2144: LD_EXP 1
2148: PPUSH
2149: LD_INT 1
2151: PPUSH
2152: LD_VAR 0 4
2156: PUSH
2157: LD_INT 1
2159: PUSH
2160: EMPTY
2161: LIST
2162: LIST
2163: PPUSH
2164: CALL_OW 2
2168: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
2169: LD_VAR 0 4
2173: PPUSH
2174: LD_INT 120
2176: PPUSH
2177: LD_INT 10
2179: PPUSH
2180: CALL_OW 111
// Wait ( 0 0$02 ) ;
2184: LD_INT 70
2186: PPUSH
2187: CALL_OW 67
// end ;
2191: GO 2070
2193: POP
2194: POP
// for i = 1 to 2 do
2195: LD_ADDR_VAR 0 3
2199: PUSH
2200: DOUBLE
2201: LD_INT 1
2203: DEC
2204: ST_TO_ADDR
2205: LD_INT 2
2207: PUSH
2208: FOR_TO
2209: IFFALSE 2316
// begin PrepareHuman ( false , 1 , skill ) ;
2211: LD_INT 0
2213: PPUSH
2214: LD_INT 1
2216: PPUSH
2217: LD_VAR 0 5
2221: PPUSH
2222: CALL_OW 380
// if uc_side <> 6 then
2226: LD_OWVAR 20
2230: PUSH
2231: LD_INT 6
2233: NONEQUAL
2234: IFFALSE 2244
// uc_side := 6 ;
2236: LD_ADDR_OWVAR 20
2240: PUSH
2241: LD_INT 6
2243: ST_TO_ADDR
// veh := CreateHuman ;
2244: LD_ADDR_VAR 0 4
2248: PUSH
2249: CALL_OW 44
2253: ST_TO_ADDR
// PlaceUnitArea ( veh , conv_start , false ) ;
2254: LD_VAR 0 4
2258: PPUSH
2259: LD_INT 8
2261: PPUSH
2262: LD_INT 0
2264: PPUSH
2265: CALL_OW 49
// escort := Insert ( escort , 1 , veh ) ;
2269: LD_ADDR_EXP 2
2273: PUSH
2274: LD_EXP 2
2278: PPUSH
2279: LD_INT 1
2281: PPUSH
2282: LD_VAR 0 4
2286: PPUSH
2287: CALL_OW 2
2291: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
2292: LD_VAR 0 4
2296: PPUSH
2297: LD_INT 120
2299: PPUSH
2300: LD_INT 10
2302: PPUSH
2303: CALL_OW 111
// Wait ( 0 0$02 ) ;
2307: LD_INT 70
2309: PPUSH
2310: CALL_OW 67
// end ;
2314: GO 2208
2316: POP
2317: POP
// Wait ( 0 0$02 ) ;
2318: LD_INT 70
2320: PPUSH
2321: CALL_OW 67
// conv_ready := true ;
2325: LD_ADDR_EXP 19
2329: PUSH
2330: LD_INT 1
2332: ST_TO_ADDR
// end ; 5 :
2333: GO 2906
2335: LD_INT 5
2337: DOUBLE
2338: EQUAL
2339: IFTRUE 2343
2341: GO 2905
2343: POP
// begin AddEscort ( ) ;
2344: CALL 2911 0 0
// Wait ( 0 0$02 ) ;
2348: LD_INT 70
2350: PPUSH
2351: CALL_OW 67
// AddEscort ( ) ;
2355: CALL 2911 0 0
// Wait ( 0 0$02 ) ;
2359: LD_INT 70
2361: PPUSH
2362: CALL_OW 67
// for i = 1 to 3 do
2366: LD_ADDR_VAR 0 3
2370: PUSH
2371: DOUBLE
2372: LD_INT 1
2374: DEC
2375: ST_TO_ADDR
2376: LD_INT 3
2378: PUSH
2379: FOR_TO
2380: IFFALSE 2631
// begin vc_chassis := ru_medium_wheeled ;
2382: LD_ADDR_OWVAR 37
2386: PUSH
2387: LD_INT 21
2389: ST_TO_ADDR
// vc_engine := engine_combustion ;
2390: LD_ADDR_OWVAR 39
2394: PUSH
2395: LD_INT 1
2397: ST_TO_ADDR
// vc_control := control_manual ;
2398: LD_ADDR_OWVAR 38
2402: PUSH
2403: LD_INT 1
2405: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
2406: LD_ADDR_OWVAR 40
2410: PUSH
2411: LD_INT 51
2413: ST_TO_ADDR
// vc_fuel_battery := Rand ( 50 , 99 ) ;
2414: LD_ADDR_OWVAR 41
2418: PUSH
2419: LD_INT 50
2421: PPUSH
2422: LD_INT 99
2424: PPUSH
2425: CALL_OW 12
2429: ST_TO_ADDR
// if uc_side <> 6 then
2430: LD_OWVAR 20
2434: PUSH
2435: LD_INT 6
2437: NONEQUAL
2438: IFFALSE 2448
// uc_side := 6 ;
2440: LD_ADDR_OWVAR 20
2444: PUSH
2445: LD_INT 6
2447: ST_TO_ADDR
// veh := CreateVehicle ;
2448: LD_ADDR_VAR 0 4
2452: PUSH
2453: CALL_OW 45
2457: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
2458: LD_VAR 0 4
2462: PPUSH
2463: LD_INT 3
2465: PPUSH
2466: CALL_OW 233
// PlaceUnitArea ( veh , conv_start , false ) ;
2470: LD_VAR 0 4
2474: PPUSH
2475: LD_INT 8
2477: PPUSH
2478: LD_INT 0
2480: PPUSH
2481: CALL_OW 49
// PrepareHuman ( false , Rand ( 1 , 2 ) , skill ) ;
2485: LD_INT 0
2487: PPUSH
2488: LD_INT 1
2490: PPUSH
2491: LD_INT 2
2493: PPUSH
2494: CALL_OW 12
2498: PPUSH
2499: LD_VAR 0 5
2503: PPUSH
2504: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
2508: CALL_OW 44
2512: PPUSH
2513: LD_VAR 0 4
2517: PPUSH
2518: CALL_OW 52
// SetLives ( veh , Rand ( 500 , 1000 ) ) ;
2522: LD_VAR 0 4
2526: PPUSH
2527: LD_INT 500
2529: PPUSH
2530: LD_INT 1000
2532: PPUSH
2533: CALL_OW 12
2537: PPUSH
2538: CALL_OW 234
// SetCargo ( veh , Rand ( 1 , 2 ) , Rand ( 2 , 10 ) * 10 ) ;
2542: LD_VAR 0 4
2546: PPUSH
2547: LD_INT 1
2549: PPUSH
2550: LD_INT 2
2552: PPUSH
2553: CALL_OW 12
2557: PPUSH
2558: LD_INT 2
2560: PPUSH
2561: LD_INT 10
2563: PPUSH
2564: CALL_OW 12
2568: PUSH
2569: LD_INT 10
2571: MUL
2572: PPUSH
2573: CALL_OW 290
// conv_squad := Insert ( conv_squad , 1 , [ veh , 1 ] ) ;
2577: LD_ADDR_EXP 1
2581: PUSH
2582: LD_EXP 1
2586: PPUSH
2587: LD_INT 1
2589: PPUSH
2590: LD_VAR 0 4
2594: PUSH
2595: LD_INT 1
2597: PUSH
2598: EMPTY
2599: LIST
2600: LIST
2601: PPUSH
2602: CALL_OW 2
2606: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
2607: LD_VAR 0 4
2611: PPUSH
2612: LD_INT 120
2614: PPUSH
2615: LD_INT 10
2617: PPUSH
2618: CALL_OW 111
// Wait ( 0 0$02 ) ;
2622: LD_INT 70
2624: PPUSH
2625: CALL_OW 67
// end ;
2629: GO 2379
2631: POP
2632: POP
// if Rand ( 0 , 1 ) = 1 then
2633: LD_INT 0
2635: PPUSH
2636: LD_INT 1
2638: PPUSH
2639: CALL_OW 12
2643: PUSH
2644: LD_INT 1
2646: EQUAL
2647: IFFALSE 2683
// begin vc_chassis := ru_medium_tracked ;
2649: LD_ADDR_OWVAR 37
2653: PUSH
2654: LD_INT 22
2656: ST_TO_ADDR
// vc_engine := engine_combustion ;
2657: LD_ADDR_OWVAR 39
2661: PUSH
2662: LD_INT 1
2664: ST_TO_ADDR
// vc_control := control_manual ;
2665: LD_ADDR_OWVAR 38
2669: PUSH
2670: LD_INT 1
2672: ST_TO_ADDR
// vc_weapon := ru_crane ;
2673: LD_ADDR_OWVAR 40
2677: PUSH
2678: LD_INT 52
2680: ST_TO_ADDR
// end else
2681: GO 2715
// begin vc_chassis := ru_heavy_wheeled ;
2683: LD_ADDR_OWVAR 37
2687: PUSH
2688: LD_INT 23
2690: ST_TO_ADDR
// vc_engine := engine_combustion ;
2691: LD_ADDR_OWVAR 39
2695: PUSH
2696: LD_INT 1
2698: ST_TO_ADDR
// vc_control := control_manual ;
2699: LD_ADDR_OWVAR 38
2703: PUSH
2704: LD_INT 1
2706: ST_TO_ADDR
// vc_weapon := ru_bulldozer ;
2707: LD_ADDR_OWVAR 40
2711: PUSH
2712: LD_INT 53
2714: ST_TO_ADDR
// end ; vc_fuel_battery := Rand ( 50 , 99 ) ;
2715: LD_ADDR_OWVAR 41
2719: PUSH
2720: LD_INT 50
2722: PPUSH
2723: LD_INT 99
2725: PPUSH
2726: CALL_OW 12
2730: ST_TO_ADDR
// if uc_side <> 6 then
2731: LD_OWVAR 20
2735: PUSH
2736: LD_INT 6
2738: NONEQUAL
2739: IFFALSE 2749
// uc_side := 6 ;
2741: LD_ADDR_OWVAR 20
2745: PUSH
2746: LD_INT 6
2748: ST_TO_ADDR
// veh := CreateVehicle ;
2749: LD_ADDR_VAR 0 4
2753: PUSH
2754: CALL_OW 45
2758: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
2759: LD_VAR 0 4
2763: PPUSH
2764: LD_INT 3
2766: PPUSH
2767: CALL_OW 233
// PlaceUnitArea ( veh , conv_start , false ) ;
2771: LD_VAR 0 4
2775: PPUSH
2776: LD_INT 8
2778: PPUSH
2779: LD_INT 0
2781: PPUSH
2782: CALL_OW 49
// PrepareHuman ( false , Rand ( 1 , 2 ) , skill ) ;
2786: LD_INT 0
2788: PPUSH
2789: LD_INT 1
2791: PPUSH
2792: LD_INT 2
2794: PPUSH
2795: CALL_OW 12
2799: PPUSH
2800: LD_VAR 0 5
2804: PPUSH
2805: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
2809: CALL_OW 44
2813: PPUSH
2814: LD_VAR 0 4
2818: PPUSH
2819: CALL_OW 52
// SetLives ( veh , Rand ( 500 , 1000 ) ) ;
2823: LD_VAR 0 4
2827: PPUSH
2828: LD_INT 500
2830: PPUSH
2831: LD_INT 1000
2833: PPUSH
2834: CALL_OW 12
2838: PPUSH
2839: CALL_OW 234
// conv_squad := Insert ( conv_squad , 1 , [ veh , 1 ] ) ;
2843: LD_ADDR_EXP 1
2847: PUSH
2848: LD_EXP 1
2852: PPUSH
2853: LD_INT 1
2855: PPUSH
2856: LD_VAR 0 4
2860: PUSH
2861: LD_INT 1
2863: PUSH
2864: EMPTY
2865: LIST
2866: LIST
2867: PPUSH
2868: CALL_OW 2
2872: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
2873: LD_VAR 0 4
2877: PPUSH
2878: LD_INT 120
2880: PPUSH
2881: LD_INT 10
2883: PPUSH
2884: CALL_OW 111
// Wait ( 0 0$02 ) ;
2888: LD_INT 70
2890: PPUSH
2891: CALL_OW 67
// conv_ready := true ;
2895: LD_ADDR_EXP 19
2899: PUSH
2900: LD_INT 1
2902: ST_TO_ADDR
// end ; end ;
2903: GO 2906
2905: POP
// end ;
2906: LD_VAR 0 2
2910: RET
// export function AddEscort ( ) ; var veh , skill ; begin
2911: LD_INT 0
2913: PPUSH
2914: PPUSH
2915: PPUSH
// skill := [ 5 , 5 , 4 ] [ Difficulty ] ;
2916: LD_ADDR_VAR 0 3
2920: PUSH
2921: LD_INT 5
2923: PUSH
2924: LD_INT 5
2926: PUSH
2927: LD_INT 4
2929: PUSH
2930: EMPTY
2931: LIST
2932: LIST
2933: LIST
2934: PUSH
2935: LD_OWVAR 67
2939: ARRAY
2940: ST_TO_ADDR
// uc_side := 6 ;
2941: LD_ADDR_OWVAR 20
2945: PUSH
2946: LD_INT 6
2948: ST_TO_ADDR
// uc_nation := 3 ;
2949: LD_ADDR_OWVAR 21
2953: PUSH
2954: LD_INT 3
2956: ST_TO_ADDR
// vc_chassis := ru_medium_wheeled ;
2957: LD_ADDR_OWVAR 37
2961: PUSH
2962: LD_INT 21
2964: ST_TO_ADDR
// vc_engine := engine_combustion ;
2965: LD_ADDR_OWVAR 39
2969: PUSH
2970: LD_INT 1
2972: ST_TO_ADDR
// vc_control := control_manual ;
2973: LD_ADDR_OWVAR 38
2977: PUSH
2978: LD_INT 1
2980: ST_TO_ADDR
// vc_weapon := [ ru_gun , ru_heavy_machine_gun ] [ Rand ( 1 , 2 ) ] ;
2981: LD_ADDR_OWVAR 40
2985: PUSH
2986: LD_INT 44
2988: PUSH
2989: LD_INT 42
2991: PUSH
2992: EMPTY
2993: LIST
2994: LIST
2995: PUSH
2996: LD_INT 1
2998: PPUSH
2999: LD_INT 2
3001: PPUSH
3002: CALL_OW 12
3006: ARRAY
3007: ST_TO_ADDR
// vc_fuel_battery := Rand ( 50 , 99 ) ;
3008: LD_ADDR_OWVAR 41
3012: PUSH
3013: LD_INT 50
3015: PPUSH
3016: LD_INT 99
3018: PPUSH
3019: CALL_OW 12
3023: ST_TO_ADDR
// veh := CreateVehicle ;
3024: LD_ADDR_VAR 0 2
3028: PUSH
3029: CALL_OW 45
3033: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3034: LD_VAR 0 2
3038: PPUSH
3039: LD_INT 3
3041: PPUSH
3042: CALL_OW 233
// PlaceUnitArea ( veh , conv_start , false ) ;
3046: LD_VAR 0 2
3050: PPUSH
3051: LD_INT 8
3053: PPUSH
3054: LD_INT 0
3056: PPUSH
3057: CALL_OW 49
// PrepareHuman ( false , 3 , skill ) ;
3061: LD_INT 0
3063: PPUSH
3064: LD_INT 3
3066: PPUSH
3067: LD_VAR 0 3
3071: PPUSH
3072: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
3076: CALL_OW 44
3080: PPUSH
3081: LD_VAR 0 2
3085: PPUSH
3086: CALL_OW 52
// SetLives ( veh , Rand ( 500 , 1000 ) ) ;
3090: LD_VAR 0 2
3094: PPUSH
3095: LD_INT 500
3097: PPUSH
3098: LD_INT 1000
3100: PPUSH
3101: CALL_OW 12
3105: PPUSH
3106: CALL_OW 234
// escort := Insert ( escort , 1 , veh ) ;
3110: LD_ADDR_EXP 2
3114: PUSH
3115: LD_EXP 2
3119: PPUSH
3120: LD_INT 1
3122: PPUSH
3123: LD_VAR 0 2
3127: PPUSH
3128: CALL_OW 2
3132: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
3133: LD_VAR 0 2
3137: PPUSH
3138: LD_INT 120
3140: PPUSH
3141: LD_INT 10
3143: PPUSH
3144: CALL_OW 111
// end ;
3148: LD_VAR 0 1
3152: RET
// every 4 trigger conv_ready and FilterAllUnits ( [ f_side , 6 ] ) do var i , j ;
3153: LD_EXP 19
3157: PUSH
3158: LD_INT 22
3160: PUSH
3161: LD_INT 6
3163: PUSH
3164: EMPTY
3165: LIST
3166: LIST
3167: PPUSH
3168: CALL_OW 69
3172: AND
3173: IFFALSE 3948
3175: GO 3177
3177: DISABLE
3178: LD_INT 0
3180: PPUSH
3181: PPUSH
// begin enable ;
3182: ENABLE
// if conv_squad then
3183: LD_EXP 1
3187: IFFALSE 3458
// for i = conv_squad downto 1 do
3189: LD_ADDR_VAR 0 1
3193: PUSH
3194: DOUBLE
3195: LD_EXP 1
3199: INC
3200: ST_TO_ADDR
3201: LD_INT 1
3203: PUSH
3204: FOR_DOWNTO
3205: IFFALSE 3456
// begin if IsInArea ( conv_squad [ i ] [ 1 ] , conv_end ) then
3207: LD_EXP 1
3211: PUSH
3212: LD_VAR 0 1
3216: ARRAY
3217: PUSH
3218: LD_INT 1
3220: ARRAY
3221: PPUSH
3222: LD_INT 9
3224: PPUSH
3225: CALL_OW 308
3229: IFFALSE 3306
// begin for j in FilterUnitsInArea ( conv_end , [ f_side , 6 ] ) do
3231: LD_ADDR_VAR 0 2
3235: PUSH
3236: LD_INT 9
3238: PPUSH
3239: LD_INT 22
3241: PUSH
3242: LD_INT 6
3244: PUSH
3245: EMPTY
3246: LIST
3247: LIST
3248: PPUSH
3249: CALL_OW 70
3253: PUSH
3254: FOR_IN
3255: IFFALSE 3282
// begin safeCounter := safeCounter + 1 ;
3257: LD_ADDR_EXP 15
3261: PUSH
3262: LD_EXP 15
3266: PUSH
3267: LD_INT 1
3269: PLUS
3270: ST_TO_ADDR
// RemoveUnit ( j ) ;
3271: LD_VAR 0 2
3275: PPUSH
3276: CALL_OW 64
// end ;
3280: GO 3254
3282: POP
3283: POP
// conv_squad := Delete ( conv_squad , i ) ;
3284: LD_ADDR_EXP 1
3288: PUSH
3289: LD_EXP 1
3293: PPUSH
3294: LD_VAR 0 1
3298: PPUSH
3299: CALL_OW 3
3303: ST_TO_ADDR
// break ;
3304: GO 3456
// end ; if IsInArea ( conv_squad [ i ] [ 1 ] , path [ conv_squad [ i ] [ 2 ] ] ) then
3306: LD_EXP 1
3310: PUSH
3311: LD_VAR 0 1
3315: ARRAY
3316: PUSH
3317: LD_INT 1
3319: ARRAY
3320: PPUSH
3321: LD_EXP 6
3325: PUSH
3326: LD_EXP 1
3330: PUSH
3331: LD_VAR 0 1
3335: ARRAY
3336: PUSH
3337: LD_INT 2
3339: ARRAY
3340: ARRAY
3341: PPUSH
3342: CALL_OW 308
3346: IFFALSE 3392
// conv_squad := Replace2 ( conv_squad , i , 2 , conv_squad [ i ] [ 2 ] + 1 ) else
3348: LD_ADDR_EXP 1
3352: PUSH
3353: LD_EXP 1
3357: PPUSH
3358: LD_VAR 0 1
3362: PPUSH
3363: LD_INT 2
3365: PPUSH
3366: LD_EXP 1
3370: PUSH
3371: LD_VAR 0 1
3375: ARRAY
3376: PUSH
3377: LD_INT 2
3379: ARRAY
3380: PUSH
3381: LD_INT 1
3383: PLUS
3384: PPUSH
3385: CALL 10334 0 4
3389: ST_TO_ADDR
3390: GO 3454
// if not HasTask ( conv_squad [ i ] [ 1 ] ) then
3392: LD_EXP 1
3396: PUSH
3397: LD_VAR 0 1
3401: ARRAY
3402: PUSH
3403: LD_INT 1
3405: ARRAY
3406: PPUSH
3407: CALL_OW 314
3411: NOT
3412: IFFALSE 3454
// ComMoveToArea ( conv_squad [ i ] [ 1 ] , path [ conv_squad [ i ] [ 2 ] ] ) ;
3414: LD_EXP 1
3418: PUSH
3419: LD_VAR 0 1
3423: ARRAY
3424: PUSH
3425: LD_INT 1
3427: ARRAY
3428: PPUSH
3429: LD_EXP 6
3433: PUSH
3434: LD_EXP 1
3438: PUSH
3439: LD_VAR 0 1
3443: ARRAY
3444: PUSH
3445: LD_INT 2
3447: ARRAY
3448: ARRAY
3449: PPUSH
3450: CALL_OW 113
// end ;
3454: GO 3204
3456: POP
3457: POP
// if escort then
3458: LD_EXP 2
3462: IFFALSE 3801
// for i = escort downto 1 do
3464: LD_ADDR_VAR 0 1
3468: PUSH
3469: DOUBLE
3470: LD_EXP 2
3474: INC
3475: ST_TO_ADDR
3476: LD_INT 1
3478: PUSH
3479: FOR_DOWNTO
3480: IFFALSE 3799
// begin if IsInArea ( escort [ i ] , conv_end ) then
3482: LD_EXP 2
3486: PUSH
3487: LD_VAR 0 1
3491: ARRAY
3492: PPUSH
3493: LD_INT 9
3495: PPUSH
3496: CALL_OW 308
3500: IFFALSE 3577
// begin for j in FilterUnitsInArea ( conv_end , [ f_side , 6 ] ) do
3502: LD_ADDR_VAR 0 2
3506: PUSH
3507: LD_INT 9
3509: PPUSH
3510: LD_INT 22
3512: PUSH
3513: LD_INT 6
3515: PUSH
3516: EMPTY
3517: LIST
3518: LIST
3519: PPUSH
3520: CALL_OW 70
3524: PUSH
3525: FOR_IN
3526: IFFALSE 3553
// begin safeCounter := safeCounter + 1 ;
3528: LD_ADDR_EXP 15
3532: PUSH
3533: LD_EXP 15
3537: PUSH
3538: LD_INT 1
3540: PLUS
3541: ST_TO_ADDR
// RemoveUnit ( j ) ;
3542: LD_VAR 0 2
3546: PPUSH
3547: CALL_OW 64
// end ;
3551: GO 3525
3553: POP
3554: POP
// escort := Delete ( escort , i ) ;
3555: LD_ADDR_EXP 2
3559: PUSH
3560: LD_EXP 2
3564: PPUSH
3565: LD_VAR 0 1
3569: PPUSH
3570: CALL_OW 3
3574: ST_TO_ADDR
// break ;
3575: GO 3799
// end ; if FindTarget ( escort [ i ] ) and GetDistUnits ( escort [ i ] , FindTarget ( escort [ i ] ) ) < 13 then
3577: LD_EXP 2
3581: PUSH
3582: LD_VAR 0 1
3586: ARRAY
3587: PPUSH
3588: CALL 10591 0 1
3592: PUSH
3593: LD_EXP 2
3597: PUSH
3598: LD_VAR 0 1
3602: ARRAY
3603: PPUSH
3604: LD_EXP 2
3608: PUSH
3609: LD_VAR 0 1
3613: ARRAY
3614: PPUSH
3615: CALL 10591 0 1
3619: PPUSH
3620: CALL_OW 296
3624: PUSH
3625: LD_INT 13
3627: LESS
3628: AND
3629: IFFALSE 3664
// ComAttackUnit ( escort [ i ] , FindTarget ( escort [ i ] ) ) else
3631: LD_EXP 2
3635: PUSH
3636: LD_VAR 0 1
3640: ARRAY
3641: PPUSH
3642: LD_EXP 2
3646: PUSH
3647: LD_VAR 0 1
3651: ARRAY
3652: PPUSH
3653: CALL 10591 0 1
3657: PPUSH
3658: CALL_OW 115
3662: GO 3797
// if conv_squad and GetDistUnitXY ( escort [ i ] , 64 , 117 ) > 35 and not HasTask ( escort [ i ] ) then
3664: LD_EXP 1
3668: PUSH
3669: LD_EXP 2
3673: PUSH
3674: LD_VAR 0 1
3678: ARRAY
3679: PPUSH
3680: LD_INT 64
3682: PPUSH
3683: LD_INT 117
3685: PPUSH
3686: CALL_OW 297
3690: PUSH
3691: LD_INT 35
3693: GREATER
3694: AND
3695: PUSH
3696: LD_EXP 2
3700: PUSH
3701: LD_VAR 0 1
3705: ARRAY
3706: PPUSH
3707: CALL_OW 314
3711: NOT
3712: AND
3713: IFFALSE 3779
// begin if GetDistUnits ( escort [ i ] , conv_squad [ 1 ] [ 1 ] ) > 6 then
3715: LD_EXP 2
3719: PUSH
3720: LD_VAR 0 1
3724: ARRAY
3725: PPUSH
3726: LD_EXP 1
3730: PUSH
3731: LD_INT 1
3733: ARRAY
3734: PUSH
3735: LD_INT 1
3737: ARRAY
3738: PPUSH
3739: CALL_OW 296
3743: PUSH
3744: LD_INT 6
3746: GREATER
3747: IFFALSE 3777
// ComMoveUnit ( escort [ i ] , conv_squad [ 1 ] [ 1 ] ) end else
3749: LD_EXP 2
3753: PUSH
3754: LD_VAR 0 1
3758: ARRAY
3759: PPUSH
3760: LD_EXP 1
3764: PUSH
3765: LD_INT 1
3767: ARRAY
3768: PUSH
3769: LD_INT 1
3771: ARRAY
3772: PPUSH
3773: CALL_OW 112
3777: GO 3797
// ComMoveToArea ( escort [ i ] , conv_end ) ;
3779: LD_EXP 2
3783: PUSH
3784: LD_VAR 0 1
3788: ARRAY
3789: PPUSH
3790: LD_INT 9
3792: PPUSH
3793: CALL_OW 113
// end ;
3797: GO 3479
3799: POP
3800: POP
// if FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) then
3801: LD_INT 22
3803: PUSH
3804: LD_INT 6
3806: PUSH
3807: EMPTY
3808: LIST
3809: LIST
3810: PUSH
3811: LD_INT 21
3813: PUSH
3814: LD_INT 1
3816: PUSH
3817: EMPTY
3818: LIST
3819: LIST
3820: PUSH
3821: EMPTY
3822: LIST
3823: LIST
3824: PPUSH
3825: CALL_OW 69
3829: IFFALSE 3948
// for j in FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) do
3831: LD_ADDR_VAR 0 2
3835: PUSH
3836: LD_INT 22
3838: PUSH
3839: LD_INT 6
3841: PUSH
3842: EMPTY
3843: LIST
3844: LIST
3845: PUSH
3846: LD_INT 21
3848: PUSH
3849: LD_INT 1
3851: PUSH
3852: EMPTY
3853: LIST
3854: LIST
3855: PUSH
3856: EMPTY
3857: LIST
3858: LIST
3859: PPUSH
3860: CALL_OW 69
3864: PUSH
3865: FOR_IN
3866: IFFALSE 3946
// begin if not HasTask ( j ) and not IsInArea ( j , conv_end ) then
3868: LD_VAR 0 2
3872: PPUSH
3873: CALL_OW 314
3877: NOT
3878: PUSH
3879: LD_VAR 0 2
3883: PPUSH
3884: LD_INT 9
3886: PPUSH
3887: CALL_OW 308
3891: NOT
3892: AND
3893: IFFALSE 3907
// ComMoveToArea ( j , conv_end ) ;
3895: LD_VAR 0 2
3899: PPUSH
3900: LD_INT 9
3902: PPUSH
3903: CALL_OW 113
// if IsInArea ( j , conv_end ) then
3907: LD_VAR 0 2
3911: PPUSH
3912: LD_INT 9
3914: PPUSH
3915: CALL_OW 308
3919: IFFALSE 3944
// begin safeCounter := safeCounter + 1 ;
3921: LD_ADDR_EXP 15
3925: PUSH
3926: LD_EXP 15
3930: PUSH
3931: LD_INT 1
3933: PLUS
3934: ST_TO_ADDR
// RemoveUnit ( j ) ;
3935: LD_VAR 0 2
3939: PPUSH
3940: CALL_OW 64
// end ; end ;
3944: GO 3865
3946: POP
3947: POP
// end ;
3948: PPOPN 2
3950: END
// every 0 0$01 trigger UnitFilter ( [ escort , conv_squad ] , [ f_side , 3 ] ) do var i ;
3951: LD_EXP 2
3955: PUSH
3956: LD_EXP 1
3960: PUSH
3961: EMPTY
3962: LIST
3963: LIST
3964: PPUSH
3965: LD_INT 22
3967: PUSH
3968: LD_INT 3
3970: PUSH
3971: EMPTY
3972: LIST
3973: LIST
3974: PPUSH
3975: CALL_OW 72
3979: IFFALSE 4041
3981: GO 3983
3983: DISABLE
3984: LD_INT 0
3986: PPUSH
// begin enable ;
3987: ENABLE
// for i in UnitFilter ( [ escort , conv_squad ] , [ f_side , 3 ] ) do
3988: LD_ADDR_VAR 0 1
3992: PUSH
3993: LD_EXP 2
3997: PUSH
3998: LD_EXP 1
4002: PUSH
4003: EMPTY
4004: LIST
4005: LIST
4006: PPUSH
4007: LD_INT 22
4009: PUSH
4010: LD_INT 3
4012: PUSH
4013: EMPTY
4014: LIST
4015: LIST
4016: PPUSH
4017: CALL_OW 72
4021: PUSH
4022: FOR_IN
4023: IFFALSE 4039
// SetSide ( i , 6 ) ;
4025: LD_VAR 0 1
4029: PPUSH
4030: LD_INT 6
4032: PPUSH
4033: CALL_OW 235
4037: GO 4022
4039: POP
4040: POP
// end ; end_of_file
4041: PPOPN 1
4043: END
// export Collins ; export us_alert , us_retreat , us_patrol , us_count ; export function PrepareAmerican ; var i , un , skill , towers ; begin
4044: LD_INT 0
4046: PPUSH
4047: PPUSH
4048: PPUSH
4049: PPUSH
4050: PPUSH
// uc_side := 1 ;
4051: LD_ADDR_OWVAR 20
4055: PUSH
4056: LD_INT 1
4058: ST_TO_ADDR
// uc_nation := 1 ;
4059: LD_ADDR_OWVAR 21
4063: PUSH
4064: LD_INT 1
4066: ST_TO_ADDR
// us_alert := false ;
4067: LD_ADDR_EXP 21
4071: PUSH
4072: LD_INT 0
4074: ST_TO_ADDR
// us_retreat := false ;
4075: LD_ADDR_EXP 22
4079: PUSH
4080: LD_INT 0
4082: ST_TO_ADDR
// us_patrol := false ;
4083: LD_ADDR_EXP 23
4087: PUSH
4088: LD_INT 0
4090: ST_TO_ADDR
// us_count := 0 ;
4091: LD_ADDR_EXP 24
4095: PUSH
4096: LD_INT 0
4098: ST_TO_ADDR
// skill := [ 5 , 6 , 7 ] [ Difficulty ] ;
4099: LD_ADDR_VAR 0 4
4103: PUSH
4104: LD_INT 5
4106: PUSH
4107: LD_INT 6
4109: PUSH
4110: LD_INT 7
4112: PUSH
4113: EMPTY
4114: LIST
4115: LIST
4116: LIST
4117: PUSH
4118: LD_OWVAR 67
4122: ARRAY
4123: ST_TO_ADDR
// hc_class := 1 ;
4124: LD_ADDR_OWVAR 28
4128: PUSH
4129: LD_INT 1
4131: ST_TO_ADDR
// hc_sex := sex_male ;
4132: LD_ADDR_OWVAR 27
4136: PUSH
4137: LD_INT 1
4139: ST_TO_ADDR
// hc_skills := [ 6 , 3 , 4 , 2 ] ;
4140: LD_ADDR_OWVAR 31
4144: PUSH
4145: LD_INT 6
4147: PUSH
4148: LD_INT 3
4150: PUSH
4151: LD_INT 4
4153: PUSH
4154: LD_INT 2
4156: PUSH
4157: EMPTY
4158: LIST
4159: LIST
4160: LIST
4161: LIST
4162: ST_TO_ADDR
// hc_name := Jack Collins ;
4163: LD_ADDR_OWVAR 26
4167: PUSH
4168: LD_STRING Jack Collins
4170: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
4171: LD_ADDR_OWVAR 29
4175: PUSH
4176: LD_INT 11
4178: PUSH
4179: LD_INT 11
4181: PUSH
4182: EMPTY
4183: LIST
4184: LIST
4185: ST_TO_ADDR
// hc_gallery :=  ;
4186: LD_ADDR_OWVAR 33
4190: PUSH
4191: LD_STRING 
4193: ST_TO_ADDR
// Collins := CreateHuman ;
4194: LD_ADDR_EXP 20
4198: PUSH
4199: CALL_OW 44
4203: ST_TO_ADDR
// PlaceHumanInUnit ( Collins , us_depot ) ;
4204: LD_EXP 20
4208: PPUSH
4209: LD_INT 50
4211: PPUSH
4212: CALL_OW 52
// hc_name :=  ;
4216: LD_ADDR_OWVAR 26
4220: PUSH
4221: LD_STRING 
4223: ST_TO_ADDR
// if Difficulty > 1 then
4224: LD_OWVAR 67
4228: PUSH
4229: LD_INT 1
4231: GREATER
4232: IFFALSE 4286
// begin bc_type := b_bunker ;
4234: LD_ADDR_OWVAR 42
4238: PUSH
4239: LD_INT 32
4241: ST_TO_ADDR
// bc_level := 5 ;
4242: LD_ADDR_OWVAR 43
4246: PUSH
4247: LD_INT 5
4249: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 40 , 33 , 2 ) ;
4250: LD_INT 40
4252: PPUSH
4253: LD_INT 33
4255: PPUSH
4256: LD_INT 2
4258: PPUSH
4259: CALL_OW 47
// if Difficulty > 2 then
4263: LD_OWVAR 67
4267: PUSH
4268: LD_INT 2
4270: GREATER
4271: IFFALSE 4286
// CreateAndPlaceBuildingXYD ( 41 , 42 , 0 ) ;
4273: LD_INT 41
4275: PPUSH
4276: LD_INT 42
4278: PPUSH
4279: LD_INT 0
4281: PPUSH
4282: CALL_OW 47
// end ; PrepareHuman ( false , 2 , skill ) ;
4286: LD_INT 0
4288: PPUSH
4289: LD_INT 2
4291: PPUSH
4292: LD_VAR 0 4
4296: PPUSH
4297: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , us_depot ) ;
4301: CALL_OW 44
4305: PPUSH
4306: LD_INT 50
4308: PPUSH
4309: CALL_OW 52
// PrepareHuman ( false , 3 , skill ) ;
4313: LD_INT 0
4315: PPUSH
4316: LD_INT 3
4318: PPUSH
4319: LD_VAR 0 4
4323: PPUSH
4324: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , us_fac ) ;
4328: CALL_OW 44
4332: PPUSH
4333: LD_INT 56
4335: PPUSH
4336: CALL_OW 52
// PlaceHumanInUnit ( CreateHuman , us_fac ) ;
4340: CALL_OW 44
4344: PPUSH
4345: LD_INT 56
4347: PPUSH
4348: CALL_OW 52
// PrepareHuman ( false , 4 , skill ) ;
4352: LD_INT 0
4354: PPUSH
4355: LD_INT 4
4357: PPUSH
4358: LD_VAR 0 4
4362: PPUSH
4363: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , us_lab ) ;
4367: CALL_OW 44
4371: PPUSH
4372: LD_INT 63
4374: PPUSH
4375: CALL_OW 52
// PrepareHuman ( false , 1 , skill ) ;
4379: LD_INT 0
4381: PPUSH
4382: LD_INT 1
4384: PPUSH
4385: LD_VAR 0 4
4389: PPUSH
4390: CALL_OW 380
// un := CreateHuman ;
4394: LD_ADDR_VAR 0 3
4398: PUSH
4399: CALL_OW 44
4403: ST_TO_ADDR
// SetDir ( un , 4 ) ;
4404: LD_VAR 0 3
4408: PPUSH
4409: LD_INT 4
4411: PPUSH
4412: CALL_OW 233
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) [ 1 ] ) ;
4416: LD_VAR 0 3
4420: PPUSH
4421: LD_INT 22
4423: PUSH
4424: LD_INT 1
4426: PUSH
4427: EMPTY
4428: LIST
4429: LIST
4430: PUSH
4431: LD_INT 30
4433: PUSH
4434: LD_INT 31
4436: PUSH
4437: EMPTY
4438: LIST
4439: LIST
4440: PUSH
4441: EMPTY
4442: LIST
4443: LIST
4444: PPUSH
4445: CALL_OW 69
4449: PUSH
4450: LD_INT 1
4452: ARRAY
4453: PPUSH
4454: CALL_OW 52
// towers := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) ;
4458: LD_ADDR_VAR 0 5
4462: PUSH
4463: LD_INT 22
4465: PUSH
4466: LD_INT 1
4468: PUSH
4469: EMPTY
4470: LIST
4471: LIST
4472: PUSH
4473: LD_INT 30
4475: PUSH
4476: LD_INT 32
4478: PUSH
4479: EMPTY
4480: LIST
4481: LIST
4482: PUSH
4483: EMPTY
4484: LIST
4485: LIST
4486: PPUSH
4487: CALL_OW 69
4491: ST_TO_ADDR
// for i in towers do
4492: LD_ADDR_VAR 0 2
4496: PUSH
4497: LD_VAR 0 5
4501: PUSH
4502: FOR_IN
4503: IFFALSE 4571
// begin PrepareHuman ( false , 1 , skill ) ;
4505: LD_INT 0
4507: PPUSH
4508: LD_INT 1
4510: PPUSH
4511: LD_VAR 0 4
4515: PPUSH
4516: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
4520: CALL_OW 44
4524: PPUSH
4525: LD_VAR 0 2
4529: PPUSH
4530: CALL_OW 52
// PlaceWeaponTurret ( i , [ us_gatling_gun , us_light_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
4534: LD_VAR 0 2
4538: PPUSH
4539: LD_INT 4
4541: PUSH
4542: LD_INT 3
4544: PUSH
4545: LD_INT 5
4547: PUSH
4548: EMPTY
4549: LIST
4550: LIST
4551: LIST
4552: PUSH
4553: LD_INT 1
4555: PPUSH
4556: LD_INT 3
4558: PPUSH
4559: CALL_OW 12
4563: ARRAY
4564: PPUSH
4565: CALL_OW 431
// end ;
4569: GO 4502
4571: POP
4572: POP
// PrepareHuman ( false , 1 , skill ) ;
4573: LD_INT 0
4575: PPUSH
4576: LD_INT 1
4578: PPUSH
4579: LD_VAR 0 4
4583: PPUSH
4584: CALL_OW 380
// us_patrol := CreateHuman ;
4588: LD_ADDR_EXP 23
4592: PUSH
4593: CALL_OW 44
4597: ST_TO_ADDR
// PlaceUnitXY ( us_patrol , 12 , 5 , false ) ;
4598: LD_EXP 23
4602: PPUSH
4603: LD_INT 12
4605: PPUSH
4606: LD_INT 5
4608: PPUSH
4609: LD_INT 0
4611: PPUSH
4612: CALL_OW 48
// end ;
4616: LD_VAR 0 1
4620: RET
// every 0 0$01 trigger us_count >= [ 3 , 4 , 5 ] [ Difficulty ] do
4621: LD_EXP 24
4625: PUSH
4626: LD_INT 3
4628: PUSH
4629: LD_INT 4
4631: PUSH
4632: LD_INT 5
4634: PUSH
4635: EMPTY
4636: LIST
4637: LIST
4638: LIST
4639: PUSH
4640: LD_OWVAR 67
4644: ARRAY
4645: GREATEREQUAL
4646: IFFALSE 4671
4648: GO 4650
4650: DISABLE
// begin Say ( Collins , DPM_C2 ) ;
4651: LD_EXP 20
4655: PPUSH
4656: LD_STRING DPM_C2
4658: PPUSH
4659: CALL_OW 88
// us_retreat := true ;
4663: LD_ADDR_EXP 22
4667: PUSH
4668: LD_INT 1
4670: ST_TO_ADDR
// end ;
4671: END
// every 10 10$00 trigger not us_alert do var R ;
4672: LD_EXP 21
4676: NOT
4677: IFFALSE 4751
4679: GO 4681
4681: DISABLE
4682: LD_INT 0
4684: PPUSH
// begin uc_side := 1 ;
4685: LD_ADDR_OWVAR 20
4689: PUSH
4690: LD_INT 1
4692: ST_TO_ADDR
// uc_nation := 1 ;
4693: LD_ADDR_OWVAR 21
4697: PUSH
4698: LD_INT 1
4700: ST_TO_ADDR
// PrepareHuman ( false , 1 , 0 ) ;
4701: LD_INT 0
4703: PPUSH
4704: LD_INT 1
4706: PPUSH
4707: LD_INT 0
4709: PPUSH
4710: CALL_OW 380
// R := CreateHuman ;
4714: LD_ADDR_VAR 0 1
4718: PUSH
4719: CALL_OW 44
4723: ST_TO_ADDR
// SayRadio ( R , DPM_R1 ) ;
4724: LD_VAR 0 1
4728: PPUSH
4729: LD_STRING DPM_R1
4731: PPUSH
4732: CALL_OW 94
// Wait ( 0 0$03 ) ;
4736: LD_INT 105
4738: PPUSH
4739: CALL_OW 67
// us_retreat := true ;
4743: LD_ADDR_EXP 22
4747: PUSH
4748: LD_INT 1
4750: ST_TO_ADDR
// end ;
4751: PPOPN 1
4753: END
// every 0 0$01 trigger us_alert do var i ;
4754: LD_EXP 21
4758: IFFALSE 5018
4760: GO 4762
4762: DISABLE
4763: LD_INT 0
4765: PPUSH
// begin Say ( Collins , DPM_C1 ) ;
4766: LD_EXP 20
4770: PPUSH
4771: LD_STRING DPM_C1
4773: PPUSH
4774: CALL_OW 88
// if UnitsInside ( us_fac ) then
4778: LD_INT 56
4780: PPUSH
4781: CALL_OW 313
4785: IFFALSE 4840
// for i in UnitsInside ( us_fac ) do
4787: LD_ADDR_VAR 0 1
4791: PUSH
4792: LD_INT 56
4794: PPUSH
4795: CALL_OW 313
4799: PUSH
4800: FOR_IN
4801: IFFALSE 4838
// begin ComExitBuilding ( i ) ;
4803: LD_VAR 0 1
4807: PPUSH
4808: CALL_OW 122
// AddComEnterUnit ( i , us_arm ) ;
4812: LD_VAR 0 1
4816: PPUSH
4817: LD_INT 69
4819: PPUSH
4820: CALL_OW 180
// AddComChangeProfession ( i , 1 ) ;
4824: LD_VAR 0 1
4828: PPUSH
4829: LD_INT 1
4831: PPUSH
4832: CALL_OW 183
// end ;
4836: GO 4800
4838: POP
4839: POP
// ComExitBuilding ( Collins ) ;
4840: LD_EXP 20
4844: PPUSH
4845: CALL_OW 122
// AddComEnterUnit ( Collins , us_arm ) ;
4849: LD_EXP 20
4853: PPUSH
4854: LD_INT 69
4856: PPUSH
4857: CALL_OW 180
// ComExitBuilding ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) [ 1 ] ) ;
4861: LD_INT 22
4863: PUSH
4864: LD_INT 1
4866: PUSH
4867: EMPTY
4868: LIST
4869: LIST
4870: PUSH
4871: LD_INT 25
4873: PUSH
4874: LD_INT 2
4876: PUSH
4877: EMPTY
4878: LIST
4879: LIST
4880: PUSH
4881: EMPTY
4882: LIST
4883: LIST
4884: PPUSH
4885: CALL_OW 69
4889: PUSH
4890: LD_INT 1
4892: ARRAY
4893: PPUSH
4894: CALL_OW 122
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) [ 1 ] , 67 , 52 ) ;
4898: LD_INT 22
4900: PUSH
4901: LD_INT 1
4903: PUSH
4904: EMPTY
4905: LIST
4906: LIST
4907: PUSH
4908: LD_INT 25
4910: PUSH
4911: LD_INT 2
4913: PUSH
4914: EMPTY
4915: LIST
4916: LIST
4917: PUSH
4918: EMPTY
4919: LIST
4920: LIST
4921: PPUSH
4922: CALL_OW 69
4926: PUSH
4927: LD_INT 1
4929: ARRAY
4930: PPUSH
4931: LD_INT 67
4933: PPUSH
4934: LD_INT 52
4936: PPUSH
4937: CALL_OW 171
// ComExitBuilding ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) [ 1 ] ) ;
4941: LD_INT 22
4943: PUSH
4944: LD_INT 1
4946: PUSH
4947: EMPTY
4948: LIST
4949: LIST
4950: PUSH
4951: LD_INT 25
4953: PUSH
4954: LD_INT 4
4956: PUSH
4957: EMPTY
4958: LIST
4959: LIST
4960: PUSH
4961: EMPTY
4962: LIST
4963: LIST
4964: PPUSH
4965: CALL_OW 69
4969: PUSH
4970: LD_INT 1
4972: ARRAY
4973: PPUSH
4974: CALL_OW 122
// AddComEnterUnit ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) [ 1 ] , us_arm ) ;
4978: LD_INT 22
4980: PUSH
4981: LD_INT 1
4983: PUSH
4984: EMPTY
4985: LIST
4986: LIST
4987: PUSH
4988: LD_INT 25
4990: PUSH
4991: LD_INT 4
4993: PUSH
4994: EMPTY
4995: LIST
4996: LIST
4997: PUSH
4998: EMPTY
4999: LIST
5000: LIST
5001: PPUSH
5002: CALL_OW 69
5006: PUSH
5007: LD_INT 1
5009: ARRAY
5010: PPUSH
5011: LD_INT 69
5013: PPUSH
5014: CALL_OW 180
// end ;
5018: PPOPN 1
5020: END
// every 3 3$00 trigger not us_alert and GetSide ( us_fac ) = 1 do
5021: LD_EXP 21
5025: NOT
5026: PUSH
5027: LD_INT 56
5029: PPUSH
5030: CALL_OW 255
5034: PUSH
5035: LD_INT 1
5037: EQUAL
5038: AND
5039: IFFALSE 5082
5041: GO 5043
5043: DISABLE
// begin AddComConstruct ( us_fac , us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun ) ;
5044: LD_INT 56
5046: PPUSH
5047: LD_INT 2
5049: PPUSH
5050: LD_INT 1
5052: PPUSH
5053: LD_INT 1
5055: PPUSH
5056: LD_INT 4
5058: PPUSH
5059: CALL_OW 185
// AddComConstruct ( us_fac , us_medium_tracked , engine_solar , control_manual , us_double_gun ) ;
5063: LD_INT 56
5065: PPUSH
5066: LD_INT 3
5068: PPUSH
5069: LD_INT 2
5071: PPUSH
5072: LD_INT 1
5074: PPUSH
5075: LD_INT 5
5077: PPUSH
5078: CALL_OW 185
// end ;
5082: END
// every 0 0$01 trigger us_patrol do
5083: LD_EXP 23
5087: IFFALSE 5135
5089: GO 5091
5091: DISABLE
// SetPatrol ( us_patrol , [ 12 , 5 , 56 , 4 , 94 , 34 , 92 , 108 ] ) ;
5092: LD_EXP 23
5096: PPUSH
5097: LD_INT 12
5099: PUSH
5100: LD_INT 5
5102: PUSH
5103: LD_INT 56
5105: PUSH
5106: LD_INT 4
5108: PUSH
5109: LD_INT 94
5111: PUSH
5112: LD_INT 34
5114: PUSH
5115: LD_INT 92
5117: PUSH
5118: LD_INT 108
5120: PUSH
5121: EMPTY
5122: LIST
5123: LIST
5124: LIST
5125: LIST
5126: LIST
5127: LIST
5128: LIST
5129: LIST
5130: PPUSH
5131: CALL 5136 0 2
5135: END
// export function SetPatrol ( un , points ) ; var s , i , turn ; begin
5136: LD_INT 0
5138: PPUSH
5139: PPUSH
5140: PPUSH
5141: PPUSH
// s = 1 ;
5142: LD_ADDR_VAR 0 4
5146: PUSH
5147: LD_INT 1
5149: ST_TO_ADDR
// turn := true ;
5150: LD_ADDR_VAR 0 6
5154: PUSH
5155: LD_INT 1
5157: ST_TO_ADDR
// while ( un and not us_alert ) do
5158: LD_VAR 0 1
5162: PUSH
5163: LD_EXP 21
5167: NOT
5168: AND
5169: IFFALSE 5348
// begin wait ( 35 ) ;
5171: LD_INT 35
5173: PPUSH
5174: CALL_OW 67
// if not HasTask ( un ) then
5178: LD_VAR 0 1
5182: PPUSH
5183: CALL_OW 314
5187: NOT
5188: IFFALSE 5307
// begin ComMoveXY ( un , points [ s ] , points [ s + 1 ] ) ;
5190: LD_VAR 0 1
5194: PPUSH
5195: LD_VAR 0 2
5199: PUSH
5200: LD_VAR 0 4
5204: ARRAY
5205: PPUSH
5206: LD_VAR 0 2
5210: PUSH
5211: LD_VAR 0 4
5215: PUSH
5216: LD_INT 1
5218: PLUS
5219: ARRAY
5220: PPUSH
5221: CALL_OW 111
// if s + 2 > points then
5225: LD_VAR 0 4
5229: PUSH
5230: LD_INT 2
5232: PLUS
5233: PUSH
5234: LD_VAR 0 2
5238: GREATER
5239: IFFALSE 5249
// turn := false ;
5241: LD_ADDR_VAR 0 6
5245: PUSH
5246: LD_INT 0
5248: ST_TO_ADDR
// if s - 2 < 1 then
5249: LD_VAR 0 4
5253: PUSH
5254: LD_INT 2
5256: MINUS
5257: PUSH
5258: LD_INT 1
5260: LESS
5261: IFFALSE 5271
// turn := true ;
5263: LD_ADDR_VAR 0 6
5267: PUSH
5268: LD_INT 1
5270: ST_TO_ADDR
// if turn then
5271: LD_VAR 0 6
5275: IFFALSE 5293
// s := s + 2 else
5277: LD_ADDR_VAR 0 4
5281: PUSH
5282: LD_VAR 0 4
5286: PUSH
5287: LD_INT 2
5289: PLUS
5290: ST_TO_ADDR
5291: GO 5307
// s := s - 2 ;
5293: LD_ADDR_VAR 0 4
5297: PUSH
5298: LD_VAR 0 4
5302: PUSH
5303: LD_INT 2
5305: MINUS
5306: ST_TO_ADDR
// end ; if GetLives ( un ) < 1000 or See ( 3 , un ) then
5307: LD_VAR 0 1
5311: PPUSH
5312: CALL_OW 256
5316: PUSH
5317: LD_INT 1000
5319: LESS
5320: PUSH
5321: LD_INT 3
5323: PPUSH
5324: LD_VAR 0 1
5328: PPUSH
5329: CALL_OW 292
5333: OR
5334: IFFALSE 5346
// begin us_alert := true ;
5336: LD_ADDR_EXP 21
5340: PUSH
5341: LD_INT 1
5343: ST_TO_ADDR
// break ;
5344: GO 5348
// end ; end ;
5346: GO 5158
// ComEnterUnit ( un , us_arm ) ;
5348: LD_VAR 0 1
5352: PPUSH
5353: LD_INT 69
5355: PPUSH
5356: CALL_OW 120
// end ;
5360: LD_VAR 0 3
5364: RET
// every 0 0$01 trigger us_retreat do var i , point ;
5365: LD_EXP 22
5369: IFFALSE 5544
5371: GO 5373
5373: DISABLE
5374: LD_INT 0
5376: PPUSH
5377: PPUSH
// begin point := false ;
5378: LD_ADDR_VAR 0 2
5382: PUSH
5383: LD_INT 0
5385: ST_TO_ADDR
// if FilterUnitsInArea ( zone1 , [ f_side , 3 ] ) = 0 then
5386: LD_INT 5
5388: PPUSH
5389: LD_INT 22
5391: PUSH
5392: LD_INT 3
5394: PUSH
5395: EMPTY
5396: LIST
5397: LIST
5398: PPUSH
5399: CALL_OW 70
5403: PUSH
5404: LD_INT 0
5406: EQUAL
5407: IFFALSE 5419
// point := us_ret1 else
5409: LD_ADDR_VAR 0 2
5413: PUSH
5414: LD_INT 3
5416: ST_TO_ADDR
5417: GO 5460
// if FilterUnitsInArea ( zone1 , [ f_side , 3 ] ) = 0 then
5419: LD_INT 5
5421: PPUSH
5422: LD_INT 22
5424: PUSH
5425: LD_INT 3
5427: PUSH
5428: EMPTY
5429: LIST
5430: LIST
5431: PPUSH
5432: CALL_OW 70
5436: PUSH
5437: LD_INT 0
5439: EQUAL
5440: IFFALSE 5452
// point := us_ret2 else
5442: LD_ADDR_VAR 0 2
5446: PUSH
5447: LD_INT 2
5449: ST_TO_ADDR
5450: GO 5460
// point := us_ret3 ;
5452: LD_ADDR_VAR 0 2
5456: PUSH
5457: LD_INT 4
5459: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
5460: LD_ADDR_VAR 0 1
5464: PUSH
5465: LD_INT 22
5467: PUSH
5468: LD_INT 1
5470: PUSH
5471: EMPTY
5472: LIST
5473: LIST
5474: PUSH
5475: LD_INT 21
5477: PUSH
5478: LD_INT 1
5480: PUSH
5481: EMPTY
5482: LIST
5483: LIST
5484: PUSH
5485: EMPTY
5486: LIST
5487: LIST
5488: PPUSH
5489: CALL_OW 69
5493: PUSH
5494: FOR_IN
5495: IFFALSE 5542
// begin if IsInUnit ( i ) then
5497: LD_VAR 0 1
5501: PPUSH
5502: CALL_OW 310
5506: IFFALSE 5526
// begin ComExitBuilding ( i ) ;
5508: LD_VAR 0 1
5512: PPUSH
5513: CALL_OW 122
// ComExitVehicle ( i ) ;
5517: LD_VAR 0 1
5521: PPUSH
5522: CALL_OW 121
// end ; AddComMoveToArea ( i , point ) ;
5526: LD_VAR 0 1
5530: PPUSH
5531: LD_VAR 0 2
5535: PPUSH
5536: CALL_OW 173
// end ;
5540: GO 5494
5542: POP
5543: POP
// end ;
5544: PPOPN 2
5546: END
// every 10 trigger us_retreat and FilterUnitsInArea ( us_ret1 , [ f_side , 1 ] ) do
5547: LD_EXP 22
5551: PUSH
5552: LD_INT 3
5554: PPUSH
5555: LD_INT 22
5557: PUSH
5558: LD_INT 1
5560: PUSH
5561: EMPTY
5562: LIST
5563: LIST
5564: PPUSH
5565: CALL_OW 70
5569: AND
5570: IFFALSE 5616
5572: GO 5574
5574: DISABLE
// begin enable ;
5575: ENABLE
// RemoveUnit ( FilterUnitsInArea ( us_ret1 , [ f_side , 1 ] ) [ 1 ] ) ;
5576: LD_INT 3
5578: PPUSH
5579: LD_INT 22
5581: PUSH
5582: LD_INT 1
5584: PUSH
5585: EMPTY
5586: LIST
5587: LIST
5588: PPUSH
5589: CALL_OW 70
5593: PUSH
5594: LD_INT 1
5596: ARRAY
5597: PPUSH
5598: CALL_OW 64
// if medal1 then
5602: LD_EXP 3
5606: IFFALSE 5616
// medal1 := false ;
5608: LD_ADDR_EXP 3
5612: PUSH
5613: LD_INT 0
5615: ST_TO_ADDR
// end ;
5616: END
// every 10 trigger us_retreat and FilterUnitsInArea ( us_ret2 , [ f_side , 1 ] ) do
5617: LD_EXP 22
5621: PUSH
5622: LD_INT 2
5624: PPUSH
5625: LD_INT 22
5627: PUSH
5628: LD_INT 1
5630: PUSH
5631: EMPTY
5632: LIST
5633: LIST
5634: PPUSH
5635: CALL_OW 70
5639: AND
5640: IFFALSE 5686
5642: GO 5644
5644: DISABLE
// begin enable ;
5645: ENABLE
// RemoveUnit ( FilterUnitsInArea ( us_ret2 , [ f_side , 1 ] ) [ 1 ] ) ;
5646: LD_INT 2
5648: PPUSH
5649: LD_INT 22
5651: PUSH
5652: LD_INT 1
5654: PUSH
5655: EMPTY
5656: LIST
5657: LIST
5658: PPUSH
5659: CALL_OW 70
5663: PUSH
5664: LD_INT 1
5666: ARRAY
5667: PPUSH
5668: CALL_OW 64
// if medal1 then
5672: LD_EXP 3
5676: IFFALSE 5686
// medal1 := false ;
5678: LD_ADDR_EXP 3
5682: PUSH
5683: LD_INT 0
5685: ST_TO_ADDR
// end ;
5686: END
// every 10 trigger us_retreat and FilterUnitsInArea ( us_ret3 , [ f_side , 1 ] ) do
5687: LD_EXP 22
5691: PUSH
5692: LD_INT 4
5694: PPUSH
5695: LD_INT 22
5697: PUSH
5698: LD_INT 1
5700: PUSH
5701: EMPTY
5702: LIST
5703: LIST
5704: PPUSH
5705: CALL_OW 70
5709: AND
5710: IFFALSE 5756
5712: GO 5714
5714: DISABLE
// begin enable ;
5715: ENABLE
// RemoveUnit ( FilterUnitsInArea ( us_ret3 , [ f_side , 1 ] ) [ 1 ] ) ;
5716: LD_INT 4
5718: PPUSH
5719: LD_INT 22
5721: PUSH
5722: LD_INT 1
5724: PUSH
5725: EMPTY
5726: LIST
5727: LIST
5728: PPUSH
5729: CALL_OW 70
5733: PUSH
5734: LD_INT 1
5736: ARRAY
5737: PPUSH
5738: CALL_OW 64
// if medal1 then
5742: LD_EXP 3
5746: IFFALSE 5756
// medal1 := false ;
5748: LD_ADDR_EXP 3
5752: PUSH
5753: LD_INT 0
5755: ST_TO_ADDR
// end ;
5756: END
// every 0 0$03 trigger FilterAllUnits ( [ f_side , 1 ] ) = 0 do
5757: LD_INT 22
5759: PUSH
5760: LD_INT 1
5762: PUSH
5763: EMPTY
5764: LIST
5765: LIST
5766: PPUSH
5767: CALL_OW 69
5771: PUSH
5772: LD_INT 0
5774: EQUAL
5775: IFFALSE 5788
5777: GO 5779
5779: DISABLE
// us_retreat := false ;
5780: LD_ADDR_EXP 22
5784: PUSH
5785: LD_INT 0
5787: ST_TO_ADDR
5788: END
// export function CounterAttack ; var i , j , un , skill ; begin
5789: LD_INT 0
5791: PPUSH
5792: PPUSH
5793: PPUSH
5794: PPUSH
5795: PPUSH
// uc_side := 1 ;
5796: LD_ADDR_OWVAR 20
5800: PUSH
5801: LD_INT 1
5803: ST_TO_ADDR
// uc_nation := 1 ;
5804: LD_ADDR_OWVAR 21
5808: PUSH
5809: LD_INT 1
5811: ST_TO_ADDR
// skill := [ 4 , 5 , 5 ] [ Difficulty ] ;
5812: LD_ADDR_VAR 0 5
5816: PUSH
5817: LD_INT 4
5819: PUSH
5820: LD_INT 5
5822: PUSH
5823: LD_INT 5
5825: PUSH
5826: EMPTY
5827: LIST
5828: LIST
5829: LIST
5830: PUSH
5831: LD_OWVAR 67
5835: ARRAY
5836: ST_TO_ADDR
// for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
5837: LD_ADDR_VAR 0 2
5841: PUSH
5842: DOUBLE
5843: LD_INT 1
5845: DEC
5846: ST_TO_ADDR
5847: LD_INT 4
5849: PUSH
5850: LD_INT 5
5852: PUSH
5853: LD_INT 6
5855: PUSH
5856: EMPTY
5857: LIST
5858: LIST
5859: LIST
5860: PUSH
5861: LD_OWVAR 67
5865: ARRAY
5866: PUSH
5867: FOR_TO
5868: IFFALSE 6068
// begin vc_chassis := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked ] [ Rand ( 1 , 3 ) ] ;
5870: LD_ADDR_OWVAR 37
5874: PUSH
5875: LD_INT 2
5877: PUSH
5878: LD_INT 3
5880: PUSH
5881: LD_INT 4
5883: PUSH
5884: EMPTY
5885: LIST
5886: LIST
5887: LIST
5888: PUSH
5889: LD_INT 1
5891: PPUSH
5892: LD_INT 3
5894: PPUSH
5895: CALL_OW 12
5899: ARRAY
5900: ST_TO_ADDR
// vc_engine := engine_combustion ;
5901: LD_ADDR_OWVAR 39
5905: PUSH
5906: LD_INT 1
5908: ST_TO_ADDR
// vc_control := control_manual ;
5909: LD_ADDR_OWVAR 38
5913: PUSH
5914: LD_INT 1
5916: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_double_gun , us_light_gun ] [ Rand ( 1 , 3 ) ] ;
5917: LD_ADDR_OWVAR 40
5921: PUSH
5922: LD_INT 4
5924: PUSH
5925: LD_INT 5
5927: PUSH
5928: LD_INT 3
5930: PUSH
5931: EMPTY
5932: LIST
5933: LIST
5934: LIST
5935: PUSH
5936: LD_INT 1
5938: PPUSH
5939: LD_INT 3
5941: PPUSH
5942: CALL_OW 12
5946: ARRAY
5947: ST_TO_ADDR
// vc_fuel_battery := Rand ( 88 , 99 ) ;
5948: LD_ADDR_OWVAR 41
5952: PUSH
5953: LD_INT 88
5955: PPUSH
5956: LD_INT 99
5958: PPUSH
5959: CALL_OW 12
5963: ST_TO_ADDR
// un := CreateVehicle ;
5964: LD_ADDR_VAR 0 4
5968: PUSH
5969: CALL_OW 45
5973: ST_TO_ADDR
// PlaceUnitXY ( un , 64 , 117 , false ) ;
5974: LD_VAR 0 4
5978: PPUSH
5979: LD_INT 64
5981: PPUSH
5982: LD_INT 117
5984: PPUSH
5985: LD_INT 0
5987: PPUSH
5988: CALL_OW 48
// PrepareHuman ( false , 3 , skill ) ;
5992: LD_INT 0
5994: PPUSH
5995: LD_INT 3
5997: PPUSH
5998: LD_VAR 0 5
6002: PPUSH
6003: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
6007: CALL_OW 44
6011: PPUSH
6012: LD_VAR 0 4
6016: PPUSH
6017: CALL_OW 52
// us_force := Insert ( us_force , 1 , un ) ;
6021: LD_ADDR_EXP 12
6025: PUSH
6026: LD_EXP 12
6030: PPUSH
6031: LD_INT 1
6033: PPUSH
6034: LD_VAR 0 4
6038: PPUSH
6039: CALL_OW 2
6043: ST_TO_ADDR
// ComMoveXY ( un , 60 , 109 ) ;
6044: LD_VAR 0 4
6048: PPUSH
6049: LD_INT 60
6051: PPUSH
6052: LD_INT 109
6054: PPUSH
6055: CALL_OW 111
// Wait ( 0 0$02 ) ;
6059: LD_INT 70
6061: PPUSH
6062: CALL_OW 67
// end ;
6066: GO 5867
6068: POP
6069: POP
// RemoveSeeing ( 62 , 113 , 3 ) ;
6070: LD_INT 62
6072: PPUSH
6073: LD_INT 113
6075: PPUSH
6076: LD_INT 3
6078: PPUSH
6079: CALL_OW 331
// while ( FilterAllUnits ( [ f_side , 1 ] ) ) do
6083: LD_INT 22
6085: PUSH
6086: LD_INT 1
6088: PUSH
6089: EMPTY
6090: LIST
6091: LIST
6092: PPUSH
6093: CALL_OW 69
6097: IFFALSE 6298
// begin Wait ( 0 0$01 ) ;
6099: LD_INT 35
6101: PPUSH
6102: CALL_OW 67
// for i = 1 to us_force do
6106: LD_ADDR_VAR 0 2
6110: PUSH
6111: DOUBLE
6112: LD_INT 1
6114: DEC
6115: ST_TO_ADDR
6116: LD_EXP 12
6120: PUSH
6121: FOR_TO
6122: IFFALSE 6157
// ComAttackUnit ( us_force [ i ] , FindTarget ( us_force [ i ] ) ) ;
6124: LD_EXP 12
6128: PUSH
6129: LD_VAR 0 2
6133: ARRAY
6134: PPUSH
6135: LD_EXP 12
6139: PUSH
6140: LD_VAR 0 2
6144: ARRAY
6145: PPUSH
6146: CALL 10591 0 1
6150: PPUSH
6151: CALL_OW 115
6155: GO 6121
6157: POP
6158: POP
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 3 ] , [ f_not , [ f_driving ] ] ] ) then
6159: LD_INT 22
6161: PUSH
6162: LD_INT 1
6164: PUSH
6165: EMPTY
6166: LIST
6167: LIST
6168: PUSH
6169: LD_INT 25
6171: PUSH
6172: LD_INT 3
6174: PUSH
6175: EMPTY
6176: LIST
6177: LIST
6178: PUSH
6179: LD_INT 3
6181: PUSH
6182: LD_INT 55
6184: PUSH
6185: EMPTY
6186: LIST
6187: PUSH
6188: EMPTY
6189: LIST
6190: LIST
6191: PUSH
6192: EMPTY
6193: LIST
6194: LIST
6195: LIST
6196: PPUSH
6197: CALL_OW 69
6201: IFFALSE 6296
// for j in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 3 ] , [ f_not , [ f_driving ] ] ] ) do
6203: LD_ADDR_VAR 0 3
6207: PUSH
6208: LD_INT 22
6210: PUSH
6211: LD_INT 1
6213: PUSH
6214: EMPTY
6215: LIST
6216: LIST
6217: PUSH
6218: LD_INT 25
6220: PUSH
6221: LD_INT 3
6223: PUSH
6224: EMPTY
6225: LIST
6226: LIST
6227: PUSH
6228: LD_INT 3
6230: PUSH
6231: LD_INT 55
6233: PUSH
6234: EMPTY
6235: LIST
6236: PUSH
6237: EMPTY
6238: LIST
6239: LIST
6240: PUSH
6241: EMPTY
6242: LIST
6243: LIST
6244: LIST
6245: PPUSH
6246: CALL_OW 69
6250: PUSH
6251: FOR_IN
6252: IFFALSE 6294
// if not IsInArea ( j , conv_end ) then
6254: LD_VAR 0 3
6258: PPUSH
6259: LD_INT 9
6261: PPUSH
6262: CALL_OW 308
6266: NOT
6267: IFFALSE 6283
// ComMoveToArea ( j , conv_end ) else
6269: LD_VAR 0 3
6273: PPUSH
6274: LD_INT 9
6276: PPUSH
6277: CALL_OW 113
6281: GO 6292
// RemoveUnit ( j ) ;
6283: LD_VAR 0 3
6287: PPUSH
6288: CALL_OW 64
6292: GO 6251
6294: POP
6295: POP
// end ;
6296: GO 6083
// end ; end_of_file
6298: LD_VAR 0 1
6302: RET
// export function PrepareArabian ; begin
6303: LD_INT 0
6305: PPUSH
// RobertFarmer ;
6306: CALL 6327 0 0
// PrepareHovercrafts ;
6310: CALL 7246 0 0
// ar_attacks := true ;
6314: LD_ADDR_EXP 10
6318: PUSH
6319: LD_INT 1
6321: ST_TO_ADDR
// end ;
6322: LD_VAR 0 1
6326: RET
// export Farmer ; export function RobertFarmer ; begin
6327: LD_INT 0
6329: PPUSH
// uc_side := 2 ;
6330: LD_ADDR_OWVAR 20
6334: PUSH
6335: LD_INT 2
6337: ST_TO_ADDR
// uc_nation := 2 ;
6338: LD_ADDR_OWVAR 21
6342: PUSH
6343: LD_INT 2
6345: ST_TO_ADDR
// Farmer := NewCharacter ( Farmer ) ;
6346: LD_ADDR_EXP 25
6350: PUSH
6351: LD_STRING Farmer
6353: PPUSH
6354: CALL_OW 25
6358: ST_TO_ADDR
// SayRadio ( Farmer , DPM_F1 ) ;
6359: LD_EXP 25
6363: PPUSH
6364: LD_STRING DPM_F1
6366: PPUSH
6367: CALL_OW 94
// end ;
6371: LD_VAR 0 1
6375: RET
// export function PrepareAttack ( type ) ; var i , un , veh , skill ; begin
6376: LD_INT 0
6378: PPUSH
6379: PPUSH
6380: PPUSH
6381: PPUSH
6382: PPUSH
// uc_side := 2 ;
6383: LD_ADDR_OWVAR 20
6387: PUSH
6388: LD_INT 2
6390: ST_TO_ADDR
// uc_nation := 2 ;
6391: LD_ADDR_OWVAR 21
6395: PUSH
6396: LD_INT 2
6398: ST_TO_ADDR
// skill := [ 4 , 6 , 7 ] [ Difficulty ] ;
6399: LD_ADDR_VAR 0 6
6403: PUSH
6404: LD_INT 4
6406: PUSH
6407: LD_INT 6
6409: PUSH
6410: LD_INT 7
6412: PUSH
6413: EMPTY
6414: LIST
6415: LIST
6416: LIST
6417: PUSH
6418: LD_OWVAR 67
6422: ARRAY
6423: ST_TO_ADDR
// Randomize ;
6424: CALL_OW 10
// case type of 1 :
6428: LD_VAR 0 1
6432: PUSH
6433: LD_INT 1
6435: DOUBLE
6436: EQUAL
6437: IFTRUE 6441
6439: GO 6563
6441: POP
// begin for i = 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
6442: LD_ADDR_VAR 0 3
6446: PUSH
6447: DOUBLE
6448: LD_INT 1
6450: DEC
6451: ST_TO_ADDR
6452: LD_INT 3
6454: PUSH
6455: LD_INT 4
6457: PUSH
6458: LD_INT 5
6460: PUSH
6461: EMPTY
6462: LIST
6463: LIST
6464: LIST
6465: PUSH
6466: LD_OWVAR 67
6470: ARRAY
6471: PUSH
6472: FOR_TO
6473: IFFALSE 6559
// begin PrepareHuman ( false , [ class_soldier , class_soldier , class_mortar ] [ Rand ( 1 , 3 ) ] , skill ) ;
6475: LD_INT 0
6477: PPUSH
6478: LD_INT 1
6480: PUSH
6481: LD_INT 1
6483: PUSH
6484: LD_INT 8
6486: PUSH
6487: EMPTY
6488: LIST
6489: LIST
6490: LIST
6491: PUSH
6492: LD_INT 1
6494: PPUSH
6495: LD_INT 3
6497: PPUSH
6498: CALL_OW 12
6502: ARRAY
6503: PPUSH
6504: LD_VAR 0 6
6508: PPUSH
6509: CALL_OW 380
// un := CreateHuman ;
6513: LD_ADDR_VAR 0 4
6517: PUSH
6518: CALL_OW 44
6522: ST_TO_ADDR
// PlaceUnitArea ( un , ar3 , false ) ;
6523: LD_VAR 0 4
6527: PPUSH
6528: LD_INT 18
6530: PPUSH
6531: LD_INT 0
6533: PPUSH
6534: CALL_OW 49
// ComMoveToArea ( un , spot3 ) ;
6538: LD_VAR 0 4
6542: PPUSH
6543: LD_INT 20
6545: PPUSH
6546: CALL_OW 113
// Wait ( 0 0$01 ) ;
6550: LD_INT 35
6552: PPUSH
6553: CALL_OW 67
// end ;
6557: GO 6472
6559: POP
6560: POP
// end ; 2 :
6561: GO 7241
6563: LD_INT 2
6565: DOUBLE
6566: EQUAL
6567: IFTRUE 6571
6569: GO 6865
6571: POP
// begin for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
6572: LD_ADDR_VAR 0 3
6576: PUSH
6577: DOUBLE
6578: LD_INT 1
6580: DEC
6581: ST_TO_ADDR
6582: LD_INT 4
6584: PUSH
6585: LD_INT 5
6587: PUSH
6588: LD_INT 6
6590: PUSH
6591: EMPTY
6592: LIST
6593: LIST
6594: LIST
6595: PUSH
6596: LD_OWVAR 67
6600: ARRAY
6601: PUSH
6602: FOR_TO
6603: IFFALSE 6666
// begin PrepareHuman ( false , class_soldier , skill ) ;
6605: LD_INT 0
6607: PPUSH
6608: LD_INT 1
6610: PPUSH
6611: LD_VAR 0 6
6615: PPUSH
6616: CALL_OW 380
// un := CreateHuman ;
6620: LD_ADDR_VAR 0 4
6624: PUSH
6625: CALL_OW 44
6629: ST_TO_ADDR
// PlaceUnitArea ( un , ar2 , false ) ;
6630: LD_VAR 0 4
6634: PPUSH
6635: LD_INT 17
6637: PPUSH
6638: LD_INT 0
6640: PPUSH
6641: CALL_OW 49
// ComMoveToArea ( un , spot2 ) ;
6645: LD_VAR 0 4
6649: PPUSH
6650: LD_INT 19
6652: PPUSH
6653: CALL_OW 113
// Wait ( 0 0$01 ) ;
6657: LD_INT 35
6659: PPUSH
6660: CALL_OW 67
// end ;
6664: GO 6602
6666: POP
6667: POP
// for i = 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
6668: LD_ADDR_VAR 0 3
6672: PUSH
6673: DOUBLE
6674: LD_INT 1
6676: DEC
6677: ST_TO_ADDR
6678: LD_INT 2
6680: PUSH
6681: LD_INT 3
6683: PUSH
6684: LD_INT 4
6686: PUSH
6687: EMPTY
6688: LIST
6689: LIST
6690: LIST
6691: PUSH
6692: LD_OWVAR 67
6696: ARRAY
6697: PUSH
6698: FOR_TO
6699: IFFALSE 6861
// begin vc_chassis := [ ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 2 ) ] ;
6701: LD_ADDR_OWVAR 37
6705: PUSH
6706: LD_INT 13
6708: PUSH
6709: LD_INT 14
6711: PUSH
6712: EMPTY
6713: LIST
6714: LIST
6715: PUSH
6716: LD_INT 1
6718: PPUSH
6719: LD_INT 2
6721: PPUSH
6722: CALL_OW 12
6726: ARRAY
6727: ST_TO_ADDR
// vc_engine := engine_combustion ;
6728: LD_ADDR_OWVAR 39
6732: PUSH
6733: LD_INT 1
6735: ST_TO_ADDR
// vc_control := control_manual ;
6736: LD_ADDR_OWVAR 38
6740: PUSH
6741: LD_INT 1
6743: ST_TO_ADDR
// vc_weapon := [ ar_double_machine_gun , ar_light_gun , ar_gun , ar_rocket_launcher , ar_gatling_gun ] [ Rand ( 1 , 5 ) ] ;
6744: LD_ADDR_OWVAR 40
6748: PUSH
6749: LD_INT 24
6751: PUSH
6752: LD_INT 23
6754: PUSH
6755: LD_INT 27
6757: PUSH
6758: LD_INT 28
6760: PUSH
6761: LD_INT 25
6763: PUSH
6764: EMPTY
6765: LIST
6766: LIST
6767: LIST
6768: LIST
6769: LIST
6770: PUSH
6771: LD_INT 1
6773: PPUSH
6774: LD_INT 5
6776: PPUSH
6777: CALL_OW 12
6781: ARRAY
6782: ST_TO_ADDR
// veh := CreateVehicle ;
6783: LD_ADDR_VAR 0 5
6787: PUSH
6788: CALL_OW 45
6792: ST_TO_ADDR
// PlaceUnitArea ( veh , ar2 , false ) ;
6793: LD_VAR 0 5
6797: PPUSH
6798: LD_INT 17
6800: PPUSH
6801: LD_INT 0
6803: PPUSH
6804: CALL_OW 49
// PrepareHuman ( false , 1 , skill ) ;
6808: LD_INT 0
6810: PPUSH
6811: LD_INT 1
6813: PPUSH
6814: LD_VAR 0 6
6818: PPUSH
6819: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
6823: CALL_OW 44
6827: PPUSH
6828: LD_VAR 0 5
6832: PPUSH
6833: CALL_OW 52
// ComMoveXY ( veh , 89 , 40 ) ;
6837: LD_VAR 0 5
6841: PPUSH
6842: LD_INT 89
6844: PPUSH
6845: LD_INT 40
6847: PPUSH
6848: CALL_OW 111
// Wait ( 0 0$02 ) ;
6852: LD_INT 70
6854: PPUSH
6855: CALL_OW 67
// end ;
6859: GO 6698
6861: POP
6862: POP
// end ; 3 :
6863: GO 7241
6865: LD_INT 3
6867: DOUBLE
6868: EQUAL
6869: IFTRUE 6873
6871: GO 7240
6873: POP
// begin for i = 1 to [ 3 , 4 , 5 ] [ Difficulty ] + ( tick div 15 15$00 ) do
6874: LD_ADDR_VAR 0 3
6878: PUSH
6879: DOUBLE
6880: LD_INT 1
6882: DEC
6883: ST_TO_ADDR
6884: LD_INT 3
6886: PUSH
6887: LD_INT 4
6889: PUSH
6890: LD_INT 5
6892: PUSH
6893: EMPTY
6894: LIST
6895: LIST
6896: LIST
6897: PUSH
6898: LD_OWVAR 67
6902: ARRAY
6903: PUSH
6904: LD_OWVAR 1
6908: PUSH
6909: LD_INT 31500
6911: DIV
6912: PLUS
6913: PUSH
6914: FOR_TO
6915: IFFALSE 7029
// begin PrepareHuman ( false , [ class_soldier , class_mortar ] [ Rand ( 1 , 2 ) ] , skill ) ;
6917: LD_INT 0
6919: PPUSH
6920: LD_INT 1
6922: PUSH
6923: LD_INT 8
6925: PUSH
6926: EMPTY
6927: LIST
6928: LIST
6929: PUSH
6930: LD_INT 1
6932: PPUSH
6933: LD_INT 2
6935: PPUSH
6936: CALL_OW 12
6940: ARRAY
6941: PPUSH
6942: LD_VAR 0 6
6946: PPUSH
6947: CALL_OW 380
// un := CreateHuman ;
6951: LD_ADDR_VAR 0 4
6955: PUSH
6956: CALL_OW 44
6960: ST_TO_ADDR
// PlaceUnitArea ( un , ar2 , false ) ;
6961: LD_VAR 0 4
6965: PPUSH
6966: LD_INT 17
6968: PPUSH
6969: LD_INT 0
6971: PPUSH
6972: CALL_OW 49
// ar_force := Replace ( ar_force , ar_force + 1 , veh ) ;
6976: LD_ADDR_EXP 11
6980: PUSH
6981: LD_EXP 11
6985: PPUSH
6986: LD_EXP 11
6990: PUSH
6991: LD_INT 1
6993: PLUS
6994: PPUSH
6995: LD_VAR 0 5
6999: PPUSH
7000: CALL_OW 1
7004: ST_TO_ADDR
// ComMoveXY ( un , 17 , 9 ) ;
7005: LD_VAR 0 4
7009: PPUSH
7010: LD_INT 17
7012: PPUSH
7013: LD_INT 9
7015: PPUSH
7016: CALL_OW 111
// Wait ( 0 0$01 ) ;
7020: LD_INT 35
7022: PPUSH
7023: CALL_OW 67
// end ;
7027: GO 6914
7029: POP
7030: POP
// for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
7031: LD_ADDR_VAR 0 3
7035: PUSH
7036: DOUBLE
7037: LD_INT 1
7039: DEC
7040: ST_TO_ADDR
7041: LD_INT 4
7043: PUSH
7044: LD_INT 5
7046: PUSH
7047: LD_INT 6
7049: PUSH
7050: EMPTY
7051: LIST
7052: LIST
7053: LIST
7054: PUSH
7055: LD_OWVAR 67
7059: ARRAY
7060: PUSH
7061: FOR_TO
7062: IFFALSE 7236
// begin vc_chassis := ar_half_tracked ;
7064: LD_ADDR_OWVAR 37
7068: PUSH
7069: LD_INT 14
7071: ST_TO_ADDR
// vc_engine := engine_combustion ;
7072: LD_ADDR_OWVAR 39
7076: PUSH
7077: LD_INT 1
7079: ST_TO_ADDR
// vc_control := control_manual ;
7080: LD_ADDR_OWVAR 38
7084: PUSH
7085: LD_INT 1
7087: ST_TO_ADDR
// vc_weapon := [ ar_gatling_gun , ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_mortar ] [ Rand ( 1 , 5 ) ] ;
7088: LD_ADDR_OWVAR 40
7092: PUSH
7093: LD_INT 25
7095: PUSH
7096: LD_INT 27
7098: PUSH
7099: LD_INT 28
7101: PUSH
7102: LD_INT 26
7104: PUSH
7105: LD_EXP 31
7109: PUSH
7110: EMPTY
7111: LIST
7112: LIST
7113: LIST
7114: LIST
7115: LIST
7116: PUSH
7117: LD_INT 1
7119: PPUSH
7120: LD_INT 5
7122: PPUSH
7123: CALL_OW 12
7127: ARRAY
7128: ST_TO_ADDR
// veh := CreateVehicle ;
7129: LD_ADDR_VAR 0 5
7133: PUSH
7134: CALL_OW 45
7138: ST_TO_ADDR
// PlaceUnitArea ( veh , ar1 , false ) ;
7139: LD_VAR 0 5
7143: PPUSH
7144: LD_INT 16
7146: PPUSH
7147: LD_INT 0
7149: PPUSH
7150: CALL_OW 49
// PrepareHuman ( false , 3 , skill ) ;
7154: LD_INT 0
7156: PPUSH
7157: LD_INT 3
7159: PPUSH
7160: LD_VAR 0 6
7164: PPUSH
7165: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
7169: CALL_OW 44
7173: PPUSH
7174: LD_VAR 0 5
7178: PPUSH
7179: CALL_OW 52
// ar_force := Replace ( ar_force , ar_force + 1 , veh ) ;
7183: LD_ADDR_EXP 11
7187: PUSH
7188: LD_EXP 11
7192: PPUSH
7193: LD_EXP 11
7197: PUSH
7198: LD_INT 1
7200: PLUS
7201: PPUSH
7202: LD_VAR 0 5
7206: PPUSH
7207: CALL_OW 1
7211: ST_TO_ADDR
// ComMoveXY ( veh , 125 , 31 ) ;
7212: LD_VAR 0 5
7216: PPUSH
7217: LD_INT 125
7219: PPUSH
7220: LD_INT 31
7222: PPUSH
7223: CALL_OW 111
// Wait ( 0 0$02 ) ;
7227: LD_INT 70
7229: PPUSH
7230: CALL_OW 67
// end ;
7234: GO 7061
7236: POP
7237: POP
// end ; end ;
7238: GO 7241
7240: POP
// end ;
7241: LD_VAR 0 2
7245: RET
// export function PrepareHovercrafts ; var i , un , areas , skill ; begin
7246: LD_INT 0
7248: PPUSH
7249: PPUSH
7250: PPUSH
7251: PPUSH
7252: PPUSH
// areas := [ river1 , river2 ] ;
7253: LD_ADDR_VAR 0 4
7257: PUSH
7258: LD_INT 14
7260: PUSH
7261: LD_INT 15
7263: PUSH
7264: EMPTY
7265: LIST
7266: LIST
7267: ST_TO_ADDR
// skill := [ 5 , 6 , 7 ] [ Difficulty ] ;
7268: LD_ADDR_VAR 0 5
7272: PUSH
7273: LD_INT 5
7275: PUSH
7276: LD_INT 6
7278: PUSH
7279: LD_INT 7
7281: PUSH
7282: EMPTY
7283: LIST
7284: LIST
7285: LIST
7286: PUSH
7287: LD_OWVAR 67
7291: ARRAY
7292: ST_TO_ADDR
// uc_side := 2 ;
7293: LD_ADDR_OWVAR 20
7297: PUSH
7298: LD_INT 2
7300: ST_TO_ADDR
// uc_nation := 2 ;
7301: LD_ADDR_OWVAR 21
7305: PUSH
7306: LD_INT 2
7308: ST_TO_ADDR
// hc_name :=  ;
7309: LD_ADDR_OWVAR 26
7313: PUSH
7314: LD_STRING 
7316: ST_TO_ADDR
// hc_gallery :=  ;
7317: LD_ADDR_OWVAR 33
7321: PUSH
7322: LD_STRING 
7324: ST_TO_ADDR
// for i = 1 to [ 1 , 2 , 2 ] [ Difficulty ] do
7325: LD_ADDR_VAR 0 2
7329: PUSH
7330: DOUBLE
7331: LD_INT 1
7333: DEC
7334: ST_TO_ADDR
7335: LD_INT 1
7337: PUSH
7338: LD_INT 2
7340: PUSH
7341: LD_INT 2
7343: PUSH
7344: EMPTY
7345: LIST
7346: LIST
7347: LIST
7348: PUSH
7349: LD_OWVAR 67
7353: ARRAY
7354: PUSH
7355: FOR_TO
7356: IFFALSE 7492
// begin vc_chassis := ar_hovercraft ;
7358: LD_ADDR_OWVAR 37
7362: PUSH
7363: LD_INT 11
7365: ST_TO_ADDR
// vc_engine := engine_solar ;
7366: LD_ADDR_OWVAR 39
7370: PUSH
7371: LD_INT 2
7373: ST_TO_ADDR
// vc_control := control_manual ;
7374: LD_ADDR_OWVAR 38
7378: PUSH
7379: LD_INT 1
7381: ST_TO_ADDR
// vc_weapon := ar_double_machine_gun ;
7382: LD_ADDR_OWVAR 40
7386: PUSH
7387: LD_INT 24
7389: ST_TO_ADDR
// vc_fuel_battery := 100 ;
7390: LD_ADDR_OWVAR 41
7394: PUSH
7395: LD_INT 100
7397: ST_TO_ADDR
// un := CreateVehicle ;
7398: LD_ADDR_VAR 0 3
7402: PUSH
7403: CALL_OW 45
7407: ST_TO_ADDR
// PlaceUnitXYR ( un , 121 , 69 , 4 , false ) ;
7408: LD_VAR 0 3
7412: PPUSH
7413: LD_INT 121
7415: PPUSH
7416: LD_INT 69
7418: PPUSH
7419: LD_INT 4
7421: PPUSH
7422: LD_INT 0
7424: PPUSH
7425: CALL_OW 50
// PrepareHuman ( false , 3 , skill ) ;
7429: LD_INT 0
7431: PPUSH
7432: LD_INT 3
7434: PPUSH
7435: LD_VAR 0 5
7439: PPUSH
7440: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
7444: CALL_OW 44
7448: PPUSH
7449: LD_VAR 0 3
7453: PPUSH
7454: CALL_OW 52
// riv := Insert ( riv , 1 , [ un , i ] ) ;
7458: LD_ADDR_EXP 9
7462: PUSH
7463: LD_EXP 9
7467: PPUSH
7468: LD_INT 1
7470: PPUSH
7471: LD_VAR 0 3
7475: PUSH
7476: LD_VAR 0 2
7480: PUSH
7481: EMPTY
7482: LIST
7483: LIST
7484: PPUSH
7485: CALL_OW 2
7489: ST_TO_ADDR
// end ;
7490: GO 7355
7492: POP
7493: POP
// end ;
7494: LD_VAR 0 1
7498: RET
// every 0 0$01 trigger riv do var i , c ;
7499: LD_EXP 9
7503: IFFALSE 7938
7505: GO 7507
7507: DISABLE
7508: LD_INT 0
7510: PPUSH
7511: PPUSH
// begin enable ;
7512: ENABLE
// for i = riv downto 1 do
7513: LD_ADDR_VAR 0 1
7517: PUSH
7518: DOUBLE
7519: LD_EXP 9
7523: INC
7524: ST_TO_ADDR
7525: LD_INT 1
7527: PUSH
7528: FOR_DOWNTO
7529: IFFALSE 7936
// begin if not riv [ i ] [ 1 ] then
7531: LD_EXP 9
7535: PUSH
7536: LD_VAR 0 1
7540: ARRAY
7541: PUSH
7542: LD_INT 1
7544: ARRAY
7545: NOT
7546: IFFALSE 7568
// begin riv := Delete ( riv , 1 ) ;
7548: LD_ADDR_EXP 9
7552: PUSH
7553: LD_EXP 9
7557: PPUSH
7558: LD_INT 1
7560: PPUSH
7561: CALL_OW 3
7565: ST_TO_ADDR
// break ;
7566: GO 7936
// end ; if not HasTask ( riv [ i ] [ 1 ] ) then
7568: LD_EXP 9
7572: PUSH
7573: LD_VAR 0 1
7577: ARRAY
7578: PUSH
7579: LD_INT 1
7581: ARRAY
7582: PPUSH
7583: CALL_OW 314
7587: NOT
7588: IFFALSE 7656
// begin if riv [ i ] [ 2 ] = 1 then
7590: LD_EXP 9
7594: PUSH
7595: LD_VAR 0 1
7599: ARRAY
7600: PUSH
7601: LD_INT 2
7603: ARRAY
7604: PUSH
7605: LD_INT 1
7607: EQUAL
7608: IFFALSE 7620
// c := 2 else
7610: LD_ADDR_VAR 0 2
7614: PUSH
7615: LD_INT 2
7617: ST_TO_ADDR
7618: GO 7628
// c := 1 ;
7620: LD_ADDR_VAR 0 2
7624: PUSH
7625: LD_INT 1
7627: ST_TO_ADDR
// riv := Replace2 ( riv , i , 2 , c ) ;
7628: LD_ADDR_EXP 9
7632: PUSH
7633: LD_EXP 9
7637: PPUSH
7638: LD_VAR 0 1
7642: PPUSH
7643: LD_INT 2
7645: PPUSH
7646: LD_VAR 0 2
7650: PPUSH
7651: CALL 10334 0 4
7655: ST_TO_ADDR
// end ; if not IsInArea ( riv [ i ] [ 1 ] , [ river1 , river2 ] [ riv [ i ] [ 2 ] ] ) then
7656: LD_EXP 9
7660: PUSH
7661: LD_VAR 0 1
7665: ARRAY
7666: PUSH
7667: LD_INT 1
7669: ARRAY
7670: PPUSH
7671: LD_INT 14
7673: PUSH
7674: LD_INT 15
7676: PUSH
7677: EMPTY
7678: LIST
7679: LIST
7680: PUSH
7681: LD_EXP 9
7685: PUSH
7686: LD_VAR 0 1
7690: ARRAY
7691: PUSH
7692: LD_INT 2
7694: ARRAY
7695: ARRAY
7696: PPUSH
7697: CALL_OW 308
7701: NOT
7702: IFFALSE 7934
// begin if GetFuel ( riv [ i ] [ 1 ] ) < 50 then
7704: LD_EXP 9
7708: PUSH
7709: LD_VAR 0 1
7713: ARRAY
7714: PUSH
7715: LD_INT 1
7717: ARRAY
7718: PPUSH
7719: CALL_OW 261
7723: PUSH
7724: LD_INT 50
7726: LESS
7727: IFFALSE 7751
// SetFuel ( riv [ i ] [ 1 ] , 67 ) ;
7729: LD_EXP 9
7733: PUSH
7734: LD_VAR 0 1
7738: ARRAY
7739: PUSH
7740: LD_INT 1
7742: ARRAY
7743: PPUSH
7744: LD_INT 67
7746: PPUSH
7747: CALL_OW 240
// if GetDistUnits ( riv [ i ] [ 1 ] , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 3 ] ) , riv [ i ] [ 1 ] ) ) < 9 then
7751: LD_EXP 9
7755: PUSH
7756: LD_VAR 0 1
7760: ARRAY
7761: PUSH
7762: LD_INT 1
7764: ARRAY
7765: PPUSH
7766: LD_INT 22
7768: PUSH
7769: LD_INT 3
7771: PUSH
7772: EMPTY
7773: LIST
7774: LIST
7775: PPUSH
7776: CALL_OW 69
7780: PPUSH
7781: LD_EXP 9
7785: PUSH
7786: LD_VAR 0 1
7790: ARRAY
7791: PUSH
7792: LD_INT 1
7794: ARRAY
7795: PPUSH
7796: CALL_OW 74
7800: PPUSH
7801: CALL_OW 296
7805: PUSH
7806: LD_INT 9
7808: LESS
7809: IFFALSE 7867
// ComAttackUnit ( riv [ i ] [ 1 ] , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 3 ] ) , riv [ i ] [ 1 ] ) ) else
7811: LD_EXP 9
7815: PUSH
7816: LD_VAR 0 1
7820: ARRAY
7821: PUSH
7822: LD_INT 1
7824: ARRAY
7825: PPUSH
7826: LD_INT 22
7828: PUSH
7829: LD_INT 3
7831: PUSH
7832: EMPTY
7833: LIST
7834: LIST
7835: PPUSH
7836: CALL_OW 69
7840: PPUSH
7841: LD_EXP 9
7845: PUSH
7846: LD_VAR 0 1
7850: ARRAY
7851: PUSH
7852: LD_INT 1
7854: ARRAY
7855: PPUSH
7856: CALL_OW 74
7860: PPUSH
7861: CALL_OW 115
7865: GO 7934
// begin ComMoveToArea ( riv [ i ] [ 1 ] , [ river1 , river2 ] [ riv [ i ] [ 2 ] ] ) ;
7867: LD_EXP 9
7871: PUSH
7872: LD_VAR 0 1
7876: ARRAY
7877: PUSH
7878: LD_INT 1
7880: ARRAY
7881: PPUSH
7882: LD_INT 14
7884: PUSH
7885: LD_INT 15
7887: PUSH
7888: EMPTY
7889: LIST
7890: LIST
7891: PUSH
7892: LD_EXP 9
7896: PUSH
7897: LD_VAR 0 1
7901: ARRAY
7902: PUSH
7903: LD_INT 2
7905: ARRAY
7906: ARRAY
7907: PPUSH
7908: CALL_OW 113
// AddComWait ( riv [ i ] [ 1 ] , 0 0$10 ) ;
7912: LD_EXP 9
7916: PUSH
7917: LD_VAR 0 1
7921: ARRAY
7922: PUSH
7923: LD_INT 1
7925: ARRAY
7926: PPUSH
7927: LD_INT 350
7929: PPUSH
7930: CALL_OW 202
// end ; end ; end ;
7934: GO 7528
7936: POP
7937: POP
// end ;
7938: PPOPN 2
7940: END
// every 10 10$00 trigger convoy_start do var i , un ;
7941: LD_EXP 7
7945: IFFALSE 8066
7947: GO 7949
7949: DISABLE
7950: LD_INT 0
7952: PPUSH
7953: PPUSH
// begin enable ;
7954: ENABLE
// for i = 1 to 2 do
7955: LD_ADDR_VAR 0 1
7959: PUSH
7960: DOUBLE
7961: LD_INT 1
7963: DEC
7964: ST_TO_ADDR
7965: LD_INT 2
7967: PUSH
7968: FOR_TO
7969: IFFALSE 8064
// begin uc_side := 2 ;
7971: LD_ADDR_OWVAR 20
7975: PUSH
7976: LD_INT 2
7978: ST_TO_ADDR
// uc_nation := 2 ;
7979: LD_ADDR_OWVAR 21
7983: PUSH
7984: LD_INT 2
7986: ST_TO_ADDR
// PrepareHuman ( false , 1 , 4 ) ;
7987: LD_INT 0
7989: PPUSH
7990: LD_INT 1
7992: PPUSH
7993: LD_INT 4
7995: PPUSH
7996: CALL_OW 380
// un := CreateHuman ;
8000: LD_ADDR_VAR 0 2
8004: PUSH
8005: CALL_OW 44
8009: ST_TO_ADDR
// PlaceUnitXY ( un , 10 , 2 , false ) ;
8010: LD_VAR 0 2
8014: PPUSH
8015: LD_INT 10
8017: PPUSH
8018: LD_INT 2
8020: PPUSH
8021: LD_INT 0
8023: PPUSH
8024: CALL_OW 48
// ComMoveXY ( un , 24 , 36 ) ;
8028: LD_VAR 0 2
8032: PPUSH
8033: LD_INT 24
8035: PPUSH
8036: LD_INT 36
8038: PPUSH
8039: CALL_OW 111
// AddComMoveToArea ( un , conv_end ) ;
8043: LD_VAR 0 2
8047: PPUSH
8048: LD_INT 9
8050: PPUSH
8051: CALL_OW 173
// Wait ( 0 0$02 ) ;
8055: LD_INT 70
8057: PPUSH
8058: CALL_OW 67
// end ;
8062: GO 7968
8064: POP
8065: POP
// end ;
8066: PPOPN 2
8068: END
// every 0 0$01 trigger FilterAllUnits ( [ f_side , 2 ] ) do var i , rest ;
8069: LD_INT 22
8071: PUSH
8072: LD_INT 2
8074: PUSH
8075: EMPTY
8076: LIST
8077: LIST
8078: PPUSH
8079: CALL_OW 69
8083: IFFALSE 8395
8085: GO 8087
8087: DISABLE
8088: LD_INT 0
8090: PPUSH
8091: PPUSH
// begin enable ;
8092: ENABLE
// rest := FilterAllUnits ( [ f_side , 2 ] ) diff ar_force ;
8093: LD_ADDR_VAR 0 2
8097: PUSH
8098: LD_INT 22
8100: PUSH
8101: LD_INT 2
8103: PUSH
8104: EMPTY
8105: LIST
8106: LIST
8107: PPUSH
8108: CALL_OW 69
8112: PUSH
8113: LD_EXP 11
8117: DIFF
8118: ST_TO_ADDR
// if rest then
8119: LD_VAR 0 2
8123: IFFALSE 8195
// for i in rest do
8125: LD_ADDR_VAR 0 1
8129: PUSH
8130: LD_VAR 0 2
8134: PUSH
8135: FOR_IN
8136: IFFALSE 8193
// if GetClass ( i ) = 3 then
8138: LD_VAR 0 1
8142: PPUSH
8143: CALL_OW 257
8147: PUSH
8148: LD_INT 3
8150: EQUAL
8151: IFFALSE 8191
// begin if not IsInArea ( i , ar2 ) then
8153: LD_VAR 0 1
8157: PPUSH
8158: LD_INT 17
8160: PPUSH
8161: CALL_OW 308
8165: NOT
8166: IFFALSE 8182
// ComMoveToArea ( i , ar2 ) else
8168: LD_VAR 0 1
8172: PPUSH
8173: LD_INT 17
8175: PPUSH
8176: CALL_OW 113
8180: GO 8191
// RemoveUnit ( i ) ;
8182: LD_VAR 0 1
8186: PPUSH
8187: CALL_OW 64
// end ;
8191: GO 8135
8193: POP
8194: POP
// if ar_force then
8195: LD_EXP 11
8199: IFFALSE 8395
// begin if ar_force > 15 then
8201: LD_EXP 11
8205: PUSH
8206: LD_INT 15
8208: GREATER
8209: IFFALSE 8226
// ComAgressiveMove ( ar_force , 58 , 51 ) ;
8211: LD_EXP 11
8215: PPUSH
8216: LD_INT 58
8218: PPUSH
8219: LD_INT 51
8221: PPUSH
8222: CALL_OW 114
// for i in ar_force do
8226: LD_ADDR_VAR 0 1
8230: PUSH
8231: LD_EXP 11
8235: PUSH
8236: FOR_IN
8237: IFFALSE 8393
// begin if GetClass ( i ) = class_soldier then
8239: LD_VAR 0 1
8243: PPUSH
8244: CALL_OW 257
8248: PUSH
8249: LD_INT 1
8251: EQUAL
8252: IFFALSE 8344
// if FindTarget ( i ) in FilterAllUnits ( [ f_type , unit_building ] ) then
8254: LD_VAR 0 1
8258: PPUSH
8259: CALL 10591 0 1
8263: PUSH
8264: LD_INT 21
8266: PUSH
8267: LD_INT 3
8269: PUSH
8270: EMPTY
8271: LIST
8272: LIST
8273: PPUSH
8274: CALL_OW 69
8278: IN
8279: IFFALSE 8325
// ComPlaceDelayedCharge ( i , GetX ( FindTarget ( i ) ) , GetY ( FindTarget ( i ) ) , 0 ) else
8281: LD_VAR 0 1
8285: PPUSH
8286: LD_VAR 0 1
8290: PPUSH
8291: CALL 10591 0 1
8295: PPUSH
8296: CALL_OW 250
8300: PPUSH
8301: LD_VAR 0 1
8305: PPUSH
8306: CALL 10591 0 1
8310: PPUSH
8311: CALL_OW 251
8315: PPUSH
8316: LD_INT 0
8318: PPUSH
8319: CALL_OW 132
8323: GO 8344
// ComAttackUnit ( i , FindTarget ( i ) ) ;
8325: LD_VAR 0 1
8329: PPUSH
8330: LD_VAR 0 1
8334: PPUSH
8335: CALL 10591 0 1
8339: PPUSH
8340: CALL_OW 115
// if not GetClass ( i ) = 1 and not HasTask ( i ) then
8344: LD_VAR 0 1
8348: PPUSH
8349: CALL_OW 257
8353: PUSH
8354: LD_INT 1
8356: EQUAL
8357: NOT
8358: PUSH
8359: LD_VAR 0 1
8363: PPUSH
8364: CALL_OW 314
8368: NOT
8369: AND
8370: IFFALSE 8391
// ComAttackUnit ( i , FindTarget ( i ) ) ;
8372: LD_VAR 0 1
8376: PPUSH
8377: LD_VAR 0 1
8381: PPUSH
8382: CALL 10591 0 1
8386: PPUSH
8387: CALL_OW 115
// end ;
8391: GO 8236
8393: POP
8394: POP
// end ; end ;
8395: PPOPN 2
8397: END
// every 0 0$01 trigger FilterUnitsInArea ( conv_end , [ f_side , 2 ] ) do
8398: LD_INT 9
8400: PPUSH
8401: LD_INT 22
8403: PUSH
8404: LD_INT 2
8406: PUSH
8407: EMPTY
8408: LIST
8409: LIST
8410: PPUSH
8411: CALL_OW 70
8415: IFFALSE 8428
8417: GO 8419
8419: DISABLE
// medal2 := false ; end_of_file
8420: LD_ADDR_EXP 4
8424: PUSH
8425: LD_INT 0
8427: ST_TO_ADDR
8428: END
// export function Action ; begin
8429: LD_INT 0
8431: PPUSH
// case Query ( info ) of 1 :
8432: LD_STRING info
8434: PPUSH
8435: CALL_OW 97
8439: PUSH
8440: LD_INT 1
8442: DOUBLE
8443: EQUAL
8444: IFTRUE 8448
8446: GO 8451
8448: POP
// ; end ;
8449: GO 8452
8451: POP
// ChangeMissionObjectives ( PM_1 ) ;
8452: LD_STRING PM_1
8454: PPUSH
8455: CALL_OW 337
// SaveForQuickRestart ;
8459: CALL_OW 22
// end ;
8463: LD_VAR 0 1
8467: RET
// every 0 0$01 trigger GetSide ( us_depot ) = 3 do
8468: LD_INT 50
8470: PPUSH
8471: CALL_OW 255
8475: PUSH
8476: LD_INT 3
8478: EQUAL
8479: IFFALSE 8760
8481: GO 8483
8483: DISABLE
// begin Say ( Stolypin , DPM_S1 ) ;
8484: LD_EXP 16
8488: PPUSH
8489: LD_STRING DPM_S1
8491: PPUSH
8492: CALL_OW 88
// SayRadio ( Popov , DPM_P1 ) ;
8496: LD_EXP 17
8500: PPUSH
8501: LD_STRING DPM_P1
8503: PPUSH
8504: CALL_OW 94
// Say ( Stolypin , DPM_S2 ) ;
8508: LD_EXP 16
8512: PPUSH
8513: LD_STRING DPM_S2
8515: PPUSH
8516: CALL_OW 88
// SaveForQuickRestart ;
8520: CALL_OW 22
// ChangeMissionObjectives ( PM_2 ) ;
8524: LD_STRING PM_2
8526: PPUSH
8527: CALL_OW 337
// Wait ( 2 2$30 ) ;
8531: LD_INT 5250
8533: PPUSH
8534: CALL_OW 67
// CenterOnXY ( 117 , 4 ) ;
8538: LD_INT 117
8540: PPUSH
8541: LD_INT 4
8543: PPUSH
8544: CALL_OW 84
// Convoy ( 1 ) ;
8548: LD_INT 1
8550: PPUSH
8551: CALL 920 0 1
// Wait ( 0 0$30 ) ;
8555: LD_INT 1050
8557: PPUSH
8558: CALL_OW 67
// Convoy ( 2 ) ;
8562: LD_INT 2
8564: PPUSH
8565: CALL 920 0 1
// Wait ( 1 1$30 ) ;
8569: LD_INT 3150
8571: PPUSH
8572: CALL_OW 67
// Convoy ( 3 ) ;
8576: LD_INT 3
8578: PPUSH
8579: CALL 920 0 1
// Wait ( 4 4$00 ) ;
8583: LD_INT 8400
8585: PPUSH
8586: CALL_OW 67
// convoy_start := true ;
8590: LD_ADDR_EXP 7
8594: PUSH
8595: LD_INT 1
8597: ST_TO_ADDR
// PrepareArabian ;
8598: CALL 6303 0 0
// PrepareAttack ( 1 ) ;
8602: LD_INT 1
8604: PPUSH
8605: CALL 6376 0 1
// while ( convoy_start ) do
8609: LD_EXP 7
8613: IFFALSE 8760
// begin Wait ( Rand ( 2 2$00 , 3 3$30 ) ) ;
8615: LD_INT 4200
8617: PPUSH
8618: LD_INT 7350
8620: PPUSH
8621: CALL_OW 12
8625: PPUSH
8626: CALL_OW 67
// if FilterAllUnits ( [ f_side , 2 ] ) < 20 then
8630: LD_INT 22
8632: PUSH
8633: LD_INT 2
8635: PUSH
8636: EMPTY
8637: LIST
8638: LIST
8639: PPUSH
8640: CALL_OW 69
8644: PUSH
8645: LD_INT 20
8647: LESS
8648: IFFALSE 8665
// PrepareAttack ( Rand ( 1 , 2 ) ) ;
8650: LD_INT 1
8652: PPUSH
8653: LD_INT 2
8655: PPUSH
8656: CALL_OW 12
8660: PPUSH
8661: CALL 6376 0 1
// Convoy ( Rand ( 1 , 5 ) ) ;
8665: LD_INT 1
8667: PPUSH
8668: LD_INT 5
8670: PPUSH
8671: CALL_OW 12
8675: PPUSH
8676: CALL 920 0 1
// conv_counter := conv_counter + 1 ;
8680: LD_ADDR_EXP 13
8684: PUSH
8685: LD_EXP 13
8689: PUSH
8690: LD_INT 1
8692: PLUS
8693: ST_TO_ADDR
// if conv_counter mod [ 4 , 3 , 3 ] [ Difficulty ] = 0 then
8694: LD_EXP 13
8698: PUSH
8699: LD_INT 4
8701: PUSH
8702: LD_INT 3
8704: PUSH
8705: LD_INT 3
8707: PUSH
8708: EMPTY
8709: LIST
8710: LIST
8711: LIST
8712: PUSH
8713: LD_OWVAR 67
8717: ARRAY
8718: MOD
8719: PUSH
8720: LD_INT 0
8722: EQUAL
8723: IFFALSE 8758
// begin Wait ( 1 1$20 ) ;
8725: LD_INT 2800
8727: PPUSH
8728: CALL_OW 67
// SayRadio ( Farmer , DPM_F2 ) ;
8732: LD_EXP 25
8736: PPUSH
8737: LD_STRING DPM_F2
8739: PPUSH
8740: CALL_OW 94
// PrepareAttack ( 3 ) ;
8744: LD_INT 3
8746: PPUSH
8747: CALL 6376 0 1
// Wait ( 3 3$00 ) ;
8751: LD_INT 6300
8753: PPUSH
8754: CALL_OW 67
// end ; end ;
8758: GO 8609
// end ;
8760: END
// every 0 0$1 trigger safeCounter > 30 do
8761: LD_EXP 15
8765: PUSH
8766: LD_INT 30
8768: GREATER
8769: IFFALSE 8781
8771: GO 8773
8773: DISABLE
// SetAchievement ( ACH_SAFE ) ;
8774: LD_STRING ACH_SAFE
8776: PPUSH
8777: CALL_OW 543
8781: END
// every 1 1$30 trigger conv_counter mod 3 = 0 and FilterAllUnits ( [ f_side , 2 ] ) = 0 do
8782: LD_EXP 13
8786: PUSH
8787: LD_INT 3
8789: MOD
8790: PUSH
8791: LD_INT 0
8793: EQUAL
8794: PUSH
8795: LD_INT 22
8797: PUSH
8798: LD_INT 2
8800: PUSH
8801: EMPTY
8802: LIST
8803: LIST
8804: PPUSH
8805: CALL_OW 69
8809: PUSH
8810: LD_INT 0
8812: EQUAL
8813: AND
8814: IFFALSE 8831
8816: GO 8818
8818: DISABLE
// SayRadio ( Farmer , DPM_F3 ) ;
8819: LD_EXP 25
8823: PPUSH
8824: LD_STRING DPM_F3
8826: PPUSH
8827: CALL_OW 94
8831: END
// every 1 1$30 trigger conv_counter mod 5 = 0 and FilterAllUnits ( [ f_side , 2 ] ) = 0 do
8832: LD_EXP 13
8836: PUSH
8837: LD_INT 5
8839: MOD
8840: PUSH
8841: LD_INT 0
8843: EQUAL
8844: PUSH
8845: LD_INT 22
8847: PUSH
8848: LD_INT 2
8850: PUSH
8851: EMPTY
8852: LIST
8853: LIST
8854: PPUSH
8855: CALL_OW 69
8859: PUSH
8860: LD_INT 0
8862: EQUAL
8863: AND
8864: IFFALSE 8881
8866: GO 8868
8868: DISABLE
// SayRadio ( Farmer , DPM_F4 ) ;
8869: LD_EXP 25
8873: PPUSH
8874: LD_STRING DPM_F4
8876: PPUSH
8877: CALL_OW 94
8881: END
// every 0 0$10 trigger convoy_start and conv_counter >= [ 8 , 9 , 10 ] [ Difficulty ] and FilterAllUnits ( [ f_side , 6 ] ) = 0 do
8882: LD_EXP 7
8886: PUSH
8887: LD_EXP 13
8891: PUSH
8892: LD_INT 8
8894: PUSH
8895: LD_INT 9
8897: PUSH
8898: LD_INT 10
8900: PUSH
8901: EMPTY
8902: LIST
8903: LIST
8904: LIST
8905: PUSH
8906: LD_OWVAR 67
8910: ARRAY
8911: GREATEREQUAL
8912: AND
8913: PUSH
8914: LD_INT 22
8916: PUSH
8917: LD_INT 6
8919: PUSH
8920: EMPTY
8921: LIST
8922: LIST
8923: PPUSH
8924: CALL_OW 69
8928: PUSH
8929: LD_INT 0
8931: EQUAL
8932: AND
8933: IFFALSE 9032
8935: GO 8937
8937: DISABLE
// begin SayRadio ( Popov , DPM_PEnd ) ;
8938: LD_EXP 17
8942: PPUSH
8943: LD_STRING DPM_PEnd
8945: PPUSH
8946: CALL_OW 94
// AddMedal ( med1 , medal1 ) ;
8950: LD_STRING med1
8952: PPUSH
8953: LD_EXP 3
8957: PPUSH
8958: CALL_OW 101
// AddMedal ( med2 , medal2 ) ;
8962: LD_STRING med2
8964: PPUSH
8965: LD_EXP 4
8969: PPUSH
8970: CALL_OW 101
// if dest_counter >= [ 15 , 10 , 7 ] [ Difficulty ] then
8974: LD_EXP 8
8978: PUSH
8979: LD_INT 15
8981: PUSH
8982: LD_INT 10
8984: PUSH
8985: LD_INT 7
8987: PUSH
8988: EMPTY
8989: LIST
8990: LIST
8991: LIST
8992: PUSH
8993: LD_OWVAR 67
8997: ARRAY
8998: GREATEREQUAL
8999: IFFALSE 9009
// medal3 := false ;
9001: LD_ADDR_EXP 5
9005: PUSH
9006: LD_INT 0
9008: ST_TO_ADDR
// AddMedal ( med3 , medal3 ) ;
9009: LD_STRING med3
9011: PPUSH
9012: LD_EXP 5
9016: PPUSH
9017: CALL_OW 101
// GiveMedals ( MAIN ) ;
9021: LD_STRING MAIN
9023: PPUSH
9024: CALL_OW 102
// YouWin ;
9028: CALL_OW 103
// end ;
9032: END
// every 4 4$10 trigger convoy_start do var i ;
9033: LD_EXP 7
9037: IFFALSE 9403
9039: GO 9041
9041: DISABLE
9042: LD_INT 0
9044: PPUSH
// begin DialogueOn ;
9045: CALL_OW 6
// SayRadio ( Popov , DPM_PHelp ) ;
9049: LD_EXP 17
9053: PPUSH
9054: LD_STRING DPM_PHelp
9056: PPUSH
9057: CALL_OW 94
// DialogueOff ;
9061: CALL_OW 7
// Wait ( 0 0$30 ) ;
9065: LD_INT 1050
9067: PPUSH
9068: CALL_OW 67
// Randomize ;
9072: CALL_OW 10
// uc_side := 3 ;
9076: LD_ADDR_OWVAR 20
9080: PUSH
9081: LD_INT 3
9083: ST_TO_ADDR
// uc_nation := 3 ;
9084: LD_ADDR_OWVAR 21
9088: PUSH
9089: LD_INT 3
9091: ST_TO_ADDR
// for i = 1 to [ 5 , 4 , 3 ] [ Difficulty ] do
9092: LD_ADDR_VAR 0 1
9096: PUSH
9097: DOUBLE
9098: LD_INT 1
9100: DEC
9101: ST_TO_ADDR
9102: LD_INT 5
9104: PUSH
9105: LD_INT 4
9107: PUSH
9108: LD_INT 3
9110: PUSH
9111: EMPTY
9112: LIST
9113: LIST
9114: LIST
9115: PUSH
9116: LD_OWVAR 67
9120: ARRAY
9121: PUSH
9122: FOR_TO
9123: IFFALSE 9163
// begin PrepareHuman ( false , Rand ( 1 , 3 ) , 5 ) ;
9125: LD_INT 0
9127: PPUSH
9128: LD_INT 1
9130: PPUSH
9131: LD_INT 3
9133: PPUSH
9134: CALL_OW 12
9138: PPUSH
9139: LD_INT 5
9141: PPUSH
9142: CALL_OW 380
// PlaceUnitArea ( CreateHuman , rus_start , false ) ;
9146: CALL_OW 44
9150: PPUSH
9151: LD_INT 1
9153: PPUSH
9154: LD_INT 0
9156: PPUSH
9157: CALL_OW 49
// end ;
9161: GO 9122
9163: POP
9164: POP
// vc_chassis := ru_heavy_wheeled ;
9165: LD_ADDR_OWVAR 37
9169: PUSH
9170: LD_INT 23
9172: ST_TO_ADDR
// vc_engine := engine_combustion ;
9173: LD_ADDR_OWVAR 39
9177: PUSH
9178: LD_INT 1
9180: ST_TO_ADDR
// vc_control := control_manual ;
9181: LD_ADDR_OWVAR 38
9185: PUSH
9186: LD_INT 1
9188: ST_TO_ADDR
// vc_weapon := 89 ;
9189: LD_ADDR_OWVAR 40
9193: PUSH
9194: LD_INT 89
9196: ST_TO_ADDR
// vc_fuel_battery := 88 ;
9197: LD_ADDR_OWVAR 41
9201: PUSH
9202: LD_INT 88
9204: ST_TO_ADDR
// i := CreateVehicle ;
9205: LD_ADDR_VAR 0 1
9209: PUSH
9210: CALL_OW 45
9214: ST_TO_ADDR
// SetDir ( i , 5 ) ;
9215: LD_VAR 0 1
9219: PPUSH
9220: LD_INT 5
9222: PPUSH
9223: CALL_OW 233
// PlaceUnitXY ( i , 63 , 115 , false ) ;
9227: LD_VAR 0 1
9231: PPUSH
9232: LD_INT 63
9234: PPUSH
9235: LD_INT 115
9237: PPUSH
9238: LD_INT 0
9240: PPUSH
9241: CALL_OW 48
// SetCargo ( i , mat_cans , 200 ) ;
9245: LD_VAR 0 1
9249: PPUSH
9250: LD_INT 1
9252: PPUSH
9253: LD_INT 200
9255: PPUSH
9256: CALL_OW 290
// PrepareHuman ( false , 3 , 5 ) ;
9260: LD_INT 0
9262: PPUSH
9263: LD_INT 3
9265: PPUSH
9266: LD_INT 5
9268: PPUSH
9269: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
9273: CALL_OW 44
9277: PPUSH
9278: LD_VAR 0 1
9282: PPUSH
9283: CALL_OW 52
// DialogueOn ;
9287: CALL_OW 6
// CenterNowOnXY ( 169 , 115 ) ;
9291: LD_INT 169
9293: PPUSH
9294: LD_INT 115
9296: PPUSH
9297: CALL_OW 86
// DWait ( 0 0$01 ) ;
9301: LD_INT 35
9303: PPUSH
9304: CALL_OW 68
// CenterNowOnXY ( 63 , 115 ) ;
9308: LD_INT 63
9310: PPUSH
9311: LD_INT 115
9313: PPUSH
9314: CALL_OW 86
// DWait ( 0 0$01 ) ;
9318: LD_INT 35
9320: PPUSH
9321: CALL_OW 68
// DialogueOff ;
9325: CALL_OW 7
// ComMoveXY ( i , 57 , 53 ) ;
9329: LD_VAR 0 1
9333: PPUSH
9334: LD_INT 57
9336: PPUSH
9337: LD_INT 53
9339: PPUSH
9340: CALL_OW 111
// Wait ( Rand ( 3 3$00 , 7 7$00 ) ) ;
9344: LD_INT 6300
9346: PPUSH
9347: LD_INT 14700
9349: PPUSH
9350: CALL_OW 12
9354: PPUSH
9355: CALL_OW 67
// PlaceUnitXY ( Saseda , 86 , 112 , false ) ;
9359: LD_EXP 18
9363: PPUSH
9364: LD_INT 86
9366: PPUSH
9367: LD_INT 112
9369: PPUSH
9370: LD_INT 0
9372: PPUSH
9373: CALL_OW 48
// Wait ( 0 0$0.3 ) ;
9377: LD_INT 10
9379: PPUSH
9380: CALL_OW 67
// SayRadio ( Saseda , DPM_Sa1 ) ;
9384: LD_EXP 18
9388: PPUSH
9389: LD_STRING DPM_Sa1
9391: PPUSH
9392: CALL_OW 94
// ChangeMissionObjectives ( PM_3 ) ;
9396: LD_STRING PM_3
9398: PPUSH
9399: CALL_OW 337
// end ;
9403: PPOPN 1
9405: END
// every 0 0$01 trigger See ( 3 , Saseda ) do
9406: LD_INT 3
9408: PPUSH
9409: LD_EXP 18
9413: PPUSH
9414: CALL_OW 292
9418: IFFALSE 9467
9420: GO 9422
9422: DISABLE
// begin Say ( Saseda , DPM_Sa2 ) ;
9423: LD_EXP 18
9427: PPUSH
9428: LD_STRING DPM_Sa2
9430: PPUSH
9431: CALL_OW 88
// ChangeMissionObjectives ( PM_4 ) ;
9435: LD_STRING PM_4
9437: PPUSH
9438: CALL_OW 337
// SetTech ( tech_rocket , 3 , state_enabled ) ;
9442: LD_INT 40
9444: PPUSH
9445: LD_INT 3
9447: PPUSH
9448: LD_INT 1
9450: PPUSH
9451: CALL_OW 322
// SetSide ( Saseda , 3 ) ;
9455: LD_EXP 18
9459: PPUSH
9460: LD_INT 3
9462: PPUSH
9463: CALL_OW 235
// end ;
9467: END
// every 16 16$00 trigger not medal1 and FilterAllUnits ( [ f_side , 6 ] ) = 0 do
9468: LD_EXP 3
9472: NOT
9473: PUSH
9474: LD_INT 22
9476: PUSH
9477: LD_INT 6
9479: PUSH
9480: EMPTY
9481: LIST
9482: LIST
9483: PPUSH
9484: CALL_OW 69
9488: PUSH
9489: LD_INT 0
9491: EQUAL
9492: AND
9493: IFFALSE 9555
9495: GO 9497
9497: DISABLE
// begin DialogueOn ;
9498: CALL_OW 6
// Say ( Stolypin , DPM_S3 ) ;
9502: LD_EXP 16
9506: PPUSH
9507: LD_STRING DPM_S3
9509: PPUSH
9510: CALL_OW 88
// PlaceSeeing ( 62 , 113 , 3 , 10 ) ;
9514: LD_INT 62
9516: PPUSH
9517: LD_INT 113
9519: PPUSH
9520: LD_INT 3
9522: PPUSH
9523: LD_INT 10
9525: PPUSH
9526: CALL_OW 330
// CenterOnXY ( 62 , 113 ) ;
9530: LD_INT 62
9532: PPUSH
9533: LD_INT 113
9535: PPUSH
9536: CALL_OW 84
// dwait ( 0 0$1 ) ;
9540: LD_INT 35
9542: PPUSH
9543: CALL_OW 68
// DialogueOff ;
9547: CALL_OW 7
// CounterAttack ;
9551: CALL 5789 0 0
// end ; end_of_file
9555: END
// on LeaveBuilding ( b , h ) do begin if GetSide ( b ) = 1 then
9556: LD_VAR 0 1
9560: PPUSH
9561: CALL_OW 255
9565: PUSH
9566: LD_INT 1
9568: EQUAL
9569: IFFALSE 9605
// if not us_retreat then
9571: LD_EXP 22
9575: NOT
9576: IFFALSE 9605
// if GetClass ( h ) = 1 then
9578: LD_VAR 0 2
9582: PPUSH
9583: CALL_OW 257
9587: PUSH
9588: LD_INT 1
9590: EQUAL
9591: IFFALSE 9605
// ComEnterUnit ( h , us_arm ) ;
9593: LD_VAR 0 2
9597: PPUSH
9598: LD_INT 69
9600: PPUSH
9601: CALL_OW 120
// end ;
9605: PPOPN 2
9607: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
9608: LD_VAR 0 1
9612: PPUSH
9613: CALL 25614 0 1
// if GetSide ( un ) = 1 then
9617: LD_VAR 0 1
9621: PPUSH
9622: CALL_OW 255
9626: PUSH
9627: LD_INT 1
9629: EQUAL
9630: IFFALSE 9646
// us_count := us_count + 1 ;
9632: LD_ADDR_EXP 24
9636: PUSH
9637: LD_EXP 24
9641: PUSH
9642: LD_INT 1
9644: PLUS
9645: ST_TO_ADDR
// if un in us_force then
9646: LD_VAR 0 1
9650: PUSH
9651: LD_EXP 12
9655: IN
9656: IFFALSE 9674
// us_force := us_force diff un ;
9658: LD_ADDR_EXP 12
9662: PUSH
9663: LD_EXP 12
9667: PUSH
9668: LD_VAR 0 1
9672: DIFF
9673: ST_TO_ADDR
// if un in ar_force then
9674: LD_VAR 0 1
9678: PUSH
9679: LD_EXP 11
9683: IN
9684: IFFALSE 9702
// ar_force := ar_force diff un ;
9686: LD_ADDR_EXP 11
9690: PUSH
9691: LD_EXP 11
9695: PUSH
9696: LD_VAR 0 1
9700: DIFF
9701: ST_TO_ADDR
// if un = Stolypin then
9702: LD_VAR 0 1
9706: PUSH
9707: LD_EXP 16
9711: EQUAL
9712: IFFALSE 9721
// YouLost ( dead ) ;
9714: LD_STRING dead
9716: PPUSH
9717: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) then
9721: LD_VAR 0 1
9725: PUSH
9726: LD_INT 22
9728: PUSH
9729: LD_INT 1
9731: PUSH
9732: EMPTY
9733: LIST
9734: LIST
9735: PUSH
9736: LD_INT 30
9738: PUSH
9739: LD_INT 0
9741: PUSH
9742: EMPTY
9743: LIST
9744: LIST
9745: PUSH
9746: EMPTY
9747: LIST
9748: LIST
9749: PPUSH
9750: CALL_OW 69
9754: IN
9755: IFFALSE 9764
// YouLost ( depot ) ;
9757: LD_STRING depot
9759: PPUSH
9760: CALL_OW 104
// if GetSide ( un ) = 6 then
9764: LD_VAR 0 1
9768: PPUSH
9769: CALL_OW 255
9773: PUSH
9774: LD_INT 6
9776: EQUAL
9777: IFFALSE 9793
// dest_counter := dest_counter + 1 ;
9779: LD_ADDR_EXP 8
9783: PUSH
9784: LD_EXP 8
9788: PUSH
9789: LD_INT 1
9791: PLUS
9792: ST_TO_ADDR
// end ;
9793: PPOPN 1
9795: END
// on VehicleConstructed ( un , fac ) do begin SOS_VehicleConstructed ( un , fac ) ;
9796: LD_VAR 0 1
9800: PPUSH
9801: LD_VAR 0 2
9805: PPUSH
9806: CALL 25736 0 2
// if GetSide ( un ) = 1 then
9810: LD_VAR 0 1
9814: PPUSH
9815: CALL_OW 255
9819: PUSH
9820: LD_INT 1
9822: EQUAL
9823: IFFALSE 9840
// ComMoveXY ( un , 57 , 52 ) ;
9825: LD_VAR 0 1
9829: PPUSH
9830: LD_INT 57
9832: PPUSH
9833: LD_INT 52
9835: PPUSH
9836: CALL_OW 111
// end ;
9840: PPOPN 2
9842: END
// on Contact ( s1 , s2 ) do begin if not us_alert then
9843: LD_EXP 21
9847: NOT
9848: IFFALSE 9898
// if ( s1 = 3 and s2 = 1 ) or ( s1 = 1 and s2 = 3 ) then
9850: LD_VAR 0 1
9854: PUSH
9855: LD_INT 3
9857: EQUAL
9858: PUSH
9859: LD_VAR 0 2
9863: PUSH
9864: LD_INT 1
9866: EQUAL
9867: AND
9868: PUSH
9869: LD_VAR 0 1
9873: PUSH
9874: LD_INT 1
9876: EQUAL
9877: PUSH
9878: LD_VAR 0 2
9882: PUSH
9883: LD_INT 3
9885: EQUAL
9886: AND
9887: OR
9888: IFFALSE 9898
// us_alert := true ;
9890: LD_ADDR_EXP 21
9894: PUSH
9895: LD_INT 1
9897: ST_TO_ADDR
// if ( s1 = 6 and s2 = 3 ) or ( s1 = 3 and s2 = 6 ) then
9898: LD_VAR 0 1
9902: PUSH
9903: LD_INT 6
9905: EQUAL
9906: PUSH
9907: LD_VAR 0 2
9911: PUSH
9912: LD_INT 3
9914: EQUAL
9915: AND
9916: PUSH
9917: LD_VAR 0 1
9921: PUSH
9922: LD_INT 3
9924: EQUAL
9925: PUSH
9926: LD_VAR 0 2
9930: PUSH
9931: LD_INT 6
9933: EQUAL
9934: AND
9935: OR
9936: IFFALSE 9945
// YouLost ( alat ) ;
9938: LD_STRING alat
9940: PPUSH
9941: CALL_OW 104
// end ;
9945: PPOPN 2
9947: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) = 2 and un in FilterAllUnits ( [ [ f_empty ] , [ f_type , unit_vehicle ] ] ) then
9948: LD_VAR 0 1
9952: PPUSH
9953: CALL_OW 255
9957: PUSH
9958: LD_INT 2
9960: EQUAL
9961: PUSH
9962: LD_VAR 0 1
9966: PUSH
9967: LD_INT 58
9969: PUSH
9970: EMPTY
9971: LIST
9972: PUSH
9973: LD_INT 21
9975: PUSH
9976: LD_INT 2
9978: PUSH
9979: EMPTY
9980: LIST
9981: LIST
9982: PUSH
9983: EMPTY
9984: LIST
9985: LIST
9986: PPUSH
9987: CALL_OW 69
9991: IN
9992: AND
9993: IFFALSE 10114
// if GetSide ( NearestUnitToUnit ( all_units diff un , un ) ) <> 2 then
9995: LD_OWVAR 3
9999: PUSH
10000: LD_VAR 0 1
10004: DIFF
10005: PPUSH
10006: LD_VAR 0 1
10010: PPUSH
10011: CALL_OW 74
10015: PPUSH
10016: CALL_OW 255
10020: PUSH
10021: LD_INT 2
10023: NONEQUAL
10024: IFFALSE 10114
// begin Wait ( 0 0$1.3 ) ;
10026: LD_INT 46
10028: PPUSH
10029: CALL_OW 67
// MineExplosion ( GetX ( un ) , GetY ( un ) , 1 ) ;
10033: LD_VAR 0 1
10037: PPUSH
10038: CALL_OW 250
10042: PPUSH
10043: LD_VAR 0 1
10047: PPUSH
10048: CALL_OW 251
10052: PPUSH
10053: LD_INT 1
10055: PPUSH
10056: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 1 ) ;
10060: LD_VAR 0 1
10064: PPUSH
10065: CALL_OW 250
10069: PPUSH
10070: LD_VAR 0 1
10074: PPUSH
10075: CALL_OW 251
10079: PPUSH
10080: LD_INT 1
10082: PPUSH
10083: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 1 ) ;
10087: LD_VAR 0 1
10091: PPUSH
10092: CALL_OW 250
10096: PPUSH
10097: LD_VAR 0 1
10101: PPUSH
10102: CALL_OW 251
10106: PPUSH
10107: LD_INT 1
10109: PPUSH
10110: CALL_OW 453
// end ; end ;
10114: PPOPN 1
10116: END
// on EvacuateVehicle ( driver , un , c1 , c2 ) do begin if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) and not GetSide ( NearestUnit ( un ) ) = 2 then
10117: LD_VAR 0 2
10121: PUSH
10122: LD_INT 22
10124: PUSH
10125: LD_INT 2
10127: PUSH
10128: EMPTY
10129: LIST
10130: LIST
10131: PUSH
10132: LD_INT 21
10134: PUSH
10135: LD_INT 2
10137: PUSH
10138: EMPTY
10139: LIST
10140: LIST
10141: PUSH
10142: EMPTY
10143: LIST
10144: LIST
10145: PPUSH
10146: CALL_OW 69
10150: IN
10151: PUSH
10152: LD_VAR 0 2
10156: PPUSH
10157: CALL 10636 0 1
10161: PPUSH
10162: CALL_OW 255
10166: PUSH
10167: LD_INT 2
10169: EQUAL
10170: NOT
10171: AND
10172: IFFALSE 10297
// begin Wait ( Rand ( 0 0$03 , 0 0$06 ) ) ;
10174: LD_INT 105
10176: PPUSH
10177: LD_INT 210
10179: PPUSH
10180: CALL_OW 12
10184: PPUSH
10185: CALL_OW 67
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
10189: LD_VAR 0 2
10193: PPUSH
10194: CALL_OW 250
10198: PPUSH
10199: LD_VAR 0 2
10203: PPUSH
10204: CALL_OW 251
10208: PPUSH
10209: LD_INT 3
10211: PPUSH
10212: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
10216: LD_VAR 0 2
10220: PPUSH
10221: CALL_OW 250
10225: PPUSH
10226: LD_VAR 0 2
10230: PPUSH
10231: CALL_OW 251
10235: PPUSH
10236: LD_INT 3
10238: PPUSH
10239: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
10243: LD_VAR 0 2
10247: PPUSH
10248: CALL_OW 250
10252: PPUSH
10253: LD_VAR 0 2
10257: PPUSH
10258: CALL_OW 251
10262: PPUSH
10263: LD_INT 3
10265: PPUSH
10266: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
10270: LD_VAR 0 2
10274: PPUSH
10275: CALL_OW 250
10279: PPUSH
10280: LD_VAR 0 2
10284: PPUSH
10285: CALL_OW 251
10289: PPUSH
10290: LD_INT 3
10292: PPUSH
10293: CALL_OW 453
// end ; end ;
10297: PPOPN 4
10299: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
10300: LD_VAR 0 1
10304: PPUSH
10305: LD_VAR 0 2
10309: PPUSH
10310: LD_VAR 0 3
10314: PPUSH
10315: CALL 25712 0 3
// end ;
10319: PPOPN 3
10321: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
10322: LD_VAR 0 1
10326: PPUSH
10327: CALL 25720 0 1
// end ; end_of_file
10331: PPOPN 1
10333: END
// export function Replace2 ( tab , j , k , value ) ; var i , tmp ; begin
10334: LD_INT 0
10336: PPUSH
10337: PPUSH
10338: PPUSH
// tmp := Replace ( tab [ j ] , k , value ) ;
10339: LD_ADDR_VAR 0 7
10343: PUSH
10344: LD_VAR 0 1
10348: PUSH
10349: LD_VAR 0 2
10353: ARRAY
10354: PPUSH
10355: LD_VAR 0 3
10359: PPUSH
10360: LD_VAR 0 4
10364: PPUSH
10365: CALL_OW 1
10369: ST_TO_ADDR
// tab := Replace ( tab , j , tmp ) ;
10370: LD_ADDR_VAR 0 1
10374: PUSH
10375: LD_VAR 0 1
10379: PPUSH
10380: LD_VAR 0 2
10384: PPUSH
10385: LD_VAR 0 7
10389: PPUSH
10390: CALL_OW 1
10394: ST_TO_ADDR
// result := tab ;
10395: LD_ADDR_VAR 0 5
10399: PUSH
10400: LD_VAR 0 1
10404: ST_TO_ADDR
// end ;
10405: LD_VAR 0 5
10409: RET
// export function GetDriver ( veh ) ; var i , filter ; begin
10410: LD_INT 0
10412: PPUSH
10413: PPUSH
10414: PPUSH
// if not GetControl ( veh ) = control_manual then
10415: LD_VAR 0 1
10419: PPUSH
10420: CALL_OW 263
10424: PUSH
10425: LD_INT 1
10427: EQUAL
10428: NOT
10429: IFFALSE 10441
// result := false else
10431: LD_ADDR_VAR 0 2
10435: PUSH
10436: LD_INT 0
10438: ST_TO_ADDR
10439: GO 10586
// if veh in FilterAllUnits ( [ f_empty ] ) then
10441: LD_VAR 0 1
10445: PUSH
10446: LD_INT 58
10448: PUSH
10449: EMPTY
10450: LIST
10451: PPUSH
10452: CALL_OW 69
10456: IN
10457: IFFALSE 10469
// result := false else
10459: LD_ADDR_VAR 0 2
10463: PUSH
10464: LD_INT 0
10466: ST_TO_ADDR
10467: GO 10586
// begin filter := FilterAllUnits ( [ [ f_side , GetSide ( veh ) ] , [ f_driving ] ] ) ;
10469: LD_ADDR_VAR 0 4
10473: PUSH
10474: LD_INT 22
10476: PUSH
10477: LD_VAR 0 1
10481: PPUSH
10482: CALL_OW 255
10486: PUSH
10487: EMPTY
10488: LIST
10489: LIST
10490: PUSH
10491: LD_INT 55
10493: PUSH
10494: EMPTY
10495: LIST
10496: PUSH
10497: EMPTY
10498: LIST
10499: LIST
10500: PPUSH
10501: CALL_OW 69
10505: ST_TO_ADDR
// if not filter then
10506: LD_VAR 0 4
10510: NOT
10511: IFFALSE 10523
// result := false else
10513: LD_ADDR_VAR 0 2
10517: PUSH
10518: LD_INT 0
10520: ST_TO_ADDR
10521: GO 10586
// for i = 1 to filter do
10523: LD_ADDR_VAR 0 3
10527: PUSH
10528: DOUBLE
10529: LD_INT 1
10531: DEC
10532: ST_TO_ADDR
10533: LD_VAR 0 4
10537: PUSH
10538: FOR_TO
10539: IFFALSE 10584
// if IsDriver ( filter [ i ] ) = veh then
10541: LD_VAR 0 4
10545: PUSH
10546: LD_VAR 0 3
10550: ARRAY
10551: PPUSH
10552: CALL 64544 0 1
10556: PUSH
10557: LD_VAR 0 1
10561: EQUAL
10562: IFFALSE 10582
// begin result := filter [ i ] ;
10564: LD_ADDR_VAR 0 2
10568: PUSH
10569: LD_VAR 0 4
10573: PUSH
10574: LD_VAR 0 3
10578: ARRAY
10579: ST_TO_ADDR
// break ;
10580: GO 10584
// end ;
10582: GO 10538
10584: POP
10585: POP
// end ; end ;
10586: LD_VAR 0 2
10590: RET
// export function FindTarget ( unit ) ; begin
10591: LD_INT 0
10593: PPUSH
// result := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( unit ) ] ) , unit ) ;
10594: LD_ADDR_VAR 0 2
10598: PUSH
10599: LD_INT 81
10601: PUSH
10602: LD_VAR 0 1
10606: PPUSH
10607: CALL_OW 255
10611: PUSH
10612: EMPTY
10613: LIST
10614: LIST
10615: PPUSH
10616: CALL_OW 69
10620: PPUSH
10621: LD_VAR 0 1
10625: PPUSH
10626: CALL_OW 74
10630: ST_TO_ADDR
// end ;
10631: LD_VAR 0 2
10635: RET
// export function NearestUnit ( unit ) ; begin
10636: LD_INT 0
10638: PPUSH
// result := NearestUnitToUnit ( all_units diff unit , unit ) ;
10639: LD_ADDR_VAR 0 2
10643: PUSH
10644: LD_OWVAR 3
10648: PUSH
10649: LD_VAR 0 1
10653: DIFF
10654: PPUSH
10655: LD_VAR 0 1
10659: PPUSH
10660: CALL_OW 74
10664: ST_TO_ADDR
// end ; end_of_file
10665: LD_VAR 0 2
10669: RET
// every 12 12$00 do
10670: GO 10672
10672: DISABLE
// begin SetWeather ( 1 , 570 , 350 ) ;
10673: LD_INT 1
10675: PPUSH
10676: LD_INT 570
10678: PPUSH
10679: LD_INT 350
10681: PPUSH
10682: CALL_OW 550
// Wait ( Rand ( 5 5$00 , 10 10$00 ) ) ;
10686: LD_INT 10500
10688: PPUSH
10689: LD_INT 21000
10691: PPUSH
10692: CALL_OW 12
10696: PPUSH
10697: CALL_OW 67
// SetWeather ( 0 , 570 , 350 ) ;
10701: LD_INT 0
10703: PPUSH
10704: LD_INT 570
10706: PPUSH
10707: LD_INT 350
10709: PPUSH
10710: CALL_OW 550
// end ;
10714: END
// export function PrepareAnimals ( num1 , num2 , num3 , area ) ; var l , apeman , tiger , bird ; begin
10715: LD_INT 0
10717: PPUSH
10718: PPUSH
10719: PPUSH
10720: PPUSH
10721: PPUSH
// uc_nation = nation_nature ;
10722: LD_ADDR_OWVAR 21
10726: PUSH
10727: LD_INT 0
10729: ST_TO_ADDR
// uc_side = 0 ;
10730: LD_ADDR_OWVAR 20
10734: PUSH
10735: LD_INT 0
10737: ST_TO_ADDR
// l = 0 ;
10738: LD_ADDR_VAR 0 6
10742: PUSH
10743: LD_INT 0
10745: ST_TO_ADDR
// repeat begin uc_direction = Rand ( 0 , 5 ) ;
10746: LD_ADDR_OWVAR 24
10750: PUSH
10751: LD_INT 0
10753: PPUSH
10754: LD_INT 5
10756: PPUSH
10757: CALL_OW 12
10761: ST_TO_ADDR
// hc_agressivity = Rand ( - 5 , 5 ) ;
10762: LD_ADDR_OWVAR 35
10766: PUSH
10767: LD_INT 5
10769: NEG
10770: PPUSH
10771: LD_INT 5
10773: PPUSH
10774: CALL_OW 12
10778: ST_TO_ADDR
// hc_gallery =  ;
10779: LD_ADDR_OWVAR 33
10783: PUSH
10784: LD_STRING 
10786: ST_TO_ADDR
// hc_class = class_apeman ;
10787: LD_ADDR_OWVAR 28
10791: PUSH
10792: LD_INT 12
10794: ST_TO_ADDR
// hc_attr = [ Rand ( 11 , 13 ) , Rand ( 10 , 11 ) ] ;
10795: LD_ADDR_OWVAR 29
10799: PUSH
10800: LD_INT 11
10802: PPUSH
10803: LD_INT 13
10805: PPUSH
10806: CALL_OW 12
10810: PUSH
10811: LD_INT 10
10813: PPUSH
10814: LD_INT 11
10816: PPUSH
10817: CALL_OW 12
10821: PUSH
10822: EMPTY
10823: LIST
10824: LIST
10825: ST_TO_ADDR
// hc_sex = sex_male ;
10826: LD_ADDR_OWVAR 27
10830: PUSH
10831: LD_INT 1
10833: ST_TO_ADDR
// hc_skills = [ Rand ( 0 , 2 ) , 0 , 0 , 0 ] ;
10834: LD_ADDR_OWVAR 31
10838: PUSH
10839: LD_INT 0
10841: PPUSH
10842: LD_INT 2
10844: PPUSH
10845: CALL_OW 12
10849: PUSH
10850: LD_INT 0
10852: PUSH
10853: LD_INT 0
10855: PUSH
10856: LD_INT 0
10858: PUSH
10859: EMPTY
10860: LIST
10861: LIST
10862: LIST
10863: LIST
10864: ST_TO_ADDR
// apeman = CreateHuman ;
10865: LD_ADDR_VAR 0 7
10869: PUSH
10870: CALL_OW 44
10874: ST_TO_ADDR
// PlaceUnitArea ( apeman , area , false ) ;
10875: LD_VAR 0 7
10879: PPUSH
10880: LD_VAR 0 4
10884: PPUSH
10885: LD_INT 0
10887: PPUSH
10888: CALL_OW 49
// l = l + 1 ;
10892: LD_ADDR_VAR 0 6
10896: PUSH
10897: LD_VAR 0 6
10901: PUSH
10902: LD_INT 1
10904: PLUS
10905: ST_TO_ADDR
// end until l = num1 ;
10906: LD_VAR 0 6
10910: PUSH
10911: LD_VAR 0 1
10915: EQUAL
10916: IFFALSE 10746
// l = 0 ;
10918: LD_ADDR_VAR 0 6
10922: PUSH
10923: LD_INT 0
10925: ST_TO_ADDR
// repeat begin hc_agressivity = Rand ( 0 , 25 ) ;
10926: LD_ADDR_OWVAR 35
10930: PUSH
10931: LD_INT 0
10933: PPUSH
10934: LD_INT 25
10936: PPUSH
10937: CALL_OW 12
10941: ST_TO_ADDR
// hc_class = class_tiger ;
10942: LD_ADDR_OWVAR 28
10946: PUSH
10947: LD_INT 14
10949: ST_TO_ADDR
// hc_sex = sex_male ;
10950: LD_ADDR_OWVAR 27
10954: PUSH
10955: LD_INT 1
10957: ST_TO_ADDR
// hc_gallery = sandnature ;
10958: LD_ADDR_OWVAR 33
10962: PUSH
10963: LD_STRING sandnature
10965: ST_TO_ADDR
// hc_face_number = 3 ;
10966: LD_ADDR_OWVAR 34
10970: PUSH
10971: LD_INT 3
10973: ST_TO_ADDR
// tiger = CreateHuman ;
10974: LD_ADDR_VAR 0 8
10978: PUSH
10979: CALL_OW 44
10983: ST_TO_ADDR
// PlaceUnitArea ( tiger , area , false ) ;
10984: LD_VAR 0 8
10988: PPUSH
10989: LD_VAR 0 4
10993: PPUSH
10994: LD_INT 0
10996: PPUSH
10997: CALL_OW 49
// l = l + 1 ;
11001: LD_ADDR_VAR 0 6
11005: PUSH
11006: LD_VAR 0 6
11010: PUSH
11011: LD_INT 1
11013: PLUS
11014: ST_TO_ADDR
// end until l = num2 ;
11015: LD_VAR 0 6
11019: PUSH
11020: LD_VAR 0 2
11024: EQUAL
11025: IFFALSE 10926
// l = 0 ;
11027: LD_ADDR_VAR 0 6
11031: PUSH
11032: LD_INT 0
11034: ST_TO_ADDR
// repeat begin hc_class = class_phororhacos ;
11035: LD_ADDR_OWVAR 28
11039: PUSH
11040: LD_INT 18
11042: ST_TO_ADDR
// hc_gallery = sandnature ;
11043: LD_ADDR_OWVAR 33
11047: PUSH
11048: LD_STRING sandnature
11050: ST_TO_ADDR
// hc_face_number = 1 ;
11051: LD_ADDR_OWVAR 34
11055: PUSH
11056: LD_INT 1
11058: ST_TO_ADDR
// bird = CreateHuman ;
11059: LD_ADDR_VAR 0 9
11063: PUSH
11064: CALL_OW 44
11068: ST_TO_ADDR
// PlaceUnitAnywhere ( bird , false ) ;
11069: LD_VAR 0 9
11073: PPUSH
11074: LD_INT 0
11076: PPUSH
11077: CALL_OW 51
// l = l + 1 ;
11081: LD_ADDR_VAR 0 6
11085: PUSH
11086: LD_VAR 0 6
11090: PUSH
11091: LD_INT 1
11093: PLUS
11094: ST_TO_ADDR
// end until l = num3 ;
11095: LD_VAR 0 6
11099: PUSH
11100: LD_VAR 0 3
11104: EQUAL
11105: IFFALSE 11035
// end ; end_of_file
11107: LD_VAR 0 5
11111: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
11112: LD_INT 0
11114: PPUSH
// ar_miner := 81 ;
11115: LD_ADDR_EXP 33
11119: PUSH
11120: LD_INT 81
11122: ST_TO_ADDR
// ar_crane := 88 ;
11123: LD_ADDR_EXP 32
11127: PUSH
11128: LD_INT 88
11130: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
11131: LD_ADDR_EXP 27
11135: PUSH
11136: LD_INT 89
11138: ST_TO_ADDR
// us_hack := 99 ;
11139: LD_ADDR_EXP 28
11143: PUSH
11144: LD_INT 99
11146: ST_TO_ADDR
// us_artillery := 97 ;
11147: LD_ADDR_EXP 29
11151: PUSH
11152: LD_INT 97
11154: ST_TO_ADDR
// ar_bio_bomb := 91 ;
11155: LD_ADDR_EXP 30
11159: PUSH
11160: LD_INT 91
11162: ST_TO_ADDR
// ar_mortar := 92 ;
11163: LD_ADDR_EXP 31
11167: PUSH
11168: LD_INT 92
11170: ST_TO_ADDR
// ru_radar := 98 ;
11171: LD_ADDR_EXP 26
11175: PUSH
11176: LD_INT 98
11178: ST_TO_ADDR
// tech_Artillery := 80 ;
11179: LD_ADDR_EXP 34
11183: PUSH
11184: LD_INT 80
11186: ST_TO_ADDR
// tech_RadMat := 81 ;
11187: LD_ADDR_EXP 35
11191: PUSH
11192: LD_INT 81
11194: ST_TO_ADDR
// tech_BasicTools := 82 ;
11195: LD_ADDR_EXP 36
11199: PUSH
11200: LD_INT 82
11202: ST_TO_ADDR
// tech_Cargo := 83 ;
11203: LD_ADDR_EXP 37
11207: PUSH
11208: LD_INT 83
11210: ST_TO_ADDR
// tech_Track := 84 ;
11211: LD_ADDR_EXP 38
11215: PUSH
11216: LD_INT 84
11218: ST_TO_ADDR
// tech_Crane := 85 ;
11219: LD_ADDR_EXP 39
11223: PUSH
11224: LD_INT 85
11226: ST_TO_ADDR
// tech_Bulldozer := 86 ;
11227: LD_ADDR_EXP 40
11231: PUSH
11232: LD_INT 86
11234: ST_TO_ADDR
// tech_Hovercraft := 87 ;
11235: LD_ADDR_EXP 41
11239: PUSH
11240: LD_INT 87
11242: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
11243: LD_ADDR_EXP 42
11247: PUSH
11248: LD_INT 88
11250: ST_TO_ADDR
// class_mastodont := 31 ;
11251: LD_ADDR_EXP 43
11255: PUSH
11256: LD_INT 31
11258: ST_TO_ADDR
// class_horse := 21 ;
11259: LD_ADDR_EXP 44
11263: PUSH
11264: LD_INT 21
11266: ST_TO_ADDR
// end ;
11267: LD_VAR 0 1
11271: RET
// every 1 do
11272: GO 11274
11274: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
11275: CALL 11112 0 0
11279: END
// every 0 0$1 do
11280: GO 11282
11282: DISABLE
// begin enable ;
11283: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
11284: LD_STRING updateTimer(
11286: PUSH
11287: LD_OWVAR 1
11291: STR
11292: PUSH
11293: LD_STRING );
11295: STR
11296: PPUSH
11297: CALL_OW 559
// end ;
11301: END
// export function SOS_MapStart ( ) ; begin
11302: LD_INT 0
11304: PPUSH
// if streamModeActive then
11305: LD_EXP 45
11309: IFFALSE 11318
// DefineStreamItems ( true ) ;
11311: LD_INT 1
11313: PPUSH
11314: CALL 12968 0 1
// UpdateFactoryWaypoints ( ) ;
11318: CALL 26552 0 0
// end ;
11322: LD_VAR 0 1
11326: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
11327: LD_INT 0
11329: PPUSH
// if p2 = 100 then
11330: LD_VAR 0 2
11334: PUSH
11335: LD_INT 100
11337: EQUAL
11338: IFFALSE 12341
// begin if not StreamModeActive then
11340: LD_EXP 45
11344: NOT
11345: IFFALSE 11355
// StreamModeActive := true ;
11347: LD_ADDR_EXP 45
11351: PUSH
11352: LD_INT 1
11354: ST_TO_ADDR
// if p3 = 0 then
11355: LD_VAR 0 3
11359: PUSH
11360: LD_INT 0
11362: EQUAL
11363: IFFALSE 11369
// InitStreamMode ;
11365: CALL 12504 0 0
// if p3 = 1 then
11369: LD_VAR 0 3
11373: PUSH
11374: LD_INT 1
11376: EQUAL
11377: IFFALSE 11387
// sRocket := true ;
11379: LD_ADDR_EXP 50
11383: PUSH
11384: LD_INT 1
11386: ST_TO_ADDR
// if p3 = 2 then
11387: LD_VAR 0 3
11391: PUSH
11392: LD_INT 2
11394: EQUAL
11395: IFFALSE 11405
// sSpeed := true ;
11397: LD_ADDR_EXP 49
11401: PUSH
11402: LD_INT 1
11404: ST_TO_ADDR
// if p3 = 3 then
11405: LD_VAR 0 3
11409: PUSH
11410: LD_INT 3
11412: EQUAL
11413: IFFALSE 11423
// sEngine := true ;
11415: LD_ADDR_EXP 51
11419: PUSH
11420: LD_INT 1
11422: ST_TO_ADDR
// if p3 = 4 then
11423: LD_VAR 0 3
11427: PUSH
11428: LD_INT 4
11430: EQUAL
11431: IFFALSE 11441
// sSpec := true ;
11433: LD_ADDR_EXP 48
11437: PUSH
11438: LD_INT 1
11440: ST_TO_ADDR
// if p3 = 5 then
11441: LD_VAR 0 3
11445: PUSH
11446: LD_INT 5
11448: EQUAL
11449: IFFALSE 11459
// sLevel := true ;
11451: LD_ADDR_EXP 52
11455: PUSH
11456: LD_INT 1
11458: ST_TO_ADDR
// if p3 = 6 then
11459: LD_VAR 0 3
11463: PUSH
11464: LD_INT 6
11466: EQUAL
11467: IFFALSE 11477
// sArmoury := true ;
11469: LD_ADDR_EXP 53
11473: PUSH
11474: LD_INT 1
11476: ST_TO_ADDR
// if p3 = 7 then
11477: LD_VAR 0 3
11481: PUSH
11482: LD_INT 7
11484: EQUAL
11485: IFFALSE 11495
// sRadar := true ;
11487: LD_ADDR_EXP 54
11491: PUSH
11492: LD_INT 1
11494: ST_TO_ADDR
// if p3 = 8 then
11495: LD_VAR 0 3
11499: PUSH
11500: LD_INT 8
11502: EQUAL
11503: IFFALSE 11513
// sBunker := true ;
11505: LD_ADDR_EXP 55
11509: PUSH
11510: LD_INT 1
11512: ST_TO_ADDR
// if p3 = 9 then
11513: LD_VAR 0 3
11517: PUSH
11518: LD_INT 9
11520: EQUAL
11521: IFFALSE 11531
// sHack := true ;
11523: LD_ADDR_EXP 56
11527: PUSH
11528: LD_INT 1
11530: ST_TO_ADDR
// if p3 = 10 then
11531: LD_VAR 0 3
11535: PUSH
11536: LD_INT 10
11538: EQUAL
11539: IFFALSE 11549
// sFire := true ;
11541: LD_ADDR_EXP 57
11545: PUSH
11546: LD_INT 1
11548: ST_TO_ADDR
// if p3 = 11 then
11549: LD_VAR 0 3
11553: PUSH
11554: LD_INT 11
11556: EQUAL
11557: IFFALSE 11567
// sRefresh := true ;
11559: LD_ADDR_EXP 58
11563: PUSH
11564: LD_INT 1
11566: ST_TO_ADDR
// if p3 = 12 then
11567: LD_VAR 0 3
11571: PUSH
11572: LD_INT 12
11574: EQUAL
11575: IFFALSE 11585
// sExp := true ;
11577: LD_ADDR_EXP 59
11581: PUSH
11582: LD_INT 1
11584: ST_TO_ADDR
// if p3 = 13 then
11585: LD_VAR 0 3
11589: PUSH
11590: LD_INT 13
11592: EQUAL
11593: IFFALSE 11603
// sDepot := true ;
11595: LD_ADDR_EXP 60
11599: PUSH
11600: LD_INT 1
11602: ST_TO_ADDR
// if p3 = 14 then
11603: LD_VAR 0 3
11607: PUSH
11608: LD_INT 14
11610: EQUAL
11611: IFFALSE 11621
// sFlag := true ;
11613: LD_ADDR_EXP 61
11617: PUSH
11618: LD_INT 1
11620: ST_TO_ADDR
// if p3 = 15 then
11621: LD_VAR 0 3
11625: PUSH
11626: LD_INT 15
11628: EQUAL
11629: IFFALSE 11639
// sKamikadze := true ;
11631: LD_ADDR_EXP 69
11635: PUSH
11636: LD_INT 1
11638: ST_TO_ADDR
// if p3 = 16 then
11639: LD_VAR 0 3
11643: PUSH
11644: LD_INT 16
11646: EQUAL
11647: IFFALSE 11657
// sTroll := true ;
11649: LD_ADDR_EXP 70
11653: PUSH
11654: LD_INT 1
11656: ST_TO_ADDR
// if p3 = 17 then
11657: LD_VAR 0 3
11661: PUSH
11662: LD_INT 17
11664: EQUAL
11665: IFFALSE 11675
// sSlow := true ;
11667: LD_ADDR_EXP 71
11671: PUSH
11672: LD_INT 1
11674: ST_TO_ADDR
// if p3 = 18 then
11675: LD_VAR 0 3
11679: PUSH
11680: LD_INT 18
11682: EQUAL
11683: IFFALSE 11693
// sLack := true ;
11685: LD_ADDR_EXP 72
11689: PUSH
11690: LD_INT 1
11692: ST_TO_ADDR
// if p3 = 19 then
11693: LD_VAR 0 3
11697: PUSH
11698: LD_INT 19
11700: EQUAL
11701: IFFALSE 11711
// sTank := true ;
11703: LD_ADDR_EXP 74
11707: PUSH
11708: LD_INT 1
11710: ST_TO_ADDR
// if p3 = 20 then
11711: LD_VAR 0 3
11715: PUSH
11716: LD_INT 20
11718: EQUAL
11719: IFFALSE 11729
// sRemote := true ;
11721: LD_ADDR_EXP 75
11725: PUSH
11726: LD_INT 1
11728: ST_TO_ADDR
// if p3 = 21 then
11729: LD_VAR 0 3
11733: PUSH
11734: LD_INT 21
11736: EQUAL
11737: IFFALSE 11747
// sPowell := true ;
11739: LD_ADDR_EXP 76
11743: PUSH
11744: LD_INT 1
11746: ST_TO_ADDR
// if p3 = 22 then
11747: LD_VAR 0 3
11751: PUSH
11752: LD_INT 22
11754: EQUAL
11755: IFFALSE 11765
// sTeleport := true ;
11757: LD_ADDR_EXP 79
11761: PUSH
11762: LD_INT 1
11764: ST_TO_ADDR
// if p3 = 23 then
11765: LD_VAR 0 3
11769: PUSH
11770: LD_INT 23
11772: EQUAL
11773: IFFALSE 11783
// sOilTower := true ;
11775: LD_ADDR_EXP 81
11779: PUSH
11780: LD_INT 1
11782: ST_TO_ADDR
// if p3 = 24 then
11783: LD_VAR 0 3
11787: PUSH
11788: LD_INT 24
11790: EQUAL
11791: IFFALSE 11801
// sShovel := true ;
11793: LD_ADDR_EXP 82
11797: PUSH
11798: LD_INT 1
11800: ST_TO_ADDR
// if p3 = 25 then
11801: LD_VAR 0 3
11805: PUSH
11806: LD_INT 25
11808: EQUAL
11809: IFFALSE 11819
// sSheik := true ;
11811: LD_ADDR_EXP 83
11815: PUSH
11816: LD_INT 1
11818: ST_TO_ADDR
// if p3 = 26 then
11819: LD_VAR 0 3
11823: PUSH
11824: LD_INT 26
11826: EQUAL
11827: IFFALSE 11837
// sEarthquake := true ;
11829: LD_ADDR_EXP 85
11833: PUSH
11834: LD_INT 1
11836: ST_TO_ADDR
// if p3 = 27 then
11837: LD_VAR 0 3
11841: PUSH
11842: LD_INT 27
11844: EQUAL
11845: IFFALSE 11855
// sAI := true ;
11847: LD_ADDR_EXP 86
11851: PUSH
11852: LD_INT 1
11854: ST_TO_ADDR
// if p3 = 28 then
11855: LD_VAR 0 3
11859: PUSH
11860: LD_INT 28
11862: EQUAL
11863: IFFALSE 11873
// sCargo := true ;
11865: LD_ADDR_EXP 89
11869: PUSH
11870: LD_INT 1
11872: ST_TO_ADDR
// if p3 = 29 then
11873: LD_VAR 0 3
11877: PUSH
11878: LD_INT 29
11880: EQUAL
11881: IFFALSE 11891
// sDLaser := true ;
11883: LD_ADDR_EXP 90
11887: PUSH
11888: LD_INT 1
11890: ST_TO_ADDR
// if p3 = 30 then
11891: LD_VAR 0 3
11895: PUSH
11896: LD_INT 30
11898: EQUAL
11899: IFFALSE 11909
// sExchange := true ;
11901: LD_ADDR_EXP 91
11905: PUSH
11906: LD_INT 1
11908: ST_TO_ADDR
// if p3 = 31 then
11909: LD_VAR 0 3
11913: PUSH
11914: LD_INT 31
11916: EQUAL
11917: IFFALSE 11927
// sFac := true ;
11919: LD_ADDR_EXP 92
11923: PUSH
11924: LD_INT 1
11926: ST_TO_ADDR
// if p3 = 32 then
11927: LD_VAR 0 3
11931: PUSH
11932: LD_INT 32
11934: EQUAL
11935: IFFALSE 11945
// sPower := true ;
11937: LD_ADDR_EXP 93
11941: PUSH
11942: LD_INT 1
11944: ST_TO_ADDR
// if p3 = 33 then
11945: LD_VAR 0 3
11949: PUSH
11950: LD_INT 33
11952: EQUAL
11953: IFFALSE 11963
// sRandom := true ;
11955: LD_ADDR_EXP 94
11959: PUSH
11960: LD_INT 1
11962: ST_TO_ADDR
// if p3 = 34 then
11963: LD_VAR 0 3
11967: PUSH
11968: LD_INT 34
11970: EQUAL
11971: IFFALSE 11981
// sShield := true ;
11973: LD_ADDR_EXP 95
11977: PUSH
11978: LD_INT 1
11980: ST_TO_ADDR
// if p3 = 35 then
11981: LD_VAR 0 3
11985: PUSH
11986: LD_INT 35
11988: EQUAL
11989: IFFALSE 11999
// sTime := true ;
11991: LD_ADDR_EXP 96
11995: PUSH
11996: LD_INT 1
11998: ST_TO_ADDR
// if p3 = 36 then
11999: LD_VAR 0 3
12003: PUSH
12004: LD_INT 36
12006: EQUAL
12007: IFFALSE 12017
// sTools := true ;
12009: LD_ADDR_EXP 97
12013: PUSH
12014: LD_INT 1
12016: ST_TO_ADDR
// if p3 = 101 then
12017: LD_VAR 0 3
12021: PUSH
12022: LD_INT 101
12024: EQUAL
12025: IFFALSE 12035
// sSold := true ;
12027: LD_ADDR_EXP 62
12031: PUSH
12032: LD_INT 1
12034: ST_TO_ADDR
// if p3 = 102 then
12035: LD_VAR 0 3
12039: PUSH
12040: LD_INT 102
12042: EQUAL
12043: IFFALSE 12053
// sDiff := true ;
12045: LD_ADDR_EXP 63
12049: PUSH
12050: LD_INT 1
12052: ST_TO_ADDR
// if p3 = 103 then
12053: LD_VAR 0 3
12057: PUSH
12058: LD_INT 103
12060: EQUAL
12061: IFFALSE 12071
// sFog := true ;
12063: LD_ADDR_EXP 66
12067: PUSH
12068: LD_INT 1
12070: ST_TO_ADDR
// if p3 = 104 then
12071: LD_VAR 0 3
12075: PUSH
12076: LD_INT 104
12078: EQUAL
12079: IFFALSE 12089
// sReset := true ;
12081: LD_ADDR_EXP 67
12085: PUSH
12086: LD_INT 1
12088: ST_TO_ADDR
// if p3 = 105 then
12089: LD_VAR 0 3
12093: PUSH
12094: LD_INT 105
12096: EQUAL
12097: IFFALSE 12107
// sSun := true ;
12099: LD_ADDR_EXP 68
12103: PUSH
12104: LD_INT 1
12106: ST_TO_ADDR
// if p3 = 106 then
12107: LD_VAR 0 3
12111: PUSH
12112: LD_INT 106
12114: EQUAL
12115: IFFALSE 12125
// sTiger := true ;
12117: LD_ADDR_EXP 64
12121: PUSH
12122: LD_INT 1
12124: ST_TO_ADDR
// if p3 = 107 then
12125: LD_VAR 0 3
12129: PUSH
12130: LD_INT 107
12132: EQUAL
12133: IFFALSE 12143
// sBomb := true ;
12135: LD_ADDR_EXP 65
12139: PUSH
12140: LD_INT 1
12142: ST_TO_ADDR
// if p3 = 108 then
12143: LD_VAR 0 3
12147: PUSH
12148: LD_INT 108
12150: EQUAL
12151: IFFALSE 12161
// sWound := true ;
12153: LD_ADDR_EXP 73
12157: PUSH
12158: LD_INT 1
12160: ST_TO_ADDR
// if p3 = 109 then
12161: LD_VAR 0 3
12165: PUSH
12166: LD_INT 109
12168: EQUAL
12169: IFFALSE 12179
// sBetray := true ;
12171: LD_ADDR_EXP 77
12175: PUSH
12176: LD_INT 1
12178: ST_TO_ADDR
// if p3 = 110 then
12179: LD_VAR 0 3
12183: PUSH
12184: LD_INT 110
12186: EQUAL
12187: IFFALSE 12197
// sContamin := true ;
12189: LD_ADDR_EXP 78
12193: PUSH
12194: LD_INT 1
12196: ST_TO_ADDR
// if p3 = 111 then
12197: LD_VAR 0 3
12201: PUSH
12202: LD_INT 111
12204: EQUAL
12205: IFFALSE 12215
// sOil := true ;
12207: LD_ADDR_EXP 80
12211: PUSH
12212: LD_INT 1
12214: ST_TO_ADDR
// if p3 = 112 then
12215: LD_VAR 0 3
12219: PUSH
12220: LD_INT 112
12222: EQUAL
12223: IFFALSE 12233
// sStu := true ;
12225: LD_ADDR_EXP 84
12229: PUSH
12230: LD_INT 1
12232: ST_TO_ADDR
// if p3 = 113 then
12233: LD_VAR 0 3
12237: PUSH
12238: LD_INT 113
12240: EQUAL
12241: IFFALSE 12251
// sBazooka := true ;
12243: LD_ADDR_EXP 87
12247: PUSH
12248: LD_INT 1
12250: ST_TO_ADDR
// if p3 = 114 then
12251: LD_VAR 0 3
12255: PUSH
12256: LD_INT 114
12258: EQUAL
12259: IFFALSE 12269
// sMortar := true ;
12261: LD_ADDR_EXP 88
12265: PUSH
12266: LD_INT 1
12268: ST_TO_ADDR
// if p3 = 115 then
12269: LD_VAR 0 3
12273: PUSH
12274: LD_INT 115
12276: EQUAL
12277: IFFALSE 12287
// sRanger := true ;
12279: LD_ADDR_EXP 98
12283: PUSH
12284: LD_INT 1
12286: ST_TO_ADDR
// if p3 = 116 then
12287: LD_VAR 0 3
12291: PUSH
12292: LD_INT 116
12294: EQUAL
12295: IFFALSE 12305
// sComputer := true ;
12297: LD_ADDR_EXP 99
12301: PUSH
12302: LD_INT 1
12304: ST_TO_ADDR
// if p3 = 117 then
12305: LD_VAR 0 3
12309: PUSH
12310: LD_INT 117
12312: EQUAL
12313: IFFALSE 12323
// s30 := true ;
12315: LD_ADDR_EXP 100
12319: PUSH
12320: LD_INT 1
12322: ST_TO_ADDR
// if p3 = 118 then
12323: LD_VAR 0 3
12327: PUSH
12328: LD_INT 118
12330: EQUAL
12331: IFFALSE 12341
// s60 := true ;
12333: LD_ADDR_EXP 101
12337: PUSH
12338: LD_INT 1
12340: ST_TO_ADDR
// end ; if p2 = 101 then
12341: LD_VAR 0 2
12345: PUSH
12346: LD_INT 101
12348: EQUAL
12349: IFFALSE 12477
// begin case p3 of 1 :
12351: LD_VAR 0 3
12355: PUSH
12356: LD_INT 1
12358: DOUBLE
12359: EQUAL
12360: IFTRUE 12364
12362: GO 12371
12364: POP
// hHackUnlimitedResources ; 2 :
12365: CALL 24575 0 0
12369: GO 12477
12371: LD_INT 2
12373: DOUBLE
12374: EQUAL
12375: IFTRUE 12379
12377: GO 12386
12379: POP
// hHackSetLevel10 ; 3 :
12380: CALL 24708 0 0
12384: GO 12477
12386: LD_INT 3
12388: DOUBLE
12389: EQUAL
12390: IFTRUE 12394
12392: GO 12401
12394: POP
// hHackSetLevel10YourUnits ; 4 :
12395: CALL 24793 0 0
12399: GO 12477
12401: LD_INT 4
12403: DOUBLE
12404: EQUAL
12405: IFTRUE 12409
12407: GO 12416
12409: POP
// hHackInvincible ; 5 :
12410: CALL 25241 0 0
12414: GO 12477
12416: LD_INT 5
12418: DOUBLE
12419: EQUAL
12420: IFTRUE 12424
12422: GO 12431
12424: POP
// hHackInvisible ; 6 :
12425: CALL 25352 0 0
12429: GO 12477
12431: LD_INT 6
12433: DOUBLE
12434: EQUAL
12435: IFTRUE 12439
12437: GO 12446
12439: POP
// hHackChangeYourSide ; 7 :
12440: CALL 25409 0 0
12444: GO 12477
12446: LD_INT 7
12448: DOUBLE
12449: EQUAL
12450: IFTRUE 12454
12452: GO 12461
12454: POP
// hHackChangeUnitSide ; 8 :
12455: CALL 25451 0 0
12459: GO 12477
12461: LD_INT 8
12463: DOUBLE
12464: EQUAL
12465: IFTRUE 12469
12467: GO 12476
12469: POP
// hHackFog ; end ;
12470: CALL 25552 0 0
12474: GO 12477
12476: POP
// end ; end ;
12477: LD_VAR 0 7
12481: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
12482: GO 12484
12484: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
12485: LD_STRING initStreamRollete();
12487: PPUSH
12488: CALL_OW 559
// InitStreamMode ;
12492: CALL 12504 0 0
// DefineStreamItems ( false ) ;
12496: LD_INT 0
12498: PPUSH
12499: CALL 12968 0 1
// end ;
12503: END
// function InitStreamMode ; begin
12504: LD_INT 0
12506: PPUSH
// streamModeActive := false ;
12507: LD_ADDR_EXP 45
12511: PUSH
12512: LD_INT 0
12514: ST_TO_ADDR
// normalCounter := 36 ;
12515: LD_ADDR_EXP 46
12519: PUSH
12520: LD_INT 36
12522: ST_TO_ADDR
// hardcoreCounter := 18 ;
12523: LD_ADDR_EXP 47
12527: PUSH
12528: LD_INT 18
12530: ST_TO_ADDR
// sRocket := false ;
12531: LD_ADDR_EXP 50
12535: PUSH
12536: LD_INT 0
12538: ST_TO_ADDR
// sSpeed := false ;
12539: LD_ADDR_EXP 49
12543: PUSH
12544: LD_INT 0
12546: ST_TO_ADDR
// sEngine := false ;
12547: LD_ADDR_EXP 51
12551: PUSH
12552: LD_INT 0
12554: ST_TO_ADDR
// sSpec := false ;
12555: LD_ADDR_EXP 48
12559: PUSH
12560: LD_INT 0
12562: ST_TO_ADDR
// sLevel := false ;
12563: LD_ADDR_EXP 52
12567: PUSH
12568: LD_INT 0
12570: ST_TO_ADDR
// sArmoury := false ;
12571: LD_ADDR_EXP 53
12575: PUSH
12576: LD_INT 0
12578: ST_TO_ADDR
// sRadar := false ;
12579: LD_ADDR_EXP 54
12583: PUSH
12584: LD_INT 0
12586: ST_TO_ADDR
// sBunker := false ;
12587: LD_ADDR_EXP 55
12591: PUSH
12592: LD_INT 0
12594: ST_TO_ADDR
// sHack := false ;
12595: LD_ADDR_EXP 56
12599: PUSH
12600: LD_INT 0
12602: ST_TO_ADDR
// sFire := false ;
12603: LD_ADDR_EXP 57
12607: PUSH
12608: LD_INT 0
12610: ST_TO_ADDR
// sRefresh := false ;
12611: LD_ADDR_EXP 58
12615: PUSH
12616: LD_INT 0
12618: ST_TO_ADDR
// sExp := false ;
12619: LD_ADDR_EXP 59
12623: PUSH
12624: LD_INT 0
12626: ST_TO_ADDR
// sDepot := false ;
12627: LD_ADDR_EXP 60
12631: PUSH
12632: LD_INT 0
12634: ST_TO_ADDR
// sFlag := false ;
12635: LD_ADDR_EXP 61
12639: PUSH
12640: LD_INT 0
12642: ST_TO_ADDR
// sKamikadze := false ;
12643: LD_ADDR_EXP 69
12647: PUSH
12648: LD_INT 0
12650: ST_TO_ADDR
// sTroll := false ;
12651: LD_ADDR_EXP 70
12655: PUSH
12656: LD_INT 0
12658: ST_TO_ADDR
// sSlow := false ;
12659: LD_ADDR_EXP 71
12663: PUSH
12664: LD_INT 0
12666: ST_TO_ADDR
// sLack := false ;
12667: LD_ADDR_EXP 72
12671: PUSH
12672: LD_INT 0
12674: ST_TO_ADDR
// sTank := false ;
12675: LD_ADDR_EXP 74
12679: PUSH
12680: LD_INT 0
12682: ST_TO_ADDR
// sRemote := false ;
12683: LD_ADDR_EXP 75
12687: PUSH
12688: LD_INT 0
12690: ST_TO_ADDR
// sPowell := false ;
12691: LD_ADDR_EXP 76
12695: PUSH
12696: LD_INT 0
12698: ST_TO_ADDR
// sTeleport := false ;
12699: LD_ADDR_EXP 79
12703: PUSH
12704: LD_INT 0
12706: ST_TO_ADDR
// sOilTower := false ;
12707: LD_ADDR_EXP 81
12711: PUSH
12712: LD_INT 0
12714: ST_TO_ADDR
// sShovel := false ;
12715: LD_ADDR_EXP 82
12719: PUSH
12720: LD_INT 0
12722: ST_TO_ADDR
// sSheik := false ;
12723: LD_ADDR_EXP 83
12727: PUSH
12728: LD_INT 0
12730: ST_TO_ADDR
// sEarthquake := false ;
12731: LD_ADDR_EXP 85
12735: PUSH
12736: LD_INT 0
12738: ST_TO_ADDR
// sAI := false ;
12739: LD_ADDR_EXP 86
12743: PUSH
12744: LD_INT 0
12746: ST_TO_ADDR
// sCargo := false ;
12747: LD_ADDR_EXP 89
12751: PUSH
12752: LD_INT 0
12754: ST_TO_ADDR
// sDLaser := false ;
12755: LD_ADDR_EXP 90
12759: PUSH
12760: LD_INT 0
12762: ST_TO_ADDR
// sExchange := false ;
12763: LD_ADDR_EXP 91
12767: PUSH
12768: LD_INT 0
12770: ST_TO_ADDR
// sFac := false ;
12771: LD_ADDR_EXP 92
12775: PUSH
12776: LD_INT 0
12778: ST_TO_ADDR
// sPower := false ;
12779: LD_ADDR_EXP 93
12783: PUSH
12784: LD_INT 0
12786: ST_TO_ADDR
// sRandom := false ;
12787: LD_ADDR_EXP 94
12791: PUSH
12792: LD_INT 0
12794: ST_TO_ADDR
// sShield := false ;
12795: LD_ADDR_EXP 95
12799: PUSH
12800: LD_INT 0
12802: ST_TO_ADDR
// sTime := false ;
12803: LD_ADDR_EXP 96
12807: PUSH
12808: LD_INT 0
12810: ST_TO_ADDR
// sTools := false ;
12811: LD_ADDR_EXP 97
12815: PUSH
12816: LD_INT 0
12818: ST_TO_ADDR
// sSold := false ;
12819: LD_ADDR_EXP 62
12823: PUSH
12824: LD_INT 0
12826: ST_TO_ADDR
// sDiff := false ;
12827: LD_ADDR_EXP 63
12831: PUSH
12832: LD_INT 0
12834: ST_TO_ADDR
// sFog := false ;
12835: LD_ADDR_EXP 66
12839: PUSH
12840: LD_INT 0
12842: ST_TO_ADDR
// sReset := false ;
12843: LD_ADDR_EXP 67
12847: PUSH
12848: LD_INT 0
12850: ST_TO_ADDR
// sSun := false ;
12851: LD_ADDR_EXP 68
12855: PUSH
12856: LD_INT 0
12858: ST_TO_ADDR
// sTiger := false ;
12859: LD_ADDR_EXP 64
12863: PUSH
12864: LD_INT 0
12866: ST_TO_ADDR
// sBomb := false ;
12867: LD_ADDR_EXP 65
12871: PUSH
12872: LD_INT 0
12874: ST_TO_ADDR
// sWound := false ;
12875: LD_ADDR_EXP 73
12879: PUSH
12880: LD_INT 0
12882: ST_TO_ADDR
// sBetray := false ;
12883: LD_ADDR_EXP 77
12887: PUSH
12888: LD_INT 0
12890: ST_TO_ADDR
// sContamin := false ;
12891: LD_ADDR_EXP 78
12895: PUSH
12896: LD_INT 0
12898: ST_TO_ADDR
// sOil := false ;
12899: LD_ADDR_EXP 80
12903: PUSH
12904: LD_INT 0
12906: ST_TO_ADDR
// sStu := false ;
12907: LD_ADDR_EXP 84
12911: PUSH
12912: LD_INT 0
12914: ST_TO_ADDR
// sBazooka := false ;
12915: LD_ADDR_EXP 87
12919: PUSH
12920: LD_INT 0
12922: ST_TO_ADDR
// sMortar := false ;
12923: LD_ADDR_EXP 88
12927: PUSH
12928: LD_INT 0
12930: ST_TO_ADDR
// sRanger := false ;
12931: LD_ADDR_EXP 98
12935: PUSH
12936: LD_INT 0
12938: ST_TO_ADDR
// sComputer := false ;
12939: LD_ADDR_EXP 99
12943: PUSH
12944: LD_INT 0
12946: ST_TO_ADDR
// s30 := false ;
12947: LD_ADDR_EXP 100
12951: PUSH
12952: LD_INT 0
12954: ST_TO_ADDR
// s60 := false ;
12955: LD_ADDR_EXP 101
12959: PUSH
12960: LD_INT 0
12962: ST_TO_ADDR
// end ;
12963: LD_VAR 0 1
12967: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
12968: LD_INT 0
12970: PPUSH
12971: PPUSH
12972: PPUSH
12973: PPUSH
12974: PPUSH
12975: PPUSH
12976: PPUSH
// result := [ ] ;
12977: LD_ADDR_VAR 0 2
12981: PUSH
12982: EMPTY
12983: ST_TO_ADDR
// if campaign_id = 1 then
12984: LD_OWVAR 69
12988: PUSH
12989: LD_INT 1
12991: EQUAL
12992: IFFALSE 16158
// begin case mission_number of 1 :
12994: LD_OWVAR 70
12998: PUSH
12999: LD_INT 1
13001: DOUBLE
13002: EQUAL
13003: IFTRUE 13007
13005: GO 13083
13007: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
13008: LD_ADDR_VAR 0 2
13012: PUSH
13013: LD_INT 2
13015: PUSH
13016: LD_INT 4
13018: PUSH
13019: LD_INT 11
13021: PUSH
13022: LD_INT 12
13024: PUSH
13025: LD_INT 15
13027: PUSH
13028: LD_INT 16
13030: PUSH
13031: LD_INT 22
13033: PUSH
13034: LD_INT 23
13036: PUSH
13037: LD_INT 26
13039: PUSH
13040: EMPTY
13041: LIST
13042: LIST
13043: LIST
13044: LIST
13045: LIST
13046: LIST
13047: LIST
13048: LIST
13049: LIST
13050: PUSH
13051: LD_INT 101
13053: PUSH
13054: LD_INT 102
13056: PUSH
13057: LD_INT 106
13059: PUSH
13060: LD_INT 116
13062: PUSH
13063: LD_INT 117
13065: PUSH
13066: LD_INT 118
13068: PUSH
13069: EMPTY
13070: LIST
13071: LIST
13072: LIST
13073: LIST
13074: LIST
13075: LIST
13076: PUSH
13077: EMPTY
13078: LIST
13079: LIST
13080: ST_TO_ADDR
13081: GO 16156
13083: LD_INT 2
13085: DOUBLE
13086: EQUAL
13087: IFTRUE 13091
13089: GO 13175
13091: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
13092: LD_ADDR_VAR 0 2
13096: PUSH
13097: LD_INT 2
13099: PUSH
13100: LD_INT 4
13102: PUSH
13103: LD_INT 11
13105: PUSH
13106: LD_INT 12
13108: PUSH
13109: LD_INT 15
13111: PUSH
13112: LD_INT 16
13114: PUSH
13115: LD_INT 22
13117: PUSH
13118: LD_INT 23
13120: PUSH
13121: LD_INT 26
13123: PUSH
13124: EMPTY
13125: LIST
13126: LIST
13127: LIST
13128: LIST
13129: LIST
13130: LIST
13131: LIST
13132: LIST
13133: LIST
13134: PUSH
13135: LD_INT 101
13137: PUSH
13138: LD_INT 102
13140: PUSH
13141: LD_INT 105
13143: PUSH
13144: LD_INT 106
13146: PUSH
13147: LD_INT 108
13149: PUSH
13150: LD_INT 116
13152: PUSH
13153: LD_INT 117
13155: PUSH
13156: LD_INT 118
13158: PUSH
13159: EMPTY
13160: LIST
13161: LIST
13162: LIST
13163: LIST
13164: LIST
13165: LIST
13166: LIST
13167: LIST
13168: PUSH
13169: EMPTY
13170: LIST
13171: LIST
13172: ST_TO_ADDR
13173: GO 16156
13175: LD_INT 3
13177: DOUBLE
13178: EQUAL
13179: IFTRUE 13183
13181: GO 13271
13183: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
13184: LD_ADDR_VAR 0 2
13188: PUSH
13189: LD_INT 2
13191: PUSH
13192: LD_INT 4
13194: PUSH
13195: LD_INT 5
13197: PUSH
13198: LD_INT 11
13200: PUSH
13201: LD_INT 12
13203: PUSH
13204: LD_INT 15
13206: PUSH
13207: LD_INT 16
13209: PUSH
13210: LD_INT 22
13212: PUSH
13213: LD_INT 26
13215: PUSH
13216: LD_INT 36
13218: PUSH
13219: EMPTY
13220: LIST
13221: LIST
13222: LIST
13223: LIST
13224: LIST
13225: LIST
13226: LIST
13227: LIST
13228: LIST
13229: LIST
13230: PUSH
13231: LD_INT 101
13233: PUSH
13234: LD_INT 102
13236: PUSH
13237: LD_INT 105
13239: PUSH
13240: LD_INT 106
13242: PUSH
13243: LD_INT 108
13245: PUSH
13246: LD_INT 116
13248: PUSH
13249: LD_INT 117
13251: PUSH
13252: LD_INT 118
13254: PUSH
13255: EMPTY
13256: LIST
13257: LIST
13258: LIST
13259: LIST
13260: LIST
13261: LIST
13262: LIST
13263: LIST
13264: PUSH
13265: EMPTY
13266: LIST
13267: LIST
13268: ST_TO_ADDR
13269: GO 16156
13271: LD_INT 4
13273: DOUBLE
13274: EQUAL
13275: IFTRUE 13279
13277: GO 13375
13279: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
13280: LD_ADDR_VAR 0 2
13284: PUSH
13285: LD_INT 2
13287: PUSH
13288: LD_INT 4
13290: PUSH
13291: LD_INT 5
13293: PUSH
13294: LD_INT 8
13296: PUSH
13297: LD_INT 11
13299: PUSH
13300: LD_INT 12
13302: PUSH
13303: LD_INT 15
13305: PUSH
13306: LD_INT 16
13308: PUSH
13309: LD_INT 22
13311: PUSH
13312: LD_INT 23
13314: PUSH
13315: LD_INT 26
13317: PUSH
13318: LD_INT 36
13320: PUSH
13321: EMPTY
13322: LIST
13323: LIST
13324: LIST
13325: LIST
13326: LIST
13327: LIST
13328: LIST
13329: LIST
13330: LIST
13331: LIST
13332: LIST
13333: LIST
13334: PUSH
13335: LD_INT 101
13337: PUSH
13338: LD_INT 102
13340: PUSH
13341: LD_INT 105
13343: PUSH
13344: LD_INT 106
13346: PUSH
13347: LD_INT 108
13349: PUSH
13350: LD_INT 116
13352: PUSH
13353: LD_INT 117
13355: PUSH
13356: LD_INT 118
13358: PUSH
13359: EMPTY
13360: LIST
13361: LIST
13362: LIST
13363: LIST
13364: LIST
13365: LIST
13366: LIST
13367: LIST
13368: PUSH
13369: EMPTY
13370: LIST
13371: LIST
13372: ST_TO_ADDR
13373: GO 16156
13375: LD_INT 5
13377: DOUBLE
13378: EQUAL
13379: IFTRUE 13383
13381: GO 13495
13383: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
13384: LD_ADDR_VAR 0 2
13388: PUSH
13389: LD_INT 2
13391: PUSH
13392: LD_INT 4
13394: PUSH
13395: LD_INT 5
13397: PUSH
13398: LD_INT 6
13400: PUSH
13401: LD_INT 8
13403: PUSH
13404: LD_INT 11
13406: PUSH
13407: LD_INT 12
13409: PUSH
13410: LD_INT 15
13412: PUSH
13413: LD_INT 16
13415: PUSH
13416: LD_INT 22
13418: PUSH
13419: LD_INT 23
13421: PUSH
13422: LD_INT 25
13424: PUSH
13425: LD_INT 26
13427: PUSH
13428: LD_INT 36
13430: PUSH
13431: EMPTY
13432: LIST
13433: LIST
13434: LIST
13435: LIST
13436: LIST
13437: LIST
13438: LIST
13439: LIST
13440: LIST
13441: LIST
13442: LIST
13443: LIST
13444: LIST
13445: LIST
13446: PUSH
13447: LD_INT 101
13449: PUSH
13450: LD_INT 102
13452: PUSH
13453: LD_INT 105
13455: PUSH
13456: LD_INT 106
13458: PUSH
13459: LD_INT 108
13461: PUSH
13462: LD_INT 109
13464: PUSH
13465: LD_INT 112
13467: PUSH
13468: LD_INT 116
13470: PUSH
13471: LD_INT 117
13473: PUSH
13474: LD_INT 118
13476: PUSH
13477: EMPTY
13478: LIST
13479: LIST
13480: LIST
13481: LIST
13482: LIST
13483: LIST
13484: LIST
13485: LIST
13486: LIST
13487: LIST
13488: PUSH
13489: EMPTY
13490: LIST
13491: LIST
13492: ST_TO_ADDR
13493: GO 16156
13495: LD_INT 6
13497: DOUBLE
13498: EQUAL
13499: IFTRUE 13503
13501: GO 13635
13503: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
13504: LD_ADDR_VAR 0 2
13508: PUSH
13509: LD_INT 2
13511: PUSH
13512: LD_INT 4
13514: PUSH
13515: LD_INT 5
13517: PUSH
13518: LD_INT 6
13520: PUSH
13521: LD_INT 8
13523: PUSH
13524: LD_INT 11
13526: PUSH
13527: LD_INT 12
13529: PUSH
13530: LD_INT 15
13532: PUSH
13533: LD_INT 16
13535: PUSH
13536: LD_INT 20
13538: PUSH
13539: LD_INT 21
13541: PUSH
13542: LD_INT 22
13544: PUSH
13545: LD_INT 23
13547: PUSH
13548: LD_INT 25
13550: PUSH
13551: LD_INT 26
13553: PUSH
13554: LD_INT 30
13556: PUSH
13557: LD_INT 31
13559: PUSH
13560: LD_INT 32
13562: PUSH
13563: LD_INT 36
13565: PUSH
13566: EMPTY
13567: LIST
13568: LIST
13569: LIST
13570: LIST
13571: LIST
13572: LIST
13573: LIST
13574: LIST
13575: LIST
13576: LIST
13577: LIST
13578: LIST
13579: LIST
13580: LIST
13581: LIST
13582: LIST
13583: LIST
13584: LIST
13585: LIST
13586: PUSH
13587: LD_INT 101
13589: PUSH
13590: LD_INT 102
13592: PUSH
13593: LD_INT 105
13595: PUSH
13596: LD_INT 106
13598: PUSH
13599: LD_INT 108
13601: PUSH
13602: LD_INT 109
13604: PUSH
13605: LD_INT 112
13607: PUSH
13608: LD_INT 116
13610: PUSH
13611: LD_INT 117
13613: PUSH
13614: LD_INT 118
13616: PUSH
13617: EMPTY
13618: LIST
13619: LIST
13620: LIST
13621: LIST
13622: LIST
13623: LIST
13624: LIST
13625: LIST
13626: LIST
13627: LIST
13628: PUSH
13629: EMPTY
13630: LIST
13631: LIST
13632: ST_TO_ADDR
13633: GO 16156
13635: LD_INT 7
13637: DOUBLE
13638: EQUAL
13639: IFTRUE 13643
13641: GO 13755
13643: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
13644: LD_ADDR_VAR 0 2
13648: PUSH
13649: LD_INT 2
13651: PUSH
13652: LD_INT 4
13654: PUSH
13655: LD_INT 5
13657: PUSH
13658: LD_INT 7
13660: PUSH
13661: LD_INT 11
13663: PUSH
13664: LD_INT 12
13666: PUSH
13667: LD_INT 15
13669: PUSH
13670: LD_INT 16
13672: PUSH
13673: LD_INT 20
13675: PUSH
13676: LD_INT 21
13678: PUSH
13679: LD_INT 22
13681: PUSH
13682: LD_INT 23
13684: PUSH
13685: LD_INT 25
13687: PUSH
13688: LD_INT 26
13690: PUSH
13691: EMPTY
13692: LIST
13693: LIST
13694: LIST
13695: LIST
13696: LIST
13697: LIST
13698: LIST
13699: LIST
13700: LIST
13701: LIST
13702: LIST
13703: LIST
13704: LIST
13705: LIST
13706: PUSH
13707: LD_INT 101
13709: PUSH
13710: LD_INT 102
13712: PUSH
13713: LD_INT 103
13715: PUSH
13716: LD_INT 105
13718: PUSH
13719: LD_INT 106
13721: PUSH
13722: LD_INT 108
13724: PUSH
13725: LD_INT 112
13727: PUSH
13728: LD_INT 116
13730: PUSH
13731: LD_INT 117
13733: PUSH
13734: LD_INT 118
13736: PUSH
13737: EMPTY
13738: LIST
13739: LIST
13740: LIST
13741: LIST
13742: LIST
13743: LIST
13744: LIST
13745: LIST
13746: LIST
13747: LIST
13748: PUSH
13749: EMPTY
13750: LIST
13751: LIST
13752: ST_TO_ADDR
13753: GO 16156
13755: LD_INT 8
13757: DOUBLE
13758: EQUAL
13759: IFTRUE 13763
13761: GO 13903
13763: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
13764: LD_ADDR_VAR 0 2
13768: PUSH
13769: LD_INT 2
13771: PUSH
13772: LD_INT 4
13774: PUSH
13775: LD_INT 5
13777: PUSH
13778: LD_INT 6
13780: PUSH
13781: LD_INT 7
13783: PUSH
13784: LD_INT 8
13786: PUSH
13787: LD_INT 11
13789: PUSH
13790: LD_INT 12
13792: PUSH
13793: LD_INT 15
13795: PUSH
13796: LD_INT 16
13798: PUSH
13799: LD_INT 20
13801: PUSH
13802: LD_INT 21
13804: PUSH
13805: LD_INT 22
13807: PUSH
13808: LD_INT 23
13810: PUSH
13811: LD_INT 25
13813: PUSH
13814: LD_INT 26
13816: PUSH
13817: LD_INT 30
13819: PUSH
13820: LD_INT 31
13822: PUSH
13823: LD_INT 32
13825: PUSH
13826: LD_INT 36
13828: PUSH
13829: EMPTY
13830: LIST
13831: LIST
13832: LIST
13833: LIST
13834: LIST
13835: LIST
13836: LIST
13837: LIST
13838: LIST
13839: LIST
13840: LIST
13841: LIST
13842: LIST
13843: LIST
13844: LIST
13845: LIST
13846: LIST
13847: LIST
13848: LIST
13849: LIST
13850: PUSH
13851: LD_INT 101
13853: PUSH
13854: LD_INT 102
13856: PUSH
13857: LD_INT 103
13859: PUSH
13860: LD_INT 105
13862: PUSH
13863: LD_INT 106
13865: PUSH
13866: LD_INT 108
13868: PUSH
13869: LD_INT 109
13871: PUSH
13872: LD_INT 112
13874: PUSH
13875: LD_INT 116
13877: PUSH
13878: LD_INT 117
13880: PUSH
13881: LD_INT 118
13883: PUSH
13884: EMPTY
13885: LIST
13886: LIST
13887: LIST
13888: LIST
13889: LIST
13890: LIST
13891: LIST
13892: LIST
13893: LIST
13894: LIST
13895: LIST
13896: PUSH
13897: EMPTY
13898: LIST
13899: LIST
13900: ST_TO_ADDR
13901: GO 16156
13903: LD_INT 9
13905: DOUBLE
13906: EQUAL
13907: IFTRUE 13911
13909: GO 14059
13911: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
13912: LD_ADDR_VAR 0 2
13916: PUSH
13917: LD_INT 2
13919: PUSH
13920: LD_INT 4
13922: PUSH
13923: LD_INT 5
13925: PUSH
13926: LD_INT 6
13928: PUSH
13929: LD_INT 7
13931: PUSH
13932: LD_INT 8
13934: PUSH
13935: LD_INT 11
13937: PUSH
13938: LD_INT 12
13940: PUSH
13941: LD_INT 15
13943: PUSH
13944: LD_INT 16
13946: PUSH
13947: LD_INT 20
13949: PUSH
13950: LD_INT 21
13952: PUSH
13953: LD_INT 22
13955: PUSH
13956: LD_INT 23
13958: PUSH
13959: LD_INT 25
13961: PUSH
13962: LD_INT 26
13964: PUSH
13965: LD_INT 28
13967: PUSH
13968: LD_INT 30
13970: PUSH
13971: LD_INT 31
13973: PUSH
13974: LD_INT 32
13976: PUSH
13977: LD_INT 36
13979: PUSH
13980: EMPTY
13981: LIST
13982: LIST
13983: LIST
13984: LIST
13985: LIST
13986: LIST
13987: LIST
13988: LIST
13989: LIST
13990: LIST
13991: LIST
13992: LIST
13993: LIST
13994: LIST
13995: LIST
13996: LIST
13997: LIST
13998: LIST
13999: LIST
14000: LIST
14001: LIST
14002: PUSH
14003: LD_INT 101
14005: PUSH
14006: LD_INT 102
14008: PUSH
14009: LD_INT 103
14011: PUSH
14012: LD_INT 105
14014: PUSH
14015: LD_INT 106
14017: PUSH
14018: LD_INT 108
14020: PUSH
14021: LD_INT 109
14023: PUSH
14024: LD_INT 112
14026: PUSH
14027: LD_INT 114
14029: PUSH
14030: LD_INT 116
14032: PUSH
14033: LD_INT 117
14035: PUSH
14036: LD_INT 118
14038: PUSH
14039: EMPTY
14040: LIST
14041: LIST
14042: LIST
14043: LIST
14044: LIST
14045: LIST
14046: LIST
14047: LIST
14048: LIST
14049: LIST
14050: LIST
14051: LIST
14052: PUSH
14053: EMPTY
14054: LIST
14055: LIST
14056: ST_TO_ADDR
14057: GO 16156
14059: LD_INT 10
14061: DOUBLE
14062: EQUAL
14063: IFTRUE 14067
14065: GO 14263
14067: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
14068: LD_ADDR_VAR 0 2
14072: PUSH
14073: LD_INT 2
14075: PUSH
14076: LD_INT 4
14078: PUSH
14079: LD_INT 5
14081: PUSH
14082: LD_INT 6
14084: PUSH
14085: LD_INT 7
14087: PUSH
14088: LD_INT 8
14090: PUSH
14091: LD_INT 9
14093: PUSH
14094: LD_INT 10
14096: PUSH
14097: LD_INT 11
14099: PUSH
14100: LD_INT 12
14102: PUSH
14103: LD_INT 13
14105: PUSH
14106: LD_INT 14
14108: PUSH
14109: LD_INT 15
14111: PUSH
14112: LD_INT 16
14114: PUSH
14115: LD_INT 17
14117: PUSH
14118: LD_INT 18
14120: PUSH
14121: LD_INT 19
14123: PUSH
14124: LD_INT 20
14126: PUSH
14127: LD_INT 21
14129: PUSH
14130: LD_INT 22
14132: PUSH
14133: LD_INT 23
14135: PUSH
14136: LD_INT 24
14138: PUSH
14139: LD_INT 25
14141: PUSH
14142: LD_INT 26
14144: PUSH
14145: LD_INT 28
14147: PUSH
14148: LD_INT 30
14150: PUSH
14151: LD_INT 31
14153: PUSH
14154: LD_INT 32
14156: PUSH
14157: LD_INT 36
14159: PUSH
14160: EMPTY
14161: LIST
14162: LIST
14163: LIST
14164: LIST
14165: LIST
14166: LIST
14167: LIST
14168: LIST
14169: LIST
14170: LIST
14171: LIST
14172: LIST
14173: LIST
14174: LIST
14175: LIST
14176: LIST
14177: LIST
14178: LIST
14179: LIST
14180: LIST
14181: LIST
14182: LIST
14183: LIST
14184: LIST
14185: LIST
14186: LIST
14187: LIST
14188: LIST
14189: LIST
14190: PUSH
14191: LD_INT 101
14193: PUSH
14194: LD_INT 102
14196: PUSH
14197: LD_INT 103
14199: PUSH
14200: LD_INT 104
14202: PUSH
14203: LD_INT 105
14205: PUSH
14206: LD_INT 106
14208: PUSH
14209: LD_INT 107
14211: PUSH
14212: LD_INT 108
14214: PUSH
14215: LD_INT 109
14217: PUSH
14218: LD_INT 110
14220: PUSH
14221: LD_INT 111
14223: PUSH
14224: LD_INT 112
14226: PUSH
14227: LD_INT 114
14229: PUSH
14230: LD_INT 116
14232: PUSH
14233: LD_INT 117
14235: PUSH
14236: LD_INT 118
14238: PUSH
14239: EMPTY
14240: LIST
14241: LIST
14242: LIST
14243: LIST
14244: LIST
14245: LIST
14246: LIST
14247: LIST
14248: LIST
14249: LIST
14250: LIST
14251: LIST
14252: LIST
14253: LIST
14254: LIST
14255: LIST
14256: PUSH
14257: EMPTY
14258: LIST
14259: LIST
14260: ST_TO_ADDR
14261: GO 16156
14263: LD_INT 11
14265: DOUBLE
14266: EQUAL
14267: IFTRUE 14271
14269: GO 14475
14271: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
14272: LD_ADDR_VAR 0 2
14276: PUSH
14277: LD_INT 2
14279: PUSH
14280: LD_INT 3
14282: PUSH
14283: LD_INT 4
14285: PUSH
14286: LD_INT 5
14288: PUSH
14289: LD_INT 6
14291: PUSH
14292: LD_INT 7
14294: PUSH
14295: LD_INT 8
14297: PUSH
14298: LD_INT 9
14300: PUSH
14301: LD_INT 10
14303: PUSH
14304: LD_INT 11
14306: PUSH
14307: LD_INT 12
14309: PUSH
14310: LD_INT 13
14312: PUSH
14313: LD_INT 14
14315: PUSH
14316: LD_INT 15
14318: PUSH
14319: LD_INT 16
14321: PUSH
14322: LD_INT 17
14324: PUSH
14325: LD_INT 18
14327: PUSH
14328: LD_INT 19
14330: PUSH
14331: LD_INT 20
14333: PUSH
14334: LD_INT 21
14336: PUSH
14337: LD_INT 22
14339: PUSH
14340: LD_INT 23
14342: PUSH
14343: LD_INT 24
14345: PUSH
14346: LD_INT 25
14348: PUSH
14349: LD_INT 26
14351: PUSH
14352: LD_INT 28
14354: PUSH
14355: LD_INT 30
14357: PUSH
14358: LD_INT 31
14360: PUSH
14361: LD_INT 32
14363: PUSH
14364: LD_INT 34
14366: PUSH
14367: LD_INT 36
14369: PUSH
14370: EMPTY
14371: LIST
14372: LIST
14373: LIST
14374: LIST
14375: LIST
14376: LIST
14377: LIST
14378: LIST
14379: LIST
14380: LIST
14381: LIST
14382: LIST
14383: LIST
14384: LIST
14385: LIST
14386: LIST
14387: LIST
14388: LIST
14389: LIST
14390: LIST
14391: LIST
14392: LIST
14393: LIST
14394: LIST
14395: LIST
14396: LIST
14397: LIST
14398: LIST
14399: LIST
14400: LIST
14401: LIST
14402: PUSH
14403: LD_INT 101
14405: PUSH
14406: LD_INT 102
14408: PUSH
14409: LD_INT 103
14411: PUSH
14412: LD_INT 104
14414: PUSH
14415: LD_INT 105
14417: PUSH
14418: LD_INT 106
14420: PUSH
14421: LD_INT 107
14423: PUSH
14424: LD_INT 108
14426: PUSH
14427: LD_INT 109
14429: PUSH
14430: LD_INT 110
14432: PUSH
14433: LD_INT 111
14435: PUSH
14436: LD_INT 112
14438: PUSH
14439: LD_INT 114
14441: PUSH
14442: LD_INT 116
14444: PUSH
14445: LD_INT 117
14447: PUSH
14448: LD_INT 118
14450: PUSH
14451: EMPTY
14452: LIST
14453: LIST
14454: LIST
14455: LIST
14456: LIST
14457: LIST
14458: LIST
14459: LIST
14460: LIST
14461: LIST
14462: LIST
14463: LIST
14464: LIST
14465: LIST
14466: LIST
14467: LIST
14468: PUSH
14469: EMPTY
14470: LIST
14471: LIST
14472: ST_TO_ADDR
14473: GO 16156
14475: LD_INT 12
14477: DOUBLE
14478: EQUAL
14479: IFTRUE 14483
14481: GO 14703
14483: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
14484: LD_ADDR_VAR 0 2
14488: PUSH
14489: LD_INT 1
14491: PUSH
14492: LD_INT 2
14494: PUSH
14495: LD_INT 3
14497: PUSH
14498: LD_INT 4
14500: PUSH
14501: LD_INT 5
14503: PUSH
14504: LD_INT 6
14506: PUSH
14507: LD_INT 7
14509: PUSH
14510: LD_INT 8
14512: PUSH
14513: LD_INT 9
14515: PUSH
14516: LD_INT 10
14518: PUSH
14519: LD_INT 11
14521: PUSH
14522: LD_INT 12
14524: PUSH
14525: LD_INT 13
14527: PUSH
14528: LD_INT 14
14530: PUSH
14531: LD_INT 15
14533: PUSH
14534: LD_INT 16
14536: PUSH
14537: LD_INT 17
14539: PUSH
14540: LD_INT 18
14542: PUSH
14543: LD_INT 19
14545: PUSH
14546: LD_INT 20
14548: PUSH
14549: LD_INT 21
14551: PUSH
14552: LD_INT 22
14554: PUSH
14555: LD_INT 23
14557: PUSH
14558: LD_INT 24
14560: PUSH
14561: LD_INT 25
14563: PUSH
14564: LD_INT 26
14566: PUSH
14567: LD_INT 27
14569: PUSH
14570: LD_INT 28
14572: PUSH
14573: LD_INT 30
14575: PUSH
14576: LD_INT 31
14578: PUSH
14579: LD_INT 32
14581: PUSH
14582: LD_INT 33
14584: PUSH
14585: LD_INT 34
14587: PUSH
14588: LD_INT 36
14590: PUSH
14591: EMPTY
14592: LIST
14593: LIST
14594: LIST
14595: LIST
14596: LIST
14597: LIST
14598: LIST
14599: LIST
14600: LIST
14601: LIST
14602: LIST
14603: LIST
14604: LIST
14605: LIST
14606: LIST
14607: LIST
14608: LIST
14609: LIST
14610: LIST
14611: LIST
14612: LIST
14613: LIST
14614: LIST
14615: LIST
14616: LIST
14617: LIST
14618: LIST
14619: LIST
14620: LIST
14621: LIST
14622: LIST
14623: LIST
14624: LIST
14625: LIST
14626: PUSH
14627: LD_INT 101
14629: PUSH
14630: LD_INT 102
14632: PUSH
14633: LD_INT 103
14635: PUSH
14636: LD_INT 104
14638: PUSH
14639: LD_INT 105
14641: PUSH
14642: LD_INT 106
14644: PUSH
14645: LD_INT 107
14647: PUSH
14648: LD_INT 108
14650: PUSH
14651: LD_INT 109
14653: PUSH
14654: LD_INT 110
14656: PUSH
14657: LD_INT 111
14659: PUSH
14660: LD_INT 112
14662: PUSH
14663: LD_INT 113
14665: PUSH
14666: LD_INT 114
14668: PUSH
14669: LD_INT 116
14671: PUSH
14672: LD_INT 117
14674: PUSH
14675: LD_INT 118
14677: PUSH
14678: EMPTY
14679: LIST
14680: LIST
14681: LIST
14682: LIST
14683: LIST
14684: LIST
14685: LIST
14686: LIST
14687: LIST
14688: LIST
14689: LIST
14690: LIST
14691: LIST
14692: LIST
14693: LIST
14694: LIST
14695: LIST
14696: PUSH
14697: EMPTY
14698: LIST
14699: LIST
14700: ST_TO_ADDR
14701: GO 16156
14703: LD_INT 13
14705: DOUBLE
14706: EQUAL
14707: IFTRUE 14711
14709: GO 14919
14711: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
14712: LD_ADDR_VAR 0 2
14716: PUSH
14717: LD_INT 1
14719: PUSH
14720: LD_INT 2
14722: PUSH
14723: LD_INT 3
14725: PUSH
14726: LD_INT 4
14728: PUSH
14729: LD_INT 5
14731: PUSH
14732: LD_INT 8
14734: PUSH
14735: LD_INT 9
14737: PUSH
14738: LD_INT 10
14740: PUSH
14741: LD_INT 11
14743: PUSH
14744: LD_INT 12
14746: PUSH
14747: LD_INT 14
14749: PUSH
14750: LD_INT 15
14752: PUSH
14753: LD_INT 16
14755: PUSH
14756: LD_INT 17
14758: PUSH
14759: LD_INT 18
14761: PUSH
14762: LD_INT 19
14764: PUSH
14765: LD_INT 20
14767: PUSH
14768: LD_INT 21
14770: PUSH
14771: LD_INT 22
14773: PUSH
14774: LD_INT 23
14776: PUSH
14777: LD_INT 24
14779: PUSH
14780: LD_INT 25
14782: PUSH
14783: LD_INT 26
14785: PUSH
14786: LD_INT 27
14788: PUSH
14789: LD_INT 28
14791: PUSH
14792: LD_INT 30
14794: PUSH
14795: LD_INT 31
14797: PUSH
14798: LD_INT 32
14800: PUSH
14801: LD_INT 33
14803: PUSH
14804: LD_INT 34
14806: PUSH
14807: LD_INT 36
14809: PUSH
14810: EMPTY
14811: LIST
14812: LIST
14813: LIST
14814: LIST
14815: LIST
14816: LIST
14817: LIST
14818: LIST
14819: LIST
14820: LIST
14821: LIST
14822: LIST
14823: LIST
14824: LIST
14825: LIST
14826: LIST
14827: LIST
14828: LIST
14829: LIST
14830: LIST
14831: LIST
14832: LIST
14833: LIST
14834: LIST
14835: LIST
14836: LIST
14837: LIST
14838: LIST
14839: LIST
14840: LIST
14841: LIST
14842: PUSH
14843: LD_INT 101
14845: PUSH
14846: LD_INT 102
14848: PUSH
14849: LD_INT 103
14851: PUSH
14852: LD_INT 104
14854: PUSH
14855: LD_INT 105
14857: PUSH
14858: LD_INT 106
14860: PUSH
14861: LD_INT 107
14863: PUSH
14864: LD_INT 108
14866: PUSH
14867: LD_INT 109
14869: PUSH
14870: LD_INT 110
14872: PUSH
14873: LD_INT 111
14875: PUSH
14876: LD_INT 112
14878: PUSH
14879: LD_INT 113
14881: PUSH
14882: LD_INT 114
14884: PUSH
14885: LD_INT 116
14887: PUSH
14888: LD_INT 117
14890: PUSH
14891: LD_INT 118
14893: PUSH
14894: EMPTY
14895: LIST
14896: LIST
14897: LIST
14898: LIST
14899: LIST
14900: LIST
14901: LIST
14902: LIST
14903: LIST
14904: LIST
14905: LIST
14906: LIST
14907: LIST
14908: LIST
14909: LIST
14910: LIST
14911: LIST
14912: PUSH
14913: EMPTY
14914: LIST
14915: LIST
14916: ST_TO_ADDR
14917: GO 16156
14919: LD_INT 14
14921: DOUBLE
14922: EQUAL
14923: IFTRUE 14927
14925: GO 15151
14927: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
14928: LD_ADDR_VAR 0 2
14932: PUSH
14933: LD_INT 1
14935: PUSH
14936: LD_INT 2
14938: PUSH
14939: LD_INT 3
14941: PUSH
14942: LD_INT 4
14944: PUSH
14945: LD_INT 5
14947: PUSH
14948: LD_INT 6
14950: PUSH
14951: LD_INT 7
14953: PUSH
14954: LD_INT 8
14956: PUSH
14957: LD_INT 9
14959: PUSH
14960: LD_INT 10
14962: PUSH
14963: LD_INT 11
14965: PUSH
14966: LD_INT 12
14968: PUSH
14969: LD_INT 13
14971: PUSH
14972: LD_INT 14
14974: PUSH
14975: LD_INT 15
14977: PUSH
14978: LD_INT 16
14980: PUSH
14981: LD_INT 17
14983: PUSH
14984: LD_INT 18
14986: PUSH
14987: LD_INT 19
14989: PUSH
14990: LD_INT 20
14992: PUSH
14993: LD_INT 21
14995: PUSH
14996: LD_INT 22
14998: PUSH
14999: LD_INT 23
15001: PUSH
15002: LD_INT 24
15004: PUSH
15005: LD_INT 25
15007: PUSH
15008: LD_INT 26
15010: PUSH
15011: LD_INT 27
15013: PUSH
15014: LD_INT 28
15016: PUSH
15017: LD_INT 29
15019: PUSH
15020: LD_INT 30
15022: PUSH
15023: LD_INT 31
15025: PUSH
15026: LD_INT 32
15028: PUSH
15029: LD_INT 33
15031: PUSH
15032: LD_INT 34
15034: PUSH
15035: LD_INT 36
15037: PUSH
15038: EMPTY
15039: LIST
15040: LIST
15041: LIST
15042: LIST
15043: LIST
15044: LIST
15045: LIST
15046: LIST
15047: LIST
15048: LIST
15049: LIST
15050: LIST
15051: LIST
15052: LIST
15053: LIST
15054: LIST
15055: LIST
15056: LIST
15057: LIST
15058: LIST
15059: LIST
15060: LIST
15061: LIST
15062: LIST
15063: LIST
15064: LIST
15065: LIST
15066: LIST
15067: LIST
15068: LIST
15069: LIST
15070: LIST
15071: LIST
15072: LIST
15073: LIST
15074: PUSH
15075: LD_INT 101
15077: PUSH
15078: LD_INT 102
15080: PUSH
15081: LD_INT 103
15083: PUSH
15084: LD_INT 104
15086: PUSH
15087: LD_INT 105
15089: PUSH
15090: LD_INT 106
15092: PUSH
15093: LD_INT 107
15095: PUSH
15096: LD_INT 108
15098: PUSH
15099: LD_INT 109
15101: PUSH
15102: LD_INT 110
15104: PUSH
15105: LD_INT 111
15107: PUSH
15108: LD_INT 112
15110: PUSH
15111: LD_INT 113
15113: PUSH
15114: LD_INT 114
15116: PUSH
15117: LD_INT 116
15119: PUSH
15120: LD_INT 117
15122: PUSH
15123: LD_INT 118
15125: PUSH
15126: EMPTY
15127: LIST
15128: LIST
15129: LIST
15130: LIST
15131: LIST
15132: LIST
15133: LIST
15134: LIST
15135: LIST
15136: LIST
15137: LIST
15138: LIST
15139: LIST
15140: LIST
15141: LIST
15142: LIST
15143: LIST
15144: PUSH
15145: EMPTY
15146: LIST
15147: LIST
15148: ST_TO_ADDR
15149: GO 16156
15151: LD_INT 15
15153: DOUBLE
15154: EQUAL
15155: IFTRUE 15159
15157: GO 15383
15159: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
15160: LD_ADDR_VAR 0 2
15164: PUSH
15165: LD_INT 1
15167: PUSH
15168: LD_INT 2
15170: PUSH
15171: LD_INT 3
15173: PUSH
15174: LD_INT 4
15176: PUSH
15177: LD_INT 5
15179: PUSH
15180: LD_INT 6
15182: PUSH
15183: LD_INT 7
15185: PUSH
15186: LD_INT 8
15188: PUSH
15189: LD_INT 9
15191: PUSH
15192: LD_INT 10
15194: PUSH
15195: LD_INT 11
15197: PUSH
15198: LD_INT 12
15200: PUSH
15201: LD_INT 13
15203: PUSH
15204: LD_INT 14
15206: PUSH
15207: LD_INT 15
15209: PUSH
15210: LD_INT 16
15212: PUSH
15213: LD_INT 17
15215: PUSH
15216: LD_INT 18
15218: PUSH
15219: LD_INT 19
15221: PUSH
15222: LD_INT 20
15224: PUSH
15225: LD_INT 21
15227: PUSH
15228: LD_INT 22
15230: PUSH
15231: LD_INT 23
15233: PUSH
15234: LD_INT 24
15236: PUSH
15237: LD_INT 25
15239: PUSH
15240: LD_INT 26
15242: PUSH
15243: LD_INT 27
15245: PUSH
15246: LD_INT 28
15248: PUSH
15249: LD_INT 29
15251: PUSH
15252: LD_INT 30
15254: PUSH
15255: LD_INT 31
15257: PUSH
15258: LD_INT 32
15260: PUSH
15261: LD_INT 33
15263: PUSH
15264: LD_INT 34
15266: PUSH
15267: LD_INT 36
15269: PUSH
15270: EMPTY
15271: LIST
15272: LIST
15273: LIST
15274: LIST
15275: LIST
15276: LIST
15277: LIST
15278: LIST
15279: LIST
15280: LIST
15281: LIST
15282: LIST
15283: LIST
15284: LIST
15285: LIST
15286: LIST
15287: LIST
15288: LIST
15289: LIST
15290: LIST
15291: LIST
15292: LIST
15293: LIST
15294: LIST
15295: LIST
15296: LIST
15297: LIST
15298: LIST
15299: LIST
15300: LIST
15301: LIST
15302: LIST
15303: LIST
15304: LIST
15305: LIST
15306: PUSH
15307: LD_INT 101
15309: PUSH
15310: LD_INT 102
15312: PUSH
15313: LD_INT 103
15315: PUSH
15316: LD_INT 104
15318: PUSH
15319: LD_INT 105
15321: PUSH
15322: LD_INT 106
15324: PUSH
15325: LD_INT 107
15327: PUSH
15328: LD_INT 108
15330: PUSH
15331: LD_INT 109
15333: PUSH
15334: LD_INT 110
15336: PUSH
15337: LD_INT 111
15339: PUSH
15340: LD_INT 112
15342: PUSH
15343: LD_INT 113
15345: PUSH
15346: LD_INT 114
15348: PUSH
15349: LD_INT 116
15351: PUSH
15352: LD_INT 117
15354: PUSH
15355: LD_INT 118
15357: PUSH
15358: EMPTY
15359: LIST
15360: LIST
15361: LIST
15362: LIST
15363: LIST
15364: LIST
15365: LIST
15366: LIST
15367: LIST
15368: LIST
15369: LIST
15370: LIST
15371: LIST
15372: LIST
15373: LIST
15374: LIST
15375: LIST
15376: PUSH
15377: EMPTY
15378: LIST
15379: LIST
15380: ST_TO_ADDR
15381: GO 16156
15383: LD_INT 16
15385: DOUBLE
15386: EQUAL
15387: IFTRUE 15391
15389: GO 15527
15391: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
15392: LD_ADDR_VAR 0 2
15396: PUSH
15397: LD_INT 2
15399: PUSH
15400: LD_INT 4
15402: PUSH
15403: LD_INT 5
15405: PUSH
15406: LD_INT 7
15408: PUSH
15409: LD_INT 11
15411: PUSH
15412: LD_INT 12
15414: PUSH
15415: LD_INT 15
15417: PUSH
15418: LD_INT 16
15420: PUSH
15421: LD_INT 20
15423: PUSH
15424: LD_INT 21
15426: PUSH
15427: LD_INT 22
15429: PUSH
15430: LD_INT 23
15432: PUSH
15433: LD_INT 25
15435: PUSH
15436: LD_INT 26
15438: PUSH
15439: LD_INT 30
15441: PUSH
15442: LD_INT 31
15444: PUSH
15445: LD_INT 32
15447: PUSH
15448: LD_INT 33
15450: PUSH
15451: LD_INT 34
15453: PUSH
15454: EMPTY
15455: LIST
15456: LIST
15457: LIST
15458: LIST
15459: LIST
15460: LIST
15461: LIST
15462: LIST
15463: LIST
15464: LIST
15465: LIST
15466: LIST
15467: LIST
15468: LIST
15469: LIST
15470: LIST
15471: LIST
15472: LIST
15473: LIST
15474: PUSH
15475: LD_INT 101
15477: PUSH
15478: LD_INT 102
15480: PUSH
15481: LD_INT 103
15483: PUSH
15484: LD_INT 106
15486: PUSH
15487: LD_INT 108
15489: PUSH
15490: LD_INT 112
15492: PUSH
15493: LD_INT 113
15495: PUSH
15496: LD_INT 114
15498: PUSH
15499: LD_INT 116
15501: PUSH
15502: LD_INT 117
15504: PUSH
15505: LD_INT 118
15507: PUSH
15508: EMPTY
15509: LIST
15510: LIST
15511: LIST
15512: LIST
15513: LIST
15514: LIST
15515: LIST
15516: LIST
15517: LIST
15518: LIST
15519: LIST
15520: PUSH
15521: EMPTY
15522: LIST
15523: LIST
15524: ST_TO_ADDR
15525: GO 16156
15527: LD_INT 17
15529: DOUBLE
15530: EQUAL
15531: IFTRUE 15535
15533: GO 15759
15535: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
15536: LD_ADDR_VAR 0 2
15540: PUSH
15541: LD_INT 1
15543: PUSH
15544: LD_INT 2
15546: PUSH
15547: LD_INT 3
15549: PUSH
15550: LD_INT 4
15552: PUSH
15553: LD_INT 5
15555: PUSH
15556: LD_INT 6
15558: PUSH
15559: LD_INT 7
15561: PUSH
15562: LD_INT 8
15564: PUSH
15565: LD_INT 9
15567: PUSH
15568: LD_INT 10
15570: PUSH
15571: LD_INT 11
15573: PUSH
15574: LD_INT 12
15576: PUSH
15577: LD_INT 13
15579: PUSH
15580: LD_INT 14
15582: PUSH
15583: LD_INT 15
15585: PUSH
15586: LD_INT 16
15588: PUSH
15589: LD_INT 17
15591: PUSH
15592: LD_INT 18
15594: PUSH
15595: LD_INT 19
15597: PUSH
15598: LD_INT 20
15600: PUSH
15601: LD_INT 21
15603: PUSH
15604: LD_INT 22
15606: PUSH
15607: LD_INT 23
15609: PUSH
15610: LD_INT 24
15612: PUSH
15613: LD_INT 25
15615: PUSH
15616: LD_INT 26
15618: PUSH
15619: LD_INT 27
15621: PUSH
15622: LD_INT 28
15624: PUSH
15625: LD_INT 29
15627: PUSH
15628: LD_INT 30
15630: PUSH
15631: LD_INT 31
15633: PUSH
15634: LD_INT 32
15636: PUSH
15637: LD_INT 33
15639: PUSH
15640: LD_INT 34
15642: PUSH
15643: LD_INT 36
15645: PUSH
15646: EMPTY
15647: LIST
15648: LIST
15649: LIST
15650: LIST
15651: LIST
15652: LIST
15653: LIST
15654: LIST
15655: LIST
15656: LIST
15657: LIST
15658: LIST
15659: LIST
15660: LIST
15661: LIST
15662: LIST
15663: LIST
15664: LIST
15665: LIST
15666: LIST
15667: LIST
15668: LIST
15669: LIST
15670: LIST
15671: LIST
15672: LIST
15673: LIST
15674: LIST
15675: LIST
15676: LIST
15677: LIST
15678: LIST
15679: LIST
15680: LIST
15681: LIST
15682: PUSH
15683: LD_INT 101
15685: PUSH
15686: LD_INT 102
15688: PUSH
15689: LD_INT 103
15691: PUSH
15692: LD_INT 104
15694: PUSH
15695: LD_INT 105
15697: PUSH
15698: LD_INT 106
15700: PUSH
15701: LD_INT 107
15703: PUSH
15704: LD_INT 108
15706: PUSH
15707: LD_INT 109
15709: PUSH
15710: LD_INT 110
15712: PUSH
15713: LD_INT 111
15715: PUSH
15716: LD_INT 112
15718: PUSH
15719: LD_INT 113
15721: PUSH
15722: LD_INT 114
15724: PUSH
15725: LD_INT 116
15727: PUSH
15728: LD_INT 117
15730: PUSH
15731: LD_INT 118
15733: PUSH
15734: EMPTY
15735: LIST
15736: LIST
15737: LIST
15738: LIST
15739: LIST
15740: LIST
15741: LIST
15742: LIST
15743: LIST
15744: LIST
15745: LIST
15746: LIST
15747: LIST
15748: LIST
15749: LIST
15750: LIST
15751: LIST
15752: PUSH
15753: EMPTY
15754: LIST
15755: LIST
15756: ST_TO_ADDR
15757: GO 16156
15759: LD_INT 18
15761: DOUBLE
15762: EQUAL
15763: IFTRUE 15767
15765: GO 15915
15767: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
15768: LD_ADDR_VAR 0 2
15772: PUSH
15773: LD_INT 2
15775: PUSH
15776: LD_INT 4
15778: PUSH
15779: LD_INT 5
15781: PUSH
15782: LD_INT 7
15784: PUSH
15785: LD_INT 11
15787: PUSH
15788: LD_INT 12
15790: PUSH
15791: LD_INT 15
15793: PUSH
15794: LD_INT 16
15796: PUSH
15797: LD_INT 20
15799: PUSH
15800: LD_INT 21
15802: PUSH
15803: LD_INT 22
15805: PUSH
15806: LD_INT 23
15808: PUSH
15809: LD_INT 25
15811: PUSH
15812: LD_INT 26
15814: PUSH
15815: LD_INT 30
15817: PUSH
15818: LD_INT 31
15820: PUSH
15821: LD_INT 32
15823: PUSH
15824: LD_INT 33
15826: PUSH
15827: LD_INT 34
15829: PUSH
15830: LD_INT 35
15832: PUSH
15833: LD_INT 36
15835: PUSH
15836: EMPTY
15837: LIST
15838: LIST
15839: LIST
15840: LIST
15841: LIST
15842: LIST
15843: LIST
15844: LIST
15845: LIST
15846: LIST
15847: LIST
15848: LIST
15849: LIST
15850: LIST
15851: LIST
15852: LIST
15853: LIST
15854: LIST
15855: LIST
15856: LIST
15857: LIST
15858: PUSH
15859: LD_INT 101
15861: PUSH
15862: LD_INT 102
15864: PUSH
15865: LD_INT 103
15867: PUSH
15868: LD_INT 106
15870: PUSH
15871: LD_INT 108
15873: PUSH
15874: LD_INT 112
15876: PUSH
15877: LD_INT 113
15879: PUSH
15880: LD_INT 114
15882: PUSH
15883: LD_INT 115
15885: PUSH
15886: LD_INT 116
15888: PUSH
15889: LD_INT 117
15891: PUSH
15892: LD_INT 118
15894: PUSH
15895: EMPTY
15896: LIST
15897: LIST
15898: LIST
15899: LIST
15900: LIST
15901: LIST
15902: LIST
15903: LIST
15904: LIST
15905: LIST
15906: LIST
15907: LIST
15908: PUSH
15909: EMPTY
15910: LIST
15911: LIST
15912: ST_TO_ADDR
15913: GO 16156
15915: LD_INT 19
15917: DOUBLE
15918: EQUAL
15919: IFTRUE 15923
15921: GO 16155
15923: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
15924: LD_ADDR_VAR 0 2
15928: PUSH
15929: LD_INT 1
15931: PUSH
15932: LD_INT 2
15934: PUSH
15935: LD_INT 3
15937: PUSH
15938: LD_INT 4
15940: PUSH
15941: LD_INT 5
15943: PUSH
15944: LD_INT 6
15946: PUSH
15947: LD_INT 7
15949: PUSH
15950: LD_INT 8
15952: PUSH
15953: LD_INT 9
15955: PUSH
15956: LD_INT 10
15958: PUSH
15959: LD_INT 11
15961: PUSH
15962: LD_INT 12
15964: PUSH
15965: LD_INT 13
15967: PUSH
15968: LD_INT 14
15970: PUSH
15971: LD_INT 15
15973: PUSH
15974: LD_INT 16
15976: PUSH
15977: LD_INT 17
15979: PUSH
15980: LD_INT 18
15982: PUSH
15983: LD_INT 19
15985: PUSH
15986: LD_INT 20
15988: PUSH
15989: LD_INT 21
15991: PUSH
15992: LD_INT 22
15994: PUSH
15995: LD_INT 23
15997: PUSH
15998: LD_INT 24
16000: PUSH
16001: LD_INT 25
16003: PUSH
16004: LD_INT 26
16006: PUSH
16007: LD_INT 27
16009: PUSH
16010: LD_INT 28
16012: PUSH
16013: LD_INT 29
16015: PUSH
16016: LD_INT 30
16018: PUSH
16019: LD_INT 31
16021: PUSH
16022: LD_INT 32
16024: PUSH
16025: LD_INT 33
16027: PUSH
16028: LD_INT 34
16030: PUSH
16031: LD_INT 35
16033: PUSH
16034: LD_INT 36
16036: PUSH
16037: EMPTY
16038: LIST
16039: LIST
16040: LIST
16041: LIST
16042: LIST
16043: LIST
16044: LIST
16045: LIST
16046: LIST
16047: LIST
16048: LIST
16049: LIST
16050: LIST
16051: LIST
16052: LIST
16053: LIST
16054: LIST
16055: LIST
16056: LIST
16057: LIST
16058: LIST
16059: LIST
16060: LIST
16061: LIST
16062: LIST
16063: LIST
16064: LIST
16065: LIST
16066: LIST
16067: LIST
16068: LIST
16069: LIST
16070: LIST
16071: LIST
16072: LIST
16073: LIST
16074: PUSH
16075: LD_INT 101
16077: PUSH
16078: LD_INT 102
16080: PUSH
16081: LD_INT 103
16083: PUSH
16084: LD_INT 104
16086: PUSH
16087: LD_INT 105
16089: PUSH
16090: LD_INT 106
16092: PUSH
16093: LD_INT 107
16095: PUSH
16096: LD_INT 108
16098: PUSH
16099: LD_INT 109
16101: PUSH
16102: LD_INT 110
16104: PUSH
16105: LD_INT 111
16107: PUSH
16108: LD_INT 112
16110: PUSH
16111: LD_INT 113
16113: PUSH
16114: LD_INT 114
16116: PUSH
16117: LD_INT 115
16119: PUSH
16120: LD_INT 116
16122: PUSH
16123: LD_INT 117
16125: PUSH
16126: LD_INT 118
16128: PUSH
16129: EMPTY
16130: LIST
16131: LIST
16132: LIST
16133: LIST
16134: LIST
16135: LIST
16136: LIST
16137: LIST
16138: LIST
16139: LIST
16140: LIST
16141: LIST
16142: LIST
16143: LIST
16144: LIST
16145: LIST
16146: LIST
16147: LIST
16148: PUSH
16149: EMPTY
16150: LIST
16151: LIST
16152: ST_TO_ADDR
16153: GO 16156
16155: POP
// end else
16156: GO 16387
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
16158: LD_ADDR_VAR 0 2
16162: PUSH
16163: LD_INT 1
16165: PUSH
16166: LD_INT 2
16168: PUSH
16169: LD_INT 3
16171: PUSH
16172: LD_INT 4
16174: PUSH
16175: LD_INT 5
16177: PUSH
16178: LD_INT 6
16180: PUSH
16181: LD_INT 7
16183: PUSH
16184: LD_INT 8
16186: PUSH
16187: LD_INT 9
16189: PUSH
16190: LD_INT 10
16192: PUSH
16193: LD_INT 11
16195: PUSH
16196: LD_INT 12
16198: PUSH
16199: LD_INT 13
16201: PUSH
16202: LD_INT 14
16204: PUSH
16205: LD_INT 15
16207: PUSH
16208: LD_INT 16
16210: PUSH
16211: LD_INT 17
16213: PUSH
16214: LD_INT 18
16216: PUSH
16217: LD_INT 19
16219: PUSH
16220: LD_INT 20
16222: PUSH
16223: LD_INT 21
16225: PUSH
16226: LD_INT 22
16228: PUSH
16229: LD_INT 23
16231: PUSH
16232: LD_INT 24
16234: PUSH
16235: LD_INT 25
16237: PUSH
16238: LD_INT 26
16240: PUSH
16241: LD_INT 27
16243: PUSH
16244: LD_INT 28
16246: PUSH
16247: LD_INT 29
16249: PUSH
16250: LD_INT 30
16252: PUSH
16253: LD_INT 31
16255: PUSH
16256: LD_INT 32
16258: PUSH
16259: LD_INT 33
16261: PUSH
16262: LD_INT 34
16264: PUSH
16265: LD_INT 35
16267: PUSH
16268: LD_INT 36
16270: PUSH
16271: EMPTY
16272: LIST
16273: LIST
16274: LIST
16275: LIST
16276: LIST
16277: LIST
16278: LIST
16279: LIST
16280: LIST
16281: LIST
16282: LIST
16283: LIST
16284: LIST
16285: LIST
16286: LIST
16287: LIST
16288: LIST
16289: LIST
16290: LIST
16291: LIST
16292: LIST
16293: LIST
16294: LIST
16295: LIST
16296: LIST
16297: LIST
16298: LIST
16299: LIST
16300: LIST
16301: LIST
16302: LIST
16303: LIST
16304: LIST
16305: LIST
16306: LIST
16307: LIST
16308: PUSH
16309: LD_INT 101
16311: PUSH
16312: LD_INT 102
16314: PUSH
16315: LD_INT 103
16317: PUSH
16318: LD_INT 104
16320: PUSH
16321: LD_INT 105
16323: PUSH
16324: LD_INT 106
16326: PUSH
16327: LD_INT 107
16329: PUSH
16330: LD_INT 108
16332: PUSH
16333: LD_INT 109
16335: PUSH
16336: LD_INT 110
16338: PUSH
16339: LD_INT 111
16341: PUSH
16342: LD_INT 112
16344: PUSH
16345: LD_INT 113
16347: PUSH
16348: LD_INT 114
16350: PUSH
16351: LD_INT 115
16353: PUSH
16354: LD_INT 116
16356: PUSH
16357: LD_INT 117
16359: PUSH
16360: LD_INT 118
16362: PUSH
16363: EMPTY
16364: LIST
16365: LIST
16366: LIST
16367: LIST
16368: LIST
16369: LIST
16370: LIST
16371: LIST
16372: LIST
16373: LIST
16374: LIST
16375: LIST
16376: LIST
16377: LIST
16378: LIST
16379: LIST
16380: LIST
16381: LIST
16382: PUSH
16383: EMPTY
16384: LIST
16385: LIST
16386: ST_TO_ADDR
// if result then
16387: LD_VAR 0 2
16391: IFFALSE 17177
// begin normal :=  ;
16393: LD_ADDR_VAR 0 5
16397: PUSH
16398: LD_STRING 
16400: ST_TO_ADDR
// hardcore :=  ;
16401: LD_ADDR_VAR 0 6
16405: PUSH
16406: LD_STRING 
16408: ST_TO_ADDR
// active :=  ;
16409: LD_ADDR_VAR 0 7
16413: PUSH
16414: LD_STRING 
16416: ST_TO_ADDR
// for i = 1 to normalCounter do
16417: LD_ADDR_VAR 0 8
16421: PUSH
16422: DOUBLE
16423: LD_INT 1
16425: DEC
16426: ST_TO_ADDR
16427: LD_EXP 46
16431: PUSH
16432: FOR_TO
16433: IFFALSE 16534
// begin tmp := 0 ;
16435: LD_ADDR_VAR 0 3
16439: PUSH
16440: LD_STRING 0
16442: ST_TO_ADDR
// if result [ 1 ] then
16443: LD_VAR 0 2
16447: PUSH
16448: LD_INT 1
16450: ARRAY
16451: IFFALSE 16516
// if result [ 1 ] [ 1 ] = i then
16453: LD_VAR 0 2
16457: PUSH
16458: LD_INT 1
16460: ARRAY
16461: PUSH
16462: LD_INT 1
16464: ARRAY
16465: PUSH
16466: LD_VAR 0 8
16470: EQUAL
16471: IFFALSE 16516
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
16473: LD_ADDR_VAR 0 2
16477: PUSH
16478: LD_VAR 0 2
16482: PPUSH
16483: LD_INT 1
16485: PPUSH
16486: LD_VAR 0 2
16490: PUSH
16491: LD_INT 1
16493: ARRAY
16494: PPUSH
16495: LD_INT 1
16497: PPUSH
16498: CALL_OW 3
16502: PPUSH
16503: CALL_OW 1
16507: ST_TO_ADDR
// tmp := 1 ;
16508: LD_ADDR_VAR 0 3
16512: PUSH
16513: LD_STRING 1
16515: ST_TO_ADDR
// end ; normal := normal & tmp ;
16516: LD_ADDR_VAR 0 5
16520: PUSH
16521: LD_VAR 0 5
16525: PUSH
16526: LD_VAR 0 3
16530: STR
16531: ST_TO_ADDR
// end ;
16532: GO 16432
16534: POP
16535: POP
// for i = 1 to hardcoreCounter do
16536: LD_ADDR_VAR 0 8
16540: PUSH
16541: DOUBLE
16542: LD_INT 1
16544: DEC
16545: ST_TO_ADDR
16546: LD_EXP 47
16550: PUSH
16551: FOR_TO
16552: IFFALSE 16657
// begin tmp := 0 ;
16554: LD_ADDR_VAR 0 3
16558: PUSH
16559: LD_STRING 0
16561: ST_TO_ADDR
// if result [ 2 ] then
16562: LD_VAR 0 2
16566: PUSH
16567: LD_INT 2
16569: ARRAY
16570: IFFALSE 16639
// if result [ 2 ] [ 1 ] = 100 + i then
16572: LD_VAR 0 2
16576: PUSH
16577: LD_INT 2
16579: ARRAY
16580: PUSH
16581: LD_INT 1
16583: ARRAY
16584: PUSH
16585: LD_INT 100
16587: PUSH
16588: LD_VAR 0 8
16592: PLUS
16593: EQUAL
16594: IFFALSE 16639
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
16596: LD_ADDR_VAR 0 2
16600: PUSH
16601: LD_VAR 0 2
16605: PPUSH
16606: LD_INT 2
16608: PPUSH
16609: LD_VAR 0 2
16613: PUSH
16614: LD_INT 2
16616: ARRAY
16617: PPUSH
16618: LD_INT 1
16620: PPUSH
16621: CALL_OW 3
16625: PPUSH
16626: CALL_OW 1
16630: ST_TO_ADDR
// tmp := 1 ;
16631: LD_ADDR_VAR 0 3
16635: PUSH
16636: LD_STRING 1
16638: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
16639: LD_ADDR_VAR 0 6
16643: PUSH
16644: LD_VAR 0 6
16648: PUSH
16649: LD_VAR 0 3
16653: STR
16654: ST_TO_ADDR
// end ;
16655: GO 16551
16657: POP
16658: POP
// if isGameLoad then
16659: LD_VAR 0 1
16663: IFFALSE 17138
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
16665: LD_ADDR_VAR 0 4
16669: PUSH
16670: LD_EXP 50
16674: PUSH
16675: LD_EXP 49
16679: PUSH
16680: LD_EXP 51
16684: PUSH
16685: LD_EXP 48
16689: PUSH
16690: LD_EXP 52
16694: PUSH
16695: LD_EXP 53
16699: PUSH
16700: LD_EXP 54
16704: PUSH
16705: LD_EXP 55
16709: PUSH
16710: LD_EXP 56
16714: PUSH
16715: LD_EXP 57
16719: PUSH
16720: LD_EXP 58
16724: PUSH
16725: LD_EXP 59
16729: PUSH
16730: LD_EXP 60
16734: PUSH
16735: LD_EXP 61
16739: PUSH
16740: LD_EXP 69
16744: PUSH
16745: LD_EXP 70
16749: PUSH
16750: LD_EXP 71
16754: PUSH
16755: LD_EXP 72
16759: PUSH
16760: LD_EXP 74
16764: PUSH
16765: LD_EXP 75
16769: PUSH
16770: LD_EXP 76
16774: PUSH
16775: LD_EXP 79
16779: PUSH
16780: LD_EXP 81
16784: PUSH
16785: LD_EXP 82
16789: PUSH
16790: LD_EXP 83
16794: PUSH
16795: LD_EXP 85
16799: PUSH
16800: LD_EXP 86
16804: PUSH
16805: LD_EXP 89
16809: PUSH
16810: LD_EXP 90
16814: PUSH
16815: LD_EXP 91
16819: PUSH
16820: LD_EXP 92
16824: PUSH
16825: LD_EXP 93
16829: PUSH
16830: LD_EXP 94
16834: PUSH
16835: LD_EXP 95
16839: PUSH
16840: LD_EXP 96
16844: PUSH
16845: LD_EXP 97
16849: PUSH
16850: LD_EXP 62
16854: PUSH
16855: LD_EXP 63
16859: PUSH
16860: LD_EXP 66
16864: PUSH
16865: LD_EXP 67
16869: PUSH
16870: LD_EXP 68
16874: PUSH
16875: LD_EXP 64
16879: PUSH
16880: LD_EXP 65
16884: PUSH
16885: LD_EXP 73
16889: PUSH
16890: LD_EXP 77
16894: PUSH
16895: LD_EXP 78
16899: PUSH
16900: LD_EXP 80
16904: PUSH
16905: LD_EXP 84
16909: PUSH
16910: LD_EXP 87
16914: PUSH
16915: LD_EXP 88
16919: PUSH
16920: LD_EXP 98
16924: PUSH
16925: LD_EXP 99
16929: PUSH
16930: LD_EXP 100
16934: PUSH
16935: LD_EXP 101
16939: PUSH
16940: EMPTY
16941: LIST
16942: LIST
16943: LIST
16944: LIST
16945: LIST
16946: LIST
16947: LIST
16948: LIST
16949: LIST
16950: LIST
16951: LIST
16952: LIST
16953: LIST
16954: LIST
16955: LIST
16956: LIST
16957: LIST
16958: LIST
16959: LIST
16960: LIST
16961: LIST
16962: LIST
16963: LIST
16964: LIST
16965: LIST
16966: LIST
16967: LIST
16968: LIST
16969: LIST
16970: LIST
16971: LIST
16972: LIST
16973: LIST
16974: LIST
16975: LIST
16976: LIST
16977: LIST
16978: LIST
16979: LIST
16980: LIST
16981: LIST
16982: LIST
16983: LIST
16984: LIST
16985: LIST
16986: LIST
16987: LIST
16988: LIST
16989: LIST
16990: LIST
16991: LIST
16992: LIST
16993: LIST
16994: LIST
16995: ST_TO_ADDR
// tmp :=  ;
16996: LD_ADDR_VAR 0 3
17000: PUSH
17001: LD_STRING 
17003: ST_TO_ADDR
// for i = 1 to normalCounter do
17004: LD_ADDR_VAR 0 8
17008: PUSH
17009: DOUBLE
17010: LD_INT 1
17012: DEC
17013: ST_TO_ADDR
17014: LD_EXP 46
17018: PUSH
17019: FOR_TO
17020: IFFALSE 17056
// begin if flags [ i ] then
17022: LD_VAR 0 4
17026: PUSH
17027: LD_VAR 0 8
17031: ARRAY
17032: IFFALSE 17054
// tmp := tmp & i & ; ;
17034: LD_ADDR_VAR 0 3
17038: PUSH
17039: LD_VAR 0 3
17043: PUSH
17044: LD_VAR 0 8
17048: STR
17049: PUSH
17050: LD_STRING ;
17052: STR
17053: ST_TO_ADDR
// end ;
17054: GO 17019
17056: POP
17057: POP
// for i = 1 to hardcoreCounter do
17058: LD_ADDR_VAR 0 8
17062: PUSH
17063: DOUBLE
17064: LD_INT 1
17066: DEC
17067: ST_TO_ADDR
17068: LD_EXP 47
17072: PUSH
17073: FOR_TO
17074: IFFALSE 17120
// begin if flags [ normalCounter + i ] then
17076: LD_VAR 0 4
17080: PUSH
17081: LD_EXP 46
17085: PUSH
17086: LD_VAR 0 8
17090: PLUS
17091: ARRAY
17092: IFFALSE 17118
// tmp := tmp & ( 100 + i ) & ; ;
17094: LD_ADDR_VAR 0 3
17098: PUSH
17099: LD_VAR 0 3
17103: PUSH
17104: LD_INT 100
17106: PUSH
17107: LD_VAR 0 8
17111: PLUS
17112: STR
17113: PUSH
17114: LD_STRING ;
17116: STR
17117: ST_TO_ADDR
// end ;
17118: GO 17073
17120: POP
17121: POP
// if tmp then
17122: LD_VAR 0 3
17126: IFFALSE 17138
// active := tmp ;
17128: LD_ADDR_VAR 0 7
17132: PUSH
17133: LD_VAR 0 3
17137: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
17138: LD_STRING getStreamItemsFromMission("
17140: PUSH
17141: LD_VAR 0 5
17145: STR
17146: PUSH
17147: LD_STRING ","
17149: STR
17150: PUSH
17151: LD_VAR 0 6
17155: STR
17156: PUSH
17157: LD_STRING ","
17159: STR
17160: PUSH
17161: LD_VAR 0 7
17165: STR
17166: PUSH
17167: LD_STRING ")
17169: STR
17170: PPUSH
17171: CALL_OW 559
// end else
17175: GO 17184
// ToLua ( getStreamItemsFromMission("","","") ) ;
17177: LD_STRING getStreamItemsFromMission("","","")
17179: PPUSH
17180: CALL_OW 559
// end ;
17184: LD_VAR 0 2
17188: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
17189: LD_EXP 45
17193: PUSH
17194: LD_EXP 50
17198: AND
17199: IFFALSE 17323
17201: GO 17203
17203: DISABLE
17204: LD_INT 0
17206: PPUSH
17207: PPUSH
// begin enable ;
17208: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
17209: LD_ADDR_VAR 0 2
17213: PUSH
17214: LD_INT 22
17216: PUSH
17217: LD_OWVAR 2
17221: PUSH
17222: EMPTY
17223: LIST
17224: LIST
17225: PUSH
17226: LD_INT 2
17228: PUSH
17229: LD_INT 34
17231: PUSH
17232: LD_INT 7
17234: PUSH
17235: EMPTY
17236: LIST
17237: LIST
17238: PUSH
17239: LD_INT 34
17241: PUSH
17242: LD_INT 45
17244: PUSH
17245: EMPTY
17246: LIST
17247: LIST
17248: PUSH
17249: LD_INT 34
17251: PUSH
17252: LD_INT 28
17254: PUSH
17255: EMPTY
17256: LIST
17257: LIST
17258: PUSH
17259: LD_INT 34
17261: PUSH
17262: LD_INT 47
17264: PUSH
17265: EMPTY
17266: LIST
17267: LIST
17268: PUSH
17269: EMPTY
17270: LIST
17271: LIST
17272: LIST
17273: LIST
17274: LIST
17275: PUSH
17276: EMPTY
17277: LIST
17278: LIST
17279: PPUSH
17280: CALL_OW 69
17284: ST_TO_ADDR
// if not tmp then
17285: LD_VAR 0 2
17289: NOT
17290: IFFALSE 17294
// exit ;
17292: GO 17323
// for i in tmp do
17294: LD_ADDR_VAR 0 1
17298: PUSH
17299: LD_VAR 0 2
17303: PUSH
17304: FOR_IN
17305: IFFALSE 17321
// begin SetLives ( i , 0 ) ;
17307: LD_VAR 0 1
17311: PPUSH
17312: LD_INT 0
17314: PPUSH
17315: CALL_OW 234
// end ;
17319: GO 17304
17321: POP
17322: POP
// end ;
17323: PPOPN 2
17325: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
17326: LD_EXP 45
17330: PUSH
17331: LD_EXP 51
17335: AND
17336: IFFALSE 17420
17338: GO 17340
17340: DISABLE
17341: LD_INT 0
17343: PPUSH
17344: PPUSH
// begin enable ;
17345: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
17346: LD_ADDR_VAR 0 2
17350: PUSH
17351: LD_INT 22
17353: PUSH
17354: LD_OWVAR 2
17358: PUSH
17359: EMPTY
17360: LIST
17361: LIST
17362: PUSH
17363: LD_INT 32
17365: PUSH
17366: LD_INT 3
17368: PUSH
17369: EMPTY
17370: LIST
17371: LIST
17372: PUSH
17373: EMPTY
17374: LIST
17375: LIST
17376: PPUSH
17377: CALL_OW 69
17381: ST_TO_ADDR
// if not tmp then
17382: LD_VAR 0 2
17386: NOT
17387: IFFALSE 17391
// exit ;
17389: GO 17420
// for i in tmp do
17391: LD_ADDR_VAR 0 1
17395: PUSH
17396: LD_VAR 0 2
17400: PUSH
17401: FOR_IN
17402: IFFALSE 17418
// begin SetLives ( i , 0 ) ;
17404: LD_VAR 0 1
17408: PPUSH
17409: LD_INT 0
17411: PPUSH
17412: CALL_OW 234
// end ;
17416: GO 17401
17418: POP
17419: POP
// end ;
17420: PPOPN 2
17422: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
17423: LD_EXP 45
17427: PUSH
17428: LD_EXP 48
17432: AND
17433: IFFALSE 17526
17435: GO 17437
17437: DISABLE
17438: LD_INT 0
17440: PPUSH
// begin enable ;
17441: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
17442: LD_ADDR_VAR 0 1
17446: PUSH
17447: LD_INT 22
17449: PUSH
17450: LD_OWVAR 2
17454: PUSH
17455: EMPTY
17456: LIST
17457: LIST
17458: PUSH
17459: LD_INT 2
17461: PUSH
17462: LD_INT 25
17464: PUSH
17465: LD_INT 5
17467: PUSH
17468: EMPTY
17469: LIST
17470: LIST
17471: PUSH
17472: LD_INT 25
17474: PUSH
17475: LD_INT 9
17477: PUSH
17478: EMPTY
17479: LIST
17480: LIST
17481: PUSH
17482: LD_INT 25
17484: PUSH
17485: LD_INT 8
17487: PUSH
17488: EMPTY
17489: LIST
17490: LIST
17491: PUSH
17492: EMPTY
17493: LIST
17494: LIST
17495: LIST
17496: LIST
17497: PUSH
17498: EMPTY
17499: LIST
17500: LIST
17501: PPUSH
17502: CALL_OW 69
17506: PUSH
17507: FOR_IN
17508: IFFALSE 17524
// begin SetClass ( i , 1 ) ;
17510: LD_VAR 0 1
17514: PPUSH
17515: LD_INT 1
17517: PPUSH
17518: CALL_OW 336
// end ;
17522: GO 17507
17524: POP
17525: POP
// end ;
17526: PPOPN 1
17528: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
17529: LD_EXP 45
17533: PUSH
17534: LD_EXP 49
17538: AND
17539: PUSH
17540: LD_OWVAR 65
17544: PUSH
17545: LD_INT 7
17547: LESS
17548: AND
17549: IFFALSE 17563
17551: GO 17553
17553: DISABLE
// begin enable ;
17554: ENABLE
// game_speed := 7 ;
17555: LD_ADDR_OWVAR 65
17559: PUSH
17560: LD_INT 7
17562: ST_TO_ADDR
// end ;
17563: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
17564: LD_EXP 45
17568: PUSH
17569: LD_EXP 52
17573: AND
17574: IFFALSE 17776
17576: GO 17578
17578: DISABLE
17579: LD_INT 0
17581: PPUSH
17582: PPUSH
17583: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
17584: LD_ADDR_VAR 0 3
17588: PUSH
17589: LD_INT 81
17591: PUSH
17592: LD_OWVAR 2
17596: PUSH
17597: EMPTY
17598: LIST
17599: LIST
17600: PUSH
17601: LD_INT 21
17603: PUSH
17604: LD_INT 1
17606: PUSH
17607: EMPTY
17608: LIST
17609: LIST
17610: PUSH
17611: EMPTY
17612: LIST
17613: LIST
17614: PPUSH
17615: CALL_OW 69
17619: ST_TO_ADDR
// if not tmp then
17620: LD_VAR 0 3
17624: NOT
17625: IFFALSE 17629
// exit ;
17627: GO 17776
// if tmp > 5 then
17629: LD_VAR 0 3
17633: PUSH
17634: LD_INT 5
17636: GREATER
17637: IFFALSE 17649
// k := 5 else
17639: LD_ADDR_VAR 0 2
17643: PUSH
17644: LD_INT 5
17646: ST_TO_ADDR
17647: GO 17659
// k := tmp ;
17649: LD_ADDR_VAR 0 2
17653: PUSH
17654: LD_VAR 0 3
17658: ST_TO_ADDR
// for i := 1 to k do
17659: LD_ADDR_VAR 0 1
17663: PUSH
17664: DOUBLE
17665: LD_INT 1
17667: DEC
17668: ST_TO_ADDR
17669: LD_VAR 0 2
17673: PUSH
17674: FOR_TO
17675: IFFALSE 17774
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
17677: LD_VAR 0 3
17681: PUSH
17682: LD_VAR 0 1
17686: ARRAY
17687: PPUSH
17688: LD_VAR 0 1
17692: PUSH
17693: LD_INT 4
17695: MOD
17696: PUSH
17697: LD_INT 1
17699: PLUS
17700: PPUSH
17701: CALL_OW 259
17705: PUSH
17706: LD_INT 10
17708: LESS
17709: IFFALSE 17772
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
17711: LD_VAR 0 3
17715: PUSH
17716: LD_VAR 0 1
17720: ARRAY
17721: PPUSH
17722: LD_VAR 0 1
17726: PUSH
17727: LD_INT 4
17729: MOD
17730: PUSH
17731: LD_INT 1
17733: PLUS
17734: PPUSH
17735: LD_VAR 0 3
17739: PUSH
17740: LD_VAR 0 1
17744: ARRAY
17745: PPUSH
17746: LD_VAR 0 1
17750: PUSH
17751: LD_INT 4
17753: MOD
17754: PUSH
17755: LD_INT 1
17757: PLUS
17758: PPUSH
17759: CALL_OW 259
17763: PUSH
17764: LD_INT 1
17766: PLUS
17767: PPUSH
17768: CALL_OW 237
17772: GO 17674
17774: POP
17775: POP
// end ;
17776: PPOPN 3
17778: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
17779: LD_EXP 45
17783: PUSH
17784: LD_EXP 53
17788: AND
17789: IFFALSE 17809
17791: GO 17793
17793: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
17794: LD_INT 4
17796: PPUSH
17797: LD_OWVAR 2
17801: PPUSH
17802: LD_INT 0
17804: PPUSH
17805: CALL_OW 324
17809: END
// every 0 0$1 trigger StreamModeActive and sShovel do
17810: LD_EXP 45
17814: PUSH
17815: LD_EXP 82
17819: AND
17820: IFFALSE 17840
17822: GO 17824
17824: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
17825: LD_INT 19
17827: PPUSH
17828: LD_OWVAR 2
17832: PPUSH
17833: LD_INT 0
17835: PPUSH
17836: CALL_OW 324
17840: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
17841: LD_EXP 45
17845: PUSH
17846: LD_EXP 54
17850: AND
17851: IFFALSE 17953
17853: GO 17855
17855: DISABLE
17856: LD_INT 0
17858: PPUSH
17859: PPUSH
// begin enable ;
17860: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
17861: LD_ADDR_VAR 0 2
17865: PUSH
17866: LD_INT 22
17868: PUSH
17869: LD_OWVAR 2
17873: PUSH
17874: EMPTY
17875: LIST
17876: LIST
17877: PUSH
17878: LD_INT 2
17880: PUSH
17881: LD_INT 34
17883: PUSH
17884: LD_INT 11
17886: PUSH
17887: EMPTY
17888: LIST
17889: LIST
17890: PUSH
17891: LD_INT 34
17893: PUSH
17894: LD_INT 30
17896: PUSH
17897: EMPTY
17898: LIST
17899: LIST
17900: PUSH
17901: EMPTY
17902: LIST
17903: LIST
17904: LIST
17905: PUSH
17906: EMPTY
17907: LIST
17908: LIST
17909: PPUSH
17910: CALL_OW 69
17914: ST_TO_ADDR
// if not tmp then
17915: LD_VAR 0 2
17919: NOT
17920: IFFALSE 17924
// exit ;
17922: GO 17953
// for i in tmp do
17924: LD_ADDR_VAR 0 1
17928: PUSH
17929: LD_VAR 0 2
17933: PUSH
17934: FOR_IN
17935: IFFALSE 17951
// begin SetLives ( i , 0 ) ;
17937: LD_VAR 0 1
17941: PPUSH
17942: LD_INT 0
17944: PPUSH
17945: CALL_OW 234
// end ;
17949: GO 17934
17951: POP
17952: POP
// end ;
17953: PPOPN 2
17955: END
// every 0 0$1 trigger StreamModeActive and sBunker do
17956: LD_EXP 45
17960: PUSH
17961: LD_EXP 55
17965: AND
17966: IFFALSE 17986
17968: GO 17970
17970: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
17971: LD_INT 32
17973: PPUSH
17974: LD_OWVAR 2
17978: PPUSH
17979: LD_INT 0
17981: PPUSH
17982: CALL_OW 324
17986: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
17987: LD_EXP 45
17991: PUSH
17992: LD_EXP 56
17996: AND
17997: IFFALSE 18178
17999: GO 18001
18001: DISABLE
18002: LD_INT 0
18004: PPUSH
18005: PPUSH
18006: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
18007: LD_ADDR_VAR 0 2
18011: PUSH
18012: LD_INT 22
18014: PUSH
18015: LD_OWVAR 2
18019: PUSH
18020: EMPTY
18021: LIST
18022: LIST
18023: PUSH
18024: LD_INT 33
18026: PUSH
18027: LD_INT 3
18029: PUSH
18030: EMPTY
18031: LIST
18032: LIST
18033: PUSH
18034: EMPTY
18035: LIST
18036: LIST
18037: PPUSH
18038: CALL_OW 69
18042: ST_TO_ADDR
// if not tmp then
18043: LD_VAR 0 2
18047: NOT
18048: IFFALSE 18052
// exit ;
18050: GO 18178
// side := 0 ;
18052: LD_ADDR_VAR 0 3
18056: PUSH
18057: LD_INT 0
18059: ST_TO_ADDR
// for i := 1 to 8 do
18060: LD_ADDR_VAR 0 1
18064: PUSH
18065: DOUBLE
18066: LD_INT 1
18068: DEC
18069: ST_TO_ADDR
18070: LD_INT 8
18072: PUSH
18073: FOR_TO
18074: IFFALSE 18122
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
18076: LD_OWVAR 2
18080: PUSH
18081: LD_VAR 0 1
18085: NONEQUAL
18086: PUSH
18087: LD_OWVAR 2
18091: PPUSH
18092: LD_VAR 0 1
18096: PPUSH
18097: CALL_OW 81
18101: PUSH
18102: LD_INT 2
18104: EQUAL
18105: AND
18106: IFFALSE 18120
// begin side := i ;
18108: LD_ADDR_VAR 0 3
18112: PUSH
18113: LD_VAR 0 1
18117: ST_TO_ADDR
// break ;
18118: GO 18122
// end ;
18120: GO 18073
18122: POP
18123: POP
// if not side then
18124: LD_VAR 0 3
18128: NOT
18129: IFFALSE 18133
// exit ;
18131: GO 18178
// for i := 1 to tmp do
18133: LD_ADDR_VAR 0 1
18137: PUSH
18138: DOUBLE
18139: LD_INT 1
18141: DEC
18142: ST_TO_ADDR
18143: LD_VAR 0 2
18147: PUSH
18148: FOR_TO
18149: IFFALSE 18176
// if Prob ( 60 ) then
18151: LD_INT 60
18153: PPUSH
18154: CALL_OW 13
18158: IFFALSE 18174
// SetSide ( i , side ) ;
18160: LD_VAR 0 1
18164: PPUSH
18165: LD_VAR 0 3
18169: PPUSH
18170: CALL_OW 235
18174: GO 18148
18176: POP
18177: POP
// end ;
18178: PPOPN 3
18180: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
18181: LD_EXP 45
18185: PUSH
18186: LD_EXP 58
18190: AND
18191: IFFALSE 18310
18193: GO 18195
18195: DISABLE
18196: LD_INT 0
18198: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
18199: LD_ADDR_VAR 0 1
18203: PUSH
18204: LD_INT 22
18206: PUSH
18207: LD_OWVAR 2
18211: PUSH
18212: EMPTY
18213: LIST
18214: LIST
18215: PUSH
18216: LD_INT 21
18218: PUSH
18219: LD_INT 1
18221: PUSH
18222: EMPTY
18223: LIST
18224: LIST
18225: PUSH
18226: LD_INT 3
18228: PUSH
18229: LD_INT 23
18231: PUSH
18232: LD_INT 0
18234: PUSH
18235: EMPTY
18236: LIST
18237: LIST
18238: PUSH
18239: EMPTY
18240: LIST
18241: LIST
18242: PUSH
18243: EMPTY
18244: LIST
18245: LIST
18246: LIST
18247: PPUSH
18248: CALL_OW 69
18252: PUSH
18253: FOR_IN
18254: IFFALSE 18308
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
18256: LD_VAR 0 1
18260: PPUSH
18261: CALL_OW 257
18265: PUSH
18266: LD_INT 1
18268: PUSH
18269: LD_INT 2
18271: PUSH
18272: LD_INT 3
18274: PUSH
18275: LD_INT 4
18277: PUSH
18278: EMPTY
18279: LIST
18280: LIST
18281: LIST
18282: LIST
18283: IN
18284: IFFALSE 18306
// SetClass ( un , rand ( 1 , 4 ) ) ;
18286: LD_VAR 0 1
18290: PPUSH
18291: LD_INT 1
18293: PPUSH
18294: LD_INT 4
18296: PPUSH
18297: CALL_OW 12
18301: PPUSH
18302: CALL_OW 336
18306: GO 18253
18308: POP
18309: POP
// end ;
18310: PPOPN 1
18312: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
18313: LD_EXP 45
18317: PUSH
18318: LD_EXP 57
18322: AND
18323: IFFALSE 18402
18325: GO 18327
18327: DISABLE
18328: LD_INT 0
18330: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18331: LD_ADDR_VAR 0 1
18335: PUSH
18336: LD_INT 22
18338: PUSH
18339: LD_OWVAR 2
18343: PUSH
18344: EMPTY
18345: LIST
18346: LIST
18347: PUSH
18348: LD_INT 21
18350: PUSH
18351: LD_INT 3
18353: PUSH
18354: EMPTY
18355: LIST
18356: LIST
18357: PUSH
18358: EMPTY
18359: LIST
18360: LIST
18361: PPUSH
18362: CALL_OW 69
18366: ST_TO_ADDR
// if not tmp then
18367: LD_VAR 0 1
18371: NOT
18372: IFFALSE 18376
// exit ;
18374: GO 18402
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
18376: LD_VAR 0 1
18380: PUSH
18381: LD_INT 1
18383: PPUSH
18384: LD_VAR 0 1
18388: PPUSH
18389: CALL_OW 12
18393: ARRAY
18394: PPUSH
18395: LD_INT 100
18397: PPUSH
18398: CALL_OW 234
// end ;
18402: PPOPN 1
18404: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
18405: LD_EXP 45
18409: PUSH
18410: LD_EXP 59
18414: AND
18415: IFFALSE 18513
18417: GO 18419
18419: DISABLE
18420: LD_INT 0
18422: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18423: LD_ADDR_VAR 0 1
18427: PUSH
18428: LD_INT 22
18430: PUSH
18431: LD_OWVAR 2
18435: PUSH
18436: EMPTY
18437: LIST
18438: LIST
18439: PUSH
18440: LD_INT 21
18442: PUSH
18443: LD_INT 1
18445: PUSH
18446: EMPTY
18447: LIST
18448: LIST
18449: PUSH
18450: EMPTY
18451: LIST
18452: LIST
18453: PPUSH
18454: CALL_OW 69
18458: ST_TO_ADDR
// if not tmp then
18459: LD_VAR 0 1
18463: NOT
18464: IFFALSE 18468
// exit ;
18466: GO 18513
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
18468: LD_VAR 0 1
18472: PUSH
18473: LD_INT 1
18475: PPUSH
18476: LD_VAR 0 1
18480: PPUSH
18481: CALL_OW 12
18485: ARRAY
18486: PPUSH
18487: LD_INT 1
18489: PPUSH
18490: LD_INT 4
18492: PPUSH
18493: CALL_OW 12
18497: PPUSH
18498: LD_INT 3000
18500: PPUSH
18501: LD_INT 9000
18503: PPUSH
18504: CALL_OW 12
18508: PPUSH
18509: CALL_OW 492
// end ;
18513: PPOPN 1
18515: END
// every 0 0$1 trigger StreamModeActive and sDepot do
18516: LD_EXP 45
18520: PUSH
18521: LD_EXP 60
18525: AND
18526: IFFALSE 18546
18528: GO 18530
18530: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
18531: LD_INT 1
18533: PPUSH
18534: LD_OWVAR 2
18538: PPUSH
18539: LD_INT 0
18541: PPUSH
18542: CALL_OW 324
18546: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
18547: LD_EXP 45
18551: PUSH
18552: LD_EXP 61
18556: AND
18557: IFFALSE 18640
18559: GO 18561
18561: DISABLE
18562: LD_INT 0
18564: PPUSH
18565: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18566: LD_ADDR_VAR 0 2
18570: PUSH
18571: LD_INT 22
18573: PUSH
18574: LD_OWVAR 2
18578: PUSH
18579: EMPTY
18580: LIST
18581: LIST
18582: PUSH
18583: LD_INT 21
18585: PUSH
18586: LD_INT 3
18588: PUSH
18589: EMPTY
18590: LIST
18591: LIST
18592: PUSH
18593: EMPTY
18594: LIST
18595: LIST
18596: PPUSH
18597: CALL_OW 69
18601: ST_TO_ADDR
// if not tmp then
18602: LD_VAR 0 2
18606: NOT
18607: IFFALSE 18611
// exit ;
18609: GO 18640
// for i in tmp do
18611: LD_ADDR_VAR 0 1
18615: PUSH
18616: LD_VAR 0 2
18620: PUSH
18621: FOR_IN
18622: IFFALSE 18638
// SetBLevel ( i , 10 ) ;
18624: LD_VAR 0 1
18628: PPUSH
18629: LD_INT 10
18631: PPUSH
18632: CALL_OW 241
18636: GO 18621
18638: POP
18639: POP
// end ;
18640: PPOPN 2
18642: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
18643: LD_EXP 45
18647: PUSH
18648: LD_EXP 62
18652: AND
18653: IFFALSE 18764
18655: GO 18657
18657: DISABLE
18658: LD_INT 0
18660: PPUSH
18661: PPUSH
18662: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18663: LD_ADDR_VAR 0 3
18667: PUSH
18668: LD_INT 22
18670: PUSH
18671: LD_OWVAR 2
18675: PUSH
18676: EMPTY
18677: LIST
18678: LIST
18679: PUSH
18680: LD_INT 25
18682: PUSH
18683: LD_INT 1
18685: PUSH
18686: EMPTY
18687: LIST
18688: LIST
18689: PUSH
18690: EMPTY
18691: LIST
18692: LIST
18693: PPUSH
18694: CALL_OW 69
18698: ST_TO_ADDR
// if not tmp then
18699: LD_VAR 0 3
18703: NOT
18704: IFFALSE 18708
// exit ;
18706: GO 18764
// un := tmp [ rand ( 1 , tmp ) ] ;
18708: LD_ADDR_VAR 0 2
18712: PUSH
18713: LD_VAR 0 3
18717: PUSH
18718: LD_INT 1
18720: PPUSH
18721: LD_VAR 0 3
18725: PPUSH
18726: CALL_OW 12
18730: ARRAY
18731: ST_TO_ADDR
// if Crawls ( un ) then
18732: LD_VAR 0 2
18736: PPUSH
18737: CALL_OW 318
18741: IFFALSE 18752
// ComWalk ( un ) ;
18743: LD_VAR 0 2
18747: PPUSH
18748: CALL_OW 138
// SetClass ( un , class_sniper ) ;
18752: LD_VAR 0 2
18756: PPUSH
18757: LD_INT 5
18759: PPUSH
18760: CALL_OW 336
// end ;
18764: PPOPN 3
18766: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
18767: LD_EXP 45
18771: PUSH
18772: LD_EXP 63
18776: AND
18777: PUSH
18778: LD_OWVAR 67
18782: PUSH
18783: LD_INT 4
18785: LESS
18786: AND
18787: IFFALSE 18806
18789: GO 18791
18791: DISABLE
// begin Difficulty := Difficulty + 1 ;
18792: LD_ADDR_OWVAR 67
18796: PUSH
18797: LD_OWVAR 67
18801: PUSH
18802: LD_INT 1
18804: PLUS
18805: ST_TO_ADDR
// end ;
18806: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
18807: LD_EXP 45
18811: PUSH
18812: LD_EXP 64
18816: AND
18817: IFFALSE 18920
18819: GO 18821
18821: DISABLE
18822: LD_INT 0
18824: PPUSH
// begin for i := 1 to 5 do
18825: LD_ADDR_VAR 0 1
18829: PUSH
18830: DOUBLE
18831: LD_INT 1
18833: DEC
18834: ST_TO_ADDR
18835: LD_INT 5
18837: PUSH
18838: FOR_TO
18839: IFFALSE 18918
// begin uc_nation := nation_nature ;
18841: LD_ADDR_OWVAR 21
18845: PUSH
18846: LD_INT 0
18848: ST_TO_ADDR
// uc_side := 0 ;
18849: LD_ADDR_OWVAR 20
18853: PUSH
18854: LD_INT 0
18856: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
18857: LD_ADDR_OWVAR 29
18861: PUSH
18862: LD_INT 12
18864: PUSH
18865: LD_INT 12
18867: PUSH
18868: EMPTY
18869: LIST
18870: LIST
18871: ST_TO_ADDR
// hc_agressivity := 20 ;
18872: LD_ADDR_OWVAR 35
18876: PUSH
18877: LD_INT 20
18879: ST_TO_ADDR
// hc_class := class_tiger ;
18880: LD_ADDR_OWVAR 28
18884: PUSH
18885: LD_INT 14
18887: ST_TO_ADDR
// hc_gallery :=  ;
18888: LD_ADDR_OWVAR 33
18892: PUSH
18893: LD_STRING 
18895: ST_TO_ADDR
// hc_name :=  ;
18896: LD_ADDR_OWVAR 26
18900: PUSH
18901: LD_STRING 
18903: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
18904: CALL_OW 44
18908: PPUSH
18909: LD_INT 0
18911: PPUSH
18912: CALL_OW 51
// end ;
18916: GO 18838
18918: POP
18919: POP
// end ;
18920: PPOPN 1
18922: END
// every 0 0$1 trigger StreamModeActive and sBomb do
18923: LD_EXP 45
18927: PUSH
18928: LD_EXP 65
18932: AND
18933: IFFALSE 18942
18935: GO 18937
18937: DISABLE
// StreamSibBomb ;
18938: CALL 18943 0 0
18942: END
// export function StreamSibBomb ; var i , x , y ; begin
18943: LD_INT 0
18945: PPUSH
18946: PPUSH
18947: PPUSH
18948: PPUSH
// result := false ;
18949: LD_ADDR_VAR 0 1
18953: PUSH
18954: LD_INT 0
18956: ST_TO_ADDR
// for i := 1 to 16 do
18957: LD_ADDR_VAR 0 2
18961: PUSH
18962: DOUBLE
18963: LD_INT 1
18965: DEC
18966: ST_TO_ADDR
18967: LD_INT 16
18969: PUSH
18970: FOR_TO
18971: IFFALSE 19170
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18973: LD_ADDR_VAR 0 3
18977: PUSH
18978: LD_INT 10
18980: PUSH
18981: LD_INT 20
18983: PUSH
18984: LD_INT 30
18986: PUSH
18987: LD_INT 40
18989: PUSH
18990: LD_INT 50
18992: PUSH
18993: LD_INT 60
18995: PUSH
18996: LD_INT 70
18998: PUSH
18999: LD_INT 80
19001: PUSH
19002: LD_INT 90
19004: PUSH
19005: LD_INT 100
19007: PUSH
19008: LD_INT 110
19010: PUSH
19011: LD_INT 120
19013: PUSH
19014: LD_INT 130
19016: PUSH
19017: LD_INT 140
19019: PUSH
19020: LD_INT 150
19022: PUSH
19023: EMPTY
19024: LIST
19025: LIST
19026: LIST
19027: LIST
19028: LIST
19029: LIST
19030: LIST
19031: LIST
19032: LIST
19033: LIST
19034: LIST
19035: LIST
19036: LIST
19037: LIST
19038: LIST
19039: PUSH
19040: LD_INT 1
19042: PPUSH
19043: LD_INT 15
19045: PPUSH
19046: CALL_OW 12
19050: ARRAY
19051: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
19052: LD_ADDR_VAR 0 4
19056: PUSH
19057: LD_INT 10
19059: PUSH
19060: LD_INT 20
19062: PUSH
19063: LD_INT 30
19065: PUSH
19066: LD_INT 40
19068: PUSH
19069: LD_INT 50
19071: PUSH
19072: LD_INT 60
19074: PUSH
19075: LD_INT 70
19077: PUSH
19078: LD_INT 80
19080: PUSH
19081: LD_INT 90
19083: PUSH
19084: LD_INT 100
19086: PUSH
19087: LD_INT 110
19089: PUSH
19090: LD_INT 120
19092: PUSH
19093: LD_INT 130
19095: PUSH
19096: LD_INT 140
19098: PUSH
19099: LD_INT 150
19101: PUSH
19102: EMPTY
19103: LIST
19104: LIST
19105: LIST
19106: LIST
19107: LIST
19108: LIST
19109: LIST
19110: LIST
19111: LIST
19112: LIST
19113: LIST
19114: LIST
19115: LIST
19116: LIST
19117: LIST
19118: PUSH
19119: LD_INT 1
19121: PPUSH
19122: LD_INT 15
19124: PPUSH
19125: CALL_OW 12
19129: ARRAY
19130: ST_TO_ADDR
// if ValidHex ( x , y ) then
19131: LD_VAR 0 3
19135: PPUSH
19136: LD_VAR 0 4
19140: PPUSH
19141: CALL_OW 488
19145: IFFALSE 19168
// begin result := [ x , y ] ;
19147: LD_ADDR_VAR 0 1
19151: PUSH
19152: LD_VAR 0 3
19156: PUSH
19157: LD_VAR 0 4
19161: PUSH
19162: EMPTY
19163: LIST
19164: LIST
19165: ST_TO_ADDR
// break ;
19166: GO 19170
// end ; end ;
19168: GO 18970
19170: POP
19171: POP
// if result then
19172: LD_VAR 0 1
19176: IFFALSE 19236
// begin ToLua ( playSibBomb() ) ;
19178: LD_STRING playSibBomb()
19180: PPUSH
19181: CALL_OW 559
// wait ( 0 0$14 ) ;
19185: LD_INT 490
19187: PPUSH
19188: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
19192: LD_VAR 0 1
19196: PUSH
19197: LD_INT 1
19199: ARRAY
19200: PPUSH
19201: LD_VAR 0 1
19205: PUSH
19206: LD_INT 2
19208: ARRAY
19209: PPUSH
19210: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
19214: LD_VAR 0 1
19218: PUSH
19219: LD_INT 1
19221: ARRAY
19222: PPUSH
19223: LD_VAR 0 1
19227: PUSH
19228: LD_INT 2
19230: ARRAY
19231: PPUSH
19232: CALL_OW 429
// end ; end ;
19236: LD_VAR 0 1
19240: RET
// every 0 0$1 trigger StreamModeActive and sReset do
19241: LD_EXP 45
19245: PUSH
19246: LD_EXP 67
19250: AND
19251: IFFALSE 19263
19253: GO 19255
19255: DISABLE
// YouLost (  ) ;
19256: LD_STRING 
19258: PPUSH
19259: CALL_OW 104
19263: END
// every 0 0$1 trigger StreamModeActive and sFog do
19264: LD_EXP 45
19268: PUSH
19269: LD_EXP 66
19273: AND
19274: IFFALSE 19288
19276: GO 19278
19278: DISABLE
// FogOff ( your_side ) ;
19279: LD_OWVAR 2
19283: PPUSH
19284: CALL_OW 344
19288: END
// every 0 0$1 trigger StreamModeActive and sSun do
19289: LD_EXP 45
19293: PUSH
19294: LD_EXP 68
19298: AND
19299: IFFALSE 19327
19301: GO 19303
19303: DISABLE
// begin solar_recharge_percent := 0 ;
19304: LD_ADDR_OWVAR 79
19308: PUSH
19309: LD_INT 0
19311: ST_TO_ADDR
// wait ( 5 5$00 ) ;
19312: LD_INT 10500
19314: PPUSH
19315: CALL_OW 67
// solar_recharge_percent := 100 ;
19319: LD_ADDR_OWVAR 79
19323: PUSH
19324: LD_INT 100
19326: ST_TO_ADDR
// end ;
19327: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
19328: LD_EXP 45
19332: PUSH
19333: LD_EXP 69
19337: AND
19338: IFFALSE 19577
19340: GO 19342
19342: DISABLE
19343: LD_INT 0
19345: PPUSH
19346: PPUSH
19347: PPUSH
// begin tmp := [ ] ;
19348: LD_ADDR_VAR 0 3
19352: PUSH
19353: EMPTY
19354: ST_TO_ADDR
// for i := 1 to 6 do
19355: LD_ADDR_VAR 0 1
19359: PUSH
19360: DOUBLE
19361: LD_INT 1
19363: DEC
19364: ST_TO_ADDR
19365: LD_INT 6
19367: PUSH
19368: FOR_TO
19369: IFFALSE 19474
// begin uc_nation := nation_nature ;
19371: LD_ADDR_OWVAR 21
19375: PUSH
19376: LD_INT 0
19378: ST_TO_ADDR
// uc_side := 0 ;
19379: LD_ADDR_OWVAR 20
19383: PUSH
19384: LD_INT 0
19386: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19387: LD_ADDR_OWVAR 29
19391: PUSH
19392: LD_INT 12
19394: PUSH
19395: LD_INT 12
19397: PUSH
19398: EMPTY
19399: LIST
19400: LIST
19401: ST_TO_ADDR
// hc_agressivity := 20 ;
19402: LD_ADDR_OWVAR 35
19406: PUSH
19407: LD_INT 20
19409: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
19410: LD_ADDR_OWVAR 28
19414: PUSH
19415: LD_INT 17
19417: ST_TO_ADDR
// hc_gallery :=  ;
19418: LD_ADDR_OWVAR 33
19422: PUSH
19423: LD_STRING 
19425: ST_TO_ADDR
// hc_name :=  ;
19426: LD_ADDR_OWVAR 26
19430: PUSH
19431: LD_STRING 
19433: ST_TO_ADDR
// un := CreateHuman ;
19434: LD_ADDR_VAR 0 2
19438: PUSH
19439: CALL_OW 44
19443: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
19444: LD_VAR 0 2
19448: PPUSH
19449: LD_INT 1
19451: PPUSH
19452: CALL_OW 51
// tmp := tmp ^ un ;
19456: LD_ADDR_VAR 0 3
19460: PUSH
19461: LD_VAR 0 3
19465: PUSH
19466: LD_VAR 0 2
19470: ADD
19471: ST_TO_ADDR
// end ;
19472: GO 19368
19474: POP
19475: POP
// repeat wait ( 0 0$1 ) ;
19476: LD_INT 35
19478: PPUSH
19479: CALL_OW 67
// for un in tmp do
19483: LD_ADDR_VAR 0 2
19487: PUSH
19488: LD_VAR 0 3
19492: PUSH
19493: FOR_IN
19494: IFFALSE 19568
// begin if IsDead ( un ) then
19496: LD_VAR 0 2
19500: PPUSH
19501: CALL_OW 301
19505: IFFALSE 19525
// begin tmp := tmp diff un ;
19507: LD_ADDR_VAR 0 3
19511: PUSH
19512: LD_VAR 0 3
19516: PUSH
19517: LD_VAR 0 2
19521: DIFF
19522: ST_TO_ADDR
// continue ;
19523: GO 19493
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
19525: LD_VAR 0 2
19529: PPUSH
19530: LD_INT 3
19532: PUSH
19533: LD_INT 22
19535: PUSH
19536: LD_INT 0
19538: PUSH
19539: EMPTY
19540: LIST
19541: LIST
19542: PUSH
19543: EMPTY
19544: LIST
19545: LIST
19546: PPUSH
19547: CALL_OW 69
19551: PPUSH
19552: LD_VAR 0 2
19556: PPUSH
19557: CALL_OW 74
19561: PPUSH
19562: CALL_OW 115
// end ;
19566: GO 19493
19568: POP
19569: POP
// until not tmp ;
19570: LD_VAR 0 3
19574: NOT
19575: IFFALSE 19476
// end ;
19577: PPOPN 3
19579: END
// every 0 0$1 trigger StreamModeActive and sTroll do
19580: LD_EXP 45
19584: PUSH
19585: LD_EXP 70
19589: AND
19590: IFFALSE 19644
19592: GO 19594
19594: DISABLE
// begin ToLua ( displayTroll(); ) ;
19595: LD_STRING displayTroll();
19597: PPUSH
19598: CALL_OW 559
// wait ( 3 3$00 ) ;
19602: LD_INT 6300
19604: PPUSH
19605: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19609: LD_STRING hideTroll();
19611: PPUSH
19612: CALL_OW 559
// wait ( 1 1$00 ) ;
19616: LD_INT 2100
19618: PPUSH
19619: CALL_OW 67
// ToLua ( displayTroll(); ) ;
19623: LD_STRING displayTroll();
19625: PPUSH
19626: CALL_OW 559
// wait ( 1 1$00 ) ;
19630: LD_INT 2100
19632: PPUSH
19633: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19637: LD_STRING hideTroll();
19639: PPUSH
19640: CALL_OW 559
// end ;
19644: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
19645: LD_EXP 45
19649: PUSH
19650: LD_EXP 71
19654: AND
19655: IFFALSE 19718
19657: GO 19659
19659: DISABLE
19660: LD_INT 0
19662: PPUSH
// begin p := 0 ;
19663: LD_ADDR_VAR 0 1
19667: PUSH
19668: LD_INT 0
19670: ST_TO_ADDR
// repeat game_speed := 1 ;
19671: LD_ADDR_OWVAR 65
19675: PUSH
19676: LD_INT 1
19678: ST_TO_ADDR
// wait ( 0 0$1 ) ;
19679: LD_INT 35
19681: PPUSH
19682: CALL_OW 67
// p := p + 1 ;
19686: LD_ADDR_VAR 0 1
19690: PUSH
19691: LD_VAR 0 1
19695: PUSH
19696: LD_INT 1
19698: PLUS
19699: ST_TO_ADDR
// until p >= 60 ;
19700: LD_VAR 0 1
19704: PUSH
19705: LD_INT 60
19707: GREATEREQUAL
19708: IFFALSE 19671
// game_speed := 4 ;
19710: LD_ADDR_OWVAR 65
19714: PUSH
19715: LD_INT 4
19717: ST_TO_ADDR
// end ;
19718: PPOPN 1
19720: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
19721: LD_EXP 45
19725: PUSH
19726: LD_EXP 72
19730: AND
19731: IFFALSE 19877
19733: GO 19735
19735: DISABLE
19736: LD_INT 0
19738: PPUSH
19739: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19740: LD_ADDR_VAR 0 1
19744: PUSH
19745: LD_INT 22
19747: PUSH
19748: LD_OWVAR 2
19752: PUSH
19753: EMPTY
19754: LIST
19755: LIST
19756: PUSH
19757: LD_INT 2
19759: PUSH
19760: LD_INT 30
19762: PUSH
19763: LD_INT 0
19765: PUSH
19766: EMPTY
19767: LIST
19768: LIST
19769: PUSH
19770: LD_INT 30
19772: PUSH
19773: LD_INT 1
19775: PUSH
19776: EMPTY
19777: LIST
19778: LIST
19779: PUSH
19780: EMPTY
19781: LIST
19782: LIST
19783: LIST
19784: PUSH
19785: EMPTY
19786: LIST
19787: LIST
19788: PPUSH
19789: CALL_OW 69
19793: ST_TO_ADDR
// if not depot then
19794: LD_VAR 0 1
19798: NOT
19799: IFFALSE 19803
// exit ;
19801: GO 19877
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
19803: LD_ADDR_VAR 0 2
19807: PUSH
19808: LD_VAR 0 1
19812: PUSH
19813: LD_INT 1
19815: PPUSH
19816: LD_VAR 0 1
19820: PPUSH
19821: CALL_OW 12
19825: ARRAY
19826: PPUSH
19827: CALL_OW 274
19831: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
19832: LD_VAR 0 2
19836: PPUSH
19837: LD_INT 1
19839: PPUSH
19840: LD_INT 0
19842: PPUSH
19843: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
19847: LD_VAR 0 2
19851: PPUSH
19852: LD_INT 2
19854: PPUSH
19855: LD_INT 0
19857: PPUSH
19858: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
19862: LD_VAR 0 2
19866: PPUSH
19867: LD_INT 3
19869: PPUSH
19870: LD_INT 0
19872: PPUSH
19873: CALL_OW 277
// end ;
19877: PPOPN 2
19879: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
19880: LD_EXP 45
19884: PUSH
19885: LD_EXP 73
19889: AND
19890: IFFALSE 19987
19892: GO 19894
19894: DISABLE
19895: LD_INT 0
19897: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19898: LD_ADDR_VAR 0 1
19902: PUSH
19903: LD_INT 22
19905: PUSH
19906: LD_OWVAR 2
19910: PUSH
19911: EMPTY
19912: LIST
19913: LIST
19914: PUSH
19915: LD_INT 21
19917: PUSH
19918: LD_INT 1
19920: PUSH
19921: EMPTY
19922: LIST
19923: LIST
19924: PUSH
19925: LD_INT 3
19927: PUSH
19928: LD_INT 23
19930: PUSH
19931: LD_INT 0
19933: PUSH
19934: EMPTY
19935: LIST
19936: LIST
19937: PUSH
19938: EMPTY
19939: LIST
19940: LIST
19941: PUSH
19942: EMPTY
19943: LIST
19944: LIST
19945: LIST
19946: PPUSH
19947: CALL_OW 69
19951: ST_TO_ADDR
// if not tmp then
19952: LD_VAR 0 1
19956: NOT
19957: IFFALSE 19961
// exit ;
19959: GO 19987
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
19961: LD_VAR 0 1
19965: PUSH
19966: LD_INT 1
19968: PPUSH
19969: LD_VAR 0 1
19973: PPUSH
19974: CALL_OW 12
19978: ARRAY
19979: PPUSH
19980: LD_INT 200
19982: PPUSH
19983: CALL_OW 234
// end ;
19987: PPOPN 1
19989: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
19990: LD_EXP 45
19994: PUSH
19995: LD_EXP 74
19999: AND
20000: IFFALSE 20079
20002: GO 20004
20004: DISABLE
20005: LD_INT 0
20007: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
20008: LD_ADDR_VAR 0 1
20012: PUSH
20013: LD_INT 22
20015: PUSH
20016: LD_OWVAR 2
20020: PUSH
20021: EMPTY
20022: LIST
20023: LIST
20024: PUSH
20025: LD_INT 21
20027: PUSH
20028: LD_INT 2
20030: PUSH
20031: EMPTY
20032: LIST
20033: LIST
20034: PUSH
20035: EMPTY
20036: LIST
20037: LIST
20038: PPUSH
20039: CALL_OW 69
20043: ST_TO_ADDR
// if not tmp then
20044: LD_VAR 0 1
20048: NOT
20049: IFFALSE 20053
// exit ;
20051: GO 20079
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
20053: LD_VAR 0 1
20057: PUSH
20058: LD_INT 1
20060: PPUSH
20061: LD_VAR 0 1
20065: PPUSH
20066: CALL_OW 12
20070: ARRAY
20071: PPUSH
20072: LD_INT 60
20074: PPUSH
20075: CALL_OW 234
// end ;
20079: PPOPN 1
20081: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
20082: LD_EXP 45
20086: PUSH
20087: LD_EXP 75
20091: AND
20092: IFFALSE 20191
20094: GO 20096
20096: DISABLE
20097: LD_INT 0
20099: PPUSH
20100: PPUSH
// begin enable ;
20101: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
20102: LD_ADDR_VAR 0 1
20106: PUSH
20107: LD_INT 22
20109: PUSH
20110: LD_OWVAR 2
20114: PUSH
20115: EMPTY
20116: LIST
20117: LIST
20118: PUSH
20119: LD_INT 61
20121: PUSH
20122: EMPTY
20123: LIST
20124: PUSH
20125: LD_INT 33
20127: PUSH
20128: LD_INT 2
20130: PUSH
20131: EMPTY
20132: LIST
20133: LIST
20134: PUSH
20135: EMPTY
20136: LIST
20137: LIST
20138: LIST
20139: PPUSH
20140: CALL_OW 69
20144: ST_TO_ADDR
// if not tmp then
20145: LD_VAR 0 1
20149: NOT
20150: IFFALSE 20154
// exit ;
20152: GO 20191
// for i in tmp do
20154: LD_ADDR_VAR 0 2
20158: PUSH
20159: LD_VAR 0 1
20163: PUSH
20164: FOR_IN
20165: IFFALSE 20189
// if IsControledBy ( i ) then
20167: LD_VAR 0 2
20171: PPUSH
20172: CALL_OW 312
20176: IFFALSE 20187
// ComUnlink ( i ) ;
20178: LD_VAR 0 2
20182: PPUSH
20183: CALL_OW 136
20187: GO 20164
20189: POP
20190: POP
// end ;
20191: PPOPN 2
20193: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
20194: LD_EXP 45
20198: PUSH
20199: LD_EXP 76
20203: AND
20204: IFFALSE 20344
20206: GO 20208
20208: DISABLE
20209: LD_INT 0
20211: PPUSH
20212: PPUSH
// begin ToLua ( displayPowell(); ) ;
20213: LD_STRING displayPowell();
20215: PPUSH
20216: CALL_OW 559
// uc_side := 0 ;
20220: LD_ADDR_OWVAR 20
20224: PUSH
20225: LD_INT 0
20227: ST_TO_ADDR
// uc_nation := 2 ;
20228: LD_ADDR_OWVAR 21
20232: PUSH
20233: LD_INT 2
20235: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
20236: LD_ADDR_OWVAR 37
20240: PUSH
20241: LD_INT 14
20243: ST_TO_ADDR
// vc_engine := engine_siberite ;
20244: LD_ADDR_OWVAR 39
20248: PUSH
20249: LD_INT 3
20251: ST_TO_ADDR
// vc_control := control_apeman ;
20252: LD_ADDR_OWVAR 38
20256: PUSH
20257: LD_INT 5
20259: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
20260: LD_ADDR_OWVAR 40
20264: PUSH
20265: LD_INT 29
20267: ST_TO_ADDR
// un := CreateVehicle ;
20268: LD_ADDR_VAR 0 2
20272: PUSH
20273: CALL_OW 45
20277: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20278: LD_VAR 0 2
20282: PPUSH
20283: LD_INT 1
20285: PPUSH
20286: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20290: LD_INT 35
20292: PPUSH
20293: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20297: LD_VAR 0 2
20301: PPUSH
20302: LD_INT 22
20304: PUSH
20305: LD_OWVAR 2
20309: PUSH
20310: EMPTY
20311: LIST
20312: LIST
20313: PPUSH
20314: CALL_OW 69
20318: PPUSH
20319: LD_VAR 0 2
20323: PPUSH
20324: CALL_OW 74
20328: PPUSH
20329: CALL_OW 115
// until IsDead ( un ) ;
20333: LD_VAR 0 2
20337: PPUSH
20338: CALL_OW 301
20342: IFFALSE 20290
// end ;
20344: PPOPN 2
20346: END
// every 0 0$1 trigger StreamModeActive and sStu do
20347: LD_EXP 45
20351: PUSH
20352: LD_EXP 84
20356: AND
20357: IFFALSE 20373
20359: GO 20361
20361: DISABLE
// begin ToLua ( displayStucuk(); ) ;
20362: LD_STRING displayStucuk();
20364: PPUSH
20365: CALL_OW 559
// ResetFog ;
20369: CALL_OW 335
// end ;
20373: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
20374: LD_EXP 45
20378: PUSH
20379: LD_EXP 77
20383: AND
20384: IFFALSE 20525
20386: GO 20388
20388: DISABLE
20389: LD_INT 0
20391: PPUSH
20392: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20393: LD_ADDR_VAR 0 2
20397: PUSH
20398: LD_INT 22
20400: PUSH
20401: LD_OWVAR 2
20405: PUSH
20406: EMPTY
20407: LIST
20408: LIST
20409: PUSH
20410: LD_INT 21
20412: PUSH
20413: LD_INT 1
20415: PUSH
20416: EMPTY
20417: LIST
20418: LIST
20419: PUSH
20420: EMPTY
20421: LIST
20422: LIST
20423: PPUSH
20424: CALL_OW 69
20428: ST_TO_ADDR
// if not tmp then
20429: LD_VAR 0 2
20433: NOT
20434: IFFALSE 20438
// exit ;
20436: GO 20525
// un := tmp [ rand ( 1 , tmp ) ] ;
20438: LD_ADDR_VAR 0 1
20442: PUSH
20443: LD_VAR 0 2
20447: PUSH
20448: LD_INT 1
20450: PPUSH
20451: LD_VAR 0 2
20455: PPUSH
20456: CALL_OW 12
20460: ARRAY
20461: ST_TO_ADDR
// SetSide ( un , 0 ) ;
20462: LD_VAR 0 1
20466: PPUSH
20467: LD_INT 0
20469: PPUSH
20470: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
20474: LD_VAR 0 1
20478: PPUSH
20479: LD_OWVAR 3
20483: PUSH
20484: LD_VAR 0 1
20488: DIFF
20489: PPUSH
20490: LD_VAR 0 1
20494: PPUSH
20495: CALL_OW 74
20499: PPUSH
20500: CALL_OW 115
// wait ( 0 0$20 ) ;
20504: LD_INT 700
20506: PPUSH
20507: CALL_OW 67
// SetSide ( un , your_side ) ;
20511: LD_VAR 0 1
20515: PPUSH
20516: LD_OWVAR 2
20520: PPUSH
20521: CALL_OW 235
// end ;
20525: PPOPN 2
20527: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
20528: LD_EXP 45
20532: PUSH
20533: LD_EXP 78
20537: AND
20538: IFFALSE 20644
20540: GO 20542
20542: DISABLE
20543: LD_INT 0
20545: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20546: LD_ADDR_VAR 0 1
20550: PUSH
20551: LD_INT 22
20553: PUSH
20554: LD_OWVAR 2
20558: PUSH
20559: EMPTY
20560: LIST
20561: LIST
20562: PUSH
20563: LD_INT 2
20565: PUSH
20566: LD_INT 30
20568: PUSH
20569: LD_INT 0
20571: PUSH
20572: EMPTY
20573: LIST
20574: LIST
20575: PUSH
20576: LD_INT 30
20578: PUSH
20579: LD_INT 1
20581: PUSH
20582: EMPTY
20583: LIST
20584: LIST
20585: PUSH
20586: EMPTY
20587: LIST
20588: LIST
20589: LIST
20590: PUSH
20591: EMPTY
20592: LIST
20593: LIST
20594: PPUSH
20595: CALL_OW 69
20599: ST_TO_ADDR
// if not depot then
20600: LD_VAR 0 1
20604: NOT
20605: IFFALSE 20609
// exit ;
20607: GO 20644
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
20609: LD_VAR 0 1
20613: PUSH
20614: LD_INT 1
20616: ARRAY
20617: PPUSH
20618: CALL_OW 250
20622: PPUSH
20623: LD_VAR 0 1
20627: PUSH
20628: LD_INT 1
20630: ARRAY
20631: PPUSH
20632: CALL_OW 251
20636: PPUSH
20637: LD_INT 70
20639: PPUSH
20640: CALL_OW 495
// end ;
20644: PPOPN 1
20646: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
20647: LD_EXP 45
20651: PUSH
20652: LD_EXP 79
20656: AND
20657: IFFALSE 20868
20659: GO 20661
20661: DISABLE
20662: LD_INT 0
20664: PPUSH
20665: PPUSH
20666: PPUSH
20667: PPUSH
20668: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20669: LD_ADDR_VAR 0 5
20673: PUSH
20674: LD_INT 22
20676: PUSH
20677: LD_OWVAR 2
20681: PUSH
20682: EMPTY
20683: LIST
20684: LIST
20685: PUSH
20686: LD_INT 21
20688: PUSH
20689: LD_INT 1
20691: PUSH
20692: EMPTY
20693: LIST
20694: LIST
20695: PUSH
20696: EMPTY
20697: LIST
20698: LIST
20699: PPUSH
20700: CALL_OW 69
20704: ST_TO_ADDR
// if not tmp then
20705: LD_VAR 0 5
20709: NOT
20710: IFFALSE 20714
// exit ;
20712: GO 20868
// for i in tmp do
20714: LD_ADDR_VAR 0 1
20718: PUSH
20719: LD_VAR 0 5
20723: PUSH
20724: FOR_IN
20725: IFFALSE 20866
// begin d := rand ( 0 , 5 ) ;
20727: LD_ADDR_VAR 0 4
20731: PUSH
20732: LD_INT 0
20734: PPUSH
20735: LD_INT 5
20737: PPUSH
20738: CALL_OW 12
20742: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
20743: LD_ADDR_VAR 0 2
20747: PUSH
20748: LD_VAR 0 1
20752: PPUSH
20753: CALL_OW 250
20757: PPUSH
20758: LD_VAR 0 4
20762: PPUSH
20763: LD_INT 3
20765: PPUSH
20766: LD_INT 12
20768: PPUSH
20769: CALL_OW 12
20773: PPUSH
20774: CALL_OW 272
20778: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
20779: LD_ADDR_VAR 0 3
20783: PUSH
20784: LD_VAR 0 1
20788: PPUSH
20789: CALL_OW 251
20793: PPUSH
20794: LD_VAR 0 4
20798: PPUSH
20799: LD_INT 3
20801: PPUSH
20802: LD_INT 12
20804: PPUSH
20805: CALL_OW 12
20809: PPUSH
20810: CALL_OW 273
20814: ST_TO_ADDR
// if ValidHex ( x , y ) then
20815: LD_VAR 0 2
20819: PPUSH
20820: LD_VAR 0 3
20824: PPUSH
20825: CALL_OW 488
20829: IFFALSE 20864
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
20831: LD_VAR 0 1
20835: PPUSH
20836: LD_VAR 0 2
20840: PPUSH
20841: LD_VAR 0 3
20845: PPUSH
20846: LD_INT 3
20848: PPUSH
20849: LD_INT 6
20851: PPUSH
20852: CALL_OW 12
20856: PPUSH
20857: LD_INT 1
20859: PPUSH
20860: CALL_OW 483
// end ;
20864: GO 20724
20866: POP
20867: POP
// end ;
20868: PPOPN 5
20870: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
20871: LD_EXP 45
20875: PUSH
20876: LD_EXP 80
20880: AND
20881: IFFALSE 20975
20883: GO 20885
20885: DISABLE
20886: LD_INT 0
20888: PPUSH
20889: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
20890: LD_ADDR_VAR 0 2
20894: PUSH
20895: LD_INT 22
20897: PUSH
20898: LD_OWVAR 2
20902: PUSH
20903: EMPTY
20904: LIST
20905: LIST
20906: PUSH
20907: LD_INT 32
20909: PUSH
20910: LD_INT 1
20912: PUSH
20913: EMPTY
20914: LIST
20915: LIST
20916: PUSH
20917: LD_INT 21
20919: PUSH
20920: LD_INT 2
20922: PUSH
20923: EMPTY
20924: LIST
20925: LIST
20926: PUSH
20927: EMPTY
20928: LIST
20929: LIST
20930: LIST
20931: PPUSH
20932: CALL_OW 69
20936: ST_TO_ADDR
// if not tmp then
20937: LD_VAR 0 2
20941: NOT
20942: IFFALSE 20946
// exit ;
20944: GO 20975
// for i in tmp do
20946: LD_ADDR_VAR 0 1
20950: PUSH
20951: LD_VAR 0 2
20955: PUSH
20956: FOR_IN
20957: IFFALSE 20973
// SetFuel ( i , 0 ) ;
20959: LD_VAR 0 1
20963: PPUSH
20964: LD_INT 0
20966: PPUSH
20967: CALL_OW 240
20971: GO 20956
20973: POP
20974: POP
// end ;
20975: PPOPN 2
20977: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
20978: LD_EXP 45
20982: PUSH
20983: LD_EXP 81
20987: AND
20988: IFFALSE 21054
20990: GO 20992
20992: DISABLE
20993: LD_INT 0
20995: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
20996: LD_ADDR_VAR 0 1
21000: PUSH
21001: LD_INT 22
21003: PUSH
21004: LD_OWVAR 2
21008: PUSH
21009: EMPTY
21010: LIST
21011: LIST
21012: PUSH
21013: LD_INT 30
21015: PUSH
21016: LD_INT 29
21018: PUSH
21019: EMPTY
21020: LIST
21021: LIST
21022: PUSH
21023: EMPTY
21024: LIST
21025: LIST
21026: PPUSH
21027: CALL_OW 69
21031: ST_TO_ADDR
// if not tmp then
21032: LD_VAR 0 1
21036: NOT
21037: IFFALSE 21041
// exit ;
21039: GO 21054
// DestroyUnit ( tmp [ 1 ] ) ;
21041: LD_VAR 0 1
21045: PUSH
21046: LD_INT 1
21048: ARRAY
21049: PPUSH
21050: CALL_OW 65
// end ;
21054: PPOPN 1
21056: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
21057: LD_EXP 45
21061: PUSH
21062: LD_EXP 83
21066: AND
21067: IFFALSE 21196
21069: GO 21071
21071: DISABLE
21072: LD_INT 0
21074: PPUSH
// begin uc_side := 0 ;
21075: LD_ADDR_OWVAR 20
21079: PUSH
21080: LD_INT 0
21082: ST_TO_ADDR
// uc_nation := nation_arabian ;
21083: LD_ADDR_OWVAR 21
21087: PUSH
21088: LD_INT 2
21090: ST_TO_ADDR
// hc_gallery :=  ;
21091: LD_ADDR_OWVAR 33
21095: PUSH
21096: LD_STRING 
21098: ST_TO_ADDR
// hc_name :=  ;
21099: LD_ADDR_OWVAR 26
21103: PUSH
21104: LD_STRING 
21106: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
21107: LD_INT 1
21109: PPUSH
21110: LD_INT 11
21112: PPUSH
21113: LD_INT 10
21115: PPUSH
21116: CALL_OW 380
// un := CreateHuman ;
21120: LD_ADDR_VAR 0 1
21124: PUSH
21125: CALL_OW 44
21129: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21130: LD_VAR 0 1
21134: PPUSH
21135: LD_INT 1
21137: PPUSH
21138: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
21142: LD_INT 35
21144: PPUSH
21145: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
21149: LD_VAR 0 1
21153: PPUSH
21154: LD_INT 22
21156: PUSH
21157: LD_OWVAR 2
21161: PUSH
21162: EMPTY
21163: LIST
21164: LIST
21165: PPUSH
21166: CALL_OW 69
21170: PPUSH
21171: LD_VAR 0 1
21175: PPUSH
21176: CALL_OW 74
21180: PPUSH
21181: CALL_OW 115
// until IsDead ( un ) ;
21185: LD_VAR 0 1
21189: PPUSH
21190: CALL_OW 301
21194: IFFALSE 21142
// end ;
21196: PPOPN 1
21198: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
21199: LD_EXP 45
21203: PUSH
21204: LD_EXP 85
21208: AND
21209: IFFALSE 21221
21211: GO 21213
21213: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
21214: LD_STRING earthquake(getX(game), 0, 32)
21216: PPUSH
21217: CALL_OW 559
21221: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
21222: LD_EXP 45
21226: PUSH
21227: LD_EXP 86
21231: AND
21232: IFFALSE 21323
21234: GO 21236
21236: DISABLE
21237: LD_INT 0
21239: PPUSH
// begin enable ;
21240: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
21241: LD_ADDR_VAR 0 1
21245: PUSH
21246: LD_INT 22
21248: PUSH
21249: LD_OWVAR 2
21253: PUSH
21254: EMPTY
21255: LIST
21256: LIST
21257: PUSH
21258: LD_INT 21
21260: PUSH
21261: LD_INT 2
21263: PUSH
21264: EMPTY
21265: LIST
21266: LIST
21267: PUSH
21268: LD_INT 33
21270: PUSH
21271: LD_INT 3
21273: PUSH
21274: EMPTY
21275: LIST
21276: LIST
21277: PUSH
21278: EMPTY
21279: LIST
21280: LIST
21281: LIST
21282: PPUSH
21283: CALL_OW 69
21287: ST_TO_ADDR
// if not tmp then
21288: LD_VAR 0 1
21292: NOT
21293: IFFALSE 21297
// exit ;
21295: GO 21323
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21297: LD_VAR 0 1
21301: PUSH
21302: LD_INT 1
21304: PPUSH
21305: LD_VAR 0 1
21309: PPUSH
21310: CALL_OW 12
21314: ARRAY
21315: PPUSH
21316: LD_INT 1
21318: PPUSH
21319: CALL_OW 234
// end ;
21323: PPOPN 1
21325: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
21326: LD_EXP 45
21330: PUSH
21331: LD_EXP 87
21335: AND
21336: IFFALSE 21477
21338: GO 21340
21340: DISABLE
21341: LD_INT 0
21343: PPUSH
21344: PPUSH
21345: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21346: LD_ADDR_VAR 0 3
21350: PUSH
21351: LD_INT 22
21353: PUSH
21354: LD_OWVAR 2
21358: PUSH
21359: EMPTY
21360: LIST
21361: LIST
21362: PUSH
21363: LD_INT 25
21365: PUSH
21366: LD_INT 1
21368: PUSH
21369: EMPTY
21370: LIST
21371: LIST
21372: PUSH
21373: EMPTY
21374: LIST
21375: LIST
21376: PPUSH
21377: CALL_OW 69
21381: ST_TO_ADDR
// if not tmp then
21382: LD_VAR 0 3
21386: NOT
21387: IFFALSE 21391
// exit ;
21389: GO 21477
// un := tmp [ rand ( 1 , tmp ) ] ;
21391: LD_ADDR_VAR 0 2
21395: PUSH
21396: LD_VAR 0 3
21400: PUSH
21401: LD_INT 1
21403: PPUSH
21404: LD_VAR 0 3
21408: PPUSH
21409: CALL_OW 12
21413: ARRAY
21414: ST_TO_ADDR
// if Crawls ( un ) then
21415: LD_VAR 0 2
21419: PPUSH
21420: CALL_OW 318
21424: IFFALSE 21435
// ComWalk ( un ) ;
21426: LD_VAR 0 2
21430: PPUSH
21431: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
21435: LD_VAR 0 2
21439: PPUSH
21440: LD_INT 9
21442: PPUSH
21443: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
21447: LD_INT 28
21449: PPUSH
21450: LD_OWVAR 2
21454: PPUSH
21455: LD_INT 2
21457: PPUSH
21458: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
21462: LD_INT 29
21464: PPUSH
21465: LD_OWVAR 2
21469: PPUSH
21470: LD_INT 2
21472: PPUSH
21473: CALL_OW 322
// end ;
21477: PPOPN 3
21479: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
21480: LD_EXP 45
21484: PUSH
21485: LD_EXP 88
21489: AND
21490: IFFALSE 21601
21492: GO 21494
21494: DISABLE
21495: LD_INT 0
21497: PPUSH
21498: PPUSH
21499: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21500: LD_ADDR_VAR 0 3
21504: PUSH
21505: LD_INT 22
21507: PUSH
21508: LD_OWVAR 2
21512: PUSH
21513: EMPTY
21514: LIST
21515: LIST
21516: PUSH
21517: LD_INT 25
21519: PUSH
21520: LD_INT 1
21522: PUSH
21523: EMPTY
21524: LIST
21525: LIST
21526: PUSH
21527: EMPTY
21528: LIST
21529: LIST
21530: PPUSH
21531: CALL_OW 69
21535: ST_TO_ADDR
// if not tmp then
21536: LD_VAR 0 3
21540: NOT
21541: IFFALSE 21545
// exit ;
21543: GO 21601
// un := tmp [ rand ( 1 , tmp ) ] ;
21545: LD_ADDR_VAR 0 2
21549: PUSH
21550: LD_VAR 0 3
21554: PUSH
21555: LD_INT 1
21557: PPUSH
21558: LD_VAR 0 3
21562: PPUSH
21563: CALL_OW 12
21567: ARRAY
21568: ST_TO_ADDR
// if Crawls ( un ) then
21569: LD_VAR 0 2
21573: PPUSH
21574: CALL_OW 318
21578: IFFALSE 21589
// ComWalk ( un ) ;
21580: LD_VAR 0 2
21584: PPUSH
21585: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21589: LD_VAR 0 2
21593: PPUSH
21594: LD_INT 8
21596: PPUSH
21597: CALL_OW 336
// end ;
21601: PPOPN 3
21603: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
21604: LD_EXP 45
21608: PUSH
21609: LD_EXP 89
21613: AND
21614: IFFALSE 21758
21616: GO 21618
21618: DISABLE
21619: LD_INT 0
21621: PPUSH
21622: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
21623: LD_ADDR_VAR 0 2
21627: PUSH
21628: LD_INT 22
21630: PUSH
21631: LD_OWVAR 2
21635: PUSH
21636: EMPTY
21637: LIST
21638: LIST
21639: PUSH
21640: LD_INT 21
21642: PUSH
21643: LD_INT 2
21645: PUSH
21646: EMPTY
21647: LIST
21648: LIST
21649: PUSH
21650: LD_INT 2
21652: PUSH
21653: LD_INT 34
21655: PUSH
21656: LD_INT 12
21658: PUSH
21659: EMPTY
21660: LIST
21661: LIST
21662: PUSH
21663: LD_INT 34
21665: PUSH
21666: LD_INT 51
21668: PUSH
21669: EMPTY
21670: LIST
21671: LIST
21672: PUSH
21673: LD_INT 34
21675: PUSH
21676: LD_INT 32
21678: PUSH
21679: EMPTY
21680: LIST
21681: LIST
21682: PUSH
21683: EMPTY
21684: LIST
21685: LIST
21686: LIST
21687: LIST
21688: PUSH
21689: EMPTY
21690: LIST
21691: LIST
21692: LIST
21693: PPUSH
21694: CALL_OW 69
21698: ST_TO_ADDR
// if not tmp then
21699: LD_VAR 0 2
21703: NOT
21704: IFFALSE 21708
// exit ;
21706: GO 21758
// for i in tmp do
21708: LD_ADDR_VAR 0 1
21712: PUSH
21713: LD_VAR 0 2
21717: PUSH
21718: FOR_IN
21719: IFFALSE 21756
// if GetCargo ( i , mat_artifact ) = 0 then
21721: LD_VAR 0 1
21725: PPUSH
21726: LD_INT 4
21728: PPUSH
21729: CALL_OW 289
21733: PUSH
21734: LD_INT 0
21736: EQUAL
21737: IFFALSE 21754
// SetCargo ( i , mat_siberit , 100 ) ;
21739: LD_VAR 0 1
21743: PPUSH
21744: LD_INT 3
21746: PPUSH
21747: LD_INT 100
21749: PPUSH
21750: CALL_OW 290
21754: GO 21718
21756: POP
21757: POP
// end ;
21758: PPOPN 2
21760: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
21761: LD_EXP 45
21765: PUSH
21766: LD_EXP 90
21770: AND
21771: IFFALSE 21954
21773: GO 21775
21775: DISABLE
21776: LD_INT 0
21778: PPUSH
21779: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21780: LD_ADDR_VAR 0 2
21784: PUSH
21785: LD_INT 22
21787: PUSH
21788: LD_OWVAR 2
21792: PUSH
21793: EMPTY
21794: LIST
21795: LIST
21796: PPUSH
21797: CALL_OW 69
21801: ST_TO_ADDR
// if not tmp then
21802: LD_VAR 0 2
21806: NOT
21807: IFFALSE 21811
// exit ;
21809: GO 21954
// for i := 1 to 2 do
21811: LD_ADDR_VAR 0 1
21815: PUSH
21816: DOUBLE
21817: LD_INT 1
21819: DEC
21820: ST_TO_ADDR
21821: LD_INT 2
21823: PUSH
21824: FOR_TO
21825: IFFALSE 21952
// begin uc_side := your_side ;
21827: LD_ADDR_OWVAR 20
21831: PUSH
21832: LD_OWVAR 2
21836: ST_TO_ADDR
// uc_nation := nation_american ;
21837: LD_ADDR_OWVAR 21
21841: PUSH
21842: LD_INT 1
21844: ST_TO_ADDR
// vc_chassis := us_morphling ;
21845: LD_ADDR_OWVAR 37
21849: PUSH
21850: LD_INT 5
21852: ST_TO_ADDR
// vc_engine := engine_siberite ;
21853: LD_ADDR_OWVAR 39
21857: PUSH
21858: LD_INT 3
21860: ST_TO_ADDR
// vc_control := control_computer ;
21861: LD_ADDR_OWVAR 38
21865: PUSH
21866: LD_INT 3
21868: ST_TO_ADDR
// vc_weapon := us_double_laser ;
21869: LD_ADDR_OWVAR 40
21873: PUSH
21874: LD_INT 10
21876: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
21877: LD_VAR 0 2
21881: PUSH
21882: LD_INT 1
21884: ARRAY
21885: PPUSH
21886: CALL_OW 310
21890: NOT
21891: IFFALSE 21938
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
21893: CALL_OW 45
21897: PPUSH
21898: LD_VAR 0 2
21902: PUSH
21903: LD_INT 1
21905: ARRAY
21906: PPUSH
21907: CALL_OW 250
21911: PPUSH
21912: LD_VAR 0 2
21916: PUSH
21917: LD_INT 1
21919: ARRAY
21920: PPUSH
21921: CALL_OW 251
21925: PPUSH
21926: LD_INT 12
21928: PPUSH
21929: LD_INT 1
21931: PPUSH
21932: CALL_OW 50
21936: GO 21950
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
21938: CALL_OW 45
21942: PPUSH
21943: LD_INT 1
21945: PPUSH
21946: CALL_OW 51
// end ;
21950: GO 21824
21952: POP
21953: POP
// end ;
21954: PPOPN 2
21956: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
21957: LD_EXP 45
21961: PUSH
21962: LD_EXP 91
21966: AND
21967: IFFALSE 22189
21969: GO 21971
21971: DISABLE
21972: LD_INT 0
21974: PPUSH
21975: PPUSH
21976: PPUSH
21977: PPUSH
21978: PPUSH
21979: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21980: LD_ADDR_VAR 0 6
21984: PUSH
21985: LD_INT 22
21987: PUSH
21988: LD_OWVAR 2
21992: PUSH
21993: EMPTY
21994: LIST
21995: LIST
21996: PUSH
21997: LD_INT 21
21999: PUSH
22000: LD_INT 1
22002: PUSH
22003: EMPTY
22004: LIST
22005: LIST
22006: PUSH
22007: LD_INT 3
22009: PUSH
22010: LD_INT 23
22012: PUSH
22013: LD_INT 0
22015: PUSH
22016: EMPTY
22017: LIST
22018: LIST
22019: PUSH
22020: EMPTY
22021: LIST
22022: LIST
22023: PUSH
22024: EMPTY
22025: LIST
22026: LIST
22027: LIST
22028: PPUSH
22029: CALL_OW 69
22033: ST_TO_ADDR
// if not tmp then
22034: LD_VAR 0 6
22038: NOT
22039: IFFALSE 22043
// exit ;
22041: GO 22189
// s1 := rand ( 1 , 4 ) ;
22043: LD_ADDR_VAR 0 2
22047: PUSH
22048: LD_INT 1
22050: PPUSH
22051: LD_INT 4
22053: PPUSH
22054: CALL_OW 12
22058: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
22059: LD_ADDR_VAR 0 4
22063: PUSH
22064: LD_VAR 0 6
22068: PUSH
22069: LD_INT 1
22071: ARRAY
22072: PPUSH
22073: LD_VAR 0 2
22077: PPUSH
22078: CALL_OW 259
22082: ST_TO_ADDR
// if s1 = 1 then
22083: LD_VAR 0 2
22087: PUSH
22088: LD_INT 1
22090: EQUAL
22091: IFFALSE 22111
// s2 := rand ( 2 , 4 ) else
22093: LD_ADDR_VAR 0 3
22097: PUSH
22098: LD_INT 2
22100: PPUSH
22101: LD_INT 4
22103: PPUSH
22104: CALL_OW 12
22108: ST_TO_ADDR
22109: GO 22119
// s2 := 1 ;
22111: LD_ADDR_VAR 0 3
22115: PUSH
22116: LD_INT 1
22118: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
22119: LD_ADDR_VAR 0 5
22123: PUSH
22124: LD_VAR 0 6
22128: PUSH
22129: LD_INT 1
22131: ARRAY
22132: PPUSH
22133: LD_VAR 0 3
22137: PPUSH
22138: CALL_OW 259
22142: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
22143: LD_VAR 0 6
22147: PUSH
22148: LD_INT 1
22150: ARRAY
22151: PPUSH
22152: LD_VAR 0 2
22156: PPUSH
22157: LD_VAR 0 5
22161: PPUSH
22162: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
22166: LD_VAR 0 6
22170: PUSH
22171: LD_INT 1
22173: ARRAY
22174: PPUSH
22175: LD_VAR 0 3
22179: PPUSH
22180: LD_VAR 0 4
22184: PPUSH
22185: CALL_OW 237
// end ;
22189: PPOPN 6
22191: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
22192: LD_EXP 45
22196: PUSH
22197: LD_EXP 92
22201: AND
22202: IFFALSE 22281
22204: GO 22206
22206: DISABLE
22207: LD_INT 0
22209: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
22210: LD_ADDR_VAR 0 1
22214: PUSH
22215: LD_INT 22
22217: PUSH
22218: LD_OWVAR 2
22222: PUSH
22223: EMPTY
22224: LIST
22225: LIST
22226: PUSH
22227: LD_INT 30
22229: PUSH
22230: LD_INT 3
22232: PUSH
22233: EMPTY
22234: LIST
22235: LIST
22236: PUSH
22237: EMPTY
22238: LIST
22239: LIST
22240: PPUSH
22241: CALL_OW 69
22245: ST_TO_ADDR
// if not tmp then
22246: LD_VAR 0 1
22250: NOT
22251: IFFALSE 22255
// exit ;
22253: GO 22281
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
22255: LD_VAR 0 1
22259: PUSH
22260: LD_INT 1
22262: PPUSH
22263: LD_VAR 0 1
22267: PPUSH
22268: CALL_OW 12
22272: ARRAY
22273: PPUSH
22274: LD_INT 1
22276: PPUSH
22277: CALL_OW 234
// end ;
22281: PPOPN 1
22283: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
22284: LD_EXP 45
22288: PUSH
22289: LD_EXP 93
22293: AND
22294: IFFALSE 22406
22296: GO 22298
22298: DISABLE
22299: LD_INT 0
22301: PPUSH
22302: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
22303: LD_ADDR_VAR 0 2
22307: PUSH
22308: LD_INT 22
22310: PUSH
22311: LD_OWVAR 2
22315: PUSH
22316: EMPTY
22317: LIST
22318: LIST
22319: PUSH
22320: LD_INT 2
22322: PUSH
22323: LD_INT 30
22325: PUSH
22326: LD_INT 27
22328: PUSH
22329: EMPTY
22330: LIST
22331: LIST
22332: PUSH
22333: LD_INT 30
22335: PUSH
22336: LD_INT 26
22338: PUSH
22339: EMPTY
22340: LIST
22341: LIST
22342: PUSH
22343: LD_INT 30
22345: PUSH
22346: LD_INT 28
22348: PUSH
22349: EMPTY
22350: LIST
22351: LIST
22352: PUSH
22353: EMPTY
22354: LIST
22355: LIST
22356: LIST
22357: LIST
22358: PUSH
22359: EMPTY
22360: LIST
22361: LIST
22362: PPUSH
22363: CALL_OW 69
22367: ST_TO_ADDR
// if not tmp then
22368: LD_VAR 0 2
22372: NOT
22373: IFFALSE 22377
// exit ;
22375: GO 22406
// for i in tmp do
22377: LD_ADDR_VAR 0 1
22381: PUSH
22382: LD_VAR 0 2
22386: PUSH
22387: FOR_IN
22388: IFFALSE 22404
// SetLives ( i , 1 ) ;
22390: LD_VAR 0 1
22394: PPUSH
22395: LD_INT 1
22397: PPUSH
22398: CALL_OW 234
22402: GO 22387
22404: POP
22405: POP
// end ;
22406: PPOPN 2
22408: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
22409: LD_EXP 45
22413: PUSH
22414: LD_EXP 94
22418: AND
22419: IFFALSE 22706
22421: GO 22423
22423: DISABLE
22424: LD_INT 0
22426: PPUSH
22427: PPUSH
22428: PPUSH
// begin i := rand ( 1 , 7 ) ;
22429: LD_ADDR_VAR 0 1
22433: PUSH
22434: LD_INT 1
22436: PPUSH
22437: LD_INT 7
22439: PPUSH
22440: CALL_OW 12
22444: ST_TO_ADDR
// case i of 1 :
22445: LD_VAR 0 1
22449: PUSH
22450: LD_INT 1
22452: DOUBLE
22453: EQUAL
22454: IFTRUE 22458
22456: GO 22468
22458: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
22459: LD_STRING earthquake(getX(game), 0, 32)
22461: PPUSH
22462: CALL_OW 559
22466: GO 22706
22468: LD_INT 2
22470: DOUBLE
22471: EQUAL
22472: IFTRUE 22476
22474: GO 22490
22476: POP
// begin ToLua ( displayStucuk(); ) ;
22477: LD_STRING displayStucuk();
22479: PPUSH
22480: CALL_OW 559
// ResetFog ;
22484: CALL_OW 335
// end ; 3 :
22488: GO 22706
22490: LD_INT 3
22492: DOUBLE
22493: EQUAL
22494: IFTRUE 22498
22496: GO 22602
22498: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22499: LD_ADDR_VAR 0 2
22503: PUSH
22504: LD_INT 22
22506: PUSH
22507: LD_OWVAR 2
22511: PUSH
22512: EMPTY
22513: LIST
22514: LIST
22515: PUSH
22516: LD_INT 25
22518: PUSH
22519: LD_INT 1
22521: PUSH
22522: EMPTY
22523: LIST
22524: LIST
22525: PUSH
22526: EMPTY
22527: LIST
22528: LIST
22529: PPUSH
22530: CALL_OW 69
22534: ST_TO_ADDR
// if not tmp then
22535: LD_VAR 0 2
22539: NOT
22540: IFFALSE 22544
// exit ;
22542: GO 22706
// un := tmp [ rand ( 1 , tmp ) ] ;
22544: LD_ADDR_VAR 0 3
22548: PUSH
22549: LD_VAR 0 2
22553: PUSH
22554: LD_INT 1
22556: PPUSH
22557: LD_VAR 0 2
22561: PPUSH
22562: CALL_OW 12
22566: ARRAY
22567: ST_TO_ADDR
// if Crawls ( un ) then
22568: LD_VAR 0 3
22572: PPUSH
22573: CALL_OW 318
22577: IFFALSE 22588
// ComWalk ( un ) ;
22579: LD_VAR 0 3
22583: PPUSH
22584: CALL_OW 138
// SetClass ( un , class_mortar ) ;
22588: LD_VAR 0 3
22592: PPUSH
22593: LD_INT 8
22595: PPUSH
22596: CALL_OW 336
// end ; 4 :
22600: GO 22706
22602: LD_INT 4
22604: DOUBLE
22605: EQUAL
22606: IFTRUE 22610
22608: GO 22684
22610: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
22611: LD_ADDR_VAR 0 2
22615: PUSH
22616: LD_INT 22
22618: PUSH
22619: LD_OWVAR 2
22623: PUSH
22624: EMPTY
22625: LIST
22626: LIST
22627: PUSH
22628: LD_INT 30
22630: PUSH
22631: LD_INT 29
22633: PUSH
22634: EMPTY
22635: LIST
22636: LIST
22637: PUSH
22638: EMPTY
22639: LIST
22640: LIST
22641: PPUSH
22642: CALL_OW 69
22646: ST_TO_ADDR
// if not tmp then
22647: LD_VAR 0 2
22651: NOT
22652: IFFALSE 22656
// exit ;
22654: GO 22706
// CenterNowOnUnits ( tmp [ 1 ] ) ;
22656: LD_VAR 0 2
22660: PUSH
22661: LD_INT 1
22663: ARRAY
22664: PPUSH
22665: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
22669: LD_VAR 0 2
22673: PUSH
22674: LD_INT 1
22676: ARRAY
22677: PPUSH
22678: CALL_OW 65
// end ; 5 .. 7 :
22682: GO 22706
22684: LD_INT 5
22686: DOUBLE
22687: GREATEREQUAL
22688: IFFALSE 22696
22690: LD_INT 7
22692: DOUBLE
22693: LESSEQUAL
22694: IFTRUE 22698
22696: GO 22705
22698: POP
// StreamSibBomb ; end ;
22699: CALL 18943 0 0
22703: GO 22706
22705: POP
// end ;
22706: PPOPN 3
22708: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
22709: LD_EXP 45
22713: PUSH
22714: LD_EXP 95
22718: AND
22719: IFFALSE 22875
22721: GO 22723
22723: DISABLE
22724: LD_INT 0
22726: PPUSH
22727: PPUSH
22728: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
22729: LD_ADDR_VAR 0 2
22733: PUSH
22734: LD_INT 81
22736: PUSH
22737: LD_OWVAR 2
22741: PUSH
22742: EMPTY
22743: LIST
22744: LIST
22745: PUSH
22746: LD_INT 2
22748: PUSH
22749: LD_INT 21
22751: PUSH
22752: LD_INT 1
22754: PUSH
22755: EMPTY
22756: LIST
22757: LIST
22758: PUSH
22759: LD_INT 21
22761: PUSH
22762: LD_INT 2
22764: PUSH
22765: EMPTY
22766: LIST
22767: LIST
22768: PUSH
22769: EMPTY
22770: LIST
22771: LIST
22772: LIST
22773: PUSH
22774: EMPTY
22775: LIST
22776: LIST
22777: PPUSH
22778: CALL_OW 69
22782: ST_TO_ADDR
// if not tmp then
22783: LD_VAR 0 2
22787: NOT
22788: IFFALSE 22792
// exit ;
22790: GO 22875
// p := 0 ;
22792: LD_ADDR_VAR 0 3
22796: PUSH
22797: LD_INT 0
22799: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22800: LD_INT 35
22802: PPUSH
22803: CALL_OW 67
// p := p + 1 ;
22807: LD_ADDR_VAR 0 3
22811: PUSH
22812: LD_VAR 0 3
22816: PUSH
22817: LD_INT 1
22819: PLUS
22820: ST_TO_ADDR
// for i in tmp do
22821: LD_ADDR_VAR 0 1
22825: PUSH
22826: LD_VAR 0 2
22830: PUSH
22831: FOR_IN
22832: IFFALSE 22863
// if GetLives ( i ) < 1000 then
22834: LD_VAR 0 1
22838: PPUSH
22839: CALL_OW 256
22843: PUSH
22844: LD_INT 1000
22846: LESS
22847: IFFALSE 22861
// SetLives ( i , 1000 ) ;
22849: LD_VAR 0 1
22853: PPUSH
22854: LD_INT 1000
22856: PPUSH
22857: CALL_OW 234
22861: GO 22831
22863: POP
22864: POP
// until p > 20 ;
22865: LD_VAR 0 3
22869: PUSH
22870: LD_INT 20
22872: GREATER
22873: IFFALSE 22800
// end ;
22875: PPOPN 3
22877: END
// every 0 0$1 trigger StreamModeActive and sTime do
22878: LD_EXP 45
22882: PUSH
22883: LD_EXP 96
22887: AND
22888: IFFALSE 22923
22890: GO 22892
22892: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
22893: LD_INT 28
22895: PPUSH
22896: LD_OWVAR 2
22900: PPUSH
22901: LD_INT 2
22903: PPUSH
22904: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
22908: LD_INT 30
22910: PPUSH
22911: LD_OWVAR 2
22915: PPUSH
22916: LD_INT 2
22918: PPUSH
22919: CALL_OW 322
// end ;
22923: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
22924: LD_EXP 45
22928: PUSH
22929: LD_EXP 97
22933: AND
22934: IFFALSE 23055
22936: GO 22938
22938: DISABLE
22939: LD_INT 0
22941: PPUSH
22942: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22943: LD_ADDR_VAR 0 2
22947: PUSH
22948: LD_INT 22
22950: PUSH
22951: LD_OWVAR 2
22955: PUSH
22956: EMPTY
22957: LIST
22958: LIST
22959: PUSH
22960: LD_INT 21
22962: PUSH
22963: LD_INT 1
22965: PUSH
22966: EMPTY
22967: LIST
22968: LIST
22969: PUSH
22970: LD_INT 3
22972: PUSH
22973: LD_INT 23
22975: PUSH
22976: LD_INT 0
22978: PUSH
22979: EMPTY
22980: LIST
22981: LIST
22982: PUSH
22983: EMPTY
22984: LIST
22985: LIST
22986: PUSH
22987: EMPTY
22988: LIST
22989: LIST
22990: LIST
22991: PPUSH
22992: CALL_OW 69
22996: ST_TO_ADDR
// if not tmp then
22997: LD_VAR 0 2
23001: NOT
23002: IFFALSE 23006
// exit ;
23004: GO 23055
// for i in tmp do
23006: LD_ADDR_VAR 0 1
23010: PUSH
23011: LD_VAR 0 2
23015: PUSH
23016: FOR_IN
23017: IFFALSE 23053
// begin if Crawls ( i ) then
23019: LD_VAR 0 1
23023: PPUSH
23024: CALL_OW 318
23028: IFFALSE 23039
// ComWalk ( i ) ;
23030: LD_VAR 0 1
23034: PPUSH
23035: CALL_OW 138
// SetClass ( i , 2 ) ;
23039: LD_VAR 0 1
23043: PPUSH
23044: LD_INT 2
23046: PPUSH
23047: CALL_OW 336
// end ;
23051: GO 23016
23053: POP
23054: POP
// end ;
23055: PPOPN 2
23057: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
23058: LD_EXP 45
23062: PUSH
23063: LD_EXP 98
23067: AND
23068: IFFALSE 23356
23070: GO 23072
23072: DISABLE
23073: LD_INT 0
23075: PPUSH
23076: PPUSH
23077: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
23078: LD_OWVAR 2
23082: PPUSH
23083: LD_INT 9
23085: PPUSH
23086: LD_INT 1
23088: PPUSH
23089: LD_INT 1
23091: PPUSH
23092: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
23096: LD_INT 9
23098: PPUSH
23099: LD_OWVAR 2
23103: PPUSH
23104: CALL_OW 343
// uc_side := 9 ;
23108: LD_ADDR_OWVAR 20
23112: PUSH
23113: LD_INT 9
23115: ST_TO_ADDR
// uc_nation := 2 ;
23116: LD_ADDR_OWVAR 21
23120: PUSH
23121: LD_INT 2
23123: ST_TO_ADDR
// hc_name := Dark Warrior ;
23124: LD_ADDR_OWVAR 26
23128: PUSH
23129: LD_STRING Dark Warrior
23131: ST_TO_ADDR
// hc_gallery :=  ;
23132: LD_ADDR_OWVAR 33
23136: PUSH
23137: LD_STRING 
23139: ST_TO_ADDR
// hc_noskilllimit := true ;
23140: LD_ADDR_OWVAR 76
23144: PUSH
23145: LD_INT 1
23147: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
23148: LD_ADDR_OWVAR 31
23152: PUSH
23153: LD_INT 30
23155: PUSH
23156: LD_INT 30
23158: PUSH
23159: LD_INT 30
23161: PUSH
23162: LD_INT 30
23164: PUSH
23165: EMPTY
23166: LIST
23167: LIST
23168: LIST
23169: LIST
23170: ST_TO_ADDR
// un := CreateHuman ;
23171: LD_ADDR_VAR 0 3
23175: PUSH
23176: CALL_OW 44
23180: ST_TO_ADDR
// hc_noskilllimit := false ;
23181: LD_ADDR_OWVAR 76
23185: PUSH
23186: LD_INT 0
23188: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
23189: LD_VAR 0 3
23193: PPUSH
23194: LD_INT 1
23196: PPUSH
23197: CALL_OW 51
// ToLua ( playRanger() ) ;
23201: LD_STRING playRanger()
23203: PPUSH
23204: CALL_OW 559
// p := 0 ;
23208: LD_ADDR_VAR 0 2
23212: PUSH
23213: LD_INT 0
23215: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23216: LD_INT 35
23218: PPUSH
23219: CALL_OW 67
// p := p + 1 ;
23223: LD_ADDR_VAR 0 2
23227: PUSH
23228: LD_VAR 0 2
23232: PUSH
23233: LD_INT 1
23235: PLUS
23236: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
23237: LD_VAR 0 3
23241: PPUSH
23242: CALL_OW 256
23246: PUSH
23247: LD_INT 1000
23249: LESS
23250: IFFALSE 23264
// SetLives ( un , 1000 ) ;
23252: LD_VAR 0 3
23256: PPUSH
23257: LD_INT 1000
23259: PPUSH
23260: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
23264: LD_VAR 0 3
23268: PPUSH
23269: LD_INT 81
23271: PUSH
23272: LD_OWVAR 2
23276: PUSH
23277: EMPTY
23278: LIST
23279: LIST
23280: PUSH
23281: LD_INT 91
23283: PUSH
23284: LD_VAR 0 3
23288: PUSH
23289: LD_INT 30
23291: PUSH
23292: EMPTY
23293: LIST
23294: LIST
23295: LIST
23296: PUSH
23297: EMPTY
23298: LIST
23299: LIST
23300: PPUSH
23301: CALL_OW 69
23305: PPUSH
23306: LD_VAR 0 3
23310: PPUSH
23311: CALL_OW 74
23315: PPUSH
23316: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
23320: LD_VAR 0 2
23324: PUSH
23325: LD_INT 80
23327: GREATER
23328: PUSH
23329: LD_VAR 0 3
23333: PPUSH
23334: CALL_OW 301
23338: OR
23339: IFFALSE 23216
// if un then
23341: LD_VAR 0 3
23345: IFFALSE 23356
// RemoveUnit ( un ) ;
23347: LD_VAR 0 3
23351: PPUSH
23352: CALL_OW 64
// end ;
23356: PPOPN 3
23358: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
23359: LD_EXP 99
23363: IFFALSE 23479
23365: GO 23367
23367: DISABLE
23368: LD_INT 0
23370: PPUSH
23371: PPUSH
23372: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
23373: LD_ADDR_VAR 0 2
23377: PUSH
23378: LD_INT 81
23380: PUSH
23381: LD_OWVAR 2
23385: PUSH
23386: EMPTY
23387: LIST
23388: LIST
23389: PUSH
23390: LD_INT 21
23392: PUSH
23393: LD_INT 1
23395: PUSH
23396: EMPTY
23397: LIST
23398: LIST
23399: PUSH
23400: EMPTY
23401: LIST
23402: LIST
23403: PPUSH
23404: CALL_OW 69
23408: ST_TO_ADDR
// ToLua ( playComputer() ) ;
23409: LD_STRING playComputer()
23411: PPUSH
23412: CALL_OW 559
// if not tmp then
23416: LD_VAR 0 2
23420: NOT
23421: IFFALSE 23425
// exit ;
23423: GO 23479
// for i in tmp do
23425: LD_ADDR_VAR 0 1
23429: PUSH
23430: LD_VAR 0 2
23434: PUSH
23435: FOR_IN
23436: IFFALSE 23477
// for j := 1 to 4 do
23438: LD_ADDR_VAR 0 3
23442: PUSH
23443: DOUBLE
23444: LD_INT 1
23446: DEC
23447: ST_TO_ADDR
23448: LD_INT 4
23450: PUSH
23451: FOR_TO
23452: IFFALSE 23473
// SetSkill ( i , j , 10 ) ;
23454: LD_VAR 0 1
23458: PPUSH
23459: LD_VAR 0 3
23463: PPUSH
23464: LD_INT 10
23466: PPUSH
23467: CALL_OW 237
23471: GO 23451
23473: POP
23474: POP
23475: GO 23435
23477: POP
23478: POP
// end ;
23479: PPOPN 3
23481: END
// every 0 0$1 trigger s30 do var i , tmp ;
23482: LD_EXP 100
23486: IFFALSE 23555
23488: GO 23490
23490: DISABLE
23491: LD_INT 0
23493: PPUSH
23494: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23495: LD_ADDR_VAR 0 2
23499: PUSH
23500: LD_INT 22
23502: PUSH
23503: LD_OWVAR 2
23507: PUSH
23508: EMPTY
23509: LIST
23510: LIST
23511: PPUSH
23512: CALL_OW 69
23516: ST_TO_ADDR
// if not tmp then
23517: LD_VAR 0 2
23521: NOT
23522: IFFALSE 23526
// exit ;
23524: GO 23555
// for i in tmp do
23526: LD_ADDR_VAR 0 1
23530: PUSH
23531: LD_VAR 0 2
23535: PUSH
23536: FOR_IN
23537: IFFALSE 23553
// SetLives ( i , 300 ) ;
23539: LD_VAR 0 1
23543: PPUSH
23544: LD_INT 300
23546: PPUSH
23547: CALL_OW 234
23551: GO 23536
23553: POP
23554: POP
// end ;
23555: PPOPN 2
23557: END
// every 0 0$1 trigger s60 do var i , tmp ;
23558: LD_EXP 101
23562: IFFALSE 23631
23564: GO 23566
23566: DISABLE
23567: LD_INT 0
23569: PPUSH
23570: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23571: LD_ADDR_VAR 0 2
23575: PUSH
23576: LD_INT 22
23578: PUSH
23579: LD_OWVAR 2
23583: PUSH
23584: EMPTY
23585: LIST
23586: LIST
23587: PPUSH
23588: CALL_OW 69
23592: ST_TO_ADDR
// if not tmp then
23593: LD_VAR 0 2
23597: NOT
23598: IFFALSE 23602
// exit ;
23600: GO 23631
// for i in tmp do
23602: LD_ADDR_VAR 0 1
23606: PUSH
23607: LD_VAR 0 2
23611: PUSH
23612: FOR_IN
23613: IFFALSE 23629
// SetLives ( i , 600 ) ;
23615: LD_VAR 0 1
23619: PPUSH
23620: LD_INT 600
23622: PPUSH
23623: CALL_OW 234
23627: GO 23612
23629: POP
23630: POP
// end ;
23631: PPOPN 2
23633: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
23634: LD_INT 0
23636: PPUSH
// case cmd of 301 :
23637: LD_VAR 0 1
23641: PUSH
23642: LD_INT 301
23644: DOUBLE
23645: EQUAL
23646: IFTRUE 23650
23648: GO 23682
23650: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
23651: LD_VAR 0 6
23655: PPUSH
23656: LD_VAR 0 7
23660: PPUSH
23661: LD_VAR 0 8
23665: PPUSH
23666: LD_VAR 0 4
23670: PPUSH
23671: LD_VAR 0 5
23675: PPUSH
23676: CALL 24883 0 5
23680: GO 23803
23682: LD_INT 302
23684: DOUBLE
23685: EQUAL
23686: IFTRUE 23690
23688: GO 23727
23690: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
23691: LD_VAR 0 6
23695: PPUSH
23696: LD_VAR 0 7
23700: PPUSH
23701: LD_VAR 0 8
23705: PPUSH
23706: LD_VAR 0 9
23710: PPUSH
23711: LD_VAR 0 4
23715: PPUSH
23716: LD_VAR 0 5
23720: PPUSH
23721: CALL 24974 0 6
23725: GO 23803
23727: LD_INT 303
23729: DOUBLE
23730: EQUAL
23731: IFTRUE 23735
23733: GO 23772
23735: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
23736: LD_VAR 0 6
23740: PPUSH
23741: LD_VAR 0 7
23745: PPUSH
23746: LD_VAR 0 8
23750: PPUSH
23751: LD_VAR 0 9
23755: PPUSH
23756: LD_VAR 0 4
23760: PPUSH
23761: LD_VAR 0 5
23765: PPUSH
23766: CALL 23808 0 6
23770: GO 23803
23772: LD_INT 304
23774: DOUBLE
23775: EQUAL
23776: IFTRUE 23780
23778: GO 23802
23780: POP
// hHackTeleport ( unit , x , y ) ; end ;
23781: LD_VAR 0 2
23785: PPUSH
23786: LD_VAR 0 4
23790: PPUSH
23791: LD_VAR 0 5
23795: PPUSH
23796: CALL 25567 0 3
23800: GO 23803
23802: POP
// end ;
23803: LD_VAR 0 12
23807: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
23808: LD_INT 0
23810: PPUSH
23811: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
23812: LD_VAR 0 1
23816: PUSH
23817: LD_INT 1
23819: LESS
23820: PUSH
23821: LD_VAR 0 1
23825: PUSH
23826: LD_INT 3
23828: GREATER
23829: OR
23830: PUSH
23831: LD_VAR 0 5
23835: PPUSH
23836: LD_VAR 0 6
23840: PPUSH
23841: CALL_OW 428
23845: OR
23846: IFFALSE 23850
// exit ;
23848: GO 24570
// uc_side := your_side ;
23850: LD_ADDR_OWVAR 20
23854: PUSH
23855: LD_OWVAR 2
23859: ST_TO_ADDR
// uc_nation := nation ;
23860: LD_ADDR_OWVAR 21
23864: PUSH
23865: LD_VAR 0 1
23869: ST_TO_ADDR
// bc_level = 1 ;
23870: LD_ADDR_OWVAR 43
23874: PUSH
23875: LD_INT 1
23877: ST_TO_ADDR
// case btype of 1 :
23878: LD_VAR 0 2
23882: PUSH
23883: LD_INT 1
23885: DOUBLE
23886: EQUAL
23887: IFTRUE 23891
23889: GO 23902
23891: POP
// bc_type := b_depot ; 2 :
23892: LD_ADDR_OWVAR 42
23896: PUSH
23897: LD_INT 0
23899: ST_TO_ADDR
23900: GO 24514
23902: LD_INT 2
23904: DOUBLE
23905: EQUAL
23906: IFTRUE 23910
23908: GO 23921
23910: POP
// bc_type := b_warehouse ; 3 :
23911: LD_ADDR_OWVAR 42
23915: PUSH
23916: LD_INT 1
23918: ST_TO_ADDR
23919: GO 24514
23921: LD_INT 3
23923: DOUBLE
23924: EQUAL
23925: IFTRUE 23929
23927: GO 23940
23929: POP
// bc_type := b_lab ; 4 .. 9 :
23930: LD_ADDR_OWVAR 42
23934: PUSH
23935: LD_INT 6
23937: ST_TO_ADDR
23938: GO 24514
23940: LD_INT 4
23942: DOUBLE
23943: GREATEREQUAL
23944: IFFALSE 23952
23946: LD_INT 9
23948: DOUBLE
23949: LESSEQUAL
23950: IFTRUE 23954
23952: GO 24006
23954: POP
// begin bc_type := b_lab_half ;
23955: LD_ADDR_OWVAR 42
23959: PUSH
23960: LD_INT 7
23962: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
23963: LD_ADDR_OWVAR 44
23967: PUSH
23968: LD_INT 10
23970: PUSH
23971: LD_INT 11
23973: PUSH
23974: LD_INT 12
23976: PUSH
23977: LD_INT 15
23979: PUSH
23980: LD_INT 14
23982: PUSH
23983: LD_INT 13
23985: PUSH
23986: EMPTY
23987: LIST
23988: LIST
23989: LIST
23990: LIST
23991: LIST
23992: LIST
23993: PUSH
23994: LD_VAR 0 2
23998: PUSH
23999: LD_INT 3
24001: MINUS
24002: ARRAY
24003: ST_TO_ADDR
// end ; 10 .. 13 :
24004: GO 24514
24006: LD_INT 10
24008: DOUBLE
24009: GREATEREQUAL
24010: IFFALSE 24018
24012: LD_INT 13
24014: DOUBLE
24015: LESSEQUAL
24016: IFTRUE 24020
24018: GO 24097
24020: POP
// begin bc_type := b_lab_full ;
24021: LD_ADDR_OWVAR 42
24025: PUSH
24026: LD_INT 8
24028: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
24029: LD_ADDR_OWVAR 44
24033: PUSH
24034: LD_INT 10
24036: PUSH
24037: LD_INT 12
24039: PUSH
24040: LD_INT 14
24042: PUSH
24043: LD_INT 13
24045: PUSH
24046: EMPTY
24047: LIST
24048: LIST
24049: LIST
24050: LIST
24051: PUSH
24052: LD_VAR 0 2
24056: PUSH
24057: LD_INT 9
24059: MINUS
24060: ARRAY
24061: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
24062: LD_ADDR_OWVAR 45
24066: PUSH
24067: LD_INT 11
24069: PUSH
24070: LD_INT 15
24072: PUSH
24073: LD_INT 12
24075: PUSH
24076: LD_INT 15
24078: PUSH
24079: EMPTY
24080: LIST
24081: LIST
24082: LIST
24083: LIST
24084: PUSH
24085: LD_VAR 0 2
24089: PUSH
24090: LD_INT 9
24092: MINUS
24093: ARRAY
24094: ST_TO_ADDR
// end ; 14 :
24095: GO 24514
24097: LD_INT 14
24099: DOUBLE
24100: EQUAL
24101: IFTRUE 24105
24103: GO 24116
24105: POP
// bc_type := b_workshop ; 15 :
24106: LD_ADDR_OWVAR 42
24110: PUSH
24111: LD_INT 2
24113: ST_TO_ADDR
24114: GO 24514
24116: LD_INT 15
24118: DOUBLE
24119: EQUAL
24120: IFTRUE 24124
24122: GO 24135
24124: POP
// bc_type := b_factory ; 16 :
24125: LD_ADDR_OWVAR 42
24129: PUSH
24130: LD_INT 3
24132: ST_TO_ADDR
24133: GO 24514
24135: LD_INT 16
24137: DOUBLE
24138: EQUAL
24139: IFTRUE 24143
24141: GO 24154
24143: POP
// bc_type := b_ext_gun ; 17 :
24144: LD_ADDR_OWVAR 42
24148: PUSH
24149: LD_INT 17
24151: ST_TO_ADDR
24152: GO 24514
24154: LD_INT 17
24156: DOUBLE
24157: EQUAL
24158: IFTRUE 24162
24160: GO 24190
24162: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
24163: LD_ADDR_OWVAR 42
24167: PUSH
24168: LD_INT 19
24170: PUSH
24171: LD_INT 23
24173: PUSH
24174: LD_INT 19
24176: PUSH
24177: EMPTY
24178: LIST
24179: LIST
24180: LIST
24181: PUSH
24182: LD_VAR 0 1
24186: ARRAY
24187: ST_TO_ADDR
24188: GO 24514
24190: LD_INT 18
24192: DOUBLE
24193: EQUAL
24194: IFTRUE 24198
24196: GO 24209
24198: POP
// bc_type := b_ext_radar ; 19 :
24199: LD_ADDR_OWVAR 42
24203: PUSH
24204: LD_INT 20
24206: ST_TO_ADDR
24207: GO 24514
24209: LD_INT 19
24211: DOUBLE
24212: EQUAL
24213: IFTRUE 24217
24215: GO 24228
24217: POP
// bc_type := b_ext_radio ; 20 :
24218: LD_ADDR_OWVAR 42
24222: PUSH
24223: LD_INT 22
24225: ST_TO_ADDR
24226: GO 24514
24228: LD_INT 20
24230: DOUBLE
24231: EQUAL
24232: IFTRUE 24236
24234: GO 24247
24236: POP
// bc_type := b_ext_siberium ; 21 :
24237: LD_ADDR_OWVAR 42
24241: PUSH
24242: LD_INT 21
24244: ST_TO_ADDR
24245: GO 24514
24247: LD_INT 21
24249: DOUBLE
24250: EQUAL
24251: IFTRUE 24255
24253: GO 24266
24255: POP
// bc_type := b_ext_computer ; 22 :
24256: LD_ADDR_OWVAR 42
24260: PUSH
24261: LD_INT 24
24263: ST_TO_ADDR
24264: GO 24514
24266: LD_INT 22
24268: DOUBLE
24269: EQUAL
24270: IFTRUE 24274
24272: GO 24285
24274: POP
// bc_type := b_ext_track ; 23 :
24275: LD_ADDR_OWVAR 42
24279: PUSH
24280: LD_INT 16
24282: ST_TO_ADDR
24283: GO 24514
24285: LD_INT 23
24287: DOUBLE
24288: EQUAL
24289: IFTRUE 24293
24291: GO 24304
24293: POP
// bc_type := b_ext_laser ; 24 :
24294: LD_ADDR_OWVAR 42
24298: PUSH
24299: LD_INT 25
24301: ST_TO_ADDR
24302: GO 24514
24304: LD_INT 24
24306: DOUBLE
24307: EQUAL
24308: IFTRUE 24312
24310: GO 24323
24312: POP
// bc_type := b_control_tower ; 25 :
24313: LD_ADDR_OWVAR 42
24317: PUSH
24318: LD_INT 36
24320: ST_TO_ADDR
24321: GO 24514
24323: LD_INT 25
24325: DOUBLE
24326: EQUAL
24327: IFTRUE 24331
24329: GO 24342
24331: POP
// bc_type := b_breastwork ; 26 :
24332: LD_ADDR_OWVAR 42
24336: PUSH
24337: LD_INT 31
24339: ST_TO_ADDR
24340: GO 24514
24342: LD_INT 26
24344: DOUBLE
24345: EQUAL
24346: IFTRUE 24350
24348: GO 24361
24350: POP
// bc_type := b_bunker ; 27 :
24351: LD_ADDR_OWVAR 42
24355: PUSH
24356: LD_INT 32
24358: ST_TO_ADDR
24359: GO 24514
24361: LD_INT 27
24363: DOUBLE
24364: EQUAL
24365: IFTRUE 24369
24367: GO 24380
24369: POP
// bc_type := b_turret ; 28 :
24370: LD_ADDR_OWVAR 42
24374: PUSH
24375: LD_INT 33
24377: ST_TO_ADDR
24378: GO 24514
24380: LD_INT 28
24382: DOUBLE
24383: EQUAL
24384: IFTRUE 24388
24386: GO 24399
24388: POP
// bc_type := b_armoury ; 29 :
24389: LD_ADDR_OWVAR 42
24393: PUSH
24394: LD_INT 4
24396: ST_TO_ADDR
24397: GO 24514
24399: LD_INT 29
24401: DOUBLE
24402: EQUAL
24403: IFTRUE 24407
24405: GO 24418
24407: POP
// bc_type := b_barracks ; 30 :
24408: LD_ADDR_OWVAR 42
24412: PUSH
24413: LD_INT 5
24415: ST_TO_ADDR
24416: GO 24514
24418: LD_INT 30
24420: DOUBLE
24421: EQUAL
24422: IFTRUE 24426
24424: GO 24437
24426: POP
// bc_type := b_solar_power ; 31 :
24427: LD_ADDR_OWVAR 42
24431: PUSH
24432: LD_INT 27
24434: ST_TO_ADDR
24435: GO 24514
24437: LD_INT 31
24439: DOUBLE
24440: EQUAL
24441: IFTRUE 24445
24443: GO 24456
24445: POP
// bc_type := b_oil_power ; 32 :
24446: LD_ADDR_OWVAR 42
24450: PUSH
24451: LD_INT 26
24453: ST_TO_ADDR
24454: GO 24514
24456: LD_INT 32
24458: DOUBLE
24459: EQUAL
24460: IFTRUE 24464
24462: GO 24475
24464: POP
// bc_type := b_siberite_power ; 33 :
24465: LD_ADDR_OWVAR 42
24469: PUSH
24470: LD_INT 28
24472: ST_TO_ADDR
24473: GO 24514
24475: LD_INT 33
24477: DOUBLE
24478: EQUAL
24479: IFTRUE 24483
24481: GO 24494
24483: POP
// bc_type := b_oil_mine ; 34 :
24484: LD_ADDR_OWVAR 42
24488: PUSH
24489: LD_INT 29
24491: ST_TO_ADDR
24492: GO 24514
24494: LD_INT 34
24496: DOUBLE
24497: EQUAL
24498: IFTRUE 24502
24500: GO 24513
24502: POP
// bc_type := b_siberite_mine ; end ;
24503: LD_ADDR_OWVAR 42
24507: PUSH
24508: LD_INT 30
24510: ST_TO_ADDR
24511: GO 24514
24513: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
24514: LD_ADDR_VAR 0 8
24518: PUSH
24519: LD_VAR 0 5
24523: PPUSH
24524: LD_VAR 0 6
24528: PPUSH
24529: LD_VAR 0 3
24533: PPUSH
24534: CALL_OW 47
24538: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
24539: LD_OWVAR 42
24543: PUSH
24544: LD_INT 32
24546: PUSH
24547: LD_INT 33
24549: PUSH
24550: EMPTY
24551: LIST
24552: LIST
24553: IN
24554: IFFALSE 24570
// PlaceWeaponTurret ( b , weapon ) ;
24556: LD_VAR 0 8
24560: PPUSH
24561: LD_VAR 0 4
24565: PPUSH
24566: CALL_OW 431
// end ;
24570: LD_VAR 0 7
24574: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
24575: LD_INT 0
24577: PPUSH
24578: PPUSH
24579: PPUSH
24580: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24581: LD_ADDR_VAR 0 4
24585: PUSH
24586: LD_INT 22
24588: PUSH
24589: LD_OWVAR 2
24593: PUSH
24594: EMPTY
24595: LIST
24596: LIST
24597: PUSH
24598: LD_INT 2
24600: PUSH
24601: LD_INT 30
24603: PUSH
24604: LD_INT 0
24606: PUSH
24607: EMPTY
24608: LIST
24609: LIST
24610: PUSH
24611: LD_INT 30
24613: PUSH
24614: LD_INT 1
24616: PUSH
24617: EMPTY
24618: LIST
24619: LIST
24620: PUSH
24621: EMPTY
24622: LIST
24623: LIST
24624: LIST
24625: PUSH
24626: EMPTY
24627: LIST
24628: LIST
24629: PPUSH
24630: CALL_OW 69
24634: ST_TO_ADDR
// if not tmp then
24635: LD_VAR 0 4
24639: NOT
24640: IFFALSE 24644
// exit ;
24642: GO 24703
// for i in tmp do
24644: LD_ADDR_VAR 0 2
24648: PUSH
24649: LD_VAR 0 4
24653: PUSH
24654: FOR_IN
24655: IFFALSE 24701
// for j = 1 to 3 do
24657: LD_ADDR_VAR 0 3
24661: PUSH
24662: DOUBLE
24663: LD_INT 1
24665: DEC
24666: ST_TO_ADDR
24667: LD_INT 3
24669: PUSH
24670: FOR_TO
24671: IFFALSE 24697
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
24673: LD_VAR 0 2
24677: PPUSH
24678: CALL_OW 274
24682: PPUSH
24683: LD_VAR 0 3
24687: PPUSH
24688: LD_INT 99999
24690: PPUSH
24691: CALL_OW 277
24695: GO 24670
24697: POP
24698: POP
24699: GO 24654
24701: POP
24702: POP
// end ;
24703: LD_VAR 0 1
24707: RET
// export function hHackSetLevel10 ; var i , j ; begin
24708: LD_INT 0
24710: PPUSH
24711: PPUSH
24712: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
24713: LD_ADDR_VAR 0 2
24717: PUSH
24718: LD_INT 21
24720: PUSH
24721: LD_INT 1
24723: PUSH
24724: EMPTY
24725: LIST
24726: LIST
24727: PPUSH
24728: CALL_OW 69
24732: PUSH
24733: FOR_IN
24734: IFFALSE 24786
// if IsSelected ( i ) then
24736: LD_VAR 0 2
24740: PPUSH
24741: CALL_OW 306
24745: IFFALSE 24784
// begin for j := 1 to 4 do
24747: LD_ADDR_VAR 0 3
24751: PUSH
24752: DOUBLE
24753: LD_INT 1
24755: DEC
24756: ST_TO_ADDR
24757: LD_INT 4
24759: PUSH
24760: FOR_TO
24761: IFFALSE 24782
// SetSkill ( i , j , 10 ) ;
24763: LD_VAR 0 2
24767: PPUSH
24768: LD_VAR 0 3
24772: PPUSH
24773: LD_INT 10
24775: PPUSH
24776: CALL_OW 237
24780: GO 24760
24782: POP
24783: POP
// end ;
24784: GO 24733
24786: POP
24787: POP
// end ;
24788: LD_VAR 0 1
24792: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
24793: LD_INT 0
24795: PPUSH
24796: PPUSH
24797: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
24798: LD_ADDR_VAR 0 2
24802: PUSH
24803: LD_INT 22
24805: PUSH
24806: LD_OWVAR 2
24810: PUSH
24811: EMPTY
24812: LIST
24813: LIST
24814: PUSH
24815: LD_INT 21
24817: PUSH
24818: LD_INT 1
24820: PUSH
24821: EMPTY
24822: LIST
24823: LIST
24824: PUSH
24825: EMPTY
24826: LIST
24827: LIST
24828: PPUSH
24829: CALL_OW 69
24833: PUSH
24834: FOR_IN
24835: IFFALSE 24876
// begin for j := 1 to 4 do
24837: LD_ADDR_VAR 0 3
24841: PUSH
24842: DOUBLE
24843: LD_INT 1
24845: DEC
24846: ST_TO_ADDR
24847: LD_INT 4
24849: PUSH
24850: FOR_TO
24851: IFFALSE 24872
// SetSkill ( i , j , 10 ) ;
24853: LD_VAR 0 2
24857: PPUSH
24858: LD_VAR 0 3
24862: PPUSH
24863: LD_INT 10
24865: PPUSH
24866: CALL_OW 237
24870: GO 24850
24872: POP
24873: POP
// end ;
24874: GO 24834
24876: POP
24877: POP
// end ;
24878: LD_VAR 0 1
24882: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
24883: LD_INT 0
24885: PPUSH
// uc_side := your_side ;
24886: LD_ADDR_OWVAR 20
24890: PUSH
24891: LD_OWVAR 2
24895: ST_TO_ADDR
// uc_nation := nation ;
24896: LD_ADDR_OWVAR 21
24900: PUSH
24901: LD_VAR 0 1
24905: ST_TO_ADDR
// InitHc ;
24906: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
24910: LD_INT 0
24912: PPUSH
24913: LD_VAR 0 2
24917: PPUSH
24918: LD_VAR 0 3
24922: PPUSH
24923: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
24927: LD_VAR 0 4
24931: PPUSH
24932: LD_VAR 0 5
24936: PPUSH
24937: CALL_OW 428
24941: PUSH
24942: LD_INT 0
24944: EQUAL
24945: IFFALSE 24969
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
24947: CALL_OW 44
24951: PPUSH
24952: LD_VAR 0 4
24956: PPUSH
24957: LD_VAR 0 5
24961: PPUSH
24962: LD_INT 1
24964: PPUSH
24965: CALL_OW 48
// end ;
24969: LD_VAR 0 6
24973: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
24974: LD_INT 0
24976: PPUSH
24977: PPUSH
// uc_side := your_side ;
24978: LD_ADDR_OWVAR 20
24982: PUSH
24983: LD_OWVAR 2
24987: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
24988: LD_VAR 0 1
24992: PUSH
24993: LD_INT 1
24995: PUSH
24996: LD_INT 2
24998: PUSH
24999: LD_INT 3
25001: PUSH
25002: LD_INT 4
25004: PUSH
25005: LD_INT 5
25007: PUSH
25008: EMPTY
25009: LIST
25010: LIST
25011: LIST
25012: LIST
25013: LIST
25014: IN
25015: IFFALSE 25027
// uc_nation := nation_american else
25017: LD_ADDR_OWVAR 21
25021: PUSH
25022: LD_INT 1
25024: ST_TO_ADDR
25025: GO 25070
// if chassis in [ 11 , 12 , 13 , 14 ] then
25027: LD_VAR 0 1
25031: PUSH
25032: LD_INT 11
25034: PUSH
25035: LD_INT 12
25037: PUSH
25038: LD_INT 13
25040: PUSH
25041: LD_INT 14
25043: PUSH
25044: EMPTY
25045: LIST
25046: LIST
25047: LIST
25048: LIST
25049: IN
25050: IFFALSE 25062
// uc_nation := nation_arabian else
25052: LD_ADDR_OWVAR 21
25056: PUSH
25057: LD_INT 2
25059: ST_TO_ADDR
25060: GO 25070
// uc_nation := nation_russian ;
25062: LD_ADDR_OWVAR 21
25066: PUSH
25067: LD_INT 3
25069: ST_TO_ADDR
// vc_chassis := chassis ;
25070: LD_ADDR_OWVAR 37
25074: PUSH
25075: LD_VAR 0 1
25079: ST_TO_ADDR
// vc_engine := engine ;
25080: LD_ADDR_OWVAR 39
25084: PUSH
25085: LD_VAR 0 2
25089: ST_TO_ADDR
// vc_control := control ;
25090: LD_ADDR_OWVAR 38
25094: PUSH
25095: LD_VAR 0 3
25099: ST_TO_ADDR
// vc_weapon := weapon ;
25100: LD_ADDR_OWVAR 40
25104: PUSH
25105: LD_VAR 0 4
25109: ST_TO_ADDR
// un := CreateVehicle ;
25110: LD_ADDR_VAR 0 8
25114: PUSH
25115: CALL_OW 45
25119: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
25120: LD_VAR 0 8
25124: PPUSH
25125: LD_INT 0
25127: PPUSH
25128: LD_INT 5
25130: PPUSH
25131: CALL_OW 12
25135: PPUSH
25136: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
25140: LD_VAR 0 8
25144: PPUSH
25145: LD_VAR 0 5
25149: PPUSH
25150: LD_VAR 0 6
25154: PPUSH
25155: LD_INT 1
25157: PPUSH
25158: CALL_OW 48
// end ;
25162: LD_VAR 0 7
25166: RET
// export hInvincible ; every 1 do
25167: GO 25169
25169: DISABLE
// hInvincible := [ ] ;
25170: LD_ADDR_EXP 102
25174: PUSH
25175: EMPTY
25176: ST_TO_ADDR
25177: END
// every 10 do var i ;
25178: GO 25180
25180: DISABLE
25181: LD_INT 0
25183: PPUSH
// begin enable ;
25184: ENABLE
// if not hInvincible then
25185: LD_EXP 102
25189: NOT
25190: IFFALSE 25194
// exit ;
25192: GO 25238
// for i in hInvincible do
25194: LD_ADDR_VAR 0 1
25198: PUSH
25199: LD_EXP 102
25203: PUSH
25204: FOR_IN
25205: IFFALSE 25236
// if GetLives ( i ) < 1000 then
25207: LD_VAR 0 1
25211: PPUSH
25212: CALL_OW 256
25216: PUSH
25217: LD_INT 1000
25219: LESS
25220: IFFALSE 25234
// SetLives ( i , 1000 ) ;
25222: LD_VAR 0 1
25226: PPUSH
25227: LD_INT 1000
25229: PPUSH
25230: CALL_OW 234
25234: GO 25204
25236: POP
25237: POP
// end ;
25238: PPOPN 1
25240: END
// export function hHackInvincible ; var i ; begin
25241: LD_INT 0
25243: PPUSH
25244: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
25245: LD_ADDR_VAR 0 2
25249: PUSH
25250: LD_INT 2
25252: PUSH
25253: LD_INT 21
25255: PUSH
25256: LD_INT 1
25258: PUSH
25259: EMPTY
25260: LIST
25261: LIST
25262: PUSH
25263: LD_INT 21
25265: PUSH
25266: LD_INT 2
25268: PUSH
25269: EMPTY
25270: LIST
25271: LIST
25272: PUSH
25273: EMPTY
25274: LIST
25275: LIST
25276: LIST
25277: PPUSH
25278: CALL_OW 69
25282: PUSH
25283: FOR_IN
25284: IFFALSE 25345
// if IsSelected ( i ) then
25286: LD_VAR 0 2
25290: PPUSH
25291: CALL_OW 306
25295: IFFALSE 25343
// begin if i in hInvincible then
25297: LD_VAR 0 2
25301: PUSH
25302: LD_EXP 102
25306: IN
25307: IFFALSE 25327
// hInvincible := hInvincible diff i else
25309: LD_ADDR_EXP 102
25313: PUSH
25314: LD_EXP 102
25318: PUSH
25319: LD_VAR 0 2
25323: DIFF
25324: ST_TO_ADDR
25325: GO 25343
// hInvincible := hInvincible union i ;
25327: LD_ADDR_EXP 102
25331: PUSH
25332: LD_EXP 102
25336: PUSH
25337: LD_VAR 0 2
25341: UNION
25342: ST_TO_ADDR
// end ;
25343: GO 25283
25345: POP
25346: POP
// end ;
25347: LD_VAR 0 1
25351: RET
// export function hHackInvisible ; var i , j ; begin
25352: LD_INT 0
25354: PPUSH
25355: PPUSH
25356: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
25357: LD_ADDR_VAR 0 2
25361: PUSH
25362: LD_INT 21
25364: PUSH
25365: LD_INT 1
25367: PUSH
25368: EMPTY
25369: LIST
25370: LIST
25371: PPUSH
25372: CALL_OW 69
25376: PUSH
25377: FOR_IN
25378: IFFALSE 25402
// if IsSelected ( i ) then
25380: LD_VAR 0 2
25384: PPUSH
25385: CALL_OW 306
25389: IFFALSE 25400
// ComForceInvisible ( i ) ;
25391: LD_VAR 0 2
25395: PPUSH
25396: CALL_OW 496
25400: GO 25377
25402: POP
25403: POP
// end ;
25404: LD_VAR 0 1
25408: RET
// export function hHackChangeYourSide ; begin
25409: LD_INT 0
25411: PPUSH
// if your_side = 8 then
25412: LD_OWVAR 2
25416: PUSH
25417: LD_INT 8
25419: EQUAL
25420: IFFALSE 25432
// your_side := 0 else
25422: LD_ADDR_OWVAR 2
25426: PUSH
25427: LD_INT 0
25429: ST_TO_ADDR
25430: GO 25446
// your_side := your_side + 1 ;
25432: LD_ADDR_OWVAR 2
25436: PUSH
25437: LD_OWVAR 2
25441: PUSH
25442: LD_INT 1
25444: PLUS
25445: ST_TO_ADDR
// end ;
25446: LD_VAR 0 1
25450: RET
// export function hHackChangeUnitSide ; var i , j ; begin
25451: LD_INT 0
25453: PPUSH
25454: PPUSH
25455: PPUSH
// for i in all_units do
25456: LD_ADDR_VAR 0 2
25460: PUSH
25461: LD_OWVAR 3
25465: PUSH
25466: FOR_IN
25467: IFFALSE 25545
// if IsSelected ( i ) then
25469: LD_VAR 0 2
25473: PPUSH
25474: CALL_OW 306
25478: IFFALSE 25543
// begin j := GetSide ( i ) ;
25480: LD_ADDR_VAR 0 3
25484: PUSH
25485: LD_VAR 0 2
25489: PPUSH
25490: CALL_OW 255
25494: ST_TO_ADDR
// if j = 8 then
25495: LD_VAR 0 3
25499: PUSH
25500: LD_INT 8
25502: EQUAL
25503: IFFALSE 25515
// j := 0 else
25505: LD_ADDR_VAR 0 3
25509: PUSH
25510: LD_INT 0
25512: ST_TO_ADDR
25513: GO 25529
// j := j + 1 ;
25515: LD_ADDR_VAR 0 3
25519: PUSH
25520: LD_VAR 0 3
25524: PUSH
25525: LD_INT 1
25527: PLUS
25528: ST_TO_ADDR
// SetSide ( i , j ) ;
25529: LD_VAR 0 2
25533: PPUSH
25534: LD_VAR 0 3
25538: PPUSH
25539: CALL_OW 235
// end ;
25543: GO 25466
25545: POP
25546: POP
// end ;
25547: LD_VAR 0 1
25551: RET
// export function hHackFog ; begin
25552: LD_INT 0
25554: PPUSH
// FogOff ( true ) ;
25555: LD_INT 1
25557: PPUSH
25558: CALL_OW 344
// end ;
25562: LD_VAR 0 1
25566: RET
// export function hHackTeleport ( unit , x , y ) ; begin
25567: LD_INT 0
25569: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
25570: LD_VAR 0 1
25574: PPUSH
25575: LD_VAR 0 2
25579: PPUSH
25580: LD_VAR 0 3
25584: PPUSH
25585: LD_INT 1
25587: PPUSH
25588: LD_INT 1
25590: PPUSH
25591: CALL_OW 483
// CenterOnXY ( x , y ) ;
25595: LD_VAR 0 2
25599: PPUSH
25600: LD_VAR 0 3
25604: PPUSH
25605: CALL_OW 84
// end ; end_of_file
25609: LD_VAR 0 4
25613: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
25614: LD_INT 0
25616: PPUSH
25617: PPUSH
25618: PPUSH
25619: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
25620: LD_VAR 0 1
25624: PPUSH
25625: CALL_OW 264
25629: PUSH
25630: LD_EXP 30
25634: EQUAL
25635: IFFALSE 25707
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
25637: LD_INT 68
25639: PPUSH
25640: LD_VAR 0 1
25644: PPUSH
25645: CALL_OW 255
25649: PPUSH
25650: CALL_OW 321
25654: PUSH
25655: LD_INT 2
25657: EQUAL
25658: IFFALSE 25670
// eff := 70 else
25660: LD_ADDR_VAR 0 4
25664: PUSH
25665: LD_INT 70
25667: ST_TO_ADDR
25668: GO 25678
// eff := 30 ;
25670: LD_ADDR_VAR 0 4
25674: PUSH
25675: LD_INT 30
25677: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
25678: LD_VAR 0 1
25682: PPUSH
25683: CALL_OW 250
25687: PPUSH
25688: LD_VAR 0 1
25692: PPUSH
25693: CALL_OW 251
25697: PPUSH
25698: LD_VAR 0 4
25702: PPUSH
25703: CALL_OW 495
// end ; end ;
25707: LD_VAR 0 2
25711: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
25712: LD_INT 0
25714: PPUSH
// end ;
25715: LD_VAR 0 4
25719: RET
// export function SOS_Command ( cmd ) ; begin
25720: LD_INT 0
25722: PPUSH
// end ;
25723: LD_VAR 0 2
25727: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
25728: LD_INT 0
25730: PPUSH
// end ;
25731: LD_VAR 0 6
25735: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
25736: LD_INT 0
25738: PPUSH
25739: PPUSH
// if not vehicle or not factory then
25740: LD_VAR 0 1
25744: NOT
25745: PUSH
25746: LD_VAR 0 2
25750: NOT
25751: OR
25752: IFFALSE 25756
// exit ;
25754: GO 25987
// if factoryWaypoints >= factory then
25756: LD_EXP 103
25760: PUSH
25761: LD_VAR 0 2
25765: GREATEREQUAL
25766: IFFALSE 25987
// if factoryWaypoints [ factory ] then
25768: LD_EXP 103
25772: PUSH
25773: LD_VAR 0 2
25777: ARRAY
25778: IFFALSE 25987
// begin if GetControl ( vehicle ) = control_manual then
25780: LD_VAR 0 1
25784: PPUSH
25785: CALL_OW 263
25789: PUSH
25790: LD_INT 1
25792: EQUAL
25793: IFFALSE 25874
// begin driver := IsDrivenBy ( vehicle ) ;
25795: LD_ADDR_VAR 0 4
25799: PUSH
25800: LD_VAR 0 1
25804: PPUSH
25805: CALL_OW 311
25809: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
25810: LD_VAR 0 4
25814: PPUSH
25815: LD_EXP 103
25819: PUSH
25820: LD_VAR 0 2
25824: ARRAY
25825: PUSH
25826: LD_INT 3
25828: ARRAY
25829: PPUSH
25830: LD_EXP 103
25834: PUSH
25835: LD_VAR 0 2
25839: ARRAY
25840: PUSH
25841: LD_INT 4
25843: ARRAY
25844: PPUSH
25845: CALL_OW 171
// AddComExitVehicle ( driver ) ;
25849: LD_VAR 0 4
25853: PPUSH
25854: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
25858: LD_VAR 0 4
25862: PPUSH
25863: LD_VAR 0 2
25867: PPUSH
25868: CALL_OW 180
// end else
25872: GO 25987
// if GetControl ( vehicle ) = control_remote then
25874: LD_VAR 0 1
25878: PPUSH
25879: CALL_OW 263
25883: PUSH
25884: LD_INT 2
25886: EQUAL
25887: IFFALSE 25948
// begin wait ( 0 0$2 ) ;
25889: LD_INT 70
25891: PPUSH
25892: CALL_OW 67
// if Connect ( vehicle ) then
25896: LD_VAR 0 1
25900: PPUSH
25901: CALL 38211 0 1
25905: IFFALSE 25946
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
25907: LD_VAR 0 1
25911: PPUSH
25912: LD_EXP 103
25916: PUSH
25917: LD_VAR 0 2
25921: ARRAY
25922: PUSH
25923: LD_INT 3
25925: ARRAY
25926: PPUSH
25927: LD_EXP 103
25931: PUSH
25932: LD_VAR 0 2
25936: ARRAY
25937: PUSH
25938: LD_INT 4
25940: ARRAY
25941: PPUSH
25942: CALL_OW 171
// end else
25946: GO 25987
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
25948: LD_VAR 0 1
25952: PPUSH
25953: LD_EXP 103
25957: PUSH
25958: LD_VAR 0 2
25962: ARRAY
25963: PUSH
25964: LD_INT 3
25966: ARRAY
25967: PPUSH
25968: LD_EXP 103
25972: PUSH
25973: LD_VAR 0 2
25977: ARRAY
25978: PUSH
25979: LD_INT 4
25981: ARRAY
25982: PPUSH
25983: CALL_OW 171
// end ; end ;
25987: LD_VAR 0 3
25991: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
25992: LD_INT 0
25994: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
25995: LD_VAR 0 1
25999: PUSH
26000: LD_INT 250
26002: EQUAL
26003: PUSH
26004: LD_VAR 0 2
26008: PPUSH
26009: CALL_OW 264
26013: PUSH
26014: LD_EXP 33
26018: EQUAL
26019: AND
26020: IFFALSE 26041
// MinerPlaceMine ( unit , x , y ) ;
26022: LD_VAR 0 2
26026: PPUSH
26027: LD_VAR 0 4
26031: PPUSH
26032: LD_VAR 0 5
26036: PPUSH
26037: CALL 28769 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
26041: LD_VAR 0 1
26045: PUSH
26046: LD_INT 251
26048: EQUAL
26049: PUSH
26050: LD_VAR 0 2
26054: PPUSH
26055: CALL_OW 264
26059: PUSH
26060: LD_EXP 33
26064: EQUAL
26065: AND
26066: IFFALSE 26087
// MinerDetonateMine ( unit , x , y ) ;
26068: LD_VAR 0 2
26072: PPUSH
26073: LD_VAR 0 4
26077: PPUSH
26078: LD_VAR 0 5
26082: PPUSH
26083: CALL 29046 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
26087: LD_VAR 0 1
26091: PUSH
26092: LD_INT 252
26094: EQUAL
26095: PUSH
26096: LD_VAR 0 2
26100: PPUSH
26101: CALL_OW 264
26105: PUSH
26106: LD_EXP 33
26110: EQUAL
26111: AND
26112: IFFALSE 26133
// MinerCreateMinefield ( unit , x , y ) ;
26114: LD_VAR 0 2
26118: PPUSH
26119: LD_VAR 0 4
26123: PPUSH
26124: LD_VAR 0 5
26128: PPUSH
26129: CALL 29463 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
26133: LD_VAR 0 1
26137: PUSH
26138: LD_INT 253
26140: EQUAL
26141: PUSH
26142: LD_VAR 0 2
26146: PPUSH
26147: CALL_OW 257
26151: PUSH
26152: LD_INT 5
26154: EQUAL
26155: AND
26156: IFFALSE 26177
// ComBinocular ( unit , x , y ) ;
26158: LD_VAR 0 2
26162: PPUSH
26163: LD_VAR 0 4
26167: PPUSH
26168: LD_VAR 0 5
26172: PPUSH
26173: CALL 29834 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
26177: LD_VAR 0 1
26181: PUSH
26182: LD_INT 254
26184: EQUAL
26185: PUSH
26186: LD_VAR 0 2
26190: PPUSH
26191: CALL_OW 264
26195: PUSH
26196: LD_EXP 28
26200: EQUAL
26201: AND
26202: PUSH
26203: LD_VAR 0 3
26207: PPUSH
26208: CALL_OW 263
26212: PUSH
26213: LD_INT 3
26215: EQUAL
26216: AND
26217: IFFALSE 26233
// HackDestroyVehicle ( unit , selectedUnit ) ;
26219: LD_VAR 0 2
26223: PPUSH
26224: LD_VAR 0 3
26228: PPUSH
26229: CALL 28129 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
26233: LD_VAR 0 1
26237: PUSH
26238: LD_INT 255
26240: EQUAL
26241: PUSH
26242: LD_VAR 0 2
26246: PPUSH
26247: CALL_OW 264
26251: PUSH
26252: LD_INT 14
26254: PUSH
26255: LD_INT 53
26257: PUSH
26258: EMPTY
26259: LIST
26260: LIST
26261: IN
26262: AND
26263: PUSH
26264: LD_VAR 0 4
26268: PPUSH
26269: LD_VAR 0 5
26273: PPUSH
26274: CALL_OW 488
26278: AND
26279: IFFALSE 26303
// CutTreeXYR ( unit , x , y , 12 ) ;
26281: LD_VAR 0 2
26285: PPUSH
26286: LD_VAR 0 4
26290: PPUSH
26291: LD_VAR 0 5
26295: PPUSH
26296: LD_INT 12
26298: PPUSH
26299: CALL 26695 0 4
// if cmd = 256 then
26303: LD_VAR 0 1
26307: PUSH
26308: LD_INT 256
26310: EQUAL
26311: IFFALSE 26332
// SetFactoryWaypoint ( unit , x , y ) ;
26313: LD_VAR 0 2
26317: PPUSH
26318: LD_VAR 0 4
26322: PPUSH
26323: LD_VAR 0 5
26327: PPUSH
26328: CALL 26337 0 3
// end ;
26332: LD_VAR 0 6
26336: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
26337: LD_INT 0
26339: PPUSH
26340: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
26341: LD_VAR 0 1
26345: NOT
26346: PUSH
26347: LD_VAR 0 2
26351: PPUSH
26352: LD_VAR 0 3
26356: PPUSH
26357: CALL_OW 488
26361: NOT
26362: OR
26363: PUSH
26364: LD_VAR 0 1
26368: PPUSH
26369: CALL_OW 266
26373: PUSH
26374: LD_INT 3
26376: NONEQUAL
26377: PUSH
26378: LD_VAR 0 1
26382: PPUSH
26383: CALL_OW 247
26387: PUSH
26388: LD_INT 1
26390: EQUAL
26391: NOT
26392: AND
26393: OR
26394: IFFALSE 26398
// exit ;
26396: GO 26547
// if GetType ( factory ) = unit_human then
26398: LD_VAR 0 1
26402: PPUSH
26403: CALL_OW 247
26407: PUSH
26408: LD_INT 1
26410: EQUAL
26411: IFFALSE 26428
// factory := IsInUnit ( factory ) ;
26413: LD_ADDR_VAR 0 1
26417: PUSH
26418: LD_VAR 0 1
26422: PPUSH
26423: CALL_OW 310
26427: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
26428: LD_VAR 0 1
26432: PPUSH
26433: CALL_OW 266
26437: PUSH
26438: LD_INT 3
26440: NONEQUAL
26441: IFFALSE 26445
// exit ;
26443: GO 26547
// if HexInfo ( x , y ) = factory then
26445: LD_VAR 0 2
26449: PPUSH
26450: LD_VAR 0 3
26454: PPUSH
26455: CALL_OW 428
26459: PUSH
26460: LD_VAR 0 1
26464: EQUAL
26465: IFFALSE 26492
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
26467: LD_ADDR_EXP 103
26471: PUSH
26472: LD_EXP 103
26476: PPUSH
26477: LD_VAR 0 1
26481: PPUSH
26482: LD_INT 0
26484: PPUSH
26485: CALL_OW 1
26489: ST_TO_ADDR
26490: GO 26543
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
26492: LD_ADDR_EXP 103
26496: PUSH
26497: LD_EXP 103
26501: PPUSH
26502: LD_VAR 0 1
26506: PPUSH
26507: LD_VAR 0 1
26511: PPUSH
26512: CALL_OW 255
26516: PUSH
26517: LD_VAR 0 1
26521: PUSH
26522: LD_VAR 0 2
26526: PUSH
26527: LD_VAR 0 3
26531: PUSH
26532: EMPTY
26533: LIST
26534: LIST
26535: LIST
26536: LIST
26537: PPUSH
26538: CALL_OW 1
26542: ST_TO_ADDR
// UpdateFactoryWaypoints ;
26543: CALL 26552 0 0
// end ;
26547: LD_VAR 0 4
26551: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
26552: LD_INT 0
26554: PPUSH
26555: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
26556: LD_STRING resetFactoryWaypoint();
26558: PPUSH
26559: CALL_OW 559
// if factoryWaypoints then
26563: LD_EXP 103
26567: IFFALSE 26690
// begin for i := 1 to factoryWaypoints do
26569: LD_ADDR_VAR 0 2
26573: PUSH
26574: DOUBLE
26575: LD_INT 1
26577: DEC
26578: ST_TO_ADDR
26579: LD_EXP 103
26583: PUSH
26584: FOR_TO
26585: IFFALSE 26688
// if factoryWaypoints [ i ] then
26587: LD_EXP 103
26591: PUSH
26592: LD_VAR 0 2
26596: ARRAY
26597: IFFALSE 26686
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
26599: LD_STRING setFactoryWaypointXY(
26601: PUSH
26602: LD_EXP 103
26606: PUSH
26607: LD_VAR 0 2
26611: ARRAY
26612: PUSH
26613: LD_INT 1
26615: ARRAY
26616: STR
26617: PUSH
26618: LD_STRING ,
26620: STR
26621: PUSH
26622: LD_EXP 103
26626: PUSH
26627: LD_VAR 0 2
26631: ARRAY
26632: PUSH
26633: LD_INT 2
26635: ARRAY
26636: STR
26637: PUSH
26638: LD_STRING ,
26640: STR
26641: PUSH
26642: LD_EXP 103
26646: PUSH
26647: LD_VAR 0 2
26651: ARRAY
26652: PUSH
26653: LD_INT 3
26655: ARRAY
26656: STR
26657: PUSH
26658: LD_STRING ,
26660: STR
26661: PUSH
26662: LD_EXP 103
26666: PUSH
26667: LD_VAR 0 2
26671: ARRAY
26672: PUSH
26673: LD_INT 4
26675: ARRAY
26676: STR
26677: PUSH
26678: LD_STRING )
26680: STR
26681: PPUSH
26682: CALL_OW 559
26686: GO 26584
26688: POP
26689: POP
// end ; end ;
26690: LD_VAR 0 1
26694: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
26695: LD_INT 0
26697: PPUSH
26698: PPUSH
26699: PPUSH
26700: PPUSH
26701: PPUSH
26702: PPUSH
26703: PPUSH
26704: PPUSH
26705: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
26706: LD_VAR 0 1
26710: NOT
26711: PUSH
26712: LD_VAR 0 2
26716: PPUSH
26717: LD_VAR 0 3
26721: PPUSH
26722: CALL_OW 488
26726: NOT
26727: OR
26728: PUSH
26729: LD_VAR 0 4
26733: NOT
26734: OR
26735: IFFALSE 26739
// exit ;
26737: GO 27079
// list := [ ] ;
26739: LD_ADDR_VAR 0 13
26743: PUSH
26744: EMPTY
26745: ST_TO_ADDR
// if x - r < 0 then
26746: LD_VAR 0 2
26750: PUSH
26751: LD_VAR 0 4
26755: MINUS
26756: PUSH
26757: LD_INT 0
26759: LESS
26760: IFFALSE 26772
// min_x := 0 else
26762: LD_ADDR_VAR 0 7
26766: PUSH
26767: LD_INT 0
26769: ST_TO_ADDR
26770: GO 26788
// min_x := x - r ;
26772: LD_ADDR_VAR 0 7
26776: PUSH
26777: LD_VAR 0 2
26781: PUSH
26782: LD_VAR 0 4
26786: MINUS
26787: ST_TO_ADDR
// if y - r < 0 then
26788: LD_VAR 0 3
26792: PUSH
26793: LD_VAR 0 4
26797: MINUS
26798: PUSH
26799: LD_INT 0
26801: LESS
26802: IFFALSE 26814
// min_y := 0 else
26804: LD_ADDR_VAR 0 8
26808: PUSH
26809: LD_INT 0
26811: ST_TO_ADDR
26812: GO 26830
// min_y := y - r ;
26814: LD_ADDR_VAR 0 8
26818: PUSH
26819: LD_VAR 0 3
26823: PUSH
26824: LD_VAR 0 4
26828: MINUS
26829: ST_TO_ADDR
// max_x := x + r ;
26830: LD_ADDR_VAR 0 9
26834: PUSH
26835: LD_VAR 0 2
26839: PUSH
26840: LD_VAR 0 4
26844: PLUS
26845: ST_TO_ADDR
// max_y := y + r ;
26846: LD_ADDR_VAR 0 10
26850: PUSH
26851: LD_VAR 0 3
26855: PUSH
26856: LD_VAR 0 4
26860: PLUS
26861: ST_TO_ADDR
// for _x = min_x to max_x do
26862: LD_ADDR_VAR 0 11
26866: PUSH
26867: DOUBLE
26868: LD_VAR 0 7
26872: DEC
26873: ST_TO_ADDR
26874: LD_VAR 0 9
26878: PUSH
26879: FOR_TO
26880: IFFALSE 26997
// for _y = min_y to max_y do
26882: LD_ADDR_VAR 0 12
26886: PUSH
26887: DOUBLE
26888: LD_VAR 0 8
26892: DEC
26893: ST_TO_ADDR
26894: LD_VAR 0 10
26898: PUSH
26899: FOR_TO
26900: IFFALSE 26993
// begin if not ValidHex ( _x , _y ) then
26902: LD_VAR 0 11
26906: PPUSH
26907: LD_VAR 0 12
26911: PPUSH
26912: CALL_OW 488
26916: NOT
26917: IFFALSE 26921
// continue ;
26919: GO 26899
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
26921: LD_VAR 0 11
26925: PPUSH
26926: LD_VAR 0 12
26930: PPUSH
26931: CALL_OW 351
26935: PUSH
26936: LD_VAR 0 11
26940: PPUSH
26941: LD_VAR 0 12
26945: PPUSH
26946: CALL_OW 554
26950: AND
26951: IFFALSE 26991
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
26953: LD_ADDR_VAR 0 13
26957: PUSH
26958: LD_VAR 0 13
26962: PPUSH
26963: LD_VAR 0 13
26967: PUSH
26968: LD_INT 1
26970: PLUS
26971: PPUSH
26972: LD_VAR 0 11
26976: PUSH
26977: LD_VAR 0 12
26981: PUSH
26982: EMPTY
26983: LIST
26984: LIST
26985: PPUSH
26986: CALL_OW 2
26990: ST_TO_ADDR
// end ;
26991: GO 26899
26993: POP
26994: POP
26995: GO 26879
26997: POP
26998: POP
// if not list then
26999: LD_VAR 0 13
27003: NOT
27004: IFFALSE 27008
// exit ;
27006: GO 27079
// for i in list do
27008: LD_ADDR_VAR 0 6
27012: PUSH
27013: LD_VAR 0 13
27017: PUSH
27018: FOR_IN
27019: IFFALSE 27077
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
27021: LD_VAR 0 1
27025: PPUSH
27026: LD_STRING M
27028: PUSH
27029: LD_VAR 0 6
27033: PUSH
27034: LD_INT 1
27036: ARRAY
27037: PUSH
27038: LD_VAR 0 6
27042: PUSH
27043: LD_INT 2
27045: ARRAY
27046: PUSH
27047: LD_INT 0
27049: PUSH
27050: LD_INT 0
27052: PUSH
27053: LD_INT 0
27055: PUSH
27056: LD_INT 0
27058: PUSH
27059: EMPTY
27060: LIST
27061: LIST
27062: LIST
27063: LIST
27064: LIST
27065: LIST
27066: LIST
27067: PUSH
27068: EMPTY
27069: LIST
27070: PPUSH
27071: CALL_OW 447
27075: GO 27018
27077: POP
27078: POP
// end ;
27079: LD_VAR 0 5
27083: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
27084: LD_EXP 104
27088: NOT
27089: IFFALSE 27139
27091: GO 27093
27093: DISABLE
// begin initHack := true ;
27094: LD_ADDR_EXP 104
27098: PUSH
27099: LD_INT 1
27101: ST_TO_ADDR
// hackTanks := [ ] ;
27102: LD_ADDR_EXP 105
27106: PUSH
27107: EMPTY
27108: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
27109: LD_ADDR_EXP 106
27113: PUSH
27114: EMPTY
27115: ST_TO_ADDR
// hackLimit := 3 ;
27116: LD_ADDR_EXP 107
27120: PUSH
27121: LD_INT 3
27123: ST_TO_ADDR
// hackDist := 12 ;
27124: LD_ADDR_EXP 108
27128: PUSH
27129: LD_INT 12
27131: ST_TO_ADDR
// hackCounter := [ ] ;
27132: LD_ADDR_EXP 109
27136: PUSH
27137: EMPTY
27138: ST_TO_ADDR
// end ;
27139: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
27140: LD_EXP 104
27144: PUSH
27145: LD_INT 34
27147: PUSH
27148: LD_EXP 28
27152: PUSH
27153: EMPTY
27154: LIST
27155: LIST
27156: PPUSH
27157: CALL_OW 69
27161: AND
27162: IFFALSE 27417
27164: GO 27166
27166: DISABLE
27167: LD_INT 0
27169: PPUSH
27170: PPUSH
// begin enable ;
27171: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
27172: LD_ADDR_VAR 0 1
27176: PUSH
27177: LD_INT 34
27179: PUSH
27180: LD_EXP 28
27184: PUSH
27185: EMPTY
27186: LIST
27187: LIST
27188: PPUSH
27189: CALL_OW 69
27193: PUSH
27194: FOR_IN
27195: IFFALSE 27415
// begin if not i in hackTanks then
27197: LD_VAR 0 1
27201: PUSH
27202: LD_EXP 105
27206: IN
27207: NOT
27208: IFFALSE 27291
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
27210: LD_ADDR_EXP 105
27214: PUSH
27215: LD_EXP 105
27219: PPUSH
27220: LD_EXP 105
27224: PUSH
27225: LD_INT 1
27227: PLUS
27228: PPUSH
27229: LD_VAR 0 1
27233: PPUSH
27234: CALL_OW 1
27238: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
27239: LD_ADDR_EXP 106
27243: PUSH
27244: LD_EXP 106
27248: PPUSH
27249: LD_EXP 106
27253: PUSH
27254: LD_INT 1
27256: PLUS
27257: PPUSH
27258: EMPTY
27259: PPUSH
27260: CALL_OW 1
27264: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
27265: LD_ADDR_EXP 109
27269: PUSH
27270: LD_EXP 109
27274: PPUSH
27275: LD_EXP 109
27279: PUSH
27280: LD_INT 1
27282: PLUS
27283: PPUSH
27284: EMPTY
27285: PPUSH
27286: CALL_OW 1
27290: ST_TO_ADDR
// end ; if not IsOk ( i ) then
27291: LD_VAR 0 1
27295: PPUSH
27296: CALL_OW 302
27300: NOT
27301: IFFALSE 27314
// begin HackUnlinkAll ( i ) ;
27303: LD_VAR 0 1
27307: PPUSH
27308: CALL 27420 0 1
// continue ;
27312: GO 27194
// end ; HackCheckCapturedStatus ( i ) ;
27314: LD_VAR 0 1
27318: PPUSH
27319: CALL 27863 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
27323: LD_ADDR_VAR 0 2
27327: PUSH
27328: LD_INT 81
27330: PUSH
27331: LD_VAR 0 1
27335: PPUSH
27336: CALL_OW 255
27340: PUSH
27341: EMPTY
27342: LIST
27343: LIST
27344: PUSH
27345: LD_INT 33
27347: PUSH
27348: LD_INT 3
27350: PUSH
27351: EMPTY
27352: LIST
27353: LIST
27354: PUSH
27355: LD_INT 91
27357: PUSH
27358: LD_VAR 0 1
27362: PUSH
27363: LD_EXP 108
27367: PUSH
27368: EMPTY
27369: LIST
27370: LIST
27371: LIST
27372: PUSH
27373: LD_INT 50
27375: PUSH
27376: EMPTY
27377: LIST
27378: PUSH
27379: EMPTY
27380: LIST
27381: LIST
27382: LIST
27383: LIST
27384: PPUSH
27385: CALL_OW 69
27389: ST_TO_ADDR
// if not tmp then
27390: LD_VAR 0 2
27394: NOT
27395: IFFALSE 27399
// continue ;
27397: GO 27194
// HackLink ( i , tmp ) ;
27399: LD_VAR 0 1
27403: PPUSH
27404: LD_VAR 0 2
27408: PPUSH
27409: CALL 27556 0 2
// end ;
27413: GO 27194
27415: POP
27416: POP
// end ;
27417: PPOPN 2
27419: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
27420: LD_INT 0
27422: PPUSH
27423: PPUSH
27424: PPUSH
// if not hack in hackTanks then
27425: LD_VAR 0 1
27429: PUSH
27430: LD_EXP 105
27434: IN
27435: NOT
27436: IFFALSE 27440
// exit ;
27438: GO 27551
// index := GetElementIndex ( hackTanks , hack ) ;
27440: LD_ADDR_VAR 0 4
27444: PUSH
27445: LD_EXP 105
27449: PPUSH
27450: LD_VAR 0 1
27454: PPUSH
27455: CALL 35025 0 2
27459: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
27460: LD_EXP 106
27464: PUSH
27465: LD_VAR 0 4
27469: ARRAY
27470: IFFALSE 27551
// begin for i in hackTanksCaptured [ index ] do
27472: LD_ADDR_VAR 0 3
27476: PUSH
27477: LD_EXP 106
27481: PUSH
27482: LD_VAR 0 4
27486: ARRAY
27487: PUSH
27488: FOR_IN
27489: IFFALSE 27515
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
27491: LD_VAR 0 3
27495: PUSH
27496: LD_INT 1
27498: ARRAY
27499: PPUSH
27500: LD_VAR 0 3
27504: PUSH
27505: LD_INT 2
27507: ARRAY
27508: PPUSH
27509: CALL_OW 235
27513: GO 27488
27515: POP
27516: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
27517: LD_ADDR_EXP 106
27521: PUSH
27522: LD_EXP 106
27526: PPUSH
27527: LD_VAR 0 4
27531: PPUSH
27532: EMPTY
27533: PPUSH
27534: CALL_OW 1
27538: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
27539: LD_VAR 0 1
27543: PPUSH
27544: LD_INT 0
27546: PPUSH
27547: CALL_OW 505
// end ; end ;
27551: LD_VAR 0 2
27555: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
27556: LD_INT 0
27558: PPUSH
27559: PPUSH
27560: PPUSH
// if not hack in hackTanks or not vehicles then
27561: LD_VAR 0 1
27565: PUSH
27566: LD_EXP 105
27570: IN
27571: NOT
27572: PUSH
27573: LD_VAR 0 2
27577: NOT
27578: OR
27579: IFFALSE 27583
// exit ;
27581: GO 27858
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
27583: LD_ADDR_VAR 0 2
27587: PUSH
27588: LD_VAR 0 1
27592: PPUSH
27593: LD_VAR 0 2
27597: PPUSH
27598: LD_INT 1
27600: PPUSH
27601: LD_INT 1
27603: PPUSH
27604: CALL 35675 0 4
27608: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
27609: LD_ADDR_VAR 0 5
27613: PUSH
27614: LD_EXP 105
27618: PPUSH
27619: LD_VAR 0 1
27623: PPUSH
27624: CALL 35025 0 2
27628: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
27629: LD_EXP 106
27633: PUSH
27634: LD_VAR 0 5
27638: ARRAY
27639: PUSH
27640: LD_EXP 107
27644: LESS
27645: IFFALSE 27834
// begin for i := 1 to vehicles do
27647: LD_ADDR_VAR 0 4
27651: PUSH
27652: DOUBLE
27653: LD_INT 1
27655: DEC
27656: ST_TO_ADDR
27657: LD_VAR 0 2
27661: PUSH
27662: FOR_TO
27663: IFFALSE 27832
// begin if hackTanksCaptured [ index ] = hackLimit then
27665: LD_EXP 106
27669: PUSH
27670: LD_VAR 0 5
27674: ARRAY
27675: PUSH
27676: LD_EXP 107
27680: EQUAL
27681: IFFALSE 27685
// break ;
27683: GO 27832
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
27685: LD_ADDR_EXP 109
27689: PUSH
27690: LD_EXP 109
27694: PPUSH
27695: LD_VAR 0 5
27699: PPUSH
27700: LD_EXP 109
27704: PUSH
27705: LD_VAR 0 5
27709: ARRAY
27710: PUSH
27711: LD_INT 1
27713: PLUS
27714: PPUSH
27715: CALL_OW 1
27719: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
27720: LD_ADDR_EXP 106
27724: PUSH
27725: LD_EXP 106
27729: PPUSH
27730: LD_VAR 0 5
27734: PUSH
27735: LD_EXP 106
27739: PUSH
27740: LD_VAR 0 5
27744: ARRAY
27745: PUSH
27746: LD_INT 1
27748: PLUS
27749: PUSH
27750: EMPTY
27751: LIST
27752: LIST
27753: PPUSH
27754: LD_VAR 0 2
27758: PUSH
27759: LD_VAR 0 4
27763: ARRAY
27764: PUSH
27765: LD_VAR 0 2
27769: PUSH
27770: LD_VAR 0 4
27774: ARRAY
27775: PPUSH
27776: CALL_OW 255
27780: PUSH
27781: EMPTY
27782: LIST
27783: LIST
27784: PPUSH
27785: CALL 35240 0 3
27789: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
27790: LD_VAR 0 2
27794: PUSH
27795: LD_VAR 0 4
27799: ARRAY
27800: PPUSH
27801: LD_VAR 0 1
27805: PPUSH
27806: CALL_OW 255
27810: PPUSH
27811: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
27815: LD_VAR 0 2
27819: PUSH
27820: LD_VAR 0 4
27824: ARRAY
27825: PPUSH
27826: CALL_OW 141
// end ;
27830: GO 27662
27832: POP
27833: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
27834: LD_VAR 0 1
27838: PPUSH
27839: LD_EXP 106
27843: PUSH
27844: LD_VAR 0 5
27848: ARRAY
27849: PUSH
27850: LD_INT 0
27852: PLUS
27853: PPUSH
27854: CALL_OW 505
// end ;
27858: LD_VAR 0 3
27862: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
27863: LD_INT 0
27865: PPUSH
27866: PPUSH
27867: PPUSH
27868: PPUSH
// if not hack in hackTanks then
27869: LD_VAR 0 1
27873: PUSH
27874: LD_EXP 105
27878: IN
27879: NOT
27880: IFFALSE 27884
// exit ;
27882: GO 28124
// index := GetElementIndex ( hackTanks , hack ) ;
27884: LD_ADDR_VAR 0 4
27888: PUSH
27889: LD_EXP 105
27893: PPUSH
27894: LD_VAR 0 1
27898: PPUSH
27899: CALL 35025 0 2
27903: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
27904: LD_ADDR_VAR 0 3
27908: PUSH
27909: DOUBLE
27910: LD_EXP 106
27914: PUSH
27915: LD_VAR 0 4
27919: ARRAY
27920: INC
27921: ST_TO_ADDR
27922: LD_INT 1
27924: PUSH
27925: FOR_DOWNTO
27926: IFFALSE 28098
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
27928: LD_ADDR_VAR 0 5
27932: PUSH
27933: LD_EXP 106
27937: PUSH
27938: LD_VAR 0 4
27942: ARRAY
27943: PUSH
27944: LD_VAR 0 3
27948: ARRAY
27949: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
27950: LD_VAR 0 5
27954: PUSH
27955: LD_INT 1
27957: ARRAY
27958: PPUSH
27959: CALL_OW 302
27963: NOT
27964: PUSH
27965: LD_VAR 0 5
27969: PUSH
27970: LD_INT 1
27972: ARRAY
27973: PPUSH
27974: CALL_OW 255
27978: PUSH
27979: LD_VAR 0 1
27983: PPUSH
27984: CALL_OW 255
27988: NONEQUAL
27989: OR
27990: IFFALSE 28096
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
27992: LD_VAR 0 5
27996: PUSH
27997: LD_INT 1
27999: ARRAY
28000: PPUSH
28001: CALL_OW 305
28005: PUSH
28006: LD_VAR 0 5
28010: PUSH
28011: LD_INT 1
28013: ARRAY
28014: PPUSH
28015: CALL_OW 255
28019: PUSH
28020: LD_VAR 0 1
28024: PPUSH
28025: CALL_OW 255
28029: EQUAL
28030: AND
28031: IFFALSE 28055
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
28033: LD_VAR 0 5
28037: PUSH
28038: LD_INT 1
28040: ARRAY
28041: PPUSH
28042: LD_VAR 0 5
28046: PUSH
28047: LD_INT 2
28049: ARRAY
28050: PPUSH
28051: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
28055: LD_ADDR_EXP 106
28059: PUSH
28060: LD_EXP 106
28064: PPUSH
28065: LD_VAR 0 4
28069: PPUSH
28070: LD_EXP 106
28074: PUSH
28075: LD_VAR 0 4
28079: ARRAY
28080: PPUSH
28081: LD_VAR 0 3
28085: PPUSH
28086: CALL_OW 3
28090: PPUSH
28091: CALL_OW 1
28095: ST_TO_ADDR
// end ; end ;
28096: GO 27925
28098: POP
28099: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
28100: LD_VAR 0 1
28104: PPUSH
28105: LD_EXP 106
28109: PUSH
28110: LD_VAR 0 4
28114: ARRAY
28115: PUSH
28116: LD_INT 0
28118: PLUS
28119: PPUSH
28120: CALL_OW 505
// end ;
28124: LD_VAR 0 2
28128: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
28129: LD_INT 0
28131: PPUSH
28132: PPUSH
28133: PPUSH
28134: PPUSH
// if not hack in hackTanks then
28135: LD_VAR 0 1
28139: PUSH
28140: LD_EXP 105
28144: IN
28145: NOT
28146: IFFALSE 28150
// exit ;
28148: GO 28235
// index := GetElementIndex ( hackTanks , hack ) ;
28150: LD_ADDR_VAR 0 5
28154: PUSH
28155: LD_EXP 105
28159: PPUSH
28160: LD_VAR 0 1
28164: PPUSH
28165: CALL 35025 0 2
28169: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
28170: LD_ADDR_VAR 0 4
28174: PUSH
28175: DOUBLE
28176: LD_INT 1
28178: DEC
28179: ST_TO_ADDR
28180: LD_EXP 106
28184: PUSH
28185: LD_VAR 0 5
28189: ARRAY
28190: PUSH
28191: FOR_TO
28192: IFFALSE 28233
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
28194: LD_EXP 106
28198: PUSH
28199: LD_VAR 0 5
28203: ARRAY
28204: PUSH
28205: LD_VAR 0 4
28209: ARRAY
28210: PUSH
28211: LD_INT 1
28213: ARRAY
28214: PUSH
28215: LD_VAR 0 2
28219: EQUAL
28220: IFFALSE 28231
// KillUnit ( vehicle ) ;
28222: LD_VAR 0 2
28226: PPUSH
28227: CALL_OW 66
28231: GO 28191
28233: POP
28234: POP
// end ;
28235: LD_VAR 0 3
28239: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
28240: LD_EXP 110
28244: NOT
28245: IFFALSE 28280
28247: GO 28249
28249: DISABLE
// begin initMiner := true ;
28250: LD_ADDR_EXP 110
28254: PUSH
28255: LD_INT 1
28257: ST_TO_ADDR
// minersList := [ ] ;
28258: LD_ADDR_EXP 111
28262: PUSH
28263: EMPTY
28264: ST_TO_ADDR
// minerMinesList := [ ] ;
28265: LD_ADDR_EXP 112
28269: PUSH
28270: EMPTY
28271: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
28272: LD_ADDR_EXP 113
28276: PUSH
28277: LD_INT 5
28279: ST_TO_ADDR
// end ;
28280: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
28281: LD_EXP 110
28285: PUSH
28286: LD_INT 34
28288: PUSH
28289: LD_EXP 33
28293: PUSH
28294: EMPTY
28295: LIST
28296: LIST
28297: PPUSH
28298: CALL_OW 69
28302: AND
28303: IFFALSE 28766
28305: GO 28307
28307: DISABLE
28308: LD_INT 0
28310: PPUSH
28311: PPUSH
28312: PPUSH
28313: PPUSH
// begin enable ;
28314: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
28315: LD_ADDR_VAR 0 1
28319: PUSH
28320: LD_INT 34
28322: PUSH
28323: LD_EXP 33
28327: PUSH
28328: EMPTY
28329: LIST
28330: LIST
28331: PPUSH
28332: CALL_OW 69
28336: PUSH
28337: FOR_IN
28338: IFFALSE 28410
// begin if not i in minersList then
28340: LD_VAR 0 1
28344: PUSH
28345: LD_EXP 111
28349: IN
28350: NOT
28351: IFFALSE 28408
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
28353: LD_ADDR_EXP 111
28357: PUSH
28358: LD_EXP 111
28362: PPUSH
28363: LD_EXP 111
28367: PUSH
28368: LD_INT 1
28370: PLUS
28371: PPUSH
28372: LD_VAR 0 1
28376: PPUSH
28377: CALL_OW 1
28381: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
28382: LD_ADDR_EXP 112
28386: PUSH
28387: LD_EXP 112
28391: PPUSH
28392: LD_EXP 112
28396: PUSH
28397: LD_INT 1
28399: PLUS
28400: PPUSH
28401: EMPTY
28402: PPUSH
28403: CALL_OW 1
28407: ST_TO_ADDR
// end end ;
28408: GO 28337
28410: POP
28411: POP
// for i := minerMinesList downto 1 do
28412: LD_ADDR_VAR 0 1
28416: PUSH
28417: DOUBLE
28418: LD_EXP 112
28422: INC
28423: ST_TO_ADDR
28424: LD_INT 1
28426: PUSH
28427: FOR_DOWNTO
28428: IFFALSE 28764
// begin if IsLive ( minersList [ i ] ) then
28430: LD_EXP 111
28434: PUSH
28435: LD_VAR 0 1
28439: ARRAY
28440: PPUSH
28441: CALL_OW 300
28445: IFFALSE 28473
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
28447: LD_EXP 111
28451: PUSH
28452: LD_VAR 0 1
28456: ARRAY
28457: PPUSH
28458: LD_EXP 112
28462: PUSH
28463: LD_VAR 0 1
28467: ARRAY
28468: PPUSH
28469: CALL_OW 505
// if not minerMinesList [ i ] then
28473: LD_EXP 112
28477: PUSH
28478: LD_VAR 0 1
28482: ARRAY
28483: NOT
28484: IFFALSE 28488
// continue ;
28486: GO 28427
// for j := minerMinesList [ i ] downto 1 do
28488: LD_ADDR_VAR 0 2
28492: PUSH
28493: DOUBLE
28494: LD_EXP 112
28498: PUSH
28499: LD_VAR 0 1
28503: ARRAY
28504: INC
28505: ST_TO_ADDR
28506: LD_INT 1
28508: PUSH
28509: FOR_DOWNTO
28510: IFFALSE 28760
// begin side := GetSide ( minersList [ i ] ) ;
28512: LD_ADDR_VAR 0 3
28516: PUSH
28517: LD_EXP 111
28521: PUSH
28522: LD_VAR 0 1
28526: ARRAY
28527: PPUSH
28528: CALL_OW 255
28532: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
28533: LD_ADDR_VAR 0 4
28537: PUSH
28538: LD_EXP 112
28542: PUSH
28543: LD_VAR 0 1
28547: ARRAY
28548: PUSH
28549: LD_VAR 0 2
28553: ARRAY
28554: PUSH
28555: LD_INT 1
28557: ARRAY
28558: PPUSH
28559: LD_EXP 112
28563: PUSH
28564: LD_VAR 0 1
28568: ARRAY
28569: PUSH
28570: LD_VAR 0 2
28574: ARRAY
28575: PUSH
28576: LD_INT 2
28578: ARRAY
28579: PPUSH
28580: CALL_OW 428
28584: ST_TO_ADDR
// if not tmp then
28585: LD_VAR 0 4
28589: NOT
28590: IFFALSE 28594
// continue ;
28592: GO 28509
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
28594: LD_VAR 0 4
28598: PUSH
28599: LD_INT 81
28601: PUSH
28602: LD_VAR 0 3
28606: PUSH
28607: EMPTY
28608: LIST
28609: LIST
28610: PPUSH
28611: CALL_OW 69
28615: IN
28616: PUSH
28617: LD_EXP 112
28621: PUSH
28622: LD_VAR 0 1
28626: ARRAY
28627: PUSH
28628: LD_VAR 0 2
28632: ARRAY
28633: PUSH
28634: LD_INT 1
28636: ARRAY
28637: PPUSH
28638: LD_EXP 112
28642: PUSH
28643: LD_VAR 0 1
28647: ARRAY
28648: PUSH
28649: LD_VAR 0 2
28653: ARRAY
28654: PUSH
28655: LD_INT 2
28657: ARRAY
28658: PPUSH
28659: CALL_OW 458
28663: AND
28664: IFFALSE 28758
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
28666: LD_EXP 112
28670: PUSH
28671: LD_VAR 0 1
28675: ARRAY
28676: PUSH
28677: LD_VAR 0 2
28681: ARRAY
28682: PUSH
28683: LD_INT 1
28685: ARRAY
28686: PPUSH
28687: LD_EXP 112
28691: PUSH
28692: LD_VAR 0 1
28696: ARRAY
28697: PUSH
28698: LD_VAR 0 2
28702: ARRAY
28703: PUSH
28704: LD_INT 2
28706: ARRAY
28707: PPUSH
28708: LD_VAR 0 3
28712: PPUSH
28713: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
28717: LD_ADDR_EXP 112
28721: PUSH
28722: LD_EXP 112
28726: PPUSH
28727: LD_VAR 0 1
28731: PPUSH
28732: LD_EXP 112
28736: PUSH
28737: LD_VAR 0 1
28741: ARRAY
28742: PPUSH
28743: LD_VAR 0 2
28747: PPUSH
28748: CALL_OW 3
28752: PPUSH
28753: CALL_OW 1
28757: ST_TO_ADDR
// end ; end ;
28758: GO 28509
28760: POP
28761: POP
// end ;
28762: GO 28427
28764: POP
28765: POP
// end ;
28766: PPOPN 4
28768: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
28769: LD_INT 0
28771: PPUSH
28772: PPUSH
// result := false ;
28773: LD_ADDR_VAR 0 4
28777: PUSH
28778: LD_INT 0
28780: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
28781: LD_VAR 0 1
28785: PPUSH
28786: CALL_OW 264
28790: PUSH
28791: LD_EXP 33
28795: EQUAL
28796: NOT
28797: IFFALSE 28801
// exit ;
28799: GO 29041
// index := GetElementIndex ( minersList , unit ) ;
28801: LD_ADDR_VAR 0 5
28805: PUSH
28806: LD_EXP 111
28810: PPUSH
28811: LD_VAR 0 1
28815: PPUSH
28816: CALL 35025 0 2
28820: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
28821: LD_EXP 112
28825: PUSH
28826: LD_VAR 0 5
28830: ARRAY
28831: PUSH
28832: LD_EXP 113
28836: GREATEREQUAL
28837: IFFALSE 28841
// exit ;
28839: GO 29041
// ComMoveXY ( unit , x , y ) ;
28841: LD_VAR 0 1
28845: PPUSH
28846: LD_VAR 0 2
28850: PPUSH
28851: LD_VAR 0 3
28855: PPUSH
28856: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
28860: LD_INT 35
28862: PPUSH
28863: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
28867: LD_VAR 0 1
28871: PPUSH
28872: LD_VAR 0 2
28876: PPUSH
28877: LD_VAR 0 3
28881: PPUSH
28882: CALL 65744 0 3
28886: NOT
28887: PUSH
28888: LD_VAR 0 1
28892: PPUSH
28893: CALL_OW 314
28897: AND
28898: IFFALSE 28902
// exit ;
28900: GO 29041
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
28902: LD_VAR 0 2
28906: PPUSH
28907: LD_VAR 0 3
28911: PPUSH
28912: CALL_OW 428
28916: PUSH
28917: LD_VAR 0 1
28921: EQUAL
28922: PUSH
28923: LD_VAR 0 1
28927: PPUSH
28928: CALL_OW 314
28932: NOT
28933: AND
28934: IFFALSE 28860
// PlaySoundXY ( x , y , PlantMine ) ;
28936: LD_VAR 0 2
28940: PPUSH
28941: LD_VAR 0 3
28945: PPUSH
28946: LD_STRING PlantMine
28948: PPUSH
28949: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
28953: LD_VAR 0 2
28957: PPUSH
28958: LD_VAR 0 3
28962: PPUSH
28963: LD_VAR 0 1
28967: PPUSH
28968: CALL_OW 255
28972: PPUSH
28973: LD_INT 0
28975: PPUSH
28976: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
28980: LD_ADDR_EXP 112
28984: PUSH
28985: LD_EXP 112
28989: PPUSH
28990: LD_VAR 0 5
28994: PUSH
28995: LD_EXP 112
28999: PUSH
29000: LD_VAR 0 5
29004: ARRAY
29005: PUSH
29006: LD_INT 1
29008: PLUS
29009: PUSH
29010: EMPTY
29011: LIST
29012: LIST
29013: PPUSH
29014: LD_VAR 0 2
29018: PUSH
29019: LD_VAR 0 3
29023: PUSH
29024: EMPTY
29025: LIST
29026: LIST
29027: PPUSH
29028: CALL 35240 0 3
29032: ST_TO_ADDR
// result := true ;
29033: LD_ADDR_VAR 0 4
29037: PUSH
29038: LD_INT 1
29040: ST_TO_ADDR
// end ;
29041: LD_VAR 0 4
29045: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
29046: LD_INT 0
29048: PPUSH
29049: PPUSH
29050: PPUSH
// if not unit in minersList then
29051: LD_VAR 0 1
29055: PUSH
29056: LD_EXP 111
29060: IN
29061: NOT
29062: IFFALSE 29066
// exit ;
29064: GO 29458
// index := GetElementIndex ( minersList , unit ) ;
29066: LD_ADDR_VAR 0 6
29070: PUSH
29071: LD_EXP 111
29075: PPUSH
29076: LD_VAR 0 1
29080: PPUSH
29081: CALL 35025 0 2
29085: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
29086: LD_ADDR_VAR 0 5
29090: PUSH
29091: DOUBLE
29092: LD_EXP 112
29096: PUSH
29097: LD_VAR 0 6
29101: ARRAY
29102: INC
29103: ST_TO_ADDR
29104: LD_INT 1
29106: PUSH
29107: FOR_DOWNTO
29108: IFFALSE 29269
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
29110: LD_EXP 112
29114: PUSH
29115: LD_VAR 0 6
29119: ARRAY
29120: PUSH
29121: LD_VAR 0 5
29125: ARRAY
29126: PUSH
29127: LD_INT 1
29129: ARRAY
29130: PUSH
29131: LD_VAR 0 2
29135: EQUAL
29136: PUSH
29137: LD_EXP 112
29141: PUSH
29142: LD_VAR 0 6
29146: ARRAY
29147: PUSH
29148: LD_VAR 0 5
29152: ARRAY
29153: PUSH
29154: LD_INT 2
29156: ARRAY
29157: PUSH
29158: LD_VAR 0 3
29162: EQUAL
29163: AND
29164: IFFALSE 29267
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
29166: LD_EXP 112
29170: PUSH
29171: LD_VAR 0 6
29175: ARRAY
29176: PUSH
29177: LD_VAR 0 5
29181: ARRAY
29182: PUSH
29183: LD_INT 1
29185: ARRAY
29186: PPUSH
29187: LD_EXP 112
29191: PUSH
29192: LD_VAR 0 6
29196: ARRAY
29197: PUSH
29198: LD_VAR 0 5
29202: ARRAY
29203: PUSH
29204: LD_INT 2
29206: ARRAY
29207: PPUSH
29208: LD_VAR 0 1
29212: PPUSH
29213: CALL_OW 255
29217: PPUSH
29218: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
29222: LD_ADDR_EXP 112
29226: PUSH
29227: LD_EXP 112
29231: PPUSH
29232: LD_VAR 0 6
29236: PPUSH
29237: LD_EXP 112
29241: PUSH
29242: LD_VAR 0 6
29246: ARRAY
29247: PPUSH
29248: LD_VAR 0 5
29252: PPUSH
29253: CALL_OW 3
29257: PPUSH
29258: CALL_OW 1
29262: ST_TO_ADDR
// exit ;
29263: POP
29264: POP
29265: GO 29458
// end ; end ;
29267: GO 29107
29269: POP
29270: POP
// for i := minerMinesList [ index ] downto 1 do
29271: LD_ADDR_VAR 0 5
29275: PUSH
29276: DOUBLE
29277: LD_EXP 112
29281: PUSH
29282: LD_VAR 0 6
29286: ARRAY
29287: INC
29288: ST_TO_ADDR
29289: LD_INT 1
29291: PUSH
29292: FOR_DOWNTO
29293: IFFALSE 29456
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
29295: LD_EXP 112
29299: PUSH
29300: LD_VAR 0 6
29304: ARRAY
29305: PUSH
29306: LD_VAR 0 5
29310: ARRAY
29311: PUSH
29312: LD_INT 1
29314: ARRAY
29315: PPUSH
29316: LD_EXP 112
29320: PUSH
29321: LD_VAR 0 6
29325: ARRAY
29326: PUSH
29327: LD_VAR 0 5
29331: ARRAY
29332: PUSH
29333: LD_INT 2
29335: ARRAY
29336: PPUSH
29337: LD_VAR 0 2
29341: PPUSH
29342: LD_VAR 0 3
29346: PPUSH
29347: CALL_OW 298
29351: PUSH
29352: LD_INT 6
29354: LESS
29355: IFFALSE 29454
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
29357: LD_EXP 112
29361: PUSH
29362: LD_VAR 0 6
29366: ARRAY
29367: PUSH
29368: LD_VAR 0 5
29372: ARRAY
29373: PUSH
29374: LD_INT 1
29376: ARRAY
29377: PPUSH
29378: LD_EXP 112
29382: PUSH
29383: LD_VAR 0 6
29387: ARRAY
29388: PUSH
29389: LD_VAR 0 5
29393: ARRAY
29394: PUSH
29395: LD_INT 2
29397: ARRAY
29398: PPUSH
29399: LD_VAR 0 1
29403: PPUSH
29404: CALL_OW 255
29408: PPUSH
29409: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
29413: LD_ADDR_EXP 112
29417: PUSH
29418: LD_EXP 112
29422: PPUSH
29423: LD_VAR 0 6
29427: PPUSH
29428: LD_EXP 112
29432: PUSH
29433: LD_VAR 0 6
29437: ARRAY
29438: PPUSH
29439: LD_VAR 0 5
29443: PPUSH
29444: CALL_OW 3
29448: PPUSH
29449: CALL_OW 1
29453: ST_TO_ADDR
// end ; end ;
29454: GO 29292
29456: POP
29457: POP
// end ;
29458: LD_VAR 0 4
29462: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
29463: LD_INT 0
29465: PPUSH
29466: PPUSH
29467: PPUSH
29468: PPUSH
29469: PPUSH
29470: PPUSH
29471: PPUSH
29472: PPUSH
29473: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
29474: LD_VAR 0 1
29478: PPUSH
29479: CALL_OW 264
29483: PUSH
29484: LD_EXP 33
29488: EQUAL
29489: NOT
29490: PUSH
29491: LD_VAR 0 1
29495: PUSH
29496: LD_EXP 111
29500: IN
29501: NOT
29502: OR
29503: IFFALSE 29507
// exit ;
29505: GO 29829
// index := GetElementIndex ( minersList , unit ) ;
29507: LD_ADDR_VAR 0 6
29511: PUSH
29512: LD_EXP 111
29516: PPUSH
29517: LD_VAR 0 1
29521: PPUSH
29522: CALL 35025 0 2
29526: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
29527: LD_ADDR_VAR 0 8
29531: PUSH
29532: LD_EXP 113
29536: PUSH
29537: LD_EXP 112
29541: PUSH
29542: LD_VAR 0 6
29546: ARRAY
29547: MINUS
29548: ST_TO_ADDR
// if not minesFreeAmount then
29549: LD_VAR 0 8
29553: NOT
29554: IFFALSE 29558
// exit ;
29556: GO 29829
// tmp := [ ] ;
29558: LD_ADDR_VAR 0 7
29562: PUSH
29563: EMPTY
29564: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
29565: LD_ADDR_VAR 0 5
29569: PUSH
29570: DOUBLE
29571: LD_INT 1
29573: DEC
29574: ST_TO_ADDR
29575: LD_VAR 0 8
29579: PUSH
29580: FOR_TO
29581: IFFALSE 29776
// begin _d := rand ( 0 , 5 ) ;
29583: LD_ADDR_VAR 0 11
29587: PUSH
29588: LD_INT 0
29590: PPUSH
29591: LD_INT 5
29593: PPUSH
29594: CALL_OW 12
29598: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
29599: LD_ADDR_VAR 0 12
29603: PUSH
29604: LD_INT 2
29606: PPUSH
29607: LD_INT 6
29609: PPUSH
29610: CALL_OW 12
29614: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
29615: LD_ADDR_VAR 0 9
29619: PUSH
29620: LD_VAR 0 2
29624: PPUSH
29625: LD_VAR 0 11
29629: PPUSH
29630: LD_VAR 0 12
29634: PPUSH
29635: CALL_OW 272
29639: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
29640: LD_ADDR_VAR 0 10
29644: PUSH
29645: LD_VAR 0 3
29649: PPUSH
29650: LD_VAR 0 11
29654: PPUSH
29655: LD_VAR 0 12
29659: PPUSH
29660: CALL_OW 273
29664: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
29665: LD_VAR 0 9
29669: PPUSH
29670: LD_VAR 0 10
29674: PPUSH
29675: CALL_OW 488
29679: PUSH
29680: LD_VAR 0 9
29684: PUSH
29685: LD_VAR 0 10
29689: PUSH
29690: EMPTY
29691: LIST
29692: LIST
29693: PUSH
29694: LD_VAR 0 7
29698: IN
29699: NOT
29700: AND
29701: PUSH
29702: LD_VAR 0 9
29706: PPUSH
29707: LD_VAR 0 10
29711: PPUSH
29712: CALL_OW 458
29716: NOT
29717: AND
29718: IFFALSE 29760
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
29720: LD_ADDR_VAR 0 7
29724: PUSH
29725: LD_VAR 0 7
29729: PPUSH
29730: LD_VAR 0 7
29734: PUSH
29735: LD_INT 1
29737: PLUS
29738: PPUSH
29739: LD_VAR 0 9
29743: PUSH
29744: LD_VAR 0 10
29748: PUSH
29749: EMPTY
29750: LIST
29751: LIST
29752: PPUSH
29753: CALL_OW 1
29757: ST_TO_ADDR
29758: GO 29774
// i := i - 1 ;
29760: LD_ADDR_VAR 0 5
29764: PUSH
29765: LD_VAR 0 5
29769: PUSH
29770: LD_INT 1
29772: MINUS
29773: ST_TO_ADDR
// end ;
29774: GO 29580
29776: POP
29777: POP
// for i in tmp do
29778: LD_ADDR_VAR 0 5
29782: PUSH
29783: LD_VAR 0 7
29787: PUSH
29788: FOR_IN
29789: IFFALSE 29827
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
29791: LD_VAR 0 1
29795: PPUSH
29796: LD_VAR 0 5
29800: PUSH
29801: LD_INT 1
29803: ARRAY
29804: PPUSH
29805: LD_VAR 0 5
29809: PUSH
29810: LD_INT 2
29812: ARRAY
29813: PPUSH
29814: CALL 28769 0 3
29818: NOT
29819: IFFALSE 29825
// exit ;
29821: POP
29822: POP
29823: GO 29829
29825: GO 29788
29827: POP
29828: POP
// end ;
29829: LD_VAR 0 4
29833: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
29834: LD_INT 0
29836: PPUSH
29837: PPUSH
29838: PPUSH
29839: PPUSH
29840: PPUSH
29841: PPUSH
29842: PPUSH
// if not GetClass ( unit ) = class_sniper then
29843: LD_VAR 0 1
29847: PPUSH
29848: CALL_OW 257
29852: PUSH
29853: LD_INT 5
29855: EQUAL
29856: NOT
29857: IFFALSE 29861
// exit ;
29859: GO 30249
// dist := 8 ;
29861: LD_ADDR_VAR 0 5
29865: PUSH
29866: LD_INT 8
29868: ST_TO_ADDR
// viewRange := 12 ;
29869: LD_ADDR_VAR 0 7
29873: PUSH
29874: LD_INT 12
29876: ST_TO_ADDR
// side := GetSide ( unit ) ;
29877: LD_ADDR_VAR 0 6
29881: PUSH
29882: LD_VAR 0 1
29886: PPUSH
29887: CALL_OW 255
29891: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
29892: LD_INT 61
29894: PPUSH
29895: LD_VAR 0 6
29899: PPUSH
29900: CALL_OW 321
29904: PUSH
29905: LD_INT 2
29907: EQUAL
29908: IFFALSE 29918
// viewRange := 16 ;
29910: LD_ADDR_VAR 0 7
29914: PUSH
29915: LD_INT 16
29917: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
29918: LD_VAR 0 1
29922: PPUSH
29923: LD_VAR 0 2
29927: PPUSH
29928: LD_VAR 0 3
29932: PPUSH
29933: CALL_OW 297
29937: PUSH
29938: LD_VAR 0 5
29942: GREATER
29943: IFFALSE 30022
// begin ComMoveXY ( unit , x , y ) ;
29945: LD_VAR 0 1
29949: PPUSH
29950: LD_VAR 0 2
29954: PPUSH
29955: LD_VAR 0 3
29959: PPUSH
29960: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
29964: LD_INT 35
29966: PPUSH
29967: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
29971: LD_VAR 0 1
29975: PPUSH
29976: LD_VAR 0 2
29980: PPUSH
29981: LD_VAR 0 3
29985: PPUSH
29986: CALL 65744 0 3
29990: NOT
29991: IFFALSE 29995
// exit ;
29993: GO 30249
// until GetDistUnitXY ( unit , x , y ) < dist ;
29995: LD_VAR 0 1
29999: PPUSH
30000: LD_VAR 0 2
30004: PPUSH
30005: LD_VAR 0 3
30009: PPUSH
30010: CALL_OW 297
30014: PUSH
30015: LD_VAR 0 5
30019: LESS
30020: IFFALSE 29964
// end ; ComTurnXY ( unit , x , y ) ;
30022: LD_VAR 0 1
30026: PPUSH
30027: LD_VAR 0 2
30031: PPUSH
30032: LD_VAR 0 3
30036: PPUSH
30037: CALL_OW 118
// wait ( 5 ) ;
30041: LD_INT 5
30043: PPUSH
30044: CALL_OW 67
// _d := GetDir ( unit ) ;
30048: LD_ADDR_VAR 0 10
30052: PUSH
30053: LD_VAR 0 1
30057: PPUSH
30058: CALL_OW 254
30062: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
30063: LD_ADDR_VAR 0 8
30067: PUSH
30068: LD_VAR 0 1
30072: PPUSH
30073: CALL_OW 250
30077: PPUSH
30078: LD_VAR 0 10
30082: PPUSH
30083: LD_VAR 0 5
30087: PPUSH
30088: CALL_OW 272
30092: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
30093: LD_ADDR_VAR 0 9
30097: PUSH
30098: LD_VAR 0 1
30102: PPUSH
30103: CALL_OW 251
30107: PPUSH
30108: LD_VAR 0 10
30112: PPUSH
30113: LD_VAR 0 5
30117: PPUSH
30118: CALL_OW 273
30122: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30123: LD_VAR 0 8
30127: PPUSH
30128: LD_VAR 0 9
30132: PPUSH
30133: CALL_OW 488
30137: NOT
30138: IFFALSE 30142
// exit ;
30140: GO 30249
// ComAnimCustom ( unit , 1 ) ;
30142: LD_VAR 0 1
30146: PPUSH
30147: LD_INT 1
30149: PPUSH
30150: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
30154: LD_VAR 0 8
30158: PPUSH
30159: LD_VAR 0 9
30163: PPUSH
30164: LD_VAR 0 6
30168: PPUSH
30169: LD_VAR 0 7
30173: PPUSH
30174: CALL_OW 330
// repeat wait ( 1 ) ;
30178: LD_INT 1
30180: PPUSH
30181: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
30185: LD_VAR 0 1
30189: PPUSH
30190: CALL_OW 316
30194: PUSH
30195: LD_VAR 0 1
30199: PPUSH
30200: CALL_OW 314
30204: OR
30205: PUSH
30206: LD_VAR 0 1
30210: PPUSH
30211: CALL_OW 302
30215: NOT
30216: OR
30217: PUSH
30218: LD_VAR 0 1
30222: PPUSH
30223: CALL_OW 301
30227: OR
30228: IFFALSE 30178
// RemoveSeeing ( _x , _y , side ) ;
30230: LD_VAR 0 8
30234: PPUSH
30235: LD_VAR 0 9
30239: PPUSH
30240: LD_VAR 0 6
30244: PPUSH
30245: CALL_OW 331
// end ; end_of_file
30249: LD_VAR 0 4
30253: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
30254: LD_INT 0
30256: PPUSH
30257: PPUSH
// if exist_mode then
30258: LD_VAR 0 2
30262: IFFALSE 30287
// unit := CreateCharacter ( prefix & ident ) else
30264: LD_ADDR_VAR 0 5
30268: PUSH
30269: LD_VAR 0 3
30273: PUSH
30274: LD_VAR 0 1
30278: STR
30279: PPUSH
30280: CALL_OW 34
30284: ST_TO_ADDR
30285: GO 30302
// unit := NewCharacter ( ident ) ;
30287: LD_ADDR_VAR 0 5
30291: PUSH
30292: LD_VAR 0 1
30296: PPUSH
30297: CALL_OW 25
30301: ST_TO_ADDR
// result := unit ;
30302: LD_ADDR_VAR 0 4
30306: PUSH
30307: LD_VAR 0 5
30311: ST_TO_ADDR
// end ;
30312: LD_VAR 0 4
30316: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
30317: LD_INT 0
30319: PPUSH
30320: PPUSH
// if not side or not nation then
30321: LD_VAR 0 1
30325: NOT
30326: PUSH
30327: LD_VAR 0 2
30331: NOT
30332: OR
30333: IFFALSE 30337
// exit ;
30335: GO 31105
// case nation of nation_american :
30337: LD_VAR 0 2
30341: PUSH
30342: LD_INT 1
30344: DOUBLE
30345: EQUAL
30346: IFTRUE 30350
30348: GO 30564
30350: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
30351: LD_ADDR_VAR 0 4
30355: PUSH
30356: LD_INT 35
30358: PUSH
30359: LD_INT 45
30361: PUSH
30362: LD_INT 46
30364: PUSH
30365: LD_INT 47
30367: PUSH
30368: LD_INT 82
30370: PUSH
30371: LD_INT 83
30373: PUSH
30374: LD_INT 84
30376: PUSH
30377: LD_INT 85
30379: PUSH
30380: LD_INT 86
30382: PUSH
30383: LD_INT 1
30385: PUSH
30386: LD_INT 2
30388: PUSH
30389: LD_INT 6
30391: PUSH
30392: LD_INT 15
30394: PUSH
30395: LD_INT 16
30397: PUSH
30398: LD_INT 7
30400: PUSH
30401: LD_INT 12
30403: PUSH
30404: LD_INT 13
30406: PUSH
30407: LD_INT 10
30409: PUSH
30410: LD_INT 14
30412: PUSH
30413: LD_INT 20
30415: PUSH
30416: LD_INT 21
30418: PUSH
30419: LD_INT 22
30421: PUSH
30422: LD_INT 25
30424: PUSH
30425: LD_INT 32
30427: PUSH
30428: LD_INT 27
30430: PUSH
30431: LD_INT 36
30433: PUSH
30434: LD_INT 69
30436: PUSH
30437: LD_INT 39
30439: PUSH
30440: LD_INT 34
30442: PUSH
30443: LD_INT 40
30445: PUSH
30446: LD_INT 48
30448: PUSH
30449: LD_INT 49
30451: PUSH
30452: LD_INT 50
30454: PUSH
30455: LD_INT 51
30457: PUSH
30458: LD_INT 52
30460: PUSH
30461: LD_INT 53
30463: PUSH
30464: LD_INT 54
30466: PUSH
30467: LD_INT 55
30469: PUSH
30470: LD_INT 56
30472: PUSH
30473: LD_INT 57
30475: PUSH
30476: LD_INT 58
30478: PUSH
30479: LD_INT 59
30481: PUSH
30482: LD_INT 60
30484: PUSH
30485: LD_INT 61
30487: PUSH
30488: LD_INT 62
30490: PUSH
30491: LD_INT 80
30493: PUSH
30494: LD_INT 82
30496: PUSH
30497: LD_INT 83
30499: PUSH
30500: LD_INT 84
30502: PUSH
30503: LD_INT 85
30505: PUSH
30506: LD_INT 86
30508: PUSH
30509: EMPTY
30510: LIST
30511: LIST
30512: LIST
30513: LIST
30514: LIST
30515: LIST
30516: LIST
30517: LIST
30518: LIST
30519: LIST
30520: LIST
30521: LIST
30522: LIST
30523: LIST
30524: LIST
30525: LIST
30526: LIST
30527: LIST
30528: LIST
30529: LIST
30530: LIST
30531: LIST
30532: LIST
30533: LIST
30534: LIST
30535: LIST
30536: LIST
30537: LIST
30538: LIST
30539: LIST
30540: LIST
30541: LIST
30542: LIST
30543: LIST
30544: LIST
30545: LIST
30546: LIST
30547: LIST
30548: LIST
30549: LIST
30550: LIST
30551: LIST
30552: LIST
30553: LIST
30554: LIST
30555: LIST
30556: LIST
30557: LIST
30558: LIST
30559: LIST
30560: LIST
30561: ST_TO_ADDR
30562: GO 31029
30564: LD_INT 2
30566: DOUBLE
30567: EQUAL
30568: IFTRUE 30572
30570: GO 30798
30572: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
30573: LD_ADDR_VAR 0 4
30577: PUSH
30578: LD_INT 35
30580: PUSH
30581: LD_INT 45
30583: PUSH
30584: LD_INT 46
30586: PUSH
30587: LD_INT 47
30589: PUSH
30590: LD_INT 82
30592: PUSH
30593: LD_INT 83
30595: PUSH
30596: LD_INT 84
30598: PUSH
30599: LD_INT 85
30601: PUSH
30602: LD_INT 87
30604: PUSH
30605: LD_INT 70
30607: PUSH
30608: LD_INT 1
30610: PUSH
30611: LD_INT 11
30613: PUSH
30614: LD_INT 3
30616: PUSH
30617: LD_INT 4
30619: PUSH
30620: LD_INT 5
30622: PUSH
30623: LD_INT 6
30625: PUSH
30626: LD_INT 15
30628: PUSH
30629: LD_INT 18
30631: PUSH
30632: LD_INT 7
30634: PUSH
30635: LD_INT 17
30637: PUSH
30638: LD_INT 8
30640: PUSH
30641: LD_INT 20
30643: PUSH
30644: LD_INT 21
30646: PUSH
30647: LD_INT 22
30649: PUSH
30650: LD_INT 72
30652: PUSH
30653: LD_INT 26
30655: PUSH
30656: LD_INT 69
30658: PUSH
30659: LD_INT 39
30661: PUSH
30662: LD_INT 40
30664: PUSH
30665: LD_INT 41
30667: PUSH
30668: LD_INT 42
30670: PUSH
30671: LD_INT 43
30673: PUSH
30674: LD_INT 48
30676: PUSH
30677: LD_INT 49
30679: PUSH
30680: LD_INT 50
30682: PUSH
30683: LD_INT 51
30685: PUSH
30686: LD_INT 52
30688: PUSH
30689: LD_INT 53
30691: PUSH
30692: LD_INT 54
30694: PUSH
30695: LD_INT 55
30697: PUSH
30698: LD_INT 56
30700: PUSH
30701: LD_INT 60
30703: PUSH
30704: LD_INT 61
30706: PUSH
30707: LD_INT 62
30709: PUSH
30710: LD_INT 66
30712: PUSH
30713: LD_INT 67
30715: PUSH
30716: LD_INT 68
30718: PUSH
30719: LD_INT 81
30721: PUSH
30722: LD_INT 82
30724: PUSH
30725: LD_INT 83
30727: PUSH
30728: LD_INT 84
30730: PUSH
30731: LD_INT 85
30733: PUSH
30734: LD_INT 87
30736: PUSH
30737: LD_INT 88
30739: PUSH
30740: EMPTY
30741: LIST
30742: LIST
30743: LIST
30744: LIST
30745: LIST
30746: LIST
30747: LIST
30748: LIST
30749: LIST
30750: LIST
30751: LIST
30752: LIST
30753: LIST
30754: LIST
30755: LIST
30756: LIST
30757: LIST
30758: LIST
30759: LIST
30760: LIST
30761: LIST
30762: LIST
30763: LIST
30764: LIST
30765: LIST
30766: LIST
30767: LIST
30768: LIST
30769: LIST
30770: LIST
30771: LIST
30772: LIST
30773: LIST
30774: LIST
30775: LIST
30776: LIST
30777: LIST
30778: LIST
30779: LIST
30780: LIST
30781: LIST
30782: LIST
30783: LIST
30784: LIST
30785: LIST
30786: LIST
30787: LIST
30788: LIST
30789: LIST
30790: LIST
30791: LIST
30792: LIST
30793: LIST
30794: LIST
30795: ST_TO_ADDR
30796: GO 31029
30798: LD_INT 3
30800: DOUBLE
30801: EQUAL
30802: IFTRUE 30806
30804: GO 31028
30806: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
30807: LD_ADDR_VAR 0 4
30811: PUSH
30812: LD_INT 46
30814: PUSH
30815: LD_INT 47
30817: PUSH
30818: LD_INT 1
30820: PUSH
30821: LD_INT 2
30823: PUSH
30824: LD_INT 82
30826: PUSH
30827: LD_INT 83
30829: PUSH
30830: LD_INT 84
30832: PUSH
30833: LD_INT 85
30835: PUSH
30836: LD_INT 86
30838: PUSH
30839: LD_INT 11
30841: PUSH
30842: LD_INT 9
30844: PUSH
30845: LD_INT 20
30847: PUSH
30848: LD_INT 19
30850: PUSH
30851: LD_INT 21
30853: PUSH
30854: LD_INT 24
30856: PUSH
30857: LD_INT 22
30859: PUSH
30860: LD_INT 25
30862: PUSH
30863: LD_INT 28
30865: PUSH
30866: LD_INT 29
30868: PUSH
30869: LD_INT 30
30871: PUSH
30872: LD_INT 31
30874: PUSH
30875: LD_INT 37
30877: PUSH
30878: LD_INT 38
30880: PUSH
30881: LD_INT 32
30883: PUSH
30884: LD_INT 27
30886: PUSH
30887: LD_INT 33
30889: PUSH
30890: LD_INT 69
30892: PUSH
30893: LD_INT 39
30895: PUSH
30896: LD_INT 34
30898: PUSH
30899: LD_INT 40
30901: PUSH
30902: LD_INT 71
30904: PUSH
30905: LD_INT 23
30907: PUSH
30908: LD_INT 44
30910: PUSH
30911: LD_INT 48
30913: PUSH
30914: LD_INT 49
30916: PUSH
30917: LD_INT 50
30919: PUSH
30920: LD_INT 51
30922: PUSH
30923: LD_INT 52
30925: PUSH
30926: LD_INT 53
30928: PUSH
30929: LD_INT 54
30931: PUSH
30932: LD_INT 55
30934: PUSH
30935: LD_INT 56
30937: PUSH
30938: LD_INT 57
30940: PUSH
30941: LD_INT 58
30943: PUSH
30944: LD_INT 59
30946: PUSH
30947: LD_INT 63
30949: PUSH
30950: LD_INT 64
30952: PUSH
30953: LD_INT 65
30955: PUSH
30956: LD_INT 82
30958: PUSH
30959: LD_INT 83
30961: PUSH
30962: LD_INT 84
30964: PUSH
30965: LD_INT 85
30967: PUSH
30968: LD_INT 86
30970: PUSH
30971: EMPTY
30972: LIST
30973: LIST
30974: LIST
30975: LIST
30976: LIST
30977: LIST
30978: LIST
30979: LIST
30980: LIST
30981: LIST
30982: LIST
30983: LIST
30984: LIST
30985: LIST
30986: LIST
30987: LIST
30988: LIST
30989: LIST
30990: LIST
30991: LIST
30992: LIST
30993: LIST
30994: LIST
30995: LIST
30996: LIST
30997: LIST
30998: LIST
30999: LIST
31000: LIST
31001: LIST
31002: LIST
31003: LIST
31004: LIST
31005: LIST
31006: LIST
31007: LIST
31008: LIST
31009: LIST
31010: LIST
31011: LIST
31012: LIST
31013: LIST
31014: LIST
31015: LIST
31016: LIST
31017: LIST
31018: LIST
31019: LIST
31020: LIST
31021: LIST
31022: LIST
31023: LIST
31024: LIST
31025: ST_TO_ADDR
31026: GO 31029
31028: POP
// if state > - 1 and state < 3 then
31029: LD_VAR 0 3
31033: PUSH
31034: LD_INT 1
31036: NEG
31037: GREATER
31038: PUSH
31039: LD_VAR 0 3
31043: PUSH
31044: LD_INT 3
31046: LESS
31047: AND
31048: IFFALSE 31105
// for i in result do
31050: LD_ADDR_VAR 0 5
31054: PUSH
31055: LD_VAR 0 4
31059: PUSH
31060: FOR_IN
31061: IFFALSE 31103
// if GetTech ( i , side ) <> state then
31063: LD_VAR 0 5
31067: PPUSH
31068: LD_VAR 0 1
31072: PPUSH
31073: CALL_OW 321
31077: PUSH
31078: LD_VAR 0 3
31082: NONEQUAL
31083: IFFALSE 31101
// result := result diff i ;
31085: LD_ADDR_VAR 0 4
31089: PUSH
31090: LD_VAR 0 4
31094: PUSH
31095: LD_VAR 0 5
31099: DIFF
31100: ST_TO_ADDR
31101: GO 31060
31103: POP
31104: POP
// end ;
31105: LD_VAR 0 4
31109: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
31110: LD_INT 0
31112: PPUSH
31113: PPUSH
31114: PPUSH
// result := true ;
31115: LD_ADDR_VAR 0 3
31119: PUSH
31120: LD_INT 1
31122: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
31123: LD_ADDR_VAR 0 5
31127: PUSH
31128: LD_VAR 0 2
31132: PPUSH
31133: CALL_OW 480
31137: ST_TO_ADDR
// if not tmp then
31138: LD_VAR 0 5
31142: NOT
31143: IFFALSE 31147
// exit ;
31145: GO 31196
// for i in tmp do
31147: LD_ADDR_VAR 0 4
31151: PUSH
31152: LD_VAR 0 5
31156: PUSH
31157: FOR_IN
31158: IFFALSE 31194
// if GetTech ( i , side ) <> state_researched then
31160: LD_VAR 0 4
31164: PPUSH
31165: LD_VAR 0 1
31169: PPUSH
31170: CALL_OW 321
31174: PUSH
31175: LD_INT 2
31177: NONEQUAL
31178: IFFALSE 31192
// begin result := false ;
31180: LD_ADDR_VAR 0 3
31184: PUSH
31185: LD_INT 0
31187: ST_TO_ADDR
// exit ;
31188: POP
31189: POP
31190: GO 31196
// end ;
31192: GO 31157
31194: POP
31195: POP
// end ;
31196: LD_VAR 0 3
31200: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
31201: LD_INT 0
31203: PPUSH
31204: PPUSH
31205: PPUSH
31206: PPUSH
31207: PPUSH
31208: PPUSH
31209: PPUSH
31210: PPUSH
31211: PPUSH
31212: PPUSH
31213: PPUSH
31214: PPUSH
31215: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
31216: LD_VAR 0 1
31220: NOT
31221: PUSH
31222: LD_VAR 0 1
31226: PPUSH
31227: CALL_OW 257
31231: PUSH
31232: LD_INT 9
31234: NONEQUAL
31235: OR
31236: IFFALSE 31240
// exit ;
31238: GO 31813
// side := GetSide ( unit ) ;
31240: LD_ADDR_VAR 0 9
31244: PUSH
31245: LD_VAR 0 1
31249: PPUSH
31250: CALL_OW 255
31254: ST_TO_ADDR
// tech_space := tech_spacanom ;
31255: LD_ADDR_VAR 0 12
31259: PUSH
31260: LD_INT 29
31262: ST_TO_ADDR
// tech_time := tech_taurad ;
31263: LD_ADDR_VAR 0 13
31267: PUSH
31268: LD_INT 28
31270: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
31271: LD_ADDR_VAR 0 11
31275: PUSH
31276: LD_VAR 0 1
31280: PPUSH
31281: CALL_OW 310
31285: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
31286: LD_VAR 0 11
31290: PPUSH
31291: CALL_OW 247
31295: PUSH
31296: LD_INT 2
31298: EQUAL
31299: IFFALSE 31303
// exit ;
31301: GO 31813
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31303: LD_ADDR_VAR 0 8
31307: PUSH
31308: LD_INT 81
31310: PUSH
31311: LD_VAR 0 9
31315: PUSH
31316: EMPTY
31317: LIST
31318: LIST
31319: PUSH
31320: LD_INT 3
31322: PUSH
31323: LD_INT 21
31325: PUSH
31326: LD_INT 3
31328: PUSH
31329: EMPTY
31330: LIST
31331: LIST
31332: PUSH
31333: EMPTY
31334: LIST
31335: LIST
31336: PUSH
31337: EMPTY
31338: LIST
31339: LIST
31340: PPUSH
31341: CALL_OW 69
31345: ST_TO_ADDR
// if not tmp then
31346: LD_VAR 0 8
31350: NOT
31351: IFFALSE 31355
// exit ;
31353: GO 31813
// if in_unit then
31355: LD_VAR 0 11
31359: IFFALSE 31383
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
31361: LD_ADDR_VAR 0 10
31365: PUSH
31366: LD_VAR 0 8
31370: PPUSH
31371: LD_VAR 0 11
31375: PPUSH
31376: CALL_OW 74
31380: ST_TO_ADDR
31381: GO 31403
// enemy := NearestUnitToUnit ( tmp , unit ) ;
31383: LD_ADDR_VAR 0 10
31387: PUSH
31388: LD_VAR 0 8
31392: PPUSH
31393: LD_VAR 0 1
31397: PPUSH
31398: CALL_OW 74
31402: ST_TO_ADDR
// if not enemy then
31403: LD_VAR 0 10
31407: NOT
31408: IFFALSE 31412
// exit ;
31410: GO 31813
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
31412: LD_VAR 0 11
31416: PUSH
31417: LD_VAR 0 11
31421: PPUSH
31422: LD_VAR 0 10
31426: PPUSH
31427: CALL_OW 296
31431: PUSH
31432: LD_INT 13
31434: GREATER
31435: AND
31436: PUSH
31437: LD_VAR 0 1
31441: PPUSH
31442: LD_VAR 0 10
31446: PPUSH
31447: CALL_OW 296
31451: PUSH
31452: LD_INT 12
31454: GREATER
31455: OR
31456: IFFALSE 31460
// exit ;
31458: GO 31813
// missile := [ 1 ] ;
31460: LD_ADDR_VAR 0 14
31464: PUSH
31465: LD_INT 1
31467: PUSH
31468: EMPTY
31469: LIST
31470: ST_TO_ADDR
// if Researched ( side , tech_space ) then
31471: LD_VAR 0 9
31475: PPUSH
31476: LD_VAR 0 12
31480: PPUSH
31481: CALL_OW 325
31485: IFFALSE 31514
// missile := Replace ( missile , missile + 1 , 2 ) ;
31487: LD_ADDR_VAR 0 14
31491: PUSH
31492: LD_VAR 0 14
31496: PPUSH
31497: LD_VAR 0 14
31501: PUSH
31502: LD_INT 1
31504: PLUS
31505: PPUSH
31506: LD_INT 2
31508: PPUSH
31509: CALL_OW 1
31513: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
31514: LD_VAR 0 9
31518: PPUSH
31519: LD_VAR 0 13
31523: PPUSH
31524: CALL_OW 325
31528: PUSH
31529: LD_VAR 0 10
31533: PPUSH
31534: CALL_OW 255
31538: PPUSH
31539: LD_VAR 0 13
31543: PPUSH
31544: CALL_OW 325
31548: NOT
31549: AND
31550: IFFALSE 31579
// missile := Replace ( missile , missile + 1 , 3 ) ;
31552: LD_ADDR_VAR 0 14
31556: PUSH
31557: LD_VAR 0 14
31561: PPUSH
31562: LD_VAR 0 14
31566: PUSH
31567: LD_INT 1
31569: PLUS
31570: PPUSH
31571: LD_INT 3
31573: PPUSH
31574: CALL_OW 1
31578: ST_TO_ADDR
// if missile < 2 then
31579: LD_VAR 0 14
31583: PUSH
31584: LD_INT 2
31586: LESS
31587: IFFALSE 31591
// exit ;
31589: GO 31813
// x := GetX ( enemy ) ;
31591: LD_ADDR_VAR 0 4
31595: PUSH
31596: LD_VAR 0 10
31600: PPUSH
31601: CALL_OW 250
31605: ST_TO_ADDR
// y := GetY ( enemy ) ;
31606: LD_ADDR_VAR 0 5
31610: PUSH
31611: LD_VAR 0 10
31615: PPUSH
31616: CALL_OW 251
31620: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
31621: LD_ADDR_VAR 0 6
31625: PUSH
31626: LD_VAR 0 4
31630: PUSH
31631: LD_INT 1
31633: NEG
31634: PPUSH
31635: LD_INT 1
31637: PPUSH
31638: CALL_OW 12
31642: PLUS
31643: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
31644: LD_ADDR_VAR 0 7
31648: PUSH
31649: LD_VAR 0 5
31653: PUSH
31654: LD_INT 1
31656: NEG
31657: PPUSH
31658: LD_INT 1
31660: PPUSH
31661: CALL_OW 12
31665: PLUS
31666: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31667: LD_VAR 0 6
31671: PPUSH
31672: LD_VAR 0 7
31676: PPUSH
31677: CALL_OW 488
31681: NOT
31682: IFFALSE 31704
// begin _x := x ;
31684: LD_ADDR_VAR 0 6
31688: PUSH
31689: LD_VAR 0 4
31693: ST_TO_ADDR
// _y := y ;
31694: LD_ADDR_VAR 0 7
31698: PUSH
31699: LD_VAR 0 5
31703: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
31704: LD_ADDR_VAR 0 3
31708: PUSH
31709: LD_INT 1
31711: PPUSH
31712: LD_VAR 0 14
31716: PPUSH
31717: CALL_OW 12
31721: ST_TO_ADDR
// case i of 1 :
31722: LD_VAR 0 3
31726: PUSH
31727: LD_INT 1
31729: DOUBLE
31730: EQUAL
31731: IFTRUE 31735
31733: GO 31752
31735: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
31736: LD_VAR 0 1
31740: PPUSH
31741: LD_VAR 0 10
31745: PPUSH
31746: CALL_OW 115
31750: GO 31813
31752: LD_INT 2
31754: DOUBLE
31755: EQUAL
31756: IFTRUE 31760
31758: GO 31782
31760: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
31761: LD_VAR 0 1
31765: PPUSH
31766: LD_VAR 0 6
31770: PPUSH
31771: LD_VAR 0 7
31775: PPUSH
31776: CALL_OW 153
31780: GO 31813
31782: LD_INT 3
31784: DOUBLE
31785: EQUAL
31786: IFTRUE 31790
31788: GO 31812
31790: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
31791: LD_VAR 0 1
31795: PPUSH
31796: LD_VAR 0 6
31800: PPUSH
31801: LD_VAR 0 7
31805: PPUSH
31806: CALL_OW 154
31810: GO 31813
31812: POP
// end ;
31813: LD_VAR 0 2
31817: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
31818: LD_INT 0
31820: PPUSH
31821: PPUSH
31822: PPUSH
31823: PPUSH
31824: PPUSH
31825: PPUSH
// if not unit or not building then
31826: LD_VAR 0 1
31830: NOT
31831: PUSH
31832: LD_VAR 0 2
31836: NOT
31837: OR
31838: IFFALSE 31842
// exit ;
31840: GO 32000
// x := GetX ( building ) ;
31842: LD_ADDR_VAR 0 5
31846: PUSH
31847: LD_VAR 0 2
31851: PPUSH
31852: CALL_OW 250
31856: ST_TO_ADDR
// y := GetY ( building ) ;
31857: LD_ADDR_VAR 0 6
31861: PUSH
31862: LD_VAR 0 2
31866: PPUSH
31867: CALL_OW 251
31871: ST_TO_ADDR
// for i = 0 to 5 do
31872: LD_ADDR_VAR 0 4
31876: PUSH
31877: DOUBLE
31878: LD_INT 0
31880: DEC
31881: ST_TO_ADDR
31882: LD_INT 5
31884: PUSH
31885: FOR_TO
31886: IFFALSE 31998
// begin _x := ShiftX ( x , i , 3 ) ;
31888: LD_ADDR_VAR 0 7
31892: PUSH
31893: LD_VAR 0 5
31897: PPUSH
31898: LD_VAR 0 4
31902: PPUSH
31903: LD_INT 3
31905: PPUSH
31906: CALL_OW 272
31910: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
31911: LD_ADDR_VAR 0 8
31915: PUSH
31916: LD_VAR 0 6
31920: PPUSH
31921: LD_VAR 0 4
31925: PPUSH
31926: LD_INT 3
31928: PPUSH
31929: CALL_OW 273
31933: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31934: LD_VAR 0 7
31938: PPUSH
31939: LD_VAR 0 8
31943: PPUSH
31944: CALL_OW 488
31948: NOT
31949: IFFALSE 31953
// continue ;
31951: GO 31885
// if HexInfo ( _x , _y ) = 0 then
31953: LD_VAR 0 7
31957: PPUSH
31958: LD_VAR 0 8
31962: PPUSH
31963: CALL_OW 428
31967: PUSH
31968: LD_INT 0
31970: EQUAL
31971: IFFALSE 31996
// begin ComMoveXY ( unit , _x , _y ) ;
31973: LD_VAR 0 1
31977: PPUSH
31978: LD_VAR 0 7
31982: PPUSH
31983: LD_VAR 0 8
31987: PPUSH
31988: CALL_OW 111
// exit ;
31992: POP
31993: POP
31994: GO 32000
// end ; end ;
31996: GO 31885
31998: POP
31999: POP
// end ;
32000: LD_VAR 0 3
32004: RET
// export function ScanBase ( side , base_area ) ; begin
32005: LD_INT 0
32007: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
32008: LD_ADDR_VAR 0 3
32012: PUSH
32013: LD_VAR 0 2
32017: PPUSH
32018: LD_INT 81
32020: PUSH
32021: LD_VAR 0 1
32025: PUSH
32026: EMPTY
32027: LIST
32028: LIST
32029: PPUSH
32030: CALL_OW 70
32034: ST_TO_ADDR
// end ;
32035: LD_VAR 0 3
32039: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
32040: LD_INT 0
32042: PPUSH
32043: PPUSH
32044: PPUSH
32045: PPUSH
// result := false ;
32046: LD_ADDR_VAR 0 2
32050: PUSH
32051: LD_INT 0
32053: ST_TO_ADDR
// side := GetSide ( unit ) ;
32054: LD_ADDR_VAR 0 3
32058: PUSH
32059: LD_VAR 0 1
32063: PPUSH
32064: CALL_OW 255
32068: ST_TO_ADDR
// nat := GetNation ( unit ) ;
32069: LD_ADDR_VAR 0 4
32073: PUSH
32074: LD_VAR 0 1
32078: PPUSH
32079: CALL_OW 248
32083: ST_TO_ADDR
// case nat of 1 :
32084: LD_VAR 0 4
32088: PUSH
32089: LD_INT 1
32091: DOUBLE
32092: EQUAL
32093: IFTRUE 32097
32095: GO 32108
32097: POP
// tech := tech_lassight ; 2 :
32098: LD_ADDR_VAR 0 5
32102: PUSH
32103: LD_INT 12
32105: ST_TO_ADDR
32106: GO 32147
32108: LD_INT 2
32110: DOUBLE
32111: EQUAL
32112: IFTRUE 32116
32114: GO 32127
32116: POP
// tech := tech_mortar ; 3 :
32117: LD_ADDR_VAR 0 5
32121: PUSH
32122: LD_INT 41
32124: ST_TO_ADDR
32125: GO 32147
32127: LD_INT 3
32129: DOUBLE
32130: EQUAL
32131: IFTRUE 32135
32133: GO 32146
32135: POP
// tech := tech_bazooka ; end ;
32136: LD_ADDR_VAR 0 5
32140: PUSH
32141: LD_INT 44
32143: ST_TO_ADDR
32144: GO 32147
32146: POP
// if Researched ( side , tech ) then
32147: LD_VAR 0 3
32151: PPUSH
32152: LD_VAR 0 5
32156: PPUSH
32157: CALL_OW 325
32161: IFFALSE 32188
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
32163: LD_ADDR_VAR 0 2
32167: PUSH
32168: LD_INT 5
32170: PUSH
32171: LD_INT 8
32173: PUSH
32174: LD_INT 9
32176: PUSH
32177: EMPTY
32178: LIST
32179: LIST
32180: LIST
32181: PUSH
32182: LD_VAR 0 4
32186: ARRAY
32187: ST_TO_ADDR
// end ;
32188: LD_VAR 0 2
32192: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
32193: LD_INT 0
32195: PPUSH
32196: PPUSH
32197: PPUSH
// if not mines then
32198: LD_VAR 0 2
32202: NOT
32203: IFFALSE 32207
// exit ;
32205: GO 32351
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32207: LD_ADDR_VAR 0 5
32211: PUSH
32212: LD_INT 81
32214: PUSH
32215: LD_VAR 0 1
32219: PUSH
32220: EMPTY
32221: LIST
32222: LIST
32223: PUSH
32224: LD_INT 3
32226: PUSH
32227: LD_INT 21
32229: PUSH
32230: LD_INT 3
32232: PUSH
32233: EMPTY
32234: LIST
32235: LIST
32236: PUSH
32237: EMPTY
32238: LIST
32239: LIST
32240: PUSH
32241: EMPTY
32242: LIST
32243: LIST
32244: PPUSH
32245: CALL_OW 69
32249: ST_TO_ADDR
// for i in mines do
32250: LD_ADDR_VAR 0 4
32254: PUSH
32255: LD_VAR 0 2
32259: PUSH
32260: FOR_IN
32261: IFFALSE 32349
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
32263: LD_VAR 0 4
32267: PUSH
32268: LD_INT 1
32270: ARRAY
32271: PPUSH
32272: LD_VAR 0 4
32276: PUSH
32277: LD_INT 2
32279: ARRAY
32280: PPUSH
32281: CALL_OW 458
32285: NOT
32286: IFFALSE 32290
// continue ;
32288: GO 32260
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
32290: LD_VAR 0 4
32294: PUSH
32295: LD_INT 1
32297: ARRAY
32298: PPUSH
32299: LD_VAR 0 4
32303: PUSH
32304: LD_INT 2
32306: ARRAY
32307: PPUSH
32308: CALL_OW 428
32312: PUSH
32313: LD_VAR 0 5
32317: IN
32318: IFFALSE 32347
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
32320: LD_VAR 0 4
32324: PUSH
32325: LD_INT 1
32327: ARRAY
32328: PPUSH
32329: LD_VAR 0 4
32333: PUSH
32334: LD_INT 2
32336: ARRAY
32337: PPUSH
32338: LD_VAR 0 1
32342: PPUSH
32343: CALL_OW 456
// end ;
32347: GO 32260
32349: POP
32350: POP
// end ;
32351: LD_VAR 0 3
32355: RET
// export function Count ( array ) ; var i ; begin
32356: LD_INT 0
32358: PPUSH
32359: PPUSH
// result := 0 ;
32360: LD_ADDR_VAR 0 2
32364: PUSH
32365: LD_INT 0
32367: ST_TO_ADDR
// for i in array do
32368: LD_ADDR_VAR 0 3
32372: PUSH
32373: LD_VAR 0 1
32377: PUSH
32378: FOR_IN
32379: IFFALSE 32403
// if i then
32381: LD_VAR 0 3
32385: IFFALSE 32401
// result := result + 1 ;
32387: LD_ADDR_VAR 0 2
32391: PUSH
32392: LD_VAR 0 2
32396: PUSH
32397: LD_INT 1
32399: PLUS
32400: ST_TO_ADDR
32401: GO 32378
32403: POP
32404: POP
// end ;
32405: LD_VAR 0 2
32409: RET
// export function IsEmpty ( building ) ; begin
32410: LD_INT 0
32412: PPUSH
// if not building then
32413: LD_VAR 0 1
32417: NOT
32418: IFFALSE 32422
// exit ;
32420: GO 32465
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
32422: LD_ADDR_VAR 0 2
32426: PUSH
32427: LD_VAR 0 1
32431: PUSH
32432: LD_INT 22
32434: PUSH
32435: LD_VAR 0 1
32439: PPUSH
32440: CALL_OW 255
32444: PUSH
32445: EMPTY
32446: LIST
32447: LIST
32448: PUSH
32449: LD_INT 58
32451: PUSH
32452: EMPTY
32453: LIST
32454: PUSH
32455: EMPTY
32456: LIST
32457: LIST
32458: PPUSH
32459: CALL_OW 69
32463: IN
32464: ST_TO_ADDR
// end ;
32465: LD_VAR 0 2
32469: RET
// export function IsNotFull ( building ) ; begin
32470: LD_INT 0
32472: PPUSH
// if not building then
32473: LD_VAR 0 1
32477: NOT
32478: IFFALSE 32482
// exit ;
32480: GO 32501
// result := UnitsInside ( building ) < 6 ;
32482: LD_ADDR_VAR 0 2
32486: PUSH
32487: LD_VAR 0 1
32491: PPUSH
32492: CALL_OW 313
32496: PUSH
32497: LD_INT 6
32499: LESS
32500: ST_TO_ADDR
// end ;
32501: LD_VAR 0 2
32505: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
32506: LD_INT 0
32508: PPUSH
32509: PPUSH
32510: PPUSH
32511: PPUSH
// tmp := [ ] ;
32512: LD_ADDR_VAR 0 3
32516: PUSH
32517: EMPTY
32518: ST_TO_ADDR
// list := [ ] ;
32519: LD_ADDR_VAR 0 5
32523: PUSH
32524: EMPTY
32525: ST_TO_ADDR
// for i = 16 to 25 do
32526: LD_ADDR_VAR 0 4
32530: PUSH
32531: DOUBLE
32532: LD_INT 16
32534: DEC
32535: ST_TO_ADDR
32536: LD_INT 25
32538: PUSH
32539: FOR_TO
32540: IFFALSE 32613
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
32542: LD_ADDR_VAR 0 3
32546: PUSH
32547: LD_VAR 0 3
32551: PUSH
32552: LD_INT 22
32554: PUSH
32555: LD_VAR 0 1
32559: PPUSH
32560: CALL_OW 255
32564: PUSH
32565: EMPTY
32566: LIST
32567: LIST
32568: PUSH
32569: LD_INT 91
32571: PUSH
32572: LD_VAR 0 1
32576: PUSH
32577: LD_INT 6
32579: PUSH
32580: EMPTY
32581: LIST
32582: LIST
32583: LIST
32584: PUSH
32585: LD_INT 30
32587: PUSH
32588: LD_VAR 0 4
32592: PUSH
32593: EMPTY
32594: LIST
32595: LIST
32596: PUSH
32597: EMPTY
32598: LIST
32599: LIST
32600: LIST
32601: PUSH
32602: EMPTY
32603: LIST
32604: PPUSH
32605: CALL_OW 69
32609: ADD
32610: ST_TO_ADDR
32611: GO 32539
32613: POP
32614: POP
// for i = 1 to tmp do
32615: LD_ADDR_VAR 0 4
32619: PUSH
32620: DOUBLE
32621: LD_INT 1
32623: DEC
32624: ST_TO_ADDR
32625: LD_VAR 0 3
32629: PUSH
32630: FOR_TO
32631: IFFALSE 32719
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
32633: LD_ADDR_VAR 0 5
32637: PUSH
32638: LD_VAR 0 5
32642: PUSH
32643: LD_VAR 0 3
32647: PUSH
32648: LD_VAR 0 4
32652: ARRAY
32653: PPUSH
32654: CALL_OW 266
32658: PUSH
32659: LD_VAR 0 3
32663: PUSH
32664: LD_VAR 0 4
32668: ARRAY
32669: PPUSH
32670: CALL_OW 250
32674: PUSH
32675: LD_VAR 0 3
32679: PUSH
32680: LD_VAR 0 4
32684: ARRAY
32685: PPUSH
32686: CALL_OW 251
32690: PUSH
32691: LD_VAR 0 3
32695: PUSH
32696: LD_VAR 0 4
32700: ARRAY
32701: PPUSH
32702: CALL_OW 254
32706: PUSH
32707: EMPTY
32708: LIST
32709: LIST
32710: LIST
32711: LIST
32712: PUSH
32713: EMPTY
32714: LIST
32715: ADD
32716: ST_TO_ADDR
32717: GO 32630
32719: POP
32720: POP
// result := list ;
32721: LD_ADDR_VAR 0 2
32725: PUSH
32726: LD_VAR 0 5
32730: ST_TO_ADDR
// end ;
32731: LD_VAR 0 2
32735: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
32736: LD_INT 0
32738: PPUSH
32739: PPUSH
32740: PPUSH
32741: PPUSH
32742: PPUSH
32743: PPUSH
32744: PPUSH
// if not factory then
32745: LD_VAR 0 1
32749: NOT
32750: IFFALSE 32754
// exit ;
32752: GO 33347
// if control = control_apeman then
32754: LD_VAR 0 4
32758: PUSH
32759: LD_INT 5
32761: EQUAL
32762: IFFALSE 32871
// begin tmp := UnitsInside ( factory ) ;
32764: LD_ADDR_VAR 0 8
32768: PUSH
32769: LD_VAR 0 1
32773: PPUSH
32774: CALL_OW 313
32778: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
32779: LD_VAR 0 8
32783: PPUSH
32784: LD_INT 25
32786: PUSH
32787: LD_INT 12
32789: PUSH
32790: EMPTY
32791: LIST
32792: LIST
32793: PPUSH
32794: CALL_OW 72
32798: NOT
32799: IFFALSE 32809
// control := control_manual ;
32801: LD_ADDR_VAR 0 4
32805: PUSH
32806: LD_INT 1
32808: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
32809: LD_ADDR_VAR 0 8
32813: PUSH
32814: LD_VAR 0 1
32818: PPUSH
32819: CALL 32506 0 1
32823: ST_TO_ADDR
// if tmp then
32824: LD_VAR 0 8
32828: IFFALSE 32871
// begin for i in tmp do
32830: LD_ADDR_VAR 0 7
32834: PUSH
32835: LD_VAR 0 8
32839: PUSH
32840: FOR_IN
32841: IFFALSE 32869
// if i [ 1 ] = b_ext_radio then
32843: LD_VAR 0 7
32847: PUSH
32848: LD_INT 1
32850: ARRAY
32851: PUSH
32852: LD_INT 22
32854: EQUAL
32855: IFFALSE 32867
// begin control := control_remote ;
32857: LD_ADDR_VAR 0 4
32861: PUSH
32862: LD_INT 2
32864: ST_TO_ADDR
// break ;
32865: GO 32869
// end ;
32867: GO 32840
32869: POP
32870: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32871: LD_VAR 0 1
32875: PPUSH
32876: LD_VAR 0 2
32880: PPUSH
32881: LD_VAR 0 3
32885: PPUSH
32886: LD_VAR 0 4
32890: PPUSH
32891: LD_VAR 0 5
32895: PPUSH
32896: CALL_OW 448
32900: IFFALSE 32935
// begin result := [ chassis , engine , control , weapon ] ;
32902: LD_ADDR_VAR 0 6
32906: PUSH
32907: LD_VAR 0 2
32911: PUSH
32912: LD_VAR 0 3
32916: PUSH
32917: LD_VAR 0 4
32921: PUSH
32922: LD_VAR 0 5
32926: PUSH
32927: EMPTY
32928: LIST
32929: LIST
32930: LIST
32931: LIST
32932: ST_TO_ADDR
// exit ;
32933: GO 33347
// end ; _chassis := AvailableChassisList ( factory ) ;
32935: LD_ADDR_VAR 0 9
32939: PUSH
32940: LD_VAR 0 1
32944: PPUSH
32945: CALL_OW 475
32949: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
32950: LD_ADDR_VAR 0 11
32954: PUSH
32955: LD_VAR 0 1
32959: PPUSH
32960: CALL_OW 476
32964: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
32965: LD_ADDR_VAR 0 12
32969: PUSH
32970: LD_VAR 0 1
32974: PPUSH
32975: CALL_OW 477
32979: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
32980: LD_ADDR_VAR 0 10
32984: PUSH
32985: LD_VAR 0 1
32989: PPUSH
32990: CALL_OW 478
32994: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
32995: LD_VAR 0 9
32999: NOT
33000: PUSH
33001: LD_VAR 0 11
33005: NOT
33006: OR
33007: PUSH
33008: LD_VAR 0 12
33012: NOT
33013: OR
33014: PUSH
33015: LD_VAR 0 10
33019: NOT
33020: OR
33021: IFFALSE 33056
// begin result := [ chassis , engine , control , weapon ] ;
33023: LD_ADDR_VAR 0 6
33027: PUSH
33028: LD_VAR 0 2
33032: PUSH
33033: LD_VAR 0 3
33037: PUSH
33038: LD_VAR 0 4
33042: PUSH
33043: LD_VAR 0 5
33047: PUSH
33048: EMPTY
33049: LIST
33050: LIST
33051: LIST
33052: LIST
33053: ST_TO_ADDR
// exit ;
33054: GO 33347
// end ; if not chassis in _chassis then
33056: LD_VAR 0 2
33060: PUSH
33061: LD_VAR 0 9
33065: IN
33066: NOT
33067: IFFALSE 33093
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
33069: LD_ADDR_VAR 0 2
33073: PUSH
33074: LD_VAR 0 9
33078: PUSH
33079: LD_INT 1
33081: PPUSH
33082: LD_VAR 0 9
33086: PPUSH
33087: CALL_OW 12
33091: ARRAY
33092: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
33093: LD_VAR 0 2
33097: PPUSH
33098: LD_VAR 0 3
33102: PPUSH
33103: CALL 33352 0 2
33107: NOT
33108: IFFALSE 33167
// repeat engine := _engine [ 1 ] ;
33110: LD_ADDR_VAR 0 3
33114: PUSH
33115: LD_VAR 0 11
33119: PUSH
33120: LD_INT 1
33122: ARRAY
33123: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
33124: LD_ADDR_VAR 0 11
33128: PUSH
33129: LD_VAR 0 11
33133: PPUSH
33134: LD_INT 1
33136: PPUSH
33137: CALL_OW 3
33141: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
33142: LD_VAR 0 2
33146: PPUSH
33147: LD_VAR 0 3
33151: PPUSH
33152: CALL 33352 0 2
33156: PUSH
33157: LD_VAR 0 11
33161: PUSH
33162: EMPTY
33163: EQUAL
33164: OR
33165: IFFALSE 33110
// if not control in _control then
33167: LD_VAR 0 4
33171: PUSH
33172: LD_VAR 0 12
33176: IN
33177: NOT
33178: IFFALSE 33204
// control := _control [ rand ( 1 , _control ) ] ;
33180: LD_ADDR_VAR 0 4
33184: PUSH
33185: LD_VAR 0 12
33189: PUSH
33190: LD_INT 1
33192: PPUSH
33193: LD_VAR 0 12
33197: PPUSH
33198: CALL_OW 12
33202: ARRAY
33203: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
33204: LD_VAR 0 2
33208: PPUSH
33209: LD_VAR 0 5
33213: PPUSH
33214: CALL 33572 0 2
33218: NOT
33219: IFFALSE 33278
// repeat weapon := _weapon [ 1 ] ;
33221: LD_ADDR_VAR 0 5
33225: PUSH
33226: LD_VAR 0 10
33230: PUSH
33231: LD_INT 1
33233: ARRAY
33234: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
33235: LD_ADDR_VAR 0 10
33239: PUSH
33240: LD_VAR 0 10
33244: PPUSH
33245: LD_INT 1
33247: PPUSH
33248: CALL_OW 3
33252: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
33253: LD_VAR 0 2
33257: PPUSH
33258: LD_VAR 0 5
33262: PPUSH
33263: CALL 33572 0 2
33267: PUSH
33268: LD_VAR 0 10
33272: PUSH
33273: EMPTY
33274: EQUAL
33275: OR
33276: IFFALSE 33221
// result := [ ] ;
33278: LD_ADDR_VAR 0 6
33282: PUSH
33283: EMPTY
33284: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
33285: LD_VAR 0 1
33289: PPUSH
33290: LD_VAR 0 2
33294: PPUSH
33295: LD_VAR 0 3
33299: PPUSH
33300: LD_VAR 0 4
33304: PPUSH
33305: LD_VAR 0 5
33309: PPUSH
33310: CALL_OW 448
33314: IFFALSE 33347
// result := [ chassis , engine , control , weapon ] ;
33316: LD_ADDR_VAR 0 6
33320: PUSH
33321: LD_VAR 0 2
33325: PUSH
33326: LD_VAR 0 3
33330: PUSH
33331: LD_VAR 0 4
33335: PUSH
33336: LD_VAR 0 5
33340: PUSH
33341: EMPTY
33342: LIST
33343: LIST
33344: LIST
33345: LIST
33346: ST_TO_ADDR
// end ;
33347: LD_VAR 0 6
33351: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
33352: LD_INT 0
33354: PPUSH
// if not chassis or not engine then
33355: LD_VAR 0 1
33359: NOT
33360: PUSH
33361: LD_VAR 0 2
33365: NOT
33366: OR
33367: IFFALSE 33371
// exit ;
33369: GO 33567
// case engine of engine_solar :
33371: LD_VAR 0 2
33375: PUSH
33376: LD_INT 2
33378: DOUBLE
33379: EQUAL
33380: IFTRUE 33384
33382: GO 33422
33384: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
33385: LD_ADDR_VAR 0 3
33389: PUSH
33390: LD_INT 11
33392: PUSH
33393: LD_INT 12
33395: PUSH
33396: LD_INT 13
33398: PUSH
33399: LD_INT 14
33401: PUSH
33402: LD_INT 1
33404: PUSH
33405: LD_INT 2
33407: PUSH
33408: LD_INT 3
33410: PUSH
33411: EMPTY
33412: LIST
33413: LIST
33414: LIST
33415: LIST
33416: LIST
33417: LIST
33418: LIST
33419: ST_TO_ADDR
33420: GO 33551
33422: LD_INT 1
33424: DOUBLE
33425: EQUAL
33426: IFTRUE 33430
33428: GO 33492
33430: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
33431: LD_ADDR_VAR 0 3
33435: PUSH
33436: LD_INT 11
33438: PUSH
33439: LD_INT 12
33441: PUSH
33442: LD_INT 13
33444: PUSH
33445: LD_INT 14
33447: PUSH
33448: LD_INT 1
33450: PUSH
33451: LD_INT 2
33453: PUSH
33454: LD_INT 3
33456: PUSH
33457: LD_INT 4
33459: PUSH
33460: LD_INT 5
33462: PUSH
33463: LD_INT 21
33465: PUSH
33466: LD_INT 23
33468: PUSH
33469: LD_INT 22
33471: PUSH
33472: LD_INT 24
33474: PUSH
33475: EMPTY
33476: LIST
33477: LIST
33478: LIST
33479: LIST
33480: LIST
33481: LIST
33482: LIST
33483: LIST
33484: LIST
33485: LIST
33486: LIST
33487: LIST
33488: LIST
33489: ST_TO_ADDR
33490: GO 33551
33492: LD_INT 3
33494: DOUBLE
33495: EQUAL
33496: IFTRUE 33500
33498: GO 33550
33500: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33501: LD_ADDR_VAR 0 3
33505: PUSH
33506: LD_INT 13
33508: PUSH
33509: LD_INT 14
33511: PUSH
33512: LD_INT 2
33514: PUSH
33515: LD_INT 3
33517: PUSH
33518: LD_INT 4
33520: PUSH
33521: LD_INT 5
33523: PUSH
33524: LD_INT 21
33526: PUSH
33527: LD_INT 22
33529: PUSH
33530: LD_INT 23
33532: PUSH
33533: LD_INT 24
33535: PUSH
33536: EMPTY
33537: LIST
33538: LIST
33539: LIST
33540: LIST
33541: LIST
33542: LIST
33543: LIST
33544: LIST
33545: LIST
33546: LIST
33547: ST_TO_ADDR
33548: GO 33551
33550: POP
// result := ( chassis in result ) ;
33551: LD_ADDR_VAR 0 3
33555: PUSH
33556: LD_VAR 0 1
33560: PUSH
33561: LD_VAR 0 3
33565: IN
33566: ST_TO_ADDR
// end ;
33567: LD_VAR 0 3
33571: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
33572: LD_INT 0
33574: PPUSH
// if not chassis or not weapon then
33575: LD_VAR 0 1
33579: NOT
33580: PUSH
33581: LD_VAR 0 2
33585: NOT
33586: OR
33587: IFFALSE 33591
// exit ;
33589: GO 34653
// case weapon of us_machine_gun :
33591: LD_VAR 0 2
33595: PUSH
33596: LD_INT 2
33598: DOUBLE
33599: EQUAL
33600: IFTRUE 33604
33602: GO 33634
33604: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
33605: LD_ADDR_VAR 0 3
33609: PUSH
33610: LD_INT 1
33612: PUSH
33613: LD_INT 2
33615: PUSH
33616: LD_INT 3
33618: PUSH
33619: LD_INT 4
33621: PUSH
33622: LD_INT 5
33624: PUSH
33625: EMPTY
33626: LIST
33627: LIST
33628: LIST
33629: LIST
33630: LIST
33631: ST_TO_ADDR
33632: GO 34637
33634: LD_INT 3
33636: DOUBLE
33637: EQUAL
33638: IFTRUE 33642
33640: GO 33672
33642: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
33643: LD_ADDR_VAR 0 3
33647: PUSH
33648: LD_INT 1
33650: PUSH
33651: LD_INT 2
33653: PUSH
33654: LD_INT 3
33656: PUSH
33657: LD_INT 4
33659: PUSH
33660: LD_INT 5
33662: PUSH
33663: EMPTY
33664: LIST
33665: LIST
33666: LIST
33667: LIST
33668: LIST
33669: ST_TO_ADDR
33670: GO 34637
33672: LD_INT 11
33674: DOUBLE
33675: EQUAL
33676: IFTRUE 33680
33678: GO 33710
33680: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
33681: LD_ADDR_VAR 0 3
33685: PUSH
33686: LD_INT 1
33688: PUSH
33689: LD_INT 2
33691: PUSH
33692: LD_INT 3
33694: PUSH
33695: LD_INT 4
33697: PUSH
33698: LD_INT 5
33700: PUSH
33701: EMPTY
33702: LIST
33703: LIST
33704: LIST
33705: LIST
33706: LIST
33707: ST_TO_ADDR
33708: GO 34637
33710: LD_INT 4
33712: DOUBLE
33713: EQUAL
33714: IFTRUE 33718
33716: GO 33744
33718: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
33719: LD_ADDR_VAR 0 3
33723: PUSH
33724: LD_INT 2
33726: PUSH
33727: LD_INT 3
33729: PUSH
33730: LD_INT 4
33732: PUSH
33733: LD_INT 5
33735: PUSH
33736: EMPTY
33737: LIST
33738: LIST
33739: LIST
33740: LIST
33741: ST_TO_ADDR
33742: GO 34637
33744: LD_INT 5
33746: DOUBLE
33747: EQUAL
33748: IFTRUE 33752
33750: GO 33778
33752: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
33753: LD_ADDR_VAR 0 3
33757: PUSH
33758: LD_INT 2
33760: PUSH
33761: LD_INT 3
33763: PUSH
33764: LD_INT 4
33766: PUSH
33767: LD_INT 5
33769: PUSH
33770: EMPTY
33771: LIST
33772: LIST
33773: LIST
33774: LIST
33775: ST_TO_ADDR
33776: GO 34637
33778: LD_INT 9
33780: DOUBLE
33781: EQUAL
33782: IFTRUE 33786
33784: GO 33812
33786: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
33787: LD_ADDR_VAR 0 3
33791: PUSH
33792: LD_INT 2
33794: PUSH
33795: LD_INT 3
33797: PUSH
33798: LD_INT 4
33800: PUSH
33801: LD_INT 5
33803: PUSH
33804: EMPTY
33805: LIST
33806: LIST
33807: LIST
33808: LIST
33809: ST_TO_ADDR
33810: GO 34637
33812: LD_INT 7
33814: DOUBLE
33815: EQUAL
33816: IFTRUE 33820
33818: GO 33846
33820: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
33821: LD_ADDR_VAR 0 3
33825: PUSH
33826: LD_INT 2
33828: PUSH
33829: LD_INT 3
33831: PUSH
33832: LD_INT 4
33834: PUSH
33835: LD_INT 5
33837: PUSH
33838: EMPTY
33839: LIST
33840: LIST
33841: LIST
33842: LIST
33843: ST_TO_ADDR
33844: GO 34637
33846: LD_INT 12
33848: DOUBLE
33849: EQUAL
33850: IFTRUE 33854
33852: GO 33880
33854: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
33855: LD_ADDR_VAR 0 3
33859: PUSH
33860: LD_INT 2
33862: PUSH
33863: LD_INT 3
33865: PUSH
33866: LD_INT 4
33868: PUSH
33869: LD_INT 5
33871: PUSH
33872: EMPTY
33873: LIST
33874: LIST
33875: LIST
33876: LIST
33877: ST_TO_ADDR
33878: GO 34637
33880: LD_INT 13
33882: DOUBLE
33883: EQUAL
33884: IFTRUE 33888
33886: GO 33914
33888: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
33889: LD_ADDR_VAR 0 3
33893: PUSH
33894: LD_INT 2
33896: PUSH
33897: LD_INT 3
33899: PUSH
33900: LD_INT 4
33902: PUSH
33903: LD_INT 5
33905: PUSH
33906: EMPTY
33907: LIST
33908: LIST
33909: LIST
33910: LIST
33911: ST_TO_ADDR
33912: GO 34637
33914: LD_INT 14
33916: DOUBLE
33917: EQUAL
33918: IFTRUE 33922
33920: GO 33940
33922: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
33923: LD_ADDR_VAR 0 3
33927: PUSH
33928: LD_INT 4
33930: PUSH
33931: LD_INT 5
33933: PUSH
33934: EMPTY
33935: LIST
33936: LIST
33937: ST_TO_ADDR
33938: GO 34637
33940: LD_INT 6
33942: DOUBLE
33943: EQUAL
33944: IFTRUE 33948
33946: GO 33966
33948: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
33949: LD_ADDR_VAR 0 3
33953: PUSH
33954: LD_INT 4
33956: PUSH
33957: LD_INT 5
33959: PUSH
33960: EMPTY
33961: LIST
33962: LIST
33963: ST_TO_ADDR
33964: GO 34637
33966: LD_INT 10
33968: DOUBLE
33969: EQUAL
33970: IFTRUE 33974
33972: GO 33992
33974: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
33975: LD_ADDR_VAR 0 3
33979: PUSH
33980: LD_INT 4
33982: PUSH
33983: LD_INT 5
33985: PUSH
33986: EMPTY
33987: LIST
33988: LIST
33989: ST_TO_ADDR
33990: GO 34637
33992: LD_INT 22
33994: DOUBLE
33995: EQUAL
33996: IFTRUE 34000
33998: GO 34026
34000: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
34001: LD_ADDR_VAR 0 3
34005: PUSH
34006: LD_INT 11
34008: PUSH
34009: LD_INT 12
34011: PUSH
34012: LD_INT 13
34014: PUSH
34015: LD_INT 14
34017: PUSH
34018: EMPTY
34019: LIST
34020: LIST
34021: LIST
34022: LIST
34023: ST_TO_ADDR
34024: GO 34637
34026: LD_INT 23
34028: DOUBLE
34029: EQUAL
34030: IFTRUE 34034
34032: GO 34060
34034: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
34035: LD_ADDR_VAR 0 3
34039: PUSH
34040: LD_INT 11
34042: PUSH
34043: LD_INT 12
34045: PUSH
34046: LD_INT 13
34048: PUSH
34049: LD_INT 14
34051: PUSH
34052: EMPTY
34053: LIST
34054: LIST
34055: LIST
34056: LIST
34057: ST_TO_ADDR
34058: GO 34637
34060: LD_INT 24
34062: DOUBLE
34063: EQUAL
34064: IFTRUE 34068
34066: GO 34094
34068: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
34069: LD_ADDR_VAR 0 3
34073: PUSH
34074: LD_INT 11
34076: PUSH
34077: LD_INT 12
34079: PUSH
34080: LD_INT 13
34082: PUSH
34083: LD_INT 14
34085: PUSH
34086: EMPTY
34087: LIST
34088: LIST
34089: LIST
34090: LIST
34091: ST_TO_ADDR
34092: GO 34637
34094: LD_INT 30
34096: DOUBLE
34097: EQUAL
34098: IFTRUE 34102
34100: GO 34128
34102: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
34103: LD_ADDR_VAR 0 3
34107: PUSH
34108: LD_INT 11
34110: PUSH
34111: LD_INT 12
34113: PUSH
34114: LD_INT 13
34116: PUSH
34117: LD_INT 14
34119: PUSH
34120: EMPTY
34121: LIST
34122: LIST
34123: LIST
34124: LIST
34125: ST_TO_ADDR
34126: GO 34637
34128: LD_INT 25
34130: DOUBLE
34131: EQUAL
34132: IFTRUE 34136
34134: GO 34154
34136: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
34137: LD_ADDR_VAR 0 3
34141: PUSH
34142: LD_INT 13
34144: PUSH
34145: LD_INT 14
34147: PUSH
34148: EMPTY
34149: LIST
34150: LIST
34151: ST_TO_ADDR
34152: GO 34637
34154: LD_INT 27
34156: DOUBLE
34157: EQUAL
34158: IFTRUE 34162
34160: GO 34180
34162: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
34163: LD_ADDR_VAR 0 3
34167: PUSH
34168: LD_INT 13
34170: PUSH
34171: LD_INT 14
34173: PUSH
34174: EMPTY
34175: LIST
34176: LIST
34177: ST_TO_ADDR
34178: GO 34637
34180: LD_EXP 31
34184: DOUBLE
34185: EQUAL
34186: IFTRUE 34190
34188: GO 34216
34190: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
34191: LD_ADDR_VAR 0 3
34195: PUSH
34196: LD_INT 11
34198: PUSH
34199: LD_INT 12
34201: PUSH
34202: LD_INT 13
34204: PUSH
34205: LD_INT 14
34207: PUSH
34208: EMPTY
34209: LIST
34210: LIST
34211: LIST
34212: LIST
34213: ST_TO_ADDR
34214: GO 34637
34216: LD_INT 28
34218: DOUBLE
34219: EQUAL
34220: IFTRUE 34224
34222: GO 34242
34224: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
34225: LD_ADDR_VAR 0 3
34229: PUSH
34230: LD_INT 13
34232: PUSH
34233: LD_INT 14
34235: PUSH
34236: EMPTY
34237: LIST
34238: LIST
34239: ST_TO_ADDR
34240: GO 34637
34242: LD_INT 29
34244: DOUBLE
34245: EQUAL
34246: IFTRUE 34250
34248: GO 34268
34250: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
34251: LD_ADDR_VAR 0 3
34255: PUSH
34256: LD_INT 13
34258: PUSH
34259: LD_INT 14
34261: PUSH
34262: EMPTY
34263: LIST
34264: LIST
34265: ST_TO_ADDR
34266: GO 34637
34268: LD_INT 31
34270: DOUBLE
34271: EQUAL
34272: IFTRUE 34276
34274: GO 34294
34276: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
34277: LD_ADDR_VAR 0 3
34281: PUSH
34282: LD_INT 13
34284: PUSH
34285: LD_INT 14
34287: PUSH
34288: EMPTY
34289: LIST
34290: LIST
34291: ST_TO_ADDR
34292: GO 34637
34294: LD_INT 26
34296: DOUBLE
34297: EQUAL
34298: IFTRUE 34302
34300: GO 34320
34302: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
34303: LD_ADDR_VAR 0 3
34307: PUSH
34308: LD_INT 13
34310: PUSH
34311: LD_INT 14
34313: PUSH
34314: EMPTY
34315: LIST
34316: LIST
34317: ST_TO_ADDR
34318: GO 34637
34320: LD_INT 42
34322: DOUBLE
34323: EQUAL
34324: IFTRUE 34328
34326: GO 34354
34328: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
34329: LD_ADDR_VAR 0 3
34333: PUSH
34334: LD_INT 21
34336: PUSH
34337: LD_INT 22
34339: PUSH
34340: LD_INT 23
34342: PUSH
34343: LD_INT 24
34345: PUSH
34346: EMPTY
34347: LIST
34348: LIST
34349: LIST
34350: LIST
34351: ST_TO_ADDR
34352: GO 34637
34354: LD_INT 43
34356: DOUBLE
34357: EQUAL
34358: IFTRUE 34362
34360: GO 34388
34362: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
34363: LD_ADDR_VAR 0 3
34367: PUSH
34368: LD_INT 21
34370: PUSH
34371: LD_INT 22
34373: PUSH
34374: LD_INT 23
34376: PUSH
34377: LD_INT 24
34379: PUSH
34380: EMPTY
34381: LIST
34382: LIST
34383: LIST
34384: LIST
34385: ST_TO_ADDR
34386: GO 34637
34388: LD_INT 44
34390: DOUBLE
34391: EQUAL
34392: IFTRUE 34396
34394: GO 34422
34396: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
34397: LD_ADDR_VAR 0 3
34401: PUSH
34402: LD_INT 21
34404: PUSH
34405: LD_INT 22
34407: PUSH
34408: LD_INT 23
34410: PUSH
34411: LD_INT 24
34413: PUSH
34414: EMPTY
34415: LIST
34416: LIST
34417: LIST
34418: LIST
34419: ST_TO_ADDR
34420: GO 34637
34422: LD_INT 45
34424: DOUBLE
34425: EQUAL
34426: IFTRUE 34430
34428: GO 34456
34430: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
34431: LD_ADDR_VAR 0 3
34435: PUSH
34436: LD_INT 21
34438: PUSH
34439: LD_INT 22
34441: PUSH
34442: LD_INT 23
34444: PUSH
34445: LD_INT 24
34447: PUSH
34448: EMPTY
34449: LIST
34450: LIST
34451: LIST
34452: LIST
34453: ST_TO_ADDR
34454: GO 34637
34456: LD_INT 49
34458: DOUBLE
34459: EQUAL
34460: IFTRUE 34464
34462: GO 34490
34464: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
34465: LD_ADDR_VAR 0 3
34469: PUSH
34470: LD_INT 21
34472: PUSH
34473: LD_INT 22
34475: PUSH
34476: LD_INT 23
34478: PUSH
34479: LD_INT 24
34481: PUSH
34482: EMPTY
34483: LIST
34484: LIST
34485: LIST
34486: LIST
34487: ST_TO_ADDR
34488: GO 34637
34490: LD_INT 51
34492: DOUBLE
34493: EQUAL
34494: IFTRUE 34498
34496: GO 34524
34498: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
34499: LD_ADDR_VAR 0 3
34503: PUSH
34504: LD_INT 21
34506: PUSH
34507: LD_INT 22
34509: PUSH
34510: LD_INT 23
34512: PUSH
34513: LD_INT 24
34515: PUSH
34516: EMPTY
34517: LIST
34518: LIST
34519: LIST
34520: LIST
34521: ST_TO_ADDR
34522: GO 34637
34524: LD_INT 52
34526: DOUBLE
34527: EQUAL
34528: IFTRUE 34532
34530: GO 34558
34532: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
34533: LD_ADDR_VAR 0 3
34537: PUSH
34538: LD_INT 21
34540: PUSH
34541: LD_INT 22
34543: PUSH
34544: LD_INT 23
34546: PUSH
34547: LD_INT 24
34549: PUSH
34550: EMPTY
34551: LIST
34552: LIST
34553: LIST
34554: LIST
34555: ST_TO_ADDR
34556: GO 34637
34558: LD_INT 53
34560: DOUBLE
34561: EQUAL
34562: IFTRUE 34566
34564: GO 34584
34566: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
34567: LD_ADDR_VAR 0 3
34571: PUSH
34572: LD_INT 23
34574: PUSH
34575: LD_INT 24
34577: PUSH
34578: EMPTY
34579: LIST
34580: LIST
34581: ST_TO_ADDR
34582: GO 34637
34584: LD_INT 46
34586: DOUBLE
34587: EQUAL
34588: IFTRUE 34592
34590: GO 34610
34592: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
34593: LD_ADDR_VAR 0 3
34597: PUSH
34598: LD_INT 23
34600: PUSH
34601: LD_INT 24
34603: PUSH
34604: EMPTY
34605: LIST
34606: LIST
34607: ST_TO_ADDR
34608: GO 34637
34610: LD_INT 47
34612: DOUBLE
34613: EQUAL
34614: IFTRUE 34618
34616: GO 34636
34618: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
34619: LD_ADDR_VAR 0 3
34623: PUSH
34624: LD_INT 23
34626: PUSH
34627: LD_INT 24
34629: PUSH
34630: EMPTY
34631: LIST
34632: LIST
34633: ST_TO_ADDR
34634: GO 34637
34636: POP
// result := ( chassis in result ) ;
34637: LD_ADDR_VAR 0 3
34641: PUSH
34642: LD_VAR 0 1
34646: PUSH
34647: LD_VAR 0 3
34651: IN
34652: ST_TO_ADDR
// end ;
34653: LD_VAR 0 3
34657: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
34658: LD_INT 0
34660: PPUSH
34661: PPUSH
34662: PPUSH
34663: PPUSH
34664: PPUSH
34665: PPUSH
34666: PPUSH
// result := array ;
34667: LD_ADDR_VAR 0 5
34671: PUSH
34672: LD_VAR 0 1
34676: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
34677: LD_VAR 0 1
34681: NOT
34682: PUSH
34683: LD_VAR 0 2
34687: NOT
34688: OR
34689: PUSH
34690: LD_VAR 0 3
34694: NOT
34695: OR
34696: PUSH
34697: LD_VAR 0 2
34701: PUSH
34702: LD_VAR 0 1
34706: GREATER
34707: OR
34708: PUSH
34709: LD_VAR 0 3
34713: PUSH
34714: LD_VAR 0 1
34718: GREATER
34719: OR
34720: IFFALSE 34724
// exit ;
34722: GO 35020
// if direction then
34724: LD_VAR 0 4
34728: IFFALSE 34792
// begin d := 1 ;
34730: LD_ADDR_VAR 0 9
34734: PUSH
34735: LD_INT 1
34737: ST_TO_ADDR
// if i_from > i_to then
34738: LD_VAR 0 2
34742: PUSH
34743: LD_VAR 0 3
34747: GREATER
34748: IFFALSE 34774
// length := ( array - i_from ) + i_to else
34750: LD_ADDR_VAR 0 11
34754: PUSH
34755: LD_VAR 0 1
34759: PUSH
34760: LD_VAR 0 2
34764: MINUS
34765: PUSH
34766: LD_VAR 0 3
34770: PLUS
34771: ST_TO_ADDR
34772: GO 34790
// length := i_to - i_from ;
34774: LD_ADDR_VAR 0 11
34778: PUSH
34779: LD_VAR 0 3
34783: PUSH
34784: LD_VAR 0 2
34788: MINUS
34789: ST_TO_ADDR
// end else
34790: GO 34853
// begin d := - 1 ;
34792: LD_ADDR_VAR 0 9
34796: PUSH
34797: LD_INT 1
34799: NEG
34800: ST_TO_ADDR
// if i_from > i_to then
34801: LD_VAR 0 2
34805: PUSH
34806: LD_VAR 0 3
34810: GREATER
34811: IFFALSE 34831
// length := i_from - i_to else
34813: LD_ADDR_VAR 0 11
34817: PUSH
34818: LD_VAR 0 2
34822: PUSH
34823: LD_VAR 0 3
34827: MINUS
34828: ST_TO_ADDR
34829: GO 34853
// length := ( array - i_to ) + i_from ;
34831: LD_ADDR_VAR 0 11
34835: PUSH
34836: LD_VAR 0 1
34840: PUSH
34841: LD_VAR 0 3
34845: MINUS
34846: PUSH
34847: LD_VAR 0 2
34851: PLUS
34852: ST_TO_ADDR
// end ; if not length then
34853: LD_VAR 0 11
34857: NOT
34858: IFFALSE 34862
// exit ;
34860: GO 35020
// tmp := array ;
34862: LD_ADDR_VAR 0 10
34866: PUSH
34867: LD_VAR 0 1
34871: ST_TO_ADDR
// for i = 1 to length do
34872: LD_ADDR_VAR 0 6
34876: PUSH
34877: DOUBLE
34878: LD_INT 1
34880: DEC
34881: ST_TO_ADDR
34882: LD_VAR 0 11
34886: PUSH
34887: FOR_TO
34888: IFFALSE 35008
// begin for j = 1 to array do
34890: LD_ADDR_VAR 0 7
34894: PUSH
34895: DOUBLE
34896: LD_INT 1
34898: DEC
34899: ST_TO_ADDR
34900: LD_VAR 0 1
34904: PUSH
34905: FOR_TO
34906: IFFALSE 34994
// begin k := j + d ;
34908: LD_ADDR_VAR 0 8
34912: PUSH
34913: LD_VAR 0 7
34917: PUSH
34918: LD_VAR 0 9
34922: PLUS
34923: ST_TO_ADDR
// if k > array then
34924: LD_VAR 0 8
34928: PUSH
34929: LD_VAR 0 1
34933: GREATER
34934: IFFALSE 34944
// k := 1 ;
34936: LD_ADDR_VAR 0 8
34940: PUSH
34941: LD_INT 1
34943: ST_TO_ADDR
// if not k then
34944: LD_VAR 0 8
34948: NOT
34949: IFFALSE 34961
// k := array ;
34951: LD_ADDR_VAR 0 8
34955: PUSH
34956: LD_VAR 0 1
34960: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
34961: LD_ADDR_VAR 0 10
34965: PUSH
34966: LD_VAR 0 10
34970: PPUSH
34971: LD_VAR 0 8
34975: PPUSH
34976: LD_VAR 0 1
34980: PUSH
34981: LD_VAR 0 7
34985: ARRAY
34986: PPUSH
34987: CALL_OW 1
34991: ST_TO_ADDR
// end ;
34992: GO 34905
34994: POP
34995: POP
// array := tmp ;
34996: LD_ADDR_VAR 0 1
35000: PUSH
35001: LD_VAR 0 10
35005: ST_TO_ADDR
// end ;
35006: GO 34887
35008: POP
35009: POP
// result := array ;
35010: LD_ADDR_VAR 0 5
35014: PUSH
35015: LD_VAR 0 1
35019: ST_TO_ADDR
// end ;
35020: LD_VAR 0 5
35024: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
35025: LD_INT 0
35027: PPUSH
35028: PPUSH
// result := 0 ;
35029: LD_ADDR_VAR 0 3
35033: PUSH
35034: LD_INT 0
35036: ST_TO_ADDR
// if not array or not value in array then
35037: LD_VAR 0 1
35041: NOT
35042: PUSH
35043: LD_VAR 0 2
35047: PUSH
35048: LD_VAR 0 1
35052: IN
35053: NOT
35054: OR
35055: IFFALSE 35059
// exit ;
35057: GO 35113
// for i = 1 to array do
35059: LD_ADDR_VAR 0 4
35063: PUSH
35064: DOUBLE
35065: LD_INT 1
35067: DEC
35068: ST_TO_ADDR
35069: LD_VAR 0 1
35073: PUSH
35074: FOR_TO
35075: IFFALSE 35111
// if value = array [ i ] then
35077: LD_VAR 0 2
35081: PUSH
35082: LD_VAR 0 1
35086: PUSH
35087: LD_VAR 0 4
35091: ARRAY
35092: EQUAL
35093: IFFALSE 35109
// begin result := i ;
35095: LD_ADDR_VAR 0 3
35099: PUSH
35100: LD_VAR 0 4
35104: ST_TO_ADDR
// exit ;
35105: POP
35106: POP
35107: GO 35113
// end ;
35109: GO 35074
35111: POP
35112: POP
// end ;
35113: LD_VAR 0 3
35117: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
35118: LD_INT 0
35120: PPUSH
// vc_chassis := chassis ;
35121: LD_ADDR_OWVAR 37
35125: PUSH
35126: LD_VAR 0 1
35130: ST_TO_ADDR
// vc_engine := engine ;
35131: LD_ADDR_OWVAR 39
35135: PUSH
35136: LD_VAR 0 2
35140: ST_TO_ADDR
// vc_control := control ;
35141: LD_ADDR_OWVAR 38
35145: PUSH
35146: LD_VAR 0 3
35150: ST_TO_ADDR
// vc_weapon := weapon ;
35151: LD_ADDR_OWVAR 40
35155: PUSH
35156: LD_VAR 0 4
35160: ST_TO_ADDR
// vc_fuel_battery := fuel ;
35161: LD_ADDR_OWVAR 41
35165: PUSH
35166: LD_VAR 0 5
35170: ST_TO_ADDR
// end ;
35171: LD_VAR 0 6
35175: RET
// export function WantPlant ( unit ) ; var task ; begin
35176: LD_INT 0
35178: PPUSH
35179: PPUSH
// result := false ;
35180: LD_ADDR_VAR 0 2
35184: PUSH
35185: LD_INT 0
35187: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
35188: LD_ADDR_VAR 0 3
35192: PUSH
35193: LD_VAR 0 1
35197: PPUSH
35198: CALL_OW 437
35202: ST_TO_ADDR
// if task then
35203: LD_VAR 0 3
35207: IFFALSE 35235
// if task [ 1 ] [ 1 ] = p then
35209: LD_VAR 0 3
35213: PUSH
35214: LD_INT 1
35216: ARRAY
35217: PUSH
35218: LD_INT 1
35220: ARRAY
35221: PUSH
35222: LD_STRING p
35224: EQUAL
35225: IFFALSE 35235
// result := true ;
35227: LD_ADDR_VAR 0 2
35231: PUSH
35232: LD_INT 1
35234: ST_TO_ADDR
// end ;
35235: LD_VAR 0 2
35239: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
35240: LD_INT 0
35242: PPUSH
35243: PPUSH
35244: PPUSH
35245: PPUSH
// if pos < 1 then
35246: LD_VAR 0 2
35250: PUSH
35251: LD_INT 1
35253: LESS
35254: IFFALSE 35258
// exit ;
35256: GO 35561
// if pos = 1 then
35258: LD_VAR 0 2
35262: PUSH
35263: LD_INT 1
35265: EQUAL
35266: IFFALSE 35299
// result := Replace ( arr , pos [ 1 ] , value ) else
35268: LD_ADDR_VAR 0 4
35272: PUSH
35273: LD_VAR 0 1
35277: PPUSH
35278: LD_VAR 0 2
35282: PUSH
35283: LD_INT 1
35285: ARRAY
35286: PPUSH
35287: LD_VAR 0 3
35291: PPUSH
35292: CALL_OW 1
35296: ST_TO_ADDR
35297: GO 35561
// begin tmp := arr ;
35299: LD_ADDR_VAR 0 6
35303: PUSH
35304: LD_VAR 0 1
35308: ST_TO_ADDR
// s_arr := [ tmp ] ;
35309: LD_ADDR_VAR 0 7
35313: PUSH
35314: LD_VAR 0 6
35318: PUSH
35319: EMPTY
35320: LIST
35321: ST_TO_ADDR
// for i = 1 to pos - 1 do
35322: LD_ADDR_VAR 0 5
35326: PUSH
35327: DOUBLE
35328: LD_INT 1
35330: DEC
35331: ST_TO_ADDR
35332: LD_VAR 0 2
35336: PUSH
35337: LD_INT 1
35339: MINUS
35340: PUSH
35341: FOR_TO
35342: IFFALSE 35387
// begin tmp := tmp [ pos [ i ] ] ;
35344: LD_ADDR_VAR 0 6
35348: PUSH
35349: LD_VAR 0 6
35353: PUSH
35354: LD_VAR 0 2
35358: PUSH
35359: LD_VAR 0 5
35363: ARRAY
35364: ARRAY
35365: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
35366: LD_ADDR_VAR 0 7
35370: PUSH
35371: LD_VAR 0 7
35375: PUSH
35376: LD_VAR 0 6
35380: PUSH
35381: EMPTY
35382: LIST
35383: ADD
35384: ST_TO_ADDR
// end ;
35385: GO 35341
35387: POP
35388: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
35389: LD_ADDR_VAR 0 6
35393: PUSH
35394: LD_VAR 0 6
35398: PPUSH
35399: LD_VAR 0 2
35403: PUSH
35404: LD_VAR 0 2
35408: ARRAY
35409: PPUSH
35410: LD_VAR 0 3
35414: PPUSH
35415: CALL_OW 1
35419: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
35420: LD_ADDR_VAR 0 7
35424: PUSH
35425: LD_VAR 0 7
35429: PPUSH
35430: LD_VAR 0 7
35434: PPUSH
35435: LD_VAR 0 6
35439: PPUSH
35440: CALL_OW 1
35444: ST_TO_ADDR
// for i = s_arr downto 2 do
35445: LD_ADDR_VAR 0 5
35449: PUSH
35450: DOUBLE
35451: LD_VAR 0 7
35455: INC
35456: ST_TO_ADDR
35457: LD_INT 2
35459: PUSH
35460: FOR_DOWNTO
35461: IFFALSE 35545
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
35463: LD_ADDR_VAR 0 6
35467: PUSH
35468: LD_VAR 0 7
35472: PUSH
35473: LD_VAR 0 5
35477: PUSH
35478: LD_INT 1
35480: MINUS
35481: ARRAY
35482: PPUSH
35483: LD_VAR 0 2
35487: PUSH
35488: LD_VAR 0 5
35492: PUSH
35493: LD_INT 1
35495: MINUS
35496: ARRAY
35497: PPUSH
35498: LD_VAR 0 7
35502: PUSH
35503: LD_VAR 0 5
35507: ARRAY
35508: PPUSH
35509: CALL_OW 1
35513: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
35514: LD_ADDR_VAR 0 7
35518: PUSH
35519: LD_VAR 0 7
35523: PPUSH
35524: LD_VAR 0 5
35528: PUSH
35529: LD_INT 1
35531: MINUS
35532: PPUSH
35533: LD_VAR 0 6
35537: PPUSH
35538: CALL_OW 1
35542: ST_TO_ADDR
// end ;
35543: GO 35460
35545: POP
35546: POP
// result := s_arr [ 1 ] ;
35547: LD_ADDR_VAR 0 4
35551: PUSH
35552: LD_VAR 0 7
35556: PUSH
35557: LD_INT 1
35559: ARRAY
35560: ST_TO_ADDR
// end ; end ;
35561: LD_VAR 0 4
35565: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
35566: LD_INT 0
35568: PPUSH
35569: PPUSH
// if not list then
35570: LD_VAR 0 1
35574: NOT
35575: IFFALSE 35579
// exit ;
35577: GO 35670
// i := list [ pos1 ] ;
35579: LD_ADDR_VAR 0 5
35583: PUSH
35584: LD_VAR 0 1
35588: PUSH
35589: LD_VAR 0 2
35593: ARRAY
35594: ST_TO_ADDR
// if not i then
35595: LD_VAR 0 5
35599: NOT
35600: IFFALSE 35604
// exit ;
35602: GO 35670
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
35604: LD_ADDR_VAR 0 1
35608: PUSH
35609: LD_VAR 0 1
35613: PPUSH
35614: LD_VAR 0 2
35618: PPUSH
35619: LD_VAR 0 1
35623: PUSH
35624: LD_VAR 0 3
35628: ARRAY
35629: PPUSH
35630: CALL_OW 1
35634: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
35635: LD_ADDR_VAR 0 1
35639: PUSH
35640: LD_VAR 0 1
35644: PPUSH
35645: LD_VAR 0 3
35649: PPUSH
35650: LD_VAR 0 5
35654: PPUSH
35655: CALL_OW 1
35659: ST_TO_ADDR
// result := list ;
35660: LD_ADDR_VAR 0 4
35664: PUSH
35665: LD_VAR 0 1
35669: ST_TO_ADDR
// end ;
35670: LD_VAR 0 4
35674: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
35675: LD_INT 0
35677: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
35678: LD_ADDR_VAR 0 5
35682: PUSH
35683: LD_VAR 0 1
35687: PPUSH
35688: CALL_OW 250
35692: PPUSH
35693: LD_VAR 0 1
35697: PPUSH
35698: CALL_OW 251
35702: PPUSH
35703: LD_VAR 0 2
35707: PPUSH
35708: LD_VAR 0 3
35712: PPUSH
35713: LD_VAR 0 4
35717: PPUSH
35718: CALL 35728 0 5
35722: ST_TO_ADDR
// end ;
35723: LD_VAR 0 5
35727: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
35728: LD_INT 0
35730: PPUSH
35731: PPUSH
35732: PPUSH
35733: PPUSH
// if not list then
35734: LD_VAR 0 3
35738: NOT
35739: IFFALSE 35743
// exit ;
35741: GO 36131
// result := [ ] ;
35743: LD_ADDR_VAR 0 6
35747: PUSH
35748: EMPTY
35749: ST_TO_ADDR
// for i in list do
35750: LD_ADDR_VAR 0 7
35754: PUSH
35755: LD_VAR 0 3
35759: PUSH
35760: FOR_IN
35761: IFFALSE 35963
// begin tmp := GetDistUnitXY ( i , x , y ) ;
35763: LD_ADDR_VAR 0 9
35767: PUSH
35768: LD_VAR 0 7
35772: PPUSH
35773: LD_VAR 0 1
35777: PPUSH
35778: LD_VAR 0 2
35782: PPUSH
35783: CALL_OW 297
35787: ST_TO_ADDR
// if not result then
35788: LD_VAR 0 6
35792: NOT
35793: IFFALSE 35819
// result := [ [ i , tmp ] ] else
35795: LD_ADDR_VAR 0 6
35799: PUSH
35800: LD_VAR 0 7
35804: PUSH
35805: LD_VAR 0 9
35809: PUSH
35810: EMPTY
35811: LIST
35812: LIST
35813: PUSH
35814: EMPTY
35815: LIST
35816: ST_TO_ADDR
35817: GO 35961
// begin if result [ result ] [ 2 ] < tmp then
35819: LD_VAR 0 6
35823: PUSH
35824: LD_VAR 0 6
35828: ARRAY
35829: PUSH
35830: LD_INT 2
35832: ARRAY
35833: PUSH
35834: LD_VAR 0 9
35838: LESS
35839: IFFALSE 35881
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
35841: LD_ADDR_VAR 0 6
35845: PUSH
35846: LD_VAR 0 6
35850: PPUSH
35851: LD_VAR 0 6
35855: PUSH
35856: LD_INT 1
35858: PLUS
35859: PPUSH
35860: LD_VAR 0 7
35864: PUSH
35865: LD_VAR 0 9
35869: PUSH
35870: EMPTY
35871: LIST
35872: LIST
35873: PPUSH
35874: CALL_OW 2
35878: ST_TO_ADDR
35879: GO 35961
// for j = 1 to result do
35881: LD_ADDR_VAR 0 8
35885: PUSH
35886: DOUBLE
35887: LD_INT 1
35889: DEC
35890: ST_TO_ADDR
35891: LD_VAR 0 6
35895: PUSH
35896: FOR_TO
35897: IFFALSE 35959
// begin if tmp < result [ j ] [ 2 ] then
35899: LD_VAR 0 9
35903: PUSH
35904: LD_VAR 0 6
35908: PUSH
35909: LD_VAR 0 8
35913: ARRAY
35914: PUSH
35915: LD_INT 2
35917: ARRAY
35918: LESS
35919: IFFALSE 35957
// begin result := Insert ( result , j , [ i , tmp ] ) ;
35921: LD_ADDR_VAR 0 6
35925: PUSH
35926: LD_VAR 0 6
35930: PPUSH
35931: LD_VAR 0 8
35935: PPUSH
35936: LD_VAR 0 7
35940: PUSH
35941: LD_VAR 0 9
35945: PUSH
35946: EMPTY
35947: LIST
35948: LIST
35949: PPUSH
35950: CALL_OW 2
35954: ST_TO_ADDR
// break ;
35955: GO 35959
// end ; end ;
35957: GO 35896
35959: POP
35960: POP
// end ; end ;
35961: GO 35760
35963: POP
35964: POP
// if result and not asc then
35965: LD_VAR 0 6
35969: PUSH
35970: LD_VAR 0 4
35974: NOT
35975: AND
35976: IFFALSE 36051
// begin tmp := result ;
35978: LD_ADDR_VAR 0 9
35982: PUSH
35983: LD_VAR 0 6
35987: ST_TO_ADDR
// for i = tmp downto 1 do
35988: LD_ADDR_VAR 0 7
35992: PUSH
35993: DOUBLE
35994: LD_VAR 0 9
35998: INC
35999: ST_TO_ADDR
36000: LD_INT 1
36002: PUSH
36003: FOR_DOWNTO
36004: IFFALSE 36049
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
36006: LD_ADDR_VAR 0 6
36010: PUSH
36011: LD_VAR 0 6
36015: PPUSH
36016: LD_VAR 0 9
36020: PUSH
36021: LD_VAR 0 7
36025: MINUS
36026: PUSH
36027: LD_INT 1
36029: PLUS
36030: PPUSH
36031: LD_VAR 0 9
36035: PUSH
36036: LD_VAR 0 7
36040: ARRAY
36041: PPUSH
36042: CALL_OW 1
36046: ST_TO_ADDR
36047: GO 36003
36049: POP
36050: POP
// end ; tmp := [ ] ;
36051: LD_ADDR_VAR 0 9
36055: PUSH
36056: EMPTY
36057: ST_TO_ADDR
// if mode then
36058: LD_VAR 0 5
36062: IFFALSE 36131
// begin for i = 1 to result do
36064: LD_ADDR_VAR 0 7
36068: PUSH
36069: DOUBLE
36070: LD_INT 1
36072: DEC
36073: ST_TO_ADDR
36074: LD_VAR 0 6
36078: PUSH
36079: FOR_TO
36080: IFFALSE 36119
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
36082: LD_ADDR_VAR 0 9
36086: PUSH
36087: LD_VAR 0 9
36091: PPUSH
36092: LD_VAR 0 7
36096: PPUSH
36097: LD_VAR 0 6
36101: PUSH
36102: LD_VAR 0 7
36106: ARRAY
36107: PUSH
36108: LD_INT 1
36110: ARRAY
36111: PPUSH
36112: CALL_OW 1
36116: ST_TO_ADDR
36117: GO 36079
36119: POP
36120: POP
// result := tmp ;
36121: LD_ADDR_VAR 0 6
36125: PUSH
36126: LD_VAR 0 9
36130: ST_TO_ADDR
// end ; end ;
36131: LD_VAR 0 6
36135: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
36136: LD_INT 0
36138: PPUSH
36139: PPUSH
36140: PPUSH
36141: PPUSH
36142: PPUSH
36143: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
36144: LD_ADDR_VAR 0 5
36148: PUSH
36149: LD_INT 0
36151: PUSH
36152: LD_INT 0
36154: PUSH
36155: LD_INT 0
36157: PUSH
36158: EMPTY
36159: PUSH
36160: EMPTY
36161: LIST
36162: LIST
36163: LIST
36164: LIST
36165: ST_TO_ADDR
// if not x or not y then
36166: LD_VAR 0 2
36170: NOT
36171: PUSH
36172: LD_VAR 0 3
36176: NOT
36177: OR
36178: IFFALSE 36182
// exit ;
36180: GO 37834
// if not range then
36182: LD_VAR 0 4
36186: NOT
36187: IFFALSE 36197
// range := 10 ;
36189: LD_ADDR_VAR 0 4
36193: PUSH
36194: LD_INT 10
36196: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
36197: LD_ADDR_VAR 0 8
36201: PUSH
36202: LD_INT 81
36204: PUSH
36205: LD_VAR 0 1
36209: PUSH
36210: EMPTY
36211: LIST
36212: LIST
36213: PUSH
36214: LD_INT 92
36216: PUSH
36217: LD_VAR 0 2
36221: PUSH
36222: LD_VAR 0 3
36226: PUSH
36227: LD_VAR 0 4
36231: PUSH
36232: EMPTY
36233: LIST
36234: LIST
36235: LIST
36236: LIST
36237: PUSH
36238: LD_INT 3
36240: PUSH
36241: LD_INT 21
36243: PUSH
36244: LD_INT 3
36246: PUSH
36247: EMPTY
36248: LIST
36249: LIST
36250: PUSH
36251: EMPTY
36252: LIST
36253: LIST
36254: PUSH
36255: EMPTY
36256: LIST
36257: LIST
36258: LIST
36259: PPUSH
36260: CALL_OW 69
36264: ST_TO_ADDR
// if not tmp then
36265: LD_VAR 0 8
36269: NOT
36270: IFFALSE 36274
// exit ;
36272: GO 37834
// for i in tmp do
36274: LD_ADDR_VAR 0 6
36278: PUSH
36279: LD_VAR 0 8
36283: PUSH
36284: FOR_IN
36285: IFFALSE 37809
// begin points := [ 0 , 0 , 0 ] ;
36287: LD_ADDR_VAR 0 9
36291: PUSH
36292: LD_INT 0
36294: PUSH
36295: LD_INT 0
36297: PUSH
36298: LD_INT 0
36300: PUSH
36301: EMPTY
36302: LIST
36303: LIST
36304: LIST
36305: ST_TO_ADDR
// bpoints := 1 ;
36306: LD_ADDR_VAR 0 10
36310: PUSH
36311: LD_INT 1
36313: ST_TO_ADDR
// case GetType ( i ) of unit_human :
36314: LD_VAR 0 6
36318: PPUSH
36319: CALL_OW 247
36323: PUSH
36324: LD_INT 1
36326: DOUBLE
36327: EQUAL
36328: IFTRUE 36332
36330: GO 36910
36332: POP
// begin if GetClass ( i ) = 1 then
36333: LD_VAR 0 6
36337: PPUSH
36338: CALL_OW 257
36342: PUSH
36343: LD_INT 1
36345: EQUAL
36346: IFFALSE 36367
// points := [ 10 , 5 , 3 ] ;
36348: LD_ADDR_VAR 0 9
36352: PUSH
36353: LD_INT 10
36355: PUSH
36356: LD_INT 5
36358: PUSH
36359: LD_INT 3
36361: PUSH
36362: EMPTY
36363: LIST
36364: LIST
36365: LIST
36366: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
36367: LD_VAR 0 6
36371: PPUSH
36372: CALL_OW 257
36376: PUSH
36377: LD_INT 2
36379: PUSH
36380: LD_INT 3
36382: PUSH
36383: LD_INT 4
36385: PUSH
36386: EMPTY
36387: LIST
36388: LIST
36389: LIST
36390: IN
36391: IFFALSE 36412
// points := [ 3 , 2 , 1 ] ;
36393: LD_ADDR_VAR 0 9
36397: PUSH
36398: LD_INT 3
36400: PUSH
36401: LD_INT 2
36403: PUSH
36404: LD_INT 1
36406: PUSH
36407: EMPTY
36408: LIST
36409: LIST
36410: LIST
36411: ST_TO_ADDR
// if GetClass ( i ) = 5 then
36412: LD_VAR 0 6
36416: PPUSH
36417: CALL_OW 257
36421: PUSH
36422: LD_INT 5
36424: EQUAL
36425: IFFALSE 36446
// points := [ 130 , 5 , 2 ] ;
36427: LD_ADDR_VAR 0 9
36431: PUSH
36432: LD_INT 130
36434: PUSH
36435: LD_INT 5
36437: PUSH
36438: LD_INT 2
36440: PUSH
36441: EMPTY
36442: LIST
36443: LIST
36444: LIST
36445: ST_TO_ADDR
// if GetClass ( i ) = 8 then
36446: LD_VAR 0 6
36450: PPUSH
36451: CALL_OW 257
36455: PUSH
36456: LD_INT 8
36458: EQUAL
36459: IFFALSE 36480
// points := [ 35 , 35 , 30 ] ;
36461: LD_ADDR_VAR 0 9
36465: PUSH
36466: LD_INT 35
36468: PUSH
36469: LD_INT 35
36471: PUSH
36472: LD_INT 30
36474: PUSH
36475: EMPTY
36476: LIST
36477: LIST
36478: LIST
36479: ST_TO_ADDR
// if GetClass ( i ) = 9 then
36480: LD_VAR 0 6
36484: PPUSH
36485: CALL_OW 257
36489: PUSH
36490: LD_INT 9
36492: EQUAL
36493: IFFALSE 36514
// points := [ 20 , 55 , 40 ] ;
36495: LD_ADDR_VAR 0 9
36499: PUSH
36500: LD_INT 20
36502: PUSH
36503: LD_INT 55
36505: PUSH
36506: LD_INT 40
36508: PUSH
36509: EMPTY
36510: LIST
36511: LIST
36512: LIST
36513: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
36514: LD_VAR 0 6
36518: PPUSH
36519: CALL_OW 257
36523: PUSH
36524: LD_INT 12
36526: PUSH
36527: LD_INT 16
36529: PUSH
36530: EMPTY
36531: LIST
36532: LIST
36533: IN
36534: IFFALSE 36555
// points := [ 5 , 3 , 2 ] ;
36536: LD_ADDR_VAR 0 9
36540: PUSH
36541: LD_INT 5
36543: PUSH
36544: LD_INT 3
36546: PUSH
36547: LD_INT 2
36549: PUSH
36550: EMPTY
36551: LIST
36552: LIST
36553: LIST
36554: ST_TO_ADDR
// if GetClass ( i ) = 17 then
36555: LD_VAR 0 6
36559: PPUSH
36560: CALL_OW 257
36564: PUSH
36565: LD_INT 17
36567: EQUAL
36568: IFFALSE 36589
// points := [ 100 , 50 , 75 ] ;
36570: LD_ADDR_VAR 0 9
36574: PUSH
36575: LD_INT 100
36577: PUSH
36578: LD_INT 50
36580: PUSH
36581: LD_INT 75
36583: PUSH
36584: EMPTY
36585: LIST
36586: LIST
36587: LIST
36588: ST_TO_ADDR
// if GetClass ( i ) = 15 then
36589: LD_VAR 0 6
36593: PPUSH
36594: CALL_OW 257
36598: PUSH
36599: LD_INT 15
36601: EQUAL
36602: IFFALSE 36623
// points := [ 10 , 5 , 3 ] ;
36604: LD_ADDR_VAR 0 9
36608: PUSH
36609: LD_INT 10
36611: PUSH
36612: LD_INT 5
36614: PUSH
36615: LD_INT 3
36617: PUSH
36618: EMPTY
36619: LIST
36620: LIST
36621: LIST
36622: ST_TO_ADDR
// if GetClass ( i ) = 14 then
36623: LD_VAR 0 6
36627: PPUSH
36628: CALL_OW 257
36632: PUSH
36633: LD_INT 14
36635: EQUAL
36636: IFFALSE 36657
// points := [ 10 , 0 , 0 ] ;
36638: LD_ADDR_VAR 0 9
36642: PUSH
36643: LD_INT 10
36645: PUSH
36646: LD_INT 0
36648: PUSH
36649: LD_INT 0
36651: PUSH
36652: EMPTY
36653: LIST
36654: LIST
36655: LIST
36656: ST_TO_ADDR
// if GetClass ( i ) = 11 then
36657: LD_VAR 0 6
36661: PPUSH
36662: CALL_OW 257
36666: PUSH
36667: LD_INT 11
36669: EQUAL
36670: IFFALSE 36691
// points := [ 30 , 10 , 5 ] ;
36672: LD_ADDR_VAR 0 9
36676: PUSH
36677: LD_INT 30
36679: PUSH
36680: LD_INT 10
36682: PUSH
36683: LD_INT 5
36685: PUSH
36686: EMPTY
36687: LIST
36688: LIST
36689: LIST
36690: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
36691: LD_VAR 0 1
36695: PPUSH
36696: LD_INT 5
36698: PPUSH
36699: CALL_OW 321
36703: PUSH
36704: LD_INT 2
36706: EQUAL
36707: IFFALSE 36724
// bpoints := bpoints * 1.8 ;
36709: LD_ADDR_VAR 0 10
36713: PUSH
36714: LD_VAR 0 10
36718: PUSH
36719: LD_REAL  1.80000000000000E+0000
36722: MUL
36723: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
36724: LD_VAR 0 6
36728: PPUSH
36729: CALL_OW 257
36733: PUSH
36734: LD_INT 1
36736: PUSH
36737: LD_INT 2
36739: PUSH
36740: LD_INT 3
36742: PUSH
36743: LD_INT 4
36745: PUSH
36746: EMPTY
36747: LIST
36748: LIST
36749: LIST
36750: LIST
36751: IN
36752: PUSH
36753: LD_VAR 0 1
36757: PPUSH
36758: LD_INT 51
36760: PPUSH
36761: CALL_OW 321
36765: PUSH
36766: LD_INT 2
36768: EQUAL
36769: AND
36770: IFFALSE 36787
// bpoints := bpoints * 1.2 ;
36772: LD_ADDR_VAR 0 10
36776: PUSH
36777: LD_VAR 0 10
36781: PUSH
36782: LD_REAL  1.20000000000000E+0000
36785: MUL
36786: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
36787: LD_VAR 0 6
36791: PPUSH
36792: CALL_OW 257
36796: PUSH
36797: LD_INT 5
36799: PUSH
36800: LD_INT 7
36802: PUSH
36803: LD_INT 9
36805: PUSH
36806: EMPTY
36807: LIST
36808: LIST
36809: LIST
36810: IN
36811: PUSH
36812: LD_VAR 0 1
36816: PPUSH
36817: LD_INT 52
36819: PPUSH
36820: CALL_OW 321
36824: PUSH
36825: LD_INT 2
36827: EQUAL
36828: AND
36829: IFFALSE 36846
// bpoints := bpoints * 1.5 ;
36831: LD_ADDR_VAR 0 10
36835: PUSH
36836: LD_VAR 0 10
36840: PUSH
36841: LD_REAL  1.50000000000000E+0000
36844: MUL
36845: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
36846: LD_VAR 0 1
36850: PPUSH
36851: LD_INT 66
36853: PPUSH
36854: CALL_OW 321
36858: PUSH
36859: LD_INT 2
36861: EQUAL
36862: IFFALSE 36879
// bpoints := bpoints * 1.1 ;
36864: LD_ADDR_VAR 0 10
36868: PUSH
36869: LD_VAR 0 10
36873: PUSH
36874: LD_REAL  1.10000000000000E+0000
36877: MUL
36878: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
36879: LD_ADDR_VAR 0 10
36883: PUSH
36884: LD_VAR 0 10
36888: PUSH
36889: LD_VAR 0 6
36893: PPUSH
36894: LD_INT 1
36896: PPUSH
36897: CALL_OW 259
36901: PUSH
36902: LD_REAL  1.15000000000000E+0000
36905: MUL
36906: MUL
36907: ST_TO_ADDR
// end ; unit_vehicle :
36908: GO 37738
36910: LD_INT 2
36912: DOUBLE
36913: EQUAL
36914: IFTRUE 36918
36916: GO 37726
36918: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
36919: LD_VAR 0 6
36923: PPUSH
36924: CALL_OW 264
36928: PUSH
36929: LD_INT 2
36931: PUSH
36932: LD_INT 42
36934: PUSH
36935: LD_INT 24
36937: PUSH
36938: EMPTY
36939: LIST
36940: LIST
36941: LIST
36942: IN
36943: IFFALSE 36964
// points := [ 25 , 5 , 3 ] ;
36945: LD_ADDR_VAR 0 9
36949: PUSH
36950: LD_INT 25
36952: PUSH
36953: LD_INT 5
36955: PUSH
36956: LD_INT 3
36958: PUSH
36959: EMPTY
36960: LIST
36961: LIST
36962: LIST
36963: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
36964: LD_VAR 0 6
36968: PPUSH
36969: CALL_OW 264
36973: PUSH
36974: LD_INT 4
36976: PUSH
36977: LD_INT 43
36979: PUSH
36980: LD_INT 25
36982: PUSH
36983: EMPTY
36984: LIST
36985: LIST
36986: LIST
36987: IN
36988: IFFALSE 37009
// points := [ 40 , 15 , 5 ] ;
36990: LD_ADDR_VAR 0 9
36994: PUSH
36995: LD_INT 40
36997: PUSH
36998: LD_INT 15
37000: PUSH
37001: LD_INT 5
37003: PUSH
37004: EMPTY
37005: LIST
37006: LIST
37007: LIST
37008: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
37009: LD_VAR 0 6
37013: PPUSH
37014: CALL_OW 264
37018: PUSH
37019: LD_INT 3
37021: PUSH
37022: LD_INT 23
37024: PUSH
37025: EMPTY
37026: LIST
37027: LIST
37028: IN
37029: IFFALSE 37050
// points := [ 7 , 25 , 8 ] ;
37031: LD_ADDR_VAR 0 9
37035: PUSH
37036: LD_INT 7
37038: PUSH
37039: LD_INT 25
37041: PUSH
37042: LD_INT 8
37044: PUSH
37045: EMPTY
37046: LIST
37047: LIST
37048: LIST
37049: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
37050: LD_VAR 0 6
37054: PPUSH
37055: CALL_OW 264
37059: PUSH
37060: LD_INT 5
37062: PUSH
37063: LD_INT 27
37065: PUSH
37066: LD_INT 44
37068: PUSH
37069: EMPTY
37070: LIST
37071: LIST
37072: LIST
37073: IN
37074: IFFALSE 37095
// points := [ 14 , 50 , 16 ] ;
37076: LD_ADDR_VAR 0 9
37080: PUSH
37081: LD_INT 14
37083: PUSH
37084: LD_INT 50
37086: PUSH
37087: LD_INT 16
37089: PUSH
37090: EMPTY
37091: LIST
37092: LIST
37093: LIST
37094: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
37095: LD_VAR 0 6
37099: PPUSH
37100: CALL_OW 264
37104: PUSH
37105: LD_INT 6
37107: PUSH
37108: LD_INT 46
37110: PUSH
37111: EMPTY
37112: LIST
37113: LIST
37114: IN
37115: IFFALSE 37136
// points := [ 32 , 120 , 70 ] ;
37117: LD_ADDR_VAR 0 9
37121: PUSH
37122: LD_INT 32
37124: PUSH
37125: LD_INT 120
37127: PUSH
37128: LD_INT 70
37130: PUSH
37131: EMPTY
37132: LIST
37133: LIST
37134: LIST
37135: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
37136: LD_VAR 0 6
37140: PPUSH
37141: CALL_OW 264
37145: PUSH
37146: LD_INT 7
37148: PUSH
37149: LD_INT 28
37151: PUSH
37152: LD_INT 45
37154: PUSH
37155: LD_EXP 31
37159: PUSH
37160: EMPTY
37161: LIST
37162: LIST
37163: LIST
37164: LIST
37165: IN
37166: IFFALSE 37187
// points := [ 35 , 20 , 45 ] ;
37168: LD_ADDR_VAR 0 9
37172: PUSH
37173: LD_INT 35
37175: PUSH
37176: LD_INT 20
37178: PUSH
37179: LD_INT 45
37181: PUSH
37182: EMPTY
37183: LIST
37184: LIST
37185: LIST
37186: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
37187: LD_VAR 0 6
37191: PPUSH
37192: CALL_OW 264
37196: PUSH
37197: LD_INT 47
37199: PUSH
37200: EMPTY
37201: LIST
37202: IN
37203: IFFALSE 37224
// points := [ 67 , 45 , 75 ] ;
37205: LD_ADDR_VAR 0 9
37209: PUSH
37210: LD_INT 67
37212: PUSH
37213: LD_INT 45
37215: PUSH
37216: LD_INT 75
37218: PUSH
37219: EMPTY
37220: LIST
37221: LIST
37222: LIST
37223: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
37224: LD_VAR 0 6
37228: PPUSH
37229: CALL_OW 264
37233: PUSH
37234: LD_INT 26
37236: PUSH
37237: EMPTY
37238: LIST
37239: IN
37240: IFFALSE 37261
// points := [ 120 , 30 , 80 ] ;
37242: LD_ADDR_VAR 0 9
37246: PUSH
37247: LD_INT 120
37249: PUSH
37250: LD_INT 30
37252: PUSH
37253: LD_INT 80
37255: PUSH
37256: EMPTY
37257: LIST
37258: LIST
37259: LIST
37260: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
37261: LD_VAR 0 6
37265: PPUSH
37266: CALL_OW 264
37270: PUSH
37271: LD_INT 22
37273: PUSH
37274: EMPTY
37275: LIST
37276: IN
37277: IFFALSE 37298
// points := [ 40 , 1 , 1 ] ;
37279: LD_ADDR_VAR 0 9
37283: PUSH
37284: LD_INT 40
37286: PUSH
37287: LD_INT 1
37289: PUSH
37290: LD_INT 1
37292: PUSH
37293: EMPTY
37294: LIST
37295: LIST
37296: LIST
37297: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
37298: LD_VAR 0 6
37302: PPUSH
37303: CALL_OW 264
37307: PUSH
37308: LD_INT 29
37310: PUSH
37311: EMPTY
37312: LIST
37313: IN
37314: IFFALSE 37335
// points := [ 70 , 200 , 400 ] ;
37316: LD_ADDR_VAR 0 9
37320: PUSH
37321: LD_INT 70
37323: PUSH
37324: LD_INT 200
37326: PUSH
37327: LD_INT 400
37329: PUSH
37330: EMPTY
37331: LIST
37332: LIST
37333: LIST
37334: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
37335: LD_VAR 0 6
37339: PPUSH
37340: CALL_OW 264
37344: PUSH
37345: LD_INT 14
37347: PUSH
37348: LD_INT 53
37350: PUSH
37351: EMPTY
37352: LIST
37353: LIST
37354: IN
37355: IFFALSE 37376
// points := [ 40 , 10 , 20 ] ;
37357: LD_ADDR_VAR 0 9
37361: PUSH
37362: LD_INT 40
37364: PUSH
37365: LD_INT 10
37367: PUSH
37368: LD_INT 20
37370: PUSH
37371: EMPTY
37372: LIST
37373: LIST
37374: LIST
37375: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
37376: LD_VAR 0 6
37380: PPUSH
37381: CALL_OW 264
37385: PUSH
37386: LD_INT 9
37388: PUSH
37389: EMPTY
37390: LIST
37391: IN
37392: IFFALSE 37413
// points := [ 5 , 70 , 20 ] ;
37394: LD_ADDR_VAR 0 9
37398: PUSH
37399: LD_INT 5
37401: PUSH
37402: LD_INT 70
37404: PUSH
37405: LD_INT 20
37407: PUSH
37408: EMPTY
37409: LIST
37410: LIST
37411: LIST
37412: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
37413: LD_VAR 0 6
37417: PPUSH
37418: CALL_OW 264
37422: PUSH
37423: LD_INT 10
37425: PUSH
37426: EMPTY
37427: LIST
37428: IN
37429: IFFALSE 37450
// points := [ 35 , 110 , 70 ] ;
37431: LD_ADDR_VAR 0 9
37435: PUSH
37436: LD_INT 35
37438: PUSH
37439: LD_INT 110
37441: PUSH
37442: LD_INT 70
37444: PUSH
37445: EMPTY
37446: LIST
37447: LIST
37448: LIST
37449: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
37450: LD_VAR 0 6
37454: PPUSH
37455: CALL_OW 265
37459: PUSH
37460: LD_INT 25
37462: EQUAL
37463: IFFALSE 37484
// points := [ 80 , 65 , 100 ] ;
37465: LD_ADDR_VAR 0 9
37469: PUSH
37470: LD_INT 80
37472: PUSH
37473: LD_INT 65
37475: PUSH
37476: LD_INT 100
37478: PUSH
37479: EMPTY
37480: LIST
37481: LIST
37482: LIST
37483: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
37484: LD_VAR 0 6
37488: PPUSH
37489: CALL_OW 263
37493: PUSH
37494: LD_INT 1
37496: EQUAL
37497: IFFALSE 37532
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
37499: LD_ADDR_VAR 0 10
37503: PUSH
37504: LD_VAR 0 10
37508: PUSH
37509: LD_VAR 0 6
37513: PPUSH
37514: CALL_OW 311
37518: PPUSH
37519: LD_INT 3
37521: PPUSH
37522: CALL_OW 259
37526: PUSH
37527: LD_INT 4
37529: MUL
37530: MUL
37531: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
37532: LD_VAR 0 6
37536: PPUSH
37537: CALL_OW 263
37541: PUSH
37542: LD_INT 2
37544: EQUAL
37545: IFFALSE 37596
// begin j := IsControledBy ( i ) ;
37547: LD_ADDR_VAR 0 7
37551: PUSH
37552: LD_VAR 0 6
37556: PPUSH
37557: CALL_OW 312
37561: ST_TO_ADDR
// if j then
37562: LD_VAR 0 7
37566: IFFALSE 37596
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
37568: LD_ADDR_VAR 0 10
37572: PUSH
37573: LD_VAR 0 10
37577: PUSH
37578: LD_VAR 0 7
37582: PPUSH
37583: LD_INT 3
37585: PPUSH
37586: CALL_OW 259
37590: PUSH
37591: LD_INT 3
37593: MUL
37594: MUL
37595: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
37596: LD_VAR 0 6
37600: PPUSH
37601: CALL_OW 264
37605: PUSH
37606: LD_INT 5
37608: PUSH
37609: LD_INT 6
37611: PUSH
37612: LD_INT 46
37614: PUSH
37615: LD_INT 44
37617: PUSH
37618: LD_INT 47
37620: PUSH
37621: LD_INT 45
37623: PUSH
37624: LD_INT 28
37626: PUSH
37627: LD_INT 7
37629: PUSH
37630: LD_INT 27
37632: PUSH
37633: LD_INT 29
37635: PUSH
37636: EMPTY
37637: LIST
37638: LIST
37639: LIST
37640: LIST
37641: LIST
37642: LIST
37643: LIST
37644: LIST
37645: LIST
37646: LIST
37647: IN
37648: PUSH
37649: LD_VAR 0 1
37653: PPUSH
37654: LD_INT 52
37656: PPUSH
37657: CALL_OW 321
37661: PUSH
37662: LD_INT 2
37664: EQUAL
37665: AND
37666: IFFALSE 37683
// bpoints := bpoints * 1.2 ;
37668: LD_ADDR_VAR 0 10
37672: PUSH
37673: LD_VAR 0 10
37677: PUSH
37678: LD_REAL  1.20000000000000E+0000
37681: MUL
37682: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
37683: LD_VAR 0 6
37687: PPUSH
37688: CALL_OW 264
37692: PUSH
37693: LD_INT 6
37695: PUSH
37696: LD_INT 46
37698: PUSH
37699: LD_INT 47
37701: PUSH
37702: EMPTY
37703: LIST
37704: LIST
37705: LIST
37706: IN
37707: IFFALSE 37724
// bpoints := bpoints * 1.2 ;
37709: LD_ADDR_VAR 0 10
37713: PUSH
37714: LD_VAR 0 10
37718: PUSH
37719: LD_REAL  1.20000000000000E+0000
37722: MUL
37723: ST_TO_ADDR
// end ; unit_building :
37724: GO 37738
37726: LD_INT 3
37728: DOUBLE
37729: EQUAL
37730: IFTRUE 37734
37732: GO 37737
37734: POP
// ; end ;
37735: GO 37738
37737: POP
// for j = 1 to 3 do
37738: LD_ADDR_VAR 0 7
37742: PUSH
37743: DOUBLE
37744: LD_INT 1
37746: DEC
37747: ST_TO_ADDR
37748: LD_INT 3
37750: PUSH
37751: FOR_TO
37752: IFFALSE 37805
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
37754: LD_ADDR_VAR 0 5
37758: PUSH
37759: LD_VAR 0 5
37763: PPUSH
37764: LD_VAR 0 7
37768: PPUSH
37769: LD_VAR 0 5
37773: PUSH
37774: LD_VAR 0 7
37778: ARRAY
37779: PUSH
37780: LD_VAR 0 9
37784: PUSH
37785: LD_VAR 0 7
37789: ARRAY
37790: PUSH
37791: LD_VAR 0 10
37795: MUL
37796: PLUS
37797: PPUSH
37798: CALL_OW 1
37802: ST_TO_ADDR
37803: GO 37751
37805: POP
37806: POP
// end ;
37807: GO 36284
37809: POP
37810: POP
// result := Replace ( result , 4 , tmp ) ;
37811: LD_ADDR_VAR 0 5
37815: PUSH
37816: LD_VAR 0 5
37820: PPUSH
37821: LD_INT 4
37823: PPUSH
37824: LD_VAR 0 8
37828: PPUSH
37829: CALL_OW 1
37833: ST_TO_ADDR
// end ;
37834: LD_VAR 0 5
37838: RET
// export function DangerAtRange ( unit , range ) ; begin
37839: LD_INT 0
37841: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
37842: LD_ADDR_VAR 0 3
37846: PUSH
37847: LD_VAR 0 1
37851: PPUSH
37852: CALL_OW 255
37856: PPUSH
37857: LD_VAR 0 1
37861: PPUSH
37862: CALL_OW 250
37866: PPUSH
37867: LD_VAR 0 1
37871: PPUSH
37872: CALL_OW 251
37876: PPUSH
37877: LD_VAR 0 2
37881: PPUSH
37882: CALL 36136 0 4
37886: ST_TO_ADDR
// end ;
37887: LD_VAR 0 3
37891: RET
// export function DangerInArea ( side , area ) ; begin
37892: LD_INT 0
37894: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
37895: LD_ADDR_VAR 0 3
37899: PUSH
37900: LD_VAR 0 2
37904: PPUSH
37905: LD_INT 81
37907: PUSH
37908: LD_VAR 0 1
37912: PUSH
37913: EMPTY
37914: LIST
37915: LIST
37916: PPUSH
37917: CALL_OW 70
37921: ST_TO_ADDR
// end ;
37922: LD_VAR 0 3
37926: RET
// export function IsExtension ( b ) ; begin
37927: LD_INT 0
37929: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
37930: LD_ADDR_VAR 0 2
37934: PUSH
37935: LD_VAR 0 1
37939: PUSH
37940: LD_INT 23
37942: PUSH
37943: LD_INT 20
37945: PUSH
37946: LD_INT 22
37948: PUSH
37949: LD_INT 17
37951: PUSH
37952: LD_INT 24
37954: PUSH
37955: LD_INT 21
37957: PUSH
37958: LD_INT 19
37960: PUSH
37961: LD_INT 16
37963: PUSH
37964: LD_INT 25
37966: PUSH
37967: LD_INT 18
37969: PUSH
37970: EMPTY
37971: LIST
37972: LIST
37973: LIST
37974: LIST
37975: LIST
37976: LIST
37977: LIST
37978: LIST
37979: LIST
37980: LIST
37981: IN
37982: ST_TO_ADDR
// end ;
37983: LD_VAR 0 2
37987: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
37988: LD_INT 0
37990: PPUSH
37991: PPUSH
37992: PPUSH
// result := [ ] ;
37993: LD_ADDR_VAR 0 4
37997: PUSH
37998: EMPTY
37999: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
38000: LD_ADDR_VAR 0 5
38004: PUSH
38005: LD_VAR 0 2
38009: PPUSH
38010: LD_INT 21
38012: PUSH
38013: LD_INT 3
38015: PUSH
38016: EMPTY
38017: LIST
38018: LIST
38019: PPUSH
38020: CALL_OW 70
38024: ST_TO_ADDR
// if not tmp then
38025: LD_VAR 0 5
38029: NOT
38030: IFFALSE 38034
// exit ;
38032: GO 38098
// if checkLink then
38034: LD_VAR 0 3
38038: IFFALSE 38088
// begin for i in tmp do
38040: LD_ADDR_VAR 0 6
38044: PUSH
38045: LD_VAR 0 5
38049: PUSH
38050: FOR_IN
38051: IFFALSE 38086
// if GetBase ( i ) <> base then
38053: LD_VAR 0 6
38057: PPUSH
38058: CALL_OW 274
38062: PUSH
38063: LD_VAR 0 1
38067: NONEQUAL
38068: IFFALSE 38084
// ComLinkToBase ( base , i ) ;
38070: LD_VAR 0 1
38074: PPUSH
38075: LD_VAR 0 6
38079: PPUSH
38080: CALL_OW 169
38084: GO 38050
38086: POP
38087: POP
// end ; result := tmp ;
38088: LD_ADDR_VAR 0 4
38092: PUSH
38093: LD_VAR 0 5
38097: ST_TO_ADDR
// end ;
38098: LD_VAR 0 4
38102: RET
// export function ComComplete ( units , b ) ; var i ; begin
38103: LD_INT 0
38105: PPUSH
38106: PPUSH
// if not units then
38107: LD_VAR 0 1
38111: NOT
38112: IFFALSE 38116
// exit ;
38114: GO 38206
// for i in units do
38116: LD_ADDR_VAR 0 4
38120: PUSH
38121: LD_VAR 0 1
38125: PUSH
38126: FOR_IN
38127: IFFALSE 38204
// if BuildingStatus ( b ) = bs_build then
38129: LD_VAR 0 2
38133: PPUSH
38134: CALL_OW 461
38138: PUSH
38139: LD_INT 1
38141: EQUAL
38142: IFFALSE 38202
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
38144: LD_VAR 0 4
38148: PPUSH
38149: LD_STRING h
38151: PUSH
38152: LD_VAR 0 2
38156: PPUSH
38157: CALL_OW 250
38161: PUSH
38162: LD_VAR 0 2
38166: PPUSH
38167: CALL_OW 251
38171: PUSH
38172: LD_VAR 0 2
38176: PUSH
38177: LD_INT 0
38179: PUSH
38180: LD_INT 0
38182: PUSH
38183: LD_INT 0
38185: PUSH
38186: EMPTY
38187: LIST
38188: LIST
38189: LIST
38190: LIST
38191: LIST
38192: LIST
38193: LIST
38194: PUSH
38195: EMPTY
38196: LIST
38197: PPUSH
38198: CALL_OW 446
38202: GO 38126
38204: POP
38205: POP
// end ;
38206: LD_VAR 0 3
38210: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
38211: LD_INT 0
38213: PPUSH
38214: PPUSH
38215: PPUSH
38216: PPUSH
38217: PPUSH
38218: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
38219: LD_VAR 0 1
38223: NOT
38224: PUSH
38225: LD_VAR 0 1
38229: PPUSH
38230: CALL_OW 263
38234: PUSH
38235: LD_INT 2
38237: NONEQUAL
38238: OR
38239: IFFALSE 38243
// exit ;
38241: GO 38559
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
38243: LD_ADDR_VAR 0 6
38247: PUSH
38248: LD_INT 22
38250: PUSH
38251: LD_VAR 0 1
38255: PPUSH
38256: CALL_OW 255
38260: PUSH
38261: EMPTY
38262: LIST
38263: LIST
38264: PUSH
38265: LD_INT 2
38267: PUSH
38268: LD_INT 30
38270: PUSH
38271: LD_INT 36
38273: PUSH
38274: EMPTY
38275: LIST
38276: LIST
38277: PUSH
38278: LD_INT 34
38280: PUSH
38281: LD_INT 31
38283: PUSH
38284: EMPTY
38285: LIST
38286: LIST
38287: PUSH
38288: EMPTY
38289: LIST
38290: LIST
38291: LIST
38292: PUSH
38293: EMPTY
38294: LIST
38295: LIST
38296: PPUSH
38297: CALL_OW 69
38301: ST_TO_ADDR
// if not tmp then
38302: LD_VAR 0 6
38306: NOT
38307: IFFALSE 38311
// exit ;
38309: GO 38559
// result := [ ] ;
38311: LD_ADDR_VAR 0 2
38315: PUSH
38316: EMPTY
38317: ST_TO_ADDR
// for i in tmp do
38318: LD_ADDR_VAR 0 3
38322: PUSH
38323: LD_VAR 0 6
38327: PUSH
38328: FOR_IN
38329: IFFALSE 38400
// begin t := UnitsInside ( i ) ;
38331: LD_ADDR_VAR 0 4
38335: PUSH
38336: LD_VAR 0 3
38340: PPUSH
38341: CALL_OW 313
38345: ST_TO_ADDR
// if t then
38346: LD_VAR 0 4
38350: IFFALSE 38398
// for j in t do
38352: LD_ADDR_VAR 0 7
38356: PUSH
38357: LD_VAR 0 4
38361: PUSH
38362: FOR_IN
38363: IFFALSE 38396
// result := Replace ( result , result + 1 , j ) ;
38365: LD_ADDR_VAR 0 2
38369: PUSH
38370: LD_VAR 0 2
38374: PPUSH
38375: LD_VAR 0 2
38379: PUSH
38380: LD_INT 1
38382: PLUS
38383: PPUSH
38384: LD_VAR 0 7
38388: PPUSH
38389: CALL_OW 1
38393: ST_TO_ADDR
38394: GO 38362
38396: POP
38397: POP
// end ;
38398: GO 38328
38400: POP
38401: POP
// if not result then
38402: LD_VAR 0 2
38406: NOT
38407: IFFALSE 38411
// exit ;
38409: GO 38559
// mech := result [ 1 ] ;
38411: LD_ADDR_VAR 0 5
38415: PUSH
38416: LD_VAR 0 2
38420: PUSH
38421: LD_INT 1
38423: ARRAY
38424: ST_TO_ADDR
// if result > 1 then
38425: LD_VAR 0 2
38429: PUSH
38430: LD_INT 1
38432: GREATER
38433: IFFALSE 38545
// begin for i = 2 to result do
38435: LD_ADDR_VAR 0 3
38439: PUSH
38440: DOUBLE
38441: LD_INT 2
38443: DEC
38444: ST_TO_ADDR
38445: LD_VAR 0 2
38449: PUSH
38450: FOR_TO
38451: IFFALSE 38543
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
38453: LD_ADDR_VAR 0 4
38457: PUSH
38458: LD_VAR 0 2
38462: PUSH
38463: LD_VAR 0 3
38467: ARRAY
38468: PPUSH
38469: LD_INT 3
38471: PPUSH
38472: CALL_OW 259
38476: PUSH
38477: LD_VAR 0 2
38481: PUSH
38482: LD_VAR 0 3
38486: ARRAY
38487: PPUSH
38488: CALL_OW 432
38492: MINUS
38493: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
38494: LD_VAR 0 4
38498: PUSH
38499: LD_VAR 0 5
38503: PPUSH
38504: LD_INT 3
38506: PPUSH
38507: CALL_OW 259
38511: PUSH
38512: LD_VAR 0 5
38516: PPUSH
38517: CALL_OW 432
38521: MINUS
38522: GREATEREQUAL
38523: IFFALSE 38541
// mech := result [ i ] ;
38525: LD_ADDR_VAR 0 5
38529: PUSH
38530: LD_VAR 0 2
38534: PUSH
38535: LD_VAR 0 3
38539: ARRAY
38540: ST_TO_ADDR
// end ;
38541: GO 38450
38543: POP
38544: POP
// end ; ComLinkTo ( vehicle , mech ) ;
38545: LD_VAR 0 1
38549: PPUSH
38550: LD_VAR 0 5
38554: PPUSH
38555: CALL_OW 135
// end ;
38559: LD_VAR 0 2
38563: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
38564: LD_INT 0
38566: PPUSH
38567: PPUSH
38568: PPUSH
38569: PPUSH
38570: PPUSH
38571: PPUSH
38572: PPUSH
38573: PPUSH
38574: PPUSH
38575: PPUSH
38576: PPUSH
38577: PPUSH
38578: PPUSH
// result := [ ] ;
38579: LD_ADDR_VAR 0 7
38583: PUSH
38584: EMPTY
38585: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
38586: LD_VAR 0 1
38590: PPUSH
38591: CALL_OW 266
38595: PUSH
38596: LD_INT 0
38598: PUSH
38599: LD_INT 1
38601: PUSH
38602: EMPTY
38603: LIST
38604: LIST
38605: IN
38606: NOT
38607: IFFALSE 38611
// exit ;
38609: GO 40245
// if name then
38611: LD_VAR 0 3
38615: IFFALSE 38631
// SetBName ( base_dep , name ) ;
38617: LD_VAR 0 1
38621: PPUSH
38622: LD_VAR 0 3
38626: PPUSH
38627: CALL_OW 500
// base := GetBase ( base_dep ) ;
38631: LD_ADDR_VAR 0 15
38635: PUSH
38636: LD_VAR 0 1
38640: PPUSH
38641: CALL_OW 274
38645: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
38646: LD_ADDR_VAR 0 16
38650: PUSH
38651: LD_VAR 0 1
38655: PPUSH
38656: CALL_OW 255
38660: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
38661: LD_ADDR_VAR 0 17
38665: PUSH
38666: LD_VAR 0 1
38670: PPUSH
38671: CALL_OW 248
38675: ST_TO_ADDR
// if sources then
38676: LD_VAR 0 5
38680: IFFALSE 38727
// for i = 1 to 3 do
38682: LD_ADDR_VAR 0 8
38686: PUSH
38687: DOUBLE
38688: LD_INT 1
38690: DEC
38691: ST_TO_ADDR
38692: LD_INT 3
38694: PUSH
38695: FOR_TO
38696: IFFALSE 38725
// AddResourceType ( base , i , sources [ i ] ) ;
38698: LD_VAR 0 15
38702: PPUSH
38703: LD_VAR 0 8
38707: PPUSH
38708: LD_VAR 0 5
38712: PUSH
38713: LD_VAR 0 8
38717: ARRAY
38718: PPUSH
38719: CALL_OW 276
38723: GO 38695
38725: POP
38726: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
38727: LD_ADDR_VAR 0 18
38731: PUSH
38732: LD_VAR 0 15
38736: PPUSH
38737: LD_VAR 0 2
38741: PPUSH
38742: LD_INT 1
38744: PPUSH
38745: CALL 37988 0 3
38749: ST_TO_ADDR
// InitHc ;
38750: CALL_OW 19
// InitUc ;
38754: CALL_OW 18
// uc_side := side ;
38758: LD_ADDR_OWVAR 20
38762: PUSH
38763: LD_VAR 0 16
38767: ST_TO_ADDR
// uc_nation := nation ;
38768: LD_ADDR_OWVAR 21
38772: PUSH
38773: LD_VAR 0 17
38777: ST_TO_ADDR
// if buildings then
38778: LD_VAR 0 18
38782: IFFALSE 40104
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
38784: LD_ADDR_VAR 0 19
38788: PUSH
38789: LD_VAR 0 18
38793: PPUSH
38794: LD_INT 2
38796: PUSH
38797: LD_INT 30
38799: PUSH
38800: LD_INT 29
38802: PUSH
38803: EMPTY
38804: LIST
38805: LIST
38806: PUSH
38807: LD_INT 30
38809: PUSH
38810: LD_INT 30
38812: PUSH
38813: EMPTY
38814: LIST
38815: LIST
38816: PUSH
38817: EMPTY
38818: LIST
38819: LIST
38820: LIST
38821: PPUSH
38822: CALL_OW 72
38826: ST_TO_ADDR
// if tmp then
38827: LD_VAR 0 19
38831: IFFALSE 38879
// for i in tmp do
38833: LD_ADDR_VAR 0 8
38837: PUSH
38838: LD_VAR 0 19
38842: PUSH
38843: FOR_IN
38844: IFFALSE 38877
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
38846: LD_VAR 0 8
38850: PPUSH
38851: CALL_OW 250
38855: PPUSH
38856: LD_VAR 0 8
38860: PPUSH
38861: CALL_OW 251
38865: PPUSH
38866: LD_VAR 0 16
38870: PPUSH
38871: CALL_OW 441
38875: GO 38843
38877: POP
38878: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
38879: LD_VAR 0 18
38883: PPUSH
38884: LD_INT 2
38886: PUSH
38887: LD_INT 30
38889: PUSH
38890: LD_INT 32
38892: PUSH
38893: EMPTY
38894: LIST
38895: LIST
38896: PUSH
38897: LD_INT 30
38899: PUSH
38900: LD_INT 33
38902: PUSH
38903: EMPTY
38904: LIST
38905: LIST
38906: PUSH
38907: EMPTY
38908: LIST
38909: LIST
38910: LIST
38911: PPUSH
38912: CALL_OW 72
38916: IFFALSE 39004
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
38918: LD_ADDR_VAR 0 8
38922: PUSH
38923: LD_VAR 0 18
38927: PPUSH
38928: LD_INT 2
38930: PUSH
38931: LD_INT 30
38933: PUSH
38934: LD_INT 32
38936: PUSH
38937: EMPTY
38938: LIST
38939: LIST
38940: PUSH
38941: LD_INT 30
38943: PUSH
38944: LD_INT 33
38946: PUSH
38947: EMPTY
38948: LIST
38949: LIST
38950: PUSH
38951: EMPTY
38952: LIST
38953: LIST
38954: LIST
38955: PPUSH
38956: CALL_OW 72
38960: PUSH
38961: FOR_IN
38962: IFFALSE 39002
// begin if not GetBWeapon ( i ) then
38964: LD_VAR 0 8
38968: PPUSH
38969: CALL_OW 269
38973: NOT
38974: IFFALSE 39000
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
38976: LD_VAR 0 8
38980: PPUSH
38981: LD_VAR 0 8
38985: PPUSH
38986: LD_VAR 0 2
38990: PPUSH
38991: CALL 40250 0 2
38995: PPUSH
38996: CALL_OW 431
// end ;
39000: GO 38961
39002: POP
39003: POP
// end ; for i = 1 to personel do
39004: LD_ADDR_VAR 0 8
39008: PUSH
39009: DOUBLE
39010: LD_INT 1
39012: DEC
39013: ST_TO_ADDR
39014: LD_VAR 0 6
39018: PUSH
39019: FOR_TO
39020: IFFALSE 40084
// begin if i > 4 then
39022: LD_VAR 0 8
39026: PUSH
39027: LD_INT 4
39029: GREATER
39030: IFFALSE 39034
// break ;
39032: GO 40084
// case i of 1 :
39034: LD_VAR 0 8
39038: PUSH
39039: LD_INT 1
39041: DOUBLE
39042: EQUAL
39043: IFTRUE 39047
39045: GO 39127
39047: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
39048: LD_ADDR_VAR 0 12
39052: PUSH
39053: LD_VAR 0 18
39057: PPUSH
39058: LD_INT 22
39060: PUSH
39061: LD_VAR 0 16
39065: PUSH
39066: EMPTY
39067: LIST
39068: LIST
39069: PUSH
39070: LD_INT 58
39072: PUSH
39073: EMPTY
39074: LIST
39075: PUSH
39076: LD_INT 2
39078: PUSH
39079: LD_INT 30
39081: PUSH
39082: LD_INT 32
39084: PUSH
39085: EMPTY
39086: LIST
39087: LIST
39088: PUSH
39089: LD_INT 30
39091: PUSH
39092: LD_INT 4
39094: PUSH
39095: EMPTY
39096: LIST
39097: LIST
39098: PUSH
39099: LD_INT 30
39101: PUSH
39102: LD_INT 5
39104: PUSH
39105: EMPTY
39106: LIST
39107: LIST
39108: PUSH
39109: EMPTY
39110: LIST
39111: LIST
39112: LIST
39113: LIST
39114: PUSH
39115: EMPTY
39116: LIST
39117: LIST
39118: LIST
39119: PPUSH
39120: CALL_OW 72
39124: ST_TO_ADDR
39125: GO 39349
39127: LD_INT 2
39129: DOUBLE
39130: EQUAL
39131: IFTRUE 39135
39133: GO 39197
39135: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
39136: LD_ADDR_VAR 0 12
39140: PUSH
39141: LD_VAR 0 18
39145: PPUSH
39146: LD_INT 22
39148: PUSH
39149: LD_VAR 0 16
39153: PUSH
39154: EMPTY
39155: LIST
39156: LIST
39157: PUSH
39158: LD_INT 2
39160: PUSH
39161: LD_INT 30
39163: PUSH
39164: LD_INT 0
39166: PUSH
39167: EMPTY
39168: LIST
39169: LIST
39170: PUSH
39171: LD_INT 30
39173: PUSH
39174: LD_INT 1
39176: PUSH
39177: EMPTY
39178: LIST
39179: LIST
39180: PUSH
39181: EMPTY
39182: LIST
39183: LIST
39184: LIST
39185: PUSH
39186: EMPTY
39187: LIST
39188: LIST
39189: PPUSH
39190: CALL_OW 72
39194: ST_TO_ADDR
39195: GO 39349
39197: LD_INT 3
39199: DOUBLE
39200: EQUAL
39201: IFTRUE 39205
39203: GO 39267
39205: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
39206: LD_ADDR_VAR 0 12
39210: PUSH
39211: LD_VAR 0 18
39215: PPUSH
39216: LD_INT 22
39218: PUSH
39219: LD_VAR 0 16
39223: PUSH
39224: EMPTY
39225: LIST
39226: LIST
39227: PUSH
39228: LD_INT 2
39230: PUSH
39231: LD_INT 30
39233: PUSH
39234: LD_INT 2
39236: PUSH
39237: EMPTY
39238: LIST
39239: LIST
39240: PUSH
39241: LD_INT 30
39243: PUSH
39244: LD_INT 3
39246: PUSH
39247: EMPTY
39248: LIST
39249: LIST
39250: PUSH
39251: EMPTY
39252: LIST
39253: LIST
39254: LIST
39255: PUSH
39256: EMPTY
39257: LIST
39258: LIST
39259: PPUSH
39260: CALL_OW 72
39264: ST_TO_ADDR
39265: GO 39349
39267: LD_INT 4
39269: DOUBLE
39270: EQUAL
39271: IFTRUE 39275
39273: GO 39348
39275: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
39276: LD_ADDR_VAR 0 12
39280: PUSH
39281: LD_VAR 0 18
39285: PPUSH
39286: LD_INT 22
39288: PUSH
39289: LD_VAR 0 16
39293: PUSH
39294: EMPTY
39295: LIST
39296: LIST
39297: PUSH
39298: LD_INT 2
39300: PUSH
39301: LD_INT 30
39303: PUSH
39304: LD_INT 6
39306: PUSH
39307: EMPTY
39308: LIST
39309: LIST
39310: PUSH
39311: LD_INT 30
39313: PUSH
39314: LD_INT 7
39316: PUSH
39317: EMPTY
39318: LIST
39319: LIST
39320: PUSH
39321: LD_INT 30
39323: PUSH
39324: LD_INT 8
39326: PUSH
39327: EMPTY
39328: LIST
39329: LIST
39330: PUSH
39331: EMPTY
39332: LIST
39333: LIST
39334: LIST
39335: LIST
39336: PUSH
39337: EMPTY
39338: LIST
39339: LIST
39340: PPUSH
39341: CALL_OW 72
39345: ST_TO_ADDR
39346: GO 39349
39348: POP
// if i = 1 then
39349: LD_VAR 0 8
39353: PUSH
39354: LD_INT 1
39356: EQUAL
39357: IFFALSE 39468
// begin tmp := [ ] ;
39359: LD_ADDR_VAR 0 19
39363: PUSH
39364: EMPTY
39365: ST_TO_ADDR
// for j in f do
39366: LD_ADDR_VAR 0 9
39370: PUSH
39371: LD_VAR 0 12
39375: PUSH
39376: FOR_IN
39377: IFFALSE 39450
// if GetBType ( j ) = b_bunker then
39379: LD_VAR 0 9
39383: PPUSH
39384: CALL_OW 266
39388: PUSH
39389: LD_INT 32
39391: EQUAL
39392: IFFALSE 39419
// tmp := Insert ( tmp , 1 , j ) else
39394: LD_ADDR_VAR 0 19
39398: PUSH
39399: LD_VAR 0 19
39403: PPUSH
39404: LD_INT 1
39406: PPUSH
39407: LD_VAR 0 9
39411: PPUSH
39412: CALL_OW 2
39416: ST_TO_ADDR
39417: GO 39448
// tmp := Insert ( tmp , tmp + 1 , j ) ;
39419: LD_ADDR_VAR 0 19
39423: PUSH
39424: LD_VAR 0 19
39428: PPUSH
39429: LD_VAR 0 19
39433: PUSH
39434: LD_INT 1
39436: PLUS
39437: PPUSH
39438: LD_VAR 0 9
39442: PPUSH
39443: CALL_OW 2
39447: ST_TO_ADDR
39448: GO 39376
39450: POP
39451: POP
// if tmp then
39452: LD_VAR 0 19
39456: IFFALSE 39468
// f := tmp ;
39458: LD_ADDR_VAR 0 12
39462: PUSH
39463: LD_VAR 0 19
39467: ST_TO_ADDR
// end ; x := personel [ i ] ;
39468: LD_ADDR_VAR 0 13
39472: PUSH
39473: LD_VAR 0 6
39477: PUSH
39478: LD_VAR 0 8
39482: ARRAY
39483: ST_TO_ADDR
// if x = - 1 then
39484: LD_VAR 0 13
39488: PUSH
39489: LD_INT 1
39491: NEG
39492: EQUAL
39493: IFFALSE 39702
// begin for j in f do
39495: LD_ADDR_VAR 0 9
39499: PUSH
39500: LD_VAR 0 12
39504: PUSH
39505: FOR_IN
39506: IFFALSE 39698
// repeat InitHc ;
39508: CALL_OW 19
// if GetBType ( j ) = b_barracks then
39512: LD_VAR 0 9
39516: PPUSH
39517: CALL_OW 266
39521: PUSH
39522: LD_INT 5
39524: EQUAL
39525: IFFALSE 39595
// begin if UnitsInside ( j ) < 3 then
39527: LD_VAR 0 9
39531: PPUSH
39532: CALL_OW 313
39536: PUSH
39537: LD_INT 3
39539: LESS
39540: IFFALSE 39576
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39542: LD_INT 0
39544: PPUSH
39545: LD_INT 5
39547: PUSH
39548: LD_INT 8
39550: PUSH
39551: LD_INT 9
39553: PUSH
39554: EMPTY
39555: LIST
39556: LIST
39557: LIST
39558: PUSH
39559: LD_VAR 0 17
39563: ARRAY
39564: PPUSH
39565: LD_VAR 0 4
39569: PPUSH
39570: CALL_OW 380
39574: GO 39593
// PrepareHuman ( false , i , skill ) ;
39576: LD_INT 0
39578: PPUSH
39579: LD_VAR 0 8
39583: PPUSH
39584: LD_VAR 0 4
39588: PPUSH
39589: CALL_OW 380
// end else
39593: GO 39612
// PrepareHuman ( false , i , skill ) ;
39595: LD_INT 0
39597: PPUSH
39598: LD_VAR 0 8
39602: PPUSH
39603: LD_VAR 0 4
39607: PPUSH
39608: CALL_OW 380
// un := CreateHuman ;
39612: LD_ADDR_VAR 0 14
39616: PUSH
39617: CALL_OW 44
39621: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39622: LD_ADDR_VAR 0 7
39626: PUSH
39627: LD_VAR 0 7
39631: PPUSH
39632: LD_INT 1
39634: PPUSH
39635: LD_VAR 0 14
39639: PPUSH
39640: CALL_OW 2
39644: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
39645: LD_VAR 0 14
39649: PPUSH
39650: LD_VAR 0 9
39654: PPUSH
39655: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
39659: LD_VAR 0 9
39663: PPUSH
39664: CALL_OW 313
39668: PUSH
39669: LD_INT 6
39671: EQUAL
39672: PUSH
39673: LD_VAR 0 9
39677: PPUSH
39678: CALL_OW 266
39682: PUSH
39683: LD_INT 32
39685: PUSH
39686: LD_INT 31
39688: PUSH
39689: EMPTY
39690: LIST
39691: LIST
39692: IN
39693: OR
39694: IFFALSE 39508
39696: GO 39505
39698: POP
39699: POP
// end else
39700: GO 40082
// for j = 1 to x do
39702: LD_ADDR_VAR 0 9
39706: PUSH
39707: DOUBLE
39708: LD_INT 1
39710: DEC
39711: ST_TO_ADDR
39712: LD_VAR 0 13
39716: PUSH
39717: FOR_TO
39718: IFFALSE 40080
// begin InitHc ;
39720: CALL_OW 19
// if not f then
39724: LD_VAR 0 12
39728: NOT
39729: IFFALSE 39818
// begin PrepareHuman ( false , i , skill ) ;
39731: LD_INT 0
39733: PPUSH
39734: LD_VAR 0 8
39738: PPUSH
39739: LD_VAR 0 4
39743: PPUSH
39744: CALL_OW 380
// un := CreateHuman ;
39748: LD_ADDR_VAR 0 14
39752: PUSH
39753: CALL_OW 44
39757: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39758: LD_ADDR_VAR 0 7
39762: PUSH
39763: LD_VAR 0 7
39767: PPUSH
39768: LD_INT 1
39770: PPUSH
39771: LD_VAR 0 14
39775: PPUSH
39776: CALL_OW 2
39780: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39781: LD_VAR 0 14
39785: PPUSH
39786: LD_VAR 0 1
39790: PPUSH
39791: CALL_OW 250
39795: PPUSH
39796: LD_VAR 0 1
39800: PPUSH
39801: CALL_OW 251
39805: PPUSH
39806: LD_INT 10
39808: PPUSH
39809: LD_INT 0
39811: PPUSH
39812: CALL_OW 50
// continue ;
39816: GO 39717
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
39818: LD_VAR 0 12
39822: PUSH
39823: LD_INT 1
39825: ARRAY
39826: PPUSH
39827: CALL_OW 313
39831: PUSH
39832: LD_VAR 0 12
39836: PUSH
39837: LD_INT 1
39839: ARRAY
39840: PPUSH
39841: CALL_OW 266
39845: PUSH
39846: LD_INT 32
39848: PUSH
39849: LD_INT 31
39851: PUSH
39852: EMPTY
39853: LIST
39854: LIST
39855: IN
39856: AND
39857: PUSH
39858: LD_VAR 0 12
39862: PUSH
39863: LD_INT 1
39865: ARRAY
39866: PPUSH
39867: CALL_OW 313
39871: PUSH
39872: LD_INT 6
39874: EQUAL
39875: OR
39876: IFFALSE 39896
// f := Delete ( f , 1 ) ;
39878: LD_ADDR_VAR 0 12
39882: PUSH
39883: LD_VAR 0 12
39887: PPUSH
39888: LD_INT 1
39890: PPUSH
39891: CALL_OW 3
39895: ST_TO_ADDR
// if not f then
39896: LD_VAR 0 12
39900: NOT
39901: IFFALSE 39919
// begin x := x + 2 ;
39903: LD_ADDR_VAR 0 13
39907: PUSH
39908: LD_VAR 0 13
39912: PUSH
39913: LD_INT 2
39915: PLUS
39916: ST_TO_ADDR
// continue ;
39917: GO 39717
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
39919: LD_VAR 0 12
39923: PUSH
39924: LD_INT 1
39926: ARRAY
39927: PPUSH
39928: CALL_OW 266
39932: PUSH
39933: LD_INT 5
39935: EQUAL
39936: IFFALSE 40010
// begin if UnitsInside ( f [ 1 ] ) < 3 then
39938: LD_VAR 0 12
39942: PUSH
39943: LD_INT 1
39945: ARRAY
39946: PPUSH
39947: CALL_OW 313
39951: PUSH
39952: LD_INT 3
39954: LESS
39955: IFFALSE 39991
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39957: LD_INT 0
39959: PPUSH
39960: LD_INT 5
39962: PUSH
39963: LD_INT 8
39965: PUSH
39966: LD_INT 9
39968: PUSH
39969: EMPTY
39970: LIST
39971: LIST
39972: LIST
39973: PUSH
39974: LD_VAR 0 17
39978: ARRAY
39979: PPUSH
39980: LD_VAR 0 4
39984: PPUSH
39985: CALL_OW 380
39989: GO 40008
// PrepareHuman ( false , i , skill ) ;
39991: LD_INT 0
39993: PPUSH
39994: LD_VAR 0 8
39998: PPUSH
39999: LD_VAR 0 4
40003: PPUSH
40004: CALL_OW 380
// end else
40008: GO 40027
// PrepareHuman ( false , i , skill ) ;
40010: LD_INT 0
40012: PPUSH
40013: LD_VAR 0 8
40017: PPUSH
40018: LD_VAR 0 4
40022: PPUSH
40023: CALL_OW 380
// un := CreateHuman ;
40027: LD_ADDR_VAR 0 14
40031: PUSH
40032: CALL_OW 44
40036: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40037: LD_ADDR_VAR 0 7
40041: PUSH
40042: LD_VAR 0 7
40046: PPUSH
40047: LD_INT 1
40049: PPUSH
40050: LD_VAR 0 14
40054: PPUSH
40055: CALL_OW 2
40059: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
40060: LD_VAR 0 14
40064: PPUSH
40065: LD_VAR 0 12
40069: PUSH
40070: LD_INT 1
40072: ARRAY
40073: PPUSH
40074: CALL_OW 52
// end ;
40078: GO 39717
40080: POP
40081: POP
// end ;
40082: GO 39019
40084: POP
40085: POP
// result := result ^ buildings ;
40086: LD_ADDR_VAR 0 7
40090: PUSH
40091: LD_VAR 0 7
40095: PUSH
40096: LD_VAR 0 18
40100: ADD
40101: ST_TO_ADDR
// end else
40102: GO 40245
// begin for i = 1 to personel do
40104: LD_ADDR_VAR 0 8
40108: PUSH
40109: DOUBLE
40110: LD_INT 1
40112: DEC
40113: ST_TO_ADDR
40114: LD_VAR 0 6
40118: PUSH
40119: FOR_TO
40120: IFFALSE 40243
// begin if i > 4 then
40122: LD_VAR 0 8
40126: PUSH
40127: LD_INT 4
40129: GREATER
40130: IFFALSE 40134
// break ;
40132: GO 40243
// x := personel [ i ] ;
40134: LD_ADDR_VAR 0 13
40138: PUSH
40139: LD_VAR 0 6
40143: PUSH
40144: LD_VAR 0 8
40148: ARRAY
40149: ST_TO_ADDR
// if x = - 1 then
40150: LD_VAR 0 13
40154: PUSH
40155: LD_INT 1
40157: NEG
40158: EQUAL
40159: IFFALSE 40163
// continue ;
40161: GO 40119
// PrepareHuman ( false , i , skill ) ;
40163: LD_INT 0
40165: PPUSH
40166: LD_VAR 0 8
40170: PPUSH
40171: LD_VAR 0 4
40175: PPUSH
40176: CALL_OW 380
// un := CreateHuman ;
40180: LD_ADDR_VAR 0 14
40184: PUSH
40185: CALL_OW 44
40189: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40190: LD_VAR 0 14
40194: PPUSH
40195: LD_VAR 0 1
40199: PPUSH
40200: CALL_OW 250
40204: PPUSH
40205: LD_VAR 0 1
40209: PPUSH
40210: CALL_OW 251
40214: PPUSH
40215: LD_INT 10
40217: PPUSH
40218: LD_INT 0
40220: PPUSH
40221: CALL_OW 50
// result := result ^ un ;
40225: LD_ADDR_VAR 0 7
40229: PUSH
40230: LD_VAR 0 7
40234: PUSH
40235: LD_VAR 0 14
40239: ADD
40240: ST_TO_ADDR
// end ;
40241: GO 40119
40243: POP
40244: POP
// end ; end ;
40245: LD_VAR 0 7
40249: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
40250: LD_INT 0
40252: PPUSH
40253: PPUSH
40254: PPUSH
40255: PPUSH
40256: PPUSH
40257: PPUSH
40258: PPUSH
40259: PPUSH
40260: PPUSH
40261: PPUSH
40262: PPUSH
40263: PPUSH
40264: PPUSH
40265: PPUSH
40266: PPUSH
40267: PPUSH
// result := false ;
40268: LD_ADDR_VAR 0 3
40272: PUSH
40273: LD_INT 0
40275: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
40276: LD_VAR 0 1
40280: NOT
40281: PUSH
40282: LD_VAR 0 1
40286: PPUSH
40287: CALL_OW 266
40291: PUSH
40292: LD_INT 32
40294: PUSH
40295: LD_INT 33
40297: PUSH
40298: EMPTY
40299: LIST
40300: LIST
40301: IN
40302: NOT
40303: OR
40304: IFFALSE 40308
// exit ;
40306: GO 41417
// nat := GetNation ( tower ) ;
40308: LD_ADDR_VAR 0 12
40312: PUSH
40313: LD_VAR 0 1
40317: PPUSH
40318: CALL_OW 248
40322: ST_TO_ADDR
// side := GetSide ( tower ) ;
40323: LD_ADDR_VAR 0 16
40327: PUSH
40328: LD_VAR 0 1
40332: PPUSH
40333: CALL_OW 255
40337: ST_TO_ADDR
// x := GetX ( tower ) ;
40338: LD_ADDR_VAR 0 10
40342: PUSH
40343: LD_VAR 0 1
40347: PPUSH
40348: CALL_OW 250
40352: ST_TO_ADDR
// y := GetY ( tower ) ;
40353: LD_ADDR_VAR 0 11
40357: PUSH
40358: LD_VAR 0 1
40362: PPUSH
40363: CALL_OW 251
40367: ST_TO_ADDR
// if not x or not y then
40368: LD_VAR 0 10
40372: NOT
40373: PUSH
40374: LD_VAR 0 11
40378: NOT
40379: OR
40380: IFFALSE 40384
// exit ;
40382: GO 41417
// weapon := 0 ;
40384: LD_ADDR_VAR 0 18
40388: PUSH
40389: LD_INT 0
40391: ST_TO_ADDR
// fac_list := [ ] ;
40392: LD_ADDR_VAR 0 17
40396: PUSH
40397: EMPTY
40398: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
40399: LD_ADDR_VAR 0 6
40403: PUSH
40404: LD_VAR 0 1
40408: PPUSH
40409: CALL_OW 274
40413: PPUSH
40414: LD_VAR 0 2
40418: PPUSH
40419: LD_INT 0
40421: PPUSH
40422: CALL 37988 0 3
40426: PPUSH
40427: LD_INT 30
40429: PUSH
40430: LD_INT 3
40432: PUSH
40433: EMPTY
40434: LIST
40435: LIST
40436: PPUSH
40437: CALL_OW 72
40441: ST_TO_ADDR
// if not factories then
40442: LD_VAR 0 6
40446: NOT
40447: IFFALSE 40451
// exit ;
40449: GO 41417
// for i in factories do
40451: LD_ADDR_VAR 0 8
40455: PUSH
40456: LD_VAR 0 6
40460: PUSH
40461: FOR_IN
40462: IFFALSE 40487
// fac_list := fac_list union AvailableWeaponList ( i ) ;
40464: LD_ADDR_VAR 0 17
40468: PUSH
40469: LD_VAR 0 17
40473: PUSH
40474: LD_VAR 0 8
40478: PPUSH
40479: CALL_OW 478
40483: UNION
40484: ST_TO_ADDR
40485: GO 40461
40487: POP
40488: POP
// if not fac_list then
40489: LD_VAR 0 17
40493: NOT
40494: IFFALSE 40498
// exit ;
40496: GO 41417
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
40498: LD_ADDR_VAR 0 5
40502: PUSH
40503: LD_INT 4
40505: PUSH
40506: LD_INT 5
40508: PUSH
40509: LD_INT 9
40511: PUSH
40512: LD_INT 10
40514: PUSH
40515: LD_INT 6
40517: PUSH
40518: LD_INT 7
40520: PUSH
40521: LD_INT 11
40523: PUSH
40524: EMPTY
40525: LIST
40526: LIST
40527: LIST
40528: LIST
40529: LIST
40530: LIST
40531: LIST
40532: PUSH
40533: LD_INT 27
40535: PUSH
40536: LD_INT 28
40538: PUSH
40539: LD_INT 26
40541: PUSH
40542: LD_INT 30
40544: PUSH
40545: EMPTY
40546: LIST
40547: LIST
40548: LIST
40549: LIST
40550: PUSH
40551: LD_INT 43
40553: PUSH
40554: LD_INT 44
40556: PUSH
40557: LD_INT 46
40559: PUSH
40560: LD_INT 45
40562: PUSH
40563: LD_INT 47
40565: PUSH
40566: LD_INT 49
40568: PUSH
40569: EMPTY
40570: LIST
40571: LIST
40572: LIST
40573: LIST
40574: LIST
40575: LIST
40576: PUSH
40577: EMPTY
40578: LIST
40579: LIST
40580: LIST
40581: PUSH
40582: LD_VAR 0 12
40586: ARRAY
40587: ST_TO_ADDR
// list := list isect fac_list ;
40588: LD_ADDR_VAR 0 5
40592: PUSH
40593: LD_VAR 0 5
40597: PUSH
40598: LD_VAR 0 17
40602: ISECT
40603: ST_TO_ADDR
// if not list then
40604: LD_VAR 0 5
40608: NOT
40609: IFFALSE 40613
// exit ;
40611: GO 41417
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
40613: LD_VAR 0 12
40617: PUSH
40618: LD_INT 3
40620: EQUAL
40621: PUSH
40622: LD_INT 49
40624: PUSH
40625: LD_VAR 0 5
40629: IN
40630: AND
40631: PUSH
40632: LD_INT 31
40634: PPUSH
40635: LD_VAR 0 16
40639: PPUSH
40640: CALL_OW 321
40644: PUSH
40645: LD_INT 2
40647: EQUAL
40648: AND
40649: IFFALSE 40709
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
40651: LD_INT 22
40653: PUSH
40654: LD_VAR 0 16
40658: PUSH
40659: EMPTY
40660: LIST
40661: LIST
40662: PUSH
40663: LD_INT 35
40665: PUSH
40666: LD_INT 49
40668: PUSH
40669: EMPTY
40670: LIST
40671: LIST
40672: PUSH
40673: LD_INT 91
40675: PUSH
40676: LD_VAR 0 1
40680: PUSH
40681: LD_INT 10
40683: PUSH
40684: EMPTY
40685: LIST
40686: LIST
40687: LIST
40688: PUSH
40689: EMPTY
40690: LIST
40691: LIST
40692: LIST
40693: PPUSH
40694: CALL_OW 69
40698: NOT
40699: IFFALSE 40709
// weapon := ru_time_lapser ;
40701: LD_ADDR_VAR 0 18
40705: PUSH
40706: LD_INT 49
40708: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
40709: LD_VAR 0 12
40713: PUSH
40714: LD_INT 1
40716: PUSH
40717: LD_INT 2
40719: PUSH
40720: EMPTY
40721: LIST
40722: LIST
40723: IN
40724: PUSH
40725: LD_INT 11
40727: PUSH
40728: LD_VAR 0 5
40732: IN
40733: PUSH
40734: LD_INT 30
40736: PUSH
40737: LD_VAR 0 5
40741: IN
40742: OR
40743: AND
40744: PUSH
40745: LD_INT 6
40747: PPUSH
40748: LD_VAR 0 16
40752: PPUSH
40753: CALL_OW 321
40757: PUSH
40758: LD_INT 2
40760: EQUAL
40761: AND
40762: IFFALSE 40927
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
40764: LD_INT 22
40766: PUSH
40767: LD_VAR 0 16
40771: PUSH
40772: EMPTY
40773: LIST
40774: LIST
40775: PUSH
40776: LD_INT 2
40778: PUSH
40779: LD_INT 35
40781: PUSH
40782: LD_INT 11
40784: PUSH
40785: EMPTY
40786: LIST
40787: LIST
40788: PUSH
40789: LD_INT 35
40791: PUSH
40792: LD_INT 30
40794: PUSH
40795: EMPTY
40796: LIST
40797: LIST
40798: PUSH
40799: EMPTY
40800: LIST
40801: LIST
40802: LIST
40803: PUSH
40804: LD_INT 91
40806: PUSH
40807: LD_VAR 0 1
40811: PUSH
40812: LD_INT 18
40814: PUSH
40815: EMPTY
40816: LIST
40817: LIST
40818: LIST
40819: PUSH
40820: EMPTY
40821: LIST
40822: LIST
40823: LIST
40824: PPUSH
40825: CALL_OW 69
40829: NOT
40830: PUSH
40831: LD_INT 22
40833: PUSH
40834: LD_VAR 0 16
40838: PUSH
40839: EMPTY
40840: LIST
40841: LIST
40842: PUSH
40843: LD_INT 2
40845: PUSH
40846: LD_INT 30
40848: PUSH
40849: LD_INT 32
40851: PUSH
40852: EMPTY
40853: LIST
40854: LIST
40855: PUSH
40856: LD_INT 30
40858: PUSH
40859: LD_INT 33
40861: PUSH
40862: EMPTY
40863: LIST
40864: LIST
40865: PUSH
40866: EMPTY
40867: LIST
40868: LIST
40869: LIST
40870: PUSH
40871: LD_INT 91
40873: PUSH
40874: LD_VAR 0 1
40878: PUSH
40879: LD_INT 12
40881: PUSH
40882: EMPTY
40883: LIST
40884: LIST
40885: LIST
40886: PUSH
40887: EMPTY
40888: LIST
40889: LIST
40890: LIST
40891: PUSH
40892: EMPTY
40893: LIST
40894: PPUSH
40895: CALL_OW 69
40899: PUSH
40900: LD_INT 2
40902: GREATER
40903: AND
40904: IFFALSE 40927
// weapon := [ us_radar , ar_radar ] [ nat ] ;
40906: LD_ADDR_VAR 0 18
40910: PUSH
40911: LD_INT 11
40913: PUSH
40914: LD_INT 30
40916: PUSH
40917: EMPTY
40918: LIST
40919: LIST
40920: PUSH
40921: LD_VAR 0 12
40925: ARRAY
40926: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
40927: LD_VAR 0 18
40931: NOT
40932: PUSH
40933: LD_INT 40
40935: PPUSH
40936: LD_VAR 0 16
40940: PPUSH
40941: CALL_OW 321
40945: PUSH
40946: LD_INT 2
40948: EQUAL
40949: AND
40950: PUSH
40951: LD_INT 7
40953: PUSH
40954: LD_VAR 0 5
40958: IN
40959: PUSH
40960: LD_INT 28
40962: PUSH
40963: LD_VAR 0 5
40967: IN
40968: OR
40969: PUSH
40970: LD_INT 45
40972: PUSH
40973: LD_VAR 0 5
40977: IN
40978: OR
40979: AND
40980: IFFALSE 41234
// begin hex := GetHexInfo ( x , y ) ;
40982: LD_ADDR_VAR 0 4
40986: PUSH
40987: LD_VAR 0 10
40991: PPUSH
40992: LD_VAR 0 11
40996: PPUSH
40997: CALL_OW 546
41001: ST_TO_ADDR
// if hex [ 1 ] then
41002: LD_VAR 0 4
41006: PUSH
41007: LD_INT 1
41009: ARRAY
41010: IFFALSE 41014
// exit ;
41012: GO 41417
// height := hex [ 2 ] ;
41014: LD_ADDR_VAR 0 15
41018: PUSH
41019: LD_VAR 0 4
41023: PUSH
41024: LD_INT 2
41026: ARRAY
41027: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
41028: LD_ADDR_VAR 0 14
41032: PUSH
41033: LD_INT 0
41035: PUSH
41036: LD_INT 2
41038: PUSH
41039: LD_INT 3
41041: PUSH
41042: LD_INT 5
41044: PUSH
41045: EMPTY
41046: LIST
41047: LIST
41048: LIST
41049: LIST
41050: ST_TO_ADDR
// for i in tmp do
41051: LD_ADDR_VAR 0 8
41055: PUSH
41056: LD_VAR 0 14
41060: PUSH
41061: FOR_IN
41062: IFFALSE 41232
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
41064: LD_ADDR_VAR 0 9
41068: PUSH
41069: LD_VAR 0 10
41073: PPUSH
41074: LD_VAR 0 8
41078: PPUSH
41079: LD_INT 5
41081: PPUSH
41082: CALL_OW 272
41086: PUSH
41087: LD_VAR 0 11
41091: PPUSH
41092: LD_VAR 0 8
41096: PPUSH
41097: LD_INT 5
41099: PPUSH
41100: CALL_OW 273
41104: PUSH
41105: EMPTY
41106: LIST
41107: LIST
41108: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
41109: LD_VAR 0 9
41113: PUSH
41114: LD_INT 1
41116: ARRAY
41117: PPUSH
41118: LD_VAR 0 9
41122: PUSH
41123: LD_INT 2
41125: ARRAY
41126: PPUSH
41127: CALL_OW 488
41131: IFFALSE 41230
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
41133: LD_ADDR_VAR 0 4
41137: PUSH
41138: LD_VAR 0 9
41142: PUSH
41143: LD_INT 1
41145: ARRAY
41146: PPUSH
41147: LD_VAR 0 9
41151: PUSH
41152: LD_INT 2
41154: ARRAY
41155: PPUSH
41156: CALL_OW 546
41160: ST_TO_ADDR
// if hex [ 1 ] then
41161: LD_VAR 0 4
41165: PUSH
41166: LD_INT 1
41168: ARRAY
41169: IFFALSE 41173
// continue ;
41171: GO 41061
// h := hex [ 2 ] ;
41173: LD_ADDR_VAR 0 13
41177: PUSH
41178: LD_VAR 0 4
41182: PUSH
41183: LD_INT 2
41185: ARRAY
41186: ST_TO_ADDR
// if h + 7 < height then
41187: LD_VAR 0 13
41191: PUSH
41192: LD_INT 7
41194: PLUS
41195: PUSH
41196: LD_VAR 0 15
41200: LESS
41201: IFFALSE 41230
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
41203: LD_ADDR_VAR 0 18
41207: PUSH
41208: LD_INT 7
41210: PUSH
41211: LD_INT 28
41213: PUSH
41214: LD_INT 45
41216: PUSH
41217: EMPTY
41218: LIST
41219: LIST
41220: LIST
41221: PUSH
41222: LD_VAR 0 12
41226: ARRAY
41227: ST_TO_ADDR
// break ;
41228: GO 41232
// end ; end ; end ;
41230: GO 41061
41232: POP
41233: POP
// end ; if not weapon then
41234: LD_VAR 0 18
41238: NOT
41239: IFFALSE 41299
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
41241: LD_ADDR_VAR 0 5
41245: PUSH
41246: LD_VAR 0 5
41250: PUSH
41251: LD_INT 11
41253: PUSH
41254: LD_INT 30
41256: PUSH
41257: LD_INT 49
41259: PUSH
41260: EMPTY
41261: LIST
41262: LIST
41263: LIST
41264: DIFF
41265: ST_TO_ADDR
// if not list then
41266: LD_VAR 0 5
41270: NOT
41271: IFFALSE 41275
// exit ;
41273: GO 41417
// weapon := list [ rand ( 1 , list ) ] ;
41275: LD_ADDR_VAR 0 18
41279: PUSH
41280: LD_VAR 0 5
41284: PUSH
41285: LD_INT 1
41287: PPUSH
41288: LD_VAR 0 5
41292: PPUSH
41293: CALL_OW 12
41297: ARRAY
41298: ST_TO_ADDR
// end ; if weapon then
41299: LD_VAR 0 18
41303: IFFALSE 41417
// begin tmp := CostOfWeapon ( weapon ) ;
41305: LD_ADDR_VAR 0 14
41309: PUSH
41310: LD_VAR 0 18
41314: PPUSH
41315: CALL_OW 451
41319: ST_TO_ADDR
// j := GetBase ( tower ) ;
41320: LD_ADDR_VAR 0 9
41324: PUSH
41325: LD_VAR 0 1
41329: PPUSH
41330: CALL_OW 274
41334: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
41335: LD_VAR 0 9
41339: PPUSH
41340: LD_INT 1
41342: PPUSH
41343: CALL_OW 275
41347: PUSH
41348: LD_VAR 0 14
41352: PUSH
41353: LD_INT 1
41355: ARRAY
41356: GREATEREQUAL
41357: PUSH
41358: LD_VAR 0 9
41362: PPUSH
41363: LD_INT 2
41365: PPUSH
41366: CALL_OW 275
41370: PUSH
41371: LD_VAR 0 14
41375: PUSH
41376: LD_INT 2
41378: ARRAY
41379: GREATEREQUAL
41380: AND
41381: PUSH
41382: LD_VAR 0 9
41386: PPUSH
41387: LD_INT 3
41389: PPUSH
41390: CALL_OW 275
41394: PUSH
41395: LD_VAR 0 14
41399: PUSH
41400: LD_INT 3
41402: ARRAY
41403: GREATEREQUAL
41404: AND
41405: IFFALSE 41417
// result := weapon ;
41407: LD_ADDR_VAR 0 3
41411: PUSH
41412: LD_VAR 0 18
41416: ST_TO_ADDR
// end ; end ;
41417: LD_VAR 0 3
41421: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
41422: LD_INT 0
41424: PPUSH
41425: PPUSH
// result := true ;
41426: LD_ADDR_VAR 0 3
41430: PUSH
41431: LD_INT 1
41433: ST_TO_ADDR
// if array1 = array2 then
41434: LD_VAR 0 1
41438: PUSH
41439: LD_VAR 0 2
41443: EQUAL
41444: IFFALSE 41504
// begin for i = 1 to array1 do
41446: LD_ADDR_VAR 0 4
41450: PUSH
41451: DOUBLE
41452: LD_INT 1
41454: DEC
41455: ST_TO_ADDR
41456: LD_VAR 0 1
41460: PUSH
41461: FOR_TO
41462: IFFALSE 41500
// if array1 [ i ] <> array2 [ i ] then
41464: LD_VAR 0 1
41468: PUSH
41469: LD_VAR 0 4
41473: ARRAY
41474: PUSH
41475: LD_VAR 0 2
41479: PUSH
41480: LD_VAR 0 4
41484: ARRAY
41485: NONEQUAL
41486: IFFALSE 41498
// begin result := false ;
41488: LD_ADDR_VAR 0 3
41492: PUSH
41493: LD_INT 0
41495: ST_TO_ADDR
// break ;
41496: GO 41500
// end ;
41498: GO 41461
41500: POP
41501: POP
// end else
41502: GO 41512
// result := false ;
41504: LD_ADDR_VAR 0 3
41508: PUSH
41509: LD_INT 0
41511: ST_TO_ADDR
// end ;
41512: LD_VAR 0 3
41516: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
41517: LD_INT 0
41519: PPUSH
41520: PPUSH
// if not array1 or not array2 then
41521: LD_VAR 0 1
41525: NOT
41526: PUSH
41527: LD_VAR 0 2
41531: NOT
41532: OR
41533: IFFALSE 41537
// exit ;
41535: GO 41601
// result := true ;
41537: LD_ADDR_VAR 0 3
41541: PUSH
41542: LD_INT 1
41544: ST_TO_ADDR
// for i = 1 to array1 do
41545: LD_ADDR_VAR 0 4
41549: PUSH
41550: DOUBLE
41551: LD_INT 1
41553: DEC
41554: ST_TO_ADDR
41555: LD_VAR 0 1
41559: PUSH
41560: FOR_TO
41561: IFFALSE 41599
// if array1 [ i ] <> array2 [ i ] then
41563: LD_VAR 0 1
41567: PUSH
41568: LD_VAR 0 4
41572: ARRAY
41573: PUSH
41574: LD_VAR 0 2
41578: PUSH
41579: LD_VAR 0 4
41583: ARRAY
41584: NONEQUAL
41585: IFFALSE 41597
// begin result := false ;
41587: LD_ADDR_VAR 0 3
41591: PUSH
41592: LD_INT 0
41594: ST_TO_ADDR
// break ;
41595: GO 41599
// end ;
41597: GO 41560
41599: POP
41600: POP
// end ;
41601: LD_VAR 0 3
41605: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
41606: LD_INT 0
41608: PPUSH
41609: PPUSH
41610: PPUSH
// pom := GetBase ( fac ) ;
41611: LD_ADDR_VAR 0 5
41615: PUSH
41616: LD_VAR 0 1
41620: PPUSH
41621: CALL_OW 274
41625: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
41626: LD_ADDR_VAR 0 4
41630: PUSH
41631: LD_VAR 0 2
41635: PUSH
41636: LD_INT 1
41638: ARRAY
41639: PPUSH
41640: LD_VAR 0 2
41644: PUSH
41645: LD_INT 2
41647: ARRAY
41648: PPUSH
41649: LD_VAR 0 2
41653: PUSH
41654: LD_INT 3
41656: ARRAY
41657: PPUSH
41658: LD_VAR 0 2
41662: PUSH
41663: LD_INT 4
41665: ARRAY
41666: PPUSH
41667: CALL_OW 449
41671: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41672: LD_ADDR_VAR 0 3
41676: PUSH
41677: LD_VAR 0 5
41681: PPUSH
41682: LD_INT 1
41684: PPUSH
41685: CALL_OW 275
41689: PUSH
41690: LD_VAR 0 4
41694: PUSH
41695: LD_INT 1
41697: ARRAY
41698: GREATEREQUAL
41699: PUSH
41700: LD_VAR 0 5
41704: PPUSH
41705: LD_INT 2
41707: PPUSH
41708: CALL_OW 275
41712: PUSH
41713: LD_VAR 0 4
41717: PUSH
41718: LD_INT 2
41720: ARRAY
41721: GREATEREQUAL
41722: AND
41723: PUSH
41724: LD_VAR 0 5
41728: PPUSH
41729: LD_INT 3
41731: PPUSH
41732: CALL_OW 275
41736: PUSH
41737: LD_VAR 0 4
41741: PUSH
41742: LD_INT 3
41744: ARRAY
41745: GREATEREQUAL
41746: AND
41747: ST_TO_ADDR
// end ;
41748: LD_VAR 0 3
41752: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
41753: LD_INT 0
41755: PPUSH
41756: PPUSH
41757: PPUSH
41758: PPUSH
// pom := GetBase ( building ) ;
41759: LD_ADDR_VAR 0 3
41763: PUSH
41764: LD_VAR 0 1
41768: PPUSH
41769: CALL_OW 274
41773: ST_TO_ADDR
// if not pom then
41774: LD_VAR 0 3
41778: NOT
41779: IFFALSE 41783
// exit ;
41781: GO 41953
// btype := GetBType ( building ) ;
41783: LD_ADDR_VAR 0 5
41787: PUSH
41788: LD_VAR 0 1
41792: PPUSH
41793: CALL_OW 266
41797: ST_TO_ADDR
// if btype = b_armoury then
41798: LD_VAR 0 5
41802: PUSH
41803: LD_INT 4
41805: EQUAL
41806: IFFALSE 41816
// btype := b_barracks ;
41808: LD_ADDR_VAR 0 5
41812: PUSH
41813: LD_INT 5
41815: ST_TO_ADDR
// if btype = b_depot then
41816: LD_VAR 0 5
41820: PUSH
41821: LD_INT 0
41823: EQUAL
41824: IFFALSE 41834
// btype := b_warehouse ;
41826: LD_ADDR_VAR 0 5
41830: PUSH
41831: LD_INT 1
41833: ST_TO_ADDR
// if btype = b_workshop then
41834: LD_VAR 0 5
41838: PUSH
41839: LD_INT 2
41841: EQUAL
41842: IFFALSE 41852
// btype := b_factory ;
41844: LD_ADDR_VAR 0 5
41848: PUSH
41849: LD_INT 3
41851: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41852: LD_ADDR_VAR 0 4
41856: PUSH
41857: LD_VAR 0 5
41861: PPUSH
41862: LD_VAR 0 1
41866: PPUSH
41867: CALL_OW 248
41871: PPUSH
41872: CALL_OW 450
41876: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41877: LD_ADDR_VAR 0 2
41881: PUSH
41882: LD_VAR 0 3
41886: PPUSH
41887: LD_INT 1
41889: PPUSH
41890: CALL_OW 275
41894: PUSH
41895: LD_VAR 0 4
41899: PUSH
41900: LD_INT 1
41902: ARRAY
41903: GREATEREQUAL
41904: PUSH
41905: LD_VAR 0 3
41909: PPUSH
41910: LD_INT 2
41912: PPUSH
41913: CALL_OW 275
41917: PUSH
41918: LD_VAR 0 4
41922: PUSH
41923: LD_INT 2
41925: ARRAY
41926: GREATEREQUAL
41927: AND
41928: PUSH
41929: LD_VAR 0 3
41933: PPUSH
41934: LD_INT 3
41936: PPUSH
41937: CALL_OW 275
41941: PUSH
41942: LD_VAR 0 4
41946: PUSH
41947: LD_INT 3
41949: ARRAY
41950: GREATEREQUAL
41951: AND
41952: ST_TO_ADDR
// end ;
41953: LD_VAR 0 2
41957: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
41958: LD_INT 0
41960: PPUSH
41961: PPUSH
41962: PPUSH
// pom := GetBase ( building ) ;
41963: LD_ADDR_VAR 0 4
41967: PUSH
41968: LD_VAR 0 1
41972: PPUSH
41973: CALL_OW 274
41977: ST_TO_ADDR
// if not pom then
41978: LD_VAR 0 4
41982: NOT
41983: IFFALSE 41987
// exit ;
41985: GO 42088
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41987: LD_ADDR_VAR 0 5
41991: PUSH
41992: LD_VAR 0 2
41996: PPUSH
41997: LD_VAR 0 1
42001: PPUSH
42002: CALL_OW 248
42006: PPUSH
42007: CALL_OW 450
42011: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42012: LD_ADDR_VAR 0 3
42016: PUSH
42017: LD_VAR 0 4
42021: PPUSH
42022: LD_INT 1
42024: PPUSH
42025: CALL_OW 275
42029: PUSH
42030: LD_VAR 0 5
42034: PUSH
42035: LD_INT 1
42037: ARRAY
42038: GREATEREQUAL
42039: PUSH
42040: LD_VAR 0 4
42044: PPUSH
42045: LD_INT 2
42047: PPUSH
42048: CALL_OW 275
42052: PUSH
42053: LD_VAR 0 5
42057: PUSH
42058: LD_INT 2
42060: ARRAY
42061: GREATEREQUAL
42062: AND
42063: PUSH
42064: LD_VAR 0 4
42068: PPUSH
42069: LD_INT 3
42071: PPUSH
42072: CALL_OW 275
42076: PUSH
42077: LD_VAR 0 5
42081: PUSH
42082: LD_INT 3
42084: ARRAY
42085: GREATEREQUAL
42086: AND
42087: ST_TO_ADDR
// end ;
42088: LD_VAR 0 3
42092: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
42093: LD_INT 0
42095: PPUSH
42096: PPUSH
42097: PPUSH
42098: PPUSH
42099: PPUSH
42100: PPUSH
42101: PPUSH
42102: PPUSH
42103: PPUSH
42104: PPUSH
42105: PPUSH
// result := false ;
42106: LD_ADDR_VAR 0 8
42110: PUSH
42111: LD_INT 0
42113: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
42114: LD_VAR 0 5
42118: NOT
42119: PUSH
42120: LD_VAR 0 1
42124: NOT
42125: OR
42126: PUSH
42127: LD_VAR 0 2
42131: NOT
42132: OR
42133: PUSH
42134: LD_VAR 0 3
42138: NOT
42139: OR
42140: IFFALSE 42144
// exit ;
42142: GO 42958
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
42144: LD_ADDR_VAR 0 14
42148: PUSH
42149: LD_VAR 0 1
42153: PPUSH
42154: LD_VAR 0 2
42158: PPUSH
42159: LD_VAR 0 3
42163: PPUSH
42164: LD_VAR 0 4
42168: PPUSH
42169: LD_VAR 0 5
42173: PUSH
42174: LD_INT 1
42176: ARRAY
42177: PPUSH
42178: CALL_OW 248
42182: PPUSH
42183: LD_INT 0
42185: PPUSH
42186: CALL 44195 0 6
42190: ST_TO_ADDR
// if not hexes then
42191: LD_VAR 0 14
42195: NOT
42196: IFFALSE 42200
// exit ;
42198: GO 42958
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
42200: LD_ADDR_VAR 0 17
42204: PUSH
42205: LD_VAR 0 5
42209: PPUSH
42210: LD_INT 22
42212: PUSH
42213: LD_VAR 0 13
42217: PPUSH
42218: CALL_OW 255
42222: PUSH
42223: EMPTY
42224: LIST
42225: LIST
42226: PUSH
42227: LD_INT 2
42229: PUSH
42230: LD_INT 30
42232: PUSH
42233: LD_INT 0
42235: PUSH
42236: EMPTY
42237: LIST
42238: LIST
42239: PUSH
42240: LD_INT 30
42242: PUSH
42243: LD_INT 1
42245: PUSH
42246: EMPTY
42247: LIST
42248: LIST
42249: PUSH
42250: EMPTY
42251: LIST
42252: LIST
42253: LIST
42254: PUSH
42255: EMPTY
42256: LIST
42257: LIST
42258: PPUSH
42259: CALL_OW 72
42263: ST_TO_ADDR
// for i = 1 to hexes do
42264: LD_ADDR_VAR 0 9
42268: PUSH
42269: DOUBLE
42270: LD_INT 1
42272: DEC
42273: ST_TO_ADDR
42274: LD_VAR 0 14
42278: PUSH
42279: FOR_TO
42280: IFFALSE 42956
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42282: LD_ADDR_VAR 0 13
42286: PUSH
42287: LD_VAR 0 14
42291: PUSH
42292: LD_VAR 0 9
42296: ARRAY
42297: PUSH
42298: LD_INT 1
42300: ARRAY
42301: PPUSH
42302: LD_VAR 0 14
42306: PUSH
42307: LD_VAR 0 9
42311: ARRAY
42312: PUSH
42313: LD_INT 2
42315: ARRAY
42316: PPUSH
42317: CALL_OW 428
42321: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
42322: LD_VAR 0 14
42326: PUSH
42327: LD_VAR 0 9
42331: ARRAY
42332: PUSH
42333: LD_INT 1
42335: ARRAY
42336: PPUSH
42337: LD_VAR 0 14
42341: PUSH
42342: LD_VAR 0 9
42346: ARRAY
42347: PUSH
42348: LD_INT 2
42350: ARRAY
42351: PPUSH
42352: CALL_OW 351
42356: PUSH
42357: LD_VAR 0 14
42361: PUSH
42362: LD_VAR 0 9
42366: ARRAY
42367: PUSH
42368: LD_INT 1
42370: ARRAY
42371: PPUSH
42372: LD_VAR 0 14
42376: PUSH
42377: LD_VAR 0 9
42381: ARRAY
42382: PUSH
42383: LD_INT 2
42385: ARRAY
42386: PPUSH
42387: CALL_OW 488
42391: NOT
42392: OR
42393: PUSH
42394: LD_VAR 0 13
42398: PPUSH
42399: CALL_OW 247
42403: PUSH
42404: LD_INT 3
42406: EQUAL
42407: OR
42408: IFFALSE 42414
// exit ;
42410: POP
42411: POP
42412: GO 42958
// if not tmp then
42414: LD_VAR 0 13
42418: NOT
42419: IFFALSE 42423
// continue ;
42421: GO 42279
// result := true ;
42423: LD_ADDR_VAR 0 8
42427: PUSH
42428: LD_INT 1
42430: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
42431: LD_VAR 0 6
42435: PUSH
42436: LD_VAR 0 13
42440: PPUSH
42441: CALL_OW 247
42445: PUSH
42446: LD_INT 2
42448: EQUAL
42449: AND
42450: PUSH
42451: LD_VAR 0 13
42455: PPUSH
42456: CALL_OW 263
42460: PUSH
42461: LD_INT 1
42463: EQUAL
42464: AND
42465: IFFALSE 42629
// begin if IsDrivenBy ( tmp ) then
42467: LD_VAR 0 13
42471: PPUSH
42472: CALL_OW 311
42476: IFFALSE 42480
// continue ;
42478: GO 42279
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
42480: LD_VAR 0 6
42484: PPUSH
42485: LD_INT 3
42487: PUSH
42488: LD_INT 60
42490: PUSH
42491: EMPTY
42492: LIST
42493: PUSH
42494: EMPTY
42495: LIST
42496: LIST
42497: PUSH
42498: LD_INT 3
42500: PUSH
42501: LD_INT 55
42503: PUSH
42504: EMPTY
42505: LIST
42506: PUSH
42507: EMPTY
42508: LIST
42509: LIST
42510: PUSH
42511: EMPTY
42512: LIST
42513: LIST
42514: PPUSH
42515: CALL_OW 72
42519: IFFALSE 42627
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
42521: LD_ADDR_VAR 0 18
42525: PUSH
42526: LD_VAR 0 6
42530: PPUSH
42531: LD_INT 3
42533: PUSH
42534: LD_INT 60
42536: PUSH
42537: EMPTY
42538: LIST
42539: PUSH
42540: EMPTY
42541: LIST
42542: LIST
42543: PUSH
42544: LD_INT 3
42546: PUSH
42547: LD_INT 55
42549: PUSH
42550: EMPTY
42551: LIST
42552: PUSH
42553: EMPTY
42554: LIST
42555: LIST
42556: PUSH
42557: EMPTY
42558: LIST
42559: LIST
42560: PPUSH
42561: CALL_OW 72
42565: PUSH
42566: LD_INT 1
42568: ARRAY
42569: ST_TO_ADDR
// if IsInUnit ( driver ) then
42570: LD_VAR 0 18
42574: PPUSH
42575: CALL_OW 310
42579: IFFALSE 42590
// ComExit ( driver ) ;
42581: LD_VAR 0 18
42585: PPUSH
42586: CALL 67323 0 1
// AddComEnterUnit ( driver , tmp ) ;
42590: LD_VAR 0 18
42594: PPUSH
42595: LD_VAR 0 13
42599: PPUSH
42600: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
42604: LD_VAR 0 18
42608: PPUSH
42609: LD_VAR 0 7
42613: PPUSH
42614: CALL_OW 173
// AddComExitVehicle ( driver ) ;
42618: LD_VAR 0 18
42622: PPUSH
42623: CALL_OW 181
// end ; continue ;
42627: GO 42279
// end ; if not cleaners or not tmp in cleaners then
42629: LD_VAR 0 6
42633: NOT
42634: PUSH
42635: LD_VAR 0 13
42639: PUSH
42640: LD_VAR 0 6
42644: IN
42645: NOT
42646: OR
42647: IFFALSE 42954
// begin if dep then
42649: LD_VAR 0 17
42653: IFFALSE 42789
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
42655: LD_ADDR_VAR 0 16
42659: PUSH
42660: LD_VAR 0 17
42664: PUSH
42665: LD_INT 1
42667: ARRAY
42668: PPUSH
42669: CALL_OW 250
42673: PPUSH
42674: LD_VAR 0 17
42678: PUSH
42679: LD_INT 1
42681: ARRAY
42682: PPUSH
42683: CALL_OW 254
42687: PPUSH
42688: LD_INT 5
42690: PPUSH
42691: CALL_OW 272
42695: PUSH
42696: LD_VAR 0 17
42700: PUSH
42701: LD_INT 1
42703: ARRAY
42704: PPUSH
42705: CALL_OW 251
42709: PPUSH
42710: LD_VAR 0 17
42714: PUSH
42715: LD_INT 1
42717: ARRAY
42718: PPUSH
42719: CALL_OW 254
42723: PPUSH
42724: LD_INT 5
42726: PPUSH
42727: CALL_OW 273
42731: PUSH
42732: EMPTY
42733: LIST
42734: LIST
42735: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
42736: LD_VAR 0 16
42740: PUSH
42741: LD_INT 1
42743: ARRAY
42744: PPUSH
42745: LD_VAR 0 16
42749: PUSH
42750: LD_INT 2
42752: ARRAY
42753: PPUSH
42754: CALL_OW 488
42758: IFFALSE 42789
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
42760: LD_VAR 0 13
42764: PPUSH
42765: LD_VAR 0 16
42769: PUSH
42770: LD_INT 1
42772: ARRAY
42773: PPUSH
42774: LD_VAR 0 16
42778: PUSH
42779: LD_INT 2
42781: ARRAY
42782: PPUSH
42783: CALL_OW 111
// continue ;
42787: GO 42279
// end ; end ; r := GetDir ( tmp ) ;
42789: LD_ADDR_VAR 0 15
42793: PUSH
42794: LD_VAR 0 13
42798: PPUSH
42799: CALL_OW 254
42803: ST_TO_ADDR
// if r = 5 then
42804: LD_VAR 0 15
42808: PUSH
42809: LD_INT 5
42811: EQUAL
42812: IFFALSE 42822
// r := 0 ;
42814: LD_ADDR_VAR 0 15
42818: PUSH
42819: LD_INT 0
42821: ST_TO_ADDR
// for j = r to 5 do
42822: LD_ADDR_VAR 0 10
42826: PUSH
42827: DOUBLE
42828: LD_VAR 0 15
42832: DEC
42833: ST_TO_ADDR
42834: LD_INT 5
42836: PUSH
42837: FOR_TO
42838: IFFALSE 42952
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
42840: LD_ADDR_VAR 0 11
42844: PUSH
42845: LD_VAR 0 13
42849: PPUSH
42850: CALL_OW 250
42854: PPUSH
42855: LD_VAR 0 10
42859: PPUSH
42860: LD_INT 2
42862: PPUSH
42863: CALL_OW 272
42867: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
42868: LD_ADDR_VAR 0 12
42872: PUSH
42873: LD_VAR 0 13
42877: PPUSH
42878: CALL_OW 251
42882: PPUSH
42883: LD_VAR 0 10
42887: PPUSH
42888: LD_INT 2
42890: PPUSH
42891: CALL_OW 273
42895: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
42896: LD_VAR 0 11
42900: PPUSH
42901: LD_VAR 0 12
42905: PPUSH
42906: CALL_OW 488
42910: PUSH
42911: LD_VAR 0 11
42915: PPUSH
42916: LD_VAR 0 12
42920: PPUSH
42921: CALL_OW 428
42925: NOT
42926: AND
42927: IFFALSE 42950
// begin ComMoveXY ( tmp , _x , _y ) ;
42929: LD_VAR 0 13
42933: PPUSH
42934: LD_VAR 0 11
42938: PPUSH
42939: LD_VAR 0 12
42943: PPUSH
42944: CALL_OW 111
// break ;
42948: GO 42952
// end ; end ;
42950: GO 42837
42952: POP
42953: POP
// end ; end ;
42954: GO 42279
42956: POP
42957: POP
// end ;
42958: LD_VAR 0 8
42962: RET
// export function BuildingTechInvented ( side , btype ) ; begin
42963: LD_INT 0
42965: PPUSH
// result := true ;
42966: LD_ADDR_VAR 0 3
42970: PUSH
42971: LD_INT 1
42973: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
42974: LD_VAR 0 2
42978: PUSH
42979: LD_INT 24
42981: DOUBLE
42982: EQUAL
42983: IFTRUE 42993
42985: LD_INT 33
42987: DOUBLE
42988: EQUAL
42989: IFTRUE 42993
42991: GO 43018
42993: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
42994: LD_ADDR_VAR 0 3
42998: PUSH
42999: LD_INT 32
43001: PPUSH
43002: LD_VAR 0 1
43006: PPUSH
43007: CALL_OW 321
43011: PUSH
43012: LD_INT 2
43014: EQUAL
43015: ST_TO_ADDR
43016: GO 43338
43018: LD_INT 20
43020: DOUBLE
43021: EQUAL
43022: IFTRUE 43026
43024: GO 43051
43026: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
43027: LD_ADDR_VAR 0 3
43031: PUSH
43032: LD_INT 6
43034: PPUSH
43035: LD_VAR 0 1
43039: PPUSH
43040: CALL_OW 321
43044: PUSH
43045: LD_INT 2
43047: EQUAL
43048: ST_TO_ADDR
43049: GO 43338
43051: LD_INT 22
43053: DOUBLE
43054: EQUAL
43055: IFTRUE 43065
43057: LD_INT 36
43059: DOUBLE
43060: EQUAL
43061: IFTRUE 43065
43063: GO 43090
43065: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
43066: LD_ADDR_VAR 0 3
43070: PUSH
43071: LD_INT 15
43073: PPUSH
43074: LD_VAR 0 1
43078: PPUSH
43079: CALL_OW 321
43083: PUSH
43084: LD_INT 2
43086: EQUAL
43087: ST_TO_ADDR
43088: GO 43338
43090: LD_INT 30
43092: DOUBLE
43093: EQUAL
43094: IFTRUE 43098
43096: GO 43123
43098: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
43099: LD_ADDR_VAR 0 3
43103: PUSH
43104: LD_INT 20
43106: PPUSH
43107: LD_VAR 0 1
43111: PPUSH
43112: CALL_OW 321
43116: PUSH
43117: LD_INT 2
43119: EQUAL
43120: ST_TO_ADDR
43121: GO 43338
43123: LD_INT 28
43125: DOUBLE
43126: EQUAL
43127: IFTRUE 43137
43129: LD_INT 21
43131: DOUBLE
43132: EQUAL
43133: IFTRUE 43137
43135: GO 43162
43137: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
43138: LD_ADDR_VAR 0 3
43142: PUSH
43143: LD_INT 21
43145: PPUSH
43146: LD_VAR 0 1
43150: PPUSH
43151: CALL_OW 321
43155: PUSH
43156: LD_INT 2
43158: EQUAL
43159: ST_TO_ADDR
43160: GO 43338
43162: LD_INT 16
43164: DOUBLE
43165: EQUAL
43166: IFTRUE 43170
43168: GO 43197
43170: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
43171: LD_ADDR_VAR 0 3
43175: PUSH
43176: LD_EXP 38
43180: PPUSH
43181: LD_VAR 0 1
43185: PPUSH
43186: CALL_OW 321
43190: PUSH
43191: LD_INT 2
43193: EQUAL
43194: ST_TO_ADDR
43195: GO 43338
43197: LD_INT 19
43199: DOUBLE
43200: EQUAL
43201: IFTRUE 43211
43203: LD_INT 23
43205: DOUBLE
43206: EQUAL
43207: IFTRUE 43211
43209: GO 43238
43211: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
43212: LD_ADDR_VAR 0 3
43216: PUSH
43217: LD_EXP 37
43221: PPUSH
43222: LD_VAR 0 1
43226: PPUSH
43227: CALL_OW 321
43231: PUSH
43232: LD_INT 2
43234: EQUAL
43235: ST_TO_ADDR
43236: GO 43338
43238: LD_INT 17
43240: DOUBLE
43241: EQUAL
43242: IFTRUE 43246
43244: GO 43271
43246: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
43247: LD_ADDR_VAR 0 3
43251: PUSH
43252: LD_INT 39
43254: PPUSH
43255: LD_VAR 0 1
43259: PPUSH
43260: CALL_OW 321
43264: PUSH
43265: LD_INT 2
43267: EQUAL
43268: ST_TO_ADDR
43269: GO 43338
43271: LD_INT 18
43273: DOUBLE
43274: EQUAL
43275: IFTRUE 43279
43277: GO 43304
43279: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
43280: LD_ADDR_VAR 0 3
43284: PUSH
43285: LD_INT 40
43287: PPUSH
43288: LD_VAR 0 1
43292: PPUSH
43293: CALL_OW 321
43297: PUSH
43298: LD_INT 2
43300: EQUAL
43301: ST_TO_ADDR
43302: GO 43338
43304: LD_INT 27
43306: DOUBLE
43307: EQUAL
43308: IFTRUE 43312
43310: GO 43337
43312: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
43313: LD_ADDR_VAR 0 3
43317: PUSH
43318: LD_INT 35
43320: PPUSH
43321: LD_VAR 0 1
43325: PPUSH
43326: CALL_OW 321
43330: PUSH
43331: LD_INT 2
43333: EQUAL
43334: ST_TO_ADDR
43335: GO 43338
43337: POP
// end ;
43338: LD_VAR 0 3
43342: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
43343: LD_INT 0
43345: PPUSH
43346: PPUSH
43347: PPUSH
43348: PPUSH
43349: PPUSH
43350: PPUSH
43351: PPUSH
43352: PPUSH
43353: PPUSH
43354: PPUSH
43355: PPUSH
// result := false ;
43356: LD_ADDR_VAR 0 6
43360: PUSH
43361: LD_INT 0
43363: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
43364: LD_VAR 0 1
43368: NOT
43369: PUSH
43370: LD_VAR 0 1
43374: PPUSH
43375: CALL_OW 266
43379: PUSH
43380: LD_INT 0
43382: PUSH
43383: LD_INT 1
43385: PUSH
43386: EMPTY
43387: LIST
43388: LIST
43389: IN
43390: NOT
43391: OR
43392: PUSH
43393: LD_VAR 0 2
43397: NOT
43398: OR
43399: PUSH
43400: LD_VAR 0 5
43404: PUSH
43405: LD_INT 0
43407: PUSH
43408: LD_INT 1
43410: PUSH
43411: LD_INT 2
43413: PUSH
43414: LD_INT 3
43416: PUSH
43417: LD_INT 4
43419: PUSH
43420: LD_INT 5
43422: PUSH
43423: EMPTY
43424: LIST
43425: LIST
43426: LIST
43427: LIST
43428: LIST
43429: LIST
43430: IN
43431: NOT
43432: OR
43433: PUSH
43434: LD_VAR 0 3
43438: PPUSH
43439: LD_VAR 0 4
43443: PPUSH
43444: CALL_OW 488
43448: NOT
43449: OR
43450: IFFALSE 43454
// exit ;
43452: GO 44190
// side := GetSide ( depot ) ;
43454: LD_ADDR_VAR 0 9
43458: PUSH
43459: LD_VAR 0 1
43463: PPUSH
43464: CALL_OW 255
43468: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
43469: LD_VAR 0 9
43473: PPUSH
43474: LD_VAR 0 2
43478: PPUSH
43479: CALL 42963 0 2
43483: NOT
43484: IFFALSE 43488
// exit ;
43486: GO 44190
// pom := GetBase ( depot ) ;
43488: LD_ADDR_VAR 0 10
43492: PUSH
43493: LD_VAR 0 1
43497: PPUSH
43498: CALL_OW 274
43502: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
43503: LD_ADDR_VAR 0 11
43507: PUSH
43508: LD_VAR 0 2
43512: PPUSH
43513: LD_VAR 0 1
43517: PPUSH
43518: CALL_OW 248
43522: PPUSH
43523: CALL_OW 450
43527: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
43528: LD_VAR 0 10
43532: PPUSH
43533: LD_INT 1
43535: PPUSH
43536: CALL_OW 275
43540: PUSH
43541: LD_VAR 0 11
43545: PUSH
43546: LD_INT 1
43548: ARRAY
43549: GREATEREQUAL
43550: PUSH
43551: LD_VAR 0 10
43555: PPUSH
43556: LD_INT 2
43558: PPUSH
43559: CALL_OW 275
43563: PUSH
43564: LD_VAR 0 11
43568: PUSH
43569: LD_INT 2
43571: ARRAY
43572: GREATEREQUAL
43573: AND
43574: PUSH
43575: LD_VAR 0 10
43579: PPUSH
43580: LD_INT 3
43582: PPUSH
43583: CALL_OW 275
43587: PUSH
43588: LD_VAR 0 11
43592: PUSH
43593: LD_INT 3
43595: ARRAY
43596: GREATEREQUAL
43597: AND
43598: NOT
43599: IFFALSE 43603
// exit ;
43601: GO 44190
// if GetBType ( depot ) = b_depot then
43603: LD_VAR 0 1
43607: PPUSH
43608: CALL_OW 266
43612: PUSH
43613: LD_INT 0
43615: EQUAL
43616: IFFALSE 43628
// dist := 28 else
43618: LD_ADDR_VAR 0 14
43622: PUSH
43623: LD_INT 28
43625: ST_TO_ADDR
43626: GO 43636
// dist := 36 ;
43628: LD_ADDR_VAR 0 14
43632: PUSH
43633: LD_INT 36
43635: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
43636: LD_VAR 0 1
43640: PPUSH
43641: LD_VAR 0 3
43645: PPUSH
43646: LD_VAR 0 4
43650: PPUSH
43651: CALL_OW 297
43655: PUSH
43656: LD_VAR 0 14
43660: GREATER
43661: IFFALSE 43665
// exit ;
43663: GO 44190
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
43665: LD_ADDR_VAR 0 12
43669: PUSH
43670: LD_VAR 0 2
43674: PPUSH
43675: LD_VAR 0 3
43679: PPUSH
43680: LD_VAR 0 4
43684: PPUSH
43685: LD_VAR 0 5
43689: PPUSH
43690: LD_VAR 0 1
43694: PPUSH
43695: CALL_OW 248
43699: PPUSH
43700: LD_INT 0
43702: PPUSH
43703: CALL 44195 0 6
43707: ST_TO_ADDR
// if not hexes then
43708: LD_VAR 0 12
43712: NOT
43713: IFFALSE 43717
// exit ;
43715: GO 44190
// hex := GetHexInfo ( x , y ) ;
43717: LD_ADDR_VAR 0 15
43721: PUSH
43722: LD_VAR 0 3
43726: PPUSH
43727: LD_VAR 0 4
43731: PPUSH
43732: CALL_OW 546
43736: ST_TO_ADDR
// if hex [ 1 ] then
43737: LD_VAR 0 15
43741: PUSH
43742: LD_INT 1
43744: ARRAY
43745: IFFALSE 43749
// exit ;
43747: GO 44190
// height := hex [ 2 ] ;
43749: LD_ADDR_VAR 0 13
43753: PUSH
43754: LD_VAR 0 15
43758: PUSH
43759: LD_INT 2
43761: ARRAY
43762: ST_TO_ADDR
// for i = 1 to hexes do
43763: LD_ADDR_VAR 0 7
43767: PUSH
43768: DOUBLE
43769: LD_INT 1
43771: DEC
43772: ST_TO_ADDR
43773: LD_VAR 0 12
43777: PUSH
43778: FOR_TO
43779: IFFALSE 44109
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
43781: LD_VAR 0 12
43785: PUSH
43786: LD_VAR 0 7
43790: ARRAY
43791: PUSH
43792: LD_INT 1
43794: ARRAY
43795: PPUSH
43796: LD_VAR 0 12
43800: PUSH
43801: LD_VAR 0 7
43805: ARRAY
43806: PUSH
43807: LD_INT 2
43809: ARRAY
43810: PPUSH
43811: CALL_OW 488
43815: NOT
43816: PUSH
43817: LD_VAR 0 12
43821: PUSH
43822: LD_VAR 0 7
43826: ARRAY
43827: PUSH
43828: LD_INT 1
43830: ARRAY
43831: PPUSH
43832: LD_VAR 0 12
43836: PUSH
43837: LD_VAR 0 7
43841: ARRAY
43842: PUSH
43843: LD_INT 2
43845: ARRAY
43846: PPUSH
43847: CALL_OW 428
43851: PUSH
43852: LD_INT 0
43854: GREATER
43855: OR
43856: PUSH
43857: LD_VAR 0 12
43861: PUSH
43862: LD_VAR 0 7
43866: ARRAY
43867: PUSH
43868: LD_INT 1
43870: ARRAY
43871: PPUSH
43872: LD_VAR 0 12
43876: PUSH
43877: LD_VAR 0 7
43881: ARRAY
43882: PUSH
43883: LD_INT 2
43885: ARRAY
43886: PPUSH
43887: CALL_OW 351
43891: OR
43892: IFFALSE 43898
// exit ;
43894: POP
43895: POP
43896: GO 44190
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43898: LD_ADDR_VAR 0 8
43902: PUSH
43903: LD_VAR 0 12
43907: PUSH
43908: LD_VAR 0 7
43912: ARRAY
43913: PUSH
43914: LD_INT 1
43916: ARRAY
43917: PPUSH
43918: LD_VAR 0 12
43922: PUSH
43923: LD_VAR 0 7
43927: ARRAY
43928: PUSH
43929: LD_INT 2
43931: ARRAY
43932: PPUSH
43933: CALL_OW 546
43937: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
43938: LD_VAR 0 8
43942: PUSH
43943: LD_INT 1
43945: ARRAY
43946: PUSH
43947: LD_VAR 0 8
43951: PUSH
43952: LD_INT 2
43954: ARRAY
43955: PUSH
43956: LD_VAR 0 13
43960: PUSH
43961: LD_INT 2
43963: PLUS
43964: GREATER
43965: OR
43966: PUSH
43967: LD_VAR 0 8
43971: PUSH
43972: LD_INT 2
43974: ARRAY
43975: PUSH
43976: LD_VAR 0 13
43980: PUSH
43981: LD_INT 2
43983: MINUS
43984: LESS
43985: OR
43986: PUSH
43987: LD_VAR 0 8
43991: PUSH
43992: LD_INT 3
43994: ARRAY
43995: PUSH
43996: LD_INT 0
43998: PUSH
43999: LD_INT 8
44001: PUSH
44002: LD_INT 9
44004: PUSH
44005: LD_INT 10
44007: PUSH
44008: LD_INT 11
44010: PUSH
44011: LD_INT 12
44013: PUSH
44014: LD_INT 13
44016: PUSH
44017: LD_INT 16
44019: PUSH
44020: LD_INT 17
44022: PUSH
44023: LD_INT 18
44025: PUSH
44026: LD_INT 19
44028: PUSH
44029: LD_INT 20
44031: PUSH
44032: LD_INT 21
44034: PUSH
44035: EMPTY
44036: LIST
44037: LIST
44038: LIST
44039: LIST
44040: LIST
44041: LIST
44042: LIST
44043: LIST
44044: LIST
44045: LIST
44046: LIST
44047: LIST
44048: LIST
44049: IN
44050: NOT
44051: OR
44052: PUSH
44053: LD_VAR 0 8
44057: PUSH
44058: LD_INT 5
44060: ARRAY
44061: NOT
44062: OR
44063: PUSH
44064: LD_VAR 0 8
44068: PUSH
44069: LD_INT 6
44071: ARRAY
44072: PUSH
44073: LD_INT 1
44075: PUSH
44076: LD_INT 2
44078: PUSH
44079: LD_INT 7
44081: PUSH
44082: LD_INT 9
44084: PUSH
44085: LD_INT 10
44087: PUSH
44088: LD_INT 11
44090: PUSH
44091: EMPTY
44092: LIST
44093: LIST
44094: LIST
44095: LIST
44096: LIST
44097: LIST
44098: IN
44099: NOT
44100: OR
44101: IFFALSE 44107
// exit ;
44103: POP
44104: POP
44105: GO 44190
// end ;
44107: GO 43778
44109: POP
44110: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
44111: LD_VAR 0 9
44115: PPUSH
44116: LD_VAR 0 3
44120: PPUSH
44121: LD_VAR 0 4
44125: PPUSH
44126: LD_INT 20
44128: PPUSH
44129: CALL 36136 0 4
44133: PUSH
44134: LD_INT 4
44136: ARRAY
44137: IFFALSE 44141
// exit ;
44139: GO 44190
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
44141: LD_VAR 0 2
44145: PUSH
44146: LD_INT 29
44148: PUSH
44149: LD_INT 30
44151: PUSH
44152: EMPTY
44153: LIST
44154: LIST
44155: IN
44156: PUSH
44157: LD_VAR 0 3
44161: PPUSH
44162: LD_VAR 0 4
44166: PPUSH
44167: LD_VAR 0 9
44171: PPUSH
44172: CALL_OW 440
44176: NOT
44177: AND
44178: IFFALSE 44182
// exit ;
44180: GO 44190
// result := true ;
44182: LD_ADDR_VAR 0 6
44186: PUSH
44187: LD_INT 1
44189: ST_TO_ADDR
// end ;
44190: LD_VAR 0 6
44194: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
44195: LD_INT 0
44197: PPUSH
44198: PPUSH
44199: PPUSH
44200: PPUSH
44201: PPUSH
44202: PPUSH
44203: PPUSH
44204: PPUSH
44205: PPUSH
44206: PPUSH
44207: PPUSH
44208: PPUSH
44209: PPUSH
44210: PPUSH
44211: PPUSH
44212: PPUSH
44213: PPUSH
44214: PPUSH
44215: PPUSH
44216: PPUSH
44217: PPUSH
44218: PPUSH
44219: PPUSH
44220: PPUSH
44221: PPUSH
44222: PPUSH
44223: PPUSH
44224: PPUSH
44225: PPUSH
44226: PPUSH
44227: PPUSH
44228: PPUSH
44229: PPUSH
44230: PPUSH
44231: PPUSH
44232: PPUSH
44233: PPUSH
44234: PPUSH
44235: PPUSH
44236: PPUSH
44237: PPUSH
44238: PPUSH
44239: PPUSH
44240: PPUSH
44241: PPUSH
44242: PPUSH
44243: PPUSH
44244: PPUSH
44245: PPUSH
44246: PPUSH
44247: PPUSH
44248: PPUSH
44249: PPUSH
44250: PPUSH
44251: PPUSH
44252: PPUSH
44253: PPUSH
44254: PPUSH
// result = [ ] ;
44255: LD_ADDR_VAR 0 7
44259: PUSH
44260: EMPTY
44261: ST_TO_ADDR
// temp_list = [ ] ;
44262: LD_ADDR_VAR 0 9
44266: PUSH
44267: EMPTY
44268: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
44269: LD_VAR 0 4
44273: PUSH
44274: LD_INT 0
44276: PUSH
44277: LD_INT 1
44279: PUSH
44280: LD_INT 2
44282: PUSH
44283: LD_INT 3
44285: PUSH
44286: LD_INT 4
44288: PUSH
44289: LD_INT 5
44291: PUSH
44292: EMPTY
44293: LIST
44294: LIST
44295: LIST
44296: LIST
44297: LIST
44298: LIST
44299: IN
44300: NOT
44301: PUSH
44302: LD_VAR 0 1
44306: PUSH
44307: LD_INT 0
44309: PUSH
44310: LD_INT 1
44312: PUSH
44313: EMPTY
44314: LIST
44315: LIST
44316: IN
44317: PUSH
44318: LD_VAR 0 5
44322: PUSH
44323: LD_INT 1
44325: PUSH
44326: LD_INT 2
44328: PUSH
44329: LD_INT 3
44331: PUSH
44332: EMPTY
44333: LIST
44334: LIST
44335: LIST
44336: IN
44337: NOT
44338: AND
44339: OR
44340: IFFALSE 44344
// exit ;
44342: GO 62735
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
44344: LD_VAR 0 1
44348: PUSH
44349: LD_INT 6
44351: PUSH
44352: LD_INT 7
44354: PUSH
44355: LD_INT 8
44357: PUSH
44358: LD_INT 13
44360: PUSH
44361: LD_INT 12
44363: PUSH
44364: LD_INT 15
44366: PUSH
44367: LD_INT 11
44369: PUSH
44370: LD_INT 14
44372: PUSH
44373: LD_INT 10
44375: PUSH
44376: EMPTY
44377: LIST
44378: LIST
44379: LIST
44380: LIST
44381: LIST
44382: LIST
44383: LIST
44384: LIST
44385: LIST
44386: IN
44387: IFFALSE 44397
// btype = b_lab ;
44389: LD_ADDR_VAR 0 1
44393: PUSH
44394: LD_INT 6
44396: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
44397: LD_VAR 0 6
44401: PUSH
44402: LD_INT 0
44404: PUSH
44405: LD_INT 1
44407: PUSH
44408: LD_INT 2
44410: PUSH
44411: EMPTY
44412: LIST
44413: LIST
44414: LIST
44415: IN
44416: NOT
44417: PUSH
44418: LD_VAR 0 1
44422: PUSH
44423: LD_INT 0
44425: PUSH
44426: LD_INT 1
44428: PUSH
44429: LD_INT 2
44431: PUSH
44432: LD_INT 3
44434: PUSH
44435: LD_INT 6
44437: PUSH
44438: LD_INT 36
44440: PUSH
44441: LD_INT 4
44443: PUSH
44444: LD_INT 5
44446: PUSH
44447: LD_INT 31
44449: PUSH
44450: LD_INT 32
44452: PUSH
44453: LD_INT 33
44455: PUSH
44456: EMPTY
44457: LIST
44458: LIST
44459: LIST
44460: LIST
44461: LIST
44462: LIST
44463: LIST
44464: LIST
44465: LIST
44466: LIST
44467: LIST
44468: IN
44469: NOT
44470: PUSH
44471: LD_VAR 0 6
44475: PUSH
44476: LD_INT 1
44478: EQUAL
44479: AND
44480: OR
44481: PUSH
44482: LD_VAR 0 1
44486: PUSH
44487: LD_INT 2
44489: PUSH
44490: LD_INT 3
44492: PUSH
44493: EMPTY
44494: LIST
44495: LIST
44496: IN
44497: NOT
44498: PUSH
44499: LD_VAR 0 6
44503: PUSH
44504: LD_INT 2
44506: EQUAL
44507: AND
44508: OR
44509: IFFALSE 44519
// mode = 0 ;
44511: LD_ADDR_VAR 0 6
44515: PUSH
44516: LD_INT 0
44518: ST_TO_ADDR
// case mode of 0 :
44519: LD_VAR 0 6
44523: PUSH
44524: LD_INT 0
44526: DOUBLE
44527: EQUAL
44528: IFTRUE 44532
44530: GO 55985
44532: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44533: LD_ADDR_VAR 0 11
44537: PUSH
44538: LD_INT 0
44540: PUSH
44541: LD_INT 0
44543: PUSH
44544: EMPTY
44545: LIST
44546: LIST
44547: PUSH
44548: LD_INT 0
44550: PUSH
44551: LD_INT 1
44553: NEG
44554: PUSH
44555: EMPTY
44556: LIST
44557: LIST
44558: PUSH
44559: LD_INT 1
44561: PUSH
44562: LD_INT 0
44564: PUSH
44565: EMPTY
44566: LIST
44567: LIST
44568: PUSH
44569: LD_INT 1
44571: PUSH
44572: LD_INT 1
44574: PUSH
44575: EMPTY
44576: LIST
44577: LIST
44578: PUSH
44579: LD_INT 0
44581: PUSH
44582: LD_INT 1
44584: PUSH
44585: EMPTY
44586: LIST
44587: LIST
44588: PUSH
44589: LD_INT 1
44591: NEG
44592: PUSH
44593: LD_INT 0
44595: PUSH
44596: EMPTY
44597: LIST
44598: LIST
44599: PUSH
44600: LD_INT 1
44602: NEG
44603: PUSH
44604: LD_INT 1
44606: NEG
44607: PUSH
44608: EMPTY
44609: LIST
44610: LIST
44611: PUSH
44612: LD_INT 1
44614: NEG
44615: PUSH
44616: LD_INT 2
44618: NEG
44619: PUSH
44620: EMPTY
44621: LIST
44622: LIST
44623: PUSH
44624: LD_INT 0
44626: PUSH
44627: LD_INT 2
44629: NEG
44630: PUSH
44631: EMPTY
44632: LIST
44633: LIST
44634: PUSH
44635: LD_INT 1
44637: PUSH
44638: LD_INT 1
44640: NEG
44641: PUSH
44642: EMPTY
44643: LIST
44644: LIST
44645: PUSH
44646: LD_INT 1
44648: PUSH
44649: LD_INT 2
44651: PUSH
44652: EMPTY
44653: LIST
44654: LIST
44655: PUSH
44656: LD_INT 0
44658: PUSH
44659: LD_INT 2
44661: PUSH
44662: EMPTY
44663: LIST
44664: LIST
44665: PUSH
44666: LD_INT 1
44668: NEG
44669: PUSH
44670: LD_INT 1
44672: PUSH
44673: EMPTY
44674: LIST
44675: LIST
44676: PUSH
44677: LD_INT 1
44679: PUSH
44680: LD_INT 3
44682: PUSH
44683: EMPTY
44684: LIST
44685: LIST
44686: PUSH
44687: LD_INT 0
44689: PUSH
44690: LD_INT 3
44692: PUSH
44693: EMPTY
44694: LIST
44695: LIST
44696: PUSH
44697: LD_INT 1
44699: NEG
44700: PUSH
44701: LD_INT 2
44703: PUSH
44704: EMPTY
44705: LIST
44706: LIST
44707: PUSH
44708: EMPTY
44709: LIST
44710: LIST
44711: LIST
44712: LIST
44713: LIST
44714: LIST
44715: LIST
44716: LIST
44717: LIST
44718: LIST
44719: LIST
44720: LIST
44721: LIST
44722: LIST
44723: LIST
44724: LIST
44725: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44726: LD_ADDR_VAR 0 12
44730: PUSH
44731: LD_INT 0
44733: PUSH
44734: LD_INT 0
44736: PUSH
44737: EMPTY
44738: LIST
44739: LIST
44740: PUSH
44741: LD_INT 0
44743: PUSH
44744: LD_INT 1
44746: NEG
44747: PUSH
44748: EMPTY
44749: LIST
44750: LIST
44751: PUSH
44752: LD_INT 1
44754: PUSH
44755: LD_INT 0
44757: PUSH
44758: EMPTY
44759: LIST
44760: LIST
44761: PUSH
44762: LD_INT 1
44764: PUSH
44765: LD_INT 1
44767: PUSH
44768: EMPTY
44769: LIST
44770: LIST
44771: PUSH
44772: LD_INT 0
44774: PUSH
44775: LD_INT 1
44777: PUSH
44778: EMPTY
44779: LIST
44780: LIST
44781: PUSH
44782: LD_INT 1
44784: NEG
44785: PUSH
44786: LD_INT 0
44788: PUSH
44789: EMPTY
44790: LIST
44791: LIST
44792: PUSH
44793: LD_INT 1
44795: NEG
44796: PUSH
44797: LD_INT 1
44799: NEG
44800: PUSH
44801: EMPTY
44802: LIST
44803: LIST
44804: PUSH
44805: LD_INT 1
44807: PUSH
44808: LD_INT 1
44810: NEG
44811: PUSH
44812: EMPTY
44813: LIST
44814: LIST
44815: PUSH
44816: LD_INT 2
44818: PUSH
44819: LD_INT 0
44821: PUSH
44822: EMPTY
44823: LIST
44824: LIST
44825: PUSH
44826: LD_INT 2
44828: PUSH
44829: LD_INT 1
44831: PUSH
44832: EMPTY
44833: LIST
44834: LIST
44835: PUSH
44836: LD_INT 1
44838: NEG
44839: PUSH
44840: LD_INT 1
44842: PUSH
44843: EMPTY
44844: LIST
44845: LIST
44846: PUSH
44847: LD_INT 2
44849: NEG
44850: PUSH
44851: LD_INT 0
44853: PUSH
44854: EMPTY
44855: LIST
44856: LIST
44857: PUSH
44858: LD_INT 2
44860: NEG
44861: PUSH
44862: LD_INT 1
44864: NEG
44865: PUSH
44866: EMPTY
44867: LIST
44868: LIST
44869: PUSH
44870: LD_INT 2
44872: NEG
44873: PUSH
44874: LD_INT 1
44876: PUSH
44877: EMPTY
44878: LIST
44879: LIST
44880: PUSH
44881: LD_INT 3
44883: NEG
44884: PUSH
44885: LD_INT 0
44887: PUSH
44888: EMPTY
44889: LIST
44890: LIST
44891: PUSH
44892: LD_INT 3
44894: NEG
44895: PUSH
44896: LD_INT 1
44898: NEG
44899: PUSH
44900: EMPTY
44901: LIST
44902: LIST
44903: PUSH
44904: EMPTY
44905: LIST
44906: LIST
44907: LIST
44908: LIST
44909: LIST
44910: LIST
44911: LIST
44912: LIST
44913: LIST
44914: LIST
44915: LIST
44916: LIST
44917: LIST
44918: LIST
44919: LIST
44920: LIST
44921: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44922: LD_ADDR_VAR 0 13
44926: PUSH
44927: LD_INT 0
44929: PUSH
44930: LD_INT 0
44932: PUSH
44933: EMPTY
44934: LIST
44935: LIST
44936: PUSH
44937: LD_INT 0
44939: PUSH
44940: LD_INT 1
44942: NEG
44943: PUSH
44944: EMPTY
44945: LIST
44946: LIST
44947: PUSH
44948: LD_INT 1
44950: PUSH
44951: LD_INT 0
44953: PUSH
44954: EMPTY
44955: LIST
44956: LIST
44957: PUSH
44958: LD_INT 1
44960: PUSH
44961: LD_INT 1
44963: PUSH
44964: EMPTY
44965: LIST
44966: LIST
44967: PUSH
44968: LD_INT 0
44970: PUSH
44971: LD_INT 1
44973: PUSH
44974: EMPTY
44975: LIST
44976: LIST
44977: PUSH
44978: LD_INT 1
44980: NEG
44981: PUSH
44982: LD_INT 0
44984: PUSH
44985: EMPTY
44986: LIST
44987: LIST
44988: PUSH
44989: LD_INT 1
44991: NEG
44992: PUSH
44993: LD_INT 1
44995: NEG
44996: PUSH
44997: EMPTY
44998: LIST
44999: LIST
45000: PUSH
45001: LD_INT 1
45003: NEG
45004: PUSH
45005: LD_INT 2
45007: NEG
45008: PUSH
45009: EMPTY
45010: LIST
45011: LIST
45012: PUSH
45013: LD_INT 2
45015: PUSH
45016: LD_INT 1
45018: PUSH
45019: EMPTY
45020: LIST
45021: LIST
45022: PUSH
45023: LD_INT 2
45025: PUSH
45026: LD_INT 2
45028: PUSH
45029: EMPTY
45030: LIST
45031: LIST
45032: PUSH
45033: LD_INT 1
45035: PUSH
45036: LD_INT 2
45038: PUSH
45039: EMPTY
45040: LIST
45041: LIST
45042: PUSH
45043: LD_INT 2
45045: NEG
45046: PUSH
45047: LD_INT 1
45049: NEG
45050: PUSH
45051: EMPTY
45052: LIST
45053: LIST
45054: PUSH
45055: LD_INT 2
45057: NEG
45058: PUSH
45059: LD_INT 2
45061: NEG
45062: PUSH
45063: EMPTY
45064: LIST
45065: LIST
45066: PUSH
45067: LD_INT 2
45069: NEG
45070: PUSH
45071: LD_INT 3
45073: NEG
45074: PUSH
45075: EMPTY
45076: LIST
45077: LIST
45078: PUSH
45079: LD_INT 3
45081: NEG
45082: PUSH
45083: LD_INT 2
45085: NEG
45086: PUSH
45087: EMPTY
45088: LIST
45089: LIST
45090: PUSH
45091: LD_INT 3
45093: NEG
45094: PUSH
45095: LD_INT 3
45097: NEG
45098: PUSH
45099: EMPTY
45100: LIST
45101: LIST
45102: PUSH
45103: EMPTY
45104: LIST
45105: LIST
45106: LIST
45107: LIST
45108: LIST
45109: LIST
45110: LIST
45111: LIST
45112: LIST
45113: LIST
45114: LIST
45115: LIST
45116: LIST
45117: LIST
45118: LIST
45119: LIST
45120: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45121: LD_ADDR_VAR 0 14
45125: PUSH
45126: LD_INT 0
45128: PUSH
45129: LD_INT 0
45131: PUSH
45132: EMPTY
45133: LIST
45134: LIST
45135: PUSH
45136: LD_INT 0
45138: PUSH
45139: LD_INT 1
45141: NEG
45142: PUSH
45143: EMPTY
45144: LIST
45145: LIST
45146: PUSH
45147: LD_INT 1
45149: PUSH
45150: LD_INT 0
45152: PUSH
45153: EMPTY
45154: LIST
45155: LIST
45156: PUSH
45157: LD_INT 1
45159: PUSH
45160: LD_INT 1
45162: PUSH
45163: EMPTY
45164: LIST
45165: LIST
45166: PUSH
45167: LD_INT 0
45169: PUSH
45170: LD_INT 1
45172: PUSH
45173: EMPTY
45174: LIST
45175: LIST
45176: PUSH
45177: LD_INT 1
45179: NEG
45180: PUSH
45181: LD_INT 0
45183: PUSH
45184: EMPTY
45185: LIST
45186: LIST
45187: PUSH
45188: LD_INT 1
45190: NEG
45191: PUSH
45192: LD_INT 1
45194: NEG
45195: PUSH
45196: EMPTY
45197: LIST
45198: LIST
45199: PUSH
45200: LD_INT 1
45202: NEG
45203: PUSH
45204: LD_INT 2
45206: NEG
45207: PUSH
45208: EMPTY
45209: LIST
45210: LIST
45211: PUSH
45212: LD_INT 0
45214: PUSH
45215: LD_INT 2
45217: NEG
45218: PUSH
45219: EMPTY
45220: LIST
45221: LIST
45222: PUSH
45223: LD_INT 1
45225: PUSH
45226: LD_INT 1
45228: NEG
45229: PUSH
45230: EMPTY
45231: LIST
45232: LIST
45233: PUSH
45234: LD_INT 1
45236: PUSH
45237: LD_INT 2
45239: PUSH
45240: EMPTY
45241: LIST
45242: LIST
45243: PUSH
45244: LD_INT 0
45246: PUSH
45247: LD_INT 2
45249: PUSH
45250: EMPTY
45251: LIST
45252: LIST
45253: PUSH
45254: LD_INT 1
45256: NEG
45257: PUSH
45258: LD_INT 1
45260: PUSH
45261: EMPTY
45262: LIST
45263: LIST
45264: PUSH
45265: LD_INT 1
45267: NEG
45268: PUSH
45269: LD_INT 3
45271: NEG
45272: PUSH
45273: EMPTY
45274: LIST
45275: LIST
45276: PUSH
45277: LD_INT 0
45279: PUSH
45280: LD_INT 3
45282: NEG
45283: PUSH
45284: EMPTY
45285: LIST
45286: LIST
45287: PUSH
45288: LD_INT 1
45290: PUSH
45291: LD_INT 2
45293: NEG
45294: PUSH
45295: EMPTY
45296: LIST
45297: LIST
45298: PUSH
45299: EMPTY
45300: LIST
45301: LIST
45302: LIST
45303: LIST
45304: LIST
45305: LIST
45306: LIST
45307: LIST
45308: LIST
45309: LIST
45310: LIST
45311: LIST
45312: LIST
45313: LIST
45314: LIST
45315: LIST
45316: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45317: LD_ADDR_VAR 0 15
45321: PUSH
45322: LD_INT 0
45324: PUSH
45325: LD_INT 0
45327: PUSH
45328: EMPTY
45329: LIST
45330: LIST
45331: PUSH
45332: LD_INT 0
45334: PUSH
45335: LD_INT 1
45337: NEG
45338: PUSH
45339: EMPTY
45340: LIST
45341: LIST
45342: PUSH
45343: LD_INT 1
45345: PUSH
45346: LD_INT 0
45348: PUSH
45349: EMPTY
45350: LIST
45351: LIST
45352: PUSH
45353: LD_INT 1
45355: PUSH
45356: LD_INT 1
45358: PUSH
45359: EMPTY
45360: LIST
45361: LIST
45362: PUSH
45363: LD_INT 0
45365: PUSH
45366: LD_INT 1
45368: PUSH
45369: EMPTY
45370: LIST
45371: LIST
45372: PUSH
45373: LD_INT 1
45375: NEG
45376: PUSH
45377: LD_INT 0
45379: PUSH
45380: EMPTY
45381: LIST
45382: LIST
45383: PUSH
45384: LD_INT 1
45386: NEG
45387: PUSH
45388: LD_INT 1
45390: NEG
45391: PUSH
45392: EMPTY
45393: LIST
45394: LIST
45395: PUSH
45396: LD_INT 1
45398: PUSH
45399: LD_INT 1
45401: NEG
45402: PUSH
45403: EMPTY
45404: LIST
45405: LIST
45406: PUSH
45407: LD_INT 2
45409: PUSH
45410: LD_INT 0
45412: PUSH
45413: EMPTY
45414: LIST
45415: LIST
45416: PUSH
45417: LD_INT 2
45419: PUSH
45420: LD_INT 1
45422: PUSH
45423: EMPTY
45424: LIST
45425: LIST
45426: PUSH
45427: LD_INT 1
45429: NEG
45430: PUSH
45431: LD_INT 1
45433: PUSH
45434: EMPTY
45435: LIST
45436: LIST
45437: PUSH
45438: LD_INT 2
45440: NEG
45441: PUSH
45442: LD_INT 0
45444: PUSH
45445: EMPTY
45446: LIST
45447: LIST
45448: PUSH
45449: LD_INT 2
45451: NEG
45452: PUSH
45453: LD_INT 1
45455: NEG
45456: PUSH
45457: EMPTY
45458: LIST
45459: LIST
45460: PUSH
45461: LD_INT 2
45463: PUSH
45464: LD_INT 1
45466: NEG
45467: PUSH
45468: EMPTY
45469: LIST
45470: LIST
45471: PUSH
45472: LD_INT 3
45474: PUSH
45475: LD_INT 0
45477: PUSH
45478: EMPTY
45479: LIST
45480: LIST
45481: PUSH
45482: LD_INT 3
45484: PUSH
45485: LD_INT 1
45487: PUSH
45488: EMPTY
45489: LIST
45490: LIST
45491: PUSH
45492: EMPTY
45493: LIST
45494: LIST
45495: LIST
45496: LIST
45497: LIST
45498: LIST
45499: LIST
45500: LIST
45501: LIST
45502: LIST
45503: LIST
45504: LIST
45505: LIST
45506: LIST
45507: LIST
45508: LIST
45509: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45510: LD_ADDR_VAR 0 16
45514: PUSH
45515: LD_INT 0
45517: PUSH
45518: LD_INT 0
45520: PUSH
45521: EMPTY
45522: LIST
45523: LIST
45524: PUSH
45525: LD_INT 0
45527: PUSH
45528: LD_INT 1
45530: NEG
45531: PUSH
45532: EMPTY
45533: LIST
45534: LIST
45535: PUSH
45536: LD_INT 1
45538: PUSH
45539: LD_INT 0
45541: PUSH
45542: EMPTY
45543: LIST
45544: LIST
45545: PUSH
45546: LD_INT 1
45548: PUSH
45549: LD_INT 1
45551: PUSH
45552: EMPTY
45553: LIST
45554: LIST
45555: PUSH
45556: LD_INT 0
45558: PUSH
45559: LD_INT 1
45561: PUSH
45562: EMPTY
45563: LIST
45564: LIST
45565: PUSH
45566: LD_INT 1
45568: NEG
45569: PUSH
45570: LD_INT 0
45572: PUSH
45573: EMPTY
45574: LIST
45575: LIST
45576: PUSH
45577: LD_INT 1
45579: NEG
45580: PUSH
45581: LD_INT 1
45583: NEG
45584: PUSH
45585: EMPTY
45586: LIST
45587: LIST
45588: PUSH
45589: LD_INT 1
45591: NEG
45592: PUSH
45593: LD_INT 2
45595: NEG
45596: PUSH
45597: EMPTY
45598: LIST
45599: LIST
45600: PUSH
45601: LD_INT 2
45603: PUSH
45604: LD_INT 1
45606: PUSH
45607: EMPTY
45608: LIST
45609: LIST
45610: PUSH
45611: LD_INT 2
45613: PUSH
45614: LD_INT 2
45616: PUSH
45617: EMPTY
45618: LIST
45619: LIST
45620: PUSH
45621: LD_INT 1
45623: PUSH
45624: LD_INT 2
45626: PUSH
45627: EMPTY
45628: LIST
45629: LIST
45630: PUSH
45631: LD_INT 2
45633: NEG
45634: PUSH
45635: LD_INT 1
45637: NEG
45638: PUSH
45639: EMPTY
45640: LIST
45641: LIST
45642: PUSH
45643: LD_INT 2
45645: NEG
45646: PUSH
45647: LD_INT 2
45649: NEG
45650: PUSH
45651: EMPTY
45652: LIST
45653: LIST
45654: PUSH
45655: LD_INT 3
45657: PUSH
45658: LD_INT 2
45660: PUSH
45661: EMPTY
45662: LIST
45663: LIST
45664: PUSH
45665: LD_INT 3
45667: PUSH
45668: LD_INT 3
45670: PUSH
45671: EMPTY
45672: LIST
45673: LIST
45674: PUSH
45675: LD_INT 2
45677: PUSH
45678: LD_INT 3
45680: PUSH
45681: EMPTY
45682: LIST
45683: LIST
45684: PUSH
45685: EMPTY
45686: LIST
45687: LIST
45688: LIST
45689: LIST
45690: LIST
45691: LIST
45692: LIST
45693: LIST
45694: LIST
45695: LIST
45696: LIST
45697: LIST
45698: LIST
45699: LIST
45700: LIST
45701: LIST
45702: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45703: LD_ADDR_VAR 0 17
45707: PUSH
45708: LD_INT 0
45710: PUSH
45711: LD_INT 0
45713: PUSH
45714: EMPTY
45715: LIST
45716: LIST
45717: PUSH
45718: LD_INT 0
45720: PUSH
45721: LD_INT 1
45723: NEG
45724: PUSH
45725: EMPTY
45726: LIST
45727: LIST
45728: PUSH
45729: LD_INT 1
45731: PUSH
45732: LD_INT 0
45734: PUSH
45735: EMPTY
45736: LIST
45737: LIST
45738: PUSH
45739: LD_INT 1
45741: PUSH
45742: LD_INT 1
45744: PUSH
45745: EMPTY
45746: LIST
45747: LIST
45748: PUSH
45749: LD_INT 0
45751: PUSH
45752: LD_INT 1
45754: PUSH
45755: EMPTY
45756: LIST
45757: LIST
45758: PUSH
45759: LD_INT 1
45761: NEG
45762: PUSH
45763: LD_INT 0
45765: PUSH
45766: EMPTY
45767: LIST
45768: LIST
45769: PUSH
45770: LD_INT 1
45772: NEG
45773: PUSH
45774: LD_INT 1
45776: NEG
45777: PUSH
45778: EMPTY
45779: LIST
45780: LIST
45781: PUSH
45782: LD_INT 1
45784: NEG
45785: PUSH
45786: LD_INT 2
45788: NEG
45789: PUSH
45790: EMPTY
45791: LIST
45792: LIST
45793: PUSH
45794: LD_INT 0
45796: PUSH
45797: LD_INT 2
45799: NEG
45800: PUSH
45801: EMPTY
45802: LIST
45803: LIST
45804: PUSH
45805: LD_INT 1
45807: PUSH
45808: LD_INT 1
45810: NEG
45811: PUSH
45812: EMPTY
45813: LIST
45814: LIST
45815: PUSH
45816: LD_INT 2
45818: PUSH
45819: LD_INT 0
45821: PUSH
45822: EMPTY
45823: LIST
45824: LIST
45825: PUSH
45826: LD_INT 2
45828: PUSH
45829: LD_INT 1
45831: PUSH
45832: EMPTY
45833: LIST
45834: LIST
45835: PUSH
45836: LD_INT 2
45838: PUSH
45839: LD_INT 2
45841: PUSH
45842: EMPTY
45843: LIST
45844: LIST
45845: PUSH
45846: LD_INT 1
45848: PUSH
45849: LD_INT 2
45851: PUSH
45852: EMPTY
45853: LIST
45854: LIST
45855: PUSH
45856: LD_INT 0
45858: PUSH
45859: LD_INT 2
45861: PUSH
45862: EMPTY
45863: LIST
45864: LIST
45865: PUSH
45866: LD_INT 1
45868: NEG
45869: PUSH
45870: LD_INT 1
45872: PUSH
45873: EMPTY
45874: LIST
45875: LIST
45876: PUSH
45877: LD_INT 2
45879: NEG
45880: PUSH
45881: LD_INT 0
45883: PUSH
45884: EMPTY
45885: LIST
45886: LIST
45887: PUSH
45888: LD_INT 2
45890: NEG
45891: PUSH
45892: LD_INT 1
45894: NEG
45895: PUSH
45896: EMPTY
45897: LIST
45898: LIST
45899: PUSH
45900: LD_INT 2
45902: NEG
45903: PUSH
45904: LD_INT 2
45906: NEG
45907: PUSH
45908: EMPTY
45909: LIST
45910: LIST
45911: PUSH
45912: EMPTY
45913: LIST
45914: LIST
45915: LIST
45916: LIST
45917: LIST
45918: LIST
45919: LIST
45920: LIST
45921: LIST
45922: LIST
45923: LIST
45924: LIST
45925: LIST
45926: LIST
45927: LIST
45928: LIST
45929: LIST
45930: LIST
45931: LIST
45932: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45933: LD_ADDR_VAR 0 18
45937: PUSH
45938: LD_INT 0
45940: PUSH
45941: LD_INT 0
45943: PUSH
45944: EMPTY
45945: LIST
45946: LIST
45947: PUSH
45948: LD_INT 0
45950: PUSH
45951: LD_INT 1
45953: NEG
45954: PUSH
45955: EMPTY
45956: LIST
45957: LIST
45958: PUSH
45959: LD_INT 1
45961: PUSH
45962: LD_INT 0
45964: PUSH
45965: EMPTY
45966: LIST
45967: LIST
45968: PUSH
45969: LD_INT 1
45971: PUSH
45972: LD_INT 1
45974: PUSH
45975: EMPTY
45976: LIST
45977: LIST
45978: PUSH
45979: LD_INT 0
45981: PUSH
45982: LD_INT 1
45984: PUSH
45985: EMPTY
45986: LIST
45987: LIST
45988: PUSH
45989: LD_INT 1
45991: NEG
45992: PUSH
45993: LD_INT 0
45995: PUSH
45996: EMPTY
45997: LIST
45998: LIST
45999: PUSH
46000: LD_INT 1
46002: NEG
46003: PUSH
46004: LD_INT 1
46006: NEG
46007: PUSH
46008: EMPTY
46009: LIST
46010: LIST
46011: PUSH
46012: LD_INT 1
46014: NEG
46015: PUSH
46016: LD_INT 2
46018: NEG
46019: PUSH
46020: EMPTY
46021: LIST
46022: LIST
46023: PUSH
46024: LD_INT 0
46026: PUSH
46027: LD_INT 2
46029: NEG
46030: PUSH
46031: EMPTY
46032: LIST
46033: LIST
46034: PUSH
46035: LD_INT 1
46037: PUSH
46038: LD_INT 1
46040: NEG
46041: PUSH
46042: EMPTY
46043: LIST
46044: LIST
46045: PUSH
46046: LD_INT 2
46048: PUSH
46049: LD_INT 0
46051: PUSH
46052: EMPTY
46053: LIST
46054: LIST
46055: PUSH
46056: LD_INT 2
46058: PUSH
46059: LD_INT 1
46061: PUSH
46062: EMPTY
46063: LIST
46064: LIST
46065: PUSH
46066: LD_INT 2
46068: PUSH
46069: LD_INT 2
46071: PUSH
46072: EMPTY
46073: LIST
46074: LIST
46075: PUSH
46076: LD_INT 1
46078: PUSH
46079: LD_INT 2
46081: PUSH
46082: EMPTY
46083: LIST
46084: LIST
46085: PUSH
46086: LD_INT 0
46088: PUSH
46089: LD_INT 2
46091: PUSH
46092: EMPTY
46093: LIST
46094: LIST
46095: PUSH
46096: LD_INT 1
46098: NEG
46099: PUSH
46100: LD_INT 1
46102: PUSH
46103: EMPTY
46104: LIST
46105: LIST
46106: PUSH
46107: LD_INT 2
46109: NEG
46110: PUSH
46111: LD_INT 0
46113: PUSH
46114: EMPTY
46115: LIST
46116: LIST
46117: PUSH
46118: LD_INT 2
46120: NEG
46121: PUSH
46122: LD_INT 1
46124: NEG
46125: PUSH
46126: EMPTY
46127: LIST
46128: LIST
46129: PUSH
46130: LD_INT 2
46132: NEG
46133: PUSH
46134: LD_INT 2
46136: NEG
46137: PUSH
46138: EMPTY
46139: LIST
46140: LIST
46141: PUSH
46142: EMPTY
46143: LIST
46144: LIST
46145: LIST
46146: LIST
46147: LIST
46148: LIST
46149: LIST
46150: LIST
46151: LIST
46152: LIST
46153: LIST
46154: LIST
46155: LIST
46156: LIST
46157: LIST
46158: LIST
46159: LIST
46160: LIST
46161: LIST
46162: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46163: LD_ADDR_VAR 0 19
46167: PUSH
46168: LD_INT 0
46170: PUSH
46171: LD_INT 0
46173: PUSH
46174: EMPTY
46175: LIST
46176: LIST
46177: PUSH
46178: LD_INT 0
46180: PUSH
46181: LD_INT 1
46183: NEG
46184: PUSH
46185: EMPTY
46186: LIST
46187: LIST
46188: PUSH
46189: LD_INT 1
46191: PUSH
46192: LD_INT 0
46194: PUSH
46195: EMPTY
46196: LIST
46197: LIST
46198: PUSH
46199: LD_INT 1
46201: PUSH
46202: LD_INT 1
46204: PUSH
46205: EMPTY
46206: LIST
46207: LIST
46208: PUSH
46209: LD_INT 0
46211: PUSH
46212: LD_INT 1
46214: PUSH
46215: EMPTY
46216: LIST
46217: LIST
46218: PUSH
46219: LD_INT 1
46221: NEG
46222: PUSH
46223: LD_INT 0
46225: PUSH
46226: EMPTY
46227: LIST
46228: LIST
46229: PUSH
46230: LD_INT 1
46232: NEG
46233: PUSH
46234: LD_INT 1
46236: NEG
46237: PUSH
46238: EMPTY
46239: LIST
46240: LIST
46241: PUSH
46242: LD_INT 1
46244: NEG
46245: PUSH
46246: LD_INT 2
46248: NEG
46249: PUSH
46250: EMPTY
46251: LIST
46252: LIST
46253: PUSH
46254: LD_INT 0
46256: PUSH
46257: LD_INT 2
46259: NEG
46260: PUSH
46261: EMPTY
46262: LIST
46263: LIST
46264: PUSH
46265: LD_INT 1
46267: PUSH
46268: LD_INT 1
46270: NEG
46271: PUSH
46272: EMPTY
46273: LIST
46274: LIST
46275: PUSH
46276: LD_INT 2
46278: PUSH
46279: LD_INT 0
46281: PUSH
46282: EMPTY
46283: LIST
46284: LIST
46285: PUSH
46286: LD_INT 2
46288: PUSH
46289: LD_INT 1
46291: PUSH
46292: EMPTY
46293: LIST
46294: LIST
46295: PUSH
46296: LD_INT 2
46298: PUSH
46299: LD_INT 2
46301: PUSH
46302: EMPTY
46303: LIST
46304: LIST
46305: PUSH
46306: LD_INT 1
46308: PUSH
46309: LD_INT 2
46311: PUSH
46312: EMPTY
46313: LIST
46314: LIST
46315: PUSH
46316: LD_INT 0
46318: PUSH
46319: LD_INT 2
46321: PUSH
46322: EMPTY
46323: LIST
46324: LIST
46325: PUSH
46326: LD_INT 1
46328: NEG
46329: PUSH
46330: LD_INT 1
46332: PUSH
46333: EMPTY
46334: LIST
46335: LIST
46336: PUSH
46337: LD_INT 2
46339: NEG
46340: PUSH
46341: LD_INT 0
46343: PUSH
46344: EMPTY
46345: LIST
46346: LIST
46347: PUSH
46348: LD_INT 2
46350: NEG
46351: PUSH
46352: LD_INT 1
46354: NEG
46355: PUSH
46356: EMPTY
46357: LIST
46358: LIST
46359: PUSH
46360: LD_INT 2
46362: NEG
46363: PUSH
46364: LD_INT 2
46366: NEG
46367: PUSH
46368: EMPTY
46369: LIST
46370: LIST
46371: PUSH
46372: EMPTY
46373: LIST
46374: LIST
46375: LIST
46376: LIST
46377: LIST
46378: LIST
46379: LIST
46380: LIST
46381: LIST
46382: LIST
46383: LIST
46384: LIST
46385: LIST
46386: LIST
46387: LIST
46388: LIST
46389: LIST
46390: LIST
46391: LIST
46392: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46393: LD_ADDR_VAR 0 20
46397: PUSH
46398: LD_INT 0
46400: PUSH
46401: LD_INT 0
46403: PUSH
46404: EMPTY
46405: LIST
46406: LIST
46407: PUSH
46408: LD_INT 0
46410: PUSH
46411: LD_INT 1
46413: NEG
46414: PUSH
46415: EMPTY
46416: LIST
46417: LIST
46418: PUSH
46419: LD_INT 1
46421: PUSH
46422: LD_INT 0
46424: PUSH
46425: EMPTY
46426: LIST
46427: LIST
46428: PUSH
46429: LD_INT 1
46431: PUSH
46432: LD_INT 1
46434: PUSH
46435: EMPTY
46436: LIST
46437: LIST
46438: PUSH
46439: LD_INT 0
46441: PUSH
46442: LD_INT 1
46444: PUSH
46445: EMPTY
46446: LIST
46447: LIST
46448: PUSH
46449: LD_INT 1
46451: NEG
46452: PUSH
46453: LD_INT 0
46455: PUSH
46456: EMPTY
46457: LIST
46458: LIST
46459: PUSH
46460: LD_INT 1
46462: NEG
46463: PUSH
46464: LD_INT 1
46466: NEG
46467: PUSH
46468: EMPTY
46469: LIST
46470: LIST
46471: PUSH
46472: LD_INT 1
46474: NEG
46475: PUSH
46476: LD_INT 2
46478: NEG
46479: PUSH
46480: EMPTY
46481: LIST
46482: LIST
46483: PUSH
46484: LD_INT 0
46486: PUSH
46487: LD_INT 2
46489: NEG
46490: PUSH
46491: EMPTY
46492: LIST
46493: LIST
46494: PUSH
46495: LD_INT 1
46497: PUSH
46498: LD_INT 1
46500: NEG
46501: PUSH
46502: EMPTY
46503: LIST
46504: LIST
46505: PUSH
46506: LD_INT 2
46508: PUSH
46509: LD_INT 0
46511: PUSH
46512: EMPTY
46513: LIST
46514: LIST
46515: PUSH
46516: LD_INT 2
46518: PUSH
46519: LD_INT 1
46521: PUSH
46522: EMPTY
46523: LIST
46524: LIST
46525: PUSH
46526: LD_INT 2
46528: PUSH
46529: LD_INT 2
46531: PUSH
46532: EMPTY
46533: LIST
46534: LIST
46535: PUSH
46536: LD_INT 1
46538: PUSH
46539: LD_INT 2
46541: PUSH
46542: EMPTY
46543: LIST
46544: LIST
46545: PUSH
46546: LD_INT 0
46548: PUSH
46549: LD_INT 2
46551: PUSH
46552: EMPTY
46553: LIST
46554: LIST
46555: PUSH
46556: LD_INT 1
46558: NEG
46559: PUSH
46560: LD_INT 1
46562: PUSH
46563: EMPTY
46564: LIST
46565: LIST
46566: PUSH
46567: LD_INT 2
46569: NEG
46570: PUSH
46571: LD_INT 0
46573: PUSH
46574: EMPTY
46575: LIST
46576: LIST
46577: PUSH
46578: LD_INT 2
46580: NEG
46581: PUSH
46582: LD_INT 1
46584: NEG
46585: PUSH
46586: EMPTY
46587: LIST
46588: LIST
46589: PUSH
46590: LD_INT 2
46592: NEG
46593: PUSH
46594: LD_INT 2
46596: NEG
46597: PUSH
46598: EMPTY
46599: LIST
46600: LIST
46601: PUSH
46602: EMPTY
46603: LIST
46604: LIST
46605: LIST
46606: LIST
46607: LIST
46608: LIST
46609: LIST
46610: LIST
46611: LIST
46612: LIST
46613: LIST
46614: LIST
46615: LIST
46616: LIST
46617: LIST
46618: LIST
46619: LIST
46620: LIST
46621: LIST
46622: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46623: LD_ADDR_VAR 0 21
46627: PUSH
46628: LD_INT 0
46630: PUSH
46631: LD_INT 0
46633: PUSH
46634: EMPTY
46635: LIST
46636: LIST
46637: PUSH
46638: LD_INT 0
46640: PUSH
46641: LD_INT 1
46643: NEG
46644: PUSH
46645: EMPTY
46646: LIST
46647: LIST
46648: PUSH
46649: LD_INT 1
46651: PUSH
46652: LD_INT 0
46654: PUSH
46655: EMPTY
46656: LIST
46657: LIST
46658: PUSH
46659: LD_INT 1
46661: PUSH
46662: LD_INT 1
46664: PUSH
46665: EMPTY
46666: LIST
46667: LIST
46668: PUSH
46669: LD_INT 0
46671: PUSH
46672: LD_INT 1
46674: PUSH
46675: EMPTY
46676: LIST
46677: LIST
46678: PUSH
46679: LD_INT 1
46681: NEG
46682: PUSH
46683: LD_INT 0
46685: PUSH
46686: EMPTY
46687: LIST
46688: LIST
46689: PUSH
46690: LD_INT 1
46692: NEG
46693: PUSH
46694: LD_INT 1
46696: NEG
46697: PUSH
46698: EMPTY
46699: LIST
46700: LIST
46701: PUSH
46702: LD_INT 1
46704: NEG
46705: PUSH
46706: LD_INT 2
46708: NEG
46709: PUSH
46710: EMPTY
46711: LIST
46712: LIST
46713: PUSH
46714: LD_INT 0
46716: PUSH
46717: LD_INT 2
46719: NEG
46720: PUSH
46721: EMPTY
46722: LIST
46723: LIST
46724: PUSH
46725: LD_INT 1
46727: PUSH
46728: LD_INT 1
46730: NEG
46731: PUSH
46732: EMPTY
46733: LIST
46734: LIST
46735: PUSH
46736: LD_INT 2
46738: PUSH
46739: LD_INT 0
46741: PUSH
46742: EMPTY
46743: LIST
46744: LIST
46745: PUSH
46746: LD_INT 2
46748: PUSH
46749: LD_INT 1
46751: PUSH
46752: EMPTY
46753: LIST
46754: LIST
46755: PUSH
46756: LD_INT 2
46758: PUSH
46759: LD_INT 2
46761: PUSH
46762: EMPTY
46763: LIST
46764: LIST
46765: PUSH
46766: LD_INT 1
46768: PUSH
46769: LD_INT 2
46771: PUSH
46772: EMPTY
46773: LIST
46774: LIST
46775: PUSH
46776: LD_INT 0
46778: PUSH
46779: LD_INT 2
46781: PUSH
46782: EMPTY
46783: LIST
46784: LIST
46785: PUSH
46786: LD_INT 1
46788: NEG
46789: PUSH
46790: LD_INT 1
46792: PUSH
46793: EMPTY
46794: LIST
46795: LIST
46796: PUSH
46797: LD_INT 2
46799: NEG
46800: PUSH
46801: LD_INT 0
46803: PUSH
46804: EMPTY
46805: LIST
46806: LIST
46807: PUSH
46808: LD_INT 2
46810: NEG
46811: PUSH
46812: LD_INT 1
46814: NEG
46815: PUSH
46816: EMPTY
46817: LIST
46818: LIST
46819: PUSH
46820: LD_INT 2
46822: NEG
46823: PUSH
46824: LD_INT 2
46826: NEG
46827: PUSH
46828: EMPTY
46829: LIST
46830: LIST
46831: PUSH
46832: EMPTY
46833: LIST
46834: LIST
46835: LIST
46836: LIST
46837: LIST
46838: LIST
46839: LIST
46840: LIST
46841: LIST
46842: LIST
46843: LIST
46844: LIST
46845: LIST
46846: LIST
46847: LIST
46848: LIST
46849: LIST
46850: LIST
46851: LIST
46852: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46853: LD_ADDR_VAR 0 22
46857: PUSH
46858: LD_INT 0
46860: PUSH
46861: LD_INT 0
46863: PUSH
46864: EMPTY
46865: LIST
46866: LIST
46867: PUSH
46868: LD_INT 0
46870: PUSH
46871: LD_INT 1
46873: NEG
46874: PUSH
46875: EMPTY
46876: LIST
46877: LIST
46878: PUSH
46879: LD_INT 1
46881: PUSH
46882: LD_INT 0
46884: PUSH
46885: EMPTY
46886: LIST
46887: LIST
46888: PUSH
46889: LD_INT 1
46891: PUSH
46892: LD_INT 1
46894: PUSH
46895: EMPTY
46896: LIST
46897: LIST
46898: PUSH
46899: LD_INT 0
46901: PUSH
46902: LD_INT 1
46904: PUSH
46905: EMPTY
46906: LIST
46907: LIST
46908: PUSH
46909: LD_INT 1
46911: NEG
46912: PUSH
46913: LD_INT 0
46915: PUSH
46916: EMPTY
46917: LIST
46918: LIST
46919: PUSH
46920: LD_INT 1
46922: NEG
46923: PUSH
46924: LD_INT 1
46926: NEG
46927: PUSH
46928: EMPTY
46929: LIST
46930: LIST
46931: PUSH
46932: LD_INT 1
46934: NEG
46935: PUSH
46936: LD_INT 2
46938: NEG
46939: PUSH
46940: EMPTY
46941: LIST
46942: LIST
46943: PUSH
46944: LD_INT 0
46946: PUSH
46947: LD_INT 2
46949: NEG
46950: PUSH
46951: EMPTY
46952: LIST
46953: LIST
46954: PUSH
46955: LD_INT 1
46957: PUSH
46958: LD_INT 1
46960: NEG
46961: PUSH
46962: EMPTY
46963: LIST
46964: LIST
46965: PUSH
46966: LD_INT 2
46968: PUSH
46969: LD_INT 0
46971: PUSH
46972: EMPTY
46973: LIST
46974: LIST
46975: PUSH
46976: LD_INT 2
46978: PUSH
46979: LD_INT 1
46981: PUSH
46982: EMPTY
46983: LIST
46984: LIST
46985: PUSH
46986: LD_INT 2
46988: PUSH
46989: LD_INT 2
46991: PUSH
46992: EMPTY
46993: LIST
46994: LIST
46995: PUSH
46996: LD_INT 1
46998: PUSH
46999: LD_INT 2
47001: PUSH
47002: EMPTY
47003: LIST
47004: LIST
47005: PUSH
47006: LD_INT 0
47008: PUSH
47009: LD_INT 2
47011: PUSH
47012: EMPTY
47013: LIST
47014: LIST
47015: PUSH
47016: LD_INT 1
47018: NEG
47019: PUSH
47020: LD_INT 1
47022: PUSH
47023: EMPTY
47024: LIST
47025: LIST
47026: PUSH
47027: LD_INT 2
47029: NEG
47030: PUSH
47031: LD_INT 0
47033: PUSH
47034: EMPTY
47035: LIST
47036: LIST
47037: PUSH
47038: LD_INT 2
47040: NEG
47041: PUSH
47042: LD_INT 1
47044: NEG
47045: PUSH
47046: EMPTY
47047: LIST
47048: LIST
47049: PUSH
47050: LD_INT 2
47052: NEG
47053: PUSH
47054: LD_INT 2
47056: NEG
47057: PUSH
47058: EMPTY
47059: LIST
47060: LIST
47061: PUSH
47062: EMPTY
47063: LIST
47064: LIST
47065: LIST
47066: LIST
47067: LIST
47068: LIST
47069: LIST
47070: LIST
47071: LIST
47072: LIST
47073: LIST
47074: LIST
47075: LIST
47076: LIST
47077: LIST
47078: LIST
47079: LIST
47080: LIST
47081: LIST
47082: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
47083: LD_ADDR_VAR 0 23
47087: PUSH
47088: LD_INT 0
47090: PUSH
47091: LD_INT 0
47093: PUSH
47094: EMPTY
47095: LIST
47096: LIST
47097: PUSH
47098: LD_INT 0
47100: PUSH
47101: LD_INT 1
47103: NEG
47104: PUSH
47105: EMPTY
47106: LIST
47107: LIST
47108: PUSH
47109: LD_INT 1
47111: PUSH
47112: LD_INT 0
47114: PUSH
47115: EMPTY
47116: LIST
47117: LIST
47118: PUSH
47119: LD_INT 1
47121: PUSH
47122: LD_INT 1
47124: PUSH
47125: EMPTY
47126: LIST
47127: LIST
47128: PUSH
47129: LD_INT 0
47131: PUSH
47132: LD_INT 1
47134: PUSH
47135: EMPTY
47136: LIST
47137: LIST
47138: PUSH
47139: LD_INT 1
47141: NEG
47142: PUSH
47143: LD_INT 0
47145: PUSH
47146: EMPTY
47147: LIST
47148: LIST
47149: PUSH
47150: LD_INT 1
47152: NEG
47153: PUSH
47154: LD_INT 1
47156: NEG
47157: PUSH
47158: EMPTY
47159: LIST
47160: LIST
47161: PUSH
47162: LD_INT 1
47164: NEG
47165: PUSH
47166: LD_INT 2
47168: NEG
47169: PUSH
47170: EMPTY
47171: LIST
47172: LIST
47173: PUSH
47174: LD_INT 0
47176: PUSH
47177: LD_INT 2
47179: NEG
47180: PUSH
47181: EMPTY
47182: LIST
47183: LIST
47184: PUSH
47185: LD_INT 1
47187: PUSH
47188: LD_INT 1
47190: NEG
47191: PUSH
47192: EMPTY
47193: LIST
47194: LIST
47195: PUSH
47196: LD_INT 2
47198: PUSH
47199: LD_INT 0
47201: PUSH
47202: EMPTY
47203: LIST
47204: LIST
47205: PUSH
47206: LD_INT 2
47208: PUSH
47209: LD_INT 1
47211: PUSH
47212: EMPTY
47213: LIST
47214: LIST
47215: PUSH
47216: LD_INT 2
47218: PUSH
47219: LD_INT 2
47221: PUSH
47222: EMPTY
47223: LIST
47224: LIST
47225: PUSH
47226: LD_INT 1
47228: PUSH
47229: LD_INT 2
47231: PUSH
47232: EMPTY
47233: LIST
47234: LIST
47235: PUSH
47236: LD_INT 0
47238: PUSH
47239: LD_INT 2
47241: PUSH
47242: EMPTY
47243: LIST
47244: LIST
47245: PUSH
47246: LD_INT 1
47248: NEG
47249: PUSH
47250: LD_INT 1
47252: PUSH
47253: EMPTY
47254: LIST
47255: LIST
47256: PUSH
47257: LD_INT 2
47259: NEG
47260: PUSH
47261: LD_INT 0
47263: PUSH
47264: EMPTY
47265: LIST
47266: LIST
47267: PUSH
47268: LD_INT 2
47270: NEG
47271: PUSH
47272: LD_INT 1
47274: NEG
47275: PUSH
47276: EMPTY
47277: LIST
47278: LIST
47279: PUSH
47280: LD_INT 2
47282: NEG
47283: PUSH
47284: LD_INT 2
47286: NEG
47287: PUSH
47288: EMPTY
47289: LIST
47290: LIST
47291: PUSH
47292: LD_INT 2
47294: NEG
47295: PUSH
47296: LD_INT 3
47298: NEG
47299: PUSH
47300: EMPTY
47301: LIST
47302: LIST
47303: PUSH
47304: LD_INT 1
47306: NEG
47307: PUSH
47308: LD_INT 3
47310: NEG
47311: PUSH
47312: EMPTY
47313: LIST
47314: LIST
47315: PUSH
47316: LD_INT 1
47318: PUSH
47319: LD_INT 2
47321: NEG
47322: PUSH
47323: EMPTY
47324: LIST
47325: LIST
47326: PUSH
47327: LD_INT 2
47329: PUSH
47330: LD_INT 1
47332: NEG
47333: PUSH
47334: EMPTY
47335: LIST
47336: LIST
47337: PUSH
47338: EMPTY
47339: LIST
47340: LIST
47341: LIST
47342: LIST
47343: LIST
47344: LIST
47345: LIST
47346: LIST
47347: LIST
47348: LIST
47349: LIST
47350: LIST
47351: LIST
47352: LIST
47353: LIST
47354: LIST
47355: LIST
47356: LIST
47357: LIST
47358: LIST
47359: LIST
47360: LIST
47361: LIST
47362: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
47363: LD_ADDR_VAR 0 24
47367: PUSH
47368: LD_INT 0
47370: PUSH
47371: LD_INT 0
47373: PUSH
47374: EMPTY
47375: LIST
47376: LIST
47377: PUSH
47378: LD_INT 0
47380: PUSH
47381: LD_INT 1
47383: NEG
47384: PUSH
47385: EMPTY
47386: LIST
47387: LIST
47388: PUSH
47389: LD_INT 1
47391: PUSH
47392: LD_INT 0
47394: PUSH
47395: EMPTY
47396: LIST
47397: LIST
47398: PUSH
47399: LD_INT 1
47401: PUSH
47402: LD_INT 1
47404: PUSH
47405: EMPTY
47406: LIST
47407: LIST
47408: PUSH
47409: LD_INT 0
47411: PUSH
47412: LD_INT 1
47414: PUSH
47415: EMPTY
47416: LIST
47417: LIST
47418: PUSH
47419: LD_INT 1
47421: NEG
47422: PUSH
47423: LD_INT 0
47425: PUSH
47426: EMPTY
47427: LIST
47428: LIST
47429: PUSH
47430: LD_INT 1
47432: NEG
47433: PUSH
47434: LD_INT 1
47436: NEG
47437: PUSH
47438: EMPTY
47439: LIST
47440: LIST
47441: PUSH
47442: LD_INT 1
47444: NEG
47445: PUSH
47446: LD_INT 2
47448: NEG
47449: PUSH
47450: EMPTY
47451: LIST
47452: LIST
47453: PUSH
47454: LD_INT 0
47456: PUSH
47457: LD_INT 2
47459: NEG
47460: PUSH
47461: EMPTY
47462: LIST
47463: LIST
47464: PUSH
47465: LD_INT 1
47467: PUSH
47468: LD_INT 1
47470: NEG
47471: PUSH
47472: EMPTY
47473: LIST
47474: LIST
47475: PUSH
47476: LD_INT 2
47478: PUSH
47479: LD_INT 0
47481: PUSH
47482: EMPTY
47483: LIST
47484: LIST
47485: PUSH
47486: LD_INT 2
47488: PUSH
47489: LD_INT 1
47491: PUSH
47492: EMPTY
47493: LIST
47494: LIST
47495: PUSH
47496: LD_INT 2
47498: PUSH
47499: LD_INT 2
47501: PUSH
47502: EMPTY
47503: LIST
47504: LIST
47505: PUSH
47506: LD_INT 1
47508: PUSH
47509: LD_INT 2
47511: PUSH
47512: EMPTY
47513: LIST
47514: LIST
47515: PUSH
47516: LD_INT 0
47518: PUSH
47519: LD_INT 2
47521: PUSH
47522: EMPTY
47523: LIST
47524: LIST
47525: PUSH
47526: LD_INT 1
47528: NEG
47529: PUSH
47530: LD_INT 1
47532: PUSH
47533: EMPTY
47534: LIST
47535: LIST
47536: PUSH
47537: LD_INT 2
47539: NEG
47540: PUSH
47541: LD_INT 0
47543: PUSH
47544: EMPTY
47545: LIST
47546: LIST
47547: PUSH
47548: LD_INT 2
47550: NEG
47551: PUSH
47552: LD_INT 1
47554: NEG
47555: PUSH
47556: EMPTY
47557: LIST
47558: LIST
47559: PUSH
47560: LD_INT 2
47562: NEG
47563: PUSH
47564: LD_INT 2
47566: NEG
47567: PUSH
47568: EMPTY
47569: LIST
47570: LIST
47571: PUSH
47572: LD_INT 1
47574: PUSH
47575: LD_INT 2
47577: NEG
47578: PUSH
47579: EMPTY
47580: LIST
47581: LIST
47582: PUSH
47583: LD_INT 2
47585: PUSH
47586: LD_INT 1
47588: NEG
47589: PUSH
47590: EMPTY
47591: LIST
47592: LIST
47593: PUSH
47594: LD_INT 3
47596: PUSH
47597: LD_INT 1
47599: PUSH
47600: EMPTY
47601: LIST
47602: LIST
47603: PUSH
47604: LD_INT 3
47606: PUSH
47607: LD_INT 2
47609: PUSH
47610: EMPTY
47611: LIST
47612: LIST
47613: PUSH
47614: EMPTY
47615: LIST
47616: LIST
47617: LIST
47618: LIST
47619: LIST
47620: LIST
47621: LIST
47622: LIST
47623: LIST
47624: LIST
47625: LIST
47626: LIST
47627: LIST
47628: LIST
47629: LIST
47630: LIST
47631: LIST
47632: LIST
47633: LIST
47634: LIST
47635: LIST
47636: LIST
47637: LIST
47638: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
47639: LD_ADDR_VAR 0 25
47643: PUSH
47644: LD_INT 0
47646: PUSH
47647: LD_INT 0
47649: PUSH
47650: EMPTY
47651: LIST
47652: LIST
47653: PUSH
47654: LD_INT 0
47656: PUSH
47657: LD_INT 1
47659: NEG
47660: PUSH
47661: EMPTY
47662: LIST
47663: LIST
47664: PUSH
47665: LD_INT 1
47667: PUSH
47668: LD_INT 0
47670: PUSH
47671: EMPTY
47672: LIST
47673: LIST
47674: PUSH
47675: LD_INT 1
47677: PUSH
47678: LD_INT 1
47680: PUSH
47681: EMPTY
47682: LIST
47683: LIST
47684: PUSH
47685: LD_INT 0
47687: PUSH
47688: LD_INT 1
47690: PUSH
47691: EMPTY
47692: LIST
47693: LIST
47694: PUSH
47695: LD_INT 1
47697: NEG
47698: PUSH
47699: LD_INT 0
47701: PUSH
47702: EMPTY
47703: LIST
47704: LIST
47705: PUSH
47706: LD_INT 1
47708: NEG
47709: PUSH
47710: LD_INT 1
47712: NEG
47713: PUSH
47714: EMPTY
47715: LIST
47716: LIST
47717: PUSH
47718: LD_INT 1
47720: NEG
47721: PUSH
47722: LD_INT 2
47724: NEG
47725: PUSH
47726: EMPTY
47727: LIST
47728: LIST
47729: PUSH
47730: LD_INT 0
47732: PUSH
47733: LD_INT 2
47735: NEG
47736: PUSH
47737: EMPTY
47738: LIST
47739: LIST
47740: PUSH
47741: LD_INT 1
47743: PUSH
47744: LD_INT 1
47746: NEG
47747: PUSH
47748: EMPTY
47749: LIST
47750: LIST
47751: PUSH
47752: LD_INT 2
47754: PUSH
47755: LD_INT 0
47757: PUSH
47758: EMPTY
47759: LIST
47760: LIST
47761: PUSH
47762: LD_INT 2
47764: PUSH
47765: LD_INT 1
47767: PUSH
47768: EMPTY
47769: LIST
47770: LIST
47771: PUSH
47772: LD_INT 2
47774: PUSH
47775: LD_INT 2
47777: PUSH
47778: EMPTY
47779: LIST
47780: LIST
47781: PUSH
47782: LD_INT 1
47784: PUSH
47785: LD_INT 2
47787: PUSH
47788: EMPTY
47789: LIST
47790: LIST
47791: PUSH
47792: LD_INT 0
47794: PUSH
47795: LD_INT 2
47797: PUSH
47798: EMPTY
47799: LIST
47800: LIST
47801: PUSH
47802: LD_INT 1
47804: NEG
47805: PUSH
47806: LD_INT 1
47808: PUSH
47809: EMPTY
47810: LIST
47811: LIST
47812: PUSH
47813: LD_INT 2
47815: NEG
47816: PUSH
47817: LD_INT 0
47819: PUSH
47820: EMPTY
47821: LIST
47822: LIST
47823: PUSH
47824: LD_INT 2
47826: NEG
47827: PUSH
47828: LD_INT 1
47830: NEG
47831: PUSH
47832: EMPTY
47833: LIST
47834: LIST
47835: PUSH
47836: LD_INT 2
47838: NEG
47839: PUSH
47840: LD_INT 2
47842: NEG
47843: PUSH
47844: EMPTY
47845: LIST
47846: LIST
47847: PUSH
47848: LD_INT 3
47850: PUSH
47851: LD_INT 1
47853: PUSH
47854: EMPTY
47855: LIST
47856: LIST
47857: PUSH
47858: LD_INT 3
47860: PUSH
47861: LD_INT 2
47863: PUSH
47864: EMPTY
47865: LIST
47866: LIST
47867: PUSH
47868: LD_INT 2
47870: PUSH
47871: LD_INT 3
47873: PUSH
47874: EMPTY
47875: LIST
47876: LIST
47877: PUSH
47878: LD_INT 1
47880: PUSH
47881: LD_INT 3
47883: PUSH
47884: EMPTY
47885: LIST
47886: LIST
47887: PUSH
47888: EMPTY
47889: LIST
47890: LIST
47891: LIST
47892: LIST
47893: LIST
47894: LIST
47895: LIST
47896: LIST
47897: LIST
47898: LIST
47899: LIST
47900: LIST
47901: LIST
47902: LIST
47903: LIST
47904: LIST
47905: LIST
47906: LIST
47907: LIST
47908: LIST
47909: LIST
47910: LIST
47911: LIST
47912: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
47913: LD_ADDR_VAR 0 26
47917: PUSH
47918: LD_INT 0
47920: PUSH
47921: LD_INT 0
47923: PUSH
47924: EMPTY
47925: LIST
47926: LIST
47927: PUSH
47928: LD_INT 0
47930: PUSH
47931: LD_INT 1
47933: NEG
47934: PUSH
47935: EMPTY
47936: LIST
47937: LIST
47938: PUSH
47939: LD_INT 1
47941: PUSH
47942: LD_INT 0
47944: PUSH
47945: EMPTY
47946: LIST
47947: LIST
47948: PUSH
47949: LD_INT 1
47951: PUSH
47952: LD_INT 1
47954: PUSH
47955: EMPTY
47956: LIST
47957: LIST
47958: PUSH
47959: LD_INT 0
47961: PUSH
47962: LD_INT 1
47964: PUSH
47965: EMPTY
47966: LIST
47967: LIST
47968: PUSH
47969: LD_INT 1
47971: NEG
47972: PUSH
47973: LD_INT 0
47975: PUSH
47976: EMPTY
47977: LIST
47978: LIST
47979: PUSH
47980: LD_INT 1
47982: NEG
47983: PUSH
47984: LD_INT 1
47986: NEG
47987: PUSH
47988: EMPTY
47989: LIST
47990: LIST
47991: PUSH
47992: LD_INT 1
47994: NEG
47995: PUSH
47996: LD_INT 2
47998: NEG
47999: PUSH
48000: EMPTY
48001: LIST
48002: LIST
48003: PUSH
48004: LD_INT 0
48006: PUSH
48007: LD_INT 2
48009: NEG
48010: PUSH
48011: EMPTY
48012: LIST
48013: LIST
48014: PUSH
48015: LD_INT 1
48017: PUSH
48018: LD_INT 1
48020: NEG
48021: PUSH
48022: EMPTY
48023: LIST
48024: LIST
48025: PUSH
48026: LD_INT 2
48028: PUSH
48029: LD_INT 0
48031: PUSH
48032: EMPTY
48033: LIST
48034: LIST
48035: PUSH
48036: LD_INT 2
48038: PUSH
48039: LD_INT 1
48041: PUSH
48042: EMPTY
48043: LIST
48044: LIST
48045: PUSH
48046: LD_INT 2
48048: PUSH
48049: LD_INT 2
48051: PUSH
48052: EMPTY
48053: LIST
48054: LIST
48055: PUSH
48056: LD_INT 1
48058: PUSH
48059: LD_INT 2
48061: PUSH
48062: EMPTY
48063: LIST
48064: LIST
48065: PUSH
48066: LD_INT 0
48068: PUSH
48069: LD_INT 2
48071: PUSH
48072: EMPTY
48073: LIST
48074: LIST
48075: PUSH
48076: LD_INT 1
48078: NEG
48079: PUSH
48080: LD_INT 1
48082: PUSH
48083: EMPTY
48084: LIST
48085: LIST
48086: PUSH
48087: LD_INT 2
48089: NEG
48090: PUSH
48091: LD_INT 0
48093: PUSH
48094: EMPTY
48095: LIST
48096: LIST
48097: PUSH
48098: LD_INT 2
48100: NEG
48101: PUSH
48102: LD_INT 1
48104: NEG
48105: PUSH
48106: EMPTY
48107: LIST
48108: LIST
48109: PUSH
48110: LD_INT 2
48112: NEG
48113: PUSH
48114: LD_INT 2
48116: NEG
48117: PUSH
48118: EMPTY
48119: LIST
48120: LIST
48121: PUSH
48122: LD_INT 2
48124: PUSH
48125: LD_INT 3
48127: PUSH
48128: EMPTY
48129: LIST
48130: LIST
48131: PUSH
48132: LD_INT 1
48134: PUSH
48135: LD_INT 3
48137: PUSH
48138: EMPTY
48139: LIST
48140: LIST
48141: PUSH
48142: LD_INT 1
48144: NEG
48145: PUSH
48146: LD_INT 2
48148: PUSH
48149: EMPTY
48150: LIST
48151: LIST
48152: PUSH
48153: LD_INT 2
48155: NEG
48156: PUSH
48157: LD_INT 1
48159: PUSH
48160: EMPTY
48161: LIST
48162: LIST
48163: PUSH
48164: EMPTY
48165: LIST
48166: LIST
48167: LIST
48168: LIST
48169: LIST
48170: LIST
48171: LIST
48172: LIST
48173: LIST
48174: LIST
48175: LIST
48176: LIST
48177: LIST
48178: LIST
48179: LIST
48180: LIST
48181: LIST
48182: LIST
48183: LIST
48184: LIST
48185: LIST
48186: LIST
48187: LIST
48188: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48189: LD_ADDR_VAR 0 27
48193: PUSH
48194: LD_INT 0
48196: PUSH
48197: LD_INT 0
48199: PUSH
48200: EMPTY
48201: LIST
48202: LIST
48203: PUSH
48204: LD_INT 0
48206: PUSH
48207: LD_INT 1
48209: NEG
48210: PUSH
48211: EMPTY
48212: LIST
48213: LIST
48214: PUSH
48215: LD_INT 1
48217: PUSH
48218: LD_INT 0
48220: PUSH
48221: EMPTY
48222: LIST
48223: LIST
48224: PUSH
48225: LD_INT 1
48227: PUSH
48228: LD_INT 1
48230: PUSH
48231: EMPTY
48232: LIST
48233: LIST
48234: PUSH
48235: LD_INT 0
48237: PUSH
48238: LD_INT 1
48240: PUSH
48241: EMPTY
48242: LIST
48243: LIST
48244: PUSH
48245: LD_INT 1
48247: NEG
48248: PUSH
48249: LD_INT 0
48251: PUSH
48252: EMPTY
48253: LIST
48254: LIST
48255: PUSH
48256: LD_INT 1
48258: NEG
48259: PUSH
48260: LD_INT 1
48262: NEG
48263: PUSH
48264: EMPTY
48265: LIST
48266: LIST
48267: PUSH
48268: LD_INT 1
48270: NEG
48271: PUSH
48272: LD_INT 2
48274: NEG
48275: PUSH
48276: EMPTY
48277: LIST
48278: LIST
48279: PUSH
48280: LD_INT 0
48282: PUSH
48283: LD_INT 2
48285: NEG
48286: PUSH
48287: EMPTY
48288: LIST
48289: LIST
48290: PUSH
48291: LD_INT 1
48293: PUSH
48294: LD_INT 1
48296: NEG
48297: PUSH
48298: EMPTY
48299: LIST
48300: LIST
48301: PUSH
48302: LD_INT 2
48304: PUSH
48305: LD_INT 0
48307: PUSH
48308: EMPTY
48309: LIST
48310: LIST
48311: PUSH
48312: LD_INT 2
48314: PUSH
48315: LD_INT 1
48317: PUSH
48318: EMPTY
48319: LIST
48320: LIST
48321: PUSH
48322: LD_INT 2
48324: PUSH
48325: LD_INT 2
48327: PUSH
48328: EMPTY
48329: LIST
48330: LIST
48331: PUSH
48332: LD_INT 1
48334: PUSH
48335: LD_INT 2
48337: PUSH
48338: EMPTY
48339: LIST
48340: LIST
48341: PUSH
48342: LD_INT 0
48344: PUSH
48345: LD_INT 2
48347: PUSH
48348: EMPTY
48349: LIST
48350: LIST
48351: PUSH
48352: LD_INT 1
48354: NEG
48355: PUSH
48356: LD_INT 1
48358: PUSH
48359: EMPTY
48360: LIST
48361: LIST
48362: PUSH
48363: LD_INT 2
48365: NEG
48366: PUSH
48367: LD_INT 0
48369: PUSH
48370: EMPTY
48371: LIST
48372: LIST
48373: PUSH
48374: LD_INT 2
48376: NEG
48377: PUSH
48378: LD_INT 1
48380: NEG
48381: PUSH
48382: EMPTY
48383: LIST
48384: LIST
48385: PUSH
48386: LD_INT 2
48388: NEG
48389: PUSH
48390: LD_INT 2
48392: NEG
48393: PUSH
48394: EMPTY
48395: LIST
48396: LIST
48397: PUSH
48398: LD_INT 1
48400: NEG
48401: PUSH
48402: LD_INT 2
48404: PUSH
48405: EMPTY
48406: LIST
48407: LIST
48408: PUSH
48409: LD_INT 2
48411: NEG
48412: PUSH
48413: LD_INT 1
48415: PUSH
48416: EMPTY
48417: LIST
48418: LIST
48419: PUSH
48420: LD_INT 3
48422: NEG
48423: PUSH
48424: LD_INT 1
48426: NEG
48427: PUSH
48428: EMPTY
48429: LIST
48430: LIST
48431: PUSH
48432: LD_INT 3
48434: NEG
48435: PUSH
48436: LD_INT 2
48438: NEG
48439: PUSH
48440: EMPTY
48441: LIST
48442: LIST
48443: PUSH
48444: EMPTY
48445: LIST
48446: LIST
48447: LIST
48448: LIST
48449: LIST
48450: LIST
48451: LIST
48452: LIST
48453: LIST
48454: LIST
48455: LIST
48456: LIST
48457: LIST
48458: LIST
48459: LIST
48460: LIST
48461: LIST
48462: LIST
48463: LIST
48464: LIST
48465: LIST
48466: LIST
48467: LIST
48468: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48469: LD_ADDR_VAR 0 28
48473: PUSH
48474: LD_INT 0
48476: PUSH
48477: LD_INT 0
48479: PUSH
48480: EMPTY
48481: LIST
48482: LIST
48483: PUSH
48484: LD_INT 0
48486: PUSH
48487: LD_INT 1
48489: NEG
48490: PUSH
48491: EMPTY
48492: LIST
48493: LIST
48494: PUSH
48495: LD_INT 1
48497: PUSH
48498: LD_INT 0
48500: PUSH
48501: EMPTY
48502: LIST
48503: LIST
48504: PUSH
48505: LD_INT 1
48507: PUSH
48508: LD_INT 1
48510: PUSH
48511: EMPTY
48512: LIST
48513: LIST
48514: PUSH
48515: LD_INT 0
48517: PUSH
48518: LD_INT 1
48520: PUSH
48521: EMPTY
48522: LIST
48523: LIST
48524: PUSH
48525: LD_INT 1
48527: NEG
48528: PUSH
48529: LD_INT 0
48531: PUSH
48532: EMPTY
48533: LIST
48534: LIST
48535: PUSH
48536: LD_INT 1
48538: NEG
48539: PUSH
48540: LD_INT 1
48542: NEG
48543: PUSH
48544: EMPTY
48545: LIST
48546: LIST
48547: PUSH
48548: LD_INT 1
48550: NEG
48551: PUSH
48552: LD_INT 2
48554: NEG
48555: PUSH
48556: EMPTY
48557: LIST
48558: LIST
48559: PUSH
48560: LD_INT 0
48562: PUSH
48563: LD_INT 2
48565: NEG
48566: PUSH
48567: EMPTY
48568: LIST
48569: LIST
48570: PUSH
48571: LD_INT 1
48573: PUSH
48574: LD_INT 1
48576: NEG
48577: PUSH
48578: EMPTY
48579: LIST
48580: LIST
48581: PUSH
48582: LD_INT 2
48584: PUSH
48585: LD_INT 0
48587: PUSH
48588: EMPTY
48589: LIST
48590: LIST
48591: PUSH
48592: LD_INT 2
48594: PUSH
48595: LD_INT 1
48597: PUSH
48598: EMPTY
48599: LIST
48600: LIST
48601: PUSH
48602: LD_INT 2
48604: PUSH
48605: LD_INT 2
48607: PUSH
48608: EMPTY
48609: LIST
48610: LIST
48611: PUSH
48612: LD_INT 1
48614: PUSH
48615: LD_INT 2
48617: PUSH
48618: EMPTY
48619: LIST
48620: LIST
48621: PUSH
48622: LD_INT 0
48624: PUSH
48625: LD_INT 2
48627: PUSH
48628: EMPTY
48629: LIST
48630: LIST
48631: PUSH
48632: LD_INT 1
48634: NEG
48635: PUSH
48636: LD_INT 1
48638: PUSH
48639: EMPTY
48640: LIST
48641: LIST
48642: PUSH
48643: LD_INT 2
48645: NEG
48646: PUSH
48647: LD_INT 0
48649: PUSH
48650: EMPTY
48651: LIST
48652: LIST
48653: PUSH
48654: LD_INT 2
48656: NEG
48657: PUSH
48658: LD_INT 1
48660: NEG
48661: PUSH
48662: EMPTY
48663: LIST
48664: LIST
48665: PUSH
48666: LD_INT 2
48668: NEG
48669: PUSH
48670: LD_INT 2
48672: NEG
48673: PUSH
48674: EMPTY
48675: LIST
48676: LIST
48677: PUSH
48678: LD_INT 2
48680: NEG
48681: PUSH
48682: LD_INT 3
48684: NEG
48685: PUSH
48686: EMPTY
48687: LIST
48688: LIST
48689: PUSH
48690: LD_INT 1
48692: NEG
48693: PUSH
48694: LD_INT 3
48696: NEG
48697: PUSH
48698: EMPTY
48699: LIST
48700: LIST
48701: PUSH
48702: LD_INT 3
48704: NEG
48705: PUSH
48706: LD_INT 1
48708: NEG
48709: PUSH
48710: EMPTY
48711: LIST
48712: LIST
48713: PUSH
48714: LD_INT 3
48716: NEG
48717: PUSH
48718: LD_INT 2
48720: NEG
48721: PUSH
48722: EMPTY
48723: LIST
48724: LIST
48725: PUSH
48726: EMPTY
48727: LIST
48728: LIST
48729: LIST
48730: LIST
48731: LIST
48732: LIST
48733: LIST
48734: LIST
48735: LIST
48736: LIST
48737: LIST
48738: LIST
48739: LIST
48740: LIST
48741: LIST
48742: LIST
48743: LIST
48744: LIST
48745: LIST
48746: LIST
48747: LIST
48748: LIST
48749: LIST
48750: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48751: LD_ADDR_VAR 0 29
48755: PUSH
48756: LD_INT 0
48758: PUSH
48759: LD_INT 0
48761: PUSH
48762: EMPTY
48763: LIST
48764: LIST
48765: PUSH
48766: LD_INT 0
48768: PUSH
48769: LD_INT 1
48771: NEG
48772: PUSH
48773: EMPTY
48774: LIST
48775: LIST
48776: PUSH
48777: LD_INT 1
48779: PUSH
48780: LD_INT 0
48782: PUSH
48783: EMPTY
48784: LIST
48785: LIST
48786: PUSH
48787: LD_INT 1
48789: PUSH
48790: LD_INT 1
48792: PUSH
48793: EMPTY
48794: LIST
48795: LIST
48796: PUSH
48797: LD_INT 0
48799: PUSH
48800: LD_INT 1
48802: PUSH
48803: EMPTY
48804: LIST
48805: LIST
48806: PUSH
48807: LD_INT 1
48809: NEG
48810: PUSH
48811: LD_INT 0
48813: PUSH
48814: EMPTY
48815: LIST
48816: LIST
48817: PUSH
48818: LD_INT 1
48820: NEG
48821: PUSH
48822: LD_INT 1
48824: NEG
48825: PUSH
48826: EMPTY
48827: LIST
48828: LIST
48829: PUSH
48830: LD_INT 1
48832: NEG
48833: PUSH
48834: LD_INT 2
48836: NEG
48837: PUSH
48838: EMPTY
48839: LIST
48840: LIST
48841: PUSH
48842: LD_INT 0
48844: PUSH
48845: LD_INT 2
48847: NEG
48848: PUSH
48849: EMPTY
48850: LIST
48851: LIST
48852: PUSH
48853: LD_INT 1
48855: PUSH
48856: LD_INT 1
48858: NEG
48859: PUSH
48860: EMPTY
48861: LIST
48862: LIST
48863: PUSH
48864: LD_INT 2
48866: PUSH
48867: LD_INT 0
48869: PUSH
48870: EMPTY
48871: LIST
48872: LIST
48873: PUSH
48874: LD_INT 2
48876: PUSH
48877: LD_INT 1
48879: PUSH
48880: EMPTY
48881: LIST
48882: LIST
48883: PUSH
48884: LD_INT 1
48886: PUSH
48887: LD_INT 2
48889: PUSH
48890: EMPTY
48891: LIST
48892: LIST
48893: PUSH
48894: LD_INT 0
48896: PUSH
48897: LD_INT 2
48899: PUSH
48900: EMPTY
48901: LIST
48902: LIST
48903: PUSH
48904: LD_INT 1
48906: NEG
48907: PUSH
48908: LD_INT 1
48910: PUSH
48911: EMPTY
48912: LIST
48913: LIST
48914: PUSH
48915: LD_INT 2
48917: NEG
48918: PUSH
48919: LD_INT 1
48921: NEG
48922: PUSH
48923: EMPTY
48924: LIST
48925: LIST
48926: PUSH
48927: LD_INT 2
48929: NEG
48930: PUSH
48931: LD_INT 2
48933: NEG
48934: PUSH
48935: EMPTY
48936: LIST
48937: LIST
48938: PUSH
48939: LD_INT 2
48941: NEG
48942: PUSH
48943: LD_INT 3
48945: NEG
48946: PUSH
48947: EMPTY
48948: LIST
48949: LIST
48950: PUSH
48951: LD_INT 2
48953: PUSH
48954: LD_INT 1
48956: NEG
48957: PUSH
48958: EMPTY
48959: LIST
48960: LIST
48961: PUSH
48962: LD_INT 3
48964: PUSH
48965: LD_INT 1
48967: PUSH
48968: EMPTY
48969: LIST
48970: LIST
48971: PUSH
48972: LD_INT 1
48974: PUSH
48975: LD_INT 3
48977: PUSH
48978: EMPTY
48979: LIST
48980: LIST
48981: PUSH
48982: LD_INT 1
48984: NEG
48985: PUSH
48986: LD_INT 2
48988: PUSH
48989: EMPTY
48990: LIST
48991: LIST
48992: PUSH
48993: LD_INT 3
48995: NEG
48996: PUSH
48997: LD_INT 2
48999: NEG
49000: PUSH
49001: EMPTY
49002: LIST
49003: LIST
49004: PUSH
49005: EMPTY
49006: LIST
49007: LIST
49008: LIST
49009: LIST
49010: LIST
49011: LIST
49012: LIST
49013: LIST
49014: LIST
49015: LIST
49016: LIST
49017: LIST
49018: LIST
49019: LIST
49020: LIST
49021: LIST
49022: LIST
49023: LIST
49024: LIST
49025: LIST
49026: LIST
49027: LIST
49028: LIST
49029: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49030: LD_ADDR_VAR 0 30
49034: PUSH
49035: LD_INT 0
49037: PUSH
49038: LD_INT 0
49040: PUSH
49041: EMPTY
49042: LIST
49043: LIST
49044: PUSH
49045: LD_INT 0
49047: PUSH
49048: LD_INT 1
49050: NEG
49051: PUSH
49052: EMPTY
49053: LIST
49054: LIST
49055: PUSH
49056: LD_INT 1
49058: PUSH
49059: LD_INT 0
49061: PUSH
49062: EMPTY
49063: LIST
49064: LIST
49065: PUSH
49066: LD_INT 1
49068: PUSH
49069: LD_INT 1
49071: PUSH
49072: EMPTY
49073: LIST
49074: LIST
49075: PUSH
49076: LD_INT 0
49078: PUSH
49079: LD_INT 1
49081: PUSH
49082: EMPTY
49083: LIST
49084: LIST
49085: PUSH
49086: LD_INT 1
49088: NEG
49089: PUSH
49090: LD_INT 0
49092: PUSH
49093: EMPTY
49094: LIST
49095: LIST
49096: PUSH
49097: LD_INT 1
49099: NEG
49100: PUSH
49101: LD_INT 1
49103: NEG
49104: PUSH
49105: EMPTY
49106: LIST
49107: LIST
49108: PUSH
49109: LD_INT 1
49111: NEG
49112: PUSH
49113: LD_INT 2
49115: NEG
49116: PUSH
49117: EMPTY
49118: LIST
49119: LIST
49120: PUSH
49121: LD_INT 0
49123: PUSH
49124: LD_INT 2
49126: NEG
49127: PUSH
49128: EMPTY
49129: LIST
49130: LIST
49131: PUSH
49132: LD_INT 1
49134: PUSH
49135: LD_INT 1
49137: NEG
49138: PUSH
49139: EMPTY
49140: LIST
49141: LIST
49142: PUSH
49143: LD_INT 2
49145: PUSH
49146: LD_INT 0
49148: PUSH
49149: EMPTY
49150: LIST
49151: LIST
49152: PUSH
49153: LD_INT 2
49155: PUSH
49156: LD_INT 1
49158: PUSH
49159: EMPTY
49160: LIST
49161: LIST
49162: PUSH
49163: LD_INT 2
49165: PUSH
49166: LD_INT 2
49168: PUSH
49169: EMPTY
49170: LIST
49171: LIST
49172: PUSH
49173: LD_INT 1
49175: PUSH
49176: LD_INT 2
49178: PUSH
49179: EMPTY
49180: LIST
49181: LIST
49182: PUSH
49183: LD_INT 1
49185: NEG
49186: PUSH
49187: LD_INT 1
49189: PUSH
49190: EMPTY
49191: LIST
49192: LIST
49193: PUSH
49194: LD_INT 2
49196: NEG
49197: PUSH
49198: LD_INT 0
49200: PUSH
49201: EMPTY
49202: LIST
49203: LIST
49204: PUSH
49205: LD_INT 2
49207: NEG
49208: PUSH
49209: LD_INT 1
49211: NEG
49212: PUSH
49213: EMPTY
49214: LIST
49215: LIST
49216: PUSH
49217: LD_INT 1
49219: NEG
49220: PUSH
49221: LD_INT 3
49223: NEG
49224: PUSH
49225: EMPTY
49226: LIST
49227: LIST
49228: PUSH
49229: LD_INT 1
49231: PUSH
49232: LD_INT 2
49234: NEG
49235: PUSH
49236: EMPTY
49237: LIST
49238: LIST
49239: PUSH
49240: LD_INT 3
49242: PUSH
49243: LD_INT 2
49245: PUSH
49246: EMPTY
49247: LIST
49248: LIST
49249: PUSH
49250: LD_INT 2
49252: PUSH
49253: LD_INT 3
49255: PUSH
49256: EMPTY
49257: LIST
49258: LIST
49259: PUSH
49260: LD_INT 2
49262: NEG
49263: PUSH
49264: LD_INT 1
49266: PUSH
49267: EMPTY
49268: LIST
49269: LIST
49270: PUSH
49271: LD_INT 3
49273: NEG
49274: PUSH
49275: LD_INT 1
49277: NEG
49278: PUSH
49279: EMPTY
49280: LIST
49281: LIST
49282: PUSH
49283: EMPTY
49284: LIST
49285: LIST
49286: LIST
49287: LIST
49288: LIST
49289: LIST
49290: LIST
49291: LIST
49292: LIST
49293: LIST
49294: LIST
49295: LIST
49296: LIST
49297: LIST
49298: LIST
49299: LIST
49300: LIST
49301: LIST
49302: LIST
49303: LIST
49304: LIST
49305: LIST
49306: LIST
49307: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49308: LD_ADDR_VAR 0 31
49312: PUSH
49313: LD_INT 0
49315: PUSH
49316: LD_INT 0
49318: PUSH
49319: EMPTY
49320: LIST
49321: LIST
49322: PUSH
49323: LD_INT 0
49325: PUSH
49326: LD_INT 1
49328: NEG
49329: PUSH
49330: EMPTY
49331: LIST
49332: LIST
49333: PUSH
49334: LD_INT 1
49336: PUSH
49337: LD_INT 0
49339: PUSH
49340: EMPTY
49341: LIST
49342: LIST
49343: PUSH
49344: LD_INT 1
49346: PUSH
49347: LD_INT 1
49349: PUSH
49350: EMPTY
49351: LIST
49352: LIST
49353: PUSH
49354: LD_INT 0
49356: PUSH
49357: LD_INT 1
49359: PUSH
49360: EMPTY
49361: LIST
49362: LIST
49363: PUSH
49364: LD_INT 1
49366: NEG
49367: PUSH
49368: LD_INT 0
49370: PUSH
49371: EMPTY
49372: LIST
49373: LIST
49374: PUSH
49375: LD_INT 1
49377: NEG
49378: PUSH
49379: LD_INT 1
49381: NEG
49382: PUSH
49383: EMPTY
49384: LIST
49385: LIST
49386: PUSH
49387: LD_INT 1
49389: NEG
49390: PUSH
49391: LD_INT 2
49393: NEG
49394: PUSH
49395: EMPTY
49396: LIST
49397: LIST
49398: PUSH
49399: LD_INT 1
49401: PUSH
49402: LD_INT 1
49404: NEG
49405: PUSH
49406: EMPTY
49407: LIST
49408: LIST
49409: PUSH
49410: LD_INT 2
49412: PUSH
49413: LD_INT 0
49415: PUSH
49416: EMPTY
49417: LIST
49418: LIST
49419: PUSH
49420: LD_INT 2
49422: PUSH
49423: LD_INT 1
49425: PUSH
49426: EMPTY
49427: LIST
49428: LIST
49429: PUSH
49430: LD_INT 2
49432: PUSH
49433: LD_INT 2
49435: PUSH
49436: EMPTY
49437: LIST
49438: LIST
49439: PUSH
49440: LD_INT 1
49442: PUSH
49443: LD_INT 2
49445: PUSH
49446: EMPTY
49447: LIST
49448: LIST
49449: PUSH
49450: LD_INT 0
49452: PUSH
49453: LD_INT 2
49455: PUSH
49456: EMPTY
49457: LIST
49458: LIST
49459: PUSH
49460: LD_INT 1
49462: NEG
49463: PUSH
49464: LD_INT 1
49466: PUSH
49467: EMPTY
49468: LIST
49469: LIST
49470: PUSH
49471: LD_INT 2
49473: NEG
49474: PUSH
49475: LD_INT 1
49477: NEG
49478: PUSH
49479: EMPTY
49480: LIST
49481: LIST
49482: PUSH
49483: LD_INT 2
49485: NEG
49486: PUSH
49487: LD_INT 2
49489: NEG
49490: PUSH
49491: EMPTY
49492: LIST
49493: LIST
49494: PUSH
49495: LD_INT 2
49497: NEG
49498: PUSH
49499: LD_INT 3
49501: NEG
49502: PUSH
49503: EMPTY
49504: LIST
49505: LIST
49506: PUSH
49507: LD_INT 2
49509: PUSH
49510: LD_INT 1
49512: NEG
49513: PUSH
49514: EMPTY
49515: LIST
49516: LIST
49517: PUSH
49518: LD_INT 3
49520: PUSH
49521: LD_INT 1
49523: PUSH
49524: EMPTY
49525: LIST
49526: LIST
49527: PUSH
49528: LD_INT 1
49530: PUSH
49531: LD_INT 3
49533: PUSH
49534: EMPTY
49535: LIST
49536: LIST
49537: PUSH
49538: LD_INT 1
49540: NEG
49541: PUSH
49542: LD_INT 2
49544: PUSH
49545: EMPTY
49546: LIST
49547: LIST
49548: PUSH
49549: LD_INT 3
49551: NEG
49552: PUSH
49553: LD_INT 2
49555: NEG
49556: PUSH
49557: EMPTY
49558: LIST
49559: LIST
49560: PUSH
49561: EMPTY
49562: LIST
49563: LIST
49564: LIST
49565: LIST
49566: LIST
49567: LIST
49568: LIST
49569: LIST
49570: LIST
49571: LIST
49572: LIST
49573: LIST
49574: LIST
49575: LIST
49576: LIST
49577: LIST
49578: LIST
49579: LIST
49580: LIST
49581: LIST
49582: LIST
49583: LIST
49584: LIST
49585: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49586: LD_ADDR_VAR 0 32
49590: PUSH
49591: LD_INT 0
49593: PUSH
49594: LD_INT 0
49596: PUSH
49597: EMPTY
49598: LIST
49599: LIST
49600: PUSH
49601: LD_INT 0
49603: PUSH
49604: LD_INT 1
49606: NEG
49607: PUSH
49608: EMPTY
49609: LIST
49610: LIST
49611: PUSH
49612: LD_INT 1
49614: PUSH
49615: LD_INT 0
49617: PUSH
49618: EMPTY
49619: LIST
49620: LIST
49621: PUSH
49622: LD_INT 1
49624: PUSH
49625: LD_INT 1
49627: PUSH
49628: EMPTY
49629: LIST
49630: LIST
49631: PUSH
49632: LD_INT 0
49634: PUSH
49635: LD_INT 1
49637: PUSH
49638: EMPTY
49639: LIST
49640: LIST
49641: PUSH
49642: LD_INT 1
49644: NEG
49645: PUSH
49646: LD_INT 0
49648: PUSH
49649: EMPTY
49650: LIST
49651: LIST
49652: PUSH
49653: LD_INT 1
49655: NEG
49656: PUSH
49657: LD_INT 1
49659: NEG
49660: PUSH
49661: EMPTY
49662: LIST
49663: LIST
49664: PUSH
49665: LD_INT 1
49667: NEG
49668: PUSH
49669: LD_INT 2
49671: NEG
49672: PUSH
49673: EMPTY
49674: LIST
49675: LIST
49676: PUSH
49677: LD_INT 0
49679: PUSH
49680: LD_INT 2
49682: NEG
49683: PUSH
49684: EMPTY
49685: LIST
49686: LIST
49687: PUSH
49688: LD_INT 1
49690: PUSH
49691: LD_INT 1
49693: NEG
49694: PUSH
49695: EMPTY
49696: LIST
49697: LIST
49698: PUSH
49699: LD_INT 2
49701: PUSH
49702: LD_INT 1
49704: PUSH
49705: EMPTY
49706: LIST
49707: LIST
49708: PUSH
49709: LD_INT 2
49711: PUSH
49712: LD_INT 2
49714: PUSH
49715: EMPTY
49716: LIST
49717: LIST
49718: PUSH
49719: LD_INT 1
49721: PUSH
49722: LD_INT 2
49724: PUSH
49725: EMPTY
49726: LIST
49727: LIST
49728: PUSH
49729: LD_INT 0
49731: PUSH
49732: LD_INT 2
49734: PUSH
49735: EMPTY
49736: LIST
49737: LIST
49738: PUSH
49739: LD_INT 1
49741: NEG
49742: PUSH
49743: LD_INT 1
49745: PUSH
49746: EMPTY
49747: LIST
49748: LIST
49749: PUSH
49750: LD_INT 2
49752: NEG
49753: PUSH
49754: LD_INT 0
49756: PUSH
49757: EMPTY
49758: LIST
49759: LIST
49760: PUSH
49761: LD_INT 2
49763: NEG
49764: PUSH
49765: LD_INT 1
49767: NEG
49768: PUSH
49769: EMPTY
49770: LIST
49771: LIST
49772: PUSH
49773: LD_INT 1
49775: NEG
49776: PUSH
49777: LD_INT 3
49779: NEG
49780: PUSH
49781: EMPTY
49782: LIST
49783: LIST
49784: PUSH
49785: LD_INT 1
49787: PUSH
49788: LD_INT 2
49790: NEG
49791: PUSH
49792: EMPTY
49793: LIST
49794: LIST
49795: PUSH
49796: LD_INT 3
49798: PUSH
49799: LD_INT 2
49801: PUSH
49802: EMPTY
49803: LIST
49804: LIST
49805: PUSH
49806: LD_INT 2
49808: PUSH
49809: LD_INT 3
49811: PUSH
49812: EMPTY
49813: LIST
49814: LIST
49815: PUSH
49816: LD_INT 2
49818: NEG
49819: PUSH
49820: LD_INT 1
49822: PUSH
49823: EMPTY
49824: LIST
49825: LIST
49826: PUSH
49827: LD_INT 3
49829: NEG
49830: PUSH
49831: LD_INT 1
49833: NEG
49834: PUSH
49835: EMPTY
49836: LIST
49837: LIST
49838: PUSH
49839: EMPTY
49840: LIST
49841: LIST
49842: LIST
49843: LIST
49844: LIST
49845: LIST
49846: LIST
49847: LIST
49848: LIST
49849: LIST
49850: LIST
49851: LIST
49852: LIST
49853: LIST
49854: LIST
49855: LIST
49856: LIST
49857: LIST
49858: LIST
49859: LIST
49860: LIST
49861: LIST
49862: LIST
49863: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49864: LD_ADDR_VAR 0 33
49868: PUSH
49869: LD_INT 0
49871: PUSH
49872: LD_INT 0
49874: PUSH
49875: EMPTY
49876: LIST
49877: LIST
49878: PUSH
49879: LD_INT 0
49881: PUSH
49882: LD_INT 1
49884: NEG
49885: PUSH
49886: EMPTY
49887: LIST
49888: LIST
49889: PUSH
49890: LD_INT 1
49892: PUSH
49893: LD_INT 0
49895: PUSH
49896: EMPTY
49897: LIST
49898: LIST
49899: PUSH
49900: LD_INT 1
49902: PUSH
49903: LD_INT 1
49905: PUSH
49906: EMPTY
49907: LIST
49908: LIST
49909: PUSH
49910: LD_INT 0
49912: PUSH
49913: LD_INT 1
49915: PUSH
49916: EMPTY
49917: LIST
49918: LIST
49919: PUSH
49920: LD_INT 1
49922: NEG
49923: PUSH
49924: LD_INT 0
49926: PUSH
49927: EMPTY
49928: LIST
49929: LIST
49930: PUSH
49931: LD_INT 1
49933: NEG
49934: PUSH
49935: LD_INT 1
49937: NEG
49938: PUSH
49939: EMPTY
49940: LIST
49941: LIST
49942: PUSH
49943: LD_INT 1
49945: NEG
49946: PUSH
49947: LD_INT 2
49949: NEG
49950: PUSH
49951: EMPTY
49952: LIST
49953: LIST
49954: PUSH
49955: LD_INT 1
49957: PUSH
49958: LD_INT 1
49960: NEG
49961: PUSH
49962: EMPTY
49963: LIST
49964: LIST
49965: PUSH
49966: LD_INT 2
49968: PUSH
49969: LD_INT 0
49971: PUSH
49972: EMPTY
49973: LIST
49974: LIST
49975: PUSH
49976: LD_INT 2
49978: PUSH
49979: LD_INT 1
49981: PUSH
49982: EMPTY
49983: LIST
49984: LIST
49985: PUSH
49986: LD_INT 1
49988: PUSH
49989: LD_INT 2
49991: PUSH
49992: EMPTY
49993: LIST
49994: LIST
49995: PUSH
49996: LD_INT 0
49998: PUSH
49999: LD_INT 2
50001: PUSH
50002: EMPTY
50003: LIST
50004: LIST
50005: PUSH
50006: LD_INT 1
50008: NEG
50009: PUSH
50010: LD_INT 1
50012: PUSH
50013: EMPTY
50014: LIST
50015: LIST
50016: PUSH
50017: LD_INT 2
50019: NEG
50020: PUSH
50021: LD_INT 0
50023: PUSH
50024: EMPTY
50025: LIST
50026: LIST
50027: PUSH
50028: LD_INT 2
50030: NEG
50031: PUSH
50032: LD_INT 1
50034: NEG
50035: PUSH
50036: EMPTY
50037: LIST
50038: LIST
50039: PUSH
50040: LD_INT 2
50042: NEG
50043: PUSH
50044: LD_INT 2
50046: NEG
50047: PUSH
50048: EMPTY
50049: LIST
50050: LIST
50051: PUSH
50052: LD_INT 2
50054: NEG
50055: PUSH
50056: LD_INT 3
50058: NEG
50059: PUSH
50060: EMPTY
50061: LIST
50062: LIST
50063: PUSH
50064: LD_INT 2
50066: PUSH
50067: LD_INT 1
50069: NEG
50070: PUSH
50071: EMPTY
50072: LIST
50073: LIST
50074: PUSH
50075: LD_INT 3
50077: PUSH
50078: LD_INT 1
50080: PUSH
50081: EMPTY
50082: LIST
50083: LIST
50084: PUSH
50085: LD_INT 1
50087: PUSH
50088: LD_INT 3
50090: PUSH
50091: EMPTY
50092: LIST
50093: LIST
50094: PUSH
50095: LD_INT 1
50097: NEG
50098: PUSH
50099: LD_INT 2
50101: PUSH
50102: EMPTY
50103: LIST
50104: LIST
50105: PUSH
50106: LD_INT 3
50108: NEG
50109: PUSH
50110: LD_INT 2
50112: NEG
50113: PUSH
50114: EMPTY
50115: LIST
50116: LIST
50117: PUSH
50118: EMPTY
50119: LIST
50120: LIST
50121: LIST
50122: LIST
50123: LIST
50124: LIST
50125: LIST
50126: LIST
50127: LIST
50128: LIST
50129: LIST
50130: LIST
50131: LIST
50132: LIST
50133: LIST
50134: LIST
50135: LIST
50136: LIST
50137: LIST
50138: LIST
50139: LIST
50140: LIST
50141: LIST
50142: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50143: LD_ADDR_VAR 0 34
50147: PUSH
50148: LD_INT 0
50150: PUSH
50151: LD_INT 0
50153: PUSH
50154: EMPTY
50155: LIST
50156: LIST
50157: PUSH
50158: LD_INT 0
50160: PUSH
50161: LD_INT 1
50163: NEG
50164: PUSH
50165: EMPTY
50166: LIST
50167: LIST
50168: PUSH
50169: LD_INT 1
50171: PUSH
50172: LD_INT 0
50174: PUSH
50175: EMPTY
50176: LIST
50177: LIST
50178: PUSH
50179: LD_INT 1
50181: PUSH
50182: LD_INT 1
50184: PUSH
50185: EMPTY
50186: LIST
50187: LIST
50188: PUSH
50189: LD_INT 0
50191: PUSH
50192: LD_INT 1
50194: PUSH
50195: EMPTY
50196: LIST
50197: LIST
50198: PUSH
50199: LD_INT 1
50201: NEG
50202: PUSH
50203: LD_INT 0
50205: PUSH
50206: EMPTY
50207: LIST
50208: LIST
50209: PUSH
50210: LD_INT 1
50212: NEG
50213: PUSH
50214: LD_INT 1
50216: NEG
50217: PUSH
50218: EMPTY
50219: LIST
50220: LIST
50221: PUSH
50222: LD_INT 1
50224: NEG
50225: PUSH
50226: LD_INT 2
50228: NEG
50229: PUSH
50230: EMPTY
50231: LIST
50232: LIST
50233: PUSH
50234: LD_INT 0
50236: PUSH
50237: LD_INT 2
50239: NEG
50240: PUSH
50241: EMPTY
50242: LIST
50243: LIST
50244: PUSH
50245: LD_INT 1
50247: PUSH
50248: LD_INT 1
50250: NEG
50251: PUSH
50252: EMPTY
50253: LIST
50254: LIST
50255: PUSH
50256: LD_INT 2
50258: PUSH
50259: LD_INT 1
50261: PUSH
50262: EMPTY
50263: LIST
50264: LIST
50265: PUSH
50266: LD_INT 2
50268: PUSH
50269: LD_INT 2
50271: PUSH
50272: EMPTY
50273: LIST
50274: LIST
50275: PUSH
50276: LD_INT 1
50278: PUSH
50279: LD_INT 2
50281: PUSH
50282: EMPTY
50283: LIST
50284: LIST
50285: PUSH
50286: LD_INT 1
50288: NEG
50289: PUSH
50290: LD_INT 1
50292: PUSH
50293: EMPTY
50294: LIST
50295: LIST
50296: PUSH
50297: LD_INT 2
50299: NEG
50300: PUSH
50301: LD_INT 0
50303: PUSH
50304: EMPTY
50305: LIST
50306: LIST
50307: PUSH
50308: LD_INT 2
50310: NEG
50311: PUSH
50312: LD_INT 1
50314: NEG
50315: PUSH
50316: EMPTY
50317: LIST
50318: LIST
50319: PUSH
50320: LD_INT 2
50322: NEG
50323: PUSH
50324: LD_INT 2
50326: NEG
50327: PUSH
50328: EMPTY
50329: LIST
50330: LIST
50331: PUSH
50332: LD_INT 1
50334: NEG
50335: PUSH
50336: LD_INT 3
50338: NEG
50339: PUSH
50340: EMPTY
50341: LIST
50342: LIST
50343: PUSH
50344: LD_INT 1
50346: PUSH
50347: LD_INT 2
50349: NEG
50350: PUSH
50351: EMPTY
50352: LIST
50353: LIST
50354: PUSH
50355: LD_INT 3
50357: PUSH
50358: LD_INT 2
50360: PUSH
50361: EMPTY
50362: LIST
50363: LIST
50364: PUSH
50365: LD_INT 2
50367: PUSH
50368: LD_INT 3
50370: PUSH
50371: EMPTY
50372: LIST
50373: LIST
50374: PUSH
50375: LD_INT 2
50377: NEG
50378: PUSH
50379: LD_INT 1
50381: PUSH
50382: EMPTY
50383: LIST
50384: LIST
50385: PUSH
50386: LD_INT 3
50388: NEG
50389: PUSH
50390: LD_INT 1
50392: NEG
50393: PUSH
50394: EMPTY
50395: LIST
50396: LIST
50397: PUSH
50398: EMPTY
50399: LIST
50400: LIST
50401: LIST
50402: LIST
50403: LIST
50404: LIST
50405: LIST
50406: LIST
50407: LIST
50408: LIST
50409: LIST
50410: LIST
50411: LIST
50412: LIST
50413: LIST
50414: LIST
50415: LIST
50416: LIST
50417: LIST
50418: LIST
50419: LIST
50420: LIST
50421: LIST
50422: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50423: LD_ADDR_VAR 0 35
50427: PUSH
50428: LD_INT 0
50430: PUSH
50431: LD_INT 0
50433: PUSH
50434: EMPTY
50435: LIST
50436: LIST
50437: PUSH
50438: LD_INT 0
50440: PUSH
50441: LD_INT 1
50443: NEG
50444: PUSH
50445: EMPTY
50446: LIST
50447: LIST
50448: PUSH
50449: LD_INT 1
50451: PUSH
50452: LD_INT 0
50454: PUSH
50455: EMPTY
50456: LIST
50457: LIST
50458: PUSH
50459: LD_INT 1
50461: PUSH
50462: LD_INT 1
50464: PUSH
50465: EMPTY
50466: LIST
50467: LIST
50468: PUSH
50469: LD_INT 0
50471: PUSH
50472: LD_INT 1
50474: PUSH
50475: EMPTY
50476: LIST
50477: LIST
50478: PUSH
50479: LD_INT 1
50481: NEG
50482: PUSH
50483: LD_INT 0
50485: PUSH
50486: EMPTY
50487: LIST
50488: LIST
50489: PUSH
50490: LD_INT 1
50492: NEG
50493: PUSH
50494: LD_INT 1
50496: NEG
50497: PUSH
50498: EMPTY
50499: LIST
50500: LIST
50501: PUSH
50502: LD_INT 2
50504: PUSH
50505: LD_INT 1
50507: PUSH
50508: EMPTY
50509: LIST
50510: LIST
50511: PUSH
50512: LD_INT 2
50514: NEG
50515: PUSH
50516: LD_INT 1
50518: NEG
50519: PUSH
50520: EMPTY
50521: LIST
50522: LIST
50523: PUSH
50524: EMPTY
50525: LIST
50526: LIST
50527: LIST
50528: LIST
50529: LIST
50530: LIST
50531: LIST
50532: LIST
50533: LIST
50534: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50535: LD_ADDR_VAR 0 36
50539: PUSH
50540: LD_INT 0
50542: PUSH
50543: LD_INT 0
50545: PUSH
50546: EMPTY
50547: LIST
50548: LIST
50549: PUSH
50550: LD_INT 0
50552: PUSH
50553: LD_INT 1
50555: NEG
50556: PUSH
50557: EMPTY
50558: LIST
50559: LIST
50560: PUSH
50561: LD_INT 1
50563: PUSH
50564: LD_INT 0
50566: PUSH
50567: EMPTY
50568: LIST
50569: LIST
50570: PUSH
50571: LD_INT 1
50573: PUSH
50574: LD_INT 1
50576: PUSH
50577: EMPTY
50578: LIST
50579: LIST
50580: PUSH
50581: LD_INT 0
50583: PUSH
50584: LD_INT 1
50586: PUSH
50587: EMPTY
50588: LIST
50589: LIST
50590: PUSH
50591: LD_INT 1
50593: NEG
50594: PUSH
50595: LD_INT 0
50597: PUSH
50598: EMPTY
50599: LIST
50600: LIST
50601: PUSH
50602: LD_INT 1
50604: NEG
50605: PUSH
50606: LD_INT 1
50608: NEG
50609: PUSH
50610: EMPTY
50611: LIST
50612: LIST
50613: PUSH
50614: LD_INT 1
50616: NEG
50617: PUSH
50618: LD_INT 2
50620: NEG
50621: PUSH
50622: EMPTY
50623: LIST
50624: LIST
50625: PUSH
50626: LD_INT 1
50628: PUSH
50629: LD_INT 2
50631: PUSH
50632: EMPTY
50633: LIST
50634: LIST
50635: PUSH
50636: EMPTY
50637: LIST
50638: LIST
50639: LIST
50640: LIST
50641: LIST
50642: LIST
50643: LIST
50644: LIST
50645: LIST
50646: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50647: LD_ADDR_VAR 0 37
50651: PUSH
50652: LD_INT 0
50654: PUSH
50655: LD_INT 0
50657: PUSH
50658: EMPTY
50659: LIST
50660: LIST
50661: PUSH
50662: LD_INT 0
50664: PUSH
50665: LD_INT 1
50667: NEG
50668: PUSH
50669: EMPTY
50670: LIST
50671: LIST
50672: PUSH
50673: LD_INT 1
50675: PUSH
50676: LD_INT 0
50678: PUSH
50679: EMPTY
50680: LIST
50681: LIST
50682: PUSH
50683: LD_INT 1
50685: PUSH
50686: LD_INT 1
50688: PUSH
50689: EMPTY
50690: LIST
50691: LIST
50692: PUSH
50693: LD_INT 0
50695: PUSH
50696: LD_INT 1
50698: PUSH
50699: EMPTY
50700: LIST
50701: LIST
50702: PUSH
50703: LD_INT 1
50705: NEG
50706: PUSH
50707: LD_INT 0
50709: PUSH
50710: EMPTY
50711: LIST
50712: LIST
50713: PUSH
50714: LD_INT 1
50716: NEG
50717: PUSH
50718: LD_INT 1
50720: NEG
50721: PUSH
50722: EMPTY
50723: LIST
50724: LIST
50725: PUSH
50726: LD_INT 1
50728: PUSH
50729: LD_INT 1
50731: NEG
50732: PUSH
50733: EMPTY
50734: LIST
50735: LIST
50736: PUSH
50737: LD_INT 1
50739: NEG
50740: PUSH
50741: LD_INT 1
50743: PUSH
50744: EMPTY
50745: LIST
50746: LIST
50747: PUSH
50748: EMPTY
50749: LIST
50750: LIST
50751: LIST
50752: LIST
50753: LIST
50754: LIST
50755: LIST
50756: LIST
50757: LIST
50758: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50759: LD_ADDR_VAR 0 38
50763: PUSH
50764: LD_INT 0
50766: PUSH
50767: LD_INT 0
50769: PUSH
50770: EMPTY
50771: LIST
50772: LIST
50773: PUSH
50774: LD_INT 0
50776: PUSH
50777: LD_INT 1
50779: NEG
50780: PUSH
50781: EMPTY
50782: LIST
50783: LIST
50784: PUSH
50785: LD_INT 1
50787: PUSH
50788: LD_INT 0
50790: PUSH
50791: EMPTY
50792: LIST
50793: LIST
50794: PUSH
50795: LD_INT 1
50797: PUSH
50798: LD_INT 1
50800: PUSH
50801: EMPTY
50802: LIST
50803: LIST
50804: PUSH
50805: LD_INT 0
50807: PUSH
50808: LD_INT 1
50810: PUSH
50811: EMPTY
50812: LIST
50813: LIST
50814: PUSH
50815: LD_INT 1
50817: NEG
50818: PUSH
50819: LD_INT 0
50821: PUSH
50822: EMPTY
50823: LIST
50824: LIST
50825: PUSH
50826: LD_INT 1
50828: NEG
50829: PUSH
50830: LD_INT 1
50832: NEG
50833: PUSH
50834: EMPTY
50835: LIST
50836: LIST
50837: PUSH
50838: LD_INT 2
50840: PUSH
50841: LD_INT 1
50843: PUSH
50844: EMPTY
50845: LIST
50846: LIST
50847: PUSH
50848: LD_INT 2
50850: NEG
50851: PUSH
50852: LD_INT 1
50854: NEG
50855: PUSH
50856: EMPTY
50857: LIST
50858: LIST
50859: PUSH
50860: EMPTY
50861: LIST
50862: LIST
50863: LIST
50864: LIST
50865: LIST
50866: LIST
50867: LIST
50868: LIST
50869: LIST
50870: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50871: LD_ADDR_VAR 0 39
50875: PUSH
50876: LD_INT 0
50878: PUSH
50879: LD_INT 0
50881: PUSH
50882: EMPTY
50883: LIST
50884: LIST
50885: PUSH
50886: LD_INT 0
50888: PUSH
50889: LD_INT 1
50891: NEG
50892: PUSH
50893: EMPTY
50894: LIST
50895: LIST
50896: PUSH
50897: LD_INT 1
50899: PUSH
50900: LD_INT 0
50902: PUSH
50903: EMPTY
50904: LIST
50905: LIST
50906: PUSH
50907: LD_INT 1
50909: PUSH
50910: LD_INT 1
50912: PUSH
50913: EMPTY
50914: LIST
50915: LIST
50916: PUSH
50917: LD_INT 0
50919: PUSH
50920: LD_INT 1
50922: PUSH
50923: EMPTY
50924: LIST
50925: LIST
50926: PUSH
50927: LD_INT 1
50929: NEG
50930: PUSH
50931: LD_INT 0
50933: PUSH
50934: EMPTY
50935: LIST
50936: LIST
50937: PUSH
50938: LD_INT 1
50940: NEG
50941: PUSH
50942: LD_INT 1
50944: NEG
50945: PUSH
50946: EMPTY
50947: LIST
50948: LIST
50949: PUSH
50950: LD_INT 1
50952: NEG
50953: PUSH
50954: LD_INT 2
50956: NEG
50957: PUSH
50958: EMPTY
50959: LIST
50960: LIST
50961: PUSH
50962: LD_INT 1
50964: PUSH
50965: LD_INT 2
50967: PUSH
50968: EMPTY
50969: LIST
50970: LIST
50971: PUSH
50972: EMPTY
50973: LIST
50974: LIST
50975: LIST
50976: LIST
50977: LIST
50978: LIST
50979: LIST
50980: LIST
50981: LIST
50982: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50983: LD_ADDR_VAR 0 40
50987: PUSH
50988: LD_INT 0
50990: PUSH
50991: LD_INT 0
50993: PUSH
50994: EMPTY
50995: LIST
50996: LIST
50997: PUSH
50998: LD_INT 0
51000: PUSH
51001: LD_INT 1
51003: NEG
51004: PUSH
51005: EMPTY
51006: LIST
51007: LIST
51008: PUSH
51009: LD_INT 1
51011: PUSH
51012: LD_INT 0
51014: PUSH
51015: EMPTY
51016: LIST
51017: LIST
51018: PUSH
51019: LD_INT 1
51021: PUSH
51022: LD_INT 1
51024: PUSH
51025: EMPTY
51026: LIST
51027: LIST
51028: PUSH
51029: LD_INT 0
51031: PUSH
51032: LD_INT 1
51034: PUSH
51035: EMPTY
51036: LIST
51037: LIST
51038: PUSH
51039: LD_INT 1
51041: NEG
51042: PUSH
51043: LD_INT 0
51045: PUSH
51046: EMPTY
51047: LIST
51048: LIST
51049: PUSH
51050: LD_INT 1
51052: NEG
51053: PUSH
51054: LD_INT 1
51056: NEG
51057: PUSH
51058: EMPTY
51059: LIST
51060: LIST
51061: PUSH
51062: LD_INT 1
51064: PUSH
51065: LD_INT 1
51067: NEG
51068: PUSH
51069: EMPTY
51070: LIST
51071: LIST
51072: PUSH
51073: LD_INT 1
51075: NEG
51076: PUSH
51077: LD_INT 1
51079: PUSH
51080: EMPTY
51081: LIST
51082: LIST
51083: PUSH
51084: EMPTY
51085: LIST
51086: LIST
51087: LIST
51088: LIST
51089: LIST
51090: LIST
51091: LIST
51092: LIST
51093: LIST
51094: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51095: LD_ADDR_VAR 0 41
51099: PUSH
51100: LD_INT 0
51102: PUSH
51103: LD_INT 0
51105: PUSH
51106: EMPTY
51107: LIST
51108: LIST
51109: PUSH
51110: LD_INT 0
51112: PUSH
51113: LD_INT 1
51115: NEG
51116: PUSH
51117: EMPTY
51118: LIST
51119: LIST
51120: PUSH
51121: LD_INT 1
51123: PUSH
51124: LD_INT 0
51126: PUSH
51127: EMPTY
51128: LIST
51129: LIST
51130: PUSH
51131: LD_INT 1
51133: PUSH
51134: LD_INT 1
51136: PUSH
51137: EMPTY
51138: LIST
51139: LIST
51140: PUSH
51141: LD_INT 0
51143: PUSH
51144: LD_INT 1
51146: PUSH
51147: EMPTY
51148: LIST
51149: LIST
51150: PUSH
51151: LD_INT 1
51153: NEG
51154: PUSH
51155: LD_INT 0
51157: PUSH
51158: EMPTY
51159: LIST
51160: LIST
51161: PUSH
51162: LD_INT 1
51164: NEG
51165: PUSH
51166: LD_INT 1
51168: NEG
51169: PUSH
51170: EMPTY
51171: LIST
51172: LIST
51173: PUSH
51174: LD_INT 1
51176: NEG
51177: PUSH
51178: LD_INT 2
51180: NEG
51181: PUSH
51182: EMPTY
51183: LIST
51184: LIST
51185: PUSH
51186: LD_INT 1
51188: PUSH
51189: LD_INT 1
51191: NEG
51192: PUSH
51193: EMPTY
51194: LIST
51195: LIST
51196: PUSH
51197: LD_INT 2
51199: PUSH
51200: LD_INT 0
51202: PUSH
51203: EMPTY
51204: LIST
51205: LIST
51206: PUSH
51207: LD_INT 2
51209: PUSH
51210: LD_INT 1
51212: PUSH
51213: EMPTY
51214: LIST
51215: LIST
51216: PUSH
51217: LD_INT 2
51219: PUSH
51220: LD_INT 2
51222: PUSH
51223: EMPTY
51224: LIST
51225: LIST
51226: PUSH
51227: LD_INT 1
51229: PUSH
51230: LD_INT 2
51232: PUSH
51233: EMPTY
51234: LIST
51235: LIST
51236: PUSH
51237: LD_INT 1
51239: NEG
51240: PUSH
51241: LD_INT 1
51243: PUSH
51244: EMPTY
51245: LIST
51246: LIST
51247: PUSH
51248: LD_INT 2
51250: NEG
51251: PUSH
51252: LD_INT 0
51254: PUSH
51255: EMPTY
51256: LIST
51257: LIST
51258: PUSH
51259: LD_INT 2
51261: NEG
51262: PUSH
51263: LD_INT 1
51265: NEG
51266: PUSH
51267: EMPTY
51268: LIST
51269: LIST
51270: PUSH
51271: LD_INT 2
51273: NEG
51274: PUSH
51275: LD_INT 2
51277: NEG
51278: PUSH
51279: EMPTY
51280: LIST
51281: LIST
51282: PUSH
51283: LD_INT 2
51285: NEG
51286: PUSH
51287: LD_INT 3
51289: NEG
51290: PUSH
51291: EMPTY
51292: LIST
51293: LIST
51294: PUSH
51295: LD_INT 2
51297: PUSH
51298: LD_INT 1
51300: NEG
51301: PUSH
51302: EMPTY
51303: LIST
51304: LIST
51305: PUSH
51306: LD_INT 3
51308: PUSH
51309: LD_INT 0
51311: PUSH
51312: EMPTY
51313: LIST
51314: LIST
51315: PUSH
51316: LD_INT 3
51318: PUSH
51319: LD_INT 1
51321: PUSH
51322: EMPTY
51323: LIST
51324: LIST
51325: PUSH
51326: LD_INT 3
51328: PUSH
51329: LD_INT 2
51331: PUSH
51332: EMPTY
51333: LIST
51334: LIST
51335: PUSH
51336: LD_INT 3
51338: PUSH
51339: LD_INT 3
51341: PUSH
51342: EMPTY
51343: LIST
51344: LIST
51345: PUSH
51346: LD_INT 2
51348: PUSH
51349: LD_INT 3
51351: PUSH
51352: EMPTY
51353: LIST
51354: LIST
51355: PUSH
51356: LD_INT 2
51358: NEG
51359: PUSH
51360: LD_INT 1
51362: PUSH
51363: EMPTY
51364: LIST
51365: LIST
51366: PUSH
51367: LD_INT 3
51369: NEG
51370: PUSH
51371: LD_INT 0
51373: PUSH
51374: EMPTY
51375: LIST
51376: LIST
51377: PUSH
51378: LD_INT 3
51380: NEG
51381: PUSH
51382: LD_INT 1
51384: NEG
51385: PUSH
51386: EMPTY
51387: LIST
51388: LIST
51389: PUSH
51390: LD_INT 3
51392: NEG
51393: PUSH
51394: LD_INT 2
51396: NEG
51397: PUSH
51398: EMPTY
51399: LIST
51400: LIST
51401: PUSH
51402: LD_INT 3
51404: NEG
51405: PUSH
51406: LD_INT 3
51408: NEG
51409: PUSH
51410: EMPTY
51411: LIST
51412: LIST
51413: PUSH
51414: EMPTY
51415: LIST
51416: LIST
51417: LIST
51418: LIST
51419: LIST
51420: LIST
51421: LIST
51422: LIST
51423: LIST
51424: LIST
51425: LIST
51426: LIST
51427: LIST
51428: LIST
51429: LIST
51430: LIST
51431: LIST
51432: LIST
51433: LIST
51434: LIST
51435: LIST
51436: LIST
51437: LIST
51438: LIST
51439: LIST
51440: LIST
51441: LIST
51442: LIST
51443: LIST
51444: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51445: LD_ADDR_VAR 0 42
51449: PUSH
51450: LD_INT 0
51452: PUSH
51453: LD_INT 0
51455: PUSH
51456: EMPTY
51457: LIST
51458: LIST
51459: PUSH
51460: LD_INT 0
51462: PUSH
51463: LD_INT 1
51465: NEG
51466: PUSH
51467: EMPTY
51468: LIST
51469: LIST
51470: PUSH
51471: LD_INT 1
51473: PUSH
51474: LD_INT 0
51476: PUSH
51477: EMPTY
51478: LIST
51479: LIST
51480: PUSH
51481: LD_INT 1
51483: PUSH
51484: LD_INT 1
51486: PUSH
51487: EMPTY
51488: LIST
51489: LIST
51490: PUSH
51491: LD_INT 0
51493: PUSH
51494: LD_INT 1
51496: PUSH
51497: EMPTY
51498: LIST
51499: LIST
51500: PUSH
51501: LD_INT 1
51503: NEG
51504: PUSH
51505: LD_INT 0
51507: PUSH
51508: EMPTY
51509: LIST
51510: LIST
51511: PUSH
51512: LD_INT 1
51514: NEG
51515: PUSH
51516: LD_INT 1
51518: NEG
51519: PUSH
51520: EMPTY
51521: LIST
51522: LIST
51523: PUSH
51524: LD_INT 1
51526: NEG
51527: PUSH
51528: LD_INT 2
51530: NEG
51531: PUSH
51532: EMPTY
51533: LIST
51534: LIST
51535: PUSH
51536: LD_INT 0
51538: PUSH
51539: LD_INT 2
51541: NEG
51542: PUSH
51543: EMPTY
51544: LIST
51545: LIST
51546: PUSH
51547: LD_INT 1
51549: PUSH
51550: LD_INT 1
51552: NEG
51553: PUSH
51554: EMPTY
51555: LIST
51556: LIST
51557: PUSH
51558: LD_INT 2
51560: PUSH
51561: LD_INT 1
51563: PUSH
51564: EMPTY
51565: LIST
51566: LIST
51567: PUSH
51568: LD_INT 2
51570: PUSH
51571: LD_INT 2
51573: PUSH
51574: EMPTY
51575: LIST
51576: LIST
51577: PUSH
51578: LD_INT 1
51580: PUSH
51581: LD_INT 2
51583: PUSH
51584: EMPTY
51585: LIST
51586: LIST
51587: PUSH
51588: LD_INT 0
51590: PUSH
51591: LD_INT 2
51593: PUSH
51594: EMPTY
51595: LIST
51596: LIST
51597: PUSH
51598: LD_INT 1
51600: NEG
51601: PUSH
51602: LD_INT 1
51604: PUSH
51605: EMPTY
51606: LIST
51607: LIST
51608: PUSH
51609: LD_INT 2
51611: NEG
51612: PUSH
51613: LD_INT 1
51615: NEG
51616: PUSH
51617: EMPTY
51618: LIST
51619: LIST
51620: PUSH
51621: LD_INT 2
51623: NEG
51624: PUSH
51625: LD_INT 2
51627: NEG
51628: PUSH
51629: EMPTY
51630: LIST
51631: LIST
51632: PUSH
51633: LD_INT 2
51635: NEG
51636: PUSH
51637: LD_INT 3
51639: NEG
51640: PUSH
51641: EMPTY
51642: LIST
51643: LIST
51644: PUSH
51645: LD_INT 1
51647: NEG
51648: PUSH
51649: LD_INT 3
51651: NEG
51652: PUSH
51653: EMPTY
51654: LIST
51655: LIST
51656: PUSH
51657: LD_INT 0
51659: PUSH
51660: LD_INT 3
51662: NEG
51663: PUSH
51664: EMPTY
51665: LIST
51666: LIST
51667: PUSH
51668: LD_INT 1
51670: PUSH
51671: LD_INT 2
51673: NEG
51674: PUSH
51675: EMPTY
51676: LIST
51677: LIST
51678: PUSH
51679: LD_INT 3
51681: PUSH
51682: LD_INT 2
51684: PUSH
51685: EMPTY
51686: LIST
51687: LIST
51688: PUSH
51689: LD_INT 3
51691: PUSH
51692: LD_INT 3
51694: PUSH
51695: EMPTY
51696: LIST
51697: LIST
51698: PUSH
51699: LD_INT 2
51701: PUSH
51702: LD_INT 3
51704: PUSH
51705: EMPTY
51706: LIST
51707: LIST
51708: PUSH
51709: LD_INT 1
51711: PUSH
51712: LD_INT 3
51714: PUSH
51715: EMPTY
51716: LIST
51717: LIST
51718: PUSH
51719: LD_INT 0
51721: PUSH
51722: LD_INT 3
51724: PUSH
51725: EMPTY
51726: LIST
51727: LIST
51728: PUSH
51729: LD_INT 1
51731: NEG
51732: PUSH
51733: LD_INT 2
51735: PUSH
51736: EMPTY
51737: LIST
51738: LIST
51739: PUSH
51740: LD_INT 3
51742: NEG
51743: PUSH
51744: LD_INT 2
51746: NEG
51747: PUSH
51748: EMPTY
51749: LIST
51750: LIST
51751: PUSH
51752: LD_INT 3
51754: NEG
51755: PUSH
51756: LD_INT 3
51758: NEG
51759: PUSH
51760: EMPTY
51761: LIST
51762: LIST
51763: PUSH
51764: EMPTY
51765: LIST
51766: LIST
51767: LIST
51768: LIST
51769: LIST
51770: LIST
51771: LIST
51772: LIST
51773: LIST
51774: LIST
51775: LIST
51776: LIST
51777: LIST
51778: LIST
51779: LIST
51780: LIST
51781: LIST
51782: LIST
51783: LIST
51784: LIST
51785: LIST
51786: LIST
51787: LIST
51788: LIST
51789: LIST
51790: LIST
51791: LIST
51792: LIST
51793: LIST
51794: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51795: LD_ADDR_VAR 0 43
51799: PUSH
51800: LD_INT 0
51802: PUSH
51803: LD_INT 0
51805: PUSH
51806: EMPTY
51807: LIST
51808: LIST
51809: PUSH
51810: LD_INT 0
51812: PUSH
51813: LD_INT 1
51815: NEG
51816: PUSH
51817: EMPTY
51818: LIST
51819: LIST
51820: PUSH
51821: LD_INT 1
51823: PUSH
51824: LD_INT 0
51826: PUSH
51827: EMPTY
51828: LIST
51829: LIST
51830: PUSH
51831: LD_INT 1
51833: PUSH
51834: LD_INT 1
51836: PUSH
51837: EMPTY
51838: LIST
51839: LIST
51840: PUSH
51841: LD_INT 0
51843: PUSH
51844: LD_INT 1
51846: PUSH
51847: EMPTY
51848: LIST
51849: LIST
51850: PUSH
51851: LD_INT 1
51853: NEG
51854: PUSH
51855: LD_INT 0
51857: PUSH
51858: EMPTY
51859: LIST
51860: LIST
51861: PUSH
51862: LD_INT 1
51864: NEG
51865: PUSH
51866: LD_INT 1
51868: NEG
51869: PUSH
51870: EMPTY
51871: LIST
51872: LIST
51873: PUSH
51874: LD_INT 1
51876: NEG
51877: PUSH
51878: LD_INT 2
51880: NEG
51881: PUSH
51882: EMPTY
51883: LIST
51884: LIST
51885: PUSH
51886: LD_INT 0
51888: PUSH
51889: LD_INT 2
51891: NEG
51892: PUSH
51893: EMPTY
51894: LIST
51895: LIST
51896: PUSH
51897: LD_INT 1
51899: PUSH
51900: LD_INT 1
51902: NEG
51903: PUSH
51904: EMPTY
51905: LIST
51906: LIST
51907: PUSH
51908: LD_INT 2
51910: PUSH
51911: LD_INT 0
51913: PUSH
51914: EMPTY
51915: LIST
51916: LIST
51917: PUSH
51918: LD_INT 2
51920: PUSH
51921: LD_INT 1
51923: PUSH
51924: EMPTY
51925: LIST
51926: LIST
51927: PUSH
51928: LD_INT 1
51930: PUSH
51931: LD_INT 2
51933: PUSH
51934: EMPTY
51935: LIST
51936: LIST
51937: PUSH
51938: LD_INT 0
51940: PUSH
51941: LD_INT 2
51943: PUSH
51944: EMPTY
51945: LIST
51946: LIST
51947: PUSH
51948: LD_INT 1
51950: NEG
51951: PUSH
51952: LD_INT 1
51954: PUSH
51955: EMPTY
51956: LIST
51957: LIST
51958: PUSH
51959: LD_INT 2
51961: NEG
51962: PUSH
51963: LD_INT 0
51965: PUSH
51966: EMPTY
51967: LIST
51968: LIST
51969: PUSH
51970: LD_INT 2
51972: NEG
51973: PUSH
51974: LD_INT 1
51976: NEG
51977: PUSH
51978: EMPTY
51979: LIST
51980: LIST
51981: PUSH
51982: LD_INT 1
51984: NEG
51985: PUSH
51986: LD_INT 3
51988: NEG
51989: PUSH
51990: EMPTY
51991: LIST
51992: LIST
51993: PUSH
51994: LD_INT 0
51996: PUSH
51997: LD_INT 3
51999: NEG
52000: PUSH
52001: EMPTY
52002: LIST
52003: LIST
52004: PUSH
52005: LD_INT 1
52007: PUSH
52008: LD_INT 2
52010: NEG
52011: PUSH
52012: EMPTY
52013: LIST
52014: LIST
52015: PUSH
52016: LD_INT 2
52018: PUSH
52019: LD_INT 1
52021: NEG
52022: PUSH
52023: EMPTY
52024: LIST
52025: LIST
52026: PUSH
52027: LD_INT 3
52029: PUSH
52030: LD_INT 0
52032: PUSH
52033: EMPTY
52034: LIST
52035: LIST
52036: PUSH
52037: LD_INT 3
52039: PUSH
52040: LD_INT 1
52042: PUSH
52043: EMPTY
52044: LIST
52045: LIST
52046: PUSH
52047: LD_INT 1
52049: PUSH
52050: LD_INT 3
52052: PUSH
52053: EMPTY
52054: LIST
52055: LIST
52056: PUSH
52057: LD_INT 0
52059: PUSH
52060: LD_INT 3
52062: PUSH
52063: EMPTY
52064: LIST
52065: LIST
52066: PUSH
52067: LD_INT 1
52069: NEG
52070: PUSH
52071: LD_INT 2
52073: PUSH
52074: EMPTY
52075: LIST
52076: LIST
52077: PUSH
52078: LD_INT 2
52080: NEG
52081: PUSH
52082: LD_INT 1
52084: PUSH
52085: EMPTY
52086: LIST
52087: LIST
52088: PUSH
52089: LD_INT 3
52091: NEG
52092: PUSH
52093: LD_INT 0
52095: PUSH
52096: EMPTY
52097: LIST
52098: LIST
52099: PUSH
52100: LD_INT 3
52102: NEG
52103: PUSH
52104: LD_INT 1
52106: NEG
52107: PUSH
52108: EMPTY
52109: LIST
52110: LIST
52111: PUSH
52112: EMPTY
52113: LIST
52114: LIST
52115: LIST
52116: LIST
52117: LIST
52118: LIST
52119: LIST
52120: LIST
52121: LIST
52122: LIST
52123: LIST
52124: LIST
52125: LIST
52126: LIST
52127: LIST
52128: LIST
52129: LIST
52130: LIST
52131: LIST
52132: LIST
52133: LIST
52134: LIST
52135: LIST
52136: LIST
52137: LIST
52138: LIST
52139: LIST
52140: LIST
52141: LIST
52142: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52143: LD_ADDR_VAR 0 44
52147: PUSH
52148: LD_INT 0
52150: PUSH
52151: LD_INT 0
52153: PUSH
52154: EMPTY
52155: LIST
52156: LIST
52157: PUSH
52158: LD_INT 0
52160: PUSH
52161: LD_INT 1
52163: NEG
52164: PUSH
52165: EMPTY
52166: LIST
52167: LIST
52168: PUSH
52169: LD_INT 1
52171: PUSH
52172: LD_INT 0
52174: PUSH
52175: EMPTY
52176: LIST
52177: LIST
52178: PUSH
52179: LD_INT 1
52181: PUSH
52182: LD_INT 1
52184: PUSH
52185: EMPTY
52186: LIST
52187: LIST
52188: PUSH
52189: LD_INT 0
52191: PUSH
52192: LD_INT 1
52194: PUSH
52195: EMPTY
52196: LIST
52197: LIST
52198: PUSH
52199: LD_INT 1
52201: NEG
52202: PUSH
52203: LD_INT 0
52205: PUSH
52206: EMPTY
52207: LIST
52208: LIST
52209: PUSH
52210: LD_INT 1
52212: NEG
52213: PUSH
52214: LD_INT 1
52216: NEG
52217: PUSH
52218: EMPTY
52219: LIST
52220: LIST
52221: PUSH
52222: LD_INT 1
52224: NEG
52225: PUSH
52226: LD_INT 2
52228: NEG
52229: PUSH
52230: EMPTY
52231: LIST
52232: LIST
52233: PUSH
52234: LD_INT 1
52236: PUSH
52237: LD_INT 1
52239: NEG
52240: PUSH
52241: EMPTY
52242: LIST
52243: LIST
52244: PUSH
52245: LD_INT 2
52247: PUSH
52248: LD_INT 0
52250: PUSH
52251: EMPTY
52252: LIST
52253: LIST
52254: PUSH
52255: LD_INT 2
52257: PUSH
52258: LD_INT 1
52260: PUSH
52261: EMPTY
52262: LIST
52263: LIST
52264: PUSH
52265: LD_INT 2
52267: PUSH
52268: LD_INT 2
52270: PUSH
52271: EMPTY
52272: LIST
52273: LIST
52274: PUSH
52275: LD_INT 1
52277: PUSH
52278: LD_INT 2
52280: PUSH
52281: EMPTY
52282: LIST
52283: LIST
52284: PUSH
52285: LD_INT 1
52287: NEG
52288: PUSH
52289: LD_INT 1
52291: PUSH
52292: EMPTY
52293: LIST
52294: LIST
52295: PUSH
52296: LD_INT 2
52298: NEG
52299: PUSH
52300: LD_INT 0
52302: PUSH
52303: EMPTY
52304: LIST
52305: LIST
52306: PUSH
52307: LD_INT 2
52309: NEG
52310: PUSH
52311: LD_INT 1
52313: NEG
52314: PUSH
52315: EMPTY
52316: LIST
52317: LIST
52318: PUSH
52319: LD_INT 2
52321: NEG
52322: PUSH
52323: LD_INT 2
52325: NEG
52326: PUSH
52327: EMPTY
52328: LIST
52329: LIST
52330: PUSH
52331: LD_INT 2
52333: NEG
52334: PUSH
52335: LD_INT 3
52337: NEG
52338: PUSH
52339: EMPTY
52340: LIST
52341: LIST
52342: PUSH
52343: LD_INT 2
52345: PUSH
52346: LD_INT 1
52348: NEG
52349: PUSH
52350: EMPTY
52351: LIST
52352: LIST
52353: PUSH
52354: LD_INT 3
52356: PUSH
52357: LD_INT 0
52359: PUSH
52360: EMPTY
52361: LIST
52362: LIST
52363: PUSH
52364: LD_INT 3
52366: PUSH
52367: LD_INT 1
52369: PUSH
52370: EMPTY
52371: LIST
52372: LIST
52373: PUSH
52374: LD_INT 3
52376: PUSH
52377: LD_INT 2
52379: PUSH
52380: EMPTY
52381: LIST
52382: LIST
52383: PUSH
52384: LD_INT 3
52386: PUSH
52387: LD_INT 3
52389: PUSH
52390: EMPTY
52391: LIST
52392: LIST
52393: PUSH
52394: LD_INT 2
52396: PUSH
52397: LD_INT 3
52399: PUSH
52400: EMPTY
52401: LIST
52402: LIST
52403: PUSH
52404: LD_INT 2
52406: NEG
52407: PUSH
52408: LD_INT 1
52410: PUSH
52411: EMPTY
52412: LIST
52413: LIST
52414: PUSH
52415: LD_INT 3
52417: NEG
52418: PUSH
52419: LD_INT 0
52421: PUSH
52422: EMPTY
52423: LIST
52424: LIST
52425: PUSH
52426: LD_INT 3
52428: NEG
52429: PUSH
52430: LD_INT 1
52432: NEG
52433: PUSH
52434: EMPTY
52435: LIST
52436: LIST
52437: PUSH
52438: LD_INT 3
52440: NEG
52441: PUSH
52442: LD_INT 2
52444: NEG
52445: PUSH
52446: EMPTY
52447: LIST
52448: LIST
52449: PUSH
52450: LD_INT 3
52452: NEG
52453: PUSH
52454: LD_INT 3
52456: NEG
52457: PUSH
52458: EMPTY
52459: LIST
52460: LIST
52461: PUSH
52462: EMPTY
52463: LIST
52464: LIST
52465: LIST
52466: LIST
52467: LIST
52468: LIST
52469: LIST
52470: LIST
52471: LIST
52472: LIST
52473: LIST
52474: LIST
52475: LIST
52476: LIST
52477: LIST
52478: LIST
52479: LIST
52480: LIST
52481: LIST
52482: LIST
52483: LIST
52484: LIST
52485: LIST
52486: LIST
52487: LIST
52488: LIST
52489: LIST
52490: LIST
52491: LIST
52492: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52493: LD_ADDR_VAR 0 45
52497: PUSH
52498: LD_INT 0
52500: PUSH
52501: LD_INT 0
52503: PUSH
52504: EMPTY
52505: LIST
52506: LIST
52507: PUSH
52508: LD_INT 0
52510: PUSH
52511: LD_INT 1
52513: NEG
52514: PUSH
52515: EMPTY
52516: LIST
52517: LIST
52518: PUSH
52519: LD_INT 1
52521: PUSH
52522: LD_INT 0
52524: PUSH
52525: EMPTY
52526: LIST
52527: LIST
52528: PUSH
52529: LD_INT 1
52531: PUSH
52532: LD_INT 1
52534: PUSH
52535: EMPTY
52536: LIST
52537: LIST
52538: PUSH
52539: LD_INT 0
52541: PUSH
52542: LD_INT 1
52544: PUSH
52545: EMPTY
52546: LIST
52547: LIST
52548: PUSH
52549: LD_INT 1
52551: NEG
52552: PUSH
52553: LD_INT 0
52555: PUSH
52556: EMPTY
52557: LIST
52558: LIST
52559: PUSH
52560: LD_INT 1
52562: NEG
52563: PUSH
52564: LD_INT 1
52566: NEG
52567: PUSH
52568: EMPTY
52569: LIST
52570: LIST
52571: PUSH
52572: LD_INT 1
52574: NEG
52575: PUSH
52576: LD_INT 2
52578: NEG
52579: PUSH
52580: EMPTY
52581: LIST
52582: LIST
52583: PUSH
52584: LD_INT 0
52586: PUSH
52587: LD_INT 2
52589: NEG
52590: PUSH
52591: EMPTY
52592: LIST
52593: LIST
52594: PUSH
52595: LD_INT 1
52597: PUSH
52598: LD_INT 1
52600: NEG
52601: PUSH
52602: EMPTY
52603: LIST
52604: LIST
52605: PUSH
52606: LD_INT 2
52608: PUSH
52609: LD_INT 1
52611: PUSH
52612: EMPTY
52613: LIST
52614: LIST
52615: PUSH
52616: LD_INT 2
52618: PUSH
52619: LD_INT 2
52621: PUSH
52622: EMPTY
52623: LIST
52624: LIST
52625: PUSH
52626: LD_INT 1
52628: PUSH
52629: LD_INT 2
52631: PUSH
52632: EMPTY
52633: LIST
52634: LIST
52635: PUSH
52636: LD_INT 0
52638: PUSH
52639: LD_INT 2
52641: PUSH
52642: EMPTY
52643: LIST
52644: LIST
52645: PUSH
52646: LD_INT 1
52648: NEG
52649: PUSH
52650: LD_INT 1
52652: PUSH
52653: EMPTY
52654: LIST
52655: LIST
52656: PUSH
52657: LD_INT 2
52659: NEG
52660: PUSH
52661: LD_INT 1
52663: NEG
52664: PUSH
52665: EMPTY
52666: LIST
52667: LIST
52668: PUSH
52669: LD_INT 2
52671: NEG
52672: PUSH
52673: LD_INT 2
52675: NEG
52676: PUSH
52677: EMPTY
52678: LIST
52679: LIST
52680: PUSH
52681: LD_INT 2
52683: NEG
52684: PUSH
52685: LD_INT 3
52687: NEG
52688: PUSH
52689: EMPTY
52690: LIST
52691: LIST
52692: PUSH
52693: LD_INT 1
52695: NEG
52696: PUSH
52697: LD_INT 3
52699: NEG
52700: PUSH
52701: EMPTY
52702: LIST
52703: LIST
52704: PUSH
52705: LD_INT 0
52707: PUSH
52708: LD_INT 3
52710: NEG
52711: PUSH
52712: EMPTY
52713: LIST
52714: LIST
52715: PUSH
52716: LD_INT 1
52718: PUSH
52719: LD_INT 2
52721: NEG
52722: PUSH
52723: EMPTY
52724: LIST
52725: LIST
52726: PUSH
52727: LD_INT 3
52729: PUSH
52730: LD_INT 2
52732: PUSH
52733: EMPTY
52734: LIST
52735: LIST
52736: PUSH
52737: LD_INT 3
52739: PUSH
52740: LD_INT 3
52742: PUSH
52743: EMPTY
52744: LIST
52745: LIST
52746: PUSH
52747: LD_INT 2
52749: PUSH
52750: LD_INT 3
52752: PUSH
52753: EMPTY
52754: LIST
52755: LIST
52756: PUSH
52757: LD_INT 1
52759: PUSH
52760: LD_INT 3
52762: PUSH
52763: EMPTY
52764: LIST
52765: LIST
52766: PUSH
52767: LD_INT 0
52769: PUSH
52770: LD_INT 3
52772: PUSH
52773: EMPTY
52774: LIST
52775: LIST
52776: PUSH
52777: LD_INT 1
52779: NEG
52780: PUSH
52781: LD_INT 2
52783: PUSH
52784: EMPTY
52785: LIST
52786: LIST
52787: PUSH
52788: LD_INT 3
52790: NEG
52791: PUSH
52792: LD_INT 2
52794: NEG
52795: PUSH
52796: EMPTY
52797: LIST
52798: LIST
52799: PUSH
52800: LD_INT 3
52802: NEG
52803: PUSH
52804: LD_INT 3
52806: NEG
52807: PUSH
52808: EMPTY
52809: LIST
52810: LIST
52811: PUSH
52812: EMPTY
52813: LIST
52814: LIST
52815: LIST
52816: LIST
52817: LIST
52818: LIST
52819: LIST
52820: LIST
52821: LIST
52822: LIST
52823: LIST
52824: LIST
52825: LIST
52826: LIST
52827: LIST
52828: LIST
52829: LIST
52830: LIST
52831: LIST
52832: LIST
52833: LIST
52834: LIST
52835: LIST
52836: LIST
52837: LIST
52838: LIST
52839: LIST
52840: LIST
52841: LIST
52842: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52843: LD_ADDR_VAR 0 46
52847: PUSH
52848: LD_INT 0
52850: PUSH
52851: LD_INT 0
52853: PUSH
52854: EMPTY
52855: LIST
52856: LIST
52857: PUSH
52858: LD_INT 0
52860: PUSH
52861: LD_INT 1
52863: NEG
52864: PUSH
52865: EMPTY
52866: LIST
52867: LIST
52868: PUSH
52869: LD_INT 1
52871: PUSH
52872: LD_INT 0
52874: PUSH
52875: EMPTY
52876: LIST
52877: LIST
52878: PUSH
52879: LD_INT 1
52881: PUSH
52882: LD_INT 1
52884: PUSH
52885: EMPTY
52886: LIST
52887: LIST
52888: PUSH
52889: LD_INT 0
52891: PUSH
52892: LD_INT 1
52894: PUSH
52895: EMPTY
52896: LIST
52897: LIST
52898: PUSH
52899: LD_INT 1
52901: NEG
52902: PUSH
52903: LD_INT 0
52905: PUSH
52906: EMPTY
52907: LIST
52908: LIST
52909: PUSH
52910: LD_INT 1
52912: NEG
52913: PUSH
52914: LD_INT 1
52916: NEG
52917: PUSH
52918: EMPTY
52919: LIST
52920: LIST
52921: PUSH
52922: LD_INT 1
52924: NEG
52925: PUSH
52926: LD_INT 2
52928: NEG
52929: PUSH
52930: EMPTY
52931: LIST
52932: LIST
52933: PUSH
52934: LD_INT 0
52936: PUSH
52937: LD_INT 2
52939: NEG
52940: PUSH
52941: EMPTY
52942: LIST
52943: LIST
52944: PUSH
52945: LD_INT 1
52947: PUSH
52948: LD_INT 1
52950: NEG
52951: PUSH
52952: EMPTY
52953: LIST
52954: LIST
52955: PUSH
52956: LD_INT 2
52958: PUSH
52959: LD_INT 0
52961: PUSH
52962: EMPTY
52963: LIST
52964: LIST
52965: PUSH
52966: LD_INT 2
52968: PUSH
52969: LD_INT 1
52971: PUSH
52972: EMPTY
52973: LIST
52974: LIST
52975: PUSH
52976: LD_INT 1
52978: PUSH
52979: LD_INT 2
52981: PUSH
52982: EMPTY
52983: LIST
52984: LIST
52985: PUSH
52986: LD_INT 0
52988: PUSH
52989: LD_INT 2
52991: PUSH
52992: EMPTY
52993: LIST
52994: LIST
52995: PUSH
52996: LD_INT 1
52998: NEG
52999: PUSH
53000: LD_INT 1
53002: PUSH
53003: EMPTY
53004: LIST
53005: LIST
53006: PUSH
53007: LD_INT 2
53009: NEG
53010: PUSH
53011: LD_INT 0
53013: PUSH
53014: EMPTY
53015: LIST
53016: LIST
53017: PUSH
53018: LD_INT 2
53020: NEG
53021: PUSH
53022: LD_INT 1
53024: NEG
53025: PUSH
53026: EMPTY
53027: LIST
53028: LIST
53029: PUSH
53030: LD_INT 1
53032: NEG
53033: PUSH
53034: LD_INT 3
53036: NEG
53037: PUSH
53038: EMPTY
53039: LIST
53040: LIST
53041: PUSH
53042: LD_INT 0
53044: PUSH
53045: LD_INT 3
53047: NEG
53048: PUSH
53049: EMPTY
53050: LIST
53051: LIST
53052: PUSH
53053: LD_INT 1
53055: PUSH
53056: LD_INT 2
53058: NEG
53059: PUSH
53060: EMPTY
53061: LIST
53062: LIST
53063: PUSH
53064: LD_INT 2
53066: PUSH
53067: LD_INT 1
53069: NEG
53070: PUSH
53071: EMPTY
53072: LIST
53073: LIST
53074: PUSH
53075: LD_INT 3
53077: PUSH
53078: LD_INT 0
53080: PUSH
53081: EMPTY
53082: LIST
53083: LIST
53084: PUSH
53085: LD_INT 3
53087: PUSH
53088: LD_INT 1
53090: PUSH
53091: EMPTY
53092: LIST
53093: LIST
53094: PUSH
53095: LD_INT 1
53097: PUSH
53098: LD_INT 3
53100: PUSH
53101: EMPTY
53102: LIST
53103: LIST
53104: PUSH
53105: LD_INT 0
53107: PUSH
53108: LD_INT 3
53110: PUSH
53111: EMPTY
53112: LIST
53113: LIST
53114: PUSH
53115: LD_INT 1
53117: NEG
53118: PUSH
53119: LD_INT 2
53121: PUSH
53122: EMPTY
53123: LIST
53124: LIST
53125: PUSH
53126: LD_INT 2
53128: NEG
53129: PUSH
53130: LD_INT 1
53132: PUSH
53133: EMPTY
53134: LIST
53135: LIST
53136: PUSH
53137: LD_INT 3
53139: NEG
53140: PUSH
53141: LD_INT 0
53143: PUSH
53144: EMPTY
53145: LIST
53146: LIST
53147: PUSH
53148: LD_INT 3
53150: NEG
53151: PUSH
53152: LD_INT 1
53154: NEG
53155: PUSH
53156: EMPTY
53157: LIST
53158: LIST
53159: PUSH
53160: EMPTY
53161: LIST
53162: LIST
53163: LIST
53164: LIST
53165: LIST
53166: LIST
53167: LIST
53168: LIST
53169: LIST
53170: LIST
53171: LIST
53172: LIST
53173: LIST
53174: LIST
53175: LIST
53176: LIST
53177: LIST
53178: LIST
53179: LIST
53180: LIST
53181: LIST
53182: LIST
53183: LIST
53184: LIST
53185: LIST
53186: LIST
53187: LIST
53188: LIST
53189: LIST
53190: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53191: LD_ADDR_VAR 0 47
53195: PUSH
53196: LD_INT 0
53198: PUSH
53199: LD_INT 0
53201: PUSH
53202: EMPTY
53203: LIST
53204: LIST
53205: PUSH
53206: LD_INT 0
53208: PUSH
53209: LD_INT 1
53211: NEG
53212: PUSH
53213: EMPTY
53214: LIST
53215: LIST
53216: PUSH
53217: LD_INT 1
53219: PUSH
53220: LD_INT 0
53222: PUSH
53223: EMPTY
53224: LIST
53225: LIST
53226: PUSH
53227: LD_INT 1
53229: PUSH
53230: LD_INT 1
53232: PUSH
53233: EMPTY
53234: LIST
53235: LIST
53236: PUSH
53237: LD_INT 0
53239: PUSH
53240: LD_INT 1
53242: PUSH
53243: EMPTY
53244: LIST
53245: LIST
53246: PUSH
53247: LD_INT 1
53249: NEG
53250: PUSH
53251: LD_INT 0
53253: PUSH
53254: EMPTY
53255: LIST
53256: LIST
53257: PUSH
53258: LD_INT 1
53260: NEG
53261: PUSH
53262: LD_INT 1
53264: NEG
53265: PUSH
53266: EMPTY
53267: LIST
53268: LIST
53269: PUSH
53270: LD_INT 1
53272: NEG
53273: PUSH
53274: LD_INT 2
53276: NEG
53277: PUSH
53278: EMPTY
53279: LIST
53280: LIST
53281: PUSH
53282: LD_INT 0
53284: PUSH
53285: LD_INT 2
53287: NEG
53288: PUSH
53289: EMPTY
53290: LIST
53291: LIST
53292: PUSH
53293: LD_INT 1
53295: PUSH
53296: LD_INT 1
53298: NEG
53299: PUSH
53300: EMPTY
53301: LIST
53302: LIST
53303: PUSH
53304: LD_INT 2
53306: NEG
53307: PUSH
53308: LD_INT 1
53310: NEG
53311: PUSH
53312: EMPTY
53313: LIST
53314: LIST
53315: PUSH
53316: LD_INT 2
53318: NEG
53319: PUSH
53320: LD_INT 2
53322: NEG
53323: PUSH
53324: EMPTY
53325: LIST
53326: LIST
53327: PUSH
53328: EMPTY
53329: LIST
53330: LIST
53331: LIST
53332: LIST
53333: LIST
53334: LIST
53335: LIST
53336: LIST
53337: LIST
53338: LIST
53339: LIST
53340: LIST
53341: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
53342: LD_ADDR_VAR 0 48
53346: PUSH
53347: LD_INT 0
53349: PUSH
53350: LD_INT 0
53352: PUSH
53353: EMPTY
53354: LIST
53355: LIST
53356: PUSH
53357: LD_INT 0
53359: PUSH
53360: LD_INT 1
53362: NEG
53363: PUSH
53364: EMPTY
53365: LIST
53366: LIST
53367: PUSH
53368: LD_INT 1
53370: PUSH
53371: LD_INT 0
53373: PUSH
53374: EMPTY
53375: LIST
53376: LIST
53377: PUSH
53378: LD_INT 1
53380: PUSH
53381: LD_INT 1
53383: PUSH
53384: EMPTY
53385: LIST
53386: LIST
53387: PUSH
53388: LD_INT 0
53390: PUSH
53391: LD_INT 1
53393: PUSH
53394: EMPTY
53395: LIST
53396: LIST
53397: PUSH
53398: LD_INT 1
53400: NEG
53401: PUSH
53402: LD_INT 0
53404: PUSH
53405: EMPTY
53406: LIST
53407: LIST
53408: PUSH
53409: LD_INT 1
53411: NEG
53412: PUSH
53413: LD_INT 1
53415: NEG
53416: PUSH
53417: EMPTY
53418: LIST
53419: LIST
53420: PUSH
53421: LD_INT 1
53423: NEG
53424: PUSH
53425: LD_INT 2
53427: NEG
53428: PUSH
53429: EMPTY
53430: LIST
53431: LIST
53432: PUSH
53433: LD_INT 0
53435: PUSH
53436: LD_INT 2
53438: NEG
53439: PUSH
53440: EMPTY
53441: LIST
53442: LIST
53443: PUSH
53444: LD_INT 1
53446: PUSH
53447: LD_INT 1
53449: NEG
53450: PUSH
53451: EMPTY
53452: LIST
53453: LIST
53454: PUSH
53455: LD_INT 2
53457: PUSH
53458: LD_INT 0
53460: PUSH
53461: EMPTY
53462: LIST
53463: LIST
53464: PUSH
53465: LD_INT 2
53467: PUSH
53468: LD_INT 1
53470: PUSH
53471: EMPTY
53472: LIST
53473: LIST
53474: PUSH
53475: EMPTY
53476: LIST
53477: LIST
53478: LIST
53479: LIST
53480: LIST
53481: LIST
53482: LIST
53483: LIST
53484: LIST
53485: LIST
53486: LIST
53487: LIST
53488: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
53489: LD_ADDR_VAR 0 49
53493: PUSH
53494: LD_INT 0
53496: PUSH
53497: LD_INT 0
53499: PUSH
53500: EMPTY
53501: LIST
53502: LIST
53503: PUSH
53504: LD_INT 0
53506: PUSH
53507: LD_INT 1
53509: NEG
53510: PUSH
53511: EMPTY
53512: LIST
53513: LIST
53514: PUSH
53515: LD_INT 1
53517: PUSH
53518: LD_INT 0
53520: PUSH
53521: EMPTY
53522: LIST
53523: LIST
53524: PUSH
53525: LD_INT 1
53527: PUSH
53528: LD_INT 1
53530: PUSH
53531: EMPTY
53532: LIST
53533: LIST
53534: PUSH
53535: LD_INT 0
53537: PUSH
53538: LD_INT 1
53540: PUSH
53541: EMPTY
53542: LIST
53543: LIST
53544: PUSH
53545: LD_INT 1
53547: NEG
53548: PUSH
53549: LD_INT 0
53551: PUSH
53552: EMPTY
53553: LIST
53554: LIST
53555: PUSH
53556: LD_INT 1
53558: NEG
53559: PUSH
53560: LD_INT 1
53562: NEG
53563: PUSH
53564: EMPTY
53565: LIST
53566: LIST
53567: PUSH
53568: LD_INT 1
53570: PUSH
53571: LD_INT 1
53573: NEG
53574: PUSH
53575: EMPTY
53576: LIST
53577: LIST
53578: PUSH
53579: LD_INT 2
53581: PUSH
53582: LD_INT 0
53584: PUSH
53585: EMPTY
53586: LIST
53587: LIST
53588: PUSH
53589: LD_INT 2
53591: PUSH
53592: LD_INT 1
53594: PUSH
53595: EMPTY
53596: LIST
53597: LIST
53598: PUSH
53599: LD_INT 2
53601: PUSH
53602: LD_INT 2
53604: PUSH
53605: EMPTY
53606: LIST
53607: LIST
53608: PUSH
53609: LD_INT 1
53611: PUSH
53612: LD_INT 2
53614: PUSH
53615: EMPTY
53616: LIST
53617: LIST
53618: PUSH
53619: EMPTY
53620: LIST
53621: LIST
53622: LIST
53623: LIST
53624: LIST
53625: LIST
53626: LIST
53627: LIST
53628: LIST
53629: LIST
53630: LIST
53631: LIST
53632: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
53633: LD_ADDR_VAR 0 50
53637: PUSH
53638: LD_INT 0
53640: PUSH
53641: LD_INT 0
53643: PUSH
53644: EMPTY
53645: LIST
53646: LIST
53647: PUSH
53648: LD_INT 0
53650: PUSH
53651: LD_INT 1
53653: NEG
53654: PUSH
53655: EMPTY
53656: LIST
53657: LIST
53658: PUSH
53659: LD_INT 1
53661: PUSH
53662: LD_INT 0
53664: PUSH
53665: EMPTY
53666: LIST
53667: LIST
53668: PUSH
53669: LD_INT 1
53671: PUSH
53672: LD_INT 1
53674: PUSH
53675: EMPTY
53676: LIST
53677: LIST
53678: PUSH
53679: LD_INT 0
53681: PUSH
53682: LD_INT 1
53684: PUSH
53685: EMPTY
53686: LIST
53687: LIST
53688: PUSH
53689: LD_INT 1
53691: NEG
53692: PUSH
53693: LD_INT 0
53695: PUSH
53696: EMPTY
53697: LIST
53698: LIST
53699: PUSH
53700: LD_INT 1
53702: NEG
53703: PUSH
53704: LD_INT 1
53706: NEG
53707: PUSH
53708: EMPTY
53709: LIST
53710: LIST
53711: PUSH
53712: LD_INT 2
53714: PUSH
53715: LD_INT 1
53717: PUSH
53718: EMPTY
53719: LIST
53720: LIST
53721: PUSH
53722: LD_INT 2
53724: PUSH
53725: LD_INT 2
53727: PUSH
53728: EMPTY
53729: LIST
53730: LIST
53731: PUSH
53732: LD_INT 1
53734: PUSH
53735: LD_INT 2
53737: PUSH
53738: EMPTY
53739: LIST
53740: LIST
53741: PUSH
53742: LD_INT 0
53744: PUSH
53745: LD_INT 2
53747: PUSH
53748: EMPTY
53749: LIST
53750: LIST
53751: PUSH
53752: LD_INT 1
53754: NEG
53755: PUSH
53756: LD_INT 1
53758: PUSH
53759: EMPTY
53760: LIST
53761: LIST
53762: PUSH
53763: EMPTY
53764: LIST
53765: LIST
53766: LIST
53767: LIST
53768: LIST
53769: LIST
53770: LIST
53771: LIST
53772: LIST
53773: LIST
53774: LIST
53775: LIST
53776: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
53777: LD_ADDR_VAR 0 51
53781: PUSH
53782: LD_INT 0
53784: PUSH
53785: LD_INT 0
53787: PUSH
53788: EMPTY
53789: LIST
53790: LIST
53791: PUSH
53792: LD_INT 0
53794: PUSH
53795: LD_INT 1
53797: NEG
53798: PUSH
53799: EMPTY
53800: LIST
53801: LIST
53802: PUSH
53803: LD_INT 1
53805: PUSH
53806: LD_INT 0
53808: PUSH
53809: EMPTY
53810: LIST
53811: LIST
53812: PUSH
53813: LD_INT 1
53815: PUSH
53816: LD_INT 1
53818: PUSH
53819: EMPTY
53820: LIST
53821: LIST
53822: PUSH
53823: LD_INT 0
53825: PUSH
53826: LD_INT 1
53828: PUSH
53829: EMPTY
53830: LIST
53831: LIST
53832: PUSH
53833: LD_INT 1
53835: NEG
53836: PUSH
53837: LD_INT 0
53839: PUSH
53840: EMPTY
53841: LIST
53842: LIST
53843: PUSH
53844: LD_INT 1
53846: NEG
53847: PUSH
53848: LD_INT 1
53850: NEG
53851: PUSH
53852: EMPTY
53853: LIST
53854: LIST
53855: PUSH
53856: LD_INT 1
53858: PUSH
53859: LD_INT 2
53861: PUSH
53862: EMPTY
53863: LIST
53864: LIST
53865: PUSH
53866: LD_INT 0
53868: PUSH
53869: LD_INT 2
53871: PUSH
53872: EMPTY
53873: LIST
53874: LIST
53875: PUSH
53876: LD_INT 1
53878: NEG
53879: PUSH
53880: LD_INT 1
53882: PUSH
53883: EMPTY
53884: LIST
53885: LIST
53886: PUSH
53887: LD_INT 2
53889: NEG
53890: PUSH
53891: LD_INT 0
53893: PUSH
53894: EMPTY
53895: LIST
53896: LIST
53897: PUSH
53898: LD_INT 2
53900: NEG
53901: PUSH
53902: LD_INT 1
53904: NEG
53905: PUSH
53906: EMPTY
53907: LIST
53908: LIST
53909: PUSH
53910: EMPTY
53911: LIST
53912: LIST
53913: LIST
53914: LIST
53915: LIST
53916: LIST
53917: LIST
53918: LIST
53919: LIST
53920: LIST
53921: LIST
53922: LIST
53923: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53924: LD_ADDR_VAR 0 52
53928: PUSH
53929: LD_INT 0
53931: PUSH
53932: LD_INT 0
53934: PUSH
53935: EMPTY
53936: LIST
53937: LIST
53938: PUSH
53939: LD_INT 0
53941: PUSH
53942: LD_INT 1
53944: NEG
53945: PUSH
53946: EMPTY
53947: LIST
53948: LIST
53949: PUSH
53950: LD_INT 1
53952: PUSH
53953: LD_INT 0
53955: PUSH
53956: EMPTY
53957: LIST
53958: LIST
53959: PUSH
53960: LD_INT 1
53962: PUSH
53963: LD_INT 1
53965: PUSH
53966: EMPTY
53967: LIST
53968: LIST
53969: PUSH
53970: LD_INT 0
53972: PUSH
53973: LD_INT 1
53975: PUSH
53976: EMPTY
53977: LIST
53978: LIST
53979: PUSH
53980: LD_INT 1
53982: NEG
53983: PUSH
53984: LD_INT 0
53986: PUSH
53987: EMPTY
53988: LIST
53989: LIST
53990: PUSH
53991: LD_INT 1
53993: NEG
53994: PUSH
53995: LD_INT 1
53997: NEG
53998: PUSH
53999: EMPTY
54000: LIST
54001: LIST
54002: PUSH
54003: LD_INT 1
54005: NEG
54006: PUSH
54007: LD_INT 2
54009: NEG
54010: PUSH
54011: EMPTY
54012: LIST
54013: LIST
54014: PUSH
54015: LD_INT 1
54017: NEG
54018: PUSH
54019: LD_INT 1
54021: PUSH
54022: EMPTY
54023: LIST
54024: LIST
54025: PUSH
54026: LD_INT 2
54028: NEG
54029: PUSH
54030: LD_INT 0
54032: PUSH
54033: EMPTY
54034: LIST
54035: LIST
54036: PUSH
54037: LD_INT 2
54039: NEG
54040: PUSH
54041: LD_INT 1
54043: NEG
54044: PUSH
54045: EMPTY
54046: LIST
54047: LIST
54048: PUSH
54049: LD_INT 2
54051: NEG
54052: PUSH
54053: LD_INT 2
54055: NEG
54056: PUSH
54057: EMPTY
54058: LIST
54059: LIST
54060: PUSH
54061: EMPTY
54062: LIST
54063: LIST
54064: LIST
54065: LIST
54066: LIST
54067: LIST
54068: LIST
54069: LIST
54070: LIST
54071: LIST
54072: LIST
54073: LIST
54074: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54075: LD_ADDR_VAR 0 53
54079: PUSH
54080: LD_INT 0
54082: PUSH
54083: LD_INT 0
54085: PUSH
54086: EMPTY
54087: LIST
54088: LIST
54089: PUSH
54090: LD_INT 0
54092: PUSH
54093: LD_INT 1
54095: NEG
54096: PUSH
54097: EMPTY
54098: LIST
54099: LIST
54100: PUSH
54101: LD_INT 1
54103: PUSH
54104: LD_INT 0
54106: PUSH
54107: EMPTY
54108: LIST
54109: LIST
54110: PUSH
54111: LD_INT 1
54113: PUSH
54114: LD_INT 1
54116: PUSH
54117: EMPTY
54118: LIST
54119: LIST
54120: PUSH
54121: LD_INT 0
54123: PUSH
54124: LD_INT 1
54126: PUSH
54127: EMPTY
54128: LIST
54129: LIST
54130: PUSH
54131: LD_INT 1
54133: NEG
54134: PUSH
54135: LD_INT 0
54137: PUSH
54138: EMPTY
54139: LIST
54140: LIST
54141: PUSH
54142: LD_INT 1
54144: NEG
54145: PUSH
54146: LD_INT 1
54148: NEG
54149: PUSH
54150: EMPTY
54151: LIST
54152: LIST
54153: PUSH
54154: LD_INT 1
54156: NEG
54157: PUSH
54158: LD_INT 2
54160: NEG
54161: PUSH
54162: EMPTY
54163: LIST
54164: LIST
54165: PUSH
54166: LD_INT 0
54168: PUSH
54169: LD_INT 2
54171: NEG
54172: PUSH
54173: EMPTY
54174: LIST
54175: LIST
54176: PUSH
54177: LD_INT 1
54179: PUSH
54180: LD_INT 1
54182: NEG
54183: PUSH
54184: EMPTY
54185: LIST
54186: LIST
54187: PUSH
54188: LD_INT 2
54190: PUSH
54191: LD_INT 0
54193: PUSH
54194: EMPTY
54195: LIST
54196: LIST
54197: PUSH
54198: LD_INT 2
54200: PUSH
54201: LD_INT 1
54203: PUSH
54204: EMPTY
54205: LIST
54206: LIST
54207: PUSH
54208: LD_INT 2
54210: PUSH
54211: LD_INT 2
54213: PUSH
54214: EMPTY
54215: LIST
54216: LIST
54217: PUSH
54218: LD_INT 1
54220: PUSH
54221: LD_INT 2
54223: PUSH
54224: EMPTY
54225: LIST
54226: LIST
54227: PUSH
54228: LD_INT 0
54230: PUSH
54231: LD_INT 2
54233: PUSH
54234: EMPTY
54235: LIST
54236: LIST
54237: PUSH
54238: LD_INT 1
54240: NEG
54241: PUSH
54242: LD_INT 1
54244: PUSH
54245: EMPTY
54246: LIST
54247: LIST
54248: PUSH
54249: LD_INT 2
54251: NEG
54252: PUSH
54253: LD_INT 0
54255: PUSH
54256: EMPTY
54257: LIST
54258: LIST
54259: PUSH
54260: LD_INT 2
54262: NEG
54263: PUSH
54264: LD_INT 1
54266: NEG
54267: PUSH
54268: EMPTY
54269: LIST
54270: LIST
54271: PUSH
54272: LD_INT 2
54274: NEG
54275: PUSH
54276: LD_INT 2
54278: NEG
54279: PUSH
54280: EMPTY
54281: LIST
54282: LIST
54283: PUSH
54284: EMPTY
54285: LIST
54286: LIST
54287: LIST
54288: LIST
54289: LIST
54290: LIST
54291: LIST
54292: LIST
54293: LIST
54294: LIST
54295: LIST
54296: LIST
54297: LIST
54298: LIST
54299: LIST
54300: LIST
54301: LIST
54302: LIST
54303: LIST
54304: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54305: LD_ADDR_VAR 0 54
54309: PUSH
54310: LD_INT 0
54312: PUSH
54313: LD_INT 0
54315: PUSH
54316: EMPTY
54317: LIST
54318: LIST
54319: PUSH
54320: LD_INT 0
54322: PUSH
54323: LD_INT 1
54325: NEG
54326: PUSH
54327: EMPTY
54328: LIST
54329: LIST
54330: PUSH
54331: LD_INT 1
54333: PUSH
54334: LD_INT 0
54336: PUSH
54337: EMPTY
54338: LIST
54339: LIST
54340: PUSH
54341: LD_INT 1
54343: PUSH
54344: LD_INT 1
54346: PUSH
54347: EMPTY
54348: LIST
54349: LIST
54350: PUSH
54351: LD_INT 0
54353: PUSH
54354: LD_INT 1
54356: PUSH
54357: EMPTY
54358: LIST
54359: LIST
54360: PUSH
54361: LD_INT 1
54363: NEG
54364: PUSH
54365: LD_INT 0
54367: PUSH
54368: EMPTY
54369: LIST
54370: LIST
54371: PUSH
54372: LD_INT 1
54374: NEG
54375: PUSH
54376: LD_INT 1
54378: NEG
54379: PUSH
54380: EMPTY
54381: LIST
54382: LIST
54383: PUSH
54384: LD_INT 1
54386: NEG
54387: PUSH
54388: LD_INT 2
54390: NEG
54391: PUSH
54392: EMPTY
54393: LIST
54394: LIST
54395: PUSH
54396: LD_INT 0
54398: PUSH
54399: LD_INT 2
54401: NEG
54402: PUSH
54403: EMPTY
54404: LIST
54405: LIST
54406: PUSH
54407: LD_INT 1
54409: PUSH
54410: LD_INT 1
54412: NEG
54413: PUSH
54414: EMPTY
54415: LIST
54416: LIST
54417: PUSH
54418: LD_INT 2
54420: PUSH
54421: LD_INT 0
54423: PUSH
54424: EMPTY
54425: LIST
54426: LIST
54427: PUSH
54428: LD_INT 2
54430: PUSH
54431: LD_INT 1
54433: PUSH
54434: EMPTY
54435: LIST
54436: LIST
54437: PUSH
54438: LD_INT 2
54440: PUSH
54441: LD_INT 2
54443: PUSH
54444: EMPTY
54445: LIST
54446: LIST
54447: PUSH
54448: LD_INT 1
54450: PUSH
54451: LD_INT 2
54453: PUSH
54454: EMPTY
54455: LIST
54456: LIST
54457: PUSH
54458: LD_INT 0
54460: PUSH
54461: LD_INT 2
54463: PUSH
54464: EMPTY
54465: LIST
54466: LIST
54467: PUSH
54468: LD_INT 1
54470: NEG
54471: PUSH
54472: LD_INT 1
54474: PUSH
54475: EMPTY
54476: LIST
54477: LIST
54478: PUSH
54479: LD_INT 2
54481: NEG
54482: PUSH
54483: LD_INT 0
54485: PUSH
54486: EMPTY
54487: LIST
54488: LIST
54489: PUSH
54490: LD_INT 2
54492: NEG
54493: PUSH
54494: LD_INT 1
54496: NEG
54497: PUSH
54498: EMPTY
54499: LIST
54500: LIST
54501: PUSH
54502: LD_INT 2
54504: NEG
54505: PUSH
54506: LD_INT 2
54508: NEG
54509: PUSH
54510: EMPTY
54511: LIST
54512: LIST
54513: PUSH
54514: EMPTY
54515: LIST
54516: LIST
54517: LIST
54518: LIST
54519: LIST
54520: LIST
54521: LIST
54522: LIST
54523: LIST
54524: LIST
54525: LIST
54526: LIST
54527: LIST
54528: LIST
54529: LIST
54530: LIST
54531: LIST
54532: LIST
54533: LIST
54534: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54535: LD_ADDR_VAR 0 55
54539: PUSH
54540: LD_INT 0
54542: PUSH
54543: LD_INT 0
54545: PUSH
54546: EMPTY
54547: LIST
54548: LIST
54549: PUSH
54550: LD_INT 0
54552: PUSH
54553: LD_INT 1
54555: NEG
54556: PUSH
54557: EMPTY
54558: LIST
54559: LIST
54560: PUSH
54561: LD_INT 1
54563: PUSH
54564: LD_INT 0
54566: PUSH
54567: EMPTY
54568: LIST
54569: LIST
54570: PUSH
54571: LD_INT 1
54573: PUSH
54574: LD_INT 1
54576: PUSH
54577: EMPTY
54578: LIST
54579: LIST
54580: PUSH
54581: LD_INT 0
54583: PUSH
54584: LD_INT 1
54586: PUSH
54587: EMPTY
54588: LIST
54589: LIST
54590: PUSH
54591: LD_INT 1
54593: NEG
54594: PUSH
54595: LD_INT 0
54597: PUSH
54598: EMPTY
54599: LIST
54600: LIST
54601: PUSH
54602: LD_INT 1
54604: NEG
54605: PUSH
54606: LD_INT 1
54608: NEG
54609: PUSH
54610: EMPTY
54611: LIST
54612: LIST
54613: PUSH
54614: LD_INT 1
54616: NEG
54617: PUSH
54618: LD_INT 2
54620: NEG
54621: PUSH
54622: EMPTY
54623: LIST
54624: LIST
54625: PUSH
54626: LD_INT 0
54628: PUSH
54629: LD_INT 2
54631: NEG
54632: PUSH
54633: EMPTY
54634: LIST
54635: LIST
54636: PUSH
54637: LD_INT 1
54639: PUSH
54640: LD_INT 1
54642: NEG
54643: PUSH
54644: EMPTY
54645: LIST
54646: LIST
54647: PUSH
54648: LD_INT 2
54650: PUSH
54651: LD_INT 0
54653: PUSH
54654: EMPTY
54655: LIST
54656: LIST
54657: PUSH
54658: LD_INT 2
54660: PUSH
54661: LD_INT 1
54663: PUSH
54664: EMPTY
54665: LIST
54666: LIST
54667: PUSH
54668: LD_INT 2
54670: PUSH
54671: LD_INT 2
54673: PUSH
54674: EMPTY
54675: LIST
54676: LIST
54677: PUSH
54678: LD_INT 1
54680: PUSH
54681: LD_INT 2
54683: PUSH
54684: EMPTY
54685: LIST
54686: LIST
54687: PUSH
54688: LD_INT 0
54690: PUSH
54691: LD_INT 2
54693: PUSH
54694: EMPTY
54695: LIST
54696: LIST
54697: PUSH
54698: LD_INT 1
54700: NEG
54701: PUSH
54702: LD_INT 1
54704: PUSH
54705: EMPTY
54706: LIST
54707: LIST
54708: PUSH
54709: LD_INT 2
54711: NEG
54712: PUSH
54713: LD_INT 0
54715: PUSH
54716: EMPTY
54717: LIST
54718: LIST
54719: PUSH
54720: LD_INT 2
54722: NEG
54723: PUSH
54724: LD_INT 1
54726: NEG
54727: PUSH
54728: EMPTY
54729: LIST
54730: LIST
54731: PUSH
54732: LD_INT 2
54734: NEG
54735: PUSH
54736: LD_INT 2
54738: NEG
54739: PUSH
54740: EMPTY
54741: LIST
54742: LIST
54743: PUSH
54744: EMPTY
54745: LIST
54746: LIST
54747: LIST
54748: LIST
54749: LIST
54750: LIST
54751: LIST
54752: LIST
54753: LIST
54754: LIST
54755: LIST
54756: LIST
54757: LIST
54758: LIST
54759: LIST
54760: LIST
54761: LIST
54762: LIST
54763: LIST
54764: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54765: LD_ADDR_VAR 0 56
54769: PUSH
54770: LD_INT 0
54772: PUSH
54773: LD_INT 0
54775: PUSH
54776: EMPTY
54777: LIST
54778: LIST
54779: PUSH
54780: LD_INT 0
54782: PUSH
54783: LD_INT 1
54785: NEG
54786: PUSH
54787: EMPTY
54788: LIST
54789: LIST
54790: PUSH
54791: LD_INT 1
54793: PUSH
54794: LD_INT 0
54796: PUSH
54797: EMPTY
54798: LIST
54799: LIST
54800: PUSH
54801: LD_INT 1
54803: PUSH
54804: LD_INT 1
54806: PUSH
54807: EMPTY
54808: LIST
54809: LIST
54810: PUSH
54811: LD_INT 0
54813: PUSH
54814: LD_INT 1
54816: PUSH
54817: EMPTY
54818: LIST
54819: LIST
54820: PUSH
54821: LD_INT 1
54823: NEG
54824: PUSH
54825: LD_INT 0
54827: PUSH
54828: EMPTY
54829: LIST
54830: LIST
54831: PUSH
54832: LD_INT 1
54834: NEG
54835: PUSH
54836: LD_INT 1
54838: NEG
54839: PUSH
54840: EMPTY
54841: LIST
54842: LIST
54843: PUSH
54844: LD_INT 1
54846: NEG
54847: PUSH
54848: LD_INT 2
54850: NEG
54851: PUSH
54852: EMPTY
54853: LIST
54854: LIST
54855: PUSH
54856: LD_INT 0
54858: PUSH
54859: LD_INT 2
54861: NEG
54862: PUSH
54863: EMPTY
54864: LIST
54865: LIST
54866: PUSH
54867: LD_INT 1
54869: PUSH
54870: LD_INT 1
54872: NEG
54873: PUSH
54874: EMPTY
54875: LIST
54876: LIST
54877: PUSH
54878: LD_INT 2
54880: PUSH
54881: LD_INT 0
54883: PUSH
54884: EMPTY
54885: LIST
54886: LIST
54887: PUSH
54888: LD_INT 2
54890: PUSH
54891: LD_INT 1
54893: PUSH
54894: EMPTY
54895: LIST
54896: LIST
54897: PUSH
54898: LD_INT 2
54900: PUSH
54901: LD_INT 2
54903: PUSH
54904: EMPTY
54905: LIST
54906: LIST
54907: PUSH
54908: LD_INT 1
54910: PUSH
54911: LD_INT 2
54913: PUSH
54914: EMPTY
54915: LIST
54916: LIST
54917: PUSH
54918: LD_INT 0
54920: PUSH
54921: LD_INT 2
54923: PUSH
54924: EMPTY
54925: LIST
54926: LIST
54927: PUSH
54928: LD_INT 1
54930: NEG
54931: PUSH
54932: LD_INT 1
54934: PUSH
54935: EMPTY
54936: LIST
54937: LIST
54938: PUSH
54939: LD_INT 2
54941: NEG
54942: PUSH
54943: LD_INT 0
54945: PUSH
54946: EMPTY
54947: LIST
54948: LIST
54949: PUSH
54950: LD_INT 2
54952: NEG
54953: PUSH
54954: LD_INT 1
54956: NEG
54957: PUSH
54958: EMPTY
54959: LIST
54960: LIST
54961: PUSH
54962: LD_INT 2
54964: NEG
54965: PUSH
54966: LD_INT 2
54968: NEG
54969: PUSH
54970: EMPTY
54971: LIST
54972: LIST
54973: PUSH
54974: EMPTY
54975: LIST
54976: LIST
54977: LIST
54978: LIST
54979: LIST
54980: LIST
54981: LIST
54982: LIST
54983: LIST
54984: LIST
54985: LIST
54986: LIST
54987: LIST
54988: LIST
54989: LIST
54990: LIST
54991: LIST
54992: LIST
54993: LIST
54994: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54995: LD_ADDR_VAR 0 57
54999: PUSH
55000: LD_INT 0
55002: PUSH
55003: LD_INT 0
55005: PUSH
55006: EMPTY
55007: LIST
55008: LIST
55009: PUSH
55010: LD_INT 0
55012: PUSH
55013: LD_INT 1
55015: NEG
55016: PUSH
55017: EMPTY
55018: LIST
55019: LIST
55020: PUSH
55021: LD_INT 1
55023: PUSH
55024: LD_INT 0
55026: PUSH
55027: EMPTY
55028: LIST
55029: LIST
55030: PUSH
55031: LD_INT 1
55033: PUSH
55034: LD_INT 1
55036: PUSH
55037: EMPTY
55038: LIST
55039: LIST
55040: PUSH
55041: LD_INT 0
55043: PUSH
55044: LD_INT 1
55046: PUSH
55047: EMPTY
55048: LIST
55049: LIST
55050: PUSH
55051: LD_INT 1
55053: NEG
55054: PUSH
55055: LD_INT 0
55057: PUSH
55058: EMPTY
55059: LIST
55060: LIST
55061: PUSH
55062: LD_INT 1
55064: NEG
55065: PUSH
55066: LD_INT 1
55068: NEG
55069: PUSH
55070: EMPTY
55071: LIST
55072: LIST
55073: PUSH
55074: LD_INT 1
55076: NEG
55077: PUSH
55078: LD_INT 2
55080: NEG
55081: PUSH
55082: EMPTY
55083: LIST
55084: LIST
55085: PUSH
55086: LD_INT 0
55088: PUSH
55089: LD_INT 2
55091: NEG
55092: PUSH
55093: EMPTY
55094: LIST
55095: LIST
55096: PUSH
55097: LD_INT 1
55099: PUSH
55100: LD_INT 1
55102: NEG
55103: PUSH
55104: EMPTY
55105: LIST
55106: LIST
55107: PUSH
55108: LD_INT 2
55110: PUSH
55111: LD_INT 0
55113: PUSH
55114: EMPTY
55115: LIST
55116: LIST
55117: PUSH
55118: LD_INT 2
55120: PUSH
55121: LD_INT 1
55123: PUSH
55124: EMPTY
55125: LIST
55126: LIST
55127: PUSH
55128: LD_INT 2
55130: PUSH
55131: LD_INT 2
55133: PUSH
55134: EMPTY
55135: LIST
55136: LIST
55137: PUSH
55138: LD_INT 1
55140: PUSH
55141: LD_INT 2
55143: PUSH
55144: EMPTY
55145: LIST
55146: LIST
55147: PUSH
55148: LD_INT 0
55150: PUSH
55151: LD_INT 2
55153: PUSH
55154: EMPTY
55155: LIST
55156: LIST
55157: PUSH
55158: LD_INT 1
55160: NEG
55161: PUSH
55162: LD_INT 1
55164: PUSH
55165: EMPTY
55166: LIST
55167: LIST
55168: PUSH
55169: LD_INT 2
55171: NEG
55172: PUSH
55173: LD_INT 0
55175: PUSH
55176: EMPTY
55177: LIST
55178: LIST
55179: PUSH
55180: LD_INT 2
55182: NEG
55183: PUSH
55184: LD_INT 1
55186: NEG
55187: PUSH
55188: EMPTY
55189: LIST
55190: LIST
55191: PUSH
55192: LD_INT 2
55194: NEG
55195: PUSH
55196: LD_INT 2
55198: NEG
55199: PUSH
55200: EMPTY
55201: LIST
55202: LIST
55203: PUSH
55204: EMPTY
55205: LIST
55206: LIST
55207: LIST
55208: LIST
55209: LIST
55210: LIST
55211: LIST
55212: LIST
55213: LIST
55214: LIST
55215: LIST
55216: LIST
55217: LIST
55218: LIST
55219: LIST
55220: LIST
55221: LIST
55222: LIST
55223: LIST
55224: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55225: LD_ADDR_VAR 0 58
55229: PUSH
55230: LD_INT 0
55232: PUSH
55233: LD_INT 0
55235: PUSH
55236: EMPTY
55237: LIST
55238: LIST
55239: PUSH
55240: LD_INT 0
55242: PUSH
55243: LD_INT 1
55245: NEG
55246: PUSH
55247: EMPTY
55248: LIST
55249: LIST
55250: PUSH
55251: LD_INT 1
55253: PUSH
55254: LD_INT 0
55256: PUSH
55257: EMPTY
55258: LIST
55259: LIST
55260: PUSH
55261: LD_INT 1
55263: PUSH
55264: LD_INT 1
55266: PUSH
55267: EMPTY
55268: LIST
55269: LIST
55270: PUSH
55271: LD_INT 0
55273: PUSH
55274: LD_INT 1
55276: PUSH
55277: EMPTY
55278: LIST
55279: LIST
55280: PUSH
55281: LD_INT 1
55283: NEG
55284: PUSH
55285: LD_INT 0
55287: PUSH
55288: EMPTY
55289: LIST
55290: LIST
55291: PUSH
55292: LD_INT 1
55294: NEG
55295: PUSH
55296: LD_INT 1
55298: NEG
55299: PUSH
55300: EMPTY
55301: LIST
55302: LIST
55303: PUSH
55304: LD_INT 1
55306: NEG
55307: PUSH
55308: LD_INT 2
55310: NEG
55311: PUSH
55312: EMPTY
55313: LIST
55314: LIST
55315: PUSH
55316: LD_INT 0
55318: PUSH
55319: LD_INT 2
55321: NEG
55322: PUSH
55323: EMPTY
55324: LIST
55325: LIST
55326: PUSH
55327: LD_INT 1
55329: PUSH
55330: LD_INT 1
55332: NEG
55333: PUSH
55334: EMPTY
55335: LIST
55336: LIST
55337: PUSH
55338: LD_INT 2
55340: PUSH
55341: LD_INT 0
55343: PUSH
55344: EMPTY
55345: LIST
55346: LIST
55347: PUSH
55348: LD_INT 2
55350: PUSH
55351: LD_INT 1
55353: PUSH
55354: EMPTY
55355: LIST
55356: LIST
55357: PUSH
55358: LD_INT 2
55360: PUSH
55361: LD_INT 2
55363: PUSH
55364: EMPTY
55365: LIST
55366: LIST
55367: PUSH
55368: LD_INT 1
55370: PUSH
55371: LD_INT 2
55373: PUSH
55374: EMPTY
55375: LIST
55376: LIST
55377: PUSH
55378: LD_INT 0
55380: PUSH
55381: LD_INT 2
55383: PUSH
55384: EMPTY
55385: LIST
55386: LIST
55387: PUSH
55388: LD_INT 1
55390: NEG
55391: PUSH
55392: LD_INT 1
55394: PUSH
55395: EMPTY
55396: LIST
55397: LIST
55398: PUSH
55399: LD_INT 2
55401: NEG
55402: PUSH
55403: LD_INT 0
55405: PUSH
55406: EMPTY
55407: LIST
55408: LIST
55409: PUSH
55410: LD_INT 2
55412: NEG
55413: PUSH
55414: LD_INT 1
55416: NEG
55417: PUSH
55418: EMPTY
55419: LIST
55420: LIST
55421: PUSH
55422: LD_INT 2
55424: NEG
55425: PUSH
55426: LD_INT 2
55428: NEG
55429: PUSH
55430: EMPTY
55431: LIST
55432: LIST
55433: PUSH
55434: EMPTY
55435: LIST
55436: LIST
55437: LIST
55438: LIST
55439: LIST
55440: LIST
55441: LIST
55442: LIST
55443: LIST
55444: LIST
55445: LIST
55446: LIST
55447: LIST
55448: LIST
55449: LIST
55450: LIST
55451: LIST
55452: LIST
55453: LIST
55454: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55455: LD_ADDR_VAR 0 59
55459: PUSH
55460: LD_INT 0
55462: PUSH
55463: LD_INT 0
55465: PUSH
55466: EMPTY
55467: LIST
55468: LIST
55469: PUSH
55470: LD_INT 0
55472: PUSH
55473: LD_INT 1
55475: NEG
55476: PUSH
55477: EMPTY
55478: LIST
55479: LIST
55480: PUSH
55481: LD_INT 1
55483: PUSH
55484: LD_INT 0
55486: PUSH
55487: EMPTY
55488: LIST
55489: LIST
55490: PUSH
55491: LD_INT 1
55493: PUSH
55494: LD_INT 1
55496: PUSH
55497: EMPTY
55498: LIST
55499: LIST
55500: PUSH
55501: LD_INT 0
55503: PUSH
55504: LD_INT 1
55506: PUSH
55507: EMPTY
55508: LIST
55509: LIST
55510: PUSH
55511: LD_INT 1
55513: NEG
55514: PUSH
55515: LD_INT 0
55517: PUSH
55518: EMPTY
55519: LIST
55520: LIST
55521: PUSH
55522: LD_INT 1
55524: NEG
55525: PUSH
55526: LD_INT 1
55528: NEG
55529: PUSH
55530: EMPTY
55531: LIST
55532: LIST
55533: PUSH
55534: EMPTY
55535: LIST
55536: LIST
55537: LIST
55538: LIST
55539: LIST
55540: LIST
55541: LIST
55542: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55543: LD_ADDR_VAR 0 60
55547: PUSH
55548: LD_INT 0
55550: PUSH
55551: LD_INT 0
55553: PUSH
55554: EMPTY
55555: LIST
55556: LIST
55557: PUSH
55558: LD_INT 0
55560: PUSH
55561: LD_INT 1
55563: NEG
55564: PUSH
55565: EMPTY
55566: LIST
55567: LIST
55568: PUSH
55569: LD_INT 1
55571: PUSH
55572: LD_INT 0
55574: PUSH
55575: EMPTY
55576: LIST
55577: LIST
55578: PUSH
55579: LD_INT 1
55581: PUSH
55582: LD_INT 1
55584: PUSH
55585: EMPTY
55586: LIST
55587: LIST
55588: PUSH
55589: LD_INT 0
55591: PUSH
55592: LD_INT 1
55594: PUSH
55595: EMPTY
55596: LIST
55597: LIST
55598: PUSH
55599: LD_INT 1
55601: NEG
55602: PUSH
55603: LD_INT 0
55605: PUSH
55606: EMPTY
55607: LIST
55608: LIST
55609: PUSH
55610: LD_INT 1
55612: NEG
55613: PUSH
55614: LD_INT 1
55616: NEG
55617: PUSH
55618: EMPTY
55619: LIST
55620: LIST
55621: PUSH
55622: EMPTY
55623: LIST
55624: LIST
55625: LIST
55626: LIST
55627: LIST
55628: LIST
55629: LIST
55630: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55631: LD_ADDR_VAR 0 61
55635: PUSH
55636: LD_INT 0
55638: PUSH
55639: LD_INT 0
55641: PUSH
55642: EMPTY
55643: LIST
55644: LIST
55645: PUSH
55646: LD_INT 0
55648: PUSH
55649: LD_INT 1
55651: NEG
55652: PUSH
55653: EMPTY
55654: LIST
55655: LIST
55656: PUSH
55657: LD_INT 1
55659: PUSH
55660: LD_INT 0
55662: PUSH
55663: EMPTY
55664: LIST
55665: LIST
55666: PUSH
55667: LD_INT 1
55669: PUSH
55670: LD_INT 1
55672: PUSH
55673: EMPTY
55674: LIST
55675: LIST
55676: PUSH
55677: LD_INT 0
55679: PUSH
55680: LD_INT 1
55682: PUSH
55683: EMPTY
55684: LIST
55685: LIST
55686: PUSH
55687: LD_INT 1
55689: NEG
55690: PUSH
55691: LD_INT 0
55693: PUSH
55694: EMPTY
55695: LIST
55696: LIST
55697: PUSH
55698: LD_INT 1
55700: NEG
55701: PUSH
55702: LD_INT 1
55704: NEG
55705: PUSH
55706: EMPTY
55707: LIST
55708: LIST
55709: PUSH
55710: EMPTY
55711: LIST
55712: LIST
55713: LIST
55714: LIST
55715: LIST
55716: LIST
55717: LIST
55718: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55719: LD_ADDR_VAR 0 62
55723: PUSH
55724: LD_INT 0
55726: PUSH
55727: LD_INT 0
55729: PUSH
55730: EMPTY
55731: LIST
55732: LIST
55733: PUSH
55734: LD_INT 0
55736: PUSH
55737: LD_INT 1
55739: NEG
55740: PUSH
55741: EMPTY
55742: LIST
55743: LIST
55744: PUSH
55745: LD_INT 1
55747: PUSH
55748: LD_INT 0
55750: PUSH
55751: EMPTY
55752: LIST
55753: LIST
55754: PUSH
55755: LD_INT 1
55757: PUSH
55758: LD_INT 1
55760: PUSH
55761: EMPTY
55762: LIST
55763: LIST
55764: PUSH
55765: LD_INT 0
55767: PUSH
55768: LD_INT 1
55770: PUSH
55771: EMPTY
55772: LIST
55773: LIST
55774: PUSH
55775: LD_INT 1
55777: NEG
55778: PUSH
55779: LD_INT 0
55781: PUSH
55782: EMPTY
55783: LIST
55784: LIST
55785: PUSH
55786: LD_INT 1
55788: NEG
55789: PUSH
55790: LD_INT 1
55792: NEG
55793: PUSH
55794: EMPTY
55795: LIST
55796: LIST
55797: PUSH
55798: EMPTY
55799: LIST
55800: LIST
55801: LIST
55802: LIST
55803: LIST
55804: LIST
55805: LIST
55806: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55807: LD_ADDR_VAR 0 63
55811: PUSH
55812: LD_INT 0
55814: PUSH
55815: LD_INT 0
55817: PUSH
55818: EMPTY
55819: LIST
55820: LIST
55821: PUSH
55822: LD_INT 0
55824: PUSH
55825: LD_INT 1
55827: NEG
55828: PUSH
55829: EMPTY
55830: LIST
55831: LIST
55832: PUSH
55833: LD_INT 1
55835: PUSH
55836: LD_INT 0
55838: PUSH
55839: EMPTY
55840: LIST
55841: LIST
55842: PUSH
55843: LD_INT 1
55845: PUSH
55846: LD_INT 1
55848: PUSH
55849: EMPTY
55850: LIST
55851: LIST
55852: PUSH
55853: LD_INT 0
55855: PUSH
55856: LD_INT 1
55858: PUSH
55859: EMPTY
55860: LIST
55861: LIST
55862: PUSH
55863: LD_INT 1
55865: NEG
55866: PUSH
55867: LD_INT 0
55869: PUSH
55870: EMPTY
55871: LIST
55872: LIST
55873: PUSH
55874: LD_INT 1
55876: NEG
55877: PUSH
55878: LD_INT 1
55880: NEG
55881: PUSH
55882: EMPTY
55883: LIST
55884: LIST
55885: PUSH
55886: EMPTY
55887: LIST
55888: LIST
55889: LIST
55890: LIST
55891: LIST
55892: LIST
55893: LIST
55894: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55895: LD_ADDR_VAR 0 64
55899: PUSH
55900: LD_INT 0
55902: PUSH
55903: LD_INT 0
55905: PUSH
55906: EMPTY
55907: LIST
55908: LIST
55909: PUSH
55910: LD_INT 0
55912: PUSH
55913: LD_INT 1
55915: NEG
55916: PUSH
55917: EMPTY
55918: LIST
55919: LIST
55920: PUSH
55921: LD_INT 1
55923: PUSH
55924: LD_INT 0
55926: PUSH
55927: EMPTY
55928: LIST
55929: LIST
55930: PUSH
55931: LD_INT 1
55933: PUSH
55934: LD_INT 1
55936: PUSH
55937: EMPTY
55938: LIST
55939: LIST
55940: PUSH
55941: LD_INT 0
55943: PUSH
55944: LD_INT 1
55946: PUSH
55947: EMPTY
55948: LIST
55949: LIST
55950: PUSH
55951: LD_INT 1
55953: NEG
55954: PUSH
55955: LD_INT 0
55957: PUSH
55958: EMPTY
55959: LIST
55960: LIST
55961: PUSH
55962: LD_INT 1
55964: NEG
55965: PUSH
55966: LD_INT 1
55968: NEG
55969: PUSH
55970: EMPTY
55971: LIST
55972: LIST
55973: PUSH
55974: EMPTY
55975: LIST
55976: LIST
55977: LIST
55978: LIST
55979: LIST
55980: LIST
55981: LIST
55982: ST_TO_ADDR
// end ; 1 :
55983: GO 61880
55985: LD_INT 1
55987: DOUBLE
55988: EQUAL
55989: IFTRUE 55993
55991: GO 58616
55993: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55994: LD_ADDR_VAR 0 11
55998: PUSH
55999: LD_INT 1
56001: NEG
56002: PUSH
56003: LD_INT 3
56005: NEG
56006: PUSH
56007: EMPTY
56008: LIST
56009: LIST
56010: PUSH
56011: LD_INT 0
56013: PUSH
56014: LD_INT 3
56016: NEG
56017: PUSH
56018: EMPTY
56019: LIST
56020: LIST
56021: PUSH
56022: LD_INT 1
56024: PUSH
56025: LD_INT 2
56027: NEG
56028: PUSH
56029: EMPTY
56030: LIST
56031: LIST
56032: PUSH
56033: EMPTY
56034: LIST
56035: LIST
56036: LIST
56037: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56038: LD_ADDR_VAR 0 12
56042: PUSH
56043: LD_INT 2
56045: PUSH
56046: LD_INT 1
56048: NEG
56049: PUSH
56050: EMPTY
56051: LIST
56052: LIST
56053: PUSH
56054: LD_INT 3
56056: PUSH
56057: LD_INT 0
56059: PUSH
56060: EMPTY
56061: LIST
56062: LIST
56063: PUSH
56064: LD_INT 3
56066: PUSH
56067: LD_INT 1
56069: PUSH
56070: EMPTY
56071: LIST
56072: LIST
56073: PUSH
56074: EMPTY
56075: LIST
56076: LIST
56077: LIST
56078: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56079: LD_ADDR_VAR 0 13
56083: PUSH
56084: LD_INT 3
56086: PUSH
56087: LD_INT 2
56089: PUSH
56090: EMPTY
56091: LIST
56092: LIST
56093: PUSH
56094: LD_INT 3
56096: PUSH
56097: LD_INT 3
56099: PUSH
56100: EMPTY
56101: LIST
56102: LIST
56103: PUSH
56104: LD_INT 2
56106: PUSH
56107: LD_INT 3
56109: PUSH
56110: EMPTY
56111: LIST
56112: LIST
56113: PUSH
56114: EMPTY
56115: LIST
56116: LIST
56117: LIST
56118: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56119: LD_ADDR_VAR 0 14
56123: PUSH
56124: LD_INT 1
56126: PUSH
56127: LD_INT 3
56129: PUSH
56130: EMPTY
56131: LIST
56132: LIST
56133: PUSH
56134: LD_INT 0
56136: PUSH
56137: LD_INT 3
56139: PUSH
56140: EMPTY
56141: LIST
56142: LIST
56143: PUSH
56144: LD_INT 1
56146: NEG
56147: PUSH
56148: LD_INT 2
56150: PUSH
56151: EMPTY
56152: LIST
56153: LIST
56154: PUSH
56155: EMPTY
56156: LIST
56157: LIST
56158: LIST
56159: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56160: LD_ADDR_VAR 0 15
56164: PUSH
56165: LD_INT 2
56167: NEG
56168: PUSH
56169: LD_INT 1
56171: PUSH
56172: EMPTY
56173: LIST
56174: LIST
56175: PUSH
56176: LD_INT 3
56178: NEG
56179: PUSH
56180: LD_INT 0
56182: PUSH
56183: EMPTY
56184: LIST
56185: LIST
56186: PUSH
56187: LD_INT 3
56189: NEG
56190: PUSH
56191: LD_INT 1
56193: NEG
56194: PUSH
56195: EMPTY
56196: LIST
56197: LIST
56198: PUSH
56199: EMPTY
56200: LIST
56201: LIST
56202: LIST
56203: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56204: LD_ADDR_VAR 0 16
56208: PUSH
56209: LD_INT 2
56211: NEG
56212: PUSH
56213: LD_INT 3
56215: NEG
56216: PUSH
56217: EMPTY
56218: LIST
56219: LIST
56220: PUSH
56221: LD_INT 3
56223: NEG
56224: PUSH
56225: LD_INT 2
56227: NEG
56228: PUSH
56229: EMPTY
56230: LIST
56231: LIST
56232: PUSH
56233: LD_INT 3
56235: NEG
56236: PUSH
56237: LD_INT 3
56239: NEG
56240: PUSH
56241: EMPTY
56242: LIST
56243: LIST
56244: PUSH
56245: EMPTY
56246: LIST
56247: LIST
56248: LIST
56249: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56250: LD_ADDR_VAR 0 17
56254: PUSH
56255: LD_INT 1
56257: NEG
56258: PUSH
56259: LD_INT 3
56261: NEG
56262: PUSH
56263: EMPTY
56264: LIST
56265: LIST
56266: PUSH
56267: LD_INT 0
56269: PUSH
56270: LD_INT 3
56272: NEG
56273: PUSH
56274: EMPTY
56275: LIST
56276: LIST
56277: PUSH
56278: LD_INT 1
56280: PUSH
56281: LD_INT 2
56283: NEG
56284: PUSH
56285: EMPTY
56286: LIST
56287: LIST
56288: PUSH
56289: EMPTY
56290: LIST
56291: LIST
56292: LIST
56293: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56294: LD_ADDR_VAR 0 18
56298: PUSH
56299: LD_INT 2
56301: PUSH
56302: LD_INT 1
56304: NEG
56305: PUSH
56306: EMPTY
56307: LIST
56308: LIST
56309: PUSH
56310: LD_INT 3
56312: PUSH
56313: LD_INT 0
56315: PUSH
56316: EMPTY
56317: LIST
56318: LIST
56319: PUSH
56320: LD_INT 3
56322: PUSH
56323: LD_INT 1
56325: PUSH
56326: EMPTY
56327: LIST
56328: LIST
56329: PUSH
56330: EMPTY
56331: LIST
56332: LIST
56333: LIST
56334: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56335: LD_ADDR_VAR 0 19
56339: PUSH
56340: LD_INT 3
56342: PUSH
56343: LD_INT 2
56345: PUSH
56346: EMPTY
56347: LIST
56348: LIST
56349: PUSH
56350: LD_INT 3
56352: PUSH
56353: LD_INT 3
56355: PUSH
56356: EMPTY
56357: LIST
56358: LIST
56359: PUSH
56360: LD_INT 2
56362: PUSH
56363: LD_INT 3
56365: PUSH
56366: EMPTY
56367: LIST
56368: LIST
56369: PUSH
56370: EMPTY
56371: LIST
56372: LIST
56373: LIST
56374: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56375: LD_ADDR_VAR 0 20
56379: PUSH
56380: LD_INT 1
56382: PUSH
56383: LD_INT 3
56385: PUSH
56386: EMPTY
56387: LIST
56388: LIST
56389: PUSH
56390: LD_INT 0
56392: PUSH
56393: LD_INT 3
56395: PUSH
56396: EMPTY
56397: LIST
56398: LIST
56399: PUSH
56400: LD_INT 1
56402: NEG
56403: PUSH
56404: LD_INT 2
56406: PUSH
56407: EMPTY
56408: LIST
56409: LIST
56410: PUSH
56411: EMPTY
56412: LIST
56413: LIST
56414: LIST
56415: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56416: LD_ADDR_VAR 0 21
56420: PUSH
56421: LD_INT 2
56423: NEG
56424: PUSH
56425: LD_INT 1
56427: PUSH
56428: EMPTY
56429: LIST
56430: LIST
56431: PUSH
56432: LD_INT 3
56434: NEG
56435: PUSH
56436: LD_INT 0
56438: PUSH
56439: EMPTY
56440: LIST
56441: LIST
56442: PUSH
56443: LD_INT 3
56445: NEG
56446: PUSH
56447: LD_INT 1
56449: NEG
56450: PUSH
56451: EMPTY
56452: LIST
56453: LIST
56454: PUSH
56455: EMPTY
56456: LIST
56457: LIST
56458: LIST
56459: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56460: LD_ADDR_VAR 0 22
56464: PUSH
56465: LD_INT 2
56467: NEG
56468: PUSH
56469: LD_INT 3
56471: NEG
56472: PUSH
56473: EMPTY
56474: LIST
56475: LIST
56476: PUSH
56477: LD_INT 3
56479: NEG
56480: PUSH
56481: LD_INT 2
56483: NEG
56484: PUSH
56485: EMPTY
56486: LIST
56487: LIST
56488: PUSH
56489: LD_INT 3
56491: NEG
56492: PUSH
56493: LD_INT 3
56495: NEG
56496: PUSH
56497: EMPTY
56498: LIST
56499: LIST
56500: PUSH
56501: EMPTY
56502: LIST
56503: LIST
56504: LIST
56505: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
56506: LD_ADDR_VAR 0 23
56510: PUSH
56511: LD_INT 0
56513: PUSH
56514: LD_INT 3
56516: NEG
56517: PUSH
56518: EMPTY
56519: LIST
56520: LIST
56521: PUSH
56522: LD_INT 1
56524: NEG
56525: PUSH
56526: LD_INT 4
56528: NEG
56529: PUSH
56530: EMPTY
56531: LIST
56532: LIST
56533: PUSH
56534: LD_INT 1
56536: PUSH
56537: LD_INT 3
56539: NEG
56540: PUSH
56541: EMPTY
56542: LIST
56543: LIST
56544: PUSH
56545: EMPTY
56546: LIST
56547: LIST
56548: LIST
56549: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
56550: LD_ADDR_VAR 0 24
56554: PUSH
56555: LD_INT 3
56557: PUSH
56558: LD_INT 0
56560: PUSH
56561: EMPTY
56562: LIST
56563: LIST
56564: PUSH
56565: LD_INT 3
56567: PUSH
56568: LD_INT 1
56570: NEG
56571: PUSH
56572: EMPTY
56573: LIST
56574: LIST
56575: PUSH
56576: LD_INT 4
56578: PUSH
56579: LD_INT 1
56581: PUSH
56582: EMPTY
56583: LIST
56584: LIST
56585: PUSH
56586: EMPTY
56587: LIST
56588: LIST
56589: LIST
56590: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
56591: LD_ADDR_VAR 0 25
56595: PUSH
56596: LD_INT 3
56598: PUSH
56599: LD_INT 3
56601: PUSH
56602: EMPTY
56603: LIST
56604: LIST
56605: PUSH
56606: LD_INT 4
56608: PUSH
56609: LD_INT 3
56611: PUSH
56612: EMPTY
56613: LIST
56614: LIST
56615: PUSH
56616: LD_INT 3
56618: PUSH
56619: LD_INT 4
56621: PUSH
56622: EMPTY
56623: LIST
56624: LIST
56625: PUSH
56626: EMPTY
56627: LIST
56628: LIST
56629: LIST
56630: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
56631: LD_ADDR_VAR 0 26
56635: PUSH
56636: LD_INT 0
56638: PUSH
56639: LD_INT 3
56641: PUSH
56642: EMPTY
56643: LIST
56644: LIST
56645: PUSH
56646: LD_INT 1
56648: PUSH
56649: LD_INT 4
56651: PUSH
56652: EMPTY
56653: LIST
56654: LIST
56655: PUSH
56656: LD_INT 1
56658: NEG
56659: PUSH
56660: LD_INT 3
56662: PUSH
56663: EMPTY
56664: LIST
56665: LIST
56666: PUSH
56667: EMPTY
56668: LIST
56669: LIST
56670: LIST
56671: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
56672: LD_ADDR_VAR 0 27
56676: PUSH
56677: LD_INT 3
56679: NEG
56680: PUSH
56681: LD_INT 0
56683: PUSH
56684: EMPTY
56685: LIST
56686: LIST
56687: PUSH
56688: LD_INT 3
56690: NEG
56691: PUSH
56692: LD_INT 1
56694: PUSH
56695: EMPTY
56696: LIST
56697: LIST
56698: PUSH
56699: LD_INT 4
56701: NEG
56702: PUSH
56703: LD_INT 1
56705: NEG
56706: PUSH
56707: EMPTY
56708: LIST
56709: LIST
56710: PUSH
56711: EMPTY
56712: LIST
56713: LIST
56714: LIST
56715: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
56716: LD_ADDR_VAR 0 28
56720: PUSH
56721: LD_INT 3
56723: NEG
56724: PUSH
56725: LD_INT 3
56727: NEG
56728: PUSH
56729: EMPTY
56730: LIST
56731: LIST
56732: PUSH
56733: LD_INT 3
56735: NEG
56736: PUSH
56737: LD_INT 4
56739: NEG
56740: PUSH
56741: EMPTY
56742: LIST
56743: LIST
56744: PUSH
56745: LD_INT 4
56747: NEG
56748: PUSH
56749: LD_INT 3
56751: NEG
56752: PUSH
56753: EMPTY
56754: LIST
56755: LIST
56756: PUSH
56757: EMPTY
56758: LIST
56759: LIST
56760: LIST
56761: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
56762: LD_ADDR_VAR 0 29
56766: PUSH
56767: LD_INT 1
56769: NEG
56770: PUSH
56771: LD_INT 3
56773: NEG
56774: PUSH
56775: EMPTY
56776: LIST
56777: LIST
56778: PUSH
56779: LD_INT 0
56781: PUSH
56782: LD_INT 3
56784: NEG
56785: PUSH
56786: EMPTY
56787: LIST
56788: LIST
56789: PUSH
56790: LD_INT 1
56792: PUSH
56793: LD_INT 2
56795: NEG
56796: PUSH
56797: EMPTY
56798: LIST
56799: LIST
56800: PUSH
56801: LD_INT 1
56803: NEG
56804: PUSH
56805: LD_INT 4
56807: NEG
56808: PUSH
56809: EMPTY
56810: LIST
56811: LIST
56812: PUSH
56813: LD_INT 0
56815: PUSH
56816: LD_INT 4
56818: NEG
56819: PUSH
56820: EMPTY
56821: LIST
56822: LIST
56823: PUSH
56824: LD_INT 1
56826: PUSH
56827: LD_INT 3
56829: NEG
56830: PUSH
56831: EMPTY
56832: LIST
56833: LIST
56834: PUSH
56835: LD_INT 1
56837: NEG
56838: PUSH
56839: LD_INT 5
56841: NEG
56842: PUSH
56843: EMPTY
56844: LIST
56845: LIST
56846: PUSH
56847: LD_INT 0
56849: PUSH
56850: LD_INT 5
56852: NEG
56853: PUSH
56854: EMPTY
56855: LIST
56856: LIST
56857: PUSH
56858: LD_INT 1
56860: PUSH
56861: LD_INT 4
56863: NEG
56864: PUSH
56865: EMPTY
56866: LIST
56867: LIST
56868: PUSH
56869: LD_INT 1
56871: NEG
56872: PUSH
56873: LD_INT 6
56875: NEG
56876: PUSH
56877: EMPTY
56878: LIST
56879: LIST
56880: PUSH
56881: LD_INT 0
56883: PUSH
56884: LD_INT 6
56886: NEG
56887: PUSH
56888: EMPTY
56889: LIST
56890: LIST
56891: PUSH
56892: LD_INT 1
56894: PUSH
56895: LD_INT 5
56897: NEG
56898: PUSH
56899: EMPTY
56900: LIST
56901: LIST
56902: PUSH
56903: EMPTY
56904: LIST
56905: LIST
56906: LIST
56907: LIST
56908: LIST
56909: LIST
56910: LIST
56911: LIST
56912: LIST
56913: LIST
56914: LIST
56915: LIST
56916: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
56917: LD_ADDR_VAR 0 30
56921: PUSH
56922: LD_INT 2
56924: PUSH
56925: LD_INT 1
56927: NEG
56928: PUSH
56929: EMPTY
56930: LIST
56931: LIST
56932: PUSH
56933: LD_INT 3
56935: PUSH
56936: LD_INT 0
56938: PUSH
56939: EMPTY
56940: LIST
56941: LIST
56942: PUSH
56943: LD_INT 3
56945: PUSH
56946: LD_INT 1
56948: PUSH
56949: EMPTY
56950: LIST
56951: LIST
56952: PUSH
56953: LD_INT 3
56955: PUSH
56956: LD_INT 1
56958: NEG
56959: PUSH
56960: EMPTY
56961: LIST
56962: LIST
56963: PUSH
56964: LD_INT 4
56966: PUSH
56967: LD_INT 0
56969: PUSH
56970: EMPTY
56971: LIST
56972: LIST
56973: PUSH
56974: LD_INT 4
56976: PUSH
56977: LD_INT 1
56979: PUSH
56980: EMPTY
56981: LIST
56982: LIST
56983: PUSH
56984: LD_INT 4
56986: PUSH
56987: LD_INT 1
56989: NEG
56990: PUSH
56991: EMPTY
56992: LIST
56993: LIST
56994: PUSH
56995: LD_INT 5
56997: PUSH
56998: LD_INT 0
57000: PUSH
57001: EMPTY
57002: LIST
57003: LIST
57004: PUSH
57005: LD_INT 5
57007: PUSH
57008: LD_INT 1
57010: PUSH
57011: EMPTY
57012: LIST
57013: LIST
57014: PUSH
57015: LD_INT 5
57017: PUSH
57018: LD_INT 1
57020: NEG
57021: PUSH
57022: EMPTY
57023: LIST
57024: LIST
57025: PUSH
57026: LD_INT 6
57028: PUSH
57029: LD_INT 0
57031: PUSH
57032: EMPTY
57033: LIST
57034: LIST
57035: PUSH
57036: LD_INT 6
57038: PUSH
57039: LD_INT 1
57041: PUSH
57042: EMPTY
57043: LIST
57044: LIST
57045: PUSH
57046: EMPTY
57047: LIST
57048: LIST
57049: LIST
57050: LIST
57051: LIST
57052: LIST
57053: LIST
57054: LIST
57055: LIST
57056: LIST
57057: LIST
57058: LIST
57059: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
57060: LD_ADDR_VAR 0 31
57064: PUSH
57065: LD_INT 3
57067: PUSH
57068: LD_INT 2
57070: PUSH
57071: EMPTY
57072: LIST
57073: LIST
57074: PUSH
57075: LD_INT 3
57077: PUSH
57078: LD_INT 3
57080: PUSH
57081: EMPTY
57082: LIST
57083: LIST
57084: PUSH
57085: LD_INT 2
57087: PUSH
57088: LD_INT 3
57090: PUSH
57091: EMPTY
57092: LIST
57093: LIST
57094: PUSH
57095: LD_INT 4
57097: PUSH
57098: LD_INT 3
57100: PUSH
57101: EMPTY
57102: LIST
57103: LIST
57104: PUSH
57105: LD_INT 4
57107: PUSH
57108: LD_INT 4
57110: PUSH
57111: EMPTY
57112: LIST
57113: LIST
57114: PUSH
57115: LD_INT 3
57117: PUSH
57118: LD_INT 4
57120: PUSH
57121: EMPTY
57122: LIST
57123: LIST
57124: PUSH
57125: LD_INT 5
57127: PUSH
57128: LD_INT 4
57130: PUSH
57131: EMPTY
57132: LIST
57133: LIST
57134: PUSH
57135: LD_INT 5
57137: PUSH
57138: LD_INT 5
57140: PUSH
57141: EMPTY
57142: LIST
57143: LIST
57144: PUSH
57145: LD_INT 4
57147: PUSH
57148: LD_INT 5
57150: PUSH
57151: EMPTY
57152: LIST
57153: LIST
57154: PUSH
57155: LD_INT 6
57157: PUSH
57158: LD_INT 5
57160: PUSH
57161: EMPTY
57162: LIST
57163: LIST
57164: PUSH
57165: LD_INT 6
57167: PUSH
57168: LD_INT 6
57170: PUSH
57171: EMPTY
57172: LIST
57173: LIST
57174: PUSH
57175: LD_INT 5
57177: PUSH
57178: LD_INT 6
57180: PUSH
57181: EMPTY
57182: LIST
57183: LIST
57184: PUSH
57185: EMPTY
57186: LIST
57187: LIST
57188: LIST
57189: LIST
57190: LIST
57191: LIST
57192: LIST
57193: LIST
57194: LIST
57195: LIST
57196: LIST
57197: LIST
57198: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
57199: LD_ADDR_VAR 0 32
57203: PUSH
57204: LD_INT 1
57206: PUSH
57207: LD_INT 3
57209: PUSH
57210: EMPTY
57211: LIST
57212: LIST
57213: PUSH
57214: LD_INT 0
57216: PUSH
57217: LD_INT 3
57219: PUSH
57220: EMPTY
57221: LIST
57222: LIST
57223: PUSH
57224: LD_INT 1
57226: NEG
57227: PUSH
57228: LD_INT 2
57230: PUSH
57231: EMPTY
57232: LIST
57233: LIST
57234: PUSH
57235: LD_INT 1
57237: PUSH
57238: LD_INT 4
57240: PUSH
57241: EMPTY
57242: LIST
57243: LIST
57244: PUSH
57245: LD_INT 0
57247: PUSH
57248: LD_INT 4
57250: PUSH
57251: EMPTY
57252: LIST
57253: LIST
57254: PUSH
57255: LD_INT 1
57257: NEG
57258: PUSH
57259: LD_INT 3
57261: PUSH
57262: EMPTY
57263: LIST
57264: LIST
57265: PUSH
57266: LD_INT 1
57268: PUSH
57269: LD_INT 5
57271: PUSH
57272: EMPTY
57273: LIST
57274: LIST
57275: PUSH
57276: LD_INT 0
57278: PUSH
57279: LD_INT 5
57281: PUSH
57282: EMPTY
57283: LIST
57284: LIST
57285: PUSH
57286: LD_INT 1
57288: NEG
57289: PUSH
57290: LD_INT 4
57292: PUSH
57293: EMPTY
57294: LIST
57295: LIST
57296: PUSH
57297: LD_INT 1
57299: PUSH
57300: LD_INT 6
57302: PUSH
57303: EMPTY
57304: LIST
57305: LIST
57306: PUSH
57307: LD_INT 0
57309: PUSH
57310: LD_INT 6
57312: PUSH
57313: EMPTY
57314: LIST
57315: LIST
57316: PUSH
57317: LD_INT 1
57319: NEG
57320: PUSH
57321: LD_INT 5
57323: PUSH
57324: EMPTY
57325: LIST
57326: LIST
57327: PUSH
57328: EMPTY
57329: LIST
57330: LIST
57331: LIST
57332: LIST
57333: LIST
57334: LIST
57335: LIST
57336: LIST
57337: LIST
57338: LIST
57339: LIST
57340: LIST
57341: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
57342: LD_ADDR_VAR 0 33
57346: PUSH
57347: LD_INT 2
57349: NEG
57350: PUSH
57351: LD_INT 1
57353: PUSH
57354: EMPTY
57355: LIST
57356: LIST
57357: PUSH
57358: LD_INT 3
57360: NEG
57361: PUSH
57362: LD_INT 0
57364: PUSH
57365: EMPTY
57366: LIST
57367: LIST
57368: PUSH
57369: LD_INT 3
57371: NEG
57372: PUSH
57373: LD_INT 1
57375: NEG
57376: PUSH
57377: EMPTY
57378: LIST
57379: LIST
57380: PUSH
57381: LD_INT 3
57383: NEG
57384: PUSH
57385: LD_INT 1
57387: PUSH
57388: EMPTY
57389: LIST
57390: LIST
57391: PUSH
57392: LD_INT 4
57394: NEG
57395: PUSH
57396: LD_INT 0
57398: PUSH
57399: EMPTY
57400: LIST
57401: LIST
57402: PUSH
57403: LD_INT 4
57405: NEG
57406: PUSH
57407: LD_INT 1
57409: NEG
57410: PUSH
57411: EMPTY
57412: LIST
57413: LIST
57414: PUSH
57415: LD_INT 4
57417: NEG
57418: PUSH
57419: LD_INT 1
57421: PUSH
57422: EMPTY
57423: LIST
57424: LIST
57425: PUSH
57426: LD_INT 5
57428: NEG
57429: PUSH
57430: LD_INT 0
57432: PUSH
57433: EMPTY
57434: LIST
57435: LIST
57436: PUSH
57437: LD_INT 5
57439: NEG
57440: PUSH
57441: LD_INT 1
57443: NEG
57444: PUSH
57445: EMPTY
57446: LIST
57447: LIST
57448: PUSH
57449: LD_INT 5
57451: NEG
57452: PUSH
57453: LD_INT 1
57455: PUSH
57456: EMPTY
57457: LIST
57458: LIST
57459: PUSH
57460: LD_INT 6
57462: NEG
57463: PUSH
57464: LD_INT 0
57466: PUSH
57467: EMPTY
57468: LIST
57469: LIST
57470: PUSH
57471: LD_INT 6
57473: NEG
57474: PUSH
57475: LD_INT 1
57477: NEG
57478: PUSH
57479: EMPTY
57480: LIST
57481: LIST
57482: PUSH
57483: EMPTY
57484: LIST
57485: LIST
57486: LIST
57487: LIST
57488: LIST
57489: LIST
57490: LIST
57491: LIST
57492: LIST
57493: LIST
57494: LIST
57495: LIST
57496: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
57497: LD_ADDR_VAR 0 34
57501: PUSH
57502: LD_INT 2
57504: NEG
57505: PUSH
57506: LD_INT 3
57508: NEG
57509: PUSH
57510: EMPTY
57511: LIST
57512: LIST
57513: PUSH
57514: LD_INT 3
57516: NEG
57517: PUSH
57518: LD_INT 2
57520: NEG
57521: PUSH
57522: EMPTY
57523: LIST
57524: LIST
57525: PUSH
57526: LD_INT 3
57528: NEG
57529: PUSH
57530: LD_INT 3
57532: NEG
57533: PUSH
57534: EMPTY
57535: LIST
57536: LIST
57537: PUSH
57538: LD_INT 3
57540: NEG
57541: PUSH
57542: LD_INT 4
57544: NEG
57545: PUSH
57546: EMPTY
57547: LIST
57548: LIST
57549: PUSH
57550: LD_INT 4
57552: NEG
57553: PUSH
57554: LD_INT 3
57556: NEG
57557: PUSH
57558: EMPTY
57559: LIST
57560: LIST
57561: PUSH
57562: LD_INT 4
57564: NEG
57565: PUSH
57566: LD_INT 4
57568: NEG
57569: PUSH
57570: EMPTY
57571: LIST
57572: LIST
57573: PUSH
57574: LD_INT 4
57576: NEG
57577: PUSH
57578: LD_INT 5
57580: NEG
57581: PUSH
57582: EMPTY
57583: LIST
57584: LIST
57585: PUSH
57586: LD_INT 5
57588: NEG
57589: PUSH
57590: LD_INT 4
57592: NEG
57593: PUSH
57594: EMPTY
57595: LIST
57596: LIST
57597: PUSH
57598: LD_INT 5
57600: NEG
57601: PUSH
57602: LD_INT 5
57604: NEG
57605: PUSH
57606: EMPTY
57607: LIST
57608: LIST
57609: PUSH
57610: LD_INT 5
57612: NEG
57613: PUSH
57614: LD_INT 6
57616: NEG
57617: PUSH
57618: EMPTY
57619: LIST
57620: LIST
57621: PUSH
57622: LD_INT 6
57624: NEG
57625: PUSH
57626: LD_INT 5
57628: NEG
57629: PUSH
57630: EMPTY
57631: LIST
57632: LIST
57633: PUSH
57634: LD_INT 6
57636: NEG
57637: PUSH
57638: LD_INT 6
57640: NEG
57641: PUSH
57642: EMPTY
57643: LIST
57644: LIST
57645: PUSH
57646: EMPTY
57647: LIST
57648: LIST
57649: LIST
57650: LIST
57651: LIST
57652: LIST
57653: LIST
57654: LIST
57655: LIST
57656: LIST
57657: LIST
57658: LIST
57659: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
57660: LD_ADDR_VAR 0 41
57664: PUSH
57665: LD_INT 0
57667: PUSH
57668: LD_INT 2
57670: NEG
57671: PUSH
57672: EMPTY
57673: LIST
57674: LIST
57675: PUSH
57676: LD_INT 1
57678: NEG
57679: PUSH
57680: LD_INT 3
57682: NEG
57683: PUSH
57684: EMPTY
57685: LIST
57686: LIST
57687: PUSH
57688: LD_INT 1
57690: PUSH
57691: LD_INT 2
57693: NEG
57694: PUSH
57695: EMPTY
57696: LIST
57697: LIST
57698: PUSH
57699: EMPTY
57700: LIST
57701: LIST
57702: LIST
57703: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
57704: LD_ADDR_VAR 0 42
57708: PUSH
57709: LD_INT 2
57711: PUSH
57712: LD_INT 0
57714: PUSH
57715: EMPTY
57716: LIST
57717: LIST
57718: PUSH
57719: LD_INT 2
57721: PUSH
57722: LD_INT 1
57724: NEG
57725: PUSH
57726: EMPTY
57727: LIST
57728: LIST
57729: PUSH
57730: LD_INT 3
57732: PUSH
57733: LD_INT 1
57735: PUSH
57736: EMPTY
57737: LIST
57738: LIST
57739: PUSH
57740: EMPTY
57741: LIST
57742: LIST
57743: LIST
57744: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
57745: LD_ADDR_VAR 0 43
57749: PUSH
57750: LD_INT 2
57752: PUSH
57753: LD_INT 2
57755: PUSH
57756: EMPTY
57757: LIST
57758: LIST
57759: PUSH
57760: LD_INT 3
57762: PUSH
57763: LD_INT 2
57765: PUSH
57766: EMPTY
57767: LIST
57768: LIST
57769: PUSH
57770: LD_INT 2
57772: PUSH
57773: LD_INT 3
57775: PUSH
57776: EMPTY
57777: LIST
57778: LIST
57779: PUSH
57780: EMPTY
57781: LIST
57782: LIST
57783: LIST
57784: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
57785: LD_ADDR_VAR 0 44
57789: PUSH
57790: LD_INT 0
57792: PUSH
57793: LD_INT 2
57795: PUSH
57796: EMPTY
57797: LIST
57798: LIST
57799: PUSH
57800: LD_INT 1
57802: PUSH
57803: LD_INT 3
57805: PUSH
57806: EMPTY
57807: LIST
57808: LIST
57809: PUSH
57810: LD_INT 1
57812: NEG
57813: PUSH
57814: LD_INT 2
57816: PUSH
57817: EMPTY
57818: LIST
57819: LIST
57820: PUSH
57821: EMPTY
57822: LIST
57823: LIST
57824: LIST
57825: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57826: LD_ADDR_VAR 0 45
57830: PUSH
57831: LD_INT 2
57833: NEG
57834: PUSH
57835: LD_INT 0
57837: PUSH
57838: EMPTY
57839: LIST
57840: LIST
57841: PUSH
57842: LD_INT 2
57844: NEG
57845: PUSH
57846: LD_INT 1
57848: PUSH
57849: EMPTY
57850: LIST
57851: LIST
57852: PUSH
57853: LD_INT 3
57855: NEG
57856: PUSH
57857: LD_INT 1
57859: NEG
57860: PUSH
57861: EMPTY
57862: LIST
57863: LIST
57864: PUSH
57865: EMPTY
57866: LIST
57867: LIST
57868: LIST
57869: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
57870: LD_ADDR_VAR 0 46
57874: PUSH
57875: LD_INT 2
57877: NEG
57878: PUSH
57879: LD_INT 2
57881: NEG
57882: PUSH
57883: EMPTY
57884: LIST
57885: LIST
57886: PUSH
57887: LD_INT 2
57889: NEG
57890: PUSH
57891: LD_INT 3
57893: NEG
57894: PUSH
57895: EMPTY
57896: LIST
57897: LIST
57898: PUSH
57899: LD_INT 3
57901: NEG
57902: PUSH
57903: LD_INT 2
57905: NEG
57906: PUSH
57907: EMPTY
57908: LIST
57909: LIST
57910: PUSH
57911: EMPTY
57912: LIST
57913: LIST
57914: LIST
57915: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
57916: LD_ADDR_VAR 0 47
57920: PUSH
57921: LD_INT 2
57923: NEG
57924: PUSH
57925: LD_INT 3
57927: NEG
57928: PUSH
57929: EMPTY
57930: LIST
57931: LIST
57932: PUSH
57933: LD_INT 1
57935: NEG
57936: PUSH
57937: LD_INT 3
57939: NEG
57940: PUSH
57941: EMPTY
57942: LIST
57943: LIST
57944: PUSH
57945: EMPTY
57946: LIST
57947: LIST
57948: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
57949: LD_ADDR_VAR 0 48
57953: PUSH
57954: LD_INT 1
57956: PUSH
57957: LD_INT 2
57959: NEG
57960: PUSH
57961: EMPTY
57962: LIST
57963: LIST
57964: PUSH
57965: LD_INT 2
57967: PUSH
57968: LD_INT 1
57970: NEG
57971: PUSH
57972: EMPTY
57973: LIST
57974: LIST
57975: PUSH
57976: EMPTY
57977: LIST
57978: LIST
57979: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
57980: LD_ADDR_VAR 0 49
57984: PUSH
57985: LD_INT 3
57987: PUSH
57988: LD_INT 1
57990: PUSH
57991: EMPTY
57992: LIST
57993: LIST
57994: PUSH
57995: LD_INT 3
57997: PUSH
57998: LD_INT 2
58000: PUSH
58001: EMPTY
58002: LIST
58003: LIST
58004: PUSH
58005: EMPTY
58006: LIST
58007: LIST
58008: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
58009: LD_ADDR_VAR 0 50
58013: PUSH
58014: LD_INT 2
58016: PUSH
58017: LD_INT 3
58019: PUSH
58020: EMPTY
58021: LIST
58022: LIST
58023: PUSH
58024: LD_INT 1
58026: PUSH
58027: LD_INT 3
58029: PUSH
58030: EMPTY
58031: LIST
58032: LIST
58033: PUSH
58034: EMPTY
58035: LIST
58036: LIST
58037: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
58038: LD_ADDR_VAR 0 51
58042: PUSH
58043: LD_INT 1
58045: NEG
58046: PUSH
58047: LD_INT 2
58049: PUSH
58050: EMPTY
58051: LIST
58052: LIST
58053: PUSH
58054: LD_INT 2
58056: NEG
58057: PUSH
58058: LD_INT 1
58060: PUSH
58061: EMPTY
58062: LIST
58063: LIST
58064: PUSH
58065: EMPTY
58066: LIST
58067: LIST
58068: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58069: LD_ADDR_VAR 0 52
58073: PUSH
58074: LD_INT 3
58076: NEG
58077: PUSH
58078: LD_INT 1
58080: NEG
58081: PUSH
58082: EMPTY
58083: LIST
58084: LIST
58085: PUSH
58086: LD_INT 3
58088: NEG
58089: PUSH
58090: LD_INT 2
58092: NEG
58093: PUSH
58094: EMPTY
58095: LIST
58096: LIST
58097: PUSH
58098: EMPTY
58099: LIST
58100: LIST
58101: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58102: LD_ADDR_VAR 0 53
58106: PUSH
58107: LD_INT 1
58109: NEG
58110: PUSH
58111: LD_INT 3
58113: NEG
58114: PUSH
58115: EMPTY
58116: LIST
58117: LIST
58118: PUSH
58119: LD_INT 0
58121: PUSH
58122: LD_INT 3
58124: NEG
58125: PUSH
58126: EMPTY
58127: LIST
58128: LIST
58129: PUSH
58130: LD_INT 1
58132: PUSH
58133: LD_INT 2
58135: NEG
58136: PUSH
58137: EMPTY
58138: LIST
58139: LIST
58140: PUSH
58141: EMPTY
58142: LIST
58143: LIST
58144: LIST
58145: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58146: LD_ADDR_VAR 0 54
58150: PUSH
58151: LD_INT 2
58153: PUSH
58154: LD_INT 1
58156: NEG
58157: PUSH
58158: EMPTY
58159: LIST
58160: LIST
58161: PUSH
58162: LD_INT 3
58164: PUSH
58165: LD_INT 0
58167: PUSH
58168: EMPTY
58169: LIST
58170: LIST
58171: PUSH
58172: LD_INT 3
58174: PUSH
58175: LD_INT 1
58177: PUSH
58178: EMPTY
58179: LIST
58180: LIST
58181: PUSH
58182: EMPTY
58183: LIST
58184: LIST
58185: LIST
58186: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58187: LD_ADDR_VAR 0 55
58191: PUSH
58192: LD_INT 3
58194: PUSH
58195: LD_INT 2
58197: PUSH
58198: EMPTY
58199: LIST
58200: LIST
58201: PUSH
58202: LD_INT 3
58204: PUSH
58205: LD_INT 3
58207: PUSH
58208: EMPTY
58209: LIST
58210: LIST
58211: PUSH
58212: LD_INT 2
58214: PUSH
58215: LD_INT 3
58217: PUSH
58218: EMPTY
58219: LIST
58220: LIST
58221: PUSH
58222: EMPTY
58223: LIST
58224: LIST
58225: LIST
58226: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58227: LD_ADDR_VAR 0 56
58231: PUSH
58232: LD_INT 1
58234: PUSH
58235: LD_INT 3
58237: PUSH
58238: EMPTY
58239: LIST
58240: LIST
58241: PUSH
58242: LD_INT 0
58244: PUSH
58245: LD_INT 3
58247: PUSH
58248: EMPTY
58249: LIST
58250: LIST
58251: PUSH
58252: LD_INT 1
58254: NEG
58255: PUSH
58256: LD_INT 2
58258: PUSH
58259: EMPTY
58260: LIST
58261: LIST
58262: PUSH
58263: EMPTY
58264: LIST
58265: LIST
58266: LIST
58267: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58268: LD_ADDR_VAR 0 57
58272: PUSH
58273: LD_INT 2
58275: NEG
58276: PUSH
58277: LD_INT 1
58279: PUSH
58280: EMPTY
58281: LIST
58282: LIST
58283: PUSH
58284: LD_INT 3
58286: NEG
58287: PUSH
58288: LD_INT 0
58290: PUSH
58291: EMPTY
58292: LIST
58293: LIST
58294: PUSH
58295: LD_INT 3
58297: NEG
58298: PUSH
58299: LD_INT 1
58301: NEG
58302: PUSH
58303: EMPTY
58304: LIST
58305: LIST
58306: PUSH
58307: EMPTY
58308: LIST
58309: LIST
58310: LIST
58311: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58312: LD_ADDR_VAR 0 58
58316: PUSH
58317: LD_INT 2
58319: NEG
58320: PUSH
58321: LD_INT 3
58323: NEG
58324: PUSH
58325: EMPTY
58326: LIST
58327: LIST
58328: PUSH
58329: LD_INT 3
58331: NEG
58332: PUSH
58333: LD_INT 2
58335: NEG
58336: PUSH
58337: EMPTY
58338: LIST
58339: LIST
58340: PUSH
58341: LD_INT 3
58343: NEG
58344: PUSH
58345: LD_INT 3
58347: NEG
58348: PUSH
58349: EMPTY
58350: LIST
58351: LIST
58352: PUSH
58353: EMPTY
58354: LIST
58355: LIST
58356: LIST
58357: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
58358: LD_ADDR_VAR 0 59
58362: PUSH
58363: LD_INT 1
58365: NEG
58366: PUSH
58367: LD_INT 2
58369: NEG
58370: PUSH
58371: EMPTY
58372: LIST
58373: LIST
58374: PUSH
58375: LD_INT 0
58377: PUSH
58378: LD_INT 2
58380: NEG
58381: PUSH
58382: EMPTY
58383: LIST
58384: LIST
58385: PUSH
58386: LD_INT 1
58388: PUSH
58389: LD_INT 1
58391: NEG
58392: PUSH
58393: EMPTY
58394: LIST
58395: LIST
58396: PUSH
58397: EMPTY
58398: LIST
58399: LIST
58400: LIST
58401: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
58402: LD_ADDR_VAR 0 60
58406: PUSH
58407: LD_INT 1
58409: PUSH
58410: LD_INT 1
58412: NEG
58413: PUSH
58414: EMPTY
58415: LIST
58416: LIST
58417: PUSH
58418: LD_INT 2
58420: PUSH
58421: LD_INT 0
58423: PUSH
58424: EMPTY
58425: LIST
58426: LIST
58427: PUSH
58428: LD_INT 2
58430: PUSH
58431: LD_INT 1
58433: PUSH
58434: EMPTY
58435: LIST
58436: LIST
58437: PUSH
58438: EMPTY
58439: LIST
58440: LIST
58441: LIST
58442: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
58443: LD_ADDR_VAR 0 61
58447: PUSH
58448: LD_INT 2
58450: PUSH
58451: LD_INT 1
58453: PUSH
58454: EMPTY
58455: LIST
58456: LIST
58457: PUSH
58458: LD_INT 2
58460: PUSH
58461: LD_INT 2
58463: PUSH
58464: EMPTY
58465: LIST
58466: LIST
58467: PUSH
58468: LD_INT 1
58470: PUSH
58471: LD_INT 2
58473: PUSH
58474: EMPTY
58475: LIST
58476: LIST
58477: PUSH
58478: EMPTY
58479: LIST
58480: LIST
58481: LIST
58482: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
58483: LD_ADDR_VAR 0 62
58487: PUSH
58488: LD_INT 1
58490: PUSH
58491: LD_INT 2
58493: PUSH
58494: EMPTY
58495: LIST
58496: LIST
58497: PUSH
58498: LD_INT 0
58500: PUSH
58501: LD_INT 2
58503: PUSH
58504: EMPTY
58505: LIST
58506: LIST
58507: PUSH
58508: LD_INT 1
58510: NEG
58511: PUSH
58512: LD_INT 1
58514: PUSH
58515: EMPTY
58516: LIST
58517: LIST
58518: PUSH
58519: EMPTY
58520: LIST
58521: LIST
58522: LIST
58523: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
58524: LD_ADDR_VAR 0 63
58528: PUSH
58529: LD_INT 1
58531: NEG
58532: PUSH
58533: LD_INT 1
58535: PUSH
58536: EMPTY
58537: LIST
58538: LIST
58539: PUSH
58540: LD_INT 2
58542: NEG
58543: PUSH
58544: LD_INT 0
58546: PUSH
58547: EMPTY
58548: LIST
58549: LIST
58550: PUSH
58551: LD_INT 2
58553: NEG
58554: PUSH
58555: LD_INT 1
58557: NEG
58558: PUSH
58559: EMPTY
58560: LIST
58561: LIST
58562: PUSH
58563: EMPTY
58564: LIST
58565: LIST
58566: LIST
58567: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58568: LD_ADDR_VAR 0 64
58572: PUSH
58573: LD_INT 1
58575: NEG
58576: PUSH
58577: LD_INT 2
58579: NEG
58580: PUSH
58581: EMPTY
58582: LIST
58583: LIST
58584: PUSH
58585: LD_INT 2
58587: NEG
58588: PUSH
58589: LD_INT 1
58591: NEG
58592: PUSH
58593: EMPTY
58594: LIST
58595: LIST
58596: PUSH
58597: LD_INT 2
58599: NEG
58600: PUSH
58601: LD_INT 2
58603: NEG
58604: PUSH
58605: EMPTY
58606: LIST
58607: LIST
58608: PUSH
58609: EMPTY
58610: LIST
58611: LIST
58612: LIST
58613: ST_TO_ADDR
// end ; 2 :
58614: GO 61880
58616: LD_INT 2
58618: DOUBLE
58619: EQUAL
58620: IFTRUE 58624
58622: GO 61879
58624: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
58625: LD_ADDR_VAR 0 29
58629: PUSH
58630: LD_INT 4
58632: PUSH
58633: LD_INT 0
58635: PUSH
58636: EMPTY
58637: LIST
58638: LIST
58639: PUSH
58640: LD_INT 4
58642: PUSH
58643: LD_INT 1
58645: NEG
58646: PUSH
58647: EMPTY
58648: LIST
58649: LIST
58650: PUSH
58651: LD_INT 5
58653: PUSH
58654: LD_INT 0
58656: PUSH
58657: EMPTY
58658: LIST
58659: LIST
58660: PUSH
58661: LD_INT 5
58663: PUSH
58664: LD_INT 1
58666: PUSH
58667: EMPTY
58668: LIST
58669: LIST
58670: PUSH
58671: LD_INT 4
58673: PUSH
58674: LD_INT 1
58676: PUSH
58677: EMPTY
58678: LIST
58679: LIST
58680: PUSH
58681: LD_INT 3
58683: PUSH
58684: LD_INT 0
58686: PUSH
58687: EMPTY
58688: LIST
58689: LIST
58690: PUSH
58691: LD_INT 3
58693: PUSH
58694: LD_INT 1
58696: NEG
58697: PUSH
58698: EMPTY
58699: LIST
58700: LIST
58701: PUSH
58702: LD_INT 3
58704: PUSH
58705: LD_INT 2
58707: NEG
58708: PUSH
58709: EMPTY
58710: LIST
58711: LIST
58712: PUSH
58713: LD_INT 5
58715: PUSH
58716: LD_INT 2
58718: PUSH
58719: EMPTY
58720: LIST
58721: LIST
58722: PUSH
58723: LD_INT 3
58725: PUSH
58726: LD_INT 3
58728: PUSH
58729: EMPTY
58730: LIST
58731: LIST
58732: PUSH
58733: LD_INT 3
58735: PUSH
58736: LD_INT 2
58738: PUSH
58739: EMPTY
58740: LIST
58741: LIST
58742: PUSH
58743: LD_INT 4
58745: PUSH
58746: LD_INT 3
58748: PUSH
58749: EMPTY
58750: LIST
58751: LIST
58752: PUSH
58753: LD_INT 4
58755: PUSH
58756: LD_INT 4
58758: PUSH
58759: EMPTY
58760: LIST
58761: LIST
58762: PUSH
58763: LD_INT 3
58765: PUSH
58766: LD_INT 4
58768: PUSH
58769: EMPTY
58770: LIST
58771: LIST
58772: PUSH
58773: LD_INT 2
58775: PUSH
58776: LD_INT 3
58778: PUSH
58779: EMPTY
58780: LIST
58781: LIST
58782: PUSH
58783: LD_INT 2
58785: PUSH
58786: LD_INT 2
58788: PUSH
58789: EMPTY
58790: LIST
58791: LIST
58792: PUSH
58793: LD_INT 4
58795: PUSH
58796: LD_INT 2
58798: PUSH
58799: EMPTY
58800: LIST
58801: LIST
58802: PUSH
58803: LD_INT 2
58805: PUSH
58806: LD_INT 4
58808: PUSH
58809: EMPTY
58810: LIST
58811: LIST
58812: PUSH
58813: LD_INT 0
58815: PUSH
58816: LD_INT 4
58818: PUSH
58819: EMPTY
58820: LIST
58821: LIST
58822: PUSH
58823: LD_INT 0
58825: PUSH
58826: LD_INT 3
58828: PUSH
58829: EMPTY
58830: LIST
58831: LIST
58832: PUSH
58833: LD_INT 1
58835: PUSH
58836: LD_INT 4
58838: PUSH
58839: EMPTY
58840: LIST
58841: LIST
58842: PUSH
58843: LD_INT 1
58845: PUSH
58846: LD_INT 5
58848: PUSH
58849: EMPTY
58850: LIST
58851: LIST
58852: PUSH
58853: LD_INT 0
58855: PUSH
58856: LD_INT 5
58858: PUSH
58859: EMPTY
58860: LIST
58861: LIST
58862: PUSH
58863: LD_INT 1
58865: NEG
58866: PUSH
58867: LD_INT 4
58869: PUSH
58870: EMPTY
58871: LIST
58872: LIST
58873: PUSH
58874: LD_INT 1
58876: NEG
58877: PUSH
58878: LD_INT 3
58880: PUSH
58881: EMPTY
58882: LIST
58883: LIST
58884: PUSH
58885: LD_INT 2
58887: PUSH
58888: LD_INT 5
58890: PUSH
58891: EMPTY
58892: LIST
58893: LIST
58894: PUSH
58895: LD_INT 2
58897: NEG
58898: PUSH
58899: LD_INT 3
58901: PUSH
58902: EMPTY
58903: LIST
58904: LIST
58905: PUSH
58906: LD_INT 3
58908: NEG
58909: PUSH
58910: LD_INT 0
58912: PUSH
58913: EMPTY
58914: LIST
58915: LIST
58916: PUSH
58917: LD_INT 3
58919: NEG
58920: PUSH
58921: LD_INT 1
58923: NEG
58924: PUSH
58925: EMPTY
58926: LIST
58927: LIST
58928: PUSH
58929: LD_INT 2
58931: NEG
58932: PUSH
58933: LD_INT 0
58935: PUSH
58936: EMPTY
58937: LIST
58938: LIST
58939: PUSH
58940: LD_INT 2
58942: NEG
58943: PUSH
58944: LD_INT 1
58946: PUSH
58947: EMPTY
58948: LIST
58949: LIST
58950: PUSH
58951: LD_INT 3
58953: NEG
58954: PUSH
58955: LD_INT 1
58957: PUSH
58958: EMPTY
58959: LIST
58960: LIST
58961: PUSH
58962: LD_INT 4
58964: NEG
58965: PUSH
58966: LD_INT 0
58968: PUSH
58969: EMPTY
58970: LIST
58971: LIST
58972: PUSH
58973: LD_INT 4
58975: NEG
58976: PUSH
58977: LD_INT 1
58979: NEG
58980: PUSH
58981: EMPTY
58982: LIST
58983: LIST
58984: PUSH
58985: LD_INT 4
58987: NEG
58988: PUSH
58989: LD_INT 2
58991: NEG
58992: PUSH
58993: EMPTY
58994: LIST
58995: LIST
58996: PUSH
58997: LD_INT 2
58999: NEG
59000: PUSH
59001: LD_INT 2
59003: PUSH
59004: EMPTY
59005: LIST
59006: LIST
59007: PUSH
59008: LD_INT 4
59010: NEG
59011: PUSH
59012: LD_INT 4
59014: NEG
59015: PUSH
59016: EMPTY
59017: LIST
59018: LIST
59019: PUSH
59020: LD_INT 4
59022: NEG
59023: PUSH
59024: LD_INT 5
59026: NEG
59027: PUSH
59028: EMPTY
59029: LIST
59030: LIST
59031: PUSH
59032: LD_INT 3
59034: NEG
59035: PUSH
59036: LD_INT 4
59038: NEG
59039: PUSH
59040: EMPTY
59041: LIST
59042: LIST
59043: PUSH
59044: LD_INT 3
59046: NEG
59047: PUSH
59048: LD_INT 3
59050: NEG
59051: PUSH
59052: EMPTY
59053: LIST
59054: LIST
59055: PUSH
59056: LD_INT 4
59058: NEG
59059: PUSH
59060: LD_INT 3
59062: NEG
59063: PUSH
59064: EMPTY
59065: LIST
59066: LIST
59067: PUSH
59068: LD_INT 5
59070: NEG
59071: PUSH
59072: LD_INT 4
59074: NEG
59075: PUSH
59076: EMPTY
59077: LIST
59078: LIST
59079: PUSH
59080: LD_INT 5
59082: NEG
59083: PUSH
59084: LD_INT 5
59086: NEG
59087: PUSH
59088: EMPTY
59089: LIST
59090: LIST
59091: PUSH
59092: LD_INT 3
59094: NEG
59095: PUSH
59096: LD_INT 5
59098: NEG
59099: PUSH
59100: EMPTY
59101: LIST
59102: LIST
59103: PUSH
59104: LD_INT 5
59106: NEG
59107: PUSH
59108: LD_INT 3
59110: NEG
59111: PUSH
59112: EMPTY
59113: LIST
59114: LIST
59115: PUSH
59116: EMPTY
59117: LIST
59118: LIST
59119: LIST
59120: LIST
59121: LIST
59122: LIST
59123: LIST
59124: LIST
59125: LIST
59126: LIST
59127: LIST
59128: LIST
59129: LIST
59130: LIST
59131: LIST
59132: LIST
59133: LIST
59134: LIST
59135: LIST
59136: LIST
59137: LIST
59138: LIST
59139: LIST
59140: LIST
59141: LIST
59142: LIST
59143: LIST
59144: LIST
59145: LIST
59146: LIST
59147: LIST
59148: LIST
59149: LIST
59150: LIST
59151: LIST
59152: LIST
59153: LIST
59154: LIST
59155: LIST
59156: LIST
59157: LIST
59158: LIST
59159: LIST
59160: LIST
59161: LIST
59162: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
59163: LD_ADDR_VAR 0 30
59167: PUSH
59168: LD_INT 4
59170: PUSH
59171: LD_INT 4
59173: PUSH
59174: EMPTY
59175: LIST
59176: LIST
59177: PUSH
59178: LD_INT 4
59180: PUSH
59181: LD_INT 3
59183: PUSH
59184: EMPTY
59185: LIST
59186: LIST
59187: PUSH
59188: LD_INT 5
59190: PUSH
59191: LD_INT 4
59193: PUSH
59194: EMPTY
59195: LIST
59196: LIST
59197: PUSH
59198: LD_INT 5
59200: PUSH
59201: LD_INT 5
59203: PUSH
59204: EMPTY
59205: LIST
59206: LIST
59207: PUSH
59208: LD_INT 4
59210: PUSH
59211: LD_INT 5
59213: PUSH
59214: EMPTY
59215: LIST
59216: LIST
59217: PUSH
59218: LD_INT 3
59220: PUSH
59221: LD_INT 4
59223: PUSH
59224: EMPTY
59225: LIST
59226: LIST
59227: PUSH
59228: LD_INT 3
59230: PUSH
59231: LD_INT 3
59233: PUSH
59234: EMPTY
59235: LIST
59236: LIST
59237: PUSH
59238: LD_INT 5
59240: PUSH
59241: LD_INT 3
59243: PUSH
59244: EMPTY
59245: LIST
59246: LIST
59247: PUSH
59248: LD_INT 3
59250: PUSH
59251: LD_INT 5
59253: PUSH
59254: EMPTY
59255: LIST
59256: LIST
59257: PUSH
59258: LD_INT 0
59260: PUSH
59261: LD_INT 3
59263: PUSH
59264: EMPTY
59265: LIST
59266: LIST
59267: PUSH
59268: LD_INT 0
59270: PUSH
59271: LD_INT 2
59273: PUSH
59274: EMPTY
59275: LIST
59276: LIST
59277: PUSH
59278: LD_INT 1
59280: PUSH
59281: LD_INT 3
59283: PUSH
59284: EMPTY
59285: LIST
59286: LIST
59287: PUSH
59288: LD_INT 1
59290: PUSH
59291: LD_INT 4
59293: PUSH
59294: EMPTY
59295: LIST
59296: LIST
59297: PUSH
59298: LD_INT 0
59300: PUSH
59301: LD_INT 4
59303: PUSH
59304: EMPTY
59305: LIST
59306: LIST
59307: PUSH
59308: LD_INT 1
59310: NEG
59311: PUSH
59312: LD_INT 3
59314: PUSH
59315: EMPTY
59316: LIST
59317: LIST
59318: PUSH
59319: LD_INT 1
59321: NEG
59322: PUSH
59323: LD_INT 2
59325: PUSH
59326: EMPTY
59327: LIST
59328: LIST
59329: PUSH
59330: LD_INT 2
59332: PUSH
59333: LD_INT 4
59335: PUSH
59336: EMPTY
59337: LIST
59338: LIST
59339: PUSH
59340: LD_INT 2
59342: NEG
59343: PUSH
59344: LD_INT 2
59346: PUSH
59347: EMPTY
59348: LIST
59349: LIST
59350: PUSH
59351: LD_INT 4
59353: NEG
59354: PUSH
59355: LD_INT 0
59357: PUSH
59358: EMPTY
59359: LIST
59360: LIST
59361: PUSH
59362: LD_INT 4
59364: NEG
59365: PUSH
59366: LD_INT 1
59368: NEG
59369: PUSH
59370: EMPTY
59371: LIST
59372: LIST
59373: PUSH
59374: LD_INT 3
59376: NEG
59377: PUSH
59378: LD_INT 0
59380: PUSH
59381: EMPTY
59382: LIST
59383: LIST
59384: PUSH
59385: LD_INT 3
59387: NEG
59388: PUSH
59389: LD_INT 1
59391: PUSH
59392: EMPTY
59393: LIST
59394: LIST
59395: PUSH
59396: LD_INT 4
59398: NEG
59399: PUSH
59400: LD_INT 1
59402: PUSH
59403: EMPTY
59404: LIST
59405: LIST
59406: PUSH
59407: LD_INT 5
59409: NEG
59410: PUSH
59411: LD_INT 0
59413: PUSH
59414: EMPTY
59415: LIST
59416: LIST
59417: PUSH
59418: LD_INT 5
59420: NEG
59421: PUSH
59422: LD_INT 1
59424: NEG
59425: PUSH
59426: EMPTY
59427: LIST
59428: LIST
59429: PUSH
59430: LD_INT 5
59432: NEG
59433: PUSH
59434: LD_INT 2
59436: NEG
59437: PUSH
59438: EMPTY
59439: LIST
59440: LIST
59441: PUSH
59442: LD_INT 3
59444: NEG
59445: PUSH
59446: LD_INT 2
59448: PUSH
59449: EMPTY
59450: LIST
59451: LIST
59452: PUSH
59453: LD_INT 3
59455: NEG
59456: PUSH
59457: LD_INT 3
59459: NEG
59460: PUSH
59461: EMPTY
59462: LIST
59463: LIST
59464: PUSH
59465: LD_INT 3
59467: NEG
59468: PUSH
59469: LD_INT 4
59471: NEG
59472: PUSH
59473: EMPTY
59474: LIST
59475: LIST
59476: PUSH
59477: LD_INT 2
59479: NEG
59480: PUSH
59481: LD_INT 3
59483: NEG
59484: PUSH
59485: EMPTY
59486: LIST
59487: LIST
59488: PUSH
59489: LD_INT 2
59491: NEG
59492: PUSH
59493: LD_INT 2
59495: NEG
59496: PUSH
59497: EMPTY
59498: LIST
59499: LIST
59500: PUSH
59501: LD_INT 3
59503: NEG
59504: PUSH
59505: LD_INT 2
59507: NEG
59508: PUSH
59509: EMPTY
59510: LIST
59511: LIST
59512: PUSH
59513: LD_INT 4
59515: NEG
59516: PUSH
59517: LD_INT 3
59519: NEG
59520: PUSH
59521: EMPTY
59522: LIST
59523: LIST
59524: PUSH
59525: LD_INT 4
59527: NEG
59528: PUSH
59529: LD_INT 4
59531: NEG
59532: PUSH
59533: EMPTY
59534: LIST
59535: LIST
59536: PUSH
59537: LD_INT 2
59539: NEG
59540: PUSH
59541: LD_INT 4
59543: NEG
59544: PUSH
59545: EMPTY
59546: LIST
59547: LIST
59548: PUSH
59549: LD_INT 4
59551: NEG
59552: PUSH
59553: LD_INT 2
59555: NEG
59556: PUSH
59557: EMPTY
59558: LIST
59559: LIST
59560: PUSH
59561: LD_INT 0
59563: PUSH
59564: LD_INT 4
59566: NEG
59567: PUSH
59568: EMPTY
59569: LIST
59570: LIST
59571: PUSH
59572: LD_INT 0
59574: PUSH
59575: LD_INT 5
59577: NEG
59578: PUSH
59579: EMPTY
59580: LIST
59581: LIST
59582: PUSH
59583: LD_INT 1
59585: PUSH
59586: LD_INT 4
59588: NEG
59589: PUSH
59590: EMPTY
59591: LIST
59592: LIST
59593: PUSH
59594: LD_INT 1
59596: PUSH
59597: LD_INT 3
59599: NEG
59600: PUSH
59601: EMPTY
59602: LIST
59603: LIST
59604: PUSH
59605: LD_INT 0
59607: PUSH
59608: LD_INT 3
59610: NEG
59611: PUSH
59612: EMPTY
59613: LIST
59614: LIST
59615: PUSH
59616: LD_INT 1
59618: NEG
59619: PUSH
59620: LD_INT 4
59622: NEG
59623: PUSH
59624: EMPTY
59625: LIST
59626: LIST
59627: PUSH
59628: LD_INT 1
59630: NEG
59631: PUSH
59632: LD_INT 5
59634: NEG
59635: PUSH
59636: EMPTY
59637: LIST
59638: LIST
59639: PUSH
59640: LD_INT 2
59642: PUSH
59643: LD_INT 3
59645: NEG
59646: PUSH
59647: EMPTY
59648: LIST
59649: LIST
59650: PUSH
59651: LD_INT 2
59653: NEG
59654: PUSH
59655: LD_INT 5
59657: NEG
59658: PUSH
59659: EMPTY
59660: LIST
59661: LIST
59662: PUSH
59663: EMPTY
59664: LIST
59665: LIST
59666: LIST
59667: LIST
59668: LIST
59669: LIST
59670: LIST
59671: LIST
59672: LIST
59673: LIST
59674: LIST
59675: LIST
59676: LIST
59677: LIST
59678: LIST
59679: LIST
59680: LIST
59681: LIST
59682: LIST
59683: LIST
59684: LIST
59685: LIST
59686: LIST
59687: LIST
59688: LIST
59689: LIST
59690: LIST
59691: LIST
59692: LIST
59693: LIST
59694: LIST
59695: LIST
59696: LIST
59697: LIST
59698: LIST
59699: LIST
59700: LIST
59701: LIST
59702: LIST
59703: LIST
59704: LIST
59705: LIST
59706: LIST
59707: LIST
59708: LIST
59709: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
59710: LD_ADDR_VAR 0 31
59714: PUSH
59715: LD_INT 0
59717: PUSH
59718: LD_INT 4
59720: PUSH
59721: EMPTY
59722: LIST
59723: LIST
59724: PUSH
59725: LD_INT 0
59727: PUSH
59728: LD_INT 3
59730: PUSH
59731: EMPTY
59732: LIST
59733: LIST
59734: PUSH
59735: LD_INT 1
59737: PUSH
59738: LD_INT 4
59740: PUSH
59741: EMPTY
59742: LIST
59743: LIST
59744: PUSH
59745: LD_INT 1
59747: PUSH
59748: LD_INT 5
59750: PUSH
59751: EMPTY
59752: LIST
59753: LIST
59754: PUSH
59755: LD_INT 0
59757: PUSH
59758: LD_INT 5
59760: PUSH
59761: EMPTY
59762: LIST
59763: LIST
59764: PUSH
59765: LD_INT 1
59767: NEG
59768: PUSH
59769: LD_INT 4
59771: PUSH
59772: EMPTY
59773: LIST
59774: LIST
59775: PUSH
59776: LD_INT 1
59778: NEG
59779: PUSH
59780: LD_INT 3
59782: PUSH
59783: EMPTY
59784: LIST
59785: LIST
59786: PUSH
59787: LD_INT 2
59789: PUSH
59790: LD_INT 5
59792: PUSH
59793: EMPTY
59794: LIST
59795: LIST
59796: PUSH
59797: LD_INT 2
59799: NEG
59800: PUSH
59801: LD_INT 3
59803: PUSH
59804: EMPTY
59805: LIST
59806: LIST
59807: PUSH
59808: LD_INT 3
59810: NEG
59811: PUSH
59812: LD_INT 0
59814: PUSH
59815: EMPTY
59816: LIST
59817: LIST
59818: PUSH
59819: LD_INT 3
59821: NEG
59822: PUSH
59823: LD_INT 1
59825: NEG
59826: PUSH
59827: EMPTY
59828: LIST
59829: LIST
59830: PUSH
59831: LD_INT 2
59833: NEG
59834: PUSH
59835: LD_INT 0
59837: PUSH
59838: EMPTY
59839: LIST
59840: LIST
59841: PUSH
59842: LD_INT 2
59844: NEG
59845: PUSH
59846: LD_INT 1
59848: PUSH
59849: EMPTY
59850: LIST
59851: LIST
59852: PUSH
59853: LD_INT 3
59855: NEG
59856: PUSH
59857: LD_INT 1
59859: PUSH
59860: EMPTY
59861: LIST
59862: LIST
59863: PUSH
59864: LD_INT 4
59866: NEG
59867: PUSH
59868: LD_INT 0
59870: PUSH
59871: EMPTY
59872: LIST
59873: LIST
59874: PUSH
59875: LD_INT 4
59877: NEG
59878: PUSH
59879: LD_INT 1
59881: NEG
59882: PUSH
59883: EMPTY
59884: LIST
59885: LIST
59886: PUSH
59887: LD_INT 4
59889: NEG
59890: PUSH
59891: LD_INT 2
59893: NEG
59894: PUSH
59895: EMPTY
59896: LIST
59897: LIST
59898: PUSH
59899: LD_INT 2
59901: NEG
59902: PUSH
59903: LD_INT 2
59905: PUSH
59906: EMPTY
59907: LIST
59908: LIST
59909: PUSH
59910: LD_INT 4
59912: NEG
59913: PUSH
59914: LD_INT 4
59916: NEG
59917: PUSH
59918: EMPTY
59919: LIST
59920: LIST
59921: PUSH
59922: LD_INT 4
59924: NEG
59925: PUSH
59926: LD_INT 5
59928: NEG
59929: PUSH
59930: EMPTY
59931: LIST
59932: LIST
59933: PUSH
59934: LD_INT 3
59936: NEG
59937: PUSH
59938: LD_INT 4
59940: NEG
59941: PUSH
59942: EMPTY
59943: LIST
59944: LIST
59945: PUSH
59946: LD_INT 3
59948: NEG
59949: PUSH
59950: LD_INT 3
59952: NEG
59953: PUSH
59954: EMPTY
59955: LIST
59956: LIST
59957: PUSH
59958: LD_INT 4
59960: NEG
59961: PUSH
59962: LD_INT 3
59964: NEG
59965: PUSH
59966: EMPTY
59967: LIST
59968: LIST
59969: PUSH
59970: LD_INT 5
59972: NEG
59973: PUSH
59974: LD_INT 4
59976: NEG
59977: PUSH
59978: EMPTY
59979: LIST
59980: LIST
59981: PUSH
59982: LD_INT 5
59984: NEG
59985: PUSH
59986: LD_INT 5
59988: NEG
59989: PUSH
59990: EMPTY
59991: LIST
59992: LIST
59993: PUSH
59994: LD_INT 3
59996: NEG
59997: PUSH
59998: LD_INT 5
60000: NEG
60001: PUSH
60002: EMPTY
60003: LIST
60004: LIST
60005: PUSH
60006: LD_INT 5
60008: NEG
60009: PUSH
60010: LD_INT 3
60012: NEG
60013: PUSH
60014: EMPTY
60015: LIST
60016: LIST
60017: PUSH
60018: LD_INT 0
60020: PUSH
60021: LD_INT 3
60023: NEG
60024: PUSH
60025: EMPTY
60026: LIST
60027: LIST
60028: PUSH
60029: LD_INT 0
60031: PUSH
60032: LD_INT 4
60034: NEG
60035: PUSH
60036: EMPTY
60037: LIST
60038: LIST
60039: PUSH
60040: LD_INT 1
60042: PUSH
60043: LD_INT 3
60045: NEG
60046: PUSH
60047: EMPTY
60048: LIST
60049: LIST
60050: PUSH
60051: LD_INT 1
60053: PUSH
60054: LD_INT 2
60056: NEG
60057: PUSH
60058: EMPTY
60059: LIST
60060: LIST
60061: PUSH
60062: LD_INT 0
60064: PUSH
60065: LD_INT 2
60067: NEG
60068: PUSH
60069: EMPTY
60070: LIST
60071: LIST
60072: PUSH
60073: LD_INT 1
60075: NEG
60076: PUSH
60077: LD_INT 3
60079: NEG
60080: PUSH
60081: EMPTY
60082: LIST
60083: LIST
60084: PUSH
60085: LD_INT 1
60087: NEG
60088: PUSH
60089: LD_INT 4
60091: NEG
60092: PUSH
60093: EMPTY
60094: LIST
60095: LIST
60096: PUSH
60097: LD_INT 2
60099: PUSH
60100: LD_INT 2
60102: NEG
60103: PUSH
60104: EMPTY
60105: LIST
60106: LIST
60107: PUSH
60108: LD_INT 2
60110: NEG
60111: PUSH
60112: LD_INT 4
60114: NEG
60115: PUSH
60116: EMPTY
60117: LIST
60118: LIST
60119: PUSH
60120: LD_INT 4
60122: PUSH
60123: LD_INT 0
60125: PUSH
60126: EMPTY
60127: LIST
60128: LIST
60129: PUSH
60130: LD_INT 4
60132: PUSH
60133: LD_INT 1
60135: NEG
60136: PUSH
60137: EMPTY
60138: LIST
60139: LIST
60140: PUSH
60141: LD_INT 5
60143: PUSH
60144: LD_INT 0
60146: PUSH
60147: EMPTY
60148: LIST
60149: LIST
60150: PUSH
60151: LD_INT 5
60153: PUSH
60154: LD_INT 1
60156: PUSH
60157: EMPTY
60158: LIST
60159: LIST
60160: PUSH
60161: LD_INT 4
60163: PUSH
60164: LD_INT 1
60166: PUSH
60167: EMPTY
60168: LIST
60169: LIST
60170: PUSH
60171: LD_INT 3
60173: PUSH
60174: LD_INT 0
60176: PUSH
60177: EMPTY
60178: LIST
60179: LIST
60180: PUSH
60181: LD_INT 3
60183: PUSH
60184: LD_INT 1
60186: NEG
60187: PUSH
60188: EMPTY
60189: LIST
60190: LIST
60191: PUSH
60192: LD_INT 3
60194: PUSH
60195: LD_INT 2
60197: NEG
60198: PUSH
60199: EMPTY
60200: LIST
60201: LIST
60202: PUSH
60203: LD_INT 5
60205: PUSH
60206: LD_INT 2
60208: PUSH
60209: EMPTY
60210: LIST
60211: LIST
60212: PUSH
60213: EMPTY
60214: LIST
60215: LIST
60216: LIST
60217: LIST
60218: LIST
60219: LIST
60220: LIST
60221: LIST
60222: LIST
60223: LIST
60224: LIST
60225: LIST
60226: LIST
60227: LIST
60228: LIST
60229: LIST
60230: LIST
60231: LIST
60232: LIST
60233: LIST
60234: LIST
60235: LIST
60236: LIST
60237: LIST
60238: LIST
60239: LIST
60240: LIST
60241: LIST
60242: LIST
60243: LIST
60244: LIST
60245: LIST
60246: LIST
60247: LIST
60248: LIST
60249: LIST
60250: LIST
60251: LIST
60252: LIST
60253: LIST
60254: LIST
60255: LIST
60256: LIST
60257: LIST
60258: LIST
60259: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
60260: LD_ADDR_VAR 0 32
60264: PUSH
60265: LD_INT 4
60267: NEG
60268: PUSH
60269: LD_INT 0
60271: PUSH
60272: EMPTY
60273: LIST
60274: LIST
60275: PUSH
60276: LD_INT 4
60278: NEG
60279: PUSH
60280: LD_INT 1
60282: NEG
60283: PUSH
60284: EMPTY
60285: LIST
60286: LIST
60287: PUSH
60288: LD_INT 3
60290: NEG
60291: PUSH
60292: LD_INT 0
60294: PUSH
60295: EMPTY
60296: LIST
60297: LIST
60298: PUSH
60299: LD_INT 3
60301: NEG
60302: PUSH
60303: LD_INT 1
60305: PUSH
60306: EMPTY
60307: LIST
60308: LIST
60309: PUSH
60310: LD_INT 4
60312: NEG
60313: PUSH
60314: LD_INT 1
60316: PUSH
60317: EMPTY
60318: LIST
60319: LIST
60320: PUSH
60321: LD_INT 5
60323: NEG
60324: PUSH
60325: LD_INT 0
60327: PUSH
60328: EMPTY
60329: LIST
60330: LIST
60331: PUSH
60332: LD_INT 5
60334: NEG
60335: PUSH
60336: LD_INT 1
60338: NEG
60339: PUSH
60340: EMPTY
60341: LIST
60342: LIST
60343: PUSH
60344: LD_INT 5
60346: NEG
60347: PUSH
60348: LD_INT 2
60350: NEG
60351: PUSH
60352: EMPTY
60353: LIST
60354: LIST
60355: PUSH
60356: LD_INT 3
60358: NEG
60359: PUSH
60360: LD_INT 2
60362: PUSH
60363: EMPTY
60364: LIST
60365: LIST
60366: PUSH
60367: LD_INT 3
60369: NEG
60370: PUSH
60371: LD_INT 3
60373: NEG
60374: PUSH
60375: EMPTY
60376: LIST
60377: LIST
60378: PUSH
60379: LD_INT 3
60381: NEG
60382: PUSH
60383: LD_INT 4
60385: NEG
60386: PUSH
60387: EMPTY
60388: LIST
60389: LIST
60390: PUSH
60391: LD_INT 2
60393: NEG
60394: PUSH
60395: LD_INT 3
60397: NEG
60398: PUSH
60399: EMPTY
60400: LIST
60401: LIST
60402: PUSH
60403: LD_INT 2
60405: NEG
60406: PUSH
60407: LD_INT 2
60409: NEG
60410: PUSH
60411: EMPTY
60412: LIST
60413: LIST
60414: PUSH
60415: LD_INT 3
60417: NEG
60418: PUSH
60419: LD_INT 2
60421: NEG
60422: PUSH
60423: EMPTY
60424: LIST
60425: LIST
60426: PUSH
60427: LD_INT 4
60429: NEG
60430: PUSH
60431: LD_INT 3
60433: NEG
60434: PUSH
60435: EMPTY
60436: LIST
60437: LIST
60438: PUSH
60439: LD_INT 4
60441: NEG
60442: PUSH
60443: LD_INT 4
60445: NEG
60446: PUSH
60447: EMPTY
60448: LIST
60449: LIST
60450: PUSH
60451: LD_INT 2
60453: NEG
60454: PUSH
60455: LD_INT 4
60457: NEG
60458: PUSH
60459: EMPTY
60460: LIST
60461: LIST
60462: PUSH
60463: LD_INT 4
60465: NEG
60466: PUSH
60467: LD_INT 2
60469: NEG
60470: PUSH
60471: EMPTY
60472: LIST
60473: LIST
60474: PUSH
60475: LD_INT 0
60477: PUSH
60478: LD_INT 4
60480: NEG
60481: PUSH
60482: EMPTY
60483: LIST
60484: LIST
60485: PUSH
60486: LD_INT 0
60488: PUSH
60489: LD_INT 5
60491: NEG
60492: PUSH
60493: EMPTY
60494: LIST
60495: LIST
60496: PUSH
60497: LD_INT 1
60499: PUSH
60500: LD_INT 4
60502: NEG
60503: PUSH
60504: EMPTY
60505: LIST
60506: LIST
60507: PUSH
60508: LD_INT 1
60510: PUSH
60511: LD_INT 3
60513: NEG
60514: PUSH
60515: EMPTY
60516: LIST
60517: LIST
60518: PUSH
60519: LD_INT 0
60521: PUSH
60522: LD_INT 3
60524: NEG
60525: PUSH
60526: EMPTY
60527: LIST
60528: LIST
60529: PUSH
60530: LD_INT 1
60532: NEG
60533: PUSH
60534: LD_INT 4
60536: NEG
60537: PUSH
60538: EMPTY
60539: LIST
60540: LIST
60541: PUSH
60542: LD_INT 1
60544: NEG
60545: PUSH
60546: LD_INT 5
60548: NEG
60549: PUSH
60550: EMPTY
60551: LIST
60552: LIST
60553: PUSH
60554: LD_INT 2
60556: PUSH
60557: LD_INT 3
60559: NEG
60560: PUSH
60561: EMPTY
60562: LIST
60563: LIST
60564: PUSH
60565: LD_INT 2
60567: NEG
60568: PUSH
60569: LD_INT 5
60571: NEG
60572: PUSH
60573: EMPTY
60574: LIST
60575: LIST
60576: PUSH
60577: LD_INT 3
60579: PUSH
60580: LD_INT 0
60582: PUSH
60583: EMPTY
60584: LIST
60585: LIST
60586: PUSH
60587: LD_INT 3
60589: PUSH
60590: LD_INT 1
60592: NEG
60593: PUSH
60594: EMPTY
60595: LIST
60596: LIST
60597: PUSH
60598: LD_INT 4
60600: PUSH
60601: LD_INT 0
60603: PUSH
60604: EMPTY
60605: LIST
60606: LIST
60607: PUSH
60608: LD_INT 4
60610: PUSH
60611: LD_INT 1
60613: PUSH
60614: EMPTY
60615: LIST
60616: LIST
60617: PUSH
60618: LD_INT 3
60620: PUSH
60621: LD_INT 1
60623: PUSH
60624: EMPTY
60625: LIST
60626: LIST
60627: PUSH
60628: LD_INT 2
60630: PUSH
60631: LD_INT 0
60633: PUSH
60634: EMPTY
60635: LIST
60636: LIST
60637: PUSH
60638: LD_INT 2
60640: PUSH
60641: LD_INT 1
60643: NEG
60644: PUSH
60645: EMPTY
60646: LIST
60647: LIST
60648: PUSH
60649: LD_INT 2
60651: PUSH
60652: LD_INT 2
60654: NEG
60655: PUSH
60656: EMPTY
60657: LIST
60658: LIST
60659: PUSH
60660: LD_INT 4
60662: PUSH
60663: LD_INT 2
60665: PUSH
60666: EMPTY
60667: LIST
60668: LIST
60669: PUSH
60670: LD_INT 4
60672: PUSH
60673: LD_INT 4
60675: PUSH
60676: EMPTY
60677: LIST
60678: LIST
60679: PUSH
60680: LD_INT 4
60682: PUSH
60683: LD_INT 3
60685: PUSH
60686: EMPTY
60687: LIST
60688: LIST
60689: PUSH
60690: LD_INT 5
60692: PUSH
60693: LD_INT 4
60695: PUSH
60696: EMPTY
60697: LIST
60698: LIST
60699: PUSH
60700: LD_INT 5
60702: PUSH
60703: LD_INT 5
60705: PUSH
60706: EMPTY
60707: LIST
60708: LIST
60709: PUSH
60710: LD_INT 4
60712: PUSH
60713: LD_INT 5
60715: PUSH
60716: EMPTY
60717: LIST
60718: LIST
60719: PUSH
60720: LD_INT 3
60722: PUSH
60723: LD_INT 4
60725: PUSH
60726: EMPTY
60727: LIST
60728: LIST
60729: PUSH
60730: LD_INT 3
60732: PUSH
60733: LD_INT 3
60735: PUSH
60736: EMPTY
60737: LIST
60738: LIST
60739: PUSH
60740: LD_INT 5
60742: PUSH
60743: LD_INT 3
60745: PUSH
60746: EMPTY
60747: LIST
60748: LIST
60749: PUSH
60750: LD_INT 3
60752: PUSH
60753: LD_INT 5
60755: PUSH
60756: EMPTY
60757: LIST
60758: LIST
60759: PUSH
60760: EMPTY
60761: LIST
60762: LIST
60763: LIST
60764: LIST
60765: LIST
60766: LIST
60767: LIST
60768: LIST
60769: LIST
60770: LIST
60771: LIST
60772: LIST
60773: LIST
60774: LIST
60775: LIST
60776: LIST
60777: LIST
60778: LIST
60779: LIST
60780: LIST
60781: LIST
60782: LIST
60783: LIST
60784: LIST
60785: LIST
60786: LIST
60787: LIST
60788: LIST
60789: LIST
60790: LIST
60791: LIST
60792: LIST
60793: LIST
60794: LIST
60795: LIST
60796: LIST
60797: LIST
60798: LIST
60799: LIST
60800: LIST
60801: LIST
60802: LIST
60803: LIST
60804: LIST
60805: LIST
60806: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
60807: LD_ADDR_VAR 0 33
60811: PUSH
60812: LD_INT 4
60814: NEG
60815: PUSH
60816: LD_INT 4
60818: NEG
60819: PUSH
60820: EMPTY
60821: LIST
60822: LIST
60823: PUSH
60824: LD_INT 4
60826: NEG
60827: PUSH
60828: LD_INT 5
60830: NEG
60831: PUSH
60832: EMPTY
60833: LIST
60834: LIST
60835: PUSH
60836: LD_INT 3
60838: NEG
60839: PUSH
60840: LD_INT 4
60842: NEG
60843: PUSH
60844: EMPTY
60845: LIST
60846: LIST
60847: PUSH
60848: LD_INT 3
60850: NEG
60851: PUSH
60852: LD_INT 3
60854: NEG
60855: PUSH
60856: EMPTY
60857: LIST
60858: LIST
60859: PUSH
60860: LD_INT 4
60862: NEG
60863: PUSH
60864: LD_INT 3
60866: NEG
60867: PUSH
60868: EMPTY
60869: LIST
60870: LIST
60871: PUSH
60872: LD_INT 5
60874: NEG
60875: PUSH
60876: LD_INT 4
60878: NEG
60879: PUSH
60880: EMPTY
60881: LIST
60882: LIST
60883: PUSH
60884: LD_INT 5
60886: NEG
60887: PUSH
60888: LD_INT 5
60890: NEG
60891: PUSH
60892: EMPTY
60893: LIST
60894: LIST
60895: PUSH
60896: LD_INT 3
60898: NEG
60899: PUSH
60900: LD_INT 5
60902: NEG
60903: PUSH
60904: EMPTY
60905: LIST
60906: LIST
60907: PUSH
60908: LD_INT 5
60910: NEG
60911: PUSH
60912: LD_INT 3
60914: NEG
60915: PUSH
60916: EMPTY
60917: LIST
60918: LIST
60919: PUSH
60920: LD_INT 0
60922: PUSH
60923: LD_INT 3
60925: NEG
60926: PUSH
60927: EMPTY
60928: LIST
60929: LIST
60930: PUSH
60931: LD_INT 0
60933: PUSH
60934: LD_INT 4
60936: NEG
60937: PUSH
60938: EMPTY
60939: LIST
60940: LIST
60941: PUSH
60942: LD_INT 1
60944: PUSH
60945: LD_INT 3
60947: NEG
60948: PUSH
60949: EMPTY
60950: LIST
60951: LIST
60952: PUSH
60953: LD_INT 1
60955: PUSH
60956: LD_INT 2
60958: NEG
60959: PUSH
60960: EMPTY
60961: LIST
60962: LIST
60963: PUSH
60964: LD_INT 0
60966: PUSH
60967: LD_INT 2
60969: NEG
60970: PUSH
60971: EMPTY
60972: LIST
60973: LIST
60974: PUSH
60975: LD_INT 1
60977: NEG
60978: PUSH
60979: LD_INT 3
60981: NEG
60982: PUSH
60983: EMPTY
60984: LIST
60985: LIST
60986: PUSH
60987: LD_INT 1
60989: NEG
60990: PUSH
60991: LD_INT 4
60993: NEG
60994: PUSH
60995: EMPTY
60996: LIST
60997: LIST
60998: PUSH
60999: LD_INT 2
61001: PUSH
61002: LD_INT 2
61004: NEG
61005: PUSH
61006: EMPTY
61007: LIST
61008: LIST
61009: PUSH
61010: LD_INT 2
61012: NEG
61013: PUSH
61014: LD_INT 4
61016: NEG
61017: PUSH
61018: EMPTY
61019: LIST
61020: LIST
61021: PUSH
61022: LD_INT 4
61024: PUSH
61025: LD_INT 0
61027: PUSH
61028: EMPTY
61029: LIST
61030: LIST
61031: PUSH
61032: LD_INT 4
61034: PUSH
61035: LD_INT 1
61037: NEG
61038: PUSH
61039: EMPTY
61040: LIST
61041: LIST
61042: PUSH
61043: LD_INT 5
61045: PUSH
61046: LD_INT 0
61048: PUSH
61049: EMPTY
61050: LIST
61051: LIST
61052: PUSH
61053: LD_INT 5
61055: PUSH
61056: LD_INT 1
61058: PUSH
61059: EMPTY
61060: LIST
61061: LIST
61062: PUSH
61063: LD_INT 4
61065: PUSH
61066: LD_INT 1
61068: PUSH
61069: EMPTY
61070: LIST
61071: LIST
61072: PUSH
61073: LD_INT 3
61075: PUSH
61076: LD_INT 0
61078: PUSH
61079: EMPTY
61080: LIST
61081: LIST
61082: PUSH
61083: LD_INT 3
61085: PUSH
61086: LD_INT 1
61088: NEG
61089: PUSH
61090: EMPTY
61091: LIST
61092: LIST
61093: PUSH
61094: LD_INT 3
61096: PUSH
61097: LD_INT 2
61099: NEG
61100: PUSH
61101: EMPTY
61102: LIST
61103: LIST
61104: PUSH
61105: LD_INT 5
61107: PUSH
61108: LD_INT 2
61110: PUSH
61111: EMPTY
61112: LIST
61113: LIST
61114: PUSH
61115: LD_INT 3
61117: PUSH
61118: LD_INT 3
61120: PUSH
61121: EMPTY
61122: LIST
61123: LIST
61124: PUSH
61125: LD_INT 3
61127: PUSH
61128: LD_INT 2
61130: PUSH
61131: EMPTY
61132: LIST
61133: LIST
61134: PUSH
61135: LD_INT 4
61137: PUSH
61138: LD_INT 3
61140: PUSH
61141: EMPTY
61142: LIST
61143: LIST
61144: PUSH
61145: LD_INT 4
61147: PUSH
61148: LD_INT 4
61150: PUSH
61151: EMPTY
61152: LIST
61153: LIST
61154: PUSH
61155: LD_INT 3
61157: PUSH
61158: LD_INT 4
61160: PUSH
61161: EMPTY
61162: LIST
61163: LIST
61164: PUSH
61165: LD_INT 2
61167: PUSH
61168: LD_INT 3
61170: PUSH
61171: EMPTY
61172: LIST
61173: LIST
61174: PUSH
61175: LD_INT 2
61177: PUSH
61178: LD_INT 2
61180: PUSH
61181: EMPTY
61182: LIST
61183: LIST
61184: PUSH
61185: LD_INT 4
61187: PUSH
61188: LD_INT 2
61190: PUSH
61191: EMPTY
61192: LIST
61193: LIST
61194: PUSH
61195: LD_INT 2
61197: PUSH
61198: LD_INT 4
61200: PUSH
61201: EMPTY
61202: LIST
61203: LIST
61204: PUSH
61205: LD_INT 0
61207: PUSH
61208: LD_INT 4
61210: PUSH
61211: EMPTY
61212: LIST
61213: LIST
61214: PUSH
61215: LD_INT 0
61217: PUSH
61218: LD_INT 3
61220: PUSH
61221: EMPTY
61222: LIST
61223: LIST
61224: PUSH
61225: LD_INT 1
61227: PUSH
61228: LD_INT 4
61230: PUSH
61231: EMPTY
61232: LIST
61233: LIST
61234: PUSH
61235: LD_INT 1
61237: PUSH
61238: LD_INT 5
61240: PUSH
61241: EMPTY
61242: LIST
61243: LIST
61244: PUSH
61245: LD_INT 0
61247: PUSH
61248: LD_INT 5
61250: PUSH
61251: EMPTY
61252: LIST
61253: LIST
61254: PUSH
61255: LD_INT 1
61257: NEG
61258: PUSH
61259: LD_INT 4
61261: PUSH
61262: EMPTY
61263: LIST
61264: LIST
61265: PUSH
61266: LD_INT 1
61268: NEG
61269: PUSH
61270: LD_INT 3
61272: PUSH
61273: EMPTY
61274: LIST
61275: LIST
61276: PUSH
61277: LD_INT 2
61279: PUSH
61280: LD_INT 5
61282: PUSH
61283: EMPTY
61284: LIST
61285: LIST
61286: PUSH
61287: LD_INT 2
61289: NEG
61290: PUSH
61291: LD_INT 3
61293: PUSH
61294: EMPTY
61295: LIST
61296: LIST
61297: PUSH
61298: EMPTY
61299: LIST
61300: LIST
61301: LIST
61302: LIST
61303: LIST
61304: LIST
61305: LIST
61306: LIST
61307: LIST
61308: LIST
61309: LIST
61310: LIST
61311: LIST
61312: LIST
61313: LIST
61314: LIST
61315: LIST
61316: LIST
61317: LIST
61318: LIST
61319: LIST
61320: LIST
61321: LIST
61322: LIST
61323: LIST
61324: LIST
61325: LIST
61326: LIST
61327: LIST
61328: LIST
61329: LIST
61330: LIST
61331: LIST
61332: LIST
61333: LIST
61334: LIST
61335: LIST
61336: LIST
61337: LIST
61338: LIST
61339: LIST
61340: LIST
61341: LIST
61342: LIST
61343: LIST
61344: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
61345: LD_ADDR_VAR 0 34
61349: PUSH
61350: LD_INT 0
61352: PUSH
61353: LD_INT 4
61355: NEG
61356: PUSH
61357: EMPTY
61358: LIST
61359: LIST
61360: PUSH
61361: LD_INT 0
61363: PUSH
61364: LD_INT 5
61366: NEG
61367: PUSH
61368: EMPTY
61369: LIST
61370: LIST
61371: PUSH
61372: LD_INT 1
61374: PUSH
61375: LD_INT 4
61377: NEG
61378: PUSH
61379: EMPTY
61380: LIST
61381: LIST
61382: PUSH
61383: LD_INT 1
61385: PUSH
61386: LD_INT 3
61388: NEG
61389: PUSH
61390: EMPTY
61391: LIST
61392: LIST
61393: PUSH
61394: LD_INT 0
61396: PUSH
61397: LD_INT 3
61399: NEG
61400: PUSH
61401: EMPTY
61402: LIST
61403: LIST
61404: PUSH
61405: LD_INT 1
61407: NEG
61408: PUSH
61409: LD_INT 4
61411: NEG
61412: PUSH
61413: EMPTY
61414: LIST
61415: LIST
61416: PUSH
61417: LD_INT 1
61419: NEG
61420: PUSH
61421: LD_INT 5
61423: NEG
61424: PUSH
61425: EMPTY
61426: LIST
61427: LIST
61428: PUSH
61429: LD_INT 2
61431: PUSH
61432: LD_INT 3
61434: NEG
61435: PUSH
61436: EMPTY
61437: LIST
61438: LIST
61439: PUSH
61440: LD_INT 2
61442: NEG
61443: PUSH
61444: LD_INT 5
61446: NEG
61447: PUSH
61448: EMPTY
61449: LIST
61450: LIST
61451: PUSH
61452: LD_INT 3
61454: PUSH
61455: LD_INT 0
61457: PUSH
61458: EMPTY
61459: LIST
61460: LIST
61461: PUSH
61462: LD_INT 3
61464: PUSH
61465: LD_INT 1
61467: NEG
61468: PUSH
61469: EMPTY
61470: LIST
61471: LIST
61472: PUSH
61473: LD_INT 4
61475: PUSH
61476: LD_INT 0
61478: PUSH
61479: EMPTY
61480: LIST
61481: LIST
61482: PUSH
61483: LD_INT 4
61485: PUSH
61486: LD_INT 1
61488: PUSH
61489: EMPTY
61490: LIST
61491: LIST
61492: PUSH
61493: LD_INT 3
61495: PUSH
61496: LD_INT 1
61498: PUSH
61499: EMPTY
61500: LIST
61501: LIST
61502: PUSH
61503: LD_INT 2
61505: PUSH
61506: LD_INT 0
61508: PUSH
61509: EMPTY
61510: LIST
61511: LIST
61512: PUSH
61513: LD_INT 2
61515: PUSH
61516: LD_INT 1
61518: NEG
61519: PUSH
61520: EMPTY
61521: LIST
61522: LIST
61523: PUSH
61524: LD_INT 2
61526: PUSH
61527: LD_INT 2
61529: NEG
61530: PUSH
61531: EMPTY
61532: LIST
61533: LIST
61534: PUSH
61535: LD_INT 4
61537: PUSH
61538: LD_INT 2
61540: PUSH
61541: EMPTY
61542: LIST
61543: LIST
61544: PUSH
61545: LD_INT 4
61547: PUSH
61548: LD_INT 4
61550: PUSH
61551: EMPTY
61552: LIST
61553: LIST
61554: PUSH
61555: LD_INT 4
61557: PUSH
61558: LD_INT 3
61560: PUSH
61561: EMPTY
61562: LIST
61563: LIST
61564: PUSH
61565: LD_INT 5
61567: PUSH
61568: LD_INT 4
61570: PUSH
61571: EMPTY
61572: LIST
61573: LIST
61574: PUSH
61575: LD_INT 5
61577: PUSH
61578: LD_INT 5
61580: PUSH
61581: EMPTY
61582: LIST
61583: LIST
61584: PUSH
61585: LD_INT 4
61587: PUSH
61588: LD_INT 5
61590: PUSH
61591: EMPTY
61592: LIST
61593: LIST
61594: PUSH
61595: LD_INT 3
61597: PUSH
61598: LD_INT 4
61600: PUSH
61601: EMPTY
61602: LIST
61603: LIST
61604: PUSH
61605: LD_INT 3
61607: PUSH
61608: LD_INT 3
61610: PUSH
61611: EMPTY
61612: LIST
61613: LIST
61614: PUSH
61615: LD_INT 5
61617: PUSH
61618: LD_INT 3
61620: PUSH
61621: EMPTY
61622: LIST
61623: LIST
61624: PUSH
61625: LD_INT 3
61627: PUSH
61628: LD_INT 5
61630: PUSH
61631: EMPTY
61632: LIST
61633: LIST
61634: PUSH
61635: LD_INT 0
61637: PUSH
61638: LD_INT 3
61640: PUSH
61641: EMPTY
61642: LIST
61643: LIST
61644: PUSH
61645: LD_INT 0
61647: PUSH
61648: LD_INT 2
61650: PUSH
61651: EMPTY
61652: LIST
61653: LIST
61654: PUSH
61655: LD_INT 1
61657: PUSH
61658: LD_INT 3
61660: PUSH
61661: EMPTY
61662: LIST
61663: LIST
61664: PUSH
61665: LD_INT 1
61667: PUSH
61668: LD_INT 4
61670: PUSH
61671: EMPTY
61672: LIST
61673: LIST
61674: PUSH
61675: LD_INT 0
61677: PUSH
61678: LD_INT 4
61680: PUSH
61681: EMPTY
61682: LIST
61683: LIST
61684: PUSH
61685: LD_INT 1
61687: NEG
61688: PUSH
61689: LD_INT 3
61691: PUSH
61692: EMPTY
61693: LIST
61694: LIST
61695: PUSH
61696: LD_INT 1
61698: NEG
61699: PUSH
61700: LD_INT 2
61702: PUSH
61703: EMPTY
61704: LIST
61705: LIST
61706: PUSH
61707: LD_INT 2
61709: PUSH
61710: LD_INT 4
61712: PUSH
61713: EMPTY
61714: LIST
61715: LIST
61716: PUSH
61717: LD_INT 2
61719: NEG
61720: PUSH
61721: LD_INT 2
61723: PUSH
61724: EMPTY
61725: LIST
61726: LIST
61727: PUSH
61728: LD_INT 4
61730: NEG
61731: PUSH
61732: LD_INT 0
61734: PUSH
61735: EMPTY
61736: LIST
61737: LIST
61738: PUSH
61739: LD_INT 4
61741: NEG
61742: PUSH
61743: LD_INT 1
61745: NEG
61746: PUSH
61747: EMPTY
61748: LIST
61749: LIST
61750: PUSH
61751: LD_INT 3
61753: NEG
61754: PUSH
61755: LD_INT 0
61757: PUSH
61758: EMPTY
61759: LIST
61760: LIST
61761: PUSH
61762: LD_INT 3
61764: NEG
61765: PUSH
61766: LD_INT 1
61768: PUSH
61769: EMPTY
61770: LIST
61771: LIST
61772: PUSH
61773: LD_INT 4
61775: NEG
61776: PUSH
61777: LD_INT 1
61779: PUSH
61780: EMPTY
61781: LIST
61782: LIST
61783: PUSH
61784: LD_INT 5
61786: NEG
61787: PUSH
61788: LD_INT 0
61790: PUSH
61791: EMPTY
61792: LIST
61793: LIST
61794: PUSH
61795: LD_INT 5
61797: NEG
61798: PUSH
61799: LD_INT 1
61801: NEG
61802: PUSH
61803: EMPTY
61804: LIST
61805: LIST
61806: PUSH
61807: LD_INT 5
61809: NEG
61810: PUSH
61811: LD_INT 2
61813: NEG
61814: PUSH
61815: EMPTY
61816: LIST
61817: LIST
61818: PUSH
61819: LD_INT 3
61821: NEG
61822: PUSH
61823: LD_INT 2
61825: PUSH
61826: EMPTY
61827: LIST
61828: LIST
61829: PUSH
61830: EMPTY
61831: LIST
61832: LIST
61833: LIST
61834: LIST
61835: LIST
61836: LIST
61837: LIST
61838: LIST
61839: LIST
61840: LIST
61841: LIST
61842: LIST
61843: LIST
61844: LIST
61845: LIST
61846: LIST
61847: LIST
61848: LIST
61849: LIST
61850: LIST
61851: LIST
61852: LIST
61853: LIST
61854: LIST
61855: LIST
61856: LIST
61857: LIST
61858: LIST
61859: LIST
61860: LIST
61861: LIST
61862: LIST
61863: LIST
61864: LIST
61865: LIST
61866: LIST
61867: LIST
61868: LIST
61869: LIST
61870: LIST
61871: LIST
61872: LIST
61873: LIST
61874: LIST
61875: LIST
61876: ST_TO_ADDR
// end ; end ;
61877: GO 61880
61879: POP
// case btype of b_depot , b_warehouse :
61880: LD_VAR 0 1
61884: PUSH
61885: LD_INT 0
61887: DOUBLE
61888: EQUAL
61889: IFTRUE 61899
61891: LD_INT 1
61893: DOUBLE
61894: EQUAL
61895: IFTRUE 61899
61897: GO 62100
61899: POP
// case nation of nation_american :
61900: LD_VAR 0 5
61904: PUSH
61905: LD_INT 1
61907: DOUBLE
61908: EQUAL
61909: IFTRUE 61913
61911: GO 61969
61913: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
61914: LD_ADDR_VAR 0 9
61918: PUSH
61919: LD_VAR 0 11
61923: PUSH
61924: LD_VAR 0 12
61928: PUSH
61929: LD_VAR 0 13
61933: PUSH
61934: LD_VAR 0 14
61938: PUSH
61939: LD_VAR 0 15
61943: PUSH
61944: LD_VAR 0 16
61948: PUSH
61949: EMPTY
61950: LIST
61951: LIST
61952: LIST
61953: LIST
61954: LIST
61955: LIST
61956: PUSH
61957: LD_VAR 0 4
61961: PUSH
61962: LD_INT 1
61964: PLUS
61965: ARRAY
61966: ST_TO_ADDR
61967: GO 62098
61969: LD_INT 2
61971: DOUBLE
61972: EQUAL
61973: IFTRUE 61977
61975: GO 62033
61977: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
61978: LD_ADDR_VAR 0 9
61982: PUSH
61983: LD_VAR 0 17
61987: PUSH
61988: LD_VAR 0 18
61992: PUSH
61993: LD_VAR 0 19
61997: PUSH
61998: LD_VAR 0 20
62002: PUSH
62003: LD_VAR 0 21
62007: PUSH
62008: LD_VAR 0 22
62012: PUSH
62013: EMPTY
62014: LIST
62015: LIST
62016: LIST
62017: LIST
62018: LIST
62019: LIST
62020: PUSH
62021: LD_VAR 0 4
62025: PUSH
62026: LD_INT 1
62028: PLUS
62029: ARRAY
62030: ST_TO_ADDR
62031: GO 62098
62033: LD_INT 3
62035: DOUBLE
62036: EQUAL
62037: IFTRUE 62041
62039: GO 62097
62041: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
62042: LD_ADDR_VAR 0 9
62046: PUSH
62047: LD_VAR 0 23
62051: PUSH
62052: LD_VAR 0 24
62056: PUSH
62057: LD_VAR 0 25
62061: PUSH
62062: LD_VAR 0 26
62066: PUSH
62067: LD_VAR 0 27
62071: PUSH
62072: LD_VAR 0 28
62076: PUSH
62077: EMPTY
62078: LIST
62079: LIST
62080: LIST
62081: LIST
62082: LIST
62083: LIST
62084: PUSH
62085: LD_VAR 0 4
62089: PUSH
62090: LD_INT 1
62092: PLUS
62093: ARRAY
62094: ST_TO_ADDR
62095: GO 62098
62097: POP
62098: GO 62653
62100: LD_INT 2
62102: DOUBLE
62103: EQUAL
62104: IFTRUE 62114
62106: LD_INT 3
62108: DOUBLE
62109: EQUAL
62110: IFTRUE 62114
62112: GO 62170
62114: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
62115: LD_ADDR_VAR 0 9
62119: PUSH
62120: LD_VAR 0 29
62124: PUSH
62125: LD_VAR 0 30
62129: PUSH
62130: LD_VAR 0 31
62134: PUSH
62135: LD_VAR 0 32
62139: PUSH
62140: LD_VAR 0 33
62144: PUSH
62145: LD_VAR 0 34
62149: PUSH
62150: EMPTY
62151: LIST
62152: LIST
62153: LIST
62154: LIST
62155: LIST
62156: LIST
62157: PUSH
62158: LD_VAR 0 4
62162: PUSH
62163: LD_INT 1
62165: PLUS
62166: ARRAY
62167: ST_TO_ADDR
62168: GO 62653
62170: LD_INT 16
62172: DOUBLE
62173: EQUAL
62174: IFTRUE 62232
62176: LD_INT 17
62178: DOUBLE
62179: EQUAL
62180: IFTRUE 62232
62182: LD_INT 18
62184: DOUBLE
62185: EQUAL
62186: IFTRUE 62232
62188: LD_INT 19
62190: DOUBLE
62191: EQUAL
62192: IFTRUE 62232
62194: LD_INT 22
62196: DOUBLE
62197: EQUAL
62198: IFTRUE 62232
62200: LD_INT 20
62202: DOUBLE
62203: EQUAL
62204: IFTRUE 62232
62206: LD_INT 21
62208: DOUBLE
62209: EQUAL
62210: IFTRUE 62232
62212: LD_INT 23
62214: DOUBLE
62215: EQUAL
62216: IFTRUE 62232
62218: LD_INT 24
62220: DOUBLE
62221: EQUAL
62222: IFTRUE 62232
62224: LD_INT 25
62226: DOUBLE
62227: EQUAL
62228: IFTRUE 62232
62230: GO 62288
62232: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
62233: LD_ADDR_VAR 0 9
62237: PUSH
62238: LD_VAR 0 35
62242: PUSH
62243: LD_VAR 0 36
62247: PUSH
62248: LD_VAR 0 37
62252: PUSH
62253: LD_VAR 0 38
62257: PUSH
62258: LD_VAR 0 39
62262: PUSH
62263: LD_VAR 0 40
62267: PUSH
62268: EMPTY
62269: LIST
62270: LIST
62271: LIST
62272: LIST
62273: LIST
62274: LIST
62275: PUSH
62276: LD_VAR 0 4
62280: PUSH
62281: LD_INT 1
62283: PLUS
62284: ARRAY
62285: ST_TO_ADDR
62286: GO 62653
62288: LD_INT 6
62290: DOUBLE
62291: EQUAL
62292: IFTRUE 62344
62294: LD_INT 7
62296: DOUBLE
62297: EQUAL
62298: IFTRUE 62344
62300: LD_INT 8
62302: DOUBLE
62303: EQUAL
62304: IFTRUE 62344
62306: LD_INT 13
62308: DOUBLE
62309: EQUAL
62310: IFTRUE 62344
62312: LD_INT 12
62314: DOUBLE
62315: EQUAL
62316: IFTRUE 62344
62318: LD_INT 15
62320: DOUBLE
62321: EQUAL
62322: IFTRUE 62344
62324: LD_INT 11
62326: DOUBLE
62327: EQUAL
62328: IFTRUE 62344
62330: LD_INT 14
62332: DOUBLE
62333: EQUAL
62334: IFTRUE 62344
62336: LD_INT 10
62338: DOUBLE
62339: EQUAL
62340: IFTRUE 62344
62342: GO 62400
62344: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
62345: LD_ADDR_VAR 0 9
62349: PUSH
62350: LD_VAR 0 41
62354: PUSH
62355: LD_VAR 0 42
62359: PUSH
62360: LD_VAR 0 43
62364: PUSH
62365: LD_VAR 0 44
62369: PUSH
62370: LD_VAR 0 45
62374: PUSH
62375: LD_VAR 0 46
62379: PUSH
62380: EMPTY
62381: LIST
62382: LIST
62383: LIST
62384: LIST
62385: LIST
62386: LIST
62387: PUSH
62388: LD_VAR 0 4
62392: PUSH
62393: LD_INT 1
62395: PLUS
62396: ARRAY
62397: ST_TO_ADDR
62398: GO 62653
62400: LD_INT 36
62402: DOUBLE
62403: EQUAL
62404: IFTRUE 62408
62406: GO 62464
62408: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
62409: LD_ADDR_VAR 0 9
62413: PUSH
62414: LD_VAR 0 47
62418: PUSH
62419: LD_VAR 0 48
62423: PUSH
62424: LD_VAR 0 49
62428: PUSH
62429: LD_VAR 0 50
62433: PUSH
62434: LD_VAR 0 51
62438: PUSH
62439: LD_VAR 0 52
62443: PUSH
62444: EMPTY
62445: LIST
62446: LIST
62447: LIST
62448: LIST
62449: LIST
62450: LIST
62451: PUSH
62452: LD_VAR 0 4
62456: PUSH
62457: LD_INT 1
62459: PLUS
62460: ARRAY
62461: ST_TO_ADDR
62462: GO 62653
62464: LD_INT 4
62466: DOUBLE
62467: EQUAL
62468: IFTRUE 62490
62470: LD_INT 5
62472: DOUBLE
62473: EQUAL
62474: IFTRUE 62490
62476: LD_INT 34
62478: DOUBLE
62479: EQUAL
62480: IFTRUE 62490
62482: LD_INT 37
62484: DOUBLE
62485: EQUAL
62486: IFTRUE 62490
62488: GO 62546
62490: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
62491: LD_ADDR_VAR 0 9
62495: PUSH
62496: LD_VAR 0 53
62500: PUSH
62501: LD_VAR 0 54
62505: PUSH
62506: LD_VAR 0 55
62510: PUSH
62511: LD_VAR 0 56
62515: PUSH
62516: LD_VAR 0 57
62520: PUSH
62521: LD_VAR 0 58
62525: PUSH
62526: EMPTY
62527: LIST
62528: LIST
62529: LIST
62530: LIST
62531: LIST
62532: LIST
62533: PUSH
62534: LD_VAR 0 4
62538: PUSH
62539: LD_INT 1
62541: PLUS
62542: ARRAY
62543: ST_TO_ADDR
62544: GO 62653
62546: LD_INT 31
62548: DOUBLE
62549: EQUAL
62550: IFTRUE 62596
62552: LD_INT 32
62554: DOUBLE
62555: EQUAL
62556: IFTRUE 62596
62558: LD_INT 33
62560: DOUBLE
62561: EQUAL
62562: IFTRUE 62596
62564: LD_INT 27
62566: DOUBLE
62567: EQUAL
62568: IFTRUE 62596
62570: LD_INT 26
62572: DOUBLE
62573: EQUAL
62574: IFTRUE 62596
62576: LD_INT 28
62578: DOUBLE
62579: EQUAL
62580: IFTRUE 62596
62582: LD_INT 29
62584: DOUBLE
62585: EQUAL
62586: IFTRUE 62596
62588: LD_INT 30
62590: DOUBLE
62591: EQUAL
62592: IFTRUE 62596
62594: GO 62652
62596: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
62597: LD_ADDR_VAR 0 9
62601: PUSH
62602: LD_VAR 0 59
62606: PUSH
62607: LD_VAR 0 60
62611: PUSH
62612: LD_VAR 0 61
62616: PUSH
62617: LD_VAR 0 62
62621: PUSH
62622: LD_VAR 0 63
62626: PUSH
62627: LD_VAR 0 64
62631: PUSH
62632: EMPTY
62633: LIST
62634: LIST
62635: LIST
62636: LIST
62637: LIST
62638: LIST
62639: PUSH
62640: LD_VAR 0 4
62644: PUSH
62645: LD_INT 1
62647: PLUS
62648: ARRAY
62649: ST_TO_ADDR
62650: GO 62653
62652: POP
// temp_list2 = [ ] ;
62653: LD_ADDR_VAR 0 10
62657: PUSH
62658: EMPTY
62659: ST_TO_ADDR
// for i in temp_list do
62660: LD_ADDR_VAR 0 8
62664: PUSH
62665: LD_VAR 0 9
62669: PUSH
62670: FOR_IN
62671: IFFALSE 62723
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
62673: LD_ADDR_VAR 0 10
62677: PUSH
62678: LD_VAR 0 10
62682: PUSH
62683: LD_VAR 0 8
62687: PUSH
62688: LD_INT 1
62690: ARRAY
62691: PUSH
62692: LD_VAR 0 2
62696: PLUS
62697: PUSH
62698: LD_VAR 0 8
62702: PUSH
62703: LD_INT 2
62705: ARRAY
62706: PUSH
62707: LD_VAR 0 3
62711: PLUS
62712: PUSH
62713: EMPTY
62714: LIST
62715: LIST
62716: PUSH
62717: EMPTY
62718: LIST
62719: ADD
62720: ST_TO_ADDR
62721: GO 62670
62723: POP
62724: POP
// result = temp_list2 ;
62725: LD_ADDR_VAR 0 7
62729: PUSH
62730: LD_VAR 0 10
62734: ST_TO_ADDR
// end ;
62735: LD_VAR 0 7
62739: RET
// export function EnemyInRange ( unit , dist ) ; begin
62740: LD_INT 0
62742: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
62743: LD_ADDR_VAR 0 3
62747: PUSH
62748: LD_VAR 0 1
62752: PPUSH
62753: CALL_OW 255
62757: PPUSH
62758: LD_VAR 0 1
62762: PPUSH
62763: CALL_OW 250
62767: PPUSH
62768: LD_VAR 0 1
62772: PPUSH
62773: CALL_OW 251
62777: PPUSH
62778: LD_VAR 0 2
62782: PPUSH
62783: CALL 36136 0 4
62787: PUSH
62788: LD_INT 4
62790: ARRAY
62791: ST_TO_ADDR
// end ;
62792: LD_VAR 0 3
62796: RET
// export function PlayerSeeMe ( unit ) ; begin
62797: LD_INT 0
62799: PPUSH
// result := See ( your_side , unit ) ;
62800: LD_ADDR_VAR 0 2
62804: PUSH
62805: LD_OWVAR 2
62809: PPUSH
62810: LD_VAR 0 1
62814: PPUSH
62815: CALL_OW 292
62819: ST_TO_ADDR
// end ;
62820: LD_VAR 0 2
62824: RET
// export function ReverseDir ( unit ) ; begin
62825: LD_INT 0
62827: PPUSH
// if not unit then
62828: LD_VAR 0 1
62832: NOT
62833: IFFALSE 62837
// exit ;
62835: GO 62860
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
62837: LD_ADDR_VAR 0 2
62841: PUSH
62842: LD_VAR 0 1
62846: PPUSH
62847: CALL_OW 254
62851: PUSH
62852: LD_INT 3
62854: PLUS
62855: PUSH
62856: LD_INT 6
62858: MOD
62859: ST_TO_ADDR
// end ;
62860: LD_VAR 0 2
62864: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
62865: LD_INT 0
62867: PPUSH
62868: PPUSH
62869: PPUSH
62870: PPUSH
62871: PPUSH
// if not hexes then
62872: LD_VAR 0 2
62876: NOT
62877: IFFALSE 62881
// exit ;
62879: GO 63029
// dist := 9999 ;
62881: LD_ADDR_VAR 0 5
62885: PUSH
62886: LD_INT 9999
62888: ST_TO_ADDR
// for i = 1 to hexes do
62889: LD_ADDR_VAR 0 4
62893: PUSH
62894: DOUBLE
62895: LD_INT 1
62897: DEC
62898: ST_TO_ADDR
62899: LD_VAR 0 2
62903: PUSH
62904: FOR_TO
62905: IFFALSE 63017
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
62907: LD_VAR 0 1
62911: PPUSH
62912: LD_VAR 0 2
62916: PUSH
62917: LD_VAR 0 4
62921: ARRAY
62922: PUSH
62923: LD_INT 1
62925: ARRAY
62926: PPUSH
62927: LD_VAR 0 2
62931: PUSH
62932: LD_VAR 0 4
62936: ARRAY
62937: PUSH
62938: LD_INT 2
62940: ARRAY
62941: PPUSH
62942: CALL_OW 297
62946: PUSH
62947: LD_VAR 0 5
62951: LESS
62952: IFFALSE 63015
// begin hex := hexes [ i ] ;
62954: LD_ADDR_VAR 0 7
62958: PUSH
62959: LD_VAR 0 2
62963: PUSH
62964: LD_VAR 0 4
62968: ARRAY
62969: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
62970: LD_ADDR_VAR 0 5
62974: PUSH
62975: LD_VAR 0 1
62979: PPUSH
62980: LD_VAR 0 2
62984: PUSH
62985: LD_VAR 0 4
62989: ARRAY
62990: PUSH
62991: LD_INT 1
62993: ARRAY
62994: PPUSH
62995: LD_VAR 0 2
62999: PUSH
63000: LD_VAR 0 4
63004: ARRAY
63005: PUSH
63006: LD_INT 2
63008: ARRAY
63009: PPUSH
63010: CALL_OW 297
63014: ST_TO_ADDR
// end ; end ;
63015: GO 62904
63017: POP
63018: POP
// result := hex ;
63019: LD_ADDR_VAR 0 3
63023: PUSH
63024: LD_VAR 0 7
63028: ST_TO_ADDR
// end ;
63029: LD_VAR 0 3
63033: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
63034: LD_INT 0
63036: PPUSH
63037: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
63038: LD_VAR 0 1
63042: NOT
63043: PUSH
63044: LD_VAR 0 1
63048: PUSH
63049: LD_INT 21
63051: PUSH
63052: LD_INT 2
63054: PUSH
63055: EMPTY
63056: LIST
63057: LIST
63058: PUSH
63059: LD_INT 23
63061: PUSH
63062: LD_INT 2
63064: PUSH
63065: EMPTY
63066: LIST
63067: LIST
63068: PUSH
63069: EMPTY
63070: LIST
63071: LIST
63072: PPUSH
63073: CALL_OW 69
63077: IN
63078: NOT
63079: OR
63080: IFFALSE 63084
// exit ;
63082: GO 63131
// for i = 1 to 3 do
63084: LD_ADDR_VAR 0 3
63088: PUSH
63089: DOUBLE
63090: LD_INT 1
63092: DEC
63093: ST_TO_ADDR
63094: LD_INT 3
63096: PUSH
63097: FOR_TO
63098: IFFALSE 63129
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
63100: LD_VAR 0 1
63104: PPUSH
63105: CALL_OW 250
63109: PPUSH
63110: LD_VAR 0 1
63114: PPUSH
63115: CALL_OW 251
63119: PPUSH
63120: LD_INT 1
63122: PPUSH
63123: CALL_OW 453
63127: GO 63097
63129: POP
63130: POP
// end ;
63131: LD_VAR 0 2
63135: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
63136: LD_INT 0
63138: PPUSH
63139: PPUSH
63140: PPUSH
63141: PPUSH
63142: PPUSH
63143: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
63144: LD_VAR 0 1
63148: NOT
63149: PUSH
63150: LD_VAR 0 2
63154: NOT
63155: OR
63156: PUSH
63157: LD_VAR 0 1
63161: PPUSH
63162: CALL_OW 314
63166: OR
63167: IFFALSE 63171
// exit ;
63169: GO 63612
// x := GetX ( enemy_unit ) ;
63171: LD_ADDR_VAR 0 7
63175: PUSH
63176: LD_VAR 0 2
63180: PPUSH
63181: CALL_OW 250
63185: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
63186: LD_ADDR_VAR 0 8
63190: PUSH
63191: LD_VAR 0 2
63195: PPUSH
63196: CALL_OW 251
63200: ST_TO_ADDR
// if not x or not y then
63201: LD_VAR 0 7
63205: NOT
63206: PUSH
63207: LD_VAR 0 8
63211: NOT
63212: OR
63213: IFFALSE 63217
// exit ;
63215: GO 63612
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
63217: LD_ADDR_VAR 0 6
63221: PUSH
63222: LD_VAR 0 7
63226: PPUSH
63227: LD_INT 0
63229: PPUSH
63230: LD_INT 4
63232: PPUSH
63233: CALL_OW 272
63237: PUSH
63238: LD_VAR 0 8
63242: PPUSH
63243: LD_INT 0
63245: PPUSH
63246: LD_INT 4
63248: PPUSH
63249: CALL_OW 273
63253: PUSH
63254: EMPTY
63255: LIST
63256: LIST
63257: PUSH
63258: LD_VAR 0 7
63262: PPUSH
63263: LD_INT 1
63265: PPUSH
63266: LD_INT 4
63268: PPUSH
63269: CALL_OW 272
63273: PUSH
63274: LD_VAR 0 8
63278: PPUSH
63279: LD_INT 1
63281: PPUSH
63282: LD_INT 4
63284: PPUSH
63285: CALL_OW 273
63289: PUSH
63290: EMPTY
63291: LIST
63292: LIST
63293: PUSH
63294: LD_VAR 0 7
63298: PPUSH
63299: LD_INT 2
63301: PPUSH
63302: LD_INT 4
63304: PPUSH
63305: CALL_OW 272
63309: PUSH
63310: LD_VAR 0 8
63314: PPUSH
63315: LD_INT 2
63317: PPUSH
63318: LD_INT 4
63320: PPUSH
63321: CALL_OW 273
63325: PUSH
63326: EMPTY
63327: LIST
63328: LIST
63329: PUSH
63330: LD_VAR 0 7
63334: PPUSH
63335: LD_INT 3
63337: PPUSH
63338: LD_INT 4
63340: PPUSH
63341: CALL_OW 272
63345: PUSH
63346: LD_VAR 0 8
63350: PPUSH
63351: LD_INT 3
63353: PPUSH
63354: LD_INT 4
63356: PPUSH
63357: CALL_OW 273
63361: PUSH
63362: EMPTY
63363: LIST
63364: LIST
63365: PUSH
63366: LD_VAR 0 7
63370: PPUSH
63371: LD_INT 4
63373: PPUSH
63374: LD_INT 4
63376: PPUSH
63377: CALL_OW 272
63381: PUSH
63382: LD_VAR 0 8
63386: PPUSH
63387: LD_INT 4
63389: PPUSH
63390: LD_INT 4
63392: PPUSH
63393: CALL_OW 273
63397: PUSH
63398: EMPTY
63399: LIST
63400: LIST
63401: PUSH
63402: LD_VAR 0 7
63406: PPUSH
63407: LD_INT 5
63409: PPUSH
63410: LD_INT 4
63412: PPUSH
63413: CALL_OW 272
63417: PUSH
63418: LD_VAR 0 8
63422: PPUSH
63423: LD_INT 5
63425: PPUSH
63426: LD_INT 4
63428: PPUSH
63429: CALL_OW 273
63433: PUSH
63434: EMPTY
63435: LIST
63436: LIST
63437: PUSH
63438: EMPTY
63439: LIST
63440: LIST
63441: LIST
63442: LIST
63443: LIST
63444: LIST
63445: ST_TO_ADDR
// for i = tmp downto 1 do
63446: LD_ADDR_VAR 0 4
63450: PUSH
63451: DOUBLE
63452: LD_VAR 0 6
63456: INC
63457: ST_TO_ADDR
63458: LD_INT 1
63460: PUSH
63461: FOR_DOWNTO
63462: IFFALSE 63563
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
63464: LD_VAR 0 6
63468: PUSH
63469: LD_VAR 0 4
63473: ARRAY
63474: PUSH
63475: LD_INT 1
63477: ARRAY
63478: PPUSH
63479: LD_VAR 0 6
63483: PUSH
63484: LD_VAR 0 4
63488: ARRAY
63489: PUSH
63490: LD_INT 2
63492: ARRAY
63493: PPUSH
63494: CALL_OW 488
63498: NOT
63499: PUSH
63500: LD_VAR 0 6
63504: PUSH
63505: LD_VAR 0 4
63509: ARRAY
63510: PUSH
63511: LD_INT 1
63513: ARRAY
63514: PPUSH
63515: LD_VAR 0 6
63519: PUSH
63520: LD_VAR 0 4
63524: ARRAY
63525: PUSH
63526: LD_INT 2
63528: ARRAY
63529: PPUSH
63530: CALL_OW 428
63534: PUSH
63535: LD_INT 0
63537: NONEQUAL
63538: OR
63539: IFFALSE 63561
// tmp := Delete ( tmp , i ) ;
63541: LD_ADDR_VAR 0 6
63545: PUSH
63546: LD_VAR 0 6
63550: PPUSH
63551: LD_VAR 0 4
63555: PPUSH
63556: CALL_OW 3
63560: ST_TO_ADDR
63561: GO 63461
63563: POP
63564: POP
// j := GetClosestHex ( unit , tmp ) ;
63565: LD_ADDR_VAR 0 5
63569: PUSH
63570: LD_VAR 0 1
63574: PPUSH
63575: LD_VAR 0 6
63579: PPUSH
63580: CALL 62865 0 2
63584: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
63585: LD_VAR 0 1
63589: PPUSH
63590: LD_VAR 0 5
63594: PUSH
63595: LD_INT 1
63597: ARRAY
63598: PPUSH
63599: LD_VAR 0 5
63603: PUSH
63604: LD_INT 2
63606: ARRAY
63607: PPUSH
63608: CALL_OW 111
// end ;
63612: LD_VAR 0 3
63616: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
63617: LD_INT 0
63619: PPUSH
63620: PPUSH
63621: PPUSH
// uc_side = 0 ;
63622: LD_ADDR_OWVAR 20
63626: PUSH
63627: LD_INT 0
63629: ST_TO_ADDR
// uc_nation = 0 ;
63630: LD_ADDR_OWVAR 21
63634: PUSH
63635: LD_INT 0
63637: ST_TO_ADDR
// InitHc_All ( ) ;
63638: CALL_OW 584
// InitVc ;
63642: CALL_OW 20
// if mastodonts then
63646: LD_VAR 0 6
63650: IFFALSE 63717
// for i = 1 to mastodonts do
63652: LD_ADDR_VAR 0 11
63656: PUSH
63657: DOUBLE
63658: LD_INT 1
63660: DEC
63661: ST_TO_ADDR
63662: LD_VAR 0 6
63666: PUSH
63667: FOR_TO
63668: IFFALSE 63715
// begin vc_chassis := 31 ;
63670: LD_ADDR_OWVAR 37
63674: PUSH
63675: LD_INT 31
63677: ST_TO_ADDR
// vc_control := control_rider ;
63678: LD_ADDR_OWVAR 38
63682: PUSH
63683: LD_INT 4
63685: ST_TO_ADDR
// animal := CreateVehicle ;
63686: LD_ADDR_VAR 0 12
63690: PUSH
63691: CALL_OW 45
63695: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63696: LD_VAR 0 12
63700: PPUSH
63701: LD_VAR 0 8
63705: PPUSH
63706: LD_INT 0
63708: PPUSH
63709: CALL 65852 0 3
// end ;
63713: GO 63667
63715: POP
63716: POP
// if horses then
63717: LD_VAR 0 5
63721: IFFALSE 63788
// for i = 1 to horses do
63723: LD_ADDR_VAR 0 11
63727: PUSH
63728: DOUBLE
63729: LD_INT 1
63731: DEC
63732: ST_TO_ADDR
63733: LD_VAR 0 5
63737: PUSH
63738: FOR_TO
63739: IFFALSE 63786
// begin hc_class := 21 ;
63741: LD_ADDR_OWVAR 28
63745: PUSH
63746: LD_INT 21
63748: ST_TO_ADDR
// hc_gallery :=  ;
63749: LD_ADDR_OWVAR 33
63753: PUSH
63754: LD_STRING 
63756: ST_TO_ADDR
// animal := CreateHuman ;
63757: LD_ADDR_VAR 0 12
63761: PUSH
63762: CALL_OW 44
63766: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63767: LD_VAR 0 12
63771: PPUSH
63772: LD_VAR 0 8
63776: PPUSH
63777: LD_INT 0
63779: PPUSH
63780: CALL 65852 0 3
// end ;
63784: GO 63738
63786: POP
63787: POP
// if birds then
63788: LD_VAR 0 1
63792: IFFALSE 63859
// for i = 1 to birds do
63794: LD_ADDR_VAR 0 11
63798: PUSH
63799: DOUBLE
63800: LD_INT 1
63802: DEC
63803: ST_TO_ADDR
63804: LD_VAR 0 1
63808: PUSH
63809: FOR_TO
63810: IFFALSE 63857
// begin hc_class = 18 ;
63812: LD_ADDR_OWVAR 28
63816: PUSH
63817: LD_INT 18
63819: ST_TO_ADDR
// hc_gallery =  ;
63820: LD_ADDR_OWVAR 33
63824: PUSH
63825: LD_STRING 
63827: ST_TO_ADDR
// animal := CreateHuman ;
63828: LD_ADDR_VAR 0 12
63832: PUSH
63833: CALL_OW 44
63837: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63838: LD_VAR 0 12
63842: PPUSH
63843: LD_VAR 0 8
63847: PPUSH
63848: LD_INT 0
63850: PPUSH
63851: CALL 65852 0 3
// end ;
63855: GO 63809
63857: POP
63858: POP
// if tigers then
63859: LD_VAR 0 2
63863: IFFALSE 63947
// for i = 1 to tigers do
63865: LD_ADDR_VAR 0 11
63869: PUSH
63870: DOUBLE
63871: LD_INT 1
63873: DEC
63874: ST_TO_ADDR
63875: LD_VAR 0 2
63879: PUSH
63880: FOR_TO
63881: IFFALSE 63945
// begin hc_class = class_tiger ;
63883: LD_ADDR_OWVAR 28
63887: PUSH
63888: LD_INT 14
63890: ST_TO_ADDR
// hc_gallery =  ;
63891: LD_ADDR_OWVAR 33
63895: PUSH
63896: LD_STRING 
63898: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
63899: LD_ADDR_OWVAR 35
63903: PUSH
63904: LD_INT 7
63906: NEG
63907: PPUSH
63908: LD_INT 7
63910: PPUSH
63911: CALL_OW 12
63915: ST_TO_ADDR
// animal := CreateHuman ;
63916: LD_ADDR_VAR 0 12
63920: PUSH
63921: CALL_OW 44
63925: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63926: LD_VAR 0 12
63930: PPUSH
63931: LD_VAR 0 8
63935: PPUSH
63936: LD_INT 0
63938: PPUSH
63939: CALL 65852 0 3
// end ;
63943: GO 63880
63945: POP
63946: POP
// if apemans then
63947: LD_VAR 0 3
63951: IFFALSE 64074
// for i = 1 to apemans do
63953: LD_ADDR_VAR 0 11
63957: PUSH
63958: DOUBLE
63959: LD_INT 1
63961: DEC
63962: ST_TO_ADDR
63963: LD_VAR 0 3
63967: PUSH
63968: FOR_TO
63969: IFFALSE 64072
// begin hc_class = class_apeman ;
63971: LD_ADDR_OWVAR 28
63975: PUSH
63976: LD_INT 12
63978: ST_TO_ADDR
// hc_gallery =  ;
63979: LD_ADDR_OWVAR 33
63983: PUSH
63984: LD_STRING 
63986: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
63987: LD_ADDR_OWVAR 35
63991: PUSH
63992: LD_INT 2
63994: NEG
63995: PPUSH
63996: LD_INT 2
63998: PPUSH
63999: CALL_OW 12
64003: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
64004: LD_ADDR_OWVAR 31
64008: PUSH
64009: LD_INT 1
64011: PPUSH
64012: LD_INT 3
64014: PPUSH
64015: CALL_OW 12
64019: PUSH
64020: LD_INT 1
64022: PPUSH
64023: LD_INT 3
64025: PPUSH
64026: CALL_OW 12
64030: PUSH
64031: LD_INT 0
64033: PUSH
64034: LD_INT 0
64036: PUSH
64037: EMPTY
64038: LIST
64039: LIST
64040: LIST
64041: LIST
64042: ST_TO_ADDR
// animal := CreateHuman ;
64043: LD_ADDR_VAR 0 12
64047: PUSH
64048: CALL_OW 44
64052: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64053: LD_VAR 0 12
64057: PPUSH
64058: LD_VAR 0 8
64062: PPUSH
64063: LD_INT 0
64065: PPUSH
64066: CALL 65852 0 3
// end ;
64070: GO 63968
64072: POP
64073: POP
// if enchidnas then
64074: LD_VAR 0 4
64078: IFFALSE 64145
// for i = 1 to enchidnas do
64080: LD_ADDR_VAR 0 11
64084: PUSH
64085: DOUBLE
64086: LD_INT 1
64088: DEC
64089: ST_TO_ADDR
64090: LD_VAR 0 4
64094: PUSH
64095: FOR_TO
64096: IFFALSE 64143
// begin hc_class = 13 ;
64098: LD_ADDR_OWVAR 28
64102: PUSH
64103: LD_INT 13
64105: ST_TO_ADDR
// hc_gallery =  ;
64106: LD_ADDR_OWVAR 33
64110: PUSH
64111: LD_STRING 
64113: ST_TO_ADDR
// animal := CreateHuman ;
64114: LD_ADDR_VAR 0 12
64118: PUSH
64119: CALL_OW 44
64123: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64124: LD_VAR 0 12
64128: PPUSH
64129: LD_VAR 0 8
64133: PPUSH
64134: LD_INT 0
64136: PPUSH
64137: CALL 65852 0 3
// end ;
64141: GO 64095
64143: POP
64144: POP
// if fishes then
64145: LD_VAR 0 7
64149: IFFALSE 64216
// for i = 1 to fishes do
64151: LD_ADDR_VAR 0 11
64155: PUSH
64156: DOUBLE
64157: LD_INT 1
64159: DEC
64160: ST_TO_ADDR
64161: LD_VAR 0 7
64165: PUSH
64166: FOR_TO
64167: IFFALSE 64214
// begin hc_class = 20 ;
64169: LD_ADDR_OWVAR 28
64173: PUSH
64174: LD_INT 20
64176: ST_TO_ADDR
// hc_gallery =  ;
64177: LD_ADDR_OWVAR 33
64181: PUSH
64182: LD_STRING 
64184: ST_TO_ADDR
// animal := CreateHuman ;
64185: LD_ADDR_VAR 0 12
64189: PUSH
64190: CALL_OW 44
64194: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
64195: LD_VAR 0 12
64199: PPUSH
64200: LD_VAR 0 9
64204: PPUSH
64205: LD_INT 0
64207: PPUSH
64208: CALL 65852 0 3
// end ;
64212: GO 64166
64214: POP
64215: POP
// end ;
64216: LD_VAR 0 10
64220: RET
// export function WantHeal ( sci , unit ) ; begin
64221: LD_INT 0
64223: PPUSH
// if GetTaskList ( sci ) > 0 then
64224: LD_VAR 0 1
64228: PPUSH
64229: CALL_OW 437
64233: PUSH
64234: LD_INT 0
64236: GREATER
64237: IFFALSE 64307
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
64239: LD_VAR 0 1
64243: PPUSH
64244: CALL_OW 437
64248: PUSH
64249: LD_INT 1
64251: ARRAY
64252: PUSH
64253: LD_INT 1
64255: ARRAY
64256: PUSH
64257: LD_STRING l
64259: EQUAL
64260: PUSH
64261: LD_VAR 0 1
64265: PPUSH
64266: CALL_OW 437
64270: PUSH
64271: LD_INT 1
64273: ARRAY
64274: PUSH
64275: LD_INT 4
64277: ARRAY
64278: PUSH
64279: LD_VAR 0 2
64283: EQUAL
64284: AND
64285: IFFALSE 64297
// result := true else
64287: LD_ADDR_VAR 0 3
64291: PUSH
64292: LD_INT 1
64294: ST_TO_ADDR
64295: GO 64305
// result := false ;
64297: LD_ADDR_VAR 0 3
64301: PUSH
64302: LD_INT 0
64304: ST_TO_ADDR
// end else
64305: GO 64315
// result := false ;
64307: LD_ADDR_VAR 0 3
64311: PUSH
64312: LD_INT 0
64314: ST_TO_ADDR
// end ;
64315: LD_VAR 0 3
64319: RET
// export function HealTarget ( sci ) ; begin
64320: LD_INT 0
64322: PPUSH
// if not sci then
64323: LD_VAR 0 1
64327: NOT
64328: IFFALSE 64332
// exit ;
64330: GO 64397
// result := 0 ;
64332: LD_ADDR_VAR 0 2
64336: PUSH
64337: LD_INT 0
64339: ST_TO_ADDR
// if GetTaskList ( sci ) then
64340: LD_VAR 0 1
64344: PPUSH
64345: CALL_OW 437
64349: IFFALSE 64397
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
64351: LD_VAR 0 1
64355: PPUSH
64356: CALL_OW 437
64360: PUSH
64361: LD_INT 1
64363: ARRAY
64364: PUSH
64365: LD_INT 1
64367: ARRAY
64368: PUSH
64369: LD_STRING l
64371: EQUAL
64372: IFFALSE 64397
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
64374: LD_ADDR_VAR 0 2
64378: PUSH
64379: LD_VAR 0 1
64383: PPUSH
64384: CALL_OW 437
64388: PUSH
64389: LD_INT 1
64391: ARRAY
64392: PUSH
64393: LD_INT 4
64395: ARRAY
64396: ST_TO_ADDR
// end ;
64397: LD_VAR 0 2
64401: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
64402: LD_INT 0
64404: PPUSH
64405: PPUSH
64406: PPUSH
64407: PPUSH
// if not base_units then
64408: LD_VAR 0 1
64412: NOT
64413: IFFALSE 64417
// exit ;
64415: GO 64504
// result := false ;
64417: LD_ADDR_VAR 0 2
64421: PUSH
64422: LD_INT 0
64424: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
64425: LD_ADDR_VAR 0 5
64429: PUSH
64430: LD_VAR 0 1
64434: PPUSH
64435: LD_INT 21
64437: PUSH
64438: LD_INT 3
64440: PUSH
64441: EMPTY
64442: LIST
64443: LIST
64444: PPUSH
64445: CALL_OW 72
64449: ST_TO_ADDR
// if not tmp then
64450: LD_VAR 0 5
64454: NOT
64455: IFFALSE 64459
// exit ;
64457: GO 64504
// for i in tmp do
64459: LD_ADDR_VAR 0 3
64463: PUSH
64464: LD_VAR 0 5
64468: PUSH
64469: FOR_IN
64470: IFFALSE 64502
// begin result := EnemyInRange ( i , 22 ) ;
64472: LD_ADDR_VAR 0 2
64476: PUSH
64477: LD_VAR 0 3
64481: PPUSH
64482: LD_INT 22
64484: PPUSH
64485: CALL 62740 0 2
64489: ST_TO_ADDR
// if result then
64490: LD_VAR 0 2
64494: IFFALSE 64500
// exit ;
64496: POP
64497: POP
64498: GO 64504
// end ;
64500: GO 64469
64502: POP
64503: POP
// end ;
64504: LD_VAR 0 2
64508: RET
// export function FilterByTag ( units , tag ) ; begin
64509: LD_INT 0
64511: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
64512: LD_ADDR_VAR 0 3
64516: PUSH
64517: LD_VAR 0 1
64521: PPUSH
64522: LD_INT 120
64524: PUSH
64525: LD_VAR 0 2
64529: PUSH
64530: EMPTY
64531: LIST
64532: LIST
64533: PPUSH
64534: CALL_OW 72
64538: ST_TO_ADDR
// end ;
64539: LD_VAR 0 3
64543: RET
// export function IsDriver ( un ) ; begin
64544: LD_INT 0
64546: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
64547: LD_ADDR_VAR 0 2
64551: PUSH
64552: LD_VAR 0 1
64556: PUSH
64557: LD_INT 55
64559: PUSH
64560: EMPTY
64561: LIST
64562: PPUSH
64563: CALL_OW 69
64567: IN
64568: ST_TO_ADDR
// end ;
64569: LD_VAR 0 2
64573: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
64574: LD_INT 0
64576: PPUSH
64577: PPUSH
// list := [ ] ;
64578: LD_ADDR_VAR 0 5
64582: PUSH
64583: EMPTY
64584: ST_TO_ADDR
// case d of 0 :
64585: LD_VAR 0 3
64589: PUSH
64590: LD_INT 0
64592: DOUBLE
64593: EQUAL
64594: IFTRUE 64598
64596: GO 64731
64598: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
64599: LD_ADDR_VAR 0 5
64603: PUSH
64604: LD_VAR 0 1
64608: PUSH
64609: LD_INT 4
64611: MINUS
64612: PUSH
64613: LD_VAR 0 2
64617: PUSH
64618: LD_INT 4
64620: MINUS
64621: PUSH
64622: LD_INT 2
64624: PUSH
64625: EMPTY
64626: LIST
64627: LIST
64628: LIST
64629: PUSH
64630: LD_VAR 0 1
64634: PUSH
64635: LD_INT 3
64637: MINUS
64638: PUSH
64639: LD_VAR 0 2
64643: PUSH
64644: LD_INT 1
64646: PUSH
64647: EMPTY
64648: LIST
64649: LIST
64650: LIST
64651: PUSH
64652: LD_VAR 0 1
64656: PUSH
64657: LD_INT 4
64659: PLUS
64660: PUSH
64661: LD_VAR 0 2
64665: PUSH
64666: LD_INT 4
64668: PUSH
64669: EMPTY
64670: LIST
64671: LIST
64672: LIST
64673: PUSH
64674: LD_VAR 0 1
64678: PUSH
64679: LD_INT 3
64681: PLUS
64682: PUSH
64683: LD_VAR 0 2
64687: PUSH
64688: LD_INT 3
64690: PLUS
64691: PUSH
64692: LD_INT 5
64694: PUSH
64695: EMPTY
64696: LIST
64697: LIST
64698: LIST
64699: PUSH
64700: LD_VAR 0 1
64704: PUSH
64705: LD_VAR 0 2
64709: PUSH
64710: LD_INT 4
64712: PLUS
64713: PUSH
64714: LD_INT 0
64716: PUSH
64717: EMPTY
64718: LIST
64719: LIST
64720: LIST
64721: PUSH
64722: EMPTY
64723: LIST
64724: LIST
64725: LIST
64726: LIST
64727: LIST
64728: ST_TO_ADDR
// end ; 1 :
64729: GO 65429
64731: LD_INT 1
64733: DOUBLE
64734: EQUAL
64735: IFTRUE 64739
64737: GO 64872
64739: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
64740: LD_ADDR_VAR 0 5
64744: PUSH
64745: LD_VAR 0 1
64749: PUSH
64750: LD_VAR 0 2
64754: PUSH
64755: LD_INT 4
64757: MINUS
64758: PUSH
64759: LD_INT 3
64761: PUSH
64762: EMPTY
64763: LIST
64764: LIST
64765: LIST
64766: PUSH
64767: LD_VAR 0 1
64771: PUSH
64772: LD_INT 3
64774: MINUS
64775: PUSH
64776: LD_VAR 0 2
64780: PUSH
64781: LD_INT 3
64783: MINUS
64784: PUSH
64785: LD_INT 2
64787: PUSH
64788: EMPTY
64789: LIST
64790: LIST
64791: LIST
64792: PUSH
64793: LD_VAR 0 1
64797: PUSH
64798: LD_INT 4
64800: MINUS
64801: PUSH
64802: LD_VAR 0 2
64806: PUSH
64807: LD_INT 1
64809: PUSH
64810: EMPTY
64811: LIST
64812: LIST
64813: LIST
64814: PUSH
64815: LD_VAR 0 1
64819: PUSH
64820: LD_VAR 0 2
64824: PUSH
64825: LD_INT 3
64827: PLUS
64828: PUSH
64829: LD_INT 0
64831: PUSH
64832: EMPTY
64833: LIST
64834: LIST
64835: LIST
64836: PUSH
64837: LD_VAR 0 1
64841: PUSH
64842: LD_INT 4
64844: PLUS
64845: PUSH
64846: LD_VAR 0 2
64850: PUSH
64851: LD_INT 4
64853: PLUS
64854: PUSH
64855: LD_INT 5
64857: PUSH
64858: EMPTY
64859: LIST
64860: LIST
64861: LIST
64862: PUSH
64863: EMPTY
64864: LIST
64865: LIST
64866: LIST
64867: LIST
64868: LIST
64869: ST_TO_ADDR
// end ; 2 :
64870: GO 65429
64872: LD_INT 2
64874: DOUBLE
64875: EQUAL
64876: IFTRUE 64880
64878: GO 65009
64880: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
64881: LD_ADDR_VAR 0 5
64885: PUSH
64886: LD_VAR 0 1
64890: PUSH
64891: LD_VAR 0 2
64895: PUSH
64896: LD_INT 3
64898: MINUS
64899: PUSH
64900: LD_INT 3
64902: PUSH
64903: EMPTY
64904: LIST
64905: LIST
64906: LIST
64907: PUSH
64908: LD_VAR 0 1
64912: PUSH
64913: LD_INT 4
64915: PLUS
64916: PUSH
64917: LD_VAR 0 2
64921: PUSH
64922: LD_INT 4
64924: PUSH
64925: EMPTY
64926: LIST
64927: LIST
64928: LIST
64929: PUSH
64930: LD_VAR 0 1
64934: PUSH
64935: LD_VAR 0 2
64939: PUSH
64940: LD_INT 4
64942: PLUS
64943: PUSH
64944: LD_INT 0
64946: PUSH
64947: EMPTY
64948: LIST
64949: LIST
64950: LIST
64951: PUSH
64952: LD_VAR 0 1
64956: PUSH
64957: LD_INT 3
64959: MINUS
64960: PUSH
64961: LD_VAR 0 2
64965: PUSH
64966: LD_INT 1
64968: PUSH
64969: EMPTY
64970: LIST
64971: LIST
64972: LIST
64973: PUSH
64974: LD_VAR 0 1
64978: PUSH
64979: LD_INT 4
64981: MINUS
64982: PUSH
64983: LD_VAR 0 2
64987: PUSH
64988: LD_INT 4
64990: MINUS
64991: PUSH
64992: LD_INT 2
64994: PUSH
64995: EMPTY
64996: LIST
64997: LIST
64998: LIST
64999: PUSH
65000: EMPTY
65001: LIST
65002: LIST
65003: LIST
65004: LIST
65005: LIST
65006: ST_TO_ADDR
// end ; 3 :
65007: GO 65429
65009: LD_INT 3
65011: DOUBLE
65012: EQUAL
65013: IFTRUE 65017
65015: GO 65150
65017: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
65018: LD_ADDR_VAR 0 5
65022: PUSH
65023: LD_VAR 0 1
65027: PUSH
65028: LD_INT 3
65030: PLUS
65031: PUSH
65032: LD_VAR 0 2
65036: PUSH
65037: LD_INT 4
65039: PUSH
65040: EMPTY
65041: LIST
65042: LIST
65043: LIST
65044: PUSH
65045: LD_VAR 0 1
65049: PUSH
65050: LD_INT 4
65052: PLUS
65053: PUSH
65054: LD_VAR 0 2
65058: PUSH
65059: LD_INT 4
65061: PLUS
65062: PUSH
65063: LD_INT 5
65065: PUSH
65066: EMPTY
65067: LIST
65068: LIST
65069: LIST
65070: PUSH
65071: LD_VAR 0 1
65075: PUSH
65076: LD_INT 4
65078: MINUS
65079: PUSH
65080: LD_VAR 0 2
65084: PUSH
65085: LD_INT 1
65087: PUSH
65088: EMPTY
65089: LIST
65090: LIST
65091: LIST
65092: PUSH
65093: LD_VAR 0 1
65097: PUSH
65098: LD_VAR 0 2
65102: PUSH
65103: LD_INT 4
65105: MINUS
65106: PUSH
65107: LD_INT 3
65109: PUSH
65110: EMPTY
65111: LIST
65112: LIST
65113: LIST
65114: PUSH
65115: LD_VAR 0 1
65119: PUSH
65120: LD_INT 3
65122: MINUS
65123: PUSH
65124: LD_VAR 0 2
65128: PUSH
65129: LD_INT 3
65131: MINUS
65132: PUSH
65133: LD_INT 2
65135: PUSH
65136: EMPTY
65137: LIST
65138: LIST
65139: LIST
65140: PUSH
65141: EMPTY
65142: LIST
65143: LIST
65144: LIST
65145: LIST
65146: LIST
65147: ST_TO_ADDR
// end ; 4 :
65148: GO 65429
65150: LD_INT 4
65152: DOUBLE
65153: EQUAL
65154: IFTRUE 65158
65156: GO 65291
65158: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
65159: LD_ADDR_VAR 0 5
65163: PUSH
65164: LD_VAR 0 1
65168: PUSH
65169: LD_VAR 0 2
65173: PUSH
65174: LD_INT 4
65176: PLUS
65177: PUSH
65178: LD_INT 0
65180: PUSH
65181: EMPTY
65182: LIST
65183: LIST
65184: LIST
65185: PUSH
65186: LD_VAR 0 1
65190: PUSH
65191: LD_INT 3
65193: PLUS
65194: PUSH
65195: LD_VAR 0 2
65199: PUSH
65200: LD_INT 3
65202: PLUS
65203: PUSH
65204: LD_INT 5
65206: PUSH
65207: EMPTY
65208: LIST
65209: LIST
65210: LIST
65211: PUSH
65212: LD_VAR 0 1
65216: PUSH
65217: LD_INT 4
65219: PLUS
65220: PUSH
65221: LD_VAR 0 2
65225: PUSH
65226: LD_INT 4
65228: PUSH
65229: EMPTY
65230: LIST
65231: LIST
65232: LIST
65233: PUSH
65234: LD_VAR 0 1
65238: PUSH
65239: LD_VAR 0 2
65243: PUSH
65244: LD_INT 3
65246: MINUS
65247: PUSH
65248: LD_INT 3
65250: PUSH
65251: EMPTY
65252: LIST
65253: LIST
65254: LIST
65255: PUSH
65256: LD_VAR 0 1
65260: PUSH
65261: LD_INT 4
65263: MINUS
65264: PUSH
65265: LD_VAR 0 2
65269: PUSH
65270: LD_INT 4
65272: MINUS
65273: PUSH
65274: LD_INT 2
65276: PUSH
65277: EMPTY
65278: LIST
65279: LIST
65280: LIST
65281: PUSH
65282: EMPTY
65283: LIST
65284: LIST
65285: LIST
65286: LIST
65287: LIST
65288: ST_TO_ADDR
// end ; 5 :
65289: GO 65429
65291: LD_INT 5
65293: DOUBLE
65294: EQUAL
65295: IFTRUE 65299
65297: GO 65428
65299: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
65300: LD_ADDR_VAR 0 5
65304: PUSH
65305: LD_VAR 0 1
65309: PUSH
65310: LD_INT 4
65312: MINUS
65313: PUSH
65314: LD_VAR 0 2
65318: PUSH
65319: LD_INT 1
65321: PUSH
65322: EMPTY
65323: LIST
65324: LIST
65325: LIST
65326: PUSH
65327: LD_VAR 0 1
65331: PUSH
65332: LD_VAR 0 2
65336: PUSH
65337: LD_INT 4
65339: MINUS
65340: PUSH
65341: LD_INT 3
65343: PUSH
65344: EMPTY
65345: LIST
65346: LIST
65347: LIST
65348: PUSH
65349: LD_VAR 0 1
65353: PUSH
65354: LD_INT 4
65356: PLUS
65357: PUSH
65358: LD_VAR 0 2
65362: PUSH
65363: LD_INT 4
65365: PLUS
65366: PUSH
65367: LD_INT 5
65369: PUSH
65370: EMPTY
65371: LIST
65372: LIST
65373: LIST
65374: PUSH
65375: LD_VAR 0 1
65379: PUSH
65380: LD_INT 3
65382: PLUS
65383: PUSH
65384: LD_VAR 0 2
65388: PUSH
65389: LD_INT 4
65391: PUSH
65392: EMPTY
65393: LIST
65394: LIST
65395: LIST
65396: PUSH
65397: LD_VAR 0 1
65401: PUSH
65402: LD_VAR 0 2
65406: PUSH
65407: LD_INT 3
65409: PLUS
65410: PUSH
65411: LD_INT 0
65413: PUSH
65414: EMPTY
65415: LIST
65416: LIST
65417: LIST
65418: PUSH
65419: EMPTY
65420: LIST
65421: LIST
65422: LIST
65423: LIST
65424: LIST
65425: ST_TO_ADDR
// end ; end ;
65426: GO 65429
65428: POP
// result := list ;
65429: LD_ADDR_VAR 0 4
65433: PUSH
65434: LD_VAR 0 5
65438: ST_TO_ADDR
// end ;
65439: LD_VAR 0 4
65443: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
65444: LD_INT 0
65446: PPUSH
65447: PPUSH
65448: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
65449: LD_VAR 0 1
65453: NOT
65454: PUSH
65455: LD_VAR 0 2
65459: PUSH
65460: LD_INT 1
65462: PUSH
65463: LD_INT 2
65465: PUSH
65466: LD_INT 3
65468: PUSH
65469: LD_INT 4
65471: PUSH
65472: EMPTY
65473: LIST
65474: LIST
65475: LIST
65476: LIST
65477: IN
65478: NOT
65479: OR
65480: IFFALSE 65484
// exit ;
65482: GO 65576
// tmp := [ ] ;
65484: LD_ADDR_VAR 0 5
65488: PUSH
65489: EMPTY
65490: ST_TO_ADDR
// for i in units do
65491: LD_ADDR_VAR 0 4
65495: PUSH
65496: LD_VAR 0 1
65500: PUSH
65501: FOR_IN
65502: IFFALSE 65545
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
65504: LD_ADDR_VAR 0 5
65508: PUSH
65509: LD_VAR 0 5
65513: PPUSH
65514: LD_VAR 0 5
65518: PUSH
65519: LD_INT 1
65521: PLUS
65522: PPUSH
65523: LD_VAR 0 4
65527: PPUSH
65528: LD_VAR 0 2
65532: PPUSH
65533: CALL_OW 259
65537: PPUSH
65538: CALL_OW 2
65542: ST_TO_ADDR
65543: GO 65501
65545: POP
65546: POP
// if not tmp then
65547: LD_VAR 0 5
65551: NOT
65552: IFFALSE 65556
// exit ;
65554: GO 65576
// result := SortListByListDesc ( units , tmp ) ;
65556: LD_ADDR_VAR 0 3
65560: PUSH
65561: LD_VAR 0 1
65565: PPUSH
65566: LD_VAR 0 5
65570: PPUSH
65571: CALL_OW 77
65575: ST_TO_ADDR
// end ;
65576: LD_VAR 0 3
65580: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
65581: LD_INT 0
65583: PPUSH
65584: PPUSH
65585: PPUSH
// result := false ;
65586: LD_ADDR_VAR 0 3
65590: PUSH
65591: LD_INT 0
65593: ST_TO_ADDR
// x := GetX ( building ) ;
65594: LD_ADDR_VAR 0 4
65598: PUSH
65599: LD_VAR 0 2
65603: PPUSH
65604: CALL_OW 250
65608: ST_TO_ADDR
// y := GetY ( building ) ;
65609: LD_ADDR_VAR 0 5
65613: PUSH
65614: LD_VAR 0 2
65618: PPUSH
65619: CALL_OW 251
65623: ST_TO_ADDR
// if not building or not x or not y then
65624: LD_VAR 0 2
65628: NOT
65629: PUSH
65630: LD_VAR 0 4
65634: NOT
65635: OR
65636: PUSH
65637: LD_VAR 0 5
65641: NOT
65642: OR
65643: IFFALSE 65647
// exit ;
65645: GO 65739
// if GetTaskList ( unit ) then
65647: LD_VAR 0 1
65651: PPUSH
65652: CALL_OW 437
65656: IFFALSE 65739
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
65658: LD_STRING e
65660: PUSH
65661: LD_VAR 0 1
65665: PPUSH
65666: CALL_OW 437
65670: PUSH
65671: LD_INT 1
65673: ARRAY
65674: PUSH
65675: LD_INT 1
65677: ARRAY
65678: EQUAL
65679: PUSH
65680: LD_VAR 0 4
65684: PUSH
65685: LD_VAR 0 1
65689: PPUSH
65690: CALL_OW 437
65694: PUSH
65695: LD_INT 1
65697: ARRAY
65698: PUSH
65699: LD_INT 2
65701: ARRAY
65702: EQUAL
65703: AND
65704: PUSH
65705: LD_VAR 0 5
65709: PUSH
65710: LD_VAR 0 1
65714: PPUSH
65715: CALL_OW 437
65719: PUSH
65720: LD_INT 1
65722: ARRAY
65723: PUSH
65724: LD_INT 3
65726: ARRAY
65727: EQUAL
65728: AND
65729: IFFALSE 65739
// result := true end ;
65731: LD_ADDR_VAR 0 3
65735: PUSH
65736: LD_INT 1
65738: ST_TO_ADDR
// end ;
65739: LD_VAR 0 3
65743: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
65744: LD_INT 0
65746: PPUSH
// result := false ;
65747: LD_ADDR_VAR 0 4
65751: PUSH
65752: LD_INT 0
65754: ST_TO_ADDR
// if GetTaskList ( unit ) then
65755: LD_VAR 0 1
65759: PPUSH
65760: CALL_OW 437
65764: IFFALSE 65847
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
65766: LD_STRING M
65768: PUSH
65769: LD_VAR 0 1
65773: PPUSH
65774: CALL_OW 437
65778: PUSH
65779: LD_INT 1
65781: ARRAY
65782: PUSH
65783: LD_INT 1
65785: ARRAY
65786: EQUAL
65787: PUSH
65788: LD_VAR 0 2
65792: PUSH
65793: LD_VAR 0 1
65797: PPUSH
65798: CALL_OW 437
65802: PUSH
65803: LD_INT 1
65805: ARRAY
65806: PUSH
65807: LD_INT 2
65809: ARRAY
65810: EQUAL
65811: AND
65812: PUSH
65813: LD_VAR 0 3
65817: PUSH
65818: LD_VAR 0 1
65822: PPUSH
65823: CALL_OW 437
65827: PUSH
65828: LD_INT 1
65830: ARRAY
65831: PUSH
65832: LD_INT 3
65834: ARRAY
65835: EQUAL
65836: AND
65837: IFFALSE 65847
// result := true ;
65839: LD_ADDR_VAR 0 4
65843: PUSH
65844: LD_INT 1
65846: ST_TO_ADDR
// end ; end ;
65847: LD_VAR 0 4
65851: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
65852: LD_INT 0
65854: PPUSH
65855: PPUSH
65856: PPUSH
65857: PPUSH
// if not unit or not area then
65858: LD_VAR 0 1
65862: NOT
65863: PUSH
65864: LD_VAR 0 2
65868: NOT
65869: OR
65870: IFFALSE 65874
// exit ;
65872: GO 66038
// tmp := AreaToList ( area , i ) ;
65874: LD_ADDR_VAR 0 6
65878: PUSH
65879: LD_VAR 0 2
65883: PPUSH
65884: LD_VAR 0 5
65888: PPUSH
65889: CALL_OW 517
65893: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
65894: LD_ADDR_VAR 0 5
65898: PUSH
65899: DOUBLE
65900: LD_INT 1
65902: DEC
65903: ST_TO_ADDR
65904: LD_VAR 0 6
65908: PUSH
65909: LD_INT 1
65911: ARRAY
65912: PUSH
65913: FOR_TO
65914: IFFALSE 66036
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
65916: LD_ADDR_VAR 0 7
65920: PUSH
65921: LD_VAR 0 6
65925: PUSH
65926: LD_INT 1
65928: ARRAY
65929: PUSH
65930: LD_VAR 0 5
65934: ARRAY
65935: PUSH
65936: LD_VAR 0 6
65940: PUSH
65941: LD_INT 2
65943: ARRAY
65944: PUSH
65945: LD_VAR 0 5
65949: ARRAY
65950: PUSH
65951: EMPTY
65952: LIST
65953: LIST
65954: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
65955: LD_VAR 0 7
65959: PUSH
65960: LD_INT 1
65962: ARRAY
65963: PPUSH
65964: LD_VAR 0 7
65968: PUSH
65969: LD_INT 2
65971: ARRAY
65972: PPUSH
65973: CALL_OW 428
65977: PUSH
65978: LD_INT 0
65980: EQUAL
65981: IFFALSE 66034
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
65983: LD_VAR 0 1
65987: PPUSH
65988: LD_VAR 0 7
65992: PUSH
65993: LD_INT 1
65995: ARRAY
65996: PPUSH
65997: LD_VAR 0 7
66001: PUSH
66002: LD_INT 2
66004: ARRAY
66005: PPUSH
66006: LD_VAR 0 3
66010: PPUSH
66011: CALL_OW 48
// result := IsPlaced ( unit ) ;
66015: LD_ADDR_VAR 0 4
66019: PUSH
66020: LD_VAR 0 1
66024: PPUSH
66025: CALL_OW 305
66029: ST_TO_ADDR
// exit ;
66030: POP
66031: POP
66032: GO 66038
// end ; end ;
66034: GO 65913
66036: POP
66037: POP
// end ;
66038: LD_VAR 0 4
66042: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
66043: LD_INT 0
66045: PPUSH
66046: PPUSH
66047: PPUSH
// if not side or side > 8 then
66048: LD_VAR 0 1
66052: NOT
66053: PUSH
66054: LD_VAR 0 1
66058: PUSH
66059: LD_INT 8
66061: GREATER
66062: OR
66063: IFFALSE 66067
// exit ;
66065: GO 66254
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
66067: LD_ADDR_VAR 0 4
66071: PUSH
66072: LD_INT 22
66074: PUSH
66075: LD_VAR 0 1
66079: PUSH
66080: EMPTY
66081: LIST
66082: LIST
66083: PUSH
66084: LD_INT 21
66086: PUSH
66087: LD_INT 3
66089: PUSH
66090: EMPTY
66091: LIST
66092: LIST
66093: PUSH
66094: EMPTY
66095: LIST
66096: LIST
66097: PPUSH
66098: CALL_OW 69
66102: ST_TO_ADDR
// if not tmp then
66103: LD_VAR 0 4
66107: NOT
66108: IFFALSE 66112
// exit ;
66110: GO 66254
// enable_addtolog := true ;
66112: LD_ADDR_OWVAR 81
66116: PUSH
66117: LD_INT 1
66119: ST_TO_ADDR
// AddToLog ( [ ) ;
66120: LD_STRING [
66122: PPUSH
66123: CALL_OW 561
// for i in tmp do
66127: LD_ADDR_VAR 0 3
66131: PUSH
66132: LD_VAR 0 4
66136: PUSH
66137: FOR_IN
66138: IFFALSE 66245
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
66140: LD_STRING [
66142: PUSH
66143: LD_VAR 0 3
66147: PPUSH
66148: CALL_OW 266
66152: STR
66153: PUSH
66154: LD_STRING , 
66156: STR
66157: PUSH
66158: LD_VAR 0 3
66162: PPUSH
66163: CALL_OW 250
66167: STR
66168: PUSH
66169: LD_STRING , 
66171: STR
66172: PUSH
66173: LD_VAR 0 3
66177: PPUSH
66178: CALL_OW 251
66182: STR
66183: PUSH
66184: LD_STRING , 
66186: STR
66187: PUSH
66188: LD_VAR 0 3
66192: PPUSH
66193: CALL_OW 254
66197: STR
66198: PUSH
66199: LD_STRING , 
66201: STR
66202: PUSH
66203: LD_VAR 0 3
66207: PPUSH
66208: LD_INT 1
66210: PPUSH
66211: CALL_OW 268
66215: STR
66216: PUSH
66217: LD_STRING , 
66219: STR
66220: PUSH
66221: LD_VAR 0 3
66225: PPUSH
66226: LD_INT 2
66228: PPUSH
66229: CALL_OW 268
66233: STR
66234: PUSH
66235: LD_STRING ],
66237: STR
66238: PPUSH
66239: CALL_OW 561
// end ;
66243: GO 66137
66245: POP
66246: POP
// AddToLog ( ]; ) ;
66247: LD_STRING ];
66249: PPUSH
66250: CALL_OW 561
// end ;
66254: LD_VAR 0 2
66258: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
66259: LD_INT 0
66261: PPUSH
66262: PPUSH
66263: PPUSH
66264: PPUSH
66265: PPUSH
// if not area or not rate or not max then
66266: LD_VAR 0 1
66270: NOT
66271: PUSH
66272: LD_VAR 0 2
66276: NOT
66277: OR
66278: PUSH
66279: LD_VAR 0 4
66283: NOT
66284: OR
66285: IFFALSE 66289
// exit ;
66287: GO 66478
// while 1 do
66289: LD_INT 1
66291: IFFALSE 66478
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
66293: LD_ADDR_VAR 0 9
66297: PUSH
66298: LD_VAR 0 1
66302: PPUSH
66303: LD_INT 1
66305: PPUSH
66306: CALL_OW 287
66310: PUSH
66311: LD_INT 10
66313: MUL
66314: ST_TO_ADDR
// r := rate / 10 ;
66315: LD_ADDR_VAR 0 7
66319: PUSH
66320: LD_VAR 0 2
66324: PUSH
66325: LD_INT 10
66327: DIVREAL
66328: ST_TO_ADDR
// time := 1 1$00 ;
66329: LD_ADDR_VAR 0 8
66333: PUSH
66334: LD_INT 2100
66336: ST_TO_ADDR
// if amount < min then
66337: LD_VAR 0 9
66341: PUSH
66342: LD_VAR 0 3
66346: LESS
66347: IFFALSE 66365
// r := r * 2 else
66349: LD_ADDR_VAR 0 7
66353: PUSH
66354: LD_VAR 0 7
66358: PUSH
66359: LD_INT 2
66361: MUL
66362: ST_TO_ADDR
66363: GO 66391
// if amount > max then
66365: LD_VAR 0 9
66369: PUSH
66370: LD_VAR 0 4
66374: GREATER
66375: IFFALSE 66391
// r := r / 2 ;
66377: LD_ADDR_VAR 0 7
66381: PUSH
66382: LD_VAR 0 7
66386: PUSH
66387: LD_INT 2
66389: DIVREAL
66390: ST_TO_ADDR
// time := time / r ;
66391: LD_ADDR_VAR 0 8
66395: PUSH
66396: LD_VAR 0 8
66400: PUSH
66401: LD_VAR 0 7
66405: DIVREAL
66406: ST_TO_ADDR
// if time < 0 then
66407: LD_VAR 0 8
66411: PUSH
66412: LD_INT 0
66414: LESS
66415: IFFALSE 66432
// time := time * - 1 ;
66417: LD_ADDR_VAR 0 8
66421: PUSH
66422: LD_VAR 0 8
66426: PUSH
66427: LD_INT 1
66429: NEG
66430: MUL
66431: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
66432: LD_VAR 0 8
66436: PUSH
66437: LD_INT 35
66439: PPUSH
66440: LD_INT 875
66442: PPUSH
66443: CALL_OW 12
66447: PLUS
66448: PPUSH
66449: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
66453: LD_INT 1
66455: PPUSH
66456: LD_INT 5
66458: PPUSH
66459: CALL_OW 12
66463: PPUSH
66464: LD_VAR 0 1
66468: PPUSH
66469: LD_INT 1
66471: PPUSH
66472: CALL_OW 55
// end ;
66476: GO 66289
// end ;
66478: LD_VAR 0 5
66482: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
66483: LD_INT 0
66485: PPUSH
66486: PPUSH
66487: PPUSH
66488: PPUSH
66489: PPUSH
66490: PPUSH
66491: PPUSH
66492: PPUSH
// if not turrets or not factories then
66493: LD_VAR 0 1
66497: NOT
66498: PUSH
66499: LD_VAR 0 2
66503: NOT
66504: OR
66505: IFFALSE 66509
// exit ;
66507: GO 66816
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
66509: LD_ADDR_VAR 0 10
66513: PUSH
66514: LD_INT 5
66516: PUSH
66517: LD_INT 6
66519: PUSH
66520: EMPTY
66521: LIST
66522: LIST
66523: PUSH
66524: LD_INT 2
66526: PUSH
66527: LD_INT 4
66529: PUSH
66530: EMPTY
66531: LIST
66532: LIST
66533: PUSH
66534: LD_INT 3
66536: PUSH
66537: LD_INT 5
66539: PUSH
66540: EMPTY
66541: LIST
66542: LIST
66543: PUSH
66544: EMPTY
66545: LIST
66546: LIST
66547: LIST
66548: PUSH
66549: LD_INT 24
66551: PUSH
66552: LD_INT 25
66554: PUSH
66555: EMPTY
66556: LIST
66557: LIST
66558: PUSH
66559: LD_INT 23
66561: PUSH
66562: LD_INT 27
66564: PUSH
66565: EMPTY
66566: LIST
66567: LIST
66568: PUSH
66569: EMPTY
66570: LIST
66571: LIST
66572: PUSH
66573: LD_INT 42
66575: PUSH
66576: LD_INT 43
66578: PUSH
66579: EMPTY
66580: LIST
66581: LIST
66582: PUSH
66583: LD_INT 44
66585: PUSH
66586: LD_INT 46
66588: PUSH
66589: EMPTY
66590: LIST
66591: LIST
66592: PUSH
66593: LD_INT 45
66595: PUSH
66596: LD_INT 47
66598: PUSH
66599: EMPTY
66600: LIST
66601: LIST
66602: PUSH
66603: EMPTY
66604: LIST
66605: LIST
66606: LIST
66607: PUSH
66608: EMPTY
66609: LIST
66610: LIST
66611: LIST
66612: ST_TO_ADDR
// result := [ ] ;
66613: LD_ADDR_VAR 0 3
66617: PUSH
66618: EMPTY
66619: ST_TO_ADDR
// for i in turrets do
66620: LD_ADDR_VAR 0 4
66624: PUSH
66625: LD_VAR 0 1
66629: PUSH
66630: FOR_IN
66631: IFFALSE 66814
// begin nat := GetNation ( i ) ;
66633: LD_ADDR_VAR 0 7
66637: PUSH
66638: LD_VAR 0 4
66642: PPUSH
66643: CALL_OW 248
66647: ST_TO_ADDR
// weapon := 0 ;
66648: LD_ADDR_VAR 0 8
66652: PUSH
66653: LD_INT 0
66655: ST_TO_ADDR
// if not nat then
66656: LD_VAR 0 7
66660: NOT
66661: IFFALSE 66665
// continue ;
66663: GO 66630
// for j in list [ nat ] do
66665: LD_ADDR_VAR 0 5
66669: PUSH
66670: LD_VAR 0 10
66674: PUSH
66675: LD_VAR 0 7
66679: ARRAY
66680: PUSH
66681: FOR_IN
66682: IFFALSE 66723
// if GetBWeapon ( i ) = j [ 1 ] then
66684: LD_VAR 0 4
66688: PPUSH
66689: CALL_OW 269
66693: PUSH
66694: LD_VAR 0 5
66698: PUSH
66699: LD_INT 1
66701: ARRAY
66702: EQUAL
66703: IFFALSE 66721
// begin weapon := j [ 2 ] ;
66705: LD_ADDR_VAR 0 8
66709: PUSH
66710: LD_VAR 0 5
66714: PUSH
66715: LD_INT 2
66717: ARRAY
66718: ST_TO_ADDR
// break ;
66719: GO 66723
// end ;
66721: GO 66681
66723: POP
66724: POP
// if not weapon then
66725: LD_VAR 0 8
66729: NOT
66730: IFFALSE 66734
// continue ;
66732: GO 66630
// for k in factories do
66734: LD_ADDR_VAR 0 6
66738: PUSH
66739: LD_VAR 0 2
66743: PUSH
66744: FOR_IN
66745: IFFALSE 66810
// begin weapons := AvailableWeaponList ( k ) ;
66747: LD_ADDR_VAR 0 9
66751: PUSH
66752: LD_VAR 0 6
66756: PPUSH
66757: CALL_OW 478
66761: ST_TO_ADDR
// if not weapons then
66762: LD_VAR 0 9
66766: NOT
66767: IFFALSE 66771
// continue ;
66769: GO 66744
// if weapon in weapons then
66771: LD_VAR 0 8
66775: PUSH
66776: LD_VAR 0 9
66780: IN
66781: IFFALSE 66808
// begin result := [ i , weapon ] ;
66783: LD_ADDR_VAR 0 3
66787: PUSH
66788: LD_VAR 0 4
66792: PUSH
66793: LD_VAR 0 8
66797: PUSH
66798: EMPTY
66799: LIST
66800: LIST
66801: ST_TO_ADDR
// exit ;
66802: POP
66803: POP
66804: POP
66805: POP
66806: GO 66816
// end ; end ;
66808: GO 66744
66810: POP
66811: POP
// end ;
66812: GO 66630
66814: POP
66815: POP
// end ;
66816: LD_VAR 0 3
66820: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
66821: LD_INT 0
66823: PPUSH
// if not side or side > 8 then
66824: LD_VAR 0 3
66828: NOT
66829: PUSH
66830: LD_VAR 0 3
66834: PUSH
66835: LD_INT 8
66837: GREATER
66838: OR
66839: IFFALSE 66843
// exit ;
66841: GO 66902
// if not range then
66843: LD_VAR 0 4
66847: NOT
66848: IFFALSE 66859
// range := - 12 ;
66850: LD_ADDR_VAR 0 4
66854: PUSH
66855: LD_INT 12
66857: NEG
66858: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
66859: LD_VAR 0 1
66863: PPUSH
66864: LD_VAR 0 2
66868: PPUSH
66869: LD_VAR 0 3
66873: PPUSH
66874: LD_VAR 0 4
66878: PPUSH
66879: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
66883: LD_VAR 0 1
66887: PPUSH
66888: LD_VAR 0 2
66892: PPUSH
66893: LD_VAR 0 3
66897: PPUSH
66898: CALL_OW 331
// end ;
66902: LD_VAR 0 5
66906: RET
// export function Video ( mode ) ; begin
66907: LD_INT 0
66909: PPUSH
// ingame_video = mode ;
66910: LD_ADDR_OWVAR 52
66914: PUSH
66915: LD_VAR 0 1
66919: ST_TO_ADDR
// interface_hidden = mode ;
66920: LD_ADDR_OWVAR 54
66924: PUSH
66925: LD_VAR 0 1
66929: ST_TO_ADDR
// end ;
66930: LD_VAR 0 2
66934: RET
// export function Join ( array , element ) ; begin
66935: LD_INT 0
66937: PPUSH
// result := Replace ( array , array + 1 , element ) ;
66938: LD_ADDR_VAR 0 3
66942: PUSH
66943: LD_VAR 0 1
66947: PPUSH
66948: LD_VAR 0 1
66952: PUSH
66953: LD_INT 1
66955: PLUS
66956: PPUSH
66957: LD_VAR 0 2
66961: PPUSH
66962: CALL_OW 1
66966: ST_TO_ADDR
// end ;
66967: LD_VAR 0 3
66971: RET
// export function JoinUnion ( array , element ) ; begin
66972: LD_INT 0
66974: PPUSH
// result := array union element ;
66975: LD_ADDR_VAR 0 3
66979: PUSH
66980: LD_VAR 0 1
66984: PUSH
66985: LD_VAR 0 2
66989: UNION
66990: ST_TO_ADDR
// end ;
66991: LD_VAR 0 3
66995: RET
// export function GetBehemoths ( side ) ; begin
66996: LD_INT 0
66998: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
66999: LD_ADDR_VAR 0 2
67003: PUSH
67004: LD_INT 22
67006: PUSH
67007: LD_VAR 0 1
67011: PUSH
67012: EMPTY
67013: LIST
67014: LIST
67015: PUSH
67016: LD_INT 31
67018: PUSH
67019: LD_INT 25
67021: PUSH
67022: EMPTY
67023: LIST
67024: LIST
67025: PUSH
67026: EMPTY
67027: LIST
67028: LIST
67029: PPUSH
67030: CALL_OW 69
67034: ST_TO_ADDR
// end ;
67035: LD_VAR 0 2
67039: RET
// export function Shuffle ( array ) ; var i , index ; begin
67040: LD_INT 0
67042: PPUSH
67043: PPUSH
67044: PPUSH
// result := [ ] ;
67045: LD_ADDR_VAR 0 2
67049: PUSH
67050: EMPTY
67051: ST_TO_ADDR
// if not array then
67052: LD_VAR 0 1
67056: NOT
67057: IFFALSE 67061
// exit ;
67059: GO 67160
// Randomize ;
67061: CALL_OW 10
// for i = array downto 1 do
67065: LD_ADDR_VAR 0 3
67069: PUSH
67070: DOUBLE
67071: LD_VAR 0 1
67075: INC
67076: ST_TO_ADDR
67077: LD_INT 1
67079: PUSH
67080: FOR_DOWNTO
67081: IFFALSE 67158
// begin index := rand ( 1 , array ) ;
67083: LD_ADDR_VAR 0 4
67087: PUSH
67088: LD_INT 1
67090: PPUSH
67091: LD_VAR 0 1
67095: PPUSH
67096: CALL_OW 12
67100: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
67101: LD_ADDR_VAR 0 2
67105: PUSH
67106: LD_VAR 0 2
67110: PPUSH
67111: LD_VAR 0 2
67115: PUSH
67116: LD_INT 1
67118: PLUS
67119: PPUSH
67120: LD_VAR 0 1
67124: PUSH
67125: LD_VAR 0 4
67129: ARRAY
67130: PPUSH
67131: CALL_OW 2
67135: ST_TO_ADDR
// array := Delete ( array , index ) ;
67136: LD_ADDR_VAR 0 1
67140: PUSH
67141: LD_VAR 0 1
67145: PPUSH
67146: LD_VAR 0 4
67150: PPUSH
67151: CALL_OW 3
67155: ST_TO_ADDR
// end ;
67156: GO 67080
67158: POP
67159: POP
// end ;
67160: LD_VAR 0 2
67164: RET
// export function GetBaseMaterials ( base ) ; begin
67165: LD_INT 0
67167: PPUSH
// result := [ 0 , 0 , 0 ] ;
67168: LD_ADDR_VAR 0 2
67172: PUSH
67173: LD_INT 0
67175: PUSH
67176: LD_INT 0
67178: PUSH
67179: LD_INT 0
67181: PUSH
67182: EMPTY
67183: LIST
67184: LIST
67185: LIST
67186: ST_TO_ADDR
// if not base then
67187: LD_VAR 0 1
67191: NOT
67192: IFFALSE 67196
// exit ;
67194: GO 67245
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
67196: LD_ADDR_VAR 0 2
67200: PUSH
67201: LD_VAR 0 1
67205: PPUSH
67206: LD_INT 1
67208: PPUSH
67209: CALL_OW 275
67213: PUSH
67214: LD_VAR 0 1
67218: PPUSH
67219: LD_INT 2
67221: PPUSH
67222: CALL_OW 275
67226: PUSH
67227: LD_VAR 0 1
67231: PPUSH
67232: LD_INT 3
67234: PPUSH
67235: CALL_OW 275
67239: PUSH
67240: EMPTY
67241: LIST
67242: LIST
67243: LIST
67244: ST_TO_ADDR
// end ;
67245: LD_VAR 0 2
67249: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
67250: LD_INT 0
67252: PPUSH
67253: PPUSH
// result := array ;
67254: LD_ADDR_VAR 0 3
67258: PUSH
67259: LD_VAR 0 1
67263: ST_TO_ADDR
// if size > 0 then
67264: LD_VAR 0 2
67268: PUSH
67269: LD_INT 0
67271: GREATER
67272: IFFALSE 67318
// for i := array downto size do
67274: LD_ADDR_VAR 0 4
67278: PUSH
67279: DOUBLE
67280: LD_VAR 0 1
67284: INC
67285: ST_TO_ADDR
67286: LD_VAR 0 2
67290: PUSH
67291: FOR_DOWNTO
67292: IFFALSE 67316
// result := Delete ( result , result ) ;
67294: LD_ADDR_VAR 0 3
67298: PUSH
67299: LD_VAR 0 3
67303: PPUSH
67304: LD_VAR 0 3
67308: PPUSH
67309: CALL_OW 3
67313: ST_TO_ADDR
67314: GO 67291
67316: POP
67317: POP
// end ;
67318: LD_VAR 0 3
67322: RET
// export function ComExit ( unit ) ; var tmp ; begin
67323: LD_INT 0
67325: PPUSH
67326: PPUSH
// if not IsInUnit ( unit ) then
67327: LD_VAR 0 1
67331: PPUSH
67332: CALL_OW 310
67336: NOT
67337: IFFALSE 67341
// exit ;
67339: GO 67401
// tmp := IsInUnit ( unit ) ;
67341: LD_ADDR_VAR 0 3
67345: PUSH
67346: LD_VAR 0 1
67350: PPUSH
67351: CALL_OW 310
67355: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
67356: LD_VAR 0 3
67360: PPUSH
67361: CALL_OW 247
67365: PUSH
67366: LD_INT 2
67368: EQUAL
67369: IFFALSE 67382
// ComExitVehicle ( unit ) else
67371: LD_VAR 0 1
67375: PPUSH
67376: CALL_OW 121
67380: GO 67391
// ComExitBuilding ( unit ) ;
67382: LD_VAR 0 1
67386: PPUSH
67387: CALL_OW 122
// result := tmp ;
67391: LD_ADDR_VAR 0 2
67395: PUSH
67396: LD_VAR 0 3
67400: ST_TO_ADDR
// end ;
67401: LD_VAR 0 2
67405: RET
// export function ComExitAll ( units ) ; var i ; begin
67406: LD_INT 0
67408: PPUSH
67409: PPUSH
// if not units then
67410: LD_VAR 0 1
67414: NOT
67415: IFFALSE 67419
// exit ;
67417: GO 67445
// for i in units do
67419: LD_ADDR_VAR 0 3
67423: PUSH
67424: LD_VAR 0 1
67428: PUSH
67429: FOR_IN
67430: IFFALSE 67443
// ComExit ( i ) ;
67432: LD_VAR 0 3
67436: PPUSH
67437: CALL 67323 0 1
67441: GO 67429
67443: POP
67444: POP
// end ;
67445: LD_VAR 0 2
67449: RET
// export function ResetHc ; begin
67450: LD_INT 0
67452: PPUSH
// InitHc ;
67453: CALL_OW 19
// hc_importance := 0 ;
67457: LD_ADDR_OWVAR 32
67461: PUSH
67462: LD_INT 0
67464: ST_TO_ADDR
// end ;
67465: LD_VAR 0 1
67469: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
67470: LD_INT 0
67472: PPUSH
67473: PPUSH
67474: PPUSH
// _x := ( x1 + x2 ) div 2 ;
67475: LD_ADDR_VAR 0 6
67479: PUSH
67480: LD_VAR 0 1
67484: PUSH
67485: LD_VAR 0 3
67489: PLUS
67490: PUSH
67491: LD_INT 2
67493: DIV
67494: ST_TO_ADDR
// if _x < 0 then
67495: LD_VAR 0 6
67499: PUSH
67500: LD_INT 0
67502: LESS
67503: IFFALSE 67520
// _x := _x * - 1 ;
67505: LD_ADDR_VAR 0 6
67509: PUSH
67510: LD_VAR 0 6
67514: PUSH
67515: LD_INT 1
67517: NEG
67518: MUL
67519: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
67520: LD_ADDR_VAR 0 7
67524: PUSH
67525: LD_VAR 0 2
67529: PUSH
67530: LD_VAR 0 4
67534: PLUS
67535: PUSH
67536: LD_INT 2
67538: DIV
67539: ST_TO_ADDR
// if _y < 0 then
67540: LD_VAR 0 7
67544: PUSH
67545: LD_INT 0
67547: LESS
67548: IFFALSE 67565
// _y := _y * - 1 ;
67550: LD_ADDR_VAR 0 7
67554: PUSH
67555: LD_VAR 0 7
67559: PUSH
67560: LD_INT 1
67562: NEG
67563: MUL
67564: ST_TO_ADDR
// result := [ _x , _y ] ;
67565: LD_ADDR_VAR 0 5
67569: PUSH
67570: LD_VAR 0 6
67574: PUSH
67575: LD_VAR 0 7
67579: PUSH
67580: EMPTY
67581: LIST
67582: LIST
67583: ST_TO_ADDR
// end ;
67584: LD_VAR 0 5
67588: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
67589: LD_INT 0
67591: PPUSH
67592: PPUSH
67593: PPUSH
67594: PPUSH
// task := GetTaskList ( unit ) ;
67595: LD_ADDR_VAR 0 7
67599: PUSH
67600: LD_VAR 0 1
67604: PPUSH
67605: CALL_OW 437
67609: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
67610: LD_VAR 0 7
67614: NOT
67615: PUSH
67616: LD_VAR 0 1
67620: PPUSH
67621: LD_VAR 0 2
67625: PPUSH
67626: CALL_OW 308
67630: NOT
67631: AND
67632: IFFALSE 67636
// exit ;
67634: GO 67754
// if IsInArea ( unit , area ) then
67636: LD_VAR 0 1
67640: PPUSH
67641: LD_VAR 0 2
67645: PPUSH
67646: CALL_OW 308
67650: IFFALSE 67668
// begin ComMoveToArea ( unit , goAway ) ;
67652: LD_VAR 0 1
67656: PPUSH
67657: LD_VAR 0 3
67661: PPUSH
67662: CALL_OW 113
// exit ;
67666: GO 67754
// end ; if task [ 1 ] [ 1 ] <> M then
67668: LD_VAR 0 7
67672: PUSH
67673: LD_INT 1
67675: ARRAY
67676: PUSH
67677: LD_INT 1
67679: ARRAY
67680: PUSH
67681: LD_STRING M
67683: NONEQUAL
67684: IFFALSE 67688
// exit ;
67686: GO 67754
// x := task [ 1 ] [ 2 ] ;
67688: LD_ADDR_VAR 0 5
67692: PUSH
67693: LD_VAR 0 7
67697: PUSH
67698: LD_INT 1
67700: ARRAY
67701: PUSH
67702: LD_INT 2
67704: ARRAY
67705: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
67706: LD_ADDR_VAR 0 6
67710: PUSH
67711: LD_VAR 0 7
67715: PUSH
67716: LD_INT 1
67718: ARRAY
67719: PUSH
67720: LD_INT 3
67722: ARRAY
67723: ST_TO_ADDR
// if InArea ( x , y , area ) then
67724: LD_VAR 0 5
67728: PPUSH
67729: LD_VAR 0 6
67733: PPUSH
67734: LD_VAR 0 2
67738: PPUSH
67739: CALL_OW 309
67743: IFFALSE 67754
// ComStop ( unit ) ;
67745: LD_VAR 0 1
67749: PPUSH
67750: CALL_OW 141
// end ;
67754: LD_VAR 0 4
67758: RET
// export function Abs ( value ) ; begin
67759: LD_INT 0
67761: PPUSH
// result := value ;
67762: LD_ADDR_VAR 0 2
67766: PUSH
67767: LD_VAR 0 1
67771: ST_TO_ADDR
// if value < 0 then
67772: LD_VAR 0 1
67776: PUSH
67777: LD_INT 0
67779: LESS
67780: IFFALSE 67797
// result := value * - 1 ;
67782: LD_ADDR_VAR 0 2
67786: PUSH
67787: LD_VAR 0 1
67791: PUSH
67792: LD_INT 1
67794: NEG
67795: MUL
67796: ST_TO_ADDR
// end ;
67797: LD_VAR 0 2
67801: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
67802: LD_INT 0
67804: PPUSH
67805: PPUSH
67806: PPUSH
67807: PPUSH
67808: PPUSH
67809: PPUSH
67810: PPUSH
67811: PPUSH
// if not unit or not building then
67812: LD_VAR 0 1
67816: NOT
67817: PUSH
67818: LD_VAR 0 2
67822: NOT
67823: OR
67824: IFFALSE 67828
// exit ;
67826: GO 68054
// x := GetX ( building ) ;
67828: LD_ADDR_VAR 0 4
67832: PUSH
67833: LD_VAR 0 2
67837: PPUSH
67838: CALL_OW 250
67842: ST_TO_ADDR
// y := GetY ( building ) ;
67843: LD_ADDR_VAR 0 6
67847: PUSH
67848: LD_VAR 0 2
67852: PPUSH
67853: CALL_OW 251
67857: ST_TO_ADDR
// d := GetDir ( building ) ;
67858: LD_ADDR_VAR 0 8
67862: PUSH
67863: LD_VAR 0 2
67867: PPUSH
67868: CALL_OW 254
67872: ST_TO_ADDR
// r := 4 ;
67873: LD_ADDR_VAR 0 9
67877: PUSH
67878: LD_INT 4
67880: ST_TO_ADDR
// for i := 1 to 5 do
67881: LD_ADDR_VAR 0 10
67885: PUSH
67886: DOUBLE
67887: LD_INT 1
67889: DEC
67890: ST_TO_ADDR
67891: LD_INT 5
67893: PUSH
67894: FOR_TO
67895: IFFALSE 68052
// begin _x := ShiftX ( x , d , r + i ) ;
67897: LD_ADDR_VAR 0 5
67901: PUSH
67902: LD_VAR 0 4
67906: PPUSH
67907: LD_VAR 0 8
67911: PPUSH
67912: LD_VAR 0 9
67916: PUSH
67917: LD_VAR 0 10
67921: PLUS
67922: PPUSH
67923: CALL_OW 272
67927: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
67928: LD_ADDR_VAR 0 7
67932: PUSH
67933: LD_VAR 0 6
67937: PPUSH
67938: LD_VAR 0 8
67942: PPUSH
67943: LD_VAR 0 9
67947: PUSH
67948: LD_VAR 0 10
67952: PLUS
67953: PPUSH
67954: CALL_OW 273
67958: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
67959: LD_VAR 0 5
67963: PPUSH
67964: LD_VAR 0 7
67968: PPUSH
67969: CALL_OW 488
67973: PUSH
67974: LD_VAR 0 5
67978: PPUSH
67979: LD_VAR 0 7
67983: PPUSH
67984: CALL_OW 428
67988: PPUSH
67989: CALL_OW 247
67993: PUSH
67994: LD_INT 3
67996: PUSH
67997: LD_INT 2
67999: PUSH
68000: EMPTY
68001: LIST
68002: LIST
68003: IN
68004: NOT
68005: AND
68006: IFFALSE 68050
// begin ComMoveXY ( unit , _x , _y ) ;
68008: LD_VAR 0 1
68012: PPUSH
68013: LD_VAR 0 5
68017: PPUSH
68018: LD_VAR 0 7
68022: PPUSH
68023: CALL_OW 111
// result := [ _x , _y ] ;
68027: LD_ADDR_VAR 0 3
68031: PUSH
68032: LD_VAR 0 5
68036: PUSH
68037: LD_VAR 0 7
68041: PUSH
68042: EMPTY
68043: LIST
68044: LIST
68045: ST_TO_ADDR
// exit ;
68046: POP
68047: POP
68048: GO 68054
// end ; end ;
68050: GO 67894
68052: POP
68053: POP
// end ;
68054: LD_VAR 0 3
68058: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
68059: LD_INT 0
68061: PPUSH
68062: PPUSH
68063: PPUSH
// result := 0 ;
68064: LD_ADDR_VAR 0 3
68068: PUSH
68069: LD_INT 0
68071: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
68072: LD_VAR 0 1
68076: PUSH
68077: LD_INT 0
68079: LESS
68080: PUSH
68081: LD_VAR 0 1
68085: PUSH
68086: LD_INT 8
68088: GREATER
68089: OR
68090: PUSH
68091: LD_VAR 0 2
68095: PUSH
68096: LD_INT 0
68098: LESS
68099: OR
68100: PUSH
68101: LD_VAR 0 2
68105: PUSH
68106: LD_INT 8
68108: GREATER
68109: OR
68110: IFFALSE 68114
// exit ;
68112: GO 68189
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
68114: LD_ADDR_VAR 0 4
68118: PUSH
68119: LD_INT 22
68121: PUSH
68122: LD_VAR 0 2
68126: PUSH
68127: EMPTY
68128: LIST
68129: LIST
68130: PPUSH
68131: CALL_OW 69
68135: PUSH
68136: FOR_IN
68137: IFFALSE 68187
// begin un := UnitShoot ( i ) ;
68139: LD_ADDR_VAR 0 5
68143: PUSH
68144: LD_VAR 0 4
68148: PPUSH
68149: CALL_OW 504
68153: ST_TO_ADDR
// if GetSide ( un ) = side1 then
68154: LD_VAR 0 5
68158: PPUSH
68159: CALL_OW 255
68163: PUSH
68164: LD_VAR 0 1
68168: EQUAL
68169: IFFALSE 68185
// begin result := un ;
68171: LD_ADDR_VAR 0 3
68175: PUSH
68176: LD_VAR 0 5
68180: ST_TO_ADDR
// exit ;
68181: POP
68182: POP
68183: GO 68189
// end ; end ;
68185: GO 68136
68187: POP
68188: POP
// end ;
68189: LD_VAR 0 3
68193: RET
// export function GetCargoBay ( units ) ; begin
68194: LD_INT 0
68196: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
68197: LD_ADDR_VAR 0 2
68201: PUSH
68202: LD_VAR 0 1
68206: PPUSH
68207: LD_INT 2
68209: PUSH
68210: LD_INT 34
68212: PUSH
68213: LD_INT 12
68215: PUSH
68216: EMPTY
68217: LIST
68218: LIST
68219: PUSH
68220: LD_INT 34
68222: PUSH
68223: LD_INT 51
68225: PUSH
68226: EMPTY
68227: LIST
68228: LIST
68229: PUSH
68230: LD_INT 34
68232: PUSH
68233: LD_INT 32
68235: PUSH
68236: EMPTY
68237: LIST
68238: LIST
68239: PUSH
68240: LD_INT 34
68242: PUSH
68243: LD_EXP 27
68247: PUSH
68248: EMPTY
68249: LIST
68250: LIST
68251: PUSH
68252: EMPTY
68253: LIST
68254: LIST
68255: LIST
68256: LIST
68257: LIST
68258: PPUSH
68259: CALL_OW 72
68263: ST_TO_ADDR
// end ;
68264: LD_VAR 0 2
68268: RET
// export function Negate ( value ) ; begin
68269: LD_INT 0
68271: PPUSH
// result := not value ;
68272: LD_ADDR_VAR 0 2
68276: PUSH
68277: LD_VAR 0 1
68281: NOT
68282: ST_TO_ADDR
// end ;
68283: LD_VAR 0 2
68287: RET
// export function Inc ( value ) ; begin
68288: LD_INT 0
68290: PPUSH
// result := value + 1 ;
68291: LD_ADDR_VAR 0 2
68295: PUSH
68296: LD_VAR 0 1
68300: PUSH
68301: LD_INT 1
68303: PLUS
68304: ST_TO_ADDR
// end ;
68305: LD_VAR 0 2
68309: RET
// export function Dec ( value ) ; begin
68310: LD_INT 0
68312: PPUSH
// result := value - 1 ;
68313: LD_ADDR_VAR 0 2
68317: PUSH
68318: LD_VAR 0 1
68322: PUSH
68323: LD_INT 1
68325: MINUS
68326: ST_TO_ADDR
// end ;
68327: LD_VAR 0 2
68331: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
68332: LD_INT 0
68334: PPUSH
68335: PPUSH
68336: PPUSH
68337: PPUSH
68338: PPUSH
68339: PPUSH
68340: PPUSH
68341: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
68342: LD_VAR 0 1
68346: PPUSH
68347: LD_VAR 0 2
68351: PPUSH
68352: CALL_OW 488
68356: NOT
68357: PUSH
68358: LD_VAR 0 3
68362: PPUSH
68363: LD_VAR 0 4
68367: PPUSH
68368: CALL_OW 488
68372: NOT
68373: OR
68374: IFFALSE 68387
// begin result := - 1 ;
68376: LD_ADDR_VAR 0 5
68380: PUSH
68381: LD_INT 1
68383: NEG
68384: ST_TO_ADDR
// exit ;
68385: GO 68622
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
68387: LD_ADDR_VAR 0 12
68391: PUSH
68392: LD_VAR 0 1
68396: PPUSH
68397: LD_VAR 0 2
68401: PPUSH
68402: LD_VAR 0 3
68406: PPUSH
68407: LD_VAR 0 4
68411: PPUSH
68412: CALL 67470 0 4
68416: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
68417: LD_ADDR_VAR 0 11
68421: PUSH
68422: LD_VAR 0 1
68426: PPUSH
68427: LD_VAR 0 2
68431: PPUSH
68432: LD_VAR 0 12
68436: PUSH
68437: LD_INT 1
68439: ARRAY
68440: PPUSH
68441: LD_VAR 0 12
68445: PUSH
68446: LD_INT 2
68448: ARRAY
68449: PPUSH
68450: CALL_OW 298
68454: ST_TO_ADDR
// distance := 9999 ;
68455: LD_ADDR_VAR 0 10
68459: PUSH
68460: LD_INT 9999
68462: ST_TO_ADDR
// for i := 0 to 5 do
68463: LD_ADDR_VAR 0 6
68467: PUSH
68468: DOUBLE
68469: LD_INT 0
68471: DEC
68472: ST_TO_ADDR
68473: LD_INT 5
68475: PUSH
68476: FOR_TO
68477: IFFALSE 68620
// begin _x := ShiftX ( x1 , i , centerDist ) ;
68479: LD_ADDR_VAR 0 7
68483: PUSH
68484: LD_VAR 0 1
68488: PPUSH
68489: LD_VAR 0 6
68493: PPUSH
68494: LD_VAR 0 11
68498: PPUSH
68499: CALL_OW 272
68503: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
68504: LD_ADDR_VAR 0 8
68508: PUSH
68509: LD_VAR 0 2
68513: PPUSH
68514: LD_VAR 0 6
68518: PPUSH
68519: LD_VAR 0 11
68523: PPUSH
68524: CALL_OW 273
68528: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
68529: LD_VAR 0 7
68533: PPUSH
68534: LD_VAR 0 8
68538: PPUSH
68539: CALL_OW 488
68543: NOT
68544: IFFALSE 68548
// continue ;
68546: GO 68476
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
68548: LD_ADDR_VAR 0 9
68552: PUSH
68553: LD_VAR 0 12
68557: PUSH
68558: LD_INT 1
68560: ARRAY
68561: PPUSH
68562: LD_VAR 0 12
68566: PUSH
68567: LD_INT 2
68569: ARRAY
68570: PPUSH
68571: LD_VAR 0 7
68575: PPUSH
68576: LD_VAR 0 8
68580: PPUSH
68581: CALL_OW 298
68585: ST_TO_ADDR
// if tmp < distance then
68586: LD_VAR 0 9
68590: PUSH
68591: LD_VAR 0 10
68595: LESS
68596: IFFALSE 68618
// begin result := i ;
68598: LD_ADDR_VAR 0 5
68602: PUSH
68603: LD_VAR 0 6
68607: ST_TO_ADDR
// distance := tmp ;
68608: LD_ADDR_VAR 0 10
68612: PUSH
68613: LD_VAR 0 9
68617: ST_TO_ADDR
// end ; end ;
68618: GO 68476
68620: POP
68621: POP
// end ;
68622: LD_VAR 0 5
68626: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
68627: LD_INT 0
68629: PPUSH
68630: PPUSH
// if not driver or not IsInUnit ( driver ) then
68631: LD_VAR 0 1
68635: NOT
68636: PUSH
68637: LD_VAR 0 1
68641: PPUSH
68642: CALL_OW 310
68646: NOT
68647: OR
68648: IFFALSE 68652
// exit ;
68650: GO 68742
// vehicle := IsInUnit ( driver ) ;
68652: LD_ADDR_VAR 0 3
68656: PUSH
68657: LD_VAR 0 1
68661: PPUSH
68662: CALL_OW 310
68666: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
68667: LD_VAR 0 1
68671: PPUSH
68672: LD_STRING \
68674: PUSH
68675: LD_INT 0
68677: PUSH
68678: LD_INT 0
68680: PUSH
68681: LD_INT 0
68683: PUSH
68684: LD_INT 0
68686: PUSH
68687: LD_INT 0
68689: PUSH
68690: LD_INT 0
68692: PUSH
68693: EMPTY
68694: LIST
68695: LIST
68696: LIST
68697: LIST
68698: LIST
68699: LIST
68700: LIST
68701: PUSH
68702: LD_STRING E
68704: PUSH
68705: LD_INT 0
68707: PUSH
68708: LD_INT 0
68710: PUSH
68711: LD_VAR 0 3
68715: PUSH
68716: LD_INT 0
68718: PUSH
68719: LD_INT 0
68721: PUSH
68722: LD_INT 0
68724: PUSH
68725: EMPTY
68726: LIST
68727: LIST
68728: LIST
68729: LIST
68730: LIST
68731: LIST
68732: LIST
68733: PUSH
68734: EMPTY
68735: LIST
68736: LIST
68737: PPUSH
68738: CALL_OW 446
// end ;
68742: LD_VAR 0 2
68746: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
68747: LD_INT 0
68749: PPUSH
68750: PPUSH
// if not driver or not IsInUnit ( driver ) then
68751: LD_VAR 0 1
68755: NOT
68756: PUSH
68757: LD_VAR 0 1
68761: PPUSH
68762: CALL_OW 310
68766: NOT
68767: OR
68768: IFFALSE 68772
// exit ;
68770: GO 68862
// vehicle := IsInUnit ( driver ) ;
68772: LD_ADDR_VAR 0 3
68776: PUSH
68777: LD_VAR 0 1
68781: PPUSH
68782: CALL_OW 310
68786: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
68787: LD_VAR 0 1
68791: PPUSH
68792: LD_STRING \
68794: PUSH
68795: LD_INT 0
68797: PUSH
68798: LD_INT 0
68800: PUSH
68801: LD_INT 0
68803: PUSH
68804: LD_INT 0
68806: PUSH
68807: LD_INT 0
68809: PUSH
68810: LD_INT 0
68812: PUSH
68813: EMPTY
68814: LIST
68815: LIST
68816: LIST
68817: LIST
68818: LIST
68819: LIST
68820: LIST
68821: PUSH
68822: LD_STRING E
68824: PUSH
68825: LD_INT 0
68827: PUSH
68828: LD_INT 0
68830: PUSH
68831: LD_VAR 0 3
68835: PUSH
68836: LD_INT 0
68838: PUSH
68839: LD_INT 0
68841: PUSH
68842: LD_INT 0
68844: PUSH
68845: EMPTY
68846: LIST
68847: LIST
68848: LIST
68849: LIST
68850: LIST
68851: LIST
68852: LIST
68853: PUSH
68854: EMPTY
68855: LIST
68856: LIST
68857: PPUSH
68858: CALL_OW 447
// end ;
68862: LD_VAR 0 2
68866: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
68867: LD_INT 0
68869: PPUSH
68870: PPUSH
68871: PPUSH
// tmp := [ ] ;
68872: LD_ADDR_VAR 0 5
68876: PUSH
68877: EMPTY
68878: ST_TO_ADDR
// for i in units do
68879: LD_ADDR_VAR 0 4
68883: PUSH
68884: LD_VAR 0 1
68888: PUSH
68889: FOR_IN
68890: IFFALSE 68928
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
68892: LD_ADDR_VAR 0 5
68896: PUSH
68897: LD_VAR 0 5
68901: PPUSH
68902: LD_VAR 0 5
68906: PUSH
68907: LD_INT 1
68909: PLUS
68910: PPUSH
68911: LD_VAR 0 4
68915: PPUSH
68916: CALL_OW 256
68920: PPUSH
68921: CALL_OW 2
68925: ST_TO_ADDR
68926: GO 68889
68928: POP
68929: POP
// if not tmp then
68930: LD_VAR 0 5
68934: NOT
68935: IFFALSE 68939
// exit ;
68937: GO 68987
// if asc then
68939: LD_VAR 0 2
68943: IFFALSE 68967
// result := SortListByListAsc ( units , tmp ) else
68945: LD_ADDR_VAR 0 3
68949: PUSH
68950: LD_VAR 0 1
68954: PPUSH
68955: LD_VAR 0 5
68959: PPUSH
68960: CALL_OW 76
68964: ST_TO_ADDR
68965: GO 68987
// result := SortListByListDesc ( units , tmp ) ;
68967: LD_ADDR_VAR 0 3
68971: PUSH
68972: LD_VAR 0 1
68976: PPUSH
68977: LD_VAR 0 5
68981: PPUSH
68982: CALL_OW 77
68986: ST_TO_ADDR
// end ;
68987: LD_VAR 0 3
68991: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
68992: LD_INT 0
68994: PPUSH
68995: PPUSH
// task := GetTaskList ( mech ) ;
68996: LD_ADDR_VAR 0 4
69000: PUSH
69001: LD_VAR 0 1
69005: PPUSH
69006: CALL_OW 437
69010: ST_TO_ADDR
// if not task then
69011: LD_VAR 0 4
69015: NOT
69016: IFFALSE 69020
// exit ;
69018: GO 69062
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
69020: LD_ADDR_VAR 0 3
69024: PUSH
69025: LD_VAR 0 4
69029: PUSH
69030: LD_INT 1
69032: ARRAY
69033: PUSH
69034: LD_INT 1
69036: ARRAY
69037: PUSH
69038: LD_STRING r
69040: EQUAL
69041: PUSH
69042: LD_VAR 0 4
69046: PUSH
69047: LD_INT 1
69049: ARRAY
69050: PUSH
69051: LD_INT 4
69053: ARRAY
69054: PUSH
69055: LD_VAR 0 2
69059: EQUAL
69060: AND
69061: ST_TO_ADDR
// end ;
69062: LD_VAR 0 3
69066: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
69067: LD_INT 0
69069: PPUSH
// SetDir ( unit , d ) ;
69070: LD_VAR 0 1
69074: PPUSH
69075: LD_VAR 0 4
69079: PPUSH
69080: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
69084: LD_VAR 0 1
69088: PPUSH
69089: LD_VAR 0 2
69093: PPUSH
69094: LD_VAR 0 3
69098: PPUSH
69099: LD_VAR 0 5
69103: PPUSH
69104: CALL_OW 48
// end ;
69108: LD_VAR 0 6
69112: RET
// export function ToNaturalNumber ( number ) ; begin
69113: LD_INT 0
69115: PPUSH
// result := number div 1 ;
69116: LD_ADDR_VAR 0 2
69120: PUSH
69121: LD_VAR 0 1
69125: PUSH
69126: LD_INT 1
69128: DIV
69129: ST_TO_ADDR
// if number < 0 then
69130: LD_VAR 0 1
69134: PUSH
69135: LD_INT 0
69137: LESS
69138: IFFALSE 69148
// result := 0 ;
69140: LD_ADDR_VAR 0 2
69144: PUSH
69145: LD_INT 0
69147: ST_TO_ADDR
// end ;
69148: LD_VAR 0 2
69152: RET
// export function SortByClass ( units , class ) ; var un ; begin
69153: LD_INT 0
69155: PPUSH
69156: PPUSH
// if not units or not class then
69157: LD_VAR 0 1
69161: NOT
69162: PUSH
69163: LD_VAR 0 2
69167: NOT
69168: OR
69169: IFFALSE 69173
// exit ;
69171: GO 69268
// result := [ ] ;
69173: LD_ADDR_VAR 0 3
69177: PUSH
69178: EMPTY
69179: ST_TO_ADDR
// for un in units do
69180: LD_ADDR_VAR 0 4
69184: PUSH
69185: LD_VAR 0 1
69189: PUSH
69190: FOR_IN
69191: IFFALSE 69266
// if GetClass ( un ) = class then
69193: LD_VAR 0 4
69197: PPUSH
69198: CALL_OW 257
69202: PUSH
69203: LD_VAR 0 2
69207: EQUAL
69208: IFFALSE 69235
// result := Insert ( result , 1 , un ) else
69210: LD_ADDR_VAR 0 3
69214: PUSH
69215: LD_VAR 0 3
69219: PPUSH
69220: LD_INT 1
69222: PPUSH
69223: LD_VAR 0 4
69227: PPUSH
69228: CALL_OW 2
69232: ST_TO_ADDR
69233: GO 69264
// result := Replace ( result , result + 1 , un ) ;
69235: LD_ADDR_VAR 0 3
69239: PUSH
69240: LD_VAR 0 3
69244: PPUSH
69245: LD_VAR 0 3
69249: PUSH
69250: LD_INT 1
69252: PLUS
69253: PPUSH
69254: LD_VAR 0 4
69258: PPUSH
69259: CALL_OW 1
69263: ST_TO_ADDR
69264: GO 69190
69266: POP
69267: POP
// end ;
69268: LD_VAR 0 3
69272: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
69273: LD_INT 0
69275: PPUSH
69276: PPUSH
69277: PPUSH
69278: PPUSH
69279: PPUSH
69280: PPUSH
69281: PPUSH
// result := [ ] ;
69282: LD_ADDR_VAR 0 4
69286: PUSH
69287: EMPTY
69288: ST_TO_ADDR
// if x - r < 0 then
69289: LD_VAR 0 1
69293: PUSH
69294: LD_VAR 0 3
69298: MINUS
69299: PUSH
69300: LD_INT 0
69302: LESS
69303: IFFALSE 69315
// min_x := 0 else
69305: LD_ADDR_VAR 0 8
69309: PUSH
69310: LD_INT 0
69312: ST_TO_ADDR
69313: GO 69331
// min_x := x - r ;
69315: LD_ADDR_VAR 0 8
69319: PUSH
69320: LD_VAR 0 1
69324: PUSH
69325: LD_VAR 0 3
69329: MINUS
69330: ST_TO_ADDR
// if y - r < 0 then
69331: LD_VAR 0 2
69335: PUSH
69336: LD_VAR 0 3
69340: MINUS
69341: PUSH
69342: LD_INT 0
69344: LESS
69345: IFFALSE 69357
// min_y := 0 else
69347: LD_ADDR_VAR 0 7
69351: PUSH
69352: LD_INT 0
69354: ST_TO_ADDR
69355: GO 69373
// min_y := y - r ;
69357: LD_ADDR_VAR 0 7
69361: PUSH
69362: LD_VAR 0 2
69366: PUSH
69367: LD_VAR 0 3
69371: MINUS
69372: ST_TO_ADDR
// max_x := x + r ;
69373: LD_ADDR_VAR 0 9
69377: PUSH
69378: LD_VAR 0 1
69382: PUSH
69383: LD_VAR 0 3
69387: PLUS
69388: ST_TO_ADDR
// max_y := y + r ;
69389: LD_ADDR_VAR 0 10
69393: PUSH
69394: LD_VAR 0 2
69398: PUSH
69399: LD_VAR 0 3
69403: PLUS
69404: ST_TO_ADDR
// for _x = min_x to max_x do
69405: LD_ADDR_VAR 0 5
69409: PUSH
69410: DOUBLE
69411: LD_VAR 0 8
69415: DEC
69416: ST_TO_ADDR
69417: LD_VAR 0 9
69421: PUSH
69422: FOR_TO
69423: IFFALSE 69524
// for _y = min_y to max_y do
69425: LD_ADDR_VAR 0 6
69429: PUSH
69430: DOUBLE
69431: LD_VAR 0 7
69435: DEC
69436: ST_TO_ADDR
69437: LD_VAR 0 10
69441: PUSH
69442: FOR_TO
69443: IFFALSE 69520
// begin if not ValidHex ( _x , _y ) then
69445: LD_VAR 0 5
69449: PPUSH
69450: LD_VAR 0 6
69454: PPUSH
69455: CALL_OW 488
69459: NOT
69460: IFFALSE 69464
// continue ;
69462: GO 69442
// if GetResourceTypeXY ( _x , _y ) then
69464: LD_VAR 0 5
69468: PPUSH
69469: LD_VAR 0 6
69473: PPUSH
69474: CALL_OW 283
69478: IFFALSE 69518
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
69480: LD_ADDR_VAR 0 4
69484: PUSH
69485: LD_VAR 0 4
69489: PPUSH
69490: LD_VAR 0 4
69494: PUSH
69495: LD_INT 1
69497: PLUS
69498: PPUSH
69499: LD_VAR 0 5
69503: PUSH
69504: LD_VAR 0 6
69508: PUSH
69509: EMPTY
69510: LIST
69511: LIST
69512: PPUSH
69513: CALL_OW 1
69517: ST_TO_ADDR
// end ;
69518: GO 69442
69520: POP
69521: POP
69522: GO 69422
69524: POP
69525: POP
// end ;
69526: LD_VAR 0 4
69530: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
69531: LD_INT 0
69533: PPUSH
69534: PPUSH
69535: PPUSH
69536: PPUSH
69537: PPUSH
69538: PPUSH
69539: PPUSH
69540: PPUSH
// if not units then
69541: LD_VAR 0 1
69545: NOT
69546: IFFALSE 69550
// exit ;
69548: GO 69975
// result := UnitFilter ( units , [ f_ok ] ) ;
69550: LD_ADDR_VAR 0 3
69554: PUSH
69555: LD_VAR 0 1
69559: PPUSH
69560: LD_INT 50
69562: PUSH
69563: EMPTY
69564: LIST
69565: PPUSH
69566: CALL_OW 72
69570: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
69571: LD_ADDR_VAR 0 8
69575: PUSH
69576: LD_VAR 0 1
69580: PUSH
69581: LD_INT 1
69583: ARRAY
69584: PPUSH
69585: CALL_OW 255
69589: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
69590: LD_ADDR_VAR 0 10
69594: PUSH
69595: LD_INT 29
69597: PUSH
69598: LD_EXP 30
69602: PUSH
69603: EMPTY
69604: LIST
69605: LIST
69606: ST_TO_ADDR
// if not result then
69607: LD_VAR 0 3
69611: NOT
69612: IFFALSE 69616
// exit ;
69614: GO 69975
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
69616: LD_ADDR_VAR 0 5
69620: PUSH
69621: LD_INT 81
69623: PUSH
69624: LD_VAR 0 8
69628: PUSH
69629: EMPTY
69630: LIST
69631: LIST
69632: PPUSH
69633: CALL_OW 69
69637: ST_TO_ADDR
// for i in result do
69638: LD_ADDR_VAR 0 4
69642: PUSH
69643: LD_VAR 0 3
69647: PUSH
69648: FOR_IN
69649: IFFALSE 69973
// begin tag := GetTag ( i ) + 1 ;
69651: LD_ADDR_VAR 0 9
69655: PUSH
69656: LD_VAR 0 4
69660: PPUSH
69661: CALL_OW 110
69665: PUSH
69666: LD_INT 1
69668: PLUS
69669: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
69670: LD_ADDR_VAR 0 7
69674: PUSH
69675: LD_VAR 0 4
69679: PPUSH
69680: CALL_OW 250
69684: PPUSH
69685: LD_VAR 0 4
69689: PPUSH
69690: CALL_OW 251
69694: PPUSH
69695: LD_INT 6
69697: PPUSH
69698: CALL 69273 0 3
69702: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
69703: LD_VAR 0 7
69707: PUSH
69708: LD_VAR 0 4
69712: PPUSH
69713: CALL_OW 264
69717: PUSH
69718: LD_VAR 0 10
69722: IN
69723: NOT
69724: AND
69725: IFFALSE 69764
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
69727: LD_VAR 0 4
69731: PPUSH
69732: LD_VAR 0 7
69736: PUSH
69737: LD_INT 1
69739: ARRAY
69740: PUSH
69741: LD_INT 1
69743: ARRAY
69744: PPUSH
69745: LD_VAR 0 7
69749: PUSH
69750: LD_INT 1
69752: ARRAY
69753: PUSH
69754: LD_INT 2
69756: ARRAY
69757: PPUSH
69758: CALL_OW 116
69762: GO 69971
// if path > tag then
69764: LD_VAR 0 2
69768: PUSH
69769: LD_VAR 0 9
69773: GREATER
69774: IFFALSE 69941
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
69776: LD_ADDR_VAR 0 6
69780: PUSH
69781: LD_VAR 0 5
69785: PPUSH
69786: LD_INT 91
69788: PUSH
69789: LD_VAR 0 4
69793: PUSH
69794: LD_INT 12
69796: PUSH
69797: EMPTY
69798: LIST
69799: LIST
69800: LIST
69801: PPUSH
69802: CALL_OW 72
69806: ST_TO_ADDR
// if nearEnemy then
69807: LD_VAR 0 6
69811: IFFALSE 69839
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
69813: LD_VAR 0 4
69817: PPUSH
69818: LD_VAR 0 6
69822: PPUSH
69823: LD_VAR 0 4
69827: PPUSH
69828: CALL_OW 74
69832: PPUSH
69833: CALL_OW 115
69837: GO 69939
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
69839: LD_VAR 0 4
69843: PPUSH
69844: LD_VAR 0 2
69848: PUSH
69849: LD_VAR 0 9
69853: ARRAY
69854: PUSH
69855: LD_INT 1
69857: ARRAY
69858: PPUSH
69859: LD_VAR 0 2
69863: PUSH
69864: LD_VAR 0 9
69868: ARRAY
69869: PUSH
69870: LD_INT 2
69872: ARRAY
69873: PPUSH
69874: CALL_OW 297
69878: PUSH
69879: LD_INT 6
69881: GREATER
69882: IFFALSE 69925
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
69884: LD_VAR 0 4
69888: PPUSH
69889: LD_VAR 0 2
69893: PUSH
69894: LD_VAR 0 9
69898: ARRAY
69899: PUSH
69900: LD_INT 1
69902: ARRAY
69903: PPUSH
69904: LD_VAR 0 2
69908: PUSH
69909: LD_VAR 0 9
69913: ARRAY
69914: PUSH
69915: LD_INT 2
69917: ARRAY
69918: PPUSH
69919: CALL_OW 114
69923: GO 69939
// SetTag ( i , tag ) ;
69925: LD_VAR 0 4
69929: PPUSH
69930: LD_VAR 0 9
69934: PPUSH
69935: CALL_OW 109
// end else
69939: GO 69971
// if enemy then
69941: LD_VAR 0 5
69945: IFFALSE 69971
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
69947: LD_VAR 0 4
69951: PPUSH
69952: LD_VAR 0 5
69956: PPUSH
69957: LD_VAR 0 4
69961: PPUSH
69962: CALL_OW 74
69966: PPUSH
69967: CALL_OW 115
// end ;
69971: GO 69648
69973: POP
69974: POP
// end ;
69975: LD_VAR 0 3
69979: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
69980: LD_INT 0
69982: PPUSH
69983: PPUSH
69984: PPUSH
// if not unit or IsInUnit ( unit ) then
69985: LD_VAR 0 1
69989: NOT
69990: PUSH
69991: LD_VAR 0 1
69995: PPUSH
69996: CALL_OW 310
70000: OR
70001: IFFALSE 70005
// exit ;
70003: GO 70096
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
70005: LD_ADDR_VAR 0 4
70009: PUSH
70010: LD_VAR 0 1
70014: PPUSH
70015: CALL_OW 250
70019: PPUSH
70020: LD_VAR 0 2
70024: PPUSH
70025: LD_INT 1
70027: PPUSH
70028: CALL_OW 272
70032: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
70033: LD_ADDR_VAR 0 5
70037: PUSH
70038: LD_VAR 0 1
70042: PPUSH
70043: CALL_OW 251
70047: PPUSH
70048: LD_VAR 0 2
70052: PPUSH
70053: LD_INT 1
70055: PPUSH
70056: CALL_OW 273
70060: ST_TO_ADDR
// if ValidHex ( x , y ) then
70061: LD_VAR 0 4
70065: PPUSH
70066: LD_VAR 0 5
70070: PPUSH
70071: CALL_OW 488
70075: IFFALSE 70096
// ComTurnXY ( unit , x , y ) ;
70077: LD_VAR 0 1
70081: PPUSH
70082: LD_VAR 0 4
70086: PPUSH
70087: LD_VAR 0 5
70091: PPUSH
70092: CALL_OW 118
// end ;
70096: LD_VAR 0 3
70100: RET
// export function SeeUnits ( side , units ) ; var i ; begin
70101: LD_INT 0
70103: PPUSH
70104: PPUSH
// result := false ;
70105: LD_ADDR_VAR 0 3
70109: PUSH
70110: LD_INT 0
70112: ST_TO_ADDR
// if not units then
70113: LD_VAR 0 2
70117: NOT
70118: IFFALSE 70122
// exit ;
70120: GO 70167
// for i in units do
70122: LD_ADDR_VAR 0 4
70126: PUSH
70127: LD_VAR 0 2
70131: PUSH
70132: FOR_IN
70133: IFFALSE 70165
// if See ( side , i ) then
70135: LD_VAR 0 1
70139: PPUSH
70140: LD_VAR 0 4
70144: PPUSH
70145: CALL_OW 292
70149: IFFALSE 70163
// begin result := true ;
70151: LD_ADDR_VAR 0 3
70155: PUSH
70156: LD_INT 1
70158: ST_TO_ADDR
// exit ;
70159: POP
70160: POP
70161: GO 70167
// end ;
70163: GO 70132
70165: POP
70166: POP
// end ;
70167: LD_VAR 0 3
70171: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
70172: LD_INT 0
70174: PPUSH
70175: PPUSH
70176: PPUSH
70177: PPUSH
// if not unit or not points then
70178: LD_VAR 0 1
70182: NOT
70183: PUSH
70184: LD_VAR 0 2
70188: NOT
70189: OR
70190: IFFALSE 70194
// exit ;
70192: GO 70284
// dist := 99999 ;
70194: LD_ADDR_VAR 0 5
70198: PUSH
70199: LD_INT 99999
70201: ST_TO_ADDR
// for i in points do
70202: LD_ADDR_VAR 0 4
70206: PUSH
70207: LD_VAR 0 2
70211: PUSH
70212: FOR_IN
70213: IFFALSE 70282
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
70215: LD_ADDR_VAR 0 6
70219: PUSH
70220: LD_VAR 0 1
70224: PPUSH
70225: LD_VAR 0 4
70229: PUSH
70230: LD_INT 1
70232: ARRAY
70233: PPUSH
70234: LD_VAR 0 4
70238: PUSH
70239: LD_INT 2
70241: ARRAY
70242: PPUSH
70243: CALL_OW 297
70247: ST_TO_ADDR
// if tmpDist < dist then
70248: LD_VAR 0 6
70252: PUSH
70253: LD_VAR 0 5
70257: LESS
70258: IFFALSE 70280
// begin result := i ;
70260: LD_ADDR_VAR 0 3
70264: PUSH
70265: LD_VAR 0 4
70269: ST_TO_ADDR
// dist := tmpDist ;
70270: LD_ADDR_VAR 0 5
70274: PUSH
70275: LD_VAR 0 6
70279: ST_TO_ADDR
// end ; end ;
70280: GO 70212
70282: POP
70283: POP
// end ; end_of_file
70284: LD_VAR 0 3
70288: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
70289: LD_VAR 0 1
70293: PUSH
70294: LD_INT 200
70296: DOUBLE
70297: GREATEREQUAL
70298: IFFALSE 70306
70300: LD_INT 299
70302: DOUBLE
70303: LESSEQUAL
70304: IFTRUE 70308
70306: GO 70340
70308: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
70309: LD_VAR 0 1
70313: PPUSH
70314: LD_VAR 0 2
70318: PPUSH
70319: LD_VAR 0 3
70323: PPUSH
70324: LD_VAR 0 4
70328: PPUSH
70329: LD_VAR 0 5
70333: PPUSH
70334: CALL 25992 0 5
70338: GO 70417
70340: LD_INT 300
70342: DOUBLE
70343: GREATEREQUAL
70344: IFFALSE 70352
70346: LD_INT 399
70348: DOUBLE
70349: LESSEQUAL
70350: IFTRUE 70354
70352: GO 70416
70354: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
70355: LD_VAR 0 1
70359: PPUSH
70360: LD_VAR 0 2
70364: PPUSH
70365: LD_VAR 0 3
70369: PPUSH
70370: LD_VAR 0 4
70374: PPUSH
70375: LD_VAR 0 5
70379: PPUSH
70380: LD_VAR 0 6
70384: PPUSH
70385: LD_VAR 0 7
70389: PPUSH
70390: LD_VAR 0 8
70394: PPUSH
70395: LD_VAR 0 9
70399: PPUSH
70400: LD_VAR 0 10
70404: PPUSH
70405: LD_VAR 0 11
70409: PPUSH
70410: CALL 23634 0 11
70414: GO 70417
70416: POP
// end ;
70417: PPOPN 11
70419: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
70420: LD_VAR 0 1
70424: PPUSH
70425: LD_VAR 0 2
70429: PPUSH
70430: LD_VAR 0 3
70434: PPUSH
70435: LD_VAR 0 4
70439: PPUSH
70440: LD_VAR 0 5
70444: PPUSH
70445: CALL 25728 0 5
// end ; end_of_file
70449: PPOPN 5
70451: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
70452: LD_VAR 0 1
70456: PPUSH
70457: LD_VAR 0 2
70461: PPUSH
70462: LD_VAR 0 3
70466: PPUSH
70467: LD_VAR 0 4
70471: PPUSH
70472: LD_VAR 0 5
70476: PPUSH
70477: LD_VAR 0 6
70481: PPUSH
70482: CALL 11327 0 6
// end ;
70486: PPOPN 6
70488: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
70489: CALL 11302 0 0
// end ;
70493: PPOPN 1
70495: END
